
bin/ble_freertos_vole.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 95 59 02 00 fd 59 02 00 b1 10 02 00     .+...Y...Y......
    c010:	03 5a 02 00 03 5a 02 00 03 5a 02 00 00 00 00 00     .Z...Z...Z......
	...
    c02c:	81 9b 01 00 09 5a 02 00 00 00 00 00 61 9d 01 00     .....Z......a...
    c03c:	c9 9d 01 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .....Z...Z...Z..
    c04c:	09 5a 02 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .Z...Z...Z...Z..
    c05c:	09 5a 02 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .Z...Z...Z...Z..
    c06c:	09 5a 02 00 4d 02 02 00 09 5a 02 00 f5 02 02 00     .Z..M....Z......
    c07c:	25 02 02 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     %....Z...Z...Z..
    c08c:	09 5a 02 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .Z...Z...Z...Z..
    c09c:	19 a0 01 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .....Z...Z...Z..
    c0ac:	09 5a 02 00 09 5a 02 00 09 5a 02 00 09 5a 02 00     .Z...Z...Z...Z..
    c0bc:	09 5a 02 00                                         .Z..

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <strcpy>:
    c3f8:	ea80 0201 	eor.w	r2, r0, r1
    c3fc:	4684      	mov	ip, r0
    c3fe:	f012 0f03 	tst.w	r2, #3
    c402:	d14f      	bne.n	c4a4 <strcpy+0xac>
    c404:	f011 0f03 	tst.w	r1, #3
    c408:	d132      	bne.n	c470 <strcpy+0x78>
    c40a:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c40e:	f011 0f04 	tst.w	r1, #4
    c412:	f851 3b04 	ldr.w	r3, [r1], #4
    c416:	d00b      	beq.n	c430 <strcpy+0x38>
    c418:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c41c:	439a      	bics	r2, r3
    c41e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c422:	bf04      	itt	eq
    c424:	f84c 3b04 	streq.w	r3, [ip], #4
    c428:	f851 3b04 	ldreq.w	r3, [r1], #4
    c42c:	d116      	bne.n	c45c <strcpy+0x64>
    c42e:	bf00      	nop
    c430:	f851 4b04 	ldr.w	r4, [r1], #4
    c434:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c438:	439a      	bics	r2, r3
    c43a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c43e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c442:	d10b      	bne.n	c45c <strcpy+0x64>
    c444:	f84c 3b04 	str.w	r3, [ip], #4
    c448:	43a2      	bics	r2, r4
    c44a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c44e:	bf04      	itt	eq
    c450:	f851 3b04 	ldreq.w	r3, [r1], #4
    c454:	f84c 4b04 	streq.w	r4, [ip], #4
    c458:	d0ea      	beq.n	c430 <strcpy+0x38>
    c45a:	4623      	mov	r3, r4
    c45c:	f80c 3b01 	strb.w	r3, [ip], #1
    c460:	f013 0fff 	tst.w	r3, #255	; 0xff
    c464:	ea4f 2333 	mov.w	r3, r3, ror #8
    c468:	d1f8      	bne.n	c45c <strcpy+0x64>
    c46a:	f85d 4b04 	ldr.w	r4, [sp], #4
    c46e:	4770      	bx	lr
    c470:	f011 0f01 	tst.w	r1, #1
    c474:	d006      	beq.n	c484 <strcpy+0x8c>
    c476:	f811 2b01 	ldrb.w	r2, [r1], #1
    c47a:	f80c 2b01 	strb.w	r2, [ip], #1
    c47e:	2a00      	cmp	r2, #0
    c480:	bf08      	it	eq
    c482:	4770      	bxeq	lr
    c484:	f011 0f02 	tst.w	r1, #2
    c488:	d0bf      	beq.n	c40a <strcpy+0x12>
    c48a:	f831 2b02 	ldrh.w	r2, [r1], #2
    c48e:	f012 0fff 	tst.w	r2, #255	; 0xff
    c492:	bf16      	itet	ne
    c494:	f82c 2b02 	strhne.w	r2, [ip], #2
    c498:	f88c 2000 	strbeq.w	r2, [ip]
    c49c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c4a0:	d1b3      	bne.n	c40a <strcpy+0x12>
    c4a2:	4770      	bx	lr
    c4a4:	f811 2b01 	ldrb.w	r2, [r1], #1
    c4a8:	f80c 2b01 	strb.w	r2, [ip], #1
    c4ac:	2a00      	cmp	r2, #0
    c4ae:	d1f9      	bne.n	c4a4 <strcpy+0xac>
    c4b0:	4770      	bx	lr
    c4b2:	bf00      	nop
	...

0000c4c0 <strlen>:
    c4c0:	f890 f000 	pld	[r0]
    c4c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c4c8:	f020 0107 	bic.w	r1, r0, #7
    c4cc:	f06f 0c00 	mvn.w	ip, #0
    c4d0:	f010 0407 	ands.w	r4, r0, #7
    c4d4:	f891 f020 	pld	[r1, #32]
    c4d8:	f040 8049 	bne.w	c56e <strlen+0xae>
    c4dc:	f04f 0400 	mov.w	r4, #0
    c4e0:	f06f 0007 	mvn.w	r0, #7
    c4e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c4e8:	f891 f040 	pld	[r1, #64]	; 0x40
    c4ec:	f100 0008 	add.w	r0, r0, #8
    c4f0:	fa82 f24c 	uadd8	r2, r2, ip
    c4f4:	faa4 f28c 	sel	r2, r4, ip
    c4f8:	fa83 f34c 	uadd8	r3, r3, ip
    c4fc:	faa2 f38c 	sel	r3, r2, ip
    c500:	bb4b      	cbnz	r3, c556 <strlen+0x96>
    c502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c506:	fa82 f24c 	uadd8	r2, r2, ip
    c50a:	f100 0008 	add.w	r0, r0, #8
    c50e:	faa4 f28c 	sel	r2, r4, ip
    c512:	fa83 f34c 	uadd8	r3, r3, ip
    c516:	faa2 f38c 	sel	r3, r2, ip
    c51a:	b9e3      	cbnz	r3, c556 <strlen+0x96>
    c51c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c520:	fa82 f24c 	uadd8	r2, r2, ip
    c524:	f100 0008 	add.w	r0, r0, #8
    c528:	faa4 f28c 	sel	r2, r4, ip
    c52c:	fa83 f34c 	uadd8	r3, r3, ip
    c530:	faa2 f38c 	sel	r3, r2, ip
    c534:	b97b      	cbnz	r3, c556 <strlen+0x96>
    c536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c53a:	f101 0120 	add.w	r1, r1, #32
    c53e:	fa82 f24c 	uadd8	r2, r2, ip
    c542:	f100 0008 	add.w	r0, r0, #8
    c546:	faa4 f28c 	sel	r2, r4, ip
    c54a:	fa83 f34c 	uadd8	r3, r3, ip
    c54e:	faa2 f38c 	sel	r3, r2, ip
    c552:	2b00      	cmp	r3, #0
    c554:	d0c6      	beq.n	c4e4 <strlen+0x24>
    c556:	2a00      	cmp	r2, #0
    c558:	bf04      	itt	eq
    c55a:	3004      	addeq	r0, #4
    c55c:	461a      	moveq	r2, r3
    c55e:	ba12      	rev	r2, r2
    c560:	fab2 f282 	clz	r2, r2
    c564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c56c:	4770      	bx	lr
    c56e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c572:	f004 0503 	and.w	r5, r4, #3
    c576:	f1c4 0000 	rsb	r0, r4, #0
    c57a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c57e:	f014 0f04 	tst.w	r4, #4
    c582:	f891 f040 	pld	[r1, #64]	; 0x40
    c586:	fa0c f505 	lsl.w	r5, ip, r5
    c58a:	ea62 0205 	orn	r2, r2, r5
    c58e:	bf1c      	itt	ne
    c590:	ea63 0305 	ornne	r3, r3, r5
    c594:	4662      	movne	r2, ip
    c596:	f04f 0400 	mov.w	r4, #0
    c59a:	e7a9      	b.n	c4f0 <strlen+0x30>

0000c59c <__aeabi_drsub>:
    c59c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c5a0:	e002      	b.n	c5a8 <__adddf3>
    c5a2:	bf00      	nop

0000c5a4 <__aeabi_dsub>:
    c5a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c5a8 <__adddf3>:
    c5a8:	b530      	push	{r4, r5, lr}
    c5aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c5ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c5b2:	ea94 0f05 	teq	r4, r5
    c5b6:	bf08      	it	eq
    c5b8:	ea90 0f02 	teqeq	r0, r2
    c5bc:	bf1f      	itttt	ne
    c5be:	ea54 0c00 	orrsne.w	ip, r4, r0
    c5c2:	ea55 0c02 	orrsne.w	ip, r5, r2
    c5c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c5ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c5ce:	f000 80e2 	beq.w	c796 <__adddf3+0x1ee>
    c5d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c5d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c5da:	bfb8      	it	lt
    c5dc:	426d      	neglt	r5, r5
    c5de:	dd0c      	ble.n	c5fa <__adddf3+0x52>
    c5e0:	442c      	add	r4, r5
    c5e2:	ea80 0202 	eor.w	r2, r0, r2
    c5e6:	ea81 0303 	eor.w	r3, r1, r3
    c5ea:	ea82 0000 	eor.w	r0, r2, r0
    c5ee:	ea83 0101 	eor.w	r1, r3, r1
    c5f2:	ea80 0202 	eor.w	r2, r0, r2
    c5f6:	ea81 0303 	eor.w	r3, r1, r3
    c5fa:	2d36      	cmp	r5, #54	; 0x36
    c5fc:	bf88      	it	hi
    c5fe:	bd30      	pophi	{r4, r5, pc}
    c600:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c604:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c608:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c60c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c610:	d002      	beq.n	c618 <__adddf3+0x70>
    c612:	4240      	negs	r0, r0
    c614:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c618:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c61c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c620:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c624:	d002      	beq.n	c62c <__adddf3+0x84>
    c626:	4252      	negs	r2, r2
    c628:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c62c:	ea94 0f05 	teq	r4, r5
    c630:	f000 80a7 	beq.w	c782 <__adddf3+0x1da>
    c634:	f1a4 0401 	sub.w	r4, r4, #1
    c638:	f1d5 0e20 	rsbs	lr, r5, #32
    c63c:	db0d      	blt.n	c65a <__adddf3+0xb2>
    c63e:	fa02 fc0e 	lsl.w	ip, r2, lr
    c642:	fa22 f205 	lsr.w	r2, r2, r5
    c646:	1880      	adds	r0, r0, r2
    c648:	f141 0100 	adc.w	r1, r1, #0
    c64c:	fa03 f20e 	lsl.w	r2, r3, lr
    c650:	1880      	adds	r0, r0, r2
    c652:	fa43 f305 	asr.w	r3, r3, r5
    c656:	4159      	adcs	r1, r3
    c658:	e00e      	b.n	c678 <__adddf3+0xd0>
    c65a:	f1a5 0520 	sub.w	r5, r5, #32
    c65e:	f10e 0e20 	add.w	lr, lr, #32
    c662:	2a01      	cmp	r2, #1
    c664:	fa03 fc0e 	lsl.w	ip, r3, lr
    c668:	bf28      	it	cs
    c66a:	f04c 0c02 	orrcs.w	ip, ip, #2
    c66e:	fa43 f305 	asr.w	r3, r3, r5
    c672:	18c0      	adds	r0, r0, r3
    c674:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c67c:	d507      	bpl.n	c68e <__adddf3+0xe6>
    c67e:	f04f 0e00 	mov.w	lr, #0
    c682:	f1dc 0c00 	rsbs	ip, ip, #0
    c686:	eb7e 0000 	sbcs.w	r0, lr, r0
    c68a:	eb6e 0101 	sbc.w	r1, lr, r1
    c68e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c692:	d31b      	bcc.n	c6cc <__adddf3+0x124>
    c694:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c698:	d30c      	bcc.n	c6b4 <__adddf3+0x10c>
    c69a:	0849      	lsrs	r1, r1, #1
    c69c:	ea5f 0030 	movs.w	r0, r0, rrx
    c6a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c6a4:	f104 0401 	add.w	r4, r4, #1
    c6a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c6ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c6b0:	f080 809a 	bcs.w	c7e8 <__adddf3+0x240>
    c6b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c6b8:	bf08      	it	eq
    c6ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c6be:	f150 0000 	adcs.w	r0, r0, #0
    c6c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c6c6:	ea41 0105 	orr.w	r1, r1, r5
    c6ca:	bd30      	pop	{r4, r5, pc}
    c6cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c6d0:	4140      	adcs	r0, r0
    c6d2:	eb41 0101 	adc.w	r1, r1, r1
    c6d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c6da:	f1a4 0401 	sub.w	r4, r4, #1
    c6de:	d1e9      	bne.n	c6b4 <__adddf3+0x10c>
    c6e0:	f091 0f00 	teq	r1, #0
    c6e4:	bf04      	itt	eq
    c6e6:	4601      	moveq	r1, r0
    c6e8:	2000      	moveq	r0, #0
    c6ea:	fab1 f381 	clz	r3, r1
    c6ee:	bf08      	it	eq
    c6f0:	3320      	addeq	r3, #32
    c6f2:	f1a3 030b 	sub.w	r3, r3, #11
    c6f6:	f1b3 0220 	subs.w	r2, r3, #32
    c6fa:	da0c      	bge.n	c716 <__adddf3+0x16e>
    c6fc:	320c      	adds	r2, #12
    c6fe:	dd08      	ble.n	c712 <__adddf3+0x16a>
    c700:	f102 0c14 	add.w	ip, r2, #20
    c704:	f1c2 020c 	rsb	r2, r2, #12
    c708:	fa01 f00c 	lsl.w	r0, r1, ip
    c70c:	fa21 f102 	lsr.w	r1, r1, r2
    c710:	e00c      	b.n	c72c <__adddf3+0x184>
    c712:	f102 0214 	add.w	r2, r2, #20
    c716:	bfd8      	it	le
    c718:	f1c2 0c20 	rsble	ip, r2, #32
    c71c:	fa01 f102 	lsl.w	r1, r1, r2
    c720:	fa20 fc0c 	lsr.w	ip, r0, ip
    c724:	bfdc      	itt	le
    c726:	ea41 010c 	orrle.w	r1, r1, ip
    c72a:	4090      	lslle	r0, r2
    c72c:	1ae4      	subs	r4, r4, r3
    c72e:	bfa2      	ittt	ge
    c730:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c734:	4329      	orrge	r1, r5
    c736:	bd30      	popge	{r4, r5, pc}
    c738:	ea6f 0404 	mvn.w	r4, r4
    c73c:	3c1f      	subs	r4, #31
    c73e:	da1c      	bge.n	c77a <__adddf3+0x1d2>
    c740:	340c      	adds	r4, #12
    c742:	dc0e      	bgt.n	c762 <__adddf3+0x1ba>
    c744:	f104 0414 	add.w	r4, r4, #20
    c748:	f1c4 0220 	rsb	r2, r4, #32
    c74c:	fa20 f004 	lsr.w	r0, r0, r4
    c750:	fa01 f302 	lsl.w	r3, r1, r2
    c754:	ea40 0003 	orr.w	r0, r0, r3
    c758:	fa21 f304 	lsr.w	r3, r1, r4
    c75c:	ea45 0103 	orr.w	r1, r5, r3
    c760:	bd30      	pop	{r4, r5, pc}
    c762:	f1c4 040c 	rsb	r4, r4, #12
    c766:	f1c4 0220 	rsb	r2, r4, #32
    c76a:	fa20 f002 	lsr.w	r0, r0, r2
    c76e:	fa01 f304 	lsl.w	r3, r1, r4
    c772:	ea40 0003 	orr.w	r0, r0, r3
    c776:	4629      	mov	r1, r5
    c778:	bd30      	pop	{r4, r5, pc}
    c77a:	fa21 f004 	lsr.w	r0, r1, r4
    c77e:	4629      	mov	r1, r5
    c780:	bd30      	pop	{r4, r5, pc}
    c782:	f094 0f00 	teq	r4, #0
    c786:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c78a:	bf06      	itte	eq
    c78c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c790:	3401      	addeq	r4, #1
    c792:	3d01      	subne	r5, #1
    c794:	e74e      	b.n	c634 <__adddf3+0x8c>
    c796:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c79a:	bf18      	it	ne
    c79c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c7a0:	d029      	beq.n	c7f6 <__adddf3+0x24e>
    c7a2:	ea94 0f05 	teq	r4, r5
    c7a6:	bf08      	it	eq
    c7a8:	ea90 0f02 	teqeq	r0, r2
    c7ac:	d005      	beq.n	c7ba <__adddf3+0x212>
    c7ae:	ea54 0c00 	orrs.w	ip, r4, r0
    c7b2:	bf04      	itt	eq
    c7b4:	4619      	moveq	r1, r3
    c7b6:	4610      	moveq	r0, r2
    c7b8:	bd30      	pop	{r4, r5, pc}
    c7ba:	ea91 0f03 	teq	r1, r3
    c7be:	bf1e      	ittt	ne
    c7c0:	2100      	movne	r1, #0
    c7c2:	2000      	movne	r0, #0
    c7c4:	bd30      	popne	{r4, r5, pc}
    c7c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c7ca:	d105      	bne.n	c7d8 <__adddf3+0x230>
    c7cc:	0040      	lsls	r0, r0, #1
    c7ce:	4149      	adcs	r1, r1
    c7d0:	bf28      	it	cs
    c7d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c7d6:	bd30      	pop	{r4, r5, pc}
    c7d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c7dc:	bf3c      	itt	cc
    c7de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c7e2:	bd30      	popcc	{r4, r5, pc}
    c7e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c7e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c7ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c7f0:	f04f 0000 	mov.w	r0, #0
    c7f4:	bd30      	pop	{r4, r5, pc}
    c7f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c7fa:	bf1a      	itte	ne
    c7fc:	4619      	movne	r1, r3
    c7fe:	4610      	movne	r0, r2
    c800:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c804:	bf1c      	itt	ne
    c806:	460b      	movne	r3, r1
    c808:	4602      	movne	r2, r0
    c80a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c80e:	bf06      	itte	eq
    c810:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c814:	ea91 0f03 	teqeq	r1, r3
    c818:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c81c:	bd30      	pop	{r4, r5, pc}
    c81e:	bf00      	nop

0000c820 <__aeabi_ui2d>:
    c820:	f090 0f00 	teq	r0, #0
    c824:	bf04      	itt	eq
    c826:	2100      	moveq	r1, #0
    c828:	4770      	bxeq	lr
    c82a:	b530      	push	{r4, r5, lr}
    c82c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c830:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c834:	f04f 0500 	mov.w	r5, #0
    c838:	f04f 0100 	mov.w	r1, #0
    c83c:	e750      	b.n	c6e0 <__adddf3+0x138>
    c83e:	bf00      	nop

0000c840 <__aeabi_i2d>:
    c840:	f090 0f00 	teq	r0, #0
    c844:	bf04      	itt	eq
    c846:	2100      	moveq	r1, #0
    c848:	4770      	bxeq	lr
    c84a:	b530      	push	{r4, r5, lr}
    c84c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c850:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c854:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c858:	bf48      	it	mi
    c85a:	4240      	negmi	r0, r0
    c85c:	f04f 0100 	mov.w	r1, #0
    c860:	e73e      	b.n	c6e0 <__adddf3+0x138>
    c862:	bf00      	nop

0000c864 <__aeabi_f2d>:
    c864:	0042      	lsls	r2, r0, #1
    c866:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c86a:	ea4f 0131 	mov.w	r1, r1, rrx
    c86e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c872:	bf1f      	itttt	ne
    c874:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c878:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c87c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c880:	4770      	bxne	lr
    c882:	f092 0f00 	teq	r2, #0
    c886:	bf14      	ite	ne
    c888:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c88c:	4770      	bxeq	lr
    c88e:	b530      	push	{r4, r5, lr}
    c890:	f44f 7460 	mov.w	r4, #896	; 0x380
    c894:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c898:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c89c:	e720      	b.n	c6e0 <__adddf3+0x138>
    c89e:	bf00      	nop

0000c8a0 <__aeabi_ul2d>:
    c8a0:	ea50 0201 	orrs.w	r2, r0, r1
    c8a4:	bf08      	it	eq
    c8a6:	4770      	bxeq	lr
    c8a8:	b530      	push	{r4, r5, lr}
    c8aa:	f04f 0500 	mov.w	r5, #0
    c8ae:	e00a      	b.n	c8c6 <__aeabi_l2d+0x16>

0000c8b0 <__aeabi_l2d>:
    c8b0:	ea50 0201 	orrs.w	r2, r0, r1
    c8b4:	bf08      	it	eq
    c8b6:	4770      	bxeq	lr
    c8b8:	b530      	push	{r4, r5, lr}
    c8ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c8be:	d502      	bpl.n	c8c6 <__aeabi_l2d+0x16>
    c8c0:	4240      	negs	r0, r0
    c8c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c8c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c8ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c8ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c8d2:	f43f aedc 	beq.w	c68e <__adddf3+0xe6>
    c8d6:	f04f 0203 	mov.w	r2, #3
    c8da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c8de:	bf18      	it	ne
    c8e0:	3203      	addne	r2, #3
    c8e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c8e6:	bf18      	it	ne
    c8e8:	3203      	addne	r2, #3
    c8ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c8ee:	f1c2 0320 	rsb	r3, r2, #32
    c8f2:	fa00 fc03 	lsl.w	ip, r0, r3
    c8f6:	fa20 f002 	lsr.w	r0, r0, r2
    c8fa:	fa01 fe03 	lsl.w	lr, r1, r3
    c8fe:	ea40 000e 	orr.w	r0, r0, lr
    c902:	fa21 f102 	lsr.w	r1, r1, r2
    c906:	4414      	add	r4, r2
    c908:	e6c1      	b.n	c68e <__adddf3+0xe6>
    c90a:	bf00      	nop

0000c90c <__gedf2>:
    c90c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    c910:	e006      	b.n	c920 <__cmpdf2+0x4>
    c912:	bf00      	nop

0000c914 <__ledf2>:
    c914:	f04f 0c01 	mov.w	ip, #1
    c918:	e002      	b.n	c920 <__cmpdf2+0x4>
    c91a:	bf00      	nop

0000c91c <__cmpdf2>:
    c91c:	f04f 0c01 	mov.w	ip, #1
    c920:	f84d cd04 	str.w	ip, [sp, #-4]!
    c924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c92c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c930:	bf18      	it	ne
    c932:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c936:	d01b      	beq.n	c970 <__cmpdf2+0x54>
    c938:	b001      	add	sp, #4
    c93a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c93e:	bf0c      	ite	eq
    c940:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c944:	ea91 0f03 	teqne	r1, r3
    c948:	bf02      	ittt	eq
    c94a:	ea90 0f02 	teqeq	r0, r2
    c94e:	2000      	moveq	r0, #0
    c950:	4770      	bxeq	lr
    c952:	f110 0f00 	cmn.w	r0, #0
    c956:	ea91 0f03 	teq	r1, r3
    c95a:	bf58      	it	pl
    c95c:	4299      	cmppl	r1, r3
    c95e:	bf08      	it	eq
    c960:	4290      	cmpeq	r0, r2
    c962:	bf2c      	ite	cs
    c964:	17d8      	asrcs	r0, r3, #31
    c966:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c96a:	f040 0001 	orr.w	r0, r0, #1
    c96e:	4770      	bx	lr
    c970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c978:	d102      	bne.n	c980 <__cmpdf2+0x64>
    c97a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c97e:	d107      	bne.n	c990 <__cmpdf2+0x74>
    c980:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c988:	d1d6      	bne.n	c938 <__cmpdf2+0x1c>
    c98a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c98e:	d0d3      	beq.n	c938 <__cmpdf2+0x1c>
    c990:	f85d 0b04 	ldr.w	r0, [sp], #4
    c994:	4770      	bx	lr
    c996:	bf00      	nop

0000c998 <__aeabi_cdrcmple>:
    c998:	4684      	mov	ip, r0
    c99a:	4610      	mov	r0, r2
    c99c:	4662      	mov	r2, ip
    c99e:	468c      	mov	ip, r1
    c9a0:	4619      	mov	r1, r3
    c9a2:	4663      	mov	r3, ip
    c9a4:	e000      	b.n	c9a8 <__aeabi_cdcmpeq>
    c9a6:	bf00      	nop

0000c9a8 <__aeabi_cdcmpeq>:
    c9a8:	b501      	push	{r0, lr}
    c9aa:	f7ff ffb7 	bl	c91c <__cmpdf2>
    c9ae:	2800      	cmp	r0, #0
    c9b0:	bf48      	it	mi
    c9b2:	f110 0f00 	cmnmi.w	r0, #0
    c9b6:	bd01      	pop	{r0, pc}

0000c9b8 <__aeabi_dcmpeq>:
    c9b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9bc:	f7ff fff4 	bl	c9a8 <__aeabi_cdcmpeq>
    c9c0:	bf0c      	ite	eq
    c9c2:	2001      	moveq	r0, #1
    c9c4:	2000      	movne	r0, #0
    c9c6:	f85d fb08 	ldr.w	pc, [sp], #8
    c9ca:	bf00      	nop

0000c9cc <__aeabi_dcmplt>:
    c9cc:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9d0:	f7ff ffea 	bl	c9a8 <__aeabi_cdcmpeq>
    c9d4:	bf34      	ite	cc
    c9d6:	2001      	movcc	r0, #1
    c9d8:	2000      	movcs	r0, #0
    c9da:	f85d fb08 	ldr.w	pc, [sp], #8
    c9de:	bf00      	nop

0000c9e0 <__aeabi_dcmple>:
    c9e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9e4:	f7ff ffe0 	bl	c9a8 <__aeabi_cdcmpeq>
    c9e8:	bf94      	ite	ls
    c9ea:	2001      	movls	r0, #1
    c9ec:	2000      	movhi	r0, #0
    c9ee:	f85d fb08 	ldr.w	pc, [sp], #8
    c9f2:	bf00      	nop

0000c9f4 <__aeabi_dcmpge>:
    c9f4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9f8:	f7ff ffce 	bl	c998 <__aeabi_cdrcmple>
    c9fc:	bf94      	ite	ls
    c9fe:	2001      	movls	r0, #1
    ca00:	2000      	movhi	r0, #0
    ca02:	f85d fb08 	ldr.w	pc, [sp], #8
    ca06:	bf00      	nop

0000ca08 <__aeabi_dcmpgt>:
    ca08:	f84d ed08 	str.w	lr, [sp, #-8]!
    ca0c:	f7ff ffc4 	bl	c998 <__aeabi_cdrcmple>
    ca10:	bf34      	ite	cc
    ca12:	2001      	movcc	r0, #1
    ca14:	2000      	movcs	r0, #0
    ca16:	f85d fb08 	ldr.w	pc, [sp], #8
    ca1a:	bf00      	nop

0000ca1c <__aeabi_d2f>:
    ca1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    ca20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    ca24:	bf24      	itt	cs
    ca26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    ca2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    ca2e:	d90d      	bls.n	ca4c <__aeabi_d2f+0x30>
    ca30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ca34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    ca38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    ca3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    ca44:	bf08      	it	eq
    ca46:	f020 0001 	biceq.w	r0, r0, #1
    ca4a:	4770      	bx	lr
    ca4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    ca50:	d121      	bne.n	ca96 <__aeabi_d2f+0x7a>
    ca52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    ca56:	bfbc      	itt	lt
    ca58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    ca5c:	4770      	bxlt	lr
    ca5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ca62:	ea4f 5252 	mov.w	r2, r2, lsr #21
    ca66:	f1c2 0218 	rsb	r2, r2, #24
    ca6a:	f1c2 0c20 	rsb	ip, r2, #32
    ca6e:	fa10 f30c 	lsls.w	r3, r0, ip
    ca72:	fa20 f002 	lsr.w	r0, r0, r2
    ca76:	bf18      	it	ne
    ca78:	f040 0001 	orrne.w	r0, r0, #1
    ca7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    ca84:	fa03 fc0c 	lsl.w	ip, r3, ip
    ca88:	ea40 000c 	orr.w	r0, r0, ip
    ca8c:	fa23 f302 	lsr.w	r3, r3, r2
    ca90:	ea4f 0343 	mov.w	r3, r3, lsl #1
    ca94:	e7cc      	b.n	ca30 <__aeabi_d2f+0x14>
    ca96:	ea7f 5362 	mvns.w	r3, r2, asr #21
    ca9a:	d107      	bne.n	caac <__aeabi_d2f+0x90>
    ca9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    caa0:	bf1e      	ittt	ne
    caa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    caa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    caaa:	4770      	bxne	lr
    caac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    cab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cab8:	4770      	bx	lr
    caba:	bf00      	nop

0000cabc <__aeabi_uldivmod>:
    cabc:	b953      	cbnz	r3, cad4 <__aeabi_uldivmod+0x18>
    cabe:	b94a      	cbnz	r2, cad4 <__aeabi_uldivmod+0x18>
    cac0:	2900      	cmp	r1, #0
    cac2:	bf08      	it	eq
    cac4:	2800      	cmpeq	r0, #0
    cac6:	bf1c      	itt	ne
    cac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    cacc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    cad0:	f000 b97a 	b.w	cdc8 <__aeabi_idiv0>
    cad4:	f1ad 0c08 	sub.w	ip, sp, #8
    cad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    cadc:	f000 f806 	bl	caec <__udivmoddi4>
    cae0:	f8dd e004 	ldr.w	lr, [sp, #4]
    cae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    cae8:	b004      	add	sp, #16
    caea:	4770      	bx	lr

0000caec <__udivmoddi4>:
    caec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    caf0:	468c      	mov	ip, r1
    caf2:	460d      	mov	r5, r1
    caf4:	4604      	mov	r4, r0
    caf6:	9e08      	ldr	r6, [sp, #32]
    caf8:	2b00      	cmp	r3, #0
    cafa:	d151      	bne.n	cba0 <__udivmoddi4+0xb4>
    cafc:	428a      	cmp	r2, r1
    cafe:	4617      	mov	r7, r2
    cb00:	d96d      	bls.n	cbde <__udivmoddi4+0xf2>
    cb02:	fab2 fe82 	clz	lr, r2
    cb06:	f1be 0f00 	cmp.w	lr, #0
    cb0a:	d00b      	beq.n	cb24 <__udivmoddi4+0x38>
    cb0c:	f1ce 0c20 	rsb	ip, lr, #32
    cb10:	fa01 f50e 	lsl.w	r5, r1, lr
    cb14:	fa20 fc0c 	lsr.w	ip, r0, ip
    cb18:	fa02 f70e 	lsl.w	r7, r2, lr
    cb1c:	ea4c 0c05 	orr.w	ip, ip, r5
    cb20:	fa00 f40e 	lsl.w	r4, r0, lr
    cb24:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    cb28:	0c25      	lsrs	r5, r4, #16
    cb2a:	fbbc f8fa 	udiv	r8, ip, sl
    cb2e:	fa1f f987 	uxth.w	r9, r7
    cb32:	fb0a cc18 	mls	ip, sl, r8, ip
    cb36:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    cb3a:	fb08 f309 	mul.w	r3, r8, r9
    cb3e:	42ab      	cmp	r3, r5
    cb40:	d90a      	bls.n	cb58 <__udivmoddi4+0x6c>
    cb42:	19ed      	adds	r5, r5, r7
    cb44:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    cb48:	f080 8123 	bcs.w	cd92 <__udivmoddi4+0x2a6>
    cb4c:	42ab      	cmp	r3, r5
    cb4e:	f240 8120 	bls.w	cd92 <__udivmoddi4+0x2a6>
    cb52:	f1a8 0802 	sub.w	r8, r8, #2
    cb56:	443d      	add	r5, r7
    cb58:	1aed      	subs	r5, r5, r3
    cb5a:	b2a4      	uxth	r4, r4
    cb5c:	fbb5 f0fa 	udiv	r0, r5, sl
    cb60:	fb0a 5510 	mls	r5, sl, r0, r5
    cb64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    cb68:	fb00 f909 	mul.w	r9, r0, r9
    cb6c:	45a1      	cmp	r9, r4
    cb6e:	d909      	bls.n	cb84 <__udivmoddi4+0x98>
    cb70:	19e4      	adds	r4, r4, r7
    cb72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cb76:	f080 810a 	bcs.w	cd8e <__udivmoddi4+0x2a2>
    cb7a:	45a1      	cmp	r9, r4
    cb7c:	f240 8107 	bls.w	cd8e <__udivmoddi4+0x2a2>
    cb80:	3802      	subs	r0, #2
    cb82:	443c      	add	r4, r7
    cb84:	eba4 0409 	sub.w	r4, r4, r9
    cb88:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    cb8c:	2100      	movs	r1, #0
    cb8e:	2e00      	cmp	r6, #0
    cb90:	d061      	beq.n	cc56 <__udivmoddi4+0x16a>
    cb92:	fa24 f40e 	lsr.w	r4, r4, lr
    cb96:	2300      	movs	r3, #0
    cb98:	6034      	str	r4, [r6, #0]
    cb9a:	6073      	str	r3, [r6, #4]
    cb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cba0:	428b      	cmp	r3, r1
    cba2:	d907      	bls.n	cbb4 <__udivmoddi4+0xc8>
    cba4:	2e00      	cmp	r6, #0
    cba6:	d054      	beq.n	cc52 <__udivmoddi4+0x166>
    cba8:	2100      	movs	r1, #0
    cbaa:	e886 0021 	stmia.w	r6, {r0, r5}
    cbae:	4608      	mov	r0, r1
    cbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbb4:	fab3 f183 	clz	r1, r3
    cbb8:	2900      	cmp	r1, #0
    cbba:	f040 808e 	bne.w	ccda <__udivmoddi4+0x1ee>
    cbbe:	42ab      	cmp	r3, r5
    cbc0:	d302      	bcc.n	cbc8 <__udivmoddi4+0xdc>
    cbc2:	4282      	cmp	r2, r0
    cbc4:	f200 80fa 	bhi.w	cdbc <__udivmoddi4+0x2d0>
    cbc8:	1a84      	subs	r4, r0, r2
    cbca:	eb65 0503 	sbc.w	r5, r5, r3
    cbce:	2001      	movs	r0, #1
    cbd0:	46ac      	mov	ip, r5
    cbd2:	2e00      	cmp	r6, #0
    cbd4:	d03f      	beq.n	cc56 <__udivmoddi4+0x16a>
    cbd6:	e886 1010 	stmia.w	r6, {r4, ip}
    cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbde:	b912      	cbnz	r2, cbe6 <__udivmoddi4+0xfa>
    cbe0:	2701      	movs	r7, #1
    cbe2:	fbb7 f7f2 	udiv	r7, r7, r2
    cbe6:	fab7 fe87 	clz	lr, r7
    cbea:	f1be 0f00 	cmp.w	lr, #0
    cbee:	d134      	bne.n	cc5a <__udivmoddi4+0x16e>
    cbf0:	1beb      	subs	r3, r5, r7
    cbf2:	0c3a      	lsrs	r2, r7, #16
    cbf4:	fa1f fc87 	uxth.w	ip, r7
    cbf8:	2101      	movs	r1, #1
    cbfa:	fbb3 f8f2 	udiv	r8, r3, r2
    cbfe:	0c25      	lsrs	r5, r4, #16
    cc00:	fb02 3318 	mls	r3, r2, r8, r3
    cc04:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    cc08:	fb0c f308 	mul.w	r3, ip, r8
    cc0c:	42ab      	cmp	r3, r5
    cc0e:	d907      	bls.n	cc20 <__udivmoddi4+0x134>
    cc10:	19ed      	adds	r5, r5, r7
    cc12:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    cc16:	d202      	bcs.n	cc1e <__udivmoddi4+0x132>
    cc18:	42ab      	cmp	r3, r5
    cc1a:	f200 80d1 	bhi.w	cdc0 <__udivmoddi4+0x2d4>
    cc1e:	4680      	mov	r8, r0
    cc20:	1aed      	subs	r5, r5, r3
    cc22:	b2a3      	uxth	r3, r4
    cc24:	fbb5 f0f2 	udiv	r0, r5, r2
    cc28:	fb02 5510 	mls	r5, r2, r0, r5
    cc2c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    cc30:	fb0c fc00 	mul.w	ip, ip, r0
    cc34:	45a4      	cmp	ip, r4
    cc36:	d907      	bls.n	cc48 <__udivmoddi4+0x15c>
    cc38:	19e4      	adds	r4, r4, r7
    cc3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cc3e:	d202      	bcs.n	cc46 <__udivmoddi4+0x15a>
    cc40:	45a4      	cmp	ip, r4
    cc42:	f200 80b8 	bhi.w	cdb6 <__udivmoddi4+0x2ca>
    cc46:	4618      	mov	r0, r3
    cc48:	eba4 040c 	sub.w	r4, r4, ip
    cc4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    cc50:	e79d      	b.n	cb8e <__udivmoddi4+0xa2>
    cc52:	4631      	mov	r1, r6
    cc54:	4630      	mov	r0, r6
    cc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc5a:	f1ce 0420 	rsb	r4, lr, #32
    cc5e:	fa05 f30e 	lsl.w	r3, r5, lr
    cc62:	fa07 f70e 	lsl.w	r7, r7, lr
    cc66:	fa20 f804 	lsr.w	r8, r0, r4
    cc6a:	0c3a      	lsrs	r2, r7, #16
    cc6c:	fa25 f404 	lsr.w	r4, r5, r4
    cc70:	ea48 0803 	orr.w	r8, r8, r3
    cc74:	fbb4 f1f2 	udiv	r1, r4, r2
    cc78:	ea4f 4518 	mov.w	r5, r8, lsr #16
    cc7c:	fb02 4411 	mls	r4, r2, r1, r4
    cc80:	fa1f fc87 	uxth.w	ip, r7
    cc84:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    cc88:	fb01 f30c 	mul.w	r3, r1, ip
    cc8c:	42ab      	cmp	r3, r5
    cc8e:	fa00 f40e 	lsl.w	r4, r0, lr
    cc92:	d909      	bls.n	cca8 <__udivmoddi4+0x1bc>
    cc94:	19ed      	adds	r5, r5, r7
    cc96:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    cc9a:	f080 808a 	bcs.w	cdb2 <__udivmoddi4+0x2c6>
    cc9e:	42ab      	cmp	r3, r5
    cca0:	f240 8087 	bls.w	cdb2 <__udivmoddi4+0x2c6>
    cca4:	3902      	subs	r1, #2
    cca6:	443d      	add	r5, r7
    cca8:	1aeb      	subs	r3, r5, r3
    ccaa:	fa1f f588 	uxth.w	r5, r8
    ccae:	fbb3 f0f2 	udiv	r0, r3, r2
    ccb2:	fb02 3310 	mls	r3, r2, r0, r3
    ccb6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    ccba:	fb00 f30c 	mul.w	r3, r0, ip
    ccbe:	42ab      	cmp	r3, r5
    ccc0:	d907      	bls.n	ccd2 <__udivmoddi4+0x1e6>
    ccc2:	19ed      	adds	r5, r5, r7
    ccc4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    ccc8:	d26f      	bcs.n	cdaa <__udivmoddi4+0x2be>
    ccca:	42ab      	cmp	r3, r5
    cccc:	d96d      	bls.n	cdaa <__udivmoddi4+0x2be>
    ccce:	3802      	subs	r0, #2
    ccd0:	443d      	add	r5, r7
    ccd2:	1aeb      	subs	r3, r5, r3
    ccd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    ccd8:	e78f      	b.n	cbfa <__udivmoddi4+0x10e>
    ccda:	f1c1 0720 	rsb	r7, r1, #32
    ccde:	fa22 f807 	lsr.w	r8, r2, r7
    cce2:	408b      	lsls	r3, r1
    cce4:	fa05 f401 	lsl.w	r4, r5, r1
    cce8:	ea48 0303 	orr.w	r3, r8, r3
    ccec:	fa20 fe07 	lsr.w	lr, r0, r7
    ccf0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ccf4:	40fd      	lsrs	r5, r7
    ccf6:	ea4e 0e04 	orr.w	lr, lr, r4
    ccfa:	fbb5 f9fc 	udiv	r9, r5, ip
    ccfe:	ea4f 441e 	mov.w	r4, lr, lsr #16
    cd02:	fb0c 5519 	mls	r5, ip, r9, r5
    cd06:	fa1f f883 	uxth.w	r8, r3
    cd0a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    cd0e:	fb09 f408 	mul.w	r4, r9, r8
    cd12:	42ac      	cmp	r4, r5
    cd14:	fa02 f201 	lsl.w	r2, r2, r1
    cd18:	fa00 fa01 	lsl.w	sl, r0, r1
    cd1c:	d908      	bls.n	cd30 <__udivmoddi4+0x244>
    cd1e:	18ed      	adds	r5, r5, r3
    cd20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    cd24:	d243      	bcs.n	cdae <__udivmoddi4+0x2c2>
    cd26:	42ac      	cmp	r4, r5
    cd28:	d941      	bls.n	cdae <__udivmoddi4+0x2c2>
    cd2a:	f1a9 0902 	sub.w	r9, r9, #2
    cd2e:	441d      	add	r5, r3
    cd30:	1b2d      	subs	r5, r5, r4
    cd32:	fa1f fe8e 	uxth.w	lr, lr
    cd36:	fbb5 f0fc 	udiv	r0, r5, ip
    cd3a:	fb0c 5510 	mls	r5, ip, r0, r5
    cd3e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    cd42:	fb00 f808 	mul.w	r8, r0, r8
    cd46:	45a0      	cmp	r8, r4
    cd48:	d907      	bls.n	cd5a <__udivmoddi4+0x26e>
    cd4a:	18e4      	adds	r4, r4, r3
    cd4c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    cd50:	d229      	bcs.n	cda6 <__udivmoddi4+0x2ba>
    cd52:	45a0      	cmp	r8, r4
    cd54:	d927      	bls.n	cda6 <__udivmoddi4+0x2ba>
    cd56:	3802      	subs	r0, #2
    cd58:	441c      	add	r4, r3
    cd5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    cd5e:	eba4 0408 	sub.w	r4, r4, r8
    cd62:	fba0 8902 	umull	r8, r9, r0, r2
    cd66:	454c      	cmp	r4, r9
    cd68:	46c6      	mov	lr, r8
    cd6a:	464d      	mov	r5, r9
    cd6c:	d315      	bcc.n	cd9a <__udivmoddi4+0x2ae>
    cd6e:	d012      	beq.n	cd96 <__udivmoddi4+0x2aa>
    cd70:	b156      	cbz	r6, cd88 <__udivmoddi4+0x29c>
    cd72:	ebba 030e 	subs.w	r3, sl, lr
    cd76:	eb64 0405 	sbc.w	r4, r4, r5
    cd7a:	fa04 f707 	lsl.w	r7, r4, r7
    cd7e:	40cb      	lsrs	r3, r1
    cd80:	431f      	orrs	r7, r3
    cd82:	40cc      	lsrs	r4, r1
    cd84:	6037      	str	r7, [r6, #0]
    cd86:	6074      	str	r4, [r6, #4]
    cd88:	2100      	movs	r1, #0
    cd8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cd8e:	4618      	mov	r0, r3
    cd90:	e6f8      	b.n	cb84 <__udivmoddi4+0x98>
    cd92:	4690      	mov	r8, r2
    cd94:	e6e0      	b.n	cb58 <__udivmoddi4+0x6c>
    cd96:	45c2      	cmp	sl, r8
    cd98:	d2ea      	bcs.n	cd70 <__udivmoddi4+0x284>
    cd9a:	ebb8 0e02 	subs.w	lr, r8, r2
    cd9e:	eb69 0503 	sbc.w	r5, r9, r3
    cda2:	3801      	subs	r0, #1
    cda4:	e7e4      	b.n	cd70 <__udivmoddi4+0x284>
    cda6:	4628      	mov	r0, r5
    cda8:	e7d7      	b.n	cd5a <__udivmoddi4+0x26e>
    cdaa:	4640      	mov	r0, r8
    cdac:	e791      	b.n	ccd2 <__udivmoddi4+0x1e6>
    cdae:	4681      	mov	r9, r0
    cdb0:	e7be      	b.n	cd30 <__udivmoddi4+0x244>
    cdb2:	4601      	mov	r1, r0
    cdb4:	e778      	b.n	cca8 <__udivmoddi4+0x1bc>
    cdb6:	3802      	subs	r0, #2
    cdb8:	443c      	add	r4, r7
    cdba:	e745      	b.n	cc48 <__udivmoddi4+0x15c>
    cdbc:	4608      	mov	r0, r1
    cdbe:	e708      	b.n	cbd2 <__udivmoddi4+0xe6>
    cdc0:	f1a8 0802 	sub.w	r8, r8, #2
    cdc4:	443d      	add	r5, r7
    cdc6:	e72b      	b.n	cc20 <__udivmoddi4+0x134>

0000cdc8 <__aeabi_idiv0>:
    cdc8:	4770      	bx	lr
    cdca:	bf00      	nop

0000cdcc <attDmConnCback>:
    cdcc:	7803      	ldrb	r3, [r0, #0]
    cdce:	7882      	ldrb	r2, [r0, #2]
    cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdd4:	1e5f      	subs	r7, r3, #1
    cdd6:	4e16      	ldr	r6, [pc, #88]	; (ce30 <attDmConnCback+0x64>)
    cdd8:	017f      	lsls	r7, r7, #5
    cdda:	2a27      	cmp	r2, #39	; 0x27
    cddc:	4605      	mov	r5, r0
    cdde:	eb06 0407 	add.w	r4, r6, r7
    cde2:	d108      	bne.n	cdf6 <attDmConnCback+0x2a>
    cde4:	88c2      	ldrh	r2, [r0, #6]
    cde6:	8322      	strh	r2, [r4, #24]
    cde8:	7723      	strb	r3, [r4, #28]
    cdea:	2217      	movs	r2, #23
    cdec:	2300      	movs	r3, #0
    cdee:	8362      	strh	r2, [r4, #26]
    cdf0:	7763      	strb	r3, [r4, #29]
    cdf2:	77a3      	strb	r3, [r4, #30]
    cdf4:	77e3      	strb	r3, [r4, #31]
    cdf6:	4437      	add	r7, r6
    cdf8:	7f3b      	ldrb	r3, [r7, #28]
    cdfa:	b183      	cbz	r3, ce1e <attDmConnCback+0x52>
    cdfc:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    ce00:	4629      	mov	r1, r5
    ce02:	68db      	ldr	r3, [r3, #12]
    ce04:	4620      	mov	r0, r4
    ce06:	4798      	blx	r3
    ce08:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ce0c:	4629      	mov	r1, r5
    ce0e:	68db      	ldr	r3, [r3, #12]
    ce10:	4620      	mov	r0, r4
    ce12:	4798      	blx	r3
    ce14:	78ab      	ldrb	r3, [r5, #2]
    ce16:	2b28      	cmp	r3, #40	; 0x28
    ce18:	bf04      	itt	eq
    ce1a:	2300      	moveq	r3, #0
    ce1c:	773b      	strbeq	r3, [r7, #28]
    ce1e:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    ce22:	b11b      	cbz	r3, ce2c <attDmConnCback+0x60>
    ce24:	4628      	mov	r0, r5
    ce26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ce2a:	4718      	bx	r3
    ce2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ce30:	10018c60 	.word	0x10018c60

0000ce34 <attEmptyHandler>:
    ce34:	4770      	bx	lr

0000ce36 <attEmptyConnCback>:
    ce36:	4770      	bx	lr

0000ce38 <attEmptyDataCback>:
    ce38:	4770      	bx	lr

0000ce3a <attL2cDataCback>:
    ce3a:	7a13      	ldrb	r3, [r2, #8]
    ce3c:	f013 0f01 	tst.w	r3, #1
    ce40:	4b03      	ldr	r3, [pc, #12]	; (ce50 <attL2cDataCback+0x16>)
    ce42:	bf14      	ite	ne
    ce44:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    ce48:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    ce4c:	681b      	ldr	r3, [r3, #0]
    ce4e:	4718      	bx	r3
    ce50:	10018c60 	.word	0x10018c60

0000ce54 <attL2cCtrlCback>:
    ce54:	b570      	push	{r4, r5, r6, lr}
    ce56:	7804      	ldrb	r4, [r0, #0]
    ce58:	4d0e      	ldr	r5, [pc, #56]	; (ce94 <attL2cCtrlCback+0x40>)
    ce5a:	3c01      	subs	r4, #1
    ce5c:	0164      	lsls	r4, r4, #5
    ce5e:	192b      	adds	r3, r5, r4
    ce60:	4606      	mov	r6, r0
    ce62:	7f1a      	ldrb	r2, [r3, #28]
    ce64:	b1a2      	cbz	r2, ce90 <attL2cCtrlCback+0x3c>
    ce66:	7882      	ldrb	r2, [r0, #2]
    ce68:	2a01      	cmp	r2, #1
    ce6a:	bf0c      	ite	eq
    ce6c:	2201      	moveq	r2, #1
    ce6e:	2200      	movne	r2, #0
    ce70:	779a      	strb	r2, [r3, #30]
    ce72:	d003      	beq.n	ce7c <attL2cCtrlCback+0x28>
    ce74:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    ce78:	685b      	ldr	r3, [r3, #4]
    ce7a:	4798      	blx	r3
    ce7c:	442c      	add	r4, r5
    ce7e:	7fa3      	ldrb	r3, [r4, #30]
    ce80:	b933      	cbnz	r3, ce90 <attL2cCtrlCback+0x3c>
    ce82:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    ce86:	4630      	mov	r0, r6
    ce88:	685b      	ldr	r3, [r3, #4]
    ce8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ce8e:	4718      	bx	r3
    ce90:	bd70      	pop	{r4, r5, r6, pc}
    ce92:	bf00      	nop
    ce94:	10018c60 	.word	0x10018c60

0000ce98 <attCcbByHandle>:
    ce98:	b508      	push	{r3, lr}
    ce9a:	f003 f8cd 	bl	10038 <DmConnIdByHandle>
    ce9e:	b118      	cbz	r0, cea8 <attCcbByHandle+0x10>
    cea0:	4b02      	ldr	r3, [pc, #8]	; (ceac <attCcbByHandle+0x14>)
    cea2:	3801      	subs	r0, #1
    cea4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    cea8:	bd08      	pop	{r3, pc}
    ceaa:	bf00      	nop
    ceac:	10018c60 	.word	0x10018c60

0000ceb0 <attCcbByConnId>:
    ceb0:	4b02      	ldr	r3, [pc, #8]	; (cebc <attCcbByConnId+0xc>)
    ceb2:	3801      	subs	r0, #1
    ceb4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    ceb8:	4770      	bx	lr
    ceba:	bf00      	nop
    cebc:	10018c60 	.word	0x10018c60

0000cec0 <attUuidCmp16to128>:
    cec0:	b508      	push	{r3, lr}
    cec2:	4b06      	ldr	r3, [pc, #24]	; (cedc <attUuidCmp16to128+0x1c>)
    cec4:	7802      	ldrb	r2, [r0, #0]
    cec6:	731a      	strb	r2, [r3, #12]
    cec8:	7842      	ldrb	r2, [r0, #1]
    ceca:	735a      	strb	r2, [r3, #13]
    cecc:	4618      	mov	r0, r3
    cece:	2210      	movs	r2, #16
    ced0:	f7ff f916 	bl	c100 <memcmp>
    ced4:	fab0 f080 	clz	r0, r0
    ced8:	0940      	lsrs	r0, r0, #5
    ceda:	bd08      	pop	{r3, pc}
    cedc:	10002f30 	.word	0x10002f30

0000cee0 <attExecCallback>:
    cee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cee2:	f88d 3003 	strb.w	r3, [sp, #3]
    cee6:	2300      	movs	r3, #0
    cee8:	f8ad 3008 	strh.w	r3, [sp, #8]
    ceec:	f88d 300c 	strb.w	r3, [sp, #12]
    cef0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    cef4:	f8ad 300e 	strh.w	r3, [sp, #14]
    cef8:	4b06      	ldr	r3, [pc, #24]	; (cf14 <attExecCallback+0x34>)
    cefa:	f8ad 0000 	strh.w	r0, [sp]
    cefe:	f88d 1002 	strb.w	r1, [sp, #2]
    cf02:	f8ad 200a 	strh.w	r2, [sp, #10]
    cf06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    cf0a:	4668      	mov	r0, sp
    cf0c:	4798      	blx	r3
    cf0e:	b005      	add	sp, #20
    cf10:	f85d fb04 	ldr.w	pc, [sp], #4
    cf14:	10018c60 	.word	0x10018c60

0000cf18 <attSetMtu>:
    cf18:	428a      	cmp	r2, r1
    cf1a:	8b43      	ldrh	r3, [r0, #26]
    cf1c:	b507      	push	{r0, r1, r2, lr}
    cf1e:	bf28      	it	cs
    cf20:	460a      	movcs	r2, r1
    cf22:	4293      	cmp	r3, r2
    cf24:	d007      	beq.n	cf36 <attSetMtu+0x1e>
    cf26:	2300      	movs	r3, #0
    cf28:	8342      	strh	r2, [r0, #26]
    cf2a:	2111      	movs	r1, #17
    cf2c:	7f00      	ldrb	r0, [r0, #28]
    cf2e:	9200      	str	r2, [sp, #0]
    cf30:	461a      	mov	r2, r3
    cf32:	f7ff ffd5 	bl	cee0 <attExecCallback>
    cf36:	b003      	add	sp, #12
    cf38:	f85d fb04 	ldr.w	pc, [sp], #4

0000cf3c <attMsgAlloc>:
    cf3c:	2100      	movs	r1, #0
    cf3e:	f00d bd4b 	b.w	1a9d8 <WsfMsgDataAlloc>

0000cf42 <AttHandlerInit>:
    cf42:	b508      	push	{r3, lr}
    cf44:	4b09      	ldr	r3, [pc, #36]	; (cf6c <AttHandlerInit+0x2a>)
    cf46:	4a0a      	ldr	r2, [pc, #40]	; (cf70 <AttHandlerInit+0x2e>)
    cf48:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    cf4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cf50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    cf54:	4907      	ldr	r1, [pc, #28]	; (cf74 <AttHandlerInit+0x32>)
    cf56:	4a08      	ldr	r2, [pc, #32]	; (cf78 <AttHandlerInit+0x36>)
    cf58:	2004      	movs	r0, #4
    cf5a:	f003 ffb7 	bl	10ecc <L2cRegister>
    cf5e:	4907      	ldr	r1, [pc, #28]	; (cf7c <AttHandlerInit+0x3a>)
    cf60:	2000      	movs	r0, #0
    cf62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cf66:	f002 bf51 	b.w	fe0c <DmConnRegister>
    cf6a:	bf00      	nop
    cf6c:	10018c60 	.word	0x10018c60
    cf70:	0003b8b4 	.word	0x0003b8b4
    cf74:	0000ce3b 	.word	0x0000ce3b
    cf78:	0000ce55 	.word	0x0000ce55
    cf7c:	0000cdcd 	.word	0x0000cdcd

0000cf80 <AttHandler>:
    cf80:	4608      	mov	r0, r1
    cf82:	b149      	cbz	r1, cf98 <AttHandler+0x18>
    cf84:	788b      	ldrb	r3, [r1, #2]
    cf86:	2b1f      	cmp	r3, #31
    cf88:	4b04      	ldr	r3, [pc, #16]	; (cf9c <AttHandler+0x1c>)
    cf8a:	bf8c      	ite	hi
    cf8c:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    cf90:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    cf94:	689b      	ldr	r3, [r3, #8]
    cf96:	4718      	bx	r3
    cf98:	4770      	bx	lr
    cf9a:	bf00      	nop
    cf9c:	10018c60 	.word	0x10018c60

0000cfa0 <AttRegister>:
    cfa0:	4b0a      	ldr	r3, [pc, #40]	; (cfcc <AttRegister+0x2c>)
    cfa2:	b507      	push	{r0, r1, r2, lr}
    cfa4:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    cfa8:	f00a f80e 	bl	16fc8 <HciGetMaxRxAclLen>
    cfac:	4b08      	ldr	r3, [pc, #32]	; (cfd0 <AttRegister+0x30>)
    cfae:	681b      	ldr	r3, [r3, #0]
    cfb0:	889b      	ldrh	r3, [r3, #4]
    cfb2:	3803      	subs	r0, #3
    cfb4:	4298      	cmp	r0, r3
    cfb6:	dc06      	bgt.n	cfc6 <AttRegister+0x26>
    cfb8:	2200      	movs	r2, #0
    cfba:	9200      	str	r2, [sp, #0]
    cfbc:	2302      	movs	r3, #2
    cfbe:	2152      	movs	r1, #82	; 0x52
    cfc0:	4610      	mov	r0, r2
    cfc2:	f7ff ff8d 	bl	cee0 <attExecCallback>
    cfc6:	b003      	add	sp, #12
    cfc8:	f85d fb04 	ldr.w	pc, [sp], #4
    cfcc:	10018c60 	.word	0x10018c60
    cfd0:	10017f70 	.word	0x10017f70

0000cfd4 <AttConnRegister>:
    cfd4:	4b01      	ldr	r3, [pc, #4]	; (cfdc <AttConnRegister+0x8>)
    cfd6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    cfda:	4770      	bx	lr
    cfdc:	10018c60 	.word	0x10018c60

0000cfe0 <AttGetMtu>:
    cfe0:	4b02      	ldr	r3, [pc, #8]	; (cfec <AttGetMtu+0xc>)
    cfe2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    cfe6:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    cfea:	4770      	bx	lr
    cfec:	10018c60 	.word	0x10018c60

0000cff0 <AttMsgAlloc>:
    cff0:	291b      	cmp	r1, #27
    cff2:	b508      	push	{r3, lr}
    cff4:	d001      	beq.n	cffa <AttMsgAlloc+0xa>
    cff6:	291d      	cmp	r1, #29
    cff8:	d106      	bne.n	d008 <AttMsgAlloc+0x18>
    cffa:	300b      	adds	r0, #11
    cffc:	b280      	uxth	r0, r0
    cffe:	f7ff ff9d 	bl	cf3c <attMsgAlloc>
    d002:	b100      	cbz	r0, d006 <AttMsgAlloc+0x16>
    d004:	300b      	adds	r0, #11
    d006:	bd08      	pop	{r3, pc}
    d008:	2000      	movs	r0, #0
    d00a:	e7fc      	b.n	d006 <AttMsgAlloc+0x16>

0000d00c <AttMsgFree>:
    d00c:	291b      	cmp	r1, #27
    d00e:	d005      	beq.n	d01c <AttMsgFree+0x10>
    d010:	291d      	cmp	r1, #29
    d012:	d003      	beq.n	d01c <AttMsgFree+0x10>
    d014:	2300      	movs	r3, #0
    d016:	1ac0      	subs	r0, r0, r3
    d018:	f00d bd0a 	b.w	1aa30 <WsfMsgFree>
    d01c:	230b      	movs	r3, #11
    d01e:	e7fa      	b.n	d016 <AttMsgFree+0xa>

0000d020 <attcSendSimpleReq>:
    d020:	b570      	push	{r4, r5, r6, lr}
    d022:	2300      	movs	r3, #0
    d024:	6945      	ldr	r5, [r0, #20]
    d026:	6143      	str	r3, [r0, #20]
    d028:	7c83      	ldrb	r3, [r0, #18]
    d02a:	2b0a      	cmp	r3, #10
    d02c:	4604      	mov	r4, r0
    d02e:	d008      	beq.n	d042 <attcSendSimpleReq+0x22>
    d030:	2310      	movs	r3, #16
    d032:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    d036:	4b07      	ldr	r3, [pc, #28]	; (d054 <attcSendSimpleReq+0x34>)
    d038:	681b      	ldr	r3, [r3, #0]
    d03a:	3024      	adds	r0, #36	; 0x24
    d03c:	7999      	ldrb	r1, [r3, #6]
    d03e:	f00d fe99 	bl	1ad74 <WsfTimerStartSec>
    d042:	6821      	ldr	r1, [r4, #0]
    d044:	882a      	ldrh	r2, [r5, #0]
    d046:	8b09      	ldrh	r1, [r1, #24]
    d048:	462b      	mov	r3, r5
    d04a:	2004      	movs	r0, #4
    d04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d050:	f003 bf46 	b.w	10ee0 <L2cDataReq>
    d054:	10017f70 	.word	0x10017f70

0000d058 <attcSendReq>:
    d058:	7c82      	ldrb	r2, [r0, #18]
    d05a:	4b02      	ldr	r3, [pc, #8]	; (d064 <attcSendReq+0xc>)
    d05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d060:	4718      	bx	r3
    d062:	bf00      	nop
    d064:	0003b9d4 	.word	0x0003b9d4

0000d068 <attcSetupReq>:
    d068:	b430      	push	{r4, r5}
    d06a:	460b      	mov	r3, r1
    d06c:	4604      	mov	r4, r0
    d06e:	f100 0510 	add.w	r5, r0, #16
    d072:	c907      	ldmia	r1, {r0, r1, r2}
    d074:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    d078:	685a      	ldr	r2, [r3, #4]
    d07a:	e892 0003 	ldmia.w	r2, {r0, r1}
    d07e:	f104 031c 	add.w	r3, r4, #28
    d082:	e883 0003 	stmia.w	r3, {r0, r1}
    d086:	4620      	mov	r0, r4
    d088:	bc30      	pop	{r4, r5}
    d08a:	f7ff bfe5 	b.w	d058 <attcSendReq>

0000d08e <attcCcbByConnId>:
    d08e:	b510      	push	{r4, lr}
    d090:	4604      	mov	r4, r0
    d092:	f002 ffe5 	bl	10060 <DmConnInUse>
    d096:	b120      	cbz	r0, d0a2 <attcCcbByConnId+0x14>
    d098:	4b02      	ldr	r3, [pc, #8]	; (d0a4 <attcCcbByConnId+0x16>)
    d09a:	3c01      	subs	r4, #1
    d09c:	2038      	movs	r0, #56	; 0x38
    d09e:	fb00 3004 	mla	r0, r0, r4, r3
    d0a2:	bd10      	pop	{r4, pc}
    d0a4:	10018d74 	.word	0x10018d74

0000d0a8 <attcCcbByHandle>:
    d0a8:	b508      	push	{r3, lr}
    d0aa:	f002 ffc5 	bl	10038 <DmConnIdByHandle>
    d0ae:	b120      	cbz	r0, d0ba <attcCcbByHandle+0x12>
    d0b0:	4b02      	ldr	r3, [pc, #8]	; (d0bc <attcCcbByHandle+0x14>)
    d0b2:	3801      	subs	r0, #1
    d0b4:	2238      	movs	r2, #56	; 0x38
    d0b6:	fb02 3000 	mla	r0, r2, r0, r3
    d0ba:	bd08      	pop	{r3, pc}
    d0bc:	10018d74 	.word	0x10018d74

0000d0c0 <attcDataCback>:
    d0c0:	b570      	push	{r4, r5, r6, lr}
    d0c2:	460d      	mov	r5, r1
    d0c4:	4614      	mov	r4, r2
    d0c6:	f7ff ffef 	bl	d0a8 <attcCcbByHandle>
    d0ca:	4606      	mov	r6, r0
    d0cc:	b198      	cbz	r0, d0f6 <attcDataCback+0x36>
    d0ce:	7a23      	ldrb	r3, [r4, #8]
    d0d0:	2b19      	cmp	r3, #25
    d0d2:	d805      	bhi.n	d0e0 <attcDataCback+0x20>
    d0d4:	4622      	mov	r2, r4
    d0d6:	4629      	mov	r1, r5
    d0d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d0dc:	f000 ba5e 	b.w	d59c <attcProcRsp>
    d0e0:	2b1b      	cmp	r3, #27
    d0e2:	d001      	beq.n	d0e8 <attcDataCback+0x28>
    d0e4:	2b1d      	cmp	r3, #29
    d0e6:	d106      	bne.n	d0f6 <attcDataCback+0x36>
    d0e8:	4622      	mov	r2, r4
    d0ea:	4629      	mov	r1, r5
    d0ec:	4630      	mov	r0, r6
    d0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d0f2:	f000 baaf 	b.w	d654 <attcProcInd>
    d0f6:	bd70      	pop	{r4, r5, r6, pc}

0000d0f8 <attcFreePkt>:
    d0f8:	b510      	push	{r4, lr}
    d0fa:	4604      	mov	r4, r0
    d0fc:	6840      	ldr	r0, [r0, #4]
    d0fe:	b118      	cbz	r0, d108 <attcFreePkt+0x10>
    d100:	f00d fc96 	bl	1aa30 <WsfMsgFree>
    d104:	2300      	movs	r3, #0
    d106:	6063      	str	r3, [r4, #4]
    d108:	bd10      	pop	{r4, pc}

0000d10a <attcSendMtuReq>:
    d10a:	b510      	push	{r4, lr}
    d10c:	6803      	ldr	r3, [r0, #0]
    d10e:	7f5a      	ldrb	r2, [r3, #29]
    d110:	4604      	mov	r4, r0
    d112:	b12a      	cbz	r2, d120 <attcSendMtuReq+0x16>
    d114:	3010      	adds	r0, #16
    d116:	f7ff ffef 	bl	d0f8 <attcFreePkt>
    d11a:	2300      	movs	r3, #0
    d11c:	74a3      	strb	r3, [r4, #18]
    d11e:	bd10      	pop	{r4, pc}
    d120:	2201      	movs	r2, #1
    d122:	775a      	strb	r2, [r3, #29]
    d124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d128:	e77a      	b.n	d020 <attcSendSimpleReq>

0000d12a <attcExecCallback>:
    d12a:	2901      	cmp	r1, #1
    d12c:	b513      	push	{r0, r1, r4, lr}
    d12e:	d003      	beq.n	d138 <attcExecCallback+0xe>
    d130:	2400      	movs	r4, #0
    d132:	9400      	str	r4, [sp, #0]
    d134:	f7ff fed4 	bl	cee0 <attExecCallback>
    d138:	b002      	add	sp, #8
    d13a:	bd10      	pop	{r4, pc}

0000d13c <attcSendWriteCmd>:
    d13c:	b510      	push	{r4, lr}
    d13e:	4604      	mov	r4, r0
    d140:	f7ff ff6e 	bl	d020 <attcSendSimpleReq>
    d144:	6820      	ldr	r0, [r4, #0]
    d146:	8b22      	ldrh	r2, [r4, #24]
    d148:	7f00      	ldrb	r0, [r0, #28]
    d14a:	2300      	movs	r3, #0
    d14c:	210a      	movs	r1, #10
    d14e:	f7ff ffec 	bl	d12a <attcExecCallback>
    d152:	2300      	movs	r3, #0
    d154:	74a3      	strb	r3, [r4, #18]
    d156:	bd10      	pop	{r4, pc}

0000d158 <attcReqClear>:
    d158:	b570      	push	{r4, r5, r6, lr}
    d15a:	4606      	mov	r6, r0
    d15c:	4608      	mov	r0, r1
    d15e:	460c      	mov	r4, r1
    d160:	4615      	mov	r5, r2
    d162:	f7ff ffc9 	bl	d0f8 <attcFreePkt>
    d166:	6830      	ldr	r0, [r6, #0]
    d168:	8922      	ldrh	r2, [r4, #8]
    d16a:	78a1      	ldrb	r1, [r4, #2]
    d16c:	7f00      	ldrb	r0, [r0, #28]
    d16e:	462b      	mov	r3, r5
    d170:	f7ff ffdb 	bl	d12a <attcExecCallback>
    d174:	2300      	movs	r3, #0
    d176:	70a3      	strb	r3, [r4, #2]
    d178:	bd70      	pop	{r4, r5, r6, pc}

0000d17a <attcSendPrepWriteReq>:
    d17a:	b570      	push	{r4, r5, r6, lr}
    d17c:	7cc3      	ldrb	r3, [r0, #19]
    d17e:	8b85      	ldrh	r5, [r0, #28]
    d180:	2b01      	cmp	r3, #1
    d182:	4604      	mov	r4, r0
    d184:	d149      	bne.n	d21a <attcSendPrepWriteReq+0xa0>
    d186:	6803      	ldr	r3, [r0, #0]
    d188:	8b5b      	ldrh	r3, [r3, #26]
    d18a:	3b05      	subs	r3, #5
    d18c:	429d      	cmp	r5, r3
    d18e:	bfa8      	it	ge
    d190:	b29d      	uxthge	r5, r3
    d192:	f105 000d 	add.w	r0, r5, #13
    d196:	b280      	uxth	r0, r0
    d198:	f7ff fed0 	bl	cf3c <attMsgAlloc>
    d19c:	4606      	mov	r6, r0
    d19e:	2800      	cmp	r0, #0
    d1a0:	d033      	beq.n	d20a <attcSendPrepWriteReq+0x90>
    d1a2:	6963      	ldr	r3, [r4, #20]
    d1a4:	4602      	mov	r2, r0
    d1a6:	f103 010c 	add.w	r1, r3, #12
    d1aa:	f853 0b04 	ldr.w	r0, [r3], #4
    d1ae:	f842 0b04 	str.w	r0, [r2], #4
    d1b2:	428b      	cmp	r3, r1
    d1b4:	d1f9      	bne.n	d1aa <attcSendPrepWriteReq+0x30>
    d1b6:	781b      	ldrb	r3, [r3, #0]
    d1b8:	7013      	strb	r3, [r2, #0]
    d1ba:	6a21      	ldr	r1, [r4, #32]
    d1bc:	462a      	mov	r2, r5
    d1be:	f106 000d 	add.w	r0, r6, #13
    d1c2:	f7fe ffcd 	bl	c160 <memcpy>
    d1c6:	6a23      	ldr	r3, [r4, #32]
    d1c8:	442b      	add	r3, r5
    d1ca:	6223      	str	r3, [r4, #32]
    d1cc:	8ba3      	ldrh	r3, [r4, #28]
    d1ce:	1b5b      	subs	r3, r3, r5
    d1d0:	83a3      	strh	r3, [r4, #28]
    d1d2:	8be3      	ldrh	r3, [r4, #30]
    d1d4:	72f3      	strb	r3, [r6, #11]
    d1d6:	8be3      	ldrh	r3, [r4, #30]
    d1d8:	0a1b      	lsrs	r3, r3, #8
    d1da:	7333      	strb	r3, [r6, #12]
    d1dc:	8be3      	ldrh	r3, [r4, #30]
    d1de:	442b      	add	r3, r5
    d1e0:	83e3      	strh	r3, [r4, #30]
    d1e2:	2310      	movs	r3, #16
    d1e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    d1e8:	4b0e      	ldr	r3, [pc, #56]	; (d224 <attcSendPrepWriteReq+0xaa>)
    d1ea:	681b      	ldr	r3, [r3, #0]
    d1ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d1f0:	7999      	ldrb	r1, [r3, #6]
    d1f2:	f00d fdbf 	bl	1ad74 <WsfTimerStartSec>
    d1f6:	6821      	ldr	r1, [r4, #0]
    d1f8:	1d6a      	adds	r2, r5, #5
    d1fa:	4633      	mov	r3, r6
    d1fc:	b292      	uxth	r2, r2
    d1fe:	8b09      	ldrh	r1, [r1, #24]
    d200:	2004      	movs	r0, #4
    d202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d206:	f003 be6b 	b.w	10ee0 <L2cDataReq>
    d20a:	f104 0110 	add.w	r1, r4, #16
    d20e:	4620      	mov	r0, r4
    d210:	2270      	movs	r2, #112	; 0x70
    d212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d216:	f7ff bf9f 	b.w	d158 <attcReqClear>
    d21a:	2300      	movs	r3, #0
    d21c:	6946      	ldr	r6, [r0, #20]
    d21e:	6143      	str	r3, [r0, #20]
    d220:	e7d7      	b.n	d1d2 <attcSendPrepWriteReq+0x58>
    d222:	bf00      	nop
    d224:	10017f70 	.word	0x10017f70

0000d228 <attcSendContinuingReq>:
    d228:	b570      	push	{r4, r5, r6, lr}
    d22a:	7cc3      	ldrb	r3, [r0, #19]
    d22c:	6945      	ldr	r5, [r0, #20]
    d22e:	2b01      	cmp	r3, #1
    d230:	4604      	mov	r4, r0
    d232:	d12e      	bne.n	d292 <attcSendContinuingReq+0x6a>
    d234:	8828      	ldrh	r0, [r5, #0]
    d236:	3008      	adds	r0, #8
    d238:	b280      	uxth	r0, r0
    d23a:	f7ff fe7f 	bl	cf3c <attMsgAlloc>
    d23e:	4605      	mov	r5, r0
    d240:	b1f8      	cbz	r0, d282 <attcSendContinuingReq+0x5a>
    d242:	6961      	ldr	r1, [r4, #20]
    d244:	880a      	ldrh	r2, [r1, #0]
    d246:	3208      	adds	r2, #8
    d248:	f7fe ff8a 	bl	c160 <memcpy>
    d24c:	7ca2      	ldrb	r2, [r4, #18]
    d24e:	7fa3      	ldrb	r3, [r4, #30]
    d250:	2a06      	cmp	r2, #6
    d252:	d121      	bne.n	d298 <attcSendContinuingReq+0x70>
    d254:	72eb      	strb	r3, [r5, #11]
    d256:	8be3      	ldrh	r3, [r4, #30]
    d258:	0a1b      	lsrs	r3, r3, #8
    d25a:	732b      	strb	r3, [r5, #12]
    d25c:	2310      	movs	r3, #16
    d25e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    d262:	4b11      	ldr	r3, [pc, #68]	; (d2a8 <attcSendContinuingReq+0x80>)
    d264:	681b      	ldr	r3, [r3, #0]
    d266:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d26a:	7999      	ldrb	r1, [r3, #6]
    d26c:	f00d fd82 	bl	1ad74 <WsfTimerStartSec>
    d270:	6821      	ldr	r1, [r4, #0]
    d272:	882a      	ldrh	r2, [r5, #0]
    d274:	8b09      	ldrh	r1, [r1, #24]
    d276:	462b      	mov	r3, r5
    d278:	2004      	movs	r0, #4
    d27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d27e:	f003 be2f 	b.w	10ee0 <L2cDataReq>
    d282:	f104 0110 	add.w	r1, r4, #16
    d286:	4620      	mov	r0, r4
    d288:	2270      	movs	r2, #112	; 0x70
    d28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d28e:	f7ff bf63 	b.w	d158 <attcReqClear>
    d292:	2300      	movs	r3, #0
    d294:	6143      	str	r3, [r0, #20]
    d296:	e7d9      	b.n	d24c <attcSendContinuingReq+0x24>
    d298:	726b      	strb	r3, [r5, #9]
    d29a:	8be3      	ldrh	r3, [r4, #30]
    d29c:	0a1b      	lsrs	r3, r3, #8
    d29e:	72ab      	strb	r3, [r5, #10]
    d2a0:	8c23      	ldrh	r3, [r4, #32]
    d2a2:	72eb      	strb	r3, [r5, #11]
    d2a4:	8c23      	ldrh	r3, [r4, #32]
    d2a6:	e7d7      	b.n	d258 <attcSendContinuingReq+0x30>
    d2a8:	10017f70 	.word	0x10017f70

0000d2ac <attcConnCback>:
    d2ac:	788b      	ldrb	r3, [r1, #2]
    d2ae:	2b27      	cmp	r3, #39	; 0x27
    d2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2b4:	4605      	mov	r5, r0
    d2b6:	d11a      	bne.n	d2ee <attcConnCback+0x42>
    d2b8:	7f00      	ldrb	r0, [r0, #28]
    d2ba:	f002 ff49 	bl	10150 <DmConnRole>
    d2be:	2800      	cmp	r0, #0
    d2c0:	d14c      	bne.n	d35c <attcConnCback+0xb0>
    d2c2:	4c27      	ldr	r4, [pc, #156]	; (d360 <attcConnCback+0xb4>)
    d2c4:	6823      	ldr	r3, [r4, #0]
    d2c6:	889e      	ldrh	r6, [r3, #4]
    d2c8:	f009 fe7e 	bl	16fc8 <HciGetMaxRxAclLen>
    d2cc:	3804      	subs	r0, #4
    d2ce:	4286      	cmp	r6, r0
    d2d0:	da08      	bge.n	d2e4 <attcConnCback+0x38>
    d2d2:	6823      	ldr	r3, [r4, #0]
    d2d4:	8899      	ldrh	r1, [r3, #4]
    d2d6:	2917      	cmp	r1, #23
    d2d8:	d040      	beq.n	d35c <attcConnCback+0xb0>
    d2da:	7f28      	ldrb	r0, [r5, #28]
    d2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d2e0:	f000 ba9c 	b.w	d81c <AttcMtuReq>
    d2e4:	f009 fe70 	bl	16fc8 <HciGetMaxRxAclLen>
    d2e8:	1f01      	subs	r1, r0, #4
    d2ea:	b289      	uxth	r1, r1
    d2ec:	e7f3      	b.n	d2d6 <attcConnCback+0x2a>
    d2ee:	2b28      	cmp	r3, #40	; 0x28
    d2f0:	d134      	bne.n	d35c <attcConnCback+0xb0>
    d2f2:	78cc      	ldrb	r4, [r1, #3]
    d2f4:	b904      	cbnz	r4, d2f8 <attcConnCback+0x4c>
    d2f6:	7a0c      	ldrb	r4, [r1, #8]
    d2f8:	7f2e      	ldrb	r6, [r5, #28]
    d2fa:	4d1a      	ldr	r5, [pc, #104]	; (d364 <attcConnCback+0xb8>)
    d2fc:	3e01      	subs	r6, #1
    d2fe:	2738      	movs	r7, #56	; 0x38
    d300:	4377      	muls	r7, r6
    d302:	eb05 0807 	add.w	r8, r5, r7
    d306:	3420      	adds	r4, #32
    d308:	f898 3012 	ldrb.w	r3, [r8, #18]
    d30c:	b2e4      	uxtb	r4, r4
    d30e:	b15b      	cbz	r3, d328 <attcConnCback+0x7c>
    d310:	f107 0024 	add.w	r0, r7, #36	; 0x24
    d314:	4428      	add	r0, r5
    d316:	f00d fd53 	bl	1adc0 <WsfTimerStop>
    d31a:	f107 0110 	add.w	r1, r7, #16
    d31e:	4622      	mov	r2, r4
    d320:	4429      	add	r1, r5
    d322:	4640      	mov	r0, r8
    d324:	f7ff ff18 	bl	d158 <attcReqClear>
    d328:	2338      	movs	r3, #56	; 0x38
    d32a:	fb03 5306 	mla	r3, r3, r6, r5
    d32e:	799b      	ldrb	r3, [r3, #6]
    d330:	b12b      	cbz	r3, d33e <attcConnCback+0x92>
    d332:	1d39      	adds	r1, r7, #4
    d334:	4622      	mov	r2, r4
    d336:	4429      	add	r1, r5
    d338:	4640      	mov	r0, r8
    d33a:	f7ff ff0d 	bl	d158 <attcReqClear>
    d33e:	2338      	movs	r3, #56	; 0x38
    d340:	fb03 5606 	mla	r6, r3, r6, r5
    d344:	3630      	adds	r6, #48	; 0x30
    d346:	2300      	movs	r3, #0
    d348:	80b3      	strh	r3, [r6, #4]
    d34a:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    d34e:	b12b      	cbz	r3, d35c <attcConnCback+0xb0>
    d350:	4621      	mov	r1, r4
    d352:	4640      	mov	r0, r8
    d354:	685b      	ldr	r3, [r3, #4]
    d356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d35a:	4718      	bx	r3
    d35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d360:	10017f70 	.word	0x10017f70
    d364:	10018d74 	.word	0x10018d74

0000d368 <attcMsgCback>:
    d368:	b570      	push	{r4, r5, r6, lr}
    d36a:	4605      	mov	r5, r0
    d36c:	7800      	ldrb	r0, [r0, #0]
    d36e:	f7ff fe8e 	bl	d08e <attcCcbByConnId>
    d372:	78ab      	ldrb	r3, [r5, #2]
    d374:	4604      	mov	r4, r0
    d376:	b938      	cbnz	r0, d388 <attcMsgCback+0x20>
    d378:	3b01      	subs	r3, #1
    d37a:	2b0c      	cmp	r3, #12
    d37c:	d81b      	bhi.n	d3b6 <attcMsgCback+0x4e>
    d37e:	4628      	mov	r0, r5
    d380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d384:	f7ff beb8 	b.w	d0f8 <attcFreePkt>
    d388:	2b0c      	cmp	r3, #12
    d38a:	d81a      	bhi.n	d3c2 <attcMsgCback+0x5a>
    d38c:	7983      	ldrb	r3, [r0, #6]
    d38e:	b913      	cbnz	r3, d396 <attcMsgCback+0x2e>
    d390:	7c83      	ldrb	r3, [r0, #18]
    d392:	2b01      	cmp	r3, #1
    d394:	d906      	bls.n	d3a4 <attcMsgCback+0x3c>
    d396:	2272      	movs	r2, #114	; 0x72
    d398:	4629      	mov	r1, r5
    d39a:	4620      	mov	r0, r4
    d39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d3a0:	f7ff beda 	b.w	d158 <attcReqClear>
    d3a4:	d002      	beq.n	d3ac <attcMsgCback+0x44>
    d3a6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    d3aa:	b12b      	cbz	r3, d3b8 <attcMsgCback+0x50>
    d3ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    d3b0:	3404      	adds	r4, #4
    d3b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    d3b6:	bd70      	pop	{r4, r5, r6, pc}
    d3b8:	4629      	mov	r1, r5
    d3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d3be:	f7ff be53 	b.w	d068 <attcSetupReq>
    d3c2:	f1a3 020d 	sub.w	r2, r3, #13
    d3c6:	2a01      	cmp	r2, #1
    d3c8:	d809      	bhi.n	d3de <attcMsgCback+0x76>
    d3ca:	4b15      	ldr	r3, [pc, #84]	; (d420 <attcMsgCback+0xb8>)
    d3cc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d0f0      	beq.n	d3b6 <attcMsgCback+0x4e>
    d3d4:	4629      	mov	r1, r5
    d3d6:	681b      	ldr	r3, [r3, #0]
    d3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d3dc:	4718      	bx	r3
    d3de:	2b0f      	cmp	r3, #15
    d3e0:	d10f      	bne.n	d402 <attcMsgCback+0x9a>
    d3e2:	7c83      	ldrb	r3, [r0, #18]
    d3e4:	2b01      	cmp	r3, #1
    d3e6:	d906      	bls.n	d3f6 <attcMsgCback+0x8e>
    d3e8:	3024      	adds	r0, #36	; 0x24
    d3ea:	f00d fce9 	bl	1adc0 <WsfTimerStop>
    d3ee:	2274      	movs	r2, #116	; 0x74
    d3f0:	f104 0110 	add.w	r1, r4, #16
    d3f4:	e7d1      	b.n	d39a <attcMsgCback+0x32>
    d3f6:	7983      	ldrb	r3, [r0, #6]
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d0dc      	beq.n	d3b6 <attcMsgCback+0x4e>
    d3fc:	2274      	movs	r2, #116	; 0x74
    d3fe:	1d01      	adds	r1, r0, #4
    d400:	e7cc      	b.n	d39c <attcMsgCback+0x34>
    d402:	2b10      	cmp	r3, #16
    d404:	d1d7      	bne.n	d3b6 <attcMsgCback+0x4e>
    d406:	7c83      	ldrb	r3, [r0, #18]
    d408:	2b00      	cmp	r3, #0
    d40a:	d0d4      	beq.n	d3b6 <attcMsgCback+0x4e>
    d40c:	2271      	movs	r2, #113	; 0x71
    d40e:	f100 0110 	add.w	r1, r0, #16
    d412:	f7ff fea1 	bl	d158 <attcReqClear>
    d416:	6823      	ldr	r3, [r4, #0]
    d418:	2201      	movs	r2, #1
    d41a:	77da      	strb	r2, [r3, #31]
    d41c:	e7cb      	b.n	d3b6 <attcMsgCback+0x4e>
    d41e:	bf00      	nop
    d420:	10018d74 	.word	0x10018d74

0000d424 <AttcInit>:
    d424:	b510      	push	{r4, lr}
    d426:	490c      	ldr	r1, [pc, #48]	; (d458 <AttcInit+0x34>)
    d428:	4a0c      	ldr	r2, [pc, #48]	; (d45c <AttcInit+0x38>)
    d42a:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    d42e:	2300      	movs	r3, #0
    d430:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    d434:	3238      	adds	r2, #56	; 0x38
    d436:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    d43a:	3301      	adds	r3, #1
    d43c:	2b08      	cmp	r3, #8
    d43e:	f842 4c38 	str.w	r4, [r2, #-56]
    d442:	f802 0c0c 	strb.w	r0, [r2, #-12]
    d446:	f822 3c0a 	strh.w	r3, [r2, #-10]
    d44a:	f102 0238 	add.w	r2, r2, #56	; 0x38
    d44e:	d1f2      	bne.n	d436 <AttcInit+0x12>
    d450:	4b03      	ldr	r3, [pc, #12]	; (d460 <AttcInit+0x3c>)
    d452:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    d456:	bd10      	pop	{r4, pc}
    d458:	10018c60 	.word	0x10018c60
    d45c:	10018d74 	.word	0x10018d74
    d460:	0003ba08 	.word	0x0003ba08

0000d464 <attcProcErrRsp>:
    d464:	7c81      	ldrb	r1, [r0, #18]
    d466:	7099      	strb	r1, [r3, #2]
    d468:	1f48      	subs	r0, r1, #5
    d46a:	2801      	cmp	r0, #1
    d46c:	d908      	bls.n	d480 <attcProcErrRsp+0x1c>
    d46e:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    d472:	2909      	cmp	r1, #9
    d474:	bf1f      	itttt	ne
    d476:	7ad0      	ldrbne	r0, [r2, #11]
    d478:	7a91      	ldrbne	r1, [r2, #10]
    d47a:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    d47e:	8159      	strhne	r1, [r3, #10]
    d480:	7b12      	ldrb	r2, [r2, #12]
    d482:	b11a      	cbz	r2, d48c <attcProcErrRsp+0x28>
    d484:	70da      	strb	r2, [r3, #3]
    d486:	2200      	movs	r2, #0
    d488:	811a      	strh	r2, [r3, #8]
    d48a:	4770      	bx	lr
    d48c:	2275      	movs	r2, #117	; 0x75
    d48e:	e7f9      	b.n	d484 <attcProcErrRsp+0x20>

0000d490 <attcProcFindOrReadRsp>:
    d490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d494:	7c87      	ldrb	r7, [r0, #18]
    d496:	7a55      	ldrb	r5, [r2, #9]
    d498:	3108      	adds	r1, #8
    d49a:	2f02      	cmp	r7, #2
    d49c:	4411      	add	r1, r2
    d49e:	f102 020a 	add.w	r2, r2, #10
    d4a2:	d12a      	bne.n	d4fa <attcProcFindOrReadRsp+0x6a>
    d4a4:	2d01      	cmp	r5, #1
    d4a6:	bf14      	ite	ne
    d4a8:	2510      	movne	r5, #16
    d4aa:	2502      	moveq	r5, #2
    d4ac:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    d4b0:	f64f 7eff 	movw	lr, #65535	; 0xffff
    d4b4:	428a      	cmp	r2, r1
    d4b6:	d210      	bcs.n	d4da <attcProcFindOrReadRsp+0x4a>
    d4b8:	7854      	ldrb	r4, [r2, #1]
    d4ba:	7816      	ldrb	r6, [r2, #0]
    d4bc:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    d4c0:	b2b6      	uxth	r6, r6
    d4c2:	b146      	cbz	r6, d4d6 <attcProcFindOrReadRsp+0x46>
    d4c4:	f1bc 0f00 	cmp.w	ip, #0
    d4c8:	d005      	beq.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d4ca:	45b4      	cmp	ip, r6
    d4cc:	d803      	bhi.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d4ce:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    d4d2:	45b0      	cmp	r8, r6
    d4d4:	d217      	bcs.n	d506 <attcProcFindOrReadRsp+0x76>
    d4d6:	2273      	movs	r2, #115	; 0x73
    d4d8:	70da      	strb	r2, [r3, #3]
    d4da:	78db      	ldrb	r3, [r3, #3]
    d4dc:	b95b      	cbnz	r3, d4f6 <attcProcFindOrReadRsp+0x66>
    d4de:	7cc3      	ldrb	r3, [r0, #19]
    d4e0:	2b01      	cmp	r3, #1
    d4e2:	d108      	bne.n	d4f6 <attcProcFindOrReadRsp+0x66>
    d4e4:	f1bc 0f00 	cmp.w	ip, #0
    d4e8:	d003      	beq.n	d4f2 <attcProcFindOrReadRsp+0x62>
    d4ea:	8c03      	ldrh	r3, [r0, #32]
    d4ec:	3301      	adds	r3, #1
    d4ee:	459c      	cmp	ip, r3
    d4f0:	d129      	bne.n	d546 <attcProcFindOrReadRsp+0xb6>
    d4f2:	2300      	movs	r3, #0
    d4f4:	74c3      	strb	r3, [r0, #19]
    d4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d4fa:	2f04      	cmp	r7, #4
    d4fc:	bf0c      	ite	eq
    d4fe:	3d02      	subeq	r5, #2
    d500:	3d04      	subne	r5, #4
    d502:	b2ed      	uxtb	r5, r5
    d504:	e7d2      	b.n	d4ac <attcProcFindOrReadRsp+0x1c>
    d506:	2f08      	cmp	r7, #8
    d508:	d11a      	bne.n	d540 <attcProcFindOrReadRsp+0xb0>
    d50a:	f892 9003 	ldrb.w	r9, [r2, #3]
    d50e:	7894      	ldrb	r4, [r2, #2]
    d510:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    d514:	b2a4      	uxth	r4, r4
    d516:	3204      	adds	r2, #4
    d518:	2c00      	cmp	r4, #0
    d51a:	d0dc      	beq.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d51c:	42a6      	cmp	r6, r4
    d51e:	d8da      	bhi.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d520:	45a4      	cmp	ip, r4
    d522:	d8d8      	bhi.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d524:	45a0      	cmp	r8, r4
    d526:	d3d6      	bcc.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d528:	4574      	cmp	r4, lr
    d52a:	bf18      	it	ne
    d52c:	3401      	addne	r4, #1
    d52e:	442a      	add	r2, r5
    d530:	bf14      	ite	ne
    d532:	fa1f fc84 	uxthne.w	ip, r4
    d536:	f04f 0c00 	moveq.w	ip, #0
    d53a:	4291      	cmp	r1, r2
    d53c:	d2ba      	bcs.n	d4b4 <attcProcFindOrReadRsp+0x24>
    d53e:	e7ca      	b.n	d4d6 <attcProcFindOrReadRsp+0x46>
    d540:	3202      	adds	r2, #2
    d542:	4634      	mov	r4, r6
    d544:	e7f0      	b.n	d528 <attcProcFindOrReadRsp+0x98>
    d546:	f8a0 c01e 	strh.w	ip, [r0, #30]
    d54a:	f8a0 c018 	strh.w	ip, [r0, #24]
    d54e:	e7d2      	b.n	d4f6 <attcProcFindOrReadRsp+0x66>

0000d550 <attcProcReadRsp>:
    d550:	4770      	bx	lr

0000d552 <attcProcWriteRsp>:
    d552:	2200      	movs	r2, #0
    d554:	811a      	strh	r2, [r3, #8]
    d556:	4770      	bx	lr

0000d558 <attcProcMtuRsp>:
    d558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d55a:	7a93      	ldrb	r3, [r2, #10]
    d55c:	7a54      	ldrb	r4, [r2, #9]
    d55e:	4d0e      	ldr	r5, [pc, #56]	; (d598 <attcProcMtuRsp+0x40>)
    d560:	6806      	ldr	r6, [r0, #0]
    d562:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    d566:	b2a4      	uxth	r4, r4
    d568:	682b      	ldr	r3, [r5, #0]
    d56a:	2c17      	cmp	r4, #23
    d56c:	bf38      	it	cc
    d56e:	2417      	movcc	r4, #23
    d570:	889f      	ldrh	r7, [r3, #4]
    d572:	f009 fd29 	bl	16fc8 <HciGetMaxRxAclLen>
    d576:	3804      	subs	r0, #4
    d578:	4287      	cmp	r7, r0
    d57a:	da07      	bge.n	d58c <attcProcMtuRsp+0x34>
    d57c:	682b      	ldr	r3, [r5, #0]
    d57e:	889a      	ldrh	r2, [r3, #4]
    d580:	4621      	mov	r1, r4
    d582:	4630      	mov	r0, r6
    d584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d588:	f7ff bcc6 	b.w	cf18 <attSetMtu>
    d58c:	f009 fd1c 	bl	16fc8 <HciGetMaxRxAclLen>
    d590:	1f02      	subs	r2, r0, #4
    d592:	b292      	uxth	r2, r2
    d594:	e7f4      	b.n	d580 <attcProcMtuRsp+0x28>
    d596:	bf00      	nop
    d598:	10017f70 	.word	0x10017f70

0000d59c <attcProcRsp>:
    d59c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d5a0:	460f      	mov	r7, r1
    d5a2:	7c81      	ldrb	r1, [r0, #18]
    d5a4:	4604      	mov	r4, r0
    d5a6:	4616      	mov	r6, r2
    d5a8:	2900      	cmp	r1, #0
    d5aa:	d042      	beq.n	d632 <attcProcRsp+0x96>
    d5ac:	7a13      	ldrb	r3, [r2, #8]
    d5ae:	105b      	asrs	r3, r3, #1
    d5b0:	b2da      	uxtb	r2, r3
    d5b2:	f88d 2002 	strb.w	r2, [sp, #2]
    d5b6:	b10b      	cbz	r3, d5bc <attcProcRsp+0x20>
    d5b8:	4291      	cmp	r1, r2
    d5ba:	d13a      	bne.n	d632 <attcProcRsp+0x96>
    d5bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d5c0:	f00d fbfe 	bl	1adc0 <WsfTimerStop>
    d5c4:	f106 0309 	add.w	r3, r6, #9
    d5c8:	9301      	str	r3, [sp, #4]
    d5ca:	1e7b      	subs	r3, r7, #1
    d5cc:	f8ad 3008 	strh.w	r3, [sp, #8]
    d5d0:	8b23      	ldrh	r3, [r4, #24]
    d5d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
    d5d6:	f8ad 300a 	strh.w	r3, [sp, #10]
    d5da:	4b1c      	ldr	r3, [pc, #112]	; (d64c <attcProcRsp+0xb0>)
    d5dc:	2500      	movs	r5, #0
    d5de:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    d5e2:	f88d 5003 	strb.w	r5, [sp, #3]
    d5e6:	466b      	mov	r3, sp
    d5e8:	4632      	mov	r2, r6
    d5ea:	4639      	mov	r1, r7
    d5ec:	4620      	mov	r0, r4
    d5ee:	47c0      	blx	r8
    d5f0:	7ce3      	ldrb	r3, [r4, #19]
    d5f2:	b113      	cbz	r3, d5fa <attcProcRsp+0x5e>
    d5f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d5f8:	b123      	cbz	r3, d604 <attcProcRsp+0x68>
    d5fa:	74a5      	strb	r5, [r4, #18]
    d5fc:	f104 0010 	add.w	r0, r4, #16
    d600:	f7ff fd7a 	bl	d0f8 <attcFreePkt>
    d604:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d608:	2b01      	cmp	r3, #1
    d60a:	d00a      	beq.n	d622 <attcProcRsp+0x86>
    d60c:	7ce3      	ldrb	r3, [r4, #19]
    d60e:	f88d 300c 	strb.w	r3, [sp, #12]
    d612:	8a23      	ldrh	r3, [r4, #16]
    d614:	f8ad 3000 	strh.w	r3, [sp]
    d618:	4b0d      	ldr	r3, [pc, #52]	; (d650 <attcProcRsp+0xb4>)
    d61a:	4668      	mov	r0, sp
    d61c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d620:	4798      	blx	r3
    d622:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d626:	b923      	cbnz	r3, d632 <attcProcRsp+0x96>
    d628:	6965      	ldr	r5, [r4, #20]
    d62a:	b12d      	cbz	r5, d638 <attcProcRsp+0x9c>
    d62c:	4620      	mov	r0, r4
    d62e:	f7ff fd13 	bl	d058 <attcSendReq>
    d632:	b004      	add	sp, #16
    d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d638:	79a3      	ldrb	r3, [r4, #6]
    d63a:	2b00      	cmp	r3, #0
    d63c:	d0f9      	beq.n	d632 <attcProcRsp+0x96>
    d63e:	1d21      	adds	r1, r4, #4
    d640:	4620      	mov	r0, r4
    d642:	f7ff fd11 	bl	d068 <attcSetupReq>
    d646:	71a5      	strb	r5, [r4, #6]
    d648:	e7f3      	b.n	d632 <attcProcRsp+0x96>
    d64a:	bf00      	nop
    d64c:	0003ba18 	.word	0x0003ba18
    d650:	10018c60 	.word	0x10018c60

0000d654 <attcProcInd>:
    d654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d656:	7a13      	ldrb	r3, [r2, #8]
    d658:	4604      	mov	r4, r0
    d65a:	105b      	asrs	r3, r3, #1
    d65c:	7a90      	ldrb	r0, [r2, #10]
    d65e:	f88d 3002 	strb.w	r3, [sp, #2]
    d662:	320b      	adds	r2, #11
    d664:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    d668:	9201      	str	r2, [sp, #4]
    d66a:	6822      	ldr	r2, [r4, #0]
    d66c:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    d670:	7f12      	ldrb	r2, [r2, #28]
    d672:	f8ad 2000 	strh.w	r2, [sp]
    d676:	b29b      	uxth	r3, r3
    d678:	2200      	movs	r2, #0
    d67a:	3903      	subs	r1, #3
    d67c:	f8ad 300a 	strh.w	r3, [sp, #10]
    d680:	f8ad 1008 	strh.w	r1, [sp, #8]
    d684:	f88d 2003 	strb.w	r2, [sp, #3]
    d688:	f88d 200c 	strb.w	r2, [sp, #12]
    d68c:	b123      	cbz	r3, d698 <attcProcInd+0x44>
    d68e:	4b0f      	ldr	r3, [pc, #60]	; (d6cc <attcProcInd+0x78>)
    d690:	4668      	mov	r0, sp
    d692:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    d696:	4798      	blx	r3
    d698:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d69c:	2b0e      	cmp	r3, #14
    d69e:	d10f      	bne.n	d6c0 <attcProcInd+0x6c>
    d6a0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    d6a4:	b973      	cbnz	r3, d6c4 <attcProcInd+0x70>
    d6a6:	2009      	movs	r0, #9
    d6a8:	f7ff fc48 	bl	cf3c <attMsgAlloc>
    d6ac:	4603      	mov	r3, r0
    d6ae:	b138      	cbz	r0, d6c0 <attcProcInd+0x6c>
    d6b0:	221e      	movs	r2, #30
    d6b2:	7202      	strb	r2, [r0, #8]
    d6b4:	6821      	ldr	r1, [r4, #0]
    d6b6:	2201      	movs	r2, #1
    d6b8:	8b09      	ldrh	r1, [r1, #24]
    d6ba:	2004      	movs	r0, #4
    d6bc:	f003 fc10 	bl	10ee0 <L2cDataReq>
    d6c0:	b004      	add	sp, #16
    d6c2:	bd10      	pop	{r4, pc}
    d6c4:	2301      	movs	r3, #1
    d6c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    d6ca:	e7f9      	b.n	d6c0 <attcProcInd+0x6c>
    d6cc:	10018c60 	.word	0x10018c60

0000d6d0 <attcSendMsg>:
    d6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d6d4:	4605      	mov	r5, r0
    d6d6:	460f      	mov	r7, r1
    d6d8:	4616      	mov	r6, r2
    d6da:	461c      	mov	r4, r3
    d6dc:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d6e0:	f012 feb0 	bl	20444 <WsfTaskLock>
    d6e4:	4628      	mov	r0, r5
    d6e6:	f7ff fcd2 	bl	d08e <attcCcbByConnId>
    d6ea:	b920      	cbnz	r0, d6f6 <attcSendMsg+0x26>
    d6ec:	f012 feb0 	bl	20450 <WsfTaskUnlock>
    d6f0:	bb7c      	cbnz	r4, d752 <attcSendMsg+0x82>
    d6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6f6:	6803      	ldr	r3, [r0, #0]
    d6f8:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    d6fc:	f012 fea8 	bl	20450 <WsfTaskUnlock>
    d700:	f1b9 0f00 	cmp.w	r9, #0
    d704:	d0f4      	beq.n	d6f0 <attcSendMsg+0x20>
    d706:	b124      	cbz	r4, d712 <attcSendMsg+0x42>
    d708:	2e0b      	cmp	r6, #11
    d70a:	d015      	beq.n	d738 <attcSendMsg+0x68>
    d70c:	8823      	ldrh	r3, [r4, #0]
    d70e:	454b      	cmp	r3, r9
    d710:	d819      	bhi.n	d746 <attcSendMsg+0x76>
    d712:	200c      	movs	r0, #12
    d714:	f00d f975 	bl	1aa02 <WsfMsgAlloc>
    d718:	4601      	mov	r1, r0
    d71a:	2800      	cmp	r0, #0
    d71c:	d0e8      	beq.n	d6f0 <attcSendMsg+0x20>
    d71e:	4b0f      	ldr	r3, [pc, #60]	; (d75c <attcSendMsg+0x8c>)
    d720:	8005      	strh	r5, [r0, #0]
    d722:	f880 8003 	strb.w	r8, [r0, #3]
    d726:	7086      	strb	r6, [r0, #2]
    d728:	6044      	str	r4, [r0, #4]
    d72a:	8107      	strh	r7, [r0, #8]
    d72c:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d730:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d734:	f00d b989 	b.w	1aa4a <WsfMsgSend>
    d738:	f1b8 0f00 	cmp.w	r8, #0
    d73c:	d1e9      	bne.n	d712 <attcSendMsg+0x42>
    d73e:	8823      	ldrh	r3, [r4, #0]
    d740:	3305      	adds	r3, #5
    d742:	b29b      	uxth	r3, r3
    d744:	e7e3      	b.n	d70e <attcSendMsg+0x3e>
    d746:	2377      	movs	r3, #119	; 0x77
    d748:	463a      	mov	r2, r7
    d74a:	4631      	mov	r1, r6
    d74c:	4628      	mov	r0, r5
    d74e:	f7ff fcec 	bl	d12a <attcExecCallback>
    d752:	4620      	mov	r0, r4
    d754:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d758:	f00d b96a 	b.w	1aa30 <WsfMsgFree>
    d75c:	10018c60 	.word	0x10018c60

0000d760 <AttcFindInfoReq>:
    d760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d762:	4605      	mov	r5, r0
    d764:	200d      	movs	r0, #13
    d766:	460c      	mov	r4, r1
    d768:	4617      	mov	r7, r2
    d76a:	461e      	mov	r6, r3
    d76c:	f7ff fbe6 	bl	cf3c <attMsgAlloc>
    d770:	b160      	cbz	r0, d78c <AttcFindInfoReq+0x2c>
    d772:	2305      	movs	r3, #5
    d774:	8003      	strh	r3, [r0, #0]
    d776:	2304      	movs	r3, #4
    d778:	7203      	strb	r3, [r0, #8]
    d77a:	8044      	strh	r4, [r0, #2]
    d77c:	8087      	strh	r7, [r0, #4]
    d77e:	4603      	mov	r3, r0
    d780:	9600      	str	r6, [sp, #0]
    d782:	2202      	movs	r2, #2
    d784:	4621      	mov	r1, r4
    d786:	4628      	mov	r0, r5
    d788:	f7ff ffa2 	bl	d6d0 <attcSendMsg>
    d78c:	b003      	add	sp, #12
    d78e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d790 <AttcReadReq>:
    d790:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d792:	4605      	mov	r5, r0
    d794:	200b      	movs	r0, #11
    d796:	460c      	mov	r4, r1
    d798:	f7ff fbd0 	bl	cf3c <attMsgAlloc>
    d79c:	4603      	mov	r3, r0
    d79e:	b168      	cbz	r0, d7bc <AttcReadReq+0x2c>
    d7a0:	2203      	movs	r2, #3
    d7a2:	8002      	strh	r2, [r0, #0]
    d7a4:	220a      	movs	r2, #10
    d7a6:	7202      	strb	r2, [r0, #8]
    d7a8:	0a22      	lsrs	r2, r4, #8
    d7aa:	7282      	strb	r2, [r0, #10]
    d7ac:	2200      	movs	r2, #0
    d7ae:	7244      	strb	r4, [r0, #9]
    d7b0:	4621      	mov	r1, r4
    d7b2:	9200      	str	r2, [sp, #0]
    d7b4:	4628      	mov	r0, r5
    d7b6:	2205      	movs	r2, #5
    d7b8:	f7ff ff8a 	bl	d6d0 <attcSendMsg>
    d7bc:	b003      	add	sp, #12
    d7be:	bd30      	pop	{r4, r5, pc}

0000d7c0 <AttcWriteReq>:
    d7c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d7c4:	4607      	mov	r7, r0
    d7c6:	f102 000b 	add.w	r0, r2, #11
    d7ca:	b280      	uxth	r0, r0
    d7cc:	460d      	mov	r5, r1
    d7ce:	4616      	mov	r6, r2
    d7d0:	4698      	mov	r8, r3
    d7d2:	f7ff fbb3 	bl	cf3c <attMsgAlloc>
    d7d6:	4604      	mov	r4, r0
    d7d8:	b198      	cbz	r0, d802 <AttcWriteReq+0x42>
    d7da:	1cf3      	adds	r3, r6, #3
    d7dc:	8003      	strh	r3, [r0, #0]
    d7de:	2312      	movs	r3, #18
    d7e0:	7203      	strb	r3, [r0, #8]
    d7e2:	0a2b      	lsrs	r3, r5, #8
    d7e4:	7283      	strb	r3, [r0, #10]
    d7e6:	7245      	strb	r5, [r0, #9]
    d7e8:	4632      	mov	r2, r6
    d7ea:	4641      	mov	r1, r8
    d7ec:	300b      	adds	r0, #11
    d7ee:	f7fe fcb7 	bl	c160 <memcpy>
    d7f2:	2300      	movs	r3, #0
    d7f4:	9300      	str	r3, [sp, #0]
    d7f6:	2209      	movs	r2, #9
    d7f8:	4623      	mov	r3, r4
    d7fa:	4629      	mov	r1, r5
    d7fc:	4638      	mov	r0, r7
    d7fe:	f7ff ff67 	bl	d6d0 <attcSendMsg>
    d802:	b002      	add	sp, #8
    d804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d808 <AttcCancelReq>:
    d808:	b507      	push	{r0, r1, r2, lr}
    d80a:	2300      	movs	r3, #0
    d80c:	9300      	str	r3, [sp, #0]
    d80e:	220f      	movs	r2, #15
    d810:	4619      	mov	r1, r3
    d812:	f7ff ff5d 	bl	d6d0 <attcSendMsg>
    d816:	b003      	add	sp, #12
    d818:	f85d fb04 	ldr.w	pc, [sp], #4

0000d81c <AttcMtuReq>:
    d81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d81e:	4605      	mov	r5, r0
    d820:	200b      	movs	r0, #11
    d822:	460c      	mov	r4, r1
    d824:	f7ff fb8a 	bl	cf3c <attMsgAlloc>
    d828:	4603      	mov	r3, r0
    d82a:	b160      	cbz	r0, d846 <AttcMtuReq+0x2a>
    d82c:	2203      	movs	r2, #3
    d82e:	8002      	strh	r2, [r0, #0]
    d830:	7244      	strb	r4, [r0, #9]
    d832:	2202      	movs	r2, #2
    d834:	0a24      	lsrs	r4, r4, #8
    d836:	2100      	movs	r1, #0
    d838:	7202      	strb	r2, [r0, #8]
    d83a:	7284      	strb	r4, [r0, #10]
    d83c:	2201      	movs	r2, #1
    d83e:	9100      	str	r1, [sp, #0]
    d840:	4628      	mov	r0, r5
    d842:	f7ff ff45 	bl	d6d0 <attcSendMsg>
    d846:	b003      	add	sp, #12
    d848:	bd30      	pop	{r4, r5, pc}
    d84a:	bf00      	nop

0000d84c <attcProcFindByTypeRsp>:
    d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d84e:	3108      	adds	r1, #8
    d850:	8bc5      	ldrh	r5, [r0, #30]
    d852:	f102 0609 	add.w	r6, r2, #9
    d856:	440a      	add	r2, r1
    d858:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d85c:	4296      	cmp	r6, r2
    d85e:	d217      	bcs.n	d890 <attcProcFindByTypeRsp+0x44>
    d860:	7874      	ldrb	r4, [r6, #1]
    d862:	7837      	ldrb	r7, [r6, #0]
    d864:	f896 c003 	ldrb.w	ip, [r6, #3]
    d868:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    d86c:	78b4      	ldrb	r4, [r6, #2]
    d86e:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    d872:	b2bf      	uxth	r7, r7
    d874:	b2a4      	uxth	r4, r4
    d876:	42a7      	cmp	r7, r4
    d878:	f106 0604 	add.w	r6, r6, #4
    d87c:	d806      	bhi.n	d88c <attcProcFindByTypeRsp+0x40>
    d87e:	42bd      	cmp	r5, r7
    d880:	d804      	bhi.n	d88c <attcProcFindByTypeRsp+0x40>
    d882:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    d886:	45bc      	cmp	ip, r7
    d888:	d300      	bcc.n	d88c <attcProcFindByTypeRsp+0x40>
    d88a:	b96d      	cbnz	r5, d8a8 <attcProcFindByTypeRsp+0x5c>
    d88c:	2273      	movs	r2, #115	; 0x73
    d88e:	70da      	strb	r2, [r3, #3]
    d890:	78db      	ldrb	r3, [r3, #3]
    d892:	b943      	cbnz	r3, d8a6 <attcProcFindByTypeRsp+0x5a>
    d894:	7cc3      	ldrb	r3, [r0, #19]
    d896:	2b01      	cmp	r3, #1
    d898:	d105      	bne.n	d8a6 <attcProcFindByTypeRsp+0x5a>
    d89a:	b115      	cbz	r5, d8a2 <attcProcFindByTypeRsp+0x56>
    d89c:	8c03      	ldrh	r3, [r0, #32]
    d89e:	42ab      	cmp	r3, r5
    d8a0:	d20a      	bcs.n	d8b8 <attcProcFindByTypeRsp+0x6c>
    d8a2:	2300      	movs	r3, #0
    d8a4:	74c3      	strb	r3, [r0, #19]
    d8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8a8:	428c      	cmp	r4, r1
    d8aa:	bf1a      	itte	ne
    d8ac:	3401      	addne	r4, #1
    d8ae:	b2a5      	uxthne	r5, r4
    d8b0:	2500      	moveq	r5, #0
    d8b2:	42b2      	cmp	r2, r6
    d8b4:	d2d2      	bcs.n	d85c <attcProcFindByTypeRsp+0x10>
    d8b6:	e7e9      	b.n	d88c <attcProcFindByTypeRsp+0x40>
    d8b8:	83c5      	strh	r5, [r0, #30]
    d8ba:	8305      	strh	r5, [r0, #24]
    d8bc:	e7f3      	b.n	d8a6 <attcProcFindByTypeRsp+0x5a>

0000d8be <attcProcReadLongRsp>:
    d8be:	7cc2      	ldrb	r2, [r0, #19]
    d8c0:	2a01      	cmp	r2, #1
    d8c2:	d10a      	bne.n	d8da <attcProcReadLongRsp+0x1c>
    d8c4:	6802      	ldr	r2, [r0, #0]
    d8c6:	8b52      	ldrh	r2, [r2, #26]
    d8c8:	428a      	cmp	r2, r1
    d8ca:	d902      	bls.n	d8d2 <attcProcReadLongRsp+0x14>
    d8cc:	2300      	movs	r3, #0
    d8ce:	74c3      	strb	r3, [r0, #19]
    d8d0:	4770      	bx	lr
    d8d2:	8bc2      	ldrh	r2, [r0, #30]
    d8d4:	891b      	ldrh	r3, [r3, #8]
    d8d6:	4413      	add	r3, r2
    d8d8:	83c3      	strh	r3, [r0, #30]
    d8da:	4770      	bx	lr

0000d8dc <AttcFindByTypeValueReq>:
    d8dc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8e0:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    d8e4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    d8e8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    d8ec:	4680      	mov	r8, r0
    d8ee:	f106 000f 	add.w	r0, r6, #15
    d8f2:	b280      	uxth	r0, r0
    d8f4:	460f      	mov	r7, r1
    d8f6:	4693      	mov	fp, r2
    d8f8:	461d      	mov	r5, r3
    d8fa:	f7ff fb1f 	bl	cf3c <attMsgAlloc>
    d8fe:	4604      	mov	r4, r0
    d900:	b1c8      	cbz	r0, d936 <AttcFindByTypeValueReq+0x5a>
    d902:	1df3      	adds	r3, r6, #7
    d904:	8003      	strh	r3, [r0, #0]
    d906:	7345      	strb	r5, [r0, #13]
    d908:	2306      	movs	r3, #6
    d90a:	0a2d      	lsrs	r5, r5, #8
    d90c:	8047      	strh	r7, [r0, #2]
    d90e:	f8a0 b004 	strh.w	fp, [r0, #4]
    d912:	7203      	strb	r3, [r0, #8]
    d914:	7385      	strb	r5, [r0, #14]
    d916:	4632      	mov	r2, r6
    d918:	4651      	mov	r1, sl
    d91a:	300f      	adds	r0, #15
    d91c:	f7fe fc20 	bl	c160 <memcpy>
    d920:	4623      	mov	r3, r4
    d922:	2203      	movs	r2, #3
    d924:	4639      	mov	r1, r7
    d926:	4640      	mov	r0, r8
    d928:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d92c:	b001      	add	sp, #4
    d92e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d932:	f7ff becd 	b.w	d6d0 <attcSendMsg>
    d936:	b001      	add	sp, #4
    d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d93c <AttcReadByTypeReq>:
    d93c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d940:	b29d      	uxth	r5, r3
    d942:	4680      	mov	r8, r0
    d944:	f105 000d 	add.w	r0, r5, #13
    d948:	460e      	mov	r6, r1
    d94a:	4693      	mov	fp, r2
    d94c:	461f      	mov	r7, r3
    d94e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d952:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d956:	f7ff faf1 	bl	cf3c <attMsgAlloc>
    d95a:	4604      	mov	r4, r0
    d95c:	b1b0      	cbz	r0, d98c <AttcReadByTypeReq+0x50>
    d95e:	2308      	movs	r3, #8
    d960:	3505      	adds	r5, #5
    d962:	8005      	strh	r5, [r0, #0]
    d964:	8046      	strh	r6, [r0, #2]
    d966:	f8a0 b004 	strh.w	fp, [r0, #4]
    d96a:	7203      	strb	r3, [r0, #8]
    d96c:	463a      	mov	r2, r7
    d96e:	4651      	mov	r1, sl
    d970:	300d      	adds	r0, #13
    d972:	f7fe fbf5 	bl	c160 <memcpy>
    d976:	4623      	mov	r3, r4
    d978:	2204      	movs	r2, #4
    d97a:	4631      	mov	r1, r6
    d97c:	4640      	mov	r0, r8
    d97e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d982:	b001      	add	sp, #4
    d984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d988:	f7ff bea2 	b.w	d6d0 <attcSendMsg>
    d98c:	b001      	add	sp, #4
    d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d992 <AttcReadLongReq>:
    d992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d994:	4605      	mov	r5, r0
    d996:	200d      	movs	r0, #13
    d998:	460c      	mov	r4, r1
    d99a:	4617      	mov	r7, r2
    d99c:	461e      	mov	r6, r3
    d99e:	f7ff facd 	bl	cf3c <attMsgAlloc>
    d9a2:	b170      	cbz	r0, d9c2 <AttcReadLongReq+0x30>
    d9a4:	2305      	movs	r3, #5
    d9a6:	8003      	strh	r3, [r0, #0]
    d9a8:	230c      	movs	r3, #12
    d9aa:	7203      	strb	r3, [r0, #8]
    d9ac:	0a23      	lsrs	r3, r4, #8
    d9ae:	7283      	strb	r3, [r0, #10]
    d9b0:	8047      	strh	r7, [r0, #2]
    d9b2:	7244      	strb	r4, [r0, #9]
    d9b4:	4603      	mov	r3, r0
    d9b6:	9600      	str	r6, [sp, #0]
    d9b8:	2206      	movs	r2, #6
    d9ba:	4621      	mov	r1, r4
    d9bc:	4628      	mov	r0, r5
    d9be:	f7ff fe87 	bl	d6d0 <attcSendMsg>
    d9c2:	b003      	add	sp, #12
    d9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d9c6 <AttcReadMultipleReq>:
    d9c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d9c8:	004e      	lsls	r6, r1, #1
    d9ca:	4607      	mov	r7, r0
    d9cc:	f106 0009 	add.w	r0, r6, #9
    d9d0:	460d      	mov	r5, r1
    d9d2:	4614      	mov	r4, r2
    d9d4:	f7ff fab2 	bl	cf3c <attMsgAlloc>
    d9d8:	4603      	mov	r3, r0
    d9da:	b1a0      	cbz	r0, da06 <AttcReadMultipleReq+0x40>
    d9dc:	3601      	adds	r6, #1
    d9de:	4622      	mov	r2, r4
    d9e0:	8006      	strh	r6, [r0, #0]
    d9e2:	200e      	movs	r0, #14
    d9e4:	f832 1902 	ldrh.w	r1, [r2], #-2
    d9e8:	7218      	strb	r0, [r3, #8]
    d9ea:	f103 0009 	add.w	r0, r3, #9
    d9ee:	3d01      	subs	r5, #1
    d9f0:	b2ed      	uxtb	r5, r5
    d9f2:	2dff      	cmp	r5, #255	; 0xff
    d9f4:	f100 0002 	add.w	r0, r0, #2
    d9f8:	d107      	bne.n	da0a <AttcReadMultipleReq+0x44>
    d9fa:	2200      	movs	r2, #0
    d9fc:	9200      	str	r2, [sp, #0]
    d9fe:	4638      	mov	r0, r7
    da00:	2207      	movs	r2, #7
    da02:	f7ff fe65 	bl	d6d0 <attcSendMsg>
    da06:	b003      	add	sp, #12
    da08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da0a:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    da0e:	f800 4c02 	strb.w	r4, [r0, #-2]
    da12:	8814      	ldrh	r4, [r2, #0]
    da14:	0a24      	lsrs	r4, r4, #8
    da16:	f800 4c01 	strb.w	r4, [r0, #-1]
    da1a:	e7e8      	b.n	d9ee <AttcReadMultipleReq+0x28>

0000da1c <AttcReadByGroupTypeReq>:
    da1c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da20:	b29d      	uxth	r5, r3
    da22:	4680      	mov	r8, r0
    da24:	f105 000d 	add.w	r0, r5, #13
    da28:	460e      	mov	r6, r1
    da2a:	4693      	mov	fp, r2
    da2c:	461f      	mov	r7, r3
    da2e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    da32:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    da36:	f7ff fa81 	bl	cf3c <attMsgAlloc>
    da3a:	4604      	mov	r4, r0
    da3c:	b1b0      	cbz	r0, da6c <AttcReadByGroupTypeReq+0x50>
    da3e:	2310      	movs	r3, #16
    da40:	3505      	adds	r5, #5
    da42:	8005      	strh	r5, [r0, #0]
    da44:	8046      	strh	r6, [r0, #2]
    da46:	f8a0 b004 	strh.w	fp, [r0, #4]
    da4a:	7203      	strb	r3, [r0, #8]
    da4c:	463a      	mov	r2, r7
    da4e:	4651      	mov	r1, sl
    da50:	300d      	adds	r0, #13
    da52:	f7fe fb85 	bl	c160 <memcpy>
    da56:	4623      	mov	r3, r4
    da58:	2208      	movs	r2, #8
    da5a:	4631      	mov	r1, r6
    da5c:	4640      	mov	r0, r8
    da5e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    da62:	b001      	add	sp, #4
    da64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da68:	f7ff be32 	b.w	d6d0 <attcSendMsg>
    da6c:	b001      	add	sp, #4
    da6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000da72 <attcProcPrepWriteRsp>:
    da72:	7cc2      	ldrb	r2, [r0, #19]
    da74:	2a01      	cmp	r2, #1
    da76:	d102      	bne.n	da7e <attcProcPrepWriteRsp+0xc>
    da78:	8b82      	ldrh	r2, [r0, #28]
    da7a:	b902      	cbnz	r2, da7e <attcProcPrepWriteRsp+0xc>
    da7c:	74c2      	strb	r2, [r0, #19]
    da7e:	2200      	movs	r2, #0
    da80:	811a      	strh	r2, [r3, #8]
    da82:	4770      	bx	lr

0000da84 <AttcWriteCmd>:
    da84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    da88:	4607      	mov	r7, r0
    da8a:	f102 000b 	add.w	r0, r2, #11
    da8e:	b280      	uxth	r0, r0
    da90:	460d      	mov	r5, r1
    da92:	4616      	mov	r6, r2
    da94:	4698      	mov	r8, r3
    da96:	f7ff fa51 	bl	cf3c <attMsgAlloc>
    da9a:	4604      	mov	r4, r0
    da9c:	b198      	cbz	r0, dac6 <AttcWriteCmd+0x42>
    da9e:	1cf3      	adds	r3, r6, #3
    daa0:	8003      	strh	r3, [r0, #0]
    daa2:	2352      	movs	r3, #82	; 0x52
    daa4:	7203      	strb	r3, [r0, #8]
    daa6:	0a2b      	lsrs	r3, r5, #8
    daa8:	7283      	strb	r3, [r0, #10]
    daaa:	7245      	strb	r5, [r0, #9]
    daac:	4632      	mov	r2, r6
    daae:	4641      	mov	r1, r8
    dab0:	300b      	adds	r0, #11
    dab2:	f7fe fb55 	bl	c160 <memcpy>
    dab6:	2300      	movs	r3, #0
    dab8:	9300      	str	r3, [sp, #0]
    daba:	220a      	movs	r2, #10
    dabc:	4623      	mov	r3, r4
    dabe:	4629      	mov	r1, r5
    dac0:	4638      	mov	r0, r7
    dac2:	f7ff fe05 	bl	d6d0 <attcSendMsg>
    dac6:	b002      	add	sp, #8
    dac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dacc <AttcPrepareWriteReq>:
    dacc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dad0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    dad4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    dad8:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    dadc:	4607      	mov	r7, r0
    dade:	460d      	mov	r5, r1
    dae0:	4693      	mov	fp, r2
    dae2:	4698      	mov	r8, r3
    dae4:	b116      	cbz	r6, daec <AttcPrepareWriteReq+0x20>
    dae6:	f1ba 0f00 	cmp.w	sl, #0
    daea:	d11f      	bne.n	db2c <AttcPrepareWriteReq+0x60>
    daec:	f108 000d 	add.w	r0, r8, #13
    daf0:	b280      	uxth	r0, r0
    daf2:	f7ff fa23 	bl	cf3c <attMsgAlloc>
    daf6:	4604      	mov	r4, r0
    daf8:	b310      	cbz	r0, db40 <AttcPrepareWriteReq+0x74>
    dafa:	2316      	movs	r3, #22
    dafc:	7203      	strb	r3, [r0, #8]
    dafe:	0a2b      	lsrs	r3, r5, #8
    db00:	f8a0 8000 	strh.w	r8, [r0]
    db04:	f8a0 b002 	strh.w	fp, [r0, #2]
    db08:	7245      	strb	r5, [r0, #9]
    db0a:	7283      	strb	r3, [r0, #10]
    db0c:	b186      	cbz	r6, db30 <AttcPrepareWriteReq+0x64>
    db0e:	f1ba 0f00 	cmp.w	sl, #0
    db12:	d00d      	beq.n	db30 <AttcPrepareWriteReq+0x64>
    db14:	f8c0 9004 	str.w	r9, [r0, #4]
    db18:	4623      	mov	r3, r4
    db1a:	220b      	movs	r2, #11
    db1c:	4629      	mov	r1, r5
    db1e:	4638      	mov	r0, r7
    db20:	960a      	str	r6, [sp, #40]	; 0x28
    db22:	b001      	add	sp, #4
    db24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db28:	f7ff bdd2 	b.w	d6d0 <attcSendMsg>
    db2c:	200d      	movs	r0, #13
    db2e:	e7e0      	b.n	daf2 <AttcPrepareWriteReq+0x26>
    db30:	f104 000d 	add.w	r0, r4, #13
    db34:	4642      	mov	r2, r8
    db36:	4649      	mov	r1, r9
    db38:	f7fe fb12 	bl	c160 <memcpy>
    db3c:	6060      	str	r0, [r4, #4]
    db3e:	e7eb      	b.n	db18 <AttcPrepareWriteReq+0x4c>
    db40:	b001      	add	sp, #4
    db42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000db46 <AttcExecuteWriteReq>:
    db46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db48:	4604      	mov	r4, r0
    db4a:	200a      	movs	r0, #10
    db4c:	460d      	mov	r5, r1
    db4e:	f7ff f9f5 	bl	cf3c <attMsgAlloc>
    db52:	4603      	mov	r3, r0
    db54:	b150      	cbz	r0, db6c <AttcExecuteWriteReq+0x26>
    db56:	2202      	movs	r2, #2
    db58:	8002      	strh	r2, [r0, #0]
    db5a:	2100      	movs	r1, #0
    db5c:	2218      	movs	r2, #24
    db5e:	7202      	strb	r2, [r0, #8]
    db60:	7245      	strb	r5, [r0, #9]
    db62:	220c      	movs	r2, #12
    db64:	9100      	str	r1, [sp, #0]
    db66:	4620      	mov	r0, r4
    db68:	f7ff fdb2 	bl	d6d0 <attcSendMsg>
    db6c:	b003      	add	sp, #12
    db6e:	bd30      	pop	{r4, r5, pc}

0000db70 <attsCccMainCback>:
    db70:	b5f0      	push	{r4, r5, r6, r7, lr}
    db72:	4d2e      	ldr	r5, [pc, #184]	; (dc2c <attsCccMainCback+0xbc>)
    db74:	2905      	cmp	r1, #5
    db76:	b085      	sub	sp, #20
    db78:	6a2e      	ldr	r6, [r5, #32]
    db7a:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    db7e:	f04f 0100 	mov.w	r1, #0
    db82:	d041      	beq.n	dc08 <attsCccMainCback+0x98>
    db84:	b2cf      	uxtb	r7, r1
    db86:	4567      	cmp	r7, ip
    db88:	d340      	bcc.n	dc0c <attsCccMainCback+0x9c>
    db8a:	d048      	beq.n	dc1e <attsCccMainCback+0xae>
    db8c:	785c      	ldrb	r4, [r3, #1]
    db8e:	781b      	ldrb	r3, [r3, #0]
    db90:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    db94:	b29b      	uxth	r3, r3
    db96:	2b02      	cmp	r3, #2
    db98:	d844      	bhi.n	dc24 <attsCccMainCback+0xb4>
    db9a:	b113      	cbz	r3, dba2 <attsCccMainCback+0x32>
    db9c:	8874      	ldrh	r4, [r6, #2]
    db9e:	4223      	tst	r3, r4
    dba0:	d040      	beq.n	dc24 <attsCccMainCback+0xb4>
    dba2:	1e44      	subs	r4, r0, #1
    dba4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    dba8:	2c00      	cmp	r4, #0
    dbaa:	d03d      	beq.n	dc28 <attsCccMainCback+0xb8>
    dbac:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    dbb0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    dbb4:	42b3      	cmp	r3, r6
    dbb6:	d025      	beq.n	dc04 <attsCccMainCback+0x94>
    dbb8:	2110      	movs	r1, #16
    dbba:	f8ad 0004 	strh.w	r0, [sp, #4]
    dbbe:	f8ad 300a 	strh.w	r3, [sp, #10]
    dbc2:	f88d 1006 	strb.w	r1, [sp, #6]
    dbc6:	f88d 700c 	strb.w	r7, [sp, #12]
    dbca:	f8ad 2008 	strh.w	r2, [sp, #8]
    dbce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dbd0:	a801      	add	r0, sp, #4
    dbd2:	4798      	blx	r3
    dbd4:	e016      	b.n	dc04 <attsCccMainCback+0x94>
    dbd6:	1c4c      	adds	r4, r1, #1
    dbd8:	fb07 6e04 	mla	lr, r7, r4, r6
    dbdc:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    dbe0:	4596      	cmp	lr, r2
    dbe2:	d004      	beq.n	dbee <attsCccMainCback+0x7e>
    dbe4:	4621      	mov	r1, r4
    dbe6:	b2cc      	uxtb	r4, r1
    dbe8:	4564      	cmp	r4, ip
    dbea:	d3f4      	bcc.n	dbd6 <attsCccMainCback+0x66>
    dbec:	d017      	beq.n	dc1e <attsCccMainCback+0xae>
    dbee:	3801      	subs	r0, #1
    dbf0:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    dbf4:	b1c2      	cbz	r2, dc28 <attsCccMainCback+0xb8>
    dbf6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    dbfa:	7018      	strb	r0, [r3, #0]
    dbfc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    dc00:	0a12      	lsrs	r2, r2, #8
    dc02:	705a      	strb	r2, [r3, #1]
    dc04:	2000      	movs	r0, #0
    dc06:	e00b      	b.n	dc20 <attsCccMainCback+0xb0>
    dc08:	2706      	movs	r7, #6
    dc0a:	e7ec      	b.n	dbe6 <attsCccMainCback+0x76>
    dc0c:	f8b6 e000 	ldrh.w	lr, [r6]
    dc10:	4596      	cmp	lr, r2
    dc12:	f101 0401 	add.w	r4, r1, #1
    dc16:	d0b9      	beq.n	db8c <attsCccMainCback+0x1c>
    dc18:	3606      	adds	r6, #6
    dc1a:	4621      	mov	r1, r4
    dc1c:	e7b2      	b.n	db84 <attsCccMainCback+0x14>
    dc1e:	200a      	movs	r0, #10
    dc20:	b005      	add	sp, #20
    dc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc24:	2080      	movs	r0, #128	; 0x80
    dc26:	e7fb      	b.n	dc20 <attsCccMainCback+0xb0>
    dc28:	2011      	movs	r0, #17
    dc2a:	e7f9      	b.n	dc20 <attsCccMainCback+0xb0>
    dc2c:	10018f38 	.word	0x10018f38

0000dc30 <AttsCccRegister>:
    dc30:	4b04      	ldr	r3, [pc, #16]	; (dc44 <AttsCccRegister+0x14>)
    dc32:	e9c3 1208 	strd	r1, r2, [r3, #32]
    dc36:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    dc3a:	4b03      	ldr	r3, [pc, #12]	; (dc48 <AttsCccRegister+0x18>)
    dc3c:	4a03      	ldr	r2, [pc, #12]	; (dc4c <AttsCccRegister+0x1c>)
    dc3e:	615a      	str	r2, [r3, #20]
    dc40:	4770      	bx	lr
    dc42:	bf00      	nop
    dc44:	10018f38 	.word	0x10018f38
    dc48:	100190c4 	.word	0x100190c4
    dc4c:	0000db71 	.word	0x0000db71

0000dc50 <AttsCccInitTable>:
    dc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    dc54:	1e45      	subs	r5, r0, #1
    dc56:	4c1e      	ldr	r4, [pc, #120]	; (dcd0 <AttsCccInitTable+0x80>)
    dc58:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    dc5c:	4607      	mov	r7, r0
    dc5e:	460e      	mov	r6, r1
    dc60:	b933      	cbnz	r3, dc70 <AttsCccInitTable+0x20>
    dc62:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    dc66:	0040      	lsls	r0, r0, #1
    dc68:	f00c fe3c 	bl	1a8e4 <WsfBufAlloc>
    dc6c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    dc70:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    dc74:	f1b8 0f00 	cmp.w	r8, #0
    dc78:	d022      	beq.n	dcc0 <AttsCccInitTable+0x70>
    dc7a:	bb26      	cbnz	r6, dcc6 <AttsCccInitTable+0x76>
    dc7c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    dc80:	4631      	mov	r1, r6
    dc82:	0052      	lsls	r2, r2, #1
    dc84:	4640      	mov	r0, r8
    dc86:	f7fe fb69 	bl	c35c <memset>
    dc8a:	e019      	b.n	dcc0 <AttsCccInitTable+0x70>
    dc8c:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    dc90:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    dc94:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    dc98:	b162      	cbz	r2, dcb4 <AttsCccInitTable+0x64>
    dc9a:	f88d 300c 	strb.w	r3, [sp, #12]
    dc9e:	f88d 9006 	strb.w	r9, [sp, #6]
    dca2:	f8ad 7004 	strh.w	r7, [sp, #4]
    dca6:	f8ad a008 	strh.w	sl, [sp, #8]
    dcaa:	f8ad 200a 	strh.w	r2, [sp, #10]
    dcae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcb0:	a801      	add	r0, sp, #4
    dcb2:	4798      	blx	r3
    dcb4:	3501      	adds	r5, #1
    dcb6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    dcba:	b2eb      	uxtb	r3, r5
    dcbc:	429a      	cmp	r2, r3
    dcbe:	d8e5      	bhi.n	dc8c <AttsCccInitTable+0x3c>
    dcc0:	b004      	add	sp, #16
    dcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcc6:	2500      	movs	r5, #0
    dcc8:	f04f 0910 	mov.w	r9, #16
    dccc:	46aa      	mov	sl, r5
    dcce:	e7f2      	b.n	dcb6 <AttsCccInitTable+0x66>
    dcd0:	10018f38 	.word	0x10018f38

0000dcd4 <AttsCccClearTable>:
    dcd4:	b538      	push	{r3, r4, r5, lr}
    dcd6:	1e45      	subs	r5, r0, #1
    dcd8:	4c04      	ldr	r4, [pc, #16]	; (dcec <AttsCccClearTable+0x18>)
    dcda:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    dcde:	b120      	cbz	r0, dcea <AttsCccClearTable+0x16>
    dce0:	f00c fe40 	bl	1a964 <WsfBufFree>
    dce4:	2300      	movs	r3, #0
    dce6:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    dcea:	bd38      	pop	{r3, r4, r5, pc}
    dcec:	10018f38 	.word	0x10018f38

0000dcf0 <AttsCccGet>:
    dcf0:	3801      	subs	r0, #1
    dcf2:	4b03      	ldr	r3, [pc, #12]	; (dd00 <AttsCccGet+0x10>)
    dcf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dcf8:	b108      	cbz	r0, dcfe <AttsCccGet+0xe>
    dcfa:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    dcfe:	4770      	bx	lr
    dd00:	10018f38 	.word	0x10018f38

0000dd04 <AttsCccSet>:
    dd04:	3801      	subs	r0, #1
    dd06:	4b03      	ldr	r3, [pc, #12]	; (dd14 <AttsCccSet+0x10>)
    dd08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    dd0c:	b10b      	cbz	r3, dd12 <AttsCccSet+0xe>
    dd0e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    dd12:	4770      	bx	lr
    dd14:	10018f38 	.word	0x10018f38

0000dd18 <AttsCccEnabled>:
    dd18:	b538      	push	{r3, r4, r5, lr}
    dd1a:	460c      	mov	r4, r1
    dd1c:	4605      	mov	r5, r0
    dd1e:	f002 f9e3 	bl	100e8 <DmConnSecLevel>
    dd22:	4b08      	ldr	r3, [pc, #32]	; (dd44 <AttsCccEnabled+0x2c>)
    dd24:	6a1b      	ldr	r3, [r3, #32]
    dd26:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    dd2a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    dd2e:	791b      	ldrb	r3, [r3, #4]
    dd30:	4283      	cmp	r3, r0
    dd32:	d805      	bhi.n	dd40 <AttsCccEnabled+0x28>
    dd34:	4621      	mov	r1, r4
    dd36:	4628      	mov	r0, r5
    dd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dd3c:	f7ff bfd8 	b.w	dcf0 <AttsCccGet>
    dd40:	2000      	movs	r0, #0
    dd42:	bd38      	pop	{r3, r4, r5, pc}
    dd44:	10018f38 	.word	0x10018f38

0000dd48 <attsIndCcbByConnId>:
    dd48:	b510      	push	{r4, lr}
    dd4a:	4604      	mov	r4, r0
    dd4c:	f002 f988 	bl	10060 <DmConnInUse>
    dd50:	b120      	cbz	r0, dd5c <attsIndCcbByConnId+0x14>
    dd52:	4b03      	ldr	r3, [pc, #12]	; (dd60 <attsIndCcbByConnId+0x18>)
    dd54:	3c01      	subs	r4, #1
    dd56:	202c      	movs	r0, #44	; 0x2c
    dd58:	fb00 3004 	mla	r0, r0, r4, r3
    dd5c:	bd10      	pop	{r4, pc}
    dd5e:	bf00      	nop
    dd60:	10018f64 	.word	0x10018f64

0000dd64 <attsExecCallback>:
    dd64:	b507      	push	{r0, r1, r2, lr}
    dd66:	2300      	movs	r3, #0
    dd68:	9300      	str	r3, [sp, #0]
    dd6a:	4613      	mov	r3, r2
    dd6c:	460a      	mov	r2, r1
    dd6e:	210f      	movs	r1, #15
    dd70:	f7ff f8b6 	bl	cee0 <attExecCallback>
    dd74:	b003      	add	sp, #12
    dd76:	f85d fb04 	ldr.w	pc, [sp], #4

0000dd7a <attsIndNtfCallback>:
    dd7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd7e:	460c      	mov	r4, r1
    dd80:	8ac9      	ldrh	r1, [r1, #22]
    dd82:	4606      	mov	r6, r0
    dd84:	4617      	mov	r7, r2
    dd86:	b119      	cbz	r1, dd90 <attsIndNtfCallback+0x16>
    dd88:	f7ff ffec 	bl	dd64 <attsExecCallback>
    dd8c:	2300      	movs	r3, #0
    dd8e:	82e3      	strh	r3, [r4, #22]
    dd90:	f104 0518 	add.w	r5, r4, #24
    dd94:	f04f 0800 	mov.w	r8, #0
    dd98:	342c      	adds	r4, #44	; 0x2c
    dd9a:	f835 1b02 	ldrh.w	r1, [r5], #2
    dd9e:	b129      	cbz	r1, ddac <attsIndNtfCallback+0x32>
    dda0:	463a      	mov	r2, r7
    dda2:	4630      	mov	r0, r6
    dda4:	f7ff ffde 	bl	dd64 <attsExecCallback>
    dda8:	f825 8c02 	strh.w	r8, [r5, #-2]
    ddac:	42ac      	cmp	r4, r5
    ddae:	d1f4      	bne.n	dd9a <attsIndNtfCallback+0x20>
    ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ddb4 <attsIndCtrlCback>:
    ddb4:	b510      	push	{r4, lr}
    ddb6:	4604      	mov	r4, r0
    ddb8:	7800      	ldrb	r0, [r0, #0]
    ddba:	f7ff ffc5 	bl	dd48 <attsIndCcbByConnId>
    ddbe:	4601      	mov	r1, r0
    ddc0:	b120      	cbz	r0, ddcc <attsIndCtrlCback+0x18>
    ddc2:	7820      	ldrb	r0, [r4, #0]
    ddc4:	2200      	movs	r2, #0
    ddc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddca:	e7d6      	b.n	dd7a <attsIndNtfCallback>
    ddcc:	bd10      	pop	{r4, pc}

0000ddce <attsIndMsgCback>:
    ddce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddd0:	4605      	mov	r5, r0
    ddd2:	7800      	ldrb	r0, [r0, #0]
    ddd4:	f7ff ffb8 	bl	dd48 <attsIndCcbByConnId>
    ddd8:	78ab      	ldrb	r3, [r5, #2]
    ddda:	4604      	mov	r4, r0
    dddc:	b930      	cbnz	r0, ddec <attsIndMsgCback+0x1e>
    ddde:	2b21      	cmp	r3, #33	; 0x21
    dde0:	d13d      	bne.n	de5e <attsIndMsgCback+0x90>
    dde2:	6868      	ldr	r0, [r5, #4]
    dde4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dde8:	f00c be22 	b.w	1aa30 <WsfMsgFree>
    ddec:	2b21      	cmp	r3, #33	; 0x21
    ddee:	d13b      	bne.n	de68 <attsIndMsgCback+0x9a>
    ddf0:	686b      	ldr	r3, [r5, #4]
    ddf2:	7a1a      	ldrb	r2, [r3, #8]
    ddf4:	885e      	ldrh	r6, [r3, #2]
    ddf6:	2a1d      	cmp	r2, #29
    ddf8:	d113      	bne.n	de22 <attsIndMsgCback+0x54>
    ddfa:	8ac2      	ldrh	r2, [r0, #22]
    ddfc:	bb12      	cbnz	r2, de44 <attsIndMsgCback+0x76>
    ddfe:	6901      	ldr	r1, [r0, #16]
    de00:	881a      	ldrh	r2, [r3, #0]
    de02:	8b09      	ldrh	r1, [r1, #24]
    de04:	2004      	movs	r0, #4
    de06:	f003 f86b 	bl	10ee0 <L2cDataReq>
    de0a:	2322      	movs	r3, #34	; 0x22
    de0c:	7323      	strb	r3, [r4, #12]
    de0e:	4b27      	ldr	r3, [pc, #156]	; (deac <attsIndMsgCback+0xde>)
    de10:	82e6      	strh	r6, [r4, #22]
    de12:	681b      	ldr	r3, [r3, #0]
    de14:	82a6      	strh	r6, [r4, #20]
    de16:	7999      	ldrb	r1, [r3, #6]
    de18:	4620      	mov	r0, r4
    de1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    de1e:	f00c bfa9 	b.w	1ad74 <WsfTimerStartSec>
    de22:	f100 0118 	add.w	r1, r0, #24
    de26:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    de2a:	2200      	movs	r2, #0
    de2c:	460f      	mov	r7, r1
    de2e:	f831 0b02 	ldrh.w	r0, [r1], #2
    de32:	b118      	cbz	r0, de3c <attsIndMsgCback+0x6e>
    de34:	4286      	cmp	r6, r0
    de36:	d005      	beq.n	de44 <attsIndMsgCback+0x76>
    de38:	3201      	adds	r2, #1
    de3a:	b2d2      	uxtb	r2, r2
    de3c:	458c      	cmp	ip, r1
    de3e:	d1f6      	bne.n	de2e <attsIndMsgCback+0x60>
    de40:	2a09      	cmp	r2, #9
    de42:	d922      	bls.n	de8a <attsIndMsgCback+0xbc>
    de44:	2272      	movs	r2, #114	; 0x72
    de46:	4631      	mov	r1, r6
    de48:	7828      	ldrb	r0, [r5, #0]
    de4a:	f7ff ff8b 	bl	dd64 <attsExecCallback>
    de4e:	e7c8      	b.n	dde2 <attsIndMsgCback+0x14>
    de50:	2300      	movs	r3, #0
    de52:	f837 2b02 	ldrh.w	r2, [r7], #2
    de56:	b91a      	cbnz	r2, de60 <attsIndMsgCback+0x92>
    de58:	330c      	adds	r3, #12
    de5a:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    de5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de60:	3301      	adds	r3, #1
    de62:	2b0a      	cmp	r3, #10
    de64:	d1f5      	bne.n	de52 <attsIndMsgCback+0x84>
    de66:	e7fa      	b.n	de5e <attsIndMsgCback+0x90>
    de68:	2b22      	cmp	r3, #34	; 0x22
    de6a:	d1f8      	bne.n	de5e <attsIndMsgCback+0x90>
    de6c:	8a83      	ldrh	r3, [r0, #20]
    de6e:	2b00      	cmp	r3, #0
    de70:	d0f5      	beq.n	de5e <attsIndMsgCback+0x90>
    de72:	2600      	movs	r6, #0
    de74:	8286      	strh	r6, [r0, #20]
    de76:	2271      	movs	r2, #113	; 0x71
    de78:	8ac1      	ldrh	r1, [r0, #22]
    de7a:	7828      	ldrb	r0, [r5, #0]
    de7c:	f7ff ff72 	bl	dd64 <attsExecCallback>
    de80:	6923      	ldr	r3, [r4, #16]
    de82:	82e6      	strh	r6, [r4, #22]
    de84:	2201      	movs	r2, #1
    de86:	77da      	strb	r2, [r3, #31]
    de88:	e7e9      	b.n	de5e <attsIndMsgCback+0x90>
    de8a:	6921      	ldr	r1, [r4, #16]
    de8c:	881a      	ldrh	r2, [r3, #0]
    de8e:	8b09      	ldrh	r1, [r1, #24]
    de90:	882d      	ldrh	r5, [r5, #0]
    de92:	2004      	movs	r0, #4
    de94:	f003 f824 	bl	10ee0 <L2cDataReq>
    de98:	6923      	ldr	r3, [r4, #16]
    de9a:	7f9a      	ldrb	r2, [r3, #30]
    de9c:	2a00      	cmp	r2, #0
    de9e:	d1d7      	bne.n	de50 <attsIndMsgCback+0x82>
    dea0:	4631      	mov	r1, r6
    dea2:	b2e8      	uxtb	r0, r5
    dea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dea8:	e75c      	b.n	dd64 <attsExecCallback>
    deaa:	bf00      	nop
    deac:	10017f70 	.word	0x10017f70

0000deb0 <attsHandleValueIndNtf>:
    deb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    deb4:	4606      	mov	r6, r0
    deb6:	460c      	mov	r4, r1
    deb8:	4617      	mov	r7, r2
    deba:	4698      	mov	r8, r3
    debc:	f89d a020 	ldrb.w	sl, [sp, #32]
    dec0:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    dec4:	f012 fabe 	bl	20444 <WsfTaskLock>
    dec8:	4630      	mov	r0, r6
    deca:	f7ff ff3d 	bl	dd48 <attsIndCcbByConnId>
    dece:	b950      	cbnz	r0, dee6 <attsHandleValueIndNtf+0x36>
    ded0:	f012 fabe 	bl	20450 <WsfTaskUnlock>
    ded4:	f1b9 0f00 	cmp.w	r9, #0
    ded8:	d048      	beq.n	df6c <attsHandleValueIndNtf+0xbc>
    deda:	4651      	mov	r1, sl
    dedc:	4640      	mov	r0, r8
    dede:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dee2:	f7ff b893 	b.w	d00c <AttMsgFree>
    dee6:	6903      	ldr	r3, [r0, #16]
    dee8:	8b5d      	ldrh	r5, [r3, #26]
    deea:	f012 fab1 	bl	20450 <WsfTaskUnlock>
    deee:	2d00      	cmp	r5, #0
    def0:	d0f0      	beq.n	ded4 <attsHandleValueIndNtf+0x24>
    def2:	1cbb      	adds	r3, r7, #2
    def4:	42ab      	cmp	r3, r5
    def6:	da37      	bge.n	df68 <attsHandleValueIndNtf+0xb8>
    def8:	2008      	movs	r0, #8
    defa:	f00c fd82 	bl	1aa02 <WsfMsgAlloc>
    defe:	4605      	mov	r5, r0
    df00:	b360      	cbz	r0, df5c <attsHandleValueIndNtf+0xac>
    df02:	2321      	movs	r3, #33	; 0x21
    df04:	8006      	strh	r6, [r0, #0]
    df06:	7083      	strb	r3, [r0, #2]
    df08:	f1b9 0f00 	cmp.w	r9, #0
    df0c:	d01c      	beq.n	df48 <attsHandleValueIndNtf+0x98>
    df0e:	f1a8 030b 	sub.w	r3, r8, #11
    df12:	6043      	str	r3, [r0, #4]
    df14:	6868      	ldr	r0, [r5, #4]
    df16:	b1f0      	cbz	r0, df56 <attsHandleValueIndNtf+0xa6>
    df18:	1cfb      	adds	r3, r7, #3
    df1a:	8044      	strh	r4, [r0, #2]
    df1c:	7244      	strb	r4, [r0, #9]
    df1e:	0a24      	lsrs	r4, r4, #8
    df20:	8003      	strh	r3, [r0, #0]
    df22:	f880 a008 	strb.w	sl, [r0, #8]
    df26:	7284      	strb	r4, [r0, #10]
    df28:	f1b9 0f00 	cmp.w	r9, #0
    df2c:	d104      	bne.n	df38 <attsHandleValueIndNtf+0x88>
    df2e:	463a      	mov	r2, r7
    df30:	4641      	mov	r1, r8
    df32:	300b      	adds	r0, #11
    df34:	f7fe f914 	bl	c160 <memcpy>
    df38:	4b0d      	ldr	r3, [pc, #52]	; (df70 <attsHandleValueIndNtf+0xc0>)
    df3a:	4629      	mov	r1, r5
    df3c:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    df40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df44:	f00c bd81 	b.w	1aa4a <WsfMsgSend>
    df48:	f107 000b 	add.w	r0, r7, #11
    df4c:	b280      	uxth	r0, r0
    df4e:	f7fe fff5 	bl	cf3c <attMsgAlloc>
    df52:	6068      	str	r0, [r5, #4]
    df54:	e7de      	b.n	df14 <attsHandleValueIndNtf+0x64>
    df56:	4628      	mov	r0, r5
    df58:	f00c fd6a 	bl	1aa30 <WsfMsgFree>
    df5c:	2270      	movs	r2, #112	; 0x70
    df5e:	4621      	mov	r1, r4
    df60:	4630      	mov	r0, r6
    df62:	f7ff feff 	bl	dd64 <attsExecCallback>
    df66:	e7b5      	b.n	ded4 <attsHandleValueIndNtf+0x24>
    df68:	2277      	movs	r2, #119	; 0x77
    df6a:	e7f8      	b.n	df5e <attsHandleValueIndNtf+0xae>
    df6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df70:	10018c60 	.word	0x10018c60

0000df74 <attsIndConnCback>:
    df74:	788b      	ldrb	r3, [r1, #2]
    df76:	2b28      	cmp	r3, #40	; 0x28
    df78:	b570      	push	{r4, r5, r6, lr}
    df7a:	4606      	mov	r6, r0
    df7c:	d117      	bne.n	dfae <attsIndConnCback+0x3a>
    df7e:	78cc      	ldrb	r4, [r1, #3]
    df80:	b904      	cbnz	r4, df84 <attsIndConnCback+0x10>
    df82:	7a0c      	ldrb	r4, [r1, #8]
    df84:	7f35      	ldrb	r5, [r6, #28]
    df86:	490a      	ldr	r1, [pc, #40]	; (dfb0 <attsIndConnCback+0x3c>)
    df88:	232c      	movs	r3, #44	; 0x2c
    df8a:	3d01      	subs	r5, #1
    df8c:	fb03 1505 	mla	r5, r3, r5, r1
    df90:	3420      	adds	r4, #32
    df92:	8aab      	ldrh	r3, [r5, #20]
    df94:	b2e4      	uxtb	r4, r4
    df96:	b123      	cbz	r3, dfa2 <attsIndConnCback+0x2e>
    df98:	4628      	mov	r0, r5
    df9a:	f00c ff11 	bl	1adc0 <WsfTimerStop>
    df9e:	2300      	movs	r3, #0
    dfa0:	82ab      	strh	r3, [r5, #20]
    dfa2:	4622      	mov	r2, r4
    dfa4:	4629      	mov	r1, r5
    dfa6:	7f30      	ldrb	r0, [r6, #28]
    dfa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dfac:	e6e5      	b.n	dd7a <attsIndNtfCallback>
    dfae:	bd70      	pop	{r4, r5, r6, pc}
    dfb0:	10018f64 	.word	0x10018f64

0000dfb4 <attsProcValueCnf>:
    dfb4:	b570      	push	{r4, r5, r6, lr}
    dfb6:	4606      	mov	r6, r0
    dfb8:	7f00      	ldrb	r0, [r0, #28]
    dfba:	f7ff fec5 	bl	dd48 <attsIndCcbByConnId>
    dfbe:	4604      	mov	r4, r0
    dfc0:	b168      	cbz	r0, dfde <attsProcValueCnf+0x2a>
    dfc2:	8a83      	ldrh	r3, [r0, #20]
    dfc4:	b15b      	cbz	r3, dfde <attsProcValueCnf+0x2a>
    dfc6:	2300      	movs	r3, #0
    dfc8:	8283      	strh	r3, [r0, #20]
    dfca:	f00c fef9 	bl	1adc0 <WsfTimerStop>
    dfce:	7fb5      	ldrb	r5, [r6, #30]
    dfd0:	b92d      	cbnz	r5, dfde <attsProcValueCnf+0x2a>
    dfd2:	462a      	mov	r2, r5
    dfd4:	8ae1      	ldrh	r1, [r4, #22]
    dfd6:	7f30      	ldrb	r0, [r6, #28]
    dfd8:	f7ff fec4 	bl	dd64 <attsExecCallback>
    dfdc:	82e5      	strh	r5, [r4, #22]
    dfde:	bd70      	pop	{r4, r5, r6, pc}

0000dfe0 <AttsIndInit>:
    dfe0:	b510      	push	{r4, lr}
    dfe2:	4909      	ldr	r1, [pc, #36]	; (e008 <AttsIndInit+0x28>)
    dfe4:	4a09      	ldr	r2, [pc, #36]	; (e00c <AttsIndInit+0x2c>)
    dfe6:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    dfea:	2300      	movs	r3, #0
    dfec:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    dff0:	3301      	adds	r3, #1
    dff2:	2b08      	cmp	r3, #8
    dff4:	6114      	str	r4, [r2, #16]
    dff6:	7210      	strb	r0, [r2, #8]
    dff8:	8153      	strh	r3, [r2, #10]
    dffa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    dffe:	d1f5      	bne.n	dfec <AttsIndInit+0xc>
    e000:	4b03      	ldr	r3, [pc, #12]	; (e010 <AttsIndInit+0x30>)
    e002:	4a04      	ldr	r2, [pc, #16]	; (e014 <AttsIndInit+0x34>)
    e004:	609a      	str	r2, [r3, #8]
    e006:	bd10      	pop	{r4, pc}
    e008:	10018c60 	.word	0x10018c60
    e00c:	10018f64 	.word	0x10018f64
    e010:	100190c4 	.word	0x100190c4
    e014:	0003ba4c 	.word	0x0003ba4c

0000e018 <AttsHandleValueInd>:
    e018:	b513      	push	{r0, r1, r4, lr}
    e01a:	f04f 0c00 	mov.w	ip, #0
    e01e:	241d      	movs	r4, #29
    e020:	e9cd 4c00 	strd	r4, ip, [sp]
    e024:	f7ff ff44 	bl	deb0 <attsHandleValueIndNtf>
    e028:	b002      	add	sp, #8
    e02a:	bd10      	pop	{r4, pc}

0000e02c <AttsHandleValueNtf>:
    e02c:	b513      	push	{r0, r1, r4, lr}
    e02e:	f04f 0c00 	mov.w	ip, #0
    e032:	241b      	movs	r4, #27
    e034:	e9cd 4c00 	strd	r4, ip, [sp]
    e038:	f7ff ff3a 	bl	deb0 <attsHandleValueIndNtf>
    e03c:	b002      	add	sp, #8
    e03e:	bd10      	pop	{r4, pc}

0000e040 <AttsHandleValueIndZeroCpy>:
    e040:	b513      	push	{r0, r1, r4, lr}
    e042:	f04f 0c01 	mov.w	ip, #1
    e046:	241d      	movs	r4, #29
    e048:	e9cd 4c00 	strd	r4, ip, [sp]
    e04c:	f7ff ff30 	bl	deb0 <attsHandleValueIndNtf>
    e050:	b002      	add	sp, #8
    e052:	bd10      	pop	{r4, pc}

0000e054 <AttsHandleValueNtfZeroCpy>:
    e054:	b513      	push	{r0, r1, r4, lr}
    e056:	f04f 0c01 	mov.w	ip, #1
    e05a:	241b      	movs	r4, #27
    e05c:	e9cd 4c00 	strd	r4, ip, [sp]
    e060:	f7ff ff26 	bl	deb0 <attsHandleValueIndNtf>
    e064:	b002      	add	sp, #8
    e066:	bd10      	pop	{r4, pc}

0000e068 <attsL2cCtrlCback>:
    e068:	4b01      	ldr	r3, [pc, #4]	; (e070 <attsL2cCtrlCback+0x8>)
    e06a:	689b      	ldr	r3, [r3, #8]
    e06c:	685b      	ldr	r3, [r3, #4]
    e06e:	4718      	bx	r3
    e070:	100190c4 	.word	0x100190c4

0000e074 <attsMsgCback>:
    e074:	b410      	push	{r4}
    e076:	7883      	ldrb	r3, [r0, #2]
    e078:	2b20      	cmp	r3, #32
    e07a:	d106      	bne.n	e08a <attsMsgCback+0x16>
    e07c:	2200      	movs	r2, #0
    e07e:	2104      	movs	r1, #4
    e080:	7800      	ldrb	r0, [r0, #0]
    e082:	f85d 4b04 	ldr.w	r4, [sp], #4
    e086:	f002 b839 	b.w	100fc <DmConnSetIdle>
    e08a:	2b22      	cmp	r3, #34	; 0x22
    e08c:	4b03      	ldr	r3, [pc, #12]	; (e09c <attsMsgCback+0x28>)
    e08e:	f85d 4b04 	ldr.w	r4, [sp], #4
    e092:	bf96      	itet	ls
    e094:	689b      	ldrls	r3, [r3, #8]
    e096:	68db      	ldrhi	r3, [r3, #12]
    e098:	689b      	ldrls	r3, [r3, #8]
    e09a:	4718      	bx	r3
    e09c:	100190c4 	.word	0x100190c4

0000e0a0 <attsErrRsp>:
    e0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0a4:	4605      	mov	r5, r0
    e0a6:	200d      	movs	r0, #13
    e0a8:	460f      	mov	r7, r1
    e0aa:	4614      	mov	r4, r2
    e0ac:	461e      	mov	r6, r3
    e0ae:	f7fe ff45 	bl	cf3c <attMsgAlloc>
    e0b2:	b170      	cbz	r0, e0d2 <attsErrRsp+0x32>
    e0b4:	7284      	strb	r4, [r0, #10]
    e0b6:	2301      	movs	r3, #1
    e0b8:	0a24      	lsrs	r4, r4, #8
    e0ba:	7203      	strb	r3, [r0, #8]
    e0bc:	7247      	strb	r7, [r0, #9]
    e0be:	72c4      	strb	r4, [r0, #11]
    e0c0:	7306      	strb	r6, [r0, #12]
    e0c2:	4603      	mov	r3, r0
    e0c4:	4629      	mov	r1, r5
    e0c6:	2205      	movs	r2, #5
    e0c8:	2004      	movs	r0, #4
    e0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e0ce:	f002 bf07 	b.w	10ee0 <L2cDataReq>
    e0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e0d6 <attsDataCback>:
    e0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0da:	4680      	mov	r8, r0
    e0dc:	460e      	mov	r6, r1
    e0de:	4617      	mov	r7, r2
    e0e0:	f7fe feda 	bl	ce98 <attCcbByHandle>
    e0e4:	b368      	cbz	r0, e142 <attsDataCback+0x6c>
    e0e6:	7a39      	ldrb	r1, [r7, #8]
    e0e8:	2912      	cmp	r1, #18
    e0ea:	d903      	bls.n	e0f4 <attsDataCback+0x1e>
    e0ec:	f1a1 0316 	sub.w	r3, r1, #22
    e0f0:	2b08      	cmp	r3, #8
    e0f2:	d80e      	bhi.n	e112 <attsDataCback+0x3c>
    e0f4:	084b      	lsrs	r3, r1, #1
    e0f6:	4a14      	ldr	r2, [pc, #80]	; (e148 <attsDataCback+0x72>)
    e0f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    e0fc:	b195      	cbz	r5, e124 <attsDataCback+0x4e>
    e0fe:	4a13      	ldr	r2, [pc, #76]	; (e14c <attsDataCback+0x76>)
    e100:	5cd3      	ldrb	r3, [r2, r3]
    e102:	42b3      	cmp	r3, r6
    e104:	d81b      	bhi.n	e13e <attsDataCback+0x68>
    e106:	463a      	mov	r2, r7
    e108:	4631      	mov	r1, r6
    e10a:	462b      	mov	r3, r5
    e10c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e110:	4718      	bx	r3
    e112:	2952      	cmp	r1, #82	; 0x52
    e114:	d004      	beq.n	e120 <attsDataCback+0x4a>
    e116:	29d2      	cmp	r1, #210	; 0xd2
    e118:	bf0c      	ite	eq
    e11a:	2310      	moveq	r3, #16
    e11c:	2300      	movne	r3, #0
    e11e:	e7ea      	b.n	e0f6 <attsDataCback+0x20>
    e120:	230a      	movs	r3, #10
    e122:	e7e8      	b.n	e0f6 <attsDataCback+0x20>
    e124:	2306      	movs	r3, #6
    e126:	2902      	cmp	r1, #2
    e128:	d00b      	beq.n	e142 <attsDataCback+0x6c>
    e12a:	291e      	cmp	r1, #30
    e12c:	d009      	beq.n	e142 <attsDataCback+0x6c>
    e12e:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    e132:	d106      	bne.n	e142 <attsDataCback+0x6c>
    e134:	4640      	mov	r0, r8
    e136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e13a:	f7ff bfb1 	b.w	e0a0 <attsErrRsp>
    e13e:	2304      	movs	r3, #4
    e140:	e7f1      	b.n	e126 <attsDataCback+0x50>
    e142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e146:	bf00      	nop
    e148:	10002f40 	.word	0x10002f40
    e14c:	0003ba5c 	.word	0x0003ba5c

0000e150 <attsClearPrepWrites>:
    e150:	b510      	push	{r4, lr}
    e152:	4604      	mov	r4, r0
    e154:	4620      	mov	r0, r4
    e156:	f00c fcdf 	bl	1ab18 <WsfQueueDeq>
    e15a:	b900      	cbnz	r0, e15e <attsClearPrepWrites+0xe>
    e15c:	bd10      	pop	{r4, pc}
    e15e:	f00c fc01 	bl	1a964 <WsfBufFree>
    e162:	e7f7      	b.n	e154 <attsClearPrepWrites+0x4>

0000e164 <attsConnCback>:
    e164:	788b      	ldrb	r3, [r1, #2]
    e166:	2b28      	cmp	r3, #40	; 0x28
    e168:	b570      	push	{r4, r5, r6, lr}
    e16a:	4604      	mov	r4, r0
    e16c:	460d      	mov	r5, r1
    e16e:	d10a      	bne.n	e186 <attsConnCback+0x22>
    e170:	f7ff ffee 	bl	e150 <attsClearPrepWrites>
    e174:	7f20      	ldrb	r0, [r4, #28]
    e176:	f001 ffdb 	bl	10130 <DmConnCheckIdle>
    e17a:	0743      	lsls	r3, r0, #29
    e17c:	d503      	bpl.n	e186 <attsConnCback+0x22>
    e17e:	f104 0008 	add.w	r0, r4, #8
    e182:	f00c fe1d 	bl	1adc0 <WsfTimerStop>
    e186:	4b04      	ldr	r3, [pc, #16]	; (e198 <attsConnCback+0x34>)
    e188:	689b      	ldr	r3, [r3, #8]
    e18a:	4629      	mov	r1, r5
    e18c:	4620      	mov	r0, r4
    e18e:	68db      	ldr	r3, [r3, #12]
    e190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e194:	4718      	bx	r3
    e196:	bf00      	nop
    e198:	100190c4 	.word	0x100190c4

0000e19c <attsDiscBusy>:
    e19c:	b538      	push	{r3, r4, r5, lr}
    e19e:	4d0d      	ldr	r5, [pc, #52]	; (e1d4 <attsDiscBusy+0x38>)
    e1a0:	682b      	ldr	r3, [r5, #0]
    e1a2:	681b      	ldr	r3, [r3, #0]
    e1a4:	4604      	mov	r4, r0
    e1a6:	b1a3      	cbz	r3, e1d2 <attsDiscBusy+0x36>
    e1a8:	2104      	movs	r1, #4
    e1aa:	7f00      	ldrb	r0, [r0, #28]
    e1ac:	2201      	movs	r2, #1
    e1ae:	f001 ffa5 	bl	100fc <DmConnSetIdle>
    e1b2:	4b09      	ldr	r3, [pc, #36]	; (e1d8 <attsDiscBusy+0x3c>)
    e1b4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e1b8:	7423      	strb	r3, [r4, #16]
    e1ba:	2320      	movs	r3, #32
    e1bc:	7523      	strb	r3, [r4, #20]
    e1be:	7f23      	ldrb	r3, [r4, #28]
    e1c0:	8263      	strh	r3, [r4, #18]
    e1c2:	682b      	ldr	r3, [r5, #0]
    e1c4:	f104 0008 	add.w	r0, r4, #8
    e1c8:	6819      	ldr	r1, [r3, #0]
    e1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e1ce:	f00c bdd1 	b.w	1ad74 <WsfTimerStartSec>
    e1d2:	bd38      	pop	{r3, r4, r5, pc}
    e1d4:	10017f70 	.word	0x10017f70
    e1d8:	10018c60 	.word	0x10018c60

0000e1dc <AttsInit>:
    e1dc:	4b06      	ldr	r3, [pc, #24]	; (e1f8 <AttsInit+0x1c>)
    e1de:	2200      	movs	r2, #0
    e1e0:	e9c3 2200 	strd	r2, r2, [r3]
    e1e4:	4a05      	ldr	r2, [pc, #20]	; (e1fc <AttsInit+0x20>)
    e1e6:	609a      	str	r2, [r3, #8]
    e1e8:	4a05      	ldr	r2, [pc, #20]	; (e200 <AttsInit+0x24>)
    e1ea:	60da      	str	r2, [r3, #12]
    e1ec:	4b05      	ldr	r3, [pc, #20]	; (e204 <AttsInit+0x28>)
    e1ee:	4a06      	ldr	r2, [pc, #24]	; (e208 <AttsInit+0x2c>)
    e1f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    e1f4:	4770      	bx	lr
    e1f6:	bf00      	nop
    e1f8:	100190c4 	.word	0x100190c4
    e1fc:	0003b8b4 	.word	0x0003b8b4
    e200:	0000ce35 	.word	0x0000ce35
    e204:	10018c60 	.word	0x10018c60
    e208:	0003ba70 	.word	0x0003ba70

0000e20c <AttsAuthorRegister>:
    e20c:	4b01      	ldr	r3, [pc, #4]	; (e214 <AttsAuthorRegister+0x8>)
    e20e:	6118      	str	r0, [r3, #16]
    e210:	4770      	bx	lr
    e212:	bf00      	nop
    e214:	100190c4 	.word	0x100190c4

0000e218 <AttsAddGroup>:
    e218:	b510      	push	{r4, lr}
    e21a:	4604      	mov	r4, r0
    e21c:	f012 f912 	bl	20444 <WsfTaskLock>
    e220:	4b09      	ldr	r3, [pc, #36]	; (e248 <AttsAddGroup+0x30>)
    e222:	681b      	ldr	r3, [r3, #0]
    e224:	2200      	movs	r2, #0
    e226:	b11b      	cbz	r3, e230 <AttsAddGroup+0x18>
    e228:	8a20      	ldrh	r0, [r4, #16]
    e22a:	8a19      	ldrh	r1, [r3, #16]
    e22c:	4288      	cmp	r0, r1
    e22e:	d207      	bcs.n	e240 <AttsAddGroup+0x28>
    e230:	4621      	mov	r1, r4
    e232:	4805      	ldr	r0, [pc, #20]	; (e248 <AttsAddGroup+0x30>)
    e234:	f00c fca9 	bl	1ab8a <WsfQueueInsert>
    e238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e23c:	f012 b908 	b.w	20450 <WsfTaskUnlock>
    e240:	461a      	mov	r2, r3
    e242:	681b      	ldr	r3, [r3, #0]
    e244:	e7ef      	b.n	e226 <AttsAddGroup+0xe>
    e246:	bf00      	nop
    e248:	100190c4 	.word	0x100190c4

0000e24c <AttsRemoveGroup>:
    e24c:	b510      	push	{r4, lr}
    e24e:	4604      	mov	r4, r0
    e250:	f012 f8f8 	bl	20444 <WsfTaskLock>
    e254:	4b08      	ldr	r3, [pc, #32]	; (e278 <AttsRemoveGroup+0x2c>)
    e256:	6819      	ldr	r1, [r3, #0]
    e258:	2200      	movs	r2, #0
    e25a:	b919      	cbnz	r1, e264 <AttsRemoveGroup+0x18>
    e25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e260:	f012 b8f6 	b.w	20450 <WsfTaskUnlock>
    e264:	8a0b      	ldrh	r3, [r1, #16]
    e266:	42a3      	cmp	r3, r4
    e268:	d002      	beq.n	e270 <AttsRemoveGroup+0x24>
    e26a:	460a      	mov	r2, r1
    e26c:	6809      	ldr	r1, [r1, #0]
    e26e:	e7f4      	b.n	e25a <AttsRemoveGroup+0xe>
    e270:	4801      	ldr	r0, [pc, #4]	; (e278 <AttsRemoveGroup+0x2c>)
    e272:	f00c fcb5 	bl	1abe0 <WsfQueueRemove>
    e276:	e7f1      	b.n	e25c <AttsRemoveGroup+0x10>
    e278:	100190c4 	.word	0x100190c4

0000e27c <AttsSetAttr>:
    e27c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e27e:	4605      	mov	r5, r0
    e280:	460e      	mov	r6, r1
    e282:	4614      	mov	r4, r2
    e284:	f012 f8de 	bl	20444 <WsfTaskLock>
    e288:	4628      	mov	r0, r5
    e28a:	a901      	add	r1, sp, #4
    e28c:	f000 f862 	bl	e354 <attsFindByHandle>
    e290:	4605      	mov	r5, r0
    e292:	b198      	cbz	r0, e2bc <AttsSetAttr+0x40>
    e294:	8983      	ldrh	r3, [r0, #12]
    e296:	42b3      	cmp	r3, r6
    e298:	d312      	bcc.n	e2c0 <AttsSetAttr+0x44>
    e29a:	4621      	mov	r1, r4
    e29c:	4632      	mov	r2, r6
    e29e:	6840      	ldr	r0, [r0, #4]
    e2a0:	f7fd ff5e 	bl	c160 <memcpy>
    e2a4:	7bac      	ldrb	r4, [r5, #14]
    e2a6:	f014 0408 	ands.w	r4, r4, #8
    e2aa:	d002      	beq.n	e2b2 <AttsSetAttr+0x36>
    e2ac:	68ab      	ldr	r3, [r5, #8]
    e2ae:	2400      	movs	r4, #0
    e2b0:	801e      	strh	r6, [r3, #0]
    e2b2:	f012 f8cd 	bl	20450 <WsfTaskUnlock>
    e2b6:	4620      	mov	r0, r4
    e2b8:	b002      	add	sp, #8
    e2ba:	bd70      	pop	{r4, r5, r6, pc}
    e2bc:	240a      	movs	r4, #10
    e2be:	e7f8      	b.n	e2b2 <AttsSetAttr+0x36>
    e2c0:	240d      	movs	r4, #13
    e2c2:	e7f6      	b.n	e2b2 <AttsSetAttr+0x36>

0000e2c4 <AttsGetAttr>:
    e2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e2c6:	460d      	mov	r5, r1
    e2c8:	a901      	add	r1, sp, #4
    e2ca:	4614      	mov	r4, r2
    e2cc:	f000 f842 	bl	e354 <attsFindByHandle>
    e2d0:	b138      	cbz	r0, e2e2 <AttsGetAttr+0x1e>
    e2d2:	6883      	ldr	r3, [r0, #8]
    e2d4:	881b      	ldrh	r3, [r3, #0]
    e2d6:	802b      	strh	r3, [r5, #0]
    e2d8:	6843      	ldr	r3, [r0, #4]
    e2da:	6023      	str	r3, [r4, #0]
    e2dc:	2000      	movs	r0, #0
    e2de:	b003      	add	sp, #12
    e2e0:	bd30      	pop	{r4, r5, pc}
    e2e2:	200a      	movs	r0, #10
    e2e4:	e7fb      	b.n	e2de <AttsGetAttr+0x1a>

0000e2e6 <AttsErrorTest>:
    e2e6:	4b02      	ldr	r3, [pc, #8]	; (e2f0 <AttsErrorTest+0xa>)
    e2e8:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    e2ec:	4770      	bx	lr
    e2ee:	bf00      	nop
    e2f0:	10018c60 	.word	0x10018c60

0000e2f4 <attsUuidCmp>:
    e2f4:	b510      	push	{r4, lr}
    e2f6:	4604      	mov	r4, r0
    e2f8:	4613      	mov	r3, r2
    e2fa:	7ba2      	ldrb	r2, [r4, #14]
    e2fc:	6800      	ldr	r0, [r0, #0]
    e2fe:	07d2      	lsls	r2, r2, #31
    e300:	d409      	bmi.n	e316 <attsUuidCmp+0x22>
    e302:	2902      	cmp	r1, #2
    e304:	d10c      	bne.n	e320 <attsUuidCmp+0x2c>
    e306:	460a      	mov	r2, r1
    e308:	4619      	mov	r1, r3
    e30a:	f7fd fef9 	bl	c100 <memcmp>
    e30e:	fab0 f080 	clz	r0, r0
    e312:	0940      	lsrs	r0, r0, #5
    e314:	bd10      	pop	{r4, pc}
    e316:	2910      	cmp	r1, #16
    e318:	d0f5      	beq.n	e306 <attsUuidCmp+0x12>
    e31a:	4601      	mov	r1, r0
    e31c:	4618      	mov	r0, r3
    e31e:	e002      	b.n	e326 <attsUuidCmp+0x32>
    e320:	2910      	cmp	r1, #16
    e322:	d1fa      	bne.n	e31a <attsUuidCmp+0x26>
    e324:	4619      	mov	r1, r3
    e326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e32a:	f7fe bdc9 	b.w	cec0 <attUuidCmp16to128>

0000e32e <attsUuid16Cmp>:
    e32e:	2902      	cmp	r1, #2
    e330:	4603      	mov	r3, r0
    e332:	d10c      	bne.n	e34e <attsUuid16Cmp+0x20>
    e334:	7800      	ldrb	r0, [r0, #0]
    e336:	7811      	ldrb	r1, [r2, #0]
    e338:	4288      	cmp	r0, r1
    e33a:	d106      	bne.n	e34a <attsUuid16Cmp+0x1c>
    e33c:	7858      	ldrb	r0, [r3, #1]
    e33e:	7853      	ldrb	r3, [r2, #1]
    e340:	1ac3      	subs	r3, r0, r3
    e342:	4258      	negs	r0, r3
    e344:	4158      	adcs	r0, r3
    e346:	b2c0      	uxtb	r0, r0
    e348:	4770      	bx	lr
    e34a:	2000      	movs	r0, #0
    e34c:	e7fb      	b.n	e346 <attsUuid16Cmp+0x18>
    e34e:	4611      	mov	r1, r2
    e350:	f7fe bdb6 	b.w	cec0 <attUuidCmp16to128>

0000e354 <attsFindByHandle>:
    e354:	b510      	push	{r4, lr}
    e356:	4b08      	ldr	r3, [pc, #32]	; (e378 <attsFindByHandle+0x24>)
    e358:	681b      	ldr	r3, [r3, #0]
    e35a:	b90b      	cbnz	r3, e360 <attsFindByHandle+0xc>
    e35c:	4618      	mov	r0, r3
    e35e:	e00a      	b.n	e376 <attsFindByHandle+0x22>
    e360:	8a1a      	ldrh	r2, [r3, #16]
    e362:	4282      	cmp	r2, r0
    e364:	d8f8      	bhi.n	e358 <attsFindByHandle+0x4>
    e366:	8a5c      	ldrh	r4, [r3, #18]
    e368:	4284      	cmp	r4, r0
    e36a:	d3f5      	bcc.n	e358 <attsFindByHandle+0x4>
    e36c:	600b      	str	r3, [r1, #0]
    e36e:	685b      	ldr	r3, [r3, #4]
    e370:	1a80      	subs	r0, r0, r2
    e372:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    e376:	bd10      	pop	{r4, pc}
    e378:	100190c4 	.word	0x100190c4

0000e37c <attsFindInRange>:
    e37c:	b530      	push	{r4, r5, lr}
    e37e:	4b0a      	ldr	r3, [pc, #40]	; (e3a8 <attsFindInRange+0x2c>)
    e380:	681b      	ldr	r3, [r3, #0]
    e382:	b90b      	cbnz	r3, e388 <attsFindInRange+0xc>
    e384:	4618      	mov	r0, r3
    e386:	e00d      	b.n	e3a4 <attsFindInRange+0x28>
    e388:	8a1c      	ldrh	r4, [r3, #16]
    e38a:	4284      	cmp	r4, r0
    e38c:	d902      	bls.n	e394 <attsFindInRange+0x18>
    e38e:	428c      	cmp	r4, r1
    e390:	d8f6      	bhi.n	e380 <attsFindInRange+0x4>
    e392:	4620      	mov	r0, r4
    e394:	8a5d      	ldrh	r5, [r3, #18]
    e396:	4285      	cmp	r5, r0
    e398:	d3f2      	bcc.n	e380 <attsFindInRange+0x4>
    e39a:	685b      	ldr	r3, [r3, #4]
    e39c:	1b04      	subs	r4, r0, r4
    e39e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    e3a2:	6014      	str	r4, [r2, #0]
    e3a4:	bd30      	pop	{r4, r5, pc}
    e3a6:	bf00      	nop
    e3a8:	100190c4 	.word	0x100190c4

0000e3ac <attsPermissions>:
    e3ac:	420b      	tst	r3, r1
    e3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3b2:	4606      	mov	r6, r0
    e3b4:	460d      	mov	r5, r1
    e3b6:	4617      	mov	r7, r2
    e3b8:	461c      	mov	r4, r3
    e3ba:	d105      	bne.n	e3c8 <attsPermissions+0x1c>
    e3bc:	2901      	cmp	r1, #1
    e3be:	bf0c      	ite	eq
    e3c0:	2002      	moveq	r0, #2
    e3c2:	2003      	movne	r0, #3
    e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3c8:	2910      	cmp	r1, #16
    e3ca:	bf08      	it	eq
    e3cc:	091c      	lsreq	r4, r3, #4
    e3ce:	f014 0f0e 	tst.w	r4, #14
    e3d2:	d101      	bne.n	e3d8 <attsPermissions+0x2c>
    e3d4:	2000      	movs	r0, #0
    e3d6:	e7f5      	b.n	e3c4 <attsPermissions+0x18>
    e3d8:	f001 fe86 	bl	100e8 <DmConnSecLevel>
    e3dc:	0722      	lsls	r2, r4, #28
    e3de:	d500      	bpl.n	e3e2 <attsPermissions+0x36>
    e3e0:	b180      	cbz	r0, e404 <attsPermissions+0x58>
    e3e2:	f004 030a 	and.w	r3, r4, #10
    e3e6:	2b0a      	cmp	r3, #10
    e3e8:	d101      	bne.n	e3ee <attsPermissions+0x42>
    e3ea:	2801      	cmp	r0, #1
    e3ec:	d90a      	bls.n	e404 <attsPermissions+0x58>
    e3ee:	0763      	lsls	r3, r4, #29
    e3f0:	d5f0      	bpl.n	e3d4 <attsPermissions+0x28>
    e3f2:	4b06      	ldr	r3, [pc, #24]	; (e40c <attsPermissions+0x60>)
    e3f4:	691b      	ldr	r3, [r3, #16]
    e3f6:	b13b      	cbz	r3, e408 <attsPermissions+0x5c>
    e3f8:	463a      	mov	r2, r7
    e3fa:	4629      	mov	r1, r5
    e3fc:	4630      	mov	r0, r6
    e3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e402:	4718      	bx	r3
    e404:	2005      	movs	r0, #5
    e406:	e7dd      	b.n	e3c4 <attsPermissions+0x18>
    e408:	2008      	movs	r0, #8
    e40a:	e7db      	b.n	e3c4 <attsPermissions+0x18>
    e40c:	100190c4 	.word	0x100190c4

0000e410 <attsProcMtuReq>:
    e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e412:	7a93      	ldrb	r3, [r2, #10]
    e414:	7a54      	ldrb	r4, [r2, #9]
    e416:	4d17      	ldr	r5, [pc, #92]	; (e474 <attsProcMtuReq+0x64>)
    e418:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e41c:	b2a4      	uxth	r4, r4
    e41e:	682b      	ldr	r3, [r5, #0]
    e420:	2c17      	cmp	r4, #23
    e422:	bf38      	it	cc
    e424:	2417      	movcc	r4, #23
    e426:	889f      	ldrh	r7, [r3, #4]
    e428:	4606      	mov	r6, r0
    e42a:	f008 fdcd 	bl	16fc8 <HciGetMaxRxAclLen>
    e42e:	3804      	subs	r0, #4
    e430:	4287      	cmp	r7, r0
    e432:	da1a      	bge.n	e46a <attsProcMtuReq+0x5a>
    e434:	682b      	ldr	r3, [r5, #0]
    e436:	889d      	ldrh	r5, [r3, #4]
    e438:	42a5      	cmp	r5, r4
    e43a:	f04f 000b 	mov.w	r0, #11
    e43e:	bf28      	it	cs
    e440:	4625      	movcs	r5, r4
    e442:	f7fe fd7b 	bl	cf3c <attMsgAlloc>
    e446:	4603      	mov	r3, r0
    e448:	b140      	cbz	r0, e45c <attsProcMtuReq+0x4c>
    e44a:	0a29      	lsrs	r1, r5, #8
    e44c:	2203      	movs	r2, #3
    e44e:	7202      	strb	r2, [r0, #8]
    e450:	7245      	strb	r5, [r0, #9]
    e452:	7281      	strb	r1, [r0, #10]
    e454:	8b31      	ldrh	r1, [r6, #24]
    e456:	2004      	movs	r0, #4
    e458:	f002 fd42 	bl	10ee0 <L2cDataReq>
    e45c:	462a      	mov	r2, r5
    e45e:	4621      	mov	r1, r4
    e460:	4630      	mov	r0, r6
    e462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e466:	f7fe bd57 	b.w	cf18 <attSetMtu>
    e46a:	f008 fdad 	bl	16fc8 <HciGetMaxRxAclLen>
    e46e:	1f05      	subs	r5, r0, #4
    e470:	b2ad      	uxth	r5, r5
    e472:	e7e1      	b.n	e438 <attsProcMtuReq+0x28>
    e474:	10017f70 	.word	0x10017f70

0000e478 <attsProcFindInfoReq>:
    e478:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e47c:	7a93      	ldrb	r3, [r2, #10]
    e47e:	7a57      	ldrb	r7, [r2, #9]
    e480:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e484:	b2bf      	uxth	r7, r7
    e486:	4680      	mov	r8, r0
    e488:	2f00      	cmp	r7, #0
    e48a:	d076      	beq.n	e57a <attsProcFindInfoReq+0x102>
    e48c:	7b13      	ldrb	r3, [r2, #12]
    e48e:	f892 900b 	ldrb.w	r9, [r2, #11]
    e492:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e496:	fa1f f989 	uxth.w	r9, r9
    e49a:	454f      	cmp	r7, r9
    e49c:	d86d      	bhi.n	e57a <attsProcFindInfoReq+0x102>
    e49e:	8b40      	ldrh	r0, [r0, #26]
    e4a0:	3008      	adds	r0, #8
    e4a2:	b280      	uxth	r0, r0
    e4a4:	f7fe fd4a 	bl	cf3c <attMsgAlloc>
    e4a8:	4606      	mov	r6, r0
    e4aa:	2800      	cmp	r0, #0
    e4ac:	d067      	beq.n	e57e <attsProcFindInfoReq+0x106>
    e4ae:	2305      	movs	r3, #5
    e4b0:	7203      	strb	r3, [r0, #8]
    e4b2:	2301      	movs	r3, #1
    e4b4:	7243      	strb	r3, [r0, #9]
    e4b6:	f100 040e 	add.w	r4, r0, #14
    e4ba:	f64f 7aff 	movw	sl, #65535	; 0xffff
    e4be:	4638      	mov	r0, r7
    e4c0:	aa01      	add	r2, sp, #4
    e4c2:	4649      	mov	r1, r9
    e4c4:	1f25      	subs	r5, r4, #4
    e4c6:	f7ff ff59 	bl	e37c <attsFindInRange>
    e4ca:	b1d0      	cbz	r0, e502 <attsProcFindInfoReq+0x8a>
    e4cc:	9b01      	ldr	r3, [sp, #4]
    e4ce:	7b9b      	ldrb	r3, [r3, #14]
    e4d0:	07db      	lsls	r3, r3, #31
    e4d2:	d530      	bpl.n	e536 <attsProcFindInfoReq+0xbe>
    e4d4:	f106 030a 	add.w	r3, r6, #10
    e4d8:	429d      	cmp	r5, r3
    e4da:	d112      	bne.n	e502 <attsProcFindInfoReq+0x8a>
    e4dc:	7028      	strb	r0, [r5, #0]
    e4de:	2302      	movs	r3, #2
    e4e0:	0a00      	lsrs	r0, r0, #8
    e4e2:	f805 3c01 	strb.w	r3, [r5, #-1]
    e4e6:	7068      	strb	r0, [r5, #1]
    e4e8:	9b01      	ldr	r3, [sp, #4]
    e4ea:	681b      	ldr	r3, [r3, #0]
    e4ec:	f106 020c 	add.w	r2, r6, #12
    e4f0:	f103 0110 	add.w	r1, r3, #16
    e4f4:	f853 0b04 	ldr.w	r0, [r3], #4
    e4f8:	f842 0b04 	str.w	r0, [r2], #4
    e4fc:	428b      	cmp	r3, r1
    e4fe:	d1f9      	bne.n	e4f4 <attsProcFindInfoReq+0x7c>
    e500:	3512      	adds	r5, #18
    e502:	f106 030a 	add.w	r3, r6, #10
    e506:	429d      	cmp	r5, r3
    e508:	d13b      	bne.n	e582 <attsProcFindInfoReq+0x10a>
    e50a:	4630      	mov	r0, r6
    e50c:	f00c fa90 	bl	1aa30 <WsfMsgFree>
    e510:	240a      	movs	r4, #10
    e512:	4640      	mov	r0, r8
    e514:	f7ff fe42 	bl	e19c <attsDiscBusy>
    e518:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    e51c:	bb9c      	cbnz	r4, e586 <attsProcFindInfoReq+0x10e>
    e51e:	f106 0208 	add.w	r2, r6, #8
    e522:	1aaa      	subs	r2, r5, r2
    e524:	4601      	mov	r1, r0
    e526:	4633      	mov	r3, r6
    e528:	b292      	uxth	r2, r2
    e52a:	2004      	movs	r0, #4
    e52c:	f002 fcd8 	bl	10ee0 <L2cDataReq>
    e530:	b002      	add	sp, #8
    e532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e536:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    e53a:	3308      	adds	r3, #8
    e53c:	4433      	add	r3, r6
    e53e:	429c      	cmp	r4, r3
    e540:	4622      	mov	r2, r4
    e542:	d8de      	bhi.n	e502 <attsProcFindInfoReq+0x8a>
    e544:	0a03      	lsrs	r3, r0, #8
    e546:	f804 0c04 	strb.w	r0, [r4, #-4]
    e54a:	f804 3c03 	strb.w	r3, [r4, #-3]
    e54e:	9b01      	ldr	r3, [sp, #4]
    e550:	681b      	ldr	r3, [r3, #0]
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	f804 3c02 	strb.w	r3, [r4, #-2]
    e558:	9b01      	ldr	r3, [sp, #4]
    e55a:	681b      	ldr	r3, [r3, #0]
    e55c:	4550      	cmp	r0, sl
    e55e:	785b      	ldrb	r3, [r3, #1]
    e560:	f804 3c01 	strb.w	r3, [r4, #-1]
    e564:	d007      	beq.n	e576 <attsProcFindInfoReq+0xfe>
    e566:	3001      	adds	r0, #1
    e568:	b280      	uxth	r0, r0
    e56a:	4581      	cmp	r9, r0
    e56c:	f104 0404 	add.w	r4, r4, #4
    e570:	d2a6      	bcs.n	e4c0 <attsProcFindInfoReq+0x48>
    e572:	4615      	mov	r5, r2
    e574:	e7c5      	b.n	e502 <attsProcFindInfoReq+0x8a>
    e576:	4625      	mov	r5, r4
    e578:	e7c3      	b.n	e502 <attsProcFindInfoReq+0x8a>
    e57a:	2401      	movs	r4, #1
    e57c:	e7c9      	b.n	e512 <attsProcFindInfoReq+0x9a>
    e57e:	2411      	movs	r4, #17
    e580:	e7c7      	b.n	e512 <attsProcFindInfoReq+0x9a>
    e582:	2400      	movs	r4, #0
    e584:	e7c5      	b.n	e512 <attsProcFindInfoReq+0x9a>
    e586:	4623      	mov	r3, r4
    e588:	463a      	mov	r2, r7
    e58a:	2104      	movs	r1, #4
    e58c:	f7ff fd88 	bl	e0a0 <attsErrRsp>
    e590:	e7ce      	b.n	e530 <attsProcFindInfoReq+0xb8>

0000e592 <attsProcReadReq>:
    e592:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    e596:	7a93      	ldrb	r3, [r2, #10]
    e598:	7a54      	ldrb	r4, [r2, #9]
    e59a:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e59e:	b2a4      	uxth	r4, r4
    e5a0:	4606      	mov	r6, r0
    e5a2:	a903      	add	r1, sp, #12
    e5a4:	4620      	mov	r0, r4
    e5a6:	f7ff fed5 	bl	e354 <attsFindByHandle>
    e5aa:	4605      	mov	r5, r0
    e5ac:	2800      	cmp	r0, #0
    e5ae:	d047      	beq.n	e640 <attsProcReadReq+0xae>
    e5b0:	7bc3      	ldrb	r3, [r0, #15]
    e5b2:	7f30      	ldrb	r0, [r6, #28]
    e5b4:	4622      	mov	r2, r4
    e5b6:	2101      	movs	r1, #1
    e5b8:	f7ff fef8 	bl	e3ac <attsPermissions>
    e5bc:	4603      	mov	r3, r0
    e5be:	b960      	cbnz	r0, e5da <attsProcReadReq+0x48>
    e5c0:	7baa      	ldrb	r2, [r5, #14]
    e5c2:	0751      	lsls	r1, r2, #29
    e5c4:	d50f      	bpl.n	e5e6 <attsProcReadReq+0x54>
    e5c6:	9903      	ldr	r1, [sp, #12]
    e5c8:	688f      	ldr	r7, [r1, #8]
    e5ca:	b167      	cbz	r7, e5e6 <attsProcReadReq+0x54>
    e5cc:	7f30      	ldrb	r0, [r6, #28]
    e5ce:	9500      	str	r5, [sp, #0]
    e5d0:	220a      	movs	r2, #10
    e5d2:	4621      	mov	r1, r4
    e5d4:	47b8      	blx	r7
    e5d6:	4603      	mov	r3, r0
    e5d8:	b138      	cbz	r0, e5ea <attsProcReadReq+0x58>
    e5da:	4622      	mov	r2, r4
    e5dc:	210a      	movs	r1, #10
    e5de:	8b30      	ldrh	r0, [r6, #24]
    e5e0:	f7ff fd5e 	bl	e0a0 <attsErrRsp>
    e5e4:	e010      	b.n	e608 <attsProcReadReq+0x76>
    e5e6:	0693      	lsls	r3, r2, #26
    e5e8:	d411      	bmi.n	e60e <attsProcReadReq+0x7c>
    e5ea:	68ab      	ldr	r3, [r5, #8]
    e5ec:	8b74      	ldrh	r4, [r6, #26]
    e5ee:	881a      	ldrh	r2, [r3, #0]
    e5f0:	3c01      	subs	r4, #1
    e5f2:	4294      	cmp	r4, r2
    e5f4:	bfa8      	it	ge
    e5f6:	4614      	movge	r4, r2
    e5f8:	b2a7      	uxth	r7, r4
    e5fa:	f107 0009 	add.w	r0, r7, #9
    e5fe:	b280      	uxth	r0, r0
    e600:	f7fe fc9c 	bl	cf3c <attMsgAlloc>
    e604:	4680      	mov	r8, r0
    e606:	b960      	cbnz	r0, e622 <attsProcReadReq+0x90>
    e608:	b004      	add	sp, #16
    e60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e60e:	4b0d      	ldr	r3, [pc, #52]	; (e644 <attsProcReadReq+0xb2>)
    e610:	695f      	ldr	r7, [r3, #20]
    e612:	2f00      	cmp	r7, #0
    e614:	d0e9      	beq.n	e5ea <attsProcReadReq+0x58>
    e616:	686b      	ldr	r3, [r5, #4]
    e618:	7f30      	ldrb	r0, [r6, #28]
    e61a:	4622      	mov	r2, r4
    e61c:	2105      	movs	r1, #5
    e61e:	47b8      	blx	r7
    e620:	e7d9      	b.n	e5d6 <attsProcReadReq+0x44>
    e622:	230b      	movs	r3, #11
    e624:	7203      	strb	r3, [r0, #8]
    e626:	b2a2      	uxth	r2, r4
    e628:	6869      	ldr	r1, [r5, #4]
    e62a:	3009      	adds	r0, #9
    e62c:	f7fd fd98 	bl	c160 <memcpy>
    e630:	1c7a      	adds	r2, r7, #1
    e632:	4643      	mov	r3, r8
    e634:	b292      	uxth	r2, r2
    e636:	8b31      	ldrh	r1, [r6, #24]
    e638:	2004      	movs	r0, #4
    e63a:	f002 fc51 	bl	10ee0 <L2cDataReq>
    e63e:	e7e3      	b.n	e608 <attsProcReadReq+0x76>
    e640:	2301      	movs	r3, #1
    e642:	e7ca      	b.n	e5da <attsProcReadReq+0x48>
    e644:	100190c4 	.word	0x100190c4

0000e648 <attsFindUuidInRange>:
    e648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e64c:	4699      	mov	r9, r3
    e64e:	4b1a      	ldr	r3, [pc, #104]	; (e6b8 <attsFindUuidInRange+0x70>)
    e650:	9e08      	ldr	r6, [sp, #32]
    e652:	681d      	ldr	r5, [r3, #0]
    e654:	460f      	mov	r7, r1
    e656:	4690      	mov	r8, r2
    e658:	4604      	mov	r4, r0
    e65a:	f64f 7aff 	movw	sl, #65535	; 0xffff
    e65e:	b90d      	cbnz	r5, e664 <attsFindUuidInRange+0x1c>
    e660:	462c      	mov	r4, r5
    e662:	e025      	b.n	e6b0 <attsFindUuidInRange+0x68>
    e664:	8a2a      	ldrh	r2, [r5, #16]
    e666:	42a2      	cmp	r2, r4
    e668:	d90c      	bls.n	e684 <attsFindUuidInRange+0x3c>
    e66a:	42ba      	cmp	r2, r7
    e66c:	d909      	bls.n	e682 <attsFindUuidInRange+0x3a>
    e66e:	682d      	ldr	r5, [r5, #0]
    e670:	e7f5      	b.n	e65e <attsFindUuidInRange+0x16>
    e672:	4554      	cmp	r4, sl
    e674:	d0fb      	beq.n	e66e <attsFindUuidInRange+0x26>
    e676:	6833      	ldr	r3, [r6, #0]
    e678:	3401      	adds	r4, #1
    e67a:	3310      	adds	r3, #16
    e67c:	b2a4      	uxth	r4, r4
    e67e:	6033      	str	r3, [r6, #0]
    e680:	e008      	b.n	e694 <attsFindUuidInRange+0x4c>
    e682:	4614      	mov	r4, r2
    e684:	8a6b      	ldrh	r3, [r5, #18]
    e686:	42a3      	cmp	r3, r4
    e688:	d3f1      	bcc.n	e66e <attsFindUuidInRange+0x26>
    e68a:	686b      	ldr	r3, [r5, #4]
    e68c:	1aa2      	subs	r2, r4, r2
    e68e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e692:	6032      	str	r2, [r6, #0]
    e694:	8a6b      	ldrh	r3, [r5, #18]
    e696:	42a3      	cmp	r3, r4
    e698:	d3e9      	bcc.n	e66e <attsFindUuidInRange+0x26>
    e69a:	42bc      	cmp	r4, r7
    e69c:	d8e7      	bhi.n	e66e <attsFindUuidInRange+0x26>
    e69e:	464a      	mov	r2, r9
    e6a0:	4641      	mov	r1, r8
    e6a2:	6830      	ldr	r0, [r6, #0]
    e6a4:	f7ff fe26 	bl	e2f4 <attsUuidCmp>
    e6a8:	2800      	cmp	r0, #0
    e6aa:	d0e2      	beq.n	e672 <attsFindUuidInRange+0x2a>
    e6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e6ae:	601d      	str	r5, [r3, #0]
    e6b0:	4620      	mov	r0, r4
    e6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6b6:	bf00      	nop
    e6b8:	100190c4 	.word	0x100190c4

0000e6bc <attsFindServiceGroupEnd>:
    e6bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e6be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e6c2:	f8ad 3000 	strh.w	r3, [sp]
    e6c6:	4b1d      	ldr	r3, [pc, #116]	; (e73c <attsFindServiceGroupEnd+0x80>)
    e6c8:	881b      	ldrh	r3, [r3, #0]
    e6ca:	f8ad 3004 	strh.w	r3, [sp, #4]
    e6ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e6d2:	4298      	cmp	r0, r3
    e6d4:	d104      	bne.n	e6e0 <attsFindServiceGroupEnd+0x24>
    e6d6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    e6da:	4628      	mov	r0, r5
    e6dc:	b003      	add	sp, #12
    e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6e0:	4b17      	ldr	r3, [pc, #92]	; (e740 <attsFindServiceGroupEnd+0x84>)
    e6e2:	1c44      	adds	r4, r0, #1
    e6e4:	681f      	ldr	r7, [r3, #0]
    e6e6:	b2a4      	uxth	r4, r4
    e6e8:	4605      	mov	r5, r0
    e6ea:	2f00      	cmp	r7, #0
    e6ec:	d0f3      	beq.n	e6d6 <attsFindServiceGroupEnd+0x1a>
    e6ee:	8a3e      	ldrh	r6, [r7, #16]
    e6f0:	8a7b      	ldrh	r3, [r7, #18]
    e6f2:	42b4      	cmp	r4, r6
    e6f4:	bf38      	it	cc
    e6f6:	4634      	movcc	r4, r6
    e6f8:	42a3      	cmp	r3, r4
    e6fa:	d306      	bcc.n	e70a <attsFindServiceGroupEnd+0x4e>
    e6fc:	1ba3      	subs	r3, r4, r6
    e6fe:	687e      	ldr	r6, [r7, #4]
    e700:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    e704:	8a7b      	ldrh	r3, [r7, #18]
    e706:	42a3      	cmp	r3, r4
    e708:	d201      	bcs.n	e70e <attsFindServiceGroupEnd+0x52>
    e70a:	683f      	ldr	r7, [r7, #0]
    e70c:	e7ed      	b.n	e6ea <attsFindServiceGroupEnd+0x2e>
    e70e:	466a      	mov	r2, sp
    e710:	2102      	movs	r1, #2
    e712:	4630      	mov	r0, r6
    e714:	f7ff fdee 	bl	e2f4 <attsUuidCmp>
    e718:	2800      	cmp	r0, #0
    e71a:	d1de      	bne.n	e6da <attsFindServiceGroupEnd+0x1e>
    e71c:	aa01      	add	r2, sp, #4
    e71e:	2102      	movs	r1, #2
    e720:	4630      	mov	r0, r6
    e722:	f7ff fde7 	bl	e2f4 <attsUuidCmp>
    e726:	2800      	cmp	r0, #0
    e728:	d1d7      	bne.n	e6da <attsFindServiceGroupEnd+0x1e>
    e72a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e72e:	429c      	cmp	r4, r3
    e730:	d0d1      	beq.n	e6d6 <attsFindServiceGroupEnd+0x1a>
    e732:	1c63      	adds	r3, r4, #1
    e734:	4625      	mov	r5, r4
    e736:	3610      	adds	r6, #16
    e738:	b29c      	uxth	r4, r3
    e73a:	e7e3      	b.n	e704 <attsFindServiceGroupEnd+0x48>
    e73c:	0003ba80 	.word	0x0003ba80
    e740:	100190c4 	.word	0x100190c4

0000e744 <attsProcReadBlobReq>:
    e744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e748:	7a93      	ldrb	r3, [r2, #10]
    e74a:	7a54      	ldrb	r4, [r2, #9]
    e74c:	7ad5      	ldrb	r5, [r2, #11]
    e74e:	f892 800c 	ldrb.w	r8, [r2, #12]
    e752:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e756:	b085      	sub	sp, #20
    e758:	b2a4      	uxth	r4, r4
    e75a:	4607      	mov	r7, r0
    e75c:	a903      	add	r1, sp, #12
    e75e:	4620      	mov	r0, r4
    e760:	f7ff fdf8 	bl	e354 <attsFindByHandle>
    e764:	4606      	mov	r6, r0
    e766:	2800      	cmp	r0, #0
    e768:	d057      	beq.n	e81a <attsProcReadBlobReq+0xd6>
    e76a:	7bc3      	ldrb	r3, [r0, #15]
    e76c:	7f38      	ldrb	r0, [r7, #28]
    e76e:	4622      	mov	r2, r4
    e770:	2101      	movs	r1, #1
    e772:	f7ff fe1b 	bl	e3ac <attsPermissions>
    e776:	b9b0      	cbnz	r0, e7a6 <attsProcReadBlobReq+0x62>
    e778:	68b3      	ldr	r3, [r6, #8]
    e77a:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    e77e:	881b      	ldrh	r3, [r3, #0]
    e780:	b2ad      	uxth	r5, r5
    e782:	42ab      	cmp	r3, r5
    e784:	d34b      	bcc.n	e81e <attsProcReadBlobReq+0xda>
    e786:	7bb3      	ldrb	r3, [r6, #14]
    e788:	075a      	lsls	r2, r3, #29
    e78a:	d513      	bpl.n	e7b4 <attsProcReadBlobReq+0x70>
    e78c:	9a03      	ldr	r2, [sp, #12]
    e78e:	f8d2 8008 	ldr.w	r8, [r2, #8]
    e792:	f1b8 0f00 	cmp.w	r8, #0
    e796:	d00d      	beq.n	e7b4 <attsProcReadBlobReq+0x70>
    e798:	7f38      	ldrb	r0, [r7, #28]
    e79a:	9600      	str	r6, [sp, #0]
    e79c:	462b      	mov	r3, r5
    e79e:	220c      	movs	r2, #12
    e7a0:	4621      	mov	r1, r4
    e7a2:	47c0      	blx	r8
    e7a4:	b140      	cbz	r0, e7b8 <attsProcReadBlobReq+0x74>
    e7a6:	4603      	mov	r3, r0
    e7a8:	4622      	mov	r2, r4
    e7aa:	210c      	movs	r1, #12
    e7ac:	8b38      	ldrh	r0, [r7, #24]
    e7ae:	f7ff fc77 	bl	e0a0 <attsErrRsp>
    e7b2:	e012      	b.n	e7da <attsProcReadBlobReq+0x96>
    e7b4:	069b      	lsls	r3, r3, #26
    e7b6:	d413      	bmi.n	e7e0 <attsProcReadBlobReq+0x9c>
    e7b8:	68b3      	ldr	r3, [r6, #8]
    e7ba:	8b7a      	ldrh	r2, [r7, #26]
    e7bc:	881c      	ldrh	r4, [r3, #0]
    e7be:	3a01      	subs	r2, #1
    e7c0:	1b64      	subs	r4, r4, r5
    e7c2:	4294      	cmp	r4, r2
    e7c4:	bfa8      	it	ge
    e7c6:	4614      	movge	r4, r2
    e7c8:	fa1f f884 	uxth.w	r8, r4
    e7cc:	f108 0009 	add.w	r0, r8, #9
    e7d0:	b280      	uxth	r0, r0
    e7d2:	f7fe fbb3 	bl	cf3c <attMsgAlloc>
    e7d6:	4681      	mov	r9, r0
    e7d8:	b970      	cbnz	r0, e7f8 <attsProcReadBlobReq+0xb4>
    e7da:	b005      	add	sp, #20
    e7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e7e0:	4b10      	ldr	r3, [pc, #64]	; (e824 <attsProcReadBlobReq+0xe0>)
    e7e2:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e7e6:	f1b8 0f00 	cmp.w	r8, #0
    e7ea:	d0e5      	beq.n	e7b8 <attsProcReadBlobReq+0x74>
    e7ec:	6873      	ldr	r3, [r6, #4]
    e7ee:	7f38      	ldrb	r0, [r7, #28]
    e7f0:	4622      	mov	r2, r4
    e7f2:	2105      	movs	r1, #5
    e7f4:	47c0      	blx	r8
    e7f6:	e7d5      	b.n	e7a4 <attsProcReadBlobReq+0x60>
    e7f8:	230d      	movs	r3, #13
    e7fa:	7203      	strb	r3, [r0, #8]
    e7fc:	6871      	ldr	r1, [r6, #4]
    e7fe:	b2a2      	uxth	r2, r4
    e800:	4429      	add	r1, r5
    e802:	3009      	adds	r0, #9
    e804:	f7fd fcac 	bl	c160 <memcpy>
    e808:	f108 0201 	add.w	r2, r8, #1
    e80c:	464b      	mov	r3, r9
    e80e:	b292      	uxth	r2, r2
    e810:	8b39      	ldrh	r1, [r7, #24]
    e812:	2004      	movs	r0, #4
    e814:	f002 fb64 	bl	10ee0 <L2cDataReq>
    e818:	e7df      	b.n	e7da <attsProcReadBlobReq+0x96>
    e81a:	2001      	movs	r0, #1
    e81c:	e7c3      	b.n	e7a6 <attsProcReadBlobReq+0x62>
    e81e:	2007      	movs	r0, #7
    e820:	e7c1      	b.n	e7a6 <attsProcReadBlobReq+0x62>
    e822:	bf00      	nop
    e824:	100190c4 	.word	0x100190c4

0000e828 <attsProcFindTypeReq>:
    e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e82c:	7a93      	ldrb	r3, [r2, #10]
    e82e:	7a55      	ldrb	r5, [r2, #9]
    e830:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e834:	b2ad      	uxth	r5, r5
    e836:	b087      	sub	sp, #28
    e838:	4682      	mov	sl, r0
    e83a:	4689      	mov	r9, r1
    e83c:	4616      	mov	r6, r2
    e83e:	2d00      	cmp	r5, #0
    e840:	d075      	beq.n	e92e <attsProcFindTypeReq+0x106>
    e842:	7b13      	ldrb	r3, [r2, #12]
    e844:	f892 800b 	ldrb.w	r8, [r2, #11]
    e848:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    e84c:	fa1f f888 	uxth.w	r8, r8
    e850:	4545      	cmp	r5, r8
    e852:	d86c      	bhi.n	e92e <attsProcFindTypeReq+0x106>
    e854:	8b40      	ldrh	r0, [r0, #26]
    e856:	3008      	adds	r0, #8
    e858:	b280      	uxth	r0, r0
    e85a:	f7fe fb6f 	bl	cf3c <attMsgAlloc>
    e85e:	4607      	mov	r7, r0
    e860:	2800      	cmp	r0, #0
    e862:	d066      	beq.n	e932 <attsProcFindTypeReq+0x10a>
    e864:	2307      	movs	r3, #7
    e866:	f100 0409 	add.w	r4, r0, #9
    e86a:	7203      	strb	r3, [r0, #8]
    e86c:	f1a9 0907 	sub.w	r9, r9, #7
    e870:	f106 030d 	add.w	r3, r6, #13
    e874:	fa1f f989 	uxth.w	r9, r9
    e878:	4628      	mov	r0, r5
    e87a:	9403      	str	r4, [sp, #12]
    e87c:	9302      	str	r3, [sp, #8]
    e87e:	ab05      	add	r3, sp, #20
    e880:	9301      	str	r3, [sp, #4]
    e882:	ab04      	add	r3, sp, #16
    e884:	9300      	str	r3, [sp, #0]
    e886:	2202      	movs	r2, #2
    e888:	9b02      	ldr	r3, [sp, #8]
    e88a:	4641      	mov	r1, r8
    e88c:	f7ff fedc 	bl	e648 <attsFindUuidInRange>
    e890:	4683      	mov	fp, r0
    e892:	b9c8      	cbnz	r0, e8c8 <attsProcFindTypeReq+0xa0>
    e894:	9b03      	ldr	r3, [sp, #12]
    e896:	429c      	cmp	r4, r3
    e898:	d14d      	bne.n	e936 <attsProcFindTypeReq+0x10e>
    e89a:	4638      	mov	r0, r7
    e89c:	f00c f8c8 	bl	1aa30 <WsfMsgFree>
    e8a0:	260a      	movs	r6, #10
    e8a2:	4650      	mov	r0, sl
    e8a4:	f7ff fc7a 	bl	e19c <attsDiscBusy>
    e8a8:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    e8ac:	2e00      	cmp	r6, #0
    e8ae:	d144      	bne.n	e93a <attsProcFindTypeReq+0x112>
    e8b0:	f107 0208 	add.w	r2, r7, #8
    e8b4:	1aa2      	subs	r2, r4, r2
    e8b6:	4601      	mov	r1, r0
    e8b8:	463b      	mov	r3, r7
    e8ba:	b292      	uxth	r2, r2
    e8bc:	2004      	movs	r0, #4
    e8be:	f002 fb0f 	bl	10ee0 <L2cDataReq>
    e8c2:	b007      	add	sp, #28
    e8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8c8:	9904      	ldr	r1, [sp, #16]
    e8ca:	7bca      	ldrb	r2, [r1, #15]
    e8cc:	07d3      	lsls	r3, r2, #31
    e8ce:	d526      	bpl.n	e91e <attsProcFindTypeReq+0xf6>
    e8d0:	f1b9 0f00 	cmp.w	r9, #0
    e8d4:	d00a      	beq.n	e8ec <attsProcFindTypeReq+0xc4>
    e8d6:	688a      	ldr	r2, [r1, #8]
    e8d8:	8812      	ldrh	r2, [r2, #0]
    e8da:	454a      	cmp	r2, r9
    e8dc:	d11f      	bne.n	e91e <attsProcFindTypeReq+0xf6>
    e8de:	464a      	mov	r2, r9
    e8e0:	6849      	ldr	r1, [r1, #4]
    e8e2:	f106 000f 	add.w	r0, r6, #15
    e8e6:	f7fd fc0b 	bl	c100 <memcmp>
    e8ea:	b9c0      	cbnz	r0, e91e <attsProcFindTypeReq+0xf6>
    e8ec:	7b72      	ldrb	r2, [r6, #13]
    e8ee:	b9e2      	cbnz	r2, e92a <attsProcFindTypeReq+0x102>
    e8f0:	7bb2      	ldrb	r2, [r6, #14]
    e8f2:	2a28      	cmp	r2, #40	; 0x28
    e8f4:	4658      	mov	r0, fp
    e8f6:	d101      	bne.n	e8fc <attsProcFindTypeReq+0xd4>
    e8f8:	f7ff fee0 	bl	e6bc <attsFindServiceGroupEnd>
    e8fc:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    e900:	3208      	adds	r2, #8
    e902:	1d21      	adds	r1, r4, #4
    e904:	443a      	add	r2, r7
    e906:	4291      	cmp	r1, r2
    e908:	d8c4      	bhi.n	e894 <attsProcFindTypeReq+0x6c>
    e90a:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e90e:	7063      	strb	r3, [r4, #1]
    e910:	0a03      	lsrs	r3, r0, #8
    e912:	f884 b000 	strb.w	fp, [r4]
    e916:	70a0      	strb	r0, [r4, #2]
    e918:	70e3      	strb	r3, [r4, #3]
    e91a:	4683      	mov	fp, r0
    e91c:	460c      	mov	r4, r1
    e91e:	45c3      	cmp	fp, r8
    e920:	d2b8      	bcs.n	e894 <attsProcFindTypeReq+0x6c>
    e922:	f10b 0001 	add.w	r0, fp, #1
    e926:	b280      	uxth	r0, r0
    e928:	e7a9      	b.n	e87e <attsProcFindTypeReq+0x56>
    e92a:	4658      	mov	r0, fp
    e92c:	e7e6      	b.n	e8fc <attsProcFindTypeReq+0xd4>
    e92e:	2601      	movs	r6, #1
    e930:	e7b7      	b.n	e8a2 <attsProcFindTypeReq+0x7a>
    e932:	2611      	movs	r6, #17
    e934:	e7b5      	b.n	e8a2 <attsProcFindTypeReq+0x7a>
    e936:	2600      	movs	r6, #0
    e938:	e7b3      	b.n	e8a2 <attsProcFindTypeReq+0x7a>
    e93a:	4633      	mov	r3, r6
    e93c:	462a      	mov	r2, r5
    e93e:	2106      	movs	r1, #6
    e940:	f7ff fbae 	bl	e0a0 <attsErrRsp>
    e944:	e7bd      	b.n	e8c2 <attsProcFindTypeReq+0x9a>

0000e946 <attsProcReadTypeReq>:
    e946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e94a:	3905      	subs	r1, #5
    e94c:	4606      	mov	r6, r0
    e94e:	7a54      	ldrb	r4, [r2, #9]
    e950:	7a90      	ldrb	r0, [r2, #10]
    e952:	fa5f fa81 	uxtb.w	sl, r1
    e956:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e95a:	f1ba 0f02 	cmp.w	sl, #2
    e95e:	b089      	sub	sp, #36	; 0x24
    e960:	b2a4      	uxth	r4, r4
    e962:	d003      	beq.n	e96c <attsProcReadTypeReq+0x26>
    e964:	f1ba 0f10 	cmp.w	sl, #16
    e968:	f040 80d4 	bne.w	eb14 <attsProcReadTypeReq+0x1ce>
    e96c:	2c00      	cmp	r4, #0
    e96e:	f000 80d3 	beq.w	eb18 <attsProcReadTypeReq+0x1d2>
    e972:	7b13      	ldrb	r3, [r2, #12]
    e974:	f892 900b 	ldrb.w	r9, [r2, #11]
    e978:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e97c:	fa1f f989 	uxth.w	r9, r9
    e980:	454c      	cmp	r4, r9
    e982:	f200 80c9 	bhi.w	eb18 <attsProcReadTypeReq+0x1d2>
    e986:	f102 030d 	add.w	r3, r2, #13
    e98a:	9304      	str	r3, [sp, #16]
    e98c:	ab07      	add	r3, sp, #28
    e98e:	9301      	str	r3, [sp, #4]
    e990:	ab06      	add	r3, sp, #24
    e992:	9300      	str	r3, [sp, #0]
    e994:	4620      	mov	r0, r4
    e996:	9b04      	ldr	r3, [sp, #16]
    e998:	4652      	mov	r2, sl
    e99a:	4649      	mov	r1, r9
    e99c:	f7ff fe54 	bl	e648 <attsFindUuidInRange>
    e9a0:	4604      	mov	r4, r0
    e9a2:	2800      	cmp	r0, #0
    e9a4:	f000 80ba 	beq.w	eb1c <attsProcReadTypeReq+0x1d6>
    e9a8:	9b06      	ldr	r3, [sp, #24]
    e9aa:	4602      	mov	r2, r0
    e9ac:	7bdb      	ldrb	r3, [r3, #15]
    e9ae:	7f30      	ldrb	r0, [r6, #28]
    e9b0:	2101      	movs	r1, #1
    e9b2:	f7ff fcfb 	bl	e3ac <attsPermissions>
    e9b6:	4603      	mov	r3, r0
    e9b8:	b9c0      	cbnz	r0, e9ec <attsProcReadTypeReq+0xa6>
    e9ba:	9a06      	ldr	r2, [sp, #24]
    e9bc:	7b91      	ldrb	r1, [r2, #14]
    e9be:	074d      	lsls	r5, r1, #29
    e9c0:	d50a      	bpl.n	e9d8 <attsProcReadTypeReq+0x92>
    e9c2:	9807      	ldr	r0, [sp, #28]
    e9c4:	6885      	ldr	r5, [r0, #8]
    e9c6:	b13d      	cbz	r5, e9d8 <attsProcReadTypeReq+0x92>
    e9c8:	9200      	str	r2, [sp, #0]
    e9ca:	7f30      	ldrb	r0, [r6, #28]
    e9cc:	2208      	movs	r2, #8
    e9ce:	4621      	mov	r1, r4
    e9d0:	47a8      	blx	r5
    e9d2:	4603      	mov	r3, r0
    e9d4:	b950      	cbnz	r0, e9ec <attsProcReadTypeReq+0xa6>
    e9d6:	e001      	b.n	e9dc <attsProcReadTypeReq+0x96>
    e9d8:	0688      	lsls	r0, r1, #26
    e9da:	d40d      	bmi.n	e9f8 <attsProcReadTypeReq+0xb2>
    e9dc:	8b70      	ldrh	r0, [r6, #26]
    e9de:	3008      	adds	r0, #8
    e9e0:	b280      	uxth	r0, r0
    e9e2:	f7fe faab 	bl	cf3c <attMsgAlloc>
    e9e6:	4680      	mov	r8, r0
    e9e8:	b980      	cbnz	r0, ea0c <attsProcReadTypeReq+0xc6>
    e9ea:	2311      	movs	r3, #17
    e9ec:	4622      	mov	r2, r4
    e9ee:	2108      	movs	r1, #8
    e9f0:	8b30      	ldrh	r0, [r6, #24]
    e9f2:	f7ff fb55 	bl	e0a0 <attsErrRsp>
    e9f6:	e057      	b.n	eaa8 <attsProcReadTypeReq+0x162>
    e9f8:	4b49      	ldr	r3, [pc, #292]	; (eb20 <attsProcReadTypeReq+0x1da>)
    e9fa:	695d      	ldr	r5, [r3, #20]
    e9fc:	2d00      	cmp	r5, #0
    e9fe:	d0ed      	beq.n	e9dc <attsProcReadTypeReq+0x96>
    ea00:	6853      	ldr	r3, [r2, #4]
    ea02:	7f30      	ldrb	r0, [r6, #28]
    ea04:	4622      	mov	r2, r4
    ea06:	2105      	movs	r1, #5
    ea08:	47a8      	blx	r5
    ea0a:	e7e2      	b.n	e9d2 <attsProcReadTypeReq+0x8c>
    ea0c:	2309      	movs	r3, #9
    ea0e:	7203      	strb	r3, [r0, #8]
    ea10:	9b06      	ldr	r3, [sp, #24]
    ea12:	8b77      	ldrh	r7, [r6, #26]
    ea14:	689a      	ldr	r2, [r3, #8]
    ea16:	8812      	ldrh	r2, [r2, #0]
    ea18:	7284      	strb	r4, [r0, #10]
    ea1a:	3f04      	subs	r7, #4
    ea1c:	4297      	cmp	r7, r2
    ea1e:	bf28      	it	cs
    ea20:	4617      	movcs	r7, r2
    ea22:	b2ff      	uxtb	r7, r7
    ea24:	1cba      	adds	r2, r7, #2
    ea26:	9205      	str	r2, [sp, #20]
    ea28:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ea2c:	7242      	strb	r2, [r0, #9]
    ea2e:	0a22      	lsrs	r2, r4, #8
    ea30:	72c2      	strb	r2, [r0, #11]
    ea32:	f100 050c 	add.w	r5, r0, #12
    ea36:	6859      	ldr	r1, [r3, #4]
    ea38:	4628      	mov	r0, r5
    ea3a:	463a      	mov	r2, r7
    ea3c:	f7fd fb90 	bl	c160 <memcpy>
    ea40:	3401      	adds	r4, #1
    ea42:	1cbb      	adds	r3, r7, #2
    ea44:	b2a0      	uxth	r0, r4
    ea46:	441d      	add	r5, r3
    ea48:	1eab      	subs	r3, r5, #2
    ea4a:	9303      	str	r3, [sp, #12]
    ea4c:	ab07      	add	r3, sp, #28
    ea4e:	9301      	str	r3, [sp, #4]
    ea50:	ab06      	add	r3, sp, #24
    ea52:	9300      	str	r3, [sp, #0]
    ea54:	4652      	mov	r2, sl
    ea56:	9b04      	ldr	r3, [sp, #16]
    ea58:	4649      	mov	r1, r9
    ea5a:	f7ff fdf5 	bl	e648 <attsFindUuidInRange>
    ea5e:	4604      	mov	r4, r0
    ea60:	b1c0      	cbz	r0, ea94 <attsProcReadTypeReq+0x14e>
    ea62:	9b06      	ldr	r3, [sp, #24]
    ea64:	7b9a      	ldrb	r2, [r3, #14]
    ea66:	0751      	lsls	r1, r2, #29
    ea68:	d50d      	bpl.n	ea86 <attsProcReadTypeReq+0x140>
    ea6a:	9907      	ldr	r1, [sp, #28]
    ea6c:	f8d1 b008 	ldr.w	fp, [r1, #8]
    ea70:	f1bb 0f00 	cmp.w	fp, #0
    ea74:	d007      	beq.n	ea86 <attsProcReadTypeReq+0x140>
    ea76:	9300      	str	r3, [sp, #0]
    ea78:	7f30      	ldrb	r0, [r6, #28]
    ea7a:	2300      	movs	r3, #0
    ea7c:	2208      	movs	r2, #8
    ea7e:	4621      	mov	r1, r4
    ea80:	47d8      	blx	fp
    ea82:	b110      	cbz	r0, ea8a <attsProcReadTypeReq+0x144>
    ea84:	e006      	b.n	ea94 <attsProcReadTypeReq+0x14e>
    ea86:	0692      	lsls	r2, r2, #26
    ea88:	d411      	bmi.n	eaae <attsProcReadTypeReq+0x168>
    ea8a:	9b06      	ldr	r3, [sp, #24]
    ea8c:	689a      	ldr	r2, [r3, #8]
    ea8e:	8812      	ldrh	r2, [r2, #0]
    ea90:	42ba      	cmp	r2, r7
    ea92:	d018      	beq.n	eac6 <attsProcReadTypeReq+0x180>
    ea94:	9b03      	ldr	r3, [sp, #12]
    ea96:	8b31      	ldrh	r1, [r6, #24]
    ea98:	f108 0208 	add.w	r2, r8, #8
    ea9c:	1a9a      	subs	r2, r3, r2
    ea9e:	b292      	uxth	r2, r2
    eaa0:	4643      	mov	r3, r8
    eaa2:	2004      	movs	r0, #4
    eaa4:	f002 fa1c 	bl	10ee0 <L2cDataReq>
    eaa8:	b009      	add	sp, #36	; 0x24
    eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaae:	4a1c      	ldr	r2, [pc, #112]	; (eb20 <attsProcReadTypeReq+0x1da>)
    eab0:	f8d2 b014 	ldr.w	fp, [r2, #20]
    eab4:	f1bb 0f00 	cmp.w	fp, #0
    eab8:	d0e7      	beq.n	ea8a <attsProcReadTypeReq+0x144>
    eaba:	685b      	ldr	r3, [r3, #4]
    eabc:	7f30      	ldrb	r0, [r6, #28]
    eabe:	4622      	mov	r2, r4
    eac0:	2105      	movs	r1, #5
    eac2:	47d8      	blx	fp
    eac4:	e7dd      	b.n	ea82 <attsProcReadTypeReq+0x13c>
    eac6:	7bdb      	ldrb	r3, [r3, #15]
    eac8:	7f30      	ldrb	r0, [r6, #28]
    eaca:	4622      	mov	r2, r4
    eacc:	2101      	movs	r1, #1
    eace:	f7ff fc6d 	bl	e3ac <attsPermissions>
    ead2:	2800      	cmp	r0, #0
    ead4:	d1de      	bne.n	ea94 <attsProcReadTypeReq+0x14e>
    ead6:	8b73      	ldrh	r3, [r6, #26]
    ead8:	3308      	adds	r3, #8
    eada:	eb07 0b05 	add.w	fp, r7, r5
    eade:	4443      	add	r3, r8
    eae0:	459b      	cmp	fp, r3
    eae2:	d8d7      	bhi.n	ea94 <attsProcReadTypeReq+0x14e>
    eae4:	0a23      	lsrs	r3, r4, #8
    eae6:	f805 4c02 	strb.w	r4, [r5, #-2]
    eaea:	f805 3c01 	strb.w	r3, [r5, #-1]
    eaee:	9b06      	ldr	r3, [sp, #24]
    eaf0:	463a      	mov	r2, r7
    eaf2:	6859      	ldr	r1, [r3, #4]
    eaf4:	4628      	mov	r0, r5
    eaf6:	f7fd fb33 	bl	c160 <memcpy>
    eafa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    eafe:	429c      	cmp	r4, r3
    eb00:	d005      	beq.n	eb0e <attsProcReadTypeReq+0x1c8>
    eb02:	3401      	adds	r4, #1
    eb04:	b2a0      	uxth	r0, r4
    eb06:	9b05      	ldr	r3, [sp, #20]
    eb08:	4581      	cmp	r9, r0
    eb0a:	441d      	add	r5, r3
    eb0c:	d29c      	bcs.n	ea48 <attsProcReadTypeReq+0x102>
    eb0e:	f8cd b00c 	str.w	fp, [sp, #12]
    eb12:	e7bf      	b.n	ea94 <attsProcReadTypeReq+0x14e>
    eb14:	2304      	movs	r3, #4
    eb16:	e769      	b.n	e9ec <attsProcReadTypeReq+0xa6>
    eb18:	2301      	movs	r3, #1
    eb1a:	e767      	b.n	e9ec <attsProcReadTypeReq+0xa6>
    eb1c:	230a      	movs	r3, #10
    eb1e:	e765      	b.n	e9ec <attsProcReadTypeReq+0xa6>
    eb20:	100190c4 	.word	0x100190c4

0000eb24 <attsProcReadMultReq>:
    eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb28:	4607      	mov	r7, r0
    eb2a:	8b40      	ldrh	r0, [r0, #26]
    eb2c:	3008      	adds	r0, #8
    eb2e:	b087      	sub	sp, #28
    eb30:	b280      	uxth	r0, r0
    eb32:	460c      	mov	r4, r1
    eb34:	4693      	mov	fp, r2
    eb36:	f7fe fa01 	bl	cf3c <attMsgAlloc>
    eb3a:	4605      	mov	r5, r0
    eb3c:	2800      	cmp	r0, #0
    eb3e:	d060      	beq.n	ec02 <attsProcReadMultReq+0xde>
    eb40:	230f      	movs	r3, #15
    eb42:	3408      	adds	r4, #8
    eb44:	f10b 0909 	add.w	r9, fp, #9
    eb48:	f100 0609 	add.w	r6, r0, #9
    eb4c:	7203      	strb	r3, [r0, #8]
    eb4e:	44a3      	add	fp, r4
    eb50:	45d9      	cmp	r9, fp
    eb52:	d309      	bcc.n	eb68 <attsProcReadMultReq+0x44>
    eb54:	f105 0208 	add.w	r2, r5, #8
    eb58:	1ab2      	subs	r2, r6, r2
    eb5a:	462b      	mov	r3, r5
    eb5c:	b292      	uxth	r2, r2
    eb5e:	8b39      	ldrh	r1, [r7, #24]
    eb60:	2004      	movs	r0, #4
    eb62:	f002 f9bd 	bl	10ee0 <L2cDataReq>
    eb66:	e053      	b.n	ec10 <attsProcReadMultReq+0xec>
    eb68:	f899 3001 	ldrb.w	r3, [r9, #1]
    eb6c:	f819 4b02 	ldrb.w	r4, [r9], #2
    eb70:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    eb74:	b2a4      	uxth	r4, r4
    eb76:	a905      	add	r1, sp, #20
    eb78:	4620      	mov	r0, r4
    eb7a:	f7ff fbeb 	bl	e354 <attsFindByHandle>
    eb7e:	4680      	mov	r8, r0
    eb80:	2800      	cmp	r0, #0
    eb82:	d048      	beq.n	ec16 <attsProcReadMultReq+0xf2>
    eb84:	7bc3      	ldrb	r3, [r0, #15]
    eb86:	7f38      	ldrb	r0, [r7, #28]
    eb88:	4622      	mov	r2, r4
    eb8a:	2101      	movs	r1, #1
    eb8c:	f7ff fc0e 	bl	e3ac <attsPermissions>
    eb90:	4603      	mov	r3, r0
    eb92:	2800      	cmp	r0, #0
    eb94:	d140      	bne.n	ec18 <attsProcReadMultReq+0xf4>
    eb96:	f898 200e 	ldrb.w	r2, [r8, #14]
    eb9a:	0751      	lsls	r1, r2, #29
    eb9c:	d522      	bpl.n	ebe4 <attsProcReadMultReq+0xc0>
    eb9e:	9905      	ldr	r1, [sp, #20]
    eba0:	f8d1 a008 	ldr.w	sl, [r1, #8]
    eba4:	f1ba 0f00 	cmp.w	sl, #0
    eba8:	d01c      	beq.n	ebe4 <attsProcReadMultReq+0xc0>
    ebaa:	7f38      	ldrb	r0, [r7, #28]
    ebac:	f8cd 8000 	str.w	r8, [sp]
    ebb0:	220e      	movs	r2, #14
    ebb2:	4621      	mov	r1, r4
    ebb4:	47d0      	blx	sl
    ebb6:	4603      	mov	r3, r0
    ebb8:	bb70      	cbnz	r0, ec18 <attsProcReadMultReq+0xf4>
    ebba:	8b7a      	ldrh	r2, [r7, #26]
    ebbc:	3208      	adds	r2, #8
    ebbe:	442a      	add	r2, r5
    ebc0:	42b2      	cmp	r2, r6
    ebc2:	d9c5      	bls.n	eb50 <attsProcReadMultReq+0x2c>
    ebc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    ebc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    ebcc:	881c      	ldrh	r4, [r3, #0]
    ebce:	1b92      	subs	r2, r2, r6
    ebd0:	b292      	uxth	r2, r2
    ebd2:	4294      	cmp	r4, r2
    ebd4:	bf28      	it	cs
    ebd6:	4614      	movcs	r4, r2
    ebd8:	4630      	mov	r0, r6
    ebda:	4622      	mov	r2, r4
    ebdc:	f7fd fac0 	bl	c160 <memcpy>
    ebe0:	4426      	add	r6, r4
    ebe2:	e7b5      	b.n	eb50 <attsProcReadMultReq+0x2c>
    ebe4:	0693      	lsls	r3, r2, #26
    ebe6:	d5e8      	bpl.n	ebba <attsProcReadMultReq+0x96>
    ebe8:	4b0e      	ldr	r3, [pc, #56]	; (ec24 <attsProcReadMultReq+0x100>)
    ebea:	f8d3 a014 	ldr.w	sl, [r3, #20]
    ebee:	f1ba 0f00 	cmp.w	sl, #0
    ebf2:	d0e2      	beq.n	ebba <attsProcReadMultReq+0x96>
    ebf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    ebf8:	7f38      	ldrb	r0, [r7, #28]
    ebfa:	4622      	mov	r2, r4
    ebfc:	2105      	movs	r1, #5
    ebfe:	47d0      	blx	sl
    ec00:	e7d9      	b.n	ebb6 <attsProcReadMultReq+0x92>
    ec02:	2311      	movs	r3, #17
    ec04:	4604      	mov	r4, r0
    ec06:	4622      	mov	r2, r4
    ec08:	210e      	movs	r1, #14
    ec0a:	8b38      	ldrh	r0, [r7, #24]
    ec0c:	f7ff fa48 	bl	e0a0 <attsErrRsp>
    ec10:	b007      	add	sp, #28
    ec12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec16:	2301      	movs	r3, #1
    ec18:	4628      	mov	r0, r5
    ec1a:	9303      	str	r3, [sp, #12]
    ec1c:	f00b ff08 	bl	1aa30 <WsfMsgFree>
    ec20:	9b03      	ldr	r3, [sp, #12]
    ec22:	e7f0      	b.n	ec06 <attsProcReadMultReq+0xe2>
    ec24:	100190c4 	.word	0x100190c4

0000ec28 <attsProcReadGroupTypeReq>:
    ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec2c:	b08f      	sub	sp, #60	; 0x3c
    ec2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ec32:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    ec36:	7a57      	ldrb	r7, [r2, #9]
    ec38:	7a93      	ldrb	r3, [r2, #10]
    ec3a:	3905      	subs	r1, #5
    ec3c:	fa5f fa81 	uxtb.w	sl, r1
    ec40:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    ec44:	f1ba 0f02 	cmp.w	sl, #2
    ec48:	4681      	mov	r9, r0
    ec4a:	b2bf      	uxth	r7, r7
    ec4c:	d003      	beq.n	ec56 <attsProcReadGroupTypeReq+0x2e>
    ec4e:	f1ba 0f10 	cmp.w	sl, #16
    ec52:	f040 80b6 	bne.w	edc2 <attsProcReadGroupTypeReq+0x19a>
    ec56:	2f00      	cmp	r7, #0
    ec58:	f000 80b8 	beq.w	edcc <attsProcReadGroupTypeReq+0x1a4>
    ec5c:	7b11      	ldrb	r1, [r2, #12]
    ec5e:	7ad3      	ldrb	r3, [r2, #11]
    ec60:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    ec64:	b29b      	uxth	r3, r3
    ec66:	429f      	cmp	r7, r3
    ec68:	9303      	str	r3, [sp, #12]
    ec6a:	f200 80c7 	bhi.w	edfc <attsProcReadGroupTypeReq+0x1d4>
    ec6e:	f102 030d 	add.w	r3, r2, #13
    ec72:	461a      	mov	r2, r3
    ec74:	4651      	mov	r1, sl
    ec76:	a80b      	add	r0, sp, #44	; 0x2c
    ec78:	9308      	str	r3, [sp, #32]
    ec7a:	f7ff fb58 	bl	e32e <attsUuid16Cmp>
    ec7e:	2800      	cmp	r0, #0
    ec80:	f000 80bf 	beq.w	ee02 <attsProcReadGroupTypeReq+0x1da>
    ec84:	ab0d      	add	r3, sp, #52	; 0x34
    ec86:	9301      	str	r3, [sp, #4]
    ec88:	ab0c      	add	r3, sp, #48	; 0x30
    ec8a:	9300      	str	r3, [sp, #0]
    ec8c:	4652      	mov	r2, sl
    ec8e:	9b08      	ldr	r3, [sp, #32]
    ec90:	9903      	ldr	r1, [sp, #12]
    ec92:	4638      	mov	r0, r7
    ec94:	f7ff fcd8 	bl	e648 <attsFindUuidInRange>
    ec98:	4604      	mov	r4, r0
    ec9a:	2800      	cmp	r0, #0
    ec9c:	f000 80b4 	beq.w	ee08 <attsProcReadGroupTypeReq+0x1e0>
    eca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eca2:	4602      	mov	r2, r0
    eca4:	7bdb      	ldrb	r3, [r3, #15]
    eca6:	f899 001c 	ldrb.w	r0, [r9, #28]
    ecaa:	2101      	movs	r1, #1
    ecac:	f7ff fb7e 	bl	e3ac <attsPermissions>
    ecb0:	4680      	mov	r8, r0
    ecb2:	2800      	cmp	r0, #0
    ecb4:	f040 80ab 	bne.w	ee0e <attsProcReadGroupTypeReq+0x1e6>
    ecb8:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    ecbc:	3008      	adds	r0, #8
    ecbe:	b280      	uxth	r0, r0
    ecc0:	f7fe f93c 	bl	cf3c <attMsgAlloc>
    ecc4:	2311      	movs	r3, #17
    ecc6:	4605      	mov	r5, r0
    ecc8:	2800      	cmp	r0, #0
    ecca:	f000 80a2 	beq.w	ee12 <attsProcReadGroupTypeReq+0x1ea>
    ecce:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    ecd2:	7203      	strb	r3, [r0, #8]
    ecd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ecd6:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    ecda:	689b      	ldr	r3, [r3, #8]
    ecdc:	881b      	ldrh	r3, [r3, #0]
    ecde:	7284      	strb	r4, [r0, #10]
    ece0:	3a06      	subs	r2, #6
    ece2:	4293      	cmp	r3, r2
    ece4:	bf28      	it	cs
    ece6:	4613      	movcs	r3, r2
    ece8:	b2db      	uxtb	r3, r3
    ecea:	9304      	str	r3, [sp, #16]
    ecec:	3304      	adds	r3, #4
    ecee:	9305      	str	r3, [sp, #20]
    ecf0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ecf4:	7243      	strb	r3, [r0, #9]
    ecf6:	0a23      	lsrs	r3, r4, #8
    ecf8:	72c3      	strb	r3, [r0, #11]
    ecfa:	4620      	mov	r0, r4
    ecfc:	f7ff fcde 	bl	e6bc <attsFindServiceGroupEnd>
    ed00:	990c      	ldr	r1, [sp, #48]	; 0x30
    ed02:	7328      	strb	r0, [r5, #12]
    ed04:	0a02      	lsrs	r2, r0, #8
    ed06:	f105 030e 	add.w	r3, r5, #14
    ed0a:	736a      	strb	r2, [r5, #13]
    ed0c:	4683      	mov	fp, r0
    ed0e:	9a04      	ldr	r2, [sp, #16]
    ed10:	6849      	ldr	r1, [r1, #4]
    ed12:	4618      	mov	r0, r3
    ed14:	f7fd fa24 	bl	c160 <memcpy>
    ed18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ed1c:	9206      	str	r2, [sp, #24]
    ed1e:	3e06      	subs	r6, #6
    ed20:	1ab6      	subs	r6, r6, r2
    ed22:	9b06      	ldr	r3, [sp, #24]
    ed24:	b2b2      	uxth	r2, r6
    ed26:	9207      	str	r2, [sp, #28]
    ed28:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    ed2c:	9a05      	ldr	r2, [sp, #20]
    ed2e:	33fc      	adds	r3, #252	; 0xfc
    ed30:	1886      	adds	r6, r0, r2
    ed32:	9309      	str	r3, [sp, #36]	; 0x24
    ed34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ed38:	459b      	cmp	fp, r3
    ed3a:	f1a6 0404 	sub.w	r4, r6, #4
    ed3e:	d049      	beq.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ed40:	f10b 0001 	add.w	r0, fp, #1
    ed44:	9b03      	ldr	r3, [sp, #12]
    ed46:	b280      	uxth	r0, r0
    ed48:	4283      	cmp	r3, r0
    ed4a:	d343      	bcc.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ed4c:	ab0d      	add	r3, sp, #52	; 0x34
    ed4e:	9301      	str	r3, [sp, #4]
    ed50:	ab0c      	add	r3, sp, #48	; 0x30
    ed52:	9300      	str	r3, [sp, #0]
    ed54:	4652      	mov	r2, sl
    ed56:	9b08      	ldr	r3, [sp, #32]
    ed58:	9903      	ldr	r1, [sp, #12]
    ed5a:	f7ff fc75 	bl	e648 <attsFindUuidInRange>
    ed5e:	4683      	mov	fp, r0
    ed60:	2800      	cmp	r0, #0
    ed62:	d037      	beq.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ed64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed66:	9906      	ldr	r1, [sp, #24]
    ed68:	689a      	ldr	r2, [r3, #8]
    ed6a:	8812      	ldrh	r2, [r2, #0]
    ed6c:	428a      	cmp	r2, r1
    ed6e:	d131      	bne.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ed70:	4602      	mov	r2, r0
    ed72:	7bdb      	ldrb	r3, [r3, #15]
    ed74:	f899 001c 	ldrb.w	r0, [r9, #28]
    ed78:	2101      	movs	r1, #1
    ed7a:	f7ff fb17 	bl	e3ac <attsPermissions>
    ed7e:	bb48      	cbnz	r0, edd4 <attsProcReadGroupTypeReq+0x1ac>
    ed80:	9b07      	ldr	r3, [sp, #28]
    ed82:	9a05      	ldr	r2, [sp, #20]
    ed84:	4293      	cmp	r3, r2
    ed86:	d347      	bcc.n	ee18 <attsProcReadGroupTypeReq+0x1f0>
    ed88:	ea4f 231b 	mov.w	r3, fp, lsr #8
    ed8c:	f806 bc04 	strb.w	fp, [r6, #-4]
    ed90:	f806 3c03 	strb.w	r3, [r6, #-3]
    ed94:	4658      	mov	r0, fp
    ed96:	f7ff fc91 	bl	e6bc <attsFindServiceGroupEnd>
    ed9a:	0a03      	lsrs	r3, r0, #8
    ed9c:	f806 0c02 	strb.w	r0, [r6, #-2]
    eda0:	f806 3c01 	strb.w	r3, [r6, #-1]
    eda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eda6:	9a04      	ldr	r2, [sp, #16]
    eda8:	6859      	ldr	r1, [r3, #4]
    edaa:	4683      	mov	fp, r0
    edac:	4630      	mov	r0, r6
    edae:	f7fd f9d7 	bl	c160 <memcpy>
    edb2:	9b07      	ldr	r3, [sp, #28]
    edb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    edb6:	4413      	add	r3, r2
    edb8:	b29b      	uxth	r3, r3
    edba:	9307      	str	r3, [sp, #28]
    edbc:	9b05      	ldr	r3, [sp, #20]
    edbe:	441e      	add	r6, r3
    edc0:	e7b8      	b.n	ed34 <attsProcReadGroupTypeReq+0x10c>
    edc2:	f04f 0804 	mov.w	r8, #4
    edc6:	2400      	movs	r4, #0
    edc8:	4625      	mov	r5, r4
    edca:	e003      	b.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    edcc:	f04f 0801 	mov.w	r8, #1
    edd0:	463c      	mov	r4, r7
    edd2:	463d      	mov	r5, r7
    edd4:	4648      	mov	r0, r9
    edd6:	f7ff f9e1 	bl	e19c <attsDiscBusy>
    edda:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    edde:	f1b8 0f00 	cmp.w	r8, #0
    ede2:	d11b      	bne.n	ee1c <attsProcReadGroupTypeReq+0x1f4>
    ede4:	f105 0208 	add.w	r2, r5, #8
    ede8:	1aa2      	subs	r2, r4, r2
    edea:	4601      	mov	r1, r0
    edec:	462b      	mov	r3, r5
    edee:	b292      	uxth	r2, r2
    edf0:	2004      	movs	r0, #4
    edf2:	f002 f875 	bl	10ee0 <L2cDataReq>
    edf6:	b00f      	add	sp, #60	; 0x3c
    edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edfc:	f04f 0801 	mov.w	r8, #1
    ee00:	e7e1      	b.n	edc6 <attsProcReadGroupTypeReq+0x19e>
    ee02:	f04f 0810 	mov.w	r8, #16
    ee06:	e7de      	b.n	edc6 <attsProcReadGroupTypeReq+0x19e>
    ee08:	f04f 080a 	mov.w	r8, #10
    ee0c:	e7dc      	b.n	edc8 <attsProcReadGroupTypeReq+0x1a0>
    ee0e:	4627      	mov	r7, r4
    ee10:	e7d9      	b.n	edc6 <attsProcReadGroupTypeReq+0x19e>
    ee12:	4604      	mov	r4, r0
    ee14:	4698      	mov	r8, r3
    ee16:	e7dd      	b.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ee18:	4680      	mov	r8, r0
    ee1a:	e7db      	b.n	edd4 <attsProcReadGroupTypeReq+0x1ac>
    ee1c:	4643      	mov	r3, r8
    ee1e:	463a      	mov	r2, r7
    ee20:	2110      	movs	r1, #16
    ee22:	f7ff f93d 	bl	e0a0 <attsErrRsp>
    ee26:	e7e6      	b.n	edf6 <attsProcReadGroupTypeReq+0x1ce>

0000ee28 <attsSignedWriteStart>:
    ee28:	6843      	ldr	r3, [r0, #4]
    ee2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee2c:	4606      	mov	r6, r0
    ee2e:	460d      	mov	r5, r1
    ee30:	b1eb      	cbz	r3, ee6e <attsSignedWriteStart+0x46>
    ee32:	894c      	ldrh	r4, [r1, #10]
    ee34:	3404      	adds	r4, #4
    ee36:	b2a4      	uxth	r4, r4
    ee38:	4620      	mov	r0, r4
    ee3a:	f00b fd53 	bl	1a8e4 <WsfBufAlloc>
    ee3e:	60b5      	str	r5, [r6, #8]
    ee40:	4607      	mov	r7, r0
    ee42:	b1a0      	cbz	r0, ee6e <attsSignedWriteStart+0x46>
    ee44:	4622      	mov	r2, r4
    ee46:	f105 0110 	add.w	r1, r5, #16
    ee4a:	f010 ffbe 	bl	1fdca <WStrReverseCpy>
    ee4e:	4b0c      	ldr	r3, [pc, #48]	; (ee80 <attsSignedWriteStart+0x58>)
    ee50:	6870      	ldr	r0, [r6, #4]
    ee52:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    ee56:	2223      	movs	r2, #35	; 0x23
    ee58:	9201      	str	r2, [sp, #4]
    ee5a:	7b2a      	ldrb	r2, [r5, #12]
    ee5c:	9200      	str	r2, [sp, #0]
    ee5e:	4639      	mov	r1, r7
    ee60:	b2e2      	uxtb	r2, r4
    ee62:	f00c fa2b 	bl	1b2bc <SecCmac>
    ee66:	b940      	cbnz	r0, ee7a <attsSignedWriteStart+0x52>
    ee68:	4638      	mov	r0, r7
    ee6a:	f00b fd7b 	bl	1a964 <WsfBufFree>
    ee6e:	4628      	mov	r0, r5
    ee70:	b003      	add	sp, #12
    ee72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ee76:	f00b bd75 	b.w	1a964 <WsfBufFree>
    ee7a:	b003      	add	sp, #12
    ee7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee7e:	bf00      	nop
    ee80:	10018c60 	.word	0x10018c60

0000ee84 <attsProcSignedWrite>:
    ee84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ee88:	7a93      	ldrb	r3, [r2, #10]
    ee8a:	7a55      	ldrb	r5, [r2, #9]
    ee8c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    ee90:	b2ad      	uxth	r5, r5
    ee92:	4607      	mov	r7, r0
    ee94:	4689      	mov	r9, r1
    ee96:	4628      	mov	r0, r5
    ee98:	a901      	add	r1, sp, #4
    ee9a:	4690      	mov	r8, r2
    ee9c:	f7ff fa5a 	bl	e354 <attsFindByHandle>
    eea0:	4604      	mov	r4, r0
    eea2:	2800      	cmp	r0, #0
    eea4:	d033      	beq.n	ef0e <attsProcSignedWrite+0x8a>
    eea6:	7bc3      	ldrb	r3, [r0, #15]
    eea8:	7f38      	ldrb	r0, [r7, #28]
    eeaa:	462a      	mov	r2, r5
    eeac:	2110      	movs	r1, #16
    eeae:	f7ff fa7d 	bl	e3ac <attsPermissions>
    eeb2:	bb60      	cbnz	r0, ef0e <attsProcSignedWrite+0x8a>
    eeb4:	7ba2      	ldrb	r2, [r4, #14]
    eeb6:	0651      	lsls	r1, r2, #25
    eeb8:	d529      	bpl.n	ef0e <attsProcSignedWrite+0x8a>
    eeba:	f1a9 060f 	sub.w	r6, r9, #15
    eebe:	0712      	lsls	r2, r2, #28
    eec0:	b2b6      	uxth	r6, r6
    eec2:	89a3      	ldrh	r3, [r4, #12]
    eec4:	d421      	bmi.n	ef0a <attsProcSignedWrite+0x86>
    eec6:	429e      	cmp	r6, r3
    eec8:	d121      	bne.n	ef0e <attsProcSignedWrite+0x8a>
    eeca:	f109 000f 	add.w	r0, r9, #15
    eece:	b280      	uxth	r0, r0
    eed0:	f00b fd08 	bl	1a8e4 <WsfBufAlloc>
    eed4:	4604      	mov	r4, r0
    eed6:	b1d0      	cbz	r0, ef0e <attsProcSignedWrite+0x8a>
    eed8:	6047      	str	r7, [r0, #4]
    eeda:	8105      	strh	r5, [r0, #8]
    eedc:	8146      	strh	r6, [r0, #10]
    eede:	7f3b      	ldrb	r3, [r7, #28]
    eee0:	7303      	strb	r3, [r0, #12]
    eee2:	464a      	mov	r2, r9
    eee4:	f108 0108 	add.w	r1, r8, #8
    eee8:	300d      	adds	r0, #13
    eeea:	f7fd f939 	bl	c160 <memcpy>
    eeee:	7f38      	ldrb	r0, [r7, #28]
    eef0:	4a0a      	ldr	r2, [pc, #40]	; (ef1c <attsProcSignedWrite+0x98>)
    eef2:	1e43      	subs	r3, r0, #1
    eef4:	200c      	movs	r0, #12
    eef6:	fb00 2003 	mla	r0, r0, r3, r2
    eefa:	4621      	mov	r1, r4
    eefc:	6883      	ldr	r3, [r0, #8]
    eefe:	b14b      	cbz	r3, ef14 <attsProcSignedWrite+0x90>
    ef00:	f102 0060 	add.w	r0, r2, #96	; 0x60
    ef04:	f00b fde6 	bl	1aad4 <WsfQueueEnq>
    ef08:	e001      	b.n	ef0e <attsProcSignedWrite+0x8a>
    ef0a:	429e      	cmp	r6, r3
    ef0c:	d9dd      	bls.n	eeca <attsProcSignedWrite+0x46>
    ef0e:	b003      	add	sp, #12
    ef10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ef14:	f7ff ff88 	bl	ee28 <attsSignedWriteStart>
    ef18:	e7f9      	b.n	ef0e <attsProcSignedWrite+0x8a>
    ef1a:	bf00      	nop
    ef1c:	100190dc 	.word	0x100190dc

0000ef20 <attsSignMsgCback>:
    ef20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef24:	7883      	ldrb	r3, [r0, #2]
    ef26:	2b23      	cmp	r3, #35	; 0x23
    ef28:	b088      	sub	sp, #32
    ef2a:	d152      	bne.n	efd2 <attsSignMsgCback+0xb2>
    ef2c:	7806      	ldrb	r6, [r0, #0]
    ef2e:	4d39      	ldr	r5, [pc, #228]	; (f014 <attsSignMsgCback+0xf4>)
    ef30:	6841      	ldr	r1, [r0, #4]
    ef32:	3e01      	subs	r6, #1
    ef34:	270c      	movs	r7, #12
    ef36:	4377      	muls	r7, r6
    ef38:	19eb      	adds	r3, r5, r7
    ef3a:	2208      	movs	r2, #8
    ef3c:	689c      	ldr	r4, [r3, #8]
    ef3e:	a806      	add	r0, sp, #24
    ef40:	f010 ff43 	bl	1fdca <WStrReverseCpy>
    ef44:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    ef48:	f104 090d 	add.w	r9, r4, #13
    ef4c:	f10a 0107 	add.w	r1, sl, #7
    ef50:	2208      	movs	r2, #8
    ef52:	4449      	add	r1, r9
    ef54:	a806      	add	r0, sp, #24
    ef56:	f7fd f8d3 	bl	c100 <memcmp>
    ef5a:	4680      	mov	r8, r0
    ef5c:	bb50      	cbnz	r0, efb4 <attsSignMsgCback+0x94>
    ef5e:	eb09 030a 	add.w	r3, r9, sl
    ef62:	795a      	ldrb	r2, [r3, #5]
    ef64:	7919      	ldrb	r1, [r3, #4]
    ef66:	0412      	lsls	r2, r2, #16
    ef68:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    ef6c:	78d9      	ldrb	r1, [r3, #3]
    ef6e:	799b      	ldrb	r3, [r3, #6]
    ef70:	440a      	add	r2, r1
    ef72:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    ef76:	59eb      	ldr	r3, [r5, r7]
    ef78:	429a      	cmp	r2, r3
    ef7a:	d31b      	bcc.n	efb4 <attsSignMsgCback+0x94>
    ef7c:	3201      	adds	r2, #1
    ef7e:	51ea      	str	r2, [r5, r7]
    ef80:	a905      	add	r1, sp, #20
    ef82:	8920      	ldrh	r0, [r4, #8]
    ef84:	f7ff f9e6 	bl	e354 <attsFindByHandle>
    ef88:	4607      	mov	r7, r0
    ef8a:	b198      	cbz	r0, efb4 <attsSignMsgCback+0x94>
    ef8c:	7b82      	ldrb	r2, [r0, #14]
    ef8e:	0791      	lsls	r1, r2, #30
    ef90:	f104 0310 	add.w	r3, r4, #16
    ef94:	d520      	bpl.n	efd8 <attsSignMsgCback+0xb8>
    ef96:	9905      	ldr	r1, [sp, #20]
    ef98:	f8d1 900c 	ldr.w	r9, [r1, #12]
    ef9c:	f1b9 0f00 	cmp.w	r9, #0
    efa0:	d01a      	beq.n	efd8 <attsSignMsgCback+0xb8>
    efa2:	8921      	ldrh	r1, [r4, #8]
    efa4:	7b20      	ldrb	r0, [r4, #12]
    efa6:	e9cd 3701 	strd	r3, r7, [sp, #4]
    efaa:	8963      	ldrh	r3, [r4, #10]
    efac:	9300      	str	r3, [sp, #0]
    efae:	22d2      	movs	r2, #210	; 0xd2
    efb0:	4643      	mov	r3, r8
    efb2:	47c8      	blx	r9
    efb4:	4620      	mov	r0, r4
    efb6:	f00b fcd5 	bl	1a964 <WsfBufFree>
    efba:	4817      	ldr	r0, [pc, #92]	; (f018 <attsSignMsgCback+0xf8>)
    efbc:	f00b fdac 	bl	1ab18 <WsfQueueDeq>
    efc0:	4601      	mov	r1, r0
    efc2:	200c      	movs	r0, #12
    efc4:	b309      	cbz	r1, f00a <attsSignMsgCback+0xea>
    efc6:	7b0b      	ldrb	r3, [r1, #12]
    efc8:	3b01      	subs	r3, #1
    efca:	fb00 5003 	mla	r0, r0, r3, r5
    efce:	f7ff ff2b 	bl	ee28 <attsSignedWriteStart>
    efd2:	b008      	add	sp, #32
    efd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    efd8:	0692      	lsls	r2, r2, #26
    efda:	d50a      	bpl.n	eff2 <attsSignMsgCback+0xd2>
    efdc:	4a0f      	ldr	r2, [pc, #60]	; (f01c <attsSignMsgCback+0xfc>)
    efde:	f8d2 8014 	ldr.w	r8, [r2, #20]
    efe2:	f1b8 0f00 	cmp.w	r8, #0
    efe6:	d004      	beq.n	eff2 <attsSignMsgCback+0xd2>
    efe8:	8922      	ldrh	r2, [r4, #8]
    efea:	7b20      	ldrb	r0, [r4, #12]
    efec:	2109      	movs	r1, #9
    efee:	47c0      	blx	r8
    eff0:	e7e0      	b.n	efb4 <attsSignMsgCback+0x94>
    eff2:	8962      	ldrh	r2, [r4, #10]
    eff4:	6878      	ldr	r0, [r7, #4]
    eff6:	4619      	mov	r1, r3
    eff8:	f7fd f8b2 	bl	c160 <memcpy>
    effc:	7bbb      	ldrb	r3, [r7, #14]
    effe:	071b      	lsls	r3, r3, #28
    f000:	bf42      	ittt	mi
    f002:	68bb      	ldrmi	r3, [r7, #8]
    f004:	8962      	ldrhmi	r2, [r4, #10]
    f006:	801a      	strhmi	r2, [r3, #0]
    f008:	e7d4      	b.n	efb4 <attsSignMsgCback+0x94>
    f00a:	fb00 5506 	mla	r5, r0, r6, r5
    f00e:	60a9      	str	r1, [r5, #8]
    f010:	e7df      	b.n	efd2 <attsSignMsgCback+0xb2>
    f012:	bf00      	nop
    f014:	100190dc 	.word	0x100190dc
    f018:	1001913c 	.word	0x1001913c
    f01c:	100190c4 	.word	0x100190c4

0000f020 <AttsSignInit>:
    f020:	4b05      	ldr	r3, [pc, #20]	; (f038 <AttsSignInit+0x18>)
    f022:	2200      	movs	r2, #0
    f024:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    f028:	4b04      	ldr	r3, [pc, #16]	; (f03c <AttsSignInit+0x1c>)
    f02a:	4a05      	ldr	r2, [pc, #20]	; (f040 <AttsSignInit+0x20>)
    f02c:	60da      	str	r2, [r3, #12]
    f02e:	4b05      	ldr	r3, [pc, #20]	; (f044 <AttsSignInit+0x24>)
    f030:	4a05      	ldr	r2, [pc, #20]	; (f048 <AttsSignInit+0x28>)
    f032:	641a      	str	r2, [r3, #64]	; 0x40
    f034:	4770      	bx	lr
    f036:	bf00      	nop
    f038:	100190dc 	.word	0x100190dc
    f03c:	100190c4 	.word	0x100190c4
    f040:	0000ef21 	.word	0x0000ef21
    f044:	10002f40 	.word	0x10002f40
    f048:	0000ee85 	.word	0x0000ee85

0000f04c <AttsSetCsrk>:
    f04c:	4b03      	ldr	r3, [pc, #12]	; (f05c <AttsSetCsrk+0x10>)
    f04e:	3801      	subs	r0, #1
    f050:	220c      	movs	r2, #12
    f052:	fb02 3000 	mla	r0, r2, r0, r3
    f056:	6041      	str	r1, [r0, #4]
    f058:	4770      	bx	lr
    f05a:	bf00      	nop
    f05c:	100190dc 	.word	0x100190dc

0000f060 <AttsSetSignCounter>:
    f060:	230c      	movs	r3, #12
    f062:	3801      	subs	r0, #1
    f064:	4358      	muls	r0, r3
    f066:	4b01      	ldr	r3, [pc, #4]	; (f06c <AttsSetSignCounter+0xc>)
    f068:	5019      	str	r1, [r3, r0]
    f06a:	4770      	bx	lr
    f06c:	100190dc 	.word	0x100190dc

0000f070 <AttsGetSignCounter>:
    f070:	230c      	movs	r3, #12
    f072:	3801      	subs	r0, #1
    f074:	4358      	muls	r0, r3
    f076:	4b01      	ldr	r3, [pc, #4]	; (f07c <AttsGetSignCounter+0xc>)
    f078:	5818      	ldr	r0, [r3, r0]
    f07a:	4770      	bx	lr
    f07c:	100190dc 	.word	0x100190dc

0000f080 <attsProcWrite>:
    f080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f084:	7a93      	ldrb	r3, [r2, #10]
    f086:	7a54      	ldrb	r4, [r2, #9]
    f088:	f892 9008 	ldrb.w	r9, [r2, #8]
    f08c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    f090:	b087      	sub	sp, #28
    f092:	b2a4      	uxth	r4, r4
    f094:	4680      	mov	r8, r0
    f096:	460d      	mov	r5, r1
    f098:	4620      	mov	r0, r4
    f09a:	a905      	add	r1, sp, #20
    f09c:	4617      	mov	r7, r2
    f09e:	f7ff f959 	bl	e354 <attsFindByHandle>
    f0a2:	4606      	mov	r6, r0
    f0a4:	2800      	cmp	r0, #0
    f0a6:	d057      	beq.n	f158 <attsProcWrite+0xd8>
    f0a8:	7bc3      	ldrb	r3, [r0, #15]
    f0aa:	f898 001c 	ldrb.w	r0, [r8, #28]
    f0ae:	4622      	mov	r2, r4
    f0b0:	2110      	movs	r1, #16
    f0b2:	f7ff f97b 	bl	e3ac <attsPermissions>
    f0b6:	b9c0      	cbnz	r0, f0ea <attsProcWrite+0x6a>
    f0b8:	7bb2      	ldrb	r2, [r6, #14]
    f0ba:	89b3      	ldrh	r3, [r6, #12]
    f0bc:	3d03      	subs	r5, #3
    f0be:	0710      	lsls	r0, r2, #28
    f0c0:	b2ad      	uxth	r5, r5
    f0c2:	d41d      	bmi.n	f100 <attsProcWrite+0x80>
    f0c4:	429d      	cmp	r5, r3
    f0c6:	d11d      	bne.n	f104 <attsProcWrite+0x84>
    f0c8:	0791      	lsls	r1, r2, #30
    f0ca:	f107 030b 	add.w	r3, r7, #11
    f0ce:	d51b      	bpl.n	f108 <attsProcWrite+0x88>
    f0d0:	9905      	ldr	r1, [sp, #20]
    f0d2:	68cf      	ldr	r7, [r1, #12]
    f0d4:	b1c7      	cbz	r7, f108 <attsProcWrite+0x88>
    f0d6:	e9cd 3601 	strd	r3, r6, [sp, #4]
    f0da:	f898 001c 	ldrb.w	r0, [r8, #28]
    f0de:	9500      	str	r5, [sp, #0]
    f0e0:	2300      	movs	r3, #0
    f0e2:	464a      	mov	r2, r9
    f0e4:	4621      	mov	r1, r4
    f0e6:	47b8      	blx	r7
    f0e8:	b318      	cbz	r0, f132 <attsProcWrite+0xb2>
    f0ea:	f1b9 0f12 	cmp.w	r9, #18
    f0ee:	d130      	bne.n	f152 <attsProcWrite+0xd2>
    f0f0:	4603      	mov	r3, r0
    f0f2:	4622      	mov	r2, r4
    f0f4:	4649      	mov	r1, r9
    f0f6:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    f0fa:	f7fe ffd1 	bl	e0a0 <attsErrRsp>
    f0fe:	e028      	b.n	f152 <attsProcWrite+0xd2>
    f100:	429d      	cmp	r5, r3
    f102:	d9e1      	bls.n	f0c8 <attsProcWrite+0x48>
    f104:	200d      	movs	r0, #13
    f106:	e7f0      	b.n	f0ea <attsProcWrite+0x6a>
    f108:	0692      	lsls	r2, r2, #26
    f10a:	d508      	bpl.n	f11e <attsProcWrite+0x9e>
    f10c:	4a13      	ldr	r2, [pc, #76]	; (f15c <attsProcWrite+0xdc>)
    f10e:	6957      	ldr	r7, [r2, #20]
    f110:	b12f      	cbz	r7, f11e <attsProcWrite+0x9e>
    f112:	4622      	mov	r2, r4
    f114:	2109      	movs	r1, #9
    f116:	f898 001c 	ldrb.w	r0, [r8, #28]
    f11a:	47b8      	blx	r7
    f11c:	e7e4      	b.n	f0e8 <attsProcWrite+0x68>
    f11e:	4619      	mov	r1, r3
    f120:	462a      	mov	r2, r5
    f122:	6870      	ldr	r0, [r6, #4]
    f124:	f7fd f81c 	bl	c160 <memcpy>
    f128:	7bb3      	ldrb	r3, [r6, #14]
    f12a:	071b      	lsls	r3, r3, #28
    f12c:	d501      	bpl.n	f132 <attsProcWrite+0xb2>
    f12e:	68b3      	ldr	r3, [r6, #8]
    f130:	801d      	strh	r5, [r3, #0]
    f132:	f1b9 0f12 	cmp.w	r9, #18
    f136:	d10c      	bne.n	f152 <attsProcWrite+0xd2>
    f138:	2009      	movs	r0, #9
    f13a:	f7fd feff 	bl	cf3c <attMsgAlloc>
    f13e:	4603      	mov	r3, r0
    f140:	b138      	cbz	r0, f152 <attsProcWrite+0xd2>
    f142:	2213      	movs	r2, #19
    f144:	7202      	strb	r2, [r0, #8]
    f146:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    f14a:	2201      	movs	r2, #1
    f14c:	2004      	movs	r0, #4
    f14e:	f001 fec7 	bl	10ee0 <L2cDataReq>
    f152:	b007      	add	sp, #28
    f154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f158:	2001      	movs	r0, #1
    f15a:	e7c6      	b.n	f0ea <attsProcWrite+0x6a>
    f15c:	100190c4 	.word	0x100190c4

0000f160 <attsProcPrepWriteReq>:
    f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f164:	7a93      	ldrb	r3, [r2, #10]
    f166:	7a54      	ldrb	r4, [r2, #9]
    f168:	7ad5      	ldrb	r5, [r2, #11]
    f16a:	7b16      	ldrb	r6, [r2, #12]
    f16c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    f170:	b089      	sub	sp, #36	; 0x24
    f172:	b2a4      	uxth	r4, r4
    f174:	4607      	mov	r7, r0
    f176:	468a      	mov	sl, r1
    f178:	4620      	mov	r0, r4
    f17a:	a907      	add	r1, sp, #28
    f17c:	4693      	mov	fp, r2
    f17e:	f7ff f8e9 	bl	e354 <attsFindByHandle>
    f182:	4680      	mov	r8, r0
    f184:	2800      	cmp	r0, #0
    f186:	d079      	beq.n	f27c <attsProcPrepWriteReq+0x11c>
    f188:	7bc3      	ldrb	r3, [r0, #15]
    f18a:	7f38      	ldrb	r0, [r7, #28]
    f18c:	4622      	mov	r2, r4
    f18e:	2110      	movs	r1, #16
    f190:	f7ff f90c 	bl	e3ac <attsPermissions>
    f194:	2800      	cmp	r0, #0
    f196:	d153      	bne.n	f240 <attsProcPrepWriteReq+0xe0>
    f198:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    f19c:	b2ab      	uxth	r3, r5
    f19e:	9305      	str	r3, [sp, #20]
    f1a0:	9a05      	ldr	r2, [sp, #20]
    f1a2:	f898 300e 	ldrb.w	r3, [r8, #14]
    f1a6:	b10a      	cbz	r2, f1ac <attsProcPrepWriteReq+0x4c>
    f1a8:	06d9      	lsls	r1, r3, #27
    f1aa:	d569      	bpl.n	f280 <attsProcPrepWriteReq+0x120>
    f1ac:	f1aa 0605 	sub.w	r6, sl, #5
    f1b0:	071a      	lsls	r2, r3, #28
    f1b2:	b2b6      	uxth	r6, r6
    f1b4:	d403      	bmi.n	f1be <attsProcPrepWriteReq+0x5e>
    f1b6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    f1ba:	42b3      	cmp	r3, r6
    f1bc:	d162      	bne.n	f284 <attsProcPrepWriteReq+0x124>
    f1be:	4638      	mov	r0, r7
    f1c0:	f00b fd35 	bl	1ac2e <WsfQueueCount>
    f1c4:	4b32      	ldr	r3, [pc, #200]	; (f290 <attsProcPrepWriteReq+0x130>)
    f1c6:	681b      	ldr	r3, [r3, #0]
    f1c8:	79db      	ldrb	r3, [r3, #7]
    f1ca:	4283      	cmp	r3, r0
    f1cc:	d95c      	bls.n	f288 <attsProcPrepWriteReq+0x128>
    f1ce:	f10a 0006 	add.w	r0, sl, #6
    f1d2:	b280      	uxth	r0, r0
    f1d4:	f00b fb86 	bl	1a8e4 <WsfBufAlloc>
    f1d8:	4681      	mov	r9, r0
    f1da:	2800      	cmp	r0, #0
    f1dc:	d056      	beq.n	f28c <attsProcPrepWriteReq+0x12c>
    f1de:	f898 300e 	ldrb.w	r3, [r8, #14]
    f1e2:	079b      	lsls	r3, r3, #30
    f1e4:	f10b 0b0d 	add.w	fp, fp, #13
    f1e8:	d41b      	bmi.n	f222 <attsProcPrepWriteReq+0xc2>
    f1ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    f1ee:	f8a9 3008 	strh.w	r3, [r9, #8]
    f1f2:	4632      	mov	r2, r6
    f1f4:	4659      	mov	r1, fp
    f1f6:	f8a9 6004 	strh.w	r6, [r9, #4]
    f1fa:	f8a9 4006 	strh.w	r4, [r9, #6]
    f1fe:	f109 000a 	add.w	r0, r9, #10
    f202:	f7fc ffad 	bl	c160 <memcpy>
    f206:	4649      	mov	r1, r9
    f208:	4638      	mov	r0, r7
    f20a:	f00b fc63 	bl	1aad4 <WsfQueueEnq>
    f20e:	f10a 0008 	add.w	r0, sl, #8
    f212:	b280      	uxth	r0, r0
    f214:	f7fd fe92 	bl	cf3c <attMsgAlloc>
    f218:	4680      	mov	r8, r0
    f21a:	b9c0      	cbnz	r0, f24e <attsProcPrepWriteReq+0xee>
    f21c:	b009      	add	sp, #36	; 0x24
    f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f222:	9b07      	ldr	r3, [sp, #28]
    f224:	68db      	ldr	r3, [r3, #12]
    f226:	461d      	mov	r5, r3
    f228:	2b00      	cmp	r3, #0
    f22a:	d0de      	beq.n	f1ea <attsProcPrepWriteReq+0x8a>
    f22c:	7f38      	ldrb	r0, [r7, #28]
    f22e:	9600      	str	r6, [sp, #0]
    f230:	e9cd b801 	strd	fp, r8, [sp, #4]
    f234:	2300      	movs	r3, #0
    f236:	2216      	movs	r2, #22
    f238:	4621      	mov	r1, r4
    f23a:	47a8      	blx	r5
    f23c:	2800      	cmp	r0, #0
    f23e:	d0d4      	beq.n	f1ea <attsProcPrepWriteReq+0x8a>
    f240:	4603      	mov	r3, r0
    f242:	4622      	mov	r2, r4
    f244:	2116      	movs	r1, #22
    f246:	8b38      	ldrh	r0, [r7, #24]
    f248:	f7fe ff2a 	bl	e0a0 <attsErrRsp>
    f24c:	e7e6      	b.n	f21c <attsProcPrepWriteReq+0xbc>
    f24e:	2317      	movs	r3, #23
    f250:	7203      	strb	r3, [r0, #8]
    f252:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f256:	72c3      	strb	r3, [r0, #11]
    f258:	9b05      	ldr	r3, [sp, #20]
    f25a:	7244      	strb	r4, [r0, #9]
    f25c:	0a1d      	lsrs	r5, r3, #8
    f25e:	0a24      	lsrs	r4, r4, #8
    f260:	7284      	strb	r4, [r0, #10]
    f262:	7305      	strb	r5, [r0, #12]
    f264:	4632      	mov	r2, r6
    f266:	4659      	mov	r1, fp
    f268:	300d      	adds	r0, #13
    f26a:	f7fc ff79 	bl	c160 <memcpy>
    f26e:	4643      	mov	r3, r8
    f270:	4652      	mov	r2, sl
    f272:	8b39      	ldrh	r1, [r7, #24]
    f274:	2004      	movs	r0, #4
    f276:	f001 fe33 	bl	10ee0 <L2cDataReq>
    f27a:	e7cf      	b.n	f21c <attsProcPrepWriteReq+0xbc>
    f27c:	2001      	movs	r0, #1
    f27e:	e7df      	b.n	f240 <attsProcPrepWriteReq+0xe0>
    f280:	200b      	movs	r0, #11
    f282:	e7dd      	b.n	f240 <attsProcPrepWriteReq+0xe0>
    f284:	200d      	movs	r0, #13
    f286:	e7db      	b.n	f240 <attsProcPrepWriteReq+0xe0>
    f288:	2009      	movs	r0, #9
    f28a:	e7d9      	b.n	f240 <attsProcPrepWriteReq+0xe0>
    f28c:	2011      	movs	r0, #17
    f28e:	e7d7      	b.n	f240 <attsProcPrepWriteReq+0xe0>
    f290:	10017f70 	.word	0x10017f70

0000f294 <attsProcExecWriteReq>:
    f294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f298:	7a53      	ldrb	r3, [r2, #9]
    f29a:	b086      	sub	sp, #24
    f29c:	4606      	mov	r6, r0
    f29e:	b973      	cbnz	r3, f2be <attsProcExecWriteReq+0x2a>
    f2a0:	f7fe ff56 	bl	e150 <attsClearPrepWrites>
    f2a4:	2009      	movs	r0, #9
    f2a6:	f7fd fe49 	bl	cf3c <attMsgAlloc>
    f2aa:	4603      	mov	r3, r0
    f2ac:	b360      	cbz	r0, f308 <attsProcExecWriteReq+0x74>
    f2ae:	2219      	movs	r2, #25
    f2b0:	7202      	strb	r2, [r0, #8]
    f2b2:	8b31      	ldrh	r1, [r6, #24]
    f2b4:	2201      	movs	r2, #1
    f2b6:	2004      	movs	r0, #4
    f2b8:	f001 fe12 	bl	10ee0 <L2cDataReq>
    f2bc:	e024      	b.n	f308 <attsProcExecWriteReq+0x74>
    f2be:	2b01      	cmp	r3, #1
    f2c0:	d16e      	bne.n	f3a0 <attsProcExecWriteReq+0x10c>
    f2c2:	6804      	ldr	r4, [r0, #0]
    f2c4:	b94c      	cbnz	r4, f2da <attsProcExecWriteReq+0x46>
    f2c6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; f3a4 <attsProcExecWriteReq+0x110>
    f2ca:	4630      	mov	r0, r6
    f2cc:	f00b fc24 	bl	1ab18 <WsfQueueDeq>
    f2d0:	4605      	mov	r5, r0
    f2d2:	bb00      	cbnz	r0, f316 <attsProcExecWriteReq+0x82>
    f2d4:	2c00      	cmp	r4, #0
    f2d6:	d0e5      	beq.n	f2a4 <attsProcExecWriteReq+0x10>
    f2d8:	e010      	b.n	f2fc <attsProcExecWriteReq+0x68>
    f2da:	a904      	add	r1, sp, #16
    f2dc:	88e0      	ldrh	r0, [r4, #6]
    f2de:	f7ff f839 	bl	e354 <attsFindByHandle>
    f2e2:	b1b0      	cbz	r0, f312 <attsProcExecWriteReq+0x7e>
    f2e4:	8921      	ldrh	r1, [r4, #8]
    f2e6:	8982      	ldrh	r2, [r0, #12]
    f2e8:	4291      	cmp	r1, r2
    f2ea:	d810      	bhi.n	f30e <attsProcExecWriteReq+0x7a>
    f2ec:	88a3      	ldrh	r3, [r4, #4]
    f2ee:	440b      	add	r3, r1
    f2f0:	4293      	cmp	r3, r2
    f2f2:	dd0e      	ble.n	f312 <attsProcExecWriteReq+0x7e>
    f2f4:	240d      	movs	r4, #13
    f2f6:	4630      	mov	r0, r6
    f2f8:	f7fe ff2a 	bl	e150 <attsClearPrepWrites>
    f2fc:	4623      	mov	r3, r4
    f2fe:	2200      	movs	r2, #0
    f300:	2118      	movs	r1, #24
    f302:	8b30      	ldrh	r0, [r6, #24]
    f304:	f7fe fecc 	bl	e0a0 <attsErrRsp>
    f308:	b006      	add	sp, #24
    f30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f30e:	2407      	movs	r4, #7
    f310:	e7f1      	b.n	f2f6 <attsProcExecWriteReq+0x62>
    f312:	6824      	ldr	r4, [r4, #0]
    f314:	e7d6      	b.n	f2c4 <attsProcExecWriteReq+0x30>
    f316:	a905      	add	r1, sp, #20
    f318:	88e8      	ldrh	r0, [r5, #6]
    f31a:	f7ff f81b 	bl	e354 <attsFindByHandle>
    f31e:	4607      	mov	r7, r0
    f320:	b920      	cbnz	r0, f32c <attsProcExecWriteReq+0x98>
    f322:	240e      	movs	r4, #14
    f324:	4630      	mov	r0, r6
    f326:	f7fe ff13 	bl	e150 <attsClearPrepWrites>
    f32a:	e017      	b.n	f35c <attsProcExecWriteReq+0xc8>
    f32c:	7bc3      	ldrb	r3, [r0, #15]
    f32e:	06d8      	lsls	r0, r3, #27
    f330:	d534      	bpl.n	f39c <attsProcExecWriteReq+0x108>
    f332:	7bba      	ldrb	r2, [r7, #14]
    f334:	0791      	lsls	r1, r2, #30
    f336:	f105 030a 	add.w	r3, r5, #10
    f33a:	d513      	bpl.n	f364 <attsProcExecWriteReq+0xd0>
    f33c:	9905      	ldr	r1, [sp, #20]
    f33e:	68cc      	ldr	r4, [r1, #12]
    f340:	b184      	cbz	r4, f364 <attsProcExecWriteReq+0xd0>
    f342:	892a      	ldrh	r2, [r5, #8]
    f344:	88e9      	ldrh	r1, [r5, #6]
    f346:	7f30      	ldrb	r0, [r6, #28]
    f348:	e9cd 3701 	strd	r3, r7, [sp, #4]
    f34c:	88ab      	ldrh	r3, [r5, #4]
    f34e:	9300      	str	r3, [sp, #0]
    f350:	4613      	mov	r3, r2
    f352:	2218      	movs	r2, #24
    f354:	47a0      	blx	r4
    f356:	4604      	mov	r4, r0
    f358:	2800      	cmp	r0, #0
    f35a:	d1e3      	bne.n	f324 <attsProcExecWriteReq+0x90>
    f35c:	4628      	mov	r0, r5
    f35e:	f00b fb01 	bl	1a964 <WsfBufFree>
    f362:	e7b2      	b.n	f2ca <attsProcExecWriteReq+0x36>
    f364:	0692      	lsls	r2, r2, #26
    f366:	d507      	bpl.n	f378 <attsProcExecWriteReq+0xe4>
    f368:	f8d8 4014 	ldr.w	r4, [r8, #20]
    f36c:	b124      	cbz	r4, f378 <attsProcExecWriteReq+0xe4>
    f36e:	88ea      	ldrh	r2, [r5, #6]
    f370:	7f30      	ldrb	r0, [r6, #28]
    f372:	2109      	movs	r1, #9
    f374:	47a0      	blx	r4
    f376:	e7ee      	b.n	f356 <attsProcExecWriteReq+0xc2>
    f378:	892c      	ldrh	r4, [r5, #8]
    f37a:	6878      	ldr	r0, [r7, #4]
    f37c:	88aa      	ldrh	r2, [r5, #4]
    f37e:	4420      	add	r0, r4
    f380:	4619      	mov	r1, r3
    f382:	f7fc feed 	bl	c160 <memcpy>
    f386:	7bbc      	ldrb	r4, [r7, #14]
    f388:	f014 0408 	ands.w	r4, r4, #8
    f38c:	d0e6      	beq.n	f35c <attsProcExecWriteReq+0xc8>
    f38e:	88ab      	ldrh	r3, [r5, #4]
    f390:	8929      	ldrh	r1, [r5, #8]
    f392:	68ba      	ldr	r2, [r7, #8]
    f394:	440b      	add	r3, r1
    f396:	8013      	strh	r3, [r2, #0]
    f398:	2400      	movs	r4, #0
    f39a:	e7df      	b.n	f35c <attsProcExecWriteReq+0xc8>
    f39c:	2403      	movs	r4, #3
    f39e:	e7c1      	b.n	f324 <attsProcExecWriteReq+0x90>
    f3a0:	2404      	movs	r4, #4
    f3a2:	e7ab      	b.n	f2fc <attsProcExecWriteReq+0x68>
    f3a4:	100190c4 	.word	0x100190c4

0000f3a8 <dmAdvCbInit>:
    f3a8:	4b0b      	ldr	r3, [pc, #44]	; (f3d8 <dmAdvCbInit+0x30>)
    f3aa:	181a      	adds	r2, r3, r0
    f3ac:	21ff      	movs	r1, #255	; 0xff
    f3ae:	b510      	push	{r4, lr}
    f3b0:	7511      	strb	r1, [r2, #20]
    f3b2:	f100 0108 	add.w	r1, r0, #8
    f3b6:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    f3ba:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    f3be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    f3c2:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    f3c6:	8059      	strh	r1, [r3, #2]
    f3c8:	2307      	movs	r3, #7
    f3ca:	7553      	strb	r3, [r2, #21]
    f3cc:	4b03      	ldr	r3, [pc, #12]	; (f3dc <dmAdvCbInit+0x34>)
    f3ce:	4418      	add	r0, r3
    f3d0:	2300      	movs	r3, #0
    f3d2:	7443      	strb	r3, [r0, #17]
    f3d4:	75d3      	strb	r3, [r2, #23]
    f3d6:	bd10      	pop	{r4, pc}
    f3d8:	10019144 	.word	0x10019144
    f3dc:	100192f4 	.word	0x100192f4

0000f3e0 <dmAdvInit>:
    f3e0:	b508      	push	{r3, lr}
    f3e2:	2000      	movs	r0, #0
    f3e4:	f7ff ffe0 	bl	f3a8 <dmAdvCbInit>
    f3e8:	4b03      	ldr	r3, [pc, #12]	; (f3f8 <dmAdvInit+0x18>)
    f3ea:	4a04      	ldr	r2, [pc, #16]	; (f3fc <dmAdvInit+0x1c>)
    f3ec:	7b19      	ldrb	r1, [r3, #12]
    f3ee:	7211      	strb	r1, [r2, #8]
    f3f0:	2200      	movs	r2, #0
    f3f2:	739a      	strb	r2, [r3, #14]
    f3f4:	bd08      	pop	{r3, pc}
    f3f6:	bf00      	nop
    f3f8:	100192f4 	.word	0x100192f4
    f3fc:	10019144 	.word	0x10019144

0000f400 <DmAdvConfig>:
    f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f404:	4607      	mov	r7, r0
    f406:	200e      	movs	r0, #14
    f408:	4688      	mov	r8, r1
    f40a:	4616      	mov	r6, r2
    f40c:	461d      	mov	r5, r3
    f40e:	f00b faf8 	bl	1aa02 <WsfMsgAlloc>
    f412:	4604      	mov	r4, r0
    f414:	b180      	cbz	r0, f438 <DmAdvConfig+0x38>
    f416:	2300      	movs	r3, #0
    f418:	7083      	strb	r3, [r0, #2]
    f41a:	f880 8005 	strb.w	r8, [r0, #5]
    f41e:	7107      	strb	r7, [r0, #4]
    f420:	7186      	strb	r6, [r0, #6]
    f422:	4629      	mov	r1, r5
    f424:	3007      	adds	r0, #7
    f426:	f010 fc14 	bl	1fc52 <BdaCpy>
    f42a:	4b04      	ldr	r3, [pc, #16]	; (f43c <DmAdvConfig+0x3c>)
    f42c:	4621      	mov	r1, r4
    f42e:	7b18      	ldrb	r0, [r3, #12]
    f430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f434:	f00b bb09 	b.w	1aa4a <WsfMsgSend>
    f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f43c:	100192f4 	.word	0x100192f4

0000f440 <DmAdvSetData>:
    f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f444:	4680      	mov	r8, r0
    f446:	200c      	movs	r0, #12
    f448:	460f      	mov	r7, r1
    f44a:	4616      	mov	r6, r2
    f44c:	461d      	mov	r5, r3
    f44e:	9c06      	ldr	r4, [sp, #24]
    f450:	f00b fad7 	bl	1aa02 <WsfMsgAlloc>
    f454:	b170      	cbz	r0, f474 <DmAdvSetData+0x34>
    f456:	2301      	movs	r3, #1
    f458:	7083      	strb	r3, [r0, #2]
    f45a:	4b07      	ldr	r3, [pc, #28]	; (f478 <DmAdvSetData+0x38>)
    f45c:	f880 8004 	strb.w	r8, [r0, #4]
    f460:	7147      	strb	r7, [r0, #5]
    f462:	7186      	strb	r6, [r0, #6]
    f464:	71c5      	strb	r5, [r0, #7]
    f466:	6084      	str	r4, [r0, #8]
    f468:	4601      	mov	r1, r0
    f46a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f46e:	7b18      	ldrb	r0, [r3, #12]
    f470:	f00b baeb 	b.w	1aa4a <WsfMsgSend>
    f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f478:	100192f4 	.word	0x100192f4

0000f47c <DmAdvStart>:
    f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f47e:	4604      	mov	r4, r0
    f480:	200a      	movs	r0, #10
    f482:	460f      	mov	r7, r1
    f484:	4616      	mov	r6, r2
    f486:	461d      	mov	r5, r3
    f488:	f00b fabb 	bl	1aa02 <WsfMsgAlloc>
    f48c:	b180      	cbz	r0, f4b0 <DmAdvStart+0x34>
    f48e:	2302      	movs	r3, #2
    f490:	7083      	strb	r3, [r0, #2]
    f492:	7104      	strb	r4, [r0, #4]
    f494:	b12c      	cbz	r4, f4a2 <DmAdvStart+0x26>
    f496:	783b      	ldrb	r3, [r7, #0]
    f498:	7143      	strb	r3, [r0, #5]
    f49a:	8833      	ldrh	r3, [r6, #0]
    f49c:	80c3      	strh	r3, [r0, #6]
    f49e:	782b      	ldrb	r3, [r5, #0]
    f4a0:	7203      	strb	r3, [r0, #8]
    f4a2:	4b04      	ldr	r3, [pc, #16]	; (f4b4 <DmAdvStart+0x38>)
    f4a4:	4601      	mov	r1, r0
    f4a6:	7b18      	ldrb	r0, [r3, #12]
    f4a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f4ac:	f00b bacd 	b.w	1aa4a <WsfMsgSend>
    f4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4b2:	bf00      	nop
    f4b4:	100192f4 	.word	0x100192f4

0000f4b8 <DmAdvStop>:
    f4b8:	b538      	push	{r3, r4, r5, lr}
    f4ba:	4604      	mov	r4, r0
    f4bc:	2006      	movs	r0, #6
    f4be:	460d      	mov	r5, r1
    f4c0:	f00b fa9f 	bl	1aa02 <WsfMsgAlloc>
    f4c4:	b1a0      	cbz	r0, f4f0 <DmAdvStop+0x38>
    f4c6:	2303      	movs	r3, #3
    f4c8:	7104      	strb	r4, [r0, #4]
    f4ca:	3405      	adds	r4, #5
    f4cc:	7083      	strb	r3, [r0, #2]
    f4ce:	1e69      	subs	r1, r5, #1
    f4d0:	1d43      	adds	r3, r0, #5
    f4d2:	4404      	add	r4, r0
    f4d4:	42a3      	cmp	r3, r4
    f4d6:	d106      	bne.n	f4e6 <DmAdvStop+0x2e>
    f4d8:	4b06      	ldr	r3, [pc, #24]	; (f4f4 <DmAdvStop+0x3c>)
    f4da:	4601      	mov	r1, r0
    f4dc:	7b18      	ldrb	r0, [r3, #12]
    f4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f4e2:	f00b bab2 	b.w	1aa4a <WsfMsgSend>
    f4e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    f4ea:	f803 2b01 	strb.w	r2, [r3], #1
    f4ee:	e7f1      	b.n	f4d4 <DmAdvStop+0x1c>
    f4f0:	bd38      	pop	{r3, r4, r5, pc}
    f4f2:	bf00      	nop
    f4f4:	100192f4 	.word	0x100192f4

0000f4f8 <DmAdvRemoveAdvSet>:
    f4f8:	b510      	push	{r4, lr}
    f4fa:	4604      	mov	r4, r0
    f4fc:	2006      	movs	r0, #6
    f4fe:	f00b fa80 	bl	1aa02 <WsfMsgAlloc>
    f502:	4601      	mov	r1, r0
    f504:	b140      	cbz	r0, f518 <DmAdvRemoveAdvSet+0x20>
    f506:	2304      	movs	r3, #4
    f508:	7083      	strb	r3, [r0, #2]
    f50a:	4b04      	ldr	r3, [pc, #16]	; (f51c <DmAdvRemoveAdvSet+0x24>)
    f50c:	7104      	strb	r4, [r0, #4]
    f50e:	7b18      	ldrb	r0, [r3, #12]
    f510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f514:	f00b ba99 	b.w	1aa4a <WsfMsgSend>
    f518:	bd10      	pop	{r4, pc}
    f51a:	bf00      	nop
    f51c:	100192f4 	.word	0x100192f4

0000f520 <DmAdvClearAdvSets>:
    f520:	b508      	push	{r3, lr}
    f522:	2004      	movs	r0, #4
    f524:	f00b fa6d 	bl	1aa02 <WsfMsgAlloc>
    f528:	4601      	mov	r1, r0
    f52a:	b138      	cbz	r0, f53c <DmAdvClearAdvSets+0x1c>
    f52c:	2305      	movs	r3, #5
    f52e:	7083      	strb	r3, [r0, #2]
    f530:	4b03      	ldr	r3, [pc, #12]	; (f540 <DmAdvClearAdvSets+0x20>)
    f532:	7b18      	ldrb	r0, [r3, #12]
    f534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f538:	f00b ba87 	b.w	1aa4a <WsfMsgSend>
    f53c:	bd08      	pop	{r3, pc}
    f53e:	bf00      	nop
    f540:	100192f4 	.word	0x100192f4

0000f544 <DmAdvSetInterval>:
    f544:	b570      	push	{r4, r5, r6, lr}
    f546:	4604      	mov	r4, r0
    f548:	460e      	mov	r6, r1
    f54a:	4615      	mov	r5, r2
    f54c:	f010 ff7a 	bl	20444 <WsfTaskLock>
    f550:	f104 0008 	add.w	r0, r4, #8
    f554:	4b04      	ldr	r3, [pc, #16]	; (f568 <DmAdvSetInterval+0x24>)
    f556:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f55a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f55e:	805d      	strh	r5, [r3, #2]
    f560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f564:	f010 bf74 	b.w	20450 <WsfTaskUnlock>
    f568:	10019144 	.word	0x10019144

0000f56c <DmAdvSetChannelMap>:
    f56c:	b538      	push	{r3, r4, r5, lr}
    f56e:	4605      	mov	r5, r0
    f570:	460c      	mov	r4, r1
    f572:	f010 ff67 	bl	20444 <WsfTaskLock>
    f576:	4803      	ldr	r0, [pc, #12]	; (f584 <DmAdvSetChannelMap+0x18>)
    f578:	4428      	add	r0, r5
    f57a:	7544      	strb	r4, [r0, #21]
    f57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f580:	f010 bf66 	b.w	20450 <WsfTaskUnlock>
    f584:	10019144 	.word	0x10019144

0000f588 <DmAdvSetAddrType>:
    f588:	b510      	push	{r4, lr}
    f58a:	4604      	mov	r4, r0
    f58c:	f010 ff5a 	bl	20444 <WsfTaskLock>
    f590:	4b02      	ldr	r3, [pc, #8]	; (f59c <DmAdvSetAddrType+0x14>)
    f592:	739c      	strb	r4, [r3, #14]
    f594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f598:	f010 bf5a 	b.w	20450 <WsfTaskUnlock>
    f59c:	100192f4 	.word	0x100192f4

0000f5a0 <DmAdvSetAdValue>:
    f5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5a4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f5a8:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    f5ac:	460c      	mov	r4, r1
    f5ae:	4691      	mov	r9, r2
    f5b0:	8819      	ldrh	r1, [r3, #0]
    f5b2:	4642      	mov	r2, r8
    f5b4:	4683      	mov	fp, r0
    f5b6:	461f      	mov	r7, r3
    f5b8:	f000 ff50 	bl	1045c <DmFindAdType>
    f5bc:	b1f8      	cbz	r0, f5fe <DmAdvSetAdValue+0x5e>
    f5be:	7805      	ldrb	r5, [r0, #0]
    f5c0:	1c66      	adds	r6, r4, #1
    f5c2:	42ae      	cmp	r6, r5
    f5c4:	d107      	bne.n	f5d6 <DmAdvSetAdValue+0x36>
    f5c6:	4622      	mov	r2, r4
    f5c8:	4649      	mov	r1, r9
    f5ca:	3002      	adds	r0, #2
    f5cc:	f7fc fdc8 	bl	c160 <memcpy>
    f5d0:	2001      	movs	r0, #1
    f5d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5d6:	f8b7 c000 	ldrh.w	ip, [r7]
    f5da:	b2ad      	uxth	r5, r5
    f5dc:	4466      	add	r6, ip
    f5de:	1b76      	subs	r6, r6, r5
    f5e0:	b2b6      	uxth	r6, r6
    f5e2:	4556      	cmp	r6, sl
    f5e4:	d80b      	bhi.n	f5fe <DmAdvSetAdValue+0x5e>
    f5e6:	3501      	adds	r5, #1
    f5e8:	1941      	adds	r1, r0, r5
    f5ea:	eba1 0208 	sub.w	r2, r1, r8
    f5ee:	b2d2      	uxtb	r2, r2
    f5f0:	ebac 0202 	sub.w	r2, ip, r2
    f5f4:	f7fc fe4e 	bl	c294 <memmove>
    f5f8:	883b      	ldrh	r3, [r7, #0]
    f5fa:	1b5d      	subs	r5, r3, r5
    f5fc:	803d      	strh	r5, [r7, #0]
    f5fe:	883b      	ldrh	r3, [r7, #0]
    f600:	191a      	adds	r2, r3, r4
    f602:	3201      	adds	r2, #1
    f604:	4552      	cmp	r2, sl
    f606:	da10      	bge.n	f62a <DmAdvSetAdValue+0x8a>
    f608:	eb08 0003 	add.w	r0, r8, r3
    f60c:	1c62      	adds	r2, r4, #1
    f60e:	f808 2003 	strb.w	r2, [r8, r3]
    f612:	4649      	mov	r1, r9
    f614:	f880 b001 	strb.w	fp, [r0, #1]
    f618:	4622      	mov	r2, r4
    f61a:	3002      	adds	r0, #2
    f61c:	f7fc fda0 	bl	c160 <memcpy>
    f620:	883b      	ldrh	r3, [r7, #0]
    f622:	3402      	adds	r4, #2
    f624:	441c      	add	r4, r3
    f626:	803c      	strh	r4, [r7, #0]
    f628:	e7d2      	b.n	f5d0 <DmAdvSetAdValue+0x30>
    f62a:	2000      	movs	r0, #0
    f62c:	e7d1      	b.n	f5d2 <DmAdvSetAdValue+0x32>

0000f62e <DmAdvSetName>:
    f62e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f632:	4614      	mov	r4, r2
    f634:	4606      	mov	r6, r0
    f636:	460f      	mov	r7, r1
    f638:	461a      	mov	r2, r3
    f63a:	8821      	ldrh	r1, [r4, #0]
    f63c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    f640:	2009      	movs	r0, #9
    f642:	4698      	mov	r8, r3
    f644:	f000 ff0a 	bl	1045c <DmFindAdType>
    f648:	b928      	cbnz	r0, f656 <DmAdvSetName+0x28>
    f64a:	4642      	mov	r2, r8
    f64c:	8821      	ldrh	r1, [r4, #0]
    f64e:	2008      	movs	r0, #8
    f650:	f000 ff04 	bl	1045c <DmFindAdType>
    f654:	b188      	cbz	r0, f67a <DmAdvSetName+0x4c>
    f656:	f890 9000 	ldrb.w	r9, [r0]
    f65a:	8822      	ldrh	r2, [r4, #0]
    f65c:	f109 0901 	add.w	r9, r9, #1
    f660:	eb00 0109 	add.w	r1, r0, r9
    f664:	eba1 0308 	sub.w	r3, r1, r8
    f668:	b2db      	uxtb	r3, r3
    f66a:	1ad2      	subs	r2, r2, r3
    f66c:	f7fc fe12 	bl	c294 <memmove>
    f670:	8823      	ldrh	r3, [r4, #0]
    f672:	eba3 0909 	sub.w	r9, r3, r9
    f676:	f8a4 9000 	strh.w	r9, [r4]
    f67a:	8822      	ldrh	r2, [r4, #0]
    f67c:	1e6b      	subs	r3, r5, #1
    f67e:	4293      	cmp	r3, r2
    f680:	dd1c      	ble.n	f6bc <DmAdvSetName+0x8e>
    f682:	18b3      	adds	r3, r6, r2
    f684:	3301      	adds	r3, #1
    f686:	429d      	cmp	r5, r3
    f688:	bfde      	ittt	le
    f68a:	3d02      	suble	r5, #2
    f68c:	1aad      	suble	r5, r5, r2
    f68e:	b2ee      	uxtble	r6, r5
    f690:	eb08 0002 	add.w	r0, r8, r2
    f694:	bfd4      	ite	le
    f696:	2308      	movle	r3, #8
    f698:	2309      	movgt	r3, #9
    f69a:	1c71      	adds	r1, r6, #1
    f69c:	f808 1002 	strb.w	r1, [r8, r2]
    f6a0:	3002      	adds	r0, #2
    f6a2:	f800 3c01 	strb.w	r3, [r0, #-1]
    f6a6:	4632      	mov	r2, r6
    f6a8:	4639      	mov	r1, r7
    f6aa:	f7fc fd59 	bl	c160 <memcpy>
    f6ae:	8825      	ldrh	r5, [r4, #0]
    f6b0:	3502      	adds	r5, #2
    f6b2:	4435      	add	r5, r6
    f6b4:	8025      	strh	r5, [r4, #0]
    f6b6:	2001      	movs	r0, #1
    f6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f6bc:	2000      	movs	r0, #0
    f6be:	e7fb      	b.n	f6b8 <DmAdvSetName+0x8a>

0000f6c0 <dmAdvActRemoveSet>:
    f6c0:	4770      	bx	lr

0000f6c2 <dmAdvMsgHandler>:
    f6c2:	7883      	ldrb	r3, [r0, #2]
    f6c4:	4a02      	ldr	r2, [pc, #8]	; (f6d0 <dmAdvMsgHandler+0xe>)
    f6c6:	f003 030f 	and.w	r3, r3, #15
    f6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6ce:	4718      	bx	r3
    f6d0:	0003ba84 	.word	0x0003ba84

0000f6d4 <dmAdvConfig>:
    f6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f6d8:	4e0e      	ldr	r6, [pc, #56]	; (f714 <dmAdvConfig+0x40>)
    f6da:	4c0f      	ldr	r4, [pc, #60]	; (f718 <dmAdvConfig+0x44>)
    f6dc:	4605      	mov	r5, r0
    f6de:	7bb0      	ldrb	r0, [r6, #14]
    f6e0:	8a27      	ldrh	r7, [r4, #16]
    f6e2:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    f6e6:	4689      	mov	r9, r1
    f6e8:	4692      	mov	sl, r2
    f6ea:	f000 fef1 	bl	104d0 <DmLlAddrType>
    f6ee:	7c73      	ldrb	r3, [r6, #17]
    f6f0:	9303      	str	r3, [sp, #12]
    f6f2:	7d63      	ldrb	r3, [r4, #21]
    f6f4:	f8cd 9000 	str.w	r9, [sp]
    f6f8:	e9cd a301 	strd	sl, r3, [sp, #4]
    f6fc:	462a      	mov	r2, r5
    f6fe:	4603      	mov	r3, r0
    f700:	4641      	mov	r1, r8
    f702:	4638      	mov	r0, r7
    f704:	f006 fbf8 	bl	15ef8 <HciLeSetAdvParamCmd>
    f708:	4b04      	ldr	r3, [pc, #16]	; (f71c <dmAdvConfig+0x48>)
    f70a:	701d      	strb	r5, [r3, #0]
    f70c:	b004      	add	sp, #16
    f70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f712:	bf00      	nop
    f714:	100192f4 	.word	0x100192f4
    f718:	10019144 	.word	0x10019144
    f71c:	10019160 	.word	0x10019160

0000f720 <dmAdvReset>:
    f720:	b507      	push	{r0, r1, r2, lr}
    f722:	4b0d      	ldr	r3, [pc, #52]	; (f758 <dmAdvReset+0x38>)
    f724:	7dda      	ldrb	r2, [r3, #23]
    f726:	2a05      	cmp	r2, #5
    f728:	d006      	beq.n	f738 <dmAdvReset+0x18>
    f72a:	2a01      	cmp	r2, #1
    f72c:	d10e      	bne.n	f74c <dmAdvReset+0x2c>
    f72e:	7d1b      	ldrb	r3, [r3, #20]
    f730:	2b01      	cmp	r3, #1
    f732:	d00b      	beq.n	f74c <dmAdvReset+0x2c>
    f734:	2b04      	cmp	r3, #4
    f736:	d009      	beq.n	f74c <dmAdvReset+0x2c>
    f738:	4807      	ldr	r0, [pc, #28]	; (f758 <dmAdvReset+0x38>)
    f73a:	f00b fb41 	bl	1adc0 <WsfTimerStop>
    f73e:	2322      	movs	r3, #34	; 0x22
    f740:	f8ad 3006 	strh.w	r3, [sp, #6]
    f744:	4b05      	ldr	r3, [pc, #20]	; (f75c <dmAdvReset+0x3c>)
    f746:	a801      	add	r0, sp, #4
    f748:	689b      	ldr	r3, [r3, #8]
    f74a:	4798      	blx	r3
    f74c:	f7ff fe48 	bl	f3e0 <dmAdvInit>
    f750:	b003      	add	sp, #12
    f752:	f85d fb04 	ldr.w	pc, [sp], #4
    f756:	bf00      	nop
    f758:	10019144 	.word	0x10019144
    f75c:	100192f4 	.word	0x100192f4

0000f760 <dmAdvActConfig>:
    f760:	4b06      	ldr	r3, [pc, #24]	; (f77c <dmAdvActConfig+0x1c>)
    f762:	7dda      	ldrb	r2, [r3, #23]
    f764:	b942      	cbnz	r2, f778 <dmAdvActConfig+0x18>
    f766:	7d1b      	ldrb	r3, [r3, #20]
    f768:	2b01      	cmp	r3, #1
    f76a:	d005      	beq.n	f778 <dmAdvActConfig+0x18>
    f76c:	2b04      	cmp	r3, #4
    f76e:	d003      	beq.n	f778 <dmAdvActConfig+0x18>
    f770:	1dc2      	adds	r2, r0, #7
    f772:	7981      	ldrb	r1, [r0, #6]
    f774:	7940      	ldrb	r0, [r0, #5]
    f776:	e7ad      	b.n	f6d4 <dmAdvConfig>
    f778:	4770      	bx	lr
    f77a:	bf00      	nop
    f77c:	10019144 	.word	0x10019144

0000f780 <dmAdvActSetData>:
    f780:	4a06      	ldr	r2, [pc, #24]	; (f79c <dmAdvActSetData+0x1c>)
    f782:	7dd2      	ldrb	r2, [r2, #23]
    f784:	4603      	mov	r3, r0
    f786:	b93a      	cbnz	r2, f798 <dmAdvActSetData+0x18>
    f788:	6899      	ldr	r1, [r3, #8]
    f78a:	799b      	ldrb	r3, [r3, #6]
    f78c:	79c0      	ldrb	r0, [r0, #7]
    f78e:	b90b      	cbnz	r3, f794 <dmAdvActSetData+0x14>
    f790:	f006 bb82 	b.w	15e98 <HciLeSetAdvDataCmd>
    f794:	f006 bc53 	b.w	1603e <HciLeSetScanRespDataCmd>
    f798:	4770      	bx	lr
    f79a:	bf00      	nop
    f79c:	10019144 	.word	0x10019144

0000f7a0 <dmAdvActStart>:
    f7a0:	4b07      	ldr	r3, [pc, #28]	; (f7c0 <dmAdvActStart+0x20>)
    f7a2:	7dda      	ldrb	r2, [r3, #23]
    f7a4:	b95a      	cbnz	r2, f7be <dmAdvActStart+0x1e>
    f7a6:	7d1a      	ldrb	r2, [r3, #20]
    f7a8:	2a01      	cmp	r2, #1
    f7aa:	d008      	beq.n	f7be <dmAdvActStart+0x1e>
    f7ac:	2a04      	cmp	r2, #4
    f7ae:	d006      	beq.n	f7be <dmAdvActStart+0x1e>
    f7b0:	2203      	movs	r2, #3
    f7b2:	75da      	strb	r2, [r3, #23]
    f7b4:	88c2      	ldrh	r2, [r0, #6]
    f7b6:	831a      	strh	r2, [r3, #24]
    f7b8:	2001      	movs	r0, #1
    f7ba:	f006 bb50 	b.w	15e5e <HciLeSetAdvEnableCmd>
    f7be:	4770      	bx	lr
    f7c0:	10019144 	.word	0x10019144

0000f7c4 <dmAdvActStop>:
    f7c4:	4b07      	ldr	r3, [pc, #28]	; (f7e4 <dmAdvActStop+0x20>)
    f7c6:	7dda      	ldrb	r2, [r3, #23]
    f7c8:	2a01      	cmp	r2, #1
    f7ca:	d109      	bne.n	f7e0 <dmAdvActStop+0x1c>
    f7cc:	7d1a      	ldrb	r2, [r3, #20]
    f7ce:	2a01      	cmp	r2, #1
    f7d0:	d006      	beq.n	f7e0 <dmAdvActStop+0x1c>
    f7d2:	2a04      	cmp	r2, #4
    f7d4:	d004      	beq.n	f7e0 <dmAdvActStop+0x1c>
    f7d6:	2205      	movs	r2, #5
    f7d8:	2000      	movs	r0, #0
    f7da:	75da      	strb	r2, [r3, #23]
    f7dc:	f006 bb3f 	b.w	15e5e <HciLeSetAdvEnableCmd>
    f7e0:	4770      	bx	lr
    f7e2:	bf00      	nop
    f7e4:	10019144 	.word	0x10019144

0000f7e8 <dmAdvActTimeout>:
    f7e8:	f7ff bfec 	b.w	f7c4 <dmAdvActStop>

0000f7ec <dmAdvHciHandler>:
    f7ec:	7883      	ldrb	r3, [r0, #2]
    f7ee:	2b35      	cmp	r3, #53	; 0x35
    f7f0:	b570      	push	{r4, r5, r6, lr}
    f7f2:	4605      	mov	r5, r0
    f7f4:	d144      	bne.n	f880 <dmAdvHciHandler+0x94>
    f7f6:	4c23      	ldr	r4, [pc, #140]	; (f884 <dmAdvHciHandler+0x98>)
    f7f8:	7de3      	ldrb	r3, [r4, #23]
    f7fa:	2b03      	cmp	r3, #3
    f7fc:	d01d      	beq.n	f83a <dmAdvHciHandler+0x4e>
    f7fe:	2b05      	cmp	r3, #5
    f800:	d138      	bne.n	f874 <dmAdvHciHandler+0x88>
    f802:	2622      	movs	r6, #34	; 0x22
    f804:	78ea      	ldrb	r2, [r5, #3]
    f806:	2a00      	cmp	r2, #0
    f808:	d12e      	bne.n	f868 <dmAdvHciHandler+0x7c>
    f80a:	2b05      	cmp	r3, #5
    f80c:	d109      	bne.n	f822 <dmAdvHciHandler+0x36>
    f80e:	481d      	ldr	r0, [pc, #116]	; (f884 <dmAdvHciHandler+0x98>)
    f810:	f00b fad6 	bl	1adc0 <WsfTimerStop>
    f814:	2315      	movs	r3, #21
    f816:	70ab      	strb	r3, [r5, #2]
    f818:	4b1b      	ldr	r3, [pc, #108]	; (f888 <dmAdvHciHandler+0x9c>)
    f81a:	685b      	ldr	r3, [r3, #4]
    f81c:	4628      	mov	r0, r5
    f81e:	689b      	ldr	r3, [r3, #8]
    f820:	4798      	blx	r3
    f822:	23ff      	movs	r3, #255	; 0xff
    f824:	7523      	strb	r3, [r4, #20]
    f826:	2300      	movs	r3, #0
    f828:	75e3      	strb	r3, [r4, #23]
    f82a:	b34e      	cbz	r6, f880 <dmAdvHciHandler+0x94>
    f82c:	4b17      	ldr	r3, [pc, #92]	; (f88c <dmAdvHciHandler+0xa0>)
    f82e:	70ae      	strb	r6, [r5, #2]
    f830:	4628      	mov	r0, r5
    f832:	689b      	ldr	r3, [r3, #8]
    f834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f838:	4718      	bx	r3
    f83a:	2621      	movs	r6, #33	; 0x21
    f83c:	78ea      	ldrb	r2, [r5, #3]
    f83e:	2a00      	cmp	r2, #0
    f840:	d1f1      	bne.n	f826 <dmAdvHciHandler+0x3a>
    f842:	2b03      	cmp	r3, #3
    f844:	d10d      	bne.n	f862 <dmAdvHciHandler+0x76>
    f846:	8b21      	ldrh	r1, [r4, #24]
    f848:	b121      	cbz	r1, f854 <dmAdvHciHandler+0x68>
    f84a:	2306      	movs	r3, #6
    f84c:	480d      	ldr	r0, [pc, #52]	; (f884 <dmAdvHciHandler+0x98>)
    f84e:	7323      	strb	r3, [r4, #12]
    f850:	f00b faa2 	bl	1ad98 <WsfTimerStartMs>
    f854:	2314      	movs	r3, #20
    f856:	70ab      	strb	r3, [r5, #2]
    f858:	4b0b      	ldr	r3, [pc, #44]	; (f888 <dmAdvHciHandler+0x9c>)
    f85a:	685b      	ldr	r3, [r3, #4]
    f85c:	4628      	mov	r0, r5
    f85e:	689b      	ldr	r3, [r3, #8]
    f860:	4798      	blx	r3
    f862:	4b0b      	ldr	r3, [pc, #44]	; (f890 <dmAdvHciHandler+0xa4>)
    f864:	781b      	ldrb	r3, [r3, #0]
    f866:	7523      	strb	r3, [r4, #20]
    f868:	2301      	movs	r3, #1
    f86a:	e7dd      	b.n	f828 <dmAdvHciHandler+0x3c>
    f86c:	2600      	movs	r6, #0
    f86e:	e7e5      	b.n	f83c <dmAdvHciHandler+0x50>
    f870:	2600      	movs	r6, #0
    f872:	e7c7      	b.n	f804 <dmAdvHciHandler+0x18>
    f874:	2b02      	cmp	r3, #2
    f876:	d303      	bcc.n	f880 <dmAdvHciHandler+0x94>
    f878:	2b03      	cmp	r3, #3
    f87a:	d9f7      	bls.n	f86c <dmAdvHciHandler+0x80>
    f87c:	2b04      	cmp	r3, #4
    f87e:	d0f7      	beq.n	f870 <dmAdvHciHandler+0x84>
    f880:	bd70      	pop	{r4, r5, r6, pc}
    f882:	bf00      	nop
    f884:	10019144 	.word	0x10019144
    f888:	10002f84 	.word	0x10002f84
    f88c:	100192f4 	.word	0x100192f4
    f890:	10019160 	.word	0x10019160

0000f894 <dmAdvActClearSets>:
    f894:	4770      	bx	lr

0000f896 <dmAdvStartDirected>:
    f896:	b510      	push	{r4, lr}
    f898:	4c08      	ldr	r4, [pc, #32]	; (f8bc <dmAdvStartDirected+0x26>)
    f89a:	9a03      	ldr	r2, [sp, #12]
    f89c:	7de3      	ldrb	r3, [r4, #23]
    f89e:	4608      	mov	r0, r1
    f8a0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f8a4:	b943      	cbnz	r3, f8b8 <dmAdvStartDirected+0x22>
    f8a6:	f7ff ff15 	bl	f6d4 <dmAdvConfig>
    f8aa:	2302      	movs	r3, #2
    f8ac:	75e3      	strb	r3, [r4, #23]
    f8ae:	2001      	movs	r0, #1
    f8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8b4:	f006 bad3 	b.w	15e5e <HciLeSetAdvEnableCmd>
    f8b8:	bd10      	pop	{r4, pc}
    f8ba:	bf00      	nop
    f8bc:	10019144 	.word	0x10019144

0000f8c0 <dmAdvStopDirected>:
    f8c0:	4b04      	ldr	r3, [pc, #16]	; (f8d4 <dmAdvStopDirected+0x14>)
    f8c2:	7dda      	ldrb	r2, [r3, #23]
    f8c4:	2a01      	cmp	r2, #1
    f8c6:	d104      	bne.n	f8d2 <dmAdvStopDirected+0x12>
    f8c8:	2204      	movs	r2, #4
    f8ca:	2000      	movs	r0, #0
    f8cc:	75da      	strb	r2, [r3, #23]
    f8ce:	f006 bac6 	b.w	15e5e <HciLeSetAdvEnableCmd>
    f8d2:	4770      	bx	lr
    f8d4:	10019144 	.word	0x10019144

0000f8d8 <dmAdvConnected>:
    f8d8:	b510      	push	{r4, lr}
    f8da:	4c04      	ldr	r4, [pc, #16]	; (f8ec <dmAdvConnected+0x14>)
    f8dc:	4620      	mov	r0, r4
    f8de:	f00b fa6f 	bl	1adc0 <WsfTimerStop>
    f8e2:	23ff      	movs	r3, #255	; 0xff
    f8e4:	7523      	strb	r3, [r4, #20]
    f8e6:	2300      	movs	r3, #0
    f8e8:	75e3      	strb	r3, [r4, #23]
    f8ea:	bd10      	pop	{r4, pc}
    f8ec:	10019144 	.word	0x10019144

0000f8f0 <dmAdvConnectFailed>:
    f8f0:	f7ff bff2 	b.w	f8d8 <dmAdvConnected>

0000f8f4 <DmAdvInit>:
    f8f4:	b508      	push	{r3, lr}
    f8f6:	f010 fda5 	bl	20444 <WsfTaskLock>
    f8fa:	4b04      	ldr	r3, [pc, #16]	; (f90c <DmAdvInit+0x18>)
    f8fc:	4a04      	ldr	r2, [pc, #16]	; (f910 <DmAdvInit+0x1c>)
    f8fe:	601a      	str	r2, [r3, #0]
    f900:	f7ff fd6e 	bl	f3e0 <dmAdvInit>
    f904:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f908:	f010 bda2 	b.w	20450 <WsfTaskUnlock>
    f90c:	10002f84 	.word	0x10002f84
    f910:	0003baa0 	.word	0x0003baa0

0000f914 <DmAdvModeLeg>:
    f914:	4b03      	ldr	r3, [pc, #12]	; (f924 <DmAdvModeLeg+0x10>)
    f916:	6818      	ldr	r0, [r3, #0]
    f918:	4b03      	ldr	r3, [pc, #12]	; (f928 <DmAdvModeLeg+0x14>)
    f91a:	1ac3      	subs	r3, r0, r3
    f91c:	4258      	negs	r0, r3
    f91e:	4158      	adcs	r0, r3
    f920:	4770      	bx	lr
    f922:	bf00      	nop
    f924:	10002f84 	.word	0x10002f84
    f928:	0003baa0 	.word	0x0003baa0

0000f92c <dmConnSmActNone>:
    f92c:	4770      	bx	lr

0000f92e <dmConnSmActHciUpdated>:
    f92e:	2329      	movs	r3, #41	; 0x29
    f930:	708b      	strb	r3, [r1, #2]
    f932:	4b02      	ldr	r3, [pc, #8]	; (f93c <dmConnSmActHciUpdated+0xe>)
    f934:	4608      	mov	r0, r1
    f936:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f93a:	4718      	bx	r3
    f93c:	10019164 	.word	0x10019164

0000f940 <dmConnSmActClose>:
    f940:	7909      	ldrb	r1, [r1, #4]
    f942:	8980      	ldrh	r0, [r0, #12]
    f944:	f005 bf04 	b.w	15750 <HciDisconnectCmd>

0000f948 <dmConnReset>:
    f948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f94a:	2339      	movs	r3, #57	; 0x39
    f94c:	4d14      	ldr	r5, [pc, #80]	; (f9a0 <dmConnReset+0x58>)
    f94e:	f8ad 3006 	strh.w	r3, [sp, #6]
    f952:	2400      	movs	r4, #0
    f954:	2316      	movs	r3, #22
    f956:	f88d 4008 	strb.w	r4, [sp, #8]
    f95a:	f88d 300c 	strb.w	r3, [sp, #12]
    f95e:	462e      	mov	r6, r5
    f960:	1928      	adds	r0, r5, r4
    f962:	7d83      	ldrb	r3, [r0, #22]
    f964:	b13b      	cbz	r3, f976 <dmConnReset+0x2e>
    f966:	7c03      	ldrb	r3, [r0, #16]
    f968:	f8ad 300a 	strh.w	r3, [sp, #10]
    f96c:	a901      	add	r1, sp, #4
    f96e:	f8ad 3004 	strh.w	r3, [sp, #4]
    f972:	f000 fca1 	bl	102b8 <dmConnSmExecute>
    f976:	342c      	adds	r4, #44	; 0x2c
    f978:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f97c:	d1f0      	bne.n	f960 <dmConnReset+0x18>
    f97e:	4a09      	ldr	r2, [pc, #36]	; (f9a4 <dmConnReset+0x5c>)
    f980:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f984:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f988:	6810      	ldr	r0, [r2, #0]
    f98a:	6851      	ldr	r1, [r2, #4]
    f98c:	4b06      	ldr	r3, [pc, #24]	; (f9a8 <dmConnReset+0x60>)
    f98e:	c303      	stmia	r3!, {r0, r1}
    f990:	6890      	ldr	r0, [r2, #8]
    f992:	6018      	str	r0, [r3, #0]
    f994:	4b05      	ldr	r3, [pc, #20]	; (f9ac <dmConnReset+0x64>)
    f996:	2200      	movs	r2, #0
    f998:	74da      	strb	r2, [r3, #19]
    f99a:	735a      	strb	r2, [r3, #13]
    f99c:	b004      	add	sp, #16
    f99e:	bd70      	pop	{r4, r5, r6, pc}
    f9a0:	10019164 	.word	0x10019164
    f9a4:	0003baac 	.word	0x0003baac
    f9a8:	100192d8 	.word	0x100192d8
    f9ac:	100192f4 	.word	0x100192f4

0000f9b0 <dmConnSetConnSpec>:
    f9b0:	b538      	push	{r3, r4, r5, lr}
    f9b2:	4605      	mov	r5, r0
    f9b4:	460c      	mov	r4, r1
    f9b6:	f010 fd45 	bl	20444 <WsfTaskLock>
    f9ba:	4628      	mov	r0, r5
    f9bc:	f000 fdc4 	bl	10548 <DmInitPhyToIdx>
    f9c0:	4a07      	ldr	r2, [pc, #28]	; (f9e0 <dmConnSetConnSpec+0x30>)
    f9c2:	6861      	ldr	r1, [r4, #4]
    f9c4:	230c      	movs	r3, #12
    f9c6:	fb03 2300 	mla	r3, r3, r0, r2
    f9ca:	6820      	ldr	r0, [r4, #0]
    f9cc:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f9d0:	c303      	stmia	r3!, {r0, r1}
    f9d2:	68a0      	ldr	r0, [r4, #8]
    f9d4:	6018      	str	r0, [r3, #0]
    f9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f9da:	f010 bd39 	b.w	20450 <WsfTaskUnlock>
    f9de:	bf00      	nop
    f9e0:	10019164 	.word	0x10019164

0000f9e4 <dmConnCcbAlloc>:
    f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9e6:	4c0f      	ldr	r4, [pc, #60]	; (fa24 <dmConnCcbAlloc+0x40>)
    f9e8:	4607      	mov	r7, r0
    f9ea:	2500      	movs	r5, #0
    f9ec:	7da6      	ldrb	r6, [r4, #22]
    f9ee:	3501      	adds	r5, #1
    f9f0:	b2ed      	uxtb	r5, r5
    f9f2:	b98e      	cbnz	r6, fa18 <dmConnCcbAlloc+0x34>
    f9f4:	222c      	movs	r2, #44	; 0x2c
    f9f6:	4631      	mov	r1, r6
    f9f8:	4620      	mov	r0, r4
    f9fa:	f7fc fcaf 	bl	c35c <memset>
    f9fe:	4639      	mov	r1, r7
    fa00:	4620      	mov	r0, r4
    fa02:	f010 f926 	bl	1fc52 <BdaCpy>
    fa06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fa0a:	81a3      	strh	r3, [r4, #12]
    fa0c:	2301      	movs	r3, #1
    fa0e:	7425      	strb	r5, [r4, #16]
    fa10:	7466      	strb	r6, [r4, #17]
    fa12:	75a3      	strb	r3, [r4, #22]
    fa14:	4620      	mov	r0, r4
    fa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa18:	2d08      	cmp	r5, #8
    fa1a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    fa1e:	d1e5      	bne.n	f9ec <dmConnCcbAlloc+0x8>
    fa20:	2400      	movs	r4, #0
    fa22:	e7f7      	b.n	fa14 <dmConnCcbAlloc+0x30>
    fa24:	10019164 	.word	0x10019164

0000fa28 <dmConnCcbDealloc>:
    fa28:	2300      	movs	r3, #0
    fa2a:	7583      	strb	r3, [r0, #22]
    fa2c:	4770      	bx	lr

0000fa2e <dmConnCcbByHandle>:
    fa2e:	b510      	push	{r4, lr}
    fa30:	4907      	ldr	r1, [pc, #28]	; (fa50 <dmConnCcbByHandle+0x22>)
    fa32:	2200      	movs	r2, #0
    fa34:	188b      	adds	r3, r1, r2
    fa36:	7d9c      	ldrb	r4, [r3, #22]
    fa38:	b114      	cbz	r4, fa40 <dmConnCcbByHandle+0x12>
    fa3a:	899c      	ldrh	r4, [r3, #12]
    fa3c:	4284      	cmp	r4, r0
    fa3e:	d004      	beq.n	fa4a <dmConnCcbByHandle+0x1c>
    fa40:	322c      	adds	r2, #44	; 0x2c
    fa42:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    fa46:	d1f5      	bne.n	fa34 <dmConnCcbByHandle+0x6>
    fa48:	2300      	movs	r3, #0
    fa4a:	4618      	mov	r0, r3
    fa4c:	bd10      	pop	{r4, pc}
    fa4e:	bf00      	nop
    fa50:	10019164 	.word	0x10019164

0000fa54 <dmConn2HciHandler>:
    fa54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fa56:	4604      	mov	r4, r0
    fa58:	8800      	ldrh	r0, [r0, #0]
    fa5a:	f7ff ffe8 	bl	fa2e <dmConnCcbByHandle>
    fa5e:	b138      	cbz	r0, fa70 <dmConn2HciHandler+0x1c>
    fa60:	78a3      	ldrb	r3, [r4, #2]
    fa62:	2b23      	cmp	r3, #35	; 0x23
    fa64:	d02a      	beq.n	fabc <dmConn2HciHandler+0x68>
    fa66:	d805      	bhi.n	fa74 <dmConn2HciHandler+0x20>
    fa68:	2b07      	cmp	r3, #7
    fa6a:	d00f      	beq.n	fa8c <dmConn2HciHandler+0x38>
    fa6c:	2b0b      	cmp	r3, #11
    fa6e:	d052      	beq.n	fb16 <dmConn2HciHandler+0xc2>
    fa70:	b004      	add	sp, #16
    fa72:	bd10      	pop	{r4, pc}
    fa74:	2b27      	cmp	r3, #39	; 0x27
    fa76:	d037      	beq.n	fae8 <dmConn2HciHandler+0x94>
    fa78:	2b28      	cmp	r3, #40	; 0x28
    fa7a:	d042      	beq.n	fb02 <dmConn2HciHandler+0xae>
    fa7c:	2b24      	cmp	r3, #36	; 0x24
    fa7e:	d1f7      	bne.n	fa70 <dmConn2HciHandler+0x1c>
    fa80:	7c02      	ldrb	r2, [r0, #16]
    fa82:	8983      	ldrh	r3, [r0, #12]
    fa84:	f8ad 2000 	strh.w	r2, [sp]
    fa88:	2240      	movs	r2, #64	; 0x40
    fa8a:	e01c      	b.n	fac6 <dmConn2HciHandler+0x72>
    fa8c:	8981      	ldrh	r1, [r0, #12]
    fa8e:	7923      	ldrb	r3, [r4, #4]
    fa90:	7c00      	ldrb	r0, [r0, #16]
    fa92:	f994 2008 	ldrsb.w	r2, [r4, #8]
    fa96:	f8ad 0000 	strh.w	r0, [sp]
    fa9a:	2438      	movs	r4, #56	; 0x38
    fa9c:	f88d 4002 	strb.w	r4, [sp, #2]
    faa0:	f88d 3003 	strb.w	r3, [sp, #3]
    faa4:	f88d 3004 	strb.w	r3, [sp, #4]
    faa8:	f8ad 1006 	strh.w	r1, [sp, #6]
    faac:	f88d 2008 	strb.w	r2, [sp, #8]
    fab0:	4b26      	ldr	r3, [pc, #152]	; (fb4c <dmConn2HciHandler+0xf8>)
    fab2:	4668      	mov	r0, sp
    fab4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    fab8:	4798      	blx	r3
    faba:	e7d9      	b.n	fa70 <dmConn2HciHandler+0x1c>
    fabc:	7c02      	ldrb	r2, [r0, #16]
    fabe:	8983      	ldrh	r3, [r0, #12]
    fac0:	f8ad 2000 	strh.w	r2, [sp]
    fac4:	223f      	movs	r2, #63	; 0x3f
    fac6:	f8ad 2002 	strh.w	r2, [sp, #2]
    faca:	f8ad 3004 	strh.w	r3, [sp, #4]
    face:	88e3      	ldrh	r3, [r4, #6]
    fad0:	f8ad 3006 	strh.w	r3, [sp, #6]
    fad4:	8923      	ldrh	r3, [r4, #8]
    fad6:	f8ad 3008 	strh.w	r3, [sp, #8]
    fada:	8963      	ldrh	r3, [r4, #10]
    fadc:	f8ad 300a 	strh.w	r3, [sp, #10]
    fae0:	89a3      	ldrh	r3, [r4, #12]
    fae2:	f8ad 300c 	strh.w	r3, [sp, #12]
    fae6:	e7e3      	b.n	fab0 <dmConn2HciHandler+0x5c>
    fae8:	7c01      	ldrb	r1, [r0, #16]
    faea:	7923      	ldrb	r3, [r4, #4]
    faec:	88e2      	ldrh	r2, [r4, #6]
    faee:	f8ad 1000 	strh.w	r1, [sp]
    faf2:	2141      	movs	r1, #65	; 0x41
    faf4:	f8ad 1002 	strh.w	r1, [sp, #2]
    faf8:	f8ad 2006 	strh.w	r2, [sp, #6]
    fafc:	f88d 3004 	strb.w	r3, [sp, #4]
    fb00:	e7d6      	b.n	fab0 <dmConn2HciHandler+0x5c>
    fb02:	7c02      	ldrb	r2, [r0, #16]
    fb04:	88a3      	ldrh	r3, [r4, #4]
    fb06:	f8ad 2000 	strh.w	r2, [sp]
    fb0a:	2242      	movs	r2, #66	; 0x42
    fb0c:	f8ad 2002 	strh.w	r2, [sp, #2]
    fb10:	f8ad 3004 	strh.w	r3, [sp, #4]
    fb14:	e7cc      	b.n	fab0 <dmConn2HciHandler+0x5c>
    fb16:	7a62      	ldrb	r2, [r4, #9]
    fb18:	7a23      	ldrb	r3, [r4, #8]
    fb1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    fb1e:	7aa2      	ldrb	r2, [r4, #10]
    fb20:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    fb24:	6283      	str	r3, [r0, #40]	; 0x28
    fb26:	7c03      	ldrb	r3, [r0, #16]
    fb28:	f8ad 3000 	strh.w	r3, [sp]
    fb2c:	2351      	movs	r3, #81	; 0x51
    fb2e:	f8ad 3002 	strh.w	r3, [sp, #2]
    fb32:	7923      	ldrb	r3, [r4, #4]
    fb34:	f88d 3004 	strb.w	r3, [sp, #4]
    fb38:	88e3      	ldrh	r3, [r4, #6]
    fb3a:	f854 0f08 	ldr.w	r0, [r4, #8]!
    fb3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    fb42:	6861      	ldr	r1, [r4, #4]
    fb44:	ab02      	add	r3, sp, #8
    fb46:	c303      	stmia	r3!, {r0, r1}
    fb48:	e7b2      	b.n	fab0 <dmConn2HciHandler+0x5c>
    fb4a:	bf00      	nop
    fb4c:	10019164 	.word	0x10019164

0000fb50 <dmConnCcbByBdAddr>:
    fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb52:	4f0a      	ldr	r7, [pc, #40]	; (fb7c <dmConnCcbByBdAddr+0x2c>)
    fb54:	4606      	mov	r6, r0
    fb56:	2500      	movs	r5, #0
    fb58:	197c      	adds	r4, r7, r5
    fb5a:	7da3      	ldrb	r3, [r4, #22]
    fb5c:	b933      	cbnz	r3, fb6c <dmConnCcbByBdAddr+0x1c>
    fb5e:	352c      	adds	r5, #44	; 0x2c
    fb60:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    fb64:	d1f8      	bne.n	fb58 <dmConnCcbByBdAddr+0x8>
    fb66:	2400      	movs	r4, #0
    fb68:	4620      	mov	r0, r4
    fb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb6c:	4631      	mov	r1, r6
    fb6e:	4620      	mov	r0, r4
    fb70:	f010 f87d 	bl	1fc6e <BdaCmp>
    fb74:	2800      	cmp	r0, #0
    fb76:	d0f2      	beq.n	fb5e <dmConnCcbByBdAddr+0xe>
    fb78:	e7f6      	b.n	fb68 <dmConnCcbByBdAddr+0x18>
    fb7a:	bf00      	nop
    fb7c:	10019164 	.word	0x10019164

0000fb80 <dmConnHciHandler>:
    fb80:	b538      	push	{r3, r4, r5, lr}
    fb82:	7884      	ldrb	r4, [r0, #2]
    fb84:	1e63      	subs	r3, r4, #1
    fb86:	2b01      	cmp	r3, #1
    fb88:	4605      	mov	r5, r0
    fb8a:	d82d      	bhi.n	fbe8 <dmConnHciHandler+0x68>
    fb8c:	f100 040a 	add.w	r4, r0, #10
    fb90:	4620      	mov	r0, r4
    fb92:	f7ff ffdd 	bl	fb50 <dmConnCcbByBdAddr>
    fb96:	b9c8      	cbnz	r0, fbcc <dmConnHciHandler+0x4c>
    fb98:	4817      	ldr	r0, [pc, #92]	; (fbf8 <dmConnHciHandler+0x78>)
    fb9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    fb9e:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    fba2:	7d83      	ldrb	r3, [r0, #22]
    fba4:	b13b      	cbz	r3, fbb6 <dmConnHciHandler+0x36>
    fba6:	7d43      	ldrb	r3, [r0, #21]
    fba8:	2b02      	cmp	r3, #2
    fbaa:	d00f      	beq.n	fbcc <dmConnHciHandler+0x4c>
    fbac:	2b04      	cmp	r3, #4
    fbae:	d102      	bne.n	fbb6 <dmConnHciHandler+0x36>
    fbb0:	8983      	ldrh	r3, [r0, #12]
    fbb2:	428b      	cmp	r3, r1
    fbb4:	d00a      	beq.n	fbcc <dmConnHciHandler+0x4c>
    fbb6:	302c      	adds	r0, #44	; 0x2c
    fbb8:	4290      	cmp	r0, r2
    fbba:	d1f2      	bne.n	fba2 <dmConnHciHandler+0x22>
    fbbc:	7a2b      	ldrb	r3, [r5, #8]
    fbbe:	2b01      	cmp	r3, #1
    fbc0:	d001      	beq.n	fbc6 <dmConnHciHandler+0x46>
    fbc2:	2000      	movs	r0, #0
    fbc4:	e002      	b.n	fbcc <dmConnHciHandler+0x4c>
    fbc6:	4620      	mov	r0, r4
    fbc8:	f7ff ff0c 	bl	f9e4 <dmConnCcbAlloc>
    fbcc:	78eb      	ldrb	r3, [r5, #3]
    fbce:	b94b      	cbnz	r3, fbe4 <dmConnHciHandler+0x64>
    fbd0:	2338      	movs	r3, #56	; 0x38
    fbd2:	70ab      	strb	r3, [r5, #2]
    fbd4:	b170      	cbz	r0, fbf4 <dmConnHciHandler+0x74>
    fbd6:	7c03      	ldrb	r3, [r0, #16]
    fbd8:	802b      	strh	r3, [r5, #0]
    fbda:	4629      	mov	r1, r5
    fbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fbe0:	f000 bb6a 	b.w	102b8 <dmConnSmExecute>
    fbe4:	2337      	movs	r3, #55	; 0x37
    fbe6:	e7f4      	b.n	fbd2 <dmConnHciHandler+0x52>
    fbe8:	8800      	ldrh	r0, [r0, #0]
    fbea:	3436      	adds	r4, #54	; 0x36
    fbec:	f7ff ff1f 	bl	fa2e <dmConnCcbByHandle>
    fbf0:	70ac      	strb	r4, [r5, #2]
    fbf2:	e7ef      	b.n	fbd4 <dmConnHciHandler+0x54>
    fbf4:	bd38      	pop	{r3, r4, r5, pc}
    fbf6:	bf00      	nop
    fbf8:	10019164 	.word	0x10019164

0000fbfc <dmConnCcbById>:
    fbfc:	3801      	subs	r0, #1
    fbfe:	4a05      	ldr	r2, [pc, #20]	; (fc14 <dmConnCcbById+0x18>)
    fc00:	b2c3      	uxtb	r3, r0
    fc02:	212c      	movs	r1, #44	; 0x2c
    fc04:	fb01 2003 	mla	r0, r1, r3, r2
    fc08:	7d80      	ldrb	r0, [r0, #22]
    fc0a:	b108      	cbz	r0, fc10 <dmConnCcbById+0x14>
    fc0c:	fb03 2001 	mla	r0, r3, r1, r2
    fc10:	4770      	bx	lr
    fc12:	bf00      	nop
    fc14:	10019164 	.word	0x10019164

0000fc18 <dmConnMsgHandler>:
    fc18:	b510      	push	{r4, lr}
    fc1a:	4604      	mov	r4, r0
    fc1c:	7800      	ldrb	r0, [r0, #0]
    fc1e:	f7ff ffed 	bl	fbfc <dmConnCcbById>
    fc22:	b120      	cbz	r0, fc2e <dmConnMsgHandler+0x16>
    fc24:	4621      	mov	r1, r4
    fc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc2a:	f000 bb45 	b.w	102b8 <dmConnSmExecute>
    fc2e:	bd10      	pop	{r4, pc}

0000fc30 <dmConn2MsgHandler>:
    fc30:	b530      	push	{r4, r5, lr}
    fc32:	4604      	mov	r4, r0
    fc34:	b085      	sub	sp, #20
    fc36:	7800      	ldrb	r0, [r0, #0]
    fc38:	f7ff ffe0 	bl	fbfc <dmConnCcbById>
    fc3c:	b1d0      	cbz	r0, fc74 <dmConn2MsgHandler+0x44>
    fc3e:	78a3      	ldrb	r3, [r4, #2]
    fc40:	3b41      	subs	r3, #65	; 0x41
    fc42:	2b04      	cmp	r3, #4
    fc44:	d816      	bhi.n	fc74 <dmConn2MsgHandler+0x44>
    fc46:	e8df f003 	tbb	[pc, r3]
    fc4a:	0903      	.short	0x0903
    fc4c:	1e17      	.short	0x1e17
    fc4e:	26          	.byte	0x26
    fc4f:	00          	.byte	0x00
    fc50:	8980      	ldrh	r0, [r0, #12]
    fc52:	b005      	add	sp, #20
    fc54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    fc58:	f006 ba8c 	b.w	16174 <HciReadRssiCmd>
    fc5c:	89e5      	ldrh	r5, [r4, #14]
    fc5e:	8923      	ldrh	r3, [r4, #8]
    fc60:	88e2      	ldrh	r2, [r4, #6]
    fc62:	88a1      	ldrh	r1, [r4, #4]
    fc64:	8980      	ldrh	r0, [r0, #12]
    fc66:	9502      	str	r5, [sp, #8]
    fc68:	89a5      	ldrh	r5, [r4, #12]
    fc6a:	9501      	str	r5, [sp, #4]
    fc6c:	8964      	ldrh	r4, [r4, #10]
    fc6e:	9400      	str	r4, [sp, #0]
    fc70:	f005 fe5b 	bl	1592a <HciLeRemoteConnParamReqReply>
    fc74:	b005      	add	sp, #20
    fc76:	bd30      	pop	{r4, r5, pc}
    fc78:	7921      	ldrb	r1, [r4, #4]
    fc7a:	8980      	ldrh	r0, [r0, #12]
    fc7c:	b005      	add	sp, #20
    fc7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    fc82:	f005 bed6 	b.w	15a32 <HciLeRemoteConnParamReqNegReply>
    fc86:	88e2      	ldrh	r2, [r4, #6]
    fc88:	88a1      	ldrh	r1, [r4, #4]
    fc8a:	8980      	ldrh	r0, [r0, #12]
    fc8c:	b005      	add	sp, #20
    fc8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    fc92:	f005 befc 	b.w	15a8e <HciLeSetDataLen>
    fc96:	88a1      	ldrh	r1, [r4, #4]
    fc98:	8980      	ldrh	r0, [r0, #12]
    fc9a:	b005      	add	sp, #20
    fc9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    fca0:	f006 baf8 	b.w	16294 <HciWriteAuthPayloadTimeout>

0000fca4 <dmConnExecCback>:
    fca4:	b570      	push	{r4, r5, r6, lr}
    fca6:	4e06      	ldr	r6, [pc, #24]	; (fcc0 <dmConnExecCback+0x1c>)
    fca8:	4605      	mov	r5, r0
    fcaa:	2400      	movs	r4, #0
    fcac:	1933      	adds	r3, r6, r4
    fcae:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    fcb2:	b10b      	cbz	r3, fcb8 <dmConnExecCback+0x14>
    fcb4:	4628      	mov	r0, r5
    fcb6:	4798      	blx	r3
    fcb8:	3404      	adds	r4, #4
    fcba:	2c14      	cmp	r4, #20
    fcbc:	d1f6      	bne.n	fcac <dmConnExecCback+0x8>
    fcbe:	bd70      	pop	{r4, r5, r6, pc}
    fcc0:	10019164 	.word	0x10019164

0000fcc4 <dmConnSmActConnOpened>:
    fcc4:	b570      	push	{r4, r5, r6, lr}
    fcc6:	460d      	mov	r5, r1
    fcc8:	4604      	mov	r4, r0
    fcca:	310a      	adds	r1, #10
    fccc:	f00f ffc1 	bl	1fc52 <BdaCpy>
    fcd0:	88eb      	ldrh	r3, [r5, #6]
    fcd2:	81a3      	strh	r3, [r4, #12]
    fcd4:	7a68      	ldrb	r0, [r5, #9]
    fcd6:	f000 fc07 	bl	104e8 <DmHostAddrType>
    fcda:	74e0      	strb	r0, [r4, #19]
    fcdc:	7a2a      	ldrb	r2, [r5, #8]
    fcde:	7662      	strb	r2, [r4, #25]
    fce0:	4b12      	ldr	r3, [pc, #72]	; (fd2c <dmConnSmActConnOpened+0x68>)
    fce2:	b9fa      	cbnz	r2, fd24 <dmConnSmActConnOpened+0x60>
    fce4:	7b5b      	ldrb	r3, [r3, #13]
    fce6:	7523      	strb	r3, [r4, #20]
    fce8:	7d23      	ldrb	r3, [r4, #20]
    fcea:	1da6      	adds	r6, r4, #6
    fcec:	b9e3      	cbnz	r3, fd28 <dmConnSmActConnOpened+0x64>
    fcee:	f007 f945 	bl	16f7c <HciGetBdAddr>
    fcf2:	4601      	mov	r1, r0
    fcf4:	4630      	mov	r0, r6
    fcf6:	f00f ffac 	bl	1fc52 <BdaCpy>
    fcfa:	f105 0117 	add.w	r1, r5, #23
    fcfe:	f104 001a 	add.w	r0, r4, #26
    fd02:	f00f ffa6 	bl	1fc52 <BdaCpy>
    fd06:	f104 0020 	add.w	r0, r4, #32
    fd0a:	f105 011d 	add.w	r1, r5, #29
    fd0e:	f00f ffa0 	bl	1fc52 <BdaCpy>
    fd12:	2300      	movs	r3, #0
    fd14:	81e3      	strh	r3, [r4, #14]
    fd16:	2327      	movs	r3, #39	; 0x27
    fd18:	70ab      	strb	r3, [r5, #2]
    fd1a:	4628      	mov	r0, r5
    fd1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd20:	f7ff bfc0 	b.w	fca4 <dmConnExecCback>
    fd24:	7b9b      	ldrb	r3, [r3, #14]
    fd26:	e7de      	b.n	fce6 <dmConnSmActConnOpened+0x22>
    fd28:	4900      	ldr	r1, [pc, #0]	; (fd2c <dmConnSmActConnOpened+0x68>)
    fd2a:	e7e3      	b.n	fcf4 <dmConnSmActConnOpened+0x30>
    fd2c:	100192f4 	.word	0x100192f4

0000fd30 <dmConnSmActConnFailed>:
    fd30:	2300      	movs	r3, #0
    fd32:	7583      	strb	r3, [r0, #22]
    fd34:	2328      	movs	r3, #40	; 0x28
    fd36:	708b      	strb	r3, [r1, #2]
    fd38:	4608      	mov	r0, r1
    fd3a:	f7ff bfb3 	b.w	fca4 <dmConnExecCback>

0000fd3e <dmConnSmActConnClosed>:
    fd3e:	2300      	movs	r3, #0
    fd40:	7583      	strb	r3, [r0, #22]
    fd42:	2328      	movs	r3, #40	; 0x28
    fd44:	708b      	strb	r3, [r1, #2]
    fd46:	4608      	mov	r0, r1
    fd48:	f7ff bfac 	b.w	fca4 <dmConnExecCback>

0000fd4c <dmConnOpenAccept>:
    fd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd50:	4607      	mov	r7, r0
    fd52:	468a      	mov	sl, r1
    fd54:	4691      	mov	r9, r2
    fd56:	4698      	mov	r8, r3
    fd58:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    fd5c:	f010 fb72 	bl	20444 <WsfTaskLock>
    fd60:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fd62:	f7ff fef5 	bl	fb50 <dmConnCcbByBdAddr>
    fd66:	4605      	mov	r5, r0
    fd68:	b918      	cbnz	r0, fd72 <dmConnOpenAccept+0x26>
    fd6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fd6c:	f7ff fe3a 	bl	f9e4 <dmConnCcbAlloc>
    fd70:	4605      	mov	r5, r0
    fd72:	f010 fb6d 	bl	20450 <WsfTaskUnlock>
    fd76:	b39d      	cbz	r5, fde0 <dmConnOpenAccept+0x94>
    fd78:	2014      	movs	r0, #20
    fd7a:	f00a fe42 	bl	1aa02 <WsfMsgAlloc>
    fd7e:	4604      	mov	r4, r0
    fd80:	b338      	cbz	r0, fdd2 <dmConnOpenAccept+0x86>
    fd82:	7c2b      	ldrb	r3, [r5, #16]
    fd84:	8003      	strh	r3, [r0, #0]
    fd86:	2e00      	cmp	r6, #0
    fd88:	bf0c      	ite	eq
    fd8a:	2330      	moveq	r3, #48	; 0x30
    fd8c:	2332      	movne	r3, #50	; 0x32
    fd8e:	7083      	strb	r3, [r0, #2]
    fd90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fd94:	8103      	strh	r3, [r0, #8]
    fd96:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    fd9a:	7283      	strb	r3, [r0, #10]
    fd9c:	f880 a004 	strb.w	sl, [r0, #4]
    fda0:	f880 9005 	strb.w	r9, [r0, #5]
    fda4:	f880 8006 	strb.w	r8, [r0, #6]
    fda8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fdaa:	300b      	adds	r0, #11
    fdac:	f00f ff51 	bl	1fc52 <BdaCpy>
    fdb0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    fdb4:	7463      	strb	r3, [r4, #17]
    fdb6:	4b0b      	ldr	r3, [pc, #44]	; (fde4 <dmConnOpenAccept+0x98>)
    fdb8:	74a7      	strb	r7, [r4, #18]
    fdba:	7b18      	ldrb	r0, [r3, #12]
    fdbc:	4621      	mov	r1, r4
    fdbe:	f00a fe44 	bl	1aa4a <WsfMsgSend>
    fdc2:	f010 fb3f 	bl	20444 <WsfTaskLock>
    fdc6:	766e      	strb	r6, [r5, #25]
    fdc8:	f010 fb42 	bl	20450 <WsfTaskUnlock>
    fdcc:	7c28      	ldrb	r0, [r5, #16]
    fdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fdd2:	f010 fb37 	bl	20444 <WsfTaskLock>
    fdd6:	75ac      	strb	r4, [r5, #22]
    fdd8:	f010 fb3a 	bl	20450 <WsfTaskUnlock>
    fddc:	4620      	mov	r0, r4
    fdde:	e7f6      	b.n	fdce <dmConnOpenAccept+0x82>
    fde0:	4628      	mov	r0, r5
    fde2:	e7f4      	b.n	fdce <dmConnOpenAccept+0x82>
    fde4:	100192f4 	.word	0x100192f4

0000fde8 <DmConnInit>:
    fde8:	4b05      	ldr	r3, [pc, #20]	; (fe00 <DmConnInit+0x18>)
    fdea:	4a06      	ldr	r2, [pc, #24]	; (fe04 <DmConnInit+0x1c>)
    fdec:	f103 010c 	add.w	r1, r3, #12
    fdf0:	60d1      	str	r1, [r2, #12]
    fdf2:	f103 0118 	add.w	r1, r3, #24
    fdf6:	6111      	str	r1, [r2, #16]
    fdf8:	4a03      	ldr	r2, [pc, #12]	; (fe08 <DmConnInit+0x20>)
    fdfa:	3324      	adds	r3, #36	; 0x24
    fdfc:	6013      	str	r3, [r2, #0]
    fdfe:	4770      	bx	lr
    fe00:	0003baac 	.word	0x0003baac
    fe04:	10002f84 	.word	0x10002f84
    fe08:	100192e8 	.word	0x100192e8

0000fe0c <DmConnRegister>:
    fe0c:	b538      	push	{r3, r4, r5, lr}
    fe0e:	4604      	mov	r4, r0
    fe10:	460d      	mov	r5, r1
    fe12:	3458      	adds	r4, #88	; 0x58
    fe14:	f010 fb16 	bl	20444 <WsfTaskLock>
    fe18:	4b03      	ldr	r3, [pc, #12]	; (fe28 <DmConnRegister+0x1c>)
    fe1a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    fe1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fe22:	f010 bb15 	b.w	20450 <WsfTaskUnlock>
    fe26:	bf00      	nop
    fe28:	10019164 	.word	0x10019164

0000fe2c <DmConnClose>:
    fe2c:	b570      	push	{r4, r5, r6, lr}
    fe2e:	4604      	mov	r4, r0
    fe30:	2006      	movs	r0, #6
    fe32:	460e      	mov	r6, r1
    fe34:	4615      	mov	r5, r2
    fe36:	f00a fde4 	bl	1aa02 <WsfMsgAlloc>
    fe3a:	b158      	cbz	r0, fe54 <DmConnClose+0x28>
    fe3c:	2331      	movs	r3, #49	; 0x31
    fe3e:	7083      	strb	r3, [r0, #2]
    fe40:	4b05      	ldr	r3, [pc, #20]	; (fe58 <DmConnClose+0x2c>)
    fe42:	8006      	strh	r6, [r0, #0]
    fe44:	7105      	strb	r5, [r0, #4]
    fe46:	7144      	strb	r4, [r0, #5]
    fe48:	4601      	mov	r1, r0
    fe4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fe4e:	7b18      	ldrb	r0, [r3, #12]
    fe50:	f00a bdfb 	b.w	1aa4a <WsfMsgSend>
    fe54:	bd70      	pop	{r4, r5, r6, pc}
    fe56:	bf00      	nop
    fe58:	100192f4 	.word	0x100192f4

0000fe5c <DmReadRemoteFeatures>:
    fe5c:	b508      	push	{r3, lr}
    fe5e:	f7ff fecd 	bl	fbfc <dmConnCcbById>
    fe62:	b120      	cbz	r0, fe6e <DmReadRemoteFeatures+0x12>
    fe64:	8980      	ldrh	r0, [r0, #12]
    fe66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fe6a:	f005 bf87 	b.w	15d7c <HciLeReadRemoteFeatCmd>
    fe6e:	bd08      	pop	{r3, pc}

0000fe70 <DmConnUpdate>:
    fe70:	b538      	push	{r3, r4, r5, lr}
    fe72:	4605      	mov	r5, r0
    fe74:	2010      	movs	r0, #16
    fe76:	460c      	mov	r4, r1
    fe78:	f00a fdc3 	bl	1aa02 <WsfMsgAlloc>
    fe7c:	b1d0      	cbz	r0, feb4 <DmConnUpdate+0x44>
    fe7e:	4a0e      	ldr	r2, [pc, #56]	; (feb8 <DmConnUpdate+0x48>)
    fe80:	1e6b      	subs	r3, r5, #1
    fe82:	212c      	movs	r1, #44	; 0x2c
    fe84:	fb01 2303 	mla	r3, r1, r3, r2
    fe88:	4602      	mov	r2, r0
    fe8a:	7e5b      	ldrb	r3, [r3, #25]
    fe8c:	2b00      	cmp	r3, #0
    fe8e:	bf0c      	ite	eq
    fe90:	2333      	moveq	r3, #51	; 0x33
    fe92:	2334      	movne	r3, #52	; 0x34
    fe94:	7083      	strb	r3, [r0, #2]
    fe96:	f822 5b04 	strh.w	r5, [r2], #4
    fe9a:	6823      	ldr	r3, [r4, #0]
    fe9c:	6043      	str	r3, [r0, #4]
    fe9e:	6863      	ldr	r3, [r4, #4]
    fea0:	6053      	str	r3, [r2, #4]
    fea2:	68a3      	ldr	r3, [r4, #8]
    fea4:	6093      	str	r3, [r2, #8]
    fea6:	4b05      	ldr	r3, [pc, #20]	; (febc <DmConnUpdate+0x4c>)
    fea8:	4601      	mov	r1, r0
    feaa:	7b18      	ldrb	r0, [r3, #12]
    feac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    feb0:	f00a bdcb 	b.w	1aa4a <WsfMsgSend>
    feb4:	bd38      	pop	{r3, r4, r5, pc}
    feb6:	bf00      	nop
    feb8:	10019164 	.word	0x10019164
    febc:	100192f4 	.word	0x100192f4

0000fec0 <DmConnSetScanInterval>:
    fec0:	b538      	push	{r3, r4, r5, lr}
    fec2:	4605      	mov	r5, r0
    fec4:	460c      	mov	r4, r1
    fec6:	f010 fabd 	bl	20444 <WsfTaskLock>
    feca:	2001      	movs	r0, #1
    fecc:	f000 fb3c 	bl	10548 <DmInitPhyToIdx>
    fed0:	4b05      	ldr	r3, [pc, #20]	; (fee8 <DmConnSetScanInterval+0x28>)
    fed2:	30c0      	adds	r0, #192	; 0xc0
    fed4:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    fed8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    fedc:	805c      	strh	r4, [r3, #2]
    fede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fee2:	f010 bab5 	b.w	20450 <WsfTaskUnlock>
    fee6:	bf00      	nop
    fee8:	10019164 	.word	0x10019164

0000feec <DmExtConnSetScanInterval>:
    feec:	b570      	push	{r4, r5, r6, lr}
    feee:	2400      	movs	r4, #0
    fef0:	fa40 f304 	asr.w	r3, r0, r4
    fef4:	07db      	lsls	r3, r3, #31
    fef6:	d515      	bpl.n	ff24 <DmExtConnSetScanInterval+0x38>
    fef8:	880e      	ldrh	r6, [r1, #0]
    fefa:	8815      	ldrh	r5, [r2, #0]
    fefc:	f010 faa2 	bl	20444 <WsfTaskLock>
    ff00:	2001      	movs	r0, #1
    ff02:	40a0      	lsls	r0, r4
    ff04:	b2c0      	uxtb	r0, r0
    ff06:	f000 fb1f 	bl	10548 <DmInitPhyToIdx>
    ff0a:	4b08      	ldr	r3, [pc, #32]	; (ff2c <DmExtConnSetScanInterval+0x40>)
    ff0c:	30c0      	adds	r0, #192	; 0xc0
    ff0e:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    ff12:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    ff16:	805d      	strh	r5, [r3, #2]
    ff18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff1c:	f010 ba98 	b.w	20450 <WsfTaskUnlock>
    ff20:	3401      	adds	r4, #1
    ff22:	e7e5      	b.n	fef0 <DmExtConnSetScanInterval+0x4>
    ff24:	2c07      	cmp	r4, #7
    ff26:	d1fb      	bne.n	ff20 <DmExtConnSetScanInterval+0x34>
    ff28:	bd70      	pop	{r4, r5, r6, pc}
    ff2a:	bf00      	nop
    ff2c:	10019164 	.word	0x10019164

0000ff30 <DmConnSetConnSpec>:
    ff30:	4601      	mov	r1, r0
    ff32:	2001      	movs	r0, #1
    ff34:	e53c      	b.n	f9b0 <dmConnSetConnSpec>

0000ff36 <DmExtConnSetConnSpec>:
    ff36:	2300      	movs	r3, #0
    ff38:	fa40 f203 	asr.w	r2, r0, r3
    ff3c:	07d2      	lsls	r2, r2, #31
    ff3e:	d505      	bpl.n	ff4c <DmExtConnSetConnSpec+0x16>
    ff40:	2001      	movs	r0, #1
    ff42:	4098      	lsls	r0, r3
    ff44:	b2c0      	uxtb	r0, r0
    ff46:	e533      	b.n	f9b0 <dmConnSetConnSpec>
    ff48:	3301      	adds	r3, #1
    ff4a:	e7f5      	b.n	ff38 <DmExtConnSetConnSpec+0x2>
    ff4c:	2b07      	cmp	r3, #7
    ff4e:	d1fb      	bne.n	ff48 <DmExtConnSetConnSpec+0x12>
    ff50:	4770      	bx	lr

0000ff52 <DmConnReadRssi>:
    ff52:	b510      	push	{r4, lr}
    ff54:	4604      	mov	r4, r0
    ff56:	2004      	movs	r0, #4
    ff58:	f00a fd53 	bl	1aa02 <WsfMsgAlloc>
    ff5c:	4601      	mov	r1, r0
    ff5e:	b140      	cbz	r0, ff72 <DmConnReadRssi+0x20>
    ff60:	2341      	movs	r3, #65	; 0x41
    ff62:	7083      	strb	r3, [r0, #2]
    ff64:	4b03      	ldr	r3, [pc, #12]	; (ff74 <DmConnReadRssi+0x22>)
    ff66:	8004      	strh	r4, [r0, #0]
    ff68:	7b18      	ldrb	r0, [r3, #12]
    ff6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff6e:	f00a bd6c 	b.w	1aa4a <WsfMsgSend>
    ff72:	bd10      	pop	{r4, pc}
    ff74:	100192f4 	.word	0x100192f4

0000ff78 <DmRemoteConnParamReqReply>:
    ff78:	b538      	push	{r3, r4, r5, lr}
    ff7a:	4605      	mov	r5, r0
    ff7c:	2010      	movs	r0, #16
    ff7e:	460c      	mov	r4, r1
    ff80:	f00a fd3f 	bl	1aa02 <WsfMsgAlloc>
    ff84:	b188      	cbz	r0, ffaa <DmRemoteConnParamReqReply+0x32>
    ff86:	4602      	mov	r2, r0
    ff88:	2342      	movs	r3, #66	; 0x42
    ff8a:	7083      	strb	r3, [r0, #2]
    ff8c:	f822 5b04 	strh.w	r5, [r2], #4
    ff90:	6823      	ldr	r3, [r4, #0]
    ff92:	6043      	str	r3, [r0, #4]
    ff94:	6863      	ldr	r3, [r4, #4]
    ff96:	6053      	str	r3, [r2, #4]
    ff98:	68a3      	ldr	r3, [r4, #8]
    ff9a:	6093      	str	r3, [r2, #8]
    ff9c:	4b03      	ldr	r3, [pc, #12]	; (ffac <DmRemoteConnParamReqReply+0x34>)
    ff9e:	4601      	mov	r1, r0
    ffa0:	7b18      	ldrb	r0, [r3, #12]
    ffa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ffa6:	f00a bd50 	b.w	1aa4a <WsfMsgSend>
    ffaa:	bd38      	pop	{r3, r4, r5, pc}
    ffac:	100192f4 	.word	0x100192f4

0000ffb0 <DmRemoteConnParamReqNegReply>:
    ffb0:	b538      	push	{r3, r4, r5, lr}
    ffb2:	4605      	mov	r5, r0
    ffb4:	2006      	movs	r0, #6
    ffb6:	460c      	mov	r4, r1
    ffb8:	f00a fd23 	bl	1aa02 <WsfMsgAlloc>
    ffbc:	b150      	cbz	r0, ffd4 <DmRemoteConnParamReqNegReply+0x24>
    ffbe:	2343      	movs	r3, #67	; 0x43
    ffc0:	7083      	strb	r3, [r0, #2]
    ffc2:	4b05      	ldr	r3, [pc, #20]	; (ffd8 <DmRemoteConnParamReqNegReply+0x28>)
    ffc4:	8005      	strh	r5, [r0, #0]
    ffc6:	7104      	strb	r4, [r0, #4]
    ffc8:	4601      	mov	r1, r0
    ffca:	7b18      	ldrb	r0, [r3, #12]
    ffcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ffd0:	f00a bd3b 	b.w	1aa4a <WsfMsgSend>
    ffd4:	bd38      	pop	{r3, r4, r5, pc}
    ffd6:	bf00      	nop
    ffd8:	100192f4 	.word	0x100192f4

0000ffdc <DmConnSetDataLen>:
    ffdc:	b570      	push	{r4, r5, r6, lr}
    ffde:	4606      	mov	r6, r0
    ffe0:	2008      	movs	r0, #8
    ffe2:	460d      	mov	r5, r1
    ffe4:	4614      	mov	r4, r2
    ffe6:	f00a fd0c 	bl	1aa02 <WsfMsgAlloc>
    ffea:	b158      	cbz	r0, 10004 <DmConnSetDataLen+0x28>
    ffec:	2344      	movs	r3, #68	; 0x44
    ffee:	7083      	strb	r3, [r0, #2]
    fff0:	4b05      	ldr	r3, [pc, #20]	; (10008 <DmConnSetDataLen+0x2c>)
    fff2:	8006      	strh	r6, [r0, #0]
    fff4:	8085      	strh	r5, [r0, #4]
    fff6:	80c4      	strh	r4, [r0, #6]
    fff8:	4601      	mov	r1, r0
    fffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fffe:	7b18      	ldrb	r0, [r3, #12]
   10000:	f00a bd23 	b.w	1aa4a <WsfMsgSend>
   10004:	bd70      	pop	{r4, r5, r6, pc}
   10006:	bf00      	nop
   10008:	100192f4 	.word	0x100192f4

0001000c <DmWriteAuthPayloadTimeout>:
   1000c:	b538      	push	{r3, r4, r5, lr}
   1000e:	4605      	mov	r5, r0
   10010:	2006      	movs	r0, #6
   10012:	460c      	mov	r4, r1
   10014:	f00a fcf5 	bl	1aa02 <WsfMsgAlloc>
   10018:	b150      	cbz	r0, 10030 <DmWriteAuthPayloadTimeout+0x24>
   1001a:	2345      	movs	r3, #69	; 0x45
   1001c:	7083      	strb	r3, [r0, #2]
   1001e:	4b05      	ldr	r3, [pc, #20]	; (10034 <DmWriteAuthPayloadTimeout+0x28>)
   10020:	8005      	strh	r5, [r0, #0]
   10022:	8084      	strh	r4, [r0, #4]
   10024:	4601      	mov	r1, r0
   10026:	7b18      	ldrb	r0, [r3, #12]
   10028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1002c:	f00a bd0d 	b.w	1aa4a <WsfMsgSend>
   10030:	bd38      	pop	{r3, r4, r5, pc}
   10032:	bf00      	nop
   10034:	100192f4 	.word	0x100192f4

00010038 <DmConnIdByHandle>:
   10038:	b510      	push	{r4, lr}
   1003a:	4908      	ldr	r1, [pc, #32]	; (1005c <DmConnIdByHandle+0x24>)
   1003c:	2300      	movs	r3, #0
   1003e:	18ca      	adds	r2, r1, r3
   10040:	7d94      	ldrb	r4, [r2, #22]
   10042:	b124      	cbz	r4, 1004e <DmConnIdByHandle+0x16>
   10044:	8994      	ldrh	r4, [r2, #12]
   10046:	4284      	cmp	r4, r0
   10048:	d101      	bne.n	1004e <DmConnIdByHandle+0x16>
   1004a:	7c10      	ldrb	r0, [r2, #16]
   1004c:	bd10      	pop	{r4, pc}
   1004e:	332c      	adds	r3, #44	; 0x2c
   10050:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
   10054:	d1f3      	bne.n	1003e <DmConnIdByHandle+0x6>
   10056:	2000      	movs	r0, #0
   10058:	e7f8      	b.n	1004c <DmConnIdByHandle+0x14>
   1005a:	bf00      	nop
   1005c:	10019164 	.word	0x10019164

00010060 <DmConnInUse>:
   10060:	4b03      	ldr	r3, [pc, #12]	; (10070 <DmConnInUse+0x10>)
   10062:	222c      	movs	r2, #44	; 0x2c
   10064:	3801      	subs	r0, #1
   10066:	fb02 3000 	mla	r0, r2, r0, r3
   1006a:	7d80      	ldrb	r0, [r0, #22]
   1006c:	4770      	bx	lr
   1006e:	bf00      	nop
   10070:	10019164 	.word	0x10019164

00010074 <DmConnPeerAddrType>:
   10074:	4b03      	ldr	r3, [pc, #12]	; (10084 <DmConnPeerAddrType+0x10>)
   10076:	222c      	movs	r2, #44	; 0x2c
   10078:	3801      	subs	r0, #1
   1007a:	fb02 3000 	mla	r0, r2, r0, r3
   1007e:	7cc0      	ldrb	r0, [r0, #19]
   10080:	4770      	bx	lr
   10082:	bf00      	nop
   10084:	10019164 	.word	0x10019164

00010088 <DmConnPeerAddr>:
   10088:	4b02      	ldr	r3, [pc, #8]	; (10094 <DmConnPeerAddr+0xc>)
   1008a:	222c      	movs	r2, #44	; 0x2c
   1008c:	3801      	subs	r0, #1
   1008e:	fb02 3000 	mla	r0, r2, r0, r3
   10092:	4770      	bx	lr
   10094:	10019164 	.word	0x10019164

00010098 <DmConnLocalAddrType>:
   10098:	4b03      	ldr	r3, [pc, #12]	; (100a8 <DmConnLocalAddrType+0x10>)
   1009a:	222c      	movs	r2, #44	; 0x2c
   1009c:	3801      	subs	r0, #1
   1009e:	fb02 3000 	mla	r0, r2, r0, r3
   100a2:	7d00      	ldrb	r0, [r0, #20]
   100a4:	4770      	bx	lr
   100a6:	bf00      	nop
   100a8:	10019164 	.word	0x10019164

000100ac <DmConnLocalAddr>:
   100ac:	4b03      	ldr	r3, [pc, #12]	; (100bc <DmConnLocalAddr+0x10>)
   100ae:	222c      	movs	r2, #44	; 0x2c
   100b0:	3801      	subs	r0, #1
   100b2:	fb02 3000 	mla	r0, r2, r0, r3
   100b6:	3006      	adds	r0, #6
   100b8:	4770      	bx	lr
   100ba:	bf00      	nop
   100bc:	10019164 	.word	0x10019164

000100c0 <DmConnPeerRpa>:
   100c0:	4b03      	ldr	r3, [pc, #12]	; (100d0 <DmConnPeerRpa+0x10>)
   100c2:	222c      	movs	r2, #44	; 0x2c
   100c4:	3801      	subs	r0, #1
   100c6:	fb02 3000 	mla	r0, r2, r0, r3
   100ca:	3020      	adds	r0, #32
   100cc:	4770      	bx	lr
   100ce:	bf00      	nop
   100d0:	10019164 	.word	0x10019164

000100d4 <DmConnLocalRpa>:
   100d4:	4b03      	ldr	r3, [pc, #12]	; (100e4 <DmConnLocalRpa+0x10>)
   100d6:	222c      	movs	r2, #44	; 0x2c
   100d8:	3801      	subs	r0, #1
   100da:	fb02 3000 	mla	r0, r2, r0, r3
   100de:	301a      	adds	r0, #26
   100e0:	4770      	bx	lr
   100e2:	bf00      	nop
   100e4:	10019164 	.word	0x10019164

000100e8 <DmConnSecLevel>:
   100e8:	4b03      	ldr	r3, [pc, #12]	; (100f8 <DmConnSecLevel+0x10>)
   100ea:	222c      	movs	r2, #44	; 0x2c
   100ec:	3801      	subs	r0, #1
   100ee:	fb02 3000 	mla	r0, r2, r0, r3
   100f2:	7dc0      	ldrb	r0, [r0, #23]
   100f4:	4770      	bx	lr
   100f6:	bf00      	nop
   100f8:	10019164 	.word	0x10019164

000100fc <DmConnSetIdle>:
   100fc:	b570      	push	{r4, r5, r6, lr}
   100fe:	4604      	mov	r4, r0
   10100:	4616      	mov	r6, r2
   10102:	460d      	mov	r5, r1
   10104:	f010 f99e 	bl	20444 <WsfTaskLock>
   10108:	4b08      	ldr	r3, [pc, #32]	; (1012c <DmConnSetIdle+0x30>)
   1010a:	1e60      	subs	r0, r4, #1
   1010c:	222c      	movs	r2, #44	; 0x2c
   1010e:	fb02 3000 	mla	r0, r2, r0, r3
   10112:	7d83      	ldrb	r3, [r0, #22]
   10114:	b123      	cbz	r3, 10120 <DmConnSetIdle+0x24>
   10116:	89c1      	ldrh	r1, [r0, #14]
   10118:	b936      	cbnz	r6, 10128 <DmConnSetIdle+0x2c>
   1011a:	ea21 0505 	bic.w	r5, r1, r5
   1011e:	81c5      	strh	r5, [r0, #14]
   10120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10124:	f010 b994 	b.w	20450 <WsfTaskUnlock>
   10128:	430d      	orrs	r5, r1
   1012a:	e7f8      	b.n	1011e <DmConnSetIdle+0x22>
   1012c:	10019164 	.word	0x10019164

00010130 <DmConnCheckIdle>:
   10130:	b510      	push	{r4, lr}
   10132:	4604      	mov	r4, r0
   10134:	f010 f986 	bl	20444 <WsfTaskLock>
   10138:	4804      	ldr	r0, [pc, #16]	; (1014c <DmConnCheckIdle+0x1c>)
   1013a:	232c      	movs	r3, #44	; 0x2c
   1013c:	3c01      	subs	r4, #1
   1013e:	fb03 0404 	mla	r4, r3, r4, r0
   10142:	89e4      	ldrh	r4, [r4, #14]
   10144:	f010 f984 	bl	20450 <WsfTaskUnlock>
   10148:	4620      	mov	r0, r4
   1014a:	bd10      	pop	{r4, pc}
   1014c:	10019164 	.word	0x10019164

00010150 <DmConnRole>:
   10150:	4b03      	ldr	r3, [pc, #12]	; (10160 <DmConnRole+0x10>)
   10152:	222c      	movs	r2, #44	; 0x2c
   10154:	3801      	subs	r0, #1
   10156:	fb02 3000 	mla	r0, r2, r0, r3
   1015a:	7e40      	ldrb	r0, [r0, #25]
   1015c:	4770      	bx	lr
   1015e:	bf00      	nop
   10160:	10019164 	.word	0x10019164

00010164 <dmConnSmActUpdateSlave>:
   10164:	b530      	push	{r4, r5, lr}
   10166:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10168:	079a      	lsls	r2, r3, #30
   1016a:	b085      	sub	sp, #20
   1016c:	4604      	mov	r4, r0
   1016e:	460d      	mov	r5, r1
   10170:	d509      	bpl.n	10186 <dmConnSmActUpdateSlave+0x22>
   10172:	f006 ff19 	bl	16fa8 <HciGetLeSupFeat>
   10176:	0783      	lsls	r3, r0, #30
   10178:	d505      	bpl.n	10186 <dmConnSmActUpdateSlave+0x22>
   1017a:	1d29      	adds	r1, r5, #4
   1017c:	89a0      	ldrh	r0, [r4, #12]
   1017e:	f005 fb4d 	bl	1581c <HciLeConnUpdateCmd>
   10182:	b005      	add	sp, #20
   10184:	bd30      	pop	{r4, r5, pc}
   10186:	7c63      	ldrb	r3, [r4, #17]
   10188:	89a0      	ldrh	r0, [r4, #12]
   1018a:	b92b      	cbnz	r3, 10198 <dmConnSmActUpdateSlave+0x34>
   1018c:	2301      	movs	r3, #1
   1018e:	7463      	strb	r3, [r4, #17]
   10190:	1d29      	adds	r1, r5, #4
   10192:	f000 ff09 	bl	10fa8 <L2cDmConnUpdateReq>
   10196:	e7f4      	b.n	10182 <dmConnSmActUpdateSlave+0x1e>
   10198:	7c23      	ldrb	r3, [r4, #16]
   1019a:	f8ad 3000 	strh.w	r3, [sp]
   1019e:	f640 4329 	movw	r3, #3113	; 0xc29
   101a2:	f8ad 3002 	strh.w	r3, [sp, #2]
   101a6:	230c      	movs	r3, #12
   101a8:	f88d 3004 	strb.w	r3, [sp, #4]
   101ac:	4b03      	ldr	r3, [pc, #12]	; (101bc <dmConnSmActUpdateSlave+0x58>)
   101ae:	f8ad 0006 	strh.w	r0, [sp, #6]
   101b2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   101b6:	4668      	mov	r0, sp
   101b8:	4798      	blx	r3
   101ba:	e7e2      	b.n	10182 <dmConnSmActUpdateSlave+0x1e>
   101bc:	10019164 	.word	0x10019164

000101c0 <dmConnSmActL2cUpdateCnf>:
   101c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   101c2:	7c43      	ldrb	r3, [r0, #17]
   101c4:	b1b3      	cbz	r3, 101f4 <dmConnSmActL2cUpdateCnf+0x34>
   101c6:	2300      	movs	r3, #0
   101c8:	7443      	strb	r3, [r0, #17]
   101ca:	888b      	ldrh	r3, [r1, #4]
   101cc:	b193      	cbz	r3, 101f4 <dmConnSmActL2cUpdateCnf+0x34>
   101ce:	b2db      	uxtb	r3, r3
   101d0:	f88d 3003 	strb.w	r3, [sp, #3]
   101d4:	f88d 3004 	strb.w	r3, [sp, #4]
   101d8:	4b08      	ldr	r3, [pc, #32]	; (101fc <dmConnSmActL2cUpdateCnf+0x3c>)
   101da:	8982      	ldrh	r2, [r0, #12]
   101dc:	7c01      	ldrb	r1, [r0, #16]
   101de:	f8ad 1000 	strh.w	r1, [sp]
   101e2:	2029      	movs	r0, #41	; 0x29
   101e4:	f88d 0002 	strb.w	r0, [sp, #2]
   101e8:	f8ad 2006 	strh.w	r2, [sp, #6]
   101ec:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   101f0:	4668      	mov	r0, sp
   101f2:	4798      	blx	r3
   101f4:	b005      	add	sp, #20
   101f6:	f85d fb04 	ldr.w	pc, [sp], #4
   101fa:	bf00      	nop
   101fc:	10019164 	.word	0x10019164

00010200 <DmL2cConnUpdateCnf>:
   10200:	b513      	push	{r0, r1, r4, lr}
   10202:	460c      	mov	r4, r1
   10204:	f7ff fc13 	bl	fa2e <dmConnCcbByHandle>
   10208:	b138      	cbz	r0, 1021a <DmL2cConnUpdateCnf+0x1a>
   1020a:	2336      	movs	r3, #54	; 0x36
   1020c:	4669      	mov	r1, sp
   1020e:	f88d 3002 	strb.w	r3, [sp, #2]
   10212:	f8ad 4004 	strh.w	r4, [sp, #4]
   10216:	f000 f84f 	bl	102b8 <dmConnSmExecute>
   1021a:	b002      	add	sp, #8
   1021c:	bd10      	pop	{r4, pc}

0001021e <DmConnAccept>:
   1021e:	b510      	push	{r4, lr}
   10220:	b086      	sub	sp, #24
   10222:	2401      	movs	r4, #1
   10224:	9404      	str	r4, [sp, #16]
   10226:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10228:	9403      	str	r4, [sp, #12]
   1022a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1022e:	9402      	str	r4, [sp, #8]
   10230:	f89d 4020 	ldrb.w	r4, [sp, #32]
   10234:	e9cd 3400 	strd	r3, r4, [sp]
   10238:	4613      	mov	r3, r2
   1023a:	460a      	mov	r2, r1
   1023c:	2100      	movs	r1, #0
   1023e:	f7ff fd85 	bl	fd4c <dmConnOpenAccept>
   10242:	b006      	add	sp, #24
   10244:	bd10      	pop	{r4, pc}
   10246:	bf00      	nop

00010248 <dmConnSmActAccept>:
   10248:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1024a:	f101 050b 	add.w	r5, r1, #11
   1024e:	798c      	ldrb	r4, [r1, #6]
   10250:	7a8b      	ldrb	r3, [r1, #10]
   10252:	890a      	ldrh	r2, [r1, #8]
   10254:	7948      	ldrb	r0, [r1, #5]
   10256:	9501      	str	r5, [sp, #4]
   10258:	7c49      	ldrb	r1, [r1, #17]
   1025a:	9100      	str	r1, [sp, #0]
   1025c:	4621      	mov	r1, r4
   1025e:	f7ff fb1a 	bl	f896 <dmAdvStartDirected>
   10262:	b003      	add	sp, #12
   10264:	bd30      	pop	{r4, r5, pc}

00010266 <dmConnSmActCancelAccept>:
   10266:	b538      	push	{r3, r4, r5, lr}
   10268:	4604      	mov	r4, r0
   1026a:	460d      	mov	r5, r1
   1026c:	f7ff fb28 	bl	f8c0 <dmAdvStopDirected>
   10270:	4629      	mov	r1, r5
   10272:	4620      	mov	r0, r4
   10274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10278:	f7ff bd5a 	b.w	fd30 <dmConnSmActConnFailed>

0001027c <dmConnSmActConnAccepted>:
   1027c:	b538      	push	{r3, r4, r5, lr}
   1027e:	4604      	mov	r4, r0
   10280:	460d      	mov	r5, r1
   10282:	f7ff fb29 	bl	f8d8 <dmAdvConnected>
   10286:	4629      	mov	r1, r5
   10288:	4620      	mov	r0, r4
   1028a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1028e:	f7ff bd19 	b.w	fcc4 <dmConnSmActConnOpened>

00010292 <dmConnSmActAcceptFailed>:
   10292:	b538      	push	{r3, r4, r5, lr}
   10294:	4604      	mov	r4, r0
   10296:	460d      	mov	r5, r1
   10298:	f7ff fb2a 	bl	f8f0 <dmAdvConnectFailed>
   1029c:	4629      	mov	r1, r5
   1029e:	4620      	mov	r0, r4
   102a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   102a4:	f7ff bd44 	b.w	fd30 <dmConnSmActConnFailed>

000102a8 <DmConnSlaveInit>:
   102a8:	4b01      	ldr	r3, [pc, #4]	; (102b0 <DmConnSlaveInit+0x8>)
   102aa:	4a02      	ldr	r2, [pc, #8]	; (102b4 <DmConnSlaveInit+0xc>)
   102ac:	609a      	str	r2, [r3, #8]
   102ae:	4770      	bx	lr
   102b0:	100192e8 	.word	0x100192e8
   102b4:	0003bae8 	.word	0x0003bae8

000102b8 <dmConnSmExecute>:
   102b8:	788b      	ldrb	r3, [r1, #2]
   102ba:	7d42      	ldrb	r2, [r0, #21]
   102bc:	b470      	push	{r4, r5, r6}
   102be:	f003 030f 	and.w	r3, r3, #15
   102c2:	4d0c      	ldr	r5, [pc, #48]	; (102f4 <dmConnSmExecute+0x3c>)
   102c4:	260d      	movs	r6, #13
   102c6:	fb06 3202 	mla	r2, r6, r2, r3
   102ca:	eb05 0342 	add.w	r3, r5, r2, lsl #1
   102ce:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
   102d2:	785b      	ldrb	r3, [r3, #1]
   102d4:	7542      	strb	r2, [r0, #21]
   102d6:	091c      	lsrs	r4, r3, #4
   102d8:	4a07      	ldr	r2, [pc, #28]	; (102f8 <dmConnSmExecute+0x40>)
   102da:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   102de:	b12a      	cbz	r2, 102ec <dmConnSmExecute+0x34>
   102e0:	f003 030f 	and.w	r3, r3, #15
   102e4:	bc70      	pop	{r4, r5, r6}
   102e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102ea:	4718      	bx	r3
   102ec:	bc70      	pop	{r4, r5, r6}
   102ee:	f7ff bb1d 	b.w	f92c <dmConnSmActNone>
   102f2:	bf00      	nop
   102f4:	0003bb00 	.word	0x0003bb00
   102f8:	100192e8 	.word	0x100192e8

000102fc <dmDevHciHandler>:
   102fc:	7882      	ldrb	r2, [r0, #2]
   102fe:	4603      	mov	r3, r0
   10300:	b92a      	cbnz	r2, 1030e <dmDevHciHandler+0x12>
   10302:	490b      	ldr	r1, [pc, #44]	; (10330 <dmDevHciHandler+0x34>)
   10304:	740a      	strb	r2, [r1, #16]
   10306:	688b      	ldr	r3, [r1, #8]
   10308:	2220      	movs	r2, #32
   1030a:	7082      	strb	r2, [r0, #2]
   1030c:	4718      	bx	r3
   1030e:	2a13      	cmp	r2, #19
   10310:	d104      	bne.n	1031c <dmDevHciHandler+0x20>
   10312:	2253      	movs	r2, #83	; 0x53
   10314:	709a      	strb	r2, [r3, #2]
   10316:	4b06      	ldr	r3, [pc, #24]	; (10330 <dmDevHciHandler+0x34>)
   10318:	689b      	ldr	r3, [r3, #8]
   1031a:	e7f7      	b.n	1030c <dmDevHciHandler+0x10>
   1031c:	2a14      	cmp	r2, #20
   1031e:	d101      	bne.n	10324 <dmDevHciHandler+0x28>
   10320:	2255      	movs	r2, #85	; 0x55
   10322:	e7f7      	b.n	10314 <dmDevHciHandler+0x18>
   10324:	2a12      	cmp	r2, #18
   10326:	d101      	bne.n	1032c <dmDevHciHandler+0x30>
   10328:	2254      	movs	r2, #84	; 0x54
   1032a:	e7f3      	b.n	10314 <dmDevHciHandler+0x18>
   1032c:	4770      	bx	lr
   1032e:	bf00      	nop
   10330:	100192f4 	.word	0x100192f4

00010334 <dmDevActReset>:
   10334:	b538      	push	{r3, r4, r5, lr}
   10336:	4b08      	ldr	r3, [pc, #32]	; (10358 <dmDevActReset+0x24>)
   10338:	4d08      	ldr	r5, [pc, #32]	; (1035c <dmDevActReset+0x28>)
   1033a:	2201      	movs	r2, #1
   1033c:	741a      	strb	r2, [r3, #16]
   1033e:	2400      	movs	r4, #0
   10340:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10344:	3401      	adds	r4, #1
   10346:	681b      	ldr	r3, [r3, #0]
   10348:	4798      	blx	r3
   1034a:	2c0c      	cmp	r4, #12
   1034c:	d1f8      	bne.n	10340 <dmDevActReset+0xc>
   1034e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10352:	f006 bc79 	b.w	16c48 <HciResetSequence>
   10356:	bf00      	nop
   10358:	100192f4 	.word	0x100192f4
   1035c:	10002f84 	.word	0x10002f84

00010360 <dmDevMsgHandler>:
   10360:	f7ff bfe8 	b.w	10334 <dmDevActReset>

00010364 <DmDevReset>:
   10364:	b508      	push	{r3, lr}
   10366:	2004      	movs	r0, #4
   10368:	f00a fb4b 	bl	1aa02 <WsfMsgAlloc>
   1036c:	4601      	mov	r1, r0
   1036e:	b138      	cbz	r0, 10380 <DmDevReset+0x1c>
   10370:	2370      	movs	r3, #112	; 0x70
   10372:	7083      	strb	r3, [r0, #2]
   10374:	4b03      	ldr	r3, [pc, #12]	; (10384 <DmDevReset+0x20>)
   10376:	7b18      	ldrb	r0, [r3, #12]
   10378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1037c:	f00a bb65 	b.w	1aa4a <WsfMsgSend>
   10380:	bd08      	pop	{r3, pc}
   10382:	bf00      	nop
   10384:	100192f4 	.word	0x100192f4

00010388 <DmDevSetRandAddr>:
   10388:	b510      	push	{r4, lr}
   1038a:	4601      	mov	r1, r0
   1038c:	4604      	mov	r4, r0
   1038e:	4804      	ldr	r0, [pc, #16]	; (103a0 <DmDevSetRandAddr+0x18>)
   10390:	f00f fc5f 	bl	1fc52 <BdaCpy>
   10394:	4620      	mov	r0, r4
   10396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1039a:	f005 be32 	b.w	16002 <HciLeSetRandAddrCmd>
   1039e:	bf00      	nop
   103a0:	100192f4 	.word	0x100192f4

000103a4 <DmDevWhiteListAdd>:
   103a4:	f005 ba02 	b.w	157ac <HciLeAddDevWhiteListCmd>

000103a8 <DmDevWhiteListRemove>:
   103a8:	f005 bd34 	b.w	15e14 <HciLeRemoveDevWhiteListCmd>

000103ac <DmDevWhiteListClear>:
   103ac:	f005 ba23 	b.w	157f6 <HciLeClearWhiteListCmd>

000103b0 <dmDevSetFilterPolicy>:
   103b0:	2901      	cmp	r1, #1
   103b2:	d00b      	beq.n	103cc <dmDevSetFilterPolicy+0x1c>
   103b4:	d303      	bcc.n	103be <dmDevSetFilterPolicy+0xe>
   103b6:	2902      	cmp	r1, #2
   103b8:	d00d      	beq.n	103d6 <dmDevSetFilterPolicy+0x26>
   103ba:	2000      	movs	r0, #0
   103bc:	4770      	bx	lr
   103be:	2a03      	cmp	r2, #3
   103c0:	d8fb      	bhi.n	103ba <dmDevSetFilterPolicy+0xa>
   103c2:	4b07      	ldr	r3, [pc, #28]	; (103e0 <dmDevSetFilterPolicy+0x30>)
   103c4:	4418      	add	r0, r3
   103c6:	7442      	strb	r2, [r0, #17]
   103c8:	2001      	movs	r0, #1
   103ca:	4770      	bx	lr
   103cc:	2a03      	cmp	r2, #3
   103ce:	d8f4      	bhi.n	103ba <dmDevSetFilterPolicy+0xa>
   103d0:	4b03      	ldr	r3, [pc, #12]	; (103e0 <dmDevSetFilterPolicy+0x30>)
   103d2:	749a      	strb	r2, [r3, #18]
   103d4:	e7f8      	b.n	103c8 <dmDevSetFilterPolicy+0x18>
   103d6:	2a01      	cmp	r2, #1
   103d8:	d8ef      	bhi.n	103ba <dmDevSetFilterPolicy+0xa>
   103da:	4b01      	ldr	r3, [pc, #4]	; (103e0 <dmDevSetFilterPolicy+0x30>)
   103dc:	74da      	strb	r2, [r3, #19]
   103de:	e7f3      	b.n	103c8 <dmDevSetFilterPolicy+0x18>
   103e0:	100192f4 	.word	0x100192f4

000103e4 <DmDevSetFilterPolicy>:
   103e4:	460a      	mov	r2, r1
   103e6:	4601      	mov	r1, r0
   103e8:	2000      	movs	r0, #0
   103ea:	f7ff bfe1 	b.w	103b0 <dmDevSetFilterPolicy>

000103ee <DmDevSetExtFilterPolicy>:
   103ee:	f7ff bfdf 	b.w	103b0 <dmDevSetFilterPolicy>

000103f2 <DmDevVsInit>:
   103f2:	f008 bf0e 	b.w	19212 <HciVsInit>
   103f6:	bf00      	nop

000103f8 <dmHciEvtCback>:
   103f8:	4a06      	ldr	r2, [pc, #24]	; (10414 <dmHciEvtCback+0x1c>)
   103fa:	7883      	ldrb	r3, [r0, #2]
   103fc:	7c12      	ldrb	r2, [r2, #16]
   103fe:	b102      	cbz	r2, 10402 <dmHciEvtCback+0xa>
   10400:	b933      	cbnz	r3, 10410 <dmHciEvtCback+0x18>
   10402:	4a05      	ldr	r2, [pc, #20]	; (10418 <dmHciEvtCback+0x20>)
   10404:	5cd2      	ldrb	r2, [r2, r3]
   10406:	4b05      	ldr	r3, [pc, #20]	; (1041c <dmHciEvtCback+0x24>)
   10408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1040c:	685b      	ldr	r3, [r3, #4]
   1040e:	4718      	bx	r3
   10410:	4770      	bx	lr
   10412:	bf00      	nop
   10414:	100192f4 	.word	0x100192f4
   10418:	0003bb90 	.word	0x0003bb90
   1041c:	10002f84 	.word	0x10002f84

00010420 <dmEmptyReset>:
   10420:	4770      	bx	lr

00010422 <dmEmptyHandler>:
   10422:	4770      	bx	lr

00010424 <DmRegister>:
   10424:	b510      	push	{r4, lr}
   10426:	4b0a      	ldr	r3, [pc, #40]	; (10450 <DmRegister+0x2c>)
   10428:	4c0a      	ldr	r4, [pc, #40]	; (10454 <DmRegister+0x30>)
   1042a:	6a1a      	ldr	r2, [r3, #32]
   1042c:	4b0a      	ldr	r3, [pc, #40]	; (10458 <DmRegister+0x34>)
   1042e:	60a0      	str	r0, [r4, #8]
   10430:	429a      	cmp	r2, r3
   10432:	b09a      	sub	sp, #104	; 0x68
   10434:	d00a      	beq.n	1044c <DmRegister+0x28>
   10436:	f006 fdc7 	bl	16fc8 <HciGetMaxRxAclLen>
   1043a:	2844      	cmp	r0, #68	; 0x44
   1043c:	d806      	bhi.n	1044c <DmRegister+0x28>
   1043e:	a81a      	add	r0, sp, #104	; 0x68
   10440:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
   10444:	f840 3d64 	str.w	r3, [r0, #-100]!
   10448:	68a3      	ldr	r3, [r4, #8]
   1044a:	4798      	blx	r3
   1044c:	b01a      	add	sp, #104	; 0x68
   1044e:	bd10      	pop	{r4, pc}
   10450:	10002f84 	.word	0x10002f84
   10454:	100192f4 	.word	0x100192f4
   10458:	0003bbcc 	.word	0x0003bbcc

0001045c <DmFindAdType>:
   1045c:	b530      	push	{r4, r5, lr}
   1045e:	b121      	cbz	r1, 1046a <DmFindAdType+0xe>
   10460:	7813      	ldrb	r3, [r2, #0]
   10462:	b173      	cbz	r3, 10482 <DmFindAdType+0x26>
   10464:	b29c      	uxth	r4, r3
   10466:	428c      	cmp	r4, r1
   10468:	d302      	bcc.n	10470 <DmFindAdType+0x14>
   1046a:	2200      	movs	r2, #0
   1046c:	4610      	mov	r0, r2
   1046e:	bd30      	pop	{r4, r5, pc}
   10470:	7855      	ldrb	r5, [r2, #1]
   10472:	4285      	cmp	r5, r0
   10474:	d0fa      	beq.n	1046c <DmFindAdType+0x10>
   10476:	43e4      	mvns	r4, r4
   10478:	4421      	add	r1, r4
   1047a:	3301      	adds	r3, #1
   1047c:	b289      	uxth	r1, r1
   1047e:	441a      	add	r2, r3
   10480:	e7ed      	b.n	1045e <DmFindAdType+0x2>
   10482:	461a      	mov	r2, r3
   10484:	e7f2      	b.n	1046c <DmFindAdType+0x10>

00010486 <DmHandlerInit>:
   10486:	4b04      	ldr	r3, [pc, #16]	; (10498 <DmHandlerInit+0x12>)
   10488:	2200      	movs	r2, #0
   1048a:	7318      	strb	r0, [r3, #12]
   1048c:	4803      	ldr	r0, [pc, #12]	; (1049c <DmHandlerInit+0x16>)
   1048e:	751a      	strb	r2, [r3, #20]
   10490:	741a      	strb	r2, [r3, #16]
   10492:	f008 bee7 	b.w	19264 <HciEvtRegister>
   10496:	bf00      	nop
   10498:	100192f4 	.word	0x100192f4
   1049c:	000103f9 	.word	0x000103f9

000104a0 <DmHandler>:
   104a0:	b151      	cbz	r1, 104b8 <DmHandler+0x18>
   104a2:	4b06      	ldr	r3, [pc, #24]	; (104bc <DmHandler+0x1c>)
   104a4:	7c1b      	ldrb	r3, [r3, #16]
   104a6:	b93b      	cbnz	r3, 104b8 <DmHandler+0x18>
   104a8:	788b      	ldrb	r3, [r1, #2]
   104aa:	4a05      	ldr	r2, [pc, #20]	; (104c0 <DmHandler+0x20>)
   104ac:	091b      	lsrs	r3, r3, #4
   104ae:	4608      	mov	r0, r1
   104b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104b4:	689b      	ldr	r3, [r3, #8]
   104b6:	4718      	bx	r3
   104b8:	4770      	bx	lr
   104ba:	bf00      	nop
   104bc:	100192f4 	.word	0x100192f4
   104c0:	10002f84 	.word	0x10002f84

000104c4 <DmLlPrivEnabled>:
   104c4:	4b01      	ldr	r3, [pc, #4]	; (104cc <DmLlPrivEnabled+0x8>)
   104c6:	7d18      	ldrb	r0, [r3, #20]
   104c8:	4770      	bx	lr
   104ca:	bf00      	nop
   104cc:	100192f4 	.word	0x100192f4

000104d0 <DmLlAddrType>:
   104d0:	4b04      	ldr	r3, [pc, #16]	; (104e4 <DmLlAddrType+0x14>)
   104d2:	7d1b      	ldrb	r3, [r3, #20]
   104d4:	b12b      	cbz	r3, 104e2 <DmLlAddrType+0x12>
   104d6:	b118      	cbz	r0, 104e0 <DmLlAddrType+0x10>
   104d8:	2801      	cmp	r0, #1
   104da:	bf08      	it	eq
   104dc:	2003      	moveq	r0, #3
   104de:	4770      	bx	lr
   104e0:	2002      	movs	r0, #2
   104e2:	4770      	bx	lr
   104e4:	100192f4 	.word	0x100192f4

000104e8 <DmHostAddrType>:
   104e8:	4b05      	ldr	r3, [pc, #20]	; (10500 <DmHostAddrType+0x18>)
   104ea:	7d1b      	ldrb	r3, [r3, #20]
   104ec:	b133      	cbz	r3, 104fc <DmHostAddrType+0x14>
   104ee:	2802      	cmp	r0, #2
   104f0:	d003      	beq.n	104fa <DmHostAddrType+0x12>
   104f2:	2803      	cmp	r0, #3
   104f4:	bf08      	it	eq
   104f6:	2001      	moveq	r0, #1
   104f8:	4770      	bx	lr
   104fa:	2000      	movs	r0, #0
   104fc:	4770      	bx	lr
   104fe:	bf00      	nop
   10500:	100192f4 	.word	0x100192f4

00010504 <DmSizeOfEvt>:
   10504:	7883      	ldrb	r3, [r0, #2]
   10506:	3b20      	subs	r3, #32
   10508:	b2da      	uxtb	r2, r3
   1050a:	2a35      	cmp	r2, #53	; 0x35
   1050c:	bf9d      	ittte	ls
   1050e:	4a03      	ldrls	r2, [pc, #12]	; (1051c <DmSizeOfEvt+0x18>)
   10510:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
   10514:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
   10518:	2004      	movhi	r0, #4
   1051a:	4770      	bx	lr
   1051c:	0003bb90 	.word	0x0003bb90

00010520 <DmScanPhyToIdx>:
   10520:	2000      	movs	r0, #0
   10522:	4770      	bx	lr

00010524 <dmInitPhyToIdx>:
   10524:	2801      	cmp	r0, #1
   10526:	d00d      	beq.n	10544 <dmInitPhyToIdx+0x20>
   10528:	2802      	cmp	r0, #2
   1052a:	d104      	bne.n	10536 <dmInitPhyToIdx+0x12>
   1052c:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
   10530:	bf18      	it	ne
   10532:	2001      	movne	r0, #1
   10534:	4770      	bx	lr
   10536:	2901      	cmp	r1, #1
   10538:	d004      	beq.n	10544 <dmInitPhyToIdx+0x20>
   1053a:	2902      	cmp	r1, #2
   1053c:	bf0c      	ite	eq
   1053e:	2001      	moveq	r0, #1
   10540:	2002      	movne	r0, #2
   10542:	4770      	bx	lr
   10544:	2000      	movs	r0, #0
   10546:	4770      	bx	lr

00010548 <DmInitPhyToIdx>:
   10548:	2000      	movs	r0, #0
   1054a:	4770      	bx	lr

0001054c <dmPrivMsgHandler>:
   1054c:	7883      	ldrb	r3, [r0, #2]
   1054e:	4a03      	ldr	r2, [pc, #12]	; (1055c <dmPrivMsgHandler+0x10>)
   10550:	f003 030f 	and.w	r3, r3, #15
   10554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10558:	4718      	bx	r3
   1055a:	bf00      	nop
   1055c:	0003bc44 	.word	0x0003bc44

00010560 <dmPrivReset>:
   10560:	4a02      	ldr	r2, [pc, #8]	; (1056c <dmPrivReset+0xc>)
   10562:	2300      	movs	r3, #0
   10564:	70d3      	strb	r3, [r2, #3]
   10566:	4a02      	ldr	r2, [pc, #8]	; (10570 <dmPrivReset+0x10>)
   10568:	7513      	strb	r3, [r2, #20]
   1056a:	4770      	bx	lr
   1056c:	1001930c 	.word	0x1001930c
   10570:	100192f4 	.word	0x100192f4

00010574 <dmPrivActAesCmpl>:
   10574:	b510      	push	{r4, lr}
   10576:	6841      	ldr	r1, [r0, #4]
   10578:	4604      	mov	r4, r0
   1057a:	2203      	movs	r2, #3
   1057c:	4809      	ldr	r0, [pc, #36]	; (105a4 <dmPrivActAesCmpl+0x30>)
   1057e:	f7fb fdbf 	bl	c100 <memcmp>
   10582:	b958      	cbnz	r0, 1059c <dmPrivActAesCmpl+0x28>
   10584:	70e0      	strb	r0, [r4, #3]
   10586:	4b07      	ldr	r3, [pc, #28]	; (105a4 <dmPrivActAesCmpl+0x30>)
   10588:	2200      	movs	r2, #0
   1058a:	70da      	strb	r2, [r3, #3]
   1058c:	2337      	movs	r3, #55	; 0x37
   1058e:	70a3      	strb	r3, [r4, #2]
   10590:	4b05      	ldr	r3, [pc, #20]	; (105a8 <dmPrivActAesCmpl+0x34>)
   10592:	4620      	mov	r0, r4
   10594:	689b      	ldr	r3, [r3, #8]
   10596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1059a:	4718      	bx	r3
   1059c:	2305      	movs	r3, #5
   1059e:	70e3      	strb	r3, [r4, #3]
   105a0:	e7f1      	b.n	10586 <dmPrivActAesCmpl+0x12>
   105a2:	bf00      	nop
   105a4:	1001930c 	.word	0x1001930c
   105a8:	100192f4 	.word	0x100192f4

000105ac <dmPrivActAddDevToResList>:
   105ac:	b510      	push	{r4, lr}
   105ae:	f100 031b 	add.w	r3, r0, #27
   105b2:	4604      	mov	r4, r0
   105b4:	f100 020b 	add.w	r2, r0, #11
   105b8:	1d41      	adds	r1, r0, #5
   105ba:	7900      	ldrb	r0, [r0, #4]
   105bc:	f005 fea1 	bl	16302 <HciLeAddDeviceToResolvingListCmd>
   105c0:	4b03      	ldr	r3, [pc, #12]	; (105d0 <dmPrivActAddDevToResList+0x24>)
   105c2:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   105c6:	721a      	strb	r2, [r3, #8]
   105c8:	8822      	ldrh	r2, [r4, #0]
   105ca:	809a      	strh	r2, [r3, #4]
   105cc:	bd10      	pop	{r4, pc}
   105ce:	bf00      	nop
   105d0:	1001930c 	.word	0x1001930c

000105d4 <dmPrivActRemDevFromResList>:
   105d4:	b510      	push	{r4, lr}
   105d6:	1d41      	adds	r1, r0, #5
   105d8:	4604      	mov	r4, r0
   105da:	7900      	ldrb	r0, [r0, #4]
   105dc:	f005 fec5 	bl	1636a <HciLeRemoveDeviceFromResolvingList>
   105e0:	4b01      	ldr	r3, [pc, #4]	; (105e8 <dmPrivActRemDevFromResList+0x14>)
   105e2:	8822      	ldrh	r2, [r4, #0]
   105e4:	80da      	strh	r2, [r3, #6]
   105e6:	bd10      	pop	{r4, pc}
   105e8:	1001930c 	.word	0x1001930c

000105ec <dmPrivActClearResList>:
   105ec:	f005 bee2 	b.w	163b4 <HciLeClearResolvingList>

000105f0 <dmPrivActSetPrivacyMode>:
   105f0:	7ac2      	ldrb	r2, [r0, #11]
   105f2:	1d41      	adds	r1, r0, #5
   105f4:	7900      	ldrb	r0, [r0, #4]
   105f6:	f005 bf90 	b.w	1651a <HciLeSetPrivacyModeCmd>

000105fa <dmPrivActResolveAddr>:
   105fa:	b570      	push	{r4, r5, r6, lr}
   105fc:	4d15      	ldr	r5, [pc, #84]	; (10654 <dmPrivActResolveAddr+0x5a>)
   105fe:	4e16      	ldr	r6, [pc, #88]	; (10658 <dmPrivActResolveAddr+0x5e>)
   10600:	78e9      	ldrb	r1, [r5, #3]
   10602:	b086      	sub	sp, #24
   10604:	4604      	mov	r4, r0
   10606:	b9f9      	cbnz	r1, 10648 <dmPrivActResolveAddr+0x4e>
   10608:	4603      	mov	r3, r0
   1060a:	f833 2f14 	ldrh.w	r2, [r3, #20]!
   1060e:	802a      	strh	r2, [r5, #0]
   10610:	789b      	ldrb	r3, [r3, #2]
   10612:	70ab      	strb	r3, [r5, #2]
   10614:	4603      	mov	r3, r0
   10616:	f10d 000b 	add.w	r0, sp, #11
   1061a:	f833 2f17 	ldrh.w	r2, [r3, #23]!
   1061e:	f8ad 2008 	strh.w	r2, [sp, #8]
   10622:	789b      	ldrb	r3, [r3, #2]
   10624:	f88d 300a 	strb.w	r3, [sp, #10]
   10628:	220d      	movs	r2, #13
   1062a:	f7fb fe97 	bl	c35c <memset>
   1062e:	2301      	movs	r3, #1
   10630:	4620      	mov	r0, r4
   10632:	2161      	movs	r1, #97	; 0x61
   10634:	70eb      	strb	r3, [r5, #3]
   10636:	f830 3b04 	ldrh.w	r3, [r0], #4
   1063a:	7b32      	ldrb	r2, [r6, #12]
   1063c:	9100      	str	r1, [sp, #0]
   1063e:	a902      	add	r1, sp, #8
   10640:	f00a fc66 	bl	1af10 <SecAes>
   10644:	b006      	add	sp, #24
   10646:	bd70      	pop	{r4, r5, r6, pc}
   10648:	f240 7337 	movw	r3, #1847	; 0x737
   1064c:	8043      	strh	r3, [r0, #2]
   1064e:	68b3      	ldr	r3, [r6, #8]
   10650:	4798      	blx	r3
   10652:	e7f7      	b.n	10644 <dmPrivActResolveAddr+0x4a>
   10654:	1001930c 	.word	0x1001930c
   10658:	100192f4 	.word	0x100192f4

0001065c <dmPrivActSetAddrResEnable>:
   1065c:	b510      	push	{r4, lr}
   1065e:	7904      	ldrb	r4, [r0, #4]
   10660:	4620      	mov	r0, r4
   10662:	f005 ff17 	bl	16494 <HciLeSetAddrResolutionEnable>
   10666:	4b01      	ldr	r3, [pc, #4]	; (1066c <dmPrivActSetAddrResEnable+0x10>)
   10668:	725c      	strb	r4, [r3, #9]
   1066a:	bd10      	pop	{r4, pc}
   1066c:	1001930c 	.word	0x1001930c

00010670 <dmPrivHciHandler>:
   10670:	7883      	ldrb	r3, [r0, #2]
   10672:	3b15      	subs	r3, #21
   10674:	b570      	push	{r4, r5, r6, lr}
   10676:	4604      	mov	r4, r0
   10678:	2b05      	cmp	r3, #5
   1067a:	d83f      	bhi.n	106fc <dmPrivHciHandler+0x8c>
   1067c:	e8df f003 	tbb	[pc, r3]
   10680:	2f201a03 	.word	0x2f201a03
   10684:	3432      	.short	0x3432
   10686:	4d1e      	ldr	r5, [pc, #120]	; (10700 <dmPrivHciHandler+0x90>)
   10688:	2339      	movs	r3, #57	; 0x39
   1068a:	7083      	strb	r3, [r0, #2]
   1068c:	88ab      	ldrh	r3, [r5, #4]
   1068e:	8003      	strh	r3, [r0, #0]
   10690:	78c3      	ldrb	r3, [r0, #3]
   10692:	b94b      	cbnz	r3, 106a8 <dmPrivHciHandler+0x38>
   10694:	7a2b      	ldrb	r3, [r5, #8]
   10696:	b13b      	cbz	r3, 106a8 <dmPrivHciHandler+0x38>
   10698:	4b1a      	ldr	r3, [pc, #104]	; (10704 <dmPrivHciHandler+0x94>)
   1069a:	7d1b      	ldrb	r3, [r3, #20]
   1069c:	b923      	cbnz	r3, 106a8 <dmPrivHciHandler+0x38>
   1069e:	2001      	movs	r0, #1
   106a0:	f005 fef8 	bl	16494 <HciLeSetAddrResolutionEnable>
   106a4:	2301      	movs	r3, #1
   106a6:	726b      	strb	r3, [r5, #9]
   106a8:	4b16      	ldr	r3, [pc, #88]	; (10704 <dmPrivHciHandler+0x94>)
   106aa:	4620      	mov	r0, r4
   106ac:	689b      	ldr	r3, [r3, #8]
   106ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106b2:	4718      	bx	r3
   106b4:	233a      	movs	r3, #58	; 0x3a
   106b6:	7083      	strb	r3, [r0, #2]
   106b8:	4b11      	ldr	r3, [pc, #68]	; (10700 <dmPrivHciHandler+0x90>)
   106ba:	88db      	ldrh	r3, [r3, #6]
   106bc:	8003      	strh	r3, [r0, #0]
   106be:	e7f3      	b.n	106a8 <dmPrivHciHandler+0x38>
   106c0:	78c5      	ldrb	r5, [r0, #3]
   106c2:	233b      	movs	r3, #59	; 0x3b
   106c4:	7083      	strb	r3, [r0, #2]
   106c6:	2d00      	cmp	r5, #0
   106c8:	d1ee      	bne.n	106a8 <dmPrivHciHandler+0x38>
   106ca:	4b0e      	ldr	r3, [pc, #56]	; (10704 <dmPrivHciHandler+0x94>)
   106cc:	7d1b      	ldrb	r3, [r3, #20]
   106ce:	2b00      	cmp	r3, #0
   106d0:	d0ea      	beq.n	106a8 <dmPrivHciHandler+0x38>
   106d2:	4628      	mov	r0, r5
   106d4:	f005 fede 	bl	16494 <HciLeSetAddrResolutionEnable>
   106d8:	4b09      	ldr	r3, [pc, #36]	; (10700 <dmPrivHciHandler+0x90>)
   106da:	725d      	strb	r5, [r3, #9]
   106dc:	e7e4      	b.n	106a8 <dmPrivHciHandler+0x38>
   106de:	233c      	movs	r3, #60	; 0x3c
   106e0:	70a3      	strb	r3, [r4, #2]
   106e2:	e7e1      	b.n	106a8 <dmPrivHciHandler+0x38>
   106e4:	233d      	movs	r3, #61	; 0x3d
   106e6:	e7fb      	b.n	106e0 <dmPrivHciHandler+0x70>
   106e8:	233e      	movs	r3, #62	; 0x3e
   106ea:	7083      	strb	r3, [r0, #2]
   106ec:	78c3      	ldrb	r3, [r0, #3]
   106ee:	2b00      	cmp	r3, #0
   106f0:	d1da      	bne.n	106a8 <dmPrivHciHandler+0x38>
   106f2:	4b03      	ldr	r3, [pc, #12]	; (10700 <dmPrivHciHandler+0x90>)
   106f4:	7a5a      	ldrb	r2, [r3, #9]
   106f6:	4b03      	ldr	r3, [pc, #12]	; (10704 <dmPrivHciHandler+0x94>)
   106f8:	751a      	strb	r2, [r3, #20]
   106fa:	e7d5      	b.n	106a8 <dmPrivHciHandler+0x38>
   106fc:	bd70      	pop	{r4, r5, r6, pc}
   106fe:	bf00      	nop
   10700:	1001930c 	.word	0x1001930c
   10704:	100192f4 	.word	0x100192f4

00010708 <DmPrivInit>:
   10708:	4b01      	ldr	r3, [pc, #4]	; (10710 <DmPrivInit+0x8>)
   1070a:	4a02      	ldr	r2, [pc, #8]	; (10714 <DmPrivInit+0xc>)
   1070c:	619a      	str	r2, [r3, #24]
   1070e:	4770      	bx	lr
   10710:	10002f84 	.word	0x10002f84
   10714:	0003bc60 	.word	0x0003bc60

00010718 <DmPrivResolveAddr>:
   10718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1071a:	4605      	mov	r5, r0
   1071c:	201a      	movs	r0, #26
   1071e:	460e      	mov	r6, r1
   10720:	4617      	mov	r7, r2
   10722:	f00a f96e 	bl	1aa02 <WsfMsgAlloc>
   10726:	4604      	mov	r4, r0
   10728:	b190      	cbz	r0, 10750 <DmPrivResolveAddr+0x38>
   1072a:	2360      	movs	r3, #96	; 0x60
   1072c:	7083      	strb	r3, [r0, #2]
   1072e:	4631      	mov	r1, r6
   10730:	f820 7b04 	strh.w	r7, [r0], #4
   10734:	f00f fb0e 	bl	1fd54 <Calc128Cpy>
   10738:	4629      	mov	r1, r5
   1073a:	f104 0014 	add.w	r0, r4, #20
   1073e:	f00f fa88 	bl	1fc52 <BdaCpy>
   10742:	4b04      	ldr	r3, [pc, #16]	; (10754 <DmPrivResolveAddr+0x3c>)
   10744:	4621      	mov	r1, r4
   10746:	7b18      	ldrb	r0, [r3, #12]
   10748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1074c:	f00a b97d 	b.w	1aa4a <WsfMsgSend>
   10750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10752:	bf00      	nop
   10754:	100192f4 	.word	0x100192f4

00010758 <DmPrivAddDevToResList>:
   10758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1075c:	4681      	mov	r9, r0
   1075e:	202c      	movs	r0, #44	; 0x2c
   10760:	4688      	mov	r8, r1
   10762:	4617      	mov	r7, r2
   10764:	461e      	mov	r6, r3
   10766:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1076a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
   1076e:	f00a f948 	bl	1aa02 <WsfMsgAlloc>
   10772:	4604      	mov	r4, r0
   10774:	b1e0      	cbz	r0, 107b0 <DmPrivAddDevToResList+0x58>
   10776:	2362      	movs	r3, #98	; 0x62
   10778:	7083      	strb	r3, [r0, #2]
   1077a:	f8a0 a000 	strh.w	sl, [r0]
   1077e:	f880 9004 	strb.w	r9, [r0, #4]
   10782:	4641      	mov	r1, r8
   10784:	3005      	adds	r0, #5
   10786:	f00f fa64 	bl	1fc52 <BdaCpy>
   1078a:	4639      	mov	r1, r7
   1078c:	f104 000b 	add.w	r0, r4, #11
   10790:	f00f fae0 	bl	1fd54 <Calc128Cpy>
   10794:	4631      	mov	r1, r6
   10796:	f104 001b 	add.w	r0, r4, #27
   1079a:	f00f fadb 	bl	1fd54 <Calc128Cpy>
   1079e:	4b05      	ldr	r3, [pc, #20]	; (107b4 <DmPrivAddDevToResList+0x5c>)
   107a0:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
   107a4:	4621      	mov	r1, r4
   107a6:	7b18      	ldrb	r0, [r3, #12]
   107a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107ac:	f00a b94d 	b.w	1aa4a <WsfMsgSend>
   107b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   107b4:	100192f4 	.word	0x100192f4

000107b8 <DmPrivRemDevFromResList>:
   107b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107ba:	4606      	mov	r6, r0
   107bc:	200c      	movs	r0, #12
   107be:	460d      	mov	r5, r1
   107c0:	4617      	mov	r7, r2
   107c2:	f00a f91e 	bl	1aa02 <WsfMsgAlloc>
   107c6:	4604      	mov	r4, r0
   107c8:	b170      	cbz	r0, 107e8 <DmPrivRemDevFromResList+0x30>
   107ca:	2363      	movs	r3, #99	; 0x63
   107cc:	7083      	strb	r3, [r0, #2]
   107ce:	8007      	strh	r7, [r0, #0]
   107d0:	7106      	strb	r6, [r0, #4]
   107d2:	4629      	mov	r1, r5
   107d4:	3005      	adds	r0, #5
   107d6:	f00f fa3c 	bl	1fc52 <BdaCpy>
   107da:	4b04      	ldr	r3, [pc, #16]	; (107ec <DmPrivRemDevFromResList+0x34>)
   107dc:	4621      	mov	r1, r4
   107de:	7b18      	ldrb	r0, [r3, #12]
   107e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   107e4:	f00a b931 	b.w	1aa4a <WsfMsgSend>
   107e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107ea:	bf00      	nop
   107ec:	100192f4 	.word	0x100192f4

000107f0 <DmPrivClearResList>:
   107f0:	b508      	push	{r3, lr}
   107f2:	202c      	movs	r0, #44	; 0x2c
   107f4:	f00a f905 	bl	1aa02 <WsfMsgAlloc>
   107f8:	4601      	mov	r1, r0
   107fa:	b138      	cbz	r0, 1080c <DmPrivClearResList+0x1c>
   107fc:	2364      	movs	r3, #100	; 0x64
   107fe:	7083      	strb	r3, [r0, #2]
   10800:	4b03      	ldr	r3, [pc, #12]	; (10810 <DmPrivClearResList+0x20>)
   10802:	7b18      	ldrb	r0, [r3, #12]
   10804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10808:	f00a b91f 	b.w	1aa4a <WsfMsgSend>
   1080c:	bd08      	pop	{r3, pc}
   1080e:	bf00      	nop
   10810:	100192f4 	.word	0x100192f4

00010814 <DmPrivReadPeerResolvableAddr>:
   10814:	f005 bdf4 	b.w	16400 <HciLeReadPeerResolvableAddr>

00010818 <DmPrivReadLocalResolvableAddr>:
   10818:	f005 be17 	b.w	1644a <HciLeReadLocalResolvableAddr>

0001081c <DmPrivSetAddrResEnable>:
   1081c:	b510      	push	{r4, lr}
   1081e:	4604      	mov	r4, r0
   10820:	202c      	movs	r0, #44	; 0x2c
   10822:	f00a f8ee 	bl	1aa02 <WsfMsgAlloc>
   10826:	4601      	mov	r1, r0
   10828:	b150      	cbz	r0, 10840 <DmPrivSetAddrResEnable+0x24>
   1082a:	2365      	movs	r3, #101	; 0x65
   1082c:	7083      	strb	r3, [r0, #2]
   1082e:	2300      	movs	r3, #0
   10830:	8003      	strh	r3, [r0, #0]
   10832:	4b04      	ldr	r3, [pc, #16]	; (10844 <DmPrivSetAddrResEnable+0x28>)
   10834:	7104      	strb	r4, [r0, #4]
   10836:	7b18      	ldrb	r0, [r3, #12]
   10838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1083c:	f00a b905 	b.w	1aa4a <WsfMsgSend>
   10840:	bd10      	pop	{r4, pc}
   10842:	bf00      	nop
   10844:	100192f4 	.word	0x100192f4

00010848 <DmPrivSetResolvablePrivateAddrTimeout>:
   10848:	f005 be41 	b.w	164ce <HciLeSetResolvablePrivateAddrTimeout>

0001084c <DmPrivSetPrivacyMode>:
   1084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1084e:	4607      	mov	r7, r0
   10850:	200c      	movs	r0, #12
   10852:	460e      	mov	r6, r1
   10854:	4615      	mov	r5, r2
   10856:	f00a f8d4 	bl	1aa02 <WsfMsgAlloc>
   1085a:	4604      	mov	r4, r0
   1085c:	b170      	cbz	r0, 1087c <DmPrivSetPrivacyMode+0x30>
   1085e:	2366      	movs	r3, #102	; 0x66
   10860:	7083      	strb	r3, [r0, #2]
   10862:	7107      	strb	r7, [r0, #4]
   10864:	4631      	mov	r1, r6
   10866:	3005      	adds	r0, #5
   10868:	f00f f9f3 	bl	1fc52 <BdaCpy>
   1086c:	4b04      	ldr	r3, [pc, #16]	; (10880 <DmPrivSetPrivacyMode+0x34>)
   1086e:	72e5      	strb	r5, [r4, #11]
   10870:	4621      	mov	r1, r4
   10872:	7b18      	ldrb	r0, [r3, #12]
   10874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10878:	f00a b8e7 	b.w	1aa4a <WsfMsgSend>
   1087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1087e:	bf00      	nop
   10880:	100192f4 	.word	0x100192f4

00010884 <dmSecMsgHandler>:
   10884:	b570      	push	{r4, r5, r6, lr}
   10886:	4605      	mov	r5, r0
   10888:	7800      	ldrb	r0, [r0, #0]
   1088a:	f7ff f9b7 	bl	fbfc <dmConnCcbById>
   1088e:	4604      	mov	r4, r0
   10890:	b120      	cbz	r0, 1089c <dmSecMsgHandler+0x18>
   10892:	78ab      	ldrb	r3, [r5, #2]
   10894:	2b50      	cmp	r3, #80	; 0x50
   10896:	d002      	beq.n	1089e <dmSecMsgHandler+0x1a>
   10898:	2b51      	cmp	r3, #81	; 0x51
   1089a:	d012      	beq.n	108c2 <dmSecMsgHandler+0x3e>
   1089c:	bd70      	pop	{r4, r5, r6, pc}
   1089e:	2201      	movs	r2, #1
   108a0:	2102      	movs	r1, #2
   108a2:	7c00      	ldrb	r0, [r0, #16]
   108a4:	f7ff fc2a 	bl	100fc <DmConnSetIdle>
   108a8:	7fab      	ldrb	r3, [r5, #30]
   108aa:	7623      	strb	r3, [r4, #24]
   108ac:	2301      	movs	r3, #1
   108ae:	74a3      	strb	r3, [r4, #18]
   108b0:	8baa      	ldrh	r2, [r5, #28]
   108b2:	89a0      	ldrh	r0, [r4, #12]
   108b4:	1d2b      	adds	r3, r5, #4
   108b6:	f105 0114 	add.w	r1, r5, #20
   108ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   108be:	f005 bbee 	b.w	1609e <HciLeStartEncryptionCmd>
   108c2:	7d2a      	ldrb	r2, [r5, #20]
   108c4:	b13a      	cbz	r2, 108d6 <dmSecMsgHandler+0x52>
   108c6:	7d6b      	ldrb	r3, [r5, #21]
   108c8:	7603      	strb	r3, [r0, #24]
   108ca:	1d29      	adds	r1, r5, #4
   108cc:	8980      	ldrh	r0, [r0, #12]
   108ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   108d2:	f005 b9ee 	b.w	15cb2 <HciLeLtkReqReplCmd>
   108d6:	7c00      	ldrb	r0, [r0, #16]
   108d8:	2102      	movs	r1, #2
   108da:	f7ff fc0f 	bl	100fc <DmConnSetIdle>
   108de:	89a0      	ldrh	r0, [r4, #12]
   108e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   108e4:	f005 b9bf 	b.w	15c66 <HciLeLtkReqNegReplCmd>

000108e8 <dmSecApiLtkMsg>:
   108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108ea:	4606      	mov	r6, r0
   108ec:	2020      	movs	r0, #32
   108ee:	460d      	mov	r5, r1
   108f0:	4614      	mov	r4, r2
   108f2:	461f      	mov	r7, r3
   108f4:	f00a f885 	bl	1aa02 <WsfMsgAlloc>
   108f8:	b1a8      	cbz	r0, 10926 <dmSecApiLtkMsg+0x3e>
   108fa:	7087      	strb	r7, [r0, #2]
   108fc:	8006      	strh	r6, [r0, #0]
   108fe:	70c5      	strb	r5, [r0, #3]
   10900:	4622      	mov	r2, r4
   10902:	1d03      	adds	r3, r0, #4
   10904:	f104 0118 	add.w	r1, r4, #24
   10908:	f852 4b04 	ldr.w	r4, [r2], #4
   1090c:	f843 4b04 	str.w	r4, [r3], #4
   10910:	428a      	cmp	r2, r1
   10912:	d1f9      	bne.n	10908 <dmSecApiLtkMsg+0x20>
   10914:	8812      	ldrh	r2, [r2, #0]
   10916:	801a      	strh	r2, [r3, #0]
   10918:	4b03      	ldr	r3, [pc, #12]	; (10928 <dmSecApiLtkMsg+0x40>)
   1091a:	4601      	mov	r1, r0
   1091c:	7b18      	ldrb	r0, [r3, #12]
   1091e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10922:	f00a b892 	b.w	1aa4a <WsfMsgSend>
   10926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10928:	100192f4 	.word	0x100192f4

0001092c <DmSmpCbackExec>:
   1092c:	7883      	ldrb	r3, [r0, #2]
   1092e:	2b2a      	cmp	r3, #42	; 0x2a
   10930:	b510      	push	{r4, lr}
   10932:	4604      	mov	r4, r0
   10934:	d001      	beq.n	1093a <DmSmpCbackExec+0xe>
   10936:	2b2c      	cmp	r3, #44	; 0x2c
   10938:	d105      	bne.n	10946 <DmSmpCbackExec+0x1a>
   1093a:	4b06      	ldr	r3, [pc, #24]	; (10954 <DmSmpCbackExec+0x28>)
   1093c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   10940:	b10b      	cbz	r3, 10946 <DmSmpCbackExec+0x1a>
   10942:	4620      	mov	r0, r4
   10944:	4798      	blx	r3
   10946:	4b04      	ldr	r3, [pc, #16]	; (10958 <DmSmpCbackExec+0x2c>)
   10948:	4620      	mov	r0, r4
   1094a:	689b      	ldr	r3, [r3, #8]
   1094c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10950:	4718      	bx	r3
   10952:	bf00      	nop
   10954:	10019164 	.word	0x10019164
   10958:	100192f4 	.word	0x100192f4

0001095c <dmSecHciHandler>:
   1095c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1095e:	4605      	mov	r5, r0
   10960:	8800      	ldrh	r0, [r0, #0]
   10962:	f7ff f864 	bl	fa2e <dmConnCcbByHandle>
   10966:	4604      	mov	r4, r0
   10968:	b1c0      	cbz	r0, 1099c <dmSecHciHandler+0x40>
   1096a:	78ab      	ldrb	r3, [r5, #2]
   1096c:	2b10      	cmp	r3, #16
   1096e:	d127      	bne.n	109c0 <dmSecHciHandler+0x64>
   10970:	89eb      	ldrh	r3, [r5, #14]
   10972:	b9ab      	cbnz	r3, 109a0 <dmSecHciHandler+0x44>
   10974:	2208      	movs	r2, #8
   10976:	4926      	ldr	r1, [pc, #152]	; (10a10 <dmSecHciHandler+0xb4>)
   10978:	1da8      	adds	r0, r5, #6
   1097a:	f7fb fbc1 	bl	c100 <memcmp>
   1097e:	4606      	mov	r6, r0
   10980:	b970      	cbnz	r0, 109a0 <dmSecHciHandler+0x44>
   10982:	4669      	mov	r1, sp
   10984:	7c20      	ldrb	r0, [r4, #16]
   10986:	f000 fda3 	bl	114d0 <SmpDmGetStk>
   1098a:	4601      	mov	r1, r0
   1098c:	b140      	cbz	r0, 109a0 <dmSecHciHandler+0x44>
   1098e:	f89d 3000 	ldrb.w	r3, [sp]
   10992:	7623      	strb	r3, [r4, #24]
   10994:	74a6      	strb	r6, [r4, #18]
   10996:	8828      	ldrh	r0, [r5, #0]
   10998:	f005 f98b 	bl	15cb2 <HciLeLtkReqReplCmd>
   1099c:	b002      	add	sp, #8
   1099e:	bd70      	pop	{r4, r5, r6, pc}
   109a0:	7c20      	ldrb	r0, [r4, #16]
   109a2:	2201      	movs	r2, #1
   109a4:	2102      	movs	r1, #2
   109a6:	f7ff fba9 	bl	100fc <DmConnSetIdle>
   109aa:	2301      	movs	r3, #1
   109ac:	74a3      	strb	r3, [r4, #18]
   109ae:	7c23      	ldrb	r3, [r4, #16]
   109b0:	802b      	strh	r3, [r5, #0]
   109b2:	2330      	movs	r3, #48	; 0x30
   109b4:	70ab      	strb	r3, [r5, #2]
   109b6:	4b17      	ldr	r3, [pc, #92]	; (10a14 <dmSecHciHandler+0xb8>)
   109b8:	4628      	mov	r0, r5
   109ba:	689b      	ldr	r3, [r3, #8]
   109bc:	4798      	blx	r3
   109be:	e7ed      	b.n	1099c <dmSecHciHandler+0x40>
   109c0:	3b0e      	subs	r3, #14
   109c2:	2b01      	cmp	r3, #1
   109c4:	d8ea      	bhi.n	1099c <dmSecHciHandler+0x40>
   109c6:	2200      	movs	r2, #0
   109c8:	2102      	movs	r1, #2
   109ca:	7c00      	ldrb	r0, [r0, #16]
   109cc:	f7ff fb96 	bl	100fc <DmConnSetIdle>
   109d0:	7c23      	ldrb	r3, [r4, #16]
   109d2:	f8ad 3000 	strh.w	r3, [sp]
   109d6:	78eb      	ldrb	r3, [r5, #3]
   109d8:	f88d 3003 	strb.w	r3, [sp, #3]
   109dc:	b9a3      	cbnz	r3, 10a08 <dmSecHciHandler+0xac>
   109de:	232c      	movs	r3, #44	; 0x2c
   109e0:	f88d 3002 	strb.w	r3, [sp, #2]
   109e4:	7e23      	ldrb	r3, [r4, #24]
   109e6:	75e3      	strb	r3, [r4, #23]
   109e8:	7ca3      	ldrb	r3, [r4, #18]
   109ea:	f88d 3004 	strb.w	r3, [sp, #4]
   109ee:	4668      	mov	r0, sp
   109f0:	f7ff ff9c 	bl	1092c <DmSmpCbackExec>
   109f4:	7c23      	ldrb	r3, [r4, #16]
   109f6:	f8ad 3000 	strh.w	r3, [sp]
   109fa:	4668      	mov	r0, sp
   109fc:	78eb      	ldrb	r3, [r5, #3]
   109fe:	f88d 3003 	strb.w	r3, [sp, #3]
   10a02:	f000 fddf 	bl	115c4 <SmpDmEncryptInd>
   10a06:	e7c9      	b.n	1099c <dmSecHciHandler+0x40>
   10a08:	232d      	movs	r3, #45	; 0x2d
   10a0a:	f88d 3002 	strb.w	r3, [sp, #2]
   10a0e:	e7ee      	b.n	109ee <dmSecHciHandler+0x92>
   10a10:	0003ce74 	.word	0x0003ce74
   10a14:	100192f4 	.word	0x100192f4

00010a18 <DmSecCancelReq>:
   10a18:	b538      	push	{r3, r4, r5, lr}
   10a1a:	4605      	mov	r5, r0
   10a1c:	2004      	movs	r0, #4
   10a1e:	460c      	mov	r4, r1
   10a20:	f009 ffef 	bl	1aa02 <WsfMsgAlloc>
   10a24:	b138      	cbz	r0, 10a36 <DmSecCancelReq+0x1e>
   10a26:	2203      	movs	r2, #3
   10a28:	7082      	strb	r2, [r0, #2]
   10a2a:	70c4      	strb	r4, [r0, #3]
   10a2c:	8005      	strh	r5, [r0, #0]
   10a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10a32:	f000 bd44 	b.w	114be <SmpDmMsgSend>
   10a36:	bd38      	pop	{r3, r4, r5, pc}

00010a38 <DmSecAuthRsp>:
   10a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a3a:	4607      	mov	r7, r0
   10a3c:	2016      	movs	r0, #22
   10a3e:	460e      	mov	r6, r1
   10a40:	4615      	mov	r5, r2
   10a42:	f009 ffde 	bl	1aa02 <WsfMsgAlloc>
   10a46:	4604      	mov	r4, r0
   10a48:	b170      	cbz	r0, 10a68 <DmSecAuthRsp+0x30>
   10a4a:	2304      	movs	r3, #4
   10a4c:	7083      	strb	r3, [r0, #2]
   10a4e:	8007      	strh	r7, [r0, #0]
   10a50:	7506      	strb	r6, [r0, #20]
   10a52:	b125      	cbz	r5, 10a5e <DmSecAuthRsp+0x26>
   10a54:	4632      	mov	r2, r6
   10a56:	4629      	mov	r1, r5
   10a58:	4418      	add	r0, r3
   10a5a:	f7fb fb81 	bl	c160 <memcpy>
   10a5e:	4620      	mov	r0, r4
   10a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10a64:	f000 bd2b 	b.w	114be <SmpDmMsgSend>
   10a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010a6a <DmSecInit>:
   10a6a:	4b04      	ldr	r3, [pc, #16]	; (10a7c <DmSecInit+0x12>)
   10a6c:	4a04      	ldr	r2, [pc, #16]	; (10a80 <DmSecInit+0x16>)
   10a6e:	615a      	str	r2, [r3, #20]
   10a70:	4b04      	ldr	r3, [pc, #16]	; (10a84 <DmSecInit+0x1a>)
   10a72:	4a05      	ldr	r2, [pc, #20]	; (10a88 <DmSecInit+0x1e>)
   10a74:	e9c3 2200 	strd	r2, r2, [r3]
   10a78:	4770      	bx	lr
   10a7a:	bf00      	nop
   10a7c:	10002f84 	.word	0x10002f84
   10a80:	0003bc6c 	.word	0x0003bc6c
   10a84:	10019318 	.word	0x10019318
   10a88:	0003ce74 	.word	0x0003ce74

00010a8c <DmSecSetLocalCsrk>:
   10a8c:	b510      	push	{r4, lr}
   10a8e:	4604      	mov	r4, r0
   10a90:	f00f fcd8 	bl	20444 <WsfTaskLock>
   10a94:	4b02      	ldr	r3, [pc, #8]	; (10aa0 <DmSecSetLocalCsrk+0x14>)
   10a96:	605c      	str	r4, [r3, #4]
   10a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a9c:	f00f bcd8 	b.w	20450 <WsfTaskUnlock>
   10aa0:	10019318 	.word	0x10019318

00010aa4 <DmSecSetLocalIrk>:
   10aa4:	b510      	push	{r4, lr}
   10aa6:	4604      	mov	r4, r0
   10aa8:	f00f fccc 	bl	20444 <WsfTaskLock>
   10aac:	4b02      	ldr	r3, [pc, #8]	; (10ab8 <DmSecSetLocalIrk+0x14>)
   10aae:	601c      	str	r4, [r3, #0]
   10ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10ab4:	f00f bccc 	b.w	20450 <WsfTaskUnlock>
   10ab8:	10019318 	.word	0x10019318

00010abc <DmSecGetLocalCsrk>:
   10abc:	4b01      	ldr	r3, [pc, #4]	; (10ac4 <DmSecGetLocalCsrk+0x8>)
   10abe:	6858      	ldr	r0, [r3, #4]
   10ac0:	4770      	bx	lr
   10ac2:	bf00      	nop
   10ac4:	10019318 	.word	0x10019318

00010ac8 <DmSecGetLocalIrk>:
   10ac8:	4b01      	ldr	r3, [pc, #4]	; (10ad0 <DmSecGetLocalIrk+0x8>)
   10aca:	6818      	ldr	r0, [r3, #0]
   10acc:	4770      	bx	lr
   10ace:	bf00      	nop
   10ad0:	10019318 	.word	0x10019318

00010ad4 <dmSecLescMsgHandler>:
   10ad4:	7883      	ldrb	r3, [r0, #2]
   10ad6:	2b81      	cmp	r3, #129	; 0x81
   10ad8:	b570      	push	{r4, r5, r6, lr}
   10ada:	4604      	mov	r4, r0
   10adc:	d106      	bne.n	10aec <dmSecLescMsgHandler+0x18>
   10ade:	2334      	movs	r3, #52	; 0x34
   10ae0:	7083      	strb	r3, [r0, #2]
   10ae2:	4b0d      	ldr	r3, [pc, #52]	; (10b18 <dmSecLescMsgHandler+0x44>)
   10ae4:	689b      	ldr	r3, [r3, #8]
   10ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10aea:	4718      	bx	r3
   10aec:	2b80      	cmp	r3, #128	; 0x80
   10aee:	d112      	bne.n	10b16 <dmSecLescMsgHandler+0x42>
   10af0:	2333      	movs	r3, #51	; 0x33
   10af2:	4d0a      	ldr	r5, [pc, #40]	; (10b1c <dmSecLescMsgHandler+0x48>)
   10af4:	7083      	strb	r3, [r0, #2]
   10af6:	6841      	ldr	r1, [r0, #4]
   10af8:	3004      	adds	r0, #4
   10afa:	f00f f92b 	bl	1fd54 <Calc128Cpy>
   10afe:	6829      	ldr	r1, [r5, #0]
   10b00:	f104 0014 	add.w	r0, r4, #20
   10b04:	f00f f926 	bl	1fd54 <Calc128Cpy>
   10b08:	6828      	ldr	r0, [r5, #0]
   10b0a:	f009 ff2b 	bl	1a964 <WsfBufFree>
   10b0e:	4b02      	ldr	r3, [pc, #8]	; (10b18 <dmSecLescMsgHandler+0x44>)
   10b10:	4620      	mov	r0, r4
   10b12:	689b      	ldr	r3, [r3, #8]
   10b14:	e7e7      	b.n	10ae6 <dmSecLescMsgHandler+0x12>
   10b16:	bd70      	pop	{r4, r5, r6, pc}
   10b18:	100192f4 	.word	0x100192f4
   10b1c:	10019320 	.word	0x10019320

00010b20 <DmSecKeypressReq>:
   10b20:	b538      	push	{r3, r4, r5, lr}
   10b22:	4604      	mov	r4, r0
   10b24:	2006      	movs	r0, #6
   10b26:	460d      	mov	r5, r1
   10b28:	f009 ff6b 	bl	1aa02 <WsfMsgAlloc>
   10b2c:	b138      	cbz	r0, 10b3e <DmSecKeypressReq+0x1e>
   10b2e:	2216      	movs	r2, #22
   10b30:	7105      	strb	r5, [r0, #4]
   10b32:	7082      	strb	r2, [r0, #2]
   10b34:	8004      	strh	r4, [r0, #0]
   10b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10b3a:	f000 bcc0 	b.w	114be <SmpDmMsgSend>
   10b3e:	bd38      	pop	{r3, r4, r5, pc}

00010b40 <DmSecSetOob>:
   10b40:	f000 bef9 	b.w	11936 <SmpScSetOobCfg>

00010b44 <DmSecCalcOobReq>:
   10b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b46:	4605      	mov	r5, r0
   10b48:	b08d      	sub	sp, #52	; 0x34
   10b4a:	2010      	movs	r0, #16
   10b4c:	460e      	mov	r6, r1
   10b4e:	f009 fec9 	bl	1a8e4 <WsfBufAlloc>
   10b52:	4c1a      	ldr	r4, [pc, #104]	; (10bbc <DmSecCalcOobReq+0x78>)
   10b54:	4f1a      	ldr	r7, [pc, #104]	; (10bc0 <DmSecCalcOobReq+0x7c>)
   10b56:	6020      	str	r0, [r4, #0]
   10b58:	b308      	cbz	r0, 10b9e <DmSecCalcOobReq+0x5a>
   10b5a:	4629      	mov	r1, r5
   10b5c:	f00f f8fa 	bl	1fd54 <Calc128Cpy>
   10b60:	2041      	movs	r0, #65	; 0x41
   10b62:	f009 febf 	bl	1a8e4 <WsfBufAlloc>
   10b66:	4605      	mov	r5, r0
   10b68:	b1b0      	cbz	r0, 10b98 <DmSecCalcOobReq+0x54>
   10b6a:	2220      	movs	r2, #32
   10b6c:	4631      	mov	r1, r6
   10b6e:	f000 fdff 	bl	11770 <SmpScCat>
   10b72:	2220      	movs	r2, #32
   10b74:	4631      	mov	r1, r6
   10b76:	f000 fdfb 	bl	11770 <SmpScCat>
   10b7a:	2200      	movs	r2, #0
   10b7c:	7002      	strb	r2, [r0, #0]
   10b7e:	2180      	movs	r1, #128	; 0x80
   10b80:	7b3b      	ldrb	r3, [r7, #12]
   10b82:	6820      	ldr	r0, [r4, #0]
   10b84:	e9cd 2100 	strd	r2, r1, [sp]
   10b88:	2241      	movs	r2, #65	; 0x41
   10b8a:	4629      	mov	r1, r5
   10b8c:	f00a fb96 	bl	1b2bc <SecCmac>
   10b90:	b988      	cbnz	r0, 10bb6 <DmSecCalcOobReq+0x72>
   10b92:	4628      	mov	r0, r5
   10b94:	f009 fee6 	bl	1a964 <WsfBufFree>
   10b98:	6820      	ldr	r0, [r4, #0]
   10b9a:	f009 fee3 	bl	1a964 <WsfBufFree>
   10b9e:	2224      	movs	r2, #36	; 0x24
   10ba0:	2100      	movs	r1, #0
   10ba2:	a803      	add	r0, sp, #12
   10ba4:	f7fb fbda 	bl	c35c <memset>
   10ba8:	f240 7333 	movw	r3, #1843	; 0x733
   10bac:	f8ad 300e 	strh.w	r3, [sp, #14]
   10bb0:	a803      	add	r0, sp, #12
   10bb2:	68bb      	ldr	r3, [r7, #8]
   10bb4:	4798      	blx	r3
   10bb6:	b00d      	add	sp, #52	; 0x34
   10bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bba:	bf00      	nop
   10bbc:	10019320 	.word	0x10019320
   10bc0:	100192f4 	.word	0x100192f4

00010bc4 <DmSecGenerateEccKeyReq>:
   10bc4:	4b02      	ldr	r3, [pc, #8]	; (10bd0 <DmSecGenerateEccKeyReq+0xc>)
   10bc6:	2281      	movs	r2, #129	; 0x81
   10bc8:	2100      	movs	r1, #0
   10bca:	7b18      	ldrb	r0, [r3, #12]
   10bcc:	f00a bc28 	b.w	1b420 <SecEccGenKey>
   10bd0:	100192f4 	.word	0x100192f4

00010bd4 <DmSecSetDebugEccKey>:
   10bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bd6:	4b24      	ldr	r3, [pc, #144]	; (10c68 <DmSecSetDebugEccKey+0x94>)
   10bd8:	b099      	sub	sp, #100	; 0x64
   10bda:	466a      	mov	r2, sp
   10bdc:	f103 0620 	add.w	r6, r3, #32
   10be0:	4615      	mov	r5, r2
   10be2:	6818      	ldr	r0, [r3, #0]
   10be4:	6859      	ldr	r1, [r3, #4]
   10be6:	4614      	mov	r4, r2
   10be8:	c403      	stmia	r4!, {r0, r1}
   10bea:	3308      	adds	r3, #8
   10bec:	42b3      	cmp	r3, r6
   10bee:	4622      	mov	r2, r4
   10bf0:	d1f7      	bne.n	10be2 <DmSecSetDebugEccKey+0xe>
   10bf2:	4b1e      	ldr	r3, [pc, #120]	; (10c6c <DmSecSetDebugEccKey+0x98>)
   10bf4:	ac08      	add	r4, sp, #32
   10bf6:	f103 0720 	add.w	r7, r3, #32
   10bfa:	4622      	mov	r2, r4
   10bfc:	6818      	ldr	r0, [r3, #0]
   10bfe:	6859      	ldr	r1, [r3, #4]
   10c00:	4626      	mov	r6, r4
   10c02:	c603      	stmia	r6!, {r0, r1}
   10c04:	3308      	adds	r3, #8
   10c06:	42bb      	cmp	r3, r7
   10c08:	4634      	mov	r4, r6
   10c0a:	d1f7      	bne.n	10bfc <DmSecSetDebugEccKey+0x28>
   10c0c:	4c18      	ldr	r4, [pc, #96]	; (10c70 <DmSecSetDebugEccKey+0x9c>)
   10c0e:	ae10      	add	r6, sp, #64	; 0x40
   10c10:	f104 0c20 	add.w	ip, r4, #32
   10c14:	4633      	mov	r3, r6
   10c16:	6820      	ldr	r0, [r4, #0]
   10c18:	6861      	ldr	r1, [r4, #4]
   10c1a:	4637      	mov	r7, r6
   10c1c:	c703      	stmia	r7!, {r0, r1}
   10c1e:	3408      	adds	r4, #8
   10c20:	4564      	cmp	r4, ip
   10c22:	463e      	mov	r6, r7
   10c24:	d1f7      	bne.n	10c16 <DmSecSetDebugEccKey+0x42>
   10c26:	4e13      	ldr	r6, [pc, #76]	; (10c74 <DmSecSetDebugEccKey+0xa0>)
   10c28:	462c      	mov	r4, r5
   10c2a:	cc03      	ldmia	r4!, {r0, r1}
   10c2c:	4294      	cmp	r4, r2
   10c2e:	6030      	str	r0, [r6, #0]
   10c30:	6071      	str	r1, [r6, #4]
   10c32:	4625      	mov	r5, r4
   10c34:	f106 0608 	add.w	r6, r6, #8
   10c38:	d1f6      	bne.n	10c28 <DmSecSetDebugEccKey+0x54>
   10c3a:	4d0f      	ldr	r5, [pc, #60]	; (10c78 <DmSecSetDebugEccKey+0xa4>)
   10c3c:	4614      	mov	r4, r2
   10c3e:	cc03      	ldmia	r4!, {r0, r1}
   10c40:	429c      	cmp	r4, r3
   10c42:	6028      	str	r0, [r5, #0]
   10c44:	6069      	str	r1, [r5, #4]
   10c46:	4622      	mov	r2, r4
   10c48:	f105 0508 	add.w	r5, r5, #8
   10c4c:	d1f6      	bne.n	10c3c <DmSecSetDebugEccKey+0x68>
   10c4e:	4c0b      	ldr	r4, [pc, #44]	; (10c7c <DmSecSetDebugEccKey+0xa8>)
   10c50:	ad18      	add	r5, sp, #96	; 0x60
   10c52:	461a      	mov	r2, r3
   10c54:	ca03      	ldmia	r2!, {r0, r1}
   10c56:	42aa      	cmp	r2, r5
   10c58:	6020      	str	r0, [r4, #0]
   10c5a:	6061      	str	r1, [r4, #4]
   10c5c:	4613      	mov	r3, r2
   10c5e:	f104 0408 	add.w	r4, r4, #8
   10c62:	d1f6      	bne.n	10c52 <DmSecSetDebugEccKey+0x7e>
   10c64:	b019      	add	sp, #100	; 0x64
   10c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c68:	0003bc78 	.word	0x0003bc78
   10c6c:	0003bc98 	.word	0x0003bc98
   10c70:	0003bcb8 	.word	0x0003bcb8
   10c74:	10019364 	.word	0x10019364
   10c78:	10019324 	.word	0x10019324
   10c7c:	10019344 	.word	0x10019344

00010c80 <DmSecSetEccKey>:
   10c80:	b508      	push	{r3, lr}
   10c82:	4601      	mov	r1, r0
   10c84:	2260      	movs	r2, #96	; 0x60
   10c86:	4802      	ldr	r0, [pc, #8]	; (10c90 <DmSecSetEccKey+0x10>)
   10c88:	f7fb fa6a 	bl	c160 <memcpy>
   10c8c:	bd08      	pop	{r3, pc}
   10c8e:	bf00      	nop
   10c90:	10019324 	.word	0x10019324

00010c94 <DmSecGetEccKey>:
   10c94:	4800      	ldr	r0, [pc, #0]	; (10c98 <DmSecGetEccKey+0x4>)
   10c96:	4770      	bx	lr
   10c98:	10019324 	.word	0x10019324

00010c9c <DmSecCompareRsp>:
   10c9c:	b538      	push	{r3, r4, r5, lr}
   10c9e:	4605      	mov	r5, r0
   10ca0:	2016      	movs	r0, #22
   10ca2:	460c      	mov	r4, r1
   10ca4:	f009 fead 	bl	1aa02 <WsfMsgAlloc>
   10ca8:	b158      	cbz	r0, 10cc2 <DmSecCompareRsp+0x26>
   10caa:	8005      	strh	r5, [r0, #0]
   10cac:	b12c      	cbz	r4, 10cba <DmSecCompareRsp+0x1e>
   10cae:	2315      	movs	r3, #21
   10cb0:	7083      	strb	r3, [r0, #2]
   10cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10cb6:	f000 bc02 	b.w	114be <SmpDmMsgSend>
   10cba:	f240 4303 	movw	r3, #1027	; 0x403
   10cbe:	8043      	strh	r3, [r0, #2]
   10cc0:	e7f7      	b.n	10cb2 <DmSecCompareRsp+0x16>
   10cc2:	bd38      	pop	{r3, r4, r5, pc}

00010cc4 <DmSecGetCompareValue>:
   10cc4:	7b43      	ldrb	r3, [r0, #13]
   10cc6:	7b82      	ldrb	r2, [r0, #14]
   10cc8:	041b      	lsls	r3, r3, #16
   10cca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10cce:	7bc2      	ldrb	r2, [r0, #15]
   10cd0:	7b00      	ldrb	r0, [r0, #12]
   10cd2:	4413      	add	r3, r2
   10cd4:	4a03      	ldr	r2, [pc, #12]	; (10ce4 <DmSecGetCompareValue+0x20>)
   10cd6:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   10cda:	fbb3 f0f2 	udiv	r0, r3, r2
   10cde:	fb02 3010 	mls	r0, r2, r0, r3
   10ce2:	4770      	bx	lr
   10ce4:	000f4240 	.word	0x000f4240

00010ce8 <DmSecLescInit>:
   10ce8:	4b01      	ldr	r3, [pc, #4]	; (10cf0 <DmSecLescInit+0x8>)
   10cea:	4a02      	ldr	r2, [pc, #8]	; (10cf4 <DmSecLescInit+0xc>)
   10cec:	621a      	str	r2, [r3, #32]
   10cee:	4770      	bx	lr
   10cf0:	10002f84 	.word	0x10002f84
   10cf4:	0003bcd8 	.word	0x0003bcd8

00010cf8 <DmSecPairRsp>:
   10cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cfc:	4681      	mov	r9, r0
   10cfe:	2008      	movs	r0, #8
   10d00:	4688      	mov	r8, r1
   10d02:	4617      	mov	r7, r2
   10d04:	461e      	mov	r6, r3
   10d06:	f89d 5020 	ldrb.w	r5, [sp, #32]
   10d0a:	f009 fe7a 	bl	1aa02 <WsfMsgAlloc>
   10d0e:	b180      	cbz	r0, 10d32 <DmSecPairRsp+0x3a>
   10d10:	2302      	movs	r3, #2
   10d12:	f006 0607 	and.w	r6, r6, #7
   10d16:	f005 0507 	and.w	r5, r5, #7
   10d1a:	7083      	strb	r3, [r0, #2]
   10d1c:	f880 8004 	strb.w	r8, [r0, #4]
   10d20:	7147      	strb	r7, [r0, #5]
   10d22:	7186      	strb	r6, [r0, #6]
   10d24:	71c5      	strb	r5, [r0, #7]
   10d26:	f8a0 9000 	strh.w	r9, [r0]
   10d2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d2e:	f000 bbc6 	b.w	114be <SmpDmMsgSend>
   10d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010d36 <DmSecSlaveReq>:
   10d36:	b538      	push	{r3, r4, r5, lr}
   10d38:	4605      	mov	r5, r0
   10d3a:	2006      	movs	r0, #6
   10d3c:	460c      	mov	r4, r1
   10d3e:	f009 fe60 	bl	1aa02 <WsfMsgAlloc>
   10d42:	b138      	cbz	r0, 10d54 <DmSecSlaveReq+0x1e>
   10d44:	2205      	movs	r2, #5
   10d46:	7082      	strb	r2, [r0, #2]
   10d48:	7104      	strb	r4, [r0, #4]
   10d4a:	8005      	strh	r5, [r0, #0]
   10d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10d50:	f000 bbb5 	b.w	114be <SmpDmMsgSend>
   10d54:	bd38      	pop	{r3, r4, r5, pc}

00010d56 <DmSecLtkRsp>:
   10d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d5a:	4680      	mov	r8, r0
   10d5c:	2016      	movs	r0, #22
   10d5e:	460d      	mov	r5, r1
   10d60:	4617      	mov	r7, r2
   10d62:	461e      	mov	r6, r3
   10d64:	f009 fe4d 	bl	1aa02 <WsfMsgAlloc>
   10d68:	4604      	mov	r4, r0
   10d6a:	b188      	cbz	r0, 10d90 <DmSecLtkRsp+0x3a>
   10d6c:	2351      	movs	r3, #81	; 0x51
   10d6e:	7083      	strb	r3, [r0, #2]
   10d70:	f8a0 8000 	strh.w	r8, [r0]
   10d74:	7505      	strb	r5, [r0, #20]
   10d76:	7547      	strb	r7, [r0, #21]
   10d78:	b11d      	cbz	r5, 10d82 <DmSecLtkRsp+0x2c>
   10d7a:	4631      	mov	r1, r6
   10d7c:	3004      	adds	r0, #4
   10d7e:	f00e ffe9 	bl	1fd54 <Calc128Cpy>
   10d82:	4b04      	ldr	r3, [pc, #16]	; (10d94 <DmSecLtkRsp+0x3e>)
   10d84:	4621      	mov	r1, r4
   10d86:	7b18      	ldrb	r0, [r3, #12]
   10d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10d8c:	f009 be5d 	b.w	1aa4a <WsfMsgSend>
   10d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d94:	100192f4 	.word	0x100192f4

00010d98 <l2cDefaultDataCback>:
   10d98:	4770      	bx	lr

00010d9a <l2cDefaultDataCidCback>:
   10d9a:	4770      	bx	lr

00010d9c <l2cDefaultCtrlCback>:
   10d9c:	4770      	bx	lr

00010d9e <l2cHciFlowCback>:
   10d9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10da0:	460d      	mov	r5, r1
   10da2:	f7ff f949 	bl	10038 <DmConnIdByHandle>
   10da6:	b280      	uxth	r0, r0
   10da8:	f8ad 0004 	strh.w	r0, [sp, #4]
   10dac:	b178      	cbz	r0, 10dce <l2cHciFlowCback+0x30>
   10dae:	4c09      	ldr	r4, [pc, #36]	; (10dd4 <l2cHciFlowCback+0x36>)
   10db0:	f88d 5006 	strb.w	r5, [sp, #6]
   10db4:	68e3      	ldr	r3, [r4, #12]
   10db6:	a801      	add	r0, sp, #4
   10db8:	4798      	blx	r3
   10dba:	6923      	ldr	r3, [r4, #16]
   10dbc:	f88d 5006 	strb.w	r5, [sp, #6]
   10dc0:	a801      	add	r0, sp, #4
   10dc2:	4798      	blx	r3
   10dc4:	f88d 5006 	strb.w	r5, [sp, #6]
   10dc8:	6963      	ldr	r3, [r4, #20]
   10dca:	a801      	add	r0, sp, #4
   10dcc:	4798      	blx	r3
   10dce:	b003      	add	sp, #12
   10dd0:	bd30      	pop	{r4, r5, pc}
   10dd2:	bf00      	nop
   10dd4:	10019384 	.word	0x10019384

00010dd8 <l2cHciAclCback>:
   10dd8:	b570      	push	{r4, r5, r6, lr}
   10dda:	78c2      	ldrb	r2, [r0, #3]
   10ddc:	7883      	ldrb	r3, [r0, #2]
   10dde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10de2:	b29b      	uxth	r3, r3
   10de4:	2b03      	cmp	r3, #3
   10de6:	bf83      	ittte	hi
   10de8:	7942      	ldrbhi	r2, [r0, #5]
   10dea:	7901      	ldrbhi	r1, [r0, #4]
   10dec:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   10df0:	2100      	movls	r1, #0
   10df2:	bf8a      	itet	hi
   10df4:	b289      	uxthhi	r1, r1
   10df6:	1d02      	addls	r2, r0, #4
   10df8:	1d82      	addhi	r2, r0, #6
   10dfa:	4604      	mov	r4, r0
   10dfc:	1d08      	adds	r0, r1, #4
   10dfe:	4283      	cmp	r3, r0
   10e00:	d116      	bne.n	10e30 <l2cHciAclCback+0x58>
   10e02:	7863      	ldrb	r3, [r4, #1]
   10e04:	7820      	ldrb	r0, [r4, #0]
   10e06:	7815      	ldrb	r5, [r2, #0]
   10e08:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   10e0c:	7853      	ldrb	r3, [r2, #1]
   10e0e:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   10e12:	b2ad      	uxth	r5, r5
   10e14:	2d05      	cmp	r5, #5
   10e16:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10e1a:	4b0c      	ldr	r3, [pc, #48]	; (10e4c <l2cHciAclCback+0x74>)
   10e1c:	d005      	beq.n	10e2a <l2cHciAclCback+0x52>
   10e1e:	2d06      	cmp	r5, #6
   10e20:	d00b      	beq.n	10e3a <l2cHciAclCback+0x62>
   10e22:	2d04      	cmp	r5, #4
   10e24:	d10b      	bne.n	10e3e <l2cHciAclCback+0x66>
   10e26:	681b      	ldr	r3, [r3, #0]
   10e28:	e000      	b.n	10e2c <l2cHciAclCback+0x54>
   10e2a:	689b      	ldr	r3, [r3, #8]
   10e2c:	4622      	mov	r2, r4
   10e2e:	4798      	blx	r3
   10e30:	4620      	mov	r0, r4
   10e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e36:	f009 bdfb 	b.w	1aa30 <WsfMsgFree>
   10e3a:	685b      	ldr	r3, [r3, #4]
   10e3c:	e7f6      	b.n	10e2c <l2cHciAclCback+0x54>
   10e3e:	6a1e      	ldr	r6, [r3, #32]
   10e40:	460a      	mov	r2, r1
   10e42:	4623      	mov	r3, r4
   10e44:	4629      	mov	r1, r5
   10e46:	47b0      	blx	r6
   10e48:	e7f2      	b.n	10e30 <l2cHciAclCback+0x58>
   10e4a:	bf00      	nop
   10e4c:	10019384 	.word	0x10019384

00010e50 <l2cRxSignalingPkt>:
   10e50:	b570      	push	{r4, r5, r6, lr}
   10e52:	460d      	mov	r5, r1
   10e54:	4616      	mov	r6, r2
   10e56:	4604      	mov	r4, r0
   10e58:	f7ff f8ee 	bl	10038 <DmConnIdByHandle>
   10e5c:	f7ff f978 	bl	10150 <DmConnRole>
   10e60:	b940      	cbnz	r0, 10e74 <l2cRxSignalingPkt+0x24>
   10e62:	4b07      	ldr	r3, [pc, #28]	; (10e80 <l2cRxSignalingPkt+0x30>)
   10e64:	699b      	ldr	r3, [r3, #24]
   10e66:	b153      	cbz	r3, 10e7e <l2cRxSignalingPkt+0x2e>
   10e68:	4632      	mov	r2, r6
   10e6a:	4629      	mov	r1, r5
   10e6c:	4620      	mov	r0, r4
   10e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e72:	4718      	bx	r3
   10e74:	2801      	cmp	r0, #1
   10e76:	d102      	bne.n	10e7e <l2cRxSignalingPkt+0x2e>
   10e78:	4b01      	ldr	r3, [pc, #4]	; (10e80 <l2cRxSignalingPkt+0x30>)
   10e7a:	69db      	ldr	r3, [r3, #28]
   10e7c:	e7f3      	b.n	10e66 <l2cRxSignalingPkt+0x16>
   10e7e:	bd70      	pop	{r4, r5, r6, pc}
   10e80:	10019384 	.word	0x10019384

00010e84 <l2cMsgAlloc>:
   10e84:	2100      	movs	r1, #0
   10e86:	f009 bda7 	b.w	1a9d8 <WsfMsgDataAlloc>

00010e8a <L2cInit>:
   10e8a:	4b09      	ldr	r3, [pc, #36]	; (10eb0 <L2cInit+0x26>)
   10e8c:	4a09      	ldr	r2, [pc, #36]	; (10eb4 <L2cInit+0x2a>)
   10e8e:	490a      	ldr	r1, [pc, #40]	; (10eb8 <L2cInit+0x2e>)
   10e90:	480a      	ldr	r0, [pc, #40]	; (10ebc <L2cInit+0x32>)
   10e92:	e9c3 2200 	strd	r2, r2, [r3]
   10e96:	4a0a      	ldr	r2, [pc, #40]	; (10ec0 <L2cInit+0x36>)
   10e98:	609a      	str	r2, [r3, #8]
   10e9a:	4a0a      	ldr	r2, [pc, #40]	; (10ec4 <L2cInit+0x3a>)
   10e9c:	615a      	str	r2, [r3, #20]
   10e9e:	e9c3 2203 	strd	r2, r2, [r3, #12]
   10ea2:	4a09      	ldr	r2, [pc, #36]	; (10ec8 <L2cInit+0x3e>)
   10ea4:	621a      	str	r2, [r3, #32]
   10ea6:	2201      	movs	r2, #1
   10ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   10eac:	f008 b9fa 	b.w	192a4 <HciAclRegister>
   10eb0:	10019384 	.word	0x10019384
   10eb4:	00010d99 	.word	0x00010d99
   10eb8:	00010d9f 	.word	0x00010d9f
   10ebc:	00010dd9 	.word	0x00010dd9
   10ec0:	00010e51 	.word	0x00010e51
   10ec4:	00010d9d 	.word	0x00010d9d
   10ec8:	00010d9b 	.word	0x00010d9b

00010ecc <L2cRegister>:
   10ecc:	4b03      	ldr	r3, [pc, #12]	; (10edc <L2cRegister+0x10>)
   10ece:	2804      	cmp	r0, #4
   10ed0:	bf07      	ittee	eq
   10ed2:	6019      	streq	r1, [r3, #0]
   10ed4:	60da      	streq	r2, [r3, #12]
   10ed6:	6059      	strne	r1, [r3, #4]
   10ed8:	611a      	strne	r2, [r3, #16]
   10eda:	4770      	bx	lr
   10edc:	10019384 	.word	0x10019384

00010ee0 <L2cDataReq>:
   10ee0:	b410      	push	{r4}
   10ee2:	7019      	strb	r1, [r3, #0]
   10ee4:	b2d4      	uxtb	r4, r2
   10ee6:	0a09      	lsrs	r1, r1, #8
   10ee8:	7059      	strb	r1, [r3, #1]
   10eea:	1d21      	adds	r1, r4, #4
   10eec:	7099      	strb	r1, [r3, #2]
   10eee:	1d11      	adds	r1, r2, #4
   10ef0:	1209      	asrs	r1, r1, #8
   10ef2:	0a12      	lsrs	r2, r2, #8
   10ef4:	7198      	strb	r0, [r3, #6]
   10ef6:	0a00      	lsrs	r0, r0, #8
   10ef8:	711c      	strb	r4, [r3, #4]
   10efa:	71d8      	strb	r0, [r3, #7]
   10efc:	70d9      	strb	r1, [r3, #3]
   10efe:	715a      	strb	r2, [r3, #5]
   10f00:	4618      	mov	r0, r3
   10f02:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f06:	f005 bf01 	b.w	16d0c <HciSendAclData>

00010f0a <l2cSendCmdReject>:
   10f0a:	b570      	push	{r4, r5, r6, lr}
   10f0c:	4605      	mov	r5, r0
   10f0e:	200e      	movs	r0, #14
   10f10:	460e      	mov	r6, r1
   10f12:	4614      	mov	r4, r2
   10f14:	f7ff ffb6 	bl	10e84 <l2cMsgAlloc>
   10f18:	4603      	mov	r3, r0
   10f1a:	b180      	cbz	r0, 10f3e <l2cSendCmdReject+0x34>
   10f1c:	2201      	movs	r2, #1
   10f1e:	7202      	strb	r2, [r0, #8]
   10f20:	2202      	movs	r2, #2
   10f22:	7282      	strb	r2, [r0, #10]
   10f24:	7304      	strb	r4, [r0, #12]
   10f26:	2200      	movs	r2, #0
   10f28:	0a24      	lsrs	r4, r4, #8
   10f2a:	72c2      	strb	r2, [r0, #11]
   10f2c:	7246      	strb	r6, [r0, #9]
   10f2e:	7344      	strb	r4, [r0, #13]
   10f30:	4629      	mov	r1, r5
   10f32:	2206      	movs	r2, #6
   10f34:	2005      	movs	r0, #5
   10f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10f3a:	f7ff bfd1 	b.w	10ee0 <L2cDataReq>
   10f3e:	bd70      	pop	{r4, r5, r6, pc}

00010f40 <l2cSlaveRxSignalingPkt>:
   10f40:	b538      	push	{r3, r4, r5, lr}
   10f42:	4605      	mov	r5, r0
   10f44:	4613      	mov	r3, r2
   10f46:	7ad0      	ldrb	r0, [r2, #11]
   10f48:	7a92      	ldrb	r2, [r2, #10]
   10f4a:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   10f4e:	b292      	uxth	r2, r2
   10f50:	1d10      	adds	r0, r2, #4
   10f52:	4281      	cmp	r1, r0
   10f54:	d116      	bne.n	10f84 <l2cSlaveRxSignalingPkt+0x44>
   10f56:	7a19      	ldrb	r1, [r3, #8]
   10f58:	2913      	cmp	r1, #19
   10f5a:	d10f      	bne.n	10f7c <l2cSlaveRxSignalingPkt+0x3c>
   10f5c:	2a02      	cmp	r2, #2
   10f5e:	d111      	bne.n	10f84 <l2cSlaveRxSignalingPkt+0x44>
   10f60:	7b5c      	ldrb	r4, [r3, #13]
   10f62:	7b19      	ldrb	r1, [r3, #12]
   10f64:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   10f68:	b28c      	uxth	r4, r1
   10f6a:	480a      	ldr	r0, [pc, #40]	; (10f94 <l2cSlaveRxSignalingPkt+0x54>)
   10f6c:	f009 ff28 	bl	1adc0 <WsfTimerStop>
   10f70:	4621      	mov	r1, r4
   10f72:	4628      	mov	r0, r5
   10f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10f78:	f7ff b942 	b.w	10200 <DmL2cConnUpdateCnf>
   10f7c:	2901      	cmp	r1, #1
   10f7e:	d101      	bne.n	10f84 <l2cSlaveRxSignalingPkt+0x44>
   10f80:	460c      	mov	r4, r1
   10f82:	e7f2      	b.n	10f6a <l2cSlaveRxSignalingPkt+0x2a>
   10f84:	7a59      	ldrb	r1, [r3, #9]
   10f86:	4628      	mov	r0, r5
   10f88:	2200      	movs	r2, #0
   10f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10f8e:	f7ff bfbc 	b.w	10f0a <l2cSendCmdReject>
   10f92:	bf00      	nop
   10f94:	100193ac 	.word	0x100193ac

00010f98 <L2cSlaveInit>:
   10f98:	4b01      	ldr	r3, [pc, #4]	; (10fa0 <L2cSlaveInit+0x8>)
   10f9a:	4a02      	ldr	r2, [pc, #8]	; (10fa4 <L2cSlaveInit+0xc>)
   10f9c:	61da      	str	r2, [r3, #28]
   10f9e:	4770      	bx	lr
   10fa0:	10019384 	.word	0x10019384
   10fa4:	00010f41 	.word	0x00010f41

00010fa8 <L2cDmConnUpdateReq>:
   10fa8:	b570      	push	{r4, r5, r6, lr}
   10faa:	4e1e      	ldr	r6, [pc, #120]	; (11024 <L2cDmConnUpdateReq+0x7c>)
   10fac:	4605      	mov	r5, r0
   10fae:	460c      	mov	r4, r1
   10fb0:	4630      	mov	r0, r6
   10fb2:	211e      	movs	r1, #30
   10fb4:	f009 fede 	bl	1ad74 <WsfTimerStartSec>
   10fb8:	2014      	movs	r0, #20
   10fba:	8175      	strh	r5, [r6, #10]
   10fbc:	f7ff ff62 	bl	10e84 <l2cMsgAlloc>
   10fc0:	4603      	mov	r3, r0
   10fc2:	b368      	cbz	r0, 11020 <L2cDmConnUpdateReq+0x78>
   10fc4:	4918      	ldr	r1, [pc, #96]	; (11028 <L2cDmConnUpdateReq+0x80>)
   10fc6:	2212      	movs	r2, #18
   10fc8:	7202      	strb	r2, [r0, #8]
   10fca:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10fce:	7242      	strb	r2, [r0, #9]
   10fd0:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10fd4:	2aff      	cmp	r2, #255	; 0xff
   10fd6:	bf1a      	itte	ne
   10fd8:	3201      	addne	r2, #1
   10fda:	b2d2      	uxtbne	r2, r2
   10fdc:	2201      	moveq	r2, #1
   10fde:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   10fe2:	2208      	movs	r2, #8
   10fe4:	7282      	strb	r2, [r0, #10]
   10fe6:	2200      	movs	r2, #0
   10fe8:	72c2      	strb	r2, [r0, #11]
   10fea:	8822      	ldrh	r2, [r4, #0]
   10fec:	7302      	strb	r2, [r0, #12]
   10fee:	8822      	ldrh	r2, [r4, #0]
   10ff0:	0a12      	lsrs	r2, r2, #8
   10ff2:	7342      	strb	r2, [r0, #13]
   10ff4:	8862      	ldrh	r2, [r4, #2]
   10ff6:	7382      	strb	r2, [r0, #14]
   10ff8:	8862      	ldrh	r2, [r4, #2]
   10ffa:	0a12      	lsrs	r2, r2, #8
   10ffc:	73c2      	strb	r2, [r0, #15]
   10ffe:	88a2      	ldrh	r2, [r4, #4]
   11000:	7402      	strb	r2, [r0, #16]
   11002:	88a2      	ldrh	r2, [r4, #4]
   11004:	0a12      	lsrs	r2, r2, #8
   11006:	7442      	strb	r2, [r0, #17]
   11008:	88e2      	ldrh	r2, [r4, #6]
   1100a:	7482      	strb	r2, [r0, #18]
   1100c:	88e2      	ldrh	r2, [r4, #6]
   1100e:	0a12      	lsrs	r2, r2, #8
   11010:	74c2      	strb	r2, [r0, #19]
   11012:	4629      	mov	r1, r5
   11014:	220c      	movs	r2, #12
   11016:	2005      	movs	r0, #5
   11018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1101c:	f7ff bf60 	b.w	10ee0 <L2cDataReq>
   11020:	bd70      	pop	{r4, r5, r6, pc}
   11022:	bf00      	nop
   11024:	100193ac 	.word	0x100193ac
   11028:	10019384 	.word	0x10019384

0001102c <L2cSlaveHandlerInit>:
   1102c:	4b02      	ldr	r3, [pc, #8]	; (11038 <L2cSlaveHandlerInit+0xc>)
   1102e:	2201      	movs	r2, #1
   11030:	731a      	strb	r2, [r3, #12]
   11032:	7218      	strb	r0, [r3, #8]
   11034:	7418      	strb	r0, [r3, #16]
   11036:	4770      	bx	lr
   11038:	100193ac 	.word	0x100193ac

0001103c <L2cSlaveHandler>:
   1103c:	460b      	mov	r3, r1
   1103e:	b129      	cbz	r1, 1104c <L2cSlaveHandler+0x10>
   11040:	7889      	ldrb	r1, [r1, #2]
   11042:	2901      	cmp	r1, #1
   11044:	d102      	bne.n	1104c <L2cSlaveHandler+0x10>
   11046:	8818      	ldrh	r0, [r3, #0]
   11048:	f7ff b8da 	b.w	10200 <DmL2cConnUpdateCnf>
   1104c:	4770      	bx	lr
   1104e:	bf00      	nop

00011050 <smpDmConnCback>:
   11050:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11052:	4605      	mov	r5, r0
   11054:	8803      	ldrh	r3, [r0, #0]
   11056:	78aa      	ldrb	r2, [r5, #2]
   11058:	4e23      	ldr	r6, [pc, #140]	; (110e8 <smpDmConnCback+0x98>)
   1105a:	b2d8      	uxtb	r0, r3
   1105c:	2a27      	cmp	r2, #39	; 0x27
   1105e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   11062:	d120      	bne.n	110a6 <smpDmConnCback+0x56>
   11064:	f7ff f874 	bl	10150 <DmConnRole>
   11068:	2338      	movs	r3, #56	; 0x38
   1106a:	fb03 6304 	mla	r3, r3, r4, r6
   1106e:	b9a8      	cbnz	r0, 1109c <smpDmConnCback+0x4c>
   11070:	2201      	movs	r2, #1
   11072:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   11076:	220b      	movs	r2, #11
   11078:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1107c:	2338      	movs	r3, #56	; 0x38
   1107e:	fb03 6404 	mla	r4, r3, r4, r6
   11082:	88eb      	ldrh	r3, [r5, #6]
   11084:	8523      	strh	r3, [r4, #40]	; 0x28
   11086:	882b      	ldrh	r3, [r5, #0]
   11088:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1108c:	2300      	movs	r3, #0
   1108e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   11092:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   11096:	8663      	strh	r3, [r4, #50]	; 0x32
   11098:	b002      	add	sp, #8
   1109a:	bd70      	pop	{r4, r5, r6, pc}
   1109c:	2200      	movs	r2, #0
   1109e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   110a2:	2201      	movs	r2, #1
   110a4:	e7e8      	b.n	11078 <smpDmConnCback+0x28>
   110a6:	2138      	movs	r1, #56	; 0x38
   110a8:	fb01 6404 	mla	r4, r1, r4, r6
   110ac:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   110b0:	2900      	cmp	r1, #0
   110b2:	d0f1      	beq.n	11098 <smpDmConnCback+0x48>
   110b4:	2a28      	cmp	r2, #40	; 0x28
   110b6:	d1ef      	bne.n	11098 <smpDmConnCback+0x48>
   110b8:	f8ad 3004 	strh.w	r3, [sp, #4]
   110bc:	230a      	movs	r3, #10
   110be:	f88d 3006 	strb.w	r3, [sp, #6]
   110c2:	7a2b      	ldrb	r3, [r5, #8]
   110c4:	4620      	mov	r0, r4
   110c6:	3320      	adds	r3, #32
   110c8:	a901      	add	r1, sp, #4
   110ca:	f88d 3007 	strb.w	r3, [sp, #7]
   110ce:	f001 fb0a 	bl	126e6 <smpSmExecute>
   110d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   110d4:	2500      	movs	r5, #0
   110d6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   110da:	2800      	cmp	r0, #0
   110dc:	d0dc      	beq.n	11098 <smpDmConnCback+0x48>
   110de:	f009 fca7 	bl	1aa30 <WsfMsgFree>
   110e2:	6265      	str	r5, [r4, #36]	; 0x24
   110e4:	e7d8      	b.n	11098 <smpDmConnCback+0x48>
   110e6:	bf00      	nop
   110e8:	100193c0 	.word	0x100193c0

000110ec <smpCcbByHandle>:
   110ec:	b508      	push	{r3, lr}
   110ee:	f7fe ffa3 	bl	10038 <DmConnIdByHandle>
   110f2:	b120      	cbz	r0, 110fe <smpCcbByHandle+0x12>
   110f4:	4b02      	ldr	r3, [pc, #8]	; (11100 <smpCcbByHandle+0x14>)
   110f6:	3801      	subs	r0, #1
   110f8:	2238      	movs	r2, #56	; 0x38
   110fa:	fb02 3000 	mla	r0, r2, r0, r3
   110fe:	bd08      	pop	{r3, pc}
   11100:	100193c0 	.word	0x100193c0

00011104 <smpL2cDataCback>:
   11104:	b530      	push	{r4, r5, lr}
   11106:	b087      	sub	sp, #28
   11108:	460d      	mov	r5, r1
   1110a:	4614      	mov	r4, r2
   1110c:	f7ff ffee 	bl	110ec <smpCcbByHandle>
   11110:	b1d8      	cbz	r0, 1114a <smpL2cDataCback+0x46>
   11112:	7a23      	ldrb	r3, [r4, #8]
   11114:	1e5a      	subs	r2, r3, #1
   11116:	2a0d      	cmp	r2, #13
   11118:	d817      	bhi.n	1114a <smpL2cDataCback+0x46>
   1111a:	4a10      	ldr	r2, [pc, #64]	; (1115c <smpL2cDataCback+0x58>)
   1111c:	5cd2      	ldrb	r2, [r2, r3]
   1111e:	42aa      	cmp	r2, r5
   11120:	d113      	bne.n	1114a <smpL2cDataCback+0x46>
   11122:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   11126:	429a      	cmp	r2, r3
   11128:	d011      	beq.n	1114e <smpL2cDataCback+0x4a>
   1112a:	2b05      	cmp	r3, #5
   1112c:	d10d      	bne.n	1114a <smpL2cDataCback+0x46>
   1112e:	2307      	movs	r3, #7
   11130:	f88d 3002 	strb.w	r3, [sp, #2]
   11134:	7a63      	ldrb	r3, [r4, #9]
   11136:	f88d 3003 	strb.w	r3, [sp, #3]
   1113a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1113e:	f8ad 3000 	strh.w	r3, [sp]
   11142:	4669      	mov	r1, sp
   11144:	9401      	str	r4, [sp, #4]
   11146:	f001 face 	bl	126e6 <smpSmExecute>
   1114a:	b007      	add	sp, #28
   1114c:	bd30      	pop	{r4, r5, pc}
   1114e:	2a05      	cmp	r2, #5
   11150:	d0ed      	beq.n	1112e <smpL2cDataCback+0x2a>
   11152:	2306      	movs	r3, #6
   11154:	f88d 3002 	strb.w	r3, [sp, #2]
   11158:	e7ef      	b.n	1113a <smpL2cDataCback+0x36>
   1115a:	bf00      	nop
   1115c:	0003bce4 	.word	0x0003bce4

00011160 <smpCcbByConnId>:
   11160:	4b02      	ldr	r3, [pc, #8]	; (1116c <smpCcbByConnId+0xc>)
   11162:	2238      	movs	r2, #56	; 0x38
   11164:	3801      	subs	r0, #1
   11166:	fb02 3000 	mla	r0, r2, r0, r3
   1116a:	4770      	bx	lr
   1116c:	100193c0 	.word	0x100193c0

00011170 <smpCalcC1Part1>:
   11170:	b5f0      	push	{r4, r5, r6, r7, lr}
   11172:	4604      	mov	r4, r0
   11174:	b089      	sub	sp, #36	; 0x24
   11176:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1117a:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1117e:	460f      	mov	r7, r1
   11180:	4615      	mov	r5, r2
   11182:	2b00      	cmp	r3, #0
   11184:	d05a      	beq.n	1123c <smpCalcC1Part1+0xcc>
   11186:	f7fe ffa5 	bl	100d4 <DmConnLocalRpa>
   1118a:	f00e fd93 	bl	1fcb4 <BdaIsZeros>
   1118e:	2800      	cmp	r0, #0
   11190:	d052      	beq.n	11238 <smpCalcC1Part1+0xc8>
   11192:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11196:	f7fe ff7f 	bl	10098 <DmConnLocalAddrType>
   1119a:	4606      	mov	r6, r0
   1119c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   111a0:	f7fe ff8e 	bl	100c0 <DmConnPeerRpa>
   111a4:	f00e fd86 	bl	1fcb4 <BdaIsZeros>
   111a8:	2800      	cmp	r0, #0
   111aa:	d05f      	beq.n	1126c <smpCalcC1Part1+0xfc>
   111ac:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   111b0:	f7fe ff60 	bl	10074 <DmConnPeerAddrType>
   111b4:	462b      	mov	r3, r5
   111b6:	f10d 0112 	add.w	r1, sp, #18
   111ba:	f813 2b02 	ldrb.w	r2, [r3], #2
   111be:	4056      	eors	r6, r2
   111c0:	786a      	ldrb	r2, [r5, #1]
   111c2:	f88d 6010 	strb.w	r6, [sp, #16]
   111c6:	4050      	eors	r0, r2
   111c8:	f88d 0011 	strb.w	r0, [sp, #17]
   111cc:	f105 0609 	add.w	r6, r5, #9
   111d0:	f104 0010 	add.w	r0, r4, #16
   111d4:	f813 cb01 	ldrb.w	ip, [r3], #1
   111d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   111dc:	42b3      	cmp	r3, r6
   111de:	ea82 020c 	eor.w	r2, r2, ip
   111e2:	f801 2b01 	strb.w	r2, [r1], #1
   111e6:	d1f5      	bne.n	111d4 <smpCalcC1Part1+0x64>
   111e8:	f104 0017 	add.w	r0, r4, #23
   111ec:	3510      	adds	r5, #16
   111ee:	f10d 0119 	add.w	r1, sp, #25
   111f2:	f813 6b01 	ldrb.w	r6, [r3], #1
   111f6:	f810 2b01 	ldrb.w	r2, [r0], #1
   111fa:	42ab      	cmp	r3, r5
   111fc:	ea82 0206 	eor.w	r2, r2, r6
   11200:	f801 2b01 	strb.w	r2, [r1], #1
   11204:	d1f5      	bne.n	111f2 <smpCalcC1Part1+0x82>
   11206:	4a1a      	ldr	r2, [pc, #104]	; (11270 <smpCalcC1Part1+0x100>)
   11208:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1120c:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   11210:	210b      	movs	r1, #11
   11212:	9100      	str	r1, [sp, #0]
   11214:	4638      	mov	r0, r7
   11216:	a904      	add	r1, sp, #16
   11218:	f009 fe7a 	bl	1af10 <SecAes>
   1121c:	28ff      	cmp	r0, #255	; 0xff
   1121e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   11222:	d107      	bne.n	11234 <smpCalcC1Part1+0xc4>
   11224:	f640 0303 	movw	r3, #2051	; 0x803
   11228:	a903      	add	r1, sp, #12
   1122a:	4620      	mov	r0, r4
   1122c:	f8ad 300e 	strh.w	r3, [sp, #14]
   11230:	f001 fa59 	bl	126e6 <smpSmExecute>
   11234:	b009      	add	sp, #36	; 0x24
   11236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11238:	2601      	movs	r6, #1
   1123a:	e7af      	b.n	1119c <smpCalcC1Part1+0x2c>
   1123c:	f7fe ff40 	bl	100c0 <DmConnPeerRpa>
   11240:	f00e fd38 	bl	1fcb4 <BdaIsZeros>
   11244:	b180      	cbz	r0, 11268 <smpCalcC1Part1+0xf8>
   11246:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1124a:	f7fe ff13 	bl	10074 <DmConnPeerAddrType>
   1124e:	4606      	mov	r6, r0
   11250:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11254:	f7fe ff3e 	bl	100d4 <DmConnLocalRpa>
   11258:	f00e fd2c 	bl	1fcb4 <BdaIsZeros>
   1125c:	b130      	cbz	r0, 1126c <smpCalcC1Part1+0xfc>
   1125e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11262:	f7fe ff19 	bl	10098 <DmConnLocalAddrType>
   11266:	e7a5      	b.n	111b4 <smpCalcC1Part1+0x44>
   11268:	2601      	movs	r6, #1
   1126a:	e7f1      	b.n	11250 <smpCalcC1Part1+0xe0>
   1126c:	2001      	movs	r0, #1
   1126e:	e7a1      	b.n	111b4 <smpCalcC1Part1+0x44>
   11270:	100193c0 	.word	0x100193c0

00011274 <smpCalcC1Part2>:
   11274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11278:	4604      	mov	r4, r0
   1127a:	b088      	sub	sp, #32
   1127c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11280:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11284:	4688      	mov	r8, r1
   11286:	4615      	mov	r5, r2
   11288:	2b00      	cmp	r3, #0
   1128a:	d058      	beq.n	1133e <smpCalcC1Part2+0xca>
   1128c:	f7fe ff22 	bl	100d4 <DmConnLocalRpa>
   11290:	4606      	mov	r6, r0
   11292:	f00e fd0f 	bl	1fcb4 <BdaIsZeros>
   11296:	b120      	cbz	r0, 112a2 <smpCalcC1Part2+0x2e>
   11298:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1129c:	f7fe ff06 	bl	100ac <DmConnLocalAddr>
   112a0:	4606      	mov	r6, r0
   112a2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   112a6:	f7fe ff0b 	bl	100c0 <DmConnPeerRpa>
   112aa:	4607      	mov	r7, r0
   112ac:	f00e fd02 	bl	1fcb4 <BdaIsZeros>
   112b0:	b120      	cbz	r0, 112bc <smpCalcC1Part2+0x48>
   112b2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   112b6:	f7fe fee7 	bl	10088 <DmConnPeerAddr>
   112ba:	4607      	mov	r7, r0
   112bc:	4628      	mov	r0, r5
   112be:	2300      	movs	r3, #0
   112c0:	a904      	add	r1, sp, #16
   112c2:	f817 2b01 	ldrb.w	r2, [r7], #1
   112c6:	f810 cb01 	ldrb.w	ip, [r0], #1
   112ca:	ea82 020c 	eor.w	r2, r2, ip
   112ce:	545a      	strb	r2, [r3, r1]
   112d0:	3301      	adds	r3, #1
   112d2:	2b06      	cmp	r3, #6
   112d4:	d1f5      	bne.n	112c2 <smpCalcC1Part2+0x4e>
   112d6:	1dab      	adds	r3, r5, #6
   112d8:	f105 070c 	add.w	r7, r5, #12
   112dc:	f10d 0016 	add.w	r0, sp, #22
   112e0:	f816 2b01 	ldrb.w	r2, [r6], #1
   112e4:	f813 cb01 	ldrb.w	ip, [r3], #1
   112e8:	ea82 020c 	eor.w	r2, r2, ip
   112ec:	42bb      	cmp	r3, r7
   112ee:	f800 2b01 	strb.w	r2, [r0], #1
   112f2:	d1f5      	bne.n	112e0 <smpCalcC1Part2+0x6c>
   112f4:	7b2b      	ldrb	r3, [r5, #12]
   112f6:	f88d 301c 	strb.w	r3, [sp, #28]
   112fa:	7b6b      	ldrb	r3, [r5, #13]
   112fc:	f88d 301d 	strb.w	r3, [sp, #29]
   11300:	4a1b      	ldr	r2, [pc, #108]	; (11370 <smpCalcC1Part2+0xfc>)
   11302:	7bab      	ldrb	r3, [r5, #14]
   11304:	f88d 301e 	strb.w	r3, [sp, #30]
   11308:	200b      	movs	r0, #11
   1130a:	7beb      	ldrb	r3, [r5, #15]
   1130c:	f88d 301f 	strb.w	r3, [sp, #31]
   11310:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   11314:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11318:	9000      	str	r0, [sp, #0]
   1131a:	4640      	mov	r0, r8
   1131c:	f009 fdf8 	bl	1af10 <SecAes>
   11320:	28ff      	cmp	r0, #255	; 0xff
   11322:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   11326:	d107      	bne.n	11338 <smpCalcC1Part2+0xc4>
   11328:	f640 0303 	movw	r3, #2051	; 0x803
   1132c:	a903      	add	r1, sp, #12
   1132e:	4620      	mov	r0, r4
   11330:	f8ad 300e 	strh.w	r3, [sp, #14]
   11334:	f001 f9d7 	bl	126e6 <smpSmExecute>
   11338:	b008      	add	sp, #32
   1133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1133e:	f7fe febf 	bl	100c0 <DmConnPeerRpa>
   11342:	4606      	mov	r6, r0
   11344:	f00e fcb6 	bl	1fcb4 <BdaIsZeros>
   11348:	b120      	cbz	r0, 11354 <smpCalcC1Part2+0xe0>
   1134a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1134e:	f7fe fe9b 	bl	10088 <DmConnPeerAddr>
   11352:	4606      	mov	r6, r0
   11354:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11358:	f7fe febc 	bl	100d4 <DmConnLocalRpa>
   1135c:	4607      	mov	r7, r0
   1135e:	f00e fca9 	bl	1fcb4 <BdaIsZeros>
   11362:	2800      	cmp	r0, #0
   11364:	d0aa      	beq.n	112bc <smpCalcC1Part2+0x48>
   11366:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1136a:	f7fe fe9f 	bl	100ac <DmConnLocalAddr>
   1136e:	e7a4      	b.n	112ba <smpCalcC1Part2+0x46>
   11370:	100193c0 	.word	0x100193c0

00011374 <smpCalcS1>:
   11374:	b570      	push	{r4, r5, r6, lr}
   11376:	b088      	sub	sp, #32
   11378:	4616      	mov	r6, r2
   1137a:	4604      	mov	r4, r0
   1137c:	460d      	mov	r5, r1
   1137e:	a804      	add	r0, sp, #16
   11380:	4619      	mov	r1, r3
   11382:	f00e fcf5 	bl	1fd70 <Calc128Cpy64>
   11386:	4631      	mov	r1, r6
   11388:	a806      	add	r0, sp, #24
   1138a:	f00e fcf1 	bl	1fd70 <Calc128Cpy64>
   1138e:	4a0c      	ldr	r2, [pc, #48]	; (113c0 <smpCalcS1+0x4c>)
   11390:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11394:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   11398:	210b      	movs	r1, #11
   1139a:	9100      	str	r1, [sp, #0]
   1139c:	4628      	mov	r0, r5
   1139e:	a904      	add	r1, sp, #16
   113a0:	f009 fdb6 	bl	1af10 <SecAes>
   113a4:	28ff      	cmp	r0, #255	; 0xff
   113a6:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   113aa:	d107      	bne.n	113bc <smpCalcS1+0x48>
   113ac:	f640 0303 	movw	r3, #2051	; 0x803
   113b0:	a903      	add	r1, sp, #12
   113b2:	4620      	mov	r0, r4
   113b4:	f8ad 300e 	strh.w	r3, [sp, #14]
   113b8:	f001 f995 	bl	126e6 <smpSmExecute>
   113bc:	b008      	add	sp, #32
   113be:	bd70      	pop	{r4, r5, r6, pc}
   113c0:	100193c0 	.word	0x100193c0

000113c4 <smpGenerateLtk>:
   113c4:	b570      	push	{r4, r5, r6, lr}
   113c6:	6a04      	ldr	r4, [r0, #32]
   113c8:	1d26      	adds	r6, r4, #4
   113ca:	4605      	mov	r5, r0
   113cc:	f894 1020 	ldrb.w	r1, [r4, #32]
   113d0:	4630      	mov	r0, r6
   113d2:	f00a f96f 	bl	1b6b4 <SecRand>
   113d6:	f894 0020 	ldrb.w	r0, [r4, #32]
   113da:	2100      	movs	r1, #0
   113dc:	f1c0 0210 	rsb	r2, r0, #16
   113e0:	4430      	add	r0, r6
   113e2:	f7fa ffbb 	bl	c35c <memset>
   113e6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   113ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   113ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   113f2:	4622      	mov	r2, r4
   113f4:	83a3      	strh	r3, [r4, #28]
   113f6:	f852 3f32 	ldr.w	r3, [r2, #50]!
   113fa:	6163      	str	r3, [r4, #20]
   113fc:	6853      	ldr	r3, [r2, #4]
   113fe:	61a3      	str	r3, [r4, #24]
   11400:	2301      	movs	r3, #1
   11402:	77a3      	strb	r3, [r4, #30]
   11404:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   11408:	f013 0f04 	tst.w	r3, #4
   1140c:	bf14      	ite	ne
   1140e:	2302      	movne	r3, #2
   11410:	2301      	moveq	r3, #1
   11412:	77e3      	strb	r3, [r4, #31]
   11414:	232f      	movs	r3, #47	; 0x2f
   11416:	70a3      	strb	r3, [r4, #2]
   11418:	4620      	mov	r0, r4
   1141a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1141e:	f7ff ba85 	b.w	1092c <DmSmpCbackExec>

00011422 <smpSendPkt>:
   11422:	b570      	push	{r4, r5, r6, lr}
   11424:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   11428:	4604      	mov	r4, r0
   1142a:	460d      	mov	r5, r1
   1142c:	b12b      	cbz	r3, 1143a <smpSendPkt+0x18>
   1142e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   11430:	b108      	cbz	r0, 11436 <smpSendPkt+0x14>
   11432:	f009 fafd 	bl	1aa30 <WsfMsgFree>
   11436:	6265      	str	r5, [r4, #36]	; 0x24
   11438:	bd70      	pop	{r4, r5, r6, pc}
   1143a:	7a0a      	ldrb	r2, [r1, #8]
   1143c:	460b      	mov	r3, r1
   1143e:	4904      	ldr	r1, [pc, #16]	; (11450 <smpSendPkt+0x2e>)
   11440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11444:	5c8a      	ldrb	r2, [r1, r2]
   11446:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   11448:	2006      	movs	r0, #6
   1144a:	f7ff bd49 	b.w	10ee0 <L2cDataReq>
   1144e:	bf00      	nop
   11450:	0003bce4 	.word	0x0003bce4

00011454 <smpL2cCtrlCback>:
   11454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11456:	7805      	ldrb	r5, [r0, #0]
   11458:	4f13      	ldr	r7, [pc, #76]	; (114a8 <smpL2cCtrlCback+0x54>)
   1145a:	3d01      	subs	r5, #1
   1145c:	2438      	movs	r4, #56	; 0x38
   1145e:	fb04 7405 	mla	r4, r4, r5, r7
   11462:	4606      	mov	r6, r0
   11464:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   11468:	b1e2      	cbz	r2, 114a4 <smpL2cCtrlCback+0x50>
   1146a:	7883      	ldrb	r3, [r0, #2]
   1146c:	2b01      	cmp	r3, #1
   1146e:	bf0c      	ite	eq
   11470:	2301      	moveq	r3, #1
   11472:	2300      	movne	r3, #0
   11474:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   11478:	d014      	beq.n	114a4 <smpL2cCtrlCback+0x50>
   1147a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1147c:	b121      	cbz	r1, 11488 <smpL2cCtrlCback+0x34>
   1147e:	2300      	movs	r3, #0
   11480:	6263      	str	r3, [r4, #36]	; 0x24
   11482:	4620      	mov	r0, r4
   11484:	f7ff ffcd 	bl	11422 <smpSendPkt>
   11488:	2338      	movs	r3, #56	; 0x38
   1148a:	fb03 7505 	mla	r5, r3, r5, r7
   1148e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   11492:	b13b      	cbz	r3, 114a4 <smpL2cCtrlCback+0x50>
   11494:	230c      	movs	r3, #12
   11496:	70b3      	strb	r3, [r6, #2]
   11498:	4631      	mov	r1, r6
   1149a:	4620      	mov	r0, r4
   1149c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   114a0:	f001 b921 	b.w	126e6 <smpSmExecute>
   114a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114a6:	bf00      	nop
   114a8:	100193c0 	.word	0x100193c0

000114ac <smpStateIdle>:
   114ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   114b0:	fab0 f080 	clz	r0, r0
   114b4:	0940      	lsrs	r0, r0, #5
   114b6:	4770      	bx	lr

000114b8 <smpMsgAlloc>:
   114b8:	2100      	movs	r1, #0
   114ba:	f009 ba8d 	b.w	1a9d8 <WsfMsgDataAlloc>

000114be <SmpDmMsgSend>:
   114be:	4b03      	ldr	r3, [pc, #12]	; (114cc <SmpDmMsgSend+0xe>)
   114c0:	4601      	mov	r1, r0
   114c2:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   114c6:	f009 bac0 	b.w	1aa4a <WsfMsgSend>
   114ca:	bf00      	nop
   114cc:	100193c0 	.word	0x100193c0

000114d0 <SmpDmGetStk>:
   114d0:	b530      	push	{r4, r5, lr}
   114d2:	4c12      	ldr	r4, [pc, #72]	; (1151c <SmpDmGetStk+0x4c>)
   114d4:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   114d8:	3801      	subs	r0, #1
   114da:	4623      	mov	r3, r4
   114dc:	b16a      	cbz	r2, 114fa <SmpDmGetStk+0x2a>
   114de:	2238      	movs	r2, #56	; 0x38
   114e0:	fb02 4200 	mla	r2, r2, r0, r4
   114e4:	6b54      	ldr	r4, [r2, #52]	; 0x34
   114e6:	7825      	ldrb	r5, [r4, #0]
   114e8:	b13d      	cbz	r5, 114fa <SmpDmGetStk+0x2a>
   114ea:	6924      	ldr	r4, [r4, #16]
   114ec:	b12c      	cbz	r4, 114fa <SmpDmGetStk+0x2a>
   114ee:	2303      	movs	r3, #3
   114f0:	700b      	strb	r3, [r1, #0]
   114f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
   114f4:	6918      	ldr	r0, [r3, #16]
   114f6:	3010      	adds	r0, #16
   114f8:	bd30      	pop	{r4, r5, pc}
   114fa:	2238      	movs	r2, #56	; 0x38
   114fc:	fb02 3300 	mla	r3, r2, r0, r3
   11500:	6a18      	ldr	r0, [r3, #32]
   11502:	2800      	cmp	r0, #0
   11504:	d0f8      	beq.n	114f8 <SmpDmGetStk+0x28>
   11506:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   1150a:	f012 0f04 	tst.w	r2, #4
   1150e:	bf14      	ite	ne
   11510:	2202      	movne	r2, #2
   11512:	2201      	moveq	r2, #1
   11514:	700a      	strb	r2, [r1, #0]
   11516:	6a18      	ldr	r0, [r3, #32]
   11518:	3020      	adds	r0, #32
   1151a:	e7ed      	b.n	114f8 <SmpDmGetStk+0x28>
   1151c:	100193c0 	.word	0x100193c0

00011520 <SmpDmGetLtk>:
   11520:	4a05      	ldr	r2, [pc, #20]	; (11538 <SmpDmGetLtk+0x18>)
   11522:	1e43      	subs	r3, r0, #1
   11524:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   11528:	b128      	cbz	r0, 11536 <SmpDmGetLtk+0x16>
   1152a:	2038      	movs	r0, #56	; 0x38
   1152c:	fb00 2003 	mla	r0, r0, r3, r2
   11530:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11532:	6918      	ldr	r0, [r3, #16]
   11534:	3010      	adds	r0, #16
   11536:	4770      	bx	lr
   11538:	100193c0 	.word	0x100193c0

0001153c <SmpHandlerInit>:
   1153c:	b508      	push	{r3, lr}
   1153e:	4b0d      	ldr	r3, [pc, #52]	; (11574 <SmpHandlerInit+0x38>)
   11540:	2201      	movs	r2, #1
   11542:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   11546:	3338      	adds	r3, #56	; 0x38
   11548:	f823 2c2e 	strh.w	r2, [r3, #-46]
   1154c:	3201      	adds	r2, #1
   1154e:	b292      	uxth	r2, r2
   11550:	2a09      	cmp	r2, #9
   11552:	f803 0c30 	strb.w	r0, [r3, #-48]
   11556:	f103 0338 	add.w	r3, r3, #56	; 0x38
   1155a:	d1f5      	bne.n	11548 <SmpHandlerInit+0xc>
   1155c:	4906      	ldr	r1, [pc, #24]	; (11578 <SmpHandlerInit+0x3c>)
   1155e:	4a07      	ldr	r2, [pc, #28]	; (1157c <SmpHandlerInit+0x40>)
   11560:	2006      	movs	r0, #6
   11562:	f7ff fcb3 	bl	10ecc <L2cRegister>
   11566:	4906      	ldr	r1, [pc, #24]	; (11580 <SmpHandlerInit+0x44>)
   11568:	2001      	movs	r0, #1
   1156a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1156e:	f7fe bc4d 	b.w	fe0c <DmConnRegister>
   11572:	bf00      	nop
   11574:	100193c0 	.word	0x100193c0
   11578:	00011105 	.word	0x00011105
   1157c:	00011455 	.word	0x00011455
   11580:	00011051 	.word	0x00011051

00011584 <SmpHandler>:
   11584:	b410      	push	{r4}
   11586:	b1b9      	cbz	r1, 115b8 <SmpHandler+0x34>
   11588:	780b      	ldrb	r3, [r1, #0]
   1158a:	480d      	ldr	r0, [pc, #52]	; (115c0 <SmpHandler+0x3c>)
   1158c:	3b01      	subs	r3, #1
   1158e:	2238      	movs	r2, #56	; 0x38
   11590:	fb02 0203 	mla	r2, r2, r3, r0
   11594:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   11598:	b174      	cbz	r4, 115b8 <SmpHandler+0x34>
   1159a:	788c      	ldrb	r4, [r1, #2]
   1159c:	2c0b      	cmp	r4, #11
   1159e:	d104      	bne.n	115aa <SmpHandler+0x26>
   115a0:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   115a4:	78ca      	ldrb	r2, [r1, #3]
   115a6:	4294      	cmp	r4, r2
   115a8:	d106      	bne.n	115b8 <SmpHandler+0x34>
   115aa:	2238      	movs	r2, #56	; 0x38
   115ac:	fb02 0003 	mla	r0, r2, r3, r0
   115b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   115b4:	f001 b897 	b.w	126e6 <smpSmExecute>
   115b8:	f85d 4b04 	ldr.w	r4, [sp], #4
   115bc:	4770      	bx	lr
   115be:	bf00      	nop
   115c0:	100193c0 	.word	0x100193c0

000115c4 <SmpDmEncryptInd>:
   115c4:	78c3      	ldrb	r3, [r0, #3]
   115c6:	2b00      	cmp	r3, #0
   115c8:	bf0c      	ite	eq
   115ca:	2308      	moveq	r3, #8
   115cc:	2309      	movne	r3, #9
   115ce:	4601      	mov	r1, r0
   115d0:	7083      	strb	r3, [r0, #2]
   115d2:	2000      	movs	r0, #0
   115d4:	f7ff bfd6 	b.w	11584 <SmpHandler>

000115d8 <SmpScAllocScratchBuffers>:
   115d8:	b538      	push	{r3, r4, r5, lr}
   115da:	6b45      	ldr	r5, [r0, #52]	; 0x34
   115dc:	68eb      	ldr	r3, [r5, #12]
   115de:	4604      	mov	r4, r0
   115e0:	b91b      	cbnz	r3, 115ea <SmpScAllocScratchBuffers+0x12>
   115e2:	2060      	movs	r0, #96	; 0x60
   115e4:	f009 f97e 	bl	1a8e4 <WsfBufAlloc>
   115e8:	60e8      	str	r0, [r5, #12]
   115ea:	6b65      	ldr	r5, [r4, #52]	; 0x34
   115ec:	68ab      	ldr	r3, [r5, #8]
   115ee:	b91b      	cbnz	r3, 115f8 <SmpScAllocScratchBuffers+0x20>
   115f0:	2040      	movs	r0, #64	; 0x40
   115f2:	f009 f977 	bl	1a8e4 <WsfBufAlloc>
   115f6:	60a8      	str	r0, [r5, #8]
   115f8:	6b65      	ldr	r5, [r4, #52]	; 0x34
   115fa:	692b      	ldr	r3, [r5, #16]
   115fc:	b91b      	cbnz	r3, 11606 <SmpScAllocScratchBuffers+0x2e>
   115fe:	2020      	movs	r0, #32
   11600:	f009 f970 	bl	1a8e4 <WsfBufAlloc>
   11604:	6128      	str	r0, [r5, #16]
   11606:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11608:	68d8      	ldr	r0, [r3, #12]
   1160a:	b128      	cbz	r0, 11618 <SmpScAllocScratchBuffers+0x40>
   1160c:	6898      	ldr	r0, [r3, #8]
   1160e:	b118      	cbz	r0, 11618 <SmpScAllocScratchBuffers+0x40>
   11610:	6918      	ldr	r0, [r3, #16]
   11612:	3000      	adds	r0, #0
   11614:	bf18      	it	ne
   11616:	2001      	movne	r0, #1
   11618:	bd38      	pop	{r3, r4, r5, pc}

0001161a <SmpScFreeScratchBuffers>:
   1161a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1161c:	b510      	push	{r4, lr}
   1161e:	4604      	mov	r4, r0
   11620:	68d8      	ldr	r0, [r3, #12]
   11622:	b120      	cbz	r0, 1162e <SmpScFreeScratchBuffers+0x14>
   11624:	f009 f99e 	bl	1a964 <WsfBufFree>
   11628:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1162a:	2200      	movs	r2, #0
   1162c:	60da      	str	r2, [r3, #12]
   1162e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11630:	6898      	ldr	r0, [r3, #8]
   11632:	b120      	cbz	r0, 1163e <SmpScFreeScratchBuffers+0x24>
   11634:	f009 f996 	bl	1a964 <WsfBufFree>
   11638:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1163a:	2200      	movs	r2, #0
   1163c:	609a      	str	r2, [r3, #8]
   1163e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11640:	6918      	ldr	r0, [r3, #16]
   11642:	b120      	cbz	r0, 1164e <SmpScFreeScratchBuffers+0x34>
   11644:	f009 f98e 	bl	1a964 <WsfBufFree>
   11648:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1164a:	2200      	movs	r2, #0
   1164c:	611a      	str	r2, [r3, #16]
   1164e:	bd10      	pop	{r4, pc}

00011650 <SmpScCmac>:
   11650:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11652:	461c      	mov	r4, r3
   11654:	4b0b      	ldr	r3, [pc, #44]	; (11684 <SmpScCmac+0x34>)
   11656:	9d06      	ldr	r5, [sp, #24]
   11658:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   1165c:	261b      	movs	r6, #27
   1165e:	9601      	str	r6, [sp, #4]
   11660:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   11664:	9600      	str	r6, [sp, #0]
   11666:	f009 fe29 	bl	1b2bc <SecCmac>
   1166a:	b948      	cbnz	r0, 11680 <SmpScCmac+0x30>
   1166c:	f640 0303 	movw	r3, #2051	; 0x803
   11670:	4629      	mov	r1, r5
   11672:	4620      	mov	r0, r4
   11674:	806b      	strh	r3, [r5, #2]
   11676:	b002      	add	sp, #8
   11678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1167c:	f001 b833 	b.w	126e6 <smpSmExecute>
   11680:	b002      	add	sp, #8
   11682:	bd70      	pop	{r4, r5, r6, pc}
   11684:	100193c0 	.word	0x100193c0

00011688 <SmpScAlloc>:
   11688:	b570      	push	{r4, r5, r6, lr}
   1168a:	460e      	mov	r6, r1
   1168c:	4615      	mov	r5, r2
   1168e:	f009 f929 	bl	1a8e4 <WsfBufAlloc>
   11692:	4604      	mov	r4, r0
   11694:	b930      	cbnz	r0, 116a4 <SmpScAlloc+0x1c>
   11696:	f640 0303 	movw	r3, #2051	; 0x803
   1169a:	806b      	strh	r3, [r5, #2]
   1169c:	4629      	mov	r1, r5
   1169e:	4630      	mov	r0, r6
   116a0:	f001 f821 	bl	126e6 <smpSmExecute>
   116a4:	4620      	mov	r0, r4
   116a6:	bd70      	pop	{r4, r5, r6, pc}

000116a8 <SmpScFree>:
   116a8:	f009 b95c 	b.w	1a964 <WsfBufFree>

000116ac <SmpScCalcF4>:
   116ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   116b0:	4606      	mov	r6, r0
   116b2:	460f      	mov	r7, r1
   116b4:	4615      	mov	r5, r2
   116b6:	460a      	mov	r2, r1
   116b8:	4601      	mov	r1, r0
   116ba:	2041      	movs	r0, #65	; 0x41
   116bc:	461c      	mov	r4, r3
   116be:	f89d 9020 	ldrb.w	r9, [sp, #32]
   116c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   116c6:	f7ff ffdf 	bl	11688 <SmpScAlloc>
   116ca:	4601      	mov	r1, r0
   116cc:	b1f0      	cbz	r0, 1170c <SmpScCalcF4+0x60>
   116ce:	4603      	mov	r3, r0
   116d0:	462a      	mov	r2, r5
   116d2:	f105 0020 	add.w	r0, r5, #32
   116d6:	f852 5b04 	ldr.w	r5, [r2], #4
   116da:	f843 5b04 	str.w	r5, [r3], #4
   116de:	4282      	cmp	r2, r0
   116e0:	d1f9      	bne.n	116d6 <SmpScCalcF4+0x2a>
   116e2:	4623      	mov	r3, r4
   116e4:	f101 0220 	add.w	r2, r1, #32
   116e8:	f104 0020 	add.w	r0, r4, #32
   116ec:	f853 4b04 	ldr.w	r4, [r3], #4
   116f0:	f842 4b04 	str.w	r4, [r2], #4
   116f4:	4283      	cmp	r3, r0
   116f6:	d1f9      	bne.n	116ec <SmpScCalcF4+0x40>
   116f8:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   116fc:	4633      	mov	r3, r6
   116fe:	9708      	str	r7, [sp, #32]
   11700:	4640      	mov	r0, r8
   11702:	2241      	movs	r2, #65	; 0x41
   11704:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11708:	f7ff bfa2 	b.w	11650 <SmpScCmac>
   1170c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011710 <SmpScInit>:
   11710:	4a13      	ldr	r2, [pc, #76]	; (11760 <SmpScInit+0x50>)
   11712:	4b14      	ldr	r3, [pc, #80]	; (11764 <SmpScInit+0x54>)
   11714:	f102 0114 	add.w	r1, r2, #20
   11718:	66d9      	str	r1, [r3, #108]	; 0x6c
   1171a:	f102 0128 	add.w	r1, r2, #40	; 0x28
   1171e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   11722:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   11726:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   1172a:	f102 0150 	add.w	r1, r2, #80	; 0x50
   1172e:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   11732:	f102 0164 	add.w	r1, r2, #100	; 0x64
   11736:	635a      	str	r2, [r3, #52]	; 0x34
   11738:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   1173c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   11740:	328c      	adds	r2, #140	; 0x8c
   11742:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   11746:	4a08      	ldr	r2, [pc, #32]	; (11768 <SmpScInit+0x58>)
   11748:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   1174c:	4a07      	ldr	r2, [pc, #28]	; (1176c <SmpScInit+0x5c>)
   1174e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   11752:	2201      	movs	r2, #1
   11754:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   11758:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   1175c:	4770      	bx	lr
   1175e:	bf00      	nop
   11760:	10019598 	.word	0x10019598
   11764:	100193c0 	.word	0x100193c0
   11768:	00011a99 	.word	0x00011a99
   1176c:	00011c71 	.word	0x00011c71

00011770 <SmpScCat>:
   11770:	b510      	push	{r4, lr}
   11772:	4614      	mov	r4, r2
   11774:	f7fa fcf4 	bl	c160 <memcpy>
   11778:	4420      	add	r0, r4
   1177a:	bd10      	pop	{r4, pc}

0001177c <SmpScCat128>:
   1177c:	b510      	push	{r4, lr}
   1177e:	4604      	mov	r4, r0
   11780:	f00e fae8 	bl	1fd54 <Calc128Cpy>
   11784:	f104 0010 	add.w	r0, r4, #16
   11788:	bd10      	pop	{r4, pc}

0001178a <smpScSendPubKey>:
   1178a:	b570      	push	{r4, r5, r6, lr}
   1178c:	2201      	movs	r2, #1
   1178e:	4605      	mov	r5, r0
   11790:	460e      	mov	r6, r1
   11792:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11796:	4611      	mov	r1, r2
   11798:	f7fe fcb0 	bl	100fc <DmConnSetIdle>
   1179c:	4628      	mov	r0, r5
   1179e:	f000 fd8f 	bl	122c0 <smpStartRspTimer>
   117a2:	2049      	movs	r0, #73	; 0x49
   117a4:	f7ff fe88 	bl	114b8 <smpMsgAlloc>
   117a8:	4604      	mov	r4, r0
   117aa:	b1b8      	cbz	r0, 117dc <smpScSendPubKey+0x52>
   117ac:	230c      	movs	r3, #12
   117ae:	7203      	strb	r3, [r0, #8]
   117b0:	f7ff fa70 	bl	10c94 <DmSecGetEccKey>
   117b4:	2220      	movs	r2, #32
   117b6:	4601      	mov	r1, r0
   117b8:	f104 0009 	add.w	r0, r4, #9
   117bc:	f00e fb05 	bl	1fdca <WStrReverseCpy>
   117c0:	f7ff fa68 	bl	10c94 <DmSecGetEccKey>
   117c4:	2220      	movs	r2, #32
   117c6:	1881      	adds	r1, r0, r2
   117c8:	f104 0029 	add.w	r0, r4, #41	; 0x29
   117cc:	f00e fafd 	bl	1fdca <WStrReverseCpy>
   117d0:	4621      	mov	r1, r4
   117d2:	4628      	mov	r0, r5
   117d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117d8:	f7ff be23 	b.w	11422 <smpSendPkt>
   117dc:	f640 0303 	movw	r3, #2051	; 0x803
   117e0:	8073      	strh	r3, [r6, #2]
   117e2:	4631      	mov	r1, r6
   117e4:	4628      	mov	r0, r5
   117e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117ea:	f000 bf7c 	b.w	126e6 <smpSmExecute>

000117ee <smpScSendDHKeyCheck>:
   117ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117f0:	4617      	mov	r7, r2
   117f2:	2201      	movs	r2, #1
   117f4:	4604      	mov	r4, r0
   117f6:	460e      	mov	r6, r1
   117f8:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   117fc:	4611      	mov	r1, r2
   117fe:	f7fe fc7d 	bl	100fc <DmConnSetIdle>
   11802:	4620      	mov	r0, r4
   11804:	f000 fd5c 	bl	122c0 <smpStartRspTimer>
   11808:	2019      	movs	r0, #25
   1180a:	f7ff fe55 	bl	114b8 <smpMsgAlloc>
   1180e:	4605      	mov	r5, r0
   11810:	b160      	cbz	r0, 1182c <smpScSendDHKeyCheck+0x3e>
   11812:	230d      	movs	r3, #13
   11814:	7203      	strb	r3, [r0, #8]
   11816:	4639      	mov	r1, r7
   11818:	3009      	adds	r0, #9
   1181a:	2210      	movs	r2, #16
   1181c:	f00e fad5 	bl	1fdca <WStrReverseCpy>
   11820:	4629      	mov	r1, r5
   11822:	4620      	mov	r0, r4
   11824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11828:	f7ff bdfb 	b.w	11422 <smpSendPkt>
   1182c:	f640 0303 	movw	r3, #2051	; 0x803
   11830:	8073      	strh	r3, [r6, #2]
   11832:	4631      	mov	r1, r6
   11834:	4620      	mov	r0, r4
   11836:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1183a:	f000 bf54 	b.w	126e6 <smpSmExecute>

0001183e <smpScSendRand>:
   1183e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11840:	4617      	mov	r7, r2
   11842:	2201      	movs	r2, #1
   11844:	4604      	mov	r4, r0
   11846:	460e      	mov	r6, r1
   11848:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1184c:	4611      	mov	r1, r2
   1184e:	f7fe fc55 	bl	100fc <DmConnSetIdle>
   11852:	4620      	mov	r0, r4
   11854:	f000 fd34 	bl	122c0 <smpStartRspTimer>
   11858:	2019      	movs	r0, #25
   1185a:	f7ff fe2d 	bl	114b8 <smpMsgAlloc>
   1185e:	4605      	mov	r5, r0
   11860:	b160      	cbz	r0, 1187c <smpScSendRand+0x3e>
   11862:	2304      	movs	r3, #4
   11864:	7203      	strb	r3, [r0, #8]
   11866:	4639      	mov	r1, r7
   11868:	3009      	adds	r0, #9
   1186a:	2210      	movs	r2, #16
   1186c:	f00e faad 	bl	1fdca <WStrReverseCpy>
   11870:	4629      	mov	r1, r5
   11872:	4620      	mov	r0, r4
   11874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11878:	f7ff bdd3 	b.w	11422 <smpSendPkt>
   1187c:	f640 0303 	movw	r3, #2051	; 0x803
   11880:	8073      	strh	r3, [r6, #2]
   11882:	4631      	mov	r1, r6
   11884:	4620      	mov	r0, r4
   11886:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1188a:	f000 bf2c 	b.w	126e6 <smpSmExecute>

0001188e <smpScSendPairCnf>:
   1188e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11890:	4617      	mov	r7, r2
   11892:	2201      	movs	r2, #1
   11894:	4604      	mov	r4, r0
   11896:	460e      	mov	r6, r1
   11898:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1189c:	4611      	mov	r1, r2
   1189e:	f7fe fc2d 	bl	100fc <DmConnSetIdle>
   118a2:	4620      	mov	r0, r4
   118a4:	f000 fd0c 	bl	122c0 <smpStartRspTimer>
   118a8:	2019      	movs	r0, #25
   118aa:	f7ff fe05 	bl	114b8 <smpMsgAlloc>
   118ae:	4605      	mov	r5, r0
   118b0:	b160      	cbz	r0, 118cc <smpScSendPairCnf+0x3e>
   118b2:	2303      	movs	r3, #3
   118b4:	7203      	strb	r3, [r0, #8]
   118b6:	4639      	mov	r1, r7
   118b8:	3009      	adds	r0, #9
   118ba:	2210      	movs	r2, #16
   118bc:	f00e fa85 	bl	1fdca <WStrReverseCpy>
   118c0:	4629      	mov	r1, r5
   118c2:	4620      	mov	r0, r4
   118c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   118c8:	f7ff bdab 	b.w	11422 <smpSendPkt>
   118cc:	f640 0303 	movw	r3, #2051	; 0x803
   118d0:	8073      	strh	r3, [r6, #2]
   118d2:	4631      	mov	r1, r6
   118d4:	4620      	mov	r0, r4
   118d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   118da:	f000 bf04 	b.w	126e6 <smpSmExecute>

000118de <smpGetPkBit>:
   118de:	6b43      	ldr	r3, [r0, #52]	; 0x34
   118e0:	78da      	ldrb	r2, [r3, #3]
   118e2:	68d9      	ldr	r1, [r3, #12]
   118e4:	08d3      	lsrs	r3, r2, #3
   118e6:	f1c3 030f 	rsb	r3, r3, #15
   118ea:	fa51 f383 	uxtab	r3, r1, r3
   118ee:	f002 0207 	and.w	r2, r2, #7
   118f2:	f893 3020 	ldrb.w	r3, [r3, #32]
   118f6:	fa43 f202 	asr.w	r2, r3, r2
   118fa:	f012 0f01 	tst.w	r2, #1
   118fe:	bf14      	ite	ne
   11900:	2081      	movne	r0, #129	; 0x81
   11902:	2080      	moveq	r0, #128	; 0x80
   11904:	4770      	bx	lr

00011906 <smpGetPeerPublicKey>:
   11906:	b508      	push	{r3, lr}
   11908:	f7ff fc2a 	bl	11160 <smpCcbByConnId>
   1190c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   1190e:	b100      	cbz	r0, 11912 <smpGetPeerPublicKey+0xc>
   11910:	6880      	ldr	r0, [r0, #8]
   11912:	bd08      	pop	{r3, pc}

00011914 <smpSetPeerPublicKey>:
   11914:	b510      	push	{r4, lr}
   11916:	460c      	mov	r4, r1
   11918:	f7ff fc22 	bl	11160 <smpCcbByConnId>
   1191c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1191e:	b14b      	cbz	r3, 11934 <smpSetPeerPublicKey+0x20>
   11920:	689b      	ldr	r3, [r3, #8]
   11922:	4621      	mov	r1, r4
   11924:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11928:	f851 0b04 	ldr.w	r0, [r1], #4
   1192c:	f843 0b04 	str.w	r0, [r3], #4
   11930:	4291      	cmp	r1, r2
   11932:	d1f9      	bne.n	11928 <smpSetPeerPublicKey+0x14>
   11934:	bd10      	pop	{r4, pc}

00011936 <SmpScSetOobCfg>:
   11936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11938:	460d      	mov	r5, r1
   1193a:	f7ff fc11 	bl	11160 <smpCcbByConnId>
   1193e:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11942:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11944:	4604      	mov	r4, r0
   11946:	f105 0110 	add.w	r1, r5, #16
   1194a:	f105 0730 	add.w	r7, r5, #48	; 0x30
   1194e:	f105 0620 	add.w	r6, r5, #32
   11952:	68d8      	ldr	r0, [r3, #12]
   11954:	b1b2      	cbz	r2, 11984 <SmpScSetOobCfg+0x4e>
   11956:	3050      	adds	r0, #80	; 0x50
   11958:	f00e f9fc 	bl	1fd54 <Calc128Cpy>
   1195c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1195e:	68d8      	ldr	r0, [r3, #12]
   11960:	4629      	mov	r1, r5
   11962:	3020      	adds	r0, #32
   11964:	f00e f9f6 	bl	1fd54 <Calc128Cpy>
   11968:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1196a:	68d8      	ldr	r0, [r3, #12]
   1196c:	4639      	mov	r1, r7
   1196e:	3040      	adds	r0, #64	; 0x40
   11970:	f00e f9f0 	bl	1fd54 <Calc128Cpy>
   11974:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11976:	68d8      	ldr	r0, [r3, #12]
   11978:	4631      	mov	r1, r6
   1197a:	3030      	adds	r0, #48	; 0x30
   1197c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11980:	f00e b9e8 	b.w	1fd54 <Calc128Cpy>
   11984:	3040      	adds	r0, #64	; 0x40
   11986:	f00e f9e5 	bl	1fd54 <Calc128Cpy>
   1198a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1198c:	68d8      	ldr	r0, [r3, #12]
   1198e:	4629      	mov	r1, r5
   11990:	3030      	adds	r0, #48	; 0x30
   11992:	f00e f9df 	bl	1fd54 <Calc128Cpy>
   11996:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11998:	68d8      	ldr	r0, [r3, #12]
   1199a:	4639      	mov	r1, r7
   1199c:	3050      	adds	r0, #80	; 0x50
   1199e:	f00e f9d9 	bl	1fd54 <Calc128Cpy>
   119a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   119a4:	68d8      	ldr	r0, [r3, #12]
   119a6:	4631      	mov	r1, r6
   119a8:	3020      	adds	r0, #32
   119aa:	e7e7      	b.n	1197c <SmpScSetOobCfg+0x46>

000119ac <smpEventStr>:
   119ac:	3801      	subs	r0, #1
   119ae:	b2c0      	uxtb	r0, r0
   119b0:	281b      	cmp	r0, #27
   119b2:	bf9a      	itte	ls
   119b4:	4b02      	ldrls	r3, [pc, #8]	; (119c0 <smpEventStr+0x14>)
   119b6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   119ba:	4802      	ldrhi	r0, [pc, #8]	; (119c4 <smpEventStr+0x18>)
   119bc:	4770      	bx	lr
   119be:	bf00      	nop
   119c0:	0003bcf4 	.word	0x0003bcf4
   119c4:	0003d32b 	.word	0x0003d32b

000119c8 <smpStateStr>:
   119c8:	4b03      	ldr	r3, [pc, #12]	; (119d8 <smpStateStr+0x10>)
   119ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   119ce:	b10b      	cbz	r3, 119d4 <smpStateStr+0xc>
   119d0:	f000 bbea 	b.w	121a8 <smpiStateStr>
   119d4:	f000 bbfe 	b.w	121d4 <smprStateStr>
   119d8:	100193c0 	.word	0x100193c0

000119dc <smpLogByteArray>:
   119dc:	4770      	bx	lr
   119de:	bf00      	nop

000119e0 <smpScCatInitiatorBdAddr>:
   119e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   119e2:	4607      	mov	r7, r0
   119e4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   119e8:	460c      	mov	r4, r1
   119ea:	f7fe f907 	bl	fbfc <dmConnCcbById>
   119ee:	4605      	mov	r5, r0
   119f0:	b1b0      	cbz	r0, 11a20 <smpScCatInitiatorBdAddr+0x40>
   119f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   119f6:	1c66      	adds	r6, r4, #1
   119f8:	b1a3      	cbz	r3, 11a24 <smpScCatInitiatorBdAddr+0x44>
   119fa:	f100 071a 	add.w	r7, r0, #26
   119fe:	4638      	mov	r0, r7
   11a00:	f00e f958 	bl	1fcb4 <BdaIsZeros>
   11a04:	b920      	cbnz	r0, 11a10 <smpScCatInitiatorBdAddr+0x30>
   11a06:	2301      	movs	r3, #1
   11a08:	7023      	strb	r3, [r4, #0]
   11a0a:	2206      	movs	r2, #6
   11a0c:	4639      	mov	r1, r7
   11a0e:	e003      	b.n	11a18 <smpScCatInitiatorBdAddr+0x38>
   11a10:	7d2b      	ldrb	r3, [r5, #20]
   11a12:	7023      	strb	r3, [r4, #0]
   11a14:	2206      	movs	r2, #6
   11a16:	18a9      	adds	r1, r5, r2
   11a18:	4630      	mov	r0, r6
   11a1a:	f00e f9d6 	bl	1fdca <WStrReverseCpy>
   11a1e:	3407      	adds	r4, #7
   11a20:	4620      	mov	r0, r4
   11a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a24:	f100 0720 	add.w	r7, r0, #32
   11a28:	4638      	mov	r0, r7
   11a2a:	f00e f943 	bl	1fcb4 <BdaIsZeros>
   11a2e:	2800      	cmp	r0, #0
   11a30:	d0e9      	beq.n	11a06 <smpScCatInitiatorBdAddr+0x26>
   11a32:	7ceb      	ldrb	r3, [r5, #19]
   11a34:	7023      	strb	r3, [r4, #0]
   11a36:	2206      	movs	r2, #6
   11a38:	4629      	mov	r1, r5
   11a3a:	e7ed      	b.n	11a18 <smpScCatInitiatorBdAddr+0x38>

00011a3c <smpScCatResponderBdAddr>:
   11a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a3e:	4607      	mov	r7, r0
   11a40:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11a44:	460c      	mov	r4, r1
   11a46:	f7fe f8d9 	bl	fbfc <dmConnCcbById>
   11a4a:	4605      	mov	r5, r0
   11a4c:	b1b0      	cbz	r0, 11a7c <smpScCatResponderBdAddr+0x40>
   11a4e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   11a52:	1c66      	adds	r6, r4, #1
   11a54:	b1a3      	cbz	r3, 11a80 <smpScCatResponderBdAddr+0x44>
   11a56:	f100 0720 	add.w	r7, r0, #32
   11a5a:	4638      	mov	r0, r7
   11a5c:	f00e f92a 	bl	1fcb4 <BdaIsZeros>
   11a60:	b920      	cbnz	r0, 11a6c <smpScCatResponderBdAddr+0x30>
   11a62:	2301      	movs	r3, #1
   11a64:	7023      	strb	r3, [r4, #0]
   11a66:	2206      	movs	r2, #6
   11a68:	4639      	mov	r1, r7
   11a6a:	e003      	b.n	11a74 <smpScCatResponderBdAddr+0x38>
   11a6c:	7ceb      	ldrb	r3, [r5, #19]
   11a6e:	7023      	strb	r3, [r4, #0]
   11a70:	2206      	movs	r2, #6
   11a72:	4629      	mov	r1, r5
   11a74:	4630      	mov	r0, r6
   11a76:	f00e f9a8 	bl	1fdca <WStrReverseCpy>
   11a7a:	3407      	adds	r4, #7
   11a7c:	4620      	mov	r0, r4
   11a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a80:	f100 071a 	add.w	r7, r0, #26
   11a84:	4638      	mov	r0, r7
   11a86:	f00e f915 	bl	1fcb4 <BdaIsZeros>
   11a8a:	2800      	cmp	r0, #0
   11a8c:	d0e9      	beq.n	11a62 <smpScCatResponderBdAddr+0x26>
   11a8e:	7d2b      	ldrb	r3, [r5, #20]
   11a90:	7023      	strb	r3, [r4, #0]
   11a92:	2206      	movs	r2, #6
   11a94:	18a9      	adds	r1, r5, r2
   11a96:	e7ed      	b.n	11a74 <smpScCatResponderBdAddr+0x38>

00011a98 <smpScProcPairing>:
   11a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11a9a:	2300      	movs	r3, #0
   11a9c:	7013      	strb	r3, [r2, #0]
   11a9e:	700b      	strb	r3, [r1, #0]
   11aa0:	7cc3      	ldrb	r3, [r0, #19]
   11aa2:	7c85      	ldrb	r5, [r0, #18]
   11aa4:	f013 0f08 	tst.w	r3, #8
   11aa8:	4604      	mov	r4, r0
   11aaa:	d039      	beq.n	11b20 <smpScProcPairing+0x88>
   11aac:	7e83      	ldrb	r3, [r0, #26]
   11aae:	071e      	lsls	r6, r3, #28
   11ab0:	d536      	bpl.n	11b20 <smpScProcPairing+0x88>
   11ab2:	2d01      	cmp	r5, #1
   11ab4:	d002      	beq.n	11abc <smpScProcPairing+0x24>
   11ab6:	7e43      	ldrb	r3, [r0, #25]
   11ab8:	2b01      	cmp	r3, #1
   11aba:	d137      	bne.n	11b2c <smpScProcPairing+0x94>
   11abc:	2301      	movs	r3, #1
   11abe:	700b      	strb	r3, [r1, #0]
   11ac0:	2500      	movs	r5, #0
   11ac2:	780b      	ldrb	r3, [r1, #0]
   11ac4:	b97b      	cbnz	r3, 11ae6 <smpScProcPairing+0x4e>
   11ac6:	7ce3      	ldrb	r3, [r4, #19]
   11ac8:	0758      	lsls	r0, r3, #29
   11aca:	d402      	bmi.n	11ad2 <smpScProcPairing+0x3a>
   11acc:	7ea3      	ldrb	r3, [r4, #26]
   11ace:	075b      	lsls	r3, r3, #29
   11ad0:	d509      	bpl.n	11ae6 <smpScProcPairing+0x4e>
   11ad2:	7c60      	ldrb	r0, [r4, #17]
   11ad4:	2803      	cmp	r0, #3
   11ad6:	d006      	beq.n	11ae6 <smpScProcPairing+0x4e>
   11ad8:	7e23      	ldrb	r3, [r4, #24]
   11ada:	2b03      	cmp	r3, #3
   11adc:	d003      	beq.n	11ae6 <smpScProcPairing+0x4e>
   11ade:	2801      	cmp	r0, #1
   11ae0:	d826      	bhi.n	11b30 <smpScProcPairing+0x98>
   11ae2:	2b01      	cmp	r3, #1
   11ae4:	d83d      	bhi.n	11b62 <smpScProcPairing+0xca>
   11ae6:	f894 c013 	ldrb.w	ip, [r4, #19]
   11aea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11aee:	f01c 0f08 	tst.w	ip, #8
   11af2:	f000 808e 	beq.w	11c12 <smpScProcPairing+0x17a>
   11af6:	7ea7      	ldrb	r7, [r4, #26]
   11af8:	073e      	lsls	r6, r7, #28
   11afa:	f140 808a 	bpl.w	11c12 <smpScProcPairing+0x17a>
   11afe:	4b5a      	ldr	r3, [pc, #360]	; (11c68 <smpScProcPairing+0x1d0>)
   11b00:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   11b04:	bb7e      	cbnz	r6, 11b66 <smpScProcPairing+0xce>
   11b06:	f8ad 0004 	strh.w	r0, [sp, #4]
   11b0a:	f240 3303 	movw	r3, #771	; 0x303
   11b0e:	a901      	add	r1, sp, #4
   11b10:	4620      	mov	r0, r4
   11b12:	f8ad 3006 	strh.w	r3, [sp, #6]
   11b16:	f000 fde6 	bl	126e6 <smpSmExecute>
   11b1a:	4630      	mov	r0, r6
   11b1c:	b003      	add	sp, #12
   11b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b20:	2d01      	cmp	r5, #1
   11b22:	d103      	bne.n	11b2c <smpScProcPairing+0x94>
   11b24:	7e63      	ldrb	r3, [r4, #25]
   11b26:	2b01      	cmp	r3, #1
   11b28:	d1cb      	bne.n	11ac2 <smpScProcPairing+0x2a>
   11b2a:	e7c7      	b.n	11abc <smpScProcPairing+0x24>
   11b2c:	2501      	movs	r5, #1
   11b2e:	e7c8      	b.n	11ac2 <smpScProcPairing+0x2a>
   11b30:	2804      	cmp	r0, #4
   11b32:	d114      	bne.n	11b5e <smpScProcPairing+0xc6>
   11b34:	2b02      	cmp	r3, #2
   11b36:	d014      	beq.n	11b62 <smpScProcPairing+0xca>
   11b38:	1f1f      	subs	r7, r3, #4
   11b3a:	427b      	negs	r3, r7
   11b3c:	417b      	adcs	r3, r7
   11b3e:	7013      	strb	r3, [r2, #0]
   11b40:	7e20      	ldrb	r0, [r4, #24]
   11b42:	2802      	cmp	r0, #2
   11b44:	d102      	bne.n	11b4c <smpScProcPairing+0xb4>
   11b46:	7c60      	ldrb	r0, [r4, #17]
   11b48:	2802      	cmp	r0, #2
   11b4a:	d006      	beq.n	11b5a <smpScProcPairing+0xc2>
   11b4c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   11b50:	2800      	cmp	r0, #0
   11b52:	bf08      	it	eq
   11b54:	f083 0301 	eoreq.w	r3, r3, #1
   11b58:	7013      	strb	r3, [r2, #0]
   11b5a:	2500      	movs	r5, #0
   11b5c:	e7c3      	b.n	11ae6 <smpScProcPairing+0x4e>
   11b5e:	2300      	movs	r3, #0
   11b60:	e7ed      	b.n	11b3e <smpScProcPairing+0xa6>
   11b62:	2301      	movs	r3, #1
   11b64:	e7eb      	b.n	11b3e <smpScProcPairing+0xa6>
   11b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b68:	f240 1601 	movw	r6, #257	; 0x101
   11b6c:	801e      	strh	r6, [r3, #0]
   11b6e:	7812      	ldrb	r2, [r2, #0]
   11b70:	711a      	strb	r2, [r3, #4]
   11b72:	780a      	ldrb	r2, [r1, #0]
   11b74:	b112      	cbz	r2, 11b7c <smpScProcPairing+0xe4>
   11b76:	2202      	movs	r2, #2
   11b78:	705a      	strb	r2, [r3, #1]
   11b7a:	e017      	b.n	11bac <smpScProcPairing+0x114>
   11b7c:	7e22      	ldrb	r2, [r4, #24]
   11b7e:	b9fd      	cbnz	r5, 11bc0 <smpScProcPairing+0x128>
   11b80:	2103      	movs	r1, #3
   11b82:	2a04      	cmp	r2, #4
   11b84:	7059      	strb	r1, [r3, #1]
   11b86:	d106      	bne.n	11b96 <smpScProcPairing+0xfe>
   11b88:	7c62      	ldrb	r2, [r4, #17]
   11b8a:	2a01      	cmp	r2, #1
   11b8c:	d001      	beq.n	11b92 <smpScProcPairing+0xfa>
   11b8e:	2a04      	cmp	r2, #4
   11b90:	d105      	bne.n	11b9e <smpScProcPairing+0x106>
   11b92:	2204      	movs	r2, #4
   11b94:	e7f0      	b.n	11b78 <smpScProcPairing+0xe0>
   11b96:	2a01      	cmp	r2, #1
   11b98:	d101      	bne.n	11b9e <smpScProcPairing+0x106>
   11b9a:	7c62      	ldrb	r2, [r4, #17]
   11b9c:	e7f7      	b.n	11b8e <smpScProcPairing+0xf6>
   11b9e:	f01c 0f10 	tst.w	ip, #16
   11ba2:	d003      	beq.n	11bac <smpScProcPairing+0x114>
   11ba4:	06fa      	lsls	r2, r7, #27
   11ba6:	d501      	bpl.n	11bac <smpScProcPairing+0x114>
   11ba8:	2201      	movs	r2, #1
   11baa:	709a      	strb	r2, [r3, #2]
   11bac:	f8ad 0004 	strh.w	r0, [sp, #4]
   11bb0:	4620      	mov	r0, r4
   11bb2:	f7ff fd11 	bl	115d8 <SmpScAllocScratchBuffers>
   11bb6:	b148      	cbz	r0, 11bcc <smpScProcPairing+0x134>
   11bb8:	2310      	movs	r3, #16
   11bba:	f88d 3006 	strb.w	r3, [sp, #6]
   11bbe:	e009      	b.n	11bd4 <smpScProcPairing+0x13c>
   11bc0:	2a01      	cmp	r2, #1
   11bc2:	d1f3      	bne.n	11bac <smpScProcPairing+0x114>
   11bc4:	7c62      	ldrb	r2, [r4, #17]
   11bc6:	2a01      	cmp	r2, #1
   11bc8:	d1f0      	bne.n	11bac <smpScProcPairing+0x114>
   11bca:	e7e2      	b.n	11b92 <smpScProcPairing+0xfa>
   11bcc:	f640 0303 	movw	r3, #2051	; 0x803
   11bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
   11bd4:	a901      	add	r1, sp, #4
   11bd6:	4620      	mov	r0, r4
   11bd8:	f000 fd85 	bl	126e6 <smpSmExecute>
   11bdc:	7ce2      	ldrb	r2, [r4, #19]
   11bde:	7ea1      	ldrb	r1, [r4, #26]
   11be0:	ea01 0302 	and.w	r3, r1, r2
   11be4:	bb6d      	cbnz	r5, 11c42 <smpScProcPairing+0x1aa>
   11be6:	f043 0304 	orr.w	r3, r3, #4
   11bea:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   11bee:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11bf2:	2b00      	cmp	r3, #0
   11bf4:	bf08      	it	eq
   11bf6:	460a      	moveq	r2, r1
   11bf8:	4b1c      	ldr	r3, [pc, #112]	; (11c6c <smpScProcPairing+0x1d4>)
   11bfa:	6819      	ldr	r1, [r3, #0]
   11bfc:	b325      	cbz	r5, 11c48 <smpScProcPairing+0x1b0>
   11bfe:	798b      	ldrb	r3, [r1, #6]
   11c00:	f003 0304 	and.w	r3, r3, #4
   11c04:	421a      	tst	r2, r3
   11c06:	d01f      	beq.n	11c48 <smpScProcPairing+0x1b0>
   11c08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11c0c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11c10:	e007      	b.n	11c22 <smpScProcPairing+0x18a>
   11c12:	4b16      	ldr	r3, [pc, #88]	; (11c6c <smpScProcPairing+0x1d4>)
   11c14:	681b      	ldr	r3, [r3, #0]
   11c16:	799b      	ldrb	r3, [r3, #6]
   11c18:	f013 0308 	ands.w	r3, r3, #8
   11c1c:	d00b      	beq.n	11c36 <smpScProcPairing+0x19e>
   11c1e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11c22:	f240 3303 	movw	r3, #771	; 0x303
   11c26:	a901      	add	r1, sp, #4
   11c28:	4620      	mov	r0, r4
   11c2a:	f8ad 3006 	strh.w	r3, [sp, #6]
   11c2e:	2600      	movs	r6, #0
   11c30:	f000 fd59 	bl	126e6 <smpSmExecute>
   11c34:	e771      	b.n	11b1a <smpScProcPairing+0x82>
   11c36:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11c38:	7013      	strb	r3, [r2, #0]
   11c3a:	f8ad 0004 	strh.w	r0, [sp, #4]
   11c3e:	2311      	movs	r3, #17
   11c40:	e7bb      	b.n	11bba <smpScProcPairing+0x122>
   11c42:	f023 0304 	bic.w	r3, r3, #4
   11c46:	e7d0      	b.n	11bea <smpScProcPairing+0x152>
   11c48:	78cb      	ldrb	r3, [r1, #3]
   11c4a:	7d22      	ldrb	r2, [r4, #20]
   11c4c:	429a      	cmp	r2, r3
   11c4e:	d302      	bcc.n	11c56 <smpScProcPairing+0x1be>
   11c50:	7ee2      	ldrb	r2, [r4, #27]
   11c52:	429a      	cmp	r2, r3
   11c54:	d206      	bcs.n	11c64 <smpScProcPairing+0x1cc>
   11c56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11c5a:	f8ad 3004 	strh.w	r3, [sp, #4]
   11c5e:	f240 6303 	movw	r3, #1539	; 0x603
   11c62:	e7e0      	b.n	11c26 <smpScProcPairing+0x18e>
   11c64:	2601      	movs	r6, #1
   11c66:	e758      	b.n	11b1a <smpScProcPairing+0x82>
   11c68:	100193c0 	.word	0x100193c0
   11c6c:	10017f74 	.word	0x10017f74

00011c70 <smpScAuthReq>:
   11c70:	b530      	push	{r4, r5, lr}
   11c72:	6b44      	ldr	r4, [r0, #52]	; 0x34
   11c74:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11c78:	7825      	ldrb	r5, [r4, #0]
   11c7a:	b087      	sub	sp, #28
   11c7c:	b98d      	cbnz	r5, 11ca2 <smpScAuthReq+0x32>
   11c7e:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   11c82:	0764      	lsls	r4, r4, #29
   11c84:	d510      	bpl.n	11ca8 <smpScAuthReq+0x38>
   11c86:	f8ad 3000 	strh.w	r3, [sp]
   11c8a:	4668      	mov	r0, sp
   11c8c:	232e      	movs	r3, #46	; 0x2e
   11c8e:	f88d 3002 	strb.w	r3, [sp, #2]
   11c92:	f88d 1004 	strb.w	r1, [sp, #4]
   11c96:	f88d 2005 	strb.w	r2, [sp, #5]
   11c9a:	f7fe fe47 	bl	1092c <DmSmpCbackExec>
   11c9e:	b007      	add	sp, #28
   11ca0:	bd30      	pop	{r4, r5, pc}
   11ca2:	7864      	ldrb	r4, [r4, #1]
   11ca4:	2c02      	cmp	r4, #2
   11ca6:	d0ee      	beq.n	11c86 <smpScAuthReq+0x16>
   11ca8:	f8ad 3000 	strh.w	r3, [sp]
   11cac:	2304      	movs	r3, #4
   11cae:	f88d 3002 	strb.w	r3, [sp, #2]
   11cb2:	2300      	movs	r3, #0
   11cb4:	f8ad 3004 	strh.w	r3, [sp, #4]
   11cb8:	f88d 3006 	strb.w	r3, [sp, #6]
   11cbc:	4669      	mov	r1, sp
   11cbe:	2303      	movs	r3, #3
   11cc0:	f88d 3014 	strb.w	r3, [sp, #20]
   11cc4:	f000 fd0f 	bl	126e6 <smpSmExecute>
   11cc8:	e7e9      	b.n	11c9e <smpScAuthReq+0x2e>

00011cca <smpScActCleanup>:
   11cca:	b510      	push	{r4, lr}
   11ccc:	4604      	mov	r4, r0
   11cce:	f000 fb17 	bl	12300 <smpActCleanup>
   11cd2:	4620      	mov	r0, r4
   11cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cd8:	f7ff bc9f 	b.w	1161a <SmpScFreeScratchBuffers>

00011cdc <smpScActPairingFailed>:
   11cdc:	b538      	push	{r3, r4, r5, lr}
   11cde:	4604      	mov	r4, r0
   11ce0:	460d      	mov	r5, r1
   11ce2:	f7ff fff2 	bl	11cca <smpScActCleanup>
   11ce6:	4629      	mov	r1, r5
   11ce8:	4620      	mov	r0, r4
   11cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11cee:	f000 bb1a 	b.w	12326 <smpActPairingFailed>

00011cf2 <smpScActPairingCancel>:
   11cf2:	b538      	push	{r3, r4, r5, lr}
   11cf4:	4605      	mov	r5, r0
   11cf6:	460c      	mov	r4, r1
   11cf8:	78c9      	ldrb	r1, [r1, #3]
   11cfa:	f000 fb03 	bl	12304 <smpSendPairingFailed>
   11cfe:	4621      	mov	r1, r4
   11d00:	4628      	mov	r0, r5
   11d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11d06:	f7ff bfe9 	b.w	11cdc <smpScActPairingFailed>

00011d0a <smpScActAuthSelect>:
   11d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11d0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11d0e:	684d      	ldr	r5, [r1, #4]
   11d10:	4604      	mov	r4, r0
   11d12:	2220      	movs	r2, #32
   11d14:	6898      	ldr	r0, [r3, #8]
   11d16:	f105 0109 	add.w	r1, r5, #9
   11d1a:	f00e f856 	bl	1fdca <WStrReverseCpy>
   11d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d20:	6898      	ldr	r0, [r3, #8]
   11d22:	2220      	movs	r2, #32
   11d24:	f105 0129 	add.w	r1, r5, #41	; 0x29
   11d28:	4410      	add	r0, r2
   11d2a:	f00e f84e 	bl	1fdca <WStrReverseCpy>
   11d2e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11d32:	f8ad 3004 	strh.w	r3, [sp, #4]
   11d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11d38:	785b      	ldrb	r3, [r3, #1]
   11d3a:	3b01      	subs	r3, #1
   11d3c:	2b03      	cmp	r3, #3
   11d3e:	d810      	bhi.n	11d62 <smpScActAuthSelect+0x58>
   11d40:	e8df f003 	tbb	[pc, r3]
   11d44:	020d0b02 	.word	0x020d0b02
   11d48:	2312      	movs	r3, #18
   11d4a:	f88d 3006 	strb.w	r3, [sp, #6]
   11d4e:	a901      	add	r1, sp, #4
   11d50:	4620      	mov	r0, r4
   11d52:	f000 fcc8 	bl	126e6 <smpSmExecute>
   11d56:	b003      	add	sp, #12
   11d58:	bd30      	pop	{r4, r5, pc}
   11d5a:	2314      	movs	r3, #20
   11d5c:	e7f5      	b.n	11d4a <smpScActAuthSelect+0x40>
   11d5e:	2313      	movs	r3, #19
   11d60:	e7f3      	b.n	11d4a <smpScActAuthSelect+0x40>
   11d62:	f640 0303 	movw	r3, #2051	; 0x803
   11d66:	f8ad 3006 	strh.w	r3, [sp, #6]
   11d6a:	e7f0      	b.n	11d4e <smpScActAuthSelect+0x44>

00011d6c <smpScActPkSetup>:
   11d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   11d6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11d70:	2200      	movs	r2, #0
   11d72:	70da      	strb	r2, [r3, #3]
   11d74:	2103      	movs	r1, #3
   11d76:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   11d7a:	f88d 2004 	strb.w	r2, [sp, #4]
   11d7e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   11d82:	f8ad 1000 	strh.w	r1, [sp]
   11d86:	791b      	ldrb	r3, [r3, #4]
   11d88:	f88d 3005 	strb.w	r3, [sp, #5]
   11d8c:	212e      	movs	r1, #46	; 0x2e
   11d8e:	4668      	mov	r0, sp
   11d90:	f88d 1002 	strb.w	r1, [sp, #2]
   11d94:	f7fe fdca 	bl	1092c <DmSmpCbackExec>
   11d98:	b007      	add	sp, #28
   11d9a:	f85d fb04 	ldr.w	pc, [sp], #4

00011d9e <smpScActJwncCalcF4>:
   11d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11da0:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   11da4:	4604      	mov	r4, r0
   11da6:	460d      	mov	r5, r1
   11da8:	b18e      	cbz	r6, 11dce <smpScActJwncCalcF4+0x30>
   11daa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11dac:	689e      	ldr	r6, [r3, #8]
   11dae:	f7fe ff71 	bl	10c94 <DmSecGetEccKey>
   11db2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11db4:	68db      	ldr	r3, [r3, #12]
   11db6:	3310      	adds	r3, #16
   11db8:	9301      	str	r3, [sp, #4]
   11dba:	2300      	movs	r3, #0
   11dbc:	9300      	str	r3, [sp, #0]
   11dbe:	4632      	mov	r2, r6
   11dc0:	4603      	mov	r3, r0
   11dc2:	4629      	mov	r1, r5
   11dc4:	4620      	mov	r0, r4
   11dc6:	f7ff fc71 	bl	116ac <SmpScCalcF4>
   11dca:	b002      	add	sp, #8
   11dcc:	bd70      	pop	{r4, r5, r6, pc}
   11dce:	f7fe ff61 	bl	10c94 <DmSecGetEccKey>
   11dd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11dd4:	68d3      	ldr	r3, [r2, #12]
   11dd6:	3310      	adds	r3, #16
   11dd8:	e9cd 6300 	strd	r6, r3, [sp]
   11ddc:	6893      	ldr	r3, [r2, #8]
   11dde:	4602      	mov	r2, r0
   11de0:	e7ef      	b.n	11dc2 <smpScActJwncCalcF4+0x24>

00011de2 <smpScActJwncCalcG2>:
   11de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11de4:	460a      	mov	r2, r1
   11de6:	4604      	mov	r4, r0
   11de8:	460e      	mov	r6, r1
   11dea:	4601      	mov	r1, r0
   11dec:	2050      	movs	r0, #80	; 0x50
   11dee:	f7ff fc4b 	bl	11688 <SmpScAlloc>
   11df2:	4605      	mov	r5, r0
   11df4:	b1d8      	cbz	r0, 11e2e <smpScActJwncCalcG2+0x4c>
   11df6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11dfa:	b1d3      	cbz	r3, 11e32 <smpScActJwncCalcG2+0x50>
   11dfc:	f7fe ff4a 	bl	10c94 <DmSecGetEccKey>
   11e00:	2220      	movs	r2, #32
   11e02:	4601      	mov	r1, r0
   11e04:	4628      	mov	r0, r5
   11e06:	f7ff fcb3 	bl	11770 <SmpScCat>
   11e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e0c:	6899      	ldr	r1, [r3, #8]
   11e0e:	2220      	movs	r2, #32
   11e10:	f7ff fcae 	bl	11770 <SmpScCat>
   11e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e16:	68d9      	ldr	r1, [r3, #12]
   11e18:	3110      	adds	r1, #16
   11e1a:	f7ff fcaf 	bl	1177c <SmpScCat128>
   11e1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11e20:	9600      	str	r6, [sp, #0]
   11e22:	4623      	mov	r3, r4
   11e24:	2250      	movs	r2, #80	; 0x50
   11e26:	4629      	mov	r1, r5
   11e28:	68c0      	ldr	r0, [r0, #12]
   11e2a:	f7ff fc11 	bl	11650 <SmpScCmac>
   11e2e:	b003      	add	sp, #12
   11e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11e34:	2220      	movs	r2, #32
   11e36:	6899      	ldr	r1, [r3, #8]
   11e38:	f7ff fc9a 	bl	11770 <SmpScCat>
   11e3c:	4607      	mov	r7, r0
   11e3e:	f7fe ff29 	bl	10c94 <DmSecGetEccKey>
   11e42:	2220      	movs	r2, #32
   11e44:	4601      	mov	r1, r0
   11e46:	4638      	mov	r0, r7
   11e48:	e7e2      	b.n	11e10 <smpScActJwncCalcG2+0x2e>

00011e4a <smpScActJwncDisplay>:
   11e4a:	b510      	push	{r4, lr}
   11e4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11e4e:	785b      	ldrb	r3, [r3, #1]
   11e50:	2b04      	cmp	r3, #4
   11e52:	b086      	sub	sp, #24
   11e54:	4604      	mov	r4, r0
   11e56:	d10f      	bne.n	11e78 <smpScActJwncDisplay+0x2e>
   11e58:	a802      	add	r0, sp, #8
   11e5a:	6849      	ldr	r1, [r1, #4]
   11e5c:	f00d ff7a 	bl	1fd54 <Calc128Cpy>
   11e60:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11e64:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e68:	a801      	add	r0, sp, #4
   11e6a:	2335      	movs	r3, #53	; 0x35
   11e6c:	f88d 3006 	strb.w	r3, [sp, #6]
   11e70:	f7fe fd5c 	bl	1092c <DmSmpCbackExec>
   11e74:	b006      	add	sp, #24
   11e76:	bd10      	pop	{r4, pc}
   11e78:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11e7c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e80:	a901      	add	r1, sp, #4
   11e82:	2315      	movs	r3, #21
   11e84:	f88d 3006 	strb.w	r3, [sp, #6]
   11e88:	f000 fc2d 	bl	126e6 <smpSmExecute>
   11e8c:	e7f2      	b.n	11e74 <smpScActJwncDisplay+0x2a>

00011e8e <smpScActPkKeypress>:
   11e8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e90:	684c      	ldr	r4, [r1, #4]
   11e92:	7a22      	ldrb	r2, [r4, #8]
   11e94:	2a0e      	cmp	r2, #14
   11e96:	d10e      	bne.n	11eb6 <smpScActPkKeypress+0x28>
   11e98:	7a63      	ldrb	r3, [r4, #9]
   11e9a:	f88d 3004 	strb.w	r3, [sp, #4]
   11e9e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11ea2:	f8ad 3000 	strh.w	r3, [sp]
   11ea6:	4668      	mov	r0, sp
   11ea8:	2336      	movs	r3, #54	; 0x36
   11eaa:	f88d 3002 	strb.w	r3, [sp, #2]
   11eae:	f7fe fd3d 	bl	1092c <DmSmpCbackExec>
   11eb2:	b003      	add	sp, #12
   11eb4:	bd30      	pop	{r4, r5, pc}
   11eb6:	2a03      	cmp	r2, #3
   11eb8:	d1fb      	bne.n	11eb2 <smpScActPkKeypress+0x24>
   11eba:	221d      	movs	r2, #29
   11ebc:	708a      	strb	r2, [r1, #2]
   11ebe:	f000 fc12 	bl	126e6 <smpSmExecute>
   11ec2:	e7f6      	b.n	11eb2 <smpScActPkKeypress+0x24>

00011ec4 <smpScActPkSendKeypress>:
   11ec4:	b538      	push	{r3, r4, r5, lr}
   11ec6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11ec8:	789b      	ldrb	r3, [r3, #2]
   11eca:	4604      	mov	r4, r0
   11ecc:	460d      	mov	r5, r1
   11ece:	b1c3      	cbz	r3, 11f02 <smpScActPkSendKeypress+0x3e>
   11ed0:	f000 f9f6 	bl	122c0 <smpStartRspTimer>
   11ed4:	200a      	movs	r0, #10
   11ed6:	f7ff faef 	bl	114b8 <smpMsgAlloc>
   11eda:	b148      	cbz	r0, 11ef0 <smpScActPkSendKeypress+0x2c>
   11edc:	230e      	movs	r3, #14
   11ede:	7203      	strb	r3, [r0, #8]
   11ee0:	792b      	ldrb	r3, [r5, #4]
   11ee2:	7243      	strb	r3, [r0, #9]
   11ee4:	4601      	mov	r1, r0
   11ee6:	4620      	mov	r0, r4
   11ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11eec:	f7ff ba99 	b.w	11422 <smpSendPkt>
   11ef0:	f640 0303 	movw	r3, #2051	; 0x803
   11ef4:	806b      	strh	r3, [r5, #2]
   11ef6:	4629      	mov	r1, r5
   11ef8:	4620      	mov	r0, r4
   11efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11efe:	f000 bbf2 	b.w	126e6 <smpSmExecute>
   11f02:	bd38      	pop	{r3, r4, r5, pc}

00011f04 <smpScActCalcSharedSecret>:
   11f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f06:	b099      	sub	sp, #100	; 0x64
   11f08:	4605      	mov	r5, r0
   11f0a:	f7fe fec3 	bl	10c94 <DmSecGetEccKey>
   11f0e:	ae10      	add	r6, sp, #64	; 0x40
   11f10:	f100 0340 	add.w	r3, r0, #64	; 0x40
   11f14:	f100 0260 	add.w	r2, r0, #96	; 0x60
   11f18:	6818      	ldr	r0, [r3, #0]
   11f1a:	6859      	ldr	r1, [r3, #4]
   11f1c:	4634      	mov	r4, r6
   11f1e:	c403      	stmia	r4!, {r0, r1}
   11f20:	3308      	adds	r3, #8
   11f22:	4293      	cmp	r3, r2
   11f24:	4626      	mov	r6, r4
   11f26:	d1f7      	bne.n	11f18 <smpScActCalcSharedSecret+0x14>
   11f28:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   11f2a:	68b3      	ldr	r3, [r6, #8]
   11f2c:	466a      	mov	r2, sp
   11f2e:	f103 0c20 	add.w	ip, r3, #32
   11f32:	4617      	mov	r7, r2
   11f34:	6818      	ldr	r0, [r3, #0]
   11f36:	6859      	ldr	r1, [r3, #4]
   11f38:	4614      	mov	r4, r2
   11f3a:	c403      	stmia	r4!, {r0, r1}
   11f3c:	3308      	adds	r3, #8
   11f3e:	4563      	cmp	r3, ip
   11f40:	4622      	mov	r2, r4
   11f42:	d1f7      	bne.n	11f34 <smpScActCalcSharedSecret+0x30>
   11f44:	68b3      	ldr	r3, [r6, #8]
   11f46:	ac08      	add	r4, sp, #32
   11f48:	f103 0640 	add.w	r6, r3, #64	; 0x40
   11f4c:	3320      	adds	r3, #32
   11f4e:	6818      	ldr	r0, [r3, #0]
   11f50:	6859      	ldr	r1, [r3, #4]
   11f52:	4622      	mov	r2, r4
   11f54:	c203      	stmia	r2!, {r0, r1}
   11f56:	3308      	adds	r3, #8
   11f58:	42b3      	cmp	r3, r6
   11f5a:	4614      	mov	r4, r2
   11f5c:	d1f7      	bne.n	11f4e <smpScActCalcSharedSecret+0x4a>
   11f5e:	4905      	ldr	r1, [pc, #20]	; (11f74 <smpScActCalcSharedSecret+0x70>)
   11f60:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11f64:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11f68:	2318      	movs	r3, #24
   11f6a:	4638      	mov	r0, r7
   11f6c:	f009 fa86 	bl	1b47c <SecEccGenSharedSecret>
   11f70:	b019      	add	sp, #100	; 0x64
   11f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f74:	100193c0 	.word	0x100193c0

00011f78 <smpScActCalcF5TKey>:
   11f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f7c:	460a      	mov	r2, r1
   11f7e:	b086      	sub	sp, #24
   11f80:	4680      	mov	r8, r0
   11f82:	460c      	mov	r4, r1
   11f84:	4601      	mov	r1, r0
   11f86:	2020      	movs	r0, #32
   11f88:	f7ff fb7e 	bl	11688 <SmpScAlloc>
   11f8c:	4607      	mov	r7, r0
   11f8e:	b1e8      	cbz	r0, 11fcc <smpScActCalcF5TKey+0x54>
   11f90:	4a10      	ldr	r2, [pc, #64]	; (11fd4 <smpScActCalcF5TKey+0x5c>)
   11f92:	ad02      	add	r5, sp, #8
   11f94:	f102 0310 	add.w	r3, r2, #16
   11f98:	46ac      	mov	ip, r5
   11f9a:	6810      	ldr	r0, [r2, #0]
   11f9c:	6851      	ldr	r1, [r2, #4]
   11f9e:	462e      	mov	r6, r5
   11fa0:	c603      	stmia	r6!, {r0, r1}
   11fa2:	3208      	adds	r2, #8
   11fa4:	429a      	cmp	r2, r3
   11fa6:	4635      	mov	r5, r6
   11fa8:	d1f7      	bne.n	11f9a <smpScActCalcF5TKey+0x22>
   11faa:	1d22      	adds	r2, r4, #4
   11fac:	463b      	mov	r3, r7
   11fae:	f104 0124 	add.w	r1, r4, #36	; 0x24
   11fb2:	f852 0b04 	ldr.w	r0, [r2], #4
   11fb6:	f843 0b04 	str.w	r0, [r3], #4
   11fba:	428a      	cmp	r2, r1
   11fbc:	d1f9      	bne.n	11fb2 <smpScActCalcF5TKey+0x3a>
   11fbe:	9400      	str	r4, [sp, #0]
   11fc0:	4643      	mov	r3, r8
   11fc2:	2220      	movs	r2, #32
   11fc4:	4639      	mov	r1, r7
   11fc6:	4660      	mov	r0, ip
   11fc8:	f7ff fb42 	bl	11650 <SmpScCmac>
   11fcc:	b006      	add	sp, #24
   11fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fd2:	bf00      	nop
   11fd4:	0003bd64 	.word	0x0003bd64

00011fd8 <smpScActCalcF5MacKey>:
   11fd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11fdc:	4604      	mov	r4, r0
   11fde:	6918      	ldr	r0, [r3, #16]
   11fe0:	460e      	mov	r6, r1
   11fe2:	3010      	adds	r0, #16
   11fe4:	6849      	ldr	r1, [r1, #4]
   11fe6:	f00d feb5 	bl	1fd54 <Calc128Cpy>
   11fea:	4632      	mov	r2, r6
   11fec:	4621      	mov	r1, r4
   11fee:	2035      	movs	r0, #53	; 0x35
   11ff0:	f7ff fb4a 	bl	11688 <SmpScAlloc>
   11ff4:	4605      	mov	r5, r0
   11ff6:	b318      	cbz	r0, 12040 <smpScActCalcF5MacKey+0x68>
   11ff8:	2700      	movs	r7, #0
   11ffa:	2204      	movs	r2, #4
   11ffc:	7007      	strb	r7, [r0, #0]
   11ffe:	4911      	ldr	r1, [pc, #68]	; (12044 <smpScActCalcF5MacKey+0x6c>)
   12000:	3001      	adds	r0, #1
   12002:	f7ff fbb5 	bl	11770 <SmpScCat>
   12006:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12008:	68d9      	ldr	r1, [r3, #12]
   1200a:	f7ff fbb7 	bl	1177c <SmpScCat128>
   1200e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12010:	68d9      	ldr	r1, [r3, #12]
   12012:	3110      	adds	r1, #16
   12014:	f7ff fbb2 	bl	1177c <SmpScCat128>
   12018:	4601      	mov	r1, r0
   1201a:	4620      	mov	r0, r4
   1201c:	f7ff fce0 	bl	119e0 <smpScCatInitiatorBdAddr>
   12020:	4601      	mov	r1, r0
   12022:	4620      	mov	r0, r4
   12024:	f7ff fd0a 	bl	11a3c <smpScCatResponderBdAddr>
   12028:	2301      	movs	r3, #1
   1202a:	7003      	strb	r3, [r0, #0]
   1202c:	7047      	strb	r7, [r0, #1]
   1202e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12030:	6918      	ldr	r0, [r3, #16]
   12032:	9600      	str	r6, [sp, #0]
   12034:	4623      	mov	r3, r4
   12036:	2235      	movs	r2, #53	; 0x35
   12038:	4629      	mov	r1, r5
   1203a:	3010      	adds	r0, #16
   1203c:	f7ff fb08 	bl	11650 <SmpScCmac>
   12040:	b003      	add	sp, #12
   12042:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12044:	0003bd74 	.word	0x0003bd74

00012048 <smpScActCalcF5Ltk>:
   12048:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1204a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1204c:	4604      	mov	r4, r0
   1204e:	460e      	mov	r6, r1
   12050:	6918      	ldr	r0, [r3, #16]
   12052:	6849      	ldr	r1, [r1, #4]
   12054:	f00d fe7e 	bl	1fd54 <Calc128Cpy>
   12058:	4632      	mov	r2, r6
   1205a:	4621      	mov	r1, r4
   1205c:	2035      	movs	r0, #53	; 0x35
   1205e:	f7ff fb13 	bl	11688 <SmpScAlloc>
   12062:	4605      	mov	r5, r0
   12064:	b318      	cbz	r0, 120ae <smpScActCalcF5Ltk+0x66>
   12066:	2701      	movs	r7, #1
   12068:	2204      	movs	r2, #4
   1206a:	7007      	strb	r7, [r0, #0]
   1206c:	4911      	ldr	r1, [pc, #68]	; (120b4 <smpScActCalcF5Ltk+0x6c>)
   1206e:	4438      	add	r0, r7
   12070:	f7ff fb7e 	bl	11770 <SmpScCat>
   12074:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12076:	68d9      	ldr	r1, [r3, #12]
   12078:	f7ff fb80 	bl	1177c <SmpScCat128>
   1207c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1207e:	68d9      	ldr	r1, [r3, #12]
   12080:	3110      	adds	r1, #16
   12082:	f7ff fb7b 	bl	1177c <SmpScCat128>
   12086:	4601      	mov	r1, r0
   12088:	4620      	mov	r0, r4
   1208a:	f7ff fca9 	bl	119e0 <smpScCatInitiatorBdAddr>
   1208e:	4601      	mov	r1, r0
   12090:	4620      	mov	r0, r4
   12092:	f7ff fcd3 	bl	11a3c <smpScCatResponderBdAddr>
   12096:	2300      	movs	r3, #0
   12098:	7007      	strb	r7, [r0, #0]
   1209a:	7043      	strb	r3, [r0, #1]
   1209c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1209e:	6918      	ldr	r0, [r3, #16]
   120a0:	9600      	str	r6, [sp, #0]
   120a2:	4623      	mov	r3, r4
   120a4:	2235      	movs	r2, #53	; 0x35
   120a6:	4629      	mov	r1, r5
   120a8:	3010      	adds	r0, #16
   120aa:	f7ff fad1 	bl	11650 <SmpScCmac>
   120ae:	b003      	add	sp, #12
   120b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120b2:	bf00      	nop
   120b4:	0003bd74 	.word	0x0003bd74

000120b8 <smpScActDHKeyCalcF6Ea>:
   120b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   120ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   120bc:	4604      	mov	r4, r0
   120be:	6918      	ldr	r0, [r3, #16]
   120c0:	2210      	movs	r2, #16
   120c2:	4410      	add	r0, r2
   120c4:	460d      	mov	r5, r1
   120c6:	6849      	ldr	r1, [r1, #4]
   120c8:	f00d fe7f 	bl	1fdca <WStrReverseCpy>
   120cc:	462a      	mov	r2, r5
   120ce:	4621      	mov	r1, r4
   120d0:	2041      	movs	r0, #65	; 0x41
   120d2:	f7ff fad9 	bl	11688 <SmpScAlloc>
   120d6:	4606      	mov	r6, r0
   120d8:	b318      	cbz	r0, 12122 <smpScActDHKeyCalcF6Ea+0x6a>
   120da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   120dc:	68d9      	ldr	r1, [r3, #12]
   120de:	f7ff fb4d 	bl	1177c <SmpScCat128>
   120e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   120e4:	68d9      	ldr	r1, [r3, #12]
   120e6:	3110      	adds	r1, #16
   120e8:	f7ff fb48 	bl	1177c <SmpScCat128>
   120ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   120ee:	68d9      	ldr	r1, [r3, #12]
   120f0:	3130      	adds	r1, #48	; 0x30
   120f2:	f7ff fb43 	bl	1177c <SmpScCat128>
   120f6:	7ce3      	ldrb	r3, [r4, #19]
   120f8:	7003      	strb	r3, [r0, #0]
   120fa:	7ca3      	ldrb	r3, [r4, #18]
   120fc:	7043      	strb	r3, [r0, #1]
   120fe:	7c63      	ldrb	r3, [r4, #17]
   12100:	7083      	strb	r3, [r0, #2]
   12102:	1cc1      	adds	r1, r0, #3
   12104:	4620      	mov	r0, r4
   12106:	f7ff fc6b 	bl	119e0 <smpScCatInitiatorBdAddr>
   1210a:	4601      	mov	r1, r0
   1210c:	4620      	mov	r0, r4
   1210e:	f7ff fc95 	bl	11a3c <smpScCatResponderBdAddr>
   12112:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12114:	9500      	str	r5, [sp, #0]
   12116:	4623      	mov	r3, r4
   12118:	2241      	movs	r2, #65	; 0x41
   1211a:	4631      	mov	r1, r6
   1211c:	6900      	ldr	r0, [r0, #16]
   1211e:	f7ff fa97 	bl	11650 <SmpScCmac>
   12122:	b002      	add	sp, #8
   12124:	bd70      	pop	{r4, r5, r6, pc}

00012126 <smpScActDHKeyCalcF6Eb>:
   12126:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12128:	460a      	mov	r2, r1
   1212a:	4604      	mov	r4, r0
   1212c:	460d      	mov	r5, r1
   1212e:	4601      	mov	r1, r0
   12130:	2041      	movs	r0, #65	; 0x41
   12132:	f7ff faa9 	bl	11688 <SmpScAlloc>
   12136:	4606      	mov	r6, r0
   12138:	b318      	cbz	r0, 12182 <smpScActDHKeyCalcF6Eb+0x5c>
   1213a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1213c:	68d9      	ldr	r1, [r3, #12]
   1213e:	3110      	adds	r1, #16
   12140:	f7ff fb1c 	bl	1177c <SmpScCat128>
   12144:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12146:	68d9      	ldr	r1, [r3, #12]
   12148:	f7ff fb18 	bl	1177c <SmpScCat128>
   1214c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1214e:	68d9      	ldr	r1, [r3, #12]
   12150:	3120      	adds	r1, #32
   12152:	f7ff fb13 	bl	1177c <SmpScCat128>
   12156:	7ea3      	ldrb	r3, [r4, #26]
   12158:	7003      	strb	r3, [r0, #0]
   1215a:	7e63      	ldrb	r3, [r4, #25]
   1215c:	7043      	strb	r3, [r0, #1]
   1215e:	7e23      	ldrb	r3, [r4, #24]
   12160:	7083      	strb	r3, [r0, #2]
   12162:	1cc1      	adds	r1, r0, #3
   12164:	4620      	mov	r0, r4
   12166:	f7ff fc69 	bl	11a3c <smpScCatResponderBdAddr>
   1216a:	4601      	mov	r1, r0
   1216c:	4620      	mov	r0, r4
   1216e:	f7ff fc37 	bl	119e0 <smpScCatInitiatorBdAddr>
   12172:	6b60      	ldr	r0, [r4, #52]	; 0x34
   12174:	9500      	str	r5, [sp, #0]
   12176:	4623      	mov	r3, r4
   12178:	2241      	movs	r2, #65	; 0x41
   1217a:	4631      	mov	r1, r6
   1217c:	6900      	ldr	r0, [r0, #16]
   1217e:	f7ff fa67 	bl	11650 <SmpScCmac>
   12182:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12184:	6869      	ldr	r1, [r5, #4]
   12186:	68d8      	ldr	r0, [r3, #12]
   12188:	b002      	add	sp, #8
   1218a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1218e:	f00d bde1 	b.w	1fd54 <Calc128Cpy>
   12192:	bf00      	nop

00012194 <SmpiScInit>:
   12194:	4b02      	ldr	r3, [pc, #8]	; (121a0 <SmpiScInit+0xc>)
   12196:	4a03      	ldr	r2, [pc, #12]	; (121a4 <SmpiScInit+0x10>)
   12198:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   1219c:	f7ff bab8 	b.w	11710 <SmpScInit>
   121a0:	100193c0 	.word	0x100193c0
   121a4:	0003bd78 	.word	0x0003bd78

000121a8 <smpiStateStr>:
   121a8:	2824      	cmp	r0, #36	; 0x24
   121aa:	bf9d      	ittte	ls
   121ac:	4b02      	ldrls	r3, [pc, #8]	; (121b8 <smpiStateStr+0x10>)
   121ae:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   121b2:	68c0      	ldrls	r0, [r0, #12]
   121b4:	4801      	ldrhi	r0, [pc, #4]	; (121bc <smpiStateStr+0x14>)
   121b6:	4770      	bx	lr
   121b8:	0003bd78 	.word	0x0003bd78
   121bc:	0003d329 	.word	0x0003d329

000121c0 <SmprScInit>:
   121c0:	4b02      	ldr	r3, [pc, #8]	; (121cc <SmprScInit+0xc>)
   121c2:	4a03      	ldr	r2, [pc, #12]	; (121d0 <SmprScInit+0x10>)
   121c4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   121c8:	f7ff baa2 	b.w	11710 <SmpScInit>
   121cc:	100193c0 	.word	0x100193c0
   121d0:	0003c0a4 	.word	0x0003c0a4

000121d4 <smprStateStr>:
   121d4:	2824      	cmp	r0, #36	; 0x24
   121d6:	bf9d      	ittte	ls
   121d8:	4b02      	ldrls	r3, [pc, #8]	; (121e4 <smprStateStr+0x10>)
   121da:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   121de:	68c0      	ldrls	r0, [r0, #12]
   121e0:	4801      	ldrhi	r0, [pc, #4]	; (121e8 <smprStateStr+0x14>)
   121e2:	4770      	bx	lr
   121e4:	0003c0a4 	.word	0x0003c0a4
   121e8:	0003d4fd 	.word	0x0003d4fd

000121ec <SmprInit>:
   121ec:	4b05      	ldr	r3, [pc, #20]	; (12204 <SmprInit+0x18>)
   121ee:	4a06      	ldr	r2, [pc, #24]	; (12208 <SmprInit+0x1c>)
   121f0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   121f4:	4a05      	ldr	r2, [pc, #20]	; (1220c <SmprInit+0x20>)
   121f6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   121fa:	4a05      	ldr	r2, [pc, #20]	; (12210 <SmprInit+0x24>)
   121fc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   12200:	4770      	bx	lr
   12202:	bf00      	nop
   12204:	100193c0 	.word	0x100193c0
   12208:	0003c3f0 	.word	0x0003c3f0
   1220c:	00012749 	.word	0x00012749
   12210:	00012835 	.word	0x00012835

00012214 <DmSmpEncryptReq>:
   12214:	b570      	push	{r4, r5, r6, lr}
   12216:	460d      	mov	r5, r1
   12218:	4614      	mov	r4, r2
   1221a:	f7fd fcef 	bl	fbfc <dmConnCcbById>
   1221e:	b148      	cbz	r0, 12234 <DmSmpEncryptReq+0x20>
   12220:	2200      	movs	r2, #0
   12222:	7605      	strb	r5, [r0, #24]
   12224:	7482      	strb	r2, [r0, #18]
   12226:	4623      	mov	r3, r4
   12228:	4903      	ldr	r1, [pc, #12]	; (12238 <DmSmpEncryptReq+0x24>)
   1222a:	8980      	ldrh	r0, [r0, #12]
   1222c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12230:	f003 bf35 	b.w	1609e <HciLeStartEncryptionCmd>
   12234:	bd70      	pop	{r4, r5, r6, pc}
   12236:	bf00      	nop
   12238:	0003ce74 	.word	0x0003ce74

0001223c <DmSecPairReq>:
   1223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12240:	4681      	mov	r9, r0
   12242:	2008      	movs	r0, #8
   12244:	4688      	mov	r8, r1
   12246:	4617      	mov	r7, r2
   12248:	461e      	mov	r6, r3
   1224a:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1224e:	f008 fbd8 	bl	1aa02 <WsfMsgAlloc>
   12252:	b180      	cbz	r0, 12276 <DmSecPairReq+0x3a>
   12254:	2301      	movs	r3, #1
   12256:	f006 0607 	and.w	r6, r6, #7
   1225a:	f005 0507 	and.w	r5, r5, #7
   1225e:	7083      	strb	r3, [r0, #2]
   12260:	f880 8004 	strb.w	r8, [r0, #4]
   12264:	7147      	strb	r7, [r0, #5]
   12266:	7186      	strb	r6, [r0, #6]
   12268:	71c5      	strb	r5, [r0, #7]
   1226a:	f8a0 9000 	strh.w	r9, [r0]
   1226e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12272:	f7ff b924 	b.w	114be <SmpDmMsgSend>
   12276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001227a <DmSecEncryptReq>:
   1227a:	b570      	push	{r4, r5, r6, lr}
   1227c:	4606      	mov	r6, r0
   1227e:	2020      	movs	r0, #32
   12280:	460d      	mov	r5, r1
   12282:	4614      	mov	r4, r2
   12284:	f008 fbbd 	bl	1aa02 <WsfMsgAlloc>
   12288:	b1b8      	cbz	r0, 122ba <DmSecEncryptReq+0x40>
   1228a:	2350      	movs	r3, #80	; 0x50
   1228c:	7083      	strb	r3, [r0, #2]
   1228e:	4603      	mov	r3, r0
   12290:	4622      	mov	r2, r4
   12292:	f823 6b04 	strh.w	r6, [r3], #4
   12296:	f104 0118 	add.w	r1, r4, #24
   1229a:	f852 4b04 	ldr.w	r4, [r2], #4
   1229e:	f843 4b04 	str.w	r4, [r3], #4
   122a2:	428a      	cmp	r2, r1
   122a4:	d1f9      	bne.n	1229a <DmSecEncryptReq+0x20>
   122a6:	8812      	ldrh	r2, [r2, #0]
   122a8:	801a      	strh	r2, [r3, #0]
   122aa:	4b04      	ldr	r3, [pc, #16]	; (122bc <DmSecEncryptReq+0x42>)
   122ac:	7785      	strb	r5, [r0, #30]
   122ae:	4601      	mov	r1, r0
   122b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   122b4:	7b18      	ldrb	r0, [r3, #12]
   122b6:	f008 bbc8 	b.w	1aa4a <WsfMsgSend>
   122ba:	bd70      	pop	{r4, r5, r6, pc}
   122bc:	100192f4 	.word	0x100192f4

000122c0 <smpStartRspTimer>:
   122c0:	f24e 130f 	movw	r3, #57615	; 0xe10f
   122c4:	8183      	strh	r3, [r0, #12]
   122c6:	211e      	movs	r1, #30
   122c8:	f008 bd54 	b.w	1ad74 <WsfTimerStartSec>

000122cc <smpActNone>:
   122cc:	4770      	bx	lr

000122ce <smpCleanup>:
   122ce:	b510      	push	{r4, lr}
   122d0:	4604      	mov	r4, r0
   122d2:	6a00      	ldr	r0, [r0, #32]
   122d4:	b118      	cbz	r0, 122de <smpCleanup+0x10>
   122d6:	f008 fb45 	bl	1a964 <WsfBufFree>
   122da:	2300      	movs	r3, #0
   122dc:	6223      	str	r3, [r4, #32]
   122de:	4620      	mov	r0, r4
   122e0:	f008 fd6e 	bl	1adc0 <WsfTimerStop>
   122e4:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   122e8:	2300      	movs	r3, #0
   122ea:	429a      	cmp	r2, r3
   122ec:	bf14      	ite	ne
   122ee:	220b      	movne	r2, #11
   122f0:	2201      	moveq	r2, #1
   122f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   122f6:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   122fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   122fe:	bd10      	pop	{r4, pc}

00012300 <smpActCleanup>:
   12300:	f7ff bfe5 	b.w	122ce <smpCleanup>

00012304 <smpSendPairingFailed>:
   12304:	b538      	push	{r3, r4, r5, lr}
   12306:	4604      	mov	r4, r0
   12308:	200a      	movs	r0, #10
   1230a:	460d      	mov	r5, r1
   1230c:	f7ff f8d4 	bl	114b8 <smpMsgAlloc>
   12310:	b140      	cbz	r0, 12324 <smpSendPairingFailed+0x20>
   12312:	2305      	movs	r3, #5
   12314:	7203      	strb	r3, [r0, #8]
   12316:	7245      	strb	r5, [r0, #9]
   12318:	4601      	mov	r1, r0
   1231a:	4620      	mov	r0, r4
   1231c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12320:	f7ff b87f 	b.w	11422 <smpSendPkt>
   12324:	bd38      	pop	{r3, r4, r5, pc}

00012326 <smpActPairingFailed>:
   12326:	b538      	push	{r3, r4, r5, lr}
   12328:	4605      	mov	r5, r0
   1232a:	460c      	mov	r4, r1
   1232c:	f7ff ffcf 	bl	122ce <smpCleanup>
   12330:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12334:	2200      	movs	r2, #0
   12336:	2101      	movs	r1, #1
   12338:	f7fd fee0 	bl	100fc <DmConnSetIdle>
   1233c:	232b      	movs	r3, #43	; 0x2b
   1233e:	70a3      	strb	r3, [r4, #2]
   12340:	4620      	mov	r0, r4
   12342:	f7fe faf3 	bl	1092c <DmSmpCbackExec>
   12346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1234a:	f7fe bca3 	b.w	10c94 <DmSecGetEccKey>

0001234e <smpActPairingCancel>:
   1234e:	b538      	push	{r3, r4, r5, lr}
   12350:	4605      	mov	r5, r0
   12352:	460c      	mov	r4, r1
   12354:	78c9      	ldrb	r1, [r1, #3]
   12356:	f7ff ffd5 	bl	12304 <smpSendPairingFailed>
   1235a:	4621      	mov	r1, r4
   1235c:	4628      	mov	r0, r5
   1235e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12362:	f7ff bfe0 	b.w	12326 <smpActPairingFailed>

00012366 <smpActStorePin>:
   12366:	b538      	push	{r3, r4, r5, lr}
   12368:	460c      	mov	r4, r1
   1236a:	7d0a      	ldrb	r2, [r1, #20]
   1236c:	4605      	mov	r5, r0
   1236e:	3104      	adds	r1, #4
   12370:	6a00      	ldr	r0, [r0, #32]
   12372:	f7f9 fef5 	bl	c160 <memcpy>
   12376:	7d23      	ldrb	r3, [r4, #20]
   12378:	2b03      	cmp	r3, #3
   1237a:	d107      	bne.n	1238c <smpActStorePin+0x26>
   1237c:	6a28      	ldr	r0, [r5, #32]
   1237e:	220d      	movs	r2, #13
   12380:	2100      	movs	r1, #0
   12382:	3003      	adds	r0, #3
   12384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12388:	f7f9 bfe8 	b.w	c35c <memset>
   1238c:	bd38      	pop	{r3, r4, r5, pc}

0001238e <smpActPairCnfCalc1>:
   1238e:	b510      	push	{r4, lr}
   12390:	4604      	mov	r4, r0
   12392:	f7ff ffe8 	bl	12366 <smpActStorePin>
   12396:	6a20      	ldr	r0, [r4, #32]
   12398:	2110      	movs	r1, #16
   1239a:	3030      	adds	r0, #48	; 0x30
   1239c:	f009 f98a 	bl	1b6b4 <SecRand>
   123a0:	6a21      	ldr	r1, [r4, #32]
   123a2:	4620      	mov	r0, r4
   123a4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   123a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123ac:	f7fe bee0 	b.w	11170 <smpCalcC1Part1>

000123b0 <smpActPairCnfCalc2>:
   123b0:	684a      	ldr	r2, [r1, #4]
   123b2:	6a01      	ldr	r1, [r0, #32]
   123b4:	f7fe bf5e 	b.w	11274 <smpCalcC1Part2>

000123b8 <smpActSendPairCnf>:
   123b8:	b538      	push	{r3, r4, r5, lr}
   123ba:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   123be:	2b00      	cmp	r3, #0
   123c0:	bf14      	ite	ne
   123c2:	2303      	movne	r3, #3
   123c4:	2304      	moveq	r3, #4
   123c6:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   123ca:	4604      	mov	r4, r0
   123cc:	460d      	mov	r5, r1
   123ce:	f7ff ff77 	bl	122c0 <smpStartRspTimer>
   123d2:	2019      	movs	r0, #25
   123d4:	f7ff f870 	bl	114b8 <smpMsgAlloc>
   123d8:	b190      	cbz	r0, 12400 <smpActSendPairCnf+0x48>
   123da:	2303      	movs	r3, #3
   123dc:	7203      	strb	r3, [r0, #8]
   123de:	686b      	ldr	r3, [r5, #4]
   123e0:	f100 0209 	add.w	r2, r0, #9
   123e4:	f103 0110 	add.w	r1, r3, #16
   123e8:	f853 5b04 	ldr.w	r5, [r3], #4
   123ec:	f842 5b04 	str.w	r5, [r2], #4
   123f0:	428b      	cmp	r3, r1
   123f2:	d1f9      	bne.n	123e8 <smpActSendPairCnf+0x30>
   123f4:	4601      	mov	r1, r0
   123f6:	4620      	mov	r0, r4
   123f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   123fc:	f7ff b811 	b.w	11422 <smpSendPkt>
   12400:	bd38      	pop	{r3, r4, r5, pc}

00012402 <smpActPairCnfVerCalc1>:
   12402:	684b      	ldr	r3, [r1, #4]
   12404:	6a01      	ldr	r1, [r0, #32]
   12406:	f103 0209 	add.w	r2, r3, #9
   1240a:	b430      	push	{r4, r5}
   1240c:	3110      	adds	r1, #16
   1240e:	4614      	mov	r4, r2
   12410:	3319      	adds	r3, #25
   12412:	f854 5b04 	ldr.w	r5, [r4], #4
   12416:	f841 5b04 	str.w	r5, [r1], #4
   1241a:	429c      	cmp	r4, r3
   1241c:	d1f9      	bne.n	12412 <smpActPairCnfVerCalc1+0x10>
   1241e:	6a01      	ldr	r1, [r0, #32]
   12420:	bc30      	pop	{r4, r5}
   12422:	f7fe bea5 	b.w	11170 <smpCalcC1Part1>

00012426 <smpActPairCnfVerCalc2>:
   12426:	f7ff bfc3 	b.w	123b0 <smpActPairCnfCalc2>

0001242a <smpSendKey>:
   1242a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1242c:	4f5d      	ldr	r7, [pc, #372]	; (125a4 <smpSendKey+0x17a>)
   1242e:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   12432:	b08b      	sub	sp, #44	; 0x2c
   12434:	4604      	mov	r4, r0
   12436:	460e      	mov	r6, r1
   12438:	b343      	cbz	r3, 1248c <smpSendKey+0x62>
   1243a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1243c:	781b      	ldrb	r3, [r3, #0]
   1243e:	b32b      	cbz	r3, 1248c <smpSendKey+0x62>
   12440:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   12444:	bb13      	cbnz	r3, 1248c <smpSendKey+0x62>
   12446:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1244a:	f7fd fe81 	bl	10150 <DmConnRole>
   1244e:	bb48      	cbnz	r0, 124a4 <smpSendKey+0x7a>
   12450:	2302      	movs	r3, #2
   12452:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   12456:	232f      	movs	r3, #47	; 0x2f
   12458:	f88d 3006 	strb.w	r3, [sp, #6]
   1245c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12460:	f8ad 3004 	strh.w	r3, [sp, #4]
   12464:	2303      	movs	r3, #3
   12466:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   1246a:	2300      	movs	r3, #0
   1246c:	e9cd 3306 	strd	r3, r3, [sp, #24]
   12470:	f8ad 3020 	strh.w	r3, [sp, #32]
   12474:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12476:	6919      	ldr	r1, [r3, #16]
   12478:	a802      	add	r0, sp, #8
   1247a:	3110      	adds	r1, #16
   1247c:	f00d fc6a 	bl	1fd54 <Calc128Cpy>
   12480:	a801      	add	r0, sp, #4
   12482:	f7fe fa53 	bl	1092c <DmSmpCbackExec>
   12486:	2307      	movs	r3, #7
   12488:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   1248c:	2e00      	cmp	r6, #0
   1248e:	f000 8086 	beq.w	1259e <smpSendKey+0x174>
   12492:	2e01      	cmp	r6, #1
   12494:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   12498:	d106      	bne.n	124a8 <smpSendKey+0x7e>
   1249a:	2b07      	cmp	r3, #7
   1249c:	d106      	bne.n	124ac <smpSendKey+0x82>
   1249e:	4630      	mov	r0, r6
   124a0:	b00b      	add	sp, #44	; 0x2c
   124a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124a4:	2301      	movs	r3, #1
   124a6:	e7d4      	b.n	12452 <smpSendKey+0x28>
   124a8:	2e03      	cmp	r6, #3
   124aa:	d801      	bhi.n	124b0 <smpSendKey+0x86>
   124ac:	2b09      	cmp	r3, #9
   124ae:	d076      	beq.n	1259e <smpSendKey+0x174>
   124b0:	2b0a      	cmp	r3, #10
   124b2:	d074      	beq.n	1259e <smpSendKey+0x174>
   124b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   124b8:	b10b      	cbz	r3, 124be <smpSendKey+0x94>
   124ba:	2600      	movs	r6, #0
   124bc:	e7ef      	b.n	1249e <smpSendKey+0x74>
   124be:	2019      	movs	r0, #25
   124c0:	f7fe fffa 	bl	114b8 <smpMsgAlloc>
   124c4:	4605      	mov	r5, r0
   124c6:	2800      	cmp	r0, #0
   124c8:	d0f7      	beq.n	124ba <smpSendKey+0x90>
   124ca:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   124ce:	b96b      	cbnz	r3, 124ec <smpSendKey+0xc2>
   124d0:	07f0      	lsls	r0, r6, #31
   124d2:	d539      	bpl.n	12548 <smpSendKey+0x11e>
   124d4:	4620      	mov	r0, r4
   124d6:	f7fe ff75 	bl	113c4 <smpGenerateLtk>
   124da:	2306      	movs	r3, #6
   124dc:	722b      	strb	r3, [r5, #8]
   124de:	6a21      	ldr	r1, [r4, #32]
   124e0:	3104      	adds	r1, #4
   124e2:	f105 0009 	add.w	r0, r5, #9
   124e6:	f00d fc35 	bl	1fd54 <Calc128Cpy>
   124ea:	e012      	b.n	12512 <smpSendKey+0xe8>
   124ec:	2b06      	cmp	r3, #6
   124ee:	d12b      	bne.n	12548 <smpSendKey+0x11e>
   124f0:	2307      	movs	r3, #7
   124f2:	7203      	strb	r3, [r0, #8]
   124f4:	6a23      	ldr	r3, [r4, #32]
   124f6:	8b9b      	ldrh	r3, [r3, #28]
   124f8:	7243      	strb	r3, [r0, #9]
   124fa:	6a23      	ldr	r3, [r4, #32]
   124fc:	8b9b      	ldrh	r3, [r3, #28]
   124fe:	0a1b      	lsrs	r3, r3, #8
   12500:	7283      	strb	r3, [r0, #10]
   12502:	6a22      	ldr	r2, [r4, #32]
   12504:	f852 3f14 	ldr.w	r3, [r2, #20]!
   12508:	f8c0 300b 	str.w	r3, [r0, #11]
   1250c:	6853      	ldr	r3, [r2, #4]
   1250e:	f8c0 300f 	str.w	r3, [r0, #15]
   12512:	7a2b      	ldrb	r3, [r5, #8]
   12514:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   12518:	4629      	mov	r1, r5
   1251a:	4620      	mov	r0, r4
   1251c:	f7fe ff81 	bl	11422 <smpSendPkt>
   12520:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   12524:	2e00      	cmp	r6, #0
   12526:	d1c8      	bne.n	124ba <smpSendKey+0x90>
   12528:	2004      	movs	r0, #4
   1252a:	f008 fa6a 	bl	1aa02 <WsfMsgAlloc>
   1252e:	4601      	mov	r1, r0
   12530:	2800      	cmp	r0, #0
   12532:	d0c2      	beq.n	124ba <smpSendKey+0x90>
   12534:	230c      	movs	r3, #12
   12536:	7083      	strb	r3, [r0, #2]
   12538:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1253c:	8003      	strh	r3, [r0, #0]
   1253e:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   12542:	f008 fa82 	bl	1aa4a <WsfMsgSend>
   12546:	e7aa      	b.n	1249e <smpSendKey+0x74>
   12548:	07b1      	lsls	r1, r6, #30
   1254a:	d508      	bpl.n	1255e <smpSendKey+0x134>
   1254c:	b10b      	cbz	r3, 12552 <smpSendKey+0x128>
   1254e:	2b07      	cmp	r3, #7
   12550:	d105      	bne.n	1255e <smpSendKey+0x134>
   12552:	2308      	movs	r3, #8
   12554:	722b      	strb	r3, [r5, #8]
   12556:	f7fe fab7 	bl	10ac8 <DmSecGetLocalIrk>
   1255a:	4601      	mov	r1, r0
   1255c:	e7c1      	b.n	124e2 <smpSendKey+0xb8>
   1255e:	2b08      	cmp	r3, #8
   12560:	d10b      	bne.n	1257a <smpSendKey+0x150>
   12562:	2309      	movs	r3, #9
   12564:	722b      	strb	r3, [r5, #8]
   12566:	2300      	movs	r3, #0
   12568:	726b      	strb	r3, [r5, #9]
   1256a:	f004 fd07 	bl	16f7c <HciGetBdAddr>
   1256e:	4601      	mov	r1, r0
   12570:	f105 000a 	add.w	r0, r5, #10
   12574:	f00d fb6d 	bl	1fc52 <BdaCpy>
   12578:	e7cb      	b.n	12512 <smpSendKey+0xe8>
   1257a:	0772      	lsls	r2, r6, #29
   1257c:	d50c      	bpl.n	12598 <smpSendKey+0x16e>
   1257e:	2b09      	cmp	r3, #9
   12580:	d80a      	bhi.n	12598 <smpSendKey+0x16e>
   12582:	f240 2281 	movw	r2, #641	; 0x281
   12586:	fa22 f303 	lsr.w	r3, r2, r3
   1258a:	07db      	lsls	r3, r3, #31
   1258c:	d504      	bpl.n	12598 <smpSendKey+0x16e>
   1258e:	230a      	movs	r3, #10
   12590:	722b      	strb	r3, [r5, #8]
   12592:	f7fe fa93 	bl	10abc <DmSecGetLocalCsrk>
   12596:	e7e0      	b.n	1255a <smpSendKey+0x130>
   12598:	4628      	mov	r0, r5
   1259a:	f008 fa49 	bl	1aa30 <WsfMsgFree>
   1259e:	2601      	movs	r6, #1
   125a0:	e77d      	b.n	1249e <smpSendKey+0x74>
   125a2:	bf00      	nop
   125a4:	100193c0 	.word	0x100193c0

000125a8 <smpProcRcvKey>:
   125a8:	b570      	push	{r4, r5, r6, lr}
   125aa:	461e      	mov	r6, r3
   125ac:	7a13      	ldrb	r3, [r2, #8]
   125ae:	2b06      	cmp	r3, #6
   125b0:	460c      	mov	r4, r1
   125b2:	4605      	mov	r5, r0
   125b4:	f102 0109 	add.w	r1, r2, #9
   125b8:	d104      	bne.n	125c4 <smpProcRcvKey+0x1c>
   125ba:	1d20      	adds	r0, r4, #4
   125bc:	f00d fbca 	bl	1fd54 <Calc128Cpy>
   125c0:	2200      	movs	r2, #0
   125c2:	e016      	b.n	125f2 <smpProcRcvKey+0x4a>
   125c4:	2b07      	cmp	r3, #7
   125c6:	d126      	bne.n	12616 <smpProcRcvKey+0x6e>
   125c8:	7a91      	ldrb	r1, [r2, #10]
   125ca:	7a53      	ldrb	r3, [r2, #9]
   125cc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   125d0:	83a3      	strh	r3, [r4, #28]
   125d2:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   125d6:	6163      	str	r3, [r4, #20]
   125d8:	6853      	ldr	r3, [r2, #4]
   125da:	61a3      	str	r3, [r4, #24]
   125dc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   125e0:	f013 0f04 	tst.w	r3, #4
   125e4:	bf14      	ite	ne
   125e6:	2302      	movne	r3, #2
   125e8:	2301      	moveq	r3, #1
   125ea:	77e3      	strb	r3, [r4, #31]
   125ec:	2302      	movs	r3, #2
   125ee:	77a3      	strb	r3, [r4, #30]
   125f0:	2201      	movs	r2, #1
   125f2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   125f6:	2b06      	cmp	r3, #6
   125f8:	d001      	beq.n	125fe <smpProcRcvKey+0x56>
   125fa:	2b08      	cmp	r3, #8
   125fc:	d120      	bne.n	12640 <smpProcRcvKey+0x98>
   125fe:	3301      	adds	r3, #1
   12600:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   12604:	2500      	movs	r5, #0
   12606:	b122      	cbz	r2, 12612 <smpProcRcvKey+0x6a>
   12608:	232f      	movs	r3, #47	; 0x2f
   1260a:	70a3      	strb	r3, [r4, #2]
   1260c:	4620      	mov	r0, r4
   1260e:	f7fe f98d 	bl	1092c <DmSmpCbackExec>
   12612:	4628      	mov	r0, r5
   12614:	bd70      	pop	{r4, r5, r6, pc}
   12616:	2b08      	cmp	r3, #8
   12618:	d0cf      	beq.n	125ba <smpProcRcvKey+0x12>
   1261a:	2b09      	cmp	r3, #9
   1261c:	d109      	bne.n	12632 <smpProcRcvKey+0x8a>
   1261e:	7a53      	ldrb	r3, [r2, #9]
   12620:	76a3      	strb	r3, [r4, #26]
   12622:	f102 010a 	add.w	r1, r2, #10
   12626:	f104 0014 	add.w	r0, r4, #20
   1262a:	f00d fb12 	bl	1fc52 <BdaCpy>
   1262e:	2304      	movs	r3, #4
   12630:	e7dd      	b.n	125ee <smpProcRcvKey+0x46>
   12632:	2b0a      	cmp	r3, #10
   12634:	d1c4      	bne.n	125c0 <smpProcRcvKey+0x18>
   12636:	1d20      	adds	r0, r4, #4
   12638:	f00d fb8c 	bl	1fd54 <Calc128Cpy>
   1263c:	2308      	movs	r3, #8
   1263e:	e7d6      	b.n	125ee <smpProcRcvKey+0x46>
   12640:	07b0      	lsls	r0, r6, #30
   12642:	d503      	bpl.n	1264c <smpProcRcvKey+0xa4>
   12644:	2b07      	cmp	r3, #7
   12646:	d101      	bne.n	1264c <smpProcRcvKey+0xa4>
   12648:	2308      	movs	r3, #8
   1264a:	e7d9      	b.n	12600 <smpProcRcvKey+0x58>
   1264c:	0771      	lsls	r1, r6, #29
   1264e:	d505      	bpl.n	1265c <smpProcRcvKey+0xb4>
   12650:	2b07      	cmp	r3, #7
   12652:	d001      	beq.n	12658 <smpProcRcvKey+0xb0>
   12654:	2b09      	cmp	r3, #9
   12656:	d101      	bne.n	1265c <smpProcRcvKey+0xb4>
   12658:	230a      	movs	r3, #10
   1265a:	e7d1      	b.n	12600 <smpProcRcvKey+0x58>
   1265c:	2501      	movs	r5, #1
   1265e:	e7d2      	b.n	12606 <smpProcRcvKey+0x5e>

00012660 <smpActMaxAttempts>:
   12660:	b510      	push	{r4, lr}
   12662:	4604      	mov	r4, r0
   12664:	f7ff fe73 	bl	1234e <smpActPairingCancel>
   12668:	230f      	movs	r3, #15
   1266a:	7323      	strb	r3, [r4, #12]
   1266c:	4b04      	ldr	r3, [pc, #16]	; (12680 <smpActMaxAttempts+0x20>)
   1266e:	681b      	ldr	r3, [r3, #0]
   12670:	4620      	mov	r0, r4
   12672:	8819      	ldrh	r1, [r3, #0]
   12674:	f008 fb90 	bl	1ad98 <WsfTimerStartMs>
   12678:	2300      	movs	r3, #0
   1267a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1267e:	bd10      	pop	{r4, pc}
   12680:	10017f74 	.word	0x10017f74

00012684 <smpActAttemptRcvd>:
   12684:	2301      	movs	r3, #1
   12686:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   1268a:	4770      	bx	lr

0001268c <smpActCheckAttempts>:
   1268c:	b510      	push	{r4, lr}
   1268e:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   12692:	4604      	mov	r4, r0
   12694:	b153      	cbz	r3, 126ac <smpActCheckAttempts+0x20>
   12696:	2300      	movs	r3, #0
   12698:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   1269c:	2109      	movs	r1, #9
   1269e:	f7ff fe31 	bl	12304 <smpSendPairingFailed>
   126a2:	4620      	mov	r0, r4
   126a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   126a8:	f7ff be11 	b.w	122ce <smpCleanup>
   126ac:	bd10      	pop	{r4, pc}

000126ae <smpActPairingCmpl>:
   126ae:	b513      	push	{r0, r1, r4, lr}
   126b0:	4604      	mov	r4, r0
   126b2:	f7ff fe0c 	bl	122ce <smpCleanup>
   126b6:	2200      	movs	r2, #0
   126b8:	2101      	movs	r1, #1
   126ba:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   126be:	f7fd fd1d 	bl	100fc <DmConnSetIdle>
   126c2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   126c6:	f88d 3004 	strb.w	r3, [sp, #4]
   126ca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   126ce:	f8ad 3000 	strh.w	r3, [sp]
   126d2:	4668      	mov	r0, sp
   126d4:	232a      	movs	r3, #42	; 0x2a
   126d6:	f88d 3002 	strb.w	r3, [sp, #2]
   126da:	f7fe f927 	bl	1092c <DmSmpCbackExec>
   126de:	f7fe fad9 	bl	10c94 <DmSecGetEccKey>
   126e2:	b002      	add	sp, #8
   126e4:	bd10      	pop	{r4, pc}

000126e6 <smpSmExecute>:
   126e6:	b570      	push	{r4, r5, r6, lr}
   126e8:	4604      	mov	r4, r0
   126ea:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   126ee:	460d      	mov	r5, r1
   126f0:	f7fd fd2e 	bl	10150 <DmConnRole>
   126f4:	4b13      	ldr	r3, [pc, #76]	; (12744 <smpSmExecute+0x5e>)
   126f6:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   126fa:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   126fe:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   12702:	78ae      	ldrb	r6, [r5, #2]
   12704:	2801      	cmp	r0, #1
   12706:	bf18      	it	ne
   12708:	461a      	movne	r2, r3
   1270a:	6813      	ldr	r3, [r2, #0]
   1270c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   12710:	4603      	mov	r3, r0
   12712:	7819      	ldrb	r1, [r3, #0]
   12714:	42b1      	cmp	r1, r6
   12716:	d10b      	bne.n	12730 <smpSmExecute+0x4a>
   12718:	7859      	ldrb	r1, [r3, #1]
   1271a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   1271e:	7899      	ldrb	r1, [r3, #2]
   12720:	6853      	ldr	r3, [r2, #4]
   12722:	4620      	mov	r0, r4
   12724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   12728:	4629      	mov	r1, r5
   1272a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1272e:	4718      	bx	r3
   12730:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   12734:	2900      	cmp	r1, #0
   12736:	d1ec      	bne.n	12712 <smpSmExecute+0x2c>
   12738:	6890      	ldr	r0, [r2, #8]
   1273a:	f100 010c 	add.w	r1, r0, #12
   1273e:	4299      	cmp	r1, r3
   12740:	d1e6      	bne.n	12710 <smpSmExecute+0x2a>
   12742:	bd70      	pop	{r4, r5, r6, pc}
   12744:	100193c0 	.word	0x100193c0

00012748 <smpProcPairing>:
   12748:	b513      	push	{r0, r1, r4, lr}
   1274a:	2300      	movs	r3, #0
   1274c:	7013      	strb	r3, [r2, #0]
   1274e:	700b      	strb	r3, [r1, #0]
   12750:	7c83      	ldrb	r3, [r0, #18]
   12752:	2b01      	cmp	r3, #1
   12754:	d127      	bne.n	127a6 <smpProcPairing+0x5e>
   12756:	7e43      	ldrb	r3, [r0, #25]
   12758:	2b01      	cmp	r3, #1
   1275a:	d124      	bne.n	127a6 <smpProcPairing+0x5e>
   1275c:	700b      	strb	r3, [r1, #0]
   1275e:	7cc3      	ldrb	r3, [r0, #19]
   12760:	7e82      	ldrb	r2, [r0, #26]
   12762:	4013      	ands	r3, r2
   12764:	f043 0304 	orr.w	r3, r3, #4
   12768:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   1276c:	2300      	movs	r3, #0
   1276e:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   12772:	2a00      	cmp	r2, #0
   12774:	d049      	beq.n	1280a <smpProcPairing+0xc2>
   12776:	7cc1      	ldrb	r1, [r0, #19]
   12778:	4a2d      	ldr	r2, [pc, #180]	; (12830 <smpProcPairing+0xe8>)
   1277a:	6812      	ldr	r2, [r2, #0]
   1277c:	2b00      	cmp	r3, #0
   1277e:	d046      	beq.n	1280e <smpProcPairing+0xc6>
   12780:	7993      	ldrb	r3, [r2, #6]
   12782:	f003 0304 	and.w	r3, r3, #4
   12786:	4219      	tst	r1, r3
   12788:	d041      	beq.n	1280e <smpProcPairing+0xc6>
   1278a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1278e:	f8ad 3004 	strh.w	r3, [sp, #4]
   12792:	f240 3303 	movw	r3, #771	; 0x303
   12796:	a901      	add	r1, sp, #4
   12798:	f8ad 3006 	strh.w	r3, [sp, #6]
   1279c:	f7ff ffa3 	bl	126e6 <smpSmExecute>
   127a0:	2000      	movs	r0, #0
   127a2:	b002      	add	sp, #8
   127a4:	bd10      	pop	{r4, pc}
   127a6:	7cc1      	ldrb	r1, [r0, #19]
   127a8:	074b      	lsls	r3, r1, #29
   127aa:	d402      	bmi.n	127b2 <smpProcPairing+0x6a>
   127ac:	7e83      	ldrb	r3, [r0, #26]
   127ae:	075c      	lsls	r4, r3, #29
   127b0:	d509      	bpl.n	127c6 <smpProcPairing+0x7e>
   127b2:	7c44      	ldrb	r4, [r0, #17]
   127b4:	2c03      	cmp	r4, #3
   127b6:	d006      	beq.n	127c6 <smpProcPairing+0x7e>
   127b8:	7e03      	ldrb	r3, [r0, #24]
   127ba:	2b03      	cmp	r3, #3
   127bc:	d003      	beq.n	127c6 <smpProcPairing+0x7e>
   127be:	2c01      	cmp	r4, #1
   127c0:	d809      	bhi.n	127d6 <smpProcPairing+0x8e>
   127c2:	2b01      	cmp	r3, #1
   127c4:	d81f      	bhi.n	12806 <smpProcPairing+0xbe>
   127c6:	7e83      	ldrb	r3, [r0, #26]
   127c8:	4019      	ands	r1, r3
   127ca:	f021 0104 	bic.w	r1, r1, #4
   127ce:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   127d2:	2301      	movs	r3, #1
   127d4:	e7cb      	b.n	1276e <smpProcPairing+0x26>
   127d6:	2c04      	cmp	r4, #4
   127d8:	d113      	bne.n	12802 <smpProcPairing+0xba>
   127da:	2b02      	cmp	r3, #2
   127dc:	d013      	beq.n	12806 <smpProcPairing+0xbe>
   127de:	1f19      	subs	r1, r3, #4
   127e0:	424b      	negs	r3, r1
   127e2:	414b      	adcs	r3, r1
   127e4:	7013      	strb	r3, [r2, #0]
   127e6:	7e01      	ldrb	r1, [r0, #24]
   127e8:	2902      	cmp	r1, #2
   127ea:	d102      	bne.n	127f2 <smpProcPairing+0xaa>
   127ec:	7c41      	ldrb	r1, [r0, #17]
   127ee:	2902      	cmp	r1, #2
   127f0:	d0b5      	beq.n	1275e <smpProcPairing+0x16>
   127f2:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   127f6:	2900      	cmp	r1, #0
   127f8:	bf08      	it	eq
   127fa:	f083 0301 	eoreq.w	r3, r3, #1
   127fe:	7013      	strb	r3, [r2, #0]
   12800:	e7ad      	b.n	1275e <smpProcPairing+0x16>
   12802:	2300      	movs	r3, #0
   12804:	e7ee      	b.n	127e4 <smpProcPairing+0x9c>
   12806:	2301      	movs	r3, #1
   12808:	e7ec      	b.n	127e4 <smpProcPairing+0x9c>
   1280a:	7e81      	ldrb	r1, [r0, #26]
   1280c:	e7b4      	b.n	12778 <smpProcPairing+0x30>
   1280e:	78d3      	ldrb	r3, [r2, #3]
   12810:	7d02      	ldrb	r2, [r0, #20]
   12812:	429a      	cmp	r2, r3
   12814:	d302      	bcc.n	1281c <smpProcPairing+0xd4>
   12816:	7ec2      	ldrb	r2, [r0, #27]
   12818:	429a      	cmp	r2, r3
   1281a:	d206      	bcs.n	1282a <smpProcPairing+0xe2>
   1281c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12820:	f8ad 3004 	strh.w	r3, [sp, #4]
   12824:	f240 6303 	movw	r3, #1539	; 0x603
   12828:	e7b5      	b.n	12796 <smpProcPairing+0x4e>
   1282a:	2001      	movs	r0, #1
   1282c:	e7b9      	b.n	127a2 <smpProcPairing+0x5a>
   1282e:	bf00      	nop
   12830:	10017f74 	.word	0x10017f74

00012834 <smpAuthReq>:
   12834:	b510      	push	{r4, lr}
   12836:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1283a:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   1283e:	b086      	sub	sp, #24
   12840:	f013 0304 	ands.w	r3, r3, #4
   12844:	f8ad 4000 	strh.w	r4, [sp]
   12848:	d00b      	beq.n	12862 <smpAuthReq+0x2e>
   1284a:	232e      	movs	r3, #46	; 0x2e
   1284c:	4668      	mov	r0, sp
   1284e:	f88d 3002 	strb.w	r3, [sp, #2]
   12852:	f88d 1004 	strb.w	r1, [sp, #4]
   12856:	f88d 2005 	strb.w	r2, [sp, #5]
   1285a:	f7fe f867 	bl	1092c <DmSmpCbackExec>
   1285e:	b006      	add	sp, #24
   12860:	bd10      	pop	{r4, pc}
   12862:	2204      	movs	r2, #4
   12864:	f8ad 3004 	strh.w	r3, [sp, #4]
   12868:	f88d 3006 	strb.w	r3, [sp, #6]
   1286c:	4669      	mov	r1, sp
   1286e:	2303      	movs	r3, #3
   12870:	f88d 2002 	strb.w	r2, [sp, #2]
   12874:	f88d 3014 	strb.w	r3, [sp, #20]
   12878:	f7ff ff35 	bl	126e6 <smpSmExecute>
   1287c:	e7ef      	b.n	1285e <smpAuthReq+0x2a>
   1287e:	bf00      	nop

00012880 <smpiActPairReq>:
   12880:	b538      	push	{r3, r4, r5, lr}
   12882:	2201      	movs	r2, #1
   12884:	4604      	mov	r4, r0
   12886:	460d      	mov	r5, r1
   12888:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1288c:	4611      	mov	r1, r2
   1288e:	f7fd fc35 	bl	100fc <DmConnSetIdle>
   12892:	2302      	movs	r3, #2
   12894:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12898:	4620      	mov	r0, r4
   1289a:	f7ff fd11 	bl	122c0 <smpStartRspTimer>
   1289e:	2040      	movs	r0, #64	; 0x40
   128a0:	f008 f820 	bl	1a8e4 <WsfBufAlloc>
   128a4:	6220      	str	r0, [r4, #32]
   128a6:	200f      	movs	r0, #15
   128a8:	f7fe fe06 	bl	114b8 <smpMsgAlloc>
   128ac:	4601      	mov	r1, r0
   128ae:	b1e0      	cbz	r0, 128ea <smpiActPairReq+0x6a>
   128b0:	2301      	movs	r3, #1
   128b2:	7203      	strb	r3, [r0, #8]
   128b4:	4b0d      	ldr	r3, [pc, #52]	; (128ec <smpiActPairReq+0x6c>)
   128b6:	681b      	ldr	r3, [r3, #0]
   128b8:	789a      	ldrb	r2, [r3, #2]
   128ba:	7242      	strb	r2, [r0, #9]
   128bc:	792a      	ldrb	r2, [r5, #4]
   128be:	7282      	strb	r2, [r0, #10]
   128c0:	796a      	ldrb	r2, [r5, #5]
   128c2:	72c2      	strb	r2, [r0, #11]
   128c4:	791b      	ldrb	r3, [r3, #4]
   128c6:	7303      	strb	r3, [r0, #12]
   128c8:	79ab      	ldrb	r3, [r5, #6]
   128ca:	7343      	strb	r3, [r0, #13]
   128cc:	79eb      	ldrb	r3, [r5, #7]
   128ce:	7383      	strb	r3, [r0, #14]
   128d0:	4603      	mov	r3, r0
   128d2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   128d6:	6120      	str	r0, [r4, #16]
   128d8:	8898      	ldrh	r0, [r3, #4]
   128da:	82a0      	strh	r0, [r4, #20]
   128dc:	799b      	ldrb	r3, [r3, #6]
   128de:	75a3      	strb	r3, [r4, #22]
   128e0:	4620      	mov	r0, r4
   128e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128e6:	f7fe bd9c 	b.w	11422 <smpSendPkt>
   128ea:	bd38      	pop	{r3, r4, r5, pc}
   128ec:	10017f74 	.word	0x10017f74

000128f0 <smpiActCheckSecurityReq>:
   128f0:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   128f4:	b12a      	cbz	r2, 12902 <smpiActCheckSecurityReq+0x12>
   128f6:	2200      	movs	r2, #0
   128f8:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   128fc:	78c9      	ldrb	r1, [r1, #3]
   128fe:	f7ff bd01 	b.w	12304 <smpSendPairingFailed>
   12902:	4770      	bx	lr

00012904 <smpiActProcSecurityReq>:
   12904:	b507      	push	{r0, r1, r2, lr}
   12906:	2301      	movs	r3, #1
   12908:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   1290c:	684b      	ldr	r3, [r1, #4]
   1290e:	7a5b      	ldrb	r3, [r3, #9]
   12910:	f88d 3004 	strb.w	r3, [sp, #4]
   12914:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   12918:	f8ad 3000 	strh.w	r3, [sp]
   1291c:	4668      	mov	r0, sp
   1291e:	2332      	movs	r3, #50	; 0x32
   12920:	f88d 3002 	strb.w	r3, [sp, #2]
   12924:	f7fe f802 	bl	1092c <DmSmpCbackExec>
   12928:	b003      	add	sp, #12
   1292a:	f85d fb04 	ldr.w	pc, [sp], #4

0001292e <smpiActProcPairRsp>:
   1292e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12930:	684a      	ldr	r2, [r1, #4]
   12932:	7d45      	ldrb	r5, [r0, #21]
   12934:	4613      	mov	r3, r2
   12936:	4604      	mov	r4, r0
   12938:	f853 6f08 	ldr.w	r6, [r3, #8]!
   1293c:	f8c0 6017 	str.w	r6, [r0, #23]
   12940:	889e      	ldrh	r6, [r3, #4]
   12942:	f8a0 601b 	strh.w	r6, [r0, #27]
   12946:	799b      	ldrb	r3, [r3, #6]
   12948:	7743      	strb	r3, [r0, #29]
   1294a:	7b53      	ldrb	r3, [r2, #13]
   1294c:	43ab      	bics	r3, r5
   1294e:	d103      	bne.n	12958 <smpiActProcPairRsp+0x2a>
   12950:	7d85      	ldrb	r5, [r0, #22]
   12952:	7b93      	ldrb	r3, [r2, #14]
   12954:	43ab      	bics	r3, r5
   12956:	d007      	beq.n	12968 <smpiActProcPairRsp+0x3a>
   12958:	f640 2303 	movw	r3, #2563	; 0xa03
   1295c:	804b      	strh	r3, [r1, #2]
   1295e:	4620      	mov	r0, r4
   12960:	f7ff fec1 	bl	126e6 <smpSmExecute>
   12964:	b002      	add	sp, #8
   12966:	bd70      	pop	{r4, r5, r6, pc}
   12968:	4d09      	ldr	r5, [pc, #36]	; (12990 <smpiActProcPairRsp+0x62>)
   1296a:	f10d 0207 	add.w	r2, sp, #7
   1296e:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   12972:	f10d 0106 	add.w	r1, sp, #6
   12976:	4798      	blx	r3
   12978:	2800      	cmp	r0, #0
   1297a:	d0f3      	beq.n	12964 <smpiActProcPairRsp+0x36>
   1297c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   12980:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12984:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12988:	4620      	mov	r0, r4
   1298a:	4798      	blx	r3
   1298c:	e7ea      	b.n	12964 <smpiActProcPairRsp+0x36>
   1298e:	bf00      	nop
   12990:	100193c0 	.word	0x100193c0

00012994 <smpiActProcPairCnf>:
   12994:	b538      	push	{r3, r4, r5, lr}
   12996:	6a02      	ldr	r2, [r0, #32]
   12998:	684b      	ldr	r3, [r1, #4]
   1299a:	4604      	mov	r4, r0
   1299c:	f103 0109 	add.w	r1, r3, #9
   129a0:	3220      	adds	r2, #32
   129a2:	3319      	adds	r3, #25
   129a4:	f851 0b04 	ldr.w	r0, [r1], #4
   129a8:	f842 0b04 	str.w	r0, [r2], #4
   129ac:	4299      	cmp	r1, r3
   129ae:	d1f9      	bne.n	129a4 <smpiActProcPairCnf+0x10>
   129b0:	2504      	movs	r5, #4
   129b2:	4620      	mov	r0, r4
   129b4:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   129b8:	f7ff fc82 	bl	122c0 <smpStartRspTimer>
   129bc:	2019      	movs	r0, #25
   129be:	f7fe fd7b 	bl	114b8 <smpMsgAlloc>
   129c2:	4601      	mov	r1, r0
   129c4:	b180      	cbz	r0, 129e8 <smpiActProcPairCnf+0x54>
   129c6:	7205      	strb	r5, [r0, #8]
   129c8:	6a23      	ldr	r3, [r4, #32]
   129ca:	3009      	adds	r0, #9
   129cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
   129d0:	3340      	adds	r3, #64	; 0x40
   129d2:	f852 5b04 	ldr.w	r5, [r2], #4
   129d6:	f840 5b04 	str.w	r5, [r0], #4
   129da:	429a      	cmp	r2, r3
   129dc:	d1f9      	bne.n	129d2 <smpiActProcPairCnf+0x3e>
   129de:	4620      	mov	r0, r4
   129e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129e4:	f7fe bd1d 	b.w	11422 <smpSendPkt>
   129e8:	bd38      	pop	{r3, r4, r5, pc}

000129ea <smpiActCnfVerify>:
   129ea:	b570      	push	{r4, r5, r6, lr}
   129ec:	460e      	mov	r6, r1
   129ee:	6a05      	ldr	r5, [r0, #32]
   129f0:	4604      	mov	r4, r0
   129f2:	2210      	movs	r2, #16
   129f4:	f105 0120 	add.w	r1, r5, #32
   129f8:	6870      	ldr	r0, [r6, #4]
   129fa:	f7f9 fb81 	bl	c100 <memcmp>
   129fe:	b1c8      	cbz	r0, 12a34 <smpiActCnfVerify+0x4a>
   12a00:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   12a04:	b19b      	cbz	r3, 12a2e <smpiActCnfVerify+0x44>
   12a06:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12a0a:	4a0f      	ldr	r2, [pc, #60]	; (12a48 <smpiActCnfVerify+0x5e>)
   12a0c:	3301      	adds	r3, #1
   12a0e:	b2db      	uxtb	r3, r3
   12a10:	6812      	ldr	r2, [r2, #0]
   12a12:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12a16:	7952      	ldrb	r2, [r2, #5]
   12a18:	429a      	cmp	r2, r3
   12a1a:	d108      	bne.n	12a2e <smpiActCnfVerify+0x44>
   12a1c:	f640 130d 	movw	r3, #2317	; 0x90d
   12a20:	8073      	strh	r3, [r6, #2]
   12a22:	4631      	mov	r1, r6
   12a24:	4620      	mov	r0, r4
   12a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a2a:	f7ff be5c 	b.w	126e6 <smpSmExecute>
   12a2e:	f240 4303 	movw	r3, #1027	; 0x403
   12a32:	e7f5      	b.n	12a20 <smpiActCnfVerify+0x36>
   12a34:	f105 0330 	add.w	r3, r5, #48	; 0x30
   12a38:	f105 0210 	add.w	r2, r5, #16
   12a3c:	4629      	mov	r1, r5
   12a3e:	4620      	mov	r0, r4
   12a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12a44:	f7fe bc96 	b.w	11374 <smpCalcS1>
   12a48:	10017f74 	.word	0x10017f74

00012a4c <smpiActStkEncrypt>:
   12a4c:	b530      	push	{r4, r5, lr}
   12a4e:	7ec4      	ldrb	r4, [r0, #27]
   12a50:	7d03      	ldrb	r3, [r0, #20]
   12a52:	6849      	ldr	r1, [r1, #4]
   12a54:	429c      	cmp	r4, r3
   12a56:	b085      	sub	sp, #20
   12a58:	bf28      	it	cs
   12a5a:	461c      	movcs	r4, r3
   12a5c:	4605      	mov	r5, r0
   12a5e:	4622      	mov	r2, r4
   12a60:	4668      	mov	r0, sp
   12a62:	f7f9 fb7d 	bl	c160 <memcpy>
   12a66:	2100      	movs	r1, #0
   12a68:	f1c4 0210 	rsb	r2, r4, #16
   12a6c:	eb0d 0004 	add.w	r0, sp, r4
   12a70:	f7f9 fc74 	bl	c35c <memset>
   12a74:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   12a78:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12a7c:	f013 0f04 	tst.w	r3, #4
   12a80:	466a      	mov	r2, sp
   12a82:	bf14      	ite	ne
   12a84:	2102      	movne	r1, #2
   12a86:	2101      	moveq	r1, #1
   12a88:	f7ff fbc4 	bl	12214 <DmSmpEncryptReq>
   12a8c:	b005      	add	sp, #20
   12a8e:	bd30      	pop	{r4, r5, pc}

00012a90 <smpiActSetupKeyDist>:
   12a90:	b538      	push	{r3, r4, r5, lr}
   12a92:	4604      	mov	r4, r0
   12a94:	460d      	mov	r5, r1
   12a96:	f7ff fc13 	bl	122c0 <smpStartRspTimer>
   12a9a:	6a23      	ldr	r3, [r4, #32]
   12a9c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12aa0:	801a      	strh	r2, [r3, #0]
   12aa2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   12aa6:	f012 0f04 	tst.w	r2, #4
   12aaa:	bf14      	ite	ne
   12aac:	2202      	movne	r2, #2
   12aae:	2201      	moveq	r2, #1
   12ab0:	77da      	strb	r2, [r3, #31]
   12ab2:	7ee2      	ldrb	r2, [r4, #27]
   12ab4:	7d21      	ldrb	r1, [r4, #20]
   12ab6:	428a      	cmp	r2, r1
   12ab8:	bf28      	it	cs
   12aba:	460a      	movcs	r2, r1
   12abc:	f883 2020 	strb.w	r2, [r3, #32]
   12ac0:	2300      	movs	r3, #0
   12ac2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ac6:	7f62      	ldrb	r2, [r4, #29]
   12ac8:	7da3      	ldrb	r3, [r4, #22]
   12aca:	4013      	ands	r3, r2
   12acc:	07d8      	lsls	r0, r3, #31
   12ace:	d518      	bpl.n	12b02 <smpiActSetupKeyDist+0x72>
   12ad0:	4a0f      	ldr	r2, [pc, #60]	; (12b10 <smpiActSetupKeyDist+0x80>)
   12ad2:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12ad6:	b192      	cbz	r2, 12afe <smpiActSetupKeyDist+0x6e>
   12ad8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12ada:	7812      	ldrb	r2, [r2, #0]
   12adc:	b17a      	cbz	r2, 12afe <smpiActSetupKeyDist+0x6e>
   12ade:	0799      	lsls	r1, r3, #30
   12ae0:	d502      	bpl.n	12ae8 <smpiActSetupKeyDist+0x58>
   12ae2:	2308      	movs	r3, #8
   12ae4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ae8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   12aec:	b97b      	cbnz	r3, 12b0e <smpiActSetupKeyDist+0x7e>
   12aee:	230c      	movs	r3, #12
   12af0:	70ab      	strb	r3, [r5, #2]
   12af2:	4629      	mov	r1, r5
   12af4:	4620      	mov	r0, r4
   12af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12afa:	f7ff bdf4 	b.w	126e6 <smpSmExecute>
   12afe:	2306      	movs	r3, #6
   12b00:	e7f0      	b.n	12ae4 <smpiActSetupKeyDist+0x54>
   12b02:	079a      	lsls	r2, r3, #30
   12b04:	d4ed      	bmi.n	12ae2 <smpiActSetupKeyDist+0x52>
   12b06:	075b      	lsls	r3, r3, #29
   12b08:	d5ee      	bpl.n	12ae8 <smpiActSetupKeyDist+0x58>
   12b0a:	230a      	movs	r3, #10
   12b0c:	e7ea      	b.n	12ae4 <smpiActSetupKeyDist+0x54>
   12b0e:	bd38      	pop	{r3, r4, r5, pc}
   12b10:	100193c0 	.word	0x100193c0

00012b14 <smpiActRcvKey>:
   12b14:	b538      	push	{r3, r4, r5, lr}
   12b16:	7d82      	ldrb	r2, [r0, #22]
   12b18:	7f43      	ldrb	r3, [r0, #29]
   12b1a:	460d      	mov	r5, r1
   12b1c:	4013      	ands	r3, r2
   12b1e:	684a      	ldr	r2, [r1, #4]
   12b20:	6a01      	ldr	r1, [r0, #32]
   12b22:	4604      	mov	r4, r0
   12b24:	f7ff fd40 	bl	125a8 <smpProcRcvKey>
   12b28:	b150      	cbz	r0, 12b40 <smpiActRcvKey+0x2c>
   12b2a:	2300      	movs	r3, #0
   12b2c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12b30:	230c      	movs	r3, #12
   12b32:	70ab      	strb	r3, [r5, #2]
   12b34:	4629      	mov	r1, r5
   12b36:	4620      	mov	r0, r4
   12b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b3c:	f7ff bdd3 	b.w	126e6 <smpSmExecute>
   12b40:	bd38      	pop	{r3, r4, r5, pc}

00012b42 <smpiActSendKey>:
   12b42:	b538      	push	{r3, r4, r5, lr}
   12b44:	460d      	mov	r5, r1
   12b46:	7f03      	ldrb	r3, [r0, #28]
   12b48:	7d41      	ldrb	r1, [r0, #21]
   12b4a:	4019      	ands	r1, r3
   12b4c:	4604      	mov	r4, r0
   12b4e:	f7ff fc6c 	bl	1242a <smpSendKey>
   12b52:	b138      	cbz	r0, 12b64 <smpiActSendKey+0x22>
   12b54:	230e      	movs	r3, #14
   12b56:	70ab      	strb	r3, [r5, #2]
   12b58:	4629      	mov	r1, r5
   12b5a:	4620      	mov	r0, r4
   12b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b60:	f7ff bdc1 	b.w	126e6 <smpSmExecute>
   12b64:	bd38      	pop	{r3, r4, r5, pc}
   12b66:	bf00      	nop

00012b68 <smpiScActAuthSelect>:
   12b68:	f7ff b8cf 	b.w	11d0a <smpScActAuthSelect>

00012b6c <smpiScActSendPubKey>:
   12b6c:	230c      	movs	r3, #12
   12b6e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12b72:	f7fe be0a 	b.w	1178a <smpScSendPubKey>

00012b76 <smpiScActJwncSetup>:
   12b76:	b538      	push	{r3, r4, r5, lr}
   12b78:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b7a:	4d0b      	ldr	r5, [pc, #44]	; (12ba8 <smpiScActJwncSetup+0x32>)
   12b7c:	4604      	mov	r4, r0
   12b7e:	2110      	movs	r1, #16
   12b80:	68d8      	ldr	r0, [r3, #12]
   12b82:	f008 fd97 	bl	1b6b4 <SecRand>
   12b86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b88:	68d8      	ldr	r0, [r3, #12]
   12b8a:	4629      	mov	r1, r5
   12b8c:	3020      	adds	r0, #32
   12b8e:	f00d f8e1 	bl	1fd54 <Calc128Cpy>
   12b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b94:	68d8      	ldr	r0, [r3, #12]
   12b96:	4629      	mov	r1, r5
   12b98:	3030      	adds	r0, #48	; 0x30
   12b9a:	f00d f8db 	bl	1fd54 <Calc128Cpy>
   12b9e:	2303      	movs	r3, #3
   12ba0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12ba4:	bd38      	pop	{r3, r4, r5, pc}
   12ba6:	bf00      	nop
   12ba8:	0003ce74 	.word	0x0003ce74

00012bac <smpiScActJwncSendRand>:
   12bac:	b538      	push	{r3, r4, r5, lr}
   12bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12bb0:	4604      	mov	r4, r0
   12bb2:	460d      	mov	r5, r1
   12bb4:	68d8      	ldr	r0, [r3, #12]
   12bb6:	6849      	ldr	r1, [r1, #4]
   12bb8:	2210      	movs	r2, #16
   12bba:	3109      	adds	r1, #9
   12bbc:	3040      	adds	r0, #64	; 0x40
   12bbe:	f00d f904 	bl	1fdca <WStrReverseCpy>
   12bc2:	2304      	movs	r3, #4
   12bc4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12bc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bca:	4629      	mov	r1, r5
   12bcc:	68da      	ldr	r2, [r3, #12]
   12bce:	4620      	mov	r0, r4
   12bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12bd4:	f7fe be33 	b.w	1183e <smpScSendRand>

00012bd8 <smpiScActJwncCalcF4>:
   12bd8:	b538      	push	{r3, r4, r5, lr}
   12bda:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12bdc:	4604      	mov	r4, r0
   12bde:	460d      	mov	r5, r1
   12be0:	68d8      	ldr	r0, [r3, #12]
   12be2:	6849      	ldr	r1, [r1, #4]
   12be4:	2210      	movs	r2, #16
   12be6:	3109      	adds	r1, #9
   12be8:	4410      	add	r0, r2
   12bea:	f00d f8ee 	bl	1fdca <WStrReverseCpy>
   12bee:	4629      	mov	r1, r5
   12bf0:	4620      	mov	r0, r4
   12bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12bf6:	f7ff b8d2 	b.w	11d9e <smpScActJwncCalcF4>

00012bfa <smpiScActJwncCalcG2>:
   12bfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12bfe:	4604      	mov	r4, r0
   12c00:	68d8      	ldr	r0, [r3, #12]
   12c02:	460d      	mov	r5, r1
   12c04:	2210      	movs	r2, #16
   12c06:	6849      	ldr	r1, [r1, #4]
   12c08:	3040      	adds	r0, #64	; 0x40
   12c0a:	f7f9 fa79 	bl	c100 <memcmp>
   12c0e:	b168      	cbz	r0, 12c2c <smpiScActJwncCalcG2+0x32>
   12c10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12c14:	f8ad 3004 	strh.w	r3, [sp, #4]
   12c18:	a901      	add	r1, sp, #4
   12c1a:	f240 4303 	movw	r3, #1027	; 0x403
   12c1e:	4620      	mov	r0, r4
   12c20:	f8ad 3006 	strh.w	r3, [sp, #6]
   12c24:	f7ff fd5f 	bl	126e6 <smpSmExecute>
   12c28:	b003      	add	sp, #12
   12c2a:	bd30      	pop	{r4, r5, pc}
   12c2c:	4629      	mov	r1, r5
   12c2e:	4620      	mov	r0, r4
   12c30:	f7ff f8d7 	bl	11de2 <smpScActJwncCalcG2>
   12c34:	e7f8      	b.n	12c28 <smpiScActJwncCalcG2+0x2e>

00012c36 <smpiScActPkCalcCa>:
   12c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c38:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12c3a:	78da      	ldrb	r2, [r3, #3]
   12c3c:	4604      	mov	r4, r0
   12c3e:	460d      	mov	r5, r1
   12c40:	b9da      	cbnz	r2, 12c7a <smpiScActPkCalcCa+0x44>
   12c42:	68d8      	ldr	r0, [r3, #12]
   12c44:	4919      	ldr	r1, [pc, #100]	; (12cac <smpiScActPkCalcCa+0x76>)
   12c46:	3020      	adds	r0, #32
   12c48:	f00d f884 	bl	1fd54 <Calc128Cpy>
   12c4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c4e:	4917      	ldr	r1, [pc, #92]	; (12cac <smpiScActPkCalcCa+0x76>)
   12c50:	68d8      	ldr	r0, [r3, #12]
   12c52:	3030      	adds	r0, #48	; 0x30
   12c54:	f00d f87e 	bl	1fd54 <Calc128Cpy>
   12c58:	7d2a      	ldrb	r2, [r5, #20]
   12c5a:	2a03      	cmp	r2, #3
   12c5c:	d80d      	bhi.n	12c7a <smpiScActPkCalcCa+0x44>
   12c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c60:	68d8      	ldr	r0, [r3, #12]
   12c62:	1d2e      	adds	r6, r5, #4
   12c64:	4631      	mov	r1, r6
   12c66:	302d      	adds	r0, #45	; 0x2d
   12c68:	f00d f8af 	bl	1fdca <WStrReverseCpy>
   12c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c6e:	7d2a      	ldrb	r2, [r5, #20]
   12c70:	68d8      	ldr	r0, [r3, #12]
   12c72:	4631      	mov	r1, r6
   12c74:	303d      	adds	r0, #61	; 0x3d
   12c76:	f00d f8a8 	bl	1fdca <WStrReverseCpy>
   12c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c7c:	2110      	movs	r1, #16
   12c7e:	68d8      	ldr	r0, [r3, #12]
   12c80:	f008 fd18 	bl	1b6b4 <SecRand>
   12c84:	f7fe f806 	bl	10c94 <DmSecGetEccKey>
   12c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c8a:	4606      	mov	r6, r0
   12c8c:	4620      	mov	r0, r4
   12c8e:	689f      	ldr	r7, [r3, #8]
   12c90:	f7fe fe25 	bl	118de <smpGetPkBit>
   12c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12c96:	68db      	ldr	r3, [r3, #12]
   12c98:	4632      	mov	r2, r6
   12c9a:	e9cd 0300 	strd	r0, r3, [sp]
   12c9e:	4629      	mov	r1, r5
   12ca0:	463b      	mov	r3, r7
   12ca2:	4620      	mov	r0, r4
   12ca4:	f7fe fd02 	bl	116ac <SmpScCalcF4>
   12ca8:	b003      	add	sp, #12
   12caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cac:	0003ce74 	.word	0x0003ce74

00012cb0 <smpiScActPkCalcCb>:
   12cb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12cb4:	4604      	mov	r4, r0
   12cb6:	460d      	mov	r5, r1
   12cb8:	68d8      	ldr	r0, [r3, #12]
   12cba:	6849      	ldr	r1, [r1, #4]
   12cbc:	2210      	movs	r2, #16
   12cbe:	3109      	adds	r1, #9
   12cc0:	4410      	add	r0, r2
   12cc2:	f00d f882 	bl	1fdca <WStrReverseCpy>
   12cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cc8:	689e      	ldr	r6, [r3, #8]
   12cca:	f7fd ffe3 	bl	10c94 <DmSecGetEccKey>
   12cce:	4607      	mov	r7, r0
   12cd0:	4620      	mov	r0, r4
   12cd2:	f7fe fe04 	bl	118de <smpGetPkBit>
   12cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12cd8:	68d9      	ldr	r1, [r3, #12]
   12cda:	3110      	adds	r1, #16
   12cdc:	e9cd 0100 	strd	r0, r1, [sp]
   12ce0:	463b      	mov	r3, r7
   12ce2:	4632      	mov	r2, r6
   12ce4:	4629      	mov	r1, r5
   12ce6:	4620      	mov	r0, r4
   12ce8:	f7fe fce0 	bl	116ac <SmpScCalcF4>
   12cec:	b003      	add	sp, #12
   12cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012cf0 <smpiScActPkSendCnf>:
   12cf0:	684a      	ldr	r2, [r1, #4]
   12cf2:	f7fe bdcc 	b.w	1188e <smpScSendPairCnf>

00012cf6 <smpiScActPkSendRand>:
   12cf6:	f7ff bf59 	b.w	12bac <smpiScActJwncSendRand>

00012cfa <smpiScActPkCheck>:
   12cfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12cfc:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12cfe:	6849      	ldr	r1, [r1, #4]
   12d00:	4604      	mov	r4, r0
   12d02:	68e8      	ldr	r0, [r5, #12]
   12d04:	2210      	movs	r2, #16
   12d06:	3040      	adds	r0, #64	; 0x40
   12d08:	f7f9 f9fa 	bl	c100 <memcmp>
   12d0c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   12d10:	b158      	cbz	r0, 12d2a <smpiScActPkCheck+0x30>
   12d12:	f240 4303 	movw	r3, #1027	; 0x403
   12d16:	f8ad 2004 	strh.w	r2, [sp, #4]
   12d1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   12d1e:	a901      	add	r1, sp, #4
   12d20:	4620      	mov	r0, r4
   12d22:	f7ff fce0 	bl	126e6 <smpSmExecute>
   12d26:	b003      	add	sp, #12
   12d28:	bd30      	pop	{r4, r5, pc}
   12d2a:	78eb      	ldrb	r3, [r5, #3]
   12d2c:	3301      	adds	r3, #1
   12d2e:	b2db      	uxtb	r3, r3
   12d30:	2b13      	cmp	r3, #19
   12d32:	70eb      	strb	r3, [r5, #3]
   12d34:	bf97      	itett	ls
   12d36:	2303      	movls	r3, #3
   12d38:	231a      	movhi	r3, #26
   12d3a:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   12d3e:	2319      	movls	r3, #25
   12d40:	f88d 3006 	strb.w	r3, [sp, #6]
   12d44:	f8ad 2004 	strh.w	r2, [sp, #4]
   12d48:	e7e9      	b.n	12d1e <smpiScActPkCheck+0x24>

00012d4a <smpiScActOobCalcCb>:
   12d4a:	b530      	push	{r4, r5, lr}
   12d4c:	7c83      	ldrb	r3, [r0, #18]
   12d4e:	2b01      	cmp	r3, #1
   12d50:	b085      	sub	sp, #20
   12d52:	4604      	mov	r4, r0
   12d54:	460d      	mov	r5, r1
   12d56:	d005      	beq.n	12d64 <smpiScActOobCalcCb+0x1a>
   12d58:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12d5a:	4913      	ldr	r1, [pc, #76]	; (12da8 <smpiScActOobCalcCb+0x5e>)
   12d5c:	68d8      	ldr	r0, [r3, #12]
   12d5e:	3020      	adds	r0, #32
   12d60:	f00c fff8 	bl	1fd54 <Calc128Cpy>
   12d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12d66:	7e62      	ldrb	r2, [r4, #25]
   12d68:	68d8      	ldr	r0, [r3, #12]
   12d6a:	2a01      	cmp	r2, #1
   12d6c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   12d70:	d10a      	bne.n	12d88 <smpiScActOobCalcCb+0x3e>
   12d72:	689b      	ldr	r3, [r3, #8]
   12d74:	9001      	str	r0, [sp, #4]
   12d76:	2200      	movs	r2, #0
   12d78:	9200      	str	r2, [sp, #0]
   12d7a:	4629      	mov	r1, r5
   12d7c:	461a      	mov	r2, r3
   12d7e:	4620      	mov	r0, r4
   12d80:	f7fe fc94 	bl	116ac <SmpScCalcF4>
   12d84:	b005      	add	sp, #20
   12d86:	bd30      	pop	{r4, r5, pc}
   12d88:	4907      	ldr	r1, [pc, #28]	; (12da8 <smpiScActOobCalcCb+0x5e>)
   12d8a:	f00c ffe3 	bl	1fd54 <Calc128Cpy>
   12d8e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12d92:	f8ad 300c 	strh.w	r3, [sp, #12]
   12d96:	a903      	add	r1, sp, #12
   12d98:	231b      	movs	r3, #27
   12d9a:	4620      	mov	r0, r4
   12d9c:	f88d 300e 	strb.w	r3, [sp, #14]
   12da0:	f7ff fca1 	bl	126e6 <smpSmExecute>
   12da4:	e7ee      	b.n	12d84 <smpiScActOobCalcCb+0x3a>
   12da6:	bf00      	nop
   12da8:	0003ce74 	.word	0x0003ce74

00012dac <smpiScActOobSendRand>:
   12dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12dae:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12db0:	68de      	ldr	r6, [r3, #12]
   12db2:	7e43      	ldrb	r3, [r0, #25]
   12db4:	2b01      	cmp	r3, #1
   12db6:	4604      	mov	r4, r0
   12db8:	460d      	mov	r5, r1
   12dba:	d114      	bne.n	12de6 <smpiScActOobSendRand+0x3a>
   12dbc:	2210      	movs	r2, #16
   12dbe:	6849      	ldr	r1, [r1, #4]
   12dc0:	f106 0040 	add.w	r0, r6, #64	; 0x40
   12dc4:	f7f9 f99c 	bl	c100 <memcmp>
   12dc8:	b168      	cbz	r0, 12de6 <smpiScActOobSendRand+0x3a>
   12dca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12dce:	f8ad 3004 	strh.w	r3, [sp, #4]
   12dd2:	a901      	add	r1, sp, #4
   12dd4:	f240 4303 	movw	r3, #1027	; 0x403
   12dd8:	4620      	mov	r0, r4
   12dda:	f8ad 3006 	strh.w	r3, [sp, #6]
   12dde:	f7ff fc82 	bl	126e6 <smpSmExecute>
   12de2:	b002      	add	sp, #8
   12de4:	bd70      	pop	{r4, r5, r6, pc}
   12de6:	2304      	movs	r3, #4
   12de8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12dec:	4630      	mov	r0, r6
   12dee:	2110      	movs	r1, #16
   12df0:	f008 fc60 	bl	1b6b4 <SecRand>
   12df4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12df6:	4629      	mov	r1, r5
   12df8:	68da      	ldr	r2, [r3, #12]
   12dfa:	4620      	mov	r0, r4
   12dfc:	f7fe fd1f 	bl	1183e <smpScSendRand>
   12e00:	e7ef      	b.n	12de2 <smpiScActOobSendRand+0x36>

00012e02 <smpiScActOobProcRand>:
   12e02:	b538      	push	{r3, r4, r5, lr}
   12e04:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12e06:	4604      	mov	r4, r0
   12e08:	460d      	mov	r5, r1
   12e0a:	68d8      	ldr	r0, [r3, #12]
   12e0c:	6849      	ldr	r1, [r1, #4]
   12e0e:	2210      	movs	r2, #16
   12e10:	3109      	adds	r1, #9
   12e12:	4410      	add	r0, r2
   12e14:	f00c ffd9 	bl	1fdca <WStrReverseCpy>
   12e18:	4629      	mov	r1, r5
   12e1a:	4620      	mov	r0, r4
   12e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e20:	f7ff b870 	b.w	11f04 <smpScActCalcSharedSecret>

00012e24 <smpiScActDHKeyCheckSend>:
   12e24:	b538      	push	{r3, r4, r5, lr}
   12e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12e28:	4604      	mov	r4, r0
   12e2a:	68d8      	ldr	r0, [r3, #12]
   12e2c:	2210      	movs	r2, #16
   12e2e:	460d      	mov	r5, r1
   12e30:	4410      	add	r0, r2
   12e32:	6849      	ldr	r1, [r1, #4]
   12e34:	f00c ffc9 	bl	1fdca <WStrReverseCpy>
   12e38:	230d      	movs	r3, #13
   12e3a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12e40:	4629      	mov	r1, r5
   12e42:	68da      	ldr	r2, [r3, #12]
   12e44:	4620      	mov	r0, r4
   12e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e4a:	f7fe bcd0 	b.w	117ee <smpScSendDHKeyCheck>

00012e4e <smpiScActDHKeyCheckVerify>:
   12e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e50:	6b47      	ldr	r7, [r0, #52]	; 0x34
   12e52:	4604      	mov	r4, r0
   12e54:	68fb      	ldr	r3, [r7, #12]
   12e56:	6848      	ldr	r0, [r1, #4]
   12e58:	2210      	movs	r2, #16
   12e5a:	b085      	sub	sp, #20
   12e5c:	1899      	adds	r1, r3, r2
   12e5e:	3009      	adds	r0, #9
   12e60:	f7f9 f94e 	bl	c100 <memcmp>
   12e64:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   12e68:	4606      	mov	r6, r0
   12e6a:	b9c0      	cbnz	r0, 12e9e <smpiScActDHKeyCheckVerify+0x50>
   12e6c:	7ee3      	ldrb	r3, [r4, #27]
   12e6e:	7d24      	ldrb	r4, [r4, #20]
   12e70:	6939      	ldr	r1, [r7, #16]
   12e72:	429c      	cmp	r4, r3
   12e74:	bf28      	it	cs
   12e76:	461c      	movcs	r4, r3
   12e78:	4622      	mov	r2, r4
   12e7a:	3110      	adds	r1, #16
   12e7c:	4668      	mov	r0, sp
   12e7e:	f7f9 f96f 	bl	c160 <memcpy>
   12e82:	f1c4 0210 	rsb	r2, r4, #16
   12e86:	4631      	mov	r1, r6
   12e88:	eb0d 0004 	add.w	r0, sp, r4
   12e8c:	f7f9 fa66 	bl	c35c <memset>
   12e90:	466a      	mov	r2, sp
   12e92:	2103      	movs	r1, #3
   12e94:	4628      	mov	r0, r5
   12e96:	f7ff f9bd 	bl	12214 <DmSmpEncryptReq>
   12e9a:	b005      	add	sp, #20
   12e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e9e:	f640 331c 	movw	r3, #2844	; 0xb1c
   12ea2:	4669      	mov	r1, sp
   12ea4:	4620      	mov	r0, r4
   12ea6:	f8ad 5000 	strh.w	r5, [sp]
   12eaa:	f8ad 3002 	strh.w	r3, [sp, #2]
   12eae:	f7ff fc1a 	bl	126e6 <smpSmExecute>
   12eb2:	e7f2      	b.n	12e9a <smpiScActDHKeyCheckVerify+0x4c>

00012eb4 <smprActSendSecurityReq>:
   12eb4:	b538      	push	{r3, r4, r5, lr}
   12eb6:	2301      	movs	r3, #1
   12eb8:	4604      	mov	r4, r0
   12eba:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12ebe:	200a      	movs	r0, #10
   12ec0:	460d      	mov	r5, r1
   12ec2:	f7fe faf9 	bl	114b8 <smpMsgAlloc>
   12ec6:	b148      	cbz	r0, 12edc <smprActSendSecurityReq+0x28>
   12ec8:	230b      	movs	r3, #11
   12eca:	7203      	strb	r3, [r0, #8]
   12ecc:	792b      	ldrb	r3, [r5, #4]
   12ece:	7243      	strb	r3, [r0, #9]
   12ed0:	4601      	mov	r1, r0
   12ed2:	4620      	mov	r0, r4
   12ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ed8:	f7fe baa3 	b.w	11422 <smpSendPkt>
   12edc:	bd38      	pop	{r3, r4, r5, pc}

00012ede <smprActCheckSecurityReq>:
   12ede:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   12ee2:	b10b      	cbz	r3, 12ee8 <smprActCheckSecurityReq+0xa>
   12ee4:	f7ff ba1f 	b.w	12326 <smpActPairingFailed>
   12ee8:	4770      	bx	lr

00012eea <smprActClearSecurityReq>:
   12eea:	2300      	movs	r3, #0
   12eec:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   12ef0:	4770      	bx	lr

00012ef2 <smprActProcPairReq>:
   12ef2:	6a03      	ldr	r3, [r0, #32]
   12ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12ef6:	4604      	mov	r4, r0
   12ef8:	460d      	mov	r5, r1
   12efa:	b96b      	cbnz	r3, 12f18 <smprActProcPairReq+0x26>
   12efc:	2040      	movs	r0, #64	; 0x40
   12efe:	f007 fcf1 	bl	1a8e4 <WsfBufAlloc>
   12f02:	6220      	str	r0, [r4, #32]
   12f04:	b940      	cbnz	r0, 12f18 <smprActProcPairReq+0x26>
   12f06:	f640 0303 	movw	r3, #2051	; 0x803
   12f0a:	806b      	strh	r3, [r5, #2]
   12f0c:	4629      	mov	r1, r5
   12f0e:	4620      	mov	r0, r4
   12f10:	f7ff fbe9 	bl	126e6 <smpSmExecute>
   12f14:	b003      	add	sp, #12
   12f16:	bd30      	pop	{r4, r5, pc}
   12f18:	2201      	movs	r2, #1
   12f1a:	4611      	mov	r1, r2
   12f1c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   12f20:	f7fd f8ec 	bl	100fc <DmConnSetIdle>
   12f24:	686b      	ldr	r3, [r5, #4]
   12f26:	461a      	mov	r2, r3
   12f28:	f852 0f08 	ldr.w	r0, [r2, #8]!
   12f2c:	6120      	str	r0, [r4, #16]
   12f2e:	8890      	ldrh	r0, [r2, #4]
   12f30:	82a0      	strh	r0, [r4, #20]
   12f32:	7992      	ldrb	r2, [r2, #6]
   12f34:	75a2      	strb	r2, [r4, #22]
   12f36:	7a9a      	ldrb	r2, [r3, #10]
   12f38:	f88d 2005 	strb.w	r2, [sp, #5]
   12f3c:	7ada      	ldrb	r2, [r3, #11]
   12f3e:	f88d 2004 	strb.w	r2, [sp, #4]
   12f42:	7b5a      	ldrb	r2, [r3, #13]
   12f44:	7b9b      	ldrb	r3, [r3, #14]
   12f46:	f88d 3007 	strb.w	r3, [sp, #7]
   12f4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12f4e:	f8ad 3000 	strh.w	r3, [sp]
   12f52:	4668      	mov	r0, sp
   12f54:	2331      	movs	r3, #49	; 0x31
   12f56:	f88d 2006 	strb.w	r2, [sp, #6]
   12f5a:	f88d 3002 	strb.w	r3, [sp, #2]
   12f5e:	f7fd fce5 	bl	1092c <DmSmpCbackExec>
   12f62:	e7d7      	b.n	12f14 <smprActProcPairReq+0x22>

00012f64 <smprActSendPairRsp>:
   12f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12f66:	2302      	movs	r3, #2
   12f68:	75c3      	strb	r3, [r0, #23]
   12f6a:	4b20      	ldr	r3, [pc, #128]	; (12fec <smprActSendPairRsp+0x88>)
   12f6c:	4e20      	ldr	r6, [pc, #128]	; (12ff0 <smprActSendPairRsp+0x8c>)
   12f6e:	681b      	ldr	r3, [r3, #0]
   12f70:	789a      	ldrb	r2, [r3, #2]
   12f72:	7602      	strb	r2, [r0, #24]
   12f74:	790a      	ldrb	r2, [r1, #4]
   12f76:	7642      	strb	r2, [r0, #25]
   12f78:	794a      	ldrb	r2, [r1, #5]
   12f7a:	7682      	strb	r2, [r0, #26]
   12f7c:	791b      	ldrb	r3, [r3, #4]
   12f7e:	76c3      	strb	r3, [r0, #27]
   12f80:	798b      	ldrb	r3, [r1, #6]
   12f82:	7703      	strb	r3, [r0, #28]
   12f84:	79cb      	ldrb	r3, [r1, #7]
   12f86:	7743      	strb	r3, [r0, #29]
   12f88:	460d      	mov	r5, r1
   12f8a:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   12f8e:	f10d 0207 	add.w	r2, sp, #7
   12f92:	f10d 0106 	add.w	r1, sp, #6
   12f96:	4604      	mov	r4, r0
   12f98:	4798      	blx	r3
   12f9a:	b320      	cbz	r0, 12fe6 <smprActSendPairRsp+0x82>
   12f9c:	796b      	ldrb	r3, [r5, #5]
   12f9e:	7ce2      	ldrb	r2, [r4, #19]
   12fa0:	f003 0308 	and.w	r3, r3, #8
   12fa4:	4213      	tst	r3, r2
   12fa6:	bf14      	ite	ne
   12fa8:	230c      	movne	r3, #12
   12faa:	2303      	moveq	r3, #3
   12fac:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12fb0:	4620      	mov	r0, r4
   12fb2:	f7ff f985 	bl	122c0 <smpStartRspTimer>
   12fb6:	200f      	movs	r0, #15
   12fb8:	f7fe fa7e 	bl	114b8 <smpMsgAlloc>
   12fbc:	4601      	mov	r1, r0
   12fbe:	b150      	cbz	r0, 12fd6 <smprActSendPairRsp+0x72>
   12fc0:	4623      	mov	r3, r4
   12fc2:	f853 0f17 	ldr.w	r0, [r3, #23]!
   12fc6:	6088      	str	r0, [r1, #8]
   12fc8:	8898      	ldrh	r0, [r3, #4]
   12fca:	8188      	strh	r0, [r1, #12]
   12fcc:	799b      	ldrb	r3, [r3, #6]
   12fce:	738b      	strb	r3, [r1, #14]
   12fd0:	4620      	mov	r0, r4
   12fd2:	f7fe fa26 	bl	11422 <smpSendPkt>
   12fd6:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   12fda:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12fde:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12fe2:	4620      	mov	r0, r4
   12fe4:	4798      	blx	r3
   12fe6:	b002      	add	sp, #8
   12fe8:	bd70      	pop	{r4, r5, r6, pc}
   12fea:	bf00      	nop
   12fec:	10017f74 	.word	0x10017f74
   12ff0:	100193c0 	.word	0x100193c0

00012ff4 <smprActProcPairCnf>:
   12ff4:	b510      	push	{r4, lr}
   12ff6:	684b      	ldr	r3, [r1, #4]
   12ff8:	6a02      	ldr	r2, [r0, #32]
   12ffa:	f103 0109 	add.w	r1, r3, #9
   12ffe:	3220      	adds	r2, #32
   13000:	3319      	adds	r3, #25
   13002:	f851 4b04 	ldr.w	r4, [r1], #4
   13006:	f842 4b04 	str.w	r4, [r2], #4
   1300a:	4299      	cmp	r1, r3
   1300c:	d1f9      	bne.n	13002 <smprActProcPairCnf+0xe>
   1300e:	2300      	movs	r3, #0
   13010:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   13014:	bd10      	pop	{r4, pc}

00013016 <smprActProcPairCnfCalc1>:
   13016:	b510      	push	{r4, lr}
   13018:	4604      	mov	r4, r0
   1301a:	f7ff ffeb 	bl	12ff4 <smprActProcPairCnf>
   1301e:	6a00      	ldr	r0, [r0, #32]
   13020:	2110      	movs	r1, #16
   13022:	3030      	adds	r0, #48	; 0x30
   13024:	f008 fb46 	bl	1b6b4 <SecRand>
   13028:	6a21      	ldr	r1, [r4, #32]
   1302a:	4620      	mov	r0, r4
   1302c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   13030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13034:	f7fe b89c 	b.w	11170 <smpCalcC1Part1>

00013038 <smprActCnfVerify>:
   13038:	b570      	push	{r4, r5, r6, lr}
   1303a:	460e      	mov	r6, r1
   1303c:	6a05      	ldr	r5, [r0, #32]
   1303e:	4604      	mov	r4, r0
   13040:	2210      	movs	r2, #16
   13042:	f105 0120 	add.w	r1, r5, #32
   13046:	6870      	ldr	r0, [r6, #4]
   13048:	f7f9 f85a 	bl	c100 <memcmp>
   1304c:	b1a8      	cbz	r0, 1307a <smprActCnfVerify+0x42>
   1304e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   13052:	4a0f      	ldr	r2, [pc, #60]	; (13090 <smprActCnfVerify+0x58>)
   13054:	3301      	adds	r3, #1
   13056:	b2db      	uxtb	r3, r3
   13058:	6812      	ldr	r2, [r2, #0]
   1305a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1305e:	7952      	ldrb	r2, [r2, #5]
   13060:	429a      	cmp	r2, r3
   13062:	bf0c      	ite	eq
   13064:	f240 430d 	movweq	r3, #1037	; 0x40d
   13068:	f240 4303 	movwne	r3, #1027	; 0x403
   1306c:	8073      	strh	r3, [r6, #2]
   1306e:	4631      	mov	r1, r6
   13070:	4620      	mov	r0, r4
   13072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13076:	f7ff bb36 	b.w	126e6 <smpSmExecute>
   1307a:	f105 0310 	add.w	r3, r5, #16
   1307e:	f105 0230 	add.w	r2, r5, #48	; 0x30
   13082:	4629      	mov	r1, r5
   13084:	4620      	mov	r0, r4
   13086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1308a:	f7fe b973 	b.w	11374 <smpCalcS1>
   1308e:	bf00      	nop
   13090:	10017f74 	.word	0x10017f74

00013094 <smprActSendPairRandom>:
   13094:	b538      	push	{r3, r4, r5, lr}
   13096:	7ec5      	ldrb	r5, [r0, #27]
   13098:	7d03      	ldrb	r3, [r0, #20]
   1309a:	6849      	ldr	r1, [r1, #4]
   1309c:	429d      	cmp	r5, r3
   1309e:	4604      	mov	r4, r0
   130a0:	6a00      	ldr	r0, [r0, #32]
   130a2:	bf28      	it	cs
   130a4:	461d      	movcs	r5, r3
   130a6:	462a      	mov	r2, r5
   130a8:	3020      	adds	r0, #32
   130aa:	f7f9 f859 	bl	c160 <memcpy>
   130ae:	6a20      	ldr	r0, [r4, #32]
   130b0:	3020      	adds	r0, #32
   130b2:	2100      	movs	r1, #0
   130b4:	f1c5 0210 	rsb	r2, r5, #16
   130b8:	4428      	add	r0, r5
   130ba:	f7f9 f94f 	bl	c35c <memset>
   130be:	4620      	mov	r0, r4
   130c0:	f7ff f8fe 	bl	122c0 <smpStartRspTimer>
   130c4:	2019      	movs	r0, #25
   130c6:	f7fe f9f7 	bl	114b8 <smpMsgAlloc>
   130ca:	4601      	mov	r1, r0
   130cc:	b188      	cbz	r0, 130f2 <smprActSendPairRandom+0x5e>
   130ce:	2304      	movs	r3, #4
   130d0:	7203      	strb	r3, [r0, #8]
   130d2:	6a23      	ldr	r3, [r4, #32]
   130d4:	3009      	adds	r0, #9
   130d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   130da:	3340      	adds	r3, #64	; 0x40
   130dc:	f852 5b04 	ldr.w	r5, [r2], #4
   130e0:	f840 5b04 	str.w	r5, [r0], #4
   130e4:	429a      	cmp	r2, r3
   130e6:	d1f9      	bne.n	130dc <smprActSendPairRandom+0x48>
   130e8:	4620      	mov	r0, r4
   130ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130ee:	f7fe b998 	b.w	11422 <smpSendPkt>
   130f2:	bd38      	pop	{r3, r4, r5, pc}

000130f4 <smprActSendKey>:
   130f4:	b538      	push	{r3, r4, r5, lr}
   130f6:	460d      	mov	r5, r1
   130f8:	7f43      	ldrb	r3, [r0, #29]
   130fa:	7d81      	ldrb	r1, [r0, #22]
   130fc:	4019      	ands	r1, r3
   130fe:	4604      	mov	r4, r0
   13100:	f7ff f993 	bl	1242a <smpSendKey>
   13104:	b330      	cbz	r0, 13154 <smprActSendKey+0x60>
   13106:	2300      	movs	r3, #0
   13108:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1310c:	7f22      	ldrb	r2, [r4, #28]
   1310e:	7d63      	ldrb	r3, [r4, #21]
   13110:	4013      	ands	r3, r2
   13112:	07d8      	lsls	r0, r3, #31
   13114:	d518      	bpl.n	13148 <smprActSendKey+0x54>
   13116:	4a10      	ldr	r2, [pc, #64]	; (13158 <smprActSendKey+0x64>)
   13118:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   1311c:	b192      	cbz	r2, 13144 <smprActSendKey+0x50>
   1311e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13120:	7812      	ldrb	r2, [r2, #0]
   13122:	b17a      	cbz	r2, 13144 <smprActSendKey+0x50>
   13124:	0799      	lsls	r1, r3, #30
   13126:	d502      	bpl.n	1312e <smprActSendKey+0x3a>
   13128:	2308      	movs	r3, #8
   1312a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1312e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   13132:	b97b      	cbnz	r3, 13154 <smprActSendKey+0x60>
   13134:	230e      	movs	r3, #14
   13136:	70ab      	strb	r3, [r5, #2]
   13138:	4629      	mov	r1, r5
   1313a:	4620      	mov	r0, r4
   1313c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13140:	f7ff bad1 	b.w	126e6 <smpSmExecute>
   13144:	2306      	movs	r3, #6
   13146:	e7f0      	b.n	1312a <smprActSendKey+0x36>
   13148:	079a      	lsls	r2, r3, #30
   1314a:	d4ed      	bmi.n	13128 <smprActSendKey+0x34>
   1314c:	075b      	lsls	r3, r3, #29
   1314e:	d5ee      	bpl.n	1312e <smprActSendKey+0x3a>
   13150:	230a      	movs	r3, #10
   13152:	e7ea      	b.n	1312a <smprActSendKey+0x36>
   13154:	bd38      	pop	{r3, r4, r5, pc}
   13156:	bf00      	nop
   13158:	100193c0 	.word	0x100193c0

0001315c <smprActSetupKeyDist>:
   1315c:	b538      	push	{r3, r4, r5, lr}
   1315e:	4604      	mov	r4, r0
   13160:	2300      	movs	r3, #0
   13162:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   13166:	460d      	mov	r5, r1
   13168:	f7ff f8aa 	bl	122c0 <smpStartRspTimer>
   1316c:	6a23      	ldr	r3, [r4, #32]
   1316e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   13172:	801a      	strh	r2, [r3, #0]
   13174:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   13178:	f012 0f04 	tst.w	r2, #4
   1317c:	bf14      	ite	ne
   1317e:	2202      	movne	r2, #2
   13180:	2201      	moveq	r2, #1
   13182:	77da      	strb	r2, [r3, #31]
   13184:	7d21      	ldrb	r1, [r4, #20]
   13186:	7ee2      	ldrb	r2, [r4, #27]
   13188:	428a      	cmp	r2, r1
   1318a:	bf28      	it	cs
   1318c:	460a      	movcs	r2, r1
   1318e:	f883 2020 	strb.w	r2, [r3, #32]
   13192:	4629      	mov	r1, r5
   13194:	4620      	mov	r0, r4
   13196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1319a:	f7ff bfab 	b.w	130f4 <smprActSendKey>

0001319e <smprActRcvKey>:
   1319e:	b538      	push	{r3, r4, r5, lr}
   131a0:	7d42      	ldrb	r2, [r0, #21]
   131a2:	7f03      	ldrb	r3, [r0, #28]
   131a4:	460d      	mov	r5, r1
   131a6:	4013      	ands	r3, r2
   131a8:	684a      	ldr	r2, [r1, #4]
   131aa:	6a01      	ldr	r1, [r0, #32]
   131ac:	4604      	mov	r4, r0
   131ae:	f7ff f9fb 	bl	125a8 <smpProcRcvKey>
   131b2:	b138      	cbz	r0, 131c4 <smprActRcvKey+0x26>
   131b4:	230e      	movs	r3, #14
   131b6:	70ab      	strb	r3, [r5, #2]
   131b8:	4629      	mov	r1, r5
   131ba:	4620      	mov	r0, r4
   131bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   131c0:	f7ff ba91 	b.w	126e6 <smpSmExecute>
   131c4:	bd38      	pop	{r3, r4, r5, pc}
   131c6:	bf00      	nop

000131c8 <smprScActStoreLescPin>:
   131c8:	b570      	push	{r4, r5, r6, lr}
   131ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
   131cc:	785a      	ldrb	r2, [r3, #1]
   131ce:	2a03      	cmp	r2, #3
   131d0:	4604      	mov	r4, r0
   131d2:	460d      	mov	r5, r1
   131d4:	d11d      	bne.n	13212 <smprScActStoreLescPin+0x4a>
   131d6:	68d8      	ldr	r0, [r3, #12]
   131d8:	490e      	ldr	r1, [pc, #56]	; (13214 <smprScActStoreLescPin+0x4c>)
   131da:	3020      	adds	r0, #32
   131dc:	f00c fdba 	bl	1fd54 <Calc128Cpy>
   131e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131e2:	490c      	ldr	r1, [pc, #48]	; (13214 <smprScActStoreLescPin+0x4c>)
   131e4:	68d8      	ldr	r0, [r3, #12]
   131e6:	3030      	adds	r0, #48	; 0x30
   131e8:	f00c fdb4 	bl	1fd54 <Calc128Cpy>
   131ec:	7d2a      	ldrb	r2, [r5, #20]
   131ee:	2a03      	cmp	r2, #3
   131f0:	d80f      	bhi.n	13212 <smprScActStoreLescPin+0x4a>
   131f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   131f4:	68d8      	ldr	r0, [r3, #12]
   131f6:	1d2e      	adds	r6, r5, #4
   131f8:	4631      	mov	r1, r6
   131fa:	302d      	adds	r0, #45	; 0x2d
   131fc:	f00c fde5 	bl	1fdca <WStrReverseCpy>
   13200:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13202:	7d2a      	ldrb	r2, [r5, #20]
   13204:	68d8      	ldr	r0, [r3, #12]
   13206:	4631      	mov	r1, r6
   13208:	303d      	adds	r0, #61	; 0x3d
   1320a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1320e:	f00c bddc 	b.w	1fdca <WStrReverseCpy>
   13212:	bd70      	pop	{r4, r5, r6, pc}
   13214:	0003ce74 	.word	0x0003ce74

00013218 <smprScActSendPubKey>:
   13218:	b538      	push	{r3, r4, r5, lr}
   1321a:	4604      	mov	r4, r0
   1321c:	460d      	mov	r5, r1
   1321e:	f7fe fd74 	bl	11d0a <smpScActAuthSelect>
   13222:	4629      	mov	r1, r5
   13224:	4620      	mov	r0, r4
   13226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1322a:	f7fe baae 	b.w	1178a <smpScSendPubKey>

0001322e <smprScActJwncSetup>:
   1322e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13230:	b570      	push	{r4, r5, r6, lr}
   13232:	4604      	mov	r4, r0
   13234:	68d8      	ldr	r0, [r3, #12]
   13236:	4d0d      	ldr	r5, [pc, #52]	; (1326c <smprScActJwncSetup+0x3e>)
   13238:	460e      	mov	r6, r1
   1323a:	2110      	movs	r1, #16
   1323c:	4408      	add	r0, r1
   1323e:	f008 fa39 	bl	1b6b4 <SecRand>
   13242:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13244:	68d8      	ldr	r0, [r3, #12]
   13246:	4629      	mov	r1, r5
   13248:	3020      	adds	r0, #32
   1324a:	f00c fd83 	bl	1fd54 <Calc128Cpy>
   1324e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13250:	68d8      	ldr	r0, [r3, #12]
   13252:	4629      	mov	r1, r5
   13254:	3030      	adds	r0, #48	; 0x30
   13256:	f00c fd7d 	bl	1fd54 <Calc128Cpy>
   1325a:	2304      	movs	r3, #4
   1325c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13260:	4631      	mov	r1, r6
   13262:	4620      	mov	r0, r4
   13264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13268:	f7fe bd99 	b.w	11d9e <smpScActJwncCalcF4>
   1326c:	0003ce74 	.word	0x0003ce74

00013270 <smprScActJwncSendCnf>:
   13270:	684a      	ldr	r2, [r1, #4]
   13272:	f7fe bb0c 	b.w	1188e <smpScSendPairCnf>

00013276 <smprScActJwncCalcG2>:
   13276:	b538      	push	{r3, r4, r5, lr}
   13278:	460d      	mov	r5, r1
   1327a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1327c:	6849      	ldr	r1, [r1, #4]
   1327e:	4604      	mov	r4, r0
   13280:	3109      	adds	r1, #9
   13282:	68d8      	ldr	r0, [r3, #12]
   13284:	2210      	movs	r2, #16
   13286:	f00c fda0 	bl	1fdca <WStrReverseCpy>
   1328a:	4629      	mov	r1, r5
   1328c:	4620      	mov	r0, r4
   1328e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13292:	f7fe bda6 	b.w	11de2 <smpScActJwncCalcG2>

00013296 <smprScActPkStoreCnf>:
   13296:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13298:	6849      	ldr	r1, [r1, #4]
   1329a:	68d8      	ldr	r0, [r3, #12]
   1329c:	2210      	movs	r2, #16
   1329e:	3109      	adds	r1, #9
   132a0:	3050      	adds	r0, #80	; 0x50
   132a2:	f00c bd92 	b.w	1fdca <WStrReverseCpy>

000132a6 <smprScActPkCalcCb>:
   132a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   132a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132aa:	4604      	mov	r4, r0
   132ac:	68d8      	ldr	r0, [r3, #12]
   132ae:	460d      	mov	r5, r1
   132b0:	2110      	movs	r1, #16
   132b2:	4408      	add	r0, r1
   132b4:	f008 f9fe 	bl	1b6b4 <SecRand>
   132b8:	2304      	movs	r3, #4
   132ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   132be:	f7fd fce9 	bl	10c94 <DmSecGetEccKey>
   132c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132c4:	4606      	mov	r6, r0
   132c6:	4620      	mov	r0, r4
   132c8:	689f      	ldr	r7, [r3, #8]
   132ca:	f7fe fb08 	bl	118de <smpGetPkBit>
   132ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132d0:	68d9      	ldr	r1, [r3, #12]
   132d2:	3110      	adds	r1, #16
   132d4:	e9cd 0100 	strd	r0, r1, [sp]
   132d8:	463b      	mov	r3, r7
   132da:	4632      	mov	r2, r6
   132dc:	4629      	mov	r1, r5
   132de:	4620      	mov	r0, r4
   132e0:	f7fe f9e4 	bl	116ac <SmpScCalcF4>
   132e4:	b003      	add	sp, #12
   132e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000132e8 <smprScActPkStoreCnfAndCalcCb>:
   132e8:	b538      	push	{r3, r4, r5, lr}
   132ea:	4604      	mov	r4, r0
   132ec:	460d      	mov	r5, r1
   132ee:	f7ff ffd2 	bl	13296 <smprScActPkStoreCnf>
   132f2:	4629      	mov	r1, r5
   132f4:	4620      	mov	r0, r4
   132f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   132fa:	f7ff bfd4 	b.w	132a6 <smprScActPkCalcCb>

000132fe <smprScActPkStorePinAndCalcCb>:
   132fe:	b538      	push	{r3, r4, r5, lr}
   13300:	4604      	mov	r4, r0
   13302:	460d      	mov	r5, r1
   13304:	f7ff ff60 	bl	131c8 <smprScActStoreLescPin>
   13308:	4629      	mov	r1, r5
   1330a:	4620      	mov	r0, r4
   1330c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13310:	f7ff bfc9 	b.w	132a6 <smprScActPkCalcCb>

00013314 <smprScActPkSendCnf>:
   13314:	f7ff bfac 	b.w	13270 <smprScActJwncSendCnf>

00013318 <smprScActPkCalcCa>:
   13318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1331a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1331c:	460d      	mov	r5, r1
   1331e:	6849      	ldr	r1, [r1, #4]
   13320:	4604      	mov	r4, r0
   13322:	2210      	movs	r2, #16
   13324:	3109      	adds	r1, #9
   13326:	68d8      	ldr	r0, [r3, #12]
   13328:	f00c fd4f 	bl	1fdca <WStrReverseCpy>
   1332c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1332e:	689e      	ldr	r6, [r3, #8]
   13330:	f7fd fcb0 	bl	10c94 <DmSecGetEccKey>
   13334:	4607      	mov	r7, r0
   13336:	4620      	mov	r0, r4
   13338:	f7fe fad1 	bl	118de <smpGetPkBit>
   1333c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1333e:	68db      	ldr	r3, [r3, #12]
   13340:	4632      	mov	r2, r6
   13342:	e9cd 0300 	strd	r0, r3, [sp]
   13346:	4629      	mov	r1, r5
   13348:	463b      	mov	r3, r7
   1334a:	4620      	mov	r0, r4
   1334c:	f7fe f9ae 	bl	116ac <SmpScCalcF4>
   13350:	b003      	add	sp, #12
   13352:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013354 <smprScActPkSendRand>:
   13354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13356:	6b45      	ldr	r5, [r0, #52]	; 0x34
   13358:	68ef      	ldr	r7, [r5, #12]
   1335a:	4604      	mov	r4, r0
   1335c:	460e      	mov	r6, r1
   1335e:	2210      	movs	r2, #16
   13360:	6849      	ldr	r1, [r1, #4]
   13362:	f107 0050 	add.w	r0, r7, #80	; 0x50
   13366:	f7f8 fecb 	bl	c100 <memcmp>
   1336a:	b168      	cbz	r0, 13388 <smprScActPkSendRand+0x34>
   1336c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13370:	f8ad 3004 	strh.w	r3, [sp, #4]
   13374:	f240 4303 	movw	r3, #1027	; 0x403
   13378:	f8ad 3006 	strh.w	r3, [sp, #6]
   1337c:	a901      	add	r1, sp, #4
   1337e:	4620      	mov	r0, r4
   13380:	f7ff f9b1 	bl	126e6 <smpSmExecute>
   13384:	b003      	add	sp, #12
   13386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13388:	78eb      	ldrb	r3, [r5, #3]
   1338a:	3301      	adds	r3, #1
   1338c:	b2db      	uxtb	r3, r3
   1338e:	2b13      	cmp	r3, #19
   13390:	70eb      	strb	r3, [r5, #3]
   13392:	d907      	bls.n	133a4 <smprScActPkSendRand+0x50>
   13394:	231a      	movs	r3, #26
   13396:	f88d 3006 	strb.w	r3, [sp, #6]
   1339a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1339e:	f8ad 3004 	strh.w	r3, [sp, #4]
   133a2:	e7eb      	b.n	1337c <smprScActPkSendRand+0x28>
   133a4:	2303      	movs	r3, #3
   133a6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   133aa:	f107 0210 	add.w	r2, r7, #16
   133ae:	2319      	movs	r3, #25
   133b0:	4631      	mov	r1, r6
   133b2:	4620      	mov	r0, r4
   133b4:	f88d 3006 	strb.w	r3, [sp, #6]
   133b8:	f7fe fa41 	bl	1183e <smpScSendRand>
   133bc:	e7ed      	b.n	1339a <smprScActPkSendRand+0x46>

000133be <smprScActOobSetup>:
   133be:	2304      	movs	r3, #4
   133c0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   133c4:	4770      	bx	lr

000133c6 <smprScActOobCalcCa>:
   133c6:	b530      	push	{r4, r5, lr}
   133c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   133ca:	460d      	mov	r5, r1
   133cc:	6849      	ldr	r1, [r1, #4]
   133ce:	4604      	mov	r4, r0
   133d0:	b085      	sub	sp, #20
   133d2:	68d8      	ldr	r0, [r3, #12]
   133d4:	2210      	movs	r2, #16
   133d6:	3109      	adds	r1, #9
   133d8:	f00c fcf7 	bl	1fdca <WStrReverseCpy>
   133dc:	7e63      	ldrb	r3, [r4, #25]
   133de:	2b01      	cmp	r3, #1
   133e0:	d005      	beq.n	133ee <smprScActOobCalcCa+0x28>
   133e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133e4:	4912      	ldr	r1, [pc, #72]	; (13430 <smprScActOobCalcCa+0x6a>)
   133e6:	68d8      	ldr	r0, [r3, #12]
   133e8:	3030      	adds	r0, #48	; 0x30
   133ea:	f00c fcb3 	bl	1fd54 <Calc128Cpy>
   133ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133f0:	7ca2      	ldrb	r2, [r4, #18]
   133f2:	68d8      	ldr	r0, [r3, #12]
   133f4:	2a01      	cmp	r2, #1
   133f6:	f100 0020 	add.w	r0, r0, #32
   133fa:	d10a      	bne.n	13412 <smprScActOobCalcCa+0x4c>
   133fc:	689b      	ldr	r3, [r3, #8]
   133fe:	9001      	str	r0, [sp, #4]
   13400:	2200      	movs	r2, #0
   13402:	9200      	str	r2, [sp, #0]
   13404:	4629      	mov	r1, r5
   13406:	461a      	mov	r2, r3
   13408:	4620      	mov	r0, r4
   1340a:	f7fe f94f 	bl	116ac <SmpScCalcF4>
   1340e:	b005      	add	sp, #20
   13410:	bd30      	pop	{r4, r5, pc}
   13412:	4907      	ldr	r1, [pc, #28]	; (13430 <smprScActOobCalcCa+0x6a>)
   13414:	f00c fc9e 	bl	1fd54 <Calc128Cpy>
   13418:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1341c:	f8ad 300c 	strh.w	r3, [sp, #12]
   13420:	a903      	add	r1, sp, #12
   13422:	231b      	movs	r3, #27
   13424:	4620      	mov	r0, r4
   13426:	f88d 300e 	strb.w	r3, [sp, #14]
   1342a:	f7ff f95c 	bl	126e6 <smpSmExecute>
   1342e:	e7ee      	b.n	1340e <smprScActOobCalcCa+0x48>
   13430:	0003ce74 	.word	0x0003ce74

00013434 <smprScActOobSendRand>:
   13434:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13436:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13438:	68de      	ldr	r6, [r3, #12]
   1343a:	7c83      	ldrb	r3, [r0, #18]
   1343c:	2b01      	cmp	r3, #1
   1343e:	4604      	mov	r4, r0
   13440:	460d      	mov	r5, r1
   13442:	d114      	bne.n	1346e <smprScActOobSendRand+0x3a>
   13444:	2210      	movs	r2, #16
   13446:	6849      	ldr	r1, [r1, #4]
   13448:	f106 0050 	add.w	r0, r6, #80	; 0x50
   1344c:	f7f8 fe58 	bl	c100 <memcmp>
   13450:	b168      	cbz	r0, 1346e <smprScActOobSendRand+0x3a>
   13452:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13456:	f8ad 3004 	strh.w	r3, [sp, #4]
   1345a:	a901      	add	r1, sp, #4
   1345c:	f240 4303 	movw	r3, #1027	; 0x403
   13460:	4620      	mov	r0, r4
   13462:	f8ad 3006 	strh.w	r3, [sp, #6]
   13466:	f7ff f93e 	bl	126e6 <smpSmExecute>
   1346a:	b002      	add	sp, #8
   1346c:	bd70      	pop	{r4, r5, r6, pc}
   1346e:	230d      	movs	r3, #13
   13470:	2110      	movs	r1, #16
   13472:	1870      	adds	r0, r6, r1
   13474:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   13478:	f008 f91c 	bl	1b6b4 <SecRand>
   1347c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1347e:	68da      	ldr	r2, [r3, #12]
   13480:	4629      	mov	r1, r5
   13482:	3210      	adds	r2, #16
   13484:	4620      	mov	r0, r4
   13486:	f7fe f9da 	bl	1183e <smpScSendRand>
   1348a:	e7ee      	b.n	1346a <smprScActOobSendRand+0x36>

0001348c <smprScActWaitDhCheck>:
   1348c:	220d      	movs	r2, #13
   1348e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13490:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   13494:	785a      	ldrb	r2, [r3, #1]
   13496:	2a02      	cmp	r2, #2
   13498:	d003      	beq.n	134a2 <smprScActWaitDhCheck+0x16>
   1349a:	68da      	ldr	r2, [r3, #12]
   1349c:	3210      	adds	r2, #16
   1349e:	f7fe b9ce 	b.w	1183e <smpScSendRand>
   134a2:	4770      	bx	lr

000134a4 <smprScActCalcDHKey>:
   134a4:	b538      	push	{r3, r4, r5, lr}
   134a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   134a8:	4604      	mov	r4, r0
   134aa:	460d      	mov	r5, r1
   134ac:	68d8      	ldr	r0, [r3, #12]
   134ae:	6849      	ldr	r1, [r1, #4]
   134b0:	3050      	adds	r0, #80	; 0x50
   134b2:	3109      	adds	r1, #9
   134b4:	2210      	movs	r2, #16
   134b6:	f00c fc88 	bl	1fdca <WStrReverseCpy>
   134ba:	4629      	mov	r1, r5
   134bc:	4620      	mov	r0, r4
   134be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   134c2:	f7fe bd1f 	b.w	11f04 <smpScActCalcSharedSecret>

000134c6 <smprScActDHKeyCheckSend>:
   134c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   134c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   134ca:	4604      	mov	r4, r0
   134cc:	68d8      	ldr	r0, [r3, #12]
   134ce:	460e      	mov	r6, r1
   134d0:	3010      	adds	r0, #16
   134d2:	6849      	ldr	r1, [r1, #4]
   134d4:	f00c fc3e 	bl	1fd54 <Calc128Cpy>
   134d8:	6b65      	ldr	r5, [r4, #52]	; 0x34
   134da:	68e9      	ldr	r1, [r5, #12]
   134dc:	2210      	movs	r2, #16
   134de:	f101 0050 	add.w	r0, r1, #80	; 0x50
   134e2:	f7f8 fe0d 	bl	c100 <memcmp>
   134e6:	4601      	mov	r1, r0
   134e8:	b9a0      	cbnz	r0, 13514 <smprScActDHKeyCheckSend+0x4e>
   134ea:	7d20      	ldrb	r0, [r4, #20]
   134ec:	7ee3      	ldrb	r3, [r4, #27]
   134ee:	692d      	ldr	r5, [r5, #16]
   134f0:	4298      	cmp	r0, r3
   134f2:	bf28      	it	cs
   134f4:	4618      	movcs	r0, r3
   134f6:	3510      	adds	r5, #16
   134f8:	f1c0 0210 	rsb	r2, r0, #16
   134fc:	4428      	add	r0, r5
   134fe:	f7f8 ff2d 	bl	c35c <memset>
   13502:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13504:	68da      	ldr	r2, [r3, #12]
   13506:	4631      	mov	r1, r6
   13508:	3210      	adds	r2, #16
   1350a:	4620      	mov	r0, r4
   1350c:	f7fe f96f 	bl	117ee <smpScSendDHKeyCheck>
   13510:	b002      	add	sp, #8
   13512:	bd70      	pop	{r4, r5, r6, pc}
   13514:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   13518:	f8ad 3004 	strh.w	r3, [sp, #4]
   1351c:	a901      	add	r1, sp, #4
   1351e:	f640 331c 	movw	r3, #2844	; 0xb1c
   13522:	4620      	mov	r0, r4
   13524:	f8ad 3006 	strh.w	r3, [sp, #6]
   13528:	f7ff f8dd 	bl	126e6 <smpSmExecute>
   1352c:	e7f0      	b.n	13510 <smprScActDHKeyCheckSend+0x4a>
   1352e:	bf00      	nop

00013530 <cos>:
   13530:	b500      	push	{lr}
   13532:	ec51 0b10 	vmov	r0, r1, d0
   13536:	4a2c      	ldr	r2, [pc, #176]	; (135e8 <cos+0xb8>)
   13538:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1353c:	4293      	cmp	r3, r2
   1353e:	b085      	sub	sp, #20
   13540:	dd20      	ble.n	13584 <cos+0x54>
   13542:	4a2a      	ldr	r2, [pc, #168]	; (135ec <cos+0xbc>)
   13544:	4293      	cmp	r3, r2
   13546:	dd09      	ble.n	1355c <cos+0x2c>
   13548:	ee10 2a10 	vmov	r2, s0
   1354c:	460b      	mov	r3, r1
   1354e:	f7f9 f829 	bl	c5a4 <__aeabi_dsub>
   13552:	ec41 0b10 	vmov	d0, r0, r1
   13556:	b005      	add	sp, #20
   13558:	f85d fb04 	ldr.w	pc, [sp], #4
   1355c:	4668      	mov	r0, sp
   1355e:	f000 f8a3 	bl	136a8 <__ieee754_rem_pio2>
   13562:	f000 0003 	and.w	r0, r0, #3
   13566:	2801      	cmp	r0, #1
   13568:	d028      	beq.n	135bc <cos+0x8c>
   1356a:	2802      	cmp	r0, #2
   1356c:	d015      	beq.n	1359a <cos+0x6a>
   1356e:	b360      	cbz	r0, 135ca <cos+0x9a>
   13570:	2001      	movs	r0, #1
   13572:	ed9d 1b02 	vldr	d1, [sp, #8]
   13576:	ed9d 0b00 	vldr	d0, [sp]
   1357a:	f001 f905 	bl	14788 <__kernel_sin>
   1357e:	ec51 0b10 	vmov	r0, r1, d0
   13582:	e7e6      	b.n	13552 <cos+0x22>
   13584:	ed9f 1b16 	vldr	d1, [pc, #88]	; 135e0 <cos+0xb0>
   13588:	f000 fb82 	bl	13c90 <__kernel_cos>
   1358c:	ec51 0b10 	vmov	r0, r1, d0
   13590:	ec41 0b10 	vmov	d0, r0, r1
   13594:	b005      	add	sp, #20
   13596:	f85d fb04 	ldr.w	pc, [sp], #4
   1359a:	ed9d 1b02 	vldr	d1, [sp, #8]
   1359e:	ed9d 0b00 	vldr	d0, [sp]
   135a2:	f000 fb75 	bl	13c90 <__kernel_cos>
   135a6:	ec53 2b10 	vmov	r2, r3, d0
   135aa:	ee10 0a10 	vmov	r0, s0
   135ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   135b2:	ec41 0b10 	vmov	d0, r0, r1
   135b6:	b005      	add	sp, #20
   135b8:	f85d fb04 	ldr.w	pc, [sp], #4
   135bc:	ed9d 1b02 	vldr	d1, [sp, #8]
   135c0:	ed9d 0b00 	vldr	d0, [sp]
   135c4:	f001 f8e0 	bl	14788 <__kernel_sin>
   135c8:	e7ed      	b.n	135a6 <cos+0x76>
   135ca:	ed9d 1b02 	vldr	d1, [sp, #8]
   135ce:	ed9d 0b00 	vldr	d0, [sp]
   135d2:	f000 fb5d 	bl	13c90 <__kernel_cos>
   135d6:	ec51 0b10 	vmov	r0, r1, d0
   135da:	e7ba      	b.n	13552 <cos+0x22>
   135dc:	f3af 8000 	nop.w
	...
   135e8:	3fe921fb 	.word	0x3fe921fb
   135ec:	7fefffff 	.word	0x7fefffff

000135f0 <sqrt>:
   135f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   135f4:	ed2d 8b02 	vpush	{d8}
   135f8:	b08b      	sub	sp, #44	; 0x2c
   135fa:	ec55 4b10 	vmov	r4, r5, d0
   135fe:	f000 fa79 	bl	13af4 <__ieee754_sqrt>
   13602:	4b27      	ldr	r3, [pc, #156]	; (136a0 <sqrt+0xb0>)
   13604:	eeb0 8a40 	vmov.f32	s16, s0
   13608:	eef0 8a60 	vmov.f32	s17, s1
   1360c:	f993 6000 	ldrsb.w	r6, [r3]
   13610:	1c73      	adds	r3, r6, #1
   13612:	d012      	beq.n	1363a <sqrt+0x4a>
   13614:	4622      	mov	r2, r4
   13616:	462b      	mov	r3, r5
   13618:	4620      	mov	r0, r4
   1361a:	4629      	mov	r1, r5
   1361c:	f001 fcc8 	bl	14fb0 <__aeabi_dcmpun>
   13620:	4607      	mov	r7, r0
   13622:	b950      	cbnz	r0, 1363a <sqrt+0x4a>
   13624:	f04f 0800 	mov.w	r8, #0
   13628:	f04f 0900 	mov.w	r9, #0
   1362c:	4620      	mov	r0, r4
   1362e:	4629      	mov	r1, r5
   13630:	4642      	mov	r2, r8
   13632:	464b      	mov	r3, r9
   13634:	f7f9 f9ca 	bl	c9cc <__aeabi_dcmplt>
   13638:	b940      	cbnz	r0, 1364c <sqrt+0x5c>
   1363a:	eeb0 0a48 	vmov.f32	s0, s16
   1363e:	eef0 0a68 	vmov.f32	s1, s17
   13642:	b00b      	add	sp, #44	; 0x2c
   13644:	ecbd 8b02 	vpop	{d8}
   13648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1364c:	4b15      	ldr	r3, [pc, #84]	; (136a4 <sqrt+0xb4>)
   1364e:	9708      	str	r7, [sp, #32]
   13650:	2201      	movs	r2, #1
   13652:	e9cd 4504 	strd	r4, r5, [sp, #16]
   13656:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1365a:	e88d 000c 	stmia.w	sp, {r2, r3}
   1365e:	b196      	cbz	r6, 13686 <sqrt+0x96>
   13660:	4642      	mov	r2, r8
   13662:	464b      	mov	r3, r9
   13664:	4640      	mov	r0, r8
   13666:	4649      	mov	r1, r9
   13668:	f001 fbba 	bl	14de0 <__aeabi_ddiv>
   1366c:	2e02      	cmp	r6, #2
   1366e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   13672:	d10a      	bne.n	1368a <sqrt+0x9a>
   13674:	f001 fa84 	bl	14b80 <__errno>
   13678:	2321      	movs	r3, #33	; 0x21
   1367a:	6003      	str	r3, [r0, #0]
   1367c:	9b08      	ldr	r3, [sp, #32]
   1367e:	b953      	cbnz	r3, 13696 <sqrt+0xa6>
   13680:	ed9d 8b06 	vldr	d8, [sp, #24]
   13684:	e7d9      	b.n	1363a <sqrt+0x4a>
   13686:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1368a:	4668      	mov	r0, sp
   1368c:	f001 f9e0 	bl	14a50 <matherr>
   13690:	2800      	cmp	r0, #0
   13692:	d1f3      	bne.n	1367c <sqrt+0x8c>
   13694:	e7ee      	b.n	13674 <sqrt+0x84>
   13696:	f001 fa73 	bl	14b80 <__errno>
   1369a:	9b08      	ldr	r3, [sp, #32]
   1369c:	6003      	str	r3, [r0, #0]
   1369e:	e7ef      	b.n	13680 <sqrt+0x90>
   136a0:	10002fb4 	.word	0x10002fb4
   136a4:	00044fe8 	.word	0x00044fe8

000136a8 <__ieee754_rem_pio2>:
   136a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136ac:	ec53 2b10 	vmov	r2, r3, d0
   136b0:	499d      	ldr	r1, [pc, #628]	; (13928 <__ieee754_rem_pio2+0x280>)
   136b2:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   136b6:	428f      	cmp	r7, r1
   136b8:	b090      	sub	sp, #64	; 0x40
   136ba:	f340 8091 	ble.w	137e0 <__ieee754_rem_pio2+0x138>
   136be:	499b      	ldr	r1, [pc, #620]	; (1392c <__ieee754_rem_pio2+0x284>)
   136c0:	428f      	cmp	r7, r1
   136c2:	461c      	mov	r4, r3
   136c4:	4682      	mov	sl, r0
   136c6:	dc29      	bgt.n	1371c <__ieee754_rem_pio2+0x74>
   136c8:	2c00      	cmp	r4, #0
   136ca:	4619      	mov	r1, r3
   136cc:	ee10 0a10 	vmov	r0, s0
   136d0:	a38b      	add	r3, pc, #556	; (adr r3, 13900 <__ieee754_rem_pio2+0x258>)
   136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   136d6:	f340 81b1 	ble.w	13a3c <__ieee754_rem_pio2+0x394>
   136da:	f7f8 ff63 	bl	c5a4 <__aeabi_dsub>
   136de:	4b94      	ldr	r3, [pc, #592]	; (13930 <__ieee754_rem_pio2+0x288>)
   136e0:	429f      	cmp	r7, r3
   136e2:	4604      	mov	r4, r0
   136e4:	460d      	mov	r5, r1
   136e6:	f000 8091 	beq.w	1380c <__ieee754_rem_pio2+0x164>
   136ea:	a387      	add	r3, pc, #540	; (adr r3, 13908 <__ieee754_rem_pio2+0x260>)
   136ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   136f0:	f7f8 ff58 	bl	c5a4 <__aeabi_dsub>
   136f4:	4602      	mov	r2, r0
   136f6:	460b      	mov	r3, r1
   136f8:	e9ca 2300 	strd	r2, r3, [sl]
   136fc:	4620      	mov	r0, r4
   136fe:	4629      	mov	r1, r5
   13700:	f7f8 ff50 	bl	c5a4 <__aeabi_dsub>
   13704:	a380      	add	r3, pc, #512	; (adr r3, 13908 <__ieee754_rem_pio2+0x260>)
   13706:	e9d3 2300 	ldrd	r2, r3, [r3]
   1370a:	f7f8 ff4b 	bl	c5a4 <__aeabi_dsub>
   1370e:	2501      	movs	r5, #1
   13710:	e9ca 0102 	strd	r0, r1, [sl, #8]
   13714:	4628      	mov	r0, r5
   13716:	b010      	add	sp, #64	; 0x40
   13718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1371c:	4985      	ldr	r1, [pc, #532]	; (13934 <__ieee754_rem_pio2+0x28c>)
   1371e:	428f      	cmp	r7, r1
   13720:	f340 8091 	ble.w	13846 <__ieee754_rem_pio2+0x19e>
   13724:	4984      	ldr	r1, [pc, #528]	; (13938 <__ieee754_rem_pio2+0x290>)
   13726:	428f      	cmp	r7, r1
   13728:	dc65      	bgt.n	137f6 <__ieee754_rem_pio2+0x14e>
   1372a:	153d      	asrs	r5, r7, #20
   1372c:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   13730:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
   13734:	4610      	mov	r0, r2
   13736:	4616      	mov	r6, r2
   13738:	460f      	mov	r7, r1
   1373a:	f001 fc4f 	bl	14fdc <__aeabi_d2iz>
   1373e:	f7f9 f87f 	bl	c840 <__aeabi_i2d>
   13742:	4680      	mov	r8, r0
   13744:	4689      	mov	r9, r1
   13746:	4642      	mov	r2, r8
   13748:	464b      	mov	r3, r9
   1374a:	4630      	mov	r0, r6
   1374c:	4639      	mov	r1, r7
   1374e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   13752:	f7f8 ff27 	bl	c5a4 <__aeabi_dsub>
   13756:	2200      	movs	r2, #0
   13758:	4b78      	ldr	r3, [pc, #480]	; (1393c <__ieee754_rem_pio2+0x294>)
   1375a:	f001 fa17 	bl	14b8c <__aeabi_dmul>
   1375e:	4689      	mov	r9, r1
   13760:	4680      	mov	r8, r0
   13762:	f001 fc3b 	bl	14fdc <__aeabi_d2iz>
   13766:	f7f9 f86b 	bl	c840 <__aeabi_i2d>
   1376a:	4606      	mov	r6, r0
   1376c:	460f      	mov	r7, r1
   1376e:	4632      	mov	r2, r6
   13770:	463b      	mov	r3, r7
   13772:	4640      	mov	r0, r8
   13774:	4649      	mov	r1, r9
   13776:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   1377a:	f7f8 ff13 	bl	c5a4 <__aeabi_dsub>
   1377e:	2200      	movs	r2, #0
   13780:	4b6e      	ldr	r3, [pc, #440]	; (1393c <__ieee754_rem_pio2+0x294>)
   13782:	f001 fa03 	bl	14b8c <__aeabi_dmul>
   13786:	2200      	movs	r2, #0
   13788:	2300      	movs	r3, #0
   1378a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1378e:	f7f9 f913 	bl	c9b8 <__aeabi_dcmpeq>
   13792:	2800      	cmp	r0, #0
   13794:	f000 8170 	beq.w	13a78 <__ieee754_rem_pio2+0x3d0>
   13798:	2300      	movs	r3, #0
   1379a:	4630      	mov	r0, r6
   1379c:	4639      	mov	r1, r7
   1379e:	2200      	movs	r2, #0
   137a0:	f7f9 f90a 	bl	c9b8 <__aeabi_dcmpeq>
   137a4:	2800      	cmp	r0, #0
   137a6:	bf14      	ite	ne
   137a8:	2301      	movne	r3, #1
   137aa:	2302      	moveq	r3, #2
   137ac:	4a64      	ldr	r2, [pc, #400]	; (13940 <__ieee754_rem_pio2+0x298>)
   137ae:	9201      	str	r2, [sp, #4]
   137b0:	2102      	movs	r1, #2
   137b2:	462a      	mov	r2, r5
   137b4:	9100      	str	r1, [sp, #0]
   137b6:	a80a      	add	r0, sp, #40	; 0x28
   137b8:	4651      	mov	r1, sl
   137ba:	f000 fbad 	bl	13f18 <__kernel_rem_pio2>
   137be:	2c00      	cmp	r4, #0
   137c0:	4605      	mov	r5, r0
   137c2:	da14      	bge.n	137ee <__ieee754_rem_pio2+0x146>
   137c4:	f8da 2004 	ldr.w	r2, [sl, #4]
   137c8:	f8da 300c 	ldr.w	r3, [sl, #12]
   137cc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   137d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   137d4:	4245      	negs	r5, r0
   137d6:	f8ca 2004 	str.w	r2, [sl, #4]
   137da:	f8ca 300c 	str.w	r3, [sl, #12]
   137de:	e006      	b.n	137ee <__ieee754_rem_pio2+0x146>
   137e0:	ed80 0b00 	vstr	d0, [r0]
   137e4:	2500      	movs	r5, #0
   137e6:	2400      	movs	r4, #0
   137e8:	e9c0 4502 	strd	r4, r5, [r0, #8]
   137ec:	2500      	movs	r5, #0
   137ee:	4628      	mov	r0, r5
   137f0:	b010      	add	sp, #64	; 0x40
   137f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   137f6:	ee10 0a10 	vmov	r0, s0
   137fa:	4619      	mov	r1, r3
   137fc:	f7f8 fed2 	bl	c5a4 <__aeabi_dsub>
   13800:	2500      	movs	r5, #0
   13802:	e9ca 0102 	strd	r0, r1, [sl, #8]
   13806:	e9ca 0100 	strd	r0, r1, [sl]
   1380a:	e7f0      	b.n	137ee <__ieee754_rem_pio2+0x146>
   1380c:	a340      	add	r3, pc, #256	; (adr r3, 13910 <__ieee754_rem_pio2+0x268>)
   1380e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13812:	f7f8 fec7 	bl	c5a4 <__aeabi_dsub>
   13816:	a340      	add	r3, pc, #256	; (adr r3, 13918 <__ieee754_rem_pio2+0x270>)
   13818:	e9d3 2300 	ldrd	r2, r3, [r3]
   1381c:	460d      	mov	r5, r1
   1381e:	4604      	mov	r4, r0
   13820:	f7f8 fec0 	bl	c5a4 <__aeabi_dsub>
   13824:	4602      	mov	r2, r0
   13826:	460b      	mov	r3, r1
   13828:	e9ca 2300 	strd	r2, r3, [sl]
   1382c:	4629      	mov	r1, r5
   1382e:	4620      	mov	r0, r4
   13830:	f7f8 feb8 	bl	c5a4 <__aeabi_dsub>
   13834:	a338      	add	r3, pc, #224	; (adr r3, 13918 <__ieee754_rem_pio2+0x270>)
   13836:	e9d3 2300 	ldrd	r2, r3, [r3]
   1383a:	f7f8 feb3 	bl	c5a4 <__aeabi_dsub>
   1383e:	2501      	movs	r5, #1
   13840:	e9ca 0102 	strd	r0, r1, [sl, #8]
   13844:	e7d3      	b.n	137ee <__ieee754_rem_pio2+0x146>
   13846:	f001 f869 	bl	1491c <fabs>
   1384a:	ec59 8b10 	vmov	r8, r9, d0
   1384e:	ee10 0a10 	vmov	r0, s0
   13852:	a333      	add	r3, pc, #204	; (adr r3, 13920 <__ieee754_rem_pio2+0x278>)
   13854:	e9d3 2300 	ldrd	r2, r3, [r3]
   13858:	4649      	mov	r1, r9
   1385a:	f001 f997 	bl	14b8c <__aeabi_dmul>
   1385e:	2200      	movs	r2, #0
   13860:	4b38      	ldr	r3, [pc, #224]	; (13944 <__ieee754_rem_pio2+0x29c>)
   13862:	f7f8 fea1 	bl	c5a8 <__adddf3>
   13866:	f001 fbb9 	bl	14fdc <__aeabi_d2iz>
   1386a:	4605      	mov	r5, r0
   1386c:	f7f8 ffe8 	bl	c840 <__aeabi_i2d>
   13870:	a323      	add	r3, pc, #140	; (adr r3, 13900 <__ieee754_rem_pio2+0x258>)
   13872:	e9d3 2300 	ldrd	r2, r3, [r3]
   13876:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1387a:	f001 f987 	bl	14b8c <__aeabi_dmul>
   1387e:	4602      	mov	r2, r0
   13880:	460b      	mov	r3, r1
   13882:	4640      	mov	r0, r8
   13884:	4649      	mov	r1, r9
   13886:	f7f8 fe8d 	bl	c5a4 <__aeabi_dsub>
   1388a:	a31f      	add	r3, pc, #124	; (adr r3, 13908 <__ieee754_rem_pio2+0x260>)
   1388c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13890:	e9cd 0102 	strd	r0, r1, [sp, #8]
   13894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13898:	f001 f978 	bl	14b8c <__aeabi_dmul>
   1389c:	2d1f      	cmp	r5, #31
   1389e:	4680      	mov	r8, r0
   138a0:	4689      	mov	r9, r1
   138a2:	e9cd 8904 	strd	r8, r9, [sp, #16]
   138a6:	dc51      	bgt.n	1394c <__ieee754_rem_pio2+0x2a4>
   138a8:	4b27      	ldr	r3, [pc, #156]	; (13948 <__ieee754_rem_pio2+0x2a0>)
   138aa:	1e6a      	subs	r2, r5, #1
   138ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   138b0:	429f      	cmp	r7, r3
   138b2:	d04b      	beq.n	1394c <__ieee754_rem_pio2+0x2a4>
   138b4:	4602      	mov	r2, r0
   138b6:	460b      	mov	r3, r1
   138b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   138bc:	f7f8 fe72 	bl	c5a4 <__aeabi_dsub>
   138c0:	4680      	mov	r8, r0
   138c2:	4689      	mov	r9, r1
   138c4:	e9ca 8900 	strd	r8, r9, [sl]
   138c8:	4642      	mov	r2, r8
   138ca:	464b      	mov	r3, r9
   138cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   138d0:	f7f8 fe68 	bl	c5a4 <__aeabi_dsub>
   138d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   138d8:	f7f8 fe64 	bl	c5a4 <__aeabi_dsub>
   138dc:	2c00      	cmp	r4, #0
   138de:	e9ca 0102 	strd	r0, r1, [sl, #8]
   138e2:	da84      	bge.n	137ee <__ieee754_rem_pio2+0x146>
   138e4:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
   138e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   138ec:	426d      	negs	r5, r5
   138ee:	f8ca 8000 	str.w	r8, [sl]
   138f2:	f8ca 4004 	str.w	r4, [sl, #4]
   138f6:	f8ca 0008 	str.w	r0, [sl, #8]
   138fa:	f8ca 300c 	str.w	r3, [sl, #12]
   138fe:	e776      	b.n	137ee <__ieee754_rem_pio2+0x146>
   13900:	54400000 	.word	0x54400000
   13904:	3ff921fb 	.word	0x3ff921fb
   13908:	1a626331 	.word	0x1a626331
   1390c:	3dd0b461 	.word	0x3dd0b461
   13910:	1a600000 	.word	0x1a600000
   13914:	3dd0b461 	.word	0x3dd0b461
   13918:	2e037073 	.word	0x2e037073
   1391c:	3ba3198a 	.word	0x3ba3198a
   13920:	6dc9c883 	.word	0x6dc9c883
   13924:	3fe45f30 	.word	0x3fe45f30
   13928:	3fe921fb 	.word	0x3fe921fb
   1392c:	4002d97b 	.word	0x4002d97b
   13930:	3ff921fb 	.word	0x3ff921fb
   13934:	413921fb 	.word	0x413921fb
   13938:	7fefffff 	.word	0x7fefffff
   1393c:	41700000 	.word	0x41700000
   13940:	0003c5b4 	.word	0x0003c5b4
   13944:	3fe00000 	.word	0x3fe00000
   13948:	0003c534 	.word	0x0003c534
   1394c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13954:	f7f8 fe26 	bl	c5a4 <__aeabi_dsub>
   13958:	153f      	asrs	r7, r7, #20
   1395a:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1395e:	1afb      	subs	r3, r7, r3
   13960:	4680      	mov	r8, r0
   13962:	4689      	mov	r9, r1
   13964:	2b10      	cmp	r3, #16
   13966:	e9ca 8900 	strd	r8, r9, [sl]
   1396a:	ddad      	ble.n	138c8 <__ieee754_rem_pio2+0x220>
   1396c:	a358      	add	r3, pc, #352	; (adr r3, 13ad0 <__ieee754_rem_pio2+0x428>)
   1396e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13976:	f001 f909 	bl	14b8c <__aeabi_dmul>
   1397a:	4680      	mov	r8, r0
   1397c:	4689      	mov	r9, r1
   1397e:	4602      	mov	r2, r0
   13980:	460b      	mov	r3, r1
   13982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13986:	f7f8 fe0d 	bl	c5a4 <__aeabi_dsub>
   1398a:	4602      	mov	r2, r0
   1398c:	460b      	mov	r3, r1
   1398e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13992:	e9cd 2308 	strd	r2, r3, [sp, #32]
   13996:	f7f8 fe05 	bl	c5a4 <__aeabi_dsub>
   1399a:	4642      	mov	r2, r8
   1399c:	464b      	mov	r3, r9
   1399e:	f7f8 fe01 	bl	c5a4 <__aeabi_dsub>
   139a2:	a34d      	add	r3, pc, #308	; (adr r3, 13ad8 <__ieee754_rem_pio2+0x430>)
   139a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   139a8:	4680      	mov	r8, r0
   139aa:	4689      	mov	r9, r1
   139ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   139b0:	f001 f8ec 	bl	14b8c <__aeabi_dmul>
   139b4:	4642      	mov	r2, r8
   139b6:	464b      	mov	r3, r9
   139b8:	f7f8 fdf4 	bl	c5a4 <__aeabi_dsub>
   139bc:	460b      	mov	r3, r1
   139be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   139c2:	4602      	mov	r2, r0
   139c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   139c8:	f7f8 fdec 	bl	c5a4 <__aeabi_dsub>
   139cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
   139d0:	1aff      	subs	r7, r7, r3
   139d2:	4680      	mov	r8, r0
   139d4:	4689      	mov	r9, r1
   139d6:	2f31      	cmp	r7, #49	; 0x31
   139d8:	e9ca 8900 	strd	r8, r9, [sl]
   139dc:	dd6c      	ble.n	13ab8 <__ieee754_rem_pio2+0x410>
   139de:	a341      	add	r3, pc, #260	; (adr r3, 13ae4 <__ieee754_rem_pio2+0x43c>)
   139e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   139e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   139e8:	f001 f8d0 	bl	14b8c <__aeabi_dmul>
   139ec:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   139f0:	4606      	mov	r6, r0
   139f2:	460f      	mov	r7, r1
   139f4:	4602      	mov	r2, r0
   139f6:	460b      	mov	r3, r1
   139f8:	4640      	mov	r0, r8
   139fa:	4649      	mov	r1, r9
   139fc:	f7f8 fdd2 	bl	c5a4 <__aeabi_dsub>
   13a00:	4602      	mov	r2, r0
   13a02:	460b      	mov	r3, r1
   13a04:	4640      	mov	r0, r8
   13a06:	4649      	mov	r1, r9
   13a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
   13a0c:	f7f8 fdca 	bl	c5a4 <__aeabi_dsub>
   13a10:	4632      	mov	r2, r6
   13a12:	463b      	mov	r3, r7
   13a14:	f7f8 fdc6 	bl	c5a4 <__aeabi_dsub>
   13a18:	a334      	add	r3, pc, #208	; (adr r3, 13aec <__ieee754_rem_pio2+0x444>)
   13a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a1e:	4606      	mov	r6, r0
   13a20:	460f      	mov	r7, r1
   13a22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13a26:	f001 f8b1 	bl	14b8c <__aeabi_dmul>
   13a2a:	4632      	mov	r2, r6
   13a2c:	463b      	mov	r3, r7
   13a2e:	f7f8 fdb9 	bl	c5a4 <__aeabi_dsub>
   13a32:	4602      	mov	r2, r0
   13a34:	460b      	mov	r3, r1
   13a36:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13a3a:	e73d      	b.n	138b8 <__ieee754_rem_pio2+0x210>
   13a3c:	f7f8 fdb4 	bl	c5a8 <__adddf3>
   13a40:	4b27      	ldr	r3, [pc, #156]	; (13ae0 <__ieee754_rem_pio2+0x438>)
   13a42:	429f      	cmp	r7, r3
   13a44:	4604      	mov	r4, r0
   13a46:	460d      	mov	r5, r1
   13a48:	d018      	beq.n	13a7c <__ieee754_rem_pio2+0x3d4>
   13a4a:	a31f      	add	r3, pc, #124	; (adr r3, 13ac8 <__ieee754_rem_pio2+0x420>)
   13a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a50:	f7f8 fdaa 	bl	c5a8 <__adddf3>
   13a54:	4602      	mov	r2, r0
   13a56:	460b      	mov	r3, r1
   13a58:	e9ca 2300 	strd	r2, r3, [sl]
   13a5c:	4629      	mov	r1, r5
   13a5e:	4620      	mov	r0, r4
   13a60:	f7f8 fda0 	bl	c5a4 <__aeabi_dsub>
   13a64:	a318      	add	r3, pc, #96	; (adr r3, 13ac8 <__ieee754_rem_pio2+0x420>)
   13a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a6a:	f7f8 fd9d 	bl	c5a8 <__adddf3>
   13a6e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13a72:	e9ca 0102 	strd	r0, r1, [sl, #8]
   13a76:	e6ba      	b.n	137ee <__ieee754_rem_pio2+0x146>
   13a78:	2303      	movs	r3, #3
   13a7a:	e697      	b.n	137ac <__ieee754_rem_pio2+0x104>
   13a7c:	a314      	add	r3, pc, #80	; (adr r3, 13ad0 <__ieee754_rem_pio2+0x428>)
   13a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a82:	f7f8 fd91 	bl	c5a8 <__adddf3>
   13a86:	a314      	add	r3, pc, #80	; (adr r3, 13ad8 <__ieee754_rem_pio2+0x430>)
   13a88:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a8c:	460d      	mov	r5, r1
   13a8e:	4604      	mov	r4, r0
   13a90:	f7f8 fd8a 	bl	c5a8 <__adddf3>
   13a94:	4602      	mov	r2, r0
   13a96:	460b      	mov	r3, r1
   13a98:	e9ca 2300 	strd	r2, r3, [sl]
   13a9c:	4629      	mov	r1, r5
   13a9e:	4620      	mov	r0, r4
   13aa0:	f7f8 fd80 	bl	c5a4 <__aeabi_dsub>
   13aa4:	a30c      	add	r3, pc, #48	; (adr r3, 13ad8 <__ieee754_rem_pio2+0x430>)
   13aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aaa:	f7f8 fd7d 	bl	c5a8 <__adddf3>
   13aae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13ab2:	e9ca 0102 	strd	r0, r1, [sl, #8]
   13ab6:	e69a      	b.n	137ee <__ieee754_rem_pio2+0x146>
   13ab8:	ed9d 7b08 	vldr	d7, [sp, #32]
   13abc:	ed8d 7b02 	vstr	d7, [sp, #8]
   13ac0:	e702      	b.n	138c8 <__ieee754_rem_pio2+0x220>
   13ac2:	bf00      	nop
   13ac4:	f3af 8000 	nop.w
   13ac8:	1a626331 	.word	0x1a626331
   13acc:	3dd0b461 	.word	0x3dd0b461
   13ad0:	1a600000 	.word	0x1a600000
   13ad4:	3dd0b461 	.word	0x3dd0b461
   13ad8:	2e037073 	.word	0x2e037073
   13adc:	3ba3198a 	.word	0x3ba3198a
   13ae0:	3ff921fb 	.word	0x3ff921fb
   13ae4:	2e000000 	.word	0x2e000000
   13ae8:	3ba3198a 	.word	0x3ba3198a
   13aec:	252049c1 	.word	0x252049c1
   13af0:	397b839a 	.word	0x397b839a

00013af4 <__ieee754_sqrt>:
   13af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13af8:	4863      	ldr	r0, [pc, #396]	; (13c88 <__ieee754_sqrt+0x194>)
   13afa:	ec55 4b10 	vmov	r4, r5, d0
   13afe:	43a8      	bics	r0, r5
   13b00:	f000 8095 	beq.w	13c2e <__ieee754_sqrt+0x13a>
   13b04:	2d00      	cmp	r5, #0
   13b06:	462b      	mov	r3, r5
   13b08:	ee10 2a10 	vmov	r2, s0
   13b0c:	dd70      	ble.n	13bf0 <__ieee754_sqrt+0xfc>
   13b0e:	152f      	asrs	r7, r5, #20
   13b10:	d07d      	beq.n	13c0e <__ieee754_sqrt+0x11a>
   13b12:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   13b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
   13b1a:	07f9      	lsls	r1, r7, #31
   13b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13b20:	d461      	bmi.n	13be6 <__ieee754_sqrt+0xf2>
   13b22:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   13b26:	2600      	movs	r6, #0
   13b28:	440b      	add	r3, r1
   13b2a:	107f      	asrs	r7, r7, #1
   13b2c:	0052      	lsls	r2, r2, #1
   13b2e:	46b6      	mov	lr, r6
   13b30:	2016      	movs	r0, #22
   13b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   13b36:	eb0e 0401 	add.w	r4, lr, r1
   13b3a:	429c      	cmp	r4, r3
   13b3c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   13b40:	ea4f 0242 	mov.w	r2, r2, lsl #1
   13b44:	dc03      	bgt.n	13b4e <__ieee754_sqrt+0x5a>
   13b46:	1b1b      	subs	r3, r3, r4
   13b48:	eb04 0e01 	add.w	lr, r4, r1
   13b4c:	440e      	add	r6, r1
   13b4e:	3801      	subs	r0, #1
   13b50:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   13b54:	ea4f 0151 	mov.w	r1, r1, lsr #1
   13b58:	d1ed      	bne.n	13b36 <__ieee754_sqrt+0x42>
   13b5a:	4684      	mov	ip, r0
   13b5c:	2420      	movs	r4, #32
   13b5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   13b62:	e009      	b.n	13b78 <__ieee754_sqrt+0x84>
   13b64:	d020      	beq.n	13ba8 <__ieee754_sqrt+0xb4>
   13b66:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   13b6a:	3c01      	subs	r4, #1
   13b6c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   13b70:	442b      	add	r3, r5
   13b72:	ea4f 0242 	mov.w	r2, r2, lsl #1
   13b76:	d020      	beq.n	13bba <__ieee754_sqrt+0xc6>
   13b78:	4573      	cmp	r3, lr
   13b7a:	eb01 050c 	add.w	r5, r1, ip
   13b7e:	ddf1      	ble.n	13b64 <__ieee754_sqrt+0x70>
   13b80:	2d00      	cmp	r5, #0
   13b82:	eb05 0c01 	add.w	ip, r5, r1
   13b86:	db09      	blt.n	13b9c <__ieee754_sqrt+0xa8>
   13b88:	46f0      	mov	r8, lr
   13b8a:	4295      	cmp	r5, r2
   13b8c:	eba3 030e 	sub.w	r3, r3, lr
   13b90:	d900      	bls.n	13b94 <__ieee754_sqrt+0xa0>
   13b92:	3b01      	subs	r3, #1
   13b94:	1b52      	subs	r2, r2, r5
   13b96:	4408      	add	r0, r1
   13b98:	46c6      	mov	lr, r8
   13b9a:	e7e4      	b.n	13b66 <__ieee754_sqrt+0x72>
   13b9c:	f1bc 0f00 	cmp.w	ip, #0
   13ba0:	dbf2      	blt.n	13b88 <__ieee754_sqrt+0x94>
   13ba2:	f10e 0801 	add.w	r8, lr, #1
   13ba6:	e7f0      	b.n	13b8a <__ieee754_sqrt+0x96>
   13ba8:	4295      	cmp	r5, r2
   13baa:	d8dc      	bhi.n	13b66 <__ieee754_sqrt+0x72>
   13bac:	2d00      	cmp	r5, #0
   13bae:	eb05 0c01 	add.w	ip, r5, r1
   13bb2:	db4e      	blt.n	13c52 <__ieee754_sqrt+0x15e>
   13bb4:	4698      	mov	r8, r3
   13bb6:	2300      	movs	r3, #0
   13bb8:	e7ec      	b.n	13b94 <__ieee754_sqrt+0xa0>
   13bba:	4313      	orrs	r3, r2
   13bbc:	d002      	beq.n	13bc4 <__ieee754_sqrt+0xd0>
   13bbe:	1c42      	adds	r2, r0, #1
   13bc0:	d04b      	beq.n	13c5a <__ieee754_sqrt+0x166>
   13bc2:	3001      	adds	r0, #1
   13bc4:	0840      	lsrs	r0, r0, #1
   13bc6:	1071      	asrs	r1, r6, #1
   13bc8:	07f3      	lsls	r3, r6, #31
   13bca:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   13bce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   13bd2:	bf48      	it	mi
   13bd4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   13bd8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   13bdc:	4602      	mov	r2, r0
   13bde:	ec43 2b10 	vmov	d0, r2, r3
   13be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13be6:	005b      	lsls	r3, r3, #1
   13be8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   13bec:	0052      	lsls	r2, r2, #1
   13bee:	e798      	b.n	13b22 <__ieee754_sqrt+0x2e>
   13bf0:	ee10 1a10 	vmov	r1, s0
   13bf4:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
   13bf8:	4301      	orrs	r1, r0
   13bfa:	d028      	beq.n	13c4e <__ieee754_sqrt+0x15a>
   13bfc:	bbad      	cbnz	r5, 13c6a <__ieee754_sqrt+0x176>
   13bfe:	462f      	mov	r7, r5
   13c00:	0ad3      	lsrs	r3, r2, #11
   13c02:	3f15      	subs	r7, #21
   13c04:	0552      	lsls	r2, r2, #21
   13c06:	2b00      	cmp	r3, #0
   13c08:	d0fa      	beq.n	13c00 <__ieee754_sqrt+0x10c>
   13c0a:	02de      	lsls	r6, r3, #11
   13c0c:	d428      	bmi.n	13c60 <__ieee754_sqrt+0x16c>
   13c0e:	2400      	movs	r4, #0
   13c10:	e000      	b.n	13c14 <__ieee754_sqrt+0x120>
   13c12:	4604      	mov	r4, r0
   13c14:	005b      	lsls	r3, r3, #1
   13c16:	02dd      	lsls	r5, r3, #11
   13c18:	f104 0001 	add.w	r0, r4, #1
   13c1c:	d5f9      	bpl.n	13c12 <__ieee754_sqrt+0x11e>
   13c1e:	f1c0 0120 	rsb	r1, r0, #32
   13c22:	fa22 f101 	lsr.w	r1, r2, r1
   13c26:	430b      	orrs	r3, r1
   13c28:	1b3f      	subs	r7, r7, r4
   13c2a:	4082      	lsls	r2, r0
   13c2c:	e771      	b.n	13b12 <__ieee754_sqrt+0x1e>
   13c2e:	ee10 2a10 	vmov	r2, s0
   13c32:	462b      	mov	r3, r5
   13c34:	ee10 0a10 	vmov	r0, s0
   13c38:	4629      	mov	r1, r5
   13c3a:	f000 ffa7 	bl	14b8c <__aeabi_dmul>
   13c3e:	4622      	mov	r2, r4
   13c40:	462b      	mov	r3, r5
   13c42:	f7f8 fcb1 	bl	c5a8 <__adddf3>
   13c46:	ec41 0b10 	vmov	d0, r0, r1
   13c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c52:	f1bc 0f00 	cmp.w	ip, #0
   13c56:	daa4      	bge.n	13ba2 <__ieee754_sqrt+0xae>
   13c58:	e7ac      	b.n	13bb4 <__ieee754_sqrt+0xc0>
   13c5a:	3601      	adds	r6, #1
   13c5c:	4620      	mov	r0, r4
   13c5e:	e7b2      	b.n	13bc6 <__ieee754_sqrt+0xd2>
   13c60:	2000      	movs	r0, #0
   13c62:	2120      	movs	r1, #32
   13c64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13c68:	e7db      	b.n	13c22 <__ieee754_sqrt+0x12e>
   13c6a:	ee10 2a10 	vmov	r2, s0
   13c6e:	462b      	mov	r3, r5
   13c70:	4620      	mov	r0, r4
   13c72:	4629      	mov	r1, r5
   13c74:	f7f8 fc96 	bl	c5a4 <__aeabi_dsub>
   13c78:	4602      	mov	r2, r0
   13c7a:	460b      	mov	r3, r1
   13c7c:	f001 f8b0 	bl	14de0 <__aeabi_ddiv>
   13c80:	ec41 0b10 	vmov	d0, r0, r1
   13c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c88:	7ff00000 	.word	0x7ff00000
   13c8c:	00000000 	.word	0x00000000

00013c90 <__kernel_cos>:
   13c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c94:	ec57 6b10 	vmov	r6, r7, d0
   13c98:	ed2d 8b02 	vpush	{d8}
   13c9c:	eeb0 8a41 	vmov.f32	s16, s2
   13ca0:	eef0 8a61 	vmov.f32	s17, s3
   13ca4:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   13ca8:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   13cac:	b083      	sub	sp, #12
   13cae:	da72      	bge.n	13d96 <__kernel_cos+0x106>
   13cb0:	ee10 0a10 	vmov	r0, s0
   13cb4:	4639      	mov	r1, r7
   13cb6:	f001 f991 	bl	14fdc <__aeabi_d2iz>
   13cba:	2800      	cmp	r0, #0
   13cbc:	f000 80f6 	beq.w	13eac <__kernel_cos+0x21c>
   13cc0:	4632      	mov	r2, r6
   13cc2:	463b      	mov	r3, r7
   13cc4:	4630      	mov	r0, r6
   13cc6:	4639      	mov	r1, r7
   13cc8:	f000 ff60 	bl	14b8c <__aeabi_dmul>
   13ccc:	a37c      	add	r3, pc, #496	; (adr r3, 13ec0 <__kernel_cos+0x230>)
   13cce:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cd2:	4604      	mov	r4, r0
   13cd4:	460d      	mov	r5, r1
   13cd6:	f000 ff59 	bl	14b8c <__aeabi_dmul>
   13cda:	a37b      	add	r3, pc, #492	; (adr r3, 13ec8 <__kernel_cos+0x238>)
   13cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ce0:	f7f8 fc62 	bl	c5a8 <__adddf3>
   13ce4:	4622      	mov	r2, r4
   13ce6:	462b      	mov	r3, r5
   13ce8:	f000 ff50 	bl	14b8c <__aeabi_dmul>
   13cec:	a378      	add	r3, pc, #480	; (adr r3, 13ed0 <__kernel_cos+0x240>)
   13cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cf2:	f7f8 fc57 	bl	c5a4 <__aeabi_dsub>
   13cf6:	4622      	mov	r2, r4
   13cf8:	462b      	mov	r3, r5
   13cfa:	f000 ff47 	bl	14b8c <__aeabi_dmul>
   13cfe:	a376      	add	r3, pc, #472	; (adr r3, 13ed8 <__kernel_cos+0x248>)
   13d00:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d04:	f7f8 fc50 	bl	c5a8 <__adddf3>
   13d08:	4622      	mov	r2, r4
   13d0a:	462b      	mov	r3, r5
   13d0c:	f000 ff3e 	bl	14b8c <__aeabi_dmul>
   13d10:	a373      	add	r3, pc, #460	; (adr r3, 13ee0 <__kernel_cos+0x250>)
   13d12:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d16:	f7f8 fc45 	bl	c5a4 <__aeabi_dsub>
   13d1a:	4622      	mov	r2, r4
   13d1c:	462b      	mov	r3, r5
   13d1e:	f000 ff35 	bl	14b8c <__aeabi_dmul>
   13d22:	a371      	add	r3, pc, #452	; (adr r3, 13ee8 <__kernel_cos+0x258>)
   13d24:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d28:	f7f8 fc3e 	bl	c5a8 <__adddf3>
   13d2c:	4622      	mov	r2, r4
   13d2e:	462b      	mov	r3, r5
   13d30:	f000 ff2c 	bl	14b8c <__aeabi_dmul>
   13d34:	4682      	mov	sl, r0
   13d36:	468b      	mov	fp, r1
   13d38:	2200      	movs	r2, #0
   13d3a:	4b71      	ldr	r3, [pc, #452]	; (13f00 <__kernel_cos+0x270>)
   13d3c:	4620      	mov	r0, r4
   13d3e:	4629      	mov	r1, r5
   13d40:	f000 ff24 	bl	14b8c <__aeabi_dmul>
   13d44:	4652      	mov	r2, sl
   13d46:	4680      	mov	r8, r0
   13d48:	4689      	mov	r9, r1
   13d4a:	465b      	mov	r3, fp
   13d4c:	4620      	mov	r0, r4
   13d4e:	4629      	mov	r1, r5
   13d50:	f000 ff1c 	bl	14b8c <__aeabi_dmul>
   13d54:	ec53 2b18 	vmov	r2, r3, d8
   13d58:	4604      	mov	r4, r0
   13d5a:	460d      	mov	r5, r1
   13d5c:	4630      	mov	r0, r6
   13d5e:	4639      	mov	r1, r7
   13d60:	f000 ff14 	bl	14b8c <__aeabi_dmul>
   13d64:	4602      	mov	r2, r0
   13d66:	460b      	mov	r3, r1
   13d68:	4620      	mov	r0, r4
   13d6a:	4629      	mov	r1, r5
   13d6c:	f7f8 fc1a 	bl	c5a4 <__aeabi_dsub>
   13d70:	4602      	mov	r2, r0
   13d72:	460b      	mov	r3, r1
   13d74:	4640      	mov	r0, r8
   13d76:	4649      	mov	r1, r9
   13d78:	f7f8 fc14 	bl	c5a4 <__aeabi_dsub>
   13d7c:	4602      	mov	r2, r0
   13d7e:	460b      	mov	r3, r1
   13d80:	2000      	movs	r0, #0
   13d82:	4960      	ldr	r1, [pc, #384]	; (13f04 <__kernel_cos+0x274>)
   13d84:	f7f8 fc0e 	bl	c5a4 <__aeabi_dsub>
   13d88:	ec41 0b10 	vmov	d0, r0, r1
   13d8c:	b003      	add	sp, #12
   13d8e:	ecbd 8b02 	vpop	{d8}
   13d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d96:	ee10 2a10 	vmov	r2, s0
   13d9a:	ee10 0a10 	vmov	r0, s0
   13d9e:	463b      	mov	r3, r7
   13da0:	4639      	mov	r1, r7
   13da2:	f000 fef3 	bl	14b8c <__aeabi_dmul>
   13da6:	a346      	add	r3, pc, #280	; (adr r3, 13ec0 <__kernel_cos+0x230>)
   13da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dac:	4604      	mov	r4, r0
   13dae:	460d      	mov	r5, r1
   13db0:	f000 feec 	bl	14b8c <__aeabi_dmul>
   13db4:	a344      	add	r3, pc, #272	; (adr r3, 13ec8 <__kernel_cos+0x238>)
   13db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dba:	f7f8 fbf5 	bl	c5a8 <__adddf3>
   13dbe:	4622      	mov	r2, r4
   13dc0:	462b      	mov	r3, r5
   13dc2:	f000 fee3 	bl	14b8c <__aeabi_dmul>
   13dc6:	a342      	add	r3, pc, #264	; (adr r3, 13ed0 <__kernel_cos+0x240>)
   13dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dcc:	f7f8 fbea 	bl	c5a4 <__aeabi_dsub>
   13dd0:	4622      	mov	r2, r4
   13dd2:	462b      	mov	r3, r5
   13dd4:	f000 feda 	bl	14b8c <__aeabi_dmul>
   13dd8:	a33f      	add	r3, pc, #252	; (adr r3, 13ed8 <__kernel_cos+0x248>)
   13dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dde:	f7f8 fbe3 	bl	c5a8 <__adddf3>
   13de2:	4622      	mov	r2, r4
   13de4:	462b      	mov	r3, r5
   13de6:	f000 fed1 	bl	14b8c <__aeabi_dmul>
   13dea:	a33d      	add	r3, pc, #244	; (adr r3, 13ee0 <__kernel_cos+0x250>)
   13dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   13df0:	f7f8 fbd8 	bl	c5a4 <__aeabi_dsub>
   13df4:	4622      	mov	r2, r4
   13df6:	462b      	mov	r3, r5
   13df8:	f000 fec8 	bl	14b8c <__aeabi_dmul>
   13dfc:	a33a      	add	r3, pc, #232	; (adr r3, 13ee8 <__kernel_cos+0x258>)
   13dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e02:	f7f8 fbd1 	bl	c5a8 <__adddf3>
   13e06:	462b      	mov	r3, r5
   13e08:	4622      	mov	r2, r4
   13e0a:	f000 febf 	bl	14b8c <__aeabi_dmul>
   13e0e:	4b3e      	ldr	r3, [pc, #248]	; (13f08 <__kernel_cos+0x278>)
   13e10:	4599      	cmp	r9, r3
   13e12:	4682      	mov	sl, r0
   13e14:	468b      	mov	fp, r1
   13e16:	dd8f      	ble.n	13d38 <__kernel_cos+0xa8>
   13e18:	4b3c      	ldr	r3, [pc, #240]	; (13f0c <__kernel_cos+0x27c>)
   13e1a:	4599      	cmp	r9, r3
   13e1c:	dc3d      	bgt.n	13e9a <__kernel_cos+0x20a>
   13e1e:	2200      	movs	r2, #0
   13e20:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   13e24:	2000      	movs	r0, #0
   13e26:	4937      	ldr	r1, [pc, #220]	; (13f04 <__kernel_cos+0x274>)
   13e28:	4690      	mov	r8, r2
   13e2a:	4699      	mov	r9, r3
   13e2c:	f7f8 fbba 	bl	c5a4 <__aeabi_dsub>
   13e30:	e9cd 0100 	strd	r0, r1, [sp]
   13e34:	2200      	movs	r2, #0
   13e36:	4b32      	ldr	r3, [pc, #200]	; (13f00 <__kernel_cos+0x270>)
   13e38:	4620      	mov	r0, r4
   13e3a:	4629      	mov	r1, r5
   13e3c:	f000 fea6 	bl	14b8c <__aeabi_dmul>
   13e40:	4642      	mov	r2, r8
   13e42:	464b      	mov	r3, r9
   13e44:	f7f8 fbae 	bl	c5a4 <__aeabi_dsub>
   13e48:	4652      	mov	r2, sl
   13e4a:	4680      	mov	r8, r0
   13e4c:	4689      	mov	r9, r1
   13e4e:	465b      	mov	r3, fp
   13e50:	4620      	mov	r0, r4
   13e52:	4629      	mov	r1, r5
   13e54:	f000 fe9a 	bl	14b8c <__aeabi_dmul>
   13e58:	ec53 2b18 	vmov	r2, r3, d8
   13e5c:	4604      	mov	r4, r0
   13e5e:	460d      	mov	r5, r1
   13e60:	4630      	mov	r0, r6
   13e62:	4639      	mov	r1, r7
   13e64:	f000 fe92 	bl	14b8c <__aeabi_dmul>
   13e68:	4602      	mov	r2, r0
   13e6a:	460b      	mov	r3, r1
   13e6c:	4620      	mov	r0, r4
   13e6e:	4629      	mov	r1, r5
   13e70:	f7f8 fb98 	bl	c5a4 <__aeabi_dsub>
   13e74:	4602      	mov	r2, r0
   13e76:	460b      	mov	r3, r1
   13e78:	4640      	mov	r0, r8
   13e7a:	4649      	mov	r1, r9
   13e7c:	f7f8 fb92 	bl	c5a4 <__aeabi_dsub>
   13e80:	4602      	mov	r2, r0
   13e82:	460b      	mov	r3, r1
   13e84:	e9dd 0100 	ldrd	r0, r1, [sp]
   13e88:	f7f8 fb8c 	bl	c5a4 <__aeabi_dsub>
   13e8c:	ec41 0b10 	vmov	d0, r0, r1
   13e90:	b003      	add	sp, #12
   13e92:	ecbd 8b02 	vpop	{d8}
   13e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e9a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 13ef0 <__kernel_cos+0x260>
   13e9e:	f04f 0800 	mov.w	r8, #0
   13ea2:	ed8d 7b00 	vstr	d7, [sp]
   13ea6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 13f10 <__kernel_cos+0x280>
   13eaa:	e7c3      	b.n	13e34 <__kernel_cos+0x1a4>
   13eac:	ed9f 0b12 	vldr	d0, [pc, #72]	; 13ef8 <__kernel_cos+0x268>
   13eb0:	b003      	add	sp, #12
   13eb2:	ecbd 8b02 	vpop	{d8}
   13eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eba:	bf00      	nop
   13ebc:	f3af 8000 	nop.w
   13ec0:	be8838d4 	.word	0xbe8838d4
   13ec4:	bda8fae9 	.word	0xbda8fae9
   13ec8:	bdb4b1c4 	.word	0xbdb4b1c4
   13ecc:	3e21ee9e 	.word	0x3e21ee9e
   13ed0:	809c52ad 	.word	0x809c52ad
   13ed4:	3e927e4f 	.word	0x3e927e4f
   13ed8:	19cb1590 	.word	0x19cb1590
   13edc:	3efa01a0 	.word	0x3efa01a0
   13ee0:	16c15177 	.word	0x16c15177
   13ee4:	3f56c16c 	.word	0x3f56c16c
   13ee8:	5555554c 	.word	0x5555554c
   13eec:	3fa55555 	.word	0x3fa55555
   13ef0:	00000000 	.word	0x00000000
   13ef4:	3fe70000 	.word	0x3fe70000
   13ef8:	00000000 	.word	0x00000000
   13efc:	3ff00000 	.word	0x3ff00000
   13f00:	3fe00000 	.word	0x3fe00000
   13f04:	3ff00000 	.word	0x3ff00000
   13f08:	3fd33332 	.word	0x3fd33332
   13f0c:	3fe90000 	.word	0x3fe90000
   13f10:	3fd20000 	.word	0x3fd20000
   13f14:	00000000 	.word	0x00000000

00013f18 <__kernel_rem_pio2>:
   13f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f1c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
   13f20:	4ca3      	ldr	r4, [pc, #652]	; (141b0 <__kernel_rem_pio2+0x298>)
   13f22:	9ea4      	ldr	r6, [sp, #656]	; 0x290
   13f24:	4da3      	ldr	r5, [pc, #652]	; (141b4 <__kernel_rem_pio2+0x29c>)
   13f26:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   13f2a:	9407      	str	r4, [sp, #28]
   13f2c:	4626      	mov	r6, r4
   13f2e:	1ed4      	subs	r4, r2, #3
   13f30:	fb85 7504 	smull	r7, r5, r5, r4
   13f34:	17e4      	asrs	r4, r4, #31
   13f36:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   13f3a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   13f3e:	461d      	mov	r5, r3
   13f40:	930a      	str	r3, [sp, #40]	; 0x28
   13f42:	1c63      	adds	r3, r4, #1
   13f44:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   13f48:	3d01      	subs	r5, #1
   13f4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13f4e:	9306      	str	r3, [sp, #24]
   13f50:	462b      	mov	r3, r5
   13f52:	940b      	str	r4, [sp, #44]	; 0x2c
   13f54:	9503      	str	r5, [sp, #12]
   13f56:	1b65      	subs	r5, r4, r5
   13f58:	18f4      	adds	r4, r6, r3
   13f5a:	9004      	str	r0, [sp, #16]
   13f5c:	9108      	str	r1, [sp, #32]
   13f5e:	d41a      	bmi.n	13f96 <__kernel_rem_pio2+0x7e>
   13f60:	442c      	add	r4, r5
   13f62:	2600      	movs	r6, #0
   13f64:	2700      	movs	r7, #0
   13f66:	3401      	adds	r4, #1
   13f68:	f10d 0888 	add.w	r8, sp, #136	; 0x88
   13f6c:	f8dd 9294 	ldr.w	r9, [sp, #660]	; 0x294
   13f70:	e008      	b.n	13f84 <__kernel_rem_pio2+0x6c>
   13f72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   13f76:	f7f8 fc63 	bl	c840 <__aeabi_i2d>
   13f7a:	3501      	adds	r5, #1
   13f7c:	42a5      	cmp	r5, r4
   13f7e:	e8e8 0102 	strd	r0, r1, [r8], #8
   13f82:	d008      	beq.n	13f96 <__kernel_rem_pio2+0x7e>
   13f84:	2d00      	cmp	r5, #0
   13f86:	daf4      	bge.n	13f72 <__kernel_rem_pio2+0x5a>
   13f88:	3501      	adds	r5, #1
   13f8a:	4630      	mov	r0, r6
   13f8c:	4639      	mov	r1, r7
   13f8e:	42a5      	cmp	r5, r4
   13f90:	e8e8 0102 	strd	r0, r1, [r8], #8
   13f94:	d1f6      	bne.n	13f84 <__kernel_rem_pio2+0x6c>
   13f96:	9b07      	ldr	r3, [sp, #28]
   13f98:	2b00      	cmp	r3, #0
   13f9a:	f2c0 83eb 	blt.w	14774 <__kernel_rem_pio2+0x85c>
   13f9e:	9b07      	ldr	r3, [sp, #28]
   13fa0:	f103 0b01 	add.w	fp, r3, #1
   13fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fa6:	a922      	add	r1, sp, #136	; 0x88
   13fa8:	00db      	lsls	r3, r3, #3
   13faa:	461a      	mov	r2, r3
   13fac:	eb01 0903 	add.w	r9, r1, r3
   13fb0:	9300      	str	r3, [sp, #0]
   13fb2:	9b04      	ldr	r3, [sp, #16]
   13fb4:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   13fb8:	4619      	mov	r1, r3
   13fba:	eb0a 0bcb 	add.w	fp, sl, fp, lsl #3
   13fbe:	eb01 0802 	add.w	r8, r1, r2
   13fc2:	9b03      	ldr	r3, [sp, #12]
   13fc4:	2b00      	cmp	r3, #0
   13fc6:	f2c0 8301 	blt.w	145cc <__kernel_rem_pio2+0x6b4>
   13fca:	9c04      	ldr	r4, [sp, #16]
   13fcc:	464d      	mov	r5, r9
   13fce:	2600      	movs	r6, #0
   13fd0:	2700      	movs	r7, #0
   13fd2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   13fd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   13fda:	f000 fdd7 	bl	14b8c <__aeabi_dmul>
   13fde:	4602      	mov	r2, r0
   13fe0:	460b      	mov	r3, r1
   13fe2:	4630      	mov	r0, r6
   13fe4:	4639      	mov	r1, r7
   13fe6:	f7f8 fadf 	bl	c5a8 <__adddf3>
   13fea:	4544      	cmp	r4, r8
   13fec:	4606      	mov	r6, r0
   13fee:	460f      	mov	r7, r1
   13ff0:	d1ef      	bne.n	13fd2 <__kernel_rem_pio2+0xba>
   13ff2:	e8ea 6702 	strd	r6, r7, [sl], #8
   13ff6:	45da      	cmp	sl, fp
   13ff8:	f109 0908 	add.w	r9, r9, #8
   13ffc:	d1e1      	bne.n	13fc2 <__kernel_rem_pio2+0xaa>
   13ffe:	9907      	ldr	r1, [sp, #28]
   14000:	9800      	ldr	r0, [sp, #0]
   14002:	9c04      	ldr	r4, [sp, #16]
   14004:	9100      	str	r1, [sp, #0]
   14006:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   1400a:	3b01      	subs	r3, #1
   1400c:	009b      	lsls	r3, r3, #2
   1400e:	4420      	add	r0, r4
   14010:	1f1a      	subs	r2, r3, #4
   14012:	4683      	mov	fp, r0
   14014:	a80e      	add	r0, sp, #56	; 0x38
   14016:	4402      	add	r2, r0
   14018:	4403      	add	r3, r0
   1401a:	920c      	str	r2, [sp, #48]	; 0x30
   1401c:	930d      	str	r3, [sp, #52]	; 0x34
   1401e:	9a00      	ldr	r2, [sp, #0]
   14020:	a99a      	add	r1, sp, #616	; 0x268
   14022:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   14026:	2a00      	cmp	r2, #0
   14028:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1402c:	dd29      	ble.n	14082 <__kernel_rem_pio2+0x16a>
   1402e:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
   14032:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   14036:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   1403a:	2200      	movs	r2, #0
   1403c:	4b5e      	ldr	r3, [pc, #376]	; (141b8 <__kernel_rem_pio2+0x2a0>)
   1403e:	4620      	mov	r0, r4
   14040:	4629      	mov	r1, r5
   14042:	f000 fda3 	bl	14b8c <__aeabi_dmul>
   14046:	f000 ffc9 	bl	14fdc <__aeabi_d2iz>
   1404a:	f7f8 fbf9 	bl	c840 <__aeabi_i2d>
   1404e:	2200      	movs	r2, #0
   14050:	4b5a      	ldr	r3, [pc, #360]	; (141bc <__kernel_rem_pio2+0x2a4>)
   14052:	4606      	mov	r6, r0
   14054:	460f      	mov	r7, r1
   14056:	f000 fd99 	bl	14b8c <__aeabi_dmul>
   1405a:	4602      	mov	r2, r0
   1405c:	460b      	mov	r3, r1
   1405e:	4620      	mov	r0, r4
   14060:	4629      	mov	r1, r5
   14062:	f7f8 fa9f 	bl	c5a4 <__aeabi_dsub>
   14066:	f000 ffb9 	bl	14fdc <__aeabi_d2iz>
   1406a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1406e:	f849 0f04 	str.w	r0, [r9, #4]!
   14072:	4639      	mov	r1, r7
   14074:	4630      	mov	r0, r6
   14076:	f7f8 fa97 	bl	c5a8 <__adddf3>
   1407a:	45d0      	cmp	r8, sl
   1407c:	4604      	mov	r4, r0
   1407e:	460d      	mov	r5, r1
   14080:	d1db      	bne.n	1403a <__kernel_rem_pio2+0x122>
   14082:	f8dd 9018 	ldr.w	r9, [sp, #24]
   14086:	ec45 4b10 	vmov	d0, r4, r5
   1408a:	4648      	mov	r0, r9
   1408c:	f000 fce4 	bl	14a58 <scalbn>
   14090:	ec55 4b10 	vmov	r4, r5, d0
   14094:	2200      	movs	r2, #0
   14096:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1409a:	ee10 0a10 	vmov	r0, s0
   1409e:	4629      	mov	r1, r5
   140a0:	f000 fd74 	bl	14b8c <__aeabi_dmul>
   140a4:	ec41 0b10 	vmov	d0, r0, r1
   140a8:	f000 fc42 	bl	14930 <floor>
   140ac:	2200      	movs	r2, #0
   140ae:	ec51 0b10 	vmov	r0, r1, d0
   140b2:	4b43      	ldr	r3, [pc, #268]	; (141c0 <__kernel_rem_pio2+0x2a8>)
   140b4:	f000 fd6a 	bl	14b8c <__aeabi_dmul>
   140b8:	4602      	mov	r2, r0
   140ba:	460b      	mov	r3, r1
   140bc:	4620      	mov	r0, r4
   140be:	4629      	mov	r1, r5
   140c0:	f7f8 fa70 	bl	c5a4 <__aeabi_dsub>
   140c4:	460d      	mov	r5, r1
   140c6:	4604      	mov	r4, r0
   140c8:	f000 ff88 	bl	14fdc <__aeabi_d2iz>
   140cc:	4680      	mov	r8, r0
   140ce:	f7f8 fbb7 	bl	c840 <__aeabi_i2d>
   140d2:	460b      	mov	r3, r1
   140d4:	4602      	mov	r2, r0
   140d6:	4629      	mov	r1, r5
   140d8:	4620      	mov	r0, r4
   140da:	f7f8 fa63 	bl	c5a4 <__aeabi_dsub>
   140de:	464b      	mov	r3, r9
   140e0:	2b00      	cmp	r3, #0
   140e2:	4606      	mov	r6, r0
   140e4:	460f      	mov	r7, r1
   140e6:	f340 80fa 	ble.w	142de <__kernel_rem_pio2+0x3c6>
   140ea:	9a00      	ldr	r2, [sp, #0]
   140ec:	a90e      	add	r1, sp, #56	; 0x38
   140ee:	3a01      	subs	r2, #1
   140f0:	f1c9 0318 	rsb	r3, r9, #24
   140f4:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   140f8:	fa45 f103 	asr.w	r1, r5, r3
   140fc:	fa01 f303 	lsl.w	r3, r1, r3
   14100:	a80e      	add	r0, sp, #56	; 0x38
   14102:	1aeb      	subs	r3, r5, r3
   14104:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   14108:	f1c9 0517 	rsb	r5, r9, #23
   1410c:	4488      	add	r8, r1
   1410e:	fa43 f505 	asr.w	r5, r3, r5
   14112:	2d00      	cmp	r5, #0
   14114:	dd6e      	ble.n	141f4 <__kernel_rem_pio2+0x2dc>
   14116:	9b00      	ldr	r3, [sp, #0]
   14118:	2b00      	cmp	r3, #0
   1411a:	f108 0801 	add.w	r8, r8, #1
   1411e:	f340 8274 	ble.w	1460a <__kernel_rem_pio2+0x6f2>
   14122:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   14124:	2c00      	cmp	r4, #0
   14126:	f040 831b 	bne.w	14760 <__kernel_rem_pio2+0x848>
   1412a:	9b00      	ldr	r3, [sp, #0]
   1412c:	2b01      	cmp	r3, #1
   1412e:	f340 8294 	ble.w	1465a <__kernel_rem_pio2+0x742>
   14132:	aa0e      	add	r2, sp, #56	; 0x38
   14134:	2301      	movs	r3, #1
   14136:	f852 4f04 	ldr.w	r4, [r2, #4]!
   1413a:	2c00      	cmp	r4, #0
   1413c:	f000 8288 	beq.w	14650 <__kernel_rem_pio2+0x738>
   14140:	1c58      	adds	r0, r3, #1
   14142:	aa0e      	add	r2, sp, #56	; 0x38
   14144:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   14148:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   1414c:	9a00      	ldr	r2, [sp, #0]
   1414e:	4282      	cmp	r2, r0
   14150:	dd19      	ble.n	14186 <__kernel_rem_pio2+0x26e>
   14152:	aa0e      	add	r2, sp, #56	; 0x38
   14154:	ac0e      	add	r4, sp, #56	; 0x38
   14156:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   1415a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   1415e:	1a51      	subs	r1, r2, r1
   14160:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
   14164:	9900      	ldr	r1, [sp, #0]
   14166:	3302      	adds	r3, #2
   14168:	4299      	cmp	r1, r3
   1416a:	dd0c      	ble.n	14186 <__kernel_rem_pio2+0x26e>
   1416c:	4610      	mov	r0, r2
   1416e:	9a00      	ldr	r2, [sp, #0]
   14170:	a90e      	add	r1, sp, #56	; 0x38
   14172:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   14176:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   1417a:	681a      	ldr	r2, [r3, #0]
   1417c:	1a82      	subs	r2, r0, r2
   1417e:	f843 2b04 	str.w	r2, [r3], #4
   14182:	428b      	cmp	r3, r1
   14184:	d1f9      	bne.n	1417a <__kernel_rem_pio2+0x262>
   14186:	9b06      	ldr	r3, [sp, #24]
   14188:	2b00      	cmp	r3, #0
   1418a:	dd1b      	ble.n	141c4 <__kernel_rem_pio2+0x2ac>
   1418c:	9b06      	ldr	r3, [sp, #24]
   1418e:	2b01      	cmp	r3, #1
   14190:	f04f 0401 	mov.w	r4, #1
   14194:	f040 8241 	bne.w	1461a <__kernel_rem_pio2+0x702>
   14198:	9b00      	ldr	r3, [sp, #0]
   1419a:	1e5a      	subs	r2, r3, #1
   1419c:	ab0e      	add	r3, sp, #56	; 0x38
   1419e:	a90e      	add	r1, sp, #56	; 0x38
   141a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   141a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
   141a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   141ac:	e241      	b.n	14632 <__kernel_rem_pio2+0x71a>
   141ae:	bf00      	nop
   141b0:	0003c6c0 	.word	0x0003c6c0
   141b4:	2aaaaaab 	.word	0x2aaaaaab
   141b8:	3e700000 	.word	0x3e700000
   141bc:	41700000 	.word	0x41700000
   141c0:	40200000 	.word	0x40200000
   141c4:	2d02      	cmp	r5, #2
   141c6:	d115      	bne.n	141f4 <__kernel_rem_pio2+0x2dc>
   141c8:	4632      	mov	r2, r6
   141ca:	463b      	mov	r3, r7
   141cc:	2000      	movs	r0, #0
   141ce:	4994      	ldr	r1, [pc, #592]	; (14420 <__kernel_rem_pio2+0x508>)
   141d0:	f7f8 f9e8 	bl	c5a4 <__aeabi_dsub>
   141d4:	4606      	mov	r6, r0
   141d6:	460f      	mov	r7, r1
   141d8:	9806      	ldr	r0, [sp, #24]
   141da:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 14410 <__kernel_rem_pio2+0x4f8>
   141de:	f000 fc3b 	bl	14a58 <scalbn>
   141e2:	4630      	mov	r0, r6
   141e4:	4639      	mov	r1, r7
   141e6:	ec53 2b10 	vmov	r2, r3, d0
   141ea:	f7f8 f9db 	bl	c5a4 <__aeabi_dsub>
   141ee:	2502      	movs	r5, #2
   141f0:	4606      	mov	r6, r0
   141f2:	460f      	mov	r7, r1
   141f4:	2200      	movs	r2, #0
   141f6:	2300      	movs	r3, #0
   141f8:	4630      	mov	r0, r6
   141fa:	4639      	mov	r1, r7
   141fc:	f7f8 fbdc 	bl	c9b8 <__aeabi_dcmpeq>
   14200:	2800      	cmp	r0, #0
   14202:	f000 823b 	beq.w	1467c <__kernel_rem_pio2+0x764>
   14206:	9a00      	ldr	r2, [sp, #0]
   14208:	9b07      	ldr	r3, [sp, #28]
   1420a:	1e50      	subs	r0, r2, #1
   1420c:	4283      	cmp	r3, r0
   1420e:	dc0f      	bgt.n	14230 <__kernel_rem_pio2+0x318>
   14210:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   14214:	3b01      	subs	r3, #1
   14216:	aa0e      	add	r2, sp, #56	; 0x38
   14218:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1421a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1421e:	2200      	movs	r2, #0
   14220:	f853 1904 	ldr.w	r1, [r3], #-4
   14224:	42a3      	cmp	r3, r4
   14226:	ea42 0201 	orr.w	r2, r2, r1
   1422a:	d1f9      	bne.n	14220 <__kernel_rem_pio2+0x308>
   1422c:	2a00      	cmp	r2, #0
   1422e:	d167      	bne.n	14300 <__kernel_rem_pio2+0x3e8>
   14230:	9b07      	ldr	r3, [sp, #28]
   14232:	aa0e      	add	r2, sp, #56	; 0x38
   14234:	3b01      	subs	r3, #1
   14236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1423a:	2b00      	cmp	r3, #0
   1423c:	f040 821c 	bne.w	14678 <__kernel_rem_pio2+0x760>
   14240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14242:	2301      	movs	r3, #1
   14244:	f852 1904 	ldr.w	r1, [r2], #-4
   14248:	3301      	adds	r3, #1
   1424a:	2900      	cmp	r1, #0
   1424c:	d0fa      	beq.n	14244 <__kernel_rem_pio2+0x32c>
   1424e:	9a00      	ldr	r2, [sp, #0]
   14250:	18d3      	adds	r3, r2, r3
   14252:	f102 0a01 	add.w	sl, r2, #1
   14256:	459a      	cmp	sl, r3
   14258:	9309      	str	r3, [sp, #36]	; 0x24
   1425a:	dc3d      	bgt.n	142d8 <__kernel_rem_pio2+0x3c0>
   1425c:	9b00      	ldr	r3, [sp, #0]
   1425e:	990a      	ldr	r1, [sp, #40]	; 0x28
   14260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14262:	440b      	add	r3, r1
   14264:	9909      	ldr	r1, [sp, #36]	; 0x24
   14266:	eb0a 0802 	add.w	r8, sl, r2
   1426a:	4699      	mov	r9, r3
   1426c:	ab22      	add	r3, sp, #136	; 0x88
   1426e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   14272:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   14276:	188b      	adds	r3, r1, r2
   14278:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1427a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1427e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
   14282:	aa72      	add	r2, sp, #456	; 0x1c8
   14284:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
   14288:	9aa5      	ldr	r2, [sp, #660]	; 0x294
   1428a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1428e:	9300      	str	r3, [sp, #0]
   14290:	f858 0f04 	ldr.w	r0, [r8, #4]!
   14294:	f7f8 fad4 	bl	c840 <__aeabi_i2d>
   14298:	9b03      	ldr	r3, [sp, #12]
   1429a:	2b00      	cmp	r3, #0
   1429c:	e8e9 0102 	strd	r0, r1, [r9], #8
   142a0:	f04f 0600 	mov.w	r6, #0
   142a4:	f04f 0700 	mov.w	r7, #0
   142a8:	db11      	blt.n	142ce <__kernel_rem_pio2+0x3b6>
   142aa:	9c04      	ldr	r4, [sp, #16]
   142ac:	464d      	mov	r5, r9
   142ae:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   142b2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   142b6:	f000 fc69 	bl	14b8c <__aeabi_dmul>
   142ba:	4602      	mov	r2, r0
   142bc:	460b      	mov	r3, r1
   142be:	4630      	mov	r0, r6
   142c0:	4639      	mov	r1, r7
   142c2:	f7f8 f971 	bl	c5a8 <__adddf3>
   142c6:	455c      	cmp	r4, fp
   142c8:	4606      	mov	r6, r0
   142ca:	460f      	mov	r7, r1
   142cc:	d1ef      	bne.n	142ae <__kernel_rem_pio2+0x396>
   142ce:	9b00      	ldr	r3, [sp, #0]
   142d0:	4598      	cmp	r8, r3
   142d2:	e8ea 6702 	strd	r6, r7, [sl], #8
   142d6:	d1db      	bne.n	14290 <__kernel_rem_pio2+0x378>
   142d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   142da:	9300      	str	r3, [sp, #0]
   142dc:	e69f      	b.n	1401e <__kernel_rem_pio2+0x106>
   142de:	d106      	bne.n	142ee <__kernel_rem_pio2+0x3d6>
   142e0:	9b00      	ldr	r3, [sp, #0]
   142e2:	aa0e      	add	r2, sp, #56	; 0x38
   142e4:	3b01      	subs	r3, #1
   142e6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   142ea:	15ed      	asrs	r5, r5, #23
   142ec:	e711      	b.n	14112 <__kernel_rem_pio2+0x1fa>
   142ee:	2200      	movs	r2, #0
   142f0:	4b4c      	ldr	r3, [pc, #304]	; (14424 <__kernel_rem_pio2+0x50c>)
   142f2:	f7f8 fb7f 	bl	c9f4 <__aeabi_dcmpge>
   142f6:	2800      	cmp	r0, #0
   142f8:	f040 8172 	bne.w	145e0 <__kernel_rem_pio2+0x6c8>
   142fc:	4605      	mov	r5, r0
   142fe:	e779      	b.n	141f4 <__kernel_rem_pio2+0x2dc>
   14300:	a90e      	add	r1, sp, #56	; 0x38
   14302:	9503      	str	r5, [sp, #12]
   14304:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   14308:	9906      	ldr	r1, [sp, #24]
   1430a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1430e:	3918      	subs	r1, #24
   14310:	4602      	mov	r2, r0
   14312:	9000      	str	r0, [sp, #0]
   14314:	9106      	str	r1, [sp, #24]
   14316:	b96b      	cbnz	r3, 14334 <__kernel_rem_pio2+0x41c>
   14318:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1431c:	3b01      	subs	r3, #1
   1431e:	a80e      	add	r0, sp, #56	; 0x38
   14320:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   14324:	f853 0904 	ldr.w	r0, [r3], #-4
   14328:	3a01      	subs	r2, #1
   1432a:	3918      	subs	r1, #24
   1432c:	2800      	cmp	r0, #0
   1432e:	d0f9      	beq.n	14324 <__kernel_rem_pio2+0x40c>
   14330:	9200      	str	r2, [sp, #0]
   14332:	9106      	str	r1, [sp, #24]
   14334:	9806      	ldr	r0, [sp, #24]
   14336:	ed9f 0b36 	vldr	d0, [pc, #216]	; 14410 <__kernel_rem_pio2+0x4f8>
   1433a:	f000 fb8d 	bl	14a58 <scalbn>
   1433e:	9b00      	ldr	r3, [sp, #0]
   14340:	2b00      	cmp	r3, #0
   14342:	ec55 4b10 	vmov	r4, r5, d0
   14346:	f2c0 81fc 	blt.w	14742 <__kernel_rem_pio2+0x82a>
   1434a:	00da      	lsls	r2, r3, #3
   1434c:	a972      	add	r1, sp, #456	; 0x1c8
   1434e:	eb01 0b02 	add.w	fp, r1, r2
   14352:	9206      	str	r2, [sp, #24]
   14354:	aa0e      	add	r2, sp, #56	; 0x38
   14356:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   1435a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 14428 <__kernel_rem_pio2+0x510>
   1435e:	f04f 0800 	mov.w	r8, #0
   14362:	f10b 0708 	add.w	r7, fp, #8
   14366:	3604      	adds	r6, #4
   14368:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1436c:	f7f8 fa68 	bl	c840 <__aeabi_i2d>
   14370:	4622      	mov	r2, r4
   14372:	462b      	mov	r3, r5
   14374:	f000 fc0a 	bl	14b8c <__aeabi_dmul>
   14378:	464b      	mov	r3, r9
   1437a:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1437e:	4642      	mov	r2, r8
   14380:	4620      	mov	r0, r4
   14382:	4629      	mov	r1, r5
   14384:	f000 fc02 	bl	14b8c <__aeabi_dmul>
   14388:	ab0e      	add	r3, sp, #56	; 0x38
   1438a:	429e      	cmp	r6, r3
   1438c:	4604      	mov	r4, r0
   1438e:	460d      	mov	r5, r1
   14390:	d1ea      	bne.n	14368 <__kernel_rem_pio2+0x450>
   14392:	ac4a      	add	r4, sp, #296	; 0x128
   14394:	f8dd 901c 	ldr.w	r9, [sp, #28]
   14398:	9404      	str	r4, [sp, #16]
   1439a:	f04f 0a00 	mov.w	sl, #0
   1439e:	f1b9 0f00 	cmp.w	r9, #0
   143a2:	f2c0 812f 	blt.w	14604 <__kernel_rem_pio2+0x6ec>
   143a6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1442c <__kernel_rem_pio2+0x514>
   143aa:	465d      	mov	r5, fp
   143ac:	a11a      	add	r1, pc, #104	; (adr r1, 14418 <__kernel_rem_pio2+0x500>)
   143ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   143b2:	2600      	movs	r6, #0
   143b4:	2700      	movs	r7, #0
   143b6:	2400      	movs	r4, #0
   143b8:	e003      	b.n	143c2 <__kernel_rem_pio2+0x4aa>
   143ba:	4554      	cmp	r4, sl
   143bc:	dc10      	bgt.n	143e0 <__kernel_rem_pio2+0x4c8>
   143be:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   143c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   143c6:	f000 fbe1 	bl	14b8c <__aeabi_dmul>
   143ca:	4602      	mov	r2, r0
   143cc:	460b      	mov	r3, r1
   143ce:	4630      	mov	r0, r6
   143d0:	4639      	mov	r1, r7
   143d2:	f7f8 f8e9 	bl	c5a8 <__adddf3>
   143d6:	3401      	adds	r4, #1
   143d8:	45a1      	cmp	r9, r4
   143da:	4606      	mov	r6, r0
   143dc:	460f      	mov	r7, r1
   143de:	daec      	bge.n	143ba <__kernel_rem_pio2+0x4a2>
   143e0:	9b04      	ldr	r3, [sp, #16]
   143e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   143e6:	f1ab 0b08 	sub.w	fp, fp, #8
   143ea:	e9c3 6700 	strd	r6, r7, [r3]
   143ee:	ab70      	add	r3, sp, #448	; 0x1c0
   143f0:	459b      	cmp	fp, r3
   143f2:	f10a 0a01 	add.w	sl, sl, #1
   143f6:	d1d2      	bne.n	1439e <__kernel_rem_pio2+0x486>
   143f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   143fa:	9c04      	ldr	r4, [sp, #16]
   143fc:	2b03      	cmp	r3, #3
   143fe:	f200 808d 	bhi.w	1451c <__kernel_rem_pio2+0x604>
   14402:	e8df f013 	tbh	[pc, r3, lsl #1]
   14406:	00c9      	.short	0x00c9
   14408:	00920092 	.word	0x00920092
   1440c:	0015      	.short	0x0015
   1440e:	bf00      	nop
   14410:	00000000 	.word	0x00000000
   14414:	3ff00000 	.word	0x3ff00000
   14418:	40000000 	.word	0x40000000
   1441c:	3ff921fb 	.word	0x3ff921fb
   14420:	3ff00000 	.word	0x3ff00000
   14424:	3fe00000 	.word	0x3fe00000
   14428:	3e700000 	.word	0x3e700000
   1442c:	0003c6d8 	.word	0x0003c6d8
   14430:	9b00      	ldr	r3, [sp, #0]
   14432:	2b00      	cmp	r3, #0
   14434:	f340 8182 	ble.w	1473c <__kernel_rem_pio2+0x824>
   14438:	9a06      	ldr	r2, [sp, #24]
   1443a:	eb04 0a02 	add.w	sl, r4, r2
   1443e:	e9da 8900 	ldrd	r8, r9, [sl]
   14442:	f102 0508 	add.w	r5, r2, #8
   14446:	4425      	add	r5, r4
   14448:	f50d 7b98 	add.w	fp, sp, #304	; 0x130
   1444c:	ed1a 7b02 	vldr	d7, [sl, #-8]
   14450:	4642      	mov	r2, r8
   14452:	464b      	mov	r3, r9
   14454:	ec51 0b17 	vmov	r0, r1, d7
   14458:	ed8d 7b04 	vstr	d7, [sp, #16]
   1445c:	f7f8 f8a4 	bl	c5a8 <__adddf3>
   14460:	4606      	mov	r6, r0
   14462:	460f      	mov	r7, r1
   14464:	4602      	mov	r2, r0
   14466:	460b      	mov	r3, r1
   14468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1446c:	f7f8 f89a 	bl	c5a4 <__aeabi_dsub>
   14470:	4642      	mov	r2, r8
   14472:	464b      	mov	r3, r9
   14474:	f7f8 f898 	bl	c5a8 <__adddf3>
   14478:	e965 0102 	strd	r0, r1, [r5, #-8]!
   1447c:	455d      	cmp	r5, fp
   1447e:	46b0      	mov	r8, r6
   14480:	46b9      	mov	r9, r7
   14482:	e96a 6702 	strd	r6, r7, [sl, #-8]!
   14486:	d1e1      	bne.n	1444c <__kernel_rem_pio2+0x534>
   14488:	9b00      	ldr	r3, [sp, #0]
   1448a:	2b01      	cmp	r3, #1
   1448c:	f340 8156 	ble.w	1473c <__kernel_rem_pio2+0x824>
   14490:	9b06      	ldr	r3, [sp, #24]
   14492:	18e5      	adds	r5, r4, r3
   14494:	e9d5 8900 	ldrd	r8, r9, [r5]
   14498:	f103 0b08 	add.w	fp, r3, #8
   1449c:	eb04 0a0b 	add.w	sl, r4, fp
   144a0:	ed15 7b02 	vldr	d7, [r5, #-8]
   144a4:	4642      	mov	r2, r8
   144a6:	464b      	mov	r3, r9
   144a8:	ec51 0b17 	vmov	r0, r1, d7
   144ac:	ed8d 7b00 	vstr	d7, [sp]
   144b0:	f7f8 f87a 	bl	c5a8 <__adddf3>
   144b4:	4606      	mov	r6, r0
   144b6:	460f      	mov	r7, r1
   144b8:	4602      	mov	r2, r0
   144ba:	460b      	mov	r3, r1
   144bc:	e9dd 0100 	ldrd	r0, r1, [sp]
   144c0:	f7f8 f870 	bl	c5a4 <__aeabi_dsub>
   144c4:	464b      	mov	r3, r9
   144c6:	4642      	mov	r2, r8
   144c8:	f7f8 f86e 	bl	c5a8 <__adddf3>
   144cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
   144d0:	ab4e      	add	r3, sp, #312	; 0x138
   144d2:	4553      	cmp	r3, sl
   144d4:	46b0      	mov	r8, r6
   144d6:	46b9      	mov	r9, r7
   144d8:	e965 6702 	strd	r6, r7, [r5, #-8]!
   144dc:	d1e0      	bne.n	144a0 <__kernel_rem_pio2+0x588>
   144de:	2000      	movs	r0, #0
   144e0:	2100      	movs	r1, #0
   144e2:	eb04 050b 	add.w	r5, r4, fp
   144e6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   144ea:	f7f8 f85d 	bl	c5a8 <__adddf3>
   144ee:	45aa      	cmp	sl, r5
   144f0:	d1f9      	bne.n	144e6 <__kernel_rem_pio2+0x5ce>
   144f2:	9b03      	ldr	r3, [sp, #12]
   144f4:	2b00      	cmp	r3, #0
   144f6:	f000 810b 	beq.w	14710 <__kernel_rem_pio2+0x7f8>
   144fa:	6862      	ldr	r2, [r4, #4]
   144fc:	68e3      	ldr	r3, [r4, #12]
   144fe:	9f08      	ldr	r7, [sp, #32]
   14500:	6825      	ldr	r5, [r4, #0]
   14502:	68a4      	ldr	r4, [r4, #8]
   14504:	603d      	str	r5, [r7, #0]
   14506:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1450a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1450e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   14512:	607a      	str	r2, [r7, #4]
   14514:	60fb      	str	r3, [r7, #12]
   14516:	60bc      	str	r4, [r7, #8]
   14518:	6138      	str	r0, [r7, #16]
   1451a:	6179      	str	r1, [r7, #20]
   1451c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1451e:	f003 0007 	and.w	r0, r3, #7
   14522:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   14526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1452a:	9d06      	ldr	r5, [sp, #24]
   1452c:	3508      	adds	r5, #8
   1452e:	4425      	add	r5, r4
   14530:	2000      	movs	r0, #0
   14532:	2100      	movs	r1, #0
   14534:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   14538:	f7f8 f836 	bl	c5a8 <__adddf3>
   1453c:	42a5      	cmp	r5, r4
   1453e:	d1f9      	bne.n	14534 <__kernel_rem_pio2+0x61c>
   14540:	9b03      	ldr	r3, [sp, #12]
   14542:	2b00      	cmp	r3, #0
   14544:	f000 80d3 	beq.w	146ee <__kernel_rem_pio2+0x7d6>
   14548:	9e08      	ldr	r6, [sp, #32]
   1454a:	4602      	mov	r2, r0
   1454c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   14550:	e886 000c 	stmia.w	r6, {r2, r3}
   14554:	460b      	mov	r3, r1
   14556:	4602      	mov	r2, r0
   14558:	e9d4 0100 	ldrd	r0, r1, [r4]
   1455c:	f7f8 f822 	bl	c5a4 <__aeabi_dsub>
   14560:	9b00      	ldr	r3, [sp, #0]
   14562:	2b00      	cmp	r3, #0
   14564:	dd0b      	ble.n	1457e <__kernel_rem_pio2+0x666>
   14566:	ad4c      	add	r5, sp, #304	; 0x130
   14568:	2401      	movs	r4, #1
   1456a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1456e:	f7f8 f81b 	bl	c5a8 <__adddf3>
   14572:	9b00      	ldr	r3, [sp, #0]
   14574:	3401      	adds	r4, #1
   14576:	42a3      	cmp	r3, r4
   14578:	daf7      	bge.n	1456a <__kernel_rem_pio2+0x652>
   1457a:	9b03      	ldr	r3, [sp, #12]
   1457c:	b113      	cbz	r3, 14584 <__kernel_rem_pio2+0x66c>
   1457e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   14582:	4619      	mov	r1, r3
   14584:	9b08      	ldr	r3, [sp, #32]
   14586:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1458c:	f003 0007 	and.w	r0, r3, #7
   14590:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   14594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14598:	9d06      	ldr	r5, [sp, #24]
   1459a:	3508      	adds	r5, #8
   1459c:	2000      	movs	r0, #0
   1459e:	2100      	movs	r1, #0
   145a0:	4425      	add	r5, r4
   145a2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   145a6:	f7f7 ffff 	bl	c5a8 <__adddf3>
   145aa:	42ac      	cmp	r4, r5
   145ac:	d1f9      	bne.n	145a2 <__kernel_rem_pio2+0x68a>
   145ae:	9b03      	ldr	r3, [sp, #12]
   145b0:	b113      	cbz	r3, 145b8 <__kernel_rem_pio2+0x6a0>
   145b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   145b6:	4619      	mov	r1, r3
   145b8:	9b08      	ldr	r3, [sp, #32]
   145ba:	e9c3 0100 	strd	r0, r1, [r3]
   145be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   145c0:	f003 0007 	and.w	r0, r3, #7
   145c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   145c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	2600      	movs	r6, #0
   145ce:	2700      	movs	r7, #0
   145d0:	e8ea 6702 	strd	r6, r7, [sl], #8
   145d4:	45da      	cmp	sl, fp
   145d6:	f109 0908 	add.w	r9, r9, #8
   145da:	f47f acf2 	bne.w	13fc2 <__kernel_rem_pio2+0xaa>
   145de:	e50e      	b.n	13ffe <__kernel_rem_pio2+0xe6>
   145e0:	9b00      	ldr	r3, [sp, #0]
   145e2:	2b00      	cmp	r3, #0
   145e4:	f108 0801 	add.w	r8, r8, #1
   145e8:	bfc8      	it	gt
   145ea:	2502      	movgt	r5, #2
   145ec:	f73f ad99 	bgt.w	14122 <__kernel_rem_pio2+0x20a>
   145f0:	4632      	mov	r2, r6
   145f2:	463b      	mov	r3, r7
   145f4:	2000      	movs	r0, #0
   145f6:	4961      	ldr	r1, [pc, #388]	; (1477c <__kernel_rem_pio2+0x864>)
   145f8:	f7f7 ffd4 	bl	c5a4 <__aeabi_dsub>
   145fc:	2502      	movs	r5, #2
   145fe:	4606      	mov	r6, r0
   14600:	460f      	mov	r7, r1
   14602:	e5f7      	b.n	141f4 <__kernel_rem_pio2+0x2dc>
   14604:	2600      	movs	r6, #0
   14606:	2700      	movs	r7, #0
   14608:	e6ea      	b.n	143e0 <__kernel_rem_pio2+0x4c8>
   1460a:	9b06      	ldr	r3, [sp, #24]
   1460c:	2b00      	cmp	r3, #0
   1460e:	dd27      	ble.n	14660 <__kernel_rem_pio2+0x748>
   14610:	2400      	movs	r4, #0
   14612:	9b06      	ldr	r3, [sp, #24]
   14614:	2b01      	cmp	r3, #1
   14616:	f43f adbf 	beq.w	14198 <__kernel_rem_pio2+0x280>
   1461a:	2b02      	cmp	r3, #2
   1461c:	d109      	bne.n	14632 <__kernel_rem_pio2+0x71a>
   1461e:	9b00      	ldr	r3, [sp, #0]
   14620:	1e5a      	subs	r2, r3, #1
   14622:	ab0e      	add	r3, sp, #56	; 0x38
   14624:	a90e      	add	r1, sp, #56	; 0x38
   14626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1462a:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1462e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   14632:	2d02      	cmp	r5, #2
   14634:	f47f adde 	bne.w	141f4 <__kernel_rem_pio2+0x2dc>
   14638:	4632      	mov	r2, r6
   1463a:	463b      	mov	r3, r7
   1463c:	2000      	movs	r0, #0
   1463e:	494f      	ldr	r1, [pc, #316]	; (1477c <__kernel_rem_pio2+0x864>)
   14640:	f7f7 ffb0 	bl	c5a4 <__aeabi_dsub>
   14644:	4606      	mov	r6, r0
   14646:	460f      	mov	r7, r1
   14648:	2c00      	cmp	r4, #0
   1464a:	f43f add3 	beq.w	141f4 <__kernel_rem_pio2+0x2dc>
   1464e:	e5c3      	b.n	141d8 <__kernel_rem_pio2+0x2c0>
   14650:	9900      	ldr	r1, [sp, #0]
   14652:	3301      	adds	r3, #1
   14654:	4299      	cmp	r1, r3
   14656:	f47f ad6e 	bne.w	14136 <__kernel_rem_pio2+0x21e>
   1465a:	9b06      	ldr	r3, [sp, #24]
   1465c:	2b00      	cmp	r3, #0
   1465e:	dcd8      	bgt.n	14612 <__kernel_rem_pio2+0x6fa>
   14660:	2d02      	cmp	r5, #2
   14662:	f47f adc7 	bne.w	141f4 <__kernel_rem_pio2+0x2dc>
   14666:	4632      	mov	r2, r6
   14668:	463b      	mov	r3, r7
   1466a:	2000      	movs	r0, #0
   1466c:	4943      	ldr	r1, [pc, #268]	; (1477c <__kernel_rem_pio2+0x864>)
   1466e:	f7f7 ff99 	bl	c5a4 <__aeabi_dsub>
   14672:	4606      	mov	r6, r0
   14674:	460f      	mov	r7, r1
   14676:	e5bd      	b.n	141f4 <__kernel_rem_pio2+0x2dc>
   14678:	2301      	movs	r3, #1
   1467a:	e5e8      	b.n	1424e <__kernel_rem_pio2+0x336>
   1467c:	9b06      	ldr	r3, [sp, #24]
   1467e:	9503      	str	r5, [sp, #12]
   14680:	4258      	negs	r0, r3
   14682:	ec47 6b10 	vmov	d0, r6, r7
   14686:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1468a:	f000 f9e5 	bl	14a58 <scalbn>
   1468e:	ec55 4b10 	vmov	r4, r5, d0
   14692:	2200      	movs	r2, #0
   14694:	4b3a      	ldr	r3, [pc, #232]	; (14780 <__kernel_rem_pio2+0x868>)
   14696:	ee10 0a10 	vmov	r0, s0
   1469a:	4629      	mov	r1, r5
   1469c:	f7f8 f9aa 	bl	c9f4 <__aeabi_dcmpge>
   146a0:	2800      	cmp	r0, #0
   146a2:	d041      	beq.n	14728 <__kernel_rem_pio2+0x810>
   146a4:	2200      	movs	r2, #0
   146a6:	4b37      	ldr	r3, [pc, #220]	; (14784 <__kernel_rem_pio2+0x86c>)
   146a8:	4620      	mov	r0, r4
   146aa:	4629      	mov	r1, r5
   146ac:	f000 fa6e 	bl	14b8c <__aeabi_dmul>
   146b0:	f000 fc94 	bl	14fdc <__aeabi_d2iz>
   146b4:	4606      	mov	r6, r0
   146b6:	f7f8 f8c3 	bl	c840 <__aeabi_i2d>
   146ba:	2200      	movs	r2, #0
   146bc:	4b30      	ldr	r3, [pc, #192]	; (14780 <__kernel_rem_pio2+0x868>)
   146be:	f000 fa65 	bl	14b8c <__aeabi_dmul>
   146c2:	4602      	mov	r2, r0
   146c4:	460b      	mov	r3, r1
   146c6:	4620      	mov	r0, r4
   146c8:	4629      	mov	r1, r5
   146ca:	f7f7 ff6b 	bl	c5a4 <__aeabi_dsub>
   146ce:	f000 fc85 	bl	14fdc <__aeabi_d2iz>
   146d2:	9900      	ldr	r1, [sp, #0]
   146d4:	9b06      	ldr	r3, [sp, #24]
   146d6:	460a      	mov	r2, r1
   146d8:	3318      	adds	r3, #24
   146da:	3201      	adds	r2, #1
   146dc:	9306      	str	r3, [sp, #24]
   146de:	460b      	mov	r3, r1
   146e0:	a90e      	add	r1, sp, #56	; 0x38
   146e2:	9200      	str	r2, [sp, #0]
   146e4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   146e8:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
   146ec:	e622      	b.n	14334 <__kernel_rem_pio2+0x41c>
   146ee:	9b08      	ldr	r3, [sp, #32]
   146f0:	4602      	mov	r2, r0
   146f2:	e9c3 0100 	strd	r0, r1, [r3]
   146f6:	460b      	mov	r3, r1
   146f8:	e9d4 0100 	ldrd	r0, r1, [r4]
   146fc:	f7f7 ff52 	bl	c5a4 <__aeabi_dsub>
   14700:	9b00      	ldr	r3, [sp, #0]
   14702:	2b00      	cmp	r3, #0
   14704:	f73f af2f 	bgt.w	14566 <__kernel_rem_pio2+0x64e>
   14708:	9b08      	ldr	r3, [sp, #32]
   1470a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1470e:	e73c      	b.n	1458a <__kernel_rem_pio2+0x672>
   14710:	e9d4 6700 	ldrd	r6, r7, [r4]
   14714:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   14718:	9d08      	ldr	r5, [sp, #32]
   1471a:	e9c5 0104 	strd	r0, r1, [r5, #16]
   1471e:	e9c5 6700 	strd	r6, r7, [r5]
   14722:	e9c5 2302 	strd	r2, r3, [r5, #8]
   14726:	e6f9      	b.n	1451c <__kernel_rem_pio2+0x604>
   14728:	4629      	mov	r1, r5
   1472a:	4620      	mov	r0, r4
   1472c:	f000 fc56 	bl	14fdc <__aeabi_d2iz>
   14730:	9a00      	ldr	r2, [sp, #0]
   14732:	a90e      	add	r1, sp, #56	; 0x38
   14734:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   14738:	e5fc      	b.n	14334 <__kernel_rem_pio2+0x41c>
   1473a:	ac4a      	add	r4, sp, #296	; 0x128
   1473c:	2000      	movs	r0, #0
   1473e:	2100      	movs	r1, #0
   14740:	e6d7      	b.n	144f2 <__kernel_rem_pio2+0x5da>
   14742:	9ba4      	ldr	r3, [sp, #656]	; 0x290
   14744:	2b03      	cmp	r3, #3
   14746:	f63f aee9 	bhi.w	1451c <__kernel_rem_pio2+0x604>
   1474a:	a201      	add	r2, pc, #4	; (adr r2, 14750 <__kernel_rem_pio2+0x838>)
   1474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14750:	0001476f 	.word	0x0001476f
   14754:	00014767 	.word	0x00014767
   14758:	00014767 	.word	0x00014767
   1475c:	0001473b 	.word	0x0001473b
   14760:	2001      	movs	r0, #1
   14762:	2300      	movs	r3, #0
   14764:	e4ed      	b.n	14142 <__kernel_rem_pio2+0x22a>
   14766:	2000      	movs	r0, #0
   14768:	2100      	movs	r1, #0
   1476a:	ac4a      	add	r4, sp, #296	; 0x128
   1476c:	e6e8      	b.n	14540 <__kernel_rem_pio2+0x628>
   1476e:	2000      	movs	r0, #0
   14770:	2100      	movs	r1, #0
   14772:	e71c      	b.n	145ae <__kernel_rem_pio2+0x696>
   14774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14776:	00db      	lsls	r3, r3, #3
   14778:	9300      	str	r3, [sp, #0]
   1477a:	e440      	b.n	13ffe <__kernel_rem_pio2+0xe6>
   1477c:	3ff00000 	.word	0x3ff00000
   14780:	41700000 	.word	0x41700000
   14784:	3e700000 	.word	0x3e700000

00014788 <__kernel_sin>:
   14788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1478c:	ec55 4b10 	vmov	r4, r5, d0
   14790:	ed2d 8b02 	vpush	{d8}
   14794:	eeb0 8a41 	vmov.f32	s16, s2
   14798:	eef0 8a61 	vmov.f32	s17, s3
   1479c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   147a0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   147a4:	b083      	sub	sp, #12
   147a6:	4682      	mov	sl, r0
   147a8:	da07      	bge.n	147ba <__kernel_sin+0x32>
   147aa:	ee10 0a10 	vmov	r0, s0
   147ae:	4629      	mov	r1, r5
   147b0:	f000 fc14 	bl	14fdc <__aeabi_d2iz>
   147b4:	2800      	cmp	r0, #0
   147b6:	f000 808e 	beq.w	148d6 <__kernel_sin+0x14e>
   147ba:	4622      	mov	r2, r4
   147bc:	462b      	mov	r3, r5
   147be:	4620      	mov	r0, r4
   147c0:	4629      	mov	r1, r5
   147c2:	f000 f9e3 	bl	14b8c <__aeabi_dmul>
   147c6:	4606      	mov	r6, r0
   147c8:	460f      	mov	r7, r1
   147ca:	4602      	mov	r2, r0
   147cc:	460b      	mov	r3, r1
   147ce:	4620      	mov	r0, r4
   147d0:	4629      	mov	r1, r5
   147d2:	f000 f9db 	bl	14b8c <__aeabi_dmul>
   147d6:	a347      	add	r3, pc, #284	; (adr r3, 148f4 <__kernel_sin+0x16c>)
   147d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   147dc:	4680      	mov	r8, r0
   147de:	4689      	mov	r9, r1
   147e0:	4630      	mov	r0, r6
   147e2:	4639      	mov	r1, r7
   147e4:	f000 f9d2 	bl	14b8c <__aeabi_dmul>
   147e8:	a344      	add	r3, pc, #272	; (adr r3, 148fc <__kernel_sin+0x174>)
   147ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   147ee:	f7f7 fed9 	bl	c5a4 <__aeabi_dsub>
   147f2:	4632      	mov	r2, r6
   147f4:	463b      	mov	r3, r7
   147f6:	f000 f9c9 	bl	14b8c <__aeabi_dmul>
   147fa:	a342      	add	r3, pc, #264	; (adr r3, 14904 <__kernel_sin+0x17c>)
   147fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14800:	f7f7 fed2 	bl	c5a8 <__adddf3>
   14804:	4632      	mov	r2, r6
   14806:	463b      	mov	r3, r7
   14808:	f000 f9c0 	bl	14b8c <__aeabi_dmul>
   1480c:	a33f      	add	r3, pc, #252	; (adr r3, 1490c <__kernel_sin+0x184>)
   1480e:	e9d3 2300 	ldrd	r2, r3, [r3]
   14812:	f7f7 fec7 	bl	c5a4 <__aeabi_dsub>
   14816:	4632      	mov	r2, r6
   14818:	463b      	mov	r3, r7
   1481a:	f000 f9b7 	bl	14b8c <__aeabi_dmul>
   1481e:	a33d      	add	r3, pc, #244	; (adr r3, 14914 <__kernel_sin+0x18c>)
   14820:	e9d3 2300 	ldrd	r2, r3, [r3]
   14824:	f7f7 fec0 	bl	c5a8 <__adddf3>
   14828:	e9cd 0100 	strd	r0, r1, [sp]
   1482c:	f1ba 0f00 	cmp.w	sl, #0
   14830:	d037      	beq.n	148a2 <__kernel_sin+0x11a>
   14832:	2200      	movs	r2, #0
   14834:	4b2e      	ldr	r3, [pc, #184]	; (148f0 <__kernel_sin+0x168>)
   14836:	ec51 0b18 	vmov	r0, r1, d8
   1483a:	f000 f9a7 	bl	14b8c <__aeabi_dmul>
   1483e:	e9dd 2300 	ldrd	r2, r3, [sp]
   14842:	4682      	mov	sl, r0
   14844:	468b      	mov	fp, r1
   14846:	4640      	mov	r0, r8
   14848:	4649      	mov	r1, r9
   1484a:	f000 f99f 	bl	14b8c <__aeabi_dmul>
   1484e:	4602      	mov	r2, r0
   14850:	460b      	mov	r3, r1
   14852:	4650      	mov	r0, sl
   14854:	4659      	mov	r1, fp
   14856:	f7f7 fea5 	bl	c5a4 <__aeabi_dsub>
   1485a:	4632      	mov	r2, r6
   1485c:	463b      	mov	r3, r7
   1485e:	f000 f995 	bl	14b8c <__aeabi_dmul>
   14862:	ec53 2b18 	vmov	r2, r3, d8
   14866:	f7f7 fe9d 	bl	c5a4 <__aeabi_dsub>
   1486a:	a31f      	add	r3, pc, #124	; (adr r3, 148e8 <__kernel_sin+0x160>)
   1486c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14870:	4606      	mov	r6, r0
   14872:	460f      	mov	r7, r1
   14874:	4640      	mov	r0, r8
   14876:	4649      	mov	r1, r9
   14878:	f000 f988 	bl	14b8c <__aeabi_dmul>
   1487c:	4602      	mov	r2, r0
   1487e:	460b      	mov	r3, r1
   14880:	4630      	mov	r0, r6
   14882:	4639      	mov	r1, r7
   14884:	f7f7 fe90 	bl	c5a8 <__adddf3>
   14888:	4602      	mov	r2, r0
   1488a:	460b      	mov	r3, r1
   1488c:	4620      	mov	r0, r4
   1488e:	4629      	mov	r1, r5
   14890:	f7f7 fe88 	bl	c5a4 <__aeabi_dsub>
   14894:	ec41 0b10 	vmov	d0, r0, r1
   14898:	b003      	add	sp, #12
   1489a:	ecbd 8b02 	vpop	{d8}
   1489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a2:	4602      	mov	r2, r0
   148a4:	460b      	mov	r3, r1
   148a6:	4630      	mov	r0, r6
   148a8:	4639      	mov	r1, r7
   148aa:	f000 f96f 	bl	14b8c <__aeabi_dmul>
   148ae:	a30e      	add	r3, pc, #56	; (adr r3, 148e8 <__kernel_sin+0x160>)
   148b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   148b4:	f7f7 fe76 	bl	c5a4 <__aeabi_dsub>
   148b8:	4642      	mov	r2, r8
   148ba:	464b      	mov	r3, r9
   148bc:	f000 f966 	bl	14b8c <__aeabi_dmul>
   148c0:	4622      	mov	r2, r4
   148c2:	462b      	mov	r3, r5
   148c4:	f7f7 fe70 	bl	c5a8 <__adddf3>
   148c8:	ec41 0b10 	vmov	d0, r0, r1
   148cc:	b003      	add	sp, #12
   148ce:	ecbd 8b02 	vpop	{d8}
   148d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148d6:	ec45 4b10 	vmov	d0, r4, r5
   148da:	b003      	add	sp, #12
   148dc:	ecbd 8b02 	vpop	{d8}
   148e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e4:	f3af 8000 	nop.w
   148e8:	55555549 	.word	0x55555549
   148ec:	3fc55555 	.word	0x3fc55555
   148f0:	3fe00000 	.word	0x3fe00000
   148f4:	5acfd57c 	.word	0x5acfd57c
   148f8:	3de5d93a 	.word	0x3de5d93a
   148fc:	8a2b9ceb 	.word	0x8a2b9ceb
   14900:	3e5ae5e6 	.word	0x3e5ae5e6
   14904:	57b1fe7d 	.word	0x57b1fe7d
   14908:	3ec71de3 	.word	0x3ec71de3
   1490c:	19c161d5 	.word	0x19c161d5
   14910:	3f2a01a0 	.word	0x3f2a01a0
   14914:	1110f8a6 	.word	0x1110f8a6
   14918:	3f811111 	.word	0x3f811111

0001491c <fabs>:
   1491c:	ec53 2b10 	vmov	r2, r3, d0
   14920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14924:	ec43 2b10 	vmov	d0, r2, r3
   14928:	4770      	bx	lr
   1492a:	bf00      	nop
   1492c:	0000      	movs	r0, r0
	...

00014930 <floor>:
   14930:	ec51 0b10 	vmov	r0, r1, d0
   14934:	f3c1 530a 	ubfx	r3, r1, #20, #11
   14938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1493c:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   14940:	2d13      	cmp	r5, #19
   14942:	460c      	mov	r4, r1
   14944:	460f      	mov	r7, r1
   14946:	ee10 6a10 	vmov	r6, s0
   1494a:	dc1d      	bgt.n	14988 <floor+0x58>
   1494c:	2d00      	cmp	r5, #0
   1494e:	db43      	blt.n	149d8 <floor+0xa8>
   14950:	4b3d      	ldr	r3, [pc, #244]	; (14a48 <floor+0x118>)
   14952:	fa43 f805 	asr.w	r8, r3, r5
   14956:	ea01 0308 	and.w	r3, r1, r8
   1495a:	4303      	orrs	r3, r0
   1495c:	d019      	beq.n	14992 <floor+0x62>
   1495e:	a338      	add	r3, pc, #224	; (adr r3, 14a40 <floor+0x110>)
   14960:	e9d3 2300 	ldrd	r2, r3, [r3]
   14964:	f7f7 fe20 	bl	c5a8 <__adddf3>
   14968:	2200      	movs	r2, #0
   1496a:	2300      	movs	r3, #0
   1496c:	f7f8 f84c 	bl	ca08 <__aeabi_dcmpgt>
   14970:	b120      	cbz	r0, 1497c <floor+0x4c>
   14972:	2c00      	cmp	r4, #0
   14974:	db49      	blt.n	14a0a <floor+0xda>
   14976:	ea27 0408 	bic.w	r4, r7, r8
   1497a:	2600      	movs	r6, #0
   1497c:	4623      	mov	r3, r4
   1497e:	4632      	mov	r2, r6
   14980:	ec43 2b10 	vmov	d0, r2, r3
   14984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14988:	2d33      	cmp	r5, #51	; 0x33
   1498a:	dd06      	ble.n	1499a <floor+0x6a>
   1498c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   14990:	d032      	beq.n	149f8 <floor+0xc8>
   14992:	ec41 0b10 	vmov	d0, r0, r1
   14996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1499a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1499e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   149a2:	fa28 f803 	lsr.w	r8, r8, r3
   149a6:	ea10 0f08 	tst.w	r0, r8
   149aa:	d0f2      	beq.n	14992 <floor+0x62>
   149ac:	a324      	add	r3, pc, #144	; (adr r3, 14a40 <floor+0x110>)
   149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   149b2:	f7f7 fdf9 	bl	c5a8 <__adddf3>
   149b6:	2200      	movs	r2, #0
   149b8:	2300      	movs	r3, #0
   149ba:	f7f8 f825 	bl	ca08 <__aeabi_dcmpgt>
   149be:	2800      	cmp	r0, #0
   149c0:	d0dc      	beq.n	1497c <floor+0x4c>
   149c2:	2c00      	cmp	r4, #0
   149c4:	db27      	blt.n	14a16 <floor+0xe6>
   149c6:	463c      	mov	r4, r7
   149c8:	ea26 0608 	bic.w	r6, r6, r8
   149cc:	4623      	mov	r3, r4
   149ce:	4632      	mov	r2, r6
   149d0:	ec43 2b10 	vmov	d0, r2, r3
   149d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   149d8:	a319      	add	r3, pc, #100	; (adr r3, 14a40 <floor+0x110>)
   149da:	e9d3 2300 	ldrd	r2, r3, [r3]
   149de:	f7f7 fde3 	bl	c5a8 <__adddf3>
   149e2:	2200      	movs	r2, #0
   149e4:	2300      	movs	r3, #0
   149e6:	f7f8 f80f 	bl	ca08 <__aeabi_dcmpgt>
   149ea:	2800      	cmp	r0, #0
   149ec:	d0c6      	beq.n	1497c <floor+0x4c>
   149ee:	2c00      	cmp	r4, #0
   149f0:	db1c      	blt.n	14a2c <floor+0xfc>
   149f2:	2600      	movs	r6, #0
   149f4:	4634      	mov	r4, r6
   149f6:	e7c1      	b.n	1497c <floor+0x4c>
   149f8:	ee10 2a10 	vmov	r2, s0
   149fc:	460b      	mov	r3, r1
   149fe:	f7f7 fdd3 	bl	c5a8 <__adddf3>
   14a02:	ec41 0b10 	vmov	d0, r0, r1
   14a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   14a0e:	fa43 f505 	asr.w	r5, r3, r5
   14a12:	442f      	add	r7, r5
   14a14:	e7af      	b.n	14976 <floor+0x46>
   14a16:	2d14      	cmp	r5, #20
   14a18:	d010      	beq.n	14a3c <floor+0x10c>
   14a1a:	2301      	movs	r3, #1
   14a1c:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   14a20:	fa03 f505 	lsl.w	r5, r3, r5
   14a24:	19ae      	adds	r6, r5, r6
   14a26:	bf28      	it	cs
   14a28:	18ff      	addcs	r7, r7, r3
   14a2a:	e7cc      	b.n	149c6 <floor+0x96>
   14a2c:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
   14a30:	4b06      	ldr	r3, [pc, #24]	; (14a4c <floor+0x11c>)
   14a32:	4332      	orrs	r2, r6
   14a34:	bf18      	it	ne
   14a36:	461c      	movne	r4, r3
   14a38:	2600      	movs	r6, #0
   14a3a:	e79f      	b.n	1497c <floor+0x4c>
   14a3c:	3701      	adds	r7, #1
   14a3e:	e7c2      	b.n	149c6 <floor+0x96>
   14a40:	8800759c 	.word	0x8800759c
   14a44:	7e37e43c 	.word	0x7e37e43c
   14a48:	000fffff 	.word	0x000fffff
   14a4c:	bff00000 	.word	0xbff00000

00014a50 <matherr>:
   14a50:	2000      	movs	r0, #0
   14a52:	4770      	bx	lr
   14a54:	0000      	movs	r0, r0
	...

00014a58 <scalbn>:
   14a58:	ec53 2b10 	vmov	r2, r3, d0
   14a5c:	b570      	push	{r4, r5, r6, lr}
   14a5e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   14a62:	4619      	mov	r1, r3
   14a64:	4605      	mov	r5, r0
   14a66:	bb14      	cbnz	r4, 14aae <scalbn+0x56>
   14a68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   14a6c:	4311      	orrs	r1, r2
   14a6e:	d02a      	beq.n	14ac6 <scalbn+0x6e>
   14a70:	4619      	mov	r1, r3
   14a72:	2200      	movs	r2, #0
   14a74:	4b38      	ldr	r3, [pc, #224]	; (14b58 <scalbn+0x100>)
   14a76:	4e39      	ldr	r6, [pc, #228]	; (14b5c <scalbn+0x104>)
   14a78:	ee10 0a10 	vmov	r0, s0
   14a7c:	f000 f886 	bl	14b8c <__aeabi_dmul>
   14a80:	42b5      	cmp	r5, r6
   14a82:	4602      	mov	r2, r0
   14a84:	460b      	mov	r3, r1
   14a86:	db1f      	blt.n	14ac8 <scalbn+0x70>
   14a88:	f3c1 540a 	ubfx	r4, r1, #20, #11
   14a8c:	3c36      	subs	r4, #54	; 0x36
   14a8e:	442c      	add	r4, r5
   14a90:	f240 70fe 	movw	r0, #2046	; 0x7fe
   14a94:	4284      	cmp	r4, r0
   14a96:	dc1f      	bgt.n	14ad8 <scalbn+0x80>
   14a98:	2c00      	cmp	r4, #0
   14a9a:	dd2d      	ble.n	14af8 <scalbn+0xa0>
   14a9c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   14aa0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   14aa4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   14aa8:	ec43 2b10 	vmov	d0, r2, r3
   14aac:	bd70      	pop	{r4, r5, r6, pc}
   14aae:	f240 70ff 	movw	r0, #2047	; 0x7ff
   14ab2:	4284      	cmp	r4, r0
   14ab4:	d1eb      	bne.n	14a8e <scalbn+0x36>
   14ab6:	ee10 0a10 	vmov	r0, s0
   14aba:	4619      	mov	r1, r3
   14abc:	f7f7 fd74 	bl	c5a8 <__adddf3>
   14ac0:	ec41 0b10 	vmov	d0, r0, r1
   14ac4:	bd70      	pop	{r4, r5, r6, pc}
   14ac6:	bd70      	pop	{r4, r5, r6, pc}
   14ac8:	a31f      	add	r3, pc, #124	; (adr r3, 14b48 <scalbn+0xf0>)
   14aca:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ace:	f000 f85d 	bl	14b8c <__aeabi_dmul>
   14ad2:	ec41 0b10 	vmov	d0, r0, r1
   14ad6:	bd70      	pop	{r4, r5, r6, pc}
   14ad8:	ec43 2b11 	vmov	d1, r2, r3
   14adc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 14b50 <scalbn+0xf8>
   14ae0:	f000 f840 	bl	14b64 <copysign>
   14ae4:	a31a      	add	r3, pc, #104	; (adr r3, 14b50 <scalbn+0xf8>)
   14ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   14aea:	ec51 0b10 	vmov	r0, r1, d0
   14aee:	f000 f84d 	bl	14b8c <__aeabi_dmul>
   14af2:	ec41 0b10 	vmov	d0, r0, r1
   14af6:	bd70      	pop	{r4, r5, r6, pc}
   14af8:	f114 0f35 	cmn.w	r4, #53	; 0x35
   14afc:	da13      	bge.n	14b26 <scalbn+0xce>
   14afe:	f24c 3150 	movw	r1, #50000	; 0xc350
   14b02:	428d      	cmp	r5, r1
   14b04:	ec43 2b11 	vmov	d1, r2, r3
   14b08:	dce8      	bgt.n	14adc <scalbn+0x84>
   14b0a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 14b48 <scalbn+0xf0>
   14b0e:	f000 f829 	bl	14b64 <copysign>
   14b12:	a30d      	add	r3, pc, #52	; (adr r3, 14b48 <scalbn+0xf0>)
   14b14:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b18:	ec51 0b10 	vmov	r0, r1, d0
   14b1c:	f000 f836 	bl	14b8c <__aeabi_dmul>
   14b20:	ec41 0b10 	vmov	d0, r0, r1
   14b24:	bd70      	pop	{r4, r5, r6, pc}
   14b26:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   14b2a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   14b2e:	3436      	adds	r4, #54	; 0x36
   14b30:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   14b34:	4610      	mov	r0, r2
   14b36:	4619      	mov	r1, r3
   14b38:	2200      	movs	r2, #0
   14b3a:	4b09      	ldr	r3, [pc, #36]	; (14b60 <scalbn+0x108>)
   14b3c:	f000 f826 	bl	14b8c <__aeabi_dmul>
   14b40:	ec41 0b10 	vmov	d0, r0, r1
   14b44:	bd70      	pop	{r4, r5, r6, pc}
   14b46:	bf00      	nop
   14b48:	c2f8f359 	.word	0xc2f8f359
   14b4c:	01a56e1f 	.word	0x01a56e1f
   14b50:	8800759c 	.word	0x8800759c
   14b54:	7e37e43c 	.word	0x7e37e43c
   14b58:	43500000 	.word	0x43500000
   14b5c:	ffff3cb0 	.word	0xffff3cb0
   14b60:	3c900000 	.word	0x3c900000

00014b64 <copysign>:
   14b64:	ec53 2b10 	vmov	r2, r3, d0
   14b68:	ee11 0a90 	vmov	r0, s3
   14b6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   14b70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   14b74:	ea41 0300 	orr.w	r3, r1, r0
   14b78:	ec43 2b10 	vmov	d0, r2, r3
   14b7c:	4770      	bx	lr
   14b7e:	bf00      	nop

00014b80 <__errno>:
   14b80:	4b01      	ldr	r3, [pc, #4]	; (14b88 <__errno+0x8>)
   14b82:	6818      	ldr	r0, [r3, #0]
   14b84:	4770      	bx	lr
   14b86:	bf00      	nop
   14b88:	10002b00 	.word	0x10002b00

00014b8c <__aeabi_dmul>:
   14b8c:	b570      	push	{r4, r5, r6, lr}
   14b8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   14b92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   14b96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   14b9a:	bf1d      	ittte	ne
   14b9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   14ba0:	ea94 0f0c 	teqne	r4, ip
   14ba4:	ea95 0f0c 	teqne	r5, ip
   14ba8:	f000 f8de 	bleq	14d68 <__aeabi_dmul+0x1dc>
   14bac:	442c      	add	r4, r5
   14bae:	ea81 0603 	eor.w	r6, r1, r3
   14bb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   14bb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   14bba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   14bbe:	bf18      	it	ne
   14bc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   14bc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   14bc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   14bcc:	d038      	beq.n	14c40 <__aeabi_dmul+0xb4>
   14bce:	fba0 ce02 	umull	ip, lr, r0, r2
   14bd2:	f04f 0500 	mov.w	r5, #0
   14bd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   14bda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   14bde:	fbe0 e503 	umlal	lr, r5, r0, r3
   14be2:	f04f 0600 	mov.w	r6, #0
   14be6:	fbe1 5603 	umlal	r5, r6, r1, r3
   14bea:	f09c 0f00 	teq	ip, #0
   14bee:	bf18      	it	ne
   14bf0:	f04e 0e01 	orrne.w	lr, lr, #1
   14bf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   14bf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   14bfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   14c00:	d204      	bcs.n	14c0c <__aeabi_dmul+0x80>
   14c02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   14c06:	416d      	adcs	r5, r5
   14c08:	eb46 0606 	adc.w	r6, r6, r6
   14c0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   14c10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   14c14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   14c18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   14c1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   14c20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   14c24:	bf88      	it	hi
   14c26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   14c2a:	d81e      	bhi.n	14c6a <__aeabi_dmul+0xde>
   14c2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   14c30:	bf08      	it	eq
   14c32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   14c36:	f150 0000 	adcs.w	r0, r0, #0
   14c3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14c3e:	bd70      	pop	{r4, r5, r6, pc}
   14c40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   14c44:	ea46 0101 	orr.w	r1, r6, r1
   14c48:	ea40 0002 	orr.w	r0, r0, r2
   14c4c:	ea81 0103 	eor.w	r1, r1, r3
   14c50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   14c54:	bfc2      	ittt	gt
   14c56:	ebd4 050c 	rsbsgt	r5, r4, ip
   14c5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   14c5e:	bd70      	popgt	{r4, r5, r6, pc}
   14c60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   14c64:	f04f 0e00 	mov.w	lr, #0
   14c68:	3c01      	subs	r4, #1
   14c6a:	f300 80ab 	bgt.w	14dc4 <__aeabi_dmul+0x238>
   14c6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   14c72:	bfde      	ittt	le
   14c74:	2000      	movle	r0, #0
   14c76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   14c7a:	bd70      	pople	{r4, r5, r6, pc}
   14c7c:	f1c4 0400 	rsb	r4, r4, #0
   14c80:	3c20      	subs	r4, #32
   14c82:	da35      	bge.n	14cf0 <__aeabi_dmul+0x164>
   14c84:	340c      	adds	r4, #12
   14c86:	dc1b      	bgt.n	14cc0 <__aeabi_dmul+0x134>
   14c88:	f104 0414 	add.w	r4, r4, #20
   14c8c:	f1c4 0520 	rsb	r5, r4, #32
   14c90:	fa00 f305 	lsl.w	r3, r0, r5
   14c94:	fa20 f004 	lsr.w	r0, r0, r4
   14c98:	fa01 f205 	lsl.w	r2, r1, r5
   14c9c:	ea40 0002 	orr.w	r0, r0, r2
   14ca0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   14ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14ca8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   14cac:	fa21 f604 	lsr.w	r6, r1, r4
   14cb0:	eb42 0106 	adc.w	r1, r2, r6
   14cb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   14cb8:	bf08      	it	eq
   14cba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   14cbe:	bd70      	pop	{r4, r5, r6, pc}
   14cc0:	f1c4 040c 	rsb	r4, r4, #12
   14cc4:	f1c4 0520 	rsb	r5, r4, #32
   14cc8:	fa00 f304 	lsl.w	r3, r0, r4
   14ccc:	fa20 f005 	lsr.w	r0, r0, r5
   14cd0:	fa01 f204 	lsl.w	r2, r1, r4
   14cd4:	ea40 0002 	orr.w	r0, r0, r2
   14cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   14cdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   14ce0:	f141 0100 	adc.w	r1, r1, #0
   14ce4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   14ce8:	bf08      	it	eq
   14cea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   14cee:	bd70      	pop	{r4, r5, r6, pc}
   14cf0:	f1c4 0520 	rsb	r5, r4, #32
   14cf4:	fa00 f205 	lsl.w	r2, r0, r5
   14cf8:	ea4e 0e02 	orr.w	lr, lr, r2
   14cfc:	fa20 f304 	lsr.w	r3, r0, r4
   14d00:	fa01 f205 	lsl.w	r2, r1, r5
   14d04:	ea43 0302 	orr.w	r3, r3, r2
   14d08:	fa21 f004 	lsr.w	r0, r1, r4
   14d0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   14d10:	fa21 f204 	lsr.w	r2, r1, r4
   14d14:	ea20 0002 	bic.w	r0, r0, r2
   14d18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   14d1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   14d20:	bf08      	it	eq
   14d22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   14d26:	bd70      	pop	{r4, r5, r6, pc}
   14d28:	f094 0f00 	teq	r4, #0
   14d2c:	d10f      	bne.n	14d4e <__aeabi_dmul+0x1c2>
   14d2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   14d32:	0040      	lsls	r0, r0, #1
   14d34:	eb41 0101 	adc.w	r1, r1, r1
   14d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   14d3c:	bf08      	it	eq
   14d3e:	3c01      	subeq	r4, #1
   14d40:	d0f7      	beq.n	14d32 <__aeabi_dmul+0x1a6>
   14d42:	ea41 0106 	orr.w	r1, r1, r6
   14d46:	f095 0f00 	teq	r5, #0
   14d4a:	bf18      	it	ne
   14d4c:	4770      	bxne	lr
   14d4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   14d52:	0052      	lsls	r2, r2, #1
   14d54:	eb43 0303 	adc.w	r3, r3, r3
   14d58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   14d5c:	bf08      	it	eq
   14d5e:	3d01      	subeq	r5, #1
   14d60:	d0f7      	beq.n	14d52 <__aeabi_dmul+0x1c6>
   14d62:	ea43 0306 	orr.w	r3, r3, r6
   14d66:	4770      	bx	lr
   14d68:	ea94 0f0c 	teq	r4, ip
   14d6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   14d70:	bf18      	it	ne
   14d72:	ea95 0f0c 	teqne	r5, ip
   14d76:	d00c      	beq.n	14d92 <__aeabi_dmul+0x206>
   14d78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   14d7c:	bf18      	it	ne
   14d7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   14d82:	d1d1      	bne.n	14d28 <__aeabi_dmul+0x19c>
   14d84:	ea81 0103 	eor.w	r1, r1, r3
   14d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   14d8c:	f04f 0000 	mov.w	r0, #0
   14d90:	bd70      	pop	{r4, r5, r6, pc}
   14d92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   14d96:	bf06      	itte	eq
   14d98:	4610      	moveq	r0, r2
   14d9a:	4619      	moveq	r1, r3
   14d9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   14da0:	d019      	beq.n	14dd6 <__aeabi_dmul+0x24a>
   14da2:	ea94 0f0c 	teq	r4, ip
   14da6:	d102      	bne.n	14dae <__aeabi_dmul+0x222>
   14da8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   14dac:	d113      	bne.n	14dd6 <__aeabi_dmul+0x24a>
   14dae:	ea95 0f0c 	teq	r5, ip
   14db2:	d105      	bne.n	14dc0 <__aeabi_dmul+0x234>
   14db4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   14db8:	bf1c      	itt	ne
   14dba:	4610      	movne	r0, r2
   14dbc:	4619      	movne	r1, r3
   14dbe:	d10a      	bne.n	14dd6 <__aeabi_dmul+0x24a>
   14dc0:	ea81 0103 	eor.w	r1, r1, r3
   14dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   14dc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   14dcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   14dd0:	f04f 0000 	mov.w	r0, #0
   14dd4:	bd70      	pop	{r4, r5, r6, pc}
   14dd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   14dda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   14dde:	bd70      	pop	{r4, r5, r6, pc}

00014de0 <__aeabi_ddiv>:
   14de0:	b570      	push	{r4, r5, r6, lr}
   14de2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   14de6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   14dea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   14dee:	bf1d      	ittte	ne
   14df0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   14df4:	ea94 0f0c 	teqne	r4, ip
   14df8:	ea95 0f0c 	teqne	r5, ip
   14dfc:	f000 f8a7 	bleq	14f4e <__aeabi_ddiv+0x16e>
   14e00:	eba4 0405 	sub.w	r4, r4, r5
   14e04:	ea81 0e03 	eor.w	lr, r1, r3
   14e08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   14e0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14e10:	f000 8088 	beq.w	14f24 <__aeabi_ddiv+0x144>
   14e14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14e18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   14e1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   14e20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   14e24:	ea4f 2202 	mov.w	r2, r2, lsl #8
   14e28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   14e2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   14e30:	ea4f 2600 	mov.w	r6, r0, lsl #8
   14e34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   14e38:	429d      	cmp	r5, r3
   14e3a:	bf08      	it	eq
   14e3c:	4296      	cmpeq	r6, r2
   14e3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   14e42:	f504 7440 	add.w	r4, r4, #768	; 0x300
   14e46:	d202      	bcs.n	14e4e <__aeabi_ddiv+0x6e>
   14e48:	085b      	lsrs	r3, r3, #1
   14e4a:	ea4f 0232 	mov.w	r2, r2, rrx
   14e4e:	1ab6      	subs	r6, r6, r2
   14e50:	eb65 0503 	sbc.w	r5, r5, r3
   14e54:	085b      	lsrs	r3, r3, #1
   14e56:	ea4f 0232 	mov.w	r2, r2, rrx
   14e5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   14e5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   14e62:	ebb6 0e02 	subs.w	lr, r6, r2
   14e66:	eb75 0e03 	sbcs.w	lr, r5, r3
   14e6a:	bf22      	ittt	cs
   14e6c:	1ab6      	subcs	r6, r6, r2
   14e6e:	4675      	movcs	r5, lr
   14e70:	ea40 000c 	orrcs.w	r0, r0, ip
   14e74:	085b      	lsrs	r3, r3, #1
   14e76:	ea4f 0232 	mov.w	r2, r2, rrx
   14e7a:	ebb6 0e02 	subs.w	lr, r6, r2
   14e7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   14e82:	bf22      	ittt	cs
   14e84:	1ab6      	subcs	r6, r6, r2
   14e86:	4675      	movcs	r5, lr
   14e88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   14e8c:	085b      	lsrs	r3, r3, #1
   14e8e:	ea4f 0232 	mov.w	r2, r2, rrx
   14e92:	ebb6 0e02 	subs.w	lr, r6, r2
   14e96:	eb75 0e03 	sbcs.w	lr, r5, r3
   14e9a:	bf22      	ittt	cs
   14e9c:	1ab6      	subcs	r6, r6, r2
   14e9e:	4675      	movcs	r5, lr
   14ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   14ea4:	085b      	lsrs	r3, r3, #1
   14ea6:	ea4f 0232 	mov.w	r2, r2, rrx
   14eaa:	ebb6 0e02 	subs.w	lr, r6, r2
   14eae:	eb75 0e03 	sbcs.w	lr, r5, r3
   14eb2:	bf22      	ittt	cs
   14eb4:	1ab6      	subcs	r6, r6, r2
   14eb6:	4675      	movcs	r5, lr
   14eb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   14ebc:	ea55 0e06 	orrs.w	lr, r5, r6
   14ec0:	d018      	beq.n	14ef4 <__aeabi_ddiv+0x114>
   14ec2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   14ec6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   14eca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   14ece:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   14ed2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   14ed6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   14eda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   14ede:	d1c0      	bne.n	14e62 <__aeabi_ddiv+0x82>
   14ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   14ee4:	d10b      	bne.n	14efe <__aeabi_ddiv+0x11e>
   14ee6:	ea41 0100 	orr.w	r1, r1, r0
   14eea:	f04f 0000 	mov.w	r0, #0
   14eee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   14ef2:	e7b6      	b.n	14e62 <__aeabi_ddiv+0x82>
   14ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   14ef8:	bf04      	itt	eq
   14efa:	4301      	orreq	r1, r0
   14efc:	2000      	moveq	r0, #0
   14efe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   14f02:	bf88      	it	hi
   14f04:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   14f08:	f63f aeaf 	bhi.w	14c6a <__aeabi_dmul+0xde>
   14f0c:	ebb5 0c03 	subs.w	ip, r5, r3
   14f10:	bf04      	itt	eq
   14f12:	ebb6 0c02 	subseq.w	ip, r6, r2
   14f16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   14f1a:	f150 0000 	adcs.w	r0, r0, #0
   14f1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   14f22:	bd70      	pop	{r4, r5, r6, pc}
   14f24:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   14f28:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   14f2c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   14f30:	bfc2      	ittt	gt
   14f32:	ebd4 050c 	rsbsgt	r5, r4, ip
   14f36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   14f3a:	bd70      	popgt	{r4, r5, r6, pc}
   14f3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   14f40:	f04f 0e00 	mov.w	lr, #0
   14f44:	3c01      	subs	r4, #1
   14f46:	e690      	b.n	14c6a <__aeabi_dmul+0xde>
   14f48:	ea45 0e06 	orr.w	lr, r5, r6
   14f4c:	e68d      	b.n	14c6a <__aeabi_dmul+0xde>
   14f4e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   14f52:	ea94 0f0c 	teq	r4, ip
   14f56:	bf08      	it	eq
   14f58:	ea95 0f0c 	teqeq	r5, ip
   14f5c:	f43f af3b 	beq.w	14dd6 <__aeabi_dmul+0x24a>
   14f60:	ea94 0f0c 	teq	r4, ip
   14f64:	d10a      	bne.n	14f7c <__aeabi_ddiv+0x19c>
   14f66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   14f6a:	f47f af34 	bne.w	14dd6 <__aeabi_dmul+0x24a>
   14f6e:	ea95 0f0c 	teq	r5, ip
   14f72:	f47f af25 	bne.w	14dc0 <__aeabi_dmul+0x234>
   14f76:	4610      	mov	r0, r2
   14f78:	4619      	mov	r1, r3
   14f7a:	e72c      	b.n	14dd6 <__aeabi_dmul+0x24a>
   14f7c:	ea95 0f0c 	teq	r5, ip
   14f80:	d106      	bne.n	14f90 <__aeabi_ddiv+0x1b0>
   14f82:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   14f86:	f43f aefd 	beq.w	14d84 <__aeabi_dmul+0x1f8>
   14f8a:	4610      	mov	r0, r2
   14f8c:	4619      	mov	r1, r3
   14f8e:	e722      	b.n	14dd6 <__aeabi_dmul+0x24a>
   14f90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   14f94:	bf18      	it	ne
   14f96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   14f9a:	f47f aec5 	bne.w	14d28 <__aeabi_dmul+0x19c>
   14f9e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   14fa2:	f47f af0d 	bne.w	14dc0 <__aeabi_dmul+0x234>
   14fa6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   14faa:	f47f aeeb 	bne.w	14d84 <__aeabi_dmul+0x1f8>
   14fae:	e712      	b.n	14dd6 <__aeabi_dmul+0x24a>

00014fb0 <__aeabi_dcmpun>:
   14fb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   14fb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   14fb8:	d102      	bne.n	14fc0 <__aeabi_dcmpun+0x10>
   14fba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   14fbe:	d10a      	bne.n	14fd6 <__aeabi_dcmpun+0x26>
   14fc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   14fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   14fc8:	d102      	bne.n	14fd0 <__aeabi_dcmpun+0x20>
   14fca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   14fce:	d102      	bne.n	14fd6 <__aeabi_dcmpun+0x26>
   14fd0:	f04f 0000 	mov.w	r0, #0
   14fd4:	4770      	bx	lr
   14fd6:	f04f 0001 	mov.w	r0, #1
   14fda:	4770      	bx	lr

00014fdc <__aeabi_d2iz>:
   14fdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   14fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   14fe4:	d215      	bcs.n	15012 <__aeabi_d2iz+0x36>
   14fe6:	d511      	bpl.n	1500c <__aeabi_d2iz+0x30>
   14fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   14fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   14ff0:	d912      	bls.n	15018 <__aeabi_d2iz+0x3c>
   14ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   14ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   14ffe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   15002:	fa23 f002 	lsr.w	r0, r3, r2
   15006:	bf18      	it	ne
   15008:	4240      	negne	r0, r0
   1500a:	4770      	bx	lr
   1500c:	f04f 0000 	mov.w	r0, #0
   15010:	4770      	bx	lr
   15012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   15016:	d105      	bne.n	15024 <__aeabi_d2iz+0x48>
   15018:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1501c:	bf08      	it	eq
   1501e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   15022:	4770      	bx	lr
   15024:	f04f 0000 	mov.w	r0, #0
   15028:	4770      	bx	lr
   1502a:	bf00      	nop

0001502c <voles_conn_parameter_req>:
extern bool am_app_KWD_AMA_tx_ver_exchange_send(void);
extern uint16_t am_app_KWD_AMA_stream_send(uint8_t* buf, uint32_t len);
extern void am_app_led_off(void);

static void voles_conn_parameter_req(void)
{
   1502c:	b580      	push	{r7, lr}
   1502e:	b084      	sub	sp, #16
   15030:	af00      	add	r7, sp, #0
    hciConnSpec_t connSpec;
    connSpec.connIntervalMin = 6;//(15/1.25);//(30/1.25);
   15032:	2306      	movs	r3, #6
   15034:	80bb      	strh	r3, [r7, #4]
    connSpec.connIntervalMax = 12;//(15/1.25);//(30/1.25);
   15036:	230c      	movs	r3, #12
   15038:	80fb      	strh	r3, [r7, #6]
    connSpec.connLatency = 0;//0;
   1503a:	2300      	movs	r3, #0
   1503c:	813b      	strh	r3, [r7, #8]
    connSpec.supTimeout = 400;
   1503e:	f44f 73c8 	mov.w	r3, #400	; 0x190
   15042:	817b      	strh	r3, [r7, #10]
    connSpec.minCeLen = 0;
   15044:	2300      	movs	r3, #0
   15046:	81bb      	strh	r3, [r7, #12]
    connSpec.maxCeLen = 0xffff; //fixme
   15048:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1504c:	81fb      	strh	r3, [r7, #14]
    DmConnUpdate(1, &connSpec);
   1504e:	1d3b      	adds	r3, r7, #4
   15050:	4619      	mov	r1, r3
   15052:	2001      	movs	r0, #1
   15054:	f7fa ff0c 	bl	fe70 <DmConnUpdate>
}
   15058:	bf00      	nop
   1505a:	3710      	adds	r7, #16
   1505c:	46bd      	mov	sp, r7
   1505e:	bd80      	pop	{r7, pc}

00015060 <voles_conn_open>:
// Connection Open event
//
//*****************************************************************************
static void
voles_conn_open(dmEvt_t *pMsg)
{
   15060:	b580      	push	{r7, lr}
   15062:	b084      	sub	sp, #16
   15064:	af00      	add	r7, sp, #0
   15066:	6078      	str	r0, [r7, #4]
    hciLeConnCmplEvt_t *evt = (hciLeConnCmplEvt_t*) pMsg;
   15068:	687b      	ldr	r3, [r7, #4]
   1506a:	60fb      	str	r3, [r7, #12]

    APP_TRACE_INFO0("connection opened\n");
   1506c:	4822      	ldr	r0, [pc, #136]	; (150f8 <voles_conn_open+0x98>)
   1506e:	f00b fb5f 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("handle = 0x%x\n", evt->handle);
   15072:	68fb      	ldr	r3, [r7, #12]
   15074:	88db      	ldrh	r3, [r3, #6]
   15076:	4619      	mov	r1, r3
   15078:	4820      	ldr	r0, [pc, #128]	; (150fc <voles_conn_open+0x9c>)
   1507a:	f00b fb59 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("role = 0x%x\n", evt->role);
   1507e:	68fb      	ldr	r3, [r7, #12]
   15080:	7a1b      	ldrb	r3, [r3, #8]
   15082:	4619      	mov	r1, r3
   15084:	481e      	ldr	r0, [pc, #120]	; (15100 <voles_conn_open+0xa0>)
   15086:	f00b fb53 	bl	20730 <WsfTrace>
    APP_TRACE_INFO3("addrMSB = %02x%02x%02x%02x%02x%02x\n", evt->peerAddr[0], evt->peerAddr[1], evt->peerAddr[2]);
   1508a:	68fb      	ldr	r3, [r7, #12]
   1508c:	7a9b      	ldrb	r3, [r3, #10]
   1508e:	4619      	mov	r1, r3
   15090:	68fb      	ldr	r3, [r7, #12]
   15092:	7adb      	ldrb	r3, [r3, #11]
   15094:	461a      	mov	r2, r3
   15096:	68fb      	ldr	r3, [r7, #12]
   15098:	7b1b      	ldrb	r3, [r3, #12]
   1509a:	481a      	ldr	r0, [pc, #104]	; (15104 <voles_conn_open+0xa4>)
   1509c:	f00b fb48 	bl	20730 <WsfTrace>
    APP_TRACE_INFO3("addrLSB = %02x%02x%02x%02x%02x%02x\n", evt->peerAddr[3], evt->peerAddr[4], evt->peerAddr[5]);
   150a0:	68fb      	ldr	r3, [r7, #12]
   150a2:	7b5b      	ldrb	r3, [r3, #13]
   150a4:	4619      	mov	r1, r3
   150a6:	68fb      	ldr	r3, [r7, #12]
   150a8:	7b9b      	ldrb	r3, [r3, #14]
   150aa:	461a      	mov	r2, r3
   150ac:	68fb      	ldr	r3, [r7, #12]
   150ae:	7bdb      	ldrb	r3, [r3, #15]
   150b0:	4815      	ldr	r0, [pc, #84]	; (15108 <voles_conn_open+0xa8>)
   150b2:	f00b fb3d 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("connInterval = %d x 1.25 ms\n", evt->connInterval);
   150b6:	68fb      	ldr	r3, [r7, #12]
   150b8:	8a1b      	ldrh	r3, [r3, #16]
   150ba:	4619      	mov	r1, r3
   150bc:	4813      	ldr	r0, [pc, #76]	; (1510c <voles_conn_open+0xac>)
   150be:	f00b fb37 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("connLatency = %d\n", evt->connLatency);
   150c2:	68fb      	ldr	r3, [r7, #12]
   150c4:	8a5b      	ldrh	r3, [r3, #18]
   150c6:	4619      	mov	r1, r3
   150c8:	4811      	ldr	r0, [pc, #68]	; (15110 <voles_conn_open+0xb0>)
   150ca:	f00b fb31 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("supTimeout = %d ms\n", evt->supTimeout * 10);
   150ce:	68fb      	ldr	r3, [r7, #12]
   150d0:	8a9b      	ldrh	r3, [r3, #20]
   150d2:	461a      	mov	r2, r3
   150d4:	4613      	mov	r3, r2
   150d6:	009b      	lsls	r3, r3, #2
   150d8:	4413      	add	r3, r2
   150da:	005b      	lsls	r3, r3, #1
   150dc:	4619      	mov	r1, r3
   150de:	480d      	ldr	r0, [pc, #52]	; (15114 <voles_conn_open+0xb4>)
   150e0:	f00b fb26 	bl	20730 <WsfTrace>
    
    if(evt->connInterval > 12)
   150e4:	68fb      	ldr	r3, [r7, #12]
   150e6:	8a1b      	ldrh	r3, [r3, #16]
   150e8:	2b0c      	cmp	r3, #12
   150ea:	d901      	bls.n	150f0 <voles_conn_open+0x90>
        voles_conn_parameter_req();
   150ec:	f7ff ff9e 	bl	1502c <voles_conn_parameter_req>
}
   150f0:	bf00      	nop
   150f2:	3710      	adds	r7, #16
   150f4:	46bd      	mov	sp, r7
   150f6:	bd80      	pop	{r7, pc}
   150f8:	0003af30 	.word	0x0003af30
   150fc:	0003af44 	.word	0x0003af44
   15100:	0003af54 	.word	0x0003af54
   15104:	0003af64 	.word	0x0003af64
   15108:	0003af88 	.word	0x0003af88
   1510c:	0003afac 	.word	0x0003afac
   15110:	0003afcc 	.word	0x0003afcc
   15114:	0003afe0 	.word	0x0003afe0

00015118 <voles_conn_update>:
// Connection Update event
//
//*****************************************************************************
static void
voles_conn_update(dmEvt_t *pMsg)
{
   15118:	b580      	push	{r7, lr}
   1511a:	b084      	sub	sp, #16
   1511c:	af00      	add	r7, sp, #0
   1511e:	6078      	str	r0, [r7, #4]
    hciLeConnUpdateCmplEvt_t *evt = (hciLeConnUpdateCmplEvt_t*) pMsg;
   15120:	687b      	ldr	r3, [r7, #4]
   15122:	60fb      	str	r3, [r7, #12]

    APP_TRACE_INFO1("connection update status = 0x%x", evt->status);
   15124:	68fb      	ldr	r3, [r7, #12]
   15126:	791b      	ldrb	r3, [r3, #4]
   15128:	4619      	mov	r1, r3
   1512a:	4817      	ldr	r0, [pc, #92]	; (15188 <voles_conn_update+0x70>)
   1512c:	f00b fb00 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("handle = 0x%x", evt->handle);
   15130:	68fb      	ldr	r3, [r7, #12]
   15132:	88db      	ldrh	r3, [r3, #6]
   15134:	4619      	mov	r1, r3
   15136:	4815      	ldr	r0, [pc, #84]	; (1518c <voles_conn_update+0x74>)
   15138:	f00b fafa 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("connInterval = 0x%x", evt->connInterval);
   1513c:	68fb      	ldr	r3, [r7, #12]
   1513e:	891b      	ldrh	r3, [r3, #8]
   15140:	4619      	mov	r1, r3
   15142:	4813      	ldr	r0, [pc, #76]	; (15190 <voles_conn_update+0x78>)
   15144:	f00b faf4 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("connLatency = 0x%x", evt->connLatency);
   15148:	68fb      	ldr	r3, [r7, #12]
   1514a:	895b      	ldrh	r3, [r3, #10]
   1514c:	4619      	mov	r1, r3
   1514e:	4811      	ldr	r0, [pc, #68]	; (15194 <voles_conn_update+0x7c>)
   15150:	f00b faee 	bl	20730 <WsfTrace>
    APP_TRACE_INFO1("supTimeout = 0x%x", evt->supTimeout);
   15154:	68fb      	ldr	r3, [r7, #12]
   15156:	899b      	ldrh	r3, [r3, #12]
   15158:	4619      	mov	r1, r3
   1515a:	480f      	ldr	r0, [pc, #60]	; (15198 <voles_conn_update+0x80>)
   1515c:	f00b fae8 	bl	20730 <WsfTrace>

    
    if(evt->connInterval > (15/1.25))
   15160:	68fb      	ldr	r3, [r7, #12]
   15162:	891b      	ldrh	r3, [r3, #8]
   15164:	4618      	mov	r0, r3
   15166:	f7f7 fb6b 	bl	c840 <__aeabi_i2d>
   1516a:	f04f 0200 	mov.w	r2, #0
   1516e:	4b0b      	ldr	r3, [pc, #44]	; (1519c <voles_conn_update+0x84>)
   15170:	f7f7 fc4a 	bl	ca08 <__aeabi_dcmpgt>
   15174:	4603      	mov	r3, r0
   15176:	2b00      	cmp	r3, #0
   15178:	d100      	bne.n	1517c <voles_conn_update+0x64>
    {
        // retry
        voles_conn_parameter_req();
    }
}
   1517a:	e001      	b.n	15180 <voles_conn_update+0x68>
        voles_conn_parameter_req();
   1517c:	f7ff ff56 	bl	1502c <voles_conn_parameter_req>
}
   15180:	bf00      	nop
   15182:	3710      	adds	r7, #16
   15184:	46bd      	mov	sp, r7
   15186:	bd80      	pop	{r7, pc}
   15188:	0003aff4 	.word	0x0003aff4
   1518c:	0003b014 	.word	0x0003b014
   15190:	0003b024 	.word	0x0003b024
   15194:	0003b038 	.word	0x0003b038
   15198:	0003b04c 	.word	0x0003b04c
   1519c:	40280000 	.word	0x40280000

000151a0 <voles_msbc_encode_voice_data>:



int32_t voles_msbc_encode_voice_data(uint8_t *input, uint8_t *output, uint16_t len)
{
   151a0:	b580      	push	{r7, lr}
   151a2:	b088      	sub	sp, #32
   151a4:	af02      	add	r7, sp, #8
   151a6:	60f8      	str	r0, [r7, #12]
   151a8:	60b9      	str	r1, [r7, #8]
   151aa:	4613      	mov	r3, r2
   151ac:	80fb      	strh	r3, [r7, #6]
    int32_t i32CompressedLen = 0;
   151ae:	2300      	movs	r3, #0
   151b0:	617b      	str	r3, [r7, #20]

    if((input==NULL) || (output==NULL))
   151b2:	68fb      	ldr	r3, [r7, #12]
   151b4:	2b00      	cmp	r3, #0
   151b6:	d002      	beq.n	151be <voles_msbc_encode_voice_data+0x1e>
   151b8:	68bb      	ldr	r3, [r7, #8]
   151ba:	2b00      	cmp	r3, #0
   151bc:	d101      	bne.n	151c2 <voles_msbc_encode_voice_data+0x22>
    {
      return 0;
   151be:	2300      	movs	r3, #0
   151c0:	e011      	b.n	151e6 <voles_msbc_encode_voice_data+0x46>
    }
    
    sbc_encoder_encode(&g_SBCInstance, input, len, 
   151c2:	88fa      	ldrh	r2, [r7, #6]
   151c4:	f107 0314 	add.w	r3, r7, #20
   151c8:	9301      	str	r3, [sp, #4]
   151ca:	2339      	movs	r3, #57	; 0x39
   151cc:	9300      	str	r3, [sp, #0]
   151ce:	68bb      	ldr	r3, [r7, #8]
   151d0:	68f9      	ldr	r1, [r7, #12]
   151d2:	4807      	ldr	r0, [pc, #28]	; (151f0 <voles_msbc_encode_voice_data+0x50>)
   151d4:	f00a fd1d 	bl	1fc12 <sbc_encoder_encode>
            output, CODEC_MSBC_OUTPUT_SIZE, (int *)&i32CompressedLen);

    APP_TRACE_INFO2("voles encode, input len:%d, compressedLen:%d", len, i32CompressedLen);
   151d8:	88fb      	ldrh	r3, [r7, #6]
   151da:	697a      	ldr	r2, [r7, #20]
   151dc:	4619      	mov	r1, r3
   151de:	4805      	ldr	r0, [pc, #20]	; (151f4 <voles_msbc_encode_voice_data+0x54>)
   151e0:	f00b faa6 	bl	20730 <WsfTrace>

    return i32CompressedLen;
   151e4:	697b      	ldr	r3, [r7, #20]
}
   151e6:	4618      	mov	r0, r3
   151e8:	3718      	adds	r7, #24
   151ea:	46bd      	mov	sp, r7
   151ec:	bd80      	pop	{r7, pc}
   151ee:	bf00      	nop
   151f0:	10019638 	.word	0x10019638
   151f4:	0003b060 	.word	0x0003b060

000151f8 <voles_set_codec_type>:

int voles_set_codec_type(eVoleCodecType codec_type)
{
   151f8:	b580      	push	{r7, lr}
   151fa:	b082      	sub	sp, #8
   151fc:	af00      	add	r7, sp, #0
   151fe:	4603      	mov	r3, r0
   15200:	71fb      	strb	r3, [r7, #7]
    APP_TRACE_INFO1("set codec type:%s", ((codec_type==0)?"MSBC code":"OPUS codec"));
   15202:	79fb      	ldrb	r3, [r7, #7]
   15204:	2b00      	cmp	r3, #0
   15206:	d101      	bne.n	1520c <voles_set_codec_type+0x14>
   15208:	4b09      	ldr	r3, [pc, #36]	; (15230 <voles_set_codec_type+0x38>)
   1520a:	e000      	b.n	1520e <voles_set_codec_type+0x16>
   1520c:	4b09      	ldr	r3, [pc, #36]	; (15234 <voles_set_codec_type+0x3c>)
   1520e:	4619      	mov	r1, r3
   15210:	4809      	ldr	r0, [pc, #36]	; (15238 <voles_set_codec_type+0x40>)
   15212:	f00b fa8d 	bl	20730 <WsfTrace>
    
    if(codec_type != VOLE_CODEC_TYPE_INVALID)
   15216:	79fb      	ldrb	r3, [r7, #7]
   15218:	2bff      	cmp	r3, #255	; 0xff
   1521a:	d004      	beq.n	15226 <voles_set_codec_type+0x2e>
    {
        g_vole_codec_type = codec_type;
   1521c:	4a07      	ldr	r2, [pc, #28]	; (1523c <voles_set_codec_type+0x44>)
   1521e:	79fb      	ldrb	r3, [r7, #7]
   15220:	7013      	strb	r3, [r2, #0]
        return codec_type;
   15222:	79fb      	ldrb	r3, [r7, #7]
   15224:	e000      	b.n	15228 <voles_set_codec_type+0x30>
    }
    else
    {
        return VOLE_CODEC_TYPE_INVALID;
   15226:	23ff      	movs	r3, #255	; 0xff
    }
}
   15228:	4618      	mov	r0, r3
   1522a:	3708      	adds	r7, #8
   1522c:	46bd      	mov	sp, r7
   1522e:	bd80      	pop	{r7, pc}
   15230:	0003b090 	.word	0x0003b090
   15234:	0003b09c 	.word	0x0003b09c
   15238:	0003b0a8 	.word	0x0003b0a8
   1523c:	1004425d 	.word	0x1004425d

00015240 <voles_get_codec_type>:

eVoleCodecType voles_get_codec_type(void)
{
   15240:	b480      	push	{r7}
   15242:	af00      	add	r7, sp, #0
    return g_vole_codec_type;
   15244:	4b03      	ldr	r3, [pc, #12]	; (15254 <voles_get_codec_type+0x14>)
   15246:	781b      	ldrb	r3, [r3, #0]
}
   15248:	4618      	mov	r0, r3
   1524a:	46bd      	mov	sp, r7
   1524c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15250:	4770      	bx	lr
   15252:	bf00      	nop
   15254:	1004425d 	.word	0x1004425d

00015258 <voles_ble_buffer_size>:

// get the size for each sending packet
int voles_ble_buffer_size(void)
{
   15258:	b580      	push	{r7, lr}
   1525a:	b082      	sub	sp, #8
   1525c:	af00      	add	r7, sp, #0
    eVoleCodecType codec_type = voles_get_codec_type();
   1525e:	f7ff ffef 	bl	15240 <voles_get_codec_type>
   15262:	4603      	mov	r3, r0
   15264:	70fb      	strb	r3, [r7, #3]
    int buffer_size = 0;
   15266:	2300      	movs	r3, #0
   15268:	607b      	str	r3, [r7, #4]

    switch(codec_type)
   1526a:	78fb      	ldrb	r3, [r7, #3]
   1526c:	2b00      	cmp	r3, #0
   1526e:	d002      	beq.n	15276 <voles_ble_buffer_size+0x1e>
   15270:	2b01      	cmp	r3, #1
   15272:	d003      	beq.n	1527c <voles_ble_buffer_size+0x24>
        case OPUS_CODEC_IN_USE:
            buffer_size = BLE_OPUS_DATA_BUFFER_SIZE;
        break;

        default:
        break;
   15274:	e005      	b.n	15282 <voles_ble_buffer_size+0x2a>
            buffer_size = BLE_MSBC_DATA_BUFFER_SIZE;
   15276:	2372      	movs	r3, #114	; 0x72
   15278:	607b      	str	r3, [r7, #4]
        break;
   1527a:	e002      	b.n	15282 <voles_ble_buffer_size+0x2a>
            buffer_size = BLE_OPUS_DATA_BUFFER_SIZE;
   1527c:	23a0      	movs	r3, #160	; 0xa0
   1527e:	607b      	str	r3, [r7, #4]
        break;
   15280:	bf00      	nop
    }

    return buffer_size;
   15282:	687b      	ldr	r3, [r7, #4]
}
   15284:	4618      	mov	r0, r3
   15286:	3708      	adds	r7, #8
   15288:	46bd      	mov	sp, r7
   1528a:	bd80      	pop	{r7, pc}

0001528c <voles_transmit_voice_data>:

void voles_transmit_voice_data(void)
{
   1528c:	b580      	push	{r7, lr}
   1528e:	b0a0      	sub	sp, #128	; 0x80
   15290:	af00      	add	r7, sp, #0
    volePacket_t *txPkt = &volesCb.core.txPkt;
   15292:	4b72      	ldr	r3, [pc, #456]	; (1545c <voles_transmit_voice_data+0x1d0>)
   15294:	677b      	str	r3, [r7, #116]	; 0x74
    uint32_t      offset = txPkt->offset;
   15296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15298:	681b      	ldr	r3, [r3, #0]
   1529a:	673b      	str	r3, [r7, #112]	; 0x70
    int           remain_data_len = 0;
   1529c:	2300      	movs	r3, #0
   1529e:	66fb      	str	r3, [r7, #108]	; 0x6c
    int           enc_data_len = 0;
   152a0:	2300      	movs	r3, #0
   152a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t       output_data[100] ={0};
   152a4:	1d3b      	adds	r3, r7, #4
   152a6:	2264      	movs	r2, #100	; 0x64
   152a8:	2100      	movs	r1, #0
   152aa:	4618      	mov	r0, r3
   152ac:	f7f7 f856 	bl	c35c <memset>
    int      output_len = 0;
   152b0:	2300      	movs	r3, #0
   152b2:	67bb      	str	r3, [r7, #120]	; 0x78
    static int    index = 0;
    eVoleCodecType codec_type = voles_get_codec_type();
   152b4:	f7ff ffc4 	bl	15240 <voles_get_codec_type>
   152b8:	4603      	mov	r3, r0
   152ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

    txPkt->len = sizeof(voice_data);
   152be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   152c0:	4a67      	ldr	r2, [pc, #412]	; (15460 <voles_transmit_voice_data+0x1d4>)
   152c2:	605a      	str	r2, [r3, #4]
    remain_data_len = txPkt->len - offset;
   152c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   152c6:	685a      	ldr	r2, [r3, #4]
   152c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   152ca:	1ad3      	subs	r3, r2, r3
   152cc:	66fb      	str	r3, [r7, #108]	; 0x6c

    if(codec_type == MSBC_CODEC_IN_USE)
   152ce:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   152d2:	2b00      	cmp	r3, #0
   152d4:	d105      	bne.n	152e2 <voles_transmit_voice_data+0x56>
    {
        enc_data_len = (remain_data_len>CODEC_MSBC_INPUT_SIZE)?CODEC_MSBC_INPUT_SIZE:remain_data_len;
   152d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   152d8:	2bf0      	cmp	r3, #240	; 0xf0
   152da:	bfa8      	it	ge
   152dc:	23f0      	movge	r3, #240	; 0xf0
   152de:	67fb      	str	r3, [r7, #124]	; 0x7c
   152e0:	e00a      	b.n	152f8 <voles_transmit_voice_data+0x6c>
    }
    else if(codec_type == OPUS_CODEC_IN_USE)
   152e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   152e6:	2b01      	cmp	r3, #1
   152e8:	d106      	bne.n	152f8 <voles_transmit_voice_data+0x6c>
    {
        enc_data_len = (remain_data_len>CODEC_OPUS_INPUT_SIZE)?CODEC_OPUS_INPUT_SIZE:remain_data_len;
   152ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   152ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   152f0:	bfa8      	it	ge
   152f2:	f44f 73a0 	movge.w	r3, #320	; 0x140
   152f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    }

    APP_TRACE_INFO3("send %s encode data, total len:%d, offset:%d", (codec_type==MSBC_CODEC_IN_USE)?"mSBC":"Opus",
   152f8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   152fc:	2b00      	cmp	r3, #0
   152fe:	d101      	bne.n	15304 <voles_transmit_voice_data+0x78>
   15300:	4958      	ldr	r1, [pc, #352]	; (15464 <voles_transmit_voice_data+0x1d8>)
   15302:	e000      	b.n	15306 <voles_transmit_voice_data+0x7a>
   15304:	4958      	ldr	r1, [pc, #352]	; (15468 <voles_transmit_voice_data+0x1dc>)
   15306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15308:	685a      	ldr	r2, [r3, #4]
   1530a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1530c:	4857      	ldr	r0, [pc, #348]	; (1546c <voles_transmit_voice_data+0x1e0>)
   1530e:	f00b fa0f 	bl	20730 <WsfTrace>
                    txPkt->len,offset);
    
    if(offset >= txPkt->len)
   15312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15314:	685a      	ldr	r2, [r3, #4]
   15316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   15318:	429a      	cmp	r2, r3
   1531a:	d80e      	bhi.n	1533a <voles_transmit_voice_data+0xae>
    {
        am_app_led_off();
   1531c:	f004 fff0 	bl	1a300 <am_app_led_off>
        g_start_voice_send = FALSE;
   15320:	4b53      	ldr	r3, [pc, #332]	; (15470 <voles_transmit_voice_data+0x1e4>)
   15322:	2200      	movs	r2, #0
   15324:	701a      	strb	r2, [r3, #0]
        memset(output_data, 0x0, sizeof(output_data));
   15326:	1d3b      	adds	r3, r7, #4
   15328:	2264      	movs	r2, #100	; 0x64
   1532a:	2100      	movs	r1, #0
   1532c:	4618      	mov	r0, r3
   1532e:	f7f7 f815 	bl	c35c <memset>
        txPkt->offset = 0;
   15332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15334:	2200      	movs	r2, #0
   15336:	601a      	str	r2, [r3, #0]
   15338:	e037      	b.n	153aa <voles_transmit_voice_data+0x11e>
    }
    else
    {
        if(codec_type == MSBC_CODEC_IN_USE)
   1533a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1533e:	2b00      	cmp	r3, #0
   15340:	d111      	bne.n	15366 <voles_transmit_voice_data+0xda>
        {
            output_len = voles_msbc_encode_voice_data(&voice_data[offset+AUD_HEADER_LEN], output_data, enc_data_len);
   15342:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   15344:	332c      	adds	r3, #44	; 0x2c
   15346:	4a4b      	ldr	r2, [pc, #300]	; (15474 <voles_transmit_voice_data+0x1e8>)
   15348:	4413      	add	r3, r2
   1534a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1534c:	b292      	uxth	r2, r2
   1534e:	1d39      	adds	r1, r7, #4
   15350:	4618      	mov	r0, r3
   15352:	f7ff ff25 	bl	151a0 <voles_msbc_encode_voice_data>
   15356:	67b8      	str	r0, [r7, #120]	; 0x78
            txPkt->offset += enc_data_len;
   15358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1535a:	681a      	ldr	r2, [r3, #0]
   1535c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1535e:	441a      	add	r2, r3
   15360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15362:	601a      	str	r2, [r3, #0]
   15364:	e021      	b.n	153aa <voles_transmit_voice_data+0x11e>
        }
        else if(codec_type == OPUS_CODEC_IN_USE)
   15366:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   1536a:	2b01      	cmp	r3, #1
   1536c:	d11d      	bne.n	153aa <voles_transmit_voice_data+0x11e>
        {
            output_len = audio_enc_encode_frame((short *)&voice_data[offset+AUD_HEADER_LEN], enc_data_len, output_data);//octopus_encode(g_opusEnc, (short *)&voice_data[offset+AUD_HEADER_LEN], enc_data_len, output_data, CODEC_OPUS_OUTPUT_SIZE);  //opus_encode(g_opusEnc, (opus_int16*)&voice_data[offset+AUD_HEADER_LEN], enc_data_len, output_data, CODEC_OPUS_OUTPUT_SIZE);
   1536e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   15370:	332c      	adds	r3, #44	; 0x2c
   15372:	4a40      	ldr	r2, [pc, #256]	; (15474 <voles_transmit_voice_data+0x1e8>)
   15374:	4413      	add	r3, r2
   15376:	1d3a      	adds	r2, r7, #4
   15378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   1537a:	4618      	mov	r0, r3
   1537c:	f011 fc7c 	bl	26c78 <audio_enc_encode_frame>
   15380:	67b8      	str	r0, [r7, #120]	; 0x78
            APP_TRACE_INFO1("opus encode, output_len:%d",output_len);
   15382:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   15384:	483c      	ldr	r0, [pc, #240]	; (15478 <voles_transmit_voice_data+0x1ec>)
   15386:	f00b f9d3 	bl	20730 <WsfTrace>
            if(output_len == (CODEC_OPUS_OUTPUT_SIZE))
   1538a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1538c:	2b50      	cmp	r3, #80	; 0x50
   1538e:	d106      	bne.n	1539e <voles_transmit_voice_data+0x112>
            {
                txPkt->offset += (2*CODEC_OPUS_INPUT_SIZE);            
   15390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15392:	681b      	ldr	r3, [r3, #0]
   15394:	f503 7220 	add.w	r2, r3, #640	; 0x280
   15398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1539a:	601a      	str	r2, [r3, #0]
   1539c:	e005      	b.n	153aa <voles_transmit_voice_data+0x11e>
                //APP_TRACE_INFO1("opus_encode: ret:%d", output_len);
            }
            else
            {
                txPkt->offset += enc_data_len;
   1539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   153a0:	681a      	ldr	r2, [r3, #0]
   153a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   153a4:	441a      	add	r2, r3
   153a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   153a8:	601a      	str	r2, [r3, #0]
            }
        }
    }

    if(output_len>0)
   153aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   153ac:	2b00      	cmp	r3, #0
   153ae:	dd0e      	ble.n	153ce <voles_transmit_voice_data+0x142>
    {
        memcpy(&g_ble_data_buffer[index], output_data, output_len);
   153b0:	4b32      	ldr	r3, [pc, #200]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153b2:	681b      	ldr	r3, [r3, #0]
   153b4:	4a32      	ldr	r2, [pc, #200]	; (15480 <voles_transmit_voice_data+0x1f4>)
   153b6:	4413      	add	r3, r2
   153b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
   153ba:	1d39      	adds	r1, r7, #4
   153bc:	4618      	mov	r0, r3
   153be:	f7f6 fecf 	bl	c160 <memcpy>
        index += output_len;
   153c2:	4b2e      	ldr	r3, [pc, #184]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153c4:	681a      	ldr	r2, [r3, #0]
   153c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   153c8:	4413      	add	r3, r2
   153ca:	4a2c      	ldr	r2, [pc, #176]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153cc:	6013      	str	r3, [r2, #0]
    }

    if(index >= voles_ble_buffer_size() || output_len<=0)
   153ce:	f7ff ff43 	bl	15258 <voles_ble_buffer_size>
   153d2:	4602      	mov	r2, r0
   153d4:	4b29      	ldr	r3, [pc, #164]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153d6:	681b      	ldr	r3, [r3, #0]
   153d8:	429a      	cmp	r2, r3
   153da:	dd02      	ble.n	153e2 <voles_transmit_voice_data+0x156>
   153dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   153de:	2b00      	cmp	r3, #0
   153e0:	dc13      	bgt.n	1540a <voles_transmit_voice_data+0x17e>
    {
      if(index >0)
   153e2:	4b26      	ldr	r3, [pc, #152]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153e4:	681b      	ldr	r3, [r3, #0]
   153e6:	2b00      	cmp	r3, #0
   153e8:	dd33      	ble.n	15452 <voles_transmit_voice_data+0x1c6>
      {
      am_app_KWD_AMA_stream_send(g_ble_data_buffer, index);
   153ea:	4b24      	ldr	r3, [pc, #144]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153ec:	681b      	ldr	r3, [r3, #0]
   153ee:	4619      	mov	r1, r3
   153f0:	4823      	ldr	r0, [pc, #140]	; (15480 <voles_transmit_voice_data+0x1f4>)
   153f2:	f023 f89d 	bl	38530 <am_app_KWD_AMA_stream_send>
      index = 0;
   153f6:	4b21      	ldr	r3, [pc, #132]	; (1547c <voles_transmit_voice_data+0x1f0>)
   153f8:	2200      	movs	r2, #0
   153fa:	601a      	str	r2, [r3, #0]
      memset(g_ble_data_buffer, 0x0, sizeof(g_ble_data_buffer));
   153fc:	f240 2205 	movw	r2, #517	; 0x205
   15400:	2100      	movs	r1, #0
   15402:	481f      	ldr	r0, [pc, #124]	; (15480 <voles_transmit_voice_data+0x1f4>)
   15404:	f7f6 ffaa 	bl	c35c <memset>
      if(index >0)
   15408:	e023      	b.n	15452 <voles_transmit_voice_data+0x1c6>
      }
    }
    else
    {
        uint8_t output_size = ((voles_get_codec_type()==MSBC_CODEC_IN_USE)?CODEC_MSBC_OUTPUT_SIZE:(CODEC_OPUS_OUTPUT_SIZE));
   1540a:	f7ff ff19 	bl	15240 <voles_get_codec_type>
   1540e:	4603      	mov	r3, r0
   15410:	2b00      	cmp	r3, #0
   15412:	d101      	bne.n	15418 <voles_transmit_voice_data+0x18c>
   15414:	2339      	movs	r3, #57	; 0x39
   15416:	e000      	b.n	1541a <voles_transmit_voice_data+0x18e>
   15418:	2350      	movs	r3, #80	; 0x50
   1541a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

        if(output_len == output_size)
   1541e:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
   15422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   15424:	429a      	cmp	r2, r3
   15426:	d102      	bne.n	1542e <voles_transmit_voice_data+0x1a2>
        {
            voles_transmit_voice_data();
   15428:	f7ff ff30 	bl	1528c <voles_transmit_voice_data>
        {
            am_app_KWD_AMA_stream_send(output_data, output_len);
            index = 0;
        }
    }
}
   1542c:	e011      	b.n	15452 <voles_transmit_voice_data+0x1c6>
        else if(output_len>0 && output_len<output_size)
   1542e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   15430:	2b00      	cmp	r3, #0
   15432:	dd0e      	ble.n	15452 <voles_transmit_voice_data+0x1c6>
   15434:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
   15438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1543a:	429a      	cmp	r2, r3
   1543c:	dd09      	ble.n	15452 <voles_transmit_voice_data+0x1c6>
            am_app_KWD_AMA_stream_send(output_data, output_len);
   1543e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   15440:	1d3b      	adds	r3, r7, #4
   15442:	4611      	mov	r1, r2
   15444:	4618      	mov	r0, r3
   15446:	f023 f873 	bl	38530 <am_app_KWD_AMA_stream_send>
            index = 0;
   1544a:	4b0c      	ldr	r3, [pc, #48]	; (1547c <voles_transmit_voice_data+0x1f0>)
   1544c:	2200      	movs	r2, #0
   1544e:	601a      	str	r2, [r3, #0]
}
   15450:	e7ff      	b.n	15452 <voles_transmit_voice_data+0x1c6>
   15452:	bf00      	nop
   15454:	3780      	adds	r7, #128	; 0x80
   15456:	46bd      	mov	sp, r7
   15458:	bd80      	pop	{r7, pc}
   1545a:	bf00      	nop
   1545c:	10019678 	.word	0x10019678
   15460:	00014f2c 	.word	0x00014f2c
   15464:	0003b0bc 	.word	0x0003b0bc
   15468:	0003b0c4 	.word	0x0003b0c4
   1546c:	0003b0cc 	.word	0x0003b0cc
   15470:	10019939 	.word	0x10019939
   15474:	10002fb8 	.word	0x10002fb8
   15478:	0003b0fc 	.word	0x0003b0fc
   1547c:	100196c0 	.word	0x100196c0
   15480:	10044058 	.word	0x10044058

00015484 <volesHandleValueCnf>:
 *  \return None.
 */
/*************************************************************************************************/
static void
volesHandleValueCnf(attEvt_t *pMsg)
{
   15484:	b580      	push	{r7, lr}
   15486:	b082      	sub	sp, #8
   15488:	af00      	add	r7, sp, #0
   1548a:	6078      	str	r0, [r7, #4]
    if (pMsg->hdr.status == ATT_SUCCESS)
   1548c:	687b      	ldr	r3, [r7, #4]
   1548e:	78db      	ldrb	r3, [r3, #3]
   15490:	2b00      	cmp	r3, #0
   15492:	d106      	bne.n	154a2 <volesHandleValueCnf+0x1e>
    {
        if(g_start_voice_send)
   15494:	4b09      	ldr	r3, [pc, #36]	; (154bc <volesHandleValueCnf+0x38>)
   15496:	781b      	ldrb	r3, [r3, #0]
   15498:	2b00      	cmp	r3, #0
   1549a:	d00b      	beq.n	154b4 <volesHandleValueCnf+0x30>
        {
            voles_transmit_voice_data();
   1549c:	f7ff fef6 	bl	1528c <voles_transmit_voice_data>
    }
    else
    {
        APP_TRACE_WARN2("cnf status = %d, hdl = 0x%x\n", pMsg->hdr.status, pMsg->handle);
    }
}
   154a0:	e008      	b.n	154b4 <volesHandleValueCnf+0x30>
        APP_TRACE_WARN2("cnf status = %d, hdl = 0x%x\n", pMsg->hdr.status, pMsg->handle);
   154a2:	687b      	ldr	r3, [r7, #4]
   154a4:	78db      	ldrb	r3, [r3, #3]
   154a6:	4619      	mov	r1, r3
   154a8:	687b      	ldr	r3, [r7, #4]
   154aa:	895b      	ldrh	r3, [r3, #10]
   154ac:	461a      	mov	r2, r3
   154ae:	4804      	ldr	r0, [pc, #16]	; (154c0 <volesHandleValueCnf+0x3c>)
   154b0:	f00b f93e 	bl	20730 <WsfTrace>
}
   154b4:	bf00      	nop
   154b6:	3708      	adds	r7, #8
   154b8:	46bd      	mov	sp, r7
   154ba:	bd80      	pop	{r7, pc}
   154bc:	10019939 	.word	0x10019939
   154c0:	0003b118 	.word	0x0003b118

000154c4 <voles_opus_encoder_init>:

void voles_opus_encoder_init(void)
{
   154c4:	b580      	push	{r7, lr}
   154c6:	af00      	add	r7, sp, #0
    //
    // Opus codec init
    //
    audio_enc_init(0);
   154c8:	2000      	movs	r0, #0
   154ca:	f011 fbcb 	bl	26c64 <audio_enc_init>

    APP_TRACE_INFO0("Opus encoder initialization is finished!\r\n\n");
   154ce:	4802      	ldr	r0, [pc, #8]	; (154d8 <voles_opus_encoder_init+0x14>)
   154d0:	f00b f92e 	bl	20730 <WsfTrace>

}
   154d4:	bf00      	nop
   154d6:	bd80      	pop	{r7, pc}
   154d8:	0003b138 	.word	0x0003b138

000154dc <voles_init>:
//!
//! @return None
//
//*****************************************************************************
void voles_init(wsfHandlerId_t handlerId, eVoleCodecType codec_type)
{
   154dc:	b580      	push	{r7, lr}
   154de:	b082      	sub	sp, #8
   154e0:	af00      	add	r7, sp, #0
   154e2:	4603      	mov	r3, r0
   154e4:	460a      	mov	r2, r1
   154e6:	71fb      	strb	r3, [r7, #7]
   154e8:	4613      	mov	r3, r2
   154ea:	71bb      	strb	r3, [r7, #6]
    memset(&volesCb, 0, sizeof(volesCb));
   154ec:	2274      	movs	r2, #116	; 0x74
   154ee:	2100      	movs	r1, #0
   154f0:	480c      	ldr	r0, [pc, #48]	; (15524 <voles_init+0x48>)
   154f2:	f7f6 ff33 	bl	c35c <memset>
    volesCb.appHandlerId = handlerId;
   154f6:	4a0b      	ldr	r2, [pc, #44]	; (15524 <voles_init+0x48>)
   154f8:	79fb      	ldrb	r3, [r7, #7]
   154fa:	7453      	strb	r3, [r2, #17]

    volesCb.core.txPkt.data = voice_data;
   154fc:	4b09      	ldr	r3, [pc, #36]	; (15524 <voles_init+0x48>)
   154fe:	4a0a      	ldr	r2, [pc, #40]	; (15528 <voles_init+0x4c>)
   15500:	639a      	str	r2, [r3, #56]	; 0x38
    
    if(codec_type == MSBC_CODEC_IN_USE)
   15502:	79bb      	ldrb	r3, [r7, #6]
   15504:	2b00      	cmp	r3, #0
   15506:	d104      	bne.n	15512 <voles_init+0x36>
    {
        sbc_encode_init(&g_SBCInstance, 1);  //0: SBC
   15508:	2101      	movs	r1, #1
   1550a:	4808      	ldr	r0, [pc, #32]	; (1552c <voles_init+0x50>)
   1550c:	f00a fb6c 	bl	1fbe8 <sbc_encode_init>
    }
    else if(codec_type == OPUS_CODEC_IN_USE)
    {
        voles_opus_encoder_init();
    }
}
   15510:	e004      	b.n	1551c <voles_init+0x40>
    else if(codec_type == OPUS_CODEC_IN_USE)
   15512:	79bb      	ldrb	r3, [r7, #6]
   15514:	2b01      	cmp	r3, #1
   15516:	d101      	bne.n	1551c <voles_init+0x40>
        voles_opus_encoder_init();
   15518:	f7ff ffd4 	bl	154c4 <voles_opus_encoder_init>
}
   1551c:	bf00      	nop
   1551e:	3708      	adds	r7, #8
   15520:	46bd      	mov	sp, r7
   15522:	bd80      	pop	{r7, pc}
   15524:	1001964c 	.word	0x1001964c
   15528:	10002fb8 	.word	0x10002fb8
   1552c:	10019638 	.word	0x10019638

00015530 <voles_conn_close>:

static void
voles_conn_close(dmEvt_t *pMsg)
{
   15530:	b580      	push	{r7, lr}
   15532:	b084      	sub	sp, #16
   15534:	af00      	add	r7, sp, #0
   15536:	6078      	str	r0, [r7, #4]
    hciDisconnectCmplEvt_t *evt = (hciDisconnectCmplEvt_t*) pMsg;
   15538:	687b      	ldr	r3, [r7, #4]
   1553a:	60fb      	str	r3, [r7, #12]
    dmConnId_t connId = evt->hdr.param;
   1553c:	68fb      	ldr	r3, [r7, #12]
   1553e:	881b      	ldrh	r3, [r3, #0]
   15540:	72fb      	strb	r3, [r7, #11]
    /* clear connection */
    volesCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   15542:	7afb      	ldrb	r3, [r7, #11]
   15544:	3b01      	subs	r3, #1
   15546:	4a14      	ldr	r2, [pc, #80]	; (15598 <voles_conn_close+0x68>)
   15548:	2100      	movs	r1, #0
   1554a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    volesCb.conn[connId - 1].voleToSend = FALSE;
   1554e:	7afb      	ldrb	r3, [r7, #11]
   15550:	3b01      	subs	r3, #1
   15552:	4a11      	ldr	r2, [pc, #68]	; (15598 <voles_conn_close+0x68>)
   15554:	005b      	lsls	r3, r3, #1
   15556:	4413      	add	r3, r2
   15558:	2200      	movs	r2, #0
   1555a:	705a      	strb	r2, [r3, #1]

    WsfTimerStop(&volesCb.core.timeoutTimer);
   1555c:	480f      	ldr	r0, [pc, #60]	; (1559c <voles_conn_close+0x6c>)
   1555e:	f005 fc2f 	bl	1adc0 <WsfTimerStop>
    volesCb.core.txState = VOLE_STATE_INIT;
   15562:	4b0d      	ldr	r3, [pc, #52]	; (15598 <voles_conn_close+0x68>)
   15564:	2200      	movs	r2, #0
   15566:	761a      	strb	r2, [r3, #24]
    volesCb.core.rxState = VOLE_STATE_RX_IDLE;
   15568:	4b0b      	ldr	r3, [pc, #44]	; (15598 <voles_conn_close+0x68>)
   1556a:	2202      	movs	r2, #2
   1556c:	765a      	strb	r2, [r3, #25]
    volesCb.core.lastRxPktSn = 0;
   1556e:	4b0a      	ldr	r3, [pc, #40]	; (15598 <voles_conn_close+0x68>)
   15570:	2200      	movs	r2, #0
   15572:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    volesCb.core.txPktSn = 0;
   15576:	4b08      	ldr	r3, [pc, #32]	; (15598 <voles_conn_close+0x68>)
   15578:	2200      	movs	r2, #0
   1557a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    VoleResetPkt(&volesCb.core.rxPkt);
   1557e:	4808      	ldr	r0, [pc, #32]	; (155a0 <voles_conn_close+0x70>)
   15580:	f00a fb5d 	bl	1fc3e <VoleResetPkt>
    VoleResetPkt(&volesCb.core.txPkt);
   15584:	4807      	ldr	r0, [pc, #28]	; (155a4 <voles_conn_close+0x74>)
   15586:	f00a fb5a 	bl	1fc3e <VoleResetPkt>
    VoleResetPkt(&volesCb.core.ackPkt);
   1558a:	4807      	ldr	r0, [pc, #28]	; (155a8 <voles_conn_close+0x78>)
   1558c:	f00a fb57 	bl	1fc3e <VoleResetPkt>
}
   15590:	bf00      	nop
   15592:	3710      	adds	r7, #16
   15594:	46bd      	mov	sp, r7
   15596:	bd80      	pop	{r7, pc}
   15598:	1001964c 	.word	0x1001964c
   1559c:	1001969c 	.word	0x1001969c
   155a0:	10019668 	.word	0x10019668
   155a4:	10019678 	.word	0x10019678
   155a8:	10019688 	.word	0x10019688

000155ac <voles_proc_msg>:
    volesCb.txReady = false;
}


void voles_proc_msg(wsfMsgHdr_t *pMsg)
{
   155ac:	b580      	push	{r7, lr}
   155ae:	b082      	sub	sp, #8
   155b0:	af00      	add	r7, sp, #0
   155b2:	6078      	str	r0, [r7, #4]
    if (pMsg->event == DM_CONN_OPEN_IND)
   155b4:	687b      	ldr	r3, [r7, #4]
   155b6:	789b      	ldrb	r3, [r3, #2]
   155b8:	2b27      	cmp	r3, #39	; 0x27
   155ba:	d103      	bne.n	155c4 <voles_proc_msg+0x18>
    {
        voles_conn_open((dmEvt_t *) pMsg);
   155bc:	6878      	ldr	r0, [r7, #4]
   155be:	f7ff fd4f 	bl	15060 <voles_conn_open>
    }
    else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
    {
        volesHandleValueCnf((attEvt_t *) pMsg);
    }
}
   155c2:	e016      	b.n	155f2 <voles_proc_msg+0x46>
    else if (pMsg->event == DM_CONN_CLOSE_IND)
   155c4:	687b      	ldr	r3, [r7, #4]
   155c6:	789b      	ldrb	r3, [r3, #2]
   155c8:	2b28      	cmp	r3, #40	; 0x28
   155ca:	d103      	bne.n	155d4 <voles_proc_msg+0x28>
        voles_conn_close((dmEvt_t *) pMsg);
   155cc:	6878      	ldr	r0, [r7, #4]
   155ce:	f7ff ffaf 	bl	15530 <voles_conn_close>
}
   155d2:	e00e      	b.n	155f2 <voles_proc_msg+0x46>
    else if (pMsg->event == DM_CONN_UPDATE_IND)
   155d4:	687b      	ldr	r3, [r7, #4]
   155d6:	789b      	ldrb	r3, [r3, #2]
   155d8:	2b29      	cmp	r3, #41	; 0x29
   155da:	d103      	bne.n	155e4 <voles_proc_msg+0x38>
        voles_conn_update((dmEvt_t *) pMsg);
   155dc:	6878      	ldr	r0, [r7, #4]
   155de:	f7ff fd9b 	bl	15118 <voles_conn_update>
}
   155e2:	e006      	b.n	155f2 <voles_proc_msg+0x46>
    else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   155e4:	687b      	ldr	r3, [r7, #4]
   155e6:	789b      	ldrb	r3, [r3, #2]
   155e8:	2b0f      	cmp	r3, #15
   155ea:	d102      	bne.n	155f2 <voles_proc_msg+0x46>
        volesHandleValueCnf((attEvt_t *) pMsg);
   155ec:	6878      	ldr	r0, [r7, #4]
   155ee:	f7ff ff49 	bl	15484 <volesHandleValueCnf>
}
   155f2:	bf00      	nop
   155f4:	3708      	adds	r7, #8
   155f6:	46bd      	mov	sp, r7
   155f8:	bd80      	pop	{r7, pc}

000155fa <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   155fa:	b580      	push	{r7, lr}
   155fc:	b084      	sub	sp, #16
   155fe:	af00      	add	r7, sp, #0
   15600:	4603      	mov	r3, r0
   15602:	460a      	mov	r2, r1
   15604:	80fb      	strh	r3, [r7, #6]
   15606:	4613      	mov	r3, r2
   15608:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   1560a:	88bb      	ldrh	r3, [r7, #4]
   1560c:	3303      	adds	r3, #3
   1560e:	b29b      	uxth	r3, r3
   15610:	4618      	mov	r0, r3
   15612:	f005 f9f6 	bl	1aa02 <WsfMsgAlloc>
   15616:	60f8      	str	r0, [r7, #12]
   15618:	68fb      	ldr	r3, [r7, #12]
   1561a:	2b00      	cmp	r3, #0
   1561c:	d016      	beq.n	1564c <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	1c5a      	adds	r2, r3, #1
   15622:	60fa      	str	r2, [r7, #12]
   15624:	88fa      	ldrh	r2, [r7, #6]
   15626:	b2d2      	uxtb	r2, r2
   15628:	701a      	strb	r2, [r3, #0]
   1562a:	68fb      	ldr	r3, [r7, #12]
   1562c:	1c5a      	adds	r2, r3, #1
   1562e:	60fa      	str	r2, [r7, #12]
   15630:	88fa      	ldrh	r2, [r7, #6]
   15632:	0a12      	lsrs	r2, r2, #8
   15634:	b292      	uxth	r2, r2
   15636:	b2d2      	uxtb	r2, r2
   15638:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   1563a:	68fb      	ldr	r3, [r7, #12]
   1563c:	1c5a      	adds	r2, r3, #1
   1563e:	60fa      	str	r2, [r7, #12]
   15640:	88ba      	ldrh	r2, [r7, #4]
   15642:	b2d2      	uxtb	r2, r2
   15644:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	3b03      	subs	r3, #3
   1564a:	60fb      	str	r3, [r7, #12]
  }

  return p;
   1564c:	68fb      	ldr	r3, [r7, #12]
}
   1564e:	4618      	mov	r0, r3
   15650:	3710      	adds	r7, #16
   15652:	46bd      	mov	sp, r7
   15654:	bd80      	pop	{r7, pc}
	...

00015658 <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   15658:	b580      	push	{r7, lr}
   1565a:	b084      	sub	sp, #16
   1565c:	af00      	add	r7, sp, #0
   1565e:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   15660:	687b      	ldr	r3, [r7, #4]
   15662:	2b00      	cmp	r3, #0
   15664:	d004      	beq.n	15670 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   15666:	687a      	ldr	r2, [r7, #4]
   15668:	2100      	movs	r1, #0
   1566a:	4817      	ldr	r0, [pc, #92]	; (156c8 <hciCmdSend+0x70>)
   1566c:	f005 fa05 	bl	1aa7a <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   15670:	4b16      	ldr	r3, [pc, #88]	; (156cc <hciCmdSend+0x74>)
   15672:	7e9b      	ldrb	r3, [r3, #26]
   15674:	2b00      	cmp	r3, #0
   15676:	d023      	beq.n	156c0 <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   15678:	f107 030b 	add.w	r3, r7, #11
   1567c:	4619      	mov	r1, r3
   1567e:	4812      	ldr	r0, [pc, #72]	; (156c8 <hciCmdSend+0x70>)
   15680:	f005 fa10 	bl	1aaa4 <WsfMsgDeq>
   15684:	60f8      	str	r0, [r7, #12]
   15686:	68fb      	ldr	r3, [r7, #12]
   15688:	2b00      	cmp	r3, #0
   1568a:	d019      	beq.n	156c0 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   1568c:	4b0f      	ldr	r3, [pc, #60]	; (156cc <hciCmdSend+0x74>)
   1568e:	7e9b      	ldrb	r3, [r3, #26]
   15690:	3b01      	subs	r3, #1
   15692:	b2da      	uxtb	r2, r3
   15694:	4b0d      	ldr	r3, [pc, #52]	; (156cc <hciCmdSend+0x74>)
   15696:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   15698:	68fb      	ldr	r3, [r7, #12]
   1569a:	781b      	ldrb	r3, [r3, #0]
   1569c:	b29a      	uxth	r2, r3
   1569e:	68fb      	ldr	r3, [r7, #12]
   156a0:	3301      	adds	r3, #1
   156a2:	781b      	ldrb	r3, [r3, #0]
   156a4:	b29b      	uxth	r3, r3
   156a6:	021b      	lsls	r3, r3, #8
   156a8:	b29b      	uxth	r3, r3
   156aa:	4413      	add	r3, r2
   156ac:	b29a      	uxth	r2, r3
   156ae:	4b07      	ldr	r3, [pc, #28]	; (156cc <hciCmdSend+0x74>)
   156b0:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   156b2:	210a      	movs	r1, #10
   156b4:	4805      	ldr	r0, [pc, #20]	; (156cc <hciCmdSend+0x74>)
   156b6:	f005 fb5d 	bl	1ad74 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   156ba:	68f8      	ldr	r0, [r7, #12]
   156bc:	f003 facd 	bl	18c5a <hciTrSendCmd>
    }
  }
}
   156c0:	bf00      	nop
   156c2:	3710      	adds	r7, #16
   156c4:	46bd      	mov	sp, r7
   156c6:	bd80      	pop	{r7, pc}
   156c8:	10044270 	.word	0x10044270
   156cc:	10044260 	.word	0x10044260

000156d0 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   156d0:	b480      	push	{r7}
   156d2:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   156d4:	4b0a      	ldr	r3, [pc, #40]	; (15700 <hciCmdInit+0x30>)
   156d6:	2200      	movs	r2, #0
   156d8:	611a      	str	r2, [r3, #16]
   156da:	4b09      	ldr	r3, [pc, #36]	; (15700 <hciCmdInit+0x30>)
   156dc:	2200      	movs	r2, #0
   156de:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   156e0:	4b07      	ldr	r3, [pc, #28]	; (15700 <hciCmdInit+0x30>)
   156e2:	2201      	movs	r2, #1
   156e4:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   156e6:	4b06      	ldr	r3, [pc, #24]	; (15700 <hciCmdInit+0x30>)
   156e8:	2201      	movs	r2, #1
   156ea:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   156ec:	4b05      	ldr	r3, [pc, #20]	; (15704 <hciCmdInit+0x34>)
   156ee:	7e1a      	ldrb	r2, [r3, #24]
   156f0:	4b03      	ldr	r3, [pc, #12]	; (15700 <hciCmdInit+0x30>)
   156f2:	721a      	strb	r2, [r3, #8]
}
   156f4:	bf00      	nop
   156f6:	46bd      	mov	sp, r7
   156f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   156fc:	4770      	bx	lr
   156fe:	bf00      	nop
   15700:	10044260 	.word	0x10044260
   15704:	10044390 	.word	0x10044390

00015708 <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   15708:	b580      	push	{r7, lr}
   1570a:	b082      	sub	sp, #8
   1570c:	af00      	add	r7, sp, #0
   1570e:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   15710:	f00b f990 	bl	20a34 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   15714:	2000      	movs	r0, #0
   15716:	f00b f893 	bl	20840 <HciDrvRadioBoot>
  DmDevReset();
   1571a:	f7fa fe23 	bl	10364 <DmDevReset>
}
   1571e:	bf00      	nop
   15720:	3708      	adds	r7, #8
   15722:	46bd      	mov	sp, r7
   15724:	bd80      	pop	{r7, pc}
	...

00015728 <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   15728:	b580      	push	{r7, lr}
   1572a:	b082      	sub	sp, #8
   1572c:	af00      	add	r7, sp, #0
   1572e:	4603      	mov	r3, r0
   15730:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   15732:	4806      	ldr	r0, [pc, #24]	; (1574c <hciCmdRecvCmpl+0x24>)
   15734:	f005 fb44 	bl	1adc0 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   15738:	4b04      	ldr	r3, [pc, #16]	; (1574c <hciCmdRecvCmpl+0x24>)
   1573a:	2201      	movs	r2, #1
   1573c:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   1573e:	2000      	movs	r0, #0
   15740:	f7ff ff8a 	bl	15658 <hciCmdSend>
}
   15744:	bf00      	nop
   15746:	3708      	adds	r7, #8
   15748:	46bd      	mov	sp, r7
   1574a:	bd80      	pop	{r7, pc}
   1574c:	10044260 	.word	0x10044260

00015750 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   15750:	b580      	push	{r7, lr}
   15752:	b084      	sub	sp, #16
   15754:	af00      	add	r7, sp, #0
   15756:	4603      	mov	r3, r0
   15758:	460a      	mov	r2, r1
   1575a:	80fb      	strh	r3, [r7, #6]
   1575c:	4613      	mov	r3, r2
   1575e:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   15760:	2103      	movs	r1, #3
   15762:	f240 4006 	movw	r0, #1030	; 0x406
   15766:	f7ff ff48 	bl	155fa <hciCmdAlloc>
   1576a:	60f8      	str	r0, [r7, #12]
   1576c:	68fb      	ldr	r3, [r7, #12]
   1576e:	2b00      	cmp	r3, #0
   15770:	d018      	beq.n	157a4 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15772:	68fb      	ldr	r3, [r7, #12]
   15774:	3303      	adds	r3, #3
   15776:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15778:	68bb      	ldr	r3, [r7, #8]
   1577a:	1c5a      	adds	r2, r3, #1
   1577c:	60ba      	str	r2, [r7, #8]
   1577e:	88fa      	ldrh	r2, [r7, #6]
   15780:	b2d2      	uxtb	r2, r2
   15782:	701a      	strb	r2, [r3, #0]
   15784:	68bb      	ldr	r3, [r7, #8]
   15786:	1c5a      	adds	r2, r3, #1
   15788:	60ba      	str	r2, [r7, #8]
   1578a:	88fa      	ldrh	r2, [r7, #6]
   1578c:	0a12      	lsrs	r2, r2, #8
   1578e:	b292      	uxth	r2, r2
   15790:	b2d2      	uxtb	r2, r2
   15792:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   15794:	68bb      	ldr	r3, [r7, #8]
   15796:	1c5a      	adds	r2, r3, #1
   15798:	60ba      	str	r2, [r7, #8]
   1579a:	797a      	ldrb	r2, [r7, #5]
   1579c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1579e:	68f8      	ldr	r0, [r7, #12]
   157a0:	f7ff ff5a 	bl	15658 <hciCmdSend>
  }
}
   157a4:	bf00      	nop
   157a6:	3710      	adds	r7, #16
   157a8:	46bd      	mov	sp, r7
   157aa:	bd80      	pop	{r7, pc}

000157ac <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   157ac:	b580      	push	{r7, lr}
   157ae:	b084      	sub	sp, #16
   157b0:	af00      	add	r7, sp, #0
   157b2:	4603      	mov	r3, r0
   157b4:	6039      	str	r1, [r7, #0]
   157b6:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   157b8:	2107      	movs	r1, #7
   157ba:	f242 0011 	movw	r0, #8209	; 0x2011
   157be:	f7ff ff1c 	bl	155fa <hciCmdAlloc>
   157c2:	60f8      	str	r0, [r7, #12]
   157c4:	68fb      	ldr	r3, [r7, #12]
   157c6:	2b00      	cmp	r3, #0
   157c8:	d011      	beq.n	157ee <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   157ca:	68fb      	ldr	r3, [r7, #12]
   157cc:	3303      	adds	r3, #3
   157ce:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   157d0:	68bb      	ldr	r3, [r7, #8]
   157d2:	1c5a      	adds	r2, r3, #1
   157d4:	60ba      	str	r2, [r7, #8]
   157d6:	79fa      	ldrb	r2, [r7, #7]
   157d8:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   157da:	6839      	ldr	r1, [r7, #0]
   157dc:	68b8      	ldr	r0, [r7, #8]
   157de:	f00a fa38 	bl	1fc52 <BdaCpy>
   157e2:	68bb      	ldr	r3, [r7, #8]
   157e4:	3306      	adds	r3, #6
   157e6:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   157e8:	68f8      	ldr	r0, [r7, #12]
   157ea:	f7ff ff35 	bl	15658 <hciCmdSend>
  }
}
   157ee:	bf00      	nop
   157f0:	3710      	adds	r7, #16
   157f2:	46bd      	mov	sp, r7
   157f4:	bd80      	pop	{r7, pc}

000157f6 <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   157f6:	b580      	push	{r7, lr}
   157f8:	b082      	sub	sp, #8
   157fa:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   157fc:	2100      	movs	r1, #0
   157fe:	f242 0010 	movw	r0, #8208	; 0x2010
   15802:	f7ff fefa 	bl	155fa <hciCmdAlloc>
   15806:	6078      	str	r0, [r7, #4]
   15808:	687b      	ldr	r3, [r7, #4]
   1580a:	2b00      	cmp	r3, #0
   1580c:	d002      	beq.n	15814 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1580e:	6878      	ldr	r0, [r7, #4]
   15810:	f7ff ff22 	bl	15658 <hciCmdSend>
  }
}
   15814:	bf00      	nop
   15816:	3708      	adds	r7, #8
   15818:	46bd      	mov	sp, r7
   1581a:	bd80      	pop	{r7, pc}

0001581c <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   1581c:	b580      	push	{r7, lr}
   1581e:	b084      	sub	sp, #16
   15820:	af00      	add	r7, sp, #0
   15822:	4603      	mov	r3, r0
   15824:	6039      	str	r1, [r7, #0]
   15826:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   15828:	210e      	movs	r1, #14
   1582a:	f242 0013 	movw	r0, #8211	; 0x2013
   1582e:	f7ff fee4 	bl	155fa <hciCmdAlloc>
   15832:	60f8      	str	r0, [r7, #12]
   15834:	68fb      	ldr	r3, [r7, #12]
   15836:	2b00      	cmp	r3, #0
   15838:	d073      	beq.n	15922 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1583a:	68fb      	ldr	r3, [r7, #12]
   1583c:	3303      	adds	r3, #3
   1583e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15840:	68bb      	ldr	r3, [r7, #8]
   15842:	1c5a      	adds	r2, r3, #1
   15844:	60ba      	str	r2, [r7, #8]
   15846:	88fa      	ldrh	r2, [r7, #6]
   15848:	b2d2      	uxtb	r2, r2
   1584a:	701a      	strb	r2, [r3, #0]
   1584c:	68bb      	ldr	r3, [r7, #8]
   1584e:	1c5a      	adds	r2, r3, #1
   15850:	60ba      	str	r2, [r7, #8]
   15852:	88fa      	ldrh	r2, [r7, #6]
   15854:	0a12      	lsrs	r2, r2, #8
   15856:	b292      	uxth	r2, r2
   15858:	b2d2      	uxtb	r2, r2
   1585a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   1585c:	68bb      	ldr	r3, [r7, #8]
   1585e:	1c5a      	adds	r2, r3, #1
   15860:	60ba      	str	r2, [r7, #8]
   15862:	683a      	ldr	r2, [r7, #0]
   15864:	8812      	ldrh	r2, [r2, #0]
   15866:	b2d2      	uxtb	r2, r2
   15868:	701a      	strb	r2, [r3, #0]
   1586a:	68bb      	ldr	r3, [r7, #8]
   1586c:	1c5a      	adds	r2, r3, #1
   1586e:	60ba      	str	r2, [r7, #8]
   15870:	683a      	ldr	r2, [r7, #0]
   15872:	8812      	ldrh	r2, [r2, #0]
   15874:	0a12      	lsrs	r2, r2, #8
   15876:	b292      	uxth	r2, r2
   15878:	b2d2      	uxtb	r2, r2
   1587a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   1587c:	68bb      	ldr	r3, [r7, #8]
   1587e:	1c5a      	adds	r2, r3, #1
   15880:	60ba      	str	r2, [r7, #8]
   15882:	683a      	ldr	r2, [r7, #0]
   15884:	8852      	ldrh	r2, [r2, #2]
   15886:	b2d2      	uxtb	r2, r2
   15888:	701a      	strb	r2, [r3, #0]
   1588a:	68bb      	ldr	r3, [r7, #8]
   1588c:	1c5a      	adds	r2, r3, #1
   1588e:	60ba      	str	r2, [r7, #8]
   15890:	683a      	ldr	r2, [r7, #0]
   15892:	8852      	ldrh	r2, [r2, #2]
   15894:	0a12      	lsrs	r2, r2, #8
   15896:	b292      	uxth	r2, r2
   15898:	b2d2      	uxtb	r2, r2
   1589a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   1589c:	68bb      	ldr	r3, [r7, #8]
   1589e:	1c5a      	adds	r2, r3, #1
   158a0:	60ba      	str	r2, [r7, #8]
   158a2:	683a      	ldr	r2, [r7, #0]
   158a4:	8892      	ldrh	r2, [r2, #4]
   158a6:	b2d2      	uxtb	r2, r2
   158a8:	701a      	strb	r2, [r3, #0]
   158aa:	68bb      	ldr	r3, [r7, #8]
   158ac:	1c5a      	adds	r2, r3, #1
   158ae:	60ba      	str	r2, [r7, #8]
   158b0:	683a      	ldr	r2, [r7, #0]
   158b2:	8892      	ldrh	r2, [r2, #4]
   158b4:	0a12      	lsrs	r2, r2, #8
   158b6:	b292      	uxth	r2, r2
   158b8:	b2d2      	uxtb	r2, r2
   158ba:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   158bc:	68bb      	ldr	r3, [r7, #8]
   158be:	1c5a      	adds	r2, r3, #1
   158c0:	60ba      	str	r2, [r7, #8]
   158c2:	683a      	ldr	r2, [r7, #0]
   158c4:	88d2      	ldrh	r2, [r2, #6]
   158c6:	b2d2      	uxtb	r2, r2
   158c8:	701a      	strb	r2, [r3, #0]
   158ca:	68bb      	ldr	r3, [r7, #8]
   158cc:	1c5a      	adds	r2, r3, #1
   158ce:	60ba      	str	r2, [r7, #8]
   158d0:	683a      	ldr	r2, [r7, #0]
   158d2:	88d2      	ldrh	r2, [r2, #6]
   158d4:	0a12      	lsrs	r2, r2, #8
   158d6:	b292      	uxth	r2, r2
   158d8:	b2d2      	uxtb	r2, r2
   158da:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   158dc:	68bb      	ldr	r3, [r7, #8]
   158de:	1c5a      	adds	r2, r3, #1
   158e0:	60ba      	str	r2, [r7, #8]
   158e2:	683a      	ldr	r2, [r7, #0]
   158e4:	8912      	ldrh	r2, [r2, #8]
   158e6:	b2d2      	uxtb	r2, r2
   158e8:	701a      	strb	r2, [r3, #0]
   158ea:	68bb      	ldr	r3, [r7, #8]
   158ec:	1c5a      	adds	r2, r3, #1
   158ee:	60ba      	str	r2, [r7, #8]
   158f0:	683a      	ldr	r2, [r7, #0]
   158f2:	8912      	ldrh	r2, [r2, #8]
   158f4:	0a12      	lsrs	r2, r2, #8
   158f6:	b292      	uxth	r2, r2
   158f8:	b2d2      	uxtb	r2, r2
   158fa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   158fc:	68bb      	ldr	r3, [r7, #8]
   158fe:	1c5a      	adds	r2, r3, #1
   15900:	60ba      	str	r2, [r7, #8]
   15902:	683a      	ldr	r2, [r7, #0]
   15904:	8952      	ldrh	r2, [r2, #10]
   15906:	b2d2      	uxtb	r2, r2
   15908:	701a      	strb	r2, [r3, #0]
   1590a:	68bb      	ldr	r3, [r7, #8]
   1590c:	1c5a      	adds	r2, r3, #1
   1590e:	60ba      	str	r2, [r7, #8]
   15910:	683a      	ldr	r2, [r7, #0]
   15912:	8952      	ldrh	r2, [r2, #10]
   15914:	0a12      	lsrs	r2, r2, #8
   15916:	b292      	uxth	r2, r2
   15918:	b2d2      	uxtb	r2, r2
   1591a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1591c:	68f8      	ldr	r0, [r7, #12]
   1591e:	f7ff fe9b 	bl	15658 <hciCmdSend>
  }
}
   15922:	bf00      	nop
   15924:	3710      	adds	r7, #16
   15926:	46bd      	mov	sp, r7
   15928:	bd80      	pop	{r7, pc}

0001592a <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   1592a:	b590      	push	{r4, r7, lr}
   1592c:	b085      	sub	sp, #20
   1592e:	af00      	add	r7, sp, #0
   15930:	4604      	mov	r4, r0
   15932:	4608      	mov	r0, r1
   15934:	4611      	mov	r1, r2
   15936:	461a      	mov	r2, r3
   15938:	4623      	mov	r3, r4
   1593a:	80fb      	strh	r3, [r7, #6]
   1593c:	4603      	mov	r3, r0
   1593e:	80bb      	strh	r3, [r7, #4]
   15940:	460b      	mov	r3, r1
   15942:	807b      	strh	r3, [r7, #2]
   15944:	4613      	mov	r3, r2
   15946:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   15948:	210e      	movs	r1, #14
   1594a:	f242 0020 	movw	r0, #8224	; 0x2020
   1594e:	f7ff fe54 	bl	155fa <hciCmdAlloc>
   15952:	60f8      	str	r0, [r7, #12]
   15954:	68fb      	ldr	r3, [r7, #12]
   15956:	2b00      	cmp	r3, #0
   15958:	d067      	beq.n	15a2a <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1595a:	68fb      	ldr	r3, [r7, #12]
   1595c:	3303      	adds	r3, #3
   1595e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15960:	68bb      	ldr	r3, [r7, #8]
   15962:	1c5a      	adds	r2, r3, #1
   15964:	60ba      	str	r2, [r7, #8]
   15966:	88fa      	ldrh	r2, [r7, #6]
   15968:	b2d2      	uxtb	r2, r2
   1596a:	701a      	strb	r2, [r3, #0]
   1596c:	68bb      	ldr	r3, [r7, #8]
   1596e:	1c5a      	adds	r2, r3, #1
   15970:	60ba      	str	r2, [r7, #8]
   15972:	88fa      	ldrh	r2, [r7, #6]
   15974:	0a12      	lsrs	r2, r2, #8
   15976:	b292      	uxth	r2, r2
   15978:	b2d2      	uxtb	r2, r2
   1597a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   1597c:	68bb      	ldr	r3, [r7, #8]
   1597e:	1c5a      	adds	r2, r3, #1
   15980:	60ba      	str	r2, [r7, #8]
   15982:	88ba      	ldrh	r2, [r7, #4]
   15984:	b2d2      	uxtb	r2, r2
   15986:	701a      	strb	r2, [r3, #0]
   15988:	68bb      	ldr	r3, [r7, #8]
   1598a:	1c5a      	adds	r2, r3, #1
   1598c:	60ba      	str	r2, [r7, #8]
   1598e:	88ba      	ldrh	r2, [r7, #4]
   15990:	0a12      	lsrs	r2, r2, #8
   15992:	b292      	uxth	r2, r2
   15994:	b2d2      	uxtb	r2, r2
   15996:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   15998:	68bb      	ldr	r3, [r7, #8]
   1599a:	1c5a      	adds	r2, r3, #1
   1599c:	60ba      	str	r2, [r7, #8]
   1599e:	887a      	ldrh	r2, [r7, #2]
   159a0:	b2d2      	uxtb	r2, r2
   159a2:	701a      	strb	r2, [r3, #0]
   159a4:	68bb      	ldr	r3, [r7, #8]
   159a6:	1c5a      	adds	r2, r3, #1
   159a8:	60ba      	str	r2, [r7, #8]
   159aa:	887a      	ldrh	r2, [r7, #2]
   159ac:	0a12      	lsrs	r2, r2, #8
   159ae:	b292      	uxth	r2, r2
   159b0:	b2d2      	uxtb	r2, r2
   159b2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   159b4:	68bb      	ldr	r3, [r7, #8]
   159b6:	1c5a      	adds	r2, r3, #1
   159b8:	60ba      	str	r2, [r7, #8]
   159ba:	883a      	ldrh	r2, [r7, #0]
   159bc:	b2d2      	uxtb	r2, r2
   159be:	701a      	strb	r2, [r3, #0]
   159c0:	68bb      	ldr	r3, [r7, #8]
   159c2:	1c5a      	adds	r2, r3, #1
   159c4:	60ba      	str	r2, [r7, #8]
   159c6:	883a      	ldrh	r2, [r7, #0]
   159c8:	0a12      	lsrs	r2, r2, #8
   159ca:	b292      	uxth	r2, r2
   159cc:	b2d2      	uxtb	r2, r2
   159ce:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   159d0:	68bb      	ldr	r3, [r7, #8]
   159d2:	1c5a      	adds	r2, r3, #1
   159d4:	60ba      	str	r2, [r7, #8]
   159d6:	8c3a      	ldrh	r2, [r7, #32]
   159d8:	b2d2      	uxtb	r2, r2
   159da:	701a      	strb	r2, [r3, #0]
   159dc:	68bb      	ldr	r3, [r7, #8]
   159de:	1c5a      	adds	r2, r3, #1
   159e0:	60ba      	str	r2, [r7, #8]
   159e2:	8c3a      	ldrh	r2, [r7, #32]
   159e4:	0a12      	lsrs	r2, r2, #8
   159e6:	b292      	uxth	r2, r2
   159e8:	b2d2      	uxtb	r2, r2
   159ea:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   159ec:	68bb      	ldr	r3, [r7, #8]
   159ee:	1c5a      	adds	r2, r3, #1
   159f0:	60ba      	str	r2, [r7, #8]
   159f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   159f4:	b2d2      	uxtb	r2, r2
   159f6:	701a      	strb	r2, [r3, #0]
   159f8:	68bb      	ldr	r3, [r7, #8]
   159fa:	1c5a      	adds	r2, r3, #1
   159fc:	60ba      	str	r2, [r7, #8]
   159fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   15a00:	0a12      	lsrs	r2, r2, #8
   15a02:	b292      	uxth	r2, r2
   15a04:	b2d2      	uxtb	r2, r2
   15a06:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   15a08:	68bb      	ldr	r3, [r7, #8]
   15a0a:	1c5a      	adds	r2, r3, #1
   15a0c:	60ba      	str	r2, [r7, #8]
   15a0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   15a10:	b2d2      	uxtb	r2, r2
   15a12:	701a      	strb	r2, [r3, #0]
   15a14:	68bb      	ldr	r3, [r7, #8]
   15a16:	1c5a      	adds	r2, r3, #1
   15a18:	60ba      	str	r2, [r7, #8]
   15a1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   15a1c:	0a12      	lsrs	r2, r2, #8
   15a1e:	b292      	uxth	r2, r2
   15a20:	b2d2      	uxtb	r2, r2
   15a22:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15a24:	68f8      	ldr	r0, [r7, #12]
   15a26:	f7ff fe17 	bl	15658 <hciCmdSend>
  }
}
   15a2a:	bf00      	nop
   15a2c:	3714      	adds	r7, #20
   15a2e:	46bd      	mov	sp, r7
   15a30:	bd90      	pop	{r4, r7, pc}

00015a32 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   15a32:	b580      	push	{r7, lr}
   15a34:	b084      	sub	sp, #16
   15a36:	af00      	add	r7, sp, #0
   15a38:	4603      	mov	r3, r0
   15a3a:	460a      	mov	r2, r1
   15a3c:	80fb      	strh	r3, [r7, #6]
   15a3e:	4613      	mov	r3, r2
   15a40:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   15a42:	2103      	movs	r1, #3
   15a44:	f242 0021 	movw	r0, #8225	; 0x2021
   15a48:	f7ff fdd7 	bl	155fa <hciCmdAlloc>
   15a4c:	60f8      	str	r0, [r7, #12]
   15a4e:	68fb      	ldr	r3, [r7, #12]
   15a50:	2b00      	cmp	r3, #0
   15a52:	d018      	beq.n	15a86 <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15a54:	68fb      	ldr	r3, [r7, #12]
   15a56:	3303      	adds	r3, #3
   15a58:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15a5a:	68bb      	ldr	r3, [r7, #8]
   15a5c:	1c5a      	adds	r2, r3, #1
   15a5e:	60ba      	str	r2, [r7, #8]
   15a60:	88fa      	ldrh	r2, [r7, #6]
   15a62:	b2d2      	uxtb	r2, r2
   15a64:	701a      	strb	r2, [r3, #0]
   15a66:	68bb      	ldr	r3, [r7, #8]
   15a68:	1c5a      	adds	r2, r3, #1
   15a6a:	60ba      	str	r2, [r7, #8]
   15a6c:	88fa      	ldrh	r2, [r7, #6]
   15a6e:	0a12      	lsrs	r2, r2, #8
   15a70:	b292      	uxth	r2, r2
   15a72:	b2d2      	uxtb	r2, r2
   15a74:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   15a76:	68bb      	ldr	r3, [r7, #8]
   15a78:	1c5a      	adds	r2, r3, #1
   15a7a:	60ba      	str	r2, [r7, #8]
   15a7c:	797a      	ldrb	r2, [r7, #5]
   15a7e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15a80:	68f8      	ldr	r0, [r7, #12]
   15a82:	f7ff fde9 	bl	15658 <hciCmdSend>
  }
}
   15a86:	bf00      	nop
   15a88:	3710      	adds	r7, #16
   15a8a:	46bd      	mov	sp, r7
   15a8c:	bd80      	pop	{r7, pc}

00015a8e <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   15a8e:	b580      	push	{r7, lr}
   15a90:	b084      	sub	sp, #16
   15a92:	af00      	add	r7, sp, #0
   15a94:	4603      	mov	r3, r0
   15a96:	80fb      	strh	r3, [r7, #6]
   15a98:	460b      	mov	r3, r1
   15a9a:	80bb      	strh	r3, [r7, #4]
   15a9c:	4613      	mov	r3, r2
   15a9e:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   15aa0:	2106      	movs	r1, #6
   15aa2:	f242 0022 	movw	r0, #8226	; 0x2022
   15aa6:	f7ff fda8 	bl	155fa <hciCmdAlloc>
   15aaa:	60f8      	str	r0, [r7, #12]
   15aac:	68fb      	ldr	r3, [r7, #12]
   15aae:	2b00      	cmp	r3, #0
   15ab0:	d02f      	beq.n	15b12 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15ab2:	68fb      	ldr	r3, [r7, #12]
   15ab4:	3303      	adds	r3, #3
   15ab6:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15ab8:	68bb      	ldr	r3, [r7, #8]
   15aba:	1c5a      	adds	r2, r3, #1
   15abc:	60ba      	str	r2, [r7, #8]
   15abe:	88fa      	ldrh	r2, [r7, #6]
   15ac0:	b2d2      	uxtb	r2, r2
   15ac2:	701a      	strb	r2, [r3, #0]
   15ac4:	68bb      	ldr	r3, [r7, #8]
   15ac6:	1c5a      	adds	r2, r3, #1
   15ac8:	60ba      	str	r2, [r7, #8]
   15aca:	88fa      	ldrh	r2, [r7, #6]
   15acc:	0a12      	lsrs	r2, r2, #8
   15ace:	b292      	uxth	r2, r2
   15ad0:	b2d2      	uxtb	r2, r2
   15ad2:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   15ad4:	68bb      	ldr	r3, [r7, #8]
   15ad6:	1c5a      	adds	r2, r3, #1
   15ad8:	60ba      	str	r2, [r7, #8]
   15ada:	88ba      	ldrh	r2, [r7, #4]
   15adc:	b2d2      	uxtb	r2, r2
   15ade:	701a      	strb	r2, [r3, #0]
   15ae0:	68bb      	ldr	r3, [r7, #8]
   15ae2:	1c5a      	adds	r2, r3, #1
   15ae4:	60ba      	str	r2, [r7, #8]
   15ae6:	88ba      	ldrh	r2, [r7, #4]
   15ae8:	0a12      	lsrs	r2, r2, #8
   15aea:	b292      	uxth	r2, r2
   15aec:	b2d2      	uxtb	r2, r2
   15aee:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   15af0:	68bb      	ldr	r3, [r7, #8]
   15af2:	1c5a      	adds	r2, r3, #1
   15af4:	60ba      	str	r2, [r7, #8]
   15af6:	887a      	ldrh	r2, [r7, #2]
   15af8:	b2d2      	uxtb	r2, r2
   15afa:	701a      	strb	r2, [r3, #0]
   15afc:	68bb      	ldr	r3, [r7, #8]
   15afe:	1c5a      	adds	r2, r3, #1
   15b00:	60ba      	str	r2, [r7, #8]
   15b02:	887a      	ldrh	r2, [r7, #2]
   15b04:	0a12      	lsrs	r2, r2, #8
   15b06:	b292      	uxth	r2, r2
   15b08:	b2d2      	uxtb	r2, r2
   15b0a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15b0c:	68f8      	ldr	r0, [r7, #12]
   15b0e:	f7ff fda3 	bl	15658 <hciCmdSend>
  }
}
   15b12:	bf00      	nop
   15b14:	3710      	adds	r7, #16
   15b16:	46bd      	mov	sp, r7
   15b18:	bd80      	pop	{r7, pc}

00015b1a <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   15b1a:	b580      	push	{r7, lr}
   15b1c:	b084      	sub	sp, #16
   15b1e:	af00      	add	r7, sp, #0
   15b20:	4603      	mov	r3, r0
   15b22:	460a      	mov	r2, r1
   15b24:	80fb      	strh	r3, [r7, #6]
   15b26:	4613      	mov	r3, r2
   15b28:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   15b2a:	2104      	movs	r1, #4
   15b2c:	f242 0024 	movw	r0, #8228	; 0x2024
   15b30:	f7ff fd63 	bl	155fa <hciCmdAlloc>
   15b34:	60f8      	str	r0, [r7, #12]
   15b36:	68fb      	ldr	r3, [r7, #12]
   15b38:	2b00      	cmp	r3, #0
   15b3a:	d021      	beq.n	15b80 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15b3c:	68fb      	ldr	r3, [r7, #12]
   15b3e:	3303      	adds	r3, #3
   15b40:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   15b42:	68bb      	ldr	r3, [r7, #8]
   15b44:	1c5a      	adds	r2, r3, #1
   15b46:	60ba      	str	r2, [r7, #8]
   15b48:	88fa      	ldrh	r2, [r7, #6]
   15b4a:	b2d2      	uxtb	r2, r2
   15b4c:	701a      	strb	r2, [r3, #0]
   15b4e:	68bb      	ldr	r3, [r7, #8]
   15b50:	1c5a      	adds	r2, r3, #1
   15b52:	60ba      	str	r2, [r7, #8]
   15b54:	88fa      	ldrh	r2, [r7, #6]
   15b56:	0a12      	lsrs	r2, r2, #8
   15b58:	b292      	uxth	r2, r2
   15b5a:	b2d2      	uxtb	r2, r2
   15b5c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   15b5e:	68bb      	ldr	r3, [r7, #8]
   15b60:	1c5a      	adds	r2, r3, #1
   15b62:	60ba      	str	r2, [r7, #8]
   15b64:	88ba      	ldrh	r2, [r7, #4]
   15b66:	b2d2      	uxtb	r2, r2
   15b68:	701a      	strb	r2, [r3, #0]
   15b6a:	68bb      	ldr	r3, [r7, #8]
   15b6c:	1c5a      	adds	r2, r3, #1
   15b6e:	60ba      	str	r2, [r7, #8]
   15b70:	88ba      	ldrh	r2, [r7, #4]
   15b72:	0a12      	lsrs	r2, r2, #8
   15b74:	b292      	uxth	r2, r2
   15b76:	b2d2      	uxtb	r2, r2
   15b78:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15b7a:	68f8      	ldr	r0, [r7, #12]
   15b7c:	f7ff fd6c 	bl	15658 <hciCmdSend>
  }
}
   15b80:	bf00      	nop
   15b82:	3710      	adds	r7, #16
   15b84:	46bd      	mov	sp, r7
   15b86:	bd80      	pop	{r7, pc}

00015b88 <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   15b88:	b580      	push	{r7, lr}
   15b8a:	b082      	sub	sp, #8
   15b8c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   15b8e:	2100      	movs	r1, #0
   15b90:	f242 0025 	movw	r0, #8229	; 0x2025
   15b94:	f7ff fd31 	bl	155fa <hciCmdAlloc>
   15b98:	6078      	str	r0, [r7, #4]
   15b9a:	687b      	ldr	r3, [r7, #4]
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d002      	beq.n	15ba6 <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   15ba0:	6878      	ldr	r0, [r7, #4]
   15ba2:	f7ff fd59 	bl	15658 <hciCmdSend>
  }
}
   15ba6:	bf00      	nop
   15ba8:	3708      	adds	r7, #8
   15baa:	46bd      	mov	sp, r7
   15bac:	bd80      	pop	{r7, pc}

00015bae <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   15bae:	b580      	push	{r7, lr}
   15bb0:	b084      	sub	sp, #16
   15bb2:	af00      	add	r7, sp, #0
   15bb4:	6078      	str	r0, [r7, #4]
   15bb6:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   15bb8:	2140      	movs	r1, #64	; 0x40
   15bba:	f242 0026 	movw	r0, #8230	; 0x2026
   15bbe:	f7ff fd1c 	bl	155fa <hciCmdAlloc>
   15bc2:	60f8      	str	r0, [r7, #12]
   15bc4:	68fb      	ldr	r3, [r7, #12]
   15bc6:	2b00      	cmp	r3, #0
   15bc8:	d011      	beq.n	15bee <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15bca:	68fb      	ldr	r3, [r7, #12]
   15bcc:	3303      	adds	r3, #3
   15bce:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   15bd0:	2220      	movs	r2, #32
   15bd2:	6879      	ldr	r1, [r7, #4]
   15bd4:	68b8      	ldr	r0, [r7, #8]
   15bd6:	f7f6 fac3 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   15bda:	68bb      	ldr	r3, [r7, #8]
   15bdc:	3320      	adds	r3, #32
   15bde:	2220      	movs	r2, #32
   15be0:	6839      	ldr	r1, [r7, #0]
   15be2:	4618      	mov	r0, r3
   15be4:	f7f6 fabc 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15be8:	68f8      	ldr	r0, [r7, #12]
   15bea:	f7ff fd35 	bl	15658 <hciCmdSend>
  }
}
   15bee:	bf00      	nop
   15bf0:	3710      	adds	r7, #16
   15bf2:	46bd      	mov	sp, r7
   15bf4:	bd80      	pop	{r7, pc}

00015bf6 <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   15bf6:	b580      	push	{r7, lr}
   15bf8:	b082      	sub	sp, #8
   15bfa:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   15bfc:	2100      	movs	r1, #0
   15bfe:	f242 002f 	movw	r0, #8239	; 0x202f
   15c02:	f7ff fcfa 	bl	155fa <hciCmdAlloc>
   15c06:	6078      	str	r0, [r7, #4]
   15c08:	687b      	ldr	r3, [r7, #4]
   15c0a:	2b00      	cmp	r3, #0
   15c0c:	d002      	beq.n	15c14 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   15c0e:	6878      	ldr	r0, [r7, #4]
   15c10:	f7ff fd22 	bl	15658 <hciCmdSend>
  }
}
   15c14:	bf00      	nop
   15c16:	3708      	adds	r7, #8
   15c18:	46bd      	mov	sp, r7
   15c1a:	bd80      	pop	{r7, pc}

00015c1c <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   15c1c:	b580      	push	{r7, lr}
   15c1e:	b084      	sub	sp, #16
   15c20:	af00      	add	r7, sp, #0
   15c22:	6078      	str	r0, [r7, #4]
   15c24:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   15c26:	2120      	movs	r1, #32
   15c28:	f242 0017 	movw	r0, #8215	; 0x2017
   15c2c:	f7ff fce5 	bl	155fa <hciCmdAlloc>
   15c30:	60f8      	str	r0, [r7, #12]
   15c32:	68fb      	ldr	r3, [r7, #12]
   15c34:	2b00      	cmp	r3, #0
   15c36:	d012      	beq.n	15c5e <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15c38:	68fb      	ldr	r3, [r7, #12]
   15c3a:	3303      	adds	r3, #3
   15c3c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   15c3e:	2210      	movs	r2, #16
   15c40:	6879      	ldr	r1, [r7, #4]
   15c42:	68b8      	ldr	r0, [r7, #8]
   15c44:	f7f6 fa8c 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   15c48:	68bb      	ldr	r3, [r7, #8]
   15c4a:	3310      	adds	r3, #16
   15c4c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   15c4e:	2210      	movs	r2, #16
   15c50:	6839      	ldr	r1, [r7, #0]
   15c52:	68b8      	ldr	r0, [r7, #8]
   15c54:	f7f6 fa84 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15c58:	68f8      	ldr	r0, [r7, #12]
   15c5a:	f7ff fcfd 	bl	15658 <hciCmdSend>
  }
}
   15c5e:	bf00      	nop
   15c60:	3710      	adds	r7, #16
   15c62:	46bd      	mov	sp, r7
   15c64:	bd80      	pop	{r7, pc}

00015c66 <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   15c66:	b580      	push	{r7, lr}
   15c68:	b084      	sub	sp, #16
   15c6a:	af00      	add	r7, sp, #0
   15c6c:	4603      	mov	r3, r0
   15c6e:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   15c70:	2102      	movs	r1, #2
   15c72:	f242 001b 	movw	r0, #8219	; 0x201b
   15c76:	f7ff fcc0 	bl	155fa <hciCmdAlloc>
   15c7a:	60f8      	str	r0, [r7, #12]
   15c7c:	68fb      	ldr	r3, [r7, #12]
   15c7e:	2b00      	cmp	r3, #0
   15c80:	d013      	beq.n	15caa <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15c82:	68fb      	ldr	r3, [r7, #12]
   15c84:	3303      	adds	r3, #3
   15c86:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15c88:	68bb      	ldr	r3, [r7, #8]
   15c8a:	1c5a      	adds	r2, r3, #1
   15c8c:	60ba      	str	r2, [r7, #8]
   15c8e:	88fa      	ldrh	r2, [r7, #6]
   15c90:	b2d2      	uxtb	r2, r2
   15c92:	701a      	strb	r2, [r3, #0]
   15c94:	68bb      	ldr	r3, [r7, #8]
   15c96:	1c5a      	adds	r2, r3, #1
   15c98:	60ba      	str	r2, [r7, #8]
   15c9a:	88fa      	ldrh	r2, [r7, #6]
   15c9c:	0a12      	lsrs	r2, r2, #8
   15c9e:	b292      	uxth	r2, r2
   15ca0:	b2d2      	uxtb	r2, r2
   15ca2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15ca4:	68f8      	ldr	r0, [r7, #12]
   15ca6:	f7ff fcd7 	bl	15658 <hciCmdSend>
  }
}
   15caa:	bf00      	nop
   15cac:	3710      	adds	r7, #16
   15cae:	46bd      	mov	sp, r7
   15cb0:	bd80      	pop	{r7, pc}

00015cb2 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   15cb2:	b580      	push	{r7, lr}
   15cb4:	b084      	sub	sp, #16
   15cb6:	af00      	add	r7, sp, #0
   15cb8:	4603      	mov	r3, r0
   15cba:	6039      	str	r1, [r7, #0]
   15cbc:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   15cbe:	2112      	movs	r1, #18
   15cc0:	f242 001a 	movw	r0, #8218	; 0x201a
   15cc4:	f7ff fc99 	bl	155fa <hciCmdAlloc>
   15cc8:	60f8      	str	r0, [r7, #12]
   15cca:	68fb      	ldr	r3, [r7, #12]
   15ccc:	2b00      	cmp	r3, #0
   15cce:	d018      	beq.n	15d02 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15cd0:	68fb      	ldr	r3, [r7, #12]
   15cd2:	3303      	adds	r3, #3
   15cd4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15cd6:	68bb      	ldr	r3, [r7, #8]
   15cd8:	1c5a      	adds	r2, r3, #1
   15cda:	60ba      	str	r2, [r7, #8]
   15cdc:	88fa      	ldrh	r2, [r7, #6]
   15cde:	b2d2      	uxtb	r2, r2
   15ce0:	701a      	strb	r2, [r3, #0]
   15ce2:	68bb      	ldr	r3, [r7, #8]
   15ce4:	1c5a      	adds	r2, r3, #1
   15ce6:	60ba      	str	r2, [r7, #8]
   15ce8:	88fa      	ldrh	r2, [r7, #6]
   15cea:	0a12      	lsrs	r2, r2, #8
   15cec:	b292      	uxth	r2, r2
   15cee:	b2d2      	uxtb	r2, r2
   15cf0:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   15cf2:	2210      	movs	r2, #16
   15cf4:	6839      	ldr	r1, [r7, #0]
   15cf6:	68b8      	ldr	r0, [r7, #8]
   15cf8:	f7f6 fa32 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15cfc:	68f8      	ldr	r0, [r7, #12]
   15cfe:	f7ff fcab 	bl	15658 <hciCmdSend>
  }
}
   15d02:	bf00      	nop
   15d04:	3710      	adds	r7, #16
   15d06:	46bd      	mov	sp, r7
   15d08:	bd80      	pop	{r7, pc}

00015d0a <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   15d0a:	b580      	push	{r7, lr}
   15d0c:	b082      	sub	sp, #8
   15d0e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   15d10:	2100      	movs	r1, #0
   15d12:	f242 0018 	movw	r0, #8216	; 0x2018
   15d16:	f7ff fc70 	bl	155fa <hciCmdAlloc>
   15d1a:	6078      	str	r0, [r7, #4]
   15d1c:	687b      	ldr	r3, [r7, #4]
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d002      	beq.n	15d28 <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15d22:	6878      	ldr	r0, [r7, #4]
   15d24:	f7ff fc98 	bl	15658 <hciCmdSend>
  }
}
   15d28:	bf00      	nop
   15d2a:	3708      	adds	r7, #8
   15d2c:	46bd      	mov	sp, r7
   15d2e:	bd80      	pop	{r7, pc}

00015d30 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   15d30:	b580      	push	{r7, lr}
   15d32:	b082      	sub	sp, #8
   15d34:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   15d36:	2100      	movs	r1, #0
   15d38:	f242 0002 	movw	r0, #8194	; 0x2002
   15d3c:	f7ff fc5d 	bl	155fa <hciCmdAlloc>
   15d40:	6078      	str	r0, [r7, #4]
   15d42:	687b      	ldr	r3, [r7, #4]
   15d44:	2b00      	cmp	r3, #0
   15d46:	d002      	beq.n	15d4e <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15d48:	6878      	ldr	r0, [r7, #4]
   15d4a:	f7ff fc85 	bl	15658 <hciCmdSend>
  }
}
   15d4e:	bf00      	nop
   15d50:	3708      	adds	r7, #8
   15d52:	46bd      	mov	sp, r7
   15d54:	bd80      	pop	{r7, pc}

00015d56 <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   15d56:	b580      	push	{r7, lr}
   15d58:	b082      	sub	sp, #8
   15d5a:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   15d5c:	2100      	movs	r1, #0
   15d5e:	f242 0003 	movw	r0, #8195	; 0x2003
   15d62:	f7ff fc4a 	bl	155fa <hciCmdAlloc>
   15d66:	6078      	str	r0, [r7, #4]
   15d68:	687b      	ldr	r3, [r7, #4]
   15d6a:	2b00      	cmp	r3, #0
   15d6c:	d002      	beq.n	15d74 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15d6e:	6878      	ldr	r0, [r7, #4]
   15d70:	f7ff fc72 	bl	15658 <hciCmdSend>
  }
}
   15d74:	bf00      	nop
   15d76:	3708      	adds	r7, #8
   15d78:	46bd      	mov	sp, r7
   15d7a:	bd80      	pop	{r7, pc}

00015d7c <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   15d7c:	b580      	push	{r7, lr}
   15d7e:	b084      	sub	sp, #16
   15d80:	af00      	add	r7, sp, #0
   15d82:	4603      	mov	r3, r0
   15d84:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   15d86:	2102      	movs	r1, #2
   15d88:	f242 0016 	movw	r0, #8214	; 0x2016
   15d8c:	f7ff fc35 	bl	155fa <hciCmdAlloc>
   15d90:	60f8      	str	r0, [r7, #12]
   15d92:	68fb      	ldr	r3, [r7, #12]
   15d94:	2b00      	cmp	r3, #0
   15d96:	d013      	beq.n	15dc0 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15d98:	68fb      	ldr	r3, [r7, #12]
   15d9a:	3303      	adds	r3, #3
   15d9c:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   15d9e:	68bb      	ldr	r3, [r7, #8]
   15da0:	1c5a      	adds	r2, r3, #1
   15da2:	60ba      	str	r2, [r7, #8]
   15da4:	88fa      	ldrh	r2, [r7, #6]
   15da6:	b2d2      	uxtb	r2, r2
   15da8:	701a      	strb	r2, [r3, #0]
   15daa:	68bb      	ldr	r3, [r7, #8]
   15dac:	1c5a      	adds	r2, r3, #1
   15dae:	60ba      	str	r2, [r7, #8]
   15db0:	88fa      	ldrh	r2, [r7, #6]
   15db2:	0a12      	lsrs	r2, r2, #8
   15db4:	b292      	uxth	r2, r2
   15db6:	b2d2      	uxtb	r2, r2
   15db8:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15dba:	68f8      	ldr	r0, [r7, #12]
   15dbc:	f7ff fc4c 	bl	15658 <hciCmdSend>
  }
}
   15dc0:	bf00      	nop
   15dc2:	3710      	adds	r7, #16
   15dc4:	46bd      	mov	sp, r7
   15dc6:	bd80      	pop	{r7, pc}

00015dc8 <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   15dc8:	b580      	push	{r7, lr}
   15dca:	b082      	sub	sp, #8
   15dcc:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   15dce:	2100      	movs	r1, #0
   15dd0:	f242 001c 	movw	r0, #8220	; 0x201c
   15dd4:	f7ff fc11 	bl	155fa <hciCmdAlloc>
   15dd8:	6078      	str	r0, [r7, #4]
   15dda:	687b      	ldr	r3, [r7, #4]
   15ddc:	2b00      	cmp	r3, #0
   15dde:	d002      	beq.n	15de6 <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15de0:	6878      	ldr	r0, [r7, #4]
   15de2:	f7ff fc39 	bl	15658 <hciCmdSend>
  }
}
   15de6:	bf00      	nop
   15de8:	3708      	adds	r7, #8
   15dea:	46bd      	mov	sp, r7
   15dec:	bd80      	pop	{r7, pc}

00015dee <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   15dee:	b580      	push	{r7, lr}
   15df0:	b082      	sub	sp, #8
   15df2:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   15df4:	2100      	movs	r1, #0
   15df6:	f242 000f 	movw	r0, #8207	; 0x200f
   15dfa:	f7ff fbfe 	bl	155fa <hciCmdAlloc>
   15dfe:	6078      	str	r0, [r7, #4]
   15e00:	687b      	ldr	r3, [r7, #4]
   15e02:	2b00      	cmp	r3, #0
   15e04:	d002      	beq.n	15e0c <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   15e06:	6878      	ldr	r0, [r7, #4]
   15e08:	f7ff fc26 	bl	15658 <hciCmdSend>
  }
}
   15e0c:	bf00      	nop
   15e0e:	3708      	adds	r7, #8
   15e10:	46bd      	mov	sp, r7
   15e12:	bd80      	pop	{r7, pc}

00015e14 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   15e14:	b580      	push	{r7, lr}
   15e16:	b084      	sub	sp, #16
   15e18:	af00      	add	r7, sp, #0
   15e1a:	4603      	mov	r3, r0
   15e1c:	6039      	str	r1, [r7, #0]
   15e1e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   15e20:	2107      	movs	r1, #7
   15e22:	f242 0012 	movw	r0, #8210	; 0x2012
   15e26:	f7ff fbe8 	bl	155fa <hciCmdAlloc>
   15e2a:	60f8      	str	r0, [r7, #12]
   15e2c:	68fb      	ldr	r3, [r7, #12]
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d011      	beq.n	15e56 <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15e32:	68fb      	ldr	r3, [r7, #12]
   15e34:	3303      	adds	r3, #3
   15e36:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   15e38:	68bb      	ldr	r3, [r7, #8]
   15e3a:	1c5a      	adds	r2, r3, #1
   15e3c:	60ba      	str	r2, [r7, #8]
   15e3e:	79fa      	ldrb	r2, [r7, #7]
   15e40:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   15e42:	6839      	ldr	r1, [r7, #0]
   15e44:	68b8      	ldr	r0, [r7, #8]
   15e46:	f009 ff04 	bl	1fc52 <BdaCpy>
   15e4a:	68bb      	ldr	r3, [r7, #8]
   15e4c:	3306      	adds	r3, #6
   15e4e:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   15e50:	68f8      	ldr	r0, [r7, #12]
   15e52:	f7ff fc01 	bl	15658 <hciCmdSend>
  }
}
   15e56:	bf00      	nop
   15e58:	3710      	adds	r7, #16
   15e5a:	46bd      	mov	sp, r7
   15e5c:	bd80      	pop	{r7, pc}

00015e5e <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   15e5e:	b580      	push	{r7, lr}
   15e60:	b084      	sub	sp, #16
   15e62:	af00      	add	r7, sp, #0
   15e64:	4603      	mov	r3, r0
   15e66:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   15e68:	2101      	movs	r1, #1
   15e6a:	f242 000a 	movw	r0, #8202	; 0x200a
   15e6e:	f7ff fbc4 	bl	155fa <hciCmdAlloc>
   15e72:	60f8      	str	r0, [r7, #12]
   15e74:	68fb      	ldr	r3, [r7, #12]
   15e76:	2b00      	cmp	r3, #0
   15e78:	d00a      	beq.n	15e90 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15e7a:	68fb      	ldr	r3, [r7, #12]
   15e7c:	3303      	adds	r3, #3
   15e7e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   15e80:	68bb      	ldr	r3, [r7, #8]
   15e82:	1c5a      	adds	r2, r3, #1
   15e84:	60ba      	str	r2, [r7, #8]
   15e86:	79fa      	ldrb	r2, [r7, #7]
   15e88:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15e8a:	68f8      	ldr	r0, [r7, #12]
   15e8c:	f7ff fbe4 	bl	15658 <hciCmdSend>
  }
}
   15e90:	bf00      	nop
   15e92:	3710      	adds	r7, #16
   15e94:	46bd      	mov	sp, r7
   15e96:	bd80      	pop	{r7, pc}

00015e98 <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   15e98:	b580      	push	{r7, lr}
   15e9a:	b084      	sub	sp, #16
   15e9c:	af00      	add	r7, sp, #0
   15e9e:	4603      	mov	r3, r0
   15ea0:	6039      	str	r1, [r7, #0]
   15ea2:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   15ea4:	2120      	movs	r1, #32
   15ea6:	f242 0008 	movw	r0, #8200	; 0x2008
   15eaa:	f7ff fba6 	bl	155fa <hciCmdAlloc>
   15eae:	60f8      	str	r0, [r7, #12]
   15eb0:	68fb      	ldr	r3, [r7, #12]
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d01c      	beq.n	15ef0 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15eb6:	68fb      	ldr	r3, [r7, #12]
   15eb8:	3303      	adds	r3, #3
   15eba:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   15ebc:	68bb      	ldr	r3, [r7, #8]
   15ebe:	1c5a      	adds	r2, r3, #1
   15ec0:	60ba      	str	r2, [r7, #8]
   15ec2:	79fa      	ldrb	r2, [r7, #7]
   15ec4:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   15ec6:	79fb      	ldrb	r3, [r7, #7]
   15ec8:	461a      	mov	r2, r3
   15eca:	6839      	ldr	r1, [r7, #0]
   15ecc:	68b8      	ldr	r0, [r7, #8]
   15ece:	f7f6 f947 	bl	c160 <memcpy>
    p += len;
   15ed2:	79fb      	ldrb	r3, [r7, #7]
   15ed4:	68ba      	ldr	r2, [r7, #8]
   15ed6:	4413      	add	r3, r2
   15ed8:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   15eda:	79fb      	ldrb	r3, [r7, #7]
   15edc:	f1c3 031f 	rsb	r3, r3, #31
   15ee0:	461a      	mov	r2, r3
   15ee2:	2100      	movs	r1, #0
   15ee4:	68b8      	ldr	r0, [r7, #8]
   15ee6:	f7f6 fa39 	bl	c35c <memset>
    hciCmdSend(pBuf);
   15eea:	68f8      	ldr	r0, [r7, #12]
   15eec:	f7ff fbb4 	bl	15658 <hciCmdSend>
  }
}
   15ef0:	bf00      	nop
   15ef2:	3710      	adds	r7, #16
   15ef4:	46bd      	mov	sp, r7
   15ef6:	bd80      	pop	{r7, pc}

00015ef8 <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   15ef8:	b590      	push	{r4, r7, lr}
   15efa:	b085      	sub	sp, #20
   15efc:	af00      	add	r7, sp, #0
   15efe:	4604      	mov	r4, r0
   15f00:	4608      	mov	r0, r1
   15f02:	4611      	mov	r1, r2
   15f04:	461a      	mov	r2, r3
   15f06:	4623      	mov	r3, r4
   15f08:	80fb      	strh	r3, [r7, #6]
   15f0a:	4603      	mov	r3, r0
   15f0c:	80bb      	strh	r3, [r7, #4]
   15f0e:	460b      	mov	r3, r1
   15f10:	70fb      	strb	r3, [r7, #3]
   15f12:	4613      	mov	r3, r2
   15f14:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   15f16:	210f      	movs	r1, #15
   15f18:	f242 0006 	movw	r0, #8198	; 0x2006
   15f1c:	f7ff fb6d 	bl	155fa <hciCmdAlloc>
   15f20:	60b8      	str	r0, [r7, #8]
   15f22:	68bb      	ldr	r3, [r7, #8]
   15f24:	2b00      	cmp	r3, #0
   15f26:	d04c      	beq.n	15fc2 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15f28:	68bb      	ldr	r3, [r7, #8]
   15f2a:	3303      	adds	r3, #3
   15f2c:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   15f2e:	68fb      	ldr	r3, [r7, #12]
   15f30:	1c5a      	adds	r2, r3, #1
   15f32:	60fa      	str	r2, [r7, #12]
   15f34:	88fa      	ldrh	r2, [r7, #6]
   15f36:	b2d2      	uxtb	r2, r2
   15f38:	701a      	strb	r2, [r3, #0]
   15f3a:	68fb      	ldr	r3, [r7, #12]
   15f3c:	1c5a      	adds	r2, r3, #1
   15f3e:	60fa      	str	r2, [r7, #12]
   15f40:	88fa      	ldrh	r2, [r7, #6]
   15f42:	0a12      	lsrs	r2, r2, #8
   15f44:	b292      	uxth	r2, r2
   15f46:	b2d2      	uxtb	r2, r2
   15f48:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   15f4a:	68fb      	ldr	r3, [r7, #12]
   15f4c:	1c5a      	adds	r2, r3, #1
   15f4e:	60fa      	str	r2, [r7, #12]
   15f50:	88ba      	ldrh	r2, [r7, #4]
   15f52:	b2d2      	uxtb	r2, r2
   15f54:	701a      	strb	r2, [r3, #0]
   15f56:	68fb      	ldr	r3, [r7, #12]
   15f58:	1c5a      	adds	r2, r3, #1
   15f5a:	60fa      	str	r2, [r7, #12]
   15f5c:	88ba      	ldrh	r2, [r7, #4]
   15f5e:	0a12      	lsrs	r2, r2, #8
   15f60:	b292      	uxth	r2, r2
   15f62:	b2d2      	uxtb	r2, r2
   15f64:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   15f66:	68fb      	ldr	r3, [r7, #12]
   15f68:	1c5a      	adds	r2, r3, #1
   15f6a:	60fa      	str	r2, [r7, #12]
   15f6c:	78fa      	ldrb	r2, [r7, #3]
   15f6e:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   15f70:	68fb      	ldr	r3, [r7, #12]
   15f72:	1c5a      	adds	r2, r3, #1
   15f74:	60fa      	str	r2, [r7, #12]
   15f76:	78ba      	ldrb	r2, [r7, #2]
   15f78:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   15f7a:	68fb      	ldr	r3, [r7, #12]
   15f7c:	1c5a      	adds	r2, r3, #1
   15f7e:	60fa      	str	r2, [r7, #12]
   15f80:	f897 2020 	ldrb.w	r2, [r7, #32]
   15f84:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   15f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15f88:	2b00      	cmp	r3, #0
   15f8a:	d007      	beq.n	15f9c <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   15f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15f8e:	68f8      	ldr	r0, [r7, #12]
   15f90:	f009 fe5f 	bl	1fc52 <BdaCpy>
   15f94:	68fb      	ldr	r3, [r7, #12]
   15f96:	3306      	adds	r3, #6
   15f98:	60fb      	str	r3, [r7, #12]
   15f9a:	e003      	b.n	15fa4 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   15f9c:	68f8      	ldr	r0, [r7, #12]
   15f9e:	f009 fe7a 	bl	1fc96 <BdaClr>
   15fa2:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   15fa4:	68fb      	ldr	r3, [r7, #12]
   15fa6:	1c5a      	adds	r2, r3, #1
   15fa8:	60fa      	str	r2, [r7, #12]
   15faa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   15fae:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   15fb0:	68fb      	ldr	r3, [r7, #12]
   15fb2:	1c5a      	adds	r2, r3, #1
   15fb4:	60fa      	str	r2, [r7, #12]
   15fb6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   15fba:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   15fbc:	68b8      	ldr	r0, [r7, #8]
   15fbe:	f7ff fb4b 	bl	15658 <hciCmdSend>
  }
}
   15fc2:	bf00      	nop
   15fc4:	3714      	adds	r7, #20
   15fc6:	46bd      	mov	sp, r7
   15fc8:	bd90      	pop	{r4, r7, pc}

00015fca <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   15fca:	b580      	push	{r7, lr}
   15fcc:	b084      	sub	sp, #16
   15fce:	af00      	add	r7, sp, #0
   15fd0:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   15fd2:	2108      	movs	r1, #8
   15fd4:	f242 0001 	movw	r0, #8193	; 0x2001
   15fd8:	f7ff fb0f 	bl	155fa <hciCmdAlloc>
   15fdc:	60f8      	str	r0, [r7, #12]
   15fde:	68fb      	ldr	r3, [r7, #12]
   15fe0:	2b00      	cmp	r3, #0
   15fe2:	d00a      	beq.n	15ffa <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   15fe4:	68fb      	ldr	r3, [r7, #12]
   15fe6:	3303      	adds	r3, #3
   15fe8:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   15fea:	2208      	movs	r2, #8
   15fec:	6879      	ldr	r1, [r7, #4]
   15fee:	68b8      	ldr	r0, [r7, #8]
   15ff0:	f7f6 f8b6 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   15ff4:	68f8      	ldr	r0, [r7, #12]
   15ff6:	f7ff fb2f 	bl	15658 <hciCmdSend>
  }
}
   15ffa:	bf00      	nop
   15ffc:	3710      	adds	r7, #16
   15ffe:	46bd      	mov	sp, r7
   16000:	bd80      	pop	{r7, pc}

00016002 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   16002:	b580      	push	{r7, lr}
   16004:	b084      	sub	sp, #16
   16006:	af00      	add	r7, sp, #0
   16008:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   1600a:	2106      	movs	r1, #6
   1600c:	f242 0005 	movw	r0, #8197	; 0x2005
   16010:	f7ff faf3 	bl	155fa <hciCmdAlloc>
   16014:	60f8      	str	r0, [r7, #12]
   16016:	68fb      	ldr	r3, [r7, #12]
   16018:	2b00      	cmp	r3, #0
   1601a:	d00c      	beq.n	16036 <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1601c:	68fb      	ldr	r3, [r7, #12]
   1601e:	3303      	adds	r3, #3
   16020:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   16022:	6879      	ldr	r1, [r7, #4]
   16024:	68b8      	ldr	r0, [r7, #8]
   16026:	f009 fe14 	bl	1fc52 <BdaCpy>
   1602a:	68bb      	ldr	r3, [r7, #8]
   1602c:	3306      	adds	r3, #6
   1602e:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16030:	68f8      	ldr	r0, [r7, #12]
   16032:	f7ff fb11 	bl	15658 <hciCmdSend>
  }
}
   16036:	bf00      	nop
   16038:	3710      	adds	r7, #16
   1603a:	46bd      	mov	sp, r7
   1603c:	bd80      	pop	{r7, pc}

0001603e <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   1603e:	b580      	push	{r7, lr}
   16040:	b084      	sub	sp, #16
   16042:	af00      	add	r7, sp, #0
   16044:	4603      	mov	r3, r0
   16046:	6039      	str	r1, [r7, #0]
   16048:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   1604a:	2120      	movs	r1, #32
   1604c:	f242 0009 	movw	r0, #8201	; 0x2009
   16050:	f7ff fad3 	bl	155fa <hciCmdAlloc>
   16054:	60f8      	str	r0, [r7, #12]
   16056:	68fb      	ldr	r3, [r7, #12]
   16058:	2b00      	cmp	r3, #0
   1605a:	d01c      	beq.n	16096 <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1605c:	68fb      	ldr	r3, [r7, #12]
   1605e:	3303      	adds	r3, #3
   16060:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   16062:	68bb      	ldr	r3, [r7, #8]
   16064:	1c5a      	adds	r2, r3, #1
   16066:	60ba      	str	r2, [r7, #8]
   16068:	79fa      	ldrb	r2, [r7, #7]
   1606a:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1606c:	79fb      	ldrb	r3, [r7, #7]
   1606e:	461a      	mov	r2, r3
   16070:	6839      	ldr	r1, [r7, #0]
   16072:	68b8      	ldr	r0, [r7, #8]
   16074:	f7f6 f874 	bl	c160 <memcpy>
    p += len;
   16078:	79fb      	ldrb	r3, [r7, #7]
   1607a:	68ba      	ldr	r2, [r7, #8]
   1607c:	4413      	add	r3, r2
   1607e:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   16080:	79fb      	ldrb	r3, [r7, #7]
   16082:	f1c3 031f 	rsb	r3, r3, #31
   16086:	461a      	mov	r2, r3
   16088:	2100      	movs	r1, #0
   1608a:	68b8      	ldr	r0, [r7, #8]
   1608c:	f7f6 f966 	bl	c35c <memset>
    hciCmdSend(pBuf);
   16090:	68f8      	ldr	r0, [r7, #12]
   16092:	f7ff fae1 	bl	15658 <hciCmdSend>
  }
}
   16096:	bf00      	nop
   16098:	3710      	adds	r7, #16
   1609a:	46bd      	mov	sp, r7
   1609c:	bd80      	pop	{r7, pc}

0001609e <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   1609e:	b580      	push	{r7, lr}
   160a0:	b086      	sub	sp, #24
   160a2:	af00      	add	r7, sp, #0
   160a4:	60b9      	str	r1, [r7, #8]
   160a6:	607b      	str	r3, [r7, #4]
   160a8:	4603      	mov	r3, r0
   160aa:	81fb      	strh	r3, [r7, #14]
   160ac:	4613      	mov	r3, r2
   160ae:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   160b0:	211c      	movs	r1, #28
   160b2:	f242 0019 	movw	r0, #8217	; 0x2019
   160b6:	f7ff faa0 	bl	155fa <hciCmdAlloc>
   160ba:	6178      	str	r0, [r7, #20]
   160bc:	697b      	ldr	r3, [r7, #20]
   160be:	2b00      	cmp	r3, #0
   160c0:	d02e      	beq.n	16120 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   160c2:	697b      	ldr	r3, [r7, #20]
   160c4:	3303      	adds	r3, #3
   160c6:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   160c8:	693b      	ldr	r3, [r7, #16]
   160ca:	1c5a      	adds	r2, r3, #1
   160cc:	613a      	str	r2, [r7, #16]
   160ce:	89fa      	ldrh	r2, [r7, #14]
   160d0:	b2d2      	uxtb	r2, r2
   160d2:	701a      	strb	r2, [r3, #0]
   160d4:	693b      	ldr	r3, [r7, #16]
   160d6:	1c5a      	adds	r2, r3, #1
   160d8:	613a      	str	r2, [r7, #16]
   160da:	89fa      	ldrh	r2, [r7, #14]
   160dc:	0a12      	lsrs	r2, r2, #8
   160de:	b292      	uxth	r2, r2
   160e0:	b2d2      	uxtb	r2, r2
   160e2:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   160e4:	2208      	movs	r2, #8
   160e6:	68b9      	ldr	r1, [r7, #8]
   160e8:	6938      	ldr	r0, [r7, #16]
   160ea:	f7f6 f839 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   160ee:	693b      	ldr	r3, [r7, #16]
   160f0:	3308      	adds	r3, #8
   160f2:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   160f4:	693b      	ldr	r3, [r7, #16]
   160f6:	1c5a      	adds	r2, r3, #1
   160f8:	613a      	str	r2, [r7, #16]
   160fa:	89ba      	ldrh	r2, [r7, #12]
   160fc:	b2d2      	uxtb	r2, r2
   160fe:	701a      	strb	r2, [r3, #0]
   16100:	693b      	ldr	r3, [r7, #16]
   16102:	1c5a      	adds	r2, r3, #1
   16104:	613a      	str	r2, [r7, #16]
   16106:	89ba      	ldrh	r2, [r7, #12]
   16108:	0a12      	lsrs	r2, r2, #8
   1610a:	b292      	uxth	r2, r2
   1610c:	b2d2      	uxtb	r2, r2
   1610e:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   16110:	2210      	movs	r2, #16
   16112:	6879      	ldr	r1, [r7, #4]
   16114:	6938      	ldr	r0, [r7, #16]
   16116:	f7f6 f823 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1611a:	6978      	ldr	r0, [r7, #20]
   1611c:	f7ff fa9c 	bl	15658 <hciCmdSend>
  }
}
   16120:	bf00      	nop
   16122:	3718      	adds	r7, #24
   16124:	46bd      	mov	sp, r7
   16126:	bd80      	pop	{r7, pc}

00016128 <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   16128:	b580      	push	{r7, lr}
   1612a:	b082      	sub	sp, #8
   1612c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   1612e:	2100      	movs	r1, #0
   16130:	f241 0009 	movw	r0, #4105	; 0x1009
   16134:	f7ff fa61 	bl	155fa <hciCmdAlloc>
   16138:	6078      	str	r0, [r7, #4]
   1613a:	687b      	ldr	r3, [r7, #4]
   1613c:	2b00      	cmp	r3, #0
   1613e:	d002      	beq.n	16146 <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   16140:	6878      	ldr	r0, [r7, #4]
   16142:	f7ff fa89 	bl	15658 <hciCmdSend>
  }
}
   16146:	bf00      	nop
   16148:	3708      	adds	r7, #8
   1614a:	46bd      	mov	sp, r7
   1614c:	bd80      	pop	{r7, pc}

0001614e <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   1614e:	b580      	push	{r7, lr}
   16150:	b082      	sub	sp, #8
   16152:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   16154:	2100      	movs	r1, #0
   16156:	f241 0001 	movw	r0, #4097	; 0x1001
   1615a:	f7ff fa4e 	bl	155fa <hciCmdAlloc>
   1615e:	6078      	str	r0, [r7, #4]
   16160:	687b      	ldr	r3, [r7, #4]
   16162:	2b00      	cmp	r3, #0
   16164:	d002      	beq.n	1616c <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   16166:	6878      	ldr	r0, [r7, #4]
   16168:	f7ff fa76 	bl	15658 <hciCmdSend>
  }
}
   1616c:	bf00      	nop
   1616e:	3708      	adds	r7, #8
   16170:	46bd      	mov	sp, r7
   16172:	bd80      	pop	{r7, pc}

00016174 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   16174:	b580      	push	{r7, lr}
   16176:	b084      	sub	sp, #16
   16178:	af00      	add	r7, sp, #0
   1617a:	4603      	mov	r3, r0
   1617c:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   1617e:	2102      	movs	r1, #2
   16180:	f241 4005 	movw	r0, #5125	; 0x1405
   16184:	f7ff fa39 	bl	155fa <hciCmdAlloc>
   16188:	60f8      	str	r0, [r7, #12]
   1618a:	68fb      	ldr	r3, [r7, #12]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d013      	beq.n	161b8 <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16190:	68fb      	ldr	r3, [r7, #12]
   16192:	3303      	adds	r3, #3
   16194:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   16196:	68bb      	ldr	r3, [r7, #8]
   16198:	1c5a      	adds	r2, r3, #1
   1619a:	60ba      	str	r2, [r7, #8]
   1619c:	88fa      	ldrh	r2, [r7, #6]
   1619e:	b2d2      	uxtb	r2, r2
   161a0:	701a      	strb	r2, [r3, #0]
   161a2:	68bb      	ldr	r3, [r7, #8]
   161a4:	1c5a      	adds	r2, r3, #1
   161a6:	60ba      	str	r2, [r7, #8]
   161a8:	88fa      	ldrh	r2, [r7, #6]
   161aa:	0a12      	lsrs	r2, r2, #8
   161ac:	b292      	uxth	r2, r2
   161ae:	b2d2      	uxtb	r2, r2
   161b0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   161b2:	68f8      	ldr	r0, [r7, #12]
   161b4:	f7ff fa50 	bl	15658 <hciCmdSend>
  }
}
   161b8:	bf00      	nop
   161ba:	3710      	adds	r7, #16
   161bc:	46bd      	mov	sp, r7
   161be:	bd80      	pop	{r7, pc}

000161c0 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   161c0:	b580      	push	{r7, lr}
   161c2:	b084      	sub	sp, #16
   161c4:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   161c6:	2314      	movs	r3, #20
   161c8:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   161ca:	4b13      	ldr	r3, [pc, #76]	; (16218 <HciResetCmd+0x58>)
   161cc:	68db      	ldr	r3, [r3, #12]
   161ce:	1d3a      	adds	r2, r7, #4
   161d0:	4610      	mov	r0, r2
   161d2:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   161d4:	e002      	b.n	161dc <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   161d6:	68f8      	ldr	r0, [r7, #12]
   161d8:	f004 fc2a 	bl	1aa30 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   161dc:	f107 030b 	add.w	r3, r7, #11
   161e0:	4619      	mov	r1, r3
   161e2:	480e      	ldr	r0, [pc, #56]	; (1621c <HciResetCmd+0x5c>)
   161e4:	f004 fc5e 	bl	1aaa4 <WsfMsgDeq>
   161e8:	60f8      	str	r0, [r7, #12]
   161ea:	68fb      	ldr	r3, [r7, #12]
   161ec:	2b00      	cmp	r3, #0
   161ee:	d1f2      	bne.n	161d6 <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   161f0:	4b0b      	ldr	r3, [pc, #44]	; (16220 <HciResetCmd+0x60>)
   161f2:	2201      	movs	r2, #1
   161f4:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   161f6:	2100      	movs	r1, #0
   161f8:	f640 4003 	movw	r0, #3075	; 0xc03
   161fc:	f7ff f9fd 	bl	155fa <hciCmdAlloc>
   16200:	60f8      	str	r0, [r7, #12]
   16202:	68fb      	ldr	r3, [r7, #12]
   16204:	2b00      	cmp	r3, #0
   16206:	d002      	beq.n	1620e <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   16208:	68f8      	ldr	r0, [r7, #12]
   1620a:	f7ff fa25 	bl	15658 <hciCmdSend>
  }
}
   1620e:	bf00      	nop
   16210:	3710      	adds	r7, #16
   16212:	46bd      	mov	sp, r7
   16214:	bd80      	pop	{r7, pc}
   16216:	bf00      	nop
   16218:	10044390 	.word	0x10044390
   1621c:	10044270 	.word	0x10044270
   16220:	10044260 	.word	0x10044260

00016224 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   16224:	b580      	push	{r7, lr}
   16226:	b084      	sub	sp, #16
   16228:	af00      	add	r7, sp, #0
   1622a:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   1622c:	2108      	movs	r1, #8
   1622e:	f640 4001 	movw	r0, #3073	; 0xc01
   16232:	f7ff f9e2 	bl	155fa <hciCmdAlloc>
   16236:	60f8      	str	r0, [r7, #12]
   16238:	68fb      	ldr	r3, [r7, #12]
   1623a:	2b00      	cmp	r3, #0
   1623c:	d00a      	beq.n	16254 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1623e:	68fb      	ldr	r3, [r7, #12]
   16240:	3303      	adds	r3, #3
   16242:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   16244:	2208      	movs	r2, #8
   16246:	6879      	ldr	r1, [r7, #4]
   16248:	68b8      	ldr	r0, [r7, #8]
   1624a:	f7f5 ff89 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1624e:	68f8      	ldr	r0, [r7, #12]
   16250:	f7ff fa02 	bl	15658 <hciCmdSend>
  }
}
   16254:	bf00      	nop
   16256:	3710      	adds	r7, #16
   16258:	46bd      	mov	sp, r7
   1625a:	bd80      	pop	{r7, pc}

0001625c <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   1625c:	b580      	push	{r7, lr}
   1625e:	b084      	sub	sp, #16
   16260:	af00      	add	r7, sp, #0
   16262:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   16264:	2108      	movs	r1, #8
   16266:	f640 4063 	movw	r0, #3171	; 0xc63
   1626a:	f7ff f9c6 	bl	155fa <hciCmdAlloc>
   1626e:	60f8      	str	r0, [r7, #12]
   16270:	68fb      	ldr	r3, [r7, #12]
   16272:	2b00      	cmp	r3, #0
   16274:	d00a      	beq.n	1628c <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16276:	68fb      	ldr	r3, [r7, #12]
   16278:	3303      	adds	r3, #3
   1627a:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   1627c:	2208      	movs	r2, #8
   1627e:	6879      	ldr	r1, [r7, #4]
   16280:	68b8      	ldr	r0, [r7, #8]
   16282:	f7f5 ff6d 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   16286:	68f8      	ldr	r0, [r7, #12]
   16288:	f7ff f9e6 	bl	15658 <hciCmdSend>
  }
}
   1628c:	bf00      	nop
   1628e:	3710      	adds	r7, #16
   16290:	46bd      	mov	sp, r7
   16292:	bd80      	pop	{r7, pc}

00016294 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   16294:	b580      	push	{r7, lr}
   16296:	b084      	sub	sp, #16
   16298:	af00      	add	r7, sp, #0
   1629a:	4603      	mov	r3, r0
   1629c:	460a      	mov	r2, r1
   1629e:	80fb      	strh	r3, [r7, #6]
   162a0:	4613      	mov	r3, r2
   162a2:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   162a4:	2104      	movs	r1, #4
   162a6:	f640 407c 	movw	r0, #3196	; 0xc7c
   162aa:	f7ff f9a6 	bl	155fa <hciCmdAlloc>
   162ae:	60f8      	str	r0, [r7, #12]
   162b0:	68fb      	ldr	r3, [r7, #12]
   162b2:	2b00      	cmp	r3, #0
   162b4:	d021      	beq.n	162fa <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   162b6:	68fb      	ldr	r3, [r7, #12]
   162b8:	3303      	adds	r3, #3
   162ba:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   162bc:	68bb      	ldr	r3, [r7, #8]
   162be:	1c5a      	adds	r2, r3, #1
   162c0:	60ba      	str	r2, [r7, #8]
   162c2:	88fa      	ldrh	r2, [r7, #6]
   162c4:	b2d2      	uxtb	r2, r2
   162c6:	701a      	strb	r2, [r3, #0]
   162c8:	68bb      	ldr	r3, [r7, #8]
   162ca:	1c5a      	adds	r2, r3, #1
   162cc:	60ba      	str	r2, [r7, #8]
   162ce:	88fa      	ldrh	r2, [r7, #6]
   162d0:	0a12      	lsrs	r2, r2, #8
   162d2:	b292      	uxth	r2, r2
   162d4:	b2d2      	uxtb	r2, r2
   162d6:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   162d8:	68bb      	ldr	r3, [r7, #8]
   162da:	1c5a      	adds	r2, r3, #1
   162dc:	60ba      	str	r2, [r7, #8]
   162de:	88ba      	ldrh	r2, [r7, #4]
   162e0:	b2d2      	uxtb	r2, r2
   162e2:	701a      	strb	r2, [r3, #0]
   162e4:	68bb      	ldr	r3, [r7, #8]
   162e6:	1c5a      	adds	r2, r3, #1
   162e8:	60ba      	str	r2, [r7, #8]
   162ea:	88ba      	ldrh	r2, [r7, #4]
   162ec:	0a12      	lsrs	r2, r2, #8
   162ee:	b292      	uxth	r2, r2
   162f0:	b2d2      	uxtb	r2, r2
   162f2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   162f4:	68f8      	ldr	r0, [r7, #12]
   162f6:	f7ff f9af 	bl	15658 <hciCmdSend>
  }
}
   162fa:	bf00      	nop
   162fc:	3710      	adds	r7, #16
   162fe:	46bd      	mov	sp, r7
   16300:	bd80      	pop	{r7, pc}

00016302 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   16302:	b580      	push	{r7, lr}
   16304:	b086      	sub	sp, #24
   16306:	af00      	add	r7, sp, #0
   16308:	60b9      	str	r1, [r7, #8]
   1630a:	607a      	str	r2, [r7, #4]
   1630c:	603b      	str	r3, [r7, #0]
   1630e:	4603      	mov	r3, r0
   16310:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   16312:	2127      	movs	r1, #39	; 0x27
   16314:	f242 0027 	movw	r0, #8231	; 0x2027
   16318:	f7ff f96f 	bl	155fa <hciCmdAlloc>
   1631c:	6178      	str	r0, [r7, #20]
   1631e:	697b      	ldr	r3, [r7, #20]
   16320:	2b00      	cmp	r3, #0
   16322:	d01e      	beq.n	16362 <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16324:	697b      	ldr	r3, [r7, #20]
   16326:	3303      	adds	r3, #3
   16328:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1632a:	693b      	ldr	r3, [r7, #16]
   1632c:	1c5a      	adds	r2, r3, #1
   1632e:	613a      	str	r2, [r7, #16]
   16330:	7bfa      	ldrb	r2, [r7, #15]
   16332:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16334:	68b9      	ldr	r1, [r7, #8]
   16336:	6938      	ldr	r0, [r7, #16]
   16338:	f009 fc8b 	bl	1fc52 <BdaCpy>
   1633c:	693b      	ldr	r3, [r7, #16]
   1633e:	3306      	adds	r3, #6
   16340:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   16342:	2210      	movs	r2, #16
   16344:	6879      	ldr	r1, [r7, #4]
   16346:	6938      	ldr	r0, [r7, #16]
   16348:	f7f5 ff0a 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   1634c:	693b      	ldr	r3, [r7, #16]
   1634e:	3310      	adds	r3, #16
   16350:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   16352:	2210      	movs	r2, #16
   16354:	6839      	ldr	r1, [r7, #0]
   16356:	6938      	ldr	r0, [r7, #16]
   16358:	f7f5 ff02 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1635c:	6978      	ldr	r0, [r7, #20]
   1635e:	f7ff f97b 	bl	15658 <hciCmdSend>
  }
}
   16362:	bf00      	nop
   16364:	3718      	adds	r7, #24
   16366:	46bd      	mov	sp, r7
   16368:	bd80      	pop	{r7, pc}

0001636a <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   1636a:	b580      	push	{r7, lr}
   1636c:	b084      	sub	sp, #16
   1636e:	af00      	add	r7, sp, #0
   16370:	4603      	mov	r3, r0
   16372:	6039      	str	r1, [r7, #0]
   16374:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   16376:	2107      	movs	r1, #7
   16378:	f242 0028 	movw	r0, #8232	; 0x2028
   1637c:	f7ff f93d 	bl	155fa <hciCmdAlloc>
   16380:	60f8      	str	r0, [r7, #12]
   16382:	68fb      	ldr	r3, [r7, #12]
   16384:	2b00      	cmp	r3, #0
   16386:	d011      	beq.n	163ac <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16388:	68fb      	ldr	r3, [r7, #12]
   1638a:	3303      	adds	r3, #3
   1638c:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1638e:	68bb      	ldr	r3, [r7, #8]
   16390:	1c5a      	adds	r2, r3, #1
   16392:	60ba      	str	r2, [r7, #8]
   16394:	79fa      	ldrb	r2, [r7, #7]
   16396:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   16398:	6839      	ldr	r1, [r7, #0]
   1639a:	68b8      	ldr	r0, [r7, #8]
   1639c:	f009 fc59 	bl	1fc52 <BdaCpy>
   163a0:	68bb      	ldr	r3, [r7, #8]
   163a2:	3306      	adds	r3, #6
   163a4:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   163a6:	68f8      	ldr	r0, [r7, #12]
   163a8:	f7ff f956 	bl	15658 <hciCmdSend>
  }
}
   163ac:	bf00      	nop
   163ae:	3710      	adds	r7, #16
   163b0:	46bd      	mov	sp, r7
   163b2:	bd80      	pop	{r7, pc}

000163b4 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   163b4:	b580      	push	{r7, lr}
   163b6:	b082      	sub	sp, #8
   163b8:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   163ba:	2100      	movs	r1, #0
   163bc:	f242 0029 	movw	r0, #8233	; 0x2029
   163c0:	f7ff f91b 	bl	155fa <hciCmdAlloc>
   163c4:	6078      	str	r0, [r7, #4]
   163c6:	687b      	ldr	r3, [r7, #4]
   163c8:	2b00      	cmp	r3, #0
   163ca:	d002      	beq.n	163d2 <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   163cc:	6878      	ldr	r0, [r7, #4]
   163ce:	f7ff f943 	bl	15658 <hciCmdSend>
  }
}
   163d2:	bf00      	nop
   163d4:	3708      	adds	r7, #8
   163d6:	46bd      	mov	sp, r7
   163d8:	bd80      	pop	{r7, pc}

000163da <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   163da:	b580      	push	{r7, lr}
   163dc:	b082      	sub	sp, #8
   163de:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   163e0:	2100      	movs	r1, #0
   163e2:	f242 002a 	movw	r0, #8234	; 0x202a
   163e6:	f7ff f908 	bl	155fa <hciCmdAlloc>
   163ea:	6078      	str	r0, [r7, #4]
   163ec:	687b      	ldr	r3, [r7, #4]
   163ee:	2b00      	cmp	r3, #0
   163f0:	d002      	beq.n	163f8 <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   163f2:	6878      	ldr	r0, [r7, #4]
   163f4:	f7ff f930 	bl	15658 <hciCmdSend>
  }
}
   163f8:	bf00      	nop
   163fa:	3708      	adds	r7, #8
   163fc:	46bd      	mov	sp, r7
   163fe:	bd80      	pop	{r7, pc}

00016400 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   16400:	b580      	push	{r7, lr}
   16402:	b084      	sub	sp, #16
   16404:	af00      	add	r7, sp, #0
   16406:	4603      	mov	r3, r0
   16408:	6039      	str	r1, [r7, #0]
   1640a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   1640c:	2107      	movs	r1, #7
   1640e:	f242 002b 	movw	r0, #8235	; 0x202b
   16412:	f7ff f8f2 	bl	155fa <hciCmdAlloc>
   16416:	60f8      	str	r0, [r7, #12]
   16418:	68fb      	ldr	r3, [r7, #12]
   1641a:	2b00      	cmp	r3, #0
   1641c:	d011      	beq.n	16442 <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1641e:	68fb      	ldr	r3, [r7, #12]
   16420:	3303      	adds	r3, #3
   16422:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16424:	68bb      	ldr	r3, [r7, #8]
   16426:	1c5a      	adds	r2, r3, #1
   16428:	60ba      	str	r2, [r7, #8]
   1642a:	79fa      	ldrb	r2, [r7, #7]
   1642c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   1642e:	6839      	ldr	r1, [r7, #0]
   16430:	68b8      	ldr	r0, [r7, #8]
   16432:	f009 fc0e 	bl	1fc52 <BdaCpy>
   16436:	68bb      	ldr	r3, [r7, #8]
   16438:	3306      	adds	r3, #6
   1643a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   1643c:	68f8      	ldr	r0, [r7, #12]
   1643e:	f7ff f90b 	bl	15658 <hciCmdSend>
  }
}
   16442:	bf00      	nop
   16444:	3710      	adds	r7, #16
   16446:	46bd      	mov	sp, r7
   16448:	bd80      	pop	{r7, pc}

0001644a <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   1644a:	b580      	push	{r7, lr}
   1644c:	b084      	sub	sp, #16
   1644e:	af00      	add	r7, sp, #0
   16450:	4603      	mov	r3, r0
   16452:	6039      	str	r1, [r7, #0]
   16454:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   16456:	2107      	movs	r1, #7
   16458:	f242 002c 	movw	r0, #8236	; 0x202c
   1645c:	f7ff f8cd 	bl	155fa <hciCmdAlloc>
   16460:	60f8      	str	r0, [r7, #12]
   16462:	68fb      	ldr	r3, [r7, #12]
   16464:	2b00      	cmp	r3, #0
   16466:	d011      	beq.n	1648c <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16468:	68fb      	ldr	r3, [r7, #12]
   1646a:	3303      	adds	r3, #3
   1646c:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1646e:	68bb      	ldr	r3, [r7, #8]
   16470:	1c5a      	adds	r2, r3, #1
   16472:	60ba      	str	r2, [r7, #8]
   16474:	79fa      	ldrb	r2, [r7, #7]
   16476:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   16478:	6839      	ldr	r1, [r7, #0]
   1647a:	68b8      	ldr	r0, [r7, #8]
   1647c:	f009 fbe9 	bl	1fc52 <BdaCpy>
   16480:	68bb      	ldr	r3, [r7, #8]
   16482:	3306      	adds	r3, #6
   16484:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   16486:	68f8      	ldr	r0, [r7, #12]
   16488:	f7ff f8e6 	bl	15658 <hciCmdSend>
  }
}
   1648c:	bf00      	nop
   1648e:	3710      	adds	r7, #16
   16490:	46bd      	mov	sp, r7
   16492:	bd80      	pop	{r7, pc}

00016494 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   16494:	b580      	push	{r7, lr}
   16496:	b084      	sub	sp, #16
   16498:	af00      	add	r7, sp, #0
   1649a:	4603      	mov	r3, r0
   1649c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   1649e:	2101      	movs	r1, #1
   164a0:	f242 002d 	movw	r0, #8237	; 0x202d
   164a4:	f7ff f8a9 	bl	155fa <hciCmdAlloc>
   164a8:	60f8      	str	r0, [r7, #12]
   164aa:	68fb      	ldr	r3, [r7, #12]
   164ac:	2b00      	cmp	r3, #0
   164ae:	d00a      	beq.n	164c6 <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   164b0:	68fb      	ldr	r3, [r7, #12]
   164b2:	3303      	adds	r3, #3
   164b4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   164b6:	68bb      	ldr	r3, [r7, #8]
   164b8:	1c5a      	adds	r2, r3, #1
   164ba:	60ba      	str	r2, [r7, #8]
   164bc:	79fa      	ldrb	r2, [r7, #7]
   164be:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   164c0:	68f8      	ldr	r0, [r7, #12]
   164c2:	f7ff f8c9 	bl	15658 <hciCmdSend>
  }
}
   164c6:	bf00      	nop
   164c8:	3710      	adds	r7, #16
   164ca:	46bd      	mov	sp, r7
   164cc:	bd80      	pop	{r7, pc}

000164ce <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   164ce:	b580      	push	{r7, lr}
   164d0:	b084      	sub	sp, #16
   164d2:	af00      	add	r7, sp, #0
   164d4:	4603      	mov	r3, r0
   164d6:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   164d8:	2102      	movs	r1, #2
   164da:	f242 002e 	movw	r0, #8238	; 0x202e
   164de:	f7ff f88c 	bl	155fa <hciCmdAlloc>
   164e2:	60f8      	str	r0, [r7, #12]
   164e4:	68fb      	ldr	r3, [r7, #12]
   164e6:	2b00      	cmp	r3, #0
   164e8:	d013      	beq.n	16512 <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   164ea:	68fb      	ldr	r3, [r7, #12]
   164ec:	3303      	adds	r3, #3
   164ee:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   164f0:	68bb      	ldr	r3, [r7, #8]
   164f2:	1c5a      	adds	r2, r3, #1
   164f4:	60ba      	str	r2, [r7, #8]
   164f6:	88fa      	ldrh	r2, [r7, #6]
   164f8:	b2d2      	uxtb	r2, r2
   164fa:	701a      	strb	r2, [r3, #0]
   164fc:	68bb      	ldr	r3, [r7, #8]
   164fe:	1c5a      	adds	r2, r3, #1
   16500:	60ba      	str	r2, [r7, #8]
   16502:	88fa      	ldrh	r2, [r7, #6]
   16504:	0a12      	lsrs	r2, r2, #8
   16506:	b292      	uxth	r2, r2
   16508:	b2d2      	uxtb	r2, r2
   1650a:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1650c:	68f8      	ldr	r0, [r7, #12]
   1650e:	f7ff f8a3 	bl	15658 <hciCmdSend>
  }
}
   16512:	bf00      	nop
   16514:	3710      	adds	r7, #16
   16516:	46bd      	mov	sp, r7
   16518:	bd80      	pop	{r7, pc}

0001651a <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   1651a:	b580      	push	{r7, lr}
   1651c:	b084      	sub	sp, #16
   1651e:	af00      	add	r7, sp, #0
   16520:	4603      	mov	r3, r0
   16522:	6039      	str	r1, [r7, #0]
   16524:	71fb      	strb	r3, [r7, #7]
   16526:	4613      	mov	r3, r2
   16528:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   1652a:	2108      	movs	r1, #8
   1652c:	f242 004e 	movw	r0, #8270	; 0x204e
   16530:	f7ff f863 	bl	155fa <hciCmdAlloc>
   16534:	60f8      	str	r0, [r7, #12]
   16536:	68fb      	ldr	r3, [r7, #12]
   16538:	2b00      	cmp	r3, #0
   1653a:	d016      	beq.n	1656a <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1653c:	68fb      	ldr	r3, [r7, #12]
   1653e:	3303      	adds	r3, #3
   16540:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   16542:	68bb      	ldr	r3, [r7, #8]
   16544:	1c5a      	adds	r2, r3, #1
   16546:	60ba      	str	r2, [r7, #8]
   16548:	79fa      	ldrb	r2, [r7, #7]
   1654a:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   1654c:	6839      	ldr	r1, [r7, #0]
   1654e:	68b8      	ldr	r0, [r7, #8]
   16550:	f009 fb7f 	bl	1fc52 <BdaCpy>
   16554:	68bb      	ldr	r3, [r7, #8]
   16556:	3306      	adds	r3, #6
   16558:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   1655a:	68bb      	ldr	r3, [r7, #8]
   1655c:	1c5a      	adds	r2, r3, #1
   1655e:	60ba      	str	r2, [r7, #8]
   16560:	79ba      	ldrb	r2, [r7, #6]
   16562:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   16564:	68f8      	ldr	r0, [r7, #12]
   16566:	f7ff f877 	bl	15658 <hciCmdSend>
  }
}
   1656a:	bf00      	nop
   1656c:	3710      	adds	r7, #16
   1656e:	46bd      	mov	sp, r7
   16570:	bd80      	pop	{r7, pc}

00016572 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   16572:	b580      	push	{r7, lr}
   16574:	b084      	sub	sp, #16
   16576:	af00      	add	r7, sp, #0
   16578:	4603      	mov	r3, r0
   1657a:	603a      	str	r2, [r7, #0]
   1657c:	80fb      	strh	r3, [r7, #6]
   1657e:	460b      	mov	r3, r1
   16580:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   16582:	797b      	ldrb	r3, [r7, #5]
   16584:	b29a      	uxth	r2, r3
   16586:	88fb      	ldrh	r3, [r7, #6]
   16588:	4611      	mov	r1, r2
   1658a:	4618      	mov	r0, r3
   1658c:	f7ff f835 	bl	155fa <hciCmdAlloc>
   16590:	60f8      	str	r0, [r7, #12]
   16592:	68fb      	ldr	r3, [r7, #12]
   16594:	2b00      	cmp	r3, #0
   16596:	d00b      	beq.n	165b0 <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   16598:	68fb      	ldr	r3, [r7, #12]
   1659a:	3303      	adds	r3, #3
   1659c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   1659e:	797b      	ldrb	r3, [r7, #5]
   165a0:	461a      	mov	r2, r3
   165a2:	6839      	ldr	r1, [r7, #0]
   165a4:	68b8      	ldr	r0, [r7, #8]
   165a6:	f7f5 fddb 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   165aa:	68f8      	ldr	r0, [r7, #12]
   165ac:	f7ff f854 	bl	15658 <hciCmdSend>
  }
}
   165b0:	bf00      	nop
   165b2:	3710      	adds	r7, #16
   165b4:	46bd      	mov	sp, r7
   165b6:	bd80      	pop	{r7, pc}

000165b8 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   165b8:	b480      	push	{r7}
   165ba:	b085      	sub	sp, #20
   165bc:	af00      	add	r7, sp, #0
   165be:	4603      	mov	r3, r0
   165c0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   165c2:	4b13      	ldr	r3, [pc, #76]	; (16610 <hciCoreConnAlloc+0x58>)
   165c4:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   165c6:	2308      	movs	r3, #8
   165c8:	73fb      	strb	r3, [r7, #15]
   165ca:	e018      	b.n	165fe <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   165cc:	68bb      	ldr	r3, [r7, #8]
   165ce:	8a1b      	ldrh	r3, [r3, #16]
   165d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   165d4:	4293      	cmp	r3, r2
   165d6:	d10c      	bne.n	165f2 <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   165d8:	68bb      	ldr	r3, [r7, #8]
   165da:	88fa      	ldrh	r2, [r7, #6]
   165dc:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   165de:	68bb      	ldr	r3, [r7, #8]
   165e0:	2200      	movs	r2, #0
   165e2:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   165e4:	68bb      	ldr	r3, [r7, #8]
   165e6:	2200      	movs	r2, #0
   165e8:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   165ea:	68bb      	ldr	r3, [r7, #8]
   165ec:	2200      	movs	r2, #0
   165ee:	761a      	strb	r2, [r3, #24]

      return;
   165f0:	e008      	b.n	16604 <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   165f2:	7bfb      	ldrb	r3, [r7, #15]
   165f4:	3b01      	subs	r3, #1
   165f6:	73fb      	strb	r3, [r7, #15]
   165f8:	68bb      	ldr	r3, [r7, #8]
   165fa:	331c      	adds	r3, #28
   165fc:	60bb      	str	r3, [r7, #8]
   165fe:	7bfb      	ldrb	r3, [r7, #15]
   16600:	2b00      	cmp	r3, #0
   16602:	d1e3      	bne.n	165cc <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   16604:	3714      	adds	r7, #20
   16606:	46bd      	mov	sp, r7
   16608:	f85d 7b04 	ldr.w	r7, [sp], #4
   1660c:	4770      	bx	lr
   1660e:	bf00      	nop
   16610:	1004427c 	.word	0x1004427c

00016614 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   16614:	b580      	push	{r7, lr}
   16616:	b084      	sub	sp, #16
   16618:	af00      	add	r7, sp, #0
   1661a:	4603      	mov	r3, r0
   1661c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1661e:	4b1d      	ldr	r3, [pc, #116]	; (16694 <hciCoreConnFree+0x80>)
   16620:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16622:	2308      	movs	r3, #8
   16624:	73fb      	strb	r3, [r7, #15]
   16626:	e02f      	b.n	16688 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   16628:	68bb      	ldr	r3, [r7, #8]
   1662a:	8a1b      	ldrh	r3, [r3, #16]
   1662c:	88fa      	ldrh	r2, [r7, #6]
   1662e:	429a      	cmp	r2, r3
   16630:	d124      	bne.n	1667c <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   16632:	68bb      	ldr	r3, [r7, #8]
   16634:	681b      	ldr	r3, [r3, #0]
   16636:	2b00      	cmp	r3, #0
   16638:	d007      	beq.n	1664a <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   1663a:	68bb      	ldr	r3, [r7, #8]
   1663c:	681b      	ldr	r3, [r3, #0]
   1663e:	4618      	mov	r0, r3
   16640:	f004 f9f6 	bl	1aa30 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   16644:	68bb      	ldr	r3, [r7, #8]
   16646:	2200      	movs	r2, #0
   16648:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   1664a:	68bb      	ldr	r3, [r7, #8]
   1664c:	2200      	movs	r2, #0
   1664e:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   16650:	68bb      	ldr	r3, [r7, #8]
   16652:	689b      	ldr	r3, [r3, #8]
   16654:	2b00      	cmp	r3, #0
   16656:	d007      	beq.n	16668 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   16658:	68bb      	ldr	r3, [r7, #8]
   1665a:	689b      	ldr	r3, [r3, #8]
   1665c:	4618      	mov	r0, r3
   1665e:	f004 f9e7 	bl	1aa30 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   16662:	68bb      	ldr	r3, [r7, #8]
   16664:	2200      	movs	r2, #0
   16666:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   16668:	68bb      	ldr	r3, [r7, #8]
   1666a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1666e:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   16670:	68bb      	ldr	r3, [r7, #8]
   16672:	7e5b      	ldrb	r3, [r3, #25]
   16674:	4618      	mov	r0, r3
   16676:	f000 f895 	bl	167a4 <hciCoreTxReady>

      return;
   1667a:	e008      	b.n	1668e <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1667c:	7bfb      	ldrb	r3, [r7, #15]
   1667e:	3b01      	subs	r3, #1
   16680:	73fb      	strb	r3, [r7, #15]
   16682:	68bb      	ldr	r3, [r7, #8]
   16684:	331c      	adds	r3, #28
   16686:	60bb      	str	r3, [r7, #8]
   16688:	7bfb      	ldrb	r3, [r7, #15]
   1668a:	2b00      	cmp	r3, #0
   1668c:	d1cc      	bne.n	16628 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   1668e:	3710      	adds	r7, #16
   16690:	46bd      	mov	sp, r7
   16692:	bd80      	pop	{r7, pc}
   16694:	1004427c 	.word	0x1004427c

00016698 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   16698:	b480      	push	{r7}
   1669a:	b085      	sub	sp, #20
   1669c:	af00      	add	r7, sp, #0
   1669e:	4603      	mov	r3, r0
   166a0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   166a2:	4b0e      	ldr	r3, [pc, #56]	; (166dc <hciCoreConnByHandle+0x44>)
   166a4:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   166a6:	2308      	movs	r3, #8
   166a8:	73fb      	strb	r3, [r7, #15]
   166aa:	e00c      	b.n	166c6 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   166ac:	68bb      	ldr	r3, [r7, #8]
   166ae:	8a1b      	ldrh	r3, [r3, #16]
   166b0:	88fa      	ldrh	r2, [r7, #6]
   166b2:	429a      	cmp	r2, r3
   166b4:	d101      	bne.n	166ba <hciCoreConnByHandle+0x22>
    {
      return pConn;
   166b6:	68bb      	ldr	r3, [r7, #8]
   166b8:	e009      	b.n	166ce <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   166ba:	7bfb      	ldrb	r3, [r7, #15]
   166bc:	3b01      	subs	r3, #1
   166be:	73fb      	strb	r3, [r7, #15]
   166c0:	68bb      	ldr	r3, [r7, #8]
   166c2:	331c      	adds	r3, #28
   166c4:	60bb      	str	r3, [r7, #8]
   166c6:	7bfb      	ldrb	r3, [r7, #15]
   166c8:	2b00      	cmp	r3, #0
   166ca:	d1ef      	bne.n	166ac <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   166cc:	2300      	movs	r3, #0
}
   166ce:	4618      	mov	r0, r3
   166d0:	3714      	adds	r7, #20
   166d2:	46bd      	mov	sp, r7
   166d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   166d8:	4770      	bx	lr
   166da:	bf00      	nop
   166dc:	1004427c 	.word	0x1004427c

000166e0 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   166e0:	b480      	push	{r7}
   166e2:	b083      	sub	sp, #12
   166e4:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   166e6:	4b10      	ldr	r3, [pc, #64]	; (16728 <hciCoreNextConnFragment+0x48>)
   166e8:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   166ea:	2308      	movs	r3, #8
   166ec:	71fb      	strb	r3, [r7, #7]
   166ee:	e011      	b.n	16714 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   166f0:	683b      	ldr	r3, [r7, #0]
   166f2:	8a1b      	ldrh	r3, [r3, #16]
   166f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   166f8:	4293      	cmp	r3, r2
   166fa:	d005      	beq.n	16708 <hciCoreNextConnFragment+0x28>
   166fc:	683b      	ldr	r3, [r7, #0]
   166fe:	7d9b      	ldrb	r3, [r3, #22]
   16700:	2b00      	cmp	r3, #0
   16702:	d001      	beq.n	16708 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   16704:	683b      	ldr	r3, [r7, #0]
   16706:	e009      	b.n	1671c <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16708:	79fb      	ldrb	r3, [r7, #7]
   1670a:	3b01      	subs	r3, #1
   1670c:	71fb      	strb	r3, [r7, #7]
   1670e:	683b      	ldr	r3, [r7, #0]
   16710:	331c      	adds	r3, #28
   16712:	603b      	str	r3, [r7, #0]
   16714:	79fb      	ldrb	r3, [r7, #7]
   16716:	2b00      	cmp	r3, #0
   16718:	d1ea      	bne.n	166f0 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   1671a:	2300      	movs	r3, #0
}
   1671c:	4618      	mov	r0, r3
   1671e:	370c      	adds	r7, #12
   16720:	46bd      	mov	sp, r7
   16722:	f85d 7b04 	ldr.w	r7, [sp], #4
   16726:	4770      	bx	lr
   16728:	1004427c 	.word	0x1004427c

0001672c <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   1672c:	b580      	push	{r7, lr}
   1672e:	b082      	sub	sp, #8
   16730:	af00      	add	r7, sp, #0
   16732:	4603      	mov	r3, r0
   16734:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   16736:	88fb      	ldrh	r3, [r7, #6]
   16738:	4618      	mov	r0, r3
   1673a:	f7ff ff3d 	bl	165b8 <hciCoreConnAlloc>
}
   1673e:	bf00      	nop
   16740:	3708      	adds	r7, #8
   16742:	46bd      	mov	sp, r7
   16744:	bd80      	pop	{r7, pc}

00016746 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   16746:	b580      	push	{r7, lr}
   16748:	b082      	sub	sp, #8
   1674a:	af00      	add	r7, sp, #0
   1674c:	4603      	mov	r3, r0
   1674e:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   16750:	88fb      	ldrh	r3, [r7, #6]
   16752:	4618      	mov	r0, r3
   16754:	f7ff ff5e 	bl	16614 <hciCoreConnFree>
}
   16758:	bf00      	nop
   1675a:	3708      	adds	r7, #8
   1675c:	46bd      	mov	sp, r7
   1675e:	bd80      	pop	{r7, pc}

00016760 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   16760:	b580      	push	{r7, lr}
   16762:	b082      	sub	sp, #8
   16764:	af00      	add	r7, sp, #0
   16766:	6078      	str	r0, [r7, #4]
   16768:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   1676a:	687b      	ldr	r3, [r7, #4]
   1676c:	7e5b      	ldrb	r3, [r3, #25]
   1676e:	3301      	adds	r3, #1
   16770:	b2da      	uxtb	r2, r3
   16772:	687b      	ldr	r3, [r7, #4]
   16774:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   16776:	6839      	ldr	r1, [r7, #0]
   16778:	6878      	ldr	r0, [r7, #4]
   1677a:	f002 fa47 	bl	18c0c <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   1677e:	4b08      	ldr	r3, [pc, #32]	; (167a0 <hciCoreSendAclData+0x40>)
   16780:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16784:	2b00      	cmp	r3, #0
   16786:	d007      	beq.n	16798 <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   16788:	4b05      	ldr	r3, [pc, #20]	; (167a0 <hciCoreSendAclData+0x40>)
   1678a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   1678e:	3b01      	subs	r3, #1
   16790:	b2da      	uxtb	r2, r3
   16792:	4b03      	ldr	r3, [pc, #12]	; (167a0 <hciCoreSendAclData+0x40>)
   16794:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   16798:	bf00      	nop
   1679a:	3708      	adds	r7, #8
   1679c:	46bd      	mov	sp, r7
   1679e:	bd80      	pop	{r7, pc}
   167a0:	1004427c 	.word	0x1004427c

000167a4 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   167a4:	b580      	push	{r7, lr}
   167a6:	b086      	sub	sp, #24
   167a8:	af00      	add	r7, sp, #0
   167aa:	4603      	mov	r3, r0
   167ac:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   167ae:	79fb      	ldrb	r3, [r7, #7]
   167b0:	2b00      	cmp	r3, #0
   167b2:	d050      	beq.n	16856 <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   167b4:	4b2d      	ldr	r3, [pc, #180]	; (1686c <hciCoreTxReady+0xc8>)
   167b6:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   167ba:	79fb      	ldrb	r3, [r7, #7]
   167bc:	4413      	add	r3, r2
   167be:	b2da      	uxtb	r2, r3
   167c0:	4b2a      	ldr	r3, [pc, #168]	; (1686c <hciCoreTxReady+0xc8>)
   167c2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   167c6:	4b29      	ldr	r3, [pc, #164]	; (1686c <hciCoreTxReady+0xc8>)
   167c8:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   167cc:	4b27      	ldr	r3, [pc, #156]	; (1686c <hciCoreTxReady+0xc8>)
   167ce:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   167d2:	429a      	cmp	r2, r3
   167d4:	d93f      	bls.n	16856 <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   167d6:	4b25      	ldr	r3, [pc, #148]	; (1686c <hciCoreTxReady+0xc8>)
   167d8:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   167dc:	4b23      	ldr	r3, [pc, #140]	; (1686c <hciCoreTxReady+0xc8>)
   167de:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   167e2:	e038      	b.n	16856 <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   167e4:	2000      	movs	r0, #0
   167e6:	f000 f88d 	bl	16904 <hciCoreTxAclContinue>
   167ea:	4603      	mov	r3, r0
   167ec:	2b00      	cmp	r3, #0
   167ee:	d132      	bne.n	16856 <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   167f0:	f107 030b 	add.w	r3, r7, #11
   167f4:	4619      	mov	r1, r3
   167f6:	481e      	ldr	r0, [pc, #120]	; (16870 <hciCoreTxReady+0xcc>)
   167f8:	f004 f954 	bl	1aaa4 <WsfMsgDeq>
   167fc:	6178      	str	r0, [r7, #20]
   167fe:	697b      	ldr	r3, [r7, #20]
   16800:	2b00      	cmp	r3, #0
   16802:	d02e      	beq.n	16862 <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   16804:	697b      	ldr	r3, [r7, #20]
   16806:	781b      	ldrb	r3, [r3, #0]
   16808:	b29a      	uxth	r2, r3
   1680a:	697b      	ldr	r3, [r7, #20]
   1680c:	3301      	adds	r3, #1
   1680e:	781b      	ldrb	r3, [r3, #0]
   16810:	b29b      	uxth	r3, r3
   16812:	021b      	lsls	r3, r3, #8
   16814:	b29b      	uxth	r3, r3
   16816:	4413      	add	r3, r2
   16818:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   1681a:	697b      	ldr	r3, [r7, #20]
   1681c:	3302      	adds	r3, #2
   1681e:	781b      	ldrb	r3, [r3, #0]
   16820:	b29a      	uxth	r2, r3
   16822:	697b      	ldr	r3, [r7, #20]
   16824:	3303      	adds	r3, #3
   16826:	781b      	ldrb	r3, [r3, #0]
   16828:	b29b      	uxth	r3, r3
   1682a:	021b      	lsls	r3, r3, #8
   1682c:	b29b      	uxth	r3, r3
   1682e:	4413      	add	r3, r2
   16830:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16832:	8a7b      	ldrh	r3, [r7, #18]
   16834:	4618      	mov	r0, r3
   16836:	f7ff ff2f 	bl	16698 <hciCoreConnByHandle>
   1683a:	60f8      	str	r0, [r7, #12]
   1683c:	68fb      	ldr	r3, [r7, #12]
   1683e:	2b00      	cmp	r3, #0
   16840:	d006      	beq.n	16850 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   16842:	8a3b      	ldrh	r3, [r7, #16]
   16844:	697a      	ldr	r2, [r7, #20]
   16846:	4619      	mov	r1, r3
   16848:	68f8      	ldr	r0, [r7, #12]
   1684a:	f000 f813 	bl	16874 <hciCoreTxAclStart>
   1684e:	e002      	b.n	16856 <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   16850:	6978      	ldr	r0, [r7, #20]
   16852:	f004 f8ed 	bl	1aa30 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   16856:	4b05      	ldr	r3, [pc, #20]	; (1686c <hciCoreTxReady+0xc8>)
   16858:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   1685c:	2b00      	cmp	r3, #0
   1685e:	d1c1      	bne.n	167e4 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   16860:	e000      	b.n	16864 <hciCoreTxReady+0xc0>
        break;
   16862:	bf00      	nop
}
   16864:	bf00      	nop
   16866:	3718      	adds	r7, #24
   16868:	46bd      	mov	sp, r7
   1686a:	bd80      	pop	{r7, pc}
   1686c:	1004427c 	.word	0x1004427c
   16870:	1004436c 	.word	0x1004436c

00016874 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   16874:	b580      	push	{r7, lr}
   16876:	b086      	sub	sp, #24
   16878:	af00      	add	r7, sp, #0
   1687a:	60f8      	str	r0, [r7, #12]
   1687c:	460b      	mov	r3, r1
   1687e:	607a      	str	r2, [r7, #4]
   16880:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   16882:	f000 fb85 	bl	16f90 <HciGetBufSize>
   16886:	4603      	mov	r3, r0
   16888:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   1688a:	897a      	ldrh	r2, [r7, #10]
   1688c:	8afb      	ldrh	r3, [r7, #22]
   1688e:	429a      	cmp	r2, r3
   16890:	d92d      	bls.n	168ee <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   16892:	897a      	ldrh	r2, [r7, #10]
   16894:	8afb      	ldrh	r3, [r7, #22]
   16896:	1ad3      	subs	r3, r2, r3
   16898:	b29a      	uxth	r2, r3
   1689a:	68fb      	ldr	r3, [r7, #12]
   1689c:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   1689e:	8afb      	ldrh	r3, [r7, #22]
   168a0:	687a      	ldr	r2, [r7, #4]
   168a2:	441a      	add	r2, r3
   168a4:	68fb      	ldr	r3, [r7, #12]
   168a6:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   168a8:	68fb      	ldr	r3, [r7, #12]
   168aa:	687a      	ldr	r2, [r7, #4]
   168ac:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   168ae:	68fb      	ldr	r3, [r7, #12]
   168b0:	2201      	movs	r2, #1
   168b2:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   168b4:	687b      	ldr	r3, [r7, #4]
   168b6:	3302      	adds	r3, #2
   168b8:	8afa      	ldrh	r2, [r7, #22]
   168ba:	b2d2      	uxtb	r2, r2
   168bc:	701a      	strb	r2, [r3, #0]
   168be:	687b      	ldr	r3, [r7, #4]
   168c0:	3303      	adds	r3, #3
   168c2:	8afa      	ldrh	r2, [r7, #22]
   168c4:	0a12      	lsrs	r2, r2, #8
   168c6:	b292      	uxth	r2, r2
   168c8:	b2d2      	uxtb	r2, r2
   168ca:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   168cc:	6879      	ldr	r1, [r7, #4]
   168ce:	68f8      	ldr	r0, [r7, #12]
   168d0:	f7ff ff46 	bl	16760 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   168d4:	bf00      	nop
   168d6:	4b0a      	ldr	r3, [pc, #40]	; (16900 <hciCoreTxAclStart+0x8c>)
   168d8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   168dc:	2b00      	cmp	r3, #0
   168de:	d00a      	beq.n	168f6 <hciCoreTxAclStart+0x82>
   168e0:	68f8      	ldr	r0, [r7, #12]
   168e2:	f000 f80f 	bl	16904 <hciCoreTxAclContinue>
   168e6:	4603      	mov	r3, r0
   168e8:	2b00      	cmp	r3, #0
   168ea:	d1f4      	bne.n	168d6 <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   168ec:	e003      	b.n	168f6 <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   168ee:	6879      	ldr	r1, [r7, #4]
   168f0:	68f8      	ldr	r0, [r7, #12]
   168f2:	f7ff ff35 	bl	16760 <hciCoreSendAclData>
}
   168f6:	bf00      	nop
   168f8:	3718      	adds	r7, #24
   168fa:	46bd      	mov	sp, r7
   168fc:	bd80      	pop	{r7, pc}
   168fe:	bf00      	nop
   16900:	1004427c 	.word	0x1004427c

00016904 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   16904:	b590      	push	{r4, r7, lr}
   16906:	b085      	sub	sp, #20
   16908:	af00      	add	r7, sp, #0
   1690a:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   1690c:	687b      	ldr	r3, [r7, #4]
   1690e:	2b00      	cmp	r3, #0
   16910:	d102      	bne.n	16918 <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   16912:	f7ff fee5 	bl	166e0 <hciCoreNextConnFragment>
   16916:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   16918:	687b      	ldr	r3, [r7, #4]
   1691a:	2b00      	cmp	r3, #0
   1691c:	d049      	beq.n	169b2 <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   1691e:	687b      	ldr	r3, [r7, #4]
   16920:	8a5c      	ldrh	r4, [r3, #18]
   16922:	f000 fb35 	bl	16f90 <HciGetBufSize>
   16926:	4603      	mov	r3, r0
   16928:	429c      	cmp	r4, r3
   1692a:	d202      	bcs.n	16932 <hciCoreTxAclContinue+0x2e>
   1692c:	687b      	ldr	r3, [r7, #4]
   1692e:	8a5b      	ldrh	r3, [r3, #18]
   16930:	e002      	b.n	16938 <hciCoreTxAclContinue+0x34>
   16932:	f000 fb2d 	bl	16f90 <HciGetBufSize>
   16936:	4603      	mov	r3, r0
   16938:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   1693a:	89fb      	ldrh	r3, [r7, #14]
   1693c:	2b00      	cmp	r3, #0
   1693e:	d038      	beq.n	169b2 <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   16940:	687b      	ldr	r3, [r7, #4]
   16942:	8a5a      	ldrh	r2, [r3, #18]
   16944:	89fb      	ldrh	r3, [r7, #14]
   16946:	1ad3      	subs	r3, r2, r3
   16948:	b29a      	uxth	r2, r3
   1694a:	687b      	ldr	r3, [r7, #4]
   1694c:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   1694e:	687b      	ldr	r3, [r7, #4]
   16950:	685b      	ldr	r3, [r3, #4]
   16952:	687a      	ldr	r2, [r7, #4]
   16954:	8a12      	ldrh	r2, [r2, #16]
   16956:	b2d2      	uxtb	r2, r2
   16958:	701a      	strb	r2, [r3, #0]
   1695a:	687b      	ldr	r3, [r7, #4]
   1695c:	685b      	ldr	r3, [r3, #4]
   1695e:	3301      	adds	r3, #1
   16960:	687a      	ldr	r2, [r7, #4]
   16962:	8a12      	ldrh	r2, [r2, #16]
   16964:	0a12      	lsrs	r2, r2, #8
   16966:	b292      	uxth	r2, r2
   16968:	f042 0210 	orr.w	r2, r2, #16
   1696c:	b292      	uxth	r2, r2
   1696e:	b2d2      	uxtb	r2, r2
   16970:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   16972:	687b      	ldr	r3, [r7, #4]
   16974:	685b      	ldr	r3, [r3, #4]
   16976:	3302      	adds	r3, #2
   16978:	89fa      	ldrh	r2, [r7, #14]
   1697a:	b2d2      	uxtb	r2, r2
   1697c:	701a      	strb	r2, [r3, #0]
   1697e:	687b      	ldr	r3, [r7, #4]
   16980:	685b      	ldr	r3, [r3, #4]
   16982:	3303      	adds	r3, #3
   16984:	89fa      	ldrh	r2, [r7, #14]
   16986:	0a12      	lsrs	r2, r2, #8
   16988:	b292      	uxth	r2, r2
   1698a:	b2d2      	uxtb	r2, r2
   1698c:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   1698e:	687b      	ldr	r3, [r7, #4]
   16990:	685b      	ldr	r3, [r3, #4]
   16992:	4619      	mov	r1, r3
   16994:	6878      	ldr	r0, [r7, #4]
   16996:	f7ff fee3 	bl	16760 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   1699a:	687b      	ldr	r3, [r7, #4]
   1699c:	8a5b      	ldrh	r3, [r3, #18]
   1699e:	2b00      	cmp	r3, #0
   169a0:	d005      	beq.n	169ae <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   169a2:	687b      	ldr	r3, [r7, #4]
   169a4:	685a      	ldr	r2, [r3, #4]
   169a6:	89fb      	ldrh	r3, [r7, #14]
   169a8:	441a      	add	r2, r3
   169aa:	687b      	ldr	r3, [r7, #4]
   169ac:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   169ae:	2301      	movs	r3, #1
   169b0:	e000      	b.n	169b4 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   169b2:	2300      	movs	r3, #0
}
   169b4:	4618      	mov	r0, r3
   169b6:	3714      	adds	r7, #20
   169b8:	46bd      	mov	sp, r7
   169ba:	bd90      	pop	{r4, r7, pc}

000169bc <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   169bc:	b580      	push	{r7, lr}
   169be:	b082      	sub	sp, #8
   169c0:	af00      	add	r7, sp, #0
   169c2:	6078      	str	r0, [r7, #4]
   169c4:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   169c6:	687b      	ldr	r3, [r7, #4]
   169c8:	7d9b      	ldrb	r3, [r3, #22]
   169ca:	2b00      	cmp	r3, #0
   169cc:	d00f      	beq.n	169ee <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   169ce:	687b      	ldr	r3, [r7, #4]
   169d0:	8a5b      	ldrh	r3, [r3, #18]
   169d2:	2b00      	cmp	r3, #0
   169d4:	d111      	bne.n	169fa <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   169d6:	687b      	ldr	r3, [r7, #4]
   169d8:	681b      	ldr	r3, [r3, #0]
   169da:	4618      	mov	r0, r3
   169dc:	f004 f828 	bl	1aa30 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   169e0:	687b      	ldr	r3, [r7, #4]
   169e2:	2200      	movs	r2, #0
   169e4:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   169e6:	687b      	ldr	r3, [r7, #4]
   169e8:	2200      	movs	r2, #0
   169ea:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   169ec:	e005      	b.n	169fa <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   169ee:	683b      	ldr	r3, [r7, #0]
   169f0:	2b00      	cmp	r3, #0
   169f2:	d002      	beq.n	169fa <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   169f4:	6838      	ldr	r0, [r7, #0]
   169f6:	f004 f81b 	bl	1aa30 <WsfMsgFree>
}
   169fa:	bf00      	nop
   169fc:	3708      	adds	r7, #8
   169fe:	46bd      	mov	sp, r7
   16a00:	bd80      	pop	{r7, pc}
	...

00016a04 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   16a04:	b580      	push	{r7, lr}
   16a06:	b088      	sub	sp, #32
   16a08:	af00      	add	r7, sp, #0
   16a0a:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   16a0c:	2300      	movs	r3, #0
   16a0e:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   16a10:	2301      	movs	r3, #1
   16a12:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   16a14:	687b      	ldr	r3, [r7, #4]
   16a16:	781b      	ldrb	r3, [r3, #0]
   16a18:	b29a      	uxth	r2, r3
   16a1a:	687b      	ldr	r3, [r7, #4]
   16a1c:	3301      	adds	r3, #1
   16a1e:	781b      	ldrb	r3, [r3, #0]
   16a20:	b29b      	uxth	r3, r3
   16a22:	021b      	lsls	r3, r3, #8
   16a24:	b29b      	uxth	r3, r3
   16a26:	4413      	add	r3, r2
   16a28:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   16a2a:	8b3b      	ldrh	r3, [r7, #24]
   16a2c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   16a30:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   16a32:	8b3b      	ldrh	r3, [r7, #24]
   16a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
   16a38:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   16a3a:	687b      	ldr	r3, [r7, #4]
   16a3c:	3302      	adds	r3, #2
   16a3e:	781b      	ldrb	r3, [r3, #0]
   16a40:	b29a      	uxth	r2, r3
   16a42:	687b      	ldr	r3, [r7, #4]
   16a44:	3303      	adds	r3, #3
   16a46:	781b      	ldrb	r3, [r3, #0]
   16a48:	b29b      	uxth	r3, r3
   16a4a:	021b      	lsls	r3, r3, #8
   16a4c:	b29b      	uxth	r3, r3
   16a4e:	4413      	add	r3, r2
   16a50:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16a52:	8b3b      	ldrh	r3, [r7, #24]
   16a54:	4618      	mov	r0, r3
   16a56:	f7ff fe1f 	bl	16698 <hciCoreConnByHandle>
   16a5a:	6138      	str	r0, [r7, #16]
   16a5c:	693b      	ldr	r3, [r7, #16]
   16a5e:	2b00      	cmp	r3, #0
   16a60:	f000 80ad 	beq.w	16bbe <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   16a64:	8afb      	ldrh	r3, [r7, #22]
   16a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   16a6a:	d17c      	bne.n	16b66 <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   16a6c:	693b      	ldr	r3, [r7, #16]
   16a6e:	689b      	ldr	r3, [r3, #8]
   16a70:	2b00      	cmp	r3, #0
   16a72:	d007      	beq.n	16a84 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   16a74:	693b      	ldr	r3, [r7, #16]
   16a76:	689b      	ldr	r3, [r3, #8]
   16a78:	4618      	mov	r0, r3
   16a7a:	f003 ffd9 	bl	1aa30 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   16a7e:	693b      	ldr	r3, [r7, #16]
   16a80:	2200      	movs	r2, #0
   16a82:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   16a84:	8abb      	ldrh	r3, [r7, #20]
   16a86:	2b03      	cmp	r3, #3
   16a88:	f240 8099 	bls.w	16bbe <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   16a8c:	687b      	ldr	r3, [r7, #4]
   16a8e:	3304      	adds	r3, #4
   16a90:	781b      	ldrb	r3, [r3, #0]
   16a92:	b29a      	uxth	r2, r3
   16a94:	687b      	ldr	r3, [r7, #4]
   16a96:	3305      	adds	r3, #5
   16a98:	781b      	ldrb	r3, [r3, #0]
   16a9a:	b29b      	uxth	r3, r3
   16a9c:	021b      	lsls	r3, r3, #8
   16a9e:	b29b      	uxth	r3, r3
   16aa0:	4413      	add	r3, r2
   16aa2:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   16aa4:	89fb      	ldrh	r3, [r7, #14]
   16aa6:	3304      	adds	r3, #4
   16aa8:	4a4a      	ldr	r2, [pc, #296]	; (16bd4 <hciCoreAclReassembly+0x1d0>)
   16aaa:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   16aae:	4293      	cmp	r3, r2
   16ab0:	f300 8085 	bgt.w	16bbe <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   16ab4:	89fb      	ldrh	r3, [r7, #14]
   16ab6:	1d1a      	adds	r2, r3, #4
   16ab8:	8abb      	ldrh	r3, [r7, #20]
   16aba:	429a      	cmp	r2, r3
   16abc:	dd4e      	ble.n	16b5c <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   16abe:	89fb      	ldrh	r3, [r7, #14]
   16ac0:	3308      	adds	r3, #8
   16ac2:	b29b      	uxth	r3, r3
   16ac4:	2100      	movs	r1, #0
   16ac6:	4618      	mov	r0, r3
   16ac8:	f003 ff86 	bl	1a9d8 <WsfMsgDataAlloc>
   16acc:	4602      	mov	r2, r0
   16ace:	693b      	ldr	r3, [r7, #16]
   16ad0:	609a      	str	r2, [r3, #8]
   16ad2:	693b      	ldr	r3, [r7, #16]
   16ad4:	689b      	ldr	r3, [r3, #8]
   16ad6:	2b00      	cmp	r3, #0
   16ad8:	d071      	beq.n	16bbe <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   16ada:	693b      	ldr	r3, [r7, #16]
   16adc:	689a      	ldr	r2, [r3, #8]
   16ade:	693b      	ldr	r3, [r7, #16]
   16ae0:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   16ae2:	693b      	ldr	r3, [r7, #16]
   16ae4:	68db      	ldr	r3, [r3, #12]
   16ae6:	1c59      	adds	r1, r3, #1
   16ae8:	693a      	ldr	r2, [r7, #16]
   16aea:	60d1      	str	r1, [r2, #12]
   16aec:	8b3a      	ldrh	r2, [r7, #24]
   16aee:	b2d2      	uxtb	r2, r2
   16af0:	701a      	strb	r2, [r3, #0]
   16af2:	693b      	ldr	r3, [r7, #16]
   16af4:	68db      	ldr	r3, [r3, #12]
   16af6:	1c59      	adds	r1, r3, #1
   16af8:	693a      	ldr	r2, [r7, #16]
   16afa:	60d1      	str	r1, [r2, #12]
   16afc:	8b3a      	ldrh	r2, [r7, #24]
   16afe:	0a12      	lsrs	r2, r2, #8
   16b00:	b292      	uxth	r2, r2
   16b02:	b2d2      	uxtb	r2, r2
   16b04:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   16b06:	693b      	ldr	r3, [r7, #16]
   16b08:	68db      	ldr	r3, [r3, #12]
   16b0a:	1c59      	adds	r1, r3, #1
   16b0c:	693a      	ldr	r2, [r7, #16]
   16b0e:	60d1      	str	r1, [r2, #12]
   16b10:	89fa      	ldrh	r2, [r7, #14]
   16b12:	b2d2      	uxtb	r2, r2
   16b14:	3204      	adds	r2, #4
   16b16:	b2d2      	uxtb	r2, r2
   16b18:	701a      	strb	r2, [r3, #0]
   16b1a:	693b      	ldr	r3, [r7, #16]
   16b1c:	68db      	ldr	r3, [r3, #12]
   16b1e:	1c59      	adds	r1, r3, #1
   16b20:	693a      	ldr	r2, [r7, #16]
   16b22:	60d1      	str	r1, [r2, #12]
   16b24:	89fa      	ldrh	r2, [r7, #14]
   16b26:	3204      	adds	r2, #4
   16b28:	1212      	asrs	r2, r2, #8
   16b2a:	b2d2      	uxtb	r2, r2
   16b2c:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   16b2e:	693b      	ldr	r3, [r7, #16]
   16b30:	68d8      	ldr	r0, [r3, #12]
   16b32:	687b      	ldr	r3, [r7, #4]
   16b34:	3304      	adds	r3, #4
   16b36:	8aba      	ldrh	r2, [r7, #20]
   16b38:	4619      	mov	r1, r3
   16b3a:	f7f5 fb11 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   16b3e:	693b      	ldr	r3, [r7, #16]
   16b40:	68da      	ldr	r2, [r3, #12]
   16b42:	8abb      	ldrh	r3, [r7, #20]
   16b44:	441a      	add	r2, r3
   16b46:	693b      	ldr	r3, [r7, #16]
   16b48:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   16b4a:	89fa      	ldrh	r2, [r7, #14]
   16b4c:	8abb      	ldrh	r3, [r7, #20]
   16b4e:	1ad3      	subs	r3, r2, r3
   16b50:	b29b      	uxth	r3, r3
   16b52:	3304      	adds	r3, #4
   16b54:	b29a      	uxth	r2, r3
   16b56:	693b      	ldr	r3, [r7, #16]
   16b58:	829a      	strh	r2, [r3, #20]
   16b5a:	e030      	b.n	16bbe <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   16b5c:	687b      	ldr	r3, [r7, #4]
   16b5e:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   16b60:	2300      	movs	r3, #0
   16b62:	76fb      	strb	r3, [r7, #27]
   16b64:	e02b      	b.n	16bbe <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   16b66:	8afb      	ldrh	r3, [r7, #22]
   16b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16b6c:	d127      	bne.n	16bbe <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   16b6e:	693b      	ldr	r3, [r7, #16]
   16b70:	689b      	ldr	r3, [r3, #8]
   16b72:	2b00      	cmp	r3, #0
   16b74:	d023      	beq.n	16bbe <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   16b76:	693b      	ldr	r3, [r7, #16]
   16b78:	8a9b      	ldrh	r3, [r3, #20]
   16b7a:	8aba      	ldrh	r2, [r7, #20]
   16b7c:	429a      	cmp	r2, r3
   16b7e:	d81e      	bhi.n	16bbe <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   16b80:	693b      	ldr	r3, [r7, #16]
   16b82:	68d8      	ldr	r0, [r3, #12]
   16b84:	687b      	ldr	r3, [r7, #4]
   16b86:	3304      	adds	r3, #4
   16b88:	8aba      	ldrh	r2, [r7, #20]
   16b8a:	4619      	mov	r1, r3
   16b8c:	f7f5 fae8 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   16b90:	693b      	ldr	r3, [r7, #16]
   16b92:	68da      	ldr	r2, [r3, #12]
   16b94:	8abb      	ldrh	r3, [r7, #20]
   16b96:	441a      	add	r2, r3
   16b98:	693b      	ldr	r3, [r7, #16]
   16b9a:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   16b9c:	693b      	ldr	r3, [r7, #16]
   16b9e:	8a9a      	ldrh	r2, [r3, #20]
   16ba0:	8abb      	ldrh	r3, [r7, #20]
   16ba2:	1ad3      	subs	r3, r2, r3
   16ba4:	b29a      	uxth	r2, r3
   16ba6:	693b      	ldr	r3, [r7, #16]
   16ba8:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   16baa:	693b      	ldr	r3, [r7, #16]
   16bac:	8a9b      	ldrh	r3, [r3, #20]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d105      	bne.n	16bbe <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   16bb2:	693b      	ldr	r3, [r7, #16]
   16bb4:	689b      	ldr	r3, [r3, #8]
   16bb6:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   16bb8:	693b      	ldr	r3, [r7, #16]
   16bba:	2200      	movs	r2, #0
   16bbc:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   16bbe:	7efb      	ldrb	r3, [r7, #27]
   16bc0:	2b00      	cmp	r3, #0
   16bc2:	d002      	beq.n	16bca <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   16bc4:	6878      	ldr	r0, [r7, #4]
   16bc6:	f003 ff33 	bl	1aa30 <WsfMsgFree>
  }

  return pDataRtn;
   16bca:	69fb      	ldr	r3, [r7, #28]
}
   16bcc:	4618      	mov	r0, r3
   16bce:	3720      	adds	r7, #32
   16bd0:	46bd      	mov	sp, r7
   16bd2:	bd80      	pop	{r7, pc}
   16bd4:	1004427c 	.word	0x1004427c

00016bd8 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   16bd8:	b580      	push	{r7, lr}
   16bda:	b082      	sub	sp, #8
   16bdc:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   16bde:	4b19      	ldr	r3, [pc, #100]	; (16c44 <HciCoreInit+0x6c>)
   16be0:	2200      	movs	r2, #0
   16be2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   16be6:	4b17      	ldr	r3, [pc, #92]	; (16c44 <HciCoreInit+0x6c>)
   16be8:	2200      	movs	r2, #0
   16bea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   16bee:	2300      	movs	r3, #0
   16bf0:	71fb      	strb	r3, [r7, #7]
   16bf2:	e00d      	b.n	16c10 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   16bf4:	79fa      	ldrb	r2, [r7, #7]
   16bf6:	4913      	ldr	r1, [pc, #76]	; (16c44 <HciCoreInit+0x6c>)
   16bf8:	4613      	mov	r3, r2
   16bfa:	00db      	lsls	r3, r3, #3
   16bfc:	1a9b      	subs	r3, r3, r2
   16bfe:	009b      	lsls	r3, r3, #2
   16c00:	440b      	add	r3, r1
   16c02:	3310      	adds	r3, #16
   16c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16c08:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   16c0a:	79fb      	ldrb	r3, [r7, #7]
   16c0c:	3301      	adds	r3, #1
   16c0e:	71fb      	strb	r3, [r7, #7]
   16c10:	79fb      	ldrb	r3, [r7, #7]
   16c12:	2b07      	cmp	r3, #7
   16c14:	d9ee      	bls.n	16bf4 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   16c16:	4b0b      	ldr	r3, [pc, #44]	; (16c44 <HciCoreInit+0x6c>)
   16c18:	221b      	movs	r2, #27
   16c1a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   16c1e:	4b09      	ldr	r3, [pc, #36]	; (16c44 <HciCoreInit+0x6c>)
   16c20:	2205      	movs	r2, #5
   16c22:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   16c26:	4b07      	ldr	r3, [pc, #28]	; (16c44 <HciCoreInit+0x6c>)
   16c28:	2203      	movs	r2, #3
   16c2a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   16c2e:	4b05      	ldr	r3, [pc, #20]	; (16c44 <HciCoreInit+0x6c>)
   16c30:	2200      	movs	r2, #0
   16c32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   16c36:	f000 f8d5 	bl	16de4 <hciCoreInit>
}
   16c3a:	bf00      	nop
   16c3c:	3708      	adds	r7, #8
   16c3e:	46bd      	mov	sp, r7
   16c40:	bd80      	pop	{r7, pc}
   16c42:	bf00      	nop
   16c44:	1004427c 	.word	0x1004427c

00016c48 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   16c48:	b580      	push	{r7, lr}
   16c4a:	b084      	sub	sp, #16
   16c4c:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   16c4e:	4b24      	ldr	r3, [pc, #144]	; (16ce0 <HciResetSequence+0x98>)
   16c50:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16c52:	e002      	b.n	16c5a <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   16c54:	6878      	ldr	r0, [r7, #4]
   16c56:	f003 feeb 	bl	1aa30 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16c5a:	1cfb      	adds	r3, r7, #3
   16c5c:	4619      	mov	r1, r3
   16c5e:	4821      	ldr	r0, [pc, #132]	; (16ce4 <HciResetSequence+0x9c>)
   16c60:	f003 ff20 	bl	1aaa4 <WsfMsgDeq>
   16c64:	6078      	str	r0, [r7, #4]
   16c66:	687b      	ldr	r3, [r7, #4]
   16c68:	2b00      	cmp	r3, #0
   16c6a:	d1f3      	bne.n	16c54 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16c6c:	2308      	movs	r3, #8
   16c6e:	73fb      	strb	r3, [r7, #15]
   16c70:	e029      	b.n	16cc6 <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   16c72:	68bb      	ldr	r3, [r7, #8]
   16c74:	681b      	ldr	r3, [r3, #0]
   16c76:	2b00      	cmp	r3, #0
   16c78:	d007      	beq.n	16c8a <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   16c7a:	68bb      	ldr	r3, [r7, #8]
   16c7c:	681b      	ldr	r3, [r3, #0]
   16c7e:	4618      	mov	r0, r3
   16c80:	f003 fed6 	bl	1aa30 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   16c84:	68bb      	ldr	r3, [r7, #8]
   16c86:	2200      	movs	r2, #0
   16c88:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   16c8a:	68bb      	ldr	r3, [r7, #8]
   16c8c:	2200      	movs	r2, #0
   16c8e:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   16c90:	68bb      	ldr	r3, [r7, #8]
   16c92:	689b      	ldr	r3, [r3, #8]
   16c94:	2b00      	cmp	r3, #0
   16c96:	d007      	beq.n	16ca8 <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   16c98:	68bb      	ldr	r3, [r7, #8]
   16c9a:	689b      	ldr	r3, [r3, #8]
   16c9c:	4618      	mov	r0, r3
   16c9e:	f003 fec7 	bl	1aa30 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   16ca2:	68bb      	ldr	r3, [r7, #8]
   16ca4:	2200      	movs	r2, #0
   16ca6:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   16ca8:	68bb      	ldr	r3, [r7, #8]
   16caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16cae:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   16cb0:	68bb      	ldr	r3, [r7, #8]
   16cb2:	7e5b      	ldrb	r3, [r3, #25]
   16cb4:	4618      	mov	r0, r3
   16cb6:	f7ff fd75 	bl	167a4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   16cba:	7bfb      	ldrb	r3, [r7, #15]
   16cbc:	3b01      	subs	r3, #1
   16cbe:	73fb      	strb	r3, [r7, #15]
   16cc0:	68bb      	ldr	r3, [r7, #8]
   16cc2:	331c      	adds	r3, #28
   16cc4:	60bb      	str	r3, [r7, #8]
   16cc6:	7bfb      	ldrb	r3, [r7, #15]
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d1d2      	bne.n	16c72 <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   16ccc:	4b05      	ldr	r3, [pc, #20]	; (16ce4 <HciResetSequence+0x9c>)
   16cce:	2201      	movs	r2, #1
   16cd0:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   16cd2:	f002 f923 	bl	18f1c <hciCoreResetStart>
}
   16cd6:	bf00      	nop
   16cd8:	3710      	adds	r7, #16
   16cda:	46bd      	mov	sp, r7
   16cdc:	bd80      	pop	{r7, pc}
   16cde:	bf00      	nop
   16ce0:	1004427c 	.word	0x1004427c
   16ce4:	10044390 	.word	0x10044390

00016ce8 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   16ce8:	b480      	push	{r7}
   16cea:	b083      	sub	sp, #12
   16cec:	af00      	add	r7, sp, #0
   16cee:	4603      	mov	r3, r0
   16cf0:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   16cf2:	4a05      	ldr	r2, [pc, #20]	; (16d08 <HciSetMaxRxAclLen+0x20>)
   16cf4:	88fb      	ldrh	r3, [r7, #6]
   16cf6:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   16cfa:	bf00      	nop
   16cfc:	370c      	adds	r7, #12
   16cfe:	46bd      	mov	sp, r7
   16d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d04:	4770      	bx	lr
   16d06:	bf00      	nop
   16d08:	1004427c 	.word	0x1004427c

00016d0c <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   16d0c:	b590      	push	{r4, r7, lr}
   16d0e:	b085      	sub	sp, #20
   16d10:	af00      	add	r7, sp, #0
   16d12:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   16d14:	687b      	ldr	r3, [r7, #4]
   16d16:	781b      	ldrb	r3, [r3, #0]
   16d18:	b29a      	uxth	r2, r3
   16d1a:	687b      	ldr	r3, [r7, #4]
   16d1c:	3301      	adds	r3, #1
   16d1e:	781b      	ldrb	r3, [r3, #0]
   16d20:	b29b      	uxth	r3, r3
   16d22:	021b      	lsls	r3, r3, #8
   16d24:	b29b      	uxth	r3, r3
   16d26:	4413      	add	r3, r2
   16d28:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   16d2a:	687b      	ldr	r3, [r7, #4]
   16d2c:	3302      	adds	r3, #2
   16d2e:	781b      	ldrb	r3, [r3, #0]
   16d30:	b29a      	uxth	r2, r3
   16d32:	687b      	ldr	r3, [r7, #4]
   16d34:	3303      	adds	r3, #3
   16d36:	781b      	ldrb	r3, [r3, #0]
   16d38:	b29b      	uxth	r3, r3
   16d3a:	021b      	lsls	r3, r3, #8
   16d3c:	b29b      	uxth	r3, r3
   16d3e:	4413      	add	r3, r2
   16d40:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16d42:	89fb      	ldrh	r3, [r7, #14]
   16d44:	4618      	mov	r0, r3
   16d46:	f7ff fca7 	bl	16698 <hciCoreConnByHandle>
   16d4a:	60b8      	str	r0, [r7, #8]
   16d4c:	68bb      	ldr	r3, [r7, #8]
   16d4e:	2b00      	cmp	r3, #0
   16d50:	d03a      	beq.n	16dc8 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   16d52:	4821      	ldr	r0, [pc, #132]	; (16dd8 <HciSendAclData+0xcc>)
   16d54:	f003 ff87 	bl	1ac66 <WsfQueueEmpty>
   16d58:	4603      	mov	r3, r0
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	d00b      	beq.n	16d76 <HciSendAclData+0x6a>
   16d5e:	4b1f      	ldr	r3, [pc, #124]	; (16ddc <HciSendAclData+0xd0>)
   16d60:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   16d64:	2b00      	cmp	r3, #0
   16d66:	d006      	beq.n	16d76 <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   16d68:	89bb      	ldrh	r3, [r7, #12]
   16d6a:	687a      	ldr	r2, [r7, #4]
   16d6c:	4619      	mov	r1, r3
   16d6e:	68b8      	ldr	r0, [r7, #8]
   16d70:	f7ff fd80 	bl	16874 <hciCoreTxAclStart>
   16d74:	e004      	b.n	16d80 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   16d76:	687a      	ldr	r2, [r7, #4]
   16d78:	2100      	movs	r1, #0
   16d7a:	4817      	ldr	r0, [pc, #92]	; (16dd8 <HciSendAclData+0xcc>)
   16d7c:	f003 fe7d 	bl	1aa7a <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   16d80:	89bb      	ldrh	r3, [r7, #12]
   16d82:	1e5c      	subs	r4, r3, #1
   16d84:	f000 f904 	bl	16f90 <HciGetBufSize>
   16d88:	4603      	mov	r3, r0
   16d8a:	fb94 f3f3 	sdiv	r3, r4, r3
   16d8e:	1c59      	adds	r1, r3, #1
   16d90:	68bb      	ldr	r3, [r7, #8]
   16d92:	7e1a      	ldrb	r2, [r3, #24]
   16d94:	b2cb      	uxtb	r3, r1
   16d96:	4413      	add	r3, r2
   16d98:	b2da      	uxtb	r2, r3
   16d9a:	68bb      	ldr	r3, [r7, #8]
   16d9c:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   16d9e:	68bb      	ldr	r3, [r7, #8]
   16da0:	7e1a      	ldrb	r2, [r3, #24]
   16da2:	4b0e      	ldr	r3, [pc, #56]	; (16ddc <HciSendAclData+0xd0>)
   16da4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   16da8:	429a      	cmp	r2, r3
   16daa:	d310      	bcc.n	16dce <HciSendAclData+0xc2>
   16dac:	68bb      	ldr	r3, [r7, #8]
   16dae:	7ddb      	ldrb	r3, [r3, #23]
   16db0:	2b00      	cmp	r3, #0
   16db2:	d10c      	bne.n	16dce <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   16db4:	68bb      	ldr	r3, [r7, #8]
   16db6:	2201      	movs	r2, #1
   16db8:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   16dba:	4b09      	ldr	r3, [pc, #36]	; (16de0 <HciSendAclData+0xd4>)
   16dbc:	695b      	ldr	r3, [r3, #20]
   16dbe:	89fa      	ldrh	r2, [r7, #14]
   16dc0:	2101      	movs	r1, #1
   16dc2:	4610      	mov	r0, r2
   16dc4:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   16dc6:	e002      	b.n	16dce <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   16dc8:	6878      	ldr	r0, [r7, #4]
   16dca:	f003 fe31 	bl	1aa30 <WsfMsgFree>
}
   16dce:	bf00      	nop
   16dd0:	3714      	adds	r7, #20
   16dd2:	46bd      	mov	sp, r7
   16dd4:	bd90      	pop	{r4, r7, pc}
   16dd6:	bf00      	nop
   16dd8:	1004436c 	.word	0x1004436c
   16ddc:	1004427c 	.word	0x1004427c
   16de0:	10044390 	.word	0x10044390

00016de4 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   16de4:	b580      	push	{r7, lr}
   16de6:	af00      	add	r7, sp, #0
  hciCmdInit();
   16de8:	f7fe fc72 	bl	156d0 <hciCmdInit>
}
   16dec:	bf00      	nop
   16dee:	bd80      	pop	{r7, pc}

00016df0 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   16df0:	b580      	push	{r7, lr}
   16df2:	b086      	sub	sp, #24
   16df4:	af00      	add	r7, sp, #0
   16df6:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   16df8:	2300      	movs	r3, #0
   16dfa:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   16dfc:	687b      	ldr	r3, [r7, #4]
   16dfe:	1c5a      	adds	r2, r3, #1
   16e00:	607a      	str	r2, [r7, #4]
   16e02:	781b      	ldrb	r3, [r3, #0]
   16e04:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   16e06:	e04c      	b.n	16ea2 <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   16e08:	687b      	ldr	r3, [r7, #4]
   16e0a:	781b      	ldrb	r3, [r3, #0]
   16e0c:	b29a      	uxth	r2, r3
   16e0e:	687b      	ldr	r3, [r7, #4]
   16e10:	3301      	adds	r3, #1
   16e12:	781b      	ldrb	r3, [r3, #0]
   16e14:	b29b      	uxth	r3, r3
   16e16:	021b      	lsls	r3, r3, #8
   16e18:	b29b      	uxth	r3, r3
   16e1a:	4413      	add	r3, r2
   16e1c:	82bb      	strh	r3, [r7, #20]
   16e1e:	687b      	ldr	r3, [r7, #4]
   16e20:	3302      	adds	r3, #2
   16e22:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	781b      	ldrb	r3, [r3, #0]
   16e28:	b29a      	uxth	r2, r3
   16e2a:	687b      	ldr	r3, [r7, #4]
   16e2c:	3301      	adds	r3, #1
   16e2e:	781b      	ldrb	r3, [r3, #0]
   16e30:	b29b      	uxth	r3, r3
   16e32:	021b      	lsls	r3, r3, #8
   16e34:	b29b      	uxth	r3, r3
   16e36:	4413      	add	r3, r2
   16e38:	827b      	strh	r3, [r7, #18]
   16e3a:	687b      	ldr	r3, [r7, #4]
   16e3c:	3302      	adds	r3, #2
   16e3e:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   16e40:	8abb      	ldrh	r3, [r7, #20]
   16e42:	4618      	mov	r0, r3
   16e44:	f7ff fc28 	bl	16698 <hciCoreConnByHandle>
   16e48:	60f8      	str	r0, [r7, #12]
   16e4a:	68fb      	ldr	r3, [r7, #12]
   16e4c:	2b00      	cmp	r3, #0
   16e4e:	d028      	beq.n	16ea2 <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   16e50:	68fb      	ldr	r3, [r7, #12]
   16e52:	7e5a      	ldrb	r2, [r3, #25]
   16e54:	8a7b      	ldrh	r3, [r7, #18]
   16e56:	b2db      	uxtb	r3, r3
   16e58:	1ad3      	subs	r3, r2, r3
   16e5a:	b2da      	uxtb	r2, r3
   16e5c:	68fb      	ldr	r3, [r7, #12]
   16e5e:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   16e60:	68fb      	ldr	r3, [r7, #12]
   16e62:	7e1a      	ldrb	r2, [r3, #24]
   16e64:	8a7b      	ldrh	r3, [r7, #18]
   16e66:	b2db      	uxtb	r3, r3
   16e68:	1ad3      	subs	r3, r2, r3
   16e6a:	b2da      	uxtb	r2, r3
   16e6c:	68fb      	ldr	r3, [r7, #12]
   16e6e:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   16e70:	8a7b      	ldrh	r3, [r7, #18]
   16e72:	b2da      	uxtb	r2, r3
   16e74:	7dbb      	ldrb	r3, [r7, #22]
   16e76:	4413      	add	r3, r2
   16e78:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   16e7a:	68fb      	ldr	r3, [r7, #12]
   16e7c:	7ddb      	ldrb	r3, [r3, #23]
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d00f      	beq.n	16ea2 <hciCoreNumCmplPkts+0xb2>
   16e82:	68fb      	ldr	r3, [r7, #12]
   16e84:	7e1a      	ldrb	r2, [r3, #24]
   16e86:	4b0d      	ldr	r3, [pc, #52]	; (16ebc <hciCoreNumCmplPkts+0xcc>)
   16e88:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   16e8c:	429a      	cmp	r2, r3
   16e8e:	d808      	bhi.n	16ea2 <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   16e90:	68fb      	ldr	r3, [r7, #12]
   16e92:	2200      	movs	r2, #0
   16e94:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   16e96:	4b0a      	ldr	r3, [pc, #40]	; (16ec0 <hciCoreNumCmplPkts+0xd0>)
   16e98:	695b      	ldr	r3, [r3, #20]
   16e9a:	8aba      	ldrh	r2, [r7, #20]
   16e9c:	2100      	movs	r1, #0
   16e9e:	4610      	mov	r0, r2
   16ea0:	4798      	blx	r3
  while (numHandles-- > 0)
   16ea2:	7dfb      	ldrb	r3, [r7, #23]
   16ea4:	1e5a      	subs	r2, r3, #1
   16ea6:	75fa      	strb	r2, [r7, #23]
   16ea8:	2b00      	cmp	r3, #0
   16eaa:	d1ad      	bne.n	16e08 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   16eac:	7dbb      	ldrb	r3, [r7, #22]
   16eae:	4618      	mov	r0, r3
   16eb0:	f7ff fc78 	bl	167a4 <hciCoreTxReady>
}
   16eb4:	bf00      	nop
   16eb6:	3718      	adds	r7, #24
   16eb8:	46bd      	mov	sp, r7
   16eba:	bd80      	pop	{r7, pc}
   16ebc:	1004427c 	.word	0x1004427c
   16ec0:	10044390 	.word	0x10044390

00016ec4 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   16ec4:	b580      	push	{r7, lr}
   16ec6:	b082      	sub	sp, #8
   16ec8:	af00      	add	r7, sp, #0
   16eca:	4603      	mov	r3, r0
   16ecc:	6039      	str	r1, [r7, #0]
   16ece:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   16ed0:	79fb      	ldrb	r3, [r7, #7]
   16ed2:	683a      	ldr	r2, [r7, #0]
   16ed4:	4619      	mov	r1, r3
   16ed6:	4806      	ldr	r0, [pc, #24]	; (16ef0 <hciCoreRecv+0x2c>)
   16ed8:	f003 fdcf 	bl	1aa7a <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   16edc:	4b04      	ldr	r3, [pc, #16]	; (16ef0 <hciCoreRecv+0x2c>)
   16ede:	7e1b      	ldrb	r3, [r3, #24]
   16ee0:	2101      	movs	r1, #1
   16ee2:	4618      	mov	r0, r3
   16ee4:	f009 fb06 	bl	204f4 <WsfSetEvent>
}
   16ee8:	bf00      	nop
   16eea:	3708      	adds	r7, #8
   16eec:	46bd      	mov	sp, r7
   16eee:	bd80      	pop	{r7, pc}
   16ef0:	10044390 	.word	0x10044390

00016ef4 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b084      	sub	sp, #16
   16ef8:	af00      	add	r7, sp, #0
   16efa:	4603      	mov	r3, r0
   16efc:	6039      	str	r1, [r7, #0]
   16efe:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   16f00:	683b      	ldr	r3, [r7, #0]
   16f02:	2b00      	cmp	r3, #0
   16f04:	d007      	beq.n	16f16 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   16f06:	683b      	ldr	r3, [r7, #0]
   16f08:	789b      	ldrb	r3, [r3, #2]
   16f0a:	2b01      	cmp	r3, #1
   16f0c:	d12f      	bne.n	16f6e <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   16f0e:	6838      	ldr	r0, [r7, #0]
   16f10:	f7fe fbfa 	bl	15708 <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   16f14:	e02b      	b.n	16f6e <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   16f16:	79fb      	ldrb	r3, [r7, #7]
   16f18:	f003 0301 	and.w	r3, r3, #1
   16f1c:	2b00      	cmp	r3, #0
   16f1e:	d026      	beq.n	16f6e <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16f20:	e01b      	b.n	16f5a <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   16f22:	7afb      	ldrb	r3, [r7, #11]
   16f24:	2b04      	cmp	r3, #4
   16f26:	d10d      	bne.n	16f44 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   16f28:	68f8      	ldr	r0, [r7, #12]
   16f2a:	f001 fcd5 	bl	188d8 <hciEvtProcessMsg>
        if (hciCb.resetting)
   16f2e:	4b12      	ldr	r3, [pc, #72]	; (16f78 <HciCoreHandler+0x84>)
   16f30:	7e5b      	ldrb	r3, [r3, #25]
   16f32:	2b00      	cmp	r3, #0
   16f34:	d002      	beq.n	16f3c <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   16f36:	68f8      	ldr	r0, [r7, #12]
   16f38:	f001 fff6 	bl	18f28 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   16f3c:	68f8      	ldr	r0, [r7, #12]
   16f3e:	f003 fd77 	bl	1aa30 <WsfMsgFree>
   16f42:	e00a      	b.n	16f5a <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   16f44:	68f8      	ldr	r0, [r7, #12]
   16f46:	f7ff fd5d 	bl	16a04 <hciCoreAclReassembly>
   16f4a:	60f8      	str	r0, [r7, #12]
   16f4c:	68fb      	ldr	r3, [r7, #12]
   16f4e:	2b00      	cmp	r3, #0
   16f50:	d003      	beq.n	16f5a <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   16f52:	4b09      	ldr	r3, [pc, #36]	; (16f78 <HciCoreHandler+0x84>)
   16f54:	691b      	ldr	r3, [r3, #16]
   16f56:	68f8      	ldr	r0, [r7, #12]
   16f58:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   16f5a:	f107 030b 	add.w	r3, r7, #11
   16f5e:	4619      	mov	r1, r3
   16f60:	4805      	ldr	r0, [pc, #20]	; (16f78 <HciCoreHandler+0x84>)
   16f62:	f003 fd9f 	bl	1aaa4 <WsfMsgDeq>
   16f66:	60f8      	str	r0, [r7, #12]
   16f68:	68fb      	ldr	r3, [r7, #12]
   16f6a:	2b00      	cmp	r3, #0
   16f6c:	d1d9      	bne.n	16f22 <HciCoreHandler+0x2e>
}
   16f6e:	bf00      	nop
   16f70:	3710      	adds	r7, #16
   16f72:	46bd      	mov	sp, r7
   16f74:	bd80      	pop	{r7, pc}
   16f76:	bf00      	nop
   16f78:	10044390 	.word	0x10044390

00016f7c <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   16f7c:	b480      	push	{r7}
   16f7e:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   16f80:	4b02      	ldr	r3, [pc, #8]	; (16f8c <HciGetBdAddr+0x10>)
}
   16f82:	4618      	mov	r0, r3
   16f84:	46bd      	mov	sp, r7
   16f86:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f8a:	4770      	bx	lr
   16f8c:	10044364 	.word	0x10044364

00016f90 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   16f90:	b480      	push	{r7}
   16f92:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   16f94:	4b03      	ldr	r3, [pc, #12]	; (16fa4 <HciGetBufSize+0x14>)
   16f96:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   16f9a:	4618      	mov	r0, r3
   16f9c:	46bd      	mov	sp, r7
   16f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16fa2:	4770      	bx	lr
   16fa4:	1004427c 	.word	0x1004427c

00016fa8 <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   16fa8:	b480      	push	{r7}
   16faa:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   16fac:	4b05      	ldr	r3, [pc, #20]	; (16fc4 <HciGetLeSupFeat+0x1c>)
   16fae:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   16fb2:	f023 0302 	bic.w	r3, r3, #2
   16fb6:	b29b      	uxth	r3, r3
}
   16fb8:	4618      	mov	r0, r3
   16fba:	46bd      	mov	sp, r7
   16fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16fc0:	4770      	bx	lr
   16fc2:	bf00      	nop
   16fc4:	1004427c 	.word	0x1004427c

00016fc8 <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   16fc8:	b480      	push	{r7}
   16fca:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   16fcc:	4b03      	ldr	r3, [pc, #12]	; (16fdc <HciGetMaxRxAclLen+0x14>)
   16fce:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   16fd2:	4618      	mov	r0, r3
   16fd4:	46bd      	mov	sp, r7
   16fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   16fda:	4770      	bx	lr
   16fdc:	1004427c 	.word	0x1004427c

00016fe0 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   16fe0:	b480      	push	{r7}
   16fe2:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   16fe4:	4b06      	ldr	r3, [pc, #24]	; (17000 <HciLlPrivacySupported+0x20>)
   16fe6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   16fea:	2b00      	cmp	r3, #0
   16fec:	bf14      	ite	ne
   16fee:	2301      	movne	r3, #1
   16ff0:	2300      	moveq	r3, #0
   16ff2:	b2db      	uxtb	r3, r3
}
   16ff4:	4618      	mov	r0, r3
   16ff6:	46bd      	mov	sp, r7
   16ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ffc:	4770      	bx	lr
   16ffe:	bf00      	nop
   17000:	1004427c 	.word	0x1004427c

00017004 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17004:	b580      	push	{r7, lr}
   17006:	b084      	sub	sp, #16
   17008:	af00      	add	r7, sp, #0
   1700a:	60f8      	str	r0, [r7, #12]
   1700c:	60b9      	str	r1, [r7, #8]
   1700e:	4613      	mov	r3, r2
   17010:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   17012:	68bb      	ldr	r3, [r7, #8]
   17014:	1c5a      	adds	r2, r3, #1
   17016:	60ba      	str	r2, [r7, #8]
   17018:	781a      	ldrb	r2, [r3, #0]
   1701a:	68fb      	ldr	r3, [r7, #12]
   1701c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1701e:	68bb      	ldr	r3, [r7, #8]
   17020:	781b      	ldrb	r3, [r3, #0]
   17022:	b29a      	uxth	r2, r3
   17024:	68bb      	ldr	r3, [r7, #8]
   17026:	3301      	adds	r3, #1
   17028:	781b      	ldrb	r3, [r3, #0]
   1702a:	b29b      	uxth	r3, r3
   1702c:	021b      	lsls	r3, r3, #8
   1702e:	b29b      	uxth	r3, r3
   17030:	4413      	add	r3, r2
   17032:	b29a      	uxth	r2, r3
   17034:	68fb      	ldr	r3, [r7, #12]
   17036:	80da      	strh	r2, [r3, #6]
   17038:	68bb      	ldr	r3, [r7, #8]
   1703a:	3302      	adds	r3, #2
   1703c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1703e:	68bb      	ldr	r3, [r7, #8]
   17040:	1c5a      	adds	r2, r3, #1
   17042:	60ba      	str	r2, [r7, #8]
   17044:	781a      	ldrb	r2, [r3, #0]
   17046:	68fb      	ldr	r3, [r7, #12]
   17048:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1704a:	68bb      	ldr	r3, [r7, #8]
   1704c:	1c5a      	adds	r2, r3, #1
   1704e:	60ba      	str	r2, [r7, #8]
   17050:	781a      	ldrb	r2, [r3, #0]
   17052:	68fb      	ldr	r3, [r7, #12]
   17054:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   17056:	68fb      	ldr	r3, [r7, #12]
   17058:	330a      	adds	r3, #10
   1705a:	68b9      	ldr	r1, [r7, #8]
   1705c:	4618      	mov	r0, r3
   1705e:	f008 fdf8 	bl	1fc52 <BdaCpy>
   17062:	68bb      	ldr	r3, [r7, #8]
   17064:	3306      	adds	r3, #6
   17066:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   17068:	68bb      	ldr	r3, [r7, #8]
   1706a:	781b      	ldrb	r3, [r3, #0]
   1706c:	b29a      	uxth	r2, r3
   1706e:	68bb      	ldr	r3, [r7, #8]
   17070:	3301      	adds	r3, #1
   17072:	781b      	ldrb	r3, [r3, #0]
   17074:	b29b      	uxth	r3, r3
   17076:	021b      	lsls	r3, r3, #8
   17078:	b29b      	uxth	r3, r3
   1707a:	4413      	add	r3, r2
   1707c:	b29a      	uxth	r2, r3
   1707e:	68fb      	ldr	r3, [r7, #12]
   17080:	821a      	strh	r2, [r3, #16]
   17082:	68bb      	ldr	r3, [r7, #8]
   17084:	3302      	adds	r3, #2
   17086:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   17088:	68bb      	ldr	r3, [r7, #8]
   1708a:	781b      	ldrb	r3, [r3, #0]
   1708c:	b29a      	uxth	r2, r3
   1708e:	68bb      	ldr	r3, [r7, #8]
   17090:	3301      	adds	r3, #1
   17092:	781b      	ldrb	r3, [r3, #0]
   17094:	b29b      	uxth	r3, r3
   17096:	021b      	lsls	r3, r3, #8
   17098:	b29b      	uxth	r3, r3
   1709a:	4413      	add	r3, r2
   1709c:	b29a      	uxth	r2, r3
   1709e:	68fb      	ldr	r3, [r7, #12]
   170a0:	825a      	strh	r2, [r3, #18]
   170a2:	68bb      	ldr	r3, [r7, #8]
   170a4:	3302      	adds	r3, #2
   170a6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   170a8:	68bb      	ldr	r3, [r7, #8]
   170aa:	781b      	ldrb	r3, [r3, #0]
   170ac:	b29a      	uxth	r2, r3
   170ae:	68bb      	ldr	r3, [r7, #8]
   170b0:	3301      	adds	r3, #1
   170b2:	781b      	ldrb	r3, [r3, #0]
   170b4:	b29b      	uxth	r3, r3
   170b6:	021b      	lsls	r3, r3, #8
   170b8:	b29b      	uxth	r3, r3
   170ba:	4413      	add	r3, r2
   170bc:	b29a      	uxth	r2, r3
   170be:	68fb      	ldr	r3, [r7, #12]
   170c0:	829a      	strh	r2, [r3, #20]
   170c2:	68bb      	ldr	r3, [r7, #8]
   170c4:	3302      	adds	r3, #2
   170c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   170c8:	68bb      	ldr	r3, [r7, #8]
   170ca:	1c5a      	adds	r2, r3, #1
   170cc:	60ba      	str	r2, [r7, #8]
   170ce:	781a      	ldrb	r2, [r3, #0]
   170d0:	68fb      	ldr	r3, [r7, #12]
   170d2:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   170d4:	68fb      	ldr	r3, [r7, #12]
   170d6:	3317      	adds	r3, #23
   170d8:	2206      	movs	r2, #6
   170da:	2100      	movs	r1, #0
   170dc:	4618      	mov	r0, r3
   170de:	f7f5 f93d 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   170e2:	68fb      	ldr	r3, [r7, #12]
   170e4:	331d      	adds	r3, #29
   170e6:	2206      	movs	r2, #6
   170e8:	2100      	movs	r1, #0
   170ea:	4618      	mov	r0, r3
   170ec:	f7f5 f936 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   170f0:	68fb      	ldr	r3, [r7, #12]
   170f2:	88da      	ldrh	r2, [r3, #6]
   170f4:	68fb      	ldr	r3, [r7, #12]
   170f6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   170f8:	68fb      	ldr	r3, [r7, #12]
   170fa:	791a      	ldrb	r2, [r3, #4]
   170fc:	68fb      	ldr	r3, [r7, #12]
   170fe:	70da      	strb	r2, [r3, #3]
}
   17100:	bf00      	nop
   17102:	3710      	adds	r7, #16
   17104:	46bd      	mov	sp, r7
   17106:	bd80      	pop	{r7, pc}

00017108 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17108:	b580      	push	{r7, lr}
   1710a:	b084      	sub	sp, #16
   1710c:	af00      	add	r7, sp, #0
   1710e:	60f8      	str	r0, [r7, #12]
   17110:	60b9      	str	r1, [r7, #8]
   17112:	4613      	mov	r3, r2
   17114:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   17116:	68bb      	ldr	r3, [r7, #8]
   17118:	1c5a      	adds	r2, r3, #1
   1711a:	60ba      	str	r2, [r7, #8]
   1711c:	781a      	ldrb	r2, [r3, #0]
   1711e:	68fb      	ldr	r3, [r7, #12]
   17120:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   17122:	68bb      	ldr	r3, [r7, #8]
   17124:	781b      	ldrb	r3, [r3, #0]
   17126:	b29a      	uxth	r2, r3
   17128:	68bb      	ldr	r3, [r7, #8]
   1712a:	3301      	adds	r3, #1
   1712c:	781b      	ldrb	r3, [r3, #0]
   1712e:	b29b      	uxth	r3, r3
   17130:	021b      	lsls	r3, r3, #8
   17132:	b29b      	uxth	r3, r3
   17134:	4413      	add	r3, r2
   17136:	b29a      	uxth	r2, r3
   17138:	68fb      	ldr	r3, [r7, #12]
   1713a:	80da      	strh	r2, [r3, #6]
   1713c:	68bb      	ldr	r3, [r7, #8]
   1713e:	3302      	adds	r3, #2
   17140:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   17142:	68bb      	ldr	r3, [r7, #8]
   17144:	1c5a      	adds	r2, r3, #1
   17146:	60ba      	str	r2, [r7, #8]
   17148:	781a      	ldrb	r2, [r3, #0]
   1714a:	68fb      	ldr	r3, [r7, #12]
   1714c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1714e:	68bb      	ldr	r3, [r7, #8]
   17150:	1c5a      	adds	r2, r3, #1
   17152:	60ba      	str	r2, [r7, #8]
   17154:	781a      	ldrb	r2, [r3, #0]
   17156:	68fb      	ldr	r3, [r7, #12]
   17158:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1715a:	68fb      	ldr	r3, [r7, #12]
   1715c:	330a      	adds	r3, #10
   1715e:	68b9      	ldr	r1, [r7, #8]
   17160:	4618      	mov	r0, r3
   17162:	f008 fd76 	bl	1fc52 <BdaCpy>
   17166:	68bb      	ldr	r3, [r7, #8]
   17168:	3306      	adds	r3, #6
   1716a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   1716c:	68fb      	ldr	r3, [r7, #12]
   1716e:	3317      	adds	r3, #23
   17170:	68b9      	ldr	r1, [r7, #8]
   17172:	4618      	mov	r0, r3
   17174:	f008 fd6d 	bl	1fc52 <BdaCpy>
   17178:	68bb      	ldr	r3, [r7, #8]
   1717a:	3306      	adds	r3, #6
   1717c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   1717e:	68fb      	ldr	r3, [r7, #12]
   17180:	331d      	adds	r3, #29
   17182:	68b9      	ldr	r1, [r7, #8]
   17184:	4618      	mov	r0, r3
   17186:	f008 fd64 	bl	1fc52 <BdaCpy>
   1718a:	68bb      	ldr	r3, [r7, #8]
   1718c:	3306      	adds	r3, #6
   1718e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   17190:	68bb      	ldr	r3, [r7, #8]
   17192:	781b      	ldrb	r3, [r3, #0]
   17194:	b29a      	uxth	r2, r3
   17196:	68bb      	ldr	r3, [r7, #8]
   17198:	3301      	adds	r3, #1
   1719a:	781b      	ldrb	r3, [r3, #0]
   1719c:	b29b      	uxth	r3, r3
   1719e:	021b      	lsls	r3, r3, #8
   171a0:	b29b      	uxth	r3, r3
   171a2:	4413      	add	r3, r2
   171a4:	b29a      	uxth	r2, r3
   171a6:	68fb      	ldr	r3, [r7, #12]
   171a8:	821a      	strh	r2, [r3, #16]
   171aa:	68bb      	ldr	r3, [r7, #8]
   171ac:	3302      	adds	r3, #2
   171ae:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   171b0:	68bb      	ldr	r3, [r7, #8]
   171b2:	781b      	ldrb	r3, [r3, #0]
   171b4:	b29a      	uxth	r2, r3
   171b6:	68bb      	ldr	r3, [r7, #8]
   171b8:	3301      	adds	r3, #1
   171ba:	781b      	ldrb	r3, [r3, #0]
   171bc:	b29b      	uxth	r3, r3
   171be:	021b      	lsls	r3, r3, #8
   171c0:	b29b      	uxth	r3, r3
   171c2:	4413      	add	r3, r2
   171c4:	b29a      	uxth	r2, r3
   171c6:	68fb      	ldr	r3, [r7, #12]
   171c8:	825a      	strh	r2, [r3, #18]
   171ca:	68bb      	ldr	r3, [r7, #8]
   171cc:	3302      	adds	r3, #2
   171ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   171d0:	68bb      	ldr	r3, [r7, #8]
   171d2:	781b      	ldrb	r3, [r3, #0]
   171d4:	b29a      	uxth	r2, r3
   171d6:	68bb      	ldr	r3, [r7, #8]
   171d8:	3301      	adds	r3, #1
   171da:	781b      	ldrb	r3, [r3, #0]
   171dc:	b29b      	uxth	r3, r3
   171de:	021b      	lsls	r3, r3, #8
   171e0:	b29b      	uxth	r3, r3
   171e2:	4413      	add	r3, r2
   171e4:	b29a      	uxth	r2, r3
   171e6:	68fb      	ldr	r3, [r7, #12]
   171e8:	829a      	strh	r2, [r3, #20]
   171ea:	68bb      	ldr	r3, [r7, #8]
   171ec:	3302      	adds	r3, #2
   171ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   171f0:	68bb      	ldr	r3, [r7, #8]
   171f2:	1c5a      	adds	r2, r3, #1
   171f4:	60ba      	str	r2, [r7, #8]
   171f6:	781a      	ldrb	r2, [r3, #0]
   171f8:	68fb      	ldr	r3, [r7, #12]
   171fa:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   171fc:	68fb      	ldr	r3, [r7, #12]
   171fe:	88da      	ldrh	r2, [r3, #6]
   17200:	68fb      	ldr	r3, [r7, #12]
   17202:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   17204:	68fb      	ldr	r3, [r7, #12]
   17206:	791a      	ldrb	r2, [r3, #4]
   17208:	68fb      	ldr	r3, [r7, #12]
   1720a:	70da      	strb	r2, [r3, #3]
}
   1720c:	bf00      	nop
   1720e:	3710      	adds	r7, #16
   17210:	46bd      	mov	sp, r7
   17212:	bd80      	pop	{r7, pc}

00017214 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17214:	b480      	push	{r7}
   17216:	b085      	sub	sp, #20
   17218:	af00      	add	r7, sp, #0
   1721a:	60f8      	str	r0, [r7, #12]
   1721c:	60b9      	str	r1, [r7, #8]
   1721e:	4613      	mov	r3, r2
   17220:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   17222:	68bb      	ldr	r3, [r7, #8]
   17224:	1c5a      	adds	r2, r3, #1
   17226:	60ba      	str	r2, [r7, #8]
   17228:	781a      	ldrb	r2, [r3, #0]
   1722a:	68fb      	ldr	r3, [r7, #12]
   1722c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1722e:	68bb      	ldr	r3, [r7, #8]
   17230:	781b      	ldrb	r3, [r3, #0]
   17232:	b29a      	uxth	r2, r3
   17234:	68bb      	ldr	r3, [r7, #8]
   17236:	3301      	adds	r3, #1
   17238:	781b      	ldrb	r3, [r3, #0]
   1723a:	b29b      	uxth	r3, r3
   1723c:	021b      	lsls	r3, r3, #8
   1723e:	b29b      	uxth	r3, r3
   17240:	4413      	add	r3, r2
   17242:	b29a      	uxth	r2, r3
   17244:	68fb      	ldr	r3, [r7, #12]
   17246:	80da      	strh	r2, [r3, #6]
   17248:	68bb      	ldr	r3, [r7, #8]
   1724a:	3302      	adds	r3, #2
   1724c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   1724e:	68bb      	ldr	r3, [r7, #8]
   17250:	1c5a      	adds	r2, r3, #1
   17252:	60ba      	str	r2, [r7, #8]
   17254:	781a      	ldrb	r2, [r3, #0]
   17256:	68fb      	ldr	r3, [r7, #12]
   17258:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   1725a:	68fb      	ldr	r3, [r7, #12]
   1725c:	88da      	ldrh	r2, [r3, #6]
   1725e:	68fb      	ldr	r3, [r7, #12]
   17260:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   17262:	68fb      	ldr	r3, [r7, #12]
   17264:	791a      	ldrb	r2, [r3, #4]
   17266:	68fb      	ldr	r3, [r7, #12]
   17268:	70da      	strb	r2, [r3, #3]
}
   1726a:	bf00      	nop
   1726c:	3714      	adds	r7, #20
   1726e:	46bd      	mov	sp, r7
   17270:	f85d 7b04 	ldr.w	r7, [sp], #4
   17274:	4770      	bx	lr

00017276 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17276:	b480      	push	{r7}
   17278:	b085      	sub	sp, #20
   1727a:	af00      	add	r7, sp, #0
   1727c:	60f8      	str	r0, [r7, #12]
   1727e:	60b9      	str	r1, [r7, #8]
   17280:	4613      	mov	r3, r2
   17282:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   17284:	68bb      	ldr	r3, [r7, #8]
   17286:	1c5a      	adds	r2, r3, #1
   17288:	60ba      	str	r2, [r7, #8]
   1728a:	781a      	ldrb	r2, [r3, #0]
   1728c:	68fb      	ldr	r3, [r7, #12]
   1728e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   17290:	68bb      	ldr	r3, [r7, #8]
   17292:	781b      	ldrb	r3, [r3, #0]
   17294:	b29a      	uxth	r2, r3
   17296:	68bb      	ldr	r3, [r7, #8]
   17298:	3301      	adds	r3, #1
   1729a:	781b      	ldrb	r3, [r3, #0]
   1729c:	b29b      	uxth	r3, r3
   1729e:	021b      	lsls	r3, r3, #8
   172a0:	b29b      	uxth	r3, r3
   172a2:	4413      	add	r3, r2
   172a4:	b29a      	uxth	r2, r3
   172a6:	68fb      	ldr	r3, [r7, #12]
   172a8:	80da      	strh	r2, [r3, #6]
   172aa:	68bb      	ldr	r3, [r7, #8]
   172ac:	3302      	adds	r3, #2
   172ae:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   172b0:	68bb      	ldr	r3, [r7, #8]
   172b2:	781b      	ldrb	r3, [r3, #0]
   172b4:	b29a      	uxth	r2, r3
   172b6:	68bb      	ldr	r3, [r7, #8]
   172b8:	3301      	adds	r3, #1
   172ba:	781b      	ldrb	r3, [r3, #0]
   172bc:	b29b      	uxth	r3, r3
   172be:	021b      	lsls	r3, r3, #8
   172c0:	b29b      	uxth	r3, r3
   172c2:	4413      	add	r3, r2
   172c4:	b29a      	uxth	r2, r3
   172c6:	68fb      	ldr	r3, [r7, #12]
   172c8:	811a      	strh	r2, [r3, #8]
   172ca:	68bb      	ldr	r3, [r7, #8]
   172cc:	3302      	adds	r3, #2
   172ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   172d0:	68bb      	ldr	r3, [r7, #8]
   172d2:	781b      	ldrb	r3, [r3, #0]
   172d4:	b29a      	uxth	r2, r3
   172d6:	68bb      	ldr	r3, [r7, #8]
   172d8:	3301      	adds	r3, #1
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	b29b      	uxth	r3, r3
   172de:	021b      	lsls	r3, r3, #8
   172e0:	b29b      	uxth	r3, r3
   172e2:	4413      	add	r3, r2
   172e4:	b29a      	uxth	r2, r3
   172e6:	68fb      	ldr	r3, [r7, #12]
   172e8:	815a      	strh	r2, [r3, #10]
   172ea:	68bb      	ldr	r3, [r7, #8]
   172ec:	3302      	adds	r3, #2
   172ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   172f0:	68bb      	ldr	r3, [r7, #8]
   172f2:	781b      	ldrb	r3, [r3, #0]
   172f4:	b29a      	uxth	r2, r3
   172f6:	68bb      	ldr	r3, [r7, #8]
   172f8:	3301      	adds	r3, #1
   172fa:	781b      	ldrb	r3, [r3, #0]
   172fc:	b29b      	uxth	r3, r3
   172fe:	021b      	lsls	r3, r3, #8
   17300:	b29b      	uxth	r3, r3
   17302:	4413      	add	r3, r2
   17304:	b29a      	uxth	r2, r3
   17306:	68fb      	ldr	r3, [r7, #12]
   17308:	819a      	strh	r2, [r3, #12]
   1730a:	68bb      	ldr	r3, [r7, #8]
   1730c:	3302      	adds	r3, #2
   1730e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   17310:	68fb      	ldr	r3, [r7, #12]
   17312:	88da      	ldrh	r2, [r3, #6]
   17314:	68fb      	ldr	r3, [r7, #12]
   17316:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   17318:	68fb      	ldr	r3, [r7, #12]
   1731a:	791a      	ldrb	r2, [r3, #4]
   1731c:	68fb      	ldr	r3, [r7, #12]
   1731e:	70da      	strb	r2, [r3, #3]
}
   17320:	bf00      	nop
   17322:	3714      	adds	r7, #20
   17324:	46bd      	mov	sp, r7
   17326:	f85d 7b04 	ldr.w	r7, [sp], #4
   1732a:	4770      	bx	lr

0001732c <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1732c:	b480      	push	{r7}
   1732e:	b085      	sub	sp, #20
   17330:	af00      	add	r7, sp, #0
   17332:	60f8      	str	r0, [r7, #12]
   17334:	60b9      	str	r1, [r7, #8]
   17336:	4613      	mov	r3, r2
   17338:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1733a:	68bb      	ldr	r3, [r7, #8]
   1733c:	1c5a      	adds	r2, r3, #1
   1733e:	60ba      	str	r2, [r7, #8]
   17340:	781a      	ldrb	r2, [r3, #0]
   17342:	68fb      	ldr	r3, [r7, #12]
   17344:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   17346:	68fb      	ldr	r3, [r7, #12]
   17348:	791a      	ldrb	r2, [r3, #4]
   1734a:	68fb      	ldr	r3, [r7, #12]
   1734c:	70da      	strb	r2, [r3, #3]
}
   1734e:	bf00      	nop
   17350:	3714      	adds	r7, #20
   17352:	46bd      	mov	sp, r7
   17354:	f85d 7b04 	ldr.w	r7, [sp], #4
   17358:	4770      	bx	lr

0001735a <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1735a:	b480      	push	{r7}
   1735c:	b085      	sub	sp, #20
   1735e:	af00      	add	r7, sp, #0
   17360:	60f8      	str	r0, [r7, #12]
   17362:	60b9      	str	r1, [r7, #8]
   17364:	4613      	mov	r3, r2
   17366:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   17368:	68bb      	ldr	r3, [r7, #8]
   1736a:	1c5a      	adds	r2, r3, #1
   1736c:	60ba      	str	r2, [r7, #8]
   1736e:	781a      	ldrb	r2, [r3, #0]
   17370:	68fb      	ldr	r3, [r7, #12]
   17372:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   17374:	68bb      	ldr	r3, [r7, #8]
   17376:	781b      	ldrb	r3, [r3, #0]
   17378:	b29a      	uxth	r2, r3
   1737a:	68bb      	ldr	r3, [r7, #8]
   1737c:	3301      	adds	r3, #1
   1737e:	781b      	ldrb	r3, [r3, #0]
   17380:	b29b      	uxth	r3, r3
   17382:	021b      	lsls	r3, r3, #8
   17384:	b29b      	uxth	r3, r3
   17386:	4413      	add	r3, r2
   17388:	b29a      	uxth	r2, r3
   1738a:	68fb      	ldr	r3, [r7, #12]
   1738c:	80da      	strh	r2, [r3, #6]
   1738e:	68bb      	ldr	r3, [r7, #8]
   17390:	3302      	adds	r3, #2
   17392:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   17394:	68bb      	ldr	r3, [r7, #8]
   17396:	1c5a      	adds	r2, r3, #1
   17398:	60ba      	str	r2, [r7, #8]
   1739a:	781b      	ldrb	r3, [r3, #0]
   1739c:	b25a      	sxtb	r2, r3
   1739e:	68fb      	ldr	r3, [r7, #12]
   173a0:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	88da      	ldrh	r2, [r3, #6]
   173a6:	68fb      	ldr	r3, [r7, #12]
   173a8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   173aa:	68fb      	ldr	r3, [r7, #12]
   173ac:	791a      	ldrb	r2, [r3, #4]
   173ae:	68fb      	ldr	r3, [r7, #12]
   173b0:	70da      	strb	r2, [r3, #3]
}
   173b2:	bf00      	nop
   173b4:	3714      	adds	r7, #20
   173b6:	46bd      	mov	sp, r7
   173b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   173bc:	4770      	bx	lr

000173be <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   173be:	b580      	push	{r7, lr}
   173c0:	b084      	sub	sp, #16
   173c2:	af00      	add	r7, sp, #0
   173c4:	60f8      	str	r0, [r7, #12]
   173c6:	60b9      	str	r1, [r7, #8]
   173c8:	4613      	mov	r3, r2
   173ca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   173cc:	68bb      	ldr	r3, [r7, #8]
   173ce:	1c5a      	adds	r2, r3, #1
   173d0:	60ba      	str	r2, [r7, #8]
   173d2:	781a      	ldrb	r2, [r3, #0]
   173d4:	68fb      	ldr	r3, [r7, #12]
   173d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   173d8:	68bb      	ldr	r3, [r7, #8]
   173da:	781b      	ldrb	r3, [r3, #0]
   173dc:	b29a      	uxth	r2, r3
   173de:	68bb      	ldr	r3, [r7, #8]
   173e0:	3301      	adds	r3, #1
   173e2:	781b      	ldrb	r3, [r3, #0]
   173e4:	b29b      	uxth	r3, r3
   173e6:	021b      	lsls	r3, r3, #8
   173e8:	b29b      	uxth	r3, r3
   173ea:	4413      	add	r3, r2
   173ec:	b29a      	uxth	r2, r3
   173ee:	68fb      	ldr	r3, [r7, #12]
   173f0:	80da      	strh	r2, [r3, #6]
   173f2:	68bb      	ldr	r3, [r7, #8]
   173f4:	3302      	adds	r3, #2
   173f6:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   173f8:	68fb      	ldr	r3, [r7, #12]
   173fa:	3308      	adds	r3, #8
   173fc:	2205      	movs	r2, #5
   173fe:	68b9      	ldr	r1, [r7, #8]
   17400:	4618      	mov	r0, r3
   17402:	f7f4 fead 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   17406:	68fb      	ldr	r3, [r7, #12]
   17408:	88da      	ldrh	r2, [r3, #6]
   1740a:	68fb      	ldr	r3, [r7, #12]
   1740c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1740e:	68fb      	ldr	r3, [r7, #12]
   17410:	791a      	ldrb	r2, [r3, #4]
   17412:	68fb      	ldr	r3, [r7, #12]
   17414:	70da      	strb	r2, [r3, #3]
}
   17416:	bf00      	nop
   17418:	3710      	adds	r7, #16
   1741a:	46bd      	mov	sp, r7
   1741c:	bd80      	pop	{r7, pc}

0001741e <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1741e:	b480      	push	{r7}
   17420:	b085      	sub	sp, #20
   17422:	af00      	add	r7, sp, #0
   17424:	60f8      	str	r0, [r7, #12]
   17426:	60b9      	str	r1, [r7, #8]
   17428:	4613      	mov	r3, r2
   1742a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   1742c:	68bb      	ldr	r3, [r7, #8]
   1742e:	1c5a      	adds	r2, r3, #1
   17430:	60ba      	str	r2, [r7, #8]
   17432:	781a      	ldrb	r2, [r3, #0]
   17434:	68fb      	ldr	r3, [r7, #12]
   17436:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   17438:	68bb      	ldr	r3, [r7, #8]
   1743a:	781a      	ldrb	r2, [r3, #0]
   1743c:	68fb      	ldr	r3, [r7, #12]
   1743e:	715a      	strb	r2, [r3, #5]
   17440:	68bb      	ldr	r3, [r7, #8]
   17442:	3302      	adds	r3, #2
   17444:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   17446:	68bb      	ldr	r3, [r7, #8]
   17448:	1c5a      	adds	r2, r3, #1
   1744a:	60ba      	str	r2, [r7, #8]
   1744c:	781b      	ldrb	r3, [r3, #0]
   1744e:	b25a      	sxtb	r2, r3
   17450:	68fb      	ldr	r3, [r7, #12]
   17452:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   17454:	68fb      	ldr	r3, [r7, #12]
   17456:	795b      	ldrb	r3, [r3, #5]
   17458:	b29a      	uxth	r2, r3
   1745a:	68fb      	ldr	r3, [r7, #12]
   1745c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   1745e:	68fb      	ldr	r3, [r7, #12]
   17460:	791a      	ldrb	r2, [r3, #4]
   17462:	68fb      	ldr	r3, [r7, #12]
   17464:	70da      	strb	r2, [r3, #3]
}
   17466:	bf00      	nop
   17468:	3714      	adds	r7, #20
   1746a:	46bd      	mov	sp, r7
   1746c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17470:	4770      	bx	lr

00017472 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17472:	b480      	push	{r7}
   17474:	b085      	sub	sp, #20
   17476:	af00      	add	r7, sp, #0
   17478:	60f8      	str	r0, [r7, #12]
   1747a:	60b9      	str	r1, [r7, #8]
   1747c:	4613      	mov	r3, r2
   1747e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   17480:	68bb      	ldr	r3, [r7, #8]
   17482:	1c5a      	adds	r2, r3, #1
   17484:	60ba      	str	r2, [r7, #8]
   17486:	781a      	ldrb	r2, [r3, #0]
   17488:	68fb      	ldr	r3, [r7, #12]
   1748a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   1748c:	68bb      	ldr	r3, [r7, #8]
   1748e:	781b      	ldrb	r3, [r3, #0]
   17490:	b29a      	uxth	r2, r3
   17492:	68bb      	ldr	r3, [r7, #8]
   17494:	3301      	adds	r3, #1
   17496:	781b      	ldrb	r3, [r3, #0]
   17498:	b29b      	uxth	r3, r3
   1749a:	021b      	lsls	r3, r3, #8
   1749c:	b29b      	uxth	r3, r3
   1749e:	4413      	add	r3, r2
   174a0:	b29a      	uxth	r2, r3
   174a2:	68fb      	ldr	r3, [r7, #12]
   174a4:	80da      	strh	r2, [r3, #6]
   174a6:	68bb      	ldr	r3, [r7, #8]
   174a8:	3302      	adds	r3, #2
   174aa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   174ac:	68bb      	ldr	r3, [r7, #8]
   174ae:	1c5a      	adds	r2, r3, #1
   174b0:	60ba      	str	r2, [r7, #8]
   174b2:	781a      	ldrb	r2, [r3, #0]
   174b4:	68fb      	ldr	r3, [r7, #12]
   174b6:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   174b8:	68bb      	ldr	r3, [r7, #8]
   174ba:	781b      	ldrb	r3, [r3, #0]
   174bc:	b29a      	uxth	r2, r3
   174be:	68bb      	ldr	r3, [r7, #8]
   174c0:	3301      	adds	r3, #1
   174c2:	781b      	ldrb	r3, [r3, #0]
   174c4:	b29b      	uxth	r3, r3
   174c6:	021b      	lsls	r3, r3, #8
   174c8:	b29b      	uxth	r3, r3
   174ca:	4413      	add	r3, r2
   174cc:	b29a      	uxth	r2, r3
   174ce:	68fb      	ldr	r3, [r7, #12]
   174d0:	815a      	strh	r2, [r3, #10]
   174d2:	68bb      	ldr	r3, [r7, #8]
   174d4:	3302      	adds	r3, #2
   174d6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   174d8:	68bb      	ldr	r3, [r7, #8]
   174da:	781b      	ldrb	r3, [r3, #0]
   174dc:	b29a      	uxth	r2, r3
   174de:	68bb      	ldr	r3, [r7, #8]
   174e0:	3301      	adds	r3, #1
   174e2:	781b      	ldrb	r3, [r3, #0]
   174e4:	b29b      	uxth	r3, r3
   174e6:	021b      	lsls	r3, r3, #8
   174e8:	b29b      	uxth	r3, r3
   174ea:	4413      	add	r3, r2
   174ec:	b29a      	uxth	r2, r3
   174ee:	68fb      	ldr	r3, [r7, #12]
   174f0:	819a      	strh	r2, [r3, #12]
   174f2:	68bb      	ldr	r3, [r7, #8]
   174f4:	3302      	adds	r3, #2
   174f6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   174f8:	68fb      	ldr	r3, [r7, #12]
   174fa:	88da      	ldrh	r2, [r3, #6]
   174fc:	68fb      	ldr	r3, [r7, #12]
   174fe:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   17500:	68fb      	ldr	r3, [r7, #12]
   17502:	791a      	ldrb	r2, [r3, #4]
   17504:	68fb      	ldr	r3, [r7, #12]
   17506:	70da      	strb	r2, [r3, #3]
}
   17508:	bf00      	nop
   1750a:	3714      	adds	r7, #20
   1750c:	46bd      	mov	sp, r7
   1750e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17512:	4770      	bx	lr

00017514 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17514:	b580      	push	{r7, lr}
   17516:	b084      	sub	sp, #16
   17518:	af00      	add	r7, sp, #0
   1751a:	60f8      	str	r0, [r7, #12]
   1751c:	60b9      	str	r1, [r7, #8]
   1751e:	4613      	mov	r3, r2
   17520:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   17522:	68bb      	ldr	r3, [r7, #8]
   17524:	1c5a      	adds	r2, r3, #1
   17526:	60ba      	str	r2, [r7, #8]
   17528:	781a      	ldrb	r2, [r3, #0]
   1752a:	68fb      	ldr	r3, [r7, #12]
   1752c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   1752e:	68bb      	ldr	r3, [r7, #8]
   17530:	781b      	ldrb	r3, [r3, #0]
   17532:	b29a      	uxth	r2, r3
   17534:	68bb      	ldr	r3, [r7, #8]
   17536:	3301      	adds	r3, #1
   17538:	781b      	ldrb	r3, [r3, #0]
   1753a:	b29b      	uxth	r3, r3
   1753c:	021b      	lsls	r3, r3, #8
   1753e:	b29b      	uxth	r3, r3
   17540:	4413      	add	r3, r2
   17542:	b29a      	uxth	r2, r3
   17544:	68fb      	ldr	r3, [r7, #12]
   17546:	80da      	strh	r2, [r3, #6]
   17548:	68bb      	ldr	r3, [r7, #8]
   1754a:	3302      	adds	r3, #2
   1754c:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   1754e:	68fb      	ldr	r3, [r7, #12]
   17550:	3308      	adds	r3, #8
   17552:	2208      	movs	r2, #8
   17554:	68b9      	ldr	r1, [r7, #8]
   17556:	4618      	mov	r0, r3
   17558:	f7f4 fe02 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   1755c:	68fb      	ldr	r3, [r7, #12]
   1755e:	88da      	ldrh	r2, [r3, #6]
   17560:	68fb      	ldr	r3, [r7, #12]
   17562:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   17564:	68fb      	ldr	r3, [r7, #12]
   17566:	791a      	ldrb	r2, [r3, #4]
   17568:	68fb      	ldr	r3, [r7, #12]
   1756a:	70da      	strb	r2, [r3, #3]
}
   1756c:	bf00      	nop
   1756e:	3710      	adds	r7, #16
   17570:	46bd      	mov	sp, r7
   17572:	bd80      	pop	{r7, pc}

00017574 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17574:	b480      	push	{r7}
   17576:	b085      	sub	sp, #20
   17578:	af00      	add	r7, sp, #0
   1757a:	60f8      	str	r0, [r7, #12]
   1757c:	60b9      	str	r1, [r7, #8]
   1757e:	4613      	mov	r3, r2
   17580:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   17582:	68bb      	ldr	r3, [r7, #8]
   17584:	1c5a      	adds	r2, r3, #1
   17586:	60ba      	str	r2, [r7, #8]
   17588:	781a      	ldrb	r2, [r3, #0]
   1758a:	68fb      	ldr	r3, [r7, #12]
   1758c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   1758e:	68bb      	ldr	r3, [r7, #8]
   17590:	781b      	ldrb	r3, [r3, #0]
   17592:	b29a      	uxth	r2, r3
   17594:	68bb      	ldr	r3, [r7, #8]
   17596:	3301      	adds	r3, #1
   17598:	781b      	ldrb	r3, [r3, #0]
   1759a:	b29b      	uxth	r3, r3
   1759c:	021b      	lsls	r3, r3, #8
   1759e:	b29b      	uxth	r3, r3
   175a0:	4413      	add	r3, r2
   175a2:	b29a      	uxth	r2, r3
   175a4:	68fb      	ldr	r3, [r7, #12]
   175a6:	80da      	strh	r2, [r3, #6]
   175a8:	68bb      	ldr	r3, [r7, #8]
   175aa:	3302      	adds	r3, #2
   175ac:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   175ae:	68fb      	ldr	r3, [r7, #12]
   175b0:	88da      	ldrh	r2, [r3, #6]
   175b2:	68fb      	ldr	r3, [r7, #12]
   175b4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   175b6:	68fb      	ldr	r3, [r7, #12]
   175b8:	791a      	ldrb	r2, [r3, #4]
   175ba:	68fb      	ldr	r3, [r7, #12]
   175bc:	70da      	strb	r2, [r3, #3]
}
   175be:	bf00      	nop
   175c0:	3714      	adds	r7, #20
   175c2:	46bd      	mov	sp, r7
   175c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   175c8:	4770      	bx	lr

000175ca <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   175ca:	b480      	push	{r7}
   175cc:	b085      	sub	sp, #20
   175ce:	af00      	add	r7, sp, #0
   175d0:	60f8      	str	r0, [r7, #12]
   175d2:	60b9      	str	r1, [r7, #8]
   175d4:	4613      	mov	r3, r2
   175d6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   175d8:	68bb      	ldr	r3, [r7, #8]
   175da:	1c5a      	adds	r2, r3, #1
   175dc:	60ba      	str	r2, [r7, #8]
   175de:	781a      	ldrb	r2, [r3, #0]
   175e0:	68fb      	ldr	r3, [r7, #12]
   175e2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   175e4:	68bb      	ldr	r3, [r7, #8]
   175e6:	781b      	ldrb	r3, [r3, #0]
   175e8:	b29a      	uxth	r2, r3
   175ea:	68bb      	ldr	r3, [r7, #8]
   175ec:	3301      	adds	r3, #1
   175ee:	781b      	ldrb	r3, [r3, #0]
   175f0:	b29b      	uxth	r3, r3
   175f2:	021b      	lsls	r3, r3, #8
   175f4:	b29b      	uxth	r3, r3
   175f6:	4413      	add	r3, r2
   175f8:	b29a      	uxth	r2, r3
   175fa:	68fb      	ldr	r3, [r7, #12]
   175fc:	80da      	strh	r2, [r3, #6]
   175fe:	68bb      	ldr	r3, [r7, #8]
   17600:	3302      	adds	r3, #2
   17602:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   17604:	68fb      	ldr	r3, [r7, #12]
   17606:	88da      	ldrh	r2, [r3, #6]
   17608:	68fb      	ldr	r3, [r7, #12]
   1760a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   1760c:	68fb      	ldr	r3, [r7, #12]
   1760e:	791a      	ldrb	r2, [r3, #4]
   17610:	68fb      	ldr	r3, [r7, #12]
   17612:	70da      	strb	r2, [r3, #3]
}
   17614:	bf00      	nop
   17616:	3714      	adds	r7, #20
   17618:	46bd      	mov	sp, r7
   1761a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1761e:	4770      	bx	lr

00017620 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17620:	b480      	push	{r7}
   17622:	b085      	sub	sp, #20
   17624:	af00      	add	r7, sp, #0
   17626:	60f8      	str	r0, [r7, #12]
   17628:	60b9      	str	r1, [r7, #8]
   1762a:	4613      	mov	r3, r2
   1762c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   1762e:	68bb      	ldr	r3, [r7, #8]
   17630:	1c5a      	adds	r2, r3, #1
   17632:	60ba      	str	r2, [r7, #8]
   17634:	781a      	ldrb	r2, [r3, #0]
   17636:	68fb      	ldr	r3, [r7, #12]
   17638:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   1763a:	68bb      	ldr	r3, [r7, #8]
   1763c:	781b      	ldrb	r3, [r3, #0]
   1763e:	b29a      	uxth	r2, r3
   17640:	68bb      	ldr	r3, [r7, #8]
   17642:	3301      	adds	r3, #1
   17644:	781b      	ldrb	r3, [r3, #0]
   17646:	b29b      	uxth	r3, r3
   17648:	021b      	lsls	r3, r3, #8
   1764a:	b29b      	uxth	r3, r3
   1764c:	4413      	add	r3, r2
   1764e:	b29a      	uxth	r2, r3
   17650:	68fb      	ldr	r3, [r7, #12]
   17652:	80da      	strh	r2, [r3, #6]
   17654:	68bb      	ldr	r3, [r7, #8]
   17656:	3302      	adds	r3, #2
   17658:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   1765a:	68fb      	ldr	r3, [r7, #12]
   1765c:	88da      	ldrh	r2, [r3, #6]
   1765e:	68fb      	ldr	r3, [r7, #12]
   17660:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   17662:	68fb      	ldr	r3, [r7, #12]
   17664:	791a      	ldrb	r2, [r3, #4]
   17666:	68fb      	ldr	r3, [r7, #12]
   17668:	70da      	strb	r2, [r3, #3]
}
   1766a:	bf00      	nop
   1766c:	3714      	adds	r7, #20
   1766e:	46bd      	mov	sp, r7
   17670:	f85d 7b04 	ldr.w	r7, [sp], #4
   17674:	4770      	bx	lr

00017676 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17676:	b480      	push	{r7}
   17678:	b085      	sub	sp, #20
   1767a:	af00      	add	r7, sp, #0
   1767c:	60f8      	str	r0, [r7, #12]
   1767e:	60b9      	str	r1, [r7, #8]
   17680:	4613      	mov	r3, r2
   17682:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   17684:	68bb      	ldr	r3, [r7, #8]
   17686:	1c5a      	adds	r2, r3, #1
   17688:	60ba      	str	r2, [r7, #8]
   1768a:	781a      	ldrb	r2, [r3, #0]
   1768c:	68fb      	ldr	r3, [r7, #12]
   1768e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   17690:	68bb      	ldr	r3, [r7, #8]
   17692:	781b      	ldrb	r3, [r3, #0]
   17694:	b29a      	uxth	r2, r3
   17696:	68bb      	ldr	r3, [r7, #8]
   17698:	3301      	adds	r3, #1
   1769a:	781b      	ldrb	r3, [r3, #0]
   1769c:	b29b      	uxth	r3, r3
   1769e:	021b      	lsls	r3, r3, #8
   176a0:	b29b      	uxth	r3, r3
   176a2:	4413      	add	r3, r2
   176a4:	b29a      	uxth	r2, r3
   176a6:	68fb      	ldr	r3, [r7, #12]
   176a8:	80da      	strh	r2, [r3, #6]
   176aa:	68bb      	ldr	r3, [r7, #8]
   176ac:	3302      	adds	r3, #2
   176ae:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   176b0:	68bb      	ldr	r3, [r7, #8]
   176b2:	1c5a      	adds	r2, r3, #1
   176b4:	60ba      	str	r2, [r7, #8]
   176b6:	781a      	ldrb	r2, [r3, #0]
   176b8:	68fb      	ldr	r3, [r7, #12]
   176ba:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   176bc:	68fb      	ldr	r3, [r7, #12]
   176be:	88da      	ldrh	r2, [r3, #6]
   176c0:	68fb      	ldr	r3, [r7, #12]
   176c2:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   176c4:	68fb      	ldr	r3, [r7, #12]
   176c6:	791a      	ldrb	r2, [r3, #4]
   176c8:	68fb      	ldr	r3, [r7, #12]
   176ca:	70da      	strb	r2, [r3, #3]
}
   176cc:	bf00      	nop
   176ce:	3714      	adds	r7, #20
   176d0:	46bd      	mov	sp, r7
   176d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   176d6:	4770      	bx	lr

000176d8 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   176d8:	b580      	push	{r7, lr}
   176da:	b084      	sub	sp, #16
   176dc:	af00      	add	r7, sp, #0
   176de:	60f8      	str	r0, [r7, #12]
   176e0:	60b9      	str	r1, [r7, #8]
   176e2:	4613      	mov	r3, r2
   176e4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   176e6:	68bb      	ldr	r3, [r7, #8]
   176e8:	781b      	ldrb	r3, [r3, #0]
   176ea:	b29a      	uxth	r2, r3
   176ec:	68bb      	ldr	r3, [r7, #8]
   176ee:	3301      	adds	r3, #1
   176f0:	781b      	ldrb	r3, [r3, #0]
   176f2:	b29b      	uxth	r3, r3
   176f4:	021b      	lsls	r3, r3, #8
   176f6:	b29b      	uxth	r3, r3
   176f8:	4413      	add	r3, r2
   176fa:	b29a      	uxth	r2, r3
   176fc:	68fb      	ldr	r3, [r7, #12]
   176fe:	809a      	strh	r2, [r3, #4]
   17700:	68bb      	ldr	r3, [r7, #8]
   17702:	3302      	adds	r3, #2
   17704:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   17706:	68fb      	ldr	r3, [r7, #12]
   17708:	3306      	adds	r3, #6
   1770a:	2208      	movs	r2, #8
   1770c:	68b9      	ldr	r1, [r7, #8]
   1770e:	4618      	mov	r0, r3
   17710:	f7f4 fd26 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   17714:	68bb      	ldr	r3, [r7, #8]
   17716:	3308      	adds	r3, #8
   17718:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   1771a:	68bb      	ldr	r3, [r7, #8]
   1771c:	781b      	ldrb	r3, [r3, #0]
   1771e:	b29a      	uxth	r2, r3
   17720:	68bb      	ldr	r3, [r7, #8]
   17722:	3301      	adds	r3, #1
   17724:	781b      	ldrb	r3, [r3, #0]
   17726:	b29b      	uxth	r3, r3
   17728:	021b      	lsls	r3, r3, #8
   1772a:	b29b      	uxth	r3, r3
   1772c:	4413      	add	r3, r2
   1772e:	b29a      	uxth	r2, r3
   17730:	68fb      	ldr	r3, [r7, #12]
   17732:	81da      	strh	r2, [r3, #14]
   17734:	68bb      	ldr	r3, [r7, #8]
   17736:	3302      	adds	r3, #2
   17738:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   1773a:	68fb      	ldr	r3, [r7, #12]
   1773c:	889a      	ldrh	r2, [r3, #4]
   1773e:	68fb      	ldr	r3, [r7, #12]
   17740:	801a      	strh	r2, [r3, #0]
}
   17742:	bf00      	nop
   17744:	3710      	adds	r7, #16
   17746:	46bd      	mov	sp, r7
   17748:	bd80      	pop	{r7, pc}

0001774a <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1774a:	b480      	push	{r7}
   1774c:	b085      	sub	sp, #20
   1774e:	af00      	add	r7, sp, #0
   17750:	60f8      	str	r0, [r7, #12]
   17752:	60b9      	str	r1, [r7, #8]
   17754:	4613      	mov	r3, r2
   17756:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   17758:	68bb      	ldr	r3, [r7, #8]
   1775a:	781b      	ldrb	r3, [r3, #0]
   1775c:	b29a      	uxth	r2, r3
   1775e:	68bb      	ldr	r3, [r7, #8]
   17760:	3301      	adds	r3, #1
   17762:	781b      	ldrb	r3, [r3, #0]
   17764:	b29b      	uxth	r3, r3
   17766:	021b      	lsls	r3, r3, #8
   17768:	b29b      	uxth	r3, r3
   1776a:	4413      	add	r3, r2
   1776c:	b29a      	uxth	r2, r3
   1776e:	68fb      	ldr	r3, [r7, #12]
   17770:	809a      	strh	r2, [r3, #4]
   17772:	68bb      	ldr	r3, [r7, #8]
   17774:	3302      	adds	r3, #2
   17776:	60bb      	str	r3, [r7, #8]
}
   17778:	bf00      	nop
   1777a:	3714      	adds	r7, #20
   1777c:	46bd      	mov	sp, r7
   1777e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17782:	4770      	bx	lr

00017784 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17784:	b580      	push	{r7, lr}
   17786:	b084      	sub	sp, #16
   17788:	af00      	add	r7, sp, #0
   1778a:	60f8      	str	r0, [r7, #12]
   1778c:	60b9      	str	r1, [r7, #8]
   1778e:	4613      	mov	r3, r2
   17790:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   17792:	68bb      	ldr	r3, [r7, #8]
   17794:	3b02      	subs	r3, #2
   17796:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   17798:	68bb      	ldr	r3, [r7, #8]
   1779a:	781b      	ldrb	r3, [r3, #0]
   1779c:	b29a      	uxth	r2, r3
   1779e:	68bb      	ldr	r3, [r7, #8]
   177a0:	3301      	adds	r3, #1
   177a2:	781b      	ldrb	r3, [r3, #0]
   177a4:	b29b      	uxth	r3, r3
   177a6:	021b      	lsls	r3, r3, #8
   177a8:	b29b      	uxth	r3, r3
   177aa:	4413      	add	r3, r2
   177ac:	b29a      	uxth	r2, r3
   177ae:	68fb      	ldr	r3, [r7, #12]
   177b0:	809a      	strh	r2, [r3, #4]
   177b2:	68bb      	ldr	r3, [r7, #8]
   177b4:	3302      	adds	r3, #2
   177b6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   177b8:	68bb      	ldr	r3, [r7, #8]
   177ba:	1c5a      	adds	r2, r3, #1
   177bc:	60ba      	str	r2, [r7, #8]
   177be:	781a      	ldrb	r2, [r3, #0]
   177c0:	68fb      	ldr	r3, [r7, #12]
   177c2:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   177c4:	68fb      	ldr	r3, [r7, #12]
   177c6:	1d98      	adds	r0, r3, #6
   177c8:	79fb      	ldrb	r3, [r7, #7]
   177ca:	3b04      	subs	r3, #4
   177cc:	461a      	mov	r2, r3
   177ce:	68b9      	ldr	r1, [r7, #8]
   177d0:	f7f4 fcc6 	bl	c160 <memcpy>
}
   177d4:	bf00      	nop
   177d6:	3710      	adds	r7, #16
   177d8:	46bd      	mov	sp, r7
   177da:	bd80      	pop	{r7, pc}

000177dc <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   177dc:	b580      	push	{r7, lr}
   177de:	b084      	sub	sp, #16
   177e0:	af00      	add	r7, sp, #0
   177e2:	60f8      	str	r0, [r7, #12]
   177e4:	60b9      	str	r1, [r7, #8]
   177e6:	4613      	mov	r3, r2
   177e8:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   177ea:	68fb      	ldr	r3, [r7, #12]
   177ec:	3304      	adds	r3, #4
   177ee:	79fa      	ldrb	r2, [r7, #7]
   177f0:	68b9      	ldr	r1, [r7, #8]
   177f2:	4618      	mov	r0, r3
   177f4:	f7f4 fcb4 	bl	c160 <memcpy>
}
   177f8:	bf00      	nop
   177fa:	3710      	adds	r7, #16
   177fc:	46bd      	mov	sp, r7
   177fe:	bd80      	pop	{r7, pc}

00017800 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17800:	b480      	push	{r7}
   17802:	b085      	sub	sp, #20
   17804:	af00      	add	r7, sp, #0
   17806:	60f8      	str	r0, [r7, #12]
   17808:	60b9      	str	r1, [r7, #8]
   1780a:	4613      	mov	r3, r2
   1780c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   1780e:	68bb      	ldr	r3, [r7, #8]
   17810:	1c5a      	adds	r2, r3, #1
   17812:	60ba      	str	r2, [r7, #8]
   17814:	781a      	ldrb	r2, [r3, #0]
   17816:	68fb      	ldr	r3, [r7, #12]
   17818:	711a      	strb	r2, [r3, #4]
}
   1781a:	bf00      	nop
   1781c:	3714      	adds	r7, #20
   1781e:	46bd      	mov	sp, r7
   17820:	f85d 7b04 	ldr.w	r7, [sp], #4
   17824:	4770      	bx	lr

00017826 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17826:	b580      	push	{r7, lr}
   17828:	b084      	sub	sp, #16
   1782a:	af00      	add	r7, sp, #0
   1782c:	60f8      	str	r0, [r7, #12]
   1782e:	60b9      	str	r1, [r7, #8]
   17830:	4613      	mov	r3, r2
   17832:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   17834:	68bb      	ldr	r3, [r7, #8]
   17836:	1c5a      	adds	r2, r3, #1
   17838:	60ba      	str	r2, [r7, #8]
   1783a:	781a      	ldrb	r2, [r3, #0]
   1783c:	68fb      	ldr	r3, [r7, #12]
   1783e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   17840:	68fb      	ldr	r3, [r7, #12]
   17842:	3305      	adds	r3, #5
   17844:	2210      	movs	r2, #16
   17846:	68b9      	ldr	r1, [r7, #8]
   17848:	4618      	mov	r0, r3
   1784a:	f7f4 fc89 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   1784e:	68fb      	ldr	r3, [r7, #12]
   17850:	791a      	ldrb	r2, [r3, #4]
   17852:	68fb      	ldr	r3, [r7, #12]
   17854:	70da      	strb	r2, [r3, #3]
}
   17856:	bf00      	nop
   17858:	3710      	adds	r7, #16
   1785a:	46bd      	mov	sp, r7
   1785c:	bd80      	pop	{r7, pc}

0001785e <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1785e:	b580      	push	{r7, lr}
   17860:	b084      	sub	sp, #16
   17862:	af00      	add	r7, sp, #0
   17864:	60f8      	str	r0, [r7, #12]
   17866:	60b9      	str	r1, [r7, #8]
   17868:	4613      	mov	r3, r2
   1786a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   1786c:	68bb      	ldr	r3, [r7, #8]
   1786e:	1c5a      	adds	r2, r3, #1
   17870:	60ba      	str	r2, [r7, #8]
   17872:	781a      	ldrb	r2, [r3, #0]
   17874:	68fb      	ldr	r3, [r7, #12]
   17876:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   17878:	68fb      	ldr	r3, [r7, #12]
   1787a:	3305      	adds	r3, #5
   1787c:	2208      	movs	r2, #8
   1787e:	68b9      	ldr	r1, [r7, #8]
   17880:	4618      	mov	r0, r3
   17882:	f7f4 fc6d 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   17886:	68fb      	ldr	r3, [r7, #12]
   17888:	791a      	ldrb	r2, [r3, #4]
   1788a:	68fb      	ldr	r3, [r7, #12]
   1788c:	70da      	strb	r2, [r3, #3]
}
   1788e:	bf00      	nop
   17890:	3710      	adds	r7, #16
   17892:	46bd      	mov	sp, r7
   17894:	bd80      	pop	{r7, pc}

00017896 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17896:	b480      	push	{r7}
   17898:	b085      	sub	sp, #20
   1789a:	af00      	add	r7, sp, #0
   1789c:	60f8      	str	r0, [r7, #12]
   1789e:	60b9      	str	r1, [r7, #8]
   178a0:	4613      	mov	r3, r2
   178a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   178a4:	68bb      	ldr	r3, [r7, #8]
   178a6:	1c5a      	adds	r2, r3, #1
   178a8:	60ba      	str	r2, [r7, #8]
   178aa:	781a      	ldrb	r2, [r3, #0]
   178ac:	68fb      	ldr	r3, [r7, #12]
   178ae:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   178b0:	68fb      	ldr	r3, [r7, #12]
   178b2:	791a      	ldrb	r2, [r3, #4]
   178b4:	68fb      	ldr	r3, [r7, #12]
   178b6:	70da      	strb	r2, [r3, #3]
}
   178b8:	bf00      	nop
   178ba:	3714      	adds	r7, #20
   178bc:	46bd      	mov	sp, r7
   178be:	f85d 7b04 	ldr.w	r7, [sp], #4
   178c2:	4770      	bx	lr

000178c4 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   178c4:	b480      	push	{r7}
   178c6:	b085      	sub	sp, #20
   178c8:	af00      	add	r7, sp, #0
   178ca:	60f8      	str	r0, [r7, #12]
   178cc:	60b9      	str	r1, [r7, #8]
   178ce:	4613      	mov	r3, r2
   178d0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   178d2:	68bb      	ldr	r3, [r7, #8]
   178d4:	1c5a      	adds	r2, r3, #1
   178d6:	60ba      	str	r2, [r7, #8]
   178d8:	781a      	ldrb	r2, [r3, #0]
   178da:	68fb      	ldr	r3, [r7, #12]
   178dc:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   178de:	68fb      	ldr	r3, [r7, #12]
   178e0:	791a      	ldrb	r2, [r3, #4]
   178e2:	68fb      	ldr	r3, [r7, #12]
   178e4:	70da      	strb	r2, [r3, #3]
}
   178e6:	bf00      	nop
   178e8:	3714      	adds	r7, #20
   178ea:	46bd      	mov	sp, r7
   178ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   178f0:	4770      	bx	lr

000178f2 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   178f2:	b480      	push	{r7}
   178f4:	b085      	sub	sp, #20
   178f6:	af00      	add	r7, sp, #0
   178f8:	60f8      	str	r0, [r7, #12]
   178fa:	60b9      	str	r1, [r7, #8]
   178fc:	4613      	mov	r3, r2
   178fe:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   17900:	68bb      	ldr	r3, [r7, #8]
   17902:	1c5a      	adds	r2, r3, #1
   17904:	60ba      	str	r2, [r7, #8]
   17906:	781a      	ldrb	r2, [r3, #0]
   17908:	68fb      	ldr	r3, [r7, #12]
   1790a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   1790c:	68fb      	ldr	r3, [r7, #12]
   1790e:	791a      	ldrb	r2, [r3, #4]
   17910:	68fb      	ldr	r3, [r7, #12]
   17912:	70da      	strb	r2, [r3, #3]
}
   17914:	bf00      	nop
   17916:	3714      	adds	r7, #20
   17918:	46bd      	mov	sp, r7
   1791a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1791e:	4770      	bx	lr

00017920 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17920:	b580      	push	{r7, lr}
   17922:	b084      	sub	sp, #16
   17924:	af00      	add	r7, sp, #0
   17926:	60f8      	str	r0, [r7, #12]
   17928:	60b9      	str	r1, [r7, #8]
   1792a:	4613      	mov	r3, r2
   1792c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   1792e:	68bb      	ldr	r3, [r7, #8]
   17930:	1c5a      	adds	r2, r3, #1
   17932:	60ba      	str	r2, [r7, #8]
   17934:	781a      	ldrb	r2, [r3, #0]
   17936:	68fb      	ldr	r3, [r7, #12]
   17938:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   1793a:	68fb      	ldr	r3, [r7, #12]
   1793c:	3305      	adds	r3, #5
   1793e:	68b9      	ldr	r1, [r7, #8]
   17940:	4618      	mov	r0, r3
   17942:	f008 f986 	bl	1fc52 <BdaCpy>
   17946:	68bb      	ldr	r3, [r7, #8]
   17948:	3306      	adds	r3, #6
   1794a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   1794c:	68fb      	ldr	r3, [r7, #12]
   1794e:	791a      	ldrb	r2, [r3, #4]
   17950:	68fb      	ldr	r3, [r7, #12]
   17952:	70da      	strb	r2, [r3, #3]
}
   17954:	bf00      	nop
   17956:	3710      	adds	r7, #16
   17958:	46bd      	mov	sp, r7
   1795a:	bd80      	pop	{r7, pc}

0001795c <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1795c:	b580      	push	{r7, lr}
   1795e:	b084      	sub	sp, #16
   17960:	af00      	add	r7, sp, #0
   17962:	60f8      	str	r0, [r7, #12]
   17964:	60b9      	str	r1, [r7, #8]
   17966:	4613      	mov	r3, r2
   17968:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   1796a:	68bb      	ldr	r3, [r7, #8]
   1796c:	1c5a      	adds	r2, r3, #1
   1796e:	60ba      	str	r2, [r7, #8]
   17970:	781a      	ldrb	r2, [r3, #0]
   17972:	68fb      	ldr	r3, [r7, #12]
   17974:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   17976:	68fb      	ldr	r3, [r7, #12]
   17978:	3305      	adds	r3, #5
   1797a:	68b9      	ldr	r1, [r7, #8]
   1797c:	4618      	mov	r0, r3
   1797e:	f008 f968 	bl	1fc52 <BdaCpy>
   17982:	68bb      	ldr	r3, [r7, #8]
   17984:	3306      	adds	r3, #6
   17986:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   17988:	68fb      	ldr	r3, [r7, #12]
   1798a:	791a      	ldrb	r2, [r3, #4]
   1798c:	68fb      	ldr	r3, [r7, #12]
   1798e:	70da      	strb	r2, [r3, #3]
}
   17990:	bf00      	nop
   17992:	3710      	adds	r7, #16
   17994:	46bd      	mov	sp, r7
   17996:	bd80      	pop	{r7, pc}

00017998 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17998:	b480      	push	{r7}
   1799a:	b085      	sub	sp, #20
   1799c:	af00      	add	r7, sp, #0
   1799e:	60f8      	str	r0, [r7, #12]
   179a0:	60b9      	str	r1, [r7, #8]
   179a2:	4613      	mov	r3, r2
   179a4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   179a6:	68bb      	ldr	r3, [r7, #8]
   179a8:	1c5a      	adds	r2, r3, #1
   179aa:	60ba      	str	r2, [r7, #8]
   179ac:	781a      	ldrb	r2, [r3, #0]
   179ae:	68fb      	ldr	r3, [r7, #12]
   179b0:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   179b2:	68fb      	ldr	r3, [r7, #12]
   179b4:	791a      	ldrb	r2, [r3, #4]
   179b6:	68fb      	ldr	r3, [r7, #12]
   179b8:	70da      	strb	r2, [r3, #3]
}
   179ba:	bf00      	nop
   179bc:	3714      	adds	r7, #20
   179be:	46bd      	mov	sp, r7
   179c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   179c4:	4770      	bx	lr

000179c6 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   179c6:	b480      	push	{r7}
   179c8:	b085      	sub	sp, #20
   179ca:	af00      	add	r7, sp, #0
   179cc:	60f8      	str	r0, [r7, #12]
   179ce:	60b9      	str	r1, [r7, #8]
   179d0:	4613      	mov	r3, r2
   179d2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   179d4:	68bb      	ldr	r3, [r7, #8]
   179d6:	1c5a      	adds	r2, r3, #1
   179d8:	60ba      	str	r2, [r7, #8]
   179da:	781a      	ldrb	r2, [r3, #0]
   179dc:	68fb      	ldr	r3, [r7, #12]
   179de:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   179e0:	68bb      	ldr	r3, [r7, #8]
   179e2:	781b      	ldrb	r3, [r3, #0]
   179e4:	b29a      	uxth	r2, r3
   179e6:	68bb      	ldr	r3, [r7, #8]
   179e8:	3301      	adds	r3, #1
   179ea:	781b      	ldrb	r3, [r3, #0]
   179ec:	b29b      	uxth	r3, r3
   179ee:	021b      	lsls	r3, r3, #8
   179f0:	b29b      	uxth	r3, r3
   179f2:	4413      	add	r3, r2
   179f4:	b29a      	uxth	r2, r3
   179f6:	68fb      	ldr	r3, [r7, #12]
   179f8:	80da      	strh	r2, [r3, #6]
   179fa:	68bb      	ldr	r3, [r7, #8]
   179fc:	3302      	adds	r3, #2
   179fe:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   17a00:	68fb      	ldr	r3, [r7, #12]
   17a02:	791a      	ldrb	r2, [r3, #4]
   17a04:	68fb      	ldr	r3, [r7, #12]
   17a06:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   17a08:	68fb      	ldr	r3, [r7, #12]
   17a0a:	88da      	ldrh	r2, [r3, #6]
   17a0c:	68fb      	ldr	r3, [r7, #12]
   17a0e:	801a      	strh	r2, [r3, #0]
}
   17a10:	bf00      	nop
   17a12:	3714      	adds	r7, #20
   17a14:	46bd      	mov	sp, r7
   17a16:	f85d 7b04 	ldr.w	r7, [sp], #4
   17a1a:	4770      	bx	lr

00017a1c <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a1c:	b480      	push	{r7}
   17a1e:	b085      	sub	sp, #20
   17a20:	af00      	add	r7, sp, #0
   17a22:	60f8      	str	r0, [r7, #12]
   17a24:	60b9      	str	r1, [r7, #8]
   17a26:	4613      	mov	r3, r2
   17a28:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   17a2a:	68bb      	ldr	r3, [r7, #8]
   17a2c:	1c5a      	adds	r2, r3, #1
   17a2e:	60ba      	str	r2, [r7, #8]
   17a30:	781a      	ldrb	r2, [r3, #0]
   17a32:	68fb      	ldr	r3, [r7, #12]
   17a34:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   17a36:	68bb      	ldr	r3, [r7, #8]
   17a38:	781b      	ldrb	r3, [r3, #0]
   17a3a:	b29a      	uxth	r2, r3
   17a3c:	68bb      	ldr	r3, [r7, #8]
   17a3e:	3301      	adds	r3, #1
   17a40:	781b      	ldrb	r3, [r3, #0]
   17a42:	b29b      	uxth	r3, r3
   17a44:	021b      	lsls	r3, r3, #8
   17a46:	b29b      	uxth	r3, r3
   17a48:	4413      	add	r3, r2
   17a4a:	b29a      	uxth	r2, r3
   17a4c:	68fb      	ldr	r3, [r7, #12]
   17a4e:	80da      	strh	r2, [r3, #6]
   17a50:	68bb      	ldr	r3, [r7, #8]
   17a52:	3302      	adds	r3, #2
   17a54:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   17a56:	68fb      	ldr	r3, [r7, #12]
   17a58:	791a      	ldrb	r2, [r3, #4]
   17a5a:	68fb      	ldr	r3, [r7, #12]
   17a5c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   17a5e:	68fb      	ldr	r3, [r7, #12]
   17a60:	88da      	ldrh	r2, [r3, #6]
   17a62:	68fb      	ldr	r3, [r7, #12]
   17a64:	801a      	strh	r2, [r3, #0]
}
   17a66:	bf00      	nop
   17a68:	3714      	adds	r7, #20
   17a6a:	46bd      	mov	sp, r7
   17a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17a70:	4770      	bx	lr

00017a72 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17a72:	b480      	push	{r7}
   17a74:	b085      	sub	sp, #20
   17a76:	af00      	add	r7, sp, #0
   17a78:	60f8      	str	r0, [r7, #12]
   17a7a:	60b9      	str	r1, [r7, #8]
   17a7c:	4613      	mov	r3, r2
   17a7e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   17a80:	68bb      	ldr	r3, [r7, #8]
   17a82:	1c5a      	adds	r2, r3, #1
   17a84:	60ba      	str	r2, [r7, #8]
   17a86:	781a      	ldrb	r2, [r3, #0]
   17a88:	68fb      	ldr	r3, [r7, #12]
   17a8a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   17a8c:	68bb      	ldr	r3, [r7, #8]
   17a8e:	781b      	ldrb	r3, [r3, #0]
   17a90:	b29a      	uxth	r2, r3
   17a92:	68bb      	ldr	r3, [r7, #8]
   17a94:	3301      	adds	r3, #1
   17a96:	781b      	ldrb	r3, [r3, #0]
   17a98:	b29b      	uxth	r3, r3
   17a9a:	021b      	lsls	r3, r3, #8
   17a9c:	b29b      	uxth	r3, r3
   17a9e:	4413      	add	r3, r2
   17aa0:	b29a      	uxth	r2, r3
   17aa2:	68fb      	ldr	r3, [r7, #12]
   17aa4:	80da      	strh	r2, [r3, #6]
   17aa6:	68bb      	ldr	r3, [r7, #8]
   17aa8:	3302      	adds	r3, #2
   17aaa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   17aac:	68bb      	ldr	r3, [r7, #8]
   17aae:	781b      	ldrb	r3, [r3, #0]
   17ab0:	b29a      	uxth	r2, r3
   17ab2:	68bb      	ldr	r3, [r7, #8]
   17ab4:	3301      	adds	r3, #1
   17ab6:	781b      	ldrb	r3, [r3, #0]
   17ab8:	b29b      	uxth	r3, r3
   17aba:	021b      	lsls	r3, r3, #8
   17abc:	b29b      	uxth	r3, r3
   17abe:	4413      	add	r3, r2
   17ac0:	b29a      	uxth	r2, r3
   17ac2:	68fb      	ldr	r3, [r7, #12]
   17ac4:	811a      	strh	r2, [r3, #8]
   17ac6:	68bb      	ldr	r3, [r7, #8]
   17ac8:	3302      	adds	r3, #2
   17aca:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   17acc:	68fb      	ldr	r3, [r7, #12]
   17ace:	791a      	ldrb	r2, [r3, #4]
   17ad0:	68fb      	ldr	r3, [r7, #12]
   17ad2:	70da      	strb	r2, [r3, #3]
}
   17ad4:	bf00      	nop
   17ad6:	3714      	adds	r7, #20
   17ad8:	46bd      	mov	sp, r7
   17ada:	f85d 7b04 	ldr.w	r7, [sp], #4
   17ade:	4770      	bx	lr

00017ae0 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17ae0:	b480      	push	{r7}
   17ae2:	b085      	sub	sp, #20
   17ae4:	af00      	add	r7, sp, #0
   17ae6:	60f8      	str	r0, [r7, #12]
   17ae8:	60b9      	str	r1, [r7, #8]
   17aea:	4613      	mov	r3, r2
   17aec:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   17aee:	68bb      	ldr	r3, [r7, #8]
   17af0:	1c5a      	adds	r2, r3, #1
   17af2:	60ba      	str	r2, [r7, #8]
   17af4:	781a      	ldrb	r2, [r3, #0]
   17af6:	68fb      	ldr	r3, [r7, #12]
   17af8:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   17afa:	68fb      	ldr	r3, [r7, #12]
   17afc:	791a      	ldrb	r2, [r3, #4]
   17afe:	68fb      	ldr	r3, [r7, #12]
   17b00:	70da      	strb	r2, [r3, #3]
}
   17b02:	bf00      	nop
   17b04:	3714      	adds	r7, #20
   17b06:	46bd      	mov	sp, r7
   17b08:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b0c:	4770      	bx	lr

00017b0e <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17b0e:	b480      	push	{r7}
   17b10:	b085      	sub	sp, #20
   17b12:	af00      	add	r7, sp, #0
   17b14:	60f8      	str	r0, [r7, #12]
   17b16:	60b9      	str	r1, [r7, #8]
   17b18:	4613      	mov	r3, r2
   17b1a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   17b1c:	68bb      	ldr	r3, [r7, #8]
   17b1e:	1c5a      	adds	r2, r3, #1
   17b20:	60ba      	str	r2, [r7, #8]
   17b22:	781a      	ldrb	r2, [r3, #0]
   17b24:	68fb      	ldr	r3, [r7, #12]
   17b26:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   17b28:	68bb      	ldr	r3, [r7, #8]
   17b2a:	781b      	ldrb	r3, [r3, #0]
   17b2c:	b29a      	uxth	r2, r3
   17b2e:	68bb      	ldr	r3, [r7, #8]
   17b30:	3301      	adds	r3, #1
   17b32:	781b      	ldrb	r3, [r3, #0]
   17b34:	b29b      	uxth	r3, r3
   17b36:	021b      	lsls	r3, r3, #8
   17b38:	b29b      	uxth	r3, r3
   17b3a:	4413      	add	r3, r2
   17b3c:	b29a      	uxth	r2, r3
   17b3e:	68fb      	ldr	r3, [r7, #12]
   17b40:	80da      	strh	r2, [r3, #6]
   17b42:	68bb      	ldr	r3, [r7, #8]
   17b44:	3302      	adds	r3, #2
   17b46:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   17b48:	68fb      	ldr	r3, [r7, #12]
   17b4a:	791a      	ldrb	r2, [r3, #4]
   17b4c:	68fb      	ldr	r3, [r7, #12]
   17b4e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   17b50:	68fb      	ldr	r3, [r7, #12]
   17b52:	88da      	ldrh	r2, [r3, #6]
   17b54:	68fb      	ldr	r3, [r7, #12]
   17b56:	801a      	strh	r2, [r3, #0]
}
   17b58:	bf00      	nop
   17b5a:	3714      	adds	r7, #20
   17b5c:	46bd      	mov	sp, r7
   17b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17b62:	4770      	bx	lr

00017b64 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17b64:	b480      	push	{r7}
   17b66:	b085      	sub	sp, #20
   17b68:	af00      	add	r7, sp, #0
   17b6a:	60f8      	str	r0, [r7, #12]
   17b6c:	60b9      	str	r1, [r7, #8]
   17b6e:	4613      	mov	r3, r2
   17b70:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   17b72:	68bb      	ldr	r3, [r7, #8]
   17b74:	1c5a      	adds	r2, r3, #1
   17b76:	60ba      	str	r2, [r7, #8]
   17b78:	781a      	ldrb	r2, [r3, #0]
   17b7a:	68fb      	ldr	r3, [r7, #12]
   17b7c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   17b7e:	68bb      	ldr	r3, [r7, #8]
   17b80:	781b      	ldrb	r3, [r3, #0]
   17b82:	b29a      	uxth	r2, r3
   17b84:	68bb      	ldr	r3, [r7, #8]
   17b86:	3301      	adds	r3, #1
   17b88:	781b      	ldrb	r3, [r3, #0]
   17b8a:	b29b      	uxth	r3, r3
   17b8c:	021b      	lsls	r3, r3, #8
   17b8e:	b29b      	uxth	r3, r3
   17b90:	4413      	add	r3, r2
   17b92:	b29a      	uxth	r2, r3
   17b94:	68fb      	ldr	r3, [r7, #12]
   17b96:	80da      	strh	r2, [r3, #6]
   17b98:	68bb      	ldr	r3, [r7, #8]
   17b9a:	3302      	adds	r3, #2
   17b9c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   17b9e:	68bb      	ldr	r3, [r7, #8]
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	b29a      	uxth	r2, r3
   17ba4:	68bb      	ldr	r3, [r7, #8]
   17ba6:	3301      	adds	r3, #1
   17ba8:	781b      	ldrb	r3, [r3, #0]
   17baa:	b29b      	uxth	r3, r3
   17bac:	021b      	lsls	r3, r3, #8
   17bae:	b29b      	uxth	r3, r3
   17bb0:	4413      	add	r3, r2
   17bb2:	b29a      	uxth	r2, r3
   17bb4:	68fb      	ldr	r3, [r7, #12]
   17bb6:	811a      	strh	r2, [r3, #8]
   17bb8:	68bb      	ldr	r3, [r7, #8]
   17bba:	3302      	adds	r3, #2
   17bbc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   17bbe:	68bb      	ldr	r3, [r7, #8]
   17bc0:	781b      	ldrb	r3, [r3, #0]
   17bc2:	b29a      	uxth	r2, r3
   17bc4:	68bb      	ldr	r3, [r7, #8]
   17bc6:	3301      	adds	r3, #1
   17bc8:	781b      	ldrb	r3, [r3, #0]
   17bca:	b29b      	uxth	r3, r3
   17bcc:	021b      	lsls	r3, r3, #8
   17bce:	b29b      	uxth	r3, r3
   17bd0:	4413      	add	r3, r2
   17bd2:	b29a      	uxth	r2, r3
   17bd4:	68fb      	ldr	r3, [r7, #12]
   17bd6:	815a      	strh	r2, [r3, #10]
   17bd8:	68bb      	ldr	r3, [r7, #8]
   17bda:	3302      	adds	r3, #2
   17bdc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   17bde:	68bb      	ldr	r3, [r7, #8]
   17be0:	781b      	ldrb	r3, [r3, #0]
   17be2:	b29a      	uxth	r2, r3
   17be4:	68bb      	ldr	r3, [r7, #8]
   17be6:	3301      	adds	r3, #1
   17be8:	781b      	ldrb	r3, [r3, #0]
   17bea:	b29b      	uxth	r3, r3
   17bec:	021b      	lsls	r3, r3, #8
   17bee:	b29b      	uxth	r3, r3
   17bf0:	4413      	add	r3, r2
   17bf2:	b29a      	uxth	r2, r3
   17bf4:	68fb      	ldr	r3, [r7, #12]
   17bf6:	819a      	strh	r2, [r3, #12]
   17bf8:	68bb      	ldr	r3, [r7, #8]
   17bfa:	3302      	adds	r3, #2
   17bfc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   17bfe:	68fb      	ldr	r3, [r7, #12]
   17c00:	791a      	ldrb	r2, [r3, #4]
   17c02:	68fb      	ldr	r3, [r7, #12]
   17c04:	70da      	strb	r2, [r3, #3]
}
   17c06:	bf00      	nop
   17c08:	3714      	adds	r7, #20
   17c0a:	46bd      	mov	sp, r7
   17c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17c10:	4770      	bx	lr

00017c12 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17c12:	b480      	push	{r7}
   17c14:	b085      	sub	sp, #20
   17c16:	af00      	add	r7, sp, #0
   17c18:	60f8      	str	r0, [r7, #12]
   17c1a:	60b9      	str	r1, [r7, #8]
   17c1c:	4613      	mov	r3, r2
   17c1e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   17c20:	68bb      	ldr	r3, [r7, #8]
   17c22:	781b      	ldrb	r3, [r3, #0]
   17c24:	b29a      	uxth	r2, r3
   17c26:	68bb      	ldr	r3, [r7, #8]
   17c28:	3301      	adds	r3, #1
   17c2a:	781b      	ldrb	r3, [r3, #0]
   17c2c:	b29b      	uxth	r3, r3
   17c2e:	021b      	lsls	r3, r3, #8
   17c30:	b29b      	uxth	r3, r3
   17c32:	4413      	add	r3, r2
   17c34:	b29a      	uxth	r2, r3
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	809a      	strh	r2, [r3, #4]
   17c3a:	68bb      	ldr	r3, [r7, #8]
   17c3c:	3302      	adds	r3, #2
   17c3e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   17c40:	68bb      	ldr	r3, [r7, #8]
   17c42:	781b      	ldrb	r3, [r3, #0]
   17c44:	b29a      	uxth	r2, r3
   17c46:	68bb      	ldr	r3, [r7, #8]
   17c48:	3301      	adds	r3, #1
   17c4a:	781b      	ldrb	r3, [r3, #0]
   17c4c:	b29b      	uxth	r3, r3
   17c4e:	021b      	lsls	r3, r3, #8
   17c50:	b29b      	uxth	r3, r3
   17c52:	4413      	add	r3, r2
   17c54:	b29a      	uxth	r2, r3
   17c56:	68fb      	ldr	r3, [r7, #12]
   17c58:	80da      	strh	r2, [r3, #6]
   17c5a:	68bb      	ldr	r3, [r7, #8]
   17c5c:	3302      	adds	r3, #2
   17c5e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   17c60:	68bb      	ldr	r3, [r7, #8]
   17c62:	781b      	ldrb	r3, [r3, #0]
   17c64:	b29a      	uxth	r2, r3
   17c66:	68bb      	ldr	r3, [r7, #8]
   17c68:	3301      	adds	r3, #1
   17c6a:	781b      	ldrb	r3, [r3, #0]
   17c6c:	b29b      	uxth	r3, r3
   17c6e:	021b      	lsls	r3, r3, #8
   17c70:	b29b      	uxth	r3, r3
   17c72:	4413      	add	r3, r2
   17c74:	b29a      	uxth	r2, r3
   17c76:	68fb      	ldr	r3, [r7, #12]
   17c78:	811a      	strh	r2, [r3, #8]
   17c7a:	68bb      	ldr	r3, [r7, #8]
   17c7c:	3302      	adds	r3, #2
   17c7e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   17c80:	68bb      	ldr	r3, [r7, #8]
   17c82:	781b      	ldrb	r3, [r3, #0]
   17c84:	b29a      	uxth	r2, r3
   17c86:	68bb      	ldr	r3, [r7, #8]
   17c88:	3301      	adds	r3, #1
   17c8a:	781b      	ldrb	r3, [r3, #0]
   17c8c:	b29b      	uxth	r3, r3
   17c8e:	021b      	lsls	r3, r3, #8
   17c90:	b29b      	uxth	r3, r3
   17c92:	4413      	add	r3, r2
   17c94:	b29a      	uxth	r2, r3
   17c96:	68fb      	ldr	r3, [r7, #12]
   17c98:	815a      	strh	r2, [r3, #10]
   17c9a:	68bb      	ldr	r3, [r7, #8]
   17c9c:	3302      	adds	r3, #2
   17c9e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   17ca0:	68bb      	ldr	r3, [r7, #8]
   17ca2:	781b      	ldrb	r3, [r3, #0]
   17ca4:	b29a      	uxth	r2, r3
   17ca6:	68bb      	ldr	r3, [r7, #8]
   17ca8:	3301      	adds	r3, #1
   17caa:	781b      	ldrb	r3, [r3, #0]
   17cac:	b29b      	uxth	r3, r3
   17cae:	021b      	lsls	r3, r3, #8
   17cb0:	b29b      	uxth	r3, r3
   17cb2:	4413      	add	r3, r2
   17cb4:	b29a      	uxth	r2, r3
   17cb6:	68fb      	ldr	r3, [r7, #12]
   17cb8:	819a      	strh	r2, [r3, #12]
   17cba:	68bb      	ldr	r3, [r7, #8]
   17cbc:	3302      	adds	r3, #2
   17cbe:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   17cc0:	68fb      	ldr	r3, [r7, #12]
   17cc2:	889a      	ldrh	r2, [r3, #4]
   17cc4:	68fb      	ldr	r3, [r7, #12]
   17cc6:	801a      	strh	r2, [r3, #0]
}
   17cc8:	bf00      	nop
   17cca:	3714      	adds	r7, #20
   17ccc:	46bd      	mov	sp, r7
   17cce:	f85d 7b04 	ldr.w	r7, [sp], #4
   17cd2:	4770      	bx	lr

00017cd4 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17cd4:	b480      	push	{r7}
   17cd6:	b085      	sub	sp, #20
   17cd8:	af00      	add	r7, sp, #0
   17cda:	60f8      	str	r0, [r7, #12]
   17cdc:	60b9      	str	r1, [r7, #8]
   17cde:	4613      	mov	r3, r2
   17ce0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   17ce2:	68bb      	ldr	r3, [r7, #8]
   17ce4:	781b      	ldrb	r3, [r3, #0]
   17ce6:	b29a      	uxth	r2, r3
   17ce8:	68bb      	ldr	r3, [r7, #8]
   17cea:	3301      	adds	r3, #1
   17cec:	781b      	ldrb	r3, [r3, #0]
   17cee:	b29b      	uxth	r3, r3
   17cf0:	021b      	lsls	r3, r3, #8
   17cf2:	b29b      	uxth	r3, r3
   17cf4:	4413      	add	r3, r2
   17cf6:	b29a      	uxth	r2, r3
   17cf8:	68fb      	ldr	r3, [r7, #12]
   17cfa:	809a      	strh	r2, [r3, #4]
   17cfc:	68bb      	ldr	r3, [r7, #8]
   17cfe:	3302      	adds	r3, #2
   17d00:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   17d02:	68bb      	ldr	r3, [r7, #8]
   17d04:	781b      	ldrb	r3, [r3, #0]
   17d06:	b29a      	uxth	r2, r3
   17d08:	68bb      	ldr	r3, [r7, #8]
   17d0a:	3301      	adds	r3, #1
   17d0c:	781b      	ldrb	r3, [r3, #0]
   17d0e:	b29b      	uxth	r3, r3
   17d10:	021b      	lsls	r3, r3, #8
   17d12:	b29b      	uxth	r3, r3
   17d14:	4413      	add	r3, r2
   17d16:	b29a      	uxth	r2, r3
   17d18:	68fb      	ldr	r3, [r7, #12]
   17d1a:	80da      	strh	r2, [r3, #6]
   17d1c:	68bb      	ldr	r3, [r7, #8]
   17d1e:	3302      	adds	r3, #2
   17d20:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   17d22:	68bb      	ldr	r3, [r7, #8]
   17d24:	781b      	ldrb	r3, [r3, #0]
   17d26:	b29a      	uxth	r2, r3
   17d28:	68bb      	ldr	r3, [r7, #8]
   17d2a:	3301      	adds	r3, #1
   17d2c:	781b      	ldrb	r3, [r3, #0]
   17d2e:	b29b      	uxth	r3, r3
   17d30:	021b      	lsls	r3, r3, #8
   17d32:	b29b      	uxth	r3, r3
   17d34:	4413      	add	r3, r2
   17d36:	b29a      	uxth	r2, r3
   17d38:	68fb      	ldr	r3, [r7, #12]
   17d3a:	811a      	strh	r2, [r3, #8]
   17d3c:	68bb      	ldr	r3, [r7, #8]
   17d3e:	3302      	adds	r3, #2
   17d40:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   17d42:	68bb      	ldr	r3, [r7, #8]
   17d44:	781b      	ldrb	r3, [r3, #0]
   17d46:	b29a      	uxth	r2, r3
   17d48:	68bb      	ldr	r3, [r7, #8]
   17d4a:	3301      	adds	r3, #1
   17d4c:	781b      	ldrb	r3, [r3, #0]
   17d4e:	b29b      	uxth	r3, r3
   17d50:	021b      	lsls	r3, r3, #8
   17d52:	b29b      	uxth	r3, r3
   17d54:	4413      	add	r3, r2
   17d56:	b29a      	uxth	r2, r3
   17d58:	68fb      	ldr	r3, [r7, #12]
   17d5a:	815a      	strh	r2, [r3, #10]
   17d5c:	68bb      	ldr	r3, [r7, #8]
   17d5e:	3302      	adds	r3, #2
   17d60:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   17d62:	68bb      	ldr	r3, [r7, #8]
   17d64:	781b      	ldrb	r3, [r3, #0]
   17d66:	b29a      	uxth	r2, r3
   17d68:	68bb      	ldr	r3, [r7, #8]
   17d6a:	3301      	adds	r3, #1
   17d6c:	781b      	ldrb	r3, [r3, #0]
   17d6e:	b29b      	uxth	r3, r3
   17d70:	021b      	lsls	r3, r3, #8
   17d72:	b29b      	uxth	r3, r3
   17d74:	4413      	add	r3, r2
   17d76:	b29a      	uxth	r2, r3
   17d78:	68fb      	ldr	r3, [r7, #12]
   17d7a:	819a      	strh	r2, [r3, #12]
   17d7c:	68bb      	ldr	r3, [r7, #8]
   17d7e:	3302      	adds	r3, #2
   17d80:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   17d82:	68fb      	ldr	r3, [r7, #12]
   17d84:	889a      	ldrh	r2, [r3, #4]
   17d86:	68fb      	ldr	r3, [r7, #12]
   17d88:	801a      	strh	r2, [r3, #0]
}
   17d8a:	bf00      	nop
   17d8c:	3714      	adds	r7, #20
   17d8e:	46bd      	mov	sp, r7
   17d90:	f85d 7b04 	ldr.w	r7, [sp], #4
   17d94:	4770      	bx	lr

00017d96 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17d96:	b580      	push	{r7, lr}
   17d98:	b084      	sub	sp, #16
   17d9a:	af00      	add	r7, sp, #0
   17d9c:	60f8      	str	r0, [r7, #12]
   17d9e:	60b9      	str	r1, [r7, #8]
   17da0:	4613      	mov	r3, r2
   17da2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   17da4:	68bb      	ldr	r3, [r7, #8]
   17da6:	1c5a      	adds	r2, r3, #1
   17da8:	60ba      	str	r2, [r7, #8]
   17daa:	781a      	ldrb	r2, [r3, #0]
   17dac:	68fb      	ldr	r3, [r7, #12]
   17dae:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   17db0:	68fb      	ldr	r3, [r7, #12]
   17db2:	3305      	adds	r3, #5
   17db4:	2240      	movs	r2, #64	; 0x40
   17db6:	68b9      	ldr	r1, [r7, #8]
   17db8:	4618      	mov	r0, r3
   17dba:	f7f4 f9d1 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   17dbe:	68fb      	ldr	r3, [r7, #12]
   17dc0:	791a      	ldrb	r2, [r3, #4]
   17dc2:	68fb      	ldr	r3, [r7, #12]
   17dc4:	70da      	strb	r2, [r3, #3]
}
   17dc6:	bf00      	nop
   17dc8:	3710      	adds	r7, #16
   17dca:	46bd      	mov	sp, r7
   17dcc:	bd80      	pop	{r7, pc}

00017dce <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17dce:	b580      	push	{r7, lr}
   17dd0:	b084      	sub	sp, #16
   17dd2:	af00      	add	r7, sp, #0
   17dd4:	60f8      	str	r0, [r7, #12]
   17dd6:	60b9      	str	r1, [r7, #8]
   17dd8:	4613      	mov	r3, r2
   17dda:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   17ddc:	68bb      	ldr	r3, [r7, #8]
   17dde:	1c5a      	adds	r2, r3, #1
   17de0:	60ba      	str	r2, [r7, #8]
   17de2:	781a      	ldrb	r2, [r3, #0]
   17de4:	68fb      	ldr	r3, [r7, #12]
   17de6:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   17de8:	68fb      	ldr	r3, [r7, #12]
   17dea:	3305      	adds	r3, #5
   17dec:	2220      	movs	r2, #32
   17dee:	68b9      	ldr	r1, [r7, #8]
   17df0:	4618      	mov	r0, r3
   17df2:	f7f4 f9b5 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   17df6:	68fb      	ldr	r3, [r7, #12]
   17df8:	791a      	ldrb	r2, [r3, #4]
   17dfa:	68fb      	ldr	r3, [r7, #12]
   17dfc:	70da      	strb	r2, [r3, #3]
}
   17dfe:	bf00      	nop
   17e00:	3710      	adds	r7, #16
   17e02:	46bd      	mov	sp, r7
   17e04:	bd80      	pop	{r7, pc}

00017e06 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17e06:	b480      	push	{r7}
   17e08:	b085      	sub	sp, #20
   17e0a:	af00      	add	r7, sp, #0
   17e0c:	60f8      	str	r0, [r7, #12]
   17e0e:	60b9      	str	r1, [r7, #8]
   17e10:	4613      	mov	r3, r2
   17e12:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   17e14:	68bb      	ldr	r3, [r7, #8]
   17e16:	1c5a      	adds	r2, r3, #1
   17e18:	60ba      	str	r2, [r7, #8]
   17e1a:	781a      	ldrb	r2, [r3, #0]
   17e1c:	68fb      	ldr	r3, [r7, #12]
   17e1e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   17e20:	68bb      	ldr	r3, [r7, #8]
   17e22:	781b      	ldrb	r3, [r3, #0]
   17e24:	b29a      	uxth	r2, r3
   17e26:	68bb      	ldr	r3, [r7, #8]
   17e28:	3301      	adds	r3, #1
   17e2a:	781b      	ldrb	r3, [r3, #0]
   17e2c:	b29b      	uxth	r3, r3
   17e2e:	021b      	lsls	r3, r3, #8
   17e30:	b29b      	uxth	r3, r3
   17e32:	4413      	add	r3, r2
   17e34:	b29a      	uxth	r2, r3
   17e36:	68fb      	ldr	r3, [r7, #12]
   17e38:	80da      	strh	r2, [r3, #6]
   17e3a:	68bb      	ldr	r3, [r7, #8]
   17e3c:	3302      	adds	r3, #2
   17e3e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   17e40:	68fb      	ldr	r3, [r7, #12]
   17e42:	791a      	ldrb	r2, [r3, #4]
   17e44:	68fb      	ldr	r3, [r7, #12]
   17e46:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   17e48:	68fb      	ldr	r3, [r7, #12]
   17e4a:	88da      	ldrh	r2, [r3, #6]
   17e4c:	68fb      	ldr	r3, [r7, #12]
   17e4e:	801a      	strh	r2, [r3, #0]
}
   17e50:	bf00      	nop
   17e52:	3714      	adds	r7, #20
   17e54:	46bd      	mov	sp, r7
   17e56:	f85d 7b04 	ldr.w	r7, [sp], #4
   17e5a:	4770      	bx	lr

00017e5c <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17e5c:	b480      	push	{r7}
   17e5e:	b085      	sub	sp, #20
   17e60:	af00      	add	r7, sp, #0
   17e62:	60f8      	str	r0, [r7, #12]
   17e64:	60b9      	str	r1, [r7, #8]
   17e66:	4613      	mov	r3, r2
   17e68:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   17e6a:	68bb      	ldr	r3, [r7, #8]
   17e6c:	781b      	ldrb	r3, [r3, #0]
   17e6e:	b29a      	uxth	r2, r3
   17e70:	68bb      	ldr	r3, [r7, #8]
   17e72:	3301      	adds	r3, #1
   17e74:	781b      	ldrb	r3, [r3, #0]
   17e76:	b29b      	uxth	r3, r3
   17e78:	021b      	lsls	r3, r3, #8
   17e7a:	b29b      	uxth	r3, r3
   17e7c:	4413      	add	r3, r2
   17e7e:	b29a      	uxth	r2, r3
   17e80:	68fb      	ldr	r3, [r7, #12]
   17e82:	809a      	strh	r2, [r3, #4]
   17e84:	68bb      	ldr	r3, [r7, #8]
   17e86:	3302      	adds	r3, #2
   17e88:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   17e8a:	68fb      	ldr	r3, [r7, #12]
   17e8c:	889a      	ldrh	r2, [r3, #4]
   17e8e:	68fb      	ldr	r3, [r7, #12]
   17e90:	801a      	strh	r2, [r3, #0]
}
   17e92:	bf00      	nop
   17e94:	3714      	adds	r7, #20
   17e96:	46bd      	mov	sp, r7
   17e98:	f85d 7b04 	ldr.w	r7, [sp], #4
   17e9c:	4770      	bx	lr

00017e9e <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17e9e:	b480      	push	{r7}
   17ea0:	b085      	sub	sp, #20
   17ea2:	af00      	add	r7, sp, #0
   17ea4:	60f8      	str	r0, [r7, #12]
   17ea6:	60b9      	str	r1, [r7, #8]
   17ea8:	4613      	mov	r3, r2
   17eaa:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   17eac:	68bb      	ldr	r3, [r7, #8]
   17eae:	1c5a      	adds	r2, r3, #1
   17eb0:	60ba      	str	r2, [r7, #8]
   17eb2:	781a      	ldrb	r2, [r3, #0]
   17eb4:	68fb      	ldr	r3, [r7, #12]
   17eb6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   17eb8:	68bb      	ldr	r3, [r7, #8]
   17eba:	781b      	ldrb	r3, [r3, #0]
   17ebc:	b29a      	uxth	r2, r3
   17ebe:	68bb      	ldr	r3, [r7, #8]
   17ec0:	3301      	adds	r3, #1
   17ec2:	781b      	ldrb	r3, [r3, #0]
   17ec4:	b29b      	uxth	r3, r3
   17ec6:	021b      	lsls	r3, r3, #8
   17ec8:	b29b      	uxth	r3, r3
   17eca:	4413      	add	r3, r2
   17ecc:	b29a      	uxth	r2, r3
   17ece:	68fb      	ldr	r3, [r7, #12]
   17ed0:	80da      	strh	r2, [r3, #6]
   17ed2:	68bb      	ldr	r3, [r7, #8]
   17ed4:	3302      	adds	r3, #2
   17ed6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   17ed8:	68bb      	ldr	r3, [r7, #8]
   17eda:	1c5a      	adds	r2, r3, #1
   17edc:	60ba      	str	r2, [r7, #8]
   17ede:	781a      	ldrb	r2, [r3, #0]
   17ee0:	68fb      	ldr	r3, [r7, #12]
   17ee2:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   17ee4:	68bb      	ldr	r3, [r7, #8]
   17ee6:	1c5a      	adds	r2, r3, #1
   17ee8:	60ba      	str	r2, [r7, #8]
   17eea:	781a      	ldrb	r2, [r3, #0]
   17eec:	68fb      	ldr	r3, [r7, #12]
   17eee:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   17ef0:	68fb      	ldr	r3, [r7, #12]
   17ef2:	791a      	ldrb	r2, [r3, #4]
   17ef4:	68fb      	ldr	r3, [r7, #12]
   17ef6:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   17ef8:	68fb      	ldr	r3, [r7, #12]
   17efa:	88da      	ldrh	r2, [r3, #6]
   17efc:	68fb      	ldr	r3, [r7, #12]
   17efe:	801a      	strh	r2, [r3, #0]
}
   17f00:	bf00      	nop
   17f02:	3714      	adds	r7, #20
   17f04:	46bd      	mov	sp, r7
   17f06:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f0a:	4770      	bx	lr

00017f0c <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f0c:	b480      	push	{r7}
   17f0e:	b085      	sub	sp, #20
   17f10:	af00      	add	r7, sp, #0
   17f12:	60f8      	str	r0, [r7, #12]
   17f14:	60b9      	str	r1, [r7, #8]
   17f16:	4613      	mov	r3, r2
   17f18:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   17f1a:	68bb      	ldr	r3, [r7, #8]
   17f1c:	1c5a      	adds	r2, r3, #1
   17f1e:	60ba      	str	r2, [r7, #8]
   17f20:	781a      	ldrb	r2, [r3, #0]
   17f22:	68fb      	ldr	r3, [r7, #12]
   17f24:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   17f26:	68fb      	ldr	r3, [r7, #12]
   17f28:	791a      	ldrb	r2, [r3, #4]
   17f2a:	68fb      	ldr	r3, [r7, #12]
   17f2c:	70da      	strb	r2, [r3, #3]
}
   17f2e:	bf00      	nop
   17f30:	3714      	adds	r7, #20
   17f32:	46bd      	mov	sp, r7
   17f34:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f38:	4770      	bx	lr

00017f3a <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   17f3a:	b480      	push	{r7}
   17f3c:	b085      	sub	sp, #20
   17f3e:	af00      	add	r7, sp, #0
   17f40:	60f8      	str	r0, [r7, #12]
   17f42:	60b9      	str	r1, [r7, #8]
   17f44:	4613      	mov	r3, r2
   17f46:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   17f48:	68bb      	ldr	r3, [r7, #8]
   17f4a:	1c5a      	adds	r2, r3, #1
   17f4c:	60ba      	str	r2, [r7, #8]
   17f4e:	781a      	ldrb	r2, [r3, #0]
   17f50:	68fb      	ldr	r3, [r7, #12]
   17f52:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   17f54:	68bb      	ldr	r3, [r7, #8]
   17f56:	781b      	ldrb	r3, [r3, #0]
   17f58:	b29a      	uxth	r2, r3
   17f5a:	68bb      	ldr	r3, [r7, #8]
   17f5c:	3301      	adds	r3, #1
   17f5e:	781b      	ldrb	r3, [r3, #0]
   17f60:	b29b      	uxth	r3, r3
   17f62:	021b      	lsls	r3, r3, #8
   17f64:	b29b      	uxth	r3, r3
   17f66:	4413      	add	r3, r2
   17f68:	b29a      	uxth	r2, r3
   17f6a:	68fb      	ldr	r3, [r7, #12]
   17f6c:	80da      	strh	r2, [r3, #6]
   17f6e:	68bb      	ldr	r3, [r7, #8]
   17f70:	3302      	adds	r3, #2
   17f72:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   17f74:	68bb      	ldr	r3, [r7, #8]
   17f76:	1c5a      	adds	r2, r3, #1
   17f78:	60ba      	str	r2, [r7, #8]
   17f7a:	781a      	ldrb	r2, [r3, #0]
   17f7c:	68fb      	ldr	r3, [r7, #12]
   17f7e:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   17f80:	68bb      	ldr	r3, [r7, #8]
   17f82:	1c5a      	adds	r2, r3, #1
   17f84:	60ba      	str	r2, [r7, #8]
   17f86:	781a      	ldrb	r2, [r3, #0]
   17f88:	68fb      	ldr	r3, [r7, #12]
   17f8a:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   17f8c:	68fb      	ldr	r3, [r7, #12]
   17f8e:	791a      	ldrb	r2, [r3, #4]
   17f90:	68fb      	ldr	r3, [r7, #12]
   17f92:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   17f94:	68fb      	ldr	r3, [r7, #12]
   17f96:	88da      	ldrh	r2, [r3, #6]
   17f98:	68fb      	ldr	r3, [r7, #12]
   17f9a:	801a      	strh	r2, [r3, #0]
}
   17f9c:	bf00      	nop
   17f9e:	3714      	adds	r7, #20
   17fa0:	46bd      	mov	sp, r7
   17fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   17fa6:	4770      	bx	lr

00017fa8 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   17fa8:	b580      	push	{r7, lr}
   17faa:	b084      	sub	sp, #16
   17fac:	af00      	add	r7, sp, #0
   17fae:	6078      	str	r0, [r7, #4]
   17fb0:	460b      	mov	r3, r1
   17fb2:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   17fb4:	687b      	ldr	r3, [r7, #4]
   17fb6:	1c5a      	adds	r2, r3, #1
   17fb8:	607a      	str	r2, [r7, #4]
   17fba:	781b      	ldrb	r3, [r3, #0]
   17fbc:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   17fbe:	7bfb      	ldrb	r3, [r7, #15]
   17fc0:	2b0f      	cmp	r3, #15
   17fc2:	d862      	bhi.n	1808a <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   17fc4:	203b      	movs	r0, #59	; 0x3b
   17fc6:	f002 fc8d 	bl	1a8e4 <WsfBufAlloc>
   17fca:	60b8      	str	r0, [r7, #8]
   17fcc:	68bb      	ldr	r3, [r7, #8]
   17fce:	2b00      	cmp	r3, #0
   17fd0:	d05c      	beq.n	1808c <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   17fd2:	e04f      	b.n	18074 <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   17fd4:	687b      	ldr	r3, [r7, #4]
   17fd6:	1c5a      	adds	r2, r3, #1
   17fd8:	607a      	str	r2, [r7, #4]
   17fda:	781a      	ldrb	r2, [r3, #0]
   17fdc:	68bb      	ldr	r3, [r7, #8]
   17fde:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   17fe0:	687b      	ldr	r3, [r7, #4]
   17fe2:	1c5a      	adds	r2, r3, #1
   17fe4:	607a      	str	r2, [r7, #4]
   17fe6:	781a      	ldrb	r2, [r3, #0]
   17fe8:	68bb      	ldr	r3, [r7, #8]
   17fea:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   17fec:	68bb      	ldr	r3, [r7, #8]
   17fee:	330c      	adds	r3, #12
   17ff0:	6879      	ldr	r1, [r7, #4]
   17ff2:	4618      	mov	r0, r3
   17ff4:	f007 fe2d 	bl	1fc52 <BdaCpy>
   17ff8:	687b      	ldr	r3, [r7, #4]
   17ffa:	3306      	adds	r3, #6
   17ffc:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   17ffe:	687b      	ldr	r3, [r7, #4]
   18000:	1c5a      	adds	r2, r3, #1
   18002:	607a      	str	r2, [r7, #4]
   18004:	781a      	ldrb	r2, [r3, #0]
   18006:	68bb      	ldr	r3, [r7, #8]
   18008:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   1800a:	68bb      	ldr	r3, [r7, #8]
   1800c:	7a1b      	ldrb	r3, [r3, #8]
   1800e:	2b1f      	cmp	r3, #31
   18010:	d836      	bhi.n	18080 <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   18012:	68bb      	ldr	r3, [r7, #8]
   18014:	f103 021c 	add.w	r2, r3, #28
   18018:	68bb      	ldr	r3, [r7, #8]
   1801a:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   1801c:	68bb      	ldr	r3, [r7, #8]
   1801e:	6858      	ldr	r0, [r3, #4]
   18020:	68bb      	ldr	r3, [r7, #8]
   18022:	7a1b      	ldrb	r3, [r3, #8]
   18024:	461a      	mov	r2, r3
   18026:	6879      	ldr	r1, [r7, #4]
   18028:	f7f4 f89a 	bl	c160 <memcpy>
      p += pMsg->len;
   1802c:	68bb      	ldr	r3, [r7, #8]
   1802e:	7a1b      	ldrb	r3, [r3, #8]
   18030:	461a      	mov	r2, r3
   18032:	687b      	ldr	r3, [r7, #4]
   18034:	4413      	add	r3, r2
   18036:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   18038:	687b      	ldr	r3, [r7, #4]
   1803a:	1c5a      	adds	r2, r3, #1
   1803c:	607a      	str	r2, [r7, #4]
   1803e:	781b      	ldrb	r3, [r3, #0]
   18040:	b25a      	sxtb	r2, r3
   18042:	68bb      	ldr	r3, [r7, #8]
   18044:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   18046:	68bb      	ldr	r3, [r7, #8]
   18048:	2200      	movs	r2, #0
   1804a:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   1804c:	68bb      	ldr	r3, [r7, #8]
   1804e:	3313      	adds	r3, #19
   18050:	2206      	movs	r2, #6
   18052:	2100      	movs	r1, #0
   18054:	4618      	mov	r0, r3
   18056:	f7f4 f981 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   1805a:	68bb      	ldr	r3, [r7, #8]
   1805c:	2200      	movs	r2, #0
   1805e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   18060:	68bb      	ldr	r3, [r7, #8]
   18062:	2206      	movs	r2, #6
   18064:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18066:	68bb      	ldr	r3, [r7, #8]
   18068:	2200      	movs	r2, #0
   1806a:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1806c:	4b09      	ldr	r3, [pc, #36]	; (18094 <hciEvtProcessLeAdvReport+0xec>)
   1806e:	689b      	ldr	r3, [r3, #8]
   18070:	68b8      	ldr	r0, [r7, #8]
   18072:	4798      	blx	r3
    while (i-- > 0)
   18074:	7bfb      	ldrb	r3, [r7, #15]
   18076:	1e5a      	subs	r2, r3, #1
   18078:	73fa      	strb	r2, [r7, #15]
   1807a:	2b00      	cmp	r3, #0
   1807c:	d1aa      	bne.n	17fd4 <hciEvtProcessLeAdvReport+0x2c>
   1807e:	e000      	b.n	18082 <hciEvtProcessLeAdvReport+0xda>
        break;
   18080:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   18082:	68b8      	ldr	r0, [r7, #8]
   18084:	f002 fc6e 	bl	1a964 <WsfBufFree>
   18088:	e000      	b.n	1808c <hciEvtProcessLeAdvReport+0xe4>
    return;
   1808a:	bf00      	nop
  }
}
   1808c:	3710      	adds	r7, #16
   1808e:	46bd      	mov	sp, r7
   18090:	bd80      	pop	{r7, pc}
   18092:	bf00      	nop
   18094:	10044390 	.word	0x10044390

00018098 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   18098:	b580      	push	{r7, lr}
   1809a:	b086      	sub	sp, #24
   1809c:	af00      	add	r7, sp, #0
   1809e:	6078      	str	r0, [r7, #4]
   180a0:	460b      	mov	r3, r1
   180a2:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   180a4:	687b      	ldr	r3, [r7, #4]
   180a6:	781b      	ldrb	r3, [r3, #0]
   180a8:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   180aa:	7dfb      	ldrb	r3, [r7, #23]
   180ac:	2b0f      	cmp	r3, #15
   180ae:	f200 80c4 	bhi.w	1823a <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   180b2:	687b      	ldr	r3, [r7, #4]
   180b4:	3301      	adds	r3, #1
   180b6:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   180b8:	2300      	movs	r3, #0
   180ba:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   180bc:	e011      	b.n	180e2 <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   180be:	693b      	ldr	r3, [r7, #16]
   180c0:	3317      	adds	r3, #23
   180c2:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   180c4:	693b      	ldr	r3, [r7, #16]
   180c6:	1c5a      	adds	r2, r3, #1
   180c8:	613a      	str	r2, [r7, #16]
   180ca:	781b      	ldrb	r3, [r3, #0]
   180cc:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   180ce:	7bbb      	ldrb	r3, [r7, #14]
   180d0:	693a      	ldr	r2, [r7, #16]
   180d2:	4413      	add	r3, r2
   180d4:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   180d6:	7bba      	ldrb	r2, [r7, #14]
   180d8:	7bfb      	ldrb	r3, [r7, #15]
   180da:	429a      	cmp	r2, r3
   180dc:	d901      	bls.n	180e2 <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   180de:	7bbb      	ldrb	r3, [r7, #14]
   180e0:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   180e2:	7dfb      	ldrb	r3, [r7, #23]
   180e4:	1e5a      	subs	r2, r3, #1
   180e6:	75fa      	strb	r2, [r7, #23]
   180e8:	2b00      	cmp	r3, #0
   180ea:	d1e8      	bne.n	180be <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   180ec:	7bfb      	ldrb	r3, [r7, #15]
   180ee:	b29b      	uxth	r3, r3
   180f0:	3320      	adds	r3, #32
   180f2:	b29b      	uxth	r3, r3
   180f4:	4618      	mov	r0, r3
   180f6:	f002 fbf5 	bl	1a8e4 <WsfBufAlloc>
   180fa:	60b8      	str	r0, [r7, #8]
   180fc:	68bb      	ldr	r3, [r7, #8]
   180fe:	2b00      	cmp	r3, #0
   18100:	f000 809c 	beq.w	1823c <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   18104:	687b      	ldr	r3, [r7, #4]
   18106:	1c5a      	adds	r2, r3, #1
   18108:	607a      	str	r2, [r7, #4]
   1810a:	781b      	ldrb	r3, [r3, #0]
   1810c:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   1810e:	e088      	b.n	18222 <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   18110:	687b      	ldr	r3, [r7, #4]
   18112:	781b      	ldrb	r3, [r3, #0]
   18114:	b29a      	uxth	r2, r3
   18116:	687b      	ldr	r3, [r7, #4]
   18118:	3301      	adds	r3, #1
   1811a:	781b      	ldrb	r3, [r3, #0]
   1811c:	b29b      	uxth	r3, r3
   1811e:	021b      	lsls	r3, r3, #8
   18120:	b29b      	uxth	r3, r3
   18122:	4413      	add	r3, r2
   18124:	b29a      	uxth	r2, r3
   18126:	68bb      	ldr	r3, [r7, #8]
   18128:	809a      	strh	r2, [r3, #4]
   1812a:	687b      	ldr	r3, [r7, #4]
   1812c:	3302      	adds	r3, #2
   1812e:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18130:	687b      	ldr	r3, [r7, #4]
   18132:	1c5a      	adds	r2, r3, #1
   18134:	607a      	str	r2, [r7, #4]
   18136:	781a      	ldrb	r2, [r3, #0]
   18138:	68bb      	ldr	r3, [r7, #8]
   1813a:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1813c:	68bb      	ldr	r3, [r7, #8]
   1813e:	3307      	adds	r3, #7
   18140:	6879      	ldr	r1, [r7, #4]
   18142:	4618      	mov	r0, r3
   18144:	f007 fd85 	bl	1fc52 <BdaCpy>
   18148:	687b      	ldr	r3, [r7, #4]
   1814a:	3306      	adds	r3, #6
   1814c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   1814e:	687b      	ldr	r3, [r7, #4]
   18150:	1c5a      	adds	r2, r3, #1
   18152:	607a      	str	r2, [r7, #4]
   18154:	781a      	ldrb	r2, [r3, #0]
   18156:	68bb      	ldr	r3, [r7, #8]
   18158:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   1815a:	687b      	ldr	r3, [r7, #4]
   1815c:	1c5a      	adds	r2, r3, #1
   1815e:	607a      	str	r2, [r7, #4]
   18160:	781a      	ldrb	r2, [r3, #0]
   18162:	68bb      	ldr	r3, [r7, #8]
   18164:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   18166:	687b      	ldr	r3, [r7, #4]
   18168:	1c5a      	adds	r2, r3, #1
   1816a:	607a      	str	r2, [r7, #4]
   1816c:	781a      	ldrb	r2, [r3, #0]
   1816e:	68bb      	ldr	r3, [r7, #8]
   18170:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   18172:	687b      	ldr	r3, [r7, #4]
   18174:	1c5a      	adds	r2, r3, #1
   18176:	607a      	str	r2, [r7, #4]
   18178:	781b      	ldrb	r3, [r3, #0]
   1817a:	b25a      	sxtb	r2, r3
   1817c:	68bb      	ldr	r3, [r7, #8]
   1817e:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   18180:	687b      	ldr	r3, [r7, #4]
   18182:	1c5a      	adds	r2, r3, #1
   18184:	607a      	str	r2, [r7, #4]
   18186:	781b      	ldrb	r3, [r3, #0]
   18188:	b25a      	sxtb	r2, r3
   1818a:	68bb      	ldr	r3, [r7, #8]
   1818c:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   1818e:	687b      	ldr	r3, [r7, #4]
   18190:	781b      	ldrb	r3, [r3, #0]
   18192:	b29a      	uxth	r2, r3
   18194:	687b      	ldr	r3, [r7, #4]
   18196:	3301      	adds	r3, #1
   18198:	781b      	ldrb	r3, [r3, #0]
   1819a:	b29b      	uxth	r3, r3
   1819c:	021b      	lsls	r3, r3, #8
   1819e:	b29b      	uxth	r3, r3
   181a0:	4413      	add	r3, r2
   181a2:	b29b      	uxth	r3, r3
   181a4:	b21a      	sxth	r2, r3
   181a6:	68bb      	ldr	r3, [r7, #8]
   181a8:	825a      	strh	r2, [r3, #18]
   181aa:	687b      	ldr	r3, [r7, #4]
   181ac:	3302      	adds	r3, #2
   181ae:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   181b0:	687b      	ldr	r3, [r7, #4]
   181b2:	1c5a      	adds	r2, r3, #1
   181b4:	607a      	str	r2, [r7, #4]
   181b6:	781a      	ldrb	r2, [r3, #0]
   181b8:	68bb      	ldr	r3, [r7, #8]
   181ba:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   181bc:	68bb      	ldr	r3, [r7, #8]
   181be:	3315      	adds	r3, #21
   181c0:	6879      	ldr	r1, [r7, #4]
   181c2:	4618      	mov	r0, r3
   181c4:	f007 fd45 	bl	1fc52 <BdaCpy>
   181c8:	687b      	ldr	r3, [r7, #4]
   181ca:	3306      	adds	r3, #6
   181cc:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   181ce:	687b      	ldr	r3, [r7, #4]
   181d0:	1c5a      	adds	r2, r3, #1
   181d2:	607a      	str	r2, [r7, #4]
   181d4:	781a      	ldrb	r2, [r3, #0]
   181d6:	68bb      	ldr	r3, [r7, #8]
   181d8:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   181da:	68bb      	ldr	r3, [r7, #8]
   181dc:	7edb      	ldrb	r3, [r3, #27]
   181de:	2be5      	cmp	r3, #229	; 0xe5
   181e0:	d826      	bhi.n	18230 <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   181e2:	68bb      	ldr	r3, [r7, #8]
   181e4:	f103 0220 	add.w	r2, r3, #32
   181e8:	68bb      	ldr	r3, [r7, #8]
   181ea:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   181ec:	68bb      	ldr	r3, [r7, #8]
   181ee:	69d8      	ldr	r0, [r3, #28]
   181f0:	68bb      	ldr	r3, [r7, #8]
   181f2:	7edb      	ldrb	r3, [r3, #27]
   181f4:	461a      	mov	r2, r3
   181f6:	6879      	ldr	r1, [r7, #4]
   181f8:	f7f3 ffb2 	bl	c160 <memcpy>
      p += pMsg->len;
   181fc:	68bb      	ldr	r3, [r7, #8]
   181fe:	7edb      	ldrb	r3, [r3, #27]
   18200:	461a      	mov	r2, r3
   18202:	687b      	ldr	r3, [r7, #4]
   18204:	4413      	add	r3, r2
   18206:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   18208:	68bb      	ldr	r3, [r7, #8]
   1820a:	2200      	movs	r2, #0
   1820c:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   1820e:	68bb      	ldr	r3, [r7, #8]
   18210:	222c      	movs	r2, #44	; 0x2c
   18212:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18214:	68bb      	ldr	r3, [r7, #8]
   18216:	2200      	movs	r2, #0
   18218:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1821a:	4b0a      	ldr	r3, [pc, #40]	; (18244 <hciEvtProcessLeExtAdvReport+0x1ac>)
   1821c:	689b      	ldr	r3, [r3, #8]
   1821e:	68b8      	ldr	r0, [r7, #8]
   18220:	4798      	blx	r3
    while (i-- > 0)
   18222:	7dfb      	ldrb	r3, [r7, #23]
   18224:	1e5a      	subs	r2, r3, #1
   18226:	75fa      	strb	r2, [r7, #23]
   18228:	2b00      	cmp	r3, #0
   1822a:	f47f af71 	bne.w	18110 <hciEvtProcessLeExtAdvReport+0x78>
   1822e:	e000      	b.n	18232 <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   18230:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   18232:	68b8      	ldr	r0, [r7, #8]
   18234:	f002 fb96 	bl	1a964 <WsfBufFree>
   18238:	e000      	b.n	1823c <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   1823a:	bf00      	nop
  }
}
   1823c:	3718      	adds	r7, #24
   1823e:	46bd      	mov	sp, r7
   18240:	bd80      	pop	{r7, pc}
   18242:	bf00      	nop
   18244:	10044390 	.word	0x10044390

00018248 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18248:	b480      	push	{r7}
   1824a:	b085      	sub	sp, #20
   1824c:	af00      	add	r7, sp, #0
   1824e:	60f8      	str	r0, [r7, #12]
   18250:	60b9      	str	r1, [r7, #8]
   18252:	4613      	mov	r3, r2
   18254:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   18256:	bf00      	nop
   18258:	3714      	adds	r7, #20
   1825a:	46bd      	mov	sp, r7
   1825c:	f85d 7b04 	ldr.w	r7, [sp], #4
   18260:	4770      	bx	lr

00018262 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18262:	b480      	push	{r7}
   18264:	b085      	sub	sp, #20
   18266:	af00      	add	r7, sp, #0
   18268:	60f8      	str	r0, [r7, #12]
   1826a:	60b9      	str	r1, [r7, #8]
   1826c:	4613      	mov	r3, r2
   1826e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   18270:	68bb      	ldr	r3, [r7, #8]
   18272:	1c5a      	adds	r2, r3, #1
   18274:	60ba      	str	r2, [r7, #8]
   18276:	781a      	ldrb	r2, [r3, #0]
   18278:	68fb      	ldr	r3, [r7, #12]
   1827a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   1827c:	68bb      	ldr	r3, [r7, #8]
   1827e:	1c5a      	adds	r2, r3, #1
   18280:	60ba      	str	r2, [r7, #8]
   18282:	781a      	ldrb	r2, [r3, #0]
   18284:	68fb      	ldr	r3, [r7, #12]
   18286:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   18288:	68bb      	ldr	r3, [r7, #8]
   1828a:	781b      	ldrb	r3, [r3, #0]
   1828c:	b29a      	uxth	r2, r3
   1828e:	68bb      	ldr	r3, [r7, #8]
   18290:	3301      	adds	r3, #1
   18292:	781b      	ldrb	r3, [r3, #0]
   18294:	b29b      	uxth	r3, r3
   18296:	021b      	lsls	r3, r3, #8
   18298:	b29b      	uxth	r3, r3
   1829a:	4413      	add	r3, r2
   1829c:	b29a      	uxth	r2, r3
   1829e:	68fb      	ldr	r3, [r7, #12]
   182a0:	80da      	strh	r2, [r3, #6]
   182a2:	68bb      	ldr	r3, [r7, #8]
   182a4:	3302      	adds	r3, #2
   182a6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   182a8:	68bb      	ldr	r3, [r7, #8]
   182aa:	1c5a      	adds	r2, r3, #1
   182ac:	60ba      	str	r2, [r7, #8]
   182ae:	781a      	ldrb	r2, [r3, #0]
   182b0:	68fb      	ldr	r3, [r7, #12]
   182b2:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   182b4:	68fb      	ldr	r3, [r7, #12]
   182b6:	791a      	ldrb	r2, [r3, #4]
   182b8:	68fb      	ldr	r3, [r7, #12]
   182ba:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   182bc:	68fb      	ldr	r3, [r7, #12]
   182be:	88da      	ldrh	r2, [r3, #6]
   182c0:	68fb      	ldr	r3, [r7, #12]
   182c2:	801a      	strh	r2, [r3, #0]
}
   182c4:	bf00      	nop
   182c6:	3714      	adds	r7, #20
   182c8:	46bd      	mov	sp, r7
   182ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   182ce:	4770      	bx	lr

000182d0 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   182d0:	b580      	push	{r7, lr}
   182d2:	b084      	sub	sp, #16
   182d4:	af00      	add	r7, sp, #0
   182d6:	60f8      	str	r0, [r7, #12]
   182d8:	60b9      	str	r1, [r7, #8]
   182da:	4613      	mov	r3, r2
   182dc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   182de:	68bb      	ldr	r3, [r7, #8]
   182e0:	1c5a      	adds	r2, r3, #1
   182e2:	60ba      	str	r2, [r7, #8]
   182e4:	781a      	ldrb	r2, [r3, #0]
   182e6:	68fb      	ldr	r3, [r7, #12]
   182e8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   182ea:	68bb      	ldr	r3, [r7, #8]
   182ec:	1c5a      	adds	r2, r3, #1
   182ee:	60ba      	str	r2, [r7, #8]
   182f0:	781a      	ldrb	r2, [r3, #0]
   182f2:	68fb      	ldr	r3, [r7, #12]
   182f4:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   182f6:	68fb      	ldr	r3, [r7, #12]
   182f8:	3306      	adds	r3, #6
   182fa:	68b9      	ldr	r1, [r7, #8]
   182fc:	4618      	mov	r0, r3
   182fe:	f007 fca8 	bl	1fc52 <BdaCpy>
   18302:	68bb      	ldr	r3, [r7, #8]
   18304:	3306      	adds	r3, #6
   18306:	60bb      	str	r3, [r7, #8]
}
   18308:	bf00      	nop
   1830a:	3710      	adds	r7, #16
   1830c:	46bd      	mov	sp, r7
   1830e:	bd80      	pop	{r7, pc}

00018310 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18310:	b580      	push	{r7, lr}
   18312:	b084      	sub	sp, #16
   18314:	af00      	add	r7, sp, #0
   18316:	60f8      	str	r0, [r7, #12]
   18318:	60b9      	str	r1, [r7, #8]
   1831a:	4613      	mov	r3, r2
   1831c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   1831e:	68bb      	ldr	r3, [r7, #8]
   18320:	1c5a      	adds	r2, r3, #1
   18322:	60ba      	str	r2, [r7, #8]
   18324:	781a      	ldrb	r2, [r3, #0]
   18326:	68fb      	ldr	r3, [r7, #12]
   18328:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1832a:	68bb      	ldr	r3, [r7, #8]
   1832c:	781b      	ldrb	r3, [r3, #0]
   1832e:	b29a      	uxth	r2, r3
   18330:	68bb      	ldr	r3, [r7, #8]
   18332:	3301      	adds	r3, #1
   18334:	781b      	ldrb	r3, [r3, #0]
   18336:	b29b      	uxth	r3, r3
   18338:	021b      	lsls	r3, r3, #8
   1833a:	b29b      	uxth	r3, r3
   1833c:	4413      	add	r3, r2
   1833e:	b29a      	uxth	r2, r3
   18340:	68fb      	ldr	r3, [r7, #12]
   18342:	80da      	strh	r2, [r3, #6]
   18344:	68bb      	ldr	r3, [r7, #8]
   18346:	3302      	adds	r3, #2
   18348:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   1834a:	68bb      	ldr	r3, [r7, #8]
   1834c:	1c5a      	adds	r2, r3, #1
   1834e:	60ba      	str	r2, [r7, #8]
   18350:	781a      	ldrb	r2, [r3, #0]
   18352:	68fb      	ldr	r3, [r7, #12]
   18354:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   18356:	68bb      	ldr	r3, [r7, #8]
   18358:	1c5a      	adds	r2, r3, #1
   1835a:	60ba      	str	r2, [r7, #8]
   1835c:	781a      	ldrb	r2, [r3, #0]
   1835e:	68fb      	ldr	r3, [r7, #12]
   18360:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   18362:	68fb      	ldr	r3, [r7, #12]
   18364:	330a      	adds	r3, #10
   18366:	68b9      	ldr	r1, [r7, #8]
   18368:	4618      	mov	r0, r3
   1836a:	f007 fc72 	bl	1fc52 <BdaCpy>
   1836e:	68bb      	ldr	r3, [r7, #8]
   18370:	3306      	adds	r3, #6
   18372:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   18374:	68bb      	ldr	r3, [r7, #8]
   18376:	1c5a      	adds	r2, r3, #1
   18378:	60ba      	str	r2, [r7, #8]
   1837a:	781a      	ldrb	r2, [r3, #0]
   1837c:	68fb      	ldr	r3, [r7, #12]
   1837e:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   18380:	68bb      	ldr	r3, [r7, #8]
   18382:	781b      	ldrb	r3, [r3, #0]
   18384:	b29a      	uxth	r2, r3
   18386:	68bb      	ldr	r3, [r7, #8]
   18388:	3301      	adds	r3, #1
   1838a:	781b      	ldrb	r3, [r3, #0]
   1838c:	b29b      	uxth	r3, r3
   1838e:	021b      	lsls	r3, r3, #8
   18390:	b29b      	uxth	r3, r3
   18392:	4413      	add	r3, r2
   18394:	b29a      	uxth	r2, r3
   18396:	68fb      	ldr	r3, [r7, #12]
   18398:	825a      	strh	r2, [r3, #18]
   1839a:	68bb      	ldr	r3, [r7, #8]
   1839c:	3302      	adds	r3, #2
   1839e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   183a0:	68bb      	ldr	r3, [r7, #8]
   183a2:	1c5a      	adds	r2, r3, #1
   183a4:	60ba      	str	r2, [r7, #8]
   183a6:	781a      	ldrb	r2, [r3, #0]
   183a8:	68fb      	ldr	r3, [r7, #12]
   183aa:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   183ac:	68fb      	ldr	r3, [r7, #12]
   183ae:	791a      	ldrb	r2, [r3, #4]
   183b0:	68fb      	ldr	r3, [r7, #12]
   183b2:	70da      	strb	r2, [r3, #3]
}
   183b4:	bf00      	nop
   183b6:	3710      	adds	r7, #16
   183b8:	46bd      	mov	sp, r7
   183ba:	bd80      	pop	{r7, pc}

000183bc <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   183bc:	b580      	push	{r7, lr}
   183be:	b084      	sub	sp, #16
   183c0:	af00      	add	r7, sp, #0
   183c2:	6078      	str	r0, [r7, #4]
   183c4:	460b      	mov	r3, r1
   183c6:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   183c8:	687b      	ldr	r3, [r7, #4]
   183ca:	795b      	ldrb	r3, [r3, #5]
   183cc:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   183ce:	7bfb      	ldrb	r3, [r7, #15]
   183d0:	2bf8      	cmp	r3, #248	; 0xf8
   183d2:	d857      	bhi.n	18484 <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   183d4:	7bfb      	ldrb	r3, [r7, #15]
   183d6:	b29b      	uxth	r3, r3
   183d8:	3310      	adds	r3, #16
   183da:	b29b      	uxth	r3, r3
   183dc:	4618      	mov	r0, r3
   183de:	f002 fa81 	bl	1a8e4 <WsfBufAlloc>
   183e2:	60b8      	str	r0, [r7, #8]
   183e4:	68bb      	ldr	r3, [r7, #8]
   183e6:	2b00      	cmp	r3, #0
   183e8:	d04d      	beq.n	18486 <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   183ea:	687b      	ldr	r3, [r7, #4]
   183ec:	781b      	ldrb	r3, [r3, #0]
   183ee:	b29a      	uxth	r2, r3
   183f0:	687b      	ldr	r3, [r7, #4]
   183f2:	3301      	adds	r3, #1
   183f4:	781b      	ldrb	r3, [r3, #0]
   183f6:	b29b      	uxth	r3, r3
   183f8:	021b      	lsls	r3, r3, #8
   183fa:	b29b      	uxth	r3, r3
   183fc:	4413      	add	r3, r2
   183fe:	b29a      	uxth	r2, r3
   18400:	68bb      	ldr	r3, [r7, #8]
   18402:	809a      	strh	r2, [r3, #4]
   18404:	687b      	ldr	r3, [r7, #4]
   18406:	3302      	adds	r3, #2
   18408:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   1840a:	687b      	ldr	r3, [r7, #4]
   1840c:	1c5a      	adds	r2, r3, #1
   1840e:	607a      	str	r2, [r7, #4]
   18410:	781a      	ldrb	r2, [r3, #0]
   18412:	68bb      	ldr	r3, [r7, #8]
   18414:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   18416:	687b      	ldr	r3, [r7, #4]
   18418:	1c5a      	adds	r2, r3, #1
   1841a:	607a      	str	r2, [r7, #4]
   1841c:	781a      	ldrb	r2, [r3, #0]
   1841e:	68bb      	ldr	r3, [r7, #8]
   18420:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   18422:	687b      	ldr	r3, [r7, #4]
   18424:	1c5a      	adds	r2, r3, #1
   18426:	607a      	str	r2, [r7, #4]
   18428:	781a      	ldrb	r2, [r3, #0]
   1842a:	68bb      	ldr	r3, [r7, #8]
   1842c:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   1842e:	687b      	ldr	r3, [r7, #4]
   18430:	1c5a      	adds	r2, r3, #1
   18432:	607a      	str	r2, [r7, #4]
   18434:	781a      	ldrb	r2, [r3, #0]
   18436:	68bb      	ldr	r3, [r7, #8]
   18438:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   1843a:	687b      	ldr	r3, [r7, #4]
   1843c:	1c5a      	adds	r2, r3, #1
   1843e:	607a      	str	r2, [r7, #4]
   18440:	781a      	ldrb	r2, [r3, #0]
   18442:	68bb      	ldr	r3, [r7, #8]
   18444:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   18446:	68bb      	ldr	r3, [r7, #8]
   18448:	f103 0210 	add.w	r2, r3, #16
   1844c:	68bb      	ldr	r3, [r7, #8]
   1844e:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   18450:	68bb      	ldr	r3, [r7, #8]
   18452:	68d8      	ldr	r0, [r3, #12]
   18454:	68bb      	ldr	r3, [r7, #8]
   18456:	7a9b      	ldrb	r3, [r3, #10]
   18458:	461a      	mov	r2, r3
   1845a:	6879      	ldr	r1, [r7, #4]
   1845c:	f7f3 fe80 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   18460:	68bb      	ldr	r3, [r7, #8]
   18462:	2200      	movs	r2, #0
   18464:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   18466:	68bb      	ldr	r3, [r7, #8]
   18468:	2231      	movs	r2, #49	; 0x31
   1846a:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   1846c:	68bb      	ldr	r3, [r7, #8]
   1846e:	7a5a      	ldrb	r2, [r3, #9]
   18470:	68bb      	ldr	r3, [r7, #8]
   18472:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   18474:	4b05      	ldr	r3, [pc, #20]	; (1848c <hciEvtProcessLePerAdvReport+0xd0>)
   18476:	689b      	ldr	r3, [r3, #8]
   18478:	68b8      	ldr	r0, [r7, #8]
   1847a:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   1847c:	68b8      	ldr	r0, [r7, #8]
   1847e:	f002 fa71 	bl	1a964 <WsfBufFree>
   18482:	e000      	b.n	18486 <hciEvtProcessLePerAdvReport+0xca>
    return;
   18484:	bf00      	nop
  }
}
   18486:	3710      	adds	r7, #16
   18488:	46bd      	mov	sp, r7
   1848a:	bd80      	pop	{r7, pc}
   1848c:	10044390 	.word	0x10044390

00018490 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   18490:	b480      	push	{r7}
   18492:	b085      	sub	sp, #20
   18494:	af00      	add	r7, sp, #0
   18496:	60f8      	str	r0, [r7, #12]
   18498:	60b9      	str	r1, [r7, #8]
   1849a:	4613      	mov	r3, r2
   1849c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   1849e:	68bb      	ldr	r3, [r7, #8]
   184a0:	1c5a      	adds	r2, r3, #1
   184a2:	60ba      	str	r2, [r7, #8]
   184a4:	781a      	ldrb	r2, [r3, #0]
   184a6:	68fb      	ldr	r3, [r7, #12]
   184a8:	70da      	strb	r2, [r3, #3]
}
   184aa:	bf00      	nop
   184ac:	3714      	adds	r7, #20
   184ae:	46bd      	mov	sp, r7
   184b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   184b4:	4770      	bx	lr

000184b6 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   184b6:	b480      	push	{r7}
   184b8:	b085      	sub	sp, #20
   184ba:	af00      	add	r7, sp, #0
   184bc:	60f8      	str	r0, [r7, #12]
   184be:	60b9      	str	r1, [r7, #8]
   184c0:	4613      	mov	r3, r2
   184c2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   184c4:	68bb      	ldr	r3, [r7, #8]
   184c6:	781b      	ldrb	r3, [r3, #0]
   184c8:	b29a      	uxth	r2, r3
   184ca:	68bb      	ldr	r3, [r7, #8]
   184cc:	3301      	adds	r3, #1
   184ce:	781b      	ldrb	r3, [r3, #0]
   184d0:	b29b      	uxth	r3, r3
   184d2:	021b      	lsls	r3, r3, #8
   184d4:	b29b      	uxth	r3, r3
   184d6:	4413      	add	r3, r2
   184d8:	b29a      	uxth	r2, r3
   184da:	68fb      	ldr	r3, [r7, #12]
   184dc:	809a      	strh	r2, [r3, #4]
   184de:	68bb      	ldr	r3, [r7, #8]
   184e0:	3302      	adds	r3, #2
   184e2:	60bb      	str	r3, [r7, #8]
}
   184e4:	bf00      	nop
   184e6:	3714      	adds	r7, #20
   184e8:	46bd      	mov	sp, r7
   184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   184ee:	4770      	bx	lr

000184f0 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   184f0:	b580      	push	{r7, lr}
   184f2:	b084      	sub	sp, #16
   184f4:	af00      	add	r7, sp, #0
   184f6:	6078      	str	r0, [r7, #4]
   184f8:	460b      	mov	r3, r1
   184fa:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   184fc:	687b      	ldr	r3, [r7, #4]
   184fe:	1c5a      	adds	r2, r3, #1
   18500:	607a      	str	r2, [r7, #4]
   18502:	781b      	ldrb	r3, [r3, #0]
   18504:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   18506:	7bfb      	ldrb	r3, [r7, #15]
   18508:	2b0f      	cmp	r3, #15
   1850a:	d84e      	bhi.n	185aa <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   1850c:	201c      	movs	r0, #28
   1850e:	f002 f9e9 	bl	1a8e4 <WsfBufAlloc>
   18512:	60b8      	str	r0, [r7, #8]
   18514:	68bb      	ldr	r3, [r7, #8]
   18516:	2b00      	cmp	r3, #0
   18518:	d048      	beq.n	185ac <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   1851a:	e03d      	b.n	18598 <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   1851c:	687b      	ldr	r3, [r7, #4]
   1851e:	1c5a      	adds	r2, r3, #1
   18520:	607a      	str	r2, [r7, #4]
   18522:	781a      	ldrb	r2, [r3, #0]
   18524:	68bb      	ldr	r3, [r7, #8]
   18526:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   18528:	687b      	ldr	r3, [r7, #4]
   1852a:	1c5a      	adds	r2, r3, #1
   1852c:	607a      	str	r2, [r7, #4]
   1852e:	781a      	ldrb	r2, [r3, #0]
   18530:	68bb      	ldr	r3, [r7, #8]
   18532:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   18534:	68bb      	ldr	r3, [r7, #8]
   18536:	330c      	adds	r3, #12
   18538:	6879      	ldr	r1, [r7, #4]
   1853a:	4618      	mov	r0, r3
   1853c:	f007 fb89 	bl	1fc52 <BdaCpy>
   18540:	687b      	ldr	r3, [r7, #4]
   18542:	3306      	adds	r3, #6
   18544:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   18546:	687b      	ldr	r3, [r7, #4]
   18548:	1c5a      	adds	r2, r3, #1
   1854a:	607a      	str	r2, [r7, #4]
   1854c:	781a      	ldrb	r2, [r3, #0]
   1854e:	68bb      	ldr	r3, [r7, #8]
   18550:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   18552:	68bb      	ldr	r3, [r7, #8]
   18554:	3313      	adds	r3, #19
   18556:	6879      	ldr	r1, [r7, #4]
   18558:	4618      	mov	r0, r3
   1855a:	f007 fb7a 	bl	1fc52 <BdaCpy>
   1855e:	687b      	ldr	r3, [r7, #4]
   18560:	3306      	adds	r3, #6
   18562:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   18564:	687b      	ldr	r3, [r7, #4]
   18566:	1c5a      	adds	r2, r3, #1
   18568:	607a      	str	r2, [r7, #4]
   1856a:	781b      	ldrb	r3, [r3, #0]
   1856c:	b25a      	sxtb	r2, r3
   1856e:	68bb      	ldr	r3, [r7, #8]
   18570:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   18572:	68bb      	ldr	r3, [r7, #8]
   18574:	2200      	movs	r2, #0
   18576:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   18578:	68bb      	ldr	r3, [r7, #8]
   1857a:	2200      	movs	r2, #0
   1857c:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1857e:	68bb      	ldr	r3, [r7, #8]
   18580:	2200      	movs	r2, #0
   18582:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   18584:	68bb      	ldr	r3, [r7, #8]
   18586:	2206      	movs	r2, #6
   18588:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1858a:	68bb      	ldr	r3, [r7, #8]
   1858c:	2200      	movs	r2, #0
   1858e:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   18590:	4b08      	ldr	r3, [pc, #32]	; (185b4 <hciEvtProcessLeDirectAdvReport+0xc4>)
   18592:	689b      	ldr	r3, [r3, #8]
   18594:	68b8      	ldr	r0, [r7, #8]
   18596:	4798      	blx	r3
    while (i-- > 0)
   18598:	7bfb      	ldrb	r3, [r7, #15]
   1859a:	1e5a      	subs	r2, r3, #1
   1859c:	73fa      	strb	r2, [r7, #15]
   1859e:	2b00      	cmp	r3, #0
   185a0:	d1bc      	bne.n	1851c <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   185a2:	68b8      	ldr	r0, [r7, #8]
   185a4:	f002 f9de 	bl	1a964 <WsfBufFree>
   185a8:	e000      	b.n	185ac <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   185aa:	bf00      	nop
  }
}
   185ac:	3710      	adds	r7, #16
   185ae:	46bd      	mov	sp, r7
   185b0:	bd80      	pop	{r7, pc}
   185b2:	bf00      	nop
   185b4:	10044390 	.word	0x10044390

000185b8 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   185b8:	b480      	push	{r7}
   185ba:	b083      	sub	sp, #12
   185bc:	af00      	add	r7, sp, #0
   185be:	4603      	mov	r3, r0
   185c0:	460a      	mov	r2, r1
   185c2:	71fb      	strb	r3, [r7, #7]
   185c4:	4613      	mov	r3, r2
   185c6:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   185c8:	bf00      	nop
   185ca:	370c      	adds	r7, #12
   185cc:	46bd      	mov	sp, r7
   185ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   185d2:	4770      	bx	lr

000185d4 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   185d4:	b580      	push	{r7, lr}
   185d6:	b084      	sub	sp, #16
   185d8:	af00      	add	r7, sp, #0
   185da:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   185dc:	687b      	ldr	r3, [r7, #4]
   185de:	1c5a      	adds	r2, r3, #1
   185e0:	607a      	str	r2, [r7, #4]
   185e2:	781b      	ldrb	r3, [r3, #0]
   185e4:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   185e6:	687b      	ldr	r3, [r7, #4]
   185e8:	1c5a      	adds	r2, r3, #1
   185ea:	607a      	str	r2, [r7, #4]
   185ec:	781b      	ldrb	r3, [r3, #0]
   185ee:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   185f0:	687b      	ldr	r3, [r7, #4]
   185f2:	781b      	ldrb	r3, [r3, #0]
   185f4:	b29a      	uxth	r2, r3
   185f6:	687b      	ldr	r3, [r7, #4]
   185f8:	3301      	adds	r3, #1
   185fa:	781b      	ldrb	r3, [r3, #0]
   185fc:	b29b      	uxth	r3, r3
   185fe:	021b      	lsls	r3, r3, #8
   18600:	b29b      	uxth	r3, r3
   18602:	4413      	add	r3, r2
   18604:	81bb      	strh	r3, [r7, #12]
   18606:	687b      	ldr	r3, [r7, #4]
   18608:	3302      	adds	r3, #2
   1860a:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   1860c:	7bfb      	ldrb	r3, [r7, #15]
   1860e:	2b00      	cmp	r3, #0
   18610:	d005      	beq.n	1861e <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   18612:	89ba      	ldrh	r2, [r7, #12]
   18614:	7bfb      	ldrb	r3, [r7, #15]
   18616:	4611      	mov	r1, r2
   18618:	4618      	mov	r0, r3
   1861a:	f7ff ffcd 	bl	185b8 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   1861e:	7bbb      	ldrb	r3, [r7, #14]
   18620:	4618      	mov	r0, r3
   18622:	f7fd f881 	bl	15728 <hciCmdRecvCmpl>
}
   18626:	bf00      	nop
   18628:	3710      	adds	r7, #16
   1862a:	46bd      	mov	sp, r7
   1862c:	bd80      	pop	{r7, pc}
	...

00018630 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   18630:	b580      	push	{r7, lr}
   18632:	b086      	sub	sp, #24
   18634:	af00      	add	r7, sp, #0
   18636:	6078      	str	r0, [r7, #4]
   18638:	460b      	mov	r3, r1
   1863a:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   1863c:	2300      	movs	r3, #0
   1863e:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   18640:	4ba2      	ldr	r3, [pc, #648]	; (188cc <hciEvtProcessCmdCmpl+0x29c>)
   18642:	689b      	ldr	r3, [r3, #8]
   18644:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   18646:	687b      	ldr	r3, [r7, #4]
   18648:	1c5a      	adds	r2, r3, #1
   1864a:	607a      	str	r2, [r7, #4]
   1864c:	781b      	ldrb	r3, [r3, #0]
   1864e:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   18650:	687b      	ldr	r3, [r7, #4]
   18652:	781b      	ldrb	r3, [r3, #0]
   18654:	b29a      	uxth	r2, r3
   18656:	687b      	ldr	r3, [r7, #4]
   18658:	3301      	adds	r3, #1
   1865a:	781b      	ldrb	r3, [r3, #0]
   1865c:	b29b      	uxth	r3, r3
   1865e:	021b      	lsls	r3, r3, #8
   18660:	b29b      	uxth	r3, r3
   18662:	4413      	add	r3, r2
   18664:	81bb      	strh	r3, [r7, #12]
   18666:	687b      	ldr	r3, [r7, #4]
   18668:	3302      	adds	r3, #2
   1866a:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   1866c:	89bb      	ldrh	r3, [r7, #12]
   1866e:	f242 0222 	movw	r2, #8226	; 0x2022
   18672:	4293      	cmp	r3, r2
   18674:	f000 80aa 	beq.w	187cc <hciEvtProcessCmdCmpl+0x19c>
   18678:	f242 0222 	movw	r2, #8226	; 0x2022
   1867c:	4293      	cmp	r3, r2
   1867e:	dc49      	bgt.n	18714 <hciEvtProcessCmdCmpl+0xe4>
   18680:	f242 0215 	movw	r2, #8213	; 0x2015
   18684:	4293      	cmp	r3, r2
   18686:	f000 80b3 	beq.w	187f0 <hciEvtProcessCmdCmpl+0x1c0>
   1868a:	f242 0215 	movw	r2, #8213	; 0x2015
   1868e:	4293      	cmp	r3, r2
   18690:	dc22      	bgt.n	186d8 <hciEvtProcessCmdCmpl+0xa8>
   18692:	f241 4205 	movw	r2, #5125	; 0x1405
   18696:	4293      	cmp	r3, r2
   18698:	f000 80ad 	beq.w	187f6 <hciEvtProcessCmdCmpl+0x1c6>
   1869c:	f241 4205 	movw	r2, #5125	; 0x1405
   186a0:	4293      	cmp	r3, r2
   186a2:	dc0a      	bgt.n	186ba <hciEvtProcessCmdCmpl+0x8a>
   186a4:	f640 422d 	movw	r2, #3117	; 0xc2d
   186a8:	4293      	cmp	r3, r2
   186aa:	f000 80a7 	beq.w	187fc <hciEvtProcessCmdCmpl+0x1cc>
   186ae:	f640 427c 	movw	r2, #3196	; 0xc7c
   186b2:	4293      	cmp	r3, r2
   186b4:	f000 80b7 	beq.w	18826 <hciEvtProcessCmdCmpl+0x1f6>
   186b8:	e0cd      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   186ba:	f242 020c 	movw	r2, #8204	; 0x200c
   186be:	4293      	cmp	r3, r2
   186c0:	f000 80ba 	beq.w	18838 <hciEvtProcessCmdCmpl+0x208>
   186c4:	f242 020e 	movw	r2, #8206	; 0x200e
   186c8:	4293      	cmp	r3, r2
   186ca:	d06a      	beq.n	187a2 <hciEvtProcessCmdCmpl+0x172>
   186cc:	f242 020a 	movw	r2, #8202	; 0x200a
   186d0:	4293      	cmp	r3, r2
   186d2:	f000 80b4 	beq.w	1883e <hciEvtProcessCmdCmpl+0x20e>
   186d6:	e0be      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   186d8:	f242 021a 	movw	r2, #8218	; 0x201a
   186dc:	4293      	cmp	r3, r2
   186de:	d07b      	beq.n	187d8 <hciEvtProcessCmdCmpl+0x1a8>
   186e0:	f242 021a 	movw	r2, #8218	; 0x201a
   186e4:	4293      	cmp	r3, r2
   186e6:	dc08      	bgt.n	186fa <hciEvtProcessCmdCmpl+0xca>
   186e8:	f242 0217 	movw	r2, #8215	; 0x2017
   186ec:	4293      	cmp	r3, r2
   186ee:	d05b      	beq.n	187a8 <hciEvtProcessCmdCmpl+0x178>
   186f0:	f242 0218 	movw	r2, #8216	; 0x2018
   186f4:	4293      	cmp	r3, r2
   186f6:	d075      	beq.n	187e4 <hciEvtProcessCmdCmpl+0x1b4>
   186f8:	e0ad      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   186fa:	f242 0220 	movw	r2, #8224	; 0x2020
   186fe:	4293      	cmp	r3, r2
   18700:	d058      	beq.n	187b4 <hciEvtProcessCmdCmpl+0x184>
   18702:	f242 0220 	movw	r2, #8224	; 0x2020
   18706:	4293      	cmp	r3, r2
   18708:	dc57      	bgt.n	187ba <hciEvtProcessCmdCmpl+0x18a>
   1870a:	f242 021b 	movw	r2, #8219	; 0x201b
   1870e:	4293      	cmp	r3, r2
   18710:	d065      	beq.n	187de <hciEvtProcessCmdCmpl+0x1ae>
   18712:	e0a0      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   18714:	f242 022c 	movw	r2, #8236	; 0x202c
   18718:	4293      	cmp	r3, r2
   1871a:	d07e      	beq.n	1881a <hciEvtProcessCmdCmpl+0x1ea>
   1871c:	f242 022c 	movw	r2, #8236	; 0x202c
   18720:	4293      	cmp	r3, r2
   18722:	dc1d      	bgt.n	18760 <hciEvtProcessCmdCmpl+0x130>
   18724:	f242 0227 	movw	r2, #8231	; 0x2027
   18728:	4293      	cmp	r3, r2
   1872a:	d06a      	beq.n	18802 <hciEvtProcessCmdCmpl+0x1d2>
   1872c:	f242 0227 	movw	r2, #8231	; 0x2027
   18730:	4293      	cmp	r3, r2
   18732:	dc08      	bgt.n	18746 <hciEvtProcessCmdCmpl+0x116>
   18734:	f242 0223 	movw	r2, #8227	; 0x2023
   18738:	4293      	cmp	r3, r2
   1873a:	d041      	beq.n	187c0 <hciEvtProcessCmdCmpl+0x190>
   1873c:	f242 0224 	movw	r2, #8228	; 0x2024
   18740:	4293      	cmp	r3, r2
   18742:	d040      	beq.n	187c6 <hciEvtProcessCmdCmpl+0x196>
   18744:	e087      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   18746:	f242 0229 	movw	r2, #8233	; 0x2029
   1874a:	4293      	cmp	r3, r2
   1874c:	d05f      	beq.n	1880e <hciEvtProcessCmdCmpl+0x1de>
   1874e:	f242 0229 	movw	r2, #8233	; 0x2029
   18752:	4293      	cmp	r3, r2
   18754:	db58      	blt.n	18808 <hciEvtProcessCmdCmpl+0x1d8>
   18756:	f242 022b 	movw	r2, #8235	; 0x202b
   1875a:	4293      	cmp	r3, r2
   1875c:	d05a      	beq.n	18814 <hciEvtProcessCmdCmpl+0x1e4>
   1875e:	e07a      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   18760:	f242 0231 	movw	r2, #8241	; 0x2031
   18764:	4293      	cmp	r3, r2
   18766:	d064      	beq.n	18832 <hciEvtProcessCmdCmpl+0x202>
   18768:	f242 0231 	movw	r2, #8241	; 0x2031
   1876c:	4293      	cmp	r3, r2
   1876e:	dc0c      	bgt.n	1878a <hciEvtProcessCmdCmpl+0x15a>
   18770:	f242 022f 	movw	r2, #8239	; 0x202f
   18774:	4293      	cmp	r3, r2
   18776:	d02c      	beq.n	187d2 <hciEvtProcessCmdCmpl+0x1a2>
   18778:	f242 022f 	movw	r2, #8239	; 0x202f
   1877c:	4293      	cmp	r3, r2
   1877e:	dc55      	bgt.n	1882c <hciEvtProcessCmdCmpl+0x1fc>
   18780:	f242 022d 	movw	r2, #8237	; 0x202d
   18784:	4293      	cmp	r3, r2
   18786:	d04b      	beq.n	18820 <hciEvtProcessCmdCmpl+0x1f0>
   18788:	e065      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
   1878a:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   1878e:	d05f      	beq.n	18850 <hciEvtProcessCmdCmpl+0x220>
   18790:	f242 0242 	movw	r2, #8258	; 0x2042
   18794:	4293      	cmp	r3, r2
   18796:	d055      	beq.n	18844 <hciEvtProcessCmdCmpl+0x214>
   18798:	f242 0239 	movw	r2, #8249	; 0x2039
   1879c:	4293      	cmp	r3, r2
   1879e:	d054      	beq.n	1884a <hciEvtProcessCmdCmpl+0x21a>
   187a0:	e059      	b.n	18856 <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   187a2:	2305      	movs	r3, #5
   187a4:	75fb      	strb	r3, [r7, #23]
    break;
   187a6:	e064      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   187a8:	231b      	movs	r3, #27
   187aa:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   187ac:	4b47      	ldr	r3, [pc, #284]	; (188cc <hciEvtProcessCmdCmpl+0x29c>)
   187ae:	68db      	ldr	r3, [r3, #12]
   187b0:	613b      	str	r3, [r7, #16]
    break;
   187b2:	e05e      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   187b4:	231d      	movs	r3, #29
   187b6:	75fb      	strb	r3, [r7, #23]
    break;
   187b8:	e05b      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   187ba:	231e      	movs	r3, #30
   187bc:	75fb      	strb	r3, [r7, #23]
    break;
   187be:	e058      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   187c0:	231f      	movs	r3, #31
   187c2:	75fb      	strb	r3, [r7, #23]
    break;
   187c4:	e055      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   187c6:	2320      	movs	r3, #32
   187c8:	75fb      	strb	r3, [r7, #23]
    break;
   187ca:	e052      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   187cc:	2321      	movs	r3, #33	; 0x21
   187ce:	75fb      	strb	r3, [r7, #23]
    break;
   187d0:	e04f      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   187d2:	2322      	movs	r3, #34	; 0x22
   187d4:	75fb      	strb	r3, [r7, #23]
    break;
   187d6:	e04c      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   187d8:	230c      	movs	r3, #12
   187da:	75fb      	strb	r3, [r7, #23]
    break;
   187dc:	e049      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   187de:	230d      	movs	r3, #13
   187e0:	75fb      	strb	r3, [r7, #23]
    break;
   187e2:	e046      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   187e4:	231c      	movs	r3, #28
   187e6:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   187e8:	4b38      	ldr	r3, [pc, #224]	; (188cc <hciEvtProcessCmdCmpl+0x29c>)
   187ea:	68db      	ldr	r3, [r3, #12]
   187ec:	613b      	str	r3, [r7, #16]
    break;
   187ee:	e040      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   187f0:	2308      	movs	r3, #8
   187f2:	75fb      	strb	r3, [r7, #23]
    break;
   187f4:	e03d      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   187f6:	2307      	movs	r3, #7
   187f8:	75fb      	strb	r3, [r7, #23]
    break;
   187fa:	e03a      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   187fc:	2309      	movs	r3, #9
   187fe:	75fb      	strb	r3, [r7, #23]
    break;
   18800:	e037      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   18802:	2315      	movs	r3, #21
   18804:	75fb      	strb	r3, [r7, #23]
    break;
   18806:	e034      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   18808:	2316      	movs	r3, #22
   1880a:	75fb      	strb	r3, [r7, #23]
    break;
   1880c:	e031      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   1880e:	2317      	movs	r3, #23
   18810:	75fb      	strb	r3, [r7, #23]
    break;
   18812:	e02e      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   18814:	2318      	movs	r3, #24
   18816:	75fb      	strb	r3, [r7, #23]
    break;
   18818:	e02b      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   1881a:	2319      	movs	r3, #25
   1881c:	75fb      	strb	r3, [r7, #23]
    break;
   1881e:	e028      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   18820:	231a      	movs	r3, #26
   18822:	75fb      	strb	r3, [r7, #23]
    break;
   18824:	e025      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   18826:	2327      	movs	r3, #39	; 0x27
   18828:	75fb      	strb	r3, [r7, #23]
    break;
   1882a:	e022      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   1882c:	2329      	movs	r3, #41	; 0x29
   1882e:	75fb      	strb	r3, [r7, #23]
    break;
   18830:	e01f      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   18832:	232a      	movs	r3, #42	; 0x2a
   18834:	75fb      	strb	r3, [r7, #23]
    break;
   18836:	e01c      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   18838:	2334      	movs	r3, #52	; 0x34
   1883a:	75fb      	strb	r3, [r7, #23]
    break;
   1883c:	e019      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   1883e:	2335      	movs	r3, #53	; 0x35
   18840:	75fb      	strb	r3, [r7, #23]
    break;
   18842:	e016      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   18844:	2336      	movs	r3, #54	; 0x36
   18846:	75fb      	strb	r3, [r7, #23]
    break;
   18848:	e013      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   1884a:	2337      	movs	r3, #55	; 0x37
   1884c:	75fb      	strb	r3, [r7, #23]
    break;
   1884e:	e010      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   18850:	2338      	movs	r3, #56	; 0x38
   18852:	75fb      	strb	r3, [r7, #23]
    break;
   18854:	e00d      	b.n	18872 <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   18856:	89bb      	ldrh	r3, [r7, #12]
   18858:	0a9b      	lsrs	r3, r3, #10
   1885a:	b29b      	uxth	r3, r3
   1885c:	2b3f      	cmp	r3, #63	; 0x3f
   1885e:	d107      	bne.n	18870 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   18860:	78fa      	ldrb	r2, [r7, #3]
   18862:	89bb      	ldrh	r3, [r7, #12]
   18864:	6879      	ldr	r1, [r7, #4]
   18866:	4618      	mov	r0, r3
   18868:	f000 fcc4 	bl	191f4 <hciCoreVsCmdCmplRcvd>
   1886c:	4603      	mov	r3, r0
   1886e:	75fb      	strb	r3, [r7, #23]
    }
    break;
   18870:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   18872:	7dfb      	ldrb	r3, [r7, #23]
   18874:	2b00      	cmp	r3, #0
   18876:	d021      	beq.n	188bc <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18878:	7dfb      	ldrb	r3, [r7, #23]
   1887a:	4a15      	ldr	r2, [pc, #84]	; (188d0 <hciEvtProcessCmdCmpl+0x2a0>)
   1887c:	5cd3      	ldrb	r3, [r2, r3]
   1887e:	b29b      	uxth	r3, r3
   18880:	4618      	mov	r0, r3
   18882:	f002 f82f 	bl	1a8e4 <WsfBufAlloc>
   18886:	60b8      	str	r0, [r7, #8]
   18888:	68bb      	ldr	r3, [r7, #8]
   1888a:	2b00      	cmp	r3, #0
   1888c:	d016      	beq.n	188bc <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   1888e:	68bb      	ldr	r3, [r7, #8]
   18890:	2200      	movs	r2, #0
   18892:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   18894:	68bb      	ldr	r3, [r7, #8]
   18896:	7dfa      	ldrb	r2, [r7, #23]
   18898:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   1889a:	68bb      	ldr	r3, [r7, #8]
   1889c:	2200      	movs	r2, #0
   1889e:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   188a0:	7dfb      	ldrb	r3, [r7, #23]
   188a2:	4a0c      	ldr	r2, [pc, #48]	; (188d4 <hciEvtProcessCmdCmpl+0x2a4>)
   188a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   188a8:	78fa      	ldrb	r2, [r7, #3]
   188aa:	6879      	ldr	r1, [r7, #4]
   188ac:	68b8      	ldr	r0, [r7, #8]
   188ae:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   188b0:	693b      	ldr	r3, [r7, #16]
   188b2:	68b8      	ldr	r0, [r7, #8]
   188b4:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   188b6:	68b8      	ldr	r0, [r7, #8]
   188b8:	f002 f854 	bl	1a964 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   188bc:	7bfb      	ldrb	r3, [r7, #15]
   188be:	4618      	mov	r0, r3
   188c0:	f7fc ff32 	bl	15728 <hciCmdRecvCmpl>
}
   188c4:	bf00      	nop
   188c6:	3718      	adds	r7, #24
   188c8:	46bd      	mov	sp, r7
   188ca:	bd80      	pop	{r7, pc}
   188cc:	10044390 	.word	0x10044390
   188d0:	0003c80c 	.word	0x0003c80c
   188d4:	0003c728 	.word	0x0003c728

000188d8 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   188d8:	b580      	push	{r7, lr}
   188da:	b088      	sub	sp, #32
   188dc:	af00      	add	r7, sp, #0
   188de:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   188e0:	2300      	movs	r3, #0
   188e2:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   188e4:	4ba1      	ldr	r3, [pc, #644]	; (18b6c <hciEvtProcessMsg+0x294>)
   188e6:	689b      	ldr	r3, [r3, #8]
   188e8:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   188ea:	687b      	ldr	r3, [r7, #4]
   188ec:	1c5a      	adds	r2, r3, #1
   188ee:	607a      	str	r2, [r7, #4]
   188f0:	781b      	ldrb	r3, [r3, #0]
   188f2:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   188f4:	687b      	ldr	r3, [r7, #4]
   188f6:	1c5a      	adds	r2, r3, #1
   188f8:	607a      	str	r2, [r7, #4]
   188fa:	781b      	ldrb	r3, [r3, #0]
   188fc:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   188fe:	7dfb      	ldrb	r3, [r7, #23]
   18900:	2b10      	cmp	r3, #16
   18902:	f000 8121 	beq.w	18b48 <hciEvtProcessMsg+0x270>
   18906:	2b10      	cmp	r3, #16
   18908:	dc10      	bgt.n	1892c <hciEvtProcessMsg+0x54>
   1890a:	2b0c      	cmp	r3, #12
   1890c:	f000 8103 	beq.w	18b16 <hciEvtProcessMsg+0x23e>
   18910:	2b0c      	cmp	r3, #12
   18912:	dc06      	bgt.n	18922 <hciEvtProcessMsg+0x4a>
   18914:	2b05      	cmp	r3, #5
   18916:	f000 80ec 	beq.w	18af2 <hciEvtProcessMsg+0x21a>
   1891a:	2b08      	cmp	r3, #8
   1891c:	f000 80f2 	beq.w	18b04 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   18920:	e131      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   18922:	2b0e      	cmp	r3, #14
   18924:	d020      	beq.n	18968 <hciEvtProcessMsg+0x90>
   18926:	2b0f      	cmp	r3, #15
   18928:	d014      	beq.n	18954 <hciEvtProcessMsg+0x7c>
      break;
   1892a:	e12c      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   1892c:	2b30      	cmp	r3, #48	; 0x30
   1892e:	f000 80fb 	beq.w	18b28 <hciEvtProcessMsg+0x250>
   18932:	2b30      	cmp	r3, #48	; 0x30
   18934:	dc05      	bgt.n	18942 <hciEvtProcessMsg+0x6a>
   18936:	2b13      	cmp	r3, #19
   18938:	d022      	beq.n	18980 <hciEvtProcessMsg+0xa8>
   1893a:	2b1a      	cmp	r3, #26
   1893c:	f000 80fd 	beq.w	18b3a <hciEvtProcessMsg+0x262>
      break;
   18940:	e121      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   18942:	2b57      	cmp	r3, #87	; 0x57
   18944:	f000 8109 	beq.w	18b5a <hciEvtProcessMsg+0x282>
   18948:	2bff      	cmp	r3, #255	; 0xff
   1894a:	f000 8113 	beq.w	18b74 <hciEvtProcessMsg+0x29c>
   1894e:	2b3e      	cmp	r3, #62	; 0x3e
   18950:	d020      	beq.n	18994 <hciEvtProcessMsg+0xbc>
      break;
   18952:	e118      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   18954:	4b86      	ldr	r3, [pc, #536]	; (18b70 <hciEvtProcessMsg+0x298>)
   18956:	891b      	ldrh	r3, [r3, #8]
   18958:	3301      	adds	r3, #1
   1895a:	b29a      	uxth	r2, r3
   1895c:	4b84      	ldr	r3, [pc, #528]	; (18b70 <hciEvtProcessMsg+0x298>)
   1895e:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   18960:	6878      	ldr	r0, [r7, #4]
   18962:	f7ff fe37 	bl	185d4 <hciEvtProcessCmdStatus>
      break;
   18966:	e10e      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   18968:	4b81      	ldr	r3, [pc, #516]	; (18b70 <hciEvtProcessMsg+0x298>)
   1896a:	88db      	ldrh	r3, [r3, #6]
   1896c:	3301      	adds	r3, #1
   1896e:	b29a      	uxth	r2, r3
   18970:	4b7f      	ldr	r3, [pc, #508]	; (18b70 <hciEvtProcessMsg+0x298>)
   18972:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   18974:	7dbb      	ldrb	r3, [r7, #22]
   18976:	4619      	mov	r1, r3
   18978:	6878      	ldr	r0, [r7, #4]
   1897a:	f7ff fe59 	bl	18630 <hciEvtProcessCmdCmpl>
      break;
   1897e:	e102      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   18980:	6878      	ldr	r0, [r7, #4]
   18982:	f7fe fa35 	bl	16df0 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   18986:	4b7a      	ldr	r3, [pc, #488]	; (18b70 <hciEvtProcessMsg+0x298>)
   18988:	899b      	ldrh	r3, [r3, #12]
   1898a:	3301      	adds	r3, #1
   1898c:	b29a      	uxth	r2, r3
   1898e:	4b78      	ldr	r3, [pc, #480]	; (18b70 <hciEvtProcessMsg+0x298>)
   18990:	819a      	strh	r2, [r3, #12]
      break;
   18992:	e0f8      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   18994:	687b      	ldr	r3, [r7, #4]
   18996:	1c5a      	adds	r2, r3, #1
   18998:	607a      	str	r2, [r7, #4]
   1899a:	781b      	ldrb	r3, [r3, #0]
   1899c:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   1899e:	4b74      	ldr	r3, [pc, #464]	; (18b70 <hciEvtProcessMsg+0x298>)
   189a0:	8a5b      	ldrh	r3, [r3, #18]
   189a2:	3301      	adds	r3, #1
   189a4:	b29a      	uxth	r2, r3
   189a6:	4b72      	ldr	r3, [pc, #456]	; (18b70 <hciEvtProcessMsg+0x298>)
   189a8:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   189aa:	7d7b      	ldrb	r3, [r7, #21]
   189ac:	3b01      	subs	r3, #1
   189ae:	2b12      	cmp	r3, #18
   189b0:	f200 809d 	bhi.w	18aee <hciEvtProcessMsg+0x216>
   189b4:	a201      	add	r2, pc, #4	; (adr r2, 189bc <hciEvtProcessMsg+0xe4>)
   189b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   189ba:	bf00      	nop
   189bc:	00018a09 	.word	0x00018a09
   189c0:	00018a37 	.word	0x00018a37
   189c4:	00018a43 	.word	0x00018a43
   189c8:	00018a49 	.word	0x00018a49
   189cc:	00018a4f 	.word	0x00018a4f
   189d0:	00018a8f 	.word	0x00018a8f
   189d4:	00018a95 	.word	0x00018a95
   189d8:	00018a9b 	.word	0x00018a9b
   189dc:	00018aa7 	.word	0x00018aa7
   189e0:	00018a55 	.word	0x00018a55
   189e4:	00018a83 	.word	0x00018a83
   189e8:	00018ab3 	.word	0x00018ab3
   189ec:	00018ab9 	.word	0x00018ab9
   189f0:	00018ad7 	.word	0x00018ad7
   189f4:	00018add 	.word	0x00018add
   189f8:	00018ae9 	.word	0x00018ae9
   189fc:	00018ac5 	.word	0x00018ac5
   18a00:	00018acb 	.word	0x00018acb
   18a04:	00018ad1 	.word	0x00018ad1
          if (*pEvt == HCI_SUCCESS)
   18a08:	687b      	ldr	r3, [r7, #4]
   18a0a:	781b      	ldrb	r3, [r3, #0]
   18a0c:	2b00      	cmp	r3, #0
   18a0e:	d10f      	bne.n	18a30 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a10:	687b      	ldr	r3, [r7, #4]
   18a12:	3301      	adds	r3, #1
   18a14:	781b      	ldrb	r3, [r3, #0]
   18a16:	b29a      	uxth	r2, r3
   18a18:	687b      	ldr	r3, [r7, #4]
   18a1a:	3302      	adds	r3, #2
   18a1c:	781b      	ldrb	r3, [r3, #0]
   18a1e:	b29b      	uxth	r3, r3
   18a20:	021b      	lsls	r3, r3, #8
   18a22:	b29b      	uxth	r3, r3
   18a24:	4413      	add	r3, r2
   18a26:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   18a28:	8a7b      	ldrh	r3, [r7, #18]
   18a2a:	4618      	mov	r0, r3
   18a2c:	f7fd fe7e 	bl	1672c <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   18a30:	2301      	movs	r3, #1
   18a32:	77fb      	strb	r3, [r7, #31]
          break;
   18a34:	e05c      	b.n	18af0 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   18a36:	7dbb      	ldrb	r3, [r7, #22]
   18a38:	4619      	mov	r1, r3
   18a3a:	6878      	ldr	r0, [r7, #4]
   18a3c:	f7ff fab4 	bl	17fa8 <hciEvtProcessLeAdvReport>
          break;
   18a40:	e056      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   18a42:	2304      	movs	r3, #4
   18a44:	77fb      	strb	r3, [r7, #31]
          break;
   18a46:	e053      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   18a48:	230b      	movs	r3, #11
   18a4a:	77fb      	strb	r3, [r7, #31]
          break;
   18a4c:	e050      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   18a4e:	2310      	movs	r3, #16
   18a50:	77fb      	strb	r3, [r7, #31]
          break;
   18a52:	e04d      	b.n	18af0 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   18a54:	687b      	ldr	r3, [r7, #4]
   18a56:	781b      	ldrb	r3, [r3, #0]
   18a58:	2b00      	cmp	r3, #0
   18a5a:	d10f      	bne.n	18a7c <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   18a5c:	687b      	ldr	r3, [r7, #4]
   18a5e:	3301      	adds	r3, #1
   18a60:	781b      	ldrb	r3, [r3, #0]
   18a62:	b29a      	uxth	r2, r3
   18a64:	687b      	ldr	r3, [r7, #4]
   18a66:	3302      	adds	r3, #2
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	b29b      	uxth	r3, r3
   18a6c:	021b      	lsls	r3, r3, #8
   18a6e:	b29b      	uxth	r3, r3
   18a70:	4413      	add	r3, r2
   18a72:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   18a74:	8a7b      	ldrh	r3, [r7, #18]
   18a76:	4618      	mov	r0, r3
   18a78:	f7fd fe58 	bl	1672c <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   18a7c:	2302      	movs	r3, #2
   18a7e:	77fb      	strb	r3, [r7, #31]
          break;
   18a80:	e036      	b.n	18af0 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   18a82:	7dbb      	ldrb	r3, [r7, #22]
   18a84:	4619      	mov	r1, r3
   18a86:	6878      	ldr	r0, [r7, #4]
   18a88:	f7ff fd32 	bl	184f0 <hciEvtProcessLeDirectAdvReport>
          break;
   18a8c:	e030      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   18a8e:	2323      	movs	r3, #35	; 0x23
   18a90:	77fb      	strb	r3, [r7, #31]
          break;
   18a92:	e02d      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   18a94:	2324      	movs	r3, #36	; 0x24
   18a96:	77fb      	strb	r3, [r7, #31]
          break;
   18a98:	e02a      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   18a9a:	4b34      	ldr	r3, [pc, #208]	; (18b6c <hciEvtProcessMsg+0x294>)
   18a9c:	68db      	ldr	r3, [r3, #12]
   18a9e:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   18aa0:	2325      	movs	r3, #37	; 0x25
   18aa2:	77fb      	strb	r3, [r7, #31]
          break;
   18aa4:	e024      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   18aa6:	4b31      	ldr	r3, [pc, #196]	; (18b6c <hciEvtProcessMsg+0x294>)
   18aa8:	68db      	ldr	r3, [r3, #12]
   18aaa:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   18aac:	2326      	movs	r3, #38	; 0x26
   18aae:	77fb      	strb	r3, [r7, #31]
          break;
   18ab0:	e01e      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   18ab2:	232b      	movs	r3, #43	; 0x2b
   18ab4:	77fb      	strb	r3, [r7, #31]
          break;
   18ab6:	e01b      	b.n	18af0 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   18ab8:	7dbb      	ldrb	r3, [r7, #22]
   18aba:	4619      	mov	r1, r3
   18abc:	6878      	ldr	r0, [r7, #4]
   18abe:	f7ff faeb 	bl	18098 <hciEvtProcessLeExtAdvReport>
          break;
   18ac2:	e015      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   18ac4:	232d      	movs	r3, #45	; 0x2d
   18ac6:	77fb      	strb	r3, [r7, #31]
          break;
   18ac8:	e012      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   18aca:	232e      	movs	r3, #46	; 0x2e
   18acc:	77fb      	strb	r3, [r7, #31]
          break;
   18ace:	e00f      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   18ad0:	232f      	movs	r3, #47	; 0x2f
   18ad2:	77fb      	strb	r3, [r7, #31]
          break;
   18ad4:	e00c      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   18ad6:	2330      	movs	r3, #48	; 0x30
   18ad8:	77fb      	strb	r3, [r7, #31]
          break;
   18ada:	e009      	b.n	18af0 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   18adc:	7dbb      	ldrb	r3, [r7, #22]
   18ade:	4619      	mov	r1, r3
   18ae0:	6878      	ldr	r0, [r7, #4]
   18ae2:	f7ff fc6b 	bl	183bc <hciEvtProcessLePerAdvReport>
          break;
   18ae6:	e003      	b.n	18af0 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   18ae8:	2332      	movs	r3, #50	; 0x32
   18aea:	77fb      	strb	r3, [r7, #31]
          break;
   18aec:	e000      	b.n	18af0 <hciEvtProcessMsg+0x218>
          break;
   18aee:	bf00      	nop
      break;
   18af0:	e049      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   18af2:	4b1f      	ldr	r3, [pc, #124]	; (18b70 <hciEvtProcessMsg+0x298>)
   18af4:	881b      	ldrh	r3, [r3, #0]
   18af6:	3301      	adds	r3, #1
   18af8:	b29a      	uxth	r2, r3
   18afa:	4b1d      	ldr	r3, [pc, #116]	; (18b70 <hciEvtProcessMsg+0x298>)
   18afc:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   18afe:	2303      	movs	r3, #3
   18b00:	77fb      	strb	r3, [r7, #31]
      break;
   18b02:	e040      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   18b04:	4b1a      	ldr	r3, [pc, #104]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b06:	885b      	ldrh	r3, [r3, #2]
   18b08:	3301      	adds	r3, #1
   18b0a:	b29a      	uxth	r2, r3
   18b0c:	4b18      	ldr	r3, [pc, #96]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b0e:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   18b10:	230f      	movs	r3, #15
   18b12:	77fb      	strb	r3, [r7, #31]
      break;
   18b14:	e037      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   18b16:	4b16      	ldr	r3, [pc, #88]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b18:	889b      	ldrh	r3, [r3, #4]
   18b1a:	3301      	adds	r3, #1
   18b1c:	b29a      	uxth	r2, r3
   18b1e:	4b14      	ldr	r3, [pc, #80]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b20:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   18b22:	230a      	movs	r3, #10
   18b24:	77fb      	strb	r3, [r7, #31]
      break;
   18b26:	e02e      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   18b28:	4b11      	ldr	r3, [pc, #68]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b2a:	8a1b      	ldrh	r3, [r3, #16]
   18b2c:	3301      	adds	r3, #1
   18b2e:	b29a      	uxth	r2, r3
   18b30:	4b0f      	ldr	r3, [pc, #60]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b32:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   18b34:	230e      	movs	r3, #14
   18b36:	77fb      	strb	r3, [r7, #31]
      break;
   18b38:	e025      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   18b3a:	4b0d      	ldr	r3, [pc, #52]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b3c:	89db      	ldrh	r3, [r3, #14]
   18b3e:	3301      	adds	r3, #1
   18b40:	b29a      	uxth	r2, r3
   18b42:	4b0b      	ldr	r3, [pc, #44]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b44:	81da      	strh	r2, [r3, #14]
      break;
   18b46:	e01e      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   18b48:	4b09      	ldr	r3, [pc, #36]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b4a:	895b      	ldrh	r3, [r3, #10]
   18b4c:	3301      	adds	r3, #1
   18b4e:	b29a      	uxth	r2, r3
   18b50:	4b07      	ldr	r3, [pc, #28]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b52:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   18b54:	2314      	movs	r3, #20
   18b56:	77fb      	strb	r3, [r7, #31]
      break;
   18b58:	e015      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   18b5a:	4b05      	ldr	r3, [pc, #20]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b5c:	8adb      	ldrh	r3, [r3, #22]
   18b5e:	3301      	adds	r3, #1
   18b60:	b29a      	uxth	r2, r3
   18b62:	4b03      	ldr	r3, [pc, #12]	; (18b70 <hciEvtProcessMsg+0x298>)
   18b64:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   18b66:	2328      	movs	r3, #40	; 0x28
   18b68:	77fb      	strb	r3, [r7, #31]
      break;
   18b6a:	e00c      	b.n	18b86 <hciEvtProcessMsg+0x2ae>
   18b6c:	10044390 	.word	0x10044390
   18b70:	100196c4 	.word	0x100196c4
      hciEvtStats.numVendorSpecEvt++;
   18b74:	4b22      	ldr	r3, [pc, #136]	; (18c00 <hciEvtProcessMsg+0x328>)
   18b76:	8a9b      	ldrh	r3, [r3, #20]
   18b78:	3301      	adds	r3, #1
   18b7a:	b29a      	uxth	r2, r3
   18b7c:	4b20      	ldr	r3, [pc, #128]	; (18c00 <hciEvtProcessMsg+0x328>)
   18b7e:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   18b80:	2313      	movs	r3, #19
   18b82:	77fb      	strb	r3, [r7, #31]
      break;
   18b84:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   18b86:	7ffb      	ldrb	r3, [r7, #31]
   18b88:	2b00      	cmp	r3, #0
   18b8a:	d034      	beq.n	18bf6 <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   18b8c:	7ffb      	ldrb	r3, [r7, #31]
   18b8e:	4a1d      	ldr	r2, [pc, #116]	; (18c04 <hciEvtProcessMsg+0x32c>)
   18b90:	5cd3      	ldrb	r3, [r2, r3]
   18b92:	b29b      	uxth	r3, r3
   18b94:	4618      	mov	r0, r3
   18b96:	f001 fea5 	bl	1a8e4 <WsfBufAlloc>
   18b9a:	60f8      	str	r0, [r7, #12]
   18b9c:	68fb      	ldr	r3, [r7, #12]
   18b9e:	2b00      	cmp	r3, #0
   18ba0:	d016      	beq.n	18bd0 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   18ba2:	68fb      	ldr	r3, [r7, #12]
   18ba4:	2200      	movs	r2, #0
   18ba6:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   18ba8:	68fb      	ldr	r3, [r7, #12]
   18baa:	7ffa      	ldrb	r2, [r7, #31]
   18bac:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   18bae:	68fb      	ldr	r3, [r7, #12]
   18bb0:	2200      	movs	r2, #0
   18bb2:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   18bb4:	7ffb      	ldrb	r3, [r7, #31]
   18bb6:	4a14      	ldr	r2, [pc, #80]	; (18c08 <hciEvtProcessMsg+0x330>)
   18bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18bbc:	7dba      	ldrb	r2, [r7, #22]
   18bbe:	6879      	ldr	r1, [r7, #4]
   18bc0:	68f8      	ldr	r0, [r7, #12]
   18bc2:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   18bc4:	69bb      	ldr	r3, [r7, #24]
   18bc6:	68f8      	ldr	r0, [r7, #12]
   18bc8:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   18bca:	68f8      	ldr	r0, [r7, #12]
   18bcc:	f001 feca 	bl	1a964 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   18bd0:	7ffb      	ldrb	r3, [r7, #31]
   18bd2:	2b03      	cmp	r3, #3
   18bd4:	d10f      	bne.n	18bf6 <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   18bd6:	687b      	ldr	r3, [r7, #4]
   18bd8:	3301      	adds	r3, #1
   18bda:	781b      	ldrb	r3, [r3, #0]
   18bdc:	b29a      	uxth	r2, r3
   18bde:	687b      	ldr	r3, [r7, #4]
   18be0:	3302      	adds	r3, #2
   18be2:	781b      	ldrb	r3, [r3, #0]
   18be4:	b29b      	uxth	r3, r3
   18be6:	021b      	lsls	r3, r3, #8
   18be8:	b29b      	uxth	r3, r3
   18bea:	4413      	add	r3, r2
   18bec:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   18bee:	8a7b      	ldrh	r3, [r7, #18]
   18bf0:	4618      	mov	r0, r3
   18bf2:	f7fd fda8 	bl	16746 <hciCoreConnClose>
    }
  }
}
   18bf6:	bf00      	nop
   18bf8:	3720      	adds	r7, #32
   18bfa:	46bd      	mov	sp, r7
   18bfc:	bd80      	pop	{r7, pc}
   18bfe:	bf00      	nop
   18c00:	100196c4 	.word	0x100196c4
   18c04:	0003c80c 	.word	0x0003c80c
   18c08:	0003c728 	.word	0x0003c728

00018c0c <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   18c0c:	b580      	push	{r7, lr}
   18c0e:	b084      	sub	sp, #16
   18c10:	af00      	add	r7, sp, #0
   18c12:	6078      	str	r0, [r7, #4]
   18c14:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   18c16:	683b      	ldr	r3, [r7, #0]
   18c18:	3302      	adds	r3, #2
   18c1a:	781b      	ldrb	r3, [r3, #0]
   18c1c:	b29a      	uxth	r2, r3
   18c1e:	683b      	ldr	r3, [r7, #0]
   18c20:	3303      	adds	r3, #3
   18c22:	781b      	ldrb	r3, [r3, #0]
   18c24:	b29b      	uxth	r3, r3
   18c26:	021b      	lsls	r3, r3, #8
   18c28:	b29b      	uxth	r3, r3
   18c2a:	4413      	add	r3, r2
   18c2c:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   18c2e:	89fb      	ldrh	r3, [r7, #14]
   18c30:	3304      	adds	r3, #4
   18c32:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   18c34:	89fb      	ldrh	r3, [r7, #14]
   18c36:	683a      	ldr	r2, [r7, #0]
   18c38:	4619      	mov	r1, r3
   18c3a:	2002      	movs	r0, #2
   18c3c:	f007 ff44 	bl	20ac8 <hciDrvWrite>
   18c40:	4603      	mov	r3, r0
   18c42:	461a      	mov	r2, r3
   18c44:	89fb      	ldrh	r3, [r7, #14]
   18c46:	4293      	cmp	r3, r2
   18c48:	d103      	bne.n	18c52 <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   18c4a:	6839      	ldr	r1, [r7, #0]
   18c4c:	6878      	ldr	r0, [r7, #4]
   18c4e:	f7fd feb5 	bl	169bc <hciCoreTxAclComplete>
  }
}
   18c52:	bf00      	nop
   18c54:	3710      	adds	r7, #16
   18c56:	46bd      	mov	sp, r7
   18c58:	bd80      	pop	{r7, pc}

00018c5a <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   18c5a:	b580      	push	{r7, lr}
   18c5c:	b084      	sub	sp, #16
   18c5e:	af00      	add	r7, sp, #0
   18c60:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   18c62:	687b      	ldr	r3, [r7, #4]
   18c64:	3302      	adds	r3, #2
   18c66:	781b      	ldrb	r3, [r3, #0]
   18c68:	3303      	adds	r3, #3
   18c6a:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   18c6c:	7bfb      	ldrb	r3, [r7, #15]
   18c6e:	b29b      	uxth	r3, r3
   18c70:	687a      	ldr	r2, [r7, #4]
   18c72:	4619      	mov	r1, r3
   18c74:	2001      	movs	r0, #1
   18c76:	f007 ff27 	bl	20ac8 <hciDrvWrite>
   18c7a:	4603      	mov	r3, r0
   18c7c:	461a      	mov	r2, r3
   18c7e:	7bfb      	ldrb	r3, [r7, #15]
   18c80:	b29b      	uxth	r3, r3
   18c82:	429a      	cmp	r2, r3
   18c84:	d102      	bne.n	18c8c <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   18c86:	6878      	ldr	r0, [r7, #4]
   18c88:	f001 fed2 	bl	1aa30 <WsfMsgFree>
  }
}
   18c8c:	bf00      	nop
   18c8e:	3710      	adds	r7, #16
   18c90:	46bd      	mov	sp, r7
   18c92:	bd80      	pop	{r7, pc}

00018c94 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   18c94:	b580      	push	{r7, lr}
   18c96:	b084      	sub	sp, #16
   18c98:	af00      	add	r7, sp, #0
   18c9a:	6078      	str	r0, [r7, #4]
   18c9c:	460b      	mov	r3, r1
   18c9e:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   18ca0:	2300      	movs	r3, #0
   18ca2:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   18ca4:	e0e9      	b.n	18e7a <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   18ca6:	687b      	ldr	r3, [r7, #4]
   18ca8:	781b      	ldrb	r3, [r3, #0]
   18caa:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   18cac:	4b77      	ldr	r3, [pc, #476]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18cae:	781b      	ldrb	r3, [r3, #0]
   18cb0:	2b00      	cmp	r3, #0
   18cb2:	d115      	bne.n	18ce0 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   18cb4:	4a76      	ldr	r2, [pc, #472]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18cb6:	7a3b      	ldrb	r3, [r7, #8]
   18cb8:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   18cba:	4b76      	ldr	r3, [pc, #472]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18cbc:	2200      	movs	r2, #0
   18cbe:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   18cc0:	4b72      	ldr	r3, [pc, #456]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18cc2:	2201      	movs	r2, #1
   18cc4:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   18cc6:	4b74      	ldr	r3, [pc, #464]	; (18e98 <hciTrSerialRxIncoming+0x204>)
   18cc8:	2201      	movs	r2, #1
   18cca:	701a      	strb	r2, [r3, #0]
      pBuf++;
   18ccc:	687b      	ldr	r3, [r7, #4]
   18cce:	3301      	adds	r3, #1
   18cd0:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18cd2:	89fb      	ldrh	r3, [r7, #14]
   18cd4:	3301      	adds	r3, #1
   18cd6:	81fb      	strh	r3, [r7, #14]
      len--;
   18cd8:	887b      	ldrh	r3, [r7, #2]
   18cda:	3b01      	subs	r3, #1
   18cdc:	807b      	strh	r3, [r7, #2]
   18cde:	e0b6      	b.n	18e4e <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   18ce0:	4b6a      	ldr	r3, [pc, #424]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18ce2:	781b      	ldrb	r3, [r3, #0]
   18ce4:	2b01      	cmp	r3, #1
   18ce6:	f040 8091 	bne.w	18e0c <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   18cea:	2300      	movs	r3, #0
   18cec:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   18cee:	2300      	movs	r3, #0
   18cf0:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   18cf2:	4b67      	ldr	r3, [pc, #412]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18cf4:	781b      	ldrb	r3, [r3, #0]
   18cf6:	2b04      	cmp	r3, #4
   18cf8:	d102      	bne.n	18d00 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   18cfa:	2302      	movs	r3, #2
   18cfc:	737b      	strb	r3, [r7, #13]
   18cfe:	e008      	b.n	18d12 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   18d00:	4b63      	ldr	r3, [pc, #396]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18d02:	781b      	ldrb	r3, [r3, #0]
   18d04:	2b02      	cmp	r3, #2
   18d06:	d102      	bne.n	18d0e <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   18d08:	2304      	movs	r3, #4
   18d0a:	737b      	strb	r3, [r7, #13]
   18d0c:	e001      	b.n	18d12 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   18d0e:	89fb      	ldrh	r3, [r7, #14]
   18d10:	e0b8      	b.n	18e84 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   18d12:	7b7b      	ldrb	r3, [r7, #13]
   18d14:	b29a      	uxth	r2, r3
   18d16:	4b5f      	ldr	r3, [pc, #380]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18d18:	881b      	ldrh	r3, [r3, #0]
   18d1a:	429a      	cmp	r2, r3
   18d1c:	d012      	beq.n	18d44 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   18d1e:	4b5d      	ldr	r3, [pc, #372]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18d20:	881b      	ldrh	r3, [r3, #0]
   18d22:	1c5a      	adds	r2, r3, #1
   18d24:	b291      	uxth	r1, r2
   18d26:	4a5b      	ldr	r2, [pc, #364]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18d28:	8011      	strh	r1, [r2, #0]
   18d2a:	4619      	mov	r1, r3
   18d2c:	4a5b      	ldr	r2, [pc, #364]	; (18e9c <hciTrSerialRxIncoming+0x208>)
   18d2e:	7a3b      	ldrb	r3, [r7, #8]
   18d30:	5453      	strb	r3, [r2, r1]
        pBuf++;
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	3301      	adds	r3, #1
   18d36:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   18d38:	89fb      	ldrh	r3, [r7, #14]
   18d3a:	3301      	adds	r3, #1
   18d3c:	81fb      	strh	r3, [r7, #14]
        len--;
   18d3e:	887b      	ldrh	r3, [r7, #2]
   18d40:	3b01      	subs	r3, #1
   18d42:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   18d44:	7b7b      	ldrb	r3, [r7, #13]
   18d46:	b29a      	uxth	r2, r3
   18d48:	4b52      	ldr	r3, [pc, #328]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18d4a:	881b      	ldrh	r3, [r3, #0]
   18d4c:	429a      	cmp	r2, r3
   18d4e:	d17e      	bne.n	18e4e <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   18d50:	4b4f      	ldr	r3, [pc, #316]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18d52:	781b      	ldrb	r3, [r3, #0]
   18d54:	2b04      	cmp	r3, #4
   18d56:	d103      	bne.n	18d60 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   18d58:	4b50      	ldr	r3, [pc, #320]	; (18e9c <hciTrSerialRxIncoming+0x208>)
   18d5a:	785b      	ldrb	r3, [r3, #1]
   18d5c:	817b      	strh	r3, [r7, #10]
   18d5e:	e00d      	b.n	18d7c <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   18d60:	4b4b      	ldr	r3, [pc, #300]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18d62:	781b      	ldrb	r3, [r3, #0]
   18d64:	2b02      	cmp	r3, #2
   18d66:	d109      	bne.n	18d7c <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   18d68:	4b4c      	ldr	r3, [pc, #304]	; (18e9c <hciTrSerialRxIncoming+0x208>)
   18d6a:	789b      	ldrb	r3, [r3, #2]
   18d6c:	b29a      	uxth	r2, r3
   18d6e:	4b4c      	ldr	r3, [pc, #304]	; (18ea0 <hciTrSerialRxIncoming+0x20c>)
   18d70:	781b      	ldrb	r3, [r3, #0]
   18d72:	b29b      	uxth	r3, r3
   18d74:	021b      	lsls	r3, r3, #8
   18d76:	b29b      	uxth	r3, r3
   18d78:	4413      	add	r3, r2
   18d7a:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   18d7c:	4b44      	ldr	r3, [pc, #272]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18d7e:	781b      	ldrb	r3, [r3, #0]
   18d80:	2b02      	cmp	r3, #2
   18d82:	d10c      	bne.n	18d9e <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   18d84:	7b7b      	ldrb	r3, [r7, #13]
   18d86:	b29a      	uxth	r2, r3
   18d88:	897b      	ldrh	r3, [r7, #10]
   18d8a:	4413      	add	r3, r2
   18d8c:	b29b      	uxth	r3, r3
   18d8e:	2100      	movs	r1, #0
   18d90:	4618      	mov	r0, r3
   18d92:	f001 fe21 	bl	1a9d8 <WsfMsgDataAlloc>
   18d96:	4602      	mov	r2, r0
   18d98:	4b42      	ldr	r3, [pc, #264]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18d9a:	601a      	str	r2, [r3, #0]
   18d9c:	e00a      	b.n	18db4 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   18d9e:	7b7b      	ldrb	r3, [r7, #13]
   18da0:	b29a      	uxth	r2, r3
   18da2:	897b      	ldrh	r3, [r7, #10]
   18da4:	4413      	add	r3, r2
   18da6:	b29b      	uxth	r3, r3
   18da8:	4618      	mov	r0, r3
   18daa:	f001 fe2a 	bl	1aa02 <WsfMsgAlloc>
   18dae:	4602      	mov	r2, r0
   18db0:	4b3c      	ldr	r3, [pc, #240]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18db2:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   18db4:	4b3b      	ldr	r3, [pc, #236]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18db6:	681b      	ldr	r3, [r3, #0]
   18db8:	2b00      	cmp	r3, #0
   18dba:	d025      	beq.n	18e08 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   18dbc:	4b39      	ldr	r3, [pc, #228]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18dbe:	681b      	ldr	r3, [r3, #0]
   18dc0:	4a39      	ldr	r2, [pc, #228]	; (18ea8 <hciTrSerialRxIncoming+0x214>)
   18dc2:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   18dc4:	2300      	movs	r3, #0
   18dc6:	727b      	strb	r3, [r7, #9]
   18dc8:	e00b      	b.n	18de2 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   18dca:	4b37      	ldr	r3, [pc, #220]	; (18ea8 <hciTrSerialRxIncoming+0x214>)
   18dcc:	681b      	ldr	r3, [r3, #0]
   18dce:	1c5a      	adds	r2, r3, #1
   18dd0:	4935      	ldr	r1, [pc, #212]	; (18ea8 <hciTrSerialRxIncoming+0x214>)
   18dd2:	600a      	str	r2, [r1, #0]
   18dd4:	7a7a      	ldrb	r2, [r7, #9]
   18dd6:	4931      	ldr	r1, [pc, #196]	; (18e9c <hciTrSerialRxIncoming+0x208>)
   18dd8:	5c8a      	ldrb	r2, [r1, r2]
   18dda:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   18ddc:	7a7b      	ldrb	r3, [r7, #9]
   18dde:	3301      	adds	r3, #1
   18de0:	727b      	strb	r3, [r7, #9]
   18de2:	7a7a      	ldrb	r2, [r7, #9]
   18de4:	7b7b      	ldrb	r3, [r7, #13]
   18de6:	429a      	cmp	r2, r3
   18de8:	d3ef      	bcc.n	18dca <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   18dea:	4a2a      	ldr	r2, [pc, #168]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18dec:	897b      	ldrh	r3, [r7, #10]
   18dee:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   18df0:	4b28      	ldr	r3, [pc, #160]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18df2:	881b      	ldrh	r3, [r3, #0]
   18df4:	2b00      	cmp	r3, #0
   18df6:	d103      	bne.n	18e00 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   18df8:	4b24      	ldr	r3, [pc, #144]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18dfa:	2203      	movs	r2, #3
   18dfc:	701a      	strb	r2, [r3, #0]
   18dfe:	e026      	b.n	18e4e <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   18e00:	4b22      	ldr	r3, [pc, #136]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18e02:	2202      	movs	r2, #2
   18e04:	701a      	strb	r2, [r3, #0]
   18e06:	e022      	b.n	18e4e <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   18e08:	89fb      	ldrh	r3, [r7, #14]
   18e0a:	e03b      	b.n	18e84 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   18e0c:	4b1f      	ldr	r3, [pc, #124]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18e0e:	781b      	ldrb	r3, [r3, #0]
   18e10:	2b02      	cmp	r3, #2
   18e12:	d11c      	bne.n	18e4e <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   18e14:	4b24      	ldr	r3, [pc, #144]	; (18ea8 <hciTrSerialRxIncoming+0x214>)
   18e16:	681b      	ldr	r3, [r3, #0]
   18e18:	1c5a      	adds	r2, r3, #1
   18e1a:	4923      	ldr	r1, [pc, #140]	; (18ea8 <hciTrSerialRxIncoming+0x214>)
   18e1c:	600a      	str	r2, [r1, #0]
   18e1e:	7a3a      	ldrb	r2, [r7, #8]
   18e20:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   18e22:	4b1c      	ldr	r3, [pc, #112]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18e24:	881b      	ldrh	r3, [r3, #0]
   18e26:	3b01      	subs	r3, #1
   18e28:	b29a      	uxth	r2, r3
   18e2a:	4b1a      	ldr	r3, [pc, #104]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18e2c:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   18e2e:	4b19      	ldr	r3, [pc, #100]	; (18e94 <hciTrSerialRxIncoming+0x200>)
   18e30:	881b      	ldrh	r3, [r3, #0]
   18e32:	2b00      	cmp	r3, #0
   18e34:	d102      	bne.n	18e3c <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   18e36:	4b15      	ldr	r3, [pc, #84]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18e38:	2203      	movs	r2, #3
   18e3a:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   18e3c:	687b      	ldr	r3, [r7, #4]
   18e3e:	3301      	adds	r3, #1
   18e40:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   18e42:	89fb      	ldrh	r3, [r7, #14]
   18e44:	3301      	adds	r3, #1
   18e46:	81fb      	strh	r3, [r7, #14]
      len--;
   18e48:	887b      	ldrh	r3, [r7, #2]
   18e4a:	3b01      	subs	r3, #1
   18e4c:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   18e4e:	4b0f      	ldr	r3, [pc, #60]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18e50:	781b      	ldrb	r3, [r3, #0]
   18e52:	2b03      	cmp	r3, #3
   18e54:	d111      	bne.n	18e7a <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   18e56:	4b10      	ldr	r3, [pc, #64]	; (18e98 <hciTrSerialRxIncoming+0x204>)
   18e58:	2200      	movs	r2, #0
   18e5a:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   18e5c:	4b11      	ldr	r3, [pc, #68]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18e5e:	681b      	ldr	r3, [r3, #0]
   18e60:	2b00      	cmp	r3, #0
   18e62:	d007      	beq.n	18e74 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   18e64:	4b0a      	ldr	r3, [pc, #40]	; (18e90 <hciTrSerialRxIncoming+0x1fc>)
   18e66:	781a      	ldrb	r2, [r3, #0]
   18e68:	4b0e      	ldr	r3, [pc, #56]	; (18ea4 <hciTrSerialRxIncoming+0x210>)
   18e6a:	681b      	ldr	r3, [r3, #0]
   18e6c:	4619      	mov	r1, r3
   18e6e:	4610      	mov	r0, r2
   18e70:	f7fe f828 	bl	16ec4 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   18e74:	4b05      	ldr	r3, [pc, #20]	; (18e8c <hciTrSerialRxIncoming+0x1f8>)
   18e76:	2200      	movs	r2, #0
   18e78:	701a      	strb	r2, [r3, #0]
  while (len)
   18e7a:	887b      	ldrh	r3, [r7, #2]
   18e7c:	2b00      	cmp	r3, #0
   18e7e:	f47f af12 	bne.w	18ca6 <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   18e82:	89fb      	ldrh	r3, [r7, #14]
}
   18e84:	4618      	mov	r0, r3
   18e86:	3710      	adds	r7, #16
   18e88:	46bd      	mov	sp, r7
   18e8a:	bd80      	pop	{r7, pc}
   18e8c:	100196dd 	.word	0x100196dd
   18e90:	100196de 	.word	0x100196de
   18e94:	100196e0 	.word	0x100196e0
   18e98:	100196dc 	.word	0x100196dc
   18e9c:	100196e4 	.word	0x100196e4
   18ea0:	100196e7 	.word	0x100196e7
   18ea4:	100196e8 	.word	0x100196e8
   18ea8:	100196ec 	.word	0x100196ec

00018eac <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   18eac:	b580      	push	{r7, lr}
   18eae:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18eb0:	4b0b      	ldr	r3, [pc, #44]	; (18ee0 <hciCoreReadResolvingListSize+0x34>)
   18eb2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   18eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   18eba:	2b00      	cmp	r3, #0
   18ebc:	d008      	beq.n	18ed0 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   18ebe:	4b09      	ldr	r3, [pc, #36]	; (18ee4 <hciCoreReadResolvingListSize+0x38>)
   18ec0:	881b      	ldrh	r3, [r3, #0]
   18ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	d002      	beq.n	18ed0 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   18eca:	f7fd fa86 	bl	163da <HciLeReadResolvingListSize>
   18ece:	e005      	b.n	18edc <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   18ed0:	4b03      	ldr	r3, [pc, #12]	; (18ee0 <hciCoreReadResolvingListSize+0x34>)
   18ed2:	2200      	movs	r2, #0
   18ed4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   18ed8:	f000 f806 	bl	18ee8 <hciCoreReadMaxDataLen>
  }
}
   18edc:	bf00      	nop
   18ede:	bd80      	pop	{r7, pc}
   18ee0:	1004427c 	.word	0x1004427c
   18ee4:	10017ee4 	.word	0x10017ee4

00018ee8 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   18ee8:	b580      	push	{r7, lr}
   18eea:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   18eec:	4b09      	ldr	r3, [pc, #36]	; (18f14 <hciCoreReadMaxDataLen+0x2c>)
   18eee:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   18ef2:	f003 0320 	and.w	r3, r3, #32
   18ef6:	2b00      	cmp	r3, #0
   18ef8:	d008      	beq.n	18f0c <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   18efa:	4b07      	ldr	r3, [pc, #28]	; (18f18 <hciCoreReadMaxDataLen+0x30>)
   18efc:	881b      	ldrh	r3, [r3, #0]
   18efe:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   18f02:	2b00      	cmp	r3, #0
   18f04:	d002      	beq.n	18f0c <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   18f06:	f7fc fe76 	bl	15bf6 <HciLeReadMaxDataLen>
   18f0a:	e001      	b.n	18f10 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   18f0c:	f7fc fefd 	bl	15d0a <HciLeRandCmd>
  }
}
   18f10:	bf00      	nop
   18f12:	bd80      	pop	{r7, pc}
   18f14:	1004427c 	.word	0x1004427c
   18f18:	10017ee4 	.word	0x10017ee4

00018f1c <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   18f1c:	b580      	push	{r7, lr}
   18f1e:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   18f20:	f7fd f94e 	bl	161c0 <HciResetCmd>
}
   18f24:	bf00      	nop
   18f26:	bd80      	pop	{r7, pc}

00018f28 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   18f28:	b580      	push	{r7, lr}
   18f2a:	b086      	sub	sp, #24
   18f2c:	af00      	add	r7, sp, #0
   18f2e:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   18f30:	687b      	ldr	r3, [r7, #4]
   18f32:	781b      	ldrb	r3, [r3, #0]
   18f34:	2b0e      	cmp	r3, #14
   18f36:	f040 814b 	bne.w	191d0 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   18f3a:	687b      	ldr	r3, [r7, #4]
   18f3c:	3302      	adds	r3, #2
   18f3e:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   18f40:	687b      	ldr	r3, [r7, #4]
   18f42:	3301      	adds	r3, #1
   18f44:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   18f46:	687b      	ldr	r3, [r7, #4]
   18f48:	781b      	ldrb	r3, [r3, #0]
   18f4a:	b29a      	uxth	r2, r3
   18f4c:	687b      	ldr	r3, [r7, #4]
   18f4e:	3301      	adds	r3, #1
   18f50:	781b      	ldrb	r3, [r3, #0]
   18f52:	b29b      	uxth	r3, r3
   18f54:	021b      	lsls	r3, r3, #8
   18f56:	b29b      	uxth	r3, r3
   18f58:	4413      	add	r3, r2
   18f5a:	82fb      	strh	r3, [r7, #22]
   18f5c:	687b      	ldr	r3, [r7, #4]
   18f5e:	3302      	adds	r3, #2
   18f60:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   18f62:	687b      	ldr	r3, [r7, #4]
   18f64:	3301      	adds	r3, #1
   18f66:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   18f68:	8afb      	ldrh	r3, [r7, #22]
   18f6a:	f242 020f 	movw	r2, #8207	; 0x200f
   18f6e:	4293      	cmp	r3, r2
   18f70:	f000 809e 	beq.w	190b0 <hciCoreResetSequence+0x188>
   18f74:	f242 020f 	movw	r2, #8207	; 0x200f
   18f78:	4293      	cmp	r3, r2
   18f7a:	dc22      	bgt.n	18fc2 <hciCoreResetSequence+0x9a>
   18f7c:	f241 0209 	movw	r2, #4105	; 0x1009
   18f80:	4293      	cmp	r3, r2
   18f82:	d05c      	beq.n	1903e <hciCoreResetSequence+0x116>
   18f84:	f241 0209 	movw	r2, #4105	; 0x1009
   18f88:	4293      	cmp	r3, r2
   18f8a:	dc0c      	bgt.n	18fa6 <hciCoreResetSequence+0x7e>
   18f8c:	f640 4203 	movw	r2, #3075	; 0xc03
   18f90:	4293      	cmp	r3, r2
   18f92:	d042      	beq.n	1901a <hciCoreResetSequence+0xf2>
   18f94:	f640 4263 	movw	r2, #3171	; 0xc63
   18f98:	4293      	cmp	r3, r2
   18f9a:	d04d      	beq.n	19038 <hciCoreResetSequence+0x110>
   18f9c:	f640 4201 	movw	r2, #3073	; 0xc01
   18fa0:	4293      	cmp	r3, r2
   18fa2:	d041      	beq.n	19028 <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   18fa4:	e114      	b.n	191d0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   18fa6:	f242 0202 	movw	r2, #8194	; 0x2002
   18faa:	4293      	cmp	r3, r2
   18fac:	d04e      	beq.n	1904c <hciCoreResetSequence+0x124>
   18fae:	f242 0203 	movw	r2, #8195	; 0x2003
   18fb2:	4293      	cmp	r3, r2
   18fb4:	f000 8086 	beq.w	190c4 <hciCoreResetSequence+0x19c>
   18fb8:	f242 0201 	movw	r2, #8193	; 0x2001
   18fbc:	4293      	cmp	r3, r2
   18fbe:	d037      	beq.n	19030 <hciCoreResetSequence+0x108>
        break;
   18fc0:	e106      	b.n	191d0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   18fc2:	f242 022a 	movw	r2, #8234	; 0x202a
   18fc6:	4293      	cmp	r3, r2
   18fc8:	f000 8090 	beq.w	190ec <hciCoreResetSequence+0x1c4>
   18fcc:	f242 022a 	movw	r2, #8234	; 0x202a
   18fd0:	4293      	cmp	r3, r2
   18fd2:	dc0e      	bgt.n	18ff2 <hciCoreResetSequence+0xca>
   18fd4:	f242 021c 	movw	r2, #8220	; 0x201c
   18fd8:	4293      	cmp	r3, r2
   18fda:	d060      	beq.n	1909e <hciCoreResetSequence+0x176>
   18fdc:	f242 0224 	movw	r2, #8228	; 0x2024
   18fe0:	4293      	cmp	r3, r2
   18fe2:	f000 80b0 	beq.w	19146 <hciCoreResetSequence+0x21e>
   18fe6:	f242 0218 	movw	r2, #8216	; 0x2018
   18fea:	4293      	cmp	r3, r2
   18fec:	f000 80d4 	beq.w	19198 <hciCoreResetSequence+0x270>
        break;
   18ff0:	e0ee      	b.n	191d0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   18ff2:	f242 023b 	movw	r2, #8251	; 0x203b
   18ff6:	4293      	cmp	r3, r2
   18ff8:	dc09      	bgt.n	1900e <hciCoreResetSequence+0xe6>
   18ffa:	f242 023a 	movw	r2, #8250	; 0x203a
   18ffe:	4293      	cmp	r3, r2
   19000:	f280 80bd 	bge.w	1917e <hciCoreResetSequence+0x256>
   19004:	f242 022f 	movw	r2, #8239	; 0x202f
   19008:	4293      	cmp	r3, r2
   1900a:	d079      	beq.n	19100 <hciCoreResetSequence+0x1d8>
        break;
   1900c:	e0e0      	b.n	191d0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1900e:	f242 024a 	movw	r2, #8266	; 0x204a
   19012:	4293      	cmp	r3, r2
   19014:	f000 80b3 	beq.w	1917e <hciCoreResetSequence+0x256>
        break;
   19018:	e0da      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   1901a:	4b6f      	ldr	r3, [pc, #444]	; (191d8 <hciCoreResetSequence+0x2b0>)
   1901c:	2200      	movs	r2, #0
   1901e:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   19020:	486e      	ldr	r0, [pc, #440]	; (191dc <hciCoreResetSequence+0x2b4>)
   19022:	f7fd f8ff 	bl	16224 <HciSetEventMaskCmd>
        break;
   19026:	e0d3      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   19028:	486d      	ldr	r0, [pc, #436]	; (191e0 <hciCoreResetSequence+0x2b8>)
   1902a:	f7fc ffce 	bl	15fca <HciLeSetEventMaskCmd>
        break;
   1902e:	e0cf      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   19030:	486c      	ldr	r0, [pc, #432]	; (191e4 <hciCoreResetSequence+0x2bc>)
   19032:	f7fd f913 	bl	1625c <HciSetEventMaskPage2Cmd>
        break;
   19036:	e0cb      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   19038:	f7fd f876 	bl	16128 <HciReadBdAddrCmd>
        break;
   1903c:	e0c8      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   1903e:	6879      	ldr	r1, [r7, #4]
   19040:	4869      	ldr	r0, [pc, #420]	; (191e8 <hciCoreResetSequence+0x2c0>)
   19042:	f006 fe06 	bl	1fc52 <BdaCpy>
        HciLeReadBufSizeCmd();
   19046:	f7fc fe73 	bl	15d30 <HciLeReadBufSizeCmd>
        break;
   1904a:	e0c1      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   1904c:	687b      	ldr	r3, [r7, #4]
   1904e:	781b      	ldrb	r3, [r3, #0]
   19050:	b29a      	uxth	r2, r3
   19052:	687b      	ldr	r3, [r7, #4]
   19054:	3301      	adds	r3, #1
   19056:	781b      	ldrb	r3, [r3, #0]
   19058:	b29b      	uxth	r3, r3
   1905a:	021b      	lsls	r3, r3, #8
   1905c:	b29b      	uxth	r3, r3
   1905e:	4413      	add	r3, r2
   19060:	b29a      	uxth	r2, r3
   19062:	4b62      	ldr	r3, [pc, #392]	; (191ec <hciCoreResetSequence+0x2c4>)
   19064:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   19068:	687b      	ldr	r3, [r7, #4]
   1906a:	3302      	adds	r3, #2
   1906c:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   1906e:	687b      	ldr	r3, [r7, #4]
   19070:	1c5a      	adds	r2, r3, #1
   19072:	607a      	str	r2, [r7, #4]
   19074:	781a      	ldrb	r2, [r3, #0]
   19076:	4b5d      	ldr	r3, [pc, #372]	; (191ec <hciCoreResetSequence+0x2c4>)
   19078:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   1907c:	4b5b      	ldr	r3, [pc, #364]	; (191ec <hciCoreResetSequence+0x2c4>)
   1907e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   19082:	3b01      	subs	r3, #1
   19084:	b2da      	uxtb	r2, r3
   19086:	4b59      	ldr	r3, [pc, #356]	; (191ec <hciCoreResetSequence+0x2c4>)
   19088:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   1908c:	4b57      	ldr	r3, [pc, #348]	; (191ec <hciCoreResetSequence+0x2c4>)
   1908e:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   19092:	4b56      	ldr	r3, [pc, #344]	; (191ec <hciCoreResetSequence+0x2c4>)
   19094:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   19098:	f7fc fe96 	bl	15dc8 <HciLeReadSupStatesCmd>
        break;
   1909c:	e098      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   1909e:	4b53      	ldr	r3, [pc, #332]	; (191ec <hciCoreResetSequence+0x2c4>)
   190a0:	687a      	ldr	r2, [r7, #4]
   190a2:	33e0      	adds	r3, #224	; 0xe0
   190a4:	6810      	ldr	r0, [r2, #0]
   190a6:	6851      	ldr	r1, [r2, #4]
   190a8:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   190aa:	f7fc fea0 	bl	15dee <HciLeReadWhiteListSizeCmd>
        break;
   190ae:	e08f      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   190b0:	687b      	ldr	r3, [r7, #4]
   190b2:	1c5a      	adds	r2, r3, #1
   190b4:	607a      	str	r2, [r7, #4]
   190b6:	781a      	ldrb	r2, [r3, #0]
   190b8:	4b4c      	ldr	r3, [pc, #304]	; (191ec <hciCoreResetSequence+0x2c4>)
   190ba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   190be:	f7fc fe4a 	bl	15d56 <HciLeReadLocalSupFeatCmd>
        break;
   190c2:	e085      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   190c4:	687b      	ldr	r3, [r7, #4]
   190c6:	781b      	ldrb	r3, [r3, #0]
   190c8:	b29a      	uxth	r2, r3
   190ca:	687b      	ldr	r3, [r7, #4]
   190cc:	3301      	adds	r3, #1
   190ce:	781b      	ldrb	r3, [r3, #0]
   190d0:	b29b      	uxth	r3, r3
   190d2:	021b      	lsls	r3, r3, #8
   190d4:	b29b      	uxth	r3, r3
   190d6:	4413      	add	r3, r2
   190d8:	b29a      	uxth	r2, r3
   190da:	4b44      	ldr	r3, [pc, #272]	; (191ec <hciCoreResetSequence+0x2c4>)
   190dc:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   190e0:	687b      	ldr	r3, [r7, #4]
   190e2:	3302      	adds	r3, #2
   190e4:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   190e6:	f7ff fee1 	bl	18eac <hciCoreReadResolvingListSize>
        break;
   190ea:	e071      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   190ec:	687b      	ldr	r3, [r7, #4]
   190ee:	1c5a      	adds	r2, r3, #1
   190f0:	607a      	str	r2, [r7, #4]
   190f2:	781a      	ldrb	r2, [r3, #0]
   190f4:	4b3d      	ldr	r3, [pc, #244]	; (191ec <hciCoreResetSequence+0x2c4>)
   190f6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   190fa:	f7ff fef5 	bl	18ee8 <hciCoreReadMaxDataLen>
        break;
   190fe:	e067      	b.n	191d0 <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   19100:	687b      	ldr	r3, [r7, #4]
   19102:	781b      	ldrb	r3, [r3, #0]
   19104:	b29a      	uxth	r2, r3
   19106:	687b      	ldr	r3, [r7, #4]
   19108:	3301      	adds	r3, #1
   1910a:	781b      	ldrb	r3, [r3, #0]
   1910c:	b29b      	uxth	r3, r3
   1910e:	021b      	lsls	r3, r3, #8
   19110:	b29b      	uxth	r3, r3
   19112:	4413      	add	r3, r2
   19114:	82bb      	strh	r3, [r7, #20]
   19116:	687b      	ldr	r3, [r7, #4]
   19118:	3302      	adds	r3, #2
   1911a:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   1911c:	687b      	ldr	r3, [r7, #4]
   1911e:	781b      	ldrb	r3, [r3, #0]
   19120:	b29a      	uxth	r2, r3
   19122:	687b      	ldr	r3, [r7, #4]
   19124:	3301      	adds	r3, #1
   19126:	781b      	ldrb	r3, [r3, #0]
   19128:	b29b      	uxth	r3, r3
   1912a:	021b      	lsls	r3, r3, #8
   1912c:	b29b      	uxth	r3, r3
   1912e:	4413      	add	r3, r2
   19130:	827b      	strh	r3, [r7, #18]
   19132:	687b      	ldr	r3, [r7, #4]
   19134:	3302      	adds	r3, #2
   19136:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   19138:	8a7a      	ldrh	r2, [r7, #18]
   1913a:	8abb      	ldrh	r3, [r7, #20]
   1913c:	4611      	mov	r1, r2
   1913e:	4618      	mov	r0, r3
   19140:	f7fc fceb 	bl	15b1a <HciLeWriteDefDataLen>
        break;
   19144:	e044      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   19146:	4b29      	ldr	r3, [pc, #164]	; (191ec <hciCoreResetSequence+0x2c4>)
   19148:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1914c:	2b00      	cmp	r3, #0
   1914e:	d007      	beq.n	19160 <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   19150:	4b26      	ldr	r3, [pc, #152]	; (191ec <hciCoreResetSequence+0x2c4>)
   19152:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   19156:	8afa      	ldrh	r2, [r7, #22]
   19158:	4611      	mov	r1, r2
   1915a:	6878      	ldr	r0, [r7, #4]
   1915c:	4798      	blx	r3
        break;
   1915e:	e037      	b.n	191d0 <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   19160:	4b22      	ldr	r3, [pc, #136]	; (191ec <hciCoreResetSequence+0x2c4>)
   19162:	2200      	movs	r2, #0
   19164:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   19168:	4b20      	ldr	r3, [pc, #128]	; (191ec <hciCoreResetSequence+0x2c4>)
   1916a:	2200      	movs	r2, #0
   1916c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   19170:	4b1e      	ldr	r3, [pc, #120]	; (191ec <hciCoreResetSequence+0x2c4>)
   19172:	2200      	movs	r2, #0
   19174:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   19178:	f7fc fdc7 	bl	15d0a <HciLeRandCmd>
        break;
   1917c:	e028      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1917e:	4b1b      	ldr	r3, [pc, #108]	; (191ec <hciCoreResetSequence+0x2c4>)
   19180:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   19184:	2b00      	cmp	r3, #0
   19186:	d022      	beq.n	191ce <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   19188:	4b18      	ldr	r3, [pc, #96]	; (191ec <hciCoreResetSequence+0x2c4>)
   1918a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1918e:	8afa      	ldrh	r2, [r7, #22]
   19190:	4611      	mov	r1, r2
   19192:	6878      	ldr	r0, [r7, #4]
   19194:	4798      	blx	r3
        break;
   19196:	e01a      	b.n	191ce <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   19198:	4b0f      	ldr	r3, [pc, #60]	; (191d8 <hciCoreResetSequence+0x2b0>)
   1919a:	781b      	ldrb	r3, [r3, #0]
   1919c:	2b02      	cmp	r3, #2
   1919e:	d808      	bhi.n	191b2 <hciCoreResetSequence+0x28a>
          randCnt++;
   191a0:	4b0d      	ldr	r3, [pc, #52]	; (191d8 <hciCoreResetSequence+0x2b0>)
   191a2:	781b      	ldrb	r3, [r3, #0]
   191a4:	3301      	adds	r3, #1
   191a6:	b2da      	uxtb	r2, r3
   191a8:	4b0b      	ldr	r3, [pc, #44]	; (191d8 <hciCoreResetSequence+0x2b0>)
   191aa:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   191ac:	f7fc fdad 	bl	15d0a <HciLeRandCmd>
        break;
   191b0:	e00e      	b.n	191d0 <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   191b2:	4b0f      	ldr	r3, [pc, #60]	; (191f0 <hciCoreResetSequence+0x2c8>)
   191b4:	2200      	movs	r2, #0
   191b6:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   191b8:	2300      	movs	r3, #0
   191ba:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   191bc:	2300      	movs	r3, #0
   191be:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   191c0:	4b0b      	ldr	r3, [pc, #44]	; (191f0 <hciCoreResetSequence+0x2c8>)
   191c2:	689b      	ldr	r3, [r3, #8]
   191c4:	f107 020c 	add.w	r2, r7, #12
   191c8:	4610      	mov	r0, r2
   191ca:	4798      	blx	r3
        break;
   191cc:	e000      	b.n	191d0 <hciCoreResetSequence+0x2a8>
        break;
   191ce:	bf00      	nop
    }
  }
}
   191d0:	bf00      	nop
   191d2:	3718      	adds	r7, #24
   191d4:	46bd      	mov	sp, r7
   191d6:	bd80      	pop	{r7, pc}
   191d8:	100196f0 	.word	0x100196f0
   191dc:	0003c710 	.word	0x0003c710
   191e0:	0003c718 	.word	0x0003c718
   191e4:	0003c720 	.word	0x0003c720
   191e8:	10044364 	.word	0x10044364
   191ec:	1004427c 	.word	0x1004427c
   191f0:	10044390 	.word	0x10044390

000191f4 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   191f4:	b480      	push	{r7}
   191f6:	b083      	sub	sp, #12
   191f8:	af00      	add	r7, sp, #0
   191fa:	4603      	mov	r3, r0
   191fc:	6039      	str	r1, [r7, #0]
   191fe:	80fb      	strh	r3, [r7, #6]
   19200:	4613      	mov	r3, r2
   19202:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   19204:	2312      	movs	r3, #18
}
   19206:	4618      	mov	r0, r3
   19208:	370c      	adds	r7, #12
   1920a:	46bd      	mov	sp, r7
   1920c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19210:	4770      	bx	lr

00019212 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   19212:	b480      	push	{r7}
   19214:	b083      	sub	sp, #12
   19216:	af00      	add	r7, sp, #0
   19218:	4603      	mov	r3, r0
   1921a:	71fb      	strb	r3, [r7, #7]

}
   1921c:	bf00      	nop
   1921e:	370c      	adds	r7, #12
   19220:	46bd      	mov	sp, r7
   19222:	f85d 7b04 	ldr.w	r7, [sp], #4
   19226:	4770      	bx	lr

00019228 <SvcVolesAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcVolesAddGroup(void)
{
   19228:	b580      	push	{r7, lr}
   1922a:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcVolesGroup);
   1922c:	4802      	ldr	r0, [pc, #8]	; (19238 <SvcVolesAddGroup+0x10>)
   1922e:	f7f4 fff3 	bl	e218 <AttsAddGroup>
}
   19232:	bf00      	nop
   19234:	bd80      	pop	{r7, pc}
   19236:	bf00      	nop
   19238:	10017ee8 	.word	0x10017ee8

0001923c <SvcVolesCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcVolesCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1923c:	b480      	push	{r7}
   1923e:	b083      	sub	sp, #12
   19240:	af00      	add	r7, sp, #0
   19242:	6078      	str	r0, [r7, #4]
   19244:	6039      	str	r1, [r7, #0]
  svcVolesGroup.readCback = readCback;
   19246:	4a06      	ldr	r2, [pc, #24]	; (19260 <SvcVolesCbackRegister+0x24>)
   19248:	687b      	ldr	r3, [r7, #4]
   1924a:	6093      	str	r3, [r2, #8]
  svcVolesGroup.writeCback = writeCback;
   1924c:	4a04      	ldr	r2, [pc, #16]	; (19260 <SvcVolesCbackRegister+0x24>)
   1924e:	683b      	ldr	r3, [r7, #0]
   19250:	60d3      	str	r3, [r2, #12]
}
   19252:	bf00      	nop
   19254:	370c      	adds	r7, #12
   19256:	46bd      	mov	sp, r7
   19258:	f85d 7b04 	ldr.w	r7, [sp], #4
   1925c:	4770      	bx	lr
   1925e:	bf00      	nop
   19260:	10017ee8 	.word	0x10017ee8

00019264 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   19264:	b480      	push	{r7}
   19266:	b083      	sub	sp, #12
   19268:	af00      	add	r7, sp, #0
   1926a:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   1926c:	4a04      	ldr	r2, [pc, #16]	; (19280 <HciEvtRegister+0x1c>)
   1926e:	687b      	ldr	r3, [r7, #4]
   19270:	6093      	str	r3, [r2, #8]
}
   19272:	bf00      	nop
   19274:	370c      	adds	r7, #12
   19276:	46bd      	mov	sp, r7
   19278:	f85d 7b04 	ldr.w	r7, [sp], #4
   1927c:	4770      	bx	lr
   1927e:	bf00      	nop
   19280:	10044390 	.word	0x10044390

00019284 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   19284:	b480      	push	{r7}
   19286:	b083      	sub	sp, #12
   19288:	af00      	add	r7, sp, #0
   1928a:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   1928c:	4a04      	ldr	r2, [pc, #16]	; (192a0 <HciSecRegister+0x1c>)
   1928e:	687b      	ldr	r3, [r7, #4]
   19290:	60d3      	str	r3, [r2, #12]
}
   19292:	bf00      	nop
   19294:	370c      	adds	r7, #12
   19296:	46bd      	mov	sp, r7
   19298:	f85d 7b04 	ldr.w	r7, [sp], #4
   1929c:	4770      	bx	lr
   1929e:	bf00      	nop
   192a0:	10044390 	.word	0x10044390

000192a4 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   192a4:	b480      	push	{r7}
   192a6:	b083      	sub	sp, #12
   192a8:	af00      	add	r7, sp, #0
   192aa:	6078      	str	r0, [r7, #4]
   192ac:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   192ae:	4a06      	ldr	r2, [pc, #24]	; (192c8 <HciAclRegister+0x24>)
   192b0:	687b      	ldr	r3, [r7, #4]
   192b2:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   192b4:	4a04      	ldr	r2, [pc, #16]	; (192c8 <HciAclRegister+0x24>)
   192b6:	683b      	ldr	r3, [r7, #0]
   192b8:	6153      	str	r3, [r2, #20]
}
   192ba:	bf00      	nop
   192bc:	370c      	adds	r7, #12
   192be:	46bd      	mov	sp, r7
   192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   192c4:	4770      	bx	lr
   192c6:	bf00      	nop
   192c8:	10044390 	.word	0x10044390

000192cc <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   192cc:	b580      	push	{r7, lr}
   192ce:	b082      	sub	sp, #8
   192d0:	af00      	add	r7, sp, #0
   192d2:	4603      	mov	r3, r0
   192d4:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   192d6:	4a07      	ldr	r2, [pc, #28]	; (192f4 <HciHandlerInit+0x28>)
   192d8:	79fb      	ldrb	r3, [r7, #7]
   192da:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   192dc:	4b05      	ldr	r3, [pc, #20]	; (192f4 <HciHandlerInit+0x28>)
   192de:	2200      	movs	r2, #0
   192e0:	601a      	str	r2, [r3, #0]
   192e2:	4b04      	ldr	r3, [pc, #16]	; (192f4 <HciHandlerInit+0x28>)
   192e4:	2200      	movs	r2, #0
   192e6:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   192e8:	f7fd fc76 	bl	16bd8 <HciCoreInit>
}
   192ec:	bf00      	nop
   192ee:	3708      	adds	r7, #8
   192f0:	46bd      	mov	sp, r7
   192f2:	bd80      	pop	{r7, pc}
   192f4:	10044390 	.word	0x10044390

000192f8 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   192f8:	b580      	push	{r7, lr}
   192fa:	b082      	sub	sp, #8
   192fc:	af00      	add	r7, sp, #0
   192fe:	4603      	mov	r3, r0
   19300:	6039      	str	r1, [r7, #0]
   19302:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   19304:	79fb      	ldrb	r3, [r7, #7]
   19306:	6839      	ldr	r1, [r7, #0]
   19308:	4618      	mov	r0, r3
   1930a:	f7fd fdf3 	bl	16ef4 <HciCoreHandler>
}
   1930e:	bf00      	nop
   19310:	3708      	adds	r7, #8
   19312:	46bd      	mov	sp, r7
   19314:	bd80      	pop	{r7, pc}

00019316 <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   19316:	b480      	push	{r7}
   19318:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   1931a:	bf00      	nop
}
   1931c:	46bd      	mov	sp, r7
   1931e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19322:	4770      	bx	lr

00019324 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   19324:	b580      	push	{r7, lr}
   19326:	b084      	sub	sp, #16
   19328:	af00      	add	r7, sp, #0
   1932a:	4603      	mov	r3, r0
   1932c:	6039      	str	r1, [r7, #0]
   1932e:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19330:	4b22      	ldr	r3, [pc, #136]	; (193bc <AppDbNewRecord+0x98>)
   19332:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19334:	2303      	movs	r3, #3
   19336:	72fb      	strb	r3, [r7, #11]
   19338:	e00a      	b.n	19350 <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   1933a:	68fb      	ldr	r3, [r7, #12]
   1933c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19340:	2b00      	cmp	r3, #0
   19342:	d009      	beq.n	19358 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19344:	7afb      	ldrb	r3, [r7, #11]
   19346:	3b01      	subs	r3, #1
   19348:	72fb      	strb	r3, [r7, #11]
   1934a:	68fb      	ldr	r3, [r7, #12]
   1934c:	33b0      	adds	r3, #176	; 0xb0
   1934e:	60fb      	str	r3, [r7, #12]
   19350:	7afb      	ldrb	r3, [r7, #11]
   19352:	2b00      	cmp	r3, #0
   19354:	d1f1      	bne.n	1933a <AppDbNewRecord+0x16>
   19356:	e000      	b.n	1935a <AppDbNewRecord+0x36>
    {
      break;
   19358:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   1935a:	7afb      	ldrb	r3, [r7, #11]
   1935c:	2b00      	cmp	r3, #0
   1935e:	d10f      	bne.n	19380 <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   19360:	4b17      	ldr	r3, [pc, #92]	; (193c0 <AppDbNewRecord+0x9c>)
   19362:	681b      	ldr	r3, [r3, #0]
   19364:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   19366:	4b16      	ldr	r3, [pc, #88]	; (193c0 <AppDbNewRecord+0x9c>)
   19368:	681b      	ldr	r3, [r3, #0]
   1936a:	33b0      	adds	r3, #176	; 0xb0
   1936c:	4a14      	ldr	r2, [pc, #80]	; (193c0 <AppDbNewRecord+0x9c>)
   1936e:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   19370:	4b13      	ldr	r3, [pc, #76]	; (193c0 <AppDbNewRecord+0x9c>)
   19372:	681b      	ldr	r3, [r3, #0]
   19374:	4a13      	ldr	r2, [pc, #76]	; (193c4 <AppDbNewRecord+0xa0>)
   19376:	4293      	cmp	r3, r2
   19378:	d102      	bne.n	19380 <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   1937a:	4b11      	ldr	r3, [pc, #68]	; (193c0 <AppDbNewRecord+0x9c>)
   1937c:	4a0f      	ldr	r2, [pc, #60]	; (193bc <AppDbNewRecord+0x98>)
   1937e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   19380:	22b0      	movs	r2, #176	; 0xb0
   19382:	2100      	movs	r1, #0
   19384:	68f8      	ldr	r0, [r7, #12]
   19386:	f7f2 ffe9 	bl	c35c <memset>
  pRec->inUse = TRUE;
   1938a:	68fb      	ldr	r3, [r7, #12]
   1938c:	2201      	movs	r2, #1
   1938e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   19392:	68fb      	ldr	r3, [r7, #12]
   19394:	79fa      	ldrb	r2, [r7, #7]
   19396:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   19398:	68fb      	ldr	r3, [r7, #12]
   1939a:	6839      	ldr	r1, [r7, #0]
   1939c:	4618      	mov	r0, r3
   1939e:	f006 fc58 	bl	1fc52 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   193a2:	68fb      	ldr	r3, [r7, #12]
   193a4:	2200      	movs	r2, #0
   193a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   193aa:	68fb      	ldr	r3, [r7, #12]
   193ac:	2200      	movs	r2, #0
   193ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   193b2:	68fb      	ldr	r3, [r7, #12]
}
   193b4:	4618      	mov	r0, r3
   193b6:	3710      	adds	r7, #16
   193b8:	46bd      	mov	sp, r7
   193ba:	bd80      	pop	{r7, pc}
   193bc:	100196f8 	.word	0x100196f8
   193c0:	10017efc 	.word	0x10017efc
   193c4:	10019908 	.word	0x10019908

000193c8 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   193c8:	b580      	push	{r7, lr}
   193ca:	b084      	sub	sp, #16
   193cc:	af00      	add	r7, sp, #0
   193ce:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   193d0:	687b      	ldr	r3, [r7, #4]
   193d2:	2b00      	cmp	r3, #0
   193d4:	d102      	bne.n	193dc <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   193d6:	4b14      	ldr	r3, [pc, #80]	; (19428 <AppDbGetNextRecord+0x60>)
   193d8:	60fb      	str	r3, [r7, #12]
   193da:	e01c      	b.n	19416 <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   193dc:	6878      	ldr	r0, [r7, #4]
   193de:	f000 f859 	bl	19494 <AppDbRecordInUse>
   193e2:	4603      	mov	r3, r0
   193e4:	2b00      	cmp	r3, #0
   193e6:	d005      	beq.n	193f4 <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   193e8:	687b      	ldr	r3, [r7, #4]
   193ea:	60fb      	str	r3, [r7, #12]
    pRec++;
   193ec:	68fb      	ldr	r3, [r7, #12]
   193ee:	33b0      	adds	r3, #176	; 0xb0
   193f0:	60fb      	str	r3, [r7, #12]
   193f2:	e010      	b.n	19416 <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   193f4:	2300      	movs	r3, #0
   193f6:	e013      	b.n	19420 <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   193f8:	68fb      	ldr	r3, [r7, #12]
   193fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   193fe:	2b00      	cmp	r3, #0
   19400:	d006      	beq.n	19410 <AppDbGetNextRecord+0x48>
   19402:	68fb      	ldr	r3, [r7, #12]
   19404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19408:	2b00      	cmp	r3, #0
   1940a:	d001      	beq.n	19410 <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   1940c:	68fb      	ldr	r3, [r7, #12]
   1940e:	e007      	b.n	19420 <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   19410:	68fb      	ldr	r3, [r7, #12]
   19412:	33b0      	adds	r3, #176	; 0xb0
   19414:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   19416:	68fb      	ldr	r3, [r7, #12]
   19418:	4a04      	ldr	r2, [pc, #16]	; (1942c <AppDbGetNextRecord+0x64>)
   1941a:	4293      	cmp	r3, r2
   1941c:	d3ec      	bcc.n	193f8 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   1941e:	2300      	movs	r3, #0
}
   19420:	4618      	mov	r0, r3
   19422:	3710      	adds	r7, #16
   19424:	46bd      	mov	sp, r7
   19426:	bd80      	pop	{r7, pc}
   19428:	100196f8 	.word	0x100196f8
   1942c:	10019908 	.word	0x10019908

00019430 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   19430:	b480      	push	{r7}
   19432:	b083      	sub	sp, #12
   19434:	af00      	add	r7, sp, #0
   19436:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   19438:	687b      	ldr	r3, [r7, #4]
   1943a:	2200      	movs	r2, #0
   1943c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   19440:	bf00      	nop
   19442:	370c      	adds	r7, #12
   19444:	46bd      	mov	sp, r7
   19446:	f85d 7b04 	ldr.w	r7, [sp], #4
   1944a:	4770      	bx	lr

0001944c <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   1944c:	b480      	push	{r7}
   1944e:	b083      	sub	sp, #12
   19450:	af00      	add	r7, sp, #0
   19452:	6078      	str	r0, [r7, #4]
   19454:	460b      	mov	r3, r1
   19456:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   19458:	687b      	ldr	r3, [r7, #4]
   1945a:	2201      	movs	r2, #1
   1945c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   19460:	687b      	ldr	r3, [r7, #4]
   19462:	78fa      	ldrb	r2, [r7, #3]
   19464:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   19468:	bf00      	nop
   1946a:	370c      	adds	r7, #12
   1946c:	46bd      	mov	sp, r7
   1946e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19472:	4770      	bx	lr

00019474 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   19474:	b580      	push	{r7, lr}
   19476:	b082      	sub	sp, #8
   19478:	af00      	add	r7, sp, #0
   1947a:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   1947c:	687b      	ldr	r3, [r7, #4]
   1947e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19482:	2b00      	cmp	r3, #0
   19484:	d102      	bne.n	1948c <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   19486:	6878      	ldr	r0, [r7, #4]
   19488:	f7ff ffd2 	bl	19430 <AppDbDeleteRecord>
  }
}
   1948c:	bf00      	nop
   1948e:	3708      	adds	r7, #8
   19490:	46bd      	mov	sp, r7
   19492:	bd80      	pop	{r7, pc}

00019494 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   19494:	b480      	push	{r7}
   19496:	b085      	sub	sp, #20
   19498:	af00      	add	r7, sp, #0
   1949a:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   1949c:	4b12      	ldr	r3, [pc, #72]	; (194e8 <AppDbRecordInUse+0x54>)
   1949e:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   194a0:	2303      	movs	r3, #3
   194a2:	72fb      	strb	r3, [r7, #11]
   194a4:	e015      	b.n	194d2 <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   194a6:	68fb      	ldr	r3, [r7, #12]
   194a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   194ac:	2b00      	cmp	r3, #0
   194ae:	d00a      	beq.n	194c6 <AppDbRecordInUse+0x32>
   194b0:	68fb      	ldr	r3, [r7, #12]
   194b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   194b6:	2b00      	cmp	r3, #0
   194b8:	d005      	beq.n	194c6 <AppDbRecordInUse+0x32>
   194ba:	68fa      	ldr	r2, [r7, #12]
   194bc:	687b      	ldr	r3, [r7, #4]
   194be:	429a      	cmp	r2, r3
   194c0:	d101      	bne.n	194c6 <AppDbRecordInUse+0x32>
    {
      return TRUE;
   194c2:	2301      	movs	r3, #1
   194c4:	e009      	b.n	194da <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   194c6:	7afb      	ldrb	r3, [r7, #11]
   194c8:	3b01      	subs	r3, #1
   194ca:	72fb      	strb	r3, [r7, #11]
   194cc:	68fb      	ldr	r3, [r7, #12]
   194ce:	33b0      	adds	r3, #176	; 0xb0
   194d0:	60fb      	str	r3, [r7, #12]
   194d2:	7afb      	ldrb	r3, [r7, #11]
   194d4:	2b00      	cmp	r3, #0
   194d6:	d1e6      	bne.n	194a6 <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   194d8:	2300      	movs	r3, #0
}
   194da:	4618      	mov	r0, r3
   194dc:	3714      	adds	r7, #20
   194de:	46bd      	mov	sp, r7
   194e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   194e4:	4770      	bx	lr
   194e6:	bf00      	nop
   194e8:	100196f8 	.word	0x100196f8

000194ec <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   194ec:	b480      	push	{r7}
   194ee:	b083      	sub	sp, #12
   194f0:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   194f2:	4b0e      	ldr	r3, [pc, #56]	; (1952c <AppDbCheckBonded+0x40>)
   194f4:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   194f6:	2303      	movs	r3, #3
   194f8:	70fb      	strb	r3, [r7, #3]
   194fa:	e00c      	b.n	19516 <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   194fc:	687b      	ldr	r3, [r7, #4]
   194fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19502:	2b00      	cmp	r3, #0
   19504:	d001      	beq.n	1950a <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   19506:	2301      	movs	r3, #1
   19508:	e009      	b.n	1951e <AppDbCheckBonded+0x32>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1950a:	78fb      	ldrb	r3, [r7, #3]
   1950c:	3b01      	subs	r3, #1
   1950e:	70fb      	strb	r3, [r7, #3]
   19510:	687b      	ldr	r3, [r7, #4]
   19512:	33b0      	adds	r3, #176	; 0xb0
   19514:	607b      	str	r3, [r7, #4]
   19516:	78fb      	ldrb	r3, [r7, #3]
   19518:	2b00      	cmp	r3, #0
   1951a:	d1ef      	bne.n	194fc <AppDbCheckBonded+0x10>
    }
  }
  
  return FALSE;
   1951c:	2300      	movs	r3, #0
}
   1951e:	4618      	mov	r0, r3
   19520:	370c      	adds	r7, #12
   19522:	46bd      	mov	sp, r7
   19524:	f85d 7b04 	ldr.w	r7, [sp], #4
   19528:	4770      	bx	lr
   1952a:	bf00      	nop
   1952c:	100196f8 	.word	0x100196f8

00019530 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   19530:	b580      	push	{r7, lr}
   19532:	b084      	sub	sp, #16
   19534:	af00      	add	r7, sp, #0
   19536:	4603      	mov	r3, r0
   19538:	6039      	str	r1, [r7, #0]
   1953a:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   1953c:	4b16      	ldr	r3, [pc, #88]	; (19598 <AppDbFindByAddr+0x68>)
   1953e:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   19540:	79fb      	ldrb	r3, [r7, #7]
   19542:	4618      	mov	r0, r3
   19544:	f7f6 ffd0 	bl	104e8 <DmHostAddrType>
   19548:	4603      	mov	r3, r0
   1954a:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1954c:	2303      	movs	r3, #3
   1954e:	72fb      	strb	r3, [r7, #11]
   19550:	e019      	b.n	19586 <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   19552:	68fb      	ldr	r3, [r7, #12]
   19554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19558:	2b00      	cmp	r3, #0
   1955a:	d00e      	beq.n	1957a <AppDbFindByAddr+0x4a>
   1955c:	68fb      	ldr	r3, [r7, #12]
   1955e:	799b      	ldrb	r3, [r3, #6]
   19560:	7aba      	ldrb	r2, [r7, #10]
   19562:	429a      	cmp	r2, r3
   19564:	d109      	bne.n	1957a <AppDbFindByAddr+0x4a>
   19566:	68fb      	ldr	r3, [r7, #12]
   19568:	6839      	ldr	r1, [r7, #0]
   1956a:	4618      	mov	r0, r3
   1956c:	f006 fb7f 	bl	1fc6e <BdaCmp>
   19570:	4603      	mov	r3, r0
   19572:	2b00      	cmp	r3, #0
   19574:	d001      	beq.n	1957a <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   19576:	68fb      	ldr	r3, [r7, #12]
   19578:	e009      	b.n	1958e <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1957a:	7afb      	ldrb	r3, [r7, #11]
   1957c:	3b01      	subs	r3, #1
   1957e:	72fb      	strb	r3, [r7, #11]
   19580:	68fb      	ldr	r3, [r7, #12]
   19582:	33b0      	adds	r3, #176	; 0xb0
   19584:	60fb      	str	r3, [r7, #12]
   19586:	7afb      	ldrb	r3, [r7, #11]
   19588:	2b00      	cmp	r3, #0
   1958a:	d1e2      	bne.n	19552 <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   1958c:	2300      	movs	r3, #0
}
   1958e:	4618      	mov	r0, r3
   19590:	3710      	adds	r7, #16
   19592:	46bd      	mov	sp, r7
   19594:	bd80      	pop	{r7, pc}
   19596:	bf00      	nop
   19598:	100196f8 	.word	0x100196f8

0001959c <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   1959c:	b580      	push	{r7, lr}
   1959e:	b084      	sub	sp, #16
   195a0:	af00      	add	r7, sp, #0
   195a2:	4603      	mov	r3, r0
   195a4:	6039      	str	r1, [r7, #0]
   195a6:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   195a8:	4b14      	ldr	r3, [pc, #80]	; (195fc <AppDbFindByLtkReq+0x60>)
   195aa:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   195ac:	2303      	movs	r3, #3
   195ae:	72fb      	strb	r3, [r7, #11]
   195b0:	e01c      	b.n	195ec <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   195b2:	68fb      	ldr	r3, [r7, #12]
   195b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   195b8:	2b00      	cmp	r3, #0
   195ba:	d011      	beq.n	195e0 <AppDbFindByLtkReq+0x44>
   195bc:	68fb      	ldr	r3, [r7, #12]
   195be:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   195c2:	88fa      	ldrh	r2, [r7, #6]
   195c4:	429a      	cmp	r2, r3
   195c6:	d10b      	bne.n	195e0 <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   195c8:	68fb      	ldr	r3, [r7, #12]
   195ca:	3344      	adds	r3, #68	; 0x44
   195cc:	2208      	movs	r2, #8
   195ce:	6839      	ldr	r1, [r7, #0]
   195d0:	4618      	mov	r0, r3
   195d2:	f7f2 fd95 	bl	c100 <memcmp>
   195d6:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   195d8:	2b00      	cmp	r3, #0
   195da:	d101      	bne.n	195e0 <AppDbFindByLtkReq+0x44>
    {
      return (appDbHdl_t) pRec;
   195dc:	68fb      	ldr	r3, [r7, #12]
   195de:	e009      	b.n	195f4 <AppDbFindByLtkReq+0x58>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   195e0:	7afb      	ldrb	r3, [r7, #11]
   195e2:	3b01      	subs	r3, #1
   195e4:	72fb      	strb	r3, [r7, #11]
   195e6:	68fb      	ldr	r3, [r7, #12]
   195e8:	33b0      	adds	r3, #176	; 0xb0
   195ea:	60fb      	str	r3, [r7, #12]
   195ec:	7afb      	ldrb	r3, [r7, #11]
   195ee:	2b00      	cmp	r3, #0
   195f0:	d1df      	bne.n	195b2 <AppDbFindByLtkReq+0x16>
    }
  }
  
  return APP_DB_HDL_NONE;
   195f2:	2300      	movs	r3, #0
}
   195f4:	4618      	mov	r0, r3
   195f6:	3710      	adds	r7, #16
   195f8:	46bd      	mov	sp, r7
   195fa:	bd80      	pop	{r7, pc}
   195fc:	100196f8 	.word	0x100196f8

00019600 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   19600:	b480      	push	{r7}
   19602:	b087      	sub	sp, #28
   19604:	af00      	add	r7, sp, #0
   19606:	60f8      	str	r0, [r7, #12]
   19608:	460b      	mov	r3, r1
   1960a:	607a      	str	r2, [r7, #4]
   1960c:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   1960e:	2300      	movs	r3, #0
   19610:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   19612:	68fb      	ldr	r3, [r7, #12]
   19614:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   19618:	7afb      	ldrb	r3, [r7, #11]
   1961a:	4013      	ands	r3, r2
   1961c:	b2db      	uxtb	r3, r3
   1961e:	2b00      	cmp	r3, #0
   19620:	d031      	beq.n	19686 <AppDbGetKey+0x86>
  {
    switch(type)
   19622:	7afb      	ldrb	r3, [r7, #11]
   19624:	3b01      	subs	r3, #1
   19626:	2b07      	cmp	r3, #7
   19628:	d82c      	bhi.n	19684 <AppDbGetKey+0x84>
   1962a:	a201      	add	r2, pc, #4	; (adr r2, 19630 <AppDbGetKey+0x30>)
   1962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19630:	00019651 	.word	0x00019651
   19634:	00019663 	.word	0x00019663
   19638:	00019685 	.word	0x00019685
   1963c:	00019675 	.word	0x00019675
   19640:	00019685 	.word	0x00019685
   19644:	00019685 	.word	0x00019685
   19648:	00019685 	.word	0x00019685
   1964c:	0001967d 	.word	0x0001967d
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   19650:	68fb      	ldr	r3, [r7, #12]
   19652:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   19656:	687b      	ldr	r3, [r7, #4]
   19658:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1965a:	68fb      	ldr	r3, [r7, #12]
   1965c:	3334      	adds	r3, #52	; 0x34
   1965e:	617b      	str	r3, [r7, #20]
        break;
   19660:	e011      	b.n	19686 <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   19662:	68fb      	ldr	r3, [r7, #12]
   19664:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   19668:	687b      	ldr	r3, [r7, #4]
   1966a:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   1966c:	68fb      	ldr	r3, [r7, #12]
   1966e:	3350      	adds	r3, #80	; 0x50
   19670:	617b      	str	r3, [r7, #20]
        break;
   19672:	e008      	b.n	19686 <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   19674:	68fb      	ldr	r3, [r7, #12]
   19676:	3307      	adds	r3, #7
   19678:	617b      	str	r3, [r7, #20]
        break;
   1967a:	e004      	b.n	19686 <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   1967c:	68fb      	ldr	r3, [r7, #12]
   1967e:	331e      	adds	r3, #30
   19680:	617b      	str	r3, [r7, #20]
        break;
   19682:	e000      	b.n	19686 <AppDbGetKey+0x86>
        
      default:
        break;
   19684:	bf00      	nop
    }
  }
  
  return pKey;
   19686:	697b      	ldr	r3, [r7, #20]
}
   19688:	4618      	mov	r0, r3
   1968a:	371c      	adds	r7, #28
   1968c:	46bd      	mov	sp, r7
   1968e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19692:	4770      	bx	lr

00019694 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   19694:	b5b0      	push	{r4, r5, r7, lr}
   19696:	b082      	sub	sp, #8
   19698:	af00      	add	r7, sp, #0
   1969a:	6078      	str	r0, [r7, #4]
   1969c:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   1969e:	683b      	ldr	r3, [r7, #0]
   196a0:	7f9b      	ldrb	r3, [r3, #30]
   196a2:	3b01      	subs	r3, #1
   196a4:	2b07      	cmp	r3, #7
   196a6:	d86c      	bhi.n	19782 <AppDbSetKey+0xee>
   196a8:	a201      	add	r2, pc, #4	; (adr r2, 196b0 <AppDbSetKey+0x1c>)
   196aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   196ae:	bf00      	nop
   196b0:	000196d1 	.word	0x000196d1
   196b4:	000196fb 	.word	0x000196fb
   196b8:	00019783 	.word	0x00019783
   196bc:	00019725 	.word	0x00019725
   196c0:	00019783 	.word	0x00019783
   196c4:	00019783 	.word	0x00019783
   196c8:	00019783 	.word	0x00019783
   196cc:	00019761 	.word	0x00019761
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   196d0:	683b      	ldr	r3, [r7, #0]
   196d2:	7fda      	ldrb	r2, [r3, #31]
   196d4:	687b      	ldr	r3, [r7, #4]
   196d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   196da:	687a      	ldr	r2, [r7, #4]
   196dc:	683b      	ldr	r3, [r7, #0]
   196de:	f102 0434 	add.w	r4, r2, #52	; 0x34
   196e2:	1d1d      	adds	r5, r3, #4
   196e4:	6828      	ldr	r0, [r5, #0]
   196e6:	6869      	ldr	r1, [r5, #4]
   196e8:	68aa      	ldr	r2, [r5, #8]
   196ea:	68eb      	ldr	r3, [r5, #12]
   196ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   196ee:	6928      	ldr	r0, [r5, #16]
   196f0:	6969      	ldr	r1, [r5, #20]
   196f2:	c403      	stmia	r4!, {r0, r1}
   196f4:	8b2b      	ldrh	r3, [r5, #24]
   196f6:	8023      	strh	r3, [r4, #0]
      break;
   196f8:	e044      	b.n	19784 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   196fa:	683b      	ldr	r3, [r7, #0]
   196fc:	7fda      	ldrb	r2, [r3, #31]
   196fe:	687b      	ldr	r3, [r7, #4]
   19700:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   19704:	687a      	ldr	r2, [r7, #4]
   19706:	683b      	ldr	r3, [r7, #0]
   19708:	f102 0450 	add.w	r4, r2, #80	; 0x50
   1970c:	1d1d      	adds	r5, r3, #4
   1970e:	6828      	ldr	r0, [r5, #0]
   19710:	6869      	ldr	r1, [r5, #4]
   19712:	68aa      	ldr	r2, [r5, #8]
   19714:	68eb      	ldr	r3, [r5, #12]
   19716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19718:	6928      	ldr	r0, [r5, #16]
   1971a:	6969      	ldr	r1, [r5, #20]
   1971c:	c403      	stmia	r4!, {r0, r1}
   1971e:	8b2b      	ldrh	r3, [r5, #24]
   19720:	8023      	strh	r3, [r4, #0]
      break;
   19722:	e02f      	b.n	19784 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   19724:	687b      	ldr	r3, [r7, #4]
   19726:	683a      	ldr	r2, [r7, #0]
   19728:	3307      	adds	r3, #7
   1972a:	3204      	adds	r2, #4
   1972c:	6811      	ldr	r1, [r2, #0]
   1972e:	6855      	ldr	r5, [r2, #4]
   19730:	6894      	ldr	r4, [r2, #8]
   19732:	68d0      	ldr	r0, [r2, #12]
   19734:	6019      	str	r1, [r3, #0]
   19736:	605d      	str	r5, [r3, #4]
   19738:	609c      	str	r4, [r3, #8]
   1973a:	60d8      	str	r0, [r3, #12]
   1973c:	6911      	ldr	r1, [r2, #16]
   1973e:	6119      	str	r1, [r3, #16]
   19740:	8a91      	ldrh	r1, [r2, #20]
   19742:	7d92      	ldrb	r2, [r2, #22]
   19744:	8299      	strh	r1, [r3, #20]
   19746:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   19748:	683b      	ldr	r3, [r7, #0]
   1974a:	7e9a      	ldrb	r2, [r3, #26]
   1974c:	687b      	ldr	r3, [r7, #4]
   1974e:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   19750:	687a      	ldr	r2, [r7, #4]
   19752:	683b      	ldr	r3, [r7, #0]
   19754:	3314      	adds	r3, #20
   19756:	4619      	mov	r1, r3
   19758:	4610      	mov	r0, r2
   1975a:	f006 fa7a 	bl	1fc52 <BdaCpy>
      break;
   1975e:	e011      	b.n	19784 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   19760:	687b      	ldr	r3, [r7, #4]
   19762:	683a      	ldr	r2, [r7, #0]
   19764:	331e      	adds	r3, #30
   19766:	3204      	adds	r2, #4
   19768:	6814      	ldr	r4, [r2, #0]
   1976a:	6850      	ldr	r0, [r2, #4]
   1976c:	6891      	ldr	r1, [r2, #8]
   1976e:	68d2      	ldr	r2, [r2, #12]
   19770:	601c      	str	r4, [r3, #0]
   19772:	6058      	str	r0, [r3, #4]
   19774:	6099      	str	r1, [r3, #8]
   19776:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   19778:	687b      	ldr	r3, [r7, #4]
   1977a:	2200      	movs	r2, #0
   1977c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   19780:	e000      	b.n	19784 <AppDbSetKey+0xf0>
      
    default:
      break;
   19782:	bf00      	nop
  }
}
   19784:	bf00      	nop
   19786:	3708      	adds	r7, #8
   19788:	46bd      	mov	sp, r7
   1978a:	bdb0      	pop	{r4, r5, r7, pc}

0001978c <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   1978c:	b480      	push	{r7}
   1978e:	b083      	sub	sp, #12
   19790:	af00      	add	r7, sp, #0
   19792:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   19794:	687b      	ldr	r3, [r7, #4]
   19796:	336c      	adds	r3, #108	; 0x6c
}
   19798:	4618      	mov	r0, r3
   1979a:	370c      	adds	r7, #12
   1979c:	46bd      	mov	sp, r7
   1979e:	f85d 7b04 	ldr.w	r7, [sp], #4
   197a2:	4770      	bx	lr

000197a4 <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   197a4:	b480      	push	{r7}
   197a6:	b083      	sub	sp, #12
   197a8:	af00      	add	r7, sp, #0
   197aa:	6078      	str	r0, [r7, #4]
   197ac:	460b      	mov	r3, r1
   197ae:	807b      	strh	r3, [r7, #2]
   197b0:	4613      	mov	r3, r2
   197b2:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   197b4:	887b      	ldrh	r3, [r7, #2]
   197b6:	687a      	ldr	r2, [r7, #4]
   197b8:	3334      	adds	r3, #52	; 0x34
   197ba:	005b      	lsls	r3, r3, #1
   197bc:	4413      	add	r3, r2
   197be:	883a      	ldrh	r2, [r7, #0]
   197c0:	809a      	strh	r2, [r3, #4]
}
   197c2:	bf00      	nop
   197c4:	370c      	adds	r7, #12
   197c6:	46bd      	mov	sp, r7
   197c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   197cc:	4770      	bx	lr

000197ce <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   197ce:	b480      	push	{r7}
   197d0:	b083      	sub	sp, #12
   197d2:	af00      	add	r7, sp, #0
   197d4:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   197d6:	687b      	ldr	r3, [r7, #4]
   197d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   197dc:	4618      	mov	r0, r3
   197de:	370c      	adds	r7, #12
   197e0:	46bd      	mov	sp, r7
   197e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   197e6:	4770      	bx	lr

000197e8 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   197e8:	b480      	push	{r7}
   197ea:	b083      	sub	sp, #12
   197ec:	af00      	add	r7, sp, #0
   197ee:	6078      	str	r0, [r7, #4]
   197f0:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   197f2:	687b      	ldr	r3, [r7, #4]
   197f4:	683a      	ldr	r2, [r7, #0]
   197f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   197fa:	bf00      	nop
   197fc:	370c      	adds	r7, #12
   197fe:	46bd      	mov	sp, r7
   19800:	f85d 7b04 	ldr.w	r7, [sp], #4
   19804:	4770      	bx	lr

00019806 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   19806:	b480      	push	{r7}
   19808:	b083      	sub	sp, #12
   1980a:	af00      	add	r7, sp, #0
   1980c:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   1980e:	687b      	ldr	r3, [r7, #4]
   19810:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   19814:	4618      	mov	r0, r3
   19816:	370c      	adds	r7, #12
   19818:	46bd      	mov	sp, r7
   1981a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1981e:	4770      	bx	lr

00019820 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   19820:	b480      	push	{r7}
   19822:	b083      	sub	sp, #12
   19824:	af00      	add	r7, sp, #0
   19826:	6078      	str	r0, [r7, #4]
   19828:	460b      	mov	r3, r1
   1982a:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   1982c:	687b      	ldr	r3, [r7, #4]
   1982e:	78fa      	ldrb	r2, [r7, #3]
   19830:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   19834:	bf00      	nop
   19836:	370c      	adds	r7, #12
   19838:	46bd      	mov	sp, r7
   1983a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1983e:	4770      	bx	lr

00019840 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   19840:	b480      	push	{r7}
   19842:	b083      	sub	sp, #12
   19844:	af00      	add	r7, sp, #0
   19846:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   19848:	687b      	ldr	r3, [r7, #4]
   1984a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   1984e:	4618      	mov	r0, r3
   19850:	370c      	adds	r7, #12
   19852:	46bd      	mov	sp, r7
   19854:	f85d 7b04 	ldr.w	r7, [sp], #4
   19858:	4770      	bx	lr
	...

0001985c <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   1985c:	b580      	push	{r7, lr}
   1985e:	b082      	sub	sp, #8
   19860:	af00      	add	r7, sp, #0
   19862:	4603      	mov	r3, r0
   19864:	71fb      	strb	r3, [r7, #7]
  switch (event)
   19866:	79fb      	ldrb	r3, [r7, #7]
   19868:	2b11      	cmp	r3, #17
   1986a:	d868      	bhi.n	1993e <AppUiAction+0xe2>
   1986c:	a201      	add	r2, pc, #4	; (adr r2, 19874 <AppUiAction+0x18>)
   1986e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19872:	bf00      	nop
   19874:	0001993d 	.word	0x0001993d
   19878:	000198bd 	.word	0x000198bd
   1987c:	0001993f 	.word	0x0001993f
   19880:	000198c5 	.word	0x000198c5
   19884:	000198cd 	.word	0x000198cd
   19888:	000198d5 	.word	0x000198d5
   1988c:	000198dd 	.word	0x000198dd
   19890:	000198e5 	.word	0x000198e5
   19894:	000198ed 	.word	0x000198ed
   19898:	000198f5 	.word	0x000198f5
   1989c:	000198fd 	.word	0x000198fd
   198a0:	00019905 	.word	0x00019905
   198a4:	0001990d 	.word	0x0001990d
   198a8:	00019915 	.word	0x00019915
   198ac:	0001991d 	.word	0x0001991d
   198b0:	00019925 	.word	0x00019925
   198b4:	0001992d 	.word	0x0001992d
   198b8:	00019935 	.word	0x00019935
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   198bc:	4822      	ldr	r0, [pc, #136]	; (19948 <AppUiAction+0xec>)
   198be:	f006 ff37 	bl	20730 <WsfTrace>
      break;
   198c2:	e03c      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   198c4:	4821      	ldr	r0, [pc, #132]	; (1994c <AppUiAction+0xf0>)
   198c6:	f006 ff33 	bl	20730 <WsfTrace>
      break;
   198ca:	e038      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   198cc:	4820      	ldr	r0, [pc, #128]	; (19950 <AppUiAction+0xf4>)
   198ce:	f006 ff2f 	bl	20730 <WsfTrace>
      break;
   198d2:	e034      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   198d4:	481f      	ldr	r0, [pc, #124]	; (19954 <AppUiAction+0xf8>)
   198d6:	f006 ff2b 	bl	20730 <WsfTrace>
      break;
   198da:	e030      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   198dc:	481e      	ldr	r0, [pc, #120]	; (19958 <AppUiAction+0xfc>)
   198de:	f006 ff27 	bl	20730 <WsfTrace>
      break;
   198e2:	e02c      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   198e4:	481d      	ldr	r0, [pc, #116]	; (1995c <AppUiAction+0x100>)
   198e6:	f006 ff23 	bl	20730 <WsfTrace>
      break;
   198ea:	e028      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   198ec:	481c      	ldr	r0, [pc, #112]	; (19960 <AppUiAction+0x104>)
   198ee:	f006 ff1f 	bl	20730 <WsfTrace>
      break;
   198f2:	e024      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   198f4:	481b      	ldr	r0, [pc, #108]	; (19964 <AppUiAction+0x108>)
   198f6:	f006 ff1b 	bl	20730 <WsfTrace>
      break;
   198fa:	e020      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   198fc:	481a      	ldr	r0, [pc, #104]	; (19968 <AppUiAction+0x10c>)
   198fe:	f006 ff17 	bl	20730 <WsfTrace>
      break;
   19902:	e01c      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   19904:	4819      	ldr	r0, [pc, #100]	; (1996c <AppUiAction+0x110>)
   19906:	f006 ff13 	bl	20730 <WsfTrace>
      break;
   1990a:	e018      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   1990c:	4818      	ldr	r0, [pc, #96]	; (19970 <AppUiAction+0x114>)
   1990e:	f006 ff0f 	bl	20730 <WsfTrace>
      break;
   19912:	e014      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   19914:	4817      	ldr	r0, [pc, #92]	; (19974 <AppUiAction+0x118>)
   19916:	f006 ff0b 	bl	20730 <WsfTrace>
      break;
   1991a:	e010      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   1991c:	4816      	ldr	r0, [pc, #88]	; (19978 <AppUiAction+0x11c>)
   1991e:	f006 ff07 	bl	20730 <WsfTrace>
      break;
   19922:	e00c      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   19924:	4815      	ldr	r0, [pc, #84]	; (1997c <AppUiAction+0x120>)
   19926:	f006 ff03 	bl	20730 <WsfTrace>
      break;
   1992a:	e008      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   1992c:	4814      	ldr	r0, [pc, #80]	; (19980 <AppUiAction+0x124>)
   1992e:	f006 feff 	bl	20730 <WsfTrace>
      break;
   19932:	e004      	b.n	1993e <AppUiAction+0xe2>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   19934:	4813      	ldr	r0, [pc, #76]	; (19984 <AppUiAction+0x128>)
   19936:	f006 fefb 	bl	20730 <WsfTrace>
      break;
   1993a:	e000      	b.n	1993e <AppUiAction+0xe2>
      break;
   1993c:	bf00      	nop
  }
}
   1993e:	bf00      	nop
   19940:	3708      	adds	r7, #8
   19942:	46bd      	mov	sp, r7
   19944:	bd80      	pop	{r7, pc}
   19946:	bf00      	nop
   19948:	0003b198 	.word	0x0003b198
   1994c:	0003b1b0 	.word	0x0003b1b0
   19950:	0003b1cc 	.word	0x0003b1cc
   19954:	0003b1e8 	.word	0x0003b1e8
   19958:	0003b204 	.word	0x0003b204
   1995c:	0003b220 	.word	0x0003b220
   19960:	0003b248 	.word	0x0003b248
   19964:	0003b264 	.word	0x0003b264
   19968:	0003b280 	.word	0x0003b280
   1996c:	0003b2a8 	.word	0x0003b2a8
   19970:	0003b2c0 	.word	0x0003b2c0
   19974:	0003b2e0 	.word	0x0003b2e0
   19978:	0003b2fc 	.word	0x0003b2fc
   1997c:	0003b324 	.word	0x0003b324
   19980:	0003b348 	.word	0x0003b348
   19984:	0003b35c 	.word	0x0003b35c

00019988 <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   19988:	b580      	push	{r7, lr}
   1998a:	b082      	sub	sp, #8
   1998c:	af00      	add	r7, sp, #0
   1998e:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   19990:	6879      	ldr	r1, [r7, #4]
   19992:	4803      	ldr	r0, [pc, #12]	; (199a0 <AppUiDisplayPasskey+0x18>)
   19994:	f006 fecc 	bl	20730 <WsfTrace>
}
   19998:	bf00      	nop
   1999a:	3708      	adds	r7, #8
   1999c:	46bd      	mov	sp, r7
   1999e:	bd80      	pop	{r7, pc}
   199a0:	0003b370 	.word	0x0003b370

000199a4 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   199a4:	b580      	push	{r7, lr}
   199a6:	b082      	sub	sp, #8
   199a8:	af00      	add	r7, sp, #0
   199aa:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   199ac:	6879      	ldr	r1, [r7, #4]
   199ae:	4803      	ldr	r0, [pc, #12]	; (199bc <AppUiDisplayConfirmValue+0x18>)
   199b0:	f006 febe 	bl	20730 <WsfTrace>
}
   199b4:	bf00      	nop
   199b6:	3708      	adds	r7, #8
   199b8:	46bd      	mov	sp, r7
   199ba:	bd80      	pop	{r7, pc}
   199bc:	0003b384 	.word	0x0003b384

000199c0 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   199c0:	b480      	push	{r7}
   199c2:	b083      	sub	sp, #12
   199c4:	af00      	add	r7, sp, #0
   199c6:	6078      	str	r0, [r7, #4]

}
   199c8:	bf00      	nop
   199ca:	370c      	adds	r7, #12
   199cc:	46bd      	mov	sp, r7
   199ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   199d2:	4770      	bx	lr

000199d4 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   199d4:	b480      	push	{r7}
   199d6:	af00      	add	r7, sp, #0

}
   199d8:	bf00      	nop
   199da:	46bd      	mov	sp, r7
   199dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   199e0:	4770      	bx	lr
	...

000199e4 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   199e4:	b480      	push	{r7}
   199e6:	b083      	sub	sp, #12
   199e8:	af00      	add	r7, sp, #0
   199ea:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   199ec:	4a04      	ldr	r2, [pc, #16]	; (19a00 <AppUiBtnRegister+0x1c>)
   199ee:	687b      	ldr	r3, [r7, #4]
   199f0:	6013      	str	r3, [r2, #0]
}
   199f2:	bf00      	nop
   199f4:	370c      	adds	r7, #12
   199f6:	46bd      	mov	sp, r7
   199f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   199fc:	4770      	bx	lr
   199fe:	bf00      	nop
   19a00:	10019920 	.word	0x10019920

00019a04 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   19a04:	b480      	push	{r7}
   19a06:	af00      	add	r7, sp, #0

}
   19a08:	bf00      	nop
   19a0a:	46bd      	mov	sp, r7
   19a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19a10:	4770      	bx	lr
	...

00019a14 <AppUiBtnTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnTest(uint8_t btn)
{
   19a14:	b580      	push	{r7, lr}
   19a16:	b082      	sub	sp, #8
   19a18:	af00      	add	r7, sp, #0
   19a1a:	4603      	mov	r3, r0
   19a1c:	71fb      	strb	r3, [r7, #7]
  if(appUiBtn.cback) {
   19a1e:	4b06      	ldr	r3, [pc, #24]	; (19a38 <AppUiBtnTest+0x24>)
   19a20:	681b      	ldr	r3, [r3, #0]
   19a22:	2b00      	cmp	r3, #0
   19a24:	d004      	beq.n	19a30 <AppUiBtnTest+0x1c>
    (*appUiBtn.cback)(btn);
   19a26:	4b04      	ldr	r3, [pc, #16]	; (19a38 <AppUiBtnTest+0x24>)
   19a28:	681b      	ldr	r3, [r3, #0]
   19a2a:	79fa      	ldrb	r2, [r7, #7]
   19a2c:	4610      	mov	r0, r2
   19a2e:	4798      	blx	r3
  }
}
   19a30:	bf00      	nop
   19a32:	3708      	adds	r7, #8
   19a34:	46bd      	mov	sp, r7
   19a36:	bd80      	pop	{r7, pc}
   19a38:	10019920 	.word	0x10019920

00019a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   19a3c:	b480      	push	{r7}
   19a3e:	b083      	sub	sp, #12
   19a40:	af00      	add	r7, sp, #0
   19a42:	4603      	mov	r3, r0
   19a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	db0b      	blt.n	19a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19a4e:	4909      	ldr	r1, [pc, #36]	; (19a74 <__NVIC_EnableIRQ+0x38>)
   19a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19a54:	095b      	lsrs	r3, r3, #5
   19a56:	79fa      	ldrb	r2, [r7, #7]
   19a58:	f002 021f 	and.w	r2, r2, #31
   19a5c:	2001      	movs	r0, #1
   19a5e:	fa00 f202 	lsl.w	r2, r0, r2
   19a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   19a66:	bf00      	nop
   19a68:	370c      	adds	r7, #12
   19a6a:	46bd      	mov	sp, r7
   19a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19a70:	4770      	bx	lr
   19a72:	bf00      	nop
   19a74:	e000e100 	.word	0xe000e100

00019a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   19a78:	b480      	push	{r7}
   19a7a:	b083      	sub	sp, #12
   19a7c:	af00      	add	r7, sp, #0
   19a7e:	4603      	mov	r3, r0
   19a80:	6039      	str	r1, [r7, #0]
   19a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19a88:	2b00      	cmp	r3, #0
   19a8a:	db0a      	blt.n	19aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19a8c:	490d      	ldr	r1, [pc, #52]	; (19ac4 <__NVIC_SetPriority+0x4c>)
   19a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19a92:	683a      	ldr	r2, [r7, #0]
   19a94:	b2d2      	uxtb	r2, r2
   19a96:	0152      	lsls	r2, r2, #5
   19a98:	b2d2      	uxtb	r2, r2
   19a9a:	440b      	add	r3, r1
   19a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   19aa0:	e00a      	b.n	19ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19aa2:	4909      	ldr	r1, [pc, #36]	; (19ac8 <__NVIC_SetPriority+0x50>)
   19aa4:	79fb      	ldrb	r3, [r7, #7]
   19aa6:	f003 030f 	and.w	r3, r3, #15
   19aaa:	3b04      	subs	r3, #4
   19aac:	683a      	ldr	r2, [r7, #0]
   19aae:	b2d2      	uxtb	r2, r2
   19ab0:	0152      	lsls	r2, r2, #5
   19ab2:	b2d2      	uxtb	r2, r2
   19ab4:	440b      	add	r3, r1
   19ab6:	761a      	strb	r2, [r3, #24]
}
   19ab8:	bf00      	nop
   19aba:	370c      	adds	r7, #12
   19abc:	46bd      	mov	sp, r7
   19abe:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ac2:	4770      	bx	lr
   19ac4:	e000e100 	.word	0xe000e100
   19ac8:	e000ed00 	.word	0xe000ed00

00019acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19acc:	b480      	push	{r7}
   19ace:	b085      	sub	sp, #20
   19ad0:	af00      	add	r7, sp, #0
   19ad2:	60f8      	str	r0, [r7, #12]
   19ad4:	60b9      	str	r1, [r7, #8]
   19ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   19ad8:	68fb      	ldr	r3, [r7, #12]
   19ada:	3b04      	subs	r3, #4
   19adc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19ade:	68fb      	ldr	r3, [r7, #12]
   19ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19ae6:	68fb      	ldr	r3, [r7, #12]
   19ae8:	3b04      	subs	r3, #4
   19aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   19aec:	68bb      	ldr	r3, [r7, #8]
   19aee:	f023 0201 	bic.w	r2, r3, #1
   19af2:	68fb      	ldr	r3, [r7, #12]
   19af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19af6:	68fb      	ldr	r3, [r7, #12]
   19af8:	3b04      	subs	r3, #4
   19afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19afc:	4a0c      	ldr	r2, [pc, #48]	; (19b30 <pxPortInitialiseStack+0x64>)
   19afe:	68fb      	ldr	r3, [r7, #12]
   19b00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19b02:	68fb      	ldr	r3, [r7, #12]
   19b04:	3b14      	subs	r3, #20
   19b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19b08:	687a      	ldr	r2, [r7, #4]
   19b0a:	68fb      	ldr	r3, [r7, #12]
   19b0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   19b0e:	68fb      	ldr	r3, [r7, #12]
   19b10:	3b04      	subs	r3, #4
   19b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   19b14:	68fb      	ldr	r3, [r7, #12]
   19b16:	f06f 0202 	mvn.w	r2, #2
   19b1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   19b1c:	68fb      	ldr	r3, [r7, #12]
   19b1e:	3b20      	subs	r3, #32
   19b20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19b22:	68fb      	ldr	r3, [r7, #12]
}
   19b24:	4618      	mov	r0, r3
   19b26:	3714      	adds	r7, #20
   19b28:	46bd      	mov	sp, r7
   19b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b2e:	4770      	bx	lr
   19b30:	00019b35 	.word	0x00019b35

00019b34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19b34:	b480      	push	{r7}
   19b36:	b083      	sub	sp, #12
   19b38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   19b3a:	2300      	movs	r3, #0
   19b3c:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19b3e:	4b0c      	ldr	r3, [pc, #48]	; (19b70 <prvTaskExitError+0x3c>)
   19b40:	681b      	ldr	r3, [r3, #0]
   19b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19b46:	d000      	beq.n	19b4a <prvTaskExitError+0x16>
   19b48:	e7fe      	b.n	19b48 <prvTaskExitError+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   19b4a:	f04f 0380 	mov.w	r3, #128	; 0x80
   19b4e:	f383 8811 	msr	BASEPRI, r3
   19b52:	f3bf 8f6f 	isb	sy
   19b56:	f3bf 8f4f 	dsb	sy
   19b5a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   19b5c:	bf00      	nop
   19b5e:	683b      	ldr	r3, [r7, #0]
   19b60:	2b00      	cmp	r3, #0
   19b62:	d0fc      	beq.n	19b5e <prvTaskExitError+0x2a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19b64:	bf00      	nop
   19b66:	370c      	adds	r7, #12
   19b68:	46bd      	mov	sp, r7
   19b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b6e:	4770      	bx	lr
   19b70:	10017f00 	.word	0x10017f00
	...

00019b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   19b80:	4b07      	ldr	r3, [pc, #28]	; (19ba0 <pxCurrentTCBConst2>)
   19b82:	6819      	ldr	r1, [r3, #0]
   19b84:	6808      	ldr	r0, [r1, #0]
   19b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b8a:	f380 8809 	msr	PSP, r0
   19b8e:	f3bf 8f6f 	isb	sy
   19b92:	f04f 0000 	mov.w	r0, #0
   19b96:	f380 8811 	msr	BASEPRI, r0
   19b9a:	4770      	bx	lr
   19b9c:	f3af 8000 	nop.w

00019ba0 <pxCurrentTCBConst2>:
   19ba0:	10043ea0 	.word	0x10043ea0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   19ba4:	bf00      	nop
   19ba6:	bf00      	nop

00019ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   19ba8:	4808      	ldr	r0, [pc, #32]	; (19bcc <prvPortStartFirstTask+0x24>)
   19baa:	6800      	ldr	r0, [r0, #0]
   19bac:	6800      	ldr	r0, [r0, #0]
   19bae:	f380 8808 	msr	MSP, r0
   19bb2:	f04f 0000 	mov.w	r0, #0
   19bb6:	f380 8814 	msr	CONTROL, r0
   19bba:	b662      	cpsie	i
   19bbc:	b661      	cpsie	f
   19bbe:	f3bf 8f4f 	dsb	sy
   19bc2:	f3bf 8f6f 	isb	sy
   19bc6:	df00      	svc	0
   19bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   19bca:	bf00      	nop
   19bcc:	e000ed08 	.word	0xe000ed08

00019bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19bd0:	b580      	push	{r7, lr}
   19bd2:	b084      	sub	sp, #16
   19bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   19bd6:	4b37      	ldr	r3, [pc, #220]	; (19cb4 <xPortStartScheduler+0xe4>)
   19bd8:	681b      	ldr	r3, [r3, #0]
   19bda:	4a37      	ldr	r2, [pc, #220]	; (19cb8 <xPortStartScheduler+0xe8>)
   19bdc:	4293      	cmp	r3, r2
   19bde:	d100      	bne.n	19be2 <xPortStartScheduler+0x12>
   19be0:	e7fe      	b.n	19be0 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   19be2:	4b34      	ldr	r3, [pc, #208]	; (19cb4 <xPortStartScheduler+0xe4>)
   19be4:	681b      	ldr	r3, [r3, #0]
   19be6:	4a35      	ldr	r2, [pc, #212]	; (19cbc <xPortStartScheduler+0xec>)
   19be8:	4293      	cmp	r3, r2
   19bea:	d100      	bne.n	19bee <xPortStartScheduler+0x1e>
   19bec:	e7fe      	b.n	19bec <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   19bee:	4b34      	ldr	r3, [pc, #208]	; (19cc0 <xPortStartScheduler+0xf0>)
   19bf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   19bf2:	68fb      	ldr	r3, [r7, #12]
   19bf4:	781b      	ldrb	r3, [r3, #0]
   19bf6:	b2db      	uxtb	r3, r3
   19bf8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   19bfa:	68fb      	ldr	r3, [r7, #12]
   19bfc:	22ff      	movs	r2, #255	; 0xff
   19bfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   19c00:	68fb      	ldr	r3, [r7, #12]
   19c02:	781b      	ldrb	r3, [r3, #0]
   19c04:	b2db      	uxtb	r3, r3
   19c06:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   19c08:	79fb      	ldrb	r3, [r7, #7]
   19c0a:	b2db      	uxtb	r3, r3
   19c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   19c10:	b2da      	uxtb	r2, r3
   19c12:	4b2c      	ldr	r3, [pc, #176]	; (19cc4 <xPortStartScheduler+0xf4>)
   19c14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   19c16:	4b2c      	ldr	r3, [pc, #176]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c18:	2207      	movs	r2, #7
   19c1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   19c1c:	e009      	b.n	19c32 <xPortStartScheduler+0x62>
		{
			ulMaxPRIGROUPValue--;
   19c1e:	4b2a      	ldr	r3, [pc, #168]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c20:	681b      	ldr	r3, [r3, #0]
   19c22:	3b01      	subs	r3, #1
   19c24:	4a28      	ldr	r2, [pc, #160]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   19c28:	79fb      	ldrb	r3, [r7, #7]
   19c2a:	b2db      	uxtb	r3, r3
   19c2c:	005b      	lsls	r3, r3, #1
   19c2e:	b2db      	uxtb	r3, r3
   19c30:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   19c32:	79fb      	ldrb	r3, [r7, #7]
   19c34:	b2db      	uxtb	r3, r3
   19c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
   19c3a:	2b80      	cmp	r3, #128	; 0x80
   19c3c:	d0ef      	beq.n	19c1e <xPortStartScheduler+0x4e>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   19c3e:	4b22      	ldr	r3, [pc, #136]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c40:	681b      	ldr	r3, [r3, #0]
   19c42:	f1c3 0307 	rsb	r3, r3, #7
   19c46:	2b03      	cmp	r3, #3
   19c48:	d000      	beq.n	19c4c <xPortStartScheduler+0x7c>
   19c4a:	e7fe      	b.n	19c4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   19c4c:	4b1e      	ldr	r3, [pc, #120]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c4e:	681b      	ldr	r3, [r3, #0]
   19c50:	021b      	lsls	r3, r3, #8
   19c52:	4a1d      	ldr	r2, [pc, #116]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   19c56:	4b1c      	ldr	r3, [pc, #112]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c58:	681b      	ldr	r3, [r3, #0]
   19c5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   19c5e:	4a1a      	ldr	r2, [pc, #104]	; (19cc8 <xPortStartScheduler+0xf8>)
   19c60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   19c62:	68bb      	ldr	r3, [r7, #8]
   19c64:	b2da      	uxtb	r2, r3
   19c66:	68fb      	ldr	r3, [r7, #12]
   19c68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   19c6a:	4a18      	ldr	r2, [pc, #96]	; (19ccc <xPortStartScheduler+0xfc>)
   19c6c:	4b17      	ldr	r3, [pc, #92]	; (19ccc <xPortStartScheduler+0xfc>)
   19c6e:	681b      	ldr	r3, [r3, #0]
   19c70:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   19c74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   19c76:	4a15      	ldr	r2, [pc, #84]	; (19ccc <xPortStartScheduler+0xfc>)
   19c78:	4b14      	ldr	r3, [pc, #80]	; (19ccc <xPortStartScheduler+0xfc>)
   19c7a:	681b      	ldr	r3, [r3, #0]
   19c7c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   19c80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   19c82:	f000 f9df 	bl	1a044 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19c86:	4b12      	ldr	r3, [pc, #72]	; (19cd0 <xPortStartScheduler+0x100>)
   19c88:	2200      	movs	r2, #0
   19c8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   19c8c:	f000 f8bc 	bl	19e08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   19c90:	4a10      	ldr	r2, [pc, #64]	; (19cd4 <xPortStartScheduler+0x104>)
   19c92:	4b10      	ldr	r3, [pc, #64]	; (19cd4 <xPortStartScheduler+0x104>)
   19c94:	681b      	ldr	r3, [r3, #0]
   19c96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   19c9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   19c9c:	f7ff ff84 	bl	19ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19ca0:	f00b f830 	bl	24d04 <vTaskSwitchContext>
	prvTaskExitError();
   19ca4:	f7ff ff46 	bl	19b34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   19ca8:	2300      	movs	r3, #0
}
   19caa:	4618      	mov	r0, r3
   19cac:	3710      	adds	r7, #16
   19cae:	46bd      	mov	sp, r7
   19cb0:	bd80      	pop	{r7, pc}
   19cb2:	bf00      	nop
   19cb4:	e000ed00 	.word	0xe000ed00
   19cb8:	410fc271 	.word	0x410fc271
   19cbc:	410fc270 	.word	0x410fc270
   19cc0:	e000e400 	.word	0xe000e400
   19cc4:	10019928 	.word	0x10019928
   19cc8:	1001992c 	.word	0x1001992c
   19ccc:	e000ed20 	.word	0xe000ed20
   19cd0:	10017f00 	.word	0x10017f00
   19cd4:	e000ef34 	.word	0xe000ef34

00019cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19cd8:	b480      	push	{r7}
   19cda:	b083      	sub	sp, #12
   19cdc:	af00      	add	r7, sp, #0
   19cde:	f04f 0380 	mov.w	r3, #128	; 0x80
   19ce2:	f383 8811 	msr	BASEPRI, r3
   19ce6:	f3bf 8f6f 	isb	sy
   19cea:	f3bf 8f4f 	dsb	sy
   19cee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   19cf0:	4b0a      	ldr	r3, [pc, #40]	; (19d1c <vPortEnterCritical+0x44>)
   19cf2:	681b      	ldr	r3, [r3, #0]
   19cf4:	3301      	adds	r3, #1
   19cf6:	4a09      	ldr	r2, [pc, #36]	; (19d1c <vPortEnterCritical+0x44>)
   19cf8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   19cfa:	4b08      	ldr	r3, [pc, #32]	; (19d1c <vPortEnterCritical+0x44>)
   19cfc:	681b      	ldr	r3, [r3, #0]
   19cfe:	2b01      	cmp	r3, #1
   19d00:	d105      	bne.n	19d0e <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   19d02:	4b07      	ldr	r3, [pc, #28]	; (19d20 <vPortEnterCritical+0x48>)
   19d04:	681b      	ldr	r3, [r3, #0]
   19d06:	b2db      	uxtb	r3, r3
   19d08:	2b00      	cmp	r3, #0
   19d0a:	d000      	beq.n	19d0e <vPortEnterCritical+0x36>
   19d0c:	e7fe      	b.n	19d0c <vPortEnterCritical+0x34>
	}
}
   19d0e:	bf00      	nop
   19d10:	370c      	adds	r7, #12
   19d12:	46bd      	mov	sp, r7
   19d14:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d18:	4770      	bx	lr
   19d1a:	bf00      	nop
   19d1c:	10017f00 	.word	0x10017f00
   19d20:	e000ed04 	.word	0xe000ed04

00019d24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19d24:	b480      	push	{r7}
   19d26:	b083      	sub	sp, #12
   19d28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19d2a:	4b0c      	ldr	r3, [pc, #48]	; (19d5c <vPortExitCritical+0x38>)
   19d2c:	681b      	ldr	r3, [r3, #0]
   19d2e:	2b00      	cmp	r3, #0
   19d30:	d100      	bne.n	19d34 <vPortExitCritical+0x10>
   19d32:	e7fe      	b.n	19d32 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   19d34:	4b09      	ldr	r3, [pc, #36]	; (19d5c <vPortExitCritical+0x38>)
   19d36:	681b      	ldr	r3, [r3, #0]
   19d38:	3b01      	subs	r3, #1
   19d3a:	4a08      	ldr	r2, [pc, #32]	; (19d5c <vPortExitCritical+0x38>)
   19d3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   19d3e:	4b07      	ldr	r3, [pc, #28]	; (19d5c <vPortExitCritical+0x38>)
   19d40:	681b      	ldr	r3, [r3, #0]
   19d42:	2b00      	cmp	r3, #0
   19d44:	d104      	bne.n	19d50 <vPortExitCritical+0x2c>
   19d46:	2300      	movs	r3, #0
   19d48:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   19d4a:	687b      	ldr	r3, [r7, #4]
   19d4c:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   19d50:	bf00      	nop
   19d52:	370c      	adds	r7, #12
   19d54:	46bd      	mov	sp, r7
   19d56:	f85d 7b04 	ldr.w	r7, [sp], #4
   19d5a:	4770      	bx	lr
   19d5c:	10017f00 	.word	0x10017f00

00019d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19d60:	f3ef 8009 	mrs	r0, PSP
   19d64:	f3bf 8f6f 	isb	sy
   19d68:	4b15      	ldr	r3, [pc, #84]	; (19dc0 <pxCurrentTCBConst>)
   19d6a:	681a      	ldr	r2, [r3, #0]
   19d6c:	f01e 0f10 	tst.w	lr, #16
   19d70:	bf08      	it	eq
   19d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   19d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d7a:	6010      	str	r0, [r2, #0]
   19d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
   19d80:	f04f 0080 	mov.w	r0, #128	; 0x80
   19d84:	f380 8811 	msr	BASEPRI, r0
   19d88:	f3bf 8f4f 	dsb	sy
   19d8c:	f3bf 8f6f 	isb	sy
   19d90:	f00a ffb8 	bl	24d04 <vTaskSwitchContext>
   19d94:	f04f 0000 	mov.w	r0, #0
   19d98:	f380 8811 	msr	BASEPRI, r0
   19d9c:	bc09      	pop	{r0, r3}
   19d9e:	6819      	ldr	r1, [r3, #0]
   19da0:	6808      	ldr	r0, [r1, #0]
   19da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19da6:	f01e 0f10 	tst.w	lr, #16
   19daa:	bf08      	it	eq
   19dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   19db0:	f380 8809 	msr	PSP, r0
   19db4:	f3bf 8f6f 	isb	sy
   19db8:	4770      	bx	lr
   19dba:	bf00      	nop
   19dbc:	f3af 8000 	nop.w

00019dc0 <pxCurrentTCBConst>:
   19dc0:	10043ea0 	.word	0x10043ea0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   19dc4:	bf00      	nop
   19dc6:	bf00      	nop

00019dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19dc8:	b580      	push	{r7, lr}
   19dca:	b082      	sub	sp, #8
   19dcc:	af00      	add	r7, sp, #0
	__asm volatile
   19dce:	f04f 0380 	mov.w	r3, #128	; 0x80
   19dd2:	f383 8811 	msr	BASEPRI, r3
   19dd6:	f3bf 8f6f 	isb	sy
   19dda:	f3bf 8f4f 	dsb	sy
   19dde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19de0:	f00a fef0 	bl	24bc4 <xTaskIncrementTick>
   19de4:	4603      	mov	r3, r0
   19de6:	2b00      	cmp	r3, #0
   19de8:	d003      	beq.n	19df2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   19dea:	4b06      	ldr	r3, [pc, #24]	; (19e04 <SysTick_Handler+0x3c>)
   19dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19df0:	601a      	str	r2, [r3, #0]
   19df2:	2300      	movs	r3, #0
   19df4:	603b      	str	r3, [r7, #0]
	__asm volatile
   19df6:	683b      	ldr	r3, [r7, #0]
   19df8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   19dfc:	bf00      	nop
   19dfe:	3708      	adds	r7, #8
   19e00:	46bd      	mov	sp, r7
   19e02:	bd80      	pop	{r7, pc}
   19e04:	e000ed04 	.word	0xe000ed04

00019e08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   19e08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 19e18 <vPortEnableVFP+0x10>
   19e0c:	6801      	ldr	r1, [r0, #0]
   19e0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19e12:	6001      	str	r1, [r0, #0]
   19e14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   19e16:	bf00      	nop
   19e18:	e000ed88 	.word	0xe000ed88

00019e1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   19e1c:	b480      	push	{r7}
   19e1e:	b083      	sub	sp, #12
   19e20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   19e22:	f3ef 8305 	mrs	r3, IPSR
   19e26:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   19e28:	687b      	ldr	r3, [r7, #4]
   19e2a:	2b0f      	cmp	r3, #15
   19e2c:	d90a      	bls.n	19e44 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   19e2e:	4a0d      	ldr	r2, [pc, #52]	; (19e64 <vPortValidateInterruptPriority+0x48>)
   19e30:	687b      	ldr	r3, [r7, #4]
   19e32:	4413      	add	r3, r2
   19e34:	781b      	ldrb	r3, [r3, #0]
   19e36:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   19e38:	4b0b      	ldr	r3, [pc, #44]	; (19e68 <vPortValidateInterruptPriority+0x4c>)
   19e3a:	781b      	ldrb	r3, [r3, #0]
   19e3c:	78fa      	ldrb	r2, [r7, #3]
   19e3e:	429a      	cmp	r2, r3
   19e40:	d200      	bcs.n	19e44 <vPortValidateInterruptPriority+0x28>
   19e42:	e7fe      	b.n	19e42 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   19e44:	4b09      	ldr	r3, [pc, #36]	; (19e6c <vPortValidateInterruptPriority+0x50>)
   19e46:	681b      	ldr	r3, [r3, #0]
   19e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   19e4c:	4b08      	ldr	r3, [pc, #32]	; (19e70 <vPortValidateInterruptPriority+0x54>)
   19e4e:	681b      	ldr	r3, [r3, #0]
   19e50:	429a      	cmp	r2, r3
   19e52:	d900      	bls.n	19e56 <vPortValidateInterruptPriority+0x3a>
   19e54:	e7fe      	b.n	19e54 <vPortValidateInterruptPriority+0x38>
	}
   19e56:	bf00      	nop
   19e58:	370c      	adds	r7, #12
   19e5a:	46bd      	mov	sp, r7
   19e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19e60:	4770      	bx	lr
   19e62:	bf00      	nop
   19e64:	e000e3f0 	.word	0xe000e3f0
   19e68:	10019928 	.word	0x10019928
   19e6c:	e000ed0c 	.word	0xe000ed0c
   19e70:	1001992c 	.word	0x1001992c

00019e74 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   19e74:	b580      	push	{r7, lr}
   19e76:	b088      	sub	sp, #32
   19e78:	af00      	add	r7, sp, #0
   19e7a:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   19e7c:	4b36      	ldr	r3, [pc, #216]	; (19f58 <vPortSuppressTicksAndSleep+0xe4>)
   19e7e:	681b      	ldr	r3, [r3, #0]
   19e80:	687a      	ldr	r2, [r7, #4]
   19e82:	429a      	cmp	r2, r3
   19e84:	d902      	bls.n	19e8c <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   19e86:	4b34      	ldr	r3, [pc, #208]	; (19f58 <vPortSuppressTicksAndSleep+0xe4>)
   19e88:	681b      	ldr	r3, [r3, #0]
   19e8a:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   19e8c:	687b      	ldr	r3, [r7, #4]
   19e8e:	3b01      	subs	r3, #1
   19e90:	4a32      	ldr	r2, [pc, #200]	; (19f5c <vPortSuppressTicksAndSleep+0xe8>)
   19e92:	6812      	ldr	r2, [r2, #0]
   19e94:	fb02 f303 	mul.w	r3, r2, r3
   19e98:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   19e9a:	b672      	cpsid	i
	__asm volatile( "dsb" );
   19e9c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19ea0:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   19ea4:	f01e fa24 	bl	382f0 <am_hal_stimer_counter_get>
   19ea8:	4602      	mov	r2, r0
   19eaa:	4b2d      	ldr	r3, [pc, #180]	; (19f60 <vPortSuppressTicksAndSleep+0xec>)
   19eac:	681b      	ldr	r3, [r3, #0]
   19eae:	1ad3      	subs	r3, r2, r3
   19eb0:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   19eb2:	f00b f953 	bl	2515c <eTaskConfirmSleepModeStatus>
   19eb6:	4603      	mov	r3, r0
   19eb8:	2b00      	cmp	r3, #0
   19eba:	d006      	beq.n	19eca <vPortSuppressTicksAndSleep+0x56>
   19ebc:	4b27      	ldr	r3, [pc, #156]	; (19f5c <vPortSuppressTicksAndSleep+0xe8>)
   19ebe:	681a      	ldr	r2, [r3, #0]
   19ec0:	69bb      	ldr	r3, [r7, #24]
   19ec2:	441a      	add	r2, r3
   19ec4:	69fb      	ldr	r3, [r7, #28]
   19ec6:	429a      	cmp	r2, r3
   19ec8:	d901      	bls.n	19ece <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19eca:	b662      	cpsie	i
   19ecc:	e03f      	b.n	19f4e <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   19ece:	69fa      	ldr	r2, [r7, #28]
   19ed0:	69bb      	ldr	r3, [r7, #24]
   19ed2:	1ad3      	subs	r3, r2, r3
   19ed4:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   19ed6:	69f9      	ldr	r1, [r7, #28]
   19ed8:	2000      	movs	r0, #0
   19eda:	f01e fa0f 	bl	382fc <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   19ede:	687b      	ldr	r3, [r7, #4]
   19ee0:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   19ee2:	6978      	ldr	r0, [r7, #20]
   19ee4:	f006 fa17 	bl	20316 <am_freertos_sleep>
   19ee8:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   19eea:	697b      	ldr	r3, [r7, #20]
   19eec:	2b00      	cmp	r3, #0
   19eee:	d004      	beq.n	19efa <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   19ef0:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   19ef4:	bf30      	wfi
			__asm volatile( "isb" );
   19ef6:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   19efa:	6878      	ldr	r0, [r7, #4]
   19efc:	f006 fa17 	bl	2032e <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   19f00:	f01e f9f6 	bl	382f0 <am_hal_stimer_counter_get>
   19f04:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   19f06:	693b      	ldr	r3, [r7, #16]
   19f08:	4a15      	ldr	r2, [pc, #84]	; (19f60 <vPortSuppressTicksAndSleep+0xec>)
   19f0a:	6812      	ldr	r2, [r2, #0]
   19f0c:	1a9b      	subs	r3, r3, r2
   19f0e:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   19f10:	4b12      	ldr	r3, [pc, #72]	; (19f5c <vPortSuppressTicksAndSleep+0xe8>)
   19f12:	681a      	ldr	r2, [r3, #0]
   19f14:	68fb      	ldr	r3, [r7, #12]
   19f16:	fbb3 f1f2 	udiv	r1, r3, r2
   19f1a:	fb02 f201 	mul.w	r2, r2, r1
   19f1e:	1a9b      	subs	r3, r3, r2
   19f20:	693a      	ldr	r2, [r7, #16]
   19f22:	1ad3      	subs	r3, r2, r3
   19f24:	4a0e      	ldr	r2, [pc, #56]	; (19f60 <vPortSuppressTicksAndSleep+0xec>)
   19f26:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   19f28:	4b0c      	ldr	r3, [pc, #48]	; (19f5c <vPortSuppressTicksAndSleep+0xe8>)
   19f2a:	681b      	ldr	r3, [r3, #0]
   19f2c:	68fa      	ldr	r2, [r7, #12]
   19f2e:	fbb2 f3f3 	udiv	r3, r2, r3
   19f32:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   19f34:	68f8      	ldr	r0, [r7, #12]
   19f36:	f00a fe27 	bl	24b88 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   19f3a:	2001      	movs	r0, #1
   19f3c:	f01e fa3c 	bl	383b8 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19f40:	4b06      	ldr	r3, [pc, #24]	; (19f5c <vPortSuppressTicksAndSleep+0xe8>)
   19f42:	681b      	ldr	r3, [r3, #0]
   19f44:	4619      	mov	r1, r3
   19f46:	2000      	movs	r0, #0
   19f48:	f01e f9d8 	bl	382fc <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19f4c:	b662      	cpsie	i

	}
}
   19f4e:	bf00      	nop
   19f50:	3720      	adds	r7, #32
   19f52:	46bd      	mov	sp, r7
   19f54:	bd80      	pop	{r7, pc}
   19f56:	bf00      	nop
   19f58:	10019934 	.word	0x10019934
   19f5c:	10019930 	.word	0x10019930
   19f60:	10019924 	.word	0x10019924

00019f64 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   19f64:	b580      	push	{r7, lr}
   19f66:	b088      	sub	sp, #32
   19f68:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   19f6a:	2300      	movs	r3, #0
   19f6c:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   19f6e:	2300      	movs	r3, #0
   19f70:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   19f72:	f01e f9bd 	bl	382f0 <am_hal_stimer_counter_get>
   19f76:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19f78:	4b24      	ldr	r3, [pc, #144]	; (1a00c <xPortStimerTickHandler+0xa8>)
   19f7a:	681b      	ldr	r3, [r3, #0]
   19f7c:	4619      	mov	r1, r3
   19f7e:	2000      	movs	r0, #0
   19f80:	f01e f9bc 	bl	382fc <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   19f84:	4b22      	ldr	r3, [pc, #136]	; (1a010 <xPortStimerTickHandler+0xac>)
   19f86:	681b      	ldr	r3, [r3, #0]
   19f88:	693a      	ldr	r2, [r7, #16]
   19f8a:	1ad3      	subs	r3, r2, r3
   19f8c:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   19f8e:	4b1f      	ldr	r3, [pc, #124]	; (1a00c <xPortStimerTickHandler+0xa8>)
   19f90:	681b      	ldr	r3, [r3, #0]
   19f92:	68fa      	ldr	r2, [r7, #12]
   19f94:	fbb2 f3f3 	udiv	r3, r2, r3
   19f98:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   19f9a:	4b1c      	ldr	r3, [pc, #112]	; (1a00c <xPortStimerTickHandler+0xa8>)
   19f9c:	681a      	ldr	r2, [r3, #0]
   19f9e:	68fb      	ldr	r3, [r7, #12]
   19fa0:	fbb3 f1f2 	udiv	r1, r3, r2
   19fa4:	fb02 f201 	mul.w	r2, r2, r1
   19fa8:	1a9b      	subs	r3, r3, r2
   19faa:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   19fac:	693a      	ldr	r2, [r7, #16]
   19fae:	697b      	ldr	r3, [r7, #20]
   19fb0:	1ad3      	subs	r3, r2, r3
   19fb2:	4a17      	ldr	r2, [pc, #92]	; (1a010 <xPortStimerTickHandler+0xac>)
   19fb4:	6013      	str	r3, [r2, #0]
	__asm volatile
   19fb6:	f3ef 8211 	mrs	r2, BASEPRI
   19fba:	f04f 0380 	mov.w	r3, #128	; 0x80
   19fbe:	f383 8811 	msr	BASEPRI, r3
   19fc2:	f3bf 8f6f 	isb	sy
   19fc6:	f3bf 8f4f 	dsb	sy
   19fca:	60ba      	str	r2, [r7, #8]
   19fcc:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   19fce:	e008      	b.n	19fe2 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   19fd0:	f00a fdf8 	bl	24bc4 <xTaskIncrementTick>
   19fd4:	4603      	mov	r3, r0
   19fd6:	2b00      	cmp	r3, #0
   19fd8:	d101      	bne.n	19fde <xPortStimerTickHandler+0x7a>
   19fda:	69bb      	ldr	r3, [r7, #24]
   19fdc:	e000      	b.n	19fe0 <xPortStimerTickHandler+0x7c>
   19fde:	2301      	movs	r3, #1
   19fe0:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
   19fe2:	69fb      	ldr	r3, [r7, #28]
   19fe4:	1e5a      	subs	r2, r3, #1
   19fe6:	61fa      	str	r2, [r7, #28]
   19fe8:	2b00      	cmp	r3, #0
   19fea:	d1f1      	bne.n	19fd0 <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   19fec:	69bb      	ldr	r3, [r7, #24]
   19fee:	2b00      	cmp	r3, #0
   19ff0:	d003      	beq.n	19ffa <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   19ff2:	4b08      	ldr	r3, [pc, #32]	; (1a014 <xPortStimerTickHandler+0xb0>)
   19ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19ff8:	601a      	str	r2, [r3, #0]
   19ffa:	2300      	movs	r3, #0
   19ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
   19ffe:	683b      	ldr	r3, [r7, #0]
   1a000:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   1a004:	bf00      	nop
   1a006:	3720      	adds	r7, #32
   1a008:	46bd      	mov	sp, r7
   1a00a:	bd80      	pop	{r7, pc}
   1a00c:	10019930 	.word	0x10019930
   1a010:	10019924 	.word	0x10019924
   1a014:	e000ed04 	.word	0xe000ed04

0001a018 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   1a018:	b580      	push	{r7, lr}
   1a01a:	b082      	sub	sp, #8
   1a01c:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   1a01e:	2000      	movs	r0, #0
   1a020:	f01e f9d0 	bl	383c4 <am_hal_stimer_int_status_get>
   1a024:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   1a026:	687b      	ldr	r3, [r7, #4]
   1a028:	f003 0301 	and.w	r3, r3, #1
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d004      	beq.n	1a03a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1a030:	2001      	movs	r0, #1
   1a032:	f01e f9c1 	bl	383b8 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   1a036:	f7ff ff95 	bl	19f64 <xPortStimerTickHandler>
    }
}
   1a03a:	bf00      	nop
   1a03c:	3708      	adds	r7, #8
   1a03e:	46bd      	mov	sp, r7
   1a040:	bd80      	pop	{r7, pc}
	...

0001a044 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   1a044:	b580      	push	{r7, lr}
   1a046:	b082      	sub	sp, #8
   1a048:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   1a04a:	4b19      	ldr	r3, [pc, #100]	; (1a0b0 <vPortSetupTimerInterrupt+0x6c>)
   1a04c:	2220      	movs	r2, #32
   1a04e:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   1a050:	4b17      	ldr	r3, [pc, #92]	; (1a0b0 <vPortSetupTimerInterrupt+0x6c>)
   1a052:	681b      	ldr	r3, [r3, #0]
   1a054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a058:	fbb2 f3f3 	udiv	r3, r2, r3
   1a05c:	4a15      	ldr	r2, [pc, #84]	; (1a0b4 <vPortSetupTimerInterrupt+0x70>)
   1a05e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   1a060:	2001      	movs	r0, #1
   1a062:	f01e f99f 	bl	383a4 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   1a066:	2107      	movs	r1, #7
   1a068:	2017      	movs	r0, #23
   1a06a:	f7ff fd05 	bl	19a78 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   1a06e:	2017      	movs	r0, #23
   1a070:	f7ff fce4 	bl	19a3c <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1a074:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1a078:	f01e f930 	bl	382dc <am_hal_stimer_config>
   1a07c:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   1a07e:	f01e f937 	bl	382f0 <am_hal_stimer_counter_get>
   1a082:	4602      	mov	r2, r0
   1a084:	4b0c      	ldr	r3, [pc, #48]	; (1a0b8 <vPortSetupTimerInterrupt+0x74>)
   1a086:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   1a088:	4b09      	ldr	r3, [pc, #36]	; (1a0b0 <vPortSetupTimerInterrupt+0x6c>)
   1a08a:	681b      	ldr	r3, [r3, #0]
   1a08c:	4619      	mov	r1, r3
   1a08e:	2000      	movs	r0, #0
   1a090:	f01e f934 	bl	382fc <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   1a094:	687a      	ldr	r2, [r7, #4]
   1a096:	4b09      	ldr	r3, [pc, #36]	; (1a0bc <vPortSetupTimerInterrupt+0x78>)
   1a098:	4013      	ands	r3, r2
   1a09a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   1a09e:	f043 0301 	orr.w	r3, r3, #1
   1a0a2:	4618      	mov	r0, r3
   1a0a4:	f01e f91a 	bl	382dc <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   1a0a8:	bf00      	nop
   1a0aa:	3708      	adds	r7, #8
   1a0ac:	46bd      	mov	sp, r7
   1a0ae:	bd80      	pop	{r7, pc}
   1a0b0:	10019930 	.word	0x10019930
   1a0b4:	10019934 	.word	0x10019934
   1a0b8:	10019924 	.word	0x10019924
   1a0bc:	7ffffef0 	.word	0x7ffffef0

0001a0c0 <amvoleDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleDmCback(dmEvt_t *pDmEvt)
{
   1a0c0:	b580      	push	{r7, lr}
   1a0c2:	b084      	sub	sp, #16
   1a0c4:	af00      	add	r7, sp, #0
   1a0c6:	6078      	str	r0, [r7, #4]
  dmEvt_t *pMsg;
  uint16_t len;

  len = DmSizeOfEvt(pDmEvt);
   1a0c8:	6878      	ldr	r0, [r7, #4]
   1a0ca:	f7f6 fa1b 	bl	10504 <DmSizeOfEvt>
   1a0ce:	4603      	mov	r3, r0
   1a0d0:	81fb      	strh	r3, [r7, #14]

  if ((pMsg = WsfMsgAlloc(len)) != NULL)
   1a0d2:	89fb      	ldrh	r3, [r7, #14]
   1a0d4:	4618      	mov	r0, r3
   1a0d6:	f000 fc94 	bl	1aa02 <WsfMsgAlloc>
   1a0da:	60b8      	str	r0, [r7, #8]
   1a0dc:	68bb      	ldr	r3, [r7, #8]
   1a0de:	2b00      	cmp	r3, #0
   1a0e0:	d00b      	beq.n	1a0fa <amvoleDmCback+0x3a>
  {
    memcpy(pMsg, pDmEvt, len);
   1a0e2:	89fb      	ldrh	r3, [r7, #14]
   1a0e4:	461a      	mov	r2, r3
   1a0e6:	6879      	ldr	r1, [r7, #4]
   1a0e8:	68b8      	ldr	r0, [r7, #8]
   1a0ea:	f7f2 f839 	bl	c160 <memcpy>
    WsfMsgSend(amvoleHandlerId, pMsg);
   1a0ee:	4b05      	ldr	r3, [pc, #20]	; (1a104 <amvoleDmCback+0x44>)
   1a0f0:	781b      	ldrb	r3, [r3, #0]
   1a0f2:	68b9      	ldr	r1, [r7, #8]
   1a0f4:	4618      	mov	r0, r3
   1a0f6:	f000 fca8 	bl	1aa4a <WsfMsgSend>
  }
}
   1a0fa:	bf00      	nop
   1a0fc:	3710      	adds	r7, #16
   1a0fe:	46bd      	mov	sp, r7
   1a100:	bd80      	pop	{r7, pc}
   1a102:	bf00      	nop
   1a104:	100443eb 	.word	0x100443eb

0001a108 <amvoleTxChannelIsAvailable>:

bool amvoleTxChannelIsAvailable(void)
{
   1a108:	b580      	push	{r7, lr}
   1a10a:	af00      	add	r7, sp, #0
  return(DM_CONN_ID_NONE != AppConnIsOpen());
   1a10c:	f008 f80c 	bl	22128 <AppConnIsOpen>
   1a110:	4603      	mov	r3, r0
   1a112:	2b00      	cmp	r3, #0
   1a114:	bf14      	ite	ne
   1a116:	2301      	movne	r3, #1
   1a118:	2300      	moveq	r3, #0
   1a11a:	b2db      	uxtb	r3, r3
}
   1a11c:	4618      	mov	r0, r3
   1a11e:	bd80      	pop	{r7, pc}

0001a120 <VoleBleSend>:

void VoleBleSend(uint8_t * buf, uint32_t len)
{
   1a120:	b580      	push	{r7, lr}
   1a122:	b082      	sub	sp, #8
   1a124:	af00      	add	r7, sp, #0
   1a126:	6078      	str	r0, [r7, #4]
   1a128:	6039      	str	r1, [r7, #0]
    if(amvoleTxChannelIsAvailable())
   1a12a:	f7ff ffed 	bl	1a108 <amvoleTxChannelIsAvailable>
   1a12e:	4603      	mov	r3, r0
   1a130:	2b00      	cmp	r3, #0
   1a132:	d008      	beq.n	1a146 <VoleBleSend+0x26>
    {
        // simply tries to send notification
        AttsHandleValueNtf(g_AmaConnId, VOLES_TX_HDL, len, buf);   // connId always group 0 since support only 1 connection.
   1a134:	4b06      	ldr	r3, [pc, #24]	; (1a150 <VoleBleSend+0x30>)
   1a136:	7818      	ldrb	r0, [r3, #0]
   1a138:	683b      	ldr	r3, [r7, #0]
   1a13a:	b29a      	uxth	r2, r3
   1a13c:	687b      	ldr	r3, [r7, #4]
   1a13e:	f640 0104 	movw	r1, #2052	; 0x804
   1a142:	f7f3 ff73 	bl	e02c <AttsHandleValueNtf>
    }
}
   1a146:	bf00      	nop
   1a148:	3708      	adds	r7, #8
   1a14a:	46bd      	mov	sp, r7
   1a14c:	bd80      	pop	{r7, pc}
   1a14e:	bf00      	nop
   1a150:	10019938 	.word	0x10019938

0001a154 <amvoleAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleAttCback(attEvt_t *pEvt)
{
   1a154:	b580      	push	{r7, lr}
   1a156:	b084      	sub	sp, #16
   1a158:	af00      	add	r7, sp, #0
   1a15a:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   1a15c:	687b      	ldr	r3, [r7, #4]
   1a15e:	891b      	ldrh	r3, [r3, #8]
   1a160:	3310      	adds	r3, #16
   1a162:	b29b      	uxth	r3, r3
   1a164:	4618      	mov	r0, r3
   1a166:	f000 fc4c 	bl	1aa02 <WsfMsgAlloc>
   1a16a:	60f8      	str	r0, [r7, #12]
   1a16c:	68fb      	ldr	r3, [r7, #12]
   1a16e:	2b00      	cmp	r3, #0
   1a170:	d018      	beq.n	1a1a4 <amvoleAttCback+0x50>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   1a172:	2210      	movs	r2, #16
   1a174:	6879      	ldr	r1, [r7, #4]
   1a176:	68f8      	ldr	r0, [r7, #12]
   1a178:	f7f1 fff2 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   1a17c:	68fb      	ldr	r3, [r7, #12]
   1a17e:	f103 0210 	add.w	r2, r3, #16
   1a182:	68fb      	ldr	r3, [r7, #12]
   1a184:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   1a186:	68fb      	ldr	r3, [r7, #12]
   1a188:	6858      	ldr	r0, [r3, #4]
   1a18a:	687b      	ldr	r3, [r7, #4]
   1a18c:	6859      	ldr	r1, [r3, #4]
   1a18e:	687b      	ldr	r3, [r7, #4]
   1a190:	891b      	ldrh	r3, [r3, #8]
   1a192:	461a      	mov	r2, r3
   1a194:	f7f1 ffe4 	bl	c160 <memcpy>
    WsfMsgSend(amvoleHandlerId, pMsg);
   1a198:	4b04      	ldr	r3, [pc, #16]	; (1a1ac <amvoleAttCback+0x58>)
   1a19a:	781b      	ldrb	r3, [r3, #0]
   1a19c:	68f9      	ldr	r1, [r7, #12]
   1a19e:	4618      	mov	r0, r3
   1a1a0:	f000 fc53 	bl	1aa4a <WsfMsgSend>
  }
}
   1a1a4:	bf00      	nop
   1a1a6:	3710      	adds	r7, #16
   1a1a8:	46bd      	mov	sp, r7
   1a1aa:	bd80      	pop	{r7, pc}
   1a1ac:	100443eb 	.word	0x100443eb

0001a1b0 <amvoleCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleCccCback(attsCccEvt_t *pEvt)
{
   1a1b0:	b580      	push	{r7, lr}
   1a1b2:	b084      	sub	sp, #16
   1a1b4:	af00      	add	r7, sp, #0
   1a1b6:	6078      	str	r0, [r7, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1a1b8:	687b      	ldr	r3, [r7, #4]
   1a1ba:	889b      	ldrh	r3, [r3, #4]
   1a1bc:	2b00      	cmp	r3, #0
   1a1be:	d012      	beq.n	1a1e6 <amvoleCccCback+0x36>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   1a1c0:	687b      	ldr	r3, [r7, #4]
   1a1c2:	881b      	ldrh	r3, [r3, #0]
   1a1c4:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1a1c6:	4618      	mov	r0, r3
   1a1c8:	f007 ffd0 	bl	2216c <AppDbGetHdl>
   1a1cc:	60f8      	str	r0, [r7, #12]
   1a1ce:	68fb      	ldr	r3, [r7, #12]
   1a1d0:	2b00      	cmp	r3, #0
   1a1d2:	d008      	beq.n	1a1e6 <amvoleCccCback+0x36>
  {
    /* store value in device database */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   1a1d4:	687b      	ldr	r3, [r7, #4]
   1a1d6:	7a1b      	ldrb	r3, [r3, #8]
   1a1d8:	b299      	uxth	r1, r3
   1a1da:	687b      	ldr	r3, [r7, #4]
   1a1dc:	88db      	ldrh	r3, [r3, #6]
   1a1de:	461a      	mov	r2, r3
   1a1e0:	68f8      	ldr	r0, [r7, #12]
   1a1e2:	f7ff fadf 	bl	197a4 <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   1a1e6:	200a      	movs	r0, #10
   1a1e8:	f000 fc0b 	bl	1aa02 <WsfMsgAlloc>
   1a1ec:	60b8      	str	r0, [r7, #8]
   1a1ee:	68bb      	ldr	r3, [r7, #8]
   1a1f0:	2b00      	cmp	r3, #0
   1a1f2:	d00a      	beq.n	1a20a <amvoleCccCback+0x5a>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   1a1f4:	220a      	movs	r2, #10
   1a1f6:	6879      	ldr	r1, [r7, #4]
   1a1f8:	68b8      	ldr	r0, [r7, #8]
   1a1fa:	f7f1 ffb1 	bl	c160 <memcpy>
    WsfMsgSend(amvoleHandlerId, pMsg);
   1a1fe:	4b05      	ldr	r3, [pc, #20]	; (1a214 <amvoleCccCback+0x64>)
   1a200:	781b      	ldrb	r3, [r3, #0]
   1a202:	68b9      	ldr	r1, [r7, #8]
   1a204:	4618      	mov	r0, r3
   1a206:	f000 fc20 	bl	1aa4a <WsfMsgSend>
  }
}
   1a20a:	bf00      	nop
   1a20c:	3710      	adds	r7, #16
   1a20e:	46bd      	mov	sp, r7
   1a210:	bd80      	pop	{r7, pc}
   1a212:	bf00      	nop
   1a214:	100443eb 	.word	0x100443eb

0001a218 <amvoleProcCccState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleProcCccState(amvoleMsg_t *pMsg)
{
   1a218:	b580      	push	{r7, lr}
   1a21a:	b082      	sub	sp, #8
   1a21c:	af00      	add	r7, sp, #0
   1a21e:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO3("ccc state ind value:%d handle:%d idx:%d\n", pMsg->ccc.value, pMsg->ccc.handle, pMsg->ccc.idx);
   1a220:	687b      	ldr	r3, [r7, #4]
   1a222:	88db      	ldrh	r3, [r3, #6]
   1a224:	4619      	mov	r1, r3
   1a226:	687b      	ldr	r3, [r7, #4]
   1a228:	889b      	ldrh	r3, [r3, #4]
   1a22a:	461a      	mov	r2, r3
   1a22c:	687b      	ldr	r3, [r7, #4]
   1a22e:	7a1b      	ldrb	r3, [r3, #8]
   1a230:	480e      	ldr	r0, [pc, #56]	; (1a26c <amvoleProcCccState+0x54>)
   1a232:	f006 fa7d 	bl	20730 <WsfTrace>

  /* VOLES TX CCC */
  if (pMsg->ccc.idx == VOLES_TX_CCC_IDX)
   1a236:	687b      	ldr	r3, [r7, #4]
   1a238:	7a1b      	ldrb	r3, [r3, #8]
   1a23a:	2b01      	cmp	r3, #1
   1a23c:	d113      	bne.n	1a266 <amvoleProcCccState+0x4e>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   1a23e:	687b      	ldr	r3, [r7, #4]
   1a240:	88db      	ldrh	r3, [r3, #6]
   1a242:	2b01      	cmp	r3, #1
   1a244:	d10b      	bne.n	1a25e <amvoleProcCccState+0x46>
    {
      // notify enabled
      g_AmaConnId = (dmConnId_t) pMsg->ccc.hdr.param;
   1a246:	687b      	ldr	r3, [r7, #4]
   1a248:	881b      	ldrh	r3, [r3, #0]
   1a24a:	b2da      	uxtb	r2, r3
   1a24c:	4b08      	ldr	r3, [pc, #32]	; (1a270 <amvoleProcCccState+0x58>)
   1a24e:	701a      	strb	r2, [r3, #0]
      APP_TRACE_INFO1("connId : %d\r\n", pMsg->ccc.hdr.param);
   1a250:	687b      	ldr	r3, [r7, #4]
   1a252:	881b      	ldrh	r3, [r3, #0]
   1a254:	4619      	mov	r1, r3
   1a256:	4807      	ldr	r0, [pc, #28]	; (1a274 <amvoleProcCccState+0x5c>)
   1a258:	f006 fa6a 	bl	20730 <WsfTrace>
    }
    else
    {
      g_AmaConnId = DM_CONN_ID_NONE;
    }
    return;
   1a25c:	e003      	b.n	1a266 <amvoleProcCccState+0x4e>
      g_AmaConnId = DM_CONN_ID_NONE;
   1a25e:	4b04      	ldr	r3, [pc, #16]	; (1a270 <amvoleProcCccState+0x58>)
   1a260:	2200      	movs	r2, #0
   1a262:	701a      	strb	r2, [r3, #0]
    return;
   1a264:	bf00      	nop
  }
}
   1a266:	3708      	adds	r7, #8
   1a268:	46bd      	mov	sp, r7
   1a26a:	bd80      	pop	{r7, pc}
   1a26c:	0003b3e8 	.word	0x0003b3e8
   1a270:	10019938 	.word	0x10019938
   1a274:	0003b414 	.word	0x0003b414

0001a278 <amvoleClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleClose(amvoleMsg_t *pMsg)
{
   1a278:	b480      	push	{r7}
   1a27a:	b083      	sub	sp, #12
   1a27c:	af00      	add	r7, sp, #0
   1a27e:	6078      	str	r0, [r7, #4]
}
   1a280:	bf00      	nop
   1a282:	370c      	adds	r7, #12
   1a284:	46bd      	mov	sp, r7
   1a286:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a28a:	4770      	bx	lr

0001a28c <amvoleSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleSetup(amvoleMsg_t *pMsg)
{
   1a28c:	b580      	push	{r7, lr}
   1a28e:	b082      	sub	sp, #8
   1a290:	af00      	add	r7, sp, #0
   1a292:	6078      	str	r0, [r7, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(amvoleAdvDataDisc), (uint8_t *) amvoleAdvDataDisc);
   1a294:	4a0e      	ldr	r2, [pc, #56]	; (1a2d0 <amvoleSetup+0x44>)
   1a296:	211f      	movs	r1, #31
   1a298:	2002      	movs	r0, #2
   1a29a:	f009 fa33 	bl	23704 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(amvoleScanDataDisc), (uint8_t *) amvoleScanDataDisc);
   1a29e:	4a0d      	ldr	r2, [pc, #52]	; (1a2d4 <amvoleSetup+0x48>)
   1a2a0:	211f      	movs	r1, #31
   1a2a2:	2003      	movs	r0, #3
   1a2a4:	f009 fa2e 	bl	23704 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(amvoleAdvDataDisc), (uint8_t *) amvoleAdvDataDisc);
   1a2a8:	4a09      	ldr	r2, [pc, #36]	; (1a2d0 <amvoleSetup+0x44>)
   1a2aa:	211f      	movs	r1, #31
   1a2ac:	2000      	movs	r0, #0
   1a2ae:	f009 fa29 	bl	23704 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(amvoleScanDataDisc), (uint8_t *) amvoleScanDataDisc);
   1a2b2:	4a08      	ldr	r2, [pc, #32]	; (1a2d4 <amvoleSetup+0x48>)
   1a2b4:	211f      	movs	r1, #31
   1a2b6:	2001      	movs	r0, #1
   1a2b8:	f009 fa24 	bl	23704 <AppAdvSetData>

  AppSetBondable(TRUE);
   1a2bc:	2001      	movs	r0, #1
   1a2be:	f009 f937 	bl	23530 <AppSetBondable>
  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   1a2c2:	2002      	movs	r0, #2
   1a2c4:	f009 fa40 	bl	23748 <AppAdvStart>
}
   1a2c8:	bf00      	nop
   1a2ca:	3708      	adds	r7, #8
   1a2cc:	46bd      	mov	sp, r7
   1a2ce:	bd80      	pop	{r7, pc}
   1a2d0:	100443ac 	.word	0x100443ac
   1a2d4:	100443cc 	.word	0x100443cc

0001a2d8 <am_app_led_on>:
// LED task to indicate external events, such as heart beat and key word detected.
//
//*****************************************************************************

void am_app_led_on(void)
{
   1a2d8:	b580      	push	{r7, lr}
   1a2da:	af00      	add	r7, sp, #0
        am_hal_gpio_out_bit_toggle(LED_D8);
#endif // #if defined (AM_PART_APOLLO2)

#if defined (AM_PART_APOLLO3)
#if USE_APOLLO3_BLUE_EVB
        am_hal_gpio_state_write(LED_D5, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1a2dc:	2102      	movs	r1, #2
   1a2de:	200e      	movs	r0, #14
   1a2e0:	f01d fd38 	bl	37d54 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(LED_D6, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1a2e4:	2102      	movs	r1, #2
   1a2e6:	200f      	movs	r0, #15
   1a2e8:	f01d fd34 	bl	37d54 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(LED_D7, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1a2ec:	2102      	movs	r1, #2
   1a2ee:	201e      	movs	r0, #30
   1a2f0:	f01d fd30 	bl	37d54 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(LED_D8, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1a2f4:	2102      	movs	r1, #2
   1a2f6:	200a      	movs	r0, #10
   1a2f8:	f01d fd2c 	bl	37d54 <am_hal_gpio_state_write>

#endif // #if USE_APOLLO3_BLUE_EVB
#endif //#if defined (AM_PART_APOLLO3)

}
   1a2fc:	bf00      	nop
   1a2fe:	bd80      	pop	{r7, pc}

0001a300 <am_app_led_off>:

void am_app_led_off(void)
{
   1a300:	b580      	push	{r7, lr}
   1a302:	af00      	add	r7, sp, #0
    am_hal_gpio_out_bit_clear(LED_D8);
#endif

#if defined (AM_PART_APOLLO3)
#if USE_APOLLO3_BLUE_EVB
    am_hal_gpio_state_write(LED_D5, AM_HAL_GPIO_OUTPUT_CLEAR);
   1a304:	2100      	movs	r1, #0
   1a306:	200e      	movs	r0, #14
   1a308:	f01d fd24 	bl	37d54 <am_hal_gpio_state_write>
    am_hal_gpio_state_write(LED_D6, AM_HAL_GPIO_OUTPUT_CLEAR);
   1a30c:	2100      	movs	r1, #0
   1a30e:	200f      	movs	r0, #15
   1a310:	f01d fd20 	bl	37d54 <am_hal_gpio_state_write>
    am_hal_gpio_state_write(LED_D7, AM_HAL_GPIO_OUTPUT_CLEAR);
   1a314:	2100      	movs	r1, #0
   1a316:	201e      	movs	r0, #30
   1a318:	f01d fd1c 	bl	37d54 <am_hal_gpio_state_write>
    am_hal_gpio_state_write(LED_D8, AM_HAL_GPIO_OUTPUT_CLEAR);
   1a31c:	2100      	movs	r1, #0
   1a31e:	200a      	movs	r0, #10
   1a320:	f01d fd18 	bl	37d54 <am_hal_gpio_state_write>
#endif
#endif
}
   1a324:	bf00      	nop
   1a326:	bd80      	pop	{r7, pc}

0001a328 <amvoleBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleBtnCback(uint8_t btn)
{
   1a328:	b580      	push	{r7, lr}
   1a32a:	b084      	sub	sp, #16
   1a32c:	af00      	add	r7, sp, #0
   1a32e:	4603      	mov	r3, r0
   1a330:	71fb      	strb	r3, [r7, #7]
  dmConnId_t      connId = AppConnIsOpen();
   1a332:	f007 fef9 	bl	22128 <AppConnIsOpen>
   1a336:	4603      	mov	r3, r0
   1a338:	73fb      	strb	r3, [r7, #15]

  APP_TRACE_INFO2("button %d pressed, connection open:%d", btn, connId);
   1a33a:	79fb      	ldrb	r3, [r7, #7]
   1a33c:	7bfa      	ldrb	r2, [r7, #15]
   1a33e:	4619      	mov	r1, r3
   1a340:	4817      	ldr	r0, [pc, #92]	; (1a3a0 <amvoleBtnCback+0x78>)
   1a342:	f006 f9f5 	bl	20730 <WsfTrace>
   
  /* button actions when connected */
  if (connId != DM_CONN_ID_NONE)
   1a346:	7bfb      	ldrb	r3, [r7, #15]
   1a348:	2b00      	cmp	r3, #0
   1a34a:	d025      	beq.n	1a398 <amvoleBtnCback+0x70>
  {
    APP_TRACE_INFO1("btn:%d", btn);
   1a34c:	79fb      	ldrb	r3, [r7, #7]
   1a34e:	4619      	mov	r1, r3
   1a350:	4814      	ldr	r0, [pc, #80]	; (1a3a4 <amvoleBtnCback+0x7c>)
   1a352:	f006 f9ed 	bl	20730 <WsfTrace>
    switch (btn)
   1a356:	79fb      	ldrb	r3, [r7, #7]
   1a358:	2b02      	cmp	r3, #2
   1a35a:	d002      	beq.n	1a362 <amvoleBtnCback+0x3a>
   1a35c:	2b07      	cmp	r3, #7
   1a35e:	d00f      	beq.n	1a380 <amvoleBtnCback+0x58>
        voles_init(amvoleHandlerId, OPUS_CODEC_IN_USE);
       am_app_KWD_AMA_start_speech_send();
        break;

      default:
        break;
   1a360:	e01a      	b.n	1a398 <amvoleBtnCback+0x70>
        APP_TRACE_INFO0("start speech data send...");
   1a362:	4811      	ldr	r0, [pc, #68]	; (1a3a8 <amvoleBtnCback+0x80>)
   1a364:	f006 f9e4 	bl	20730 <WsfTrace>
        voles_set_codec_type(MSBC_CODEC_IN_USE);
   1a368:	2000      	movs	r0, #0
   1a36a:	f7fa ff45 	bl	151f8 <voles_set_codec_type>
        voles_init(amvoleHandlerId, MSBC_CODEC_IN_USE);
   1a36e:	4b0f      	ldr	r3, [pc, #60]	; (1a3ac <amvoleBtnCback+0x84>)
   1a370:	781b      	ldrb	r3, [r3, #0]
   1a372:	2100      	movs	r1, #0
   1a374:	4618      	mov	r0, r3
   1a376:	f7fb f8b1 	bl	154dc <voles_init>
        am_app_KWD_AMA_start_speech_send();
   1a37a:	f01e f973 	bl	38664 <am_app_KWD_AMA_start_speech_send>
        break;
   1a37e:	e00b      	b.n	1a398 <amvoleBtnCback+0x70>
       voles_set_codec_type(OPUS_CODEC_IN_USE);
   1a380:	2001      	movs	r0, #1
   1a382:	f7fa ff39 	bl	151f8 <voles_set_codec_type>
        voles_init(amvoleHandlerId, OPUS_CODEC_IN_USE);
   1a386:	4b09      	ldr	r3, [pc, #36]	; (1a3ac <amvoleBtnCback+0x84>)
   1a388:	781b      	ldrb	r3, [r3, #0]
   1a38a:	2101      	movs	r1, #1
   1a38c:	4618      	mov	r0, r3
   1a38e:	f7fb f8a5 	bl	154dc <voles_init>
       am_app_KWD_AMA_start_speech_send();
   1a392:	f01e f967 	bl	38664 <am_app_KWD_AMA_start_speech_send>
        break;
   1a396:	bf00      	nop
    }
  }
}
   1a398:	bf00      	nop
   1a39a:	3710      	adds	r7, #16
   1a39c:	46bd      	mov	sp, r7
   1a39e:	bd80      	pop	{r7, pc}
   1a3a0:	0003b424 	.word	0x0003b424
   1a3a4:	0003b44c 	.word	0x0003b44c
   1a3a8:	0003b454 	.word	0x0003b454
   1a3ac:	100443eb 	.word	0x100443eb

0001a3b0 <amvole_write_cback>:


uint8_t
amvole_write_cback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{
   1a3b0:	b590      	push	{r4, r7, lr}
   1a3b2:	b083      	sub	sp, #12
   1a3b4:	af00      	add	r7, sp, #0
   1a3b6:	4604      	mov	r4, r0
   1a3b8:	4608      	mov	r0, r1
   1a3ba:	4611      	mov	r1, r2
   1a3bc:	461a      	mov	r2, r3
   1a3be:	4623      	mov	r3, r4
   1a3c0:	71fb      	strb	r3, [r7, #7]
   1a3c2:	4603      	mov	r3, r0
   1a3c4:	80bb      	strh	r3, [r7, #4]
   1a3c6:	460b      	mov	r3, r1
   1a3c8:	71bb      	strb	r3, [r7, #6]
   1a3ca:	4613      	mov	r3, r2
   1a3cc:	807b      	strh	r3, [r7, #2]
    if (handle == VOLES_RX_HDL)
   1a3ce:	88bb      	ldrh	r3, [r7, #4]
   1a3d0:	f640 0202 	movw	r2, #2050	; 0x802
   1a3d4:	4293      	cmp	r3, r2
   1a3d6:	d104      	bne.n	1a3e2 <amvole_write_cback+0x32>
    {
        am_app_KWD_AMA_rx_handler(pValue, len);
   1a3d8:	8b3b      	ldrh	r3, [r7, #24]
   1a3da:	4619      	mov	r1, r3
   1a3dc:	69f8      	ldr	r0, [r7, #28]
   1a3de:	f01e fb4f 	bl	38a80 <am_app_KWD_AMA_rx_handler>
    }
    return ATT_SUCCESS;
   1a3e2:	2300      	movs	r3, #0
}
   1a3e4:	4618      	mov	r0, r3
   1a3e6:	370c      	adds	r7, #12
   1a3e8:	46bd      	mov	sp, r7
   1a3ea:	bd90      	pop	{r4, r7, pc}

0001a3ec <amvoleProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void amvoleProcMsg(amvoleMsg_t *pMsg)
{
   1a3ec:	b580      	push	{r7, lr}
   1a3ee:	b084      	sub	sp, #16
   1a3f0:	af00      	add	r7, sp, #0
   1a3f2:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   1a3f4:	2300      	movs	r3, #0
   1a3f6:	73fb      	strb	r3, [r7, #15]

  static uint8_t retry_cnt = 0;

  switch(pMsg->hdr.event)
   1a3f8:	687b      	ldr	r3, [r7, #4]
   1a3fa:	789b      	ldrb	r3, [r3, #2]
   1a3fc:	3b0f      	subs	r3, #15
   1a3fe:	2b31      	cmp	r3, #49	; 0x31
   1a400:	f200 80f3 	bhi.w	1a5ea <amvoleProcMsg+0x1fe>
   1a404:	a201      	add	r2, pc, #4	; (adr r2, 1a40c <amvoleProcMsg+0x20>)
   1a406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a40a:	bf00      	nop
   1a40c:	0001a4d5 	.word	0x0001a4d5
   1a410:	0001a4df 	.word	0x0001a4df
   1a414:	0001a52d 	.word	0x0001a52d
   1a418:	0001a5eb 	.word	0x0001a5eb
   1a41c:	0001a5eb 	.word	0x0001a5eb
   1a420:	0001a5eb 	.word	0x0001a5eb
   1a424:	0001a5eb 	.word	0x0001a5eb
   1a428:	0001a5eb 	.word	0x0001a5eb
   1a42c:	0001a5eb 	.word	0x0001a5eb
   1a430:	0001a5eb 	.word	0x0001a5eb
   1a434:	0001a5eb 	.word	0x0001a5eb
   1a438:	0001a5eb 	.word	0x0001a5eb
   1a43c:	0001a5eb 	.word	0x0001a5eb
   1a440:	0001a5eb 	.word	0x0001a5eb
   1a444:	0001a5eb 	.word	0x0001a5eb
   1a448:	0001a5eb 	.word	0x0001a5eb
   1a44c:	0001a5eb 	.word	0x0001a5eb
   1a450:	0001a4f7 	.word	0x0001a4f7
   1a454:	0001a501 	.word	0x0001a501
   1a458:	0001a507 	.word	0x0001a507
   1a45c:	0001a5eb 	.word	0x0001a5eb
   1a460:	0001a5eb 	.word	0x0001a5eb
   1a464:	0001a5eb 	.word	0x0001a5eb
   1a468:	0001a5eb 	.word	0x0001a5eb
   1a46c:	0001a50d 	.word	0x0001a50d
   1a470:	0001a585 	.word	0x0001a585
   1a474:	0001a5a3 	.word	0x0001a5a3
   1a478:	0001a5ad 	.word	0x0001a5ad
   1a47c:	0001a5b3 	.word	0x0001a5b3
   1a480:	0001a5b9 	.word	0x0001a5b9
   1a484:	0001a5bf 	.word	0x0001a5bf
   1a488:	0001a5c5 	.word	0x0001a5c5
   1a48c:	0001a5eb 	.word	0x0001a5eb
   1a490:	0001a5eb 	.word	0x0001a5eb
   1a494:	0001a5eb 	.word	0x0001a5eb
   1a498:	0001a5eb 	.word	0x0001a5eb
   1a49c:	0001a5eb 	.word	0x0001a5eb
   1a4a0:	0001a5cf 	.word	0x0001a5cf
   1a4a4:	0001a5e1 	.word	0x0001a5e1
   1a4a8:	0001a5eb 	.word	0x0001a5eb
   1a4ac:	0001a5eb 	.word	0x0001a5eb
   1a4b0:	0001a5eb 	.word	0x0001a5eb
   1a4b4:	0001a5eb 	.word	0x0001a5eb
   1a4b8:	0001a5eb 	.word	0x0001a5eb
   1a4bc:	0001a5eb 	.word	0x0001a5eb
   1a4c0:	0001a5eb 	.word	0x0001a5eb
   1a4c4:	0001a5eb 	.word	0x0001a5eb
   1a4c8:	0001a5eb 	.word	0x0001a5eb
   1a4cc:	0001a5eb 	.word	0x0001a5eb
   1a4d0:	0001a56d 	.word	0x0001a56d
  {    
    case ATTS_HANDLE_VALUE_CNF:

      voles_proc_msg(&pMsg->hdr);
   1a4d4:	687b      	ldr	r3, [r7, #4]
   1a4d6:	4618      	mov	r0, r3
   1a4d8:	f7fb f868 	bl	155ac <voles_proc_msg>
      
      break;
   1a4dc:	e088      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case ATTS_CCC_STATE_IND:
      amvoleProcCccState(pMsg);
   1a4de:	6878      	ldr	r0, [r7, #4]
   1a4e0:	f7ff fe9a 	bl	1a218 <amvoleProcCccState>
      if(pMsg->ccc.handle == VOLES_TX_CH_CCC_HDL)
   1a4e4:	687b      	ldr	r3, [r7, #4]
   1a4e6:	889b      	ldrh	r3, [r3, #4]
   1a4e8:	f640 0205 	movw	r2, #2053	; 0x805
   1a4ec:	4293      	cmp	r3, r2
   1a4ee:	d17e      	bne.n	1a5ee <amvoleProcMsg+0x202>
          am_app_KWD_AMA_tx_ver_exchange_send();
   1a4f0:	f01d fffc 	bl	384ec <am_app_KWD_AMA_tx_ver_exchange_send>
      break;
   1a4f4:	e07b      	b.n	1a5ee <amvoleProcMsg+0x202>

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   1a4f6:	f7f6 fb65 	bl	10bc4 <DmSecGenerateEccKeyReq>

      #if USE_BLE_TX_POWER_SET
        HciVsEM_SetRfPowerLevelEx(TX_POWER_LEVEL_PLUS_6P2_dBm);
      #endif

      uiEvent = APP_UI_RESET_CMPL;
   1a4fa:	2301      	movs	r3, #1
   1a4fc:	73fb      	strb	r3, [r7, #15]
      break;
   1a4fe:	e077      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   1a500:	2303      	movs	r3, #3
   1a502:	73fb      	strb	r3, [r7, #15]
      break;
   1a504:	e074      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   1a506:	2304      	movs	r3, #4
   1a508:	73fb      	strb	r3, [r7, #15]
      break;
   1a50a:	e071      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_CONN_OPEN_IND:
      voles_proc_msg(&pMsg->hdr);
   1a50c:	687b      	ldr	r3, [r7, #4]
   1a50e:	4618      	mov	r0, r3
   1a510:	f7fb f84c 	bl	155ac <voles_proc_msg>
      DmConnSetDataLen(1, 251, 0x848);
   1a514:	f640 0248 	movw	r2, #2120	; 0x848
   1a518:	21fb      	movs	r1, #251	; 0xfb
   1a51a:	2001      	movs	r0, #1
   1a51c:	f7f5 fd5e 	bl	ffdc <DmConnSetDataLen>

      uiEvent = APP_UI_CONN_OPEN;
   1a520:	2308      	movs	r3, #8
   1a522:	73fb      	strb	r3, [r7, #15]

      retry_cnt = 0;
   1a524:	4b38      	ldr	r3, [pc, #224]	; (1a608 <amvoleProcMsg+0x21c>)
   1a526:	2200      	movs	r2, #0
   1a528:	701a      	strb	r2, [r3, #0]

      break;
   1a52a:	e061      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case ATT_MTU_UPDATE_IND:
      if(AttGetMtu(1) < BLE_MSBC_DATA_BUFFER_SIZE) {
   1a52c:	2001      	movs	r0, #1
   1a52e:	f7f2 fd57 	bl	cfe0 <AttGetMtu>
   1a532:	4603      	mov	r3, r0
   1a534:	2b71      	cmp	r3, #113	; 0x71
   1a536:	d80d      	bhi.n	1a554 <amvoleProcMsg+0x168>
        if(retry_cnt < 5)
   1a538:	4b33      	ldr	r3, [pc, #204]	; (1a608 <amvoleProcMsg+0x21c>)
   1a53a:	781b      	ldrb	r3, [r3, #0]
   1a53c:	2b04      	cmp	r3, #4
   1a53e:	d809      	bhi.n	1a554 <amvoleProcMsg+0x168>
        {
          retry_cnt++;
   1a540:	4b31      	ldr	r3, [pc, #196]	; (1a608 <amvoleProcMsg+0x21c>)
   1a542:	781b      	ldrb	r3, [r3, #0]
   1a544:	3301      	adds	r3, #1
   1a546:	b2da      	uxtb	r2, r3
   1a548:	4b2f      	ldr	r3, [pc, #188]	; (1a608 <amvoleProcMsg+0x21c>)
   1a54a:	701a      	strb	r2, [r3, #0]
          AttcMtuReq(1, 247);
   1a54c:	21f7      	movs	r1, #247	; 0xf7
   1a54e:	2001      	movs	r0, #1
   1a550:	f7f3 f964 	bl	d81c <AttcMtuReq>
        }
      }

      APP_TRACE_INFO2("ATT_MTU_UPDATE_IND AttGetMtu(), return = %d pMsg->att.mtu = %d\n", AttGetMtu(1), pMsg->att.mtu);
   1a554:	2001      	movs	r0, #1
   1a556:	f7f2 fd43 	bl	cfe0 <AttGetMtu>
   1a55a:	4603      	mov	r3, r0
   1a55c:	4619      	mov	r1, r3
   1a55e:	687b      	ldr	r3, [r7, #4]
   1a560:	89db      	ldrh	r3, [r3, #14]
   1a562:	461a      	mov	r2, r3
   1a564:	4829      	ldr	r0, [pc, #164]	; (1a60c <amvoleProcMsg+0x220>)
   1a566:	f006 f8e3 	bl	20730 <WsfTrace>
      break;
   1a56a:	e041      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_CONN_DATA_LEN_CHANGE_IND:
      am_util_debug_printf("DM_CONN_DATA_LEN_CHANGE_IND: status = %d, max RX len = %d, max TX len = %d \n", pMsg->dm.dataLenChange.hdr.status, pMsg->dm.dataLenChange.maxRxOctets, pMsg->dm.dataLenChange.maxTxOctets);
   1a56c:	687b      	ldr	r3, [r7, #4]
   1a56e:	78db      	ldrb	r3, [r3, #3]
   1a570:	4619      	mov	r1, r3
   1a572:	687b      	ldr	r3, [r7, #4]
   1a574:	895b      	ldrh	r3, [r3, #10]
   1a576:	461a      	mov	r2, r3
   1a578:	687b      	ldr	r3, [r7, #4]
   1a57a:	88db      	ldrh	r3, [r3, #6]
   1a57c:	4824      	ldr	r0, [pc, #144]	; (1a610 <amvoleProcMsg+0x224>)
   1a57e:	f007 fca9 	bl	21ed4 <am_util_stdio_printf>
      break;
   1a582:	e035      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_CONN_CLOSE_IND:
      APP_TRACE_INFO1("DM_CONN_CLOSE_IND reason = 0x%02x\n", pMsg->dm.connClose.reason);
   1a584:	687b      	ldr	r3, [r7, #4]
   1a586:	7a1b      	ldrb	r3, [r3, #8]
   1a588:	4619      	mov	r1, r3
   1a58a:	4822      	ldr	r0, [pc, #136]	; (1a614 <amvoleProcMsg+0x228>)
   1a58c:	f006 f8d0 	bl	20730 <WsfTrace>

      amvoleClose(pMsg);
   1a590:	6878      	ldr	r0, [r7, #4]
   1a592:	f7ff fe71 	bl	1a278 <amvoleClose>
      uiEvent = APP_UI_CONN_CLOSE;
   1a596:	2309      	movs	r3, #9
   1a598:	73fb      	strb	r3, [r7, #15]

//      AppAdvStart(APP_MODE_DISCOVERABLE);

      g_AmaConnId = DM_CONN_ID_NONE;
   1a59a:	4b1f      	ldr	r3, [pc, #124]	; (1a618 <amvoleProcMsg+0x22c>)
   1a59c:	2200      	movs	r2, #0
   1a59e:	701a      	strb	r2, [r3, #0]
      //g_eAmaStatus = VOS_AMA_INIT;
      break;
   1a5a0:	e026      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_CONN_UPDATE_IND:
      voles_proc_msg(&pMsg->hdr);
   1a5a2:	687b      	ldr	r3, [r7, #4]
   1a5a4:	4618      	mov	r0, r3
   1a5a6:	f7fb f801 	bl	155ac <voles_proc_msg>
      break;
   1a5aa:	e021      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   1a5ac:	230a      	movs	r3, #10
   1a5ae:	73fb      	strb	r3, [r7, #15]
      break;
   1a5b0:	e01e      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   1a5b2:	230b      	movs	r3, #11
   1a5b4:	73fb      	strb	r3, [r7, #15]
      break;
   1a5b6:	e01b      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   1a5b8:	230c      	movs	r3, #12
   1a5ba:	73fb      	strb	r3, [r7, #15]
      break;
   1a5bc:	e018      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1a5be:	230d      	movs	r3, #13
   1a5c0:	73fb      	strb	r3, [r7, #15]
      break;
   1a5c2:	e015      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->dm.authReq);
   1a5c4:	687b      	ldr	r3, [r7, #4]
   1a5c6:	4618      	mov	r0, r3
   1a5c8:	f007 fd5a 	bl	22080 <AppHandlePasskey>
      break;
   1a5cc:	e010      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_ECC_KEY_IND:
      amvoleSetup(pMsg);
   1a5ce:	6878      	ldr	r0, [r7, #4]
   1a5d0:	f7ff fe5c 	bl	1a28c <amvoleSetup>
      DmSecSetEccKey(&pMsg->dm.eccMsg.data.key);
   1a5d4:	687b      	ldr	r3, [r7, #4]
   1a5d6:	3304      	adds	r3, #4
   1a5d8:	4618      	mov	r0, r3
   1a5da:	f7f6 fb51 	bl	10c80 <DmSecSetEccKey>
      break;
   1a5de:	e007      	b.n	1a5f0 <amvoleProcMsg+0x204>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->dm.cnfInd);
   1a5e0:	687b      	ldr	r3, [r7, #4]
   1a5e2:	4618      	mov	r0, r3
   1a5e4:	f007 fd88 	bl	220f8 <AppHandleNumericComparison>
      break;
   1a5e8:	e002      	b.n	1a5f0 <amvoleProcMsg+0x204>

    default:
      break;
   1a5ea:	bf00      	nop
   1a5ec:	e000      	b.n	1a5f0 <amvoleProcMsg+0x204>
      break;
   1a5ee:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   1a5f0:	7bfb      	ldrb	r3, [r7, #15]
   1a5f2:	2b00      	cmp	r3, #0
   1a5f4:	d003      	beq.n	1a5fe <amvoleProcMsg+0x212>
  {
    AppUiAction(uiEvent);
   1a5f6:	7bfb      	ldrb	r3, [r7, #15]
   1a5f8:	4618      	mov	r0, r3
   1a5fa:	f7ff f92f 	bl	1985c <AppUiAction>
  }
}
   1a5fe:	bf00      	nop
   1a600:	3710      	adds	r7, #16
   1a602:	46bd      	mov	sp, r7
   1a604:	bd80      	pop	{r7, pc}
   1a606:	bf00      	nop
   1a608:	1001993a 	.word	0x1001993a
   1a60c:	0003b470 	.word	0x0003b470
   1a610:	0003b4b0 	.word	0x0003b4b0
   1a614:	0003b500 	.word	0x0003b500
   1a618:	10019938 	.word	0x10019938

0001a61c <amvoleStartSendVoiceData>:

void amvoleStartSendVoiceData()
{
   1a61c:	b580      	push	{r7, lr}
   1a61e:	af00      	add	r7, sp, #0
    g_start_voice_send = TRUE;
   1a620:	4b04      	ldr	r3, [pc, #16]	; (1a634 <amvoleStartSendVoiceData+0x18>)
   1a622:	2201      	movs	r2, #1
   1a624:	701a      	strb	r2, [r3, #0]
    am_app_led_on();
   1a626:	f7ff fe57 	bl	1a2d8 <am_app_led_on>
    voles_transmit_voice_data();
   1a62a:	f7fa fe2f 	bl	1528c <voles_transmit_voice_data>
}
   1a62e:	bf00      	nop
   1a630:	bd80      	pop	{r7, pc}
   1a632:	bf00      	nop
   1a634:	10019939 	.word	0x10019939

0001a638 <VoleHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void VoleHandlerInit(wsfHandlerId_t handlerId)
{
   1a638:	b580      	push	{r7, lr}
   1a63a:	b082      	sub	sp, #8
   1a63c:	af00      	add	r7, sp, #0
   1a63e:	4603      	mov	r3, r0
   1a640:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("VoleHandlerInit");
   1a642:	480d      	ldr	r0, [pc, #52]	; (1a678 <VoleHandlerInit+0x40>)
   1a644:	f006 f874 	bl	20730 <WsfTrace>

  /* store handler ID */
  amvoleHandlerId = handlerId;
   1a648:	4a0c      	ldr	r2, [pc, #48]	; (1a67c <VoleHandlerInit+0x44>)
   1a64a:	79fb      	ldrb	r3, [r7, #7]
   1a64c:	7013      	strb	r3, [r2, #0]

  /* Set configuration pointers */
  pAppAdvCfg = (appAdvCfg_t *) &amvoleAdvCfg;
   1a64e:	4b0c      	ldr	r3, [pc, #48]	; (1a680 <VoleHandlerInit+0x48>)
   1a650:	4a0c      	ldr	r2, [pc, #48]	; (1a684 <VoleHandlerInit+0x4c>)
   1a652:	601a      	str	r2, [r3, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &amvoleSlaveCfg;
   1a654:	4b0c      	ldr	r3, [pc, #48]	; (1a688 <VoleHandlerInit+0x50>)
   1a656:	4a0d      	ldr	r2, [pc, #52]	; (1a68c <VoleHandlerInit+0x54>)
   1a658:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &amvoleSecCfg;
   1a65a:	4b0d      	ldr	r3, [pc, #52]	; (1a690 <VoleHandlerInit+0x58>)
   1a65c:	4a0d      	ldr	r2, [pc, #52]	; (1a694 <VoleHandlerInit+0x5c>)
   1a65e:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &amvoleUpdateCfg;
   1a660:	4b0d      	ldr	r3, [pc, #52]	; (1a698 <VoleHandlerInit+0x60>)
   1a662:	4a0e      	ldr	r2, [pc, #56]	; (1a69c <VoleHandlerInit+0x64>)
   1a664:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   1a666:	f008 fc9d 	bl	22fa4 <AppSlaveInit>

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &amvoleSmpCfg;
   1a66a:	4b0d      	ldr	r3, [pc, #52]	; (1a6a0 <VoleHandlerInit+0x68>)
   1a66c:	4a0d      	ldr	r2, [pc, #52]	; (1a6a4 <VoleHandlerInit+0x6c>)
   1a66e:	601a      	str	r2, [r3, #0]
  //voles_init(handlerId);
}
   1a670:	bf00      	nop
   1a672:	3708      	adds	r7, #8
   1a674:	46bd      	mov	sp, r7
   1a676:	bd80      	pop	{r7, pc}
   1a678:	0003b524 	.word	0x0003b524
   1a67c:	100443eb 	.word	0x100443eb
   1a680:	10044e1c 	.word	0x10044e1c
   1a684:	0003c918 	.word	0x0003c918
   1a688:	10044df8 	.word	0x10044df8
   1a68c:	0003c924 	.word	0x0003c924
   1a690:	10044e10 	.word	0x10044e10
   1a694:	0003c928 	.word	0x0003c928
   1a698:	10044df4 	.word	0x10044df4
   1a69c:	0003c930 	.word	0x0003c930
   1a6a0:	10017f74 	.word	0x10017f74
   1a6a4:	0003c940 	.word	0x0003c940

0001a6a8 <VoleHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void VoleHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1a6a8:	b580      	push	{r7, lr}
   1a6aa:	b082      	sub	sp, #8
   1a6ac:	af00      	add	r7, sp, #0
   1a6ae:	4603      	mov	r3, r0
   1a6b0:	6039      	str	r1, [r7, #0]
   1a6b2:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1a6b4:	683b      	ldr	r3, [r7, #0]
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	d016      	beq.n	1a6e8 <VoleHandler+0x40>
  {
    APP_TRACE_INFO1("vole got evt 0x%x", pMsg->event);
   1a6ba:	683b      	ldr	r3, [r7, #0]
   1a6bc:	789b      	ldrb	r3, [r3, #2]
   1a6be:	4619      	mov	r1, r3
   1a6c0:	480b      	ldr	r0, [pc, #44]	; (1a6f0 <VoleHandler+0x48>)
   1a6c2:	f006 f835 	bl	20730 <WsfTrace>

    if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   1a6c6:	683b      	ldr	r3, [r7, #0]
   1a6c8:	789b      	ldrb	r3, [r3, #2]
   1a6ca:	2b1f      	cmp	r3, #31
   1a6cc:	d909      	bls.n	1a6e2 <VoleHandler+0x3a>
   1a6ce:	683b      	ldr	r3, [r7, #0]
   1a6d0:	789b      	ldrb	r3, [r3, #2]
   1a6d2:	2b55      	cmp	r3, #85	; 0x55
   1a6d4:	d805      	bhi.n	1a6e2 <VoleHandler+0x3a>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   1a6d6:	6838      	ldr	r0, [r7, #0]
   1a6d8:	f008 fca4 	bl	23024 <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1a6dc:	6838      	ldr	r0, [r7, #0]
   1a6de:	f008 fea5 	bl	2342c <AppSlaveSecProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    amvoleProcMsg((amvoleMsg_t *) pMsg);
   1a6e2:	6838      	ldr	r0, [r7, #0]
   1a6e4:	f7ff fe82 	bl	1a3ec <amvoleProcMsg>
  }
}
   1a6e8:	bf00      	nop
   1a6ea:	3708      	adds	r7, #8
   1a6ec:	46bd      	mov	sp, r7
   1a6ee:	bd80      	pop	{r7, pc}
   1a6f0:	0003b534 	.word	0x0003b534

0001a6f4 <VoleStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void VoleStart(void)
{
   1a6f4:	b5b0      	push	{r4, r5, r7, lr}
   1a6f6:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(amvoleDmCback);
   1a6f8:	481a      	ldr	r0, [pc, #104]	; (1a764 <VoleStart+0x70>)
   1a6fa:	f7f5 fe93 	bl	10424 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, amvoleDmCback);
   1a6fe:	4919      	ldr	r1, [pc, #100]	; (1a764 <VoleStart+0x70>)
   1a700:	2003      	movs	r0, #3
   1a702:	f7f5 fb83 	bl	fe0c <DmConnRegister>
  AttRegister(amvoleAttCback);
   1a706:	4818      	ldr	r0, [pc, #96]	; (1a768 <VoleStart+0x74>)
   1a708:	f7f2 fc4a 	bl	cfa0 <AttRegister>
  AttConnRegister(AppServerConnCback);
   1a70c:	4817      	ldr	r0, [pc, #92]	; (1a76c <VoleStart+0x78>)
   1a70e:	f7f2 fc61 	bl	cfd4 <AttConnRegister>
  AttsCccRegister(VOLES_NUM_CCC_IDX, (attsCccSet_t *) amvoleCccSet, amvoleCccCback);
   1a712:	4a17      	ldr	r2, [pc, #92]	; (1a770 <VoleStart+0x7c>)
   1a714:	4917      	ldr	r1, [pc, #92]	; (1a774 <VoleStart+0x80>)
   1a716:	2002      	movs	r0, #2
   1a718:	f7f3 fa8a 	bl	dc30 <AttsCccRegister>

  /* Register for app framework callbacks */
  AppUiBtnRegister(amvoleBtnCback);
   1a71c:	4816      	ldr	r0, [pc, #88]	; (1a778 <VoleStart+0x84>)
   1a71e:	f7ff f961 	bl	199e4 <AppUiBtnRegister>

  // set up adv data
  memcpy(amvoleAdvDataDisc, amvoleAdvDataDiscDefault, sizeof(amvoleAdvDataDiscDefault));
   1a722:	4a16      	ldr	r2, [pc, #88]	; (1a77c <VoleStart+0x88>)
   1a724:	4b16      	ldr	r3, [pc, #88]	; (1a780 <VoleStart+0x8c>)
   1a726:	4615      	mov	r5, r2
   1a728:	461c      	mov	r4, r3
   1a72a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a72c:	6028      	str	r0, [r5, #0]
   1a72e:	6069      	str	r1, [r5, #4]
   1a730:	60aa      	str	r2, [r5, #8]
   1a732:	60eb      	str	r3, [r5, #12]
   1a734:	cc03      	ldmia	r4!, {r0, r1}
   1a736:	6128      	str	r0, [r5, #16]
   1a738:	6169      	str	r1, [r5, #20]
  memcpy(amvoleScanDataDisc, amvoleScanDataDiscDefault, sizeof(amvoleScanDataDiscDefault));
   1a73a:	4b12      	ldr	r3, [pc, #72]	; (1a784 <VoleStart+0x90>)
   1a73c:	4a12      	ldr	r2, [pc, #72]	; (1a788 <VoleStart+0x94>)
   1a73e:	6810      	ldr	r0, [r2, #0]
   1a740:	6018      	str	r0, [r3, #0]
   1a742:	8892      	ldrh	r2, [r2, #4]
   1a744:	809a      	strh	r2, [r3, #4]

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   1a746:	f009 f82d 	bl	237a4 <SvcCoreAddGroup>
  SvcDisAddGroup();
   1a74a:	f009 f849 	bl	237e0 <SvcDisAddGroup>
  SvcVolesCbackRegister(NULL, amvole_write_cback);
   1a74e:	490f      	ldr	r1, [pc, #60]	; (1a78c <VoleStart+0x98>)
   1a750:	2000      	movs	r0, #0
   1a752:	f7fe fd73 	bl	1923c <SvcVolesCbackRegister>
  SvcVolesAddGroup();
   1a756:	f7fe fd67 	bl	19228 <SvcVolesAddGroup>

  /* Reset the device */
  DmDevReset();
   1a75a:	f7f5 fe03 	bl	10364 <DmDevReset>
   1a75e:	bf00      	nop
   1a760:	bdb0      	pop	{r4, r5, r7, pc}
   1a762:	bf00      	nop
   1a764:	0001a0c1 	.word	0x0001a0c1
   1a768:	0001a155 	.word	0x0001a155
   1a76c:	000222ab 	.word	0x000222ab
   1a770:	0001a1b1 	.word	0x0001a1b1
   1a774:	0003c968 	.word	0x0003c968
   1a778:	0001a329 	.word	0x0001a329
   1a77c:	100443ac 	.word	0x100443ac
   1a780:	0003c948 	.word	0x0003c948
   1a784:	100443cc 	.word	0x100443cc
   1a788:	0003c960 	.word	0x0003c960
   1a78c:	0001a3b1 	.word	0x0001a3b1

0001a790 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1a790:	b480      	push	{r7}
   1a792:	b089      	sub	sp, #36	; 0x24
   1a794:	af00      	add	r7, sp, #0
   1a796:	60b9      	str	r1, [r7, #8]
   1a798:	607b      	str	r3, [r7, #4]
   1a79a:	4603      	mov	r3, r0
   1a79c:	81fb      	strh	r3, [r7, #14]
   1a79e:	4613      	mov	r3, r2
   1a7a0:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1a7a2:	4a4d      	ldr	r2, [pc, #308]	; (1a8d8 <WsfBufInit+0x148>)
   1a7a4:	68bb      	ldr	r3, [r7, #8]
   1a7a6:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1a7a8:	4b4b      	ldr	r3, [pc, #300]	; (1a8d8 <WsfBufInit+0x148>)
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1a7ae:	7b7a      	ldrb	r2, [r7, #13]
   1a7b0:	4613      	mov	r3, r2
   1a7b2:	005b      	lsls	r3, r3, #1
   1a7b4:	4413      	add	r3, r2
   1a7b6:	009b      	lsls	r3, r3, #2
   1a7b8:	461a      	mov	r2, r3
   1a7ba:	69fb      	ldr	r3, [r7, #28]
   1a7bc:	4413      	add	r3, r2
   1a7be:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   1a7c0:	4a46      	ldr	r2, [pc, #280]	; (1a8dc <WsfBufInit+0x14c>)
   1a7c2:	7b7b      	ldrb	r3, [r7, #13]
   1a7c4:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a7c6:	4b44      	ldr	r3, [pc, #272]	; (1a8d8 <WsfBufInit+0x148>)
   1a7c8:	681a      	ldr	r2, [r3, #0]
   1a7ca:	89fb      	ldrh	r3, [r7, #14]
   1a7cc:	08db      	lsrs	r3, r3, #3
   1a7ce:	b29b      	uxth	r3, r3
   1a7d0:	00db      	lsls	r3, r3, #3
   1a7d2:	441a      	add	r2, r3
   1a7d4:	69bb      	ldr	r3, [r7, #24]
   1a7d6:	429a      	cmp	r2, r3
   1a7d8:	d201      	bcs.n	1a7de <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a7da:	2300      	movs	r3, #0
   1a7dc:	e075      	b.n	1a8ca <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1a7de:	7b7b      	ldrb	r3, [r7, #13]
   1a7e0:	1e5a      	subs	r2, r3, #1
   1a7e2:	737a      	strb	r2, [r7, #13]
   1a7e4:	2b00      	cmp	r3, #0
   1a7e6:	d066      	beq.n	1a8b6 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   1a7e8:	687b      	ldr	r3, [r7, #4]
   1a7ea:	881b      	ldrh	r3, [r3, #0]
   1a7ec:	2b07      	cmp	r3, #7
   1a7ee:	d803      	bhi.n	1a7f8 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1a7f0:	69fb      	ldr	r3, [r7, #28]
   1a7f2:	2208      	movs	r2, #8
   1a7f4:	801a      	strh	r2, [r3, #0]
   1a7f6:	e014      	b.n	1a822 <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   1a7f8:	687b      	ldr	r3, [r7, #4]
   1a7fa:	881b      	ldrh	r3, [r3, #0]
   1a7fc:	f003 0307 	and.w	r3, r3, #7
   1a800:	b29b      	uxth	r3, r3
   1a802:	2b00      	cmp	r3, #0
   1a804:	d009      	beq.n	1a81a <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   1a806:	687b      	ldr	r3, [r7, #4]
   1a808:	881b      	ldrh	r3, [r3, #0]
   1a80a:	f023 0307 	bic.w	r3, r3, #7
   1a80e:	b29b      	uxth	r3, r3
   1a810:	3308      	adds	r3, #8
   1a812:	b29a      	uxth	r2, r3
   1a814:	69fb      	ldr	r3, [r7, #28]
   1a816:	801a      	strh	r2, [r3, #0]
   1a818:	e003      	b.n	1a822 <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1a81a:	687b      	ldr	r3, [r7, #4]
   1a81c:	881a      	ldrh	r2, [r3, #0]
   1a81e:	69fb      	ldr	r3, [r7, #28]
   1a820:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1a822:	687b      	ldr	r3, [r7, #4]
   1a824:	789a      	ldrb	r2, [r3, #2]
   1a826:	69fb      	ldr	r3, [r7, #28]
   1a828:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1a82a:	687b      	ldr	r3, [r7, #4]
   1a82c:	3304      	adds	r3, #4
   1a82e:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   1a830:	69fb      	ldr	r3, [r7, #28]
   1a832:	69ba      	ldr	r2, [r7, #24]
   1a834:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   1a836:	69fb      	ldr	r3, [r7, #28]
   1a838:	69ba      	ldr	r2, [r7, #24]
   1a83a:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1a83c:	69fb      	ldr	r3, [r7, #28]
   1a83e:	881b      	ldrh	r3, [r3, #0]
   1a840:	08db      	lsrs	r3, r3, #3
   1a842:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   1a844:	69fb      	ldr	r3, [r7, #28]
   1a846:	789b      	ldrb	r3, [r3, #2]
   1a848:	75fb      	strb	r3, [r7, #23]
   1a84a:	e019      	b.n	1a880 <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a84c:	4b22      	ldr	r3, [pc, #136]	; (1a8d8 <WsfBufInit+0x148>)
   1a84e:	681a      	ldr	r2, [r3, #0]
   1a850:	89fb      	ldrh	r3, [r7, #14]
   1a852:	08db      	lsrs	r3, r3, #3
   1a854:	b29b      	uxth	r3, r3
   1a856:	00db      	lsls	r3, r3, #3
   1a858:	441a      	add	r2, r3
   1a85a:	69bb      	ldr	r3, [r7, #24]
   1a85c:	429a      	cmp	r2, r3
   1a85e:	d201      	bcs.n	1a864 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   1a860:	2300      	movs	r3, #0
   1a862:	e032      	b.n	1a8ca <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   1a864:	8abb      	ldrh	r3, [r7, #20]
   1a866:	00db      	lsls	r3, r3, #3
   1a868:	69ba      	ldr	r2, [r7, #24]
   1a86a:	441a      	add	r2, r3
   1a86c:	69bb      	ldr	r3, [r7, #24]
   1a86e:	601a      	str	r2, [r3, #0]
      pStart += len;
   1a870:	8abb      	ldrh	r3, [r7, #20]
   1a872:	00db      	lsls	r3, r3, #3
   1a874:	69ba      	ldr	r2, [r7, #24]
   1a876:	4413      	add	r3, r2
   1a878:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   1a87a:	7dfb      	ldrb	r3, [r7, #23]
   1a87c:	3b01      	subs	r3, #1
   1a87e:	75fb      	strb	r3, [r7, #23]
   1a880:	7dfb      	ldrb	r3, [r7, #23]
   1a882:	2b01      	cmp	r3, #1
   1a884:	d8e2      	bhi.n	1a84c <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a886:	4b14      	ldr	r3, [pc, #80]	; (1a8d8 <WsfBufInit+0x148>)
   1a888:	681a      	ldr	r2, [r3, #0]
   1a88a:	89fb      	ldrh	r3, [r7, #14]
   1a88c:	08db      	lsrs	r3, r3, #3
   1a88e:	b29b      	uxth	r3, r3
   1a890:	00db      	lsls	r3, r3, #3
   1a892:	441a      	add	r2, r3
   1a894:	69bb      	ldr	r3, [r7, #24]
   1a896:	429a      	cmp	r2, r3
   1a898:	d201      	bcs.n	1a89e <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a89a:	2300      	movs	r3, #0
   1a89c:	e015      	b.n	1a8ca <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1a89e:	69bb      	ldr	r3, [r7, #24]
   1a8a0:	2200      	movs	r2, #0
   1a8a2:	601a      	str	r2, [r3, #0]
    pStart += len;
   1a8a4:	8abb      	ldrh	r3, [r7, #20]
   1a8a6:	00db      	lsls	r3, r3, #3
   1a8a8:	69ba      	ldr	r2, [r7, #24]
   1a8aa:	4413      	add	r3, r2
   1a8ac:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   1a8ae:	69fb      	ldr	r3, [r7, #28]
   1a8b0:	330c      	adds	r3, #12
   1a8b2:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a8b4:	e787      	b.n	1a7c6 <WsfBufInit+0x36>
      break;
   1a8b6:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   1a8b8:	69bb      	ldr	r3, [r7, #24]
   1a8ba:	4a07      	ldr	r2, [pc, #28]	; (1a8d8 <WsfBufInit+0x148>)
   1a8bc:	6812      	ldr	r2, [r2, #0]
   1a8be:	1a9b      	subs	r3, r3, r2
   1a8c0:	b29a      	uxth	r2, r3
   1a8c2:	4b07      	ldr	r3, [pc, #28]	; (1a8e0 <WsfBufInit+0x150>)
   1a8c4:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   1a8c6:	4b06      	ldr	r3, [pc, #24]	; (1a8e0 <WsfBufInit+0x150>)
   1a8c8:	881b      	ldrh	r3, [r3, #0]
}
   1a8ca:	4618      	mov	r0, r3
   1a8cc:	3724      	adds	r7, #36	; 0x24
   1a8ce:	46bd      	mov	sp, r7
   1a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a8d4:	4770      	bx	lr
   1a8d6:	bf00      	nop
   1a8d8:	1001993c 	.word	0x1001993c
   1a8dc:	100443ee 	.word	0x100443ee
   1a8e0:	100443ec 	.word	0x100443ec

0001a8e4 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1a8e4:	b580      	push	{r7, lr}
   1a8e6:	b086      	sub	sp, #24
   1a8e8:	af00      	add	r7, sp, #0
   1a8ea:	4603      	mov	r3, r0
   1a8ec:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1a8ee:	4b1a      	ldr	r3, [pc, #104]	; (1a958 <WsfBufAlloc+0x74>)
   1a8f0:	681b      	ldr	r3, [r3, #0]
   1a8f2:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a8f4:	4b19      	ldr	r3, [pc, #100]	; (1a95c <WsfBufAlloc+0x78>)
   1a8f6:	781b      	ldrb	r3, [r3, #0]
   1a8f8:	74fb      	strb	r3, [r7, #19]
   1a8fa:	e020      	b.n	1a93e <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1a8fc:	697b      	ldr	r3, [r7, #20]
   1a8fe:	881b      	ldrh	r3, [r3, #0]
   1a900:	88fa      	ldrh	r2, [r7, #6]
   1a902:	429a      	cmp	r2, r3
   1a904:	d815      	bhi.n	1a932 <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a906:	f005 fd75 	bl	203f4 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1a90a:	697b      	ldr	r3, [r7, #20]
   1a90c:	689b      	ldr	r3, [r3, #8]
   1a90e:	2b00      	cmp	r3, #0
   1a910:	d00d      	beq.n	1a92e <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1a912:	697b      	ldr	r3, [r7, #20]
   1a914:	689b      	ldr	r3, [r3, #8]
   1a916:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   1a918:	68fb      	ldr	r3, [r7, #12]
   1a91a:	681a      	ldr	r2, [r3, #0]
   1a91c:	697b      	ldr	r3, [r7, #20]
   1a91e:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1a920:	68fb      	ldr	r3, [r7, #12]
   1a922:	2200      	movs	r2, #0
   1a924:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   1a926:	f005 fd79 	bl	2041c <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1a92a:	68fb      	ldr	r3, [r7, #12]
   1a92c:	e010      	b.n	1a950 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a92e:	f005 fd75 	bl	2041c <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a932:	7cfb      	ldrb	r3, [r7, #19]
   1a934:	3b01      	subs	r3, #1
   1a936:	74fb      	strb	r3, [r7, #19]
   1a938:	697b      	ldr	r3, [r7, #20]
   1a93a:	330c      	adds	r3, #12
   1a93c:	617b      	str	r3, [r7, #20]
   1a93e:	7cfb      	ldrb	r3, [r7, #19]
   1a940:	2b00      	cmp	r3, #0
   1a942:	d1db      	bne.n	1a8fc <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1a944:	88fb      	ldrh	r3, [r7, #6]
   1a946:	4619      	mov	r1, r3
   1a948:	4805      	ldr	r0, [pc, #20]	; (1a960 <WsfBufAlloc+0x7c>)
   1a94a:	f005 fef1 	bl	20730 <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1a94e:	2300      	movs	r3, #0
}
   1a950:	4618      	mov	r0, r3
   1a952:	3718      	adds	r7, #24
   1a954:	46bd      	mov	sp, r7
   1a956:	bd80      	pop	{r7, pc}
   1a958:	1001993c 	.word	0x1001993c
   1a95c:	100443ee 	.word	0x100443ee
   1a960:	0003b548 	.word	0x0003b548

0001a964 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1a964:	b580      	push	{r7, lr}
   1a966:	b084      	sub	sp, #16
   1a968:	af00      	add	r7, sp, #0
   1a96a:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   1a96c:	687b      	ldr	r3, [r7, #4]
   1a96e:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   1a970:	4b16      	ldr	r3, [pc, #88]	; (1a9cc <WsfBufFree+0x68>)
   1a972:	681a      	ldr	r2, [r3, #0]
   1a974:	4b16      	ldr	r3, [pc, #88]	; (1a9d0 <WsfBufFree+0x6c>)
   1a976:	781b      	ldrb	r3, [r3, #0]
   1a978:	4619      	mov	r1, r3
   1a97a:	460b      	mov	r3, r1
   1a97c:	005b      	lsls	r3, r3, #1
   1a97e:	440b      	add	r3, r1
   1a980:	009b      	lsls	r3, r3, #2
   1a982:	3b0c      	subs	r3, #12
   1a984:	4413      	add	r3, r2
   1a986:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a988:	e016      	b.n	1a9b8 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   1a98a:	68fb      	ldr	r3, [r7, #12]
   1a98c:	685a      	ldr	r2, [r3, #4]
   1a98e:	68bb      	ldr	r3, [r7, #8]
   1a990:	429a      	cmp	r2, r3
   1a992:	d80e      	bhi.n	1a9b2 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a994:	f005 fd2e 	bl	203f4 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   1a998:	68bb      	ldr	r3, [r7, #8]
   1a99a:	4a0e      	ldr	r2, [pc, #56]	; (1a9d4 <WsfBufFree+0x70>)
   1a99c:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   1a99e:	68fb      	ldr	r3, [r7, #12]
   1a9a0:	689a      	ldr	r2, [r3, #8]
   1a9a2:	68bb      	ldr	r3, [r7, #8]
   1a9a4:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   1a9a6:	68fb      	ldr	r3, [r7, #12]
   1a9a8:	68ba      	ldr	r2, [r7, #8]
   1a9aa:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a9ac:	f005 fd36 	bl	2041c <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   1a9b0:	e008      	b.n	1a9c4 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   1a9b2:	68fb      	ldr	r3, [r7, #12]
   1a9b4:	3b0c      	subs	r3, #12
   1a9b6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a9b8:	4b04      	ldr	r3, [pc, #16]	; (1a9cc <WsfBufFree+0x68>)
   1a9ba:	681b      	ldr	r3, [r3, #0]
   1a9bc:	68fa      	ldr	r2, [r7, #12]
   1a9be:	429a      	cmp	r2, r3
   1a9c0:	d2e3      	bcs.n	1a98a <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   1a9c2:	bf00      	nop
}
   1a9c4:	3710      	adds	r7, #16
   1a9c6:	46bd      	mov	sp, r7
   1a9c8:	bd80      	pop	{r7, pc}
   1a9ca:	bf00      	nop
   1a9cc:	1001993c 	.word	0x1001993c
   1a9d0:	100443ee 	.word	0x100443ee
   1a9d4:	faabd00d 	.word	0xfaabd00d

0001a9d8 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   1a9d8:	b580      	push	{r7, lr}
   1a9da:	b082      	sub	sp, #8
   1a9dc:	af00      	add	r7, sp, #0
   1a9de:	4603      	mov	r3, r0
   1a9e0:	460a      	mov	r2, r1
   1a9e2:	80fb      	strh	r3, [r7, #6]
   1a9e4:	4613      	mov	r3, r2
   1a9e6:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   1a9e8:	797b      	ldrb	r3, [r7, #5]
   1a9ea:	b29a      	uxth	r2, r3
   1a9ec:	88fb      	ldrh	r3, [r7, #6]
   1a9ee:	4413      	add	r3, r2
   1a9f0:	b29b      	uxth	r3, r3
   1a9f2:	4618      	mov	r0, r3
   1a9f4:	f000 f805 	bl	1aa02 <WsfMsgAlloc>
   1a9f8:	4603      	mov	r3, r0
}
   1a9fa:	4618      	mov	r0, r3
   1a9fc:	3708      	adds	r7, #8
   1a9fe:	46bd      	mov	sp, r7
   1aa00:	bd80      	pop	{r7, pc}

0001aa02 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   1aa02:	b580      	push	{r7, lr}
   1aa04:	b084      	sub	sp, #16
   1aa06:	af00      	add	r7, sp, #0
   1aa08:	4603      	mov	r3, r0
   1aa0a:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1aa0c:	88fb      	ldrh	r3, [r7, #6]
   1aa0e:	3308      	adds	r3, #8
   1aa10:	b29b      	uxth	r3, r3
   1aa12:	4618      	mov	r0, r3
   1aa14:	f7ff ff66 	bl	1a8e4 <WsfBufAlloc>
   1aa18:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   1aa1a:	68fb      	ldr	r3, [r7, #12]
   1aa1c:	2b00      	cmp	r3, #0
   1aa1e:	d002      	beq.n	1aa26 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   1aa20:	68fb      	ldr	r3, [r7, #12]
   1aa22:	3308      	adds	r3, #8
   1aa24:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1aa26:	68fb      	ldr	r3, [r7, #12]
}
   1aa28:	4618      	mov	r0, r3
   1aa2a:	3710      	adds	r7, #16
   1aa2c:	46bd      	mov	sp, r7
   1aa2e:	bd80      	pop	{r7, pc}

0001aa30 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   1aa30:	b580      	push	{r7, lr}
   1aa32:	b082      	sub	sp, #8
   1aa34:	af00      	add	r7, sp, #0
   1aa36:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   1aa38:	687b      	ldr	r3, [r7, #4]
   1aa3a:	3b08      	subs	r3, #8
   1aa3c:	4618      	mov	r0, r3
   1aa3e:	f7ff ff91 	bl	1a964 <WsfBufFree>
}
   1aa42:	bf00      	nop
   1aa44:	3708      	adds	r7, #8
   1aa46:	46bd      	mov	sp, r7
   1aa48:	bd80      	pop	{r7, pc}

0001aa4a <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1aa4a:	b580      	push	{r7, lr}
   1aa4c:	b082      	sub	sp, #8
   1aa4e:	af00      	add	r7, sp, #0
   1aa50:	4603      	mov	r3, r0
   1aa52:	6039      	str	r1, [r7, #0]
   1aa54:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   1aa56:	79fb      	ldrb	r3, [r7, #7]
   1aa58:	4618      	mov	r0, r3
   1aa5a:	f005 fd99 	bl	20590 <WsfTaskMsgQueue>
   1aa5e:	79fb      	ldrb	r3, [r7, #7]
   1aa60:	683a      	ldr	r2, [r7, #0]
   1aa62:	4619      	mov	r1, r3
   1aa64:	f000 f809 	bl	1aa7a <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1aa68:	79fb      	ldrb	r3, [r7, #7]
   1aa6a:	2101      	movs	r1, #1
   1aa6c:	4618      	mov	r0, r3
   1aa6e:	f005 fd71 	bl	20554 <WsfTaskSetReady>
}
   1aa72:	bf00      	nop
   1aa74:	3708      	adds	r7, #8
   1aa76:	46bd      	mov	sp, r7
   1aa78:	bd80      	pop	{r7, pc}

0001aa7a <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   1aa7a:	b580      	push	{r7, lr}
   1aa7c:	b086      	sub	sp, #24
   1aa7e:	af00      	add	r7, sp, #0
   1aa80:	60f8      	str	r0, [r7, #12]
   1aa82:	460b      	mov	r3, r1
   1aa84:	607a      	str	r2, [r7, #4]
   1aa86:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   1aa88:	687b      	ldr	r3, [r7, #4]
   1aa8a:	3b08      	subs	r3, #8
   1aa8c:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   1aa8e:	697b      	ldr	r3, [r7, #20]
   1aa90:	7afa      	ldrb	r2, [r7, #11]
   1aa92:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   1aa94:	6979      	ldr	r1, [r7, #20]
   1aa96:	68f8      	ldr	r0, [r7, #12]
   1aa98:	f000 f81c 	bl	1aad4 <WsfQueueEnq>
}
   1aa9c:	bf00      	nop
   1aa9e:	3718      	adds	r7, #24
   1aaa0:	46bd      	mov	sp, r7
   1aaa2:	bd80      	pop	{r7, pc}

0001aaa4 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1aaa4:	b580      	push	{r7, lr}
   1aaa6:	b084      	sub	sp, #16
   1aaa8:	af00      	add	r7, sp, #0
   1aaaa:	6078      	str	r0, [r7, #4]
   1aaac:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1aaae:	6878      	ldr	r0, [r7, #4]
   1aab0:	f000 f832 	bl	1ab18 <WsfQueueDeq>
   1aab4:	60f8      	str	r0, [r7, #12]
   1aab6:	68fb      	ldr	r3, [r7, #12]
   1aab8:	2b00      	cmp	r3, #0
   1aaba:	d006      	beq.n	1aaca <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   1aabc:	68fb      	ldr	r3, [r7, #12]
   1aabe:	791a      	ldrb	r2, [r3, #4]
   1aac0:	683b      	ldr	r3, [r7, #0]
   1aac2:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   1aac4:	68fb      	ldr	r3, [r7, #12]
   1aac6:	3308      	adds	r3, #8
   1aac8:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1aaca:	68fb      	ldr	r3, [r7, #12]
}
   1aacc:	4618      	mov	r0, r3
   1aace:	3710      	adds	r7, #16
   1aad0:	46bd      	mov	sp, r7
   1aad2:	bd80      	pop	{r7, pc}

0001aad4 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   1aad4:	b580      	push	{r7, lr}
   1aad6:	b082      	sub	sp, #8
   1aad8:	af00      	add	r7, sp, #0
   1aada:	6078      	str	r0, [r7, #4]
   1aadc:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1aade:	683b      	ldr	r3, [r7, #0]
   1aae0:	2200      	movs	r2, #0
   1aae2:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1aae4:	f005 fc86 	bl	203f4 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   1aae8:	687b      	ldr	r3, [r7, #4]
   1aaea:	681b      	ldr	r3, [r3, #0]
   1aaec:	2b00      	cmp	r3, #0
   1aaee:	d106      	bne.n	1aafe <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   1aaf0:	687b      	ldr	r3, [r7, #4]
   1aaf2:	683a      	ldr	r2, [r7, #0]
   1aaf4:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1aaf6:	687b      	ldr	r3, [r7, #4]
   1aaf8:	683a      	ldr	r2, [r7, #0]
   1aafa:	605a      	str	r2, [r3, #4]
   1aafc:	e006      	b.n	1ab0c <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1aafe:	687b      	ldr	r3, [r7, #4]
   1ab00:	685b      	ldr	r3, [r3, #4]
   1ab02:	683a      	ldr	r2, [r7, #0]
   1ab04:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1ab06:	687b      	ldr	r3, [r7, #4]
   1ab08:	683a      	ldr	r2, [r7, #0]
   1ab0a:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab0c:	f005 fc86 	bl	2041c <WsfCsExit>
}
   1ab10:	bf00      	nop
   1ab12:	3708      	adds	r7, #8
   1ab14:	46bd      	mov	sp, r7
   1ab16:	bd80      	pop	{r7, pc}

0001ab18 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1ab18:	b580      	push	{r7, lr}
   1ab1a:	b084      	sub	sp, #16
   1ab1c:	af00      	add	r7, sp, #0
   1ab1e:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab20:	f005 fc68 	bl	203f4 <WsfCsEnter>

  pElem = pQueue->pHead;
   1ab24:	687b      	ldr	r3, [r7, #4]
   1ab26:	681b      	ldr	r3, [r3, #0]
   1ab28:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1ab2a:	68fb      	ldr	r3, [r7, #12]
   1ab2c:	2b00      	cmp	r3, #0
   1ab2e:	d00a      	beq.n	1ab46 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1ab30:	68fb      	ldr	r3, [r7, #12]
   1ab32:	681a      	ldr	r2, [r3, #0]
   1ab34:	687b      	ldr	r3, [r7, #4]
   1ab36:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1ab38:	687b      	ldr	r3, [r7, #4]
   1ab3a:	681b      	ldr	r3, [r3, #0]
   1ab3c:	2b00      	cmp	r3, #0
   1ab3e:	d102      	bne.n	1ab46 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   1ab40:	687b      	ldr	r3, [r7, #4]
   1ab42:	2200      	movs	r2, #0
   1ab44:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab46:	f005 fc69 	bl	2041c <WsfCsExit>

  return pElem;
   1ab4a:	68fb      	ldr	r3, [r7, #12]
}
   1ab4c:	4618      	mov	r0, r3
   1ab4e:	3710      	adds	r7, #16
   1ab50:	46bd      	mov	sp, r7
   1ab52:	bd80      	pop	{r7, pc}

0001ab54 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   1ab54:	b580      	push	{r7, lr}
   1ab56:	b082      	sub	sp, #8
   1ab58:	af00      	add	r7, sp, #0
   1ab5a:	6078      	str	r0, [r7, #4]
   1ab5c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab5e:	f005 fc49 	bl	203f4 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1ab62:	687b      	ldr	r3, [r7, #4]
   1ab64:	681a      	ldr	r2, [r3, #0]
   1ab66:	683b      	ldr	r3, [r7, #0]
   1ab68:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   1ab6a:	687b      	ldr	r3, [r7, #4]
   1ab6c:	681b      	ldr	r3, [r3, #0]
   1ab6e:	2b00      	cmp	r3, #0
   1ab70:	d102      	bne.n	1ab78 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   1ab72:	687b      	ldr	r3, [r7, #4]
   1ab74:	683a      	ldr	r2, [r7, #0]
   1ab76:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   1ab78:	687b      	ldr	r3, [r7, #4]
   1ab7a:	683a      	ldr	r2, [r7, #0]
   1ab7c:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ab7e:	f005 fc4d 	bl	2041c <WsfCsExit>
}
   1ab82:	bf00      	nop
   1ab84:	3708      	adds	r7, #8
   1ab86:	46bd      	mov	sp, r7
   1ab88:	bd80      	pop	{r7, pc}

0001ab8a <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1ab8a:	b580      	push	{r7, lr}
   1ab8c:	b084      	sub	sp, #16
   1ab8e:	af00      	add	r7, sp, #0
   1ab90:	60f8      	str	r0, [r7, #12]
   1ab92:	60b9      	str	r1, [r7, #8]
   1ab94:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ab96:	f005 fc2d 	bl	203f4 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1ab9a:	68fb      	ldr	r3, [r7, #12]
   1ab9c:	681b      	ldr	r3, [r3, #0]
   1ab9e:	2b00      	cmp	r3, #0
   1aba0:	d004      	beq.n	1abac <WsfQueueInsert+0x22>
   1aba2:	68fb      	ldr	r3, [r7, #12]
   1aba4:	685a      	ldr	r2, [r3, #4]
   1aba6:	687b      	ldr	r3, [r7, #4]
   1aba8:	429a      	cmp	r2, r3
   1abaa:	d104      	bne.n	1abb6 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   1abac:	68b9      	ldr	r1, [r7, #8]
   1abae:	68f8      	ldr	r0, [r7, #12]
   1abb0:	f7ff ff90 	bl	1aad4 <WsfQueueEnq>
   1abb4:	e00e      	b.n	1abd4 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   1abb6:	687b      	ldr	r3, [r7, #4]
   1abb8:	2b00      	cmp	r3, #0
   1abba:	d104      	bne.n	1abc6 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   1abbc:	68b9      	ldr	r1, [r7, #8]
   1abbe:	68f8      	ldr	r0, [r7, #12]
   1abc0:	f7ff ffc8 	bl	1ab54 <WsfQueuePush>
   1abc4:	e006      	b.n	1abd4 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   1abc6:	687b      	ldr	r3, [r7, #4]
   1abc8:	681a      	ldr	r2, [r3, #0]
   1abca:	68bb      	ldr	r3, [r7, #8]
   1abcc:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1abce:	687b      	ldr	r3, [r7, #4]
   1abd0:	68ba      	ldr	r2, [r7, #8]
   1abd2:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1abd4:	f005 fc22 	bl	2041c <WsfCsExit>
}
   1abd8:	bf00      	nop
   1abda:	3710      	adds	r7, #16
   1abdc:	46bd      	mov	sp, r7
   1abde:	bd80      	pop	{r7, pc}

0001abe0 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1abe0:	b580      	push	{r7, lr}
   1abe2:	b084      	sub	sp, #16
   1abe4:	af00      	add	r7, sp, #0
   1abe6:	60f8      	str	r0, [r7, #12]
   1abe8:	60b9      	str	r1, [r7, #8]
   1abea:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1abec:	f005 fc02 	bl	203f4 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   1abf0:	68fb      	ldr	r3, [r7, #12]
   1abf2:	681a      	ldr	r2, [r3, #0]
   1abf4:	68bb      	ldr	r3, [r7, #8]
   1abf6:	429a      	cmp	r2, r3
   1abf8:	d104      	bne.n	1ac04 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1abfa:	68bb      	ldr	r3, [r7, #8]
   1abfc:	681a      	ldr	r2, [r3, #0]
   1abfe:	68fb      	ldr	r3, [r7, #12]
   1ac00:	601a      	str	r2, [r3, #0]
   1ac02:	e006      	b.n	1ac12 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   1ac04:	687b      	ldr	r3, [r7, #4]
   1ac06:	2b00      	cmp	r3, #0
   1ac08:	d003      	beq.n	1ac12 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1ac0a:	68bb      	ldr	r3, [r7, #8]
   1ac0c:	681a      	ldr	r2, [r3, #0]
   1ac0e:	687b      	ldr	r3, [r7, #4]
   1ac10:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1ac12:	68fb      	ldr	r3, [r7, #12]
   1ac14:	685a      	ldr	r2, [r3, #4]
   1ac16:	68bb      	ldr	r3, [r7, #8]
   1ac18:	429a      	cmp	r2, r3
   1ac1a:	d102      	bne.n	1ac22 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1ac1c:	68fb      	ldr	r3, [r7, #12]
   1ac1e:	687a      	ldr	r2, [r7, #4]
   1ac20:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ac22:	f005 fbfb 	bl	2041c <WsfCsExit>
}
   1ac26:	bf00      	nop
   1ac28:	3710      	adds	r7, #16
   1ac2a:	46bd      	mov	sp, r7
   1ac2c:	bd80      	pop	{r7, pc}

0001ac2e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1ac2e:	b580      	push	{r7, lr}
   1ac30:	b084      	sub	sp, #16
   1ac32:	af00      	add	r7, sp, #0
   1ac34:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   1ac36:	2300      	movs	r3, #0
   1ac38:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ac3a:	f005 fbdb 	bl	203f4 <WsfCsEnter>

  pElem = pQueue->pHead;
   1ac3e:	687b      	ldr	r3, [r7, #4]
   1ac40:	681b      	ldr	r3, [r3, #0]
   1ac42:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   1ac44:	e005      	b.n	1ac52 <WsfQueueCount+0x24>
  {
    count++;
   1ac46:	897b      	ldrh	r3, [r7, #10]
   1ac48:	3301      	adds	r3, #1
   1ac4a:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   1ac4c:	68fb      	ldr	r3, [r7, #12]
   1ac4e:	681b      	ldr	r3, [r3, #0]
   1ac50:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ac52:	68fb      	ldr	r3, [r7, #12]
   1ac54:	2b00      	cmp	r3, #0
   1ac56:	d1f6      	bne.n	1ac46 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ac58:	f005 fbe0 	bl	2041c <WsfCsExit>

  return count;
   1ac5c:	897b      	ldrh	r3, [r7, #10]
}
   1ac5e:	4618      	mov	r0, r3
   1ac60:	3710      	adds	r7, #16
   1ac62:	46bd      	mov	sp, r7
   1ac64:	bd80      	pop	{r7, pc}

0001ac66 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1ac66:	b580      	push	{r7, lr}
   1ac68:	b084      	sub	sp, #16
   1ac6a:	af00      	add	r7, sp, #0
   1ac6c:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1ac6e:	f005 fbc1 	bl	203f4 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   1ac72:	687b      	ldr	r3, [r7, #4]
   1ac74:	681b      	ldr	r3, [r3, #0]
   1ac76:	2b00      	cmp	r3, #0
   1ac78:	bf0c      	ite	eq
   1ac7a:	2301      	moveq	r3, #1
   1ac7c:	2300      	movne	r3, #0
   1ac7e:	b2db      	uxtb	r3, r3
   1ac80:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1ac82:	f005 fbcb 	bl	2041c <WsfCsExit>

  return empty;
   1ac86:	7bfb      	ldrb	r3, [r7, #15]
}
   1ac88:	4618      	mov	r0, r3
   1ac8a:	3710      	adds	r7, #16
   1ac8c:	46bd      	mov	sp, r7
   1ac8e:	bd80      	pop	{r7, pc}

0001ac90 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   1ac90:	b580      	push	{r7, lr}
   1ac92:	b084      	sub	sp, #16
   1ac94:	af00      	add	r7, sp, #0
   1ac96:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1ac98:	2300      	movs	r3, #0
   1ac9a:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ac9c:	4b10      	ldr	r3, [pc, #64]	; (1ace0 <wsfTimerRemove+0x50>)
   1ac9e:	681b      	ldr	r3, [r3, #0]
   1aca0:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   1aca2:	e008      	b.n	1acb6 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   1aca4:	68fa      	ldr	r2, [r7, #12]
   1aca6:	687b      	ldr	r3, [r7, #4]
   1aca8:	429a      	cmp	r2, r3
   1acaa:	d008      	beq.n	1acbe <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   1acac:	68fb      	ldr	r3, [r7, #12]
   1acae:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1acb0:	68fb      	ldr	r3, [r7, #12]
   1acb2:	681b      	ldr	r3, [r3, #0]
   1acb4:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1acb6:	68fb      	ldr	r3, [r7, #12]
   1acb8:	2b00      	cmp	r3, #0
   1acba:	d1f3      	bne.n	1aca4 <wsfTimerRemove+0x14>
   1acbc:	e000      	b.n	1acc0 <wsfTimerRemove+0x30>
      break;
   1acbe:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   1acc0:	68fb      	ldr	r3, [r7, #12]
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d007      	beq.n	1acd6 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1acc6:	68ba      	ldr	r2, [r7, #8]
   1acc8:	6879      	ldr	r1, [r7, #4]
   1acca:	4805      	ldr	r0, [pc, #20]	; (1ace0 <wsfTimerRemove+0x50>)
   1accc:	f7ff ff88 	bl	1abe0 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   1acd0:	687b      	ldr	r3, [r7, #4]
   1acd2:	2200      	movs	r2, #0
   1acd4:	725a      	strb	r2, [r3, #9]
  }
}
   1acd6:	bf00      	nop
   1acd8:	3710      	adds	r7, #16
   1acda:	46bd      	mov	sp, r7
   1acdc:	bd80      	pop	{r7, pc}
   1acde:	bf00      	nop
   1ace0:	100443f0 	.word	0x100443f0

0001ace4 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   1ace4:	b580      	push	{r7, lr}
   1ace6:	b084      	sub	sp, #16
   1ace8:	af00      	add	r7, sp, #0
   1acea:	6078      	str	r0, [r7, #4]
   1acec:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1acee:	2300      	movs	r3, #0
   1acf0:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   1acf2:	f005 fba7 	bl	20444 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   1acf6:	687b      	ldr	r3, [r7, #4]
   1acf8:	7a5b      	ldrb	r3, [r3, #9]
   1acfa:	2b00      	cmp	r3, #0
   1acfc:	d002      	beq.n	1ad04 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   1acfe:	6878      	ldr	r0, [r7, #4]
   1ad00:	f7ff ffc6 	bl	1ac90 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   1ad04:	687b      	ldr	r3, [r7, #4]
   1ad06:	2201      	movs	r2, #1
   1ad08:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   1ad0a:	687b      	ldr	r3, [r7, #4]
   1ad0c:	683a      	ldr	r2, [r7, #0]
   1ad0e:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1ad10:	4b0f      	ldr	r3, [pc, #60]	; (1ad50 <wsfTimerInsert+0x6c>)
   1ad12:	681b      	ldr	r3, [r3, #0]
   1ad14:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   1ad16:	e00a      	b.n	1ad2e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   1ad18:	687b      	ldr	r3, [r7, #4]
   1ad1a:	685a      	ldr	r2, [r3, #4]
   1ad1c:	68fb      	ldr	r3, [r7, #12]
   1ad1e:	685b      	ldr	r3, [r3, #4]
   1ad20:	429a      	cmp	r2, r3
   1ad22:	d308      	bcc.n	1ad36 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   1ad24:	68fb      	ldr	r3, [r7, #12]
   1ad26:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1ad28:	68fb      	ldr	r3, [r7, #12]
   1ad2a:	681b      	ldr	r3, [r3, #0]
   1ad2c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ad2e:	68fb      	ldr	r3, [r7, #12]
   1ad30:	2b00      	cmp	r3, #0
   1ad32:	d1f1      	bne.n	1ad18 <wsfTimerInsert+0x34>
   1ad34:	e000      	b.n	1ad38 <wsfTimerInsert+0x54>
      break;
   1ad36:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1ad38:	68ba      	ldr	r2, [r7, #8]
   1ad3a:	6879      	ldr	r1, [r7, #4]
   1ad3c:	4804      	ldr	r0, [pc, #16]	; (1ad50 <wsfTimerInsert+0x6c>)
   1ad3e:	f7ff ff24 	bl	1ab8a <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   1ad42:	f005 fb85 	bl	20450 <WsfTaskUnlock>
}
   1ad46:	bf00      	nop
   1ad48:	3710      	adds	r7, #16
   1ad4a:	46bd      	mov	sp, r7
   1ad4c:	bd80      	pop	{r7, pc}
   1ad4e:	bf00      	nop
   1ad50:	100443f0 	.word	0x100443f0

0001ad54 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   1ad54:	b480      	push	{r7}
   1ad56:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1ad58:	4b05      	ldr	r3, [pc, #20]	; (1ad70 <WsfTimerInit+0x1c>)
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	601a      	str	r2, [r3, #0]
   1ad5e:	4b04      	ldr	r3, [pc, #16]	; (1ad70 <WsfTimerInit+0x1c>)
   1ad60:	2200      	movs	r2, #0
   1ad62:	605a      	str	r2, [r3, #4]
}
   1ad64:	bf00      	nop
   1ad66:	46bd      	mov	sp, r7
   1ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad6c:	4770      	bx	lr
   1ad6e:	bf00      	nop
   1ad70:	100443f0 	.word	0x100443f0

0001ad74 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   1ad74:	b580      	push	{r7, lr}
   1ad76:	b082      	sub	sp, #8
   1ad78:	af00      	add	r7, sp, #0
   1ad7a:	6078      	str	r0, [r7, #4]
   1ad7c:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   1ad7e:	683b      	ldr	r3, [r7, #0]
   1ad80:	2264      	movs	r2, #100	; 0x64
   1ad82:	fb02 f303 	mul.w	r3, r2, r3
   1ad86:	4619      	mov	r1, r3
   1ad88:	6878      	ldr	r0, [r7, #4]
   1ad8a:	f7ff ffab 	bl	1ace4 <wsfTimerInsert>
}
   1ad8e:	bf00      	nop
   1ad90:	3708      	adds	r7, #8
   1ad92:	46bd      	mov	sp, r7
   1ad94:	bd80      	pop	{r7, pc}
	...

0001ad98 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   1ad98:	b580      	push	{r7, lr}
   1ad9a:	b082      	sub	sp, #8
   1ad9c:	af00      	add	r7, sp, #0
   1ad9e:	6078      	str	r0, [r7, #4]
   1ada0:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1ada2:	683b      	ldr	r3, [r7, #0]
   1ada4:	4a05      	ldr	r2, [pc, #20]	; (1adbc <WsfTimerStartMs+0x24>)
   1ada6:	fba2 2303 	umull	r2, r3, r2, r3
   1adaa:	08db      	lsrs	r3, r3, #3
   1adac:	4619      	mov	r1, r3
   1adae:	6878      	ldr	r0, [r7, #4]
   1adb0:	f7ff ff98 	bl	1ace4 <wsfTimerInsert>
}
   1adb4:	bf00      	nop
   1adb6:	3708      	adds	r7, #8
   1adb8:	46bd      	mov	sp, r7
   1adba:	bd80      	pop	{r7, pc}
   1adbc:	cccccccd 	.word	0xcccccccd

0001adc0 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   1adc0:	b580      	push	{r7, lr}
   1adc2:	b082      	sub	sp, #8
   1adc4:	af00      	add	r7, sp, #0
   1adc6:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   1adc8:	f005 fb3c 	bl	20444 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   1adcc:	6878      	ldr	r0, [r7, #4]
   1adce:	f7ff ff5f 	bl	1ac90 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   1add2:	f005 fb3d 	bl	20450 <WsfTaskUnlock>
}
   1add6:	bf00      	nop
   1add8:	3708      	adds	r7, #8
   1adda:	46bd      	mov	sp, r7
   1addc:	bd80      	pop	{r7, pc}
	...

0001ade0 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   1ade0:	b580      	push	{r7, lr}
   1ade2:	b084      	sub	sp, #16
   1ade4:	af00      	add	r7, sp, #0
   1ade6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   1ade8:	f005 fb2c 	bl	20444 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1adec:	4b12      	ldr	r3, [pc, #72]	; (1ae38 <WsfTimerUpdate+0x58>)
   1adee:	681b      	ldr	r3, [r3, #0]
   1adf0:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   1adf2:	e017      	b.n	1ae24 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   1adf4:	68fb      	ldr	r3, [r7, #12]
   1adf6:	685a      	ldr	r2, [r3, #4]
   1adf8:	687b      	ldr	r3, [r7, #4]
   1adfa:	429a      	cmp	r2, r3
   1adfc:	d906      	bls.n	1ae0c <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   1adfe:	68fb      	ldr	r3, [r7, #12]
   1ae00:	685a      	ldr	r2, [r3, #4]
   1ae02:	687b      	ldr	r3, [r7, #4]
   1ae04:	1ad2      	subs	r2, r2, r3
   1ae06:	68fb      	ldr	r3, [r7, #12]
   1ae08:	605a      	str	r2, [r3, #4]
   1ae0a:	e008      	b.n	1ae1e <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   1ae0c:	68fb      	ldr	r3, [r7, #12]
   1ae0e:	2200      	movs	r2, #0
   1ae10:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1ae12:	68fb      	ldr	r3, [r7, #12]
   1ae14:	7a1b      	ldrb	r3, [r3, #8]
   1ae16:	2102      	movs	r1, #2
   1ae18:	4618      	mov	r0, r3
   1ae1a:	f005 fb9b 	bl	20554 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   1ae1e:	68fb      	ldr	r3, [r7, #12]
   1ae20:	681b      	ldr	r3, [r3, #0]
   1ae22:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1ae24:	68fb      	ldr	r3, [r7, #12]
   1ae26:	2b00      	cmp	r3, #0
   1ae28:	d1e4      	bne.n	1adf4 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1ae2a:	f005 fb11 	bl	20450 <WsfTaskUnlock>
}
   1ae2e:	bf00      	nop
   1ae30:	3710      	adds	r7, #16
   1ae32:	46bd      	mov	sp, r7
   1ae34:	bd80      	pop	{r7, pc}
   1ae36:	bf00      	nop
   1ae38:	100443f0 	.word	0x100443f0

0001ae3c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   1ae3c:	b580      	push	{r7, lr}
   1ae3e:	b084      	sub	sp, #16
   1ae40:	af00      	add	r7, sp, #0
   1ae42:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   1ae44:	f005 fafe 	bl	20444 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   1ae48:	4b0b      	ldr	r3, [pc, #44]	; (1ae78 <WsfTimerNextExpiration+0x3c>)
   1ae4a:	681b      	ldr	r3, [r3, #0]
   1ae4c:	2b00      	cmp	r3, #0
   1ae4e:	d105      	bne.n	1ae5c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   1ae50:	687b      	ldr	r3, [r7, #4]
   1ae52:	2200      	movs	r2, #0
   1ae54:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   1ae56:	2300      	movs	r3, #0
   1ae58:	60fb      	str	r3, [r7, #12]
   1ae5a:	e006      	b.n	1ae6a <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   1ae5c:	687b      	ldr	r3, [r7, #4]
   1ae5e:	2201      	movs	r2, #1
   1ae60:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   1ae62:	4b05      	ldr	r3, [pc, #20]	; (1ae78 <WsfTimerNextExpiration+0x3c>)
   1ae64:	681b      	ldr	r3, [r3, #0]
   1ae66:	685b      	ldr	r3, [r3, #4]
   1ae68:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1ae6a:	f005 faf1 	bl	20450 <WsfTaskUnlock>

  return ticks;
   1ae6e:	68fb      	ldr	r3, [r7, #12]
}
   1ae70:	4618      	mov	r0, r3
   1ae72:	3710      	adds	r7, #16
   1ae74:	46bd      	mov	sp, r7
   1ae76:	bd80      	pop	{r7, pc}
   1ae78:	100443f0 	.word	0x100443f0

0001ae7c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   1ae7c:	b580      	push	{r7, lr}
   1ae7e:	b084      	sub	sp, #16
   1ae80:	af00      	add	r7, sp, #0
   1ae82:	4603      	mov	r3, r0
   1ae84:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1ae86:	2300      	movs	r3, #0
   1ae88:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   1ae8a:	f005 fadb 	bl	20444 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1ae8e:	4b0e      	ldr	r3, [pc, #56]	; (1aec8 <WsfTimerServiceExpired+0x4c>)
   1ae90:	681b      	ldr	r3, [r3, #0]
   1ae92:	60bb      	str	r3, [r7, #8]
   1ae94:	68bb      	ldr	r3, [r7, #8]
   1ae96:	2b00      	cmp	r3, #0
   1ae98:	d00f      	beq.n	1aeba <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   1ae9a:	68bb      	ldr	r3, [r7, #8]
   1ae9c:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1ae9e:	2b00      	cmp	r3, #0
   1aea0:	d10b      	bne.n	1aeba <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   1aea2:	68fa      	ldr	r2, [r7, #12]
   1aea4:	68b9      	ldr	r1, [r7, #8]
   1aea6:	4808      	ldr	r0, [pc, #32]	; (1aec8 <WsfTimerServiceExpired+0x4c>)
   1aea8:	f7ff fe9a 	bl	1abe0 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   1aeac:	68bb      	ldr	r3, [r7, #8]
   1aeae:	2200      	movs	r2, #0
   1aeb0:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   1aeb2:	f005 facd 	bl	20450 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   1aeb6:	68bb      	ldr	r3, [r7, #8]
   1aeb8:	e002      	b.n	1aec0 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1aeba:	f005 fac9 	bl	20450 <WsfTaskUnlock>

  return NULL;
   1aebe:	2300      	movs	r3, #0
}
   1aec0:	4618      	mov	r0, r3
   1aec2:	3710      	adds	r7, #16
   1aec4:	46bd      	mov	sp, r7
   1aec6:	bd80      	pop	{r7, pc}
   1aec8:	100443f0 	.word	0x100443f0

0001aecc <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   1aecc:	b480      	push	{r7}
   1aece:	b083      	sub	sp, #12
   1aed0:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   1aed2:	4b0e      	ldr	r3, [pc, #56]	; (1af0c <getNextToken+0x40>)
   1aed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1aed8:	1c5a      	adds	r2, r3, #1
   1aeda:	b2d1      	uxtb	r1, r2
   1aedc:	4a0b      	ldr	r2, [pc, #44]	; (1af0c <getNextToken+0x40>)
   1aede:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1aee2:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   1aee4:	79fb      	ldrb	r3, [r7, #7]
   1aee6:	2bff      	cmp	r3, #255	; 0xff
   1aee8:	d108      	bne.n	1aefc <getNextToken+0x30>
  {
    token = secCb.token++;
   1aeea:	4b08      	ldr	r3, [pc, #32]	; (1af0c <getNextToken+0x40>)
   1aeec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1aef0:	1c5a      	adds	r2, r3, #1
   1aef2:	b2d1      	uxtb	r1, r2
   1aef4:	4a05      	ldr	r2, [pc, #20]	; (1af0c <getNextToken+0x40>)
   1aef6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1aefa:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   1aefc:	79fb      	ldrb	r3, [r7, #7]
}
   1aefe:	4618      	mov	r0, r3
   1af00:	370c      	adds	r7, #12
   1af02:	46bd      	mov	sp, r7
   1af04:	f85d 7b04 	ldr.w	r7, [sp], #4
   1af08:	4770      	bx	lr
   1af0a:	bf00      	nop
   1af0c:	100443f8 	.word	0x100443f8

0001af10 <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1af10:	b580      	push	{r7, lr}
   1af12:	b086      	sub	sp, #24
   1af14:	af00      	add	r7, sp, #0
   1af16:	60f8      	str	r0, [r7, #12]
   1af18:	60b9      	str	r1, [r7, #8]
   1af1a:	4611      	mov	r1, r2
   1af1c:	461a      	mov	r2, r3
   1af1e:	460b      	mov	r3, r1
   1af20:	71fb      	strb	r3, [r7, #7]
   1af22:	4613      	mov	r3, r2
   1af24:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   1af26:	2030      	movs	r0, #48	; 0x30
   1af28:	f7ff fd6b 	bl	1aa02 <WsfMsgAlloc>
   1af2c:	6178      	str	r0, [r7, #20]
   1af2e:	697b      	ldr	r3, [r7, #20]
   1af30:	2b00      	cmp	r3, #0
   1af32:	d01d      	beq.n	1af70 <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   1af34:	f7ff ffca 	bl	1aecc <getNextToken>
   1af38:	4603      	mov	r3, r0
   1af3a:	461a      	mov	r2, r3
   1af3c:	697b      	ldr	r3, [r7, #20]
   1af3e:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   1af40:	697b      	ldr	r3, [r7, #20]
   1af42:	88ba      	ldrh	r2, [r7, #4]
   1af44:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1af46:	697b      	ldr	r3, [r7, #20]
   1af48:	f897 2020 	ldrb.w	r2, [r7, #32]
   1af4c:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   1af4e:	697b      	ldr	r3, [r7, #20]
   1af50:	2200      	movs	r2, #0
   1af52:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1af56:	79fb      	ldrb	r3, [r7, #7]
   1af58:	697a      	ldr	r2, [r7, #20]
   1af5a:	4619      	mov	r1, r3
   1af5c:	4807      	ldr	r0, [pc, #28]	; (1af7c <SecAes+0x6c>)
   1af5e:	f7ff fd8c 	bl	1aa7a <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   1af62:	68b9      	ldr	r1, [r7, #8]
   1af64:	68f8      	ldr	r0, [r7, #12]
   1af66:	f7fa fe59 	bl	15c1c <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   1af6a:	697b      	ldr	r3, [r7, #20]
   1af6c:	78db      	ldrb	r3, [r3, #3]
   1af6e:	e000      	b.n	1af72 <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   1af70:	23ff      	movs	r3, #255	; 0xff
}
   1af72:	4618      	mov	r0, r3
   1af74:	3718      	adds	r7, #24
   1af76:	46bd      	mov	sp, r7
   1af78:	bd80      	pop	{r7, pc}
   1af7a:	bf00      	nop
   1af7c:	10044418 	.word	0x10044418

0001af80 <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1af80:	b580      	push	{r7, lr}
   1af82:	b086      	sub	sp, #24
   1af84:	af00      	add	r7, sp, #0
   1af86:	60f8      	str	r0, [r7, #12]
   1af88:	60b9      	str	r1, [r7, #8]
   1af8a:	4613      	mov	r3, r2
   1af8c:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   1af8e:	68fb      	ldr	r3, [r7, #12]
   1af90:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   1af92:	68fb      	ldr	r3, [r7, #12]
   1af94:	f103 0208 	add.w	r2, r3, #8
   1af98:	697b      	ldr	r3, [r7, #20]
   1af9a:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   1af9c:	697b      	ldr	r3, [r7, #20]
   1af9e:	685a      	ldr	r2, [r3, #4]
   1afa0:	68bb      	ldr	r3, [r7, #8]
   1afa2:	3305      	adds	r3, #5
   1afa4:	4619      	mov	r1, r3
   1afa6:	4610      	mov	r0, r2
   1afa8:	f004 fed4 	bl	1fd54 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   1afac:	79fb      	ldrb	r3, [r7, #7]
   1afae:	6979      	ldr	r1, [r7, #20]
   1afb0:	4618      	mov	r0, r3
   1afb2:	f7ff fd4a 	bl	1aa4a <WsfMsgSend>
}
   1afb6:	bf00      	nop
   1afb8:	3718      	adds	r7, #24
   1afba:	46bd      	mov	sp, r7
   1afbc:	bd80      	pop	{r7, pc}
	...

0001afc0 <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   1afc0:	b480      	push	{r7}
   1afc2:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   1afc4:	4b03      	ldr	r3, [pc, #12]	; (1afd4 <SecAesInit+0x14>)
   1afc6:	4a04      	ldr	r2, [pc, #16]	; (1afd8 <SecAesInit+0x18>)
   1afc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
   1afca:	bf00      	nop
   1afcc:	46bd      	mov	sp, r7
   1afce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1afd2:	4770      	bx	lr
   1afd4:	100443f8 	.word	0x100443f8
   1afd8:	0001af81 	.word	0x0001af81

0001afdc <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   1afdc:	b580      	push	{r7, lr}
   1afde:	b08a      	sub	sp, #40	; 0x28
   1afe0:	af00      	add	r7, sp, #0
   1afe2:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1afe4:	687b      	ldr	r3, [r7, #4]
   1afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1afe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   1afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1afec:	681b      	ldr	r3, [r3, #0]
   1afee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1aff0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   1aff2:	4413      	add	r3, r2
   1aff4:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   1aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1affa:	b2da      	uxtb	r2, r3
   1affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1affe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b000:	b2db      	uxtb	r3, r3
   1b002:	1ad3      	subs	r3, r2, r3
   1b004:	b2db      	uxtb	r3, r3
   1b006:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   1b008:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b00c:	2b10      	cmp	r3, #16
   1b00e:	dc2d      	bgt.n	1b06c <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   1b010:	f107 030c 	add.w	r3, r7, #12
   1b014:	2210      	movs	r2, #16
   1b016:	6a39      	ldr	r1, [r7, #32]
   1b018:	4618      	mov	r0, r3
   1b01a:	f004 fed6 	bl	1fdca <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   1b01e:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b022:	2b10      	cmp	r3, #16
   1b024:	d014      	beq.n	1b050 <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   1b026:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b02a:	f1c3 0310 	rsb	r3, r3, #16
   1b02e:	461a      	mov	r2, r3
   1b030:	f107 030c 	add.w	r3, r7, #12
   1b034:	2100      	movs	r1, #0
   1b036:	4618      	mov	r0, r3
   1b038:	f7f1 f990 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   1b03c:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1b040:	f1c3 030f 	rsb	r3, r3, #15
   1b044:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b048:	4413      	add	r3, r2
   1b04a:	2280      	movs	r2, #128	; 0x80
   1b04c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   1b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b052:	f103 0214 	add.w	r2, r3, #20
   1b056:	f107 030c 	add.w	r3, r7, #12
   1b05a:	4611      	mov	r1, r2
   1b05c:	4618      	mov	r0, r3
   1b05e:	f004 fe95 	bl	1fd8c <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   1b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b064:	2202      	movs	r2, #2
   1b066:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   1b06a:	e006      	b.n	1b07a <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   1b06c:	f107 030c 	add.w	r3, r7, #12
   1b070:	2210      	movs	r2, #16
   1b072:	6a39      	ldr	r1, [r7, #32]
   1b074:	4618      	mov	r0, r3
   1b076:	f004 fea8 	bl	1fdca <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   1b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b07c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b07e:	2b00      	cmp	r3, #0
   1b080:	d008      	beq.n	1b094 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   1b082:	687b      	ldr	r3, [r7, #4]
   1b084:	f103 0208 	add.w	r2, r3, #8
   1b088:	f107 030c 	add.w	r3, r7, #12
   1b08c:	4611      	mov	r1, r2
   1b08e:	4618      	mov	r0, r3
   1b090:	f004 fe7c 	bl	1fd8c <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   1b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1b098:	3310      	adds	r3, #16
   1b09a:	b29a      	uxth	r2, r3
   1b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b09e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b0a6:	687a      	ldr	r2, [r7, #4]
   1b0a8:	4619      	mov	r1, r3
   1b0aa:	4807      	ldr	r0, [pc, #28]	; (1b0c8 <secCmacProcessBlock+0xec>)
   1b0ac:	f7ff fce5 	bl	1aa7a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0b2:	3304      	adds	r3, #4
   1b0b4:	f107 020c 	add.w	r2, r7, #12
   1b0b8:	4611      	mov	r1, r2
   1b0ba:	4618      	mov	r0, r3
   1b0bc:	f7fa fdae 	bl	15c1c <HciLeEncryptCmd>
}
   1b0c0:	bf00      	nop
   1b0c2:	3728      	adds	r7, #40	; 0x28
   1b0c4:	46bd      	mov	sp, r7
   1b0c6:	bd80      	pop	{r7, pc}
   1b0c8:	10044418 	.word	0x10044418

0001b0cc <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   1b0cc:	b580      	push	{r7, lr}
   1b0ce:	b088      	sub	sp, #32
   1b0d0:	af00      	add	r7, sp, #0
   1b0d2:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b0d4:	687b      	ldr	r3, [r7, #4]
   1b0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b0d8:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   1b0da:	f107 030c 	add.w	r3, r7, #12
   1b0de:	2210      	movs	r2, #16
   1b0e0:	2100      	movs	r1, #0
   1b0e2:	4618      	mov	r0, r3
   1b0e4:	f7f1 f93a 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1b0e8:	69fb      	ldr	r3, [r7, #28]
   1b0ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b0ee:	687a      	ldr	r2, [r7, #4]
   1b0f0:	4619      	mov	r1, r3
   1b0f2:	4807      	ldr	r0, [pc, #28]	; (1b110 <secCmacGenSubkey1+0x44>)
   1b0f4:	f7ff fcc1 	bl	1aa7a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1b0f8:	69fb      	ldr	r3, [r7, #28]
   1b0fa:	3304      	adds	r3, #4
   1b0fc:	f107 020c 	add.w	r2, r7, #12
   1b100:	4611      	mov	r1, r2
   1b102:	4618      	mov	r0, r3
   1b104:	f7fa fd8a 	bl	15c1c <HciLeEncryptCmd>
}
   1b108:	bf00      	nop
   1b10a:	3720      	adds	r7, #32
   1b10c:	46bd      	mov	sp, r7
   1b10e:	bd80      	pop	{r7, pc}
   1b110:	10044418 	.word	0x10044418

0001b114 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   1b114:	b480      	push	{r7}
   1b116:	b085      	sub	sp, #20
   1b118:	af00      	add	r7, sp, #0
   1b11a:	6078      	str	r0, [r7, #4]
   1b11c:	460b      	mov	r3, r1
   1b11e:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   1b120:	2300      	movs	r3, #0
   1b122:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   1b124:	2300      	movs	r3, #0
   1b126:	73fb      	strb	r3, [r7, #15]
   1b128:	e021      	b.n	1b16e <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   1b12a:	7bfb      	ldrb	r3, [r7, #15]
   1b12c:	687a      	ldr	r2, [r7, #4]
   1b12e:	4413      	add	r3, r2
   1b130:	781b      	ldrb	r3, [r3, #0]
   1b132:	461a      	mov	r2, r3
   1b134:	78fb      	ldrb	r3, [r7, #3]
   1b136:	f1c3 0308 	rsb	r3, r3, #8
   1b13a:	fa42 f303 	asr.w	r3, r2, r3
   1b13e:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   1b140:	7bfb      	ldrb	r3, [r7, #15]
   1b142:	687a      	ldr	r2, [r7, #4]
   1b144:	4413      	add	r3, r2
   1b146:	7bfa      	ldrb	r2, [r7, #15]
   1b148:	6879      	ldr	r1, [r7, #4]
   1b14a:	440a      	add	r2, r1
   1b14c:	7812      	ldrb	r2, [r2, #0]
   1b14e:	4611      	mov	r1, r2
   1b150:	78fa      	ldrb	r2, [r7, #3]
   1b152:	fa01 f202 	lsl.w	r2, r1, r2
   1b156:	b251      	sxtb	r1, r2
   1b158:	f997 200e 	ldrsb.w	r2, [r7, #14]
   1b15c:	430a      	orrs	r2, r1
   1b15e:	b252      	sxtb	r2, r2
   1b160:	b2d2      	uxtb	r2, r2
   1b162:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   1b164:	7b7b      	ldrb	r3, [r7, #13]
   1b166:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   1b168:	7bfb      	ldrb	r3, [r7, #15]
   1b16a:	3301      	adds	r3, #1
   1b16c:	73fb      	strb	r3, [r7, #15]
   1b16e:	7bfb      	ldrb	r3, [r7, #15]
   1b170:	2b0f      	cmp	r3, #15
   1b172:	d9da      	bls.n	1b12a <secCmacKeyShift+0x16>
  }

  return prevBits;
   1b174:	7bbb      	ldrb	r3, [r7, #14]
}
   1b176:	4618      	mov	r0, r3
   1b178:	3714      	adds	r7, #20
   1b17a:	46bd      	mov	sp, r7
   1b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b180:	4770      	bx	lr

0001b182 <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   1b182:	b580      	push	{r7, lr}
   1b184:	b084      	sub	sp, #16
   1b186:	af00      	add	r7, sp, #0
   1b188:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b18a:	687b      	ldr	r3, [r7, #4]
   1b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b18e:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   1b190:	68fb      	ldr	r3, [r7, #12]
   1b192:	f103 0214 	add.w	r2, r3, #20
   1b196:	687b      	ldr	r3, [r7, #4]
   1b198:	3308      	adds	r3, #8
   1b19a:	4619      	mov	r1, r3
   1b19c:	4610      	mov	r0, r2
   1b19e:	f004 fdd9 	bl	1fd54 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   1b1a2:	68fb      	ldr	r3, [r7, #12]
   1b1a4:	3314      	adds	r3, #20
   1b1a6:	2101      	movs	r1, #1
   1b1a8:	4618      	mov	r0, r3
   1b1aa:	f7ff ffb3 	bl	1b114 <secCmacKeyShift>
   1b1ae:	4603      	mov	r3, r0
   1b1b0:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   1b1b2:	7afb      	ldrb	r3, [r7, #11]
   1b1b4:	2b00      	cmp	r3, #0
   1b1b6:	d007      	beq.n	1b1c8 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   1b1b8:	68fb      	ldr	r3, [r7, #12]
   1b1ba:	7d1b      	ldrb	r3, [r3, #20]
   1b1bc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1b1c0:	43db      	mvns	r3, r3
   1b1c2:	b2da      	uxtb	r2, r3
   1b1c4:	68fb      	ldr	r3, [r7, #12]
   1b1c6:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   1b1c8:	68fb      	ldr	r3, [r7, #12]
   1b1ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1b1cc:	f003 030f 	and.w	r3, r3, #15
   1b1d0:	b29b      	uxth	r3, r3
   1b1d2:	2b00      	cmp	r3, #0
   1b1d4:	d012      	beq.n	1b1fc <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   1b1d6:	68fb      	ldr	r3, [r7, #12]
   1b1d8:	3314      	adds	r3, #20
   1b1da:	2101      	movs	r1, #1
   1b1dc:	4618      	mov	r0, r3
   1b1de:	f7ff ff99 	bl	1b114 <secCmacKeyShift>
   1b1e2:	4603      	mov	r3, r0
   1b1e4:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   1b1e6:	7afb      	ldrb	r3, [r7, #11]
   1b1e8:	2b00      	cmp	r3, #0
   1b1ea:	d007      	beq.n	1b1fc <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   1b1ec:	68fb      	ldr	r3, [r7, #12]
   1b1ee:	7d1b      	ldrb	r3, [r3, #20]
   1b1f0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   1b1f4:	43db      	mvns	r3, r3
   1b1f6:	b2da      	uxtb	r2, r3
   1b1f8:	68fb      	ldr	r3, [r7, #12]
   1b1fa:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   1b1fc:	68fb      	ldr	r3, [r7, #12]
   1b1fe:	2201      	movs	r2, #1
   1b200:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   1b204:	6878      	ldr	r0, [r7, #4]
   1b206:	f7ff fee9 	bl	1afdc <secCmacProcessBlock>
}
   1b20a:	bf00      	nop
   1b20c:	3710      	adds	r7, #16
   1b20e:	46bd      	mov	sp, r7
   1b210:	bd80      	pop	{r7, pc}

0001b212 <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   1b212:	b580      	push	{r7, lr}
   1b214:	b084      	sub	sp, #16
   1b216:	af00      	add	r7, sp, #0
   1b218:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   1b21a:	687b      	ldr	r3, [r7, #4]
   1b21c:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1b21e:	687b      	ldr	r3, [r7, #4]
   1b220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b222:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   1b224:	687b      	ldr	r3, [r7, #4]
   1b226:	3308      	adds	r3, #8
   1b228:	2110      	movs	r1, #16
   1b22a:	4618      	mov	r0, r3
   1b22c:	f004 fdf6 	bl	1fe1c <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   1b230:	687b      	ldr	r3, [r7, #4]
   1b232:	f103 0208 	add.w	r2, r3, #8
   1b236:	68fb      	ldr	r3, [r7, #12]
   1b238:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   1b23a:	68bb      	ldr	r3, [r7, #8]
   1b23c:	681b      	ldr	r3, [r3, #0]
   1b23e:	4618      	mov	r0, r3
   1b240:	f7ff fb90 	bl	1a964 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   1b244:	68bb      	ldr	r3, [r7, #8]
   1b246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b24a:	68f9      	ldr	r1, [r7, #12]
   1b24c:	4618      	mov	r0, r3
   1b24e:	f7ff fbfc 	bl	1aa4a <WsfMsgSend>
}
   1b252:	bf00      	nop
   1b254:	3710      	adds	r7, #16
   1b256:	46bd      	mov	sp, r7
   1b258:	bd80      	pop	{r7, pc}

0001b25a <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1b25a:	b580      	push	{r7, lr}
   1b25c:	b086      	sub	sp, #24
   1b25e:	af00      	add	r7, sp, #0
   1b260:	60f8      	str	r0, [r7, #12]
   1b262:	60b9      	str	r1, [r7, #8]
   1b264:	4613      	mov	r3, r2
   1b266:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   1b268:	68fb      	ldr	r3, [r7, #12]
   1b26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b26c:	617b      	str	r3, [r7, #20]

  if (pCmac)
   1b26e:	697b      	ldr	r3, [r7, #20]
   1b270:	2b00      	cmp	r3, #0
   1b272:	d01e      	beq.n	1b2b2 <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   1b274:	68fb      	ldr	r3, [r7, #12]
   1b276:	f103 0208 	add.w	r2, r3, #8
   1b27a:	68bb      	ldr	r3, [r7, #8]
   1b27c:	3305      	adds	r3, #5
   1b27e:	4619      	mov	r1, r3
   1b280:	4610      	mov	r0, r2
   1b282:	f004 fd67 	bl	1fd54 <Calc128Cpy>

    switch (pCmac->state)
   1b286:	697b      	ldr	r3, [r7, #20]
   1b288:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1b28c:	2b01      	cmp	r3, #1
   1b28e:	d008      	beq.n	1b2a2 <SecCmacHciCback+0x48>
   1b290:	2b02      	cmp	r3, #2
   1b292:	d00a      	beq.n	1b2aa <SecCmacHciCback+0x50>
   1b294:	2b00      	cmp	r3, #0
   1b296:	d000      	beq.n	1b29a <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   1b298:	e00b      	b.n	1b2b2 <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   1b29a:	68f8      	ldr	r0, [r7, #12]
   1b29c:	f7ff ff71 	bl	1b182 <secCmacGenSubkey2>
      break;
   1b2a0:	e007      	b.n	1b2b2 <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   1b2a2:	68f8      	ldr	r0, [r7, #12]
   1b2a4:	f7ff fe9a 	bl	1afdc <secCmacProcessBlock>
      break;
   1b2a8:	e003      	b.n	1b2b2 <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   1b2aa:	68f8      	ldr	r0, [r7, #12]
   1b2ac:	f7ff ffb1 	bl	1b212 <secCmacComplete>
      break;
   1b2b0:	bf00      	nop
}
   1b2b2:	bf00      	nop
   1b2b4:	3718      	adds	r7, #24
   1b2b6:	46bd      	mov	sp, r7
   1b2b8:	bd80      	pop	{r7, pc}
	...

0001b2bc <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   1b2bc:	b580      	push	{r7, lr}
   1b2be:	b088      	sub	sp, #32
   1b2c0:	af00      	add	r7, sp, #0
   1b2c2:	60f8      	str	r0, [r7, #12]
   1b2c4:	60b9      	str	r1, [r7, #8]
   1b2c6:	4611      	mov	r1, r2
   1b2c8:	461a      	mov	r2, r3
   1b2ca:	460b      	mov	r3, r1
   1b2cc:	71fb      	strb	r3, [r7, #7]
   1b2ce:	4613      	mov	r3, r2
   1b2d0:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   1b2d2:	235c      	movs	r3, #92	; 0x5c
   1b2d4:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b2d6:	8bfb      	ldrh	r3, [r7, #30]
   1b2d8:	4618      	mov	r0, r3
   1b2da:	f7ff fb92 	bl	1aa02 <WsfMsgAlloc>
   1b2de:	61b8      	str	r0, [r7, #24]
   1b2e0:	69bb      	ldr	r3, [r7, #24]
   1b2e2:	2b00      	cmp	r3, #0
   1b2e4:	d038      	beq.n	1b358 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   1b2e6:	69bb      	ldr	r3, [r7, #24]
   1b2e8:	3330      	adds	r3, #48	; 0x30
   1b2ea:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   1b2ec:	69bb      	ldr	r3, [r7, #24]
   1b2ee:	697a      	ldr	r2, [r7, #20]
   1b2f0:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   1b2f2:	69bb      	ldr	r3, [r7, #24]
   1b2f4:	2201      	movs	r2, #1
   1b2f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   1b2fa:	4b1a      	ldr	r3, [pc, #104]	; (1b364 <SecCmac+0xa8>)
   1b2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1b300:	1c5a      	adds	r2, r3, #1
   1b302:	b2d1      	uxtb	r1, r2
   1b304:	4a17      	ldr	r2, [pc, #92]	; (1b364 <SecCmac+0xa8>)
   1b306:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   1b30a:	69ba      	ldr	r2, [r7, #24]
   1b30c:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   1b30e:	69bb      	ldr	r3, [r7, #24]
   1b310:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   1b312:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b314:	69bb      	ldr	r3, [r7, #24]
   1b316:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1b31a:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   1b31c:	697b      	ldr	r3, [r7, #20]
   1b31e:	68ba      	ldr	r2, [r7, #8]
   1b320:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   1b322:	79fb      	ldrb	r3, [r7, #7]
   1b324:	b29a      	uxth	r2, r3
   1b326:	697b      	ldr	r3, [r7, #20]
   1b328:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   1b32a:	697b      	ldr	r3, [r7, #20]
   1b32c:	2200      	movs	r2, #0
   1b32e:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   1b330:	697b      	ldr	r3, [r7, #20]
   1b332:	79ba      	ldrb	r2, [r7, #6]
   1b334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   1b338:	697b      	ldr	r3, [r7, #20]
   1b33a:	2200      	movs	r2, #0
   1b33c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   1b340:	697b      	ldr	r3, [r7, #20]
   1b342:	3304      	adds	r3, #4
   1b344:	2210      	movs	r2, #16
   1b346:	68f9      	ldr	r1, [r7, #12]
   1b348:	4618      	mov	r0, r3
   1b34a:	f004 fd3e 	bl	1fdca <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   1b34e:	69b8      	ldr	r0, [r7, #24]
   1b350:	f7ff febc 	bl	1b0cc <secCmacGenSubkey1>

    return TRUE;
   1b354:	2301      	movs	r3, #1
   1b356:	e000      	b.n	1b35a <SecCmac+0x9e>
  }

  return FALSE;
   1b358:	2300      	movs	r3, #0
}
   1b35a:	4618      	mov	r0, r3
   1b35c:	3720      	adds	r7, #32
   1b35e:	46bd      	mov	sp, r7
   1b360:	bd80      	pop	{r7, pc}
   1b362:	bf00      	nop
   1b364:	100443f8 	.word	0x100443f8

0001b368 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   1b368:	b480      	push	{r7}
   1b36a:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   1b36c:	4b03      	ldr	r3, [pc, #12]	; (1b37c <SecCmacInit+0x14>)
   1b36e:	4a04      	ldr	r2, [pc, #16]	; (1b380 <SecCmacInit+0x18>)
   1b370:	631a      	str	r2, [r3, #48]	; 0x30
}
   1b372:	bf00      	nop
   1b374:	46bd      	mov	sp, r7
   1b376:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b37a:	4770      	bx	lr
   1b37c:	100443f8 	.word	0x100443f8
   1b380:	0001b25b 	.word	0x0001b25b

0001b384 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1b384:	b580      	push	{r7, lr}
   1b386:	b086      	sub	sp, #24
   1b388:	af00      	add	r7, sp, #0
   1b38a:	60f8      	str	r0, [r7, #12]
   1b38c:	60b9      	str	r1, [r7, #8]
   1b38e:	4613      	mov	r3, r2
   1b390:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   1b392:	68fb      	ldr	r3, [r7, #12]
   1b394:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   1b396:	68bb      	ldr	r3, [r7, #8]
   1b398:	789b      	ldrb	r3, [r3, #2]
   1b39a:	2b25      	cmp	r3, #37	; 0x25
   1b39c:	d11b      	bne.n	1b3d6 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   1b39e:	697b      	ldr	r3, [r7, #20]
   1b3a0:	1d18      	adds	r0, r3, #4
   1b3a2:	68bb      	ldr	r3, [r7, #8]
   1b3a4:	3305      	adds	r3, #5
   1b3a6:	2220      	movs	r2, #32
   1b3a8:	4619      	mov	r1, r3
   1b3aa:	f004 fd0e 	bl	1fdca <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   1b3ae:	697b      	ldr	r3, [r7, #20]
   1b3b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
   1b3b4:	68bb      	ldr	r3, [r7, #8]
   1b3b6:	3305      	adds	r3, #5
   1b3b8:	3320      	adds	r3, #32
   1b3ba:	2220      	movs	r2, #32
   1b3bc:	4619      	mov	r1, r3
   1b3be:	f004 fd04 	bl	1fdca <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   1b3c2:	68bb      	ldr	r3, [r7, #8]
   1b3c4:	791a      	ldrb	r2, [r3, #4]
   1b3c6:	697b      	ldr	r3, [r7, #20]
   1b3c8:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1b3ca:	79fb      	ldrb	r3, [r7, #7]
   1b3cc:	6979      	ldr	r1, [r7, #20]
   1b3ce:	4618      	mov	r0, r3
   1b3d0:	f7ff fb3b 	bl	1aa4a <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   1b3d4:	e01f      	b.n	1b416 <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1b3d6:	68bb      	ldr	r3, [r7, #8]
   1b3d8:	789b      	ldrb	r3, [r3, #2]
   1b3da:	2b26      	cmp	r3, #38	; 0x26
   1b3dc:	d11b      	bne.n	1b416 <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   1b3de:	697b      	ldr	r3, [r7, #20]
   1b3e0:	1d18      	adds	r0, r3, #4
   1b3e2:	68bb      	ldr	r3, [r7, #8]
   1b3e4:	3305      	adds	r3, #5
   1b3e6:	2220      	movs	r2, #32
   1b3e8:	4619      	mov	r1, r3
   1b3ea:	f004 fcee 	bl	1fdca <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   1b3ee:	68bb      	ldr	r3, [r7, #8]
   1b3f0:	791b      	ldrb	r3, [r3, #4]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d006      	beq.n	1b404 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1b3f6:	697b      	ldr	r3, [r7, #20]
   1b3f8:	3304      	adds	r3, #4
   1b3fa:	2220      	movs	r2, #32
   1b3fc:	21ff      	movs	r1, #255	; 0xff
   1b3fe:	4618      	mov	r0, r3
   1b400:	f7f0 ffac 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   1b404:	68bb      	ldr	r3, [r7, #8]
   1b406:	791a      	ldrb	r2, [r3, #4]
   1b408:	697b      	ldr	r3, [r7, #20]
   1b40a:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   1b40c:	79fb      	ldrb	r3, [r7, #7]
   1b40e:	6979      	ldr	r1, [r7, #20]
   1b410:	4618      	mov	r0, r3
   1b412:	f7ff fb1a 	bl	1aa4a <WsfMsgSend>
}
   1b416:	bf00      	nop
   1b418:	3718      	adds	r7, #24
   1b41a:	46bd      	mov	sp, r7
   1b41c:	bd80      	pop	{r7, pc}
	...

0001b420 <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1b420:	b580      	push	{r7, lr}
   1b422:	b084      	sub	sp, #16
   1b424:	af00      	add	r7, sp, #0
   1b426:	4603      	mov	r3, r0
   1b428:	71fb      	strb	r3, [r7, #7]
   1b42a:	460b      	mov	r3, r1
   1b42c:	80bb      	strh	r3, [r7, #4]
   1b42e:	4613      	mov	r3, r2
   1b430:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1b432:	2394      	movs	r3, #148	; 0x94
   1b434:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b436:	89fb      	ldrh	r3, [r7, #14]
   1b438:	4618      	mov	r0, r3
   1b43a:	f7ff fae2 	bl	1aa02 <WsfMsgAlloc>
   1b43e:	60b8      	str	r0, [r7, #8]
   1b440:	68bb      	ldr	r3, [r7, #8]
   1b442:	2b00      	cmp	r3, #0
   1b444:	d013      	beq.n	1b46e <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   1b446:	68bb      	ldr	r3, [r7, #8]
   1b448:	88ba      	ldrh	r2, [r7, #4]
   1b44a:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b44c:	68bb      	ldr	r3, [r7, #8]
   1b44e:	79ba      	ldrb	r2, [r7, #6]
   1b450:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1b452:	68bb      	ldr	r3, [r7, #8]
   1b454:	2202      	movs	r2, #2
   1b456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1b45a:	79fb      	ldrb	r3, [r7, #7]
   1b45c:	68ba      	ldr	r2, [r7, #8]
   1b45e:	4619      	mov	r1, r3
   1b460:	4805      	ldr	r0, [pc, #20]	; (1b478 <SecEccGenKey+0x58>)
   1b462:	f7ff fb0a 	bl	1aa7a <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   1b466:	f7fa fb8f 	bl	15b88 <HciLeReadLocalP256PubKey>

    return TRUE;
   1b46a:	2301      	movs	r3, #1
   1b46c:	e000      	b.n	1b470 <SecEccGenKey+0x50>
  }

  return FALSE;
   1b46e:	2300      	movs	r3, #0
}
   1b470:	4618      	mov	r0, r3
   1b472:	3710      	adds	r7, #16
   1b474:	46bd      	mov	sp, r7
   1b476:	bd80      	pop	{r7, pc}
   1b478:	10044418 	.word	0x10044418

0001b47c <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1b47c:	b580      	push	{r7, lr}
   1b47e:	b09e      	sub	sp, #120	; 0x78
   1b480:	af00      	add	r7, sp, #0
   1b482:	6078      	str	r0, [r7, #4]
   1b484:	4608      	mov	r0, r1
   1b486:	4611      	mov	r1, r2
   1b488:	461a      	mov	r2, r3
   1b48a:	4603      	mov	r3, r0
   1b48c:	70fb      	strb	r3, [r7, #3]
   1b48e:	460b      	mov	r3, r1
   1b490:	803b      	strh	r3, [r7, #0]
   1b492:	4613      	mov	r3, r2
   1b494:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1b496:	2394      	movs	r3, #148	; 0x94
   1b498:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   1b49c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   1b4a0:	4618      	mov	r0, r3
   1b4a2:	f7ff faae 	bl	1aa02 <WsfMsgAlloc>
   1b4a6:	6738      	str	r0, [r7, #112]	; 0x70
   1b4a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b4aa:	2b00      	cmp	r3, #0
   1b4ac:	d060      	beq.n	1b570 <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   1b4ae:	6879      	ldr	r1, [r7, #4]
   1b4b0:	f107 030c 	add.w	r3, r7, #12
   1b4b4:	2220      	movs	r2, #32
   1b4b6:	4618      	mov	r0, r3
   1b4b8:	f004 fc87 	bl	1fdca <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   1b4bc:	687b      	ldr	r3, [r7, #4]
   1b4be:	f103 0120 	add.w	r1, r3, #32
   1b4c2:	f107 030c 	add.w	r3, r7, #12
   1b4c6:	3320      	adds	r3, #32
   1b4c8:	2220      	movs	r2, #32
   1b4ca:	4618      	mov	r0, r3
   1b4cc:	f004 fc7d 	bl	1fdca <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   1b4d0:	4b2a      	ldr	r3, [pc, #168]	; (1b57c <SecEccGenSharedSecret+0x100>)
   1b4d2:	68db      	ldr	r3, [r3, #12]
   1b4d4:	b2db      	uxtb	r3, r3
   1b4d6:	2b21      	cmp	r3, #33	; 0x21
   1b4d8:	d02e      	beq.n	1b538 <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   1b4da:	f00b fa59 	bl	26990 <uECC_secp256r1>
   1b4de:	4602      	mov	r2, r0
   1b4e0:	f107 030c 	add.w	r3, r7, #12
   1b4e4:	4611      	mov	r1, r2
   1b4e6:	4618      	mov	r0, r3
   1b4e8:	f00b facc 	bl	26a84 <uECC_valid_public_key>
   1b4ec:	4603      	mov	r3, r0
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	d122      	bne.n	1b538 <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   1b4f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
   1b4f4:	f7ff fa9c 	bl	1aa30 <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   1b4f8:	2064      	movs	r0, #100	; 0x64
   1b4fa:	f7ff fa82 	bl	1aa02 <WsfMsgAlloc>
   1b4fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   1b500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b502:	2b00      	cmp	r3, #0
   1b504:	d016      	beq.n	1b534 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   1b506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b508:	3304      	adds	r3, #4
   1b50a:	2220      	movs	r2, #32
   1b50c:	21ff      	movs	r1, #255	; 0xff
   1b50e:	4618      	mov	r0, r3
   1b510:	f7f0 ff24 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   1b514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b516:	78ba      	ldrb	r2, [r7, #2]
   1b518:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   1b51a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b51c:	883a      	ldrh	r2, [r7, #0]
   1b51e:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   1b520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1b522:	2200      	movs	r2, #0
   1b524:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   1b526:	78fb      	ldrb	r3, [r7, #3]
   1b528:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   1b52a:	4618      	mov	r0, r3
   1b52c:	f7ff fa8d 	bl	1aa4a <WsfMsgSend>
          return TRUE;
   1b530:	2301      	movs	r3, #1
   1b532:	e01e      	b.n	1b572 <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   1b534:	2300      	movs	r3, #0
   1b536:	e01c      	b.n	1b572 <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   1b538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b53a:	883a      	ldrh	r2, [r7, #0]
   1b53c:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1b53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b540:	78ba      	ldrb	r2, [r7, #2]
   1b542:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1b544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1b546:	2202      	movs	r2, #2
   1b548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   1b54c:	78fb      	ldrb	r3, [r7, #3]
   1b54e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1b550:	4619      	mov	r1, r3
   1b552:	480b      	ldr	r0, [pc, #44]	; (1b580 <SecEccGenSharedSecret+0x104>)
   1b554:	f7ff fa91 	bl	1aa7a <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   1b558:	f107 030c 	add.w	r3, r7, #12
   1b55c:	f103 0220 	add.w	r2, r3, #32
   1b560:	f107 030c 	add.w	r3, r7, #12
   1b564:	4611      	mov	r1, r2
   1b566:	4618      	mov	r0, r3
   1b568:	f7fa fb21 	bl	15bae <HciLeGenerateDHKey>

    return TRUE;
   1b56c:	2301      	movs	r3, #1
   1b56e:	e000      	b.n	1b572 <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   1b570:	2300      	movs	r3, #0
}
   1b572:	4618      	mov	r0, r3
   1b574:	3778      	adds	r7, #120	; 0x78
   1b576:	46bd      	mov	sp, r7
   1b578:	bd80      	pop	{r7, pc}
   1b57a:	bf00      	nop
   1b57c:	40020000 	.word	0x40020000
   1b580:	10044418 	.word	0x10044418

0001b584 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   1b584:	b480      	push	{r7}
   1b586:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   1b588:	4b03      	ldr	r3, [pc, #12]	; (1b598 <SecEccInit+0x14>)
   1b58a:	4a04      	ldr	r2, [pc, #16]	; (1b59c <SecEccInit+0x18>)
   1b58c:	635a      	str	r2, [r3, #52]	; 0x34
}
   1b58e:	bf00      	nop
   1b590:	46bd      	mov	sp, r7
   1b592:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b596:	4770      	bx	lr
   1b598:	100443f8 	.word	0x100443f8
   1b59c:	0001b385 	.word	0x0001b385

0001b5a0 <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1b5a0:	b580      	push	{r7, lr}
   1b5a2:	b084      	sub	sp, #16
   1b5a4:	af00      	add	r7, sp, #0
   1b5a6:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   1b5a8:	2300      	movs	r3, #0
   1b5aa:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   1b5ac:	2300      	movs	r3, #0
   1b5ae:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   1b5b0:	687b      	ldr	r3, [r7, #4]
   1b5b2:	789b      	ldrb	r3, [r3, #2]
   1b5b4:	2b1c      	cmp	r3, #28
   1b5b6:	d10c      	bne.n	1b5d2 <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   1b5b8:	2218      	movs	r2, #24
   1b5ba:	492e      	ldr	r1, [pc, #184]	; (1b674 <secHciCback+0xd4>)
   1b5bc:	482e      	ldr	r0, [pc, #184]	; (1b678 <secHciCback+0xd8>)
   1b5be:	f7f0 fe69 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1b5c2:	687b      	ldr	r3, [r7, #4]
   1b5c4:	3305      	adds	r3, #5
   1b5c6:	2208      	movs	r2, #8
   1b5c8:	4619      	mov	r1, r3
   1b5ca:	482a      	ldr	r0, [pc, #168]	; (1b674 <secHciCback+0xd4>)
   1b5cc:	f7f0 fdc8 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   1b5d0:	e04b      	b.n	1b66a <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1b5d2:	687b      	ldr	r3, [r7, #4]
   1b5d4:	789b      	ldrb	r3, [r3, #2]
   1b5d6:	2b1b      	cmp	r3, #27
   1b5d8:	d007      	beq.n	1b5ea <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   1b5da:	687b      	ldr	r3, [r7, #4]
   1b5dc:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   1b5de:	2b25      	cmp	r3, #37	; 0x25
   1b5e0:	d003      	beq.n	1b5ea <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   1b5e2:	687b      	ldr	r3, [r7, #4]
   1b5e4:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   1b5e6:	2b26      	cmp	r3, #38	; 0x26
   1b5e8:	d128      	bne.n	1b63c <secHciCback+0x9c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b5ea:	f107 030b 	add.w	r3, r7, #11
   1b5ee:	4619      	mov	r1, r3
   1b5f0:	4822      	ldr	r0, [pc, #136]	; (1b67c <secHciCback+0xdc>)
   1b5f2:	f7ff fa57 	bl	1aaa4 <WsfMsgDeq>
   1b5f6:	60f8      	str	r0, [r7, #12]
   1b5f8:	68fb      	ldr	r3, [r7, #12]
   1b5fa:	2b00      	cmp	r3, #0
   1b5fc:	d01a      	beq.n	1b634 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
   1b5fe:	68fb      	ldr	r3, [r7, #12]
   1b600:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1b604:	4a1b      	ldr	r2, [pc, #108]	; (1b674 <secHciCback+0xd4>)
   1b606:	330a      	adds	r3, #10
   1b608:	009b      	lsls	r3, r3, #2
   1b60a:	4413      	add	r3, r2
   1b60c:	685b      	ldr	r3, [r3, #4]
   1b60e:	2b00      	cmp	r3, #0
   1b610:	d00c      	beq.n	1b62c <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   1b612:	68fb      	ldr	r3, [r7, #12]
   1b614:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1b618:	4a16      	ldr	r2, [pc, #88]	; (1b674 <secHciCback+0xd4>)
   1b61a:	330a      	adds	r3, #10
   1b61c:	009b      	lsls	r3, r3, #2
   1b61e:	4413      	add	r3, r2
   1b620:	685b      	ldr	r3, [r3, #4]
   1b622:	7afa      	ldrb	r2, [r7, #11]
   1b624:	6879      	ldr	r1, [r7, #4]
   1b626:	68f8      	ldr	r0, [r7, #12]
   1b628:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b62a:	e01e      	b.n	1b66a <secHciCback+0xca>
        WSF_TRACE_WARN0("WSF sec not registered");
   1b62c:	4814      	ldr	r0, [pc, #80]	; (1b680 <secHciCback+0xe0>)
   1b62e:	f005 f87f 	bl	20730 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b632:	e01a      	b.n	1b66a <secHciCback+0xca>
      WSF_TRACE_WARN0("WSF sec queue empty!");
   1b634:	4813      	ldr	r0, [pc, #76]	; (1b684 <secHciCback+0xe4>)
   1b636:	f005 f87b 	bl	20730 <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b63a:	e016      	b.n	1b66a <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   1b63c:	687b      	ldr	r3, [r7, #4]
   1b63e:	789b      	ldrb	r3, [r3, #2]
   1b640:	2b14      	cmp	r3, #20
   1b642:	d112      	bne.n	1b66a <secHciCback+0xca>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b644:	e002      	b.n	1b64c <secHciCback+0xac>
      WsfMsgFree(pBuf);
   1b646:	68f8      	ldr	r0, [r7, #12]
   1b648:	f7ff f9f2 	bl	1aa30 <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   1b64c:	f107 030b 	add.w	r3, r7, #11
   1b650:	4619      	mov	r1, r3
   1b652:	480a      	ldr	r0, [pc, #40]	; (1b67c <secHciCback+0xdc>)
   1b654:	f7ff fa26 	bl	1aaa4 <WsfMsgDeq>
   1b658:	60f8      	str	r0, [r7, #12]
   1b65a:	68fb      	ldr	r3, [r7, #12]
   1b65c:	2b00      	cmp	r3, #0
   1b65e:	d1f2      	bne.n	1b646 <secHciCback+0xa6>
    secCb.token = 0;
   1b660:	4b04      	ldr	r3, [pc, #16]	; (1b674 <secHciCback+0xd4>)
   1b662:	2200      	movs	r2, #0
   1b664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   1b668:	e7ff      	b.n	1b66a <secHciCback+0xca>
   1b66a:	bf00      	nop
   1b66c:	3710      	adds	r7, #16
   1b66e:	46bd      	mov	sp, r7
   1b670:	bd80      	pop	{r7, pc}
   1b672:	bf00      	nop
   1b674:	100443f8 	.word	0x100443f8
   1b678:	10044400 	.word	0x10044400
   1b67c:	10044418 	.word	0x10044418
   1b680:	0003b564 	.word	0x0003b564
   1b684:	0003b57c 	.word	0x0003b57c

0001b688 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   1b688:	b580      	push	{r7, lr}
   1b68a:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   1b68c:	4b07      	ldr	r3, [pc, #28]	; (1b6ac <SecInit+0x24>)
   1b68e:	2200      	movs	r2, #0
   1b690:	621a      	str	r2, [r3, #32]
   1b692:	4b06      	ldr	r3, [pc, #24]	; (1b6ac <SecInit+0x24>)
   1b694:	2200      	movs	r2, #0
   1b696:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   1b698:	4b04      	ldr	r3, [pc, #16]	; (1b6ac <SecInit+0x24>)
   1b69a:	2200      	movs	r2, #0
   1b69c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   1b6a0:	4803      	ldr	r0, [pc, #12]	; (1b6b0 <SecInit+0x28>)
   1b6a2:	f7fd fdef 	bl	19284 <HciSecRegister>
}
   1b6a6:	bf00      	nop
   1b6a8:	bd80      	pop	{r7, pc}
   1b6aa:	bf00      	nop
   1b6ac:	100443f8 	.word	0x100443f8
   1b6b0:	0001b5a1 	.word	0x0001b5a1

0001b6b4 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   1b6b4:	b580      	push	{r7, lr}
   1b6b6:	b084      	sub	sp, #16
   1b6b8:	af00      	add	r7, sp, #0
   1b6ba:	6078      	str	r0, [r7, #4]
   1b6bc:	460b      	mov	r3, r1
   1b6be:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   1b6c0:	78fb      	ldrb	r3, [r7, #3]
   1b6c2:	3307      	adds	r3, #7
   1b6c4:	2b00      	cmp	r3, #0
   1b6c6:	da00      	bge.n	1b6ca <SecRand+0x16>
   1b6c8:	3307      	adds	r3, #7
   1b6ca:	10db      	asrs	r3, r3, #3
   1b6cc:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   1b6ce:	78fb      	ldrb	r3, [r7, #3]
   1b6d0:	461a      	mov	r2, r3
   1b6d2:	4909      	ldr	r1, [pc, #36]	; (1b6f8 <SecRand+0x44>)
   1b6d4:	6878      	ldr	r0, [r7, #4]
   1b6d6:	f7f0 fd43 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   1b6da:	e001      	b.n	1b6e0 <SecRand+0x2c>
  {
    HciLeRandCmd();
   1b6dc:	f7fa fb15 	bl	15d0a <HciLeRandCmd>
  while (count--)
   1b6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1b6e4:	b2da      	uxtb	r2, r3
   1b6e6:	3a01      	subs	r2, #1
   1b6e8:	b2d2      	uxtb	r2, r2
   1b6ea:	73fa      	strb	r2, [r7, #15]
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	d1f5      	bne.n	1b6dc <SecRand+0x28>
  }
}
   1b6f0:	bf00      	nop
   1b6f2:	3710      	adds	r7, #16
   1b6f4:	46bd      	mov	sp, r7
   1b6f6:	bd80      	pop	{r7, pc}
   1b6f8:	100443f8 	.word	0x100443f8

0001b6fc <sbc_crc8>:
	0x7F, 0x62, 0x45, 0x58, 0x0B, 0x16, 0x31, 0x2C,
	0x97, 0x8A, 0xAD, 0xB0, 0xE3, 0xFE, 0xD9, 0xC4
};

static uint8_t sbc_crc8(const uint8_t *data, size_t len)
{
   1b6fc:	b480      	push	{r7}
   1b6fe:	b087      	sub	sp, #28
   1b700:	af00      	add	r7, sp, #0
   1b702:	6078      	str	r0, [r7, #4]
   1b704:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0x0f;
   1b706:	230f      	movs	r3, #15
   1b708:	75fb      	strb	r3, [r7, #23]
	size_t i;
	uint8_t octet;

	for (i = 0; i < len / 8; i++)
   1b70a:	2300      	movs	r3, #0
   1b70c:	613b      	str	r3, [r7, #16]
   1b70e:	e00d      	b.n	1b72c <sbc_crc8+0x30>
		crc = crc_table[crc ^ data[i]];
   1b710:	687a      	ldr	r2, [r7, #4]
   1b712:	693b      	ldr	r3, [r7, #16]
   1b714:	4413      	add	r3, r2
   1b716:	781a      	ldrb	r2, [r3, #0]
   1b718:	7dfb      	ldrb	r3, [r7, #23]
   1b71a:	4053      	eors	r3, r2
   1b71c:	b2db      	uxtb	r3, r3
   1b71e:	461a      	mov	r2, r3
   1b720:	4b1b      	ldr	r3, [pc, #108]	; (1b790 <sbc_crc8+0x94>)
   1b722:	5c9b      	ldrb	r3, [r3, r2]
   1b724:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < len / 8; i++)
   1b726:	693b      	ldr	r3, [r7, #16]
   1b728:	3301      	adds	r3, #1
   1b72a:	613b      	str	r3, [r7, #16]
   1b72c:	683b      	ldr	r3, [r7, #0]
   1b72e:	08da      	lsrs	r2, r3, #3
   1b730:	693b      	ldr	r3, [r7, #16]
   1b732:	429a      	cmp	r2, r3
   1b734:	d8ec      	bhi.n	1b710 <sbc_crc8+0x14>

	octet = data[i];
   1b736:	687a      	ldr	r2, [r7, #4]
   1b738:	693b      	ldr	r3, [r7, #16]
   1b73a:	4413      	add	r3, r2
   1b73c:	781b      	ldrb	r3, [r3, #0]
   1b73e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len % 8; i++) {
   1b740:	2300      	movs	r3, #0
   1b742:	613b      	str	r3, [r7, #16]
   1b744:	e017      	b.n	1b776 <sbc_crc8+0x7a>
		char bit = ((octet ^ crc) & 0x80) >> 7;
   1b746:	7bfa      	ldrb	r2, [r7, #15]
   1b748:	7dfb      	ldrb	r3, [r7, #23]
   1b74a:	4053      	eors	r3, r2
   1b74c:	b2db      	uxtb	r3, r3
   1b74e:	09db      	lsrs	r3, r3, #7
   1b750:	73bb      	strb	r3, [r7, #14]

		crc = ((crc & 0x7f) << 1) ^ (bit ? 0x1d : 0);
   1b752:	7dfb      	ldrb	r3, [r7, #23]
   1b754:	005b      	lsls	r3, r3, #1
   1b756:	b25a      	sxtb	r2, r3
   1b758:	7bbb      	ldrb	r3, [r7, #14]
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d001      	beq.n	1b762 <sbc_crc8+0x66>
   1b75e:	231d      	movs	r3, #29
   1b760:	e000      	b.n	1b764 <sbc_crc8+0x68>
   1b762:	2300      	movs	r3, #0
   1b764:	4053      	eors	r3, r2
   1b766:	b25b      	sxtb	r3, r3
   1b768:	75fb      	strb	r3, [r7, #23]

		octet = octet << 1;
   1b76a:	7bfb      	ldrb	r3, [r7, #15]
   1b76c:	005b      	lsls	r3, r3, #1
   1b76e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len % 8; i++) {
   1b770:	693b      	ldr	r3, [r7, #16]
   1b772:	3301      	adds	r3, #1
   1b774:	613b      	str	r3, [r7, #16]
   1b776:	683b      	ldr	r3, [r7, #0]
   1b778:	f003 0207 	and.w	r2, r3, #7
   1b77c:	693b      	ldr	r3, [r7, #16]
   1b77e:	429a      	cmp	r2, r3
   1b780:	d8e1      	bhi.n	1b746 <sbc_crc8+0x4a>
	}

	return crc;
   1b782:	7dfb      	ldrb	r3, [r7, #23]
}
   1b784:	4618      	mov	r0, r3
   1b786:	371c      	adds	r7, #28
   1b788:	46bd      	mov	sp, r7
   1b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b78e:	4770      	bx	lr
   1b790:	0003cd60 	.word	0x0003cd60

0001b794 <sbc_calculate_bits_internal>:
 * Takes a pointer to the frame in question, a pointer to the bits array and
 * the sampling frequency (as 2 bit integer)
 */
static SBC_ALWAYS_INLINE void sbc_calculate_bits_internal(
		const struct sbc_frame *frame, int (*bits)[8], int subbands)
{
   1b794:	b480      	push	{r7}
   1b796:	b0a5      	sub	sp, #148	; 0x94
   1b798:	af00      	add	r7, sp, #0
   1b79a:	60f8      	str	r0, [r7, #12]
   1b79c:	60b9      	str	r1, [r7, #8]
   1b79e:	607a      	str	r2, [r7, #4]
	uint8_t sf = frame->frequency;
   1b7a0:	68fb      	ldr	r3, [r7, #12]
   1b7a2:	781b      	ldrb	r3, [r3, #0]
   1b7a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (frame->mode == MONO || frame->mode == DUAL_CHANNEL) {
   1b7a8:	68fb      	ldr	r3, [r7, #12]
   1b7aa:	685b      	ldr	r3, [r3, #4]
   1b7ac:	2b00      	cmp	r3, #0
   1b7ae:	d004      	beq.n	1b7ba <sbc_calculate_bits_internal+0x26>
   1b7b0:	68fb      	ldr	r3, [r7, #12]
   1b7b2:	685b      	ldr	r3, [r3, #4]
   1b7b4:	2b01      	cmp	r3, #1
   1b7b6:	f040 8211 	bne.w	1bbdc <sbc_calculate_bits_internal+0x448>
		int bitneed[2][8], loudness, max_bitneed, bitcount, slicecount, bitslice;
		int ch, sb;

		for (ch = 0; ch < frame->channels; ch++) {
   1b7ba:	2300      	movs	r3, #0
   1b7bc:	67bb      	str	r3, [r7, #120]	; 0x78
   1b7be:	e205      	b.n	1bbcc <sbc_calculate_bits_internal+0x438>
			max_bitneed = 0;
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			if (frame->allocation == SNR) {
   1b7c6:	68fb      	ldr	r3, [r7, #12]
   1b7c8:	68db      	ldr	r3, [r3, #12]
   1b7ca:	2b01      	cmp	r3, #1
   1b7cc:	d137      	bne.n	1b83e <sbc_calculate_bits_internal+0xaa>
				for (sb = 0; sb < subbands; sb++) {
   1b7ce:	2300      	movs	r3, #0
   1b7d0:	677b      	str	r3, [r7, #116]	; 0x74
   1b7d2:	e02f      	b.n	1b834 <sbc_calculate_bits_internal+0xa0>
					bitneed[ch][sb] = frame->scale_factor[ch][sb];
   1b7d4:	68fb      	ldr	r3, [r7, #12]
   1b7d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1b7d8:	00d1      	lsls	r1, r2, #3
   1b7da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b7dc:	440a      	add	r2, r1
   1b7de:	3208      	adds	r2, #8
   1b7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b7e4:	4619      	mov	r1, r3
   1b7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b7e8:	00da      	lsls	r2, r3, #3
   1b7ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b7ec:	4413      	add	r3, r2
   1b7ee:	009b      	lsls	r3, r3, #2
   1b7f0:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b7f4:	4413      	add	r3, r2
   1b7f6:	f843 1c7c 	str.w	r1, [r3, #-124]
					if (bitneed[ch][sb] > max_bitneed)
   1b7fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b7fc:	00da      	lsls	r2, r3, #3
   1b7fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b800:	4413      	add	r3, r2
   1b802:	009b      	lsls	r3, r3, #2
   1b804:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b808:	4413      	add	r3, r2
   1b80a:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1b80e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1b812:	429a      	cmp	r2, r3
   1b814:	dd0b      	ble.n	1b82e <sbc_calculate_bits_internal+0x9a>
						max_bitneed = bitneed[ch][sb];
   1b816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b818:	00da      	lsls	r2, r3, #3
   1b81a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b81c:	4413      	add	r3, r2
   1b81e:	009b      	lsls	r3, r3, #2
   1b820:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b824:	4413      	add	r3, r2
   1b826:	f853 3c7c 	ldr.w	r3, [r3, #-124]
   1b82a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (sb = 0; sb < subbands; sb++) {
   1b82e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b830:	3301      	adds	r3, #1
   1b832:	677b      	str	r3, [r7, #116]	; 0x74
   1b834:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b836:	687b      	ldr	r3, [r7, #4]
   1b838:	429a      	cmp	r2, r3
   1b83a:	dbcb      	blt.n	1b7d4 <sbc_calculate_bits_internal+0x40>
   1b83c:	e086      	b.n	1b94c <sbc_calculate_bits_internal+0x1b8>
				}
			} else {
				for (sb = 0; sb < subbands; sb++) {
   1b83e:	2300      	movs	r3, #0
   1b840:	677b      	str	r3, [r7, #116]	; 0x74
   1b842:	e07e      	b.n	1b942 <sbc_calculate_bits_internal+0x1ae>
					if (frame->scale_factor[ch][sb] == 0)
   1b844:	68fb      	ldr	r3, [r7, #12]
   1b846:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1b848:	00d1      	lsls	r1, r2, #3
   1b84a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b84c:	440a      	add	r2, r1
   1b84e:	3208      	adds	r2, #8
   1b850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b854:	2b00      	cmp	r3, #0
   1b856:	d10c      	bne.n	1b872 <sbc_calculate_bits_internal+0xde>
						bitneed[ch][sb] = -5;
   1b858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b85a:	00da      	lsls	r2, r3, #3
   1b85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b85e:	4413      	add	r3, r2
   1b860:	009b      	lsls	r3, r3, #2
   1b862:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b866:	4413      	add	r3, r2
   1b868:	f06f 0204 	mvn.w	r2, #4
   1b86c:	f843 2c7c 	str.w	r2, [r3, #-124]
   1b870:	e04a      	b.n	1b908 <sbc_calculate_bits_internal+0x174>
					else {
						if (subbands == 4)
   1b872:	687b      	ldr	r3, [r7, #4]
   1b874:	2b04      	cmp	r3, #4
   1b876:	d113      	bne.n	1b8a0 <sbc_calculate_bits_internal+0x10c>
							loudness = frame->scale_factor[ch][sb] - sbc_offset4[sf][sb];
   1b878:	68fb      	ldr	r3, [r7, #12]
   1b87a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1b87c:	00d1      	lsls	r1, r2, #3
   1b87e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b880:	440a      	add	r2, r1
   1b882:	3208      	adds	r2, #8
   1b884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b888:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
   1b88c:	48b8      	ldr	r0, [pc, #736]	; (1bb70 <sbc_calculate_bits_internal+0x3dc>)
   1b88e:	0091      	lsls	r1, r2, #2
   1b890:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b892:	440a      	add	r2, r1
   1b894:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1b898:	1a9b      	subs	r3, r3, r2
   1b89a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1b89e:	e012      	b.n	1b8c6 <sbc_calculate_bits_internal+0x132>
						else
							loudness = frame->scale_factor[ch][sb] - sbc_offset8[sf][sb];
   1b8a0:	68fb      	ldr	r3, [r7, #12]
   1b8a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1b8a4:	00d1      	lsls	r1, r2, #3
   1b8a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b8a8:	440a      	add	r2, r1
   1b8aa:	3208      	adds	r2, #8
   1b8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1b8b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
   1b8b4:	48af      	ldr	r0, [pc, #700]	; (1bb74 <sbc_calculate_bits_internal+0x3e0>)
   1b8b6:	00d1      	lsls	r1, r2, #3
   1b8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b8ba:	440a      	add	r2, r1
   1b8bc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1b8c0:	1a9b      	subs	r3, r3, r2
   1b8c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						if (loudness > 0)
   1b8c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1b8ca:	2b00      	cmp	r3, #0
   1b8cc:	dd10      	ble.n	1b8f0 <sbc_calculate_bits_internal+0x15c>
							bitneed[ch][sb] = loudness / 2;
   1b8ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1b8d2:	0fda      	lsrs	r2, r3, #31
   1b8d4:	4413      	add	r3, r2
   1b8d6:	105b      	asrs	r3, r3, #1
   1b8d8:	4619      	mov	r1, r3
   1b8da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b8dc:	00da      	lsls	r2, r3, #3
   1b8de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b8e0:	4413      	add	r3, r2
   1b8e2:	009b      	lsls	r3, r3, #2
   1b8e4:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b8e8:	4413      	add	r3, r2
   1b8ea:	f843 1c7c 	str.w	r1, [r3, #-124]
   1b8ee:	e00b      	b.n	1b908 <sbc_calculate_bits_internal+0x174>
						else
							bitneed[ch][sb] = loudness;
   1b8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b8f2:	00da      	lsls	r2, r3, #3
   1b8f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b8f6:	4413      	add	r3, r2
   1b8f8:	009b      	lsls	r3, r3, #2
   1b8fa:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b8fe:	4413      	add	r3, r2
   1b900:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1b904:	f843 2c7c 	str.w	r2, [r3, #-124]
					}
					if (bitneed[ch][sb] > max_bitneed)
   1b908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b90a:	00da      	lsls	r2, r3, #3
   1b90c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b90e:	4413      	add	r3, r2
   1b910:	009b      	lsls	r3, r3, #2
   1b912:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b916:	4413      	add	r3, r2
   1b918:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1b91c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1b920:	429a      	cmp	r2, r3
   1b922:	dd0b      	ble.n	1b93c <sbc_calculate_bits_internal+0x1a8>
						max_bitneed = bitneed[ch][sb];
   1b924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b926:	00da      	lsls	r2, r3, #3
   1b928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b92a:	4413      	add	r3, r2
   1b92c:	009b      	lsls	r3, r3, #2
   1b92e:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b932:	4413      	add	r3, r2
   1b934:	f853 3c7c 	ldr.w	r3, [r3, #-124]
   1b938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (sb = 0; sb < subbands; sb++) {
   1b93c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b93e:	3301      	adds	r3, #1
   1b940:	677b      	str	r3, [r7, #116]	; 0x74
   1b942:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b944:	687b      	ldr	r3, [r7, #4]
   1b946:	429a      	cmp	r2, r3
   1b948:	f6ff af7c 	blt.w	1b844 <sbc_calculate_bits_internal+0xb0>
				}
			}

			bitcount = 0;
   1b94c:	2300      	movs	r3, #0
   1b94e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			slicecount = 0;
   1b952:	2300      	movs	r3, #0
   1b954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			bitslice = max_bitneed + 1;
   1b958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1b95c:	3301      	adds	r3, #1
   1b95e:	67fb      	str	r3, [r7, #124]	; 0x7c
			do {
				bitslice--;
   1b960:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1b962:	3b01      	subs	r3, #1
   1b964:	67fb      	str	r3, [r7, #124]	; 0x7c
				bitcount += slicecount;
   1b966:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1b96a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1b96e:	4413      	add	r3, r2
   1b970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				slicecount = 0;
   1b974:	2300      	movs	r3, #0
   1b976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (sb = 0; sb < subbands; sb++) {
   1b97a:	2300      	movs	r3, #0
   1b97c:	677b      	str	r3, [r7, #116]	; 0x74
   1b97e:	e037      	b.n	1b9f0 <sbc_calculate_bits_internal+0x25c>
					if ((bitneed[ch][sb] > bitslice + 1) && (bitneed[ch][sb] < bitslice + 16))
   1b980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b982:	00da      	lsls	r2, r3, #3
   1b984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b986:	4413      	add	r3, r2
   1b988:	009b      	lsls	r3, r3, #2
   1b98a:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b98e:	4413      	add	r3, r2
   1b990:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1b994:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1b996:	3301      	adds	r3, #1
   1b998:	429a      	cmp	r2, r3
   1b99a:	dd13      	ble.n	1b9c4 <sbc_calculate_bits_internal+0x230>
   1b99c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b99e:	00da      	lsls	r2, r3, #3
   1b9a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b9a2:	4413      	add	r3, r2
   1b9a4:	009b      	lsls	r3, r3, #2
   1b9a6:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b9aa:	4413      	add	r3, r2
   1b9ac:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1b9b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1b9b2:	3310      	adds	r3, #16
   1b9b4:	429a      	cmp	r2, r3
   1b9b6:	da05      	bge.n	1b9c4 <sbc_calculate_bits_internal+0x230>
						slicecount++;
   1b9b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1b9bc:	3301      	adds	r3, #1
   1b9be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1b9c2:	e012      	b.n	1b9ea <sbc_calculate_bits_internal+0x256>
					else if (bitneed[ch][sb] == bitslice + 1)
   1b9c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1b9c6:	00da      	lsls	r2, r3, #3
   1b9c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b9ca:	4413      	add	r3, r2
   1b9cc:	009b      	lsls	r3, r3, #2
   1b9ce:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1b9d2:	4413      	add	r3, r2
   1b9d4:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1b9d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1b9da:	3301      	adds	r3, #1
   1b9dc:	429a      	cmp	r2, r3
   1b9de:	d104      	bne.n	1b9ea <sbc_calculate_bits_internal+0x256>
						slicecount += 2;
   1b9e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1b9e4:	3302      	adds	r3, #2
   1b9e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (sb = 0; sb < subbands; sb++) {
   1b9ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1b9ec:	3301      	adds	r3, #1
   1b9ee:	677b      	str	r3, [r7, #116]	; 0x74
   1b9f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1b9f2:	687b      	ldr	r3, [r7, #4]
   1b9f4:	429a      	cmp	r2, r3
   1b9f6:	dbc3      	blt.n	1b980 <sbc_calculate_bits_internal+0x1ec>
				}
			} while (bitcount + slicecount < frame->bitpool);
   1b9f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1b9fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1ba00:	4413      	add	r3, r2
   1ba02:	68fa      	ldr	r2, [r7, #12]
   1ba04:	7c92      	ldrb	r2, [r2, #18]
   1ba06:	4293      	cmp	r3, r2
   1ba08:	dbaa      	blt.n	1b960 <sbc_calculate_bits_internal+0x1cc>

			if (bitcount + slicecount == frame->bitpool) {
   1ba0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1ba0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1ba12:	4413      	add	r3, r2
   1ba14:	68fa      	ldr	r2, [r7, #12]
   1ba16:	7c92      	ldrb	r2, [r2, #18]
   1ba18:	4293      	cmp	r3, r2
   1ba1a:	d109      	bne.n	1ba30 <sbc_calculate_bits_internal+0x29c>
				bitcount += slicecount;
   1ba1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1ba20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   1ba24:	4413      	add	r3, r2
   1ba26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				bitslice--;
   1ba2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1ba2c:	3b01      	subs	r3, #1
   1ba2e:	67fb      	str	r3, [r7, #124]	; 0x7c
			}

			for (sb = 0; sb < subbands; sb++) {
   1ba30:	2300      	movs	r3, #0
   1ba32:	677b      	str	r3, [r7, #116]	; 0x74
   1ba34:	e03d      	b.n	1bab2 <sbc_calculate_bits_internal+0x31e>
				if (bitneed[ch][sb] < bitslice + 2)
   1ba36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba38:	00da      	lsls	r2, r3, #3
   1ba3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1ba3c:	4413      	add	r3, r2
   1ba3e:	009b      	lsls	r3, r3, #2
   1ba40:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1ba44:	4413      	add	r3, r2
   1ba46:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1ba4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1ba4c:	3302      	adds	r3, #2
   1ba4e:	429a      	cmp	r2, r3
   1ba50:	da08      	bge.n	1ba64 <sbc_calculate_bits_internal+0x2d0>
					bits[ch][sb] = 0;
   1ba52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba54:	015b      	lsls	r3, r3, #5
   1ba56:	68ba      	ldr	r2, [r7, #8]
   1ba58:	4413      	add	r3, r2
   1ba5a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1ba5c:	2100      	movs	r1, #0
   1ba5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1ba62:	e023      	b.n	1baac <sbc_calculate_bits_internal+0x318>
				else {
					bits[ch][sb] = bitneed[ch][sb] - bitslice;
   1ba64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba66:	015b      	lsls	r3, r3, #5
   1ba68:	68ba      	ldr	r2, [r7, #8]
   1ba6a:	441a      	add	r2, r3
   1ba6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba6e:	00d9      	lsls	r1, r3, #3
   1ba70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1ba72:	440b      	add	r3, r1
   1ba74:	009b      	lsls	r3, r3, #2
   1ba76:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1ba7a:	440b      	add	r3, r1
   1ba7c:	f853 1c7c 	ldr.w	r1, [r3, #-124]
   1ba80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1ba82:	1ac9      	subs	r1, r1, r3
   1ba84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1ba86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (bits[ch][sb] > 16)
   1ba8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba8c:	015b      	lsls	r3, r3, #5
   1ba8e:	68ba      	ldr	r2, [r7, #8]
   1ba90:	4413      	add	r3, r2
   1ba92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1ba94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ba98:	2b10      	cmp	r3, #16
   1ba9a:	dd07      	ble.n	1baac <sbc_calculate_bits_internal+0x318>
						bits[ch][sb] = 16;
   1ba9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1ba9e:	015b      	lsls	r3, r3, #5
   1baa0:	68ba      	ldr	r2, [r7, #8]
   1baa2:	4413      	add	r3, r2
   1baa4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1baa6:	2110      	movs	r1, #16
   1baa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (sb = 0; sb < subbands; sb++) {
   1baac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1baae:	3301      	adds	r3, #1
   1bab0:	677b      	str	r3, [r7, #116]	; 0x74
   1bab2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bab4:	687b      	ldr	r3, [r7, #4]
   1bab6:	429a      	cmp	r2, r3
   1bab8:	dbbd      	blt.n	1ba36 <sbc_calculate_bits_internal+0x2a2>
				}
			}

			for (sb = 0; bitcount < frame->bitpool &&
   1baba:	2300      	movs	r3, #0
   1babc:	677b      	str	r3, [r7, #116]	; 0x74
   1babe:	e048      	b.n	1bb52 <sbc_calculate_bits_internal+0x3be>
							sb < subbands; sb++) {
				if ((bits[ch][sb] >= 2) && (bits[ch][sb] < 16)) {
   1bac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bac2:	015b      	lsls	r3, r3, #5
   1bac4:	68ba      	ldr	r2, [r7, #8]
   1bac6:	4413      	add	r3, r2
   1bac8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1baca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bace:	2b01      	cmp	r3, #1
   1bad0:	dd19      	ble.n	1bb06 <sbc_calculate_bits_internal+0x372>
   1bad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bad4:	015b      	lsls	r3, r3, #5
   1bad6:	68ba      	ldr	r2, [r7, #8]
   1bad8:	4413      	add	r3, r2
   1bada:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1badc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bae0:	2b0f      	cmp	r3, #15
   1bae2:	dc10      	bgt.n	1bb06 <sbc_calculate_bits_internal+0x372>
					bits[ch][sb]++;
   1bae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bae6:	015b      	lsls	r3, r3, #5
   1bae8:	68ba      	ldr	r2, [r7, #8]
   1baea:	4413      	add	r3, r2
   1baec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1baee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1baf2:	1c51      	adds	r1, r2, #1
   1baf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1baf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					bitcount++;
   1bafa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bafe:	3301      	adds	r3, #1
   1bb00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   1bb04:	e022      	b.n	1bb4c <sbc_calculate_bits_internal+0x3b8>
				} else if ((bitneed[ch][sb] == bitslice + 1) && (frame->bitpool > bitcount + 1)) {
   1bb06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bb08:	00da      	lsls	r2, r3, #3
   1bb0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1bb0c:	4413      	add	r3, r2
   1bb0e:	009b      	lsls	r3, r3, #2
   1bb10:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bb14:	4413      	add	r3, r2
   1bb16:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bb1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1bb1c:	3301      	adds	r3, #1
   1bb1e:	429a      	cmp	r2, r3
   1bb20:	d114      	bne.n	1bb4c <sbc_calculate_bits_internal+0x3b8>
   1bb22:	68fb      	ldr	r3, [r7, #12]
   1bb24:	7c9b      	ldrb	r3, [r3, #18]
   1bb26:	461a      	mov	r2, r3
   1bb28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bb2c:	3301      	adds	r3, #1
   1bb2e:	429a      	cmp	r2, r3
   1bb30:	dd0c      	ble.n	1bb4c <sbc_calculate_bits_internal+0x3b8>
					bits[ch][sb] = 2;
   1bb32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bb34:	015b      	lsls	r3, r3, #5
   1bb36:	68ba      	ldr	r2, [r7, #8]
   1bb38:	4413      	add	r3, r2
   1bb3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bb3c:	2102      	movs	r1, #2
   1bb3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					bitcount += 2;
   1bb42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bb46:	3302      	adds	r3, #2
   1bb48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							sb < subbands; sb++) {
   1bb4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1bb4e:	3301      	adds	r3, #1
   1bb50:	677b      	str	r3, [r7, #116]	; 0x74
			for (sb = 0; bitcount < frame->bitpool &&
   1bb52:	68fb      	ldr	r3, [r7, #12]
   1bb54:	7c9b      	ldrb	r3, [r3, #18]
   1bb56:	461a      	mov	r2, r3
   1bb58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bb5c:	429a      	cmp	r2, r3
   1bb5e:	dd03      	ble.n	1bb68 <sbc_calculate_bits_internal+0x3d4>
   1bb60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bb62:	687b      	ldr	r3, [r7, #4]
   1bb64:	429a      	cmp	r2, r3
   1bb66:	dbab      	blt.n	1bac0 <sbc_calculate_bits_internal+0x32c>
				}
			}

			for (sb = 0; bitcount < frame->bitpool &&
   1bb68:	2300      	movs	r3, #0
   1bb6a:	677b      	str	r3, [r7, #116]	; 0x74
   1bb6c:	e020      	b.n	1bbb0 <sbc_calculate_bits_internal+0x41c>
   1bb6e:	bf00      	nop
   1bb70:	0003cca0 	.word	0x0003cca0
   1bb74:	0003cce0 	.word	0x0003cce0
							sb < subbands; sb++) {
				if (bits[ch][sb] < 16) {
   1bb78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bb7a:	015b      	lsls	r3, r3, #5
   1bb7c:	68ba      	ldr	r2, [r7, #8]
   1bb7e:	4413      	add	r3, r2
   1bb80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bb82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bb86:	2b0f      	cmp	r3, #15
   1bb88:	dc0f      	bgt.n	1bbaa <sbc_calculate_bits_internal+0x416>
					bits[ch][sb]++;
   1bb8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bb8c:	015b      	lsls	r3, r3, #5
   1bb8e:	68ba      	ldr	r2, [r7, #8]
   1bb90:	4413      	add	r3, r2
   1bb92:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bb94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1bb98:	1c51      	adds	r1, r2, #1
   1bb9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					bitcount++;
   1bba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bba4:	3301      	adds	r3, #1
   1bba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							sb < subbands; sb++) {
   1bbaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1bbac:	3301      	adds	r3, #1
   1bbae:	677b      	str	r3, [r7, #116]	; 0x74
			for (sb = 0; bitcount < frame->bitpool &&
   1bbb0:	68fb      	ldr	r3, [r7, #12]
   1bbb2:	7c9b      	ldrb	r3, [r3, #18]
   1bbb4:	461a      	mov	r2, r3
   1bbb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1bbba:	429a      	cmp	r2, r3
   1bbbc:	dd03      	ble.n	1bbc6 <sbc_calculate_bits_internal+0x432>
   1bbbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   1bbc0:	687b      	ldr	r3, [r7, #4]
   1bbc2:	429a      	cmp	r2, r3
   1bbc4:	dbd8      	blt.n	1bb78 <sbc_calculate_bits_internal+0x3e4>
		for (ch = 0; ch < frame->channels; ch++) {
   1bbc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bbc8:	3301      	adds	r3, #1
   1bbca:	67bb      	str	r3, [r7, #120]	; 0x78
   1bbcc:	68fb      	ldr	r3, [r7, #12]
   1bbce:	7a1b      	ldrb	r3, [r3, #8]
   1bbd0:	461a      	mov	r2, r3
   1bbd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1bbd4:	429a      	cmp	r2, r3
   1bbd6:	f73f adf3 	bgt.w	1b7c0 <sbc_calculate_bits_internal+0x2c>
	if (frame->mode == MONO || frame->mode == DUAL_CHANNEL) {
   1bbda:	e21e      	b.n	1c01a <sbc_calculate_bits_internal+0x886>
				}
			}

		}

	} else if (frame->mode == STEREO || frame->mode == JOINT_STEREO) {
   1bbdc:	68fb      	ldr	r3, [r7, #12]
   1bbde:	685b      	ldr	r3, [r3, #4]
   1bbe0:	2b02      	cmp	r3, #2
   1bbe2:	d004      	beq.n	1bbee <sbc_calculate_bits_internal+0x45a>
   1bbe4:	68fb      	ldr	r3, [r7, #12]
   1bbe6:	685b      	ldr	r3, [r3, #4]
   1bbe8:	2b03      	cmp	r3, #3
   1bbea:	f040 8216 	bne.w	1c01a <sbc_calculate_bits_internal+0x886>
		int bitneed[2][8], loudness, max_bitneed, bitcount, slicecount, bitslice;
		int ch, sb;

		max_bitneed = 0;
   1bbee:	2300      	movs	r3, #0
   1bbf0:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (frame->allocation == SNR) {
   1bbf2:	68fb      	ldr	r3, [r7, #12]
   1bbf4:	68db      	ldr	r3, [r3, #12]
   1bbf6:	2b01      	cmp	r3, #1
   1bbf8:	d13e      	bne.n	1bc78 <sbc_calculate_bits_internal+0x4e4>
			for (ch = 0; ch < 2; ch++) {
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bbfe:	e037      	b.n	1bc70 <sbc_calculate_bits_internal+0x4dc>
				for (sb = 0; sb < subbands; sb++) {
   1bc00:	2300      	movs	r3, #0
   1bc02:	65bb      	str	r3, [r7, #88]	; 0x58
   1bc04:	e02d      	b.n	1bc62 <sbc_calculate_bits_internal+0x4ce>
					bitneed[ch][sb] = frame->scale_factor[ch][sb];
   1bc06:	68fb      	ldr	r3, [r7, #12]
   1bc08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1bc0a:	00d1      	lsls	r1, r2, #3
   1bc0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bc0e:	440a      	add	r2, r1
   1bc10:	3208      	adds	r2, #8
   1bc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bc16:	4619      	mov	r1, r3
   1bc18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc1a:	00da      	lsls	r2, r3, #3
   1bc1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bc1e:	4413      	add	r3, r2
   1bc20:	009b      	lsls	r3, r3, #2
   1bc22:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bc26:	4413      	add	r3, r2
   1bc28:	f843 1c7c 	str.w	r1, [r3, #-124]
					if (bitneed[ch][sb] > max_bitneed)
   1bc2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc2e:	00da      	lsls	r2, r3, #3
   1bc30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bc32:	4413      	add	r3, r2
   1bc34:	009b      	lsls	r3, r3, #2
   1bc36:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bc3a:	4413      	add	r3, r2
   1bc3c:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bc40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1bc42:	429a      	cmp	r2, r3
   1bc44:	dd0a      	ble.n	1bc5c <sbc_calculate_bits_internal+0x4c8>
						max_bitneed = bitneed[ch][sb];
   1bc46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc48:	00da      	lsls	r2, r3, #3
   1bc4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bc4c:	4413      	add	r3, r2
   1bc4e:	009b      	lsls	r3, r3, #2
   1bc50:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bc54:	4413      	add	r3, r2
   1bc56:	f853 3c7c 	ldr.w	r3, [r3, #-124]
   1bc5a:	66fb      	str	r3, [r7, #108]	; 0x6c
				for (sb = 0; sb < subbands; sb++) {
   1bc5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bc5e:	3301      	adds	r3, #1
   1bc60:	65bb      	str	r3, [r7, #88]	; 0x58
   1bc62:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bc64:	687b      	ldr	r3, [r7, #4]
   1bc66:	429a      	cmp	r2, r3
   1bc68:	dbcd      	blt.n	1bc06 <sbc_calculate_bits_internal+0x472>
			for (ch = 0; ch < 2; ch++) {
   1bc6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc6c:	3301      	adds	r3, #1
   1bc6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bc70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc72:	2b01      	cmp	r3, #1
   1bc74:	ddc4      	ble.n	1bc00 <sbc_calculate_bits_internal+0x46c>
   1bc76:	e088      	b.n	1bd8a <sbc_calculate_bits_internal+0x5f6>
				}
			}
		} else {
			for (ch = 0; ch < 2; ch++) {
   1bc78:	2300      	movs	r3, #0
   1bc7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bc7c:	e081      	b.n	1bd82 <sbc_calculate_bits_internal+0x5ee>
				for (sb = 0; sb < subbands; sb++) {
   1bc7e:	2300      	movs	r3, #0
   1bc80:	65bb      	str	r3, [r7, #88]	; 0x58
   1bc82:	e077      	b.n	1bd74 <sbc_calculate_bits_internal+0x5e0>
					if (frame->scale_factor[ch][sb] == 0)
   1bc84:	68fb      	ldr	r3, [r7, #12]
   1bc86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1bc88:	00d1      	lsls	r1, r2, #3
   1bc8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bc8c:	440a      	add	r2, r1
   1bc8e:	3208      	adds	r2, #8
   1bc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bc94:	2b00      	cmp	r3, #0
   1bc96:	d10c      	bne.n	1bcb2 <sbc_calculate_bits_internal+0x51e>
						bitneed[ch][sb] = -5;
   1bc98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bc9a:	00da      	lsls	r2, r3, #3
   1bc9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bc9e:	4413      	add	r3, r2
   1bca0:	009b      	lsls	r3, r3, #2
   1bca2:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bca6:	4413      	add	r3, r2
   1bca8:	f06f 0204 	mvn.w	r2, #4
   1bcac:	f843 2c7c 	str.w	r2, [r3, #-124]
   1bcb0:	e045      	b.n	1bd3e <sbc_calculate_bits_internal+0x5aa>
					else {
						if (subbands == 4)
   1bcb2:	687b      	ldr	r3, [r7, #4]
   1bcb4:	2b04      	cmp	r3, #4
   1bcb6:	d112      	bne.n	1bcde <sbc_calculate_bits_internal+0x54a>
							loudness = frame->scale_factor[ch][sb] - sbc_offset4[sf][sb];
   1bcb8:	68fb      	ldr	r3, [r7, #12]
   1bcba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1bcbc:	00d1      	lsls	r1, r2, #3
   1bcbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bcc0:	440a      	add	r2, r1
   1bcc2:	3208      	adds	r2, #8
   1bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bcc8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
   1bccc:	489d      	ldr	r0, [pc, #628]	; (1bf44 <sbc_calculate_bits_internal+0x7b0>)
   1bcce:	0091      	lsls	r1, r2, #2
   1bcd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bcd2:	440a      	add	r2, r1
   1bcd4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1bcd8:	1a9b      	subs	r3, r3, r2
   1bcda:	673b      	str	r3, [r7, #112]	; 0x70
   1bcdc:	e011      	b.n	1bd02 <sbc_calculate_bits_internal+0x56e>
						else
							loudness = frame->scale_factor[ch][sb] - sbc_offset8[sf][sb];
   1bcde:	68fb      	ldr	r3, [r7, #12]
   1bce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   1bce2:	00d1      	lsls	r1, r2, #3
   1bce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bce6:	440a      	add	r2, r1
   1bce8:	3208      	adds	r2, #8
   1bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bcee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
   1bcf2:	4895      	ldr	r0, [pc, #596]	; (1bf48 <sbc_calculate_bits_internal+0x7b4>)
   1bcf4:	00d1      	lsls	r1, r2, #3
   1bcf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bcf8:	440a      	add	r2, r1
   1bcfa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1bcfe:	1a9b      	subs	r3, r3, r2
   1bd00:	673b      	str	r3, [r7, #112]	; 0x70
						if (loudness > 0)
   1bd02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	dd0f      	ble.n	1bd28 <sbc_calculate_bits_internal+0x594>
							bitneed[ch][sb] = loudness / 2;
   1bd08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1bd0a:	0fda      	lsrs	r2, r3, #31
   1bd0c:	4413      	add	r3, r2
   1bd0e:	105b      	asrs	r3, r3, #1
   1bd10:	4619      	mov	r1, r3
   1bd12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd14:	00da      	lsls	r2, r3, #3
   1bd16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bd18:	4413      	add	r3, r2
   1bd1a:	009b      	lsls	r3, r3, #2
   1bd1c:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bd20:	4413      	add	r3, r2
   1bd22:	f843 1c7c 	str.w	r1, [r3, #-124]
   1bd26:	e00a      	b.n	1bd3e <sbc_calculate_bits_internal+0x5aa>
						else
							bitneed[ch][sb] = loudness;
   1bd28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd2a:	00da      	lsls	r2, r3, #3
   1bd2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bd2e:	4413      	add	r3, r2
   1bd30:	009b      	lsls	r3, r3, #2
   1bd32:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bd36:	4413      	add	r3, r2
   1bd38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1bd3a:	f843 2c7c 	str.w	r2, [r3, #-124]
					}
					if (bitneed[ch][sb] > max_bitneed)
   1bd3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd40:	00da      	lsls	r2, r3, #3
   1bd42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bd44:	4413      	add	r3, r2
   1bd46:	009b      	lsls	r3, r3, #2
   1bd48:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bd4c:	4413      	add	r3, r2
   1bd4e:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bd52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1bd54:	429a      	cmp	r2, r3
   1bd56:	dd0a      	ble.n	1bd6e <sbc_calculate_bits_internal+0x5da>
						max_bitneed = bitneed[ch][sb];
   1bd58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd5a:	00da      	lsls	r2, r3, #3
   1bd5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bd5e:	4413      	add	r3, r2
   1bd60:	009b      	lsls	r3, r3, #2
   1bd62:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bd66:	4413      	add	r3, r2
   1bd68:	f853 3c7c 	ldr.w	r3, [r3, #-124]
   1bd6c:	66fb      	str	r3, [r7, #108]	; 0x6c
				for (sb = 0; sb < subbands; sb++) {
   1bd6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bd70:	3301      	adds	r3, #1
   1bd72:	65bb      	str	r3, [r7, #88]	; 0x58
   1bd74:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bd76:	687b      	ldr	r3, [r7, #4]
   1bd78:	429a      	cmp	r2, r3
   1bd7a:	db83      	blt.n	1bc84 <sbc_calculate_bits_internal+0x4f0>
			for (ch = 0; ch < 2; ch++) {
   1bd7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd7e:	3301      	adds	r3, #1
   1bd80:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bd82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bd84:	2b01      	cmp	r3, #1
   1bd86:	f77f af7a 	ble.w	1bc7e <sbc_calculate_bits_internal+0x4ea>
				}
			}
		}

		bitcount = 0;
   1bd8a:	2300      	movs	r3, #0
   1bd8c:	66bb      	str	r3, [r7, #104]	; 0x68
		slicecount = 0;
   1bd8e:	2300      	movs	r3, #0
   1bd90:	667b      	str	r3, [r7, #100]	; 0x64
		bitslice = max_bitneed + 1;
   1bd92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1bd94:	3301      	adds	r3, #1
   1bd96:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			bitslice--;
   1bd98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1bd9a:	3b01      	subs	r3, #1
   1bd9c:	663b      	str	r3, [r7, #96]	; 0x60
			bitcount += slicecount;
   1bd9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1bda0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1bda2:	4413      	add	r3, r2
   1bda4:	66bb      	str	r3, [r7, #104]	; 0x68
			slicecount = 0;
   1bda6:	2300      	movs	r3, #0
   1bda8:	667b      	str	r3, [r7, #100]	; 0x64
			for (ch = 0; ch < 2; ch++) {
   1bdaa:	2300      	movs	r3, #0
   1bdac:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bdae:	e03d      	b.n	1be2c <sbc_calculate_bits_internal+0x698>
				for (sb = 0; sb < subbands; sb++) {
   1bdb0:	2300      	movs	r3, #0
   1bdb2:	65bb      	str	r3, [r7, #88]	; 0x58
   1bdb4:	e033      	b.n	1be1e <sbc_calculate_bits_internal+0x68a>
					if ((bitneed[ch][sb] > bitslice + 1) && (bitneed[ch][sb] < bitslice + 16))
   1bdb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bdb8:	00da      	lsls	r2, r3, #3
   1bdba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bdbc:	4413      	add	r3, r2
   1bdbe:	009b      	lsls	r3, r3, #2
   1bdc0:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bdc4:	4413      	add	r3, r2
   1bdc6:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bdca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1bdcc:	3301      	adds	r3, #1
   1bdce:	429a      	cmp	r2, r3
   1bdd0:	dd11      	ble.n	1bdf6 <sbc_calculate_bits_internal+0x662>
   1bdd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bdd4:	00da      	lsls	r2, r3, #3
   1bdd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bdd8:	4413      	add	r3, r2
   1bdda:	009b      	lsls	r3, r3, #2
   1bddc:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bde0:	4413      	add	r3, r2
   1bde2:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bde6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1bde8:	3310      	adds	r3, #16
   1bdea:	429a      	cmp	r2, r3
   1bdec:	da03      	bge.n	1bdf6 <sbc_calculate_bits_internal+0x662>
						slicecount++;
   1bdee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1bdf0:	3301      	adds	r3, #1
   1bdf2:	667b      	str	r3, [r7, #100]	; 0x64
   1bdf4:	e010      	b.n	1be18 <sbc_calculate_bits_internal+0x684>
					else if (bitneed[ch][sb] == bitslice + 1)
   1bdf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bdf8:	00da      	lsls	r2, r3, #3
   1bdfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bdfc:	4413      	add	r3, r2
   1bdfe:	009b      	lsls	r3, r3, #2
   1be00:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1be04:	4413      	add	r3, r2
   1be06:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1be0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1be0c:	3301      	adds	r3, #1
   1be0e:	429a      	cmp	r2, r3
   1be10:	d102      	bne.n	1be18 <sbc_calculate_bits_internal+0x684>
						slicecount += 2;
   1be12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1be14:	3302      	adds	r3, #2
   1be16:	667b      	str	r3, [r7, #100]	; 0x64
				for (sb = 0; sb < subbands; sb++) {
   1be18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1be1a:	3301      	adds	r3, #1
   1be1c:	65bb      	str	r3, [r7, #88]	; 0x58
   1be1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1be20:	687b      	ldr	r3, [r7, #4]
   1be22:	429a      	cmp	r2, r3
   1be24:	dbc7      	blt.n	1bdb6 <sbc_calculate_bits_internal+0x622>
			for (ch = 0; ch < 2; ch++) {
   1be26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1be28:	3301      	adds	r3, #1
   1be2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1be2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1be2e:	2b01      	cmp	r3, #1
   1be30:	ddbe      	ble.n	1bdb0 <sbc_calculate_bits_internal+0x61c>
				}
			}
		} while (bitcount + slicecount < frame->bitpool);
   1be32:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1be34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1be36:	4413      	add	r3, r2
   1be38:	68fa      	ldr	r2, [r7, #12]
   1be3a:	7c92      	ldrb	r2, [r2, #18]
   1be3c:	4293      	cmp	r3, r2
   1be3e:	dbab      	blt.n	1bd98 <sbc_calculate_bits_internal+0x604>

		if (bitcount + slicecount == frame->bitpool) {
   1be40:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1be42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1be44:	4413      	add	r3, r2
   1be46:	68fa      	ldr	r2, [r7, #12]
   1be48:	7c92      	ldrb	r2, [r2, #18]
   1be4a:	4293      	cmp	r3, r2
   1be4c:	d106      	bne.n	1be5c <sbc_calculate_bits_internal+0x6c8>
			bitcount += slicecount;
   1be4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1be50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1be52:	4413      	add	r3, r2
   1be54:	66bb      	str	r3, [r7, #104]	; 0x68
			bitslice--;
   1be56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1be58:	3b01      	subs	r3, #1
   1be5a:	663b      	str	r3, [r7, #96]	; 0x60
		}

		for (ch = 0; ch < 2; ch++) {
   1be5c:	2300      	movs	r3, #0
   1be5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   1be60:	e047      	b.n	1bef2 <sbc_calculate_bits_internal+0x75e>
			for (sb = 0; sb < subbands; sb++) {
   1be62:	2300      	movs	r3, #0
   1be64:	65bb      	str	r3, [r7, #88]	; 0x58
   1be66:	e03d      	b.n	1bee4 <sbc_calculate_bits_internal+0x750>
				if (bitneed[ch][sb] < bitslice + 2) {
   1be68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1be6a:	00da      	lsls	r2, r3, #3
   1be6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1be6e:	4413      	add	r3, r2
   1be70:	009b      	lsls	r3, r3, #2
   1be72:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1be76:	4413      	add	r3, r2
   1be78:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1be7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1be7e:	3302      	adds	r3, #2
   1be80:	429a      	cmp	r2, r3
   1be82:	da08      	bge.n	1be96 <sbc_calculate_bits_internal+0x702>
					bits[ch][sb] = 0;
   1be84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1be86:	015b      	lsls	r3, r3, #5
   1be88:	68ba      	ldr	r2, [r7, #8]
   1be8a:	4413      	add	r3, r2
   1be8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1be8e:	2100      	movs	r1, #0
   1be90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1be94:	e023      	b.n	1bede <sbc_calculate_bits_internal+0x74a>
				} else {
					bits[ch][sb] = bitneed[ch][sb] - bitslice;
   1be96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1be98:	015b      	lsls	r3, r3, #5
   1be9a:	68ba      	ldr	r2, [r7, #8]
   1be9c:	441a      	add	r2, r3
   1be9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bea0:	00d9      	lsls	r1, r3, #3
   1bea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bea4:	440b      	add	r3, r1
   1bea6:	009b      	lsls	r3, r3, #2
   1bea8:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1beac:	440b      	add	r3, r1
   1beae:	f853 1c7c 	ldr.w	r1, [r3, #-124]
   1beb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1beb4:	1ac9      	subs	r1, r1, r3
   1beb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1beb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (bits[ch][sb] > 16)
   1bebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bebe:	015b      	lsls	r3, r3, #5
   1bec0:	68ba      	ldr	r2, [r7, #8]
   1bec2:	4413      	add	r3, r2
   1bec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1beca:	2b10      	cmp	r3, #16
   1becc:	dd07      	ble.n	1bede <sbc_calculate_bits_internal+0x74a>
						bits[ch][sb] = 16;
   1bece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bed0:	015b      	lsls	r3, r3, #5
   1bed2:	68ba      	ldr	r2, [r7, #8]
   1bed4:	4413      	add	r3, r2
   1bed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bed8:	2110      	movs	r1, #16
   1beda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (sb = 0; sb < subbands; sb++) {
   1bede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bee0:	3301      	adds	r3, #1
   1bee2:	65bb      	str	r3, [r7, #88]	; 0x58
   1bee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bee6:	687b      	ldr	r3, [r7, #4]
   1bee8:	429a      	cmp	r2, r3
   1beea:	dbbd      	blt.n	1be68 <sbc_calculate_bits_internal+0x6d4>
		for (ch = 0; ch < 2; ch++) {
   1beec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1beee:	3301      	adds	r3, #1
   1bef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   1bef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bef4:	2b01      	cmp	r3, #1
   1bef6:	ddb4      	ble.n	1be62 <sbc_calculate_bits_internal+0x6ce>
				}
			}
		}

		ch = 0;
   1bef8:	2300      	movs	r3, #0
   1befa:	65fb      	str	r3, [r7, #92]	; 0x5c
		sb = 0;
   1befc:	2300      	movs	r3, #0
   1befe:	65bb      	str	r3, [r7, #88]	; 0x58
		while (bitcount < frame->bitpool) {
   1bf00:	e053      	b.n	1bfaa <sbc_calculate_bits_internal+0x816>
			if ((bits[ch][sb] >= 2) && (bits[ch][sb] < 16)) {
   1bf02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf04:	015b      	lsls	r3, r3, #5
   1bf06:	68ba      	ldr	r2, [r7, #8]
   1bf08:	4413      	add	r3, r2
   1bf0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bf10:	2b01      	cmp	r3, #1
   1bf12:	dd1b      	ble.n	1bf4c <sbc_calculate_bits_internal+0x7b8>
   1bf14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf16:	015b      	lsls	r3, r3, #5
   1bf18:	68ba      	ldr	r2, [r7, #8]
   1bf1a:	4413      	add	r3, r2
   1bf1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bf22:	2b0f      	cmp	r3, #15
   1bf24:	dc12      	bgt.n	1bf4c <sbc_calculate_bits_internal+0x7b8>
				bits[ch][sb]++;
   1bf26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf28:	015b      	lsls	r3, r3, #5
   1bf2a:	68ba      	ldr	r2, [r7, #8]
   1bf2c:	4413      	add	r3, r2
   1bf2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1bf34:	1c51      	adds	r1, r2, #1
   1bf36:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bitcount++;
   1bf3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1bf3e:	3301      	adds	r3, #1
   1bf40:	66bb      	str	r3, [r7, #104]	; 0x68
   1bf42:	e023      	b.n	1bf8c <sbc_calculate_bits_internal+0x7f8>
   1bf44:	0003cca0 	.word	0x0003cca0
   1bf48:	0003cce0 	.word	0x0003cce0
			} else if ((bitneed[ch][sb] == bitslice + 1) && (frame->bitpool > bitcount + 1)) {
   1bf4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf4e:	00da      	lsls	r2, r3, #3
   1bf50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bf52:	4413      	add	r3, r2
   1bf54:	009b      	lsls	r3, r3, #2
   1bf56:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1bf5a:	4413      	add	r3, r2
   1bf5c:	f853 2c7c 	ldr.w	r2, [r3, #-124]
   1bf60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1bf62:	3301      	adds	r3, #1
   1bf64:	429a      	cmp	r2, r3
   1bf66:	d111      	bne.n	1bf8c <sbc_calculate_bits_internal+0x7f8>
   1bf68:	68fb      	ldr	r3, [r7, #12]
   1bf6a:	7c9b      	ldrb	r3, [r3, #18]
   1bf6c:	461a      	mov	r2, r3
   1bf6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1bf70:	3301      	adds	r3, #1
   1bf72:	429a      	cmp	r2, r3
   1bf74:	dd0a      	ble.n	1bf8c <sbc_calculate_bits_internal+0x7f8>
				bits[ch][sb] = 2;
   1bf76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf78:	015b      	lsls	r3, r3, #5
   1bf7a:	68ba      	ldr	r2, [r7, #8]
   1bf7c:	4413      	add	r3, r2
   1bf7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf80:	2102      	movs	r1, #2
   1bf82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bitcount += 2;
   1bf86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1bf88:	3302      	adds	r3, #2
   1bf8a:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			if (ch == 1) {
   1bf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bf8e:	2b01      	cmp	r3, #1
   1bf90:	d109      	bne.n	1bfa6 <sbc_calculate_bits_internal+0x812>
				ch = 0;
   1bf92:	2300      	movs	r3, #0
   1bf94:	65fb      	str	r3, [r7, #92]	; 0x5c
				sb++;
   1bf96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bf98:	3301      	adds	r3, #1
   1bf9a:	65bb      	str	r3, [r7, #88]	; 0x58
				if (sb >= subbands)
   1bf9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bf9e:	687b      	ldr	r3, [r7, #4]
   1bfa0:	429a      	cmp	r2, r3
   1bfa2:	db02      	blt.n	1bfaa <sbc_calculate_bits_internal+0x816>
					break;
   1bfa4:	e007      	b.n	1bfb6 <sbc_calculate_bits_internal+0x822>
			} else
				ch = 1;
   1bfa6:	2301      	movs	r3, #1
   1bfa8:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (bitcount < frame->bitpool) {
   1bfaa:	68fb      	ldr	r3, [r7, #12]
   1bfac:	7c9b      	ldrb	r3, [r3, #18]
   1bfae:	461a      	mov	r2, r3
   1bfb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1bfb2:	429a      	cmp	r2, r3
   1bfb4:	dca5      	bgt.n	1bf02 <sbc_calculate_bits_internal+0x76e>
		}

		ch = 0;
   1bfb6:	2300      	movs	r3, #0
   1bfb8:	65fb      	str	r3, [r7, #92]	; 0x5c
		sb = 0;
   1bfba:	2300      	movs	r3, #0
   1bfbc:	65bb      	str	r3, [r7, #88]	; 0x58
		while (bitcount < frame->bitpool) {
   1bfbe:	e025      	b.n	1c00c <sbc_calculate_bits_internal+0x878>
			if (bits[ch][sb] < 16) {
   1bfc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bfc2:	015b      	lsls	r3, r3, #5
   1bfc4:	68ba      	ldr	r2, [r7, #8]
   1bfc6:	4413      	add	r3, r2
   1bfc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1bfce:	2b0f      	cmp	r3, #15
   1bfd0:	dc0d      	bgt.n	1bfee <sbc_calculate_bits_internal+0x85a>
				bits[ch][sb]++;
   1bfd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bfd4:	015b      	lsls	r3, r3, #5
   1bfd6:	68ba      	ldr	r2, [r7, #8]
   1bfd8:	4413      	add	r3, r2
   1bfda:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bfdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1bfe0:	1c51      	adds	r1, r2, #1
   1bfe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1bfe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bitcount++;
   1bfe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1bfea:	3301      	adds	r3, #1
   1bfec:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			if (ch == 1) {
   1bfee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1bff0:	2b01      	cmp	r3, #1
   1bff2:	d109      	bne.n	1c008 <sbc_calculate_bits_internal+0x874>
				ch = 0;
   1bff4:	2300      	movs	r3, #0
   1bff6:	65fb      	str	r3, [r7, #92]	; 0x5c
				sb++;
   1bff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1bffa:	3301      	adds	r3, #1
   1bffc:	65bb      	str	r3, [r7, #88]	; 0x58
				if (sb >= subbands)
   1bffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1c000:	687b      	ldr	r3, [r7, #4]
   1c002:	429a      	cmp	r2, r3
   1c004:	db02      	blt.n	1c00c <sbc_calculate_bits_internal+0x878>
					break;
   1c006:	e008      	b.n	1c01a <sbc_calculate_bits_internal+0x886>
			} else
				ch = 1;
   1c008:	2301      	movs	r3, #1
   1c00a:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (bitcount < frame->bitpool) {
   1c00c:	68fb      	ldr	r3, [r7, #12]
   1c00e:	7c9b      	ldrb	r3, [r3, #18]
   1c010:	461a      	mov	r2, r3
   1c012:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1c014:	429a      	cmp	r2, r3
   1c016:	dcd3      	bgt.n	1bfc0 <sbc_calculate_bits_internal+0x82c>
		}

	}

}
   1c018:	e7ff      	b.n	1c01a <sbc_calculate_bits_internal+0x886>
   1c01a:	bf00      	nop
   1c01c:	3794      	adds	r7, #148	; 0x94
   1c01e:	46bd      	mov	sp, r7
   1c020:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c024:	4770      	bx	lr
   1c026:	bf00      	nop

0001c028 <sbc_calculate_bits>:

static void sbc_calculate_bits(const struct sbc_frame *frame, int (*bits)[8])
{
   1c028:	b580      	push	{r7, lr}
   1c02a:	b082      	sub	sp, #8
   1c02c:	af00      	add	r7, sp, #0
   1c02e:	6078      	str	r0, [r7, #4]
   1c030:	6039      	str	r1, [r7, #0]
	if (frame->subbands == 4)
   1c032:	687b      	ldr	r3, [r7, #4]
   1c034:	7c5b      	ldrb	r3, [r3, #17]
   1c036:	2b04      	cmp	r3, #4
   1c038:	d105      	bne.n	1c046 <sbc_calculate_bits+0x1e>
		sbc_calculate_bits_internal(frame, bits, 4);
   1c03a:	2204      	movs	r2, #4
   1c03c:	6839      	ldr	r1, [r7, #0]
   1c03e:	6878      	ldr	r0, [r7, #4]
   1c040:	f7ff fba8 	bl	1b794 <sbc_calculate_bits_internal>
	else
		sbc_calculate_bits_internal(frame, bits, 8);
}
   1c044:	e004      	b.n	1c050 <sbc_calculate_bits+0x28>
		sbc_calculate_bits_internal(frame, bits, 8);
   1c046:	2208      	movs	r2, #8
   1c048:	6839      	ldr	r1, [r7, #0]
   1c04a:	6878      	ldr	r0, [r7, #4]
   1c04c:	f7ff fba2 	bl	1b794 <sbc_calculate_bits_internal>
}
   1c050:	bf00      	nop
   1c052:	3708      	adds	r7, #8
   1c054:	46bd      	mov	sp, r7
   1c056:	bd80      	pop	{r7, pc}

0001c058 <sbc_unpack_frame_internal>:
 *  -3   CRC8 incorrect
 *  -4   Bitpool value out of bounds
 */
static int sbc_unpack_frame_internal(const uint8_t *data,
		struct sbc_frame *frame, size_t len)
{
   1c058:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c05a:	b0b1      	sub	sp, #196	; 0xc4
   1c05c:	af00      	add	r7, sp, #0
   1c05e:	60f8      	str	r0, [r7, #12]
   1c060:	60b9      	str	r1, [r7, #8]
   1c062:	607a      	str	r2, [r7, #4]
	unsigned int consumed;
	/* Will copy the parts of the header that are relevant to crc
	 * calculation here */
	uint8_t crc_header[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   1c064:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1c068:	2200      	movs	r2, #0
   1c06a:	601a      	str	r2, [r3, #0]
   1c06c:	605a      	str	r2, [r3, #4]
   1c06e:	f8c3 2007 	str.w	r2, [r3, #7]
	int crc_pos = 0;
   1c072:	2300      	movs	r3, #0
   1c074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	int ch, sb, blk, bit;	/* channel, subband, block and bit standard
				   counters */
	int bits[2][8];		/* bits distribution */
	uint32_t levels[2][8];	/* levels derived from that */

	consumed = 32;
   1c078:	2320      	movs	r3, #32
   1c07a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	crc_header[0] = data[1];
   1c07e:	68fb      	ldr	r3, [r7, #12]
   1c080:	785b      	ldrb	r3, [r3, #1]
   1c082:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
	crc_header[1] = data[2];
   1c086:	68fb      	ldr	r3, [r7, #12]
   1c088:	789b      	ldrb	r3, [r3, #2]
   1c08a:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
	crc_pos = 16;
   1c08e:	2310      	movs	r3, #16
   1c090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	if (frame->mode == JOINT_STEREO) {
   1c094:	68bb      	ldr	r3, [r7, #8]
   1c096:	685b      	ldr	r3, [r3, #4]
   1c098:	2b03      	cmp	r3, #3
   1c09a:	d16d      	bne.n	1c178 <sbc_unpack_frame_internal+0x120>
		if (len * 8 < consumed + frame->subbands)
   1c09c:	687b      	ldr	r3, [r7, #4]
   1c09e:	00da      	lsls	r2, r3, #3
   1c0a0:	68bb      	ldr	r3, [r7, #8]
   1c0a2:	7c5b      	ldrb	r3, [r3, #17]
   1c0a4:	4619      	mov	r1, r3
   1c0a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c0aa:	440b      	add	r3, r1
   1c0ac:	429a      	cmp	r2, r3
   1c0ae:	d202      	bcs.n	1c0b6 <sbc_unpack_frame_internal+0x5e>
			return -1;
   1c0b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c0b4:	e2b8      	b.n	1c628 <sbc_unpack_frame_internal+0x5d0>

		frame->joint = 0x00;
   1c0b6:	68bb      	ldr	r3, [r7, #8]
   1c0b8:	2200      	movs	r2, #0
   1c0ba:	761a      	strb	r2, [r3, #24]
		for (sb = 0; sb < frame->subbands - 1; sb++)
   1c0bc:	2300      	movs	r3, #0
   1c0be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c0c2:	e01d      	b.n	1c100 <sbc_unpack_frame_internal+0xa8>
			frame->joint |= ((data[4] >> (7 - sb)) & 0x01) << sb;
   1c0c4:	68bb      	ldr	r3, [r7, #8]
   1c0c6:	7e1b      	ldrb	r3, [r3, #24]
   1c0c8:	b25a      	sxtb	r2, r3
   1c0ca:	68fb      	ldr	r3, [r7, #12]
   1c0cc:	3304      	adds	r3, #4
   1c0ce:	781b      	ldrb	r3, [r3, #0]
   1c0d0:	4619      	mov	r1, r3
   1c0d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c0d6:	f1c3 0307 	rsb	r3, r3, #7
   1c0da:	fa41 f303 	asr.w	r3, r1, r3
   1c0de:	f003 0101 	and.w	r1, r3, #1
   1c0e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c0e6:	fa01 f303 	lsl.w	r3, r1, r3
   1c0ea:	b25b      	sxtb	r3, r3
   1c0ec:	4313      	orrs	r3, r2
   1c0ee:	b25b      	sxtb	r3, r3
   1c0f0:	b2da      	uxtb	r2, r3
   1c0f2:	68bb      	ldr	r3, [r7, #8]
   1c0f4:	761a      	strb	r2, [r3, #24]
		for (sb = 0; sb < frame->subbands - 1; sb++)
   1c0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c0fa:	3301      	adds	r3, #1
   1c0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c100:	68bb      	ldr	r3, [r7, #8]
   1c102:	7c5b      	ldrb	r3, [r3, #17]
   1c104:	1e5a      	subs	r2, r3, #1
   1c106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c10a:	429a      	cmp	r2, r3
   1c10c:	dcda      	bgt.n	1c0c4 <sbc_unpack_frame_internal+0x6c>
		if (frame->subbands == 4)
   1c10e:	68bb      	ldr	r3, [r7, #8]
   1c110:	7c5b      	ldrb	r3, [r3, #17]
   1c112:	2b04      	cmp	r3, #4
   1c114:	d112      	bne.n	1c13c <sbc_unpack_frame_internal+0xe4>
			crc_header[crc_pos / 8] = data[4] & 0xf0;
   1c116:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1c11a:	2b00      	cmp	r3, #0
   1c11c:	da00      	bge.n	1c120 <sbc_unpack_frame_internal+0xc8>
   1c11e:	3307      	adds	r3, #7
   1c120:	10db      	asrs	r3, r3, #3
   1c122:	4619      	mov	r1, r3
   1c124:	68fb      	ldr	r3, [r7, #12]
   1c126:	3304      	adds	r3, #4
   1c128:	781b      	ldrb	r3, [r3, #0]
   1c12a:	f023 030f 	bic.w	r3, r3, #15
   1c12e:	b2da      	uxtb	r2, r3
   1c130:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1c134:	440b      	add	r3, r1
   1c136:	f803 2c30 	strb.w	r2, [r3, #-48]
   1c13a:	e00d      	b.n	1c158 <sbc_unpack_frame_internal+0x100>
		else
			crc_header[crc_pos / 8] = data[4];
   1c13c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1c140:	2b00      	cmp	r3, #0
   1c142:	da00      	bge.n	1c146 <sbc_unpack_frame_internal+0xee>
   1c144:	3307      	adds	r3, #7
   1c146:	10db      	asrs	r3, r3, #3
   1c148:	4619      	mov	r1, r3
   1c14a:	68fb      	ldr	r3, [r7, #12]
   1c14c:	791a      	ldrb	r2, [r3, #4]
   1c14e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1c152:	440b      	add	r3, r1
   1c154:	f803 2c30 	strb.w	r2, [r3, #-48]

		consumed += frame->subbands;
   1c158:	68bb      	ldr	r3, [r7, #8]
   1c15a:	7c5b      	ldrb	r3, [r3, #17]
   1c15c:	461a      	mov	r2, r3
   1c15e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c162:	4413      	add	r3, r2
   1c164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		crc_pos += frame->subbands;
   1c168:	68bb      	ldr	r3, [r7, #8]
   1c16a:	7c5b      	ldrb	r3, [r3, #17]
   1c16c:	461a      	mov	r2, r3
   1c16e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1c172:	4413      	add	r3, r2
   1c174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	}

	if (len * 8 < consumed + (4 * frame->subbands * frame->channels))
   1c178:	687b      	ldr	r3, [r7, #4]
   1c17a:	00da      	lsls	r2, r3, #3
   1c17c:	68bb      	ldr	r3, [r7, #8]
   1c17e:	7c5b      	ldrb	r3, [r3, #17]
   1c180:	009b      	lsls	r3, r3, #2
   1c182:	68b9      	ldr	r1, [r7, #8]
   1c184:	7a09      	ldrb	r1, [r1, #8]
   1c186:	fb01 f303 	mul.w	r3, r1, r3
   1c18a:	4619      	mov	r1, r3
   1c18c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c190:	440b      	add	r3, r1
   1c192:	429a      	cmp	r2, r3
   1c194:	d202      	bcs.n	1c19c <sbc_unpack_frame_internal+0x144>
		return -1;
   1c196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c19a:	e245      	b.n	1c628 <sbc_unpack_frame_internal+0x5d0>

	for (ch = 0; ch < frame->channels; ch++) {
   1c19c:	2300      	movs	r3, #0
   1c19e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c1a2:	e05e      	b.n	1c262 <sbc_unpack_frame_internal+0x20a>
		for (sb = 0; sb < frame->subbands; sb++) {
   1c1a4:	2300      	movs	r3, #0
   1c1a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c1aa:	e04e      	b.n	1c24a <sbc_unpack_frame_internal+0x1f2>
			/* FIXME assert(consumed % 4 == 0); */
			frame->scale_factor[ch][sb] =
				(data[consumed >> 3] >> (4 - (consumed & 0x7))) & 0x0F;
   1c1ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c1b0:	08db      	lsrs	r3, r3, #3
   1c1b2:	68fa      	ldr	r2, [r7, #12]
   1c1b4:	4413      	add	r3, r2
   1c1b6:	781b      	ldrb	r3, [r3, #0]
   1c1b8:	461a      	mov	r2, r3
   1c1ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c1be:	f003 0307 	and.w	r3, r3, #7
   1c1c2:	f1c3 0304 	rsb	r3, r3, #4
   1c1c6:	fa42 f303 	asr.w	r3, r2, r3
   1c1ca:	f003 010f 	and.w	r1, r3, #15
			frame->scale_factor[ch][sb] =
   1c1ce:	68bb      	ldr	r3, [r7, #8]
   1c1d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1c1d4:	00d0      	lsls	r0, r2, #3
   1c1d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c1da:	4402      	add	r2, r0
   1c1dc:	3208      	adds	r2, #8
   1c1de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			crc_header[crc_pos >> 3] |=
   1c1e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1c1e6:	10db      	asrs	r3, r3, #3
   1c1e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   1c1ec:	10d2      	asrs	r2, r2, #3
   1c1ee:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   1c1f2:	440a      	add	r2, r1
   1c1f4:	f812 1c30 	ldrb.w	r1, [r2, #-48]
				frame->scale_factor[ch][sb] << (4 - (crc_pos & 0x7));
   1c1f8:	68ba      	ldr	r2, [r7, #8]
   1c1fa:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
   1c1fe:	00c6      	lsls	r6, r0, #3
   1c200:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
   1c204:	4430      	add	r0, r6
   1c206:	3008      	adds	r0, #8
   1c208:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1c20c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   1c210:	f002 0207 	and.w	r2, r2, #7
   1c214:	f1c2 0204 	rsb	r2, r2, #4
   1c218:	fa00 f202 	lsl.w	r2, r0, r2
			crc_header[crc_pos >> 3] |=
   1c21c:	b2d2      	uxtb	r2, r2
   1c21e:	430a      	orrs	r2, r1
   1c220:	b2d2      	uxtb	r2, r2
   1c222:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   1c226:	440b      	add	r3, r1
   1c228:	f803 2c30 	strb.w	r2, [r3, #-48]

			consumed += 4;
   1c22c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c230:	3304      	adds	r3, #4
   1c232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			crc_pos += 4;
   1c236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1c23a:	3304      	adds	r3, #4
   1c23c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		for (sb = 0; sb < frame->subbands; sb++) {
   1c240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c244:	3301      	adds	r3, #1
   1c246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c24a:	68bb      	ldr	r3, [r7, #8]
   1c24c:	7c5b      	ldrb	r3, [r3, #17]
   1c24e:	461a      	mov	r2, r3
   1c250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c254:	429a      	cmp	r2, r3
   1c256:	dca9      	bgt.n	1c1ac <sbc_unpack_frame_internal+0x154>
	for (ch = 0; ch < frame->channels; ch++) {
   1c258:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c25c:	3301      	adds	r3, #1
   1c25e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c262:	68bb      	ldr	r3, [r7, #8]
   1c264:	7a1b      	ldrb	r3, [r3, #8]
   1c266:	461a      	mov	r2, r3
   1c268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c26c:	429a      	cmp	r2, r3
   1c26e:	dc99      	bgt.n	1c1a4 <sbc_unpack_frame_internal+0x14c>
		}
	}

	if (data[3] != sbc_crc8(crc_header, crc_pos))
   1c270:	68fb      	ldr	r3, [r7, #12]
   1c272:	3303      	adds	r3, #3
   1c274:	781e      	ldrb	r6, [r3, #0]
   1c276:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   1c27a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1c27e:	4611      	mov	r1, r2
   1c280:	4618      	mov	r0, r3
   1c282:	f7ff fa3b 	bl	1b6fc <sbc_crc8>
   1c286:	4603      	mov	r3, r0
   1c288:	429e      	cmp	r6, r3
   1c28a:	d002      	beq.n	1c292 <sbc_unpack_frame_internal+0x23a>
		return -3;
   1c28c:	f06f 0302 	mvn.w	r3, #2
   1c290:	e1ca      	b.n	1c628 <sbc_unpack_frame_internal+0x5d0>

	sbc_calculate_bits(frame, bits);
   1c292:	f107 0350 	add.w	r3, r7, #80	; 0x50
   1c296:	4619      	mov	r1, r3
   1c298:	68b8      	ldr	r0, [r7, #8]
   1c29a:	f7ff fec5 	bl	1c028 <sbc_calculate_bits>

	for (ch = 0; ch < frame->channels; ch++) {
   1c29e:	2300      	movs	r3, #0
   1c2a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c2a4:	e031      	b.n	1c30a <sbc_unpack_frame_internal+0x2b2>
		for (sb = 0; sb < frame->subbands; sb++)
   1c2a6:	2300      	movs	r3, #0
   1c2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c2ac:	e021      	b.n	1c2f2 <sbc_unpack_frame_internal+0x29a>
			levels[ch][sb] = (1 << bits[ch][sb]) - 1;
   1c2ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c2b2:	00da      	lsls	r2, r3, #3
   1c2b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c2b8:	4413      	add	r3, r2
   1c2ba:	009b      	lsls	r3, r3, #2
   1c2bc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c2c0:	4413      	add	r3, r2
   1c2c2:	f853 3c70 	ldr.w	r3, [r3, #-112]
   1c2c6:	2201      	movs	r2, #1
   1c2c8:	fa02 f303 	lsl.w	r3, r2, r3
   1c2cc:	3b01      	subs	r3, #1
   1c2ce:	4619      	mov	r1, r3
   1c2d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c2d4:	00da      	lsls	r2, r3, #3
   1c2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c2da:	4413      	add	r3, r2
   1c2dc:	009b      	lsls	r3, r3, #2
   1c2de:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c2e2:	4413      	add	r3, r2
   1c2e4:	f843 1cb0 	str.w	r1, [r3, #-176]
		for (sb = 0; sb < frame->subbands; sb++)
   1c2e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c2ec:	3301      	adds	r3, #1
   1c2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c2f2:	68bb      	ldr	r3, [r7, #8]
   1c2f4:	7c5b      	ldrb	r3, [r3, #17]
   1c2f6:	461a      	mov	r2, r3
   1c2f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c2fc:	429a      	cmp	r2, r3
   1c2fe:	dcd6      	bgt.n	1c2ae <sbc_unpack_frame_internal+0x256>
	for (ch = 0; ch < frame->channels; ch++) {
   1c300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c304:	3301      	adds	r3, #1
   1c306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c30a:	68bb      	ldr	r3, [r7, #8]
   1c30c:	7a1b      	ldrb	r3, [r3, #8]
   1c30e:	461a      	mov	r2, r3
   1c310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c314:	429a      	cmp	r2, r3
   1c316:	dcc6      	bgt.n	1c2a6 <sbc_unpack_frame_internal+0x24e>
	}

	for (blk = 0; blk < frame->blocks; blk++) {
   1c318:	2300      	movs	r3, #0
   1c31a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1c31e:	e0f4      	b.n	1c50a <sbc_unpack_frame_internal+0x4b2>
		for (ch = 0; ch < frame->channels; ch++) {
   1c320:	2300      	movs	r3, #0
   1c322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c326:	e0e3      	b.n	1c4f0 <sbc_unpack_frame_internal+0x498>
			for (sb = 0; sb < frame->subbands; sb++) {
   1c328:	2300      	movs	r3, #0
   1c32a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c32e:	e0d2      	b.n	1c4d6 <sbc_unpack_frame_internal+0x47e>
				uint32_t shift;

				if (levels[ch][sb] == 0) {
   1c330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c334:	00da      	lsls	r2, r3, #3
   1c336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c33a:	4413      	add	r3, r2
   1c33c:	009b      	lsls	r3, r3, #2
   1c33e:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c342:	4413      	add	r3, r2
   1c344:	f853 3cb0 	ldr.w	r3, [r3, #-176]
   1c348:	2b00      	cmp	r3, #0
   1c34a:	d110      	bne.n	1c36e <sbc_unpack_frame_internal+0x316>
					frame->sb_sample[blk][ch][sb] = 0;
   1c34c:	68bb      	ldr	r3, [r7, #8]
   1c34e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c352:	0051      	lsls	r1, r2, #1
   1c354:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1c358:	440a      	add	r2, r1
   1c35a:	00d1      	lsls	r1, r2, #3
   1c35c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c360:	440a      	add	r2, r1
   1c362:	f502 728c 	add.w	r2, r2, #280	; 0x118
   1c366:	2100      	movs	r1, #0
   1c368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					continue;
   1c36c:	e0ae      	b.n	1c4cc <sbc_unpack_frame_internal+0x474>
				}

				shift = frame->scale_factor[ch][sb] +
   1c36e:	68bb      	ldr	r3, [r7, #8]
   1c370:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1c374:	00d1      	lsls	r1, r2, #3
   1c376:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c37a:	440a      	add	r2, r1
   1c37c:	3208      	adds	r2, #8
   1c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1c382:	3303      	adds	r3, #3
   1c384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						1 + SBCDEC_FIXED_EXTRA_BITS;

				audio_sample = 0;
   1c388:	2300      	movs	r3, #0
   1c38a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				for (bit = 0; bit < bits[ch][sb]; bit++) {
   1c38e:	2300      	movs	r3, #0
   1c390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1c394:	e03d      	b.n	1c412 <sbc_unpack_frame_internal+0x3ba>
					if (consumed > len * 8)
   1c396:	687b      	ldr	r3, [r7, #4]
   1c398:	00da      	lsls	r2, r3, #3
   1c39a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c39e:	429a      	cmp	r2, r3
   1c3a0:	d202      	bcs.n	1c3a8 <sbc_unpack_frame_internal+0x350>
						return -1;
   1c3a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c3a6:	e13f      	b.n	1c628 <sbc_unpack_frame_internal+0x5d0>

					if ((data[consumed >> 3] >> (7 - (consumed & 0x7))) & 0x01)
   1c3a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c3ac:	08db      	lsrs	r3, r3, #3
   1c3ae:	68fa      	ldr	r2, [r7, #12]
   1c3b0:	4413      	add	r3, r2
   1c3b2:	781b      	ldrb	r3, [r3, #0]
   1c3b4:	461a      	mov	r2, r3
   1c3b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c3ba:	43db      	mvns	r3, r3
   1c3bc:	f003 0307 	and.w	r3, r3, #7
   1c3c0:	fa42 f303 	asr.w	r3, r2, r3
   1c3c4:	f003 0301 	and.w	r3, r3, #1
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	d018      	beq.n	1c3fe <sbc_unpack_frame_internal+0x3a6>
						audio_sample |= 1 << (bits[ch][sb] - bit - 1);
   1c3cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c3d0:	00da      	lsls	r2, r3, #3
   1c3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c3d6:	4413      	add	r3, r2
   1c3d8:	009b      	lsls	r3, r3, #2
   1c3da:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c3de:	4413      	add	r3, r2
   1c3e0:	f853 2c70 	ldr.w	r2, [r3, #-112]
   1c3e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1c3e8:	1ad3      	subs	r3, r2, r3
   1c3ea:	3b01      	subs	r3, #1
   1c3ec:	2201      	movs	r2, #1
   1c3ee:	fa02 f303 	lsl.w	r3, r2, r3
   1c3f2:	461a      	mov	r2, r3
   1c3f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1c3f8:	4313      	orrs	r3, r2
   1c3fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

					consumed++;
   1c3fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c402:	3301      	adds	r3, #1
   1c404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				for (bit = 0; bit < bits[ch][sb]; bit++) {
   1c408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1c40c:	3301      	adds	r3, #1
   1c40e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1c412:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c416:	00da      	lsls	r2, r3, #3
   1c418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c41c:	4413      	add	r3, r2
   1c41e:	009b      	lsls	r3, r3, #2
   1c420:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c424:	4413      	add	r3, r2
   1c426:	f853 2c70 	ldr.w	r2, [r3, #-112]
   1c42a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1c42e:	429a      	cmp	r2, r3
   1c430:	dcb1      	bgt.n	1c396 <sbc_unpack_frame_internal+0x33e>
				}

				frame->sb_sample[blk][ch][sb] = (int32_t)
					(((((uint64_t) audio_sample << 1) | 1) << shift) /
   1c432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1c436:	461a      	mov	r2, r3
   1c438:	f04f 0300 	mov.w	r3, #0
   1c43c:	1892      	adds	r2, r2, r2
   1c43e:	eb43 0303 	adc.w	r3, r3, r3
   1c442:	4610      	mov	r0, r2
   1c444:	4619      	mov	r1, r3
   1c446:	f04f 0201 	mov.w	r2, #1
   1c44a:	f04f 0300 	mov.w	r3, #0
   1c44e:	ea42 0200 	orr.w	r2, r2, r0
   1c452:	ea43 0301 	orr.w	r3, r3, r1
   1c456:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   1c45a:	f1a1 0620 	sub.w	r6, r1, #32
   1c45e:	f1c1 0020 	rsb	r0, r1, #32
   1c462:	fa03 f501 	lsl.w	r5, r3, r1
   1c466:	fa02 f606 	lsl.w	r6, r2, r6
   1c46a:	4335      	orrs	r5, r6
   1c46c:	fa22 f000 	lsr.w	r0, r2, r0
   1c470:	4305      	orrs	r5, r0
   1c472:	fa02 f401 	lsl.w	r4, r2, r1
					levels[ch][sb]) - (1 << shift);
   1c476:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c47a:	00da      	lsls	r2, r3, #3
   1c47c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c480:	4413      	add	r3, r2
   1c482:	009b      	lsls	r3, r3, #2
   1c484:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
   1c488:	4413      	add	r3, r2
   1c48a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
   1c48e:	461a      	mov	r2, r3
   1c490:	f04f 0300 	mov.w	r3, #0
					(((((uint64_t) audio_sample << 1) | 1) << shift) /
   1c494:	4620      	mov	r0, r4
   1c496:	4629      	mov	r1, r5
   1c498:	f7f0 fb10 	bl	cabc <__aeabi_uldivmod>
   1c49c:	4602      	mov	r2, r0
   1c49e:	460b      	mov	r3, r1
				frame->sb_sample[blk][ch][sb] = (int32_t)
   1c4a0:	4611      	mov	r1, r2
					levels[ch][sb]) - (1 << shift);
   1c4a2:	2201      	movs	r2, #1
   1c4a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1c4a8:	fa02 f303 	lsl.w	r3, r2, r3
   1c4ac:	1ac9      	subs	r1, r1, r3
				frame->sb_sample[blk][ch][sb] = (int32_t)
   1c4ae:	68bb      	ldr	r3, [r7, #8]
   1c4b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c4b4:	0050      	lsls	r0, r2, #1
   1c4b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1c4ba:	4402      	add	r2, r0
   1c4bc:	00d0      	lsls	r0, r2, #3
   1c4be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c4c2:	4402      	add	r2, r0
   1c4c4:	f502 728c 	add.w	r2, r2, #280	; 0x118
   1c4c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (sb = 0; sb < frame->subbands; sb++) {
   1c4cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c4d0:	3301      	adds	r3, #1
   1c4d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c4d6:	68bb      	ldr	r3, [r7, #8]
   1c4d8:	7c5b      	ldrb	r3, [r3, #17]
   1c4da:	461a      	mov	r2, r3
   1c4dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c4e0:	429a      	cmp	r2, r3
   1c4e2:	f73f af25 	bgt.w	1c330 <sbc_unpack_frame_internal+0x2d8>
		for (ch = 0; ch < frame->channels; ch++) {
   1c4e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c4ea:	3301      	adds	r3, #1
   1c4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1c4f0:	68bb      	ldr	r3, [r7, #8]
   1c4f2:	7a1b      	ldrb	r3, [r3, #8]
   1c4f4:	461a      	mov	r2, r3
   1c4f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1c4fa:	429a      	cmp	r2, r3
   1c4fc:	f73f af14 	bgt.w	1c328 <sbc_unpack_frame_internal+0x2d0>
	for (blk = 0; blk < frame->blocks; blk++) {
   1c500:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1c504:	3301      	adds	r3, #1
   1c506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1c50a:	68bb      	ldr	r3, [r7, #8]
   1c50c:	789b      	ldrb	r3, [r3, #2]
   1c50e:	461a      	mov	r2, r3
   1c510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1c514:	429a      	cmp	r2, r3
   1c516:	f73f af03 	bgt.w	1c320 <sbc_unpack_frame_internal+0x2c8>
			}
		}
	}

	if (frame->mode == JOINT_STEREO) {
   1c51a:	68bb      	ldr	r3, [r7, #8]
   1c51c:	685b      	ldr	r3, [r3, #4]
   1c51e:	2b03      	cmp	r3, #3
   1c520:	d172      	bne.n	1c608 <sbc_unpack_frame_internal+0x5b0>
		for (blk = 0; blk < frame->blocks; blk++) {
   1c522:	2300      	movs	r3, #0
   1c524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1c528:	e067      	b.n	1c5fa <sbc_unpack_frame_internal+0x5a2>
			for (sb = 0; sb < frame->subbands; sb++) {
   1c52a:	2300      	movs	r3, #0
   1c52c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c530:	e057      	b.n	1c5e2 <sbc_unpack_frame_internal+0x58a>
				if (frame->joint & (0x01 << sb)) {
   1c532:	68bb      	ldr	r3, [r7, #8]
   1c534:	7e1b      	ldrb	r3, [r3, #24]
   1c536:	461a      	mov	r2, r3
   1c538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c53c:	fa42 f303 	asr.w	r3, r2, r3
   1c540:	f003 0301 	and.w	r3, r3, #1
   1c544:	2b00      	cmp	r3, #0
   1c546:	d047      	beq.n	1c5d8 <sbc_unpack_frame_internal+0x580>
					temp = frame->sb_sample[blk][0][sb] +
   1c548:	68bb      	ldr	r3, [r7, #8]
   1c54a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c54e:	0111      	lsls	r1, r2, #4
   1c550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c554:	440a      	add	r2, r1
   1c556:	f502 728c 	add.w	r2, r2, #280	; 0x118
   1c55a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
						frame->sb_sample[blk][1][sb];
   1c55e:	68bb      	ldr	r3, [r7, #8]
   1c560:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
   1c564:	0108      	lsls	r0, r1, #4
   1c566:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
   1c56a:	4401      	add	r1, r0
   1c56c:	f501 7190 	add.w	r1, r1, #288	; 0x120
   1c570:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
					temp = frame->sb_sample[blk][0][sb] +
   1c574:	4413      	add	r3, r2
   1c576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					frame->sb_sample[blk][1][sb] =
						frame->sb_sample[blk][0][sb] -
   1c57a:	68bb      	ldr	r3, [r7, #8]
   1c57c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c580:	0111      	lsls	r1, r2, #4
   1c582:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c586:	440a      	add	r2, r1
   1c588:	f502 728c 	add.w	r2, r2, #280	; 0x118
   1c58c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
						frame->sb_sample[blk][1][sb];
   1c590:	68bb      	ldr	r3, [r7, #8]
   1c592:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
   1c596:	0108      	lsls	r0, r1, #4
   1c598:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
   1c59c:	4401      	add	r1, r0
   1c59e:	f501 7190 	add.w	r1, r1, #288	; 0x120
   1c5a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
						frame->sb_sample[blk][0][sb] -
   1c5a6:	1ad1      	subs	r1, r2, r3
					frame->sb_sample[blk][1][sb] =
   1c5a8:	68bb      	ldr	r3, [r7, #8]
   1c5aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c5ae:	0110      	lsls	r0, r2, #4
   1c5b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c5b4:	4402      	add	r2, r0
   1c5b6:	f502 7290 	add.w	r2, r2, #288	; 0x120
   1c5ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					frame->sb_sample[blk][0][sb] = temp;
   1c5be:	68bb      	ldr	r3, [r7, #8]
   1c5c0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1c5c4:	0111      	lsls	r1, r2, #4
   1c5c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1c5ca:	440a      	add	r2, r1
   1c5cc:	f502 728c 	add.w	r2, r2, #280	; 0x118
   1c5d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   1c5d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (sb = 0; sb < frame->subbands; sb++) {
   1c5d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c5dc:	3301      	adds	r3, #1
   1c5de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1c5e2:	68bb      	ldr	r3, [r7, #8]
   1c5e4:	7c5b      	ldrb	r3, [r3, #17]
   1c5e6:	461a      	mov	r2, r3
   1c5e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1c5ec:	429a      	cmp	r2, r3
   1c5ee:	dca0      	bgt.n	1c532 <sbc_unpack_frame_internal+0x4da>
		for (blk = 0; blk < frame->blocks; blk++) {
   1c5f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1c5f4:	3301      	adds	r3, #1
   1c5f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1c5fa:	68bb      	ldr	r3, [r7, #8]
   1c5fc:	789b      	ldrb	r3, [r3, #2]
   1c5fe:	461a      	mov	r2, r3
   1c600:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1c604:	429a      	cmp	r2, r3
   1c606:	dc90      	bgt.n	1c52a <sbc_unpack_frame_internal+0x4d2>
				}
			}
		}
	}

	if ((consumed & 0x7) != 0)
   1c608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c60c:	f003 0307 	and.w	r3, r3, #7
   1c610:	2b00      	cmp	r3, #0
   1c612:	d006      	beq.n	1c622 <sbc_unpack_frame_internal+0x5ca>
		consumed += 8 - (consumed & 0x7);
   1c614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c618:	f023 0307 	bic.w	r3, r3, #7
   1c61c:	3308      	adds	r3, #8
   1c61e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	return consumed >> 3;
   1c622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1c626:	08db      	lsrs	r3, r3, #3
}
   1c628:	4618      	mov	r0, r3
   1c62a:	37c4      	adds	r7, #196	; 0xc4
   1c62c:	46bd      	mov	sp, r7
   1c62e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c630 <sbc_unpack_frame>:

static int sbc_unpack_frame(const uint8_t *data,
		struct sbc_frame *frame, size_t len)
{
   1c630:	b580      	push	{r7, lr}
   1c632:	b084      	sub	sp, #16
   1c634:	af00      	add	r7, sp, #0
   1c636:	60f8      	str	r0, [r7, #12]
   1c638:	60b9      	str	r1, [r7, #8]
   1c63a:	607a      	str	r2, [r7, #4]
	if (len < 4)
   1c63c:	687b      	ldr	r3, [r7, #4]
   1c63e:	2b03      	cmp	r3, #3
   1c640:	d802      	bhi.n	1c648 <sbc_unpack_frame+0x18>
		return -1;
   1c642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c646:	e09b      	b.n	1c780 <sbc_unpack_frame+0x150>

	if (data[0] != SBC_SYNCWORD)
   1c648:	68fb      	ldr	r3, [r7, #12]
   1c64a:	781b      	ldrb	r3, [r3, #0]
   1c64c:	2b9c      	cmp	r3, #156	; 0x9c
   1c64e:	d002      	beq.n	1c656 <sbc_unpack_frame+0x26>
		return -2;
   1c650:	f06f 0301 	mvn.w	r3, #1
   1c654:	e094      	b.n	1c780 <sbc_unpack_frame+0x150>

	frame->frequency = (data[1] >> 6) & 0x03;
   1c656:	68fb      	ldr	r3, [r7, #12]
   1c658:	3301      	adds	r3, #1
   1c65a:	781b      	ldrb	r3, [r3, #0]
   1c65c:	099b      	lsrs	r3, r3, #6
   1c65e:	b2da      	uxtb	r2, r3
   1c660:	68bb      	ldr	r3, [r7, #8]
   1c662:	701a      	strb	r2, [r3, #0]
	frame->block_mode = (data[1] >> 4) & 0x03;
   1c664:	68fb      	ldr	r3, [r7, #12]
   1c666:	3301      	adds	r3, #1
   1c668:	781b      	ldrb	r3, [r3, #0]
   1c66a:	091b      	lsrs	r3, r3, #4
   1c66c:	b2db      	uxtb	r3, r3
   1c66e:	f003 0303 	and.w	r3, r3, #3
   1c672:	b2da      	uxtb	r2, r3
   1c674:	68bb      	ldr	r3, [r7, #8]
   1c676:	705a      	strb	r2, [r3, #1]

	switch (frame->block_mode) {
   1c678:	68bb      	ldr	r3, [r7, #8]
   1c67a:	785b      	ldrb	r3, [r3, #1]
   1c67c:	2b03      	cmp	r3, #3
   1c67e:	d81b      	bhi.n	1c6b8 <sbc_unpack_frame+0x88>
   1c680:	a201      	add	r2, pc, #4	; (adr r2, 1c688 <sbc_unpack_frame+0x58>)
   1c682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c686:	bf00      	nop
   1c688:	0001c699 	.word	0x0001c699
   1c68c:	0001c6a1 	.word	0x0001c6a1
   1c690:	0001c6a9 	.word	0x0001c6a9
   1c694:	0001c6b1 	.word	0x0001c6b1
	case SBC_BLK_4:
		frame->blocks = 4;
   1c698:	68bb      	ldr	r3, [r7, #8]
   1c69a:	2204      	movs	r2, #4
   1c69c:	709a      	strb	r2, [r3, #2]
		break;
   1c69e:	e00b      	b.n	1c6b8 <sbc_unpack_frame+0x88>
	case SBC_BLK_8:
		frame->blocks = 8;
   1c6a0:	68bb      	ldr	r3, [r7, #8]
   1c6a2:	2208      	movs	r2, #8
   1c6a4:	709a      	strb	r2, [r3, #2]
		break;
   1c6a6:	e007      	b.n	1c6b8 <sbc_unpack_frame+0x88>
	case SBC_BLK_12:
		frame->blocks = 12;
   1c6a8:	68bb      	ldr	r3, [r7, #8]
   1c6aa:	220c      	movs	r2, #12
   1c6ac:	709a      	strb	r2, [r3, #2]
		break;
   1c6ae:	e003      	b.n	1c6b8 <sbc_unpack_frame+0x88>
	case SBC_BLK_16:
		frame->blocks = 16;
   1c6b0:	68bb      	ldr	r3, [r7, #8]
   1c6b2:	2210      	movs	r2, #16
   1c6b4:	709a      	strb	r2, [r3, #2]
		break;
   1c6b6:	bf00      	nop
	}

	frame->mode = (data[1] >> 2) & 0x03;
   1c6b8:	68fb      	ldr	r3, [r7, #12]
   1c6ba:	3301      	adds	r3, #1
   1c6bc:	781b      	ldrb	r3, [r3, #0]
   1c6be:	089b      	lsrs	r3, r3, #2
   1c6c0:	b2db      	uxtb	r3, r3
   1c6c2:	f003 0203 	and.w	r2, r3, #3
   1c6c6:	68bb      	ldr	r3, [r7, #8]
   1c6c8:	605a      	str	r2, [r3, #4]

	switch (frame->mode) {
   1c6ca:	68bb      	ldr	r3, [r7, #8]
   1c6cc:	685b      	ldr	r3, [r3, #4]
   1c6ce:	2b00      	cmp	r3, #0
   1c6d0:	d004      	beq.n	1c6dc <sbc_unpack_frame+0xac>
   1c6d2:	2b00      	cmp	r3, #0
   1c6d4:	db0a      	blt.n	1c6ec <sbc_unpack_frame+0xbc>
   1c6d6:	2b03      	cmp	r3, #3
   1c6d8:	dc08      	bgt.n	1c6ec <sbc_unpack_frame+0xbc>
   1c6da:	e003      	b.n	1c6e4 <sbc_unpack_frame+0xb4>
	case MONO:
		frame->channels = 1;
   1c6dc:	68bb      	ldr	r3, [r7, #8]
   1c6de:	2201      	movs	r2, #1
   1c6e0:	721a      	strb	r2, [r3, #8]
		break;
   1c6e2:	e003      	b.n	1c6ec <sbc_unpack_frame+0xbc>
	case DUAL_CHANNEL:	/* fall-through */
	case STEREO:
	case JOINT_STEREO:
		frame->channels = 2;
   1c6e4:	68bb      	ldr	r3, [r7, #8]
   1c6e6:	2202      	movs	r2, #2
   1c6e8:	721a      	strb	r2, [r3, #8]
		break;
   1c6ea:	bf00      	nop
	}

	frame->allocation = (data[1] >> 1) & 0x01;
   1c6ec:	68fb      	ldr	r3, [r7, #12]
   1c6ee:	3301      	adds	r3, #1
   1c6f0:	781b      	ldrb	r3, [r3, #0]
   1c6f2:	085b      	lsrs	r3, r3, #1
   1c6f4:	b2db      	uxtb	r3, r3
   1c6f6:	f003 0201 	and.w	r2, r3, #1
   1c6fa:	68bb      	ldr	r3, [r7, #8]
   1c6fc:	60da      	str	r2, [r3, #12]

	frame->subband_mode = (data[1] & 0x01);
   1c6fe:	68fb      	ldr	r3, [r7, #12]
   1c700:	3301      	adds	r3, #1
   1c702:	781b      	ldrb	r3, [r3, #0]
   1c704:	f003 0301 	and.w	r3, r3, #1
   1c708:	b2da      	uxtb	r2, r3
   1c70a:	68bb      	ldr	r3, [r7, #8]
   1c70c:	741a      	strb	r2, [r3, #16]
	frame->subbands = frame->subband_mode ? 8 : 4;
   1c70e:	68bb      	ldr	r3, [r7, #8]
   1c710:	7c1b      	ldrb	r3, [r3, #16]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d001      	beq.n	1c71a <sbc_unpack_frame+0xea>
   1c716:	2208      	movs	r2, #8
   1c718:	e000      	b.n	1c71c <sbc_unpack_frame+0xec>
   1c71a:	2204      	movs	r2, #4
   1c71c:	68bb      	ldr	r3, [r7, #8]
   1c71e:	745a      	strb	r2, [r3, #17]

	frame->bitpool = data[2];
   1c720:	68fb      	ldr	r3, [r7, #12]
   1c722:	789a      	ldrb	r2, [r3, #2]
   1c724:	68bb      	ldr	r3, [r7, #8]
   1c726:	749a      	strb	r2, [r3, #18]

	if ((frame->mode == MONO || frame->mode == DUAL_CHANNEL) &&
   1c728:	68bb      	ldr	r3, [r7, #8]
   1c72a:	685b      	ldr	r3, [r3, #4]
   1c72c:	2b00      	cmp	r3, #0
   1c72e:	d003      	beq.n	1c738 <sbc_unpack_frame+0x108>
   1c730:	68bb      	ldr	r3, [r7, #8]
   1c732:	685b      	ldr	r3, [r3, #4]
   1c734:	2b01      	cmp	r3, #1
   1c736:	d10a      	bne.n	1c74e <sbc_unpack_frame+0x11e>
			frame->bitpool > 16 * frame->subbands)
   1c738:	68bb      	ldr	r3, [r7, #8]
   1c73a:	7c9b      	ldrb	r3, [r3, #18]
   1c73c:	461a      	mov	r2, r3
   1c73e:	68bb      	ldr	r3, [r7, #8]
   1c740:	7c5b      	ldrb	r3, [r3, #17]
   1c742:	011b      	lsls	r3, r3, #4
	if ((frame->mode == MONO || frame->mode == DUAL_CHANNEL) &&
   1c744:	429a      	cmp	r2, r3
   1c746:	dd02      	ble.n	1c74e <sbc_unpack_frame+0x11e>
		return -4;
   1c748:	f06f 0303 	mvn.w	r3, #3
   1c74c:	e018      	b.n	1c780 <sbc_unpack_frame+0x150>

	if ((frame->mode == STEREO || frame->mode == JOINT_STEREO) &&
   1c74e:	68bb      	ldr	r3, [r7, #8]
   1c750:	685b      	ldr	r3, [r3, #4]
   1c752:	2b02      	cmp	r3, #2
   1c754:	d003      	beq.n	1c75e <sbc_unpack_frame+0x12e>
   1c756:	68bb      	ldr	r3, [r7, #8]
   1c758:	685b      	ldr	r3, [r3, #4]
   1c75a:	2b03      	cmp	r3, #3
   1c75c:	d10a      	bne.n	1c774 <sbc_unpack_frame+0x144>
			frame->bitpool > 32 * frame->subbands)
   1c75e:	68bb      	ldr	r3, [r7, #8]
   1c760:	7c9b      	ldrb	r3, [r3, #18]
   1c762:	461a      	mov	r2, r3
   1c764:	68bb      	ldr	r3, [r7, #8]
   1c766:	7c5b      	ldrb	r3, [r3, #17]
   1c768:	015b      	lsls	r3, r3, #5
	if ((frame->mode == STEREO || frame->mode == JOINT_STEREO) &&
   1c76a:	429a      	cmp	r2, r3
   1c76c:	dd02      	ble.n	1c774 <sbc_unpack_frame+0x144>
		return -4;
   1c76e:	f06f 0303 	mvn.w	r3, #3
   1c772:	e005      	b.n	1c780 <sbc_unpack_frame+0x150>

	return sbc_unpack_frame_internal(data, frame, len);
   1c774:	687a      	ldr	r2, [r7, #4]
   1c776:	68b9      	ldr	r1, [r7, #8]
   1c778:	68f8      	ldr	r0, [r7, #12]
   1c77a:	f7ff fc6d 	bl	1c058 <sbc_unpack_frame_internal>
   1c77e:	4603      	mov	r3, r0
}
   1c780:	4618      	mov	r0, r3
   1c782:	3710      	adds	r7, #16
   1c784:	46bd      	mov	sp, r7
   1c786:	bd80      	pop	{r7, pc}

0001c788 <msbc_unpack_frame>:

static int msbc_unpack_frame(const uint8_t *data,
		struct sbc_frame *frame, size_t len)
{
   1c788:	b580      	push	{r7, lr}
   1c78a:	b084      	sub	sp, #16
   1c78c:	af00      	add	r7, sp, #0
   1c78e:	60f8      	str	r0, [r7, #12]
   1c790:	60b9      	str	r1, [r7, #8]
   1c792:	607a      	str	r2, [r7, #4]
	if (len < 4)
   1c794:	687b      	ldr	r3, [r7, #4]
   1c796:	2b03      	cmp	r3, #3
   1c798:	d802      	bhi.n	1c7a0 <msbc_unpack_frame+0x18>
		return -1;
   1c79a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c79e:	e037      	b.n	1c810 <msbc_unpack_frame+0x88>

	if (data[0] != MSBC_SYNCWORD)
   1c7a0:	68fb      	ldr	r3, [r7, #12]
   1c7a2:	781b      	ldrb	r3, [r3, #0]
   1c7a4:	2bad      	cmp	r3, #173	; 0xad
   1c7a6:	d002      	beq.n	1c7ae <msbc_unpack_frame+0x26>
		return -2;
   1c7a8:	f06f 0301 	mvn.w	r3, #1
   1c7ac:	e030      	b.n	1c810 <msbc_unpack_frame+0x88>
	if (data[1] != 0)
   1c7ae:	68fb      	ldr	r3, [r7, #12]
   1c7b0:	3301      	adds	r3, #1
   1c7b2:	781b      	ldrb	r3, [r3, #0]
   1c7b4:	2b00      	cmp	r3, #0
   1c7b6:	d002      	beq.n	1c7be <msbc_unpack_frame+0x36>
		return -2;
   1c7b8:	f06f 0301 	mvn.w	r3, #1
   1c7bc:	e028      	b.n	1c810 <msbc_unpack_frame+0x88>
	if (data[2] != 0)
   1c7be:	68fb      	ldr	r3, [r7, #12]
   1c7c0:	3302      	adds	r3, #2
   1c7c2:	781b      	ldrb	r3, [r3, #0]
   1c7c4:	2b00      	cmp	r3, #0
   1c7c6:	d002      	beq.n	1c7ce <msbc_unpack_frame+0x46>
		return -2;
   1c7c8:	f06f 0301 	mvn.w	r3, #1
   1c7cc:	e020      	b.n	1c810 <msbc_unpack_frame+0x88>

	frame->frequency = SBC_FREQ_16000;
   1c7ce:	68bb      	ldr	r3, [r7, #8]
   1c7d0:	2200      	movs	r2, #0
   1c7d2:	701a      	strb	r2, [r3, #0]
	frame->block_mode = SBC_BLK_4;
   1c7d4:	68bb      	ldr	r3, [r7, #8]
   1c7d6:	2200      	movs	r2, #0
   1c7d8:	705a      	strb	r2, [r3, #1]
	frame->blocks = MSBC_BLOCKS;
   1c7da:	68bb      	ldr	r3, [r7, #8]
   1c7dc:	220f      	movs	r2, #15
   1c7de:	709a      	strb	r2, [r3, #2]
	frame->allocation = LOUDNESS;
   1c7e0:	68bb      	ldr	r3, [r7, #8]
   1c7e2:	2200      	movs	r2, #0
   1c7e4:	60da      	str	r2, [r3, #12]
	frame->mode = MONO;
   1c7e6:	68bb      	ldr	r3, [r7, #8]
   1c7e8:	2200      	movs	r2, #0
   1c7ea:	605a      	str	r2, [r3, #4]
	frame->channels = 1;
   1c7ec:	68bb      	ldr	r3, [r7, #8]
   1c7ee:	2201      	movs	r2, #1
   1c7f0:	721a      	strb	r2, [r3, #8]
	frame->subband_mode = 1;
   1c7f2:	68bb      	ldr	r3, [r7, #8]
   1c7f4:	2201      	movs	r2, #1
   1c7f6:	741a      	strb	r2, [r3, #16]
	frame->subbands = 8;
   1c7f8:	68bb      	ldr	r3, [r7, #8]
   1c7fa:	2208      	movs	r2, #8
   1c7fc:	745a      	strb	r2, [r3, #17]
	frame->bitpool = 26;
   1c7fe:	68bb      	ldr	r3, [r7, #8]
   1c800:	221a      	movs	r2, #26
   1c802:	749a      	strb	r2, [r3, #18]

	return sbc_unpack_frame_internal(data, frame, len);
   1c804:	687a      	ldr	r2, [r7, #4]
   1c806:	68b9      	ldr	r1, [r7, #8]
   1c808:	68f8      	ldr	r0, [r7, #12]
   1c80a:	f7ff fc25 	bl	1c058 <sbc_unpack_frame_internal>
   1c80e:	4603      	mov	r3, r0
}
   1c810:	4618      	mov	r0, r3
   1c812:	3710      	adds	r7, #16
   1c814:	46bd      	mov	sp, r7
   1c816:	bd80      	pop	{r7, pc}

0001c818 <sbc_analyze_audio>:
	}
}

static int sbc_analyze_audio(struct sbc_encoder_state *state,
						struct sbc_frame *frame)
{
   1c818:	b590      	push	{r4, r7, lr}
   1c81a:	b087      	sub	sp, #28
   1c81c:	af00      	add	r7, sp, #0
   1c81e:	6078      	str	r0, [r7, #4]
   1c820:	6039      	str	r1, [r7, #0]
	int ch, blk;
	int16_t *x;

	switch (frame->subbands) {
   1c822:	683b      	ldr	r3, [r7, #0]
   1c824:	7c5b      	ldrb	r3, [r3, #17]
   1c826:	2b04      	cmp	r3, #4
   1c828:	d002      	beq.n	1c830 <sbc_analyze_audio+0x18>
   1c82a:	2b08      	cmp	r3, #8
   1c82c:	d053      	beq.n	1c8d6 <sbc_analyze_audio+0xbe>
   1c82e:	e0a5      	b.n	1c97c <sbc_analyze_audio+0x164>
	case 4:
		for (ch = 0; ch < frame->channels; ch++) {
   1c830:	2300      	movs	r3, #0
   1c832:	617b      	str	r3, [r7, #20]
   1c834:	e045      	b.n	1c8c2 <sbc_analyze_audio+0xaa>
			x = &state->X[ch][state->position - 4 *
   1c836:	687b      	ldr	r3, [r7, #4]
   1c838:	681a      	ldr	r2, [r3, #0]
					state->increment + frame->blocks * 4];
   1c83a:	687b      	ldr	r3, [r7, #4]
   1c83c:	791b      	ldrb	r3, [r3, #4]
			x = &state->X[ch][state->position - 4 *
   1c83e:	009b      	lsls	r3, r3, #2
   1c840:	1ad2      	subs	r2, r2, r3
					state->increment + frame->blocks * 4];
   1c842:	683b      	ldr	r3, [r7, #0]
   1c844:	789b      	ldrb	r3, [r3, #2]
   1c846:	009b      	lsls	r3, r3, #2
   1c848:	4413      	add	r3, r2
			x = &state->X[ch][state->position - 4 *
   1c84a:	697a      	ldr	r2, [r7, #20]
   1c84c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1c850:	fb01 f202 	mul.w	r2, r1, r2
   1c854:	4413      	add	r3, r2
   1c856:	3308      	adds	r3, #8
   1c858:	005b      	lsls	r3, r3, #1
   1c85a:	687a      	ldr	r2, [r7, #4]
   1c85c:	4413      	add	r3, r2
   1c85e:	60fb      	str	r3, [r7, #12]
			for (blk = 0; blk < frame->blocks;
   1c860:	2300      	movs	r3, #0
   1c862:	613b      	str	r3, [r7, #16]
   1c864:	e024      	b.n	1c8b0 <sbc_analyze_audio+0x98>
						blk += state->increment) {
				state->sbc_analyze_4s(
   1c866:	687b      	ldr	r3, [r7, #4]
   1c868:	f8d3 4530 	ldr.w	r4, [r3, #1328]	; 0x530
					state, x,
					frame->sb_sample_f[blk][ch],
   1c86c:	693b      	ldr	r3, [r7, #16]
   1c86e:	005a      	lsls	r2, r3, #1
   1c870:	697b      	ldr	r3, [r7, #20]
   1c872:	4413      	add	r3, r2
   1c874:	3303      	adds	r3, #3
   1c876:	015b      	lsls	r3, r3, #5
   1c878:	683a      	ldr	r2, [r7, #0]
   1c87a:	18d1      	adds	r1, r2, r3
					frame->sb_sample_f[blk + 1][ch] -
   1c87c:	693b      	ldr	r3, [r7, #16]
   1c87e:	1c5a      	adds	r2, r3, #1
   1c880:	693b      	ldr	r3, [r7, #16]
   1c882:	1ad3      	subs	r3, r2, r3
   1c884:	005b      	lsls	r3, r3, #1
   1c886:	2200      	movs	r2, #0
   1c888:	4413      	add	r3, r2
   1c88a:	015b      	lsls	r3, r3, #5
				state->sbc_analyze_4s(
   1c88c:	109b      	asrs	r3, r3, #2
   1c88e:	460a      	mov	r2, r1
   1c890:	68f9      	ldr	r1, [r7, #12]
   1c892:	6878      	ldr	r0, [r7, #4]
   1c894:	47a0      	blx	r4
					frame->sb_sample_f[blk][ch]);
				x -= 4 * state->increment;
   1c896:	687b      	ldr	r3, [r7, #4]
   1c898:	791b      	ldrb	r3, [r3, #4]
   1c89a:	00db      	lsls	r3, r3, #3
   1c89c:	425b      	negs	r3, r3
   1c89e:	68fa      	ldr	r2, [r7, #12]
   1c8a0:	4413      	add	r3, r2
   1c8a2:	60fb      	str	r3, [r7, #12]
						blk += state->increment) {
   1c8a4:	687b      	ldr	r3, [r7, #4]
   1c8a6:	791b      	ldrb	r3, [r3, #4]
   1c8a8:	461a      	mov	r2, r3
   1c8aa:	693b      	ldr	r3, [r7, #16]
   1c8ac:	4413      	add	r3, r2
   1c8ae:	613b      	str	r3, [r7, #16]
			for (blk = 0; blk < frame->blocks;
   1c8b0:	683b      	ldr	r3, [r7, #0]
   1c8b2:	789b      	ldrb	r3, [r3, #2]
   1c8b4:	461a      	mov	r2, r3
   1c8b6:	693b      	ldr	r3, [r7, #16]
   1c8b8:	429a      	cmp	r2, r3
   1c8ba:	dcd4      	bgt.n	1c866 <sbc_analyze_audio+0x4e>
		for (ch = 0; ch < frame->channels; ch++) {
   1c8bc:	697b      	ldr	r3, [r7, #20]
   1c8be:	3301      	adds	r3, #1
   1c8c0:	617b      	str	r3, [r7, #20]
   1c8c2:	683b      	ldr	r3, [r7, #0]
   1c8c4:	7a1b      	ldrb	r3, [r3, #8]
   1c8c6:	461a      	mov	r2, r3
   1c8c8:	697b      	ldr	r3, [r7, #20]
   1c8ca:	429a      	cmp	r2, r3
   1c8cc:	dcb3      	bgt.n	1c836 <sbc_analyze_audio+0x1e>
			}
		}
		return frame->blocks * 4;
   1c8ce:	683b      	ldr	r3, [r7, #0]
   1c8d0:	789b      	ldrb	r3, [r3, #2]
   1c8d2:	009b      	lsls	r3, r3, #2
   1c8d4:	e054      	b.n	1c980 <sbc_analyze_audio+0x168>

	case 8:
		for (ch = 0; ch < frame->channels; ch++) {
   1c8d6:	2300      	movs	r3, #0
   1c8d8:	617b      	str	r3, [r7, #20]
   1c8da:	e045      	b.n	1c968 <sbc_analyze_audio+0x150>
			x = &state->X[ch][state->position - 8 *
   1c8dc:	687b      	ldr	r3, [r7, #4]
   1c8de:	681a      	ldr	r2, [r3, #0]
					state->increment + frame->blocks * 8];
   1c8e0:	687b      	ldr	r3, [r7, #4]
   1c8e2:	791b      	ldrb	r3, [r3, #4]
			x = &state->X[ch][state->position - 8 *
   1c8e4:	00db      	lsls	r3, r3, #3
   1c8e6:	1ad2      	subs	r2, r2, r3
					state->increment + frame->blocks * 8];
   1c8e8:	683b      	ldr	r3, [r7, #0]
   1c8ea:	789b      	ldrb	r3, [r3, #2]
   1c8ec:	00db      	lsls	r3, r3, #3
   1c8ee:	4413      	add	r3, r2
			x = &state->X[ch][state->position - 8 *
   1c8f0:	697a      	ldr	r2, [r7, #20]
   1c8f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1c8f6:	fb01 f202 	mul.w	r2, r1, r2
   1c8fa:	4413      	add	r3, r2
   1c8fc:	3308      	adds	r3, #8
   1c8fe:	005b      	lsls	r3, r3, #1
   1c900:	687a      	ldr	r2, [r7, #4]
   1c902:	4413      	add	r3, r2
   1c904:	60fb      	str	r3, [r7, #12]
			for (blk = 0; blk < frame->blocks;
   1c906:	2300      	movs	r3, #0
   1c908:	613b      	str	r3, [r7, #16]
   1c90a:	e024      	b.n	1c956 <sbc_analyze_audio+0x13e>
						blk += state->increment) {
				state->sbc_analyze_8s(
   1c90c:	687b      	ldr	r3, [r7, #4]
   1c90e:	f8d3 4534 	ldr.w	r4, [r3, #1332]	; 0x534
					state, x,
					frame->sb_sample_f[blk][ch],
   1c912:	693b      	ldr	r3, [r7, #16]
   1c914:	005a      	lsls	r2, r3, #1
   1c916:	697b      	ldr	r3, [r7, #20]
   1c918:	4413      	add	r3, r2
   1c91a:	3303      	adds	r3, #3
   1c91c:	015b      	lsls	r3, r3, #5
   1c91e:	683a      	ldr	r2, [r7, #0]
   1c920:	18d1      	adds	r1, r2, r3
					frame->sb_sample_f[blk + 1][ch] -
   1c922:	693b      	ldr	r3, [r7, #16]
   1c924:	1c5a      	adds	r2, r3, #1
   1c926:	693b      	ldr	r3, [r7, #16]
   1c928:	1ad3      	subs	r3, r2, r3
   1c92a:	005b      	lsls	r3, r3, #1
   1c92c:	2200      	movs	r2, #0
   1c92e:	4413      	add	r3, r2
   1c930:	015b      	lsls	r3, r3, #5
				state->sbc_analyze_8s(
   1c932:	109b      	asrs	r3, r3, #2
   1c934:	460a      	mov	r2, r1
   1c936:	68f9      	ldr	r1, [r7, #12]
   1c938:	6878      	ldr	r0, [r7, #4]
   1c93a:	47a0      	blx	r4
					frame->sb_sample_f[blk][ch]);
				x -= 8 * state->increment;
   1c93c:	687b      	ldr	r3, [r7, #4]
   1c93e:	791b      	ldrb	r3, [r3, #4]
   1c940:	011b      	lsls	r3, r3, #4
   1c942:	425b      	negs	r3, r3
   1c944:	68fa      	ldr	r2, [r7, #12]
   1c946:	4413      	add	r3, r2
   1c948:	60fb      	str	r3, [r7, #12]
						blk += state->increment) {
   1c94a:	687b      	ldr	r3, [r7, #4]
   1c94c:	791b      	ldrb	r3, [r3, #4]
   1c94e:	461a      	mov	r2, r3
   1c950:	693b      	ldr	r3, [r7, #16]
   1c952:	4413      	add	r3, r2
   1c954:	613b      	str	r3, [r7, #16]
			for (blk = 0; blk < frame->blocks;
   1c956:	683b      	ldr	r3, [r7, #0]
   1c958:	789b      	ldrb	r3, [r3, #2]
   1c95a:	461a      	mov	r2, r3
   1c95c:	693b      	ldr	r3, [r7, #16]
   1c95e:	429a      	cmp	r2, r3
   1c960:	dcd4      	bgt.n	1c90c <sbc_analyze_audio+0xf4>
		for (ch = 0; ch < frame->channels; ch++) {
   1c962:	697b      	ldr	r3, [r7, #20]
   1c964:	3301      	adds	r3, #1
   1c966:	617b      	str	r3, [r7, #20]
   1c968:	683b      	ldr	r3, [r7, #0]
   1c96a:	7a1b      	ldrb	r3, [r3, #8]
   1c96c:	461a      	mov	r2, r3
   1c96e:	697b      	ldr	r3, [r7, #20]
   1c970:	429a      	cmp	r2, r3
   1c972:	dcb3      	bgt.n	1c8dc <sbc_analyze_audio+0xc4>
			}
		}
		return frame->blocks * 8;
   1c974:	683b      	ldr	r3, [r7, #0]
   1c976:	789b      	ldrb	r3, [r3, #2]
   1c978:	00db      	lsls	r3, r3, #3
   1c97a:	e001      	b.n	1c980 <sbc_analyze_audio+0x168>

	default:
		return -EIO;
   1c97c:	f06f 0304 	mvn.w	r3, #4
	}
}
   1c980:	4618      	mov	r0, r3
   1c982:	371c      	adds	r7, #28
   1c984:	46bd      	mov	sp, r7
   1c986:	bd90      	pop	{r4, r7, pc}

0001c988 <sbc_pack_frame_internal>:

static SBC_ALWAYS_INLINE ssize_t sbc_pack_frame_internal(uint8_t *data,
					struct sbc_frame *frame, size_t len,
					int frame_subbands, int frame_channels,
					int joint)
{
   1c988:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c98a:	b0c1      	sub	sp, #260	; 0x104
   1c98c:	af00      	add	r7, sp, #0
   1c98e:	60f8      	str	r0, [r7, #12]
   1c990:	60b9      	str	r1, [r7, #8]
   1c992:	607a      	str	r2, [r7, #4]
   1c994:	463a      	mov	r2, r7
   1c996:	6013      	str	r3, [r2, #0]
	/* Bitstream writer starts from the fourth byte */
	uint8_t *data_ptr = data + 4;
   1c998:	68fb      	ldr	r3, [r7, #12]
   1c99a:	3304      	adds	r3, #4
   1c99c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	uint32_t bits_cache = 0;
   1c9a0:	2300      	movs	r3, #0
   1c9a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	uint32_t bits_count = 0;
   1c9a6:	2300      	movs	r3, #0
   1c9a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	/* Will copy the header parts for CRC-8 calculation here */
	uint8_t crc_header[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   1c9ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
   1c9b0:	2200      	movs	r2, #0
   1c9b2:	601a      	str	r2, [r3, #0]
   1c9b4:	605a      	str	r2, [r3, #4]
   1c9b6:	f8c3 2007 	str.w	r2, [r3, #7]
	int crc_pos = 0;
   1c9ba:	2300      	movs	r3, #0
   1c9bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t levels[2][8];	/* levels are derived from that */
	uint32_t sb_sample_delta[2][8];

	/* Can't fill in crc yet */

	crc_header[0] = data[1];
   1c9c0:	68fb      	ldr	r3, [r7, #12]
   1c9c2:	785b      	ldrb	r3, [r3, #1]
   1c9c4:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
	crc_header[1] = data[2];
   1c9c8:	68fb      	ldr	r3, [r7, #12]
   1c9ca:	789b      	ldrb	r3, [r3, #2]
   1c9cc:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
	crc_pos = 16;
   1c9d0:	2310      	movs	r3, #16
   1c9d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

	if (frame->mode == JOINT_STEREO) {
   1c9d6:	68bb      	ldr	r3, [r7, #8]
   1c9d8:	685b      	ldr	r3, [r3, #4]
   1c9da:	2b03      	cmp	r3, #3
   1c9dc:	d14a      	bne.n	1ca74 <sbc_pack_frame_internal+0xec>
		PUT_BITS(data_ptr, bits_cache, bits_count,
   1c9de:	463b      	mov	r3, r7
   1c9e0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
   1c9e4:	681b      	ldr	r3, [r3, #0]
   1c9e6:	409a      	lsls	r2, r3
   1c9e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
   1c9ec:	4313      	orrs	r3, r2
   1c9ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   1c9f2:	463b      	mov	r3, r7
   1c9f4:	681b      	ldr	r3, [r3, #0]
   1c9f6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1c9fa:	4413      	add	r3, r2
   1c9fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1ca00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ca04:	2b0f      	cmp	r3, #15
   1ca06:	d923      	bls.n	1ca50 <sbc_pack_frame_internal+0xc8>
   1ca08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ca0c:	3b08      	subs	r3, #8
   1ca0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1ca12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1ca16:	1c5a      	adds	r2, r3, #1
   1ca18:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1ca1c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1ca20:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1ca24:	fa21 f202 	lsr.w	r2, r1, r2
   1ca28:	b2d2      	uxtb	r2, r2
   1ca2a:	701a      	strb	r2, [r3, #0]
   1ca2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ca30:	3b08      	subs	r3, #8
   1ca32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1ca36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1ca3a:	1c5a      	adds	r2, r3, #1
   1ca3c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1ca40:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1ca44:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1ca48:	fa21 f202 	lsr.w	r2, r1, r2
   1ca4c:	b2d2      	uxtb	r2, r2
   1ca4e:	701a      	strb	r2, [r3, #0]
			joint, frame_subbands);
		crc_header[crc_pos >> 3] = joint;
   1ca50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1ca54:	10db      	asrs	r3, r3, #3
   1ca56:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
   1ca5a:	b2d2      	uxtb	r2, r2
   1ca5c:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1ca60:	440b      	add	r3, r1
   1ca62:	f803 2c2c 	strb.w	r2, [r3, #-44]
		crc_pos += frame_subbands;
   1ca66:	463b      	mov	r3, r7
   1ca68:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
   1ca6c:	681b      	ldr	r3, [r3, #0]
   1ca6e:	4413      	add	r3, r2
   1ca70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	}

	for (ch = 0; ch < frame_channels; ch++) {
   1ca74:	2300      	movs	r3, #0
   1ca76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1ca7a:	e08a      	b.n	1cb92 <sbc_pack_frame_internal+0x20a>
		for (sb = 0; sb < frame_subbands; sb++) {
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1ca82:	e07a      	b.n	1cb7a <sbc_pack_frame_internal+0x1f2>
			PUT_BITS(data_ptr, bits_cache, bits_count,
   1ca84:	68bb      	ldr	r3, [r7, #8]
   1ca86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1ca8a:	00d1      	lsls	r1, r2, #3
   1ca8c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1ca90:	440a      	add	r2, r1
   1ca92:	3208      	adds	r2, #8
   1ca94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ca98:	f003 020f 	and.w	r2, r3, #15
   1ca9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
   1caa0:	011b      	lsls	r3, r3, #4
   1caa2:	4313      	orrs	r3, r2
   1caa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   1caa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1caac:	3304      	adds	r3, #4
   1caae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1cab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cab6:	2b0f      	cmp	r3, #15
   1cab8:	d923      	bls.n	1cb02 <sbc_pack_frame_internal+0x17a>
   1caba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cabe:	3b08      	subs	r3, #8
   1cac0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1cac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1cac8:	1c5a      	adds	r2, r3, #1
   1caca:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1cace:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1cad2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1cad6:	fa21 f202 	lsr.w	r2, r1, r2
   1cada:	b2d2      	uxtb	r2, r2
   1cadc:	701a      	strb	r2, [r3, #0]
   1cade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cae2:	3b08      	subs	r3, #8
   1cae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1cae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1caec:	1c5a      	adds	r2, r3, #1
   1caee:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1caf2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1caf6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1cafa:	fa21 f202 	lsr.w	r2, r1, r2
   1cafe:	b2d2      	uxtb	r2, r2
   1cb00:	701a      	strb	r2, [r3, #0]
				frame->scale_factor[ch][sb] & 0x0F, 4);
			crc_header[crc_pos >> 3] <<= 4;
   1cb02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cb06:	10db      	asrs	r3, r3, #3
   1cb08:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
   1cb0c:	10d2      	asrs	r2, r2, #3
   1cb0e:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cb12:	440a      	add	r2, r1
   1cb14:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
   1cb18:	0112      	lsls	r2, r2, #4
   1cb1a:	b2d2      	uxtb	r2, r2
   1cb1c:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cb20:	440b      	add	r3, r1
   1cb22:	f803 2c2c 	strb.w	r2, [r3, #-44]
			crc_header[crc_pos >> 3] |= frame->scale_factor[ch][sb] & 0x0F;
   1cb26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cb2a:	10db      	asrs	r3, r3, #3
   1cb2c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
   1cb30:	10d2      	asrs	r2, r2, #3
   1cb32:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cb36:	440a      	add	r2, r1
   1cb38:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
   1cb3c:	68ba      	ldr	r2, [r7, #8]
   1cb3e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
   1cb42:	00c4      	lsls	r4, r0, #3
   1cb44:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
   1cb48:	4420      	add	r0, r4
   1cb4a:	3008      	adds	r0, #8
   1cb4c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   1cb50:	b2d2      	uxtb	r2, r2
   1cb52:	f002 020f 	and.w	r2, r2, #15
   1cb56:	b2d2      	uxtb	r2, r2
   1cb58:	430a      	orrs	r2, r1
   1cb5a:	b2d2      	uxtb	r2, r2
   1cb5c:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cb60:	440b      	add	r3, r1
   1cb62:	f803 2c2c 	strb.w	r2, [r3, #-44]
			crc_pos += 4;
   1cb66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cb6a:	3304      	adds	r3, #4
   1cb6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		for (sb = 0; sb < frame_subbands; sb++) {
   1cb70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cb74:	3301      	adds	r3, #1
   1cb76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1cb7a:	463b      	mov	r3, r7
   1cb7c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1cb80:	681b      	ldr	r3, [r3, #0]
   1cb82:	429a      	cmp	r2, r3
   1cb84:	f6ff af7e 	blt.w	1ca84 <sbc_pack_frame_internal+0xfc>
	for (ch = 0; ch < frame_channels; ch++) {
   1cb88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cb8c:	3301      	adds	r3, #1
   1cb8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1cb92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1cb96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   1cb9a:	429a      	cmp	r2, r3
   1cb9c:	f6ff af6e 	blt.w	1ca7c <sbc_pack_frame_internal+0xf4>
		}
	}

	/* align the last crc byte */
	if (crc_pos % 8)
   1cba0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cba4:	f003 0307 	and.w	r3, r3, #7
   1cba8:	2b00      	cmp	r3, #0
   1cbaa:	d01f      	beq.n	1cbec <sbc_pack_frame_internal+0x264>
		crc_header[crc_pos >> 3] <<= 8 - (crc_pos % 8);
   1cbac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cbb0:	10da      	asrs	r2, r3, #3
   1cbb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cbb6:	10db      	asrs	r3, r3, #3
   1cbb8:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cbbc:	440b      	add	r3, r1
   1cbbe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
   1cbc2:	4618      	mov	r0, r3
   1cbc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   1cbc8:	4259      	negs	r1, r3
   1cbca:	f003 0307 	and.w	r3, r3, #7
   1cbce:	f001 0107 	and.w	r1, r1, #7
   1cbd2:	bf58      	it	pl
   1cbd4:	424b      	negpl	r3, r1
   1cbd6:	f1c3 0308 	rsb	r3, r3, #8
   1cbda:	fa00 f303 	lsl.w	r3, r0, r3
   1cbde:	b2d9      	uxtb	r1, r3
   1cbe0:	f507 7380 	add.w	r3, r7, #256	; 0x100
   1cbe4:	4413      	add	r3, r2
   1cbe6:	460a      	mov	r2, r1
   1cbe8:	f803 2c2c 	strb.w	r2, [r3, #-44]

	data[3] = sbc_crc8(crc_header, crc_pos);
   1cbec:	68fb      	ldr	r3, [r7, #12]
   1cbee:	1cdc      	adds	r4, r3, #3
   1cbf0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
   1cbf4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
   1cbf8:	4611      	mov	r1, r2
   1cbfa:	4618      	mov	r0, r3
   1cbfc:	f7fe fd7e 	bl	1b6fc <sbc_crc8>
   1cc00:	4603      	mov	r3, r0
   1cc02:	7023      	strb	r3, [r4, #0]

	sbc_calculate_bits(frame, bits);
   1cc04:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1cc08:	4619      	mov	r1, r3
   1cc0a:	68b8      	ldr	r0, [r7, #8]
   1cc0c:	f7ff fa0c 	bl	1c028 <sbc_calculate_bits>

	for (ch = 0; ch < frame_channels; ch++) {
   1cc10:	2300      	movs	r3, #0
   1cc12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1cc16:	e057      	b.n	1ccc8 <sbc_pack_frame_internal+0x340>
		for (sb = 0; sb < frame_subbands; sb++) {
   1cc18:	2300      	movs	r3, #0
   1cc1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1cc1e:	e048      	b.n	1ccb2 <sbc_pack_frame_internal+0x32a>
			levels[ch][sb] = ((1 << bits[ch][sb]) - 1) <<
   1cc20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cc24:	00da      	lsls	r2, r3, #3
   1cc26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cc2a:	4413      	add	r3, r2
   1cc2c:	009b      	lsls	r3, r3, #2
   1cc2e:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1cc32:	4413      	add	r3, r2
   1cc34:	f853 3c6c 	ldr.w	r3, [r3, #-108]
   1cc38:	2201      	movs	r2, #1
   1cc3a:	fa02 f303 	lsl.w	r3, r2, r3
   1cc3e:	1e5a      	subs	r2, r3, #1
				(32 - (frame->scale_factor[ch][sb] +
   1cc40:	68bb      	ldr	r3, [r7, #8]
   1cc42:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
   1cc46:	00c8      	lsls	r0, r1, #3
   1cc48:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
   1cc4c:	4401      	add	r1, r0
   1cc4e:	3108      	adds	r1, #8
   1cc50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1cc54:	f1c3 030f 	rsb	r3, r3, #15
			levels[ch][sb] = ((1 << bits[ch][sb]) - 1) <<
   1cc58:	fa02 f303 	lsl.w	r3, r2, r3
   1cc5c:	4619      	mov	r1, r3
   1cc5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cc62:	00da      	lsls	r2, r3, #3
   1cc64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cc68:	4413      	add	r3, r2
   1cc6a:	009b      	lsls	r3, r3, #2
   1cc6c:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1cc70:	4413      	add	r3, r2
   1cc72:	f843 1cac 	str.w	r1, [r3, #-172]
					SCALE_OUT_BITS + 2));
			sb_sample_delta[ch][sb] = (uint32_t) 1 <<
				(frame->scale_factor[ch][sb] +
   1cc76:	68bb      	ldr	r3, [r7, #8]
   1cc78:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1cc7c:	00d1      	lsls	r1, r2, #3
   1cc7e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1cc82:	440a      	add	r2, r1
   1cc84:	3208      	adds	r2, #8
   1cc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
					SCALE_OUT_BITS + 1);
   1cc8a:	3310      	adds	r3, #16
			sb_sample_delta[ch][sb] = (uint32_t) 1 <<
   1cc8c:	2201      	movs	r2, #1
   1cc8e:	409a      	lsls	r2, r3
   1cc90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cc94:	00d9      	lsls	r1, r3, #3
   1cc96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cc9a:	440b      	add	r3, r1
   1cc9c:	009b      	lsls	r3, r3, #2
   1cc9e:	f507 7180 	add.w	r1, r7, #256	; 0x100
   1cca2:	440b      	add	r3, r1
   1cca4:	f843 2cec 	str.w	r2, [r3, #-236]
		for (sb = 0; sb < frame_subbands; sb++) {
   1cca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1ccac:	3301      	adds	r3, #1
   1ccae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1ccb2:	463b      	mov	r3, r7
   1ccb4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1ccb8:	681b      	ldr	r3, [r3, #0]
   1ccba:	429a      	cmp	r2, r3
   1ccbc:	dbb0      	blt.n	1cc20 <sbc_pack_frame_internal+0x298>
	for (ch = 0; ch < frame_channels; ch++) {
   1ccbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1ccc2:	3301      	adds	r3, #1
   1ccc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1ccc8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1cccc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   1ccd0:	429a      	cmp	r2, r3
   1ccd2:	dba1      	blt.n	1cc18 <sbc_pack_frame_internal+0x290>
		}
	}

	for (blk = 0; blk < frame->blocks; blk++) {
   1ccd4:	2300      	movs	r3, #0
   1ccd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   1ccda:	e0bf      	b.n	1ce5c <sbc_pack_frame_internal+0x4d4>
		for (ch = 0; ch < frame_channels; ch++) {
   1ccdc:	2300      	movs	r3, #0
   1ccde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1cce2:	e0af      	b.n	1ce44 <sbc_pack_frame_internal+0x4bc>
			for (sb = 0; sb < frame_subbands; sb++) {
   1cce4:	2300      	movs	r3, #0
   1cce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1ccea:	e09f      	b.n	1ce2c <sbc_pack_frame_internal+0x4a4>

				if (bits[ch][sb] == 0)
   1ccec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1ccf0:	00da      	lsls	r2, r3, #3
   1ccf2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1ccf6:	4413      	add	r3, r2
   1ccf8:	009b      	lsls	r3, r3, #2
   1ccfa:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1ccfe:	4413      	add	r3, r2
   1cd00:	f853 3c6c 	ldr.w	r3, [r3, #-108]
   1cd04:	2b00      	cmp	r3, #0
   1cd06:	f000 808b 	beq.w	1ce20 <sbc_pack_frame_internal+0x498>
					continue;

				audio_sample = ((uint64_t) levels[ch][sb] *
   1cd0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cd0e:	00da      	lsls	r2, r3, #3
   1cd10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cd14:	4413      	add	r3, r2
   1cd16:	009b      	lsls	r3, r3, #2
   1cd18:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1cd1c:	4413      	add	r3, r2
   1cd1e:	f853 3cac 	ldr.w	r3, [r3, #-172]
   1cd22:	4619      	mov	r1, r3
   1cd24:	f04f 0200 	mov.w	r2, #0
					(sb_sample_delta[ch][sb] +
   1cd28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cd2c:	00d8      	lsls	r0, r3, #3
   1cd2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cd32:	4403      	add	r3, r0
   1cd34:	009b      	lsls	r3, r3, #2
   1cd36:	f507 7080 	add.w	r0, r7, #256	; 0x100
   1cd3a:	4403      	add	r3, r0
   1cd3c:	f853 3cec 	ldr.w	r3, [r3, #-236]
					frame->sb_sample_f[blk][ch][sb])) >> 32;
   1cd40:	68b8      	ldr	r0, [r7, #8]
   1cd42:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
   1cd46:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   1cd4a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
   1cd4e:	4474      	add	r4, lr
   1cd50:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
   1cd54:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
   1cd58:	4474      	add	r4, lr
   1cd5a:	3418      	adds	r4, #24
   1cd5c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
					(sb_sample_delta[ch][sb] +
   1cd60:	4403      	add	r3, r0
   1cd62:	f04f 0400 	mov.w	r4, #0
				audio_sample = ((uint64_t) levels[ch][sb] *
   1cd66:	fb03 fe02 	mul.w	lr, r3, r2
   1cd6a:	fb01 f004 	mul.w	r0, r1, r4
   1cd6e:	4470      	add	r0, lr
   1cd70:	fba1 3403 	umull	r3, r4, r1, r3
   1cd74:	1902      	adds	r2, r0, r4
   1cd76:	4614      	mov	r4, r2
					frame->sb_sample_f[blk][ch][sb])) >> 32;
   1cd78:	0025      	movs	r5, r4
   1cd7a:	2600      	movs	r6, #0
				audio_sample = ((uint64_t) levels[ch][sb] *
   1cd7c:	462b      	mov	r3, r5
   1cd7e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

				PUT_BITS(data_ptr, bits_cache, bits_count,
   1cd82:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cd86:	00da      	lsls	r2, r3, #3
   1cd88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cd8c:	4413      	add	r3, r2
   1cd8e:	009b      	lsls	r3, r3, #2
   1cd90:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1cd94:	4413      	add	r3, r2
   1cd96:	f853 3c6c 	ldr.w	r3, [r3, #-108]
   1cd9a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
   1cd9e:	409a      	lsls	r2, r3
   1cda0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   1cda4:	4313      	orrs	r3, r2
   1cda6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
   1cdaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1cdae:	00da      	lsls	r2, r3, #3
   1cdb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1cdb4:	4413      	add	r3, r2
   1cdb6:	009b      	lsls	r3, r3, #2
   1cdb8:	f507 7280 	add.w	r2, r7, #256	; 0x100
   1cdbc:	4413      	add	r3, r2
   1cdbe:	f853 3c6c 	ldr.w	r3, [r3, #-108]
   1cdc2:	461a      	mov	r2, r3
   1cdc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cdc8:	4413      	add	r3, r2
   1cdca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1cdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cdd2:	2b0f      	cmp	r3, #15
   1cdd4:	d925      	bls.n	1ce22 <sbc_pack_frame_internal+0x49a>
   1cdd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cdda:	3b08      	subs	r3, #8
   1cddc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1cde0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1cde4:	1c5a      	adds	r2, r3, #1
   1cde6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1cdea:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1cdee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1cdf2:	fa21 f202 	lsr.w	r2, r1, r2
   1cdf6:	b2d2      	uxtb	r2, r2
   1cdf8:	701a      	strb	r2, [r3, #0]
   1cdfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1cdfe:	3b08      	subs	r3, #8
   1ce00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1ce04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1ce08:	1c5a      	adds	r2, r3, #1
   1ce0a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1ce0e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1ce12:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1ce16:	fa21 f202 	lsr.w	r2, r1, r2
   1ce1a:	b2d2      	uxtb	r2, r2
   1ce1c:	701a      	strb	r2, [r3, #0]
   1ce1e:	e000      	b.n	1ce22 <sbc_pack_frame_internal+0x49a>
					continue;
   1ce20:	bf00      	nop
			for (sb = 0; sb < frame_subbands; sb++) {
   1ce22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   1ce26:	3301      	adds	r3, #1
   1ce28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   1ce2c:	463b      	mov	r3, r7
   1ce2e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
   1ce32:	681b      	ldr	r3, [r3, #0]
   1ce34:	429a      	cmp	r2, r3
   1ce36:	f6ff af59 	blt.w	1ccec <sbc_pack_frame_internal+0x364>
		for (ch = 0; ch < frame_channels; ch++) {
   1ce3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
   1ce3e:	3301      	adds	r3, #1
   1ce40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
   1ce44:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
   1ce48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   1ce4c:	429a      	cmp	r2, r3
   1ce4e:	f6ff af49 	blt.w	1cce4 <sbc_pack_frame_internal+0x35c>
	for (blk = 0; blk < frame->blocks; blk++) {
   1ce52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1ce56:	3301      	adds	r3, #1
   1ce58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   1ce5c:	68bb      	ldr	r3, [r7, #8]
   1ce5e:	789b      	ldrb	r3, [r3, #2]
   1ce60:	461a      	mov	r2, r3
   1ce62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   1ce66:	429a      	cmp	r2, r3
   1ce68:	f73f af38 	bgt.w	1ccdc <sbc_pack_frame_internal+0x354>
					audio_sample, bits[ch][sb]);
			}
		}
	}

	FLUSH_BITS(data_ptr, bits_cache, bits_count);
   1ce6c:	e011      	b.n	1ce92 <sbc_pack_frame_internal+0x50a>
   1ce6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ce72:	3b08      	subs	r3, #8
   1ce74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   1ce78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1ce7c:	1c5a      	adds	r2, r3, #1
   1ce7e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1ce82:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1ce86:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1ce8a:	fa21 f202 	lsr.w	r2, r1, r2
   1ce8e:	b2d2      	uxtb	r2, r2
   1ce90:	701a      	strb	r2, [r3, #0]
   1ce92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ce96:	2b07      	cmp	r3, #7
   1ce98:	d8e9      	bhi.n	1ce6e <sbc_pack_frame_internal+0x4e6>
   1ce9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
   1ce9e:	2b00      	cmp	r3, #0
   1cea0:	d00e      	beq.n	1cec0 <sbc_pack_frame_internal+0x538>
   1cea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
   1cea6:	1c5a      	adds	r2, r3, #1
   1cea8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
   1ceac:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1ceb0:	f1c2 0208 	rsb	r2, r2, #8
   1ceb4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
   1ceb8:	fa01 f202 	lsl.w	r2, r1, r2
   1cebc:	b2d2      	uxtb	r2, r2
   1cebe:	701a      	strb	r2, [r3, #0]

	return data_ptr - data;
   1cec0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
   1cec4:	68fb      	ldr	r3, [r7, #12]
   1cec6:	1ad3      	subs	r3, r2, r3
}
   1cec8:	4618      	mov	r0, r3
   1ceca:	f507 7782 	add.w	r7, r7, #260	; 0x104
   1cece:	46bd      	mov	sp, r7
   1ced0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ced2 <sbc_pack_frame>:

static ssize_t sbc_pack_frame(uint8_t *data, struct sbc_frame *frame, size_t len, int joint)
{
   1ced2:	b580      	push	{r7, lr}
   1ced4:	b088      	sub	sp, #32
   1ced6:	af02      	add	r7, sp, #8
   1ced8:	60f8      	str	r0, [r7, #12]
   1ceda:	60b9      	str	r1, [r7, #8]
   1cedc:	607a      	str	r2, [r7, #4]
   1cede:	603b      	str	r3, [r7, #0]
	int frame_subbands = 4;
   1cee0:	2304      	movs	r3, #4
   1cee2:	617b      	str	r3, [r7, #20]

	data[0] = SBC_SYNCWORD;
   1cee4:	68fb      	ldr	r3, [r7, #12]
   1cee6:	229c      	movs	r2, #156	; 0x9c
   1cee8:	701a      	strb	r2, [r3, #0]

	data[1] = (frame->frequency & 0x03) << 6;
   1ceea:	68fb      	ldr	r3, [r7, #12]
   1ceec:	3301      	adds	r3, #1
   1ceee:	68ba      	ldr	r2, [r7, #8]
   1cef0:	7812      	ldrb	r2, [r2, #0]
   1cef2:	0192      	lsls	r2, r2, #6
   1cef4:	b2d2      	uxtb	r2, r2
   1cef6:	701a      	strb	r2, [r3, #0]
	data[1] |= (frame->block_mode & 0x03) << 4;
   1cef8:	68fb      	ldr	r3, [r7, #12]
   1cefa:	3301      	adds	r3, #1
   1cefc:	68fa      	ldr	r2, [r7, #12]
   1cefe:	3201      	adds	r2, #1
   1cf00:	7812      	ldrb	r2, [r2, #0]
   1cf02:	b251      	sxtb	r1, r2
   1cf04:	68ba      	ldr	r2, [r7, #8]
   1cf06:	7852      	ldrb	r2, [r2, #1]
   1cf08:	0112      	lsls	r2, r2, #4
   1cf0a:	b252      	sxtb	r2, r2
   1cf0c:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1cf10:	b252      	sxtb	r2, r2
   1cf12:	430a      	orrs	r2, r1
   1cf14:	b252      	sxtb	r2, r2
   1cf16:	b2d2      	uxtb	r2, r2
   1cf18:	701a      	strb	r2, [r3, #0]
	data[1] |= (frame->mode & 0x03) << 2;
   1cf1a:	68fb      	ldr	r3, [r7, #12]
   1cf1c:	3301      	adds	r3, #1
   1cf1e:	68fa      	ldr	r2, [r7, #12]
   1cf20:	3201      	adds	r2, #1
   1cf22:	7812      	ldrb	r2, [r2, #0]
   1cf24:	b251      	sxtb	r1, r2
   1cf26:	68ba      	ldr	r2, [r7, #8]
   1cf28:	6852      	ldr	r2, [r2, #4]
   1cf2a:	0092      	lsls	r2, r2, #2
   1cf2c:	b252      	sxtb	r2, r2
   1cf2e:	f002 020c 	and.w	r2, r2, #12
   1cf32:	b252      	sxtb	r2, r2
   1cf34:	430a      	orrs	r2, r1
   1cf36:	b252      	sxtb	r2, r2
   1cf38:	b2d2      	uxtb	r2, r2
   1cf3a:	701a      	strb	r2, [r3, #0]
	data[1] |= (frame->allocation & 0x01) << 1;
   1cf3c:	68fb      	ldr	r3, [r7, #12]
   1cf3e:	3301      	adds	r3, #1
   1cf40:	68fa      	ldr	r2, [r7, #12]
   1cf42:	3201      	adds	r2, #1
   1cf44:	7812      	ldrb	r2, [r2, #0]
   1cf46:	b251      	sxtb	r1, r2
   1cf48:	68ba      	ldr	r2, [r7, #8]
   1cf4a:	68d2      	ldr	r2, [r2, #12]
   1cf4c:	0052      	lsls	r2, r2, #1
   1cf4e:	b252      	sxtb	r2, r2
   1cf50:	f002 0202 	and.w	r2, r2, #2
   1cf54:	b252      	sxtb	r2, r2
   1cf56:	430a      	orrs	r2, r1
   1cf58:	b252      	sxtb	r2, r2
   1cf5a:	b2d2      	uxtb	r2, r2
   1cf5c:	701a      	strb	r2, [r3, #0]

	data[2] = frame->bitpool;
   1cf5e:	68fb      	ldr	r3, [r7, #12]
   1cf60:	3302      	adds	r3, #2
   1cf62:	68ba      	ldr	r2, [r7, #8]
   1cf64:	7c92      	ldrb	r2, [r2, #18]
   1cf66:	701a      	strb	r2, [r3, #0]

	if (frame->subbands != 4)
   1cf68:	68bb      	ldr	r3, [r7, #8]
   1cf6a:	7c5b      	ldrb	r3, [r3, #17]
   1cf6c:	2b04      	cmp	r3, #4
   1cf6e:	d001      	beq.n	1cf74 <sbc_pack_frame+0xa2>
		frame_subbands = 8;
   1cf70:	2308      	movs	r3, #8
   1cf72:	617b      	str	r3, [r7, #20]

	if ((frame->mode == MONO || frame->mode == DUAL_CHANNEL) &&
   1cf74:	68bb      	ldr	r3, [r7, #8]
   1cf76:	685b      	ldr	r3, [r3, #4]
   1cf78:	2b00      	cmp	r3, #0
   1cf7a:	d003      	beq.n	1cf84 <sbc_pack_frame+0xb2>
   1cf7c:	68bb      	ldr	r3, [r7, #8]
   1cf7e:	685b      	ldr	r3, [r3, #4]
   1cf80:	2b01      	cmp	r3, #1
   1cf82:	d109      	bne.n	1cf98 <sbc_pack_frame+0xc6>
			frame->bitpool > frame_subbands << 4)
   1cf84:	68bb      	ldr	r3, [r7, #8]
   1cf86:	7c9b      	ldrb	r3, [r3, #18]
   1cf88:	461a      	mov	r2, r3
   1cf8a:	697b      	ldr	r3, [r7, #20]
   1cf8c:	011b      	lsls	r3, r3, #4
	if ((frame->mode == MONO || frame->mode == DUAL_CHANNEL) &&
   1cf8e:	429a      	cmp	r2, r3
   1cf90:	dd02      	ble.n	1cf98 <sbc_pack_frame+0xc6>
		return -5;
   1cf92:	f06f 0304 	mvn.w	r3, #4
   1cf96:	e055      	b.n	1d044 <sbc_pack_frame+0x172>

	if ((frame->mode == STEREO || frame->mode == JOINT_STEREO) &&
   1cf98:	68bb      	ldr	r3, [r7, #8]
   1cf9a:	685b      	ldr	r3, [r3, #4]
   1cf9c:	2b02      	cmp	r3, #2
   1cf9e:	d003      	beq.n	1cfa8 <sbc_pack_frame+0xd6>
   1cfa0:	68bb      	ldr	r3, [r7, #8]
   1cfa2:	685b      	ldr	r3, [r3, #4]
   1cfa4:	2b03      	cmp	r3, #3
   1cfa6:	d109      	bne.n	1cfbc <sbc_pack_frame+0xea>
			frame->bitpool > frame_subbands << 5)
   1cfa8:	68bb      	ldr	r3, [r7, #8]
   1cfaa:	7c9b      	ldrb	r3, [r3, #18]
   1cfac:	461a      	mov	r2, r3
   1cfae:	697b      	ldr	r3, [r7, #20]
   1cfb0:	015b      	lsls	r3, r3, #5
	if ((frame->mode == STEREO || frame->mode == JOINT_STEREO) &&
   1cfb2:	429a      	cmp	r2, r3
   1cfb4:	dd02      	ble.n	1cfbc <sbc_pack_frame+0xea>
		return -5;
   1cfb6:	f06f 0304 	mvn.w	r3, #4
   1cfba:	e043      	b.n	1d044 <sbc_pack_frame+0x172>

	if (frame->subbands == 4) {
   1cfbc:	68bb      	ldr	r3, [r7, #8]
   1cfbe:	7c5b      	ldrb	r3, [r3, #17]
   1cfc0:	2b04      	cmp	r3, #4
   1cfc2:	d11b      	bne.n	1cffc <sbc_pack_frame+0x12a>
		if (frame->channels == 1)
   1cfc4:	68bb      	ldr	r3, [r7, #8]
   1cfc6:	7a1b      	ldrb	r3, [r3, #8]
   1cfc8:	2b01      	cmp	r3, #1
   1cfca:	d10b      	bne.n	1cfe4 <sbc_pack_frame+0x112>
			return sbc_pack_frame_internal(
   1cfcc:	683b      	ldr	r3, [r7, #0]
   1cfce:	9301      	str	r3, [sp, #4]
   1cfd0:	2301      	movs	r3, #1
   1cfd2:	9300      	str	r3, [sp, #0]
   1cfd4:	2304      	movs	r3, #4
   1cfd6:	687a      	ldr	r2, [r7, #4]
   1cfd8:	68b9      	ldr	r1, [r7, #8]
   1cfda:	68f8      	ldr	r0, [r7, #12]
   1cfdc:	f7ff fcd4 	bl	1c988 <sbc_pack_frame_internal>
   1cfe0:	4603      	mov	r3, r0
   1cfe2:	e02f      	b.n	1d044 <sbc_pack_frame+0x172>
				data, frame, len, 4, 1, joint);
		else
			return sbc_pack_frame_internal(
   1cfe4:	683b      	ldr	r3, [r7, #0]
   1cfe6:	9301      	str	r3, [sp, #4]
   1cfe8:	2302      	movs	r3, #2
   1cfea:	9300      	str	r3, [sp, #0]
   1cfec:	2304      	movs	r3, #4
   1cfee:	687a      	ldr	r2, [r7, #4]
   1cff0:	68b9      	ldr	r1, [r7, #8]
   1cff2:	68f8      	ldr	r0, [r7, #12]
   1cff4:	f7ff fcc8 	bl	1c988 <sbc_pack_frame_internal>
   1cff8:	4603      	mov	r3, r0
   1cffa:	e023      	b.n	1d044 <sbc_pack_frame+0x172>
				data, frame, len, 4, 2, joint);
	} else {
		data[1] |= 0x01;
   1cffc:	68fb      	ldr	r3, [r7, #12]
   1cffe:	3301      	adds	r3, #1
   1d000:	68fa      	ldr	r2, [r7, #12]
   1d002:	3201      	adds	r2, #1
   1d004:	7812      	ldrb	r2, [r2, #0]
   1d006:	f042 0201 	orr.w	r2, r2, #1
   1d00a:	b2d2      	uxtb	r2, r2
   1d00c:	701a      	strb	r2, [r3, #0]
		if (frame->channels == 1)
   1d00e:	68bb      	ldr	r3, [r7, #8]
   1d010:	7a1b      	ldrb	r3, [r3, #8]
   1d012:	2b01      	cmp	r3, #1
   1d014:	d10b      	bne.n	1d02e <sbc_pack_frame+0x15c>
			return sbc_pack_frame_internal(
   1d016:	683b      	ldr	r3, [r7, #0]
   1d018:	9301      	str	r3, [sp, #4]
   1d01a:	2301      	movs	r3, #1
   1d01c:	9300      	str	r3, [sp, #0]
   1d01e:	2308      	movs	r3, #8
   1d020:	687a      	ldr	r2, [r7, #4]
   1d022:	68b9      	ldr	r1, [r7, #8]
   1d024:	68f8      	ldr	r0, [r7, #12]
   1d026:	f7ff fcaf 	bl	1c988 <sbc_pack_frame_internal>
   1d02a:	4603      	mov	r3, r0
   1d02c:	e00a      	b.n	1d044 <sbc_pack_frame+0x172>
				data, frame, len, 8, 1, joint);
		else
			return sbc_pack_frame_internal(
   1d02e:	683b      	ldr	r3, [r7, #0]
   1d030:	9301      	str	r3, [sp, #4]
   1d032:	2302      	movs	r3, #2
   1d034:	9300      	str	r3, [sp, #0]
   1d036:	2308      	movs	r3, #8
   1d038:	687a      	ldr	r2, [r7, #4]
   1d03a:	68b9      	ldr	r1, [r7, #8]
   1d03c:	68f8      	ldr	r0, [r7, #12]
   1d03e:	f7ff fca3 	bl	1c988 <sbc_pack_frame_internal>
   1d042:	4603      	mov	r3, r0
				data, frame, len, 8, 2, joint);
	}
}
   1d044:	4618      	mov	r0, r3
   1d046:	3718      	adds	r7, #24
   1d048:	46bd      	mov	sp, r7
   1d04a:	bd80      	pop	{r7, pc}

0001d04c <msbc_pack_frame>:

static ssize_t msbc_pack_frame(uint8_t *data, struct sbc_frame *frame, size_t len, int joint)
{
   1d04c:	b580      	push	{r7, lr}
   1d04e:	b086      	sub	sp, #24
   1d050:	af02      	add	r7, sp, #8
   1d052:	60f8      	str	r0, [r7, #12]
   1d054:	60b9      	str	r1, [r7, #8]
   1d056:	607a      	str	r2, [r7, #4]
   1d058:	603b      	str	r3, [r7, #0]
	data[0] = MSBC_SYNCWORD;
   1d05a:	68fb      	ldr	r3, [r7, #12]
   1d05c:	22ad      	movs	r2, #173	; 0xad
   1d05e:	701a      	strb	r2, [r3, #0]
	data[1] = 0;
   1d060:	68fb      	ldr	r3, [r7, #12]
   1d062:	3301      	adds	r3, #1
   1d064:	2200      	movs	r2, #0
   1d066:	701a      	strb	r2, [r3, #0]
	data[2] = 0;
   1d068:	68fb      	ldr	r3, [r7, #12]
   1d06a:	3302      	adds	r3, #2
   1d06c:	2200      	movs	r2, #0
   1d06e:	701a      	strb	r2, [r3, #0]

	return sbc_pack_frame_internal(data, frame, len, 8, 1, joint);
   1d070:	683b      	ldr	r3, [r7, #0]
   1d072:	9301      	str	r3, [sp, #4]
   1d074:	2301      	movs	r3, #1
   1d076:	9300      	str	r3, [sp, #0]
   1d078:	2308      	movs	r3, #8
   1d07a:	687a      	ldr	r2, [r7, #4]
   1d07c:	68b9      	ldr	r1, [r7, #8]
   1d07e:	68f8      	ldr	r0, [r7, #12]
   1d080:	f7ff fc82 	bl	1c988 <sbc_pack_frame_internal>
   1d084:	4603      	mov	r3, r0
}
   1d086:	4618      	mov	r0, r3
   1d088:	3710      	adds	r7, #16
   1d08a:	46bd      	mov	sp, r7
   1d08c:	bd80      	pop	{r7, pc}
	...

0001d090 <sbc_set_defaults>:
	ssize_t (*pack_frame)(uint8_t *data, struct sbc_frame *frame,
			size_t len, int joint);
};

static void sbc_set_defaults(sbc_t *sbc, unsigned long flags)
{
   1d090:	b480      	push	{r7}
   1d092:	b085      	sub	sp, #20
   1d094:	af00      	add	r7, sp, #0
   1d096:	6078      	str	r0, [r7, #4]
   1d098:	6039      	str	r1, [r7, #0]
	struct sbc_priv *priv = (struct sbc_priv *)sbc->priv; // cast by chen cai
   1d09a:	687b      	ldr	r3, [r7, #4]
   1d09c:	68db      	ldr	r3, [r3, #12]
   1d09e:	60fb      	str	r3, [r7, #12]

	if (priv->msbc) {
   1d0a0:	68fb      	ldr	r3, [r7, #12]
   1d0a2:	785b      	ldrb	r3, [r3, #1]
   1d0a4:	2b00      	cmp	r3, #0
   1d0a6:	d00c      	beq.n	1d0c2 <sbc_set_defaults+0x32>
		priv->pack_frame = msbc_pack_frame;
   1d0a8:	68fb      	ldr	r3, [r7, #12]
   1d0aa:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d0ae:	3314      	adds	r3, #20
   1d0b0:	4a17      	ldr	r2, [pc, #92]	; (1d110 <sbc_set_defaults+0x80>)
   1d0b2:	601a      	str	r2, [r3, #0]
		priv->unpack_frame = msbc_unpack_frame;
   1d0b4:	68fb      	ldr	r3, [r7, #12]
   1d0b6:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d0ba:	3310      	adds	r3, #16
   1d0bc:	4a15      	ldr	r2, [pc, #84]	; (1d114 <sbc_set_defaults+0x84>)
   1d0be:	601a      	str	r2, [r3, #0]
   1d0c0:	e00b      	b.n	1d0da <sbc_set_defaults+0x4a>
	} else {
		priv->pack_frame = sbc_pack_frame;
   1d0c2:	68fb      	ldr	r3, [r7, #12]
   1d0c4:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d0c8:	3314      	adds	r3, #20
   1d0ca:	4a13      	ldr	r2, [pc, #76]	; (1d118 <sbc_set_defaults+0x88>)
   1d0cc:	601a      	str	r2, [r3, #0]
		priv->unpack_frame = sbc_unpack_frame;
   1d0ce:	68fb      	ldr	r3, [r7, #12]
   1d0d0:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d0d4:	3310      	adds	r3, #16
   1d0d6:	4a11      	ldr	r2, [pc, #68]	; (1d11c <sbc_set_defaults+0x8c>)
   1d0d8:	601a      	str	r2, [r3, #0]
	}

	sbc->flags = flags;
   1d0da:	687b      	ldr	r3, [r7, #4]
   1d0dc:	683a      	ldr	r2, [r7, #0]
   1d0de:	601a      	str	r2, [r3, #0]
	sbc->frequency = SBC_FREQ_44100;
   1d0e0:	687b      	ldr	r3, [r7, #4]
   1d0e2:	2202      	movs	r2, #2
   1d0e4:	711a      	strb	r2, [r3, #4]
	sbc->mode = SBC_MODE_STEREO;
   1d0e6:	687b      	ldr	r3, [r7, #4]
   1d0e8:	2202      	movs	r2, #2
   1d0ea:	71da      	strb	r2, [r3, #7]
	sbc->subbands = SBC_SB_8;
   1d0ec:	687b      	ldr	r3, [r7, #4]
   1d0ee:	2201      	movs	r2, #1
   1d0f0:	719a      	strb	r2, [r3, #6]
	sbc->blocks = SBC_BLK_16;
   1d0f2:	687b      	ldr	r3, [r7, #4]
   1d0f4:	2203      	movs	r2, #3
   1d0f6:	715a      	strb	r2, [r3, #5]
	sbc->bitpool = 32;
   1d0f8:	687b      	ldr	r3, [r7, #4]
   1d0fa:	2220      	movs	r2, #32
   1d0fc:	725a      	strb	r2, [r3, #9]
#if __BYTE_ORDER == __LITTLE_ENDIAN
	sbc->endian = SBC_LE;
   1d0fe:	687b      	ldr	r3, [r7, #4]
   1d100:	2200      	movs	r2, #0
   1d102:	729a      	strb	r2, [r3, #10]
#elif __BYTE_ORDER == __BIG_ENDIAN
	sbc->endian = SBC_BE;
#else
#error "Unknown byte order"
#endif
}
   1d104:	bf00      	nop
   1d106:	3714      	adds	r7, #20
   1d108:	46bd      	mov	sp, r7
   1d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d10e:	4770      	bx	lr
   1d110:	0001d04d 	.word	0x0001d04d
   1d114:	0001c789 	.word	0x0001c789
   1d118:	0001ced3 	.word	0x0001ced3
   1d11c:	0001c631 	.word	0x0001c631

0001d120 <sbc_init>:
static uint8_t sbc_static_init_buffer[sizeof(struct sbc_priv) + SBC_ALIGN_MASK];

int sbc_init(sbc_t *sbc, unsigned long flags)
{
   1d120:	b580      	push	{r7, lr}
   1d122:	b082      	sub	sp, #8
   1d124:	af00      	add	r7, sp, #0
   1d126:	6078      	str	r0, [r7, #4]
   1d128:	6039      	str	r1, [r7, #0]
	if (!sbc)
   1d12a:	687b      	ldr	r3, [r7, #4]
   1d12c:	2b00      	cmp	r3, #0
   1d12e:	d102      	bne.n	1d136 <sbc_init+0x16>
		return -EIO;
   1d130:	f06f 0304 	mvn.w	r3, #4
   1d134:	e029      	b.n	1d18a <sbc_init+0x6a>

	memset(sbc, 0, sizeof(sbc_t));
   1d136:	2214      	movs	r2, #20
   1d138:	2100      	movs	r1, #0
   1d13a:	6878      	ldr	r0, [r7, #4]
   1d13c:	f7ef f90e 	bl	c35c <memset>

	//sbc->priv_alloc_base = malloc(sizeof(struct sbc_priv) + SBC_ALIGN_MASK);
	memset(sbc_static_init_buffer, 0, sizeof(sbc_static_init_buffer));
   1d140:	f241 52cf 	movw	r2, #5583	; 0x15cf
   1d144:	2100      	movs	r1, #0
   1d146:	4813      	ldr	r0, [pc, #76]	; (1d194 <sbc_init+0x74>)
   1d148:	f7ef f908 	bl	c35c <memset>
	
	sbc->priv_alloc_base = (void *)sbc_static_init_buffer;
   1d14c:	687b      	ldr	r3, [r7, #4]
   1d14e:	4a11      	ldr	r2, [pc, #68]	; (1d194 <sbc_init+0x74>)
   1d150:	611a      	str	r2, [r3, #16]
	if (!sbc->priv_alloc_base)
   1d152:	687b      	ldr	r3, [r7, #4]
   1d154:	691b      	ldr	r3, [r3, #16]
   1d156:	2b00      	cmp	r3, #0
   1d158:	d102      	bne.n	1d160 <sbc_init+0x40>
		return -ENOMEM;
   1d15a:	f06f 030b 	mvn.w	r3, #11
   1d15e:	e014      	b.n	1d18a <sbc_init+0x6a>

	sbc->priv = (void *) (((uintptr_t) sbc->priv_alloc_base +
   1d160:	687b      	ldr	r3, [r7, #4]
   1d162:	691b      	ldr	r3, [r3, #16]
   1d164:	330f      	adds	r3, #15
			SBC_ALIGN_MASK) & ~((uintptr_t) SBC_ALIGN_MASK));
   1d166:	f023 030f 	bic.w	r3, r3, #15
	sbc->priv = (void *) (((uintptr_t) sbc->priv_alloc_base +
   1d16a:	461a      	mov	r2, r3
   1d16c:	687b      	ldr	r3, [r7, #4]
   1d16e:	60da      	str	r2, [r3, #12]

	memset(sbc->priv, 0, sizeof(struct sbc_priv));
   1d170:	687b      	ldr	r3, [r7, #4]
   1d172:	68db      	ldr	r3, [r3, #12]
   1d174:	f44f 52ae 	mov.w	r2, #5568	; 0x15c0
   1d178:	2100      	movs	r1, #0
   1d17a:	4618      	mov	r0, r3
   1d17c:	f7ef f8ee 	bl	c35c <memset>

	sbc_set_defaults(sbc, flags);
   1d180:	6839      	ldr	r1, [r7, #0]
   1d182:	6878      	ldr	r0, [r7, #4]
   1d184:	f7ff ff84 	bl	1d090 <sbc_set_defaults>
	sbc->subbands = SBC_SB_8;
	sbc->mode = SBC_MODE_MONO;
	sbc->allocation = SBC_AM_LOUDNESS;//SBC_AM_SNR;
	sbc->bitpool = 32;//28;//156 bytes input 64 bytes output
	#endif
	return 0;
   1d188:	2300      	movs	r3, #0
}
   1d18a:	4618      	mov	r0, r3
   1d18c:	3708      	adds	r7, #8
   1d18e:	46bd      	mov	sp, r7
   1d190:	bd80      	pop	{r7, pc}
   1d192:	bf00      	nop
   1d194:	10019940 	.word	0x10019940

0001d198 <sbc_init_msbc>:

int sbc_init_msbc(sbc_t *sbc, unsigned long flags)
{
   1d198:	b580      	push	{r7, lr}
   1d19a:	b084      	sub	sp, #16
   1d19c:	af00      	add	r7, sp, #0
   1d19e:	6078      	str	r0, [r7, #4]
   1d1a0:	6039      	str	r1, [r7, #0]
	struct sbc_priv *priv;

	if (!sbc)
   1d1a2:	687b      	ldr	r3, [r7, #4]
   1d1a4:	2b00      	cmp	r3, #0
   1d1a6:	d102      	bne.n	1d1ae <sbc_init_msbc+0x16>
		return -EIO;
   1d1a8:	f06f 0304 	mvn.w	r3, #4
   1d1ac:	e041      	b.n	1d232 <sbc_init_msbc+0x9a>

	memset(sbc, 0, sizeof(sbc_t));
   1d1ae:	2214      	movs	r2, #20
   1d1b0:	2100      	movs	r1, #0
   1d1b2:	6878      	ldr	r0, [r7, #4]
   1d1b4:	f7ef f8d2 	bl	c35c <memset>

	//sbc->priv_alloc_base = malloc(sizeof(struct sbc_priv) + SBC_ALIGN_MASK);
	memset(sbc_static_init_buffer, 0, sizeof(sbc_static_init_buffer));
   1d1b8:	f241 52cf 	movw	r2, #5583	; 0x15cf
   1d1bc:	2100      	movs	r1, #0
   1d1be:	481f      	ldr	r0, [pc, #124]	; (1d23c <sbc_init_msbc+0xa4>)
   1d1c0:	f7ef f8cc 	bl	c35c <memset>
	sbc->priv_alloc_base = (void *)sbc_static_init_buffer;
   1d1c4:	687b      	ldr	r3, [r7, #4]
   1d1c6:	4a1d      	ldr	r2, [pc, #116]	; (1d23c <sbc_init_msbc+0xa4>)
   1d1c8:	611a      	str	r2, [r3, #16]
	
	if (!sbc->priv_alloc_base)
   1d1ca:	687b      	ldr	r3, [r7, #4]
   1d1cc:	691b      	ldr	r3, [r3, #16]
   1d1ce:	2b00      	cmp	r3, #0
   1d1d0:	d102      	bne.n	1d1d8 <sbc_init_msbc+0x40>
		return -ENOMEM;
   1d1d2:	f06f 030b 	mvn.w	r3, #11
   1d1d6:	e02c      	b.n	1d232 <sbc_init_msbc+0x9a>

	sbc->priv = (void *) (((uintptr_t) sbc->priv_alloc_base +
   1d1d8:	687b      	ldr	r3, [r7, #4]
   1d1da:	691b      	ldr	r3, [r3, #16]
   1d1dc:	330f      	adds	r3, #15
			SBC_ALIGN_MASK) & ~((uintptr_t) SBC_ALIGN_MASK));
   1d1de:	f023 030f 	bic.w	r3, r3, #15
	sbc->priv = (void *) (((uintptr_t) sbc->priv_alloc_base +
   1d1e2:	461a      	mov	r2, r3
   1d1e4:	687b      	ldr	r3, [r7, #4]
   1d1e6:	60da      	str	r2, [r3, #12]

	memset(sbc->priv, 0, sizeof(struct sbc_priv));
   1d1e8:	687b      	ldr	r3, [r7, #4]
   1d1ea:	68db      	ldr	r3, [r3, #12]
   1d1ec:	f44f 52ae 	mov.w	r2, #5568	; 0x15c0
   1d1f0:	2100      	movs	r1, #0
   1d1f2:	4618      	mov	r0, r3
   1d1f4:	f7ef f8b2 	bl	c35c <memset>

	priv = (struct sbc_priv*)sbc->priv; // cast by chencai
   1d1f8:	687b      	ldr	r3, [r7, #4]
   1d1fa:	68db      	ldr	r3, [r3, #12]
   1d1fc:	60fb      	str	r3, [r7, #12]
	priv->msbc = true;
   1d1fe:	68fb      	ldr	r3, [r7, #12]
   1d200:	2201      	movs	r2, #1
   1d202:	705a      	strb	r2, [r3, #1]

	sbc_set_defaults(sbc, flags);
   1d204:	6839      	ldr	r1, [r7, #0]
   1d206:	6878      	ldr	r0, [r7, #4]
   1d208:	f7ff ff42 	bl	1d090 <sbc_set_defaults>

	sbc->frequency = SBC_FREQ_16000;
   1d20c:	687b      	ldr	r3, [r7, #4]
   1d20e:	2200      	movs	r2, #0
   1d210:	711a      	strb	r2, [r3, #4]
	sbc->blocks = MSBC_BLOCKS;
   1d212:	687b      	ldr	r3, [r7, #4]
   1d214:	220f      	movs	r2, #15
   1d216:	715a      	strb	r2, [r3, #5]
	sbc->subbands = SBC_SB_8;
   1d218:	687b      	ldr	r3, [r7, #4]
   1d21a:	2201      	movs	r2, #1
   1d21c:	719a      	strb	r2, [r3, #6]
	sbc->mode = SBC_MODE_MONO;
   1d21e:	687b      	ldr	r3, [r7, #4]
   1d220:	2200      	movs	r2, #0
   1d222:	71da      	strb	r2, [r3, #7]
	sbc->allocation = SBC_AM_LOUDNESS;
   1d224:	687b      	ldr	r3, [r7, #4]
   1d226:	2200      	movs	r2, #0
   1d228:	721a      	strb	r2, [r3, #8]
	sbc->bitpool = 26;
   1d22a:	687b      	ldr	r3, [r7, #4]
   1d22c:	221a      	movs	r2, #26
   1d22e:	725a      	strb	r2, [r3, #9]

	return 0;
   1d230:	2300      	movs	r3, #0
}
   1d232:	4618      	mov	r0, r3
   1d234:	3710      	adds	r7, #16
   1d236:	46bd      	mov	sp, r7
   1d238:	bd80      	pop	{r7, pc}
   1d23a:	bf00      	nop
   1d23c:	10019940 	.word	0x10019940

0001d240 <sbc_encoder_init>:
	return framelen;
}

static void sbc_encoder_init(bool msbc, struct sbc_encoder_state *state,
						const struct sbc_frame *frame)
{
   1d240:	b580      	push	{r7, lr}
   1d242:	b084      	sub	sp, #16
   1d244:	af00      	add	r7, sp, #0
   1d246:	4603      	mov	r3, r0
   1d248:	60b9      	str	r1, [r7, #8]
   1d24a:	607a      	str	r2, [r7, #4]
   1d24c:	73fb      	strb	r3, [r7, #15]
	memset(&state->X, 0, sizeof(state->X));
   1d24e:	68bb      	ldr	r3, [r7, #8]
   1d250:	3310      	adds	r3, #16
   1d252:	f44f 62a4 	mov.w	r2, #1312	; 0x520
   1d256:	2100      	movs	r1, #0
   1d258:	4618      	mov	r0, r3
   1d25a:	f7ef f87f 	bl	c35c <memset>
	state->position = (SBC_X_BUFFER_SIZE - frame->subbands * 9) & ~7;
   1d25e:	687b      	ldr	r3, [r7, #4]
   1d260:	7c5b      	ldrb	r3, [r3, #17]
   1d262:	461a      	mov	r2, r3
   1d264:	4613      	mov	r3, r2
   1d266:	075b      	lsls	r3, r3, #29
   1d268:	1a9b      	subs	r3, r3, r2
   1d26a:	00db      	lsls	r3, r3, #3
   1d26c:	1a9b      	subs	r3, r3, r2
   1d26e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
   1d272:	f023 0207 	bic.w	r2, r3, #7
   1d276:	68bb      	ldr	r3, [r7, #8]
   1d278:	601a      	str	r2, [r3, #0]
	if (msbc)
   1d27a:	7bfb      	ldrb	r3, [r7, #15]
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	d003      	beq.n	1d288 <sbc_encoder_init+0x48>
		state->increment = 1;
   1d280:	68bb      	ldr	r3, [r7, #8]
   1d282:	2201      	movs	r2, #1
   1d284:	711a      	strb	r2, [r3, #4]
   1d286:	e002      	b.n	1d28e <sbc_encoder_init+0x4e>
	else
		state->increment = 4;
   1d288:	68bb      	ldr	r3, [r7, #8]
   1d28a:	2204      	movs	r2, #4
   1d28c:	711a      	strb	r2, [r3, #4]

	sbc_init_primitives(state);
   1d28e:	68b8      	ldr	r0, [r7, #8]
   1d290:	f002 fc5e 	bl	1fb50 <sbc_init_primitives>
}
   1d294:	bf00      	nop
   1d296:	3710      	adds	r7, #16
   1d298:	46bd      	mov	sp, r7
   1d29a:	bd80      	pop	{r7, pc}

0001d29c <sbc_encode>:

SBC_EXPORT ssize_t sbc_encode(sbc_t *sbc, const void *input, size_t input_len,
			void *output, size_t output_len, ssize_t *written)
{
   1d29c:	b5b0      	push	{r4, r5, r7, lr}
   1d29e:	b08c      	sub	sp, #48	; 0x30
   1d2a0:	af02      	add	r7, sp, #8
   1d2a2:	60f8      	str	r0, [r7, #12]
   1d2a4:	60b9      	str	r1, [r7, #8]
   1d2a6:	607a      	str	r2, [r7, #4]
   1d2a8:	603b      	str	r3, [r7, #0]
	ssize_t framelen;
	int (*sbc_enc_process_input)(int position,
			const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
			int nsamples, int nchannels);

	if (!sbc || !input)
   1d2aa:	68fb      	ldr	r3, [r7, #12]
   1d2ac:	2b00      	cmp	r3, #0
   1d2ae:	d002      	beq.n	1d2b6 <sbc_encode+0x1a>
   1d2b0:	68bb      	ldr	r3, [r7, #8]
   1d2b2:	2b00      	cmp	r3, #0
   1d2b4:	d102      	bne.n	1d2bc <sbc_encode+0x20>
		return -EIO;
   1d2b6:	f06f 0304 	mvn.w	r3, #4
   1d2ba:	e135      	b.n	1d528 <sbc_encode+0x28c>

	priv = (struct sbc_priv*)sbc->priv; // cast by chencai
   1d2bc:	68fb      	ldr	r3, [r7, #12]
   1d2be:	68db      	ldr	r3, [r3, #12]
   1d2c0:	61fb      	str	r3, [r7, #28]

	if (written)
   1d2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d2c4:	2b00      	cmp	r3, #0
   1d2c6:	d002      	beq.n	1d2ce <sbc_encode+0x32>
		*written = 0;
   1d2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d2ca:	2200      	movs	r2, #0
   1d2cc:	601a      	str	r2, [r3, #0]

	if (!priv->init) {
   1d2ce:	69fb      	ldr	r3, [r7, #28]
   1d2d0:	781b      	ldrb	r3, [r3, #0]
   1d2d2:	2b00      	cmp	r3, #0
   1d2d4:	d15b      	bne.n	1d38e <sbc_encode+0xf2>
		priv->frame.frequency = sbc->frequency;
   1d2d6:	68fb      	ldr	r3, [r7, #12]
   1d2d8:	791a      	ldrb	r2, [r3, #4]
   1d2da:	69fb      	ldr	r3, [r7, #28]
   1d2dc:	741a      	strb	r2, [r3, #16]
		priv->frame.mode = sbc->mode;
   1d2de:	68fb      	ldr	r3, [r7, #12]
   1d2e0:	79db      	ldrb	r3, [r3, #7]
   1d2e2:	461a      	mov	r2, r3
   1d2e4:	69fb      	ldr	r3, [r7, #28]
   1d2e6:	615a      	str	r2, [r3, #20]
		priv->frame.channels = sbc->mode == SBC_MODE_MONO ? 1 : 2;
   1d2e8:	68fb      	ldr	r3, [r7, #12]
   1d2ea:	79db      	ldrb	r3, [r3, #7]
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	d101      	bne.n	1d2f4 <sbc_encode+0x58>
   1d2f0:	2201      	movs	r2, #1
   1d2f2:	e000      	b.n	1d2f6 <sbc_encode+0x5a>
   1d2f4:	2202      	movs	r2, #2
   1d2f6:	69fb      	ldr	r3, [r7, #28]
   1d2f8:	761a      	strb	r2, [r3, #24]
		priv->frame.allocation = sbc->allocation;
   1d2fa:	68fb      	ldr	r3, [r7, #12]
   1d2fc:	7a1b      	ldrb	r3, [r3, #8]
   1d2fe:	461a      	mov	r2, r3
   1d300:	69fb      	ldr	r3, [r7, #28]
   1d302:	61da      	str	r2, [r3, #28]
		priv->frame.subband_mode = sbc->subbands;
   1d304:	68fb      	ldr	r3, [r7, #12]
   1d306:	799a      	ldrb	r2, [r3, #6]
   1d308:	69fb      	ldr	r3, [r7, #28]
   1d30a:	f883 2020 	strb.w	r2, [r3, #32]
		priv->frame.subbands = sbc->subbands ? 8 : 4;
   1d30e:	68fb      	ldr	r3, [r7, #12]
   1d310:	799b      	ldrb	r3, [r3, #6]
   1d312:	2b00      	cmp	r3, #0
   1d314:	d001      	beq.n	1d31a <sbc_encode+0x7e>
   1d316:	2208      	movs	r2, #8
   1d318:	e000      	b.n	1d31c <sbc_encode+0x80>
   1d31a:	2204      	movs	r2, #4
   1d31c:	69fb      	ldr	r3, [r7, #28]
   1d31e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		priv->frame.block_mode = sbc->blocks;
   1d322:	68fb      	ldr	r3, [r7, #12]
   1d324:	795a      	ldrb	r2, [r3, #5]
   1d326:	69fb      	ldr	r3, [r7, #28]
   1d328:	745a      	strb	r2, [r3, #17]
		if (priv->msbc)
   1d32a:	69fb      	ldr	r3, [r7, #28]
   1d32c:	785b      	ldrb	r3, [r3, #1]
   1d32e:	2b00      	cmp	r3, #0
   1d330:	d003      	beq.n	1d33a <sbc_encode+0x9e>
			priv->frame.blocks = MSBC_BLOCKS;
   1d332:	69fb      	ldr	r3, [r7, #28]
   1d334:	220f      	movs	r2, #15
   1d336:	749a      	strb	r2, [r3, #18]
   1d338:	e007      	b.n	1d34a <sbc_encode+0xae>
		else
			priv->frame.blocks = 4 + (sbc->blocks * 4);
   1d33a:	68fb      	ldr	r3, [r7, #12]
   1d33c:	795b      	ldrb	r3, [r3, #5]
   1d33e:	3301      	adds	r3, #1
   1d340:	b2db      	uxtb	r3, r3
   1d342:	009b      	lsls	r3, r3, #2
   1d344:	b2da      	uxtb	r2, r3
   1d346:	69fb      	ldr	r3, [r7, #28]
   1d348:	749a      	strb	r2, [r3, #18]
		priv->frame.bitpool = sbc->bitpool;
   1d34a:	68fb      	ldr	r3, [r7, #12]
   1d34c:	7a5a      	ldrb	r2, [r3, #9]
   1d34e:	69fb      	ldr	r3, [r7, #28]
   1d350:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		priv->frame.codesize = sbc_get_codesize(sbc);
   1d354:	68f8      	ldr	r0, [r7, #12]
   1d356:	f000 f966 	bl	1d626 <sbc_get_codesize>
   1d35a:	4603      	mov	r3, r0
   1d35c:	b29a      	uxth	r2, r3
   1d35e:	69fb      	ldr	r3, [r7, #28]
   1d360:	849a      	strh	r2, [r3, #36]	; 0x24
		priv->frame.length = sbc_get_frame_length(sbc);
   1d362:	68f8      	ldr	r0, [r7, #12]
   1d364:	f000 f8e4 	bl	1d530 <sbc_get_frame_length>
   1d368:	4603      	mov	r3, r0
   1d36a:	b29a      	uxth	r2, r3
   1d36c:	69fb      	ldr	r3, [r7, #28]
   1d36e:	84da      	strh	r2, [r3, #38]	; 0x26

		sbc_encoder_init(priv->msbc, &priv->enc_state, &priv->frame);
   1d370:	69fb      	ldr	r3, [r7, #28]
   1d372:	7858      	ldrb	r0, [r3, #1]
   1d374:	69fb      	ldr	r3, [r7, #28]
   1d376:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
   1d37a:	3310      	adds	r3, #16
   1d37c:	69fa      	ldr	r2, [r7, #28]
   1d37e:	3210      	adds	r2, #16
   1d380:	4619      	mov	r1, r3
   1d382:	f7ff ff5d 	bl	1d240 <sbc_encoder_init>
		priv->init = true;
   1d386:	69fb      	ldr	r3, [r7, #28]
   1d388:	2201      	movs	r2, #1
   1d38a:	701a      	strb	r2, [r3, #0]
   1d38c:	e012      	b.n	1d3b4 <sbc_encode+0x118>
	} else if (priv->frame.bitpool != sbc->bitpool) {
   1d38e:	69fb      	ldr	r3, [r7, #28]
   1d390:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   1d394:	68fb      	ldr	r3, [r7, #12]
   1d396:	7a5b      	ldrb	r3, [r3, #9]
   1d398:	429a      	cmp	r2, r3
   1d39a:	d00b      	beq.n	1d3b4 <sbc_encode+0x118>
		priv->frame.length = sbc_get_frame_length(sbc);
   1d39c:	68f8      	ldr	r0, [r7, #12]
   1d39e:	f000 f8c7 	bl	1d530 <sbc_get_frame_length>
   1d3a2:	4603      	mov	r3, r0
   1d3a4:	b29a      	uxth	r2, r3
   1d3a6:	69fb      	ldr	r3, [r7, #28]
   1d3a8:	84da      	strh	r2, [r3, #38]	; 0x26
		priv->frame.bitpool = sbc->bitpool;
   1d3aa:	68fb      	ldr	r3, [r7, #12]
   1d3ac:	7a5a      	ldrb	r2, [r3, #9]
   1d3ae:	69fb      	ldr	r3, [r7, #28]
   1d3b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}

	/* input must be large enough to encode a complete frame */
	if (input_len < priv->frame.codesize)
   1d3b4:	69fb      	ldr	r3, [r7, #28]
   1d3b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1d3b8:	461a      	mov	r2, r3
   1d3ba:	687b      	ldr	r3, [r7, #4]
   1d3bc:	429a      	cmp	r2, r3
   1d3be:	d901      	bls.n	1d3c4 <sbc_encode+0x128>
		return 0;
   1d3c0:	2300      	movs	r3, #0
   1d3c2:	e0b1      	b.n	1d528 <sbc_encode+0x28c>

	/* output must be large enough to receive the encoded frame */
	if (!output || output_len < priv->frame.length)
   1d3c4:	683b      	ldr	r3, [r7, #0]
   1d3c6:	2b00      	cmp	r3, #0
   1d3c8:	d005      	beq.n	1d3d6 <sbc_encode+0x13a>
   1d3ca:	69fb      	ldr	r3, [r7, #28]
   1d3cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d3ce:	461a      	mov	r2, r3
   1d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d3d2:	429a      	cmp	r2, r3
   1d3d4:	d902      	bls.n	1d3dc <sbc_encode+0x140>
		return -ENOSPC;
   1d3d6:	f06f 031b 	mvn.w	r3, #27
   1d3da:	e0a5      	b.n	1d528 <sbc_encode+0x28c>

	/* Select the needed input data processing function and call it */
	if (priv->frame.subbands == 8) {
   1d3dc:	69fb      	ldr	r3, [r7, #28]
   1d3de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1d3e2:	2b08      	cmp	r3, #8
   1d3e4:	d111      	bne.n	1d40a <sbc_encode+0x16e>
		if (sbc->endian == SBC_BE)
   1d3e6:	68fb      	ldr	r3, [r7, #12]
   1d3e8:	7a9b      	ldrb	r3, [r3, #10]
   1d3ea:	2b01      	cmp	r3, #1
   1d3ec:	d106      	bne.n	1d3fc <sbc_encode+0x160>
			sbc_enc_process_input =
   1d3ee:	69fb      	ldr	r3, [r7, #28]
   1d3f0:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d3f4:	3314      	adds	r3, #20
   1d3f6:	681b      	ldr	r3, [r3, #0]
   1d3f8:	623b      	str	r3, [r7, #32]
   1d3fa:	e017      	b.n	1d42c <sbc_encode+0x190>
				priv->enc_state.sbc_enc_process_input_8s_be;
		else
			sbc_enc_process_input =
   1d3fc:	69fb      	ldr	r3, [r7, #28]
   1d3fe:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d402:	3310      	adds	r3, #16
   1d404:	681b      	ldr	r3, [r3, #0]
   1d406:	623b      	str	r3, [r7, #32]
   1d408:	e010      	b.n	1d42c <sbc_encode+0x190>
				priv->enc_state.sbc_enc_process_input_8s_le;
	} else {
		if (sbc->endian == SBC_BE)
   1d40a:	68fb      	ldr	r3, [r7, #12]
   1d40c:	7a9b      	ldrb	r3, [r3, #10]
   1d40e:	2b01      	cmp	r3, #1
   1d410:	d106      	bne.n	1d420 <sbc_encode+0x184>
			sbc_enc_process_input =
   1d412:	69fb      	ldr	r3, [r7, #28]
   1d414:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d418:	330c      	adds	r3, #12
   1d41a:	681b      	ldr	r3, [r3, #0]
   1d41c:	623b      	str	r3, [r7, #32]
   1d41e:	e005      	b.n	1d42c <sbc_encode+0x190>
				priv->enc_state.sbc_enc_process_input_4s_be;
		else
			sbc_enc_process_input =
   1d420:	69fb      	ldr	r3, [r7, #28]
   1d422:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d426:	3308      	adds	r3, #8
   1d428:	681b      	ldr	r3, [r3, #0]
   1d42a:	623b      	str	r3, [r7, #32]
				priv->enc_state.sbc_enc_process_input_4s_le;
	}

	priv->enc_state.position = sbc_enc_process_input(
   1d42c:	69fb      	ldr	r3, [r7, #28]
   1d42e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
   1d432:	3310      	adds	r3, #16
   1d434:	6818      	ldr	r0, [r3, #0]
		priv->enc_state.position, (const uint8_t *) input,
		priv->enc_state.X, priv->frame.subbands * priv->frame.blocks,
   1d436:	69fb      	ldr	r3, [r7, #28]
   1d438:	f503 5283 	add.w	r2, r3, #4192	; 0x1060
   1d43c:	69fb      	ldr	r3, [r7, #28]
   1d43e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1d442:	4619      	mov	r1, r3
   1d444:	69fb      	ldr	r3, [r7, #28]
   1d446:	7c9b      	ldrb	r3, [r3, #18]
	priv->enc_state.position = sbc_enc_process_input(
   1d448:	fb03 f101 	mul.w	r1, r3, r1
		priv->frame.channels);
   1d44c:	69fb      	ldr	r3, [r7, #28]
   1d44e:	7e1b      	ldrb	r3, [r3, #24]
	priv->enc_state.position = sbc_enc_process_input(
   1d450:	9300      	str	r3, [sp, #0]
   1d452:	6a3c      	ldr	r4, [r7, #32]
   1d454:	460b      	mov	r3, r1
   1d456:	68b9      	ldr	r1, [r7, #8]
   1d458:	47a0      	blx	r4
   1d45a:	4602      	mov	r2, r0
   1d45c:	69fb      	ldr	r3, [r7, #28]
   1d45e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
   1d462:	3310      	adds	r3, #16
   1d464:	601a      	str	r2, [r3, #0]

	samples = sbc_analyze_audio(&priv->enc_state, &priv->frame);
   1d466:	69fb      	ldr	r3, [r7, #28]
   1d468:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
   1d46c:	3310      	adds	r3, #16
   1d46e:	69fa      	ldr	r2, [r7, #28]
   1d470:	3210      	adds	r2, #16
   1d472:	4611      	mov	r1, r2
   1d474:	4618      	mov	r0, r3
   1d476:	f7ff f9cf 	bl	1c818 <sbc_analyze_audio>
   1d47a:	61b8      	str	r0, [r7, #24]

	if (priv->frame.mode == JOINT_STEREO) {
   1d47c:	69fb      	ldr	r3, [r7, #28]
   1d47e:	695b      	ldr	r3, [r3, #20]
   1d480:	2b03      	cmp	r3, #3
   1d482:	d120      	bne.n	1d4c6 <sbc_encode+0x22a>
		int j = priv->enc_state.sbc_calc_scalefactors_j(
   1d484:	69fb      	ldr	r3, [r7, #28]
   1d486:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d48a:	331c      	adds	r3, #28
   1d48c:	681c      	ldr	r4, [r3, #0]
			priv->frame.sb_sample_f, priv->frame.scale_factor,
   1d48e:	69fb      	ldr	r3, [r7, #28]
   1d490:	f103 0070 	add.w	r0, r3, #112	; 0x70
   1d494:	69fb      	ldr	r3, [r7, #28]
   1d496:	f103 0130 	add.w	r1, r3, #48	; 0x30
			priv->frame.blocks, priv->frame.subbands);
   1d49a:	69fb      	ldr	r3, [r7, #28]
   1d49c:	7c9b      	ldrb	r3, [r3, #18]
		int j = priv->enc_state.sbc_calc_scalefactors_j(
   1d49e:	461a      	mov	r2, r3
			priv->frame.blocks, priv->frame.subbands);
   1d4a0:	69fb      	ldr	r3, [r7, #28]
   1d4a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		int j = priv->enc_state.sbc_calc_scalefactors_j(
   1d4a6:	47a0      	blx	r4
   1d4a8:	6178      	str	r0, [r7, #20]
		framelen = priv->pack_frame((uint8_t*)output,
   1d4aa:	69fb      	ldr	r3, [r7, #28]
   1d4ac:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d4b0:	3314      	adds	r3, #20
   1d4b2:	681c      	ldr	r4, [r3, #0]
   1d4b4:	69fb      	ldr	r3, [r7, #28]
   1d4b6:	f103 0110 	add.w	r1, r3, #16
   1d4ba:	697b      	ldr	r3, [r7, #20]
   1d4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1d4be:	6838      	ldr	r0, [r7, #0]
   1d4c0:	47a0      	blx	r4
   1d4c2:	6278      	str	r0, [r7, #36]	; 0x24
   1d4c4:	e023      	b.n	1d50e <sbc_encode+0x272>
				&priv->frame, output_len, j); // cast by chencai
	} else {
		priv->enc_state.sbc_calc_scalefactors(
   1d4c6:	69fb      	ldr	r3, [r7, #28]
   1d4c8:	f503 53ac 	add.w	r3, r3, #5504	; 0x1580
   1d4cc:	3318      	adds	r3, #24
   1d4ce:	681c      	ldr	r4, [r3, #0]
			priv->frame.sb_sample_f, priv->frame.scale_factor,
   1d4d0:	69fb      	ldr	r3, [r7, #28]
   1d4d2:	f103 0070 	add.w	r0, r3, #112	; 0x70
   1d4d6:	69fb      	ldr	r3, [r7, #28]
   1d4d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
			priv->frame.blocks, priv->frame.channels,
   1d4dc:	69fb      	ldr	r3, [r7, #28]
   1d4de:	7c9b      	ldrb	r3, [r3, #18]
		priv->enc_state.sbc_calc_scalefactors(
   1d4e0:	461a      	mov	r2, r3
			priv->frame.blocks, priv->frame.channels,
   1d4e2:	69fb      	ldr	r3, [r7, #28]
   1d4e4:	7e1b      	ldrb	r3, [r3, #24]
		priv->enc_state.sbc_calc_scalefactors(
   1d4e6:	461d      	mov	r5, r3
			priv->frame.subbands);
   1d4e8:	69fb      	ldr	r3, [r7, #28]
   1d4ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		priv->enc_state.sbc_calc_scalefactors(
   1d4ee:	9300      	str	r3, [sp, #0]
   1d4f0:	462b      	mov	r3, r5
   1d4f2:	47a0      	blx	r4
		framelen = priv->pack_frame((uint8_t*)output,
   1d4f4:	69fb      	ldr	r3, [r7, #28]
   1d4f6:	f503 53ad 	add.w	r3, r3, #5536	; 0x15a0
   1d4fa:	3314      	adds	r3, #20
   1d4fc:	681c      	ldr	r4, [r3, #0]
   1d4fe:	69fb      	ldr	r3, [r7, #28]
   1d500:	f103 0110 	add.w	r1, r3, #16
   1d504:	2300      	movs	r3, #0
   1d506:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1d508:	6838      	ldr	r0, [r7, #0]
   1d50a:	47a0      	blx	r4
   1d50c:	6278      	str	r0, [r7, #36]	; 0x24
				&priv->frame, output_len, 0);
	}

	if (written)
   1d50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d510:	2b00      	cmp	r3, #0
   1d512:	d002      	beq.n	1d51a <sbc_encode+0x27e>
		*written = framelen;
   1d514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d518:	601a      	str	r2, [r3, #0]

	return samples * priv->frame.channels * 2;
   1d51a:	69fb      	ldr	r3, [r7, #28]
   1d51c:	7e1b      	ldrb	r3, [r3, #24]
   1d51e:	461a      	mov	r2, r3
   1d520:	69bb      	ldr	r3, [r7, #24]
   1d522:	fb03 f302 	mul.w	r3, r3, r2
   1d526:	005b      	lsls	r3, r3, #1
}
   1d528:	4618      	mov	r0, r3
   1d52a:	3728      	adds	r7, #40	; 0x28
   1d52c:	46bd      	mov	sp, r7
   1d52e:	bdb0      	pop	{r4, r5, r7, pc}

0001d530 <sbc_get_frame_length>:

	memset(sbc, 0, sizeof(sbc_t));
}

SBC_EXPORT size_t sbc_get_frame_length(sbc_t *sbc)
{
   1d530:	b480      	push	{r7}
   1d532:	b087      	sub	sp, #28
   1d534:	af00      	add	r7, sp, #0
   1d536:	6078      	str	r0, [r7, #4]
	int ret;
	uint8_t subbands, channels, blocks, joint, bitpool;
	struct sbc_priv *priv;

	priv = (struct sbc_priv*)sbc->priv; // cast by chencai
   1d538:	687b      	ldr	r3, [r7, #4]
   1d53a:	68db      	ldr	r3, [r3, #12]
   1d53c:	60fb      	str	r3, [r7, #12]
	if (priv->init && priv->frame.bitpool == sbc->bitpool)
   1d53e:	68fb      	ldr	r3, [r7, #12]
   1d540:	781b      	ldrb	r3, [r3, #0]
   1d542:	2b00      	cmp	r3, #0
   1d544:	d009      	beq.n	1d55a <sbc_get_frame_length+0x2a>
   1d546:	68fb      	ldr	r3, [r7, #12]
   1d548:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   1d54c:	687b      	ldr	r3, [r7, #4]
   1d54e:	7a5b      	ldrb	r3, [r3, #9]
   1d550:	429a      	cmp	r2, r3
   1d552:	d102      	bne.n	1d55a <sbc_get_frame_length+0x2a>
		return priv->frame.length;
   1d554:	68fb      	ldr	r3, [r7, #12]
   1d556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1d558:	e05f      	b.n	1d61a <sbc_get_frame_length+0xea>

	subbands = sbc->subbands ? 8 : 4;
   1d55a:	687b      	ldr	r3, [r7, #4]
   1d55c:	799b      	ldrb	r3, [r3, #6]
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d001      	beq.n	1d566 <sbc_get_frame_length+0x36>
   1d562:	2308      	movs	r3, #8
   1d564:	e000      	b.n	1d568 <sbc_get_frame_length+0x38>
   1d566:	2304      	movs	r3, #4
   1d568:	72fb      	strb	r3, [r7, #11]
	if (priv->msbc)
   1d56a:	68fb      	ldr	r3, [r7, #12]
   1d56c:	785b      	ldrb	r3, [r3, #1]
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d002      	beq.n	1d578 <sbc_get_frame_length+0x48>
		blocks = MSBC_BLOCKS;
   1d572:	230f      	movs	r3, #15
   1d574:	74fb      	strb	r3, [r7, #19]
   1d576:	e005      	b.n	1d584 <sbc_get_frame_length+0x54>
	else
		blocks = 4 + (sbc->blocks * 4);
   1d578:	687b      	ldr	r3, [r7, #4]
   1d57a:	795b      	ldrb	r3, [r3, #5]
   1d57c:	3301      	adds	r3, #1
   1d57e:	b2db      	uxtb	r3, r3
   1d580:	009b      	lsls	r3, r3, #2
   1d582:	74fb      	strb	r3, [r7, #19]
	channels = sbc->mode == SBC_MODE_MONO ? 1 : 2;
   1d584:	687b      	ldr	r3, [r7, #4]
   1d586:	79db      	ldrb	r3, [r3, #7]
   1d588:	2b00      	cmp	r3, #0
   1d58a:	d101      	bne.n	1d590 <sbc_get_frame_length+0x60>
   1d58c:	2301      	movs	r3, #1
   1d58e:	e000      	b.n	1d592 <sbc_get_frame_length+0x62>
   1d590:	2302      	movs	r3, #2
   1d592:	72bb      	strb	r3, [r7, #10]
	joint = sbc->mode == SBC_MODE_JOINT_STEREO ? 1 : 0;
   1d594:	687b      	ldr	r3, [r7, #4]
   1d596:	79db      	ldrb	r3, [r3, #7]
   1d598:	2b03      	cmp	r3, #3
   1d59a:	bf0c      	ite	eq
   1d59c:	2301      	moveq	r3, #1
   1d59e:	2300      	movne	r3, #0
   1d5a0:	b2db      	uxtb	r3, r3
   1d5a2:	727b      	strb	r3, [r7, #9]
	bitpool = sbc->bitpool;
   1d5a4:	687b      	ldr	r3, [r7, #4]
   1d5a6:	7a5b      	ldrb	r3, [r3, #9]
   1d5a8:	723b      	strb	r3, [r7, #8]

	ret = 4 + (4 * subbands * channels) / 8;
   1d5aa:	7afb      	ldrb	r3, [r7, #11]
   1d5ac:	009b      	lsls	r3, r3, #2
   1d5ae:	7aba      	ldrb	r2, [r7, #10]
   1d5b0:	fb02 f303 	mul.w	r3, r2, r3
   1d5b4:	2b00      	cmp	r3, #0
   1d5b6:	da00      	bge.n	1d5ba <sbc_get_frame_length+0x8a>
   1d5b8:	3307      	adds	r3, #7
   1d5ba:	10db      	asrs	r3, r3, #3
   1d5bc:	3304      	adds	r3, #4
   1d5be:	617b      	str	r3, [r7, #20]
	/* This term is not always evenly divide so we round it up */
	if (channels == 1 || sbc->mode == SBC_MODE_DUAL_CHANNEL)
   1d5c0:	7abb      	ldrb	r3, [r7, #10]
   1d5c2:	2b01      	cmp	r3, #1
   1d5c4:	d003      	beq.n	1d5ce <sbc_get_frame_length+0x9e>
   1d5c6:	687b      	ldr	r3, [r7, #4]
   1d5c8:	79db      	ldrb	r3, [r3, #7]
   1d5ca:	2b01      	cmp	r3, #1
   1d5cc:	d110      	bne.n	1d5f0 <sbc_get_frame_length+0xc0>
		ret += ((blocks * channels * bitpool) + 7) / 8;
   1d5ce:	7cfb      	ldrb	r3, [r7, #19]
   1d5d0:	7aba      	ldrb	r2, [r7, #10]
   1d5d2:	fb02 f303 	mul.w	r3, r2, r3
   1d5d6:	7a3a      	ldrb	r2, [r7, #8]
   1d5d8:	fb02 f303 	mul.w	r3, r2, r3
   1d5dc:	3307      	adds	r3, #7
   1d5de:	2b00      	cmp	r3, #0
   1d5e0:	da00      	bge.n	1d5e4 <sbc_get_frame_length+0xb4>
   1d5e2:	3307      	adds	r3, #7
   1d5e4:	10db      	asrs	r3, r3, #3
   1d5e6:	461a      	mov	r2, r3
   1d5e8:	697b      	ldr	r3, [r7, #20]
   1d5ea:	4413      	add	r3, r2
   1d5ec:	617b      	str	r3, [r7, #20]
   1d5ee:	e013      	b.n	1d618 <sbc_get_frame_length+0xe8>
	else
		ret += (((joint ? subbands : 0) + blocks * bitpool) + 7) / 8;
   1d5f0:	7a7b      	ldrb	r3, [r7, #9]
   1d5f2:	2b00      	cmp	r3, #0
   1d5f4:	d001      	beq.n	1d5fa <sbc_get_frame_length+0xca>
   1d5f6:	7afb      	ldrb	r3, [r7, #11]
   1d5f8:	e000      	b.n	1d5fc <sbc_get_frame_length+0xcc>
   1d5fa:	2300      	movs	r3, #0
   1d5fc:	7cfa      	ldrb	r2, [r7, #19]
   1d5fe:	7a39      	ldrb	r1, [r7, #8]
   1d600:	fb01 f202 	mul.w	r2, r1, r2
   1d604:	4413      	add	r3, r2
   1d606:	3307      	adds	r3, #7
   1d608:	2b00      	cmp	r3, #0
   1d60a:	da00      	bge.n	1d60e <sbc_get_frame_length+0xde>
   1d60c:	3307      	adds	r3, #7
   1d60e:	10db      	asrs	r3, r3, #3
   1d610:	461a      	mov	r2, r3
   1d612:	697b      	ldr	r3, [r7, #20]
   1d614:	4413      	add	r3, r2
   1d616:	617b      	str	r3, [r7, #20]

	return ret;
   1d618:	697b      	ldr	r3, [r7, #20]
}
   1d61a:	4618      	mov	r0, r3
   1d61c:	371c      	adds	r7, #28
   1d61e:	46bd      	mov	sp, r7
   1d620:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d624:	4770      	bx	lr

0001d626 <sbc_get_codesize>:

	return (1000000 * blocks * subbands) / frequency;
}

SBC_EXPORT size_t sbc_get_codesize(sbc_t *sbc)
{
   1d626:	b480      	push	{r7}
   1d628:	b087      	sub	sp, #28
   1d62a:	af00      	add	r7, sp, #0
   1d62c:	6078      	str	r0, [r7, #4]
	uint16_t subbands, channels, blocks;
	struct sbc_priv *priv;

	priv = (struct sbc_priv*)sbc->priv; // cast by chencai
   1d62e:	687b      	ldr	r3, [r7, #4]
   1d630:	68db      	ldr	r3, [r3, #12]
   1d632:	60fb      	str	r3, [r7, #12]
	if (!priv->init) {
   1d634:	68fb      	ldr	r3, [r7, #12]
   1d636:	781b      	ldrb	r3, [r3, #0]
   1d638:	2b00      	cmp	r3, #0
   1d63a:	d11d      	bne.n	1d678 <sbc_get_codesize+0x52>
		subbands = sbc->subbands ? 8 : 4;
   1d63c:	687b      	ldr	r3, [r7, #4]
   1d63e:	799b      	ldrb	r3, [r3, #6]
   1d640:	2b00      	cmp	r3, #0
   1d642:	d001      	beq.n	1d648 <sbc_get_codesize+0x22>
   1d644:	2308      	movs	r3, #8
   1d646:	e000      	b.n	1d64a <sbc_get_codesize+0x24>
   1d648:	2304      	movs	r3, #4
   1d64a:	82fb      	strh	r3, [r7, #22]
		if (priv->msbc)
   1d64c:	68fb      	ldr	r3, [r7, #12]
   1d64e:	785b      	ldrb	r3, [r3, #1]
   1d650:	2b00      	cmp	r3, #0
   1d652:	d002      	beq.n	1d65a <sbc_get_codesize+0x34>
			blocks = MSBC_BLOCKS;
   1d654:	230f      	movs	r3, #15
   1d656:	827b      	strh	r3, [r7, #18]
   1d658:	e005      	b.n	1d666 <sbc_get_codesize+0x40>
		else
			blocks = 4 + (sbc->blocks * 4);
   1d65a:	687b      	ldr	r3, [r7, #4]
   1d65c:	795b      	ldrb	r3, [r3, #5]
   1d65e:	3301      	adds	r3, #1
   1d660:	b29b      	uxth	r3, r3
   1d662:	009b      	lsls	r3, r3, #2
   1d664:	827b      	strh	r3, [r7, #18]
		channels = sbc->mode == SBC_MODE_MONO ? 1 : 2;
   1d666:	687b      	ldr	r3, [r7, #4]
   1d668:	79db      	ldrb	r3, [r3, #7]
   1d66a:	2b00      	cmp	r3, #0
   1d66c:	d101      	bne.n	1d672 <sbc_get_codesize+0x4c>
   1d66e:	2301      	movs	r3, #1
   1d670:	e000      	b.n	1d674 <sbc_get_codesize+0x4e>
   1d672:	2302      	movs	r3, #2
   1d674:	82bb      	strh	r3, [r7, #20]
   1d676:	e009      	b.n	1d68c <sbc_get_codesize+0x66>
	} else {
		subbands = priv->frame.subbands;
   1d678:	68fb      	ldr	r3, [r7, #12]
   1d67a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1d67e:	82fb      	strh	r3, [r7, #22]
		blocks = priv->frame.blocks;
   1d680:	68fb      	ldr	r3, [r7, #12]
   1d682:	7c9b      	ldrb	r3, [r3, #18]
   1d684:	827b      	strh	r3, [r7, #18]
		channels = priv->frame.channels;
   1d686:	68fb      	ldr	r3, [r7, #12]
   1d688:	7e1b      	ldrb	r3, [r3, #24]
   1d68a:	82bb      	strh	r3, [r7, #20]
	}

	return subbands * blocks * channels * 2;
   1d68c:	8afb      	ldrh	r3, [r7, #22]
   1d68e:	8a7a      	ldrh	r2, [r7, #18]
   1d690:	fb02 f303 	mul.w	r3, r2, r3
   1d694:	8aba      	ldrh	r2, [r7, #20]
   1d696:	fb02 f303 	mul.w	r3, r2, r3
   1d69a:	005b      	lsls	r3, r3, #1
}
   1d69c:	4618      	mov	r0, r3
   1d69e:	371c      	adds	r7, #28
   1d6a0:	46bd      	mov	sp, r7
   1d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d6a6:	4770      	bx	lr

0001d6a8 <sbc_analyze_four_simd>:
/* FIXME: in msvc, we use inline, otherwise use inline. 
 *		  Add #ifdef _MSC_VER check. (chencai)
 */
static inline void sbc_analyze_four_simd(const int16_t *in, int32_t *out,
							const FIXED_T *consts)
{
   1d6a8:	b480      	push	{r7}
   1d6aa:	b08d      	sub	sp, #52	; 0x34
   1d6ac:	af00      	add	r7, sp, #0
   1d6ae:	60f8      	str	r0, [r7, #12]
   1d6b0:	60b9      	str	r1, [r7, #8]
   1d6b2:	607a      	str	r2, [r7, #4]
	FIXED_A t1[4];
	FIXED_T t2[4];
	int hop = 0;
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* rounding coefficient */
	t1[0] = t1[1] = t1[2] = t1[3] =
   1d6b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d6bc:	62bb      	str	r3, [r7, #40]	; 0x28
   1d6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d6c0:	627b      	str	r3, [r7, #36]	; 0x24
   1d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6c4:	623b      	str	r3, [r7, #32]
   1d6c6:	6a3b      	ldr	r3, [r7, #32]
   1d6c8:	61fb      	str	r3, [r7, #28]
		(FIXED_A) 1 << (SBC_PROTO_FIXED4_SCALE - 1);

	/* low pass polyphase filter */
	for (hop = 0; hop < 40; hop += 8) {
   1d6ca:	2300      	movs	r3, #0
   1d6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d6ce:	e0a0      	b.n	1d812 <sbc_analyze_four_simd+0x16a>
		t1[0] += (FIXED_A) in[hop] * consts[hop];
   1d6d0:	69fa      	ldr	r2, [r7, #28]
   1d6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d6d4:	005b      	lsls	r3, r3, #1
   1d6d6:	68f9      	ldr	r1, [r7, #12]
   1d6d8:	440b      	add	r3, r1
   1d6da:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d6de:	4618      	mov	r0, r3
   1d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d6e2:	005b      	lsls	r3, r3, #1
   1d6e4:	6879      	ldr	r1, [r7, #4]
   1d6e6:	440b      	add	r3, r1
   1d6e8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d6ec:	fb03 f300 	mul.w	r3, r3, r0
   1d6f0:	4413      	add	r3, r2
   1d6f2:	61fb      	str	r3, [r7, #28]
		t1[0] += (FIXED_A) in[hop + 1] * consts[hop + 1];
   1d6f4:	69fa      	ldr	r2, [r7, #28]
   1d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d6f8:	3301      	adds	r3, #1
   1d6fa:	005b      	lsls	r3, r3, #1
   1d6fc:	68f9      	ldr	r1, [r7, #12]
   1d6fe:	440b      	add	r3, r1
   1d700:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d704:	4618      	mov	r0, r3
   1d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d708:	3301      	adds	r3, #1
   1d70a:	005b      	lsls	r3, r3, #1
   1d70c:	6879      	ldr	r1, [r7, #4]
   1d70e:	440b      	add	r3, r1
   1d710:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d714:	fb03 f300 	mul.w	r3, r3, r0
   1d718:	4413      	add	r3, r2
   1d71a:	61fb      	str	r3, [r7, #28]
		t1[1] += (FIXED_A) in[hop + 2] * consts[hop + 2];
   1d71c:	6a3a      	ldr	r2, [r7, #32]
   1d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d720:	3302      	adds	r3, #2
   1d722:	005b      	lsls	r3, r3, #1
   1d724:	68f9      	ldr	r1, [r7, #12]
   1d726:	440b      	add	r3, r1
   1d728:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d72c:	4618      	mov	r0, r3
   1d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d730:	3302      	adds	r3, #2
   1d732:	005b      	lsls	r3, r3, #1
   1d734:	6879      	ldr	r1, [r7, #4]
   1d736:	440b      	add	r3, r1
   1d738:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d73c:	fb03 f300 	mul.w	r3, r3, r0
   1d740:	4413      	add	r3, r2
   1d742:	623b      	str	r3, [r7, #32]
		t1[1] += (FIXED_A) in[hop + 3] * consts[hop + 3];
   1d744:	6a3a      	ldr	r2, [r7, #32]
   1d746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d748:	3303      	adds	r3, #3
   1d74a:	005b      	lsls	r3, r3, #1
   1d74c:	68f9      	ldr	r1, [r7, #12]
   1d74e:	440b      	add	r3, r1
   1d750:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d754:	4618      	mov	r0, r3
   1d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d758:	3303      	adds	r3, #3
   1d75a:	005b      	lsls	r3, r3, #1
   1d75c:	6879      	ldr	r1, [r7, #4]
   1d75e:	440b      	add	r3, r1
   1d760:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d764:	fb03 f300 	mul.w	r3, r3, r0
   1d768:	4413      	add	r3, r2
   1d76a:	623b      	str	r3, [r7, #32]
		t1[2] += (FIXED_A) in[hop + 4] * consts[hop + 4];
   1d76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d770:	3304      	adds	r3, #4
   1d772:	005b      	lsls	r3, r3, #1
   1d774:	68f9      	ldr	r1, [r7, #12]
   1d776:	440b      	add	r3, r1
   1d778:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d77c:	4618      	mov	r0, r3
   1d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d780:	3304      	adds	r3, #4
   1d782:	005b      	lsls	r3, r3, #1
   1d784:	6879      	ldr	r1, [r7, #4]
   1d786:	440b      	add	r3, r1
   1d788:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d78c:	fb03 f300 	mul.w	r3, r3, r0
   1d790:	4413      	add	r3, r2
   1d792:	627b      	str	r3, [r7, #36]	; 0x24
		t1[2] += (FIXED_A) in[hop + 5] * consts[hop + 5];
   1d794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d798:	3305      	adds	r3, #5
   1d79a:	005b      	lsls	r3, r3, #1
   1d79c:	68f9      	ldr	r1, [r7, #12]
   1d79e:	440b      	add	r3, r1
   1d7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d7a4:	4618      	mov	r0, r3
   1d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7a8:	3305      	adds	r3, #5
   1d7aa:	005b      	lsls	r3, r3, #1
   1d7ac:	6879      	ldr	r1, [r7, #4]
   1d7ae:	440b      	add	r3, r1
   1d7b0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d7b4:	fb03 f300 	mul.w	r3, r3, r0
   1d7b8:	4413      	add	r3, r2
   1d7ba:	627b      	str	r3, [r7, #36]	; 0x24
		t1[3] += (FIXED_A) in[hop + 6] * consts[hop + 6];
   1d7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7c0:	3306      	adds	r3, #6
   1d7c2:	005b      	lsls	r3, r3, #1
   1d7c4:	68f9      	ldr	r1, [r7, #12]
   1d7c6:	440b      	add	r3, r1
   1d7c8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d7cc:	4618      	mov	r0, r3
   1d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7d0:	3306      	adds	r3, #6
   1d7d2:	005b      	lsls	r3, r3, #1
   1d7d4:	6879      	ldr	r1, [r7, #4]
   1d7d6:	440b      	add	r3, r1
   1d7d8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d7dc:	fb03 f300 	mul.w	r3, r3, r0
   1d7e0:	4413      	add	r3, r2
   1d7e2:	62bb      	str	r3, [r7, #40]	; 0x28
		t1[3] += (FIXED_A) in[hop + 7] * consts[hop + 7];
   1d7e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7e8:	3307      	adds	r3, #7
   1d7ea:	005b      	lsls	r3, r3, #1
   1d7ec:	68f9      	ldr	r1, [r7, #12]
   1d7ee:	440b      	add	r3, r1
   1d7f0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d7f4:	4618      	mov	r0, r3
   1d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d7f8:	3307      	adds	r3, #7
   1d7fa:	005b      	lsls	r3, r3, #1
   1d7fc:	6879      	ldr	r1, [r7, #4]
   1d7fe:	440b      	add	r3, r1
   1d800:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d804:	fb03 f300 	mul.w	r3, r3, r0
   1d808:	4413      	add	r3, r2
   1d80a:	62bb      	str	r3, [r7, #40]	; 0x28
	for (hop = 0; hop < 40; hop += 8) {
   1d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d80e:	3308      	adds	r3, #8
   1d810:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d814:	2b27      	cmp	r3, #39	; 0x27
   1d816:	f77f af5b 	ble.w	1d6d0 <sbc_analyze_four_simd+0x28>
	}

	/* scaling */
	t2[0] = t1[0] >> SBC_PROTO_FIXED4_SCALE;
   1d81a:	69fb      	ldr	r3, [r7, #28]
   1d81c:	141b      	asrs	r3, r3, #16
   1d81e:	b21b      	sxth	r3, r3
   1d820:	82bb      	strh	r3, [r7, #20]
	t2[1] = t1[1] >> SBC_PROTO_FIXED4_SCALE;
   1d822:	6a3b      	ldr	r3, [r7, #32]
   1d824:	141b      	asrs	r3, r3, #16
   1d826:	b21b      	sxth	r3, r3
   1d828:	82fb      	strh	r3, [r7, #22]
	t2[2] = t1[2] >> SBC_PROTO_FIXED4_SCALE;
   1d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d82c:	141b      	asrs	r3, r3, #16
   1d82e:	b21b      	sxth	r3, r3
   1d830:	833b      	strh	r3, [r7, #24]
	t2[3] = t1[3] >> SBC_PROTO_FIXED4_SCALE;
   1d832:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d834:	141b      	asrs	r3, r3, #16
   1d836:	b21b      	sxth	r3, r3
   1d838:	837b      	strh	r3, [r7, #26]

	/* do the cos transform */
	t1[0]  = (FIXED_A) t2[0] * consts[40 + 0];
   1d83a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1d83e:	461a      	mov	r2, r3
   1d840:	687b      	ldr	r3, [r7, #4]
   1d842:	3350      	adds	r3, #80	; 0x50
   1d844:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d848:	fb03 f302 	mul.w	r3, r3, r2
   1d84c:	61fb      	str	r3, [r7, #28]
	t1[0] += (FIXED_A) t2[1] * consts[40 + 1];
   1d84e:	69fa      	ldr	r2, [r7, #28]
   1d850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1d854:	4619      	mov	r1, r3
   1d856:	687b      	ldr	r3, [r7, #4]
   1d858:	3352      	adds	r3, #82	; 0x52
   1d85a:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d85e:	fb03 f301 	mul.w	r3, r3, r1
   1d862:	4413      	add	r3, r2
   1d864:	61fb      	str	r3, [r7, #28]
	t1[1]  = (FIXED_A) t2[0] * consts[40 + 2];
   1d866:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1d86a:	461a      	mov	r2, r3
   1d86c:	687b      	ldr	r3, [r7, #4]
   1d86e:	3354      	adds	r3, #84	; 0x54
   1d870:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d874:	fb03 f302 	mul.w	r3, r3, r2
   1d878:	623b      	str	r3, [r7, #32]
	t1[1] += (FIXED_A) t2[1] * consts[40 + 3];
   1d87a:	6a3a      	ldr	r2, [r7, #32]
   1d87c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1d880:	4619      	mov	r1, r3
   1d882:	687b      	ldr	r3, [r7, #4]
   1d884:	3356      	adds	r3, #86	; 0x56
   1d886:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d88a:	fb03 f301 	mul.w	r3, r3, r1
   1d88e:	4413      	add	r3, r2
   1d890:	623b      	str	r3, [r7, #32]
	t1[2]  = (FIXED_A) t2[0] * consts[40 + 4];
   1d892:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1d896:	461a      	mov	r2, r3
   1d898:	687b      	ldr	r3, [r7, #4]
   1d89a:	3358      	adds	r3, #88	; 0x58
   1d89c:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d8a0:	fb03 f302 	mul.w	r3, r3, r2
   1d8a4:	627b      	str	r3, [r7, #36]	; 0x24
	t1[2] += (FIXED_A) t2[1] * consts[40 + 5];
   1d8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d8a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1d8ac:	4619      	mov	r1, r3
   1d8ae:	687b      	ldr	r3, [r7, #4]
   1d8b0:	335a      	adds	r3, #90	; 0x5a
   1d8b2:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d8b6:	fb03 f301 	mul.w	r3, r3, r1
   1d8ba:	4413      	add	r3, r2
   1d8bc:	627b      	str	r3, [r7, #36]	; 0x24
	t1[3]  = (FIXED_A) t2[0] * consts[40 + 6];
   1d8be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   1d8c2:	461a      	mov	r2, r3
   1d8c4:	687b      	ldr	r3, [r7, #4]
   1d8c6:	335c      	adds	r3, #92	; 0x5c
   1d8c8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d8cc:	fb03 f302 	mul.w	r3, r3, r2
   1d8d0:	62bb      	str	r3, [r7, #40]	; 0x28
	t1[3] += (FIXED_A) t2[1] * consts[40 + 7];
   1d8d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d8d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1d8d8:	4619      	mov	r1, r3
   1d8da:	687b      	ldr	r3, [r7, #4]
   1d8dc:	335e      	adds	r3, #94	; 0x5e
   1d8de:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d8e2:	fb03 f301 	mul.w	r3, r3, r1
   1d8e6:	4413      	add	r3, r2
   1d8e8:	62bb      	str	r3, [r7, #40]	; 0x28

	t1[0] += (FIXED_A) t2[2] * consts[40 + 8];
   1d8ea:	69fa      	ldr	r2, [r7, #28]
   1d8ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   1d8f0:	4619      	mov	r1, r3
   1d8f2:	687b      	ldr	r3, [r7, #4]
   1d8f4:	3360      	adds	r3, #96	; 0x60
   1d8f6:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d8fa:	fb03 f301 	mul.w	r3, r3, r1
   1d8fe:	4413      	add	r3, r2
   1d900:	61fb      	str	r3, [r7, #28]
	t1[0] += (FIXED_A) t2[3] * consts[40 + 9];
   1d902:	69fa      	ldr	r2, [r7, #28]
   1d904:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   1d908:	4619      	mov	r1, r3
   1d90a:	687b      	ldr	r3, [r7, #4]
   1d90c:	3362      	adds	r3, #98	; 0x62
   1d90e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d912:	fb03 f301 	mul.w	r3, r3, r1
   1d916:	4413      	add	r3, r2
   1d918:	61fb      	str	r3, [r7, #28]
	t1[1] += (FIXED_A) t2[2] * consts[40 + 10];
   1d91a:	6a3a      	ldr	r2, [r7, #32]
   1d91c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   1d920:	4619      	mov	r1, r3
   1d922:	687b      	ldr	r3, [r7, #4]
   1d924:	3364      	adds	r3, #100	; 0x64
   1d926:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d92a:	fb03 f301 	mul.w	r3, r3, r1
   1d92e:	4413      	add	r3, r2
   1d930:	623b      	str	r3, [r7, #32]
	t1[1] += (FIXED_A) t2[3] * consts[40 + 11];
   1d932:	6a3a      	ldr	r2, [r7, #32]
   1d934:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   1d938:	4619      	mov	r1, r3
   1d93a:	687b      	ldr	r3, [r7, #4]
   1d93c:	3366      	adds	r3, #102	; 0x66
   1d93e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d942:	fb03 f301 	mul.w	r3, r3, r1
   1d946:	4413      	add	r3, r2
   1d948:	623b      	str	r3, [r7, #32]
	t1[2] += (FIXED_A) t2[2] * consts[40 + 12];
   1d94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d94c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   1d950:	4619      	mov	r1, r3
   1d952:	687b      	ldr	r3, [r7, #4]
   1d954:	3368      	adds	r3, #104	; 0x68
   1d956:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d95a:	fb03 f301 	mul.w	r3, r3, r1
   1d95e:	4413      	add	r3, r2
   1d960:	627b      	str	r3, [r7, #36]	; 0x24
	t1[2] += (FIXED_A) t2[3] * consts[40 + 13];
   1d962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d964:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   1d968:	4619      	mov	r1, r3
   1d96a:	687b      	ldr	r3, [r7, #4]
   1d96c:	336a      	adds	r3, #106	; 0x6a
   1d96e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d972:	fb03 f301 	mul.w	r3, r3, r1
   1d976:	4413      	add	r3, r2
   1d978:	627b      	str	r3, [r7, #36]	; 0x24
	t1[3] += (FIXED_A) t2[2] * consts[40 + 14];
   1d97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d97c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   1d980:	4619      	mov	r1, r3
   1d982:	687b      	ldr	r3, [r7, #4]
   1d984:	336c      	adds	r3, #108	; 0x6c
   1d986:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d98a:	fb03 f301 	mul.w	r3, r3, r1
   1d98e:	4413      	add	r3, r2
   1d990:	62bb      	str	r3, [r7, #40]	; 0x28
	t1[3] += (FIXED_A) t2[3] * consts[40 + 15];
   1d992:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d994:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   1d998:	4619      	mov	r1, r3
   1d99a:	687b      	ldr	r3, [r7, #4]
   1d99c:	336e      	adds	r3, #110	; 0x6e
   1d99e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1d9a2:	fb03 f301 	mul.w	r3, r3, r1
   1d9a6:	4413      	add	r3, r2
   1d9a8:	62bb      	str	r3, [r7, #40]	; 0x28

	out[0] = t1[0] >>
   1d9aa:	69fa      	ldr	r2, [r7, #28]
   1d9ac:	68bb      	ldr	r3, [r7, #8]
   1d9ae:	601a      	str	r2, [r3, #0]
		(SBC_COS_TABLE_FIXED4_SCALE - SCALE_OUT_BITS);
	out[1] = t1[1] >>
   1d9b0:	68bb      	ldr	r3, [r7, #8]
   1d9b2:	3304      	adds	r3, #4
   1d9b4:	6a3a      	ldr	r2, [r7, #32]
   1d9b6:	601a      	str	r2, [r3, #0]
		(SBC_COS_TABLE_FIXED4_SCALE - SCALE_OUT_BITS);
	out[2] = t1[2] >>
   1d9b8:	68bb      	ldr	r3, [r7, #8]
   1d9ba:	3308      	adds	r3, #8
   1d9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d9be:	601a      	str	r2, [r3, #0]
		(SBC_COS_TABLE_FIXED4_SCALE - SCALE_OUT_BITS);
	out[3] = t1[3] >>
   1d9c0:	68bb      	ldr	r3, [r7, #8]
   1d9c2:	330c      	adds	r3, #12
   1d9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1d9c6:	601a      	str	r2, [r3, #0]
		(SBC_COS_TABLE_FIXED4_SCALE - SCALE_OUT_BITS);
}
   1d9c8:	bf00      	nop
   1d9ca:	3734      	adds	r7, #52	; 0x34
   1d9cc:	46bd      	mov	sp, r7
   1d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d9d2:	4770      	bx	lr

0001d9d4 <sbc_analyze_eight_simd>:

static inline void sbc_analyze_eight_simd(const int16_t *in, int32_t *out,
							const FIXED_T *consts)
{
   1d9d4:	b480      	push	{r7}
   1d9d6:	b093      	sub	sp, #76	; 0x4c
   1d9d8:	af00      	add	r7, sp, #0
   1d9da:	60f8      	str	r0, [r7, #12]
   1d9dc:	60b9      	str	r1, [r7, #8]
   1d9de:	607a      	str	r2, [r7, #4]
	FIXED_A t1[8];
	FIXED_T t2[8];
	int i, hop;

	/* rounding coefficient */
	t1[0] = t1[1] = t1[2] = t1[3] = t1[4] = t1[5] = t1[6] = t1[7] =
   1d9e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   1d9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1d9e8:	63bb      	str	r3, [r7, #56]	; 0x38
   1d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1d9ec:	637b      	str	r3, [r7, #52]	; 0x34
   1d9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1d9f0:	633b      	str	r3, [r7, #48]	; 0x30
   1d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1d9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1d9f8:	62bb      	str	r3, [r7, #40]	; 0x28
   1d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1d9fc:	627b      	str	r3, [r7, #36]	; 0x24
   1d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1da00:	623b      	str	r3, [r7, #32]
		(FIXED_A) 1 << (SBC_PROTO_FIXED8_SCALE-1);

	/* low pass polyphase filter */
	for (hop = 0; hop < 80; hop += 16) {
   1da02:	2300      	movs	r3, #0
   1da04:	643b      	str	r3, [r7, #64]	; 0x40
   1da06:	e140      	b.n	1dc8a <sbc_analyze_eight_simd+0x2b6>
		t1[0] += (FIXED_A) in[hop] * consts[hop];
   1da08:	6a3a      	ldr	r2, [r7, #32]
   1da0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da0c:	005b      	lsls	r3, r3, #1
   1da0e:	68f9      	ldr	r1, [r7, #12]
   1da10:	440b      	add	r3, r1
   1da12:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da16:	4618      	mov	r0, r3
   1da18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da1a:	005b      	lsls	r3, r3, #1
   1da1c:	6879      	ldr	r1, [r7, #4]
   1da1e:	440b      	add	r3, r1
   1da20:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da24:	fb03 f300 	mul.w	r3, r3, r0
   1da28:	4413      	add	r3, r2
   1da2a:	623b      	str	r3, [r7, #32]
		t1[0] += (FIXED_A) in[hop + 1] * consts[hop + 1];
   1da2c:	6a3a      	ldr	r2, [r7, #32]
   1da2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da30:	3301      	adds	r3, #1
   1da32:	005b      	lsls	r3, r3, #1
   1da34:	68f9      	ldr	r1, [r7, #12]
   1da36:	440b      	add	r3, r1
   1da38:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da3c:	4618      	mov	r0, r3
   1da3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da40:	3301      	adds	r3, #1
   1da42:	005b      	lsls	r3, r3, #1
   1da44:	6879      	ldr	r1, [r7, #4]
   1da46:	440b      	add	r3, r1
   1da48:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da4c:	fb03 f300 	mul.w	r3, r3, r0
   1da50:	4413      	add	r3, r2
   1da52:	623b      	str	r3, [r7, #32]
		t1[1] += (FIXED_A) in[hop + 2] * consts[hop + 2];
   1da54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1da56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da58:	3302      	adds	r3, #2
   1da5a:	005b      	lsls	r3, r3, #1
   1da5c:	68f9      	ldr	r1, [r7, #12]
   1da5e:	440b      	add	r3, r1
   1da60:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da64:	4618      	mov	r0, r3
   1da66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da68:	3302      	adds	r3, #2
   1da6a:	005b      	lsls	r3, r3, #1
   1da6c:	6879      	ldr	r1, [r7, #4]
   1da6e:	440b      	add	r3, r1
   1da70:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da74:	fb03 f300 	mul.w	r3, r3, r0
   1da78:	4413      	add	r3, r2
   1da7a:	627b      	str	r3, [r7, #36]	; 0x24
		t1[1] += (FIXED_A) in[hop + 3] * consts[hop + 3];
   1da7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1da7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da80:	3303      	adds	r3, #3
   1da82:	005b      	lsls	r3, r3, #1
   1da84:	68f9      	ldr	r1, [r7, #12]
   1da86:	440b      	add	r3, r1
   1da88:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da8c:	4618      	mov	r0, r3
   1da8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1da90:	3303      	adds	r3, #3
   1da92:	005b      	lsls	r3, r3, #1
   1da94:	6879      	ldr	r1, [r7, #4]
   1da96:	440b      	add	r3, r1
   1da98:	f9b3 3000 	ldrsh.w	r3, [r3]
   1da9c:	fb03 f300 	mul.w	r3, r3, r0
   1daa0:	4413      	add	r3, r2
   1daa2:	627b      	str	r3, [r7, #36]	; 0x24
		t1[2] += (FIXED_A) in[hop + 4] * consts[hop + 4];
   1daa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1daa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1daa8:	3304      	adds	r3, #4
   1daaa:	005b      	lsls	r3, r3, #1
   1daac:	68f9      	ldr	r1, [r7, #12]
   1daae:	440b      	add	r3, r1
   1dab0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dab4:	4618      	mov	r0, r3
   1dab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dab8:	3304      	adds	r3, #4
   1daba:	005b      	lsls	r3, r3, #1
   1dabc:	6879      	ldr	r1, [r7, #4]
   1dabe:	440b      	add	r3, r1
   1dac0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dac4:	fb03 f300 	mul.w	r3, r3, r0
   1dac8:	4413      	add	r3, r2
   1daca:	62bb      	str	r3, [r7, #40]	; 0x28
		t1[2] += (FIXED_A) in[hop + 5] * consts[hop + 5];
   1dacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1dace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dad0:	3305      	adds	r3, #5
   1dad2:	005b      	lsls	r3, r3, #1
   1dad4:	68f9      	ldr	r1, [r7, #12]
   1dad6:	440b      	add	r3, r1
   1dad8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dadc:	4618      	mov	r0, r3
   1dade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dae0:	3305      	adds	r3, #5
   1dae2:	005b      	lsls	r3, r3, #1
   1dae4:	6879      	ldr	r1, [r7, #4]
   1dae6:	440b      	add	r3, r1
   1dae8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1daec:	fb03 f300 	mul.w	r3, r3, r0
   1daf0:	4413      	add	r3, r2
   1daf2:	62bb      	str	r3, [r7, #40]	; 0x28
		t1[3] += (FIXED_A) in[hop + 6] * consts[hop + 6];
   1daf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1daf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1daf8:	3306      	adds	r3, #6
   1dafa:	005b      	lsls	r3, r3, #1
   1dafc:	68f9      	ldr	r1, [r7, #12]
   1dafe:	440b      	add	r3, r1
   1db00:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db04:	4618      	mov	r0, r3
   1db06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db08:	3306      	adds	r3, #6
   1db0a:	005b      	lsls	r3, r3, #1
   1db0c:	6879      	ldr	r1, [r7, #4]
   1db0e:	440b      	add	r3, r1
   1db10:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db14:	fb03 f300 	mul.w	r3, r3, r0
   1db18:	4413      	add	r3, r2
   1db1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		t1[3] += (FIXED_A) in[hop + 7] * consts[hop + 7];
   1db1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1db1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db20:	3307      	adds	r3, #7
   1db22:	005b      	lsls	r3, r3, #1
   1db24:	68f9      	ldr	r1, [r7, #12]
   1db26:	440b      	add	r3, r1
   1db28:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db2c:	4618      	mov	r0, r3
   1db2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db30:	3307      	adds	r3, #7
   1db32:	005b      	lsls	r3, r3, #1
   1db34:	6879      	ldr	r1, [r7, #4]
   1db36:	440b      	add	r3, r1
   1db38:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db3c:	fb03 f300 	mul.w	r3, r3, r0
   1db40:	4413      	add	r3, r2
   1db42:	62fb      	str	r3, [r7, #44]	; 0x2c
		t1[4] += (FIXED_A) in[hop + 8] * consts[hop + 8];
   1db44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1db46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db48:	3308      	adds	r3, #8
   1db4a:	005b      	lsls	r3, r3, #1
   1db4c:	68f9      	ldr	r1, [r7, #12]
   1db4e:	440b      	add	r3, r1
   1db50:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db54:	4618      	mov	r0, r3
   1db56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db58:	3308      	adds	r3, #8
   1db5a:	005b      	lsls	r3, r3, #1
   1db5c:	6879      	ldr	r1, [r7, #4]
   1db5e:	440b      	add	r3, r1
   1db60:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db64:	fb03 f300 	mul.w	r3, r3, r0
   1db68:	4413      	add	r3, r2
   1db6a:	633b      	str	r3, [r7, #48]	; 0x30
		t1[4] += (FIXED_A) in[hop + 9] * consts[hop + 9];
   1db6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1db6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db70:	3309      	adds	r3, #9
   1db72:	005b      	lsls	r3, r3, #1
   1db74:	68f9      	ldr	r1, [r7, #12]
   1db76:	440b      	add	r3, r1
   1db78:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db7c:	4618      	mov	r0, r3
   1db7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db80:	3309      	adds	r3, #9
   1db82:	005b      	lsls	r3, r3, #1
   1db84:	6879      	ldr	r1, [r7, #4]
   1db86:	440b      	add	r3, r1
   1db88:	f9b3 3000 	ldrsh.w	r3, [r3]
   1db8c:	fb03 f300 	mul.w	r3, r3, r0
   1db90:	4413      	add	r3, r2
   1db92:	633b      	str	r3, [r7, #48]	; 0x30
		t1[5] += (FIXED_A) in[hop + 10] * consts[hop + 10];
   1db94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1db96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1db98:	330a      	adds	r3, #10
   1db9a:	005b      	lsls	r3, r3, #1
   1db9c:	68f9      	ldr	r1, [r7, #12]
   1db9e:	440b      	add	r3, r1
   1dba0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dba4:	4618      	mov	r0, r3
   1dba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dba8:	330a      	adds	r3, #10
   1dbaa:	005b      	lsls	r3, r3, #1
   1dbac:	6879      	ldr	r1, [r7, #4]
   1dbae:	440b      	add	r3, r1
   1dbb0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dbb4:	fb03 f300 	mul.w	r3, r3, r0
   1dbb8:	4413      	add	r3, r2
   1dbba:	637b      	str	r3, [r7, #52]	; 0x34
		t1[5] += (FIXED_A) in[hop + 11] * consts[hop + 11];
   1dbbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1dbbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbc0:	330b      	adds	r3, #11
   1dbc2:	005b      	lsls	r3, r3, #1
   1dbc4:	68f9      	ldr	r1, [r7, #12]
   1dbc6:	440b      	add	r3, r1
   1dbc8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dbcc:	4618      	mov	r0, r3
   1dbce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbd0:	330b      	adds	r3, #11
   1dbd2:	005b      	lsls	r3, r3, #1
   1dbd4:	6879      	ldr	r1, [r7, #4]
   1dbd6:	440b      	add	r3, r1
   1dbd8:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dbdc:	fb03 f300 	mul.w	r3, r3, r0
   1dbe0:	4413      	add	r3, r2
   1dbe2:	637b      	str	r3, [r7, #52]	; 0x34
		t1[6] += (FIXED_A) in[hop + 12] * consts[hop + 12];
   1dbe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dbe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbe8:	330c      	adds	r3, #12
   1dbea:	005b      	lsls	r3, r3, #1
   1dbec:	68f9      	ldr	r1, [r7, #12]
   1dbee:	440b      	add	r3, r1
   1dbf0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dbf4:	4618      	mov	r0, r3
   1dbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dbf8:	330c      	adds	r3, #12
   1dbfa:	005b      	lsls	r3, r3, #1
   1dbfc:	6879      	ldr	r1, [r7, #4]
   1dbfe:	440b      	add	r3, r1
   1dc00:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc04:	fb03 f300 	mul.w	r3, r3, r0
   1dc08:	4413      	add	r3, r2
   1dc0a:	63bb      	str	r3, [r7, #56]	; 0x38
		t1[6] += (FIXED_A) in[hop + 13] * consts[hop + 13];
   1dc0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1dc0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc10:	330d      	adds	r3, #13
   1dc12:	005b      	lsls	r3, r3, #1
   1dc14:	68f9      	ldr	r1, [r7, #12]
   1dc16:	440b      	add	r3, r1
   1dc18:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc1c:	4618      	mov	r0, r3
   1dc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc20:	330d      	adds	r3, #13
   1dc22:	005b      	lsls	r3, r3, #1
   1dc24:	6879      	ldr	r1, [r7, #4]
   1dc26:	440b      	add	r3, r1
   1dc28:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc2c:	fb03 f300 	mul.w	r3, r3, r0
   1dc30:	4413      	add	r3, r2
   1dc32:	63bb      	str	r3, [r7, #56]	; 0x38
		t1[7] += (FIXED_A) in[hop + 14] * consts[hop + 14];
   1dc34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dc36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc38:	330e      	adds	r3, #14
   1dc3a:	005b      	lsls	r3, r3, #1
   1dc3c:	68f9      	ldr	r1, [r7, #12]
   1dc3e:	440b      	add	r3, r1
   1dc40:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc44:	4618      	mov	r0, r3
   1dc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc48:	330e      	adds	r3, #14
   1dc4a:	005b      	lsls	r3, r3, #1
   1dc4c:	6879      	ldr	r1, [r7, #4]
   1dc4e:	440b      	add	r3, r1
   1dc50:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc54:	fb03 f300 	mul.w	r3, r3, r0
   1dc58:	4413      	add	r3, r2
   1dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
		t1[7] += (FIXED_A) in[hop + 15] * consts[hop + 15];
   1dc5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dc5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc60:	330f      	adds	r3, #15
   1dc62:	005b      	lsls	r3, r3, #1
   1dc64:	68f9      	ldr	r1, [r7, #12]
   1dc66:	440b      	add	r3, r1
   1dc68:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc6c:	4618      	mov	r0, r3
   1dc6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc70:	330f      	adds	r3, #15
   1dc72:	005b      	lsls	r3, r3, #1
   1dc74:	6879      	ldr	r1, [r7, #4]
   1dc76:	440b      	add	r3, r1
   1dc78:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dc7c:	fb03 f300 	mul.w	r3, r3, r0
   1dc80:	4413      	add	r3, r2
   1dc82:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (hop = 0; hop < 80; hop += 16) {
   1dc84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc86:	3310      	adds	r3, #16
   1dc88:	643b      	str	r3, [r7, #64]	; 0x40
   1dc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dc8c:	2b4f      	cmp	r3, #79	; 0x4f
   1dc8e:	f77f aebb 	ble.w	1da08 <sbc_analyze_eight_simd+0x34>
	}

	/* scaling */
	t2[0] = t1[0] >> SBC_PROTO_FIXED8_SCALE;
   1dc92:	6a3b      	ldr	r3, [r7, #32]
   1dc94:	141b      	asrs	r3, r3, #16
   1dc96:	b21b      	sxth	r3, r3
   1dc98:	823b      	strh	r3, [r7, #16]
	t2[1] = t1[1] >> SBC_PROTO_FIXED8_SCALE;
   1dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dc9c:	141b      	asrs	r3, r3, #16
   1dc9e:	b21b      	sxth	r3, r3
   1dca0:	827b      	strh	r3, [r7, #18]
	t2[2] = t1[2] >> SBC_PROTO_FIXED8_SCALE;
   1dca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dca4:	141b      	asrs	r3, r3, #16
   1dca6:	b21b      	sxth	r3, r3
   1dca8:	82bb      	strh	r3, [r7, #20]
	t2[3] = t1[3] >> SBC_PROTO_FIXED8_SCALE;
   1dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dcac:	141b      	asrs	r3, r3, #16
   1dcae:	b21b      	sxth	r3, r3
   1dcb0:	82fb      	strh	r3, [r7, #22]
	t2[4] = t1[4] >> SBC_PROTO_FIXED8_SCALE;
   1dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dcb4:	141b      	asrs	r3, r3, #16
   1dcb6:	b21b      	sxth	r3, r3
   1dcb8:	833b      	strh	r3, [r7, #24]
	t2[5] = t1[5] >> SBC_PROTO_FIXED8_SCALE;
   1dcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dcbc:	141b      	asrs	r3, r3, #16
   1dcbe:	b21b      	sxth	r3, r3
   1dcc0:	837b      	strh	r3, [r7, #26]
	t2[6] = t1[6] >> SBC_PROTO_FIXED8_SCALE;
   1dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dcc4:	141b      	asrs	r3, r3, #16
   1dcc6:	b21b      	sxth	r3, r3
   1dcc8:	83bb      	strh	r3, [r7, #28]
	t2[7] = t1[7] >> SBC_PROTO_FIXED8_SCALE;
   1dcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1dccc:	141b      	asrs	r3, r3, #16
   1dcce:	b21b      	sxth	r3, r3
   1dcd0:	83fb      	strh	r3, [r7, #30]


	/* do the cos transform */
	t1[0] = t1[1] = t1[2] = t1[3] = t1[4] = t1[5] = t1[6] = t1[7] = 0;
   1dcd2:	2300      	movs	r3, #0
   1dcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   1dcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1dcd8:	63bb      	str	r3, [r7, #56]	; 0x38
   1dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1dcdc:	637b      	str	r3, [r7, #52]	; 0x34
   1dcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dce0:	633b      	str	r3, [r7, #48]	; 0x30
   1dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1dce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dce8:	62bb      	str	r3, [r7, #40]	; 0x28
   1dcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dcec:	627b      	str	r3, [r7, #36]	; 0x24
   1dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dcf0:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 4; i++) {
   1dcf2:	2300      	movs	r3, #0
   1dcf4:	647b      	str	r3, [r7, #68]	; 0x44
   1dcf6:	e16a      	b.n	1dfce <sbc_analyze_eight_simd+0x5fa>
		t1[0] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 0];
   1dcf8:	6a3a      	ldr	r2, [r7, #32]
   1dcfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dcfc:	005b      	lsls	r3, r3, #1
   1dcfe:	005b      	lsls	r3, r3, #1
   1dd00:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dd04:	440b      	add	r3, r1
   1dd06:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dd0a:	4619      	mov	r1, r3
   1dd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd0e:	3305      	adds	r3, #5
   1dd10:	015b      	lsls	r3, r3, #5
   1dd12:	4618      	mov	r0, r3
   1dd14:	687b      	ldr	r3, [r7, #4]
   1dd16:	4403      	add	r3, r0
   1dd18:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dd1c:	fb03 f301 	mul.w	r3, r3, r1
   1dd20:	4413      	add	r3, r2
   1dd22:	623b      	str	r3, [r7, #32]
		t1[0] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 1];
   1dd24:	6a3a      	ldr	r2, [r7, #32]
   1dd26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd28:	005b      	lsls	r3, r3, #1
   1dd2a:	3301      	adds	r3, #1
   1dd2c:	005b      	lsls	r3, r3, #1
   1dd2e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dd32:	440b      	add	r3, r1
   1dd34:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dd38:	4618      	mov	r0, r3
   1dd3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd3c:	3305      	adds	r3, #5
   1dd3e:	015b      	lsls	r3, r3, #5
   1dd40:	3302      	adds	r3, #2
   1dd42:	6879      	ldr	r1, [r7, #4]
   1dd44:	440b      	add	r3, r1
   1dd46:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dd4a:	fb03 f300 	mul.w	r3, r3, r0
   1dd4e:	4413      	add	r3, r2
   1dd50:	623b      	str	r3, [r7, #32]
		t1[1] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 2];
   1dd52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1dd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd56:	005b      	lsls	r3, r3, #1
   1dd58:	005b      	lsls	r3, r3, #1
   1dd5a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dd5e:	440b      	add	r3, r1
   1dd60:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dd64:	4618      	mov	r0, r3
   1dd66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd68:	3305      	adds	r3, #5
   1dd6a:	015b      	lsls	r3, r3, #5
   1dd6c:	3304      	adds	r3, #4
   1dd6e:	6879      	ldr	r1, [r7, #4]
   1dd70:	440b      	add	r3, r1
   1dd72:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dd76:	fb03 f300 	mul.w	r3, r3, r0
   1dd7a:	4413      	add	r3, r2
   1dd7c:	627b      	str	r3, [r7, #36]	; 0x24
		t1[1] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 3];
   1dd7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1dd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd82:	005b      	lsls	r3, r3, #1
   1dd84:	3301      	adds	r3, #1
   1dd86:	005b      	lsls	r3, r3, #1
   1dd88:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dd8c:	440b      	add	r3, r1
   1dd8e:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dd92:	4618      	mov	r0, r3
   1dd94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dd96:	3305      	adds	r3, #5
   1dd98:	015b      	lsls	r3, r3, #5
   1dd9a:	3306      	adds	r3, #6
   1dd9c:	6879      	ldr	r1, [r7, #4]
   1dd9e:	440b      	add	r3, r1
   1dda0:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dda4:	fb03 f300 	mul.w	r3, r3, r0
   1dda8:	4413      	add	r3, r2
   1ddaa:	627b      	str	r3, [r7, #36]	; 0x24
		t1[2] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 4];
   1ddac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ddae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ddb0:	005b      	lsls	r3, r3, #1
   1ddb2:	005b      	lsls	r3, r3, #1
   1ddb4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1ddb8:	440b      	add	r3, r1
   1ddba:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1ddbe:	4618      	mov	r0, r3
   1ddc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ddc2:	3305      	adds	r3, #5
   1ddc4:	015b      	lsls	r3, r3, #5
   1ddc6:	3308      	adds	r3, #8
   1ddc8:	6879      	ldr	r1, [r7, #4]
   1ddca:	440b      	add	r3, r1
   1ddcc:	f9b3 3000 	ldrsh.w	r3, [r3]
   1ddd0:	fb03 f300 	mul.w	r3, r3, r0
   1ddd4:	4413      	add	r3, r2
   1ddd6:	62bb      	str	r3, [r7, #40]	; 0x28
		t1[2] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 5];
   1ddd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ddda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dddc:	005b      	lsls	r3, r3, #1
   1ddde:	3301      	adds	r3, #1
   1dde0:	005b      	lsls	r3, r3, #1
   1dde2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dde6:	440b      	add	r3, r1
   1dde8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1ddec:	4618      	mov	r0, r3
   1ddee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ddf0:	3305      	adds	r3, #5
   1ddf2:	015b      	lsls	r3, r3, #5
   1ddf4:	330a      	adds	r3, #10
   1ddf6:	6879      	ldr	r1, [r7, #4]
   1ddf8:	440b      	add	r3, r1
   1ddfa:	f9b3 3000 	ldrsh.w	r3, [r3]
   1ddfe:	fb03 f300 	mul.w	r3, r3, r0
   1de02:	4413      	add	r3, r2
   1de04:	62bb      	str	r3, [r7, #40]	; 0x28
		t1[3] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 6];
   1de06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1de08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de0a:	005b      	lsls	r3, r3, #1
   1de0c:	005b      	lsls	r3, r3, #1
   1de0e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1de12:	440b      	add	r3, r1
   1de14:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1de18:	4618      	mov	r0, r3
   1de1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de1c:	3305      	adds	r3, #5
   1de1e:	015b      	lsls	r3, r3, #5
   1de20:	330c      	adds	r3, #12
   1de22:	6879      	ldr	r1, [r7, #4]
   1de24:	440b      	add	r3, r1
   1de26:	f9b3 3000 	ldrsh.w	r3, [r3]
   1de2a:	fb03 f300 	mul.w	r3, r3, r0
   1de2e:	4413      	add	r3, r2
   1de30:	62fb      	str	r3, [r7, #44]	; 0x2c
		t1[3] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 7];
   1de32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1de34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de36:	005b      	lsls	r3, r3, #1
   1de38:	3301      	adds	r3, #1
   1de3a:	005b      	lsls	r3, r3, #1
   1de3c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1de40:	440b      	add	r3, r1
   1de42:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1de46:	4618      	mov	r0, r3
   1de48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de4a:	3305      	adds	r3, #5
   1de4c:	015b      	lsls	r3, r3, #5
   1de4e:	330e      	adds	r3, #14
   1de50:	6879      	ldr	r1, [r7, #4]
   1de52:	440b      	add	r3, r1
   1de54:	f9b3 3000 	ldrsh.w	r3, [r3]
   1de58:	fb03 f300 	mul.w	r3, r3, r0
   1de5c:	4413      	add	r3, r2
   1de5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		t1[4] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 8];
   1de60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1de62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de64:	005b      	lsls	r3, r3, #1
   1de66:	005b      	lsls	r3, r3, #1
   1de68:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1de6c:	440b      	add	r3, r1
   1de6e:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1de72:	4618      	mov	r0, r3
   1de74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de76:	3305      	adds	r3, #5
   1de78:	015b      	lsls	r3, r3, #5
   1de7a:	3310      	adds	r3, #16
   1de7c:	6879      	ldr	r1, [r7, #4]
   1de7e:	440b      	add	r3, r1
   1de80:	f9b3 3000 	ldrsh.w	r3, [r3]
   1de84:	fb03 f300 	mul.w	r3, r3, r0
   1de88:	4413      	add	r3, r2
   1de8a:	633b      	str	r3, [r7, #48]	; 0x30
		t1[4] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 9];
   1de8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1de8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1de90:	005b      	lsls	r3, r3, #1
   1de92:	3301      	adds	r3, #1
   1de94:	005b      	lsls	r3, r3, #1
   1de96:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1de9a:	440b      	add	r3, r1
   1de9c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dea0:	4618      	mov	r0, r3
   1dea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dea4:	3305      	adds	r3, #5
   1dea6:	015b      	lsls	r3, r3, #5
   1dea8:	3312      	adds	r3, #18
   1deaa:	6879      	ldr	r1, [r7, #4]
   1deac:	440b      	add	r3, r1
   1deae:	f9b3 3000 	ldrsh.w	r3, [r3]
   1deb2:	fb03 f300 	mul.w	r3, r3, r0
   1deb6:	4413      	add	r3, r2
   1deb8:	633b      	str	r3, [r7, #48]	; 0x30
		t1[5] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 10];
   1deba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1debc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1debe:	005b      	lsls	r3, r3, #1
   1dec0:	005b      	lsls	r3, r3, #1
   1dec2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dec6:	440b      	add	r3, r1
   1dec8:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1decc:	4618      	mov	r0, r3
   1dece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ded0:	3305      	adds	r3, #5
   1ded2:	015b      	lsls	r3, r3, #5
   1ded4:	3314      	adds	r3, #20
   1ded6:	6879      	ldr	r1, [r7, #4]
   1ded8:	440b      	add	r3, r1
   1deda:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dede:	fb03 f300 	mul.w	r3, r3, r0
   1dee2:	4413      	add	r3, r2
   1dee4:	637b      	str	r3, [r7, #52]	; 0x34
		t1[5] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 11];
   1dee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1dee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1deea:	005b      	lsls	r3, r3, #1
   1deec:	3301      	adds	r3, #1
   1deee:	005b      	lsls	r3, r3, #1
   1def0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1def4:	440b      	add	r3, r1
   1def6:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1defa:	4618      	mov	r0, r3
   1defc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1defe:	3305      	adds	r3, #5
   1df00:	015b      	lsls	r3, r3, #5
   1df02:	3316      	adds	r3, #22
   1df04:	6879      	ldr	r1, [r7, #4]
   1df06:	440b      	add	r3, r1
   1df08:	f9b3 3000 	ldrsh.w	r3, [r3]
   1df0c:	fb03 f300 	mul.w	r3, r3, r0
   1df10:	4413      	add	r3, r2
   1df12:	637b      	str	r3, [r7, #52]	; 0x34
		t1[6] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 12];
   1df14:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1df16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df18:	005b      	lsls	r3, r3, #1
   1df1a:	005b      	lsls	r3, r3, #1
   1df1c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1df20:	440b      	add	r3, r1
   1df22:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1df26:	4618      	mov	r0, r3
   1df28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df2a:	3305      	adds	r3, #5
   1df2c:	015b      	lsls	r3, r3, #5
   1df2e:	3318      	adds	r3, #24
   1df30:	6879      	ldr	r1, [r7, #4]
   1df32:	440b      	add	r3, r1
   1df34:	f9b3 3000 	ldrsh.w	r3, [r3]
   1df38:	fb03 f300 	mul.w	r3, r3, r0
   1df3c:	4413      	add	r3, r2
   1df3e:	63bb      	str	r3, [r7, #56]	; 0x38
		t1[6] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 13];
   1df40:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1df42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df44:	005b      	lsls	r3, r3, #1
   1df46:	3301      	adds	r3, #1
   1df48:	005b      	lsls	r3, r3, #1
   1df4a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1df4e:	440b      	add	r3, r1
   1df50:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1df54:	4618      	mov	r0, r3
   1df56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df58:	3305      	adds	r3, #5
   1df5a:	015b      	lsls	r3, r3, #5
   1df5c:	331a      	adds	r3, #26
   1df5e:	6879      	ldr	r1, [r7, #4]
   1df60:	440b      	add	r3, r1
   1df62:	f9b3 3000 	ldrsh.w	r3, [r3]
   1df66:	fb03 f300 	mul.w	r3, r3, r0
   1df6a:	4413      	add	r3, r2
   1df6c:	63bb      	str	r3, [r7, #56]	; 0x38
		t1[7] += (FIXED_A) t2[i * 2 + 0] * consts[80 + i * 16 + 14];
   1df6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1df70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df72:	005b      	lsls	r3, r3, #1
   1df74:	005b      	lsls	r3, r3, #1
   1df76:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1df7a:	440b      	add	r3, r1
   1df7c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1df80:	4618      	mov	r0, r3
   1df82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df84:	3305      	adds	r3, #5
   1df86:	015b      	lsls	r3, r3, #5
   1df88:	331c      	adds	r3, #28
   1df8a:	6879      	ldr	r1, [r7, #4]
   1df8c:	440b      	add	r3, r1
   1df8e:	f9b3 3000 	ldrsh.w	r3, [r3]
   1df92:	fb03 f300 	mul.w	r3, r3, r0
   1df96:	4413      	add	r3, r2
   1df98:	63fb      	str	r3, [r7, #60]	; 0x3c
		t1[7] += (FIXED_A) t2[i * 2 + 1] * consts[80 + i * 16 + 15];
   1df9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1df9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1df9e:	005b      	lsls	r3, r3, #1
   1dfa0:	3301      	adds	r3, #1
   1dfa2:	005b      	lsls	r3, r3, #1
   1dfa4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dfa8:	440b      	add	r3, r1
   1dfaa:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
   1dfae:	4618      	mov	r0, r3
   1dfb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dfb2:	3305      	adds	r3, #5
   1dfb4:	015b      	lsls	r3, r3, #5
   1dfb6:	331e      	adds	r3, #30
   1dfb8:	6879      	ldr	r1, [r7, #4]
   1dfba:	440b      	add	r3, r1
   1dfbc:	f9b3 3000 	ldrsh.w	r3, [r3]
   1dfc0:	fb03 f300 	mul.w	r3, r3, r0
   1dfc4:	4413      	add	r3, r2
   1dfc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < 4; i++) {
   1dfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dfca:	3301      	adds	r3, #1
   1dfcc:	647b      	str	r3, [r7, #68]	; 0x44
   1dfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dfd0:	2b03      	cmp	r3, #3
   1dfd2:	f77f ae91 	ble.w	1dcf8 <sbc_analyze_eight_simd+0x324>
	}

	for (i = 0; i < 8; i++)
   1dfd6:	2300      	movs	r3, #0
   1dfd8:	647b      	str	r3, [r7, #68]	; 0x44
   1dfda:	e00e      	b.n	1dffa <sbc_analyze_eight_simd+0x626>
		out[i] = t1[i] >>
   1dfdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dfde:	009b      	lsls	r3, r3, #2
   1dfe0:	68ba      	ldr	r2, [r7, #8]
   1dfe2:	441a      	add	r2, r3
   1dfe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dfe6:	009b      	lsls	r3, r3, #2
   1dfe8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   1dfec:	440b      	add	r3, r1
   1dfee:	f853 3c28 	ldr.w	r3, [r3, #-40]
   1dff2:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 8; i++)
   1dff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dff6:	3301      	adds	r3, #1
   1dff8:	647b      	str	r3, [r7, #68]	; 0x44
   1dffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1dffc:	2b07      	cmp	r3, #7
   1dffe:	dded      	ble.n	1dfdc <sbc_analyze_eight_simd+0x608>
			(SBC_COS_TABLE_FIXED8_SCALE - SCALE_OUT_BITS);
}
   1e000:	bf00      	nop
   1e002:	374c      	adds	r7, #76	; 0x4c
   1e004:	46bd      	mov	sp, r7
   1e006:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e00a:	4770      	bx	lr

0001e00c <sbc_analyze_4b_4s_simd>:

static inline void sbc_analyze_4b_4s_simd(struct sbc_encoder_state *state,
		int16_t *x, int32_t *out, int out_stride)
{
   1e00c:	b580      	push	{r7, lr}
   1e00e:	b084      	sub	sp, #16
   1e010:	af00      	add	r7, sp, #0
   1e012:	60f8      	str	r0, [r7, #12]
   1e014:	60b9      	str	r1, [r7, #8]
   1e016:	607a      	str	r2, [r7, #4]
   1e018:	603b      	str	r3, [r7, #0]
	/* Analyze blocks */
	sbc_analyze_four_simd(x + 12, out, analysis_consts_fixed4_simd_odd);
   1e01a:	68bb      	ldr	r3, [r7, #8]
   1e01c:	3318      	adds	r3, #24
   1e01e:	4a15      	ldr	r2, [pc, #84]	; (1e074 <sbc_analyze_4b_4s_simd+0x68>)
   1e020:	6879      	ldr	r1, [r7, #4]
   1e022:	4618      	mov	r0, r3
   1e024:	f7ff fb40 	bl	1d6a8 <sbc_analyze_four_simd>
	out += out_stride;
   1e028:	683b      	ldr	r3, [r7, #0]
   1e02a:	009b      	lsls	r3, r3, #2
   1e02c:	687a      	ldr	r2, [r7, #4]
   1e02e:	4413      	add	r3, r2
   1e030:	607b      	str	r3, [r7, #4]
	sbc_analyze_four_simd(x + 8, out, analysis_consts_fixed4_simd_even);
   1e032:	68bb      	ldr	r3, [r7, #8]
   1e034:	3310      	adds	r3, #16
   1e036:	4a10      	ldr	r2, [pc, #64]	; (1e078 <sbc_analyze_4b_4s_simd+0x6c>)
   1e038:	6879      	ldr	r1, [r7, #4]
   1e03a:	4618      	mov	r0, r3
   1e03c:	f7ff fb34 	bl	1d6a8 <sbc_analyze_four_simd>
	out += out_stride;
   1e040:	683b      	ldr	r3, [r7, #0]
   1e042:	009b      	lsls	r3, r3, #2
   1e044:	687a      	ldr	r2, [r7, #4]
   1e046:	4413      	add	r3, r2
   1e048:	607b      	str	r3, [r7, #4]
	sbc_analyze_four_simd(x + 4, out, analysis_consts_fixed4_simd_odd);
   1e04a:	68bb      	ldr	r3, [r7, #8]
   1e04c:	3308      	adds	r3, #8
   1e04e:	4a09      	ldr	r2, [pc, #36]	; (1e074 <sbc_analyze_4b_4s_simd+0x68>)
   1e050:	6879      	ldr	r1, [r7, #4]
   1e052:	4618      	mov	r0, r3
   1e054:	f7ff fb28 	bl	1d6a8 <sbc_analyze_four_simd>
	out += out_stride;
   1e058:	683b      	ldr	r3, [r7, #0]
   1e05a:	009b      	lsls	r3, r3, #2
   1e05c:	687a      	ldr	r2, [r7, #4]
   1e05e:	4413      	add	r3, r2
   1e060:	607b      	str	r3, [r7, #4]
	sbc_analyze_four_simd(x + 0, out, analysis_consts_fixed4_simd_even);
   1e062:	4a05      	ldr	r2, [pc, #20]	; (1e078 <sbc_analyze_4b_4s_simd+0x6c>)
   1e064:	6879      	ldr	r1, [r7, #4]
   1e066:	68b8      	ldr	r0, [r7, #8]
   1e068:	f7ff fb1e 	bl	1d6a8 <sbc_analyze_four_simd>
}
   1e06c:	bf00      	nop
   1e06e:	3710      	adds	r7, #16
   1e070:	46bd      	mov	sp, r7
   1e072:	bd80      	pop	{r7, pc}
   1e074:	0003c9f0 	.word	0x0003c9f0
   1e078:	0003c980 	.word	0x0003c980

0001e07c <sbc_analyze_4b_8s_simd>:

static inline void sbc_analyze_4b_8s_simd(struct sbc_encoder_state *state,
		int16_t *x, int32_t *out, int out_stride)
{
   1e07c:	b580      	push	{r7, lr}
   1e07e:	b084      	sub	sp, #16
   1e080:	af00      	add	r7, sp, #0
   1e082:	60f8      	str	r0, [r7, #12]
   1e084:	60b9      	str	r1, [r7, #8]
   1e086:	607a      	str	r2, [r7, #4]
   1e088:	603b      	str	r3, [r7, #0]
	/* Analyze blocks */
	sbc_analyze_eight_simd(x + 24, out, analysis_consts_fixed8_simd_odd);
   1e08a:	68bb      	ldr	r3, [r7, #8]
   1e08c:	3330      	adds	r3, #48	; 0x30
   1e08e:	4a15      	ldr	r2, [pc, #84]	; (1e0e4 <sbc_analyze_4b_8s_simd+0x68>)
   1e090:	6879      	ldr	r1, [r7, #4]
   1e092:	4618      	mov	r0, r3
   1e094:	f7ff fc9e 	bl	1d9d4 <sbc_analyze_eight_simd>
	out += out_stride;
   1e098:	683b      	ldr	r3, [r7, #0]
   1e09a:	009b      	lsls	r3, r3, #2
   1e09c:	687a      	ldr	r2, [r7, #4]
   1e09e:	4413      	add	r3, r2
   1e0a0:	607b      	str	r3, [r7, #4]
	sbc_analyze_eight_simd(x + 16, out, analysis_consts_fixed8_simd_even);
   1e0a2:	68bb      	ldr	r3, [r7, #8]
   1e0a4:	3320      	adds	r3, #32
   1e0a6:	4a10      	ldr	r2, [pc, #64]	; (1e0e8 <sbc_analyze_4b_8s_simd+0x6c>)
   1e0a8:	6879      	ldr	r1, [r7, #4]
   1e0aa:	4618      	mov	r0, r3
   1e0ac:	f7ff fc92 	bl	1d9d4 <sbc_analyze_eight_simd>
	out += out_stride;
   1e0b0:	683b      	ldr	r3, [r7, #0]
   1e0b2:	009b      	lsls	r3, r3, #2
   1e0b4:	687a      	ldr	r2, [r7, #4]
   1e0b6:	4413      	add	r3, r2
   1e0b8:	607b      	str	r3, [r7, #4]
	sbc_analyze_eight_simd(x + 8, out, analysis_consts_fixed8_simd_odd);
   1e0ba:	68bb      	ldr	r3, [r7, #8]
   1e0bc:	3310      	adds	r3, #16
   1e0be:	4a09      	ldr	r2, [pc, #36]	; (1e0e4 <sbc_analyze_4b_8s_simd+0x68>)
   1e0c0:	6879      	ldr	r1, [r7, #4]
   1e0c2:	4618      	mov	r0, r3
   1e0c4:	f7ff fc86 	bl	1d9d4 <sbc_analyze_eight_simd>
	out += out_stride;
   1e0c8:	683b      	ldr	r3, [r7, #0]
   1e0ca:	009b      	lsls	r3, r3, #2
   1e0cc:	687a      	ldr	r2, [r7, #4]
   1e0ce:	4413      	add	r3, r2
   1e0d0:	607b      	str	r3, [r7, #4]
	sbc_analyze_eight_simd(x + 0, out, analysis_consts_fixed8_simd_even);
   1e0d2:	4a05      	ldr	r2, [pc, #20]	; (1e0e8 <sbc_analyze_4b_8s_simd+0x6c>)
   1e0d4:	6879      	ldr	r1, [r7, #4]
   1e0d6:	68b8      	ldr	r0, [r7, #8]
   1e0d8:	f7ff fc7c 	bl	1d9d4 <sbc_analyze_eight_simd>
}
   1e0dc:	bf00      	nop
   1e0de:	3710      	adds	r7, #16
   1e0e0:	46bd      	mov	sp, r7
   1e0e2:	bd80      	pop	{r7, pc}
   1e0e4:	0003cb80 	.word	0x0003cb80
   1e0e8:	0003ca60 	.word	0x0003ca60

0001e0ec <sbc_analyze_1b_8s_simd_odd>:
static inline void sbc_analyze_1b_8s_simd_even(struct sbc_encoder_state *state,
		int16_t *x, int32_t *out, int out_stride);

static inline void sbc_analyze_1b_8s_simd_odd(struct sbc_encoder_state *state,
		int16_t *x, int32_t *out, int out_stride)
{
   1e0ec:	b580      	push	{r7, lr}
   1e0ee:	b084      	sub	sp, #16
   1e0f0:	af00      	add	r7, sp, #0
   1e0f2:	60f8      	str	r0, [r7, #12]
   1e0f4:	60b9      	str	r1, [r7, #8]
   1e0f6:	607a      	str	r2, [r7, #4]
   1e0f8:	603b      	str	r3, [r7, #0]
	sbc_analyze_eight_simd(x, out, analysis_consts_fixed8_simd_odd);
   1e0fa:	4a06      	ldr	r2, [pc, #24]	; (1e114 <sbc_analyze_1b_8s_simd_odd+0x28>)
   1e0fc:	6879      	ldr	r1, [r7, #4]
   1e0fe:	68b8      	ldr	r0, [r7, #8]
   1e100:	f7ff fc68 	bl	1d9d4 <sbc_analyze_eight_simd>
	state->sbc_analyze_8s = sbc_analyze_1b_8s_simd_even;
   1e104:	68fb      	ldr	r3, [r7, #12]
   1e106:	4a04      	ldr	r2, [pc, #16]	; (1e118 <sbc_analyze_1b_8s_simd_odd+0x2c>)
   1e108:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}
   1e10c:	bf00      	nop
   1e10e:	3710      	adds	r7, #16
   1e110:	46bd      	mov	sp, r7
   1e112:	bd80      	pop	{r7, pc}
   1e114:	0003cb80 	.word	0x0003cb80
   1e118:	0001e11d 	.word	0x0001e11d

0001e11c <sbc_analyze_1b_8s_simd_even>:

static inline void sbc_analyze_1b_8s_simd_even(struct sbc_encoder_state *state,
		int16_t *x, int32_t *out, int out_stride)
{
   1e11c:	b580      	push	{r7, lr}
   1e11e:	b084      	sub	sp, #16
   1e120:	af00      	add	r7, sp, #0
   1e122:	60f8      	str	r0, [r7, #12]
   1e124:	60b9      	str	r1, [r7, #8]
   1e126:	607a      	str	r2, [r7, #4]
   1e128:	603b      	str	r3, [r7, #0]
	sbc_analyze_eight_simd(x, out, analysis_consts_fixed8_simd_even);
   1e12a:	4a06      	ldr	r2, [pc, #24]	; (1e144 <sbc_analyze_1b_8s_simd_even+0x28>)
   1e12c:	6879      	ldr	r1, [r7, #4]
   1e12e:	68b8      	ldr	r0, [r7, #8]
   1e130:	f7ff fc50 	bl	1d9d4 <sbc_analyze_eight_simd>
	state->sbc_analyze_8s = sbc_analyze_1b_8s_simd_odd;
   1e134:	68fb      	ldr	r3, [r7, #12]
   1e136:	4a04      	ldr	r2, [pc, #16]	; (1e148 <sbc_analyze_1b_8s_simd_even+0x2c>)
   1e138:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
}
   1e13c:	bf00      	nop
   1e13e:	3710      	adds	r7, #16
   1e140:	46bd      	mov	sp, r7
   1e142:	bd80      	pop	{r7, pc}
   1e144:	0003ca60 	.word	0x0003ca60
   1e148:	0001e0ed 	.word	0x0001e0ed

0001e14c <unaligned16_be>:

static inline int16_t unaligned16_be(const uint8_t *ptr)
{
   1e14c:	b480      	push	{r7}
   1e14e:	b083      	sub	sp, #12
   1e150:	af00      	add	r7, sp, #0
   1e152:	6078      	str	r0, [r7, #4]
	return (int16_t) ((ptr[0] << 8) | ptr[1]);
   1e154:	687b      	ldr	r3, [r7, #4]
   1e156:	781b      	ldrb	r3, [r3, #0]
   1e158:	021b      	lsls	r3, r3, #8
   1e15a:	b21a      	sxth	r2, r3
   1e15c:	687b      	ldr	r3, [r7, #4]
   1e15e:	3301      	adds	r3, #1
   1e160:	781b      	ldrb	r3, [r3, #0]
   1e162:	b21b      	sxth	r3, r3
   1e164:	4313      	orrs	r3, r2
   1e166:	b21b      	sxth	r3, r3
}
   1e168:	4618      	mov	r0, r3
   1e16a:	370c      	adds	r7, #12
   1e16c:	46bd      	mov	sp, r7
   1e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e172:	4770      	bx	lr

0001e174 <unaligned16_le>:

static inline int16_t unaligned16_le(const uint8_t *ptr)
{
   1e174:	b480      	push	{r7}
   1e176:	b083      	sub	sp, #12
   1e178:	af00      	add	r7, sp, #0
   1e17a:	6078      	str	r0, [r7, #4]
	return (int16_t) (ptr[0] | (ptr[1] << 8));
   1e17c:	687b      	ldr	r3, [r7, #4]
   1e17e:	781b      	ldrb	r3, [r3, #0]
   1e180:	b21a      	sxth	r2, r3
   1e182:	687b      	ldr	r3, [r7, #4]
   1e184:	3301      	adds	r3, #1
   1e186:	781b      	ldrb	r3, [r3, #0]
   1e188:	021b      	lsls	r3, r3, #8
   1e18a:	b21b      	sxth	r3, r3
   1e18c:	4313      	orrs	r3, r2
   1e18e:	b21b      	sxth	r3, r3
}
   1e190:	4618      	mov	r0, r3
   1e192:	370c      	adds	r7, #12
   1e194:	46bd      	mov	sp, r7
   1e196:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e19a:	4770      	bx	lr

0001e19c <sbc_encoder_process_input_s4_internal>:

static SBC_ALWAYS_INLINE int sbc_encoder_process_input_s4_internal(
	int position,
	const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
	int nsamples, int nchannels, int big_endian)
{
   1e19c:	b590      	push	{r4, r7, lr}
   1e19e:	b087      	sub	sp, #28
   1e1a0:	af00      	add	r7, sp, #0
   1e1a2:	60f8      	str	r0, [r7, #12]
   1e1a4:	60b9      	str	r1, [r7, #8]
   1e1a6:	607a      	str	r2, [r7, #4]
   1e1a8:	603b      	str	r3, [r7, #0]
	/* handle X buffer wraparound */
	if (position < nsamples) {
   1e1aa:	68fa      	ldr	r2, [r7, #12]
   1e1ac:	683b      	ldr	r3, [r7, #0]
   1e1ae:	429a      	cmp	r2, r3
   1e1b0:	f280 8209 	bge.w	1e5c6 <sbc_encoder_process_input_s4_internal+0x42a>
		if (nchannels > 0)
   1e1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e1b6:	2b00      	cmp	r3, #0
   1e1b8:	dd0a      	ble.n	1e1d0 <sbc_encoder_process_input_s4_internal+0x34>
			memcpy(&X[0][SBC_X_BUFFER_SIZE - 40], &X[0][position],
   1e1ba:	687b      	ldr	r3, [r7, #4]
   1e1bc:	f503 7010 	add.w	r0, r3, #576	; 0x240
   1e1c0:	68fb      	ldr	r3, [r7, #12]
   1e1c2:	005b      	lsls	r3, r3, #1
   1e1c4:	687a      	ldr	r2, [r7, #4]
   1e1c6:	4413      	add	r3, r2
   1e1c8:	2248      	movs	r2, #72	; 0x48
   1e1ca:	4619      	mov	r1, r3
   1e1cc:	f7ed ffc8 	bl	c160 <memcpy>
							36 * sizeof(int16_t));
		if (nchannels > 1)
   1e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e1d2:	2b01      	cmp	r3, #1
   1e1d4:	dd0e      	ble.n	1e1f4 <sbc_encoder_process_input_s4_internal+0x58>
			memcpy(&X[1][SBC_X_BUFFER_SIZE - 40], &X[1][position],
   1e1d6:	687b      	ldr	r3, [r7, #4]
   1e1d8:	f503 7324 	add.w	r3, r3, #656	; 0x290
   1e1dc:	f503 7010 	add.w	r0, r3, #576	; 0x240
   1e1e0:	687b      	ldr	r3, [r7, #4]
   1e1e2:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1e1e6:	68fb      	ldr	r3, [r7, #12]
   1e1e8:	005b      	lsls	r3, r3, #1
   1e1ea:	4413      	add	r3, r2
   1e1ec:	2248      	movs	r2, #72	; 0x48
   1e1ee:	4619      	mov	r1, r3
   1e1f0:	f7ed ffb6 	bl	c160 <memcpy>
							36 * sizeof(int16_t));
		position = SBC_X_BUFFER_SIZE - 40;
   1e1f4:	f44f 7390 	mov.w	r3, #288	; 0x120
   1e1f8:	60fb      	str	r3, [r7, #12]

	#define PCM(i) (big_endian ? \
		unaligned16_be(pcm + (i) * 2) : unaligned16_le(pcm + (i) * 2))

	/* copy/permutate audio samples */
	while ((nsamples -= 8) >= 0) {
   1e1fa:	e1e4      	b.n	1e5c6 <sbc_encoder_process_input_s4_internal+0x42a>
		position -= 8;
   1e1fc:	68fb      	ldr	r3, [r7, #12]
   1e1fe:	3b08      	subs	r3, #8
   1e200:	60fb      	str	r3, [r7, #12]
		if (nchannels > 0) {
   1e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e204:	2b00      	cmp	r3, #0
   1e206:	f340 80e0 	ble.w	1e3ca <sbc_encoder_process_input_s4_internal+0x22e>
			int16_t *x = &X[0][position];
   1e20a:	68fb      	ldr	r3, [r7, #12]
   1e20c:	005b      	lsls	r3, r3, #1
   1e20e:	687a      	ldr	r2, [r7, #4]
   1e210:	4413      	add	r3, r2
   1e212:	617b      	str	r3, [r7, #20]
			x[0]  = PCM(0 + 7 * nchannels);
   1e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e216:	2b00      	cmp	r3, #0
   1e218:	d00d      	beq.n	1e236 <sbc_encoder_process_input_s4_internal+0x9a>
   1e21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e21c:	4613      	mov	r3, r2
   1e21e:	00db      	lsls	r3, r3, #3
   1e220:	1a9b      	subs	r3, r3, r2
   1e222:	005b      	lsls	r3, r3, #1
   1e224:	461a      	mov	r2, r3
   1e226:	68bb      	ldr	r3, [r7, #8]
   1e228:	4413      	add	r3, r2
   1e22a:	4618      	mov	r0, r3
   1e22c:	f7ff ff8e 	bl	1e14c <unaligned16_be>
   1e230:	4603      	mov	r3, r0
   1e232:	461a      	mov	r2, r3
   1e234:	e00c      	b.n	1e250 <sbc_encoder_process_input_s4_internal+0xb4>
   1e236:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e238:	4613      	mov	r3, r2
   1e23a:	00db      	lsls	r3, r3, #3
   1e23c:	1a9b      	subs	r3, r3, r2
   1e23e:	005b      	lsls	r3, r3, #1
   1e240:	461a      	mov	r2, r3
   1e242:	68bb      	ldr	r3, [r7, #8]
   1e244:	4413      	add	r3, r2
   1e246:	4618      	mov	r0, r3
   1e248:	f7ff ff94 	bl	1e174 <unaligned16_le>
   1e24c:	4603      	mov	r3, r0
   1e24e:	461a      	mov	r2, r3
   1e250:	697b      	ldr	r3, [r7, #20]
   1e252:	801a      	strh	r2, [r3, #0]
			x[1]  = PCM(0 + 3 * nchannels);
   1e254:	697b      	ldr	r3, [r7, #20]
   1e256:	1c9c      	adds	r4, r3, #2
   1e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e25a:	2b00      	cmp	r3, #0
   1e25c:	d00c      	beq.n	1e278 <sbc_encoder_process_input_s4_internal+0xdc>
   1e25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e260:	4613      	mov	r3, r2
   1e262:	005b      	lsls	r3, r3, #1
   1e264:	4413      	add	r3, r2
   1e266:	005b      	lsls	r3, r3, #1
   1e268:	461a      	mov	r2, r3
   1e26a:	68bb      	ldr	r3, [r7, #8]
   1e26c:	4413      	add	r3, r2
   1e26e:	4618      	mov	r0, r3
   1e270:	f7ff ff6c 	bl	1e14c <unaligned16_be>
   1e274:	4603      	mov	r3, r0
   1e276:	e00b      	b.n	1e290 <sbc_encoder_process_input_s4_internal+0xf4>
   1e278:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e27a:	4613      	mov	r3, r2
   1e27c:	005b      	lsls	r3, r3, #1
   1e27e:	4413      	add	r3, r2
   1e280:	005b      	lsls	r3, r3, #1
   1e282:	461a      	mov	r2, r3
   1e284:	68bb      	ldr	r3, [r7, #8]
   1e286:	4413      	add	r3, r2
   1e288:	4618      	mov	r0, r3
   1e28a:	f7ff ff73 	bl	1e174 <unaligned16_le>
   1e28e:	4603      	mov	r3, r0
   1e290:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(0 + 6 * nchannels);
   1e292:	697b      	ldr	r3, [r7, #20]
   1e294:	1d1c      	adds	r4, r3, #4
   1e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e298:	2b00      	cmp	r3, #0
   1e29a:	d00c      	beq.n	1e2b6 <sbc_encoder_process_input_s4_internal+0x11a>
   1e29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e29e:	4613      	mov	r3, r2
   1e2a0:	005b      	lsls	r3, r3, #1
   1e2a2:	4413      	add	r3, r2
   1e2a4:	009b      	lsls	r3, r3, #2
   1e2a6:	461a      	mov	r2, r3
   1e2a8:	68bb      	ldr	r3, [r7, #8]
   1e2aa:	4413      	add	r3, r2
   1e2ac:	4618      	mov	r0, r3
   1e2ae:	f7ff ff4d 	bl	1e14c <unaligned16_be>
   1e2b2:	4603      	mov	r3, r0
   1e2b4:	e00b      	b.n	1e2ce <sbc_encoder_process_input_s4_internal+0x132>
   1e2b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e2b8:	4613      	mov	r3, r2
   1e2ba:	005b      	lsls	r3, r3, #1
   1e2bc:	4413      	add	r3, r2
   1e2be:	009b      	lsls	r3, r3, #2
   1e2c0:	461a      	mov	r2, r3
   1e2c2:	68bb      	ldr	r3, [r7, #8]
   1e2c4:	4413      	add	r3, r2
   1e2c6:	4618      	mov	r0, r3
   1e2c8:	f7ff ff54 	bl	1e174 <unaligned16_le>
   1e2cc:	4603      	mov	r3, r0
   1e2ce:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(0 + 4 * nchannels);
   1e2d0:	697b      	ldr	r3, [r7, #20]
   1e2d2:	1d9c      	adds	r4, r3, #6
   1e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e2d6:	2b00      	cmp	r3, #0
   1e2d8:	d009      	beq.n	1e2ee <sbc_encoder_process_input_s4_internal+0x152>
   1e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2dc:	00db      	lsls	r3, r3, #3
   1e2de:	461a      	mov	r2, r3
   1e2e0:	68bb      	ldr	r3, [r7, #8]
   1e2e2:	4413      	add	r3, r2
   1e2e4:	4618      	mov	r0, r3
   1e2e6:	f7ff ff31 	bl	1e14c <unaligned16_be>
   1e2ea:	4603      	mov	r3, r0
   1e2ec:	e008      	b.n	1e300 <sbc_encoder_process_input_s4_internal+0x164>
   1e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e2f0:	00db      	lsls	r3, r3, #3
   1e2f2:	461a      	mov	r2, r3
   1e2f4:	68bb      	ldr	r3, [r7, #8]
   1e2f6:	4413      	add	r3, r2
   1e2f8:	4618      	mov	r0, r3
   1e2fa:	f7ff ff3b 	bl	1e174 <unaligned16_le>
   1e2fe:	4603      	mov	r3, r0
   1e300:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(0 + 0 * nchannels);
   1e302:	697b      	ldr	r3, [r7, #20]
   1e304:	f103 0408 	add.w	r4, r3, #8
   1e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e30a:	2b00      	cmp	r3, #0
   1e30c:	d004      	beq.n	1e318 <sbc_encoder_process_input_s4_internal+0x17c>
   1e30e:	68b8      	ldr	r0, [r7, #8]
   1e310:	f7ff ff1c 	bl	1e14c <unaligned16_be>
   1e314:	4603      	mov	r3, r0
   1e316:	e003      	b.n	1e320 <sbc_encoder_process_input_s4_internal+0x184>
   1e318:	68b8      	ldr	r0, [r7, #8]
   1e31a:	f7ff ff2b 	bl	1e174 <unaligned16_le>
   1e31e:	4603      	mov	r3, r0
   1e320:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(0 + 2 * nchannels);
   1e322:	697b      	ldr	r3, [r7, #20]
   1e324:	f103 040a 	add.w	r4, r3, #10
   1e328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e32a:	2b00      	cmp	r3, #0
   1e32c:	d009      	beq.n	1e342 <sbc_encoder_process_input_s4_internal+0x1a6>
   1e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e330:	009b      	lsls	r3, r3, #2
   1e332:	461a      	mov	r2, r3
   1e334:	68bb      	ldr	r3, [r7, #8]
   1e336:	4413      	add	r3, r2
   1e338:	4618      	mov	r0, r3
   1e33a:	f7ff ff07 	bl	1e14c <unaligned16_be>
   1e33e:	4603      	mov	r3, r0
   1e340:	e008      	b.n	1e354 <sbc_encoder_process_input_s4_internal+0x1b8>
   1e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e344:	009b      	lsls	r3, r3, #2
   1e346:	461a      	mov	r2, r3
   1e348:	68bb      	ldr	r3, [r7, #8]
   1e34a:	4413      	add	r3, r2
   1e34c:	4618      	mov	r0, r3
   1e34e:	f7ff ff11 	bl	1e174 <unaligned16_le>
   1e352:	4603      	mov	r3, r0
   1e354:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(0 + 1 * nchannels);
   1e356:	697b      	ldr	r3, [r7, #20]
   1e358:	f103 040c 	add.w	r4, r3, #12
   1e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e35e:	2b00      	cmp	r3, #0
   1e360:	d009      	beq.n	1e376 <sbc_encoder_process_input_s4_internal+0x1da>
   1e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e364:	005b      	lsls	r3, r3, #1
   1e366:	461a      	mov	r2, r3
   1e368:	68bb      	ldr	r3, [r7, #8]
   1e36a:	4413      	add	r3, r2
   1e36c:	4618      	mov	r0, r3
   1e36e:	f7ff feed 	bl	1e14c <unaligned16_be>
   1e372:	4603      	mov	r3, r0
   1e374:	e008      	b.n	1e388 <sbc_encoder_process_input_s4_internal+0x1ec>
   1e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e378:	005b      	lsls	r3, r3, #1
   1e37a:	461a      	mov	r2, r3
   1e37c:	68bb      	ldr	r3, [r7, #8]
   1e37e:	4413      	add	r3, r2
   1e380:	4618      	mov	r0, r3
   1e382:	f7ff fef7 	bl	1e174 <unaligned16_le>
   1e386:	4603      	mov	r3, r0
   1e388:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(0 + 5 * nchannels);
   1e38a:	697b      	ldr	r3, [r7, #20]
   1e38c:	f103 040e 	add.w	r4, r3, #14
   1e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e392:	2b00      	cmp	r3, #0
   1e394:	d00c      	beq.n	1e3b0 <sbc_encoder_process_input_s4_internal+0x214>
   1e396:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e398:	4613      	mov	r3, r2
   1e39a:	009b      	lsls	r3, r3, #2
   1e39c:	4413      	add	r3, r2
   1e39e:	005b      	lsls	r3, r3, #1
   1e3a0:	461a      	mov	r2, r3
   1e3a2:	68bb      	ldr	r3, [r7, #8]
   1e3a4:	4413      	add	r3, r2
   1e3a6:	4618      	mov	r0, r3
   1e3a8:	f7ff fed0 	bl	1e14c <unaligned16_be>
   1e3ac:	4603      	mov	r3, r0
   1e3ae:	e00b      	b.n	1e3c8 <sbc_encoder_process_input_s4_internal+0x22c>
   1e3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e3b2:	4613      	mov	r3, r2
   1e3b4:	009b      	lsls	r3, r3, #2
   1e3b6:	4413      	add	r3, r2
   1e3b8:	005b      	lsls	r3, r3, #1
   1e3ba:	461a      	mov	r2, r3
   1e3bc:	68bb      	ldr	r3, [r7, #8]
   1e3be:	4413      	add	r3, r2
   1e3c0:	4618      	mov	r0, r3
   1e3c2:	f7ff fed7 	bl	1e174 <unaligned16_le>
   1e3c6:	4603      	mov	r3, r0
   1e3c8:	8023      	strh	r3, [r4, #0]
		}
		if (nchannels > 1) {
   1e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e3cc:	2b01      	cmp	r3, #1
   1e3ce:	f340 80f4 	ble.w	1e5ba <sbc_encoder_process_input_s4_internal+0x41e>
			int16_t *x = &X[1][position];
   1e3d2:	687b      	ldr	r3, [r7, #4]
   1e3d4:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1e3d8:	68fb      	ldr	r3, [r7, #12]
   1e3da:	005b      	lsls	r3, r3, #1
   1e3dc:	4413      	add	r3, r2
   1e3de:	613b      	str	r3, [r7, #16]
			x[0]  = PCM(1 + 7 * nchannels);
   1e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e3e2:	2b00      	cmp	r3, #0
   1e3e4:	d00e      	beq.n	1e404 <sbc_encoder_process_input_s4_internal+0x268>
   1e3e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e3e8:	4613      	mov	r3, r2
   1e3ea:	00db      	lsls	r3, r3, #3
   1e3ec:	1a9b      	subs	r3, r3, r2
   1e3ee:	005b      	lsls	r3, r3, #1
   1e3f0:	3302      	adds	r3, #2
   1e3f2:	461a      	mov	r2, r3
   1e3f4:	68bb      	ldr	r3, [r7, #8]
   1e3f6:	4413      	add	r3, r2
   1e3f8:	4618      	mov	r0, r3
   1e3fa:	f7ff fea7 	bl	1e14c <unaligned16_be>
   1e3fe:	4603      	mov	r3, r0
   1e400:	461a      	mov	r2, r3
   1e402:	e00d      	b.n	1e420 <sbc_encoder_process_input_s4_internal+0x284>
   1e404:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e406:	4613      	mov	r3, r2
   1e408:	00db      	lsls	r3, r3, #3
   1e40a:	1a9b      	subs	r3, r3, r2
   1e40c:	005b      	lsls	r3, r3, #1
   1e40e:	3302      	adds	r3, #2
   1e410:	461a      	mov	r2, r3
   1e412:	68bb      	ldr	r3, [r7, #8]
   1e414:	4413      	add	r3, r2
   1e416:	4618      	mov	r0, r3
   1e418:	f7ff feac 	bl	1e174 <unaligned16_le>
   1e41c:	4603      	mov	r3, r0
   1e41e:	461a      	mov	r2, r3
   1e420:	693b      	ldr	r3, [r7, #16]
   1e422:	801a      	strh	r2, [r3, #0]
			x[1]  = PCM(1 + 3 * nchannels);
   1e424:	693b      	ldr	r3, [r7, #16]
   1e426:	1c9c      	adds	r4, r3, #2
   1e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e42a:	2b00      	cmp	r3, #0
   1e42c:	d00d      	beq.n	1e44a <sbc_encoder_process_input_s4_internal+0x2ae>
   1e42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e430:	4613      	mov	r3, r2
   1e432:	005b      	lsls	r3, r3, #1
   1e434:	4413      	add	r3, r2
   1e436:	005b      	lsls	r3, r3, #1
   1e438:	3302      	adds	r3, #2
   1e43a:	461a      	mov	r2, r3
   1e43c:	68bb      	ldr	r3, [r7, #8]
   1e43e:	4413      	add	r3, r2
   1e440:	4618      	mov	r0, r3
   1e442:	f7ff fe83 	bl	1e14c <unaligned16_be>
   1e446:	4603      	mov	r3, r0
   1e448:	e00c      	b.n	1e464 <sbc_encoder_process_input_s4_internal+0x2c8>
   1e44a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e44c:	4613      	mov	r3, r2
   1e44e:	005b      	lsls	r3, r3, #1
   1e450:	4413      	add	r3, r2
   1e452:	005b      	lsls	r3, r3, #1
   1e454:	3302      	adds	r3, #2
   1e456:	461a      	mov	r2, r3
   1e458:	68bb      	ldr	r3, [r7, #8]
   1e45a:	4413      	add	r3, r2
   1e45c:	4618      	mov	r0, r3
   1e45e:	f7ff fe89 	bl	1e174 <unaligned16_le>
   1e462:	4603      	mov	r3, r0
   1e464:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(1 + 6 * nchannels);
   1e466:	693b      	ldr	r3, [r7, #16]
   1e468:	1d1c      	adds	r4, r3, #4
   1e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e46c:	2b00      	cmp	r3, #0
   1e46e:	d00d      	beq.n	1e48c <sbc_encoder_process_input_s4_internal+0x2f0>
   1e470:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e472:	4613      	mov	r3, r2
   1e474:	005b      	lsls	r3, r3, #1
   1e476:	4413      	add	r3, r2
   1e478:	009b      	lsls	r3, r3, #2
   1e47a:	3302      	adds	r3, #2
   1e47c:	461a      	mov	r2, r3
   1e47e:	68bb      	ldr	r3, [r7, #8]
   1e480:	4413      	add	r3, r2
   1e482:	4618      	mov	r0, r3
   1e484:	f7ff fe62 	bl	1e14c <unaligned16_be>
   1e488:	4603      	mov	r3, r0
   1e48a:	e00c      	b.n	1e4a6 <sbc_encoder_process_input_s4_internal+0x30a>
   1e48c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e48e:	4613      	mov	r3, r2
   1e490:	005b      	lsls	r3, r3, #1
   1e492:	4413      	add	r3, r2
   1e494:	009b      	lsls	r3, r3, #2
   1e496:	3302      	adds	r3, #2
   1e498:	461a      	mov	r2, r3
   1e49a:	68bb      	ldr	r3, [r7, #8]
   1e49c:	4413      	add	r3, r2
   1e49e:	4618      	mov	r0, r3
   1e4a0:	f7ff fe68 	bl	1e174 <unaligned16_le>
   1e4a4:	4603      	mov	r3, r0
   1e4a6:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(1 + 4 * nchannels);
   1e4a8:	693b      	ldr	r3, [r7, #16]
   1e4aa:	1d9c      	adds	r4, r3, #6
   1e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e4ae:	2b00      	cmp	r3, #0
   1e4b0:	d00a      	beq.n	1e4c8 <sbc_encoder_process_input_s4_internal+0x32c>
   1e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4b4:	00db      	lsls	r3, r3, #3
   1e4b6:	3302      	adds	r3, #2
   1e4b8:	461a      	mov	r2, r3
   1e4ba:	68bb      	ldr	r3, [r7, #8]
   1e4bc:	4413      	add	r3, r2
   1e4be:	4618      	mov	r0, r3
   1e4c0:	f7ff fe44 	bl	1e14c <unaligned16_be>
   1e4c4:	4603      	mov	r3, r0
   1e4c6:	e009      	b.n	1e4dc <sbc_encoder_process_input_s4_internal+0x340>
   1e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e4ca:	00db      	lsls	r3, r3, #3
   1e4cc:	3302      	adds	r3, #2
   1e4ce:	461a      	mov	r2, r3
   1e4d0:	68bb      	ldr	r3, [r7, #8]
   1e4d2:	4413      	add	r3, r2
   1e4d4:	4618      	mov	r0, r3
   1e4d6:	f7ff fe4d 	bl	1e174 <unaligned16_le>
   1e4da:	4603      	mov	r3, r0
   1e4dc:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(1 + 0 * nchannels);
   1e4de:	693b      	ldr	r3, [r7, #16]
   1e4e0:	f103 0408 	add.w	r4, r3, #8
   1e4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	d006      	beq.n	1e4f8 <sbc_encoder_process_input_s4_internal+0x35c>
   1e4ea:	68bb      	ldr	r3, [r7, #8]
   1e4ec:	3302      	adds	r3, #2
   1e4ee:	4618      	mov	r0, r3
   1e4f0:	f7ff fe2c 	bl	1e14c <unaligned16_be>
   1e4f4:	4603      	mov	r3, r0
   1e4f6:	e005      	b.n	1e504 <sbc_encoder_process_input_s4_internal+0x368>
   1e4f8:	68bb      	ldr	r3, [r7, #8]
   1e4fa:	3302      	adds	r3, #2
   1e4fc:	4618      	mov	r0, r3
   1e4fe:	f7ff fe39 	bl	1e174 <unaligned16_le>
   1e502:	4603      	mov	r3, r0
   1e504:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(1 + 2 * nchannels);
   1e506:	693b      	ldr	r3, [r7, #16]
   1e508:	f103 040a 	add.w	r4, r3, #10
   1e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e50e:	2b00      	cmp	r3, #0
   1e510:	d00a      	beq.n	1e528 <sbc_encoder_process_input_s4_internal+0x38c>
   1e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e514:	009b      	lsls	r3, r3, #2
   1e516:	3302      	adds	r3, #2
   1e518:	461a      	mov	r2, r3
   1e51a:	68bb      	ldr	r3, [r7, #8]
   1e51c:	4413      	add	r3, r2
   1e51e:	4618      	mov	r0, r3
   1e520:	f7ff fe14 	bl	1e14c <unaligned16_be>
   1e524:	4603      	mov	r3, r0
   1e526:	e009      	b.n	1e53c <sbc_encoder_process_input_s4_internal+0x3a0>
   1e528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e52a:	009b      	lsls	r3, r3, #2
   1e52c:	3302      	adds	r3, #2
   1e52e:	461a      	mov	r2, r3
   1e530:	68bb      	ldr	r3, [r7, #8]
   1e532:	4413      	add	r3, r2
   1e534:	4618      	mov	r0, r3
   1e536:	f7ff fe1d 	bl	1e174 <unaligned16_le>
   1e53a:	4603      	mov	r3, r0
   1e53c:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(1 + 1 * nchannels);
   1e53e:	693b      	ldr	r3, [r7, #16]
   1e540:	f103 040c 	add.w	r4, r3, #12
   1e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e546:	2b00      	cmp	r3, #0
   1e548:	d00a      	beq.n	1e560 <sbc_encoder_process_input_s4_internal+0x3c4>
   1e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e54c:	3301      	adds	r3, #1
   1e54e:	005b      	lsls	r3, r3, #1
   1e550:	461a      	mov	r2, r3
   1e552:	68bb      	ldr	r3, [r7, #8]
   1e554:	4413      	add	r3, r2
   1e556:	4618      	mov	r0, r3
   1e558:	f7ff fdf8 	bl	1e14c <unaligned16_be>
   1e55c:	4603      	mov	r3, r0
   1e55e:	e009      	b.n	1e574 <sbc_encoder_process_input_s4_internal+0x3d8>
   1e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e562:	3301      	adds	r3, #1
   1e564:	005b      	lsls	r3, r3, #1
   1e566:	461a      	mov	r2, r3
   1e568:	68bb      	ldr	r3, [r7, #8]
   1e56a:	4413      	add	r3, r2
   1e56c:	4618      	mov	r0, r3
   1e56e:	f7ff fe01 	bl	1e174 <unaligned16_le>
   1e572:	4603      	mov	r3, r0
   1e574:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(1 + 5 * nchannels);
   1e576:	693b      	ldr	r3, [r7, #16]
   1e578:	f103 040e 	add.w	r4, r3, #14
   1e57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e57e:	2b00      	cmp	r3, #0
   1e580:	d00d      	beq.n	1e59e <sbc_encoder_process_input_s4_internal+0x402>
   1e582:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e584:	4613      	mov	r3, r2
   1e586:	009b      	lsls	r3, r3, #2
   1e588:	4413      	add	r3, r2
   1e58a:	005b      	lsls	r3, r3, #1
   1e58c:	3302      	adds	r3, #2
   1e58e:	461a      	mov	r2, r3
   1e590:	68bb      	ldr	r3, [r7, #8]
   1e592:	4413      	add	r3, r2
   1e594:	4618      	mov	r0, r3
   1e596:	f7ff fdd9 	bl	1e14c <unaligned16_be>
   1e59a:	4603      	mov	r3, r0
   1e59c:	e00c      	b.n	1e5b8 <sbc_encoder_process_input_s4_internal+0x41c>
   1e59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e5a0:	4613      	mov	r3, r2
   1e5a2:	009b      	lsls	r3, r3, #2
   1e5a4:	4413      	add	r3, r2
   1e5a6:	005b      	lsls	r3, r3, #1
   1e5a8:	3302      	adds	r3, #2
   1e5aa:	461a      	mov	r2, r3
   1e5ac:	68bb      	ldr	r3, [r7, #8]
   1e5ae:	4413      	add	r3, r2
   1e5b0:	4618      	mov	r0, r3
   1e5b2:	f7ff fddf 	bl	1e174 <unaligned16_le>
   1e5b6:	4603      	mov	r3, r0
   1e5b8:	8023      	strh	r3, [r4, #0]
		}
		pcm += 16 * nchannels;
   1e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e5bc:	011b      	lsls	r3, r3, #4
   1e5be:	461a      	mov	r2, r3
   1e5c0:	68bb      	ldr	r3, [r7, #8]
   1e5c2:	4413      	add	r3, r2
   1e5c4:	60bb      	str	r3, [r7, #8]
	while ((nsamples -= 8) >= 0) {
   1e5c6:	683b      	ldr	r3, [r7, #0]
   1e5c8:	3b08      	subs	r3, #8
   1e5ca:	603b      	str	r3, [r7, #0]
   1e5cc:	683b      	ldr	r3, [r7, #0]
   1e5ce:	2b00      	cmp	r3, #0
   1e5d0:	f6bf ae14 	bge.w	1e1fc <sbc_encoder_process_input_s4_internal+0x60>
	}
	#undef PCM

	return position;
   1e5d4:	68fb      	ldr	r3, [r7, #12]
}
   1e5d6:	4618      	mov	r0, r3
   1e5d8:	371c      	adds	r7, #28
   1e5da:	46bd      	mov	sp, r7
   1e5dc:	bd90      	pop	{r4, r7, pc}

0001e5de <sbc_encoder_process_input_s8_internal>:

static SBC_ALWAYS_INLINE int sbc_encoder_process_input_s8_internal(
	int position,
	const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
	int nsamples, int nchannels, int big_endian)
{
   1e5de:	b590      	push	{r4, r7, lr}
   1e5e0:	b08b      	sub	sp, #44	; 0x2c
   1e5e2:	af00      	add	r7, sp, #0
   1e5e4:	60f8      	str	r0, [r7, #12]
   1e5e6:	60b9      	str	r1, [r7, #8]
   1e5e8:	607a      	str	r2, [r7, #4]
   1e5ea:	603b      	str	r3, [r7, #0]
	/* handle X buffer wraparound */
	if (position < nsamples) {
   1e5ec:	68fa      	ldr	r2, [r7, #12]
   1e5ee:	683b      	ldr	r3, [r7, #0]
   1e5f0:	429a      	cmp	r2, r3
   1e5f2:	da22      	bge.n	1e63a <sbc_encoder_process_input_s8_internal+0x5c>
		if (nchannels > 0)
   1e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e5f6:	2b00      	cmp	r3, #0
   1e5f8:	dd0a      	ble.n	1e610 <sbc_encoder_process_input_s8_internal+0x32>
			memcpy(&X[0][SBC_X_BUFFER_SIZE - 72], &X[0][position],
   1e5fa:	687b      	ldr	r3, [r7, #4]
   1e5fc:	f503 7000 	add.w	r0, r3, #512	; 0x200
   1e600:	68fb      	ldr	r3, [r7, #12]
   1e602:	005b      	lsls	r3, r3, #1
   1e604:	687a      	ldr	r2, [r7, #4]
   1e606:	4413      	add	r3, r2
   1e608:	2290      	movs	r2, #144	; 0x90
   1e60a:	4619      	mov	r1, r3
   1e60c:	f7ed fda8 	bl	c160 <memcpy>
							72 * sizeof(int16_t));
		if (nchannels > 1)
   1e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e612:	2b01      	cmp	r3, #1
   1e614:	dd0e      	ble.n	1e634 <sbc_encoder_process_input_s8_internal+0x56>
			memcpy(&X[1][SBC_X_BUFFER_SIZE - 72], &X[1][position],
   1e616:	687b      	ldr	r3, [r7, #4]
   1e618:	f503 7324 	add.w	r3, r3, #656	; 0x290
   1e61c:	f503 7000 	add.w	r0, r3, #512	; 0x200
   1e620:	687b      	ldr	r3, [r7, #4]
   1e622:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1e626:	68fb      	ldr	r3, [r7, #12]
   1e628:	005b      	lsls	r3, r3, #1
   1e62a:	4413      	add	r3, r2
   1e62c:	2290      	movs	r2, #144	; 0x90
   1e62e:	4619      	mov	r1, r3
   1e630:	f7ed fd96 	bl	c160 <memcpy>
							72 * sizeof(int16_t));
		position = SBC_X_BUFFER_SIZE - 72;
   1e634:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e638:	60fb      	str	r3, [r7, #12]
	}

	#define PCM(i) (big_endian ? \
		unaligned16_be(pcm + (i) * 2) : unaligned16_le(pcm + (i) * 2))

	if (position % 16 == 8) {
   1e63a:	68fb      	ldr	r3, [r7, #12]
   1e63c:	425a      	negs	r2, r3
   1e63e:	f003 030f 	and.w	r3, r3, #15
   1e642:	f002 020f 	and.w	r2, r2, #15
   1e646:	bf58      	it	pl
   1e648:	4253      	negpl	r3, r2
   1e64a:	2b08      	cmp	r3, #8
   1e64c:	f040 85cf 	bne.w	1f1ee <sbc_encoder_process_input_s8_internal+0xc10>
		position -= 8;
   1e650:	68fb      	ldr	r3, [r7, #12]
   1e652:	3b08      	subs	r3, #8
   1e654:	60fb      	str	r3, [r7, #12]
		nsamples -= 8;
   1e656:	683b      	ldr	r3, [r7, #0]
   1e658:	3b08      	subs	r3, #8
   1e65a:	603b      	str	r3, [r7, #0]
		if (nchannels > 0) {
   1e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e65e:	2b00      	cmp	r3, #0
   1e660:	f340 80e1 	ble.w	1e826 <sbc_encoder_process_input_s8_internal+0x248>
			int16_t *x = &X[0][position];
   1e664:	68fb      	ldr	r3, [r7, #12]
   1e666:	005b      	lsls	r3, r3, #1
   1e668:	687a      	ldr	r2, [r7, #4]
   1e66a:	4413      	add	r3, r2
   1e66c:	627b      	str	r3, [r7, #36]	; 0x24
			x[0]  = PCM(0 + (15-8) * nchannels);
   1e66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e670:	2b00      	cmp	r3, #0
   1e672:	d00d      	beq.n	1e690 <sbc_encoder_process_input_s8_internal+0xb2>
   1e674:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e676:	4613      	mov	r3, r2
   1e678:	00db      	lsls	r3, r3, #3
   1e67a:	1a9b      	subs	r3, r3, r2
   1e67c:	005b      	lsls	r3, r3, #1
   1e67e:	461a      	mov	r2, r3
   1e680:	68bb      	ldr	r3, [r7, #8]
   1e682:	4413      	add	r3, r2
   1e684:	4618      	mov	r0, r3
   1e686:	f7ff fd61 	bl	1e14c <unaligned16_be>
   1e68a:	4603      	mov	r3, r0
   1e68c:	461a      	mov	r2, r3
   1e68e:	e00c      	b.n	1e6aa <sbc_encoder_process_input_s8_internal+0xcc>
   1e690:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e692:	4613      	mov	r3, r2
   1e694:	00db      	lsls	r3, r3, #3
   1e696:	1a9b      	subs	r3, r3, r2
   1e698:	005b      	lsls	r3, r3, #1
   1e69a:	461a      	mov	r2, r3
   1e69c:	68bb      	ldr	r3, [r7, #8]
   1e69e:	4413      	add	r3, r2
   1e6a0:	4618      	mov	r0, r3
   1e6a2:	f7ff fd67 	bl	1e174 <unaligned16_le>
   1e6a6:	4603      	mov	r3, r0
   1e6a8:	461a      	mov	r2, r3
   1e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6ac:	801a      	strh	r2, [r3, #0]
			x[2]  = PCM(0 + (14-8) * nchannels);
   1e6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6b0:	1d1c      	adds	r4, r3, #4
   1e6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e6b4:	2b00      	cmp	r3, #0
   1e6b6:	d00c      	beq.n	1e6d2 <sbc_encoder_process_input_s8_internal+0xf4>
   1e6b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e6ba:	4613      	mov	r3, r2
   1e6bc:	005b      	lsls	r3, r3, #1
   1e6be:	4413      	add	r3, r2
   1e6c0:	009b      	lsls	r3, r3, #2
   1e6c2:	461a      	mov	r2, r3
   1e6c4:	68bb      	ldr	r3, [r7, #8]
   1e6c6:	4413      	add	r3, r2
   1e6c8:	4618      	mov	r0, r3
   1e6ca:	f7ff fd3f 	bl	1e14c <unaligned16_be>
   1e6ce:	4603      	mov	r3, r0
   1e6d0:	e00b      	b.n	1e6ea <sbc_encoder_process_input_s8_internal+0x10c>
   1e6d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e6d4:	4613      	mov	r3, r2
   1e6d6:	005b      	lsls	r3, r3, #1
   1e6d8:	4413      	add	r3, r2
   1e6da:	009b      	lsls	r3, r3, #2
   1e6dc:	461a      	mov	r2, r3
   1e6de:	68bb      	ldr	r3, [r7, #8]
   1e6e0:	4413      	add	r3, r2
   1e6e2:	4618      	mov	r0, r3
   1e6e4:	f7ff fd46 	bl	1e174 <unaligned16_le>
   1e6e8:	4603      	mov	r3, r0
   1e6ea:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(0 + (8-8) * nchannels);
   1e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6ee:	1d9c      	adds	r4, r3, #6
   1e6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e6f2:	2b00      	cmp	r3, #0
   1e6f4:	d004      	beq.n	1e700 <sbc_encoder_process_input_s8_internal+0x122>
   1e6f6:	68b8      	ldr	r0, [r7, #8]
   1e6f8:	f7ff fd28 	bl	1e14c <unaligned16_be>
   1e6fc:	4603      	mov	r3, r0
   1e6fe:	e003      	b.n	1e708 <sbc_encoder_process_input_s8_internal+0x12a>
   1e700:	68b8      	ldr	r0, [r7, #8]
   1e702:	f7ff fd37 	bl	1e174 <unaligned16_le>
   1e706:	4603      	mov	r3, r0
   1e708:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(0 + (13-8) * nchannels);
   1e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e70c:	f103 0408 	add.w	r4, r3, #8
   1e710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e712:	2b00      	cmp	r3, #0
   1e714:	d00c      	beq.n	1e730 <sbc_encoder_process_input_s8_internal+0x152>
   1e716:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e718:	4613      	mov	r3, r2
   1e71a:	009b      	lsls	r3, r3, #2
   1e71c:	4413      	add	r3, r2
   1e71e:	005b      	lsls	r3, r3, #1
   1e720:	461a      	mov	r2, r3
   1e722:	68bb      	ldr	r3, [r7, #8]
   1e724:	4413      	add	r3, r2
   1e726:	4618      	mov	r0, r3
   1e728:	f7ff fd10 	bl	1e14c <unaligned16_be>
   1e72c:	4603      	mov	r3, r0
   1e72e:	e00b      	b.n	1e748 <sbc_encoder_process_input_s8_internal+0x16a>
   1e730:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e732:	4613      	mov	r3, r2
   1e734:	009b      	lsls	r3, r3, #2
   1e736:	4413      	add	r3, r2
   1e738:	005b      	lsls	r3, r3, #1
   1e73a:	461a      	mov	r2, r3
   1e73c:	68bb      	ldr	r3, [r7, #8]
   1e73e:	4413      	add	r3, r2
   1e740:	4618      	mov	r0, r3
   1e742:	f7ff fd17 	bl	1e174 <unaligned16_le>
   1e746:	4603      	mov	r3, r0
   1e748:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(0 + (9-8) * nchannels);
   1e74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e74c:	f103 040a 	add.w	r4, r3, #10
   1e750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e752:	2b00      	cmp	r3, #0
   1e754:	d009      	beq.n	1e76a <sbc_encoder_process_input_s8_internal+0x18c>
   1e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e758:	005b      	lsls	r3, r3, #1
   1e75a:	461a      	mov	r2, r3
   1e75c:	68bb      	ldr	r3, [r7, #8]
   1e75e:	4413      	add	r3, r2
   1e760:	4618      	mov	r0, r3
   1e762:	f7ff fcf3 	bl	1e14c <unaligned16_be>
   1e766:	4603      	mov	r3, r0
   1e768:	e008      	b.n	1e77c <sbc_encoder_process_input_s8_internal+0x19e>
   1e76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e76c:	005b      	lsls	r3, r3, #1
   1e76e:	461a      	mov	r2, r3
   1e770:	68bb      	ldr	r3, [r7, #8]
   1e772:	4413      	add	r3, r2
   1e774:	4618      	mov	r0, r3
   1e776:	f7ff fcfd 	bl	1e174 <unaligned16_le>
   1e77a:	4603      	mov	r3, r0
   1e77c:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(0 + (12-8) * nchannels);
   1e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e780:	f103 040c 	add.w	r4, r3, #12
   1e784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e786:	2b00      	cmp	r3, #0
   1e788:	d009      	beq.n	1e79e <sbc_encoder_process_input_s8_internal+0x1c0>
   1e78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e78c:	00db      	lsls	r3, r3, #3
   1e78e:	461a      	mov	r2, r3
   1e790:	68bb      	ldr	r3, [r7, #8]
   1e792:	4413      	add	r3, r2
   1e794:	4618      	mov	r0, r3
   1e796:	f7ff fcd9 	bl	1e14c <unaligned16_be>
   1e79a:	4603      	mov	r3, r0
   1e79c:	e008      	b.n	1e7b0 <sbc_encoder_process_input_s8_internal+0x1d2>
   1e79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e7a0:	00db      	lsls	r3, r3, #3
   1e7a2:	461a      	mov	r2, r3
   1e7a4:	68bb      	ldr	r3, [r7, #8]
   1e7a6:	4413      	add	r3, r2
   1e7a8:	4618      	mov	r0, r3
   1e7aa:	f7ff fce3 	bl	1e174 <unaligned16_le>
   1e7ae:	4603      	mov	r3, r0
   1e7b0:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(0 + (10-8) * nchannels);
   1e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7b4:	f103 040e 	add.w	r4, r3, #14
   1e7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e7ba:	2b00      	cmp	r3, #0
   1e7bc:	d009      	beq.n	1e7d2 <sbc_encoder_process_input_s8_internal+0x1f4>
   1e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e7c0:	009b      	lsls	r3, r3, #2
   1e7c2:	461a      	mov	r2, r3
   1e7c4:	68bb      	ldr	r3, [r7, #8]
   1e7c6:	4413      	add	r3, r2
   1e7c8:	4618      	mov	r0, r3
   1e7ca:	f7ff fcbf 	bl	1e14c <unaligned16_be>
   1e7ce:	4603      	mov	r3, r0
   1e7d0:	e008      	b.n	1e7e4 <sbc_encoder_process_input_s8_internal+0x206>
   1e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e7d4:	009b      	lsls	r3, r3, #2
   1e7d6:	461a      	mov	r2, r3
   1e7d8:	68bb      	ldr	r3, [r7, #8]
   1e7da:	4413      	add	r3, r2
   1e7dc:	4618      	mov	r0, r3
   1e7de:	f7ff fcc9 	bl	1e174 <unaligned16_le>
   1e7e2:	4603      	mov	r3, r0
   1e7e4:	8023      	strh	r3, [r4, #0]
			x[8]  = PCM(0 + (11-8) * nchannels);
   1e7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e7e8:	f103 0410 	add.w	r4, r3, #16
   1e7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e7ee:	2b00      	cmp	r3, #0
   1e7f0:	d00c      	beq.n	1e80c <sbc_encoder_process_input_s8_internal+0x22e>
   1e7f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e7f4:	4613      	mov	r3, r2
   1e7f6:	005b      	lsls	r3, r3, #1
   1e7f8:	4413      	add	r3, r2
   1e7fa:	005b      	lsls	r3, r3, #1
   1e7fc:	461a      	mov	r2, r3
   1e7fe:	68bb      	ldr	r3, [r7, #8]
   1e800:	4413      	add	r3, r2
   1e802:	4618      	mov	r0, r3
   1e804:	f7ff fca2 	bl	1e14c <unaligned16_be>
   1e808:	4603      	mov	r3, r0
   1e80a:	e00b      	b.n	1e824 <sbc_encoder_process_input_s8_internal+0x246>
   1e80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e80e:	4613      	mov	r3, r2
   1e810:	005b      	lsls	r3, r3, #1
   1e812:	4413      	add	r3, r2
   1e814:	005b      	lsls	r3, r3, #1
   1e816:	461a      	mov	r2, r3
   1e818:	68bb      	ldr	r3, [r7, #8]
   1e81a:	4413      	add	r3, r2
   1e81c:	4618      	mov	r0, r3
   1e81e:	f7ff fca9 	bl	1e174 <unaligned16_le>
   1e822:	4603      	mov	r3, r0
   1e824:	8023      	strh	r3, [r4, #0]
		}
		if (nchannels > 1) {
   1e826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e828:	2b01      	cmp	r3, #1
   1e82a:	f340 80f5 	ble.w	1ea18 <sbc_encoder_process_input_s8_internal+0x43a>
			int16_t *x = &X[1][position];
   1e82e:	687b      	ldr	r3, [r7, #4]
   1e830:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1e834:	68fb      	ldr	r3, [r7, #12]
   1e836:	005b      	lsls	r3, r3, #1
   1e838:	4413      	add	r3, r2
   1e83a:	623b      	str	r3, [r7, #32]
			x[0]  = PCM(1 + (15-8) * nchannels);
   1e83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e83e:	2b00      	cmp	r3, #0
   1e840:	d00e      	beq.n	1e860 <sbc_encoder_process_input_s8_internal+0x282>
   1e842:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e844:	4613      	mov	r3, r2
   1e846:	00db      	lsls	r3, r3, #3
   1e848:	1a9b      	subs	r3, r3, r2
   1e84a:	005b      	lsls	r3, r3, #1
   1e84c:	3302      	adds	r3, #2
   1e84e:	461a      	mov	r2, r3
   1e850:	68bb      	ldr	r3, [r7, #8]
   1e852:	4413      	add	r3, r2
   1e854:	4618      	mov	r0, r3
   1e856:	f7ff fc79 	bl	1e14c <unaligned16_be>
   1e85a:	4603      	mov	r3, r0
   1e85c:	461a      	mov	r2, r3
   1e85e:	e00d      	b.n	1e87c <sbc_encoder_process_input_s8_internal+0x29e>
   1e860:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e862:	4613      	mov	r3, r2
   1e864:	00db      	lsls	r3, r3, #3
   1e866:	1a9b      	subs	r3, r3, r2
   1e868:	005b      	lsls	r3, r3, #1
   1e86a:	3302      	adds	r3, #2
   1e86c:	461a      	mov	r2, r3
   1e86e:	68bb      	ldr	r3, [r7, #8]
   1e870:	4413      	add	r3, r2
   1e872:	4618      	mov	r0, r3
   1e874:	f7ff fc7e 	bl	1e174 <unaligned16_le>
   1e878:	4603      	mov	r3, r0
   1e87a:	461a      	mov	r2, r3
   1e87c:	6a3b      	ldr	r3, [r7, #32]
   1e87e:	801a      	strh	r2, [r3, #0]
			x[2]  = PCM(1 + (14-8) * nchannels);
   1e880:	6a3b      	ldr	r3, [r7, #32]
   1e882:	1d1c      	adds	r4, r3, #4
   1e884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e886:	2b00      	cmp	r3, #0
   1e888:	d00d      	beq.n	1e8a6 <sbc_encoder_process_input_s8_internal+0x2c8>
   1e88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e88c:	4613      	mov	r3, r2
   1e88e:	005b      	lsls	r3, r3, #1
   1e890:	4413      	add	r3, r2
   1e892:	009b      	lsls	r3, r3, #2
   1e894:	3302      	adds	r3, #2
   1e896:	461a      	mov	r2, r3
   1e898:	68bb      	ldr	r3, [r7, #8]
   1e89a:	4413      	add	r3, r2
   1e89c:	4618      	mov	r0, r3
   1e89e:	f7ff fc55 	bl	1e14c <unaligned16_be>
   1e8a2:	4603      	mov	r3, r0
   1e8a4:	e00c      	b.n	1e8c0 <sbc_encoder_process_input_s8_internal+0x2e2>
   1e8a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e8a8:	4613      	mov	r3, r2
   1e8aa:	005b      	lsls	r3, r3, #1
   1e8ac:	4413      	add	r3, r2
   1e8ae:	009b      	lsls	r3, r3, #2
   1e8b0:	3302      	adds	r3, #2
   1e8b2:	461a      	mov	r2, r3
   1e8b4:	68bb      	ldr	r3, [r7, #8]
   1e8b6:	4413      	add	r3, r2
   1e8b8:	4618      	mov	r0, r3
   1e8ba:	f7ff fc5b 	bl	1e174 <unaligned16_le>
   1e8be:	4603      	mov	r3, r0
   1e8c0:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(1 + (8-8) * nchannels);
   1e8c2:	6a3b      	ldr	r3, [r7, #32]
   1e8c4:	1d9c      	adds	r4, r3, #6
   1e8c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e8c8:	2b00      	cmp	r3, #0
   1e8ca:	d006      	beq.n	1e8da <sbc_encoder_process_input_s8_internal+0x2fc>
   1e8cc:	68bb      	ldr	r3, [r7, #8]
   1e8ce:	3302      	adds	r3, #2
   1e8d0:	4618      	mov	r0, r3
   1e8d2:	f7ff fc3b 	bl	1e14c <unaligned16_be>
   1e8d6:	4603      	mov	r3, r0
   1e8d8:	e005      	b.n	1e8e6 <sbc_encoder_process_input_s8_internal+0x308>
   1e8da:	68bb      	ldr	r3, [r7, #8]
   1e8dc:	3302      	adds	r3, #2
   1e8de:	4618      	mov	r0, r3
   1e8e0:	f7ff fc48 	bl	1e174 <unaligned16_le>
   1e8e4:	4603      	mov	r3, r0
   1e8e6:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(1 + (13-8) * nchannels);
   1e8e8:	6a3b      	ldr	r3, [r7, #32]
   1e8ea:	f103 0408 	add.w	r4, r3, #8
   1e8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e8f0:	2b00      	cmp	r3, #0
   1e8f2:	d00d      	beq.n	1e910 <sbc_encoder_process_input_s8_internal+0x332>
   1e8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e8f6:	4613      	mov	r3, r2
   1e8f8:	009b      	lsls	r3, r3, #2
   1e8fa:	4413      	add	r3, r2
   1e8fc:	005b      	lsls	r3, r3, #1
   1e8fe:	3302      	adds	r3, #2
   1e900:	461a      	mov	r2, r3
   1e902:	68bb      	ldr	r3, [r7, #8]
   1e904:	4413      	add	r3, r2
   1e906:	4618      	mov	r0, r3
   1e908:	f7ff fc20 	bl	1e14c <unaligned16_be>
   1e90c:	4603      	mov	r3, r0
   1e90e:	e00c      	b.n	1e92a <sbc_encoder_process_input_s8_internal+0x34c>
   1e910:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e912:	4613      	mov	r3, r2
   1e914:	009b      	lsls	r3, r3, #2
   1e916:	4413      	add	r3, r2
   1e918:	005b      	lsls	r3, r3, #1
   1e91a:	3302      	adds	r3, #2
   1e91c:	461a      	mov	r2, r3
   1e91e:	68bb      	ldr	r3, [r7, #8]
   1e920:	4413      	add	r3, r2
   1e922:	4618      	mov	r0, r3
   1e924:	f7ff fc26 	bl	1e174 <unaligned16_le>
   1e928:	4603      	mov	r3, r0
   1e92a:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(1 + (9-8) * nchannels);
   1e92c:	6a3b      	ldr	r3, [r7, #32]
   1e92e:	f103 040a 	add.w	r4, r3, #10
   1e932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e934:	2b00      	cmp	r3, #0
   1e936:	d00a      	beq.n	1e94e <sbc_encoder_process_input_s8_internal+0x370>
   1e938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e93a:	3301      	adds	r3, #1
   1e93c:	005b      	lsls	r3, r3, #1
   1e93e:	461a      	mov	r2, r3
   1e940:	68bb      	ldr	r3, [r7, #8]
   1e942:	4413      	add	r3, r2
   1e944:	4618      	mov	r0, r3
   1e946:	f7ff fc01 	bl	1e14c <unaligned16_be>
   1e94a:	4603      	mov	r3, r0
   1e94c:	e009      	b.n	1e962 <sbc_encoder_process_input_s8_internal+0x384>
   1e94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e950:	3301      	adds	r3, #1
   1e952:	005b      	lsls	r3, r3, #1
   1e954:	461a      	mov	r2, r3
   1e956:	68bb      	ldr	r3, [r7, #8]
   1e958:	4413      	add	r3, r2
   1e95a:	4618      	mov	r0, r3
   1e95c:	f7ff fc0a 	bl	1e174 <unaligned16_le>
   1e960:	4603      	mov	r3, r0
   1e962:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(1 + (12-8) * nchannels);
   1e964:	6a3b      	ldr	r3, [r7, #32]
   1e966:	f103 040c 	add.w	r4, r3, #12
   1e96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e96c:	2b00      	cmp	r3, #0
   1e96e:	d00a      	beq.n	1e986 <sbc_encoder_process_input_s8_internal+0x3a8>
   1e970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e972:	00db      	lsls	r3, r3, #3
   1e974:	3302      	adds	r3, #2
   1e976:	461a      	mov	r2, r3
   1e978:	68bb      	ldr	r3, [r7, #8]
   1e97a:	4413      	add	r3, r2
   1e97c:	4618      	mov	r0, r3
   1e97e:	f7ff fbe5 	bl	1e14c <unaligned16_be>
   1e982:	4603      	mov	r3, r0
   1e984:	e009      	b.n	1e99a <sbc_encoder_process_input_s8_internal+0x3bc>
   1e986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e988:	00db      	lsls	r3, r3, #3
   1e98a:	3302      	adds	r3, #2
   1e98c:	461a      	mov	r2, r3
   1e98e:	68bb      	ldr	r3, [r7, #8]
   1e990:	4413      	add	r3, r2
   1e992:	4618      	mov	r0, r3
   1e994:	f7ff fbee 	bl	1e174 <unaligned16_le>
   1e998:	4603      	mov	r3, r0
   1e99a:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(1 + (10-8) * nchannels);
   1e99c:	6a3b      	ldr	r3, [r7, #32]
   1e99e:	f103 040e 	add.w	r4, r3, #14
   1e9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e9a4:	2b00      	cmp	r3, #0
   1e9a6:	d00a      	beq.n	1e9be <sbc_encoder_process_input_s8_internal+0x3e0>
   1e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e9aa:	009b      	lsls	r3, r3, #2
   1e9ac:	3302      	adds	r3, #2
   1e9ae:	461a      	mov	r2, r3
   1e9b0:	68bb      	ldr	r3, [r7, #8]
   1e9b2:	4413      	add	r3, r2
   1e9b4:	4618      	mov	r0, r3
   1e9b6:	f7ff fbc9 	bl	1e14c <unaligned16_be>
   1e9ba:	4603      	mov	r3, r0
   1e9bc:	e009      	b.n	1e9d2 <sbc_encoder_process_input_s8_internal+0x3f4>
   1e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1e9c0:	009b      	lsls	r3, r3, #2
   1e9c2:	3302      	adds	r3, #2
   1e9c4:	461a      	mov	r2, r3
   1e9c6:	68bb      	ldr	r3, [r7, #8]
   1e9c8:	4413      	add	r3, r2
   1e9ca:	4618      	mov	r0, r3
   1e9cc:	f7ff fbd2 	bl	1e174 <unaligned16_le>
   1e9d0:	4603      	mov	r3, r0
   1e9d2:	8023      	strh	r3, [r4, #0]
			x[8]  = PCM(1 + (11-8) * nchannels);
   1e9d4:	6a3b      	ldr	r3, [r7, #32]
   1e9d6:	f103 0410 	add.w	r4, r3, #16
   1e9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1e9dc:	2b00      	cmp	r3, #0
   1e9de:	d00d      	beq.n	1e9fc <sbc_encoder_process_input_s8_internal+0x41e>
   1e9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e9e2:	4613      	mov	r3, r2
   1e9e4:	005b      	lsls	r3, r3, #1
   1e9e6:	4413      	add	r3, r2
   1e9e8:	005b      	lsls	r3, r3, #1
   1e9ea:	3302      	adds	r3, #2
   1e9ec:	461a      	mov	r2, r3
   1e9ee:	68bb      	ldr	r3, [r7, #8]
   1e9f0:	4413      	add	r3, r2
   1e9f2:	4618      	mov	r0, r3
   1e9f4:	f7ff fbaa 	bl	1e14c <unaligned16_be>
   1e9f8:	4603      	mov	r3, r0
   1e9fa:	e00c      	b.n	1ea16 <sbc_encoder_process_input_s8_internal+0x438>
   1e9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1e9fe:	4613      	mov	r3, r2
   1ea00:	005b      	lsls	r3, r3, #1
   1ea02:	4413      	add	r3, r2
   1ea04:	005b      	lsls	r3, r3, #1
   1ea06:	3302      	adds	r3, #2
   1ea08:	461a      	mov	r2, r3
   1ea0a:	68bb      	ldr	r3, [r7, #8]
   1ea0c:	4413      	add	r3, r2
   1ea0e:	4618      	mov	r0, r3
   1ea10:	f7ff fbb0 	bl	1e174 <unaligned16_le>
   1ea14:	4603      	mov	r3, r0
   1ea16:	8023      	strh	r3, [r4, #0]
		}

		pcm += 16 * nchannels;
   1ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ea1a:	011b      	lsls	r3, r3, #4
   1ea1c:	461a      	mov	r2, r3
   1ea1e:	68bb      	ldr	r3, [r7, #8]
   1ea20:	4413      	add	r3, r2
   1ea22:	60bb      	str	r3, [r7, #8]
	}

	/* copy/permutate audio samples */
	while (nsamples >= 16) {
   1ea24:	e3e3      	b.n	1f1ee <sbc_encoder_process_input_s8_internal+0xc10>
		position -= 16;
   1ea26:	68fb      	ldr	r3, [r7, #12]
   1ea28:	3b10      	subs	r3, #16
   1ea2a:	60fb      	str	r3, [r7, #12]
		if (nchannels > 0) {
   1ea2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ea2e:	2b00      	cmp	r3, #0
   1ea30:	f340 81d6 	ble.w	1ede0 <sbc_encoder_process_input_s8_internal+0x802>
			int16_t *x = &X[0][position];
   1ea34:	68fb      	ldr	r3, [r7, #12]
   1ea36:	005b      	lsls	r3, r3, #1
   1ea38:	687a      	ldr	r2, [r7, #4]
   1ea3a:	4413      	add	r3, r2
   1ea3c:	61fb      	str	r3, [r7, #28]
			x[0]  = PCM(0 + 15 * nchannels);
   1ea3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ea40:	2b00      	cmp	r3, #0
   1ea42:	d00d      	beq.n	1ea60 <sbc_encoder_process_input_s8_internal+0x482>
   1ea44:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ea46:	4613      	mov	r3, r2
   1ea48:	011b      	lsls	r3, r3, #4
   1ea4a:	1a9b      	subs	r3, r3, r2
   1ea4c:	005b      	lsls	r3, r3, #1
   1ea4e:	461a      	mov	r2, r3
   1ea50:	68bb      	ldr	r3, [r7, #8]
   1ea52:	4413      	add	r3, r2
   1ea54:	4618      	mov	r0, r3
   1ea56:	f7ff fb79 	bl	1e14c <unaligned16_be>
   1ea5a:	4603      	mov	r3, r0
   1ea5c:	461a      	mov	r2, r3
   1ea5e:	e00c      	b.n	1ea7a <sbc_encoder_process_input_s8_internal+0x49c>
   1ea60:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ea62:	4613      	mov	r3, r2
   1ea64:	011b      	lsls	r3, r3, #4
   1ea66:	1a9b      	subs	r3, r3, r2
   1ea68:	005b      	lsls	r3, r3, #1
   1ea6a:	461a      	mov	r2, r3
   1ea6c:	68bb      	ldr	r3, [r7, #8]
   1ea6e:	4413      	add	r3, r2
   1ea70:	4618      	mov	r0, r3
   1ea72:	f7ff fb7f 	bl	1e174 <unaligned16_le>
   1ea76:	4603      	mov	r3, r0
   1ea78:	461a      	mov	r2, r3
   1ea7a:	69fb      	ldr	r3, [r7, #28]
   1ea7c:	801a      	strh	r2, [r3, #0]
			x[1]  = PCM(0 + 7 * nchannels);
   1ea7e:	69fb      	ldr	r3, [r7, #28]
   1ea80:	1c9c      	adds	r4, r3, #2
   1ea82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ea84:	2b00      	cmp	r3, #0
   1ea86:	d00c      	beq.n	1eaa2 <sbc_encoder_process_input_s8_internal+0x4c4>
   1ea88:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ea8a:	4613      	mov	r3, r2
   1ea8c:	00db      	lsls	r3, r3, #3
   1ea8e:	1a9b      	subs	r3, r3, r2
   1ea90:	005b      	lsls	r3, r3, #1
   1ea92:	461a      	mov	r2, r3
   1ea94:	68bb      	ldr	r3, [r7, #8]
   1ea96:	4413      	add	r3, r2
   1ea98:	4618      	mov	r0, r3
   1ea9a:	f7ff fb57 	bl	1e14c <unaligned16_be>
   1ea9e:	4603      	mov	r3, r0
   1eaa0:	e00b      	b.n	1eaba <sbc_encoder_process_input_s8_internal+0x4dc>
   1eaa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eaa4:	4613      	mov	r3, r2
   1eaa6:	00db      	lsls	r3, r3, #3
   1eaa8:	1a9b      	subs	r3, r3, r2
   1eaaa:	005b      	lsls	r3, r3, #1
   1eaac:	461a      	mov	r2, r3
   1eaae:	68bb      	ldr	r3, [r7, #8]
   1eab0:	4413      	add	r3, r2
   1eab2:	4618      	mov	r0, r3
   1eab4:	f7ff fb5e 	bl	1e174 <unaligned16_le>
   1eab8:	4603      	mov	r3, r0
   1eaba:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(0 + 14 * nchannels);
   1eabc:	69fb      	ldr	r3, [r7, #28]
   1eabe:	1d1c      	adds	r4, r3, #4
   1eac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eac2:	2b00      	cmp	r3, #0
   1eac4:	d00c      	beq.n	1eae0 <sbc_encoder_process_input_s8_internal+0x502>
   1eac6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eac8:	4613      	mov	r3, r2
   1eaca:	00db      	lsls	r3, r3, #3
   1eacc:	1a9b      	subs	r3, r3, r2
   1eace:	009b      	lsls	r3, r3, #2
   1ead0:	461a      	mov	r2, r3
   1ead2:	68bb      	ldr	r3, [r7, #8]
   1ead4:	4413      	add	r3, r2
   1ead6:	4618      	mov	r0, r3
   1ead8:	f7ff fb38 	bl	1e14c <unaligned16_be>
   1eadc:	4603      	mov	r3, r0
   1eade:	e00b      	b.n	1eaf8 <sbc_encoder_process_input_s8_internal+0x51a>
   1eae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eae2:	4613      	mov	r3, r2
   1eae4:	00db      	lsls	r3, r3, #3
   1eae6:	1a9b      	subs	r3, r3, r2
   1eae8:	009b      	lsls	r3, r3, #2
   1eaea:	461a      	mov	r2, r3
   1eaec:	68bb      	ldr	r3, [r7, #8]
   1eaee:	4413      	add	r3, r2
   1eaf0:	4618      	mov	r0, r3
   1eaf2:	f7ff fb3f 	bl	1e174 <unaligned16_le>
   1eaf6:	4603      	mov	r3, r0
   1eaf8:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(0 + 8 * nchannels);
   1eafa:	69fb      	ldr	r3, [r7, #28]
   1eafc:	1d9c      	adds	r4, r3, #6
   1eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb00:	2b00      	cmp	r3, #0
   1eb02:	d009      	beq.n	1eb18 <sbc_encoder_process_input_s8_internal+0x53a>
   1eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eb06:	011b      	lsls	r3, r3, #4
   1eb08:	461a      	mov	r2, r3
   1eb0a:	68bb      	ldr	r3, [r7, #8]
   1eb0c:	4413      	add	r3, r2
   1eb0e:	4618      	mov	r0, r3
   1eb10:	f7ff fb1c 	bl	1e14c <unaligned16_be>
   1eb14:	4603      	mov	r3, r0
   1eb16:	e008      	b.n	1eb2a <sbc_encoder_process_input_s8_internal+0x54c>
   1eb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eb1a:	011b      	lsls	r3, r3, #4
   1eb1c:	461a      	mov	r2, r3
   1eb1e:	68bb      	ldr	r3, [r7, #8]
   1eb20:	4413      	add	r3, r2
   1eb22:	4618      	mov	r0, r3
   1eb24:	f7ff fb26 	bl	1e174 <unaligned16_le>
   1eb28:	4603      	mov	r3, r0
   1eb2a:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(0 + 13 * nchannels);
   1eb2c:	69fb      	ldr	r3, [r7, #28]
   1eb2e:	f103 0408 	add.w	r4, r3, #8
   1eb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb34:	2b00      	cmp	r3, #0
   1eb36:	d00b      	beq.n	1eb50 <sbc_encoder_process_input_s8_internal+0x572>
   1eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eb3a:	221a      	movs	r2, #26
   1eb3c:	fb02 f303 	mul.w	r3, r2, r3
   1eb40:	461a      	mov	r2, r3
   1eb42:	68bb      	ldr	r3, [r7, #8]
   1eb44:	4413      	add	r3, r2
   1eb46:	4618      	mov	r0, r3
   1eb48:	f7ff fb00 	bl	1e14c <unaligned16_be>
   1eb4c:	4603      	mov	r3, r0
   1eb4e:	e00a      	b.n	1eb66 <sbc_encoder_process_input_s8_internal+0x588>
   1eb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eb52:	221a      	movs	r2, #26
   1eb54:	fb02 f303 	mul.w	r3, r2, r3
   1eb58:	461a      	mov	r2, r3
   1eb5a:	68bb      	ldr	r3, [r7, #8]
   1eb5c:	4413      	add	r3, r2
   1eb5e:	4618      	mov	r0, r3
   1eb60:	f7ff fb08 	bl	1e174 <unaligned16_le>
   1eb64:	4603      	mov	r3, r0
   1eb66:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(0 + 9 * nchannels);
   1eb68:	69fb      	ldr	r3, [r7, #28]
   1eb6a:	f103 040a 	add.w	r4, r3, #10
   1eb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eb70:	2b00      	cmp	r3, #0
   1eb72:	d00c      	beq.n	1eb8e <sbc_encoder_process_input_s8_internal+0x5b0>
   1eb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eb76:	4613      	mov	r3, r2
   1eb78:	00db      	lsls	r3, r3, #3
   1eb7a:	4413      	add	r3, r2
   1eb7c:	005b      	lsls	r3, r3, #1
   1eb7e:	461a      	mov	r2, r3
   1eb80:	68bb      	ldr	r3, [r7, #8]
   1eb82:	4413      	add	r3, r2
   1eb84:	4618      	mov	r0, r3
   1eb86:	f7ff fae1 	bl	1e14c <unaligned16_be>
   1eb8a:	4603      	mov	r3, r0
   1eb8c:	e00b      	b.n	1eba6 <sbc_encoder_process_input_s8_internal+0x5c8>
   1eb8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eb90:	4613      	mov	r3, r2
   1eb92:	00db      	lsls	r3, r3, #3
   1eb94:	4413      	add	r3, r2
   1eb96:	005b      	lsls	r3, r3, #1
   1eb98:	461a      	mov	r2, r3
   1eb9a:	68bb      	ldr	r3, [r7, #8]
   1eb9c:	4413      	add	r3, r2
   1eb9e:	4618      	mov	r0, r3
   1eba0:	f7ff fae8 	bl	1e174 <unaligned16_le>
   1eba4:	4603      	mov	r3, r0
   1eba6:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(0 + 12 * nchannels);
   1eba8:	69fb      	ldr	r3, [r7, #28]
   1ebaa:	f103 040c 	add.w	r4, r3, #12
   1ebae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ebb0:	2b00      	cmp	r3, #0
   1ebb2:	d00c      	beq.n	1ebce <sbc_encoder_process_input_s8_internal+0x5f0>
   1ebb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ebb6:	4613      	mov	r3, r2
   1ebb8:	005b      	lsls	r3, r3, #1
   1ebba:	4413      	add	r3, r2
   1ebbc:	00db      	lsls	r3, r3, #3
   1ebbe:	461a      	mov	r2, r3
   1ebc0:	68bb      	ldr	r3, [r7, #8]
   1ebc2:	4413      	add	r3, r2
   1ebc4:	4618      	mov	r0, r3
   1ebc6:	f7ff fac1 	bl	1e14c <unaligned16_be>
   1ebca:	4603      	mov	r3, r0
   1ebcc:	e00b      	b.n	1ebe6 <sbc_encoder_process_input_s8_internal+0x608>
   1ebce:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ebd0:	4613      	mov	r3, r2
   1ebd2:	005b      	lsls	r3, r3, #1
   1ebd4:	4413      	add	r3, r2
   1ebd6:	00db      	lsls	r3, r3, #3
   1ebd8:	461a      	mov	r2, r3
   1ebda:	68bb      	ldr	r3, [r7, #8]
   1ebdc:	4413      	add	r3, r2
   1ebde:	4618      	mov	r0, r3
   1ebe0:	f7ff fac8 	bl	1e174 <unaligned16_le>
   1ebe4:	4603      	mov	r3, r0
   1ebe6:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(0 + 10 * nchannels);
   1ebe8:	69fb      	ldr	r3, [r7, #28]
   1ebea:	f103 040e 	add.w	r4, r3, #14
   1ebee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ebf0:	2b00      	cmp	r3, #0
   1ebf2:	d00c      	beq.n	1ec0e <sbc_encoder_process_input_s8_internal+0x630>
   1ebf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ebf6:	4613      	mov	r3, r2
   1ebf8:	009b      	lsls	r3, r3, #2
   1ebfa:	4413      	add	r3, r2
   1ebfc:	009b      	lsls	r3, r3, #2
   1ebfe:	461a      	mov	r2, r3
   1ec00:	68bb      	ldr	r3, [r7, #8]
   1ec02:	4413      	add	r3, r2
   1ec04:	4618      	mov	r0, r3
   1ec06:	f7ff faa1 	bl	1e14c <unaligned16_be>
   1ec0a:	4603      	mov	r3, r0
   1ec0c:	e00b      	b.n	1ec26 <sbc_encoder_process_input_s8_internal+0x648>
   1ec0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ec10:	4613      	mov	r3, r2
   1ec12:	009b      	lsls	r3, r3, #2
   1ec14:	4413      	add	r3, r2
   1ec16:	009b      	lsls	r3, r3, #2
   1ec18:	461a      	mov	r2, r3
   1ec1a:	68bb      	ldr	r3, [r7, #8]
   1ec1c:	4413      	add	r3, r2
   1ec1e:	4618      	mov	r0, r3
   1ec20:	f7ff faa8 	bl	1e174 <unaligned16_le>
   1ec24:	4603      	mov	r3, r0
   1ec26:	8023      	strh	r3, [r4, #0]
			x[8]  = PCM(0 + 11 * nchannels);
   1ec28:	69fb      	ldr	r3, [r7, #28]
   1ec2a:	f103 0410 	add.w	r4, r3, #16
   1ec2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ec30:	2b00      	cmp	r3, #0
   1ec32:	d00b      	beq.n	1ec4c <sbc_encoder_process_input_s8_internal+0x66e>
   1ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ec36:	2216      	movs	r2, #22
   1ec38:	fb02 f303 	mul.w	r3, r2, r3
   1ec3c:	461a      	mov	r2, r3
   1ec3e:	68bb      	ldr	r3, [r7, #8]
   1ec40:	4413      	add	r3, r2
   1ec42:	4618      	mov	r0, r3
   1ec44:	f7ff fa82 	bl	1e14c <unaligned16_be>
   1ec48:	4603      	mov	r3, r0
   1ec4a:	e00a      	b.n	1ec62 <sbc_encoder_process_input_s8_internal+0x684>
   1ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ec4e:	2216      	movs	r2, #22
   1ec50:	fb02 f303 	mul.w	r3, r2, r3
   1ec54:	461a      	mov	r2, r3
   1ec56:	68bb      	ldr	r3, [r7, #8]
   1ec58:	4413      	add	r3, r2
   1ec5a:	4618      	mov	r0, r3
   1ec5c:	f7ff fa8a 	bl	1e174 <unaligned16_le>
   1ec60:	4603      	mov	r3, r0
   1ec62:	8023      	strh	r3, [r4, #0]
			x[9]  = PCM(0 + 3 * nchannels);
   1ec64:	69fb      	ldr	r3, [r7, #28]
   1ec66:	f103 0412 	add.w	r4, r3, #18
   1ec6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ec6c:	2b00      	cmp	r3, #0
   1ec6e:	d00c      	beq.n	1ec8a <sbc_encoder_process_input_s8_internal+0x6ac>
   1ec70:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ec72:	4613      	mov	r3, r2
   1ec74:	005b      	lsls	r3, r3, #1
   1ec76:	4413      	add	r3, r2
   1ec78:	005b      	lsls	r3, r3, #1
   1ec7a:	461a      	mov	r2, r3
   1ec7c:	68bb      	ldr	r3, [r7, #8]
   1ec7e:	4413      	add	r3, r2
   1ec80:	4618      	mov	r0, r3
   1ec82:	f7ff fa63 	bl	1e14c <unaligned16_be>
   1ec86:	4603      	mov	r3, r0
   1ec88:	e00b      	b.n	1eca2 <sbc_encoder_process_input_s8_internal+0x6c4>
   1ec8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ec8c:	4613      	mov	r3, r2
   1ec8e:	005b      	lsls	r3, r3, #1
   1ec90:	4413      	add	r3, r2
   1ec92:	005b      	lsls	r3, r3, #1
   1ec94:	461a      	mov	r2, r3
   1ec96:	68bb      	ldr	r3, [r7, #8]
   1ec98:	4413      	add	r3, r2
   1ec9a:	4618      	mov	r0, r3
   1ec9c:	f7ff fa6a 	bl	1e174 <unaligned16_le>
   1eca0:	4603      	mov	r3, r0
   1eca2:	8023      	strh	r3, [r4, #0]
			x[10] = PCM(0 + 6 * nchannels);
   1eca4:	69fb      	ldr	r3, [r7, #28]
   1eca6:	f103 0414 	add.w	r4, r3, #20
   1ecaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ecac:	2b00      	cmp	r3, #0
   1ecae:	d00c      	beq.n	1ecca <sbc_encoder_process_input_s8_internal+0x6ec>
   1ecb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ecb2:	4613      	mov	r3, r2
   1ecb4:	005b      	lsls	r3, r3, #1
   1ecb6:	4413      	add	r3, r2
   1ecb8:	009b      	lsls	r3, r3, #2
   1ecba:	461a      	mov	r2, r3
   1ecbc:	68bb      	ldr	r3, [r7, #8]
   1ecbe:	4413      	add	r3, r2
   1ecc0:	4618      	mov	r0, r3
   1ecc2:	f7ff fa43 	bl	1e14c <unaligned16_be>
   1ecc6:	4603      	mov	r3, r0
   1ecc8:	e00b      	b.n	1ece2 <sbc_encoder_process_input_s8_internal+0x704>
   1ecca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eccc:	4613      	mov	r3, r2
   1ecce:	005b      	lsls	r3, r3, #1
   1ecd0:	4413      	add	r3, r2
   1ecd2:	009b      	lsls	r3, r3, #2
   1ecd4:	461a      	mov	r2, r3
   1ecd6:	68bb      	ldr	r3, [r7, #8]
   1ecd8:	4413      	add	r3, r2
   1ecda:	4618      	mov	r0, r3
   1ecdc:	f7ff fa4a 	bl	1e174 <unaligned16_le>
   1ece0:	4603      	mov	r3, r0
   1ece2:	8023      	strh	r3, [r4, #0]
			x[11] = PCM(0 + 0 * nchannels);
   1ece4:	69fb      	ldr	r3, [r7, #28]
   1ece6:	f103 0416 	add.w	r4, r3, #22
   1ecea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ecec:	2b00      	cmp	r3, #0
   1ecee:	d004      	beq.n	1ecfa <sbc_encoder_process_input_s8_internal+0x71c>
   1ecf0:	68b8      	ldr	r0, [r7, #8]
   1ecf2:	f7ff fa2b 	bl	1e14c <unaligned16_be>
   1ecf6:	4603      	mov	r3, r0
   1ecf8:	e003      	b.n	1ed02 <sbc_encoder_process_input_s8_internal+0x724>
   1ecfa:	68b8      	ldr	r0, [r7, #8]
   1ecfc:	f7ff fa3a 	bl	1e174 <unaligned16_le>
   1ed00:	4603      	mov	r3, r0
   1ed02:	8023      	strh	r3, [r4, #0]
			x[12] = PCM(0 + 5 * nchannels);
   1ed04:	69fb      	ldr	r3, [r7, #28]
   1ed06:	f103 0418 	add.w	r4, r3, #24
   1ed0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed0c:	2b00      	cmp	r3, #0
   1ed0e:	d00c      	beq.n	1ed2a <sbc_encoder_process_input_s8_internal+0x74c>
   1ed10:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ed12:	4613      	mov	r3, r2
   1ed14:	009b      	lsls	r3, r3, #2
   1ed16:	4413      	add	r3, r2
   1ed18:	005b      	lsls	r3, r3, #1
   1ed1a:	461a      	mov	r2, r3
   1ed1c:	68bb      	ldr	r3, [r7, #8]
   1ed1e:	4413      	add	r3, r2
   1ed20:	4618      	mov	r0, r3
   1ed22:	f7ff fa13 	bl	1e14c <unaligned16_be>
   1ed26:	4603      	mov	r3, r0
   1ed28:	e00b      	b.n	1ed42 <sbc_encoder_process_input_s8_internal+0x764>
   1ed2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ed2c:	4613      	mov	r3, r2
   1ed2e:	009b      	lsls	r3, r3, #2
   1ed30:	4413      	add	r3, r2
   1ed32:	005b      	lsls	r3, r3, #1
   1ed34:	461a      	mov	r2, r3
   1ed36:	68bb      	ldr	r3, [r7, #8]
   1ed38:	4413      	add	r3, r2
   1ed3a:	4618      	mov	r0, r3
   1ed3c:	f7ff fa1a 	bl	1e174 <unaligned16_le>
   1ed40:	4603      	mov	r3, r0
   1ed42:	8023      	strh	r3, [r4, #0]
			x[13] = PCM(0 + 1 * nchannels);
   1ed44:	69fb      	ldr	r3, [r7, #28]
   1ed46:	f103 041a 	add.w	r4, r3, #26
   1ed4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed4c:	2b00      	cmp	r3, #0
   1ed4e:	d009      	beq.n	1ed64 <sbc_encoder_process_input_s8_internal+0x786>
   1ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ed52:	005b      	lsls	r3, r3, #1
   1ed54:	461a      	mov	r2, r3
   1ed56:	68bb      	ldr	r3, [r7, #8]
   1ed58:	4413      	add	r3, r2
   1ed5a:	4618      	mov	r0, r3
   1ed5c:	f7ff f9f6 	bl	1e14c <unaligned16_be>
   1ed60:	4603      	mov	r3, r0
   1ed62:	e008      	b.n	1ed76 <sbc_encoder_process_input_s8_internal+0x798>
   1ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ed66:	005b      	lsls	r3, r3, #1
   1ed68:	461a      	mov	r2, r3
   1ed6a:	68bb      	ldr	r3, [r7, #8]
   1ed6c:	4413      	add	r3, r2
   1ed6e:	4618      	mov	r0, r3
   1ed70:	f7ff fa00 	bl	1e174 <unaligned16_le>
   1ed74:	4603      	mov	r3, r0
   1ed76:	8023      	strh	r3, [r4, #0]
			x[14] = PCM(0 + 4 * nchannels);
   1ed78:	69fb      	ldr	r3, [r7, #28]
   1ed7a:	f103 041c 	add.w	r4, r3, #28
   1ed7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ed80:	2b00      	cmp	r3, #0
   1ed82:	d009      	beq.n	1ed98 <sbc_encoder_process_input_s8_internal+0x7ba>
   1ed84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ed86:	00db      	lsls	r3, r3, #3
   1ed88:	461a      	mov	r2, r3
   1ed8a:	68bb      	ldr	r3, [r7, #8]
   1ed8c:	4413      	add	r3, r2
   1ed8e:	4618      	mov	r0, r3
   1ed90:	f7ff f9dc 	bl	1e14c <unaligned16_be>
   1ed94:	4603      	mov	r3, r0
   1ed96:	e008      	b.n	1edaa <sbc_encoder_process_input_s8_internal+0x7cc>
   1ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ed9a:	00db      	lsls	r3, r3, #3
   1ed9c:	461a      	mov	r2, r3
   1ed9e:	68bb      	ldr	r3, [r7, #8]
   1eda0:	4413      	add	r3, r2
   1eda2:	4618      	mov	r0, r3
   1eda4:	f7ff f9e6 	bl	1e174 <unaligned16_le>
   1eda8:	4603      	mov	r3, r0
   1edaa:	8023      	strh	r3, [r4, #0]
			x[15] = PCM(0 + 2 * nchannels);
   1edac:	69fb      	ldr	r3, [r7, #28]
   1edae:	f103 041e 	add.w	r4, r3, #30
   1edb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1edb4:	2b00      	cmp	r3, #0
   1edb6:	d009      	beq.n	1edcc <sbc_encoder_process_input_s8_internal+0x7ee>
   1edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1edba:	009b      	lsls	r3, r3, #2
   1edbc:	461a      	mov	r2, r3
   1edbe:	68bb      	ldr	r3, [r7, #8]
   1edc0:	4413      	add	r3, r2
   1edc2:	4618      	mov	r0, r3
   1edc4:	f7ff f9c2 	bl	1e14c <unaligned16_be>
   1edc8:	4603      	mov	r3, r0
   1edca:	e008      	b.n	1edde <sbc_encoder_process_input_s8_internal+0x800>
   1edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1edce:	009b      	lsls	r3, r3, #2
   1edd0:	461a      	mov	r2, r3
   1edd2:	68bb      	ldr	r3, [r7, #8]
   1edd4:	4413      	add	r3, r2
   1edd6:	4618      	mov	r0, r3
   1edd8:	f7ff f9cc 	bl	1e174 <unaligned16_le>
   1eddc:	4603      	mov	r3, r0
   1edde:	8023      	strh	r3, [r4, #0]
		}
		if (nchannels > 1) {
   1ede0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ede2:	2b01      	cmp	r3, #1
   1ede4:	f340 81fa 	ble.w	1f1dc <sbc_encoder_process_input_s8_internal+0xbfe>
			int16_t *x = &X[1][position];
   1ede8:	687b      	ldr	r3, [r7, #4]
   1edea:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1edee:	68fb      	ldr	r3, [r7, #12]
   1edf0:	005b      	lsls	r3, r3, #1
   1edf2:	4413      	add	r3, r2
   1edf4:	61bb      	str	r3, [r7, #24]
			x[0]  = PCM(1 + 15 * nchannels);
   1edf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1edf8:	2b00      	cmp	r3, #0
   1edfa:	d00e      	beq.n	1ee1a <sbc_encoder_process_input_s8_internal+0x83c>
   1edfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1edfe:	4613      	mov	r3, r2
   1ee00:	011b      	lsls	r3, r3, #4
   1ee02:	1a9b      	subs	r3, r3, r2
   1ee04:	005b      	lsls	r3, r3, #1
   1ee06:	3302      	adds	r3, #2
   1ee08:	461a      	mov	r2, r3
   1ee0a:	68bb      	ldr	r3, [r7, #8]
   1ee0c:	4413      	add	r3, r2
   1ee0e:	4618      	mov	r0, r3
   1ee10:	f7ff f99c 	bl	1e14c <unaligned16_be>
   1ee14:	4603      	mov	r3, r0
   1ee16:	461a      	mov	r2, r3
   1ee18:	e00d      	b.n	1ee36 <sbc_encoder_process_input_s8_internal+0x858>
   1ee1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ee1c:	4613      	mov	r3, r2
   1ee1e:	011b      	lsls	r3, r3, #4
   1ee20:	1a9b      	subs	r3, r3, r2
   1ee22:	005b      	lsls	r3, r3, #1
   1ee24:	3302      	adds	r3, #2
   1ee26:	461a      	mov	r2, r3
   1ee28:	68bb      	ldr	r3, [r7, #8]
   1ee2a:	4413      	add	r3, r2
   1ee2c:	4618      	mov	r0, r3
   1ee2e:	f7ff f9a1 	bl	1e174 <unaligned16_le>
   1ee32:	4603      	mov	r3, r0
   1ee34:	461a      	mov	r2, r3
   1ee36:	69bb      	ldr	r3, [r7, #24]
   1ee38:	801a      	strh	r2, [r3, #0]
			x[1]  = PCM(1 + 7 * nchannels);
   1ee3a:	69bb      	ldr	r3, [r7, #24]
   1ee3c:	1c9c      	adds	r4, r3, #2
   1ee3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee40:	2b00      	cmp	r3, #0
   1ee42:	d00d      	beq.n	1ee60 <sbc_encoder_process_input_s8_internal+0x882>
   1ee44:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ee46:	4613      	mov	r3, r2
   1ee48:	00db      	lsls	r3, r3, #3
   1ee4a:	1a9b      	subs	r3, r3, r2
   1ee4c:	005b      	lsls	r3, r3, #1
   1ee4e:	3302      	adds	r3, #2
   1ee50:	461a      	mov	r2, r3
   1ee52:	68bb      	ldr	r3, [r7, #8]
   1ee54:	4413      	add	r3, r2
   1ee56:	4618      	mov	r0, r3
   1ee58:	f7ff f978 	bl	1e14c <unaligned16_be>
   1ee5c:	4603      	mov	r3, r0
   1ee5e:	e00c      	b.n	1ee7a <sbc_encoder_process_input_s8_internal+0x89c>
   1ee60:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ee62:	4613      	mov	r3, r2
   1ee64:	00db      	lsls	r3, r3, #3
   1ee66:	1a9b      	subs	r3, r3, r2
   1ee68:	005b      	lsls	r3, r3, #1
   1ee6a:	3302      	adds	r3, #2
   1ee6c:	461a      	mov	r2, r3
   1ee6e:	68bb      	ldr	r3, [r7, #8]
   1ee70:	4413      	add	r3, r2
   1ee72:	4618      	mov	r0, r3
   1ee74:	f7ff f97e 	bl	1e174 <unaligned16_le>
   1ee78:	4603      	mov	r3, r0
   1ee7a:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(1 + 14 * nchannels);
   1ee7c:	69bb      	ldr	r3, [r7, #24]
   1ee7e:	1d1c      	adds	r4, r3, #4
   1ee80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ee82:	2b00      	cmp	r3, #0
   1ee84:	d00d      	beq.n	1eea2 <sbc_encoder_process_input_s8_internal+0x8c4>
   1ee86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ee88:	4613      	mov	r3, r2
   1ee8a:	00db      	lsls	r3, r3, #3
   1ee8c:	1a9b      	subs	r3, r3, r2
   1ee8e:	009b      	lsls	r3, r3, #2
   1ee90:	3302      	adds	r3, #2
   1ee92:	461a      	mov	r2, r3
   1ee94:	68bb      	ldr	r3, [r7, #8]
   1ee96:	4413      	add	r3, r2
   1ee98:	4618      	mov	r0, r3
   1ee9a:	f7ff f957 	bl	1e14c <unaligned16_be>
   1ee9e:	4603      	mov	r3, r0
   1eea0:	e00c      	b.n	1eebc <sbc_encoder_process_input_s8_internal+0x8de>
   1eea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1eea4:	4613      	mov	r3, r2
   1eea6:	00db      	lsls	r3, r3, #3
   1eea8:	1a9b      	subs	r3, r3, r2
   1eeaa:	009b      	lsls	r3, r3, #2
   1eeac:	3302      	adds	r3, #2
   1eeae:	461a      	mov	r2, r3
   1eeb0:	68bb      	ldr	r3, [r7, #8]
   1eeb2:	4413      	add	r3, r2
   1eeb4:	4618      	mov	r0, r3
   1eeb6:	f7ff f95d 	bl	1e174 <unaligned16_le>
   1eeba:	4603      	mov	r3, r0
   1eebc:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(1 + 8 * nchannels);
   1eebe:	69bb      	ldr	r3, [r7, #24]
   1eec0:	1d9c      	adds	r4, r3, #6
   1eec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eec4:	2b00      	cmp	r3, #0
   1eec6:	d00a      	beq.n	1eede <sbc_encoder_process_input_s8_internal+0x900>
   1eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eeca:	011b      	lsls	r3, r3, #4
   1eecc:	3302      	adds	r3, #2
   1eece:	461a      	mov	r2, r3
   1eed0:	68bb      	ldr	r3, [r7, #8]
   1eed2:	4413      	add	r3, r2
   1eed4:	4618      	mov	r0, r3
   1eed6:	f7ff f939 	bl	1e14c <unaligned16_be>
   1eeda:	4603      	mov	r3, r0
   1eedc:	e009      	b.n	1eef2 <sbc_encoder_process_input_s8_internal+0x914>
   1eede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eee0:	011b      	lsls	r3, r3, #4
   1eee2:	3302      	adds	r3, #2
   1eee4:	461a      	mov	r2, r3
   1eee6:	68bb      	ldr	r3, [r7, #8]
   1eee8:	4413      	add	r3, r2
   1eeea:	4618      	mov	r0, r3
   1eeec:	f7ff f942 	bl	1e174 <unaligned16_le>
   1eef0:	4603      	mov	r3, r0
   1eef2:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(1 + 13 * nchannels);
   1eef4:	69bb      	ldr	r3, [r7, #24]
   1eef6:	f103 0408 	add.w	r4, r3, #8
   1eefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1eefc:	2b00      	cmp	r3, #0
   1eefe:	d00c      	beq.n	1ef1a <sbc_encoder_process_input_s8_internal+0x93c>
   1ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ef02:	221a      	movs	r2, #26
   1ef04:	fb02 f303 	mul.w	r3, r2, r3
   1ef08:	3302      	adds	r3, #2
   1ef0a:	461a      	mov	r2, r3
   1ef0c:	68bb      	ldr	r3, [r7, #8]
   1ef0e:	4413      	add	r3, r2
   1ef10:	4618      	mov	r0, r3
   1ef12:	f7ff f91b 	bl	1e14c <unaligned16_be>
   1ef16:	4603      	mov	r3, r0
   1ef18:	e00b      	b.n	1ef32 <sbc_encoder_process_input_s8_internal+0x954>
   1ef1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ef1c:	221a      	movs	r2, #26
   1ef1e:	fb02 f303 	mul.w	r3, r2, r3
   1ef22:	3302      	adds	r3, #2
   1ef24:	461a      	mov	r2, r3
   1ef26:	68bb      	ldr	r3, [r7, #8]
   1ef28:	4413      	add	r3, r2
   1ef2a:	4618      	mov	r0, r3
   1ef2c:	f7ff f922 	bl	1e174 <unaligned16_le>
   1ef30:	4603      	mov	r3, r0
   1ef32:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(1 + 9 * nchannels);
   1ef34:	69bb      	ldr	r3, [r7, #24]
   1ef36:	f103 040a 	add.w	r4, r3, #10
   1ef3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ef3c:	2b00      	cmp	r3, #0
   1ef3e:	d00d      	beq.n	1ef5c <sbc_encoder_process_input_s8_internal+0x97e>
   1ef40:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ef42:	4613      	mov	r3, r2
   1ef44:	00db      	lsls	r3, r3, #3
   1ef46:	4413      	add	r3, r2
   1ef48:	005b      	lsls	r3, r3, #1
   1ef4a:	3302      	adds	r3, #2
   1ef4c:	461a      	mov	r2, r3
   1ef4e:	68bb      	ldr	r3, [r7, #8]
   1ef50:	4413      	add	r3, r2
   1ef52:	4618      	mov	r0, r3
   1ef54:	f7ff f8fa 	bl	1e14c <unaligned16_be>
   1ef58:	4603      	mov	r3, r0
   1ef5a:	e00c      	b.n	1ef76 <sbc_encoder_process_input_s8_internal+0x998>
   1ef5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ef5e:	4613      	mov	r3, r2
   1ef60:	00db      	lsls	r3, r3, #3
   1ef62:	4413      	add	r3, r2
   1ef64:	005b      	lsls	r3, r3, #1
   1ef66:	3302      	adds	r3, #2
   1ef68:	461a      	mov	r2, r3
   1ef6a:	68bb      	ldr	r3, [r7, #8]
   1ef6c:	4413      	add	r3, r2
   1ef6e:	4618      	mov	r0, r3
   1ef70:	f7ff f900 	bl	1e174 <unaligned16_le>
   1ef74:	4603      	mov	r3, r0
   1ef76:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(1 + 12 * nchannels);
   1ef78:	69bb      	ldr	r3, [r7, #24]
   1ef7a:	f103 040c 	add.w	r4, r3, #12
   1ef7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1ef80:	2b00      	cmp	r3, #0
   1ef82:	d00d      	beq.n	1efa0 <sbc_encoder_process_input_s8_internal+0x9c2>
   1ef84:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ef86:	4613      	mov	r3, r2
   1ef88:	005b      	lsls	r3, r3, #1
   1ef8a:	4413      	add	r3, r2
   1ef8c:	00db      	lsls	r3, r3, #3
   1ef8e:	3302      	adds	r3, #2
   1ef90:	461a      	mov	r2, r3
   1ef92:	68bb      	ldr	r3, [r7, #8]
   1ef94:	4413      	add	r3, r2
   1ef96:	4618      	mov	r0, r3
   1ef98:	f7ff f8d8 	bl	1e14c <unaligned16_be>
   1ef9c:	4603      	mov	r3, r0
   1ef9e:	e00c      	b.n	1efba <sbc_encoder_process_input_s8_internal+0x9dc>
   1efa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1efa2:	4613      	mov	r3, r2
   1efa4:	005b      	lsls	r3, r3, #1
   1efa6:	4413      	add	r3, r2
   1efa8:	00db      	lsls	r3, r3, #3
   1efaa:	3302      	adds	r3, #2
   1efac:	461a      	mov	r2, r3
   1efae:	68bb      	ldr	r3, [r7, #8]
   1efb0:	4413      	add	r3, r2
   1efb2:	4618      	mov	r0, r3
   1efb4:	f7ff f8de 	bl	1e174 <unaligned16_le>
   1efb8:	4603      	mov	r3, r0
   1efba:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(1 + 10 * nchannels);
   1efbc:	69bb      	ldr	r3, [r7, #24]
   1efbe:	f103 040e 	add.w	r4, r3, #14
   1efc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1efc4:	2b00      	cmp	r3, #0
   1efc6:	d00d      	beq.n	1efe4 <sbc_encoder_process_input_s8_internal+0xa06>
   1efc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1efca:	4613      	mov	r3, r2
   1efcc:	009b      	lsls	r3, r3, #2
   1efce:	4413      	add	r3, r2
   1efd0:	009b      	lsls	r3, r3, #2
   1efd2:	3302      	adds	r3, #2
   1efd4:	461a      	mov	r2, r3
   1efd6:	68bb      	ldr	r3, [r7, #8]
   1efd8:	4413      	add	r3, r2
   1efda:	4618      	mov	r0, r3
   1efdc:	f7ff f8b6 	bl	1e14c <unaligned16_be>
   1efe0:	4603      	mov	r3, r0
   1efe2:	e00c      	b.n	1effe <sbc_encoder_process_input_s8_internal+0xa20>
   1efe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1efe6:	4613      	mov	r3, r2
   1efe8:	009b      	lsls	r3, r3, #2
   1efea:	4413      	add	r3, r2
   1efec:	009b      	lsls	r3, r3, #2
   1efee:	3302      	adds	r3, #2
   1eff0:	461a      	mov	r2, r3
   1eff2:	68bb      	ldr	r3, [r7, #8]
   1eff4:	4413      	add	r3, r2
   1eff6:	4618      	mov	r0, r3
   1eff8:	f7ff f8bc 	bl	1e174 <unaligned16_le>
   1effc:	4603      	mov	r3, r0
   1effe:	8023      	strh	r3, [r4, #0]
			x[8]  = PCM(1 + 11 * nchannels);
   1f000:	69bb      	ldr	r3, [r7, #24]
   1f002:	f103 0410 	add.w	r4, r3, #16
   1f006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f008:	2b00      	cmp	r3, #0
   1f00a:	d00c      	beq.n	1f026 <sbc_encoder_process_input_s8_internal+0xa48>
   1f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f00e:	2216      	movs	r2, #22
   1f010:	fb02 f303 	mul.w	r3, r2, r3
   1f014:	3302      	adds	r3, #2
   1f016:	461a      	mov	r2, r3
   1f018:	68bb      	ldr	r3, [r7, #8]
   1f01a:	4413      	add	r3, r2
   1f01c:	4618      	mov	r0, r3
   1f01e:	f7ff f895 	bl	1e14c <unaligned16_be>
   1f022:	4603      	mov	r3, r0
   1f024:	e00b      	b.n	1f03e <sbc_encoder_process_input_s8_internal+0xa60>
   1f026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f028:	2216      	movs	r2, #22
   1f02a:	fb02 f303 	mul.w	r3, r2, r3
   1f02e:	3302      	adds	r3, #2
   1f030:	461a      	mov	r2, r3
   1f032:	68bb      	ldr	r3, [r7, #8]
   1f034:	4413      	add	r3, r2
   1f036:	4618      	mov	r0, r3
   1f038:	f7ff f89c 	bl	1e174 <unaligned16_le>
   1f03c:	4603      	mov	r3, r0
   1f03e:	8023      	strh	r3, [r4, #0]
			x[9]  = PCM(1 + 3 * nchannels);
   1f040:	69bb      	ldr	r3, [r7, #24]
   1f042:	f103 0412 	add.w	r4, r3, #18
   1f046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f048:	2b00      	cmp	r3, #0
   1f04a:	d00d      	beq.n	1f068 <sbc_encoder_process_input_s8_internal+0xa8a>
   1f04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f04e:	4613      	mov	r3, r2
   1f050:	005b      	lsls	r3, r3, #1
   1f052:	4413      	add	r3, r2
   1f054:	005b      	lsls	r3, r3, #1
   1f056:	3302      	adds	r3, #2
   1f058:	461a      	mov	r2, r3
   1f05a:	68bb      	ldr	r3, [r7, #8]
   1f05c:	4413      	add	r3, r2
   1f05e:	4618      	mov	r0, r3
   1f060:	f7ff f874 	bl	1e14c <unaligned16_be>
   1f064:	4603      	mov	r3, r0
   1f066:	e00c      	b.n	1f082 <sbc_encoder_process_input_s8_internal+0xaa4>
   1f068:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f06a:	4613      	mov	r3, r2
   1f06c:	005b      	lsls	r3, r3, #1
   1f06e:	4413      	add	r3, r2
   1f070:	005b      	lsls	r3, r3, #1
   1f072:	3302      	adds	r3, #2
   1f074:	461a      	mov	r2, r3
   1f076:	68bb      	ldr	r3, [r7, #8]
   1f078:	4413      	add	r3, r2
   1f07a:	4618      	mov	r0, r3
   1f07c:	f7ff f87a 	bl	1e174 <unaligned16_le>
   1f080:	4603      	mov	r3, r0
   1f082:	8023      	strh	r3, [r4, #0]
			x[10] = PCM(1 + 6 * nchannels);
   1f084:	69bb      	ldr	r3, [r7, #24]
   1f086:	f103 0414 	add.w	r4, r3, #20
   1f08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f08c:	2b00      	cmp	r3, #0
   1f08e:	d00d      	beq.n	1f0ac <sbc_encoder_process_input_s8_internal+0xace>
   1f090:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f092:	4613      	mov	r3, r2
   1f094:	005b      	lsls	r3, r3, #1
   1f096:	4413      	add	r3, r2
   1f098:	009b      	lsls	r3, r3, #2
   1f09a:	3302      	adds	r3, #2
   1f09c:	461a      	mov	r2, r3
   1f09e:	68bb      	ldr	r3, [r7, #8]
   1f0a0:	4413      	add	r3, r2
   1f0a2:	4618      	mov	r0, r3
   1f0a4:	f7ff f852 	bl	1e14c <unaligned16_be>
   1f0a8:	4603      	mov	r3, r0
   1f0aa:	e00c      	b.n	1f0c6 <sbc_encoder_process_input_s8_internal+0xae8>
   1f0ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f0ae:	4613      	mov	r3, r2
   1f0b0:	005b      	lsls	r3, r3, #1
   1f0b2:	4413      	add	r3, r2
   1f0b4:	009b      	lsls	r3, r3, #2
   1f0b6:	3302      	adds	r3, #2
   1f0b8:	461a      	mov	r2, r3
   1f0ba:	68bb      	ldr	r3, [r7, #8]
   1f0bc:	4413      	add	r3, r2
   1f0be:	4618      	mov	r0, r3
   1f0c0:	f7ff f858 	bl	1e174 <unaligned16_le>
   1f0c4:	4603      	mov	r3, r0
   1f0c6:	8023      	strh	r3, [r4, #0]
			x[11] = PCM(1 + 0 * nchannels);
   1f0c8:	69bb      	ldr	r3, [r7, #24]
   1f0ca:	f103 0416 	add.w	r4, r3, #22
   1f0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f0d0:	2b00      	cmp	r3, #0
   1f0d2:	d006      	beq.n	1f0e2 <sbc_encoder_process_input_s8_internal+0xb04>
   1f0d4:	68bb      	ldr	r3, [r7, #8]
   1f0d6:	3302      	adds	r3, #2
   1f0d8:	4618      	mov	r0, r3
   1f0da:	f7ff f837 	bl	1e14c <unaligned16_be>
   1f0de:	4603      	mov	r3, r0
   1f0e0:	e005      	b.n	1f0ee <sbc_encoder_process_input_s8_internal+0xb10>
   1f0e2:	68bb      	ldr	r3, [r7, #8]
   1f0e4:	3302      	adds	r3, #2
   1f0e6:	4618      	mov	r0, r3
   1f0e8:	f7ff f844 	bl	1e174 <unaligned16_le>
   1f0ec:	4603      	mov	r3, r0
   1f0ee:	8023      	strh	r3, [r4, #0]
			x[12] = PCM(1 + 5 * nchannels);
   1f0f0:	69bb      	ldr	r3, [r7, #24]
   1f0f2:	f103 0418 	add.w	r4, r3, #24
   1f0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	d00d      	beq.n	1f118 <sbc_encoder_process_input_s8_internal+0xb3a>
   1f0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f0fe:	4613      	mov	r3, r2
   1f100:	009b      	lsls	r3, r3, #2
   1f102:	4413      	add	r3, r2
   1f104:	005b      	lsls	r3, r3, #1
   1f106:	3302      	adds	r3, #2
   1f108:	461a      	mov	r2, r3
   1f10a:	68bb      	ldr	r3, [r7, #8]
   1f10c:	4413      	add	r3, r2
   1f10e:	4618      	mov	r0, r3
   1f110:	f7ff f81c 	bl	1e14c <unaligned16_be>
   1f114:	4603      	mov	r3, r0
   1f116:	e00c      	b.n	1f132 <sbc_encoder_process_input_s8_internal+0xb54>
   1f118:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f11a:	4613      	mov	r3, r2
   1f11c:	009b      	lsls	r3, r3, #2
   1f11e:	4413      	add	r3, r2
   1f120:	005b      	lsls	r3, r3, #1
   1f122:	3302      	adds	r3, #2
   1f124:	461a      	mov	r2, r3
   1f126:	68bb      	ldr	r3, [r7, #8]
   1f128:	4413      	add	r3, r2
   1f12a:	4618      	mov	r0, r3
   1f12c:	f7ff f822 	bl	1e174 <unaligned16_le>
   1f130:	4603      	mov	r3, r0
   1f132:	8023      	strh	r3, [r4, #0]
			x[13] = PCM(1 + 1 * nchannels);
   1f134:	69bb      	ldr	r3, [r7, #24]
   1f136:	f103 041a 	add.w	r4, r3, #26
   1f13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f13c:	2b00      	cmp	r3, #0
   1f13e:	d00a      	beq.n	1f156 <sbc_encoder_process_input_s8_internal+0xb78>
   1f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f142:	3301      	adds	r3, #1
   1f144:	005b      	lsls	r3, r3, #1
   1f146:	461a      	mov	r2, r3
   1f148:	68bb      	ldr	r3, [r7, #8]
   1f14a:	4413      	add	r3, r2
   1f14c:	4618      	mov	r0, r3
   1f14e:	f7fe fffd 	bl	1e14c <unaligned16_be>
   1f152:	4603      	mov	r3, r0
   1f154:	e009      	b.n	1f16a <sbc_encoder_process_input_s8_internal+0xb8c>
   1f156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f158:	3301      	adds	r3, #1
   1f15a:	005b      	lsls	r3, r3, #1
   1f15c:	461a      	mov	r2, r3
   1f15e:	68bb      	ldr	r3, [r7, #8]
   1f160:	4413      	add	r3, r2
   1f162:	4618      	mov	r0, r3
   1f164:	f7ff f806 	bl	1e174 <unaligned16_le>
   1f168:	4603      	mov	r3, r0
   1f16a:	8023      	strh	r3, [r4, #0]
			x[14] = PCM(1 + 4 * nchannels);
   1f16c:	69bb      	ldr	r3, [r7, #24]
   1f16e:	f103 041c 	add.w	r4, r3, #28
   1f172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f174:	2b00      	cmp	r3, #0
   1f176:	d00a      	beq.n	1f18e <sbc_encoder_process_input_s8_internal+0xbb0>
   1f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f17a:	00db      	lsls	r3, r3, #3
   1f17c:	3302      	adds	r3, #2
   1f17e:	461a      	mov	r2, r3
   1f180:	68bb      	ldr	r3, [r7, #8]
   1f182:	4413      	add	r3, r2
   1f184:	4618      	mov	r0, r3
   1f186:	f7fe ffe1 	bl	1e14c <unaligned16_be>
   1f18a:	4603      	mov	r3, r0
   1f18c:	e009      	b.n	1f1a2 <sbc_encoder_process_input_s8_internal+0xbc4>
   1f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f190:	00db      	lsls	r3, r3, #3
   1f192:	3302      	adds	r3, #2
   1f194:	461a      	mov	r2, r3
   1f196:	68bb      	ldr	r3, [r7, #8]
   1f198:	4413      	add	r3, r2
   1f19a:	4618      	mov	r0, r3
   1f19c:	f7fe ffea 	bl	1e174 <unaligned16_le>
   1f1a0:	4603      	mov	r3, r0
   1f1a2:	8023      	strh	r3, [r4, #0]
			x[15] = PCM(1 + 2 * nchannels);
   1f1a4:	69bb      	ldr	r3, [r7, #24]
   1f1a6:	f103 041e 	add.w	r4, r3, #30
   1f1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f1ac:	2b00      	cmp	r3, #0
   1f1ae:	d00a      	beq.n	1f1c6 <sbc_encoder_process_input_s8_internal+0xbe8>
   1f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f1b2:	009b      	lsls	r3, r3, #2
   1f1b4:	3302      	adds	r3, #2
   1f1b6:	461a      	mov	r2, r3
   1f1b8:	68bb      	ldr	r3, [r7, #8]
   1f1ba:	4413      	add	r3, r2
   1f1bc:	4618      	mov	r0, r3
   1f1be:	f7fe ffc5 	bl	1e14c <unaligned16_be>
   1f1c2:	4603      	mov	r3, r0
   1f1c4:	e009      	b.n	1f1da <sbc_encoder_process_input_s8_internal+0xbfc>
   1f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f1c8:	009b      	lsls	r3, r3, #2
   1f1ca:	3302      	adds	r3, #2
   1f1cc:	461a      	mov	r2, r3
   1f1ce:	68bb      	ldr	r3, [r7, #8]
   1f1d0:	4413      	add	r3, r2
   1f1d2:	4618      	mov	r0, r3
   1f1d4:	f7fe ffce 	bl	1e174 <unaligned16_le>
   1f1d8:	4603      	mov	r3, r0
   1f1da:	8023      	strh	r3, [r4, #0]
		}
		pcm += 32 * nchannels;
   1f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f1de:	015b      	lsls	r3, r3, #5
   1f1e0:	461a      	mov	r2, r3
   1f1e2:	68bb      	ldr	r3, [r7, #8]
   1f1e4:	4413      	add	r3, r2
   1f1e6:	60bb      	str	r3, [r7, #8]
		nsamples -= 16;
   1f1e8:	683b      	ldr	r3, [r7, #0]
   1f1ea:	3b10      	subs	r3, #16
   1f1ec:	603b      	str	r3, [r7, #0]
	while (nsamples >= 16) {
   1f1ee:	683b      	ldr	r3, [r7, #0]
   1f1f0:	2b0f      	cmp	r3, #15
   1f1f2:	f73f ac18 	bgt.w	1ea26 <sbc_encoder_process_input_s8_internal+0x448>
	}

	if (nsamples == 8) {
   1f1f6:	683b      	ldr	r3, [r7, #0]
   1f1f8:	2b08      	cmp	r3, #8
   1f1fa:	f040 81df 	bne.w	1f5bc <sbc_encoder_process_input_s8_internal+0xfde>
		position -= 8;
   1f1fe:	68fb      	ldr	r3, [r7, #12]
   1f200:	3b08      	subs	r3, #8
   1f202:	60fb      	str	r3, [r7, #12]
		if (nchannels > 0) {
   1f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f206:	2b00      	cmp	r3, #0
   1f208:	f340 80e0 	ble.w	1f3cc <sbc_encoder_process_input_s8_internal+0xdee>
			int16_t *x = &X[0][position];
   1f20c:	68fb      	ldr	r3, [r7, #12]
   1f20e:	005b      	lsls	r3, r3, #1
   1f210:	687a      	ldr	r2, [r7, #4]
   1f212:	4413      	add	r3, r2
   1f214:	617b      	str	r3, [r7, #20]
			x[-7] = PCM(0 + 7 * nchannels);
   1f216:	697b      	ldr	r3, [r7, #20]
   1f218:	f1a3 040e 	sub.w	r4, r3, #14
   1f21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f21e:	2b00      	cmp	r3, #0
   1f220:	d00c      	beq.n	1f23c <sbc_encoder_process_input_s8_internal+0xc5e>
   1f222:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f224:	4613      	mov	r3, r2
   1f226:	00db      	lsls	r3, r3, #3
   1f228:	1a9b      	subs	r3, r3, r2
   1f22a:	005b      	lsls	r3, r3, #1
   1f22c:	461a      	mov	r2, r3
   1f22e:	68bb      	ldr	r3, [r7, #8]
   1f230:	4413      	add	r3, r2
   1f232:	4618      	mov	r0, r3
   1f234:	f7fe ff8a 	bl	1e14c <unaligned16_be>
   1f238:	4603      	mov	r3, r0
   1f23a:	e00b      	b.n	1f254 <sbc_encoder_process_input_s8_internal+0xc76>
   1f23c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f23e:	4613      	mov	r3, r2
   1f240:	00db      	lsls	r3, r3, #3
   1f242:	1a9b      	subs	r3, r3, r2
   1f244:	005b      	lsls	r3, r3, #1
   1f246:	461a      	mov	r2, r3
   1f248:	68bb      	ldr	r3, [r7, #8]
   1f24a:	4413      	add	r3, r2
   1f24c:	4618      	mov	r0, r3
   1f24e:	f7fe ff91 	bl	1e174 <unaligned16_le>
   1f252:	4603      	mov	r3, r0
   1f254:	8023      	strh	r3, [r4, #0]
			x[1]  = PCM(0 + 3 * nchannels);
   1f256:	697b      	ldr	r3, [r7, #20]
   1f258:	1c9c      	adds	r4, r3, #2
   1f25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f25c:	2b00      	cmp	r3, #0
   1f25e:	d00c      	beq.n	1f27a <sbc_encoder_process_input_s8_internal+0xc9c>
   1f260:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f262:	4613      	mov	r3, r2
   1f264:	005b      	lsls	r3, r3, #1
   1f266:	4413      	add	r3, r2
   1f268:	005b      	lsls	r3, r3, #1
   1f26a:	461a      	mov	r2, r3
   1f26c:	68bb      	ldr	r3, [r7, #8]
   1f26e:	4413      	add	r3, r2
   1f270:	4618      	mov	r0, r3
   1f272:	f7fe ff6b 	bl	1e14c <unaligned16_be>
   1f276:	4603      	mov	r3, r0
   1f278:	e00b      	b.n	1f292 <sbc_encoder_process_input_s8_internal+0xcb4>
   1f27a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f27c:	4613      	mov	r3, r2
   1f27e:	005b      	lsls	r3, r3, #1
   1f280:	4413      	add	r3, r2
   1f282:	005b      	lsls	r3, r3, #1
   1f284:	461a      	mov	r2, r3
   1f286:	68bb      	ldr	r3, [r7, #8]
   1f288:	4413      	add	r3, r2
   1f28a:	4618      	mov	r0, r3
   1f28c:	f7fe ff72 	bl	1e174 <unaligned16_le>
   1f290:	4603      	mov	r3, r0
   1f292:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(0 + 6 * nchannels);
   1f294:	697b      	ldr	r3, [r7, #20]
   1f296:	1d1c      	adds	r4, r3, #4
   1f298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f29a:	2b00      	cmp	r3, #0
   1f29c:	d00c      	beq.n	1f2b8 <sbc_encoder_process_input_s8_internal+0xcda>
   1f29e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f2a0:	4613      	mov	r3, r2
   1f2a2:	005b      	lsls	r3, r3, #1
   1f2a4:	4413      	add	r3, r2
   1f2a6:	009b      	lsls	r3, r3, #2
   1f2a8:	461a      	mov	r2, r3
   1f2aa:	68bb      	ldr	r3, [r7, #8]
   1f2ac:	4413      	add	r3, r2
   1f2ae:	4618      	mov	r0, r3
   1f2b0:	f7fe ff4c 	bl	1e14c <unaligned16_be>
   1f2b4:	4603      	mov	r3, r0
   1f2b6:	e00b      	b.n	1f2d0 <sbc_encoder_process_input_s8_internal+0xcf2>
   1f2b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f2ba:	4613      	mov	r3, r2
   1f2bc:	005b      	lsls	r3, r3, #1
   1f2be:	4413      	add	r3, r2
   1f2c0:	009b      	lsls	r3, r3, #2
   1f2c2:	461a      	mov	r2, r3
   1f2c4:	68bb      	ldr	r3, [r7, #8]
   1f2c6:	4413      	add	r3, r2
   1f2c8:	4618      	mov	r0, r3
   1f2ca:	f7fe ff53 	bl	1e174 <unaligned16_le>
   1f2ce:	4603      	mov	r3, r0
   1f2d0:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(0 + 0 * nchannels);
   1f2d2:	697b      	ldr	r3, [r7, #20]
   1f2d4:	1d9c      	adds	r4, r3, #6
   1f2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f2d8:	2b00      	cmp	r3, #0
   1f2da:	d004      	beq.n	1f2e6 <sbc_encoder_process_input_s8_internal+0xd08>
   1f2dc:	68b8      	ldr	r0, [r7, #8]
   1f2de:	f7fe ff35 	bl	1e14c <unaligned16_be>
   1f2e2:	4603      	mov	r3, r0
   1f2e4:	e003      	b.n	1f2ee <sbc_encoder_process_input_s8_internal+0xd10>
   1f2e6:	68b8      	ldr	r0, [r7, #8]
   1f2e8:	f7fe ff44 	bl	1e174 <unaligned16_le>
   1f2ec:	4603      	mov	r3, r0
   1f2ee:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(0 + 5 * nchannels);
   1f2f0:	697b      	ldr	r3, [r7, #20]
   1f2f2:	f103 0408 	add.w	r4, r3, #8
   1f2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f2f8:	2b00      	cmp	r3, #0
   1f2fa:	d00c      	beq.n	1f316 <sbc_encoder_process_input_s8_internal+0xd38>
   1f2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f2fe:	4613      	mov	r3, r2
   1f300:	009b      	lsls	r3, r3, #2
   1f302:	4413      	add	r3, r2
   1f304:	005b      	lsls	r3, r3, #1
   1f306:	461a      	mov	r2, r3
   1f308:	68bb      	ldr	r3, [r7, #8]
   1f30a:	4413      	add	r3, r2
   1f30c:	4618      	mov	r0, r3
   1f30e:	f7fe ff1d 	bl	1e14c <unaligned16_be>
   1f312:	4603      	mov	r3, r0
   1f314:	e00b      	b.n	1f32e <sbc_encoder_process_input_s8_internal+0xd50>
   1f316:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f318:	4613      	mov	r3, r2
   1f31a:	009b      	lsls	r3, r3, #2
   1f31c:	4413      	add	r3, r2
   1f31e:	005b      	lsls	r3, r3, #1
   1f320:	461a      	mov	r2, r3
   1f322:	68bb      	ldr	r3, [r7, #8]
   1f324:	4413      	add	r3, r2
   1f326:	4618      	mov	r0, r3
   1f328:	f7fe ff24 	bl	1e174 <unaligned16_le>
   1f32c:	4603      	mov	r3, r0
   1f32e:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(0 + 1 * nchannels);
   1f330:	697b      	ldr	r3, [r7, #20]
   1f332:	f103 040a 	add.w	r4, r3, #10
   1f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f338:	2b00      	cmp	r3, #0
   1f33a:	d009      	beq.n	1f350 <sbc_encoder_process_input_s8_internal+0xd72>
   1f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f33e:	005b      	lsls	r3, r3, #1
   1f340:	461a      	mov	r2, r3
   1f342:	68bb      	ldr	r3, [r7, #8]
   1f344:	4413      	add	r3, r2
   1f346:	4618      	mov	r0, r3
   1f348:	f7fe ff00 	bl	1e14c <unaligned16_be>
   1f34c:	4603      	mov	r3, r0
   1f34e:	e008      	b.n	1f362 <sbc_encoder_process_input_s8_internal+0xd84>
   1f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f352:	005b      	lsls	r3, r3, #1
   1f354:	461a      	mov	r2, r3
   1f356:	68bb      	ldr	r3, [r7, #8]
   1f358:	4413      	add	r3, r2
   1f35a:	4618      	mov	r0, r3
   1f35c:	f7fe ff0a 	bl	1e174 <unaligned16_le>
   1f360:	4603      	mov	r3, r0
   1f362:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(0 + 4 * nchannels);
   1f364:	697b      	ldr	r3, [r7, #20]
   1f366:	f103 040c 	add.w	r4, r3, #12
   1f36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f36c:	2b00      	cmp	r3, #0
   1f36e:	d009      	beq.n	1f384 <sbc_encoder_process_input_s8_internal+0xda6>
   1f370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f372:	00db      	lsls	r3, r3, #3
   1f374:	461a      	mov	r2, r3
   1f376:	68bb      	ldr	r3, [r7, #8]
   1f378:	4413      	add	r3, r2
   1f37a:	4618      	mov	r0, r3
   1f37c:	f7fe fee6 	bl	1e14c <unaligned16_be>
   1f380:	4603      	mov	r3, r0
   1f382:	e008      	b.n	1f396 <sbc_encoder_process_input_s8_internal+0xdb8>
   1f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f386:	00db      	lsls	r3, r3, #3
   1f388:	461a      	mov	r2, r3
   1f38a:	68bb      	ldr	r3, [r7, #8]
   1f38c:	4413      	add	r3, r2
   1f38e:	4618      	mov	r0, r3
   1f390:	f7fe fef0 	bl	1e174 <unaligned16_le>
   1f394:	4603      	mov	r3, r0
   1f396:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(0 + 2 * nchannels);
   1f398:	697b      	ldr	r3, [r7, #20]
   1f39a:	f103 040e 	add.w	r4, r3, #14
   1f39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f3a0:	2b00      	cmp	r3, #0
   1f3a2:	d009      	beq.n	1f3b8 <sbc_encoder_process_input_s8_internal+0xdda>
   1f3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f3a6:	009b      	lsls	r3, r3, #2
   1f3a8:	461a      	mov	r2, r3
   1f3aa:	68bb      	ldr	r3, [r7, #8]
   1f3ac:	4413      	add	r3, r2
   1f3ae:	4618      	mov	r0, r3
   1f3b0:	f7fe fecc 	bl	1e14c <unaligned16_be>
   1f3b4:	4603      	mov	r3, r0
   1f3b6:	e008      	b.n	1f3ca <sbc_encoder_process_input_s8_internal+0xdec>
   1f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f3ba:	009b      	lsls	r3, r3, #2
   1f3bc:	461a      	mov	r2, r3
   1f3be:	68bb      	ldr	r3, [r7, #8]
   1f3c0:	4413      	add	r3, r2
   1f3c2:	4618      	mov	r0, r3
   1f3c4:	f7fe fed6 	bl	1e174 <unaligned16_le>
   1f3c8:	4603      	mov	r3, r0
   1f3ca:	8023      	strh	r3, [r4, #0]
		}
		if (nchannels > 1) {
   1f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f3ce:	2b01      	cmp	r3, #1
   1f3d0:	f340 80f4 	ble.w	1f5bc <sbc_encoder_process_input_s8_internal+0xfde>
			int16_t *x = &X[1][position];
   1f3d4:	687b      	ldr	r3, [r7, #4]
   1f3d6:	f503 7224 	add.w	r2, r3, #656	; 0x290
   1f3da:	68fb      	ldr	r3, [r7, #12]
   1f3dc:	005b      	lsls	r3, r3, #1
   1f3de:	4413      	add	r3, r2
   1f3e0:	613b      	str	r3, [r7, #16]
			x[-7] = PCM(1 + 7 * nchannels);
   1f3e2:	693b      	ldr	r3, [r7, #16]
   1f3e4:	f1a3 040e 	sub.w	r4, r3, #14
   1f3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f3ea:	2b00      	cmp	r3, #0
   1f3ec:	d00d      	beq.n	1f40a <sbc_encoder_process_input_s8_internal+0xe2c>
   1f3ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f3f0:	4613      	mov	r3, r2
   1f3f2:	00db      	lsls	r3, r3, #3
   1f3f4:	1a9b      	subs	r3, r3, r2
   1f3f6:	005b      	lsls	r3, r3, #1
   1f3f8:	3302      	adds	r3, #2
   1f3fa:	461a      	mov	r2, r3
   1f3fc:	68bb      	ldr	r3, [r7, #8]
   1f3fe:	4413      	add	r3, r2
   1f400:	4618      	mov	r0, r3
   1f402:	f7fe fea3 	bl	1e14c <unaligned16_be>
   1f406:	4603      	mov	r3, r0
   1f408:	e00c      	b.n	1f424 <sbc_encoder_process_input_s8_internal+0xe46>
   1f40a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f40c:	4613      	mov	r3, r2
   1f40e:	00db      	lsls	r3, r3, #3
   1f410:	1a9b      	subs	r3, r3, r2
   1f412:	005b      	lsls	r3, r3, #1
   1f414:	3302      	adds	r3, #2
   1f416:	461a      	mov	r2, r3
   1f418:	68bb      	ldr	r3, [r7, #8]
   1f41a:	4413      	add	r3, r2
   1f41c:	4618      	mov	r0, r3
   1f41e:	f7fe fea9 	bl	1e174 <unaligned16_le>
   1f422:	4603      	mov	r3, r0
   1f424:	8023      	strh	r3, [r4, #0]
			x[1]  = PCM(1 + 3 * nchannels);
   1f426:	693b      	ldr	r3, [r7, #16]
   1f428:	1c9c      	adds	r4, r3, #2
   1f42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f42c:	2b00      	cmp	r3, #0
   1f42e:	d00d      	beq.n	1f44c <sbc_encoder_process_input_s8_internal+0xe6e>
   1f430:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f432:	4613      	mov	r3, r2
   1f434:	005b      	lsls	r3, r3, #1
   1f436:	4413      	add	r3, r2
   1f438:	005b      	lsls	r3, r3, #1
   1f43a:	3302      	adds	r3, #2
   1f43c:	461a      	mov	r2, r3
   1f43e:	68bb      	ldr	r3, [r7, #8]
   1f440:	4413      	add	r3, r2
   1f442:	4618      	mov	r0, r3
   1f444:	f7fe fe82 	bl	1e14c <unaligned16_be>
   1f448:	4603      	mov	r3, r0
   1f44a:	e00c      	b.n	1f466 <sbc_encoder_process_input_s8_internal+0xe88>
   1f44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f44e:	4613      	mov	r3, r2
   1f450:	005b      	lsls	r3, r3, #1
   1f452:	4413      	add	r3, r2
   1f454:	005b      	lsls	r3, r3, #1
   1f456:	3302      	adds	r3, #2
   1f458:	461a      	mov	r2, r3
   1f45a:	68bb      	ldr	r3, [r7, #8]
   1f45c:	4413      	add	r3, r2
   1f45e:	4618      	mov	r0, r3
   1f460:	f7fe fe88 	bl	1e174 <unaligned16_le>
   1f464:	4603      	mov	r3, r0
   1f466:	8023      	strh	r3, [r4, #0]
			x[2]  = PCM(1 + 6 * nchannels);
   1f468:	693b      	ldr	r3, [r7, #16]
   1f46a:	1d1c      	adds	r4, r3, #4
   1f46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f46e:	2b00      	cmp	r3, #0
   1f470:	d00d      	beq.n	1f48e <sbc_encoder_process_input_s8_internal+0xeb0>
   1f472:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f474:	4613      	mov	r3, r2
   1f476:	005b      	lsls	r3, r3, #1
   1f478:	4413      	add	r3, r2
   1f47a:	009b      	lsls	r3, r3, #2
   1f47c:	3302      	adds	r3, #2
   1f47e:	461a      	mov	r2, r3
   1f480:	68bb      	ldr	r3, [r7, #8]
   1f482:	4413      	add	r3, r2
   1f484:	4618      	mov	r0, r3
   1f486:	f7fe fe61 	bl	1e14c <unaligned16_be>
   1f48a:	4603      	mov	r3, r0
   1f48c:	e00c      	b.n	1f4a8 <sbc_encoder_process_input_s8_internal+0xeca>
   1f48e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f490:	4613      	mov	r3, r2
   1f492:	005b      	lsls	r3, r3, #1
   1f494:	4413      	add	r3, r2
   1f496:	009b      	lsls	r3, r3, #2
   1f498:	3302      	adds	r3, #2
   1f49a:	461a      	mov	r2, r3
   1f49c:	68bb      	ldr	r3, [r7, #8]
   1f49e:	4413      	add	r3, r2
   1f4a0:	4618      	mov	r0, r3
   1f4a2:	f7fe fe67 	bl	1e174 <unaligned16_le>
   1f4a6:	4603      	mov	r3, r0
   1f4a8:	8023      	strh	r3, [r4, #0]
			x[3]  = PCM(1 + 0 * nchannels);
   1f4aa:	693b      	ldr	r3, [r7, #16]
   1f4ac:	1d9c      	adds	r4, r3, #6
   1f4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f4b0:	2b00      	cmp	r3, #0
   1f4b2:	d006      	beq.n	1f4c2 <sbc_encoder_process_input_s8_internal+0xee4>
   1f4b4:	68bb      	ldr	r3, [r7, #8]
   1f4b6:	3302      	adds	r3, #2
   1f4b8:	4618      	mov	r0, r3
   1f4ba:	f7fe fe47 	bl	1e14c <unaligned16_be>
   1f4be:	4603      	mov	r3, r0
   1f4c0:	e005      	b.n	1f4ce <sbc_encoder_process_input_s8_internal+0xef0>
   1f4c2:	68bb      	ldr	r3, [r7, #8]
   1f4c4:	3302      	adds	r3, #2
   1f4c6:	4618      	mov	r0, r3
   1f4c8:	f7fe fe54 	bl	1e174 <unaligned16_le>
   1f4cc:	4603      	mov	r3, r0
   1f4ce:	8023      	strh	r3, [r4, #0]
			x[4]  = PCM(1 + 5 * nchannels);
   1f4d0:	693b      	ldr	r3, [r7, #16]
   1f4d2:	f103 0408 	add.w	r4, r3, #8
   1f4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f4d8:	2b00      	cmp	r3, #0
   1f4da:	d00d      	beq.n	1f4f8 <sbc_encoder_process_input_s8_internal+0xf1a>
   1f4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f4de:	4613      	mov	r3, r2
   1f4e0:	009b      	lsls	r3, r3, #2
   1f4e2:	4413      	add	r3, r2
   1f4e4:	005b      	lsls	r3, r3, #1
   1f4e6:	3302      	adds	r3, #2
   1f4e8:	461a      	mov	r2, r3
   1f4ea:	68bb      	ldr	r3, [r7, #8]
   1f4ec:	4413      	add	r3, r2
   1f4ee:	4618      	mov	r0, r3
   1f4f0:	f7fe fe2c 	bl	1e14c <unaligned16_be>
   1f4f4:	4603      	mov	r3, r0
   1f4f6:	e00c      	b.n	1f512 <sbc_encoder_process_input_s8_internal+0xf34>
   1f4f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1f4fa:	4613      	mov	r3, r2
   1f4fc:	009b      	lsls	r3, r3, #2
   1f4fe:	4413      	add	r3, r2
   1f500:	005b      	lsls	r3, r3, #1
   1f502:	3302      	adds	r3, #2
   1f504:	461a      	mov	r2, r3
   1f506:	68bb      	ldr	r3, [r7, #8]
   1f508:	4413      	add	r3, r2
   1f50a:	4618      	mov	r0, r3
   1f50c:	f7fe fe32 	bl	1e174 <unaligned16_le>
   1f510:	4603      	mov	r3, r0
   1f512:	8023      	strh	r3, [r4, #0]
			x[5]  = PCM(1 + 1 * nchannels);
   1f514:	693b      	ldr	r3, [r7, #16]
   1f516:	f103 040a 	add.w	r4, r3, #10
   1f51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f51c:	2b00      	cmp	r3, #0
   1f51e:	d00a      	beq.n	1f536 <sbc_encoder_process_input_s8_internal+0xf58>
   1f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f522:	3301      	adds	r3, #1
   1f524:	005b      	lsls	r3, r3, #1
   1f526:	461a      	mov	r2, r3
   1f528:	68bb      	ldr	r3, [r7, #8]
   1f52a:	4413      	add	r3, r2
   1f52c:	4618      	mov	r0, r3
   1f52e:	f7fe fe0d 	bl	1e14c <unaligned16_be>
   1f532:	4603      	mov	r3, r0
   1f534:	e009      	b.n	1f54a <sbc_encoder_process_input_s8_internal+0xf6c>
   1f536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f538:	3301      	adds	r3, #1
   1f53a:	005b      	lsls	r3, r3, #1
   1f53c:	461a      	mov	r2, r3
   1f53e:	68bb      	ldr	r3, [r7, #8]
   1f540:	4413      	add	r3, r2
   1f542:	4618      	mov	r0, r3
   1f544:	f7fe fe16 	bl	1e174 <unaligned16_le>
   1f548:	4603      	mov	r3, r0
   1f54a:	8023      	strh	r3, [r4, #0]
			x[6]  = PCM(1 + 4 * nchannels);
   1f54c:	693b      	ldr	r3, [r7, #16]
   1f54e:	f103 040c 	add.w	r4, r3, #12
   1f552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f554:	2b00      	cmp	r3, #0
   1f556:	d00a      	beq.n	1f56e <sbc_encoder_process_input_s8_internal+0xf90>
   1f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f55a:	00db      	lsls	r3, r3, #3
   1f55c:	3302      	adds	r3, #2
   1f55e:	461a      	mov	r2, r3
   1f560:	68bb      	ldr	r3, [r7, #8]
   1f562:	4413      	add	r3, r2
   1f564:	4618      	mov	r0, r3
   1f566:	f7fe fdf1 	bl	1e14c <unaligned16_be>
   1f56a:	4603      	mov	r3, r0
   1f56c:	e009      	b.n	1f582 <sbc_encoder_process_input_s8_internal+0xfa4>
   1f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f570:	00db      	lsls	r3, r3, #3
   1f572:	3302      	adds	r3, #2
   1f574:	461a      	mov	r2, r3
   1f576:	68bb      	ldr	r3, [r7, #8]
   1f578:	4413      	add	r3, r2
   1f57a:	4618      	mov	r0, r3
   1f57c:	f7fe fdfa 	bl	1e174 <unaligned16_le>
   1f580:	4603      	mov	r3, r0
   1f582:	8023      	strh	r3, [r4, #0]
			x[7]  = PCM(1 + 2 * nchannels);
   1f584:	693b      	ldr	r3, [r7, #16]
   1f586:	f103 040e 	add.w	r4, r3, #14
   1f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f58c:	2b00      	cmp	r3, #0
   1f58e:	d00a      	beq.n	1f5a6 <sbc_encoder_process_input_s8_internal+0xfc8>
   1f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f592:	009b      	lsls	r3, r3, #2
   1f594:	3302      	adds	r3, #2
   1f596:	461a      	mov	r2, r3
   1f598:	68bb      	ldr	r3, [r7, #8]
   1f59a:	4413      	add	r3, r2
   1f59c:	4618      	mov	r0, r3
   1f59e:	f7fe fdd5 	bl	1e14c <unaligned16_be>
   1f5a2:	4603      	mov	r3, r0
   1f5a4:	e009      	b.n	1f5ba <sbc_encoder_process_input_s8_internal+0xfdc>
   1f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f5a8:	009b      	lsls	r3, r3, #2
   1f5aa:	3302      	adds	r3, #2
   1f5ac:	461a      	mov	r2, r3
   1f5ae:	68bb      	ldr	r3, [r7, #8]
   1f5b0:	4413      	add	r3, r2
   1f5b2:	4618      	mov	r0, r3
   1f5b4:	f7fe fdde 	bl	1e174 <unaligned16_le>
   1f5b8:	4603      	mov	r3, r0
   1f5ba:	8023      	strh	r3, [r4, #0]
		}
	}
	#undef PCM

	return position;
   1f5bc:	68fb      	ldr	r3, [r7, #12]
}
   1f5be:	4618      	mov	r0, r3
   1f5c0:	372c      	adds	r7, #44	; 0x2c
   1f5c2:	46bd      	mov	sp, r7
   1f5c4:	bd90      	pop	{r4, r7, pc}

0001f5c6 <sbc_enc_process_input_4s_le>:
 */

static int sbc_enc_process_input_4s_le(int position,
		const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
		int nsamples, int nchannels)
{
   1f5c6:	b580      	push	{r7, lr}
   1f5c8:	b086      	sub	sp, #24
   1f5ca:	af02      	add	r7, sp, #8
   1f5cc:	60f8      	str	r0, [r7, #12]
   1f5ce:	60b9      	str	r1, [r7, #8]
   1f5d0:	607a      	str	r2, [r7, #4]
   1f5d2:	603b      	str	r3, [r7, #0]
	if (nchannels > 1)
   1f5d4:	69bb      	ldr	r3, [r7, #24]
   1f5d6:	2b01      	cmp	r3, #1
   1f5d8:	dd0b      	ble.n	1f5f2 <sbc_enc_process_input_4s_le+0x2c>
		return sbc_encoder_process_input_s4_internal(
   1f5da:	2300      	movs	r3, #0
   1f5dc:	9301      	str	r3, [sp, #4]
   1f5de:	2302      	movs	r3, #2
   1f5e0:	9300      	str	r3, [sp, #0]
   1f5e2:	683b      	ldr	r3, [r7, #0]
   1f5e4:	687a      	ldr	r2, [r7, #4]
   1f5e6:	68b9      	ldr	r1, [r7, #8]
   1f5e8:	68f8      	ldr	r0, [r7, #12]
   1f5ea:	f7fe fdd7 	bl	1e19c <sbc_encoder_process_input_s4_internal>
   1f5ee:	4603      	mov	r3, r0
   1f5f0:	e00a      	b.n	1f608 <sbc_enc_process_input_4s_le+0x42>
			position, pcm, X, nsamples, 2, 0);
	else
		return sbc_encoder_process_input_s4_internal(
   1f5f2:	2300      	movs	r3, #0
   1f5f4:	9301      	str	r3, [sp, #4]
   1f5f6:	2301      	movs	r3, #1
   1f5f8:	9300      	str	r3, [sp, #0]
   1f5fa:	683b      	ldr	r3, [r7, #0]
   1f5fc:	687a      	ldr	r2, [r7, #4]
   1f5fe:	68b9      	ldr	r1, [r7, #8]
   1f600:	68f8      	ldr	r0, [r7, #12]
   1f602:	f7fe fdcb 	bl	1e19c <sbc_encoder_process_input_s4_internal>
   1f606:	4603      	mov	r3, r0
			position, pcm, X, nsamples, 1, 0);
}
   1f608:	4618      	mov	r0, r3
   1f60a:	3710      	adds	r7, #16
   1f60c:	46bd      	mov	sp, r7
   1f60e:	bd80      	pop	{r7, pc}

0001f610 <sbc_enc_process_input_4s_be>:

static int sbc_enc_process_input_4s_be(int position,
		const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
		int nsamples, int nchannels)
{
   1f610:	b580      	push	{r7, lr}
   1f612:	b086      	sub	sp, #24
   1f614:	af02      	add	r7, sp, #8
   1f616:	60f8      	str	r0, [r7, #12]
   1f618:	60b9      	str	r1, [r7, #8]
   1f61a:	607a      	str	r2, [r7, #4]
   1f61c:	603b      	str	r3, [r7, #0]
	if (nchannels > 1)
   1f61e:	69bb      	ldr	r3, [r7, #24]
   1f620:	2b01      	cmp	r3, #1
   1f622:	dd0b      	ble.n	1f63c <sbc_enc_process_input_4s_be+0x2c>
		return sbc_encoder_process_input_s4_internal(
   1f624:	2301      	movs	r3, #1
   1f626:	9301      	str	r3, [sp, #4]
   1f628:	2302      	movs	r3, #2
   1f62a:	9300      	str	r3, [sp, #0]
   1f62c:	683b      	ldr	r3, [r7, #0]
   1f62e:	687a      	ldr	r2, [r7, #4]
   1f630:	68b9      	ldr	r1, [r7, #8]
   1f632:	68f8      	ldr	r0, [r7, #12]
   1f634:	f7fe fdb2 	bl	1e19c <sbc_encoder_process_input_s4_internal>
   1f638:	4603      	mov	r3, r0
   1f63a:	e00a      	b.n	1f652 <sbc_enc_process_input_4s_be+0x42>
			position, pcm, X, nsamples, 2, 1);
	else
		return sbc_encoder_process_input_s4_internal(
   1f63c:	2301      	movs	r3, #1
   1f63e:	9301      	str	r3, [sp, #4]
   1f640:	2301      	movs	r3, #1
   1f642:	9300      	str	r3, [sp, #0]
   1f644:	683b      	ldr	r3, [r7, #0]
   1f646:	687a      	ldr	r2, [r7, #4]
   1f648:	68b9      	ldr	r1, [r7, #8]
   1f64a:	68f8      	ldr	r0, [r7, #12]
   1f64c:	f7fe fda6 	bl	1e19c <sbc_encoder_process_input_s4_internal>
   1f650:	4603      	mov	r3, r0
			position, pcm, X, nsamples, 1, 1);
}
   1f652:	4618      	mov	r0, r3
   1f654:	3710      	adds	r7, #16
   1f656:	46bd      	mov	sp, r7
   1f658:	bd80      	pop	{r7, pc}

0001f65a <sbc_enc_process_input_8s_le>:

static int sbc_enc_process_input_8s_le(int position,
		const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
		int nsamples, int nchannels)
{
   1f65a:	b580      	push	{r7, lr}
   1f65c:	b086      	sub	sp, #24
   1f65e:	af02      	add	r7, sp, #8
   1f660:	60f8      	str	r0, [r7, #12]
   1f662:	60b9      	str	r1, [r7, #8]
   1f664:	607a      	str	r2, [r7, #4]
   1f666:	603b      	str	r3, [r7, #0]
	if (nchannels > 1)
   1f668:	69bb      	ldr	r3, [r7, #24]
   1f66a:	2b01      	cmp	r3, #1
   1f66c:	dd0b      	ble.n	1f686 <sbc_enc_process_input_8s_le+0x2c>
		return sbc_encoder_process_input_s8_internal(
   1f66e:	2300      	movs	r3, #0
   1f670:	9301      	str	r3, [sp, #4]
   1f672:	2302      	movs	r3, #2
   1f674:	9300      	str	r3, [sp, #0]
   1f676:	683b      	ldr	r3, [r7, #0]
   1f678:	687a      	ldr	r2, [r7, #4]
   1f67a:	68b9      	ldr	r1, [r7, #8]
   1f67c:	68f8      	ldr	r0, [r7, #12]
   1f67e:	f7fe ffae 	bl	1e5de <sbc_encoder_process_input_s8_internal>
   1f682:	4603      	mov	r3, r0
   1f684:	e00a      	b.n	1f69c <sbc_enc_process_input_8s_le+0x42>
			position, pcm, X, nsamples, 2, 0);
	else
		return sbc_encoder_process_input_s8_internal(
   1f686:	2300      	movs	r3, #0
   1f688:	9301      	str	r3, [sp, #4]
   1f68a:	2301      	movs	r3, #1
   1f68c:	9300      	str	r3, [sp, #0]
   1f68e:	683b      	ldr	r3, [r7, #0]
   1f690:	687a      	ldr	r2, [r7, #4]
   1f692:	68b9      	ldr	r1, [r7, #8]
   1f694:	68f8      	ldr	r0, [r7, #12]
   1f696:	f7fe ffa2 	bl	1e5de <sbc_encoder_process_input_s8_internal>
   1f69a:	4603      	mov	r3, r0
			position, pcm, X, nsamples, 1, 0);
}
   1f69c:	4618      	mov	r0, r3
   1f69e:	3710      	adds	r7, #16
   1f6a0:	46bd      	mov	sp, r7
   1f6a2:	bd80      	pop	{r7, pc}

0001f6a4 <sbc_enc_process_input_8s_be>:

static int sbc_enc_process_input_8s_be(int position,
		const uint8_t *pcm, int16_t X[2][SBC_X_BUFFER_SIZE],
		int nsamples, int nchannels)
{
   1f6a4:	b580      	push	{r7, lr}
   1f6a6:	b086      	sub	sp, #24
   1f6a8:	af02      	add	r7, sp, #8
   1f6aa:	60f8      	str	r0, [r7, #12]
   1f6ac:	60b9      	str	r1, [r7, #8]
   1f6ae:	607a      	str	r2, [r7, #4]
   1f6b0:	603b      	str	r3, [r7, #0]
	if (nchannels > 1)
   1f6b2:	69bb      	ldr	r3, [r7, #24]
   1f6b4:	2b01      	cmp	r3, #1
   1f6b6:	dd0b      	ble.n	1f6d0 <sbc_enc_process_input_8s_be+0x2c>
		return sbc_encoder_process_input_s8_internal(
   1f6b8:	2301      	movs	r3, #1
   1f6ba:	9301      	str	r3, [sp, #4]
   1f6bc:	2302      	movs	r3, #2
   1f6be:	9300      	str	r3, [sp, #0]
   1f6c0:	683b      	ldr	r3, [r7, #0]
   1f6c2:	687a      	ldr	r2, [r7, #4]
   1f6c4:	68b9      	ldr	r1, [r7, #8]
   1f6c6:	68f8      	ldr	r0, [r7, #12]
   1f6c8:	f7fe ff89 	bl	1e5de <sbc_encoder_process_input_s8_internal>
   1f6cc:	4603      	mov	r3, r0
   1f6ce:	e00a      	b.n	1f6e6 <sbc_enc_process_input_8s_be+0x42>
			position, pcm, X, nsamples, 2, 1);
	else
		return sbc_encoder_process_input_s8_internal(
   1f6d0:	2301      	movs	r3, #1
   1f6d2:	9301      	str	r3, [sp, #4]
   1f6d4:	2301      	movs	r3, #1
   1f6d6:	9300      	str	r3, [sp, #0]
   1f6d8:	683b      	ldr	r3, [r7, #0]
   1f6da:	687a      	ldr	r2, [r7, #4]
   1f6dc:	68b9      	ldr	r1, [r7, #8]
   1f6de:	68f8      	ldr	r0, [r7, #12]
   1f6e0:	f7fe ff7d 	bl	1e5de <sbc_encoder_process_input_s8_internal>
   1f6e4:	4603      	mov	r3, r0
			position, pcm, X, nsamples, 1, 1);
}
   1f6e6:	4618      	mov	r0, r3
   1f6e8:	3710      	adds	r7, #16
   1f6ea:	46bd      	mov	sp, r7
   1f6ec:	bd80      	pop	{r7, pc}

0001f6ee <sbc_clz>:

/* Supplementary function to count the number of leading zeros */

static inline int sbc_clz(uint32_t x)
{
   1f6ee:	b480      	push	{r7}
   1f6f0:	b083      	sub	sp, #12
   1f6f2:	af00      	add	r7, sp, #0
   1f6f4:	6078      	str	r0, [r7, #4]
#ifdef __GNUC__
	return __builtin_clz(x);
   1f6f6:	687b      	ldr	r3, [r7, #4]
   1f6f8:	fab3 f383 	clz	r3, r3
		cnt++;
		x >>= 1;
	}
	return 32 - cnt;
#endif
}
   1f6fc:	4618      	mov	r0, r3
   1f6fe:	370c      	adds	r7, #12
   1f700:	46bd      	mov	sp, r7
   1f702:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f706:	4770      	bx	lr

0001f708 <sbc_calc_scalefactors>:

static void sbc_calc_scalefactors(
	int32_t sb_sample_f[16][2][8],
	uint32_t scale_factor[2][8],
	int blocks, int channels, int subbands)
{
   1f708:	b590      	push	{r4, r7, lr}
   1f70a:	b08b      	sub	sp, #44	; 0x2c
   1f70c:	af00      	add	r7, sp, #0
   1f70e:	60f8      	str	r0, [r7, #12]
   1f710:	60b9      	str	r1, [r7, #8]
   1f712:	607a      	str	r2, [r7, #4]
   1f714:	603b      	str	r3, [r7, #0]
	int ch, sb, blk;
	for (ch = 0; ch < channels; ch++) {
   1f716:	2300      	movs	r3, #0
   1f718:	627b      	str	r3, [r7, #36]	; 0x24
   1f71a:	e03e      	b.n	1f79a <sbc_calc_scalefactors+0x92>
		for (sb = 0; sb < subbands; sb++) {
   1f71c:	2300      	movs	r3, #0
   1f71e:	623b      	str	r3, [r7, #32]
   1f720:	e034      	b.n	1f78c <sbc_calc_scalefactors+0x84>
			uint32_t x = 1 << SCALE_OUT_BITS;
   1f722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f726:	61bb      	str	r3, [r7, #24]
			for (blk = 0; blk < blocks; blk++) {
   1f728:	2300      	movs	r3, #0
   1f72a:	61fb      	str	r3, [r7, #28]
   1f72c:	e019      	b.n	1f762 <sbc_calc_scalefactors+0x5a>
				int32_t tmp = fabs(sb_sample_f[blk][ch][sb]);
   1f72e:	69fb      	ldr	r3, [r7, #28]
   1f730:	019b      	lsls	r3, r3, #6
   1f732:	68fa      	ldr	r2, [r7, #12]
   1f734:	4413      	add	r3, r2
   1f736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f738:	00d1      	lsls	r1, r2, #3
   1f73a:	6a3a      	ldr	r2, [r7, #32]
   1f73c:	440a      	add	r2, r1
   1f73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f742:	2b00      	cmp	r3, #0
   1f744:	bfb8      	it	lt
   1f746:	425b      	neglt	r3, r3
   1f748:	617b      	str	r3, [r7, #20]
				if (tmp != 0)
   1f74a:	697b      	ldr	r3, [r7, #20]
   1f74c:	2b00      	cmp	r3, #0
   1f74e:	d005      	beq.n	1f75c <sbc_calc_scalefactors+0x54>
					x |= tmp - 1;
   1f750:	697b      	ldr	r3, [r7, #20]
   1f752:	3b01      	subs	r3, #1
   1f754:	461a      	mov	r2, r3
   1f756:	69bb      	ldr	r3, [r7, #24]
   1f758:	4313      	orrs	r3, r2
   1f75a:	61bb      	str	r3, [r7, #24]
			for (blk = 0; blk < blocks; blk++) {
   1f75c:	69fb      	ldr	r3, [r7, #28]
   1f75e:	3301      	adds	r3, #1
   1f760:	61fb      	str	r3, [r7, #28]
   1f762:	69fa      	ldr	r2, [r7, #28]
   1f764:	687b      	ldr	r3, [r7, #4]
   1f766:	429a      	cmp	r2, r3
   1f768:	dbe1      	blt.n	1f72e <sbc_calc_scalefactors+0x26>
			}
			scale_factor[ch][sb] = (31 - SCALE_OUT_BITS) -
   1f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f76c:	015b      	lsls	r3, r3, #5
   1f76e:	68ba      	ldr	r2, [r7, #8]
   1f770:	18d4      	adds	r4, r2, r3
				sbc_clz(x);
   1f772:	69b8      	ldr	r0, [r7, #24]
   1f774:	f7ff ffbb 	bl	1f6ee <sbc_clz>
   1f778:	4603      	mov	r3, r0
			scale_factor[ch][sb] = (31 - SCALE_OUT_BITS) -
   1f77a:	f1c3 0310 	rsb	r3, r3, #16
   1f77e:	461a      	mov	r2, r3
   1f780:	6a3b      	ldr	r3, [r7, #32]
   1f782:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		for (sb = 0; sb < subbands; sb++) {
   1f786:	6a3b      	ldr	r3, [r7, #32]
   1f788:	3301      	adds	r3, #1
   1f78a:	623b      	str	r3, [r7, #32]
   1f78c:	6a3a      	ldr	r2, [r7, #32]
   1f78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f790:	429a      	cmp	r2, r3
   1f792:	dbc6      	blt.n	1f722 <sbc_calc_scalefactors+0x1a>
	for (ch = 0; ch < channels; ch++) {
   1f794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f796:	3301      	adds	r3, #1
   1f798:	627b      	str	r3, [r7, #36]	; 0x24
   1f79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1f79c:	683b      	ldr	r3, [r7, #0]
   1f79e:	429a      	cmp	r2, r3
   1f7a0:	dbbc      	blt.n	1f71c <sbc_calc_scalefactors+0x14>
		}
	}
}
   1f7a2:	bf00      	nop
   1f7a4:	372c      	adds	r7, #44	; 0x2c
   1f7a6:	46bd      	mov	sp, r7
   1f7a8:	bd90      	pop	{r4, r7, pc}

0001f7aa <sbc_calc_scalefactors_j>:

static int sbc_calc_scalefactors_j(
	int32_t sb_sample_f[16][2][8],
	uint32_t scale_factor[2][8],
	int blocks, int subbands)
{
   1f7aa:	b590      	push	{r4, r7, lr}
   1f7ac:	b0ad      	sub	sp, #180	; 0xb4
   1f7ae:	af00      	add	r7, sp, #0
   1f7b0:	60f8      	str	r0, [r7, #12]
   1f7b2:	60b9      	str	r1, [r7, #8]
   1f7b4:	607a      	str	r2, [r7, #4]
   1f7b6:	603b      	str	r3, [r7, #0]
	int blk, joint = 0;
   1f7b8:	2300      	movs	r3, #0
   1f7ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int32_t tmp0, tmp1;
	uint32_t x, y;

	/* last subband does not use joint stereo */
	int sb = subbands - 1;
   1f7be:	683b      	ldr	r3, [r7, #0]
   1f7c0:	3b01      	subs	r3, #1
   1f7c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	x = 1 << SCALE_OUT_BITS;
   1f7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f7ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	y = 1 << SCALE_OUT_BITS;
   1f7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f7d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for (blk = 0; blk < blocks; blk++) {
   1f7d6:	2300      	movs	r3, #0
   1f7d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f7dc:	e03b      	b.n	1f856 <sbc_calc_scalefactors_j+0xac>
		tmp0 = fabs(sb_sample_f[blk][0][sb]);
   1f7de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f7e2:	019b      	lsls	r3, r3, #6
   1f7e4:	68fa      	ldr	r2, [r7, #12]
   1f7e6:	4413      	add	r3, r2
   1f7e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f7f0:	2b00      	cmp	r3, #0
   1f7f2:	bfb8      	it	lt
   1f7f4:	425b      	neglt	r3, r3
   1f7f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		tmp1 = fabs(sb_sample_f[blk][1][sb]);
   1f7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f7fe:	019b      	lsls	r3, r3, #6
   1f800:	68fa      	ldr	r2, [r7, #12]
   1f802:	4413      	add	r3, r2
   1f804:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f808:	3208      	adds	r2, #8
   1f80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f80e:	2b00      	cmp	r3, #0
   1f810:	bfb8      	it	lt
   1f812:	425b      	neglt	r3, r3
   1f814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (tmp0 != 0)
   1f818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f81c:	2b00      	cmp	r3, #0
   1f81e:	d008      	beq.n	1f832 <sbc_calc_scalefactors_j+0x88>
			x |= tmp0 - 1;
   1f820:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f824:	3b01      	subs	r3, #1
   1f826:	461a      	mov	r2, r3
   1f828:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1f82c:	4313      	orrs	r3, r2
   1f82e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		if (tmp1 != 0)
   1f832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f836:	2b00      	cmp	r3, #0
   1f838:	d008      	beq.n	1f84c <sbc_calc_scalefactors_j+0xa2>
			y |= tmp1 - 1;
   1f83a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f83e:	3b01      	subs	r3, #1
   1f840:	461a      	mov	r2, r3
   1f842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1f846:	4313      	orrs	r3, r2
   1f848:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	for (blk = 0; blk < blocks; blk++) {
   1f84c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f850:	3301      	adds	r3, #1
   1f852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1f85a:	687b      	ldr	r3, [r7, #4]
   1f85c:	429a      	cmp	r2, r3
   1f85e:	dbbe      	blt.n	1f7de <sbc_calc_scalefactors_j+0x34>
	}
	scale_factor[0][sb] = (31 - SCALE_OUT_BITS) - sbc_clz(x);
   1f860:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1f864:	f7ff ff43 	bl	1f6ee <sbc_clz>
   1f868:	4603      	mov	r3, r0
   1f86a:	f1c3 0310 	rsb	r3, r3, #16
   1f86e:	4619      	mov	r1, r3
   1f870:	68bb      	ldr	r3, [r7, #8]
   1f872:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	scale_factor[1][sb] = (31 - SCALE_OUT_BITS) - sbc_clz(y);
   1f87a:	68bb      	ldr	r3, [r7, #8]
   1f87c:	f103 0420 	add.w	r4, r3, #32
   1f880:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1f884:	f7ff ff33 	bl	1f6ee <sbc_clz>
   1f888:	4603      	mov	r3, r0
   1f88a:	f1c3 0310 	rsb	r3, r3, #16
   1f88e:	461a      	mov	r2, r3
   1f890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1f894:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

	/* the rest of subbands can use joint stereo */
	while (--sb >= 0) {
   1f898:	e14a      	b.n	1fb30 <sbc_calc_scalefactors_j+0x386>
		int32_t sb_sample_j[16][2];
		x = 1 << SCALE_OUT_BITS;
   1f89a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f89e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		y = 1 << SCALE_OUT_BITS;
   1f8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f8a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		for (blk = 0; blk < blocks; blk++) {
   1f8aa:	2300      	movs	r3, #0
   1f8ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f8b0:	e061      	b.n	1f976 <sbc_calc_scalefactors_j+0x1cc>
			tmp0 = sb_sample_f[blk][0][sb];
   1f8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f8b6:	019b      	lsls	r3, r3, #6
   1f8b8:	68fa      	ldr	r2, [r7, #12]
   1f8ba:	4413      	add	r3, r2
   1f8bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f8c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			tmp1 = sb_sample_f[blk][1][sb];
   1f8c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f8cc:	019b      	lsls	r3, r3, #6
   1f8ce:	68fa      	ldr	r2, [r7, #12]
   1f8d0:	4413      	add	r3, r2
   1f8d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f8d6:	3208      	adds	r2, #8
   1f8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f8dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sb_sample_j[blk][0] = ASR(tmp0, 1) + ASR(tmp1, 1);
   1f8e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f8e4:	105a      	asrs	r2, r3, #1
   1f8e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f8ea:	105b      	asrs	r3, r3, #1
   1f8ec:	441a      	add	r2, r3
   1f8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f8f2:	00db      	lsls	r3, r3, #3
   1f8f4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1f8f8:	440b      	add	r3, r1
   1f8fa:	f843 2c9c 	str.w	r2, [r3, #-156]
			sb_sample_j[blk][1] = ASR(tmp0, 1) - ASR(tmp1, 1);
   1f8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f902:	105a      	asrs	r2, r3, #1
   1f904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f908:	105b      	asrs	r3, r3, #1
   1f90a:	1ad2      	subs	r2, r2, r3
   1f90c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f910:	00db      	lsls	r3, r3, #3
   1f912:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1f916:	440b      	add	r3, r1
   1f918:	f843 2c98 	str.w	r2, [r3, #-152]
			tmp0 = fabs(tmp0);
   1f91c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f920:	2b00      	cmp	r3, #0
   1f922:	bfb8      	it	lt
   1f924:	425b      	neglt	r3, r3
   1f926:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			tmp1 = fabs(tmp1);
   1f92a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f92e:	2b00      	cmp	r3, #0
   1f930:	bfb8      	it	lt
   1f932:	425b      	neglt	r3, r3
   1f934:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			if (tmp0 != 0)
   1f938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f93c:	2b00      	cmp	r3, #0
   1f93e:	d008      	beq.n	1f952 <sbc_calc_scalefactors_j+0x1a8>
				x |= tmp0 - 1;
   1f940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1f944:	3b01      	subs	r3, #1
   1f946:	461a      	mov	r2, r3
   1f948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1f94c:	4313      	orrs	r3, r2
   1f94e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			if (tmp1 != 0)
   1f952:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f956:	2b00      	cmp	r3, #0
   1f958:	d008      	beq.n	1f96c <sbc_calc_scalefactors_j+0x1c2>
				y |= tmp1 - 1;
   1f95a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f95e:	3b01      	subs	r3, #1
   1f960:	461a      	mov	r2, r3
   1f962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1f966:	4313      	orrs	r3, r2
   1f968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		for (blk = 0; blk < blocks; blk++) {
   1f96c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f970:	3301      	adds	r3, #1
   1f972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f976:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1f97a:	687b      	ldr	r3, [r7, #4]
   1f97c:	429a      	cmp	r2, r3
   1f97e:	db98      	blt.n	1f8b2 <sbc_calc_scalefactors_j+0x108>
		}
		scale_factor[0][sb] = (31 - SCALE_OUT_BITS) -
			sbc_clz(x);
   1f980:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1f984:	f7ff feb3 	bl	1f6ee <sbc_clz>
   1f988:	4603      	mov	r3, r0
		scale_factor[0][sb] = (31 - SCALE_OUT_BITS) -
   1f98a:	f1c3 0310 	rsb	r3, r3, #16
   1f98e:	4619      	mov	r1, r3
   1f990:	68bb      	ldr	r3, [r7, #8]
   1f992:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1f996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		scale_factor[1][sb] = (31 - SCALE_OUT_BITS) -
   1f99a:	68bb      	ldr	r3, [r7, #8]
   1f99c:	f103 0420 	add.w	r4, r3, #32
			sbc_clz(y);
   1f9a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1f9a4:	f7ff fea3 	bl	1f6ee <sbc_clz>
   1f9a8:	4603      	mov	r3, r0
		scale_factor[1][sb] = (31 - SCALE_OUT_BITS) -
   1f9aa:	f1c3 0310 	rsb	r3, r3, #16
   1f9ae:	461a      	mov	r2, r3
   1f9b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1f9b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		x = 1 << SCALE_OUT_BITS;
   1f9b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f9bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		y = 1 << SCALE_OUT_BITS;
   1f9c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1f9c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		for (blk = 0; blk < blocks; blk++) {
   1f9c8:	2300      	movs	r3, #0
   1f9ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f9ce:	e038      	b.n	1fa42 <sbc_calc_scalefactors_j+0x298>
			tmp0 = fabs(sb_sample_j[blk][0]);
   1f9d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f9d4:	00db      	lsls	r3, r3, #3
   1f9d6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   1f9da:	4413      	add	r3, r2
   1f9dc:	f853 3c9c 	ldr.w	r3, [r3, #-156]
   1f9e0:	2b00      	cmp	r3, #0
   1f9e2:	bfb8      	it	lt
   1f9e4:	425b      	neglt	r3, r3
   1f9e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			tmp1 = fabs(sb_sample_j[blk][1]);
   1f9ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f9ee:	00db      	lsls	r3, r3, #3
   1f9f0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   1f9f4:	4413      	add	r3, r2
   1f9f6:	f853 3c98 	ldr.w	r3, [r3, #-152]
   1f9fa:	2b00      	cmp	r3, #0
   1f9fc:	bfb8      	it	lt
   1f9fe:	425b      	neglt	r3, r3
   1fa00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			if (tmp0 != 0)
   1fa04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1fa08:	2b00      	cmp	r3, #0
   1fa0a:	d008      	beq.n	1fa1e <sbc_calc_scalefactors_j+0x274>
				x |= tmp0 - 1;
   1fa0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1fa10:	3b01      	subs	r3, #1
   1fa12:	461a      	mov	r2, r3
   1fa14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1fa18:	4313      	orrs	r3, r2
   1fa1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			if (tmp1 != 0)
   1fa1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1fa22:	2b00      	cmp	r3, #0
   1fa24:	d008      	beq.n	1fa38 <sbc_calc_scalefactors_j+0x28e>
				y |= tmp1 - 1;
   1fa26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1fa2a:	3b01      	subs	r3, #1
   1fa2c:	461a      	mov	r2, r3
   1fa2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1fa32:	4313      	orrs	r3, r2
   1fa34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		for (blk = 0; blk < blocks; blk++) {
   1fa38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fa3c:	3301      	adds	r3, #1
   1fa3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fa42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1fa46:	687b      	ldr	r3, [r7, #4]
   1fa48:	429a      	cmp	r2, r3
   1fa4a:	dbc1      	blt.n	1f9d0 <sbc_calc_scalefactors_j+0x226>
		}
		x = (31 - SCALE_OUT_BITS) - sbc_clz(x);
   1fa4c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   1fa50:	f7ff fe4d 	bl	1f6ee <sbc_clz>
   1fa54:	4603      	mov	r3, r0
   1fa56:	f1c3 0310 	rsb	r3, r3, #16
   1fa5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		y = (31 - SCALE_OUT_BITS) - sbc_clz(y);
   1fa5e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   1fa62:	f7ff fe44 	bl	1f6ee <sbc_clz>
   1fa66:	4603      	mov	r3, r0
   1fa68:	f1c3 0310 	rsb	r3, r3, #16
   1fa6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		/* decide whether to use joint stereo for this subband */
		if ((scale_factor[0][sb] + scale_factor[1][sb]) > x + y) {
   1fa70:	68bb      	ldr	r3, [r7, #8]
   1fa72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1fa76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1fa7a:	68bb      	ldr	r3, [r7, #8]
   1fa7c:	3320      	adds	r3, #32
   1fa7e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   1fa82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1fa86:	441a      	add	r2, r3
   1fa88:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
   1fa8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1fa90:	440b      	add	r3, r1
   1fa92:	429a      	cmp	r2, r3
   1fa94:	d94c      	bls.n	1fb30 <sbc_calc_scalefactors_j+0x386>
			joint |= 1 << (subbands - 1 - sb);
   1fa96:	683b      	ldr	r3, [r7, #0]
   1fa98:	1e5a      	subs	r2, r3, #1
   1fa9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1fa9e:	1ad3      	subs	r3, r2, r3
   1faa0:	2201      	movs	r2, #1
   1faa2:	fa02 f303 	lsl.w	r3, r2, r3
   1faa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1faaa:	4313      	orrs	r3, r2
   1faac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			scale_factor[0][sb] = x;
   1fab0:	68bb      	ldr	r3, [r7, #8]
   1fab2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1fab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
   1faba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			scale_factor[1][sb] = y;
   1fabe:	68bb      	ldr	r3, [r7, #8]
   1fac0:	3320      	adds	r3, #32
   1fac2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1fac6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   1faca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (blk = 0; blk < blocks; blk++) {
   1face:	2300      	movs	r3, #0
   1fad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fad4:	e027      	b.n	1fb26 <sbc_calc_scalefactors_j+0x37c>
				sb_sample_f[blk][0][sb] = sb_sample_j[blk][0];
   1fad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fada:	019b      	lsls	r3, r3, #6
   1fadc:	68fa      	ldr	r2, [r7, #12]
   1fade:	441a      	add	r2, r3
   1fae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fae4:	00db      	lsls	r3, r3, #3
   1fae6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1faea:	440b      	add	r3, r1
   1faec:	f853 1c9c 	ldr.w	r1, [r3, #-156]
   1faf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1faf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				sb_sample_f[blk][1][sb] = sb_sample_j[blk][1];
   1faf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fafc:	019b      	lsls	r3, r3, #6
   1fafe:	68fa      	ldr	r2, [r7, #12]
   1fb00:	441a      	add	r2, r3
   1fb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fb06:	00db      	lsls	r3, r3, #3
   1fb08:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1fb0c:	440b      	add	r3, r1
   1fb0e:	f853 1c98 	ldr.w	r1, [r3, #-152]
   1fb12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1fb16:	3308      	adds	r3, #8
   1fb18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (blk = 0; blk < blocks; blk++) {
   1fb1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fb20:	3301      	adds	r3, #1
   1fb22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fb26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1fb2a:	687b      	ldr	r3, [r7, #4]
   1fb2c:	429a      	cmp	r2, r3
   1fb2e:	dbd2      	blt.n	1fad6 <sbc_calc_scalefactors_j+0x32c>
	while (--sb >= 0) {
   1fb30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1fb34:	3b01      	subs	r3, #1
   1fb36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1fb3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1fb3e:	2b00      	cmp	r3, #0
   1fb40:	f6bf aeab 	bge.w	1f89a <sbc_calc_scalefactors_j+0xf0>
			}
		}
	}

	/* bitmask with the information about subbands using joint stereo */
	return joint;
   1fb44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
}
   1fb48:	4618      	mov	r0, r3
   1fb4a:	37b4      	adds	r7, #180	; 0xb4
   1fb4c:	46bd      	mov	sp, r7
   1fb4e:	bd90      	pop	{r4, r7, pc}

0001fb50 <sbc_init_primitives>:

/*
 * Detect CPU features and setup function pointers
 */
void sbc_init_primitives(struct sbc_encoder_state *state)
{
   1fb50:	b480      	push	{r7}
   1fb52:	b083      	sub	sp, #12
   1fb54:	af00      	add	r7, sp, #0
   1fb56:	6078      	str	r0, [r7, #4]
	/* Default implementation for analyze functions */
	state->sbc_analyze_4s = sbc_analyze_4b_4s_simd;
   1fb58:	687b      	ldr	r3, [r7, #4]
   1fb5a:	4a19      	ldr	r2, [pc, #100]	; (1fbc0 <sbc_init_primitives+0x70>)
   1fb5c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	if (state->increment == 1)
   1fb60:	687b      	ldr	r3, [r7, #4]
   1fb62:	791b      	ldrb	r3, [r3, #4]
   1fb64:	2b01      	cmp	r3, #1
   1fb66:	d104      	bne.n	1fb72 <sbc_init_primitives+0x22>
		state->sbc_analyze_8s = sbc_analyze_1b_8s_simd_odd;
   1fb68:	687b      	ldr	r3, [r7, #4]
   1fb6a:	4a16      	ldr	r2, [pc, #88]	; (1fbc4 <sbc_init_primitives+0x74>)
   1fb6c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
   1fb70:	e003      	b.n	1fb7a <sbc_init_primitives+0x2a>
	else
		state->sbc_analyze_8s = sbc_analyze_4b_8s_simd;
   1fb72:	687b      	ldr	r3, [r7, #4]
   1fb74:	4a14      	ldr	r2, [pc, #80]	; (1fbc8 <sbc_init_primitives+0x78>)
   1fb76:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534

	/* Default implementation for input reordering / deinterleaving */
	state->sbc_enc_process_input_4s_le = sbc_enc_process_input_4s_le;
   1fb7a:	687b      	ldr	r3, [r7, #4]
   1fb7c:	4a13      	ldr	r2, [pc, #76]	; (1fbcc <sbc_init_primitives+0x7c>)
   1fb7e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	state->sbc_enc_process_input_4s_be = sbc_enc_process_input_4s_be;
   1fb82:	687b      	ldr	r3, [r7, #4]
   1fb84:	4a12      	ldr	r2, [pc, #72]	; (1fbd0 <sbc_init_primitives+0x80>)
   1fb86:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	state->sbc_enc_process_input_8s_le = sbc_enc_process_input_8s_le;
   1fb8a:	687b      	ldr	r3, [r7, #4]
   1fb8c:	4a11      	ldr	r2, [pc, #68]	; (1fbd4 <sbc_init_primitives+0x84>)
   1fb8e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	state->sbc_enc_process_input_8s_be = sbc_enc_process_input_8s_be;
   1fb92:	687b      	ldr	r3, [r7, #4]
   1fb94:	4a10      	ldr	r2, [pc, #64]	; (1fbd8 <sbc_init_primitives+0x88>)
   1fb96:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544

	/* Default implementation for scale factors calculation */
	state->sbc_calc_scalefactors = sbc_calc_scalefactors;
   1fb9a:	687b      	ldr	r3, [r7, #4]
   1fb9c:	4a0f      	ldr	r2, [pc, #60]	; (1fbdc <sbc_init_primitives+0x8c>)
   1fb9e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	state->sbc_calc_scalefactors_j = sbc_calc_scalefactors_j;
   1fba2:	687b      	ldr	r3, [r7, #4]
   1fba4:	4a0e      	ldr	r2, [pc, #56]	; (1fbe0 <sbc_init_primitives+0x90>)
   1fba6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	state->implementation_info = "Generic C";
   1fbaa:	687b      	ldr	r3, [r7, #4]
   1fbac:	4a0d      	ldr	r2, [pc, #52]	; (1fbe4 <sbc_init_primitives+0x94>)
   1fbae:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
		state->sbc_enc_process_input_4s_be = sbc_enc_process_input_4s_be;
		state->sbc_enc_process_input_8s_le = sbc_enc_process_input_8s_le;
		state->sbc_enc_process_input_8s_be = sbc_enc_process_input_8s_be;
	}
#endif
}
   1fbb2:	bf00      	nop
   1fbb4:	370c      	adds	r7, #12
   1fbb6:	46bd      	mov	sp, r7
   1fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fbbc:	4770      	bx	lr
   1fbbe:	bf00      	nop
   1fbc0:	0001e00d 	.word	0x0001e00d
   1fbc4:	0001e0ed 	.word	0x0001e0ed
   1fbc8:	0001e07d 	.word	0x0001e07d
   1fbcc:	0001f5c7 	.word	0x0001f5c7
   1fbd0:	0001f611 	.word	0x0001f611
   1fbd4:	0001f65b 	.word	0x0001f65b
   1fbd8:	0001f6a5 	.word	0x0001f6a5
   1fbdc:	0001f709 	.word	0x0001f709
   1fbe0:	0001f7ab 	.word	0x0001f7ab
   1fbe4:	0003b594 	.word	0x0003b594

0001fbe8 <sbc_encode_init>:

	memset(sbc, 0, sizeof(sbc_t));
}

void sbc_encode_init(sbc_t *sbc, int msbc)
{
   1fbe8:	b580      	push	{r7, lr}
   1fbea:	b082      	sub	sp, #8
   1fbec:	af00      	add	r7, sp, #0
   1fbee:	6078      	str	r0, [r7, #4]
   1fbf0:	6039      	str	r1, [r7, #0]
	if (msbc)
   1fbf2:	683b      	ldr	r3, [r7, #0]
   1fbf4:	2b00      	cmp	r3, #0
   1fbf6:	d004      	beq.n	1fc02 <sbc_encode_init+0x1a>
		sbc_init_msbc(sbc, 0L);
   1fbf8:	2100      	movs	r1, #0
   1fbfa:	6878      	ldr	r0, [r7, #4]
   1fbfc:	f7fd facc 	bl	1d198 <sbc_init_msbc>
	else
		sbc_init(sbc, 0L);
}
   1fc00:	e003      	b.n	1fc0a <sbc_encode_init+0x22>
		sbc_init(sbc, 0L);
   1fc02:	2100      	movs	r1, #0
   1fc04:	6878      	ldr	r0, [r7, #4]
   1fc06:	f7fd fa8b 	bl	1d120 <sbc_init>
}
   1fc0a:	bf00      	nop
   1fc0c:	3708      	adds	r7, #8
   1fc0e:	46bd      	mov	sp, r7
   1fc10:	bd80      	pop	{r7, pc}

0001fc12 <sbc_encoder_encode>:

ssize_t sbc_encoder_encode(sbc_t *sbc, const void *input, size_t input_len,
			void *output, size_t output_len, ssize_t *written)
{
   1fc12:	b580      	push	{r7, lr}
   1fc14:	b086      	sub	sp, #24
   1fc16:	af02      	add	r7, sp, #8
   1fc18:	60f8      	str	r0, [r7, #12]
   1fc1a:	60b9      	str	r1, [r7, #8]
   1fc1c:	607a      	str	r2, [r7, #4]
   1fc1e:	603b      	str	r3, [r7, #0]
	return sbc_encode(sbc, input, input_len, output, output_len, written);
   1fc20:	69fb      	ldr	r3, [r7, #28]
   1fc22:	9301      	str	r3, [sp, #4]
   1fc24:	69bb      	ldr	r3, [r7, #24]
   1fc26:	9300      	str	r3, [sp, #0]
   1fc28:	683b      	ldr	r3, [r7, #0]
   1fc2a:	687a      	ldr	r2, [r7, #4]
   1fc2c:	68b9      	ldr	r1, [r7, #8]
   1fc2e:	68f8      	ldr	r0, [r7, #12]
   1fc30:	f7fd fb34 	bl	1d29c <sbc_encode>
   1fc34:	4603      	mov	r3, r0
}
   1fc36:	4618      	mov	r0, r3
   1fc38:	3710      	adds	r7, #16
   1fc3a:	46bd      	mov	sp, r7
   1fc3c:	bd80      	pop	{r7, pc}

0001fc3e <VoleResetPkt>:
#include "crc32.h"
#include "am_util.h"

void
VoleResetPkt(volePacket_t *pkt)
{
   1fc3e:	b480      	push	{r7}
   1fc40:	b083      	sub	sp, #12
   1fc42:	af00      	add	r7, sp, #0
   1fc44:	6078      	str	r0, [r7, #4]
  //  pkt->offset = 0;
  //  pkt->header.pktType = VOLE_PKT_TYPE_UNKNOWN;
  //  pkt->len = 0;
}
   1fc46:	bf00      	nop
   1fc48:	370c      	adds	r7, #12
   1fc4a:	46bd      	mov	sp, r7
   1fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fc50:	4770      	bx	lr

0001fc52 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   1fc52:	b580      	push	{r7, lr}
   1fc54:	b082      	sub	sp, #8
   1fc56:	af00      	add	r7, sp, #0
   1fc58:	6078      	str	r0, [r7, #4]
   1fc5a:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   1fc5c:	2206      	movs	r2, #6
   1fc5e:	6839      	ldr	r1, [r7, #0]
   1fc60:	6878      	ldr	r0, [r7, #4]
   1fc62:	f7ec fa7d 	bl	c160 <memcpy>
}
   1fc66:	bf00      	nop
   1fc68:	3708      	adds	r7, #8
   1fc6a:	46bd      	mov	sp, r7
   1fc6c:	bd80      	pop	{r7, pc}

0001fc6e <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   1fc6e:	b580      	push	{r7, lr}
   1fc70:	b082      	sub	sp, #8
   1fc72:	af00      	add	r7, sp, #0
   1fc74:	6078      	str	r0, [r7, #4]
   1fc76:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   1fc78:	2206      	movs	r2, #6
   1fc7a:	6839      	ldr	r1, [r7, #0]
   1fc7c:	6878      	ldr	r0, [r7, #4]
   1fc7e:	f7ec fa3f 	bl	c100 <memcmp>
   1fc82:	4603      	mov	r3, r0
   1fc84:	2b00      	cmp	r3, #0
   1fc86:	bf0c      	ite	eq
   1fc88:	2301      	moveq	r3, #1
   1fc8a:	2300      	movne	r3, #0
   1fc8c:	b2db      	uxtb	r3, r3
}
   1fc8e:	4618      	mov	r0, r3
   1fc90:	3708      	adds	r7, #8
   1fc92:	46bd      	mov	sp, r7
   1fc94:	bd80      	pop	{r7, pc}

0001fc96 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   1fc96:	b580      	push	{r7, lr}
   1fc98:	b082      	sub	sp, #8
   1fc9a:	af00      	add	r7, sp, #0
   1fc9c:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   1fc9e:	2206      	movs	r2, #6
   1fca0:	2100      	movs	r1, #0
   1fca2:	6878      	ldr	r0, [r7, #4]
   1fca4:	f7ec fb5a 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   1fca8:	687b      	ldr	r3, [r7, #4]
   1fcaa:	3306      	adds	r3, #6
}
   1fcac:	4618      	mov	r0, r3
   1fcae:	3708      	adds	r7, #8
   1fcb0:	46bd      	mov	sp, r7
   1fcb2:	bd80      	pop	{r7, pc}

0001fcb4 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   1fcb4:	b580      	push	{r7, lr}
   1fcb6:	b084      	sub	sp, #16
   1fcb8:	af00      	add	r7, sp, #0
   1fcba:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   1fcbc:	f107 0308 	add.w	r3, r7, #8
   1fcc0:	2200      	movs	r2, #0
   1fcc2:	601a      	str	r2, [r3, #0]
   1fcc4:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1fcc6:	f107 0308 	add.w	r3, r7, #8
   1fcca:	2206      	movs	r2, #6
   1fccc:	4619      	mov	r1, r3
   1fcce:	6878      	ldr	r0, [r7, #4]
   1fcd0:	f7ec fa16 	bl	c100 <memcmp>
   1fcd4:	4603      	mov	r3, r0
   1fcd6:	2b00      	cmp	r3, #0
   1fcd8:	bf0c      	ite	eq
   1fcda:	2301      	moveq	r3, #1
   1fcdc:	2300      	movne	r3, #0
   1fcde:	b2db      	uxtb	r3, r3
}
   1fce0:	4618      	mov	r0, r3
   1fce2:	3710      	adds	r7, #16
   1fce4:	46bd      	mov	sp, r7
   1fce6:	bd80      	pop	{r7, pc}

0001fce8 <Bda2Str>:
 *
 *  \return Pointer to string.
 */
/*************************************************************************************************/
char *Bda2Str(const uint8_t *pAddr)
{
   1fce8:	b480      	push	{r7}
   1fcea:	b085      	sub	sp, #20
   1fcec:	af00      	add	r7, sp, #0
   1fcee:	6078      	str	r0, [r7, #4]
  static const char hex[] = "0123456789ABCDEF";
  static char       str[BDA_ADDR_STR_LEN + 1];
  char              *pStr = str;
   1fcf0:	4b15      	ldr	r3, [pc, #84]	; (1fd48 <Bda2Str+0x60>)
   1fcf2:	60fb      	str	r3, [r7, #12]

  /* address is little endian so copy in reverse */
  pAddr += BDA_ADDR_LEN;
   1fcf4:	687b      	ldr	r3, [r7, #4]
   1fcf6:	3306      	adds	r3, #6
   1fcf8:	607b      	str	r3, [r7, #4]

  while (pStr < &str[BDA_ADDR_STR_LEN])
   1fcfa:	e017      	b.n	1fd2c <Bda2Str+0x44>
  {
    *pStr++ = hex[*--pAddr >> 4];
   1fcfc:	68fb      	ldr	r3, [r7, #12]
   1fcfe:	1c5a      	adds	r2, r3, #1
   1fd00:	60fa      	str	r2, [r7, #12]
   1fd02:	687a      	ldr	r2, [r7, #4]
   1fd04:	3a01      	subs	r2, #1
   1fd06:	607a      	str	r2, [r7, #4]
   1fd08:	687a      	ldr	r2, [r7, #4]
   1fd0a:	7812      	ldrb	r2, [r2, #0]
   1fd0c:	0912      	lsrs	r2, r2, #4
   1fd0e:	b2d2      	uxtb	r2, r2
   1fd10:	4611      	mov	r1, r2
   1fd12:	4a0e      	ldr	r2, [pc, #56]	; (1fd4c <Bda2Str+0x64>)
   1fd14:	5c52      	ldrb	r2, [r2, r1]
   1fd16:	701a      	strb	r2, [r3, #0]
    *pStr++ = hex[*pAddr & 0x0F];
   1fd18:	68fb      	ldr	r3, [r7, #12]
   1fd1a:	1c5a      	adds	r2, r3, #1
   1fd1c:	60fa      	str	r2, [r7, #12]
   1fd1e:	687a      	ldr	r2, [r7, #4]
   1fd20:	7812      	ldrb	r2, [r2, #0]
   1fd22:	f002 020f 	and.w	r2, r2, #15
   1fd26:	4909      	ldr	r1, [pc, #36]	; (1fd4c <Bda2Str+0x64>)
   1fd28:	5c8a      	ldrb	r2, [r1, r2]
   1fd2a:	701a      	strb	r2, [r3, #0]
  while (pStr < &str[BDA_ADDR_STR_LEN])
   1fd2c:	68fb      	ldr	r3, [r7, #12]
   1fd2e:	4a08      	ldr	r2, [pc, #32]	; (1fd50 <Bda2Str+0x68>)
   1fd30:	4293      	cmp	r3, r2
   1fd32:	d3e3      	bcc.n	1fcfc <Bda2Str+0x14>
  }

  /* null terminate string */
  *pStr = 0;
   1fd34:	68fb      	ldr	r3, [r7, #12]
   1fd36:	2200      	movs	r2, #0
   1fd38:	701a      	strb	r2, [r3, #0]

  return str;
   1fd3a:	4b03      	ldr	r3, [pc, #12]	; (1fd48 <Bda2Str+0x60>)
}
   1fd3c:	4618      	mov	r0, r3
   1fd3e:	3714      	adds	r7, #20
   1fd40:	46bd      	mov	sp, r7
   1fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fd46:	4770      	bx	lr
   1fd48:	1001af1c 	.word	0x1001af1c
   1fd4c:	0003ce60 	.word	0x0003ce60
   1fd50:	1001af28 	.word	0x1001af28

0001fd54 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   1fd54:	b580      	push	{r7, lr}
   1fd56:	b082      	sub	sp, #8
   1fd58:	af00      	add	r7, sp, #0
   1fd5a:	6078      	str	r0, [r7, #4]
   1fd5c:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   1fd5e:	2210      	movs	r2, #16
   1fd60:	6839      	ldr	r1, [r7, #0]
   1fd62:	6878      	ldr	r0, [r7, #4]
   1fd64:	f7ec f9fc 	bl	c160 <memcpy>
}
   1fd68:	bf00      	nop
   1fd6a:	3708      	adds	r7, #8
   1fd6c:	46bd      	mov	sp, r7
   1fd6e:	bd80      	pop	{r7, pc}

0001fd70 <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   1fd70:	b580      	push	{r7, lr}
   1fd72:	b082      	sub	sp, #8
   1fd74:	af00      	add	r7, sp, #0
   1fd76:	6078      	str	r0, [r7, #4]
   1fd78:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   1fd7a:	2208      	movs	r2, #8
   1fd7c:	6839      	ldr	r1, [r7, #0]
   1fd7e:	6878      	ldr	r0, [r7, #4]
   1fd80:	f7ec f9ee 	bl	c160 <memcpy>
}
   1fd84:	bf00      	nop
   1fd86:	3708      	adds	r7, #8
   1fd88:	46bd      	mov	sp, r7
   1fd8a:	bd80      	pop	{r7, pc}

0001fd8c <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   1fd8c:	b480      	push	{r7}
   1fd8e:	b085      	sub	sp, #20
   1fd90:	af00      	add	r7, sp, #0
   1fd92:	6078      	str	r0, [r7, #4]
   1fd94:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   1fd96:	2310      	movs	r3, #16
   1fd98:	73fb      	strb	r3, [r7, #15]
   1fd9a:	e00d      	b.n	1fdb8 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   1fd9c:	683b      	ldr	r3, [r7, #0]
   1fd9e:	1c5a      	adds	r2, r3, #1
   1fda0:	603a      	str	r2, [r7, #0]
   1fda2:	781a      	ldrb	r2, [r3, #0]
   1fda4:	687b      	ldr	r3, [r7, #4]
   1fda6:	1c59      	adds	r1, r3, #1
   1fda8:	6079      	str	r1, [r7, #4]
   1fdaa:	7819      	ldrb	r1, [r3, #0]
   1fdac:	404a      	eors	r2, r1
   1fdae:	b2d2      	uxtb	r2, r2
   1fdb0:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   1fdb2:	7bfb      	ldrb	r3, [r7, #15]
   1fdb4:	3b01      	subs	r3, #1
   1fdb6:	73fb      	strb	r3, [r7, #15]
   1fdb8:	7bfb      	ldrb	r3, [r7, #15]
   1fdba:	2b00      	cmp	r3, #0
   1fdbc:	d1ee      	bne.n	1fd9c <Calc128Xor+0x10>
  }
}
   1fdbe:	bf00      	nop
   1fdc0:	3714      	adds	r7, #20
   1fdc2:	46bd      	mov	sp, r7
   1fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fdc8:	4770      	bx	lr

0001fdca <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   1fdca:	b480      	push	{r7}
   1fdcc:	b087      	sub	sp, #28
   1fdce:	af00      	add	r7, sp, #0
   1fdd0:	60f8      	str	r0, [r7, #12]
   1fdd2:	60b9      	str	r1, [r7, #8]
   1fdd4:	4613      	mov	r3, r2
   1fdd6:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   1fdd8:	2300      	movs	r3, #0
   1fdda:	82fb      	strh	r3, [r7, #22]
   1fddc:	e013      	b.n	1fe06 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   1fdde:	88fb      	ldrh	r3, [r7, #6]
   1fde0:	1e5a      	subs	r2, r3, #1
   1fde2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1fde6:	1ad3      	subs	r3, r2, r3
   1fde8:	461a      	mov	r2, r3
   1fdea:	68fb      	ldr	r3, [r7, #12]
   1fdec:	4413      	add	r3, r2
   1fdee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   1fdf2:	68b9      	ldr	r1, [r7, #8]
   1fdf4:	440a      	add	r2, r1
   1fdf6:	7812      	ldrb	r2, [r2, #0]
   1fdf8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   1fdfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   1fdfe:	b29b      	uxth	r3, r3
   1fe00:	3301      	adds	r3, #1
   1fe02:	b29b      	uxth	r3, r3
   1fe04:	82fb      	strh	r3, [r7, #22]
   1fe06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   1fe0a:	88fb      	ldrh	r3, [r7, #6]
   1fe0c:	429a      	cmp	r2, r3
   1fe0e:	dbe6      	blt.n	1fdde <WStrReverseCpy+0x14>
  }
}
   1fe10:	bf00      	nop
   1fe12:	371c      	adds	r7, #28
   1fe14:	46bd      	mov	sp, r7
   1fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fe1a:	4770      	bx	lr

0001fe1c <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   1fe1c:	b480      	push	{r7}
   1fe1e:	b085      	sub	sp, #20
   1fe20:	af00      	add	r7, sp, #0
   1fe22:	6078      	str	r0, [r7, #4]
   1fe24:	460b      	mov	r3, r1
   1fe26:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   1fe28:	2300      	movs	r3, #0
   1fe2a:	73fb      	strb	r3, [r7, #15]
   1fe2c:	e01a      	b.n	1fe64 <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   1fe2e:	78fa      	ldrb	r2, [r7, #3]
   1fe30:	7bfb      	ldrb	r3, [r7, #15]
   1fe32:	1ad3      	subs	r3, r2, r3
   1fe34:	3b01      	subs	r3, #1
   1fe36:	687a      	ldr	r2, [r7, #4]
   1fe38:	4413      	add	r3, r2
   1fe3a:	781b      	ldrb	r3, [r3, #0]
   1fe3c:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   1fe3e:	78fa      	ldrb	r2, [r7, #3]
   1fe40:	7bfb      	ldrb	r3, [r7, #15]
   1fe42:	1ad3      	subs	r3, r2, r3
   1fe44:	3b01      	subs	r3, #1
   1fe46:	687a      	ldr	r2, [r7, #4]
   1fe48:	4413      	add	r3, r2
   1fe4a:	7bfa      	ldrb	r2, [r7, #15]
   1fe4c:	6879      	ldr	r1, [r7, #4]
   1fe4e:	440a      	add	r2, r1
   1fe50:	7812      	ldrb	r2, [r2, #0]
   1fe52:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   1fe54:	7bfb      	ldrb	r3, [r7, #15]
   1fe56:	687a      	ldr	r2, [r7, #4]
   1fe58:	4413      	add	r3, r2
   1fe5a:	7bba      	ldrb	r2, [r7, #14]
   1fe5c:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   1fe5e:	7bfb      	ldrb	r3, [r7, #15]
   1fe60:	3301      	adds	r3, #1
   1fe62:	73fb      	strb	r3, [r7, #15]
   1fe64:	78fb      	ldrb	r3, [r7, #3]
   1fe66:	085b      	lsrs	r3, r3, #1
   1fe68:	b2db      	uxtb	r3, r3
   1fe6a:	7bfa      	ldrb	r2, [r7, #15]
   1fe6c:	429a      	cmp	r2, r3
   1fe6e:	d3de      	bcc.n	1fe2e <WStrReverse+0x12>
  }
}
   1fe70:	bf00      	nop
   1fe72:	3714      	adds	r7, #20
   1fe74:	46bd      	mov	sp, r7
   1fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
   1fe7a:	4770      	bx	lr

0001fe7c <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   1fe7c:	b580      	push	{r7, lr}
   1fe7e:	af00      	add	r7, sp, #0
    am_bsp_uart_printf_enable();
#else
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   1fe80:	f006 fe34 	bl	26aec <am_bsp_itm_printf_enable>
#endif
    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
   1fe84:	f002 f84a 	bl	21f1c <am_util_stdio_terminal_clear>
}
   1fe88:	bf00      	nop
   1fe8a:	bd80      	pop	{r7, pc}

0001fe8c <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   1fe8c:	b580      	push	{r7, lr}
   1fe8e:	af00      	add	r7, sp, #0
#if defined (AM_PART_APOLLO3)

    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   1fe90:	2100      	movs	r1, #0
   1fe92:	2000      	movs	r0, #0
   1fe94:	f017 fcb2 	bl	377fc <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //

    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   1fe98:	4808      	ldr	r0, [pc, #32]	; (1febc <main+0x30>)
   1fe9a:	f017 fb0d 	bl	374b8 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   1fe9e:	f017 fb31 	bl	37504 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   1fea2:	f006 fdf1 	bl	26a88 <am_bsp_low_power_init>
    //
    // clear stimer configuration, it may cause exception if retain old value.
    //   
    am_hal_stimer_config(0x03);
   1fea6:	2003      	movs	r0, #3
   1fea8:	f018 fa18 	bl	382dc <am_hal_stimer_config>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   1feac:	f7ff ffe6 	bl	1fe7c <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS VOLE Example\n");
   1feb0:	4803      	ldr	r0, [pc, #12]	; (1fec0 <main+0x34>)
   1feb2:	f002 f80f 	bl	21ed4 <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   1feb6:	f000 fa6f 	bl	20398 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   1feba:	e7fe      	b.n	1feba <main+0x2e>
   1febc:	00044160 	.word	0x00044160
   1fec0:	0003b5a0 	.word	0x0003b5a0

0001fec4 <__NVIC_SetPriority>:
{
   1fec4:	b480      	push	{r7}
   1fec6:	b083      	sub	sp, #12
   1fec8:	af00      	add	r7, sp, #0
   1feca:	4603      	mov	r3, r0
   1fecc:	6039      	str	r1, [r7, #0]
   1fece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1fed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1fed4:	2b00      	cmp	r3, #0
   1fed6:	db0a      	blt.n	1feee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fed8:	490d      	ldr	r1, [pc, #52]	; (1ff10 <__NVIC_SetPriority+0x4c>)
   1feda:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1fede:	683a      	ldr	r2, [r7, #0]
   1fee0:	b2d2      	uxtb	r2, r2
   1fee2:	0152      	lsls	r2, r2, #5
   1fee4:	b2d2      	uxtb	r2, r2
   1fee6:	440b      	add	r3, r1
   1fee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1feec:	e00a      	b.n	1ff04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1feee:	4909      	ldr	r1, [pc, #36]	; (1ff14 <__NVIC_SetPriority+0x50>)
   1fef0:	79fb      	ldrb	r3, [r7, #7]
   1fef2:	f003 030f 	and.w	r3, r3, #15
   1fef6:	3b04      	subs	r3, #4
   1fef8:	683a      	ldr	r2, [r7, #0]
   1fefa:	b2d2      	uxtb	r2, r2
   1fefc:	0152      	lsls	r2, r2, #5
   1fefe:	b2d2      	uxtb	r2, r2
   1ff00:	440b      	add	r3, r1
   1ff02:	761a      	strb	r2, [r3, #24]
}
   1ff04:	bf00      	nop
   1ff06:	370c      	adds	r7, #12
   1ff08:	46bd      	mov	sp, r7
   1ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ff0e:	4770      	bx	lr
   1ff10:	e000e100 	.word	0xe000e100
   1ff14:	e000ed00 	.word	0xe000ed00

0001ff18 <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   1ff18:	b580      	push	{r7, lr}
   1ff1a:	b082      	sub	sp, #8
   1ff1c:	af00      	add	r7, sp, #0
   1ff1e:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1ff20:	2100      	movs	r1, #0
   1ff22:	2000      	movs	r0, #0
   1ff24:	f000 fb16 	bl	20554 <WsfTaskSetReady>
}
   1ff28:	bf00      	nop
   1ff2a:	3708      	adds	r7, #8
   1ff2c:	46bd      	mov	sp, r7
   1ff2e:	bd80      	pop	{r7, pc}

0001ff30 <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   1ff30:	b580      	push	{r7, lr}
   1ff32:	b082      	sub	sp, #8
   1ff34:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   1ff36:	4b09      	ldr	r3, [pc, #36]	; (1ff5c <scheduler_timer_init+0x2c>)
   1ff38:	9300      	str	r3, [sp, #0]
   1ff3a:	2300      	movs	r3, #0
   1ff3c:	2200      	movs	r2, #0
   1ff3e:	210a      	movs	r1, #10
   1ff40:	4807      	ldr	r0, [pc, #28]	; (1ff60 <scheduler_timer_init+0x30>)
   1ff42:	f005 fa4d 	bl	253e0 <xTimerCreate>
   1ff46:	4602      	mov	r2, r0
   1ff48:	4b06      	ldr	r3, [pc, #24]	; (1ff64 <scheduler_timer_init+0x34>)
   1ff4a:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   1ff4c:	4b05      	ldr	r3, [pc, #20]	; (1ff64 <scheduler_timer_init+0x34>)
   1ff4e:	681b      	ldr	r3, [r3, #0]
   1ff50:	2b00      	cmp	r3, #0
   1ff52:	d100      	bne.n	1ff56 <scheduler_timer_init+0x26>
   1ff54:	e7fe      	b.n	1ff54 <scheduler_timer_init+0x24>
}
   1ff56:	bf00      	nop
   1ff58:	46bd      	mov	sp, r7
   1ff5a:	bd80      	pop	{r7, pc}
   1ff5c:	0001ff19 	.word	0x0001ff19
   1ff60:	0003b5b8 	.word	0x0003b5b8
   1ff64:	10044434 	.word	0x10044434

0001ff68 <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   1ff68:	b580      	push	{r7, lr}
   1ff6a:	b082      	sub	sp, #8
   1ff6c:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   1ff6e:	f004 fdfb 	bl	24b68 <xTaskGetTickCount>
   1ff72:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   1ff74:	4b0b      	ldr	r3, [pc, #44]	; (1ffa4 <update_scheduler_timers+0x3c>)
   1ff76:	681b      	ldr	r3, [r3, #0]
   1ff78:	687a      	ldr	r2, [r7, #4]
   1ff7a:	1ad3      	subs	r3, r2, r3
   1ff7c:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   1ff7e:	683b      	ldr	r3, [r7, #0]
   1ff80:	2b09      	cmp	r3, #9
   1ff82:	d90a      	bls.n	1ff9a <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   1ff84:	683b      	ldr	r3, [r7, #0]
   1ff86:	4a08      	ldr	r2, [pc, #32]	; (1ffa8 <update_scheduler_timers+0x40>)
   1ff88:	fba2 2303 	umull	r2, r3, r2, r3
   1ff8c:	08db      	lsrs	r3, r3, #3
   1ff8e:	4618      	mov	r0, r3
   1ff90:	f7fa ff26 	bl	1ade0 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   1ff94:	4a03      	ldr	r2, [pc, #12]	; (1ffa4 <update_scheduler_timers+0x3c>)
   1ff96:	687b      	ldr	r3, [r7, #4]
   1ff98:	6013      	str	r3, [r2, #0]
    }
}
   1ff9a:	bf00      	nop
   1ff9c:	3708      	adds	r7, #8
   1ff9e:	46bd      	mov	sp, r7
   1ffa0:	bd80      	pop	{r7, pc}
   1ffa2:	bf00      	nop
   1ffa4:	1001bd4c 	.word	0x1001bd4c
   1ffa8:	cccccccd 	.word	0xcccccccd

0001ffac <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   1ffac:	b580      	push	{r7, lr}
   1ffae:	b084      	sub	sp, #16
   1ffb0:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   1ffb2:	1cfb      	adds	r3, r7, #3
   1ffb4:	4618      	mov	r0, r3
   1ffb6:	f7fa ff41 	bl	1ae3c <WsfTimerNextExpiration>
   1ffba:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   1ffbc:	687b      	ldr	r3, [r7, #4]
   1ffbe:	2b00      	cmp	r3, #0
   1ffc0:	d014      	beq.n	1ffec <set_next_wakeup+0x40>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   1ffc2:	4b0c      	ldr	r3, [pc, #48]	; (1fff4 <set_next_wakeup+0x48>)
   1ffc4:	6818      	ldr	r0, [r3, #0]
   1ffc6:	687b      	ldr	r3, [r7, #4]
   1ffc8:	f242 7210 	movw	r2, #10000	; 0x2710
   1ffcc:	fb02 f303 	mul.w	r3, r2, r3
   1ffd0:	4a09      	ldr	r2, [pc, #36]	; (1fff8 <set_next_wakeup+0x4c>)
   1ffd2:	fba2 2303 	umull	r2, r3, r2, r3
   1ffd6:	099a      	lsrs	r2, r3, #6
   1ffd8:	2364      	movs	r3, #100	; 0x64
   1ffda:	9300      	str	r3, [sp, #0]
   1ffdc:	2300      	movs	r3, #0
   1ffde:	2104      	movs	r1, #4
   1ffe0:	f005 fa44 	bl	2546c <xTimerGenericCommand>
   1ffe4:	4603      	mov	r3, r0
   1ffe6:	2b01      	cmp	r3, #1
   1ffe8:	d000      	beq.n	1ffec <set_next_wakeup+0x40>
   1ffea:	e7fe      	b.n	1ffea <set_next_wakeup+0x3e>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   1ffec:	bf00      	nop
   1ffee:	3708      	adds	r7, #8
   1fff0:	46bd      	mov	sp, r7
   1fff2:	bd80      	pop	{r7, pc}
   1fff4:	10044434 	.word	0x10044434
   1fff8:	10624dd3 	.word	0x10624dd3

0001fffc <button_handler>:
// Poll the buttons.
//
//*****************************************************************************
void
button_handler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1fffc:	b580      	push	{r7, lr}
   1fffe:	b082      	sub	sp, #8
   20000:	af00      	add	r7, sp, #0
   20002:	4603      	mov	r3, r0
   20004:	6039      	str	r1, [r7, #0]
   20006:	71fb      	strb	r3, [r7, #7]
    //
    // Restart the button timer.
    //
    WsfTimerStartMs(&ButtonTimer, 10);
   20008:	210a      	movs	r1, #10
   2000a:	481e      	ldr	r0, [pc, #120]	; (20084 <button_handler+0x88>)
   2000c:	f7fa fec4 	bl	1ad98 <WsfTimerStartMs>

    //
    // Every time we get a button timer tick, check all of our buttons.
    //
    am_devices_button_array_tick(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   20010:	2101      	movs	r1, #1
   20012:	481d      	ldr	r0, [pc, #116]	; (20088 <button_handler+0x8c>)
   20014:	f000 fff6 	bl	21004 <am_devices_button_array_tick>

    //
    // If we got a a press, do something with it.
    //
    if ( am_devices_button_released(am_bsp_psButtons[0]) )
   20018:	4b1b      	ldr	r3, [pc, #108]	; (20088 <button_handler+0x8c>)
   2001a:	7b1b      	ldrb	r3, [r3, #12]
   2001c:	f083 0301 	eor.w	r3, r3, #1
   20020:	b2db      	uxtb	r3, r3
   20022:	2b00      	cmp	r3, #0
   20024:	d009      	beq.n	2003a <button_handler+0x3e>
   20026:	4b18      	ldr	r3, [pc, #96]	; (20088 <button_handler+0x8c>)
   20028:	7b5b      	ldrb	r3, [r3, #13]
   2002a:	2b00      	cmp	r3, #0
   2002c:	d005      	beq.n	2003a <button_handler+0x3e>
    {
        am_util_debug_printf("Got Button 0 Press\n");
   2002e:	4817      	ldr	r0, [pc, #92]	; (2008c <button_handler+0x90>)
   20030:	f001 ff50 	bl	21ed4 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_1_SHORT);
   20034:	2002      	movs	r0, #2
   20036:	f7f9 fced 	bl	19a14 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[1]) )
   2003a:	4b13      	ldr	r3, [pc, #76]	; (20088 <button_handler+0x8c>)
   2003c:	7f1b      	ldrb	r3, [r3, #28]
   2003e:	f083 0301 	eor.w	r3, r3, #1
   20042:	b2db      	uxtb	r3, r3
   20044:	2b00      	cmp	r3, #0
   20046:	d009      	beq.n	2005c <button_handler+0x60>
   20048:	4b0f      	ldr	r3, [pc, #60]	; (20088 <button_handler+0x8c>)
   2004a:	7f5b      	ldrb	r3, [r3, #29]
   2004c:	2b00      	cmp	r3, #0
   2004e:	d005      	beq.n	2005c <button_handler+0x60>
    {
        am_util_debug_printf("Got Button 1 Press\n");
   20050:	480f      	ldr	r0, [pc, #60]	; (20090 <button_handler+0x94>)
   20052:	f001 ff3f 	bl	21ed4 <am_util_stdio_printf>
        AppUiBtnTest(APP_UI_BTN_2_SHORT);
   20056:	2007      	movs	r0, #7
   20058:	f7f9 fcdc 	bl	19a14 <AppUiBtnTest>
    }

    if ( am_devices_button_released(am_bsp_psButtons[2]) )
   2005c:	4b0a      	ldr	r3, [pc, #40]	; (20088 <button_handler+0x8c>)
   2005e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   20062:	f083 0301 	eor.w	r3, r3, #1
   20066:	b2db      	uxtb	r3, r3
   20068:	2b00      	cmp	r3, #0
   2006a:	d007      	beq.n	2007c <button_handler+0x80>
   2006c:	4b06      	ldr	r3, [pc, #24]	; (20088 <button_handler+0x8c>)
   2006e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   20072:	2b00      	cmp	r3, #0
   20074:	d002      	beq.n	2007c <button_handler+0x80>
    {
        am_util_debug_printf("Got Button 2 Press\n");
   20076:	4807      	ldr	r0, [pc, #28]	; (20094 <button_handler+0x98>)
   20078:	f001 ff2c 	bl	21ed4 <am_util_stdio_printf>
    }
}
   2007c:	bf00      	nop
   2007e:	3708      	adds	r7, #8
   20080:	46bd      	mov	sp, r7
   20082:	bd80      	pop	{r7, pc}
   20084:	10044440 	.word	0x10044440
   20088:	10018054 	.word	0x10018054
   2008c:	0003b5c4 	.word	0x0003b5c4
   20090:	0003b5d8 	.word	0x0003b5d8
   20094:	0003b5ec 	.word	0x0003b5ec

00020098 <setup_buttons>:
// Sets up a button interface.
//
//*****************************************************************************
void
setup_buttons(void)
{
   20098:	b580      	push	{r7, lr}
   2009a:	af00      	add	r7, sp, #0
    //
    // Enable the buttons for user interaction.
    //
    am_devices_button_array_init(am_bsp_psButtons, AM_BSP_NUM_BUTTONS);
   2009c:	2101      	movs	r1, #1
   2009e:	4806      	ldr	r0, [pc, #24]	; (200b8 <setup_buttons+0x20>)
   200a0:	f000 ff4c 	bl	20f3c <am_devices_button_array_init>

    //
    // Start a timer.
    //
    ButtonTimer.handlerId = ButtonHandlerId;
   200a4:	4b05      	ldr	r3, [pc, #20]	; (200bc <setup_buttons+0x24>)
   200a6:	781a      	ldrb	r2, [r3, #0]
   200a8:	4b05      	ldr	r3, [pc, #20]	; (200c0 <setup_buttons+0x28>)
   200aa:	721a      	strb	r2, [r3, #8]
    WsfTimerStartSec(&ButtonTimer, 2);
   200ac:	2102      	movs	r1, #2
   200ae:	4804      	ldr	r0, [pc, #16]	; (200c0 <setup_buttons+0x28>)
   200b0:	f7fa fe60 	bl	1ad74 <WsfTimerStartSec>
}
   200b4:	bf00      	nop
   200b6:	bd80      	pop	{r7, pc}
   200b8:	10018054 	.word	0x10018054
   200bc:	10044430 	.word	0x10044430
   200c0:	10044440 	.word	0x10044440

000200c4 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   200c4:	b580      	push	{r7, lr}
   200c6:	b082      	sub	sp, #8
   200c8:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   200ca:	f7ff ff31 	bl	1ff30 <scheduler_timer_init>
    WsfTimerInit();
   200ce:	f7fa fe41 	bl	1ad54 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   200d2:	4b47      	ldr	r3, [pc, #284]	; (201f0 <exactle_stack_init+0x12c>)
   200d4:	2206      	movs	r2, #6
   200d6:	4947      	ldr	r1, [pc, #284]	; (201f4 <exactle_stack_init+0x130>)
   200d8:	f44f 6062 	mov.w	r0, #3616	; 0xe20
   200dc:	f7fa fb58 	bl	1a790 <WsfBufInit>
   200e0:	4603      	mov	r3, r0
   200e2:	80fb      	strh	r3, [r7, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   200e4:	88fb      	ldrh	r3, [r7, #6]
   200e6:	f5b3 6f62 	cmp.w	r3, #3616	; 0xe20
   200ea:	d906      	bls.n	200fa <exactle_stack_init+0x36>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   200ec:	88fb      	ldrh	r3, [r7, #6]
   200ee:	f5a3 6362 	sub.w	r3, r3, #3616	; 0xe20
   200f2:	4619      	mov	r1, r3
   200f4:	4840      	ldr	r0, [pc, #256]	; (201f8 <exactle_stack_init+0x134>)
   200f6:	f001 feed 	bl	21ed4 <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   200fa:	f7fb fac5 	bl	1b688 <SecInit>
    SecAesInit();
   200fe:	f7fa ff5f 	bl	1afc0 <SecAesInit>
    SecCmacInit();
   20102:	f7fb f931 	bl	1b368 <SecCmacInit>
    SecEccInit();
   20106:	f7fb fa3d 	bl	1b584 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   2010a:	483c      	ldr	r0, [pc, #240]	; (201fc <exactle_stack_init+0x138>)
   2010c:	f000 fa4e 	bl	205ac <WsfOsSetNextHandler>
   20110:	4603      	mov	r3, r0
   20112:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   20114:	797b      	ldrb	r3, [r7, #5]
   20116:	4618      	mov	r0, r3
   20118:	f7f9 f8d8 	bl	192cc <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   2011c:	4838      	ldr	r0, [pc, #224]	; (20200 <exactle_stack_init+0x13c>)
   2011e:	f000 fa45 	bl	205ac <WsfOsSetNextHandler>
   20122:	4603      	mov	r3, r0
   20124:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   20126:	2000      	movs	r0, #0
   20128:	f7f0 f963 	bl	103f2 <DmDevVsInit>
    DmAdvInit();
   2012c:	f7ef fbe2 	bl	f8f4 <DmAdvInit>
    DmConnInit();
   20130:	f7ef fe5a 	bl	fde8 <DmConnInit>
    DmConnSlaveInit();
   20134:	f7f0 f8b8 	bl	102a8 <DmConnSlaveInit>
    DmSecInit();
   20138:	f7f0 fc97 	bl	10a6a <DmSecInit>
    DmSecLescInit();
   2013c:	f7f0 fdd4 	bl	10ce8 <DmSecLescInit>
    DmPrivInit();
   20140:	f7f0 fae2 	bl	10708 <DmPrivInit>
    DmHandlerInit(handlerId);
   20144:	797b      	ldrb	r3, [r7, #5]
   20146:	4618      	mov	r0, r3
   20148:	f7f0 f99d 	bl	10486 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   2014c:	482d      	ldr	r0, [pc, #180]	; (20204 <exactle_stack_init+0x140>)
   2014e:	f000 fa2d 	bl	205ac <WsfOsSetNextHandler>
   20152:	4603      	mov	r3, r0
   20154:	717b      	strb	r3, [r7, #5]
    L2cSlaveHandlerInit(handlerId);
   20156:	797b      	ldrb	r3, [r7, #5]
   20158:	4618      	mov	r0, r3
   2015a:	f7f0 ff67 	bl	1102c <L2cSlaveHandlerInit>
    L2cInit();
   2015e:	f7f0 fe94 	bl	10e8a <L2cInit>
    L2cSlaveInit();
   20162:	f7f0 ff19 	bl	10f98 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   20166:	4828      	ldr	r0, [pc, #160]	; (20208 <exactle_stack_init+0x144>)
   20168:	f000 fa20 	bl	205ac <WsfOsSetNextHandler>
   2016c:	4603      	mov	r3, r0
   2016e:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   20170:	797b      	ldrb	r3, [r7, #5]
   20172:	4618      	mov	r0, r3
   20174:	f7ec fee5 	bl	cf42 <AttHandlerInit>
    AttsInit();
   20178:	f7ee f830 	bl	e1dc <AttsInit>
    AttsIndInit();
   2017c:	f7ed ff30 	bl	dfe0 <AttsIndInit>
    AttcInit();
   20180:	f7ed f950 	bl	d424 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   20184:	4821      	ldr	r0, [pc, #132]	; (2020c <exactle_stack_init+0x148>)
   20186:	f000 fa11 	bl	205ac <WsfOsSetNextHandler>
   2018a:	4603      	mov	r3, r0
   2018c:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   2018e:	797b      	ldrb	r3, [r7, #5]
   20190:	4618      	mov	r0, r3
   20192:	f7f1 f9d3 	bl	1153c <SmpHandlerInit>
    SmprInit();
   20196:	f7f2 f829 	bl	121ec <SmprInit>
    SmprScInit();
   2019a:	f7f2 f811 	bl	121c0 <SmprScInit>
    HciSetMaxRxAclLen(251);
   2019e:	20fb      	movs	r0, #251	; 0xfb
   201a0:	f7f6 fda2 	bl	16ce8 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   201a4:	481a      	ldr	r0, [pc, #104]	; (20210 <exactle_stack_init+0x14c>)
   201a6:	f000 fa01 	bl	205ac <WsfOsSetNextHandler>
   201aa:	4603      	mov	r3, r0
   201ac:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   201ae:	797b      	ldrb	r3, [r7, #5]
   201b0:	4618      	mov	r0, r3
   201b2:	f001 ff29 	bl	22008 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(VoleHandler);
   201b6:	4817      	ldr	r0, [pc, #92]	; (20214 <exactle_stack_init+0x150>)
   201b8:	f000 f9f8 	bl	205ac <WsfOsSetNextHandler>
   201bc:	4603      	mov	r3, r0
   201be:	717b      	strb	r3, [r7, #5]
    VoleHandlerInit(handlerId);
   201c0:	797b      	ldrb	r3, [r7, #5]
   201c2:	4618      	mov	r0, r3
   201c4:	f7fa fa38 	bl	1a638 <VoleHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   201c8:	4813      	ldr	r0, [pc, #76]	; (20218 <exactle_stack_init+0x154>)
   201ca:	f000 f9ef 	bl	205ac <WsfOsSetNextHandler>
   201ce:	4603      	mov	r3, r0
   201d0:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   201d2:	797b      	ldrb	r3, [r7, #5]
   201d4:	4618      	mov	r0, r3
   201d6:	f000 fcff 	bl	20bd8 <HciDrvHandlerInit>

    ButtonHandlerId = WsfOsSetNextHandler(button_handler);
   201da:	4810      	ldr	r0, [pc, #64]	; (2021c <exactle_stack_init+0x158>)
   201dc:	f000 f9e6 	bl	205ac <WsfOsSetNextHandler>
   201e0:	4603      	mov	r3, r0
   201e2:	461a      	mov	r2, r3
   201e4:	4b0e      	ldr	r3, [pc, #56]	; (20220 <exactle_stack_init+0x15c>)
   201e6:	701a      	strb	r2, [r3, #0]
}
   201e8:	bf00      	nop
   201ea:	3708      	adds	r7, #8
   201ec:	46bd      	mov	sp, r7
   201ee:	bd80      	pop	{r7, pc}
   201f0:	10017f58 	.word	0x10017f58
   201f4:	1001af2c 	.word	0x1001af2c
   201f8:	0003b600 	.word	0x0003b600
   201fc:	000192f9 	.word	0x000192f9
   20200:	000104a1 	.word	0x000104a1
   20204:	0001103d 	.word	0x0001103d
   20208:	0000cf81 	.word	0x0000cf81
   2020c:	00011585 	.word	0x00011585
   20210:	00022029 	.word	0x00022029
   20214:	0001a6a9 	.word	0x0001a6a9
   20218:	00020c65 	.word	0x00020c65
   2021c:	0001fffd 	.word	0x0001fffd
   20220:	10044430 	.word	0x10044430

00020224 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   20224:	b580      	push	{r7, lr}
   20226:	b082      	sub	sp, #8
   20228:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   2022a:	4b07      	ldr	r3, [pc, #28]	; (20248 <am_uart_isr+0x24>)
   2022c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2022e:	607b      	str	r3, [r7, #4]
    UARTn(0)->IEC = ui32Status;
   20230:	4a05      	ldr	r2, [pc, #20]	; (20248 <am_uart_isr+0x24>)
   20232:	687b      	ldr	r3, [r7, #4]
   20234:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   20236:	2100      	movs	r1, #0
   20238:	2000      	movs	r0, #0
   2023a:	f000 f98b 	bl	20554 <WsfTaskSetReady>
}
   2023e:	bf00      	nop
   20240:	3708      	adds	r7, #8
   20242:	46bd      	mov	sp, r7
   20244:	bd80      	pop	{r7, pc}
   20246:	bf00      	nop
   20248:	4001c000 	.word	0x4001c000

0002024c <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   2024c:	b580      	push	{r7, lr}
   2024e:	af00      	add	r7, sp, #0

    HciDrvIntService();
   20250:	f000 fce2 	bl	20c18 <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   20254:	2100      	movs	r1, #0
   20256:	2000      	movs	r0, #0
   20258:	f000 f97c 	bl	20554 <WsfTaskSetReady>
}
   2025c:	bf00      	nop
   2025e:	bd80      	pop	{r7, pc}

00020260 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   20260:	b580      	push	{r7, lr}
   20262:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");
   20264:	480d      	ldr	r0, [pc, #52]	; (2029c <RadioTaskSetup+0x3c>)
   20266:	f001 fe35 	bl	21ed4 <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   2026a:	f003 fbbb 	bl	239e4 <xEventGroupCreate>
   2026e:	4602      	mov	r2, r0
   20270:	4b0b      	ldr	r3, [pc, #44]	; (202a0 <RadioTaskSetup+0x40>)
   20272:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   20274:	bf00      	nop
   20276:	4b0a      	ldr	r3, [pc, #40]	; (202a0 <RadioTaskSetup+0x40>)
   20278:	681b      	ldr	r3, [r3, #0]
   2027a:	2b00      	cmp	r3, #0
   2027c:	d0fb      	beq.n	20276 <RadioTaskSetup+0x16>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   2027e:	4b08      	ldr	r3, [pc, #32]	; (202a0 <RadioTaskSetup+0x40>)
   20280:	681b      	ldr	r3, [r3, #0]
   20282:	4618      	mov	r0, r3
   20284:	f000 fa44 	bl	20710 <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   20288:	2104      	movs	r1, #4
   2028a:	200c      	movs	r0, #12
   2028c:	f7ff fe1a 	bl	1fec4 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(0);
   20290:	2000      	movs	r0, #0
   20292:	f000 fad5 	bl	20840 <HciDrvRadioBoot>
}
   20296:	bf00      	nop
   20298:	bd80      	pop	{r7, pc}
   2029a:	bf00      	nop
   2029c:	0003b624 	.word	0x0003b624
   202a0:	1004443c 	.word	0x1004443c

000202a4 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   202a4:	b580      	push	{r7, lr}
   202a6:	b084      	sub	sp, #16
   202a8:	af02      	add	r7, sp, #8
   202aa:	6078      	str	r0, [r7, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   202ac:	480f      	ldr	r0, [pc, #60]	; (202ec <RadioTask+0x48>)
   202ae:	f001 fe11 	bl	21ed4 <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   202b2:	f7ff ff07 	bl	200c4 <exactle_stack_init>

    setup_buttons();
   202b6:	f7ff feef 	bl	20098 <setup_buttons>

    //
    // Start the "Vole" profile.
    //
    VoleStart();
   202ba:	f7fa fa1b 	bl	1a6f4 <VoleStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   202be:	f7ff fe53 	bl	1ff68 <update_scheduler_timers>
        wsfOsDispatcher();
   202c2:	f000 f9a1 	bl	20608 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   202c6:	f7ff fe71 	bl	1ffac <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   202ca:	f000 f98b 	bl	205e4 <wsfOsReadyToSleep>
   202ce:	4603      	mov	r3, r0
   202d0:	2b00      	cmp	r3, #0
   202d2:	d0f4      	beq.n	202be <RadioTask+0x1a>
        {
            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   202d4:	4b06      	ldr	r3, [pc, #24]	; (202f0 <RadioTask+0x4c>)
   202d6:	6818      	ldr	r0, [r3, #0]
   202d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   202dc:	9300      	str	r3, [sp, #0]
   202de:	2300      	movs	r3, #0
   202e0:	2201      	movs	r2, #1
   202e2:	2101      	movs	r1, #1
   202e4:	f003 fb96 	bl	23a14 <xEventGroupWaitBits>
        update_scheduler_timers();
   202e8:	e7e9      	b.n	202be <RadioTask+0x1a>
   202ea:	bf00      	nop
   202ec:	0003b638 	.word	0x0003b638
   202f0:	1004443c 	.word	0x1004443c

000202f4 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   202f4:	b580      	push	{r7, lr}
   202f6:	b082      	sub	sp, #8
   202f8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   202fa:	2000      	movs	r0, #0
   202fc:	f017 fb50 	bl	379a0 <am_hal_ctimer_int_status_get>
   20300:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   20302:	6878      	ldr	r0, [r7, #4]
   20304:	f017 fb3c 	bl	37980 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   20308:	6878      	ldr	r0, [r7, #4]
   2030a:	f017 fb21 	bl	37950 <am_hal_ctimer_int_service>
}
   2030e:	bf00      	nop
   20310:	3708      	adds	r7, #8
   20312:	46bd      	mov	sp, r7
   20314:	bd80      	pop	{r7, pc}

00020316 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
unsigned long am_freertos_sleep(unsigned long idleTime)
{
   20316:	b580      	push	{r7, lr}
   20318:	b082      	sub	sp, #8
   2031a:	af00      	add	r7, sp, #0
   2031c:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   2031e:	2001      	movs	r0, #1
   20320:	f018 f85c 	bl	383dc <am_hal_sysctrl_sleep>
    return 0;
   20324:	2300      	movs	r3, #0
}
   20326:	4618      	mov	r0, r3
   20328:	3708      	adds	r7, #8
   2032a:	46bd      	mov	sp, r7
   2032c:	bd80      	pop	{r7, pc}

0002032e <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(unsigned long idleTime)
{
   2032e:	b480      	push	{r7}
   20330:	b083      	sub	sp, #12
   20332:	af00      	add	r7, sp, #0
   20334:	6078      	str	r0, [r7, #4]
    return;
   20336:	bf00      	nop
}
   20338:	370c      	adds	r7, #12
   2033a:	46bd      	mov	sp, r7
   2033c:	f85d 7b04 	ldr.w	r7, [sp], #4
   20340:	4770      	bx	lr

00020342 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   20342:	b480      	push	{r7}
   20344:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   20346:	e7fe      	b.n	20346 <vApplicationMallocFailedHook+0x4>

00020348 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   20348:	b480      	push	{r7}
   2034a:	b083      	sub	sp, #12
   2034c:	af00      	add	r7, sp, #0
   2034e:	6078      	str	r0, [r7, #4]
   20350:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   20352:	be00      	bkpt	0x0000
   20354:	e7fd      	b.n	20352 <vApplicationStackOverflowHook+0xa>
	...

00020358 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   20358:	b580      	push	{r7, lr}
   2035a:	b084      	sub	sp, #16
   2035c:	af02      	add	r7, sp, #8
   2035e:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   20360:	4809      	ldr	r0, [pc, #36]	; (20388 <setup_task+0x30>)
   20362:	f001 fdb7 	bl	21ed4 <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   20366:	f7ff ff7b 	bl	20260 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 13*1024, 0, 3, &radio_task_handle);
   2036a:	4b08      	ldr	r3, [pc, #32]	; (2038c <setup_task+0x34>)
   2036c:	9301      	str	r3, [sp, #4]
   2036e:	2303      	movs	r3, #3
   20370:	9300      	str	r3, [sp, #0]
   20372:	2300      	movs	r3, #0
   20374:	f44f 5250 	mov.w	r2, #13312	; 0x3400
   20378:	4905      	ldr	r1, [pc, #20]	; (20390 <setup_task+0x38>)
   2037a:	4806      	ldr	r0, [pc, #24]	; (20394 <setup_task+0x3c>)
   2037c:	f004 f942 	bl	24604 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   20380:	2000      	movs	r0, #0
   20382:	f004 fa67 	bl	24854 <vTaskSuspend>

    while (1);
   20386:	e7fe      	b.n	20386 <setup_task+0x2e>
   20388:	0003b654 	.word	0x0003b654
   2038c:	10044438 	.word	0x10044438
   20390:	0003b670 	.word	0x0003b670
   20394:	000202a5 	.word	0x000202a5

00020398 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   20398:	b580      	push	{r7, lr}
   2039a:	b082      	sub	sp, #8
   2039c:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   2039e:	4b08      	ldr	r3, [pc, #32]	; (203c0 <run_tasks+0x28>)
   203a0:	9301      	str	r3, [sp, #4]
   203a2:	2303      	movs	r3, #3
   203a4:	9300      	str	r3, [sp, #0]
   203a6:	2300      	movs	r3, #0
   203a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   203ac:	4905      	ldr	r1, [pc, #20]	; (203c4 <run_tasks+0x2c>)
   203ae:	4806      	ldr	r0, [pc, #24]	; (203c8 <run_tasks+0x30>)
   203b0:	f004 f928 	bl	24604 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   203b4:	f004 faba 	bl	2492c <vTaskStartScheduler>
}
   203b8:	bf00      	nop
   203ba:	46bd      	mov	sp, r7
   203bc:	bd80      	pop	{r7, pc}
   203be:	bf00      	nop
   203c0:	10044450 	.word	0x10044450
   203c4:	0003b67c 	.word	0x0003b67c
   203c8:	00020359 	.word	0x00020359

000203cc <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   203cc:	b480      	push	{r7}
   203ce:	b085      	sub	sp, #20
   203d0:	af00      	add	r7, sp, #0
   203d2:	6078      	str	r0, [r7, #4]
   203d4:	460b      	mov	r3, r1
   203d6:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   203d8:	2300      	movs	r3, #0
   203da:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   203dc:	7bfb      	ldrb	r3, [r7, #15]
   203de:	b2db      	uxtb	r3, r3
   203e0:	2b00      	cmp	r3, #0
   203e2:	d100      	bne.n	203e6 <WsfAssert+0x1a>
   203e4:	e7fa      	b.n	203dc <WsfAssert+0x10>
    {
      break;
   203e6:	bf00      	nop
    }
  }
}
   203e8:	bf00      	nop
   203ea:	3714      	adds	r7, #20
   203ec:	46bd      	mov	sp, r7
   203ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   203f2:	4770      	bx	lr

000203f4 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   203f4:	b480      	push	{r7}
   203f6:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   203f8:	4b07      	ldr	r3, [pc, #28]	; (20418 <WsfCsEnter+0x24>)
   203fa:	781b      	ldrb	r3, [r3, #0]
   203fc:	2b00      	cmp	r3, #0
   203fe:	d100      	bne.n	20402 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   20400:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   20402:	4b05      	ldr	r3, [pc, #20]	; (20418 <WsfCsEnter+0x24>)
   20404:	781b      	ldrb	r3, [r3, #0]
   20406:	3301      	adds	r3, #1
   20408:	b2da      	uxtb	r2, r3
   2040a:	4b03      	ldr	r3, [pc, #12]	; (20418 <WsfCsEnter+0x24>)
   2040c:	701a      	strb	r2, [r3, #0]
}
   2040e:	bf00      	nop
   20410:	46bd      	mov	sp, r7
   20412:	f85d 7b04 	ldr.w	r7, [sp], #4
   20416:	4770      	bx	lr
   20418:	1001bd50 	.word	0x1001bd50

0002041c <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   2041c:	b480      	push	{r7}
   2041e:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   20420:	4b07      	ldr	r3, [pc, #28]	; (20440 <WsfCsExit+0x24>)
   20422:	781b      	ldrb	r3, [r3, #0]
   20424:	3b01      	subs	r3, #1
   20426:	b2da      	uxtb	r2, r3
   20428:	4b05      	ldr	r3, [pc, #20]	; (20440 <WsfCsExit+0x24>)
   2042a:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   2042c:	4b04      	ldr	r3, [pc, #16]	; (20440 <WsfCsExit+0x24>)
   2042e:	781b      	ldrb	r3, [r3, #0]
   20430:	2b00      	cmp	r3, #0
   20432:	d100      	bne.n	20436 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   20434:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   20436:	bf00      	nop
   20438:	46bd      	mov	sp, r7
   2043a:	f85d 7b04 	ldr.w	r7, [sp], #4
   2043e:	4770      	bx	lr
   20440:	1001bd50 	.word	0x1001bd50

00020444 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   20444:	b580      	push	{r7, lr}
   20446:	af00      	add	r7, sp, #0
  WsfCsEnter();
   20448:	f7ff ffd4 	bl	203f4 <WsfCsEnter>
}
   2044c:	bf00      	nop
   2044e:	bd80      	pop	{r7, pc}

00020450 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   20450:	b580      	push	{r7, lr}
   20452:	af00      	add	r7, sp, #0
  WsfCsExit();
   20454:	f7ff ffe2 	bl	2041c <WsfCsExit>
}
   20458:	bf00      	nop
   2045a:	bd80      	pop	{r7, pc}

0002045c <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   2045c:	b580      	push	{r7, lr}
   2045e:	b084      	sub	sp, #16
   20460:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   20462:	4b21      	ldr	r3, [pc, #132]	; (204e8 <WsfSetOsSpecificEvent+0x8c>)
   20464:	681b      	ldr	r3, [r3, #0]
   20466:	2b00      	cmp	r3, #0
   20468:	d039      	beq.n	204de <WsfSetOsSpecificEvent+0x82>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   2046a:	f3ef 8305 	mrs	r3, IPSR
   2046e:	60bb      	str	r3, [r7, #8]
	if( ulCurrentInterrupt == 0 )
   20470:	68bb      	ldr	r3, [r7, #8]
   20472:	2b00      	cmp	r3, #0
   20474:	d102      	bne.n	2047c <WsfSetOsSpecificEvent+0x20>
		xReturn = pdFALSE;
   20476:	2300      	movs	r3, #0
   20478:	607b      	str	r3, [r7, #4]
   2047a:	e001      	b.n	20480 <WsfSetOsSpecificEvent+0x24>
		xReturn = pdTRUE;
   2047c:	2301      	movs	r3, #1
   2047e:	607b      	str	r3, [r7, #4]
	return xReturn;
   20480:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   20482:	2b01      	cmp	r3, #1
   20484:	d118      	bne.n	204b8 <WsfSetOsSpecificEvent+0x5c>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   20486:	2300      	movs	r3, #0
   20488:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   2048a:	4b17      	ldr	r3, [pc, #92]	; (204e8 <WsfSetOsSpecificEvent+0x8c>)
   2048c:	6819      	ldr	r1, [r3, #0]
   2048e:	463b      	mov	r3, r7
   20490:	2201      	movs	r2, #1
   20492:	4816      	ldr	r0, [pc, #88]	; (204ec <WsfSetOsSpecificEvent+0x90>)
   20494:	f005 fa5e 	bl	25954 <xTimerPendFunctionCallFromISR>
   20498:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   2049a:	68fb      	ldr	r3, [r7, #12]
   2049c:	2b00      	cmp	r3, #0
   2049e:	d01e      	beq.n	204de <WsfSetOsSpecificEvent+0x82>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   204a0:	683b      	ldr	r3, [r7, #0]
   204a2:	2b00      	cmp	r3, #0
   204a4:	d01b      	beq.n	204de <WsfSetOsSpecificEvent+0x82>
   204a6:	4b12      	ldr	r3, [pc, #72]	; (204f0 <WsfSetOsSpecificEvent+0x94>)
   204a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   204ac:	601a      	str	r2, [r3, #0]
   204ae:	f3bf 8f4f 	dsb	sy
   204b2:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   204b6:	e012      	b.n	204de <WsfSetOsSpecificEvent+0x82>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   204b8:	4b0b      	ldr	r3, [pc, #44]	; (204e8 <WsfSetOsSpecificEvent+0x8c>)
   204ba:	681b      	ldr	r3, [r3, #0]
   204bc:	2101      	movs	r1, #1
   204be:	4618      	mov	r0, r3
   204c0:	f003 fb4e 	bl	23b60 <xEventGroupSetBits>
   204c4:	4603      	mov	r3, r0
   204c6:	60fb      	str	r3, [r7, #12]
          if ( xResult != pdFAIL )
   204c8:	68fb      	ldr	r3, [r7, #12]
   204ca:	2b00      	cmp	r3, #0
   204cc:	d007      	beq.n	204de <WsfSetOsSpecificEvent+0x82>
              portYIELD();
   204ce:	4b08      	ldr	r3, [pc, #32]	; (204f0 <WsfSetOsSpecificEvent+0x94>)
   204d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   204d4:	601a      	str	r2, [r3, #0]
   204d6:	f3bf 8f4f 	dsb	sy
   204da:	f3bf 8f6f 	isb	sy
}
   204de:	bf00      	nop
   204e0:	3710      	adds	r7, #16
   204e2:	46bd      	mov	sp, r7
   204e4:	bd80      	pop	{r7, pc}
   204e6:	bf00      	nop
   204e8:	1001bd54 	.word	0x1001bd54
   204ec:	00023c4f 	.word	0x00023c4f
   204f0:	e000ed04 	.word	0xe000ed04

000204f4 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   204f4:	b580      	push	{r7, lr}
   204f6:	b082      	sub	sp, #8
   204f8:	af00      	add	r7, sp, #0
   204fa:	4603      	mov	r3, r0
   204fc:	460a      	mov	r2, r1
   204fe:	71fb      	strb	r3, [r7, #7]
   20500:	4613      	mov	r3, r2
   20502:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   20504:	f7ff ff76 	bl	203f4 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   20508:	79fb      	ldrb	r3, [r7, #7]
   2050a:	f003 030f 	and.w	r3, r3, #15
   2050e:	79fa      	ldrb	r2, [r7, #7]
   20510:	f002 020f 	and.w	r2, r2, #15
   20514:	490e      	ldr	r1, [pc, #56]	; (20550 <WsfSetEvent+0x5c>)
   20516:	440a      	add	r2, r1
   20518:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   2051c:	79ba      	ldrb	r2, [r7, #6]
   2051e:	430a      	orrs	r2, r1
   20520:	b2d1      	uxtb	r1, r2
   20522:	4a0b      	ldr	r2, [pc, #44]	; (20550 <WsfSetEvent+0x5c>)
   20524:	4413      	add	r3, r2
   20526:	460a      	mov	r2, r1
   20528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   2052c:	4b08      	ldr	r3, [pc, #32]	; (20550 <WsfSetEvent+0x5c>)
   2052e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   20532:	f043 0304 	orr.w	r3, r3, #4
   20536:	b2da      	uxtb	r2, r3
   20538:	4b05      	ldr	r3, [pc, #20]	; (20550 <WsfSetEvent+0x5c>)
   2053a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   2053e:	f7ff ff6d 	bl	2041c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   20542:	f7ff ff8b 	bl	2045c <WsfSetOsSpecificEvent>
}
   20546:	bf00      	nop
   20548:	3708      	adds	r7, #8
   2054a:	46bd      	mov	sp, r7
   2054c:	bd80      	pop	{r7, pc}
   2054e:	bf00      	nop
   20550:	10044454 	.word	0x10044454

00020554 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   20554:	b580      	push	{r7, lr}
   20556:	b082      	sub	sp, #8
   20558:	af00      	add	r7, sp, #0
   2055a:	4603      	mov	r3, r0
   2055c:	460a      	mov	r2, r1
   2055e:	71fb      	strb	r3, [r7, #7]
   20560:	4613      	mov	r3, r2
   20562:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   20564:	f7ff ff46 	bl	203f4 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   20568:	4b08      	ldr	r3, [pc, #32]	; (2058c <WsfTaskSetReady+0x38>)
   2056a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2056e:	79bb      	ldrb	r3, [r7, #6]
   20570:	4313      	orrs	r3, r2
   20572:	b2da      	uxtb	r2, r3
   20574:	4b05      	ldr	r3, [pc, #20]	; (2058c <WsfTaskSetReady+0x38>)
   20576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   2057a:	f7ff ff4f 	bl	2041c <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   2057e:	f7ff ff6d 	bl	2045c <WsfSetOsSpecificEvent>
}
   20582:	bf00      	nop
   20584:	3708      	adds	r7, #8
   20586:	46bd      	mov	sp, r7
   20588:	bd80      	pop	{r7, pc}
   2058a:	bf00      	nop
   2058c:	10044454 	.word	0x10044454

00020590 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   20590:	b480      	push	{r7}
   20592:	b083      	sub	sp, #12
   20594:	af00      	add	r7, sp, #0
   20596:	4603      	mov	r3, r0
   20598:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   2059a:	4b03      	ldr	r3, [pc, #12]	; (205a8 <WsfTaskMsgQueue+0x18>)
}
   2059c:	4618      	mov	r0, r3
   2059e:	370c      	adds	r7, #12
   205a0:	46bd      	mov	sp, r7
   205a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   205a6:	4770      	bx	lr
   205a8:	10044484 	.word	0x10044484

000205ac <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   205ac:	b480      	push	{r7}
   205ae:	b085      	sub	sp, #20
   205b0:	af00      	add	r7, sp, #0
   205b2:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   205b4:	4b0a      	ldr	r3, [pc, #40]	; (205e0 <WsfOsSetNextHandler+0x34>)
   205b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   205ba:	1c5a      	adds	r2, r3, #1
   205bc:	b2d1      	uxtb	r1, r2
   205be:	4a08      	ldr	r2, [pc, #32]	; (205e0 <WsfOsSetNextHandler+0x34>)
   205c0:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   205c4:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   205c6:	7bfb      	ldrb	r3, [r7, #15]
   205c8:	4905      	ldr	r1, [pc, #20]	; (205e0 <WsfOsSetNextHandler+0x34>)
   205ca:	687a      	ldr	r2, [r7, #4]
   205cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   205d0:	7bfb      	ldrb	r3, [r7, #15]
}
   205d2:	4618      	mov	r0, r3
   205d4:	3714      	adds	r7, #20
   205d6:	46bd      	mov	sp, r7
   205d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   205dc:	4770      	bx	lr
   205de:	bf00      	nop
   205e0:	10044454 	.word	0x10044454

000205e4 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   205e4:	b480      	push	{r7}
   205e6:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   205e8:	4b06      	ldr	r3, [pc, #24]	; (20604 <wsfOsReadyToSleep+0x20>)
   205ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   205ee:	2b00      	cmp	r3, #0
   205f0:	bf0c      	ite	eq
   205f2:	2301      	moveq	r3, #1
   205f4:	2300      	movne	r3, #0
   205f6:	b2db      	uxtb	r3, r3
}
   205f8:	4618      	mov	r0, r3
   205fa:	46bd      	mov	sp, r7
   205fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   20600:	4770      	bx	lr
   20602:	bf00      	nop
   20604:	10044454 	.word	0x10044454

00020608 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   20608:	b580      	push	{r7, lr}
   2060a:	b086      	sub	sp, #24
   2060c:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   2060e:	4b3f      	ldr	r3, [pc, #252]	; (2070c <wsfOsDispatcher+0x104>)
   20610:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   20612:	e072      	b.n	206fa <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   20614:	f7ff feee 	bl	203f4 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   20618:	693b      	ldr	r3, [r7, #16]
   2061a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   2061e:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   20620:	693b      	ldr	r3, [r7, #16]
   20622:	2200      	movs	r2, #0
   20624:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   20628:	f7ff fef8 	bl	2041c <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   2062c:	7bfb      	ldrb	r3, [r7, #15]
   2062e:	f003 0301 	and.w	r3, r3, #1
   20632:	2b00      	cmp	r3, #0
   20634:	d016      	beq.n	20664 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   20636:	e00a      	b.n	2064e <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   20638:	78bb      	ldrb	r3, [r7, #2]
   2063a:	461a      	mov	r2, r3
   2063c:	693b      	ldr	r3, [r7, #16]
   2063e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   20642:	68b9      	ldr	r1, [r7, #8]
   20644:	2000      	movs	r0, #0
   20646:	4798      	blx	r3
        WsfMsgFree(pMsg);
   20648:	68b8      	ldr	r0, [r7, #8]
   2064a:	f7fa f9f1 	bl	1aa30 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   2064e:	693b      	ldr	r3, [r7, #16]
   20650:	3330      	adds	r3, #48	; 0x30
   20652:	1cba      	adds	r2, r7, #2
   20654:	4611      	mov	r1, r2
   20656:	4618      	mov	r0, r3
   20658:	f7fa fa24 	bl	1aaa4 <WsfMsgDeq>
   2065c:	60b8      	str	r0, [r7, #8]
   2065e:	68bb      	ldr	r3, [r7, #8]
   20660:	2b00      	cmp	r3, #0
   20662:	d1e9      	bne.n	20638 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   20664:	7bfb      	ldrb	r3, [r7, #15]
   20666:	f003 0302 	and.w	r3, r3, #2
   2066a:	2b00      	cmp	r3, #0
   2066c:	d012      	beq.n	20694 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   2066e:	e00a      	b.n	20686 <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   20670:	687b      	ldr	r3, [r7, #4]
   20672:	7a1b      	ldrb	r3, [r3, #8]
   20674:	461a      	mov	r2, r3
   20676:	693b      	ldr	r3, [r7, #16]
   20678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2067c:	687a      	ldr	r2, [r7, #4]
   2067e:	320a      	adds	r2, #10
   20680:	4611      	mov	r1, r2
   20682:	2000      	movs	r0, #0
   20684:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   20686:	2000      	movs	r0, #0
   20688:	f7fa fbf8 	bl	1ae7c <WsfTimerServiceExpired>
   2068c:	6078      	str	r0, [r7, #4]
   2068e:	687b      	ldr	r3, [r7, #4]
   20690:	2b00      	cmp	r3, #0
   20692:	d1ed      	bne.n	20670 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   20694:	7bfb      	ldrb	r3, [r7, #15]
   20696:	f003 0304 	and.w	r3, r3, #4
   2069a:	2b00      	cmp	r3, #0
   2069c:	d02d      	beq.n	206fa <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   2069e:	2300      	movs	r3, #0
   206a0:	75fb      	strb	r3, [r7, #23]
   206a2:	e027      	b.n	206f4 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   206a4:	7dfb      	ldrb	r3, [r7, #23]
   206a6:	693a      	ldr	r2, [r7, #16]
   206a8:	4413      	add	r3, r2
   206aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   206ae:	2b00      	cmp	r3, #0
   206b0:	d01d      	beq.n	206ee <wsfOsDispatcher+0xe6>
   206b2:	7dfa      	ldrb	r2, [r7, #23]
   206b4:	693b      	ldr	r3, [r7, #16]
   206b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   206ba:	2b00      	cmp	r3, #0
   206bc:	d017      	beq.n	206ee <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   206be:	f7ff fe99 	bl	203f4 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   206c2:	7dfb      	ldrb	r3, [r7, #23]
   206c4:	693a      	ldr	r2, [r7, #16]
   206c6:	4413      	add	r3, r2
   206c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   206cc:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   206ce:	7dfb      	ldrb	r3, [r7, #23]
   206d0:	693a      	ldr	r2, [r7, #16]
   206d2:	4413      	add	r3, r2
   206d4:	2200      	movs	r2, #0
   206d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   206da:	f7ff fe9f 	bl	2041c <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   206de:	7dfa      	ldrb	r2, [r7, #23]
   206e0:	693b      	ldr	r3, [r7, #16]
   206e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   206e6:	78fa      	ldrb	r2, [r7, #3]
   206e8:	2100      	movs	r1, #0
   206ea:	4610      	mov	r0, r2
   206ec:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   206ee:	7dfb      	ldrb	r3, [r7, #23]
   206f0:	3301      	adds	r3, #1
   206f2:	75fb      	strb	r3, [r7, #23]
   206f4:	7dfb      	ldrb	r3, [r7, #23]
   206f6:	2b08      	cmp	r3, #8
   206f8:	d9d4      	bls.n	206a4 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   206fa:	693b      	ldr	r3, [r7, #16]
   206fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   20700:	2b00      	cmp	r3, #0
   20702:	d187      	bne.n	20614 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   20704:	bf00      	nop
   20706:	3718      	adds	r7, #24
   20708:	46bd      	mov	sp, r7
   2070a:	bd80      	pop	{r7, pc}
   2070c:	10044454 	.word	0x10044454

00020710 <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   20710:	b480      	push	{r7}
   20712:	b083      	sub	sp, #12
   20714:	af00      	add	r7, sp, #0
   20716:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   20718:	4a04      	ldr	r2, [pc, #16]	; (2072c <wsfOsSetEventObject+0x1c>)
   2071a:	687b      	ldr	r3, [r7, #4]
   2071c:	6013      	str	r3, [r2, #0]
  #endif
}
   2071e:	bf00      	nop
   20720:	370c      	adds	r7, #12
   20722:	46bd      	mov	sp, r7
   20724:	f85d 7b04 	ldr.w	r7, [sp], #4
   20728:	4770      	bx	lr
   2072a:	bf00      	nop
   2072c:	1001bd54 	.word	0x1001bd54

00020730 <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   20730:	b40f      	push	{r0, r1, r2, r3}
   20732:	b580      	push	{r7, lr}
   20734:	b0c2      	sub	sp, #264	; 0x108
   20736:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   20738:	f507 728a 	add.w	r2, r7, #276	; 0x114
   2073c:	463b      	mov	r3, r7
   2073e:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   20740:	463b      	mov	r3, r7
   20742:	1d38      	adds	r0, r7, #4
   20744:	681a      	ldr	r2, [r3, #0]
   20746:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   2074a:	f001 f8b7 	bl	218bc <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   2074e:	1d3b      	adds	r3, r7, #4
   20750:	4618      	mov	r0, r3
   20752:	f001 fbbf 	bl	21ed4 <am_util_stdio_printf>
   20756:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   2075a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   2075e:	2bff      	cmp	r3, #255	; 0xff
   20760:	d903      	bls.n	2076a <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   20762:	2183      	movs	r1, #131	; 0x83
   20764:	4806      	ldr	r0, [pc, #24]	; (20780 <WsfTrace+0x50>)
   20766:	f7ff fe31 	bl	203cc <WsfAssert>
  am_util_debug_printf("\n");
   2076a:	4806      	ldr	r0, [pc, #24]	; (20784 <WsfTrace+0x54>)
   2076c:	f001 fbb2 	bl	21ed4 <am_util_stdio_printf>
}
   20770:	bf00      	nop
   20772:	f507 7784 	add.w	r7, r7, #264	; 0x108
   20776:	46bd      	mov	sp, r7
   20778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   2077c:	b004      	add	sp, #16
   2077e:	4770      	bx	lr
   20780:	0003b694 	.word	0x0003b694
   20784:	0003b68c 	.word	0x0003b68c

00020788 <__NVIC_EnableIRQ>:
{
   20788:	b480      	push	{r7}
   2078a:	b083      	sub	sp, #12
   2078c:	af00      	add	r7, sp, #0
   2078e:	4603      	mov	r3, r0
   20790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   20792:	f997 3007 	ldrsb.w	r3, [r7, #7]
   20796:	2b00      	cmp	r3, #0
   20798:	db0b      	blt.n	207b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2079a:	4909      	ldr	r1, [pc, #36]	; (207c0 <__NVIC_EnableIRQ+0x38>)
   2079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   207a0:	095b      	lsrs	r3, r3, #5
   207a2:	79fa      	ldrb	r2, [r7, #7]
   207a4:	f002 021f 	and.w	r2, r2, #31
   207a8:	2001      	movs	r0, #1
   207aa:	fa00 f202 	lsl.w	r2, r0, r2
   207ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   207b2:	bf00      	nop
   207b4:	370c      	adds	r7, #12
   207b6:	46bd      	mov	sp, r7
   207b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   207bc:	4770      	bx	lr
   207be:	bf00      	nop
   207c0:	e000e100 	.word	0xe000e100

000207c4 <__NVIC_DisableIRQ>:
{
   207c4:	b480      	push	{r7}
   207c6:	b083      	sub	sp, #12
   207c8:	af00      	add	r7, sp, #0
   207ca:	4603      	mov	r3, r0
   207cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   207ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
   207d2:	2b00      	cmp	r3, #0
   207d4:	db10      	blt.n	207f8 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   207d6:	490b      	ldr	r1, [pc, #44]	; (20804 <__NVIC_DisableIRQ+0x40>)
   207d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   207dc:	095b      	lsrs	r3, r3, #5
   207de:	79fa      	ldrb	r2, [r7, #7]
   207e0:	f002 021f 	and.w	r2, r2, #31
   207e4:	2001      	movs	r0, #1
   207e6:	fa00 f202 	lsl.w	r2, r0, r2
   207ea:	3320      	adds	r3, #32
   207ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   207f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   207f4:	f3bf 8f6f 	isb	sy
}
   207f8:	bf00      	nop
   207fa:	370c      	adds	r7, #12
   207fc:	46bd      	mov	sp, r7
   207fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   20802:	4770      	bx	lr
   20804:	e000e100 	.word	0xe000e100

00020808 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   20808:	b580      	push	{r7, lr}
   2080a:	b082      	sub	sp, #8
   2080c:	af00      	add	r7, sp, #0
   2080e:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   20810:	687b      	ldr	r3, [r7, #4]
   20812:	2b00      	cmp	r3, #0
   20814:	d00c      	beq.n	20830 <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   20816:	4a08      	ldr	r2, [pc, #32]	; (20838 <error_check+0x30>)
   20818:	687b      	ldr	r3, [r7, #4]
   2081a:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   2081c:	4b07      	ldr	r3, [pc, #28]	; (2083c <error_check+0x34>)
   2081e:	681b      	ldr	r3, [r3, #0]
   20820:	2b00      	cmp	r3, #0
   20822:	d005      	beq.n	20830 <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   20824:	4b05      	ldr	r3, [pc, #20]	; (2083c <error_check+0x34>)
   20826:	681b      	ldr	r3, [r3, #0]
   20828:	4a03      	ldr	r2, [pc, #12]	; (20838 <error_check+0x30>)
   2082a:	6812      	ldr	r2, [r2, #0]
   2082c:	4610      	mov	r0, r2
   2082e:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   20830:	bf00      	nop
   20832:	3708      	adds	r7, #8
   20834:	46bd      	mov	sp, r7
   20836:	bd80      	pop	{r7, pc}
   20838:	1001bd6c 	.word	0x1001bd6c
   2083c:	1001bd68 	.word	0x1001bd68

00020840 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   20840:	b5b0      	push	{r4, r5, r7, lr}
   20842:	b092      	sub	sp, #72	; 0x48
   20844:	af00      	add	r7, sp, #0
   20846:	4603      	mov	r3, r0
   20848:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   2084a:	2300      	movs	r3, #0
   2084c:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   2084e:	4b6c      	ldr	r3, [pc, #432]	; (20a00 <HciDrvRadioBoot+0x1c0>)
   20850:	2200      	movs	r2, #0
   20852:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   20854:	4b6b      	ldr	r3, [pc, #428]	; (20a04 <HciDrvRadioBoot+0x1c4>)
   20856:	2200      	movs	r2, #0
   20858:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   2085a:	2301      	movs	r3, #1
   2085c:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   2085e:	e0a1      	b.n	209a4 <HciDrvRadioBoot+0x164>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   20860:	4969      	ldr	r1, [pc, #420]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   20862:	2000      	movs	r0, #0
   20864:	f015 fd2a 	bl	362bc <am_hal_ble_initialize>
   20868:	63f8      	str	r0, [r7, #60]	; 0x3c
   2086a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2086c:	2b00      	cmp	r3, #0
   2086e:	d006      	beq.n	2087e <HciDrvRadioBoot+0x3e>
   20870:	4866      	ldr	r0, [pc, #408]	; (20a0c <HciDrvRadioBoot+0x1cc>)
   20872:	f001 fb2f 	bl	21ed4 <am_util_stdio_printf>
   20876:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   20878:	f7ff ffc6 	bl	20808 <error_check>
   2087c:	e0bd      	b.n	209fa <HciDrvRadioBoot+0x1ba>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   2087e:	4b62      	ldr	r3, [pc, #392]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   20880:	681b      	ldr	r3, [r3, #0]
   20882:	2100      	movs	r1, #0
   20884:	4618      	mov	r0, r3
   20886:	f015 fe09 	bl	3649c <am_hal_ble_power_control>
   2088a:	63b8      	str	r0, [r7, #56]	; 0x38
   2088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2088e:	2b00      	cmp	r3, #0
   20890:	d006      	beq.n	208a0 <HciDrvRadioBoot+0x60>
   20892:	485f      	ldr	r0, [pc, #380]	; (20a10 <HciDrvRadioBoot+0x1d0>)
   20894:	f001 fb1e 	bl	21ed4 <am_util_stdio_printf>
   20898:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   2089a:	f7ff ffb5 	bl	20808 <error_check>
   2089e:	e0ac      	b.n	209fa <HciDrvRadioBoot+0x1ba>

        am_hal_ble_config_t sBleConfig =
   208a0:	4b5c      	ldr	r3, [pc, #368]	; (20a14 <HciDrvRadioBoot+0x1d4>)
   208a2:	f107 0408 	add.w	r4, r7, #8
   208a6:	461d      	mov	r5, r3
   208a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   208aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   208ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   208b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   208b4:	4b54      	ldr	r3, [pc, #336]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   208b6:	681b      	ldr	r3, [r3, #0]
   208b8:	f107 0208 	add.w	r2, r7, #8
   208bc:	4611      	mov	r1, r2
   208be:	4618      	mov	r0, r3
   208c0:	f015 fd64 	bl	3638c <am_hal_ble_config>
   208c4:	6378      	str	r0, [r7, #52]	; 0x34
   208c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   208c8:	2b00      	cmp	r3, #0
   208ca:	d006      	beq.n	208da <HciDrvRadioBoot+0x9a>
   208cc:	4852      	ldr	r0, [pc, #328]	; (20a18 <HciDrvRadioBoot+0x1d8>)
   208ce:	f001 fb01 	bl	21ed4 <am_util_stdio_printf>
   208d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
   208d4:	f7ff ff98 	bl	20808 <error_check>
   208d8:	e08f      	b.n	209fa <HciDrvRadioBoot+0x1ba>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   208da:	79fb      	ldrb	r3, [r7, #7]
   208dc:	2b00      	cmp	r3, #0
   208de:	d003      	beq.n	208e8 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   208e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   208e4:	f000 fba8 	bl	21038 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   208e8:	4b47      	ldr	r3, [pc, #284]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   208ea:	681b      	ldr	r3, [r3, #0]
   208ec:	4618      	mov	r0, r3
   208ee:	f016 fccb 	bl	37288 <am_hal_ble_boot>
   208f2:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   208f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   208f6:	2b00      	cmp	r3, #0
   208f8:	d059      	beq.n	209ae <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   208fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   208fc:	4a47      	ldr	r2, [pc, #284]	; (20a1c <HciDrvRadioBoot+0x1dc>)
   208fe:	4293      	cmp	r3, r2
   20900:	d12a      	bne.n	20958 <HciDrvRadioBoot+0x118>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   20902:	4b41      	ldr	r3, [pc, #260]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   20904:	681b      	ldr	r3, [r3, #0]
   20906:	2101      	movs	r1, #1
   20908:	4618      	mov	r0, r3
   2090a:	f015 fdc7 	bl	3649c <am_hal_ble_power_control>
   2090e:	6338      	str	r0, [r7, #48]	; 0x30
   20910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20912:	2b00      	cmp	r3, #0
   20914:	d006      	beq.n	20924 <HciDrvRadioBoot+0xe4>
   20916:	4842      	ldr	r0, [pc, #264]	; (20a20 <HciDrvRadioBoot+0x1e0>)
   20918:	f001 fadc 	bl	21ed4 <am_util_stdio_printf>
   2091c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2091e:	f7ff ff73 	bl	20808 <error_check>
   20922:	e06a      	b.n	209fa <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   20924:	4b38      	ldr	r3, [pc, #224]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   20926:	681b      	ldr	r3, [r3, #0]
   20928:	4618      	mov	r0, r3
   2092a:	f015 fd03 	bl	36334 <am_hal_ble_deinitialize>
   2092e:	62f8      	str	r0, [r7, #44]	; 0x2c
   20930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   20932:	2b00      	cmp	r3, #0
   20934:	d006      	beq.n	20944 <HciDrvRadioBoot+0x104>
   20936:	483b      	ldr	r0, [pc, #236]	; (20a24 <HciDrvRadioBoot+0x1e4>)
   20938:	f001 facc 	bl	21ed4 <am_util_stdio_printf>
   2093c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   2093e:	f7ff ff63 	bl	20808 <error_check>
   20942:	e05a      	b.n	209fa <HciDrvRadioBoot+0x1ba>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   20944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20946:	1c5a      	adds	r2, r3, #1
   20948:	647a      	str	r2, [r7, #68]	; 0x44
   2094a:	2b09      	cmp	r3, #9
   2094c:	d854      	bhi.n	209f8 <HciDrvRadioBoot+0x1b8>
            {
                am_util_delay_ms(1000);
   2094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20952:	f000 fb71 	bl	21038 <am_util_delay_ms>
   20956:	e025      	b.n	209a4 <HciDrvRadioBoot+0x164>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   20958:	4b2b      	ldr	r3, [pc, #172]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   2095a:	681b      	ldr	r3, [r3, #0]
   2095c:	2101      	movs	r1, #1
   2095e:	4618      	mov	r0, r3
   20960:	f015 fd9c 	bl	3649c <am_hal_ble_power_control>
   20964:	62b8      	str	r0, [r7, #40]	; 0x28
   20966:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20968:	2b00      	cmp	r3, #0
   2096a:	d006      	beq.n	2097a <HciDrvRadioBoot+0x13a>
   2096c:	482c      	ldr	r0, [pc, #176]	; (20a20 <HciDrvRadioBoot+0x1e0>)
   2096e:	f001 fab1 	bl	21ed4 <am_util_stdio_printf>
   20972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   20974:	f7ff ff48 	bl	20808 <error_check>
   20978:	e03f      	b.n	209fa <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   2097a:	4b23      	ldr	r3, [pc, #140]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   2097c:	681b      	ldr	r3, [r3, #0]
   2097e:	4618      	mov	r0, r3
   20980:	f015 fcd8 	bl	36334 <am_hal_ble_deinitialize>
   20984:	6278      	str	r0, [r7, #36]	; 0x24
   20986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20988:	2b00      	cmp	r3, #0
   2098a:	d006      	beq.n	2099a <HciDrvRadioBoot+0x15a>
   2098c:	4825      	ldr	r0, [pc, #148]	; (20a24 <HciDrvRadioBoot+0x1e4>)
   2098e:	f001 faa1 	bl	21ed4 <am_util_stdio_printf>
   20992:	6a78      	ldr	r0, [r7, #36]	; 0x24
   20994:	f7ff ff38 	bl	20808 <error_check>
   20998:	e02f      	b.n	209fa <HciDrvRadioBoot+0x1ba>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   2099a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   2099c:	f7ff ff34 	bl	20808 <error_check>
            return;
   209a0:	bf00      	nop
   209a2:	e02a      	b.n	209fa <HciDrvRadioBoot+0x1ba>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   209a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   209a6:	2b00      	cmp	r3, #0
   209a8:	f47f af5a 	bne.w	20860 <HciDrvRadioBoot+0x20>
   209ac:	e000      	b.n	209b0 <HciDrvRadioBoot+0x170>
            break;
   209ae:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   209b0:	4b15      	ldr	r3, [pc, #84]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   209b2:	681b      	ldr	r3, [r3, #0]
   209b4:	2108      	movs	r1, #8
   209b6:	4618      	mov	r0, r3
   209b8:	f016 fd3a 	bl	37430 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   209bc:	4b12      	ldr	r3, [pc, #72]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   209be:	681b      	ldr	r3, [r3, #0]
   209c0:	f240 2181 	movw	r1, #641	; 0x281
   209c4:	4618      	mov	r0, r3
   209c6:	f016 f943 	bl	36c50 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   209ca:	4b0f      	ldr	r3, [pc, #60]	; (20a08 <HciDrvRadioBoot+0x1c8>)
   209cc:	681b      	ldr	r3, [r3, #0]
   209ce:	f240 2181 	movw	r1, #641	; 0x281
   209d2:	4618      	mov	r0, r3
   209d4:	f016 f90e 	bl	36bf4 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   209d8:	200c      	movs	r0, #12
   209da:	f7ff fed5 	bl	20788 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   209de:	f44f 6302 	mov.w	r3, #2080	; 0x820
   209e2:	f44f 7282 	mov.w	r2, #260	; 0x104
   209e6:	4910      	ldr	r1, [pc, #64]	; (20a28 <HciDrvRadioBoot+0x1e8>)
   209e8:	4810      	ldr	r0, [pc, #64]	; (20a2c <HciDrvRadioBoot+0x1ec>)
   209ea:	f017 fbe9 	bl	381c0 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   209ee:	4b10      	ldr	r3, [pc, #64]	; (20a30 <HciDrvRadioBoot+0x1f0>)
   209f0:	2200      	movs	r2, #0
   209f2:	601a      	str	r2, [r3, #0]

    return;
   209f4:	bf00      	nop
   209f6:	e000      	b.n	209fa <HciDrvRadioBoot+0x1ba>
                return;
   209f8:	bf00      	nop
}
   209fa:	3748      	adds	r7, #72	; 0x48
   209fc:	46bd      	mov	sp, r7
   209fe:	bdb0      	pop	{r4, r5, r7, pc}
   20a00:	1001bd5c 	.word	0x1001bd5c
   20a04:	1001bd60 	.word	0x1001bd60
   20a08:	10044dd8 	.word	0x10044dd8
   20a0c:	0003b6d8 	.word	0x0003b6d8
   20a10:	0003b70c 	.word	0x0003b70c
   20a14:	0003b808 	.word	0x0003b808
   20a18:	0003b758 	.word	0x0003b758
   20a1c:	0800000b 	.word	0x0800000b
   20a20:	0003b790 	.word	0x0003b790
   20a24:	0003b7d8 	.word	0x0003b7d8
   20a28:	100445b8 	.word	0x100445b8
   20a2c:	10044490 	.word	0x10044490
   20a30:	1001bd64 	.word	0x1001bd64

00020a34 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   20a34:	b580      	push	{r7, lr}
   20a36:	b082      	sub	sp, #8
   20a38:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   20a3a:	481c      	ldr	r0, [pc, #112]	; (20aac <HciDrvRadioShutdown+0x78>)
   20a3c:	f7fa f9c0 	bl	1adc0 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   20a40:	200c      	movs	r0, #12
   20a42:	f7ff febf 	bl	207c4 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   20a46:	4b1a      	ldr	r3, [pc, #104]	; (20ab0 <HciDrvRadioShutdown+0x7c>)
   20a48:	681b      	ldr	r3, [r3, #0]
   20a4a:	2101      	movs	r1, #1
   20a4c:	4618      	mov	r0, r3
   20a4e:	f015 fd25 	bl	3649c <am_hal_ble_power_control>
   20a52:	6078      	str	r0, [r7, #4]
   20a54:	687b      	ldr	r3, [r7, #4]
   20a56:	2b00      	cmp	r3, #0
   20a58:	d006      	beq.n	20a68 <HciDrvRadioShutdown+0x34>
   20a5a:	4816      	ldr	r0, [pc, #88]	; (20ab4 <HciDrvRadioShutdown+0x80>)
   20a5c:	f001 fa3a 	bl	21ed4 <am_util_stdio_printf>
   20a60:	6878      	ldr	r0, [r7, #4]
   20a62:	f7ff fed1 	bl	20808 <error_check>
   20a66:	e01d      	b.n	20aa4 <HciDrvRadioShutdown+0x70>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   20a68:	bf00      	nop
   20a6a:	4b13      	ldr	r3, [pc, #76]	; (20ab8 <HciDrvRadioShutdown+0x84>)
   20a6c:	689b      	ldr	r3, [r3, #8]
   20a6e:	f3c3 3340 	ubfx	r3, r3, #13, #1
   20a72:	b2db      	uxtb	r3, r3
   20a74:	2b00      	cmp	r3, #0
   20a76:	d1f8      	bne.n	20a6a <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   20a78:	4b0d      	ldr	r3, [pc, #52]	; (20ab0 <HciDrvRadioShutdown+0x7c>)
   20a7a:	681b      	ldr	r3, [r3, #0]
   20a7c:	4618      	mov	r0, r3
   20a7e:	f015 fc59 	bl	36334 <am_hal_ble_deinitialize>
   20a82:	6038      	str	r0, [r7, #0]
   20a84:	683b      	ldr	r3, [r7, #0]
   20a86:	2b00      	cmp	r3, #0
   20a88:	d006      	beq.n	20a98 <HciDrvRadioShutdown+0x64>
   20a8a:	480c      	ldr	r0, [pc, #48]	; (20abc <HciDrvRadioShutdown+0x88>)
   20a8c:	f001 fa22 	bl	21ed4 <am_util_stdio_printf>
   20a90:	6838      	ldr	r0, [r7, #0]
   20a92:	f7ff feb9 	bl	20808 <error_check>
   20a96:	e005      	b.n	20aa4 <HciDrvRadioShutdown+0x70>

    g_ui32NumBytes   = 0;
   20a98:	4b09      	ldr	r3, [pc, #36]	; (20ac0 <HciDrvRadioShutdown+0x8c>)
   20a9a:	2200      	movs	r2, #0
   20a9c:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   20a9e:	4b09      	ldr	r3, [pc, #36]	; (20ac4 <HciDrvRadioShutdown+0x90>)
   20aa0:	2200      	movs	r2, #0
   20aa2:	601a      	str	r2, [r3, #0]
}
   20aa4:	3708      	adds	r7, #8
   20aa6:	46bd      	mov	sp, r7
   20aa8:	bd80      	pop	{r7, pc}
   20aaa:	bf00      	nop
   20aac:	100444a8 	.word	0x100444a8
   20ab0:	10044dd8 	.word	0x10044dd8
   20ab4:	0003b790 	.word	0x0003b790
   20ab8:	40021000 	.word	0x40021000
   20abc:	0003b7d8 	.word	0x0003b7d8
   20ac0:	1001bd5c 	.word	0x1001bd5c
   20ac4:	1001bd60 	.word	0x1001bd60

00020ac8 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   20ac8:	b580      	push	{r7, lr}
   20aca:	b094      	sub	sp, #80	; 0x50
   20acc:	af00      	add	r7, sp, #0
   20ace:	4603      	mov	r3, r0
   20ad0:	603a      	str	r2, [r7, #0]
   20ad2:	71fb      	strb	r3, [r7, #7]
   20ad4:	460b      	mov	r3, r1
   20ad6:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   20ad8:	4b3b      	ldr	r3, [pc, #236]	; (20bc8 <hciDrvWrite+0x100>)
   20ada:	689a      	ldr	r2, [r3, #8]
   20adc:	4b3a      	ldr	r3, [pc, #232]	; (20bc8 <hciDrvWrite+0x100>)
   20ade:	68db      	ldr	r3, [r3, #12]
   20ae0:	429a      	cmp	r2, r3
   20ae2:	d105      	bne.n	20af0 <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   20ae4:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   20ae8:	f7ff fe8e 	bl	20808 <error_check>
   20aec:	88bb      	ldrh	r3, [r7, #4]
   20aee:	e067      	b.n	20bc0 <hciDrvWrite+0xf8>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   20af0:	88bb      	ldrh	r3, [r7, #4]
   20af2:	2bff      	cmp	r3, #255	; 0xff
   20af4:	d904      	bls.n	20b00 <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   20af6:	4835      	ldr	r0, [pc, #212]	; (20bcc <hciDrvWrite+0x104>)
   20af8:	f7ff fe86 	bl	20808 <error_check>
   20afc:	88bb      	ldrh	r3, [r7, #4]
   20afe:	e05f      	b.n	20bc0 <hciDrvWrite+0xf8>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   20b00:	4b31      	ldr	r3, [pc, #196]	; (20bc8 <hciDrvWrite+0x100>)
   20b02:	695a      	ldr	r2, [r3, #20]
   20b04:	4b30      	ldr	r3, [pc, #192]	; (20bc8 <hciDrvWrite+0x100>)
   20b06:	681b      	ldr	r3, [r3, #0]
   20b08:	4413      	add	r3, r2
   20b0a:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   20b0c:	88bb      	ldrh	r3, [r7, #4]
   20b0e:	3301      	adds	r3, #1
   20b10:	461a      	mov	r2, r3
   20b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20b14:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   20b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20b18:	3304      	adds	r3, #4
   20b1a:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   20b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20b1e:	1c5a      	adds	r2, r3, #1
   20b20:	647a      	str	r2, [r7, #68]	; 0x44
   20b22:	79fa      	ldrb	r2, [r7, #7]
   20b24:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   20b26:	2300      	movs	r3, #0
   20b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   20b2a:	e00a      	b.n	20b42 <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   20b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   20b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20b30:	4413      	add	r3, r2
   20b32:	6839      	ldr	r1, [r7, #0]
   20b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   20b36:	440a      	add	r2, r1
   20b38:	7812      	ldrb	r2, [r2, #0]
   20b3a:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   20b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20b3e:	3301      	adds	r3, #1
   20b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   20b42:	88ba      	ldrh	r2, [r7, #4]
   20b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20b46:	429a      	cmp	r2, r3
   20b48:	d8f0      	bhi.n	20b2c <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   20b4a:	2201      	movs	r2, #1
   20b4c:	2100      	movs	r1, #0
   20b4e:	481e      	ldr	r0, [pc, #120]	; (20bc8 <hciDrvWrite+0x100>)
   20b50:	f017 fb42 	bl	381d8 <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20b54:	4b1e      	ldr	r3, [pc, #120]	; (20bd0 <hciDrvWrite+0x108>)
   20b56:	781b      	ldrb	r3, [r3, #0]
   20b58:	2101      	movs	r1, #1
   20b5a:	4618      	mov	r0, r3
   20b5c:	f7ff fcca 	bl	204f4 <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   20b60:	79fb      	ldrb	r3, [r7, #7]
   20b62:	2b01      	cmp	r3, #1
   20b64:	d12b      	bne.n	20bbe <hciDrvWrite+0xf6>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   20b66:	683b      	ldr	r3, [r7, #0]
   20b68:	781b      	ldrb	r3, [r3, #0]
   20b6a:	b29a      	uxth	r2, r3
   20b6c:	683b      	ldr	r3, [r7, #0]
   20b6e:	3301      	adds	r3, #1
   20b70:	781b      	ldrb	r3, [r3, #0]
   20b72:	b29b      	uxth	r3, r3
   20b74:	021b      	lsls	r3, r3, #8
   20b76:	b29b      	uxth	r3, r3
   20b78:	4413      	add	r3, r2
   20b7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   20b7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   20b82:	f640 4203 	movw	r2, #3075	; 0xc03
   20b86:	4293      	cmp	r3, r2
   20b88:	d119      	bne.n	20bbe <hciDrvWrite+0xf6>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   20b8a:	f107 030c 	add.w	r3, r7, #12
   20b8e:	4619      	mov	r1, r3
   20b90:	2001      	movs	r0, #1
   20b92:	f017 f9b7 	bl	37f04 <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   20b96:	693b      	ldr	r3, [r7, #16]
   20b98:	b2da      	uxtb	r2, r3
   20b9a:	4b0e      	ldr	r3, [pc, #56]	; (20bd4 <hciDrvWrite+0x10c>)
   20b9c:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   20b9e:	693b      	ldr	r3, [r7, #16]
   20ba0:	0a1b      	lsrs	r3, r3, #8
   20ba2:	b2da      	uxtb	r2, r3
   20ba4:	4b0b      	ldr	r3, [pc, #44]	; (20bd4 <hciDrvWrite+0x10c>)
   20ba6:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   20ba8:	693b      	ldr	r3, [r7, #16]
   20baa:	0c1b      	lsrs	r3, r3, #16
   20bac:	b2da      	uxtb	r2, r3
   20bae:	4b09      	ldr	r3, [pc, #36]	; (20bd4 <hciDrvWrite+0x10c>)
   20bb0:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   20bb2:	4a08      	ldr	r2, [pc, #32]	; (20bd4 <hciDrvWrite+0x10c>)
   20bb4:	2106      	movs	r1, #6
   20bb6:	f64f 4032 	movw	r0, #64562	; 0xfc32
   20bba:	f7f5 fcda 	bl	16572 <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   20bbe:	88bb      	ldrh	r3, [r7, #4]
}
   20bc0:	4618      	mov	r0, r3
   20bc2:	3750      	adds	r7, #80	; 0x50
   20bc4:	46bd      	mov	sp, r7
   20bc6:	bd80      	pop	{r7, pc}
   20bc8:	10044490 	.word	0x10044490
   20bcc:	09000001 	.word	0x09000001
   20bd0:	1001bd58 	.word	0x1001bd58
   20bd4:	10017f78 	.word	0x10017f78

00020bd8 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   20bd8:	b480      	push	{r7}
   20bda:	b083      	sub	sp, #12
   20bdc:	af00      	add	r7, sp, #0
   20bde:	4603      	mov	r3, r0
   20be0:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   20be2:	4a0a      	ldr	r2, [pc, #40]	; (20c0c <HciDrvHandlerInit+0x34>)
   20be4:	79fb      	ldrb	r3, [r7, #7]
   20be6:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   20be8:	4a09      	ldr	r2, [pc, #36]	; (20c10 <HciDrvHandlerInit+0x38>)
   20bea:	79fb      	ldrb	r3, [r7, #7]
   20bec:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   20bee:	4b08      	ldr	r3, [pc, #32]	; (20c10 <HciDrvHandlerInit+0x38>)
   20bf0:	2202      	movs	r2, #2
   20bf2:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   20bf4:	4a07      	ldr	r2, [pc, #28]	; (20c14 <HciDrvHandlerInit+0x3c>)
   20bf6:	79fb      	ldrb	r3, [r7, #7]
   20bf8:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   20bfa:	4b06      	ldr	r3, [pc, #24]	; (20c14 <HciDrvHandlerInit+0x3c>)
   20bfc:	2203      	movs	r2, #3
   20bfe:	731a      	strb	r2, [r3, #12]
}
   20c00:	bf00      	nop
   20c02:	370c      	adds	r7, #12
   20c04:	46bd      	mov	sp, r7
   20c06:	f85d 7b04 	ldr.w	r7, [sp], #4
   20c0a:	4770      	bx	lr
   20c0c:	1001bd58 	.word	0x1001bd58
   20c10:	100444a8 	.word	0x100444a8
   20c14:	10044ddc 	.word	0x10044ddc

00020c18 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   20c18:	b580      	push	{r7, lr}
   20c1a:	b082      	sub	sp, #8
   20c1c:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   20c1e:	4b0e      	ldr	r3, [pc, #56]	; (20c58 <HciDrvIntService+0x40>)
   20c20:	681b      	ldr	r3, [r3, #0]
   20c22:	2101      	movs	r1, #1
   20c24:	4618      	mov	r0, r3
   20c26:	f016 f805 	bl	36c34 <am_hal_ble_int_status>
   20c2a:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   20c2c:	4b0a      	ldr	r3, [pc, #40]	; (20c58 <HciDrvIntService+0x40>)
   20c2e:	681b      	ldr	r3, [r3, #0]
   20c30:	6879      	ldr	r1, [r7, #4]
   20c32:	4618      	mov	r0, r3
   20c34:	f016 f80c 	bl	36c50 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   20c38:	4b08      	ldr	r3, [pc, #32]	; (20c5c <HciDrvIntService+0x44>)
   20c3a:	681b      	ldr	r3, [r3, #0]
   20c3c:	3301      	adds	r3, #1
   20c3e:	4a07      	ldr	r2, [pc, #28]	; (20c5c <HciDrvIntService+0x44>)
   20c40:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20c42:	4b07      	ldr	r3, [pc, #28]	; (20c60 <HciDrvIntService+0x48>)
   20c44:	781b      	ldrb	r3, [r3, #0]
   20c46:	2101      	movs	r1, #1
   20c48:	4618      	mov	r0, r3
   20c4a:	f7ff fc53 	bl	204f4 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   20c4e:	bf00      	nop
   20c50:	3708      	adds	r7, #8
   20c52:	46bd      	mov	sp, r7
   20c54:	bd80      	pop	{r7, pc}
   20c56:	bf00      	nop
   20c58:	10044dd8 	.word	0x10044dd8
   20c5c:	1001bd64 	.word	0x1001bd64
   20c60:	1001bd58 	.word	0x1001bd58

00020c64 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   20c64:	b580      	push	{r7, lr}
   20c66:	b08a      	sub	sp, #40	; 0x28
   20c68:	af00      	add	r7, sp, #0
   20c6a:	4603      	mov	r3, r0
   20c6c:	6039      	str	r1, [r7, #0]
   20c6e:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   20c70:	2300      	movs	r3, #0
   20c72:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   20c74:	2300      	movs	r3, #0
   20c76:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   20c78:	2300      	movs	r3, #0
   20c7a:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   20c7c:	683b      	ldr	r3, [r7, #0]
   20c7e:	789b      	ldrb	r3, [r3, #2]
   20c80:	2b02      	cmp	r3, #2
   20c82:	d107      	bne.n	20c94 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   20c84:	f7f5 fa63 	bl	1614e <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   20c88:	f242 7110 	movw	r1, #10000	; 0x2710
   20c8c:	4889      	ldr	r0, [pc, #548]	; (20eb4 <HciDrvHandler+0x250>)
   20c8e:	f7fa f883 	bl	1ad98 <WsfTimerStartMs>
        return;
   20c92:	e10c      	b.n	20eae <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   20c94:	4b88      	ldr	r3, [pc, #544]	; (20eb8 <HciDrvHandler+0x254>)
   20c96:	681a      	ldr	r2, [r3, #0]
   20c98:	4b88      	ldr	r3, [pc, #544]	; (20ebc <HciDrvHandler+0x258>)
   20c9a:	681b      	ldr	r3, [r3, #0]
   20c9c:	429a      	cmp	r2, r3
   20c9e:	f240 80ea 	bls.w	20e76 <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   20ca2:	4b87      	ldr	r3, [pc, #540]	; (20ec0 <HciDrvHandler+0x25c>)
   20ca4:	681a      	ldr	r2, [r3, #0]
   20ca6:	4b85      	ldr	r3, [pc, #532]	; (20ebc <HciDrvHandler+0x258>)
   20ca8:	681b      	ldr	r3, [r3, #0]
   20caa:	18d0      	adds	r0, r2, r3
   20cac:	4b82      	ldr	r3, [pc, #520]	; (20eb8 <HciDrvHandler+0x254>)
   20cae:	681b      	ldr	r3, [r3, #0]
   20cb0:	b29a      	uxth	r2, r3
   20cb2:	4b82      	ldr	r3, [pc, #520]	; (20ebc <HciDrvHandler+0x258>)
   20cb4:	681b      	ldr	r3, [r3, #0]
   20cb6:	b29b      	uxth	r3, r3
   20cb8:	1ad3      	subs	r3, r2, r3
   20cba:	b29b      	uxth	r3, r3
   20cbc:	4619      	mov	r1, r3
   20cbe:	f7f7 ffe9 	bl	18c94 <hciTrSerialRxIncoming>
   20cc2:	4603      	mov	r3, r0
   20cc4:	461a      	mov	r2, r3
   20cc6:	4b7d      	ldr	r3, [pc, #500]	; (20ebc <HciDrvHandler+0x258>)
   20cc8:	681b      	ldr	r3, [r3, #0]
   20cca:	4413      	add	r3, r2
   20ccc:	4a7b      	ldr	r2, [pc, #492]	; (20ebc <HciDrvHandler+0x258>)
   20cce:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   20cd0:	4b7a      	ldr	r3, [pc, #488]	; (20ebc <HciDrvHandler+0x258>)
   20cd2:	681a      	ldr	r2, [r3, #0]
   20cd4:	4b78      	ldr	r3, [pc, #480]	; (20eb8 <HciDrvHandler+0x254>)
   20cd6:	681b      	ldr	r3, [r3, #0]
   20cd8:	429a      	cmp	r2, r3
   20cda:	d006      	beq.n	20cea <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20cdc:	4b79      	ldr	r3, [pc, #484]	; (20ec4 <HciDrvHandler+0x260>)
   20cde:	781b      	ldrb	r3, [r3, #0]
   20ce0:	2101      	movs	r1, #1
   20ce2:	4618      	mov	r0, r3
   20ce4:	f7ff fc06 	bl	204f4 <WsfSetEvent>
            return;
   20ce8:	e0e1      	b.n	20eae <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   20cea:	4b73      	ldr	r3, [pc, #460]	; (20eb8 <HciDrvHandler+0x254>)
   20cec:	2200      	movs	r2, #0
   20cee:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   20cf0:	4b72      	ldr	r3, [pc, #456]	; (20ebc <HciDrvHandler+0x258>)
   20cf2:	2200      	movs	r2, #0
   20cf4:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   20cf6:	e0be      	b.n	20e76 <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   20cf8:	4b73      	ldr	r3, [pc, #460]	; (20ec8 <HciDrvHandler+0x264>)
   20cfa:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   20cfe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   20d02:	b2db      	uxtb	r3, r3
   20d04:	2b00      	cmp	r3, #0
   20d06:	d07e      	beq.n	20e06 <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   20d08:	4b70      	ldr	r3, [pc, #448]	; (20ecc <HciDrvHandler+0x268>)
   20d0a:	681b      	ldr	r3, [r3, #0]
   20d0c:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   20d0e:	4869      	ldr	r0, [pc, #420]	; (20eb4 <HciDrvHandler+0x250>)
   20d10:	f7fa f856 	bl	1adc0 <WsfTimerStop>
   20d14:	f242 7110 	movw	r1, #10000	; 0x2710
   20d18:	4866      	ldr	r0, [pc, #408]	; (20eb4 <HciDrvHandler+0x250>)
   20d1a:	f7fa f83d 	bl	1ad98 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   20d1e:	4b66      	ldr	r3, [pc, #408]	; (20eb8 <HciDrvHandler+0x254>)
   20d20:	2200      	movs	r2, #0
   20d22:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   20d24:	4b6a      	ldr	r3, [pc, #424]	; (20ed0 <HciDrvHandler+0x26c>)
   20d26:	681b      	ldr	r3, [r3, #0]
   20d28:	4a63      	ldr	r2, [pc, #396]	; (20eb8 <HciDrvHandler+0x254>)
   20d2a:	496a      	ldr	r1, [pc, #424]	; (20ed4 <HciDrvHandler+0x270>)
   20d2c:	4618      	mov	r0, r3
   20d2e:	f015 fd3d 	bl	367ac <am_hal_ble_blocking_hci_read>
   20d32:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   20d34:	4b60      	ldr	r3, [pc, #384]	; (20eb8 <HciDrvHandler+0x254>)
   20d36:	681b      	ldr	r3, [r3, #0]
   20d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   20d3c:	d908      	bls.n	20d50 <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   20d3e:	4b66      	ldr	r3, [pc, #408]	; (20ed8 <HciDrvHandler+0x274>)
   20d40:	60bb      	str	r3, [r7, #8]
   20d42:	4866      	ldr	r0, [pc, #408]	; (20edc <HciDrvHandler+0x278>)
   20d44:	f001 f8c6 	bl	21ed4 <am_util_stdio_printf>
   20d48:	68b8      	ldr	r0, [r7, #8]
   20d4a:	f7ff fd5d 	bl	20808 <error_check>
   20d4e:	e0ae      	b.n	20eae <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   20d50:	693b      	ldr	r3, [r7, #16]
   20d52:	2b00      	cmp	r3, #0
   20d54:	d13d      	bne.n	20dd2 <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   20d56:	2300      	movs	r3, #0
   20d58:	61bb      	str	r3, [r7, #24]
   20d5a:	e012      	b.n	20d82 <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   20d5c:	4b5a      	ldr	r3, [pc, #360]	; (20ec8 <HciDrvHandler+0x264>)
   20d5e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   20d62:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   20d66:	b2db      	uxtb	r3, r3
   20d68:	2b00      	cmp	r3, #0
   20d6a:	d00e      	beq.n	20d8a <HciDrvHandler+0x126>
   20d6c:	4b57      	ldr	r3, [pc, #348]	; (20ecc <HciDrvHandler+0x268>)
   20d6e:	681a      	ldr	r2, [r3, #0]
   20d70:	68fb      	ldr	r3, [r7, #12]
   20d72:	429a      	cmp	r2, r3
   20d74:	d109      	bne.n	20d8a <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   20d76:	2001      	movs	r0, #1
   20d78:	f000 f97c 	bl	21074 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   20d7c:	69bb      	ldr	r3, [r7, #24]
   20d7e:	3301      	adds	r3, #1
   20d80:	61bb      	str	r3, [r7, #24]
   20d82:	69bb      	ldr	r3, [r7, #24]
   20d84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   20d88:	d3e8      	bcc.n	20d5c <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   20d8a:	4b4d      	ldr	r3, [pc, #308]	; (20ec0 <HciDrvHandler+0x25c>)
   20d8c:	681a      	ldr	r2, [r3, #0]
   20d8e:	4b4a      	ldr	r3, [pc, #296]	; (20eb8 <HciDrvHandler+0x254>)
   20d90:	681b      	ldr	r3, [r3, #0]
   20d92:	b29b      	uxth	r3, r3
   20d94:	4619      	mov	r1, r3
   20d96:	4610      	mov	r0, r2
   20d98:	f7f7 ff7c 	bl	18c94 <hciTrSerialRxIncoming>
   20d9c:	4603      	mov	r3, r0
   20d9e:	461a      	mov	r2, r3
   20da0:	4b46      	ldr	r3, [pc, #280]	; (20ebc <HciDrvHandler+0x258>)
   20da2:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   20da4:	4b45      	ldr	r3, [pc, #276]	; (20ebc <HciDrvHandler+0x258>)
   20da6:	681a      	ldr	r2, [r3, #0]
   20da8:	4b43      	ldr	r3, [pc, #268]	; (20eb8 <HciDrvHandler+0x254>)
   20daa:	681b      	ldr	r3, [r3, #0]
   20dac:	429a      	cmp	r2, r3
   20dae:	d006      	beq.n	20dbe <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20db0:	4b44      	ldr	r3, [pc, #272]	; (20ec4 <HciDrvHandler+0x260>)
   20db2:	781b      	ldrb	r3, [r3, #0]
   20db4:	2101      	movs	r1, #1
   20db6:	4618      	mov	r0, r3
   20db8:	f7ff fb9c 	bl	204f4 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   20dbc:	e065      	b.n	20e8a <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   20dbe:	4b3e      	ldr	r3, [pc, #248]	; (20eb8 <HciDrvHandler+0x254>)
   20dc0:	2200      	movs	r2, #0
   20dc2:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   20dc4:	4b3d      	ldr	r3, [pc, #244]	; (20ebc <HciDrvHandler+0x258>)
   20dc6:	2200      	movs	r2, #0
   20dc8:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   20dca:	69fb      	ldr	r3, [r7, #28]
   20dcc:	3301      	adds	r3, #1
   20dce:	61fb      	str	r3, [r7, #28]
   20dd0:	e00f      	b.n	20df2 <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   20dd2:	693b      	ldr	r3, [r7, #16]
   20dd4:	2b00      	cmp	r3, #0
   20dd6:	d00c      	beq.n	20df2 <HciDrvHandler+0x18e>
   20dd8:	6938      	ldr	r0, [r7, #16]
   20dda:	f7ff fd15 	bl	20808 <error_check>
   20dde:	f7ff fe29 	bl	20a34 <HciDrvRadioShutdown>
   20de2:	2000      	movs	r0, #0
   20de4:	f7ff fd2c 	bl	20840 <HciDrvRadioBoot>
   20de8:	f000 f87e 	bl	20ee8 <HciDrvEmptyWriteQueue>
   20dec:	f7ef faba 	bl	10364 <DmDevReset>
   20df0:	e05d      	b.n	20eae <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   20df2:	69fb      	ldr	r3, [r7, #28]
   20df4:	2b03      	cmp	r3, #3
   20df6:	d93e      	bls.n	20e76 <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20df8:	4b32      	ldr	r3, [pc, #200]	; (20ec4 <HciDrvHandler+0x260>)
   20dfa:	781b      	ldrb	r3, [r3, #0]
   20dfc:	2101      	movs	r1, #1
   20dfe:	4618      	mov	r0, r3
   20e00:	f7ff fb78 	bl	204f4 <WsfSetEvent>

                break;
   20e04:	e041      	b.n	20e8a <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   20e06:	4b36      	ldr	r3, [pc, #216]	; (20ee0 <HciDrvHandler+0x27c>)
   20e08:	689b      	ldr	r3, [r3, #8]
   20e0a:	2b00      	cmp	r3, #0
   20e0c:	d03c      	beq.n	20e88 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   20e0e:	4b34      	ldr	r3, [pc, #208]	; (20ee0 <HciDrvHandler+0x27c>)
   20e10:	695a      	ldr	r2, [r3, #20]
   20e12:	4b33      	ldr	r3, [pc, #204]	; (20ee0 <HciDrvHandler+0x27c>)
   20e14:	685b      	ldr	r3, [r3, #4]
   20e16:	4413      	add	r3, r2
   20e18:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   20e1a:	4b2d      	ldr	r3, [pc, #180]	; (20ed0 <HciDrvHandler+0x26c>)
   20e1c:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   20e1e:	697b      	ldr	r3, [r7, #20]
   20e20:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   20e22:	697b      	ldr	r3, [r7, #20]
   20e24:	681b      	ldr	r3, [r3, #0]
   20e26:	2100      	movs	r1, #0
   20e28:	f015 fc90 	bl	3674c <am_hal_ble_blocking_hci_write>
   20e2c:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   20e2e:	693b      	ldr	r3, [r7, #16]
   20e30:	2b00      	cmp	r3, #0
   20e32:	d111      	bne.n	20e58 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   20e34:	481f      	ldr	r0, [pc, #124]	; (20eb4 <HciDrvHandler+0x250>)
   20e36:	f7f9 ffc3 	bl	1adc0 <WsfTimerStop>
   20e3a:	f242 7110 	movw	r1, #10000	; 0x2710
   20e3e:	481d      	ldr	r0, [pc, #116]	; (20eb4 <HciDrvHandler+0x250>)
   20e40:	f7f9 ffaa 	bl	1ad98 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   20e44:	2201      	movs	r2, #1
   20e46:	2100      	movs	r1, #0
   20e48:	4825      	ldr	r0, [pc, #148]	; (20ee0 <HciDrvHandler+0x27c>)
   20e4a:	f017 f9fd 	bl	38248 <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   20e4e:	2300      	movs	r3, #0
   20e50:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   20e52:	2300      	movs	r3, #0
   20e54:	623b      	str	r3, [r7, #32]
   20e56:	e00e      	b.n	20e76 <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   20e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e5a:	3301      	adds	r3, #1
   20e5c:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   20e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e60:	f242 7210 	movw	r2, #10000	; 0x2710
   20e64:	4293      	cmp	r3, r2
   20e66:	d906      	bls.n	20e76 <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   20e68:	4b16      	ldr	r3, [pc, #88]	; (20ec4 <HciDrvHandler+0x260>)
   20e6a:	781b      	ldrb	r3, [r3, #0]
   20e6c:	2101      	movs	r1, #1
   20e6e:	4618      	mov	r0, r3
   20e70:	f7ff fb40 	bl	204f4 <WsfSetEvent>
                        break;
   20e74:	e009      	b.n	20e8a <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   20e76:	6a3b      	ldr	r3, [r7, #32]
   20e78:	1c5a      	adds	r2, r3, #1
   20e7a:	623a      	str	r2, [r7, #32]
   20e7c:	f242 720f 	movw	r2, #9999	; 0x270f
   20e80:	4293      	cmp	r3, r2
   20e82:	f67f af39 	bls.w	20cf8 <HciDrvHandler+0x94>
   20e86:	e000      	b.n	20e8a <HciDrvHandler+0x226>
                break;
   20e88:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   20e8a:	6a3b      	ldr	r3, [r7, #32]
   20e8c:	f242 7210 	movw	r2, #10000	; 0x2710
   20e90:	4293      	cmp	r3, r2
   20e92:	d10c      	bne.n	20eae <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   20e94:	4813      	ldr	r0, [pc, #76]	; (20ee4 <HciDrvHandler+0x280>)
   20e96:	f7ff fcb7 	bl	20808 <error_check>
   20e9a:	f7ff fdcb 	bl	20a34 <HciDrvRadioShutdown>
   20e9e:	2000      	movs	r0, #0
   20ea0:	f7ff fcce 	bl	20840 <HciDrvRadioBoot>
   20ea4:	f000 f820 	bl	20ee8 <HciDrvEmptyWriteQueue>
   20ea8:	f7ef fa5c 	bl	10364 <DmDevReset>
   20eac:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   20eae:	3728      	adds	r7, #40	; 0x28
   20eb0:	46bd      	mov	sp, r7
   20eb2:	bd80      	pop	{r7, pc}
   20eb4:	100444a8 	.word	0x100444a8
   20eb8:	1001bd5c 	.word	0x1001bd5c
   20ebc:	1001bd60 	.word	0x1001bd60
   20ec0:	10017f80 	.word	0x10017f80
   20ec4:	1001bd58 	.word	0x1001bd58
   20ec8:	5000c000 	.word	0x5000c000
   20ecc:	1001bd64 	.word	0x1001bd64
   20ed0:	10044dd8 	.word	0x10044dd8
   20ed4:	100444b8 	.word	0x100444b8
   20ed8:	09000002 	.word	0x09000002
   20edc:	0003b824 	.word	0x0003b824
   20ee0:	10044490 	.word	0x10044490
   20ee4:	09000006 	.word	0x09000006

00020ee8 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   20ee8:	b580      	push	{r7, lr}
   20eea:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   20eec:	f44f 6302 	mov.w	r3, #2080	; 0x820
   20ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
   20ef4:	4902      	ldr	r1, [pc, #8]	; (20f00 <HciDrvEmptyWriteQueue+0x18>)
   20ef6:	4803      	ldr	r0, [pc, #12]	; (20f04 <HciDrvEmptyWriteQueue+0x1c>)
   20ef8:	f017 f962 	bl	381c0 <am_hal_queue_init>
}
   20efc:	bf00      	nop
   20efe:	bd80      	pop	{r7, pc}
   20f00:	100445b8 	.word	0x100445b8
   20f04:	10044490 	.word	0x10044490

00020f08 <am_devices_button_init>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_init(am_devices_button_t *psButton)
{
   20f08:	b580      	push	{r7, lr}
   20f0a:	b082      	sub	sp, #8
   20f0c:	af00      	add	r7, sp, #0
   20f0e:	6078      	str	r0, [r7, #4]
    //
    // Disable the pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   20f10:	687b      	ldr	r3, [r7, #4]
   20f12:	681a      	ldr	r2, [r3, #0]
   20f14:	4b08      	ldr	r3, [pc, #32]	; (20f38 <am_devices_button_init+0x30>)
   20f16:	6819      	ldr	r1, [r3, #0]
   20f18:	4610      	mov	r0, r2
   20f1a:	f016 fdad 	bl	37a78 <am_hal_gpio_pinconfig>


    //
    // Initialize the state variables.
    //
    psButton->ui32Count = 0;
   20f1e:	687b      	ldr	r3, [r7, #4]
   20f20:	2200      	movs	r2, #0
   20f22:	609a      	str	r2, [r3, #8]
    psButton->bPressed = false;
   20f24:	687b      	ldr	r3, [r7, #4]
   20f26:	2200      	movs	r2, #0
   20f28:	731a      	strb	r2, [r3, #12]
    psButton->bChanged = false;
   20f2a:	687b      	ldr	r3, [r7, #4]
   20f2c:	2200      	movs	r2, #0
   20f2e:	735a      	strb	r2, [r3, #13]
}
   20f30:	bf00      	nop
   20f32:	3708      	adds	r7, #8
   20f34:	46bd      	mov	sp, r7
   20f36:	bd80      	pop	{r7, pc}
   20f38:	00044298 	.word	0x00044298

00020f3c <am_devices_button_array_init>:
//
//*****************************************************************************
void
am_devices_button_array_init(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   20f3c:	b580      	push	{r7, lr}
   20f3e:	b084      	sub	sp, #16
   20f40:	af00      	add	r7, sp, #0
   20f42:	6078      	str	r0, [r7, #4]
   20f44:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Loop through the list of buttons, configuring each one individually.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   20f46:	2300      	movs	r3, #0
   20f48:	60fb      	str	r3, [r7, #12]
   20f4a:	e009      	b.n	20f60 <am_devices_button_array_init+0x24>
    {
        am_devices_button_init(psButtons + i);
   20f4c:	68fb      	ldr	r3, [r7, #12]
   20f4e:	011b      	lsls	r3, r3, #4
   20f50:	687a      	ldr	r2, [r7, #4]
   20f52:	4413      	add	r3, r2
   20f54:	4618      	mov	r0, r3
   20f56:	f7ff ffd7 	bl	20f08 <am_devices_button_init>
    for ( i = 0; i < ui32NumButtons; i++ )
   20f5a:	68fb      	ldr	r3, [r7, #12]
   20f5c:	3301      	adds	r3, #1
   20f5e:	60fb      	str	r3, [r7, #12]
   20f60:	68fa      	ldr	r2, [r7, #12]
   20f62:	683b      	ldr	r3, [r7, #0]
   20f64:	429a      	cmp	r2, r3
   20f66:	d3f1      	bcc.n	20f4c <am_devices_button_array_init+0x10>
    }
}
   20f68:	bf00      	nop
   20f6a:	3710      	adds	r7, #16
   20f6c:	46bd      	mov	sp, r7
   20f6e:	bd80      	pop	{r7, pc}

00020f70 <am_devices_button_tick>:
//! @return None.
//
//*****************************************************************************
void
am_devices_button_tick(am_devices_button_t *psButton)
{
   20f70:	b580      	push	{r7, lr}
   20f72:	b084      	sub	sp, #16
   20f74:	af00      	add	r7, sp, #0
   20f76:	6078      	str	r0, [r7, #4]

    //
    // Enable the button pin.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_INPUT);
   20f78:	687b      	ldr	r3, [r7, #4]
   20f7a:	681a      	ldr	r2, [r3, #0]
   20f7c:	4b1f      	ldr	r3, [pc, #124]	; (20ffc <am_devices_button_tick+0x8c>)
   20f7e:	6819      	ldr	r1, [r3, #0]
   20f80:	4610      	mov	r0, r2
   20f82:	f016 fd79 	bl	37a78 <am_hal_gpio_pinconfig>
    //
    // Read the pin state. If the pin is in its normal (unpressed) state, set
    // its "state" counter to zero.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_state_read(psButton->ui32GPIONumber, AM_HAL_GPIO_INPUT_READ, &ui32PinState);
   20f86:	687b      	ldr	r3, [r7, #4]
   20f88:	681b      	ldr	r3, [r3, #0]
   20f8a:	f107 0208 	add.w	r2, r7, #8
   20f8e:	2100      	movs	r1, #0
   20f90:	4618      	mov	r0, r3
   20f92:	f016 fead 	bl	37cf0 <am_hal_gpio_state_read>
#endif // AM_APOLLO3_GPIO

    //
    // Check to see if the button is "pressed" according to our GPIO reading.
    //
    bRawButtonPressed = (ui32PinState != psButton->ui32Polarity);
   20f96:	687b      	ldr	r3, [r7, #4]
   20f98:	685a      	ldr	r2, [r3, #4]
   20f9a:	68bb      	ldr	r3, [r7, #8]
   20f9c:	429a      	cmp	r2, r3
   20f9e:	bf14      	ite	ne
   20fa0:	2301      	movne	r3, #1
   20fa2:	2300      	moveq	r3, #0
   20fa4:	73fb      	strb	r3, [r7, #15]

    //
    // Is this button state different from the last saved state?
    //
    if ( bRawButtonPressed != psButton->bPressed )
   20fa6:	687b      	ldr	r3, [r7, #4]
   20fa8:	7b1b      	ldrb	r3, [r3, #12]
   20faa:	7bfa      	ldrb	r2, [r7, #15]
   20fac:	429a      	cmp	r2, r3
   20fae:	d005      	beq.n	20fbc <am_devices_button_tick+0x4c>
    {
        //
        // If so, increase the debounce count.
        //
        psButton->ui32Count++;
   20fb0:	687b      	ldr	r3, [r7, #4]
   20fb2:	689b      	ldr	r3, [r3, #8]
   20fb4:	1c5a      	adds	r2, r3, #1
   20fb6:	687b      	ldr	r3, [r7, #4]
   20fb8:	609a      	str	r2, [r3, #8]
   20fba:	e002      	b.n	20fc2 <am_devices_button_tick+0x52>
    else
    {
        //
        // Otherwise, set the count back to zero.
        //
        psButton->ui32Count = 0;
   20fbc:	687b      	ldr	r3, [r7, #4]
   20fbe:	2200      	movs	r2, #0
   20fc0:	609a      	str	r2, [r3, #8]

    //
    // If we hit the button debounce delay, record a button press to the
    // structure, and reset the count.
    //
    if ( psButton->ui32Count >= AM_DEVICES_BUTTON_DEBOUNCE_DELAY )
   20fc2:	687b      	ldr	r3, [r7, #4]
   20fc4:	689b      	ldr	r3, [r3, #8]
   20fc6:	2b03      	cmp	r3, #3
   20fc8:	d909      	bls.n	20fde <am_devices_button_tick+0x6e>
    {
        psButton->bPressed = bRawButtonPressed;
   20fca:	687b      	ldr	r3, [r7, #4]
   20fcc:	7bfa      	ldrb	r2, [r7, #15]
   20fce:	731a      	strb	r2, [r3, #12]
        psButton->bChanged = true;
   20fd0:	687b      	ldr	r3, [r7, #4]
   20fd2:	2201      	movs	r2, #1
   20fd4:	735a      	strb	r2, [r3, #13]
        psButton->ui32Count = 0;
   20fd6:	687b      	ldr	r3, [r7, #4]
   20fd8:	2200      	movs	r2, #0
   20fda:	609a      	str	r2, [r3, #8]
   20fdc:	e002      	b.n	20fe4 <am_devices_button_tick+0x74>
    {
        //
        // If we didn't just record a press/release event, update the structure
        // to say that the current state isn't new.
        //
        psButton->bChanged = false;
   20fde:	687b      	ldr	r3, [r7, #4]
   20fe0:	2200      	movs	r2, #0
   20fe2:	735a      	strb	r2, [r3, #13]

    //
    // Disable the button pin to save power.
    //
#if AM_APOLLO3_GPIO
    am_hal_gpio_pinconfig(psButton->ui32GPIONumber, g_AM_HAL_GPIO_DISABLE);
   20fe4:	687b      	ldr	r3, [r7, #4]
   20fe6:	681a      	ldr	r2, [r3, #0]
   20fe8:	4b05      	ldr	r3, [pc, #20]	; (21000 <am_devices_button_tick+0x90>)
   20fea:	6819      	ldr	r1, [r3, #0]
   20fec:	4610      	mov	r0, r2
   20fee:	f016 fd43 	bl	37a78 <am_hal_gpio_pinconfig>
#else // AM_APOLLO3_GPIO
    am_hal_gpio_pin_config(psButton->ui32GPIONumber, AM_HAL_PIN_DISABLE);
#endif // AM_APOLLO3_GPIO
}
   20ff2:	bf00      	nop
   20ff4:	3710      	adds	r7, #16
   20ff6:	46bd      	mov	sp, r7
   20ff8:	bd80      	pop	{r7, pc}
   20ffa:	bf00      	nop
   20ffc:	00044164 	.word	0x00044164
   21000:	00044298 	.word	0x00044298

00021004 <am_devices_button_array_tick>:
//
//*****************************************************************************
void
am_devices_button_array_tick(am_devices_button_t *psButtons,
                             uint32_t ui32NumButtons)
{
   21004:	b580      	push	{r7, lr}
   21006:	b084      	sub	sp, #16
   21008:	af00      	add	r7, sp, #0
   2100a:	6078      	str	r0, [r7, #4]
   2100c:	6039      	str	r1, [r7, #0]
    uint32_t i;

    //
    // Run the "tick" function for each button in the list.
    //
    for ( i = 0; i < ui32NumButtons; i++ )
   2100e:	2300      	movs	r3, #0
   21010:	60fb      	str	r3, [r7, #12]
   21012:	e009      	b.n	21028 <am_devices_button_array_tick+0x24>
    {
        am_devices_button_tick(psButtons + i);
   21014:	68fb      	ldr	r3, [r7, #12]
   21016:	011b      	lsls	r3, r3, #4
   21018:	687a      	ldr	r2, [r7, #4]
   2101a:	4413      	add	r3, r2
   2101c:	4618      	mov	r0, r3
   2101e:	f7ff ffa7 	bl	20f70 <am_devices_button_tick>
    for ( i = 0; i < ui32NumButtons; i++ )
   21022:	68fb      	ldr	r3, [r7, #12]
   21024:	3301      	adds	r3, #1
   21026:	60fb      	str	r3, [r7, #12]
   21028:	68fa      	ldr	r2, [r7, #12]
   2102a:	683b      	ldr	r3, [r7, #0]
   2102c:	429a      	cmp	r2, r3
   2102e:	d3f1      	bcc.n	21014 <am_devices_button_array_tick+0x10>
    }
}
   21030:	bf00      	nop
   21032:	3710      	adds	r7, #16
   21034:	46bd      	mov	sp, r7
   21036:	bd80      	pop	{r7, pc}

00021038 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   21038:	b580      	push	{r7, lr}
   2103a:	b088      	sub	sp, #32
   2103c:	af00      	add	r7, sp, #0
   2103e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   21040:	f107 030c 	add.w	r3, r7, #12
   21044:	4618      	mov	r0, r3
   21046:	f016 fc65 	bl	37914 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   2104a:	68fb      	ldr	r3, [r7, #12]
   2104c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   2104e:	69fb      	ldr	r3, [r7, #28]
   21050:	4a07      	ldr	r2, [pc, #28]	; (21070 <am_util_delay_ms+0x38>)
   21052:	fba2 2303 	umull	r2, r3, r2, r3
   21056:	099b      	lsrs	r3, r3, #6
   21058:	687a      	ldr	r2, [r7, #4]
   2105a:	fb02 f303 	mul.w	r3, r2, r3
   2105e:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   21060:	69b8      	ldr	r0, [r7, #24]
   21062:	f016 fcb5 	bl	379d0 <am_hal_flash_delay>
}
   21066:	bf00      	nop
   21068:	3720      	adds	r7, #32
   2106a:	46bd      	mov	sp, r7
   2106c:	bd80      	pop	{r7, pc}
   2106e:	bf00      	nop
   21070:	057619f1 	.word	0x057619f1

00021074 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   21074:	b580      	push	{r7, lr}
   21076:	b088      	sub	sp, #32
   21078:	af00      	add	r7, sp, #0
   2107a:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   2107c:	f107 030c 	add.w	r3, r7, #12
   21080:	4618      	mov	r0, r3
   21082:	f016 fc47 	bl	37914 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   21086:	68fb      	ldr	r3, [r7, #12]
   21088:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   2108a:	69fb      	ldr	r3, [r7, #28]
   2108c:	4a07      	ldr	r2, [pc, #28]	; (210ac <am_util_delay_us+0x38>)
   2108e:	fba2 2303 	umull	r2, r3, r2, r3
   21092:	0c9b      	lsrs	r3, r3, #18
   21094:	687a      	ldr	r2, [r7, #4]
   21096:	fb02 f303 	mul.w	r3, r2, r3
   2109a:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   2109c:	69b8      	ldr	r0, [r7, #24]
   2109e:	f016 fc97 	bl	379d0 <am_hal_flash_delay>
}
   210a2:	bf00      	nop
   210a4:	3720      	adds	r7, #32
   210a6:	46bd      	mov	sp, r7
   210a8:	bd80      	pop	{r7, pc}
   210aa:	bf00      	nop
   210ac:	165e9f81 	.word	0x165e9f81

000210b0 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   210b0:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   210b2:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   210b6:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   210b8:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   210bc:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   210c0:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   210c4:	f000 f80a 	bl	210dc <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   210c8:	bd01      	pop	{r0, pc}
}
   210ca:	bf00      	nop
   210cc:	4618      	mov	r0, r3

000210ce <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   210ce:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   210d0:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   210d2:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   210d4:	4770      	bx	lr
}
   210d6:	bf00      	nop
   210d8:	4618      	mov	r0, r3
	...

000210dc <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   210dc:	b580      	push	{r7, lr}
   210de:	b096      	sub	sp, #88	; 0x58
   210e0:	af00      	add	r7, sp, #0
   210e2:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   210e4:	f107 030c 	add.w	r3, r7, #12
   210e8:	2200      	movs	r2, #0
   210ea:	601a      	str	r2, [r3, #0]
   210ec:	605a      	str	r2, [r3, #4]
   210ee:	609a      	str	r2, [r3, #8]
   210f0:	60da      	str	r2, [r3, #12]
   210f2:	611a      	str	r2, [r3, #16]
   210f4:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   210f6:	2300      	movs	r3, #0
   210f8:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   210fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   210fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   210fe:	4b2e      	ldr	r3, [pc, #184]	; (211b8 <am_util_faultisr_collect_data+0xdc>)
   21100:	681b      	ldr	r3, [r3, #0]
   21102:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   21104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21106:	b2db      	uxtb	r3, r3
   21108:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   2110c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2110e:	0a1b      	lsrs	r3, r3, #8
   21110:	b2db      	uxtb	r3, r3
   21112:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   21116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21118:	0c1b      	lsrs	r3, r3, #16
   2111a:	b29b      	uxth	r3, r3
   2111c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   21120:	4b26      	ldr	r3, [pc, #152]	; (211bc <am_util_faultisr_collect_data+0xe0>)
   21122:	681b      	ldr	r3, [r3, #0]
   21124:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   21126:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   2112a:	b2db      	uxtb	r3, r3
   2112c:	f003 0302 	and.w	r3, r3, #2
   21130:	2b00      	cmp	r3, #0
   21132:	d005      	beq.n	21140 <am_util_faultisr_collect_data+0x64>
   21134:	6879      	ldr	r1, [r7, #4]
   21136:	2006      	movs	r0, #6
   21138:	f7ff ffc9 	bl	210ce <getStackedReg>
   2113c:	4603      	mov	r3, r0
   2113e:	e001      	b.n	21144 <am_util_faultisr_collect_data+0x68>
   21140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21144:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   21146:	6879      	ldr	r1, [r7, #4]
   21148:	2000      	movs	r0, #0
   2114a:	f7ff ffc0 	bl	210ce <getStackedReg>
   2114e:	4603      	mov	r3, r0
   21150:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   21152:	6879      	ldr	r1, [r7, #4]
   21154:	2001      	movs	r0, #1
   21156:	f7ff ffba 	bl	210ce <getStackedReg>
   2115a:	4603      	mov	r3, r0
   2115c:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   2115e:	6879      	ldr	r1, [r7, #4]
   21160:	2002      	movs	r0, #2
   21162:	f7ff ffb4 	bl	210ce <getStackedReg>
   21166:	4603      	mov	r3, r0
   21168:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   2116a:	6879      	ldr	r1, [r7, #4]
   2116c:	2003      	movs	r0, #3
   2116e:	f7ff ffae 	bl	210ce <getStackedReg>
   21172:	4603      	mov	r3, r0
   21174:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   21176:	6879      	ldr	r1, [r7, #4]
   21178:	2004      	movs	r0, #4
   2117a:	f7ff ffa8 	bl	210ce <getStackedReg>
   2117e:	4603      	mov	r3, r0
   21180:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   21182:	6879      	ldr	r1, [r7, #4]
   21184:	2005      	movs	r0, #5
   21186:	f7ff ffa2 	bl	210ce <getStackedReg>
   2118a:	4603      	mov	r3, r0
   2118c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   2118e:	6879      	ldr	r1, [r7, #4]
   21190:	2006      	movs	r0, #6
   21192:	f7ff ff9c 	bl	210ce <getStackedReg>
   21196:	4603      	mov	r3, r0
   21198:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   2119a:	6879      	ldr	r1, [r7, #4]
   2119c:	2007      	movs	r0, #7
   2119e:	f7ff ff96 	bl	210ce <getStackedReg>
   211a2:	4603      	mov	r3, r0
   211a4:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   211a6:	f107 030c 	add.w	r3, r7, #12
   211aa:	4619      	mov	r1, r3
   211ac:	2002      	movs	r0, #2
   211ae:	f016 fea9 	bl	37f04 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   211b2:	2300      	movs	r3, #0
   211b4:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   211b6:	e7fe      	b.n	211b6 <am_util_faultisr_collect_data+0xda>
   211b8:	e000ed28 	.word	0xe000ed28
   211bc:	e000ed38 	.word	0xe000ed38

000211c0 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   211c0:	b480      	push	{r7}
   211c2:	b083      	sub	sp, #12
   211c4:	af00      	add	r7, sp, #0
   211c6:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   211c8:	4a04      	ldr	r2, [pc, #16]	; (211dc <am_util_stdio_printf_init+0x1c>)
   211ca:	687b      	ldr	r3, [r7, #4]
   211cc:	6013      	str	r3, [r2, #0]
}
   211ce:	bf00      	nop
   211d0:	370c      	adds	r7, #12
   211d2:	46bd      	mov	sp, r7
   211d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   211d8:	4770      	bx	lr
   211da:	bf00      	nop
   211dc:	10044dec 	.word	0x10044dec

000211e0 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   211e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   211e4:	b096      	sub	sp, #88	; 0x58
   211e6:	af00      	add	r7, sp, #0
   211e8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   211ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   211f0:	0025      	movs	r5, r4
   211f2:	2600      	movs	r6, #0
   211f4:	ea55 0306 	orrs.w	r3, r5, r6
   211f8:	f000 80a0 	beq.w	2133c <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   211fc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   21200:	0862      	lsrs	r2, r4, #1
   21202:	ea4f 0133 	mov.w	r1, r3, rrx
   21206:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   2120a:	ea4f 0893 	mov.w	r8, r3, lsr #2
   2120e:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
   21212:	ea4f 0994 	mov.w	r9, r4, lsr #2
   21216:	eb11 0308 	adds.w	r3, r1, r8
   2121a:	eb42 0409 	adc.w	r4, r2, r9
   2121e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   21222:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   21226:	ea4f 1a13 	mov.w	sl, r3, lsr #4
   2122a:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
   2122e:	ea4f 1b14 	mov.w	fp, r4, lsr #4
   21232:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   21236:	eb13 030a 	adds.w	r3, r3, sl
   2123a:	eb44 040b 	adc.w	r4, r4, fp
   2123e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   21242:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   21246:	0a1a      	lsrs	r2, r3, #8
   21248:	62ba      	str	r2, [r7, #40]	; 0x28
   2124a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2124c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   21250:	62ba      	str	r2, [r7, #40]	; 0x28
   21252:	0a23      	lsrs	r3, r4, #8
   21254:	62fb      	str	r3, [r7, #44]	; 0x2c
   21256:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2125a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   2125e:	18c9      	adds	r1, r1, r3
   21260:	eb42 0204 	adc.w	r2, r2, r4
   21264:	460b      	mov	r3, r1
   21266:	4614      	mov	r4, r2
   21268:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   2126c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   21270:	0c1a      	lsrs	r2, r3, #16
   21272:	623a      	str	r2, [r7, #32]
   21274:	6a3a      	ldr	r2, [r7, #32]
   21276:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   2127a:	623a      	str	r2, [r7, #32]
   2127c:	0c23      	lsrs	r3, r4, #16
   2127e:	627b      	str	r3, [r7, #36]	; 0x24
   21280:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   21284:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   21288:	18c9      	adds	r1, r1, r3
   2128a:	eb42 0204 	adc.w	r2, r2, r4
   2128e:	460b      	mov	r3, r1
   21290:	4614      	mov	r4, r2
   21292:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   21296:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2129a:	0023      	movs	r3, r4
   2129c:	603b      	str	r3, [r7, #0]
   2129e:	2300      	movs	r3, #0
   212a0:	607b      	str	r3, [r7, #4]
   212a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   212a6:	e9d7 1200 	ldrd	r1, r2, [r7]
   212aa:	18c9      	adds	r1, r1, r3
   212ac:	eb42 0204 	adc.w	r2, r2, r4
   212b0:	460b      	mov	r3, r1
   212b2:	4614      	mov	r4, r2
   212b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   212b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   212bc:	08da      	lsrs	r2, r3, #3
   212be:	613a      	str	r2, [r7, #16]
   212c0:	693a      	ldr	r2, [r7, #16]
   212c2:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
   212c6:	613a      	str	r2, [r7, #16]
   212c8:	08e3      	lsrs	r3, r4, #3
   212ca:	617b      	str	r3, [r7, #20]
   212cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   212d0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   212d4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   212d8:	460b      	mov	r3, r1
   212da:	4614      	mov	r4, r2
   212dc:	00a0      	lsls	r0, r4, #2
   212de:	60f8      	str	r0, [r7, #12]
   212e0:	68f8      	ldr	r0, [r7, #12]
   212e2:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   212e6:	60f8      	str	r0, [r7, #12]
   212e8:	009b      	lsls	r3, r3, #2
   212ea:	60bb      	str	r3, [r7, #8]
   212ec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   212f0:	185b      	adds	r3, r3, r1
   212f2:	eb44 0402 	adc.w	r4, r4, r2
   212f6:	18db      	adds	r3, r3, r3
   212f8:	eb44 0404 	adc.w	r4, r4, r4
   212fc:	4619      	mov	r1, r3
   212fe:	4622      	mov	r2, r4
   21300:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   21304:	1a5b      	subs	r3, r3, r1
   21306:	eb64 0402 	sbc.w	r4, r4, r2
   2130a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   2130e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
   21312:	3306      	adds	r3, #6
   21314:	f144 0400 	adc.w	r4, r4, #0
   21318:	091a      	lsrs	r2, r3, #4
   2131a:	61ba      	str	r2, [r7, #24]
   2131c:	69ba      	ldr	r2, [r7, #24]
   2131e:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   21322:	61ba      	str	r2, [r7, #24]
   21324:	0923      	lsrs	r3, r4, #4
   21326:	61fb      	str	r3, [r7, #28]
   21328:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   2132c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   21330:	18c9      	adds	r1, r1, r3
   21332:	eb42 0204 	adc.w	r2, r2, r4
   21336:	460b      	mov	r3, r1
   21338:	4614      	mov	r4, r2
   2133a:	e029      	b.n	21390 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   2133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2133e:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   21340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21342:	085a      	lsrs	r2, r3, #1
   21344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   21346:	089b      	lsrs	r3, r3, #2
   21348:	4413      	add	r3, r2
   2134a:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   2134c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2134e:	091b      	lsrs	r3, r3, #4
   21350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   21352:	4413      	add	r3, r2
   21354:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   21356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21358:	0a1b      	lsrs	r3, r3, #8
   2135a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2135c:	4413      	add	r3, r2
   2135e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   21360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   21362:	0c1b      	lsrs	r3, r3, #16
   21364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   21366:	4413      	add	r3, r2
   21368:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   2136a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2136c:	08db      	lsrs	r3, r3, #3
   2136e:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   21370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   21372:	4613      	mov	r3, r2
   21374:	009b      	lsls	r3, r3, #2
   21376:	4413      	add	r3, r2
   21378:	005b      	lsls	r3, r3, #1
   2137a:	461a      	mov	r2, r3
   2137c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2137e:	1a9b      	subs	r3, r3, r2
   21380:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   21382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21384:	3306      	adds	r3, #6
   21386:	091a      	lsrs	r2, r3, #4
   21388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2138a:	4413      	add	r3, r2
   2138c:	f04f 0400 	mov.w	r4, #0
    }
}
   21390:	4618      	mov	r0, r3
   21392:	4621      	mov	r1, r4
   21394:	3758      	adds	r7, #88	; 0x58
   21396:	46bd      	mov	sp, r7
   21398:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   2139c:	4770      	bx	lr

0002139e <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   2139e:	b590      	push	{r4, r7, lr}
   213a0:	b085      	sub	sp, #20
   213a2:	af00      	add	r7, sp, #0
   213a4:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   213a8:	683a      	ldr	r2, [r7, #0]
   213aa:	687b      	ldr	r3, [r7, #4]
   213ac:	4313      	orrs	r3, r2
   213ae:	2b00      	cmp	r3, #0
   213b0:	bf0c      	ite	eq
   213b2:	2301      	moveq	r3, #1
   213b4:	2300      	movne	r3, #0
   213b6:	b2db      	uxtb	r3, r3
   213b8:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   213ba:	e008      	b.n	213ce <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   213bc:	e9d7 0100 	ldrd	r0, r1, [r7]
   213c0:	f7ff ff0e 	bl	211e0 <divu64_10>
   213c4:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   213c8:	68fb      	ldr	r3, [r7, #12]
   213ca:	3301      	adds	r3, #1
   213cc:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   213ce:	e9d7 3400 	ldrd	r3, r4, [r7]
   213d2:	4323      	orrs	r3, r4
   213d4:	d1f2      	bne.n	213bc <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   213d6:	68fb      	ldr	r3, [r7, #12]
}
   213d8:	4618      	mov	r0, r3
   213da:	3714      	adds	r7, #20
   213dc:	46bd      	mov	sp, r7
   213de:	bd90      	pop	{r4, r7, pc}

000213e0 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   213e0:	b590      	push	{r4, r7, lr}
   213e2:	b083      	sub	sp, #12
   213e4:	af00      	add	r7, sp, #0
   213e6:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   213ea:	e9d7 3400 	ldrd	r3, r4, [r7]
   213ee:	2b00      	cmp	r3, #0
   213f0:	f174 0300 	sbcs.w	r3, r4, #0
   213f4:	da06      	bge.n	21404 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   213f6:	e9d7 3400 	ldrd	r3, r4, [r7]
   213fa:	425b      	negs	r3, r3
   213fc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   21400:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   21404:	e9d7 3400 	ldrd	r3, r4, [r7]
   21408:	4618      	mov	r0, r3
   2140a:	4621      	mov	r1, r4
   2140c:	f7ff ffc7 	bl	2139e <ndigits_in_u64>
   21410:	4603      	mov	r3, r0
}
   21412:	4618      	mov	r0, r3
   21414:	370c      	adds	r7, #12
   21416:	46bd      	mov	sp, r7
   21418:	bd90      	pop	{r4, r7, pc}

0002141a <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   2141a:	b490      	push	{r4, r7}
   2141c:	b084      	sub	sp, #16
   2141e:	af00      	add	r7, sp, #0
   21420:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   21424:	6839      	ldr	r1, [r7, #0]
   21426:	687a      	ldr	r2, [r7, #4]
   21428:	430a      	orrs	r2, r1
   2142a:	2a00      	cmp	r2, #0
   2142c:	bf0c      	ite	eq
   2142e:	2201      	moveq	r2, #1
   21430:	2200      	movne	r2, #0
   21432:	b2d2      	uxtb	r2, r2
   21434:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
   21436:	e00a      	b.n	2144e <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   21438:	e9d7 1200 	ldrd	r1, r2, [r7]
   2143c:	090b      	lsrs	r3, r1, #4
   2143e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   21442:	0914      	lsrs	r4, r2, #4
   21444:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   21448:	68fa      	ldr	r2, [r7, #12]
   2144a:	3201      	adds	r2, #1
   2144c:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
   2144e:	e9d7 1200 	ldrd	r1, r2, [r7]
   21452:	430a      	orrs	r2, r1
   21454:	d1f0      	bne.n	21438 <ndigits_in_hex+0x1e>
    }

    return iDigits;
   21456:	68fb      	ldr	r3, [r7, #12]
}
   21458:	4618      	mov	r0, r3
   2145a:	3710      	adds	r7, #16
   2145c:	46bd      	mov	sp, r7
   2145e:	bc90      	pop	{r4, r7}
   21460:	4770      	bx	lr

00021462 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   21462:	b480      	push	{r7}
   21464:	b087      	sub	sp, #28
   21466:	af00      	add	r7, sp, #0
   21468:	6078      	str	r0, [r7, #4]
   2146a:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   2146c:	2300      	movs	r3, #0
   2146e:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   21470:	2300      	movs	r3, #0
   21472:	613b      	str	r3, [r7, #16]
   21474:	2300      	movs	r3, #0
   21476:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   21478:	687b      	ldr	r3, [r7, #4]
   2147a:	781b      	ldrb	r3, [r3, #0]
   2147c:	2b2d      	cmp	r3, #45	; 0x2d
   2147e:	d11b      	bne.n	214b8 <decstr_to_int+0x56>
    {
        bNeg = true;
   21480:	2301      	movs	r3, #1
   21482:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   21484:	687b      	ldr	r3, [r7, #4]
   21486:	3301      	adds	r3, #1
   21488:	607b      	str	r3, [r7, #4]
        uCnt++;
   2148a:	68fb      	ldr	r3, [r7, #12]
   2148c:	3301      	adds	r3, #1
   2148e:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   21490:	e012      	b.n	214b8 <decstr_to_int+0x56>
    {
        ++uCnt;
   21492:	68fb      	ldr	r3, [r7, #12]
   21494:	3301      	adds	r3, #1
   21496:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   21498:	693a      	ldr	r2, [r7, #16]
   2149a:	4613      	mov	r3, r2
   2149c:	009b      	lsls	r3, r3, #2
   2149e:	4413      	add	r3, r2
   214a0:	005b      	lsls	r3, r3, #1
   214a2:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   214a4:	687b      	ldr	r3, [r7, #4]
   214a6:	781b      	ldrb	r3, [r3, #0]
   214a8:	461a      	mov	r2, r3
   214aa:	693b      	ldr	r3, [r7, #16]
   214ac:	4413      	add	r3, r2
   214ae:	3b30      	subs	r3, #48	; 0x30
   214b0:	613b      	str	r3, [r7, #16]
        pcStr++;
   214b2:	687b      	ldr	r3, [r7, #4]
   214b4:	3301      	adds	r3, #1
   214b6:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   214b8:	687b      	ldr	r3, [r7, #4]
   214ba:	781b      	ldrb	r3, [r3, #0]
   214bc:	2b2f      	cmp	r3, #47	; 0x2f
   214be:	d903      	bls.n	214c8 <decstr_to_int+0x66>
   214c0:	687b      	ldr	r3, [r7, #4]
   214c2:	781b      	ldrb	r3, [r3, #0]
   214c4:	2b39      	cmp	r3, #57	; 0x39
   214c6:	d9e4      	bls.n	21492 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   214c8:	683b      	ldr	r3, [r7, #0]
   214ca:	2b00      	cmp	r3, #0
   214cc:	d002      	beq.n	214d4 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   214ce:	683b      	ldr	r3, [r7, #0]
   214d0:	68fa      	ldr	r2, [r7, #12]
   214d2:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   214d4:	7dfb      	ldrb	r3, [r7, #23]
   214d6:	2b00      	cmp	r3, #0
   214d8:	d002      	beq.n	214e0 <decstr_to_int+0x7e>
   214da:	693b      	ldr	r3, [r7, #16]
   214dc:	425b      	negs	r3, r3
   214de:	e000      	b.n	214e2 <decstr_to_int+0x80>
   214e0:	693b      	ldr	r3, [r7, #16]
}
   214e2:	4618      	mov	r0, r3
   214e4:	371c      	adds	r7, #28
   214e6:	46bd      	mov	sp, r7
   214e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   214ec:	4770      	bx	lr

000214ee <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   214ee:	b590      	push	{r4, r7, lr}
   214f0:	b091      	sub	sp, #68	; 0x44
   214f2:	af00      	add	r7, sp, #0
   214f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
   214f8:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   214fa:	2300      	movs	r3, #0
   214fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   214fe:	2300      	movs	r3, #0
   21500:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   21502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   21506:	f7ff fe6b 	bl	211e0 <divu64_10>
   2150a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   2150e:	68b9      	ldr	r1, [r7, #8]
   21510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   21512:	4613      	mov	r3, r2
   21514:	009b      	lsls	r3, r3, #2
   21516:	4413      	add	r3, r2
   21518:	005b      	lsls	r3, r3, #1
   2151a:	1acb      	subs	r3, r1, r3
   2151c:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   2151e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21520:	1c5a      	adds	r2, r3, #1
   21522:	63fa      	str	r2, [r7, #60]	; 0x3c
   21524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   21526:	b2d2      	uxtb	r2, r2
   21528:	3230      	adds	r2, #48	; 0x30
   2152a:	b2d2      	uxtb	r2, r2
   2152c:	f107 0140 	add.w	r1, r7, #64	; 0x40
   21530:	440b      	add	r3, r1
   21532:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   21536:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   2153a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   2153e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   21542:	4323      	orrs	r3, r4
   21544:	d1dd      	bne.n	21502 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   21546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21548:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   2154a:	687b      	ldr	r3, [r7, #4]
   2154c:	2b00      	cmp	r3, #0
   2154e:	d011      	beq.n	21574 <uint64_to_str+0x86>
    {
        while ( ix-- )
   21550:	e008      	b.n	21564 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   21552:	687b      	ldr	r3, [r7, #4]
   21554:	1c5a      	adds	r2, r3, #1
   21556:	607a      	str	r2, [r7, #4]
   21558:	f107 0110 	add.w	r1, r7, #16
   2155c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2155e:	440a      	add	r2, r1
   21560:	7812      	ldrb	r2, [r2, #0]
   21562:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   21564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21566:	1e5a      	subs	r2, r3, #1
   21568:	63fa      	str	r2, [r7, #60]	; 0x3c
   2156a:	2b00      	cmp	r3, #0
   2156c:	d1f1      	bne.n	21552 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   2156e:	687b      	ldr	r3, [r7, #4]
   21570:	2200      	movs	r2, #0
   21572:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   21574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   21576:	4618      	mov	r0, r3
   21578:	3744      	adds	r7, #68	; 0x44
   2157a:	46bd      	mov	sp, r7
   2157c:	bd90      	pop	{r4, r7, pc}

0002157e <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   2157e:	b4b0      	push	{r4, r5, r7}
   21580:	b08d      	sub	sp, #52	; 0x34
   21582:	af00      	add	r7, sp, #0
   21584:	e9c7 0102 	strd	r0, r1, [r7, #8]
   21588:	607a      	str	r2, [r7, #4]
   2158a:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   2158c:	2300      	movs	r3, #0
   2158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   21590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   21594:	4313      	orrs	r3, r2
   21596:	d131      	bne.n	215fc <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   21598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2159a:	1c5a      	adds	r2, r3, #1
   2159c:	62fa      	str	r2, [r7, #44]	; 0x2c
   2159e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   215a2:	4413      	add	r3, r2
   215a4:	2230      	movs	r2, #48	; 0x30
   215a6:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   215aa:	e027      	b.n	215fc <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   215ac:	7a3b      	ldrb	r3, [r7, #8]
   215ae:	f003 030f 	and.w	r3, r3, #15
   215b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   215b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   215ba:	2b09      	cmp	r3, #9
   215bc:	d90a      	bls.n	215d4 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   215be:	78fb      	ldrb	r3, [r7, #3]
   215c0:	2b00      	cmp	r3, #0
   215c2:	d001      	beq.n	215c8 <uint64_to_hexstr+0x4a>
   215c4:	2227      	movs	r2, #39	; 0x27
   215c6:	e000      	b.n	215ca <uint64_to_hexstr+0x4c>
   215c8:	2207      	movs	r2, #7
   215ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   215ce:	4413      	add	r3, r2
   215d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   215d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   215d6:	1c5a      	adds	r2, r3, #1
   215d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   215da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   215de:	3230      	adds	r2, #48	; 0x30
   215e0:	b2d2      	uxtb	r2, r2
   215e2:	f107 0130 	add.w	r1, r7, #48	; 0x30
   215e6:	440b      	add	r3, r1
   215e8:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   215ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   215f0:	0914      	lsrs	r4, r2, #4
   215f2:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   215f6:	091d      	lsrs	r5, r3, #4
   215f8:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
   215fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   21600:	4313      	orrs	r3, r2
   21602:	d1d3      	bne.n	215ac <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   21604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21606:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   21608:	687b      	ldr	r3, [r7, #4]
   2160a:	2b00      	cmp	r3, #0
   2160c:	d011      	beq.n	21632 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   2160e:	e008      	b.n	21622 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   21610:	687b      	ldr	r3, [r7, #4]
   21612:	1c5a      	adds	r2, r3, #1
   21614:	607a      	str	r2, [r7, #4]
   21616:	f107 0110 	add.w	r1, r7, #16
   2161a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2161c:	440a      	add	r2, r1
   2161e:	7812      	ldrb	r2, [r2, #0]
   21620:	701a      	strb	r2, [r3, #0]
        while (ix--)
   21622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21624:	1e5a      	subs	r2, r3, #1
   21626:	62fa      	str	r2, [r7, #44]	; 0x2c
   21628:	2b00      	cmp	r3, #0
   2162a:	d1f1      	bne.n	21610 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   2162c:	687b      	ldr	r3, [r7, #4]
   2162e:	2200      	movs	r2, #0
   21630:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   21632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   21634:	4618      	mov	r0, r3
   21636:	3734      	adds	r7, #52	; 0x34
   21638:	46bd      	mov	sp, r7
   2163a:	bcb0      	pop	{r4, r5, r7}
   2163c:	4770      	bx	lr

0002163e <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   2163e:	b480      	push	{r7}
   21640:	b085      	sub	sp, #20
   21642:	af00      	add	r7, sp, #0
   21644:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   21646:	2300      	movs	r3, #0
   21648:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   2164a:	687b      	ldr	r3, [r7, #4]
   2164c:	2b00      	cmp	r3, #0
   2164e:	d104      	bne.n	2165a <simple_strlen+0x1c>
    {
        return ui32RetVal;
   21650:	68fb      	ldr	r3, [r7, #12]
   21652:	e009      	b.n	21668 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   21654:	68fb      	ldr	r3, [r7, #12]
   21656:	3301      	adds	r3, #1
   21658:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   2165a:	687b      	ldr	r3, [r7, #4]
   2165c:	1c5a      	adds	r2, r3, #1
   2165e:	607a      	str	r2, [r7, #4]
   21660:	781b      	ldrb	r3, [r3, #0]
   21662:	2b00      	cmp	r3, #0
   21664:	d1f6      	bne.n	21654 <simple_strlen+0x16>
    }
    return ui32RetVal;
   21666:	68fb      	ldr	r3, [r7, #12]
}
   21668:	4618      	mov	r0, r3
   2166a:	3714      	adds	r7, #20
   2166c:	46bd      	mov	sp, r7
   2166e:	f85d 7b04 	ldr.w	r7, [sp], #4
   21672:	4770      	bx	lr

00021674 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   21674:	b480      	push	{r7}
   21676:	b087      	sub	sp, #28
   21678:	af00      	add	r7, sp, #0
   2167a:	60f8      	str	r0, [r7, #12]
   2167c:	460b      	mov	r3, r1
   2167e:	607a      	str	r2, [r7, #4]
   21680:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   21682:	2300      	movs	r3, #0
   21684:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   21686:	687b      	ldr	r3, [r7, #4]
   21688:	2b00      	cmp	r3, #0
   2168a:	dc0c      	bgt.n	216a6 <padbuffer+0x32>
    {
        return i32Cnt;
   2168c:	697b      	ldr	r3, [r7, #20]
   2168e:	e010      	b.n	216b2 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   21690:	68fb      	ldr	r3, [r7, #12]
   21692:	2b00      	cmp	r3, #0
   21694:	d004      	beq.n	216a0 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   21696:	68fb      	ldr	r3, [r7, #12]
   21698:	1c5a      	adds	r2, r3, #1
   2169a:	60fa      	str	r2, [r7, #12]
   2169c:	7afa      	ldrb	r2, [r7, #11]
   2169e:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   216a0:	697b      	ldr	r3, [r7, #20]
   216a2:	3301      	adds	r3, #1
   216a4:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   216a6:	687b      	ldr	r3, [r7, #4]
   216a8:	1e5a      	subs	r2, r3, #1
   216aa:	607a      	str	r2, [r7, #4]
   216ac:	2b00      	cmp	r3, #0
   216ae:	d1ef      	bne.n	21690 <padbuffer+0x1c>
    }

    return i32Cnt;
   216b0:	697b      	ldr	r3, [r7, #20]
}
   216b2:	4618      	mov	r0, r3
   216b4:	371c      	adds	r7, #28
   216b6:	46bd      	mov	sp, r7
   216b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   216bc:	4770      	bx	lr
	...

000216c0 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   216c0:	b590      	push	{r4, r7, lr}
   216c2:	b08f      	sub	sp, #60	; 0x3c
   216c4:	af00      	add	r7, sp, #0
   216c6:	ed87 0a03 	vstr	s0, [r7, #12]
   216ca:	60b8      	str	r0, [r7, #8]
   216cc:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   216ce:	68bb      	ldr	r3, [r7, #8]
   216d0:	681b      	ldr	r3, [r3, #0]
   216d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   216d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   216d6:	2b03      	cmp	r3, #3
   216d8:	dc02      	bgt.n	216e0 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   216da:	f06f 0302 	mvn.w	r3, #2
   216de:	e0e7      	b.n	218b0 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   216e0:	edd7 7a03 	vldr	s15, [r7, #12]
   216e4:	eef5 7a40 	vcmp.f32	s15, #0.0
   216e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   216ec:	d104      	bne.n	216f8 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   216ee:	68bb      	ldr	r3, [r7, #8]
   216f0:	4a71      	ldr	r2, [pc, #452]	; (218b8 <ftoa+0x1f8>)
   216f2:	601a      	str	r2, [r3, #0]
        return 3;
   216f4:	2303      	movs	r3, #3
   216f6:	e0db      	b.n	218b0 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   216f8:	68bb      	ldr	r3, [r7, #8]
   216fa:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   216fc:	68fb      	ldr	r3, [r7, #12]
   216fe:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   21700:	693b      	ldr	r3, [r7, #16]
   21702:	15db      	asrs	r3, r3, #23
   21704:	b2db      	uxtb	r3, r3
   21706:	3b7f      	subs	r3, #127	; 0x7f
   21708:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   2170a:	693b      	ldr	r3, [r7, #16]
   2170c:	f3c3 0316 	ubfx	r3, r3, #0, #23
   21710:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   21714:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   21716:	2300      	movs	r3, #0
   21718:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   2171a:	2300      	movs	r3, #0
   2171c:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   2171e:	69fb      	ldr	r3, [r7, #28]
   21720:	2b1e      	cmp	r3, #30
   21722:	dd02      	ble.n	2172a <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   21724:	f06f 0301 	mvn.w	r3, #1
   21728:	e0c2      	b.n	218b0 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   2172a:	69fb      	ldr	r3, [r7, #28]
   2172c:	f113 0f17 	cmn.w	r3, #23
   21730:	da02      	bge.n	21738 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   21732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21736:	e0bb      	b.n	218b0 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   21738:	69fb      	ldr	r3, [r7, #28]
   2173a:	2b16      	cmp	r3, #22
   2173c:	dd06      	ble.n	2174c <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   2173e:	69fb      	ldr	r3, [r7, #28]
   21740:	3b17      	subs	r3, #23
   21742:	69ba      	ldr	r2, [r7, #24]
   21744:	fa02 f303 	lsl.w	r3, r2, r3
   21748:	637b      	str	r3, [r7, #52]	; 0x34
   2174a:	e01a      	b.n	21782 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   2174c:	69fb      	ldr	r3, [r7, #28]
   2174e:	2b00      	cmp	r3, #0
   21750:	db0f      	blt.n	21772 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   21752:	69fb      	ldr	r3, [r7, #28]
   21754:	f1c3 0317 	rsb	r3, r3, #23
   21758:	69ba      	ldr	r2, [r7, #24]
   2175a:	fa42 f303 	asr.w	r3, r2, r3
   2175e:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   21760:	69fb      	ldr	r3, [r7, #28]
   21762:	3301      	adds	r3, #1
   21764:	69ba      	ldr	r2, [r7, #24]
   21766:	fa02 f303 	lsl.w	r3, r2, r3
   2176a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2176e:	633b      	str	r3, [r7, #48]	; 0x30
   21770:	e007      	b.n	21782 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   21772:	69bb      	ldr	r3, [r7, #24]
   21774:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   21778:	69fb      	ldr	r3, [r7, #28]
   2177a:	43db      	mvns	r3, r3
   2177c:	fa42 f303 	asr.w	r3, r2, r3
   21780:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   21782:	693b      	ldr	r3, [r7, #16]
   21784:	2b00      	cmp	r3, #0
   21786:	da04      	bge.n	21792 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   21788:	68bb      	ldr	r3, [r7, #8]
   2178a:	1c5a      	adds	r2, r3, #1
   2178c:	60ba      	str	r2, [r7, #8]
   2178e:	222d      	movs	r2, #45	; 0x2d
   21790:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   21792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21794:	2b00      	cmp	r3, #0
   21796:	d105      	bne.n	217a4 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   21798:	68bb      	ldr	r3, [r7, #8]
   2179a:	1c5a      	adds	r2, r3, #1
   2179c:	60ba      	str	r2, [r7, #8]
   2179e:	2230      	movs	r2, #48	; 0x30
   217a0:	701a      	strb	r2, [r3, #0]
   217a2:	e021      	b.n	217e8 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   217a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   217a6:	2b00      	cmp	r3, #0
   217a8:	dd08      	ble.n	217bc <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   217aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   217ac:	ea4f 74e3 	mov.w	r4, r3, asr #31
   217b0:	68ba      	ldr	r2, [r7, #8]
   217b2:	4618      	mov	r0, r3
   217b4:	4621      	mov	r1, r4
   217b6:	f7ff fe9a 	bl	214ee <uint64_to_str>
   217ba:	e011      	b.n	217e0 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   217bc:	68bb      	ldr	r3, [r7, #8]
   217be:	1c5a      	adds	r2, r3, #1
   217c0:	60ba      	str	r2, [r7, #8]
   217c2:	222d      	movs	r2, #45	; 0x2d
   217c4:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   217c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   217c8:	425b      	negs	r3, r3
   217ca:	ea4f 74e3 	mov.w	r4, r3, asr #31
   217ce:	68ba      	ldr	r2, [r7, #8]
   217d0:	4618      	mov	r0, r3
   217d2:	4621      	mov	r1, r4
   217d4:	f7ff fe8b 	bl	214ee <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   217d8:	e002      	b.n	217e0 <ftoa+0x120>
        {
            pcBuf++;
   217da:	68bb      	ldr	r3, [r7, #8]
   217dc:	3301      	adds	r3, #1
   217de:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   217e0:	68bb      	ldr	r3, [r7, #8]
   217e2:	781b      	ldrb	r3, [r3, #0]
   217e4:	2b00      	cmp	r3, #0
   217e6:	d1f8      	bne.n	217da <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   217e8:	68bb      	ldr	r3, [r7, #8]
   217ea:	1c5a      	adds	r2, r3, #1
   217ec:	60ba      	str	r2, [r7, #8]
   217ee:	222e      	movs	r2, #46	; 0x2e
   217f0:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   217f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   217f4:	2b00      	cmp	r3, #0
   217f6:	d105      	bne.n	21804 <ftoa+0x144>
    {
        *pcBuf++ = '0';
   217f8:	68bb      	ldr	r3, [r7, #8]
   217fa:	1c5a      	adds	r2, r3, #1
   217fc:	60ba      	str	r2, [r7, #8]
   217fe:	2230      	movs	r2, #48	; 0x30
   21800:	701a      	strb	r2, [r3, #0]
   21802:	e04f      	b.n	218a4 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   21804:	68ba      	ldr	r2, [r7, #8]
   21806:	6a3b      	ldr	r3, [r7, #32]
   21808:	1ad3      	subs	r3, r2, r3
   2180a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2180c:	1ad3      	subs	r3, r2, r3
   2180e:	3b01      	subs	r3, #1
   21810:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   21812:	697a      	ldr	r2, [r7, #20]
   21814:	687b      	ldr	r3, [r7, #4]
   21816:	4293      	cmp	r3, r2
   21818:	bfa8      	it	ge
   2181a:	4613      	movge	r3, r2
   2181c:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   2181e:	2300      	movs	r3, #0
   21820:	62bb      	str	r3, [r7, #40]	; 0x28
   21822:	e015      	b.n	21850 <ftoa+0x190>
        {
            i32FracPart *= 10;
   21824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   21826:	4613      	mov	r3, r2
   21828:	009b      	lsls	r3, r3, #2
   2182a:	4413      	add	r3, r2
   2182c:	005b      	lsls	r3, r3, #1
   2182e:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   21830:	68bb      	ldr	r3, [r7, #8]
   21832:	1c5a      	adds	r2, r3, #1
   21834:	60ba      	str	r2, [r7, #8]
   21836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   21838:	1612      	asrs	r2, r2, #24
   2183a:	b2d2      	uxtb	r2, r2
   2183c:	3230      	adds	r2, #48	; 0x30
   2183e:	b2d2      	uxtb	r2, r2
   21840:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   21842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   21848:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   2184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2184c:	3301      	adds	r3, #1
   2184e:	62bb      	str	r3, [r7, #40]	; 0x28
   21850:	6aba      	ldr	r2, [r7, #40]	; 0x28
   21852:	697b      	ldr	r3, [r7, #20]
   21854:	429a      	cmp	r2, r3
   21856:	dbe5      	blt.n	21824 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   21858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2185a:	4613      	mov	r3, r2
   2185c:	009b      	lsls	r3, r3, #2
   2185e:	4413      	add	r3, r2
   21860:	005b      	lsls	r3, r3, #1
   21862:	161b      	asrs	r3, r3, #24
   21864:	2b04      	cmp	r3, #4
   21866:	dd1d      	ble.n	218a4 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   21868:	68bb      	ldr	r3, [r7, #8]
   2186a:	3b01      	subs	r3, #1
   2186c:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   2186e:	e015      	b.n	2189c <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   21870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21872:	781b      	ldrb	r3, [r3, #0]
   21874:	2b2e      	cmp	r3, #46	; 0x2e
   21876:	d00e      	beq.n	21896 <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   21878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2187a:	781b      	ldrb	r3, [r3, #0]
   2187c:	2b39      	cmp	r3, #57	; 0x39
   2187e:	d103      	bne.n	21888 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   21880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21882:	2230      	movs	r2, #48	; 0x30
   21884:	701a      	strb	r2, [r3, #0]
   21886:	e006      	b.n	21896 <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   21888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2188a:	781b      	ldrb	r3, [r3, #0]
   2188c:	3301      	adds	r3, #1
   2188e:	b2da      	uxtb	r2, r3
   21890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21892:	701a      	strb	r2, [r3, #0]
                    break;
   21894:	e006      	b.n	218a4 <ftoa+0x1e4>
                }
                pcBuftmp--;
   21896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   21898:	3b01      	subs	r3, #1
   2189a:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   2189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2189e:	6a3b      	ldr	r3, [r7, #32]
   218a0:	429a      	cmp	r2, r3
   218a2:	d2e5      	bcs.n	21870 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   218a4:	68bb      	ldr	r3, [r7, #8]
   218a6:	2200      	movs	r2, #0
   218a8:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   218aa:	68ba      	ldr	r2, [r7, #8]
   218ac:	6a3b      	ldr	r3, [r7, #32]
   218ae:	1ad3      	subs	r3, r2, r3
} // ftoa()
   218b0:	4618      	mov	r0, r3
   218b2:	373c      	adds	r7, #60	; 0x3c
   218b4:	46bd      	mov	sp, r7
   218b6:	bd90      	pop	{r4, r7, pc}
   218b8:	00302e30 	.word	0x00302e30

000218bc <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   218bc:	b590      	push	{r4, r7, lr}
   218be:	b095      	sub	sp, #84	; 0x54
   218c0:	af00      	add	r7, sp, #0
   218c2:	60f8      	str	r0, [r7, #12]
   218c4:	60b9      	str	r1, [r7, #8]
   218c6:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   218c8:	2300      	movs	r3, #0
   218ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   218cc:	2300      	movs	r3, #0
   218ce:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   218d0:	e2e9      	b.n	21ea6 <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   218d2:	2306      	movs	r3, #6
   218d4:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   218d6:	68bb      	ldr	r3, [r7, #8]
   218d8:	781b      	ldrb	r3, [r3, #0]
   218da:	2b25      	cmp	r3, #37	; 0x25
   218dc:	d01f      	beq.n	2191e <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   218de:	68fb      	ldr	r3, [r7, #12]
   218e0:	2b00      	cmp	r3, #0
   218e2:	d015      	beq.n	21910 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   218e4:	68bb      	ldr	r3, [r7, #8]
   218e6:	781b      	ldrb	r3, [r3, #0]
   218e8:	2b0a      	cmp	r3, #10
   218ea:	d10b      	bne.n	21904 <am_util_stdio_vsprintf+0x48>
   218ec:	4bb2      	ldr	r3, [pc, #712]	; (21bb8 <am_util_stdio_vsprintf+0x2fc>)
   218ee:	781b      	ldrb	r3, [r3, #0]
   218f0:	2b00      	cmp	r3, #0
   218f2:	d007      	beq.n	21904 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   218f4:	68fb      	ldr	r3, [r7, #12]
   218f6:	1c5a      	adds	r2, r3, #1
   218f8:	60fa      	str	r2, [r7, #12]
   218fa:	220d      	movs	r2, #13
   218fc:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   218fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21900:	3301      	adds	r3, #1
   21902:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   21904:	68fb      	ldr	r3, [r7, #12]
   21906:	1c5a      	adds	r2, r3, #1
   21908:	60fa      	str	r2, [r7, #12]
   2190a:	68ba      	ldr	r2, [r7, #8]
   2190c:	7812      	ldrb	r2, [r2, #0]
   2190e:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   21910:	68bb      	ldr	r3, [r7, #8]
   21912:	3301      	adds	r3, #1
   21914:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   21916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21918:	3301      	adds	r3, #1
   2191a:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   2191c:	e2c3      	b.n	21ea6 <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   2191e:	68bb      	ldr	r3, [r7, #8]
   21920:	3301      	adds	r3, #1
   21922:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   21924:	2300      	movs	r3, #0
   21926:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   2192a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   2192e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   21932:	2320      	movs	r3, #32
   21934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   21938:	68bb      	ldr	r3, [r7, #8]
   2193a:	781b      	ldrb	r3, [r3, #0]
   2193c:	2b30      	cmp	r3, #48	; 0x30
   2193e:	d105      	bne.n	2194c <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   21940:	2330      	movs	r3, #48	; 0x30
   21942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   21946:	68bb      	ldr	r3, [r7, #8]
   21948:	3301      	adds	r3, #1
   2194a:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   2194c:	f107 0310 	add.w	r3, r7, #16
   21950:	4619      	mov	r1, r3
   21952:	68b8      	ldr	r0, [r7, #8]
   21954:	f7ff fd85 	bl	21462 <decstr_to_int>
   21958:	4603      	mov	r3, r0
   2195a:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   2195c:	693b      	ldr	r3, [r7, #16]
   2195e:	68ba      	ldr	r2, [r7, #8]
   21960:	4413      	add	r3, r2
   21962:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   21964:	68bb      	ldr	r3, [r7, #8]
   21966:	781b      	ldrb	r3, [r3, #0]
   21968:	2b73      	cmp	r3, #115	; 0x73
   2196a:	d005      	beq.n	21978 <am_util_stdio_vsprintf+0xbc>
   2196c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2196e:	2b00      	cmp	r3, #0
   21970:	da02      	bge.n	21978 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   21972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21974:	425b      	negs	r3, r3
   21976:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   21978:	68bb      	ldr	r3, [r7, #8]
   2197a:	781b      	ldrb	r3, [r3, #0]
   2197c:	2b2e      	cmp	r3, #46	; 0x2e
   2197e:	d10e      	bne.n	2199e <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   21980:	68bb      	ldr	r3, [r7, #8]
   21982:	3301      	adds	r3, #1
   21984:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   21986:	f107 0310 	add.w	r3, r7, #16
   2198a:	4619      	mov	r1, r3
   2198c:	68b8      	ldr	r0, [r7, #8]
   2198e:	f7ff fd68 	bl	21462 <decstr_to_int>
   21992:	4603      	mov	r3, r0
   21994:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   21996:	693b      	ldr	r3, [r7, #16]
   21998:	68ba      	ldr	r2, [r7, #8]
   2199a:	4413      	add	r3, r2
   2199c:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   2199e:	68bb      	ldr	r3, [r7, #8]
   219a0:	781b      	ldrb	r3, [r3, #0]
   219a2:	2b6c      	cmp	r3, #108	; 0x6c
   219a4:	d10c      	bne.n	219c0 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   219a6:	68bb      	ldr	r3, [r7, #8]
   219a8:	3301      	adds	r3, #1
   219aa:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   219ac:	68bb      	ldr	r3, [r7, #8]
   219ae:	781b      	ldrb	r3, [r3, #0]
   219b0:	2b6c      	cmp	r3, #108	; 0x6c
   219b2:	d105      	bne.n	219c0 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   219b4:	68bb      	ldr	r3, [r7, #8]
   219b6:	3301      	adds	r3, #1
   219b8:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   219ba:	2301      	movs	r3, #1
   219bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   219c0:	68bb      	ldr	r3, [r7, #8]
   219c2:	781b      	ldrb	r3, [r3, #0]
   219c4:	3b46      	subs	r3, #70	; 0x46
   219c6:	2b32      	cmp	r3, #50	; 0x32
   219c8:	f200 825a 	bhi.w	21e80 <am_util_stdio_vsprintf+0x5c4>
   219cc:	a201      	add	r2, pc, #4	; (adr r2, 219d4 <am_util_stdio_vsprintf+0x118>)
   219ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   219d2:	bf00      	nop
   219d4:	00021e07 	.word	0x00021e07
   219d8:	00021e81 	.word	0x00021e81
   219dc:	00021e81 	.word	0x00021e81
   219e0:	00021e81 	.word	0x00021e81
   219e4:	00021e81 	.word	0x00021e81
   219e8:	00021e81 	.word	0x00021e81
   219ec:	00021e81 	.word	0x00021e81
   219f0:	00021e81 	.word	0x00021e81
   219f4:	00021e81 	.word	0x00021e81
   219f8:	00021e81 	.word	0x00021e81
   219fc:	00021e81 	.word	0x00021e81
   21a00:	00021e81 	.word	0x00021e81
   21a04:	00021e81 	.word	0x00021e81
   21a08:	00021e81 	.word	0x00021e81
   21a0c:	00021e81 	.word	0x00021e81
   21a10:	00021e81 	.word	0x00021e81
   21a14:	00021e81 	.word	0x00021e81
   21a18:	00021e81 	.word	0x00021e81
   21a1c:	00021b9b 	.word	0x00021b9b
   21a20:	00021e81 	.word	0x00021e81
   21a24:	00021e81 	.word	0x00021e81
   21a28:	00021e81 	.word	0x00021e81
   21a2c:	00021e81 	.word	0x00021e81
   21a30:	00021e81 	.word	0x00021e81
   21a34:	00021e81 	.word	0x00021e81
   21a38:	00021e81 	.word	0x00021e81
   21a3c:	00021e81 	.word	0x00021e81
   21a40:	00021e81 	.word	0x00021e81
   21a44:	00021e81 	.word	0x00021e81
   21a48:	00021aa1 	.word	0x00021aa1
   21a4c:	00021ccd 	.word	0x00021ccd
   21a50:	00021e81 	.word	0x00021e81
   21a54:	00021e07 	.word	0x00021e07
   21a58:	00021e81 	.word	0x00021e81
   21a5c:	00021e81 	.word	0x00021e81
   21a60:	00021ccd 	.word	0x00021ccd
   21a64:	00021e81 	.word	0x00021e81
   21a68:	00021e81 	.word	0x00021e81
   21a6c:	00021e81 	.word	0x00021e81
   21a70:	00021e81 	.word	0x00021e81
   21a74:	00021e81 	.word	0x00021e81
   21a78:	00021e81 	.word	0x00021e81
   21a7c:	00021e81 	.word	0x00021e81
   21a80:	00021e81 	.word	0x00021e81
   21a84:	00021e81 	.word	0x00021e81
   21a88:	00021ac7 	.word	0x00021ac7
   21a8c:	00021e81 	.word	0x00021e81
   21a90:	00021c39 	.word	0x00021c39
   21a94:	00021e81 	.word	0x00021e81
   21a98:	00021e81 	.word	0x00021e81
   21a9c:	00021b95 	.word	0x00021b95
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   21aa0:	687b      	ldr	r3, [r7, #4]
   21aa2:	1d1a      	adds	r2, r3, #4
   21aa4:	607a      	str	r2, [r7, #4]
   21aa6:	681b      	ldr	r3, [r3, #0]
   21aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   21aac:	68fb      	ldr	r3, [r7, #12]
   21aae:	2b00      	cmp	r3, #0
   21ab0:	d005      	beq.n	21abe <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   21ab2:	68fb      	ldr	r3, [r7, #12]
   21ab4:	1c5a      	adds	r2, r3, #1
   21ab6:	60fa      	str	r2, [r7, #12]
   21ab8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   21abc:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   21abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21ac0:	3301      	adds	r3, #1
   21ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21ac4:	e1ec      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   21ac6:	687b      	ldr	r3, [r7, #4]
   21ac8:	1d1a      	adds	r2, r3, #4
   21aca:	607a      	str	r2, [r7, #4]
   21acc:	681b      	ldr	r3, [r3, #0]
   21ace:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   21ad0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   21ad2:	f7ff fdb4 	bl	2163e <simple_strlen>
   21ad6:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   21ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21ada:	2b00      	cmp	r3, #0
   21adc:	dd2e      	ble.n	21b3c <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   21ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21ae2:	429a      	cmp	r2, r3
   21ae4:	d22a      	bcs.n	21b3c <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   21ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21aea:	1ad3      	subs	r3, r2, r3
   21aec:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21af4:	4619      	mov	r1, r3
   21af6:	68f8      	ldr	r0, [r7, #12]
   21af8:	f7ff fdbc 	bl	21674 <padbuffer>
   21afc:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   21afe:	68fb      	ldr	r3, [r7, #12]
   21b00:	2b00      	cmp	r3, #0
   21b02:	d001      	beq.n	21b08 <am_util_stdio_vsprintf+0x24c>
   21b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b06:	e000      	b.n	21b0a <am_util_stdio_vsprintf+0x24e>
   21b08:	2300      	movs	r3, #0
   21b0a:	68fa      	ldr	r2, [r7, #12]
   21b0c:	4413      	add	r3, r2
   21b0e:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   21b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21b14:	4413      	add	r3, r2
   21b16:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   21b18:	2300      	movs	r3, #0
   21b1a:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   21b1c:	e00e      	b.n	21b3c <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   21b1e:	68fb      	ldr	r3, [r7, #12]
   21b20:	2b00      	cmp	r3, #0
   21b22:	d005      	beq.n	21b30 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   21b24:	68fb      	ldr	r3, [r7, #12]
   21b26:	1c5a      	adds	r2, r3, #1
   21b28:	60fa      	str	r2, [r7, #12]
   21b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   21b2c:	7812      	ldrb	r2, [r2, #0]
   21b2e:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   21b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21b32:	3301      	adds	r3, #1
   21b34:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   21b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21b38:	3301      	adds	r3, #1
   21b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   21b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   21b3e:	781b      	ldrb	r3, [r3, #0]
   21b40:	2b00      	cmp	r3, #0
   21b42:	d1ec      	bne.n	21b1e <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   21b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b46:	2b00      	cmp	r3, #0
   21b48:	f000 81a7 	beq.w	21e9a <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   21b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b4e:	425b      	negs	r3, r3
   21b50:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   21b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   21b56:	429a      	cmp	r2, r3
   21b58:	f080 819f 	bcs.w	21e9a <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   21b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21b60:	1ad3      	subs	r3, r2, r3
   21b62:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21b6a:	4619      	mov	r1, r3
   21b6c:	68f8      	ldr	r0, [r7, #12]
   21b6e:	f7ff fd81 	bl	21674 <padbuffer>
   21b72:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   21b74:	68fb      	ldr	r3, [r7, #12]
   21b76:	2b00      	cmp	r3, #0
   21b78:	d001      	beq.n	21b7e <am_util_stdio_vsprintf+0x2c2>
   21b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b7c:	e000      	b.n	21b80 <am_util_stdio_vsprintf+0x2c4>
   21b7e:	2300      	movs	r3, #0
   21b80:	68fa      	ldr	r2, [r7, #12]
   21b82:	4413      	add	r3, r2
   21b84:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   21b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21b8a:	4413      	add	r3, r2
   21b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   21b8e:	2300      	movs	r3, #0
   21b90:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   21b92:	e182      	b.n	21e9a <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   21b94:	2301      	movs	r3, #1
   21b96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21b9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21b9e:	2b00      	cmp	r3, #0
   21ba0:	d00c      	beq.n	21bbc <am_util_stdio_vsprintf+0x300>
   21ba2:	687b      	ldr	r3, [r7, #4]
   21ba4:	3307      	adds	r3, #7
   21ba6:	f023 0307 	bic.w	r3, r3, #7
   21baa:	f103 0208 	add.w	r2, r3, #8
   21bae:	607a      	str	r2, [r7, #4]
   21bb0:	e9d3 3400 	ldrd	r3, r4, [r3]
   21bb4:	e008      	b.n	21bc8 <am_util_stdio_vsprintf+0x30c>
   21bb6:	bf00      	nop
   21bb8:	1001be70 	.word	0x1001be70
                                      va_arg(pArgs, uint32_t);
   21bbc:	687b      	ldr	r3, [r7, #4]
   21bbe:	1d1a      	adds	r2, r3, #4
   21bc0:	607a      	str	r2, [r7, #4]
   21bc2:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21bc4:	f04f 0400 	mov.w	r4, #0
   21bc8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   21bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21bce:	2b00      	cmp	r3, #0
   21bd0:	d01e      	beq.n	21c10 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   21bd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21bd6:	f7ff fc20 	bl	2141a <ndigits_in_hex>
   21bda:	4602      	mov	r2, r0
   21bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21bde:	1a9b      	subs	r3, r3, r2
   21be0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21be8:	4619      	mov	r1, r3
   21bea:	68f8      	ldr	r0, [r7, #12]
   21bec:	f7ff fd42 	bl	21674 <padbuffer>
   21bf0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   21bf2:	68fb      	ldr	r3, [r7, #12]
   21bf4:	2b00      	cmp	r3, #0
   21bf6:	d001      	beq.n	21bfc <am_util_stdio_vsprintf+0x340>
   21bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21bfa:	e000      	b.n	21bfe <am_util_stdio_vsprintf+0x342>
   21bfc:	2300      	movs	r3, #0
   21bfe:	68fa      	ldr	r2, [r7, #12]
   21c00:	4413      	add	r3, r2
   21c02:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   21c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21c06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21c08:	4413      	add	r3, r2
   21c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   21c0c:	2300      	movs	r3, #0
   21c0e:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   21c10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   21c14:	68fa      	ldr	r2, [r7, #12]
   21c16:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21c1a:	f7ff fcb0 	bl	2157e <uint64_to_hexstr>
   21c1e:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   21c20:	68fb      	ldr	r3, [r7, #12]
   21c22:	2b00      	cmp	r3, #0
   21c24:	d003      	beq.n	21c2e <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   21c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21c28:	68fa      	ldr	r2, [r7, #12]
   21c2a:	4413      	add	r3, r2
   21c2c:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   21c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21c32:	4413      	add	r3, r2
   21c34:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21c36:	e133      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21c38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21c3c:	2b00      	cmp	r3, #0
   21c3e:	d009      	beq.n	21c54 <am_util_stdio_vsprintf+0x398>
   21c40:	687b      	ldr	r3, [r7, #4]
   21c42:	3307      	adds	r3, #7
   21c44:	f023 0307 	bic.w	r3, r3, #7
   21c48:	f103 0208 	add.w	r2, r3, #8
   21c4c:	607a      	str	r2, [r7, #4]
   21c4e:	e9d3 3400 	ldrd	r3, r4, [r3]
   21c52:	e005      	b.n	21c60 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   21c54:	687b      	ldr	r3, [r7, #4]
   21c56:	1d1a      	adds	r2, r3, #4
   21c58:	607a      	str	r2, [r7, #4]
   21c5a:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   21c5c:	f04f 0400 	mov.w	r4, #0
   21c60:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   21c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21c66:	2b00      	cmp	r3, #0
   21c68:	d01e      	beq.n	21ca8 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   21c6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21c6e:	f7ff fb96 	bl	2139e <ndigits_in_u64>
   21c72:	4602      	mov	r2, r0
   21c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21c76:	1a9b      	subs	r3, r3, r2
   21c78:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21c80:	4619      	mov	r1, r3
   21c82:	68f8      	ldr	r0, [r7, #12]
   21c84:	f7ff fcf6 	bl	21674 <padbuffer>
   21c88:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   21c8a:	68fb      	ldr	r3, [r7, #12]
   21c8c:	2b00      	cmp	r3, #0
   21c8e:	d001      	beq.n	21c94 <am_util_stdio_vsprintf+0x3d8>
   21c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21c92:	e000      	b.n	21c96 <am_util_stdio_vsprintf+0x3da>
   21c94:	2300      	movs	r3, #0
   21c96:	68fa      	ldr	r2, [r7, #12]
   21c98:	4413      	add	r3, r2
   21c9a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   21c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21c9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21ca0:	4413      	add	r3, r2
   21ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   21ca4:	2300      	movs	r3, #0
   21ca6:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   21ca8:	68fa      	ldr	r2, [r7, #12]
   21caa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21cae:	f7ff fc1e 	bl	214ee <uint64_to_str>
   21cb2:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   21cb4:	68fb      	ldr	r3, [r7, #12]
   21cb6:	2b00      	cmp	r3, #0
   21cb8:	d003      	beq.n	21cc2 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   21cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21cbc:	68fa      	ldr	r2, [r7, #12]
   21cbe:	4413      	add	r3, r2
   21cc0:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   21cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21cc6:	4413      	add	r3, r2
   21cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21cca:	e0e9      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   21ccc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   21cd0:	2b00      	cmp	r3, #0
   21cd2:	d009      	beq.n	21ce8 <am_util_stdio_vsprintf+0x42c>
   21cd4:	687b      	ldr	r3, [r7, #4]
   21cd6:	3307      	adds	r3, #7
   21cd8:	f023 0307 	bic.w	r3, r3, #7
   21cdc:	f103 0208 	add.w	r2, r3, #8
   21ce0:	607a      	str	r2, [r7, #4]
   21ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
   21ce6:	e005      	b.n	21cf4 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   21ce8:	687b      	ldr	r3, [r7, #4]
   21cea:	1d1a      	adds	r2, r3, #4
   21cec:	607a      	str	r2, [r7, #4]
   21cee:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   21cf0:	ea4f 74e3 	mov.w	r4, r3, asr #31
   21cf4:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   21cf8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   21cfc:	2b00      	cmp	r3, #0
   21cfe:	f174 0300 	sbcs.w	r3, r4, #0
   21d02:	da0a      	bge.n	21d1a <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   21d04:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   21d08:	425b      	negs	r3, r3
   21d0a:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   21d0e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   21d12:	2301      	movs	r3, #1
   21d14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   21d18:	e006      	b.n	21d28 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   21d1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   21d1e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   21d22:	2300      	movs	r3, #0
   21d24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   21d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21d2a:	2b00      	cmp	r3, #0
   21d2c:	d04a      	beq.n	21dc4 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   21d2e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   21d32:	4618      	mov	r0, r3
   21d34:	4621      	mov	r1, r4
   21d36:	f7ff fb53 	bl	213e0 <ndigits_in_i64>
   21d3a:	4602      	mov	r2, r0
   21d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21d3e:	1a9b      	subs	r3, r3, r2
   21d40:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   21d42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   21d46:	2b00      	cmp	r3, #0
   21d48:	d011      	beq.n	21d6e <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   21d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21d4c:	3b01      	subs	r3, #1
   21d4e:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   21d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21d54:	2b30      	cmp	r3, #48	; 0x30
   21d56:	d10a      	bne.n	21d6e <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   21d58:	68fb      	ldr	r3, [r7, #12]
   21d5a:	2b00      	cmp	r3, #0
   21d5c:	d004      	beq.n	21d68 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   21d5e:	68fb      	ldr	r3, [r7, #12]
   21d60:	1c5a      	adds	r2, r3, #1
   21d62:	60fa      	str	r2, [r7, #12]
   21d64:	222d      	movs	r2, #45	; 0x2d
   21d66:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   21d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21d6a:	3301      	adds	r3, #1
   21d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   21d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
   21d74:	4619      	mov	r1, r3
   21d76:	68f8      	ldr	r0, [r7, #12]
   21d78:	f7ff fc7c 	bl	21674 <padbuffer>
   21d7c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   21d7e:	68fb      	ldr	r3, [r7, #12]
   21d80:	2b00      	cmp	r3, #0
   21d82:	d001      	beq.n	21d88 <am_util_stdio_vsprintf+0x4cc>
   21d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21d86:	e000      	b.n	21d8a <am_util_stdio_vsprintf+0x4ce>
   21d88:	2300      	movs	r3, #0
   21d8a:	68fa      	ldr	r2, [r7, #12]
   21d8c:	4413      	add	r3, r2
   21d8e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   21d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   21d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21d94:	4413      	add	r3, r2
   21d96:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   21d98:	2300      	movs	r3, #0
   21d9a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   21d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   21da0:	2b00      	cmp	r3, #0
   21da2:	d01e      	beq.n	21de2 <am_util_stdio_vsprintf+0x526>
   21da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   21da8:	2b20      	cmp	r3, #32
   21daa:	d11a      	bne.n	21de2 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   21dac:	68fb      	ldr	r3, [r7, #12]
   21dae:	2b00      	cmp	r3, #0
   21db0:	d004      	beq.n	21dbc <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   21db2:	68fb      	ldr	r3, [r7, #12]
   21db4:	1c5a      	adds	r2, r3, #1
   21db6:	60fa      	str	r2, [r7, #12]
   21db8:	222d      	movs	r2, #45	; 0x2d
   21dba:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   21dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21dbe:	3301      	adds	r3, #1
   21dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   21dc2:	e00e      	b.n	21de2 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   21dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   21dc8:	2b00      	cmp	r3, #0
   21dca:	d00a      	beq.n	21de2 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   21dcc:	68fb      	ldr	r3, [r7, #12]
   21dce:	2b00      	cmp	r3, #0
   21dd0:	d004      	beq.n	21ddc <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   21dd2:	68fb      	ldr	r3, [r7, #12]
   21dd4:	1c5a      	adds	r2, r3, #1
   21dd6:	60fa      	str	r2, [r7, #12]
   21dd8:	222d      	movs	r2, #45	; 0x2d
   21dda:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   21ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21dde:	3301      	adds	r3, #1
   21de0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   21de2:	68fa      	ldr	r2, [r7, #12]
   21de4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   21de8:	f7ff fb81 	bl	214ee <uint64_to_str>
   21dec:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   21dee:	68fb      	ldr	r3, [r7, #12]
   21df0:	2b00      	cmp	r3, #0
   21df2:	d003      	beq.n	21dfc <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   21df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21df6:	68fa      	ldr	r2, [r7, #12]
   21df8:	4413      	add	r3, r2
   21dfa:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   21dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21e00:	4413      	add	r3, r2
   21e02:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21e04:	e04c      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   21e06:	68fb      	ldr	r3, [r7, #12]
   21e08:	2b00      	cmp	r3, #0
   21e0a:	d048      	beq.n	21e9e <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   21e0c:	687b      	ldr	r3, [r7, #4]
   21e0e:	3307      	adds	r3, #7
   21e10:	f023 0307 	bic.w	r3, r3, #7
   21e14:	f103 0208 	add.w	r2, r3, #8
   21e18:	607a      	str	r2, [r7, #4]
   21e1a:	e9d3 3400 	ldrd	r3, r4, [r3]
   21e1e:	4618      	mov	r0, r3
   21e20:	4621      	mov	r1, r4
   21e22:	f7ea fdfb 	bl	ca1c <__aeabi_d2f>
   21e26:	4603      	mov	r3, r0
   21e28:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   21e2a:	68fb      	ldr	r3, [r7, #12]
   21e2c:	2214      	movs	r2, #20
   21e2e:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   21e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
   21e32:	68f8      	ldr	r0, [r7, #12]
   21e34:	ed97 0a05 	vldr	s0, [r7, #20]
   21e38:	f7ff fc42 	bl	216c0 <ftoa>
   21e3c:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   21e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21e40:	2b00      	cmp	r3, #0
   21e42:	da14      	bge.n	21e6e <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   21e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21e46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21e4a:	d102      	bne.n	21e52 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   21e4c:	4b1e      	ldr	r3, [pc, #120]	; (21ec8 <am_util_stdio_vsprintf+0x60c>)
   21e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   21e50:	e008      	b.n	21e64 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   21e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21e54:	f113 0f02 	cmn.w	r3, #2
   21e58:	d102      	bne.n	21e60 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   21e5a:	4b1c      	ldr	r3, [pc, #112]	; (21ecc <am_util_stdio_vsprintf+0x610>)
   21e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   21e5e:	e001      	b.n	21e64 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   21e60:	4b1b      	ldr	r3, [pc, #108]	; (21ed0 <am_util_stdio_vsprintf+0x614>)
   21e62:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   21e64:	68fb      	ldr	r3, [r7, #12]
   21e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
   21e68:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   21e6a:	2303      	movs	r3, #3
   21e6c:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   21e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   21e72:	4413      	add	r3, r2
   21e74:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   21e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   21e78:	68fa      	ldr	r2, [r7, #12]
   21e7a:	4413      	add	r3, r2
   21e7c:	60fb      	str	r3, [r7, #12]
                }
                break;
   21e7e:	e00e      	b.n	21e9e <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   21e80:	68fb      	ldr	r3, [r7, #12]
   21e82:	2b00      	cmp	r3, #0
   21e84:	d005      	beq.n	21e92 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   21e86:	68fb      	ldr	r3, [r7, #12]
   21e88:	1c5a      	adds	r2, r3, #1
   21e8a:	60fa      	str	r2, [r7, #12]
   21e8c:	68ba      	ldr	r2, [r7, #8]
   21e8e:	7812      	ldrb	r2, [r2, #0]
   21e90:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   21e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   21e94:	3301      	adds	r3, #1
   21e96:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   21e98:	e002      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>
                break;
   21e9a:	bf00      	nop
   21e9c:	e000      	b.n	21ea0 <am_util_stdio_vsprintf+0x5e4>
                break;
   21e9e:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   21ea0:	68bb      	ldr	r3, [r7, #8]
   21ea2:	3301      	adds	r3, #1
   21ea4:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   21ea6:	68bb      	ldr	r3, [r7, #8]
   21ea8:	781b      	ldrb	r3, [r3, #0]
   21eaa:	2b00      	cmp	r3, #0
   21eac:	f47f ad11 	bne.w	218d2 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   21eb0:	68fb      	ldr	r3, [r7, #12]
   21eb2:	2b00      	cmp	r3, #0
   21eb4:	d002      	beq.n	21ebc <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   21eb6:	68fb      	ldr	r3, [r7, #12]
   21eb8:	2200      	movs	r2, #0
   21eba:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   21ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   21ebe:	4618      	mov	r0, r3
   21ec0:	3754      	adds	r7, #84	; 0x54
   21ec2:	46bd      	mov	sp, r7
   21ec4:	bd90      	pop	{r4, r7, pc}
   21ec6:	bf00      	nop
   21ec8:	00302e30 	.word	0x00302e30
   21ecc:	00232e23 	.word	0x00232e23
   21ed0:	003f2e3f 	.word	0x003f2e3f

00021ed4 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   21ed4:	b40f      	push	{r0, r1, r2, r3}
   21ed6:	b580      	push	{r7, lr}
   21ed8:	b082      	sub	sp, #8
   21eda:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   21edc:	4b0d      	ldr	r3, [pc, #52]	; (21f14 <am_util_stdio_printf+0x40>)
   21ede:	681b      	ldr	r3, [r3, #0]
   21ee0:	2b00      	cmp	r3, #0
   21ee2:	d101      	bne.n	21ee8 <am_util_stdio_printf+0x14>
    {
        return 0;
   21ee4:	2300      	movs	r3, #0
   21ee6:	e00d      	b.n	21f04 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   21ee8:	f107 0314 	add.w	r3, r7, #20
   21eec:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   21eee:	683a      	ldr	r2, [r7, #0]
   21ef0:	6939      	ldr	r1, [r7, #16]
   21ef2:	4809      	ldr	r0, [pc, #36]	; (21f18 <am_util_stdio_printf+0x44>)
   21ef4:	f7ff fce2 	bl	218bc <am_util_stdio_vsprintf>
   21ef8:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   21efa:	4b06      	ldr	r3, [pc, #24]	; (21f14 <am_util_stdio_printf+0x40>)
   21efc:	681b      	ldr	r3, [r3, #0]
   21efe:	4806      	ldr	r0, [pc, #24]	; (21f18 <am_util_stdio_printf+0x44>)
   21f00:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   21f02:	687b      	ldr	r3, [r7, #4]
}
   21f04:	4618      	mov	r0, r3
   21f06:	3708      	adds	r7, #8
   21f08:	46bd      	mov	sp, r7
   21f0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   21f0e:	b004      	add	sp, #16
   21f10:	4770      	bx	lr
   21f12:	bf00      	nop
   21f14:	10044dec 	.word	0x10044dec
   21f18:	1001bd70 	.word	0x1001bd70

00021f1c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
   21f1c:	b580      	push	{r7, lr}
   21f1e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   21f20:	4802      	ldr	r0, [pc, #8]	; (21f2c <am_util_stdio_terminal_clear+0x10>)
   21f22:	f7ff ffd7 	bl	21ed4 <am_util_stdio_printf>
}
   21f26:	bf00      	nop
   21f28:	bd80      	pop	{r7, pc}
   21f2a:	bf00      	nop
   21f2c:	0003b854 	.word	0x0003b854

00021f30 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   21f30:	b580      	push	{r7, lr}
   21f32:	b082      	sub	sp, #8
   21f34:	af00      	add	r7, sp, #0
   21f36:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   21f38:	687b      	ldr	r3, [r7, #4]
   21f3a:	789b      	ldrb	r3, [r3, #2]
   21f3c:	2b00      	cmp	r3, #0
   21f3e:	d002      	beq.n	21f46 <appProcMsg+0x16>
   21f40:	2b01      	cmp	r3, #1
   21f42:	d003      	beq.n	21f4c <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   21f44:	e006      	b.n	21f54 <appProcMsg+0x24>
      appUiBtnPoll();
   21f46:	f7f7 fd45 	bl	199d4 <appUiBtnPoll>
      break;
   21f4a:	e003      	b.n	21f54 <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   21f4c:	6878      	ldr	r0, [r7, #4]
   21f4e:	f7f7 fd37 	bl	199c0 <appUiTimerExpired>
      break;
   21f52:	bf00      	nop
  }
}
   21f54:	bf00      	nop
   21f56:	3708      	adds	r7, #8
   21f58:	46bd      	mov	sp, r7
   21f5a:	bd80      	pop	{r7, pc}

00021f5c <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   21f5c:	b480      	push	{r7}
   21f5e:	b083      	sub	sp, #12
   21f60:	af00      	add	r7, sp, #0
   21f62:	4603      	mov	r3, r0
   21f64:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   21f66:	79fb      	ldrb	r3, [r7, #7]
   21f68:	3b01      	subs	r3, #1
   21f6a:	4a05      	ldr	r2, [pc, #20]	; (21f80 <appCheckBonded+0x24>)
   21f6c:	015b      	lsls	r3, r3, #5
   21f6e:	4413      	add	r3, r2
   21f70:	3305      	adds	r3, #5
   21f72:	781b      	ldrb	r3, [r3, #0]
}
   21f74:	4618      	mov	r0, r3
   21f76:	370c      	adds	r7, #12
   21f78:	46bd      	mov	sp, r7
   21f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   21f7e:	4770      	bx	lr
   21f80:	10044e20 	.word	0x10044e20

00021f84 <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   21f84:	b480      	push	{r7}
   21f86:	b083      	sub	sp, #12
   21f88:	af00      	add	r7, sp, #0
   21f8a:	4603      	mov	r3, r0
   21f8c:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   21f8e:	79fb      	ldrb	r3, [r7, #7]
   21f90:	3b01      	subs	r3, #1
   21f92:	4a05      	ldr	r2, [pc, #20]	; (21fa8 <appCheckBondByLtk+0x24>)
   21f94:	015b      	lsls	r3, r3, #5
   21f96:	4413      	add	r3, r2
   21f98:	3306      	adds	r3, #6
   21f9a:	781b      	ldrb	r3, [r3, #0]
}
   21f9c:	4618      	mov	r0, r3
   21f9e:	370c      	adds	r7, #12
   21fa0:	46bd      	mov	sp, r7
   21fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   21fa6:	4770      	bx	lr
   21fa8:	10044e20 	.word	0x10044e20

00021fac <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   21fac:	b580      	push	{r7, lr}
   21fae:	b084      	sub	sp, #16
   21fb0:	af00      	add	r7, sp, #0
   21fb2:	4603      	mov	r3, r0
   21fb4:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   21fb6:	4b13      	ldr	r3, [pc, #76]	; (22004 <appNumConns+0x58>)
   21fb8:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   21fba:	2308      	movs	r3, #8
   21fbc:	72fb      	strb	r3, [r7, #11]
   21fbe:	2300      	movs	r3, #0
   21fc0:	72bb      	strb	r3, [r7, #10]
   21fc2:	e016      	b.n	21ff2 <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   21fc4:	68fb      	ldr	r3, [r7, #12]
   21fc6:	791b      	ldrb	r3, [r3, #4]
   21fc8:	2b00      	cmp	r3, #0
   21fca:	d00c      	beq.n	21fe6 <appNumConns+0x3a>
   21fcc:	68fb      	ldr	r3, [r7, #12]
   21fce:	791b      	ldrb	r3, [r3, #4]
   21fd0:	4618      	mov	r0, r3
   21fd2:	f7ee f8bd 	bl	10150 <DmConnRole>
   21fd6:	4603      	mov	r3, r0
   21fd8:	461a      	mov	r2, r3
   21fda:	79fb      	ldrb	r3, [r7, #7]
   21fdc:	4293      	cmp	r3, r2
   21fde:	d102      	bne.n	21fe6 <appNumConns+0x3a>
    {      
      j++;
   21fe0:	7abb      	ldrb	r3, [r7, #10]
   21fe2:	3301      	adds	r3, #1
   21fe4:	72bb      	strb	r3, [r7, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   21fe6:	7afb      	ldrb	r3, [r7, #11]
   21fe8:	3b01      	subs	r3, #1
   21fea:	72fb      	strb	r3, [r7, #11]
   21fec:	68fb      	ldr	r3, [r7, #12]
   21fee:	3320      	adds	r3, #32
   21ff0:	60fb      	str	r3, [r7, #12]
   21ff2:	7afb      	ldrb	r3, [r7, #11]
   21ff4:	2b00      	cmp	r3, #0
   21ff6:	d1e5      	bne.n	21fc4 <appNumConns+0x18>
    }
  }

  return j;
   21ff8:	7abb      	ldrb	r3, [r7, #10]
}
   21ffa:	4618      	mov	r0, r3
   21ffc:	3710      	adds	r7, #16
   21ffe:	46bd      	mov	sp, r7
   22000:	bd80      	pop	{r7, pc}
   22002:	bf00      	nop
   22004:	10044e20 	.word	0x10044e20

00022008 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   22008:	b580      	push	{r7, lr}
   2200a:	b082      	sub	sp, #8
   2200c:	af00      	add	r7, sp, #0
   2200e:	4603      	mov	r3, r0
   22010:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   22012:	4a04      	ldr	r2, [pc, #16]	; (22024 <AppHandlerInit+0x1c>)
   22014:	79fb      	ldrb	r3, [r7, #7]
   22016:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   22018:	f7f7 f97d 	bl	19316 <AppDbInit>
}
   2201c:	bf00      	nop
   2201e:	3708      	adds	r7, #8
   22020:	46bd      	mov	sp, r7
   22022:	bd80      	pop	{r7, pc}
   22024:	10044e0c 	.word	0x10044e0c

00022028 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   22028:	b580      	push	{r7, lr}
   2202a:	b082      	sub	sp, #8
   2202c:	af00      	add	r7, sp, #0
   2202e:	4603      	mov	r3, r0
   22030:	6039      	str	r1, [r7, #0]
   22032:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   22034:	683b      	ldr	r3, [r7, #0]
   22036:	2b00      	cmp	r3, #0
   22038:	d015      	beq.n	22066 <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   2203a:	683b      	ldr	r3, [r7, #0]
   2203c:	789b      	ldrb	r3, [r3, #2]
   2203e:	2b1f      	cmp	r3, #31
   22040:	d904      	bls.n	2204c <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   22042:	4b0e      	ldr	r3, [pc, #56]	; (2207c <AppHandler+0x54>)
   22044:	685b      	ldr	r3, [r3, #4]
   22046:	6838      	ldr	r0, [r7, #0]
   22048:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   2204a:	e013      	b.n	22074 <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   2204c:	683b      	ldr	r3, [r7, #0]
   2204e:	789b      	ldrb	r3, [r3, #2]
   22050:	2b0f      	cmp	r3, #15
   22052:	d904      	bls.n	2205e <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   22054:	4b09      	ldr	r3, [pc, #36]	; (2207c <AppHandler+0x54>)
   22056:	681b      	ldr	r3, [r3, #0]
   22058:	6838      	ldr	r0, [r7, #0]
   2205a:	4798      	blx	r3
}
   2205c:	e00a      	b.n	22074 <AppHandler+0x4c>
      appProcMsg(pMsg);
   2205e:	6838      	ldr	r0, [r7, #0]
   22060:	f7ff ff66 	bl	21f30 <appProcMsg>
}
   22064:	e006      	b.n	22074 <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   22066:	79fb      	ldrb	r3, [r7, #7]
   22068:	f003 0310 	and.w	r3, r3, #16
   2206c:	2b00      	cmp	r3, #0
   2206e:	d001      	beq.n	22074 <AppHandler+0x4c>
      AppUiBtnPressed();
   22070:	f7f7 fcc8 	bl	19a04 <AppUiBtnPressed>
}
   22074:	bf00      	nop
   22076:	3708      	adds	r7, #8
   22078:	46bd      	mov	sp, r7
   2207a:	bd80      	pop	{r7, pc}
   2207c:	10044dfc 	.word	0x10044dfc

00022080 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   22080:	b580      	push	{r7, lr}
   22082:	b084      	sub	sp, #16
   22084:	af00      	add	r7, sp, #0
   22086:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   22088:	687b      	ldr	r3, [r7, #4]
   2208a:	795b      	ldrb	r3, [r3, #5]
   2208c:	2b00      	cmp	r3, #0
   2208e:	d028      	beq.n	220e2 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   22090:	f107 030c 	add.w	r3, r7, #12
   22094:	2104      	movs	r1, #4
   22096:	4618      	mov	r0, r3
   22098:	f7f9 fb0c 	bl	1b6b4 <SecRand>
    passkey %= 1000000;
   2209c:	68fa      	ldr	r2, [r7, #12]
   2209e:	4b14      	ldr	r3, [pc, #80]	; (220f0 <AppHandlePasskey+0x70>)
   220a0:	fba3 1302 	umull	r1, r3, r3, r2
   220a4:	0c9b      	lsrs	r3, r3, #18
   220a6:	4913      	ldr	r1, [pc, #76]	; (220f4 <AppHandlePasskey+0x74>)
   220a8:	fb01 f303 	mul.w	r3, r1, r3
   220ac:	1ad3      	subs	r3, r2, r3
   220ae:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   220b0:	68fb      	ldr	r3, [r7, #12]
   220b2:	b2db      	uxtb	r3, r3
   220b4:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   220b6:	68fb      	ldr	r3, [r7, #12]
   220b8:	0a1b      	lsrs	r3, r3, #8
   220ba:	b2db      	uxtb	r3, r3
   220bc:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   220be:	68fb      	ldr	r3, [r7, #12]
   220c0:	0c1b      	lsrs	r3, r3, #16
   220c2:	b2db      	uxtb	r3, r3
   220c4:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   220c6:	687b      	ldr	r3, [r7, #4]
   220c8:	881b      	ldrh	r3, [r3, #0]
   220ca:	b2db      	uxtb	r3, r3
   220cc:	f107 0208 	add.w	r2, r7, #8
   220d0:	2103      	movs	r1, #3
   220d2:	4618      	mov	r0, r3
   220d4:	f7ee fcb0 	bl	10a38 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   220d8:	68fb      	ldr	r3, [r7, #12]
   220da:	4618      	mov	r0, r3
   220dc:	f7f7 fc54 	bl	19988 <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   220e0:	e002      	b.n	220e8 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   220e2:	200e      	movs	r0, #14
   220e4:	f7f7 fbba 	bl	1985c <AppUiAction>
}
   220e8:	bf00      	nop
   220ea:	3710      	adds	r7, #16
   220ec:	46bd      	mov	sp, r7
   220ee:	bd80      	pop	{r7, pc}
   220f0:	431bde83 	.word	0x431bde83
   220f4:	000f4240 	.word	0x000f4240

000220f8 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   220f8:	b580      	push	{r7, lr}
   220fa:	b084      	sub	sp, #16
   220fc:	af00      	add	r7, sp, #0
   220fe:	6078      	str	r0, [r7, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   22100:	687b      	ldr	r3, [r7, #4]
   22102:	3304      	adds	r3, #4
   22104:	4618      	mov	r0, r3
   22106:	f7ee fddd 	bl	10cc4 <DmSecGetCompareValue>
   2210a:	60f8      	str	r0, [r7, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   2210c:	68f8      	ldr	r0, [r7, #12]
   2210e:	f7f7 fc49 	bl	199a4 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   22112:	687b      	ldr	r3, [r7, #4]
   22114:	881b      	ldrh	r3, [r3, #0]
   22116:	b2db      	uxtb	r3, r3
   22118:	2101      	movs	r1, #1
   2211a:	4618      	mov	r0, r3
   2211c:	f7ee fdbe 	bl	10c9c <DmSecCompareRsp>
}
   22120:	bf00      	nop
   22122:	3710      	adds	r7, #16
   22124:	46bd      	mov	sp, r7
   22126:	bd80      	pop	{r7, pc}

00022128 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   22128:	b480      	push	{r7}
   2212a:	b083      	sub	sp, #12
   2212c:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   2212e:	4b0e      	ldr	r3, [pc, #56]	; (22168 <AppConnIsOpen+0x40>)
   22130:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   22132:	2308      	movs	r3, #8
   22134:	70fb      	strb	r3, [r7, #3]
   22136:	e00c      	b.n	22152 <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   22138:	687b      	ldr	r3, [r7, #4]
   2213a:	791b      	ldrb	r3, [r3, #4]
   2213c:	2b00      	cmp	r3, #0
   2213e:	d002      	beq.n	22146 <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   22140:	687b      	ldr	r3, [r7, #4]
   22142:	791b      	ldrb	r3, [r3, #4]
   22144:	e009      	b.n	2215a <AppConnIsOpen+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   22146:	78fb      	ldrb	r3, [r7, #3]
   22148:	3b01      	subs	r3, #1
   2214a:	70fb      	strb	r3, [r7, #3]
   2214c:	687b      	ldr	r3, [r7, #4]
   2214e:	3320      	adds	r3, #32
   22150:	607b      	str	r3, [r7, #4]
   22152:	78fb      	ldrb	r3, [r7, #3]
   22154:	2b00      	cmp	r3, #0
   22156:	d1ef      	bne.n	22138 <AppConnIsOpen+0x10>
    }
  }
  
  return DM_CONN_ID_NONE;
   22158:	2300      	movs	r3, #0
}
   2215a:	4618      	mov	r0, r3
   2215c:	370c      	adds	r7, #12
   2215e:	46bd      	mov	sp, r7
   22160:	f85d 7b04 	ldr.w	r7, [sp], #4
   22164:	4770      	bx	lr
   22166:	bf00      	nop
   22168:	10044e20 	.word	0x10044e20

0002216c <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   2216c:	b480      	push	{r7}
   2216e:	b083      	sub	sp, #12
   22170:	af00      	add	r7, sp, #0
   22172:	4603      	mov	r3, r0
   22174:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   22176:	79fb      	ldrb	r3, [r7, #7]
   22178:	3b01      	subs	r3, #1
   2217a:	4a05      	ldr	r2, [pc, #20]	; (22190 <AppDbGetHdl+0x24>)
   2217c:	015b      	lsls	r3, r3, #5
   2217e:	4413      	add	r3, r2
   22180:	681b      	ldr	r3, [r3, #0]
}
   22182:	4618      	mov	r0, r3
   22184:	370c      	adds	r7, #12
   22186:	46bd      	mov	sp, r7
   22188:	f85d 7b04 	ldr.w	r7, [sp], #4
   2218c:	4770      	bx	lr
   2218e:	bf00      	nop
   22190:	10044e20 	.word	0x10044e20

00022194 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   22194:	b5f0      	push	{r4, r5, r6, r7, lr}
   22196:	b087      	sub	sp, #28
   22198:	af02      	add	r7, sp, #8
   2219a:	6078      	str	r0, [r7, #4]
   2219c:	460b      	mov	r3, r1
   2219e:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   221a0:	78fb      	ldrb	r3, [r7, #3]
   221a2:	3b01      	subs	r3, #1
   221a4:	4a15      	ldr	r2, [pc, #84]	; (221fc <AppAddDevToResList+0x68>)
   221a6:	015b      	lsls	r3, r3, #5
   221a8:	4413      	add	r3, r2
   221aa:	681b      	ldr	r3, [r3, #0]
   221ac:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   221ae:	f7f4 ff17 	bl	16fe0 <HciLlPrivacySupported>
   221b2:	4603      	mov	r3, r0
   221b4:	2b00      	cmp	r3, #0
   221b6:	d01c      	beq.n	221f2 <AppAddDevToResList+0x5e>
   221b8:	2200      	movs	r2, #0
   221ba:	2104      	movs	r1, #4
   221bc:	68f8      	ldr	r0, [r7, #12]
   221be:	f7f7 fa1f 	bl	19600 <AppDbGetKey>
   221c2:	60b8      	str	r0, [r7, #8]
   221c4:	68bb      	ldr	r3, [r7, #8]
   221c6:	2b00      	cmp	r3, #0
   221c8:	d013      	beq.n	221f2 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   221ca:	68bb      	ldr	r3, [r7, #8]
   221cc:	7d9c      	ldrb	r4, [r3, #22]
   221ce:	68bb      	ldr	r3, [r7, #8]
   221d0:	f103 0510 	add.w	r5, r3, #16
   221d4:	68be      	ldr	r6, [r7, #8]
   221d6:	f7ee fc77 	bl	10ac8 <DmSecGetLocalIrk>
   221da:	4602      	mov	r2, r0
   221dc:	687b      	ldr	r3, [r7, #4]
   221de:	881b      	ldrh	r3, [r3, #0]
   221e0:	9301      	str	r3, [sp, #4]
   221e2:	2301      	movs	r3, #1
   221e4:	9300      	str	r3, [sp, #0]
   221e6:	4613      	mov	r3, r2
   221e8:	4632      	mov	r2, r6
   221ea:	4629      	mov	r1, r5
   221ec:	4620      	mov	r0, r4
   221ee:	f7ee fab3 	bl	10758 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   221f2:	bf00      	nop
   221f4:	3714      	adds	r7, #20
   221f6:	46bd      	mov	sp, r7
   221f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   221fa:	bf00      	nop
   221fc:	10044e20 	.word	0x10044e20

00022200 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   22200:	b580      	push	{r7, lr}
   22202:	b084      	sub	sp, #16
   22204:	af00      	add	r7, sp, #0
   22206:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   22208:	687b      	ldr	r3, [r7, #4]
   2220a:	2b00      	cmp	r3, #0
   2220c:	d020      	beq.n	22250 <AppUpdatePrivacyMode+0x50>
   2220e:	6878      	ldr	r0, [r7, #4]
   22210:	f7f7 faf9 	bl	19806 <AppDbGetPeerAddedToRl>
   22214:	4603      	mov	r3, r0
   22216:	2b00      	cmp	r3, #0
   22218:	d01a      	beq.n	22250 <AppUpdatePrivacyMode+0x50>
   2221a:	6878      	ldr	r0, [r7, #4]
   2221c:	f7f7 fb10 	bl	19840 <AppDbGetPeerRpao>
   22220:	4603      	mov	r3, r0
   22222:	2b00      	cmp	r3, #0
   22224:	d114      	bne.n	22250 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   22226:	2200      	movs	r2, #0
   22228:	2104      	movs	r1, #4
   2222a:	6878      	ldr	r0, [r7, #4]
   2222c:	f7f7 f9e8 	bl	19600 <AppDbGetKey>
   22230:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   22232:	68fb      	ldr	r3, [r7, #12]
   22234:	2b00      	cmp	r3, #0
   22236:	d00b      	beq.n	22250 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   22238:	68fb      	ldr	r3, [r7, #12]
   2223a:	7d98      	ldrb	r0, [r3, #22]
   2223c:	68fb      	ldr	r3, [r7, #12]
   2223e:	3310      	adds	r3, #16
   22240:	2201      	movs	r2, #1
   22242:	4619      	mov	r1, r3
   22244:	f7ee fb02 	bl	1084c <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   22248:	2100      	movs	r1, #0
   2224a:	6878      	ldr	r0, [r7, #4]
   2224c:	f7f7 fae8 	bl	19820 <AppDbSetPeerAddedToRl>
    }
  }
}
   22250:	bf00      	nop
   22252:	3710      	adds	r7, #16
   22254:	46bd      	mov	sp, r7
   22256:	bd80      	pop	{r7, pc}

00022258 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   22258:	b580      	push	{r7, lr}
   2225a:	b084      	sub	sp, #16
   2225c:	af00      	add	r7, sp, #0
   2225e:	4603      	mov	r3, r0
   22260:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   22262:	79fb      	ldrb	r3, [r7, #7]
   22264:	4618      	mov	r0, r3
   22266:	f7ff ff81 	bl	2216c <AppDbGetHdl>
   2226a:	60f8      	str	r0, [r7, #12]
   2226c:	68fb      	ldr	r3, [r7, #12]
   2226e:	2b00      	cmp	r3, #0
   22270:	d017      	beq.n	222a2 <appServerSetSigningInfo+0x4a>
   22272:	2200      	movs	r2, #0
   22274:	2108      	movs	r1, #8
   22276:	68f8      	ldr	r0, [r7, #12]
   22278:	f7f7 f9c2 	bl	19600 <AppDbGetKey>
   2227c:	60b8      	str	r0, [r7, #8]
   2227e:	68bb      	ldr	r3, [r7, #8]
   22280:	2b00      	cmp	r3, #0
   22282:	d00e      	beq.n	222a2 <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   22284:	68ba      	ldr	r2, [r7, #8]
   22286:	79fb      	ldrb	r3, [r7, #7]
   22288:	4611      	mov	r1, r2
   2228a:	4618      	mov	r0, r3
   2228c:	f7ec fede 	bl	f04c <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   22290:	68f8      	ldr	r0, [r7, #12]
   22292:	f7f7 fa9c 	bl	197ce <AppDbGetPeerSignCounter>
   22296:	4602      	mov	r2, r0
   22298:	79fb      	ldrb	r3, [r7, #7]
   2229a:	4611      	mov	r1, r2
   2229c:	4618      	mov	r0, r3
   2229e:	f7ec fedf 	bl	f060 <AttsSetSignCounter>
  }
}
   222a2:	bf00      	nop
   222a4:	3710      	adds	r7, #16
   222a6:	46bd      	mov	sp, r7
   222a8:	bd80      	pop	{r7, pc}

000222aa <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   222aa:	b580      	push	{r7, lr}
   222ac:	b084      	sub	sp, #16
   222ae:	af00      	add	r7, sp, #0
   222b0:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   222b2:	687b      	ldr	r3, [r7, #4]
   222b4:	881b      	ldrh	r3, [r3, #0]
   222b6:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   222b8:	687b      	ldr	r3, [r7, #4]
   222ba:	789b      	ldrb	r3, [r3, #2]
   222bc:	2b27      	cmp	r3, #39	; 0x27
   222be:	d109      	bne.n	222d4 <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   222c0:	7bfb      	ldrb	r3, [r7, #15]
   222c2:	2100      	movs	r1, #0
   222c4:	4618      	mov	r0, r3
   222c6:	f7eb fcc3 	bl	dc50 <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   222ca:	7bfb      	ldrb	r3, [r7, #15]
   222cc:	4618      	mov	r0, r3
   222ce:	f7ff ffc3 	bl	22258 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   222d2:	e067      	b.n	223a4 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   222d4:	687b      	ldr	r3, [r7, #4]
   222d6:	789b      	ldrb	r3, [r3, #2]
   222d8:	2b2a      	cmp	r3, #42	; 0x2a
   222da:	d129      	bne.n	22330 <AppServerConnCback+0x86>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   222dc:	687b      	ldr	r3, [r7, #4]
   222de:	791b      	ldrb	r3, [r3, #4]
   222e0:	f003 0301 	and.w	r3, r3, #1
   222e4:	2b00      	cmp	r3, #0
   222e6:	bf14      	ite	ne
   222e8:	2301      	movne	r3, #1
   222ea:	2300      	moveq	r3, #0
   222ec:	b2db      	uxtb	r3, r3
   222ee:	73bb      	strb	r3, [r7, #14]
    if (bonded && (appCheckBonded(connId) == FALSE))
   222f0:	7bbb      	ldrb	r3, [r7, #14]
   222f2:	2b00      	cmp	r3, #0
   222f4:	d017      	beq.n	22326 <AppServerConnCback+0x7c>
   222f6:	7bfb      	ldrb	r3, [r7, #15]
   222f8:	4618      	mov	r0, r3
   222fa:	f7ff fe2f 	bl	21f5c <appCheckBonded>
   222fe:	4603      	mov	r3, r0
   22300:	2b00      	cmp	r3, #0
   22302:	d110      	bne.n	22326 <AppServerConnCback+0x7c>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   22304:	7bfb      	ldrb	r3, [r7, #15]
   22306:	4618      	mov	r0, r3
   22308:	f7ff ff30 	bl	2216c <AppDbGetHdl>
   2230c:	60b8      	str	r0, [r7, #8]
   2230e:	68bb      	ldr	r3, [r7, #8]
   22310:	2b00      	cmp	r3, #0
   22312:	d008      	beq.n	22326 <AppServerConnCback+0x7c>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   22314:	68b8      	ldr	r0, [r7, #8]
   22316:	f7f7 fa39 	bl	1978c <AppDbGetCccTbl>
   2231a:	4602      	mov	r2, r0
   2231c:	7bfb      	ldrb	r3, [r7, #15]
   2231e:	4611      	mov	r1, r2
   22320:	4618      	mov	r0, r3
   22322:	f7eb fc95 	bl	dc50 <AttsCccInitTable>
    appServerSetSigningInfo(connId);
   22326:	7bfb      	ldrb	r3, [r7, #15]
   22328:	4618      	mov	r0, r3
   2232a:	f7ff ff95 	bl	22258 <appServerSetSigningInfo>
}
   2232e:	e039      	b.n	223a4 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   22330:	687b      	ldr	r3, [r7, #4]
   22332:	789b      	ldrb	r3, [r3, #2]
   22334:	2b2c      	cmp	r3, #44	; 0x2c
   22336:	d11c      	bne.n	22372 <AppServerConnCback+0xc8>
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   22338:	687b      	ldr	r3, [r7, #4]
   2233a:	791b      	ldrb	r3, [r3, #4]
   2233c:	2b00      	cmp	r3, #0
   2233e:	d031      	beq.n	223a4 <AppServerConnCback+0xfa>
   22340:	7bfb      	ldrb	r3, [r7, #15]
   22342:	4618      	mov	r0, r3
   22344:	f7ff fe1e 	bl	21f84 <appCheckBondByLtk>
   22348:	4603      	mov	r3, r0
   2234a:	2b00      	cmp	r3, #0
   2234c:	d02a      	beq.n	223a4 <AppServerConnCback+0xfa>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   2234e:	7bfb      	ldrb	r3, [r7, #15]
   22350:	4618      	mov	r0, r3
   22352:	f7ff ff0b 	bl	2216c <AppDbGetHdl>
   22356:	60b8      	str	r0, [r7, #8]
   22358:	68bb      	ldr	r3, [r7, #8]
   2235a:	2b00      	cmp	r3, #0
   2235c:	d022      	beq.n	223a4 <AppServerConnCback+0xfa>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   2235e:	68b8      	ldr	r0, [r7, #8]
   22360:	f7f7 fa14 	bl	1978c <AppDbGetCccTbl>
   22364:	4602      	mov	r2, r0
   22366:	7bfb      	ldrb	r3, [r7, #15]
   22368:	4611      	mov	r1, r2
   2236a:	4618      	mov	r0, r3
   2236c:	f7eb fc70 	bl	dc50 <AttsCccInitTable>
}
   22370:	e018      	b.n	223a4 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   22372:	687b      	ldr	r3, [r7, #4]
   22374:	789b      	ldrb	r3, [r3, #2]
   22376:	2b28      	cmp	r3, #40	; 0x28
   22378:	d114      	bne.n	223a4 <AppServerConnCback+0xfa>
    AttsCccClearTable(connId);
   2237a:	7bfb      	ldrb	r3, [r7, #15]
   2237c:	4618      	mov	r0, r3
   2237e:	f7eb fca9 	bl	dcd4 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   22382:	7bfb      	ldrb	r3, [r7, #15]
   22384:	4618      	mov	r0, r3
   22386:	f7ff fef1 	bl	2216c <AppDbGetHdl>
   2238a:	60b8      	str	r0, [r7, #8]
   2238c:	68bb      	ldr	r3, [r7, #8]
   2238e:	2b00      	cmp	r3, #0
   22390:	d008      	beq.n	223a4 <AppServerConnCback+0xfa>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   22392:	7bfb      	ldrb	r3, [r7, #15]
   22394:	4618      	mov	r0, r3
   22396:	f7ec fe6b 	bl	f070 <AttsGetSignCounter>
   2239a:	4603      	mov	r3, r0
   2239c:	4619      	mov	r1, r3
   2239e:	68b8      	ldr	r0, [r7, #8]
   223a0:	f7f7 fa22 	bl	197e8 <AppDbSetPeerSignCounter>
}
   223a4:	bf00      	nop
   223a6:	3710      	adds	r7, #16
   223a8:	46bd      	mov	sp, r7
   223aa:	bd80      	pop	{r7, pc}

000223ac <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   223ac:	b480      	push	{r7}
   223ae:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   223b0:	4b05      	ldr	r3, [pc, #20]	; (223c8 <appSlaveAdvModeInit+0x1c>)
   223b2:	2200      	movs	r2, #0
   223b4:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   223b6:	4b04      	ldr	r3, [pc, #16]	; (223c8 <appSlaveAdvModeInit+0x1c>)
   223b8:	2200      	movs	r2, #0
   223ba:	645a      	str	r2, [r3, #68]	; 0x44
}
   223bc:	bf00      	nop
   223be:	46bd      	mov	sp, r7
   223c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   223c4:	4770      	bx	lr
   223c6:	bf00      	nop
   223c8:	10044f20 	.word	0x10044f20

000223cc <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   223cc:	b480      	push	{r7}
   223ce:	b085      	sub	sp, #20
   223d0:	af00      	add	r7, sp, #0
   223d2:	4603      	mov	r3, r0
   223d4:	6039      	str	r1, [r7, #0]
   223d6:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   223d8:	2300      	movs	r3, #0
   223da:	73fb      	strb	r3, [r7, #15]
   223dc:	e022      	b.n	22424 <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   223de:	2300      	movs	r3, #0
   223e0:	73bb      	strb	r3, [r7, #14]
   223e2:	e019      	b.n	22418 <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   223e4:	7bfb      	ldrb	r3, [r7, #15]
   223e6:	683a      	ldr	r2, [r7, #0]
   223e8:	4413      	add	r3, r2
   223ea:	781b      	ldrb	r3, [r3, #0]
   223ec:	7bba      	ldrb	r2, [r7, #14]
   223ee:	429a      	cmp	r2, r3
   223f0:	d10f      	bne.n	22412 <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   223f2:	7bbb      	ldrb	r3, [r7, #14]
   223f4:	4a11      	ldr	r2, [pc, #68]	; (2243c <appSlaveConnectableAdv+0x70>)
   223f6:	4413      	add	r3, r2
   223f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                            &&
   223fc:	2b00      	cmp	r3, #0
   223fe:	d006      	beq.n	2240e <appSlaveConnectableAdv+0x42>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   22400:	7bbb      	ldrb	r3, [r7, #14]
   22402:	4a0e      	ldr	r2, [pc, #56]	; (2243c <appSlaveConnectableAdv+0x70>)
   22404:	4413      	add	r3, r2
   22406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   2240a:	2b05      	cmp	r3, #5
   2240c:	d101      	bne.n	22412 <appSlaveConnectableAdv+0x46>
      {
        return TRUE;
   2240e:	2301      	movs	r3, #1
   22410:	e00d      	b.n	2242e <appSlaveConnectableAdv+0x62>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   22412:	7bbb      	ldrb	r3, [r7, #14]
   22414:	3301      	adds	r3, #1
   22416:	73bb      	strb	r3, [r7, #14]
   22418:	7bbb      	ldrb	r3, [r7, #14]
   2241a:	2b00      	cmp	r3, #0
   2241c:	d0e2      	beq.n	223e4 <appSlaveConnectableAdv+0x18>
  for (i = 0; i < numSets; i++)
   2241e:	7bfb      	ldrb	r3, [r7, #15]
   22420:	3301      	adds	r3, #1
   22422:	73fb      	strb	r3, [r7, #15]
   22424:	7bfa      	ldrb	r2, [r7, #15]
   22426:	79fb      	ldrb	r3, [r7, #7]
   22428:	429a      	cmp	r2, r3
   2242a:	d3d8      	bcc.n	223de <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   2242c:	2300      	movs	r3, #0
}
   2242e:	4618      	mov	r0, r3
   22430:	3714      	adds	r7, #20
   22432:	46bd      	mov	sp, r7
   22434:	f85d 7b04 	ldr.w	r7, [sp], #4
   22438:	4770      	bx	lr
   2243a:	bf00      	nop
   2243c:	10044f20 	.word	0x10044f20

00022440 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   22440:	b480      	push	{r7}
   22442:	b085      	sub	sp, #20
   22444:	af00      	add	r7, sp, #0
   22446:	4603      	mov	r3, r0
   22448:	460a      	mov	r2, r1
   2244a:	71fb      	strb	r3, [r7, #7]
   2244c:	4613      	mov	r3, r2
   2244e:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   22450:	79bb      	ldrb	r3, [r7, #6]
   22452:	005b      	lsls	r3, r3, #1
   22454:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   22456:	79bb      	ldrb	r3, [r7, #6]
   22458:	005b      	lsls	r3, r3, #1
   2245a:	b2db      	uxtb	r3, r3
   2245c:	3301      	adds	r3, #1
   2245e:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   22460:	79fa      	ldrb	r2, [r7, #7]
   22462:	7bfb      	ldrb	r3, [r7, #15]
   22464:	490d      	ldr	r1, [pc, #52]	; (2249c <appSlaveForceAdvDataSync+0x5c>)
   22466:	0092      	lsls	r2, r2, #2
   22468:	4413      	add	r3, r2
   2246a:	3310      	adds	r3, #16
   2246c:	2200      	movs	r2, #0
   2246e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   22472:	79fa      	ldrb	r2, [r7, #7]
   22474:	7bbb      	ldrb	r3, [r7, #14]
   22476:	4909      	ldr	r1, [pc, #36]	; (2249c <appSlaveForceAdvDataSync+0x5c>)
   22478:	0092      	lsls	r2, r2, #2
   2247a:	4413      	add	r3, r2
   2247c:	3310      	adds	r3, #16
   2247e:	2200      	movs	r2, #0
   22480:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   22484:	79fb      	ldrb	r3, [r7, #7]
   22486:	4a05      	ldr	r2, [pc, #20]	; (2249c <appSlaveForceAdvDataSync+0x5c>)
   22488:	4413      	add	r3, r2
   2248a:	2200      	movs	r2, #0
   2248c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   22490:	bf00      	nop
   22492:	3714      	adds	r7, #20
   22494:	46bd      	mov	sp, r7
   22496:	f85d 7b04 	ldr.w	r7, [sp], #4
   2249a:	4770      	bx	lr
   2249c:	10044f20 	.word	0x10044f20

000224a0 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   224a0:	b5b0      	push	{r4, r5, r7, lr}
   224a2:	b088      	sub	sp, #32
   224a4:	af02      	add	r7, sp, #8
   224a6:	4603      	mov	r3, r0
   224a8:	460a      	mov	r2, r1
   224aa:	71fb      	strb	r3, [r7, #7]
   224ac:	4613      	mov	r3, r2
   224ae:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   224b0:	2301      	movs	r3, #1
   224b2:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   224b4:	79fa      	ldrb	r2, [r7, #7]
   224b6:	79bb      	ldrb	r3, [r7, #6]
   224b8:	493a      	ldr	r1, [pc, #232]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   224ba:	0092      	lsls	r2, r2, #2
   224bc:	4413      	add	r3, r2
   224be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   224c2:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   224c4:	79fa      	ldrb	r2, [r7, #7]
   224c6:	79bb      	ldrb	r3, [r7, #6]
   224c8:	4936      	ldr	r1, [pc, #216]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   224ca:	0092      	lsls	r2, r2, #2
   224cc:	4413      	add	r3, r2
   224ce:	3308      	adds	r3, #8
   224d0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   224d4:	79f9      	ldrb	r1, [r7, #7]
   224d6:	79bb      	ldrb	r3, [r7, #6]
   224d8:	4832      	ldr	r0, [pc, #200]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   224da:	0089      	lsls	r1, r1, #2
   224dc:	440b      	add	r3, r1
   224de:	3310      	adds	r3, #16
   224e0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   224e4:	1ad3      	subs	r3, r2, r3
   224e6:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   224e8:	79fb      	ldrb	r3, [r7, #7]
   224ea:	4a2e      	ldr	r2, [pc, #184]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   224ec:	3314      	adds	r3, #20
   224ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   224f2:	8a7a      	ldrh	r2, [r7, #18]
   224f4:	429a      	cmp	r2, r3
   224f6:	d94e      	bls.n	22596 <appSetAdvScanDataFrag+0xf6>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   224f8:	79fb      	ldrb	r3, [r7, #7]
   224fa:	4a2a      	ldr	r2, [pc, #168]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   224fc:	3314      	adds	r3, #20
   224fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   22502:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   22504:	e047      	b.n	22596 <appSetAdvScanDataFrag+0xf6>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   22506:	8a7b      	ldrh	r3, [r7, #18]
   22508:	2bfb      	cmp	r3, #251	; 0xfb
   2250a:	d909      	bls.n	22520 <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   2250c:	23fb      	movs	r3, #251	; 0xfb
   2250e:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   22510:	7c7b      	ldrb	r3, [r7, #17]
   22512:	2b00      	cmp	r3, #0
   22514:	bf14      	ite	ne
   22516:	2301      	movne	r3, #1
   22518:	2300      	moveq	r3, #0
   2251a:	b2db      	uxtb	r3, r3
   2251c:	75fb      	strb	r3, [r7, #23]
   2251e:	e008      	b.n	22532 <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   22520:	8a7b      	ldrh	r3, [r7, #18]
   22522:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   22524:	7c7b      	ldrb	r3, [r7, #17]
   22526:	2b00      	cmp	r3, #0
   22528:	d001      	beq.n	2252e <appSetAdvScanDataFrag+0x8e>
   2252a:	2303      	movs	r3, #3
   2252c:	e000      	b.n	22530 <appSetAdvScanDataFrag+0x90>
   2252e:	2302      	movs	r3, #2
   22530:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   22532:	79bb      	ldrb	r3, [r7, #6]
   22534:	f003 0301 	and.w	r3, r3, #1
   22538:	b2dc      	uxtb	r4, r3
   2253a:	8abb      	ldrh	r3, [r7, #20]
   2253c:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   2253e:	79fa      	ldrb	r2, [r7, #7]
   22540:	79bb      	ldrb	r3, [r7, #6]
   22542:	4918      	ldr	r1, [pc, #96]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   22544:	0092      	lsls	r2, r2, #2
   22546:	4413      	add	r3, r2
   22548:	3310      	adds	r3, #16
   2254a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   2254e:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   22550:	68fb      	ldr	r3, [r7, #12]
   22552:	4413      	add	r3, r2
   22554:	7df9      	ldrb	r1, [r7, #23]
   22556:	79f8      	ldrb	r0, [r7, #7]
   22558:	9300      	str	r3, [sp, #0]
   2255a:	462b      	mov	r3, r5
   2255c:	4622      	mov	r2, r4
   2255e:	f7ec ff6f 	bl	f440 <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   22562:	79fa      	ldrb	r2, [r7, #7]
   22564:	79bb      	ldrb	r3, [r7, #6]
   22566:	79f8      	ldrb	r0, [r7, #7]
   22568:	79b9      	ldrb	r1, [r7, #6]
   2256a:	4c0e      	ldr	r4, [pc, #56]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   2256c:	0080      	lsls	r0, r0, #2
   2256e:	4401      	add	r1, r0
   22570:	3110      	adds	r1, #16
   22572:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   22576:	8ab9      	ldrh	r1, [r7, #20]
   22578:	4401      	add	r1, r0
   2257a:	b288      	uxth	r0, r1
   2257c:	4909      	ldr	r1, [pc, #36]	; (225a4 <appSetAdvScanDataFrag+0x104>)
   2257e:	0092      	lsls	r2, r2, #2
   22580:	4413      	add	r3, r2
   22582:	3310      	adds	r3, #16
   22584:	4602      	mov	r2, r0
   22586:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   2258a:	8a7a      	ldrh	r2, [r7, #18]
   2258c:	8abb      	ldrh	r3, [r7, #20]
   2258e:	1ad3      	subs	r3, r2, r3
   22590:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   22592:	2300      	movs	r3, #0
   22594:	747b      	strb	r3, [r7, #17]
  while (remainLen > 0)
   22596:	8a7b      	ldrh	r3, [r7, #18]
   22598:	2b00      	cmp	r3, #0
   2259a:	d1b4      	bne.n	22506 <appSetAdvScanDataFrag+0x66>
  }
}
   2259c:	bf00      	nop
   2259e:	3718      	adds	r7, #24
   225a0:	46bd      	mov	sp, r7
   225a2:	bdb0      	pop	{r4, r5, r7, pc}
   225a4:	10044f20 	.word	0x10044f20

000225a8 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   225a8:	b580      	push	{r7, lr}
   225aa:	b084      	sub	sp, #16
   225ac:	af00      	add	r7, sp, #0
   225ae:	4603      	mov	r3, r0
   225b0:	460a      	mov	r2, r1
   225b2:	71fb      	strb	r3, [r7, #7]
   225b4:	4613      	mov	r3, r2
   225b6:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   225b8:	79bb      	ldrb	r3, [r7, #6]
   225ba:	005b      	lsls	r3, r3, #1
   225bc:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   225be:	79bb      	ldrb	r3, [r7, #6]
   225c0:	005b      	lsls	r3, r3, #1
   225c2:	b2db      	uxtb	r3, r3
   225c4:	3301      	adds	r3, #1
   225c6:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   225c8:	79fa      	ldrb	r2, [r7, #7]
   225ca:	7bfb      	ldrb	r3, [r7, #15]
   225cc:	492d      	ldr	r1, [pc, #180]	; (22684 <appSetAdvScanData+0xdc>)
   225ce:	0092      	lsls	r2, r2, #2
   225d0:	4413      	add	r3, r2
   225d2:	3310      	adds	r3, #16
   225d4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   225d8:	79f9      	ldrb	r1, [r7, #7]
   225da:	7bfb      	ldrb	r3, [r7, #15]
   225dc:	4829      	ldr	r0, [pc, #164]	; (22684 <appSetAdvScanData+0xdc>)
   225de:	0089      	lsls	r1, r1, #2
   225e0:	440b      	add	r3, r1
   225e2:	3308      	adds	r3, #8
   225e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   225e8:	429a      	cmp	r2, r3
   225ea:	d205      	bcs.n	225f8 <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   225ec:	7bfa      	ldrb	r2, [r7, #15]
   225ee:	79fb      	ldrb	r3, [r7, #7]
   225f0:	4611      	mov	r1, r2
   225f2:	4618      	mov	r0, r3
   225f4:	f7ff ff54 	bl	224a0 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   225f8:	79fa      	ldrb	r2, [r7, #7]
   225fa:	7bbb      	ldrb	r3, [r7, #14]
   225fc:	4921      	ldr	r1, [pc, #132]	; (22684 <appSetAdvScanData+0xdc>)
   225fe:	0092      	lsls	r2, r2, #2
   22600:	4413      	add	r3, r2
   22602:	3310      	adds	r3, #16
   22604:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   22608:	79f9      	ldrb	r1, [r7, #7]
   2260a:	7bbb      	ldrb	r3, [r7, #14]
   2260c:	481d      	ldr	r0, [pc, #116]	; (22684 <appSetAdvScanData+0xdc>)
   2260e:	0089      	lsls	r1, r1, #2
   22610:	440b      	add	r3, r1
   22612:	3308      	adds	r3, #8
   22614:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   22618:	429a      	cmp	r2, r3
   2261a:	d205      	bcs.n	22628 <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   2261c:	7bba      	ldrb	r2, [r7, #14]
   2261e:	79fb      	ldrb	r3, [r7, #7]
   22620:	4611      	mov	r1, r2
   22622:	4618      	mov	r0, r3
   22624:	f7ff ff3c 	bl	224a0 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   22628:	79fa      	ldrb	r2, [r7, #7]
   2262a:	7bfb      	ldrb	r3, [r7, #15]
   2262c:	4915      	ldr	r1, [pc, #84]	; (22684 <appSetAdvScanData+0xdc>)
   2262e:	0092      	lsls	r2, r2, #2
   22630:	4413      	add	r3, r2
   22632:	3310      	adds	r3, #16
   22634:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   22638:	79f9      	ldrb	r1, [r7, #7]
   2263a:	7bfb      	ldrb	r3, [r7, #15]
   2263c:	4811      	ldr	r0, [pc, #68]	; (22684 <appSetAdvScanData+0xdc>)
   2263e:	0089      	lsls	r1, r1, #2
   22640:	440b      	add	r3, r1
   22642:	3308      	adds	r3, #8
   22644:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   22648:	429a      	cmp	r2, r3
   2264a:	d317      	bcc.n	2267c <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   2264c:	79fa      	ldrb	r2, [r7, #7]
   2264e:	7bbb      	ldrb	r3, [r7, #14]
   22650:	490c      	ldr	r1, [pc, #48]	; (22684 <appSetAdvScanData+0xdc>)
   22652:	0092      	lsls	r2, r2, #2
   22654:	4413      	add	r3, r2
   22656:	3310      	adds	r3, #16
   22658:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   2265c:	79f9      	ldrb	r1, [r7, #7]
   2265e:	7bbb      	ldrb	r3, [r7, #14]
   22660:	4808      	ldr	r0, [pc, #32]	; (22684 <appSetAdvScanData+0xdc>)
   22662:	0089      	lsls	r1, r1, #2
   22664:	440b      	add	r3, r1
   22666:	3308      	adds	r3, #8
   22668:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   2266c:	429a      	cmp	r2, r3
   2266e:	d305      	bcc.n	2267c <appSetAdvScanData+0xd4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   22670:	79fb      	ldrb	r3, [r7, #7]
   22672:	4a04      	ldr	r2, [pc, #16]	; (22684 <appSetAdvScanData+0xdc>)
   22674:	4413      	add	r3, r2
   22676:	2201      	movs	r2, #1
   22678:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   2267c:	bf00      	nop
   2267e:	3710      	adds	r7, #16
   22680:	46bd      	mov	sp, r7
   22682:	bd80      	pop	{r7, pc}
   22684:	10044f20 	.word	0x10044f20

00022688 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   22688:	b580      	push	{r7, lr}
   2268a:	b084      	sub	sp, #16
   2268c:	af00      	add	r7, sp, #0
   2268e:	4603      	mov	r3, r0
   22690:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   22692:	79fb      	ldrb	r3, [r7, #7]
   22694:	3b01      	subs	r3, #1
   22696:	015b      	lsls	r3, r3, #5
   22698:	4a0d      	ldr	r2, [pc, #52]	; (226d0 <appConnUpdateTimerStart+0x48>)
   2269a:	4413      	add	r3, r2
   2269c:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   2269e:	4b0d      	ldr	r3, [pc, #52]	; (226d4 <appConnUpdateTimerStart+0x4c>)
   226a0:	781a      	ldrb	r2, [r3, #0]
   226a2:	68fb      	ldr	r3, [r7, #12]
   226a4:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   226a6:	68fb      	ldr	r3, [r7, #12]
   226a8:	2210      	movs	r2, #16
   226aa:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   226ac:	79fb      	ldrb	r3, [r7, #7]
   226ae:	b29a      	uxth	r2, r3
   226b0:	68fb      	ldr	r3, [r7, #12]
   226b2:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   226b4:	68fb      	ldr	r3, [r7, #12]
   226b6:	f103 0210 	add.w	r2, r3, #16
   226ba:	4b07      	ldr	r3, [pc, #28]	; (226d8 <appConnUpdateTimerStart+0x50>)
   226bc:	681b      	ldr	r3, [r3, #0]
   226be:	681b      	ldr	r3, [r3, #0]
   226c0:	4619      	mov	r1, r3
   226c2:	4610      	mov	r0, r2
   226c4:	f7f8 fb68 	bl	1ad98 <WsfTimerStartMs>
}
   226c8:	bf00      	nop
   226ca:	3710      	adds	r7, #16
   226cc:	46bd      	mov	sp, r7
   226ce:	bd80      	pop	{r7, pc}
   226d0:	10044e20 	.word	0x10044e20
   226d4:	10044e0c 	.word	0x10044e0c
   226d8:	10044df4 	.word	0x10044df4

000226dc <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   226dc:	b580      	push	{r7, lr}
   226de:	b082      	sub	sp, #8
   226e0:	af00      	add	r7, sp, #0
   226e2:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   226e4:	4b06      	ldr	r3, [pc, #24]	; (22700 <appConnUpdateTimerStop+0x24>)
   226e6:	681b      	ldr	r3, [r3, #0]
   226e8:	681b      	ldr	r3, [r3, #0]
   226ea:	2b00      	cmp	r3, #0
   226ec:	d004      	beq.n	226f8 <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   226ee:	687b      	ldr	r3, [r7, #4]
   226f0:	3310      	adds	r3, #16
   226f2:	4618      	mov	r0, r3
   226f4:	f7f8 fb64 	bl	1adc0 <WsfTimerStop>
  }  
}
   226f8:	bf00      	nop
   226fa:	3708      	adds	r7, #8
   226fc:	46bd      	mov	sp, r7
   226fe:	bd80      	pop	{r7, pc}
   22700:	10044df4 	.word	0x10044df4

00022704 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   22704:	b580      	push	{r7, lr}
   22706:	b084      	sub	sp, #16
   22708:	af00      	add	r7, sp, #0
   2270a:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   2270c:	4b16      	ldr	r3, [pc, #88]	; (22768 <appSlaveResolveAddr+0x64>)
   2270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   22712:	2b00      	cmp	r3, #0
   22714:	d124      	bne.n	22760 <appSlaveResolveAddr+0x5c>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   22716:	2000      	movs	r0, #0
   22718:	f7f6 fe56 	bl	193c8 <AppDbGetNextRecord>
   2271c:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   2271e:	68fb      	ldr	r3, [r7, #12]
   22720:	2b00      	cmp	r3, #0
   22722:	d01e      	beq.n	22762 <appSlaveResolveAddr+0x5e>
   22724:	2200      	movs	r2, #0
   22726:	2104      	movs	r1, #4
   22728:	68f8      	ldr	r0, [r7, #12]
   2272a:	f7f6 ff69 	bl	19600 <AppDbGetKey>
   2272e:	60b8      	str	r0, [r7, #8]
   22730:	68bb      	ldr	r3, [r7, #8]
   22732:	2b00      	cmp	r3, #0
   22734:	d015      	beq.n	22762 <appSlaveResolveAddr+0x5e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   22736:	687b      	ldr	r3, [r7, #4]
   22738:	f103 000a 	add.w	r0, r3, #10
   2273c:	68b9      	ldr	r1, [r7, #8]
   2273e:	687b      	ldr	r3, [r7, #4]
   22740:	881b      	ldrh	r3, [r3, #0]
   22742:	461a      	mov	r2, r3
   22744:	f7ed ffe8 	bl	10718 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   22748:	4a07      	ldr	r2, [pc, #28]	; (22768 <appSlaveResolveAddr+0x64>)
   2274a:	68fb      	ldr	r3, [r7, #12]
   2274c:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   2274e:	4b06      	ldr	r3, [pc, #24]	; (22768 <appSlaveResolveAddr+0x64>)
   22750:	2201      	movs	r2, #1
   22752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   22756:	4b04      	ldr	r3, [pc, #16]	; (22768 <appSlaveResolveAddr+0x64>)
   22758:	2200      	movs	r2, #0
   2275a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   2275e:	e000      	b.n	22762 <appSlaveResolveAddr+0x5e>
    return;
   22760:	bf00      	nop
  }
}
   22762:	3710      	adds	r7, #16
   22764:	46bd      	mov	sp, r7
   22766:	bd80      	pop	{r7, pc}
   22768:	10044f20 	.word	0x10044f20

0002276c <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   2276c:	b580      	push	{r7, lr}
   2276e:	b084      	sub	sp, #16
   22770:	af00      	add	r7, sp, #0
   22772:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   22774:	2300      	movs	r3, #0
   22776:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   22778:	687b      	ldr	r3, [r7, #4]
   2277a:	681b      	ldr	r3, [r3, #0]
   2277c:	2b00      	cmp	r3, #0
   2277e:	d008      	beq.n	22792 <appSecRspLtk+0x26>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   22780:	687b      	ldr	r3, [r7, #4]
   22782:	681b      	ldr	r3, [r3, #0]
   22784:	f107 020b 	add.w	r2, r7, #11
   22788:	2101      	movs	r1, #1
   2278a:	4618      	mov	r0, r3
   2278c:	f7f6 ff38 	bl	19600 <AppDbGetKey>
   22790:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   22792:	68fb      	ldr	r3, [r7, #12]
   22794:	2b00      	cmp	r3, #0
   22796:	d011      	beq.n	227bc <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   22798:	687b      	ldr	r3, [r7, #4]
   2279a:	795b      	ldrb	r3, [r3, #5]
   2279c:	2b00      	cmp	r3, #0
   2279e:	bf0c      	ite	eq
   227a0:	2301      	moveq	r3, #1
   227a2:	2300      	movne	r3, #0
   227a4:	b2db      	uxtb	r3, r3
   227a6:	461a      	mov	r2, r3
   227a8:	687b      	ldr	r3, [r7, #4]
   227aa:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   227ac:	687b      	ldr	r3, [r7, #4]
   227ae:	7918      	ldrb	r0, [r3, #4]
   227b0:	7afa      	ldrb	r2, [r7, #11]
   227b2:	68fb      	ldr	r3, [r7, #12]
   227b4:	2101      	movs	r1, #1
   227b6:	f7ee face 	bl	10d56 <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   227ba:	e009      	b.n	227d0 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   227bc:	687b      	ldr	r3, [r7, #4]
   227be:	2200      	movs	r2, #0
   227c0:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   227c2:	687b      	ldr	r3, [r7, #4]
   227c4:	7918      	ldrb	r0, [r3, #4]
   227c6:	2300      	movs	r3, #0
   227c8:	2200      	movs	r2, #0
   227ca:	2100      	movs	r1, #0
   227cc:	f7ee fac3 	bl	10d56 <DmSecLtkRsp>
}
   227d0:	bf00      	nop
   227d2:	3710      	adds	r7, #16
   227d4:	46bd      	mov	sp, r7
   227d6:	bd80      	pop	{r7, pc}

000227d8 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   227d8:	b580      	push	{r7, lr}
   227da:	b082      	sub	sp, #8
   227dc:	af00      	add	r7, sp, #0
   227de:	6078      	str	r0, [r7, #4]
   227e0:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   227e2:	6839      	ldr	r1, [r7, #0]
   227e4:	6878      	ldr	r0, [r7, #4]
   227e6:	f000 f83f 	bl	22868 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   227ea:	4b06      	ldr	r3, [pc, #24]	; (22804 <appSlaveConnOpen+0x2c>)
   227ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   227ee:	2b00      	cmp	r3, #0
   227f0:	d003      	beq.n	227fa <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   227f2:	4b04      	ldr	r3, [pc, #16]	; (22804 <appSlaveConnOpen+0x2c>)
   227f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   227f6:	6878      	ldr	r0, [r7, #4]
   227f8:	4798      	blx	r3
  }
}
   227fa:	bf00      	nop
   227fc:	3708      	adds	r7, #8
   227fe:	46bd      	mov	sp, r7
   22800:	bd80      	pop	{r7, pc}
   22802:	bf00      	nop
   22804:	10044f20 	.word	0x10044f20

00022808 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22808:	b580      	push	{r7, lr}
   2280a:	b084      	sub	sp, #16
   2280c:	af00      	add	r7, sp, #0
   2280e:	6078      	str	r0, [r7, #4]
   22810:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   22812:	683b      	ldr	r3, [r7, #0]
   22814:	681b      	ldr	r3, [r3, #0]
   22816:	4618      	mov	r0, r3
   22818:	f7ff fcf2 	bl	22200 <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   2281c:	687b      	ldr	r3, [r7, #4]
   2281e:	78db      	ldrb	r3, [r3, #3]
   22820:	2b3c      	cmp	r3, #60	; 0x3c
   22822:	d10f      	bne.n	22844 <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   22824:	2300      	movs	r3, #0
   22826:	73fb      	strb	r3, [r7, #15]
   22828:	e008      	b.n	2283c <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   2282a:	7bfb      	ldrb	r3, [r7, #15]
   2282c:	4a0d      	ldr	r2, [pc, #52]	; (22864 <appSlaveConnClose+0x5c>)
   2282e:	4413      	add	r3, r2
   22830:	2203      	movs	r2, #3
   22832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   22836:	7bfb      	ldrb	r3, [r7, #15]
   22838:	3301      	adds	r3, #1
   2283a:	73fb      	strb	r3, [r7, #15]
   2283c:	7bfb      	ldrb	r3, [r7, #15]
   2283e:	2b00      	cmp	r3, #0
   22840:	d0f3      	beq.n	2282a <appSlaveConnClose+0x22>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
    }
  }
}
   22842:	e00b      	b.n	2285c <appSlaveConnClose+0x54>
    appSlaveProcConnClose(pMsg, pCb);
   22844:	6839      	ldr	r1, [r7, #0]
   22846:	6878      	ldr	r0, [r7, #4]
   22848:	f000 f84a 	bl	228e0 <appSlaveProcConnClose>
    if (appSlaveCb.advRestartCback != NULL)
   2284c:	4b05      	ldr	r3, [pc, #20]	; (22864 <appSlaveConnClose+0x5c>)
   2284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   22850:	2b00      	cmp	r3, #0
   22852:	d003      	beq.n	2285c <appSlaveConnClose+0x54>
      (*appSlaveCb.advRestartCback)(pMsg);
   22854:	4b03      	ldr	r3, [pc, #12]	; (22864 <appSlaveConnClose+0x5c>)
   22856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   22858:	6878      	ldr	r0, [r7, #4]
   2285a:	4798      	blx	r3
}
   2285c:	bf00      	nop
   2285e:	3710      	adds	r7, #16
   22860:	46bd      	mov	sp, r7
   22862:	bd80      	pop	{r7, pc}
   22864:	10044f20 	.word	0x10044f20

00022868 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   22868:	b580      	push	{r7, lr}
   2286a:	b082      	sub	sp, #8
   2286c:	af00      	add	r7, sp, #0
   2286e:	6078      	str	r0, [r7, #4]
   22870:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   22872:	687b      	ldr	r3, [r7, #4]
   22874:	881b      	ldrh	r3, [r3, #0]
   22876:	b2da      	uxtb	r2, r3
   22878:	683b      	ldr	r3, [r7, #0]
   2287a:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   2287c:	4b17      	ldr	r3, [pc, #92]	; (228dc <appSlaveProcConnOpen+0x74>)
   2287e:	681b      	ldr	r3, [r3, #0]
   22880:	681b      	ldr	r3, [r3, #0]
   22882:	2b00      	cmp	r3, #0
   22884:	d026      	beq.n	228d4 <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   22886:	687b      	ldr	r3, [r7, #4]
   22888:	8a1a      	ldrh	r2, [r3, #16]
   2288a:	4b14      	ldr	r3, [pc, #80]	; (228dc <appSlaveProcConnOpen+0x74>)
   2288c:	681b      	ldr	r3, [r3, #0]
   2288e:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   22890:	429a      	cmp	r2, r3
   22892:	d314      	bcc.n	228be <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   22894:	687b      	ldr	r3, [r7, #4]
   22896:	8a1a      	ldrh	r2, [r3, #16]
   22898:	4b10      	ldr	r3, [pc, #64]	; (228dc <appSlaveProcConnOpen+0x74>)
   2289a:	681b      	ldr	r3, [r3, #0]
   2289c:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   2289e:	429a      	cmp	r2, r3
   228a0:	d80d      	bhi.n	228be <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   228a2:	687b      	ldr	r3, [r7, #4]
   228a4:	8a5a      	ldrh	r2, [r3, #18]
   228a6:	4b0d      	ldr	r3, [pc, #52]	; (228dc <appSlaveProcConnOpen+0x74>)
   228a8:	681b      	ldr	r3, [r3, #0]
   228aa:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   228ac:	429a      	cmp	r2, r3
   228ae:	d106      	bne.n	228be <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   228b0:	687b      	ldr	r3, [r7, #4]
   228b2:	8a9a      	ldrh	r2, [r3, #20]
   228b4:	4b09      	ldr	r3, [pc, #36]	; (228dc <appSlaveProcConnOpen+0x74>)
   228b6:	681b      	ldr	r3, [r3, #0]
   228b8:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   228ba:	429a      	cmp	r2, r3
   228bc:	d00a      	beq.n	228d4 <appSlaveProcConnOpen+0x6c>
  {
    pCb->connWasIdle = FALSE;
   228be:	683b      	ldr	r3, [r7, #0]
   228c0:	2200      	movs	r2, #0
   228c2:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   228c4:	683b      	ldr	r3, [r7, #0]
   228c6:	2200      	movs	r2, #0
   228c8:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   228ca:	683b      	ldr	r3, [r7, #0]
   228cc:	791b      	ldrb	r3, [r3, #4]
   228ce:	4618      	mov	r0, r3
   228d0:	f7ff feda 	bl	22688 <appConnUpdateTimerStart>
  }
}
   228d4:	bf00      	nop
   228d6:	3708      	adds	r7, #8
   228d8:	46bd      	mov	sp, r7
   228da:	bd80      	pop	{r7, pc}
   228dc:	10044df4 	.word	0x10044df4

000228e0 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   228e0:	b580      	push	{r7, lr}
   228e2:	b084      	sub	sp, #16
   228e4:	af00      	add	r7, sp, #0
   228e6:	6078      	str	r0, [r7, #4]
   228e8:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   228ea:	6838      	ldr	r0, [r7, #0]
   228ec:	f7ff fef6 	bl	226dc <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   228f0:	683b      	ldr	r3, [r7, #0]
   228f2:	2200      	movs	r2, #0
   228f4:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   228f6:	683b      	ldr	r3, [r7, #0]
   228f8:	2200      	movs	r2, #0
   228fa:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   228fc:	4b10      	ldr	r3, [pc, #64]	; (22940 <appSlaveProcConnClose+0x60>)
   228fe:	2200      	movs	r2, #0
   22900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   22904:	683b      	ldr	r3, [r7, #0]
   22906:	7a5b      	ldrb	r3, [r3, #9]
   22908:	2b00      	cmp	r3, #0
   2290a:	d014      	beq.n	22936 <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   2290c:	683b      	ldr	r3, [r7, #0]
   2290e:	2200      	movs	r2, #0
   22910:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   22912:	4b0b      	ldr	r3, [pc, #44]	; (22940 <appSlaveProcConnClose+0x60>)
   22914:	2200      	movs	r2, #0
   22916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   2291a:	2300      	movs	r3, #0
   2291c:	73fb      	strb	r3, [r7, #15]
   2291e:	e007      	b.n	22930 <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   22920:	7bfb      	ldrb	r3, [r7, #15]
   22922:	2100      	movs	r1, #0
   22924:	4618      	mov	r0, r3
   22926:	f7ff fd8b 	bl	22440 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   2292a:	7bfb      	ldrb	r3, [r7, #15]
   2292c:	3301      	adds	r3, #1
   2292e:	73fb      	strb	r3, [r7, #15]
   22930:	7bfb      	ldrb	r3, [r7, #15]
   22932:	2b00      	cmp	r3, #0
   22934:	d0f4      	beq.n	22920 <appSlaveProcConnClose+0x40>
    }
  }
}
   22936:	bf00      	nop
   22938:	3710      	adds	r7, #16
   2293a:	46bd      	mov	sp, r7
   2293c:	bd80      	pop	{r7, pc}
   2293e:	bf00      	nop
   22940:	10044f20 	.word	0x10044f20

00022944 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22944:	b580      	push	{r7, lr}
   22946:	b082      	sub	sp, #8
   22948:	af00      	add	r7, sp, #0
   2294a:	6078      	str	r0, [r7, #4]
   2294c:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   2294e:	4b1a      	ldr	r3, [pc, #104]	; (229b8 <appSlaveConnUpdate+0x74>)
   22950:	681b      	ldr	r3, [r3, #0]
   22952:	681b      	ldr	r3, [r3, #0]
   22954:	2b00      	cmp	r3, #0
   22956:	d02b      	beq.n	229b0 <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   22958:	687b      	ldr	r3, [r7, #4]
   2295a:	78db      	ldrb	r3, [r3, #3]
   2295c:	2b00      	cmp	r3, #0
   2295e:	d117      	bne.n	22990 <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   22960:	4b15      	ldr	r3, [pc, #84]	; (229b8 <appSlaveConnUpdate+0x74>)
   22962:	681b      	ldr	r3, [r3, #0]
   22964:	889a      	ldrh	r2, [r3, #4]
   22966:	687b      	ldr	r3, [r7, #4]
   22968:	891b      	ldrh	r3, [r3, #8]
   2296a:	429a      	cmp	r2, r3
   2296c:	d80a      	bhi.n	22984 <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   2296e:	4b12      	ldr	r3, [pc, #72]	; (229b8 <appSlaveConnUpdate+0x74>)
   22970:	681b      	ldr	r3, [r3, #0]
   22972:	88da      	ldrh	r2, [r3, #6]
   22974:	687b      	ldr	r3, [r7, #4]
   22976:	891b      	ldrh	r3, [r3, #8]
   22978:	429a      	cmp	r2, r3
   2297a:	d303      	bcc.n	22984 <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   2297c:	6838      	ldr	r0, [r7, #0]
   2297e:	f7ff fead 	bl	226dc <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   22982:	e015      	b.n	229b0 <appSlaveConnUpdate+0x6c>
        appConnUpdateTimerStart(pCb->connId);
   22984:	683b      	ldr	r3, [r7, #0]
   22986:	791b      	ldrb	r3, [r3, #4]
   22988:	4618      	mov	r0, r3
   2298a:	f7ff fe7d 	bl	22688 <appConnUpdateTimerStart>
}
   2298e:	e00f      	b.n	229b0 <appSlaveConnUpdate+0x6c>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   22990:	687b      	ldr	r3, [r7, #4]
   22992:	78db      	ldrb	r3, [r3, #3]
   22994:	2b0c      	cmp	r3, #12
   22996:	d00b      	beq.n	229b0 <appSlaveConnUpdate+0x6c>
   22998:	683b      	ldr	r3, [r7, #0]
   2299a:	7b1a      	ldrb	r2, [r3, #12]
   2299c:	4b06      	ldr	r3, [pc, #24]	; (229b8 <appSlaveConnUpdate+0x74>)
   2299e:	681b      	ldr	r3, [r3, #0]
   229a0:	7b1b      	ldrb	r3, [r3, #12]
   229a2:	429a      	cmp	r2, r3
   229a4:	d204      	bcs.n	229b0 <appSlaveConnUpdate+0x6c>
      appConnUpdateTimerStart(pCb->connId);
   229a6:	683b      	ldr	r3, [r7, #0]
   229a8:	791b      	ldrb	r3, [r3, #4]
   229aa:	4618      	mov	r0, r3
   229ac:	f7ff fe6c 	bl	22688 <appConnUpdateTimerStart>
}
   229b0:	bf00      	nop
   229b2:	3708      	adds	r7, #8
   229b4:	46bd      	mov	sp, r7
   229b6:	bd80      	pop	{r7, pc}
   229b8:	10044df4 	.word	0x10044df4

000229bc <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   229bc:	b580      	push	{r7, lr}
   229be:	b084      	sub	sp, #16
   229c0:	af00      	add	r7, sp, #0
   229c2:	6078      	str	r0, [r7, #4]
   229c4:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   229c6:	4b27      	ldr	r3, [pc, #156]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   229c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   229cc:	2b00      	cmp	r3, #0
   229ce:	d044      	beq.n	22a5a <appSlaveResolvedAddrInd+0x9e>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   229d0:	687b      	ldr	r3, [r7, #4]
   229d2:	78db      	ldrb	r3, [r3, #3]
   229d4:	2b00      	cmp	r3, #0
   229d6:	d110      	bne.n	229fa <appSlaveResolvedAddrInd+0x3e>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   229d8:	4b22      	ldr	r3, [pc, #136]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   229da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   229dc:	683b      	ldr	r3, [r7, #0]
   229de:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   229e0:	4b20      	ldr	r3, [pc, #128]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   229e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   229e6:	2b00      	cmp	r3, #0
   229e8:	d032      	beq.n	22a50 <appSlaveResolvedAddrInd+0x94>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   229ea:	6838      	ldr	r0, [r7, #0]
   229ec:	f7ff febe 	bl	2276c <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   229f0:	4b1c      	ldr	r3, [pc, #112]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   229f2:	2200      	movs	r2, #0
   229f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   229f8:	e02a      	b.n	22a50 <appSlaveResolvedAddrInd+0x94>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   229fa:	687b      	ldr	r3, [r7, #4]
   229fc:	78db      	ldrb	r3, [r3, #3]
   229fe:	2b05      	cmp	r3, #5
   22a00:	d126      	bne.n	22a50 <appSlaveResolvedAddrInd+0x94>
   22a02:	4b18      	ldr	r3, [pc, #96]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22a06:	2b00      	cmp	r3, #0
   22a08:	d022      	beq.n	22a50 <appSlaveResolvedAddrInd+0x94>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   22a0a:	4b16      	ldr	r3, [pc, #88]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22a0e:	4618      	mov	r0, r3
   22a10:	f7f6 fcda 	bl	193c8 <AppDbGetNextRecord>
   22a14:	4602      	mov	r2, r0
   22a16:	4b13      	ldr	r3, [pc, #76]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a18:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   22a1a:	4b12      	ldr	r3, [pc, #72]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   22a1e:	2b00      	cmp	r3, #0
   22a20:	d016      	beq.n	22a50 <appSlaveResolvedAddrInd+0x94>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   22a22:	4b10      	ldr	r3, [pc, #64]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   22a26:	2200      	movs	r2, #0
   22a28:	2104      	movs	r1, #4
   22a2a:	4618      	mov	r0, r3
   22a2c:	f7f6 fde8 	bl	19600 <AppDbGetKey>
   22a30:	60f8      	str	r0, [r7, #12]
   22a32:	68fb      	ldr	r3, [r7, #12]
   22a34:	2b00      	cmp	r3, #0
   22a36:	d00b      	beq.n	22a50 <appSlaveResolvedAddrInd+0x94>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   22a38:	683b      	ldr	r3, [r7, #0]
   22a3a:	791b      	ldrb	r3, [r3, #4]
   22a3c:	4618      	mov	r0, r3
   22a3e:	f7ed fb23 	bl	10088 <DmConnPeerAddr>
   22a42:	68f9      	ldr	r1, [r7, #12]
   22a44:	687b      	ldr	r3, [r7, #4]
   22a46:	881b      	ldrh	r3, [r3, #0]
   22a48:	461a      	mov	r2, r3
   22a4a:	f7ed fe65 	bl	10718 <DmPrivResolveAddr>

      /* not done yet */
      return;
   22a4e:	e005      	b.n	22a5c <appSlaveResolvedAddrInd+0xa0>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   22a50:	4b04      	ldr	r3, [pc, #16]	; (22a64 <appSlaveResolvedAddrInd+0xa8>)
   22a52:	2200      	movs	r2, #0
   22a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   22a58:	e000      	b.n	22a5c <appSlaveResolvedAddrInd+0xa0>
    return;
   22a5a:	bf00      	nop
}
   22a5c:	3710      	adds	r7, #16
   22a5e:	46bd      	mov	sp, r7
   22a60:	bd80      	pop	{r7, pc}
   22a62:	bf00      	nop
   22a64:	10044f20 	.word	0x10044f20

00022a68 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22a68:	b580      	push	{r7, lr}
   22a6a:	b086      	sub	sp, #24
   22a6c:	af00      	add	r7, sp, #0
   22a6e:	6078      	str	r0, [r7, #4]
   22a70:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   22a72:	4b16      	ldr	r3, [pc, #88]	; (22acc <appSlaveRemoteConnParamReq+0x64>)
   22a74:	681b      	ldr	r3, [r3, #0]
   22a76:	781b      	ldrb	r3, [r3, #0]
   22a78:	2b00      	cmp	r3, #0
   22a7a:	d118      	bne.n	22aae <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	88db      	ldrh	r3, [r3, #6]
   22a80:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   22a82:	687b      	ldr	r3, [r7, #4]
   22a84:	891b      	ldrh	r3, [r3, #8]
   22a86:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   22a88:	687b      	ldr	r3, [r7, #4]
   22a8a:	895b      	ldrh	r3, [r3, #10]
   22a8c:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   22a8e:	687b      	ldr	r3, [r7, #4]
   22a90:	899b      	ldrh	r3, [r3, #12]
   22a92:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   22a94:	2300      	movs	r3, #0
   22a96:	82fb      	strh	r3, [r7, #22]
   22a98:	8afb      	ldrh	r3, [r7, #22]
   22a9a:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   22a9c:	683b      	ldr	r3, [r7, #0]
   22a9e:	791b      	ldrb	r3, [r3, #4]
   22aa0:	f107 020c 	add.w	r2, r7, #12
   22aa4:	4611      	mov	r1, r2
   22aa6:	4618      	mov	r0, r3
   22aa8:	f7ed fa66 	bl	ff78 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   22aac:	e00a      	b.n	22ac4 <appSlaveRemoteConnParamReq+0x5c>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   22aae:	4b07      	ldr	r3, [pc, #28]	; (22acc <appSlaveRemoteConnParamReq+0x64>)
   22ab0:	681b      	ldr	r3, [r3, #0]
   22ab2:	781b      	ldrb	r3, [r3, #0]
   22ab4:	2b01      	cmp	r3, #1
   22ab6:	d105      	bne.n	22ac4 <appSlaveRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   22ab8:	683b      	ldr	r3, [r7, #0]
   22aba:	791b      	ldrb	r3, [r3, #4]
   22abc:	2111      	movs	r1, #17
   22abe:	4618      	mov	r0, r3
   22ac0:	f7ed fa76 	bl	ffb0 <DmRemoteConnParamReqNegReply>
}
   22ac4:	bf00      	nop
   22ac6:	3718      	adds	r7, #24
   22ac8:	46bd      	mov	sp, r7
   22aca:	bd80      	pop	{r7, pc}
   22acc:	10017f84 	.word	0x10017f84

00022ad0 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22ad0:	b580      	push	{r7, lr}
   22ad2:	b082      	sub	sp, #8
   22ad4:	af00      	add	r7, sp, #0
   22ad6:	6078      	str	r0, [r7, #4]
   22ad8:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   22ada:	683b      	ldr	r3, [r7, #0]
   22adc:	2200      	movs	r2, #0
   22ade:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   22ae0:	683b      	ldr	r3, [r7, #0]
   22ae2:	2200      	movs	r2, #0
   22ae4:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   22ae6:	687b      	ldr	r3, [r7, #4]
   22ae8:	7a5a      	ldrb	r2, [r3, #9]
   22aea:	687b      	ldr	r3, [r7, #4]
   22aec:	330a      	adds	r3, #10
   22aee:	4619      	mov	r1, r3
   22af0:	4610      	mov	r0, r2
   22af2:	f7f6 fd1d 	bl	19530 <AppDbFindByAddr>
   22af6:	4602      	mov	r2, r0
   22af8:	683b      	ldr	r3, [r7, #0]
   22afa:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   22afc:	683b      	ldr	r3, [r7, #0]
   22afe:	681b      	ldr	r3, [r3, #0]
   22b00:	2b00      	cmp	r3, #0
   22b02:	d10c      	bne.n	22b1e <appSlaveSecConnOpen+0x4e>
   22b04:	687b      	ldr	r3, [r7, #4]
   22b06:	7a5b      	ldrb	r3, [r3, #9]
   22b08:	2b01      	cmp	r3, #1
   22b0a:	d108      	bne.n	22b1e <appSlaveSecConnOpen+0x4e>
   22b0c:	687b      	ldr	r3, [r7, #4]
   22b0e:	7bdb      	ldrb	r3, [r3, #15]
   22b10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22b14:	2b40      	cmp	r3, #64	; 0x40
   22b16:	d102      	bne.n	22b1e <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   22b18:	6878      	ldr	r0, [r7, #4]
   22b1a:	f7ff fdf3 	bl	22704 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   22b1e:	4b0c      	ldr	r3, [pc, #48]	; (22b50 <appSlaveSecConnOpen+0x80>)
   22b20:	681b      	ldr	r3, [r3, #0]
   22b22:	791b      	ldrb	r3, [r3, #4]
   22b24:	2b00      	cmp	r3, #0
   22b26:	d00e      	beq.n	22b46 <appSlaveSecConnOpen+0x76>
   22b28:	f7f6 fce0 	bl	194ec <AppDbCheckBonded>
   22b2c:	4603      	mov	r3, r0
   22b2e:	2b00      	cmp	r3, #0
   22b30:	d009      	beq.n	22b46 <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   22b32:	687b      	ldr	r3, [r7, #4]
   22b34:	881b      	ldrh	r3, [r3, #0]
   22b36:	b2da      	uxtb	r2, r3
   22b38:	4b05      	ldr	r3, [pc, #20]	; (22b50 <appSlaveSecConnOpen+0x80>)
   22b3a:	681b      	ldr	r3, [r3, #0]
   22b3c:	781b      	ldrb	r3, [r3, #0]
   22b3e:	4619      	mov	r1, r3
   22b40:	4610      	mov	r0, r2
   22b42:	f7ee f8f8 	bl	10d36 <DmSecSlaveReq>
  }
}
   22b46:	bf00      	nop
   22b48:	3708      	adds	r7, #8
   22b4a:	46bd      	mov	sp, r7
   22b4c:	bd80      	pop	{r7, pc}
   22b4e:	bf00      	nop
   22b50:	10044e10 	.word	0x10044e10

00022b54 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22b54:	b580      	push	{r7, lr}
   22b56:	b082      	sub	sp, #8
   22b58:	af00      	add	r7, sp, #0
   22b5a:	6078      	str	r0, [r7, #4]
   22b5c:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   22b5e:	683b      	ldr	r3, [r7, #0]
   22b60:	681b      	ldr	r3, [r3, #0]
   22b62:	2b00      	cmp	r3, #0
   22b64:	d004      	beq.n	22b70 <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   22b66:	683b      	ldr	r3, [r7, #0]
   22b68:	681b      	ldr	r3, [r3, #0]
   22b6a:	4618      	mov	r0, r3
   22b6c:	f7f6 fc82 	bl	19474 <AppDbCheckValidRecord>
  }
}
   22b70:	bf00      	nop
   22b72:	3708      	adds	r7, #8
   22b74:	46bd      	mov	sp, r7
   22b76:	bd80      	pop	{r7, pc}

00022b78 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22b78:	b590      	push	{r4, r7, lr}
   22b7a:	b087      	sub	sp, #28
   22b7c:	af02      	add	r7, sp, #8
   22b7e:	6078      	str	r0, [r7, #4]
   22b80:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   22b82:	4b3f      	ldr	r3, [pc, #252]	; (22c80 <appSecPairInd+0x108>)
   22b84:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   22b88:	2b00      	cmp	r3, #0
   22b8a:	d111      	bne.n	22bb0 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   22b8c:	687b      	ldr	r3, [r7, #4]
   22b8e:	791b      	ldrb	r3, [r3, #4]
   22b90:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   22b94:	2b00      	cmp	r3, #0
   22b96:	d00b      	beq.n	22bb0 <appSecPairInd+0x38>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   22b98:	683b      	ldr	r3, [r7, #0]
   22b9a:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   22b9c:	2b00      	cmp	r3, #0
   22b9e:	d064      	beq.n	22c6a <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   22ba0:	683b      	ldr	r3, [r7, #0]
   22ba2:	791b      	ldrb	r3, [r3, #4]
   22ba4:	4618      	mov	r0, r3
   22ba6:	f7ed fa9f 	bl	100e8 <DmConnSecLevel>
   22baa:	4603      	mov	r3, r0
   22bac:	2b00      	cmp	r3, #0
   22bae:	d15c      	bne.n	22c6a <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   22bb0:	687b      	ldr	r3, [r7, #4]
   22bb2:	791a      	ldrb	r2, [r3, #4]
   22bb4:	4b33      	ldr	r3, [pc, #204]	; (22c84 <appSecPairInd+0x10c>)
   22bb6:	681b      	ldr	r3, [r3, #0]
   22bb8:	781b      	ldrb	r3, [r3, #0]
   22bba:	4013      	ands	r3, r2
   22bbc:	b2db      	uxtb	r3, r3
   22bbe:	f003 0301 	and.w	r3, r3, #1
   22bc2:	2b00      	cmp	r3, #0
   22bc4:	bf14      	ite	ne
   22bc6:	2301      	movne	r3, #1
   22bc8:	2300      	moveq	r3, #0
   22bca:	b2db      	uxtb	r3, r3
   22bcc:	461a      	mov	r2, r3
   22bce:	683b      	ldr	r3, [r7, #0]
   22bd0:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   22bd2:	683b      	ldr	r3, [r7, #0]
   22bd4:	79db      	ldrb	r3, [r3, #7]
   22bd6:	2b00      	cmp	r3, #0
   22bd8:	d017      	beq.n	22c0a <appSecPairInd+0x92>
   22bda:	683b      	ldr	r3, [r7, #0]
   22bdc:	681b      	ldr	r3, [r3, #0]
   22bde:	2b00      	cmp	r3, #0
   22be0:	d113      	bne.n	22c0a <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   22be2:	683b      	ldr	r3, [r7, #0]
   22be4:	791b      	ldrb	r3, [r3, #4]
   22be6:	4618      	mov	r0, r3
   22be8:	f7ed fa44 	bl	10074 <DmConnPeerAddrType>
   22bec:	4603      	mov	r3, r0
   22bee:	461c      	mov	r4, r3
   22bf0:	683b      	ldr	r3, [r7, #0]
   22bf2:	791b      	ldrb	r3, [r3, #4]
   22bf4:	4618      	mov	r0, r3
   22bf6:	f7ed fa47 	bl	10088 <DmConnPeerAddr>
   22bfa:	4603      	mov	r3, r0
   22bfc:	4619      	mov	r1, r3
   22bfe:	4620      	mov	r0, r4
   22c00:	f7f6 fb90 	bl	19324 <AppDbNewRecord>
   22c04:	4602      	mov	r2, r0
   22c06:	683b      	ldr	r3, [r7, #0]
   22c08:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   22c0a:	683b      	ldr	r3, [r7, #0]
   22c0c:	2200      	movs	r2, #0
   22c0e:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   22c10:	4b1c      	ldr	r3, [pc, #112]	; (22c84 <appSecPairInd+0x10c>)
   22c12:	681b      	ldr	r3, [r3, #0]
   22c14:	789b      	ldrb	r3, [r3, #2]
   22c16:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   22c18:	4b1a      	ldr	r3, [pc, #104]	; (22c84 <appSecPairInd+0x10c>)
   22c1a:	681b      	ldr	r3, [r3, #0]
   22c1c:	785b      	ldrb	r3, [r3, #1]
   22c1e:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   22c20:	683b      	ldr	r3, [r7, #0]
   22c22:	791b      	ldrb	r3, [r3, #4]
   22c24:	4618      	mov	r0, r3
   22c26:	f7ed fa25 	bl	10074 <DmConnPeerAddrType>
   22c2a:	4603      	mov	r3, r0
   22c2c:	2b01      	cmp	r3, #1
   22c2e:	d103      	bne.n	22c38 <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   22c30:	7bfb      	ldrb	r3, [r7, #15]
   22c32:	f043 0302 	orr.w	r3, r3, #2
   22c36:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   22c38:	687b      	ldr	r3, [r7, #4]
   22c3a:	79da      	ldrb	r2, [r3, #7]
   22c3c:	7bbb      	ldrb	r3, [r7, #14]
   22c3e:	4013      	ands	r3, r2
   22c40:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   22c42:	687b      	ldr	r3, [r7, #4]
   22c44:	799a      	ldrb	r2, [r3, #6]
   22c46:	7bfb      	ldrb	r3, [r7, #15]
   22c48:	4013      	ands	r3, r2
   22c4a:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   22c4c:	683b      	ldr	r3, [r7, #0]
   22c4e:	7918      	ldrb	r0, [r3, #4]
   22c50:	4b0c      	ldr	r3, [pc, #48]	; (22c84 <appSecPairInd+0x10c>)
   22c52:	681b      	ldr	r3, [r3, #0]
   22c54:	78d9      	ldrb	r1, [r3, #3]
   22c56:	4b0b      	ldr	r3, [pc, #44]	; (22c84 <appSecPairInd+0x10c>)
   22c58:	681b      	ldr	r3, [r3, #0]
   22c5a:	781a      	ldrb	r2, [r3, #0]
   22c5c:	7bfc      	ldrb	r4, [r7, #15]
   22c5e:	7bbb      	ldrb	r3, [r7, #14]
   22c60:	9300      	str	r3, [sp, #0]
   22c62:	4623      	mov	r3, r4
   22c64:	f7ee f848 	bl	10cf8 <DmSecPairRsp>
   22c68:	e005      	b.n	22c76 <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   22c6a:	683b      	ldr	r3, [r7, #0]
   22c6c:	791b      	ldrb	r3, [r3, #4]
   22c6e:	2105      	movs	r1, #5
   22c70:	4618      	mov	r0, r3
   22c72:	f7ed fed1 	bl	10a18 <DmSecCancelReq>
  }
}
   22c76:	bf00      	nop
   22c78:	3714      	adds	r7, #20
   22c7a:	46bd      	mov	sp, r7
   22c7c:	bd90      	pop	{r4, r7, pc}
   22c7e:	bf00      	nop
   22c80:	10044f20 	.word	0x10044f20
   22c84:	10044e10 	.word	0x10044e10

00022c88 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22c88:	b580      	push	{r7, lr}
   22c8a:	b082      	sub	sp, #8
   22c8c:	af00      	add	r7, sp, #0
   22c8e:	6078      	str	r0, [r7, #4]
   22c90:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   22c92:	683b      	ldr	r3, [r7, #0]
   22c94:	79db      	ldrb	r3, [r3, #7]
   22c96:	2b00      	cmp	r3, #0
   22c98:	d012      	beq.n	22cc0 <appSecStoreKey+0x38>
   22c9a:	683b      	ldr	r3, [r7, #0]
   22c9c:	681b      	ldr	r3, [r3, #0]
   22c9e:	2b00      	cmp	r3, #0
   22ca0:	d00e      	beq.n	22cc0 <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   22ca2:	683b      	ldr	r3, [r7, #0]
   22ca4:	7ada      	ldrb	r2, [r3, #11]
   22ca6:	687b      	ldr	r3, [r7, #4]
   22ca8:	7f9b      	ldrb	r3, [r3, #30]
   22caa:	4313      	orrs	r3, r2
   22cac:	b2da      	uxtb	r2, r3
   22cae:	683b      	ldr	r3, [r7, #0]
   22cb0:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   22cb2:	683b      	ldr	r3, [r7, #0]
   22cb4:	681b      	ldr	r3, [r3, #0]
   22cb6:	687a      	ldr	r2, [r7, #4]
   22cb8:	4611      	mov	r1, r2
   22cba:	4618      	mov	r0, r3
   22cbc:	f7f6 fcea 	bl	19694 <AppDbSetKey>
  }
}
   22cc0:	bf00      	nop
   22cc2:	3708      	adds	r7, #8
   22cc4:	46bd      	mov	sp, r7
   22cc6:	bd80      	pop	{r7, pc}

00022cc8 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22cc8:	b580      	push	{r7, lr}
   22cca:	b082      	sub	sp, #8
   22ccc:	af00      	add	r7, sp, #0
   22cce:	6078      	str	r0, [r7, #4]
   22cd0:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   22cd2:	683b      	ldr	r3, [r7, #0]
   22cd4:	79db      	ldrb	r3, [r3, #7]
   22cd6:	2b00      	cmp	r3, #0
   22cd8:	d024      	beq.n	22d24 <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   22cda:	683b      	ldr	r3, [r7, #0]
   22cdc:	2201      	movs	r2, #1
   22cde:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   22ce0:	683b      	ldr	r3, [r7, #0]
   22ce2:	681b      	ldr	r3, [r3, #0]
   22ce4:	2b00      	cmp	r3, #0
   22ce6:	d007      	beq.n	22cf8 <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   22ce8:	683b      	ldr	r3, [r7, #0]
   22cea:	681a      	ldr	r2, [r3, #0]
   22cec:	683b      	ldr	r3, [r7, #0]
   22cee:	7adb      	ldrb	r3, [r3, #11]
   22cf0:	4619      	mov	r1, r3
   22cf2:	4610      	mov	r0, r2
   22cf4:	f7f6 fbaa 	bl	1944c <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   22cf8:	4b0c      	ldr	r3, [pc, #48]	; (22d2c <appSecPairCmpl+0x64>)
   22cfa:	2200      	movs	r2, #0
   22cfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   22d00:	4b0a      	ldr	r3, [pc, #40]	; (22d2c <appSecPairCmpl+0x64>)
   22d02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   22d06:	2b01      	cmp	r3, #1
   22d08:	d102      	bne.n	22d10 <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   22d0a:	683b      	ldr	r3, [r7, #0]
   22d0c:	2201      	movs	r2, #1
   22d0e:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   22d10:	683b      	ldr	r3, [r7, #0]
   22d12:	681b      	ldr	r3, [r3, #0]
   22d14:	2b00      	cmp	r3, #0
   22d16:	d005      	beq.n	22d24 <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   22d18:	683b      	ldr	r3, [r7, #0]
   22d1a:	791b      	ldrb	r3, [r3, #4]
   22d1c:	4619      	mov	r1, r3
   22d1e:	6878      	ldr	r0, [r7, #4]
   22d20:	f7ff fa38 	bl	22194 <AppAddDevToResList>
    }
  }
}
   22d24:	bf00      	nop
   22d26:	3708      	adds	r7, #8
   22d28:	46bd      	mov	sp, r7
   22d2a:	bd80      	pop	{r7, pc}
   22d2c:	10044f20 	.word	0x10044f20

00022d30 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22d30:	b480      	push	{r7}
   22d32:	b083      	sub	sp, #12
   22d34:	af00      	add	r7, sp, #0
   22d36:	6078      	str	r0, [r7, #4]
   22d38:	6039      	str	r1, [r7, #0]
  return;
   22d3a:	bf00      	nop
}
   22d3c:	370c      	adds	r7, #12
   22d3e:	46bd      	mov	sp, r7
   22d40:	f85d 7b04 	ldr.w	r7, [sp], #4
   22d44:	4770      	bx	lr

00022d46 <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22d46:	b480      	push	{r7}
   22d48:	b083      	sub	sp, #12
   22d4a:	af00      	add	r7, sp, #0
   22d4c:	6078      	str	r0, [r7, #4]
   22d4e:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   22d50:	683b      	ldr	r3, [r7, #0]
   22d52:	799b      	ldrb	r3, [r3, #6]
   22d54:	2b00      	cmp	r3, #0
   22d56:	d009      	beq.n	22d6c <appSecEncryptInd+0x26>
   22d58:	687b      	ldr	r3, [r7, #4]
   22d5a:	791b      	ldrb	r3, [r3, #4]
   22d5c:	2b00      	cmp	r3, #0
   22d5e:	d005      	beq.n	22d6c <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   22d60:	683b      	ldr	r3, [r7, #0]
   22d62:	2201      	movs	r2, #1
   22d64:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   22d66:	683b      	ldr	r3, [r7, #0]
   22d68:	2200      	movs	r2, #0
   22d6a:	719a      	strb	r2, [r3, #6]
  }
}
   22d6c:	bf00      	nop
   22d6e:	370c      	adds	r7, #12
   22d70:	46bd      	mov	sp, r7
   22d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   22d76:	4770      	bx	lr

00022d78 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22d78:	b580      	push	{r7, lr}
   22d7a:	b082      	sub	sp, #8
   22d7c:	af00      	add	r7, sp, #0
   22d7e:	6078      	str	r0, [r7, #4]
   22d80:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   22d82:	683b      	ldr	r3, [r7, #0]
   22d84:	681b      	ldr	r3, [r3, #0]
   22d86:	2b00      	cmp	r3, #0
   22d88:	d12b      	bne.n	22de2 <appSecFindLtk+0x6a>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   22d8a:	687b      	ldr	r3, [r7, #4]
   22d8c:	89db      	ldrh	r3, [r3, #14]
   22d8e:	2b00      	cmp	r3, #0
   22d90:	d109      	bne.n	22da6 <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   22d92:	687b      	ldr	r3, [r7, #4]
   22d94:	3306      	adds	r3, #6
   22d96:	2208      	movs	r2, #8
   22d98:	4915      	ldr	r1, [pc, #84]	; (22df0 <appSecFindLtk+0x78>)
   22d9a:	4618      	mov	r0, r3
   22d9c:	f7e9 f9b0 	bl	c100 <memcmp>
   22da0:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   22da2:	2b00      	cmp	r3, #0
   22da4:	d013      	beq.n	22dce <appSecFindLtk+0x56>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   22da6:	687b      	ldr	r3, [r7, #4]
   22da8:	89da      	ldrh	r2, [r3, #14]
   22daa:	687b      	ldr	r3, [r7, #4]
   22dac:	3306      	adds	r3, #6
   22dae:	4619      	mov	r1, r3
   22db0:	4610      	mov	r0, r2
   22db2:	f7f6 fbf3 	bl	1959c <AppDbFindByLtkReq>
   22db6:	4602      	mov	r2, r0
   22db8:	683b      	ldr	r3, [r7, #0]
   22dba:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   22dbc:	683b      	ldr	r3, [r7, #0]
   22dbe:	681b      	ldr	r3, [r3, #0]
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	d00e      	beq.n	22de2 <appSecFindLtk+0x6a>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   22dc4:	4b0b      	ldr	r3, [pc, #44]	; (22df4 <appSecFindLtk+0x7c>)
   22dc6:	2200      	movs	r2, #0
   22dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   22dcc:	e009      	b.n	22de2 <appSecFindLtk+0x6a>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   22dce:	4b09      	ldr	r3, [pc, #36]	; (22df4 <appSecFindLtk+0x7c>)
   22dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   22dd4:	2b00      	cmp	r3, #0
   22dd6:	d004      	beq.n	22de2 <appSecFindLtk+0x6a>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   22dd8:	4b06      	ldr	r3, [pc, #24]	; (22df4 <appSecFindLtk+0x7c>)
   22dda:	2201      	movs	r2, #1
   22ddc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   22de0:	e002      	b.n	22de8 <appSecFindLtk+0x70>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   22de2:	6838      	ldr	r0, [r7, #0]
   22de4:	f7ff fcc2 	bl	2276c <appSecRspLtk>
}
   22de8:	3708      	adds	r7, #8
   22dea:	46bd      	mov	sp, r7
   22dec:	bd80      	pop	{r7, pc}
   22dee:	bf00      	nop
   22df0:	0003ce74 	.word	0x0003ce74
   22df4:	10044f20 	.word	0x10044f20

00022df8 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   22df8:	b580      	push	{r7, lr}
   22dfa:	b082      	sub	sp, #8
   22dfc:	af00      	add	r7, sp, #0
   22dfe:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   22e00:	687b      	ldr	r3, [r7, #4]
   22e02:	78db      	ldrb	r3, [r3, #3]
   22e04:	2b00      	cmp	r3, #0
   22e06:	d105      	bne.n	22e14 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   22e08:	f7ed fb5c 	bl	104c4 <DmLlPrivEnabled>
   22e0c:	4603      	mov	r3, r0
   22e0e:	4618      	mov	r0, r3
   22e10:	f000 fcd6 	bl	237c0 <SvcCoreGapCentAddrResUpdate>
  }
}
   22e14:	bf00      	nop
   22e16:	3708      	adds	r7, #8
   22e18:	46bd      	mov	sp, r7
   22e1a:	bd80      	pop	{r7, pc}

00022e1c <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22e1c:	b580      	push	{r7, lr}
   22e1e:	b084      	sub	sp, #16
   22e20:	af00      	add	r7, sp, #0
   22e22:	6078      	str	r0, [r7, #4]
   22e24:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   22e26:	687b      	ldr	r3, [r7, #4]
   22e28:	78db      	ldrb	r3, [r3, #3]
   22e2a:	2b00      	cmp	r3, #0
   22e2c:	d11c      	bne.n	22e68 <appPrivAddDevToResListInd+0x4c>
   22e2e:	683b      	ldr	r3, [r7, #0]
   22e30:	681b      	ldr	r3, [r3, #0]
   22e32:	2b00      	cmp	r3, #0
   22e34:	d018      	beq.n	22e68 <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   22e36:	683b      	ldr	r3, [r7, #0]
   22e38:	681b      	ldr	r3, [r3, #0]
   22e3a:	2200      	movs	r2, #0
   22e3c:	2104      	movs	r1, #4
   22e3e:	4618      	mov	r0, r3
   22e40:	f7f6 fbde 	bl	19600 <AppDbGetKey>
   22e44:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   22e46:	68fb      	ldr	r3, [r7, #12]
   22e48:	2b00      	cmp	r3, #0
   22e4a:	d007      	beq.n	22e5c <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   22e4c:	68fb      	ldr	r3, [r7, #12]
   22e4e:	7d9a      	ldrb	r2, [r3, #22]
   22e50:	68fb      	ldr	r3, [r7, #12]
   22e52:	3310      	adds	r3, #16
   22e54:	4619      	mov	r1, r3
   22e56:	4610      	mov	r0, r2
   22e58:	f000 fb7c 	bl	23554 <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   22e5c:	683b      	ldr	r3, [r7, #0]
   22e5e:	681b      	ldr	r3, [r3, #0]
   22e60:	2101      	movs	r1, #1
   22e62:	4618      	mov	r0, r3
   22e64:	f7f6 fcdc 	bl	19820 <AppDbSetPeerAddedToRl>
  }
}
   22e68:	bf00      	nop
   22e6a:	3710      	adds	r7, #16
   22e6c:	46bd      	mov	sp, r7
   22e6e:	bd80      	pop	{r7, pc}

00022e70 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   22e70:	b580      	push	{r7, lr}
   22e72:	b082      	sub	sp, #8
   22e74:	af00      	add	r7, sp, #0
   22e76:	6078      	str	r0, [r7, #4]
   22e78:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   22e7a:	687b      	ldr	r3, [r7, #4]
   22e7c:	78db      	ldrb	r3, [r3, #3]
   22e7e:	2b00      	cmp	r3, #0
   22e80:	d112      	bne.n	22ea8 <appPrivRemDevFromResListInd+0x38>
   22e82:	683b      	ldr	r3, [r7, #0]
   22e84:	681b      	ldr	r3, [r3, #0]
   22e86:	2b00      	cmp	r3, #0
   22e88:	d00e      	beq.n	22ea8 <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   22e8a:	4b09      	ldr	r3, [pc, #36]	; (22eb0 <appPrivRemDevFromResListInd+0x40>)
   22e8c:	2200      	movs	r2, #0
   22e8e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   22e92:	2206      	movs	r2, #6
   22e94:	2100      	movs	r1, #0
   22e96:	4807      	ldr	r0, [pc, #28]	; (22eb4 <appPrivRemDevFromResListInd+0x44>)
   22e98:	f7e9 fa60 	bl	c35c <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   22e9c:	683b      	ldr	r3, [r7, #0]
   22e9e:	681b      	ldr	r3, [r3, #0]
   22ea0:	2100      	movs	r1, #0
   22ea2:	4618      	mov	r0, r3
   22ea4:	f7f6 fcbc 	bl	19820 <AppDbSetPeerAddedToRl>
  }
}
   22ea8:	bf00      	nop
   22eaa:	3708      	adds	r7, #8
   22eac:	46bd      	mov	sp, r7
   22eae:	bd80      	pop	{r7, pc}
   22eb0:	10044f20 	.word	0x10044f20
   22eb4:	10044f50 	.word	0x10044f50

00022eb8 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   22eb8:	b580      	push	{r7, lr}
   22eba:	b086      	sub	sp, #24
   22ebc:	af00      	add	r7, sp, #0
   22ebe:	6078      	str	r0, [r7, #4]
   22ec0:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   22ec2:	683b      	ldr	r3, [r7, #0]
   22ec4:	2202      	movs	r2, #2
   22ec6:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   22ec8:	683b      	ldr	r3, [r7, #0]
   22eca:	791b      	ldrb	r3, [r3, #4]
   22ecc:	4618      	mov	r0, r3
   22ece:	f7ed f92f 	bl	10130 <DmConnCheckIdle>
   22ed2:	4603      	mov	r3, r0
   22ed4:	2b00      	cmp	r3, #0
   22ed6:	bf0c      	ite	eq
   22ed8:	2301      	moveq	r3, #1
   22eda:	2300      	movne	r3, #0
   22edc:	b2db      	uxtb	r3, r3
   22ede:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   22ee0:	7dfb      	ldrb	r3, [r7, #23]
   22ee2:	2b00      	cmp	r3, #0
   22ee4:	d027      	beq.n	22f36 <appSlaveConnUpdateTimeout+0x7e>
   22ee6:	683b      	ldr	r3, [r7, #0]
   22ee8:	7a9b      	ldrb	r3, [r3, #10]
   22eea:	2b00      	cmp	r3, #0
   22eec:	d023      	beq.n	22f36 <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   22eee:	683b      	ldr	r3, [r7, #0]
   22ef0:	7b1b      	ldrb	r3, [r3, #12]
   22ef2:	3301      	adds	r3, #1
   22ef4:	b2da      	uxtb	r2, r3
   22ef6:	683b      	ldr	r3, [r7, #0]
   22ef8:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   22efa:	4b15      	ldr	r3, [pc, #84]	; (22f50 <appSlaveConnUpdateTimeout+0x98>)
   22efc:	681b      	ldr	r3, [r3, #0]
   22efe:	889b      	ldrh	r3, [r3, #4]
   22f00:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   22f02:	4b13      	ldr	r3, [pc, #76]	; (22f50 <appSlaveConnUpdateTimeout+0x98>)
   22f04:	681b      	ldr	r3, [r3, #0]
   22f06:	88db      	ldrh	r3, [r3, #6]
   22f08:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   22f0a:	4b11      	ldr	r3, [pc, #68]	; (22f50 <appSlaveConnUpdateTimeout+0x98>)
   22f0c:	681b      	ldr	r3, [r3, #0]
   22f0e:	891b      	ldrh	r3, [r3, #8]
   22f10:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   22f12:	4b0f      	ldr	r3, [pc, #60]	; (22f50 <appSlaveConnUpdateTimeout+0x98>)
   22f14:	681b      	ldr	r3, [r3, #0]
   22f16:	895b      	ldrh	r3, [r3, #10]
   22f18:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   22f1a:	2300      	movs	r3, #0
   22f1c:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   22f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22f22:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   22f24:	683b      	ldr	r3, [r7, #0]
   22f26:	791b      	ldrb	r3, [r3, #4]
   22f28:	f107 0208 	add.w	r2, r7, #8
   22f2c:	4611      	mov	r1, r2
   22f2e:	4618      	mov	r0, r3
   22f30:	f7ec ff9e 	bl	fe70 <DmConnUpdate>
   22f34:	e007      	b.n	22f46 <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   22f36:	683b      	ldr	r3, [r7, #0]
   22f38:	7dfa      	ldrb	r2, [r7, #23]
   22f3a:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   22f3c:	683b      	ldr	r3, [r7, #0]
   22f3e:	791b      	ldrb	r3, [r3, #4]
   22f40:	4618      	mov	r0, r3
   22f42:	f7ff fba1 	bl	22688 <appConnUpdateTimerStart>
  }
}
   22f46:	bf00      	nop
   22f48:	3718      	adds	r7, #24
   22f4a:	46bd      	mov	sp, r7
   22f4c:	bd80      	pop	{r7, pc}
   22f4e:	bf00      	nop
   22f50:	10044df4 	.word	0x10044df4

00022f54 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   22f54:	b580      	push	{r7, lr}
   22f56:	b084      	sub	sp, #16
   22f58:	af00      	add	r7, sp, #0
   22f5a:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   22f5c:	687b      	ldr	r3, [r7, #4]
   22f5e:	881b      	ldrh	r3, [r3, #0]
   22f60:	3b01      	subs	r3, #1
   22f62:	015b      	lsls	r3, r3, #5
   22f64:	4a0e      	ldr	r2, [pc, #56]	; (22fa0 <appSlaveProcMsg+0x4c>)
   22f66:	4413      	add	r3, r2
   22f68:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   22f6a:	687b      	ldr	r3, [r7, #4]
   22f6c:	789b      	ldrb	r3, [r3, #2]
   22f6e:	2b10      	cmp	r3, #16
   22f70:	d000      	beq.n	22f74 <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   22f72:	e011      	b.n	22f98 <appSlaveProcMsg+0x44>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   22f74:	68fb      	ldr	r3, [r7, #12]
   22f76:	7b5b      	ldrb	r3, [r3, #13]
   22f78:	2b02      	cmp	r3, #2
   22f7a:	d104      	bne.n	22f86 <appSlaveProcMsg+0x32>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   22f7c:	68f9      	ldr	r1, [r7, #12]
   22f7e:	6878      	ldr	r0, [r7, #4]
   22f80:	f7ff ff9a 	bl	22eb8 <appSlaveConnUpdateTimeout>
      break;
   22f84:	e007      	b.n	22f96 <appSlaveProcMsg+0x42>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   22f86:	68fb      	ldr	r3, [r7, #12]
   22f88:	2201      	movs	r2, #1
   22f8a:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   22f8c:	68fb      	ldr	r3, [r7, #12]
   22f8e:	791b      	ldrb	r3, [r3, #4]
   22f90:	4618      	mov	r0, r3
   22f92:	f7ec ff63 	bl	fe5c <DmReadRemoteFeatures>
      break;
   22f96:	bf00      	nop
  }
}
   22f98:	bf00      	nop
   22f9a:	3710      	adds	r7, #16
   22f9c:	46bd      	mov	sp, r7
   22f9e:	bd80      	pop	{r7, pc}
   22fa0:	10044e20 	.word	0x10044e20

00022fa4 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   22fa4:	b580      	push	{r7, lr}
   22fa6:	b082      	sub	sp, #8
   22fa8:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   22faa:	2300      	movs	r3, #0
   22fac:	71fb      	strb	r3, [r7, #7]
   22fae:	e014      	b.n	22fda <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   22fb0:	79fb      	ldrb	r3, [r7, #7]
   22fb2:	4a18      	ldr	r2, [pc, #96]	; (23014 <AppSlaveInit+0x70>)
   22fb4:	4413      	add	r3, r2
   22fb6:	2203      	movs	r2, #3
   22fb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   22fbc:	79fb      	ldrb	r3, [r7, #7]
   22fbe:	4a15      	ldr	r2, [pc, #84]	; (23014 <AppSlaveInit+0x70>)
   22fc0:	4413      	add	r3, r2
   22fc2:	2200      	movs	r2, #0
   22fc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   22fc8:	79fb      	ldrb	r3, [r7, #7]
   22fca:	4a12      	ldr	r2, [pc, #72]	; (23014 <AppSlaveInit+0x70>)
   22fcc:	4413      	add	r3, r2
   22fce:	2200      	movs	r2, #0
   22fd0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   22fd4:	79fb      	ldrb	r3, [r7, #7]
   22fd6:	3301      	adds	r3, #1
   22fd8:	71fb      	strb	r3, [r7, #7]
   22fda:	79fb      	ldrb	r3, [r7, #7]
   22fdc:	2b00      	cmp	r3, #0
   22fde:	d0e7      	beq.n	22fb0 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   22fe0:	4b0c      	ldr	r3, [pc, #48]	; (23014 <AppSlaveInit+0x70>)
   22fe2:	22ff      	movs	r2, #255	; 0xff
   22fe4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   22fe8:	f7ff f9e0 	bl	223ac <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   22fec:	4b09      	ldr	r3, [pc, #36]	; (23014 <AppSlaveInit+0x70>)
   22fee:	2200      	movs	r2, #0
   22ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   22ff4:	4b08      	ldr	r3, [pc, #32]	; (23018 <AppSlaveInit+0x74>)
   22ff6:	4a09      	ldr	r2, [pc, #36]	; (2301c <AppSlaveInit+0x78>)
   22ff8:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   22ffa:	4b06      	ldr	r3, [pc, #24]	; (23014 <AppSlaveInit+0x70>)
   22ffc:	2200      	movs	r2, #0
   22ffe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   23002:	2206      	movs	r2, #6
   23004:	2100      	movs	r1, #0
   23006:	4806      	ldr	r0, [pc, #24]	; (23020 <AppSlaveInit+0x7c>)
   23008:	f7e9 f9a8 	bl	c35c <memset>
}
   2300c:	bf00      	nop
   2300e:	3708      	adds	r7, #8
   23010:	46bd      	mov	sp, r7
   23012:	bd80      	pop	{r7, pc}
   23014:	10044f20 	.word	0x10044f20
   23018:	10044dfc 	.word	0x10044dfc
   2301c:	00022f55 	.word	0x00022f55
   23020:	10044f50 	.word	0x10044f50

00023024 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   23024:	b580      	push	{r7, lr}
   23026:	b084      	sub	sp, #16
   23028:	af00      	add	r7, sp, #0
   2302a:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   2302c:	2300      	movs	r3, #0
   2302e:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   23030:	687b      	ldr	r3, [r7, #4]
   23032:	789b      	ldrb	r3, [r3, #2]
   23034:	2b22      	cmp	r3, #34	; 0x22
   23036:	d00a      	beq.n	2304e <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   23038:	687b      	ldr	r3, [r7, #4]
   2303a:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   2303c:	2b47      	cmp	r3, #71	; 0x47
   2303e:	d006      	beq.n	2304e <AppSlaveProcDmMsg+0x2a>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   23040:	687b      	ldr	r3, [r7, #4]
   23042:	881b      	ldrh	r3, [r3, #0]
   23044:	3b01      	subs	r3, #1
   23046:	015b      	lsls	r3, r3, #5
   23048:	4a5a      	ldr	r2, [pc, #360]	; (231b4 <AppSlaveProcDmMsg+0x190>)
   2304a:	4413      	add	r3, r2
   2304c:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   2304e:	687b      	ldr	r3, [r7, #4]
   23050:	789b      	ldrb	r3, [r3, #2]
   23052:	3b20      	subs	r3, #32
   23054:	2b35      	cmp	r3, #53	; 0x35
   23056:	f200 80a3 	bhi.w	231a0 <AppSlaveProcDmMsg+0x17c>
   2305a:	a201      	add	r2, pc, #4	; (adr r2, 23060 <AppSlaveProcDmMsg+0x3c>)
   2305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23060:	00023139 	.word	0x00023139
   23064:	000231a1 	.word	0x000231a1
   23068:	0002313f 	.word	0x0002313f
   2306c:	000231a1 	.word	0x000231a1
   23070:	000231a1 	.word	0x000231a1
   23074:	000231a1 	.word	0x000231a1
   23078:	000231a1 	.word	0x000231a1
   2307c:	00023151 	.word	0x00023151
   23080:	0002315b 	.word	0x0002315b
   23084:	00023165 	.word	0x00023165
   23088:	000231a1 	.word	0x000231a1
   2308c:	000231a1 	.word	0x000231a1
   23090:	000231a1 	.word	0x000231a1
   23094:	000231a1 	.word	0x000231a1
   23098:	000231a1 	.word	0x000231a1
   2309c:	000231a1 	.word	0x000231a1
   230a0:	000231a1 	.word	0x000231a1
   230a4:	000231a1 	.word	0x000231a1
   230a8:	000231a1 	.word	0x000231a1
   230ac:	000231a1 	.word	0x000231a1
   230b0:	000231a1 	.word	0x000231a1
   230b4:	000231a1 	.word	0x000231a1
   230b8:	000231a1 	.word	0x000231a1
   230bc:	0002316f 	.word	0x0002316f
   230c0:	000231a1 	.word	0x000231a1
   230c4:	000231a1 	.word	0x000231a1
   230c8:	000231a1 	.word	0x000231a1
   230cc:	000231a1 	.word	0x000231a1
   230d0:	000231a1 	.word	0x000231a1
   230d4:	000231a1 	.word	0x000231a1
   230d8:	000231a1 	.word	0x000231a1
   230dc:	00023179 	.word	0x00023179
   230e0:	000231a1 	.word	0x000231a1
   230e4:	000231a1 	.word	0x000231a1
   230e8:	000231a1 	.word	0x000231a1
   230ec:	000231a1 	.word	0x000231a1
   230f0:	000231a1 	.word	0x000231a1
   230f4:	000231a1 	.word	0x000231a1
   230f8:	000231a1 	.word	0x000231a1
   230fc:	0002313f 	.word	0x0002313f
   23100:	000231a1 	.word	0x000231a1
   23104:	000231a1 	.word	0x000231a1
   23108:	000231a1 	.word	0x000231a1
   2310c:	000231a1 	.word	0x000231a1
   23110:	000231a1 	.word	0x000231a1
   23114:	000231a1 	.word	0x000231a1
   23118:	000231a1 	.word	0x000231a1
   2311c:	000231a1 	.word	0x000231a1
   23120:	000231a1 	.word	0x000231a1
   23124:	00023183 	.word	0x00023183
   23128:	000231a1 	.word	0x000231a1
   2312c:	000231a1 	.word	0x000231a1
   23130:	000231a1 	.word	0x000231a1
   23134:	00023195 	.word	0x00023195
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   23138:	f7ff f938 	bl	223ac <appSlaveAdvModeInit>
      break;
   2313c:	e035      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   2313e:	4b1e      	ldr	r3, [pc, #120]	; (231b8 <AppSlaveProcDmMsg+0x194>)
   23140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23142:	2b00      	cmp	r3, #0
   23144:	d02e      	beq.n	231a4 <AppSlaveProcDmMsg+0x180>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   23146:	4b1c      	ldr	r3, [pc, #112]	; (231b8 <AppSlaveProcDmMsg+0x194>)
   23148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2314a:	6878      	ldr	r0, [r7, #4]
   2314c:	4798      	blx	r3
      }
      break;
   2314e:	e029      	b.n	231a4 <AppSlaveProcDmMsg+0x180>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   23150:	68f9      	ldr	r1, [r7, #12]
   23152:	6878      	ldr	r0, [r7, #4]
   23154:	f7ff fb40 	bl	227d8 <appSlaveConnOpen>
      break;
   23158:	e027      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   2315a:	68f9      	ldr	r1, [r7, #12]
   2315c:	6878      	ldr	r0, [r7, #4]
   2315e:	f7ff fb53 	bl	22808 <appSlaveConnClose>
      break;
   23162:	e022      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   23164:	68f9      	ldr	r1, [r7, #12]
   23166:	6878      	ldr	r0, [r7, #4]
   23168:	f7ff fbec 	bl	22944 <appSlaveConnUpdate>
      break;
   2316c:	e01d      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   2316e:	68f9      	ldr	r1, [r7, #12]
   23170:	6878      	ldr	r0, [r7, #4]
   23172:	f7ff fc23 	bl	229bc <appSlaveResolvedAddrInd>
      break;
   23176:	e018      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   23178:	68f9      	ldr	r1, [r7, #12]
   2317a:	6878      	ldr	r0, [r7, #4]
   2317c:	f7ff fc74 	bl	22a68 <appSlaveRemoteConnParamReq>
      break;
   23180:	e013      	b.n	231aa <AppSlaveProcDmMsg+0x186>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   23182:	68fb      	ldr	r3, [r7, #12]
   23184:	7b5b      	ldrb	r3, [r3, #13]
   23186:	2b01      	cmp	r3, #1
   23188:	d10e      	bne.n	231a8 <AppSlaveProcDmMsg+0x184>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   2318a:	68f9      	ldr	r1, [r7, #12]
   2318c:	6878      	ldr	r0, [r7, #4]
   2318e:	f7ff fe93 	bl	22eb8 <appSlaveConnUpdateTimeout>
      }
      break;
   23192:	e009      	b.n	231a8 <AppSlaveProcDmMsg+0x184>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   23194:	2000      	movs	r0, #0
   23196:	f7fd fb53 	bl	20840 <HciDrvRadioBoot>
      DmDevReset();
   2319a:	f7ed f8e3 	bl	10364 <DmDevReset>
      break;
   2319e:	e004      	b.n	231aa <AppSlaveProcDmMsg+0x186>

    default:
      break;
   231a0:	bf00      	nop
   231a2:	e002      	b.n	231aa <AppSlaveProcDmMsg+0x186>
      break;
   231a4:	bf00      	nop
   231a6:	e000      	b.n	231aa <AppSlaveProcDmMsg+0x186>
      break;
   231a8:	bf00      	nop
  }
}
   231aa:	bf00      	nop
   231ac:	3710      	adds	r7, #16
   231ae:	46bd      	mov	sp, r7
   231b0:	bd80      	pop	{r7, pc}
   231b2:	bf00      	nop
   231b4:	10044e20 	.word	0x10044e20
   231b8:	10044f20 	.word	0x10044f20

000231bc <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   231bc:	b580      	push	{r7, lr}
   231be:	b082      	sub	sp, #8
   231c0:	af00      	add	r7, sp, #0
   231c2:	603b      	str	r3, [r7, #0]
   231c4:	4603      	mov	r3, r0
   231c6:	71fb      	strb	r3, [r7, #7]
   231c8:	460b      	mov	r3, r1
   231ca:	71bb      	strb	r3, [r7, #6]
   231cc:	4613      	mov	r3, r2
   231ce:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   231d0:	79fa      	ldrb	r2, [r7, #7]
   231d2:	79bb      	ldrb	r3, [r7, #6]
   231d4:	4926      	ldr	r1, [pc, #152]	; (23270 <appAdvSetData+0xb4>)
   231d6:	0092      	lsls	r2, r2, #2
   231d8:	4413      	add	r3, r2
   231da:	683a      	ldr	r2, [r7, #0]
   231dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   231e0:	79fa      	ldrb	r2, [r7, #7]
   231e2:	79bb      	ldrb	r3, [r7, #6]
   231e4:	4922      	ldr	r1, [pc, #136]	; (23270 <appAdvSetData+0xb4>)
   231e6:	0092      	lsls	r2, r2, #2
   231e8:	4413      	add	r3, r2
   231ea:	3308      	adds	r3, #8
   231ec:	88ba      	ldrh	r2, [r7, #4]
   231ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   231f2:	79fa      	ldrb	r2, [r7, #7]
   231f4:	79bb      	ldrb	r3, [r7, #6]
   231f6:	491e      	ldr	r1, [pc, #120]	; (23270 <appAdvSetData+0xb4>)
   231f8:	0092      	lsls	r2, r2, #2
   231fa:	4413      	add	r3, r2
   231fc:	330c      	adds	r3, #12
   231fe:	8a3a      	ldrh	r2, [r7, #16]
   23200:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   23204:	79fb      	ldrb	r3, [r7, #7]
   23206:	491a      	ldr	r1, [pc, #104]	; (23270 <appAdvSetData+0xb4>)
   23208:	3314      	adds	r3, #20
   2320a:	8aba      	ldrh	r2, [r7, #20]
   2320c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   23210:	79fa      	ldrb	r2, [r7, #7]
   23212:	79bb      	ldrb	r3, [r7, #6]
   23214:	4916      	ldr	r1, [pc, #88]	; (23270 <appAdvSetData+0xb4>)
   23216:	0092      	lsls	r2, r2, #2
   23218:	4413      	add	r3, r2
   2321a:	3310      	adds	r3, #16
   2321c:	2200      	movs	r2, #0
   2321e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   23222:	79fb      	ldrb	r3, [r7, #7]
   23224:	4a12      	ldr	r2, [pc, #72]	; (23270 <appAdvSetData+0xb4>)
   23226:	4413      	add	r3, r2
   23228:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2322c:	2b03      	cmp	r3, #3
   2322e:	d015      	beq.n	2325c <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   23230:	79bb      	ldrb	r3, [r7, #6]
   23232:	085b      	lsrs	r3, r3, #1
   23234:	b2da      	uxtb	r2, r3
   23236:	4b0e      	ldr	r3, [pc, #56]	; (23270 <appAdvSetData+0xb4>)
   23238:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   2323c:	429a      	cmp	r2, r3
   2323e:	d10d      	bne.n	2325c <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   23240:	88bb      	ldrh	r3, [r7, #4]
   23242:	2bfb      	cmp	r3, #251	; 0xfb
   23244:	d80a      	bhi.n	2325c <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   23246:	88ba      	ldrh	r2, [r7, #4]
   23248:	8abb      	ldrh	r3, [r7, #20]
   2324a:	429a      	cmp	r2, r3
   2324c:	d806      	bhi.n	2325c <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   2324e:	79ba      	ldrb	r2, [r7, #6]
   23250:	79fb      	ldrb	r3, [r7, #7]
   23252:	4611      	mov	r1, r2
   23254:	4618      	mov	r0, r3
   23256:	f7ff f923 	bl	224a0 <appSetAdvScanDataFrag>
   2325a:	e005      	b.n	23268 <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   2325c:	79fb      	ldrb	r3, [r7, #7]
   2325e:	4a04      	ldr	r2, [pc, #16]	; (23270 <appAdvSetData+0xb4>)
   23260:	4413      	add	r3, r2
   23262:	2200      	movs	r2, #0
   23264:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   23268:	bf00      	nop
   2326a:	3708      	adds	r7, #8
   2326c:	46bd      	mov	sp, r7
   2326e:	bd80      	pop	{r7, pc}
   23270:	10044f20 	.word	0x10044f20

00023274 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   23274:	b580      	push	{r7, lr}
   23276:	b086      	sub	sp, #24
   23278:	af00      	add	r7, sp, #0
   2327a:	60b9      	str	r1, [r7, #8]
   2327c:	607a      	str	r2, [r7, #4]
   2327e:	603b      	str	r3, [r7, #0]
   23280:	4603      	mov	r3, r0
   23282:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   23284:	7bfb      	ldrb	r3, [r7, #15]
   23286:	68b9      	ldr	r1, [r7, #8]
   23288:	4618      	mov	r0, r3
   2328a:	f7ff f89f 	bl	223cc <appSlaveConnectableAdv>
   2328e:	4603      	mov	r3, r0
   23290:	2b00      	cmp	r3, #0
   23292:	d009      	beq.n	232a8 <appAdvStart+0x34>
   23294:	2001      	movs	r0, #1
   23296:	f7fe fe89 	bl	21fac <appNumConns>
   2329a:	4603      	mov	r3, r0
   2329c:	461a      	mov	r2, r3
   2329e:	4b35      	ldr	r3, [pc, #212]	; (23374 <appAdvStart+0x100>)
   232a0:	681b      	ldr	r3, [r3, #0]
   232a2:	781b      	ldrb	r3, [r3, #0]
   232a4:	429a      	cmp	r2, r3
   232a6:	d24e      	bcs.n	23346 <appAdvStart+0xd2>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   232a8:	2300      	movs	r3, #0
   232aa:	75fb      	strb	r3, [r7, #23]
   232ac:	e040      	b.n	23330 <appAdvStart+0xbc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   232ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   232b2:	2b00      	cmp	r3, #0
   232b4:	d023      	beq.n	232fe <appAdvStart+0x8a>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   232b6:	7dfb      	ldrb	r3, [r7, #23]
   232b8:	68ba      	ldr	r2, [r7, #8]
   232ba:	4413      	add	r3, r2
   232bc:	7818      	ldrb	r0, [r3, #0]
   232be:	7dfb      	ldrb	r3, [r7, #23]
   232c0:	005b      	lsls	r3, r3, #1
   232c2:	687a      	ldr	r2, [r7, #4]
   232c4:	4413      	add	r3, r2
   232c6:	8819      	ldrh	r1, [r3, #0]
   232c8:	7dfb      	ldrb	r3, [r7, #23]
   232ca:	005b      	lsls	r3, r3, #1
   232cc:	687a      	ldr	r2, [r7, #4]
   232ce:	4413      	add	r3, r2
   232d0:	881b      	ldrh	r3, [r3, #0]
   232d2:	461a      	mov	r2, r3
   232d4:	f7ec f936 	bl	f544 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   232d8:	7dfb      	ldrb	r3, [r7, #23]
   232da:	68ba      	ldr	r2, [r7, #8]
   232dc:	4413      	add	r3, r2
   232de:	7818      	ldrb	r0, [r3, #0]
   232e0:	7dfb      	ldrb	r3, [r7, #23]
   232e2:	68ba      	ldr	r2, [r7, #8]
   232e4:	4413      	add	r3, r2
   232e6:	781b      	ldrb	r3, [r3, #0]
   232e8:	461a      	mov	r2, r3
   232ea:	4b23      	ldr	r3, [pc, #140]	; (23378 <appAdvStart+0x104>)
   232ec:	4413      	add	r3, r2
   232ee:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
   232f2:	4b21      	ldr	r3, [pc, #132]	; (23378 <appAdvStart+0x104>)
   232f4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   232f8:	4b20      	ldr	r3, [pc, #128]	; (2337c <appAdvStart+0x108>)
   232fa:	f7ec f881 	bl	f400 <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   232fe:	7dfb      	ldrb	r3, [r7, #23]
   23300:	68ba      	ldr	r2, [r7, #8]
   23302:	4413      	add	r3, r2
   23304:	781b      	ldrb	r3, [r3, #0]
   23306:	461a      	mov	r2, r3
   23308:	4b1b      	ldr	r3, [pc, #108]	; (23378 <appAdvStart+0x104>)
   2330a:	4413      	add	r3, r2
   2330c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   23310:	2b00      	cmp	r3, #0
   23312:	d10a      	bne.n	2332a <appAdvStart+0xb6>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   23314:	7dfb      	ldrb	r3, [r7, #23]
   23316:	68ba      	ldr	r2, [r7, #8]
   23318:	4413      	add	r3, r2
   2331a:	781a      	ldrb	r2, [r3, #0]
   2331c:	4b16      	ldr	r3, [pc, #88]	; (23378 <appAdvStart+0x104>)
   2331e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   23322:	4619      	mov	r1, r3
   23324:	4610      	mov	r0, r2
   23326:	f7ff f93f 	bl	225a8 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   2332a:	7dfb      	ldrb	r3, [r7, #23]
   2332c:	3301      	adds	r3, #1
   2332e:	75fb      	strb	r3, [r7, #23]
   23330:	7dfa      	ldrb	r2, [r7, #23]
   23332:	7bfb      	ldrb	r3, [r7, #15]
   23334:	429a      	cmp	r2, r3
   23336:	d3ba      	bcc.n	232ae <appAdvStart+0x3a>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   23338:	7bf8      	ldrb	r0, [r7, #15]
   2333a:	6a3b      	ldr	r3, [r7, #32]
   2333c:	683a      	ldr	r2, [r7, #0]
   2333e:	68b9      	ldr	r1, [r7, #8]
   23340:	f7ec f89c 	bl	f47c <DmAdvStart>

    return;
   23344:	e013      	b.n	2336e <appAdvStart+0xfa>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   23346:	2300      	movs	r3, #0
   23348:	75fb      	strb	r3, [r7, #23]
   2334a:	e00c      	b.n	23366 <appAdvStart+0xf2>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   2334c:	7dfb      	ldrb	r3, [r7, #23]
   2334e:	68ba      	ldr	r2, [r7, #8]
   23350:	4413      	add	r3, r2
   23352:	781b      	ldrb	r3, [r3, #0]
   23354:	461a      	mov	r2, r3
   23356:	4b08      	ldr	r3, [pc, #32]	; (23378 <appAdvStart+0x104>)
   23358:	4413      	add	r3, r2
   2335a:	2203      	movs	r2, #3
   2335c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   23360:	7dfb      	ldrb	r3, [r7, #23]
   23362:	3301      	adds	r3, #1
   23364:	75fb      	strb	r3, [r7, #23]
   23366:	7dfa      	ldrb	r2, [r7, #23]
   23368:	7bfb      	ldrb	r3, [r7, #15]
   2336a:	429a      	cmp	r2, r3
   2336c:	d3ee      	bcc.n	2334c <appAdvStart+0xd8>
  }
}
   2336e:	3718      	adds	r7, #24
   23370:	46bd      	mov	sp, r7
   23372:	bd80      	pop	{r7, pc}
   23374:	10044df8 	.word	0x10044df8
   23378:	10044f20 	.word	0x10044f20
   2337c:	10044f50 	.word	0x10044f50

00023380 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   23380:	b580      	push	{r7, lr}
   23382:	b088      	sub	sp, #32
   23384:	af02      	add	r7, sp, #8
   23386:	60b9      	str	r1, [r7, #8]
   23388:	607a      	str	r2, [r7, #4]
   2338a:	603b      	str	r3, [r7, #0]
   2338c:	4603      	mov	r3, r0
   2338e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   23390:	4b25      	ldr	r3, [pc, #148]	; (23428 <appSlaveAdvStart+0xa8>)
   23392:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   23396:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   23398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   2339c:	2b02      	cmp	r3, #2
   2339e:	d114      	bne.n	233ca <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   233a0:	f7f6 f8a4 	bl	194ec <AppDbCheckBonded>
   233a4:	4603      	mov	r3, r0
   233a6:	2b00      	cmp	r3, #0
   233a8:	d107      	bne.n	233ba <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   233aa:	2001      	movs	r0, #1
   233ac:	f000 f8c0 	bl	23530 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   233b0:	4b1d      	ldr	r3, [pc, #116]	; (23428 <appSlaveAdvStart+0xa8>)
   233b2:	2201      	movs	r2, #1
   233b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   233b8:	e00c      	b.n	233d4 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   233ba:	2000      	movs	r0, #0
   233bc:	f000 f8b8 	bl	23530 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   233c0:	4b19      	ldr	r3, [pc, #100]	; (23428 <appSlaveAdvStart+0xa8>)
   233c2:	2200      	movs	r2, #0
   233c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   233c8:	e004      	b.n	233d4 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   233ca:	4a17      	ldr	r2, [pc, #92]	; (23428 <appSlaveAdvStart+0xa8>)
   233cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   233d0:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   233d4:	4b14      	ldr	r3, [pc, #80]	; (23428 <appSlaveAdvStart+0xa8>)
   233d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   233da:	7dba      	ldrb	r2, [r7, #22]
   233dc:	429a      	cmp	r2, r3
   233de:	d014      	beq.n	2340a <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   233e0:	2300      	movs	r3, #0
   233e2:	75fb      	strb	r3, [r7, #23]
   233e4:	e00d      	b.n	23402 <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   233e6:	7dfb      	ldrb	r3, [r7, #23]
   233e8:	68ba      	ldr	r2, [r7, #8]
   233ea:	4413      	add	r3, r2
   233ec:	781a      	ldrb	r2, [r3, #0]
   233ee:	4b0e      	ldr	r3, [pc, #56]	; (23428 <appSlaveAdvStart+0xa8>)
   233f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   233f4:	4619      	mov	r1, r3
   233f6:	4610      	mov	r0, r2
   233f8:	f7ff f822 	bl	22440 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   233fc:	7dfb      	ldrb	r3, [r7, #23]
   233fe:	3301      	adds	r3, #1
   23400:	75fb      	strb	r3, [r7, #23]
   23402:	7dfa      	ldrb	r2, [r7, #23]
   23404:	7bfb      	ldrb	r3, [r7, #15]
   23406:	429a      	cmp	r2, r3
   23408:	d3ed      	bcc.n	233e6 <appSlaveAdvStart+0x66>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   2340a:	7bf8      	ldrb	r0, [r7, #15]
   2340c:	2301      	movs	r3, #1
   2340e:	9301      	str	r3, [sp, #4]
   23410:	6a3b      	ldr	r3, [r7, #32]
   23412:	9300      	str	r3, [sp, #0]
   23414:	683b      	ldr	r3, [r7, #0]
   23416:	687a      	ldr	r2, [r7, #4]
   23418:	68b9      	ldr	r1, [r7, #8]
   2341a:	f7ff ff2b 	bl	23274 <appAdvStart>
}
   2341e:	bf00      	nop
   23420:	3718      	adds	r7, #24
   23422:	46bd      	mov	sp, r7
   23424:	bd80      	pop	{r7, pc}
   23426:	bf00      	nop
   23428:	10044f20 	.word	0x10044f20

0002342c <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   2342c:	b580      	push	{r7, lr}
   2342e:	b084      	sub	sp, #16
   23430:	af00      	add	r7, sp, #0
   23432:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   23434:	687b      	ldr	r3, [r7, #4]
   23436:	881b      	ldrh	r3, [r3, #0]
   23438:	3b01      	subs	r3, #1
   2343a:	015b      	lsls	r3, r3, #5
   2343c:	4a3b      	ldr	r2, [pc, #236]	; (2352c <AppSlaveSecProcDmMsg+0x100>)
   2343e:	4413      	add	r3, r2
   23440:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   23442:	687b      	ldr	r3, [r7, #4]
   23444:	789b      	ldrb	r3, [r3, #2]
   23446:	3b27      	subs	r3, #39	; 0x27
   23448:	2b17      	cmp	r3, #23
   2344a:	d869      	bhi.n	23520 <AppSlaveSecProcDmMsg+0xf4>
   2344c:	a201      	add	r2, pc, #4	; (adr r2, 23454 <AppSlaveSecProcDmMsg+0x28>)
   2344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23452:	bf00      	nop
   23454:	000234b5 	.word	0x000234b5
   23458:	000234bf 	.word	0x000234bf
   2345c:	00023521 	.word	0x00023521
   23460:	000234c9 	.word	0x000234c9
   23464:	000234d3 	.word	0x000234d3
   23468:	000234dd 	.word	0x000234dd
   2346c:	00023521 	.word	0x00023521
   23470:	00023521 	.word	0x00023521
   23474:	000234e7 	.word	0x000234e7
   23478:	000234fb 	.word	0x000234fb
   2347c:	000234f1 	.word	0x000234f1
   23480:	00023521 	.word	0x00023521
   23484:	00023521 	.word	0x00023521
   23488:	00023521 	.word	0x00023521
   2348c:	00023521 	.word	0x00023521
   23490:	00023521 	.word	0x00023521
   23494:	00023521 	.word	0x00023521
   23498:	00023521 	.word	0x00023521
   2349c:	0002350d 	.word	0x0002350d
   234a0:	00023517 	.word	0x00023517
   234a4:	00023521 	.word	0x00023521
   234a8:	00023521 	.word	0x00023521
   234ac:	00023521 	.word	0x00023521
   234b0:	00023505 	.word	0x00023505
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   234b4:	68f9      	ldr	r1, [r7, #12]
   234b6:	6878      	ldr	r0, [r7, #4]
   234b8:	f7ff fb0a 	bl	22ad0 <appSlaveSecConnOpen>
      break;
   234bc:	e031      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   234be:	68f9      	ldr	r1, [r7, #12]
   234c0:	6878      	ldr	r0, [r7, #4]
   234c2:	f7ff fb47 	bl	22b54 <appSecConnClose>
      break;
   234c6:	e02c      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   234c8:	68f9      	ldr	r1, [r7, #12]
   234ca:	6878      	ldr	r0, [r7, #4]
   234cc:	f7ff fbfc 	bl	22cc8 <appSecPairCmpl>
      break;
   234d0:	e027      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   234d2:	68f9      	ldr	r1, [r7, #12]
   234d4:	6878      	ldr	r0, [r7, #4]
   234d6:	f7ff fc2b 	bl	22d30 <appSecPairFailed>
      break;
   234da:	e022      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   234dc:	68f9      	ldr	r1, [r7, #12]
   234de:	6878      	ldr	r0, [r7, #4]
   234e0:	f7ff fc31 	bl	22d46 <appSecEncryptInd>
      break;
   234e4:	e01d      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   234e6:	68f9      	ldr	r1, [r7, #12]
   234e8:	6878      	ldr	r0, [r7, #4]
   234ea:	f7ff fbcd 	bl	22c88 <appSecStoreKey>
      break;
   234ee:	e018      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   234f0:	68f9      	ldr	r1, [r7, #12]
   234f2:	6878      	ldr	r0, [r7, #4]
   234f4:	f7ff fb40 	bl	22b78 <appSecPairInd>
      break;
   234f8:	e013      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   234fa:	68f9      	ldr	r1, [r7, #12]
   234fc:	6878      	ldr	r0, [r7, #4]
   234fe:	f7ff fc3b 	bl	22d78 <appSecFindLtk>
      break;
   23502:	e00e      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   23504:	6878      	ldr	r0, [r7, #4]
   23506:	f7ff fc77 	bl	22df8 <appPrivSetAddrResEnableInd>
      break;
   2350a:	e00a      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   2350c:	68f9      	ldr	r1, [r7, #12]
   2350e:	6878      	ldr	r0, [r7, #4]
   23510:	f7ff fc84 	bl	22e1c <appPrivAddDevToResListInd>
      break;
   23514:	e005      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   23516:	68f9      	ldr	r1, [r7, #12]
   23518:	6878      	ldr	r0, [r7, #4]
   2351a:	f7ff fca9 	bl	22e70 <appPrivRemDevFromResListInd>
      break;
   2351e:	e000      	b.n	23522 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   23520:	bf00      	nop
  }
}
   23522:	bf00      	nop
   23524:	3710      	adds	r7, #16
   23526:	46bd      	mov	sp, r7
   23528:	bd80      	pop	{r7, pc}
   2352a:	bf00      	nop
   2352c:	10044e20 	.word	0x10044e20

00023530 <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   23530:	b480      	push	{r7}
   23532:	b083      	sub	sp, #12
   23534:	af00      	add	r7, sp, #0
   23536:	4603      	mov	r3, r0
   23538:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   2353a:	4a05      	ldr	r2, [pc, #20]	; (23550 <AppSetBondable+0x20>)
   2353c:	79fb      	ldrb	r3, [r7, #7]
   2353e:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   23542:	bf00      	nop
   23544:	370c      	adds	r7, #12
   23546:	46bd      	mov	sp, r7
   23548:	f85d 7b04 	ldr.w	r7, [sp], #4
   2354c:	4770      	bx	lr
   2354e:	bf00      	nop
   23550:	10044f20 	.word	0x10044f20

00023554 <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   23554:	b580      	push	{r7, lr}
   23556:	b082      	sub	sp, #8
   23558:	af00      	add	r7, sp, #0
   2355a:	4603      	mov	r3, r0
   2355c:	6039      	str	r1, [r7, #0]
   2355e:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   23560:	4a05      	ldr	r2, [pc, #20]	; (23578 <AppSetAdvPeerAddr+0x24>)
   23562:	79fb      	ldrb	r3, [r7, #7]
   23564:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   23568:	6839      	ldr	r1, [r7, #0]
   2356a:	4804      	ldr	r0, [pc, #16]	; (2357c <AppSetAdvPeerAddr+0x28>)
   2356c:	f7fc fb71 	bl	1fc52 <BdaCpy>
}
   23570:	bf00      	nop
   23572:	3708      	adds	r7, #8
   23574:	46bd      	mov	sp, r7
   23576:	bd80      	pop	{r7, pc}
   23578:	10044f20 	.word	0x10044f20
   2357c:	10044f50 	.word	0x10044f50

00023580 <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   23580:	b580      	push	{r7, lr}
   23582:	b084      	sub	sp, #16
   23584:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   23586:	4b15      	ldr	r3, [pc, #84]	; (235dc <appSlaveLegAdvStart+0x5c>)
   23588:	681a      	ldr	r2, [r3, #0]
   2358a:	4b15      	ldr	r3, [pc, #84]	; (235e0 <appSlaveLegAdvStart+0x60>)
   2358c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   23590:	005b      	lsls	r3, r3, #1
   23592:	4413      	add	r3, r2
   23594:	88db      	ldrh	r3, [r3, #6]
   23596:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   23598:	88bb      	ldrh	r3, [r7, #4]
   2359a:	2b00      	cmp	r3, #0
   2359c:	d015      	beq.n	235ca <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2359e:	2300      	movs	r3, #0
   235a0:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   235a2:	2300      	movs	r3, #0
   235a4:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   235a6:	4b0d      	ldr	r3, [pc, #52]	; (235dc <appSlaveLegAdvStart+0x5c>)
   235a8:	681a      	ldr	r2, [r3, #0]
   235aa:	4b0d      	ldr	r3, [pc, #52]	; (235e0 <appSlaveLegAdvStart+0x60>)
   235ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   235b0:	005b      	lsls	r3, r3, #1
   235b2:	18d0      	adds	r0, r2, r3
   235b4:	1d3a      	adds	r2, r7, #4
   235b6:	1df9      	adds	r1, r7, #7
   235b8:	2301      	movs	r3, #1
   235ba:	9301      	str	r3, [sp, #4]
   235bc:	1dbb      	adds	r3, r7, #6
   235be:	9300      	str	r3, [sp, #0]
   235c0:	4603      	mov	r3, r0
   235c2:	2001      	movs	r0, #1
   235c4:	f7ff fe56 	bl	23274 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   235c8:	e003      	b.n	235d2 <appSlaveLegAdvStart+0x52>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   235ca:	4b05      	ldr	r3, [pc, #20]	; (235e0 <appSlaveLegAdvStart+0x60>)
   235cc:	2203      	movs	r2, #3
   235ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   235d2:	bf00      	nop
   235d4:	3708      	adds	r7, #8
   235d6:	46bd      	mov	sp, r7
   235d8:	bd80      	pop	{r7, pc}
   235da:	bf00      	nop
   235dc:	10044e1c 	.word	0x10044e1c
   235e0:	10044f20 	.word	0x10044f20

000235e4 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   235e4:	b580      	push	{r7, lr}
   235e6:	b082      	sub	sp, #8
   235e8:	af00      	add	r7, sp, #0
   235ea:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   235ec:	4b06      	ldr	r3, [pc, #24]	; (23608 <appSlaveLegAdvTypeChanged+0x24>)
   235ee:	2200      	movs	r2, #0
   235f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   235f4:	4b04      	ldr	r3, [pc, #16]	; (23608 <appSlaveLegAdvTypeChanged+0x24>)
   235f6:	2200      	movs	r2, #0
   235f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   235fc:	f7ff ffc0 	bl	23580 <appSlaveLegAdvStart>
}
   23600:	bf00      	nop
   23602:	3708      	adds	r7, #8
   23604:	46bd      	mov	sp, r7
   23606:	bd80      	pop	{r7, pc}
   23608:	10044f20 	.word	0x10044f20

0002360c <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   2360c:	b580      	push	{r7, lr}
   2360e:	b082      	sub	sp, #8
   23610:	af00      	add	r7, sp, #0
   23612:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   23614:	4b09      	ldr	r3, [pc, #36]	; (2363c <appSlaveNextLegAdvState+0x30>)
   23616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2361a:	3301      	adds	r3, #1
   2361c:	b2da      	uxtb	r2, r3
   2361e:	4b07      	ldr	r3, [pc, #28]	; (2363c <appSlaveNextLegAdvState+0x30>)
   23620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   23624:	4b05      	ldr	r3, [pc, #20]	; (2363c <appSlaveNextLegAdvState+0x30>)
   23626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2362a:	2b02      	cmp	r3, #2
   2362c:	d801      	bhi.n	23632 <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   2362e:	f7ff ffa7 	bl	23580 <appSlaveLegAdvStart>
  }
}
   23632:	bf00      	nop
   23634:	3708      	adds	r7, #8
   23636:	46bd      	mov	sp, r7
   23638:	bd80      	pop	{r7, pc}
   2363a:	bf00      	nop
   2363c:	10044f20 	.word	0x10044f20

00023640 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   23640:	b580      	push	{r7, lr}
   23642:	b082      	sub	sp, #8
   23644:	af00      	add	r7, sp, #0
   23646:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   23648:	687b      	ldr	r3, [r7, #4]
   2364a:	789b      	ldrb	r3, [r3, #2]
   2364c:	2b47      	cmp	r3, #71	; 0x47
   2364e:	d103      	bne.n	23658 <appSlaveLegAdvStop+0x18>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   23650:	687b      	ldr	r3, [r7, #4]
   23652:	791b      	ldrb	r3, [r3, #4]
   23654:	2b00      	cmp	r3, #0
   23656:	d00c      	beq.n	23672 <appSlaveLegAdvStop+0x32>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   23658:	4b08      	ldr	r3, [pc, #32]	; (2367c <appSlaveLegAdvStop+0x3c>)
   2365a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   2365e:	2b00      	cmp	r3, #0
   23660:	d003      	beq.n	2366a <appSlaveLegAdvStop+0x2a>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   23662:	6878      	ldr	r0, [r7, #4]
   23664:	f7ff ffbe 	bl	235e4 <appSlaveLegAdvTypeChanged>
   23668:	e004      	b.n	23674 <appSlaveLegAdvStop+0x34>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   2366a:	6878      	ldr	r0, [r7, #4]
   2366c:	f7ff ffce 	bl	2360c <appSlaveNextLegAdvState>
   23670:	e000      	b.n	23674 <appSlaveLegAdvStop+0x34>
      return;
   23672:	bf00      	nop
  }
}
   23674:	3708      	adds	r7, #8
   23676:	46bd      	mov	sp, r7
   23678:	bd80      	pop	{r7, pc}
   2367a:	bf00      	nop
   2367c:	10044f20 	.word	0x10044f20

00023680 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   23680:	b580      	push	{r7, lr}
   23682:	b082      	sub	sp, #8
   23684:	af00      	add	r7, sp, #0
   23686:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   23688:	687b      	ldr	r3, [r7, #4]
   2368a:	789b      	ldrb	r3, [r3, #2]
   2368c:	2b27      	cmp	r3, #39	; 0x27
   2368e:	d103      	bne.n	23698 <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   23690:	4b09      	ldr	r3, [pc, #36]	; (236b8 <appSlaveLegAdvRestart+0x38>)
   23692:	2203      	movs	r2, #3
   23694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   23698:	4b07      	ldr	r3, [pc, #28]	; (236b8 <appSlaveLegAdvRestart+0x38>)
   2369a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2369e:	2b03      	cmp	r3, #3
   236a0:	d105      	bne.n	236ae <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   236a2:	4b05      	ldr	r3, [pc, #20]	; (236b8 <appSlaveLegAdvRestart+0x38>)
   236a4:	2200      	movs	r2, #0
   236a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   236aa:	f7ff ff69 	bl	23580 <appSlaveLegAdvStart>
  }
}
   236ae:	bf00      	nop
   236b0:	3708      	adds	r7, #8
   236b2:	46bd      	mov	sp, r7
   236b4:	bd80      	pop	{r7, pc}
   236b6:	bf00      	nop
   236b8:	10044f20 	.word	0x10044f20

000236bc <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   236bc:	b580      	push	{r7, lr}
   236be:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   236c0:	4b0c      	ldr	r3, [pc, #48]	; (236f4 <appSlaveAdvMode+0x38>)
   236c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   236c4:	2b00      	cmp	r3, #0
   236c6:	d107      	bne.n	236d8 <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   236c8:	4b0a      	ldr	r3, [pc, #40]	; (236f4 <appSlaveAdvMode+0x38>)
   236ca:	4a0b      	ldr	r2, [pc, #44]	; (236f8 <appSlaveAdvMode+0x3c>)
   236cc:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   236ce:	4b09      	ldr	r3, [pc, #36]	; (236f4 <appSlaveAdvMode+0x38>)
   236d0:	4a0a      	ldr	r2, [pc, #40]	; (236fc <appSlaveAdvMode+0x40>)
   236d2:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   236d4:	2301      	movs	r3, #1
   236d6:	e00a      	b.n	236ee <appSlaveAdvMode+0x32>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   236d8:	4b06      	ldr	r3, [pc, #24]	; (236f4 <appSlaveAdvMode+0x38>)
   236da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   236dc:	4a06      	ldr	r2, [pc, #24]	; (236f8 <appSlaveAdvMode+0x3c>)
   236de:	4293      	cmp	r3, r2
   236e0:	d101      	bne.n	236e6 <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   236e2:	2301      	movs	r3, #1
   236e4:	e003      	b.n	236ee <appSlaveAdvMode+0x32>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   236e6:	4806      	ldr	r0, [pc, #24]	; (23700 <appSlaveAdvMode+0x44>)
   236e8:	f7fd f822 	bl	20730 <WsfTrace>

  return FALSE;
   236ec:	2300      	movs	r3, #0
}
   236ee:	4618      	mov	r0, r3
   236f0:	bd80      	pop	{r7, pc}
   236f2:	bf00      	nop
   236f4:	10044f20 	.word	0x10044f20
   236f8:	00023641 	.word	0x00023641
   236fc:	00023681 	.word	0x00023681
   23700:	0003b868 	.word	0x0003b868

00023704 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   23704:	b580      	push	{r7, lr}
   23706:	b084      	sub	sp, #16
   23708:	af02      	add	r7, sp, #8
   2370a:	4603      	mov	r3, r0
   2370c:	603a      	str	r2, [r7, #0]
   2370e:	71fb      	strb	r3, [r7, #7]
   23710:	460b      	mov	r3, r1
   23712:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   23714:	f7ff ffd2 	bl	236bc <appSlaveAdvMode>
   23718:	4603      	mov	r3, r0
   2371a:	2b00      	cmp	r3, #0
   2371c:	d00f      	beq.n	2373e <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   2371e:	79bb      	ldrb	r3, [r7, #6]
   23720:	2b1f      	cmp	r3, #31
   23722:	d901      	bls.n	23728 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   23724:	231f      	movs	r3, #31
   23726:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   23728:	79bb      	ldrb	r3, [r7, #6]
   2372a:	b29a      	uxth	r2, r3
   2372c:	79f9      	ldrb	r1, [r7, #7]
   2372e:	231f      	movs	r3, #31
   23730:	9301      	str	r3, [sp, #4]
   23732:	231f      	movs	r3, #31
   23734:	9300      	str	r3, [sp, #0]
   23736:	683b      	ldr	r3, [r7, #0]
   23738:	2000      	movs	r0, #0
   2373a:	f7ff fd3f 	bl	231bc <appAdvSetData>
  }
}
   2373e:	bf00      	nop
   23740:	3708      	adds	r7, #8
   23742:	46bd      	mov	sp, r7
   23744:	bd80      	pop	{r7, pc}
	...

00023748 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   23748:	b580      	push	{r7, lr}
   2374a:	b088      	sub	sp, #32
   2374c:	af04      	add	r7, sp, #16
   2374e:	4603      	mov	r3, r0
   23750:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   23752:	f7ff ffb3 	bl	236bc <appSlaveAdvMode>
   23756:	4603      	mov	r3, r0
   23758:	2b00      	cmp	r3, #0
   2375a:	d01a      	beq.n	23792 <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   2375c:	2300      	movs	r3, #0
   2375e:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   23760:	2300      	movs	r3, #0
   23762:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   23764:	4b0d      	ldr	r3, [pc, #52]	; (2379c <AppAdvStart+0x54>)
   23766:	2200      	movs	r2, #0
   23768:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   2376c:	4b0c      	ldr	r3, [pc, #48]	; (237a0 <AppAdvStart+0x58>)
   2376e:	681b      	ldr	r3, [r3, #0]
   23770:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   23772:	4b0b      	ldr	r3, [pc, #44]	; (237a0 <AppAdvStart+0x58>)
   23774:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   23776:	4618      	mov	r0, r3
   23778:	f107 010f 	add.w	r1, r7, #15
   2377c:	79fb      	ldrb	r3, [r7, #7]
   2377e:	9302      	str	r3, [sp, #8]
   23780:	2301      	movs	r3, #1
   23782:	9301      	str	r3, [sp, #4]
   23784:	f107 030e 	add.w	r3, r7, #14
   23788:	9300      	str	r3, [sp, #0]
   2378a:	4603      	mov	r3, r0
   2378c:	2001      	movs	r0, #1
   2378e:	f7ff fdf7 	bl	23380 <appSlaveAdvStart>
  }
}
   23792:	bf00      	nop
   23794:	3710      	adds	r7, #16
   23796:	46bd      	mov	sp, r7
   23798:	bd80      	pop	{r7, pc}
   2379a:	bf00      	nop
   2379c:	10044f20 	.word	0x10044f20
   237a0:	10044e1c 	.word	0x10044e1c

000237a4 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   237a4:	b580      	push	{r7, lr}
   237a6:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   237a8:	4803      	ldr	r0, [pc, #12]	; (237b8 <SvcCoreAddGroup+0x14>)
   237aa:	f7ea fd35 	bl	e218 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   237ae:	4803      	ldr	r0, [pc, #12]	; (237bc <SvcCoreAddGroup+0x18>)
   237b0:	f7ea fd32 	bl	e218 <AttsAddGroup>
}
   237b4:	bf00      	nop
   237b6:	bd80      	pop	{r7, pc}
   237b8:	10017f88 	.word	0x10017f88
   237bc:	10017f9c 	.word	0x10017f9c

000237c0 <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   237c0:	b480      	push	{r7}
   237c2:	b083      	sub	sp, #12
   237c4:	af00      	add	r7, sp, #0
   237c6:	4603      	mov	r3, r0
   237c8:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   237ca:	4a04      	ldr	r2, [pc, #16]	; (237dc <SvcCoreGapCentAddrResUpdate+0x1c>)
   237cc:	79fb      	ldrb	r3, [r7, #7]
   237ce:	7013      	strb	r3, [r2, #0]
}
   237d0:	bf00      	nop
   237d2:	370c      	adds	r7, #12
   237d4:	46bd      	mov	sp, r7
   237d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   237da:	4770      	bx	lr
   237dc:	1001be78 	.word	0x1001be78

000237e0 <SvcDisAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcDisAddGroup(void)
{
   237e0:	b580      	push	{r7, lr}
   237e2:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcDisGroup);
   237e4:	4802      	ldr	r0, [pc, #8]	; (237f0 <SvcDisAddGroup+0x10>)
   237e6:	f7ea fd17 	bl	e218 <AttsAddGroup>
}
   237ea:	bf00      	nop
   237ec:	bd80      	pop	{r7, pc}
   237ee:	bf00      	nop
   237f0:	1001803c 	.word	0x1001803c

000237f4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   237f4:	b580      	push	{r7, lr}
   237f6:	b088      	sub	sp, #32
   237f8:	af00      	add	r7, sp, #0
   237fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   237fc:	2300      	movs	r3, #0
   237fe:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   23800:	f001 f8d8 	bl	249b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   23804:	4b40      	ldr	r3, [pc, #256]	; (23908 <pvPortMalloc+0x114>)
   23806:	681b      	ldr	r3, [r3, #0]
   23808:	2b00      	cmp	r3, #0
   2380a:	d104      	bne.n	23816 <pvPortMalloc+0x22>
		{
			prvHeapInit();
   2380c:	f000 f8c0 	bl	23990 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   23810:	4b3d      	ldr	r3, [pc, #244]	; (23908 <pvPortMalloc+0x114>)
   23812:	2201      	movs	r2, #1
   23814:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   23816:	687b      	ldr	r3, [r7, #4]
   23818:	2b00      	cmp	r3, #0
   2381a:	d00e      	beq.n	2383a <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   2381c:	2308      	movs	r3, #8
   2381e:	461a      	mov	r2, r3
   23820:	687b      	ldr	r3, [r7, #4]
   23822:	4413      	add	r3, r2
   23824:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   23826:	687b      	ldr	r3, [r7, #4]
   23828:	f003 0307 	and.w	r3, r3, #7
   2382c:	2b00      	cmp	r3, #0
   2382e:	d004      	beq.n	2383a <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   23830:	687b      	ldr	r3, [r7, #4]
   23832:	f023 0307 	bic.w	r3, r3, #7
   23836:	3308      	adds	r3, #8
   23838:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   2383a:	687b      	ldr	r3, [r7, #4]
   2383c:	2b00      	cmp	r3, #0
   2383e:	d056      	beq.n	238ee <pvPortMalloc+0xfa>
   23840:	687b      	ldr	r3, [r7, #4]
   23842:	4a32      	ldr	r2, [pc, #200]	; (2390c <pvPortMalloc+0x118>)
   23844:	4293      	cmp	r3, r2
   23846:	d852      	bhi.n	238ee <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   23848:	4b31      	ldr	r3, [pc, #196]	; (23910 <pvPortMalloc+0x11c>)
   2384a:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   2384c:	4b30      	ldr	r3, [pc, #192]	; (23910 <pvPortMalloc+0x11c>)
   2384e:	681b      	ldr	r3, [r3, #0]
   23850:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23852:	e004      	b.n	2385e <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
   23854:	69fb      	ldr	r3, [r7, #28]
   23856:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   23858:	69fb      	ldr	r3, [r7, #28]
   2385a:	681b      	ldr	r3, [r3, #0]
   2385c:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   2385e:	69fb      	ldr	r3, [r7, #28]
   23860:	685a      	ldr	r2, [r3, #4]
   23862:	687b      	ldr	r3, [r7, #4]
   23864:	429a      	cmp	r2, r3
   23866:	d203      	bcs.n	23870 <pvPortMalloc+0x7c>
   23868:	69fb      	ldr	r3, [r7, #28]
   2386a:	681b      	ldr	r3, [r3, #0]
   2386c:	2b00      	cmp	r3, #0
   2386e:	d1f1      	bne.n	23854 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   23870:	69fb      	ldr	r3, [r7, #28]
   23872:	4a28      	ldr	r2, [pc, #160]	; (23914 <pvPortMalloc+0x120>)
   23874:	4293      	cmp	r3, r2
   23876:	d03a      	beq.n	238ee <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   23878:	69bb      	ldr	r3, [r7, #24]
   2387a:	681b      	ldr	r3, [r3, #0]
   2387c:	2208      	movs	r2, #8
   2387e:	4413      	add	r3, r2
   23880:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   23882:	69fb      	ldr	r3, [r7, #28]
   23884:	681a      	ldr	r2, [r3, #0]
   23886:	69bb      	ldr	r3, [r7, #24]
   23888:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   2388a:	69fb      	ldr	r3, [r7, #28]
   2388c:	685a      	ldr	r2, [r3, #4]
   2388e:	687b      	ldr	r3, [r7, #4]
   23890:	1ad3      	subs	r3, r2, r3
   23892:	2208      	movs	r2, #8
   23894:	0052      	lsls	r2, r2, #1
   23896:	4293      	cmp	r3, r2
   23898:	d922      	bls.n	238e0 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   2389a:	69fa      	ldr	r2, [r7, #28]
   2389c:	687b      	ldr	r3, [r7, #4]
   2389e:	4413      	add	r3, r2
   238a0:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   238a2:	69fb      	ldr	r3, [r7, #28]
   238a4:	685a      	ldr	r2, [r3, #4]
   238a6:	687b      	ldr	r3, [r7, #4]
   238a8:	1ad2      	subs	r2, r2, r3
   238aa:	68fb      	ldr	r3, [r7, #12]
   238ac:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   238ae:	69fb      	ldr	r3, [r7, #28]
   238b0:	687a      	ldr	r2, [r7, #4]
   238b2:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   238b4:	68fb      	ldr	r3, [r7, #12]
   238b6:	685b      	ldr	r3, [r3, #4]
   238b8:	60bb      	str	r3, [r7, #8]
   238ba:	4b15      	ldr	r3, [pc, #84]	; (23910 <pvPortMalloc+0x11c>)
   238bc:	613b      	str	r3, [r7, #16]
   238be:	e002      	b.n	238c6 <pvPortMalloc+0xd2>
   238c0:	693b      	ldr	r3, [r7, #16]
   238c2:	681b      	ldr	r3, [r3, #0]
   238c4:	613b      	str	r3, [r7, #16]
   238c6:	693b      	ldr	r3, [r7, #16]
   238c8:	681b      	ldr	r3, [r3, #0]
   238ca:	685a      	ldr	r2, [r3, #4]
   238cc:	68bb      	ldr	r3, [r7, #8]
   238ce:	429a      	cmp	r2, r3
   238d0:	d3f6      	bcc.n	238c0 <pvPortMalloc+0xcc>
   238d2:	693b      	ldr	r3, [r7, #16]
   238d4:	681a      	ldr	r2, [r3, #0]
   238d6:	68fb      	ldr	r3, [r7, #12]
   238d8:	601a      	str	r2, [r3, #0]
   238da:	693b      	ldr	r3, [r7, #16]
   238dc:	68fa      	ldr	r2, [r7, #12]
   238de:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   238e0:	4b0d      	ldr	r3, [pc, #52]	; (23918 <pvPortMalloc+0x124>)
   238e2:	681a      	ldr	r2, [r3, #0]
   238e4:	69fb      	ldr	r3, [r7, #28]
   238e6:	685b      	ldr	r3, [r3, #4]
   238e8:	1ad3      	subs	r3, r2, r3
   238ea:	4a0b      	ldr	r2, [pc, #44]	; (23918 <pvPortMalloc+0x124>)
   238ec:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   238ee:	f001 f8a7 	bl	24a40 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   238f2:	697b      	ldr	r3, [r7, #20]
   238f4:	2b00      	cmp	r3, #0
   238f6:	d101      	bne.n	238fc <pvPortMalloc+0x108>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   238f8:	f7fc fd23 	bl	20342 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   238fc:	697b      	ldr	r3, [r7, #20]
}
   238fe:	4618      	mov	r0, r3
   23900:	3720      	adds	r7, #32
   23902:	46bd      	mov	sp, r7
   23904:	bd80      	pop	{r7, pc}
   23906:	bf00      	nop
   23908:	10043e9c 	.word	0x10043e9c
   2390c:	00027ff7 	.word	0x00027ff7
   23910:	10043e8c 	.word	0x10043e8c
   23914:	10043e94 	.word	0x10043e94
   23918:	10018050 	.word	0x10018050

0002391c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   2391c:	b580      	push	{r7, lr}
   2391e:	b086      	sub	sp, #24
   23920:	af00      	add	r7, sp, #0
   23922:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   23924:	687b      	ldr	r3, [r7, #4]
   23926:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   23928:	687b      	ldr	r3, [r7, #4]
   2392a:	2b00      	cmp	r3, #0
   2392c:	d027      	beq.n	2397e <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   2392e:	2308      	movs	r3, #8
   23930:	425b      	negs	r3, r3
   23932:	693a      	ldr	r2, [r7, #16]
   23934:	4413      	add	r3, r2
   23936:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   23938:	693b      	ldr	r3, [r7, #16]
   2393a:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   2393c:	f001 f83a 	bl	249b4 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   23940:	68fb      	ldr	r3, [r7, #12]
   23942:	685b      	ldr	r3, [r3, #4]
   23944:	60bb      	str	r3, [r7, #8]
   23946:	4b10      	ldr	r3, [pc, #64]	; (23988 <vPortFree+0x6c>)
   23948:	617b      	str	r3, [r7, #20]
   2394a:	e002      	b.n	23952 <vPortFree+0x36>
   2394c:	697b      	ldr	r3, [r7, #20]
   2394e:	681b      	ldr	r3, [r3, #0]
   23950:	617b      	str	r3, [r7, #20]
   23952:	697b      	ldr	r3, [r7, #20]
   23954:	681b      	ldr	r3, [r3, #0]
   23956:	685a      	ldr	r2, [r3, #4]
   23958:	68bb      	ldr	r3, [r7, #8]
   2395a:	429a      	cmp	r2, r3
   2395c:	d3f6      	bcc.n	2394c <vPortFree+0x30>
   2395e:	697b      	ldr	r3, [r7, #20]
   23960:	681a      	ldr	r2, [r3, #0]
   23962:	68fb      	ldr	r3, [r7, #12]
   23964:	601a      	str	r2, [r3, #0]
   23966:	697b      	ldr	r3, [r7, #20]
   23968:	68fa      	ldr	r2, [r7, #12]
   2396a:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   2396c:	68fb      	ldr	r3, [r7, #12]
   2396e:	685a      	ldr	r2, [r3, #4]
   23970:	4b06      	ldr	r3, [pc, #24]	; (2398c <vPortFree+0x70>)
   23972:	681b      	ldr	r3, [r3, #0]
   23974:	4413      	add	r3, r2
   23976:	4a05      	ldr	r2, [pc, #20]	; (2398c <vPortFree+0x70>)
   23978:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   2397a:	f001 f861 	bl	24a40 <xTaskResumeAll>
	}
}
   2397e:	bf00      	nop
   23980:	3718      	adds	r7, #24
   23982:	46bd      	mov	sp, r7
   23984:	bd80      	pop	{r7, pc}
   23986:	bf00      	nop
   23988:	10043e8c 	.word	0x10043e8c
   2398c:	10018050 	.word	0x10018050

00023990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   23990:	b480      	push	{r7}
   23992:	b083      	sub	sp, #12
   23994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   23996:	4b0f      	ldr	r3, [pc, #60]	; (239d4 <prvHeapInit+0x44>)
   23998:	f023 0307 	bic.w	r3, r3, #7
   2399c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   2399e:	4a0e      	ldr	r2, [pc, #56]	; (239d8 <prvHeapInit+0x48>)
   239a0:	687b      	ldr	r3, [r7, #4]
   239a2:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   239a4:	4b0c      	ldr	r3, [pc, #48]	; (239d8 <prvHeapInit+0x48>)
   239a6:	2200      	movs	r2, #0
   239a8:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   239aa:	4b0c      	ldr	r3, [pc, #48]	; (239dc <prvHeapInit+0x4c>)
   239ac:	4a0c      	ldr	r2, [pc, #48]	; (239e0 <prvHeapInit+0x50>)
   239ae:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   239b0:	4b0a      	ldr	r3, [pc, #40]	; (239dc <prvHeapInit+0x4c>)
   239b2:	2200      	movs	r2, #0
   239b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   239b6:	687b      	ldr	r3, [r7, #4]
   239b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   239ba:	683b      	ldr	r3, [r7, #0]
   239bc:	4a08      	ldr	r2, [pc, #32]	; (239e0 <prvHeapInit+0x50>)
   239be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   239c0:	683b      	ldr	r3, [r7, #0]
   239c2:	4a06      	ldr	r2, [pc, #24]	; (239dc <prvHeapInit+0x4c>)
   239c4:	601a      	str	r2, [r3, #0]
}
   239c6:	bf00      	nop
   239c8:	370c      	adds	r7, #12
   239ca:	46bd      	mov	sp, r7
   239cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   239d0:	4770      	bx	lr
   239d2:	bf00      	nop
   239d4:	1001be94 	.word	0x1001be94
   239d8:	10043e8c 	.word	0x10043e8c
   239dc:	10043e94 	.word	0x10043e94
   239e0:	00027ff8 	.word	0x00027ff8

000239e4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   239e4:	b580      	push	{r7, lr}
   239e6:	b082      	sub	sp, #8
   239e8:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   239ea:	2018      	movs	r0, #24
   239ec:	f7ff ff02 	bl	237f4 <pvPortMalloc>
   239f0:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   239f2:	687b      	ldr	r3, [r7, #4]
   239f4:	2b00      	cmp	r3, #0
   239f6:	d007      	beq.n	23a08 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   239f8:	687b      	ldr	r3, [r7, #4]
   239fa:	2200      	movs	r2, #0
   239fc:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   239fe:	687b      	ldr	r3, [r7, #4]
   23a00:	3304      	adds	r3, #4
   23a02:	4618      	mov	r0, r3
   23a04:	f000 f952 	bl	23cac <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   23a08:	687b      	ldr	r3, [r7, #4]
	}
   23a0a:	4618      	mov	r0, r3
   23a0c:	3708      	adds	r7, #8
   23a0e:	46bd      	mov	sp, r7
   23a10:	bd80      	pop	{r7, pc}
	...

00023a14 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   23a14:	b580      	push	{r7, lr}
   23a16:	b08c      	sub	sp, #48	; 0x30
   23a18:	af00      	add	r7, sp, #0
   23a1a:	60f8      	str	r0, [r7, #12]
   23a1c:	60b9      	str	r1, [r7, #8]
   23a1e:	607a      	str	r2, [r7, #4]
   23a20:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
   23a22:	68fb      	ldr	r3, [r7, #12]
   23a24:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   23a26:	2300      	movs	r3, #0
   23a28:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   23a2a:	2300      	movs	r3, #0
   23a2c:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   23a2e:	68fb      	ldr	r3, [r7, #12]
   23a30:	2b00      	cmp	r3, #0
   23a32:	d100      	bne.n	23a36 <xEventGroupWaitBits+0x22>
   23a34:	e7fe      	b.n	23a34 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   23a36:	68bb      	ldr	r3, [r7, #8]
   23a38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   23a3c:	2b00      	cmp	r3, #0
   23a3e:	d000      	beq.n	23a42 <xEventGroupWaitBits+0x2e>
   23a40:	e7fe      	b.n	23a40 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   23a42:	68bb      	ldr	r3, [r7, #8]
   23a44:	2b00      	cmp	r3, #0
   23a46:	d100      	bne.n	23a4a <xEventGroupWaitBits+0x36>
   23a48:	e7fe      	b.n	23a48 <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   23a4a:	f001 fc17 	bl	2527c <xTaskGetSchedulerState>
   23a4e:	4603      	mov	r3, r0
   23a50:	2b00      	cmp	r3, #0
   23a52:	d102      	bne.n	23a5a <xEventGroupWaitBits+0x46>
   23a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23a56:	2b00      	cmp	r3, #0
   23a58:	d101      	bne.n	23a5e <xEventGroupWaitBits+0x4a>
   23a5a:	2301      	movs	r3, #1
   23a5c:	e000      	b.n	23a60 <xEventGroupWaitBits+0x4c>
   23a5e:	2300      	movs	r3, #0
   23a60:	2b00      	cmp	r3, #0
   23a62:	d100      	bne.n	23a66 <xEventGroupWaitBits+0x52>
   23a64:	e7fe      	b.n	23a64 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   23a66:	f000 ffa5 	bl	249b4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   23a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23a6c:	681b      	ldr	r3, [r3, #0]
   23a6e:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   23a70:	683a      	ldr	r2, [r7, #0]
   23a72:	68b9      	ldr	r1, [r7, #8]
   23a74:	69f8      	ldr	r0, [r7, #28]
   23a76:	f000 f8f7 	bl	23c68 <prvTestWaitCondition>
   23a7a:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   23a7c:	69bb      	ldr	r3, [r7, #24]
   23a7e:	2b00      	cmp	r3, #0
   23a80:	d00e      	beq.n	23aa0 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   23a82:	69fb      	ldr	r3, [r7, #28]
   23a84:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   23a86:	2300      	movs	r3, #0
   23a88:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   23a8a:	687b      	ldr	r3, [r7, #4]
   23a8c:	2b00      	cmp	r3, #0
   23a8e:	d028      	beq.n	23ae2 <xEventGroupWaitBits+0xce>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   23a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23a92:	681a      	ldr	r2, [r3, #0]
   23a94:	68bb      	ldr	r3, [r7, #8]
   23a96:	43db      	mvns	r3, r3
   23a98:	401a      	ands	r2, r3
   23a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23a9c:	601a      	str	r2, [r3, #0]
   23a9e:	e020      	b.n	23ae2 <xEventGroupWaitBits+0xce>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   23aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23aa2:	2b00      	cmp	r3, #0
   23aa4:	d104      	bne.n	23ab0 <xEventGroupWaitBits+0x9c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   23aa6:	69fb      	ldr	r3, [r7, #28]
   23aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   23aaa:	2301      	movs	r3, #1
   23aac:	623b      	str	r3, [r7, #32]
   23aae:	e018      	b.n	23ae2 <xEventGroupWaitBits+0xce>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   23ab0:	687b      	ldr	r3, [r7, #4]
   23ab2:	2b00      	cmp	r3, #0
   23ab4:	d003      	beq.n	23abe <xEventGroupWaitBits+0xaa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   23ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23ab8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   23abc:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   23abe:	683b      	ldr	r3, [r7, #0]
   23ac0:	2b00      	cmp	r3, #0
   23ac2:	d003      	beq.n	23acc <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   23ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23ac6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   23aca:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   23acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23ace:	1d18      	adds	r0, r3, #4
   23ad0:	68ba      	ldr	r2, [r7, #8]
   23ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23ad4:	4313      	orrs	r3, r2
   23ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23ad8:	4619      	mov	r1, r3
   23ada:	f001 f9a5 	bl	24e28 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   23ade:	2300      	movs	r3, #0
   23ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   23ae2:	f000 ffad 	bl	24a40 <xTaskResumeAll>
   23ae6:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   23ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23aea:	2b00      	cmp	r3, #0
   23aec:	d031      	beq.n	23b52 <xEventGroupWaitBits+0x13e>
	{
		if( xAlreadyYielded == pdFALSE )
   23aee:	697b      	ldr	r3, [r7, #20]
   23af0:	2b00      	cmp	r3, #0
   23af2:	d107      	bne.n	23b04 <xEventGroupWaitBits+0xf0>
		{
			portYIELD_WITHIN_API();
   23af4:	4b19      	ldr	r3, [pc, #100]	; (23b5c <xEventGroupWaitBits+0x148>)
   23af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23afa:	601a      	str	r2, [r3, #0]
   23afc:	f3bf 8f4f 	dsb	sy
   23b00:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   23b04:	f001 fbd8 	bl	252b8 <uxTaskResetEventItemValue>
   23b08:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   23b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   23b10:	2b00      	cmp	r3, #0
   23b12:	d11a      	bne.n	23b4a <xEventGroupWaitBits+0x136>
		{
			taskENTER_CRITICAL();
   23b14:	f7f6 f8e0 	bl	19cd8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   23b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b1a:	681b      	ldr	r3, [r3, #0]
   23b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   23b1e:	683a      	ldr	r2, [r7, #0]
   23b20:	68b9      	ldr	r1, [r7, #8]
   23b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   23b24:	f000 f8a0 	bl	23c68 <prvTestWaitCondition>
   23b28:	4603      	mov	r3, r0
   23b2a:	2b00      	cmp	r3, #0
   23b2c:	d009      	beq.n	23b42 <xEventGroupWaitBits+0x12e>
				{
					if( xClearOnExit != pdFALSE )
   23b2e:	687b      	ldr	r3, [r7, #4]
   23b30:	2b00      	cmp	r3, #0
   23b32:	d006      	beq.n	23b42 <xEventGroupWaitBits+0x12e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   23b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b36:	681a      	ldr	r2, [r3, #0]
   23b38:	68bb      	ldr	r3, [r7, #8]
   23b3a:	43db      	mvns	r3, r3
   23b3c:	401a      	ands	r2, r3
   23b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b40:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   23b42:	2301      	movs	r3, #1
   23b44:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
   23b46:	f7f6 f8ed 	bl	19d24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   23b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   23b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   23b54:	4618      	mov	r0, r3
   23b56:	3730      	adds	r7, #48	; 0x30
   23b58:	46bd      	mov	sp, r7
   23b5a:	bd80      	pop	{r7, pc}
   23b5c:	e000ed04 	.word	0xe000ed04

00023b60 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   23b60:	b580      	push	{r7, lr}
   23b62:	b08c      	sub	sp, #48	; 0x30
   23b64:	af00      	add	r7, sp, #0
   23b66:	6078      	str	r0, [r7, #4]
   23b68:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   23b6a:	2300      	movs	r3, #0
   23b6c:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   23b6e:	687b      	ldr	r3, [r7, #4]
   23b70:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   23b72:	2300      	movs	r3, #0
   23b74:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   23b76:	687b      	ldr	r3, [r7, #4]
   23b78:	2b00      	cmp	r3, #0
   23b7a:	d100      	bne.n	23b7e <xEventGroupSetBits+0x1e>
   23b7c:	e7fe      	b.n	23b7c <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   23b7e:	683b      	ldr	r3, [r7, #0]
   23b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   23b84:	2b00      	cmp	r3, #0
   23b86:	d000      	beq.n	23b8a <xEventGroupSetBits+0x2a>
   23b88:	e7fe      	b.n	23b88 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   23b8a:	6a3b      	ldr	r3, [r7, #32]
   23b8c:	3304      	adds	r3, #4
   23b8e:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   23b90:	69fb      	ldr	r3, [r7, #28]
   23b92:	3308      	adds	r3, #8
   23b94:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   23b96:	f000 ff0d 	bl	249b4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   23b9a:	69fb      	ldr	r3, [r7, #28]
   23b9c:	68db      	ldr	r3, [r3, #12]
   23b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   23ba0:	6a3b      	ldr	r3, [r7, #32]
   23ba2:	681a      	ldr	r2, [r3, #0]
   23ba4:	683b      	ldr	r3, [r7, #0]
   23ba6:	431a      	orrs	r2, r3
   23ba8:	6a3b      	ldr	r3, [r7, #32]
   23baa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   23bac:	e03c      	b.n	23c28 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   23bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23bb0:	685b      	ldr	r3, [r3, #4]
   23bb2:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   23bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23bb6:	681b      	ldr	r3, [r3, #0]
   23bb8:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   23bba:	2300      	movs	r3, #0
   23bbc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   23bbe:	693b      	ldr	r3, [r7, #16]
   23bc0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   23bc4:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   23bc6:	693b      	ldr	r3, [r7, #16]
   23bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23bcc:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   23bce:	68fb      	ldr	r3, [r7, #12]
   23bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   23bd4:	2b00      	cmp	r3, #0
   23bd6:	d108      	bne.n	23bea <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   23bd8:	6a3b      	ldr	r3, [r7, #32]
   23bda:	681a      	ldr	r2, [r3, #0]
   23bdc:	693b      	ldr	r3, [r7, #16]
   23bde:	4013      	ands	r3, r2
   23be0:	2b00      	cmp	r3, #0
   23be2:	d00b      	beq.n	23bfc <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   23be4:	2301      	movs	r3, #1
   23be6:	627b      	str	r3, [r7, #36]	; 0x24
   23be8:	e008      	b.n	23bfc <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   23bea:	6a3b      	ldr	r3, [r7, #32]
   23bec:	681a      	ldr	r2, [r3, #0]
   23bee:	693b      	ldr	r3, [r7, #16]
   23bf0:	401a      	ands	r2, r3
   23bf2:	693b      	ldr	r3, [r7, #16]
   23bf4:	429a      	cmp	r2, r3
   23bf6:	d101      	bne.n	23bfc <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   23bf8:	2301      	movs	r3, #1
   23bfa:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   23bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23bfe:	2b00      	cmp	r3, #0
   23c00:	d010      	beq.n	23c24 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   23c02:	68fb      	ldr	r3, [r7, #12]
   23c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   23c08:	2b00      	cmp	r3, #0
   23c0a:	d003      	beq.n	23c14 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   23c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23c0e:	693b      	ldr	r3, [r7, #16]
   23c10:	4313      	orrs	r3, r2
   23c12:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   23c14:	6a3b      	ldr	r3, [r7, #32]
   23c16:	681b      	ldr	r3, [r3, #0]
   23c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   23c1c:	4619      	mov	r1, r3
   23c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   23c20:	f001 f9a8 	bl	24f74 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   23c24:	697b      	ldr	r3, [r7, #20]
   23c26:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   23c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   23c2a:	69bb      	ldr	r3, [r7, #24]
   23c2c:	429a      	cmp	r2, r3
   23c2e:	d1be      	bne.n	23bae <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   23c30:	6a3b      	ldr	r3, [r7, #32]
   23c32:	681a      	ldr	r2, [r3, #0]
   23c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23c36:	43db      	mvns	r3, r3
   23c38:	401a      	ands	r2, r3
   23c3a:	6a3b      	ldr	r3, [r7, #32]
   23c3c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   23c3e:	f000 feff 	bl	24a40 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   23c42:	6a3b      	ldr	r3, [r7, #32]
   23c44:	681b      	ldr	r3, [r3, #0]
}
   23c46:	4618      	mov	r0, r3
   23c48:	3730      	adds	r7, #48	; 0x30
   23c4a:	46bd      	mov	sp, r7
   23c4c:	bd80      	pop	{r7, pc}

00023c4e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   23c4e:	b580      	push	{r7, lr}
   23c50:	b082      	sub	sp, #8
   23c52:	af00      	add	r7, sp, #0
   23c54:	6078      	str	r0, [r7, #4]
   23c56:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   23c58:	6839      	ldr	r1, [r7, #0]
   23c5a:	6878      	ldr	r0, [r7, #4]
   23c5c:	f7ff ff80 	bl	23b60 <xEventGroupSetBits>
}
   23c60:	bf00      	nop
   23c62:	3708      	adds	r7, #8
   23c64:	46bd      	mov	sp, r7
   23c66:	bd80      	pop	{r7, pc}

00023c68 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   23c68:	b480      	push	{r7}
   23c6a:	b087      	sub	sp, #28
   23c6c:	af00      	add	r7, sp, #0
   23c6e:	60f8      	str	r0, [r7, #12]
   23c70:	60b9      	str	r1, [r7, #8]
   23c72:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   23c74:	2300      	movs	r3, #0
   23c76:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   23c78:	687b      	ldr	r3, [r7, #4]
   23c7a:	2b00      	cmp	r3, #0
   23c7c:	d107      	bne.n	23c8e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   23c7e:	68fa      	ldr	r2, [r7, #12]
   23c80:	68bb      	ldr	r3, [r7, #8]
   23c82:	4013      	ands	r3, r2
   23c84:	2b00      	cmp	r3, #0
   23c86:	d00a      	beq.n	23c9e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   23c88:	2301      	movs	r3, #1
   23c8a:	617b      	str	r3, [r7, #20]
   23c8c:	e007      	b.n	23c9e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   23c8e:	68fa      	ldr	r2, [r7, #12]
   23c90:	68bb      	ldr	r3, [r7, #8]
   23c92:	401a      	ands	r2, r3
   23c94:	68bb      	ldr	r3, [r7, #8]
   23c96:	429a      	cmp	r2, r3
   23c98:	d101      	bne.n	23c9e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   23c9a:	2301      	movs	r3, #1
   23c9c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   23c9e:	697b      	ldr	r3, [r7, #20]
}
   23ca0:	4618      	mov	r0, r3
   23ca2:	371c      	adds	r7, #28
   23ca4:	46bd      	mov	sp, r7
   23ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
   23caa:	4770      	bx	lr

00023cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   23cac:	b480      	push	{r7}
   23cae:	b083      	sub	sp, #12
   23cb0:	af00      	add	r7, sp, #0
   23cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   23cb4:	687b      	ldr	r3, [r7, #4]
   23cb6:	f103 0208 	add.w	r2, r3, #8
   23cba:	687b      	ldr	r3, [r7, #4]
   23cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   23cbe:	687b      	ldr	r3, [r7, #4]
   23cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   23cc6:	687b      	ldr	r3, [r7, #4]
   23cc8:	f103 0208 	add.w	r2, r3, #8
   23ccc:	687b      	ldr	r3, [r7, #4]
   23cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   23cd0:	687b      	ldr	r3, [r7, #4]
   23cd2:	f103 0208 	add.w	r2, r3, #8
   23cd6:	687b      	ldr	r3, [r7, #4]
   23cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   23cda:	687b      	ldr	r3, [r7, #4]
   23cdc:	2200      	movs	r2, #0
   23cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   23ce0:	bf00      	nop
   23ce2:	370c      	adds	r7, #12
   23ce4:	46bd      	mov	sp, r7
   23ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
   23cea:	4770      	bx	lr

00023cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   23cec:	b480      	push	{r7}
   23cee:	b083      	sub	sp, #12
   23cf0:	af00      	add	r7, sp, #0
   23cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   23cf4:	687b      	ldr	r3, [r7, #4]
   23cf6:	2200      	movs	r2, #0
   23cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   23cfa:	bf00      	nop
   23cfc:	370c      	adds	r7, #12
   23cfe:	46bd      	mov	sp, r7
   23d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   23d04:	4770      	bx	lr

00023d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   23d06:	b480      	push	{r7}
   23d08:	b085      	sub	sp, #20
   23d0a:	af00      	add	r7, sp, #0
   23d0c:	6078      	str	r0, [r7, #4]
   23d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   23d10:	687b      	ldr	r3, [r7, #4]
   23d12:	685b      	ldr	r3, [r3, #4]
   23d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   23d16:	683b      	ldr	r3, [r7, #0]
   23d18:	68fa      	ldr	r2, [r7, #12]
   23d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   23d1c:	68fb      	ldr	r3, [r7, #12]
   23d1e:	689a      	ldr	r2, [r3, #8]
   23d20:	683b      	ldr	r3, [r7, #0]
   23d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   23d24:	68fb      	ldr	r3, [r7, #12]
   23d26:	689b      	ldr	r3, [r3, #8]
   23d28:	683a      	ldr	r2, [r7, #0]
   23d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   23d2c:	68fb      	ldr	r3, [r7, #12]
   23d2e:	683a      	ldr	r2, [r7, #0]
   23d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   23d32:	683b      	ldr	r3, [r7, #0]
   23d34:	687a      	ldr	r2, [r7, #4]
   23d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   23d38:	687b      	ldr	r3, [r7, #4]
   23d3a:	681b      	ldr	r3, [r3, #0]
   23d3c:	1c5a      	adds	r2, r3, #1
   23d3e:	687b      	ldr	r3, [r7, #4]
   23d40:	601a      	str	r2, [r3, #0]
}
   23d42:	bf00      	nop
   23d44:	3714      	adds	r7, #20
   23d46:	46bd      	mov	sp, r7
   23d48:	f85d 7b04 	ldr.w	r7, [sp], #4
   23d4c:	4770      	bx	lr

00023d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   23d4e:	b480      	push	{r7}
   23d50:	b085      	sub	sp, #20
   23d52:	af00      	add	r7, sp, #0
   23d54:	6078      	str	r0, [r7, #4]
   23d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   23d58:	683b      	ldr	r3, [r7, #0]
   23d5a:	681b      	ldr	r3, [r3, #0]
   23d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   23d5e:	68bb      	ldr	r3, [r7, #8]
   23d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23d64:	d103      	bne.n	23d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   23d66:	687b      	ldr	r3, [r7, #4]
   23d68:	691b      	ldr	r3, [r3, #16]
   23d6a:	60fb      	str	r3, [r7, #12]
   23d6c:	e00c      	b.n	23d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   23d6e:	687b      	ldr	r3, [r7, #4]
   23d70:	3308      	adds	r3, #8
   23d72:	60fb      	str	r3, [r7, #12]
   23d74:	e002      	b.n	23d7c <vListInsert+0x2e>
   23d76:	68fb      	ldr	r3, [r7, #12]
   23d78:	685b      	ldr	r3, [r3, #4]
   23d7a:	60fb      	str	r3, [r7, #12]
   23d7c:	68fb      	ldr	r3, [r7, #12]
   23d7e:	685b      	ldr	r3, [r3, #4]
   23d80:	681a      	ldr	r2, [r3, #0]
   23d82:	68bb      	ldr	r3, [r7, #8]
   23d84:	429a      	cmp	r2, r3
   23d86:	d9f6      	bls.n	23d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   23d88:	68fb      	ldr	r3, [r7, #12]
   23d8a:	685a      	ldr	r2, [r3, #4]
   23d8c:	683b      	ldr	r3, [r7, #0]
   23d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   23d90:	683b      	ldr	r3, [r7, #0]
   23d92:	685b      	ldr	r3, [r3, #4]
   23d94:	683a      	ldr	r2, [r7, #0]
   23d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   23d98:	683b      	ldr	r3, [r7, #0]
   23d9a:	68fa      	ldr	r2, [r7, #12]
   23d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   23d9e:	68fb      	ldr	r3, [r7, #12]
   23da0:	683a      	ldr	r2, [r7, #0]
   23da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   23da4:	683b      	ldr	r3, [r7, #0]
   23da6:	687a      	ldr	r2, [r7, #4]
   23da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   23daa:	687b      	ldr	r3, [r7, #4]
   23dac:	681b      	ldr	r3, [r3, #0]
   23dae:	1c5a      	adds	r2, r3, #1
   23db0:	687b      	ldr	r3, [r7, #4]
   23db2:	601a      	str	r2, [r3, #0]
}
   23db4:	bf00      	nop
   23db6:	3714      	adds	r7, #20
   23db8:	46bd      	mov	sp, r7
   23dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   23dbe:	4770      	bx	lr

00023dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   23dc0:	b480      	push	{r7}
   23dc2:	b085      	sub	sp, #20
   23dc4:	af00      	add	r7, sp, #0
   23dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   23dc8:	687b      	ldr	r3, [r7, #4]
   23dca:	691b      	ldr	r3, [r3, #16]
   23dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   23dce:	687b      	ldr	r3, [r7, #4]
   23dd0:	685b      	ldr	r3, [r3, #4]
   23dd2:	687a      	ldr	r2, [r7, #4]
   23dd4:	6892      	ldr	r2, [r2, #8]
   23dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   23dd8:	687b      	ldr	r3, [r7, #4]
   23dda:	689b      	ldr	r3, [r3, #8]
   23ddc:	687a      	ldr	r2, [r7, #4]
   23dde:	6852      	ldr	r2, [r2, #4]
   23de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   23de2:	68fb      	ldr	r3, [r7, #12]
   23de4:	685a      	ldr	r2, [r3, #4]
   23de6:	687b      	ldr	r3, [r7, #4]
   23de8:	429a      	cmp	r2, r3
   23dea:	d103      	bne.n	23df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   23dec:	687b      	ldr	r3, [r7, #4]
   23dee:	689a      	ldr	r2, [r3, #8]
   23df0:	68fb      	ldr	r3, [r7, #12]
   23df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   23df4:	687b      	ldr	r3, [r7, #4]
   23df6:	2200      	movs	r2, #0
   23df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   23dfa:	68fb      	ldr	r3, [r7, #12]
   23dfc:	681b      	ldr	r3, [r3, #0]
   23dfe:	1e5a      	subs	r2, r3, #1
   23e00:	68fb      	ldr	r3, [r7, #12]
   23e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   23e04:	68fb      	ldr	r3, [r7, #12]
   23e06:	681b      	ldr	r3, [r3, #0]
}
   23e08:	4618      	mov	r0, r3
   23e0a:	3714      	adds	r7, #20
   23e0c:	46bd      	mov	sp, r7
   23e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   23e12:	4770      	bx	lr

00023e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   23e14:	b580      	push	{r7, lr}
   23e16:	b084      	sub	sp, #16
   23e18:	af00      	add	r7, sp, #0
   23e1a:	6078      	str	r0, [r7, #4]
   23e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
   23e1e:	687b      	ldr	r3, [r7, #4]
   23e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   23e22:	68fb      	ldr	r3, [r7, #12]
   23e24:	2b00      	cmp	r3, #0
   23e26:	d100      	bne.n	23e2a <xQueueGenericReset+0x16>
   23e28:	e7fe      	b.n	23e28 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   23e2a:	f7f5 ff55 	bl	19cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   23e2e:	68fb      	ldr	r3, [r7, #12]
   23e30:	681a      	ldr	r2, [r3, #0]
   23e32:	68fb      	ldr	r3, [r7, #12]
   23e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23e36:	68f9      	ldr	r1, [r7, #12]
   23e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
   23e3a:	fb01 f303 	mul.w	r3, r1, r3
   23e3e:	441a      	add	r2, r3
   23e40:	68fb      	ldr	r3, [r7, #12]
   23e42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   23e44:	68fb      	ldr	r3, [r7, #12]
   23e46:	2200      	movs	r2, #0
   23e48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   23e4a:	68fb      	ldr	r3, [r7, #12]
   23e4c:	681a      	ldr	r2, [r3, #0]
   23e4e:	68fb      	ldr	r3, [r7, #12]
   23e50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   23e52:	68fb      	ldr	r3, [r7, #12]
   23e54:	681a      	ldr	r2, [r3, #0]
   23e56:	68fb      	ldr	r3, [r7, #12]
   23e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23e5a:	3b01      	subs	r3, #1
   23e5c:	68f9      	ldr	r1, [r7, #12]
   23e5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   23e60:	fb01 f303 	mul.w	r3, r1, r3
   23e64:	441a      	add	r2, r3
   23e66:	68fb      	ldr	r3, [r7, #12]
   23e68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   23e6a:	68fb      	ldr	r3, [r7, #12]
   23e6c:	22ff      	movs	r2, #255	; 0xff
   23e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   23e72:	68fb      	ldr	r3, [r7, #12]
   23e74:	22ff      	movs	r2, #255	; 0xff
   23e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   23e7a:	683b      	ldr	r3, [r7, #0]
   23e7c:	2b00      	cmp	r3, #0
   23e7e:	d114      	bne.n	23eaa <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   23e80:	68fb      	ldr	r3, [r7, #12]
   23e82:	691b      	ldr	r3, [r3, #16]
   23e84:	2b00      	cmp	r3, #0
   23e86:	d01a      	beq.n	23ebe <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   23e88:	68fb      	ldr	r3, [r7, #12]
   23e8a:	3310      	adds	r3, #16
   23e8c:	4618      	mov	r0, r3
   23e8e:	f001 f815 	bl	24ebc <xTaskRemoveFromEventList>
   23e92:	4603      	mov	r3, r0
   23e94:	2b00      	cmp	r3, #0
   23e96:	d012      	beq.n	23ebe <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   23e98:	4b0c      	ldr	r3, [pc, #48]	; (23ecc <xQueueGenericReset+0xb8>)
   23e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23e9e:	601a      	str	r2, [r3, #0]
   23ea0:	f3bf 8f4f 	dsb	sy
   23ea4:	f3bf 8f6f 	isb	sy
   23ea8:	e009      	b.n	23ebe <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   23eaa:	68fb      	ldr	r3, [r7, #12]
   23eac:	3310      	adds	r3, #16
   23eae:	4618      	mov	r0, r3
   23eb0:	f7ff fefc 	bl	23cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   23eb4:	68fb      	ldr	r3, [r7, #12]
   23eb6:	3324      	adds	r3, #36	; 0x24
   23eb8:	4618      	mov	r0, r3
   23eba:	f7ff fef7 	bl	23cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   23ebe:	f7f5 ff31 	bl	19d24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   23ec2:	2301      	movs	r3, #1
}
   23ec4:	4618      	mov	r0, r3
   23ec6:	3710      	adds	r7, #16
   23ec8:	46bd      	mov	sp, r7
   23eca:	bd80      	pop	{r7, pc}
   23ecc:	e000ed04 	.word	0xe000ed04

00023ed0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   23ed0:	b580      	push	{r7, lr}
   23ed2:	b08a      	sub	sp, #40	; 0x28
   23ed4:	af02      	add	r7, sp, #8
   23ed6:	60f8      	str	r0, [r7, #12]
   23ed8:	60b9      	str	r1, [r7, #8]
   23eda:	4613      	mov	r3, r2
   23edc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   23ede:	68fb      	ldr	r3, [r7, #12]
   23ee0:	2b00      	cmp	r3, #0
   23ee2:	d100      	bne.n	23ee6 <xQueueGenericCreate+0x16>
   23ee4:	e7fe      	b.n	23ee4 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   23ee6:	68bb      	ldr	r3, [r7, #8]
   23ee8:	2b00      	cmp	r3, #0
   23eea:	d102      	bne.n	23ef2 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   23eec:	2300      	movs	r3, #0
   23eee:	61fb      	str	r3, [r7, #28]
   23ef0:	e004      	b.n	23efc <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   23ef2:	68fb      	ldr	r3, [r7, #12]
   23ef4:	68ba      	ldr	r2, [r7, #8]
   23ef6:	fb02 f303 	mul.w	r3, r2, r3
   23efa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   23efc:	69fb      	ldr	r3, [r7, #28]
   23efe:	3348      	adds	r3, #72	; 0x48
   23f00:	4618      	mov	r0, r3
   23f02:	f7ff fc77 	bl	237f4 <pvPortMalloc>
   23f06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   23f08:	69bb      	ldr	r3, [r7, #24]
   23f0a:	2b00      	cmp	r3, #0
   23f0c:	d00d      	beq.n	23f2a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   23f0e:	69bb      	ldr	r3, [r7, #24]
   23f10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   23f12:	697b      	ldr	r3, [r7, #20]
   23f14:	3348      	adds	r3, #72	; 0x48
   23f16:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   23f18:	79fa      	ldrb	r2, [r7, #7]
   23f1a:	69bb      	ldr	r3, [r7, #24]
   23f1c:	9300      	str	r3, [sp, #0]
   23f1e:	4613      	mov	r3, r2
   23f20:	697a      	ldr	r2, [r7, #20]
   23f22:	68b9      	ldr	r1, [r7, #8]
   23f24:	68f8      	ldr	r0, [r7, #12]
   23f26:	f000 f805 	bl	23f34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   23f2a:	69bb      	ldr	r3, [r7, #24]
	}
   23f2c:	4618      	mov	r0, r3
   23f2e:	3720      	adds	r7, #32
   23f30:	46bd      	mov	sp, r7
   23f32:	bd80      	pop	{r7, pc}

00023f34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   23f34:	b580      	push	{r7, lr}
   23f36:	b084      	sub	sp, #16
   23f38:	af00      	add	r7, sp, #0
   23f3a:	60f8      	str	r0, [r7, #12]
   23f3c:	60b9      	str	r1, [r7, #8]
   23f3e:	607a      	str	r2, [r7, #4]
   23f40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   23f42:	68bb      	ldr	r3, [r7, #8]
   23f44:	2b00      	cmp	r3, #0
   23f46:	d103      	bne.n	23f50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   23f48:	69bb      	ldr	r3, [r7, #24]
   23f4a:	69ba      	ldr	r2, [r7, #24]
   23f4c:	601a      	str	r2, [r3, #0]
   23f4e:	e002      	b.n	23f56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   23f50:	69bb      	ldr	r3, [r7, #24]
   23f52:	687a      	ldr	r2, [r7, #4]
   23f54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   23f56:	69bb      	ldr	r3, [r7, #24]
   23f58:	68fa      	ldr	r2, [r7, #12]
   23f5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   23f5c:	69bb      	ldr	r3, [r7, #24]
   23f5e:	68ba      	ldr	r2, [r7, #8]
   23f60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   23f62:	2101      	movs	r1, #1
   23f64:	69b8      	ldr	r0, [r7, #24]
   23f66:	f7ff ff55 	bl	23e14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   23f6a:	bf00      	nop
   23f6c:	3710      	adds	r7, #16
   23f6e:	46bd      	mov	sp, r7
   23f70:	bd80      	pop	{r7, pc}
	...

00023f74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   23f74:	b580      	push	{r7, lr}
   23f76:	b08a      	sub	sp, #40	; 0x28
   23f78:	af00      	add	r7, sp, #0
   23f7a:	60f8      	str	r0, [r7, #12]
   23f7c:	60b9      	str	r1, [r7, #8]
   23f7e:	607a      	str	r2, [r7, #4]
   23f80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   23f82:	2300      	movs	r3, #0
   23f84:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   23f86:	68fb      	ldr	r3, [r7, #12]
   23f88:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   23f8a:	6a3b      	ldr	r3, [r7, #32]
   23f8c:	2b00      	cmp	r3, #0
   23f8e:	d100      	bne.n	23f92 <xQueueGenericSend+0x1e>
   23f90:	e7fe      	b.n	23f90 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   23f92:	68bb      	ldr	r3, [r7, #8]
   23f94:	2b00      	cmp	r3, #0
   23f96:	d103      	bne.n	23fa0 <xQueueGenericSend+0x2c>
   23f98:	6a3b      	ldr	r3, [r7, #32]
   23f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   23f9c:	2b00      	cmp	r3, #0
   23f9e:	d101      	bne.n	23fa4 <xQueueGenericSend+0x30>
   23fa0:	2301      	movs	r3, #1
   23fa2:	e000      	b.n	23fa6 <xQueueGenericSend+0x32>
   23fa4:	2300      	movs	r3, #0
   23fa6:	2b00      	cmp	r3, #0
   23fa8:	d100      	bne.n	23fac <xQueueGenericSend+0x38>
   23faa:	e7fe      	b.n	23faa <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   23fac:	683b      	ldr	r3, [r7, #0]
   23fae:	2b02      	cmp	r3, #2
   23fb0:	d103      	bne.n	23fba <xQueueGenericSend+0x46>
   23fb2:	6a3b      	ldr	r3, [r7, #32]
   23fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23fb6:	2b01      	cmp	r3, #1
   23fb8:	d101      	bne.n	23fbe <xQueueGenericSend+0x4a>
   23fba:	2301      	movs	r3, #1
   23fbc:	e000      	b.n	23fc0 <xQueueGenericSend+0x4c>
   23fbe:	2300      	movs	r3, #0
   23fc0:	2b00      	cmp	r3, #0
   23fc2:	d100      	bne.n	23fc6 <xQueueGenericSend+0x52>
   23fc4:	e7fe      	b.n	23fc4 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   23fc6:	f001 f959 	bl	2527c <xTaskGetSchedulerState>
   23fca:	4603      	mov	r3, r0
   23fcc:	2b00      	cmp	r3, #0
   23fce:	d102      	bne.n	23fd6 <xQueueGenericSend+0x62>
   23fd0:	687b      	ldr	r3, [r7, #4]
   23fd2:	2b00      	cmp	r3, #0
   23fd4:	d101      	bne.n	23fda <xQueueGenericSend+0x66>
   23fd6:	2301      	movs	r3, #1
   23fd8:	e000      	b.n	23fdc <xQueueGenericSend+0x68>
   23fda:	2300      	movs	r3, #0
   23fdc:	2b00      	cmp	r3, #0
   23fde:	d100      	bne.n	23fe2 <xQueueGenericSend+0x6e>
   23fe0:	e7fe      	b.n	23fe0 <xQueueGenericSend+0x6c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   23fe2:	f7f5 fe79 	bl	19cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   23fe6:	6a3b      	ldr	r3, [r7, #32]
   23fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   23fea:	6a3b      	ldr	r3, [r7, #32]
   23fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   23fee:	429a      	cmp	r2, r3
   23ff0:	d302      	bcc.n	23ff8 <xQueueGenericSend+0x84>
   23ff2:	683b      	ldr	r3, [r7, #0]
   23ff4:	2b02      	cmp	r3, #2
   23ff6:	d129      	bne.n	2404c <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   23ff8:	683a      	ldr	r2, [r7, #0]
   23ffa:	68b9      	ldr	r1, [r7, #8]
   23ffc:	6a38      	ldr	r0, [r7, #32]
   23ffe:	f000 f9cb 	bl	24398 <prvCopyDataToQueue>
   24002:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   24004:	6a3b      	ldr	r3, [r7, #32]
   24006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24008:	2b00      	cmp	r3, #0
   2400a:	d010      	beq.n	2402e <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2400c:	6a3b      	ldr	r3, [r7, #32]
   2400e:	3324      	adds	r3, #36	; 0x24
   24010:	4618      	mov	r0, r3
   24012:	f000 ff53 	bl	24ebc <xTaskRemoveFromEventList>
   24016:	4603      	mov	r3, r0
   24018:	2b00      	cmp	r3, #0
   2401a:	d013      	beq.n	24044 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   2401c:	4b3f      	ldr	r3, [pc, #252]	; (2411c <xQueueGenericSend+0x1a8>)
   2401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24022:	601a      	str	r2, [r3, #0]
   24024:	f3bf 8f4f 	dsb	sy
   24028:	f3bf 8f6f 	isb	sy
   2402c:	e00a      	b.n	24044 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   2402e:	69fb      	ldr	r3, [r7, #28]
   24030:	2b00      	cmp	r3, #0
   24032:	d007      	beq.n	24044 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   24034:	4b39      	ldr	r3, [pc, #228]	; (2411c <xQueueGenericSend+0x1a8>)
   24036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2403a:	601a      	str	r2, [r3, #0]
   2403c:	f3bf 8f4f 	dsb	sy
   24040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   24044:	f7f5 fe6e 	bl	19d24 <vPortExitCritical>
				return pdPASS;
   24048:	2301      	movs	r3, #1
   2404a:	e063      	b.n	24114 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   2404c:	687b      	ldr	r3, [r7, #4]
   2404e:	2b00      	cmp	r3, #0
   24050:	d103      	bne.n	2405a <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   24052:	f7f5 fe67 	bl	19d24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   24056:	2300      	movs	r3, #0
   24058:	e05c      	b.n	24114 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   2405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2405c:	2b00      	cmp	r3, #0
   2405e:	d106      	bne.n	2406e <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   24060:	f107 0314 	add.w	r3, r7, #20
   24064:	4618      	mov	r0, r3
   24066:	f000 ffd3 	bl	25010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   2406a:	2301      	movs	r3, #1
   2406c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   2406e:	f7f5 fe59 	bl	19d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   24072:	f000 fc9f 	bl	249b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   24076:	f7f5 fe2f 	bl	19cd8 <vPortEnterCritical>
   2407a:	6a3b      	ldr	r3, [r7, #32]
   2407c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   24080:	b25b      	sxtb	r3, r3
   24082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24086:	d103      	bne.n	24090 <xQueueGenericSend+0x11c>
   24088:	6a3b      	ldr	r3, [r7, #32]
   2408a:	2200      	movs	r2, #0
   2408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   24090:	6a3b      	ldr	r3, [r7, #32]
   24092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   24096:	b25b      	sxtb	r3, r3
   24098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2409c:	d103      	bne.n	240a6 <xQueueGenericSend+0x132>
   2409e:	6a3b      	ldr	r3, [r7, #32]
   240a0:	2200      	movs	r2, #0
   240a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   240a6:	f7f5 fe3d 	bl	19d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   240aa:	1d3a      	adds	r2, r7, #4
   240ac:	f107 0314 	add.w	r3, r7, #20
   240b0:	4611      	mov	r1, r2
   240b2:	4618      	mov	r0, r3
   240b4:	f000 ffc2 	bl	2503c <xTaskCheckForTimeOut>
   240b8:	4603      	mov	r3, r0
   240ba:	2b00      	cmp	r3, #0
   240bc:	d124      	bne.n	24108 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   240be:	6a38      	ldr	r0, [r7, #32]
   240c0:	f000 fa54 	bl	2456c <prvIsQueueFull>
   240c4:	4603      	mov	r3, r0
   240c6:	2b00      	cmp	r3, #0
   240c8:	d018      	beq.n	240fc <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   240ca:	6a3b      	ldr	r3, [r7, #32]
   240cc:	3310      	adds	r3, #16
   240ce:	687a      	ldr	r2, [r7, #4]
   240d0:	4611      	mov	r1, r2
   240d2:	4618      	mov	r0, r3
   240d4:	f000 fe8e 	bl	24df4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   240d8:	6a38      	ldr	r0, [r7, #32]
   240da:	f000 f9df 	bl	2449c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   240de:	f000 fcaf 	bl	24a40 <xTaskResumeAll>
   240e2:	4603      	mov	r3, r0
   240e4:	2b00      	cmp	r3, #0
   240e6:	f47f af7c 	bne.w	23fe2 <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
   240ea:	4b0c      	ldr	r3, [pc, #48]	; (2411c <xQueueGenericSend+0x1a8>)
   240ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   240f0:	601a      	str	r2, [r3, #0]
   240f2:	f3bf 8f4f 	dsb	sy
   240f6:	f3bf 8f6f 	isb	sy
   240fa:	e772      	b.n	23fe2 <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   240fc:	6a38      	ldr	r0, [r7, #32]
   240fe:	f000 f9cd 	bl	2449c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   24102:	f000 fc9d 	bl	24a40 <xTaskResumeAll>
   24106:	e76c      	b.n	23fe2 <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   24108:	6a38      	ldr	r0, [r7, #32]
   2410a:	f000 f9c7 	bl	2449c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   2410e:	f000 fc97 	bl	24a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   24112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   24114:	4618      	mov	r0, r3
   24116:	3728      	adds	r7, #40	; 0x28
   24118:	46bd      	mov	sp, r7
   2411a:	bd80      	pop	{r7, pc}
   2411c:	e000ed04 	.word	0xe000ed04

00024120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   24120:	b580      	push	{r7, lr}
   24122:	b08c      	sub	sp, #48	; 0x30
   24124:	af00      	add	r7, sp, #0
   24126:	60f8      	str	r0, [r7, #12]
   24128:	60b9      	str	r1, [r7, #8]
   2412a:	607a      	str	r2, [r7, #4]
   2412c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   2412e:	68fb      	ldr	r3, [r7, #12]
   24130:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   24132:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24134:	2b00      	cmp	r3, #0
   24136:	d100      	bne.n	2413a <xQueueGenericSendFromISR+0x1a>
   24138:	e7fe      	b.n	24138 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   2413a:	68bb      	ldr	r3, [r7, #8]
   2413c:	2b00      	cmp	r3, #0
   2413e:	d103      	bne.n	24148 <xQueueGenericSendFromISR+0x28>
   24140:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24144:	2b00      	cmp	r3, #0
   24146:	d101      	bne.n	2414c <xQueueGenericSendFromISR+0x2c>
   24148:	2301      	movs	r3, #1
   2414a:	e000      	b.n	2414e <xQueueGenericSendFromISR+0x2e>
   2414c:	2300      	movs	r3, #0
   2414e:	2b00      	cmp	r3, #0
   24150:	d100      	bne.n	24154 <xQueueGenericSendFromISR+0x34>
   24152:	e7fe      	b.n	24152 <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   24154:	683b      	ldr	r3, [r7, #0]
   24156:	2b02      	cmp	r3, #2
   24158:	d103      	bne.n	24162 <xQueueGenericSendFromISR+0x42>
   2415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   2415e:	2b01      	cmp	r3, #1
   24160:	d101      	bne.n	24166 <xQueueGenericSendFromISR+0x46>
   24162:	2301      	movs	r3, #1
   24164:	e000      	b.n	24168 <xQueueGenericSendFromISR+0x48>
   24166:	2300      	movs	r3, #0
   24168:	2b00      	cmp	r3, #0
   2416a:	d100      	bne.n	2416e <xQueueGenericSendFromISR+0x4e>
   2416c:	e7fe      	b.n	2416c <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   2416e:	f7f5 fe55 	bl	19e1c <vPortValidateInterruptPriority>
	__asm volatile
   24172:	f3ef 8211 	mrs	r2, BASEPRI
   24176:	f04f 0380 	mov.w	r3, #128	; 0x80
   2417a:	f383 8811 	msr	BASEPRI, r3
   2417e:	f3bf 8f6f 	isb	sy
   24182:	f3bf 8f4f 	dsb	sy
   24186:	61fa      	str	r2, [r7, #28]
   24188:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
   2418a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2418c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   2418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   24192:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   24196:	429a      	cmp	r2, r3
   24198:	d302      	bcc.n	241a0 <xQueueGenericSendFromISR+0x80>
   2419a:	683b      	ldr	r3, [r7, #0]
   2419c:	2b02      	cmp	r3, #2
   2419e:	d12c      	bne.n	241fa <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   241a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   241a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   241a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   241aa:	683a      	ldr	r2, [r7, #0]
   241ac:	68b9      	ldr	r1, [r7, #8]
   241ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   241b0:	f000 f8f2 	bl	24398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   241b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   241b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   241bc:	d112      	bne.n	241e4 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   241be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   241c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   241c2:	2b00      	cmp	r3, #0
   241c4:	d016      	beq.n	241f4 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   241c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   241c8:	3324      	adds	r3, #36	; 0x24
   241ca:	4618      	mov	r0, r3
   241cc:	f000 fe76 	bl	24ebc <xTaskRemoveFromEventList>
   241d0:	4603      	mov	r3, r0
   241d2:	2b00      	cmp	r3, #0
   241d4:	d00e      	beq.n	241f4 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   241d6:	687b      	ldr	r3, [r7, #4]
   241d8:	2b00      	cmp	r3, #0
   241da:	d00b      	beq.n	241f4 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   241dc:	687b      	ldr	r3, [r7, #4]
   241de:	2201      	movs	r2, #1
   241e0:	601a      	str	r2, [r3, #0]
   241e2:	e007      	b.n	241f4 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   241e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   241e8:	3301      	adds	r3, #1
   241ea:	b2db      	uxtb	r3, r3
   241ec:	b25a      	sxtb	r2, r3
   241ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   241f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   241f4:	2301      	movs	r3, #1
   241f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
   241f8:	e001      	b.n	241fe <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   241fa:	2300      	movs	r3, #0
   241fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   241fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24200:	617b      	str	r3, [r7, #20]
	__asm volatile
   24202:	697b      	ldr	r3, [r7, #20]
   24204:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   24208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   2420a:	4618      	mov	r0, r3
   2420c:	3730      	adds	r7, #48	; 0x30
   2420e:	46bd      	mov	sp, r7
   24210:	bd80      	pop	{r7, pc}
	...

00024214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   24214:	b580      	push	{r7, lr}
   24216:	b08a      	sub	sp, #40	; 0x28
   24218:	af00      	add	r7, sp, #0
   2421a:	60f8      	str	r0, [r7, #12]
   2421c:	60b9      	str	r1, [r7, #8]
   2421e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   24220:	2300      	movs	r3, #0
   24222:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   24224:	68fb      	ldr	r3, [r7, #12]
   24226:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   24228:	6a3b      	ldr	r3, [r7, #32]
   2422a:	2b00      	cmp	r3, #0
   2422c:	d100      	bne.n	24230 <xQueueReceive+0x1c>
   2422e:	e7fe      	b.n	2422e <xQueueReceive+0x1a>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   24230:	68bb      	ldr	r3, [r7, #8]
   24232:	2b00      	cmp	r3, #0
   24234:	d103      	bne.n	2423e <xQueueReceive+0x2a>
   24236:	6a3b      	ldr	r3, [r7, #32]
   24238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2423a:	2b00      	cmp	r3, #0
   2423c:	d101      	bne.n	24242 <xQueueReceive+0x2e>
   2423e:	2301      	movs	r3, #1
   24240:	e000      	b.n	24244 <xQueueReceive+0x30>
   24242:	2300      	movs	r3, #0
   24244:	2b00      	cmp	r3, #0
   24246:	d100      	bne.n	2424a <xQueueReceive+0x36>
   24248:	e7fe      	b.n	24248 <xQueueReceive+0x34>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   2424a:	f001 f817 	bl	2527c <xTaskGetSchedulerState>
   2424e:	4603      	mov	r3, r0
   24250:	2b00      	cmp	r3, #0
   24252:	d102      	bne.n	2425a <xQueueReceive+0x46>
   24254:	687b      	ldr	r3, [r7, #4]
   24256:	2b00      	cmp	r3, #0
   24258:	d101      	bne.n	2425e <xQueueReceive+0x4a>
   2425a:	2301      	movs	r3, #1
   2425c:	e000      	b.n	24260 <xQueueReceive+0x4c>
   2425e:	2300      	movs	r3, #0
   24260:	2b00      	cmp	r3, #0
   24262:	d100      	bne.n	24266 <xQueueReceive+0x52>
   24264:	e7fe      	b.n	24264 <xQueueReceive+0x50>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   24266:	f7f5 fd37 	bl	19cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   2426a:	6a3b      	ldr	r3, [r7, #32]
   2426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2426e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   24270:	69fb      	ldr	r3, [r7, #28]
   24272:	2b00      	cmp	r3, #0
   24274:	d01f      	beq.n	242b6 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   24276:	68b9      	ldr	r1, [r7, #8]
   24278:	6a38      	ldr	r0, [r7, #32]
   2427a:	f000 f8e9 	bl	24450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   2427e:	69fb      	ldr	r3, [r7, #28]
   24280:	1e5a      	subs	r2, r3, #1
   24282:	6a3b      	ldr	r3, [r7, #32]
   24284:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   24286:	6a3b      	ldr	r3, [r7, #32]
   24288:	691b      	ldr	r3, [r3, #16]
   2428a:	2b00      	cmp	r3, #0
   2428c:	d00f      	beq.n	242ae <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   2428e:	6a3b      	ldr	r3, [r7, #32]
   24290:	3310      	adds	r3, #16
   24292:	4618      	mov	r0, r3
   24294:	f000 fe12 	bl	24ebc <xTaskRemoveFromEventList>
   24298:	4603      	mov	r3, r0
   2429a:	2b00      	cmp	r3, #0
   2429c:	d007      	beq.n	242ae <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
   2429e:	4b3d      	ldr	r3, [pc, #244]	; (24394 <xQueueReceive+0x180>)
   242a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   242a4:	601a      	str	r2, [r3, #0]
   242a6:	f3bf 8f4f 	dsb	sy
   242aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   242ae:	f7f5 fd39 	bl	19d24 <vPortExitCritical>
				return pdPASS;
   242b2:	2301      	movs	r3, #1
   242b4:	e069      	b.n	2438a <xQueueReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   242b6:	687b      	ldr	r3, [r7, #4]
   242b8:	2b00      	cmp	r3, #0
   242ba:	d103      	bne.n	242c4 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   242bc:	f7f5 fd32 	bl	19d24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   242c0:	2300      	movs	r3, #0
   242c2:	e062      	b.n	2438a <xQueueReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
   242c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   242c6:	2b00      	cmp	r3, #0
   242c8:	d106      	bne.n	242d8 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   242ca:	f107 0314 	add.w	r3, r7, #20
   242ce:	4618      	mov	r0, r3
   242d0:	f000 fe9e 	bl	25010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   242d4:	2301      	movs	r3, #1
   242d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   242d8:	f7f5 fd24 	bl	19d24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   242dc:	f000 fb6a 	bl	249b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   242e0:	f7f5 fcfa 	bl	19cd8 <vPortEnterCritical>
   242e4:	6a3b      	ldr	r3, [r7, #32]
   242e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   242ea:	b25b      	sxtb	r3, r3
   242ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   242f0:	d103      	bne.n	242fa <xQueueReceive+0xe6>
   242f2:	6a3b      	ldr	r3, [r7, #32]
   242f4:	2200      	movs	r2, #0
   242f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   242fa:	6a3b      	ldr	r3, [r7, #32]
   242fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   24300:	b25b      	sxtb	r3, r3
   24302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24306:	d103      	bne.n	24310 <xQueueReceive+0xfc>
   24308:	6a3b      	ldr	r3, [r7, #32]
   2430a:	2200      	movs	r2, #0
   2430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   24310:	f7f5 fd08 	bl	19d24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   24314:	1d3a      	adds	r2, r7, #4
   24316:	f107 0314 	add.w	r3, r7, #20
   2431a:	4611      	mov	r1, r2
   2431c:	4618      	mov	r0, r3
   2431e:	f000 fe8d 	bl	2503c <xTaskCheckForTimeOut>
   24322:	4603      	mov	r3, r0
   24324:	2b00      	cmp	r3, #0
   24326:	d123      	bne.n	24370 <xQueueReceive+0x15c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   24328:	6a38      	ldr	r0, [r7, #32]
   2432a:	f000 f909 	bl	24540 <prvIsQueueEmpty>
   2432e:	4603      	mov	r3, r0
   24330:	2b00      	cmp	r3, #0
   24332:	d017      	beq.n	24364 <xQueueReceive+0x150>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   24334:	6a3b      	ldr	r3, [r7, #32]
   24336:	3324      	adds	r3, #36	; 0x24
   24338:	687a      	ldr	r2, [r7, #4]
   2433a:	4611      	mov	r1, r2
   2433c:	4618      	mov	r0, r3
   2433e:	f000 fd59 	bl	24df4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   24342:	6a38      	ldr	r0, [r7, #32]
   24344:	f000 f8aa 	bl	2449c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   24348:	f000 fb7a 	bl	24a40 <xTaskResumeAll>
   2434c:	4603      	mov	r3, r0
   2434e:	2b00      	cmp	r3, #0
   24350:	d189      	bne.n	24266 <xQueueReceive+0x52>
				{
					portYIELD_WITHIN_API();
   24352:	4b10      	ldr	r3, [pc, #64]	; (24394 <xQueueReceive+0x180>)
   24354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24358:	601a      	str	r2, [r3, #0]
   2435a:	f3bf 8f4f 	dsb	sy
   2435e:	f3bf 8f6f 	isb	sy
   24362:	e780      	b.n	24266 <xQueueReceive+0x52>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   24364:	6a38      	ldr	r0, [r7, #32]
   24366:	f000 f899 	bl	2449c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2436a:	f000 fb69 	bl	24a40 <xTaskResumeAll>
   2436e:	e77a      	b.n	24266 <xQueueReceive+0x52>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   24370:	6a38      	ldr	r0, [r7, #32]
   24372:	f000 f893 	bl	2449c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   24376:	f000 fb63 	bl	24a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   2437a:	6a38      	ldr	r0, [r7, #32]
   2437c:	f000 f8e0 	bl	24540 <prvIsQueueEmpty>
   24380:	4603      	mov	r3, r0
   24382:	2b00      	cmp	r3, #0
   24384:	f43f af6f 	beq.w	24266 <xQueueReceive+0x52>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   24388:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   2438a:	4618      	mov	r0, r3
   2438c:	3728      	adds	r7, #40	; 0x28
   2438e:	46bd      	mov	sp, r7
   24390:	bd80      	pop	{r7, pc}
   24392:	bf00      	nop
   24394:	e000ed04 	.word	0xe000ed04

00024398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   24398:	b580      	push	{r7, lr}
   2439a:	b086      	sub	sp, #24
   2439c:	af00      	add	r7, sp, #0
   2439e:	60f8      	str	r0, [r7, #12]
   243a0:	60b9      	str	r1, [r7, #8]
   243a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   243a4:	2300      	movs	r3, #0
   243a6:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   243a8:	68fb      	ldr	r3, [r7, #12]
   243aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   243ac:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   243ae:	68fb      	ldr	r3, [r7, #12]
   243b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   243b2:	2b00      	cmp	r3, #0
   243b4:	d043      	beq.n	2443e <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   243b6:	687b      	ldr	r3, [r7, #4]
   243b8:	2b00      	cmp	r3, #0
   243ba:	d119      	bne.n	243f0 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   243bc:	68fb      	ldr	r3, [r7, #12]
   243be:	6858      	ldr	r0, [r3, #4]
   243c0:	68fb      	ldr	r3, [r7, #12]
   243c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   243c4:	461a      	mov	r2, r3
   243c6:	68b9      	ldr	r1, [r7, #8]
   243c8:	f7e7 feca 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   243cc:	68fb      	ldr	r3, [r7, #12]
   243ce:	685a      	ldr	r2, [r3, #4]
   243d0:	68fb      	ldr	r3, [r7, #12]
   243d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   243d4:	441a      	add	r2, r3
   243d6:	68fb      	ldr	r3, [r7, #12]
   243d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   243da:	68fb      	ldr	r3, [r7, #12]
   243dc:	685a      	ldr	r2, [r3, #4]
   243de:	68fb      	ldr	r3, [r7, #12]
   243e0:	689b      	ldr	r3, [r3, #8]
   243e2:	429a      	cmp	r2, r3
   243e4:	d32b      	bcc.n	2443e <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   243e6:	68fb      	ldr	r3, [r7, #12]
   243e8:	681a      	ldr	r2, [r3, #0]
   243ea:	68fb      	ldr	r3, [r7, #12]
   243ec:	605a      	str	r2, [r3, #4]
   243ee:	e026      	b.n	2443e <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   243f0:	68fb      	ldr	r3, [r7, #12]
   243f2:	68d8      	ldr	r0, [r3, #12]
   243f4:	68fb      	ldr	r3, [r7, #12]
   243f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   243f8:	461a      	mov	r2, r3
   243fa:	68b9      	ldr	r1, [r7, #8]
   243fc:	f7e7 feb0 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   24400:	68fb      	ldr	r3, [r7, #12]
   24402:	68da      	ldr	r2, [r3, #12]
   24404:	68fb      	ldr	r3, [r7, #12]
   24406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24408:	425b      	negs	r3, r3
   2440a:	441a      	add	r2, r3
   2440c:	68fb      	ldr	r3, [r7, #12]
   2440e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   24410:	68fb      	ldr	r3, [r7, #12]
   24412:	68da      	ldr	r2, [r3, #12]
   24414:	68fb      	ldr	r3, [r7, #12]
   24416:	681b      	ldr	r3, [r3, #0]
   24418:	429a      	cmp	r2, r3
   2441a:	d207      	bcs.n	2442c <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   2441c:	68fb      	ldr	r3, [r7, #12]
   2441e:	689a      	ldr	r2, [r3, #8]
   24420:	68fb      	ldr	r3, [r7, #12]
   24422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   24424:	425b      	negs	r3, r3
   24426:	441a      	add	r2, r3
   24428:	68fb      	ldr	r3, [r7, #12]
   2442a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   2442c:	687b      	ldr	r3, [r7, #4]
   2442e:	2b02      	cmp	r3, #2
   24430:	d105      	bne.n	2443e <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   24432:	697b      	ldr	r3, [r7, #20]
   24434:	2b00      	cmp	r3, #0
   24436:	d002      	beq.n	2443e <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   24438:	697b      	ldr	r3, [r7, #20]
   2443a:	3b01      	subs	r3, #1
   2443c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   2443e:	697b      	ldr	r3, [r7, #20]
   24440:	1c5a      	adds	r2, r3, #1
   24442:	68fb      	ldr	r3, [r7, #12]
   24444:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   24446:	693b      	ldr	r3, [r7, #16]
}
   24448:	4618      	mov	r0, r3
   2444a:	3718      	adds	r7, #24
   2444c:	46bd      	mov	sp, r7
   2444e:	bd80      	pop	{r7, pc}

00024450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   24450:	b580      	push	{r7, lr}
   24452:	b082      	sub	sp, #8
   24454:	af00      	add	r7, sp, #0
   24456:	6078      	str	r0, [r7, #4]
   24458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   2445a:	687b      	ldr	r3, [r7, #4]
   2445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2445e:	2b00      	cmp	r3, #0
   24460:	d018      	beq.n	24494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   24462:	687b      	ldr	r3, [r7, #4]
   24464:	68da      	ldr	r2, [r3, #12]
   24466:	687b      	ldr	r3, [r7, #4]
   24468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2446a:	441a      	add	r2, r3
   2446c:	687b      	ldr	r3, [r7, #4]
   2446e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   24470:	687b      	ldr	r3, [r7, #4]
   24472:	68da      	ldr	r2, [r3, #12]
   24474:	687b      	ldr	r3, [r7, #4]
   24476:	689b      	ldr	r3, [r3, #8]
   24478:	429a      	cmp	r2, r3
   2447a:	d303      	bcc.n	24484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   2447c:	687b      	ldr	r3, [r7, #4]
   2447e:	681a      	ldr	r2, [r3, #0]
   24480:	687b      	ldr	r3, [r7, #4]
   24482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   24484:	687b      	ldr	r3, [r7, #4]
   24486:	68d9      	ldr	r1, [r3, #12]
   24488:	687b      	ldr	r3, [r7, #4]
   2448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2448c:	461a      	mov	r2, r3
   2448e:	6838      	ldr	r0, [r7, #0]
   24490:	f7e7 fe66 	bl	c160 <memcpy>
	}
}
   24494:	bf00      	nop
   24496:	3708      	adds	r7, #8
   24498:	46bd      	mov	sp, r7
   2449a:	bd80      	pop	{r7, pc}

0002449c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   2449c:	b580      	push	{r7, lr}
   2449e:	b084      	sub	sp, #16
   244a0:	af00      	add	r7, sp, #0
   244a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   244a4:	f7f5 fc18 	bl	19cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   244a8:	687b      	ldr	r3, [r7, #4]
   244aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   244ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   244b0:	e011      	b.n	244d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   244b2:	687b      	ldr	r3, [r7, #4]
   244b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   244b6:	2b00      	cmp	r3, #0
   244b8:	d012      	beq.n	244e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   244ba:	687b      	ldr	r3, [r7, #4]
   244bc:	3324      	adds	r3, #36	; 0x24
   244be:	4618      	mov	r0, r3
   244c0:	f000 fcfc 	bl	24ebc <xTaskRemoveFromEventList>
   244c4:	4603      	mov	r3, r0
   244c6:	2b00      	cmp	r3, #0
   244c8:	d001      	beq.n	244ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   244ca:	f000 fe05 	bl	250d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   244ce:	7bfb      	ldrb	r3, [r7, #15]
   244d0:	3b01      	subs	r3, #1
   244d2:	b2db      	uxtb	r3, r3
   244d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   244d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
   244da:	2b00      	cmp	r3, #0
   244dc:	dce9      	bgt.n	244b2 <prvUnlockQueue+0x16>
   244de:	e000      	b.n	244e2 <prvUnlockQueue+0x46>
					break;
   244e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   244e2:	687b      	ldr	r3, [r7, #4]
   244e4:	22ff      	movs	r2, #255	; 0xff
   244e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   244ea:	f7f5 fc1b 	bl	19d24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   244ee:	f7f5 fbf3 	bl	19cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   244f2:	687b      	ldr	r3, [r7, #4]
   244f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   244f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   244fa:	e011      	b.n	24520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   244fc:	687b      	ldr	r3, [r7, #4]
   244fe:	691b      	ldr	r3, [r3, #16]
   24500:	2b00      	cmp	r3, #0
   24502:	d012      	beq.n	2452a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   24504:	687b      	ldr	r3, [r7, #4]
   24506:	3310      	adds	r3, #16
   24508:	4618      	mov	r0, r3
   2450a:	f000 fcd7 	bl	24ebc <xTaskRemoveFromEventList>
   2450e:	4603      	mov	r3, r0
   24510:	2b00      	cmp	r3, #0
   24512:	d001      	beq.n	24518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   24514:	f000 fde0 	bl	250d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   24518:	7bbb      	ldrb	r3, [r7, #14]
   2451a:	3b01      	subs	r3, #1
   2451c:	b2db      	uxtb	r3, r3
   2451e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   24520:	f997 300e 	ldrsb.w	r3, [r7, #14]
   24524:	2b00      	cmp	r3, #0
   24526:	dce9      	bgt.n	244fc <prvUnlockQueue+0x60>
   24528:	e000      	b.n	2452c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
   2452a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   2452c:	687b      	ldr	r3, [r7, #4]
   2452e:	22ff      	movs	r2, #255	; 0xff
   24530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   24534:	f7f5 fbf6 	bl	19d24 <vPortExitCritical>
}
   24538:	bf00      	nop
   2453a:	3710      	adds	r7, #16
   2453c:	46bd      	mov	sp, r7
   2453e:	bd80      	pop	{r7, pc}

00024540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   24540:	b580      	push	{r7, lr}
   24542:	b084      	sub	sp, #16
   24544:	af00      	add	r7, sp, #0
   24546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   24548:	f7f5 fbc6 	bl	19cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   2454c:	687b      	ldr	r3, [r7, #4]
   2454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   24550:	2b00      	cmp	r3, #0
   24552:	d102      	bne.n	2455a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   24554:	2301      	movs	r3, #1
   24556:	60fb      	str	r3, [r7, #12]
   24558:	e001      	b.n	2455e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   2455a:	2300      	movs	r3, #0
   2455c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   2455e:	f7f5 fbe1 	bl	19d24 <vPortExitCritical>

	return xReturn;
   24562:	68fb      	ldr	r3, [r7, #12]
}
   24564:	4618      	mov	r0, r3
   24566:	3710      	adds	r7, #16
   24568:	46bd      	mov	sp, r7
   2456a:	bd80      	pop	{r7, pc}

0002456c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   2456c:	b580      	push	{r7, lr}
   2456e:	b084      	sub	sp, #16
   24570:	af00      	add	r7, sp, #0
   24572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   24574:	f7f5 fbb0 	bl	19cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   24578:	687b      	ldr	r3, [r7, #4]
   2457a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2457c:	687b      	ldr	r3, [r7, #4]
   2457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   24580:	429a      	cmp	r2, r3
   24582:	d102      	bne.n	2458a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   24584:	2301      	movs	r3, #1
   24586:	60fb      	str	r3, [r7, #12]
   24588:	e001      	b.n	2458e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   2458a:	2300      	movs	r3, #0
   2458c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   2458e:	f7f5 fbc9 	bl	19d24 <vPortExitCritical>

	return xReturn;
   24592:	68fb      	ldr	r3, [r7, #12]
}
   24594:	4618      	mov	r0, r3
   24596:	3710      	adds	r7, #16
   24598:	46bd      	mov	sp, r7
   2459a:	bd80      	pop	{r7, pc}

0002459c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   2459c:	b580      	push	{r7, lr}
   2459e:	b086      	sub	sp, #24
   245a0:	af00      	add	r7, sp, #0
   245a2:	60f8      	str	r0, [r7, #12]
   245a4:	60b9      	str	r1, [r7, #8]
   245a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
   245a8:	68fb      	ldr	r3, [r7, #12]
   245aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   245ac:	f7f5 fb94 	bl	19cd8 <vPortEnterCritical>
   245b0:	697b      	ldr	r3, [r7, #20]
   245b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   245b6:	b25b      	sxtb	r3, r3
   245b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   245bc:	d103      	bne.n	245c6 <vQueueWaitForMessageRestricted+0x2a>
   245be:	697b      	ldr	r3, [r7, #20]
   245c0:	2200      	movs	r2, #0
   245c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   245c6:	697b      	ldr	r3, [r7, #20]
   245c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   245cc:	b25b      	sxtb	r3, r3
   245ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   245d2:	d103      	bne.n	245dc <vQueueWaitForMessageRestricted+0x40>
   245d4:	697b      	ldr	r3, [r7, #20]
   245d6:	2200      	movs	r2, #0
   245d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   245dc:	f7f5 fba2 	bl	19d24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   245e0:	697b      	ldr	r3, [r7, #20]
   245e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   245e4:	2b00      	cmp	r3, #0
   245e6:	d106      	bne.n	245f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   245e8:	697b      	ldr	r3, [r7, #20]
   245ea:	3324      	adds	r3, #36	; 0x24
   245ec:	687a      	ldr	r2, [r7, #4]
   245ee:	68b9      	ldr	r1, [r7, #8]
   245f0:	4618      	mov	r0, r3
   245f2:	f000 fc41 	bl	24e78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   245f6:	6978      	ldr	r0, [r7, #20]
   245f8:	f7ff ff50 	bl	2449c <prvUnlockQueue>
	}
   245fc:	bf00      	nop
   245fe:	3718      	adds	r7, #24
   24600:	46bd      	mov	sp, r7
   24602:	bd80      	pop	{r7, pc}

00024604 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   24604:	b580      	push	{r7, lr}
   24606:	b08c      	sub	sp, #48	; 0x30
   24608:	af04      	add	r7, sp, #16
   2460a:	60f8      	str	r0, [r7, #12]
   2460c:	60b9      	str	r1, [r7, #8]
   2460e:	603b      	str	r3, [r7, #0]
   24610:	4613      	mov	r3, r2
   24612:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   24614:	88fb      	ldrh	r3, [r7, #6]
   24616:	009b      	lsls	r3, r3, #2
   24618:	4618      	mov	r0, r3
   2461a:	f7ff f8eb 	bl	237f4 <pvPortMalloc>
   2461e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   24620:	697b      	ldr	r3, [r7, #20]
   24622:	2b00      	cmp	r3, #0
   24624:	d00e      	beq.n	24644 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   24626:	204c      	movs	r0, #76	; 0x4c
   24628:	f7ff f8e4 	bl	237f4 <pvPortMalloc>
   2462c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   2462e:	69fb      	ldr	r3, [r7, #28]
   24630:	2b00      	cmp	r3, #0
   24632:	d003      	beq.n	2463c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   24634:	69fb      	ldr	r3, [r7, #28]
   24636:	697a      	ldr	r2, [r7, #20]
   24638:	631a      	str	r2, [r3, #48]	; 0x30
   2463a:	e005      	b.n	24648 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   2463c:	6978      	ldr	r0, [r7, #20]
   2463e:	f7ff f96d 	bl	2391c <vPortFree>
   24642:	e001      	b.n	24648 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   24644:	2300      	movs	r3, #0
   24646:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   24648:	69fb      	ldr	r3, [r7, #28]
   2464a:	2b00      	cmp	r3, #0
   2464c:	d013      	beq.n	24676 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   2464e:	88fa      	ldrh	r2, [r7, #6]
   24650:	2300      	movs	r3, #0
   24652:	9303      	str	r3, [sp, #12]
   24654:	69fb      	ldr	r3, [r7, #28]
   24656:	9302      	str	r3, [sp, #8]
   24658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2465a:	9301      	str	r3, [sp, #4]
   2465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2465e:	9300      	str	r3, [sp, #0]
   24660:	683b      	ldr	r3, [r7, #0]
   24662:	68b9      	ldr	r1, [r7, #8]
   24664:	68f8      	ldr	r0, [r7, #12]
   24666:	f000 f80e 	bl	24686 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   2466a:	69f8      	ldr	r0, [r7, #28]
   2466c:	f000 f886 	bl	2477c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   24670:	2301      	movs	r3, #1
   24672:	61bb      	str	r3, [r7, #24]
   24674:	e002      	b.n	2467c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   24676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2467a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   2467c:	69bb      	ldr	r3, [r7, #24]
	}
   2467e:	4618      	mov	r0, r3
   24680:	3720      	adds	r7, #32
   24682:	46bd      	mov	sp, r7
   24684:	bd80      	pop	{r7, pc}

00024686 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   24686:	b580      	push	{r7, lr}
   24688:	b086      	sub	sp, #24
   2468a:	af00      	add	r7, sp, #0
   2468c:	60f8      	str	r0, [r7, #12]
   2468e:	60b9      	str	r1, [r7, #8]
   24690:	607a      	str	r2, [r7, #4]
   24692:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   24694:	68bb      	ldr	r3, [r7, #8]
   24696:	2b00      	cmp	r3, #0
   24698:	d100      	bne.n	2469c <prvInitialiseNewTask+0x16>
   2469a:	e7fe      	b.n	2469a <prvInitialiseNewTask+0x14>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   2469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2469e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   246a0:	687b      	ldr	r3, [r7, #4]
   246a2:	009b      	lsls	r3, r3, #2
   246a4:	461a      	mov	r2, r3
   246a6:	21a5      	movs	r1, #165	; 0xa5
   246a8:	f7e7 fe58 	bl	c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   246ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   246ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   246b0:	687b      	ldr	r3, [r7, #4]
   246b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   246b6:	3b01      	subs	r3, #1
   246b8:	009b      	lsls	r3, r3, #2
   246ba:	4413      	add	r3, r2
   246bc:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   246be:	693b      	ldr	r3, [r7, #16]
   246c0:	f023 0307 	bic.w	r3, r3, #7
   246c4:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   246c6:	693b      	ldr	r3, [r7, #16]
   246c8:	f003 0307 	and.w	r3, r3, #7
   246cc:	2b00      	cmp	r3, #0
   246ce:	d000      	beq.n	246d2 <prvInitialiseNewTask+0x4c>
   246d0:	e7fe      	b.n	246d0 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   246d2:	2300      	movs	r3, #0
   246d4:	617b      	str	r3, [r7, #20]
   246d6:	e012      	b.n	246fe <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   246d8:	68ba      	ldr	r2, [r7, #8]
   246da:	697b      	ldr	r3, [r7, #20]
   246dc:	4413      	add	r3, r2
   246de:	7819      	ldrb	r1, [r3, #0]
   246e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   246e2:	697b      	ldr	r3, [r7, #20]
   246e4:	4413      	add	r3, r2
   246e6:	3334      	adds	r3, #52	; 0x34
   246e8:	460a      	mov	r2, r1
   246ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   246ec:	68ba      	ldr	r2, [r7, #8]
   246ee:	697b      	ldr	r3, [r7, #20]
   246f0:	4413      	add	r3, r2
   246f2:	781b      	ldrb	r3, [r3, #0]
   246f4:	2b00      	cmp	r3, #0
   246f6:	d006      	beq.n	24706 <prvInitialiseNewTask+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   246f8:	697b      	ldr	r3, [r7, #20]
   246fa:	3301      	adds	r3, #1
   246fc:	617b      	str	r3, [r7, #20]
   246fe:	697b      	ldr	r3, [r7, #20]
   24700:	2b0f      	cmp	r3, #15
   24702:	d9e9      	bls.n	246d8 <prvInitialiseNewTask+0x52>
   24704:	e000      	b.n	24708 <prvInitialiseNewTask+0x82>
		{
			break;
   24706:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   24708:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2470a:	2200      	movs	r2, #0
   2470c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   24710:	6a3b      	ldr	r3, [r7, #32]
   24712:	2b03      	cmp	r3, #3
   24714:	d901      	bls.n	2471a <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   24716:	2303      	movs	r3, #3
   24718:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   2471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2471c:	6a3a      	ldr	r2, [r7, #32]
   2471e:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   24720:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24722:	3304      	adds	r3, #4
   24724:	4618      	mov	r0, r3
   24726:	f7ff fae1 	bl	23cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   2472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2472c:	3318      	adds	r3, #24
   2472e:	4618      	mov	r0, r3
   24730:	f7ff fadc 	bl	23cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   24734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24736:	6aba      	ldr	r2, [r7, #40]	; 0x28
   24738:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2473a:	6a3b      	ldr	r3, [r7, #32]
   2473c:	f1c3 0204 	rsb	r2, r3, #4
   24740:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24742:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   24744:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24746:	6aba      	ldr	r2, [r7, #40]	; 0x28
   24748:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   2474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2474c:	2200      	movs	r2, #0
   2474e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   24750:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24752:	2200      	movs	r2, #0
   24754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   24758:	683a      	ldr	r2, [r7, #0]
   2475a:	68f9      	ldr	r1, [r7, #12]
   2475c:	6938      	ldr	r0, [r7, #16]
   2475e:	f7f5 f9b5 	bl	19acc <pxPortInitialiseStack>
   24762:	4602      	mov	r2, r0
   24764:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24766:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   24768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2476a:	2b00      	cmp	r3, #0
   2476c:	d002      	beq.n	24774 <prvInitialiseNewTask+0xee>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   2476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24770:	6aba      	ldr	r2, [r7, #40]	; 0x28
   24772:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   24774:	bf00      	nop
   24776:	3718      	adds	r7, #24
   24778:	46bd      	mov	sp, r7
   2477a:	bd80      	pop	{r7, pc}

0002477c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   2477c:	b580      	push	{r7, lr}
   2477e:	b082      	sub	sp, #8
   24780:	af00      	add	r7, sp, #0
   24782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   24784:	f7f5 faa8 	bl	19cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   24788:	4b2b      	ldr	r3, [pc, #172]	; (24838 <prvAddNewTaskToReadyList+0xbc>)
   2478a:	681b      	ldr	r3, [r3, #0]
   2478c:	3301      	adds	r3, #1
   2478e:	4a2a      	ldr	r2, [pc, #168]	; (24838 <prvAddNewTaskToReadyList+0xbc>)
   24790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   24792:	4b2a      	ldr	r3, [pc, #168]	; (2483c <prvAddNewTaskToReadyList+0xc0>)
   24794:	681b      	ldr	r3, [r3, #0]
   24796:	2b00      	cmp	r3, #0
   24798:	d109      	bne.n	247ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   2479a:	4a28      	ldr	r2, [pc, #160]	; (2483c <prvAddNewTaskToReadyList+0xc0>)
   2479c:	687b      	ldr	r3, [r7, #4]
   2479e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   247a0:	4b25      	ldr	r3, [pc, #148]	; (24838 <prvAddNewTaskToReadyList+0xbc>)
   247a2:	681b      	ldr	r3, [r3, #0]
   247a4:	2b01      	cmp	r3, #1
   247a6:	d110      	bne.n	247ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   247a8:	f000 fd06 	bl	251b8 <prvInitialiseTaskLists>
   247ac:	e00d      	b.n	247ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   247ae:	4b24      	ldr	r3, [pc, #144]	; (24840 <prvAddNewTaskToReadyList+0xc4>)
   247b0:	681b      	ldr	r3, [r3, #0]
   247b2:	2b00      	cmp	r3, #0
   247b4:	d109      	bne.n	247ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   247b6:	4b21      	ldr	r3, [pc, #132]	; (2483c <prvAddNewTaskToReadyList+0xc0>)
   247b8:	681b      	ldr	r3, [r3, #0]
   247ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   247bc:	687b      	ldr	r3, [r7, #4]
   247be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   247c0:	429a      	cmp	r2, r3
   247c2:	d802      	bhi.n	247ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   247c4:	4a1d      	ldr	r2, [pc, #116]	; (2483c <prvAddNewTaskToReadyList+0xc0>)
   247c6:	687b      	ldr	r3, [r7, #4]
   247c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   247ca:	4b1e      	ldr	r3, [pc, #120]	; (24844 <prvAddNewTaskToReadyList+0xc8>)
   247cc:	681b      	ldr	r3, [r3, #0]
   247ce:	3301      	adds	r3, #1
   247d0:	4a1c      	ldr	r2, [pc, #112]	; (24844 <prvAddNewTaskToReadyList+0xc8>)
   247d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   247d4:	687b      	ldr	r3, [r7, #4]
   247d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   247d8:	4b1b      	ldr	r3, [pc, #108]	; (24848 <prvAddNewTaskToReadyList+0xcc>)
   247da:	681b      	ldr	r3, [r3, #0]
   247dc:	429a      	cmp	r2, r3
   247de:	d903      	bls.n	247e8 <prvAddNewTaskToReadyList+0x6c>
   247e0:	687b      	ldr	r3, [r7, #4]
   247e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   247e4:	4a18      	ldr	r2, [pc, #96]	; (24848 <prvAddNewTaskToReadyList+0xcc>)
   247e6:	6013      	str	r3, [r2, #0]
   247e8:	687b      	ldr	r3, [r7, #4]
   247ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   247ec:	4613      	mov	r3, r2
   247ee:	009b      	lsls	r3, r3, #2
   247f0:	4413      	add	r3, r2
   247f2:	009b      	lsls	r3, r3, #2
   247f4:	4a15      	ldr	r2, [pc, #84]	; (2484c <prvAddNewTaskToReadyList+0xd0>)
   247f6:	441a      	add	r2, r3
   247f8:	687b      	ldr	r3, [r7, #4]
   247fa:	3304      	adds	r3, #4
   247fc:	4619      	mov	r1, r3
   247fe:	4610      	mov	r0, r2
   24800:	f7ff fa81 	bl	23d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   24804:	f7f5 fa8e 	bl	19d24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   24808:	4b0d      	ldr	r3, [pc, #52]	; (24840 <prvAddNewTaskToReadyList+0xc4>)
   2480a:	681b      	ldr	r3, [r3, #0]
   2480c:	2b00      	cmp	r3, #0
   2480e:	d00e      	beq.n	2482e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   24810:	4b0a      	ldr	r3, [pc, #40]	; (2483c <prvAddNewTaskToReadyList+0xc0>)
   24812:	681b      	ldr	r3, [r3, #0]
   24814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24816:	687b      	ldr	r3, [r7, #4]
   24818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2481a:	429a      	cmp	r2, r3
   2481c:	d207      	bcs.n	2482e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
   2481e:	4b0c      	ldr	r3, [pc, #48]	; (24850 <prvAddNewTaskToReadyList+0xd4>)
   24820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24824:	601a      	str	r2, [r3, #0]
   24826:	f3bf 8f4f 	dsb	sy
   2482a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   2482e:	bf00      	nop
   24830:	3708      	adds	r7, #8
   24832:	46bd      	mov	sp, r7
   24834:	bd80      	pop	{r7, pc}
   24836:	bf00      	nop
   24838:	10043f4c 	.word	0x10043f4c
   2483c:	10043ea0 	.word	0x10043ea0
   24840:	10043f58 	.word	0x10043f58
   24844:	10043f68 	.word	0x10043f68
   24848:	10043f54 	.word	0x10043f54
   2484c:	10043ea4 	.word	0x10043ea4
   24850:	e000ed04 	.word	0xe000ed04

00024854 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   24854:	b580      	push	{r7, lr}
   24856:	b084      	sub	sp, #16
   24858:	af00      	add	r7, sp, #0
   2485a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   2485c:	f7f5 fa3c 	bl	19cd8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   24860:	687b      	ldr	r3, [r7, #4]
   24862:	2b00      	cmp	r3, #0
   24864:	d102      	bne.n	2486c <vTaskSuspend+0x18>
   24866:	4b2b      	ldr	r3, [pc, #172]	; (24914 <vTaskSuspend+0xc0>)
   24868:	681b      	ldr	r3, [r3, #0]
   2486a:	e000      	b.n	2486e <vTaskSuspend+0x1a>
   2486c:	687b      	ldr	r3, [r7, #4]
   2486e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   24870:	68fb      	ldr	r3, [r7, #12]
   24872:	3304      	adds	r3, #4
   24874:	4618      	mov	r0, r3
   24876:	f7ff faa3 	bl	23dc0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   2487a:	68fb      	ldr	r3, [r7, #12]
   2487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2487e:	2b00      	cmp	r3, #0
   24880:	d004      	beq.n	2488c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   24882:	68fb      	ldr	r3, [r7, #12]
   24884:	3318      	adds	r3, #24
   24886:	4618      	mov	r0, r3
   24888:	f7ff fa9a 	bl	23dc0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   2488c:	68fb      	ldr	r3, [r7, #12]
   2488e:	3304      	adds	r3, #4
   24890:	4619      	mov	r1, r3
   24892:	4821      	ldr	r0, [pc, #132]	; (24918 <vTaskSuspend+0xc4>)
   24894:	f7ff fa37 	bl	23d06 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   24898:	68fb      	ldr	r3, [r7, #12]
   2489a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   2489e:	b2db      	uxtb	r3, r3
   248a0:	2b01      	cmp	r3, #1
   248a2:	d103      	bne.n	248ac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   248a4:	68fb      	ldr	r3, [r7, #12]
   248a6:	2200      	movs	r2, #0
   248a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   248ac:	f7f5 fa3a 	bl	19d24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   248b0:	4b1a      	ldr	r3, [pc, #104]	; (2491c <vTaskSuspend+0xc8>)
   248b2:	681b      	ldr	r3, [r3, #0]
   248b4:	2b00      	cmp	r3, #0
   248b6:	d005      	beq.n	248c4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   248b8:	f7f5 fa0e 	bl	19cd8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   248bc:	f000 fcbe 	bl	2523c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   248c0:	f7f5 fa30 	bl	19d24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   248c4:	4b13      	ldr	r3, [pc, #76]	; (24914 <vTaskSuspend+0xc0>)
   248c6:	681b      	ldr	r3, [r3, #0]
   248c8:	68fa      	ldr	r2, [r7, #12]
   248ca:	429a      	cmp	r2, r3
   248cc:	d11d      	bne.n	2490a <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
   248ce:	4b13      	ldr	r3, [pc, #76]	; (2491c <vTaskSuspend+0xc8>)
   248d0:	681b      	ldr	r3, [r3, #0]
   248d2:	2b00      	cmp	r3, #0
   248d4:	d00d      	beq.n	248f2 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   248d6:	4b12      	ldr	r3, [pc, #72]	; (24920 <vTaskSuspend+0xcc>)
   248d8:	681b      	ldr	r3, [r3, #0]
   248da:	2b00      	cmp	r3, #0
   248dc:	d000      	beq.n	248e0 <vTaskSuspend+0x8c>
   248de:	e7fe      	b.n	248de <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
   248e0:	4b10      	ldr	r3, [pc, #64]	; (24924 <vTaskSuspend+0xd0>)
   248e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   248e6:	601a      	str	r2, [r3, #0]
   248e8:	f3bf 8f4f 	dsb	sy
   248ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   248f0:	e00b      	b.n	2490a <vTaskSuspend+0xb6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   248f2:	4b09      	ldr	r3, [pc, #36]	; (24918 <vTaskSuspend+0xc4>)
   248f4:	681a      	ldr	r2, [r3, #0]
   248f6:	4b0c      	ldr	r3, [pc, #48]	; (24928 <vTaskSuspend+0xd4>)
   248f8:	681b      	ldr	r3, [r3, #0]
   248fa:	429a      	cmp	r2, r3
   248fc:	d103      	bne.n	24906 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   248fe:	4b05      	ldr	r3, [pc, #20]	; (24914 <vTaskSuspend+0xc0>)
   24900:	2200      	movs	r2, #0
   24902:	601a      	str	r2, [r3, #0]
	}
   24904:	e001      	b.n	2490a <vTaskSuspend+0xb6>
					vTaskSwitchContext();
   24906:	f000 f9fd 	bl	24d04 <vTaskSwitchContext>
	}
   2490a:	bf00      	nop
   2490c:	3710      	adds	r7, #16
   2490e:	46bd      	mov	sp, r7
   24910:	bd80      	pop	{r7, pc}
   24912:	bf00      	nop
   24914:	10043ea0 	.word	0x10043ea0
   24918:	10043f38 	.word	0x10043f38
   2491c:	10043f58 	.word	0x10043f58
   24920:	10043f74 	.word	0x10043f74
   24924:	e000ed04 	.word	0xe000ed04
   24928:	10043f4c 	.word	0x10043f4c

0002492c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   2492c:	b580      	push	{r7, lr}
   2492e:	b084      	sub	sp, #16
   24930:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   24932:	4b1a      	ldr	r3, [pc, #104]	; (2499c <vTaskStartScheduler+0x70>)
   24934:	9301      	str	r3, [sp, #4]
   24936:	2300      	movs	r3, #0
   24938:	9300      	str	r3, [sp, #0]
   2493a:	2300      	movs	r3, #0
   2493c:	f44f 7280 	mov.w	r2, #256	; 0x100
   24940:	4917      	ldr	r1, [pc, #92]	; (249a0 <vTaskStartScheduler+0x74>)
   24942:	4818      	ldr	r0, [pc, #96]	; (249a4 <vTaskStartScheduler+0x78>)
   24944:	f7ff fe5e 	bl	24604 <xTaskCreate>
   24948:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   2494a:	687b      	ldr	r3, [r7, #4]
   2494c:	2b01      	cmp	r3, #1
   2494e:	d102      	bne.n	24956 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   24950:	f000 fd1e 	bl	25390 <xTimerCreateTimerTask>
   24954:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   24956:	687b      	ldr	r3, [r7, #4]
   24958:	2b01      	cmp	r3, #1
   2495a:	d115      	bne.n	24988 <vTaskStartScheduler+0x5c>
	__asm volatile
   2495c:	f04f 0380 	mov.w	r3, #128	; 0x80
   24960:	f383 8811 	msr	BASEPRI, r3
   24964:	f3bf 8f6f 	isb	sy
   24968:	f3bf 8f4f 	dsb	sy
   2496c:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   2496e:	4b0e      	ldr	r3, [pc, #56]	; (249a8 <vTaskStartScheduler+0x7c>)
   24970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24974:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   24976:	4b0d      	ldr	r3, [pc, #52]	; (249ac <vTaskStartScheduler+0x80>)
   24978:	2201      	movs	r2, #1
   2497a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   2497c:	4b0c      	ldr	r3, [pc, #48]	; (249b0 <vTaskStartScheduler+0x84>)
   2497e:	2200      	movs	r2, #0
   24980:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   24982:	f7f5 f925 	bl	19bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   24986:	e004      	b.n	24992 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   24988:	687b      	ldr	r3, [r7, #4]
   2498a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2498e:	d100      	bne.n	24992 <vTaskStartScheduler+0x66>
   24990:	e7fe      	b.n	24990 <vTaskStartScheduler+0x64>
}
   24992:	bf00      	nop
   24994:	3708      	adds	r7, #8
   24996:	46bd      	mov	sp, r7
   24998:	bd80      	pop	{r7, pc}
   2499a:	bf00      	nop
   2499c:	10043f70 	.word	0x10043f70
   249a0:	0003b8a4 	.word	0x0003b8a4
   249a4:	000250f1 	.word	0x000250f1
   249a8:	10043f6c 	.word	0x10043f6c
   249ac:	10043f58 	.word	0x10043f58
   249b0:	10043f50 	.word	0x10043f50

000249b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   249b4:	b480      	push	{r7}
   249b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   249b8:	4b04      	ldr	r3, [pc, #16]	; (249cc <vTaskSuspendAll+0x18>)
   249ba:	681b      	ldr	r3, [r3, #0]
   249bc:	3301      	adds	r3, #1
   249be:	4a03      	ldr	r2, [pc, #12]	; (249cc <vTaskSuspendAll+0x18>)
   249c0:	6013      	str	r3, [r2, #0]
}
   249c2:	bf00      	nop
   249c4:	46bd      	mov	sp, r7
   249c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   249ca:	4770      	bx	lr
   249cc:	10043f74 	.word	0x10043f74

000249d0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   249d0:	b480      	push	{r7}
   249d2:	b083      	sub	sp, #12
   249d4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   249d6:	2300      	movs	r3, #0
   249d8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   249da:	4b14      	ldr	r3, [pc, #80]	; (24a2c <prvGetExpectedIdleTime+0x5c>)
   249dc:	681b      	ldr	r3, [r3, #0]
   249de:	2b00      	cmp	r3, #0
   249e0:	d001      	beq.n	249e6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   249e2:	2301      	movs	r3, #1
   249e4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   249e6:	4b12      	ldr	r3, [pc, #72]	; (24a30 <prvGetExpectedIdleTime+0x60>)
   249e8:	681b      	ldr	r3, [r3, #0]
   249ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   249ec:	2b00      	cmp	r3, #0
   249ee:	d002      	beq.n	249f6 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   249f0:	2300      	movs	r3, #0
   249f2:	607b      	str	r3, [r7, #4]
   249f4:	e012      	b.n	24a1c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   249f6:	4b0f      	ldr	r3, [pc, #60]	; (24a34 <prvGetExpectedIdleTime+0x64>)
   249f8:	681b      	ldr	r3, [r3, #0]
   249fa:	2b01      	cmp	r3, #1
   249fc:	d902      	bls.n	24a04 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   249fe:	2300      	movs	r3, #0
   24a00:	607b      	str	r3, [r7, #4]
   24a02:	e00b      	b.n	24a1c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   24a04:	683b      	ldr	r3, [r7, #0]
   24a06:	2b00      	cmp	r3, #0
   24a08:	d002      	beq.n	24a10 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   24a0a:	2300      	movs	r3, #0
   24a0c:	607b      	str	r3, [r7, #4]
   24a0e:	e005      	b.n	24a1c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   24a10:	4b09      	ldr	r3, [pc, #36]	; (24a38 <prvGetExpectedIdleTime+0x68>)
   24a12:	681a      	ldr	r2, [r3, #0]
   24a14:	4b09      	ldr	r3, [pc, #36]	; (24a3c <prvGetExpectedIdleTime+0x6c>)
   24a16:	681b      	ldr	r3, [r3, #0]
   24a18:	1ad3      	subs	r3, r2, r3
   24a1a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   24a1c:	687b      	ldr	r3, [r7, #4]
	}
   24a1e:	4618      	mov	r0, r3
   24a20:	370c      	adds	r7, #12
   24a22:	46bd      	mov	sp, r7
   24a24:	f85d 7b04 	ldr.w	r7, [sp], #4
   24a28:	4770      	bx	lr
   24a2a:	bf00      	nop
   24a2c:	10043f54 	.word	0x10043f54
   24a30:	10043ea0 	.word	0x10043ea0
   24a34:	10043ea4 	.word	0x10043ea4
   24a38:	10043f6c 	.word	0x10043f6c
   24a3c:	10043f50 	.word	0x10043f50

00024a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   24a40:	b580      	push	{r7, lr}
   24a42:	b084      	sub	sp, #16
   24a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   24a46:	2300      	movs	r3, #0
   24a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   24a4a:	2300      	movs	r3, #0
   24a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   24a4e:	4b3d      	ldr	r3, [pc, #244]	; (24b44 <xTaskResumeAll+0x104>)
   24a50:	681b      	ldr	r3, [r3, #0]
   24a52:	2b00      	cmp	r3, #0
   24a54:	d100      	bne.n	24a58 <xTaskResumeAll+0x18>
   24a56:	e7fe      	b.n	24a56 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   24a58:	f7f5 f93e 	bl	19cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   24a5c:	4b39      	ldr	r3, [pc, #228]	; (24b44 <xTaskResumeAll+0x104>)
   24a5e:	681b      	ldr	r3, [r3, #0]
   24a60:	3b01      	subs	r3, #1
   24a62:	4a38      	ldr	r2, [pc, #224]	; (24b44 <xTaskResumeAll+0x104>)
   24a64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   24a66:	4b37      	ldr	r3, [pc, #220]	; (24b44 <xTaskResumeAll+0x104>)
   24a68:	681b      	ldr	r3, [r3, #0]
   24a6a:	2b00      	cmp	r3, #0
   24a6c:	d162      	bne.n	24b34 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   24a6e:	4b36      	ldr	r3, [pc, #216]	; (24b48 <xTaskResumeAll+0x108>)
   24a70:	681b      	ldr	r3, [r3, #0]
   24a72:	2b00      	cmp	r3, #0
   24a74:	d05e      	beq.n	24b34 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   24a76:	e02f      	b.n	24ad8 <xTaskResumeAll+0x98>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24a78:	4b34      	ldr	r3, [pc, #208]	; (24b4c <xTaskResumeAll+0x10c>)
   24a7a:	68db      	ldr	r3, [r3, #12]
   24a7c:	68db      	ldr	r3, [r3, #12]
   24a7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   24a80:	68fb      	ldr	r3, [r7, #12]
   24a82:	3318      	adds	r3, #24
   24a84:	4618      	mov	r0, r3
   24a86:	f7ff f99b 	bl	23dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   24a8a:	68fb      	ldr	r3, [r7, #12]
   24a8c:	3304      	adds	r3, #4
   24a8e:	4618      	mov	r0, r3
   24a90:	f7ff f996 	bl	23dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   24a94:	68fb      	ldr	r3, [r7, #12]
   24a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24a98:	4b2d      	ldr	r3, [pc, #180]	; (24b50 <xTaskResumeAll+0x110>)
   24a9a:	681b      	ldr	r3, [r3, #0]
   24a9c:	429a      	cmp	r2, r3
   24a9e:	d903      	bls.n	24aa8 <xTaskResumeAll+0x68>
   24aa0:	68fb      	ldr	r3, [r7, #12]
   24aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24aa4:	4a2a      	ldr	r2, [pc, #168]	; (24b50 <xTaskResumeAll+0x110>)
   24aa6:	6013      	str	r3, [r2, #0]
   24aa8:	68fb      	ldr	r3, [r7, #12]
   24aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24aac:	4613      	mov	r3, r2
   24aae:	009b      	lsls	r3, r3, #2
   24ab0:	4413      	add	r3, r2
   24ab2:	009b      	lsls	r3, r3, #2
   24ab4:	4a27      	ldr	r2, [pc, #156]	; (24b54 <xTaskResumeAll+0x114>)
   24ab6:	441a      	add	r2, r3
   24ab8:	68fb      	ldr	r3, [r7, #12]
   24aba:	3304      	adds	r3, #4
   24abc:	4619      	mov	r1, r3
   24abe:	4610      	mov	r0, r2
   24ac0:	f7ff f921 	bl	23d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   24ac4:	68fb      	ldr	r3, [r7, #12]
   24ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24ac8:	4b23      	ldr	r3, [pc, #140]	; (24b58 <xTaskResumeAll+0x118>)
   24aca:	681b      	ldr	r3, [r3, #0]
   24acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24ace:	429a      	cmp	r2, r3
   24ad0:	d302      	bcc.n	24ad8 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   24ad2:	4b22      	ldr	r3, [pc, #136]	; (24b5c <xTaskResumeAll+0x11c>)
   24ad4:	2201      	movs	r2, #1
   24ad6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   24ad8:	4b1c      	ldr	r3, [pc, #112]	; (24b4c <xTaskResumeAll+0x10c>)
   24ada:	681b      	ldr	r3, [r3, #0]
   24adc:	2b00      	cmp	r3, #0
   24ade:	d1cb      	bne.n	24a78 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   24ae0:	68fb      	ldr	r3, [r7, #12]
   24ae2:	2b00      	cmp	r3, #0
   24ae4:	d001      	beq.n	24aea <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   24ae6:	f000 fba9 	bl	2523c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   24aea:	4b1d      	ldr	r3, [pc, #116]	; (24b60 <xTaskResumeAll+0x120>)
   24aec:	681b      	ldr	r3, [r3, #0]
   24aee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   24af0:	687b      	ldr	r3, [r7, #4]
   24af2:	2b00      	cmp	r3, #0
   24af4:	d010      	beq.n	24b18 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   24af6:	f000 f865 	bl	24bc4 <xTaskIncrementTick>
   24afa:	4603      	mov	r3, r0
   24afc:	2b00      	cmp	r3, #0
   24afe:	d002      	beq.n	24b06 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   24b00:	4b16      	ldr	r3, [pc, #88]	; (24b5c <xTaskResumeAll+0x11c>)
   24b02:	2201      	movs	r2, #1
   24b04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   24b06:	687b      	ldr	r3, [r7, #4]
   24b08:	3b01      	subs	r3, #1
   24b0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   24b0c:	687b      	ldr	r3, [r7, #4]
   24b0e:	2b00      	cmp	r3, #0
   24b10:	d1f1      	bne.n	24af6 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   24b12:	4b13      	ldr	r3, [pc, #76]	; (24b60 <xTaskResumeAll+0x120>)
   24b14:	2200      	movs	r2, #0
   24b16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   24b18:	4b10      	ldr	r3, [pc, #64]	; (24b5c <xTaskResumeAll+0x11c>)
   24b1a:	681b      	ldr	r3, [r3, #0]
   24b1c:	2b00      	cmp	r3, #0
   24b1e:	d009      	beq.n	24b34 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   24b20:	2301      	movs	r3, #1
   24b22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   24b24:	4b0f      	ldr	r3, [pc, #60]	; (24b64 <xTaskResumeAll+0x124>)
   24b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   24b2a:	601a      	str	r2, [r3, #0]
   24b2c:	f3bf 8f4f 	dsb	sy
   24b30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   24b34:	f7f5 f8f6 	bl	19d24 <vPortExitCritical>

	return xAlreadyYielded;
   24b38:	68bb      	ldr	r3, [r7, #8]
}
   24b3a:	4618      	mov	r0, r3
   24b3c:	3710      	adds	r7, #16
   24b3e:	46bd      	mov	sp, r7
   24b40:	bd80      	pop	{r7, pc}
   24b42:	bf00      	nop
   24b44:	10043f74 	.word	0x10043f74
   24b48:	10043f4c 	.word	0x10043f4c
   24b4c:	10043f24 	.word	0x10043f24
   24b50:	10043f54 	.word	0x10043f54
   24b54:	10043ea4 	.word	0x10043ea4
   24b58:	10043ea0 	.word	0x10043ea0
   24b5c:	10043f60 	.word	0x10043f60
   24b60:	10043f5c 	.word	0x10043f5c
   24b64:	e000ed04 	.word	0xe000ed04

00024b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   24b68:	b480      	push	{r7}
   24b6a:	b083      	sub	sp, #12
   24b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   24b6e:	4b05      	ldr	r3, [pc, #20]	; (24b84 <xTaskGetTickCount+0x1c>)
   24b70:	681b      	ldr	r3, [r3, #0]
   24b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   24b74:	687b      	ldr	r3, [r7, #4]
}
   24b76:	4618      	mov	r0, r3
   24b78:	370c      	adds	r7, #12
   24b7a:	46bd      	mov	sp, r7
   24b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   24b80:	4770      	bx	lr
   24b82:	bf00      	nop
   24b84:	10043f50 	.word	0x10043f50

00024b88 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   24b88:	b480      	push	{r7}
   24b8a:	b083      	sub	sp, #12
   24b8c:	af00      	add	r7, sp, #0
   24b8e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   24b90:	4b0a      	ldr	r3, [pc, #40]	; (24bbc <vTaskStepTick+0x34>)
   24b92:	681a      	ldr	r2, [r3, #0]
   24b94:	687b      	ldr	r3, [r7, #4]
   24b96:	441a      	add	r2, r3
   24b98:	4b09      	ldr	r3, [pc, #36]	; (24bc0 <vTaskStepTick+0x38>)
   24b9a:	681b      	ldr	r3, [r3, #0]
   24b9c:	429a      	cmp	r2, r3
   24b9e:	d900      	bls.n	24ba2 <vTaskStepTick+0x1a>
   24ba0:	e7fe      	b.n	24ba0 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   24ba2:	4b06      	ldr	r3, [pc, #24]	; (24bbc <vTaskStepTick+0x34>)
   24ba4:	681a      	ldr	r2, [r3, #0]
   24ba6:	687b      	ldr	r3, [r7, #4]
   24ba8:	4413      	add	r3, r2
   24baa:	4a04      	ldr	r2, [pc, #16]	; (24bbc <vTaskStepTick+0x34>)
   24bac:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   24bae:	bf00      	nop
   24bb0:	370c      	adds	r7, #12
   24bb2:	46bd      	mov	sp, r7
   24bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   24bb8:	4770      	bx	lr
   24bba:	bf00      	nop
   24bbc:	10043f50 	.word	0x10043f50
   24bc0:	10043f6c 	.word	0x10043f6c

00024bc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   24bc4:	b580      	push	{r7, lr}
   24bc6:	b086      	sub	sp, #24
   24bc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   24bca:	2300      	movs	r3, #0
   24bcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   24bce:	4b42      	ldr	r3, [pc, #264]	; (24cd8 <xTaskIncrementTick+0x114>)
   24bd0:	681b      	ldr	r3, [r3, #0]
   24bd2:	2b00      	cmp	r3, #0
   24bd4:	d16f      	bne.n	24cb6 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   24bd6:	4b41      	ldr	r3, [pc, #260]	; (24cdc <xTaskIncrementTick+0x118>)
   24bd8:	681b      	ldr	r3, [r3, #0]
   24bda:	3301      	adds	r3, #1
   24bdc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   24bde:	4a3f      	ldr	r2, [pc, #252]	; (24cdc <xTaskIncrementTick+0x118>)
   24be0:	693b      	ldr	r3, [r7, #16]
   24be2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   24be4:	693b      	ldr	r3, [r7, #16]
   24be6:	2b00      	cmp	r3, #0
   24be8:	d116      	bne.n	24c18 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   24bea:	4b3d      	ldr	r3, [pc, #244]	; (24ce0 <xTaskIncrementTick+0x11c>)
   24bec:	681b      	ldr	r3, [r3, #0]
   24bee:	681b      	ldr	r3, [r3, #0]
   24bf0:	2b00      	cmp	r3, #0
   24bf2:	d000      	beq.n	24bf6 <xTaskIncrementTick+0x32>
   24bf4:	e7fe      	b.n	24bf4 <xTaskIncrementTick+0x30>
   24bf6:	4b3a      	ldr	r3, [pc, #232]	; (24ce0 <xTaskIncrementTick+0x11c>)
   24bf8:	681b      	ldr	r3, [r3, #0]
   24bfa:	60fb      	str	r3, [r7, #12]
   24bfc:	4b39      	ldr	r3, [pc, #228]	; (24ce4 <xTaskIncrementTick+0x120>)
   24bfe:	681b      	ldr	r3, [r3, #0]
   24c00:	4a37      	ldr	r2, [pc, #220]	; (24ce0 <xTaskIncrementTick+0x11c>)
   24c02:	6013      	str	r3, [r2, #0]
   24c04:	4a37      	ldr	r2, [pc, #220]	; (24ce4 <xTaskIncrementTick+0x120>)
   24c06:	68fb      	ldr	r3, [r7, #12]
   24c08:	6013      	str	r3, [r2, #0]
   24c0a:	4b37      	ldr	r3, [pc, #220]	; (24ce8 <xTaskIncrementTick+0x124>)
   24c0c:	681b      	ldr	r3, [r3, #0]
   24c0e:	3301      	adds	r3, #1
   24c10:	4a35      	ldr	r2, [pc, #212]	; (24ce8 <xTaskIncrementTick+0x124>)
   24c12:	6013      	str	r3, [r2, #0]
   24c14:	f000 fb12 	bl	2523c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   24c18:	4b34      	ldr	r3, [pc, #208]	; (24cec <xTaskIncrementTick+0x128>)
   24c1a:	681b      	ldr	r3, [r3, #0]
   24c1c:	693a      	ldr	r2, [r7, #16]
   24c1e:	429a      	cmp	r2, r3
   24c20:	d34e      	bcc.n	24cc0 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   24c22:	4b2f      	ldr	r3, [pc, #188]	; (24ce0 <xTaskIncrementTick+0x11c>)
   24c24:	681b      	ldr	r3, [r3, #0]
   24c26:	681b      	ldr	r3, [r3, #0]
   24c28:	2b00      	cmp	r3, #0
   24c2a:	d104      	bne.n	24c36 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   24c2c:	4b2f      	ldr	r3, [pc, #188]	; (24cec <xTaskIncrementTick+0x128>)
   24c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24c32:	601a      	str	r2, [r3, #0]
					break;
   24c34:	e044      	b.n	24cc0 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24c36:	4b2a      	ldr	r3, [pc, #168]	; (24ce0 <xTaskIncrementTick+0x11c>)
   24c38:	681b      	ldr	r3, [r3, #0]
   24c3a:	68db      	ldr	r3, [r3, #12]
   24c3c:	68db      	ldr	r3, [r3, #12]
   24c3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   24c40:	68bb      	ldr	r3, [r7, #8]
   24c42:	685b      	ldr	r3, [r3, #4]
   24c44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   24c46:	693a      	ldr	r2, [r7, #16]
   24c48:	687b      	ldr	r3, [r7, #4]
   24c4a:	429a      	cmp	r2, r3
   24c4c:	d203      	bcs.n	24c56 <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   24c4e:	4a27      	ldr	r2, [pc, #156]	; (24cec <xTaskIncrementTick+0x128>)
   24c50:	687b      	ldr	r3, [r7, #4]
   24c52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   24c54:	e034      	b.n	24cc0 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   24c56:	68bb      	ldr	r3, [r7, #8]
   24c58:	3304      	adds	r3, #4
   24c5a:	4618      	mov	r0, r3
   24c5c:	f7ff f8b0 	bl	23dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   24c60:	68bb      	ldr	r3, [r7, #8]
   24c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24c64:	2b00      	cmp	r3, #0
   24c66:	d004      	beq.n	24c72 <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   24c68:	68bb      	ldr	r3, [r7, #8]
   24c6a:	3318      	adds	r3, #24
   24c6c:	4618      	mov	r0, r3
   24c6e:	f7ff f8a7 	bl	23dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   24c72:	68bb      	ldr	r3, [r7, #8]
   24c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24c76:	4b1e      	ldr	r3, [pc, #120]	; (24cf0 <xTaskIncrementTick+0x12c>)
   24c78:	681b      	ldr	r3, [r3, #0]
   24c7a:	429a      	cmp	r2, r3
   24c7c:	d903      	bls.n	24c86 <xTaskIncrementTick+0xc2>
   24c7e:	68bb      	ldr	r3, [r7, #8]
   24c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24c82:	4a1b      	ldr	r2, [pc, #108]	; (24cf0 <xTaskIncrementTick+0x12c>)
   24c84:	6013      	str	r3, [r2, #0]
   24c86:	68bb      	ldr	r3, [r7, #8]
   24c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24c8a:	4613      	mov	r3, r2
   24c8c:	009b      	lsls	r3, r3, #2
   24c8e:	4413      	add	r3, r2
   24c90:	009b      	lsls	r3, r3, #2
   24c92:	4a18      	ldr	r2, [pc, #96]	; (24cf4 <xTaskIncrementTick+0x130>)
   24c94:	441a      	add	r2, r3
   24c96:	68bb      	ldr	r3, [r7, #8]
   24c98:	3304      	adds	r3, #4
   24c9a:	4619      	mov	r1, r3
   24c9c:	4610      	mov	r0, r2
   24c9e:	f7ff f832 	bl	23d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   24ca2:	68bb      	ldr	r3, [r7, #8]
   24ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24ca6:	4b14      	ldr	r3, [pc, #80]	; (24cf8 <xTaskIncrementTick+0x134>)
   24ca8:	681b      	ldr	r3, [r3, #0]
   24caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24cac:	429a      	cmp	r2, r3
   24cae:	d3b8      	bcc.n	24c22 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
   24cb0:	2301      	movs	r3, #1
   24cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   24cb4:	e7b5      	b.n	24c22 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   24cb6:	4b11      	ldr	r3, [pc, #68]	; (24cfc <xTaskIncrementTick+0x138>)
   24cb8:	681b      	ldr	r3, [r3, #0]
   24cba:	3301      	adds	r3, #1
   24cbc:	4a0f      	ldr	r2, [pc, #60]	; (24cfc <xTaskIncrementTick+0x138>)
   24cbe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   24cc0:	4b0f      	ldr	r3, [pc, #60]	; (24d00 <xTaskIncrementTick+0x13c>)
   24cc2:	681b      	ldr	r3, [r3, #0]
   24cc4:	2b00      	cmp	r3, #0
   24cc6:	d001      	beq.n	24ccc <xTaskIncrementTick+0x108>
		{
			xSwitchRequired = pdTRUE;
   24cc8:	2301      	movs	r3, #1
   24cca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   24ccc:	697b      	ldr	r3, [r7, #20]
}
   24cce:	4618      	mov	r0, r3
   24cd0:	3718      	adds	r7, #24
   24cd2:	46bd      	mov	sp, r7
   24cd4:	bd80      	pop	{r7, pc}
   24cd6:	bf00      	nop
   24cd8:	10043f74 	.word	0x10043f74
   24cdc:	10043f50 	.word	0x10043f50
   24ce0:	10043f1c 	.word	0x10043f1c
   24ce4:	10043f20 	.word	0x10043f20
   24ce8:	10043f64 	.word	0x10043f64
   24cec:	10043f6c 	.word	0x10043f6c
   24cf0:	10043f54 	.word	0x10043f54
   24cf4:	10043ea4 	.word	0x10043ea4
   24cf8:	10043ea0 	.word	0x10043ea0
   24cfc:	10043f5c 	.word	0x10043f5c
   24d00:	10043f60 	.word	0x10043f60

00024d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   24d04:	b580      	push	{r7, lr}
   24d06:	b084      	sub	sp, #16
   24d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   24d0a:	4b35      	ldr	r3, [pc, #212]	; (24de0 <vTaskSwitchContext+0xdc>)
   24d0c:	681b      	ldr	r3, [r3, #0]
   24d0e:	2b00      	cmp	r3, #0
   24d10:	d003      	beq.n	24d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   24d12:	4b34      	ldr	r3, [pc, #208]	; (24de4 <vTaskSwitchContext+0xe0>)
   24d14:	2201      	movs	r2, #1
   24d16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   24d18:	e05e      	b.n	24dd8 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   24d1a:	4b32      	ldr	r3, [pc, #200]	; (24de4 <vTaskSwitchContext+0xe0>)
   24d1c:	2200      	movs	r2, #0
   24d1e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   24d20:	4b31      	ldr	r3, [pc, #196]	; (24de8 <vTaskSwitchContext+0xe4>)
   24d22:	681b      	ldr	r3, [r3, #0]
   24d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   24d26:	60bb      	str	r3, [r7, #8]
   24d28:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   24d2c:	607b      	str	r3, [r7, #4]
   24d2e:	68bb      	ldr	r3, [r7, #8]
   24d30:	681a      	ldr	r2, [r3, #0]
   24d32:	687b      	ldr	r3, [r7, #4]
   24d34:	429a      	cmp	r2, r3
   24d36:	d111      	bne.n	24d5c <vTaskSwitchContext+0x58>
   24d38:	68bb      	ldr	r3, [r7, #8]
   24d3a:	3304      	adds	r3, #4
   24d3c:	681a      	ldr	r2, [r3, #0]
   24d3e:	687b      	ldr	r3, [r7, #4]
   24d40:	429a      	cmp	r2, r3
   24d42:	d10b      	bne.n	24d5c <vTaskSwitchContext+0x58>
   24d44:	68bb      	ldr	r3, [r7, #8]
   24d46:	3308      	adds	r3, #8
   24d48:	681a      	ldr	r2, [r3, #0]
   24d4a:	687b      	ldr	r3, [r7, #4]
   24d4c:	429a      	cmp	r2, r3
   24d4e:	d105      	bne.n	24d5c <vTaskSwitchContext+0x58>
   24d50:	68bb      	ldr	r3, [r7, #8]
   24d52:	330c      	adds	r3, #12
   24d54:	681a      	ldr	r2, [r3, #0]
   24d56:	687b      	ldr	r3, [r7, #4]
   24d58:	429a      	cmp	r2, r3
   24d5a:	d008      	beq.n	24d6e <vTaskSwitchContext+0x6a>
   24d5c:	4b22      	ldr	r3, [pc, #136]	; (24de8 <vTaskSwitchContext+0xe4>)
   24d5e:	681a      	ldr	r2, [r3, #0]
   24d60:	4b21      	ldr	r3, [pc, #132]	; (24de8 <vTaskSwitchContext+0xe4>)
   24d62:	681b      	ldr	r3, [r3, #0]
   24d64:	3334      	adds	r3, #52	; 0x34
   24d66:	4619      	mov	r1, r3
   24d68:	4610      	mov	r0, r2
   24d6a:	f7fb faed 	bl	20348 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24d6e:	4b1f      	ldr	r3, [pc, #124]	; (24dec <vTaskSwitchContext+0xe8>)
   24d70:	681b      	ldr	r3, [r3, #0]
   24d72:	60fb      	str	r3, [r7, #12]
   24d74:	e006      	b.n	24d84 <vTaskSwitchContext+0x80>
   24d76:	68fb      	ldr	r3, [r7, #12]
   24d78:	2b00      	cmp	r3, #0
   24d7a:	d100      	bne.n	24d7e <vTaskSwitchContext+0x7a>
   24d7c:	e7fe      	b.n	24d7c <vTaskSwitchContext+0x78>
   24d7e:	68fb      	ldr	r3, [r7, #12]
   24d80:	3b01      	subs	r3, #1
   24d82:	60fb      	str	r3, [r7, #12]
   24d84:	491a      	ldr	r1, [pc, #104]	; (24df0 <vTaskSwitchContext+0xec>)
   24d86:	68fa      	ldr	r2, [r7, #12]
   24d88:	4613      	mov	r3, r2
   24d8a:	009b      	lsls	r3, r3, #2
   24d8c:	4413      	add	r3, r2
   24d8e:	009b      	lsls	r3, r3, #2
   24d90:	440b      	add	r3, r1
   24d92:	681b      	ldr	r3, [r3, #0]
   24d94:	2b00      	cmp	r3, #0
   24d96:	d0ee      	beq.n	24d76 <vTaskSwitchContext+0x72>
   24d98:	68fa      	ldr	r2, [r7, #12]
   24d9a:	4613      	mov	r3, r2
   24d9c:	009b      	lsls	r3, r3, #2
   24d9e:	4413      	add	r3, r2
   24da0:	009b      	lsls	r3, r3, #2
   24da2:	4a13      	ldr	r2, [pc, #76]	; (24df0 <vTaskSwitchContext+0xec>)
   24da4:	4413      	add	r3, r2
   24da6:	603b      	str	r3, [r7, #0]
   24da8:	683b      	ldr	r3, [r7, #0]
   24daa:	685b      	ldr	r3, [r3, #4]
   24dac:	685a      	ldr	r2, [r3, #4]
   24dae:	683b      	ldr	r3, [r7, #0]
   24db0:	605a      	str	r2, [r3, #4]
   24db2:	683b      	ldr	r3, [r7, #0]
   24db4:	685a      	ldr	r2, [r3, #4]
   24db6:	683b      	ldr	r3, [r7, #0]
   24db8:	3308      	adds	r3, #8
   24dba:	429a      	cmp	r2, r3
   24dbc:	d104      	bne.n	24dc8 <vTaskSwitchContext+0xc4>
   24dbe:	683b      	ldr	r3, [r7, #0]
   24dc0:	685b      	ldr	r3, [r3, #4]
   24dc2:	685a      	ldr	r2, [r3, #4]
   24dc4:	683b      	ldr	r3, [r7, #0]
   24dc6:	605a      	str	r2, [r3, #4]
   24dc8:	683b      	ldr	r3, [r7, #0]
   24dca:	685b      	ldr	r3, [r3, #4]
   24dcc:	68db      	ldr	r3, [r3, #12]
   24dce:	4a06      	ldr	r2, [pc, #24]	; (24de8 <vTaskSwitchContext+0xe4>)
   24dd0:	6013      	str	r3, [r2, #0]
   24dd2:	4a06      	ldr	r2, [pc, #24]	; (24dec <vTaskSwitchContext+0xe8>)
   24dd4:	68fb      	ldr	r3, [r7, #12]
   24dd6:	6013      	str	r3, [r2, #0]
}
   24dd8:	bf00      	nop
   24dda:	3710      	adds	r7, #16
   24ddc:	46bd      	mov	sp, r7
   24dde:	bd80      	pop	{r7, pc}
   24de0:	10043f74 	.word	0x10043f74
   24de4:	10043f60 	.word	0x10043f60
   24de8:	10043ea0 	.word	0x10043ea0
   24dec:	10043f54 	.word	0x10043f54
   24df0:	10043ea4 	.word	0x10043ea4

00024df4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   24df4:	b580      	push	{r7, lr}
   24df6:	b082      	sub	sp, #8
   24df8:	af00      	add	r7, sp, #0
   24dfa:	6078      	str	r0, [r7, #4]
   24dfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   24dfe:	687b      	ldr	r3, [r7, #4]
   24e00:	2b00      	cmp	r3, #0
   24e02:	d100      	bne.n	24e06 <vTaskPlaceOnEventList+0x12>
   24e04:	e7fe      	b.n	24e04 <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   24e06:	4b07      	ldr	r3, [pc, #28]	; (24e24 <vTaskPlaceOnEventList+0x30>)
   24e08:	681b      	ldr	r3, [r3, #0]
   24e0a:	3318      	adds	r3, #24
   24e0c:	4619      	mov	r1, r3
   24e0e:	6878      	ldr	r0, [r7, #4]
   24e10:	f7fe ff9d 	bl	23d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   24e14:	2101      	movs	r1, #1
   24e16:	6838      	ldr	r0, [r7, #0]
   24e18:	f000 fa66 	bl	252e8 <prvAddCurrentTaskToDelayedList>
}
   24e1c:	bf00      	nop
   24e1e:	3708      	adds	r7, #8
   24e20:	46bd      	mov	sp, r7
   24e22:	bd80      	pop	{r7, pc}
   24e24:	10043ea0 	.word	0x10043ea0

00024e28 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   24e28:	b580      	push	{r7, lr}
   24e2a:	b084      	sub	sp, #16
   24e2c:	af00      	add	r7, sp, #0
   24e2e:	60f8      	str	r0, [r7, #12]
   24e30:	60b9      	str	r1, [r7, #8]
   24e32:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   24e34:	68fb      	ldr	r3, [r7, #12]
   24e36:	2b00      	cmp	r3, #0
   24e38:	d100      	bne.n	24e3c <vTaskPlaceOnUnorderedEventList+0x14>
   24e3a:	e7fe      	b.n	24e3a <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   24e3c:	4b0c      	ldr	r3, [pc, #48]	; (24e70 <vTaskPlaceOnUnorderedEventList+0x48>)
   24e3e:	681b      	ldr	r3, [r3, #0]
   24e40:	2b00      	cmp	r3, #0
   24e42:	d100      	bne.n	24e46 <vTaskPlaceOnUnorderedEventList+0x1e>
   24e44:	e7fe      	b.n	24e44 <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   24e46:	4b0b      	ldr	r3, [pc, #44]	; (24e74 <vTaskPlaceOnUnorderedEventList+0x4c>)
   24e48:	681b      	ldr	r3, [r3, #0]
   24e4a:	68ba      	ldr	r2, [r7, #8]
   24e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   24e50:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   24e52:	4b08      	ldr	r3, [pc, #32]	; (24e74 <vTaskPlaceOnUnorderedEventList+0x4c>)
   24e54:	681b      	ldr	r3, [r3, #0]
   24e56:	3318      	adds	r3, #24
   24e58:	4619      	mov	r1, r3
   24e5a:	68f8      	ldr	r0, [r7, #12]
   24e5c:	f7fe ff53 	bl	23d06 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   24e60:	2101      	movs	r1, #1
   24e62:	6878      	ldr	r0, [r7, #4]
   24e64:	f000 fa40 	bl	252e8 <prvAddCurrentTaskToDelayedList>
}
   24e68:	bf00      	nop
   24e6a:	3710      	adds	r7, #16
   24e6c:	46bd      	mov	sp, r7
   24e6e:	bd80      	pop	{r7, pc}
   24e70:	10043f74 	.word	0x10043f74
   24e74:	10043ea0 	.word	0x10043ea0

00024e78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   24e78:	b580      	push	{r7, lr}
   24e7a:	b084      	sub	sp, #16
   24e7c:	af00      	add	r7, sp, #0
   24e7e:	60f8      	str	r0, [r7, #12]
   24e80:	60b9      	str	r1, [r7, #8]
   24e82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   24e84:	68fb      	ldr	r3, [r7, #12]
   24e86:	2b00      	cmp	r3, #0
   24e88:	d100      	bne.n	24e8c <vTaskPlaceOnEventListRestricted+0x14>
   24e8a:	e7fe      	b.n	24e8a <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   24e8c:	4b0a      	ldr	r3, [pc, #40]	; (24eb8 <vTaskPlaceOnEventListRestricted+0x40>)
   24e8e:	681b      	ldr	r3, [r3, #0]
   24e90:	3318      	adds	r3, #24
   24e92:	4619      	mov	r1, r3
   24e94:	68f8      	ldr	r0, [r7, #12]
   24e96:	f7fe ff36 	bl	23d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   24e9a:	687b      	ldr	r3, [r7, #4]
   24e9c:	2b00      	cmp	r3, #0
   24e9e:	d002      	beq.n	24ea6 <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   24ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24ea4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   24ea6:	6879      	ldr	r1, [r7, #4]
   24ea8:	68b8      	ldr	r0, [r7, #8]
   24eaa:	f000 fa1d 	bl	252e8 <prvAddCurrentTaskToDelayedList>
	}
   24eae:	bf00      	nop
   24eb0:	3710      	adds	r7, #16
   24eb2:	46bd      	mov	sp, r7
   24eb4:	bd80      	pop	{r7, pc}
   24eb6:	bf00      	nop
   24eb8:	10043ea0 	.word	0x10043ea0

00024ebc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   24ebc:	b580      	push	{r7, lr}
   24ebe:	b084      	sub	sp, #16
   24ec0:	af00      	add	r7, sp, #0
   24ec2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24ec4:	687b      	ldr	r3, [r7, #4]
   24ec6:	68db      	ldr	r3, [r3, #12]
   24ec8:	68db      	ldr	r3, [r3, #12]
   24eca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   24ecc:	68bb      	ldr	r3, [r7, #8]
   24ece:	2b00      	cmp	r3, #0
   24ed0:	d100      	bne.n	24ed4 <xTaskRemoveFromEventList+0x18>
   24ed2:	e7fe      	b.n	24ed2 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   24ed4:	68bb      	ldr	r3, [r7, #8]
   24ed6:	3318      	adds	r3, #24
   24ed8:	4618      	mov	r0, r3
   24eda:	f7fe ff71 	bl	23dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   24ede:	4b1f      	ldr	r3, [pc, #124]	; (24f5c <xTaskRemoveFromEventList+0xa0>)
   24ee0:	681b      	ldr	r3, [r3, #0]
   24ee2:	2b00      	cmp	r3, #0
   24ee4:	d11d      	bne.n	24f22 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   24ee6:	68bb      	ldr	r3, [r7, #8]
   24ee8:	3304      	adds	r3, #4
   24eea:	4618      	mov	r0, r3
   24eec:	f7fe ff68 	bl	23dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   24ef0:	68bb      	ldr	r3, [r7, #8]
   24ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24ef4:	4b1a      	ldr	r3, [pc, #104]	; (24f60 <xTaskRemoveFromEventList+0xa4>)
   24ef6:	681b      	ldr	r3, [r3, #0]
   24ef8:	429a      	cmp	r2, r3
   24efa:	d903      	bls.n	24f04 <xTaskRemoveFromEventList+0x48>
   24efc:	68bb      	ldr	r3, [r7, #8]
   24efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24f00:	4a17      	ldr	r2, [pc, #92]	; (24f60 <xTaskRemoveFromEventList+0xa4>)
   24f02:	6013      	str	r3, [r2, #0]
   24f04:	68bb      	ldr	r3, [r7, #8]
   24f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24f08:	4613      	mov	r3, r2
   24f0a:	009b      	lsls	r3, r3, #2
   24f0c:	4413      	add	r3, r2
   24f0e:	009b      	lsls	r3, r3, #2
   24f10:	4a14      	ldr	r2, [pc, #80]	; (24f64 <xTaskRemoveFromEventList+0xa8>)
   24f12:	441a      	add	r2, r3
   24f14:	68bb      	ldr	r3, [r7, #8]
   24f16:	3304      	adds	r3, #4
   24f18:	4619      	mov	r1, r3
   24f1a:	4610      	mov	r0, r2
   24f1c:	f7fe fef3 	bl	23d06 <vListInsertEnd>
   24f20:	e005      	b.n	24f2e <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   24f22:	68bb      	ldr	r3, [r7, #8]
   24f24:	3318      	adds	r3, #24
   24f26:	4619      	mov	r1, r3
   24f28:	480f      	ldr	r0, [pc, #60]	; (24f68 <xTaskRemoveFromEventList+0xac>)
   24f2a:	f7fe feec 	bl	23d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   24f2e:	68bb      	ldr	r3, [r7, #8]
   24f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24f32:	4b0e      	ldr	r3, [pc, #56]	; (24f6c <xTaskRemoveFromEventList+0xb0>)
   24f34:	681b      	ldr	r3, [r3, #0]
   24f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24f38:	429a      	cmp	r2, r3
   24f3a:	d905      	bls.n	24f48 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   24f3c:	2301      	movs	r3, #1
   24f3e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   24f40:	4b0b      	ldr	r3, [pc, #44]	; (24f70 <xTaskRemoveFromEventList+0xb4>)
   24f42:	2201      	movs	r2, #1
   24f44:	601a      	str	r2, [r3, #0]
   24f46:	e001      	b.n	24f4c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   24f48:	2300      	movs	r3, #0
   24f4a:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   24f4c:	f000 f976 	bl	2523c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   24f50:	68fb      	ldr	r3, [r7, #12]
}
   24f52:	4618      	mov	r0, r3
   24f54:	3710      	adds	r7, #16
   24f56:	46bd      	mov	sp, r7
   24f58:	bd80      	pop	{r7, pc}
   24f5a:	bf00      	nop
   24f5c:	10043f74 	.word	0x10043f74
   24f60:	10043f54 	.word	0x10043f54
   24f64:	10043ea4 	.word	0x10043ea4
   24f68:	10043f24 	.word	0x10043f24
   24f6c:	10043ea0 	.word	0x10043ea0
   24f70:	10043f60 	.word	0x10043f60

00024f74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   24f74:	b580      	push	{r7, lr}
   24f76:	b084      	sub	sp, #16
   24f78:	af00      	add	r7, sp, #0
   24f7a:	6078      	str	r0, [r7, #4]
   24f7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   24f7e:	4b1f      	ldr	r3, [pc, #124]	; (24ffc <vTaskRemoveFromUnorderedEventList+0x88>)
   24f80:	681b      	ldr	r3, [r3, #0]
   24f82:	2b00      	cmp	r3, #0
   24f84:	d100      	bne.n	24f88 <vTaskRemoveFromUnorderedEventList+0x14>
   24f86:	e7fe      	b.n	24f86 <vTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   24f88:	683b      	ldr	r3, [r7, #0]
   24f8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   24f8e:	687b      	ldr	r3, [r7, #4]
   24f90:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   24f92:	687b      	ldr	r3, [r7, #4]
   24f94:	68db      	ldr	r3, [r3, #12]
   24f96:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
   24f98:	68fb      	ldr	r3, [r7, #12]
   24f9a:	2b00      	cmp	r3, #0
   24f9c:	d100      	bne.n	24fa0 <vTaskRemoveFromUnorderedEventList+0x2c>
   24f9e:	e7fe      	b.n	24f9e <vTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   24fa0:	6878      	ldr	r0, [r7, #4]
   24fa2:	f7fe ff0d 	bl	23dc0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   24fa6:	68fb      	ldr	r3, [r7, #12]
   24fa8:	3304      	adds	r3, #4
   24faa:	4618      	mov	r0, r3
   24fac:	f7fe ff08 	bl	23dc0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   24fb0:	68fb      	ldr	r3, [r7, #12]
   24fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24fb4:	4b12      	ldr	r3, [pc, #72]	; (25000 <vTaskRemoveFromUnorderedEventList+0x8c>)
   24fb6:	681b      	ldr	r3, [r3, #0]
   24fb8:	429a      	cmp	r2, r3
   24fba:	d903      	bls.n	24fc4 <vTaskRemoveFromUnorderedEventList+0x50>
   24fbc:	68fb      	ldr	r3, [r7, #12]
   24fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24fc0:	4a0f      	ldr	r2, [pc, #60]	; (25000 <vTaskRemoveFromUnorderedEventList+0x8c>)
   24fc2:	6013      	str	r3, [r2, #0]
   24fc4:	68fb      	ldr	r3, [r7, #12]
   24fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24fc8:	4613      	mov	r3, r2
   24fca:	009b      	lsls	r3, r3, #2
   24fcc:	4413      	add	r3, r2
   24fce:	009b      	lsls	r3, r3, #2
   24fd0:	4a0c      	ldr	r2, [pc, #48]	; (25004 <vTaskRemoveFromUnorderedEventList+0x90>)
   24fd2:	441a      	add	r2, r3
   24fd4:	68fb      	ldr	r3, [r7, #12]
   24fd6:	3304      	adds	r3, #4
   24fd8:	4619      	mov	r1, r3
   24fda:	4610      	mov	r0, r2
   24fdc:	f7fe fe93 	bl	23d06 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   24fe0:	68fb      	ldr	r3, [r7, #12]
   24fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   24fe4:	4b08      	ldr	r3, [pc, #32]	; (25008 <vTaskRemoveFromUnorderedEventList+0x94>)
   24fe6:	681b      	ldr	r3, [r3, #0]
   24fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   24fea:	429a      	cmp	r2, r3
   24fec:	d902      	bls.n	24ff4 <vTaskRemoveFromUnorderedEventList+0x80>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   24fee:	4b07      	ldr	r3, [pc, #28]	; (2500c <vTaskRemoveFromUnorderedEventList+0x98>)
   24ff0:	2201      	movs	r2, #1
   24ff2:	601a      	str	r2, [r3, #0]
	}
}
   24ff4:	bf00      	nop
   24ff6:	3710      	adds	r7, #16
   24ff8:	46bd      	mov	sp, r7
   24ffa:	bd80      	pop	{r7, pc}
   24ffc:	10043f74 	.word	0x10043f74
   25000:	10043f54 	.word	0x10043f54
   25004:	10043ea4 	.word	0x10043ea4
   25008:	10043ea0 	.word	0x10043ea0
   2500c:	10043f60 	.word	0x10043f60

00025010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   25010:	b480      	push	{r7}
   25012:	b083      	sub	sp, #12
   25014:	af00      	add	r7, sp, #0
   25016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   25018:	4b06      	ldr	r3, [pc, #24]	; (25034 <vTaskInternalSetTimeOutState+0x24>)
   2501a:	681a      	ldr	r2, [r3, #0]
   2501c:	687b      	ldr	r3, [r7, #4]
   2501e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   25020:	4b05      	ldr	r3, [pc, #20]	; (25038 <vTaskInternalSetTimeOutState+0x28>)
   25022:	681a      	ldr	r2, [r3, #0]
   25024:	687b      	ldr	r3, [r7, #4]
   25026:	605a      	str	r2, [r3, #4]
}
   25028:	bf00      	nop
   2502a:	370c      	adds	r7, #12
   2502c:	46bd      	mov	sp, r7
   2502e:	f85d 7b04 	ldr.w	r7, [sp], #4
   25032:	4770      	bx	lr
   25034:	10043f64 	.word	0x10043f64
   25038:	10043f50 	.word	0x10043f50

0002503c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   2503c:	b580      	push	{r7, lr}
   2503e:	b086      	sub	sp, #24
   25040:	af00      	add	r7, sp, #0
   25042:	6078      	str	r0, [r7, #4]
   25044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   25046:	687b      	ldr	r3, [r7, #4]
   25048:	2b00      	cmp	r3, #0
   2504a:	d100      	bne.n	2504e <xTaskCheckForTimeOut+0x12>
   2504c:	e7fe      	b.n	2504c <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   2504e:	683b      	ldr	r3, [r7, #0]
   25050:	2b00      	cmp	r3, #0
   25052:	d100      	bne.n	25056 <xTaskCheckForTimeOut+0x1a>
   25054:	e7fe      	b.n	25054 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   25056:	f7f4 fe3f 	bl	19cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   2505a:	4b1d      	ldr	r3, [pc, #116]	; (250d0 <xTaskCheckForTimeOut+0x94>)
   2505c:	681b      	ldr	r3, [r3, #0]
   2505e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   25060:	687b      	ldr	r3, [r7, #4]
   25062:	685b      	ldr	r3, [r3, #4]
   25064:	693a      	ldr	r2, [r7, #16]
   25066:	1ad3      	subs	r3, r2, r3
   25068:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   2506a:	683b      	ldr	r3, [r7, #0]
   2506c:	681b      	ldr	r3, [r3, #0]
   2506e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25072:	d102      	bne.n	2507a <xTaskCheckForTimeOut+0x3e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   25074:	2300      	movs	r3, #0
   25076:	617b      	str	r3, [r7, #20]
   25078:	e023      	b.n	250c2 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   2507a:	687b      	ldr	r3, [r7, #4]
   2507c:	681a      	ldr	r2, [r3, #0]
   2507e:	4b15      	ldr	r3, [pc, #84]	; (250d4 <xTaskCheckForTimeOut+0x98>)
   25080:	681b      	ldr	r3, [r3, #0]
   25082:	429a      	cmp	r2, r3
   25084:	d007      	beq.n	25096 <xTaskCheckForTimeOut+0x5a>
   25086:	687b      	ldr	r3, [r7, #4]
   25088:	685a      	ldr	r2, [r3, #4]
   2508a:	693b      	ldr	r3, [r7, #16]
   2508c:	429a      	cmp	r2, r3
   2508e:	d802      	bhi.n	25096 <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   25090:	2301      	movs	r3, #1
   25092:	617b      	str	r3, [r7, #20]
   25094:	e015      	b.n	250c2 <xTaskCheckForTimeOut+0x86>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   25096:	683b      	ldr	r3, [r7, #0]
   25098:	681a      	ldr	r2, [r3, #0]
   2509a:	68fb      	ldr	r3, [r7, #12]
   2509c:	429a      	cmp	r2, r3
   2509e:	d90b      	bls.n	250b8 <xTaskCheckForTimeOut+0x7c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   250a0:	683b      	ldr	r3, [r7, #0]
   250a2:	681a      	ldr	r2, [r3, #0]
   250a4:	68fb      	ldr	r3, [r7, #12]
   250a6:	1ad2      	subs	r2, r2, r3
   250a8:	683b      	ldr	r3, [r7, #0]
   250aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   250ac:	6878      	ldr	r0, [r7, #4]
   250ae:	f7ff ffaf 	bl	25010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   250b2:	2300      	movs	r3, #0
   250b4:	617b      	str	r3, [r7, #20]
   250b6:	e004      	b.n	250c2 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			*pxTicksToWait = 0;
   250b8:	683b      	ldr	r3, [r7, #0]
   250ba:	2200      	movs	r2, #0
   250bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   250be:	2301      	movs	r3, #1
   250c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   250c2:	f7f4 fe2f 	bl	19d24 <vPortExitCritical>

	return xReturn;
   250c6:	697b      	ldr	r3, [r7, #20]
}
   250c8:	4618      	mov	r0, r3
   250ca:	3718      	adds	r7, #24
   250cc:	46bd      	mov	sp, r7
   250ce:	bd80      	pop	{r7, pc}
   250d0:	10043f50 	.word	0x10043f50
   250d4:	10043f64 	.word	0x10043f64

000250d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   250d8:	b480      	push	{r7}
   250da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   250dc:	4b03      	ldr	r3, [pc, #12]	; (250ec <vTaskMissedYield+0x14>)
   250de:	2201      	movs	r2, #1
   250e0:	601a      	str	r2, [r3, #0]
}
   250e2:	bf00      	nop
   250e4:	46bd      	mov	sp, r7
   250e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   250ea:	4770      	bx	lr
   250ec:	10043f60 	.word	0x10043f60

000250f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   250f0:	b580      	push	{r7, lr}
   250f2:	b084      	sub	sp, #16
   250f4:	af00      	add	r7, sp, #0
   250f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   250f8:	f000 f898 	bl	2522c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   250fc:	4b13      	ldr	r3, [pc, #76]	; (2514c <prvIdleTask+0x5c>)
   250fe:	681b      	ldr	r3, [r3, #0]
   25100:	2b01      	cmp	r3, #1
   25102:	d907      	bls.n	25114 <prvIdleTask+0x24>
			{
				taskYIELD();
   25104:	4b12      	ldr	r3, [pc, #72]	; (25150 <prvIdleTask+0x60>)
   25106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2510a:	601a      	str	r2, [r3, #0]
   2510c:	f3bf 8f4f 	dsb	sy
   25110:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   25114:	f7ff fc5c 	bl	249d0 <prvGetExpectedIdleTime>
   25118:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   2511a:	68fb      	ldr	r3, [r7, #12]
   2511c:	2b01      	cmp	r3, #1
   2511e:	d9eb      	bls.n	250f8 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
   25120:	f7ff fc48 	bl	249b4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   25124:	4b0b      	ldr	r3, [pc, #44]	; (25154 <prvIdleTask+0x64>)
   25126:	681a      	ldr	r2, [r3, #0]
   25128:	4b0b      	ldr	r3, [pc, #44]	; (25158 <prvIdleTask+0x68>)
   2512a:	681b      	ldr	r3, [r3, #0]
   2512c:	429a      	cmp	r2, r3
   2512e:	d200      	bcs.n	25132 <prvIdleTask+0x42>
   25130:	e7fe      	b.n	25130 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   25132:	f7ff fc4d 	bl	249d0 <prvGetExpectedIdleTime>
   25136:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   25138:	68fb      	ldr	r3, [r7, #12]
   2513a:	2b01      	cmp	r3, #1
   2513c:	d902      	bls.n	25144 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   2513e:	68f8      	ldr	r0, [r7, #12]
   25140:	f7f4 fe98 	bl	19e74 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   25144:	f7ff fc7c 	bl	24a40 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   25148:	e7d6      	b.n	250f8 <prvIdleTask+0x8>
   2514a:	bf00      	nop
   2514c:	10043ea4 	.word	0x10043ea4
   25150:	e000ed04 	.word	0xe000ed04
   25154:	10043f6c 	.word	0x10043f6c
   25158:	10043f50 	.word	0x10043f50

0002515c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   2515c:	b480      	push	{r7}
   2515e:	b083      	sub	sp, #12
   25160:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   25162:	2301      	movs	r3, #1
   25164:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   25166:	2301      	movs	r3, #1
   25168:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   2516a:	4b0f      	ldr	r3, [pc, #60]	; (251a8 <eTaskConfirmSleepModeStatus+0x4c>)
   2516c:	681b      	ldr	r3, [r3, #0]
   2516e:	2b00      	cmp	r3, #0
   25170:	d002      	beq.n	25178 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   25172:	2300      	movs	r3, #0
   25174:	71fb      	strb	r3, [r7, #7]
   25176:	e010      	b.n	2519a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   25178:	4b0c      	ldr	r3, [pc, #48]	; (251ac <eTaskConfirmSleepModeStatus+0x50>)
   2517a:	681b      	ldr	r3, [r3, #0]
   2517c:	2b00      	cmp	r3, #0
   2517e:	d002      	beq.n	25186 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   25180:	2300      	movs	r3, #0
   25182:	71fb      	strb	r3, [r7, #7]
   25184:	e009      	b.n	2519a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   25186:	4b0a      	ldr	r3, [pc, #40]	; (251b0 <eTaskConfirmSleepModeStatus+0x54>)
   25188:	681a      	ldr	r2, [r3, #0]
   2518a:	4b0a      	ldr	r3, [pc, #40]	; (251b4 <eTaskConfirmSleepModeStatus+0x58>)
   2518c:	6819      	ldr	r1, [r3, #0]
   2518e:	683b      	ldr	r3, [r7, #0]
   25190:	1acb      	subs	r3, r1, r3
   25192:	429a      	cmp	r2, r3
   25194:	d101      	bne.n	2519a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   25196:	2302      	movs	r3, #2
   25198:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   2519a:	79fb      	ldrb	r3, [r7, #7]
	}
   2519c:	4618      	mov	r0, r3
   2519e:	370c      	adds	r7, #12
   251a0:	46bd      	mov	sp, r7
   251a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   251a6:	4770      	bx	lr
   251a8:	10043f24 	.word	0x10043f24
   251ac:	10043f60 	.word	0x10043f60
   251b0:	10043f38 	.word	0x10043f38
   251b4:	10043f4c 	.word	0x10043f4c

000251b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   251b8:	b580      	push	{r7, lr}
   251ba:	b082      	sub	sp, #8
   251bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   251be:	2300      	movs	r3, #0
   251c0:	607b      	str	r3, [r7, #4]
   251c2:	e00c      	b.n	251de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   251c4:	687a      	ldr	r2, [r7, #4]
   251c6:	4613      	mov	r3, r2
   251c8:	009b      	lsls	r3, r3, #2
   251ca:	4413      	add	r3, r2
   251cc:	009b      	lsls	r3, r3, #2
   251ce:	4a10      	ldr	r2, [pc, #64]	; (25210 <prvInitialiseTaskLists+0x58>)
   251d0:	4413      	add	r3, r2
   251d2:	4618      	mov	r0, r3
   251d4:	f7fe fd6a 	bl	23cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   251d8:	687b      	ldr	r3, [r7, #4]
   251da:	3301      	adds	r3, #1
   251dc:	607b      	str	r3, [r7, #4]
   251de:	687b      	ldr	r3, [r7, #4]
   251e0:	2b03      	cmp	r3, #3
   251e2:	d9ef      	bls.n	251c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   251e4:	480b      	ldr	r0, [pc, #44]	; (25214 <prvInitialiseTaskLists+0x5c>)
   251e6:	f7fe fd61 	bl	23cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   251ea:	480b      	ldr	r0, [pc, #44]	; (25218 <prvInitialiseTaskLists+0x60>)
   251ec:	f7fe fd5e 	bl	23cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
   251f0:	480a      	ldr	r0, [pc, #40]	; (2521c <prvInitialiseTaskLists+0x64>)
   251f2:	f7fe fd5b 	bl	23cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   251f6:	480a      	ldr	r0, [pc, #40]	; (25220 <prvInitialiseTaskLists+0x68>)
   251f8:	f7fe fd58 	bl	23cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   251fc:	4b09      	ldr	r3, [pc, #36]	; (25224 <prvInitialiseTaskLists+0x6c>)
   251fe:	4a05      	ldr	r2, [pc, #20]	; (25214 <prvInitialiseTaskLists+0x5c>)
   25200:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   25202:	4b09      	ldr	r3, [pc, #36]	; (25228 <prvInitialiseTaskLists+0x70>)
   25204:	4a04      	ldr	r2, [pc, #16]	; (25218 <prvInitialiseTaskLists+0x60>)
   25206:	601a      	str	r2, [r3, #0]
}
   25208:	bf00      	nop
   2520a:	3708      	adds	r7, #8
   2520c:	46bd      	mov	sp, r7
   2520e:	bd80      	pop	{r7, pc}
   25210:	10043ea4 	.word	0x10043ea4
   25214:	10043ef4 	.word	0x10043ef4
   25218:	10043f08 	.word	0x10043f08
   2521c:	10043f24 	.word	0x10043f24
   25220:	10043f38 	.word	0x10043f38
   25224:	10043f1c 	.word	0x10043f1c
   25228:	10043f20 	.word	0x10043f20

0002522c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   2522c:	b480      	push	{r7}
   2522e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   25230:	bf00      	nop
   25232:	46bd      	mov	sp, r7
   25234:	f85d 7b04 	ldr.w	r7, [sp], #4
   25238:	4770      	bx	lr
	...

0002523c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   2523c:	b480      	push	{r7}
   2523e:	b083      	sub	sp, #12
   25240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   25242:	4b0c      	ldr	r3, [pc, #48]	; (25274 <prvResetNextTaskUnblockTime+0x38>)
   25244:	681b      	ldr	r3, [r3, #0]
   25246:	681b      	ldr	r3, [r3, #0]
   25248:	2b00      	cmp	r3, #0
   2524a:	d104      	bne.n	25256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   2524c:	4b0a      	ldr	r3, [pc, #40]	; (25278 <prvResetNextTaskUnblockTime+0x3c>)
   2524e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   25254:	e008      	b.n	25268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   25256:	4b07      	ldr	r3, [pc, #28]	; (25274 <prvResetNextTaskUnblockTime+0x38>)
   25258:	681b      	ldr	r3, [r3, #0]
   2525a:	68db      	ldr	r3, [r3, #12]
   2525c:	68db      	ldr	r3, [r3, #12]
   2525e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   25260:	687b      	ldr	r3, [r7, #4]
   25262:	685b      	ldr	r3, [r3, #4]
   25264:	4a04      	ldr	r2, [pc, #16]	; (25278 <prvResetNextTaskUnblockTime+0x3c>)
   25266:	6013      	str	r3, [r2, #0]
}
   25268:	bf00      	nop
   2526a:	370c      	adds	r7, #12
   2526c:	46bd      	mov	sp, r7
   2526e:	f85d 7b04 	ldr.w	r7, [sp], #4
   25272:	4770      	bx	lr
   25274:	10043f1c 	.word	0x10043f1c
   25278:	10043f6c 	.word	0x10043f6c

0002527c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   2527c:	b480      	push	{r7}
   2527e:	b083      	sub	sp, #12
   25280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   25282:	4b0b      	ldr	r3, [pc, #44]	; (252b0 <xTaskGetSchedulerState+0x34>)
   25284:	681b      	ldr	r3, [r3, #0]
   25286:	2b00      	cmp	r3, #0
   25288:	d102      	bne.n	25290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   2528a:	2301      	movs	r3, #1
   2528c:	607b      	str	r3, [r7, #4]
   2528e:	e008      	b.n	252a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   25290:	4b08      	ldr	r3, [pc, #32]	; (252b4 <xTaskGetSchedulerState+0x38>)
   25292:	681b      	ldr	r3, [r3, #0]
   25294:	2b00      	cmp	r3, #0
   25296:	d102      	bne.n	2529e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   25298:	2302      	movs	r3, #2
   2529a:	607b      	str	r3, [r7, #4]
   2529c:	e001      	b.n	252a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   2529e:	2300      	movs	r3, #0
   252a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   252a2:	687b      	ldr	r3, [r7, #4]
	}
   252a4:	4618      	mov	r0, r3
   252a6:	370c      	adds	r7, #12
   252a8:	46bd      	mov	sp, r7
   252aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   252ae:	4770      	bx	lr
   252b0:	10043f58 	.word	0x10043f58
   252b4:	10043f74 	.word	0x10043f74

000252b8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   252b8:	b480      	push	{r7}
   252ba:	b083      	sub	sp, #12
   252bc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   252be:	4b09      	ldr	r3, [pc, #36]	; (252e4 <uxTaskResetEventItemValue+0x2c>)
   252c0:	681b      	ldr	r3, [r3, #0]
   252c2:	699b      	ldr	r3, [r3, #24]
   252c4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   252c6:	4b07      	ldr	r3, [pc, #28]	; (252e4 <uxTaskResetEventItemValue+0x2c>)
   252c8:	681b      	ldr	r3, [r3, #0]
   252ca:	4a06      	ldr	r2, [pc, #24]	; (252e4 <uxTaskResetEventItemValue+0x2c>)
   252cc:	6812      	ldr	r2, [r2, #0]
   252ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   252d0:	f1c2 0204 	rsb	r2, r2, #4
   252d4:	619a      	str	r2, [r3, #24]

	return uxReturn;
   252d6:	687b      	ldr	r3, [r7, #4]
}
   252d8:	4618      	mov	r0, r3
   252da:	370c      	adds	r7, #12
   252dc:	46bd      	mov	sp, r7
   252de:	f85d 7b04 	ldr.w	r7, [sp], #4
   252e2:	4770      	bx	lr
   252e4:	10043ea0 	.word	0x10043ea0

000252e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   252e8:	b580      	push	{r7, lr}
   252ea:	b084      	sub	sp, #16
   252ec:	af00      	add	r7, sp, #0
   252ee:	6078      	str	r0, [r7, #4]
   252f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   252f2:	4b21      	ldr	r3, [pc, #132]	; (25378 <prvAddCurrentTaskToDelayedList+0x90>)
   252f4:	681b      	ldr	r3, [r3, #0]
   252f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   252f8:	4b20      	ldr	r3, [pc, #128]	; (2537c <prvAddCurrentTaskToDelayedList+0x94>)
   252fa:	681b      	ldr	r3, [r3, #0]
   252fc:	3304      	adds	r3, #4
   252fe:	4618      	mov	r0, r3
   25300:	f7fe fd5e 	bl	23dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   25304:	687b      	ldr	r3, [r7, #4]
   25306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2530a:	d10a      	bne.n	25322 <prvAddCurrentTaskToDelayedList+0x3a>
   2530c:	683b      	ldr	r3, [r7, #0]
   2530e:	2b00      	cmp	r3, #0
   25310:	d007      	beq.n	25322 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   25312:	4b1a      	ldr	r3, [pc, #104]	; (2537c <prvAddCurrentTaskToDelayedList+0x94>)
   25314:	681b      	ldr	r3, [r3, #0]
   25316:	3304      	adds	r3, #4
   25318:	4619      	mov	r1, r3
   2531a:	4819      	ldr	r0, [pc, #100]	; (25380 <prvAddCurrentTaskToDelayedList+0x98>)
   2531c:	f7fe fcf3 	bl	23d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   25320:	e026      	b.n	25370 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   25322:	68fa      	ldr	r2, [r7, #12]
   25324:	687b      	ldr	r3, [r7, #4]
   25326:	4413      	add	r3, r2
   25328:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   2532a:	4b14      	ldr	r3, [pc, #80]	; (2537c <prvAddCurrentTaskToDelayedList+0x94>)
   2532c:	681b      	ldr	r3, [r3, #0]
   2532e:	68ba      	ldr	r2, [r7, #8]
   25330:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   25332:	68ba      	ldr	r2, [r7, #8]
   25334:	68fb      	ldr	r3, [r7, #12]
   25336:	429a      	cmp	r2, r3
   25338:	d209      	bcs.n	2534e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2533a:	4b12      	ldr	r3, [pc, #72]	; (25384 <prvAddCurrentTaskToDelayedList+0x9c>)
   2533c:	681a      	ldr	r2, [r3, #0]
   2533e:	4b0f      	ldr	r3, [pc, #60]	; (2537c <prvAddCurrentTaskToDelayedList+0x94>)
   25340:	681b      	ldr	r3, [r3, #0]
   25342:	3304      	adds	r3, #4
   25344:	4619      	mov	r1, r3
   25346:	4610      	mov	r0, r2
   25348:	f7fe fd01 	bl	23d4e <vListInsert>
}
   2534c:	e010      	b.n	25370 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   2534e:	4b0e      	ldr	r3, [pc, #56]	; (25388 <prvAddCurrentTaskToDelayedList+0xa0>)
   25350:	681a      	ldr	r2, [r3, #0]
   25352:	4b0a      	ldr	r3, [pc, #40]	; (2537c <prvAddCurrentTaskToDelayedList+0x94>)
   25354:	681b      	ldr	r3, [r3, #0]
   25356:	3304      	adds	r3, #4
   25358:	4619      	mov	r1, r3
   2535a:	4610      	mov	r0, r2
   2535c:	f7fe fcf7 	bl	23d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   25360:	4b0a      	ldr	r3, [pc, #40]	; (2538c <prvAddCurrentTaskToDelayedList+0xa4>)
   25362:	681b      	ldr	r3, [r3, #0]
   25364:	68ba      	ldr	r2, [r7, #8]
   25366:	429a      	cmp	r2, r3
   25368:	d202      	bcs.n	25370 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   2536a:	4a08      	ldr	r2, [pc, #32]	; (2538c <prvAddCurrentTaskToDelayedList+0xa4>)
   2536c:	68bb      	ldr	r3, [r7, #8]
   2536e:	6013      	str	r3, [r2, #0]
}
   25370:	bf00      	nop
   25372:	3710      	adds	r7, #16
   25374:	46bd      	mov	sp, r7
   25376:	bd80      	pop	{r7, pc}
   25378:	10043f50 	.word	0x10043f50
   2537c:	10043ea0 	.word	0x10043ea0
   25380:	10043f38 	.word	0x10043f38
   25384:	10043f20 	.word	0x10043f20
   25388:	10043f1c 	.word	0x10043f1c
   2538c:	10043f6c 	.word	0x10043f6c

00025390 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   25390:	b580      	push	{r7, lr}
   25392:	b084      	sub	sp, #16
   25394:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   25396:	2300      	movs	r3, #0
   25398:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   2539a:	f000 fab1 	bl	25900 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   2539e:	4b0c      	ldr	r3, [pc, #48]	; (253d0 <xTimerCreateTimerTask+0x40>)
   253a0:	681b      	ldr	r3, [r3, #0]
   253a2:	2b00      	cmp	r3, #0
   253a4:	d00b      	beq.n	253be <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   253a6:	4b0b      	ldr	r3, [pc, #44]	; (253d4 <xTimerCreateTimerTask+0x44>)
   253a8:	9301      	str	r3, [sp, #4]
   253aa:	2303      	movs	r3, #3
   253ac:	9300      	str	r3, [sp, #0]
   253ae:	2300      	movs	r3, #0
   253b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   253b4:	4908      	ldr	r1, [pc, #32]	; (253d8 <xTimerCreateTimerTask+0x48>)
   253b6:	4809      	ldr	r0, [pc, #36]	; (253dc <xTimerCreateTimerTask+0x4c>)
   253b8:	f7ff f924 	bl	24604 <xTaskCreate>
   253bc:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   253be:	687b      	ldr	r3, [r7, #4]
   253c0:	2b00      	cmp	r3, #0
   253c2:	d100      	bne.n	253c6 <xTimerCreateTimerTask+0x36>
   253c4:	e7fe      	b.n	253c4 <xTimerCreateTimerTask+0x34>
	return xReturn;
   253c6:	687b      	ldr	r3, [r7, #4]
}
   253c8:	4618      	mov	r0, r3
   253ca:	3708      	adds	r7, #8
   253cc:	46bd      	mov	sp, r7
   253ce:	bd80      	pop	{r7, pc}
   253d0:	10043fa8 	.word	0x10043fa8
   253d4:	10043fac 	.word	0x10043fac
   253d8:	0003b8ac 	.word	0x0003b8ac
   253dc:	00025561 	.word	0x00025561

000253e0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   253e0:	b580      	push	{r7, lr}
   253e2:	b088      	sub	sp, #32
   253e4:	af02      	add	r7, sp, #8
   253e6:	60f8      	str	r0, [r7, #12]
   253e8:	60b9      	str	r1, [r7, #8]
   253ea:	607a      	str	r2, [r7, #4]
   253ec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   253ee:	2028      	movs	r0, #40	; 0x28
   253f0:	f7fe fa00 	bl	237f4 <pvPortMalloc>
   253f4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   253f6:	697b      	ldr	r3, [r7, #20]
   253f8:	2b00      	cmp	r3, #0
   253fa:	d009      	beq.n	25410 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   253fc:	697b      	ldr	r3, [r7, #20]
   253fe:	9301      	str	r3, [sp, #4]
   25400:	6a3b      	ldr	r3, [r7, #32]
   25402:	9300      	str	r3, [sp, #0]
   25404:	683b      	ldr	r3, [r7, #0]
   25406:	687a      	ldr	r2, [r7, #4]
   25408:	68b9      	ldr	r1, [r7, #8]
   2540a:	68f8      	ldr	r0, [r7, #12]
   2540c:	f000 f805 	bl	2541a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   25410:	697b      	ldr	r3, [r7, #20]
	}
   25412:	4618      	mov	r0, r3
   25414:	3718      	adds	r7, #24
   25416:	46bd      	mov	sp, r7
   25418:	bd80      	pop	{r7, pc}

0002541a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   2541a:	b580      	push	{r7, lr}
   2541c:	b084      	sub	sp, #16
   2541e:	af00      	add	r7, sp, #0
   25420:	60f8      	str	r0, [r7, #12]
   25422:	60b9      	str	r1, [r7, #8]
   25424:	607a      	str	r2, [r7, #4]
   25426:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   25428:	68bb      	ldr	r3, [r7, #8]
   2542a:	2b00      	cmp	r3, #0
   2542c:	d100      	bne.n	25430 <prvInitialiseNewTimer+0x16>
   2542e:	e7fe      	b.n	2542e <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   25430:	69fb      	ldr	r3, [r7, #28]
   25432:	2b00      	cmp	r3, #0
   25434:	d015      	beq.n	25462 <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   25436:	f000 fa63 	bl	25900 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   2543a:	69fb      	ldr	r3, [r7, #28]
   2543c:	68fa      	ldr	r2, [r7, #12]
   2543e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   25440:	69fb      	ldr	r3, [r7, #28]
   25442:	68ba      	ldr	r2, [r7, #8]
   25444:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   25446:	69fb      	ldr	r3, [r7, #28]
   25448:	687a      	ldr	r2, [r7, #4]
   2544a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   2544c:	69fb      	ldr	r3, [r7, #28]
   2544e:	683a      	ldr	r2, [r7, #0]
   25450:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   25452:	69fb      	ldr	r3, [r7, #28]
   25454:	69ba      	ldr	r2, [r7, #24]
   25456:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   25458:	69fb      	ldr	r3, [r7, #28]
   2545a:	3304      	adds	r3, #4
   2545c:	4618      	mov	r0, r3
   2545e:	f7fe fc45 	bl	23cec <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   25462:	bf00      	nop
   25464:	3710      	adds	r7, #16
   25466:	46bd      	mov	sp, r7
   25468:	bd80      	pop	{r7, pc}
	...

0002546c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   2546c:	b580      	push	{r7, lr}
   2546e:	b08a      	sub	sp, #40	; 0x28
   25470:	af00      	add	r7, sp, #0
   25472:	60f8      	str	r0, [r7, #12]
   25474:	60b9      	str	r1, [r7, #8]
   25476:	607a      	str	r2, [r7, #4]
   25478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   2547a:	2300      	movs	r3, #0
   2547c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   2547e:	68fb      	ldr	r3, [r7, #12]
   25480:	2b00      	cmp	r3, #0
   25482:	d100      	bne.n	25486 <xTimerGenericCommand+0x1a>
   25484:	e7fe      	b.n	25484 <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   25486:	4b1a      	ldr	r3, [pc, #104]	; (254f0 <xTimerGenericCommand+0x84>)
   25488:	681b      	ldr	r3, [r3, #0]
   2548a:	2b00      	cmp	r3, #0
   2548c:	d02a      	beq.n	254e4 <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   2548e:	68bb      	ldr	r3, [r7, #8]
   25490:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   25492:	687b      	ldr	r3, [r7, #4]
   25494:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   25496:	68fb      	ldr	r3, [r7, #12]
   25498:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   2549a:	68bb      	ldr	r3, [r7, #8]
   2549c:	2b05      	cmp	r3, #5
   2549e:	dc18      	bgt.n	254d2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   254a0:	f7ff feec 	bl	2527c <xTaskGetSchedulerState>
   254a4:	4603      	mov	r3, r0
   254a6:	2b02      	cmp	r3, #2
   254a8:	d109      	bne.n	254be <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   254aa:	4b11      	ldr	r3, [pc, #68]	; (254f0 <xTimerGenericCommand+0x84>)
   254ac:	6818      	ldr	r0, [r3, #0]
   254ae:	f107 0114 	add.w	r1, r7, #20
   254b2:	2300      	movs	r3, #0
   254b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   254b6:	f7fe fd5d 	bl	23f74 <xQueueGenericSend>
   254ba:	6278      	str	r0, [r7, #36]	; 0x24
   254bc:	e012      	b.n	254e4 <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   254be:	4b0c      	ldr	r3, [pc, #48]	; (254f0 <xTimerGenericCommand+0x84>)
   254c0:	6818      	ldr	r0, [r3, #0]
   254c2:	f107 0114 	add.w	r1, r7, #20
   254c6:	2300      	movs	r3, #0
   254c8:	2200      	movs	r2, #0
   254ca:	f7fe fd53 	bl	23f74 <xQueueGenericSend>
   254ce:	6278      	str	r0, [r7, #36]	; 0x24
   254d0:	e008      	b.n	254e4 <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   254d2:	4b07      	ldr	r3, [pc, #28]	; (254f0 <xTimerGenericCommand+0x84>)
   254d4:	6818      	ldr	r0, [r3, #0]
   254d6:	f107 0114 	add.w	r1, r7, #20
   254da:	2300      	movs	r3, #0
   254dc:	683a      	ldr	r2, [r7, #0]
   254de:	f7fe fe1f 	bl	24120 <xQueueGenericSendFromISR>
   254e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   254e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   254e6:	4618      	mov	r0, r3
   254e8:	3728      	adds	r7, #40	; 0x28
   254ea:	46bd      	mov	sp, r7
   254ec:	bd80      	pop	{r7, pc}
   254ee:	bf00      	nop
   254f0:	10043fa8 	.word	0x10043fa8

000254f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   254f4:	b580      	push	{r7, lr}
   254f6:	b086      	sub	sp, #24
   254f8:	af02      	add	r7, sp, #8
   254fa:	6078      	str	r0, [r7, #4]
   254fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   254fe:	4b17      	ldr	r3, [pc, #92]	; (2555c <prvProcessExpiredTimer+0x68>)
   25500:	681b      	ldr	r3, [r3, #0]
   25502:	68db      	ldr	r3, [r3, #12]
   25504:	68db      	ldr	r3, [r3, #12]
   25506:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   25508:	68fb      	ldr	r3, [r7, #12]
   2550a:	3304      	adds	r3, #4
   2550c:	4618      	mov	r0, r3
   2550e:	f7fe fc57 	bl	23dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   25512:	68fb      	ldr	r3, [r7, #12]
   25514:	69db      	ldr	r3, [r3, #28]
   25516:	2b01      	cmp	r3, #1
   25518:	d118      	bne.n	2554c <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   2551a:	68fb      	ldr	r3, [r7, #12]
   2551c:	699a      	ldr	r2, [r3, #24]
   2551e:	687b      	ldr	r3, [r7, #4]
   25520:	18d1      	adds	r1, r2, r3
   25522:	687b      	ldr	r3, [r7, #4]
   25524:	683a      	ldr	r2, [r7, #0]
   25526:	68f8      	ldr	r0, [r7, #12]
   25528:	f000 f8be 	bl	256a8 <prvInsertTimerInActiveList>
   2552c:	4603      	mov	r3, r0
   2552e:	2b00      	cmp	r3, #0
   25530:	d00c      	beq.n	2554c <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   25532:	2300      	movs	r3, #0
   25534:	9300      	str	r3, [sp, #0]
   25536:	2300      	movs	r3, #0
   25538:	687a      	ldr	r2, [r7, #4]
   2553a:	2100      	movs	r1, #0
   2553c:	68f8      	ldr	r0, [r7, #12]
   2553e:	f7ff ff95 	bl	2546c <xTimerGenericCommand>
   25542:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   25544:	68bb      	ldr	r3, [r7, #8]
   25546:	2b00      	cmp	r3, #0
   25548:	d100      	bne.n	2554c <prvProcessExpiredTimer+0x58>
   2554a:	e7fe      	b.n	2554a <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2554c:	68fb      	ldr	r3, [r7, #12]
   2554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   25550:	68f8      	ldr	r0, [r7, #12]
   25552:	4798      	blx	r3
}
   25554:	bf00      	nop
   25556:	3710      	adds	r7, #16
   25558:	46bd      	mov	sp, r7
   2555a:	bd80      	pop	{r7, pc}
   2555c:	10043fa0 	.word	0x10043fa0

00025560 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   25560:	b580      	push	{r7, lr}
   25562:	b084      	sub	sp, #16
   25564:	af00      	add	r7, sp, #0
   25566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   25568:	f107 0308 	add.w	r3, r7, #8
   2556c:	4618      	mov	r0, r3
   2556e:	f000 f857 	bl	25620 <prvGetNextExpireTime>
   25572:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   25574:	68bb      	ldr	r3, [r7, #8]
   25576:	4619      	mov	r1, r3
   25578:	68f8      	ldr	r0, [r7, #12]
   2557a:	f000 f803 	bl	25584 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   2557e:	f000 f8d5 	bl	2572c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   25582:	e7f1      	b.n	25568 <prvTimerTask+0x8>

00025584 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   25584:	b580      	push	{r7, lr}
   25586:	b084      	sub	sp, #16
   25588:	af00      	add	r7, sp, #0
   2558a:	6078      	str	r0, [r7, #4]
   2558c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   2558e:	f7ff fa11 	bl	249b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   25592:	f107 0308 	add.w	r3, r7, #8
   25596:	4618      	mov	r0, r3
   25598:	f000 f866 	bl	25668 <prvSampleTimeNow>
   2559c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   2559e:	68bb      	ldr	r3, [r7, #8]
   255a0:	2b00      	cmp	r3, #0
   255a2:	d130      	bne.n	25606 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   255a4:	683b      	ldr	r3, [r7, #0]
   255a6:	2b00      	cmp	r3, #0
   255a8:	d10a      	bne.n	255c0 <prvProcessTimerOrBlockTask+0x3c>
   255aa:	687a      	ldr	r2, [r7, #4]
   255ac:	68fb      	ldr	r3, [r7, #12]
   255ae:	429a      	cmp	r2, r3
   255b0:	d806      	bhi.n	255c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   255b2:	f7ff fa45 	bl	24a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   255b6:	68f9      	ldr	r1, [r7, #12]
   255b8:	6878      	ldr	r0, [r7, #4]
   255ba:	f7ff ff9b 	bl	254f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   255be:	e024      	b.n	2560a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
   255c0:	683b      	ldr	r3, [r7, #0]
   255c2:	2b00      	cmp	r3, #0
   255c4:	d008      	beq.n	255d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   255c6:	4b13      	ldr	r3, [pc, #76]	; (25614 <prvProcessTimerOrBlockTask+0x90>)
   255c8:	681b      	ldr	r3, [r3, #0]
   255ca:	681b      	ldr	r3, [r3, #0]
   255cc:	2b00      	cmp	r3, #0
   255ce:	d101      	bne.n	255d4 <prvProcessTimerOrBlockTask+0x50>
   255d0:	2301      	movs	r3, #1
   255d2:	e000      	b.n	255d6 <prvProcessTimerOrBlockTask+0x52>
   255d4:	2300      	movs	r3, #0
   255d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   255d8:	4b0f      	ldr	r3, [pc, #60]	; (25618 <prvProcessTimerOrBlockTask+0x94>)
   255da:	6818      	ldr	r0, [r3, #0]
   255dc:	687a      	ldr	r2, [r7, #4]
   255de:	68fb      	ldr	r3, [r7, #12]
   255e0:	1ad3      	subs	r3, r2, r3
   255e2:	683a      	ldr	r2, [r7, #0]
   255e4:	4619      	mov	r1, r3
   255e6:	f7fe ffd9 	bl	2459c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   255ea:	f7ff fa29 	bl	24a40 <xTaskResumeAll>
   255ee:	4603      	mov	r3, r0
   255f0:	2b00      	cmp	r3, #0
   255f2:	d10a      	bne.n	2560a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
   255f4:	4b09      	ldr	r3, [pc, #36]	; (2561c <prvProcessTimerOrBlockTask+0x98>)
   255f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   255fa:	601a      	str	r2, [r3, #0]
   255fc:	f3bf 8f4f 	dsb	sy
   25600:	f3bf 8f6f 	isb	sy
}
   25604:	e001      	b.n	2560a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
   25606:	f7ff fa1b 	bl	24a40 <xTaskResumeAll>
}
   2560a:	bf00      	nop
   2560c:	3710      	adds	r7, #16
   2560e:	46bd      	mov	sp, r7
   25610:	bd80      	pop	{r7, pc}
   25612:	bf00      	nop
   25614:	10043fa4 	.word	0x10043fa4
   25618:	10043fa8 	.word	0x10043fa8
   2561c:	e000ed04 	.word	0xe000ed04

00025620 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   25620:	b480      	push	{r7}
   25622:	b085      	sub	sp, #20
   25624:	af00      	add	r7, sp, #0
   25626:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   25628:	4b0e      	ldr	r3, [pc, #56]	; (25664 <prvGetNextExpireTime+0x44>)
   2562a:	681b      	ldr	r3, [r3, #0]
   2562c:	681b      	ldr	r3, [r3, #0]
   2562e:	2b00      	cmp	r3, #0
   25630:	d101      	bne.n	25636 <prvGetNextExpireTime+0x16>
   25632:	2201      	movs	r2, #1
   25634:	e000      	b.n	25638 <prvGetNextExpireTime+0x18>
   25636:	2200      	movs	r2, #0
   25638:	687b      	ldr	r3, [r7, #4]
   2563a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   2563c:	687b      	ldr	r3, [r7, #4]
   2563e:	681b      	ldr	r3, [r3, #0]
   25640:	2b00      	cmp	r3, #0
   25642:	d105      	bne.n	25650 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   25644:	4b07      	ldr	r3, [pc, #28]	; (25664 <prvGetNextExpireTime+0x44>)
   25646:	681b      	ldr	r3, [r3, #0]
   25648:	68db      	ldr	r3, [r3, #12]
   2564a:	681b      	ldr	r3, [r3, #0]
   2564c:	60fb      	str	r3, [r7, #12]
   2564e:	e001      	b.n	25654 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   25650:	2300      	movs	r3, #0
   25652:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   25654:	68fb      	ldr	r3, [r7, #12]
}
   25656:	4618      	mov	r0, r3
   25658:	3714      	adds	r7, #20
   2565a:	46bd      	mov	sp, r7
   2565c:	f85d 7b04 	ldr.w	r7, [sp], #4
   25660:	4770      	bx	lr
   25662:	bf00      	nop
   25664:	10043fa0 	.word	0x10043fa0

00025668 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   25668:	b580      	push	{r7, lr}
   2566a:	b084      	sub	sp, #16
   2566c:	af00      	add	r7, sp, #0
   2566e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   25670:	f7ff fa7a 	bl	24b68 <xTaskGetTickCount>
   25674:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   25676:	4b0b      	ldr	r3, [pc, #44]	; (256a4 <prvSampleTimeNow+0x3c>)
   25678:	681b      	ldr	r3, [r3, #0]
   2567a:	68fa      	ldr	r2, [r7, #12]
   2567c:	429a      	cmp	r2, r3
   2567e:	d205      	bcs.n	2568c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   25680:	f000 f8e6 	bl	25850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   25684:	687b      	ldr	r3, [r7, #4]
   25686:	2201      	movs	r2, #1
   25688:	601a      	str	r2, [r3, #0]
   2568a:	e002      	b.n	25692 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   2568c:	687b      	ldr	r3, [r7, #4]
   2568e:	2200      	movs	r2, #0
   25690:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   25692:	4a04      	ldr	r2, [pc, #16]	; (256a4 <prvSampleTimeNow+0x3c>)
   25694:	68fb      	ldr	r3, [r7, #12]
   25696:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   25698:	68fb      	ldr	r3, [r7, #12]
}
   2569a:	4618      	mov	r0, r3
   2569c:	3710      	adds	r7, #16
   2569e:	46bd      	mov	sp, r7
   256a0:	bd80      	pop	{r7, pc}
   256a2:	bf00      	nop
   256a4:	10043fb0 	.word	0x10043fb0

000256a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   256a8:	b580      	push	{r7, lr}
   256aa:	b086      	sub	sp, #24
   256ac:	af00      	add	r7, sp, #0
   256ae:	60f8      	str	r0, [r7, #12]
   256b0:	60b9      	str	r1, [r7, #8]
   256b2:	607a      	str	r2, [r7, #4]
   256b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   256b6:	2300      	movs	r3, #0
   256b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   256ba:	68fb      	ldr	r3, [r7, #12]
   256bc:	68ba      	ldr	r2, [r7, #8]
   256be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   256c0:	68fb      	ldr	r3, [r7, #12]
   256c2:	68fa      	ldr	r2, [r7, #12]
   256c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   256c6:	68ba      	ldr	r2, [r7, #8]
   256c8:	687b      	ldr	r3, [r7, #4]
   256ca:	429a      	cmp	r2, r3
   256cc:	d812      	bhi.n	256f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   256ce:	687a      	ldr	r2, [r7, #4]
   256d0:	683b      	ldr	r3, [r7, #0]
   256d2:	1ad2      	subs	r2, r2, r3
   256d4:	68fb      	ldr	r3, [r7, #12]
   256d6:	699b      	ldr	r3, [r3, #24]
   256d8:	429a      	cmp	r2, r3
   256da:	d302      	bcc.n	256e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   256dc:	2301      	movs	r3, #1
   256de:	617b      	str	r3, [r7, #20]
   256e0:	e01b      	b.n	2571a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   256e2:	4b10      	ldr	r3, [pc, #64]	; (25724 <prvInsertTimerInActiveList+0x7c>)
   256e4:	681a      	ldr	r2, [r3, #0]
   256e6:	68fb      	ldr	r3, [r7, #12]
   256e8:	3304      	adds	r3, #4
   256ea:	4619      	mov	r1, r3
   256ec:	4610      	mov	r0, r2
   256ee:	f7fe fb2e 	bl	23d4e <vListInsert>
   256f2:	e012      	b.n	2571a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   256f4:	687a      	ldr	r2, [r7, #4]
   256f6:	683b      	ldr	r3, [r7, #0]
   256f8:	429a      	cmp	r2, r3
   256fa:	d206      	bcs.n	2570a <prvInsertTimerInActiveList+0x62>
   256fc:	68ba      	ldr	r2, [r7, #8]
   256fe:	683b      	ldr	r3, [r7, #0]
   25700:	429a      	cmp	r2, r3
   25702:	d302      	bcc.n	2570a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   25704:	2301      	movs	r3, #1
   25706:	617b      	str	r3, [r7, #20]
   25708:	e007      	b.n	2571a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   2570a:	4b07      	ldr	r3, [pc, #28]	; (25728 <prvInsertTimerInActiveList+0x80>)
   2570c:	681a      	ldr	r2, [r3, #0]
   2570e:	68fb      	ldr	r3, [r7, #12]
   25710:	3304      	adds	r3, #4
   25712:	4619      	mov	r1, r3
   25714:	4610      	mov	r0, r2
   25716:	f7fe fb1a 	bl	23d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
   2571a:	697b      	ldr	r3, [r7, #20]
}
   2571c:	4618      	mov	r0, r3
   2571e:	3718      	adds	r7, #24
   25720:	46bd      	mov	sp, r7
   25722:	bd80      	pop	{r7, pc}
   25724:	10043fa4 	.word	0x10043fa4
   25728:	10043fa0 	.word	0x10043fa0

0002572c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   2572c:	b580      	push	{r7, lr}
   2572e:	b08c      	sub	sp, #48	; 0x30
   25730:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   25732:	e07a      	b.n	2582a <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   25734:	68bb      	ldr	r3, [r7, #8]
   25736:	2b00      	cmp	r3, #0
   25738:	da0f      	bge.n	2575a <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   2573a:	f107 0308 	add.w	r3, r7, #8
   2573e:	3304      	adds	r3, #4
   25740:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   25742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25744:	2b00      	cmp	r3, #0
   25746:	d100      	bne.n	2574a <prvProcessReceivedCommands+0x1e>
   25748:	e7fe      	b.n	25748 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   2574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2574c:	681b      	ldr	r3, [r3, #0]
   2574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25750:	6850      	ldr	r0, [r2, #4]
   25752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25754:	6892      	ldr	r2, [r2, #8]
   25756:	4611      	mov	r1, r2
   25758:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   2575a:	68bb      	ldr	r3, [r7, #8]
   2575c:	2b00      	cmp	r3, #0
   2575e:	db64      	blt.n	2582a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   25760:	693b      	ldr	r3, [r7, #16]
   25762:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   25764:	6a3b      	ldr	r3, [r7, #32]
   25766:	695b      	ldr	r3, [r3, #20]
   25768:	2b00      	cmp	r3, #0
   2576a:	d004      	beq.n	25776 <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2576c:	6a3b      	ldr	r3, [r7, #32]
   2576e:	3304      	adds	r3, #4
   25770:	4618      	mov	r0, r3
   25772:	f7fe fb25 	bl	23dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   25776:	1d3b      	adds	r3, r7, #4
   25778:	4618      	mov	r0, r3
   2577a:	f7ff ff75 	bl	25668 <prvSampleTimeNow>
   2577e:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   25780:	68bb      	ldr	r3, [r7, #8]
   25782:	2b09      	cmp	r3, #9
   25784:	d850      	bhi.n	25828 <prvProcessReceivedCommands+0xfc>
   25786:	a201      	add	r2, pc, #4	; (adr r2, 2578c <prvProcessReceivedCommands+0x60>)
   25788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2578c:	000257b5 	.word	0x000257b5
   25790:	000257b5 	.word	0x000257b5
   25794:	000257b5 	.word	0x000257b5
   25798:	0002582b 	.word	0x0002582b
   2579c:	000257fd 	.word	0x000257fd
   257a0:	00025821 	.word	0x00025821
   257a4:	000257b5 	.word	0x000257b5
   257a8:	000257b5 	.word	0x000257b5
   257ac:	0002582b 	.word	0x0002582b
   257b0:	000257fd 	.word	0x000257fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   257b4:	68fa      	ldr	r2, [r7, #12]
   257b6:	6a3b      	ldr	r3, [r7, #32]
   257b8:	699b      	ldr	r3, [r3, #24]
   257ba:	18d1      	adds	r1, r2, r3
   257bc:	68fb      	ldr	r3, [r7, #12]
   257be:	69fa      	ldr	r2, [r7, #28]
   257c0:	6a38      	ldr	r0, [r7, #32]
   257c2:	f7ff ff71 	bl	256a8 <prvInsertTimerInActiveList>
   257c6:	4603      	mov	r3, r0
   257c8:	2b00      	cmp	r3, #0
   257ca:	d02e      	beq.n	2582a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   257cc:	6a3b      	ldr	r3, [r7, #32]
   257ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   257d0:	6a38      	ldr	r0, [r7, #32]
   257d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   257d4:	6a3b      	ldr	r3, [r7, #32]
   257d6:	69db      	ldr	r3, [r3, #28]
   257d8:	2b01      	cmp	r3, #1
   257da:	d126      	bne.n	2582a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   257dc:	68fa      	ldr	r2, [r7, #12]
   257de:	6a3b      	ldr	r3, [r7, #32]
   257e0:	699b      	ldr	r3, [r3, #24]
   257e2:	441a      	add	r2, r3
   257e4:	2300      	movs	r3, #0
   257e6:	9300      	str	r3, [sp, #0]
   257e8:	2300      	movs	r3, #0
   257ea:	2100      	movs	r1, #0
   257ec:	6a38      	ldr	r0, [r7, #32]
   257ee:	f7ff fe3d 	bl	2546c <xTimerGenericCommand>
   257f2:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   257f4:	69bb      	ldr	r3, [r7, #24]
   257f6:	2b00      	cmp	r3, #0
   257f8:	d117      	bne.n	2582a <prvProcessReceivedCommands+0xfe>
   257fa:	e7fe      	b.n	257fa <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   257fc:	68fa      	ldr	r2, [r7, #12]
   257fe:	6a3b      	ldr	r3, [r7, #32]
   25800:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   25802:	6a3b      	ldr	r3, [r7, #32]
   25804:	699b      	ldr	r3, [r3, #24]
   25806:	2b00      	cmp	r3, #0
   25808:	d100      	bne.n	2580c <prvProcessReceivedCommands+0xe0>
   2580a:	e7fe      	b.n	2580a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   2580c:	6a3b      	ldr	r3, [r7, #32]
   2580e:	699a      	ldr	r2, [r3, #24]
   25810:	69fb      	ldr	r3, [r7, #28]
   25812:	18d1      	adds	r1, r2, r3
   25814:	69fb      	ldr	r3, [r7, #28]
   25816:	69fa      	ldr	r2, [r7, #28]
   25818:	6a38      	ldr	r0, [r7, #32]
   2581a:	f7ff ff45 	bl	256a8 <prvInsertTimerInActiveList>
					break;
   2581e:	e004      	b.n	2582a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   25820:	6a38      	ldr	r0, [r7, #32]
   25822:	f7fe f87b 	bl	2391c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   25826:	e000      	b.n	2582a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
   25828:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   2582a:	4b08      	ldr	r3, [pc, #32]	; (2584c <prvProcessReceivedCommands+0x120>)
   2582c:	681b      	ldr	r3, [r3, #0]
   2582e:	f107 0108 	add.w	r1, r7, #8
   25832:	2200      	movs	r2, #0
   25834:	4618      	mov	r0, r3
   25836:	f7fe fced 	bl	24214 <xQueueReceive>
   2583a:	4603      	mov	r3, r0
   2583c:	2b00      	cmp	r3, #0
   2583e:	f47f af79 	bne.w	25734 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   25842:	bf00      	nop
   25844:	3728      	adds	r7, #40	; 0x28
   25846:	46bd      	mov	sp, r7
   25848:	bd80      	pop	{r7, pc}
   2584a:	bf00      	nop
   2584c:	10043fa8 	.word	0x10043fa8

00025850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   25850:	b580      	push	{r7, lr}
   25852:	b088      	sub	sp, #32
   25854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   25856:	e03b      	b.n	258d0 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   25858:	4b27      	ldr	r3, [pc, #156]	; (258f8 <prvSwitchTimerLists+0xa8>)
   2585a:	681b      	ldr	r3, [r3, #0]
   2585c:	68db      	ldr	r3, [r3, #12]
   2585e:	681b      	ldr	r3, [r3, #0]
   25860:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   25862:	4b25      	ldr	r3, [pc, #148]	; (258f8 <prvSwitchTimerLists+0xa8>)
   25864:	681b      	ldr	r3, [r3, #0]
   25866:	68db      	ldr	r3, [r3, #12]
   25868:	68db      	ldr	r3, [r3, #12]
   2586a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   2586c:	693b      	ldr	r3, [r7, #16]
   2586e:	3304      	adds	r3, #4
   25870:	4618      	mov	r0, r3
   25872:	f7fe faa5 	bl	23dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   25876:	693b      	ldr	r3, [r7, #16]
   25878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2587a:	6938      	ldr	r0, [r7, #16]
   2587c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2587e:	693b      	ldr	r3, [r7, #16]
   25880:	69db      	ldr	r3, [r3, #28]
   25882:	2b01      	cmp	r3, #1
   25884:	d124      	bne.n	258d0 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   25886:	693b      	ldr	r3, [r7, #16]
   25888:	699a      	ldr	r2, [r3, #24]
   2588a:	697b      	ldr	r3, [r7, #20]
   2588c:	4413      	add	r3, r2
   2588e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   25890:	68fa      	ldr	r2, [r7, #12]
   25892:	697b      	ldr	r3, [r7, #20]
   25894:	429a      	cmp	r2, r3
   25896:	d90e      	bls.n	258b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   25898:	693b      	ldr	r3, [r7, #16]
   2589a:	68fa      	ldr	r2, [r7, #12]
   2589c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   2589e:	693b      	ldr	r3, [r7, #16]
   258a0:	693a      	ldr	r2, [r7, #16]
   258a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   258a4:	4b14      	ldr	r3, [pc, #80]	; (258f8 <prvSwitchTimerLists+0xa8>)
   258a6:	681a      	ldr	r2, [r3, #0]
   258a8:	693b      	ldr	r3, [r7, #16]
   258aa:	3304      	adds	r3, #4
   258ac:	4619      	mov	r1, r3
   258ae:	4610      	mov	r0, r2
   258b0:	f7fe fa4d 	bl	23d4e <vListInsert>
   258b4:	e00c      	b.n	258d0 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   258b6:	2300      	movs	r3, #0
   258b8:	9300      	str	r3, [sp, #0]
   258ba:	2300      	movs	r3, #0
   258bc:	697a      	ldr	r2, [r7, #20]
   258be:	2100      	movs	r1, #0
   258c0:	6938      	ldr	r0, [r7, #16]
   258c2:	f7ff fdd3 	bl	2546c <xTimerGenericCommand>
   258c6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   258c8:	68bb      	ldr	r3, [r7, #8]
   258ca:	2b00      	cmp	r3, #0
   258cc:	d100      	bne.n	258d0 <prvSwitchTimerLists+0x80>
   258ce:	e7fe      	b.n	258ce <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   258d0:	4b09      	ldr	r3, [pc, #36]	; (258f8 <prvSwitchTimerLists+0xa8>)
   258d2:	681b      	ldr	r3, [r3, #0]
   258d4:	681b      	ldr	r3, [r3, #0]
   258d6:	2b00      	cmp	r3, #0
   258d8:	d1be      	bne.n	25858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   258da:	4b07      	ldr	r3, [pc, #28]	; (258f8 <prvSwitchTimerLists+0xa8>)
   258dc:	681b      	ldr	r3, [r3, #0]
   258de:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   258e0:	4b06      	ldr	r3, [pc, #24]	; (258fc <prvSwitchTimerLists+0xac>)
   258e2:	681b      	ldr	r3, [r3, #0]
   258e4:	4a04      	ldr	r2, [pc, #16]	; (258f8 <prvSwitchTimerLists+0xa8>)
   258e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   258e8:	4a04      	ldr	r2, [pc, #16]	; (258fc <prvSwitchTimerLists+0xac>)
   258ea:	687b      	ldr	r3, [r7, #4]
   258ec:	6013      	str	r3, [r2, #0]
}
   258ee:	bf00      	nop
   258f0:	3718      	adds	r7, #24
   258f2:	46bd      	mov	sp, r7
   258f4:	bd80      	pop	{r7, pc}
   258f6:	bf00      	nop
   258f8:	10043fa0 	.word	0x10043fa0
   258fc:	10043fa4 	.word	0x10043fa4

00025900 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   25900:	b580      	push	{r7, lr}
   25902:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   25904:	f7f4 f9e8 	bl	19cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   25908:	4b0d      	ldr	r3, [pc, #52]	; (25940 <prvCheckForValidListAndQueue+0x40>)
   2590a:	681b      	ldr	r3, [r3, #0]
   2590c:	2b00      	cmp	r3, #0
   2590e:	d113      	bne.n	25938 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   25910:	480c      	ldr	r0, [pc, #48]	; (25944 <prvCheckForValidListAndQueue+0x44>)
   25912:	f7fe f9cb 	bl	23cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   25916:	480c      	ldr	r0, [pc, #48]	; (25948 <prvCheckForValidListAndQueue+0x48>)
   25918:	f7fe f9c8 	bl	23cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   2591c:	4b0b      	ldr	r3, [pc, #44]	; (2594c <prvCheckForValidListAndQueue+0x4c>)
   2591e:	4a09      	ldr	r2, [pc, #36]	; (25944 <prvCheckForValidListAndQueue+0x44>)
   25920:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   25922:	4b0b      	ldr	r3, [pc, #44]	; (25950 <prvCheckForValidListAndQueue+0x50>)
   25924:	4a08      	ldr	r2, [pc, #32]	; (25948 <prvCheckForValidListAndQueue+0x48>)
   25926:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   25928:	2200      	movs	r2, #0
   2592a:	2110      	movs	r1, #16
   2592c:	2005      	movs	r0, #5
   2592e:	f7fe facf 	bl	23ed0 <xQueueGenericCreate>
   25932:	4602      	mov	r2, r0
   25934:	4b02      	ldr	r3, [pc, #8]	; (25940 <prvCheckForValidListAndQueue+0x40>)
   25936:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   25938:	f7f4 f9f4 	bl	19d24 <vPortExitCritical>
}
   2593c:	bf00      	nop
   2593e:	bd80      	pop	{r7, pc}
   25940:	10043fa8 	.word	0x10043fa8
   25944:	10043f78 	.word	0x10043f78
   25948:	10043f8c 	.word	0x10043f8c
   2594c:	10043fa0 	.word	0x10043fa0
   25950:	10043fa4 	.word	0x10043fa4

00025954 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   25954:	b580      	push	{r7, lr}
   25956:	b08a      	sub	sp, #40	; 0x28
   25958:	af00      	add	r7, sp, #0
   2595a:	60f8      	str	r0, [r7, #12]
   2595c:	60b9      	str	r1, [r7, #8]
   2595e:	607a      	str	r2, [r7, #4]
   25960:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   25962:	f06f 0301 	mvn.w	r3, #1
   25966:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   25968:	68fb      	ldr	r3, [r7, #12]
   2596a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   2596c:	68bb      	ldr	r3, [r7, #8]
   2596e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   25970:	687b      	ldr	r3, [r7, #4]
   25972:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   25974:	4b06      	ldr	r3, [pc, #24]	; (25990 <xTimerPendFunctionCallFromISR+0x3c>)
   25976:	6818      	ldr	r0, [r3, #0]
   25978:	f107 0114 	add.w	r1, r7, #20
   2597c:	2300      	movs	r3, #0
   2597e:	683a      	ldr	r2, [r7, #0]
   25980:	f7fe fbce 	bl	24120 <xQueueGenericSendFromISR>
   25984:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   25986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   25988:	4618      	mov	r0, r3
   2598a:	3728      	adds	r7, #40	; 0x28
   2598c:	46bd      	mov	sp, r7
   2598e:	bd80      	pop	{r7, pc}
   25990:	10043fa8 	.word	0x10043fa8

00025994 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   25994:	4811      	ldr	r0, [pc, #68]	; (259dc <zero_loop+0x12>)
   25996:	4912      	ldr	r1, [pc, #72]	; (259e0 <zero_loop+0x16>)
   25998:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   2599a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   2599e:	4811      	ldr	r0, [pc, #68]	; (259e4 <zero_loop+0x1a>)
   259a0:	6801      	ldr	r1, [r0, #0]
   259a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   259a6:	6001      	str	r1, [r0, #0]
   259a8:	f3bf 8f4f 	dsb	sy
   259ac:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   259b0:	480d      	ldr	r0, [pc, #52]	; (259e8 <zero_loop+0x1e>)
   259b2:	490e      	ldr	r1, [pc, #56]	; (259ec <zero_loop+0x22>)
   259b4:	4a0e      	ldr	r2, [pc, #56]	; (259f0 <zero_loop+0x26>)

000259b6 <copy_loop>:
   259b6:	f850 3b04 	ldr.w	r3, [r0], #4
   259ba:	f841 3b04 	str.w	r3, [r1], #4
   259be:	4291      	cmp	r1, r2
   259c0:	dbf9      	blt.n	259b6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   259c2:	480c      	ldr	r0, [pc, #48]	; (259f4 <zero_loop+0x2a>)
   259c4:	490c      	ldr	r1, [pc, #48]	; (259f8 <zero_loop+0x2e>)
   259c6:	f04f 0200 	mov.w	r2, #0

000259ca <zero_loop>:
   259ca:	4288      	cmp	r0, r1
   259cc:	bfb8      	it	lt
   259ce:	f840 2b04 	strlt.w	r2, [r0], #4
   259d2:	dbfa      	blt.n	259ca <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   259d4:	f7fa fa5a 	bl	1fe8c <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   259d8:	be00      	bkpt	0x0000
}
   259da:	bf00      	nop
   259dc:	e000ed08 	.word	0xe000ed08
   259e0:	0000c000 	.word	0x0000c000
   259e4:	e000ed88 	.word	0xe000ed88
   259e8:	00044ff8 	.word	0x00044ff8
   259ec:	10002b00 	.word	0x10002b00
   259f0:	10018c60 	.word	0x10018c60
   259f4:	10018c60 	.word	0x10018c60
   259f8:	1004cc10 	.word	0x1004cc10

000259fc <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   259fc:	b480      	push	{r7}
   259fe:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   25a00:	e7fe      	b.n	25a00 <NMI_Handler+0x4>

00025a02 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   25a02:	b480      	push	{r7}
   25a04:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   25a06:	e7fe      	b.n	25a06 <BusFault_Handler+0x4>

00025a08 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   25a08:	b480      	push	{r7}
   25a0a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   25a0c:	e7fe      	b.n	25a0c <DebugMon_Handler+0x4>
	...

00025a10 <uECC_vli_sub>:
   25a10:	f1c3 0308 	rsb	r3, r3, #8
   25a14:	00db      	lsls	r3, r3, #3
   25a16:	b470      	push	{r4, r5, r6}
   25a18:	3301      	adds	r3, #1
   25a1a:	2400      	movs	r4, #0
   25a1c:	a503      	add	r5, pc, #12	; (adr r5, 25a2c <uECC_vli_sub+0x1c>)
   25a1e:	bf00      	nop
   25a20:	195b      	adds	r3, r3, r5
   25a22:	c920      	ldmia	r1!, {r5}
   25a24:	ca40      	ldmia	r2!, {r6}
   25a26:	1bad      	subs	r5, r5, r6
   25a28:	c020      	stmia	r0!, {r5}
   25a2a:	4718      	bx	r3
   25a2c:	c920      	ldmia	r1!, {r5}
   25a2e:	ca40      	ldmia	r2!, {r6}
   25a30:	41b5      	sbcs	r5, r6
   25a32:	c020      	stmia	r0!, {r5}
   25a34:	c920      	ldmia	r1!, {r5}
   25a36:	ca40      	ldmia	r2!, {r6}
   25a38:	41b5      	sbcs	r5, r6
   25a3a:	c020      	stmia	r0!, {r5}
   25a3c:	c920      	ldmia	r1!, {r5}
   25a3e:	ca40      	ldmia	r2!, {r6}
   25a40:	41b5      	sbcs	r5, r6
   25a42:	c020      	stmia	r0!, {r5}
   25a44:	c920      	ldmia	r1!, {r5}
   25a46:	ca40      	ldmia	r2!, {r6}
   25a48:	41b5      	sbcs	r5, r6
   25a4a:	c020      	stmia	r0!, {r5}
   25a4c:	c920      	ldmia	r1!, {r5}
   25a4e:	ca40      	ldmia	r2!, {r6}
   25a50:	41b5      	sbcs	r5, r6
   25a52:	c020      	stmia	r0!, {r5}
   25a54:	c920      	ldmia	r1!, {r5}
   25a56:	ca40      	ldmia	r2!, {r6}
   25a58:	41b5      	sbcs	r5, r6
   25a5a:	c020      	stmia	r0!, {r5}
   25a5c:	c920      	ldmia	r1!, {r5}
   25a5e:	ca40      	ldmia	r2!, {r6}
   25a60:	41b5      	sbcs	r5, r6
   25a62:	c020      	stmia	r0!, {r5}
   25a64:	4164      	adcs	r4, r4
   25a66:	fab4 f084 	clz	r0, r4
   25a6a:	0940      	lsrs	r0, r0, #5
   25a6c:	bc70      	pop	{r4, r5, r6}
   25a6e:	4770      	bx	lr

00025a70 <uECC_vli_mult>:
   25a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a74:	b408      	push	{r3}
   25a76:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   25a78:	b404      	push	{r2}
   25a7a:	f851 2b04 	ldr.w	r2, [r1], #4
   25a7e:	fba3 8902 	umull	r8, r9, r3, r2
   25a82:	f840 8b04 	str.w	r8, [r0], #4
   25a86:	f04f 0a00 	mov.w	sl, #0
   25a8a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   25a8e:	f04f 0b00 	mov.w	fp, #0
   25a92:	fbe5 ab62 	umaal	sl, fp, r5, r2
   25a96:	f04f 0c00 	mov.w	ip, #0
   25a9a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   25a9e:	f04f 0e00 	mov.w	lr, #0
   25aa2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   25aa6:	f851 2b04 	ldr.w	r2, [r1], #4
   25aaa:	f04f 0800 	mov.w	r8, #0
   25aae:	fbe3 8962 	umaal	r8, r9, r3, r2
   25ab2:	f840 8b04 	str.w	r8, [r0], #4
   25ab6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   25aba:	fbe5 ab62 	umaal	sl, fp, r5, r2
   25abe:	fbe6 bc62 	umaal	fp, ip, r6, r2
   25ac2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   25ac6:	f851 2b04 	ldr.w	r2, [r1], #4
   25aca:	f04f 0800 	mov.w	r8, #0
   25ace:	fbe3 8962 	umaal	r8, r9, r3, r2
   25ad2:	f840 8b04 	str.w	r8, [r0], #4
   25ad6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   25ada:	fbe5 ab62 	umaal	sl, fp, r5, r2
   25ade:	fbe6 bc62 	umaal	fp, ip, r6, r2
   25ae2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   25ae6:	f851 2b04 	ldr.w	r2, [r1], #4
   25aea:	f04f 0800 	mov.w	r8, #0
   25aee:	fbe3 8962 	umaal	r8, r9, r3, r2
   25af2:	f840 8b04 	str.w	r8, [r0], #4
   25af6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   25afa:	fbe5 ab62 	umaal	sl, fp, r5, r2
   25afe:	fbe6 bc62 	umaal	fp, ip, r6, r2
   25b02:	fbe7 ce62 	umaal	ip, lr, r7, r2
   25b06:	f851 2b04 	ldr.w	r2, [r1], #4
   25b0a:	f04f 0800 	mov.w	r8, #0
   25b0e:	fbe3 8962 	umaal	r8, r9, r3, r2
   25b12:	f840 8b04 	str.w	r8, [r0], #4
   25b16:	fbe4 9a62 	umaal	r9, sl, r4, r2
   25b1a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   25b1e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   25b22:	fbe7 ce62 	umaal	ip, lr, r7, r2
   25b26:	f840 9b04 	str.w	r9, [r0], #4
   25b2a:	f840 ab04 	str.w	sl, [r0], #4
   25b2e:	f840 bb04 	str.w	fp, [r0], #4
   25b32:	f840 cb04 	str.w	ip, [r0], #4
   25b36:	f840 eb04 	str.w	lr, [r0], #4
   25b3a:	bc0c      	pop	{r2, r3}
   25b3c:	2b05      	cmp	r3, #5
   25b3e:	f000 811e 	beq.w	25d7e <uECC_vli_mult+0x30e>
   25b42:	680c      	ldr	r4, [r1, #0]
   25b44:	f1a0 0014 	sub.w	r0, r0, #20
   25b48:	f1a1 0114 	sub.w	r1, r1, #20
   25b4c:	f1a2 0214 	sub.w	r2, r2, #20
   25b50:	f852 eb04 	ldr.w	lr, [r2], #4
   25b54:	f04f 0500 	mov.w	r5, #0
   25b58:	f850 6b04 	ldr.w	r6, [r0], #4
   25b5c:	fbe4 566e 	umaal	r5, r6, r4, lr
   25b60:	f852 eb04 	ldr.w	lr, [r2], #4
   25b64:	f850 7b04 	ldr.w	r7, [r0], #4
   25b68:	fbe4 676e 	umaal	r6, r7, r4, lr
   25b6c:	f852 eb04 	ldr.w	lr, [r2], #4
   25b70:	f850 8b04 	ldr.w	r8, [r0], #4
   25b74:	fbe4 786e 	umaal	r7, r8, r4, lr
   25b78:	f852 eb04 	ldr.w	lr, [r2], #4
   25b7c:	f850 9b04 	ldr.w	r9, [r0], #4
   25b80:	fbe4 896e 	umaal	r8, r9, r4, lr
   25b84:	f852 eb04 	ldr.w	lr, [r2], #4
   25b88:	f850 ab04 	ldr.w	sl, [r0], #4
   25b8c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25b90:	f1a0 0014 	sub.w	r0, r0, #20
   25b94:	f852 4b04 	ldr.w	r4, [r2], #4
   25b98:	f851 eb04 	ldr.w	lr, [r1], #4
   25b9c:	f04f 0c00 	mov.w	ip, #0
   25ba0:	fbe4 c56e 	umaal	ip, r5, r4, lr
   25ba4:	f840 cb04 	str.w	ip, [r0], #4
   25ba8:	f851 eb04 	ldr.w	lr, [r1], #4
   25bac:	fbe4 566e 	umaal	r5, r6, r4, lr
   25bb0:	f840 5b04 	str.w	r5, [r0], #4
   25bb4:	f851 eb04 	ldr.w	lr, [r1], #4
   25bb8:	fbe4 676e 	umaal	r6, r7, r4, lr
   25bbc:	f840 6b04 	str.w	r6, [r0], #4
   25bc0:	f851 eb04 	ldr.w	lr, [r1], #4
   25bc4:	fbe4 786e 	umaal	r7, r8, r4, lr
   25bc8:	f840 7b04 	str.w	r7, [r0], #4
   25bcc:	f851 eb04 	ldr.w	lr, [r1], #4
   25bd0:	fbe4 896e 	umaal	r8, r9, r4, lr
   25bd4:	f840 8b04 	str.w	r8, [r0], #4
   25bd8:	f851 eb04 	ldr.w	lr, [r1], #4
   25bdc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25be0:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   25be4:	2b06      	cmp	r3, #6
   25be6:	f000 80ca 	beq.w	25d7e <uECC_vli_mult+0x30e>
   25bea:	680c      	ldr	r4, [r1, #0]
   25bec:	f1a0 0018 	sub.w	r0, r0, #24
   25bf0:	f1a1 0118 	sub.w	r1, r1, #24
   25bf4:	f1a2 0218 	sub.w	r2, r2, #24
   25bf8:	f852 eb04 	ldr.w	lr, [r2], #4
   25bfc:	f04f 0500 	mov.w	r5, #0
   25c00:	f850 6b04 	ldr.w	r6, [r0], #4
   25c04:	fbe4 566e 	umaal	r5, r6, r4, lr
   25c08:	f852 eb04 	ldr.w	lr, [r2], #4
   25c0c:	f850 7b04 	ldr.w	r7, [r0], #4
   25c10:	fbe4 676e 	umaal	r6, r7, r4, lr
   25c14:	f852 eb04 	ldr.w	lr, [r2], #4
   25c18:	f850 8b04 	ldr.w	r8, [r0], #4
   25c1c:	fbe4 786e 	umaal	r7, r8, r4, lr
   25c20:	f852 eb04 	ldr.w	lr, [r2], #4
   25c24:	f850 9b04 	ldr.w	r9, [r0], #4
   25c28:	fbe4 896e 	umaal	r8, r9, r4, lr
   25c2c:	f852 eb04 	ldr.w	lr, [r2], #4
   25c30:	f850 ab04 	ldr.w	sl, [r0], #4
   25c34:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25c38:	f852 eb04 	ldr.w	lr, [r2], #4
   25c3c:	f850 bb04 	ldr.w	fp, [r0], #4
   25c40:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   25c44:	f1a0 0018 	sub.w	r0, r0, #24
   25c48:	f852 4b04 	ldr.w	r4, [r2], #4
   25c4c:	f851 eb04 	ldr.w	lr, [r1], #4
   25c50:	f04f 0c00 	mov.w	ip, #0
   25c54:	fbe4 c56e 	umaal	ip, r5, r4, lr
   25c58:	f840 cb04 	str.w	ip, [r0], #4
   25c5c:	f851 eb04 	ldr.w	lr, [r1], #4
   25c60:	fbe4 566e 	umaal	r5, r6, r4, lr
   25c64:	f840 5b04 	str.w	r5, [r0], #4
   25c68:	f851 eb04 	ldr.w	lr, [r1], #4
   25c6c:	fbe4 676e 	umaal	r6, r7, r4, lr
   25c70:	f840 6b04 	str.w	r6, [r0], #4
   25c74:	f851 eb04 	ldr.w	lr, [r1], #4
   25c78:	fbe4 786e 	umaal	r7, r8, r4, lr
   25c7c:	f840 7b04 	str.w	r7, [r0], #4
   25c80:	f851 eb04 	ldr.w	lr, [r1], #4
   25c84:	fbe4 896e 	umaal	r8, r9, r4, lr
   25c88:	f840 8b04 	str.w	r8, [r0], #4
   25c8c:	f851 eb04 	ldr.w	lr, [r1], #4
   25c90:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25c94:	f840 9b04 	str.w	r9, [r0], #4
   25c98:	f851 eb04 	ldr.w	lr, [r1], #4
   25c9c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   25ca0:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   25ca4:	2b07      	cmp	r3, #7
   25ca6:	d06a      	beq.n	25d7e <uECC_vli_mult+0x30e>
   25ca8:	b408      	push	{r3}
   25caa:	680c      	ldr	r4, [r1, #0]
   25cac:	f1a0 001c 	sub.w	r0, r0, #28
   25cb0:	f1a1 011c 	sub.w	r1, r1, #28
   25cb4:	f1a2 021c 	sub.w	r2, r2, #28
   25cb8:	f852 eb04 	ldr.w	lr, [r2], #4
   25cbc:	f04f 0500 	mov.w	r5, #0
   25cc0:	f850 6b04 	ldr.w	r6, [r0], #4
   25cc4:	fbe4 566e 	umaal	r5, r6, r4, lr
   25cc8:	f852 eb04 	ldr.w	lr, [r2], #4
   25ccc:	f850 7b04 	ldr.w	r7, [r0], #4
   25cd0:	fbe4 676e 	umaal	r6, r7, r4, lr
   25cd4:	f852 eb04 	ldr.w	lr, [r2], #4
   25cd8:	f850 8b04 	ldr.w	r8, [r0], #4
   25cdc:	fbe4 786e 	umaal	r7, r8, r4, lr
   25ce0:	f852 eb04 	ldr.w	lr, [r2], #4
   25ce4:	f850 9b04 	ldr.w	r9, [r0], #4
   25ce8:	fbe4 896e 	umaal	r8, r9, r4, lr
   25cec:	f852 eb04 	ldr.w	lr, [r2], #4
   25cf0:	f850 ab04 	ldr.w	sl, [r0], #4
   25cf4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25cf8:	f852 eb04 	ldr.w	lr, [r2], #4
   25cfc:	f850 bb04 	ldr.w	fp, [r0], #4
   25d00:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   25d04:	f852 eb04 	ldr.w	lr, [r2], #4
   25d08:	f850 cb04 	ldr.w	ip, [r0], #4
   25d0c:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   25d10:	f1a0 001c 	sub.w	r0, r0, #28
   25d14:	f852 4b04 	ldr.w	r4, [r2], #4
   25d18:	f851 eb04 	ldr.w	lr, [r1], #4
   25d1c:	f04f 0300 	mov.w	r3, #0
   25d20:	fbe4 356e 	umaal	r3, r5, r4, lr
   25d24:	f840 3b04 	str.w	r3, [r0], #4
   25d28:	f851 eb04 	ldr.w	lr, [r1], #4
   25d2c:	fbe4 566e 	umaal	r5, r6, r4, lr
   25d30:	f840 5b04 	str.w	r5, [r0], #4
   25d34:	f851 eb04 	ldr.w	lr, [r1], #4
   25d38:	fbe4 676e 	umaal	r6, r7, r4, lr
   25d3c:	f840 6b04 	str.w	r6, [r0], #4
   25d40:	f851 eb04 	ldr.w	lr, [r1], #4
   25d44:	fbe4 786e 	umaal	r7, r8, r4, lr
   25d48:	f840 7b04 	str.w	r7, [r0], #4
   25d4c:	f851 eb04 	ldr.w	lr, [r1], #4
   25d50:	fbe4 896e 	umaal	r8, r9, r4, lr
   25d54:	f840 8b04 	str.w	r8, [r0], #4
   25d58:	f851 eb04 	ldr.w	lr, [r1], #4
   25d5c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   25d60:	f840 9b04 	str.w	r9, [r0], #4
   25d64:	f851 eb04 	ldr.w	lr, [r1], #4
   25d68:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   25d6c:	f840 ab04 	str.w	sl, [r0], #4
   25d70:	f851 eb04 	ldr.w	lr, [r1], #4
   25d74:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   25d78:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   25d7c:	bc08      	pop	{r3}
   25d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d82:	bf00      	nop
	...

00025d90 <uECC_vli_modAdd>:
   25d90:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d92:	f99d c014 	ldrsb.w	ip, [sp, #20]
   25d96:	f1cc 0408 	rsb	r4, ip, #8
   25d9a:	00e4      	lsls	r4, r4, #3
   25d9c:	3401      	adds	r4, #1
   25d9e:	469e      	mov	lr, r3
   25da0:	4623      	mov	r3, r4
   25da2:	4604      	mov	r4, r0
   25da4:	2700      	movs	r7, #0
   25da6:	a505      	add	r5, pc, #20	; (adr r5, 25dbc <uECC_vli_modAdd+0x2c>)
   25da8:	f3af 8000 	nop.w
   25dac:	f3af 8000 	nop.w
   25db0:	195b      	adds	r3, r3, r5
   25db2:	c920      	ldmia	r1!, {r5}
   25db4:	ca40      	ldmia	r2!, {r6}
   25db6:	19ad      	adds	r5, r5, r6
   25db8:	c420      	stmia	r4!, {r5}
   25dba:	4718      	bx	r3
   25dbc:	c920      	ldmia	r1!, {r5}
   25dbe:	ca40      	ldmia	r2!, {r6}
   25dc0:	4175      	adcs	r5, r6
   25dc2:	c420      	stmia	r4!, {r5}
   25dc4:	c920      	ldmia	r1!, {r5}
   25dc6:	ca40      	ldmia	r2!, {r6}
   25dc8:	4175      	adcs	r5, r6
   25dca:	c420      	stmia	r4!, {r5}
   25dcc:	c920      	ldmia	r1!, {r5}
   25dce:	ca40      	ldmia	r2!, {r6}
   25dd0:	4175      	adcs	r5, r6
   25dd2:	c420      	stmia	r4!, {r5}
   25dd4:	c920      	ldmia	r1!, {r5}
   25dd6:	ca40      	ldmia	r2!, {r6}
   25dd8:	4175      	adcs	r5, r6
   25dda:	c420      	stmia	r4!, {r5}
   25ddc:	c920      	ldmia	r1!, {r5}
   25dde:	ca40      	ldmia	r2!, {r6}
   25de0:	4175      	adcs	r5, r6
   25de2:	c420      	stmia	r4!, {r5}
   25de4:	c920      	ldmia	r1!, {r5}
   25de6:	ca40      	ldmia	r2!, {r6}
   25de8:	4175      	adcs	r5, r6
   25dea:	c420      	stmia	r4!, {r5}
   25dec:	c920      	ldmia	r1!, {r5}
   25dee:	ca40      	ldmia	r2!, {r6}
   25df0:	4175      	adcs	r5, r6
   25df2:	c420      	stmia	r4!, {r5}
   25df4:	417f      	adcs	r7, r7
   25df6:	b9c7      	cbnz	r7, 25e2a <uECC_vli_modAdd+0x9a>
   25df8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   25dfc:	b25b      	sxtb	r3, r3
   25dfe:	2b00      	cmp	r3, #0
   25e00:	db13      	blt.n	25e2a <uECC_vli_modAdd+0x9a>
   25e02:	b21a      	sxth	r2, r3
   25e04:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   25e08:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   25e0c:	4291      	cmp	r1, r2
   25e0e:	d80b      	bhi.n	25e28 <uECC_vli_modAdd+0x98>
   25e10:	d30b      	bcc.n	25e2a <uECC_vli_modAdd+0x9a>
   25e12:	3b01      	subs	r3, #1
   25e14:	b25b      	sxtb	r3, r3
   25e16:	1c59      	adds	r1, r3, #1
   25e18:	b21a      	sxth	r2, r3
   25e1a:	d006      	beq.n	25e2a <uECC_vli_modAdd+0x9a>
   25e1c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   25e20:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   25e24:	4291      	cmp	r1, r2
   25e26:	d9f3      	bls.n	25e10 <uECC_vli_modAdd+0x80>
   25e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25e2a:	4672      	mov	r2, lr
   25e2c:	4663      	mov	r3, ip
   25e2e:	4601      	mov	r1, r0
   25e30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25e34:	f7ff bdec 	b.w	25a10 <uECC_vli_sub>
	...

00025e40 <uECC_vli_modSub>:
   25e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e42:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   25e46:	f1c4 0408 	rsb	r4, r4, #8
   25e4a:	00e4      	lsls	r4, r4, #3
   25e4c:	1c66      	adds	r6, r4, #1
   25e4e:	4686      	mov	lr, r0
   25e50:	469c      	mov	ip, r3
   25e52:	4635      	mov	r5, r6
   25e54:	4604      	mov	r4, r0
   25e56:	2700      	movs	r7, #0
   25e58:	a304      	add	r3, pc, #16	; (adr r3, 25e6c <uECC_vli_modSub+0x2c>)
   25e5a:	bf00      	nop
   25e5c:	f3af 8000 	nop.w
   25e60:	18ed      	adds	r5, r5, r3
   25e62:	c908      	ldmia	r1!, {r3}
   25e64:	ca01      	ldmia	r2!, {r0}
   25e66:	1a1b      	subs	r3, r3, r0
   25e68:	c408      	stmia	r4!, {r3}
   25e6a:	4728      	bx	r5
   25e6c:	c908      	ldmia	r1!, {r3}
   25e6e:	ca01      	ldmia	r2!, {r0}
   25e70:	4183      	sbcs	r3, r0
   25e72:	c408      	stmia	r4!, {r3}
   25e74:	c908      	ldmia	r1!, {r3}
   25e76:	ca01      	ldmia	r2!, {r0}
   25e78:	4183      	sbcs	r3, r0
   25e7a:	c408      	stmia	r4!, {r3}
   25e7c:	c908      	ldmia	r1!, {r3}
   25e7e:	ca01      	ldmia	r2!, {r0}
   25e80:	4183      	sbcs	r3, r0
   25e82:	c408      	stmia	r4!, {r3}
   25e84:	c908      	ldmia	r1!, {r3}
   25e86:	ca01      	ldmia	r2!, {r0}
   25e88:	4183      	sbcs	r3, r0
   25e8a:	c408      	stmia	r4!, {r3}
   25e8c:	c908      	ldmia	r1!, {r3}
   25e8e:	ca01      	ldmia	r2!, {r0}
   25e90:	4183      	sbcs	r3, r0
   25e92:	c408      	stmia	r4!, {r3}
   25e94:	c908      	ldmia	r1!, {r3}
   25e96:	ca01      	ldmia	r2!, {r0}
   25e98:	4183      	sbcs	r3, r0
   25e9a:	c408      	stmia	r4!, {r3}
   25e9c:	c908      	ldmia	r1!, {r3}
   25e9e:	ca01      	ldmia	r2!, {r0}
   25ea0:	4183      	sbcs	r3, r0
   25ea2:	c408      	stmia	r4!, {r3}
   25ea4:	417f      	adcs	r7, r7
   25ea6:	2f00      	cmp	r7, #0
   25ea8:	d12d      	bne.n	25f06 <uECC_vli_modSub+0xc6>
   25eaa:	4670      	mov	r0, lr
   25eac:	4663      	mov	r3, ip
   25eae:	4634      	mov	r4, r6
   25eb0:	4672      	mov	r2, lr
   25eb2:	2100      	movs	r1, #0
   25eb4:	a505      	add	r5, pc, #20	; (adr r5, 25ecc <uECC_vli_modSub+0x8c>)
   25eb6:	bf00      	nop
   25eb8:	f3af 8000 	nop.w
   25ebc:	f3af 8000 	nop.w
   25ec0:	1964      	adds	r4, r4, r5
   25ec2:	ca20      	ldmia	r2!, {r5}
   25ec4:	cb40      	ldmia	r3!, {r6}
   25ec6:	19ad      	adds	r5, r5, r6
   25ec8:	c020      	stmia	r0!, {r5}
   25eca:	4720      	bx	r4
   25ecc:	ca20      	ldmia	r2!, {r5}
   25ece:	cb40      	ldmia	r3!, {r6}
   25ed0:	4175      	adcs	r5, r6
   25ed2:	c020      	stmia	r0!, {r5}
   25ed4:	ca20      	ldmia	r2!, {r5}
   25ed6:	cb40      	ldmia	r3!, {r6}
   25ed8:	4175      	adcs	r5, r6
   25eda:	c020      	stmia	r0!, {r5}
   25edc:	ca20      	ldmia	r2!, {r5}
   25ede:	cb40      	ldmia	r3!, {r6}
   25ee0:	4175      	adcs	r5, r6
   25ee2:	c020      	stmia	r0!, {r5}
   25ee4:	ca20      	ldmia	r2!, {r5}
   25ee6:	cb40      	ldmia	r3!, {r6}
   25ee8:	4175      	adcs	r5, r6
   25eea:	c020      	stmia	r0!, {r5}
   25eec:	ca20      	ldmia	r2!, {r5}
   25eee:	cb40      	ldmia	r3!, {r6}
   25ef0:	4175      	adcs	r5, r6
   25ef2:	c020      	stmia	r0!, {r5}
   25ef4:	ca20      	ldmia	r2!, {r5}
   25ef6:	cb40      	ldmia	r3!, {r6}
   25ef8:	4175      	adcs	r5, r6
   25efa:	c020      	stmia	r0!, {r5}
   25efc:	ca20      	ldmia	r2!, {r5}
   25efe:	cb40      	ldmia	r3!, {r6}
   25f00:	4175      	adcs	r5, r6
   25f02:	c020      	stmia	r0!, {r5}
   25f04:	4149      	adcs	r1, r1
   25f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00025f10 <x_side_default>:
   25f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f14:	4693      	mov	fp, r2
   25f16:	b09b      	sub	sp, #108	; 0x6c
   25f18:	4604      	mov	r4, r0
   25f1a:	4689      	mov	r9, r1
   25f1c:	a802      	add	r0, sp, #8
   25f1e:	2220      	movs	r2, #32
   25f20:	2100      	movs	r1, #0
   25f22:	f7e6 fa1b 	bl	c35c <memset>
   25f26:	f99b 3000 	ldrsb.w	r3, [fp]
   25f2a:	9301      	str	r3, [sp, #4]
   25f2c:	464a      	mov	r2, r9
   25f2e:	4649      	mov	r1, r9
   25f30:	a80a      	add	r0, sp, #40	; 0x28
   25f32:	2503      	movs	r5, #3
   25f34:	461e      	mov	r6, r3
   25f36:	9502      	str	r5, [sp, #8]
   25f38:	f7ff fd9a 	bl	25a70 <uECC_vli_mult>
   25f3c:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   25f40:	a90a      	add	r1, sp, #40	; 0x28
   25f42:	4620      	mov	r0, r4
   25f44:	4798      	blx	r3
   25f46:	f1c6 0108 	rsb	r1, r6, #8
   25f4a:	40a9      	lsls	r1, r5
   25f4c:	f101 0801 	add.w	r8, r1, #1
   25f50:	aa02      	add	r2, sp, #8
   25f52:	4641      	mov	r1, r8
   25f54:	f10b 0a04 	add.w	sl, fp, #4
   25f58:	4623      	mov	r3, r4
   25f5a:	4626      	mov	r6, r4
   25f5c:	2000      	movs	r0, #0
   25f5e:	a703      	add	r7, pc, #12	; (adr r7, 25f6c <x_side_default+0x5c>)
   25f60:	19c9      	adds	r1, r1, r7
   25f62:	ce80      	ldmia	r6!, {r7}
   25f64:	ca20      	ldmia	r2!, {r5}
   25f66:	1b7f      	subs	r7, r7, r5
   25f68:	c380      	stmia	r3!, {r7}
   25f6a:	4708      	bx	r1
   25f6c:	ce80      	ldmia	r6!, {r7}
   25f6e:	ca20      	ldmia	r2!, {r5}
   25f70:	41af      	sbcs	r7, r5
   25f72:	c380      	stmia	r3!, {r7}
   25f74:	ce80      	ldmia	r6!, {r7}
   25f76:	ca20      	ldmia	r2!, {r5}
   25f78:	41af      	sbcs	r7, r5
   25f7a:	c380      	stmia	r3!, {r7}
   25f7c:	ce80      	ldmia	r6!, {r7}
   25f7e:	ca20      	ldmia	r2!, {r5}
   25f80:	41af      	sbcs	r7, r5
   25f82:	c380      	stmia	r3!, {r7}
   25f84:	ce80      	ldmia	r6!, {r7}
   25f86:	ca20      	ldmia	r2!, {r5}
   25f88:	41af      	sbcs	r7, r5
   25f8a:	c380      	stmia	r3!, {r7}
   25f8c:	ce80      	ldmia	r6!, {r7}
   25f8e:	ca20      	ldmia	r2!, {r5}
   25f90:	41af      	sbcs	r7, r5
   25f92:	c380      	stmia	r3!, {r7}
   25f94:	ce80      	ldmia	r6!, {r7}
   25f96:	ca20      	ldmia	r2!, {r5}
   25f98:	41af      	sbcs	r7, r5
   25f9a:	c380      	stmia	r3!, {r7}
   25f9c:	ce80      	ldmia	r6!, {r7}
   25f9e:	ca20      	ldmia	r2!, {r5}
   25fa0:	41af      	sbcs	r7, r5
   25fa2:	c380      	stmia	r3!, {r7}
   25fa4:	4140      	adcs	r0, r0
   25fa6:	2800      	cmp	r0, #0
   25fa8:	d12d      	bne.n	26006 <x_side_default+0xf6>
   25faa:	4623      	mov	r3, r4
   25fac:	4652      	mov	r2, sl
   25fae:	4641      	mov	r1, r8
   25fb0:	4620      	mov	r0, r4
   25fb2:	2500      	movs	r5, #0
   25fb4:	a605      	add	r6, pc, #20	; (adr r6, 25fcc <x_side_default+0xbc>)
   25fb6:	bf00      	nop
   25fb8:	f3af 8000 	nop.w
   25fbc:	f3af 8000 	nop.w
   25fc0:	1989      	adds	r1, r1, r6
   25fc2:	c840      	ldmia	r0!, {r6}
   25fc4:	ca80      	ldmia	r2!, {r7}
   25fc6:	19f6      	adds	r6, r6, r7
   25fc8:	c340      	stmia	r3!, {r6}
   25fca:	4708      	bx	r1
   25fcc:	c840      	ldmia	r0!, {r6}
   25fce:	ca80      	ldmia	r2!, {r7}
   25fd0:	417e      	adcs	r6, r7
   25fd2:	c340      	stmia	r3!, {r6}
   25fd4:	c840      	ldmia	r0!, {r6}
   25fd6:	ca80      	ldmia	r2!, {r7}
   25fd8:	417e      	adcs	r6, r7
   25fda:	c340      	stmia	r3!, {r6}
   25fdc:	c840      	ldmia	r0!, {r6}
   25fde:	ca80      	ldmia	r2!, {r7}
   25fe0:	417e      	adcs	r6, r7
   25fe2:	c340      	stmia	r3!, {r6}
   25fe4:	c840      	ldmia	r0!, {r6}
   25fe6:	ca80      	ldmia	r2!, {r7}
   25fe8:	417e      	adcs	r6, r7
   25fea:	c340      	stmia	r3!, {r6}
   25fec:	c840      	ldmia	r0!, {r6}
   25fee:	ca80      	ldmia	r2!, {r7}
   25ff0:	417e      	adcs	r6, r7
   25ff2:	c340      	stmia	r3!, {r6}
   25ff4:	c840      	ldmia	r0!, {r6}
   25ff6:	ca80      	ldmia	r2!, {r7}
   25ff8:	417e      	adcs	r6, r7
   25ffa:	c340      	stmia	r3!, {r6}
   25ffc:	c840      	ldmia	r0!, {r6}
   25ffe:	ca80      	ldmia	r2!, {r7}
   26000:	417e      	adcs	r6, r7
   26002:	c340      	stmia	r3!, {r6}
   26004:	416d      	adcs	r5, r5
   26006:	464a      	mov	r2, r9
   26008:	f99b 3000 	ldrsb.w	r3, [fp]
   2600c:	4621      	mov	r1, r4
   2600e:	a80a      	add	r0, sp, #40	; 0x28
   26010:	f7ff fd2e 	bl	25a70 <uECC_vli_mult>
   26014:	a90a      	add	r1, sp, #40	; 0x28
   26016:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   2601a:	4620      	mov	r0, r4
   2601c:	4798      	blx	r3
   2601e:	4626      	mov	r6, r4
   26020:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   26024:	4641      	mov	r1, r8
   26026:	4622      	mov	r2, r4
   26028:	2000      	movs	r0, #0
   2602a:	a504      	add	r5, pc, #16	; (adr r5, 2603c <x_side_default+0x12c>)
   2602c:	f3af 8000 	nop.w
   26030:	1949      	adds	r1, r1, r5
   26032:	ce20      	ldmia	r6!, {r5}
   26034:	cb80      	ldmia	r3!, {r7}
   26036:	19ed      	adds	r5, r5, r7
   26038:	c220      	stmia	r2!, {r5}
   2603a:	4708      	bx	r1
   2603c:	ce20      	ldmia	r6!, {r5}
   2603e:	cb80      	ldmia	r3!, {r7}
   26040:	417d      	adcs	r5, r7
   26042:	c220      	stmia	r2!, {r5}
   26044:	ce20      	ldmia	r6!, {r5}
   26046:	cb80      	ldmia	r3!, {r7}
   26048:	417d      	adcs	r5, r7
   2604a:	c220      	stmia	r2!, {r5}
   2604c:	ce20      	ldmia	r6!, {r5}
   2604e:	cb80      	ldmia	r3!, {r7}
   26050:	417d      	adcs	r5, r7
   26052:	c220      	stmia	r2!, {r5}
   26054:	ce20      	ldmia	r6!, {r5}
   26056:	cb80      	ldmia	r3!, {r7}
   26058:	417d      	adcs	r5, r7
   2605a:	c220      	stmia	r2!, {r5}
   2605c:	ce20      	ldmia	r6!, {r5}
   2605e:	cb80      	ldmia	r3!, {r7}
   26060:	417d      	adcs	r5, r7
   26062:	c220      	stmia	r2!, {r5}
   26064:	ce20      	ldmia	r6!, {r5}
   26066:	cb80      	ldmia	r3!, {r7}
   26068:	417d      	adcs	r5, r7
   2606a:	c220      	stmia	r2!, {r5}
   2606c:	ce20      	ldmia	r6!, {r5}
   2606e:	cb80      	ldmia	r3!, {r7}
   26070:	417d      	adcs	r5, r7
   26072:	c220      	stmia	r2!, {r5}
   26074:	4140      	adcs	r0, r0
   26076:	b9d0      	cbnz	r0, 260ae <x_side_default+0x19e>
   26078:	9b01      	ldr	r3, [sp, #4]
   2607a:	3b01      	subs	r3, #1
   2607c:	b25b      	sxtb	r3, r3
   2607e:	2b00      	cmp	r3, #0
   26080:	db15      	blt.n	260ae <x_side_default+0x19e>
   26082:	b21a      	sxth	r2, r3
   26084:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   26088:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2608c:	4291      	cmp	r1, r2
   2608e:	d80b      	bhi.n	260a8 <x_side_default+0x198>
   26090:	d30d      	bcc.n	260ae <x_side_default+0x19e>
   26092:	3b01      	subs	r3, #1
   26094:	b25b      	sxtb	r3, r3
   26096:	1c59      	adds	r1, r3, #1
   26098:	b21a      	sxth	r2, r3
   2609a:	d008      	beq.n	260ae <x_side_default+0x19e>
   2609c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   260a0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   260a4:	4291      	cmp	r1, r2
   260a6:	d9f3      	bls.n	26090 <x_side_default+0x180>
   260a8:	b01b      	add	sp, #108	; 0x6c
   260aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260ae:	9b01      	ldr	r3, [sp, #4]
   260b0:	4652      	mov	r2, sl
   260b2:	4621      	mov	r1, r4
   260b4:	4620      	mov	r0, r4
   260b6:	f7ff fcab 	bl	25a10 <uECC_vli_sub>
   260ba:	b01b      	add	sp, #108	; 0x6c
   260bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000260c0 <vli_mmod_fast_secp256r1>:
   260c0:	680b      	ldr	r3, [r1, #0]
   260c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260c6:	6003      	str	r3, [r0, #0]
   260c8:	684b      	ldr	r3, [r1, #4]
   260ca:	6043      	str	r3, [r0, #4]
   260cc:	688b      	ldr	r3, [r1, #8]
   260ce:	6083      	str	r3, [r0, #8]
   260d0:	68cb      	ldr	r3, [r1, #12]
   260d2:	60c3      	str	r3, [r0, #12]
   260d4:	690b      	ldr	r3, [r1, #16]
   260d6:	6103      	str	r3, [r0, #16]
   260d8:	694b      	ldr	r3, [r1, #20]
   260da:	6143      	str	r3, [r0, #20]
   260dc:	698b      	ldr	r3, [r1, #24]
   260de:	6183      	str	r3, [r0, #24]
   260e0:	69cb      	ldr	r3, [r1, #28]
   260e2:	61c3      	str	r3, [r0, #28]
   260e4:	b08d      	sub	sp, #52	; 0x34
   260e6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   260e8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   260ea:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   260ec:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   260ee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   260f0:	940b      	str	r4, [sp, #44]	; 0x2c
   260f2:	f04f 0a00 	mov.w	sl, #0
   260f6:	ac04      	add	r4, sp, #16
   260f8:	9708      	str	r7, [sp, #32]
   260fa:	9609      	str	r6, [sp, #36]	; 0x24
   260fc:	950a      	str	r5, [sp, #40]	; 0x28
   260fe:	4681      	mov	r9, r0
   26100:	9307      	str	r3, [sp, #28]
   26102:	f8cd a018 	str.w	sl, [sp, #24]
   26106:	f8cd a014 	str.w	sl, [sp, #20]
   2610a:	f8cd a010 	str.w	sl, [sp, #16]
   2610e:	2501      	movs	r5, #1
   26110:	4626      	mov	r6, r4
   26112:	4627      	mov	r7, r4
   26114:	2300      	movs	r3, #0
   26116:	a205      	add	r2, pc, #20	; (adr r2, 2612c <vli_mmod_fast_secp256r1+0x6c>)
   26118:	f3af 8000 	nop.w
   2611c:	f3af 8000 	nop.w
   26120:	18ad      	adds	r5, r5, r2
   26122:	ce04      	ldmia	r6!, {r2}
   26124:	cf01      	ldmia	r7!, {r0}
   26126:	1812      	adds	r2, r2, r0
   26128:	c404      	stmia	r4!, {r2}
   2612a:	4728      	bx	r5
   2612c:	ce04      	ldmia	r6!, {r2}
   2612e:	cf01      	ldmia	r7!, {r0}
   26130:	4142      	adcs	r2, r0
   26132:	c404      	stmia	r4!, {r2}
   26134:	ce04      	ldmia	r6!, {r2}
   26136:	cf01      	ldmia	r7!, {r0}
   26138:	4142      	adcs	r2, r0
   2613a:	c404      	stmia	r4!, {r2}
   2613c:	ce04      	ldmia	r6!, {r2}
   2613e:	cf01      	ldmia	r7!, {r0}
   26140:	4142      	adcs	r2, r0
   26142:	c404      	stmia	r4!, {r2}
   26144:	ce04      	ldmia	r6!, {r2}
   26146:	cf01      	ldmia	r7!, {r0}
   26148:	4142      	adcs	r2, r0
   2614a:	c404      	stmia	r4!, {r2}
   2614c:	ce04      	ldmia	r6!, {r2}
   2614e:	cf01      	ldmia	r7!, {r0}
   26150:	4142      	adcs	r2, r0
   26152:	c404      	stmia	r4!, {r2}
   26154:	ce04      	ldmia	r6!, {r2}
   26156:	cf01      	ldmia	r7!, {r0}
   26158:	4142      	adcs	r2, r0
   2615a:	c404      	stmia	r4!, {r2}
   2615c:	ce04      	ldmia	r6!, {r2}
   2615e:	cf01      	ldmia	r7!, {r0}
   26160:	4142      	adcs	r2, r0
   26162:	c404      	stmia	r4!, {r2}
   26164:	415b      	adcs	r3, r3
   26166:	2601      	movs	r6, #1
   26168:	9300      	str	r3, [sp, #0]
   2616a:	464c      	mov	r4, r9
   2616c:	ad04      	add	r5, sp, #16
   2616e:	464f      	mov	r7, r9
   26170:	2300      	movs	r3, #0
   26172:	a206      	add	r2, pc, #24	; (adr r2, 2618c <vli_mmod_fast_secp256r1+0xcc>)
   26174:	f3af 8000 	nop.w
   26178:	f3af 8000 	nop.w
   2617c:	f3af 8000 	nop.w
   26180:	18b6      	adds	r6, r6, r2
   26182:	cf04      	ldmia	r7!, {r2}
   26184:	cd01      	ldmia	r5!, {r0}
   26186:	1812      	adds	r2, r2, r0
   26188:	c404      	stmia	r4!, {r2}
   2618a:	4730      	bx	r6
   2618c:	cf04      	ldmia	r7!, {r2}
   2618e:	cd01      	ldmia	r5!, {r0}
   26190:	4142      	adcs	r2, r0
   26192:	c404      	stmia	r4!, {r2}
   26194:	cf04      	ldmia	r7!, {r2}
   26196:	cd01      	ldmia	r5!, {r0}
   26198:	4142      	adcs	r2, r0
   2619a:	c404      	stmia	r4!, {r2}
   2619c:	cf04      	ldmia	r7!, {r2}
   2619e:	cd01      	ldmia	r5!, {r0}
   261a0:	4142      	adcs	r2, r0
   261a2:	c404      	stmia	r4!, {r2}
   261a4:	cf04      	ldmia	r7!, {r2}
   261a6:	cd01      	ldmia	r5!, {r0}
   261a8:	4142      	adcs	r2, r0
   261aa:	c404      	stmia	r4!, {r2}
   261ac:	cf04      	ldmia	r7!, {r2}
   261ae:	cd01      	ldmia	r5!, {r0}
   261b0:	4142      	adcs	r2, r0
   261b2:	c404      	stmia	r4!, {r2}
   261b4:	cf04      	ldmia	r7!, {r2}
   261b6:	cd01      	ldmia	r5!, {r0}
   261b8:	4142      	adcs	r2, r0
   261ba:	c404      	stmia	r4!, {r2}
   261bc:	cf04      	ldmia	r7!, {r2}
   261be:	cd01      	ldmia	r5!, {r0}
   261c0:	4142      	adcs	r2, r0
   261c2:	c404      	stmia	r4!, {r2}
   261c4:	415b      	adcs	r3, r3
   261c6:	f101 0434 	add.w	r4, r1, #52	; 0x34
   261ca:	ccd0      	ldmia	r4, {r4, r6, r7}
   261cc:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   261ce:	9408      	str	r4, [sp, #32]
   261d0:	ac04      	add	r4, sp, #16
   261d2:	9507      	str	r5, [sp, #28]
   261d4:	9609      	str	r6, [sp, #36]	; 0x24
   261d6:	970a      	str	r7, [sp, #40]	; 0x28
   261d8:	4698      	mov	r8, r3
   261da:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   261de:	2501      	movs	r5, #1
   261e0:	4626      	mov	r6, r4
   261e2:	4627      	mov	r7, r4
   261e4:	2300      	movs	r3, #0
   261e6:	a205      	add	r2, pc, #20	; (adr r2, 261fc <vli_mmod_fast_secp256r1+0x13c>)
   261e8:	f3af 8000 	nop.w
   261ec:	f3af 8000 	nop.w
   261f0:	18ad      	adds	r5, r5, r2
   261f2:	ce04      	ldmia	r6!, {r2}
   261f4:	cf01      	ldmia	r7!, {r0}
   261f6:	1812      	adds	r2, r2, r0
   261f8:	c404      	stmia	r4!, {r2}
   261fa:	4728      	bx	r5
   261fc:	ce04      	ldmia	r6!, {r2}
   261fe:	cf01      	ldmia	r7!, {r0}
   26200:	4142      	adcs	r2, r0
   26202:	c404      	stmia	r4!, {r2}
   26204:	ce04      	ldmia	r6!, {r2}
   26206:	cf01      	ldmia	r7!, {r0}
   26208:	4142      	adcs	r2, r0
   2620a:	c404      	stmia	r4!, {r2}
   2620c:	ce04      	ldmia	r6!, {r2}
   2620e:	cf01      	ldmia	r7!, {r0}
   26210:	4142      	adcs	r2, r0
   26212:	c404      	stmia	r4!, {r2}
   26214:	ce04      	ldmia	r6!, {r2}
   26216:	cf01      	ldmia	r7!, {r0}
   26218:	4142      	adcs	r2, r0
   2621a:	c404      	stmia	r4!, {r2}
   2621c:	ce04      	ldmia	r6!, {r2}
   2621e:	cf01      	ldmia	r7!, {r0}
   26220:	4142      	adcs	r2, r0
   26222:	c404      	stmia	r4!, {r2}
   26224:	ce04      	ldmia	r6!, {r2}
   26226:	cf01      	ldmia	r7!, {r0}
   26228:	4142      	adcs	r2, r0
   2622a:	c404      	stmia	r4!, {r2}
   2622c:	ce04      	ldmia	r6!, {r2}
   2622e:	cf01      	ldmia	r7!, {r0}
   26230:	4142      	adcs	r2, r0
   26232:	c404      	stmia	r4!, {r2}
   26234:	415b      	adcs	r3, r3
   26236:	2601      	movs	r6, #1
   26238:	9301      	str	r3, [sp, #4]
   2623a:	464c      	mov	r4, r9
   2623c:	ad04      	add	r5, sp, #16
   2623e:	464f      	mov	r7, r9
   26240:	2300      	movs	r3, #0
   26242:	a206      	add	r2, pc, #24	; (adr r2, 2625c <vli_mmod_fast_secp256r1+0x19c>)
   26244:	f3af 8000 	nop.w
   26248:	f3af 8000 	nop.w
   2624c:	f3af 8000 	nop.w
   26250:	18b6      	adds	r6, r6, r2
   26252:	cf04      	ldmia	r7!, {r2}
   26254:	cd01      	ldmia	r5!, {r0}
   26256:	1812      	adds	r2, r2, r0
   26258:	c404      	stmia	r4!, {r2}
   2625a:	4730      	bx	r6
   2625c:	cf04      	ldmia	r7!, {r2}
   2625e:	cd01      	ldmia	r5!, {r0}
   26260:	4142      	adcs	r2, r0
   26262:	c404      	stmia	r4!, {r2}
   26264:	cf04      	ldmia	r7!, {r2}
   26266:	cd01      	ldmia	r5!, {r0}
   26268:	4142      	adcs	r2, r0
   2626a:	c404      	stmia	r4!, {r2}
   2626c:	cf04      	ldmia	r7!, {r2}
   2626e:	cd01      	ldmia	r5!, {r0}
   26270:	4142      	adcs	r2, r0
   26272:	c404      	stmia	r4!, {r2}
   26274:	cf04      	ldmia	r7!, {r2}
   26276:	cd01      	ldmia	r5!, {r0}
   26278:	4142      	adcs	r2, r0
   2627a:	c404      	stmia	r4!, {r2}
   2627c:	cf04      	ldmia	r7!, {r2}
   2627e:	cd01      	ldmia	r5!, {r0}
   26280:	4142      	adcs	r2, r0
   26282:	c404      	stmia	r4!, {r2}
   26284:	cf04      	ldmia	r7!, {r2}
   26286:	cd01      	ldmia	r5!, {r0}
   26288:	4142      	adcs	r2, r0
   2628a:	c404      	stmia	r4!, {r2}
   2628c:	cf04      	ldmia	r7!, {r2}
   2628e:	cd01      	ldmia	r5!, {r0}
   26290:	4142      	adcs	r2, r0
   26292:	c404      	stmia	r4!, {r2}
   26294:	415b      	adcs	r3, r3
   26296:	f101 0420 	add.w	r4, r1, #32
   2629a:	cc70      	ldmia	r4, {r4, r5, r6}
   2629c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   2629e:	9404      	str	r4, [sp, #16]
   262a0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   262a2:	9505      	str	r5, [sp, #20]
   262a4:	9606      	str	r6, [sp, #24]
   262a6:	970a      	str	r7, [sp, #40]	; 0x28
   262a8:	940b      	str	r4, [sp, #44]	; 0x2c
   262aa:	9302      	str	r3, [sp, #8]
   262ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   262b0:	f8cd a020 	str.w	sl, [sp, #32]
   262b4:	f8cd a01c 	str.w	sl, [sp, #28]
   262b8:	464c      	mov	r4, r9
   262ba:	ad04      	add	r5, sp, #16
   262bc:	2601      	movs	r6, #1
   262be:	464f      	mov	r7, r9
   262c0:	2300      	movs	r3, #0
   262c2:	a206      	add	r2, pc, #24	; (adr r2, 262dc <vli_mmod_fast_secp256r1+0x21c>)
   262c4:	f3af 8000 	nop.w
   262c8:	f3af 8000 	nop.w
   262cc:	f3af 8000 	nop.w
   262d0:	18b6      	adds	r6, r6, r2
   262d2:	cf04      	ldmia	r7!, {r2}
   262d4:	cd01      	ldmia	r5!, {r0}
   262d6:	1812      	adds	r2, r2, r0
   262d8:	c404      	stmia	r4!, {r2}
   262da:	4730      	bx	r6
   262dc:	cf04      	ldmia	r7!, {r2}
   262de:	cd01      	ldmia	r5!, {r0}
   262e0:	4142      	adcs	r2, r0
   262e2:	c404      	stmia	r4!, {r2}
   262e4:	cf04      	ldmia	r7!, {r2}
   262e6:	cd01      	ldmia	r5!, {r0}
   262e8:	4142      	adcs	r2, r0
   262ea:	c404      	stmia	r4!, {r2}
   262ec:	cf04      	ldmia	r7!, {r2}
   262ee:	cd01      	ldmia	r5!, {r0}
   262f0:	4142      	adcs	r2, r0
   262f2:	c404      	stmia	r4!, {r2}
   262f4:	cf04      	ldmia	r7!, {r2}
   262f6:	cd01      	ldmia	r5!, {r0}
   262f8:	4142      	adcs	r2, r0
   262fa:	c404      	stmia	r4!, {r2}
   262fc:	cf04      	ldmia	r7!, {r2}
   262fe:	cd01      	ldmia	r5!, {r0}
   26300:	4142      	adcs	r2, r0
   26302:	c404      	stmia	r4!, {r2}
   26304:	cf04      	ldmia	r7!, {r2}
   26306:	cd01      	ldmia	r5!, {r0}
   26308:	4142      	adcs	r2, r0
   2630a:	c404      	stmia	r4!, {r2}
   2630c:	cf04      	ldmia	r7!, {r2}
   2630e:	cd01      	ldmia	r5!, {r0}
   26310:	4142      	adcs	r2, r0
   26312:	c404      	stmia	r4!, {r2}
   26314:	415b      	adcs	r3, r3
   26316:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   26318:	9505      	str	r5, [sp, #20]
   2631a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   2631c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   2631e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   26320:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   26322:	9303      	str	r3, [sp, #12]
   26324:	9509      	str	r5, [sp, #36]	; 0x24
   26326:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   26328:	6a0d      	ldr	r5, [r1, #32]
   2632a:	9606      	str	r6, [sp, #24]
   2632c:	9708      	str	r7, [sp, #32]
   2632e:	950b      	str	r5, [sp, #44]	; 0x2c
   26330:	9407      	str	r4, [sp, #28]
   26332:	940a      	str	r4, [sp, #40]	; 0x28
   26334:	9304      	str	r3, [sp, #16]
   26336:	464c      	mov	r4, r9
   26338:	ad04      	add	r5, sp, #16
   2633a:	2601      	movs	r6, #1
   2633c:	464f      	mov	r7, r9
   2633e:	2300      	movs	r3, #0
   26340:	a206      	add	r2, pc, #24	; (adr r2, 2635c <vli_mmod_fast_secp256r1+0x29c>)
   26342:	bf00      	nop
   26344:	f3af 8000 	nop.w
   26348:	f3af 8000 	nop.w
   2634c:	f3af 8000 	nop.w
   26350:	18b6      	adds	r6, r6, r2
   26352:	cf04      	ldmia	r7!, {r2}
   26354:	cd01      	ldmia	r5!, {r0}
   26356:	1812      	adds	r2, r2, r0
   26358:	c404      	stmia	r4!, {r2}
   2635a:	4730      	bx	r6
   2635c:	cf04      	ldmia	r7!, {r2}
   2635e:	cd01      	ldmia	r5!, {r0}
   26360:	4142      	adcs	r2, r0
   26362:	c404      	stmia	r4!, {r2}
   26364:	cf04      	ldmia	r7!, {r2}
   26366:	cd01      	ldmia	r5!, {r0}
   26368:	4142      	adcs	r2, r0
   2636a:	c404      	stmia	r4!, {r2}
   2636c:	cf04      	ldmia	r7!, {r2}
   2636e:	cd01      	ldmia	r5!, {r0}
   26370:	4142      	adcs	r2, r0
   26372:	c404      	stmia	r4!, {r2}
   26374:	cf04      	ldmia	r7!, {r2}
   26376:	cd01      	ldmia	r5!, {r0}
   26378:	4142      	adcs	r2, r0
   2637a:	c404      	stmia	r4!, {r2}
   2637c:	cf04      	ldmia	r7!, {r2}
   2637e:	cd01      	ldmia	r5!, {r0}
   26380:	4142      	adcs	r2, r0
   26382:	c404      	stmia	r4!, {r2}
   26384:	cf04      	ldmia	r7!, {r2}
   26386:	cd01      	ldmia	r5!, {r0}
   26388:	4142      	adcs	r2, r0
   2638a:	c404      	stmia	r4!, {r2}
   2638c:	cf04      	ldmia	r7!, {r2}
   2638e:	cd01      	ldmia	r5!, {r0}
   26390:	4142      	adcs	r2, r0
   26392:	c404      	stmia	r4!, {r2}
   26394:	415b      	adcs	r3, r3
   26396:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   2639a:	cc70      	ldmia	r4, {r4, r5, r6}
   2639c:	6a0f      	ldr	r7, [r1, #32]
   2639e:	9404      	str	r4, [sp, #16]
   263a0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   263a2:	9505      	str	r5, [sp, #20]
   263a4:	9606      	str	r6, [sp, #24]
   263a6:	970a      	str	r7, [sp, #40]	; 0x28
   263a8:	940b      	str	r4, [sp, #44]	; 0x2c
   263aa:	469b      	mov	fp, r3
   263ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   263b0:	f8cd a020 	str.w	sl, [sp, #32]
   263b4:	f8cd a01c 	str.w	sl, [sp, #28]
   263b8:	464c      	mov	r4, r9
   263ba:	ad04      	add	r5, sp, #16
   263bc:	2601      	movs	r6, #1
   263be:	464f      	mov	r7, r9
   263c0:	2300      	movs	r3, #0
   263c2:	a206      	add	r2, pc, #24	; (adr r2, 263dc <vli_mmod_fast_secp256r1+0x31c>)
   263c4:	f3af 8000 	nop.w
   263c8:	f3af 8000 	nop.w
   263cc:	f3af 8000 	nop.w
   263d0:	18b6      	adds	r6, r6, r2
   263d2:	cf04      	ldmia	r7!, {r2}
   263d4:	cd01      	ldmia	r5!, {r0}
   263d6:	1a12      	subs	r2, r2, r0
   263d8:	c404      	stmia	r4!, {r2}
   263da:	4730      	bx	r6
   263dc:	cf04      	ldmia	r7!, {r2}
   263de:	cd01      	ldmia	r5!, {r0}
   263e0:	4182      	sbcs	r2, r0
   263e2:	c404      	stmia	r4!, {r2}
   263e4:	cf04      	ldmia	r7!, {r2}
   263e6:	cd01      	ldmia	r5!, {r0}
   263e8:	4182      	sbcs	r2, r0
   263ea:	c404      	stmia	r4!, {r2}
   263ec:	cf04      	ldmia	r7!, {r2}
   263ee:	cd01      	ldmia	r5!, {r0}
   263f0:	4182      	sbcs	r2, r0
   263f2:	c404      	stmia	r4!, {r2}
   263f4:	cf04      	ldmia	r7!, {r2}
   263f6:	cd01      	ldmia	r5!, {r0}
   263f8:	4182      	sbcs	r2, r0
   263fa:	c404      	stmia	r4!, {r2}
   263fc:	cf04      	ldmia	r7!, {r2}
   263fe:	cd01      	ldmia	r5!, {r0}
   26400:	4182      	sbcs	r2, r0
   26402:	c404      	stmia	r4!, {r2}
   26404:	cf04      	ldmia	r7!, {r2}
   26406:	cd01      	ldmia	r5!, {r0}
   26408:	4182      	sbcs	r2, r0
   2640a:	c404      	stmia	r4!, {r2}
   2640c:	cf04      	ldmia	r7!, {r2}
   2640e:	cd01      	ldmia	r5!, {r0}
   26410:	4182      	sbcs	r2, r0
   26412:	c404      	stmia	r4!, {r2}
   26414:	415b      	adcs	r3, r3
   26416:	f101 0430 	add.w	r4, r1, #48	; 0x30
   2641a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   2641c:	9404      	str	r4, [sp, #16]
   2641e:	9505      	str	r5, [sp, #20]
   26420:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   26422:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   26424:	9606      	str	r6, [sp, #24]
   26426:	9707      	str	r7, [sp, #28]
   26428:	950a      	str	r5, [sp, #40]	; 0x28
   2642a:	940b      	str	r4, [sp, #44]	; 0x2c
   2642c:	469c      	mov	ip, r3
   2642e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   26432:	f8cd a020 	str.w	sl, [sp, #32]
   26436:	464c      	mov	r4, r9
   26438:	ad04      	add	r5, sp, #16
   2643a:	2601      	movs	r6, #1
   2643c:	464f      	mov	r7, r9
   2643e:	2300      	movs	r3, #0
   26440:	a206      	add	r2, pc, #24	; (adr r2, 2645c <vli_mmod_fast_secp256r1+0x39c>)
   26442:	bf00      	nop
   26444:	f3af 8000 	nop.w
   26448:	f3af 8000 	nop.w
   2644c:	f3af 8000 	nop.w
   26450:	18b6      	adds	r6, r6, r2
   26452:	cf04      	ldmia	r7!, {r2}
   26454:	cd01      	ldmia	r5!, {r0}
   26456:	1a12      	subs	r2, r2, r0
   26458:	c404      	stmia	r4!, {r2}
   2645a:	4730      	bx	r6
   2645c:	cf04      	ldmia	r7!, {r2}
   2645e:	cd01      	ldmia	r5!, {r0}
   26460:	4182      	sbcs	r2, r0
   26462:	c404      	stmia	r4!, {r2}
   26464:	cf04      	ldmia	r7!, {r2}
   26466:	cd01      	ldmia	r5!, {r0}
   26468:	4182      	sbcs	r2, r0
   2646a:	c404      	stmia	r4!, {r2}
   2646c:	cf04      	ldmia	r7!, {r2}
   2646e:	cd01      	ldmia	r5!, {r0}
   26470:	4182      	sbcs	r2, r0
   26472:	c404      	stmia	r4!, {r2}
   26474:	cf04      	ldmia	r7!, {r2}
   26476:	cd01      	ldmia	r5!, {r0}
   26478:	4182      	sbcs	r2, r0
   2647a:	c404      	stmia	r4!, {r2}
   2647c:	cf04      	ldmia	r7!, {r2}
   2647e:	cd01      	ldmia	r5!, {r0}
   26480:	4182      	sbcs	r2, r0
   26482:	c404      	stmia	r4!, {r2}
   26484:	cf04      	ldmia	r7!, {r2}
   26486:	cd01      	ldmia	r5!, {r0}
   26488:	4182      	sbcs	r2, r0
   2648a:	c404      	stmia	r4!, {r2}
   2648c:	cf04      	ldmia	r7!, {r2}
   2648e:	cd01      	ldmia	r5!, {r0}
   26490:	4182      	sbcs	r2, r0
   26492:	c404      	stmia	r4!, {r2}
   26494:	415b      	adcs	r3, r3
   26496:	f101 0434 	add.w	r4, r1, #52	; 0x34
   2649a:	cc70      	ldmia	r4, {r4, r5, r6}
   2649c:	6a0f      	ldr	r7, [r1, #32]
   2649e:	9404      	str	r4, [sp, #16]
   264a0:	9505      	str	r5, [sp, #20]
   264a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   264a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   264a6:	9606      	str	r6, [sp, #24]
   264a8:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   264aa:	9408      	str	r4, [sp, #32]
   264ac:	469e      	mov	lr, r3
   264ae:	9509      	str	r5, [sp, #36]	; 0x24
   264b0:	960b      	str	r6, [sp, #44]	; 0x2c
   264b2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   264b6:	9707      	str	r7, [sp, #28]
   264b8:	464c      	mov	r4, r9
   264ba:	ad04      	add	r5, sp, #16
   264bc:	2601      	movs	r6, #1
   264be:	464b      	mov	r3, r9
   264c0:	2700      	movs	r7, #0
   264c2:	a206      	add	r2, pc, #24	; (adr r2, 264dc <vli_mmod_fast_secp256r1+0x41c>)
   264c4:	f3af 8000 	nop.w
   264c8:	f3af 8000 	nop.w
   264cc:	f3af 8000 	nop.w
   264d0:	18b6      	adds	r6, r6, r2
   264d2:	cb04      	ldmia	r3!, {r2}
   264d4:	cd01      	ldmia	r5!, {r0}
   264d6:	1a12      	subs	r2, r2, r0
   264d8:	c404      	stmia	r4!, {r2}
   264da:	4730      	bx	r6
   264dc:	cb04      	ldmia	r3!, {r2}
   264de:	cd01      	ldmia	r5!, {r0}
   264e0:	4182      	sbcs	r2, r0
   264e2:	c404      	stmia	r4!, {r2}
   264e4:	cb04      	ldmia	r3!, {r2}
   264e6:	cd01      	ldmia	r5!, {r0}
   264e8:	4182      	sbcs	r2, r0
   264ea:	c404      	stmia	r4!, {r2}
   264ec:	cb04      	ldmia	r3!, {r2}
   264ee:	cd01      	ldmia	r5!, {r0}
   264f0:	4182      	sbcs	r2, r0
   264f2:	c404      	stmia	r4!, {r2}
   264f4:	cb04      	ldmia	r3!, {r2}
   264f6:	cd01      	ldmia	r5!, {r0}
   264f8:	4182      	sbcs	r2, r0
   264fa:	c404      	stmia	r4!, {r2}
   264fc:	cb04      	ldmia	r3!, {r2}
   264fe:	cd01      	ldmia	r5!, {r0}
   26500:	4182      	sbcs	r2, r0
   26502:	c404      	stmia	r4!, {r2}
   26504:	cb04      	ldmia	r3!, {r2}
   26506:	cd01      	ldmia	r5!, {r0}
   26508:	4182      	sbcs	r2, r0
   2650a:	c404      	stmia	r4!, {r2}
   2650c:	cb04      	ldmia	r3!, {r2}
   2650e:	cd01      	ldmia	r5!, {r0}
   26510:	4182      	sbcs	r2, r0
   26512:	c404      	stmia	r4!, {r2}
   26514:	417f      	adcs	r7, r7
   26516:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   26518:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   2651a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   2651c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   2651e:	9404      	str	r4, [sp, #16]
   26520:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   26522:	6b49      	ldr	r1, [r1, #52]	; 0x34
   26524:	9208      	str	r2, [sp, #32]
   26526:	9607      	str	r6, [sp, #28]
   26528:	9409      	str	r4, [sp, #36]	; 0x24
   2652a:	910b      	str	r1, [sp, #44]	; 0x2c
   2652c:	f8cd a018 	str.w	sl, [sp, #24]
   26530:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   26534:	9505      	str	r5, [sp, #20]
   26536:	aa04      	add	r2, sp, #16
   26538:	4649      	mov	r1, r9
   2653a:	2401      	movs	r4, #1
   2653c:	464e      	mov	r6, r9
   2653e:	2500      	movs	r5, #0
   26540:	a006      	add	r0, pc, #24	; (adr r0, 2655c <vli_mmod_fast_secp256r1+0x49c>)
   26542:	bf00      	nop
   26544:	f3af 8000 	nop.w
   26548:	f3af 8000 	nop.w
   2654c:	f3af 8000 	nop.w
   26550:	1824      	adds	r4, r4, r0
   26552:	ce01      	ldmia	r6!, {r0}
   26554:	ca08      	ldmia	r2!, {r3}
   26556:	1ac0      	subs	r0, r0, r3
   26558:	c101      	stmia	r1!, {r0}
   2655a:	4720      	bx	r4
   2655c:	ce01      	ldmia	r6!, {r0}
   2655e:	ca08      	ldmia	r2!, {r3}
   26560:	4198      	sbcs	r0, r3
   26562:	c101      	stmia	r1!, {r0}
   26564:	ce01      	ldmia	r6!, {r0}
   26566:	ca08      	ldmia	r2!, {r3}
   26568:	4198      	sbcs	r0, r3
   2656a:	c101      	stmia	r1!, {r0}
   2656c:	ce01      	ldmia	r6!, {r0}
   2656e:	ca08      	ldmia	r2!, {r3}
   26570:	4198      	sbcs	r0, r3
   26572:	c101      	stmia	r1!, {r0}
   26574:	ce01      	ldmia	r6!, {r0}
   26576:	ca08      	ldmia	r2!, {r3}
   26578:	4198      	sbcs	r0, r3
   2657a:	c101      	stmia	r1!, {r0}
   2657c:	ce01      	ldmia	r6!, {r0}
   2657e:	ca08      	ldmia	r2!, {r3}
   26580:	4198      	sbcs	r0, r3
   26582:	c101      	stmia	r1!, {r0}
   26584:	ce01      	ldmia	r6!, {r0}
   26586:	ca08      	ldmia	r2!, {r3}
   26588:	4198      	sbcs	r0, r3
   2658a:	c101      	stmia	r1!, {r0}
   2658c:	ce01      	ldmia	r6!, {r0}
   2658e:	ca08      	ldmia	r2!, {r3}
   26590:	4198      	sbcs	r0, r3
   26592:	c101      	stmia	r1!, {r0}
   26594:	416d      	adcs	r5, r5
   26596:	9b00      	ldr	r3, [sp, #0]
   26598:	eb08 0203 	add.w	r2, r8, r3
   2659c:	9b01      	ldr	r3, [sp, #4]
   2659e:	441a      	add	r2, r3
   265a0:	9b02      	ldr	r3, [sp, #8]
   265a2:	441a      	add	r2, r3
   265a4:	9b03      	ldr	r3, [sp, #12]
   265a6:	441a      	add	r2, r3
   265a8:	445a      	add	r2, fp
   265aa:	45d4      	cmp	ip, sl
   265ac:	bf14      	ite	ne
   265ae:	4694      	movne	ip, r2
   265b0:	f1a2 0c01 	subeq.w	ip, r2, #1
   265b4:	45d6      	cmp	lr, sl
   265b6:	bf14      	ite	ne
   265b8:	46e6      	movne	lr, ip
   265ba:	f1ac 0e01 	subeq.w	lr, ip, #1
   265be:	4557      	cmp	r7, sl
   265c0:	bf14      	ite	ne
   265c2:	4677      	movne	r7, lr
   265c4:	f1ae 0701 	subeq.w	r7, lr, #1
   265c8:	4555      	cmp	r5, sl
   265ca:	bf14      	ite	ne
   265cc:	463d      	movne	r5, r7
   265ce:	1e7d      	subeq	r5, r7, #1
   265d0:	4555      	cmp	r5, sl
   265d2:	db4d      	blt.n	26670 <vli_mmod_fast_secp256r1+0x5b0>
   265d4:	f8df c108 	ldr.w	ip, [pc, #264]	; 266e0 <vli_mmod_fast_secp256r1+0x620>
   265d8:	f04f 0801 	mov.w	r8, #1
   265dc:	46ae      	mov	lr, r5
   265de:	4648      	mov	r0, r9
   265e0:	f1be 0f00 	cmp.w	lr, #0
   265e4:	d116      	bne.n	26614 <vli_mmod_fast_secp256r1+0x554>
   265e6:	69c2      	ldr	r2, [r0, #28]
   265e8:	3201      	adds	r2, #1
   265ea:	d176      	bne.n	266da <vli_mmod_fast_secp256r1+0x61a>
   265ec:	6982      	ldr	r2, [r0, #24]
   265ee:	2a00      	cmp	r2, #0
   265f0:	d073      	beq.n	266da <vli_mmod_fast_secp256r1+0x61a>
   265f2:	2a01      	cmp	r2, #1
   265f4:	d80e      	bhi.n	26614 <vli_mmod_fast_secp256r1+0x554>
   265f6:	6942      	ldr	r2, [r0, #20]
   265f8:	b962      	cbnz	r2, 26614 <vli_mmod_fast_secp256r1+0x554>
   265fa:	6902      	ldr	r2, [r0, #16]
   265fc:	b952      	cbnz	r2, 26614 <vli_mmod_fast_secp256r1+0x554>
   265fe:	68c2      	ldr	r2, [r0, #12]
   26600:	b942      	cbnz	r2, 26614 <vli_mmod_fast_secp256r1+0x554>
   26602:	6882      	ldr	r2, [r0, #8]
   26604:	3201      	adds	r2, #1
   26606:	d168      	bne.n	266da <vli_mmod_fast_secp256r1+0x61a>
   26608:	6842      	ldr	r2, [r0, #4]
   2660a:	3201      	adds	r2, #1
   2660c:	d165      	bne.n	266da <vli_mmod_fast_secp256r1+0x61a>
   2660e:	6802      	ldr	r2, [r0, #0]
   26610:	3201      	adds	r2, #1
   26612:	d162      	bne.n	266da <vli_mmod_fast_secp256r1+0x61a>
   26614:	4602      	mov	r2, r0
   26616:	4661      	mov	r1, ip
   26618:	4644      	mov	r4, r8
   2661a:	4603      	mov	r3, r0
   2661c:	2600      	movs	r6, #0
   2661e:	a703      	add	r7, pc, #12	; (adr r7, 2662c <vli_mmod_fast_secp256r1+0x56c>)
   26620:	19e4      	adds	r4, r4, r7
   26622:	cb80      	ldmia	r3!, {r7}
   26624:	c920      	ldmia	r1!, {r5}
   26626:	1b7f      	subs	r7, r7, r5
   26628:	c280      	stmia	r2!, {r7}
   2662a:	4720      	bx	r4
   2662c:	cb80      	ldmia	r3!, {r7}
   2662e:	c920      	ldmia	r1!, {r5}
   26630:	41af      	sbcs	r7, r5
   26632:	c280      	stmia	r2!, {r7}
   26634:	cb80      	ldmia	r3!, {r7}
   26636:	c920      	ldmia	r1!, {r5}
   26638:	41af      	sbcs	r7, r5
   2663a:	c280      	stmia	r2!, {r7}
   2663c:	cb80      	ldmia	r3!, {r7}
   2663e:	c920      	ldmia	r1!, {r5}
   26640:	41af      	sbcs	r7, r5
   26642:	c280      	stmia	r2!, {r7}
   26644:	cb80      	ldmia	r3!, {r7}
   26646:	c920      	ldmia	r1!, {r5}
   26648:	41af      	sbcs	r7, r5
   2664a:	c280      	stmia	r2!, {r7}
   2664c:	cb80      	ldmia	r3!, {r7}
   2664e:	c920      	ldmia	r1!, {r5}
   26650:	41af      	sbcs	r7, r5
   26652:	c280      	stmia	r2!, {r7}
   26654:	cb80      	ldmia	r3!, {r7}
   26656:	c920      	ldmia	r1!, {r5}
   26658:	41af      	sbcs	r7, r5
   2665a:	c280      	stmia	r2!, {r7}
   2665c:	cb80      	ldmia	r3!, {r7}
   2665e:	c920      	ldmia	r1!, {r5}
   26660:	41af      	sbcs	r7, r5
   26662:	c280      	stmia	r2!, {r7}
   26664:	4176      	adcs	r6, r6
   26666:	2e00      	cmp	r6, #0
   26668:	bf08      	it	eq
   2666a:	f1ae 0e01 	subeq.w	lr, lr, #1
   2666e:	e7b7      	b.n	265e0 <vli_mmod_fast_secp256r1+0x520>
   26670:	f8df e06c 	ldr.w	lr, [pc, #108]	; 266e0 <vli_mmod_fast_secp256r1+0x620>
   26674:	f04f 0c01 	mov.w	ip, #1
   26678:	46c8      	mov	r8, r9
   2667a:	4642      	mov	r2, r8
   2667c:	4671      	mov	r1, lr
   2667e:	4664      	mov	r4, ip
   26680:	4643      	mov	r3, r8
   26682:	2600      	movs	r6, #0
   26684:	a705      	add	r7, pc, #20	; (adr r7, 2669c <vli_mmod_fast_secp256r1+0x5dc>)
   26686:	bf00      	nop
   26688:	f3af 8000 	nop.w
   2668c:	f3af 8000 	nop.w
   26690:	19e4      	adds	r4, r4, r7
   26692:	cb80      	ldmia	r3!, {r7}
   26694:	c901      	ldmia	r1!, {r0}
   26696:	183f      	adds	r7, r7, r0
   26698:	c280      	stmia	r2!, {r7}
   2669a:	4720      	bx	r4
   2669c:	cb80      	ldmia	r3!, {r7}
   2669e:	c901      	ldmia	r1!, {r0}
   266a0:	4147      	adcs	r7, r0
   266a2:	c280      	stmia	r2!, {r7}
   266a4:	cb80      	ldmia	r3!, {r7}
   266a6:	c901      	ldmia	r1!, {r0}
   266a8:	4147      	adcs	r7, r0
   266aa:	c280      	stmia	r2!, {r7}
   266ac:	cb80      	ldmia	r3!, {r7}
   266ae:	c901      	ldmia	r1!, {r0}
   266b0:	4147      	adcs	r7, r0
   266b2:	c280      	stmia	r2!, {r7}
   266b4:	cb80      	ldmia	r3!, {r7}
   266b6:	c901      	ldmia	r1!, {r0}
   266b8:	4147      	adcs	r7, r0
   266ba:	c280      	stmia	r2!, {r7}
   266bc:	cb80      	ldmia	r3!, {r7}
   266be:	c901      	ldmia	r1!, {r0}
   266c0:	4147      	adcs	r7, r0
   266c2:	c280      	stmia	r2!, {r7}
   266c4:	cb80      	ldmia	r3!, {r7}
   266c6:	c901      	ldmia	r1!, {r0}
   266c8:	4147      	adcs	r7, r0
   266ca:	c280      	stmia	r2!, {r7}
   266cc:	cb80      	ldmia	r3!, {r7}
   266ce:	c901      	ldmia	r1!, {r0}
   266d0:	4147      	adcs	r7, r0
   266d2:	c280      	stmia	r2!, {r7}
   266d4:	4176      	adcs	r6, r6
   266d6:	19ad      	adds	r5, r5, r6
   266d8:	d4cf      	bmi.n	2667a <vli_mmod_fast_secp256r1+0x5ba>
   266da:	b00d      	add	sp, #52	; 0x34
   266dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266e0:	0003d100 	.word	0x0003d100
	...

000266f0 <double_jacobian_default>:
   266f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266f4:	f993 9000 	ldrsb.w	r9, [r3]
   266f8:	f1b9 0f00 	cmp.w	r9, #0
   266fc:	b0a9      	sub	sp, #164	; 0xa4
   266fe:	dd15      	ble.n	2672c <double_jacobian_default+0x3c>
   26700:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   26704:	b2e4      	uxtb	r4, r4
   26706:	1f15      	subs	r5, r2, #4
   26708:	9405      	str	r4, [sp, #20]
   2670a:	00a4      	lsls	r4, r4, #2
   2670c:	462e      	mov	r6, r5
   2670e:	9406      	str	r4, [sp, #24]
   26710:	1914      	adds	r4, r2, r4
   26712:	4625      	mov	r5, r4
   26714:	46b6      	mov	lr, r6
   26716:	2400      	movs	r4, #0
   26718:	4637      	mov	r7, r6
   2671a:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   2671e:	4575      	cmp	r5, lr
   26720:	ea44 0406 	orr.w	r4, r4, r6
   26724:	d1f9      	bne.n	2671a <double_jacobian_default+0x2a>
   26726:	9703      	str	r7, [sp, #12]
   26728:	9504      	str	r5, [sp, #16]
   2672a:	b914      	cbnz	r4, 26732 <double_jacobian_default+0x42>
   2672c:	b029      	add	sp, #164	; 0xa4
   2672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26732:	4698      	mov	r8, r3
   26734:	4615      	mov	r5, r2
   26736:	4604      	mov	r4, r0
   26738:	9207      	str	r2, [sp, #28]
   2673a:	a818      	add	r0, sp, #96	; 0x60
   2673c:	460a      	mov	r2, r1
   2673e:	464b      	mov	r3, r9
   26740:	468a      	mov	sl, r1
   26742:	f7ff f995 	bl	25a70 <uECC_vli_mult>
   26746:	a918      	add	r1, sp, #96	; 0x60
   26748:	a808      	add	r0, sp, #32
   2674a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2674e:	4798      	blx	r3
   26750:	aa08      	add	r2, sp, #32
   26752:	a818      	add	r0, sp, #96	; 0x60
   26754:	f998 3000 	ldrsb.w	r3, [r8]
   26758:	4621      	mov	r1, r4
   2675a:	f7ff f989 	bl	25a70 <uECC_vli_mult>
   2675e:	a918      	add	r1, sp, #96	; 0x60
   26760:	a810      	add	r0, sp, #64	; 0x40
   26762:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   26766:	4798      	blx	r3
   26768:	aa08      	add	r2, sp, #32
   2676a:	4611      	mov	r1, r2
   2676c:	a818      	add	r0, sp, #96	; 0x60
   2676e:	f998 3000 	ldrsb.w	r3, [r8]
   26772:	f7ff f97d 	bl	25a70 <uECC_vli_mult>
   26776:	a918      	add	r1, sp, #96	; 0x60
   26778:	a808      	add	r0, sp, #32
   2677a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2677e:	4798      	blx	r3
   26780:	462a      	mov	r2, r5
   26782:	a818      	add	r0, sp, #96	; 0x60
   26784:	f998 3000 	ldrsb.w	r3, [r8]
   26788:	4651      	mov	r1, sl
   2678a:	f7ff f971 	bl	25a70 <uECC_vli_mult>
   2678e:	a918      	add	r1, sp, #96	; 0x60
   26790:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   26794:	4650      	mov	r0, sl
   26796:	4798      	blx	r3
   26798:	462a      	mov	r2, r5
   2679a:	a818      	add	r0, sp, #96	; 0x60
   2679c:	f998 3000 	ldrsb.w	r3, [r8]
   267a0:	4629      	mov	r1, r5
   267a2:	f7ff f965 	bl	25a70 <uECC_vli_mult>
   267a6:	f108 0b04 	add.w	fp, r8, #4
   267aa:	a918      	add	r1, sp, #96	; 0x60
   267ac:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   267b0:	4628      	mov	r0, r5
   267b2:	4798      	blx	r3
   267b4:	465b      	mov	r3, fp
   267b6:	462a      	mov	r2, r5
   267b8:	4621      	mov	r1, r4
   267ba:	4620      	mov	r0, r4
   267bc:	f8cd 9000 	str.w	r9, [sp]
   267c0:	f7ff fae6 	bl	25d90 <uECC_vli_modAdd>
   267c4:	465b      	mov	r3, fp
   267c6:	462a      	mov	r2, r5
   267c8:	4629      	mov	r1, r5
   267ca:	4628      	mov	r0, r5
   267cc:	f8cd 9000 	str.w	r9, [sp]
   267d0:	f7ff fade 	bl	25d90 <uECC_vli_modAdd>
   267d4:	465b      	mov	r3, fp
   267d6:	462a      	mov	r2, r5
   267d8:	4621      	mov	r1, r4
   267da:	4628      	mov	r0, r5
   267dc:	f8cd 9000 	str.w	r9, [sp]
   267e0:	f7ff fb2e 	bl	25e40 <uECC_vli_modSub>
   267e4:	462a      	mov	r2, r5
   267e6:	a818      	add	r0, sp, #96	; 0x60
   267e8:	f998 3000 	ldrsb.w	r3, [r8]
   267ec:	4621      	mov	r1, r4
   267ee:	f7ff f93f 	bl	25a70 <uECC_vli_mult>
   267f2:	a918      	add	r1, sp, #96	; 0x60
   267f4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   267f8:	4620      	mov	r0, r4
   267fa:	4798      	blx	r3
   267fc:	465b      	mov	r3, fp
   267fe:	4622      	mov	r2, r4
   26800:	4621      	mov	r1, r4
   26802:	4628      	mov	r0, r5
   26804:	f8cd 9000 	str.w	r9, [sp]
   26808:	f7ff fac2 	bl	25d90 <uECC_vli_modAdd>
   2680c:	465b      	mov	r3, fp
   2680e:	f8cd 9000 	str.w	r9, [sp]
   26812:	462a      	mov	r2, r5
   26814:	4621      	mov	r1, r4
   26816:	4620      	mov	r0, r4
   26818:	f7ff faba 	bl	25d90 <uECC_vli_modAdd>
   2681c:	6823      	ldr	r3, [r4, #0]
   2681e:	f013 0301 	ands.w	r3, r3, #1
   26822:	d16a      	bne.n	268fa <double_jacobian_default+0x20a>
   26824:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   26828:	4294      	cmp	r4, r2
   2682a:	d20e      	bcs.n	2684a <double_jacobian_default+0x15a>
   2682c:	9f03      	ldr	r7, [sp, #12]
   2682e:	9d04      	ldr	r5, [sp, #16]
   26830:	9e07      	ldr	r6, [sp, #28]
   26832:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   26836:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   2683a:	4294      	cmp	r4, r2
   2683c:	6013      	str	r3, [r2, #0]
   2683e:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   26842:	d3f6      	bcc.n	26832 <double_jacobian_default+0x142>
   26844:	9703      	str	r7, [sp, #12]
   26846:	9504      	str	r5, [sp, #16]
   26848:	9607      	str	r6, [sp, #28]
   2684a:	4622      	mov	r2, r4
   2684c:	4621      	mov	r1, r4
   2684e:	f998 3000 	ldrsb.w	r3, [r8]
   26852:	a818      	add	r0, sp, #96	; 0x60
   26854:	f7ff f90c 	bl	25a70 <uECC_vli_mult>
   26858:	9d07      	ldr	r5, [sp, #28]
   2685a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2685e:	4628      	mov	r0, r5
   26860:	a918      	add	r1, sp, #96	; 0x60
   26862:	4798      	blx	r3
   26864:	4629      	mov	r1, r5
   26866:	4628      	mov	r0, r5
   26868:	465b      	mov	r3, fp
   2686a:	aa10      	add	r2, sp, #64	; 0x40
   2686c:	f8cd 9000 	str.w	r9, [sp]
   26870:	f7ff fae6 	bl	25e40 <uECC_vli_modSub>
   26874:	4629      	mov	r1, r5
   26876:	4628      	mov	r0, r5
   26878:	465b      	mov	r3, fp
   2687a:	aa10      	add	r2, sp, #64	; 0x40
   2687c:	f8cd 9000 	str.w	r9, [sp]
   26880:	f7ff fade 	bl	25e40 <uECC_vli_modSub>
   26884:	a910      	add	r1, sp, #64	; 0x40
   26886:	462a      	mov	r2, r5
   26888:	4608      	mov	r0, r1
   2688a:	465b      	mov	r3, fp
   2688c:	f8cd 9000 	str.w	r9, [sp]
   26890:	f7ff fad6 	bl	25e40 <uECC_vli_modSub>
   26894:	aa10      	add	r2, sp, #64	; 0x40
   26896:	4621      	mov	r1, r4
   26898:	f998 3000 	ldrsb.w	r3, [r8]
   2689c:	a818      	add	r0, sp, #96	; 0x60
   2689e:	f7ff f8e7 	bl	25a70 <uECC_vli_mult>
   268a2:	4620      	mov	r0, r4
   268a4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   268a8:	a918      	add	r1, sp, #96	; 0x60
   268aa:	4798      	blx	r3
   268ac:	aa08      	add	r2, sp, #32
   268ae:	465b      	mov	r3, fp
   268b0:	4621      	mov	r1, r4
   268b2:	f8cd 9000 	str.w	r9, [sp]
   268b6:	4610      	mov	r0, r2
   268b8:	f7ff fac2 	bl	25e40 <uECC_vli_modSub>
   268bc:	9f03      	ldr	r7, [sp, #12]
   268be:	9d04      	ldr	r5, [sp, #16]
   268c0:	3c04      	subs	r4, #4
   268c2:	463b      	mov	r3, r7
   268c4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   268c8:	f844 2f04 	str.w	r2, [r4, #4]!
   268cc:	42ab      	cmp	r3, r5
   268ce:	d1f9      	bne.n	268c4 <double_jacobian_default+0x1d4>
   268d0:	9b06      	ldr	r3, [sp, #24]
   268d2:	4453      	add	r3, sl
   268d4:	4619      	mov	r1, r3
   268d6:	f1aa 0304 	sub.w	r3, sl, #4
   268da:	f853 2f04 	ldr.w	r2, [r3, #4]!
   268de:	f847 2f04 	str.w	r2, [r7, #4]!
   268e2:	428b      	cmp	r3, r1
   268e4:	d1f9      	bne.n	268da <double_jacobian_default+0x1ea>
   268e6:	9a05      	ldr	r2, [sp, #20]
   268e8:	3201      	adds	r2, #1
   268ea:	0092      	lsls	r2, r2, #2
   268ec:	a908      	add	r1, sp, #32
   268ee:	4650      	mov	r0, sl
   268f0:	f7e5 fc36 	bl	c160 <memcpy>
   268f4:	b029      	add	sp, #164	; 0xa4
   268f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268fa:	f1c9 0208 	rsb	r2, r9, #8
   268fe:	00d2      	lsls	r2, r2, #3
   26900:	3201      	adds	r2, #1
   26902:	4623      	mov	r3, r4
   26904:	4659      	mov	r1, fp
   26906:	4620      	mov	r0, r4
   26908:	2500      	movs	r5, #0
   2690a:	a704      	add	r7, pc, #16	; (adr r7, 2691c <double_jacobian_default+0x22c>)
   2690c:	f3af 8000 	nop.w
   26910:	19d2      	adds	r2, r2, r7
   26912:	c880      	ldmia	r0!, {r7}
   26914:	c940      	ldmia	r1!, {r6}
   26916:	19bf      	adds	r7, r7, r6
   26918:	c380      	stmia	r3!, {r7}
   2691a:	4710      	bx	r2
   2691c:	c880      	ldmia	r0!, {r7}
   2691e:	c940      	ldmia	r1!, {r6}
   26920:	4177      	adcs	r7, r6
   26922:	c380      	stmia	r3!, {r7}
   26924:	c880      	ldmia	r0!, {r7}
   26926:	c940      	ldmia	r1!, {r6}
   26928:	4177      	adcs	r7, r6
   2692a:	c380      	stmia	r3!, {r7}
   2692c:	c880      	ldmia	r0!, {r7}
   2692e:	c940      	ldmia	r1!, {r6}
   26930:	4177      	adcs	r7, r6
   26932:	c380      	stmia	r3!, {r7}
   26934:	c880      	ldmia	r0!, {r7}
   26936:	c940      	ldmia	r1!, {r6}
   26938:	4177      	adcs	r7, r6
   2693a:	c380      	stmia	r3!, {r7}
   2693c:	c880      	ldmia	r0!, {r7}
   2693e:	c940      	ldmia	r1!, {r6}
   26940:	4177      	adcs	r7, r6
   26942:	c380      	stmia	r3!, {r7}
   26944:	c880      	ldmia	r0!, {r7}
   26946:	c940      	ldmia	r1!, {r6}
   26948:	4177      	adcs	r7, r6
   2694a:	c380      	stmia	r3!, {r7}
   2694c:	c880      	ldmia	r0!, {r7}
   2694e:	c940      	ldmia	r1!, {r6}
   26950:	4177      	adcs	r7, r6
   26952:	c380      	stmia	r3!, {r7}
   26954:	416d      	adcs	r5, r5
   26956:	ea4f 0189 	mov.w	r1, r9, lsl #2
   2695a:	1863      	adds	r3, r4, r1
   2695c:	429c      	cmp	r4, r3
   2695e:	46ae      	mov	lr, r5
   26960:	d20f      	bcs.n	26982 <double_jacobian_default+0x292>
   26962:	9f03      	ldr	r7, [sp, #12]
   26964:	9d04      	ldr	r5, [sp, #16]
   26966:	9e07      	ldr	r6, [sp, #28]
   26968:	2200      	movs	r2, #0
   2696a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   2696e:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   26972:	429c      	cmp	r4, r3
   26974:	601a      	str	r2, [r3, #0]
   26976:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   2697a:	d3f6      	bcc.n	2696a <double_jacobian_default+0x27a>
   2697c:	9703      	str	r7, [sp, #12]
   2697e:	9504      	str	r5, [sp, #16]
   26980:	9607      	str	r6, [sp, #28]
   26982:	3904      	subs	r1, #4
   26984:	5863      	ldr	r3, [r4, r1]
   26986:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2698a:	5063      	str	r3, [r4, r1]
   2698c:	e75d      	b.n	2684a <double_jacobian_default+0x15a>
   2698e:	bf00      	nop

00026990 <uECC_secp256r1>:
   26990:	4800      	ldr	r0, [pc, #0]	; (26994 <uECC_secp256r1+0x4>)
   26992:	4770      	bx	lr
   26994:	0003d0fc 	.word	0x0003d0fc

00026998 <uECC_valid_point>:
   26998:	b5f0      	push	{r4, r5, r6, r7, lr}
   2699a:	f991 3000 	ldrsb.w	r3, [r1]
   2699e:	b2da      	uxtb	r2, r3
   269a0:	0057      	lsls	r7, r2, #1
   269a2:	b2ff      	uxtb	r7, r7
   269a4:	b27c      	sxtb	r4, r7
   269a6:	2c00      	cmp	r4, #0
   269a8:	b099      	sub	sp, #100	; 0x64
   269aa:	dd28      	ble.n	269fe <uECC_valid_point+0x66>
   269ac:	3f01      	subs	r7, #1
   269ae:	b2ff      	uxtb	r7, r7
   269b0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   269b4:	1f04      	subs	r4, r0, #4
   269b6:	2500      	movs	r5, #0
   269b8:	f854 6f04 	ldr.w	r6, [r4, #4]!
   269bc:	42bc      	cmp	r4, r7
   269be:	ea45 0506 	orr.w	r5, r5, r6
   269c2:	d1f9      	bne.n	269b8 <uECC_valid_point+0x20>
   269c4:	b1f5      	cbz	r5, 26a04 <uECC_valid_point+0x6c>
   269c6:	1e55      	subs	r5, r2, #1
   269c8:	b26d      	sxtb	r5, r5
   269ca:	2d00      	cmp	r5, #0
   269cc:	f101 0e04 	add.w	lr, r1, #4
   269d0:	db15      	blt.n	269fe <uECC_valid_point+0x66>
   269d2:	b22e      	sxth	r6, r5
   269d4:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   269d8:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   269dc:	4594      	cmp	ip, r2
   269de:	d814      	bhi.n	26a0a <uECC_valid_point+0x72>
   269e0:	d30d      	bcc.n	269fe <uECC_valid_point+0x66>
   269e2:	462c      	mov	r4, r5
   269e4:	e006      	b.n	269f4 <uECC_valid_point+0x5c>
   269e6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   269ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   269ee:	4297      	cmp	r7, r2
   269f0:	d80b      	bhi.n	26a0a <uECC_valid_point+0x72>
   269f2:	d304      	bcc.n	269fe <uECC_valid_point+0x66>
   269f4:	3c01      	subs	r4, #1
   269f6:	b264      	sxtb	r4, r4
   269f8:	1c67      	adds	r7, r4, #1
   269fa:	b222      	sxth	r2, r4
   269fc:	d1f3      	bne.n	269e6 <uECC_valid_point+0x4e>
   269fe:	2000      	movs	r0, #0
   26a00:	b019      	add	sp, #100	; 0x64
   26a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a04:	4628      	mov	r0, r5
   26a06:	b019      	add	sp, #100	; 0x64
   26a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26a0a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   26a0e:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   26a12:	4564      	cmp	r4, ip
   26a14:	d310      	bcc.n	26a38 <uECC_valid_point+0xa0>
   26a16:	d8f2      	bhi.n	269fe <uECC_valid_point+0x66>
   26a18:	462c      	mov	r4, r5
   26a1a:	e006      	b.n	26a2a <uECC_valid_point+0x92>
   26a1c:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   26a20:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   26a24:	45bc      	cmp	ip, r7
   26a26:	d807      	bhi.n	26a38 <uECC_valid_point+0xa0>
   26a28:	d3e9      	bcc.n	269fe <uECC_valid_point+0x66>
   26a2a:	3c01      	subs	r4, #1
   26a2c:	b264      	sxtb	r4, r4
   26a2e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   26a32:	b227      	sxth	r7, r4
   26a34:	d1f2      	bne.n	26a1c <uECC_valid_point+0x84>
   26a36:	e7e2      	b.n	269fe <uECC_valid_point+0x66>
   26a38:	460f      	mov	r7, r1
   26a3a:	4604      	mov	r4, r0
   26a3c:	4611      	mov	r1, r2
   26a3e:	a808      	add	r0, sp, #32
   26a40:	f7ff f816 	bl	25a70 <uECC_vli_mult>
   26a44:	a908      	add	r1, sp, #32
   26a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   26a4a:	4668      	mov	r0, sp
   26a4c:	4798      	blx	r3
   26a4e:	a808      	add	r0, sp, #32
   26a50:	4621      	mov	r1, r4
   26a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   26a56:	463a      	mov	r2, r7
   26a58:	4798      	blx	r3
   26a5a:	2000      	movs	r0, #0
   26a5c:	e000      	b.n	26a60 <uECC_valid_point+0xc8>
   26a5e:	b22e      	sxth	r6, r5
   26a60:	ab18      	add	r3, sp, #96	; 0x60
   26a62:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   26a66:	3d01      	subs	r5, #1
   26a68:	f856 2c60 	ldr.w	r2, [r6, #-96]
   26a6c:	f856 3c40 	ldr.w	r3, [r6, #-64]
   26a70:	b26d      	sxtb	r5, r5
   26a72:	4053      	eors	r3, r2
   26a74:	4318      	orrs	r0, r3
   26a76:	1c6b      	adds	r3, r5, #1
   26a78:	d1f1      	bne.n	26a5e <uECC_valid_point+0xc6>
   26a7a:	fab0 f080 	clz	r0, r0
   26a7e:	0940      	lsrs	r0, r0, #5
   26a80:	e7be      	b.n	26a00 <uECC_valid_point+0x68>
   26a82:	bf00      	nop

00026a84 <uECC_valid_public_key>:
   26a84:	f7ff bf88 	b.w	26998 <uECC_valid_point>

00026a88 <am_bsp_low_power_init>:
   26a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a8a:	f011 f9cd 	bl	37e28 <am_hal_itm_disable>
   26a8e:	2000      	movs	r0, #0
   26a90:	f7fa fb96 	bl	211c0 <am_util_stdio_printf_init>
   26a94:	4b12      	ldr	r3, [pc, #72]	; (26ae0 <am_bsp_low_power_init+0x58>)
   26a96:	4f13      	ldr	r7, [pc, #76]	; (26ae4 <am_bsp_low_power_init+0x5c>)
   26a98:	6819      	ldr	r1, [r3, #0]
   26a9a:	2021      	movs	r0, #33	; 0x21
   26a9c:	f010 ffec 	bl	37a78 <am_hal_gpio_pinconfig>
   26aa0:	f011 fb1c 	bl	380dc <am_hal_pwrctrl_low_power_init>
   26aa4:	2001      	movs	r0, #1
   26aa6:	f011 fc07 	bl	382b8 <am_hal_rtc_osc_select>
   26aaa:	2100      	movs	r1, #0
   26aac:	2003      	movs	r0, #3
   26aae:	f010 fea5 	bl	377fc <am_hal_clkgen_control>
   26ab2:	f011 fc09 	bl	382c8 <am_hal_rtc_osc_disable>
   26ab6:	4b0c      	ldr	r3, [pc, #48]	; (26ae8 <am_bsp_low_power_init+0x60>)
   26ab8:	681e      	ldr	r6, [r3, #0]
   26aba:	2400      	movs	r4, #0
   26abc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   26ac0:	4631      	mov	r1, r6
   26ac2:	4628      	mov	r0, r5
   26ac4:	f010 ffd8 	bl	37a78 <am_hal_gpio_pinconfig>
   26ac8:	2103      	movs	r1, #3
   26aca:	4628      	mov	r0, r5
   26acc:	f011 f942 	bl	37d54 <am_hal_gpio_state_write>
   26ad0:	3401      	adds	r4, #1
   26ad2:	4628      	mov	r0, r5
   26ad4:	2100      	movs	r1, #0
   26ad6:	f011 f93d 	bl	37d54 <am_hal_gpio_state_write>
   26ada:	2c04      	cmp	r4, #4
   26adc:	d1ee      	bne.n	26abc <am_bsp_low_power_init+0x34>
   26ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26ae0:	00044298 	.word	0x00044298
   26ae4:	10018064 	.word	0x10018064
   26ae8:	0004429c 	.word	0x0004429c

00026aec <am_bsp_itm_printf_enable>:
   26aec:	b500      	push	{lr}
   26aee:	4b0b      	ldr	r3, [pc, #44]	; (26b1c <am_bsp_itm_printf_enable+0x30>)
   26af0:	b087      	sub	sp, #28
   26af2:	2201      	movs	r2, #1
   26af4:	601a      	str	r2, [r3, #0]
   26af6:	f011 f979 	bl	37dec <am_hal_itm_enable>
   26afa:	4b09      	ldr	r3, [pc, #36]	; (26b20 <am_bsp_itm_printf_enable+0x34>)
   26afc:	9301      	str	r3, [sp, #4]
   26afe:	a801      	add	r0, sp, #4
   26b00:	f011 fca4 	bl	3844c <am_hal_tpiu_enable>
   26b04:	4b07      	ldr	r3, [pc, #28]	; (26b24 <am_bsp_itm_printf_enable+0x38>)
   26b06:	2021      	movs	r0, #33	; 0x21
   26b08:	6819      	ldr	r1, [r3, #0]
   26b0a:	f010 ffb5 	bl	37a78 <am_hal_gpio_pinconfig>
   26b0e:	4806      	ldr	r0, [pc, #24]	; (26b28 <am_bsp_itm_printf_enable+0x3c>)
   26b10:	f7fa fb56 	bl	211c0 <am_util_stdio_printf_init>
   26b14:	b007      	add	sp, #28
   26b16:	f85d fb04 	ldr.w	pc, [sp], #4
   26b1a:	bf00      	nop
   26b1c:	10043fb4 	.word	0x10043fb4
   26b20:	000f4240 	.word	0x000f4240
   26b24:	0003d6d0 	.word	0x0003d6d0
   26b28:	00037ed5 	.word	0x00037ed5

00026b2c <save_stack>:
   26b2c:	4b04      	ldr	r3, [pc, #16]	; (26b40 <save_stack+0x14>)
   26b2e:	4a05      	ldr	r2, [pc, #20]	; (26b44 <save_stack+0x18>)
   26b30:	6818      	ldr	r0, [r3, #0]
   26b32:	4905      	ldr	r1, [pc, #20]	; (26b48 <save_stack+0x1c>)
   26b34:	4b05      	ldr	r3, [pc, #20]	; (26b4c <save_stack+0x20>)
   26b36:	6812      	ldr	r2, [r2, #0]
   26b38:	6008      	str	r0, [r1, #0]
   26b3a:	601a      	str	r2, [r3, #0]
   26b3c:	4770      	bx	lr
   26b3e:	bf00      	nop
   26b40:	10049f70 	.word	0x10049f70
   26b44:	10043fb8 	.word	0x10043fb8
   26b48:	10043fc0 	.word	0x10043fc0
   26b4c:	10043fbc 	.word	0x10043fbc

00026b50 <restore_stack>:
   26b50:	4b04      	ldr	r3, [pc, #16]	; (26b64 <restore_stack+0x14>)
   26b52:	4a05      	ldr	r2, [pc, #20]	; (26b68 <restore_stack+0x18>)
   26b54:	6818      	ldr	r0, [r3, #0]
   26b56:	4905      	ldr	r1, [pc, #20]	; (26b6c <restore_stack+0x1c>)
   26b58:	4b05      	ldr	r3, [pc, #20]	; (26b70 <restore_stack+0x20>)
   26b5a:	6812      	ldr	r2, [r2, #0]
   26b5c:	6008      	str	r0, [r1, #0]
   26b5e:	601a      	str	r2, [r3, #0]
   26b60:	4770      	bx	lr
   26b62:	bf00      	nop
   26b64:	10043fc0 	.word	0x10043fc0
   26b68:	10043fbc 	.word	0x10043fbc
   26b6c:	10049f70 	.word	0x10049f70
   26b70:	10043fb8 	.word	0x10043fb8

00026b74 <alloc_stack>:
   26b74:	2000      	movs	r0, #0
   26b76:	4770      	bx	lr

00026b78 <mips_update>:
   26b78:	4a35      	ldr	r2, [pc, #212]	; (26c50 <mips_update+0xd8>)
   26b7a:	4b36      	ldr	r3, [pc, #216]	; (26c54 <mips_update+0xdc>)
   26b7c:	6811      	ldr	r1, [r2, #0]
   26b7e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
   26b82:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   26b86:	6809      	ldr	r1, [r1, #0]
   26b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   26b8c:	4288      	cmp	r0, r1
   26b8e:	f102 0201 	add.w	r2, r2, #1
   26b92:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   26b96:	dd10      	ble.n	26bba <mips_update+0x42>
   26b98:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
   26b9c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
   26ba0:	428a      	cmp	r2, r1
   26ba2:	d014      	beq.n	26bce <mips_update+0x56>
   26ba4:	4a2c      	ldr	r2, [pc, #176]	; (26c58 <mips_update+0xe0>)
   26ba6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
   26baa:	6812      	ldr	r2, [r2, #0]
   26bac:	ed93 0a35 	vldr	s0, [r3, #212]	; 0xd4
   26bb0:	4290      	cmp	r0, r2
   26bb2:	dd3b      	ble.n	26c2c <mips_update+0xb4>
   26bb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   26bb8:	4770      	bx	lr
   26bba:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
   26bbe:	4288      	cmp	r0, r1
   26bc0:	bfb8      	it	lt
   26bc2:	f8c3 10dc 	strlt.w	r1, [r3, #220]	; 0xdc
   26bc6:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
   26bca:	428a      	cmp	r2, r1
   26bcc:	d1ea      	bne.n	26ba4 <mips_update+0x2c>
   26bce:	2900      	cmp	r1, #0
   26bd0:	b430      	push	{r4, r5}
   26bd2:	dd36      	ble.n	26c42 <mips_update+0xca>
   26bd4:	4a1f      	ldr	r2, [pc, #124]	; (26c54 <mips_update+0xdc>)
   26bd6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 26c5c <mips_update+0xe4>
   26bda:	eb03 0081 	add.w	r0, r3, r1, lsl #2
   26bde:	ecf2 7a01 	vldmia	r2!, {s15}
   26be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   26be6:	4282      	cmp	r2, r0
   26be8:	ee37 7a27 	vadd.f32	s14, s14, s15
   26bec:	d1f7      	bne.n	26bde <mips_update+0x66>
   26bee:	ee07 1a90 	vmov	s15, r1
   26bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   26bf6:	2200      	movs	r2, #0
   26bf8:	ee87 0a27 	vdiv.f32	s0, s14, s15
   26bfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   26c00:	4a15      	ldr	r2, [pc, #84]	; (26c58 <mips_update+0xe0>)
   26c02:	4817      	ldr	r0, [pc, #92]	; (26c60 <mips_update+0xe8>)
   26c04:	6812      	ldr	r2, [r2, #0]
   26c06:	a510      	add	r5, pc, #64	; (adr r5, 26c48 <mips_update+0xd0>)
   26c08:	e9d5 4500 	ldrd	r4, r5, [r5]
   26c0c:	4290      	cmp	r0, r2
   26c0e:	e9c3 4536 	strd	r4, r5, [r3, #216]	; 0xd8
   26c12:	e9c3 4538 	strd	r4, r5, [r3, #224]	; 0xe0
   26c16:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
   26c1a:	dc0e      	bgt.n	26c3a <mips_update+0xc2>
   26c1c:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   26c20:	4291      	cmp	r1, r2
   26c22:	bfb8      	it	lt
   26c24:	f8c3 20e4 	strlt.w	r2, [r3, #228]	; 0xe4
   26c28:	bc30      	pop	{r4, r5}
   26c2a:	4770      	bx	lr
   26c2c:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
   26c30:	4291      	cmp	r1, r2
   26c32:	bfb8      	it	lt
   26c34:	f8c3 20e4 	strlt.w	r2, [r3, #228]	; 0xe4
   26c38:	4770      	bx	lr
   26c3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
   26c3e:	bc30      	pop	{r4, r5}
   26c40:	4770      	bx	lr
   26c42:	ed9f 7a06 	vldr	s14, [pc, #24]	; 26c5c <mips_update+0xe4>
   26c46:	e7d2      	b.n	26bee <mips_update+0x76>
   26c48:	05f5e100 	.word	0x05f5e100
   26c4c:	00000000 	.word	0x00000000
   26c50:	10049f78 	.word	0x10049f78
   26c54:	10018088 	.word	0x10018088
   26c58:	10043fb8 	.word	0x10043fb8
   26c5c:	00000000 	.word	0x00000000
   26c60:	05f5e100 	.word	0x05f5e100

00026c64 <audio_enc_init>:
   26c64:	b508      	push	{r3, lr}
   26c66:	f000 f873 	bl	26d50 <octopus_encoder_create>
   26c6a:	4b02      	ldr	r3, [pc, #8]	; (26c74 <audio_enc_init+0x10>)
   26c6c:	6018      	str	r0, [r3, #0]
   26c6e:	2000      	movs	r0, #0
   26c70:	bd08      	pop	{r3, pc}
   26c72:	bf00      	nop
   26c74:	10049f74 	.word	0x10049f74

00026c78 <audio_enc_encode_frame>:
   26c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c7a:	4e1d      	ldr	r6, [pc, #116]	; (26cf0 <audio_enc_encode_frame+0x78>)
   26c7c:	4b1d      	ldr	r3, [pc, #116]	; (26cf4 <audio_enc_encode_frame+0x7c>)
   26c7e:	f8df c090 	ldr.w	ip, [pc, #144]	; 26d10 <audio_enc_encode_frame+0x98>
   26c82:	f8c6 c000 	str.w	ip, [r6]
   26c86:	4d1c      	ldr	r5, [pc, #112]	; (26cf8 <audio_enc_encode_frame+0x80>)
   26c88:	f8df c088 	ldr.w	ip, [pc, #136]	; 26d14 <audio_enc_encode_frame+0x9c>
   26c8c:	f8c3 c000 	str.w	ip, [r3]
   26c90:	4c1a      	ldr	r4, [pc, #104]	; (26cfc <audio_enc_encode_frame+0x84>)
   26c92:	f8df e084 	ldr.w	lr, [pc, #132]	; 26d18 <audio_enc_encode_frame+0xa0>
   26c96:	4e1a      	ldr	r6, [pc, #104]	; (26d00 <audio_enc_encode_frame+0x88>)
   26c98:	4f1a      	ldr	r7, [pc, #104]	; (26d04 <audio_enc_encode_frame+0x8c>)
   26c9a:	2300      	movs	r3, #0
   26c9c:	602b      	str	r3, [r5, #0]
   26c9e:	4d1a      	ldr	r5, [pc, #104]	; (26d08 <audio_enc_encode_frame+0x90>)
   26ca0:	f8ce 3000 	str.w	r3, [lr]
   26ca4:	6023      	str	r3, [r4, #0]
   26ca6:	6035      	str	r5, [r6, #0]
   26ca8:	682e      	ldr	r6, [r5, #0]
   26caa:	4c18      	ldr	r4, [pc, #96]	; (26d0c <audio_enc_encode_frame+0x94>)
   26cac:	603c      	str	r4, [r7, #0]
   26cae:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
   26cb2:	602e      	str	r6, [r5, #0]
   26cb4:	f8cc 3000 	str.w	r3, [ip]
   26cb8:	6023      	str	r3, [r4, #0]
   26cba:	6823      	ldr	r3, [r4, #0]
   26cbc:	f8df e05c 	ldr.w	lr, [pc, #92]	; 26d1c <audio_enc_encode_frame+0xa4>
   26cc0:	b083      	sub	sp, #12
   26cc2:	f043 0301 	orr.w	r3, r3, #1
   26cc6:	6023      	str	r3, [r4, #0]
   26cc8:	f44f 74a0 	mov.w	r4, #320	; 0x140
   26ccc:	9400      	str	r4, [sp, #0]
   26cce:	4613      	mov	r3, r2
   26cd0:	460a      	mov	r2, r1
   26cd2:	4601      	mov	r1, r0
   26cd4:	f8de 0000 	ldr.w	r0, [lr]
   26cd8:	f000 f86e 	bl	26db8 <octopus_encode>
   26cdc:	683b      	ldr	r3, [r7, #0]
   26cde:	681a      	ldr	r2, [r3, #0]
   26ce0:	601a      	str	r2, [r3, #0]
   26ce2:	4604      	mov	r4, r0
   26ce4:	f7ff ff48 	bl	26b78 <mips_update>
   26ce8:	4620      	mov	r0, r4
   26cea:	b003      	add	sp, #12
   26cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26cee:	bf00      	nop
   26cf0:	10049f70 	.word	0x10049f70
   26cf4:	10049f78 	.word	0x10049f78
   26cf8:	10043fb8 	.word	0x10043fb8
   26cfc:	10043fc0 	.word	0x10043fc0
   26d00:	10044f68 	.word	0x10044f68
   26d04:	10049f6c 	.word	0x10049f6c
   26d08:	e000edfc 	.word	0xe000edfc
   26d0c:	e0001000 	.word	0xe0001000
   26d10:	10044f6c 	.word	0x10044f6c
   26d14:	e0001004 	.word	0xe0001004
   26d18:	10043fbc 	.word	0x10043fbc
   26d1c:	10049f74 	.word	0x10049f74

00026d20 <opus_packet_get_nb_frames>:
   26d20:	2900      	cmp	r1, #0
   26d22:	dd0f      	ble.n	26d44 <opus_packet_get_nb_frames+0x24>
   26d24:	7803      	ldrb	r3, [r0, #0]
   26d26:	f013 0303 	ands.w	r3, r3, #3
   26d2a:	d009      	beq.n	26d40 <opus_packet_get_nb_frames+0x20>
   26d2c:	2b03      	cmp	r3, #3
   26d2e:	d105      	bne.n	26d3c <opus_packet_get_nb_frames+0x1c>
   26d30:	2901      	cmp	r1, #1
   26d32:	d00a      	beq.n	26d4a <opus_packet_get_nb_frames+0x2a>
   26d34:	7840      	ldrb	r0, [r0, #1]
   26d36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   26d3a:	4770      	bx	lr
   26d3c:	2002      	movs	r0, #2
   26d3e:	4770      	bx	lr
   26d40:	2001      	movs	r0, #1
   26d42:	4770      	bx	lr
   26d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26d48:	4770      	bx	lr
   26d4a:	f06f 0003 	mvn.w	r0, #3
   26d4e:	4770      	bx	lr

00026d50 <octopus_encoder_create>:
   26d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d52:	4c18      	ldr	r4, [pc, #96]	; (26db4 <octopus_encoder_create+0x64>)
   26d54:	22a0      	movs	r2, #160	; 0xa0
   26d56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   26d5a:	f44f 557a 	mov.w	r5, #16000	; 0x3e80
   26d5e:	2600      	movs	r6, #0
   26d60:	f8c4 2f0c 	str.w	r2, [r4, #3852]	; 0xf0c
   26d64:	f8c4 3f10 	str.w	r3, [r4, #3856]	; 0xf10
   26d68:	4607      	mov	r7, r0
   26d6a:	f8c4 6f28 	str.w	r6, [r4, #3880]	; 0xf28
   26d6e:	60a5      	str	r5, [r4, #8]
   26d70:	f002 fc5a 	bl	29628 <get_celt_handle>
   26d74:	4629      	mov	r1, r5
   26d76:	f8d4 3f28 	ldr.w	r3, [r4, #3880]	; 0xf28
   26d7a:	6020      	str	r0, [r4, #0]
   26d7c:	2201      	movs	r2, #1
   26d7e:	f005 fc6f 	bl	2c660 <celt_encoder_init>
   26d82:	b9a0      	cbnz	r0, 26dae <octopus_encoder_create+0x5e>
   26d84:	4602      	mov	r2, r0
   26d86:	f242 7120 	movw	r1, #10016	; 0x2720
   26d8a:	6820      	ldr	r0, [r4, #0]
   26d8c:	f005 faf6 	bl	2c37c <opus_custom_encoder_ctl>
   26d90:	2204      	movs	r2, #4
   26d92:	f640 71aa 	movw	r1, #4010	; 0xfaa
   26d96:	6820      	ldr	r0, [r4, #0]
   26d98:	f005 faf0 	bl	2c37c <opus_custom_encoder_ctl>
   26d9c:	f604 7324 	addw	r3, r4, #3876	; 0xf24
   26da0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   26da4:	f8c4 7f2c 	str.w	r7, [r4, #3884]	; 0xf2c
   26da8:	4620      	mov	r0, r4
   26daa:	601a      	str	r2, [r3, #0]
   26dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26dae:	4630      	mov	r0, r6
   26db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26db2:	bf00      	nop
   26db4:	10049f7c 	.word	0x10049f7c

00026db8 <octopus_encode>:
   26db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26dbc:	b095      	sub	sp, #84	; 0x54
   26dbe:	af02      	add	r7, sp, #8
   26dc0:	460c      	mov	r4, r1
   26dc2:	f8d0 1f2c 	ldr.w	r1, [r0, #3884]	; 0xf2c
   26dc6:	60f9      	str	r1, [r7, #12]
   26dc8:	4692      	mov	sl, r2
   26dca:	4698      	mov	r8, r3
   26dcc:	607b      	str	r3, [r7, #4]
   26dce:	4605      	mov	r5, r0
   26dd0:	6f3e      	ldr	r6, [r7, #112]	; 0x70
   26dd2:	f7ff feab 	bl	26b2c <save_stack>
   26dd6:	f7ff fecd 	bl	26b74 <alloc_stack>
   26dda:	68f9      	ldr	r1, [r7, #12]
   26ddc:	2900      	cmp	r1, #0
   26dde:	f000 8101 	beq.w	26fe4 <octopus_encode+0x22c>
   26de2:	f108 0b08 	add.w	fp, r8, #8
   26de6:	f240 40fc 	movw	r0, #1276	; 0x4fc
   26dea:	2200      	movs	r2, #0
   26dec:	42b0      	cmp	r0, r6
   26dee:	bfa8      	it	ge
   26df0:	4630      	movge	r0, r6
   26df2:	4592      	cmp	sl, r2
   26df4:	606a      	str	r2, [r5, #4]
   26df6:	f340 8151 	ble.w	2709c <octopus_encode+0x2e4>
   26dfa:	4296      	cmp	r6, r2
   26dfc:	f340 814e 	ble.w	2709c <octopus_encode+0x2e4>
   26e00:	ea4f 028a 	mov.w	r2, sl, lsl #2
   26e04:	2e01      	cmp	r6, #1
   26e06:	68ab      	ldr	r3, [r5, #8]
   26e08:	60ba      	str	r2, [r7, #8]
   26e0a:	d104      	bne.n	26e16 <octopus_encode+0x5e>
   26e0c:	4452      	add	r2, sl
   26e0e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   26e12:	f000 8148 	beq.w	270a6 <octopus_encode+0x2ee>
   26e16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26e1a:	4aa5      	ldr	r2, [pc, #660]	; (270b0 <octopus_encode+0x2f8>)
   26e1c:	f8d5 8000 	ldr.w	r8, [r5]
   26e20:	009b      	lsls	r3, r3, #2
   26e22:	fb82 1203 	smull	r1, r2, r2, r3
   26e26:	17db      	asrs	r3, r3, #31
   26e28:	ebc3 2622 	rsb	r6, r3, r2, asr #8
   26e2c:	f506 463b 	add.w	r6, r6, #47872	; 0xbb00
   26e30:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
   26e34:	3680      	adds	r6, #128	; 0x80
   26e36:	fb96 f6f3 	sdiv	r6, r6, r3
   26e3a:	4286      	cmp	r6, r0
   26e3c:	bfa8      	it	ge
   26e3e:	4606      	movge	r6, r0
   26e40:	2e01      	cmp	r6, #1
   26e42:	bfb8      	it	lt
   26e44:	2601      	movlt	r6, #1
   26e46:	2210      	movs	r2, #16
   26e48:	f640 71c4 	movw	r1, #4036	; 0xfc4
   26e4c:	4640      	mov	r0, r8
   26e4e:	f005 fa95 	bl	2c37c <opus_custom_encoder_ctl>
   26e52:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
   26e56:	f107 0214 	add.w	r2, r7, #20
   26e5a:	f242 711f 	movw	r1, #10015	; 0x271f
   26e5e:	4640      	mov	r0, r8
   26e60:	f005 fa8c 	bl	2c37c <opus_custom_encoder_ctl>
   26e64:	464a      	mov	r2, r9
   26e66:	f107 0018 	add.w	r0, r7, #24
   26e6a:	f10b 0101 	add.w	r1, fp, #1
   26e6e:	f005 fc5d 	bl	2c72c <ec_enc_init>
   26e72:	edd5 7a02 	vldr	s15, [r5, #8]
   26e76:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 270b4 <octopus_encode+0x2fc>
   26e7a:	f8d5 ef10 	ldr.w	lr, [r5, #3856]	; 0xf10
   26e7e:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 270b8 <octopus_encode+0x300>
   26e82:	eddf 4a8e 	vldr	s9, [pc, #568]	; 270bc <octopus_encode+0x304>
   26e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   26e8a:	f5ce 62c0 	rsb	r2, lr, #1536	; 0x600
   26e8e:	ee87 5a27 	vdiv.f32	s10, s14, s15
   26e92:	f240 33d7 	movw	r3, #983	; 0x3d7
   26e96:	fb82 0103 	smull	r0, r1, r2, r3
   26e9a:	68bb      	ldr	r3, [r7, #8]
   26e9c:	3307      	adds	r3, #7
   26e9e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   26ea2:	f023 0307 	bic.w	r3, r3, #7
   26ea6:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
   26eaa:	ebad 0d03 	sub.w	sp, sp, r3
   26eae:	f605 7014 	addw	r0, r5, #3860	; 0xf14
   26eb2:	eb0e 010c 	add.w	r1, lr, ip
   26eb6:	1ea2      	subs	r2, r4, #2
   26eb8:	ac02      	add	r4, sp, #8
   26eba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   26ebe:	ee75 5ac5 	vsub.f32	s11, s11, s10
   26ec2:	edd0 7a00 	vldr	s15, [r0]
   26ec6:	f8c5 1f10 	str.w	r1, [r5, #3856]	; 0xf10
   26eca:	4623      	mov	r3, r4
   26ecc:	4621      	mov	r1, r4
   26ece:	eb02 0c4a 	add.w	ip, r2, sl, lsl #1
   26ed2:	f932 ef02 	ldrsh.w	lr, [r2, #2]!
   26ed6:	ee07 ea10 	vmov	s14, lr
   26eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   26ede:	ee25 6aa7 	vmul.f32	s12, s11, s15
   26ee2:	ee27 7a04 	vmul.f32	s14, s14, s8
   26ee6:	4594      	cmp	ip, r2
   26ee8:	ee65 6a07 	vmul.f32	s13, s10, s14
   26eec:	ee37 7a67 	vsub.f32	s14, s14, s15
   26ef0:	ee76 7aa4 	vadd.f32	s15, s13, s9
   26ef4:	eca1 7a01 	vstmia	r1!, {s14}
   26ef8:	ee77 7a86 	vadd.f32	s15, s15, s12
   26efc:	d1e9      	bne.n	26ed2 <octopus_encode+0x11a>
   26efe:	edc0 7a00 	vstr	s15, [r0]
   26f02:	2211      	movs	r2, #17
   26f04:	f242 711c 	movw	r1, #10012	; 0x271c
   26f08:	4640      	mov	r0, r8
   26f0a:	603b      	str	r3, [r7, #0]
   26f0c:	f005 fa36 	bl	2c37c <opus_custom_encoder_ctl>
   26f10:	2201      	movs	r2, #1
   26f12:	f242 7118 	movw	r1, #10008	; 0x2718
   26f16:	4640      	mov	r0, r8
   26f18:	f005 fa30 	bl	2c37c <opus_custom_encoder_ctl>
   26f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26f20:	f640 71a2 	movw	r1, #4002	; 0xfa2
   26f24:	4640      	mov	r0, r8
   26f26:	f005 fa29 	bl	2c37c <opus_custom_encoder_ctl>
   26f2a:	2201      	movs	r2, #1
   26f2c:	f242 7112 	movw	r1, #10002	; 0x2712
   26f30:	4640      	mov	r0, r8
   26f32:	f005 fa23 	bl	2c37c <opus_custom_encoder_ctl>
   26f36:	f8d5 2f0c 	ldr.w	r2, [r5, #3852]	; 0xf0c
   26f3a:	683b      	ldr	r3, [r7, #0]
   26f3c:	eba2 0c0a 	sub.w	ip, r2, sl
   26f40:	f1bc 0f00 	cmp.w	ip, #0
   26f44:	f105 000c 	add.w	r0, r5, #12
   26f48:	dd5e      	ble.n	27008 <octopus_encode+0x250>
   26f4a:	68bb      	ldr	r3, [r7, #8]
   26f4c:	f103 010c 	add.w	r1, r3, #12
   26f50:	ea4f 028c 	mov.w	r2, ip, lsl #2
   26f54:	4429      	add	r1, r5
   26f56:	f7e5 f99d 	bl	c294 <memmove>
   26f5a:	f8d5 0f0c 	ldr.w	r0, [r5, #3852]	; 0xf0c
   26f5e:	68ba      	ldr	r2, [r7, #8]
   26f60:	eba0 000a 	sub.w	r0, r0, sl
   26f64:	3003      	adds	r0, #3
   26f66:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   26f6a:	4621      	mov	r1, r4
   26f6c:	f7e5 f8f8 	bl	c160 <memcpy>
   26f70:	683b      	ldr	r3, [r7, #0]
   26f72:	f605 7124 	addw	r1, r5, #3876	; 0xf24
   26f76:	edd1 5a00 	vldr	s11, [r1]
   26f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   26f7e:	eef4 5ae6 	vcmpe.f32	s11, s13
   26f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26f86:	d45e      	bmi.n	27046 <octopus_encode+0x28e>
   26f88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   26f8c:	600b      	str	r3, [r1, #0]
   26f8e:	f107 0018 	add.w	r0, r7, #24
   26f92:	4649      	mov	r1, r9
   26f94:	f005 fdfc 	bl	2cb90 <ec_enc_shrink>
   26f98:	2200      	movs	r2, #0
   26f9a:	f242 711a 	movw	r1, #10010	; 0x271a
   26f9e:	4640      	mov	r0, r8
   26fa0:	f005 f9ec 	bl	2c37c <opus_custom_encoder_ctl>
   26fa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   26fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26fa8:	fab0 f280 	clz	r2, r0
   26fac:	f1c2 0220 	rsb	r2, r2, #32
   26fb0:	1a9b      	subs	r3, r3, r2
   26fb2:	ebb3 0fc9 	cmp.w	r3, r9, lsl #3
   26fb6:	dd31      	ble.n	2701c <octopus_encode+0x264>
   26fb8:	2101      	movs	r1, #1
   26fba:	23b8      	movs	r3, #184	; 0xb8
   26fbc:	f88b 3000 	strb.w	r3, [fp]
   26fc0:	68fb      	ldr	r3, [r7, #12]
   26fc2:	6068      	str	r0, [r5, #4]
   26fc4:	b98b      	cbnz	r3, 26fea <octopus_encode+0x232>
   26fc6:	4658      	mov	r0, fp
   26fc8:	4632      	mov	r2, r6
   26fca:	f000 fa8d 	bl	274e8 <opus_packet_pad>
   26fce:	2800      	cmp	r0, #0
   26fd0:	d15f      	bne.n	27092 <octopus_encode+0x2da>
   26fd2:	f7ff fdbd 	bl	26b50 <restore_stack>
   26fd6:	68fb      	ldr	r3, [r7, #12]
   26fd8:	4433      	add	r3, r6
   26fda:	4618      	mov	r0, r3
   26fdc:	374c      	adds	r7, #76	; 0x4c
   26fde:	46bd      	mov	sp, r7
   26fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fe4:	f8d7 b004 	ldr.w	fp, [r7, #4]
   26fe8:	e6fd      	b.n	26de6 <octopus_encode+0x2e>
   26fea:	0233      	lsls	r3, r6, #8
   26fec:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
   26ff0:	687a      	ldr	r2, [r7, #4]
   26ff2:	ea43 2316 	orr.w	r3, r3, r6, lsr #8
   26ff6:	ea4f 4333 	mov.w	r3, r3, ror #16
   26ffa:	6013      	str	r3, [r2, #0]
   26ffc:	686b      	ldr	r3, [r5, #4]
   26ffe:	ba1b      	rev	r3, r3
   27000:	6053      	str	r3, [r2, #4]
   27002:	2308      	movs	r3, #8
   27004:	60fb      	str	r3, [r7, #12]
   27006:	e7de      	b.n	26fc6 <octopus_encode+0x20e>
   27008:	ebaa 0102 	sub.w	r1, sl, r2
   2700c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   27010:	0092      	lsls	r2, r2, #2
   27012:	60bb      	str	r3, [r7, #8]
   27014:	f7e5 f8a4 	bl	c160 <memcpy>
   27018:	68bb      	ldr	r3, [r7, #8]
   2701a:	e7aa      	b.n	26f72 <octopus_encode+0x1ba>
   2701c:	2200      	movs	r2, #0
   2701e:	f640 71a6 	movw	r1, #4006	; 0xfa6
   27022:	4640      	mov	r0, r8
   27024:	f005 f9aa 	bl	2c37c <opus_custom_encoder_ctl>
   27028:	f107 0318 	add.w	r3, r7, #24
   2702c:	e9cd 9300 	strd	r9, r3, [sp]
   27030:	4621      	mov	r1, r4
   27032:	4652      	mov	r2, sl
   27034:	4640      	mov	r0, r8
   27036:	2300      	movs	r3, #0
   27038:	f002 fb90 	bl	2975c <celt_encode_with_ec>
   2703c:	1e01      	subs	r1, r0, #0
   2703e:	db28      	blt.n	27092 <octopus_encode+0x2da>
   27040:	3101      	adds	r1, #1
   27042:	6b78      	ldr	r0, [r7, #52]	; 0x34
   27044:	e7b9      	b.n	26fba <octopus_encode+0x202>
   27046:	697a      	ldr	r2, [r7, #20]
   27048:	f64b 3c80 	movw	ip, #48000	; 0xbb80
   2704c:	6850      	ldr	r0, [r2, #4]
   2704e:	f8d2 e03c 	ldr.w	lr, [r2, #60]	; 0x3c
   27052:	68aa      	ldr	r2, [r5, #8]
   27054:	fb9c fcf2 	sdiv	ip, ip, r2
   27058:	fb90 f0fc 	sdiv	r0, r0, ip
   2705c:	2800      	cmp	r0, #0
   2705e:	dd93      	ble.n	26f88 <octopus_encode+0x1d0>
   27060:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   27064:	4672      	mov	r2, lr
   27066:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2706a:	edd2 7a00 	vldr	s15, [r2]
   2706e:	ed93 6a00 	vldr	s12, [r3]
   27072:	ee27 7aa7 	vmul.f32	s14, s15, s15
   27076:	4462      	add	r2, ip
   27078:	ee76 7ac7 	vsub.f32	s15, s13, s14
   2707c:	ee67 7aa5 	vmul.f32	s15, s15, s11
   27080:	ee77 7a87 	vadd.f32	s15, s15, s14
   27084:	ee67 7a86 	vmul.f32	s15, s15, s12
   27088:	ece3 7a01 	vstmia	r3!, {s15}
   2708c:	4283      	cmp	r3, r0
   2708e:	d1ec      	bne.n	2706a <octopus_encode+0x2b2>
   27090:	e77a      	b.n	26f88 <octopus_encode+0x1d0>
   27092:	f7ff fd5d 	bl	26b50 <restore_stack>
   27096:	f06f 0002 	mvn.w	r0, #2
   2709a:	e79f      	b.n	26fdc <octopus_encode+0x224>
   2709c:	f7ff fd58 	bl	26b50 <restore_stack>
   270a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   270a4:	e79a      	b.n	26fdc <octopus_encode+0x224>
   270a6:	f7ff fd53 	bl	26b50 <restore_stack>
   270aa:	f06f 0001 	mvn.w	r0, #1
   270ae:	e795      	b.n	26fdc <octopus_encode+0x224>
   270b0:	66666667 	.word	0x66666667
   270b4:	41973334 	.word	0x41973334
   270b8:	38000000 	.word	0x38000000
   270bc:	0da24260 	.word	0x0da24260

000270c0 <opus_repacketizer_out_range_impl>:
   270c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   270c4:	f1b1 0800 	subs.w	r8, r1, #0
   270c8:	b085      	sub	sp, #20
   270ca:	f2c0 81fe 	blt.w	274ca <opus_repacketizer_out_range_impl+0x40a>
   270ce:	4590      	cmp	r8, r2
   270d0:	f280 81fb 	bge.w	274ca <opus_repacketizer_out_range_impl+0x40a>
   270d4:	6841      	ldr	r1, [r0, #4]
   270d6:	4291      	cmp	r1, r2
   270d8:	f2c0 81f7 	blt.w	274ca <opus_repacketizer_out_range_impl+0x40a>
   270dc:	eba2 0908 	sub.w	r9, r2, r8
   270e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   270e2:	f100 05c8 	add.w	r5, r0, #200	; 0xc8
   270e6:	eb05 0b48 	add.w	fp, r5, r8, lsl #1
   270ea:	2a00      	cmp	r2, #0
   270ec:	d15d      	bne.n	271aa <opus_repacketizer_out_range_impl+0xea>
   270ee:	f1b9 0f01 	cmp.w	r9, #1
   270f2:	4617      	mov	r7, r2
   270f4:	9300      	str	r3, [sp, #0]
   270f6:	4606      	mov	r6, r0
   270f8:	d065      	beq.n	271c6 <opus_repacketizer_out_range_impl+0x106>
   270fa:	f1b9 0f02 	cmp.w	r9, #2
   270fe:	f000 81ac 	beq.w	2745a <opus_repacketizer_out_range_impl+0x39a>
   27102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   27104:	f935 5018 	ldrsh.w	r5, [r5, r8, lsl #1]
   27108:	2b00      	cmp	r3, #0
   2710a:	f040 819c 	bne.w	27446 <opus_repacketizer_out_range_impl+0x386>
   2710e:	461f      	mov	r7, r3
   27110:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
   27114:	42ab      	cmp	r3, r5
   27116:	f040 8088 	bne.w	2722a <opus_repacketizer_out_range_impl+0x16a>
   2711a:	f10b 0102 	add.w	r1, fp, #2
   2711e:	2301      	movs	r3, #1
   27120:	e003      	b.n	2712a <opus_repacketizer_out_range_impl+0x6a>
   27122:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
   27126:	42aa      	cmp	r2, r5
   27128:	d17f      	bne.n	2722a <opus_repacketizer_out_range_impl+0x16a>
   2712a:	3301      	adds	r3, #1
   2712c:	4599      	cmp	r9, r3
   2712e:	dcf8      	bgt.n	27122 <opus_repacketizer_out_range_impl+0x62>
   27130:	fb09 7705 	mla	r7, r9, r5, r7
   27134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27136:	3702      	adds	r7, #2
   27138:	42bb      	cmp	r3, r7
   2713a:	f2c0 81cb 	blt.w	274d4 <opus_repacketizer_out_range_impl+0x414>
   2713e:	9a00      	ldr	r2, [sp, #0]
   27140:	7831      	ldrb	r1, [r6, #0]
   27142:	4614      	mov	r4, r2
   27144:	f041 0103 	orr.w	r1, r1, #3
   27148:	fa5f f389 	uxtb.w	r3, r9
   2714c:	f804 1b02 	strb.w	r1, [r4], #2
   27150:	7053      	strb	r3, [r2, #1]
   27152:	9a10      	ldr	r2, [sp, #64]	; 0x40
   27154:	2a00      	cmp	r2, #0
   27156:	f040 819e 	bne.w	27496 <opus_repacketizer_out_range_impl+0x3d6>
   2715a:	f1ab 0502 	sub.w	r5, fp, #2
   2715e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   27160:	2b00      	cmp	r3, #0
   27162:	d158      	bne.n	27216 <opus_repacketizer_out_range_impl+0x156>
   27164:	eb06 0688 	add.w	r6, r6, r8, lsl #2
   27168:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
   2716c:	3608      	adds	r6, #8
   2716e:	f1ab 0b02 	sub.w	fp, fp, #2
   27172:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
   27176:	f856 1b04 	ldr.w	r1, [r6], #4
   2717a:	4620      	mov	r0, r4
   2717c:	f7e5 f88a 	bl	c294 <memmove>
   27180:	f9b5 3000 	ldrsh.w	r3, [r5]
   27184:	455d      	cmp	r5, fp
   27186:	441c      	add	r4, r3
   27188:	d1f3      	bne.n	27172 <opus_repacketizer_out_range_impl+0xb2>
   2718a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2718c:	b14b      	cbz	r3, 271a2 <opus_repacketizer_out_range_impl+0xe2>
   2718e:	9b00      	ldr	r3, [sp, #0]
   27190:	990e      	ldr	r1, [sp, #56]	; 0x38
   27192:	440b      	add	r3, r1
   27194:	42a3      	cmp	r3, r4
   27196:	d904      	bls.n	271a2 <opus_repacketizer_out_range_impl+0xe2>
   27198:	1b1a      	subs	r2, r3, r4
   2719a:	4620      	mov	r0, r4
   2719c:	2100      	movs	r1, #0
   2719e:	f7e5 f8dd 	bl	c35c <memset>
   271a2:	4638      	mov	r0, r7
   271a4:	b005      	add	sp, #20
   271a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271aa:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
   271ae:	3901      	subs	r1, #1
   271b0:	9300      	str	r3, [sp, #0]
   271b2:	f93b 1011 	ldrsh.w	r1, [fp, r1, lsl #1]
   271b6:	29fb      	cmp	r1, #251	; 0xfb
   271b8:	bfcc      	ite	gt
   271ba:	2702      	movgt	r7, #2
   271bc:	2701      	movle	r7, #1
   271be:	f1b9 0f01 	cmp.w	r9, #1
   271c2:	4606      	mov	r6, r0
   271c4:	d199      	bne.n	270fa <opus_repacketizer_out_range_impl+0x3a>
   271c6:	f935 3018 	ldrsh.w	r3, [r5, r8, lsl #1]
   271ca:	3301      	adds	r3, #1
   271cc:	441f      	add	r7, r3
   271ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   271d0:	429f      	cmp	r7, r3
   271d2:	f300 817f 	bgt.w	274d4 <opus_repacketizer_out_range_impl+0x414>
   271d6:	7803      	ldrb	r3, [r0, #0]
   271d8:	9c00      	ldr	r4, [sp, #0]
   271da:	f023 0303 	bic.w	r3, r3, #3
   271de:	f804 3b01 	strb.w	r3, [r4], #1
   271e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   271e4:	2b00      	cmp	r3, #0
   271e6:	d0b8      	beq.n	2715a <opus_repacketizer_out_range_impl+0x9a>
   271e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   271ea:	42bb      	cmp	r3, r7
   271ec:	ddb5      	ble.n	2715a <opus_repacketizer_out_range_impl+0x9a>
   271ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   271f0:	f935 5018 	ldrsh.w	r5, [r5, r8, lsl #1]
   271f4:	2b00      	cmp	r3, #0
   271f6:	f000 8166 	beq.w	274c6 <opus_repacketizer_out_range_impl+0x406>
   271fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   271fe:	3b01      	subs	r3, #1
   27200:	f93b 3013 	ldrsh.w	r3, [fp, r3, lsl #1]
   27204:	2bfb      	cmp	r3, #251	; 0xfb
   27206:	bfcc      	ite	gt
   27208:	2702      	movgt	r7, #2
   2720a:	2701      	movle	r7, #1
   2720c:	f1b9 0f01 	cmp.w	r9, #1
   27210:	f47f af7e 	bne.w	27110 <opus_repacketizer_out_range_impl+0x50>
   27214:	e78c      	b.n	27130 <opus_repacketizer_out_range_impl+0x70>
   27216:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   2721a:	3b01      	subs	r3, #1
   2721c:	4621      	mov	r1, r4
   2721e:	f93b 0013 	ldrsh.w	r0, [fp, r3, lsl #1]
   27222:	f008 f9af 	bl	2f584 <encode_size>
   27226:	4404      	add	r4, r0
   27228:	e79c      	b.n	27164 <opus_repacketizer_out_range_impl+0xa4>
   2722a:	f1ab 0502 	sub.w	r5, fp, #2
   2722e:	1cb8      	adds	r0, r7, #2
   27230:	462c      	mov	r4, r5
   27232:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   27236:	2100      	movs	r1, #0
   27238:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
   2723c:	2bfb      	cmp	r3, #251	; 0xfb
   2723e:	f103 0c01 	add.w	ip, r3, #1
   27242:	f103 0702 	add.w	r7, r3, #2
   27246:	f101 0101 	add.w	r1, r1, #1
   2724a:	f300 80f7 	bgt.w	2743c <opus_repacketizer_out_range_impl+0x37c>
   2724e:	428a      	cmp	r2, r1
   27250:	4460      	add	r0, ip
   27252:	dcf1      	bgt.n	27238 <opus_repacketizer_out_range_impl+0x178>
   27254:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   27258:	3b01      	subs	r3, #1
   2725a:	f93b 7013 	ldrsh.w	r7, [fp, r3, lsl #1]
   2725e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27260:	4407      	add	r7, r0
   27262:	42bb      	cmp	r3, r7
   27264:	f2c0 8136 	blt.w	274d4 <opus_repacketizer_out_range_impl+0x414>
   27268:	9800      	ldr	r0, [sp, #0]
   2726a:	7831      	ldrb	r1, [r6, #0]
   2726c:	4604      	mov	r4, r0
   2726e:	f041 0103 	orr.w	r1, r1, #3
   27272:	f804 1b02 	strb.w	r1, [r4], #2
   27276:	f069 037f 	orn	r3, r9, #127	; 0x7f
   2727a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2727c:	b2db      	uxtb	r3, r3
   2727e:	7043      	strb	r3, [r0, #1]
   27280:	2900      	cmp	r1, #0
   27282:	f000 80cd 	beq.w	27420 <opus_repacketizer_out_range_impl+0x360>
   27286:	990e      	ldr	r1, [sp, #56]	; 0x38
   27288:	1bc9      	subs	r1, r1, r7
   2728a:	f000 80c6 	beq.w	2741a <opus_repacketizer_out_range_impl+0x35a>
   2728e:	2201      	movs	r2, #1
   27290:	9201      	str	r2, [sp, #4]
   27292:	4894      	ldr	r0, [pc, #592]	; (274e4 <opus_repacketizer_out_range_impl+0x424>)
   27294:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   27298:	fb80 200e 	smull	r2, r0, r0, lr
   2729c:	9a00      	ldr	r2, [sp, #0]
   2729e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   272a2:	4470      	add	r0, lr
   272a4:	ea4f 77ee 	mov.w	r7, lr, asr #31
   272a8:	29ff      	cmp	r1, #255	; 0xff
   272aa:	7053      	strb	r3, [r2, #1]
   272ac:	ebc7 12e0 	rsb	r2, r7, r0, asr #7
   272b0:	f340 810e 	ble.w	274d0 <opus_repacketizer_out_range_impl+0x410>
   272b4:	4263      	negs	r3, r4
   272b6:	f003 0307 	and.w	r3, r3, #7
   272ba:	1dd9      	adds	r1, r3, #7
   272bc:	290d      	cmp	r1, #13
   272be:	bf38      	it	cc
   272c0:	210d      	movcc	r1, #13
   272c2:	1e50      	subs	r0, r2, #1
   272c4:	4281      	cmp	r1, r0
   272c6:	f200 8108 	bhi.w	274da <opus_repacketizer_out_range_impl+0x41a>
   272ca:	46a4      	mov	ip, r4
   272cc:	b31b      	cbz	r3, 27316 <opus_repacketizer_out_range_impl+0x256>
   272ce:	21ff      	movs	r1, #255	; 0xff
   272d0:	2b01      	cmp	r3, #1
   272d2:	f80c 1b01 	strb.w	r1, [ip], #1
   272d6:	d01e      	beq.n	27316 <opus_repacketizer_out_range_impl+0x256>
   272d8:	2b02      	cmp	r3, #2
   272da:	7061      	strb	r1, [r4, #1]
   272dc:	f104 0c02 	add.w	ip, r4, #2
   272e0:	d019      	beq.n	27316 <opus_repacketizer_out_range_impl+0x256>
   272e2:	2b03      	cmp	r3, #3
   272e4:	70a1      	strb	r1, [r4, #2]
   272e6:	f104 0c03 	add.w	ip, r4, #3
   272ea:	d014      	beq.n	27316 <opus_repacketizer_out_range_impl+0x256>
   272ec:	2b04      	cmp	r3, #4
   272ee:	70e1      	strb	r1, [r4, #3]
   272f0:	f104 0c04 	add.w	ip, r4, #4
   272f4:	d00f      	beq.n	27316 <opus_repacketizer_out_range_impl+0x256>
   272f6:	2b05      	cmp	r3, #5
   272f8:	7121      	strb	r1, [r4, #4]
   272fa:	f104 0c05 	add.w	ip, r4, #5
   272fe:	d00a      	beq.n	27316 <opus_repacketizer_out_range_impl+0x256>
   27300:	2b07      	cmp	r3, #7
   27302:	7161      	strb	r1, [r4, #5]
   27304:	f104 0c06 	add.w	ip, r4, #6
   27308:	f040 80e9 	bne.w	274de <opus_repacketizer_out_range_impl+0x41e>
   2730c:	71a1      	strb	r1, [r4, #6]
   2730e:	f104 0c07 	add.w	ip, r4, #7
   27312:	9303      	str	r3, [sp, #12]
   27314:	e000      	b.n	27318 <opus_repacketizer_out_range_impl+0x258>
   27316:	9303      	str	r3, [sp, #12]
   27318:	1ad1      	subs	r1, r2, r3
   2731a:	f021 0a07 	bic.w	sl, r1, #7
   2731e:	441c      	add	r4, r3
   27320:	9102      	str	r1, [sp, #8]
   27322:	44a2      	add	sl, r4
   27324:	f10c 0701 	add.w	r7, ip, #1
   27328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2732c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27330:	e8e4 0102 	strd	r0, r1, [r4], #8
   27334:	463b      	mov	r3, r7
   27336:	4554      	cmp	r4, sl
   27338:	f103 0307 	add.w	r3, r3, #7
   2733c:	f107 0708 	add.w	r7, r7, #8
   27340:	d1f6      	bne.n	27330 <opus_repacketizer_out_range_impl+0x270>
   27342:	9f02      	ldr	r7, [sp, #8]
   27344:	9803      	ldr	r0, [sp, #12]
   27346:	f027 0107 	bic.w	r1, r7, #7
   2734a:	42b9      	cmp	r1, r7
   2734c:	4408      	add	r0, r1
   2734e:	eb0c 0401 	add.w	r4, ip, r1
   27352:	d056      	beq.n	27402 <opus_repacketizer_out_range_impl+0x342>
   27354:	4623      	mov	r3, r4
   27356:	1c47      	adds	r7, r0, #1
   27358:	21ff      	movs	r1, #255	; 0xff
   2735a:	4297      	cmp	r7, r2
   2735c:	f803 1b01 	strb.w	r1, [r3], #1
   27360:	da4f      	bge.n	27402 <opus_repacketizer_out_range_impl+0x342>
   27362:	1c87      	adds	r7, r0, #2
   27364:	42ba      	cmp	r2, r7
   27366:	7061      	strb	r1, [r4, #1]
   27368:	f104 0302 	add.w	r3, r4, #2
   2736c:	dd49      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   2736e:	1cc7      	adds	r7, r0, #3
   27370:	4297      	cmp	r7, r2
   27372:	70a1      	strb	r1, [r4, #2]
   27374:	f104 0303 	add.w	r3, r4, #3
   27378:	da43      	bge.n	27402 <opus_repacketizer_out_range_impl+0x342>
   2737a:	1d07      	adds	r7, r0, #4
   2737c:	4297      	cmp	r7, r2
   2737e:	70e1      	strb	r1, [r4, #3]
   27380:	f104 0304 	add.w	r3, r4, #4
   27384:	da3d      	bge.n	27402 <opus_repacketizer_out_range_impl+0x342>
   27386:	1d47      	adds	r7, r0, #5
   27388:	42ba      	cmp	r2, r7
   2738a:	7121      	strb	r1, [r4, #4]
   2738c:	f104 0305 	add.w	r3, r4, #5
   27390:	dd37      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   27392:	1d87      	adds	r7, r0, #6
   27394:	42ba      	cmp	r2, r7
   27396:	7161      	strb	r1, [r4, #5]
   27398:	f104 0306 	add.w	r3, r4, #6
   2739c:	dd31      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   2739e:	1dc7      	adds	r7, r0, #7
   273a0:	42ba      	cmp	r2, r7
   273a2:	71a1      	strb	r1, [r4, #6]
   273a4:	f104 0307 	add.w	r3, r4, #7
   273a8:	dd2b      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273aa:	f100 0708 	add.w	r7, r0, #8
   273ae:	42ba      	cmp	r2, r7
   273b0:	71e1      	strb	r1, [r4, #7]
   273b2:	f104 0308 	add.w	r3, r4, #8
   273b6:	dd24      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273b8:	f100 0709 	add.w	r7, r0, #9
   273bc:	42ba      	cmp	r2, r7
   273be:	7221      	strb	r1, [r4, #8]
   273c0:	f104 0309 	add.w	r3, r4, #9
   273c4:	dd1d      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273c6:	f100 070a 	add.w	r7, r0, #10
   273ca:	42ba      	cmp	r2, r7
   273cc:	7261      	strb	r1, [r4, #9]
   273ce:	f104 030a 	add.w	r3, r4, #10
   273d2:	dd16      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273d4:	f100 070b 	add.w	r7, r0, #11
   273d8:	42ba      	cmp	r2, r7
   273da:	72a1      	strb	r1, [r4, #10]
   273dc:	f104 030b 	add.w	r3, r4, #11
   273e0:	dd0f      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273e2:	f100 070c 	add.w	r7, r0, #12
   273e6:	42ba      	cmp	r2, r7
   273e8:	72e1      	strb	r1, [r4, #11]
   273ea:	f104 030c 	add.w	r3, r4, #12
   273ee:	dd08      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273f0:	300d      	adds	r0, #13
   273f2:	4282      	cmp	r2, r0
   273f4:	7321      	strb	r1, [r4, #12]
   273f6:	f104 030d 	add.w	r3, r4, #13
   273fa:	dd02      	ble.n	27402 <opus_repacketizer_out_range_impl+0x342>
   273fc:	7361      	strb	r1, [r4, #13]
   273fe:	f104 030e 	add.w	r3, r4, #14
   27402:	461c      	mov	r4, r3
   27404:	eb0e 0302 	add.w	r3, lr, r2
   27408:	f804 3b01 	strb.w	r3, [r4], #1
   2740c:	9b01      	ldr	r3, [sp, #4]
   2740e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   27410:	2b00      	cmp	r3, #0
   27412:	f43f aea4 	beq.w	2715e <opus_repacketizer_out_range_impl+0x9e>
   27416:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   2741a:	2a00      	cmp	r2, #0
   2741c:	f43f ae9f 	beq.w	2715e <opus_repacketizer_out_range_impl+0x9e>
   27420:	eb05 0342 	add.w	r3, r5, r2, lsl #1
   27424:	9501      	str	r5, [sp, #4]
   27426:	469a      	mov	sl, r3
   27428:	4621      	mov	r1, r4
   2742a:	f935 0f02 	ldrsh.w	r0, [r5, #2]!
   2742e:	f008 f8a9 	bl	2f584 <encode_size>
   27432:	4555      	cmp	r5, sl
   27434:	4404      	add	r4, r0
   27436:	d1f7      	bne.n	27428 <opus_repacketizer_out_range_impl+0x368>
   27438:	9d01      	ldr	r5, [sp, #4]
   2743a:	e690      	b.n	2715e <opus_repacketizer_out_range_impl+0x9e>
   2743c:	428a      	cmp	r2, r1
   2743e:	4438      	add	r0, r7
   27440:	f73f aefa 	bgt.w	27238 <opus_repacketizer_out_range_impl+0x178>
   27444:	e706      	b.n	27254 <opus_repacketizer_out_range_impl+0x194>
   27446:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   2744a:	3b01      	subs	r3, #1
   2744c:	f93b 3013 	ldrsh.w	r3, [fp, r3, lsl #1]
   27450:	2bfc      	cmp	r3, #252	; 0xfc
   27452:	bfb4      	ite	lt
   27454:	2701      	movlt	r7, #1
   27456:	2702      	movge	r7, #2
   27458:	e65a      	b.n	27110 <opus_repacketizer_out_range_impl+0x50>
   2745a:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
   2745e:	f935 1018 	ldrsh.w	r1, [r5, r8, lsl #1]
   27462:	428b      	cmp	r3, r1
   27464:	d020      	beq.n	274a8 <opus_repacketizer_out_range_impl+0x3e8>
   27466:	440b      	add	r3, r1
   27468:	3302      	adds	r3, #2
   2746a:	29fb      	cmp	r1, #251	; 0xfb
   2746c:	bfc8      	it	gt
   2746e:	3301      	addgt	r3, #1
   27470:	441f      	add	r7, r3
   27472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27474:	42bb      	cmp	r3, r7
   27476:	db2d      	blt.n	274d4 <opus_repacketizer_out_range_impl+0x414>
   27478:	7803      	ldrb	r3, [r0, #0]
   2747a:	9c00      	ldr	r4, [sp, #0]
   2747c:	f023 0303 	bic.w	r3, r3, #3
   27480:	f043 0302 	orr.w	r3, r3, #2
   27484:	f804 3b01 	strb.w	r3, [r4], #1
   27488:	4621      	mov	r1, r4
   2748a:	f935 0018 	ldrsh.w	r0, [r5, r8, lsl #1]
   2748e:	f008 f879 	bl	2f584 <encode_size>
   27492:	4404      	add	r4, r0
   27494:	e6a5      	b.n	271e2 <opus_repacketizer_out_range_impl+0x122>
   27496:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27498:	1bd1      	subs	r1, r2, r7
   2749a:	f43f ae5e 	beq.w	2715a <opus_repacketizer_out_range_impl+0x9a>
   2749e:	2200      	movs	r2, #0
   274a0:	9201      	str	r2, [sp, #4]
   274a2:	f1ab 0502 	sub.w	r5, fp, #2
   274a6:	e6f4      	b.n	27292 <opus_repacketizer_out_range_impl+0x1d2>
   274a8:	eb07 0743 	add.w	r7, r7, r3, lsl #1
   274ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   274ae:	3701      	adds	r7, #1
   274b0:	42bb      	cmp	r3, r7
   274b2:	db0f      	blt.n	274d4 <opus_repacketizer_out_range_impl+0x414>
   274b4:	7803      	ldrb	r3, [r0, #0]
   274b6:	9c00      	ldr	r4, [sp, #0]
   274b8:	f023 0303 	bic.w	r3, r3, #3
   274bc:	f043 0301 	orr.w	r3, r3, #1
   274c0:	f804 3b01 	strb.w	r3, [r4], #1
   274c4:	e68d      	b.n	271e2 <opus_repacketizer_out_range_impl+0x122>
   274c6:	461f      	mov	r7, r3
   274c8:	e6a0      	b.n	2720c <opus_repacketizer_out_range_impl+0x14c>
   274ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   274ce:	e668      	b.n	271a2 <opus_repacketizer_out_range_impl+0xe2>
   274d0:	4623      	mov	r3, r4
   274d2:	e796      	b.n	27402 <opus_repacketizer_out_range_impl+0x342>
   274d4:	f06f 0701 	mvn.w	r7, #1
   274d8:	e663      	b.n	271a2 <opus_repacketizer_out_range_impl+0xe2>
   274da:	2000      	movs	r0, #0
   274dc:	e73a      	b.n	27354 <opus_repacketizer_out_range_impl+0x294>
   274de:	2106      	movs	r1, #6
   274e0:	9103      	str	r1, [sp, #12]
   274e2:	e719      	b.n	27318 <opus_repacketizer_out_range_impl+0x258>
   274e4:	80808081 	.word	0x80808081

000274e8 <opus_packet_pad>:
   274e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   274ec:	1e0c      	subs	r4, r1, #0
   274ee:	b0d1      	sub	sp, #324	; 0x144
   274f0:	dd58      	ble.n	275a4 <opus_packet_pad+0xbc>
   274f2:	4294      	cmp	r4, r2
   274f4:	d04f      	beq.n	27596 <opus_packet_pad+0xae>
   274f6:	dc55      	bgt.n	275a4 <opus_packet_pad+0xbc>
   274f8:	eba2 0804 	sub.w	r8, r2, r4
   274fc:	eb00 0708 	add.w	r7, r0, r8
   27500:	4605      	mov	r5, r0
   27502:	4629      	mov	r1, r5
   27504:	4616      	mov	r6, r2
   27506:	4638      	mov	r0, r7
   27508:	4622      	mov	r2, r4
   2750a:	f04f 0900 	mov.w	r9, #0
   2750e:	f8cd 9018 	str.w	r9, [sp, #24]
   27512:	f7e4 febf 	bl	c294 <memmove>
   27516:	f815 3008 	ldrb.w	r3, [r5, r8]
   2751a:	f88d 3014 	strb.w	r3, [sp, #20]
   2751e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   27522:	4638      	mov	r0, r7
   27524:	f008 f83c 	bl	2f5a0 <opus_packet_get_samples_per_frame>
   27528:	4621      	mov	r1, r4
   2752a:	904f      	str	r0, [sp, #316]	; 0x13c
   2752c:	4638      	mov	r0, r7
   2752e:	f7ff fbf7 	bl	26d20 <opus_packet_get_nb_frames>
   27532:	f1b0 0800 	subs.w	r8, r0, #0
   27536:	dd38      	ble.n	275aa <opus_packet_pad+0xc2>
   27538:	9b06      	ldr	r3, [sp, #24]
   2753a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   2753c:	eb08 0103 	add.w	r1, r8, r3
   27540:	fb02 f201 	mul.w	r2, r2, r1
   27544:	f5b2 7f70 	cmp.w	r2, #960	; 0x3c0
   27548:	dc2f      	bgt.n	275aa <opus_packet_pad+0xc2>
   2754a:	aa05      	add	r2, sp, #20
   2754c:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   27550:	3302      	adds	r3, #2
   27552:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   27556:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2755a:	e9cd 3c00 	strd	r3, ip, [sp]
   2755e:	e9cd 9902 	strd	r9, r9, [sp, #8]
   27562:	464a      	mov	r2, r9
   27564:	4621      	mov	r1, r4
   27566:	4638      	mov	r0, r7
   27568:	f10d 0313 	add.w	r3, sp, #19
   2756c:	f008 f850 	bl	2f610 <opus_packet_parse_impl>
   27570:	2800      	cmp	r0, #0
   27572:	dd14      	ble.n	2759e <opus_packet_pad+0xb6>
   27574:	9a06      	ldr	r2, [sp, #24]
   27576:	4442      	add	r2, r8
   27578:	9206      	str	r2, [sp, #24]
   2757a:	2100      	movs	r1, #0
   2757c:	2401      	movs	r4, #1
   2757e:	9600      	str	r6, [sp, #0]
   27580:	462b      	mov	r3, r5
   27582:	a805      	add	r0, sp, #20
   27584:	e9cd 1401 	strd	r1, r4, [sp, #4]
   27588:	f7ff fd9a 	bl	270c0 <opus_repacketizer_out_range_impl>
   2758c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27590:	b051      	add	sp, #324	; 0x144
   27592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27596:	2000      	movs	r0, #0
   27598:	b051      	add	sp, #324	; 0x144
   2759a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2759e:	d1f7      	bne.n	27590 <opus_packet_pad+0xa8>
   275a0:	9a06      	ldr	r2, [sp, #24]
   275a2:	e7ea      	b.n	2757a <opus_packet_pad+0x92>
   275a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   275a8:	e7f2      	b.n	27590 <opus_packet_pad+0xa8>
   275aa:	f06f 0003 	mvn.w	r0, #3
   275ae:	e7ef      	b.n	27590 <opus_packet_pad+0xa8>

000275b0 <transient_analysis>:
   275b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275b4:	ed2d 8b06 	vpush	{d8-d10}
   275b8:	b08b      	sub	sp, #44	; 0x2c
   275ba:	4689      	mov	r9, r1
   275bc:	af00      	add	r7, sp, #0
   275be:	0089      	lsls	r1, r1, #2
   275c0:	460d      	mov	r5, r1
   275c2:	6179      	str	r1, [r7, #20]
   275c4:	4616      	mov	r6, r2
   275c6:	603b      	str	r3, [r7, #0]
   275c8:	4604      	mov	r4, r0
   275ca:	613a      	str	r2, [r7, #16]
   275cc:	f7ff faae 	bl	26b2c <save_stack>
   275d0:	1deb      	adds	r3, r5, #7
   275d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   275d4:	ed9f aad2 	vldr	s20, [pc, #840]	; 27920 <transient_analysis+0x370>
   275d8:	eddf 7ad2 	vldr	s15, [pc, #840]	; 27924 <transient_analysis+0x374>
   275dc:	f023 0307 	bic.w	r3, r3, #7
   275e0:	2800      	cmp	r0, #0
   275e2:	ebad 0d03 	sub.w	sp, sp, r3
   275e6:	6f38      	ldr	r0, [r7, #112]	; 0x70
   275e8:	f04f 0300 	mov.w	r3, #0
   275ec:	bf18      	it	ne
   275ee:	eeb0 aa67 	vmovne.f32	s20, s15
   275f2:	429e      	cmp	r6, r3
   275f4:	4629      	mov	r1, r5
   275f6:	6003      	str	r3, [r0, #0]
   275f8:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
   275fc:	f340 817d 	ble.w	278fa <transient_analysis+0x34a>
   27600:	106d      	asrs	r5, r5, #1
   27602:	f1a5 0211 	sub.w	r2, r5, #17
   27606:	469b      	mov	fp, r3
   27608:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   2760c:	005b      	lsls	r3, r3, #1
   2760e:	ebc9 7289 	rsb	r2, r9, r9, lsl #30
   27612:	60bb      	str	r3, [r7, #8]
   27614:	0093      	lsls	r3, r2, #2
   27616:	f1a5 0612 	sub.w	r6, r5, #18
   2761a:	607b      	str	r3, [r7, #4]
   2761c:	ee07 5a90 	vmov	s15, r5
   27620:	1e6b      	subs	r3, r5, #1
   27622:	08b6      	lsrs	r6, r6, #2
   27624:	61fb      	str	r3, [r7, #28]
   27626:	1f6b      	subs	r3, r5, #5
   27628:	46ea      	mov	sl, sp
   2762a:	3601      	adds	r6, #1
   2762c:	60fb      	str	r3, [r7, #12]
   2762e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   27632:	464b      	mov	r3, r9
   27634:	ed9f 9abc 	vldr	s18, [pc, #752]	; 27928 <transient_analysis+0x378>
   27638:	eddf 9abc 	vldr	s19, [pc, #752]	; 2792c <transient_analysis+0x37c>
   2763c:	eddf 8abc 	vldr	s17, [pc, #752]	; 27930 <transient_analysis+0x380>
   27640:	f8df 8300 	ldr.w	r8, [pc, #768]	; 27944 <transient_analysis+0x394>
   27644:	f8c7 b018 	str.w	fp, [r7, #24]
   27648:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
   2764c:	46d1      	mov	r9, sl
   2764e:	440c      	add	r4, r1
   27650:	46da      	mov	sl, fp
   27652:	469b      	mov	fp, r3
   27654:	f1bb 0f00 	cmp.w	fp, #0
   27658:	f340 8111 	ble.w	2787e <transient_analysis+0x2ce>
   2765c:	687b      	ldr	r3, [r7, #4]
   2765e:	eddf 7ab2 	vldr	s15, [pc, #712]	; 27928 <transient_analysis+0x378>
   27662:	eef0 6a49 	vmov.f32	s13, s18
   27666:	4423      	add	r3, r4
   27668:	464a      	mov	r2, r9
   2766a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
   2766e:	ecb3 7a01 	vldmia	r3!, {s14}
   27672:	ee77 7a27 	vadd.f32	s15, s14, s15
   27676:	ee37 6a07 	vadd.f32	s12, s14, s14
   2767a:	ee77 5aa6 	vadd.f32	s11, s15, s13
   2767e:	ee67 6a85 	vmul.f32	s13, s15, s10
   27682:	429c      	cmp	r4, r3
   27684:	ece2 7a01 	vstmia	r2!, {s15}
   27688:	ee77 6a66 	vsub.f32	s13, s14, s13
   2768c:	ee75 7ac6 	vsub.f32	s15, s11, s12
   27690:	d1ed      	bne.n	2766e <transient_analysis+0xbe>
   27692:	2230      	movs	r2, #48	; 0x30
   27694:	2100      	movs	r1, #0
   27696:	4648      	mov	r0, r9
   27698:	f7e4 fe60 	bl	c35c <memset>
   2769c:	f1bb 0f01 	cmp.w	fp, #1
   276a0:	f340 80f2 	ble.w	27888 <transient_analysis+0x2d8>
   276a4:	ed9f 6aa0 	vldr	s12, [pc, #640]	; 27928 <transient_analysis+0x378>
   276a8:	4649      	mov	r1, r9
   276aa:	eef0 6a46 	vmov.f32	s13, s12
   276ae:	464b      	mov	r3, r9
   276b0:	2200      	movs	r2, #0
   276b2:	edd3 7a00 	vldr	s15, [r3]
   276b6:	ed93 7a01 	vldr	s14, [r3, #4]
   276ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
   276be:	ee27 7a07 	vmul.f32	s14, s14, s14
   276c2:	3201      	adds	r2, #1
   276c4:	ee77 7a87 	vadd.f32	s15, s15, s14
   276c8:	4295      	cmp	r5, r2
   276ca:	ee37 7ae6 	vsub.f32	s14, s15, s13
   276ce:	ee36 6a27 	vadd.f32	s12, s12, s15
   276d2:	ee67 7a0a 	vmul.f32	s15, s14, s20
   276d6:	f103 0308 	add.w	r3, r3, #8
   276da:	ee76 6aa7 	vadd.f32	s13, s13, s15
   276de:	ece1 6a01 	vstmia	r1!, {s13}
   276e2:	dce6      	bgt.n	276b2 <transient_analysis+0x102>
   276e4:	69fa      	ldr	r2, [r7, #28]
   276e6:	4613      	mov	r3, r2
   276e8:	eddf 6a8f 	vldr	s13, [pc, #572]	; 27928 <transient_analysis+0x378>
   276ec:	3301      	adds	r3, #1
   276ee:	eef0 7a66 	vmov.f32	s15, s13
   276f2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   276f6:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
   276fa:	ed33 7a01 	vldmdb	r3!, {s14}
   276fe:	ee37 7a67 	vsub.f32	s14, s14, s15
   27702:	3a01      	subs	r2, #1
   27704:	ee27 7a25 	vmul.f32	s14, s14, s11
   27708:	ee77 7a87 	vadd.f32	s15, s15, s14
   2770c:	eef4 7ae6 	vcmpe.f32	s15, s13
   27710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27714:	bf58      	it	pl
   27716:	eef0 6a67 	vmovpl.f32	s13, s15
   2771a:	1c51      	adds	r1, r2, #1
   2771c:	edc3 7a00 	vstr	s15, [r3]
   27720:	d1eb      	bne.n	276fa <transient_analysis+0x14a>
   27722:	ee66 7a26 	vmul.f32	s15, s12, s13
   27726:	ee17 0a90 	vmov	r0, s15
   2772a:	f7e5 f89b 	bl	c864 <__aeabi_f2d>
   2772e:	2200      	movs	r2, #0
   27730:	4b80      	ldr	r3, [pc, #512]	; (27934 <transient_analysis+0x384>)
   27732:	f7ed fa2b 	bl	14b8c <__aeabi_dmul>
   27736:	4602      	mov	r2, r0
   27738:	460b      	mov	r3, r1
   2773a:	4628      	mov	r0, r5
   2773c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   27740:	f7e5 f87e 	bl	c840 <__aeabi_i2d>
   27744:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   27748:	f7ed fa20 	bl	14b8c <__aeabi_dmul>
   2774c:	ec41 0b10 	vmov	d0, r0, r1
   27750:	f7eb ff4e 	bl	135f0 <sqrt>
   27754:	ec51 0b10 	vmov	r0, r1, d0
   27758:	f7e5 f960 	bl	ca1c <__aeabi_d2f>
   2775c:	ee07 0a90 	vmov	s15, r0
   27760:	68fb      	ldr	r3, [r7, #12]
   27762:	ee77 7aa9 	vadd.f32	s15, s15, s19
   27766:	2b0c      	cmp	r3, #12
   27768:	ee88 7a27 	vdiv.f32	s14, s16, s15
   2776c:	dd36      	ble.n	277dc <transient_analysis+0x22c>
   2776e:	464a      	mov	r2, r9
   27770:	2100      	movs	r1, #0
   27772:	ee27 7a28 	vmul.f32	s14, s14, s17
   27776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2777a:	e00c      	b.n	27796 <transient_analysis+0x1e6>
   2777c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   27780:	ee17 3a90 	vmov	r3, s15
   27784:	2b7f      	cmp	r3, #127	; 0x7f
   27786:	dc19      	bgt.n	277bc <transient_analysis+0x20c>
   27788:	2b00      	cmp	r3, #0
   2778a:	da75      	bge.n	27878 <transient_analysis+0x2c8>
   2778c:	23ff      	movs	r3, #255	; 0xff
   2778e:	3210      	adds	r2, #16
   27790:	4296      	cmp	r6, r2
   27792:	4419      	add	r1, r3
   27794:	d017      	beq.n	277c6 <transient_analysis+0x216>
   27796:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
   2779a:	ee77 7aa9 	vadd.f32	s15, s15, s19
   2779e:	ee67 7a87 	vmul.f32	s15, s15, s14
   277a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   277a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   277aa:	d5e7      	bpl.n	2777c <transient_analysis+0x1cc>
   277ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
   277b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   277b4:	ee17 3a90 	vmov	r3, s15
   277b8:	2b7f      	cmp	r3, #127	; 0x7f
   277ba:	dde5      	ble.n	27788 <transient_analysis+0x1d8>
   277bc:	3210      	adds	r2, #16
   277be:	2302      	movs	r3, #2
   277c0:	4296      	cmp	r6, r2
   277c2:	4419      	add	r1, r3
   277c4:	d1e7      	bne.n	27796 <transient_analysis+0x1e6>
   277c6:	68bb      	ldr	r3, [r7, #8]
   277c8:	0209      	lsls	r1, r1, #8
   277ca:	fb91 f1f3 	sdiv	r1, r1, r3
   277ce:	69bb      	ldr	r3, [r7, #24]
   277d0:	4299      	cmp	r1, r3
   277d2:	dd03      	ble.n	277dc <transient_analysis+0x22c>
   277d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   277d6:	61b9      	str	r1, [r7, #24]
   277d8:	f8c3 a000 	str.w	sl, [r3]
   277dc:	697b      	ldr	r3, [r7, #20]
   277de:	441c      	add	r4, r3
   277e0:	693b      	ldr	r3, [r7, #16]
   277e2:	f10a 0a01 	add.w	sl, sl, #1
   277e6:	4553      	cmp	r3, sl
   277e8:	f47f af34 	bne.w	27654 <transient_analysis+0xa4>
   277ec:	69bb      	ldr	r3, [r7, #24]
   277ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   277f0:	2bc8      	cmp	r3, #200	; 0xc8
   277f2:	bfd4      	ite	le
   277f4:	f04f 0b00 	movle.w	fp, #0
   277f8:	f04f 0b01 	movgt.w	fp, #1
   277fc:	b14a      	cbz	r2, 27812 <transient_analysis+0x262>
   277fe:	2bc8      	cmp	r3, #200	; 0xc8
   27800:	dd78      	ble.n	278f4 <transient_analysis+0x344>
   27802:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   27806:	da73      	bge.n	278f0 <transient_analysis+0x340>
   27808:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   2780a:	2301      	movs	r3, #1
   2780c:	6013      	str	r3, [r2, #0]
   2780e:	f04f 0b00 	mov.w	fp, #0
   27812:	69bb      	ldr	r3, [r7, #24]
   27814:	ed9f 8a48 	vldr	s16, [pc, #288]	; 27938 <transient_analysis+0x388>
   27818:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   2781c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
   27820:	f7e5 f80e 	bl	c840 <__aeabi_i2d>
   27824:	ec41 0b10 	vmov	d0, r0, r1
   27828:	ec41 0b19 	vmov	d9, r0, r1
   2782c:	f7eb fee0 	bl	135f0 <sqrt>
   27830:	ec51 0b10 	vmov	r0, r1, d0
   27834:	f7e5 f8f2 	bl	ca1c <__aeabi_d2f>
   27838:	ee07 0a90 	vmov	s15, r0
   2783c:	ee77 7ac8 	vsub.f32	s15, s15, s16
   27840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   27844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27848:	d524      	bpl.n	27894 <transient_analysis+0x2e4>
   2784a:	ed9f 8b2f 	vldr	d8, [pc, #188]	; 27908 <transient_analysis+0x358>
   2784e:	eeb0 0a48 	vmov.f32	s0, s16
   27852:	eef0 0a68 	vmov.f32	s1, s17
   27856:	f7eb fecb 	bl	135f0 <sqrt>
   2785a:	ec51 0b10 	vmov	r0, r1, d0
   2785e:	f7e5 f8dd 	bl	ca1c <__aeabi_d2f>
   27862:	683b      	ldr	r3, [r7, #0]
   27864:	6018      	str	r0, [r3, #0]
   27866:	f7ff f973 	bl	26b50 <restore_stack>
   2786a:	4658      	mov	r0, fp
   2786c:	372c      	adds	r7, #44	; 0x2c
   2786e:	46bd      	mov	sp, r7
   27870:	ecbd 8b06 	vpop	{d8-d10}
   27874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27878:	f818 3003 	ldrb.w	r3, [r8, r3]
   2787c:	e787      	b.n	2778e <transient_analysis+0x1de>
   2787e:	2230      	movs	r2, #48	; 0x30
   27880:	2100      	movs	r1, #0
   27882:	4648      	mov	r0, r9
   27884:	f7e4 fd6a 	bl	c35c <memset>
   27888:	69fb      	ldr	r3, [r7, #28]
   2788a:	2b00      	cmp	r3, #0
   2788c:	da37      	bge.n	278fe <transient_analysis+0x34e>
   2788e:	2200      	movs	r2, #0
   27890:	2300      	movs	r3, #0
   27892:	e752      	b.n	2773a <transient_analysis+0x18a>
   27894:	eeb0 0a49 	vmov.f32	s0, s18
   27898:	eef0 0a69 	vmov.f32	s1, s19
   2789c:	f7eb fea8 	bl	135f0 <sqrt>
   278a0:	ec51 0b10 	vmov	r0, r1, d0
   278a4:	f7e5 f8ba 	bl	ca1c <__aeabi_d2f>
   278a8:	ee07 0a10 	vmov	s14, r0
   278ac:	eddf 7a23 	vldr	s15, [pc, #140]	; 2793c <transient_analysis+0x38c>
   278b0:	ee37 8a48 	vsub.f32	s16, s14, s16
   278b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   278b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   278bc:	dd02      	ble.n	278c4 <transient_analysis+0x314>
   278be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 27910 <transient_analysis+0x360>
   278c2:	e7c4      	b.n	2784e <transient_analysis+0x29e>
   278c4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 27940 <transient_analysis+0x390>
   278c8:	ee68 7a27 	vmul.f32	s15, s16, s15
   278cc:	ee17 0a90 	vmov	r0, s15
   278d0:	f7e4 ffc8 	bl	c864 <__aeabi_f2d>
   278d4:	a310      	add	r3, pc, #64	; (adr r3, 27918 <transient_analysis+0x368>)
   278d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   278da:	f7e4 fe63 	bl	c5a4 <__aeabi_dsub>
   278de:	2200      	movs	r2, #0
   278e0:	2300      	movs	r3, #0
   278e2:	ec41 0b18 	vmov	d8, r0, r1
   278e6:	f7e5 f871 	bl	c9cc <__aeabi_dcmplt>
   278ea:	2800      	cmp	r0, #0
   278ec:	d0af      	beq.n	2784e <transient_analysis+0x29e>
   278ee:	e7ac      	b.n	2784a <transient_analysis+0x29a>
   278f0:	4693      	mov	fp, r2
   278f2:	e78e      	b.n	27812 <transient_analysis+0x262>
   278f4:	f04f 0b00 	mov.w	fp, #0
   278f8:	e78b      	b.n	27812 <transient_analysis+0x262>
   278fa:	469b      	mov	fp, r3
   278fc:	e7a5      	b.n	2784a <transient_analysis+0x29a>
   278fe:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 27928 <transient_analysis+0x378>
   27902:	461a      	mov	r2, r3
   27904:	e6f0      	b.n	276e8 <transient_analysis+0x138>
   27906:	bf00      	nop
	...
   27910:	9f3b645a 	.word	0x9f3b645a
   27914:	3fef8ada 	.word	0x3fef8ada
   27918:	83126e98 	.word	0x83126e98
   2791c:	3fc1cac0 	.word	0x3fc1cac0
   27920:	3d800000 	.word	0x3d800000
   27924:	3d000000 	.word	0x3d000000
   27928:	00000000 	.word	0x00000000
   2792c:	26901d7d 	.word	0x26901d7d
   27930:	42800000 	.word	0x42800000
   27934:	3fe00000 	.word	0x3fe00000
   27938:	42280000 	.word	0x42280000
   2793c:	43230000 	.word	0x43230000
   27940:	3be21965 	.word	0x3be21965
   27944:	0003d77c 	.word	0x0003d77c

00027948 <compute_mdcts>:
   27948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2794c:	ed2d 8b02 	vpush	{d8}
   27950:	b08f      	sub	sp, #60	; 0x3c
   27952:	4607      	mov	r7, r0
   27954:	930b      	str	r3, [sp, #44]	; 0x2c
   27956:	f8d0 a004 	ldr.w	sl, [r0, #4]
   2795a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2795c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2795e:	9005      	str	r0, [sp, #20]
   27960:	f1b1 0800 	subs.w	r8, r1, #0
   27964:	981c      	ldr	r0, [sp, #112]	; 0x70
   27966:	ed9d 8a1d 	vldr	s16, [sp, #116]	; 0x74
   2796a:	d073      	beq.n	27a54 <compute_mdcts+0x10c>
   2796c:	fb08 f103 	mul.w	r1, r8, r3
   27970:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   27974:	eb0a 0001 	add.w	r0, sl, r1
   27978:	dd35      	ble.n	279e6 <compute_mdcts+0x9e>
   2797a:	ebc8 7188 	rsb	r1, r8, r8, lsl #30
   2797e:	ea4f 0983 	mov.w	r9, r3, lsl #2
   27982:	008b      	lsls	r3, r1, #2
   27984:	930a      	str	r3, [sp, #40]	; 0x28
   27986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27988:	9206      	str	r2, [sp, #24]
   2798a:	009b      	lsls	r3, r3, #2
   2798c:	9308      	str	r3, [sp, #32]
   2798e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27990:	eb03 0688 	add.w	r6, r3, r8, lsl #2
   27994:	2300      	movs	r3, #0
   27996:	0080      	lsls	r0, r0, #2
   27998:	9307      	str	r3, [sp, #28]
   2799a:	463b      	mov	r3, r7
   2799c:	f107 0b40 	add.w	fp, r7, #64	; 0x40
   279a0:	9009      	str	r0, [sp, #36]	; 0x24
   279a2:	4657      	mov	r7, sl
   279a4:	469a      	mov	sl, r3
   279a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   279a8:	9d06      	ldr	r5, [sp, #24]
   279aa:	199c      	adds	r4, r3, r6
   279ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   279ae:	e9cd 8302 	strd	r8, r3, [sp, #8]
   279b2:	9b05      	ldr	r3, [sp, #20]
   279b4:	e9cd 7300 	strd	r7, r3, [sp]
   279b8:	4622      	mov	r2, r4
   279ba:	4629      	mov	r1, r5
   279bc:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
   279c0:	3404      	adds	r4, #4
   279c2:	4658      	mov	r0, fp
   279c4:	f005 f9f4 	bl	2cdb0 <clt_mdct_forward_c>
   279c8:	42a6      	cmp	r6, r4
   279ca:	444d      	add	r5, r9
   279cc:	d1ee      	bne.n	279ac <compute_mdcts+0x64>
   279ce:	9a06      	ldr	r2, [sp, #24]
   279d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   279d2:	9b07      	ldr	r3, [sp, #28]
   279d4:	440a      	add	r2, r1
   279d6:	9206      	str	r2, [sp, #24]
   279d8:	9a08      	ldr	r2, [sp, #32]
   279da:	4416      	add	r6, r2
   279dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   279de:	3301      	adds	r3, #1
   279e0:	4293      	cmp	r3, r2
   279e2:	9307      	str	r3, [sp, #28]
   279e4:	dbdf      	blt.n	279a6 <compute_mdcts+0x5e>
   279e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   279e8:	2b02      	cmp	r3, #2
   279ea:	d03e      	beq.n	27a6a <compute_mdcts+0x122>
   279ec:	ee18 3a10 	vmov	r3, s16
   279f0:	2b01      	cmp	r3, #1
   279f2:	d02a      	beq.n	27a4a <compute_mdcts+0x102>
   279f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   279f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   279f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   279fc:	ee18 1a10 	vmov	r1, s16
   27a00:	fb93 f6f1 	sdiv	r6, r3, r1
   27a04:	1b97      	subs	r7, r2, r6
   27a06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   27a08:	ebc6 7886 	rsb	r8, r6, r6, lsl #30
   27a0c:	00bf      	lsls	r7, r7, #2
   27a0e:	eb02 0486 	add.w	r4, r2, r6, lsl #2
   27a12:	ea4f 0983 	mov.w	r9, r3, lsl #2
   27a16:	ea4f 0888 	mov.w	r8, r8, lsl #2
   27a1a:	2500      	movs	r5, #0
   27a1c:	2e00      	cmp	r6, #0
   27a1e:	dd0b      	ble.n	27a38 <compute_mdcts+0xf0>
   27a20:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
   27a24:	eb08 0304 	add.w	r3, r8, r4
   27a28:	edd3 7a00 	vldr	s15, [r3]
   27a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
   27a30:	ece3 7a01 	vstmia	r3!, {s15}
   27a34:	42a3      	cmp	r3, r4
   27a36:	d1f7      	bne.n	27a28 <compute_mdcts+0xe0>
   27a38:	4620      	mov	r0, r4
   27a3a:	3501      	adds	r5, #1
   27a3c:	463a      	mov	r2, r7
   27a3e:	2100      	movs	r1, #0
   27a40:	f7e4 fc8c 	bl	c35c <memset>
   27a44:	45aa      	cmp	sl, r5
   27a46:	444c      	add	r4, r9
   27a48:	dce8      	bgt.n	27a1c <compute_mdcts+0xd4>
   27a4a:	b00f      	add	sp, #60	; 0x3c
   27a4c:	ecbd 8b02 	vpop	{d8}
   27a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a54:	9905      	ldr	r1, [sp, #20]
   27a56:	4083      	lsls	r3, r0
   27a58:	1a09      	subs	r1, r1, r0
   27a5a:	9105      	str	r1, [sp, #20]
   27a5c:	930d      	str	r3, [sp, #52]	; 0x34
   27a5e:	eb0a 0003 	add.w	r0, sl, r3
   27a62:	930c      	str	r3, [sp, #48]	; 0x30
   27a64:	f04f 0801 	mov.w	r8, #1
   27a68:	e787      	b.n	2797a <compute_mdcts+0x32>
   27a6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27a6c:	2b01      	cmp	r3, #1
   27a6e:	d1bd      	bne.n	279ec <compute_mdcts+0xa4>
   27a70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   27a72:	2a00      	cmp	r2, #0
   27a74:	ddba      	ble.n	279ec <compute_mdcts+0xa4>
   27a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a78:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   27a7c:	4611      	mov	r1, r2
   27a7e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   27a82:	edd3 7a00 	vldr	s15, [r3]
   27a86:	ecb2 7a01 	vldmia	r2!, {s14}
   27a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   27a8e:	ee27 7a26 	vmul.f32	s14, s14, s13
   27a92:	ee77 7a87 	vadd.f32	s15, s15, s14
   27a96:	ece3 7a01 	vstmia	r3!, {s15}
   27a9a:	4299      	cmp	r1, r3
   27a9c:	d1f1      	bne.n	27a82 <compute_mdcts+0x13a>
   27a9e:	e7a5      	b.n	279ec <compute_mdcts+0xa4>

00027aa0 <run_prefilter.isra.6>:
   27aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27aa4:	ed2d 8b02 	vpush	{d8}
   27aa8:	b099      	sub	sp, #100	; 0x64
   27aaa:	af06      	add	r7, sp, #24
   27aac:	461c      	mov	r4, r3
   27aae:	f8d7 9078 	ldr.w	r9, [r7, #120]	; 0x78
   27ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ab4:	f509 6680 	add.w	r6, r9, #1024	; 0x400
   27ab8:	460d      	mov	r5, r1
   27aba:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
   27abe:	4683      	mov	fp, r0
   27ac0:	f7ff f834 	bl	26b2c <save_stack>
   27ac4:	4623      	mov	r3, r4
   27ac6:	fb03 f306 	mul.w	r3, r3, r6
   27aca:	009b      	lsls	r3, r3, #2
   27acc:	f8db 2000 	ldr.w	r2, [fp]
   27ad0:	62ba      	str	r2, [r7, #40]	; 0x28
   27ad2:	3307      	adds	r3, #7
   27ad4:	f023 0307 	bic.w	r3, r3, #7
   27ad8:	6850      	ldr	r0, [r2, #4]
   27ada:	61f8      	str	r0, [r7, #28]
   27adc:	ebad 0d03 	sub.w	sp, sp, r3
   27ae0:	ab06      	add	r3, sp, #24
   27ae2:	00b2      	lsls	r2, r6, #2
   27ae4:	1899      	adds	r1, r3, r2
   27ae6:	4604      	mov	r4, r0
   27ae8:	f04f 0a00 	mov.w	sl, #0
   27aec:	444c      	add	r4, r9
   27aee:	0080      	lsls	r0, r0, #2
   27af0:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
   27af4:	e9c7 3110 	strd	r3, r1, [r7, #64]	; 0x40
   27af8:	4653      	mov	r3, sl
   27afa:	613c      	str	r4, [r7, #16]
   27afc:	ea4f 0884 	mov.w	r8, r4, lsl #2
   27b00:	46b2      	mov	sl, r6
   27b02:	6238      	str	r0, [r7, #32]
   27b04:	627a      	str	r2, [r7, #36]	; 0x24
   27b06:	4405      	add	r5, r0
   27b08:	f107 0440 	add.w	r4, r7, #64	; 0x40
   27b0c:	461e      	mov	r6, r3
   27b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27b10:	6820      	ldr	r0, [r4, #0]
   27b12:	eb03 3106 	add.w	r1, r3, r6, lsl #12
   27b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   27b1a:	f7e4 fb21 	bl	c160 <memcpy>
   27b1e:	f854 0b04 	ldr.w	r0, [r4], #4
   27b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b24:	4629      	mov	r1, r5
   27b26:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
   27b2a:	f7e4 fb19 	bl	c160 <memcpy>
   27b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27b30:	3601      	adds	r6, #1
   27b32:	42b3      	cmp	r3, r6
   27b34:	4445      	add	r5, r8
   27b36:	dcea      	bgt.n	27b0e <run_prefilter.isra.6+0x6e>
   27b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   27b3c:	4656      	mov	r6, sl
   27b3e:	2b00      	cmp	r3, #0
   27b40:	f040 815f 	bne.w	27e02 <run_prefilter.isra.6+0x362>
   27b44:	210f      	movs	r1, #15
   27b46:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 27eac <run_prefilter.isra.6+0x40c>
   27b4a:	63f9      	str	r1, [r7, #60]	; 0x3c
   27b4c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
   27b50:	ed9f 6ad7 	vldr	s12, [pc, #860]	; 27eb0 <run_prefilter.isra.6+0x410>
   27b54:	eddf 6ad7 	vldr	s13, [pc, #860]	; 27eb4 <run_prefilter.isra.6+0x414>
   27b58:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 27eb8 <run_prefilter.isra.6+0x418>
   27b5c:	eddf 7ad7 	vldr	s15, [pc, #860]	; 27ebc <run_prefilter.isra.6+0x41c>
   27b60:	1aca      	subs	r2, r1, r3
   27b62:	2a00      	cmp	r2, #0
   27b64:	bfb8      	it	lt
   27b66:	4252      	neglt	r2, r2
   27b68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   27b6c:	0052      	lsls	r2, r2, #1
   27b6e:	428a      	cmp	r2, r1
   27b70:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   27b74:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   27b78:	bfc8      	it	gt
   27b7a:	eef0 6a65 	vmovgt.f32	s13, s11
   27b7e:	bfd8      	it	le
   27b80:	eeb0 7a46 	vmovle.f32	s14, s12
   27b84:	bfc8      	it	gt
   27b86:	eef0 7a46 	vmovgt.f32	s15, s12
   27b8a:	2a18      	cmp	r2, #24
   27b8c:	f340 80e1 	ble.w	27d52 <run_prefilter.isra.6+0x2b2>
   27b90:	2a22      	cmp	r2, #34	; 0x22
   27b92:	f340 80dc 	ble.w	27d4e <run_prefilter.isra.6+0x2ae>
   27b96:	eddf 6ac6 	vldr	s13, [pc, #792]	; 27eb0 <run_prefilter.isra.6+0x410>
   27b9a:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
   27b9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   27ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27ba6:	bfc4      	itt	gt
   27ba8:	eddf 6ac5 	vldrgt	s13, [pc, #788]	; 27ec0 <run_prefilter.isra.6+0x420>
   27bac:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
   27bb0:	eddf 6ac4 	vldr	s13, [pc, #784]	; 27ec4 <run_prefilter.isra.6+0x424>
   27bb4:	eeb4 7ae6 	vcmpe.f32	s14, s13
   27bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27bbc:	bfc4      	itt	gt
   27bbe:	eddf 6ac0 	vldrgt	s13, [pc, #768]	; 27ec0 <run_prefilter.isra.6+0x420>
   27bc2:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
   27bc6:	eddf 6abd 	vldr	s13, [pc, #756]	; 27ebc <run_prefilter.isra.6+0x41c>
   27bca:	eef4 7ae6 	vcmpe.f32	s15, s13
   27bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27bd2:	bfd8      	it	le
   27bd4:	eef0 7a66 	vmovle.f32	s15, s13
   27bd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   27bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27be0:	f100 8107 	bmi.w	27df2 <run_prefilter.isra.6+0x352>
   27be4:	ee70 7a47 	vsub.f32	s15, s0, s14
   27be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   27bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27bf0:	f100 8172 	bmi.w	27ed8 <run_prefilter.isra.6+0x438>
   27bf4:	eddf 6ab2 	vldr	s13, [pc, #712]	; 27ec0 <run_prefilter.isra.6+0x420>
   27bf8:	eef4 7a66 	vcmp.f32	s15, s13
   27bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27c00:	bf48      	it	mi
   27c02:	eeb0 0a47 	vmovmi.f32	s0, s14
   27c06:	eddf 7ab0 	vldr	s15, [pc, #704]	; 27ec8 <run_prefilter.isra.6+0x428>
   27c0a:	ee20 0a27 	vmul.f32	s0, s0, s15
   27c0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   27c12:	eec0 7a07 	vdiv.f32	s15, s0, s14
   27c16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   27c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
   27c1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   27c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27c26:	f100 815a 	bmi.w	27ede <run_prefilter.isra.6+0x43e>
   27c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   27c2e:	ee17 2a90 	vmov	r2, s15
   27c32:	3a01      	subs	r2, #1
   27c34:	f382 0203 	usat	r2, #3, r2
   27c38:	607a      	str	r2, [r7, #4]
   27c3a:	3201      	adds	r2, #1
   27c3c:	ee08 2a10 	vmov	s16, r2
   27c40:	eddf 7aa2 	vldr	s15, [pc, #648]	; 27ecc <run_prefilter.isra.6+0x42c>
   27c44:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   27c48:	2201      	movs	r2, #1
   27c4a:	ee28 8a27 	vmul.f32	s16, s16, s15
   27c4e:	603a      	str	r2, [r7, #0]
   27c50:	eef1 8a48 	vneg.f32	s17, s16
   27c54:	f5c9 6280 	rsb	r2, r9, #1024	; 0x400
   27c58:	0092      	lsls	r2, r2, #2
   27c5a:	617a      	str	r2, [r7, #20]
   27c5c:	f8d7 a01c 	ldr.w	sl, [r7, #28]
   27c60:	f10b 02f4 	add.w	r2, fp, #244	; 0xf4
   27c64:	2500      	movs	r5, #0
   27c66:	60fa      	str	r2, [r7, #12]
   27c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27c6a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   27c6c:	68fa      	ldr	r2, [r7, #12]
   27c6e:	2b0f      	cmp	r3, #15
   27c70:	fb05 f60a 	mul.w	r6, r5, sl
   27c74:	eb02 0186 	add.w	r1, r2, r6, lsl #2
   27c78:	bfb8      	it	lt
   27c7a:	230f      	movlt	r3, #15
   27c7c:	693a      	ldr	r2, [r7, #16]
   27c7e:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
   27c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27c84:	61b9      	str	r1, [r7, #24]
   27c86:	fb02 f805 	mul.w	r8, r2, r5
   27c8a:	00ae      	lsls	r6, r5, #2
   27c8c:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   27c90:	6a3a      	ldr	r2, [r7, #32]
   27c92:	61fe      	str	r6, [r7, #28]
   27c94:	f7e4 fa64 	bl	c160 <memcpy>
   27c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
   27c9c:	4433      	add	r3, r6
   27c9e:	eba4 040a 	sub.w	r4, r4, sl
   27ca2:	60bb      	str	r3, [r7, #8]
   27ca4:	f853 1c08 	ldr.w	r1, [r3, #-8]
   27ca8:	2c00      	cmp	r4, #0
   27caa:	f040 8081 	bne.w	27db0 <run_prefilter.isra.6+0x310>
   27cae:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
   27cb2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   27cb4:	e9cd a304 	strd	sl, r3, [sp, #16]
   27cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27cba:	ed9b 0a1b 	vldr	s0, [fp, #108]	; 0x6c
   27cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   27cc0:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
   27cc4:	9203      	str	r2, [sp, #12]
   27cc6:	eba9 0c04 	sub.w	ip, r9, r4
   27cca:	e9cd c300 	strd	ip, r3, [sp]
   27cce:	f504 6280 	add.w	r2, r4, #1024	; 0x400
   27cd2:	eb04 000a 	add.w	r0, r4, sl
   27cd6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27cd8:	9402      	str	r4, [sp, #8]
   27cda:	4440      	add	r0, r8
   27cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   27ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27ce2:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
   27ce6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   27cea:	eeb1 0a40 	vneg.f32	s0, s0
   27cee:	eef0 0a68 	vmov.f32	s1, s17
   27cf2:	f00b fdfb 	bl	338ec <comb_filter>
   27cf6:	eb09 0108 	add.w	r1, r9, r8
   27cfa:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   27cfe:	6a3a      	ldr	r2, [r7, #32]
   27d00:	69b8      	ldr	r0, [r7, #24]
   27d02:	f7e4 fa2d 	bl	c160 <memcpy>
   27d06:	02ab      	lsls	r3, r5, #10
   27d08:	eb09 0103 	add.w	r1, r9, r3
   27d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d0e:	69fc      	ldr	r4, [r7, #28]
   27d10:	697a      	ldr	r2, [r7, #20]
   27d12:	f107 0048 	add.w	r0, r7, #72	; 0x48
   27d16:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   27d1a:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
   27d1e:	eb03 3305 	add.w	r3, r3, r5, lsl #12
   27d22:	4404      	add	r4, r0
   27d24:	4618      	mov	r0, r3
   27d26:	dd2d      	ble.n	27d84 <run_prefilter.isra.6+0x2e4>
   27d28:	f854 1c08 	ldr.w	r1, [r4, #-8]
   27d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27d2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   27d32:	4419      	add	r1, r3
   27d34:	f7e4 fa14 	bl	c160 <memcpy>
   27d38:	2d00      	cmp	r5, #0
   27d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27d3c:	bf0c      	ite	eq
   27d3e:	2301      	moveq	r3, #1
   27d40:	2302      	movne	r3, #2
   27d42:	429a      	cmp	r2, r3
   27d44:	dd08      	ble.n	27d58 <run_prefilter.isra.6+0x2b8>
   27d46:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
   27d4a:	2501      	movs	r5, #1
   27d4c:	e78c      	b.n	27c68 <run_prefilter.isra.6+0x1c8>
   27d4e:	eeb0 7a66 	vmov.f32	s14, s13
   27d52:	eef0 7a47 	vmov.f32	s15, s14
   27d56:	e71e      	b.n	27b96 <run_prefilter.isra.6+0xf6>
   27d58:	f7fe fefa 	bl	26b50 <restore_stack>
   27d5c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   27d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27d62:	ed82 8a00 	vstr	s16, [r2]
   27d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   27d6a:	6838      	ldr	r0, [r7, #0]
   27d6c:	6013      	str	r3, [r2, #0]
   27d6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   27d72:	461a      	mov	r2, r3
   27d74:	687b      	ldr	r3, [r7, #4]
   27d76:	6013      	str	r3, [r2, #0]
   27d78:	374c      	adds	r7, #76	; 0x4c
   27d7a:	46bd      	mov	sp, r7
   27d7c:	ecbd 8b02 	vpop	{d8}
   27d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d84:	f7e4 fa86 	bl	c294 <memmove>
   27d88:	69fa      	ldr	r2, [r7, #28]
   27d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
   27d8e:	4413      	add	r3, r2
   27d90:	02aa      	lsls	r2, r5, #10
   27d92:	f502 6080 	add.w	r0, r2, #1024	; 0x400
   27d96:	f853 1c08 	ldr.w	r1, [r3, #-8]
   27d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27d9e:	eba0 0009 	sub.w	r0, r0, r9
   27da2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   27da6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27daa:	f7e4 f9d9 	bl	c160 <memcpy>
   27dae:	e7c3      	b.n	27d38 <run_prefilter.isra.6+0x298>
   27db0:	eddb 0a1b 	vldr	s1, [fp, #108]	; 0x6c
   27db4:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
   27db8:	f8db 2048 	ldr.w	r2, [fp, #72]	; 0x48
   27dbc:	f8db c070 	ldr.w	ip, [fp, #112]	; 0x70
   27dc0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   27dc2:	9205      	str	r2, [sp, #20]
   27dc4:	eef1 0a60 	vneg.f32	s1, s1
   27dc8:	2200      	movs	r2, #0
   27dca:	eb08 000a 	add.w	r0, r8, sl
   27dce:	9204      	str	r2, [sp, #16]
   27dd0:	9203      	str	r2, [sp, #12]
   27dd2:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
   27dd6:	461a      	mov	r2, r3
   27dd8:	9400      	str	r4, [sp, #0]
   27dda:	eeb0 0a60 	vmov.f32	s0, s1
   27dde:	e9cd cc01 	strd	ip, ip, [sp, #4]
   27de2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   27de6:	f00b fd81 	bl	338ec <comb_filter>
   27dea:	68bb      	ldr	r3, [r7, #8]
   27dec:	f853 1c08 	ldr.w	r1, [r3, #-8]
   27df0:	e75d      	b.n	27cae <run_prefilter.isra.6+0x20e>
   27df2:	2200      	movs	r2, #0
   27df4:	607a      	str	r2, [r7, #4]
   27df6:	eddf 8a36 	vldr	s17, [pc, #216]	; 27ed0 <run_prefilter.isra.6+0x430>
   27dfa:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 27eac <run_prefilter.isra.6+0x40c>
   27dfe:	603a      	str	r2, [r7, #0]
   27e00:	e728      	b.n	27c54 <run_prefilter.isra.6+0x1b4>
   27e02:	1073      	asrs	r3, r6, #1
   27e04:	009b      	lsls	r3, r3, #2
   27e06:	3307      	adds	r3, #7
   27e08:	f023 0307 	bic.w	r3, r3, #7
   27e0c:	ebad 0d03 	sub.w	sp, sp, r3
   27e10:	ad06      	add	r5, sp, #24
   27e12:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
   27e16:	9300      	str	r3, [sp, #0]
   27e18:	f107 0040 	add.w	r0, r7, #64	; 0x40
   27e1c:	4652      	mov	r2, sl
   27e1e:	4629      	mov	r1, r5
   27e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27e22:	f005 f9f1 	bl	2d208 <pitch_downsample>
   27e26:	f107 043c 	add.w	r4, r7, #60	; 0x3c
   27e2a:	f8db 3048 	ldr.w	r3, [fp, #72]	; 0x48
   27e2e:	9301      	str	r3, [sp, #4]
   27e30:	4629      	mov	r1, r5
   27e32:	f505 6000 	add.w	r0, r5, #2048	; 0x800
   27e36:	f240 33d3 	movw	r3, #979	; 0x3d3
   27e3a:	464a      	mov	r2, r9
   27e3c:	9400      	str	r4, [sp, #0]
   27e3e:	f005 fc51 	bl	2d6e4 <pitch_search>
   27e42:	f8db 1048 	ldr.w	r1, [fp, #72]	; 0x48
   27e46:	f8db 2068 	ldr.w	r2, [fp, #104]	; 0x68
   27e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27e4c:	9400      	str	r4, [sp, #0]
   27e4e:	e9cd 2101 	strd	r2, r1, [sp, #4]
   27e52:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
   27e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   27e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
   27e5c:	464b      	mov	r3, r9
   27e5e:	4628      	mov	r0, r5
   27e60:	ed9b 0a1b 	vldr	s0, [fp, #108]	; 0x6c
   27e64:	220f      	movs	r2, #15
   27e66:	f005 fe57 	bl	2db18 <remove_doubling>
   27e6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27e6c:	eddf 7a19 	vldr	s15, [pc, #100]	; 27ed4 <run_prefilter.isra.6+0x434>
   27e70:	f240 33fe 	movw	r3, #1022	; 0x3fe
   27e74:	4299      	cmp	r1, r3
   27e76:	bfc4      	itt	gt
   27e78:	63fb      	strgt	r3, [r7, #60]	; 0x3c
   27e7a:	4619      	movgt	r1, r3
   27e7c:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
   27e80:	2b02      	cmp	r3, #2
   27e82:	ee20 0a27 	vmul.f32	s0, s0, s15
   27e86:	f77f ae61 	ble.w	27b4c <run_prefilter.isra.6+0xac>
   27e8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   27e8e:	2b04      	cmp	r3, #4
   27e90:	ee20 0a27 	vmul.f32	s0, s0, s15
   27e94:	f77f ae5a 	ble.w	27b4c <run_prefilter.isra.6+0xac>
   27e98:	2b08      	cmp	r3, #8
   27e9a:	bfd8      	it	le
   27e9c:	ee20 0a27 	vmulle.f32	s0, s0, s15
   27ea0:	f77f ae54 	ble.w	27b4c <run_prefilter.isra.6+0xac>
   27ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 27eac <run_prefilter.isra.6+0x40c>
   27ea8:	e650      	b.n	27b4c <run_prefilter.isra.6+0xac>
   27eaa:	bf00      	nop
   27eac:	00000000 	.word	0x00000000
   27eb0:	3ecccccd 	.word	0x3ecccccd
   27eb4:	3e99999a 	.word	0x3e99999a
   27eb8:	3f19999a 	.word	0x3f19999a
   27ebc:	3e4ccccd 	.word	0x3e4ccccd
   27ec0:	3dcccccd 	.word	0x3dcccccd
   27ec4:	3f0ccccd 	.word	0x3f0ccccd
   27ec8:	42000000 	.word	0x42000000
   27ecc:	3dc00000 	.word	0x3dc00000
   27ed0:	80000000 	.word	0x80000000
   27ed4:	3f333333 	.word	0x3f333333
   27ed8:	eeb0 0a47 	vmov.f32	s0, s14
   27edc:	e693      	b.n	27c06 <run_prefilter.isra.6+0x166>
   27ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   27ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   27ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   27eea:	ee17 2a90 	vmov	r2, s15
   27eee:	e6a1      	b.n	27c34 <run_prefilter.isra.6+0x194>

00027ef0 <tf_analysis.isra.7>:
   27ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ef4:	ed2d 8b06 	vpush	{d8-d10}
   27ef8:	b093      	sub	sp, #76	; 0x4c
   27efa:	af00      	add	r7, sp, #0
   27efc:	eeb0 8a40 	vmov.f32	s16, s0
   27f00:	61f9      	str	r1, [r7, #28]
   27f02:	4693      	mov	fp, r2
   27f04:	61bb      	str	r3, [r7, #24]
   27f06:	e9d7 5824 	ldrd	r5, r8, [r7, #144]	; 0x90
   27f0a:	6278      	str	r0, [r7, #36]	; 0x24
   27f0c:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
   27f10:	f7fe fe0c 	bl	26b2c <save_stack>
   27f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27f16:	69f8      	ldr	r0, [r7, #28]
   27f18:	681a      	ldr	r2, [r3, #0]
   27f1a:	0043      	lsls	r3, r0, #1
   27f1c:	18d1      	adds	r1, r2, r3
   27f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   27f20:	f931 1c02 	ldrsh.w	r1, [r1, #-2]
   27f24:	f932 3010 	ldrsh.w	r3, [r2, r0, lsl #1]
   27f28:	1a5b      	subs	r3, r3, r1
   27f2a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
   27f2e:	0081      	lsls	r1, r0, #2
   27f30:	fa03 f308 	lsl.w	r3, r3, r8
   27f34:	ee39 9a48 	vsub.f32	s18, s18, s16
   27f38:	6179      	str	r1, [r7, #20]
   27f3a:	009b      	lsls	r3, r3, #2
   27f3c:	3107      	adds	r1, #7
   27f3e:	eefd 7a00 	vmov.f32	s15, #208	; 0xbe800000 -0.250
   27f42:	f021 0107 	bic.w	r1, r1, #7
   27f46:	3307      	adds	r3, #7
   27f48:	eeb4 9ae7 	vcmpe.f32	s18, s15
   27f4c:	f023 0307 	bic.w	r3, r3, #7
   27f50:	ebad 0d01 	sub.w	sp, sp, r1
   27f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27f58:	46ec      	mov	ip, sp
   27f5a:	ebad 0d03 	sub.w	sp, sp, r3
   27f5e:	bf54      	ite	pl
   27f60:	eddf 7a93 	vldrpl	s15, [pc, #588]	; 281b0 <tf_analysis.isra.7+0x2c0>
   27f64:	ed9f 9a93 	vldrmi	s18, [pc, #588]	; 281b4 <tf_analysis.isra.7+0x2c4>
   27f68:	f8c7 c020 	str.w	ip, [r7, #32]
   27f6c:	466e      	mov	r6, sp
   27f6e:	ebad 0d03 	sub.w	sp, sp, r3
   27f72:	f8c7 d010 	str.w	sp, [r7, #16]
   27f76:	ebad 0d01 	sub.w	sp, sp, r1
   27f7a:	bf58      	it	pl
   27f7c:	ee29 9a27 	vmulpl.f32	s18, s18, s15
   27f80:	f8c7 d00c 	str.w	sp, [r7, #12]
   27f84:	2800      	cmp	r0, #0
   27f86:	ebad 0d01 	sub.w	sp, sp, r1
   27f8a:	f8c7 d008 	str.w	sp, [r7, #8]
   27f8e:	f340 8115 	ble.w	281bc <tf_analysis.isra.7+0x2cc>
   27f92:	fb05 f004 	mul.w	r0, r5, r4
   27f96:	f1bb 0f00 	cmp.w	fp, #0
   27f9a:	f04f 0101 	mov.w	r1, #1
   27f9e:	62b8      	str	r0, [r7, #40]	; 0x28
   27fa0:	ebc8 73c8 	rsb	r3, r8, r8, lsl #31
   27fa4:	bf14      	ite	ne
   27fa6:	4640      	movne	r0, r8
   27fa8:	2000      	moveq	r0, #0
   27faa:	408b      	lsls	r3, r1
   27fac:	ee09 0a90 	vmov	s19, r0
   27fb0:	ed9f aa81 	vldr	s20, [pc, #516]	; 281b8 <tf_analysis.isra.7+0x2c8>
   27fb4:	603b      	str	r3, [r7, #0]
   27fb6:	fa01 f008 	lsl.w	r0, r1, r8
   27fba:	6078      	str	r0, [r7, #4]
   27fbc:	4689      	mov	r9, r1
   27fbe:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
   27fc2:	2300      	movs	r3, #0
   27fc4:	1c99      	adds	r1, r3, #2
   27fc6:	5ed3      	ldrsh	r3, [r2, r3]
   27fc8:	5e52      	ldrsh	r2, [r2, r1]
   27fca:	6339      	str	r1, [r7, #48]	; 0x30
   27fcc:	1ad2      	subs	r2, r2, r3
   27fce:	fa03 f108 	lsl.w	r1, r3, r8
   27fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   27fd6:	fa02 fa08 	lsl.w	sl, r2, r8
   27fda:	4419      	add	r1, r3
   27fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   27fe0:	ea4f 048a 	mov.w	r4, sl, lsl #2
   27fe4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   27fe8:	4622      	mov	r2, r4
   27fea:	4630      	mov	r0, r6
   27fec:	f7e4 f8b8 	bl	c160 <memcpy>
   27ff0:	f1bb 0f00 	cmp.w	fp, #0
   27ff4:	f040 80a0 	bne.w	28138 <tf_analysis.isra.7+0x248>
   27ff8:	f1ba 0f00 	cmp.w	sl, #0
   27ffc:	f340 8220 	ble.w	28440 <tf_analysis.isra.7+0x550>
   28000:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 281b8 <tf_analysis.isra.7+0x2c8>
   28004:	4631      	mov	r1, r6
   28006:	2200      	movs	r2, #0
   28008:	ecf1 7a01 	vldmia	r1!, {s15}
   2800c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28014:	f102 0201 	add.w	r2, r2, #1
   28018:	d45e      	bmi.n	280d8 <tf_analysis.isra.7+0x1e8>
   2801a:	4592      	cmp	sl, r2
   2801c:	ee37 7a27 	vadd.f32	s14, s14, s15
   28020:	dcf2      	bgt.n	28008 <tf_analysis.isra.7+0x118>
   28022:	eef8 8ae9 	vcvt.f32.s32	s17, s19
   28026:	ee68 8a89 	vmul.f32	s17, s17, s18
   2802a:	ee68 8a87 	vmul.f32	s17, s17, s14
   2802e:	ee78 8a87 	vadd.f32	s17, s17, s14
   28032:	f1bb 0f00 	cmp.w	fp, #0
   28036:	f000 80b7 	beq.w	281a8 <tf_analysis.isra.7+0x2b8>
   2803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2803c:	2b01      	cmp	r3, #1
   2803e:	f040 81cc 	bne.w	283da <tf_analysis.isra.7+0x4ea>
   28042:	2300      	movs	r3, #0
   28044:	63bb      	str	r3, [r7, #56]	; 0x38
   28046:	465b      	mov	r3, fp
   28048:	4434      	add	r4, r6
   2804a:	2501      	movs	r5, #1
   2804c:	46b3      	mov	fp, r6
   2804e:	461e      	mov	r6, r3
   28050:	1e69      	subs	r1, r5, #1
   28052:	bbae      	cbnz	r6, 280c0 <tf_analysis.isra.7+0x1d0>
   28054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28056:	2b01      	cmp	r3, #1
   28058:	d043      	beq.n	280e2 <tf_analysis.isra.7+0x1f2>
   2805a:	4588      	cmp	r8, r1
   2805c:	db43      	blt.n	280e6 <tf_analysis.isra.7+0x1f6>
   2805e:	ee08 5a10 	vmov	s16, r5
   28062:	fa09 f201 	lsl.w	r2, r9, r1
   28066:	4658      	mov	r0, fp
   28068:	fa4a f101 	asr.w	r1, sl, r1
   2806c:	f00a faac 	bl	325c8 <haar1>
   28070:	f1ba 0f00 	cmp.w	sl, #0
   28074:	ed9f 7a50 	vldr	s14, [pc, #320]	; 281b8 <tf_analysis.isra.7+0x2c8>
   28078:	bfc8      	it	gt
   2807a:	465a      	movgt	r2, fp
   2807c:	dd0a      	ble.n	28094 <tf_analysis.isra.7+0x1a4>
   2807e:	ecf2 7a01 	vldmia	r2!, {s15}
   28082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2808a:	d420      	bmi.n	280ce <tf_analysis.isra.7+0x1de>
   2808c:	42a2      	cmp	r2, r4
   2808e:	ee37 7a27 	vadd.f32	s14, s14, s15
   28092:	d1f4      	bne.n	2807e <tf_analysis.isra.7+0x18e>
   28094:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   28098:	ee28 8a09 	vmul.f32	s16, s16, s18
   2809c:	ee28 8a07 	vmul.f32	s16, s16, s14
   280a0:	ee38 7a07 	vadd.f32	s14, s16, s14
   280a4:	eeb4 7ae8 	vcmpe.f32	s14, s17
   280a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   280ac:	bf48      	it	mi
   280ae:	63bd      	strmi	r5, [r7, #56]	; 0x38
   280b0:	f105 0501 	add.w	r5, r5, #1
   280b4:	bf48      	it	mi
   280b6:	eef0 8a47 	vmovmi.f32	s17, s14
   280ba:	1e69      	subs	r1, r5, #1
   280bc:	2e00      	cmp	r6, #0
   280be:	d0c9      	beq.n	28054 <tf_analysis.isra.7+0x164>
   280c0:	4588      	cmp	r8, r1
   280c2:	dd27      	ble.n	28114 <tf_analysis.isra.7+0x224>
   280c4:	eba8 0305 	sub.w	r3, r8, r5
   280c8:	ee08 3a10 	vmov	s16, r3
   280cc:	e7c9      	b.n	28062 <tf_analysis.isra.7+0x172>
   280ce:	42a2      	cmp	r2, r4
   280d0:	ee37 7a67 	vsub.f32	s14, s14, s15
   280d4:	d1d3      	bne.n	2807e <tf_analysis.isra.7+0x18e>
   280d6:	e7dd      	b.n	28094 <tf_analysis.isra.7+0x1a4>
   280d8:	4592      	cmp	sl, r2
   280da:	ee37 7a67 	vsub.f32	s14, s14, s15
   280de:	dc93      	bgt.n	28008 <tf_analysis.isra.7+0x118>
   280e0:	e79f      	b.n	28022 <tf_analysis.isra.7+0x132>
   280e2:	4588      	cmp	r8, r1
   280e4:	dcbb      	bgt.n	2805e <tf_analysis.isra.7+0x16e>
   280e6:	4633      	mov	r3, r6
   280e8:	465e      	mov	r6, fp
   280ea:	469b      	mov	fp, r3
   280ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   280ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   280f0:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
   280f4:	005b      	lsls	r3, r3, #1
   280f6:	6013      	str	r3, [r2, #0]
   280f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   280fa:	2a01      	cmp	r2, #1
   280fc:	d014      	beq.n	28128 <tf_analysis.isra.7+0x238>
   280fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28100:	3304      	adds	r3, #4
   28102:	637b      	str	r3, [r7, #52]	; 0x34
   28104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28106:	4619      	mov	r1, r3
   28108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2810a:	4299      	cmp	r1, r3
   2810c:	d056      	beq.n	281bc <tf_analysis.isra.7+0x2cc>
   2810e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28110:	6812      	ldr	r2, [r2, #0]
   28112:	e757      	b.n	27fc4 <tf_analysis.isra.7+0xd4>
   28114:	4633      	mov	r3, r6
   28116:	465e      	mov	r6, fp
   28118:	469b      	mov	fp, r3
   2811a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2811c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2811e:	005b      	lsls	r3, r3, #1
   28120:	6013      	str	r3, [r2, #0]
   28122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28124:	2a01      	cmp	r2, #1
   28126:	d1ea      	bne.n	280fe <tf_analysis.isra.7+0x20e>
   28128:	b113      	cbz	r3, 28130 <tf_analysis.isra.7+0x240>
   2812a:	683a      	ldr	r2, [r7, #0]
   2812c:	429a      	cmp	r2, r3
   2812e:	d1e6      	bne.n	280fe <tf_analysis.isra.7+0x20e>
   28130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28132:	3b01      	subs	r3, #1
   28134:	6013      	str	r3, [r2, #0]
   28136:	e7e2      	b.n	280fe <tf_analysis.isra.7+0x20e>
   28138:	f1ba 0f00 	cmp.w	sl, #0
   2813c:	f73f af60 	bgt.w	28000 <tf_analysis.isra.7+0x110>
   28140:	ee07 8a90 	vmov	s15, r8
   28144:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   28148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2814a:	ee68 8a89 	vmul.f32	s17, s17, s18
   2814e:	2b01      	cmp	r3, #1
   28150:	ee68 8a8a 	vmul.f32	s17, s17, s20
   28154:	ee78 8a8a 	vadd.f32	s17, s17, s20
   28158:	f43f af73 	beq.w	28042 <tf_analysis.isra.7+0x152>
   2815c:	693d      	ldr	r5, [r7, #16]
   2815e:	4622      	mov	r2, r4
   28160:	4631      	mov	r1, r6
   28162:	4628      	mov	r0, r5
   28164:	f7e3 fffc 	bl	c160 <memcpy>
   28168:	4628      	mov	r0, r5
   2816a:	687a      	ldr	r2, [r7, #4]
   2816c:	fa4a f108 	asr.w	r1, sl, r8
   28170:	f00a fa2a 	bl	325c8 <haar1>
   28174:	ed9f 7a10 	vldr	s14, [pc, #64]	; 281b8 <tf_analysis.isra.7+0x2c8>
   28178:	f108 0001 	add.w	r0, r8, #1
   2817c:	ee07 0a90 	vmov	s15, r0
   28180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   28184:	ee67 7a89 	vmul.f32	s15, s15, s18
   28188:	ee67 7a87 	vmul.f32	s15, s15, s14
   2818c:	ee37 7a87 	vadd.f32	s14, s15, s14
   28190:	eeb4 7ae8 	vcmpe.f32	s14, s17
   28194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28198:	f57f af53 	bpl.w	28042 <tf_analysis.isra.7+0x152>
   2819c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   281a0:	eef0 8a47 	vmov.f32	s17, s14
   281a4:	63bb      	str	r3, [r7, #56]	; 0x38
   281a6:	e74e      	b.n	28046 <tf_analysis.isra.7+0x156>
   281a8:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
   281ac:	e74b      	b.n	28046 <tf_analysis.isra.7+0x156>
   281ae:	bf00      	nop
   281b0:	3d23d70a 	.word	0x3d23d70a
   281b4:	bc23d70a 	.word	0xbc23d70a
   281b8:	00000000 	.word	0x00000000
   281bc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   281c0:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
   281c4:	6812      	ldr	r2, [r2, #0]
   281c6:	63ba      	str	r2, [r7, #56]	; 0x38
   281c8:	6a3a      	ldr	r2, [r7, #32]
   281ca:	f8c7 8094 	str.w	r8, [r7, #148]	; 0x94
   281ce:	6812      	ldr	r2, [r2, #0]
   281d0:	637a      	str	r2, [r7, #52]	; 0x34
   281d2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   281d6:	ea4f 034b 	mov.w	r3, fp, lsl #1
   281da:	f1a2 0e04 	sub.w	lr, r2, #4
   281de:	4aa2      	ldr	r2, [pc, #648]	; (28468 <tf_analysis.isra.7+0x578>)
   281e0:	633b      	str	r3, [r7, #48]	; 0x30
   281e2:	f1bb 0f00 	cmp.w	fp, #0
   281e6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   281ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   281ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   281f2:	bf18      	it	ne
   281f4:	2200      	movne	r2, #0
   281f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   281f8:	697a      	ldr	r2, [r7, #20]
   281fa:	4496      	add	lr, r2
   281fc:	f107 0240 	add.w	r2, r7, #64	; 0x40
   28200:	63fa      	str	r2, [r7, #60]	; 0x3c
   28202:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   28206:	e9c7 b209 	strd	fp, r2, [r7, #36]	; 0x24
   2820a:	469b      	mov	fp, r3
   2820c:	f99b 9000 	ldrsb.w	r9, [fp]
   28210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28212:	f99b a001 	ldrsb.w	sl, [fp, #1]
   28216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28218:	ea4f 0949 	mov.w	r9, r9, lsl #1
   2821c:	eba3 0109 	sub.w	r1, r3, r9
   28220:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   28224:	eba3 000a 	sub.w	r0, r3, sl
   28228:	2900      	cmp	r1, #0
   2822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2822c:	bfb8      	it	lt
   2822e:	4249      	neglt	r1, r1
   28230:	2800      	cmp	r0, #0
   28232:	bfb8      	it	lt
   28234:	4240      	neglt	r0, r0
   28236:	fb03 f101 	mul.w	r1, r3, r1
   2823a:	fb03 2000 	mla	r0, r3, r0, r2
   2823e:	69fb      	ldr	r3, [r7, #28]
   28240:	2b01      	cmp	r3, #1
   28242:	dd25      	ble.n	28290 <tf_analysis.isra.7+0x3a0>
   28244:	6a3d      	ldr	r5, [r7, #32]
   28246:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   2824a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   2824e:	f854 2f04 	ldr.w	r2, [r4, #4]!
   28252:	eba3 0c09 	sub.w	ip, r3, r9
   28256:	f1bc 0f00 	cmp.w	ip, #0
   2825a:	eba3 030a 	sub.w	r3, r3, sl
   2825e:	bfb8      	it	lt
   28260:	f1cc 0c00 	rsblt	ip, ip, #0
   28264:	2b00      	cmp	r3, #0
   28266:	bfb8      	it	lt
   28268:	425b      	neglt	r3, r3
   2826a:	fb02 fc0c 	mul.w	ip, r2, ip
   2826e:	fb02 f303 	mul.w	r3, r2, r3
   28272:	eb06 0801 	add.w	r8, r6, r1
   28276:	1832      	adds	r2, r6, r0
   28278:	428a      	cmp	r2, r1
   2827a:	bfd4      	ite	le
   2827c:	eb0c 0102 	addle.w	r1, ip, r2
   28280:	4461      	addgt	r1, ip
   28282:	4580      	cmp	r8, r0
   28284:	bfd4      	ite	le
   28286:	eb03 0008 	addle.w	r0, r3, r8
   2828a:	1818      	addgt	r0, r3, r0
   2828c:	45a6      	cmp	lr, r4
   2828e:	d1dc      	bne.n	2824a <tf_analysis.isra.7+0x35a>
   28290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28292:	4281      	cmp	r1, r0
   28294:	bfa8      	it	ge
   28296:	4601      	movge	r1, r0
   28298:	f843 1b04 	str.w	r1, [r3], #4
   2829c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   282a0:	4293      	cmp	r3, r2
   282a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   282a4:	f10b 0b02 	add.w	fp, fp, #2
   282a8:	d1b0      	bne.n	2820c <tf_analysis.isra.7+0x31c>
   282aa:	e9d7 3210 	ldrd	r3, r2, [r7, #64]	; 0x40
   282ae:	429a      	cmp	r2, r3
   282b0:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
   282b4:	f8d7 8094 	ldr.w	r8, [r7, #148]	; 0x94
   282b8:	f2c0 80b9 	blt.w	2842e <tf_analysis.isra.7+0x53e>
   282bc:	2300      	movs	r3, #0
   282be:	62fb      	str	r3, [r7, #44]	; 0x2c
   282c0:	4b69      	ldr	r3, [pc, #420]	; (28468 <tf_analysis.isra.7+0x578>)
   282c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   282c4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
   282c8:	eb08 0342 	add.w	r3, r8, r2, lsl #1
   282cc:	f918 2012 	ldrsb.w	r2, [r8, r2, lsl #1]
   282d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
   282d4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
   282d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   282da:	ea4f 0942 	mov.w	r9, r2, lsl #1
   282de:	eba3 010a 	sub.w	r1, r3, sl
   282e2:	2900      	cmp	r1, #0
   282e4:	eba3 0309 	sub.w	r3, r3, r9
   282e8:	bfb8      	it	lt
   282ea:	4249      	neglt	r1, r1
   282ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
   282ee:	2b00      	cmp	r3, #0
   282f0:	bfb8      	it	lt
   282f2:	425b      	neglt	r3, r3
   282f4:	fb02 f101 	mul.w	r1, r2, r1
   282f8:	fb02 f303 	mul.w	r3, r2, r3
   282fc:	f1bb 0f00 	cmp.w	fp, #0
   28300:	d102      	bne.n	28308 <tf_analysis.isra.7+0x418>
   28302:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   28306:	4411      	add	r1, r2
   28308:	697a      	ldr	r2, [r7, #20]
   2830a:	69b8      	ldr	r0, [r7, #24]
   2830c:	3a04      	subs	r2, #4
   2830e:	63ba      	str	r2, [r7, #56]	; 0x38
   28310:	1882      	adds	r2, r0, r2
   28312:	637a      	str	r2, [r7, #52]	; 0x34
   28314:	69fa      	ldr	r2, [r7, #28]
   28316:	2a01      	cmp	r2, #1
   28318:	f1a2 0002 	sub.w	r0, r2, #2
   2831c:	f340 8099 	ble.w	28452 <tf_analysis.isra.7+0x562>
   28320:	68ba      	ldr	r2, [r7, #8]
   28322:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
   28326:	1d16      	adds	r6, r2, #4
   28328:	68fa      	ldr	r2, [r7, #12]
   2832a:	f8d7 8020 	ldr.w	r8, [r7, #32]
   2832e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   28330:	f8d7 9088 	ldr.w	r9, [r7, #136]	; 0x88
   28334:	6338      	str	r0, [r7, #48]	; 0x30
   28336:	1d15      	adds	r5, r2, #4
   28338:	f04f 0b00 	mov.w	fp, #0
   2833c:	46ac      	mov	ip, r5
   2833e:	eb09 0001 	add.w	r0, r9, r1
   28342:	4298      	cmp	r0, r3
   28344:	bfcc      	ite	gt
   28346:	4618      	movgt	r0, r3
   28348:	2201      	movle	r2, #1
   2834a:	444b      	add	r3, r9
   2834c:	bfd4      	ite	le
   2834e:	f8cc 2000 	strle.w	r2, [ip]
   28352:	f8cc b000 	strgt.w	fp, [ip]
   28356:	4299      	cmp	r1, r3
   28358:	bfd6      	itet	le
   2835a:	2301      	movle	r3, #1
   2835c:	4619      	movgt	r1, r3
   2835e:	6033      	strle	r3, [r6, #0]
   28360:	f858 2f04 	ldr.w	r2, [r8, #4]!
   28364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28366:	f854 5f04 	ldr.w	r5, [r4, #4]!
   2836a:	bfc8      	it	gt
   2836c:	f8c6 b000 	strgt.w	fp, [r6]
   28370:	1ad3      	subs	r3, r2, r3
   28372:	2b00      	cmp	r3, #0
   28374:	eba2 020a 	sub.w	r2, r2, sl
   28378:	bfb8      	it	lt
   2837a:	425b      	neglt	r3, r3
   2837c:	2a00      	cmp	r2, #0
   2837e:	bfb8      	it	lt
   28380:	4252      	neglt	r2, r2
   28382:	45a6      	cmp	lr, r4
   28384:	f106 0604 	add.w	r6, r6, #4
   28388:	f10c 0c04 	add.w	ip, ip, #4
   2838c:	fb05 0303 	mla	r3, r5, r3, r0
   28390:	fb05 1102 	mla	r1, r5, r2, r1
   28394:	d1d3      	bne.n	2833e <tf_analysis.isra.7+0x44e>
   28396:	4299      	cmp	r1, r3
   28398:	69ba      	ldr	r2, [r7, #24]
   2839a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   2839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2839e:	bfcc      	ite	gt
   283a0:	2300      	movgt	r3, #0
   283a2:	2301      	movle	r3, #1
   283a4:	5053      	str	r3, [r2, r1]
   283a6:	68f9      	ldr	r1, [r7, #12]
   283a8:	68bc      	ldr	r4, [r7, #8]
   283aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   283ac:	3104      	adds	r1, #4
   283ae:	3404      	adds	r4, #4
   283b0:	f853 2904 	ldr.w	r2, [r3], #-4
   283b4:	2a01      	cmp	r2, #1
   283b6:	bf0c      	ite	eq
   283b8:	f854 2020 	ldreq.w	r2, [r4, r0, lsl #2]
   283bc:	f851 2020 	ldrne.w	r2, [r1, r0, lsl #2]
   283c0:	601a      	str	r2, [r3, #0]
   283c2:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
   283c6:	d2f3      	bcs.n	283b0 <tf_analysis.isra.7+0x4c0>
   283c8:	f7fe fbc2 	bl	26b50 <restore_stack>
   283cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   283ce:	374c      	adds	r7, #76	; 0x4c
   283d0:	46bd      	mov	sp, r7
   283d2:	ecbd 8b06 	vpop	{d8-d10}
   283d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283da:	693d      	ldr	r5, [r7, #16]
   283dc:	4622      	mov	r2, r4
   283de:	4631      	mov	r1, r6
   283e0:	4628      	mov	r0, r5
   283e2:	f7e3 febd 	bl	c160 <memcpy>
   283e6:	687a      	ldr	r2, [r7, #4]
   283e8:	fa4a f108 	asr.w	r1, sl, r8
   283ec:	4628      	mov	r0, r5
   283ee:	f00a f8eb 	bl	325c8 <haar1>
   283f2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 2846c <tf_analysis.isra.7+0x57c>
   283f6:	f108 0001 	add.w	r0, r8, #1
   283fa:	462a      	mov	r2, r5
   283fc:	1961      	adds	r1, r4, r5
   283fe:	ecf2 7a01 	vldmia	r2!, {s15}
   28402:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2840a:	d40b      	bmi.n	28424 <tf_analysis.isra.7+0x534>
   2840c:	4291      	cmp	r1, r2
   2840e:	ee37 7a27 	vadd.f32	s14, s14, s15
   28412:	f43f aeb3 	beq.w	2817c <tf_analysis.isra.7+0x28c>
   28416:	ecf2 7a01 	vldmia	r2!, {s15}
   2841a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28422:	d5f3      	bpl.n	2840c <tf_analysis.isra.7+0x51c>
   28424:	4291      	cmp	r1, r2
   28426:	ee37 7a67 	vsub.f32	s14, s14, s15
   2842a:	d1e8      	bne.n	283fe <tf_analysis.isra.7+0x50e>
   2842c:	e6a6      	b.n	2817c <tf_analysis.isra.7+0x28c>
   2842e:	f11b 0300 	adds.w	r3, fp, #0
   28432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   28434:	bf18      	it	ne
   28436:	2301      	movne	r3, #1
   28438:	441a      	add	r2, r3
   2843a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2843c:	633a      	str	r2, [r7, #48]	; 0x30
   2843e:	e73f      	b.n	282c0 <tf_analysis.isra.7+0x3d0>
   28440:	ee69 8a0a 	vmul.f32	s17, s18, s20
   28444:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
   28448:	ee68 8a8a 	vmul.f32	s17, s17, s20
   2844c:	ee78 8a8a 	vadd.f32	s17, s17, s20
   28450:	e5f9      	b.n	28046 <tf_analysis.isra.7+0x156>
   28452:	428b      	cmp	r3, r1
   28454:	69ba      	ldr	r2, [r7, #24]
   28456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   28458:	bfb4      	ite	lt
   2845a:	2300      	movlt	r3, #0
   2845c:	2301      	movge	r3, #1
   2845e:	2800      	cmp	r0, #0
   28460:	5053      	str	r3, [r2, r1]
   28462:	dbb1      	blt.n	283c8 <tf_analysis.isra.7+0x4d8>
   28464:	e79f      	b.n	283a6 <tf_analysis.isra.7+0x4b6>
   28466:	bf00      	nop
   28468:	000414c4 	.word	0x000414c4
   2846c:	00000000 	.word	0x00000000

00028470 <dynalloc_analysis.isra.5>:
   28470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28474:	ed2d 8b02 	vpush	{d8}
   28478:	b08f      	sub	sp, #60	; 0x3c
   2847a:	af00      	add	r7, sp, #0
   2847c:	4616      	mov	r6, r2
   2847e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   28480:	61ba      	str	r2, [r7, #24]
   28482:	6239      	str	r1, [r7, #32]
   28484:	4698      	mov	r8, r3
   28486:	f8d7 9078 	ldr.w	r9, [r7, #120]	; 0x78
   2848a:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
   2848e:	62b8      	str	r0, [r7, #40]	; 0x28
   28490:	f7fe fb4c 	bl	26b2c <save_stack>
   28494:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   28496:	6f38      	ldr	r0, [r7, #112]	; 0x70
   28498:	4633      	mov	r3, r6
   2849a:	fb03 f301 	mul.w	r3, r3, r1
   2849e:	009b      	lsls	r3, r3, #2
   284a0:	3307      	adds	r3, #7
   284a2:	f023 0307 	bic.w	r3, r3, #7
   284a6:	ebad 0d03 	sub.w	sp, sp, r3
   284aa:	00b6      	lsls	r6, r6, #2
   284ac:	f8c7 d014 	str.w	sp, [r7, #20]
   284b0:	4632      	mov	r2, r6
   284b2:	ebad 0d03 	sub.w	sp, sp, r3
   284b6:	2100      	movs	r1, #0
   284b8:	f8c7 d034 	str.w	sp, [r7, #52]	; 0x34
   284bc:	f7e3 ff4e 	bl	c35c <memset>
   284c0:	2c00      	cmp	r4, #0
   284c2:	dd34      	ble.n	2852e <dynalloc_analysis.isra.5+0xbe>
   284c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   284c6:	49ad      	ldr	r1, [pc, #692]	; (2877c <dynalloc_analysis.isra.5+0x30c>)
   284c8:	eddf 4aad 	vldr	s9, [pc, #692]	; 28780 <dynalloc_analysis.isra.5+0x310>
   284cc:	ed9f 5aad 	vldr	s10, [pc, #692]	; 28784 <dynalloc_analysis.isra.5+0x314>
   284d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   284d2:	f1c3 0309 	rsb	r3, r3, #9
   284d6:	ee06 3a10 	vmov	s12, r3
   284da:	eb09 0044 	add.w	r0, r9, r4, lsl #1
   284de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
   284e2:	3802      	subs	r0, #2
   284e4:	f1a9 0902 	sub.w	r9, r9, #2
   284e8:	2305      	movs	r3, #5
   284ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   284ee:	f939 cf02 	ldrsh.w	ip, [r9, #2]!
   284f2:	ecf1 6a01 	vldmia	r1!, {s13}
   284f6:	ee07 ca90 	vmov	s15, ip
   284fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   284fe:	fb03 fc03 	mul.w	ip, r3, r3
   28502:	ee67 7aa4 	vmul.f32	s15, s15, s9
   28506:	ee07 ca10 	vmov	s14, ip
   2850a:	ee77 7aa5 	vadd.f32	s15, s15, s11
   2850e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   28512:	ee77 7a86 	vadd.f32	s15, s15, s12
   28516:	ee27 7a05 	vmul.f32	s14, s14, s10
   2851a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2851e:	4581      	cmp	r9, r0
   28520:	ee77 7a87 	vadd.f32	s15, s15, s14
   28524:	f103 0301 	add.w	r3, r3, #1
   28528:	ece2 7a01 	vstmia	r2!, {s15}
   2852c:	d1df      	bne.n	284ee <dynalloc_analysis.isra.5+0x7e>
   2852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28530:	ed9f 8a95 	vldr	s16, [pc, #596]	; 28788 <dynalloc_analysis.isra.5+0x318>
   28534:	f8d7 a034 	ldr.w	sl, [r7, #52]	; 0x34
   28538:	f8d7 e06c 	ldr.w	lr, [r7, #108]	; 0x6c
   2853c:	ea4f 0984 	mov.w	r9, r4, lsl #2
   28540:	444b      	add	r3, r9
   28542:	ebc4 7c84 	rsb	ip, r4, r4, lsl #30
   28546:	61fb      	str	r3, [r7, #28]
   28548:	4619      	mov	r1, r3
   2854a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   2854e:	2000      	movs	r0, #0
   28550:	2c00      	cmp	r4, #0
   28552:	dd11      	ble.n	28578 <dynalloc_analysis.isra.5+0x108>
   28554:	eb01 030c 	add.w	r3, r1, ip
   28558:	4652      	mov	r2, sl
   2855a:	ecf3 7a01 	vldmia	r3!, {s15}
   2855e:	ecb2 7a01 	vldmia	r2!, {s14}
   28562:	ee77 7ac7 	vsub.f32	s15, s15, s14
   28566:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2856a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2856e:	bfd8      	it	le
   28570:	eeb0 8a67 	vmovle.f32	s16, s15
   28574:	428b      	cmp	r3, r1
   28576:	d1f0      	bne.n	2855a <dynalloc_analysis.isra.5+0xea>
   28578:	3001      	adds	r0, #1
   2857a:	4586      	cmp	lr, r0
   2857c:	4431      	add	r1, r6
   2857e:	dce7      	bgt.n	28550 <dynalloc_analysis.isra.5+0xe0>
   28580:	1df3      	adds	r3, r6, #7
   28582:	f023 0307 	bic.w	r3, r3, #7
   28586:	ebad 0d03 	sub.w	sp, sp, r3
   2858a:	46ea      	mov	sl, sp
   2858c:	2c00      	cmp	r4, #0
   2858e:	ebad 0d03 	sub.w	sp, sp, r3
   28592:	466b      	mov	r3, sp
   28594:	f340 85cd 	ble.w	29132 <dynalloc_analysis.isra.5+0xcc2>
   28598:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2859a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2859c:	f8d7 b01c 	ldr.w	fp, [r7, #28]
   285a0:	468e      	mov	lr, r1
   285a2:	46d4      	mov	ip, sl
   285a4:	4650      	mov	r0, sl
   285a6:	ecf2 7a01 	vldmia	r2!, {s15}
   285aa:	ecb1 7a01 	vldmia	r1!, {s14}
   285ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
   285b2:	455a      	cmp	r2, fp
   285b4:	ece0 7a01 	vstmia	r0!, {s15}
   285b8:	d1f5      	bne.n	285a6 <dynalloc_analysis.isra.5+0x136>
   285ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   285bc:	2a02      	cmp	r2, #2
   285be:	f000 82b6 	beq.w	28b2e <dynalloc_analysis.isra.5+0x6be>
   285c2:	4618      	mov	r0, r3
   285c4:	464a      	mov	r2, r9
   285c6:	4651      	mov	r1, sl
   285c8:	f7e3 fdca 	bl	c160 <memcpy>
   285cc:	2c01      	cmp	r4, #1
   285ce:	4603      	mov	r3, r0
   285d0:	f1a4 0e02 	sub.w	lr, r4, #2
   285d4:	f340 85b5 	ble.w	29142 <dynalloc_analysis.isra.5+0xcd2>
   285d8:	4652      	mov	r2, sl
   285da:	ecf2 7a01 	vldmia	r2!, {s15}
   285de:	eb0a 0009 	add.w	r0, sl, r9
   285e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   285e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
   285ea:	ecb2 7a01 	vldmia	r2!, {s14}
   285ee:	eef4 7ac7 	vcmpe.f32	s15, s14
   285f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   285f6:	d506      	bpl.n	28606 <dynalloc_analysis.isra.5+0x196>
   285f8:	4282      	cmp	r2, r0
   285fa:	ed02 7a01 	vstr	s14, [r2, #-4]
   285fe:	d006      	beq.n	2860e <dynalloc_analysis.isra.5+0x19e>
   28600:	eef0 7a47 	vmov.f32	s15, s14
   28604:	e7ef      	b.n	285e6 <dynalloc_analysis.isra.5+0x176>
   28606:	4282      	cmp	r2, r0
   28608:	ed42 7a01 	vstr	s15, [r2, #-4]
   2860c:	d1eb      	bne.n	285e6 <dynalloc_analysis.isra.5+0x176>
   2860e:	f1a9 0104 	sub.w	r1, r9, #4
   28612:	4602      	mov	r2, r0
   28614:	4451      	add	r1, sl
   28616:	4670      	mov	r0, lr
   28618:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
   2861c:	ed72 7a01 	vldmdb	r2!, {s15}
   28620:	ed11 7a01 	vldr	s14, [r1, #-4]
   28624:	ee77 7ae6 	vsub.f32	s15, s15, s13
   28628:	3801      	subs	r0, #1
   2862a:	eef4 7ac7 	vcmpe.f32	s15, s14
   2862e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28632:	f140 8099 	bpl.w	28768 <dynalloc_analysis.isra.5+0x2f8>
   28636:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2863a:	f1a1 0104 	sub.w	r1, r1, #4
   2863e:	d1ed      	bne.n	2861c <dynalloc_analysis.isra.5+0x1ac>
   28640:	2c00      	cmp	r4, #0
   28642:	dd43      	ble.n	286cc <dynalloc_analysis.isra.5+0x25c>
   28644:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
   28648:	ee38 6a46 	vsub.f32	s12, s16, s12
   2864c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2878c <dynalloc_analysis.isra.5+0x31c>
   28650:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   28654:	eeb4 6ae6 	vcmpe.f32	s12, s13
   28658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2865c:	bf58      	it	pl
   2865e:	eef0 6a46 	vmovpl.f32	s13, s12
   28662:	eb03 0009 	add.w	r0, r3, r9
   28666:	f1a2 0104 	sub.w	r1, r2, #4
   2866a:	f100 822c 	bmi.w	28ac6 <dynalloc_analysis.isra.5+0x656>
   2866e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   28672:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   28676:	f04f 0c20 	mov.w	ip, #32
   2867a:	e006      	b.n	2868a <dynalloc_analysis.isra.5+0x21a>
   2867c:	2a05      	cmp	r2, #5
   2867e:	dd7a      	ble.n	28776 <dynalloc_analysis.isra.5+0x306>
   28680:	2201      	movs	r2, #1
   28682:	4283      	cmp	r3, r0
   28684:	f841 2f04 	str.w	r2, [r1, #4]!
   28688:	d020      	beq.n	286cc <dynalloc_analysis.isra.5+0x25c>
   2868a:	ecba 7a01 	vldmia	sl!, {s14}
   2868e:	ecf3 7a01 	vldmia	r3!, {s15}
   28692:	eef4 6ac7 	vcmpe.f32	s13, s14
   28696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2869a:	bfcc      	ite	gt
   2869c:	ee77 7ac6 	vsubgt.f32	s15, s15, s12
   286a0:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   286a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
   286a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   286ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   286b0:	bf48      	it	mi
   286b2:	ee77 7ac5 	vsubmi.f32	s15, s15, s10
   286b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   286ba:	ee17 2a90 	vmov	r2, s15
   286be:	2a00      	cmp	r2, #0
   286c0:	dadc      	bge.n	2867c <dynalloc_analysis.isra.5+0x20c>
   286c2:	2220      	movs	r2, #32
   286c4:	4283      	cmp	r3, r0
   286c6:	f841 2f04 	str.w	r2, [r1, #4]!
   286ca:	d1de      	bne.n	2868a <dynalloc_analysis.isra.5+0x21a>
   286cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   286d0:	2b32      	cmp	r3, #50	; 0x32
   286d2:	dc5d      	bgt.n	28790 <dynalloc_analysis.isra.5+0x320>
   286d4:	4544      	cmp	r4, r8
   286d6:	dd39      	ble.n	2874c <dynalloc_analysis.isra.5+0x2dc>
   286d8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   286dc:	ea6f 0108 	mvn.w	r1, r8
   286e0:	ea4f 0388 	mov.w	r3, r8, lsl #2
   286e4:	4421      	add	r1, r4
   286e6:	18d0      	adds	r0, r2, r3
   286e8:	2902      	cmp	r1, #2
   286ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
   286ee:	4642      	mov	r2, r8
   286f0:	d91c      	bls.n	2872c <dynalloc_analysis.isra.5+0x2bc>
   286f2:	b128      	cbz	r0, 28700 <dynalloc_analysis.isra.5+0x290>
   286f4:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
   286f8:	210d      	movs	r1, #13
   286fa:	50e9      	str	r1, [r5, r3]
   286fc:	f108 0801 	add.w	r8, r8, #1
   28700:	1813      	adds	r3, r2, r0
   28702:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   28706:	1ae5      	subs	r5, r4, r3
   28708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2870c:	086a      	lsrs	r2, r5, #1
   2870e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   28712:	200d      	movs	r0, #13
   28714:	210d      	movs	r1, #13
   28716:	e8e3 0102 	strd	r0, r1, [r3], #8
   2871a:	4293      	cmp	r3, r2
   2871c:	d1fb      	bne.n	28716 <dynalloc_analysis.isra.5+0x2a6>
   2871e:	f025 0301 	bic.w	r3, r5, #1
   28722:	429d      	cmp	r5, r3
   28724:	4498      	add	r8, r3
   28726:	d011      	beq.n	2874c <dynalloc_analysis.isra.5+0x2dc>
   28728:	ea4f 0388 	mov.w	r3, r8, lsl #2
   2872c:	f108 0201 	add.w	r2, r8, #1
   28730:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   28734:	210d      	movs	r1, #13
   28736:	4294      	cmp	r4, r2
   28738:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
   2873c:	dd06      	ble.n	2874c <dynalloc_analysis.isra.5+0x2dc>
   2873e:	4403      	add	r3, r0
   28740:	f108 0802 	add.w	r8, r8, #2
   28744:	4544      	cmp	r4, r8
   28746:	6059      	str	r1, [r3, #4]
   28748:	dd00      	ble.n	2874c <dynalloc_analysis.isra.5+0x2dc>
   2874a:	6099      	str	r1, [r3, #8]
   2874c:	2200      	movs	r2, #0
   2874e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   28752:	601a      	str	r2, [r3, #0]
   28754:	f7fe f9fc 	bl	26b50 <restore_stack>
   28758:	eeb0 0a48 	vmov.f32	s0, s16
   2875c:	373c      	adds	r7, #60	; 0x3c
   2875e:	46bd      	mov	sp, r7
   28760:	ecbd 8b02 	vpop	{d8}
   28764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28768:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2876c:	ed61 7a01 	vstmdb	r1!, {s15}
   28770:	f47f af54 	bne.w	2861c <dynalloc_analysis.isra.5+0x1ac>
   28774:	e764      	b.n	28640 <dynalloc_analysis.isra.5+0x1d0>
   28776:	fa4c f202 	asr.w	r2, ip, r2
   2877a:	e782      	b.n	28682 <dynalloc_analysis.isra.5+0x212>
   2877c:	00041218 	.word	0x00041218
   28780:	3d800000 	.word	0x3d800000
   28784:	3bcb295f 	.word	0x3bcb295f
   28788:	c1ff3333 	.word	0xc1ff3333
   2878c:	00000000 	.word	0x00000000
   28790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   28794:	2b00      	cmp	r3, #0
   28796:	d09d      	beq.n	286d4 <dynalloc_analysis.isra.5+0x264>
   28798:	2d00      	cmp	r5, #0
   2879a:	d19b      	bne.n	286d4 <dynalloc_analysis.isra.5+0x264>
   2879c:	6979      	ldr	r1, [r7, #20]
   2879e:	f8c7 8004 	str.w	r8, [r7, #4]
   287a2:	f1a9 0308 	sub.w	r3, r9, #8
   287a6:	18cb      	adds	r3, r1, r3
   287a8:	f1a9 0204 	sub.w	r2, r9, #4
   287ac:	188a      	adds	r2, r1, r2
   287ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   287b0:	6a3b      	ldr	r3, [r7, #32]
   287b2:	613a      	str	r2, [r7, #16]
   287b4:	eb01 0009 	add.w	r0, r1, r9
   287b8:	460a      	mov	r2, r1
   287ba:	469a      	mov	sl, r3
   287bc:	eb03 0109 	add.w	r1, r3, r9
   287c0:	f8d7 8010 	ldr.w	r8, [r7, #16]
   287c4:	66bc      	str	r4, [r7, #104]	; 0x68
   287c6:	1f23      	subs	r3, r4, #4
   287c8:	60b8      	str	r0, [r7, #8]
   287ca:	4684      	mov	ip, r0
   287cc:	f102 0904 	add.w	r9, r2, #4
   287d0:	627d      	str	r5, [r7, #36]	; 0x24
   287d2:	633d      	str	r5, [r7, #48]	; 0x30
   287d4:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
   287d8:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
   287dc:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
   287e0:	60fb      	str	r3, [r7, #12]
   287e2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   287e6:	460c      	mov	r4, r1
   287e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
   287ea:	edda 4a00 	vldr	s9, [sl]
   287ee:	2a01      	cmp	r2, #1
   287f0:	f1a9 0304 	sub.w	r3, r9, #4
   287f4:	ed49 4a01 	vstr	s9, [r9, #-4]
   287f8:	dd1f      	ble.n	2883a <dynalloc_analysis.isra.5+0x3ca>
   287fa:	eef0 7a64 	vmov.f32	s15, s9
   287fe:	4648      	mov	r0, r9
   28800:	4652      	mov	r2, sl
   28802:	2101      	movs	r1, #1
   28804:	ed92 7a00 	vldr	s14, [r2]
   28808:	3204      	adds	r2, #4
   2880a:	edd2 6a00 	vldr	s13, [r2]
   2880e:	ee37 7a22 	vadd.f32	s14, s14, s5
   28812:	ee77 7a83 	vadd.f32	s15, s15, s6
   28816:	eeb4 7a66 	vcmp.f32	s14, s13
   2881a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2881e:	eef4 7ae6 	vcmpe.f32	s15, s13
   28822:	bf48      	it	mi
   28824:	460d      	movmi	r5, r1
   28826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2882a:	f140 819b 	bpl.w	28b64 <dynalloc_analysis.isra.5+0x6f4>
   2882e:	ece0 7a01 	vstmia	r0!, {s15}
   28832:	4560      	cmp	r0, ip
   28834:	f101 0101 	add.w	r1, r1, #1
   28838:	d1e4      	bne.n	28804 <dynalloc_analysis.isra.5+0x394>
   2883a:	1e68      	subs	r0, r5, #1
   2883c:	b37d      	cbz	r5, 2889e <dynalloc_analysis.isra.5+0x42e>
   2883e:	6b39      	ldr	r1, [r7, #48]	; 0x30
   28840:	1c6a      	adds	r2, r5, #1
   28842:	4408      	add	r0, r1
   28844:	0092      	lsls	r2, r2, #2
   28846:	6a39      	ldr	r1, [r7, #32]
   28848:	f1a2 0b04 	sub.w	fp, r2, #4
   2884c:	3001      	adds	r0, #1
   2884e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   28852:	441a      	add	r2, r3
   28854:	eb0b 0103 	add.w	r1, fp, r3
   28858:	ed72 7a01 	vldmdb	r2!, {s15}
   2885c:	ed30 7a01 	vldmdb	r0!, {s14}
   28860:	ed51 6a01 	vldr	s13, [r1, #-4]
   28864:	ee77 7aa3 	vadd.f32	s15, s15, s7
   28868:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2886c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28870:	bfd4      	ite	le
   28872:	eeb0 6a47 	vmovle.f32	s12, s14
   28876:	eeb0 6a67 	vmovgt.f32	s12, s15
   2887a:	eeb4 6ae6 	vcmpe.f32	s12, s13
   2887e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28882:	dc08      	bgt.n	28896 <dynalloc_analysis.isra.5+0x426>
   28884:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2888c:	bfd4      	ite	le
   2888e:	eef0 6a47 	vmovle.f32	s13, s14
   28892:	eef0 6a67 	vmovgt.f32	s13, s15
   28896:	454a      	cmp	r2, r9
   28898:	ed61 6a01 	vstmdb	r1!, {s13}
   2889c:	d1dc      	bne.n	28858 <dynalloc_analysis.isra.5+0x3e8>
   2889e:	f1be 0f02 	cmp.w	lr, #2
   288a2:	f340 842a 	ble.w	290fa <dynalloc_analysis.isra.5+0xc8a>
   288a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   288a8:	ed9a 1a01 	vldr	s2, [sl, #4]
   288ac:	edda 1a02 	vldr	s3, [sl, #8]
   288b0:	2a07      	cmp	r2, #7
   288b2:	f340 843c 	ble.w	2912e <dynalloc_analysis.isra.5+0xcbe>
   288b6:	ed9a 7a03 	vldr	s14, [sl, #12]
   288ba:	613b      	str	r3, [r7, #16]
   288bc:	eef0 5a41 	vmov.f32	s11, s2
   288c0:	eeb0 6a61 	vmov.f32	s12, s3
   288c4:	4651      	mov	r1, sl
   288c6:	4618      	mov	r0, r3
   288c8:	2202      	movs	r2, #2
   288ca:	e0bc      	b.n	28a46 <dynalloc_analysis.isra.5+0x5d6>
   288cc:	eef4 7ac2 	vcmpe.f32	s15, s4
   288d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   288d4:	f140 83d4 	bpl.w	29080 <dynalloc_analysis.isra.5+0xc10>
   288d8:	eeb4 6ac2 	vcmpe.f32	s12, s4
   288dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   288e0:	bf54      	ite	pl
   288e2:	eef0 7a42 	vmovpl.f32	s15, s4
   288e6:	eef0 7a46 	vmovmi.f32	s15, s12
   288ea:	ee77 7ac4 	vsub.f32	s15, s15, s8
   288ee:	edd1 5a01 	vldr	s11, [r1, #4]
   288f2:	ed90 2a03 	vldr	s4, [r0, #12]
   288f6:	eeb4 5ae7 	vcmpe.f32	s10, s15
   288fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   288fe:	eef4 5ac6 	vcmpe.f32	s11, s12
   28902:	bfd8      	it	le
   28904:	eeb0 5a67 	vmovle.f32	s10, s15
   28908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2890c:	ed80 5a02 	vstr	s10, [r0, #8]
   28910:	dc05      	bgt.n	2891e <dynalloc_analysis.isra.5+0x4ae>
   28912:	eef0 7a46 	vmov.f32	s15, s12
   28916:	eeb0 6a65 	vmov.f32	s12, s11
   2891a:	eef0 5a67 	vmov.f32	s11, s15
   2891e:	ed91 5a05 	vldr	s10, [r1, #20]
   28922:	eeb4 5ae6 	vcmpe.f32	s10, s13
   28926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2892a:	bf54      	ite	pl
   2892c:	eef0 0a66 	vmovpl.f32	s1, s13
   28930:	eef0 0a45 	vmovmi.f32	s1, s10
   28934:	eeb4 6ae0 	vcmpe.f32	s12, s1
   28938:	bf54      	ite	pl
   2893a:	eef0 7a45 	vmovpl.f32	s15, s10
   2893e:	eef0 7a66 	vmovmi.f32	s15, s13
   28942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28946:	dd07      	ble.n	28958 <dynalloc_analysis.isra.5+0x4e8>
   28948:	eeb0 0a65 	vmov.f32	s0, s11
   2894c:	eef0 0a46 	vmov.f32	s1, s12
   28950:	eef0 5a67 	vmov.f32	s11, s15
   28954:	eef0 7a40 	vmov.f32	s15, s0
   28958:	eef4 5ac7 	vcmpe.f32	s11, s14
   2895c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28960:	f100 8366 	bmi.w	29030 <dynalloc_analysis.isra.5+0xbc0>
   28964:	eeb4 7ae0 	vcmpe.f32	s14, s1
   28968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2896c:	f100 839a 	bmi.w	290a4 <dynalloc_analysis.isra.5+0xc34>
   28970:	eef4 7a47 	vcmp.f32	s15, s14
   28974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28978:	bfc8      	it	gt
   2897a:	eef0 7a47 	vmovgt.f32	s15, s14
   2897e:	ee77 7ac4 	vsub.f32	s15, s15, s8
   28982:	ed91 6a02 	vldr	s12, [r1, #8]
   28986:	edd0 0a04 	vldr	s1, [r0, #16]
   2898a:	eef4 7ac2 	vcmpe.f32	s15, s4
   2898e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28992:	eeb4 6ac7 	vcmpe.f32	s12, s14
   28996:	bf58      	it	pl
   28998:	eeb0 2a67 	vmovpl.f32	s4, s15
   2899c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   289a0:	ed80 2a03 	vstr	s4, [r0, #12]
   289a4:	dc05      	bgt.n	289b2 <dynalloc_analysis.isra.5+0x542>
   289a6:	eef0 7a47 	vmov.f32	s15, s14
   289aa:	eeb0 7a46 	vmov.f32	s14, s12
   289ae:	eeb0 6a67 	vmov.f32	s12, s15
   289b2:	ed91 2a06 	vldr	s4, [r1, #24]
   289b6:	eeb4 2ac5 	vcmpe.f32	s4, s10
   289ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   289be:	bf54      	ite	pl
   289c0:	eef0 5a45 	vmovpl.f32	s11, s10
   289c4:	eef0 5a42 	vmovmi.f32	s11, s4
   289c8:	eeb4 7ae5 	vcmpe.f32	s14, s11
   289cc:	bf54      	ite	pl
   289ce:	eef0 7a42 	vmovpl.f32	s15, s4
   289d2:	eef0 7a45 	vmovmi.f32	s15, s10
   289d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   289da:	dd07      	ble.n	289ec <dynalloc_analysis.isra.5+0x57c>
   289dc:	eeb0 0a46 	vmov.f32	s0, s12
   289e0:	eef0 5a47 	vmov.f32	s11, s14
   289e4:	eeb0 6a67 	vmov.f32	s12, s15
   289e8:	eef0 7a40 	vmov.f32	s15, s0
   289ec:	eeb4 6ae6 	vcmpe.f32	s12, s13
   289f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   289f4:	f100 830f 	bmi.w	29016 <dynalloc_analysis.isra.5+0xba6>
   289f8:	eef4 5ae6 	vcmpe.f32	s11, s13
   289fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a00:	f300 832a 	bgt.w	29058 <dynalloc_analysis.isra.5+0xbe8>
   28a04:	eef4 7a66 	vcmp.f32	s15, s13
   28a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a0c:	bfc8      	it	gt
   28a0e:	eef0 7a66 	vmovgt.f32	s15, s13
   28a12:	ee77 7ac4 	vsub.f32	s15, s15, s8
   28a16:	f102 0b04 	add.w	fp, r2, #4
   28a1a:	eef4 7ae0 	vcmpe.f32	s15, s1
   28a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a22:	f140 80a9 	bpl.w	28b78 <dynalloc_analysis.isra.5+0x708>
   28a26:	68fb      	ldr	r3, [r7, #12]
   28a28:	455b      	cmp	r3, fp
   28a2a:	f100 000c 	add.w	r0, r0, #12
   28a2e:	f101 010c 	add.w	r1, r1, #12
   28a32:	f102 0203 	add.w	r2, r2, #3
   28a36:	f340 80ab 	ble.w	28b90 <dynalloc_analysis.isra.5+0x720>
   28a3a:	eef0 5a66 	vmov.f32	s11, s13
   28a3e:	eeb0 6a45 	vmov.f32	s12, s10
   28a42:	eeb0 7a42 	vmov.f32	s14, s4
   28a46:	edd1 7a00 	vldr	s15, [r1]
   28a4a:	ed90 5a02 	vldr	s10, [r0, #8]
   28a4e:	eef4 5ae7 	vcmpe.f32	s11, s15
   28a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a56:	d405      	bmi.n	28a64 <dynalloc_analysis.isra.5+0x5f4>
   28a58:	eef0 6a65 	vmov.f32	s13, s11
   28a5c:	eef0 5a67 	vmov.f32	s11, s15
   28a60:	eef0 7a66 	vmov.f32	s15, s13
   28a64:	edd1 6a04 	vldr	s13, [r1, #16]
   28a68:	eeb4 7ae6 	vcmpe.f32	s14, s13
   28a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a70:	bfd4      	ite	le
   28a72:	eeb0 2a47 	vmovle.f32	s4, s14
   28a76:	eeb0 2a66 	vmovgt.f32	s4, s13
   28a7a:	eef4 5ac2 	vcmpe.f32	s11, s4
   28a7e:	bfd4      	ite	le
   28a80:	eef0 0a66 	vmovle.f32	s1, s13
   28a84:	eef0 0a47 	vmovgt.f32	s1, s14
   28a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a8c:	dd07      	ble.n	28a9e <dynalloc_analysis.isra.5+0x62e>
   28a8e:	eeb0 0a67 	vmov.f32	s0, s15
   28a92:	eeb0 2a65 	vmov.f32	s4, s11
   28a96:	eef0 7a60 	vmov.f32	s15, s1
   28a9a:	eef0 0a40 	vmov.f32	s1, s0
   28a9e:	eeb4 6ae7 	vcmpe.f32	s12, s15
   28aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28aa6:	f73f af11 	bgt.w	288cc <dynalloc_analysis.isra.5+0x45c>
   28aaa:	eeb4 6ac2 	vcmpe.f32	s12, s4
   28aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28ab2:	f140 82ed 	bpl.w	29090 <dynalloc_analysis.isra.5+0xc20>
   28ab6:	eef4 7ac2 	vcmpe.f32	s15, s4
   28aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28abe:	bf58      	it	pl
   28ac0:	eef0 7a42 	vmovpl.f32	s15, s4
   28ac4:	e711      	b.n	288ea <dynalloc_analysis.isra.5+0x47a>
   28ac6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   28aca:	f04f 0c20 	mov.w	ip, #32
   28ace:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   28ad2:	e00d      	b.n	28af0 <dynalloc_analysis.isra.5+0x680>
   28ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   28ad8:	ee17 2a90 	vmov	r2, s15
   28adc:	2a00      	cmp	r2, #0
   28ade:	db21      	blt.n	28b24 <dynalloc_analysis.isra.5+0x6b4>
   28ae0:	2a05      	cmp	r2, #5
   28ae2:	dd21      	ble.n	28b28 <dynalloc_analysis.isra.5+0x6b8>
   28ae4:	2201      	movs	r2, #1
   28ae6:	4283      	cmp	r3, r0
   28ae8:	f841 2f04 	str.w	r2, [r1, #4]!
   28aec:	f43f adee 	beq.w	286cc <dynalloc_analysis.isra.5+0x25c>
   28af0:	ecba 7a01 	vldmia	sl!, {s14}
   28af4:	ecf3 7a01 	vldmia	r3!, {s15}
   28af8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   28afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b00:	bf58      	it	pl
   28b02:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
   28b06:	ee77 7a86 	vadd.f32	s15, s15, s12
   28b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b12:	d5df      	bpl.n	28ad4 <dynalloc_analysis.isra.5+0x664>
   28b14:	ee77 7ae5 	vsub.f32	s15, s15, s11
   28b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   28b1c:	ee17 2a90 	vmov	r2, s15
   28b20:	2a00      	cmp	r2, #0
   28b22:	dadd      	bge.n	28ae0 <dynalloc_analysis.isra.5+0x670>
   28b24:	2220      	movs	r2, #32
   28b26:	e7de      	b.n	28ae6 <dynalloc_analysis.isra.5+0x676>
   28b28:	fa4c f202 	asr.w	r2, ip, r2
   28b2c:	e7db      	b.n	28ae6 <dynalloc_analysis.isra.5+0x676>
   28b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   28b30:	eb0a 0009 	add.w	r0, sl, r9
   28b34:	4432      	add	r2, r6
   28b36:	ecf2 7a01 	vldmia	r2!, {s15}
   28b3a:	ecfe 6a01 	vldmia	lr!, {s13}
   28b3e:	ecbc 7a01 	vldmia	ip!, {s14}
   28b42:	ee77 7ae6 	vsub.f32	s15, s15, s13
   28b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b4e:	dd04      	ble.n	28b5a <dynalloc_analysis.isra.5+0x6ea>
   28b50:	4584      	cmp	ip, r0
   28b52:	ed0c 7a01 	vstr	s14, [ip, #-4]
   28b56:	d1ee      	bne.n	28b36 <dynalloc_analysis.isra.5+0x6c6>
   28b58:	e533      	b.n	285c2 <dynalloc_analysis.isra.5+0x152>
   28b5a:	4584      	cmp	ip, r0
   28b5c:	ed4c 7a01 	vstr	s15, [ip, #-4]
   28b60:	d1e9      	bne.n	28b36 <dynalloc_analysis.isra.5+0x6c6>
   28b62:	e52e      	b.n	285c2 <dynalloc_analysis.isra.5+0x152>
   28b64:	ece0 6a01 	vstmia	r0!, {s13}
   28b68:	4560      	cmp	r0, ip
   28b6a:	f101 0101 	add.w	r1, r1, #1
   28b6e:	f43f ae64 	beq.w	2883a <dynalloc_analysis.isra.5+0x3ca>
   28b72:	eef0 7a66 	vmov.f32	s15, s13
   28b76:	e645      	b.n	28804 <dynalloc_analysis.isra.5+0x394>
   28b78:	68fb      	ldr	r3, [r7, #12]
   28b7a:	edc0 7a04 	vstr	s15, [r0, #16]
   28b7e:	455b      	cmp	r3, fp
   28b80:	f101 010c 	add.w	r1, r1, #12
   28b84:	f100 000c 	add.w	r0, r0, #12
   28b88:	f102 0203 	add.w	r2, r2, #3
   28b8c:	f73f af55 	bgt.w	28a3a <dynalloc_analysis.isra.5+0x5ca>
   28b90:	693b      	ldr	r3, [r7, #16]
   28b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
   28b94:	6a38      	ldr	r0, [r7, #32]
   28b96:	1851      	adds	r1, r2, r1
   28b98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   28b9c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   28ba0:	ecf1 7a01 	vldmia	r1!, {s15}
   28ba4:	ecb0 5a01 	vldmia	r0!, {s10}
   28ba8:	ed51 6a03 	vldr	s13, [r1, #-12]
   28bac:	ed51 5a02 	vldr	s11, [r1, #-8]
   28bb0:	eef4 6ae5 	vcmpe.f32	s13, s11
   28bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28bb8:	dc05      	bgt.n	28bc6 <dynalloc_analysis.isra.5+0x756>
   28bba:	eeb0 7a65 	vmov.f32	s14, s11
   28bbe:	eef0 5a66 	vmov.f32	s11, s13
   28bc2:	eef0 6a47 	vmov.f32	s13, s14
   28bc6:	ed91 6a00 	vldr	s12, [r1]
   28bca:	ed91 7a01 	vldr	s14, [r1, #4]
   28bce:	eeb4 6ac7 	vcmpe.f32	s12, s14
   28bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28bd6:	dc05      	bgt.n	28be4 <dynalloc_analysis.isra.5+0x774>
   28bd8:	eeb0 2a47 	vmov.f32	s4, s14
   28bdc:	eeb0 7a46 	vmov.f32	s14, s12
   28be0:	eeb0 6a42 	vmov.f32	s12, s4
   28be4:	eef4 5ac7 	vcmpe.f32	s11, s14
   28be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28bec:	dd07      	ble.n	28bfe <dynalloc_analysis.isra.5+0x78e>
   28bee:	eeb0 2a66 	vmov.f32	s4, s13
   28bf2:	eeb0 7a65 	vmov.f32	s14, s11
   28bf6:	eef0 6a46 	vmov.f32	s13, s12
   28bfa:	eeb0 6a42 	vmov.f32	s12, s4
   28bfe:	eef4 6ae7 	vcmpe.f32	s13, s15
   28c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c06:	f140 81df 	bpl.w	28fc8 <dynalloc_analysis.isra.5+0xb58>
   28c0a:	eeb4 7ae6 	vcmpe.f32	s14, s13
   28c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c12:	f340 81e8 	ble.w	28fe6 <dynalloc_analysis.isra.5+0xb76>
   28c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c1e:	bfd8      	it	le
   28c20:	eef0 7a47 	vmovle.f32	s15, s14
   28c24:	ee77 7ac4 	vsub.f32	s15, s15, s8
   28c28:	3201      	adds	r2, #1
   28c2a:	eef4 7ac5 	vcmpe.f32	s15, s10
   28c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c32:	f140 81c3 	bpl.w	28fbc <dynalloc_analysis.isra.5+0xb4c>
   28c36:	4572      	cmp	r2, lr
   28c38:	ed00 5a01 	vstr	s10, [r0, #-4]
   28c3c:	dbb0      	blt.n	28ba0 <dynalloc_analysis.isra.5+0x730>
   28c3e:	eef4 4ac1 	vcmpe.f32	s9, s2
   28c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c46:	eef0 7a41 	vmov.f32	s15, s2
   28c4a:	dc03      	bgt.n	28c54 <dynalloc_analysis.isra.5+0x7e4>
   28c4c:	eef0 7a64 	vmov.f32	s15, s9
   28c50:	eef0 4a41 	vmov.f32	s9, s2
   28c54:	eef4 1ae4 	vcmpe.f32	s3, s9
   28c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c5c:	dc08      	bgt.n	28c70 <dynalloc_analysis.isra.5+0x800>
   28c5e:	eef4 1ae7 	vcmpe.f32	s3, s15
   28c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c66:	bfd4      	ite	le
   28c68:	eef0 4a67 	vmovle.f32	s9, s15
   28c6c:	eef0 4a61 	vmovgt.f32	s9, s3
   28c70:	ee74 4ac4 	vsub.f32	s9, s9, s8
   28c74:	ed59 7a01 	vldr	s15, [r9, #-4]
   28c78:	ed99 7a00 	vldr	s14, [r9]
   28c7c:	eef4 4ae7 	vcmpe.f32	s9, s15
   28c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c84:	eef4 4a47 	vcmp.f32	s9, s14
   28c88:	bf58      	it	pl
   28c8a:	eef0 7a64 	vmovpl.f32	s15, s9
   28c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28c92:	bf48      	it	mi
   28c94:	eef0 4a47 	vmovmi.f32	s9, s14
   28c98:	ed49 7a01 	vstr	s15, [r9, #-4]
   28c9c:	edc9 4a00 	vstr	s9, [r9]
   28ca0:	ed54 7a03 	vldr	s15, [r4, #-12]
   28ca4:	ed14 7a02 	vldr	s14, [r4, #-8]
   28ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
   28cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28cb0:	dc05      	bgt.n	28cbe <dynalloc_analysis.isra.5+0x84e>
   28cb2:	eef0 6a47 	vmov.f32	s13, s14
   28cb6:	eeb0 7a67 	vmov.f32	s14, s15
   28cba:	eef0 7a66 	vmov.f32	s15, s13
   28cbe:	ed54 6a01 	vldr	s13, [r4, #-4]
   28cc2:	eef4 6ae7 	vcmpe.f32	s13, s15
   28cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28cca:	dc08      	bgt.n	28cde <dynalloc_analysis.isra.5+0x86e>
   28ccc:	eef4 6ac7 	vcmpe.f32	s13, s14
   28cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28cd4:	bfd4      	ite	le
   28cd6:	eef0 7a47 	vmovle.f32	s15, s14
   28cda:	eef0 7a66 	vmovgt.f32	s15, s13
   28cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28ce0:	ee77 7ac4 	vsub.f32	s15, s15, s8
   28ce4:	ed92 7a00 	vldr	s14, [r2]
   28ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
   28cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28cf0:	bf58      	it	pl
   28cf2:	eeb0 7a67 	vmovpl.f32	s14, s15
   28cf6:	ed82 7a00 	vstr	s14, [r2]
   28cfa:	ed98 7a00 	vldr	s14, [r8]
   28cfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   28d00:	eef4 7a47 	vcmp.f32	s15, s14
   28d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28d08:	bf48      	it	mi
   28d0a:	eef0 7a47 	vmovmi.f32	s15, s14
   28d0e:	2a00      	cmp	r2, #0
   28d10:	edc8 7a00 	vstr	s15, [r8]
   28d14:	dd0e      	ble.n	28d34 <dynalloc_analysis.isra.5+0x8c4>
   28d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   28d18:	ecb3 7a01 	vldmia	r3!, {s14}
   28d1c:	ecf2 7a01 	vldmia	r2!, {s15}
   28d20:	eef4 7ac7 	vcmpe.f32	s15, s14
   28d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28d28:	f140 8142 	bpl.w	28fb0 <dynalloc_analysis.isra.5+0xb40>
   28d2c:	4563      	cmp	r3, ip
   28d2e:	ed03 7a01 	vstr	s14, [r3, #-4]
   28d32:	d1f1      	bne.n	28d18 <dynalloc_analysis.isra.5+0x8a8>
   28d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   28d36:	69b9      	ldr	r1, [r7, #24]
   28d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28d3a:	4432      	add	r2, r6
   28d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   28d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   28d40:	440a      	add	r2, r1
   28d42:	633a      	str	r2, [r7, #48]	; 0x30
   28d44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   28d46:	3301      	adds	r3, #1
   28d48:	429a      	cmp	r2, r3
   28d4a:	627b      	str	r3, [r7, #36]	; 0x24
   28d4c:	44b2      	add	sl, r6
   28d4e:	44b0      	add	r8, r6
   28d50:	44b4      	add	ip, r6
   28d52:	4434      	add	r4, r6
   28d54:	44b1      	add	r9, r6
   28d56:	f73f ad47 	bgt.w	287e8 <dynalloc_analysis.isra.5+0x378>
   28d5a:	2a02      	cmp	r2, #2
   28d5c:	f8d7 8004 	ldr.w	r8, [r7, #4]
   28d60:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   28d62:	f000 8262 	beq.w	2922a <dynalloc_analysis.isra.5+0xdba>
   28d66:	4544      	cmp	r4, r8
   28d68:	f340 8094 	ble.w	28e94 <dynalloc_analysis.isra.5+0xa24>
   28d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   28d6e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   28d72:	441a      	add	r2, r3
   28d74:	4611      	mov	r1, r2
   28d76:	697a      	ldr	r2, [r7, #20]
   28d78:	2000      	movs	r0, #0
   28d7a:	441a      	add	r2, r3
   28d7c:	ecf1 7a01 	vldmia	r1!, {s15}
   28d80:	ecb2 7a01 	vldmia	r2!, {s14}
   28d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
   28d88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28d90:	f100 815b 	bmi.w	2904a <dynalloc_analysis.isra.5+0xbda>
   28d94:	69fd      	ldr	r5, [r7, #28]
   28d96:	ed42 7a01 	vstr	s15, [r2, #-4]
   28d9a:	42a9      	cmp	r1, r5
   28d9c:	d1ee      	bne.n	28d7c <dynalloc_analysis.isra.5+0x90c>
   28d9e:	697a      	ldr	r2, [r7, #20]
   28da0:	18d5      	adds	r5, r2, r3
   28da2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   28da6:	4629      	mov	r1, r5
   28da8:	18d0      	adds	r0, r2, r3
   28daa:	4642      	mov	r2, r8
   28dac:	ecb1 7a01 	vldmia	r1!, {s14}
   28db0:	ecf0 7a01 	vldmia	r0!, {s15}
   28db4:	eef4 7ac7 	vcmpe.f32	s15, s14
   28db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28dbc:	f102 0201 	add.w	r2, r2, #1
   28dc0:	f140 8123 	bpl.w	2900a <dynalloc_analysis.isra.5+0xb9a>
   28dc4:	4294      	cmp	r4, r2
   28dc6:	ed01 7a01 	vstr	s14, [r1, #-4]
   28dca:	dcef      	bgt.n	28dac <dynalloc_analysis.isra.5+0x93c>
   28dcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   28dd0:	ed9f 3ae0 	vldr	s6, [pc, #896]	; 29154 <dynalloc_analysis.isra.5+0xce4>
   28dd4:	eddf 3ae0 	vldr	s7, [pc, #896]	; 29158 <dynalloc_analysis.isra.5+0xce8>
   28dd8:	ed9f 4ae0 	vldr	s8, [pc, #896]	; 2915c <dynalloc_analysis.isra.5+0xcec>
   28ddc:	eddf 4ae0 	vldr	s9, [pc, #896]	; 29160 <dynalloc_analysis.isra.5+0xcf0>
   28de0:	3b04      	subs	r3, #4
   28de2:	18d1      	adds	r1, r2, r3
   28de4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   28de8:	4642      	mov	r2, r8
   28dea:	eeb2 5a0a 	vmov.f32	s10, #42	; 0x41500000  13.0
   28dee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   28df2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   28df6:	e015      	b.n	28e24 <dynalloc_analysis.isra.5+0x9b4>
   28df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28e00:	bf4a      	itet	mi
   28e02:	ee37 7ac6 	vsubmi.f32	s14, s15, s12
   28e06:	eebd 7ae7 	vcvtpl.s32.f32	s14, s15
   28e0a:	eebd 7ac7 	vcvtmi.s32.f32	s14, s14
   28e0e:	ee17 3a10 	vmov	r3, s14
   28e12:	f113 0f32 	cmn.w	r3, #50	; 0x32
   28e16:	da0f      	bge.n	28e38 <dynalloc_analysis.isra.5+0x9c8>
   28e18:	3201      	adds	r2, #1
   28e1a:	2300      	movs	r3, #0
   28e1c:	4294      	cmp	r4, r2
   28e1e:	f841 3f04 	str.w	r3, [r1, #4]!
   28e22:	dd37      	ble.n	28e94 <dynalloc_analysis.isra.5+0xa24>
   28e24:	ecf5 7a01 	vldmia	r5!, {s15}
   28e28:	eef4 7ae6 	vcmpe.f32	s15, s13
   28e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28e30:	d4e2      	bmi.n	28df8 <dynalloc_analysis.isra.5+0x988>
   28e32:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   28e36:	2304      	movs	r3, #4
   28e38:	ee07 3a10 	vmov	s14, r3
   28e3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   28e40:	3201      	adds	r2, #1
   28e42:	ee37 7ac7 	vsub.f32	s14, s15, s14
   28e46:	ee67 7a03 	vmul.f32	s15, s14, s6
   28e4a:	ee77 7aa3 	vadd.f32	s15, s15, s7
   28e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
   28e52:	ee77 7a84 	vadd.f32	s15, s15, s8
   28e56:	ee67 7a87 	vmul.f32	s15, s15, s14
   28e5a:	ee77 7aa4 	vadd.f32	s15, s15, s9
   28e5e:	ee17 0a90 	vmov	r0, s15
   28e62:	eb00 53c3 	add.w	r3, r0, r3, lsl #23
   28e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   28e6a:	ee07 3a90 	vmov	s15, r3
   28e6e:	ee67 7a85 	vmul.f32	s15, s15, s10
   28e72:	ee77 7aa5 	vadd.f32	s15, s15, s11
   28e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   28e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28e7e:	bf48      	it	mi
   28e80:	ee77 7ac6 	vsubmi.f32	s15, s15, s12
   28e84:	4294      	cmp	r4, r2
   28e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   28e8a:	ee17 3a90 	vmov	r3, s15
   28e8e:	f841 3f04 	str.w	r3, [r1, #4]!
   28e92:	dcc7      	bgt.n	28e24 <dynalloc_analysis.isra.5+0x9b4>
   28e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   28e98:	2b00      	cmp	r3, #0
   28e9a:	f000 8117 	beq.w	290cc <dynalloc_analysis.isra.5+0xc5c>
   28e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   28ea2:	2b00      	cmp	r3, #0
   28ea4:	f040 8112 	bne.w	290cc <dynalloc_analysis.isra.5+0xc5c>
   28ea8:	4544      	cmp	r4, r8
   28eaa:	f77f ac4f 	ble.w	2874c <dynalloc_analysis.isra.5+0x2dc>
   28eae:	ea4f 0388 	mov.w	r3, r8, lsl #2
   28eb2:	f1b8 0f07 	cmp.w	r8, #7
   28eb6:	f340 8125 	ble.w	29104 <dynalloc_analysis.isra.5+0xc94>
   28eba:	4642      	mov	r2, r8
   28ebc:	6979      	ldr	r1, [r7, #20]
   28ebe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   28ec2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   28ec6:	2a0b      	cmp	r2, #11
   28ec8:	f102 0201 	add.w	r2, r2, #1
   28ecc:	dd05      	ble.n	28eda <dynalloc_analysis.isra.5+0xa6a>
   28ece:	edd1 7a00 	vldr	s15, [r1]
   28ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
   28ed6:	edc1 7a00 	vstr	s15, [r1]
   28eda:	4294      	cmp	r4, r2
   28edc:	f101 0104 	add.w	r1, r1, #4
   28ee0:	dcf1      	bgt.n	28ec6 <dynalloc_analysis.isra.5+0xa56>
   28ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   28ee6:	4a9f      	ldr	r2, [pc, #636]	; (29164 <dynalloc_analysis.isra.5+0xcf4>)
   28ee8:	004e      	lsls	r6, r1, #1
   28eea:	fba2 2606 	umull	r2, r6, r2, r6
   28eee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   28ef2:	0876      	lsrs	r6, r6, #1
   28ef4:	2a00      	cmp	r2, #0
   28ef6:	f040 8139 	bne.w	2916c <dynalloc_analysis.isra.5+0xcfc>
   28efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   28efe:	2a00      	cmp	r2, #0
   28f00:	f040 81ea 	bne.w	292d8 <dynalloc_analysis.isra.5+0xe68>
   28f04:	4610      	mov	r0, r2
   28f06:	697a      	ldr	r2, [r7, #20]
   28f08:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
   28f0c:	f8d7 a08c 	ldr.w	sl, [r7, #140]	; 0x8c
   28f10:	441a      	add	r2, r3
   28f12:	4696      	mov	lr, r2
   28f14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   28f16:	f1a3 0c04 	sub.w	ip, r3, #4
   28f1a:	4494      	add	ip, r2
   28f1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   28f20:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   28f24:	eb02 0148 	add.w	r1, r2, r8, lsl #1
   28f28:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   28f2c:	e020      	b.n	28f70 <dynalloc_analysis.isra.5+0xb00>
   28f2e:	2a30      	cmp	r2, #48	; 0x30
   28f30:	f300 8277 	bgt.w	29422 <dynalloc_analysis.isra.5+0xfb2>
   28f34:	ee07 2a90 	vmov	s15, r2
   28f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   28f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
   28f40:	ee87 7a86 	vdiv.f32	s14, s15, s12
   28f44:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   28f48:	ee17 5a90 	vmov	r5, s15
   28f4c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   28f50:	0112      	lsls	r2, r2, #4
   28f52:	4402      	add	r2, r0
   28f54:	ebb6 1fa2 	cmp.w	r6, r2, asr #6
   28f58:	f108 0801 	add.w	r8, r8, #1
   28f5c:	f2c0 827e 	blt.w	2945c <dynalloc_analysis.isra.5+0xfec>
   28f60:	4544      	cmp	r4, r8
   28f62:	f84c 5f04 	str.w	r5, [ip, #4]!
   28f66:	4610      	mov	r0, r2
   28f68:	f77f abf1 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   28f6c:	ea4f 0388 	mov.w	r3, r8, lsl #2
   28f70:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   28f74:	f9b1 5000 	ldrsh.w	r5, [r1]
   28f78:	ed9e 7a00 	vldr	s14, [lr]
   28f7c:	1b52      	subs	r2, r2, r5
   28f7e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   28f82:	fb09 f202 	mul.w	r2, r9, r2
   28f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28f8a:	fa02 f20a 	lsl.w	r2, r2, sl
   28f8e:	bf58      	it	pl
   28f90:	eeb0 7a66 	vmovpl.f32	s14, s13
   28f94:	2a05      	cmp	r2, #5
   28f96:	f101 0102 	add.w	r1, r1, #2
   28f9a:	ecae 7a01 	vstmia	lr!, {s14}
   28f9e:	dcc6      	bgt.n	28f2e <dynalloc_analysis.isra.5+0xabe>
   28fa0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   28fa4:	ee17 5a90 	vmov	r5, s15
   28fa8:	fb02 f205 	mul.w	r2, r2, r5
   28fac:	00d2      	lsls	r2, r2, #3
   28fae:	e7d0      	b.n	28f52 <dynalloc_analysis.isra.5+0xae2>
   28fb0:	4563      	cmp	r3, ip
   28fb2:	ed43 7a01 	vstr	s15, [r3, #-4]
   28fb6:	f47f aeaf 	bne.w	28d18 <dynalloc_analysis.isra.5+0x8a8>
   28fba:	e6bb      	b.n	28d34 <dynalloc_analysis.isra.5+0x8c4>
   28fbc:	4572      	cmp	r2, lr
   28fbe:	ed40 7a01 	vstr	s15, [r0, #-4]
   28fc2:	f6ff aded 	blt.w	28ba0 <dynalloc_analysis.isra.5+0x730>
   28fc6:	e63a      	b.n	28c3e <dynalloc_analysis.isra.5+0x7ce>
   28fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28fd0:	dd13      	ble.n	28ffa <dynalloc_analysis.isra.5+0xb8a>
   28fd2:	eeb4 7ae6 	vcmpe.f32	s14, s13
   28fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28fda:	bfd4      	ite	le
   28fdc:	eef0 7a47 	vmovle.f32	s15, s14
   28fe0:	eef0 7a66 	vmovgt.f32	s15, s13
   28fe4:	e61e      	b.n	28c24 <dynalloc_analysis.isra.5+0x7b4>
   28fe6:	eeb4 6ae6 	vcmpe.f32	s12, s13
   28fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28fee:	bf54      	ite	pl
   28ff0:	eef0 7a66 	vmovpl.f32	s15, s13
   28ff4:	eef0 7a46 	vmovmi.f32	s15, s12
   28ff8:	e614      	b.n	28c24 <dynalloc_analysis.isra.5+0x7b4>
   28ffa:	eeb4 6ae7 	vcmpe.f32	s12, s15
   28ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29002:	bfd8      	it	le
   29004:	eef0 7a46 	vmovle.f32	s15, s12
   29008:	e60c      	b.n	28c24 <dynalloc_analysis.isra.5+0x7b4>
   2900a:	4294      	cmp	r4, r2
   2900c:	ed41 7a01 	vstr	s15, [r1, #-4]
   29010:	f73f aecc 	bgt.w	28dac <dynalloc_analysis.isra.5+0x93c>
   29014:	e6da      	b.n	28dcc <dynalloc_analysis.isra.5+0x95c>
   29016:	eef4 5ac6 	vcmpe.f32	s11, s12
   2901a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2901e:	dc4b      	bgt.n	290b8 <dynalloc_analysis.isra.5+0xc48>
   29020:	eef4 7ac6 	vcmpe.f32	s15, s12
   29024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29028:	bf58      	it	pl
   2902a:	eef0 7a46 	vmovpl.f32	s15, s12
   2902e:	e4f0      	b.n	28a12 <dynalloc_analysis.isra.5+0x5a2>
   29030:	eef4 5ae0 	vcmpe.f32	s11, s1
   29034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29038:	d418      	bmi.n	2906c <dynalloc_analysis.isra.5+0xbfc>
   2903a:	eef4 5ae7 	vcmpe.f32	s11, s15
   2903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29042:	bfd8      	it	le
   29044:	eef0 7a65 	vmovle.f32	s15, s11
   29048:	e499      	b.n	2897e <dynalloc_analysis.isra.5+0x50e>
   2904a:	69fd      	ldr	r5, [r7, #28]
   2904c:	f842 0c04 	str.w	r0, [r2, #-4]
   29050:	42a9      	cmp	r1, r5
   29052:	f47f ae93 	bne.w	28d7c <dynalloc_analysis.isra.5+0x90c>
   29056:	e6a2      	b.n	28d9e <dynalloc_analysis.isra.5+0x92e>
   29058:	eef4 5ac6 	vcmpe.f32	s11, s12
   2905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29060:	bfd4      	ite	le
   29062:	eef0 7a65 	vmovle.f32	s15, s11
   29066:	eef0 7a46 	vmovgt.f32	s15, s12
   2906a:	e4d2      	b.n	28a12 <dynalloc_analysis.isra.5+0x5a2>
   2906c:	eeb4 7ae0 	vcmpe.f32	s14, s1
   29070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29074:	bf54      	ite	pl
   29076:	eef0 7a60 	vmovpl.f32	s15, s1
   2907a:	eef0 7a47 	vmovmi.f32	s15, s14
   2907e:	e47e      	b.n	2897e <dynalloc_analysis.isra.5+0x50e>
   29080:	eef4 7a60 	vcmp.f32	s15, s1
   29084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29088:	bfc8      	it	gt
   2908a:	eef0 7a60 	vmovgt.f32	s15, s1
   2908e:	e42c      	b.n	288ea <dynalloc_analysis.isra.5+0x47a>
   29090:	eeb4 6ae0 	vcmpe.f32	s12, s1
   29094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29098:	bf54      	ite	pl
   2909a:	eef0 7a60 	vmovpl.f32	s15, s1
   2909e:	eef0 7a46 	vmovmi.f32	s15, s12
   290a2:	e422      	b.n	288ea <dynalloc_analysis.isra.5+0x47a>
   290a4:	eef4 5ae0 	vcmpe.f32	s11, s1
   290a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   290ac:	bf54      	ite	pl
   290ae:	eef0 7a60 	vmovpl.f32	s15, s1
   290b2:	eef0 7a65 	vmovmi.f32	s15, s11
   290b6:	e462      	b.n	2897e <dynalloc_analysis.isra.5+0x50e>
   290b8:	eef4 5ae6 	vcmpe.f32	s11, s13
   290bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   290c0:	bfd4      	ite	le
   290c2:	eef0 7a65 	vmovle.f32	s15, s11
   290c6:	eef0 7a66 	vmovgt.f32	s15, s13
   290ca:	e4a2      	b.n	28a12 <dynalloc_analysis.isra.5+0x5a2>
   290cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   290ce:	2b00      	cmp	r3, #0
   290d0:	f47f aeea 	bne.w	28ea8 <dynalloc_analysis.isra.5+0xa38>
   290d4:	4544      	cmp	r4, r8
   290d6:	f77f ab39 	ble.w	2874c <dynalloc_analysis.isra.5+0x2dc>
   290da:	697a      	ldr	r2, [r7, #20]
   290dc:	68b9      	ldr	r1, [r7, #8]
   290de:	ea4f 0388 	mov.w	r3, r8, lsl #2
   290e2:	441a      	add	r2, r3
   290e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   290e8:	edd2 7a00 	vldr	s15, [r2]
   290ec:	ee67 7a87 	vmul.f32	s15, s15, s14
   290f0:	ece2 7a01 	vstmia	r2!, {s15}
   290f4:	428a      	cmp	r2, r1
   290f6:	d1f7      	bne.n	290e8 <dynalloc_analysis.isra.5+0xc78>
   290f8:	e6db      	b.n	28eb2 <dynalloc_analysis.isra.5+0xa42>
   290fa:	ed9a 1a01 	vldr	s2, [sl, #4]
   290fe:	edda 1a02 	vldr	s3, [sl, #8]
   29102:	e59c      	b.n	28c3e <dynalloc_analysis.isra.5+0x7ce>
   29104:	1e60      	subs	r0, r4, #1
   29106:	697a      	ldr	r2, [r7, #20]
   29108:	2807      	cmp	r0, #7
   2910a:	eb02 0103 	add.w	r1, r2, r3
   2910e:	bfa8      	it	ge
   29110:	2007      	movge	r0, #7
   29112:	4642      	mov	r2, r8
   29114:	edd1 7a00 	vldr	s15, [r1]
   29118:	3201      	adds	r2, #1
   2911a:	ee77 7aa7 	vadd.f32	s15, s15, s15
   2911e:	4282      	cmp	r2, r0
   29120:	ece1 7a01 	vstmia	r1!, {s15}
   29124:	ddf6      	ble.n	29114 <dynalloc_analysis.isra.5+0xca4>
   29126:	4294      	cmp	r4, r2
   29128:	f73f aec8 	bgt.w	28ebc <dynalloc_analysis.isra.5+0xa4c>
   2912c:	e6d9      	b.n	28ee2 <dynalloc_analysis.isra.5+0xa72>
   2912e:	2202      	movs	r2, #2
   29130:	e52f      	b.n	28b92 <dynalloc_analysis.isra.5+0x722>
   29132:	4618      	mov	r0, r3
   29134:	464a      	mov	r2, r9
   29136:	4651      	mov	r1, sl
   29138:	f7e3 f812 	bl	c160 <memcpy>
   2913c:	f1a4 0e02 	sub.w	lr, r4, #2
   29140:	4603      	mov	r3, r0
   29142:	f1be 0f00 	cmp.w	lr, #0
   29146:	bfa8      	it	ge
   29148:	eb0a 0009 	addge.w	r0, sl, r9
   2914c:	f6ff aa78 	blt.w	28640 <dynalloc_analysis.isra.5+0x1d0>
   29150:	f7ff ba5d 	b.w	2860e <dynalloc_analysis.isra.5+0x19e>
   29154:	3d9fcb52 	.word	0x3d9fcb52
   29158:	3e677e26 	.word	0x3e677e26
   2915c:	3f322226 	.word	0x3f322226
   29160:	3f7ffb19 	.word	0x3f7ffb19
   29164:	aaaaaaab 	.word	0xaaaaaaab
   29168:	00000000 	.word	0x00000000
   2916c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2916e:	2a00      	cmp	r2, #0
   29170:	f040 80fd 	bne.w	2936e <dynalloc_analysis.isra.5+0xefe>
   29174:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   29178:	2a00      	cmp	r2, #0
   2917a:	f000 81f3 	beq.w	29564 <dynalloc_analysis.isra.5+0x10f4>
   2917e:	697a      	ldr	r2, [r7, #20]
   29180:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   29182:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
   29186:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
   2918a:	441a      	add	r2, r3
   2918c:	4694      	mov	ip, r2
   2918e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   29192:	eb02 0148 	add.w	r1, r2, r8, lsl #1
   29196:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   29198:	1f1d      	subs	r5, r3, #4
   2919a:	4415      	add	r5, r2
   2919c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   291a0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   291a4:	e020      	b.n	291e8 <dynalloc_analysis.isra.5+0xd78>
   291a6:	2a30      	cmp	r2, #48	; 0x30
   291a8:	f300 816e 	bgt.w	29488 <dynalloc_analysis.isra.5+0x1018>
   291ac:	ee07 2a90 	vmov	s15, r2
   291b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   291b4:	ee67 7a87 	vmul.f32	s15, s15, s14
   291b8:	ee87 7a86 	vdiv.f32	s14, s15, s12
   291bc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   291c0:	ee17 ea90 	vmov	lr, s15
   291c4:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   291c8:	0112      	lsls	r2, r2, #4
   291ca:	4402      	add	r2, r0
   291cc:	ebb6 1fa2 	cmp.w	r6, r2, asr #6
   291d0:	f108 0801 	add.w	r8, r8, #1
   291d4:	f2c0 8142 	blt.w	2945c <dynalloc_analysis.isra.5+0xfec>
   291d8:	4544      	cmp	r4, r8
   291da:	f845 ef04 	str.w	lr, [r5, #4]!
   291de:	4610      	mov	r0, r2
   291e0:	f77f aab5 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   291e4:	ea4f 0388 	mov.w	r3, r8, lsl #2
   291e8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   291ec:	f9b1 a000 	ldrsh.w	sl, [r1]
   291f0:	ed9c 7a00 	vldr	s14, [ip]
   291f4:	eba2 020a 	sub.w	r2, r2, sl
   291f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   291fc:	fb0b f202 	mul.w	r2, fp, r2
   29200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29204:	fa02 f209 	lsl.w	r2, r2, r9
   29208:	bf58      	it	pl
   2920a:	eeb0 7a66 	vmovpl.f32	s14, s13
   2920e:	2a05      	cmp	r2, #5
   29210:	f101 0102 	add.w	r1, r1, #2
   29214:	ecac 7a01 	vstmia	ip!, {s14}
   29218:	dcc5      	bgt.n	291a6 <dynalloc_analysis.isra.5+0xd36>
   2921a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2921e:	ee17 ea90 	vmov	lr, s15
   29222:	fb02 f20e 	mul.w	r2, r2, lr
   29226:	00d2      	lsls	r2, r2, #3
   29228:	e7cf      	b.n	291ca <dynalloc_analysis.isra.5+0xd5a>
   2922a:	4544      	cmp	r4, r8
   2922c:	f77f ae32 	ble.w	28e94 <dynalloc_analysis.isra.5+0xa24>
   29230:	697a      	ldr	r2, [r7, #20]
   29232:	6abd      	ldr	r5, [r7, #40]	; 0x28
   29234:	ed1f 5a34 	vldr	s10, [pc, #-208]	; 29168 <dynalloc_analysis.isra.5+0xcf8>
   29238:	eb01 0008 	add.w	r0, r1, r8
   2923c:	0080      	lsls	r0, r0, #2
   2923e:	eb01 0c04 	add.w	ip, r1, r4
   29242:	ea4f 0388 	mov.w	r3, r8, lsl #2
   29246:	4611      	mov	r1, r2
   29248:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
   2924c:	4419      	add	r1, r3
   2924e:	4402      	add	r2, r0
   29250:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
   29254:	4428      	add	r0, r5
   29256:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   2925a:	441d      	add	r5, r3
   2925c:	edd1 6a00 	vldr	s13, [r1]
   29260:	edd2 7a00 	vldr	s15, [r2]
   29264:	ecb5 7a01 	vldmia	r5!, {s14}
   29268:	ee76 6ac6 	vsub.f32	s13, s13, s12
   2926c:	4616      	mov	r6, r2
   2926e:	eef4 6ae7 	vcmpe.f32	s13, s15
   29272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29276:	bf58      	it	pl
   29278:	eef0 7a66 	vmovpl.f32	s15, s13
   2927c:	edc2 7a00 	vstr	s15, [r2]
   29280:	edd1 6a00 	vldr	s13, [r1]
   29284:	ee77 7ac6 	vsub.f32	s15, s15, s12
   29288:	3204      	adds	r2, #4
   2928a:	eef4 7ae6 	vcmpe.f32	s15, s13
   2928e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29292:	bf58      	it	pl
   29294:	eef0 6a67 	vmovpl.f32	s13, s15
   29298:	edc1 6a00 	vstr	s13, [r1]
   2929c:	ee77 7a66 	vsub.f32	s15, s14, s13
   292a0:	ecb0 7a01 	vldmia	r0!, {s14}
   292a4:	edd6 6a00 	vldr	s13, [r6]
   292a8:	ee37 7a66 	vsub.f32	s14, s14, s13
   292ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   292b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   292b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   292b8:	bf48      	it	mi
   292ba:	eef0 7a45 	vmovmi.f32	s15, s10
   292be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   292c2:	f100 80a4 	bmi.w	2940e <dynalloc_analysis.isra.5+0xf9e>
   292c6:	ee77 7a27 	vadd.f32	s15, s14, s15
   292ca:	4562      	cmp	r2, ip
   292cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
   292d0:	ece1 7a01 	vstmia	r1!, {s15}
   292d4:	d1c2      	bne.n	2925c <dynalloc_analysis.isra.5+0xdec>
   292d6:	e562      	b.n	28d9e <dynalloc_analysis.isra.5+0x92e>
   292d8:	697a      	ldr	r2, [r7, #20]
   292da:	6efe      	ldr	r6, [r7, #108]	; 0x6c
   292dc:	f8d7 c08c 	ldr.w	ip, [r7, #140]	; 0x8c
   292e0:	441a      	add	r2, r3
   292e2:	1f1d      	subs	r5, r3, #4
   292e4:	4613      	mov	r3, r2
   292e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   292e8:	4415      	add	r5, r2
   292ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   292ee:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   292f2:	eb02 0048 	add.w	r0, r2, r8, lsl #1
   292f6:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   292fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   292fe:	e00e      	b.n	2931e <dynalloc_analysis.isra.5+0xeae>
   29300:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   29304:	ee17 ea90 	vmov	lr, s15
   29308:	fb01 f10e 	mul.w	r1, r1, lr
   2930c:	00c9      	lsls	r1, r1, #3
   2930e:	f108 0801 	add.w	r8, r8, #1
   29312:	4544      	cmp	r4, r8
   29314:	440a      	add	r2, r1
   29316:	f845 ef04 	str.w	lr, [r5, #4]!
   2931a:	f77f aa18 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   2931e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   29322:	f9b0 e000 	ldrsh.w	lr, [r0]
   29326:	ed93 7a00 	vldr	s14, [r3]
   2932a:	eba1 010e 	sub.w	r1, r1, lr
   2932e:	eeb4 7ae6 	vcmpe.f32	s14, s13
   29332:	fb06 f101 	mul.w	r1, r6, r1
   29336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2933a:	fa01 f10c 	lsl.w	r1, r1, ip
   2933e:	bf58      	it	pl
   29340:	eeb0 7a66 	vmovpl.f32	s14, s13
   29344:	2905      	cmp	r1, #5
   29346:	f100 0002 	add.w	r0, r0, #2
   2934a:	eca3 7a01 	vstmia	r3!, {s14}
   2934e:	ddd7      	ble.n	29300 <dynalloc_analysis.isra.5+0xe90>
   29350:	2930      	cmp	r1, #48	; 0x30
   29352:	dd73      	ble.n	2943c <dynalloc_analysis.isra.5+0xfcc>
   29354:	eef0 7a47 	vmov.f32	s15, s14
   29358:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   2935c:	ee17 ea90 	vmov	lr, s15
   29360:	fb01 f10e 	mul.w	r1, r1, lr
   29364:	00c9      	lsls	r1, r1, #3
   29366:	bf48      	it	mi
   29368:	3107      	addmi	r1, #7
   2936a:	10c9      	asrs	r1, r1, #3
   2936c:	e7cf      	b.n	2930e <dynalloc_analysis.isra.5+0xe9e>
   2936e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   29372:	2a00      	cmp	r2, #0
   29374:	f000 8095 	beq.w	294a2 <dynalloc_analysis.isra.5+0x1032>
   29378:	697a      	ldr	r2, [r7, #20]
   2937a:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
   2937e:	f8d7 c08c 	ldr.w	ip, [r7, #140]	; 0x8c
   29382:	441a      	add	r2, r3
   29384:	1f18      	subs	r0, r3, #4
   29386:	4613      	mov	r3, r2
   29388:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   2938a:	4410      	add	r0, r2
   2938c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   29390:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   29394:	eb02 0548 	add.w	r5, r2, r8, lsl #1
   29398:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   2939c:	2200      	movs	r2, #0
   2939e:	e00e      	b.n	293be <dynalloc_analysis.isra.5+0xf4e>
   293a0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   293a4:	ee17 6a90 	vmov	r6, s15
   293a8:	fb01 f106 	mul.w	r1, r1, r6
   293ac:	00c9      	lsls	r1, r1, #3
   293ae:	f108 0801 	add.w	r8, r8, #1
   293b2:	4544      	cmp	r4, r8
   293b4:	440a      	add	r2, r1
   293b6:	f840 6f04 	str.w	r6, [r0, #4]!
   293ba:	f77f a9c8 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   293be:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
   293c2:	f9b5 e000 	ldrsh.w	lr, [r5]
   293c6:	ed93 7a00 	vldr	s14, [r3]
   293ca:	eba1 010e 	sub.w	r1, r1, lr
   293ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
   293d2:	fb09 f101 	mul.w	r1, r9, r1
   293d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   293da:	fa01 f10c 	lsl.w	r1, r1, ip
   293de:	bf58      	it	pl
   293e0:	eeb0 7a66 	vmovpl.f32	s14, s13
   293e4:	2905      	cmp	r1, #5
   293e6:	f105 0502 	add.w	r5, r5, #2
   293ea:	eca3 7a01 	vstmia	r3!, {s14}
   293ee:	ddd7      	ble.n	293a0 <dynalloc_analysis.isra.5+0xf30>
   293f0:	2930      	cmp	r1, #48	; 0x30
   293f2:	dd39      	ble.n	29468 <dynalloc_analysis.isra.5+0xff8>
   293f4:	eef0 7a47 	vmov.f32	s15, s14
   293f8:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   293fc:	ee17 6a90 	vmov	r6, s15
   29400:	fb01 f106 	mul.w	r1, r1, r6
   29404:	00c9      	lsls	r1, r1, #3
   29406:	bf48      	it	mi
   29408:	3107      	addmi	r1, #7
   2940a:	10c9      	asrs	r1, r1, #3
   2940c:	e7cf      	b.n	293ae <dynalloc_analysis.isra.5+0xf3e>
   2940e:	ee77 7a85 	vadd.f32	s15, s15, s10
   29412:	4562      	cmp	r2, ip
   29414:	ee67 7aa5 	vmul.f32	s15, s15, s11
   29418:	ece1 7a01 	vstmia	r1!, {s15}
   2941c:	f47f af1e 	bne.w	2925c <dynalloc_analysis.isra.5+0xdec>
   29420:	e4bd      	b.n	28d9e <dynalloc_analysis.isra.5+0x92e>
   29422:	eef0 7a47 	vmov.f32	s15, s14
   29426:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   2942a:	ee17 5a90 	vmov	r5, s15
   2942e:	fb02 f205 	mul.w	r2, r2, r5
   29432:	00d2      	lsls	r2, r2, #3
   29434:	bf48      	it	mi
   29436:	3207      	addmi	r2, #7
   29438:	10d2      	asrs	r2, r2, #3
   2943a:	e58a      	b.n	28f52 <dynalloc_analysis.isra.5+0xae2>
   2943c:	ee07 1a90 	vmov	s15, r1
   29440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   29444:	ee67 7a87 	vmul.f32	s15, s15, s14
   29448:	ee87 7a86 	vdiv.f32	s14, s15, s12
   2944c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   29450:	ee17 ea90 	vmov	lr, s15
   29454:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   29458:	0109      	lsls	r1, r1, #4
   2945a:	e758      	b.n	2930e <dynalloc_analysis.isra.5+0xe9e>
   2945c:	01b2      	lsls	r2, r6, #6
   2945e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   29460:	1a10      	subs	r0, r2, r0
   29462:	50c8      	str	r0, [r1, r3]
   29464:	f7ff b973 	b.w	2874e <dynalloc_analysis.isra.5+0x2de>
   29468:	ee07 1a90 	vmov	s15, r1
   2946c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   29470:	ee67 7a87 	vmul.f32	s15, s15, s14
   29474:	ee87 7a86 	vdiv.f32	s14, s15, s12
   29478:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2947c:	ee17 6a90 	vmov	r6, s15
   29480:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   29484:	0109      	lsls	r1, r1, #4
   29486:	e792      	b.n	293ae <dynalloc_analysis.isra.5+0xf3e>
   29488:	eef0 7a47 	vmov.f32	s15, s14
   2948c:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   29490:	ee17 ea90 	vmov	lr, s15
   29494:	fb02 f20e 	mul.w	r2, r2, lr
   29498:	00d2      	lsls	r2, r2, #3
   2949a:	bf48      	it	mi
   2949c:	3207      	addmi	r2, #7
   2949e:	10d2      	asrs	r2, r2, #3
   294a0:	e693      	b.n	291ca <dynalloc_analysis.isra.5+0xd5a>
   294a2:	4610      	mov	r0, r2
   294a4:	697a      	ldr	r2, [r7, #20]
   294a6:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
   294aa:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
   294ae:	441a      	add	r2, r3
   294b0:	4694      	mov	ip, r2
   294b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   294b4:	1f1d      	subs	r5, r3, #4
   294b6:	4415      	add	r5, r2
   294b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   294bc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   294c0:	eb02 0148 	add.w	r1, r2, r8, lsl #1
   294c4:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   294c8:	e01e      	b.n	29508 <dynalloc_analysis.isra.5+0x1098>
   294ca:	2a30      	cmp	r2, #48	; 0x30
   294cc:	dc3d      	bgt.n	2954a <dynalloc_analysis.isra.5+0x10da>
   294ce:	ee07 2a90 	vmov	s15, r2
   294d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   294d6:	ee67 7a87 	vmul.f32	s15, s15, s14
   294da:	ee87 7a86 	vdiv.f32	s14, s15, s12
   294de:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   294e2:	ee17 ea90 	vmov	lr, s15
   294e6:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   294ea:	0112      	lsls	r2, r2, #4
   294ec:	4402      	add	r2, r0
   294ee:	ebb6 1fa2 	cmp.w	r6, r2, asr #6
   294f2:	f108 0801 	add.w	r8, r8, #1
   294f6:	dbb1      	blt.n	2945c <dynalloc_analysis.isra.5+0xfec>
   294f8:	4544      	cmp	r4, r8
   294fa:	f845 ef04 	str.w	lr, [r5, #4]!
   294fe:	4610      	mov	r0, r2
   29500:	f77f a925 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   29504:	ea4f 0388 	mov.w	r3, r8, lsl #2
   29508:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   2950c:	f9b1 a000 	ldrsh.w	sl, [r1]
   29510:	ed9c 7a00 	vldr	s14, [ip]
   29514:	eba2 020a 	sub.w	r2, r2, sl
   29518:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2951c:	fb0b f202 	mul.w	r2, fp, r2
   29520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29524:	fa02 f209 	lsl.w	r2, r2, r9
   29528:	bf58      	it	pl
   2952a:	eeb0 7a66 	vmovpl.f32	s14, s13
   2952e:	2a05      	cmp	r2, #5
   29530:	f101 0102 	add.w	r1, r1, #2
   29534:	ecac 7a01 	vstmia	ip!, {s14}
   29538:	dcc7      	bgt.n	294ca <dynalloc_analysis.isra.5+0x105a>
   2953a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2953e:	ee17 ea90 	vmov	lr, s15
   29542:	fb02 f20e 	mul.w	r2, r2, lr
   29546:	00d2      	lsls	r2, r2, #3
   29548:	e7d0      	b.n	294ec <dynalloc_analysis.isra.5+0x107c>
   2954a:	eef0 7a47 	vmov.f32	s15, s14
   2954e:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   29552:	ee17 ea90 	vmov	lr, s15
   29556:	fb02 f20e 	mul.w	r2, r2, lr
   2955a:	00d2      	lsls	r2, r2, #3
   2955c:	bf48      	it	mi
   2955e:	3207      	addmi	r2, #7
   29560:	10d2      	asrs	r2, r2, #3
   29562:	e7c3      	b.n	294ec <dynalloc_analysis.isra.5+0x107c>
   29564:	4610      	mov	r0, r2
   29566:	697a      	ldr	r2, [r7, #20]
   29568:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
   2956c:	f8d7 908c 	ldr.w	r9, [r7, #140]	; 0x8c
   29570:	441a      	add	r2, r3
   29572:	4694      	mov	ip, r2
   29574:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   29576:	1f1d      	subs	r5, r3, #4
   29578:	4415      	add	r5, r2
   2957a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   2957e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
   29582:	eb02 0148 	add.w	r1, r2, r8, lsl #1
   29586:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   2958a:	e015      	b.n	295b8 <dynalloc_analysis.isra.5+0x1148>
   2958c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   29590:	ee17 ea90 	vmov	lr, s15
   29594:	fb0e f202 	mul.w	r2, lr, r2
   29598:	00d2      	lsls	r2, r2, #3
   2959a:	4402      	add	r2, r0
   2959c:	ebb6 1fa2 	cmp.w	r6, r2, asr #6
   295a0:	f108 0801 	add.w	r8, r8, #1
   295a4:	f6ff af5a 	blt.w	2945c <dynalloc_analysis.isra.5+0xfec>
   295a8:	4544      	cmp	r4, r8
   295aa:	4610      	mov	r0, r2
   295ac:	ea4f 0388 	mov.w	r3, r8, lsl #2
   295b0:	f845 ef04 	str.w	lr, [r5, #4]!
   295b4:	f77f a8cb 	ble.w	2874e <dynalloc_analysis.isra.5+0x2de>
   295b8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   295bc:	f9b1 a000 	ldrsh.w	sl, [r1]
   295c0:	ed9c 7a00 	vldr	s14, [ip]
   295c4:	eba2 020a 	sub.w	r2, r2, sl
   295c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
   295cc:	fb0b f202 	mul.w	r2, fp, r2
   295d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   295d4:	fa02 f209 	lsl.w	r2, r2, r9
   295d8:	bf58      	it	pl
   295da:	eeb0 7a66 	vmovpl.f32	s14, s13
   295de:	2a05      	cmp	r2, #5
   295e0:	f101 0102 	add.w	r1, r1, #2
   295e4:	ecac 7a01 	vstmia	ip!, {s14}
   295e8:	ddd0      	ble.n	2958c <dynalloc_analysis.isra.5+0x111c>
   295ea:	2a30      	cmp	r2, #48	; 0x30
   295ec:	dd0c      	ble.n	29608 <dynalloc_analysis.isra.5+0x1198>
   295ee:	eef0 7a47 	vmov.f32	s15, s14
   295f2:	eefe 7aee 	vcvt.s32.f32	s15, s15, #3
   295f6:	ee17 ea90 	vmov	lr, s15
   295fa:	fb0e f202 	mul.w	r2, lr, r2
   295fe:	00d2      	lsls	r2, r2, #3
   29600:	bf48      	it	mi
   29602:	3207      	addmi	r2, #7
   29604:	10d2      	asrs	r2, r2, #3
   29606:	e7c8      	b.n	2959a <dynalloc_analysis.isra.5+0x112a>
   29608:	ee07 2a90 	vmov	s15, r2
   2960c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   29610:	ee67 7a87 	vmul.f32	s15, s15, s14
   29614:	ee87 7a86 	vdiv.f32	s14, s15, s12
   29618:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   2961c:	ee17 ea90 	vmov	lr, s15
   29620:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   29624:	0112      	lsls	r2, r2, #4
   29626:	e7b8      	b.n	2959a <dynalloc_analysis.isra.5+0x112a>

00029628 <get_celt_handle>:
   29628:	4800      	ldr	r0, [pc, #0]	; (2962c <get_celt_handle+0x4>)
   2962a:	4770      	bx	lr
   2962c:	1004aeac 	.word	0x1004aeac

00029630 <celt_preemphasis>:
   29630:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   29634:	ed2d 8b02 	vpush	{d8}
   29638:	e9dd 470b 	ldrd	r4, r7, [sp, #44]	; 0x2c
   2963c:	edd4 7a01 	vldr	s15, [r4, #4]
   29640:	edd4 8a00 	vldr	s17, [r4]
   29644:	ed97 8a00 	vldr	s16, [r7]
   29648:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2964a:	eef5 7a40 	vcmp.f32	s15, #0.0
   2964e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29652:	4680      	mov	r8, r0
   29654:	460c      	mov	r4, r1
   29656:	4616      	mov	r6, r2
   29658:	469b      	mov	fp, r3
   2965a:	d15a      	bne.n	29712 <celt_preemphasis+0xe2>
   2965c:	2d01      	cmp	r5, #1
   2965e:	d05d      	beq.n	2971c <celt_preemphasis+0xec>
   29660:	fb92 f9f5 	sdiv	r9, r2, r5
   29664:	00b2      	lsls	r2, r6, #2
   29666:	2100      	movs	r1, #0
   29668:	4620      	mov	r0, r4
   2966a:	f7e2 fe77 	bl	c35c <memset>
   2966e:	f1b9 0f00 	cmp.w	r9, #0
   29672:	dd39      	ble.n	296e8 <celt_preemphasis+0xb8>
   29674:	ed9f 7a36 	vldr	s14, [pc, #216]	; 29750 <celt_preemphasis+0x120>
   29678:	ea4f 038b 	mov.w	r3, fp, lsl #2
   2967c:	4640      	mov	r0, r8
   2967e:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   29682:	4621      	mov	r1, r4
   29684:	2200      	movs	r2, #0
   29686:	edd0 7a00 	vldr	s15, [r0]
   2968a:	3201      	adds	r2, #1
   2968c:	ee67 7a87 	vmul.f32	s15, s15, s14
   29690:	454a      	cmp	r2, r9
   29692:	edc1 7a00 	vstr	s15, [r1]
   29696:	4418      	add	r0, r3
   29698:	4461      	add	r1, ip
   2969a:	d1f4      	bne.n	29686 <celt_preemphasis+0x56>
   2969c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2969e:	b31b      	cbz	r3, 296e8 <celt_preemphasis+0xb8>
   296a0:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 29754 <celt_preemphasis+0x124>
   296a4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 29758 <celt_preemphasis+0x128>
   296a8:	4623      	mov	r3, r4
   296aa:	2200      	movs	r2, #0
   296ac:	e00d      	b.n	296ca <celt_preemphasis+0x9a>
   296ae:	eef4 7a66 	vcmp.f32	s15, s13
   296b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   296b6:	f102 0201 	add.w	r2, r2, #1
   296ba:	bf48      	it	mi
   296bc:	eef0 7a66 	vmovmi.f32	s15, s13
   296c0:	4591      	cmp	r9, r2
   296c2:	edc3 7a00 	vstr	s15, [r3]
   296c6:	4463      	add	r3, ip
   296c8:	d00e      	beq.n	296e8 <celt_preemphasis+0xb8>
   296ca:	edd3 7a00 	vldr	s15, [r3]
   296ce:	eef4 7ac7 	vcmpe.f32	s15, s14
   296d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   296d6:	ddea      	ble.n	296ae <celt_preemphasis+0x7e>
   296d8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 29754 <celt_preemphasis+0x124>
   296dc:	3201      	adds	r2, #1
   296de:	4591      	cmp	r9, r2
   296e0:	edc3 7a00 	vstr	s15, [r3]
   296e4:	4463      	add	r3, ip
   296e6:	d1f0      	bne.n	296ca <celt_preemphasis+0x9a>
   296e8:	2e00      	cmp	r6, #0
   296ea:	dd0c      	ble.n	29706 <celt_preemphasis+0xd6>
   296ec:	4621      	mov	r1, r4
   296ee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   296f2:	edd1 7a00 	vldr	s15, [r1]
   296f6:	ee37 7ac8 	vsub.f32	s14, s15, s16
   296fa:	ee28 8aa7 	vmul.f32	s16, s17, s15
   296fe:	eca1 7a01 	vstmia	r1!, {s14}
   29702:	428e      	cmp	r6, r1
   29704:	d1f5      	bne.n	296f2 <celt_preemphasis+0xc2>
   29706:	ed87 8a00 	vstr	s16, [r7]
   2970a:	ecbd 8b02 	vpop	{d8}
   2970e:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
   29712:	2d01      	cmp	r5, #1
   29714:	fb92 f9f5 	sdiv	r9, r2, r5
   29718:	d0a9      	beq.n	2966e <celt_preemphasis+0x3e>
   2971a:	e7a3      	b.n	29664 <celt_preemphasis+0x34>
   2971c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2971e:	b10b      	cbz	r3, 29724 <celt_preemphasis+0xf4>
   29720:	4691      	mov	r9, r2
   29722:	e7a4      	b.n	2966e <celt_preemphasis+0x3e>
   29724:	2a00      	cmp	r2, #0
   29726:	ddee      	ble.n	29706 <celt_preemphasis+0xd6>
   29728:	eddf 6a09 	vldr	s13, [pc, #36]	; 29750 <celt_preemphasis+0x120>
   2972c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   29730:	ea4f 038b 	mov.w	r3, fp, lsl #2
   29734:	edd0 7a00 	vldr	s15, [r0]
   29738:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2973c:	4418      	add	r0, r3
   2973e:	ee37 7ac8 	vsub.f32	s14, s15, s16
   29742:	ee28 8aa7 	vmul.f32	s16, s17, s15
   29746:	eca1 7a01 	vstmia	r1!, {s14}
   2974a:	42b1      	cmp	r1, r6
   2974c:	d1f2      	bne.n	29734 <celt_preemphasis+0x104>
   2974e:	e7da      	b.n	29706 <celt_preemphasis+0xd6>
   29750:	47000000 	.word	0x47000000
   29754:	47800000 	.word	0x47800000
   29758:	c7800000 	.word	0xc7800000

0002975c <celt_encode_with_ec>:
   2975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29760:	ed2d 8b04 	vpush	{d8-d9}
   29764:	b0f7      	sub	sp, #476	; 0x1dc
   29766:	af14      	add	r7, sp, #80	; 0x50
   29768:	6844      	ldr	r4, [r0, #4]
   2976a:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
   2976e:	2500      	movs	r5, #0
   29770:	6884      	ldr	r4, [r0, #8]
   29772:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
   29776:	2600      	movs	r6, #0
   29778:	200f      	movs	r0, #15
   2977a:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
   2977e:	f8c7 50d8 	str.w	r5, [r7, #216]	; 0xd8
   29782:	460c      	mov	r4, r1
   29784:	4693      	mov	fp, r2
   29786:	4699      	mov	r9, r3
   29788:	e9d7 8a70 	ldrd	r8, sl, [r7, #448]	; 0x1c0
   2978c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
   29790:	f8c7 60dc 	str.w	r6, [r7, #220]	; 0xdc
   29794:	f8c7 60e4 	str.w	r6, [r7, #228]	; 0xe4
   29798:	f8c7 60ec 	str.w	r6, [r7, #236]	; 0xec
   2979c:	f7fd f9ea 	bl	26b74 <alloc_stack>
   297a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   297a4:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
   297a8:	681a      	ldr	r2, [r3, #0]
   297aa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   297ae:	6891      	ldr	r1, [r2, #8]
   297b0:	6855      	ldr	r5, [r2, #4]
   297b2:	6a12      	ldr	r2, [r2, #32]
   297b4:	643a      	str	r2, [r7, #64]	; 0x40
   297b6:	f1b8 0f01 	cmp.w	r8, #1
   297ba:	6a1a      	ldr	r2, [r3, #32]
   297bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   297be:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
   297c2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
   297c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   297ca:	dd1b      	ble.n	29804 <celt_encode_with_ec+0xa8>
   297cc:	b1d4      	cbz	r4, 29804 <celt_encode_with_ec+0xa8>
   297ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   297d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   297d6:	69db      	ldr	r3, [r3, #28]
   297d8:	6a51      	ldr	r1, [r2, #36]	; 0x24
   297da:	fb03 f30b 	mul.w	r3, r3, fp
   297de:	2900      	cmp	r1, #0
   297e0:	4618      	mov	r0, r3
   297e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   297e6:	db0d      	blt.n	29804 <celt_encode_with_ec+0xa8>
   297e8:	f8d2 b02c 	ldr.w	fp, [r2, #44]	; 0x2c
   297ec:	455b      	cmp	r3, fp
   297ee:	f002 82a6 	beq.w	2bd3e <celt_encode_with_ec+0x25e2>
   297f2:	4633      	mov	r3, r6
   297f4:	e001      	b.n	297fa <celt_encode_with_ec+0x9e>
   297f6:	4282      	cmp	r2, r0
   297f8:	d00b      	beq.n	29812 <celt_encode_with_ec+0xb6>
   297fa:	3301      	adds	r3, #1
   297fc:	428b      	cmp	r3, r1
   297fe:	fa0b f203 	lsl.w	r2, fp, r3
   29802:	ddf8      	ble.n	297f6 <celt_encode_with_ec+0x9a>
   29804:	f7fd f9a4 	bl	26b50 <restore_stack>
   29808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2980c:	4618      	mov	r0, r3
   2980e:	f001 baa8 	b.w	2ad62 <celt_encode_with_ec+0x1606>
   29812:	f44f 76c8 	mov.w	r6, #400	; 0x190
   29816:	461a      	mov	r2, r3
   29818:	411e      	asrs	r6, r3
   2981a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   2981e:	2301      	movs	r3, #1
   29820:	4093      	lsls	r3, r2
   29822:	61fb      	str	r3, [r7, #28]
   29824:	f1c2 0303 	rsb	r3, r2, #3
   29828:	f1a6 0c32 	sub.w	ip, r6, #50	; 0x32
   2982c:	627b      	str	r3, [r7, #36]	; 0x24
   2982e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   29832:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
   29836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2983a:	fb05 f100 	mul.w	r1, r5, r0
   2983e:	eb01 2380 	add.w	r3, r1, r0, lsl #10
   29842:	fb06 f000 	mul.w	r0, r6, r0
   29846:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
   2984a:	6138      	str	r0, [r7, #16]
   2984c:	32f4      	adds	r2, #244	; 0xf4
   2984e:	00b6      	lsls	r6, r6, #2
   29850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   29854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   29858:	603e      	str	r6, [r7, #0]
   2985a:	4633      	mov	r3, r6
   2985c:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
   29860:	4433      	add	r3, r6
   29862:	00db      	lsls	r3, r3, #3
   29864:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
   29868:	0080      	lsls	r0, r0, #2
   2986a:	3314      	adds	r3, #20
   2986c:	4406      	add	r6, r0
   2986e:	61bb      	str	r3, [r7, #24]
   29870:	f240 43fb 	movw	r3, #1275	; 0x4fb
   29874:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   29878:	63fe      	str	r6, [r7, #60]	; 0x3c
   2987a:	69ba      	ldr	r2, [r7, #24]
   2987c:	6779      	str	r1, [r7, #116]	; 0x74
   2987e:	4406      	add	r6, r0
   29880:	4598      	cmp	r8, r3
   29882:	eb06 0100 	add.w	r1, r6, r0
   29886:	bfa8      	it	ge
   29888:	4698      	movge	r8, r3
   2988a:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
   2988e:	64f8      	str	r0, [r7, #76]	; 0x4c
   29890:	62f9      	str	r1, [r7, #44]	; 0x2c
   29892:	fb02 f60c 	mul.w	r6, r2, ip
   29896:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
   2989a:	f1ba 0f00 	cmp.w	sl, #0
   2989e:	f000 83d3 	beq.w	2a048 <celt_encode_with_ec+0x8ec>
   298a2:	4650      	mov	r0, sl
   298a4:	f002 ff26 	bl	2c6f4 <ec_tell_frac>
   298a8:	f8da 301c 	ldr.w	r3, [sl, #28]
   298ac:	f8da 1014 	ldr.w	r1, [sl, #20]
   298b0:	6078      	str	r0, [r7, #4]
   298b2:	fab3 f383 	clz	r3, r3
   298b6:	f1c3 0320 	rsb	r3, r3, #32
   298ba:	1acb      	subs	r3, r1, r3
   298bc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   298c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   298c4:	f103 0804 	add.w	r8, r3, #4
   298c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   298cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   298ce:	ea4f 08e8 	mov.w	r8, r8, asr #3
   298d2:	eba3 0308 	sub.w	r3, r3, r8
   298d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   298da:	2a00      	cmp	r2, #0
   298dc:	f000 83d6 	beq.w	2a08c <celt_encode_with_ec+0x930>
   298e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
   298e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   298e6:	1c50      	adds	r0, r2, #1
   298e8:	fb02 f103 	mul.w	r1, r2, r3
   298ec:	f000 83c4 	beq.w	2a078 <celt_encode_with_ec+0x91c>
   298f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
   298f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   298f8:	fb03 f300 	mul.w	r3, r3, r0
   298fc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   29900:	f8d0 c000 	ldr.w	ip, [r0]
   29904:	6a78      	ldr	r0, [r7, #36]	; 0x24
   29906:	4103      	asrs	r3, r0
   29908:	1b9b      	subs	r3, r3, r6
   2990a:	1b96      	subs	r6, r2, r6
   2990c:	429e      	cmp	r6, r3
   2990e:	eb01 112c 	add.w	r1, r1, ip, asr #4
   29912:	ea4f 00ec 	mov.w	r0, ip, asr #3
   29916:	bfa8      	it	ge
   29918:	461e      	movge	r6, r3
   2991a:	fb91 f1f0 	sdiv	r1, r1, r0
   2991e:	65b9      	str	r1, [r7, #88]	; 0x58
   29920:	1189      	asrs	r1, r1, #6
   29922:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
   29926:	60be      	str	r6, [r7, #8]
   29928:	f1ba 0f00 	cmp.w	sl, #0
   2992c:	f000 83ec 	beq.w	2a108 <celt_encode_with_ec+0x9ac>
   29930:	6dba      	ldr	r2, [r7, #88]	; 0x58
   29932:	2a00      	cmp	r2, #0
   29934:	dd1a      	ble.n	2996c <celt_encode_with_ec+0x210>
   29936:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2993a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2993c:	b1b3      	cbz	r3, 2996c <celt_encode_with_ec+0x210>
   2993e:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
   29942:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   29946:	ebc3 0642 	rsb	r6, r3, r2, lsl #1
   2994a:	2901      	cmp	r1, #1
   2994c:	ea4f 16a6 	mov.w	r6, r6, asr #6
   29950:	bf0c      	ite	eq
   29952:	2302      	moveq	r3, #2
   29954:	2300      	movne	r3, #0
   29956:	429e      	cmp	r6, r3
   29958:	bfb8      	it	lt
   2995a:	461e      	movlt	r6, r3
   2995c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   29960:	429e      	cmp	r6, r3
   29962:	bfa8      	it	ge
   29964:	461e      	movge	r6, r3
   29966:	429e      	cmp	r6, r3
   29968:	f2c1 85ca 	blt.w	2b500 <celt_encode_with_ec+0x1da4>
   2996c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   29970:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   29974:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   29978:	186b      	adds	r3, r5, r1
   2997a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   2997e:	fb02 f303 	mul.w	r3, r2, r3
   29982:	009b      	lsls	r3, r3, #2
   29984:	3307      	adds	r3, #7
   29986:	f023 0307 	bic.w	r3, r3, #7
   2998a:	ebad 0d03 	sub.w	sp, sp, r3
   2998e:	1b4b      	subs	r3, r1, r5
   29990:	a914      	add	r1, sp, #80	; 0x50
   29992:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   29996:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
   2999a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
   2999e:	68d2      	ldr	r2, [r2, #12]
   299a0:	f8d0 e01c 	ldr.w	lr, [r0, #28]
   299a4:	ed90 8a38 	vldr	s16, [r0, #224]	; 0xe0
   299a8:	fb01 f303 	mul.w	r3, r1, r3
   299ac:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   299b0:	fb93 f3fe 	sdiv	r3, r3, lr
   299b4:	428a      	cmp	r2, r1
   299b6:	bfa8      	it	ge
   299b8:	460a      	movge	r2, r1
   299ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
   299be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   299c2:	2b00      	cmp	r3, #0
   299c4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   299c8:	67fa      	str	r2, [r7, #124]	; 0x7c
   299ca:	f342 80a4 	ble.w	2bb16 <celt_encode_with_ec+0x23ba>
   299ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 29c94 <celt_encode_with_ec+0x538>
   299d2:	0098      	lsls	r0, r3, #2
   299d4:	eef0 6a47 	vmov.f32	s13, s14
   299d8:	1821      	adds	r1, r4, r0
   299da:	4622      	mov	r2, r4
   299dc:	ecf2 7a01 	vldmia	r2!, {s15}
   299e0:	eef4 7ac7 	vcmpe.f32	s15, s14
   299e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   299e8:	eef4 7ae6 	vcmpe.f32	s15, s13
   299ec:	bf58      	it	pl
   299ee:	eeb0 7a67 	vmovpl.f32	s14, s15
   299f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   299f6:	bfd8      	it	le
   299f8:	eef0 6a67 	vmovle.f32	s13, s15
   299fc:	4291      	cmp	r1, r2
   299fe:	d1ed      	bne.n	299dc <celt_encode_with_ec+0x280>
   29a00:	eef1 6a66 	vneg.f32	s13, s13
   29a04:	eef4 6ac7 	vcmpe.f32	s13, s14
   29a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a0c:	bf58      	it	pl
   29a0e:	eeb0 7a66 	vmovpl.f32	s14, s13
   29a12:	eeb4 8ac7 	vcmpe.f32	s16, s14
   29a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a1a:	dc20      	bgt.n	29a5e <celt_encode_with_ec+0x302>
   29a1c:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 29c94 <celt_encode_with_ec+0x538>
   29a20:	1821      	adds	r1, r4, r0
   29a22:	eeb0 7a48 	vmov.f32	s14, s16
   29a26:	4622      	mov	r2, r4
   29a28:	ecf2 7a01 	vldmia	r2!, {s15}
   29a2c:	eef4 7ac8 	vcmpe.f32	s15, s16
   29a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a34:	eef4 7ac7 	vcmpe.f32	s15, s14
   29a38:	bf58      	it	pl
   29a3a:	eeb0 8a67 	vmovpl.f32	s16, s15
   29a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a42:	bfd8      	it	le
   29a44:	eeb0 7a67 	vmovle.f32	s14, s15
   29a48:	4291      	cmp	r1, r2
   29a4a:	d1ed      	bne.n	29a28 <celt_encode_with_ec+0x2cc>
   29a4c:	eeb1 7a47 	vneg.f32	s14, s14
   29a50:	eeb4 7ac8 	vcmpe.f32	s14, s16
   29a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a58:	bf58      	it	pl
   29a5a:	eeb0 8a47 	vmovpl.f32	s16, s14
   29a5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   29a62:	fb05 f202 	mul.w	r2, r5, r2
   29a66:	fb92 f2fe 	sdiv	r2, r2, lr
   29a6a:	2a00      	cmp	r2, #0
   29a6c:	f342 8070 	ble.w	2bb50 <celt_encode_with_ec+0x23f4>
   29a70:	eddf 6a88 	vldr	s13, [pc, #544]	; 29c94 <celt_encode_with_ec+0x538>
   29a74:	441a      	add	r2, r3
   29a76:	eeb0 7a66 	vmov.f32	s14, s13
   29a7a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   29a7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   29a82:	ecf3 7a01 	vldmia	r3!, {s15}
   29a86:	eef4 7ac7 	vcmpe.f32	s15, s14
   29a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a8e:	eef4 7ae6 	vcmpe.f32	s15, s13
   29a92:	bf58      	it	pl
   29a94:	eeb0 7a67 	vmovpl.f32	s14, s15
   29a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29a9c:	bfd8      	it	le
   29a9e:	eef0 6a67 	vmovle.f32	s13, s15
   29aa2:	429a      	cmp	r2, r3
   29aa4:	d1ed      	bne.n	29a82 <celt_encode_with_ec+0x326>
   29aa6:	eef1 6a66 	vneg.f32	s13, s13
   29aaa:	eef4 6ac7 	vcmpe.f32	s13, s14
   29aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29ab2:	bf58      	it	pl
   29ab4:	eeb0 7a66 	vmovpl.f32	s14, s13
   29ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29abc:	eeb4 8ac7 	vcmpe.f32	s16, s14
   29ac0:	ed83 7a38 	vstr	s14, [r3, #224]	; 0xe0
   29ac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   29ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29acc:	bfd8      	it	le
   29ace:	eeb0 8a47 	vmovle.f32	s16, s14
   29ad2:	2b01      	cmp	r3, #1
   29ad4:	f001 8778 	beq.w	2b9c8 <celt_encode_with_ec+0x226c>
   29ad8:	2300      	movs	r3, #0
   29ada:	633b      	str	r3, [r7, #48]	; 0x30
   29adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   29ae0:	f8c7 b078 	str.w	fp, [r7, #120]	; 0x78
   29ae4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   29ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   29aec:	f8c7 a1c4 	str.w	sl, [r7, #452]	; 0x1c4
   29af0:	3310      	adds	r3, #16
   29af2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   29af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   29afa:	eddf 8a65 	vldr	s17, [pc, #404]	; 29c90 <celt_encode_with_ec+0x534>
   29afe:	f8d7 a0a4 	ldr.w	sl, [r7, #164]	; 0xa4
   29b02:	ea4f 0983 	mov.w	r9, r3, lsl #2
   29b06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29b0a:	f103 08c0 	add.w	r8, r3, #192	; 0xc0
   29b0e:	f8c7 80cc 	str.w	r8, [r7, #204]	; 0xcc
   29b12:	2600      	movs	r6, #0
   29b14:	469b      	mov	fp, r3
   29b16:	46a0      	mov	r8, r4
   29b18:	e001      	b.n	29b1e <celt_encode_with_ec+0x3c2>
   29b1a:	f8db e01c 	ldr.w	lr, [fp, #28]
   29b1e:	f8db c010 	ldr.w	ip, [fp, #16]
   29b22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   29b26:	4629      	mov	r1, r5
   29b28:	4640      	mov	r0, r8
   29b2a:	4653      	mov	r3, sl
   29b2c:	3601      	adds	r6, #1
   29b2e:	f108 0804 	add.w	r8, r8, #4
   29b32:	444d      	add	r5, r9
   29b34:	f1bc 0f00 	cmp.w	ip, #0
   29b38:	d008      	beq.n	29b4c <celt_encode_with_ec+0x3f0>
   29b3a:	eeb4 8ae8 	vcmpe.f32	s16, s17
   29b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29b42:	bfcc      	ite	gt
   29b44:	f04f 0c01 	movgt.w	ip, #1
   29b48:	f04f 0c00 	movle.w	ip, #0
   29b4c:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
   29b50:	9402      	str	r4, [sp, #8]
   29b52:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
   29b56:	f8cd c00c 	str.w	ip, [sp, #12]
   29b5a:	e9cd e400 	strd	lr, r4, [sp]
   29b5e:	f7ff fd67 	bl	29630 <celt_preemphasis>
   29b62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   29b66:	45b2      	cmp	sl, r6
   29b68:	f103 0304 	add.w	r3, r3, #4
   29b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   29b70:	dcd3      	bgt.n	29b1a <celt_encode_with_ec+0x3be>
   29b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   29b76:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   29b7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   29b7c:	6e52      	ldr	r2, [r2, #100]	; 0x64
   29b7e:	f8d7 a1c4 	ldr.w	sl, [r7, #452]	; 0x1c4
   29b82:	653a      	str	r2, [r7, #80]	; 0x50
   29b84:	2b00      	cmp	r3, #0
   29b86:	d04c      	beq.n	29c22 <celt_encode_with_ec+0x4c6>
   29b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   29b8c:	2b03      	cmp	r3, #3
   29b8e:	dd48      	ble.n	29c22 <celt_encode_with_ec+0x4c6>
   29b90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   29b94:	2b00      	cmp	r3, #0
   29b96:	f040 82df 	bne.w	2a158 <celt_encode_with_ec+0x9fc>
   29b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29b9c:	2b00      	cmp	r3, #0
   29b9e:	f001 8412 	beq.w	2b3c6 <celt_encode_with_ec+0x1c6a>
   29ba2:	2000      	movs	r0, #0
   29ba4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   29ba8:	9206      	str	r2, [sp, #24]
   29baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   29bac:	9201      	str	r2, [sp, #4]
   29bae:	f507 7490 	add.w	r4, r7, #288	; 0x120
   29bb2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   29bb6:	9200      	str	r2, [sp, #0]
   29bb8:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
   29bbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
   29bc0:	e9cd 4004 	strd	r4, r0, [sp, #16]
   29bc4:	e9cd 3102 	strd	r3, r1, [sp, #8]
   29bc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   29bca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   29bce:	617c      	str	r4, [r7, #20]
   29bd0:	e9d7 3129 	ldrd	r3, r1, [r7, #164]	; 0xa4
   29bd4:	f7fd ff64 	bl	27aa0 <run_prefilter.isra.6>
   29bd8:	60f8      	str	r0, [r7, #12]
   29bda:	2800      	cmp	r0, #0
   29bdc:	f040 82db 	bne.w	2a196 <celt_encode_with_ec+0xa3a>
   29be0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   29be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   29be6:	310f      	adds	r1, #15
   29be8:	4299      	cmp	r1, r3
   29bea:	db4a      	blt.n	29c82 <celt_encode_with_ec+0x526>
   29bec:	2300      	movs	r3, #0
   29bee:	60fb      	str	r3, [r7, #12]
   29bf0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   29bf4:	6993      	ldr	r3, [r2, #24]
   29bf6:	2b00      	cmp	r3, #0
   29bf8:	dd54      	ble.n	29ca4 <celt_encode_with_ec+0x548>
   29bfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
   29bfc:	2b00      	cmp	r3, #0
   29bfe:	d151      	bne.n	29ca4 <celt_encode_with_ec+0x548>
   29c00:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
   29c04:	2900      	cmp	r1, #0
   29c06:	f001 8448 	beq.w	2b49a <celt_encode_with_ec+0x1d3e>
   29c0a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   29c0e:	290e      	cmp	r1, #14
   29c10:	f301 8444 	bgt.w	2b49c <celt_encode_with_ec+0x1d40>
   29c14:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   29c18:	3b02      	subs	r3, #2
   29c1a:	bf18      	it	ne
   29c1c:	2301      	movne	r3, #1
   29c1e:	f001 bc3d 	b.w	2b49c <celt_encode_with_ec+0x1d40>
   29c22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   29c26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   29c2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29c2e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   29c32:	dcad      	bgt.n	29b90 <celt_encode_with_ec+0x434>
   29c34:	9206      	str	r2, [sp, #24]
   29c36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   29c38:	9201      	str	r2, [sp, #4]
   29c3a:	2000      	movs	r0, #0
   29c3c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   29c40:	9200      	str	r2, [sp, #0]
   29c42:	f507 7490 	add.w	r4, r7, #288	; 0x120
   29c46:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
   29c4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
   29c4e:	e9cd 4004 	strd	r4, r0, [sp, #16]
   29c52:	e9cd 3102 	strd	r3, r1, [sp, #8]
   29c56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   29c58:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   29c5c:	617c      	str	r4, [r7, #20]
   29c5e:	e9d7 3129 	ldrd	r3, r1, [r7, #164]	; 0xa4
   29c62:	f7fd ff1d 	bl	27aa0 <run_prefilter.isra.6>
   29c66:	60f8      	str	r0, [r7, #12]
   29c68:	2800      	cmp	r0, #0
   29c6a:	f040 8294 	bne.w	2a196 <celt_encode_with_ec+0xa3a>
   29c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   29c72:	2b00      	cmp	r3, #0
   29c74:	d1ba      	bne.n	29bec <celt_encode_with_ec+0x490>
   29c76:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   29c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   29c7c:	310f      	adds	r1, #15
   29c7e:	4299      	cmp	r1, r3
   29c80:	dab4      	bge.n	29bec <celt_encode_with_ec+0x490>
   29c82:	2201      	movs	r2, #1
   29c84:	2100      	movs	r1, #0
   29c86:	4650      	mov	r0, sl
   29c88:	f002 fe34 	bl	2c8f4 <ec_enc_bit_logp>
   29c8c:	e7ae      	b.n	29bec <celt_encode_with_ec+0x490>
   29c8e:	bf00      	nop
   29c90:	47800000 	.word	0x47800000
   29c94:	00000000 	.word	0x00000000
   29c98:	3d75c28f 	.word	0x3d75c28f
   29c9c:	38d1b717 	.word	0x38d1b717
   29ca0:	26901d7d 	.word	0x26901d7d
   29ca4:	2300      	movs	r3, #0
   29ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   29caa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   29cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   29cb2:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
   29cb6:	fb03 f302 	mul.w	r3, r3, r2
   29cba:	63bb      	str	r3, [r7, #56]	; 0x38
   29cbc:	009b      	lsls	r3, r3, #2
   29cbe:	64bb      	str	r3, [r7, #72]	; 0x48
   29cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29cc4:	69da      	ldr	r2, [r3, #28]
   29cc6:	6c99      	ldr	r1, [r3, #72]	; 0x48
   29cc8:	2c00      	cmp	r4, #0
   29cca:	f000 8227 	beq.w	2a11c <celt_encode_with_ec+0x9c0>
   29cce:	f8da 301c 	ldr.w	r3, [sl, #28]
   29cd2:	f8da 0014 	ldr.w	r0, [sl, #20]
   29cd6:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
   29cda:	fab3 f383 	clz	r3, r3
   29cde:	4403      	add	r3, r0
   29ce0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   29ce4:	fb00 f004 	mul.w	r0, r0, r4
   29ce8:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   29cea:	3b1e      	subs	r3, #30
   29cec:	42a3      	cmp	r3, r4
   29cee:	ea4f 0080 	mov.w	r0, r0, lsl #2
   29cf2:	f2c1 8267 	blt.w	2b1c4 <celt_encode_with_ec+0x1a68>
   29cf6:	3007      	adds	r0, #7
   29cf8:	f020 0307 	bic.w	r3, r0, #7
   29cfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   29cfe:	3007      	adds	r0, #7
   29d00:	ebad 0d03 	sub.w	sp, sp, r3
   29d04:	f020 0307 	bic.w	r3, r0, #7
   29d08:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   29d0c:	ebad 0d03 	sub.w	sp, sp, r3
   29d10:	a814      	add	r0, sp, #80	; 0x50
   29d12:	ebad 0d03 	sub.w	sp, sp, r3
   29d16:	ab14      	add	r3, sp, #80	; 0x50
   29d18:	66f8      	str	r0, [r7, #108]	; 0x6c
   29d1a:	2000      	movs	r0, #0
   29d1c:	e9c7 0319 	strd	r0, r3, [r7, #100]	; 0x64
   29d20:	2301      	movs	r3, #1
   29d22:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
   29d26:	673b      	str	r3, [r7, #112]	; 0x70
   29d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   29d2a:	3307      	adds	r3, #7
   29d2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   29d30:	f023 0307 	bic.w	r3, r3, #7
   29d34:	ebad 0d03 	sub.w	sp, sp, r3
   29d38:	ab14      	add	r3, sp, #80	; 0x50
   29d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   29d3e:	2300      	movs	r3, #0
   29d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   29d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   29d46:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
   29d4a:	9302      	str	r3, [sp, #8]
   29d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   29d50:	9300      	str	r3, [sp, #0]
   29d52:	e9cd 2103 	strd	r2, r1, [sp, #12]
   29d56:	9401      	str	r4, [sp, #4]
   29d58:	465b      	mov	r3, fp
   29d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   29d5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
   29d60:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   29d64:	f7fd fdf0 	bl	27948 <compute_mdcts>
   29d68:	2c02      	cmp	r4, #2
   29d6a:	d106      	bne.n	29d7a <celt_encode_with_ec+0x61e>
   29d6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   29d70:	2b01      	cmp	r3, #1
   29d72:	bf04      	itt	eq
   29d74:	2300      	moveq	r3, #0
   29d76:	f8c7 30e4 	streq.w	r3, [r7, #228]	; 0xe4
   29d7a:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
   29d7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   29d82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   29d84:	9201      	str	r2, [sp, #4]
   29d86:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   29d8a:	9200      	str	r2, [sp, #0]
   29d8c:	9302      	str	r3, [sp, #8]
   29d8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   29d90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   29d94:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   29d98:	4659      	mov	r1, fp
   29d9a:	f008 fa71 	bl	32280 <compute_band_energies>
   29d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   29da0:	2b00      	cmp	r3, #0
   29da2:	f040 8126 	bne.w	29ff2 <celt_encode_with_ec+0x896>
   29da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   29daa:	009b      	lsls	r3, r3, #2
   29dac:	67bb      	str	r3, [r7, #120]	; 0x78
   29dae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   29db2:	9301      	str	r3, [sp, #4]
   29db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   29db6:	9300      	str	r3, [sp, #0]
   29db8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   29dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   29dbe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   29dc2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   29dc6:	f004 fd59 	bl	2e87c <amp2Log2>
   29dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   29dce:	6fba      	ldr	r2, [r7, #120]	; 0x78
   29dd0:	f023 0307 	bic.w	r3, r3, #7
   29dd4:	ebad 0d03 	sub.w	sp, sp, r3
   29dd8:	ab14      	add	r3, sp, #80	; 0x50
   29dda:	4618      	mov	r0, r3
   29ddc:	2100      	movs	r1, #0
   29dde:	663b      	str	r3, [r7, #96]	; 0x60
   29de0:	f7e2 fabc 	bl	c35c <memset>
   29de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   29de8:	2b00      	cmp	r3, #0
   29dea:	f040 8095 	bne.w	29f18 <celt_encode_with_ec+0x7bc>
   29dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29df2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   29df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   29df8:	6378      	str	r0, [r7, #52]	; 0x34
   29dfa:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
   29dfe:	2800      	cmp	r0, #0
   29e00:	f000 808f 	beq.w	29f22 <celt_encode_with_ec+0x7c6>
   29e04:	2a00      	cmp	r2, #0
   29e06:	f041 82cf 	bne.w	2b3a8 <celt_encode_with_ec+0x1c4c>
   29e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   29e0c:	677b      	str	r3, [r7, #116]	; 0x74
   29e0e:	2b02      	cmp	r3, #2
   29e10:	461a      	mov	r2, r3
   29e12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   29e16:	ed1f 6a61 	vldr	s12, [pc, #-388]	; 29c94 <celt_encode_with_ec+0x538>
   29e1a:	bfb8      	it	lt
   29e1c:	2202      	movlt	r2, #2
   29e1e:	2b00      	cmp	r3, #0
   29e20:	f342 81a6 	ble.w	2c170 <celt_encode_with_ec+0x2a14>
   29e24:	1ed3      	subs	r3, r2, #3
   29e26:	f023 0301 	bic.w	r3, r3, #1
   29e2a:	657b      	str	r3, [r7, #84]	; 0x54
   29e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29e2e:	f8d7 e0b8 	ldr.w	lr, [r7, #184]	; 0xb8
   29e32:	f8c7 b020 	str.w	fp, [r7, #32]
   29e36:	189c      	adds	r4, r3, r2
   29e38:	62bc      	str	r4, [r7, #40]	; 0x28
   29e3a:	1c9c      	adds	r4, r3, #2
   29e3c:	f8c7 a1c4 	str.w	sl, [r7, #452]	; 0x1c4
   29e40:	eef0 5a46 	vmov.f32	s11, s12
   29e44:	4671      	mov	r1, lr
   29e46:	46f0      	mov	r8, lr
   29e48:	647c      	str	r4, [r7, #68]	; 0x44
   29e4a:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
   29e4e:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
   29e52:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
   29e56:	469b      	mov	fp, r3
   29e58:	4682      	mov	sl, r0
   29e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   29e5c:	2b02      	cmp	r3, #2
   29e5e:	f341 83cb 	ble.w	2b5f8 <celt_encode_with_ec+0x1e9c>
   29e62:	46dc      	mov	ip, fp
   29e64:	eb0a 068e 	add.w	r6, sl, lr, lsl #2
   29e68:	f93c 4b04 	ldrsh.w	r4, [ip], #4
   29e6c:	f1c2 0503 	rsb	r5, r2, #3
   29e70:	2300      	movs	r3, #0
   29e72:	e047      	b.n	29f04 <celt_encode_with_ec+0x7a8>
   29e74:	eef4 4ac4 	vcmpe.f32	s9, s8
   29e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29e7c:	f301 83a8 	bgt.w	2b5d0 <celt_encode_with_ec+0x1e74>
   29e80:	eef8 4a00 	vmov.f32	s9, #128	; 0xc0000000 -2.0
   29e84:	6c78      	ldr	r0, [r7, #68]	; 0x44
   29e86:	edd6 6a01 	vldr	s13, [r6, #4]
   29e8a:	f930 0013 	ldrsh.w	r0, [r0, r3, lsl #1]
   29e8e:	1b04      	subs	r4, r0, r4
   29e90:	ee07 4a90 	vmov	s15, r4
   29e94:	f1a5 0902 	sub.w	r9, r5, #2
   29e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   29e9c:	ee07 9a90 	vmov	s15, r9
   29ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   29ea4:	ee27 7a24 	vmul.f32	s14, s14, s9
   29ea8:	ee67 7aa4 	vmul.f32	s15, s15, s9
   29eac:	eef4 6ac5 	vcmpe.f32	s13, s10
   29eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29eb4:	4421      	add	r1, r4
   29eb6:	ee77 5a25 	vadd.f32	s11, s14, s11
   29eba:	ee37 6a86 	vadd.f32	s12, s15, s12
   29ebe:	4699      	mov	r9, r3
   29ec0:	f101 837d 	bmi.w	2b5be <celt_encode_with_ec+0x1e62>
   29ec4:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
   29ec8:	f93c 4013 	ldrsh.w	r4, [ip, r3, lsl #1]
   29ecc:	1a20      	subs	r0, r4, r0
   29ece:	ee07 0a90 	vmov	s15, r0
   29ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   29ed6:	ee07 5a90 	vmov	s15, r5
   29eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   29ede:	4401      	add	r1, r0
   29ee0:	6d78      	ldr	r0, [r7, #84]	; 0x54
   29ee2:	ee27 7a26 	vmul.f32	s14, s14, s13
   29ee6:	ee67 6aa6 	vmul.f32	s13, s15, s13
   29eea:	4548      	cmp	r0, r9
   29eec:	f106 0608 	add.w	r6, r6, #8
   29ef0:	f103 0302 	add.w	r3, r3, #2
   29ef4:	ee77 5a25 	vadd.f32	s11, s14, s11
   29ef8:	ee36 6a86 	vadd.f32	s12, s13, s12
   29efc:	f105 0504 	add.w	r5, r5, #4
   29f00:	f001 837b 	beq.w	2b5fa <celt_encode_with_ec+0x1e9e>
   29f04:	edd6 4a00 	vldr	s9, [r6]
   29f08:	eef4 4ac5 	vcmpe.f32	s9, s10
   29f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29f10:	d4b0      	bmi.n	29e74 <celt_encode_with_ec+0x718>
   29f12:	eef4 4a00 	vmov.f32	s9, #64	; 0x3e000000  0.125
   29f16:	e7b5      	b.n	29e84 <celt_encode_with_ec+0x728>
   29f18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   29f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   29f22:	ed1f 8aa4 	vldr	s16, [pc, #-656]	; 29c94 <celt_encode_with_ec+0x538>
   29f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   29f2a:	eeb0 9a48 	vmov.f32	s18, s16
   29f2e:	2b00      	cmp	r3, #0
   29f30:	f040 8161 	bne.w	2a1f6 <celt_encode_with_ec+0xa9a>
   29f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   29f38:	009b      	lsls	r3, r3, #2
   29f3a:	677b      	str	r3, [r7, #116]	; 0x74
   29f3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   29f3e:	2b00      	cmp	r3, #0
   29f40:	f001 817e 	beq.w	2b240 <celt_encode_with_ec+0x1ae4>
   29f44:	ed97 6a2b 	vldr	s12, [r7, #172]	; 0xac
   29f48:	eeba 6aef 	vcvt.f32.s32	s12, s12, #1
   29f4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   29f50:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   29f54:	428b      	cmp	r3, r1
   29f56:	f281 869f 	bge.w	2bc98 <celt_encode_with_ec+0x253c>
   29f5a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   29f5e:	2a02      	cmp	r2, #2
   29f60:	f001 8597 	beq.w	2ba92 <celt_encode_with_ec+0x2336>
   29f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
   29f66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   29f68:	ed5f 6ab6 	vldr	s13, [pc, #-728]	; 29c94 <celt_encode_with_ec+0x538>
   29f6c:	009b      	lsls	r3, r3, #2
   29f6e:	657b      	str	r3, [r7, #84]	; 0x54
   29f70:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
   29f74:	18d3      	adds	r3, r2, r3
   29f76:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   29f7a:	440a      	add	r2, r1
   29f7c:	ecf3 7a01 	vldmia	r3!, {s15}
   29f80:	ee37 7a65 	vsub.f32	s14, s14, s11
   29f84:	ee77 7ac6 	vsub.f32	s15, s15, s12
   29f88:	eef4 7ac7 	vcmpe.f32	s15, s14
   29f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29f90:	d528      	bpl.n	29fe4 <celt_encode_with_ec+0x888>
   29f92:	429a      	cmp	r2, r3
   29f94:	ee76 6a87 	vadd.f32	s13, s13, s14
   29f98:	d1f0      	bne.n	29f7c <celt_encode_with_ec+0x820>
   29f9a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
   29f9e:	1a9b      	subs	r3, r3, r2
   29fa0:	ee07 3a10 	vmov	s14, r3
   29fa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   29fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   29fac:	eec6 8a87 	vdiv.f32	s17, s13, s14
   29fb0:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
   29fb4:	ee78 8ae7 	vsub.f32	s17, s17, s15
   29fb8:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
   29fbc:	eef4 8ac7 	vcmpe.f32	s17, s14
   29fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29fc4:	f101 8140 	bmi.w	2b248 <celt_encode_with_ec+0x1aec>
   29fc8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   29fcc:	eef4 8ac7 	vcmpe.f32	s17, s14
   29fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   29fd4:	f341 827a 	ble.w	2b4cc <celt_encode_with_ec+0x1d70>
   29fd8:	eef0 8a47 	vmov.f32	s17, s14
   29fdc:	ed1f 7ad2 	vldr	s14, [pc, #-840]	; 29c98 <celt_encode_with_ec+0x53c>
   29fe0:	f001 b936 	b.w	2b250 <celt_encode_with_ec+0x1af4>
   29fe4:	429a      	cmp	r2, r3
   29fe6:	ee76 6aa7 	vadd.f32	s13, s13, s15
   29fea:	d0d6      	beq.n	29f9a <celt_encode_with_ec+0x83e>
   29fec:	eeb0 7a67 	vmov.f32	s14, s15
   29ff0:	e7c4      	b.n	29f7c <celt_encode_with_ec+0x820>
   29ff2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   29ff6:	2b02      	cmp	r3, #2
   29ff8:	f77f aed7 	ble.w	29daa <celt_encode_with_ec+0x64e>
   29ffc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   29ffe:	ed1f 6ad9 	vldr	s12, [pc, #-868]	; 29c9c <celt_encode_with_ec+0x540>
   2a002:	ed5f 6ad9 	vldr	s13, [pc, #-868]	; 29ca0 <celt_encode_with_ec+0x544>
   2a006:	009b      	lsls	r3, r3, #2
   2a008:	67bb      	str	r3, [r7, #120]	; 0x78
   2a00a:	18ca      	adds	r2, r1, r3
   2a00c:	460b      	mov	r3, r1
   2a00e:	3308      	adds	r3, #8
   2a010:	ed91 7a00 	vldr	s14, [r1]
   2a014:	ecf3 7a01 	vldmia	r3!, {s15}
   2a018:	ee27 7a06 	vmul.f32	s14, s14, s12
   2a01c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a024:	bfd8      	it	le
   2a026:	eef0 7a47 	vmovle.f32	s15, s14
   2a02a:	eef4 7ae6 	vcmpe.f32	s15, s13
   2a02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a032:	dc04      	bgt.n	2a03e <celt_encode_with_ec+0x8e2>
   2a034:	429a      	cmp	r2, r3
   2a036:	ed43 6a01 	vstr	s13, [r3, #-4]
   2a03a:	d1e9      	bne.n	2a010 <celt_encode_with_ec+0x8b4>
   2a03c:	e6b7      	b.n	29dae <celt_encode_with_ec+0x652>
   2a03e:	429a      	cmp	r2, r3
   2a040:	ed43 7a01 	vstr	s15, [r3, #-4]
   2a044:	d1e4      	bne.n	2a010 <celt_encode_with_ec+0x8b4>
   2a046:	e6b2      	b.n	29dae <celt_encode_with_ec+0x652>
   2a048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2a04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a04e:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   2a052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   2a056:	fb02 f103 	mul.w	r1, r2, r3
   2a05a:	2301      	movs	r3, #1
   2a05c:	607b      	str	r3, [r7, #4]
   2a05e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   2a062:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   2a066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   2a06a:	f1b8 0f00 	cmp.w	r8, #0
   2a06e:	d019      	beq.n	2a0a4 <celt_encode_with_ec+0x948>
   2a070:	1c50      	adds	r0, r2, #1
   2a072:	46d0      	mov	r8, sl
   2a074:	f47f ac3c 	bne.w	298f0 <celt_encode_with_ec+0x194>
   2a078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2a07c:	2b01      	cmp	r3, #1
   2a07e:	dc0e      	bgt.n	2a09e <celt_encode_with_ec+0x942>
   2a080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   2a084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   2a088:	f001 b8f3 	b.w	2b272 <celt_encode_with_ec+0x1b16>
   2a08c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   2a090:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2a092:	fb03 f102 	mul.w	r1, r3, r2
   2a096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2a09a:	2b01      	cmp	r3, #1
   2a09c:	dd02      	ble.n	2a0a4 <celt_encode_with_ec+0x948>
   2a09e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2a0a2:	4419      	add	r1, r3
   2a0a4:	1c53      	adds	r3, r2, #1
   2a0a6:	f001 80de 	beq.w	2b266 <celt_encode_with_ec+0x1b0a>
   2a0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2a0ae:	6818      	ldr	r0, [r3, #0]
   2a0b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2a0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   2a0b6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2a0ba:	00c0      	lsls	r0, r0, #3
   2a0bc:	fb91 f1f0 	sdiv	r1, r1, r0
   2a0c0:	2b00      	cmp	r3, #0
   2a0c2:	bf0c      	ite	eq
   2a0c4:	460b      	moveq	r3, r1
   2a0c6:	1e4b      	subne	r3, r1, #1
   2a0c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   2a0cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2a0ce:	4299      	cmp	r1, r3
   2a0d0:	bfa8      	it	ge
   2a0d2:	4619      	movge	r1, r3
   2a0d4:	2902      	cmp	r1, #2
   2a0d6:	bfb8      	it	lt
   2a0d8:	2102      	movlt	r1, #2
   2a0da:	f44f 73c8 	mov.w	r3, #400	; 0x190
   2a0de:	fb03 f301 	mul.w	r3, r3, r1
   2a0e2:	4103      	asrs	r3, r0
   2a0e4:	1b9b      	subs	r3, r3, r6
   2a0e6:	1b96      	subs	r6, r2, r6
   2a0e8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
   2a0ec:	429e      	cmp	r6, r3
   2a0ee:	eba1 0108 	sub.w	r1, r1, r8
   2a0f2:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
   2a0f6:	bfa8      	it	ge
   2a0f8:	461e      	movge	r6, r3
   2a0fa:	2100      	movs	r1, #0
   2a0fc:	65b9      	str	r1, [r7, #88]	; 0x58
   2a0fe:	60be      	str	r6, [r7, #8]
   2a100:	f1ba 0f00 	cmp.w	sl, #0
   2a104:	f47f ac14 	bne.w	29930 <celt_encode_with_ec+0x1d4>
   2a108:	4649      	mov	r1, r9
   2a10a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   2a10e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   2a112:	f002 fb0b 	bl	2c72c <ec_enc_init>
   2a116:	f107 0af0 	add.w	sl, r7, #240	; 0xf0
   2a11a:	e409      	b.n	29930 <celt_encode_with_ec+0x1d4>
   2a11c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2a120:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   2a122:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
   2a126:	fb0b f303 	mul.w	r3, fp, r3
   2a12a:	009b      	lsls	r3, r3, #2
   2a12c:	3307      	adds	r3, #7
   2a12e:	f023 0307 	bic.w	r3, r3, #7
   2a132:	3007      	adds	r0, #7
   2a134:	ebad 0d03 	sub.w	sp, sp, r3
   2a138:	f020 0307 	bic.w	r3, r0, #7
   2a13c:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   2a140:	ebad 0d03 	sub.w	sp, sp, r3
   2a144:	a814      	add	r0, sp, #80	; 0x50
   2a146:	ebad 0d03 	sub.w	sp, sp, r3
   2a14a:	ab14      	add	r3, sp, #80	; 0x50
   2a14c:	66bb      	str	r3, [r7, #104]	; 0x68
   2a14e:	2301      	movs	r3, #1
   2a150:	66f8      	str	r0, [r7, #108]	; 0x6c
   2a152:	667c      	str	r4, [r7, #100]	; 0x64
   2a154:	673b      	str	r3, [r7, #112]	; 0x70
   2a156:	e5e7      	b.n	29d28 <celt_encode_with_ec+0x5cc>
   2a158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2a15c:	9206      	str	r2, [sp, #24]
   2a15e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2a160:	9201      	str	r2, [sp, #4]
   2a162:	2000      	movs	r0, #0
   2a164:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   2a168:	9200      	str	r2, [sp, #0]
   2a16a:	f507 7490 	add.w	r4, r7, #288	; 0x120
   2a16e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
   2a172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
   2a176:	e9cd 4004 	strd	r4, r0, [sp, #16]
   2a17a:	e9cd 3102 	strd	r3, r1, [sp, #8]
   2a17e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2a180:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2a184:	617c      	str	r4, [r7, #20]
   2a186:	e9d7 3129 	ldrd	r3, r1, [r7, #164]	; 0xa4
   2a18a:	f7fd fc89 	bl	27aa0 <run_prefilter.isra.6>
   2a18e:	60f8      	str	r0, [r7, #12]
   2a190:	2800      	cmp	r0, #0
   2a192:	f43f ad2b 	beq.w	29bec <celt_encode_with_ec+0x490>
   2a196:	2201      	movs	r2, #1
   2a198:	4611      	mov	r1, r2
   2a19a:	4650      	mov	r0, sl
   2a19c:	f002 fbaa 	bl	2c8f4 <ec_enc_bit_logp>
   2a1a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2a1a4:	3301      	adds	r3, #1
   2a1a6:	fab3 f483 	clz	r4, r3
   2a1aa:	f1c4 051b 	rsb	r5, r4, #27
   2a1ae:	4629      	mov	r1, r5
   2a1b0:	4650      	mov	r0, sl
   2a1b2:	2206      	movs	r2, #6
   2a1b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   2a1b8:	f002 fc62 	bl	2ca80 <ec_enc_uint>
   2a1bc:	2310      	movs	r3, #16
   2a1be:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
   2a1c2:	fa03 f505 	lsl.w	r5, r3, r5
   2a1c6:	f1c4 021f 	rsb	r2, r4, #31
   2a1ca:	1b49      	subs	r1, r1, r5
   2a1cc:	4650      	mov	r0, sl
   2a1ce:	f002 fca9 	bl	2cb24 <ec_enc_bits>
   2a1d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2a1d6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   2a1da:	3b01      	subs	r3, #1
   2a1dc:	4650      	mov	r0, sl
   2a1de:	2203      	movs	r2, #3
   2a1e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   2a1e4:	f002 fc9e 	bl	2cb24 <ec_enc_bits>
   2a1e8:	2302      	movs	r3, #2
   2a1ea:	4ac5      	ldr	r2, [pc, #788]	; (2a500 <celt_encode_with_ec+0xda4>)
   2a1ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
   2a1ee:	4650      	mov	r0, sl
   2a1f0:	f002 fbdc 	bl	2c9ac <ec_enc_icdf>
   2a1f4:	e4fc      	b.n	29bf0 <celt_encode_with_ec+0x494>
   2a1f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2a1fa:	009b      	lsls	r3, r3, #2
   2a1fc:	677b      	str	r3, [r7, #116]	; 0x74
   2a1fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2a202:	009b      	lsls	r3, r3, #2
   2a204:	eef0 8a48 	vmov.f32	s17, s16
   2a208:	657b      	str	r3, [r7, #84]	; 0x54
   2a20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2a20c:	2b00      	cmp	r3, #0
   2a20e:	f000 875b 	beq.w	2b0c8 <celt_encode_with_ec+0x196c>
   2a212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2a216:	3b01      	subs	r3, #1
   2a218:	62bb      	str	r3, [r7, #40]	; 0x28
   2a21a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2a21e:	b1e3      	cbz	r3, 2a25a <celt_encode_with_ec+0xafe>
   2a220:	f8da 101c 	ldr.w	r1, [sl, #28]
   2a224:	f8da 4014 	ldr.w	r4, [sl, #20]
   2a228:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2a22a:	fab1 f381 	clz	r3, r1
   2a22e:	4423      	add	r3, r4
   2a230:	3b1e      	subs	r3, #30
   2a232:	4293      	cmp	r3, r2
   2a234:	da11      	bge.n	2a25a <celt_encode_with_ec+0xafe>
   2a236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2a23a:	2b00      	cmp	r3, #0
   2a23c:	f041 8114 	bne.w	2b468 <celt_encode_with_ec+0x1d0c>
   2a240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2a244:	699b      	ldr	r3, [r3, #24]
   2a246:	2b04      	cmp	r3, #4
   2a248:	f301 84b2 	bgt.w	2bbb0 <celt_encode_with_ec+0x2454>
   2a24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2a250:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2a252:	4413      	add	r3, r2
   2a254:	623b      	str	r3, [r7, #32]
   2a256:	f001 b90f 	b.w	2b478 <celt_encode_with_ec+0x1d1c>
   2a25a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2a25c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2a260:	4313      	orrs	r3, r2
   2a262:	673b      	str	r3, [r7, #112]	; 0x70
   2a264:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2a266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2a26a:	4413      	add	r3, r2
   2a26c:	623b      	str	r3, [r7, #32]
   2a26e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
   2a272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   2a276:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
   2a27a:	461a      	mov	r2, r3
   2a27c:	4623      	mov	r3, r4
   2a27e:	fb02 f303 	mul.w	r3, r2, r3
   2a282:	009b      	lsls	r3, r3, #2
   2a284:	3307      	adds	r3, #7
   2a286:	f023 0307 	bic.w	r3, r3, #7
   2a28a:	ebad 0d03 	sub.w	sp, sp, r3
   2a28e:	69fb      	ldr	r3, [r7, #28]
   2a290:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2a294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2a298:	9300      	str	r3, [sp, #0]
   2a29a:	aa14      	add	r2, sp, #80	; 0x50
   2a29c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2a29e:	647a      	str	r2, [r7, #68]	; 0x44
   2a2a0:	4659      	mov	r1, fp
   2a2a2:	4628      	mov	r0, r5
   2a2a4:	f008 f854 	bl	32350 <normalise_bands>
   2a2a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   2a2ac:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2a2b0:	4293      	cmp	r3, r2
   2a2b2:	f340 8609 	ble.w	2aec8 <celt_encode_with_ec+0x176c>
   2a2b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2a2b8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2a2bc:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2a2be:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2a2c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
   2a2c2:	3307      	adds	r3, #7
   2a2c4:	f023 0407 	bic.w	r4, r3, #7
   2a2c8:	ebad 0d04 	sub.w	sp, sp, r4
   2a2cc:	ad14      	add	r5, sp, #80	; 0x50
   2a2ce:	ebad 0d04 	sub.w	sp, sp, r4
   2a2d2:	637b      	str	r3, [r7, #52]	; 0x34
   2a2d4:	ab14      	add	r3, sp, #80	; 0x50
   2a2d6:	ebad 0d04 	sub.w	sp, sp, r4
   2a2da:	65fd      	str	r5, [r7, #92]	; 0x5c
   2a2dc:	930e      	str	r3, [sp, #56]	; 0x38
   2a2de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a2e0:	9306      	str	r3, [sp, #24]
   2a2e2:	697b      	ldr	r3, [r7, #20]
   2a2e4:	930b      	str	r3, [sp, #44]	; 0x2c
   2a2e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2a2ea:	930a      	str	r3, [sp, #40]	; 0x28
   2a2ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2a2f0:	9309      	str	r3, [sp, #36]	; 0x24
   2a2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2a2f4:	9308      	str	r3, [sp, #32]
   2a2f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2a2fa:	960d      	str	r6, [sp, #52]	; 0x34
   2a2fc:	9305      	str	r3, [sp, #20]
   2a2fe:	ae14      	add	r6, sp, #80	; 0x50
   2a300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2a304:	910c      	str	r1, [sp, #48]	; 0x30
   2a306:	9207      	str	r2, [sp, #28]
   2a308:	960f      	str	r6, [sp, #60]	; 0x3c
   2a30a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a30c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2a30e:	9204      	str	r2, [sp, #16]
   2a310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2a314:	9502      	str	r5, [sp, #8]
   2a316:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2a31a:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
   2a31e:	9201      	str	r2, [sp, #4]
   2a320:	f8d7 50b8 	ldr.w	r5, [r7, #184]	; 0xb8
   2a324:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2a328:	9200      	str	r2, [sp, #0]
   2a32a:	9303      	str	r3, [sp, #12]
   2a32c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2a330:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2a332:	462b      	mov	r3, r5
   2a334:	f7fe f89c 	bl	28470 <dynalloc_analysis.isra.5>
   2a338:	ebad 0d04 	sub.w	sp, sp, r4
   2a33c:	ab14      	add	r3, sp, #80	; 0x50
   2a33e:	eef0 9a40 	vmov.f32	s19, s0
   2a342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   2a346:	2d00      	cmp	r5, #0
   2a348:	f040 8554 	bne.w	2adf4 <celt_encode_with_ec+0x1698>
   2a34c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2a350:	2b00      	cmp	r3, #0
   2a352:	f341 85bb 	ble.w	2becc <celt_encode_with_ec+0x2770>
   2a356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2a35a:	2b01      	cmp	r3, #1
   2a35c:	f001 85b3 	beq.w	2bec6 <celt_encode_with_ec+0x276a>
   2a360:	085a      	lsrs	r2, r3, #1
   2a362:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   2a366:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   2a36a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2a36e:	e9c3 1100 	strd	r1, r1, [r3]
   2a372:	3308      	adds	r3, #8
   2a374:	429a      	cmp	r2, r3
   2a376:	d1fa      	bne.n	2a36e <celt_encode_with_ec+0xc12>
   2a378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2a37c:	f022 0301 	bic.w	r3, r2, #1
   2a380:	429a      	cmp	r2, r3
   2a382:	d006      	beq.n	2a392 <celt_encode_with_ec+0xc36>
   2a384:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   2a388:	4611      	mov	r1, r2
   2a38a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2a38e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2a392:	f04f 0b00 	mov.w	fp, #0
   2a396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2a39a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   2a39e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   2a3a2:	f023 0307 	bic.w	r3, r3, #7
   2a3a6:	ebad 0d03 	sub.w	sp, sp, r3
   2a3aa:	ab14      	add	r3, sp, #80	; 0x50
   2a3ac:	428a      	cmp	r2, r1
   2a3ae:	663b      	str	r3, [r7, #96]	; 0x60
   2a3b0:	da39      	bge.n	2a426 <celt_encode_with_ec+0xcca>
   2a3b2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   2a3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2a3b6:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
   2a3ba:	f8d7 e0c0 	ldr.w	lr, [r7, #192]	; 0xc0
   2a3be:	f8d7 8074 	ldr.w	r8, [r7, #116]	; 0x74
   2a3c2:	1a1b      	subs	r3, r3, r0
   2a3c4:	eb04 0c03 	add.w	ip, r4, r3
   2a3c8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   2a3ca:	1a56      	subs	r6, r2, r1
   2a3cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2a3ce:	4423      	add	r3, r4
   2a3d0:	ebac 0c02 	sub.w	ip, ip, r2
   2a3d4:	1a9d      	subs	r5, r3, r2
   2a3d6:	00b6      	lsls	r6, r6, #2
   2a3d8:	1810      	adds	r0, r2, r0
   2a3da:	2400      	movs	r4, #0
   2a3dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   2a3e0:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
   2a3e4:	1833      	adds	r3, r6, r0
   2a3e6:	eb0c 0100 	add.w	r1, ip, r0
   2a3ea:	182a      	adds	r2, r5, r0
   2a3ec:	ecb3 7a01 	vldmia	r3!, {s14}
   2a3f0:	ecf1 7a01 	vldmia	r1!, {s15}
   2a3f4:	ee77 7a67 	vsub.f32	s15, s14, s15
   2a3f8:	eef0 7ae7 	vabs.f32	s15, s15
   2a3fc:	eef4 7ae6 	vcmpe.f32	s15, s13
   2a400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a404:	d507      	bpl.n	2a416 <celt_encode_with_ec+0xcba>
   2a406:	edd2 7a00 	vldr	s15, [r2]
   2a40a:	ee67 7a86 	vmul.f32	s15, s15, s12
   2a40e:	ee37 7a67 	vsub.f32	s14, s14, s15
   2a412:	ed03 7a01 	vstr	s14, [r3, #-4]
   2a416:	4298      	cmp	r0, r3
   2a418:	f102 0204 	add.w	r2, r2, #4
   2a41c:	d1e6      	bne.n	2a3ec <celt_encode_with_ec+0xc90>
   2a41e:	3401      	adds	r4, #1
   2a420:	45a6      	cmp	lr, r4
   2a422:	4440      	add	r0, r8
   2a424:	dcde      	bgt.n	2a3e4 <celt_encode_with_ec+0xc88>
   2a426:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2a42a:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
   2a42e:	698b      	ldr	r3, [r1, #24]
   2a430:	6c0c      	ldr	r4, [r1, #64]	; 0x40
   2a432:	6b88      	ldr	r0, [r1, #56]	; 0x38
   2a434:	68ca      	ldr	r2, [r1, #12]
   2a436:	9507      	str	r5, [sp, #28]
   2a438:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2a43c:	9506      	str	r5, [sp, #24]
   2a43e:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
   2a442:	e9cd a504 	strd	sl, r5, [sp, #16]
   2a446:	6e3d      	ldr	r5, [r7, #96]	; 0x60
   2a448:	9503      	str	r5, [sp, #12]
   2a44a:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
   2a44c:	9502      	str	r5, [sp, #8]
   2a44e:	2b03      	cmp	r3, #3
   2a450:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
   2a454:	9501      	str	r5, [sp, #4]
   2a456:	bfd4      	ite	le
   2a458:	2300      	movle	r3, #0
   2a45a:	2301      	movgt	r3, #1
   2a45c:	3154      	adds	r1, #84	; 0x54
   2a45e:	6ebd      	ldr	r5, [r7, #104]	; 0x68
   2a460:	930a      	str	r3, [sp, #40]	; 0x28
   2a462:	e9cd 040b 	strd	r0, r4, [sp, #44]	; 0x2c
   2a466:	e9cd 2108 	strd	r2, r1, [sp, #32]
   2a46a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2a46e:	9500      	str	r5, [sp, #0]
   2a470:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
   2a474:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2a478:	f003 fea6 	bl	2e1c8 <quant_coarse_energy>
   2a47c:	f8da 301c 	ldr.w	r3, [sl, #28]
   2a480:	f8da 2004 	ldr.w	r2, [sl, #4]
   2a484:	f8da 1014 	ldr.w	r1, [sl, #20]
   2a488:	fab3 f383 	clz	r3, r3
   2a48c:	f1c3 0320 	rsb	r3, r3, #32
   2a490:	00d4      	lsls	r4, r2, #3
   2a492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2a496:	1ac9      	subs	r1, r1, r3
   2a498:	460b      	mov	r3, r1
   2a49a:	2a00      	cmp	r2, #0
   2a49c:	f040 8503 	bne.w	2aea6 <celt_encode_with_ec+0x174a>
   2a4a0:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2a4a4:	2004      	movs	r0, #4
   2a4a6:	4602      	mov	r2, r0
   2a4a8:	2d00      	cmp	r5, #0
   2a4aa:	f000 8503 	beq.w	2aeb4 <celt_encode_with_ec+0x1758>
   2a4ae:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
   2a4b2:	1c4d      	adds	r5, r1, #1
   2a4b4:	4428      	add	r0, r5
   2a4b6:	46b4      	mov	ip, r6
   2a4b8:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
   2a4bc:	4284      	cmp	r4, r0
   2a4be:	bf34      	ite	cc
   2a4c0:	f04f 0800 	movcc.w	r8, #0
   2a4c4:	f04f 0801 	movcs.w	r8, #1
   2a4c8:	45b4      	cmp	ip, r6
   2a4ca:	eba4 0508 	sub.w	r5, r4, r8
   2a4ce:	f281 83dc 	bge.w	2bc8a <celt_encode_with_ec+0x252e>
   2a4d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   2a4d6:	f8c7 b0cc 	str.w	fp, [r7, #204]	; 0xcc
   2a4da:	2900      	cmp	r1, #0
   2a4dc:	bf14      	ite	ne
   2a4de:	2604      	movne	r6, #4
   2a4e0:	2605      	moveq	r6, #5
   2a4e2:	f04f 0900 	mov.w	r9, #0
   2a4e6:	f8c7 80a8 	str.w	r8, [r7, #168]	; 0xa8
   2a4ea:	4649      	mov	r1, r9
   2a4ec:	46b0      	mov	r8, r6
   2a4ee:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
   2a4f2:	f8d7 b088 	ldr.w	fp, [r7, #136]	; 0x88
   2a4f6:	462e      	mov	r6, r5
   2a4f8:	469c      	mov	ip, r3
   2a4fa:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
   2a4fe:	e007      	b.n	2a510 <celt_encode_with_ec+0xdb4>
   2a500:	0003d800 	.word	0x0003d800
   2a504:	f84b 1024 	str.w	r1, [fp, r4, lsl #2]
   2a508:	3401      	adds	r4, #1
   2a50a:	42a5      	cmp	r5, r4
   2a50c:	4642      	mov	r2, r8
   2a50e:	dd1b      	ble.n	2a548 <celt_encode_with_ec+0xdec>
   2a510:	eb02 000c 	add.w	r0, r2, ip
   2a514:	4286      	cmp	r6, r0
   2a516:	d3f5      	bcc.n	2a504 <celt_encode_with_ec+0xda8>
   2a518:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
   2a51c:	4041      	eors	r1, r0
   2a51e:	4650      	mov	r0, sl
   2a520:	f002 f9e8 	bl	2c8f4 <ec_enc_bit_logp>
   2a524:	f8da 001c 	ldr.w	r0, [sl, #28]
   2a528:	f8da 2014 	ldr.w	r2, [sl, #20]
   2a52c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
   2a530:	fab0 fc80 	clz	ip, r0
   2a534:	3401      	adds	r4, #1
   2a536:	f1cc 0c20 	rsb	ip, ip, #32
   2a53a:	42a5      	cmp	r5, r4
   2a53c:	eba2 0c0c 	sub.w	ip, r2, ip
   2a540:	ea49 0901 	orr.w	r9, r9, r1
   2a544:	4642      	mov	r2, r8
   2a546:	dce3      	bgt.n	2a510 <celt_encode_with_ec+0xdb4>
   2a548:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
   2a54c:	f8d7 b0cc 	ldr.w	fp, [r7, #204]	; 0xcc
   2a550:	f1b8 0f00 	cmp.w	r8, #0
   2a554:	f000 8499 	beq.w	2ae8a <celt_encode_with_ec+0x172e>
   2a558:	4a68      	ldr	r2, [pc, #416]	; (2a6fc <celt_encode_with_ec+0xfa0>)
   2a55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2a55e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2a562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2a566:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2a56a:	eb03 0109 	add.w	r1, r3, r9
   2a56e:	f913 2009 	ldrsb.w	r2, [r3, r9]
   2a572:	f991 3002 	ldrsb.w	r3, [r1, #2]
   2a576:	429a      	cmp	r2, r3
   2a578:	f000 8487 	beq.w	2ae8a <celt_encode_with_ec+0x172e>
   2a57c:	2201      	movs	r2, #1
   2a57e:	4659      	mov	r1, fp
   2a580:	4650      	mov	r0, sl
   2a582:	f002 f9b7 	bl	2c8f4 <ec_enc_bit_logp>
   2a586:	f8da 301c 	ldr.w	r3, [sl, #28]
   2a58a:	f8da 1014 	ldr.w	r1, [sl, #20]
   2a58e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
   2a592:	fab3 f383 	clz	r3, r3
   2a596:	f1c3 0320 	rsb	r3, r3, #32
   2a59a:	1ac9      	subs	r1, r1, r3
   2a59c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2a5a0:	4283      	cmp	r3, r0
   2a5a2:	da1a      	bge.n	2a5da <celt_encode_with_ec+0xe7e>
   2a5a4:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
   2a5a8:	4a54      	ldr	r2, [pc, #336]	; (2a6fc <celt_encode_with_ec+0xfa0>)
   2a5aa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   2a5ae:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   2a5b2:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
   2a5b6:	6fbc      	ldr	r4, [r7, #120]	; 0x78
   2a5b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2a5bc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   2a5c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   2a5c4:	3b01      	subs	r3, #1
   2a5c6:	3c04      	subs	r4, #4
   2a5c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a5cc:	4414      	add	r4, r2
   2a5ce:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2a5d2:	5682      	ldrsb	r2, [r0, r2]
   2a5d4:	601a      	str	r2, [r3, #0]
   2a5d6:	429c      	cmp	r4, r3
   2a5d8:	d1f9      	bne.n	2a5ce <celt_encode_with_ec+0xe72>
   2a5da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   2a5dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2a5e0:	1ccb      	adds	r3, r1, #3
   2a5e2:	4283      	cmp	r3, r0
   2a5e4:	6c11      	ldr	r1, [r2, #64]	; 0x40
   2a5e6:	da0e      	bge.n	2a606 <celt_encode_with_ec+0xeaa>
   2a5e8:	2900      	cmp	r1, #0
   2a5ea:	f000 8612 	beq.w	2b212 <celt_encode_with_ec+0x1ab6>
   2a5ee:	2300      	movs	r3, #0
   2a5f0:	2102      	movs	r1, #2
   2a5f2:	6653      	str	r3, [r2, #100]	; 0x64
   2a5f4:	6511      	str	r1, [r2, #80]	; 0x50
   2a5f6:	2305      	movs	r3, #5
   2a5f8:	4a41      	ldr	r2, [pc, #260]	; (2a700 <celt_encode_with_ec+0xfa4>)
   2a5fa:	4650      	mov	r0, sl
   2a5fc:	f002 f9d6 	bl	2c9ac <ec_enc_icdf>
   2a600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2a604:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2a606:	b161      	cbz	r1, 2a622 <celt_encode_with_ec+0xec6>
   2a608:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   2a60c:	2a1a      	cmp	r2, #26
   2a60e:	f300 8614 	bgt.w	2b23a <celt_encode_with_ec+0x1ade>
   2a612:	4b3c      	ldr	r3, [pc, #240]	; (2a704 <celt_encode_with_ec+0xfa8>)
   2a614:	4611      	mov	r1, r2
   2a616:	fb83 1301 	smull	r1, r3, r3, r1
   2a61a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
   2a61e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2a620:	6013      	str	r3, [r2, #0]
   2a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a624:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   2a628:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2a62c:	f023 0307 	bic.w	r3, r3, #7
   2a630:	ebad 0d03 	sub.w	sp, sp, r3
   2a634:	ab14      	add	r3, sp, #80	; 0x50
   2a636:	4619      	mov	r1, r3
   2a638:	61fb      	str	r3, [r7, #28]
   2a63a:	461d      	mov	r5, r3
   2a63c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2a640:	f009 fa78 	bl	33b34 <init_caps>
   2a644:	4650      	mov	r0, sl
   2a646:	f002 f855 	bl	2c6f4 <ec_tell_frac>
   2a64a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2a64c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
   2a650:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
   2a654:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
   2a658:	00d2      	lsls	r2, r2, #3
   2a65a:	42a1      	cmp	r1, r4
   2a65c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   2a660:	f281 8270 	bge.w	2bb44 <celt_encode_with_ec+0x23e8>
   2a664:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   2a668:	3b01      	subs	r3, #1
   2a66a:	009a      	lsls	r2, r3, #2
   2a66c:	1d13      	adds	r3, r2, #4
   2a66e:	442b      	add	r3, r5
   2a670:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
   2a672:	18aa      	adds	r2, r5, r2
   2a674:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
   2a678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2a67a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2a67e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
   2a682:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
   2a686:	2206      	movs	r2, #6
   2a688:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
   2a68c:	f04f 0900 	mov.w	r9, #0
   2a690:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   2a694:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
   2a698:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   2a69c:	f9b4 1000 	ldrsh.w	r1, [r4]
   2a6a0:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
   2a6a4:	eba2 0b09 	sub.w	fp, r2, r9
   2a6a8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2a6ac:	1a52      	subs	r2, r2, r1
   2a6ae:	fb05 f202 	mul.w	r2, r5, r2
   2a6b2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2a6b6:	40aa      	lsls	r2, r5
   2a6b8:	2a30      	cmp	r2, #48	; 0x30
   2a6ba:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
   2a6be:	4616      	mov	r6, r2
   2a6c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   2a6c4:	bfb8      	it	lt
   2a6c6:	2630      	movlt	r6, #48	; 0x30
   2a6c8:	4296      	cmp	r6, r2
   2a6ca:	eb00 01c5 	add.w	r1, r0, r5, lsl #3
   2a6ce:	f104 0402 	add.w	r4, r4, #2
   2a6d2:	bfa8      	it	ge
   2a6d4:	4616      	movge	r6, r2
   2a6d6:	4559      	cmp	r1, fp
   2a6d8:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
   2a6dc:	f280 83d9 	bge.w	2ae92 <celt_encode_with_ec+0x1736>
   2a6e0:	681a      	ldr	r2, [r3, #0]
   2a6e2:	2a00      	cmp	r2, #0
   2a6e4:	f340 83d5 	ble.w	2ae92 <celt_encode_with_ec+0x1736>
   2a6e8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
   2a6ec:	462a      	mov	r2, r5
   2a6ee:	eb06 0409 	add.w	r4, r6, r9
   2a6f2:	2500      	movs	r5, #0
   2a6f4:	1b0c      	subs	r4, r1, r4
   2a6f6:	46a8      	mov	r8, r5
   2a6f8:	46b3      	mov	fp, r6
   2a6fa:	e011      	b.n	2a720 <celt_encode_with_ec+0xfc4>
   2a6fc:	000414c4 	.word	0x000414c4
   2a700:	0003d7fc 	.word	0x0003d7fc
   2a704:	55555556 	.word	0x55555556
   2a708:	42a1      	cmp	r1, r4
   2a70a:	44d8      	add	r8, fp
   2a70c:	44d9      	add	r9, fp
   2a70e:	4415      	add	r5, r2
   2a710:	eba4 040b 	sub.w	r4, r4, fp
   2a714:	f280 83af 	bge.w	2ae76 <celt_encode_with_ec+0x171a>
   2a718:	6819      	ldr	r1, [r3, #0]
   2a71a:	4541      	cmp	r1, r8
   2a71c:	f340 83ab 	ble.w	2ae76 <celt_encode_with_ec+0x171a>
   2a720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   2a724:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2a728:	685e      	ldr	r6, [r3, #4]
   2a72a:	42ae      	cmp	r6, r5
   2a72c:	bfd4      	ite	le
   2a72e:	2100      	movle	r1, #0
   2a730:	2101      	movgt	r1, #1
   2a732:	4650      	mov	r0, sl
   2a734:	f002 f8de 	bl	2c8f4 <ec_enc_bit_logp>
   2a738:	4650      	mov	r0, sl
   2a73a:	f001 ffdb 	bl	2c6f4 <ec_tell_frac>
   2a73e:	42ae      	cmp	r6, r5
   2a740:	f100 0108 	add.w	r1, r0, #8
   2a744:	4626      	mov	r6, r4
   2a746:	f04f 0201 	mov.w	r2, #1
   2a74a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2a74e:	dcdb      	bgt.n	2a708 <celt_encode_with_ec+0xfac>
   2a750:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   2a754:	eba2 0b09 	sub.w	fp, r2, r9
   2a758:	b13d      	cbz	r5, 2a76a <celt_encode_with_ec+0x100e>
   2a75a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2a75e:	2a03      	cmp	r2, #3
   2a760:	bfb8      	it	lt
   2a762:	2203      	movlt	r2, #3
   2a764:	3a01      	subs	r2, #1
   2a766:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   2a76a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2a76e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2a772:	f842 8f04 	str.w	r8, [r2, #4]!
   2a776:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
   2a77a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   2a77e:	428a      	cmp	r2, r1
   2a780:	f103 0304 	add.w	r3, r3, #4
   2a784:	d186      	bne.n	2a694 <celt_encode_with_ec+0xf38>
   2a786:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
   2a78a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2a78e:	2b02      	cmp	r3, #2
   2a790:	f000 8402 	beq.w	2af98 <celt_encode_with_ec+0x183c>
   2a794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2a798:	332f      	adds	r3, #47	; 0x2f
   2a79a:	455b      	cmp	r3, fp
   2a79c:	f280 837e 	bge.w	2ae9c <celt_encode_with_ec+0x1740>
   2a7a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2a7a4:	2b00      	cmp	r3, #0
   2a7a6:	f340 8576 	ble.w	2b296 <celt_encode_with_ec+0x1b3a>
   2a7aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2a7ae:	2300      	movs	r3, #0
   2a7b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
   2a7b4:	2505      	movs	r5, #5
   2a7b6:	2307      	movs	r3, #7
   2a7b8:	4a96      	ldr	r2, [pc, #600]	; (2aa14 <celt_encode_with_ec+0x12b8>)
   2a7ba:	4629      	mov	r1, r5
   2a7bc:	4650      	mov	r0, sl
   2a7be:	f002 f8f5 	bl	2c9ac <ec_enc_icdf>
   2a7c2:	4650      	mov	r0, sl
   2a7c4:	f001 ff96 	bl	2c6f4 <ec_tell_frac>
   2a7c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
   2a7cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2a7ce:	2a00      	cmp	r2, #0
   2a7d0:	f340 80fb 	ble.w	2a9ca <celt_encode_with_ec+0x126e>
   2a7d4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2a7d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2a7dc:	6b48      	ldr	r0, [r1, #52]	; 0x34
   2a7de:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a7e2:	f240 46fb 	movw	r6, #1275	; 0x4fb
   2a7e6:	410e      	asrs	r6, r1
   2a7e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   2a7ec:	428e      	cmp	r6, r1
   2a7ee:	bfa8      	it	ge
   2a7f0:	460e      	movge	r6, r1
   2a7f2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
   2a7f6:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
   2a7fa:	eba3 0c01 	sub.w	ip, r3, r1
   2a7fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2a802:	2b00      	cmp	r3, #0
   2a804:	f040 8468 	bne.w	2b0d8 <celt_encode_with_ec+0x197c>
   2a808:	69bb      	ldr	r3, [r7, #24]
   2a80a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
   2a80e:	2800      	cmp	r0, #0
   2a810:	f040 863a 	bne.w	2b488 <celt_encode_with_ec+0x1d2c>
   2a814:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2a818:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
   2a81c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
   2a81e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   2a822:	f8d4 e020 	ldr.w	lr, [r4, #32]
   2a826:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
   2a82a:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
   2a82e:	2b00      	cmp	r3, #0
   2a830:	bf08      	it	eq
   2a832:	4643      	moveq	r3, r8
   2a834:	6c0c      	ldr	r4, [r1, #64]	; 0x40
   2a836:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
   2a83a:	f8d1 b0ec 	ldr.w	fp, [r1, #236]	; 0xec
   2a83e:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
   2a842:	f93e 1013 	ldrsh.w	r1, [lr, r3, lsl #1]
   2a846:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
   2a84a:	fa01 f404 	lsl.w	r4, r1, r4
   2a84e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
   2a852:	2902      	cmp	r1, #2
   2a854:	f000 8660 	beq.w	2b518 <celt_encode_with_ec+0x1dbc>
   2a858:	4611      	mov	r1, r2
   2a85a:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2a85e:	eddf 7a6e 	vldr	s15, [pc, #440]	; 2aa18 <celt_encode_with_ec+0x12bc>
   2a862:	2313      	movs	r3, #19
   2a864:	40b3      	lsls	r3, r6
   2a866:	f8d7 60b4 	ldr.w	r6, [r7, #180]	; 0xb4
   2a86a:	1af3      	subs	r3, r6, r3
   2a86c:	440b      	add	r3, r1
   2a86e:	ee06 3a90 	vmov	s13, r3
   2a872:	ee77 7a67 	vsub.f32	s15, s14, s15
   2a876:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2a87a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2a87e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a882:	ee17 1a90 	vmov	r1, s15
   2a886:	440b      	add	r3, r1
   2a888:	f1bb 0f00 	cmp.w	fp, #0
   2a88c:	d015      	beq.n	2a8ba <celt_encode_with_ec+0x115e>
   2a88e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
   2a892:	b991      	cbnz	r1, 2a8ba <celt_encode_with_ec+0x115e>
   2a894:	00e1      	lsls	r1, r4, #3
   2a896:	ee07 1a90 	vmov	s15, r1
   2a89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a89e:	ee27 9a89 	vmul.f32	s18, s15, s18
   2a8a2:	eebd 9ac9 	vcvt.s32.f32	s18, s18
   2a8a6:	ee19 1a10 	vmov	r1, s18
   2a8aa:	4419      	add	r1, r3
   2a8ac:	2b00      	cmp	r3, #0
   2a8ae:	bfb8      	it	lt
   2a8b0:	3303      	addlt	r3, #3
   2a8b2:	109b      	asrs	r3, r3, #2
   2a8b4:	428b      	cmp	r3, r1
   2a8b6:	bfb8      	it	lt
   2a8b8:	460b      	movlt	r3, r1
   2a8ba:	f108 4100 	add.w	r1, r8, #2147483648	; 0x80000000
   2a8be:	3902      	subs	r1, #2
   2a8c0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2a8c4:	f93e 1011 	ldrsh.w	r1, [lr, r1, lsl #1]
   2a8c8:	40b1      	lsls	r1, r6
   2a8ca:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
   2a8ce:	fb06 f101 	mul.w	r1, r6, r1
   2a8d2:	00c9      	lsls	r1, r1, #3
   2a8d4:	ee07 1a90 	vmov	s15, r1
   2a8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a8dc:	109c      	asrs	r4, r3, #2
   2a8de:	ee67 9aa9 	vmul.f32	s19, s15, s19
   2a8e2:	eefd 9ae9 	vcvt.s32.f32	s19, s19
   2a8e6:	ee19 1a90 	vmov	r1, s19
   2a8ea:	428c      	cmp	r4, r1
   2a8ec:	bfb8      	it	lt
   2a8ee:	460c      	movlt	r4, r1
   2a8f0:	429c      	cmp	r4, r3
   2a8f2:	bfa8      	it	ge
   2a8f4:	461c      	movge	r4, r3
   2a8f6:	f1bb 0f00 	cmp.w	fp, #0
   2a8fa:	f001 8090 	beq.w	2ba1e <celt_encode_with_ec+0x22c2>
   2a8fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   2a902:	b173      	cbz	r3, 2a922 <celt_encode_with_ec+0x11c6>
   2a904:	b168      	cbz	r0, 2a922 <celt_encode_with_ec+0x11c6>
   2a906:	1aa4      	subs	r4, r4, r2
   2a908:	ee07 4a90 	vmov	s15, r4
   2a90c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 2aa1c <celt_encode_with_ec+0x12c0>
   2a910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a914:	ee67 7a87 	vmul.f32	s15, s15, s14
   2a918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a91c:	ee17 4a90 	vmov	r4, s15
   2a920:	4414      	add	r4, r2
   2a922:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
   2a926:	0052      	lsls	r2, r2, #1
   2a928:	460b      	mov	r3, r1
   2a92a:	444b      	add	r3, r9
   2a92c:	42a2      	cmp	r2, r4
   2a92e:	bfd4      	ite	le
   2a930:	1889      	addle	r1, r1, r2
   2a932:	1909      	addgt	r1, r1, r4
   2a934:	333f      	adds	r3, #63	; 0x3f
   2a936:	460a      	mov	r2, r1
   2a938:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2a93a:	119b      	asrs	r3, r3, #6
   2a93c:	3302      	adds	r3, #2
   2a93e:	2900      	cmp	r1, #0
   2a940:	f000 8414 	beq.w	2b16c <celt_encode_with_ec+0x1a10>
   2a944:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2a948:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
   2a94c:	f240 34c9 	movw	r4, #969	; 0x3c9
   2a950:	42a1      	cmp	r1, r4
   2a952:	f04f 0280 	mov.w	r2, #128	; 0x80
   2a956:	f04f 0300 	mov.w	r3, #0
   2a95a:	f04f 0802 	mov.w	r8, #2
   2a95e:	f340 8420 	ble.w	2b1a2 <celt_encode_with_ec+0x1a46>
   2a962:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 2aa20 <celt_encode_with_ec+0x12c4>
   2a966:	b308      	cbz	r0, 2a9ac <celt_encode_with_ec+0x1250>
   2a968:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
   2a96c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2a970:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2a974:	fa03 f30c 	lsl.w	r3, r3, ip
   2a978:	1a59      	subs	r1, r3, r1
   2a97a:	1a09      	subs	r1, r1, r0
   2a97c:	ee07 1a90 	vmov	s15, r1
   2a980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2a986:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
   2a98a:	ee67 7a87 	vmul.f32	s15, s15, s14
   2a98e:	1ad2      	subs	r2, r2, r3
   2a990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a994:	4411      	add	r1, r2
   2a996:	ee17 3a90 	vmov	r3, s15
   2a99a:	4403      	add	r3, r0
   2a99c:	425a      	negs	r2, r3
   2a99e:	2900      	cmp	r1, #0
   2a9a0:	e9c4 1334 	strd	r1, r3, [r4, #208]	; 0xd0
   2a9a4:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
   2a9a8:	f2c1 80a9 	blt.w	2bafe <celt_encode_with_ec+0x23a2>
   2a9ac:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2a9b0:	4590      	cmp	r8, r2
   2a9b2:	4643      	mov	r3, r8
   2a9b4:	bfa8      	it	ge
   2a9b6:	4613      	movge	r3, r2
   2a9b8:	461c      	mov	r4, r3
   2a9ba:	4619      	mov	r1, r3
   2a9bc:	4650      	mov	r0, sl
   2a9be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   2a9c2:	f002 f8e5 	bl	2cb90 <ec_enc_shrink>
   2a9c6:	00e3      	lsls	r3, r4, #3
   2a9c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   2a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a9cc:	f023 0307 	bic.w	r3, r3, #7
   2a9d0:	ebad 0d03 	sub.w	sp, sp, r3
   2a9d4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
   2a9d8:	ebad 0d03 	sub.w	sp, sp, r3
   2a9dc:	ae14      	add	r6, sp, #80	; 0x50
   2a9de:	4650      	mov	r0, sl
   2a9e0:	ebad 0d03 	sub.w	sp, sp, r3
   2a9e4:	f001 fe86 	bl	2c6f4 <ec_tell_frac>
   2a9e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   2a9ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2a9f0:	019c      	lsls	r4, r3, #6
   2a9f2:	43c3      	mvns	r3, r0
   2a9f4:	4423      	add	r3, r4
   2a9f6:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   2a9fa:	2a00      	cmp	r2, #0
   2a9fc:	f000 824c 	beq.w	2ae98 <celt_encode_with_ec+0x173c>
   2aa00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   2aa04:	2a01      	cmp	r2, #1
   2aa06:	dd0d      	ble.n	2aa24 <celt_encode_with_ec+0x12c8>
   2aa08:	3202      	adds	r2, #2
   2aa0a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
   2aa0e:	f280 8558 	bge.w	2b4c2 <celt_encode_with_ec+0x1d66>
   2aa12:	e007      	b.n	2aa24 <celt_encode_with_ec+0x12c8>
   2aa14:	0003d804 	.word	0x0003d804
   2aa18:	3d343958 	.word	0x3d343958
   2aa1c:	3f2b851f 	.word	0x3f2b851f
   2aa20:	3a83126f 	.word	0x3a83126f
   2aa24:	f04f 0b00 	mov.w	fp, #0
   2aa28:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2aa2c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   2aa2e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   2aa32:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
   2aa34:	900d      	str	r0, [sp, #52]	; 0x34
   2aa36:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
   2aa3a:	900a      	str	r0, [sp, #40]	; 0x28
   2aa3c:	2a00      	cmp	r2, #0
   2aa3e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
   2aa42:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2aa44:	9501      	str	r5, [sp, #4]
   2aa46:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
   2aa4a:	9304      	str	r3, [sp, #16]
   2aa4c:	bf18      	it	ne
   2aa4e:	2201      	movne	r2, #1
   2aa50:	4694      	mov	ip, r2
   2aa52:	69fb      	ldr	r3, [r7, #28]
   2aa54:	9300      	str	r3, [sp, #0]
   2aa56:	e9cd 9008 	strd	r9, r0, [sp, #32]
   2aa5a:	2101      	movs	r1, #1
   2aa5c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
   2aa60:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
   2aa64:	35e8      	adds	r5, #232	; 0xe8
   2aa66:	e9cd 5202 	strd	r5, r2, [sp, #8]
   2aa6a:	910c      	str	r1, [sp, #48]	; 0x30
   2aa6c:	9005      	str	r0, [sp, #20]
   2aa6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
   2aa72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2aa74:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2aa78:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   2aa7c:	e9cd 6806 	strd	r6, r8, [sp, #24]
   2aa80:	f003 ff64 	bl	2e94c <clt_compute_allocation>
   2aa84:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2aa88:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   2aa8a:	4605      	mov	r5, r0
   2aa8c:	2a00      	cmp	r2, #0
   2aa8e:	f000 8207 	beq.w	2aea0 <celt_encode_with_ec+0x1744>
   2aa92:	1e53      	subs	r3, r2, #1
   2aa94:	4283      	cmp	r3, r0
   2aa96:	f102 0201 	add.w	r2, r2, #1
   2aa9a:	bfb8      	it	lt
   2aa9c:	4603      	movlt	r3, r0
   2aa9e:	4293      	cmp	r3, r2
   2aaa0:	bfa8      	it	ge
   2aaa2:	4613      	movge	r3, r2
   2aaa4:	460a      	mov	r2, r1
   2aaa6:	65d3      	str	r3, [r2, #92]	; 0x5c
   2aaa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2aaac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2aaae:	9200      	str	r2, [sp, #0]
   2aab0:	e9cd a302 	strd	sl, r3, [sp, #8]
   2aab4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
   2aab8:	f8cd 8004 	str.w	r8, [sp, #4]
   2aabc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2aac0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2aac4:	f003 fdc4 	bl	2e650 <quant_fine_energy>
   2aac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2aaca:	1dd3      	adds	r3, r2, #7
   2aacc:	f023 0307 	bic.w	r3, r3, #7
   2aad0:	ebad 0d03 	sub.w	sp, sp, r3
   2aad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2aad8:	2b02      	cmp	r3, #2
   2aada:	bf02      	ittt	eq
   2aadc:	6c7b      	ldreq	r3, [r7, #68]	; 0x44
   2aade:	f8d7 109c 	ldreq.w	r1, [r7, #156]	; 0x9c
   2aae2:	eb03 0381 	addeq.w	r3, r3, r1, lsl #2
   2aae6:	6e79      	ldr	r1, [r7, #100]	; 0x64
   2aae8:	e9cd 6104 	strd	r6, r1, [sp, #16]
   2aaec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   2aaee:	bf18      	it	ne
   2aaf0:	2300      	movne	r3, #0
   2aaf2:	aa14      	add	r2, sp, #80	; 0x50
   2aaf4:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2aaf8:	9301      	str	r3, [sp, #4]
   2aafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2aafc:	9300      	str	r3, [sp, #0]
   2aafe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2ab02:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
   2ab06:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
   2ab0a:	f8d3 c018 	ldr.w	ip, [r3, #24]
   2ab0e:	6c58      	ldr	r0, [r3, #68]	; 0x44
   2ab10:	f8d3 60e8 	ldr.w	r6, [r3, #232]	; 0xe8
   2ab14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2ab16:	910d      	str	r1, [sp, #52]	; 0x34
   2ab18:	eba4 040b 	sub.w	r4, r4, fp
   2ab1c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2ab20:	940a      	str	r4, [sp, #40]	; 0x28
   2ab22:	f103 044c 	add.w	r4, r3, #76	; 0x4c
   2ab26:	9206      	str	r2, [sp, #24]
   2ab28:	9109      	str	r1, [sp, #36]	; 0x24
   2ab2a:	9012      	str	r0, [sp, #72]	; 0x48
   2ab2c:	950e      	str	r5, [sp, #56]	; 0x38
   2ab2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ab32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   2ab36:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   2ab3a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   2ab3e:	e9cd ce10 	strd	ip, lr, [sp, #64]	; 0x40
   2ab42:	940f      	str	r4, [sp, #60]	; 0x3c
   2ab44:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
   2ab48:	940b      	str	r4, [sp, #44]	; 0x2c
   2ab4a:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
   2ab4e:	9608      	str	r6, [sp, #32]
   2ab50:	2001      	movs	r0, #1
   2ab52:	9407      	str	r4, [sp, #28]
   2ab54:	f007 fd64 	bl	32620 <quant_all_bands>
   2ab58:	f1bb 0f00 	cmp.w	fp, #0
   2ab5c:	d00a      	beq.n	2ab74 <celt_encode_with_ec+0x1418>
   2ab5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2ab62:	6f59      	ldr	r1, [r3, #116]	; 0x74
   2ab64:	2201      	movs	r2, #1
   2ab66:	4291      	cmp	r1, r2
   2ab68:	bfcc      	ite	gt
   2ab6a:	2100      	movgt	r1, #0
   2ab6c:	2101      	movle	r1, #1
   2ab6e:	4650      	mov	r0, sl
   2ab70:	f001 ffd8 	bl	2cb24 <ec_enc_bits>
   2ab74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2ab78:	f8da 201c 	ldr.w	r2, [sl, #28]
   2ab7c:	f8d7 50b8 	ldr.w	r5, [r7, #184]	; 0xb8
   2ab80:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2ab82:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2ab86:	e9cd a304 	strd	sl, r3, [sp, #16]
   2ab8a:	fab2 f282 	clz	r2, r2
   2ab8e:	f8da 3014 	ldr.w	r3, [sl, #20]
   2ab92:	f8cd 8004 	str.w	r8, [sp, #4]
   2ab96:	f1c2 0220 	rsb	r2, r2, #32
   2ab9a:	1a9b      	subs	r3, r3, r2
   2ab9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ab9e:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
   2aba2:	f8cd 9008 	str.w	r9, [sp, #8]
   2aba6:	1ad3      	subs	r3, r2, r3
   2aba8:	9303      	str	r3, [sp, #12]
   2abaa:	4642      	mov	r2, r8
   2abac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2abb0:	9600      	str	r6, [sp, #0]
   2abb2:	4629      	mov	r1, r5
   2abb4:	f003 fdd2 	bl	2e75c <quant_energy_finalise>
   2abb8:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
   2abbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   2abbe:	2100      	movs	r1, #0
   2abc0:	4648      	mov	r0, r9
   2abc2:	f7e1 fbcb 	bl	c35c <memset>
   2abc6:	4545      	cmp	r5, r8
   2abc8:	462a      	mov	r2, r5
   2abca:	4640      	mov	r0, r8
   2abcc:	da31      	bge.n	2ac32 <celt_encode_with_ec+0x14d6>
   2abce:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   2abd0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   2abd2:	f8d7 c074 	ldr.w	ip, [r7, #116]	; 0x74
   2abd6:	1a65      	subs	r5, r4, r1
   2abd8:	464c      	mov	r4, r9
   2abda:	442c      	add	r4, r5
   2abdc:	4625      	mov	r5, r4
   2abde:	1bad      	subs	r5, r5, r6
   2abe0:	1a14      	subs	r4, r2, r0
   2abe2:	1871      	adds	r1, r6, r1
   2abe4:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
   2abe8:	00a4      	lsls	r4, r4, #2
   2abea:	2000      	movs	r0, #0
   2abec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   2abf0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
   2abf4:	190b      	adds	r3, r1, r4
   2abf6:	194a      	adds	r2, r1, r5
   2abf8:	e00a      	b.n	2ac10 <celt_encode_with_ec+0x14b4>
   2abfa:	eef4 7a47 	vcmp.f32	s15, s14
   2abfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ac02:	bf48      	it	mi
   2ac04:	eef0 7a47 	vmovmi.f32	s15, s14
   2ac08:	4299      	cmp	r1, r3
   2ac0a:	ece2 7a01 	vstmia	r2!, {s15}
   2ac0e:	d00c      	beq.n	2ac2a <celt_encode_with_ec+0x14ce>
   2ac10:	ecf3 7a01 	vldmia	r3!, {s15}
   2ac14:	eef4 7ae6 	vcmpe.f32	s15, s13
   2ac18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ac1c:	dded      	ble.n	2abfa <celt_encode_with_ec+0x149e>
   2ac1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   2ac22:	4299      	cmp	r1, r3
   2ac24:	ece2 7a01 	vstmia	r2!, {s15}
   2ac28:	d1f2      	bne.n	2ac10 <celt_encode_with_ec+0x14b4>
   2ac2a:	3001      	adds	r0, #1
   2ac2c:	4286      	cmp	r6, r0
   2ac2e:	4461      	add	r1, ip
   2ac30:	dce0      	bgt.n	2abf4 <celt_encode_with_ec+0x1498>
   2ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ac34:	b163      	cbz	r3, 2ac50 <celt_encode_with_ec+0x14f4>
   2ac36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ac38:	2b00      	cmp	r3, #0
   2ac3a:	dd09      	ble.n	2ac50 <celt_encode_with_ec+0x14f4>
   2ac3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2ac3e:	4acd      	ldr	r2, [pc, #820]	; (2af74 <celt_encode_with_ec+0x1818>)
   2ac40:	4619      	mov	r1, r3
   2ac42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2ac46:	4419      	add	r1, r3
   2ac48:	f843 2b04 	str.w	r2, [r3], #4
   2ac4c:	428b      	cmp	r3, r1
   2ac4e:	d1fb      	bne.n	2ac48 <celt_encode_with_ec+0x14ec>
   2ac50:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2ac54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2ac58:	668b      	str	r3, [r1, #104]	; 0x68
   2ac5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2ac5e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
   2ac62:	6d38      	ldr	r0, [r7, #80]	; 0x50
   2ac64:	6708      	str	r0, [r1, #112]	; 0x70
   2ac66:	2b02      	cmp	r3, #2
   2ac68:	66ca      	str	r2, [r1, #108]	; 0x6c
   2ac6a:	f000 8189 	beq.w	2af80 <celt_encode_with_ec+0x1824>
   2ac6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2ac72:	2b00      	cmp	r3, #0
   2ac74:	f000 8219 	beq.w	2b0aa <celt_encode_with_ec+0x194e>
   2ac78:	693b      	ldr	r3, [r7, #16]
   2ac7a:	2b00      	cmp	r3, #0
   2ac7c:	dd12      	ble.n	2aca4 <celt_encode_with_ec+0x1548>
   2ac7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac80:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   2ac84:	ecb3 7a01 	vldmia	r3!, {s14}
   2ac88:	ecf2 7a01 	vldmia	r2!, {s15}
   2ac8c:	eef4 7ac7 	vcmpe.f32	s15, s14
   2ac90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ac94:	f340 80f1 	ble.w	2ae7a <celt_encode_with_ec+0x171e>
   2ac98:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   2ac9c:	ed03 7a01 	vstr	s14, [r3, #-4]
   2aca0:	4299      	cmp	r1, r3
   2aca2:	d1ef      	bne.n	2ac84 <celt_encode_with_ec+0x1528>
   2aca4:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
   2aca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2acaa:	f8c7 a1c4 	str.w	sl, [r7, #452]	; 0x1c4
   2acae:	e9d7 ea1d 	ldrd	lr, sl, [r7, #116]	; 0x74
   2acb2:	4423      	add	r3, r4
   2acb4:	6a39      	ldr	r1, [r7, #32]
   2acb6:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
   2acba:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
   2acbc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2af74 <celt_encode_with_ec+0x1818>
   2acc0:	f04f 0900 	mov.w	r9, #0
   2acc4:	4618      	mov	r0, r3
   2acc6:	f04f 0c00 	mov.w	ip, #0
   2acca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2acce:	2b00      	cmp	r3, #0
   2acd0:	dd0a      	ble.n	2ace8 <celt_encode_with_ec+0x158c>
   2acd2:	46ab      	mov	fp, r5
   2acd4:	4632      	mov	r2, r6
   2acd6:	4623      	mov	r3, r4
   2acd8:	f843 9b04 	str.w	r9, [r3], #4
   2acdc:	4283      	cmp	r3, r0
   2acde:	f842 8b04 	str.w	r8, [r2], #4
   2ace2:	f84b 8b04 	str.w	r8, [fp], #4
   2ace6:	d1f7      	bne.n	2acd8 <celt_encode_with_ec+0x157c>
   2ace8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2acec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2acf0:	4293      	cmp	r3, r2
   2acf2:	dd0d      	ble.n	2ad10 <celt_encode_with_ec+0x15b4>
   2acf4:	eb0a 0304 	add.w	r3, sl, r4
   2acf8:	eb0a 0b06 	add.w	fp, sl, r6
   2acfc:	eb0a 0205 	add.w	r2, sl, r5
   2ad00:	f843 9b04 	str.w	r9, [r3], #4
   2ad04:	428b      	cmp	r3, r1
   2ad06:	f84b 8b04 	str.w	r8, [fp], #4
   2ad0a:	f842 8b04 	str.w	r8, [r2], #4
   2ad0e:	d1f7      	bne.n	2ad00 <celt_encode_with_ec+0x15a4>
   2ad10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2ad14:	f10c 0c01 	add.w	ip, ip, #1
   2ad18:	4563      	cmp	r3, ip
   2ad1a:	4471      	add	r1, lr
   2ad1c:	4474      	add	r4, lr
   2ad1e:	4476      	add	r6, lr
   2ad20:	4475      	add	r5, lr
   2ad22:	4470      	add	r0, lr
   2ad24:	dcd1      	bgt.n	2acca <celt_encode_with_ec+0x156e>
   2ad26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ad28:	f8d7 a1c4 	ldr.w	sl, [r7, #452]	; 0x1c4
   2ad2c:	b123      	cbz	r3, 2ad38 <celt_encode_with_ec+0x15dc>
   2ad2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2ad32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   2ad34:	3301      	adds	r3, #1
   2ad36:	673b      	str	r3, [r7, #112]	; 0x70
   2ad38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2ad3c:	f8da 301c 	ldr.w	r3, [sl, #28]
   2ad40:	6f38      	ldr	r0, [r7, #112]	; 0x70
   2ad42:	6750      	str	r0, [r2, #116]	; 0x74
   2ad44:	64d3      	str	r3, [r2, #76]	; 0x4c
   2ad46:	4650      	mov	r0, sl
   2ad48:	f001 ff30 	bl	2cbac <ec_enc_done>
   2ad4c:	f7fb ff00 	bl	26b50 <restore_stack>
   2ad50:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   2ad54:	2b00      	cmp	r3, #0
   2ad56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   2ad5a:	bf18      	it	ne
   2ad5c:	f06f 0302 	mvnne.w	r3, #2
   2ad60:	4618      	mov	r0, r3
   2ad62:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
   2ad66:	46bd      	mov	sp, r7
   2ad68:	ecbd 8b04 	vpop	{d8-d9}
   2ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ad70:	6f79      	ldr	r1, [r7, #116]	; 0x74
   2ad72:	3107      	adds	r1, #7
   2ad74:	f021 0407 	bic.w	r4, r1, #7
   2ad78:	ebad 0d04 	sub.w	sp, sp, r4
   2ad7c:	6379      	str	r1, [r7, #52]	; 0x34
   2ad7e:	a914      	add	r1, sp, #80	; 0x50
   2ad80:	ebad 0d04 	sub.w	sp, sp, r4
   2ad84:	ae14      	add	r6, sp, #80	; 0x50
   2ad86:	ebad 0d04 	sub.w	sp, sp, r4
   2ad8a:	65f9      	str	r1, [r7, #92]	; 0x5c
   2ad8c:	960e      	str	r6, [sp, #56]	; 0x38
   2ad8e:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2ad90:	9206      	str	r2, [sp, #24]
   2ad92:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
   2ad96:	697d      	ldr	r5, [r7, #20]
   2ad98:	950b      	str	r5, [sp, #44]	; 0x2c
   2ad9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2ad9e:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
   2ada2:	950a      	str	r5, [sp, #40]	; 0x28
   2ada4:	a914      	add	r1, sp, #80	; 0x50
   2ada6:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2adaa:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
   2adae:	e9cd 3204 	strd	r3, r2, [sp, #16]
   2adb2:	9509      	str	r5, [sp, #36]	; 0x24
   2adb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2adb6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2adba:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   2adbc:	9302      	str	r3, [sp, #8]
   2adbe:	9201      	str	r2, [sp, #4]
   2adc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2adc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2adc8:	f8cd c00c 	str.w	ip, [sp, #12]
   2adcc:	e9cd 0507 	strd	r0, r5, [sp, #28]
   2add0:	930f      	str	r3, [sp, #60]	; 0x3c
   2add2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2add6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2adda:	9200      	str	r2, [sp, #0]
   2addc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2ade0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2ade2:	f7fd fb45 	bl	28470 <dynalloc_analysis.isra.5>
   2ade6:	ebad 0d04 	sub.w	sp, sp, r4
   2adea:	ab14      	add	r3, sp, #80	; 0x50
   2adec:	eef0 9a40 	vmov.f32	s19, s0
   2adf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   2adf4:	f8d7 b0ec 	ldr.w	fp, [r7, #236]	; 0xec
   2adf8:	f1bb 0f00 	cmp.w	fp, #0
   2adfc:	d020      	beq.n	2ae40 <celt_encode_with_ec+0x16e4>
   2adfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ae02:	2b00      	cmp	r3, #0
   2ae04:	f77f aac5 	ble.w	2a392 <celt_encode_with_ec+0xc36>
   2ae08:	2b01      	cmp	r3, #1
   2ae0a:	f001 81ae 	beq.w	2c16a <celt_encode_with_ec+0x2a0e>
   2ae0e:	085a      	lsrs	r2, r3, #1
   2ae10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   2ae14:	2001      	movs	r0, #1
   2ae16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   2ae1a:	2101      	movs	r1, #1
   2ae1c:	e8e3 0102 	strd	r0, r1, [r3], #8
   2ae20:	429a      	cmp	r2, r3
   2ae22:	d1fb      	bne.n	2ae1c <celt_encode_with_ec+0x16c0>
   2ae24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ae28:	f023 0201 	bic.w	r2, r3, #1
   2ae2c:	4293      	cmp	r3, r2
   2ae2e:	f43f aab0 	beq.w	2a392 <celt_encode_with_ec+0xc36>
   2ae32:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2ae36:	2301      	movs	r3, #1
   2ae38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   2ae3c:	f7ff baa9 	b.w	2a392 <celt_encode_with_ec+0xc36>
   2ae40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   2ae44:	2b0e      	cmp	r3, #14
   2ae46:	f300 8346 	bgt.w	2b4d6 <celt_encode_with_ec+0x1d7a>
   2ae4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2ae4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   2ae52:	2b02      	cmp	r3, #2
   2ae54:	f000 833f 	beq.w	2b4d6 <celt_encode_with_ec+0x1d7a>
   2ae58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ae5c:	2b00      	cmp	r3, #0
   2ae5e:	f341 8214 	ble.w	2c28a <celt_encode_with_ec+0x2b2e>
   2ae62:	4659      	mov	r1, fp
   2ae64:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ae66:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   2ae6a:	f7e1 fa77 	bl	c35c <memset>
   2ae6e:	f8d7 b094 	ldr.w	fp, [r7, #148]	; 0x94
   2ae72:	f7ff ba90 	b.w	2a396 <celt_encode_with_ec+0xc3a>
   2ae76:	46b3      	mov	fp, r6
   2ae78:	e46e      	b.n	2a758 <celt_encode_with_ec+0xffc>
   2ae7a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   2ae7e:	ed43 7a01 	vstr	s15, [r3, #-4]
   2ae82:	4299      	cmp	r1, r3
   2ae84:	f47f aefe 	bne.w	2ac84 <celt_encode_with_ec+0x1528>
   2ae88:	e70c      	b.n	2aca4 <celt_encode_with_ec+0x1548>
   2ae8a:	f04f 0b00 	mov.w	fp, #0
   2ae8e:	f7ff bb7a 	b.w	2a586 <celt_encode_with_ec+0xe2a>
   2ae92:	f04f 0800 	mov.w	r8, #0
   2ae96:	e468      	b.n	2a76a <celt_encode_with_ec+0x100e>
   2ae98:	4693      	mov	fp, r2
   2ae9a:	e5c5      	b.n	2aa28 <celt_encode_with_ec+0x12cc>
   2ae9c:	2505      	movs	r5, #5
   2ae9e:	e495      	b.n	2a7cc <celt_encode_with_ec+0x1070>
   2aea0:	4603      	mov	r3, r0
   2aea2:	460a      	mov	r2, r1
   2aea4:	e5ff      	b.n	2aaa6 <celt_encode_with_ec+0x134a>
   2aea6:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2aeaa:	2002      	movs	r0, #2
   2aeac:	4602      	mov	r2, r0
   2aeae:	2d00      	cmp	r5, #0
   2aeb0:	f47f aafd 	bne.w	2a4ae <celt_encode_with_ec+0xd52>
   2aeb4:	e9d7 052e 	ldrd	r0, r5, [r7, #184]	; 0xb8
   2aeb8:	42a8      	cmp	r0, r5
   2aeba:	f6bf ab8e 	bge.w	2a5da <celt_encode_with_ec+0xe7e>
   2aebe:	4625      	mov	r5, r4
   2aec0:	f8d7 80ac 	ldr.w	r8, [r7, #172]	; 0xac
   2aec4:	f7ff bb05 	b.w	2a4d2 <celt_encode_with_ec+0xd76>
   2aec8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2aecc:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
   2aed0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2aed2:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
   2aed6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   2aed8:	6b48      	ldr	r0, [r1, #52]	; 0x34
   2aeda:	6c0d      	ldr	r5, [r1, #64]	; 0x40
   2aedc:	2c00      	cmp	r4, #0
   2aede:	f47f af47 	bne.w	2ad70 <celt_encode_with_ec+0x1614>
   2aee2:	6989      	ldr	r1, [r1, #24]
   2aee4:	2901      	cmp	r1, #1
   2aee6:	dd02      	ble.n	2aeee <celt_encode_with_ec+0x1792>
   2aee8:	2d00      	cmp	r5, #0
   2aeea:	f000 84cf 	beq.w	2b88c <celt_encode_with_ec+0x2130>
   2aeee:	6f79      	ldr	r1, [r7, #116]	; 0x74
   2aef0:	3107      	adds	r1, #7
   2aef2:	f021 0407 	bic.w	r4, r1, #7
   2aef6:	ebad 0d04 	sub.w	sp, sp, r4
   2aefa:	6379      	str	r1, [r7, #52]	; 0x34
   2aefc:	a914      	add	r1, sp, #80	; 0x50
   2aefe:	ebad 0d04 	sub.w	sp, sp, r4
   2af02:	ae14      	add	r6, sp, #80	; 0x50
   2af04:	ebad 0d04 	sub.w	sp, sp, r4
   2af08:	65f9      	str	r1, [r7, #92]	; 0x5c
   2af0a:	960e      	str	r6, [sp, #56]	; 0x38
   2af0c:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2af0e:	9206      	str	r2, [sp, #24]
   2af10:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
   2af14:	697d      	ldr	r5, [r7, #20]
   2af16:	950b      	str	r5, [sp, #44]	; 0x2c
   2af18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2af1c:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
   2af20:	950a      	str	r5, [sp, #40]	; 0x28
   2af22:	a914      	add	r1, sp, #80	; 0x50
   2af24:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2af28:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
   2af2c:	e9cd 3204 	strd	r3, r2, [sp, #16]
   2af30:	9509      	str	r5, [sp, #36]	; 0x24
   2af32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2af34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2af38:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   2af3a:	9302      	str	r3, [sp, #8]
   2af3c:	9201      	str	r2, [sp, #4]
   2af3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2af42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2af46:	f8cd c00c 	str.w	ip, [sp, #12]
   2af4a:	9200      	str	r2, [sp, #0]
   2af4c:	930f      	str	r3, [sp, #60]	; 0x3c
   2af4e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2af52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2af56:	e9cd 0507 	strd	r0, r5, [sp, #28]
   2af5a:	2300      	movs	r3, #0
   2af5c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2af5e:	f7fd fa87 	bl	28470 <dynalloc_analysis.isra.5>
   2af62:	ebad 0d04 	sub.w	sp, sp, r4
   2af66:	ab14      	add	r3, sp, #80	; 0x50
   2af68:	eef0 9a40 	vmov.f32	s19, s0
   2af6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   2af70:	f7ff b9ec 	b.w	2a34c <celt_encode_with_ec+0xbf0>
   2af74:	c1e00000 	.word	0xc1e00000
   2af78:	26901d7d 	.word	0x26901d7d
   2af7c:	3f3504f7 	.word	0x3f3504f7
   2af80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2af84:	2b01      	cmp	r3, #1
   2af86:	f47f ae72 	bne.w	2ac6e <celt_encode_with_ec+0x1512>
   2af8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2af8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   2af90:	6a38      	ldr	r0, [r7, #32]
   2af92:	f7e1 f8e5 	bl	c160 <memcpy>
   2af96:	e66a      	b.n	2ac6e <celt_encode_with_ec+0x1512>
   2af98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2af9c:	2b00      	cmp	r3, #0
   2af9e:	d061      	beq.n	2b064 <celt_encode_with_ec+0x1908>
   2afa0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   2afa4:	ed5f 5a0c 	vldr	s11, [pc, #-48]	; 2af78 <celt_encode_with_ec+0x181c>
   2afa8:	6a15      	ldr	r5, [r2, #32]
   2afaa:	f8d7 e09c 	ldr.w	lr, [r7, #156]	; 0x9c
   2afae:	6c7e      	ldr	r6, [r7, #68]	; 0x44
   2afb0:	eeb0 5a65 	vmov.f32	s10, s11
   2afb4:	4628      	mov	r0, r5
   2afb6:	f105 041a 	add.w	r4, r5, #26
   2afba:	469c      	mov	ip, r3
   2afbc:	f9b0 3000 	ldrsh.w	r3, [r0]
   2afc0:	f930 1f02 	ldrsh.w	r1, [r0, #2]!
   2afc4:	fa03 f30c 	lsl.w	r3, r3, ip
   2afc8:	fa01 f10c 	lsl.w	r1, r1, ip
   2afcc:	428b      	cmp	r3, r1
   2afce:	da21      	bge.n	2b014 <celt_encode_with_ec+0x18b8>
   2afd0:	eb03 020e 	add.w	r2, r3, lr
   2afd4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   2afd8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   2afdc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2afe0:	ecf3 7a01 	vldmia	r3!, {s15}
   2afe4:	ecf2 6a01 	vldmia	r2!, {s13}
   2afe8:	eeb0 6ae7 	vabs.f32	s12, s15
   2afec:	ee37 7aa6 	vadd.f32	s14, s15, s13
   2aff0:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2aff4:	eeb0 7ac7 	vabs.f32	s14, s14
   2aff8:	eef0 7ae7 	vabs.f32	s15, s15
   2affc:	eef0 6ae6 	vabs.f32	s13, s13
   2b000:	ee77 7a27 	vadd.f32	s15, s14, s15
   2b004:	ee76 6a26 	vadd.f32	s13, s12, s13
   2b008:	4299      	cmp	r1, r3
   2b00a:	ee75 5aa7 	vadd.f32	s11, s11, s15
   2b00e:	ee35 5a26 	vadd.f32	s10, s10, s13
   2b012:	d1e5      	bne.n	2afe0 <celt_encode_with_ec+0x1884>
   2b014:	4284      	cmp	r4, r0
   2b016:	d1d1      	bne.n	2afbc <celt_encode_with_ec+0x1860>
   2b018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   2b01c:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
   2b020:	ed5f 7a2a 	vldr	s15, [pc, #-168]	; 2af7c <celt_encode_with_ec+0x1820>
   2b024:	2a01      	cmp	r2, #1
   2b026:	f102 0201 	add.w	r2, r2, #1
   2b02a:	fa03 f302 	lsl.w	r3, r3, r2
   2b02e:	bf14      	ite	ne
   2b030:	220d      	movne	r2, #13
   2b032:	2205      	moveq	r2, #5
   2b034:	441a      	add	r2, r3
   2b036:	ee65 5aa7 	vmul.f32	s11, s11, s15
   2b03a:	ee07 2a10 	vmov	s14, r2
   2b03e:	ee07 3a90 	vmov	s15, r3
   2b042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2b046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b04a:	ee67 5a25 	vmul.f32	s11, s14, s11
   2b04e:	ee27 5a85 	vmul.f32	s10, s15, s10
   2b052:	eef4 5ac5 	vcmpe.f32	s11, s10
   2b056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b05a:	bfcc      	ite	gt
   2b05c:	2301      	movgt	r3, #1
   2b05e:	2300      	movle	r3, #0
   2b060:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   2b064:	68ba      	ldr	r2, [r7, #8]
   2b066:	4cde      	ldr	r4, [pc, #888]	; (2b3e0 <celt_encode_with_ec+0x1c84>)
   2b068:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
   2b06c:	49dd      	ldr	r1, [pc, #884]	; (2b3e4 <celt_encode_with_ec+0x1c88>)
   2b06e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
   2b072:	48dd      	ldr	r0, [pc, #884]	; (2b3e8 <celt_encode_with_ec+0x1c8c>)
   2b074:	4616      	mov	r6, r2
   2b076:	fb84 6406 	smull	r6, r4, r4, r6
   2b07a:	17d2      	asrs	r2, r2, #31
   2b07c:	ebc2 12a4 	rsb	r2, r2, r4, asr #6
   2b080:	ee00 2a10 	vmov	s0, r2
   2b084:	2215      	movs	r2, #21
   2b086:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   2b08a:	f007 f8b5 	bl	321f8 <hysteresis_decision>
   2b08e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2b092:	4298      	cmp	r0, r3
   2b094:	bfb8      	it	lt
   2b096:	4618      	movlt	r0, r3
   2b098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2b09c:	4298      	cmp	r0, r3
   2b09e:	bfa8      	it	ge
   2b0a0:	4618      	movge	r0, r3
   2b0a2:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
   2b0a6:	f7ff bb75 	b.w	2a794 <celt_encode_with_ec+0x1038>
   2b0aa:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   2b0ac:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   2b0ae:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
   2b0b2:	462a      	mov	r2, r5
   2b0b4:	4621      	mov	r1, r4
   2b0b6:	f7e1 f853 	bl	c160 <memcpy>
   2b0ba:	462a      	mov	r2, r5
   2b0bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   2b0c0:	4620      	mov	r0, r4
   2b0c2:	f7e1 f84d 	bl	c160 <memcpy>
   2b0c6:	e5ed      	b.n	2aca4 <celt_encode_with_ec+0x1548>
   2b0c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2b0ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2b0cc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
   2b0d0:	f7e1 f846 	bl	c160 <memcpy>
   2b0d4:	f7ff b89d 	b.w	2a212 <celt_encode_with_ec+0xab6>
   2b0d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2b0dc:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   2b0e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2b0e2:	3204      	adds	r2, #4
   2b0e4:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
   2b0e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2b0ec:	2800      	cmp	r0, #0
   2b0ee:	f040 8195 	bne.w	2b41c <celt_encode_with_ec+0x1cc0>
   2b0f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b0f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   2b0fa:	2b63      	cmp	r3, #99	; 0x63
   2b0fc:	f340 81af 	ble.w	2b45e <celt_encode_with_ec+0x1d02>
   2b100:	2b64      	cmp	r3, #100	; 0x64
   2b102:	d003      	beq.n	2b10c <celt_encode_with_ec+0x19b0>
   2b104:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2b106:	2390      	movs	r3, #144	; 0x90
   2b108:	410b      	asrs	r3, r1
   2b10a:	1ad2      	subs	r2, r2, r3
   2b10c:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
   2b110:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 2b3ec <celt_encode_with_ec+0x1c90>
   2b114:	eddf 6ab6 	vldr	s13, [pc, #728]	; 2b3f0 <celt_encode_with_ec+0x1c94>
   2b118:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   2b11c:	ee77 7a67 	vsub.f32	s15, s14, s15
   2b120:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2b124:	ee67 7a86 	vmul.f32	s15, s15, s12
   2b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b12c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2b130:	ee17 3a90 	vmov	r3, s15
   2b134:	4413      	add	r3, r2
   2b136:	461a      	mov	r2, r3
   2b138:	dd04      	ble.n	2b144 <celt_encode_with_ec+0x19e8>
   2b13a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   2b13e:	bfb8      	it	lt
   2b140:	f44f 72c8 	movlt.w	r2, #400	; 0x190
   2b144:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
   2b148:	6879      	ldr	r1, [r7, #4]
   2b14a:	4623      	mov	r3, r4
   2b14c:	444b      	add	r3, r9
   2b14e:	4449      	add	r1, r9
   2b150:	333f      	adds	r3, #63	; 0x3f
   2b152:	119b      	asrs	r3, r3, #6
   2b154:	f201 1167 	addw	r1, r1, #359	; 0x167
   2b158:	1189      	asrs	r1, r1, #6
   2b15a:	3302      	adds	r3, #2
   2b15c:	428b      	cmp	r3, r1
   2b15e:	bfb8      	it	lt
   2b160:	460b      	movlt	r3, r1
   2b162:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2b164:	4422      	add	r2, r4
   2b166:	2900      	cmp	r1, #0
   2b168:	f47f abec 	bne.w	2a944 <celt_encode_with_ec+0x11e8>
   2b16c:	f102 0820 	add.w	r8, r2, #32
   2b170:	ea4f 18a8 	mov.w	r8, r8, asr #6
   2b174:	4543      	cmp	r3, r8
   2b176:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
   2b17a:	bfb8      	it	lt
   2b17c:	4643      	movlt	r3, r8
   2b17e:	428b      	cmp	r3, r1
   2b180:	bfa8      	it	ge
   2b182:	460b      	movge	r3, r1
   2b184:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2b188:	f8d1 10dc 	ldr.w	r1, [r1, #220]	; 0xdc
   2b18c:	4698      	mov	r8, r3
   2b18e:	f240 34c9 	movw	r4, #969	; 0x3c9
   2b192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2b194:	42a1      	cmp	r1, r4
   2b196:	eba2 0303 	sub.w	r3, r2, r3
   2b19a:	ea4f 1288 	mov.w	r2, r8, lsl #6
   2b19e:	f73f abe0 	bgt.w	2a962 <celt_encode_with_ec+0x1206>
   2b1a2:	f101 0615 	add.w	r6, r1, #21
   2b1a6:	ee07 6a90 	vmov	s15, r6
   2b1aa:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
   2b1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b1b2:	3101      	adds	r1, #1
   2b1b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2b1b8:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
   2b1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   2b1c0:	f7ff bbd1 	b.w	2a966 <celt_encode_with_ec+0x120a>
   2b1c4:	3007      	adds	r0, #7
   2b1c6:	f020 0307 	bic.w	r3, r0, #7
   2b1ca:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
   2b1ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   2b1d0:	3007      	adds	r0, #7
   2b1d2:	2c00      	cmp	r4, #0
   2b1d4:	f000 8131 	beq.w	2b43a <celt_encode_with_ec+0x1cde>
   2b1d8:	ebad 0d03 	sub.w	sp, sp, r3
   2b1dc:	f020 0307 	bic.w	r3, r0, #7
   2b1e0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   2b1e4:	ebad 0d03 	sub.w	sp, sp, r3
   2b1e8:	a814      	add	r0, sp, #80	; 0x50
   2b1ea:	66f8      	str	r0, [r7, #108]	; 0x6c
   2b1ec:	ebad 0d03 	sub.w	sp, sp, r3
   2b1f0:	69f8      	ldr	r0, [r7, #28]
   2b1f2:	ab14      	add	r3, sp, #80	; 0x50
   2b1f4:	66bb      	str	r3, [r7, #104]	; 0x68
   2b1f6:	2800      	cmp	r0, #0
   2b1f8:	f001 80bc 	beq.w	2c374 <celt_encode_with_ec+0x2c18>
   2b1fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b200:	699b      	ldr	r3, [r3, #24]
   2b202:	2b07      	cmp	r3, #7
   2b204:	f300 82eb 	bgt.w	2b7de <celt_encode_with_ec+0x2082>
   2b208:	2300      	movs	r3, #0
   2b20a:	6678      	str	r0, [r7, #100]	; 0x64
   2b20c:	673b      	str	r3, [r7, #112]	; 0x70
   2b20e:	f7fe bd8b 	b.w	29d28 <celt_encode_with_ec+0x5cc>
   2b212:	6993      	ldr	r3, [r2, #24]
   2b214:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   2b218:	2a00      	cmp	r2, #0
   2b21a:	f000 8163 	beq.w	2b4e4 <celt_encode_with_ec+0x1d88>
   2b21e:	2b00      	cmp	r3, #0
   2b220:	f000 8168 	beq.w	2b4f4 <celt_encode_with_ec+0x1d98>
   2b224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   2b228:	2b00      	cmp	r3, #0
   2b22a:	f000 85b0 	beq.w	2bd8e <celt_encode_with_ec+0x2632>
   2b22e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b232:	2102      	movs	r1, #2
   2b234:	6519      	str	r1, [r3, #80]	; 0x50
   2b236:	f7ff b9de 	b.w	2a5f6 <celt_encode_with_ec+0xe9a>
   2b23a:	2308      	movs	r3, #8
   2b23c:	f7ff b9ef 	b.w	2a61e <celt_encode_with_ec+0xec2>
   2b240:	ed9f 6a75 	vldr	s12, [pc, #468]	; 2b418 <celt_encode_with_ec+0x1cbc>
   2b244:	f7fe be82 	b.w	29f4c <celt_encode_with_ec+0x7f0>
   2b248:	eef0 8a47 	vmov.f32	s17, s14
   2b24c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 2b3f4 <celt_encode_with_ec+0x1c98>
   2b250:	2300      	movs	r3, #0
   2b252:	ee77 7a87 	vadd.f32	s15, s15, s14
   2b256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   2b25a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b25e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
   2b262:	f7fe bfd2 	b.w	2a20a <celt_encode_with_ec+0xaae>
   2b266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   2b26a:	eba3 0308 	sub.w	r3, r3, r8
   2b26e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   2b272:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   2b276:	f44f 73c8 	mov.w	r3, #400	; 0x190
   2b27a:	fb03 f302 	mul.w	r3, r3, r2
   2b27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b280:	4113      	asrs	r3, r2
   2b282:	1b9b      	subs	r3, r3, r6
   2b284:	60bb      	str	r3, [r7, #8]
   2b286:	f1ba 0f00 	cmp.w	sl, #0
   2b28a:	f000 8547 	beq.w	2bd1c <celt_encode_with_ec+0x25c0>
   2b28e:	2300      	movs	r3, #0
   2b290:	65bb      	str	r3, [r7, #88]	; 0x58
   2b292:	f7fe bb6b 	b.w	2996c <celt_encode_with_ec+0x210>
   2b296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b29a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2b29c:	2800      	cmp	r0, #0
   2b29e:	f47f aa84 	bne.w	2a7aa <celt_encode_with_ec+0x104e>
   2b2a2:	68ba      	ldr	r2, [r7, #8]
   2b2a4:	edd7 5a3a 	vldr	s11, [r7, #232]	; 0xe8
   2b2a8:	f5b2 4f7a 	cmp.w	r2, #64000	; 0xfa00
   2b2ac:	f2c0 855f 	blt.w	2bd6e <celt_encode_with_ec+0x2612>
   2b2b0:	4b51      	ldr	r3, [pc, #324]	; (2b3f8 <celt_encode_with_ec+0x1c9c>)
   2b2b2:	429a      	cmp	r2, r3
   2b2b4:	f300 8763 	bgt.w	2c17e <celt_encode_with_ec+0x2a22>
   2b2b8:	f5a2 437a 	sub.w	r3, r2, #64000	; 0xfa00
   2b2bc:	129b      	asrs	r3, r3, #10
   2b2be:	ee07 3a90 	vmov	s15, r3
   2b2c2:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
   2b2c6:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
   2b2ca:	ee37 5a85 	vadd.f32	s10, s15, s10
   2b2ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2b2d2:	2b02      	cmp	r3, #2
   2b2d4:	f000 861c 	beq.w	2bf10 <celt_encode_with_ec+0x27b4>
   2b2d8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 2b418 <celt_encode_with_ec+0x1cbc>
   2b2dc:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
   2b2e0:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
   2b2e4:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   2b2e8:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
   2b2ec:	6abd      	ldr	r5, [r7, #40]	; 0x28
   2b2ee:	2d00      	cmp	r5, #0
   2b2f0:	dd13      	ble.n	2b31a <celt_encode_with_ec+0x1bbe>
   2b2f2:	68b3      	ldr	r3, [r6, #8]
   2b2f4:	fb03 f300 	mul.w	r3, r3, r0
   2b2f8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   2b2fc:	f1c1 0302 	rsb	r3, r1, #2
   2b300:	ee07 3a90 	vmov	s15, r3
   2b304:	ecf2 6a01 	vldmia	r2!, {s13}
   2b308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b30c:	3302      	adds	r3, #2
   2b30e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2b312:	4299      	cmp	r1, r3
   2b314:	ee37 7a27 	vadd.f32	s14, s14, s15
   2b318:	d1f2      	bne.n	2b300 <celt_encode_with_ec+0x1ba4>
   2b31a:	3001      	adds	r0, #1
   2b31c:	4284      	cmp	r4, r0
   2b31e:	dce6      	bgt.n	2b2ee <celt_encode_with_ec+0x1b92>
   2b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2b322:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2b326:	fb03 f302 	mul.w	r3, r3, r2
   2b32a:	ee06 3a90 	vmov	s13, r3
   2b32e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2b332:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   2b336:	eec7 7a26 	vdiv.f32	s15, s14, s13
   2b33a:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
   2b33e:	ee37 7aa4 	vadd.f32	s14, s15, s9
   2b342:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   2b346:	eec7 7a06 	vdiv.f32	s15, s14, s12
   2b34a:	eef4 7ae6 	vcmpe.f32	s15, s13
   2b34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b352:	f300 85c7 	bgt.w	2bee4 <celt_encode_with_ec+0x2788>
   2b356:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
   2b35a:	eef4 7a47 	vcmp.f32	s15, s14
   2b35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b362:	bf48      	it	mi
   2b364:	eef0 7a47 	vmovmi.f32	s15, s14
   2b368:	ee75 7a67 	vsub.f32	s15, s10, s15
   2b36c:	ee75 5aa5 	vadd.f32	s11, s11, s11
   2b370:	ee77 7ac8 	vsub.f32	s15, s15, s16
   2b374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2b378:	ee77 7ae5 	vsub.f32	s15, s15, s11
   2b37c:	ee77 7a87 	vadd.f32	s15, s15, s14
   2b380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b388:	bf44      	itt	mi
   2b38a:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
   2b38e:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
   2b392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2b396:	ee17 5a90 	vmov	r5, s15
   2b39a:	2d0a      	cmp	r5, #10
   2b39c:	bfa8      	it	ge
   2b39e:	250a      	movge	r5, #10
   2b3a0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   2b3a4:	f7ff ba07 	b.w	2a7b6 <celt_encode_with_ec+0x105a>
   2b3a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2b3ac:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 2b418 <celt_encode_with_ec+0x1cbc>
   2b3b0:	009b      	lsls	r3, r3, #2
   2b3b2:	677b      	str	r3, [r7, #116]	; 0x74
   2b3b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2b3b8:	657b      	str	r3, [r7, #84]	; 0x54
   2b3ba:	eeb0 9a48 	vmov.f32	s18, s16
   2b3be:	eef0 8a48 	vmov.f32	s17, s16
   2b3c2:	f7fe bf22 	b.w	2a20a <celt_encode_with_ec+0xaae>
   2b3c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2b3ca:	6953      	ldr	r3, [r2, #20]
   2b3cc:	2b00      	cmp	r3, #0
   2b3ce:	f47e abe8 	bne.w	29ba2 <celt_encode_with_ec+0x446>
   2b3d2:	6993      	ldr	r3, [r2, #24]
   2b3d4:	2b04      	cmp	r3, #4
   2b3d6:	f77e abe4 	ble.w	29ba2 <celt_encode_with_ec+0x446>
   2b3da:	2001      	movs	r0, #1
   2b3dc:	f7fe bbe2 	b.w	29ba4 <celt_encode_with_ec+0x448>
   2b3e0:	10624dd3 	.word	0x10624dd3
   2b3e4:	0003d6d4 	.word	0x0003d6d4
   2b3e8:	0003d728 	.word	0x0003d728
   2b3ec:	43c80000 	.word	0x43c80000
   2b3f0:	3f333333 	.word	0x3f333333
   2b3f4:	bcf5c28f 	.word	0xbcf5c28f
   2b3f8:	0001387f 	.word	0x0001387f
   2b3fc:	3ca3d70a 	.word	0x3ca3d70a
   2b400:	3f4ccccd 	.word	0x3f4ccccd
   2b404:	3dcccccd 	.word	0x3dcccccd
   2b408:	3f666666 	.word	0x3f666666
   2b40c:	3cfdf3b6 	.word	0x3cfdf3b6
   2b410:	3e4ccccd 	.word	0x3e4ccccd
   2b414:	bcfdf3b6 	.word	0xbcfdf3b6
   2b418:	00000000 	.word	0x00000000
   2b41c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   2b424:	fa43 f30c 	asr.w	r3, r3, ip
   2b428:	441a      	add	r2, r3
   2b42a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b42e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   2b432:	2b63      	cmp	r3, #99	; 0x63
   2b434:	f73f ae64 	bgt.w	2b100 <celt_encode_with_ec+0x19a4>
   2b438:	e011      	b.n	2b45e <celt_encode_with_ec+0x1d02>
   2b43a:	ebad 0d03 	sub.w	sp, sp, r3
   2b43e:	f020 0307 	bic.w	r3, r0, #7
   2b442:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   2b446:	ebad 0d03 	sub.w	sp, sp, r3
   2b44a:	a814      	add	r0, sp, #80	; 0x50
   2b44c:	ebad 0d03 	sub.w	sp, sp, r3
   2b450:	ab14      	add	r3, sp, #80	; 0x50
   2b452:	66f8      	str	r0, [r7, #108]	; 0x6c
   2b454:	66bb      	str	r3, [r7, #104]	; 0x68
   2b456:	673c      	str	r4, [r7, #112]	; 0x70
   2b458:	667c      	str	r4, [r7, #100]	; 0x64
   2b45a:	f7fe bc65 	b.w	29d28 <celt_encode_with_ec+0x5cc>
   2b45e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2b460:	2360      	movs	r3, #96	; 0x60
   2b462:	410b      	asrs	r3, r1
   2b464:	441a      	add	r2, r3
   2b466:	e651      	b.n	2b10c <celt_encode_with_ec+0x19b0>
   2b468:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   2b46a:	431a      	orrs	r2, r3
   2b46c:	673a      	str	r2, [r7, #112]	; 0x70
   2b46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2b472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2b474:	4413      	add	r3, r2
   2b476:	623b      	str	r3, [r7, #32]
   2b478:	2203      	movs	r2, #3
   2b47a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   2b47e:	4650      	mov	r0, sl
   2b480:	f001 fa38 	bl	2c8f4 <ec_enc_bit_logp>
   2b484:	f7fe bef3 	b.w	2a26e <celt_encode_with_ec+0xb12>
   2b488:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b48c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   2b490:	fa43 f30c 	asr.w	r3, r3, ip
   2b494:	441a      	add	r2, r3
   2b496:	f7ff b9bd 	b.w	2a814 <celt_encode_with_ec+0x10b8>
   2b49a:	460b      	mov	r3, r1
   2b49c:	f107 00ec 	add.w	r0, r7, #236	; 0xec
   2b4a0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
   2b4a4:	9301      	str	r3, [sp, #4]
   2b4a6:	9002      	str	r0, [sp, #8]
   2b4a8:	9200      	str	r2, [sp, #0]
   2b4aa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2b4ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
   2b4b2:	e9d7 2029 	ldrd	r2, r0, [r7, #164]	; 0xa4
   2b4b6:	f7fc f87b 	bl	275b0 <transient_analysis>
   2b4ba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
   2b4be:	f7fe bbf4 	b.w	29caa <celt_encode_with_ec+0x54e>
   2b4c2:	3b08      	subs	r3, #8
   2b4c4:	f04f 0b08 	mov.w	fp, #8
   2b4c8:	f7ff baae 	b.w	2aa28 <celt_encode_with_ec+0x12cc>
   2b4cc:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 2b3fc <celt_encode_with_ec+0x1ca0>
   2b4d0:	ee28 7a87 	vmul.f32	s14, s17, s14
   2b4d4:	e6bc      	b.n	2b250 <celt_encode_with_ec+0x1af4>
   2b4d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2b4da:	2b00      	cmp	r3, #0
   2b4dc:	f73e af3b 	bgt.w	2a356 <celt_encode_with_ec+0xbfa>
   2b4e0:	f7fe bf59 	b.w	2a396 <celt_encode_with_ec+0xc3a>
   2b4e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2b4e6:	b912      	cbnz	r2, 2b4ee <celt_encode_with_ec+0x1d92>
   2b4e8:	2b02      	cmp	r3, #2
   2b4ea:	f300 8456 	bgt.w	2bd9a <celt_encode_with_ec+0x263e>
   2b4ee:	2b00      	cmp	r3, #0
   2b4f0:	f47f ae9d 	bne.w	2b22e <celt_encode_with_ec+0x1ad2>
   2b4f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2b4f8:	2300      	movs	r3, #0
   2b4fa:	6513      	str	r3, [r2, #80]	; 0x50
   2b4fc:	f7ff b87b 	b.w	2a5f6 <celt_encode_with_ec+0xe9a>
   2b500:	eb08 0306 	add.w	r3, r8, r6
   2b504:	4619      	mov	r1, r3
   2b506:	4650      	mov	r0, sl
   2b508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   2b50c:	f001 fb40 	bl	2cb90 <ec_enc_shrink>
   2b510:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
   2b514:	f7fe ba2a 	b.w	2996c <celt_encode_with_ec+0x210>
   2b518:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2b51c:	f8d1 10e8 	ldr.w	r1, [r1, #232]	; 0xe8
   2b520:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
   2b524:	4299      	cmp	r1, r3
   2b526:	f2c0 8414 	blt.w	2bd52 <celt_encode_with_ec+0x25f6>
   2b52a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
   2b52e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   2b532:	f8d7 60c4 	ldr.w	r6, [r7, #196]	; 0xc4
   2b536:	ed1f 6a4e 	vldr	s12, [pc, #-312]	; 2b400 <celt_encode_with_ec+0x1ca4>
   2b53a:	edd6 7a39 	vldr	s15, [r6, #228]	; 0xe4
   2b53e:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2b542:	4299      	cmp	r1, r3
   2b544:	bfa8      	it	ge
   2b546:	4619      	movge	r1, r3
   2b548:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   2b54c:	f93e 3011 	ldrsh.w	r3, [lr, r1, lsl #1]
   2b550:	40b3      	lsls	r3, r6
   2b552:	1a5b      	subs	r3, r3, r1
   2b554:	ee06 3a90 	vmov	s13, r3
   2b558:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
   2b55c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2b560:	440c      	add	r4, r1
   2b562:	ee66 6a86 	vmul.f32	s13, s13, s12
   2b566:	ee06 4a10 	vmov	s12, r4
   2b56a:	eeb8 5ac6 	vcvt.f32.s32	s10, s12
   2b56e:	eef4 7ae5 	vcmpe.f32	s15, s11
   2b572:	ee86 6a85 	vdiv.f32	s12, s13, s10
   2b576:	00db      	lsls	r3, r3, #3
   2b578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b57c:	bf4a      	itet	mi
   2b57e:	ed5f 6a5f 	vldrmi	s13, [pc, #-380]	; 2b404 <celt_encode_with_ec+0x1ca8>
   2b582:	ed5f 6a5f 	vldrpl	s13, [pc, #-380]	; 2b408 <celt_encode_with_ec+0x1cac>
   2b586:	ee77 6ae6 	vsubmi.f32	s13, s15, s13
   2b58a:	ee07 3a90 	vmov	s15, r3
   2b58e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b592:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2b596:	ee06 2a90 	vmov	s13, r2
   2b59a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2b59e:	ee66 6a86 	vmul.f32	s13, s13, s12
   2b5a2:	eef4 6ae7 	vcmpe.f32	s13, s15
   2b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b5aa:	bf4c      	ite	mi
   2b5ac:	eefd 7ae6 	vcvtmi.s32.f32	s15, s13
   2b5b0:	eefd 7ae7 	vcvtpl.s32.f32	s15, s15
   2b5b4:	ee17 3a90 	vmov	r3, s15
   2b5b8:	1ad1      	subs	r1, r2, r3
   2b5ba:	f7ff b94e 	b.w	2a85a <celt_encode_with_ec+0x10fe>
   2b5be:	eef4 6ac4 	vcmpe.f32	s13, s8
   2b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b5c6:	dc0d      	bgt.n	2b5e4 <celt_encode_with_ec+0x1e88>
   2b5c8:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
   2b5cc:	f7fe bc7c 	b.w	29ec8 <celt_encode_with_ec+0x76c>
   2b5d0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
   2b5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b5d8:	f77e ac54 	ble.w	29e84 <celt_encode_with_ec+0x728>
   2b5dc:	ee64 4aa3 	vmul.f32	s9, s9, s7
   2b5e0:	f7fe bc50 	b.w	29e84 <celt_encode_with_ec+0x728>
   2b5e4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
   2b5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b5ec:	f77e ac6c 	ble.w	29ec8 <celt_encode_with_ec+0x76c>
   2b5f0:	ee66 6aa3 	vmul.f32	s13, s13, s7
   2b5f4:	f7fe bc68 	b.w	29ec8 <celt_encode_with_ec+0x76c>
   2b5f8:	2300      	movs	r3, #0
   2b5fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2b5fc:	eb0e 0603 	add.w	r6, lr, r3
   2b600:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
   2b604:	eb0b 0443 	add.w	r4, fp, r3, lsl #1
   2b608:	ea6f 0c00 	mvn.w	ip, r0
   2b60c:	e023      	b.n	2b656 <celt_encode_with_ec+0x1efa>
   2b60e:	eef4 7ac4 	vcmpe.f32	s15, s8
   2b612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b616:	dc28      	bgt.n	2b66a <celt_encode_with_ec+0x1f0e>
   2b618:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   2b61c:	4625      	mov	r5, r4
   2b61e:	3402      	adds	r4, #2
   2b620:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
   2b624:	f9b5 5000 	ldrsh.w	r5, [r5]
   2b628:	1b40      	subs	r0, r0, r5
   2b62a:	eb0c 0504 	add.w	r5, ip, r4
   2b62e:	ee07 5a10 	vmov	s14, r5
   2b632:	ee06 0a90 	vmov	s13, r0
   2b636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2b63a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2b63e:	3301      	adds	r3, #1
   2b640:	ee66 6aa7 	vmul.f32	s13, s13, s15
   2b644:	ee67 7a27 	vmul.f32	s15, s14, s15
   2b648:	4293      	cmp	r3, r2
   2b64a:	4401      	add	r1, r0
   2b64c:	ee75 5aa6 	vadd.f32	s11, s11, s13
   2b650:	ee36 6a27 	vadd.f32	s12, s12, s15
   2b654:	da11      	bge.n	2b67a <celt_encode_with_ec+0x1f1e>
   2b656:	ecf6 7a01 	vldmia	r6!, {s15}
   2b65a:	eef4 7ac5 	vcmpe.f32	s15, s10
   2b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b662:	d4d4      	bmi.n	2b60e <celt_encode_with_ec+0x1eb2>
   2b664:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   2b668:	e7d8      	b.n	2b61c <celt_encode_with_ec+0x1ec0>
   2b66a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2b66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b672:	ddd3      	ble.n	2b61c <celt_encode_with_ec+0x1ec0>
   2b674:	ee67 7aa3 	vmul.f32	s15, s15, s7
   2b678:	e7d0      	b.n	2b61c <celt_encode_with_ec+0x1ec0>
   2b67a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2b67e:	449e      	add	lr, r3
   2b680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2b684:	f108 0801 	add.w	r8, r8, #1
   2b688:	4543      	cmp	r3, r8
   2b68a:	f47e abe6 	bne.w	29e5a <celt_encode_with_ec+0x6fe>
   2b68e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   2b692:	ee26 6a27 	vmul.f32	s12, s12, s15
   2b696:	ee07 1a90 	vmov	s15, r1
   2b69a:	f8d7 b020 	ldr.w	fp, [r7, #32]
   2b69e:	f8d7 a1c4 	ldr.w	sl, [r7, #452]	; 0x1c4
   2b6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b6a6:	4619      	mov	r1, r3
   2b6a8:	1e53      	subs	r3, r2, #1
   2b6aa:	fb01 f303 	mul.w	r3, r1, r3
   2b6ae:	fb02 3303 	mla	r3, r2, r3, r3
   2b6b2:	fb02 f303 	mul.w	r3, r2, r3
   2b6b6:	ee07 3a10 	vmov	s14, r3
   2b6ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2b6be:	ee85 9aa7 	vdiv.f32	s18, s11, s15
   2b6c2:	ee86 8a07 	vdiv.f32	s16, s12, s14
   2b6c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   2b6ca:	ed5f 7ab0 	vldr	s15, [pc, #-704]	; 2b40c <celt_encode_with_ec+0x1cb0>
   2b6ce:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 2b410 <celt_encode_with_ec+0x1cb4>
   2b6d2:	ee28 8a26 	vmul.f32	s16, s16, s13
   2b6d6:	ee39 9a07 	vadd.f32	s18, s18, s14
   2b6da:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2b6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b6e2:	f140 8262 	bpl.w	2bbaa <celt_encode_with_ec+0x244e>
   2b6e6:	ed5f 7ab5 	vldr	s15, [pc, #-724]	; 2b414 <celt_encode_with_ec+0x1cb8>
   2b6ea:	eeb4 8ae7 	vcmpe.f32	s16, s15
   2b6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b6f2:	bfd8      	it	le
   2b6f4:	eeb0 8a67 	vmovle.f32	s16, s15
   2b6f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
   2b6fa:	f931 4012 	ldrsh.w	r4, [r1, r2, lsl #1]
   2b6fe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2b702:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   2b706:	1064      	asrs	r4, r4, #1
   2b708:	42a3      	cmp	r3, r4
   2b70a:	f280 853c 	bge.w	2c186 <celt_encode_with_ec+0x2a2a>
   2b70e:	3102      	adds	r1, #2
   2b710:	2300      	movs	r3, #0
   2b712:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
   2b716:	42a0      	cmp	r0, r4
   2b718:	f103 0301 	add.w	r3, r3, #1
   2b71c:	dbf9      	blt.n	2b712 <celt_encode_with_ec+0x1fb6>
   2b71e:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
   2b722:	2902      	cmp	r1, #2
   2b724:	f000 82be 	beq.w	2bca4 <celt_encode_with_ec+0x2548>
   2b728:	ed1f 6ac5 	vldr	s12, [pc, #-788]	; 2b418 <celt_encode_with_ec+0x1cbc>
   2b72c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   2b72e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   2b730:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
   2b734:	4259      	negs	r1, r3
   2b736:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
   2b73a:	1ad3      	subs	r3, r2, r3
   2b73c:	ee07 1a90 	vmov	s15, r1
   2b740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   2b744:	ecf4 7a01 	vldmia	r4!, {s15}
   2b748:	ee27 7a08 	vmul.f32	s14, s14, s16
   2b74c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2b750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b754:	ee37 7a09 	vadd.f32	s14, s14, s18
   2b758:	bf58      	it	pl
   2b75a:	eef0 7a46 	vmovpl.f32	s15, s12
   2b75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2b762:	3101      	adds	r1, #1
   2b764:	eef4 7ae6 	vcmpe.f32	s15, s13
   2b768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b76c:	dd04      	ble.n	2b778 <celt_encode_with_ec+0x201c>
   2b76e:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2b772:	3501      	adds	r5, #1
   2b774:	edc0 7a00 	vstr	s15, [r0]
   2b778:	428b      	cmp	r3, r1
   2b77a:	f100 0004 	add.w	r0, r0, #4
   2b77e:	d1dd      	bne.n	2b73c <celt_encode_with_ec+0x1fe0>
   2b780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2b784:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
   2b788:	009b      	lsls	r3, r3, #2
   2b78a:	677b      	str	r3, [r7, #116]	; 0x74
   2b78c:	462b      	mov	r3, r5
   2b78e:	2b02      	cmp	r3, #2
   2b790:	dd1b      	ble.n	2b7ca <celt_encode_with_ec+0x206e>
   2b792:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
   2b796:	ee39 9a07 	vadd.f32	s18, s18, s14
   2b79a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   2b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b7a2:	f300 83a3 	bgt.w	2beec <celt_encode_with_ec+0x2790>
   2b7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2b7a8:	2100      	movs	r1, #0
   2b7aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2b7ae:	ecf3 7a01 	vldmia	r3!, {s15}
   2b7b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2b7b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b7be:	f100 8128 	bmi.w	2ba12 <celt_encode_with_ec+0x22b6>
   2b7c2:	429a      	cmp	r2, r3
   2b7c4:	ed43 7a01 	vstr	s15, [r3, #-4]
   2b7c8:	d1f1      	bne.n	2b7ae <celt_encode_with_ec+0x2052>
   2b7ca:	ed9f 7ad8 	vldr	s14, [pc, #864]	; 2bb2c <celt_encode_with_ec+0x23d0>
   2b7ce:	eddf 7ad8 	vldr	s15, [pc, #864]	; 2bb30 <celt_encode_with_ec+0x23d4>
   2b7d2:	ee39 9a07 	vadd.f32	s18, s18, s14
   2b7d6:	ee28 8a27 	vmul.f32	s16, s16, s15
   2b7da:	f7fe bbaf 	b.w	29f3c <celt_encode_with_ec+0x7e0>
   2b7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2b7e0:	f8d7 80a0 	ldr.w	r8, [r7, #160]	; 0xa0
   2b7e4:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
   2b7e8:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
   2b7ec:	3307      	adds	r3, #7
   2b7ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   2b7f2:	f023 0307 	bic.w	r3, r3, #7
   2b7f6:	ebad 0d03 	sub.w	sp, sp, r3
   2b7fa:	e9cd 2103 	strd	r2, r1, [sp, #12]
   2b7fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
   2b802:	9101      	str	r1, [sp, #4]
   2b804:	465b      	mov	r3, fp
   2b806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   2b80a:	9502      	str	r5, [sp, #8]
   2b80c:	2100      	movs	r1, #0
   2b80e:	4640      	mov	r0, r8
   2b810:	9400      	str	r4, [sp, #0]
   2b812:	f7fc f899 	bl	27948 <compute_mdcts>
   2b816:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2b81a:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
   2b81e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2b820:	9302      	str	r3, [sp, #8]
   2b822:	464a      	mov	r2, r9
   2b824:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2b828:	4659      	mov	r1, fp
   2b82a:	4640      	mov	r0, r8
   2b82c:	ae14      	add	r6, sp, #80	; 0x50
   2b82e:	e9cd 4500 	strd	r4, r5, [sp]
   2b832:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
   2b836:	f006 fd23 	bl	32280 <compute_band_energies>
   2b83a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2b83e:	9401      	str	r4, [sp, #4]
   2b840:	9600      	str	r6, [sp, #0]
   2b842:	464b      	mov	r3, r9
   2b844:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2b848:	4640      	mov	r0, r8
   2b84a:	f003 f817 	bl	2e87c <amp2Log2>
   2b84e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   2b850:	2900      	cmp	r1, #0
   2b852:	f340 8356 	ble.w	2bf02 <celt_encode_with_ec+0x27a6>
   2b856:	ee07 5a10 	vmov	s14, r5
   2b85a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2b85c:	eeba 7aef 	vcvt.f32.s32	s14, s14, #1
   2b860:	4633      	mov	r3, r6
   2b862:	18b2      	adds	r2, r6, r2
   2b864:	edd3 7a00 	vldr	s15, [r3]
   2b868:	ee77 7a87 	vadd.f32	s15, s15, s14
   2b86c:	ece3 7a01 	vstmia	r3!, {s15}
   2b870:	429a      	cmp	r2, r3
   2b872:	d1f7      	bne.n	2b864 <celt_encode_with_ec+0x2108>
   2b874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2b878:	69da      	ldr	r2, [r3, #28]
   2b87a:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2b87c:	69fb      	ldr	r3, [r7, #28]
   2b87e:	667b      	str	r3, [r7, #100]	; 0x64
   2b880:	2301      	movs	r3, #1
   2b882:	65fb      	str	r3, [r7, #92]	; 0x5c
   2b884:	2300      	movs	r3, #0
   2b886:	673b      	str	r3, [r7, #112]	; 0x70
   2b888:	f7fe ba5b 	b.w	29d42 <celt_encode_with_ec+0x5e6>
   2b88c:	6f79      	ldr	r1, [r7, #116]	; 0x74
   2b88e:	3107      	adds	r1, #7
   2b890:	f021 0407 	bic.w	r4, r1, #7
   2b894:	ebad 0d04 	sub.w	sp, sp, r4
   2b898:	ae14      	add	r6, sp, #80	; 0x50
   2b89a:	ebad 0d04 	sub.w	sp, sp, r4
   2b89e:	ad14      	add	r5, sp, #80	; 0x50
   2b8a0:	ebad 0d04 	sub.w	sp, sp, r4
   2b8a4:	65fe      	str	r6, [r7, #92]	; 0x5c
   2b8a6:	6e3e      	ldr	r6, [r7, #96]	; 0x60
   2b8a8:	960d      	str	r6, [sp, #52]	; 0x34
   2b8aa:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
   2b8ae:	960c      	str	r6, [sp, #48]	; 0x30
   2b8b0:	697e      	ldr	r6, [r7, #20]
   2b8b2:	960b      	str	r6, [sp, #44]	; 0x2c
   2b8b4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
   2b8b8:	960a      	str	r6, [sp, #40]	; 0x28
   2b8ba:	9206      	str	r2, [sp, #24]
   2b8bc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2b8c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2b8c4:	9609      	str	r6, [sp, #36]	; 0x24
   2b8c6:	6379      	str	r1, [r7, #52]	; 0x34
   2b8c8:	6c3e      	ldr	r6, [r7, #64]	; 0x40
   2b8ca:	f8cd c00c 	str.w	ip, [sp, #12]
   2b8ce:	a914      	add	r1, sp, #80	; 0x50
   2b8d0:	e9cd 3204 	strd	r3, r2, [sp, #16]
   2b8d4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
   2b8d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2b8dc:	9301      	str	r3, [sp, #4]
   2b8de:	e9cd 0607 	strd	r0, r6, [sp, #28]
   2b8e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2b8e6:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
   2b8e8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
   2b8ec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   2b8f0:	9602      	str	r6, [sp, #8]
   2b8f2:	900f      	str	r0, [sp, #60]	; 0x3c
   2b8f4:	950e      	str	r5, [sp, #56]	; 0x38
   2b8f6:	9300      	str	r3, [sp, #0]
   2b8f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2b8fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2b900:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   2b902:	f7fc fdb5 	bl	28470 <dynalloc_analysis.isra.5>
   2b906:	ebad 0d04 	sub.w	sp, sp, r4
   2b90a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   2b90e:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
   2b912:	9002      	str	r0, [sp, #8]
   2b914:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
   2b918:	6c78      	ldr	r0, [r7, #68]	; 0x44
   2b91a:	fb93 f3f6 	sdiv	r3, r3, r6
   2b91e:	2b4e      	cmp	r3, #78	; 0x4e
   2b920:	bfb8      	it	lt
   2b922:	234e      	movlt	r3, #78	; 0x4e
   2b924:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
   2b928:	9001      	str	r0, [sp, #4]
   2b92a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2b92e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   2b932:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2b936:	9204      	str	r2, [sp, #16]
   2b938:	a914      	add	r1, sp, #80	; 0x50
   2b93a:	3302      	adds	r3, #2
   2b93c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
   2b940:	9300      	str	r3, [sp, #0]
   2b942:	eef0 9a40 	vmov.f32	s19, s0
   2b946:	460b      	mov	r3, r1
   2b948:	9505      	str	r5, [sp, #20]
   2b94a:	9603      	str	r6, [sp, #12]
   2b94c:	ed97 0a3a 	vldr	s0, [r7, #232]	; 0xe8
   2b950:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   2b954:	4621      	mov	r1, r4
   2b956:	3020      	adds	r0, #32
   2b958:	f7fc faca 	bl	27ef0 <tf_analysis.isra.7>
   2b95c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2b960:	42a3      	cmp	r3, r4
   2b962:	4683      	mov	fp, r0
   2b964:	f77e ad17 	ble.w	2a396 <celt_encode_with_ec+0xc3a>
   2b968:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
   2b96c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2b96e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
   2b972:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2b976:	3b01      	subs	r3, #1
   2b978:	009a      	lsls	r2, r3, #2
   2b97a:	1a09      	subs	r1, r1, r0
   2b97c:	1d13      	adds	r3, r2, #4
   2b97e:	2905      	cmp	r1, #5
   2b980:	4423      	add	r3, r4
   2b982:	4422      	add	r2, r4
   2b984:	f240 81ce 	bls.w	2bd24 <celt_encode_with_ec+0x25c8>
   2b988:	ea43 0102 	orr.w	r1, r3, r2
   2b98c:	0749      	lsls	r1, r1, #29
   2b98e:	f100 81c9 	bmi.w	2bd24 <celt_encode_with_ec+0x25c8>
   2b992:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   2b996:	1a0c      	subs	r4, r1, r0
   2b998:	0860      	lsrs	r0, r4, #1
   2b99a:	6811      	ldr	r1, [r2, #0]
   2b99c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2b9a0:	e9c3 1100 	strd	r1, r1, [r3]
   2b9a4:	3308      	adds	r3, #8
   2b9a6:	4298      	cmp	r0, r3
   2b9a8:	d1fa      	bne.n	2b9a0 <celt_encode_with_ec+0x2244>
   2b9aa:	f024 0301 	bic.w	r3, r4, #1
   2b9ae:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2b9b2:	42a3      	cmp	r3, r4
   2b9b4:	4419      	add	r1, r3
   2b9b6:	f43e acee 	beq.w	2a396 <celt_encode_with_ec+0xc3a>
   2b9ba:	6813      	ldr	r3, [r2, #0]
   2b9bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   2b9c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   2b9c4:	f7fe bce7 	b.w	2a396 <celt_encode_with_ec+0xc3a>
   2b9c8:	f8d7 60c4 	ldr.w	r6, [r7, #196]	; 0xc4
   2b9cc:	461a      	mov	r2, r3
   2b9ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   2b9d0:	fa02 f303 	lsl.w	r3, r2, r3
   2b9d4:	ee07 3a90 	vmov	s15, r3
   2b9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2b9dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2b9e0:	eec7 8a27 	vdiv.f32	s17, s14, s15
   2b9e4:	220f      	movs	r2, #15
   2b9e6:	4650      	mov	r0, sl
   2b9e8:	eef4 8ac8 	vcmpe.f32	s17, s16
   2b9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2b9f0:	bfac      	ite	ge
   2b9f2:	2101      	movge	r1, #1
   2b9f4:	2100      	movlt	r1, #0
   2b9f6:	f000 ff7d 	bl	2c8f4 <ec_enc_bit_logp>
   2b9fa:	eef4 8ac8 	vcmpe.f32	s17, s16
   2b9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ba02:	f280 80a9 	bge.w	2bb58 <celt_encode_with_ec+0x23fc>
   2ba06:	2300      	movs	r3, #0
   2ba08:	f8d6 e01c 	ldr.w	lr, [r6, #28]
   2ba0c:	633b      	str	r3, [r7, #48]	; 0x30
   2ba0e:	f7fe b865 	b.w	29adc <celt_encode_with_ec+0x380>
   2ba12:	429a      	cmp	r2, r3
   2ba14:	f843 1c04 	str.w	r1, [r3, #-4]
   2ba18:	f47f aec9 	bne.w	2b7ae <celt_encode_with_ec+0x2052>
   2ba1c:	e6d5      	b.n	2b7ca <celt_encode_with_ec+0x206e>
   2ba1e:	b168      	cbz	r0, 2ba3c <celt_encode_with_ec+0x22e0>
   2ba20:	1aa4      	subs	r4, r4, r2
   2ba22:	ee07 4a90 	vmov	s15, r4
   2ba26:	eddf 6a43 	vldr	s13, [pc, #268]	; 2bb34 <celt_encode_with_ec+0x23d8>
   2ba2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2ba2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2ba32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2ba36:	ee17 4a90 	vmov	r4, s15
   2ba3a:	4414      	add	r4, r2
   2ba3c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 2bb2c <celt_encode_with_ec+0x23d0>
   2ba40:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2ba44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ba48:	f57e af6b 	bpl.w	2a922 <celt_encode_with_ec+0x11c6>
   2ba4c:	68bb      	ldr	r3, [r7, #8]
   2ba4e:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
   2ba52:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2ba56:	2b00      	cmp	r3, #0
   2ba58:	f2c0 8186 	blt.w	2bd68 <celt_encode_with_ec+0x260c>
   2ba5c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   2ba60:	f300 8253 	bgt.w	2bf0a <celt_encode_with_ec+0x27ae>
   2ba64:	ee07 3a90 	vmov	s15, r3
   2ba68:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2bb38 <celt_encode_with_ec+0x23dc>
   2ba6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2ba70:	ee67 7a87 	vmul.f32	s15, s15, s14
   2ba74:	ee07 4a10 	vmov	s14, r4
   2ba78:	ee68 7aa7 	vmul.f32	s15, s17, s15
   2ba7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2ba80:	ee67 7a87 	vmul.f32	s15, s15, s14
   2ba84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2ba88:	ee17 3a90 	vmov	r3, s15
   2ba8c:	441c      	add	r4, r3
   2ba8e:	f7fe bf48 	b.w	2a922 <celt_encode_with_ec+0x11c6>
   2ba92:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   2ba96:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   2ba98:	eddf 6a29 	vldr	s13, [pc, #164]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2ba9c:	461a      	mov	r2, r3
   2ba9e:	188a      	adds	r2, r1, r2
   2baa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2baa2:	009b      	lsls	r3, r3, #2
   2baa4:	657b      	str	r3, [r7, #84]	; 0x54
   2baa6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2baaa:	18cb      	adds	r3, r1, r3
   2baac:	eefa 5a04 	vmov.f32	s11, #164	; 0xc1200000 -10.0
   2bab0:	4401      	add	r1, r0
   2bab2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   2bab6:	ecb3 7a01 	vldmia	r3!, {s14}
   2baba:	ecb2 5a01 	vldmia	r2!, {s10}
   2babe:	ee75 7ae4 	vsub.f32	s15, s11, s9
   2bac2:	ee37 7a46 	vsub.f32	s14, s14, s12
   2bac6:	ee75 5a46 	vsub.f32	s11, s10, s12
   2baca:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2bace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bad2:	bf58      	it	pl
   2bad4:	eef0 7a47 	vmovpl.f32	s15, s14
   2bad8:	eef4 5ae7 	vcmpe.f32	s11, s15
   2badc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bae0:	d507      	bpl.n	2baf2 <celt_encode_with_ec+0x2396>
   2bae2:	4299      	cmp	r1, r3
   2bae4:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2bae8:	f43e aa57 	beq.w	29f9a <celt_encode_with_ec+0x83e>
   2baec:	eef0 5a67 	vmov.f32	s11, s15
   2baf0:	e7e1      	b.n	2bab6 <celt_encode_with_ec+0x235a>
   2baf2:	4299      	cmp	r1, r3
   2baf4:	ee76 6aa5 	vadd.f32	s13, s13, s11
   2baf8:	d1dd      	bne.n	2bab6 <celt_encode_with_ec+0x235a>
   2bafa:	f7fe ba4e 	b.w	29f9a <celt_encode_with_ec+0x83e>
   2bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bb00:	b913      	cbnz	r3, 2bb08 <celt_encode_with_ec+0x23ac>
   2bb02:	4249      	negs	r1, r1
   2bb04:	eb08 18a1 	add.w	r8, r8, r1, asr #6
   2bb08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2bb0c:	2300      	movs	r3, #0
   2bb0e:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
   2bb12:	f7fe bf4b 	b.w	2a9ac <celt_encode_with_ec+0x1250>
   2bb16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2bb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bb1e:	f73d af9e 	bgt.w	29a5e <celt_encode_with_ec+0x302>
   2bb22:	ed9f 8a06 	vldr	s16, [pc, #24]	; 2bb3c <celt_encode_with_ec+0x23e0>
   2bb26:	f7fd bf9a 	b.w	29a5e <celt_encode_with_ec+0x302>
   2bb2a:	bf00      	nop
   2bb2c:	3e4ccccd 	.word	0x3e4ccccd
   2bb30:	42800000 	.word	0x42800000
   2bb34:	3f2b851f 	.word	0x3f2b851f
   2bb38:	36500998 	.word	0x36500998
   2bb3c:	80000000 	.word	0x80000000
   2bb40:	00000000 	.word	0x00000000
   2bb44:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
   2bb48:	f04f 0900 	mov.w	r9, #0
   2bb4c:	f7fe be1d 	b.w	2a78a <celt_encode_with_ec+0x102e>
   2bb50:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 2bb3c <celt_encode_with_ec+0x23e0>
   2bb54:	f7fd bfb0 	b.w	29ab8 <celt_encode_with_ec+0x35c>
   2bb58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2bb5a:	2b00      	cmp	r3, #0
   2bb5c:	dd11      	ble.n	2bb82 <celt_encode_with_ec+0x2426>
   2bb5e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   2bb62:	f108 0301 	add.w	r3, r8, #1
   2bb66:	4293      	cmp	r3, r2
   2bb68:	f2c0 8105 	blt.w	2bd76 <celt_encode_with_ec+0x261a>
   2bb6c:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
   2bb70:	4650      	mov	r0, sl
   2bb72:	4631      	mov	r1, r6
   2bb74:	f001 f80c 	bl	2cb90 <ec_enc_shrink>
   2bb78:	2302      	movs	r3, #2
   2bb7a:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
   2bb7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   2bb82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2bb86:	f8da 301c 	ldr.w	r3, [sl, #28]
   2bb8a:	f8d2 e01c 	ldr.w	lr, [r2, #28]
   2bb8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2bb90:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   2bb94:	fab3 f383 	clz	r3, r3
   2bb98:	f1c3 0320 	rsb	r3, r3, #32
   2bb9c:	4413      	add	r3, r2
   2bb9e:	f8ca 3014 	str.w	r3, [sl, #20]
   2bba2:	2301      	movs	r3, #1
   2bba4:	633b      	str	r3, [r7, #48]	; 0x30
   2bba6:	f7fd bf99 	b.w	29adc <celt_encode_with_ec+0x380>
   2bbaa:	eeb0 8a67 	vmov.f32	s16, s15
   2bbae:	e5a3      	b.n	2b6f8 <celt_encode_with_ec+0x1f9c>
   2bbb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2bbb4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2bbb8:	4313      	orrs	r3, r2
   2bbba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2bbbe:	f040 80e1 	bne.w	2bd84 <celt_encode_with_ec+0x2628>
   2bbc2:	edd3 7a00 	vldr	s15, [r3]
   2bbc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2bbca:	2b01      	cmp	r3, #1
   2bbcc:	f000 8333 	beq.w	2c236 <celt_encode_with_ec+0x2ada>
   2bbd0:	f8d7 508c 	ldr.w	r5, [r7, #140]	; 0x8c
   2bbd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
   2bbd6:	182b      	adds	r3, r5, r0
   2bbd8:	ed93 7a00 	vldr	s14, [r3]
   2bbdc:	623b      	str	r3, [r7, #32]
   2bbde:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2bbe2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bbea:	bf58      	it	pl
   2bbec:	eef0 7a47 	vmovpl.f32	s15, s14
   2bbf0:	2b01      	cmp	r3, #1
   2bbf2:	462a      	mov	r2, r5
   2bbf4:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
   2bbf8:	f340 8102 	ble.w	2be00 <celt_encode_with_ec+0x26a4>
   2bbfc:	6fbe      	ldr	r6, [r7, #120]	; 0x78
   2bbfe:	1d03      	adds	r3, r0, #4
   2bc00:	442b      	add	r3, r5
   2bc02:	3204      	adds	r2, #4
   2bc04:	f507 7092 	add.w	r0, r7, #292	; 0x124
   2bc08:	4435      	add	r5, r6
   2bc0a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2bc0e:	ecf2 6a01 	vldmia	r2!, {s13}
   2bc12:	ecb3 7a01 	vldmia	r3!, {s14}
   2bc16:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2bc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bc1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
   2bc22:	bf54      	ite	pl
   2bc24:	eef0 5a47 	vmovpl.f32	s11, s14
   2bc28:	eef0 5a66 	vmovmi.f32	s11, s13
   2bc2c:	eef4 5ae7 	vcmpe.f32	s11, s15
   2bc30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bc34:	d408      	bmi.n	2bc48 <celt_encode_with_ec+0x24ec>
   2bc36:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bc3e:	bf54      	ite	pl
   2bc40:	eef0 7a47 	vmovpl.f32	s15, s14
   2bc44:	eef0 7a66 	vmovmi.f32	s15, s13
   2bc48:	4295      	cmp	r5, r2
   2bc4a:	ece0 7a01 	vstmia	r0!, {s15}
   2bc4e:	d1de      	bne.n	2bc0e <celt_encode_with_ec+0x24b2>
   2bc50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2bc54:	697a      	ldr	r2, [r7, #20]
   2bc56:	3b02      	subs	r3, #2
   2bc58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2bc5c:	3204      	adds	r2, #4
   2bc5e:	edd2 7a00 	vldr	s15, [r2]
   2bc62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2bc66:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2bc6a:	ed32 7a01 	vldmdb	r2!, {s14}
   2bc6e:	eef4 7ac7 	vcmpe.f32	s15, s14
   2bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bc76:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2bc7a:	f140 80bc 	bpl.w	2bdf6 <celt_encode_with_ec+0x269a>
   2bc7e:	1c5d      	adds	r5, r3, #1
   2bc80:	f000 80be 	beq.w	2be00 <celt_encode_with_ec+0x26a4>
   2bc84:	eef0 7a47 	vmov.f32	s15, s14
   2bc88:	e7ed      	b.n	2bc66 <celt_encode_with_ec+0x250a>
   2bc8a:	4284      	cmp	r4, r0
   2bc8c:	f4fe aca5 	bcc.w	2a5da <celt_encode_with_ec+0xe7e>
   2bc90:	f04f 0900 	mov.w	r9, #0
   2bc94:	f7fe bc60 	b.w	2a558 <celt_encode_with_ec+0xdfc>
   2bc98:	009b      	lsls	r3, r3, #2
   2bc9a:	ed5f 6a57 	vldr	s13, [pc, #-348]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2bc9e:	657b      	str	r3, [r7, #84]	; 0x54
   2bca0:	f7fe b97b 	b.w	29f9a <celt_encode_with_ec+0x83e>
   2bca4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   2bca8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2bcaa:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   2bcac:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
   2bcb0:	0080      	lsls	r0, r0, #2
   2bcb2:	6778      	str	r0, [r7, #116]	; 0x74
   2bcb4:	180d      	adds	r5, r1, r0
   2bcb6:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
   2bcba:	4258      	negs	r0, r3
   2bcbc:	1ad3      	subs	r3, r2, r3
   2bcbe:	ecf1 7a01 	vldmia	r1!, {s15}
   2bcc2:	ecf5 6a01 	vldmia	r5!, {s13}
   2bcc6:	ee07 0a10 	vmov	s14, r0
   2bcca:	eef4 6ae7 	vcmpe.f32	s13, s15
   2bcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bcd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2bcd6:	bf58      	it	pl
   2bcd8:	eef0 7a66 	vmovpl.f32	s15, s13
   2bcdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2bce0:	ee27 7a08 	vmul.f32	s14, s14, s16
   2bce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bce8:	bf58      	it	pl
   2bcea:	ed5f 7a6b 	vldrpl	s15, [pc, #-428]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2bcee:	ee37 7a09 	vadd.f32	s14, s14, s18
   2bcf2:	3001      	adds	r0, #1
   2bcf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2bcf8:	eef4 7ac6 	vcmpe.f32	s15, s12
   2bcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bd00:	dd04      	ble.n	2bd0c <celt_encode_with_ec+0x25b0>
   2bd02:	ee77 7ac6 	vsub.f32	s15, s15, s12
   2bd06:	3601      	adds	r6, #1
   2bd08:	edc4 7a00 	vstr	s15, [r4]
   2bd0c:	4283      	cmp	r3, r0
   2bd0e:	f104 0404 	add.w	r4, r4, #4
   2bd12:	d1d4      	bne.n	2bcbe <celt_encode_with_ec+0x2562>
   2bd14:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
   2bd18:	4633      	mov	r3, r6
   2bd1a:	e538      	b.n	2b78e <celt_encode_with_ec+0x2032>
   2bd1c:	f8c7 a058 	str.w	sl, [r7, #88]	; 0x58
   2bd20:	f7fe b9f2 	b.w	2a108 <celt_encode_with_ec+0x9ac>
   2bd24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2bd26:	1f18      	subs	r0, r3, #4
   2bd28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   2bd2c:	4418      	add	r0, r3
   2bd2e:	4613      	mov	r3, r2
   2bd30:	6811      	ldr	r1, [r2, #0]
   2bd32:	f843 1f04 	str.w	r1, [r3, #4]!
   2bd36:	4298      	cmp	r0, r3
   2bd38:	d1fa      	bne.n	2bd30 <celt_encode_with_ec+0x25d4>
   2bd3a:	f7fe bb2c 	b.w	2a396 <celt_encode_with_ec+0xc3a>
   2bd3e:	2301      	movs	r3, #1
   2bd40:	61fb      	str	r3, [r7, #28]
   2bd42:	2303      	movs	r3, #3
   2bd44:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
   2bd48:	627b      	str	r3, [r7, #36]	; 0x24
   2bd4a:	f44f 7caf 	mov.w	ip, #350	; 0x15e
   2bd4e:	f7fd bd6e 	b.w	2982e <celt_encode_with_ec+0xd2>
   2bd52:	f93e 6011 	ldrsh.w	r6, [lr, r1, lsl #1]
   2bd56:	4631      	mov	r1, r6
   2bd58:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2bd5c:	fa01 f606 	lsl.w	r6, r1, r6
   2bd60:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
   2bd64:	f7ff bbe3 	b.w	2b52e <celt_encode_with_ec+0x1dd2>
   2bd68:	ed5f 7a8b 	vldr	s15, [pc, #-556]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2bd6c:	e682      	b.n	2ba74 <celt_encode_with_ec+0x2318>
   2bd6e:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
   2bd72:	f7ff baac 	b.w	2b2ce <celt_encode_with_ec+0x1b72>
   2bd76:	f108 0302 	add.w	r3, r8, #2
   2bd7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   2bd7e:	00db      	lsls	r3, r3, #3
   2bd80:	67fb      	str	r3, [r7, #124]	; 0x7c
   2bd82:	e6f3      	b.n	2bb6c <celt_encode_with_ec+0x2410>
   2bd84:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2bd86:	4413      	add	r3, r2
   2bd88:	623b      	str	r3, [r7, #32]
   2bd8a:	f7ff bb75 	b.w	2b478 <celt_encode_with_ec+0x1d1c>
   2bd8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2bd92:	2103      	movs	r1, #3
   2bd94:	6519      	str	r1, [r3, #80]	; 0x50
   2bd96:	f7fe bc2e 	b.w	2a5f6 <celt_encode_with_ec+0xe9a>
   2bd9a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2bd9e:	683b      	ldr	r3, [r7, #0]
   2bda0:	4413      	add	r3, r2
   2bda2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2bda6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
   2bdaa:	f6ff aa40 	blt.w	2b22e <celt_encode_with_ec+0x1ad2>
   2bdae:	68fb      	ldr	r3, [r7, #12]
   2bdb0:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
   2bdb4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
   2bdb8:	9006      	str	r0, [sp, #24]
   2bdba:	3300      	adds	r3, #0
   2bdbc:	bf18      	it	ne
   2bdbe:	2301      	movne	r3, #1
   2bdc0:	9302      	str	r3, [sp, #8]
   2bdc2:	4623      	mov	r3, r4
   2bdc4:	69f8      	ldr	r0, [r7, #28]
   2bdc6:	9005      	str	r0, [sp, #20]
   2bdc8:	f104 0264 	add.w	r2, r4, #100	; 0x64
   2bdcc:	3360      	adds	r3, #96	; 0x60
   2bdce:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
   2bdd2:	9004      	str	r0, [sp, #16]
   2bdd4:	e9cd 3200 	strd	r3, r2, [sp]
   2bdd8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
   2bddc:	9003      	str	r0, [sp, #12]
   2bdde:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2bde0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2bde2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2bde6:	f104 0258 	add.w	r2, r4, #88	; 0x58
   2bdea:	f006 faff 	bl	323ec <spreading_decision>
   2bdee:	4601      	mov	r1, r0
   2bdf0:	6520      	str	r0, [r4, #80]	; 0x50
   2bdf2:	f7fe bc00 	b.w	2a5f6 <celt_encode_with_ec+0xe9a>
   2bdf6:	1c58      	adds	r0, r3, #1
   2bdf8:	edc2 7a00 	vstr	s15, [r2]
   2bdfc:	f47f af33 	bne.w	2bc66 <celt_encode_with_ec+0x250a>
   2be00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2be04:	ed5f 6ab2 	vldr	s13, [pc, #-712]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2be08:	f8d7 c0c0 	ldr.w	ip, [r7, #192]	; 0xc0
   2be0c:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
   2be10:	f8d7 8074 	ldr.w	r8, [r7, #116]	; 0x74
   2be14:	ebc3 7683 	rsb	r6, r3, r3, lsl #30
   2be18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2be1a:	1f18      	subs	r0, r3, #4
   2be1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2be1e:	00b6      	lsls	r6, r6, #2
   2be20:	360c      	adds	r6, #12
   2be22:	eeb0 6a66 	vmov.f32	s12, s13
   2be26:	4418      	add	r0, r3
   2be28:	2500      	movs	r5, #0
   2be2a:	f1be 0f02 	cmp.w	lr, #2
   2be2e:	dd24      	ble.n	2be7a <celt_encode_with_ec+0x271e>
   2be30:	1833      	adds	r3, r6, r0
   2be32:	f507 7294 	add.w	r2, r7, #296	; 0x128
   2be36:	e00f      	b.n	2be58 <celt_encode_with_ec+0x26fc>
   2be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be3c:	bf58      	it	pl
   2be3e:	ee77 7ac7 	vsubpl.f32	s15, s15, s14
   2be42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be4a:	d501      	bpl.n	2be50 <celt_encode_with_ec+0x26f4>
   2be4c:	ed5f 7ac4 	vldr	s15, [pc, #-784]	; 2bb40 <celt_encode_with_ec+0x23e4>
   2be50:	4298      	cmp	r0, r3
   2be52:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2be56:	d010      	beq.n	2be7a <celt_encode_with_ec+0x271e>
   2be58:	ecf3 7a01 	vldmia	r3!, {s15}
   2be5c:	ecb2 7a01 	vldmia	r2!, {s14}
   2be60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be68:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   2be6c:	d5e4      	bpl.n	2be38 <celt_encode_with_ec+0x26dc>
   2be6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2be72:	d4eb      	bmi.n	2be4c <celt_encode_with_ec+0x26f0>
   2be74:	ee76 7a47 	vsub.f32	s15, s12, s14
   2be78:	e7e3      	b.n	2be42 <celt_encode_with_ec+0x26e6>
   2be7a:	3501      	adds	r5, #1
   2be7c:	45ac      	cmp	ip, r5
   2be7e:	4440      	add	r0, r8
   2be80:	dcd3      	bgt.n	2be2a <celt_encode_with_ec+0x26ce>
   2be82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2be86:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2be8a:	3b03      	subs	r3, #3
   2be8c:	fb02 f303 	mul.w	r3, r2, r3
   2be90:	ee07 3a90 	vmov	s15, r3
   2be94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2be98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   2be9c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
   2bea0:	eeb4 6ac7 	vcmpe.f32	s12, s14
   2bea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bea8:	f300 8170 	bgt.w	2c18c <celt_encode_with_ec+0x2a30>
   2beac:	fab1 f381 	clz	r3, r1
   2beb0:	4423      	add	r3, r4
   2beb2:	2200      	movs	r2, #0
   2beb4:	3b1e      	subs	r3, #30
   2beb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   2beba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2bebc:	429a      	cmp	r2, r3
   2bebe:	f77e a9d6 	ble.w	2a26e <celt_encode_with_ec+0xb12>
   2bec2:	f7ff bad9 	b.w	2b478 <celt_encode_with_ec+0x1d1c>
   2bec6:	2300      	movs	r3, #0
   2bec8:	f7fe ba5c 	b.w	2a384 <celt_encode_with_ec+0xc28>
   2becc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2bed0:	f023 0307 	bic.w	r3, r3, #7
   2bed4:	ebad 0d03 	sub.w	sp, sp, r3
   2bed8:	ab14      	add	r3, sp, #80	; 0x50
   2beda:	663b      	str	r3, [r7, #96]	; 0x60
   2bedc:	f04f 0b00 	mov.w	fp, #0
   2bee0:	f7fe baa1 	b.w	2a426 <celt_encode_with_ec+0xcca>
   2bee4:	eef0 7a66 	vmov.f32	s15, s13
   2bee8:	f7ff ba3e 	b.w	2b368 <celt_encode_with_ec+0x1c0c>
   2beec:	0092      	lsls	r2, r2, #2
   2beee:	2100      	movs	r1, #0
   2bef0:	6e38      	ldr	r0, [r7, #96]	; 0x60
   2bef2:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 2c294 <celt_encode_with_ec+0x2b38>
   2bef6:	ed9f 9ae8 	vldr	s18, [pc, #928]	; 2c298 <celt_encode_with_ec+0x2b3c>
   2befa:	f7e0 fa2f 	bl	c35c <memset>
   2befe:	f7fe b81d 	b.w	29f3c <celt_encode_with_ec+0x7e0>
   2bf02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2bf06:	69da      	ldr	r2, [r3, #28]
   2bf08:	e4b7      	b.n	2b87a <celt_encode_with_ec+0x211e>
   2bf0a:	eddf 7ae4 	vldr	s15, [pc, #912]	; 2c29c <celt_encode_with_ec+0x2b40>
   2bf0e:	e5b1      	b.n	2ba74 <celt_encode_with_ec+0x2318>
   2bf10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2bf14:	eddf 4adf 	vldr	s9, [pc, #892]	; 2c294 <celt_encode_with_ec+0x2b38>
   2bf18:	6a1e      	ldr	r6, [r3, #32]
   2bf1a:	f8d7 809c 	ldr.w	r8, [r7, #156]	; 0x9c
   2bf1e:	f8d7 c0ac 	ldr.w	ip, [r7, #172]	; 0xac
   2bf22:	f8d7 e044 	ldr.w	lr, [r7, #68]	; 0x44
   2bf26:	f106 0410 	add.w	r4, r6, #16
   2bf2a:	4635      	mov	r5, r6
   2bf2c:	f9b5 2000 	ldrsh.w	r2, [r5]
   2bf30:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
   2bf34:	1a89      	subs	r1, r1, r2
   2bf36:	fa02 f30c 	lsl.w	r3, r2, ip
   2bf3a:	fa01 f10c 	lsl.w	r1, r1, ip
   2bf3e:	eb03 0208 	add.w	r2, r3, r8
   2bf42:	2900      	cmp	r1, #0
   2bf44:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2bf48:	ea4f 0383 	mov.w	r3, r3, lsl #2
   2bf4c:	f340 810a 	ble.w	2c164 <celt_encode_with_ec+0x2a08>
   2bf50:	4473      	add	r3, lr
   2bf52:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 2c294 <celt_encode_with_ec+0x2b38>
   2bf56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2bf5a:	4472      	add	r2, lr
   2bf5c:	ecf3 7a01 	vldmia	r3!, {s15}
   2bf60:	ecf2 6a01 	vldmia	r2!, {s13}
   2bf64:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2bf68:	4299      	cmp	r1, r3
   2bf6a:	ee37 7a27 	vadd.f32	s14, s14, s15
   2bf6e:	d1f5      	bne.n	2bf5c <celt_encode_with_ec+0x2800>
   2bf70:	42ac      	cmp	r4, r5
   2bf72:	ee74 4a87 	vadd.f32	s9, s9, s14
   2bf76:	d1d9      	bne.n	2bf2c <celt_encode_with_ec+0x27d0>
   2bf78:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   2bf7c:	ee64 4aa7 	vmul.f32	s9, s9, s15
   2bf80:	eef5 4ac0 	vcmpe.f32	s9, #0.0
   2bf84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bf88:	f100 81a6 	bmi.w	2c2d8 <celt_encode_with_ec+0x2b7c>
   2bf8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2bf90:	eef4 4ae7 	vcmpe.f32	s9, s15
   2bf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2bf98:	f300 81d5 	bgt.w	2c346 <celt_encode_with_ec+0x2bea>
   2bf9c:	ee64 6aa4 	vmul.f32	s13, s9, s9
   2bfa0:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 2c2a4 <celt_encode_with_ec+0x2b48>
   2bfa4:	eddf 7ac0 	vldr	s15, [pc, #768]	; 2c2a8 <celt_encode_with_ec+0x2b4c>
   2bfa8:	ed9f 4ac2 	vldr	s8, [pc, #776]	; 2c2b4 <celt_encode_with_ec+0x2b58>
   2bfac:	ed9f 3ac0 	vldr	s6, [pc, #768]	; 2c2b0 <celt_encode_with_ec+0x2b54>
   2bfb0:	eddf 3abe 	vldr	s7, [pc, #760]	; 2c2ac <celt_encode_with_ec+0x2b50>
   2bfb4:	ee37 7a66 	vsub.f32	s14, s14, s13
   2bfb8:	ee17 3a10 	vmov	r3, s14
   2bfbc:	0dda      	lsrs	r2, r3, #23
   2bfbe:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
   2bfc2:	eba3 53c1 	sub.w	r3, r3, r1, lsl #23
   2bfc6:	ee06 3a90 	vmov	s13, r3
   2bfca:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   2bfce:	ee36 7ac7 	vsub.f32	s14, s13, s14
   2bfd2:	f1a2 037e 	sub.w	r3, r2, #126	; 0x7e
   2bfd6:	ee06 3a90 	vmov	s13, r3
   2bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
   2bfde:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
   2bfe2:	ee77 6ac4 	vsub.f32	s13, s15, s8
   2bfe6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
   2bfea:	ee66 6a87 	vmul.f32	s13, s13, s14
   2bfee:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
   2bff2:	ee76 6a83 	vadd.f32	s13, s13, s6
   2bff6:	ee66 6a87 	vmul.f32	s13, s13, s14
   2bffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2bffe:	ee76 6ae3 	vsub.f32	s13, s13, s7
   2c002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   2c006:	ee76 6a86 	vadd.f32	s13, s13, s12
   2c00a:	2b08      	cmp	r3, #8
   2c00c:	ee26 4a84 	vmul.f32	s8, s13, s8
   2c010:	ee66 6aa7 	vmul.f32	s13, s13, s15
   2c014:	dd3a      	ble.n	2c08c <celt_encode_with_ec+0x2930>
   2c016:	f8d7 c09c 	ldr.w	ip, [r7, #156]	; 0x9c
   2c01a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
   2c01e:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   2c020:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   2c024:	f9b4 2000 	ldrsh.w	r2, [r4]
   2c028:	f934 ef02 	ldrsh.w	lr, [r4, #2]!
   2c02c:	ebae 0e02 	sub.w	lr, lr, r2
   2c030:	fa02 f301 	lsl.w	r3, r2, r1
   2c034:	fa0e fe01 	lsl.w	lr, lr, r1
   2c038:	eb03 020c 	add.w	r2, r3, ip
   2c03c:	f1be 0f00 	cmp.w	lr, #0
   2c040:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2c044:	ea4f 0383 	mov.w	r3, r3, lsl #2
   2c048:	f340 8089 	ble.w	2c15e <celt_encode_with_ec+0x2a02>
   2c04c:	442b      	add	r3, r5
   2c04e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 2c294 <celt_encode_with_ec+0x2b38>
   2c052:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   2c056:	442a      	add	r2, r5
   2c058:	ecf3 7a01 	vldmia	r3!, {s15}
   2c05c:	ecb2 6a01 	vldmia	r2!, {s12}
   2c060:	ee67 7a86 	vmul.f32	s15, s15, s12
   2c064:	459e      	cmp	lr, r3
   2c066:	ee37 7a27 	vadd.f32	s14, s14, s15
   2c06a:	d1f5      	bne.n	2c058 <celt_encode_with_ec+0x28fc>
   2c06c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   2c070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c074:	d501      	bpl.n	2c07a <celt_encode_with_ec+0x291e>
   2c076:	eeb1 7a47 	vneg.f32	s14, s14
   2c07a:	eeb4 7ae4 	vcmpe.f32	s14, s9
   2c07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c082:	bfd8      	it	le
   2c084:	eef0 4a47 	vmovle.f32	s9, s14
   2c088:	42a6      	cmp	r6, r4
   2c08a:	d1cb      	bne.n	2c024 <celt_encode_with_ec+0x28c8>
   2c08c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
   2c090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c094:	f100 8116 	bmi.w	2c2c4 <celt_encode_with_ec+0x2b68>
   2c098:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2c09c:	eef4 4ae7 	vcmpe.f32	s9, s15
   2c0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c0a4:	bfcc      	ite	gt
   2c0a6:	2301      	movgt	r3, #1
   2c0a8:	2300      	movle	r3, #0
   2c0aa:	2b00      	cmp	r3, #0
   2c0ac:	f040 8159 	bne.w	2c362 <celt_encode_with_ec+0x2c06>
   2c0b0:	ee64 4aa4 	vmul.f32	s9, s9, s9
   2c0b4:	eddf 7a7b 	vldr	s15, [pc, #492]	; 2c2a4 <celt_encode_with_ec+0x2b48>
   2c0b8:	ed9f 6a7b 	vldr	s12, [pc, #492]	; 2c2a8 <celt_encode_with_ec+0x2b4c>
   2c0bc:	eddf 2a7d 	vldr	s5, [pc, #500]	; 2c2b4 <celt_encode_with_ec+0x2b58>
   2c0c0:	ed9f 3a7b 	vldr	s6, [pc, #492]	; 2c2b0 <celt_encode_with_ec+0x2b54>
   2c0c4:	eddf 3a79 	vldr	s7, [pc, #484]	; 2c2ac <celt_encode_with_ec+0x2b50>
   2c0c8:	ee77 7ae4 	vsub.f32	s15, s15, s9
   2c0cc:	ee17 3a90 	vmov	r3, s15
   2c0d0:	0dda      	lsrs	r2, r3, #23
   2c0d2:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
   2c0d6:	eba3 53c1 	sub.w	r3, r3, r1, lsl #23
   2c0da:	ee07 3a10 	vmov	s14, r3
   2c0de:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   2c0e2:	ee77 7a67 	vsub.f32	s15, s14, s15
   2c0e6:	3a7e      	subs	r2, #126	; 0x7e
   2c0e8:	ee27 7a86 	vmul.f32	s14, s15, s12
   2c0ec:	ee06 2a10 	vmov	s12, r2
   2c0f0:	ee37 7a62 	vsub.f32	s14, s14, s5
   2c0f4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
   2c0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
   2c0fc:	ee37 7a03 	vadd.f32	s14, s14, s6
   2c100:	ee27 7a27 	vmul.f32	s14, s14, s15
   2c104:	ee37 7a63 	vsub.f32	s14, s14, s7
   2c108:	ee37 7a06 	vadd.f32	s14, s14, s12
   2c10c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2c110:	eeb4 4ac7 	vcmpe.f32	s8, s14
   2c114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c118:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
   2c11c:	bfd8      	it	le
   2c11e:	eeb0 4a47 	vmovle.f32	s8, s14
   2c122:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
   2c126:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2c12a:	ee27 7a44 	vnmul.f32	s14, s14, s8
   2c12e:	eeb9 6a00 	vmov.f32	s12, #144	; 0xc0800000 -4.0
   2c132:	ee77 7aa4 	vadd.f32	s15, s15, s9
   2c136:	eef4 6a46 	vcmp.f32	s13, s12
   2c13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c13e:	eef4 7ac7 	vcmpe.f32	s15, s14
   2c142:	bf48      	it	mi
   2c144:	eef0 6a46 	vmovmi.f32	s13, s12
   2c148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c14c:	bf58      	it	pl
   2c14e:	eef0 7a47 	vmovpl.f32	s15, s14
   2c152:	ee35 5a26 	vadd.f32	s10, s10, s13
   2c156:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
   2c15a:	f7ff b8bd 	b.w	2b2d8 <celt_encode_with_ec+0x1b7c>
   2c15e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 2c294 <celt_encode_with_ec+0x2b38>
   2c162:	e78a      	b.n	2c07a <celt_encode_with_ec+0x291e>
   2c164:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2c294 <celt_encode_with_ec+0x2b38>
   2c168:	e702      	b.n	2bf70 <celt_encode_with_ec+0x2814>
   2c16a:	2200      	movs	r2, #0
   2c16c:	f7fe be61 	b.w	2ae32 <celt_encode_with_ec+0x16d6>
   2c170:	eef0 7a46 	vmov.f32	s15, s12
   2c174:	eef0 5a46 	vmov.f32	s11, s12
   2c178:	4619      	mov	r1, r3
   2c17a:	f7ff ba95 	b.w	2b6a8 <celt_encode_with_ec+0x1f4c>
   2c17e:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
   2c182:	f7ff b8a4 	b.w	2b2ce <celt_encode_with_ec+0x1b72>
   2c186:	2300      	movs	r3, #0
   2c188:	f7ff bac9 	b.w	2b71e <celt_encode_with_ec+0x1fc2>
   2c18c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2c190:	f8d7 80a0 	ldr.w	r8, [r7, #160]	; 0xa0
   2c194:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2c196:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
   2c19a:	4615      	mov	r5, r2
   2c19c:	461c      	mov	r4, r3
   2c19e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   2c1a2:	69db      	ldr	r3, [r3, #28]
   2c1a4:	9602      	str	r6, [sp, #8]
   2c1a6:	e9cd 3103 	strd	r3, r1, [sp, #12]
   2c1aa:	e9cd 5200 	strd	r5, r2, [sp]
   2c1ae:	465b      	mov	r3, fp
   2c1b0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   2c1b4:	69f9      	ldr	r1, [r7, #28]
   2c1b6:	4640      	mov	r0, r8
   2c1b8:	f7fb fbc6 	bl	27948 <compute_mdcts>
   2c1bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2c1be:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   2c1c0:	9302      	str	r3, [sp, #8]
   2c1c2:	e9cd 5600 	strd	r5, r6, [sp]
   2c1c6:	f8d7 60b4 	ldr.w	r6, [r7, #180]	; 0xb4
   2c1ca:	4622      	mov	r2, r4
   2c1cc:	4633      	mov	r3, r6
   2c1ce:	4659      	mov	r1, fp
   2c1d0:	4640      	mov	r0, r8
   2c1d2:	f006 f855 	bl	32280 <compute_band_energies>
   2c1d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2c1d8:	9200      	str	r2, [sp, #0]
   2c1da:	4623      	mov	r3, r4
   2c1dc:	9501      	str	r5, [sp, #4]
   2c1de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
   2c1e2:	4631      	mov	r1, r6
   2c1e4:	4640      	mov	r0, r8
   2c1e6:	f002 fb49 	bl	2e87c <amp2Log2>
   2c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c1ec:	2b00      	cmp	r3, #0
   2c1ee:	dd10      	ble.n	2c212 <celt_encode_with_ec+0x2ab6>
   2c1f0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
   2c1f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   2c1f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   2c1fa:	eeba 7aef 	vcvt.f32.s32	s14, s14, #1
   2c1fe:	4613      	mov	r3, r2
   2c200:	440a      	add	r2, r1
   2c202:	edd3 7a00 	vldr	s15, [r3]
   2c206:	ee77 7a87 	vadd.f32	s15, s15, s14
   2c20a:	ece3 7a01 	vstmia	r3!, {s15}
   2c20e:	429a      	cmp	r2, r3
   2c210:	d1f7      	bne.n	2c202 <celt_encode_with_ec+0x2aa6>
   2c212:	f8da 301c 	ldr.w	r3, [sl, #28]
   2c216:	f8da 1014 	ldr.w	r1, [sl, #20]
   2c21a:	4a21      	ldr	r2, [pc, #132]	; (2c2a0 <celt_encode_with_ec+0x2b44>)
   2c21c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
   2c220:	fab3 f383 	clz	r3, r3
   2c224:	440b      	add	r3, r1
   2c226:	69fa      	ldr	r2, [r7, #28]
   2c228:	667a      	str	r2, [r7, #100]	; 0x64
   2c22a:	2101      	movs	r1, #1
   2c22c:	6739      	str	r1, [r7, #112]	; 0x70
   2c22e:	3b1e      	subs	r3, #30
   2c230:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
   2c234:	e641      	b.n	2beba <celt_encode_with_ec+0x275e>
   2c236:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2c23a:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
   2c23e:	2b01      	cmp	r3, #1
   2c240:	f340 8092 	ble.w	2c368 <celt_encode_with_ec+0x2c0c>
   2c244:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   2c248:	6fbd      	ldr	r5, [r7, #120]	; 0x78
   2c24a:	1d02      	adds	r2, r0, #4
   2c24c:	f507 7392 	add.w	r3, r7, #292	; 0x124
   2c250:	4428      	add	r0, r5
   2c252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   2c256:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2c25a:	ecb2 7a01 	vldmia	r2!, {s14}
   2c25e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2c262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c266:	d509      	bpl.n	2c27c <celt_encode_with_ec+0x2b20>
   2c268:	4290      	cmp	r0, r2
   2c26a:	ece3 7a01 	vstmia	r3!, {s15}
   2c26e:	d1f2      	bne.n	2c256 <celt_encode_with_ec+0x2afa>
   2c270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2c274:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2c276:	4413      	add	r3, r2
   2c278:	623b      	str	r3, [r7, #32]
   2c27a:	e4e9      	b.n	2bc50 <celt_encode_with_ec+0x24f4>
   2c27c:	4290      	cmp	r0, r2
   2c27e:	eca3 7a01 	vstmia	r3!, {s14}
   2c282:	d0f5      	beq.n	2c270 <celt_encode_with_ec+0x2b14>
   2c284:	eef0 7a47 	vmov.f32	s15, s14
   2c288:	e7e5      	b.n	2c256 <celt_encode_with_ec+0x2afa>
   2c28a:	f8d7 b094 	ldr.w	fp, [r7, #148]	; 0x94
   2c28e:	f7fe b882 	b.w	2a396 <celt_encode_with_ec+0xc3a>
   2c292:	bf00      	nop
   2c294:	00000000 	.word	0x00000000
   2c298:	3e4ccccd 	.word	0x3e4ccccd
   2c29c:	3dcb295e 	.word	0x3dcb295e
   2c2a0:	3e4ccccd 	.word	0x3e4ccccd
   2c2a4:	3f8020c5 	.word	0x3f8020c5
   2c2a8:	3e29617e 	.word	0x3e29617e
   2c2ac:	3ed43357 	.word	0x3ed43357
   2c2b0:	3f758713 	.word	0x3f758713
   2c2b4:	3eadd4a3 	.word	0x3eadd4a3
   2c2b8:	c0ef2d24 	.word	0xc0ef2d24
   2c2bc:	c09f736d 	.word	0xc09f736d
   2c2c0:	c11f736d 	.word	0xc11f736d
   2c2c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   2c2c8:	eef4 4ae7 	vcmpe.f32	s9, s15
   2c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c2d0:	bf4c      	ite	mi
   2c2d2:	2301      	movmi	r3, #1
   2c2d4:	2300      	movpl	r3, #0
   2c2d6:	e6e8      	b.n	2c0aa <celt_encode_with_ec+0x294e>
   2c2d8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   2c2dc:	eef4 4ae7 	vcmpe.f32	s9, s15
   2c2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2c2e4:	d42f      	bmi.n	2c346 <celt_encode_with_ec+0x2bea>
   2c2e6:	ee64 6aa4 	vmul.f32	s13, s9, s9
   2c2ea:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 2c2a4 <celt_encode_with_ec+0x2b48>
   2c2ee:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 2c2a8 <celt_encode_with_ec+0x2b4c>
   2c2f2:	ed1f 4a10 	vldr	s8, [pc, #-64]	; 2c2b4 <celt_encode_with_ec+0x2b58>
   2c2f6:	ed1f 3a12 	vldr	s6, [pc, #-72]	; 2c2b0 <celt_encode_with_ec+0x2b54>
   2c2fa:	ed5f 3a14 	vldr	s7, [pc, #-80]	; 2c2ac <celt_encode_with_ec+0x2b50>
   2c2fe:	ee37 7a66 	vsub.f32	s14, s14, s13
   2c302:	eef1 4a64 	vneg.f32	s9, s9
   2c306:	ee17 3a10 	vmov	r3, s14
   2c30a:	0dda      	lsrs	r2, r3, #23
   2c30c:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
   2c310:	eba3 53c1 	sub.w	r3, r3, r1, lsl #23
   2c314:	ee06 3a90 	vmov	s13, r3
   2c318:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
   2c31c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   2c320:	f1a2 037e 	sub.w	r3, r2, #126	; 0x7e
   2c324:	ee06 3a90 	vmov	s13, r3
   2c328:	ee67 7a27 	vmul.f32	s15, s14, s15
   2c32c:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
   2c330:	ee77 6ac4 	vsub.f32	s13, s15, s8
   2c334:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
   2c338:	ee66 6a87 	vmul.f32	s13, s13, s14
   2c33c:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
   2c340:	ee76 6a83 	vadd.f32	s13, s13, s6
   2c344:	e657      	b.n	2bff6 <celt_encode_with_ec+0x289a>
   2c346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2c34a:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 2c2b8 <celt_encode_with_ec+0x2b5c>
   2c34e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   2c352:	ed1f 4a26 	vldr	s8, [pc, #-152]	; 2c2bc <celt_encode_with_ec+0x2b60>
   2c356:	2b08      	cmp	r3, #8
   2c358:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   2c35c:	f73f ae5b 	bgt.w	2c016 <celt_encode_with_ec+0x28ba>
   2c360:	e69a      	b.n	2c098 <celt_encode_with_ec+0x293c>
   2c362:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 2c2c0 <celt_encode_with_ec+0x2b64>
   2c366:	e6d1      	b.n	2c10c <celt_encode_with_ec+0x29b0>
   2c368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   2c36c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   2c36e:	4413      	add	r3, r2
   2c370:	623b      	str	r3, [r7, #32]
   2c372:	e545      	b.n	2be00 <celt_encode_with_ec+0x26a4>
   2c374:	6738      	str	r0, [r7, #112]	; 0x70
   2c376:	6678      	str	r0, [r7, #100]	; 0x64
   2c378:	f7fd bcd6 	b.w	29d28 <celt_encode_with_ec+0x5cc>

0002c37c <opus_custom_encoder_ctl>:
   2c37c:	b40e      	push	{r1, r2, r3}
   2c37e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c382:	b082      	sub	sp, #8
   2c384:	aa09      	add	r2, sp, #36	; 0x24
   2c386:	f640 71cf 	movw	r1, #4047	; 0xfcf
   2c38a:	f852 3b04 	ldr.w	r3, [r2], #4
   2c38e:	9201      	str	r2, [sp, #4]
   2c390:	428b      	cmp	r3, r1
   2c392:	4604      	mov	r4, r0
   2c394:	f000 80de 	beq.w	2c554 <opus_custom_encoder_ctl+0x1d8>
   2c398:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
   2c39c:	da23      	bge.n	2c3e6 <opus_custom_encoder_ctl+0x6a>
   2c39e:	f640 71b4 	movw	r1, #4020	; 0xfb4
   2c3a2:	428b      	cmp	r3, r1
   2c3a4:	f000 8154 	beq.w	2c650 <opus_custom_encoder_ctl+0x2d4>
   2c3a8:	dd6d      	ble.n	2c486 <opus_custom_encoder_ctl+0x10a>
   2c3aa:	f640 71c4 	movw	r1, #4036	; 0xfc4
   2c3ae:	428b      	cmp	r3, r1
   2c3b0:	f000 8144 	beq.w	2c63c <opus_custom_encoder_ctl+0x2c0>
   2c3b4:	dc58      	bgt.n	2c468 <opus_custom_encoder_ctl+0xec>
   2c3b6:	f640 71bc 	movw	r1, #4028	; 0xfbc
   2c3ba:	428b      	cmp	r3, r1
   2c3bc:	f000 80d2 	beq.w	2c564 <opus_custom_encoder_ctl+0x1e8>
   2c3c0:	f640 71bf 	movw	r1, #4031	; 0xfbf
   2c3c4:	428b      	cmp	r3, r1
   2c3c6:	f040 80b1 	bne.w	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c3ca:	6813      	ldr	r3, [r2, #0]
   2c3cc:	3204      	adds	r2, #4
   2c3ce:	9201      	str	r2, [sp, #4]
   2c3d0:	2b00      	cmp	r3, #0
   2c3d2:	f000 8094 	beq.w	2c4fe <opus_custom_encoder_ctl+0x182>
   2c3d6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   2c3d8:	601a      	str	r2, [r3, #0]
   2c3da:	2000      	movs	r0, #0
   2c3dc:	b002      	add	sp, #8
   2c3de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c3e2:	b003      	add	sp, #12
   2c3e4:	4770      	bx	lr
   2c3e6:	f242 711f 	movw	r1, #10015	; 0x271f
   2c3ea:	428b      	cmp	r3, r1
   2c3ec:	f000 811d 	beq.w	2c62a <opus_custom_encoder_ctl+0x2ae>
   2c3f0:	dd5f      	ble.n	2c4b2 <opus_custom_encoder_ctl+0x136>
   2c3f2:	f242 7128 	movw	r1, #10024	; 0x2728
   2c3f6:	428b      	cmp	r3, r1
   2c3f8:	f000 8114 	beq.w	2c624 <opus_custom_encoder_ctl+0x2a8>
   2c3fc:	dc1f      	bgt.n	2c43e <opus_custom_encoder_ctl+0xc2>
   2c3fe:	f242 7120 	movw	r1, #10016	; 0x2720
   2c402:	428b      	cmp	r3, r1
   2c404:	f000 8107 	beq.w	2c616 <opus_custom_encoder_ctl+0x29a>
   2c408:	f242 7126 	movw	r1, #10022	; 0x2726
   2c40c:	428b      	cmp	r3, r1
   2c40e:	f040 808d 	bne.w	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c412:	6813      	ldr	r3, [r2, #0]
   2c414:	3204      	adds	r2, #4
   2c416:	9201      	str	r2, [sp, #4]
   2c418:	2b00      	cmp	r3, #0
   2c41a:	d0de      	beq.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c41c:	3478      	adds	r4, #120	; 0x78
   2c41e:	f103 0640 	add.w	r6, r3, #64	; 0x40
   2c422:	6818      	ldr	r0, [r3, #0]
   2c424:	6859      	ldr	r1, [r3, #4]
   2c426:	689a      	ldr	r2, [r3, #8]
   2c428:	68dd      	ldr	r5, [r3, #12]
   2c42a:	60e5      	str	r5, [r4, #12]
   2c42c:	3310      	adds	r3, #16
   2c42e:	42b3      	cmp	r3, r6
   2c430:	6020      	str	r0, [r4, #0]
   2c432:	6061      	str	r1, [r4, #4]
   2c434:	60a2      	str	r2, [r4, #8]
   2c436:	f104 0410 	add.w	r4, r4, #16
   2c43a:	d1f2      	bne.n	2c422 <opus_custom_encoder_ctl+0xa6>
   2c43c:	e7cd      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c43e:	f242 712a 	movw	r1, #10026	; 0x272a
   2c442:	428b      	cmp	r3, r1
   2c444:	f000 80ea 	beq.w	2c61c <opus_custom_encoder_ctl+0x2a0>
   2c448:	f242 712c 	movw	r1, #10028	; 0x272c
   2c44c:	428b      	cmp	r3, r1
   2c44e:	d16d      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c450:	6813      	ldr	r3, [r2, #0]
   2c452:	3204      	adds	r2, #4
   2c454:	9201      	str	r2, [sp, #4]
   2c456:	2b00      	cmp	r3, #0
   2c458:	d0bf      	beq.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c45a:	681a      	ldr	r2, [r3, #0]
   2c45c:	685b      	ldr	r3, [r3, #4]
   2c45e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   2c462:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
   2c466:	e7b8      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c468:	f640 71c5 	movw	r1, #4037	; 0xfc5
   2c46c:	428b      	cmp	r3, r1
   2c46e:	d06d      	beq.n	2c54c <opus_custom_encoder_ctl+0x1d0>
   2c470:	f640 71ce 	movw	r1, #4046	; 0xfce
   2c474:	428b      	cmp	r3, r1
   2c476:	d159      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c478:	6813      	ldr	r3, [r2, #0]
   2c47a:	3204      	adds	r2, #4
   2c47c:	2b01      	cmp	r3, #1
   2c47e:	9201      	str	r2, [sp, #4]
   2c480:	d83d      	bhi.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c482:	6443      	str	r3, [r0, #68]	; 0x44
   2c484:	e7a9      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c486:	f640 71a6 	movw	r1, #4006	; 0xfa6
   2c48a:	428b      	cmp	r3, r1
   2c48c:	f000 80c0 	beq.w	2c610 <opus_custom_encoder_ctl+0x294>
   2c490:	dd29      	ble.n	2c4e6 <opus_custom_encoder_ctl+0x16a>
   2c492:	f640 71aa 	movw	r1, #4010	; 0xfaa
   2c496:	428b      	cmp	r3, r1
   2c498:	f000 80b2 	beq.w	2c600 <opus_custom_encoder_ctl+0x284>
   2c49c:	f640 71ae 	movw	r1, #4014	; 0xfae
   2c4a0:	428b      	cmp	r3, r1
   2c4a2:	d143      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c4a4:	6813      	ldr	r3, [r2, #0]
   2c4a6:	3204      	adds	r2, #4
   2c4a8:	2b64      	cmp	r3, #100	; 0x64
   2c4aa:	9201      	str	r2, [sp, #4]
   2c4ac:	d827      	bhi.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c4ae:	6383      	str	r3, [r0, #56]	; 0x38
   2c4b0:	e793      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c4b2:	f242 7118 	movw	r1, #10008	; 0x2718
   2c4b6:	428b      	cmp	r3, r1
   2c4b8:	f000 809a 	beq.w	2c5f0 <opus_custom_encoder_ctl+0x274>
   2c4bc:	dd22      	ble.n	2c504 <opus_custom_encoder_ctl+0x188>
   2c4be:	f242 711a 	movw	r1, #10010	; 0x271a
   2c4c2:	428b      	cmp	r3, r1
   2c4c4:	f000 8089 	beq.w	2c5da <opus_custom_encoder_ctl+0x25e>
   2c4c8:	f242 711c 	movw	r1, #10012	; 0x271c
   2c4cc:	428b      	cmp	r3, r1
   2c4ce:	d12d      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c4d0:	6813      	ldr	r3, [r2, #0]
   2c4d2:	3204      	adds	r2, #4
   2c4d4:	2b00      	cmp	r3, #0
   2c4d6:	9201      	str	r2, [sp, #4]
   2c4d8:	dd11      	ble.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c4da:	6802      	ldr	r2, [r0, #0]
   2c4dc:	6892      	ldr	r2, [r2, #8]
   2c4de:	429a      	cmp	r2, r3
   2c4e0:	db0d      	blt.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c4e2:	6243      	str	r3, [r0, #36]	; 0x24
   2c4e4:	e779      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c4e6:	f640 71a2 	movw	r1, #4002	; 0xfa2
   2c4ea:	428b      	cmp	r3, r1
   2c4ec:	d11e      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c4ee:	6811      	ldr	r1, [r2, #0]
   2c4f0:	3204      	adds	r2, #4
   2c4f2:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2c4f6:	9201      	str	r2, [sp, #4]
   2c4f8:	dc1f      	bgt.n	2c53a <opus_custom_encoder_ctl+0x1be>
   2c4fa:	1c4b      	adds	r3, r1, #1
   2c4fc:	d01d      	beq.n	2c53a <opus_custom_encoder_ctl+0x1be>
   2c4fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c502:	e76b      	b.n	2c3dc <opus_custom_encoder_ctl+0x60>
   2c504:	f242 7112 	movw	r1, #10002	; 0x2712
   2c508:	428b      	cmp	r3, r1
   2c50a:	d10f      	bne.n	2c52c <opus_custom_encoder_ctl+0x1b0>
   2c50c:	6813      	ldr	r3, [r2, #0]
   2c50e:	3204      	adds	r2, #4
   2c510:	2b02      	cmp	r3, #2
   2c512:	9201      	str	r2, [sp, #4]
   2c514:	d8f3      	bhi.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c516:	fab3 f283 	clz	r2, r3
   2c51a:	2b01      	cmp	r3, #1
   2c51c:	ea4f 1252 	mov.w	r2, r2, lsr #5
   2c520:	bfcc      	ite	gt
   2c522:	2300      	movgt	r3, #0
   2c524:	2301      	movle	r3, #1
   2c526:	60c2      	str	r2, [r0, #12]
   2c528:	6143      	str	r3, [r0, #20]
   2c52a:	e756      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c52c:	f06f 0004 	mvn.w	r0, #4
   2c530:	b002      	add	sp, #8
   2c532:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c536:	b003      	add	sp, #12
   2c538:	4770      	bx	lr
   2c53a:	6863      	ldr	r3, [r4, #4]
   2c53c:	4a46      	ldr	r2, [pc, #280]	; (2c658 <opus_custom_encoder_ctl+0x2dc>)
   2c53e:	fb02 f303 	mul.w	r3, r2, r3
   2c542:	428b      	cmp	r3, r1
   2c544:	bfa8      	it	ge
   2c546:	460b      	movge	r3, r1
   2c548:	62a3      	str	r3, [r4, #40]	; 0x28
   2c54a:	e746      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c54c:	6813      	ldr	r3, [r2, #0]
   2c54e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   2c550:	601a      	str	r2, [r3, #0]
   2c552:	e742      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c556:	3204      	adds	r2, #4
   2c558:	9201      	str	r2, [sp, #4]
   2c55a:	2b00      	cmp	r3, #0
   2c55c:	d0cf      	beq.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c55e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2c560:	601a      	str	r2, [r3, #0]
   2c562:	e73a      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c564:	4603      	mov	r3, r0
   2c566:	f8d0 8004 	ldr.w	r8, [r0, #4]
   2c56a:	f853 9bf4 	ldr.w	r9, [r3], #244
   2c56e:	e9d9 1001 	ldrd	r1, r0, [r9, #4]
   2c572:	f501 6180 	add.w	r1, r1, #1024	; 0x400
   2c576:	fb08 f101 	mul.w	r1, r8, r1
   2c57a:	fb00 f708 	mul.w	r7, r0, r8
   2c57e:	f101 023d 	add.w	r2, r1, #61	; 0x3d
   2c582:	00be      	lsls	r6, r7, #2
   2c584:	4432      	add	r2, r6
   2c586:	0092      	lsls	r2, r2, #2
   2c588:	19cd      	adds	r5, r1, r7
   2c58a:	3a4c      	subs	r2, #76	; 0x4c
   2c58c:	2100      	movs	r1, #0
   2c58e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2c592:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   2c596:	f7df fee1 	bl	c35c <memset>
   2c59a:	f8d9 0008 	ldr.w	r0, [r9, #8]
   2c59e:	fb00 f008 	mul.w	r0, r0, r8
   2c5a2:	2800      	cmp	r0, #0
   2c5a4:	dd0b      	ble.n	2c5be <opus_custom_encoder_ctl+0x242>
   2c5a6:	4438      	add	r0, r7
   2c5a8:	492c      	ldr	r1, [pc, #176]	; (2c65c <opus_custom_encoder_ctl+0x2e0>)
   2c5aa:	462a      	mov	r2, r5
   2c5ac:	19ab      	adds	r3, r5, r6
   2c5ae:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2c5b2:	f843 1b04 	str.w	r1, [r3], #4
   2c5b6:	4298      	cmp	r0, r3
   2c5b8:	f842 1b04 	str.w	r1, [r2], #4
   2c5bc:	d1f9      	bne.n	2c5b2 <opus_custom_encoder_ctl+0x236>
   2c5be:	2300      	movs	r3, #0
   2c5c0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   2c5c4:	2102      	movs	r1, #2
   2c5c6:	f44f 7280 	mov.w	r2, #256	; 0x100
   2c5ca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
   2c5ce:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   2c5d2:	6560      	str	r0, [r4, #84]	; 0x54
   2c5d4:	6521      	str	r1, [r4, #80]	; 0x50
   2c5d6:	65a2      	str	r2, [r4, #88]	; 0x58
   2c5d8:	e6ff      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c5da:	6813      	ldr	r3, [r2, #0]
   2c5dc:	3204      	adds	r2, #4
   2c5de:	2b00      	cmp	r3, #0
   2c5e0:	9201      	str	r2, [sp, #4]
   2c5e2:	db8c      	blt.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c5e4:	6802      	ldr	r2, [r0, #0]
   2c5e6:	6892      	ldr	r2, [r2, #8]
   2c5e8:	429a      	cmp	r2, r3
   2c5ea:	dd88      	ble.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c5ec:	6203      	str	r3, [r0, #32]
   2c5ee:	e6f4      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c5f0:	6813      	ldr	r3, [r2, #0]
   2c5f2:	1e59      	subs	r1, r3, #1
   2c5f4:	3204      	adds	r2, #4
   2c5f6:	2901      	cmp	r1, #1
   2c5f8:	9201      	str	r2, [sp, #4]
   2c5fa:	d880      	bhi.n	2c4fe <opus_custom_encoder_ctl+0x182>
   2c5fc:	6083      	str	r3, [r0, #8]
   2c5fe:	e6ec      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c600:	6813      	ldr	r3, [r2, #0]
   2c602:	3204      	adds	r2, #4
   2c604:	2b0a      	cmp	r3, #10
   2c606:	9201      	str	r2, [sp, #4]
   2c608:	f63f af79 	bhi.w	2c4fe <opus_custom_encoder_ctl+0x182>
   2c60c:	6183      	str	r3, [r0, #24]
   2c60e:	e6e4      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c610:	6813      	ldr	r3, [r2, #0]
   2c612:	62c3      	str	r3, [r0, #44]	; 0x2c
   2c614:	e6e1      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c616:	6813      	ldr	r3, [r2, #0]
   2c618:	6303      	str	r3, [r0, #48]	; 0x30
   2c61a:	e6de      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c61c:	6813      	ldr	r3, [r2, #0]
   2c61e:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
   2c622:	e6da      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c624:	6813      	ldr	r3, [r2, #0]
   2c626:	6403      	str	r3, [r0, #64]	; 0x40
   2c628:	e6d7      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c62a:	6813      	ldr	r3, [r2, #0]
   2c62c:	3204      	adds	r2, #4
   2c62e:	9201      	str	r2, [sp, #4]
   2c630:	2b00      	cmp	r3, #0
   2c632:	f43f af64 	beq.w	2c4fe <opus_custom_encoder_ctl+0x182>
   2c636:	6802      	ldr	r2, [r0, #0]
   2c638:	601a      	str	r2, [r3, #0]
   2c63a:	e6ce      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c63c:	6813      	ldr	r3, [r2, #0]
   2c63e:	f1a3 0108 	sub.w	r1, r3, #8
   2c642:	3204      	adds	r2, #4
   2c644:	2910      	cmp	r1, #16
   2c646:	9201      	str	r2, [sp, #4]
   2c648:	f63f af59 	bhi.w	2c4fe <opus_custom_encoder_ctl+0x182>
   2c64c:	63c3      	str	r3, [r0, #60]	; 0x3c
   2c64e:	e6c4      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c650:	6813      	ldr	r3, [r2, #0]
   2c652:	6343      	str	r3, [r0, #52]	; 0x34
   2c654:	e6c1      	b.n	2c3da <opus_custom_encoder_ctl+0x5e>
   2c656:	bf00      	nop
   2c658:	0003f7a0 	.word	0x0003f7a0
   2c65c:	c1e00000 	.word	0xc1e00000

0002c660 <celt_encoder_init>:
   2c660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c664:	4615      	mov	r5, r2
   2c666:	4604      	mov	r4, r0
   2c668:	4688      	mov	r8, r1
   2c66a:	2200      	movs	r2, #0
   2c66c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   2c670:	f64b 3080 	movw	r0, #48000	; 0xbb80
   2c674:	4699      	mov	r9, r3
   2c676:	f000 fd2f 	bl	2d0d8 <opus_custom_mode_create>
   2c67a:	2d02      	cmp	r5, #2
   2c67c:	d837      	bhi.n	2c6ee <celt_encoder_init+0x8e>
   2c67e:	b39c      	cbz	r4, 2c6e8 <celt_encoder_init+0x88>
   2c680:	4607      	mov	r7, r0
   2c682:	b388      	cbz	r0, 2c6e8 <celt_encoder_init+0x88>
   2c684:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2c688:	02a9      	lsls	r1, r5, #10
   2c68a:	313d      	adds	r1, #61	; 0x3d
   2c68c:	fb03 f305 	mul.w	r3, r3, r5
   2c690:	fb02 1205 	mla	r2, r2, r5, r1
   2c694:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2c698:	0092      	lsls	r2, r2, #2
   2c69a:	2100      	movs	r1, #0
   2c69c:	4620      	mov	r0, r4
   2c69e:	f7df fe5d 	bl	c35c <memset>
   2c6a2:	68fa      	ldr	r2, [r7, #12]
   2c6a4:	6262      	str	r2, [r4, #36]	; 0x24
   2c6a6:	2301      	movs	r3, #1
   2c6a8:	2600      	movs	r6, #0
   2c6aa:	2218      	movs	r2, #24
   2c6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c6b0:	2105      	movs	r1, #5
   2c6b2:	61e3      	str	r3, [r4, #28]
   2c6b4:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
   2c6b8:	6123      	str	r3, [r4, #16]
   2c6ba:	62a0      	str	r0, [r4, #40]	; 0x28
   2c6bc:	61a1      	str	r1, [r4, #24]
   2c6be:	63e2      	str	r2, [r4, #60]	; 0x3c
   2c6c0:	f640 71bc 	movw	r1, #4028	; 0xfbc
   2c6c4:	6027      	str	r7, [r4, #0]
   2c6c6:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2c6ca:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
   2c6ce:	6226      	str	r6, [r4, #32]
   2c6d0:	62e6      	str	r6, [r4, #44]	; 0x2c
   2c6d2:	60e6      	str	r6, [r4, #12]
   2c6d4:	4620      	mov	r0, r4
   2c6d6:	f7ff fe51 	bl	2c37c <opus_custom_encoder_ctl>
   2c6da:	4640      	mov	r0, r8
   2c6dc:	f007 f8e6 	bl	338ac <resampling_factor>
   2c6e0:	61e0      	str	r0, [r4, #28]
   2c6e2:	4630      	mov	r0, r6
   2c6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c6e8:	f06f 0606 	mvn.w	r6, #6
   2c6ec:	e7f9      	b.n	2c6e2 <celt_encoder_init+0x82>
   2c6ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c6f2:	e7f6      	b.n	2c6e2 <celt_encoder_init+0x82>

0002c6f4 <ec_tell_frac>:
   2c6f4:	69c2      	ldr	r2, [r0, #28]
   2c6f6:	6940      	ldr	r0, [r0, #20]
   2c6f8:	fab2 f382 	clz	r3, r2
   2c6fc:	f1c3 0110 	rsb	r1, r3, #16
   2c700:	40ca      	lsrs	r2, r1
   2c702:	0b11      	lsrs	r1, r2, #12
   2c704:	b410      	push	{r4}
   2c706:	3908      	subs	r1, #8
   2c708:	4c07      	ldr	r4, [pc, #28]	; (2c728 <ec_tell_frac+0x34>)
   2c70a:	f1c3 0320 	rsb	r3, r3, #32
   2c70e:	00db      	lsls	r3, r3, #3
   2c710:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
   2c714:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   2c718:	f85d 4b04 	ldr.w	r4, [sp], #4
   2c71c:	1a5b      	subs	r3, r3, r1
   2c71e:	4290      	cmp	r0, r2
   2c720:	bf2c      	ite	cs
   2c722:	4618      	movcs	r0, r3
   2c724:	1e58      	subcc	r0, r3, #1
   2c726:	4770      	bx	lr
   2c728:	0003d810 	.word	0x0003d810

0002c72c <ec_enc_init>:
   2c72c:	b470      	push	{r4, r5, r6}
   2c72e:	2300      	movs	r3, #0
   2c730:	2621      	movs	r6, #33	; 0x21
   2c732:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   2c736:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2c73a:	6146      	str	r6, [r0, #20]
   2c73c:	61c5      	str	r5, [r0, #28]
   2c73e:	6284      	str	r4, [r0, #40]	; 0x28
   2c740:	6001      	str	r1, [r0, #0]
   2c742:	6042      	str	r2, [r0, #4]
   2c744:	e9c0 3302 	strd	r3, r3, [r0, #8]
   2c748:	6103      	str	r3, [r0, #16]
   2c74a:	6183      	str	r3, [r0, #24]
   2c74c:	e9c0 3308 	strd	r3, r3, [r0, #32]
   2c750:	62c3      	str	r3, [r0, #44]	; 0x2c
   2c752:	bc70      	pop	{r4, r5, r6}
   2c754:	4770      	bx	lr
   2c756:	bf00      	nop

0002c758 <ec_encode>:
   2c758:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c75a:	69c5      	ldr	r5, [r0, #28]
   2c75c:	fbb5 f4f3 	udiv	r4, r5, r3
   2c760:	2900      	cmp	r1, #0
   2c762:	d052      	beq.n	2c80a <ec_encode+0xb2>
   2c764:	6a06      	ldr	r6, [r0, #32]
   2c766:	1a5b      	subs	r3, r3, r1
   2c768:	4435      	add	r5, r6
   2c76a:	fb04 5313 	mls	r3, r4, r3, r5
   2c76e:	1a52      	subs	r2, r2, r1
   2c770:	fb04 f402 	mul.w	r4, r4, r2
   2c774:	6203      	str	r3, [r0, #32]
   2c776:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2c77a:	61c4      	str	r4, [r0, #28]
   2c77c:	d840      	bhi.n	2c800 <ec_encode+0xa8>
   2c77e:	6a03      	ldr	r3, [r0, #32]
   2c780:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c784:	0ddc      	lsrs	r4, r3, #23
   2c786:	2cff      	cmp	r4, #255	; 0xff
   2c788:	d03b      	beq.n	2c802 <ec_encode+0xaa>
   2c78a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2c78c:	2a00      	cmp	r2, #0
   2c78e:	ea4f 2524 	mov.w	r5, r4, asr #8
   2c792:	db0c      	blt.n	2c7ae <ec_encode+0x56>
   2c794:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c798:	6983      	ldr	r3, [r0, #24]
   2c79a:	4419      	add	r1, r3
   2c79c:	42b9      	cmp	r1, r7
   2c79e:	442a      	add	r2, r5
   2c7a0:	d23d      	bcs.n	2c81e <ec_encode+0xc6>
   2c7a2:	6801      	ldr	r1, [r0, #0]
   2c7a4:	1c5f      	adds	r7, r3, #1
   2c7a6:	6187      	str	r7, [r0, #24]
   2c7a8:	54ca      	strb	r2, [r1, r3]
   2c7aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c7ac:	62c3      	str	r3, [r0, #44]	; 0x2c
   2c7ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c7b0:	b1b2      	cbz	r2, 2c7e0 <ec_encode+0x88>
   2c7b2:	6983      	ldr	r3, [r0, #24]
   2c7b4:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c7b8:	35ff      	adds	r5, #255	; 0xff
   2c7ba:	e002      	b.n	2c7c2 <ec_encode+0x6a>
   2c7bc:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c7c0:	6983      	ldr	r3, [r0, #24]
   2c7c2:	eb03 0e01 	add.w	lr, r3, r1
   2c7c6:	45be      	cmp	lr, r7
   2c7c8:	f103 0c01 	add.w	ip, r3, #1
   2c7cc:	d221      	bcs.n	2c812 <ec_encode+0xba>
   2c7ce:	6802      	ldr	r2, [r0, #0]
   2c7d0:	f8c0 c018 	str.w	ip, [r0, #24]
   2c7d4:	54d5      	strb	r5, [r2, r3]
   2c7d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c7d8:	3a01      	subs	r2, #1
   2c7da:	6242      	str	r2, [r0, #36]	; 0x24
   2c7dc:	2a00      	cmp	r2, #0
   2c7de:	d1ed      	bne.n	2c7bc <ec_encode+0x64>
   2c7e0:	b2e4      	uxtb	r4, r4
   2c7e2:	6a03      	ldr	r3, [r0, #32]
   2c7e4:	6284      	str	r4, [r0, #40]	; 0x28
   2c7e6:	69c2      	ldr	r2, [r0, #28]
   2c7e8:	6941      	ldr	r1, [r0, #20]
   2c7ea:	0212      	lsls	r2, r2, #8
   2c7ec:	021b      	lsls	r3, r3, #8
   2c7ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2c7f2:	3108      	adds	r1, #8
   2c7f4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2c7f8:	e9c0 2307 	strd	r2, r3, [r0, #28]
   2c7fc:	6141      	str	r1, [r0, #20]
   2c7fe:	d9c1      	bls.n	2c784 <ec_encode+0x2c>
   2c800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c802:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c804:	3201      	adds	r2, #1
   2c806:	6242      	str	r2, [r0, #36]	; 0x24
   2c808:	e7ed      	b.n	2c7e6 <ec_encode+0x8e>
   2c80a:	1a9b      	subs	r3, r3, r2
   2c80c:	fb04 5413 	mls	r4, r4, r3, r5
   2c810:	e7b1      	b.n	2c776 <ec_encode+0x1e>
   2c812:	3a01      	subs	r2, #1
   2c814:	6242      	str	r2, [r0, #36]	; 0x24
   2c816:	62c6      	str	r6, [r0, #44]	; 0x2c
   2c818:	2a00      	cmp	r2, #0
   2c81a:	d1d2      	bne.n	2c7c2 <ec_encode+0x6a>
   2c81c:	e7e0      	b.n	2c7e0 <ec_encode+0x88>
   2c81e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c822:	e7c3      	b.n	2c7ac <ec_encode+0x54>

0002c824 <ec_encode_bin>:
   2c824:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c826:	69c6      	ldr	r6, [r0, #28]
   2c828:	2401      	movs	r4, #1
   2c82a:	fa26 f503 	lsr.w	r5, r6, r3
   2c82e:	409c      	lsls	r4, r3
   2c830:	2900      	cmp	r1, #0
   2c832:	d052      	beq.n	2c8da <ec_encode_bin+0xb6>
   2c834:	6a03      	ldr	r3, [r0, #32]
   2c836:	1a64      	subs	r4, r4, r1
   2c838:	441e      	add	r6, r3
   2c83a:	fb05 6414 	mls	r4, r5, r4, r6
   2c83e:	1a52      	subs	r2, r2, r1
   2c840:	fb05 f502 	mul.w	r5, r5, r2
   2c844:	6204      	str	r4, [r0, #32]
   2c846:	f5b5 0f00 	cmp.w	r5, #8388608	; 0x800000
   2c84a:	61c5      	str	r5, [r0, #28]
   2c84c:	d840      	bhi.n	2c8d0 <ec_encode_bin+0xac>
   2c84e:	6a03      	ldr	r3, [r0, #32]
   2c850:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c854:	0ddc      	lsrs	r4, r3, #23
   2c856:	2cff      	cmp	r4, #255	; 0xff
   2c858:	d03b      	beq.n	2c8d2 <ec_encode_bin+0xae>
   2c85a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2c85c:	2a00      	cmp	r2, #0
   2c85e:	ea4f 2524 	mov.w	r5, r4, asr #8
   2c862:	db0c      	blt.n	2c87e <ec_encode_bin+0x5a>
   2c864:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c868:	6983      	ldr	r3, [r0, #24]
   2c86a:	4419      	add	r1, r3
   2c86c:	42b9      	cmp	r1, r7
   2c86e:	442a      	add	r2, r5
   2c870:	d23d      	bcs.n	2c8ee <ec_encode_bin+0xca>
   2c872:	6801      	ldr	r1, [r0, #0]
   2c874:	1c5f      	adds	r7, r3, #1
   2c876:	6187      	str	r7, [r0, #24]
   2c878:	54ca      	strb	r2, [r1, r3]
   2c87a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c87c:	62c3      	str	r3, [r0, #44]	; 0x2c
   2c87e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c880:	b1b2      	cbz	r2, 2c8b0 <ec_encode_bin+0x8c>
   2c882:	6983      	ldr	r3, [r0, #24]
   2c884:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c888:	35ff      	adds	r5, #255	; 0xff
   2c88a:	e002      	b.n	2c892 <ec_encode_bin+0x6e>
   2c88c:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c890:	6983      	ldr	r3, [r0, #24]
   2c892:	eb03 0e01 	add.w	lr, r3, r1
   2c896:	45be      	cmp	lr, r7
   2c898:	f103 0c01 	add.w	ip, r3, #1
   2c89c:	d221      	bcs.n	2c8e2 <ec_encode_bin+0xbe>
   2c89e:	6802      	ldr	r2, [r0, #0]
   2c8a0:	f8c0 c018 	str.w	ip, [r0, #24]
   2c8a4:	54d5      	strb	r5, [r2, r3]
   2c8a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c8a8:	3a01      	subs	r2, #1
   2c8aa:	6242      	str	r2, [r0, #36]	; 0x24
   2c8ac:	2a00      	cmp	r2, #0
   2c8ae:	d1ed      	bne.n	2c88c <ec_encode_bin+0x68>
   2c8b0:	b2e4      	uxtb	r4, r4
   2c8b2:	6a03      	ldr	r3, [r0, #32]
   2c8b4:	6284      	str	r4, [r0, #40]	; 0x28
   2c8b6:	69c2      	ldr	r2, [r0, #28]
   2c8b8:	6941      	ldr	r1, [r0, #20]
   2c8ba:	0212      	lsls	r2, r2, #8
   2c8bc:	021b      	lsls	r3, r3, #8
   2c8be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2c8c2:	3108      	adds	r1, #8
   2c8c4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2c8c8:	e9c0 2307 	strd	r2, r3, [r0, #28]
   2c8cc:	6141      	str	r1, [r0, #20]
   2c8ce:	d9c1      	bls.n	2c854 <ec_encode_bin+0x30>
   2c8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c8d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c8d4:	3201      	adds	r2, #1
   2c8d6:	6242      	str	r2, [r0, #36]	; 0x24
   2c8d8:	e7ed      	b.n	2c8b6 <ec_encode_bin+0x92>
   2c8da:	1aa4      	subs	r4, r4, r2
   2c8dc:	fb05 6514 	mls	r5, r5, r4, r6
   2c8e0:	e7b1      	b.n	2c846 <ec_encode_bin+0x22>
   2c8e2:	3a01      	subs	r2, #1
   2c8e4:	6242      	str	r2, [r0, #36]	; 0x24
   2c8e6:	62c6      	str	r6, [r0, #44]	; 0x2c
   2c8e8:	2a00      	cmp	r2, #0
   2c8ea:	d1d2      	bne.n	2c892 <ec_encode_bin+0x6e>
   2c8ec:	e7e0      	b.n	2c8b0 <ec_encode_bin+0x8c>
   2c8ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c8f2:	e7c3      	b.n	2c87c <ec_encode_bin+0x58>

0002c8f4 <ec_enc_bit_logp>:
   2c8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8f6:	e9d0 4307 	ldrd	r4, r3, [r0, #28]
   2c8fa:	fa24 f202 	lsr.w	r2, r4, r2
   2c8fe:	1aa4      	subs	r4, r4, r2
   2c900:	b111      	cbz	r1, 2c908 <ec_enc_bit_logp+0x14>
   2c902:	4423      	add	r3, r4
   2c904:	6203      	str	r3, [r0, #32]
   2c906:	4614      	mov	r4, r2
   2c908:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2c90c:	61c4      	str	r4, [r0, #28]
   2c90e:	d83f      	bhi.n	2c990 <ec_enc_bit_logp+0x9c>
   2c910:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c914:	0ddc      	lsrs	r4, r3, #23
   2c916:	2cff      	cmp	r4, #255	; 0xff
   2c918:	d03b      	beq.n	2c992 <ec_enc_bit_logp+0x9e>
   2c91a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2c91c:	2a00      	cmp	r2, #0
   2c91e:	ea4f 2524 	mov.w	r5, r4, asr #8
   2c922:	db0c      	blt.n	2c93e <ec_enc_bit_logp+0x4a>
   2c924:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
   2c928:	6983      	ldr	r3, [r0, #24]
   2c92a:	4419      	add	r1, r3
   2c92c:	42b1      	cmp	r1, r6
   2c92e:	442a      	add	r2, r5
   2c930:	d239      	bcs.n	2c9a6 <ec_enc_bit_logp+0xb2>
   2c932:	6801      	ldr	r1, [r0, #0]
   2c934:	1c5e      	adds	r6, r3, #1
   2c936:	6186      	str	r6, [r0, #24]
   2c938:	54ca      	strb	r2, [r1, r3]
   2c93a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2c93c:	62c3      	str	r3, [r0, #44]	; 0x2c
   2c93e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c940:	b1b2      	cbz	r2, 2c970 <ec_enc_bit_logp+0x7c>
   2c942:	6983      	ldr	r3, [r0, #24]
   2c944:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
   2c948:	35ff      	adds	r5, #255	; 0xff
   2c94a:	e002      	b.n	2c952 <ec_enc_bit_logp+0x5e>
   2c94c:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
   2c950:	6983      	ldr	r3, [r0, #24]
   2c952:	eb03 0e01 	add.w	lr, r3, r1
   2c956:	45b6      	cmp	lr, r6
   2c958:	f103 0c01 	add.w	ip, r3, #1
   2c95c:	d21d      	bcs.n	2c99a <ec_enc_bit_logp+0xa6>
   2c95e:	6802      	ldr	r2, [r0, #0]
   2c960:	f8c0 c018 	str.w	ip, [r0, #24]
   2c964:	54d5      	strb	r5, [r2, r3]
   2c966:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c968:	3a01      	subs	r2, #1
   2c96a:	6242      	str	r2, [r0, #36]	; 0x24
   2c96c:	2a00      	cmp	r2, #0
   2c96e:	d1ed      	bne.n	2c94c <ec_enc_bit_logp+0x58>
   2c970:	b2e4      	uxtb	r4, r4
   2c972:	6a03      	ldr	r3, [r0, #32]
   2c974:	6284      	str	r4, [r0, #40]	; 0x28
   2c976:	69c2      	ldr	r2, [r0, #28]
   2c978:	6941      	ldr	r1, [r0, #20]
   2c97a:	0212      	lsls	r2, r2, #8
   2c97c:	021b      	lsls	r3, r3, #8
   2c97e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2c982:	3108      	adds	r1, #8
   2c984:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2c988:	e9c0 2307 	strd	r2, r3, [r0, #28]
   2c98c:	6141      	str	r1, [r0, #20]
   2c98e:	d9c1      	bls.n	2c914 <ec_enc_bit_logp+0x20>
   2c990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c992:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2c994:	3201      	adds	r2, #1
   2c996:	6242      	str	r2, [r0, #36]	; 0x24
   2c998:	e7ed      	b.n	2c976 <ec_enc_bit_logp+0x82>
   2c99a:	3a01      	subs	r2, #1
   2c99c:	6242      	str	r2, [r0, #36]	; 0x24
   2c99e:	62c7      	str	r7, [r0, #44]	; 0x2c
   2c9a0:	2a00      	cmp	r2, #0
   2c9a2:	d1d6      	bne.n	2c952 <ec_enc_bit_logp+0x5e>
   2c9a4:	e7e4      	b.n	2c970 <ec_enc_bit_logp+0x7c>
   2c9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9aa:	e7c7      	b.n	2c93c <ec_enc_bit_logp+0x48>

0002c9ac <ec_enc_icdf>:
   2c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c9ae:	69c4      	ldr	r4, [r0, #28]
   2c9b0:	2900      	cmp	r1, #0
   2c9b2:	fa24 f303 	lsr.w	r3, r4, r3
   2c9b6:	dd55      	ble.n	2ca64 <ec_enc_icdf+0xb8>
   2c9b8:	1e4e      	subs	r6, r1, #1
   2c9ba:	6a07      	ldr	r7, [r0, #32]
   2c9bc:	5d95      	ldrb	r5, [r2, r6]
   2c9be:	443c      	add	r4, r7
   2c9c0:	fb03 4415 	mls	r4, r3, r5, r4
   2c9c4:	6204      	str	r4, [r0, #32]
   2c9c6:	5d94      	ldrb	r4, [r2, r6]
   2c9c8:	5c52      	ldrb	r2, [r2, r1]
   2c9ca:	1aa4      	subs	r4, r4, r2
   2c9cc:	fb03 f304 	mul.w	r3, r3, r4
   2c9d0:	61c3      	str	r3, [r0, #28]
   2c9d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2c9d6:	d840      	bhi.n	2ca5a <ec_enc_icdf+0xae>
   2c9d8:	6a03      	ldr	r3, [r0, #32]
   2c9da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c9de:	0ddc      	lsrs	r4, r3, #23
   2c9e0:	2cff      	cmp	r4, #255	; 0xff
   2c9e2:	d03b      	beq.n	2ca5c <ec_enc_icdf+0xb0>
   2c9e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2c9e6:	2a00      	cmp	r2, #0
   2c9e8:	ea4f 2524 	mov.w	r5, r4, asr #8
   2c9ec:	db0c      	blt.n	2ca08 <ec_enc_icdf+0x5c>
   2c9ee:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2c9f2:	6983      	ldr	r3, [r0, #24]
   2c9f4:	4419      	add	r1, r3
   2c9f6:	42b9      	cmp	r1, r7
   2c9f8:	442a      	add	r2, r5
   2c9fa:	d23e      	bcs.n	2ca7a <ec_enc_icdf+0xce>
   2c9fc:	6801      	ldr	r1, [r0, #0]
   2c9fe:	1c5f      	adds	r7, r3, #1
   2ca00:	6187      	str	r7, [r0, #24]
   2ca02:	54ca      	strb	r2, [r1, r3]
   2ca04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ca06:	62c3      	str	r3, [r0, #44]	; 0x2c
   2ca08:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2ca0a:	b1b2      	cbz	r2, 2ca3a <ec_enc_icdf+0x8e>
   2ca0c:	6983      	ldr	r3, [r0, #24]
   2ca0e:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2ca12:	35ff      	adds	r5, #255	; 0xff
   2ca14:	e002      	b.n	2ca1c <ec_enc_icdf+0x70>
   2ca16:	e9d0 7101 	ldrd	r7, r1, [r0, #4]
   2ca1a:	6983      	ldr	r3, [r0, #24]
   2ca1c:	eb03 0e01 	add.w	lr, r3, r1
   2ca20:	45be      	cmp	lr, r7
   2ca22:	f103 0c01 	add.w	ip, r3, #1
   2ca26:	d222      	bcs.n	2ca6e <ec_enc_icdf+0xc2>
   2ca28:	6802      	ldr	r2, [r0, #0]
   2ca2a:	f8c0 c018 	str.w	ip, [r0, #24]
   2ca2e:	54d5      	strb	r5, [r2, r3]
   2ca30:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2ca32:	3a01      	subs	r2, #1
   2ca34:	6242      	str	r2, [r0, #36]	; 0x24
   2ca36:	2a00      	cmp	r2, #0
   2ca38:	d1ed      	bne.n	2ca16 <ec_enc_icdf+0x6a>
   2ca3a:	b2e4      	uxtb	r4, r4
   2ca3c:	6a03      	ldr	r3, [r0, #32]
   2ca3e:	6284      	str	r4, [r0, #40]	; 0x28
   2ca40:	69c2      	ldr	r2, [r0, #28]
   2ca42:	6941      	ldr	r1, [r0, #20]
   2ca44:	0212      	lsls	r2, r2, #8
   2ca46:	021b      	lsls	r3, r3, #8
   2ca48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2ca4c:	3108      	adds	r1, #8
   2ca4e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   2ca52:	e9c0 2307 	strd	r2, r3, [r0, #28]
   2ca56:	6141      	str	r1, [r0, #20]
   2ca58:	d9c1      	bls.n	2c9de <ec_enc_icdf+0x32>
   2ca5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ca5c:	6a42      	ldr	r2, [r0, #36]	; 0x24
   2ca5e:	3201      	adds	r2, #1
   2ca60:	6242      	str	r2, [r0, #36]	; 0x24
   2ca62:	e7ed      	b.n	2ca40 <ec_enc_icdf+0x94>
   2ca64:	5c52      	ldrb	r2, [r2, r1]
   2ca66:	fb03 4312 	mls	r3, r3, r2, r4
   2ca6a:	61c3      	str	r3, [r0, #28]
   2ca6c:	e7b1      	b.n	2c9d2 <ec_enc_icdf+0x26>
   2ca6e:	3a01      	subs	r2, #1
   2ca70:	6242      	str	r2, [r0, #36]	; 0x24
   2ca72:	62c6      	str	r6, [r0, #44]	; 0x2c
   2ca74:	2a00      	cmp	r2, #0
   2ca76:	d1d1      	bne.n	2ca1c <ec_enc_icdf+0x70>
   2ca78:	e7df      	b.n	2ca3a <ec_enc_icdf+0x8e>
   2ca7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ca7e:	e7c2      	b.n	2ca06 <ec_enc_icdf+0x5a>

0002ca80 <ec_enc_uint>:
   2ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ca84:	1e57      	subs	r7, r2, #1
   2ca86:	fab7 f587 	clz	r5, r7
   2ca8a:	f1c5 0320 	rsb	r3, r5, #32
   2ca8e:	2b08      	cmp	r3, #8
   2ca90:	460e      	mov	r6, r1
   2ca92:	dd39      	ble.n	2cb08 <ec_enc_uint+0x88>
   2ca94:	f1c5 0518 	rsb	r5, r5, #24
   2ca98:	40e9      	lsrs	r1, r5
   2ca9a:	fa27 f305 	lsr.w	r3, r7, r5
   2ca9e:	1c4a      	adds	r2, r1, #1
   2caa0:	3301      	adds	r3, #1
   2caa2:	4604      	mov	r4, r0
   2caa4:	f7ff fe58 	bl	2c758 <ec_encode>
   2caa8:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
   2caac:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2cab0:	1959      	adds	r1, r3, r5
   2cab2:	fa0e f205 	lsl.w	r2, lr, r5
   2cab6:	2920      	cmp	r1, #32
   2cab8:	ea26 0602 	bic.w	r6, r6, r2
   2cabc:	d91a      	bls.n	2caf4 <ec_enc_uint+0x74>
   2cabe:	e9d4 1701 	ldrd	r1, r7, [r4, #4]
   2cac2:	f8d4 c018 	ldr.w	ip, [r4, #24]
   2cac6:	46f1      	mov	r9, lr
   2cac8:	e003      	b.n	2cad2 <ec_enc_uint+0x52>
   2caca:	e9d4 1701 	ldrd	r1, r7, [r4, #4]
   2cace:	f8d4 c018 	ldr.w	ip, [r4, #24]
   2cad2:	eb07 080c 	add.w	r8, r7, ip
   2cad6:	1c7a      	adds	r2, r7, #1
   2cad8:	4588      	cmp	r8, r1
   2cada:	eba1 0e02 	sub.w	lr, r1, r2
   2cade:	d219      	bcs.n	2cb14 <ec_enc_uint+0x94>
   2cae0:	6821      	ldr	r1, [r4, #0]
   2cae2:	60a2      	str	r2, [r4, #8]
   2cae4:	3b08      	subs	r3, #8
   2cae6:	2b07      	cmp	r3, #7
   2cae8:	f801 000e 	strb.w	r0, [r1, lr]
   2caec:	ea4f 2010 	mov.w	r0, r0, lsr #8
   2caf0:	dceb      	bgt.n	2caca <ec_enc_uint+0x4a>
   2caf2:	1959      	adds	r1, r3, r5
   2caf4:	6962      	ldr	r2, [r4, #20]
   2caf6:	6121      	str	r1, [r4, #16]
   2caf8:	fa06 f303 	lsl.w	r3, r6, r3
   2cafc:	4318      	orrs	r0, r3
   2cafe:	4415      	add	r5, r2
   2cb00:	60e0      	str	r0, [r4, #12]
   2cb02:	6165      	str	r5, [r4, #20]
   2cb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cb08:	4613      	mov	r3, r2
   2cb0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cb0e:	1c4a      	adds	r2, r1, #1
   2cb10:	f7ff be22 	b.w	2c758 <ec_encode>
   2cb14:	3b08      	subs	r3, #8
   2cb16:	2b07      	cmp	r3, #7
   2cb18:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
   2cb1c:	ea4f 2010 	mov.w	r0, r0, lsr #8
   2cb20:	dcd7      	bgt.n	2cad2 <ec_enc_uint+0x52>
   2cb22:	e7e6      	b.n	2caf2 <ec_enc_uint+0x72>

0002cb24 <ec_enc_bits>:
   2cb24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cb28:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
   2cb2c:	189d      	adds	r5, r3, r2
   2cb2e:	2d20      	cmp	r5, #32
   2cb30:	4690      	mov	r8, r2
   2cb32:	d91a      	bls.n	2cb6a <ec_enc_bits+0x46>
   2cb34:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   2cb38:	6982      	ldr	r2, [r0, #24]
   2cb3a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2cb3e:	e002      	b.n	2cb46 <ec_enc_bits+0x22>
   2cb40:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
   2cb44:	6982      	ldr	r2, [r0, #24]
   2cb46:	eb06 0c02 	add.w	ip, r6, r2
   2cb4a:	1c77      	adds	r7, r6, #1
   2cb4c:	45ac      	cmp	ip, r5
   2cb4e:	eba5 0e07 	sub.w	lr, r5, r7
   2cb52:	d214      	bcs.n	2cb7e <ec_enc_bits+0x5a>
   2cb54:	6805      	ldr	r5, [r0, #0]
   2cb56:	6087      	str	r7, [r0, #8]
   2cb58:	3b08      	subs	r3, #8
   2cb5a:	2b07      	cmp	r3, #7
   2cb5c:	f805 400e 	strb.w	r4, [r5, lr]
   2cb60:	ea4f 2414 	mov.w	r4, r4, lsr #8
   2cb64:	dcec      	bgt.n	2cb40 <ec_enc_bits+0x1c>
   2cb66:	eb03 0508 	add.w	r5, r3, r8
   2cb6a:	6942      	ldr	r2, [r0, #20]
   2cb6c:	6105      	str	r5, [r0, #16]
   2cb6e:	fa01 f303 	lsl.w	r3, r1, r3
   2cb72:	431c      	orrs	r4, r3
   2cb74:	4442      	add	r2, r8
   2cb76:	60c4      	str	r4, [r0, #12]
   2cb78:	6142      	str	r2, [r0, #20]
   2cb7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2cb7e:	3b08      	subs	r3, #8
   2cb80:	2b07      	cmp	r3, #7
   2cb82:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
   2cb86:	ea4f 2414 	mov.w	r4, r4, lsr #8
   2cb8a:	dcdc      	bgt.n	2cb46 <ec_enc_bits+0x22>
   2cb8c:	e7eb      	b.n	2cb66 <ec_enc_bits+0x42>
   2cb8e:	bf00      	nop

0002cb90 <ec_enc_shrink>:
   2cb90:	b538      	push	{r3, r4, r5, lr}
   2cb92:	460d      	mov	r5, r1
   2cb94:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cb98:	6803      	ldr	r3, [r0, #0]
   2cb9a:	4604      	mov	r4, r0
   2cb9c:	1a89      	subs	r1, r1, r2
   2cb9e:	1aa8      	subs	r0, r5, r2
   2cba0:	4419      	add	r1, r3
   2cba2:	4418      	add	r0, r3
   2cba4:	f7df fb76 	bl	c294 <memmove>
   2cba8:	6065      	str	r5, [r4, #4]
   2cbaa:	bd38      	pop	{r3, r4, r5, pc}

0002cbac <ec_enc_done>:
   2cbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cbb0:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
   2cbb4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   2cbb8:	fab3 f683 	clz	r6, r3
   2cbbc:	40f5      	lsrs	r5, r6
   2cbbe:	1951      	adds	r1, r2, r5
   2cbc0:	4413      	add	r3, r2
   2cbc2:	ea41 0705 	orr.w	r7, r1, r5
   2cbc6:	429f      	cmp	r7, r3
   2cbc8:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2cbca:	d370      	bcc.n	2ccae <ec_enc_done+0x102>
   2cbcc:	086d      	lsrs	r5, r5, #1
   2cbce:	442a      	add	r2, r5
   2cbd0:	ea22 0505 	bic.w	r5, r2, r5
   2cbd4:	3601      	adds	r6, #1
   2cbd6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2cbda:	ea4f 5ed5 	mov.w	lr, r5, lsr #23
   2cbde:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   2cbe2:	d060      	beq.n	2cca6 <ec_enc_done+0xfa>
   2cbe4:	2c00      	cmp	r4, #0
   2cbe6:	ea4f 292e 	mov.w	r9, lr, asr #8
   2cbea:	db0d      	blt.n	2cc08 <ec_enc_done+0x5c>
   2cbec:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cbf0:	6983      	ldr	r3, [r0, #24]
   2cbf2:	441a      	add	r2, r3
   2cbf4:	428a      	cmp	r2, r1
   2cbf6:	444c      	add	r4, r9
   2cbf8:	f080 80d4 	bcs.w	2cda4 <ec_enc_done+0x1f8>
   2cbfc:	6802      	ldr	r2, [r0, #0]
   2cbfe:	1c59      	adds	r1, r3, #1
   2cc00:	6181      	str	r1, [r0, #24]
   2cc02:	54d4      	strb	r4, [r2, r3]
   2cc04:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2cc06:	62c3      	str	r3, [r0, #44]	; 0x2c
   2cc08:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2cc0a:	b1c4      	cbz	r4, 2cc3e <ec_enc_done+0x92>
   2cc0c:	6983      	ldr	r3, [r0, #24]
   2cc0e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cc12:	f109 09ff 	add.w	r9, r9, #255	; 0xff
   2cc16:	e002      	b.n	2cc1e <ec_enc_done+0x72>
   2cc18:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cc1c:	6983      	ldr	r3, [r0, #24]
   2cc1e:	eb03 0c02 	add.w	ip, r3, r2
   2cc22:	458c      	cmp	ip, r1
   2cc24:	f103 0701 	add.w	r7, r3, #1
   2cc28:	f080 808c 	bcs.w	2cd44 <ec_enc_done+0x198>
   2cc2c:	6802      	ldr	r2, [r0, #0]
   2cc2e:	6187      	str	r7, [r0, #24]
   2cc30:	f802 9003 	strb.w	r9, [r2, r3]
   2cc34:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2cc36:	3c01      	subs	r4, #1
   2cc38:	6244      	str	r4, [r0, #36]	; 0x24
   2cc3a:	2c00      	cmp	r4, #0
   2cc3c:	d1ec      	bne.n	2cc18 <ec_enc_done+0x6c>
   2cc3e:	fa5f f48e 	uxtb.w	r4, lr
   2cc42:	6284      	str	r4, [r0, #40]	; 0x28
   2cc44:	3e08      	subs	r6, #8
   2cc46:	022d      	lsls	r5, r5, #8
   2cc48:	2e00      	cmp	r6, #0
   2cc4a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
   2cc4e:	dcc4      	bgt.n	2cbda <ec_enc_done+0x2e>
   2cc50:	2c00      	cmp	r4, #0
   2cc52:	da31      	bge.n	2ccb8 <ec_enc_done+0x10c>
   2cc54:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2cc56:	2c00      	cmp	r4, #0
   2cc58:	d13c      	bne.n	2ccd4 <ec_enc_done+0x128>
   2cc5a:	e9d0 4803 	ldrd	r4, r8, [r0, #12]
   2cc5e:	f1b8 0f07 	cmp.w	r8, #7
   2cc62:	dd57      	ble.n	2cd14 <ec_enc_done+0x168>
   2cc64:	6983      	ldr	r3, [r0, #24]
   2cc66:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cc6a:	4645      	mov	r5, r8
   2cc6c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2cc70:	e002      	b.n	2cc78 <ec_enc_done+0xcc>
   2cc72:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cc76:	6983      	ldr	r3, [r0, #24]
   2cc78:	eb02 0c03 	add.w	ip, r2, r3
   2cc7c:	1c57      	adds	r7, r2, #1
   2cc7e:	458c      	cmp	ip, r1
   2cc80:	eba1 0e07 	sub.w	lr, r1, r7
   2cc84:	d27c      	bcs.n	2cd80 <ec_enc_done+0x1d4>
   2cc86:	6803      	ldr	r3, [r0, #0]
   2cc88:	6087      	str	r7, [r0, #8]
   2cc8a:	3d08      	subs	r5, #8
   2cc8c:	f803 400e 	strb.w	r4, [r3, lr]
   2cc90:	2d07      	cmp	r5, #7
   2cc92:	ea4f 2414 	mov.w	r4, r4, lsr #8
   2cc96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2cc98:	dceb      	bgt.n	2cc72 <ec_enc_done+0xc6>
   2cc9a:	f008 0807 	and.w	r8, r8, #7
   2cc9e:	2900      	cmp	r1, #0
   2cca0:	d03b      	beq.n	2cd1a <ec_enc_done+0x16e>
   2cca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2cca6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2cca8:	3301      	adds	r3, #1
   2ccaa:	6243      	str	r3, [r0, #36]	; 0x24
   2ccac:	e7ca      	b.n	2cc44 <ec_enc_done+0x98>
   2ccae:	2e00      	cmp	r6, #0
   2ccb0:	d0ce      	beq.n	2cc50 <ec_enc_done+0xa4>
   2ccb2:	ea21 0505 	bic.w	r5, r1, r5
   2ccb6:	e78e      	b.n	2cbd6 <ec_enc_done+0x2a>
   2ccb8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2ccbc:	6983      	ldr	r3, [r0, #24]
   2ccbe:	441a      	add	r2, r3
   2ccc0:	428a      	cmp	r2, r1
   2ccc2:	d272      	bcs.n	2cdaa <ec_enc_done+0x1fe>
   2ccc4:	6802      	ldr	r2, [r0, #0]
   2ccc6:	1c59      	adds	r1, r3, #1
   2ccc8:	6181      	str	r1, [r0, #24]
   2ccca:	54d4      	strb	r4, [r2, r3]
   2cccc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ccce:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2ccd0:	62c3      	str	r3, [r0, #44]	; 0x2c
   2ccd2:	b1c4      	cbz	r4, 2cd06 <ec_enc_done+0x15a>
   2ccd4:	6983      	ldr	r3, [r0, #24]
   2ccd6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2ccda:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2ccde:	f04f 0cff 	mov.w	ip, #255	; 0xff
   2cce2:	e002      	b.n	2ccea <ec_enc_done+0x13e>
   2cce4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
   2cce8:	6983      	ldr	r3, [r0, #24]
   2ccea:	189d      	adds	r5, r3, r2
   2ccec:	428d      	cmp	r5, r1
   2ccee:	f103 0701 	add.w	r7, r3, #1
   2ccf2:	d250      	bcs.n	2cd96 <ec_enc_done+0x1ea>
   2ccf4:	6802      	ldr	r2, [r0, #0]
   2ccf6:	6187      	str	r7, [r0, #24]
   2ccf8:	f802 c003 	strb.w	ip, [r2, r3]
   2ccfc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2ccfe:	3c01      	subs	r4, #1
   2cd00:	6244      	str	r4, [r0, #36]	; 0x24
   2cd02:	2c00      	cmp	r4, #0
   2cd04:	d1ee      	bne.n	2cce4 <ec_enc_done+0x138>
   2cd06:	e9d0 4803 	ldrd	r4, r8, [r0, #12]
   2cd0a:	2300      	movs	r3, #0
   2cd0c:	f1b8 0f07 	cmp.w	r8, #7
   2cd10:	6283      	str	r3, [r0, #40]	; 0x28
   2cd12:	dca7      	bgt.n	2cc64 <ec_enc_done+0xb8>
   2cd14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2cd16:	2900      	cmp	r1, #0
   2cd18:	d1c3      	bne.n	2cca2 <ec_enc_done+0xf6>
   2cd1a:	4605      	mov	r5, r0
   2cd1c:	e9d5 2701 	ldrd	r2, r7, [r5, #4]
   2cd20:	6980      	ldr	r0, [r0, #24]
   2cd22:	682b      	ldr	r3, [r5, #0]
   2cd24:	4407      	add	r7, r0
   2cd26:	1bd2      	subs	r2, r2, r7
   2cd28:	4418      	add	r0, r3
   2cd2a:	f7df fb17 	bl	c35c <memset>
   2cd2e:	f1b8 0f00 	cmp.w	r8, #0
   2cd32:	ddb6      	ble.n	2cca2 <ec_enc_done+0xf6>
   2cd34:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   2cd38:	429a      	cmp	r2, r3
   2cd3a:	d30b      	bcc.n	2cd54 <ec_enc_done+0x1a8>
   2cd3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cd40:	62eb      	str	r3, [r5, #44]	; 0x2c
   2cd42:	e7ae      	b.n	2cca2 <ec_enc_done+0xf6>
   2cd44:	3c01      	subs	r4, #1
   2cd46:	6244      	str	r4, [r0, #36]	; 0x24
   2cd48:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
   2cd4c:	2c00      	cmp	r4, #0
   2cd4e:	f47f af66 	bne.w	2cc1e <ec_enc_done+0x72>
   2cd52:	e774      	b.n	2cc3e <ec_enc_done+0x92>
   2cd54:	69a9      	ldr	r1, [r5, #24]
   2cd56:	4411      	add	r1, r2
   2cd58:	428b      	cmp	r3, r1
   2cd5a:	d80a      	bhi.n	2cd72 <ec_enc_done+0x1c6>
   2cd5c:	4276      	negs	r6, r6
   2cd5e:	4546      	cmp	r6, r8
   2cd60:	da07      	bge.n	2cd72 <ec_enc_done+0x1c6>
   2cd62:	2101      	movs	r1, #1
   2cd64:	fa01 f606 	lsl.w	r6, r1, r6
   2cd68:	1e71      	subs	r1, r6, #1
   2cd6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cd6e:	400c      	ands	r4, r1
   2cd70:	62e8      	str	r0, [r5, #44]	; 0x2c
   2cd72:	3b01      	subs	r3, #1
   2cd74:	1a9b      	subs	r3, r3, r2
   2cd76:	6829      	ldr	r1, [r5, #0]
   2cd78:	5cca      	ldrb	r2, [r1, r3]
   2cd7a:	4314      	orrs	r4, r2
   2cd7c:	54cc      	strb	r4, [r1, r3]
   2cd7e:	e790      	b.n	2cca2 <ec_enc_done+0xf6>
   2cd80:	3d08      	subs	r5, #8
   2cd82:	2d07      	cmp	r5, #7
   2cd84:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
   2cd88:	ea4f 2414 	mov.w	r4, r4, lsr #8
   2cd8c:	f73f af74 	bgt.w	2cc78 <ec_enc_done+0xcc>
   2cd90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2cd94:	e781      	b.n	2cc9a <ec_enc_done+0xee>
   2cd96:	3c01      	subs	r4, #1
   2cd98:	6244      	str	r4, [r0, #36]	; 0x24
   2cd9a:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
   2cd9e:	2c00      	cmp	r4, #0
   2cda0:	d1a3      	bne.n	2ccea <ec_enc_done+0x13e>
   2cda2:	e7b0      	b.n	2cd06 <ec_enc_done+0x15a>
   2cda4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cda8:	e72d      	b.n	2cc06 <ec_enc_done+0x5a>
   2cdaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cdae:	e78e      	b.n	2ccce <ec_enc_done+0x122>

0002cdb0 <clt_mdct_forward_c>:
   2cdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cdb4:	b08b      	sub	sp, #44	; 0x2c
   2cdb6:	af00      	add	r7, sp, #0
   2cdb8:	4681      	mov	r9, r0
   2cdba:	6d7e      	ldr	r6, [r7, #84]	; 0x54
   2cdbc:	61bb      	str	r3, [r7, #24]
   2cdbe:	1cb0      	adds	r0, r6, #2
   2cdc0:	460d      	mov	r5, r1
   2cdc2:	f859 1020 	ldr.w	r1, [r9, r0, lsl #2]
   2cdc6:	6139      	str	r1, [r7, #16]
   2cdc8:	460c      	mov	r4, r1
   2cdca:	4690      	mov	r8, r2
   2cdcc:	f7f9 feae 	bl	26b2c <save_stack>
   2cdd0:	f8d9 0018 	ldr.w	r0, [r9, #24]
   2cdd4:	edd4 5a01 	vldr	s11, [r4, #4]
   2cdd8:	6278      	str	r0, [r7, #36]	; 0x24
   2cdda:	2e00      	cmp	r6, #0
   2cddc:	f8d9 4000 	ldr.w	r4, [r9]
   2cde0:	dd07      	ble.n	2cdf2 <clt_mdct_forward_c+0x42>
   2cde2:	2300      	movs	r3, #0
   2cde4:	3301      	adds	r3, #1
   2cde6:	1064      	asrs	r4, r4, #1
   2cde8:	429e      	cmp	r6, r3
   2cdea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   2cdee:	d1f9      	bne.n	2cde4 <clt_mdct_forward_c+0x34>
   2cdf0:	6278      	str	r0, [r7, #36]	; 0x24
   2cdf2:	1066      	asrs	r6, r4, #1
   2cdf4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
   2cdf8:	f10e 0207 	add.w	r2, lr, #7
   2cdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2cdfe:	60be      	str	r6, [r7, #8]
   2ce00:	10a4      	asrs	r4, r4, #2
   2ce02:	f022 0207 	bic.w	r2, r2, #7
   2ce06:	ebad 0d02 	sub.w	sp, sp, r2
   2ce0a:	00e2      	lsls	r2, r4, #3
   2ce0c:	1059      	asrs	r1, r3, #1
   2ce0e:	607a      	str	r2, [r7, #4]
   2ce10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2ce12:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   2ce16:	3b01      	subs	r3, #1
   2ce18:	3203      	adds	r2, #3
   2ce1a:	00e0      	lsls	r0, r4, #3
   2ce1c:	1092      	asrs	r2, r2, #2
   2ce1e:	4433      	add	r3, r6
   2ce20:	0089      	lsls	r1, r1, #2
   2ce22:	46e9      	mov	r9, sp
   2ce24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   2ce28:	ebad 0d00 	sub.w	sp, sp, r0
   2ce2c:	2a00      	cmp	r2, #0
   2ce2e:	eb05 0001 	add.w	r0, r5, r1
   2ce32:	f8c7 900c 	str.w	r9, [r7, #12]
   2ce36:	617a      	str	r2, [r7, #20]
   2ce38:	46eb      	mov	fp, sp
   2ce3a:	623b      	str	r3, [r7, #32]
   2ce3c:	61f8      	str	r0, [r7, #28]
   2ce3e:	f340 8134 	ble.w	2d0aa <clt_mdct_forward_c+0x2fa>
   2ce42:	1c53      	adds	r3, r2, #1
   2ce44:	00da      	lsls	r2, r3, #3
   2ce46:	69bd      	ldr	r5, [r7, #24]
   2ce48:	603a      	str	r2, [r7, #0]
   2ce4a:	4603      	mov	r3, r0
   2ce4c:	1882      	adds	r2, r0, r2
   2ce4e:	6a38      	ldr	r0, [r7, #32]
   2ce50:	f101 0c08 	add.w	ip, r1, #8
   2ce54:	390c      	subs	r1, #12
   2ce56:	ebc6 7a86 	rsb	sl, r6, r6, lsl #30
   2ce5a:	44ac      	add	ip, r5
   2ce5c:	4429      	add	r1, r5
   2ce5e:	f1a0 0508 	sub.w	r5, r0, #8
   2ce62:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2ce64:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   2ce68:	f109 0608 	add.w	r6, r9, #8
   2ce6c:	3308      	adds	r3, #8
   2ce6e:	eb03 090e 	add.w	r9, r3, lr
   2ce72:	edd1 6a02 	vldr	s13, [r1, #8]
   2ce76:	ed5c 7a02 	vldr	s15, [ip, #-8]
   2ce7a:	ed19 7a02 	vldr	s14, [r9, #-8]
   2ce7e:	ed95 6a02 	vldr	s12, [r5, #8]
   2ce82:	ee26 7a87 	vmul.f32	s14, s13, s14
   2ce86:	ee27 6a86 	vmul.f32	s12, s15, s12
   2ce8a:	eb05 090a 	add.w	r9, r5, sl
   2ce8e:	ee37 7a06 	vadd.f32	s14, s14, s12
   2ce92:	ed99 6a02 	vldr	s12, [r9, #8]
   2ce96:	ed06 7a02 	vstr	s14, [r6, #-8]
   2ce9a:	ed13 7a02 	vldr	s14, [r3, #-8]
   2ce9e:	ee66 6a86 	vmul.f32	s13, s13, s12
   2cea2:	ee67 7a87 	vmul.f32	s15, s15, s14
   2cea6:	3308      	adds	r3, #8
   2cea8:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2ceac:	429a      	cmp	r2, r3
   2ceae:	ed46 7a01 	vstr	s15, [r6, #-4]
   2ceb2:	f1a1 0108 	sub.w	r1, r1, #8
   2ceb6:	f10c 0c08 	add.w	ip, ip, #8
   2ceba:	f1a5 0508 	sub.w	r5, r5, #8
   2cebe:	f106 0608 	add.w	r6, r6, #8
   2cec2:	d1d4      	bne.n	2ce6e <clt_mdct_forward_c+0xbe>
   2cec4:	683b      	ldr	r3, [r7, #0]
   2cec6:	6278      	str	r0, [r7, #36]	; 0x24
   2cec8:	69f8      	ldr	r0, [r7, #28]
   2ceca:	697a      	ldr	r2, [r7, #20]
   2cecc:	3b08      	subs	r3, #8
   2cece:	4418      	add	r0, r3
   2ced0:	61f8      	str	r0, [r7, #28]
   2ced2:	68f8      	ldr	r0, [r7, #12]
   2ced4:	4403      	add	r3, r0
   2ced6:	6a38      	ldr	r0, [r7, #32]
   2ced8:	ebc2 7142 	rsb	r1, r2, r2, lsl #29
   2cedc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   2cee0:	6239      	str	r1, [r7, #32]
   2cee2:	4691      	mov	r9, r2
   2cee4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2cee6:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
   2ceea:	697a      	ldr	r2, [r7, #20]
   2ceec:	1aa2      	subs	r2, r4, r2
   2ceee:	3e01      	subs	r6, #1
   2cef0:	454a      	cmp	r2, r9
   2cef2:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   2cef6:	f340 80dc 	ble.w	2d0b2 <clt_mdct_forward_c+0x302>
   2cefa:	69f8      	ldr	r0, [r7, #28]
   2cefc:	f100 0c08 	add.w	ip, r0, #8
   2cf00:	6a38      	ldr	r0, [r7, #32]
   2cf02:	f1a0 0608 	sub.w	r6, r0, #8
   2cf06:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cf08:	f103 0108 	add.w	r1, r3, #8
   2cf0c:	464d      	mov	r5, r9
   2cf0e:	ed96 7a02 	vldr	s14, [r6, #8]
   2cf12:	ed5c 7a02 	vldr	s15, [ip, #-8]
   2cf16:	ed01 7a02 	vstr	s14, [r1, #-8]
   2cf1a:	3501      	adds	r5, #1
   2cf1c:	4295      	cmp	r5, r2
   2cf1e:	ed41 7a01 	vstr	s15, [r1, #-4]
   2cf22:	f1a6 0608 	sub.w	r6, r6, #8
   2cf26:	f10c 0c08 	add.w	ip, ip, #8
   2cf2a:	f101 0108 	add.w	r1, r1, #8
   2cf2e:	d1ee      	bne.n	2cf0e <clt_mdct_forward_c+0x15e>
   2cf30:	eba2 0909 	sub.w	r9, r2, r9
   2cf34:	6278      	str	r0, [r7, #36]	; 0x24
   2cf36:	69f8      	ldr	r0, [r7, #28]
   2cf38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
   2cf3c:	4408      	add	r0, r1
   2cf3e:	440b      	add	r3, r1
   2cf40:	6a39      	ldr	r1, [r7, #32]
   2cf42:	61f8      	str	r0, [r7, #28]
   2cf44:	ebc9 7949 	rsb	r9, r9, r9, lsl #29
   2cf48:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
   2cf4c:	4294      	cmp	r4, r2
   2cf4e:	6239      	str	r1, [r7, #32]
   2cf50:	f340 80b3 	ble.w	2d0ba <clt_mdct_forward_c+0x30a>
   2cf54:	6879      	ldr	r1, [r7, #4]
   2cf56:	69f8      	ldr	r0, [r7, #28]
   2cf58:	68bd      	ldr	r5, [r7, #8]
   2cf5a:	3108      	adds	r1, #8
   2cf5c:	4401      	add	r1, r0
   2cf5e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   2cf62:	69b9      	ldr	r1, [r7, #24]
   2cf64:	f1aa 0608 	sub.w	r6, sl, #8
   2cf68:	440e      	add	r6, r1
   2cf6a:	f100 0108 	add.w	r1, r0, #8
   2cf6e:	69b8      	ldr	r0, [r7, #24]
   2cf70:	ebc5 7c85 	rsb	ip, r5, r5, lsl #30
   2cf74:	6a3d      	ldr	r5, [r7, #32]
   2cf76:	f100 0908 	add.w	r9, r0, #8
   2cf7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cf7c:	3308      	adds	r3, #8
   2cf7e:	3d08      	subs	r5, #8
   2cf80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   2cf84:	eb01 0a0c 	add.w	sl, r1, ip
   2cf88:	ed59 7a02 	vldr	s15, [r9, #-8]
   2cf8c:	edd6 6a02 	vldr	s13, [r6, #8]
   2cf90:	ed1a 6a02 	vldr	s12, [sl, #-8]
   2cf94:	ed95 7a02 	vldr	s14, [r5, #8]
   2cf98:	ee27 6a86 	vmul.f32	s12, s15, s12
   2cf9c:	ee26 7a87 	vmul.f32	s14, s13, s14
   2cfa0:	eb05 0a0e 	add.w	sl, r5, lr
   2cfa4:	ee37 7a46 	vsub.f32	s14, s14, s12
   2cfa8:	ed9a 6a02 	vldr	s12, [sl, #8]
   2cfac:	ed03 7a02 	vstr	s14, [r3, #-8]
   2cfb0:	ed11 7a02 	vldr	s14, [r1, #-8]
   2cfb4:	ee67 7a86 	vmul.f32	s15, s15, s12
   2cfb8:	ee66 6a87 	vmul.f32	s13, s13, s14
   2cfbc:	3108      	adds	r1, #8
   2cfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2cfc2:	428a      	cmp	r2, r1
   2cfc4:	ed43 7a01 	vstr	s15, [r3, #-4]
   2cfc8:	f109 0908 	add.w	r9, r9, #8
   2cfcc:	f1a6 0608 	sub.w	r6, r6, #8
   2cfd0:	f1a5 0508 	sub.w	r5, r5, #8
   2cfd4:	f103 0308 	add.w	r3, r3, #8
   2cfd8:	d1d4      	bne.n	2cf84 <clt_mdct_forward_c+0x1d4>
   2cfda:	6278      	str	r0, [r7, #36]	; 0x24
   2cfdc:	4605      	mov	r5, r0
   2cfde:	693b      	ldr	r3, [r7, #16]
   2cfe0:	68fa      	ldr	r2, [r7, #12]
   2cfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cfe4:	eb05 0684 	add.w	r6, r5, r4, lsl #2
   2cfe8:	3208      	adds	r2, #8
   2cfea:	46b4      	mov	ip, r6
   2cfec:	4628      	mov	r0, r5
   2cfee:	f1a3 0e02 	sub.w	lr, r3, #2
   2cff2:	2100      	movs	r1, #0
   2cff4:	ecf0 7a01 	vldmia	r0!, {s15}
   2cff8:	ecbc 6a01 	vldmia	ip!, {s12}
   2cffc:	ed52 6a02 	vldr	s13, [r2, #-8]
   2d000:	ed12 5a01 	vldr	s10, [r2, #-4]
   2d004:	f93e 3f02 	ldrsh.w	r3, [lr, #2]!
   2d008:	ee27 7aa6 	vmul.f32	s14, s15, s13
   2d00c:	ee66 6a26 	vmul.f32	s13, s12, s13
   2d010:	ee67 7a85 	vmul.f32	s15, s15, s10
   2d014:	ee26 6a05 	vmul.f32	s12, s12, s10
   2d018:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d01c:	ee37 7a46 	vsub.f32	s14, s14, s12
   2d020:	ee67 7aa5 	vmul.f32	s15, s15, s11
   2d024:	ee27 7a25 	vmul.f32	s14, s14, s11
   2d028:	3101      	adds	r1, #1
   2d02a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
   2d02e:	428c      	cmp	r4, r1
   2d030:	f102 0208 	add.w	r2, r2, #8
   2d034:	ed83 7a00 	vstr	s14, [r3]
   2d038:	edc3 7a01 	vstr	s15, [r3, #4]
   2d03c:	dcda      	bgt.n	2cff4 <clt_mdct_forward_c+0x244>
   2d03e:	6938      	ldr	r0, [r7, #16]
   2d040:	4659      	mov	r1, fp
   2d042:	f007 f859 	bl	340f8 <opus_fft_impl>
   2d046:	68bb      	ldr	r3, [r7, #8]
   2d048:	1e5a      	subs	r2, r3, #1
   2d04a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2d04c:	fb03 f202 	mul.w	r2, r3, r2
   2d050:	00d8      	lsls	r0, r3, #3
   2d052:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   2d056:	f10b 0308 	add.w	r3, fp, #8
   2d05a:	f1c0 0c00 	rsb	ip, r0, #0
   2d05e:	2100      	movs	r1, #0
   2d060:	ecf6 7a01 	vldmia	r6!, {s15}
   2d064:	ecf5 5a01 	vldmia	r5!, {s11}
   2d068:	ed13 7a01 	vldr	s14, [r3, #-4]
   2d06c:	ed53 6a02 	vldr	s13, [r3, #-8]
   2d070:	ee27 6a27 	vmul.f32	s12, s14, s15
   2d074:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2d078:	ee27 7a25 	vmul.f32	s14, s14, s11
   2d07c:	ee66 6aa5 	vmul.f32	s13, s13, s11
   2d080:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d084:	ee76 6a66 	vsub.f32	s13, s12, s13
   2d088:	3101      	adds	r1, #1
   2d08a:	428c      	cmp	r4, r1
   2d08c:	edc8 6a00 	vstr	s13, [r8]
   2d090:	f103 0308 	add.w	r3, r3, #8
   2d094:	edc2 7a00 	vstr	s15, [r2]
   2d098:	4480      	add	r8, r0
   2d09a:	4462      	add	r2, ip
   2d09c:	dce0      	bgt.n	2d060 <clt_mdct_forward_c+0x2b0>
   2d09e:	f7f9 fd57 	bl	26b50 <restore_stack>
   2d0a2:	372c      	adds	r7, #44	; 0x2c
   2d0a4:	46bd      	mov	sp, r7
   2d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0aa:	464b      	mov	r3, r9
   2d0ac:	f04f 0900 	mov.w	r9, #0
   2d0b0:	e718      	b.n	2cee4 <clt_mdct_forward_c+0x134>
   2d0b2:	464a      	mov	r2, r9
   2d0b4:	4294      	cmp	r4, r2
   2d0b6:	f73f af4d 	bgt.w	2cf54 <clt_mdct_forward_c+0x1a4>
   2d0ba:	2c00      	cmp	r4, #0
   2d0bc:	bfc8      	it	gt
   2d0be:	6a7d      	ldrgt	r5, [r7, #36]	; 0x24
   2d0c0:	dc8d      	bgt.n	2cfde <clt_mdct_forward_c+0x22e>
   2d0c2:	4659      	mov	r1, fp
   2d0c4:	6938      	ldr	r0, [r7, #16]
   2d0c6:	f007 f817 	bl	340f8 <opus_fft_impl>
   2d0ca:	f7f9 fd41 	bl	26b50 <restore_stack>
   2d0ce:	372c      	adds	r7, #44	; 0x2c
   2d0d0:	46bd      	mov	sp, r7
   2d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d0d6:	bf00      	nop

0002d0d8 <opus_custom_mode_create>:
   2d0d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
   2d0dc:	4298      	cmp	r0, r3
   2d0de:	d005      	beq.n	2d0ec <opus_custom_mode_create+0x14>
   2d0e0:	b112      	cbz	r2, 2d0e8 <opus_custom_mode_create+0x10>
   2d0e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d0e6:	6013      	str	r3, [r2, #0]
   2d0e8:	2000      	movs	r0, #0
   2d0ea:	4770      	bx	lr
   2d0ec:	f5b1 7f70 	cmp.w	r1, #960	; 0x3c0
   2d0f0:	d00b      	beq.n	2d10a <opus_custom_mode_create+0x32>
   2d0f2:	004b      	lsls	r3, r1, #1
   2d0f4:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
   2d0f8:	d007      	beq.n	2d10a <opus_custom_mode_create+0x32>
   2d0fa:	008b      	lsls	r3, r1, #2
   2d0fc:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
   2d100:	d003      	beq.n	2d10a <opus_custom_mode_create+0x32>
   2d102:	00c9      	lsls	r1, r1, #3
   2d104:	f5b1 7f70 	cmp.w	r1, #960	; 0x3c0
   2d108:	d1ea      	bne.n	2d0e0 <opus_custom_mode_create+0x8>
   2d10a:	b11a      	cbz	r2, 2d114 <opus_custom_mode_create+0x3c>
   2d10c:	2300      	movs	r3, #0
   2d10e:	6013      	str	r3, [r2, #0]
   2d110:	4801      	ldr	r0, [pc, #4]	; (2d118 <opus_custom_mode_create+0x40>)
   2d112:	4770      	bx	lr
   2d114:	4800      	ldr	r0, [pc, #0]	; (2d118 <opus_custom_mode_create+0x40>)
   2d116:	4770      	bx	lr
   2d118:	00040f7c 	.word	0x00040f7c

0002d11c <find_best_pitch>:
   2d11c:	b470      	push	{r4, r5, r6}
   2d11e:	9d03      	ldr	r5, [sp, #12]
   2d120:	2600      	movs	r6, #0
   2d122:	2401      	movs	r4, #1
   2d124:	2a00      	cmp	r2, #0
   2d126:	e9c5 6400 	strd	r6, r4, [r5]
   2d12a:	dd66      	ble.n	2d1fa <find_best_pitch+0xde>
   2d12c:	460c      	mov	r4, r1
   2d12e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
   2d132:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2d136:	ecb4 7a01 	vldmia	r4!, {s14}
   2d13a:	ee27 7a07 	vmul.f32	s14, s14, s14
   2d13e:	42a6      	cmp	r6, r4
   2d140:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d144:	d1f7      	bne.n	2d136 <find_best_pitch+0x1a>
   2d146:	2b00      	cmp	r3, #0
   2d148:	dd55      	ble.n	2d1f6 <find_best_pitch+0xda>
   2d14a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 2d200 <find_best_pitch+0xe4>
   2d14e:	eddf 3a2d 	vldr	s7, [pc, #180]	; 2d204 <find_best_pitch+0xe8>
   2d152:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
   2d156:	eeb0 4a65 	vmov.f32	s8, s11
   2d15a:	eeb0 3a64 	vmov.f32	s6, s9
   2d15e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2d162:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2d166:	2400      	movs	r4, #0
   2d168:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   2d16c:	e01e      	b.n	2d1ac <find_best_pitch+0x90>
   2d16e:	682e      	ldr	r6, [r5, #0]
   2d170:	e9c5 4600 	strd	r4, r6, [r5]
   2d174:	eef0 4a43 	vmov.f32	s9, s6
   2d178:	eeb0 4a67 	vmov.f32	s8, s15
   2d17c:	eeb0 3a47 	vmov.f32	s6, s14
   2d180:	ecb2 7a01 	vldmia	r2!, {s14}
   2d184:	ecf1 6a01 	vldmia	r1!, {s13}
   2d188:	ee27 7a07 	vmul.f32	s14, s14, s14
   2d18c:	ee66 6aa6 	vmul.f32	s13, s13, s13
   2d190:	3401      	adds	r4, #1
   2d192:	ee37 7a66 	vsub.f32	s14, s14, s13
   2d196:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d19a:	eef4 7a46 	vcmp.f32	s15, s12
   2d19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d1a2:	bf48      	it	mi
   2d1a4:	eef0 7a46 	vmovmi.f32	s15, s12
   2d1a8:	4283      	cmp	r3, r0
   2d1aa:	d024      	beq.n	2d1f6 <find_best_pitch+0xda>
   2d1ac:	ecb0 7a01 	vldmia	r0!, {s14}
   2d1b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   2d1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d1b8:	dde2      	ble.n	2d180 <find_best_pitch+0x64>
   2d1ba:	ee27 7a23 	vmul.f32	s14, s14, s7
   2d1be:	ee67 6aa4 	vmul.f32	s13, s15, s9
   2d1c2:	ee27 7a07 	vmul.f32	s14, s14, s14
   2d1c6:	ee27 5a25 	vmul.f32	s10, s14, s11
   2d1ca:	eeb4 5ae6 	vcmpe.f32	s10, s13
   2d1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d1d2:	ddd5      	ble.n	2d180 <find_best_pitch+0x64>
   2d1d4:	ee27 5a04 	vmul.f32	s10, s14, s8
   2d1d8:	ee63 6a27 	vmul.f32	s13, s6, s15
   2d1dc:	eef0 5a44 	vmov.f32	s11, s8
   2d1e0:	eeb4 5ae6 	vcmpe.f32	s10, s13
   2d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d1e8:	dcc1      	bgt.n	2d16e <find_best_pitch+0x52>
   2d1ea:	606c      	str	r4, [r5, #4]
   2d1ec:	eef0 4a47 	vmov.f32	s9, s14
   2d1f0:	eef0 5a67 	vmov.f32	s11, s15
   2d1f4:	e7c4      	b.n	2d180 <find_best_pitch+0x64>
   2d1f6:	bc70      	pop	{r4, r5, r6}
   2d1f8:	4770      	bx	lr
   2d1fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2d1fe:	e7a2      	b.n	2d146 <find_best_pitch+0x2a>
   2d200:	00000000 	.word	0x00000000
   2d204:	2b8cbccc 	.word	0x2b8cbccc

0002d208 <pitch_downsample>:
   2d208:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d20a:	1055      	asrs	r5, r2, #1
   2d20c:	2d01      	cmp	r5, #1
   2d20e:	b08f      	sub	sp, #60	; 0x3c
   2d210:	460c      	mov	r4, r1
   2d212:	f8d0 c000 	ldr.w	ip, [r0]
   2d216:	f340 8103 	ble.w	2d420 <pitch_downsample+0x218>
   2d21a:	1d0e      	adds	r6, r1, #4
   2d21c:	f1ac 0708 	sub.w	r7, ip, #8
   2d220:	4631      	mov	r1, r6
   2d222:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
   2d226:	4662      	mov	r2, ip
   2d228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2d22c:	edd2 7a01 	vldr	s15, [r2, #4]
   2d230:	ed92 6a03 	vldr	s12, [r2, #12]
   2d234:	ee77 7a86 	vadd.f32	s15, s15, s12
   2d238:	3208      	adds	r2, #8
   2d23a:	edd2 6a00 	vldr	s13, [r2]
   2d23e:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d242:	4297      	cmp	r7, r2
   2d244:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d248:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d24c:	ece1 7a01 	vstmia	r1!, {s15}
   2d250:	d1ec      	bne.n	2d22c <pitch_downsample+0x24>
   2d252:	eddc 7a01 	vldr	s15, [ip, #4]
   2d256:	eddc 6a00 	vldr	s13, [ip]
   2d25a:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d25e:	2b02      	cmp	r3, #2
   2d260:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d264:	ee27 7a87 	vmul.f32	s14, s15, s14
   2d268:	ed84 7a00 	vstr	s14, [r4]
   2d26c:	f000 80a8 	beq.w	2d3c0 <pitch_downsample+0x1b8>
   2d270:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d272:	2300      	movs	r3, #0
   2d274:	2604      	movs	r6, #4
   2d276:	e9cd 5201 	strd	r5, r2, [sp, #4]
   2d27a:	a909      	add	r1, sp, #36	; 0x24
   2d27c:	461a      	mov	r2, r3
   2d27e:	9600      	str	r6, [sp, #0]
   2d280:	4620      	mov	r0, r4
   2d282:	f006 fcf7 	bl	33c74 <_celt_autocorr>
   2d286:	ed9d 6a0a 	vldr	s12, [sp, #40]	; 0x28
   2d28a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 2d448 <pitch_downsample+0x240>
   2d28e:	eddd 6a0b 	vldr	s13, [sp, #44]	; 0x2c
   2d292:	ed9f 2a6e 	vldr	s4, [pc, #440]	; 2d44c <pitch_downsample+0x244>
   2d296:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
   2d29a:	eddf 2a6d 	vldr	s5, [pc, #436]	; 2d450 <pitch_downsample+0x248>
   2d29e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
   2d2a2:	ed9f 3a6c 	vldr	s6, [pc, #432]	; 2d454 <pitch_downsample+0x24c>
   2d2a6:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
   2d2aa:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 2d458 <pitch_downsample+0x250>
   2d2ae:	ee66 3a21 	vmul.f32	s7, s12, s3
   2d2b2:	ee26 4a82 	vmul.f32	s8, s13, s4
   2d2b6:	ee67 4a22 	vmul.f32	s9, s14, s5
   2d2ba:	ee27 5a83 	vmul.f32	s10, s15, s6
   2d2be:	ee63 3aa1 	vmul.f32	s7, s7, s3
   2d2c2:	ee24 4a02 	vmul.f32	s8, s8, s4
   2d2c6:	ee64 4aa2 	vmul.f32	s9, s9, s5
   2d2ca:	ee25 5a03 	vmul.f32	s10, s10, s6
   2d2ce:	ee65 5a81 	vmul.f32	s11, s11, s2
   2d2d2:	ee36 6a63 	vsub.f32	s12, s12, s7
   2d2d6:	ee76 6ac4 	vsub.f32	s13, s13, s8
   2d2da:	ee37 7a64 	vsub.f32	s14, s14, s9
   2d2de:	ee77 7ac5 	vsub.f32	s15, s15, s10
   2d2e2:	4632      	mov	r2, r6
   2d2e4:	a909      	add	r1, sp, #36	; 0x24
   2d2e6:	a805      	add	r0, sp, #20
   2d2e8:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
   2d2ec:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
   2d2f0:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
   2d2f4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
   2d2f8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
   2d2fc:	f006 fc42 	bl	33b84 <_celt_lpc>
   2d300:	ed9d 2a06 	vldr	s4, [sp, #24]
   2d304:	eddd 1a07 	vldr	s3, [sp, #28]
   2d308:	ed9d 3a05 	vldr	s6, [sp, #20]
   2d30c:	eddf 5a53 	vldr	s11, [pc, #332]	; 2d45c <pitch_downsample+0x254>
   2d310:	eddf 6a53 	vldr	s13, [pc, #332]	; 2d460 <pitch_downsample+0x258>
   2d314:	ed9f 7a53 	vldr	s14, [pc, #332]	; 2d464 <pitch_downsample+0x25c>
   2d318:	eddf 7a53 	vldr	s15, [pc, #332]	; 2d468 <pitch_downsample+0x260>
   2d31c:	eddd 2a08 	vldr	s5, [sp, #32]
   2d320:	ed9f 6a52 	vldr	s12, [pc, #328]	; 2d46c <pitch_downsample+0x264>
   2d324:	ee62 6a26 	vmul.f32	s13, s4, s13
   2d328:	ee21 7a87 	vmul.f32	s14, s3, s14
   2d32c:	ee23 3a25 	vmul.f32	s6, s6, s11
   2d330:	ee62 2a86 	vmul.f32	s5, s5, s12
   2d334:	ee23 2a27 	vmul.f32	s4, s6, s15
   2d338:	ee66 1aa7 	vmul.f32	s3, s13, s15
   2d33c:	ee27 1a27 	vmul.f32	s2, s14, s15
   2d340:	2d00      	cmp	r5, #0
   2d342:	ee31 1a22 	vadd.f32	s2, s2, s5
   2d346:	ee33 3a27 	vadd.f32	s6, s6, s15
   2d34a:	ee32 2a26 	vadd.f32	s4, s4, s13
   2d34e:	ee71 1a87 	vadd.f32	s3, s3, s14
   2d352:	ee62 2aa7 	vmul.f32	s5, s5, s15
   2d356:	dd31      	ble.n	2d3bc <pitch_downsample+0x1b4>
   2d358:	eddf 3a45 	vldr	s7, [pc, #276]	; 2d470 <pitch_downsample+0x268>
   2d35c:	4621      	mov	r1, r4
   2d35e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   2d362:	eeb0 6a63 	vmov.f32	s12, s7
   2d366:	eef0 5a63 	vmov.f32	s11, s7
   2d36a:	eeb0 4a63 	vmov.f32	s8, s7
   2d36e:	eef0 4a63 	vmov.f32	s9, s7
   2d372:	e005      	b.n	2d380 <pitch_downsample+0x178>
   2d374:	eef0 5a44 	vmov.f32	s11, s8
   2d378:	eeb0 4a64 	vmov.f32	s8, s9
   2d37c:	eef0 4a45 	vmov.f32	s9, s10
   2d380:	ed91 5a00 	vldr	s10, [r1]
   2d384:	ee23 7a24 	vmul.f32	s14, s6, s9
   2d388:	ee62 7a04 	vmul.f32	s15, s4, s8
   2d38c:	ee37 7a05 	vadd.f32	s14, s14, s10
   2d390:	ee61 6aa5 	vmul.f32	s13, s3, s11
   2d394:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d398:	ee21 7a06 	vmul.f32	s14, s2, s12
   2d39c:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2d3a0:	ee62 7aa3 	vmul.f32	s15, s5, s7
   2d3a4:	ee37 7a26 	vadd.f32	s14, s14, s13
   2d3a8:	eef0 3a46 	vmov.f32	s7, s12
   2d3ac:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d3b0:	eeb0 6a65 	vmov.f32	s12, s11
   2d3b4:	ece1 7a01 	vstmia	r1!, {s15}
   2d3b8:	42a9      	cmp	r1, r5
   2d3ba:	d1db      	bne.n	2d374 <pitch_downsample+0x16c>
   2d3bc:	b00f      	add	sp, #60	; 0x3c
   2d3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d3c0:	6841      	ldr	r1, [r0, #4]
   2d3c2:	eb04 0285 	add.w	r2, r4, r5, lsl #2
   2d3c6:	460b      	mov	r3, r1
   2d3c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2d3cc:	edd3 7a01 	vldr	s15, [r3, #4]
   2d3d0:	edd3 5a03 	vldr	s11, [r3, #12]
   2d3d4:	edd6 6a00 	vldr	s13, [r6]
   2d3d8:	ed93 6a02 	vldr	s12, [r3, #8]
   2d3dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
   2d3e0:	3308      	adds	r3, #8
   2d3e2:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d3e6:	ee77 7a86 	vadd.f32	s15, s15, s12
   2d3ea:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d3f2:	ece6 7a01 	vstmia	r6!, {s15}
   2d3f6:	42b2      	cmp	r2, r6
   2d3f8:	d1e8      	bne.n	2d3cc <pitch_downsample+0x1c4>
   2d3fa:	ed94 7a00 	vldr	s14, [r4]
   2d3fe:	edd1 7a01 	vldr	s15, [r1, #4]
   2d402:	ed91 6a00 	vldr	s12, [r1]
   2d406:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   2d40a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2d40e:	ee77 7a86 	vadd.f32	s15, s15, s12
   2d412:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2d416:	ee77 7a87 	vadd.f32	s15, s15, s14
   2d41a:	edc4 7a00 	vstr	s15, [r4]
   2d41e:	e727      	b.n	2d270 <pitch_downsample+0x68>
   2d420:	eddc 7a01 	vldr	s15, [ip, #4]
   2d424:	eddc 6a00 	vldr	s13, [ip]
   2d428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2d42c:	ee67 7a87 	vmul.f32	s15, s15, s14
   2d430:	2b02      	cmp	r3, #2
   2d432:	ee77 7aa6 	vadd.f32	s15, s15, s13
   2d436:	ee27 7a87 	vmul.f32	s14, s15, s14
   2d43a:	ed81 7a00 	vstr	s14, [r1]
   2d43e:	f47f af17 	bne.w	2d270 <pitch_downsample+0x68>
   2d442:	6841      	ldr	r1, [r0, #4]
   2d444:	e7db      	b.n	2d3fe <pitch_downsample+0x1f6>
   2d446:	bf00      	nop
   2d448:	3c03126f 	.word	0x3c03126f
   2d44c:	3c83126f 	.word	0x3c83126f
   2d450:	3cc49ba6 	.word	0x3cc49ba6
   2d454:	3d03126f 	.word	0x3d03126f
   2d458:	3f800347 	.word	0x3f800347
   2d45c:	3f666666 	.word	0x3f666666
   2d460:	3f4f5c28 	.word	0x3f4f5c28
   2d464:	3f3a9fbd 	.word	0x3f3a9fbd
   2d468:	3f4ccccd 	.word	0x3f4ccccd
   2d46c:	3f27f62a 	.word	0x3f27f62a
   2d470:	00000000 	.word	0x00000000

0002d474 <celt_pitch_xcorr_c>:
   2d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d478:	b087      	sub	sp, #28
   2d47a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2d47e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2d480:	2d03      	cmp	r5, #3
   2d482:	f340 812b 	ble.w	2d6dc <celt_pitch_xcorr_c+0x268>
   2d486:	f1a3 0e04 	sub.w	lr, r3, #4
   2d48a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
   2d48e:	f10e 0e01 	add.w	lr, lr, #1
   2d492:	ea4f 190e 	mov.w	r9, lr, lsl #4
   2d496:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
   2d49a:	f10e 0601 	add.w	r6, lr, #1
   2d49e:	4614      	mov	r4, r2
   2d4a0:	1f2a      	subs	r2, r5, #4
   2d4a2:	0895      	lsrs	r5, r2, #2
   2d4a4:	f101 081c 	add.w	r8, r1, #28
   2d4a8:	9601      	str	r6, [sp, #4]
   2d4aa:	f10e 0602 	add.w	r6, lr, #2
   2d4ae:	9503      	str	r5, [sp, #12]
   2d4b0:	eb08 1805 	add.w	r8, r8, r5, lsl #4
   2d4b4:	eb00 0a09 	add.w	sl, r0, r9
   2d4b8:	9602      	str	r6, [sp, #8]
   2d4ba:	1edd      	subs	r5, r3, #3
   2d4bc:	f101 070c 	add.w	r7, r1, #12
   2d4c0:	2d00      	cmp	r5, #0
   2d4c2:	463a      	mov	r2, r7
   2d4c4:	ed57 2a03 	vldr	s5, [r7, #-12]
   2d4c8:	ed17 1a02 	vldr	s2, [r7, #-8]
   2d4cc:	ed57 1a01 	vldr	s3, [r7, #-4]
   2d4d0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 2d6e0 <celt_pitch_xcorr_c+0x26c>
   2d4d4:	f340 80f2 	ble.w	2d6bc <celt_pitch_xcorr_c+0x248>
   2d4d8:	f107 0c10 	add.w	ip, r7, #16
   2d4dc:	eef0 6a47 	vmov.f32	s13, s14
   2d4e0:	eeb0 6a47 	vmov.f32	s12, s14
   2d4e4:	eef0 5a47 	vmov.f32	s11, s14
   2d4e8:	4661      	mov	r1, ip
   2d4ea:	f100 0210 	add.w	r2, r0, #16
   2d4ee:	2600      	movs	r6, #0
   2d4f0:	ed52 7a04 	vldr	s15, [r2, #-16]
   2d4f4:	ed11 2a04 	vldr	s4, [r1, #-16]
   2d4f8:	ed12 4a03 	vldr	s8, [r2, #-12]
   2d4fc:	ed52 4a02 	vldr	s9, [r2, #-8]
   2d500:	ed52 0a01 	vldr	s1, [r2, #-4]
   2d504:	ee27 3aa2 	vmul.f32	s6, s15, s5
   2d508:	ee67 3a81 	vmul.f32	s7, s15, s2
   2d50c:	ee27 5aa1 	vmul.f32	s10, s15, s3
   2d510:	ed51 2a03 	vldr	s5, [r1, #-12]
   2d514:	ee67 7a82 	vmul.f32	s15, s15, s4
   2d518:	ee73 5a25 	vadd.f32	s11, s6, s11
   2d51c:	ee33 6a86 	vadd.f32	s12, s7, s12
   2d520:	ee24 3a01 	vmul.f32	s6, s8, s2
   2d524:	ee64 3a21 	vmul.f32	s7, s8, s3
   2d528:	ed11 1a02 	vldr	s2, [r1, #-8]
   2d52c:	ee75 6a26 	vadd.f32	s13, s10, s13
   2d530:	ee37 7a87 	vadd.f32	s14, s15, s14
   2d534:	ee62 7a04 	vmul.f32	s15, s4, s8
   2d538:	ee24 4a22 	vmul.f32	s8, s8, s5
   2d53c:	ee73 5a25 	vadd.f32	s11, s6, s11
   2d540:	ee36 6a23 	vadd.f32	s12, s12, s7
   2d544:	ee24 3aa1 	vmul.f32	s6, s9, s3
   2d548:	ee62 3a24 	vmul.f32	s7, s4, s9
   2d54c:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2d550:	ee37 7a04 	vadd.f32	s14, s14, s8
   2d554:	ee62 7aa4 	vmul.f32	s15, s5, s9
   2d558:	ed51 1a01 	vldr	s3, [r1, #-4]
   2d55c:	ee64 4a81 	vmul.f32	s9, s9, s2
   2d560:	ee33 3a25 	vadd.f32	s6, s6, s11
   2d564:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2d568:	ee62 5a20 	vmul.f32	s11, s4, s1
   2d56c:	ee33 6a86 	vadd.f32	s12, s7, s12
   2d570:	ee22 4aa0 	vmul.f32	s8, s5, s1
   2d574:	ee37 7a24 	vadd.f32	s14, s14, s9
   2d578:	ee21 5a20 	vmul.f32	s10, s2, s1
   2d57c:	ee60 7aa1 	vmul.f32	s15, s1, s3
   2d580:	3604      	adds	r6, #4
   2d582:	42ae      	cmp	r6, r5
   2d584:	f102 0210 	add.w	r2, r2, #16
   2d588:	ee75 5a83 	vadd.f32	s11, s11, s6
   2d58c:	ee36 6a04 	vadd.f32	s12, s12, s8
   2d590:	ee75 6a26 	vadd.f32	s13, s10, s13
   2d594:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d598:	f101 0110 	add.w	r1, r1, #16
   2d59c:	dba8      	blt.n	2d4f0 <celt_pitch_xcorr_c+0x7c>
   2d59e:	eb07 0209 	add.w	r2, r7, r9
   2d5a2:	e9dd 7601 	ldrd	r7, r6, [sp, #4]
   2d5a6:	46f3      	mov	fp, lr
   2d5a8:	4651      	mov	r1, sl
   2d5aa:	455b      	cmp	r3, fp
   2d5ac:	dd13      	ble.n	2d5d6 <celt_pitch_xcorr_c+0x162>
   2d5ae:	ecf1 7a01 	vldmia	r1!, {s15}
   2d5b2:	ecb2 2a01 	vldmia	r2!, {s4}
   2d5b6:	ee27 4aa2 	vmul.f32	s8, s15, s5
   2d5ba:	ee67 4a81 	vmul.f32	s9, s15, s2
   2d5be:	ee27 5aa1 	vmul.f32	s10, s15, s3
   2d5c2:	ee67 7a82 	vmul.f32	s15, s15, s4
   2d5c6:	ee75 5a84 	vadd.f32	s11, s11, s8
   2d5ca:	ee36 6a24 	vadd.f32	s12, s12, s9
   2d5ce:	ee76 6a85 	vadd.f32	s13, s13, s10
   2d5d2:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d5d6:	42bb      	cmp	r3, r7
   2d5d8:	dd13      	ble.n	2d602 <celt_pitch_xcorr_c+0x18e>
   2d5da:	ecf1 7a01 	vldmia	r1!, {s15}
   2d5de:	ecf2 2a01 	vldmia	r2!, {s5}
   2d5e2:	ee27 4a81 	vmul.f32	s8, s15, s2
   2d5e6:	ee67 4aa1 	vmul.f32	s9, s15, s3
   2d5ea:	ee27 5a82 	vmul.f32	s10, s15, s4
   2d5ee:	ee67 7aa2 	vmul.f32	s15, s15, s5
   2d5f2:	ee75 5a84 	vadd.f32	s11, s11, s8
   2d5f6:	ee36 6a24 	vadd.f32	s12, s12, s9
   2d5fa:	ee76 6a85 	vadd.f32	s13, s13, s10
   2d5fe:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d602:	42b3      	cmp	r3, r6
   2d604:	dd4b      	ble.n	2d69e <celt_pitch_xcorr_c+0x22a>
   2d606:	ed91 4a00 	vldr	s8, [r1]
   2d60a:	edd2 3a00 	vldr	s7, [r2]
   2d60e:	ee24 5a21 	vmul.f32	s10, s8, s3
   2d612:	ee62 4a04 	vmul.f32	s9, s4, s8
   2d616:	ee64 7a22 	vmul.f32	s15, s8, s5
   2d61a:	ee24 4a23 	vmul.f32	s8, s8, s7
   2d61e:	ee75 5a25 	vadd.f32	s11, s10, s11
   2d622:	ee34 6a86 	vadd.f32	s12, s9, s12
   2d626:	ee77 6aa6 	vadd.f32	s13, s15, s13
   2d62a:	ee34 7a07 	vadd.f32	s14, s8, s14
   2d62e:	45c4      	cmp	ip, r8
   2d630:	edc4 5a00 	vstr	s11, [r4]
   2d634:	ed84 6a01 	vstr	s12, [r4, #4]
   2d638:	edc4 6a02 	vstr	s13, [r4, #8]
   2d63c:	ed84 7a03 	vstr	s14, [r4, #12]
   2d640:	4667      	mov	r7, ip
   2d642:	f104 0410 	add.w	r4, r4, #16
   2d646:	f47f af3b 	bne.w	2d4c0 <celt_pitch_xcorr_c+0x4c>
   2d64a:	9d03      	ldr	r5, [sp, #12]
   2d64c:	3501      	adds	r5, #1
   2d64e:	00ad      	lsls	r5, r5, #2
   2d650:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2d652:	42aa      	cmp	r2, r5
   2d654:	dd20      	ble.n	2d698 <celt_pitch_xcorr_c+0x224>
   2d656:	9a04      	ldr	r2, [sp, #16]
   2d658:	9910      	ldr	r1, [sp, #64]	; 0x40
   2d65a:	00ad      	lsls	r5, r5, #2
   2d65c:	442a      	add	r2, r5
   2d65e:	4616      	mov	r6, r2
   2d660:	9a05      	ldr	r2, [sp, #20]
   2d662:	eb00 0483 	add.w	r4, r0, r3, lsl #2
   2d666:	4415      	add	r5, r2
   2d668:	eb02 0781 	add.w	r7, r2, r1, lsl #2
   2d66c:	2b00      	cmp	r3, #0
   2d66e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 2d6e0 <celt_pitch_xcorr_c+0x26c>
   2d672:	dd0b      	ble.n	2d68c <celt_pitch_xcorr_c+0x218>
   2d674:	4631      	mov	r1, r6
   2d676:	4602      	mov	r2, r0
   2d678:	ecf2 7a01 	vldmia	r2!, {s15}
   2d67c:	ecf1 6a01 	vldmia	r1!, {s13}
   2d680:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2d684:	4294      	cmp	r4, r2
   2d686:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d68a:	d1f5      	bne.n	2d678 <celt_pitch_xcorr_c+0x204>
   2d68c:	eca5 7a01 	vstmia	r5!, {s14}
   2d690:	42af      	cmp	r7, r5
   2d692:	f106 0604 	add.w	r6, r6, #4
   2d696:	d1e9      	bne.n	2d66c <celt_pitch_xcorr_c+0x1f8>
   2d698:	b007      	add	sp, #28
   2d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d69e:	45e0      	cmp	r8, ip
   2d6a0:	edc4 5a00 	vstr	s11, [r4]
   2d6a4:	ed84 6a01 	vstr	s12, [r4, #4]
   2d6a8:	edc4 6a02 	vstr	s13, [r4, #8]
   2d6ac:	ed84 7a03 	vstr	s14, [r4, #12]
   2d6b0:	4667      	mov	r7, ip
   2d6b2:	f104 0410 	add.w	r4, r4, #16
   2d6b6:	f47f af03 	bne.w	2d4c0 <celt_pitch_xcorr_c+0x4c>
   2d6ba:	e7c6      	b.n	2d64a <celt_pitch_xcorr_c+0x1d6>
   2d6bc:	eef0 6a47 	vmov.f32	s13, s14
   2d6c0:	eeb0 6a47 	vmov.f32	s12, s14
   2d6c4:	eef0 5a47 	vmov.f32	s11, s14
   2d6c8:	eeb0 2a47 	vmov.f32	s4, s14
   2d6cc:	4601      	mov	r1, r0
   2d6ce:	2602      	movs	r6, #2
   2d6d0:	2701      	movs	r7, #1
   2d6d2:	f04f 0b00 	mov.w	fp, #0
   2d6d6:	f102 0c10 	add.w	ip, r2, #16
   2d6da:	e766      	b.n	2d5aa <celt_pitch_xcorr_c+0x136>
   2d6dc:	2500      	movs	r5, #0
   2d6de:	e7b7      	b.n	2d650 <celt_pitch_xcorr_c+0x1dc>
   2d6e0:	00000000 	.word	0x00000000

0002d6e4 <pitch_search>:
   2d6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6e8:	b093      	sub	sp, #76	; 0x4c
   2d6ea:	af02      	add	r7, sp, #8
   2d6ec:	4615      	mov	r5, r2
   2d6ee:	461c      	mov	r4, r3
   2d6f0:	60fa      	str	r2, [r7, #12]
   2d6f2:	2300      	movs	r3, #0
   2d6f4:	2200      	movs	r2, #0
   2d6f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   2d6fa:	e9c7 0105 	strd	r0, r1, [r7, #20]
   2d6fe:	192e      	adds	r6, r5, r4
   2d700:	f7f9 fa14 	bl	26b2c <save_stack>
   2d704:	10aa      	asrs	r2, r5, #2
   2d706:	0093      	lsls	r3, r2, #2
   2d708:	10b6      	asrs	r6, r6, #2
   2d70a:	1065      	asrs	r5, r4, #1
   2d70c:	613b      	str	r3, [r7, #16]
   2d70e:	00b0      	lsls	r0, r6, #2
   2d710:	3307      	adds	r3, #7
   2d712:	f023 0307 	bic.w	r3, r3, #7
   2d716:	61fd      	str	r5, [r7, #28]
   2d718:	1dc1      	adds	r1, r0, #7
   2d71a:	00ad      	lsls	r5, r5, #2
   2d71c:	ebad 0d03 	sub.w	sp, sp, r3
   2d720:	f021 0107 	bic.w	r1, r1, #7
   2d724:	1deb      	adds	r3, r5, #7
   2d726:	f023 0307 	bic.w	r3, r3, #7
   2d72a:	f10d 0e08 	add.w	lr, sp, #8
   2d72e:	ebad 0d01 	sub.w	sp, sp, r1
   2d732:	a902      	add	r1, sp, #8
   2d734:	ebad 0d03 	sub.w	sp, sp, r3
   2d738:	ab02      	add	r3, sp, #8
   2d73a:	2a00      	cmp	r2, #0
   2d73c:	60bd      	str	r5, [r7, #8]
   2d73e:	6239      	str	r1, [r7, #32]
   2d740:	62bb      	str	r3, [r7, #40]	; 0x28
   2d742:	dd09      	ble.n	2d758 <pitch_search+0x74>
   2d744:	693d      	ldr	r5, [r7, #16]
   2d746:	697b      	ldr	r3, [r7, #20]
   2d748:	4671      	mov	r1, lr
   2d74a:	4475      	add	r5, lr
   2d74c:	f853 cb08 	ldr.w	ip, [r3], #8
   2d750:	f841 cb04 	str.w	ip, [r1], #4
   2d754:	428d      	cmp	r5, r1
   2d756:	d1f9      	bne.n	2d74c <pitch_search+0x68>
   2d758:	2e00      	cmp	r6, #0
   2d75a:	dd08      	ble.n	2d76e <pitch_search+0x8a>
   2d75c:	6a3b      	ldr	r3, [r7, #32]
   2d75e:	69b9      	ldr	r1, [r7, #24]
   2d760:	4418      	add	r0, r3
   2d762:	f851 5b08 	ldr.w	r5, [r1], #8
   2d766:	f843 5b04 	str.w	r5, [r3], #4
   2d76a:	4298      	cmp	r0, r3
   2d76c:	d1f9      	bne.n	2d762 <pitch_search+0x7e>
   2d76e:	10a3      	asrs	r3, r4, #2
   2d770:	2b03      	cmp	r3, #3
   2d772:	627b      	str	r3, [r7, #36]	; 0x24
   2d774:	bfd8      	it	le
   2d776:	2400      	movle	r4, #0
   2d778:	f340 80e4 	ble.w	2d944 <pitch_search+0x260>
   2d77c:	1f10      	subs	r0, r2, #4
   2d77e:	0880      	lsrs	r0, r0, #2
   2d780:	f100 0801 	add.w	r8, r0, #1
   2d784:	6a39      	ldr	r1, [r7, #32]
   2d786:	6abc      	ldr	r4, [r7, #40]	; 0x28
   2d788:	3b04      	subs	r3, #4
   2d78a:	089b      	lsrs	r3, r3, #2
   2d78c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
   2d790:	eb01 1903 	add.w	r9, r1, r3, lsl #4
   2d794:	ea4f 0888 	mov.w	r8, r8, lsl #2
   2d798:	607b      	str	r3, [r7, #4]
   2d79a:	eb0e 030a 	add.w	r3, lr, sl
   2d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d7a0:	f108 0301 	add.w	r3, r8, #1
   2d7a4:	eb0e 1000 	add.w	r0, lr, r0, lsl #4
   2d7a8:	637b      	str	r3, [r7, #52]	; 0x34
   2d7aa:	f108 0302 	add.w	r3, r8, #2
   2d7ae:	3020      	adds	r0, #32
   2d7b0:	633b      	str	r3, [r7, #48]	; 0x30
   2d7b2:	f109 091c 	add.w	r9, r9, #28
   2d7b6:	310c      	adds	r1, #12
   2d7b8:	2a03      	cmp	r2, #3
   2d7ba:	460b      	mov	r3, r1
   2d7bc:	ed51 2a03 	vldr	s5, [r1, #-12]
   2d7c0:	ed11 1a02 	vldr	s2, [r1, #-8]
   2d7c4:	ed51 1a01 	vldr	s3, [r1, #-4]
   2d7c8:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 2db10 <pitch_search+0x42c>
   2d7cc:	f340 8164 	ble.w	2da98 <pitch_search+0x3b4>
   2d7d0:	f101 0610 	add.w	r6, r1, #16
   2d7d4:	eef0 6a47 	vmov.f32	s13, s14
   2d7d8:	eeb0 6a47 	vmov.f32	s12, s14
   2d7dc:	eef0 5a47 	vmov.f32	s11, s14
   2d7e0:	4635      	mov	r5, r6
   2d7e2:	f10e 0310 	add.w	r3, lr, #16
   2d7e6:	ed53 7a04 	vldr	s15, [r3, #-16]
   2d7ea:	ed15 2a04 	vldr	s4, [r5, #-16]
   2d7ee:	ed13 4a03 	vldr	s8, [r3, #-12]
   2d7f2:	ed53 4a02 	vldr	s9, [r3, #-8]
   2d7f6:	ed53 0a01 	vldr	s1, [r3, #-4]
   2d7fa:	ee27 3aa2 	vmul.f32	s6, s15, s5
   2d7fe:	ee67 3a81 	vmul.f32	s7, s15, s2
   2d802:	ee27 5aa1 	vmul.f32	s10, s15, s3
   2d806:	ed55 2a03 	vldr	s5, [r5, #-12]
   2d80a:	ee67 7a82 	vmul.f32	s15, s15, s4
   2d80e:	ee73 5a25 	vadd.f32	s11, s6, s11
   2d812:	ee33 6a86 	vadd.f32	s12, s7, s12
   2d816:	ee24 3a01 	vmul.f32	s6, s8, s2
   2d81a:	ee64 3a21 	vmul.f32	s7, s8, s3
   2d81e:	ed15 1a02 	vldr	s2, [r5, #-8]
   2d822:	ee75 6a26 	vadd.f32	s13, s10, s13
   2d826:	ee37 7a87 	vadd.f32	s14, s15, s14
   2d82a:	ee62 7a04 	vmul.f32	s15, s4, s8
   2d82e:	ee24 4a22 	vmul.f32	s8, s8, s5
   2d832:	ee73 5a25 	vadd.f32	s11, s6, s11
   2d836:	ee36 6a23 	vadd.f32	s12, s12, s7
   2d83a:	ee24 3aa1 	vmul.f32	s6, s9, s3
   2d83e:	ee62 3a24 	vmul.f32	s7, s4, s9
   2d842:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2d846:	ee37 7a04 	vadd.f32	s14, s14, s8
   2d84a:	ee62 7aa4 	vmul.f32	s15, s5, s9
   2d84e:	ed55 1a01 	vldr	s3, [r5, #-4]
   2d852:	ee64 4a81 	vmul.f32	s9, s9, s2
   2d856:	ee33 3a25 	vadd.f32	s6, s6, s11
   2d85a:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2d85e:	ee62 5a20 	vmul.f32	s11, s4, s1
   2d862:	ee33 6a86 	vadd.f32	s12, s7, s12
   2d866:	ee22 4aa0 	vmul.f32	s8, s5, s1
   2d86a:	ee37 7a24 	vadd.f32	s14, s14, s9
   2d86e:	ee21 5a20 	vmul.f32	s10, s2, s1
   2d872:	ee60 7aa1 	vmul.f32	s15, s1, s3
   2d876:	3310      	adds	r3, #16
   2d878:	4298      	cmp	r0, r3
   2d87a:	ee75 5a83 	vadd.f32	s11, s11, s6
   2d87e:	ee36 6a04 	vadd.f32	s12, s12, s8
   2d882:	ee75 6a26 	vadd.f32	s13, s10, s13
   2d886:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d88a:	f105 0510 	add.w	r5, r5, #16
   2d88e:	d1aa      	bne.n	2d7e6 <pitch_search+0x102>
   2d890:	e9d7 5c0c 	ldrd	r5, ip, [r7, #48]	; 0x30
   2d894:	eb01 030a 	add.w	r3, r1, sl
   2d898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2d89a:	46c3      	mov	fp, r8
   2d89c:	455a      	cmp	r2, fp
   2d89e:	dd13      	ble.n	2d8c8 <pitch_search+0x1e4>
   2d8a0:	ecf1 7a01 	vldmia	r1!, {s15}
   2d8a4:	ecb3 2a01 	vldmia	r3!, {s4}
   2d8a8:	ee27 4aa2 	vmul.f32	s8, s15, s5
   2d8ac:	ee67 4a81 	vmul.f32	s9, s15, s2
   2d8b0:	ee27 5aa1 	vmul.f32	s10, s15, s3
   2d8b4:	ee67 7a82 	vmul.f32	s15, s15, s4
   2d8b8:	ee75 5a84 	vadd.f32	s11, s11, s8
   2d8bc:	ee36 6a24 	vadd.f32	s12, s12, s9
   2d8c0:	ee76 6a85 	vadd.f32	s13, s13, s10
   2d8c4:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d8c8:	4562      	cmp	r2, ip
   2d8ca:	dd13      	ble.n	2d8f4 <pitch_search+0x210>
   2d8cc:	ecf1 7a01 	vldmia	r1!, {s15}
   2d8d0:	ecf3 2a01 	vldmia	r3!, {s5}
   2d8d4:	ee27 4a81 	vmul.f32	s8, s15, s2
   2d8d8:	ee67 4aa1 	vmul.f32	s9, s15, s3
   2d8dc:	ee27 5a82 	vmul.f32	s10, s15, s4
   2d8e0:	ee67 7aa2 	vmul.f32	s15, s15, s5
   2d8e4:	ee75 5a84 	vadd.f32	s11, s11, s8
   2d8e8:	ee36 6a24 	vadd.f32	s12, s12, s9
   2d8ec:	ee76 6a85 	vadd.f32	s13, s13, s10
   2d8f0:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d8f4:	42aa      	cmp	r2, r5
   2d8f6:	f340 80c0 	ble.w	2da7a <pitch_search+0x396>
   2d8fa:	ed91 4a00 	vldr	s8, [r1]
   2d8fe:	edd3 3a00 	vldr	s7, [r3]
   2d902:	ee24 5a21 	vmul.f32	s10, s8, s3
   2d906:	ee62 4a04 	vmul.f32	s9, s4, s8
   2d90a:	ee64 7a22 	vmul.f32	s15, s8, s5
   2d90e:	ee24 4a23 	vmul.f32	s8, s8, s7
   2d912:	ee75 5a25 	vadd.f32	s11, s10, s11
   2d916:	ee34 6a86 	vadd.f32	s12, s9, s12
   2d91a:	ee77 6aa6 	vadd.f32	s13, s15, s13
   2d91e:	ee34 7a07 	vadd.f32	s14, s8, s14
   2d922:	454e      	cmp	r6, r9
   2d924:	edc4 5a00 	vstr	s11, [r4]
   2d928:	ed84 6a01 	vstr	s12, [r4, #4]
   2d92c:	edc4 6a02 	vstr	s13, [r4, #8]
   2d930:	ed84 7a03 	vstr	s14, [r4, #12]
   2d934:	4631      	mov	r1, r6
   2d936:	f104 0410 	add.w	r4, r4, #16
   2d93a:	f47f af3d 	bne.w	2d7b8 <pitch_search+0xd4>
   2d93e:	687c      	ldr	r4, [r7, #4]
   2d940:	3401      	adds	r4, #1
   2d942:	00a4      	lsls	r4, r4, #2
   2d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d946:	42a3      	cmp	r3, r4
   2d948:	dd20      	ble.n	2d98c <pitch_search+0x2a8>
   2d94a:	693b      	ldr	r3, [r7, #16]
   2d94c:	6a39      	ldr	r1, [r7, #32]
   2d94e:	4473      	add	r3, lr
   2d950:	4618      	mov	r0, r3
   2d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d954:	00a4      	lsls	r4, r4, #2
   2d956:	191d      	adds	r5, r3, r4
   2d958:	440c      	add	r4, r1
   2d95a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d95c:	eb03 0681 	add.w	r6, r3, r1, lsl #2
   2d960:	2a00      	cmp	r2, #0
   2d962:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 2db10 <pitch_search+0x42c>
   2d966:	dd0b      	ble.n	2d980 <pitch_search+0x29c>
   2d968:	4621      	mov	r1, r4
   2d96a:	4673      	mov	r3, lr
   2d96c:	ecf3 7a01 	vldmia	r3!, {s15}
   2d970:	ecf1 6a01 	vldmia	r1!, {s13}
   2d974:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2d978:	4298      	cmp	r0, r3
   2d97a:	ee37 7a27 	vadd.f32	s14, s14, s15
   2d97e:	d1f5      	bne.n	2d96c <pitch_search+0x288>
   2d980:	eca5 7a01 	vstmia	r5!, {s14}
   2d984:	42ae      	cmp	r6, r5
   2d986:	f104 0404 	add.w	r4, r4, #4
   2d98a:	d1e9      	bne.n	2d960 <pitch_search+0x27c>
   2d98c:	f107 0038 	add.w	r0, r7, #56	; 0x38
   2d990:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
   2d994:	9000      	str	r0, [sp, #0]
   2d996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2d998:	68fc      	ldr	r4, [r7, #12]
   2d99a:	f7ff fbbf 	bl	2d11c <find_best_pitch>
   2d99e:	69fb      	ldr	r3, [r7, #28]
   2d9a0:	2b00      	cmp	r3, #0
   2d9a2:	ea4f 0464 	mov.w	r4, r4, asr #1
   2d9a6:	dd4d      	ble.n	2da44 <pitch_search+0x360>
   2d9a8:	e9d7 630e 	ldrd	r6, r3, [r7, #56]	; 0x38
   2d9ac:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
   2d9b0:	68ba      	ldr	r2, [r7, #8]
   2d9b2:	2100      	movs	r1, #0
   2d9b4:	4648      	mov	r0, r9
   2d9b6:	ea4f 0843 	mov.w	r8, r3, lsl #1
   2d9ba:	f7de fccf 	bl	c35c <memset>
   2d9be:	69bb      	ldr	r3, [r7, #24]
   2d9c0:	0075      	lsls	r5, r6, #1
   2d9c2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   2d9c6:	69fb      	ldr	r3, [r7, #28]
   2d9c8:	eba3 0e05 	sub.w	lr, r3, r5
   2d9cc:	697b      	ldr	r3, [r7, #20]
   2d9ce:	eba5 0c08 	sub.w	ip, r5, r8
   2d9d2:	4269      	negs	r1, r5
   2d9d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   2d9d8:	464d      	mov	r5, r9
   2d9da:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
   2d9de:	4698      	mov	r8, r3
   2d9e0:	e004      	b.n	2d9ec <pitch_search+0x308>
   2d9e2:	3101      	adds	r1, #1
   2d9e4:	458e      	cmp	lr, r1
   2d9e6:	f105 0504 	add.w	r5, r5, #4
   2d9ea:	d02b      	beq.n	2da44 <pitch_search+0x360>
   2d9ec:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
   2d9f0:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
   2d9f4:	2b02      	cmp	r3, #2
   2d9f6:	dd06      	ble.n	2da06 <pitch_search+0x322>
   2d9f8:	eb0c 0301 	add.w	r3, ip, r1
   2d9fc:	2b00      	cmp	r3, #0
   2d9fe:	bfb8      	it	lt
   2da00:	425b      	neglt	r3, r3
   2da02:	2b02      	cmp	r3, #2
   2da04:	dced      	bgt.n	2d9e2 <pitch_search+0x2fe>
   2da06:	2c00      	cmp	r4, #0
   2da08:	ed9f 7a41 	vldr	s14, [pc, #260]	; 2db10 <pitch_search+0x42c>
   2da0c:	dd13      	ble.n	2da36 <pitch_search+0x352>
   2da0e:	eb06 0281 	add.w	r2, r6, r1, lsl #2
   2da12:	4643      	mov	r3, r8
   2da14:	ecf3 7a01 	vldmia	r3!, {s15}
   2da18:	ecf2 6a01 	vldmia	r2!, {s13}
   2da1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2da20:	4283      	cmp	r3, r0
   2da22:	ee37 7a27 	vadd.f32	s14, s14, s15
   2da26:	d1f5      	bne.n	2da14 <pitch_search+0x330>
   2da28:	eeb4 7a46 	vcmp.f32	s14, s12
   2da2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2da30:	bf48      	it	mi
   2da32:	eeb0 7a46 	vmovmi.f32	s14, s12
   2da36:	3101      	adds	r1, #1
   2da38:	458e      	cmp	lr, r1
   2da3a:	ed85 7a00 	vstr	s14, [r5]
   2da3e:	f105 0504 	add.w	r5, r5, #4
   2da42:	d1d3      	bne.n	2d9ec <pitch_search+0x308>
   2da44:	f107 0338 	add.w	r3, r7, #56	; 0x38
   2da48:	9300      	str	r3, [sp, #0]
   2da4a:	4622      	mov	r2, r4
   2da4c:	e9d7 1306 	ldrd	r1, r3, [r7, #24]
   2da50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2da52:	f7ff fb63 	bl	2d11c <find_best_pitch>
   2da56:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2da58:	2a00      	cmp	r2, #0
   2da5a:	dd03      	ble.n	2da64 <pitch_search+0x380>
   2da5c:	69fb      	ldr	r3, [r7, #28]
   2da5e:	3b01      	subs	r3, #1
   2da60:	429a      	cmp	r2, r3
   2da62:	db2a      	blt.n	2daba <pitch_search+0x3d6>
   2da64:	2300      	movs	r3, #0
   2da66:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
   2da6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   2da6c:	6013      	str	r3, [r2, #0]
   2da6e:	f7f9 f86f 	bl	26b50 <restore_stack>
   2da72:	3744      	adds	r7, #68	; 0x44
   2da74:	46bd      	mov	sp, r7
   2da76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2da7a:	45b1      	cmp	r9, r6
   2da7c:	edc4 5a00 	vstr	s11, [r4]
   2da80:	ed84 6a01 	vstr	s12, [r4, #4]
   2da84:	edc4 6a02 	vstr	s13, [r4, #8]
   2da88:	ed84 7a03 	vstr	s14, [r4, #12]
   2da8c:	4631      	mov	r1, r6
   2da8e:	f104 0410 	add.w	r4, r4, #16
   2da92:	f47f ae91 	bne.w	2d7b8 <pitch_search+0xd4>
   2da96:	e752      	b.n	2d93e <pitch_search+0x25a>
   2da98:	eef0 6a47 	vmov.f32	s13, s14
   2da9c:	eeb0 6a47 	vmov.f32	s12, s14
   2daa0:	eef0 5a47 	vmov.f32	s11, s14
   2daa4:	eeb0 2a47 	vmov.f32	s4, s14
   2daa8:	4671      	mov	r1, lr
   2daaa:	2502      	movs	r5, #2
   2daac:	f04f 0c01 	mov.w	ip, #1
   2dab0:	f04f 0b00 	mov.w	fp, #0
   2dab4:	f103 0610 	add.w	r6, r3, #16
   2dab8:	e6f0      	b.n	2d89c <pitch_search+0x1b8>
   2daba:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   2dabe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2dac0:	eddf 5a14 	vldr	s11, [pc, #80]	; 2db14 <pitch_search+0x430>
   2dac4:	3b01      	subs	r3, #1
   2dac6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2daca:	ed93 7a00 	vldr	s14, [r3]
   2dace:	edd3 7a01 	vldr	s15, [r3, #4]
   2dad2:	ed93 6a02 	vldr	s12, [r3, #8]
   2dad6:	ee77 6ac7 	vsub.f32	s13, s15, s14
   2dada:	ee36 5a47 	vsub.f32	s10, s12, s14
   2dade:	ee66 6aa5 	vmul.f32	s13, s13, s11
   2dae2:	eeb4 5ae6 	vcmpe.f32	s10, s13
   2dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2daea:	dd01      	ble.n	2daf0 <pitch_search+0x40c>
   2daec:	2301      	movs	r3, #1
   2daee:	e7ba      	b.n	2da66 <pitch_search+0x382>
   2daf0:	ee77 7ac6 	vsub.f32	s15, s15, s12
   2daf4:	ee37 7a46 	vsub.f32	s14, s14, s12
   2daf8:	ee67 7aa5 	vmul.f32	s15, s15, s11
   2dafc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2db00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2db04:	bfcc      	ite	gt
   2db06:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
   2db0a:	2300      	movle	r3, #0
   2db0c:	e7ab      	b.n	2da66 <pitch_search+0x382>
   2db0e:	bf00      	nop
   2db10:	00000000 	.word	0x00000000
   2db14:	3f333333 	.word	0x3f333333

0002db18 <remove_doubling>:
   2db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db1c:	ed2d 8b10 	vpush	{d8-d15}
   2db20:	b08d      	sub	sp, #52	; 0x34
   2db22:	af00      	add	r7, sp, #0
   2db24:	4616      	mov	r6, r2
   2db26:	469a      	mov	sl, r3
   2db28:	460d      	mov	r5, r1
   2db2a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   2db2e:	603a      	str	r2, [r7, #0]
   2db30:	4683      	mov	fp, r0
   2db32:	eeb0 ba40 	vmov.f32	s22, s0
   2db36:	f7f8 fff9 	bl	26b2c <save_stack>
   2db3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2db3e:	ed9f eaea 	vldr	s28, [pc, #936]	; 2dee8 <remove_doubling+0x3d0>
   2db42:	681b      	ldr	r3, [r3, #0]
   2db44:	eb05 79d5 	add.w	r9, r5, r5, lsr #31
   2db48:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   2db4c:	ea4f 0069 	mov.w	r0, r9, asr #1
   2db50:	ea4f 0863 	mov.w	r8, r3, asr #1
   2db54:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
   2db58:	105b      	asrs	r3, r3, #1
   2db5a:	4580      	cmp	r8, r0
   2db5c:	ea4f 0280 	mov.w	r2, r0, lsl #2
   2db60:	61bb      	str	r3, [r7, #24]
   2db62:	4493      	add	fp, r2
   2db64:	bfa8      	it	ge
   2db66:	4603      	movge	r3, r0
   2db68:	f102 020b 	add.w	r2, r2, #11
   2db6c:	bfa8      	it	ge
   2db6e:	f103 38ff 	addge.w	r8, r3, #4294967295	; 0xffffffff
   2db72:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   2db76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2db7a:	61f8      	str	r0, [r7, #28]
   2db7c:	f022 0207 	bic.w	r2, r2, #7
   2db80:	1064      	asrs	r4, r4, #1
   2db82:	eb0a 71da 	add.w	r1, sl, sl, lsr #31
   2db86:	ebad 0d02 	sub.w	sp, sp, r2
   2db8a:	f1ba 0f01 	cmp.w	sl, #1
   2db8e:	60fc      	str	r4, [r7, #12]
   2db90:	f8c3 8000 	str.w	r8, [r3]
   2db94:	ea4f 0461 	mov.w	r4, r1, asr #1
   2db98:	46e9      	mov	r9, sp
   2db9a:	ea4f 0688 	mov.w	r6, r8, lsl #2
   2db9e:	eef0 da4e 	vmov.f32	s27, s28
   2dba2:	dd12      	ble.n	2dbca <remove_doubling+0xb2>
   2dba4:	46dc      	mov	ip, fp
   2dba6:	ebab 0006 	sub.w	r0, fp, r6
   2dbaa:	2100      	movs	r1, #0
   2dbac:	ecfc 7a01 	vldmia	ip!, {s15}
   2dbb0:	ecf0 6a01 	vldmia	r0!, {s13}
   2dbb4:	ee27 7aa7 	vmul.f32	s14, s15, s15
   2dbb8:	3101      	adds	r1, #1
   2dbba:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2dbbe:	428c      	cmp	r4, r1
   2dbc0:	ee7d da87 	vadd.f32	s27, s27, s14
   2dbc4:	ee3e ea27 	vadd.f32	s28, s28, s15
   2dbc8:	dcf0      	bgt.n	2dbac <remove_doubling+0x94>
   2dbca:	2d01      	cmp	r5, #1
   2dbcc:	edc9 da00 	vstr	s27, [r9]
   2dbd0:	dd21      	ble.n	2dc16 <remove_doubling+0xfe>
   2dbd2:	eef0 7a6d 	vmov.f32	s15, s27
   2dbd6:	f04f 0e00 	mov.w	lr, #0
   2dbda:	465d      	mov	r5, fp
   2dbdc:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
   2dbe0:	f109 0c04 	add.w	ip, r9, #4
   2dbe4:	2101      	movs	r1, #1
   2dbe6:	ed35 7a01 	vldmdb	r5!, {s14}
   2dbea:	ed70 6a01 	vldmdb	r0!, {s13}
   2dbee:	ee27 7a07 	vmul.f32	s14, s14, s14
   2dbf2:	ee66 6aa6 	vmul.f32	s13, s13, s13
   2dbf6:	ee77 7a27 	vadd.f32	s15, s14, s15
   2dbfa:	3101      	adds	r1, #1
   2dbfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2dc00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2dc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dc08:	f100 817c 	bmi.w	2df04 <remove_doubling+0x3ec>
   2dc0c:	69fb      	ldr	r3, [r7, #28]
   2dc0e:	ecec 7a01 	vstmia	ip!, {s15}
   2dc12:	428b      	cmp	r3, r1
   2dc14:	dae7      	bge.n	2dbe6 <remove_doubling+0xce>
   2dc16:	444e      	add	r6, r9
   2dc18:	edd6 ca00 	vldr	s25, [r6]
   2dc1c:	ed9f cab2 	vldr	s24, [pc, #712]	; 2dee8 <remove_doubling+0x3d0>
   2dc20:	eddf 9ab2 	vldr	s19, [pc, #712]	; 2deec <remove_doubling+0x3d4>
   2dc24:	eddf 8ab2 	vldr	s17, [pc, #712]	; 2def0 <remove_doubling+0x3d8>
   2dc28:	ed9f dab2 	vldr	s26, [pc, #712]	; 2def4 <remove_doubling+0x3dc>
   2dc2c:	eddf bab2 	vldr	s23, [pc, #712]	; 2def8 <remove_doubling+0x3e0>
   2dc30:	ed9f 9ab2 	vldr	s18, [pc, #712]	; 2defc <remove_doubling+0x3e4>
   2dc34:	ee2c 7aad 	vmul.f32	s14, s25, s27
   2dc38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2dc3c:	ee77 7a27 	vadd.f32	s15, s14, s15
   2dc40:	2602      	movs	r6, #2
   2dc42:	ee17 0a90 	vmov	r0, s15
   2dc46:	f7de fe0d 	bl	c864 <__aeabi_f2d>
   2dc4a:	ec41 0b10 	vmov	d0, r0, r1
   2dc4e:	f7e5 fccf 	bl	135f0 <sqrt>
   2dc52:	ec51 0b10 	vmov	r0, r1, d0
   2dc56:	f7de fee1 	bl	ca1c <__aeabi_d2f>
   2dc5a:	ee07 0a90 	vmov	s15, r0
   2dc5e:	ee8e fa27 	vdiv.f32	s30, s28, s15
   2dc62:	69ba      	ldr	r2, [r7, #24]
   2dc64:	f8c7 8008 	str.w	r8, [r7, #8]
   2dc68:	0053      	lsls	r3, r2, #1
   2dc6a:	607b      	str	r3, [r7, #4]
   2dc6c:	4413      	add	r3, r2
   2dc6e:	613b      	str	r3, [r7, #16]
   2dc70:	ea4f 0348 	mov.w	r3, r8, lsl #1
   2dc74:	617b      	str	r3, [r7, #20]
   2dc76:	4653      	mov	r3, sl
   2dc78:	46ca      	mov	sl, r9
   2dc7a:	46d9      	mov	r9, fp
   2dc7c:	469b      	mov	fp, r3
   2dc7e:	eeb0 aa6c 	vmov.f32	s20, s25
   2dc82:	eef0 aa4f 	vmov.f32	s21, s30
   2dc86:	697b      	ldr	r3, [r7, #20]
   2dc88:	199d      	adds	r5, r3, r6
   2dc8a:	69bb      	ldr	r3, [r7, #24]
   2dc8c:	0071      	lsls	r1, r6, #1
   2dc8e:	fb95 f5f1 	sdiv	r5, r5, r1
   2dc92:	42ab      	cmp	r3, r5
   2dc94:	f300 809a 	bgt.w	2ddcc <remove_doubling+0x2b4>
   2dc98:	2e02      	cmp	r6, #2
   2dc9a:	f000 813d 	beq.w	2df18 <remove_doubling+0x400>
   2dc9e:	4898      	ldr	r0, [pc, #608]	; (2df00 <remove_doubling+0x3e8>)
   2dca0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   2dca4:	fb00 f008 	mul.w	r0, r0, r8
   2dca8:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   2dcac:	fb90 f0f1 	sdiv	r0, r0, r1
   2dcb0:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
   2dcb4:	edd1 ea00 	vldr	s29, [r1]
   2dcb8:	ebc0 7080 	rsb	r0, r0, r0, lsl #30
   2dcbc:	ebc5 7e85 	rsb	lr, r5, r5, lsl #30
   2dcc0:	f1bb 0f01 	cmp.w	fp, #1
   2dcc4:	ea4f 0080 	mov.w	r0, r0, lsl #2
   2dcc8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
   2dccc:	f340 812e 	ble.w	2df2c <remove_doubling+0x414>
   2dcd0:	ed9f 8a85 	vldr	s16, [pc, #532]	; 2dee8 <remove_doubling+0x3d0>
   2dcd4:	44ce      	add	lr, r9
   2dcd6:	eef0 6a48 	vmov.f32	s13, s16
   2dcda:	4448      	add	r0, r9
   2dcdc:	46cc      	mov	ip, r9
   2dcde:	2100      	movs	r1, #0
   2dce0:	ecfc 7a01 	vldmia	ip!, {s15}
   2dce4:	ecbe 7a01 	vldmia	lr!, {s14}
   2dce8:	ecb0 6a01 	vldmia	r0!, {s12}
   2dcec:	ee27 7a87 	vmul.f32	s14, s15, s14
   2dcf0:	3101      	adds	r1, #1
   2dcf2:	ee67 7a86 	vmul.f32	s15, s15, s12
   2dcf6:	428c      	cmp	r4, r1
   2dcf8:	ee76 6a87 	vadd.f32	s13, s13, s14
   2dcfc:	ee38 8a27 	vadd.f32	s16, s16, s15
   2dd00:	dcee      	bgt.n	2dce0 <remove_doubling+0x1c8>
   2dd02:	ee76 6a88 	vadd.f32	s13, s13, s16
   2dd06:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
   2dd0a:	ee26 8a88 	vmul.f32	s16, s13, s16
   2dd0e:	eb0a 0185 	add.w	r1, sl, r5, lsl #2
   2dd12:	edd1 7a00 	vldr	s15, [r1]
   2dd16:	ee7e eaa7 	vadd.f32	s29, s29, s15
   2dd1a:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
   2dd1e:	ee6e eaaf 	vmul.f32	s29, s29, s31
   2dd22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2dd26:	ee2e 7aad 	vmul.f32	s14, s29, s27
   2dd2a:	ee77 7a27 	vadd.f32	s15, s14, s15
   2dd2e:	ee17 0a90 	vmov	r0, s15
   2dd32:	f7de fd97 	bl	c864 <__aeabi_f2d>
   2dd36:	ec41 0b10 	vmov	d0, r0, r1
   2dd3a:	f7e5 fc59 	bl	135f0 <sqrt>
   2dd3e:	ec51 0b10 	vmov	r0, r1, d0
   2dd42:	f7de fe6b 	bl	ca1c <__aeabi_d2f>
   2dd46:	68fb      	ldr	r3, [r7, #12]
   2dd48:	1ae9      	subs	r1, r5, r3
   2dd4a:	f101 0c01 	add.w	ip, r1, #1
   2dd4e:	ee07 0a90 	vmov	s15, r0
   2dd52:	f1bc 0f02 	cmp.w	ip, #2
   2dd56:	eec8 6a27 	vdiv.f32	s13, s16, s15
   2dd5a:	f240 80c2 	bls.w	2dee2 <remove_doubling+0x3ca>
   2dd5e:	3102      	adds	r1, #2
   2dd60:	2904      	cmp	r1, #4
   2dd62:	f200 80d6 	bhi.w	2df12 <remove_doubling+0x3fa>
   2dd66:	fb06 f106 	mul.w	r1, r6, r6
   2dd6a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   2dd6e:	4541      	cmp	r1, r8
   2dd70:	f280 80cf 	bge.w	2df12 <remove_doubling+0x3fa>
   2dd74:	ee2b 7a2f 	vmul.f32	s14, s22, s31
   2dd78:	ee6f 7a29 	vmul.f32	s15, s30, s19
   2dd7c:	693b      	ldr	r3, [r7, #16]
   2dd7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2dd82:	eef4 7a68 	vcmp.f32	s15, s17
   2dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dd8a:	bf48      	it	mi
   2dd8c:	eef0 7a68 	vmovmi.f32	s15, s17
   2dd90:	42ab      	cmp	r3, r5
   2dd92:	f340 8094 	ble.w	2debe <remove_doubling+0x3a6>
   2dd96:	ee6f 7a2b 	vmul.f32	s15, s30, s23
   2dd9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2dd9e:	eef4 7a49 	vcmp.f32	s15, s18
   2dda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dda6:	bf48      	it	mi
   2dda8:	eef0 7a49 	vmovmi.f32	s15, s18
   2ddac:	eef4 7ae6 	vcmpe.f32	s15, s13
   2ddb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ddb4:	d506      	bpl.n	2ddc4 <remove_doubling+0x2ac>
   2ddb6:	eeb0 aa6e 	vmov.f32	s20, s29
   2ddba:	eeb0 ea48 	vmov.f32	s28, s16
   2ddbe:	eef0 aa66 	vmov.f32	s21, s13
   2ddc2:	60bd      	str	r5, [r7, #8]
   2ddc4:	3601      	adds	r6, #1
   2ddc6:	2e10      	cmp	r6, #16
   2ddc8:	f47f af5d 	bne.w	2dc86 <remove_doubling+0x16e>
   2ddcc:	eeb5 eac0 	vcmpe.f32	s28, #0.0
   2ddd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2ddd4:	bf48      	it	mi
   2ddd6:	ed9f ea44 	vldrmi	s28, [pc, #272]	; 2dee8 <remove_doubling+0x3d0>
   2ddda:	68bb      	ldr	r3, [r7, #8]
   2dddc:	eeb4 aace 	vcmpe.f32	s20, s28
   2dde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dde4:	bf84      	itt	hi
   2dde6:	eef7 7a00 	vmovhi.f32	s15, #112	; 0x3f800000  1.0
   2ddea:	ee3a aa27 	vaddhi.f32	s20, s20, s15
   2ddee:	ebc3 7583 	rsb	r5, r3, r3, lsl #30
   2ddf2:	bf88      	it	hi
   2ddf4:	ee8e 8a0a 	vdivhi.f32	s16, s28, s20
   2ddf8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   2ddfc:	f1a9 0608 	sub.w	r6, r9, #8
   2de00:	46da      	mov	sl, fp
   2de02:	f105 0504 	add.w	r5, r5, #4
   2de06:	46cb      	mov	fp, r9
   2de08:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
   2de0c:	f107 0c24 	add.w	ip, r7, #36	; 0x24
   2de10:	bf98      	it	ls
   2de12:	eeb7 8a00 	vmovls.f32	s16, #112	; 0x3f800000  1.0
   2de16:	f1ba 0f01 	cmp.w	sl, #1
   2de1a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2dee8 <remove_doubling+0x3d0>
   2de1e:	dd0d      	ble.n	2de3c <remove_doubling+0x324>
   2de20:	4629      	mov	r1, r5
   2de22:	465a      	mov	r2, fp
   2de24:	2300      	movs	r3, #0
   2de26:	ecf2 7a01 	vldmia	r2!, {s15}
   2de2a:	ecf1 6a01 	vldmia	r1!, {s13}
   2de2e:	3301      	adds	r3, #1
   2de30:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2de34:	429c      	cmp	r4, r3
   2de36:	ee37 7a27 	vadd.f32	s14, s14, s15
   2de3a:	dcf4      	bgt.n	2de26 <remove_doubling+0x30e>
   2de3c:	3d04      	subs	r5, #4
   2de3e:	42b5      	cmp	r5, r6
   2de40:	ecac 7a01 	vstmia	ip!, {s14}
   2de44:	d1e7      	bne.n	2de16 <remove_doubling+0x2fe>
   2de46:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
   2de4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   2de4e:	eddf 5a27 	vldr	s11, [pc, #156]	; 2deec <remove_doubling+0x3d4>
   2de52:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
   2de56:	ee77 6ac7 	vsub.f32	s13, s15, s14
   2de5a:	ee36 5a47 	vsub.f32	s10, s12, s14
   2de5e:	ee66 6aa5 	vmul.f32	s13, s13, s11
   2de62:	eeb4 5ae6 	vcmpe.f32	s10, s13
   2de66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2de6a:	dc62      	bgt.n	2df32 <remove_doubling+0x41a>
   2de6c:	ee77 7ac6 	vsub.f32	s15, s15, s12
   2de70:	ee37 7a46 	vsub.f32	s14, s14, s12
   2de74:	ee67 7aa5 	vmul.f32	s15, s15, s11
   2de78:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2de7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2de80:	bfcc      	ite	gt
   2de82:	f04f 33ff 	movgt.w	r3, #4294967295	; 0xffffffff
   2de86:	2300      	movle	r3, #0
   2de88:	68ba      	ldr	r2, [r7, #8]
   2de8a:	eef4 aa48 	vcmp.f32	s21, s16
   2de8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2de92:	683a      	ldr	r2, [r7, #0]
   2de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2de98:	bf48      	it	mi
   2de9a:	eeb0 8a6a 	vmovmi.f32	s16, s21
   2de9e:	4293      	cmp	r3, r2
   2dea0:	bfb8      	it	lt
   2dea2:	4613      	movlt	r3, r2
   2dea4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2dea8:	6013      	str	r3, [r2, #0]
   2deaa:	f7f8 fe51 	bl	26b50 <restore_stack>
   2deae:	eeb0 0a48 	vmov.f32	s0, s16
   2deb2:	3734      	adds	r7, #52	; 0x34
   2deb4:	46bd      	mov	sp, r7
   2deb6:	ecbd 8b10 	vpop	{d8-d15}
   2deba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2debe:	687b      	ldr	r3, [r7, #4]
   2dec0:	42ab      	cmp	r3, r5
   2dec2:	f77f af73 	ble.w	2ddac <remove_doubling+0x294>
   2dec6:	ee6f 7a0d 	vmul.f32	s15, s30, s26
   2deca:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
   2dece:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2ded2:	eef4 7a46 	vcmp.f32	s15, s12
   2ded6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2deda:	bf48      	it	mi
   2dedc:	eef0 7a46 	vmovmi.f32	s15, s12
   2dee0:	e764      	b.n	2ddac <remove_doubling+0x294>
   2dee2:	eeb0 7a4b 	vmov.f32	s14, s22
   2dee6:	e747      	b.n	2dd78 <remove_doubling+0x260>
   2dee8:	00000000 	.word	0x00000000
   2deec:	3f333333 	.word	0x3f333333
   2def0:	3e99999a 	.word	0x3e99999a
   2def4:	3f666666 	.word	0x3f666666
   2def8:	3f59999a 	.word	0x3f59999a
   2defc:	3ecccccd 	.word	0x3ecccccd
   2df00:	000411c8 	.word	0x000411c8
   2df04:	69fb      	ldr	r3, [r7, #28]
   2df06:	f84c eb04 	str.w	lr, [ip], #4
   2df0a:	428b      	cmp	r3, r1
   2df0c:	f6bf ae6b 	bge.w	2dbe6 <remove_doubling+0xce>
   2df10:	e681      	b.n	2dc16 <remove_doubling+0xfe>
   2df12:	eeb0 7a4c 	vmov.f32	s14, s24
   2df16:	e72f      	b.n	2dd78 <remove_doubling+0x260>
   2df18:	69fb      	ldr	r3, [r7, #28]
   2df1a:	eb05 0008 	add.w	r0, r5, r8
   2df1e:	4298      	cmp	r0, r3
   2df20:	f77f aec6 	ble.w	2dcb0 <remove_doubling+0x198>
   2df24:	eef0 ea6c 	vmov.f32	s29, s25
   2df28:	4640      	mov	r0, r8
   2df2a:	e6c5      	b.n	2dcb8 <remove_doubling+0x1a0>
   2df2c:	eeb0 8a4c 	vmov.f32	s16, s24
   2df30:	e6ed      	b.n	2dd0e <remove_doubling+0x1f6>
   2df32:	2301      	movs	r3, #1
   2df34:	e7a8      	b.n	2de88 <remove_doubling+0x370>
   2df36:	bf00      	nop

0002df38 <quant_coarse_energy_impl.isra.3>:
   2df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2df3c:	ed2d 8b08 	vpush	{d8-d11}
   2df40:	b08d      	sub	sp, #52	; 0x34
   2df42:	2600      	movs	r6, #0
   2df44:	9c20      	ldr	r4, [sp, #128]	; 0x80
   2df46:	9302      	str	r3, [sp, #8]
   2df48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2df4a:	960a      	str	r6, [sp, #40]	; 0x28
   2df4c:	1ca5      	adds	r5, r4, #2
   2df4e:	429d      	cmp	r5, r3
   2df50:	9003      	str	r0, [sp, #12]
   2df52:	9101      	str	r1, [sp, #4]
   2df54:	9206      	str	r2, [sp, #24]
   2df56:	eef0 aa40 	vmov.f32	s21, s0
   2df5a:	960b      	str	r6, [sp, #44]	; 0x2c
   2df5c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   2df60:	9c26      	ldr	r4, [sp, #152]	; 0x98
   2df62:	f2c0 8121 	blt.w	2e1a8 <quant_coarse_energy_impl.isra.3+0x270>
   2df66:	2c00      	cmp	r4, #0
   2df68:	f040 8119 	bne.w	2e19e <quant_coarse_energy_impl.isra.3+0x266>
   2df6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2df6e:	4991      	ldr	r1, [pc, #580]	; (2e1b4 <quant_coarse_energy_impl.isra.3+0x27c>)
   2df70:	4a91      	ldr	r2, [pc, #580]	; (2e1b8 <quant_coarse_energy_impl.isra.3+0x280>)
   2df72:	009b      	lsls	r3, r3, #2
   2df74:	4419      	add	r1, r3
   2df76:	4413      	add	r3, r2
   2df78:	edd1 9a00 	vldr	s19, [r1]
   2df7c:	ed93 aa00 	vldr	s20, [r3]
   2df80:	9a06      	ldr	r2, [sp, #24]
   2df82:	9d01      	ldr	r5, [sp, #4]
   2df84:	42aa      	cmp	r2, r5
   2df86:	f340 80fe 	ble.w	2e186 <quant_coarse_energy_impl.isra.3+0x24e>
   2df8a:	1b53      	subs	r3, r2, r5
   2df8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2df8e:	eddf 8a8b 	vldr	s17, [pc, #556]	; 2e1bc <quant_coarse_energy_impl.isra.3+0x284>
   2df92:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
   2df96:	fb02 f303 	mul.w	r3, r2, r3
   2df9a:	eba3 0b83 	sub.w	fp, r3, r3, lsl #2
   2df9e:	9a03      	ldr	r2, [sp, #12]
   2dfa0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2dfa2:	f8d2 c000 	ldr.w	ip, [r2]
   2dfa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2dfaa:	9307      	str	r3, [sp, #28]
   2dfac:	f04f 0a00 	mov.w	sl, #0
   2dfb0:	eefa ba02 	vmov.f32	s23, #162	; 0xc1100000 -9.0
   2dfb4:	2d14      	cmp	r5, #20
   2dfb6:	462b      	mov	r3, r5
   2dfb8:	bfa8      	it	ge
   2dfba:	2314      	movge	r3, #20
   2dfbc:	005b      	lsls	r3, r3, #1
   2dfbe:	9921      	ldr	r1, [sp, #132]	; 0x84
   2dfc0:	1c5a      	adds	r2, r3, #1
   2dfc2:	188a      	adds	r2, r1, r2
   2dfc4:	18cb      	adds	r3, r1, r3
   2dfc6:	af0a      	add	r7, sp, #40	; 0x28
   2dfc8:	9205      	str	r2, [sp, #20]
   2dfca:	9304      	str	r3, [sp, #16]
   2dfcc:	2600      	movs	r6, #0
   2dfce:	eebb ba0c 	vmov.f32	s22, #188	; 0xc1e00000 -28.0
   2dfd2:	9700      	str	r7, [sp, #0]
   2dfd4:	fb0c 5306 	mla	r3, ip, r6, r5
   2dfd8:	009b      	lsls	r3, r3, #2
   2dfda:	eb08 0003 	add.w	r0, r8, r3
   2dfde:	edd0 7a00 	vldr	s15, [r0]
   2dfe2:	9a02      	ldr	r2, [sp, #8]
   2dfe4:	eef4 7aeb 	vcmpe.f32	s15, s23
   2dfe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dfec:	bf54      	ite	pl
   2dfee:	eeb0 8a67 	vmovpl.f32	s16, s15
   2dff2:	eeb0 8a6b 	vmovmi.f32	s16, s23
   2dff6:	441a      	add	r2, r3
   2dff8:	ee2a 8a08 	vmul.f32	s16, s20, s16
   2dffc:	edd2 6a00 	vldr	s13, [r2]
   2e000:	ee36 9ac8 	vsub.f32	s18, s13, s16
   2e004:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2e008:	ee39 9a68 	vsub.f32	s18, s18, s17
   2e00c:	ee39 7a07 	vadd.f32	s14, s18, s14
   2e010:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   2e014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e018:	bf44      	itt	mi
   2e01a:	eeb7 6a00 	vmovmi.f32	s12, #112	; 0x3f800000  1.0
   2e01e:	ee37 7a46 	vsubmi.f32	s14, s14, s12
   2e022:	eef4 7a4b 	vcmp.f32	s15, s22
   2e026:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   2e02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e02e:	ee17 4a10 	vmov	r4, s14
   2e032:	bf48      	it	mi
   2e034:	eef0 7a4b 	vmovmi.f32	s15, s22
   2e038:	2c00      	cmp	r4, #0
   2e03a:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
   2e03e:	db76      	blt.n	2e12e <quant_coarse_energy_impl.isra.3+0x1f6>
   2e040:	f8d9 101c 	ldr.w	r1, [r9, #28]
   2e044:	f8d9 2014 	ldr.w	r2, [r9, #20]
   2e048:	fab1 f181 	clz	r1, r1
   2e04c:	f1c1 0120 	rsb	r1, r1, #32
   2e050:	1a52      	subs	r2, r2, r1
   2e052:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2e054:	1a8a      	subs	r2, r1, r2
   2e056:	9901      	ldr	r1, [sp, #4]
   2e058:	42a9      	cmp	r1, r5
   2e05a:	eb02 0e0b 	add.w	lr, r2, fp
   2e05e:	4621      	mov	r1, r4
   2e060:	d00f      	beq.n	2e082 <quant_coarse_energy_impl.isra.3+0x14a>
   2e062:	f1be 0f1d 	cmp.w	lr, #29
   2e066:	dc0c      	bgt.n	2e082 <quant_coarse_energy_impl.isra.3+0x14a>
   2e068:	f1be 0f17 	cmp.w	lr, #23
   2e06c:	dc03      	bgt.n	2e076 <quant_coarse_energy_impl.isra.3+0x13e>
   2e06e:	2c01      	cmp	r4, #1
   2e070:	bfa8      	it	ge
   2e072:	2101      	movge	r1, #1
   2e074:	9109      	str	r1, [sp, #36]	; 0x24
   2e076:	f1be 0f0f 	cmp.w	lr, #15
   2e07a:	bfdc      	itt	le
   2e07c:	ea41 71e1 	orrle.w	r1, r1, r1, asr #31
   2e080:	9109      	strle	r1, [sp, #36]	; 0x24
   2e082:	9f27      	ldr	r7, [sp, #156]	; 0x9c
   2e084:	b127      	cbz	r7, 2e090 <quant_coarse_energy_impl.isra.3+0x158>
   2e086:	2d01      	cmp	r5, #1
   2e088:	bfc4      	itt	gt
   2e08a:	ea01 71e1 	andgt.w	r1, r1, r1, asr #31
   2e08e:	9109      	strgt	r1, [sp, #36]	; 0x24
   2e090:	2a0e      	cmp	r2, #14
   2e092:	dc5f      	bgt.n	2e154 <quant_coarse_energy_impl.isra.3+0x21c>
   2e094:	2a01      	cmp	r2, #1
   2e096:	dd68      	ble.n	2e16a <quant_coarse_energy_impl.isra.3+0x232>
   2e098:	2901      	cmp	r1, #1
   2e09a:	468c      	mov	ip, r1
   2e09c:	bfa8      	it	ge
   2e09e:	f04f 0c01 	movge.w	ip, #1
   2e0a2:	ea4c 7cec 	orr.w	ip, ip, ip, asr #31
   2e0a6:	ea4f 034c 	mov.w	r3, ip, lsl #1
   2e0aa:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
   2e0ae:	4a44      	ldr	r2, [pc, #272]	; (2e1c0 <quant_coarse_energy_impl.isra.3+0x288>)
   2e0b0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   2e0b4:	2302      	movs	r3, #2
   2e0b6:	4648      	mov	r0, r9
   2e0b8:	f7fe fc78 	bl	2c9ac <ec_enc_icdf>
   2e0bc:	9b03      	ldr	r3, [sp, #12]
   2e0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e0c0:	f8d3 c000 	ldr.w	ip, [r3]
   2e0c4:	ee07 2a90 	vmov	s15, r2
   2e0c8:	fb0c 5306 	mla	r3, ip, r6, r5
   2e0cc:	009b      	lsls	r3, r3, #2
   2e0ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2e0d2:	eb08 0003 	add.w	r0, r8, r3
   2e0d6:	1aa4      	subs	r4, r4, r2
   2e0d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2e0da:	ee38 8a28 	vadd.f32	s16, s16, s17
   2e0de:	ee29 7aa7 	vmul.f32	s14, s19, s15
   2e0e2:	ee78 8aa7 	vadd.f32	s17, s17, s15
   2e0e6:	ee39 9a67 	vsub.f32	s18, s18, s15
   2e0ea:	4413      	add	r3, r2
   2e0ec:	ed83 9a00 	vstr	s18, [r3]
   2e0f0:	9a00      	ldr	r2, [sp, #0]
   2e0f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e0f4:	ee78 8ac7 	vsub.f32	s17, s17, s14
   2e0f8:	2c00      	cmp	r4, #0
   2e0fa:	ee38 8a27 	vadd.f32	s16, s16, s15
   2e0fe:	f106 0601 	add.w	r6, r6, #1
   2e102:	bfb8      	it	lt
   2e104:	4264      	neglt	r4, r4
   2e106:	ece2 8a01 	vstmia	r2!, {s17}
   2e10a:	42b3      	cmp	r3, r6
   2e10c:	9200      	str	r2, [sp, #0]
   2e10e:	44a2      	add	sl, r4
   2e110:	ed80 8a00 	vstr	s16, [r0]
   2e114:	dd02      	ble.n	2e11c <quant_coarse_energy_impl.isra.3+0x1e4>
   2e116:	edd2 8a00 	vldr	s17, [r2]
   2e11a:	e75b      	b.n	2dfd4 <quant_coarse_energy_impl.isra.3+0x9c>
   2e11c:	9b07      	ldr	r3, [sp, #28]
   2e11e:	449b      	add	fp, r3
   2e120:	9b06      	ldr	r3, [sp, #24]
   2e122:	3501      	adds	r5, #1
   2e124:	42ab      	cmp	r3, r5
   2e126:	d030      	beq.n	2e18a <quant_coarse_energy_impl.isra.3+0x252>
   2e128:	eddd 8a0a 	vldr	s17, [sp, #40]	; 0x28
   2e12c:	e742      	b.n	2dfb4 <quant_coarse_energy_impl.isra.3+0x7c>
   2e12e:	ee77 7aea 	vsub.f32	s15, s15, s21
   2e132:	eef4 6ae7 	vcmpe.f32	s13, s15
   2e136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e13a:	d581      	bpl.n	2e040 <quant_coarse_energy_impl.isra.3+0x108>
   2e13c:	ee77 7ae6 	vsub.f32	s15, s15, s13
   2e140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2e144:	ee17 2a90 	vmov	r2, s15
   2e148:	4414      	add	r4, r2
   2e14a:	2c00      	cmp	r4, #0
   2e14c:	bfc8      	it	gt
   2e14e:	2400      	movgt	r4, #0
   2e150:	9409      	str	r4, [sp, #36]	; 0x24
   2e152:	e775      	b.n	2e040 <quant_coarse_energy_impl.isra.3+0x108>
   2e154:	9b05      	ldr	r3, [sp, #20]
   2e156:	9a04      	ldr	r2, [sp, #16]
   2e158:	781b      	ldrb	r3, [r3, #0]
   2e15a:	7812      	ldrb	r2, [r2, #0]
   2e15c:	019b      	lsls	r3, r3, #6
   2e15e:	01d2      	lsls	r2, r2, #7
   2e160:	a909      	add	r1, sp, #36	; 0x24
   2e162:	4648      	mov	r0, r9
   2e164:	f006 fcbc 	bl	34ae0 <ec_laplace_encode>
   2e168:	e7a8      	b.n	2e0bc <quant_coarse_energy_impl.isra.3+0x184>
   2e16a:	d004      	beq.n	2e176 <quant_coarse_energy_impl.isra.3+0x23e>
   2e16c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   2e170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e174:	e7af      	b.n	2e0d6 <quant_coarse_energy_impl.isra.3+0x19e>
   2e176:	ea01 73e1 	and.w	r3, r1, r1, asr #31
   2e17a:	4259      	negs	r1, r3
   2e17c:	4648      	mov	r0, r9
   2e17e:	9309      	str	r3, [sp, #36]	; 0x24
   2e180:	f7fe fbb8 	bl	2c8f4 <ec_enc_bit_logp>
   2e184:	e79a      	b.n	2e0bc <quant_coarse_energy_impl.isra.3+0x184>
   2e186:	f04f 0a00 	mov.w	sl, #0
   2e18a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2e18c:	2b00      	cmp	r3, #0
   2e18e:	bf0c      	ite	eq
   2e190:	4650      	moveq	r0, sl
   2e192:	2000      	movne	r0, #0
   2e194:	b00d      	add	sp, #52	; 0x34
   2e196:	ecbd 8b08 	vpop	{d8-d11}
   2e19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e19e:	eddf 9a09 	vldr	s19, [pc, #36]	; 2e1c4 <quant_coarse_energy_impl.isra.3+0x28c>
   2e1a2:	ed9f aa06 	vldr	s20, [pc, #24]	; 2e1bc <quant_coarse_energy_impl.isra.3+0x284>
   2e1a6:	e6eb      	b.n	2df80 <quant_coarse_energy_impl.isra.3+0x48>
   2e1a8:	2203      	movs	r2, #3
   2e1aa:	4621      	mov	r1, r4
   2e1ac:	4648      	mov	r0, r9
   2e1ae:	f7fe fba1 	bl	2c8f4 <ec_enc_bit_logp>
   2e1b2:	e6d8      	b.n	2df66 <quant_coarse_energy_impl.isra.3+0x2e>
   2e1b4:	00041208 	.word	0x00041208
   2e1b8:	000413cc 	.word	0x000413cc
   2e1bc:	00000000 	.word	0x00000000
   2e1c0:	000413dc 	.word	0x000413dc
   2e1c4:	3e199800 	.word	0x3e199800

0002e1c8 <quant_coarse_energy>:
   2e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1cc:	ed2d 8b04 	vpush	{d8-d9}
   2e1d0:	b0ad      	sub	sp, #180	; 0xb4
   2e1d2:	af0a      	add	r7, sp, #40	; 0x28
   2e1d4:	460c      	mov	r4, r1
   2e1d6:	4615      	mov	r5, r2
   2e1d8:	4699      	mov	r9, r3
   2e1da:	f8d7 80d0 	ldr.w	r8, [r7, #208]	; 0xd0
   2e1de:	617a      	str	r2, [r7, #20]
   2e1e0:	6278      	str	r0, [r7, #36]	; 0x24
   2e1e2:	f7f8 fca3 	bl	26b2c <save_stack>
   2e1e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   2e1ea:	eba5 0b04 	sub.w	fp, r5, r4
   2e1ee:	2b00      	cmp	r3, #0
   2e1f0:	f000 80fe 	beq.w	2e3f0 <quant_coarse_energy+0x228>
   2e1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   2e1f8:	ed93 9a00 	vldr	s18, [r3]
   2e1fc:	2301      	movs	r3, #1
   2e1fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   2e202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2e208:	f8d2 e008 	ldr.w	lr, [r2, #8]
   2e20c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   2e210:	ed9f 8aa8 	vldr	s16, [pc, #672]	; 2e4b4 <quant_coarse_energy+0x2ec>
   2e214:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
   2e218:	ea4f 0089 	mov.w	r0, r9, lsl #2
   2e21c:	1a1b      	subs	r3, r3, r0
   2e21e:	1a9b      	subs	r3, r3, r2
   2e220:	eba4 0c09 	sub.w	ip, r4, r9
   2e224:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2e228:	4410      	add	r0, r2
   2e22a:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
   2e22e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   2e232:	2600      	movs	r6, #0
   2e234:	454c      	cmp	r4, r9
   2e236:	da0e      	bge.n	2e256 <quant_coarse_energy+0x8e>
   2e238:	eb0c 0200 	add.w	r2, ip, r0
   2e23c:	18c1      	adds	r1, r0, r3
   2e23e:	ecf2 7a01 	vldmia	r2!, {s15}
   2e242:	ecb1 7a01 	vldmia	r1!, {s14}
   2e246:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2e24a:	4290      	cmp	r0, r2
   2e24c:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2e250:	ee38 8a27 	vadd.f32	s16, s16, s15
   2e254:	d1f3      	bne.n	2e23e <quant_coarse_energy+0x76>
   2e256:	3601      	adds	r6, #1
   2e258:	42b5      	cmp	r5, r6
   2e25a:	4450      	add	r0, sl
   2e25c:	dcea      	bgt.n	2e234 <quant_coarse_energy+0x6c>
   2e25e:	f8d8 301c 	ldr.w	r3, [r8, #28]
   2e262:	f8d8 2014 	ldr.w	r2, [r8, #20]
   2e266:	eddf 7a94 	vldr	s15, [pc, #592]	; 2e4b8 <quant_coarse_energy+0x2f0>
   2e26a:	f8c7 50d4 	str.w	r5, [r7, #212]	; 0xd4
   2e26e:	fab3 fa83 	clz	sl, r3
   2e272:	f1ca 0a20 	rsb	sl, sl, #32
   2e276:	eba2 0a0a 	sub.w	sl, r2, sl
   2e27a:	eeb4 8a67 	vcmp.f32	s16, s15
   2e27e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2e282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e286:	f10a 0303 	add.w	r3, sl, #3
   2e28a:	bfc8      	it	gt
   2e28c:	eeb0 8a67 	vmovgt.f32	s16, s15
   2e290:	4293      	cmp	r3, r2
   2e292:	d904      	bls.n	2e29e <quant_coarse_energy+0xd6>
   2e294:	2300      	movs	r3, #0
   2e296:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   2e29a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
   2e29e:	f1bb 0f0a 	cmp.w	fp, #10
   2e2a2:	f300 8097 	bgt.w	2e3d4 <quant_coarse_energy+0x20c>
   2e2a6:	eef3 8a00 	vmov.f32	s17, #48	; 0x41800000  16.0
   2e2aa:	46c4      	mov	ip, r8
   2e2ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2e2b0:	f107 0628 	add.w	r6, r7, #40	; 0x28
   2e2b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2e2b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2e2ba:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
   2e2be:	fb05 fe0e 	mul.w	lr, r5, lr
   2e2c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
   2e2c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2e2c8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2e2cc:	f10e 0c07 	add.w	ip, lr, #7
   2e2d0:	f02c 0c07 	bic.w	ip, ip, #7
   2e2d4:	ebad 0d0c 	sub.w	sp, sp, ip
   2e2d8:	f8d7 50f0 	ldr.w	r5, [r7, #240]	; 0xf0
   2e2dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   2e2e0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2e2e4:	2d00      	cmp	r5, #0
   2e2e6:	f8d8 3018 	ldr.w	r3, [r8, #24]
   2e2ea:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   2e2ee:	613b      	str	r3, [r7, #16]
   2e2f0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   2e2f4:	ebad 0d0c 	sub.w	sp, sp, ip
   2e2f8:	4672      	mov	r2, lr
   2e2fa:	4648      	mov	r0, r9
   2e2fc:	bf18      	it	ne
   2e2fe:	eef0 8a67 	vmovne.f32	s17, s15
   2e302:	f7dd ff2d 	bl	c160 <memcpy>
   2e306:	aa0a      	add	r2, sp, #40	; 0x28
   2e308:	623a      	str	r2, [r7, #32]
   2e30a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
   2e30e:	2354      	movs	r3, #84	; 0x54
   2e310:	fb03 f302 	mul.w	r3, r3, r2
   2e314:	61bb      	str	r3, [r7, #24]
   2e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e318:	3308      	adds	r3, #8
   2e31a:	61fb      	str	r3, [r7, #28]
   2e31c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   2e320:	2b00      	cmp	r3, #0
   2e322:	f040 80d1 	bne.w	2e4c8 <quant_coarse_energy+0x300>
   2e326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
   2e32a:	2b00      	cmp	r3, #0
   2e32c:	f040 8081 	bne.w	2e432 <quant_coarse_energy+0x26a>
   2e330:	4640      	mov	r0, r8
   2e332:	f107 0628 	add.w	r6, r7, #40	; 0x28
   2e336:	f7fe f9dd 	bl	2c6f4 <ec_tell_frac>
   2e33a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2e33c:	46c4      	mov	ip, r8
   2e33e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2e342:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2e344:	f8d7 50f0 	ldr.w	r5, [r7, #240]	; 0xf0
   2e348:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2e34c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2e350:	9509      	str	r5, [sp, #36]	; 0x24
   2e352:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
   2e356:	9508      	str	r5, [sp, #32]
   2e358:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
   2e35c:	9507      	str	r5, [sp, #28]
   2e35e:	4e57      	ldr	r6, [pc, #348]	; (2e4bc <quant_coarse_energy+0x2f4>)
   2e360:	69bd      	ldr	r5, [r7, #24]
   2e362:	442e      	add	r6, r5
   2e364:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
   2e368:	e9cd 8505 	strd	r8, r5, [sp, #20]
   2e36c:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
   2e370:	9504      	str	r5, [sp, #16]
   2e372:	f8cd a008 	str.w	sl, [sp, #8]
   2e376:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   2e37a:	4621      	mov	r1, r4
   2e37c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
   2e380:	9401      	str	r4, [sp, #4]
   2e382:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
   2e386:	9603      	str	r6, [sp, #12]
   2e388:	eeb0 0a68 	vmov.f32	s0, s17
   2e38c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2e390:	697a      	ldr	r2, [r7, #20]
   2e392:	69f8      	ldr	r0, [r7, #28]
   2e394:	9400      	str	r4, [sp, #0]
   2e396:	f7ff fdcf 	bl	2df38 <quant_coarse_energy_impl.isra.3>
   2e39a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
   2e39e:	4b48      	ldr	r3, [pc, #288]	; (2e4c0 <quant_coarse_energy+0x2f8>)
   2e3a0:	ed92 7a00 	vldr	s14, [r2]
   2e3a4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
   2e3a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2e3ac:	edd3 7a00 	vldr	s15, [r3]
   2e3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   2e3b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2e3b8:	ee67 7a87 	vmul.f32	s15, s15, s14
   2e3bc:	ee37 8a88 	vadd.f32	s16, s15, s16
   2e3c0:	ed83 8a00 	vstr	s16, [r3]
   2e3c4:	f7f8 fbc4 	bl	26b50 <restore_stack>
   2e3c8:	378c      	adds	r7, #140	; 0x8c
   2e3ca:	46bd      	mov	sp, r7
   2e3cc:	ecbd 8b04 	vpop	{d8-d9}
   2e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3d4:	edd7 8a37 	vldr	s17, [r7, #220]	; 0xdc
   2e3d8:	eefa 8aee 	vcvt.f32.s32	s17, s17, #3
   2e3dc:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
   2e3e0:	eef4 8a67 	vcmp.f32	s17, s15
   2e3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e3e8:	bfc8      	it	gt
   2e3ea:	eef0 8a67 	vmovgt.f32	s17, s15
   2e3ee:	e75c      	b.n	2e2aa <quant_coarse_energy+0xe2>
   2e3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   2e3f4:	ed93 9a00 	vldr	s18, [r3]
   2e3f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   2e3fc:	2b00      	cmp	r3, #0
   2e3fe:	f47f af00 	bne.w	2e202 <quant_coarse_energy+0x3a>
   2e402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2e406:	fb0b f303 	mul.w	r3, fp, r3
   2e40a:	005a      	lsls	r2, r3, #1
   2e40c:	ee07 2a90 	vmov	s15, r2
   2e410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2e414:	eef4 7ac9 	vcmpe.f32	s15, s18
   2e418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e41c:	f140 8110 	bpl.w	2e640 <quant_coarse_energy+0x478>
   2e420:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
   2e424:	4293      	cmp	r3, r2
   2e426:	bfac      	ite	ge
   2e428:	2300      	movge	r3, #0
   2e42a:	2301      	movlt	r3, #1
   2e42c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   2e430:	e6e7      	b.n	2e202 <quant_coarse_energy+0x3a>
   2e432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   2e436:	4e23      	ldr	r6, [pc, #140]	; (2e4c4 <quant_coarse_energy+0x2fc>)
   2e438:	9309      	str	r3, [sp, #36]	; 0x24
   2e43a:	69bb      	ldr	r3, [r7, #24]
   2e43c:	f8cd a008 	str.w	sl, [sp, #8]
   2e440:	4433      	add	r3, r6
   2e442:	461e      	mov	r6, r3
   2e444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   2e448:	9307      	str	r3, [sp, #28]
   2e44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2e44e:	697a      	ldr	r2, [r7, #20]
   2e450:	69f8      	ldr	r0, [r7, #28]
   2e452:	9603      	str	r6, [sp, #12]
   2e454:	e9cd 8305 	strd	r8, r3, [sp, #20]
   2e458:	6a3b      	ldr	r3, [r7, #32]
   2e45a:	9304      	str	r3, [sp, #16]
   2e45c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2e460:	f04f 0c01 	mov.w	ip, #1
   2e464:	e9cd 9300 	strd	r9, r3, [sp]
   2e468:	eeb0 0a68 	vmov.f32	s0, s17
   2e46c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2e470:	f8cd c020 	str.w	ip, [sp, #32]
   2e474:	4621      	mov	r1, r4
   2e476:	f7ff fd5f 	bl	2df38 <quant_coarse_energy_impl.isra.3>
   2e47a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   2e47c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
   2e480:	68a3      	ldr	r3, [r4, #8]
   2e482:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2e486:	fb03 f302 	mul.w	r3, r3, r2
   2e48a:	009a      	lsls	r2, r3, #2
   2e48c:	4649      	mov	r1, r9
   2e48e:	f7dd fe67 	bl	c160 <memcpy>
   2e492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2e496:	68a2      	ldr	r2, [r4, #8]
   2e498:	6a39      	ldr	r1, [r7, #32]
   2e49a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
   2e49e:	fb02 f203 	mul.w	r2, r2, r3
   2e4a2:	0092      	lsls	r2, r2, #2
   2e4a4:	f7dd fe5c 	bl	c160 <memcpy>
   2e4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
   2e4ac:	ed83 8a00 	vstr	s16, [r3]
   2e4b0:	e788      	b.n	2e3c4 <quant_coarse_energy+0x1fc>
   2e4b2:	bf00      	nop
   2e4b4:	00000000 	.word	0x00000000
   2e4b8:	43480000 	.word	0x43480000
   2e4bc:	0004127c 	.word	0x0004127c
   2e4c0:	000413cc 	.word	0x000413cc
   2e4c4:	000412a6 	.word	0x000412a6
   2e4c8:	4611      	mov	r1, r2
   2e4ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
   2e4ce:	9107      	str	r1, [sp, #28]
   2e4d0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
   2e4d4:	9309      	str	r3, [sp, #36]	; 0x24
   2e4d6:	69bb      	ldr	r3, [r7, #24]
   2e4d8:	4a5c      	ldr	r2, [pc, #368]	; (2e64c <quant_coarse_energy+0x484>)
   2e4da:	f8cd a008 	str.w	sl, [sp, #8]
   2e4de:	e9cd 8105 	strd	r8, r1, [sp, #20]
   2e4e2:	6a39      	ldr	r1, [r7, #32]
   2e4e4:	9104      	str	r1, [sp, #16]
   2e4e6:	332a      	adds	r3, #42	; 0x2a
   2e4e8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
   2e4ec:	69f8      	ldr	r0, [r7, #28]
   2e4ee:	4413      	add	r3, r2
   2e4f0:	2201      	movs	r2, #1
   2e4f2:	e9cd 9100 	strd	r9, r1, [sp]
   2e4f6:	9303      	str	r3, [sp, #12]
   2e4f8:	9208      	str	r2, [sp, #32]
   2e4fa:	4621      	mov	r1, r4
   2e4fc:	eeb0 0a68 	vmov.f32	s0, s17
   2e500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2e504:	697a      	ldr	r2, [r7, #20]
   2e506:	f7ff fd17 	bl	2df38 <quant_coarse_energy_impl.isra.3>
   2e50a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
   2e50e:	60b8      	str	r0, [r7, #8]
   2e510:	2900      	cmp	r1, #0
   2e512:	d1b2      	bne.n	2e47a <quant_coarse_energy+0x2b2>
   2e514:	4640      	mov	r0, r8
   2e516:	f7fe f8ed 	bl	2c6f4 <ec_tell_frac>
   2e51a:	46c3      	mov	fp, r8
   2e51c:	6078      	str	r0, [r7, #4]
   2e51e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   2e522:	f107 0c58 	add.w	ip, r7, #88	; 0x58
   2e526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2e52a:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
   2e52e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2e532:	693b      	ldr	r3, [r7, #16]
   2e534:	f8d8 1018 	ldr.w	r1, [r8, #24]
   2e538:	f8d8 6000 	ldr.w	r6, [r8]
   2e53c:	1acd      	subs	r5, r1, r3
   2e53e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
   2e542:	f105 0e07 	add.w	lr, r5, #7
   2e546:	f02e 0e07 	bic.w	lr, lr, #7
   2e54a:	603d      	str	r5, [r7, #0]
   2e54c:	60fd      	str	r5, [r7, #12]
   2e54e:	693d      	ldr	r5, [r7, #16]
   2e550:	ebad 0d0e 	sub.w	sp, sp, lr
   2e554:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   2e558:	4435      	add	r5, r6
   2e55a:	a90a      	add	r1, sp, #40	; 0x28
   2e55c:	6139      	str	r1, [r7, #16]
   2e55e:	4608      	mov	r0, r1
   2e560:	68fa      	ldr	r2, [r7, #12]
   2e562:	4629      	mov	r1, r5
   2e564:	f7dd fdfc 	bl	c160 <memcpy>
   2e568:	f107 0c28 	add.w	ip, r7, #40	; 0x28
   2e56c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2e570:	46c6      	mov	lr, r8
   2e572:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2e576:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2e57a:	462e      	mov	r6, r5
   2e57c:	69bd      	ldr	r5, [r7, #24]
   2e57e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2e582:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2e586:	46ac      	mov	ip, r5
   2e588:	4d30      	ldr	r5, [pc, #192]	; (2e64c <quant_coarse_energy+0x484>)
   2e58a:	44ac      	add	ip, r5
   2e58c:	f8d7 50f0 	ldr.w	r5, [r7, #240]	; 0xf0
   2e590:	9509      	str	r5, [sp, #36]	; 0x24
   2e592:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
   2e596:	9508      	str	r5, [sp, #32]
   2e598:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
   2e59c:	9507      	str	r5, [sp, #28]
   2e59e:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
   2e5a2:	e9cd 8505 	strd	r8, r5, [sp, #20]
   2e5a6:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
   2e5aa:	9504      	str	r5, [sp, #16]
   2e5ac:	e9cd ac02 	strd	sl, ip, [sp, #8]
   2e5b0:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   2e5b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2e5b8:	9301      	str	r3, [sp, #4]
   2e5ba:	e9d7 3130 	ldrd	r3, r1, [r7, #192]	; 0xc0
   2e5be:	eeb0 0a68 	vmov.f32	s0, s17
   2e5c2:	9100      	str	r1, [sp, #0]
   2e5c4:	697a      	ldr	r2, [r7, #20]
   2e5c6:	69f8      	ldr	r0, [r7, #28]
   2e5c8:	4621      	mov	r1, r4
   2e5ca:	f7ff fcb5 	bl	2df38 <quant_coarse_energy_impl.isra.3>
   2e5ce:	68bb      	ldr	r3, [r7, #8]
   2e5d0:	4283      	cmp	r3, r0
   2e5d2:	db23      	blt.n	2e61c <quant_coarse_energy+0x454>
   2e5d4:	f47f aee1 	bne.w	2e39a <quant_coarse_energy+0x1d2>
   2e5d8:	4640      	mov	r0, r8
   2e5da:	f7fe f88b 	bl	2c6f4 <ec_tell_frac>
   2e5de:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
   2e5e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   2e5e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
   2e5ea:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
   2e5ee:	025b      	lsls	r3, r3, #9
   2e5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2e5f4:	ee06 3a90 	vmov	s13, r3
   2e5f8:	ee27 7a09 	vmul.f32	s14, s14, s18
   2e5fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   2e600:	ee27 7a27 	vmul.f32	s14, s14, s15
   2e604:	eec7 7a26 	vdiv.f32	s15, s14, s13
   2e608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2e60c:	ee17 3a90 	vmov	r3, s15
   2e610:	4403      	add	r3, r0
   2e612:	4618      	mov	r0, r3
   2e614:	687b      	ldr	r3, [r7, #4]
   2e616:	4298      	cmp	r0, r3
   2e618:	f77f aebf 	ble.w	2e39a <quant_coarse_energy+0x1d2>
   2e61c:	f107 0458 	add.w	r4, r7, #88	; 0x58
   2e620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2e622:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   2e626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2e628:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   2e62c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2e630:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
   2e634:	683a      	ldr	r2, [r7, #0]
   2e636:	6939      	ldr	r1, [r7, #16]
   2e638:	4630      	mov	r0, r6
   2e63a:	f7dd fd91 	bl	c160 <memcpy>
   2e63e:	e71c      	b.n	2e47a <quant_coarse_energy+0x2b2>
   2e640:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
   2e644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
   2e648:	e5db      	b.n	2e202 <quant_coarse_energy+0x3a>
   2e64a:	bf00      	nop
   2e64c:	0004127c 	.word	0x0004127c

0002e650 <quant_fine_energy>:
   2e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e654:	ed2d 8b06 	vpush	{d8-d10}
   2e658:	4291      	cmp	r1, r2
   2e65a:	b083      	sub	sp, #12
   2e65c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
   2e660:	da74      	bge.n	2e74c <quant_fine_energy+0xfc>
   2e662:	4699      	mov	r9, r3
   2e664:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   2e668:	3b01      	subs	r3, #1
   2e66a:	460c      	mov	r4, r1
   2e66c:	1f39      	subs	r1, r7, #4
   2e66e:	ed9f 9a3a 	vldr	s18, [pc, #232]	; 2e758 <quant_fine_energy+0x108>
   2e672:	eb07 0783 	add.w	r7, r7, r3, lsl #2
   2e676:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   2e67a:	4680      	mov	r8, r0
   2e67c:	9301      	str	r3, [sp, #4]
   2e67e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
   2e682:	f857 2f04 	ldr.w	r2, [r7, #4]!
   2e686:	2a00      	cmp	r2, #0
   2e688:	dd5b      	ble.n	2e742 <quant_fine_energy+0xf2>
   2e68a:	f04f 0a01 	mov.w	sl, #1
   2e68e:	fa0a fa02 	lsl.w	sl, sl, r2
   2e692:	fa0f fa8a 	sxth.w	sl, sl
   2e696:	ee07 aa90 	vmov	s15, sl
   2e69a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2e69e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   2e6a2:	2500      	movs	r5, #0
   2e6a4:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
   2e6a8:	fb00 4005 	mla	r0, r0, r5, r4
   2e6ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   2e6b0:	edd0 7a00 	vldr	s15, [r0]
   2e6b4:	9814      	ldr	r0, [sp, #80]	; 0x50
   2e6b6:	ee77 7a8a 	vadd.f32	s15, s15, s20
   2e6ba:	ee67 7aa8 	vmul.f32	s15, s15, s17
   2e6be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2e6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e6c6:	bf48      	it	mi
   2e6c8:	ee77 7ae9 	vsubmi.f32	s15, s15, s19
   2e6cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2e6d0:	ee17 1a90 	vmov	r1, s15
   2e6d4:	4551      	cmp	r1, sl
   2e6d6:	bfa8      	it	ge
   2e6d8:	f10a 31ff 	addge.w	r1, sl, #4294967295	; 0xffffffff
   2e6dc:	ea21 7be1 	bic.w	fp, r1, r1, asr #31
   2e6e0:	4659      	mov	r1, fp
   2e6e2:	f7fe fa1f 	bl	2cb24 <ec_enc_bits>
   2e6e6:	683a      	ldr	r2, [r7, #0]
   2e6e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2e6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2e6ee:	f1c2 0c0e 	rsb	ip, r2, #14
   2e6f2:	ee07 ba90 	vmov	s15, fp
   2e6f6:	2101      	movs	r1, #1
   2e6f8:	fa01 f10c 	lsl.w	r1, r1, ip
   2e6fc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2e700:	ee07 1a90 	vmov	s15, r1
   2e704:	ee38 8a0a 	vadd.f32	s16, s16, s20
   2e708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2e70c:	fb05 4100 	mla	r1, r5, r0, r4
   2e710:	ee27 8a88 	vmul.f32	s16, s15, s16
   2e714:	0089      	lsls	r1, r1, #2
   2e716:	ee28 8a09 	vmul.f32	s16, s16, s18
   2e71a:	eb09 0c01 	add.w	ip, r9, r1
   2e71e:	eddc 7a00 	vldr	s15, [ip]
   2e722:	ee38 8a4a 	vsub.f32	s16, s16, s20
   2e726:	4431      	add	r1, r6
   2e728:	ee77 7a88 	vadd.f32	s15, s15, s16
   2e72c:	3501      	adds	r5, #1
   2e72e:	edcc 7a00 	vstr	s15, [ip]
   2e732:	edd1 7a00 	vldr	s15, [r1]
   2e736:	ee37 8ac8 	vsub.f32	s16, s15, s16
   2e73a:	429d      	cmp	r5, r3
   2e73c:	ed81 8a00 	vstr	s16, [r1]
   2e740:	dbb2      	blt.n	2e6a8 <quant_fine_energy+0x58>
   2e742:	9b01      	ldr	r3, [sp, #4]
   2e744:	429f      	cmp	r7, r3
   2e746:	f104 0401 	add.w	r4, r4, #1
   2e74a:	d19a      	bne.n	2e682 <quant_fine_energy+0x32>
   2e74c:	b003      	add	sp, #12
   2e74e:	ecbd 8b06 	vpop	{d8-d10}
   2e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e756:	bf00      	nop
   2e758:	38800000 	.word	0x38800000

0002e75c <quant_energy_finalise>:
   2e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e760:	ed2d 8b04 	vpush	{d8-d9}
   2e764:	b087      	sub	sp, #28
   2e766:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
   2e76a:	9104      	str	r1, [sp, #16]
   2e76c:	e9dd 7114 	ldrd	r7, r1, [sp, #80]	; 0x50
   2e770:	3c01      	subs	r4, #1
   2e772:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2e774:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   2e778:	ed9f 9a3f 	vldr	s18, [pc, #252]	; 2e878 <quant_energy_finalise+0x11c>
   2e77c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2e780:	eb01 0384 	add.w	r3, r1, r4, lsl #2
   2e784:	9305      	str	r3, [sp, #20]
   2e786:	2300      	movs	r3, #0
   2e788:	4681      	mov	r9, r0
   2e78a:	9303      	str	r3, [sp, #12]
   2e78c:	4630      	mov	r0, r6
   2e78e:	463e      	mov	r6, r7
   2e790:	9b04      	ldr	r3, [sp, #16]
   2e792:	9a02      	ldr	r2, [sp, #8]
   2e794:	4293      	cmp	r3, r2
   2e796:	da64      	bge.n	2e862 <quant_energy_finalise+0x106>
   2e798:	4580      	cmp	r8, r0
   2e79a:	dc62      	bgt.n	2e862 <quant_energy_finalise+0x106>
   2e79c:	461d      	mov	r5, r3
   2e79e:	f8dd b014 	ldr.w	fp, [sp, #20]
   2e7a2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
   2e7a6:	e005      	b.n	2e7b4 <quant_energy_finalise+0x58>
   2e7a8:	9b02      	ldr	r3, [sp, #8]
   2e7aa:	3501      	adds	r5, #1
   2e7ac:	42ab      	cmp	r3, r5
   2e7ae:	d058      	beq.n	2e862 <quant_energy_finalise+0x106>
   2e7b0:	4540      	cmp	r0, r8
   2e7b2:	db56      	blt.n	2e862 <quant_energy_finalise+0x106>
   2e7b4:	f85b 2f04 	ldr.w	r2, [fp, #4]!
   2e7b8:	2a07      	cmp	r2, #7
   2e7ba:	dcf5      	bgt.n	2e7a8 <quant_energy_finalise+0x4c>
   2e7bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2e7be:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
   2e7c2:	9b03      	ldr	r3, [sp, #12]
   2e7c4:	429a      	cmp	r2, r3
   2e7c6:	d1ef      	bne.n	2e7a8 <quant_energy_finalise+0x4c>
   2e7c8:	1e47      	subs	r7, r0, #1
   2e7ca:	463b      	mov	r3, r7
   2e7cc:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2e7d0:	465f      	mov	r7, fp
   2e7d2:	2400      	movs	r4, #0
   2e7d4:	469b      	mov	fp, r3
   2e7d6:	fb01 5104 	mla	r1, r1, r4, r5
   2e7da:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   2e7de:	edd1 7a00 	vldr	s15, [r1]
   2e7e2:	9818      	ldr	r0, [sp, #96]	; 0x60
   2e7e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2e7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e7ec:	bf54      	ite	pl
   2e7ee:	f04f 0a01 	movpl.w	sl, #1
   2e7f2:	f04f 0a00 	movmi.w	sl, #0
   2e7f6:	4651      	mov	r1, sl
   2e7f8:	2201      	movs	r2, #1
   2e7fa:	f7fe f993 	bl	2cb24 <ec_enc_bits>
   2e7fe:	683a      	ldr	r2, [r7, #0]
   2e800:	f8d9 1008 	ldr.w	r1, [r9, #8]
   2e804:	ee07 aa90 	vmov	s15, sl
   2e808:	2301      	movs	r3, #1
   2e80a:	f1c2 020d 	rsb	r2, r2, #13
   2e80e:	fa03 f202 	lsl.w	r2, r3, r2
   2e812:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   2e816:	ee07 2a90 	vmov	s15, r2
   2e81a:	ee38 8a68 	vsub.f32	s16, s16, s17
   2e81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2e822:	fb04 5201 	mla	r2, r4, r1, r5
   2e826:	9b01      	ldr	r3, [sp, #4]
   2e828:	0092      	lsls	r2, r2, #2
   2e82a:	ee67 7a88 	vmul.f32	s15, s15, s16
   2e82e:	1898      	adds	r0, r3, r2
   2e830:	ed90 7a00 	vldr	s14, [r0]
   2e834:	ee67 7a89 	vmul.f32	s15, s15, s18
   2e838:	4432      	add	r2, r6
   2e83a:	ee37 7a27 	vadd.f32	s14, s14, s15
   2e83e:	ed80 7a00 	vstr	s14, [r0]
   2e842:	ed92 7a00 	vldr	s14, [r2]
   2e846:	ebab 0004 	sub.w	r0, fp, r4
   2e84a:	ee77 7a67 	vsub.f32	s15, s14, s15
   2e84e:	3401      	adds	r4, #1
   2e850:	45a0      	cmp	r8, r4
   2e852:	edc2 7a00 	vstr	s15, [r2]
   2e856:	dcbe      	bgt.n	2e7d6 <quant_energy_finalise+0x7a>
   2e858:	9b02      	ldr	r3, [sp, #8]
   2e85a:	3501      	adds	r5, #1
   2e85c:	42ab      	cmp	r3, r5
   2e85e:	46bb      	mov	fp, r7
   2e860:	d1a6      	bne.n	2e7b0 <quant_energy_finalise+0x54>
   2e862:	9b03      	ldr	r3, [sp, #12]
   2e864:	b913      	cbnz	r3, 2e86c <quant_energy_finalise+0x110>
   2e866:	2301      	movs	r3, #1
   2e868:	9303      	str	r3, [sp, #12]
   2e86a:	e791      	b.n	2e790 <quant_energy_finalise+0x34>
   2e86c:	b007      	add	sp, #28
   2e86e:	ecbd 8b04 	vpop	{d8-d9}
   2e872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e876:	bf00      	nop
   2e878:	38800000 	.word	0x38800000

0002e87c <amp2Log2>:
   2e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e880:	e9dd e809 	ldrd	lr, r8, [sp, #36]	; 0x24
   2e884:	ed9f 3a2c 	vldr	s6, [pc, #176]	; 2e938 <amp2Log2+0xbc>
   2e888:	eddf 3a2c 	vldr	s7, [pc, #176]	; 2e93c <amp2Log2+0xc0>
   2e88c:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 2e940 <amp2Log2+0xc4>
   2e890:	eddf 4a2c 	vldr	s9, [pc, #176]	; 2e944 <amp2Log2+0xc8>
   2e894:	4699      	mov	r9, r3
   2e896:	f04f 0c00 	mov.w	ip, #0
   2e89a:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
   2e89e:	eefa 5a0c 	vmov.f32	s11, #172	; 0xc1600000 -14.0
   2e8a2:	2900      	cmp	r1, #0
   2e8a4:	dd32      	ble.n	2e90c <amp2Log2+0x90>
   2e8a6:	6883      	ldr	r3, [r0, #8]
   2e8a8:	4e27      	ldr	r6, [pc, #156]	; (2e948 <amp2Log2+0xcc>)
   2e8aa:	fb03 f30c 	mul.w	r3, r3, ip
   2e8ae:	009d      	lsls	r5, r3, #2
   2e8b0:	440b      	add	r3, r1
   2e8b2:	eb09 0405 	add.w	r4, r9, r5
   2e8b6:	eb09 0783 	add.w	r7, r9, r3, lsl #2
   2e8ba:	4475      	add	r5, lr
   2e8bc:	f854 3b04 	ldr.w	r3, [r4], #4
   2e8c0:	ecb6 6a01 	vldmia	r6!, {s12}
   2e8c4:	ea4f 5ad3 	mov.w	sl, r3, lsr #23
   2e8c8:	f1aa 0b7f 	sub.w	fp, sl, #127	; 0x7f
   2e8cc:	eba3 53cb 	sub.w	r3, r3, fp, lsl #23
   2e8d0:	ee07 3a90 	vmov	s15, r3
   2e8d4:	ee77 6ac5 	vsub.f32	s13, s15, s10
   2e8d8:	f1aa 0a7e 	sub.w	sl, sl, #126	; 0x7e
   2e8dc:	ee66 7a83 	vmul.f32	s15, s13, s6
   2e8e0:	ee07 aa10 	vmov	s14, sl
   2e8e4:	ee77 7ae3 	vsub.f32	s15, s15, s7
   2e8e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   2e8ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2e8f0:	42a7      	cmp	r7, r4
   2e8f2:	ee77 7a84 	vadd.f32	s15, s15, s8
   2e8f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   2e8fa:	ee77 7ae4 	vsub.f32	s15, s15, s9
   2e8fe:	ee77 7a27 	vadd.f32	s15, s14, s15
   2e902:	ee77 7ac6 	vsub.f32	s15, s15, s12
   2e906:	ece5 7a01 	vstmia	r5!, {s15}
   2e90a:	d1d7      	bne.n	2e8bc <amp2Log2+0x40>
   2e90c:	4291      	cmp	r1, r2
   2e90e:	da0c      	bge.n	2e92a <amp2Log2+0xae>
   2e910:	6884      	ldr	r4, [r0, #8]
   2e912:	fb04 f40c 	mul.w	r4, r4, ip
   2e916:	1863      	adds	r3, r4, r1
   2e918:	4414      	add	r4, r2
   2e91a:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
   2e91e:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   2e922:	ece3 5a01 	vstmia	r3!, {s11}
   2e926:	42a3      	cmp	r3, r4
   2e928:	d1fb      	bne.n	2e922 <amp2Log2+0xa6>
   2e92a:	f10c 0c01 	add.w	ip, ip, #1
   2e92e:	45c4      	cmp	ip, r8
   2e930:	dbb7      	blt.n	2e8a2 <amp2Log2+0x26>
   2e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e936:	bf00      	nop
   2e938:	3e29617e 	.word	0x3e29617e
   2e93c:	3eadd4a3 	.word	0x3eadd4a3
   2e940:	3f758713 	.word	0x3f758713
   2e944:	3ed43357 	.word	0x3ed43357
   2e948:	00041218 	.word	0x00041218

0002e94c <clt_compute_allocation>:
   2e94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e950:	b09d      	sub	sp, #116	; 0x74
   2e952:	af00      	add	r7, sp, #0
   2e954:	4606      	mov	r6, r0
   2e956:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
   2e95a:	613b      	str	r3, [r7, #16]
   2e95c:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   2e960:	65b8      	str	r0, [r7, #88]	; 0x58
   2e962:	6579      	str	r1, [r7, #84]	; 0x54
   2e964:	65fa      	str	r2, [r7, #92]	; 0x5c
   2e966:	663d      	str	r5, [r7, #96]	; 0x60
   2e968:	f7f8 f8e0 	bl	26b2c <save_stack>
   2e96c:	68b3      	ldr	r3, [r6, #8]
   2e96e:	633b      	str	r3, [r7, #48]	; 0x30
   2e970:	2c07      	cmp	r4, #7
   2e972:	bfc5      	ittet	gt
   2e974:	f1a5 0308 	subgt.w	r3, r5, #8
   2e978:	663b      	strgt	r3, [r7, #96]	; 0x60
   2e97a:	2300      	movle	r3, #0
   2e97c:	2308      	movgt	r3, #8
   2e97e:	607b      	str	r3, [r7, #4]
   2e980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2e984:	2b02      	cmp	r3, #2
   2e986:	f000 8220 	beq.w	2edca <clt_compute_allocation+0x47e>
   2e98a:	2300      	movs	r3, #0
   2e98c:	60fb      	str	r3, [r7, #12]
   2e98e:	653b      	str	r3, [r7, #80]	; 0x50
   2e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e992:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2e994:	009b      	lsls	r3, r3, #2
   2e996:	3307      	adds	r3, #7
   2e998:	f023 0307 	bic.w	r3, r3, #7
   2e99c:	ebad 0d03 	sub.w	sp, sp, r3
   2e9a0:	f8c7 d018 	str.w	sp, [r7, #24]
   2e9a4:	ebad 0d03 	sub.w	sp, sp, r3
   2e9a8:	f8c7 d014 	str.w	sp, [r7, #20]
   2e9ac:	ebad 0d03 	sub.w	sp, sp, r3
   2e9b0:	46eb      	mov	fp, sp
   2e9b2:	ebad 0d03 	sub.w	sp, sp, r3
   2e9b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2e9ba:	f8c7 d034 	str.w	sp, [r7, #52]	; 0x34
   2e9be:	00db      	lsls	r3, r3, #3
   2e9c0:	667b      	str	r3, [r7, #100]	; 0x64
   2e9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2e9c4:	4293      	cmp	r3, r2
   2e9c6:	f280 85d0 	bge.w	2f56a <clt_compute_allocation+0xc1e>
   2e9ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2e9cc:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
   2e9d0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   2e9d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2e9d6:	4614      	mov	r4, r2
   2e9d8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   2e9dc:	1e60      	subs	r0, r4, #1
   2e9de:	f1a2 0e05 	sub.w	lr, r2, #5
   2e9e2:	1c5a      	adds	r2, r3, #1
   2e9e4:	0059      	lsls	r1, r3, #1
   2e9e6:	4282      	cmp	r2, r0
   2e9e8:	64f9      	str	r1, [r7, #76]	; 0x4c
   2e9ea:	6238      	str	r0, [r7, #32]
   2e9ec:	4451      	add	r1, sl
   2e9ee:	ebae 0e05 	sub.w	lr, lr, r5
   2e9f2:	f105 0c03 	add.w	ip, r5, #3
   2e9f6:	4618      	mov	r0, r3
   2e9f8:	da60      	bge.n	2eabc <clt_compute_allocation+0x170>
   2e9fa:	1ae3      	subs	r3, r4, r3
   2e9fc:	f93a 5010 	ldrsh.w	r5, [sl, r0, lsl #1]
   2ea00:	f8c7 a06c 	str.w	sl, [r7, #108]	; 0x6c
   2ea04:	f8d7 a0c0 	ldr.w	sl, [r7, #192]	; 0xc0
   2ea08:	4616      	mov	r6, r2
   2ea0a:	4689      	mov	r9, r1
   2ea0c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2ea10:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
   2ea14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ea18:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   2ea1a:	1b55      	subs	r5, r2, r5
   2ea1c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   2ea20:	fb05 f303 	mul.w	r3, r5, r3
   2ea24:	fa01 f10a 	lsl.w	r1, r1, sl
   2ea28:	f341 015b 	sbfx	r1, r1, #1, #28
   2ea2c:	fb0e f303 	mul.w	r3, lr, r3
   2ea30:	42a1      	cmp	r1, r4
   2ea32:	fb08 f303 	mul.w	r3, r8, r3
   2ea36:	fa05 f50a 	lsl.w	r5, r5, sl
   2ea3a:	bfb8      	it	lt
   2ea3c:	4621      	movlt	r1, r4
   2ea3e:	fa03 f30c 	lsl.w	r3, r3, ip
   2ea42:	2d01      	cmp	r5, #1
   2ea44:	f84b 1020 	str.w	r1, [fp, r0, lsl #2]
   2ea48:	ea4f 13a3 	mov.w	r3, r3, asr #6
   2ea4c:	bf04      	itt	eq
   2ea4e:	4621      	moveq	r1, r4
   2ea50:	1a5b      	subeq	r3, r3, r1
   2ea52:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2ea54:	f9b9 5004 	ldrsh.w	r5, [r9, #4]
   2ea58:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   2ea5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ea60:	1aaa      	subs	r2, r5, r2
   2ea62:	fb02 f403 	mul.w	r4, r2, r3
   2ea66:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   2ea6a:	fb0e f404 	mul.w	r4, lr, r4
   2ea6e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2ea72:	fb03 f304 	mul.w	r3, r3, r4
   2ea76:	fa01 f10a 	lsl.w	r1, r1, sl
   2ea7a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   2ea7c:	f341 015b 	sbfx	r1, r1, #1, #28
   2ea80:	fa02 f20a 	lsl.w	r2, r2, sl
   2ea84:	42a1      	cmp	r1, r4
   2ea86:	bfb8      	it	lt
   2ea88:	4621      	movlt	r1, r4
   2ea8a:	fa03 f30c 	lsl.w	r3, r3, ip
   2ea8e:	2a01      	cmp	r2, #1
   2ea90:	ea4f 13a3 	mov.w	r3, r3, asr #6
   2ea94:	bf04      	itt	eq
   2ea96:	4622      	moveq	r2, r4
   2ea98:	1a9b      	subeq	r3, r3, r2
   2ea9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2ea9c:	f84b 1026 	str.w	r1, [fp, r6, lsl #2]
   2eaa0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
   2eaa4:	6a3b      	ldr	r3, [r7, #32]
   2eaa6:	3602      	adds	r6, #2
   2eaa8:	42b3      	cmp	r3, r6
   2eaaa:	f100 0002 	add.w	r0, r0, #2
   2eaae:	f109 0904 	add.w	r9, r9, #4
   2eab2:	f1a8 0802 	sub.w	r8, r8, #2
   2eab6:	dcab      	bgt.n	2ea10 <clt_compute_allocation+0xc4>
   2eab8:	f8d7 a06c 	ldr.w	sl, [r7, #108]	; 0x6c
   2eabc:	f8c7 b06c 	str.w	fp, [r7, #108]	; 0x6c
   2eac0:	f100 4680 	add.w	r6, r0, #1073741824	; 0x40000000
   2eac4:	3e01      	subs	r6, #1
   2eac6:	eb0a 0540 	add.w	r5, sl, r0, lsl #1
   2eaca:	e9d7 a82f 	ldrd	sl, r8, [r7, #188]	; 0xbc
   2eace:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
   2ead2:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
   2ead6:	f8d7 b020 	ldr.w	fp, [r7, #32]
   2eada:	f9b5 1000 	ldrsh.w	r1, [r5]
   2eade:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   2eae2:	1a52      	subs	r2, r2, r1
   2eae4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   2eae8:	fb02 f40a 	mul.w	r4, r2, sl
   2eaec:	ebab 0300 	sub.w	r3, fp, r0
   2eaf0:	fa01 f108 	lsl.w	r1, r1, r8
   2eaf4:	fb0e f404 	mul.w	r4, lr, r4
   2eaf8:	f341 015b 	sbfx	r1, r1, #1, #28
   2eafc:	fb03 f304 	mul.w	r3, r3, r4
   2eb00:	4549      	cmp	r1, r9
   2eb02:	fa02 f208 	lsl.w	r2, r2, r8
   2eb06:	fa03 f30c 	lsl.w	r3, r3, ip
   2eb0a:	ea4f 13a3 	mov.w	r3, r3, asr #6
   2eb0e:	bfb8      	it	lt
   2eb10:	4649      	movlt	r1, r9
   2eb12:	2a01      	cmp	r2, #1
   2eb14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2eb16:	f846 1f04 	str.w	r1, [r6, #4]!
   2eb1a:	bf08      	it	eq
   2eb1c:	eba3 0309 	subeq.w	r3, r3, r9
   2eb20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   2eb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2eb26:	3001      	adds	r0, #1
   2eb28:	4283      	cmp	r3, r0
   2eb2a:	f105 0502 	add.w	r5, r5, #2
   2eb2e:	dcd4      	bgt.n	2eada <clt_compute_allocation+0x18e>
   2eb30:	f8d7 b06c 	ldr.w	fp, [r7, #108]	; 0x6c
   2eb34:	4618      	mov	r0, r3
   2eb36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2eb38:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
   2eb3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2eb3e:	62f9      	str	r1, [r7, #44]	; 0x2c
   2eb40:	6a3b      	ldr	r3, [r7, #32]
   2eb42:	60b8      	str	r0, [r7, #8]
   2eb44:	3901      	subs	r1, #1
   2eb46:	6439      	str	r1, [r7, #64]	; 0x40
   2eb48:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
   2eb4c:	009b      	lsls	r3, r3, #2
   2eb4e:	4419      	add	r1, r3
   2eb50:	63b9      	str	r1, [r7, #56]	; 0x38
   2eb52:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2eb54:	0082      	lsls	r2, r0, #2
   2eb56:	18cb      	adds	r3, r1, r3
   2eb58:	627b      	str	r3, [r7, #36]	; 0x24
   2eb5a:	eb0b 0302 	add.w	r3, fp, r2
   2eb5e:	66bb      	str	r3, [r7, #104]	; 0x68
   2eb60:	693b      	ldr	r3, [r7, #16]
   2eb62:	61fa      	str	r2, [r7, #28]
   2eb64:	4413      	add	r3, r2
   2eb66:	62bb      	str	r3, [r7, #40]	; 0x28
   2eb68:	0043      	lsls	r3, r0, #1
   2eb6a:	64bb      	str	r3, [r7, #72]	; 0x48
   2eb6c:	2301      	movs	r3, #1
   2eb6e:	647b      	str	r3, [r7, #68]	; 0x44
   2eb70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   2eb74:	4413      	add	r3, r2
   2eb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2eb78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2eb7a:	105b      	asrs	r3, r3, #1
   2eb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2eb7e:	fb02 f203 	mul.w	r2, r2, r3
   2eb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2eb84:	4618      	mov	r0, r3
   2eb86:	4288      	cmp	r0, r1
   2eb88:	f280 8145 	bge.w	2ee16 <clt_compute_allocation+0x4ca>
   2eb8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2eb8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2eb90:	6b5d      	ldr	r5, [r3, #52]	; 0x34
   2eb92:	6a1b      	ldr	r3, [r3, #32]
   2eb94:	f8d7 c068 	ldr.w	ip, [r7, #104]	; 0x68
   2eb98:	6abe      	ldr	r6, [r7, #40]	; 0x28
   2eb9a:	440a      	add	r2, r1
   2eb9c:	4415      	add	r5, r2
   2eb9e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   2eba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2eba2:	66fd      	str	r5, [r7, #108]	; 0x6c
   2eba4:	f04f 0e00 	mov.w	lr, #0
   2eba8:	eb03 0801 	add.w	r8, r3, r1
   2ebac:	189a      	adds	r2, r3, r2
   2ebae:	46f2      	mov	sl, lr
   2ebb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   2ebb2:	e00c      	b.n	2ebce <clt_compute_allocation+0x282>
   2ebb4:	f1ba 0f00 	cmp.w	sl, #0
   2ebb8:	d129      	bne.n	2ec0e <clt_compute_allocation+0x2c2>
   2ebba:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   2ebbc:	42a3      	cmp	r3, r4
   2ebbe:	bfa8      	it	ge
   2ebc0:	44a6      	addge	lr, r4
   2ebc2:	4542      	cmp	r2, r8
   2ebc4:	f1a1 0104 	sub.w	r1, r1, #4
   2ebc8:	f1a0 0004 	sub.w	r0, r0, #4
   2ebcc:	d02c      	beq.n	2ec28 <clt_compute_allocation+0x2dc>
   2ebce:	6efd      	ldr	r5, [r7, #108]	; 0x6c
   2ebd0:	f9b2 4000 	ldrsh.w	r4, [r2]
   2ebd4:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   2ebd8:	f932 bd02 	ldrsh.w	fp, [r2, #-2]!
   2ebdc:	66fd      	str	r5, [r7, #108]	; 0x6c
   2ebde:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
   2ebe2:	eba4 040b 	sub.w	r4, r4, fp
   2ebe6:	fb05 f404 	mul.w	r4, r5, r4
   2ebea:	fb03 f304 	mul.w	r3, r3, r4
   2ebee:	fa03 f309 	lsl.w	r3, r3, r9
   2ebf2:	109b      	asrs	r3, r3, #2
   2ebf4:	2b00      	cmp	r3, #0
   2ebf6:	dd03      	ble.n	2ec00 <clt_compute_allocation+0x2b4>
   2ebf8:	6804      	ldr	r4, [r0, #0]
   2ebfa:	4423      	add	r3, r4
   2ebfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ec00:	f856 bd04 	ldr.w	fp, [r6, #-4]!
   2ec04:	f85c 4d04 	ldr.w	r4, [ip, #-4]!
   2ec08:	445b      	add	r3, fp
   2ec0a:	429c      	cmp	r4, r3
   2ec0c:	dcd2      	bgt.n	2ebb4 <clt_compute_allocation+0x268>
   2ec0e:	680c      	ldr	r4, [r1, #0]
   2ec10:	42a3      	cmp	r3, r4
   2ec12:	bfd4      	ite	le
   2ec14:	449e      	addle	lr, r3
   2ec16:	44a6      	addgt	lr, r4
   2ec18:	4542      	cmp	r2, r8
   2ec1a:	f04f 0a01 	mov.w	sl, #1
   2ec1e:	f1a1 0104 	sub.w	r1, r1, #4
   2ec22:	f1a0 0004 	sub.w	r0, r0, #4
   2ec26:	d1d2      	bne.n	2ebce <clt_compute_allocation+0x282>
   2ec28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2ec2a:	4573      	cmp	r3, lr
   2ec2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ec2e:	f280 80e0 	bge.w	2edf2 <clt_compute_allocation+0x4a6>
   2ec32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   2ec34:	3b01      	subs	r3, #1
   2ec36:	429a      	cmp	r2, r3
   2ec38:	643b      	str	r3, [r7, #64]	; 0x40
   2ec3a:	dd99      	ble.n	2eb70 <clt_compute_allocation+0x224>
   2ec3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2ec3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2ec40:	f8d7 9008 	ldr.w	r9, [r7, #8]
   2ec44:	4614      	mov	r4, r2
   2ec46:	428b      	cmp	r3, r1
   2ec48:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2ec4c:	f280 80e1 	bge.w	2ee12 <clt_compute_allocation+0x4c6>
   2ec50:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2ec52:	6a15      	ldr	r5, [r2, #32]
   2ec54:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
   2ec58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   2ec5a:	63fd      	str	r5, [r7, #60]	; 0x3c
   2ec5c:	18a8      	adds	r0, r5, r2
   2ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2ec60:	fb0b f602 	mul.w	r6, fp, r2
   2ec64:	fb02 f404 	mul.w	r4, r2, r4
   2ec68:	6a3a      	ldr	r2, [r7, #32]
   2ec6a:	633e      	str	r6, [r7, #48]	; 0x30
   2ec6c:	1c59      	adds	r1, r3, #1
   2ec6e:	4291      	cmp	r1, r2
   2ec70:	643c      	str	r4, [r7, #64]	; 0x40
   2ec72:	f280 8482 	bge.w	2f57a <clt_compute_allocation+0xc2e>
   2ec76:	18f2      	adds	r2, r6, r3
   2ec78:	6c3e      	ldr	r6, [r7, #64]	; 0x40
   2ec7a:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
   2ec7e:	461c      	mov	r4, r3
   2ec80:	18f3      	adds	r3, r6, r3
   2ec82:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
   2ec84:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   2ec88:	f935 e006 	ldrsh.w	lr, [r5, r6]
   2ec8c:	eb0a 0c02 	add.w	ip, sl, r2
   2ec90:	460d      	mov	r5, r1
   2ec92:	eb0a 0803 	add.w	r8, sl, r3
   2ec96:	4606      	mov	r6, r0
   2ec98:	4621      	mov	r1, r4
   2ec9a:	f8d7 a034 	ldr.w	sl, [r7, #52]	; 0x34
   2ec9e:	46a1      	mov	r9, r4
   2eca0:	e073      	b.n	2ed8a <clt_compute_allocation+0x43e>
   2eca2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   2eca6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   2ecaa:	2a00      	cmp	r2, #0
   2ecac:	dd04      	ble.n	2ecb8 <clt_compute_allocation+0x36c>
   2ecae:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
   2ecb2:	4402      	add	r2, r0
   2ecb4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2ecb8:	2c00      	cmp	r4, #0
   2ecba:	dd04      	ble.n	2ecc6 <clt_compute_allocation+0x37a>
   2ecbc:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
   2ecc0:	4404      	add	r4, r0
   2ecc2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2ecc6:	6938      	ldr	r0, [r7, #16]
   2ecc8:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
   2eccc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   2ecd0:	66f8      	str	r0, [r7, #108]	; 0x6c
   2ecd2:	f1bb 0f00 	cmp.w	fp, #0
   2ecd6:	bfc8      	it	gt
   2ecd8:	1812      	addgt	r2, r2, r0
   2ecda:	69b8      	ldr	r0, [r7, #24]
   2ecdc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
   2ece0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   2ece2:	4404      	add	r4, r0
   2ece4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
   2ece8:	1aa4      	subs	r4, r4, r2
   2ecea:	ebae 0303 	sub.w	r3, lr, r3
   2ecee:	f89c 2001 	ldrb.w	r2, [ip, #1]
   2ecf2:	fb00 f303 	mul.w	r3, r0, r3
   2ecf6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
   2ecfa:	fb03 f202 	mul.w	r2, r3, r2
   2ecfe:	4082      	lsls	r2, r0
   2ed00:	6978      	ldr	r0, [r7, #20]
   2ed02:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2ed06:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
   2ed0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   2ed0c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   2ed0e:	2800      	cmp	r0, #0
   2ed10:	bfc8      	it	gt
   2ed12:	4689      	movgt	r9, r1
   2ed14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   2ed16:	42a0      	cmp	r0, r4
   2ed18:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2ed1c:	dd7e      	ble.n	2ee1c <clt_compute_allocation+0x4d0>
   2ed1e:	f898 0001 	ldrb.w	r0, [r8, #1]
   2ed22:	fb03 f000 	mul.w	r0, r3, r0
   2ed26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2ed2a:	4098      	lsls	r0, r3
   2ed2c:	1080      	asrs	r0, r0, #2
   2ed2e:	2a00      	cmp	r2, #0
   2ed30:	dd04      	ble.n	2ed3c <clt_compute_allocation+0x3f0>
   2ed32:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   2ed36:	441a      	add	r2, r3
   2ed38:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2ed3c:	2800      	cmp	r0, #0
   2ed3e:	dd04      	ble.n	2ed4a <clt_compute_allocation+0x3fe>
   2ed40:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   2ed44:	4418      	add	r0, r3
   2ed46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2ed4a:	693b      	ldr	r3, [r7, #16]
   2ed4c:	697c      	ldr	r4, [r7, #20]
   2ed4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2ed52:	f1bb 0f00 	cmp.w	fp, #0
   2ed56:	bfc8      	it	gt
   2ed58:	18d2      	addgt	r2, r2, r3
   2ed5a:	4418      	add	r0, r3
   2ed5c:	2b00      	cmp	r3, #0
   2ed5e:	bfc8      	it	gt
   2ed60:	46a9      	movgt	r9, r5
   2ed62:	69bb      	ldr	r3, [r7, #24]
   2ed64:	1a80      	subs	r0, r0, r2
   2ed66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2ed6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2ed6e:	6a3b      	ldr	r3, [r7, #32]
   2ed70:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   2ed74:	3502      	adds	r5, #2
   2ed76:	429d      	cmp	r5, r3
   2ed78:	f101 0102 	add.w	r1, r1, #2
   2ed7c:	f106 0604 	add.w	r6, r6, #4
   2ed80:	f10c 0c02 	add.w	ip, ip, #2
   2ed84:	f108 0802 	add.w	r8, r8, #2
   2ed88:	da4d      	bge.n	2ee26 <clt_compute_allocation+0x4da>
   2ed8a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
   2ed8e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
   2ed92:	f89c 2000 	ldrb.w	r2, [ip]
   2ed96:	eba3 000e 	sub.w	r0, r3, lr
   2ed9a:	fb04 f000 	mul.w	r0, r4, r0
   2ed9e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
   2eda2:	fb00 f202 	mul.w	r2, r0, r2
   2eda6:	40a2      	lsls	r2, r4
   2eda8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   2edaa:	46a6      	mov	lr, r4
   2edac:	6c7c      	ldr	r4, [r7, #68]	; 0x44
   2edae:	45a6      	cmp	lr, r4
   2edb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2edb4:	f77f af75 	ble.w	2eca2 <clt_compute_allocation+0x356>
   2edb8:	f898 4000 	ldrb.w	r4, [r8]
   2edbc:	fb00 f404 	mul.w	r4, r0, r4
   2edc0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
   2edc4:	4084      	lsls	r4, r0
   2edc6:	10a4      	asrs	r4, r4, #2
   2edc8:	e76f      	b.n	2ecaa <clt_compute_allocation+0x35e>
   2edca:	6d79      	ldr	r1, [r7, #84]	; 0x54
   2edcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2edce:	4a9f      	ldr	r2, [pc, #636]	; (2f04c <clt_compute_allocation+0x700>)
   2edd0:	1a5b      	subs	r3, r3, r1
   2edd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
   2edd4:	5cd3      	ldrb	r3, [r2, r3]
   2edd6:	653b      	str	r3, [r7, #80]	; 0x50
   2edd8:	428b      	cmp	r3, r1
   2edda:	f73f add6 	bgt.w	2e98a <clt_compute_allocation+0x3e>
   2edde:	1acb      	subs	r3, r1, r3
   2ede0:	2b07      	cmp	r3, #7
   2ede2:	663b      	str	r3, [r7, #96]	; 0x60
   2ede4:	bfc5      	ittet	gt
   2ede6:	3b08      	subgt	r3, #8
   2ede8:	663b      	strgt	r3, [r7, #96]	; 0x60
   2edea:	2300      	movle	r3, #0
   2edec:	2308      	movgt	r3, #8
   2edee:	60fb      	str	r3, [r7, #12]
   2edf0:	e5ce      	b.n	2e990 <clt_compute_allocation+0x44>
   2edf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2edf4:	3301      	adds	r3, #1
   2edf6:	429a      	cmp	r2, r3
   2edf8:	647b      	str	r3, [r7, #68]	; 0x44
   2edfa:	f6bf aeb9 	bge.w	2eb70 <clt_compute_allocation+0x224>
   2edfe:	461c      	mov	r4, r3
   2ee00:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2ee02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2ee04:	f8d7 9008 	ldr.w	r9, [r7, #8]
   2ee08:	428b      	cmp	r3, r1
   2ee0a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2ee0e:	f6ff af1f 	blt.w	2ec50 <clt_compute_allocation+0x304>
   2ee12:	62bb      	str	r3, [r7, #40]	; 0x28
   2ee14:	e07d      	b.n	2ef12 <clt_compute_allocation+0x5c6>
   2ee16:	f04f 0e00 	mov.w	lr, #0
   2ee1a:	e705      	b.n	2ec28 <clt_compute_allocation+0x2dc>
   2ee1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2ee20:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2ee24:	e783      	b.n	2ed2e <clt_compute_allocation+0x3e2>
   2ee26:	f8d7 a028 	ldr.w	sl, [r7, #40]	; 0x28
   2ee2a:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
   2ee2e:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   2ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ee34:	440b      	add	r3, r1
   2ee36:	469c      	mov	ip, r3
   2ee38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ee3a:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
   2ee3e:	eb03 0441 	add.w	r4, r3, r1, lsl #1
   2ee42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ee44:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
   2ee48:	4453      	add	r3, sl
   2ee4a:	f101 4680 	add.w	r6, r1, #1073741824	; 0x40000000
   2ee4e:	4698      	mov	r8, r3
   2ee50:	3e01      	subs	r6, #1
   2ee52:	693b      	ldr	r3, [r7, #16]
   2ee54:	f8c7 8040 	str.w	r8, [r7, #64]	; 0x40
   2ee58:	00b6      	lsls	r6, r6, #2
   2ee5a:	4433      	add	r3, r6
   2ee5c:	461d      	mov	r5, r3
   2ee5e:	69bb      	ldr	r3, [r7, #24]
   2ee60:	66fd      	str	r5, [r7, #108]	; 0x6c
   2ee62:	eb03 0e06 	add.w	lr, r3, r6
   2ee66:	697b      	ldr	r3, [r7, #20]
   2ee68:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
   2ee6c:	44d4      	add	ip, sl
   2ee6e:	441e      	add	r6, r3
   2ee70:	f8d7 a034 	ldr.w	sl, [r7, #52]	; 0x34
   2ee74:	e028      	b.n	2eec8 <clt_compute_allocation+0x57c>
   2ee76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2ee7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2ee7e:	2a00      	cmp	r2, #0
   2ee80:	dd04      	ble.n	2ee8c <clt_compute_allocation+0x540>
   2ee82:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
   2ee86:	4402      	add	r2, r0
   2ee88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2ee8c:	2b00      	cmp	r3, #0
   2ee8e:	dd04      	ble.n	2ee9a <clt_compute_allocation+0x54e>
   2ee90:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
   2ee94:	4403      	add	r3, r0
   2ee96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ee9a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
   2ee9c:	f855 0f04 	ldr.w	r0, [r5, #4]!
   2eea0:	66fd      	str	r5, [r7, #108]	; 0x6c
   2eea2:	f1bb 0f00 	cmp.w	fp, #0
   2eea6:	bfc8      	it	gt
   2eea8:	1812      	addgt	r2, r2, r0
   2eeaa:	4403      	add	r3, r0
   2eeac:	1a9b      	subs	r3, r3, r2
   2eeae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2eeb2:	f846 3f04 	str.w	r3, [r6, #4]!
   2eeb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2eeb8:	f84e 2f04 	str.w	r2, [lr, #4]!
   2eebc:	2800      	cmp	r0, #0
   2eebe:	bfc8      	it	gt
   2eec0:	4688      	movgt	r8, r1
   2eec2:	3101      	adds	r1, #1
   2eec4:	4299      	cmp	r1, r3
   2eec6:	da20      	bge.n	2ef0a <clt_compute_allocation+0x5be>
   2eec8:	4622      	mov	r2, r4
   2eeca:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2eece:	f9b2 0000 	ldrsh.w	r0, [r2]
   2eed2:	f81c 2b01 	ldrb.w	r2, [ip], #1
   2eed6:	1a1b      	subs	r3, r3, r0
   2eed8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
   2eedc:	fb00 f303 	mul.w	r3, r0, r3
   2eee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   2eee2:	4605      	mov	r5, r0
   2eee4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   2eee6:	fb03 f202 	mul.w	r2, r3, r2
   2eeea:	fa02 f209 	lsl.w	r2, r2, r9
   2eeee:	4285      	cmp	r5, r0
   2eef0:	f104 0402 	add.w	r4, r4, #2
   2eef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   2eef8:	ddbd      	ble.n	2ee76 <clt_compute_allocation+0x52a>
   2eefa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   2eefc:	5c40      	ldrb	r0, [r0, r1]
   2eefe:	fb03 f300 	mul.w	r3, r3, r0
   2ef02:	fa03 f309 	lsl.w	r3, r3, r9
   2ef06:	109b      	asrs	r3, r3, #2
   2ef08:	e7b9      	b.n	2ee7e <clt_compute_allocation+0x532>
   2ef0a:	f8d7 903c 	ldr.w	r9, [r7, #60]	; 0x3c
   2ef0e:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
   2ef12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2ef14:	009c      	lsls	r4, r3, #2
   2ef16:	62fc      	str	r4, [r7, #44]	; 0x2c
   2ef18:	f7f7 fe08 	bl	26b2c <save_stack>
   2ef1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   2ef20:	697a      	ldr	r2, [r7, #20]
   2ef22:	f8c7 9024 	str.w	r9, [r7, #36]	; 0x24
   2ef26:	2b01      	cmp	r3, #1
   2ef28:	bfd4      	ite	le
   2ef2a:	2300      	movle	r3, #0
   2ef2c:	2301      	movgt	r3, #1
   2ef2e:	4611      	mov	r1, r2
   2ef30:	633b      	str	r3, [r7, #48]	; 0x30
   2ef32:	69ba      	ldr	r2, [r7, #24]
   2ef34:	69fb      	ldr	r3, [r7, #28]
   2ef36:	eb02 0803 	add.w	r8, r2, r3
   2ef3a:	4419      	add	r1, r3
   2ef3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2ef40:	f8c7 8040 	str.w	r8, [r7, #64]	; 0x40
   2ef44:	00db      	lsls	r3, r3, #3
   2ef46:	637b      	str	r3, [r7, #52]	; 0x34
   2ef48:	2306      	movs	r3, #6
   2ef4a:	eb02 0e04 	add.w	lr, r2, r4
   2ef4e:	647b      	str	r3, [r7, #68]	; 0x44
   2ef50:	2200      	movs	r2, #0
   2ef52:	2340      	movs	r3, #64	; 0x40
   2ef54:	f8d7 8064 	ldr.w	r8, [r7, #100]	; 0x64
   2ef58:	63f9      	str	r1, [r7, #60]	; 0x3c
   2ef5a:	66fa      	str	r2, [r7, #108]	; 0x6c
   2ef5c:	4699      	mov	r9, r3
   2ef5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2ef60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2ef62:	eb03 0c09 	add.w	ip, r3, r9
   2ef66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2ef68:	4293      	cmp	r3, r2
   2ef6a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   2ef6e:	f04f 0500 	mov.w	r5, #0
   2ef72:	da26      	bge.n	2efc2 <clt_compute_allocation+0x676>
   2ef74:	46aa      	mov	sl, r5
   2ef76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   2ef78:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   2ef7a:	e9d7 020f 	ldrd	r0, r2, [r7, #60]	; 0x3c
   2ef7e:	e009      	b.n	2ef94 <clt_compute_allocation+0x648>
   2ef80:	f1ba 0f00 	cmp.w	sl, #0
   2ef84:	d112      	bne.n	2efac <clt_compute_allocation+0x660>
   2ef86:	4543      	cmp	r3, r8
   2ef88:	bfa8      	it	ge
   2ef8a:	4445      	addge	r5, r8
   2ef8c:	4596      	cmp	lr, r2
   2ef8e:	f1a1 0104 	sub.w	r1, r1, #4
   2ef92:	d016      	beq.n	2efc2 <clt_compute_allocation+0x676>
   2ef94:	f850 bd04 	ldr.w	fp, [r0, #-4]!
   2ef98:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2ef9c:	f854 6d04 	ldr.w	r6, [r4, #-4]!
   2efa0:	fb0b fb0c 	mul.w	fp, fp, ip
   2efa4:	eb03 13ab 	add.w	r3, r3, fp, asr #6
   2efa8:	42b3      	cmp	r3, r6
   2efaa:	dbe9      	blt.n	2ef80 <clt_compute_allocation+0x634>
   2efac:	680e      	ldr	r6, [r1, #0]
   2efae:	42b3      	cmp	r3, r6
   2efb0:	bfd4      	ite	le
   2efb2:	18ed      	addle	r5, r5, r3
   2efb4:	19ad      	addgt	r5, r5, r6
   2efb6:	4596      	cmp	lr, r2
   2efb8:	f04f 0a01 	mov.w	sl, #1
   2efbc:	f1a1 0104 	sub.w	r1, r1, #4
   2efc0:	d1e8      	bne.n	2ef94 <clt_compute_allocation+0x648>
   2efc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2efc4:	42ab      	cmp	r3, r5
   2efc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2efc8:	bfa8      	it	ge
   2efca:	4663      	movge	r3, ip
   2efcc:	66fb      	str	r3, [r7, #108]	; 0x6c
   2efce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2efd0:	bfb8      	it	lt
   2efd2:	46e1      	movlt	r9, ip
   2efd4:	3b01      	subs	r3, #1
   2efd6:	647b      	str	r3, [r7, #68]	; 0x44
   2efd8:	d1c1      	bne.n	2ef5e <clt_compute_allocation+0x612>
   2efda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2efdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2efde:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
   2efe2:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
   2efe6:	6c7d      	ldr	r5, [r7, #68]	; 0x44
   2efe8:	4293      	cmp	r3, r2
   2efea:	da33      	bge.n	2f054 <clt_compute_allocation+0x708>
   2efec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   2eff0:	69fb      	ldr	r3, [r7, #28]
   2eff2:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   2eff4:	18d0      	adds	r0, r2, r3
   2eff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2effa:	46ac      	mov	ip, r5
   2effc:	18d1      	adds	r1, r2, r3
   2effe:	e9d7 2b1a 	ldrd	r2, fp, [r7, #104]	; 0x68
   2f002:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
   2f006:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
   2f00a:	e010      	b.n	2f02e <clt_compute_allocation+0x6e2>
   2f00c:	f1bc 0f00 	cmp.w	ip, #0
   2f010:	d103      	bne.n	2f01a <clt_compute_allocation+0x6ce>
   2f012:	4599      	cmp	r9, r3
   2f014:	bfd4      	ite	le
   2f016:	464b      	movle	r3, r9
   2f018:	2300      	movgt	r3, #0
   2f01a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
   2f01e:	42b3      	cmp	r3, r6
   2f020:	bfa8      	it	ge
   2f022:	4633      	movge	r3, r6
   2f024:	45c6      	cmp	lr, r8
   2f026:	f841 3d04 	str.w	r3, [r1, #-4]!
   2f02a:	441d      	add	r5, r3
   2f02c:	d010      	beq.n	2f050 <clt_compute_allocation+0x704>
   2f02e:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2f032:	f858 ad04 	ldr.w	sl, [r8, #-4]!
   2f036:	f852 6d04 	ldr.w	r6, [r2, #-4]!
   2f03a:	fb03 f30b 	mul.w	r3, r3, fp
   2f03e:	eb0a 13a3 	add.w	r3, sl, r3, asr #6
   2f042:	429e      	cmp	r6, r3
   2f044:	dce2      	bgt.n	2f00c <clt_compute_allocation+0x6c0>
   2f046:	f04f 0c01 	mov.w	ip, #1
   2f04a:	e7e6      	b.n	2f01a <clt_compute_allocation+0x6ce>
   2f04c:	000413e0 	.word	0x000413e0
   2f050:	f8d7 906c 	ldr.w	r9, [r7, #108]	; 0x6c
   2f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f056:	6a3a      	ldr	r2, [r7, #32]
   2f058:	4293      	cmp	r3, r2
   2f05a:	f280 8291 	bge.w	2f580 <clt_compute_allocation+0xc34>
   2f05e:	4619      	mov	r1, r3
   2f060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2f062:	4ace      	ldr	r2, [pc, #824]	; (2f39c <clt_compute_allocation+0xa50>)
   2f064:	43db      	mvns	r3, r3
   2f066:	18d3      	adds	r3, r2, r3
   2f068:	647b      	str	r3, [r7, #68]	; 0x44
   2f06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f06c:	69fa      	ldr	r2, [r7, #28]
   2f06e:	f103 0a08 	add.w	sl, r3, #8
   2f072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   2f076:	3101      	adds	r1, #1
   2f078:	66f9      	str	r1, [r7, #108]	; 0x6c
   2f07a:	189e      	adds	r6, r3, r2
   2f07c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2f07e:	f856 1c04 	ldr.w	r1, [r6, #-4]
   2f082:	6a18      	ldr	r0, [r3, #32]
   2f084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2f086:	f930 b019 	ldrsh.w	fp, [r0, r9, lsl #1]
   2f08a:	f930 e003 	ldrsh.w	lr, [r0, r3]
   2f08e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f090:	ea4f 0249 	mov.w	r2, r9, lsl #1
   2f094:	f853 8d04 	ldr.w	r8, [r3, #-4]!
   2f098:	66bb      	str	r3, [r7, #104]	; 0x68
   2f09a:	1e93      	subs	r3, r2, #2
   2f09c:	461c      	mov	r4, r3
   2f09e:	64bb      	str	r3, [r7, #72]	; 0x48
   2f0a0:	5f00      	ldrsh	r0, [r0, r4]
   2f0a2:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   2f0a4:	ebab 030e 	sub.w	r3, fp, lr
   2f0a8:	1b64      	subs	r4, r4, r5
   2f0aa:	eba0 0e0e 	sub.w	lr, r0, lr
   2f0ae:	fb94 fcf3 	sdiv	ip, r4, r3
   2f0b2:	ebab 0000 	sub.w	r0, fp, r0
   2f0b6:	fb03 441c 	mls	r4, r3, ip, r4
   2f0ba:	eba4 040e 	sub.w	r4, r4, lr
   2f0be:	fb00 1c0c 	mla	ip, r0, ip, r1
   2f0c2:	2c00      	cmp	r4, #0
   2f0c4:	bfac      	ite	ge
   2f0c6:	4464      	addge	r4, ip
   2f0c8:	f10c 0400 	addlt.w	r4, ip, #0
   2f0cc:	45d0      	cmp	r8, sl
   2f0ce:	4643      	mov	r3, r8
   2f0d0:	bfb8      	it	lt
   2f0d2:	4653      	movlt	r3, sl
   2f0d4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2f0d8:	429c      	cmp	r4, r3
   2f0da:	46d8      	mov	r8, fp
   2f0dc:	46cc      	mov	ip, r9
   2f0de:	db2b      	blt.n	2f138 <clt_compute_allocation+0x7ec>
   2f0e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   2f0e4:	2b00      	cmp	r3, #0
   2f0e6:	f000 819e 	beq.w	2f426 <clt_compute_allocation+0xada>
   2f0ea:	f1b9 0f11 	cmp.w	r9, #17
   2f0ee:	f340 8157 	ble.w	2f3a0 <clt_compute_allocation+0xa54>
   2f0f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
   2f0f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   2f0f8:	3102      	adds	r1, #2
   2f0fa:	455b      	cmp	r3, fp
   2f0fc:	bfcc      	ite	gt
   2f0fe:	2307      	movgt	r3, #7
   2f100:	2309      	movle	r3, #9
   2f102:	4549      	cmp	r1, r9
   2f104:	f280 8153 	bge.w	2f3ae <clt_compute_allocation+0xa62>
   2f108:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
   2f10c:	fb03 f300 	mul.w	r3, r3, r0
   2f110:	408b      	lsls	r3, r1
   2f112:	f343 035b 	sbfx	r3, r3, #1, #28
   2f116:	429c      	cmp	r4, r3
   2f118:	dd04      	ble.n	2f124 <clt_compute_allocation+0x7d8>
   2f11a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
   2f11e:	4543      	cmp	r3, r8
   2f120:	f280 8145 	bge.w	2f3ae <clt_compute_allocation+0xa62>
   2f124:	2201      	movs	r2, #1
   2f126:	2100      	movs	r1, #0
   2f128:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f12c:	f7fd fbe2 	bl	2c8f4 <ec_enc_bit_logp>
   2f130:	f856 1c04 	ldr.w	r1, [r6, #-4]
   2f134:	3508      	adds	r5, #8
   2f136:	3c08      	subs	r4, #8
   2f138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2f13a:	4419      	add	r1, r3
   2f13c:	1a6d      	subs	r5, r5, r1
   2f13e:	b123      	cbz	r3, 2f14a <clt_compute_allocation+0x7fe>
   2f140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f142:	f813 3009 	ldrb.w	r3, [r3, r9]
   2f146:	653b      	str	r3, [r7, #80]	; 0x50
   2f148:	441d      	add	r5, r3
   2f14a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f14c:	429c      	cmp	r4, r3
   2f14e:	46c1      	mov	r9, r8
   2f150:	f2c0 811c 	blt.w	2f38c <clt_compute_allocation+0xa40>
   2f154:	441d      	add	r5, r3
   2f156:	f846 3d04 	str.w	r3, [r6, #-4]!
   2f15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f15c:	4543      	cmp	r3, r8
   2f15e:	d18d      	bne.n	2f07c <clt_compute_allocation+0x730>
   2f160:	465b      	mov	r3, fp
   2f162:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2f164:	6879      	ldr	r1, [r7, #4]
   2f166:	440a      	add	r2, r1
   2f168:	663a      	str	r2, [r7, #96]	; 0x60
   2f16a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   2f16c:	2a00      	cmp	r2, #0
   2f16e:	f000 81e8 	beq.w	2f542 <clt_compute_allocation+0xbf6>
   2f172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2f176:	2a00      	cmp	r2, #0
   2f178:	f040 81f0 	bne.w	2f55c <clt_compute_allocation+0xc10>
   2f17c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
   2f17e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f182:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f184:	1c59      	adds	r1, r3, #1
   2f186:	1b09      	subs	r1, r1, r4
   2f188:	f004 fea4 	bl	33ed4 <ec_dec_uint>
   2f18c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2f190:	4420      	add	r0, r4
   2f192:	6018      	str	r0, [r3, #0]
   2f194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f196:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   2f198:	4282      	cmp	r2, r0
   2f19a:	f2c0 8130 	blt.w	2f3fe <clt_compute_allocation+0xab2>
   2f19e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2f1a0:	68f9      	ldr	r1, [r7, #12]
   2f1a2:	440a      	add	r2, r1
   2f1a4:	663a      	str	r2, [r7, #96]	; 0x60
   2f1a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
   2f1aa:	2200      	movs	r2, #0
   2f1ac:	600a      	str	r2, [r1, #0]
   2f1ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
   2f1b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   2f1b2:	f8d2 8020 	ldr.w	r8, [r2, #32]
   2f1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f1b8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   2f1ba:	f938 0002 	ldrsh.w	r0, [r8, r2]
   2f1be:	f938 2001 	ldrsh.w	r2, [r8, r1]
   2f1c2:	1a80      	subs	r0, r0, r2
   2f1c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   2f1c6:	1b65      	subs	r5, r4, r5
   2f1c8:	429a      	cmp	r2, r3
   2f1ca:	fb95 faf0 	sdiv	sl, r5, r0
   2f1ce:	eb08 0b01 	add.w	fp, r8, r1
   2f1d2:	fb00 501a 	mls	r0, r0, sl, r5
   2f1d6:	f280 81c5 	bge.w	2f564 <clt_compute_allocation+0xc18>
   2f1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f1dc:	1f14      	subs	r4, r2, #4
   2f1de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2f1e2:	4414      	add	r4, r2
   2f1e4:	f1a2 0904 	sub.w	r9, r2, #4
   2f1e8:	4621      	mov	r1, r4
   2f1ea:	eb09 0983 	add.w	r9, r9, r3, lsl #2
   2f1ee:	46dc      	mov	ip, fp
   2f1f0:	465d      	mov	r5, fp
   2f1f2:	462e      	mov	r6, r5
   2f1f4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
   2f1f8:	f9b6 e000 	ldrsh.w	lr, [r6]
   2f1fc:	f851 6f04 	ldr.w	r6, [r1, #4]!
   2f200:	eba2 020e 	sub.w	r2, r2, lr
   2f204:	fb0a 6202 	mla	r2, sl, r2, r6
   2f208:	4589      	cmp	r9, r1
   2f20a:	f105 0502 	add.w	r5, r5, #2
   2f20e:	600a      	str	r2, [r1, #0]
   2f210:	d1ef      	bne.n	2f1f2 <clt_compute_allocation+0x8a6>
   2f212:	eb08 0843 	add.w	r8, r8, r3, lsl #1
   2f216:	4659      	mov	r1, fp
   2f218:	f10b 0b02 	add.w	fp, fp, #2
   2f21c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
   2f220:	f9b1 5000 	ldrsh.w	r5, [r1]
   2f224:	f854 1f04 	ldr.w	r1, [r4, #4]!
   2f228:	1b52      	subs	r2, r2, r5
   2f22a:	4282      	cmp	r2, r0
   2f22c:	bfa8      	it	ge
   2f22e:	4602      	movge	r2, r0
   2f230:	4411      	add	r1, r2
   2f232:	45d8      	cmp	r8, fp
   2f234:	eba0 0002 	sub.w	r0, r0, r2
   2f238:	6021      	str	r1, [r4, #0]
   2f23a:	d1ec      	bne.n	2f216 <clt_compute_allocation+0x8ca>
   2f23c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2f23e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
   2f242:	6d78      	ldr	r0, [r7, #84]	; 0x54
   2f244:	f8d7 a0bc 	ldr.w	sl, [r7, #188]	; 0xbc
   2f248:	f8d7 804c 	ldr.w	r8, [r7, #76]	; 0x4c
   2f24c:	66bb      	str	r3, [r7, #104]	; 0x68
   2f24e:	188c      	adds	r4, r1, r2
   2f250:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2f254:	188d      	adds	r5, r1, r2
   2f256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2f258:	3203      	adds	r2, #3
   2f25a:	2600      	movs	r6, #0
   2f25c:	663a      	str	r2, [r7, #96]	; 0x60
   2f25e:	4663      	mov	r3, ip
   2f260:	f9bc e002 	ldrsh.w	lr, [ip, #2]
   2f264:	f9b3 3000 	ldrsh.w	r3, [r3]
   2f268:	6822      	ldr	r2, [r4, #0]
   2f26a:	ebae 0e03 	sub.w	lr, lr, r3
   2f26e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   2f272:	fa0e fe03 	lsl.w	lr, lr, r3
   2f276:	f1be 0f01 	cmp.w	lr, #1
   2f27a:	f10c 0c02 	add.w	ip, ip, #2
   2f27e:	4432      	add	r2, r6
   2f280:	f340 80e5 	ble.w	2f44e <clt_compute_allocation+0xb02>
   2f284:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2f288:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   2f28c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2f28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f290:	1a51      	subs	r1, r2, r1
   2f292:	f933 b008 	ldrsh.w	fp, [r3, r8]
   2f296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f298:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2f29c:	1a52      	subs	r2, r2, r1
   2f29e:	f1ba 0f02 	cmp.w	sl, #2
   2f2a2:	6022      	str	r2, [r4, #0]
   2f2a4:	449b      	add	fp, r3
   2f2a6:	fb0e f80a 	mul.w	r8, lr, sl
   2f2aa:	f000 80f4 	beq.w	2f496 <clt_compute_allocation+0xb4a>
   2f2ae:	f06f 0314 	mvn.w	r3, #20
   2f2b2:	fb03 f908 	mul.w	r9, r3, r8
   2f2b6:	fb0b fb08 	mul.w	fp, fp, r8
   2f2ba:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   2f2be:	f1be 0f02 	cmp.w	lr, #2
   2f2c2:	eb09 096b 	add.w	r9, r9, fp, asr #1
   2f2c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f2c8:	f000 80e1 	beq.w	2f48e <clt_compute_allocation+0xb42>
   2f2cc:	eb02 0309 	add.w	r3, r2, r9
   2f2d0:	ebb3 1f08 	cmp.w	r3, r8, lsl #4
   2f2d4:	ea4f 0e48 	mov.w	lr, r8, lsl #1
   2f2d8:	f280 80c8 	bge.w	2f46c <clt_compute_allocation+0xb20>
   2f2dc:	eb09 09ab 	add.w	r9, r9, fp, asr #2
   2f2e0:	eb02 0309 	add.w	r3, r2, r9
   2f2e4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2f2e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2f2ec:	fb93 f3f8 	sdiv	r3, r3, r8
   2f2f0:	10db      	asrs	r3, r3, #3
   2f2f2:	602b      	str	r3, [r5, #0]
   2f2f4:	6822      	ldr	r2, [r4, #0]
   2f2f6:	fb03 fe0a 	mul.w	lr, r3, sl
   2f2fa:	ebbe 0fe2 	cmp.w	lr, r2, asr #3
   2f2fe:	dd03      	ble.n	2f308 <clt_compute_allocation+0x9bc>
   2f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f302:	fa42 f303 	asr.w	r3, r2, r3
   2f306:	10db      	asrs	r3, r3, #3
   2f308:	2b08      	cmp	r3, #8
   2f30a:	bfa8      	it	ge
   2f30c:	2308      	movge	r3, #8
   2f30e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2f310:	602b      	str	r3, [r5, #0]
   2f312:	fb02 f203 	mul.w	r2, r2, r3
   2f316:	6823      	ldr	r3, [r4, #0]
   2f318:	444b      	add	r3, r9
   2f31a:	429a      	cmp	r2, r3
   2f31c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   2f320:	bfb4      	ite	lt
   2f322:	2300      	movlt	r3, #0
   2f324:	2301      	movge	r3, #1
   2f326:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   2f32a:	682a      	ldr	r2, [r5, #0]
   2f32c:	6823      	ldr	r3, [r4, #0]
   2f32e:	fb02 f20a 	mul.w	r2, r2, sl
   2f332:	eba3 02c2 	sub.w	r2, r3, r2, lsl #3
   2f336:	6022      	str	r2, [r4, #0]
   2f338:	2900      	cmp	r1, #0
   2f33a:	f000 8086 	beq.w	2f44a <clt_compute_allocation+0xafe>
   2f33e:	f8d5 e000 	ldr.w	lr, [r5]
   2f342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2f344:	fa41 f203 	asr.w	r2, r1, r3
   2f348:	f1ce 0308 	rsb	r3, lr, #8
   2f34c:	4293      	cmp	r3, r2
   2f34e:	bfa8      	it	ge
   2f350:	4613      	movge	r3, r2
   2f352:	fb03 f20a 	mul.w	r2, r3, sl
   2f356:	1b8e      	subs	r6, r1, r6
   2f358:	4473      	add	r3, lr
   2f35a:	00d2      	lsls	r2, r2, #3
   2f35c:	42b2      	cmp	r2, r6
   2f35e:	602b      	str	r3, [r5, #0]
   2f360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2f364:	bfb4      	ite	lt
   2f366:	f04f 0e00 	movlt.w	lr, #0
   2f36a:	f04f 0e01 	movge.w	lr, #1
   2f36e:	f843 e020 	str.w	lr, [r3, r0, lsl #2]
   2f372:	1a8e      	subs	r6, r1, r2
   2f374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2f376:	3001      	adds	r0, #1
   2f378:	4298      	cmp	r0, r3
   2f37a:	f104 0404 	add.w	r4, r4, #4
   2f37e:	f105 0504 	add.w	r5, r5, #4
   2f382:	f000 80a2 	beq.w	2f4ca <clt_compute_allocation+0xb7e>
   2f386:	ea4f 0840 	mov.w	r8, r0, lsl #1
   2f38a:	e768      	b.n	2f25e <clt_compute_allocation+0x912>
   2f38c:	2300      	movs	r3, #0
   2f38e:	f846 3d04 	str.w	r3, [r6, #-4]!
   2f392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f394:	454b      	cmp	r3, r9
   2f396:	f47f ae71 	bne.w	2f07c <clt_compute_allocation+0x730>
   2f39a:	e6e1      	b.n	2f160 <clt_compute_allocation+0x814>
   2f39c:	000413e0 	.word	0x000413e0
   2f3a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
   2f3a2:	3102      	adds	r1, #2
   2f3a4:	4549      	cmp	r1, r9
   2f3a6:	f04f 0300 	mov.w	r3, #0
   2f3aa:	f6ff aead 	blt.w	2f108 <clt_compute_allocation+0x7bc>
   2f3ae:	4693      	mov	fp, r2
   2f3b0:	2201      	movs	r2, #1
   2f3b2:	4611      	mov	r1, r2
   2f3b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f3b8:	4664      	mov	r4, ip
   2f3ba:	f7fd fa9b 	bl	2c8f4 <ec_enc_bit_logp>
   2f3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2f3c0:	2b00      	cmp	r3, #0
   2f3c2:	f000 80bb 	beq.w	2f53c <clt_compute_allocation+0xbf0>
   2f3c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2f3ca:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2f3ce:	6819      	ldr	r1, [r3, #0]
   2f3d0:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
   2f3d4:	42a1      	cmp	r1, r4
   2f3d6:	bfa8      	it	ge
   2f3d8:	4621      	movge	r1, r4
   2f3da:	6001      	str	r1, [r0, #0]
   2f3dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
   2f3de:	66fc      	str	r4, [r7, #108]	; 0x6c
   2f3e0:	1c62      	adds	r2, r4, #1
   2f3e2:	1a12      	subs	r2, r2, r0
   2f3e4:	1a09      	subs	r1, r1, r0
   2f3e6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f3ea:	f7fd fb49 	bl	2ca80 <ec_enc_uint>
   2f3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2f3f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   2f3f4:	6818      	ldr	r0, [r3, #0]
   2f3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f3f8:	4282      	cmp	r2, r0
   2f3fa:	f6bf aed0 	bge.w	2f19e <clt_compute_allocation+0x852>
   2f3fe:	68fa      	ldr	r2, [r7, #12]
   2f400:	2a00      	cmp	r2, #0
   2f402:	f43f aed0 	beq.w	2f1a6 <clt_compute_allocation+0x85a>
   2f406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
   2f40a:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f40c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f410:	2a00      	cmp	r2, #0
   2f412:	f000 809b 	beq.w	2f54c <clt_compute_allocation+0xc00>
   2f416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2f41a:	2201      	movs	r2, #1
   2f41c:	6819      	ldr	r1, [r3, #0]
   2f41e:	f7fd fa69 	bl	2c8f4 <ec_enc_bit_logp>
   2f422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f424:	e6c3      	b.n	2f1ae <clt_compute_allocation+0x862>
   2f426:	2101      	movs	r1, #1
   2f428:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
   2f42c:	643a      	str	r2, [r7, #64]	; 0x40
   2f42e:	f004 fcff 	bl	33e30 <ec_dec_bit_logp>
   2f432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f434:	2800      	cmp	r0, #0
   2f436:	f43f ae7b 	beq.w	2f130 <clt_compute_allocation+0x7e4>
   2f43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   2f43c:	4693      	mov	fp, r2
   2f43e:	2b00      	cmp	r3, #0
   2f440:	d07c      	beq.n	2f53c <clt_compute_allocation+0xbf0>
   2f442:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
   2f446:	464b      	mov	r3, r9
   2f448:	e698      	b.n	2f17c <clt_compute_allocation+0x830>
   2f44a:	460e      	mov	r6, r1
   2f44c:	e792      	b.n	2f374 <clt_compute_allocation+0xa28>
   2f44e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2f450:	1ad1      	subs	r1, r2, r3
   2f452:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2f456:	1a52      	subs	r2, r2, r1
   2f458:	2300      	movs	r3, #0
   2f45a:	6022      	str	r2, [r4, #0]
   2f45c:	602b      	str	r3, [r5, #0]
   2f45e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   2f462:	461a      	mov	r2, r3
   2f464:	2301      	movs	r3, #1
   2f466:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
   2f46a:	e765      	b.n	2f338 <clt_compute_allocation+0x9ec>
   2f46c:	44c6      	add	lr, r8
   2f46e:	ebb3 0fce 	cmp.w	r3, lr, lsl #3
   2f472:	bfbc      	itt	lt
   2f474:	eb09 09eb 	addlt.w	r9, r9, fp, asr #3
   2f478:	eb02 0309 	addlt.w	r3, r2, r9
   2f47c:	e732      	b.n	2f2e4 <clt_compute_allocation+0x998>
   2f47e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   2f482:	ea4f 096b 	mov.w	r9, fp, asr #1
   2f486:	2320      	movs	r3, #32
   2f488:	f1a9 0954 	sub.w	r9, r9, #84	; 0x54
   2f48c:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f490:	eb09 09a3 	add.w	r9, r9, r3, asr #2
   2f494:	e71a      	b.n	2f2cc <clt_compute_allocation+0x980>
   2f496:	f1be 0f02 	cmp.w	lr, #2
   2f49a:	d0f0      	beq.n	2f47e <clt_compute_allocation+0xb32>
   2f49c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2f4a0:	681b      	ldr	r3, [r3, #0]
   2f4a2:	b933      	cbnz	r3, 2f4b2 <clt_compute_allocation+0xb66>
   2f4a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   2f4a8:	681b      	ldr	r3, [r3, #0]
   2f4aa:	4283      	cmp	r3, r0
   2f4ac:	bfc8      	it	gt
   2f4ae:	f108 0801 	addgt.w	r8, r8, #1
   2f4b2:	f06f 0314 	mvn.w	r3, #20
   2f4b6:	fb03 f908 	mul.w	r9, r3, r8
   2f4ba:	fb08 fb0b 	mul.w	fp, r8, fp
   2f4be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   2f4c2:	eb09 096b 	add.w	r9, r9, fp, asr #1
   2f4c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f4c8:	e700      	b.n	2f2cc <clt_compute_allocation+0x980>
   2f4ca:	6578      	str	r0, [r7, #84]	; 0x54
   2f4cc:	4601      	mov	r1, r0
   2f4ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   2f4d2:	6016      	str	r6, [r2, #0]
   2f4d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2f4d6:	428a      	cmp	r2, r1
   2f4d8:	dd25      	ble.n	2f526 <clt_compute_allocation+0xbda>
   2f4da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2f4de:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
   2f4e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   2f4e6:	1f15      	subs	r5, r2, #4
   2f4e8:	3901      	subs	r1, #1
   2f4ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
   2f4ee:	0089      	lsls	r1, r1, #2
   2f4f0:	1850      	adds	r0, r2, r1
   2f4f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   2f4f6:	1854      	adds	r4, r2, r1
   2f4f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   2f4fc:	4411      	add	r1, r2
   2f4fe:	69fa      	ldr	r2, [r7, #28]
   2f500:	2600      	movs	r6, #0
   2f502:	4415      	add	r5, r2
   2f504:	f851 2f04 	ldr.w	r2, [r1, #4]!
   2f508:	fa42 f20c 	asr.w	r2, r2, ip
   2f50c:	10d2      	asrs	r2, r2, #3
   2f50e:	f840 2f04 	str.w	r2, [r0, #4]!
   2f512:	600e      	str	r6, [r1, #0]
   2f514:	6802      	ldr	r2, [r0, #0]
   2f516:	2a00      	cmp	r2, #0
   2f518:	bfcc      	ite	gt
   2f51a:	2200      	movgt	r2, #0
   2f51c:	2201      	movle	r2, #1
   2f51e:	428d      	cmp	r5, r1
   2f520:	f844 2f04 	str.w	r2, [r4, #4]!
   2f524:	d1ee      	bne.n	2f504 <clt_compute_allocation+0xbb8>
   2f526:	66fb      	str	r3, [r7, #108]	; 0x6c
   2f528:	f7f7 fb12 	bl	26b50 <restore_stack>
   2f52c:	f7f7 fb10 	bl	26b50 <restore_stack>
   2f530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f532:	3774      	adds	r7, #116	; 0x74
   2f534:	4618      	mov	r0, r3
   2f536:	46bd      	mov	sp, r7
   2f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f53c:	f8c7 b048 	str.w	fp, [r7, #72]	; 0x48
   2f540:	464b      	mov	r3, r9
   2f542:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   2f546:	2000      	movs	r0, #0
   2f548:	6010      	str	r0, [r2, #0]
   2f54a:	e624      	b.n	2f196 <clt_compute_allocation+0x84a>
   2f54c:	2101      	movs	r1, #1
   2f54e:	f004 fc6f 	bl	33e30 <ec_dec_bit_logp>
   2f552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   2f556:	6018      	str	r0, [r3, #0]
   2f558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f55a:	e628      	b.n	2f1ae <clt_compute_allocation+0x862>
   2f55c:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
   2f560:	461c      	mov	r4, r3
   2f562:	e730      	b.n	2f3c6 <clt_compute_allocation+0xa7a>
   2f564:	2600      	movs	r6, #0
   2f566:	4611      	mov	r1, r2
   2f568:	e7b1      	b.n	2f4ce <clt_compute_allocation+0xb82>
   2f56a:	1e53      	subs	r3, r2, #1
   2f56c:	623b      	str	r3, [r7, #32]
   2f56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2f570:	005b      	lsls	r3, r3, #1
   2f572:	64fb      	str	r3, [r7, #76]	; 0x4c
   2f574:	4610      	mov	r0, r2
   2f576:	f7ff bade 	b.w	2eb36 <clt_compute_allocation+0x1ea>
   2f57a:	4619      	mov	r1, r3
   2f57c:	62bb      	str	r3, [r7, #40]	; 0x28
   2f57e:	e458      	b.n	2ee32 <clt_compute_allocation+0x4e6>
   2f580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2f582:	e5ee      	b.n	2f162 <clt_compute_allocation+0x816>

0002f584 <encode_size>:
   2f584:	28fb      	cmp	r0, #251	; 0xfb
   2f586:	b2c3      	uxtb	r3, r0
   2f588:	dc02      	bgt.n	2f590 <encode_size+0xc>
   2f58a:	2001      	movs	r0, #1
   2f58c:	700b      	strb	r3, [r1, #0]
   2f58e:	4770      	bx	lr
   2f590:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
   2f594:	1ac0      	subs	r0, r0, r3
   2f596:	1080      	asrs	r0, r0, #2
   2f598:	7048      	strb	r0, [r1, #1]
   2f59a:	700b      	strb	r3, [r1, #0]
   2f59c:	2002      	movs	r0, #2
   2f59e:	4770      	bx	lr

0002f5a0 <opus_packet_get_samples_per_frame>:
   2f5a0:	7800      	ldrb	r0, [r0, #0]
   2f5a2:	0603      	lsls	r3, r0, #24
   2f5a4:	d41c      	bmi.n	2f5e0 <opus_packet_get_samples_per_frame+0x40>
   2f5a6:	f000 0360 	and.w	r3, r0, #96	; 0x60
   2f5aa:	2b60      	cmp	r3, #96	; 0x60
   2f5ac:	d00b      	beq.n	2f5c6 <opus_packet_get_samples_per_frame+0x26>
   2f5ae:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   2f5b2:	2803      	cmp	r0, #3
   2f5b4:	d01e      	beq.n	2f5f4 <opus_packet_get_samples_per_frame+0x54>
   2f5b6:	4b14      	ldr	r3, [pc, #80]	; (2f608 <opus_packet_get_samples_per_frame+0x68>)
   2f5b8:	4081      	lsls	r1, r0
   2f5ba:	fb83 3001 	smull	r3, r0, r3, r1
   2f5be:	17c9      	asrs	r1, r1, #31
   2f5c0:	ebc1 1060 	rsb	r0, r1, r0, asr #5
   2f5c4:	4770      	bx	lr
   2f5c6:	4b10      	ldr	r3, [pc, #64]	; (2f608 <opus_packet_get_samples_per_frame+0x68>)
   2f5c8:	f010 0f08 	tst.w	r0, #8
   2f5cc:	ea4f 70e1 	mov.w	r0, r1, asr #31
   2f5d0:	fb83 3101 	smull	r3, r1, r3, r1
   2f5d4:	bf14      	ite	ne
   2f5d6:	ebc0 1021 	rsbne	r0, r0, r1, asr #4
   2f5da:	ebc0 1061 	rsbeq	r0, r0, r1, asr #5
   2f5de:	4770      	bx	lr
   2f5e0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   2f5e4:	4b08      	ldr	r3, [pc, #32]	; (2f608 <opus_packet_get_samples_per_frame+0x68>)
   2f5e6:	4081      	lsls	r1, r0
   2f5e8:	fb83 3001 	smull	r3, r0, r3, r1
   2f5ec:	17c9      	asrs	r1, r1, #31
   2f5ee:	ebc1 10e0 	rsb	r0, r1, r0, asr #7
   2f5f2:	4770      	bx	lr
   2f5f4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   2f5f8:	4804      	ldr	r0, [pc, #16]	; (2f60c <opus_packet_get_samples_per_frame+0x6c>)
   2f5fa:	0089      	lsls	r1, r1, #2
   2f5fc:	fb80 3001 	smull	r3, r0, r0, r1
   2f600:	17c9      	asrs	r1, r1, #31
   2f602:	ebc1 10a0 	rsb	r0, r1, r0, asr #6
   2f606:	4770      	bx	lr
   2f608:	51eb851f 	.word	0x51eb851f
   2f60c:	10624dd3 	.word	0x10624dd3

0002f610 <opus_packet_parse_impl>:
   2f610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f614:	b085      	sub	sp, #20
   2f616:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2f618:	9201      	str	r2, [sp, #4]
   2f61a:	2d00      	cmp	r5, #0
   2f61c:	f000 8201 	beq.w	2fa22 <opus_packet_parse_impl+0x412>
   2f620:	2900      	cmp	r1, #0
   2f622:	f2c0 81fe 	blt.w	2fa22 <opus_packet_parse_impl+0x412>
   2f626:	d04c      	beq.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f628:	7807      	ldrb	r7, [r0, #0]
   2f62a:	063a      	lsls	r2, r7, #24
   2f62c:	d44f      	bmi.n	2f6ce <opus_packet_parse_impl+0xbe>
   2f62e:	f007 0460 	and.w	r4, r7, #96	; 0x60
   2f632:	2c60      	cmp	r4, #96	; 0x60
   2f634:	f000 815e 	beq.w	2f8f4 <opus_packet_parse_impl+0x2e4>
   2f638:	f3c7 04c1 	ubfx	r4, r7, #3, #2
   2f63c:	2c03      	cmp	r4, #3
   2f63e:	f000 818d 	beq.w	2f95c <opus_packet_parse_impl+0x34c>
   2f642:	f64b 3680 	movw	r6, #48000	; 0xbb80
   2f646:	f8df c3cc 	ldr.w	ip, [pc, #972]	; 2fa14 <opus_packet_parse_impl+0x404>
   2f64a:	40a6      	lsls	r6, r4
   2f64c:	fbac 4606 	umull	r4, r6, ip, r6
   2f650:	0976      	lsrs	r6, r6, #5
   2f652:	f007 0c03 	and.w	ip, r7, #3
   2f656:	f1bc 0f01 	cmp.w	ip, #1
   2f65a:	f100 0401 	add.w	r4, r0, #1
   2f65e:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   2f662:	f000 8134 	beq.w	2f8ce <opus_packet_parse_impl+0x2be>
   2f666:	fa4f f88c 	sxtb.w	r8, ip
   2f66a:	f1b8 0f00 	cmp.w	r8, #0
   2f66e:	d039      	beq.n	2f6e4 <opus_packet_parse_impl+0xd4>
   2f670:	f1bc 0f02 	cmp.w	ip, #2
   2f674:	f000 810b 	beq.w	2f88e <opus_packet_parse_impl+0x27e>
   2f678:	f1be 0f00 	cmp.w	lr, #0
   2f67c:	d021      	beq.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f67e:	f890 8001 	ldrb.w	r8, [r0, #1]
   2f682:	f008 093f 	and.w	r9, r8, #63	; 0x3f
   2f686:	46cc      	mov	ip, r9
   2f688:	f1b9 0f00 	cmp.w	r9, #0
   2f68c:	d019      	beq.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f68e:	fb06 f609 	mul.w	r6, r6, r9
   2f692:	f5b6 5fb4 	cmp.w	r6, #5760	; 0x1680
   2f696:	dc14      	bgt.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f698:	1e8e      	subs	r6, r1, #2
   2f69a:	f018 0440 	ands.w	r4, r8, #64	; 0x40
   2f69e:	9602      	str	r6, [sp, #8]
   2f6a0:	f000 8138 	beq.w	2f914 <opus_packet_parse_impl+0x304>
   2f6a4:	b16e      	cbz	r6, 2f6c2 <opus_packet_parse_impl+0xb2>
   2f6a6:	7886      	ldrb	r6, [r0, #2]
   2f6a8:	2eff      	cmp	r6, #255	; 0xff
   2f6aa:	f1a1 0a03 	sub.w	sl, r1, #3
   2f6ae:	f100 0403 	add.w	r4, r0, #3
   2f6b2:	f000 8188 	beq.w	2f9c6 <opus_packet_parse_impl+0x3b6>
   2f6b6:	4631      	mov	r1, r6
   2f6b8:	ebba 0206 	subs.w	r2, sl, r6
   2f6bc:	9202      	str	r2, [sp, #8]
   2f6be:	f140 812b 	bpl.w	2f918 <opus_packet_parse_impl+0x308>
   2f6c2:	f06f 0c03 	mvn.w	ip, #3
   2f6c6:	4660      	mov	r0, ip
   2f6c8:	b005      	add	sp, #20
   2f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f6ce:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
   2f6d2:	f64b 3680 	movw	r6, #48000	; 0xbb80
   2f6d6:	4ccf      	ldr	r4, [pc, #828]	; (2fa14 <opus_packet_parse_impl+0x404>)
   2f6d8:	fa06 f60c 	lsl.w	r6, r6, ip
   2f6dc:	fba4 4606 	umull	r4, r6, r4, r6
   2f6e0:	09f6      	lsrs	r6, r6, #7
   2f6e2:	e7b6      	b.n	2f652 <opus_packet_parse_impl+0x42>
   2f6e4:	4641      	mov	r1, r8
   2f6e6:	f8cd 800c 	str.w	r8, [sp, #12]
   2f6ea:	f04f 0c01 	mov.w	ip, #1
   2f6ee:	46f0      	mov	r8, lr
   2f6f0:	9a01      	ldr	r2, [sp, #4]
   2f6f2:	2a00      	cmp	r2, #0
   2f6f4:	f000 80b7 	beq.w	2f866 <opus_packet_parse_impl+0x256>
   2f6f8:	f10c 4200 	add.w	r2, ip, #2147483648	; 0x80000000
   2f6fc:	3a01      	subs	r2, #1
   2f6fe:	f8cd e008 	str.w	lr, [sp, #8]
   2f702:	0052      	lsls	r2, r2, #1
   2f704:	46c6      	mov	lr, r8
   2f706:	9e02      	ldr	r6, [sp, #8]
   2f708:	eb05 0902 	add.w	r9, r5, r2
   2f70c:	2e00      	cmp	r6, #0
   2f70e:	f000 8194 	beq.w	2fa3a <opus_packet_parse_impl+0x42a>
   2f712:	f894 8000 	ldrb.w	r8, [r4]
   2f716:	f1b8 0ffb 	cmp.w	r8, #251	; 0xfb
   2f71a:	f240 8117 	bls.w	2f94c <opus_packet_parse_impl+0x33c>
   2f71e:	2e01      	cmp	r6, #1
   2f720:	f000 8182 	beq.w	2fa28 <opus_packet_parse_impl+0x418>
   2f724:	f894 b001 	ldrb.w	fp, [r4, #1]
   2f728:	f04f 0a02 	mov.w	sl, #2
   2f72c:	eb08 088b 	add.w	r8, r8, fp, lsl #2
   2f730:	f8a9 8000 	strh.w	r8, [r9]
   2f734:	46d3      	mov	fp, sl
   2f736:	eba6 060b 	sub.w	r6, r6, fp
   2f73a:	45b0      	cmp	r8, r6
   2f73c:	9601      	str	r6, [sp, #4]
   2f73e:	dcc0      	bgt.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f740:	9e03      	ldr	r6, [sp, #12]
   2f742:	4454      	add	r4, sl
   2f744:	2e00      	cmp	r6, #0
   2f746:	f000 80d0 	beq.w	2f8ea <opus_packet_parse_impl+0x2da>
   2f74a:	9e01      	ldr	r6, [sp, #4]
   2f74c:	fb0c fe08 	mul.w	lr, ip, r8
   2f750:	45b6      	cmp	lr, r6
   2f752:	dcb6      	bgt.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f754:	f1bc 0601 	subs.w	r6, ip, #1
   2f758:	d031      	beq.n	2f7be <opus_packet_parse_impl+0x1ae>
   2f75a:	2e01      	cmp	r6, #1
   2f75c:	f8a5 8000 	strh.w	r8, [r5]
   2f760:	d02d      	beq.n	2f7be <opus_packet_parse_impl+0x1ae>
   2f762:	f10c 4600 	add.w	r6, ip, #2147483648	; 0x80000000
   2f766:	3e01      	subs	r6, #1
   2f768:	0076      	lsls	r6, r6, #1
   2f76a:	f102 0e02 	add.w	lr, r2, #2
   2f76e:	4296      	cmp	r6, r2
   2f770:	bfc8      	it	gt
   2f772:	f1be 0f02 	cmpgt.w	lr, #2
   2f776:	f300 8138 	bgt.w	2f9ea <opus_packet_parse_impl+0x3da>
   2f77a:	f1ac 0203 	sub.w	r2, ip, #3
   2f77e:	2a09      	cmp	r2, #9
   2f780:	f240 8133 	bls.w	2f9ea <opus_packet_parse_impl+0x3da>
   2f784:	f9b9 a000 	ldrsh.w	sl, [r9]
   2f788:	f04f 0e00 	mov.w	lr, #0
   2f78c:	f1ac 0802 	sub.w	r8, ip, #2
   2f790:	f36a 0e0f 	bfi	lr, sl, #0, #16
   2f794:	ea4f 0658 	mov.w	r6, r8, lsr #1
   2f798:	1caa      	adds	r2, r5, #2
   2f79a:	f36a 4e1f 	bfi	lr, sl, #16, #16
   2f79e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   2f7a2:	f842 eb04 	str.w	lr, [r2], #4
   2f7a6:	42b2      	cmp	r2, r6
   2f7a8:	d1fb      	bne.n	2f7a2 <opus_packet_parse_impl+0x192>
   2f7aa:	f028 0201 	bic.w	r2, r8, #1
   2f7ae:	4542      	cmp	r2, r8
   2f7b0:	f102 0601 	add.w	r6, r2, #1
   2f7b4:	d003      	beq.n	2f7be <opus_packet_parse_impl+0x1ae>
   2f7b6:	f9b9 2000 	ldrsh.w	r2, [r9]
   2f7ba:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
   2f7be:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2f7c0:	b112      	cbz	r2, 2f7c8 <opus_packet_parse_impl+0x1b8>
   2f7c2:	4616      	mov	r6, r2
   2f7c4:	1a22      	subs	r2, r4, r0
   2f7c6:	6032      	str	r2, [r6, #0]
   2f7c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2f7ca:	2a00      	cmp	r2, #0
   2f7cc:	d056      	beq.n	2f87c <opus_packet_parse_impl+0x26c>
   2f7ce:	3a04      	subs	r2, #4
   2f7d0:	3d02      	subs	r5, #2
   2f7d2:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
   2f7d6:	f842 4f04 	str.w	r4, [r2, #4]!
   2f7da:	f935 6f02 	ldrsh.w	r6, [r5, #2]!
   2f7de:	4572      	cmp	r2, lr
   2f7e0:	4434      	add	r4, r6
   2f7e2:	d1f8      	bne.n	2f7d6 <opus_packet_parse_impl+0x1c6>
   2f7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2f7e6:	b112      	cbz	r2, 2f7ee <opus_packet_parse_impl+0x1de>
   2f7e8:	1a20      	subs	r0, r4, r0
   2f7ea:	4401      	add	r1, r0
   2f7ec:	6011      	str	r1, [r2, #0]
   2f7ee:	b103      	cbz	r3, 2f7f2 <opus_packet_parse_impl+0x1e2>
   2f7f0:	701f      	strb	r7, [r3, #0]
   2f7f2:	4660      	mov	r0, ip
   2f7f4:	b005      	add	sp, #20
   2f7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f7fa:	9e02      	ldr	r6, [sp, #8]
   2f7fc:	fbb6 f8f9 	udiv	r8, r6, r9
   2f800:	fb08 fe09 	mul.w	lr, r8, r9
   2f804:	45b6      	cmp	lr, r6
   2f806:	f47f af5c 	bne.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f80a:	f1b9 0a01 	subs.w	sl, r9, #1
   2f80e:	d02a      	beq.n	2f866 <opus_packet_parse_impl+0x256>
   2f810:	f1a9 0902 	sub.w	r9, r9, #2
   2f814:	f1b9 0f02 	cmp.w	r9, #2
   2f818:	fa0f fb88 	sxth.w	fp, r8
   2f81c:	d912      	bls.n	2f844 <opus_packet_parse_impl+0x234>
   2f81e:	9a01      	ldr	r2, [sp, #4]
   2f820:	ea4f 0e5a 	mov.w	lr, sl, lsr #1
   2f824:	f36b 020f 	bfi	r2, fp, #0, #16
   2f828:	f36b 421f 	bfi	r2, fp, #16, #16
   2f82c:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
   2f830:	462e      	mov	r6, r5
   2f832:	f846 2b04 	str.w	r2, [r6], #4
   2f836:	4576      	cmp	r6, lr
   2f838:	d1fb      	bne.n	2f832 <opus_packet_parse_impl+0x222>
   2f83a:	f02a 0201 	bic.w	r2, sl, #1
   2f83e:	4552      	cmp	r2, sl
   2f840:	9201      	str	r2, [sp, #4]
   2f842:	d010      	beq.n	2f866 <opus_packet_parse_impl+0x256>
   2f844:	9a01      	ldr	r2, [sp, #4]
   2f846:	f102 0e01 	add.w	lr, r2, #1
   2f84a:	45f2      	cmp	sl, lr
   2f84c:	f825 b012 	strh.w	fp, [r5, r2, lsl #1]
   2f850:	ea4f 0642 	mov.w	r6, r2, lsl #1
   2f854:	dd07      	ble.n	2f866 <opus_packet_parse_impl+0x256>
   2f856:	442e      	add	r6, r5
   2f858:	3202      	adds	r2, #2
   2f85a:	4592      	cmp	sl, r2
   2f85c:	f8a6 b002 	strh.w	fp, [r6, #2]
   2f860:	dd01      	ble.n	2f866 <opus_packet_parse_impl+0x256>
   2f862:	f8a6 b004 	strh.w	fp, [r6, #4]
   2f866:	f240 42fb 	movw	r2, #1275	; 0x4fb
   2f86a:	4590      	cmp	r8, r2
   2f86c:	f73f af29 	bgt.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f870:	f10c 4200 	add.w	r2, ip, #2147483648	; 0x80000000
   2f874:	3a01      	subs	r2, #1
   2f876:	f825 8012 	strh.w	r8, [r5, r2, lsl #1]
   2f87a:	e7a0      	b.n	2f7be <opus_packet_parse_impl+0x1ae>
   2f87c:	3d02      	subs	r5, #2
   2f87e:	eb05 064c 	add.w	r6, r5, ip, lsl #1
   2f882:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
   2f886:	42ae      	cmp	r6, r5
   2f888:	4414      	add	r4, r2
   2f88a:	d1fa      	bne.n	2f882 <opus_packet_parse_impl+0x272>
   2f88c:	e7aa      	b.n	2f7e4 <opus_packet_parse_impl+0x1d4>
   2f88e:	f1be 0f00 	cmp.w	lr, #0
   2f892:	f000 80ce 	beq.w	2fa32 <opus_packet_parse_impl+0x422>
   2f896:	f890 8001 	ldrb.w	r8, [r0, #1]
   2f89a:	f1b8 0ffb 	cmp.w	r8, #251	; 0xfb
   2f89e:	d94d      	bls.n	2f93c <opus_packet_parse_impl+0x32c>
   2f8a0:	f1be 0f01 	cmp.w	lr, #1
   2f8a4:	f000 80c5 	beq.w	2fa32 <opus_packet_parse_impl+0x422>
   2f8a8:	7881      	ldrb	r1, [r0, #2]
   2f8aa:	eb08 0881 	add.w	r8, r8, r1, lsl #2
   2f8ae:	f8a5 8000 	strh.w	r8, [r5]
   2f8b2:	4661      	mov	r1, ip
   2f8b4:	ebae 0e01 	sub.w	lr, lr, r1
   2f8b8:	45f0      	cmp	r8, lr
   2f8ba:	f73f af02 	bgt.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f8be:	2100      	movs	r1, #0
   2f8c0:	4464      	add	r4, ip
   2f8c2:	ebae 0808 	sub.w	r8, lr, r8
   2f8c6:	9103      	str	r1, [sp, #12]
   2f8c8:	f04f 0c02 	mov.w	ip, #2
   2f8cc:	e710      	b.n	2f6f0 <opus_packet_parse_impl+0xe0>
   2f8ce:	9a01      	ldr	r2, [sp, #4]
   2f8d0:	b9c2      	cbnz	r2, 2f904 <opus_packet_parse_impl+0x2f4>
   2f8d2:	f01e 0f01 	tst.w	lr, #1
   2f8d6:	f47f aef4 	bne.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f8da:	ea4f 086e 	mov.w	r8, lr, asr #1
   2f8de:	f8a5 8000 	strh.w	r8, [r5]
   2f8e2:	4611      	mov	r1, r2
   2f8e4:	f04f 0c02 	mov.w	ip, #2
   2f8e8:	e7bd      	b.n	2f866 <opus_packet_parse_impl+0x256>
   2f8ea:	44d8      	add	r8, fp
   2f8ec:	45f0      	cmp	r8, lr
   2f8ee:	f77f af66 	ble.w	2f7be <opus_packet_parse_impl+0x1ae>
   2f8f2:	e6e6      	b.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2f8f4:	f017 0f08 	tst.w	r7, #8
   2f8f8:	bf14      	ite	ne
   2f8fa:	f44f 7670 	movne.w	r6, #960	; 0x3c0
   2f8fe:	f44f 76f0 	moveq.w	r6, #480	; 0x1e0
   2f902:	e6a6      	b.n	2f652 <opus_packet_parse_impl+0x42>
   2f904:	2202      	movs	r2, #2
   2f906:	f8cd c00c 	str.w	ip, [sp, #12]
   2f90a:	f8cd e008 	str.w	lr, [sp, #8]
   2f90e:	4694      	mov	ip, r2
   2f910:	2100      	movs	r1, #0
   2f912:	e6f8      	b.n	2f706 <opus_packet_parse_impl+0xf6>
   2f914:	4621      	mov	r1, r4
   2f916:	1c84      	adds	r4, r0, #2
   2f918:	fa4f f888 	sxtb.w	r8, r8
   2f91c:	ea6f 0608 	mvn.w	r6, r8
   2f920:	0ff6      	lsrs	r6, r6, #31
   2f922:	f1b8 0f00 	cmp.w	r8, #0
   2f926:	9603      	str	r6, [sp, #12]
   2f928:	db1b      	blt.n	2f962 <opus_packet_parse_impl+0x352>
   2f92a:	9a01      	ldr	r2, [sp, #4]
   2f92c:	2a00      	cmp	r2, #0
   2f92e:	f43f af64 	beq.w	2f7fa <opus_packet_parse_impl+0x1ea>
   2f932:	f109 4200 	add.w	r2, r9, #2147483648	; 0x80000000
   2f936:	3a01      	subs	r2, #1
   2f938:	0052      	lsls	r2, r2, #1
   2f93a:	e6e4      	b.n	2f706 <opus_packet_parse_impl+0xf6>
   2f93c:	fa0f f888 	sxth.w	r8, r8
   2f940:	f04f 0c01 	mov.w	ip, #1
   2f944:	f8a5 8000 	strh.w	r8, [r5]
   2f948:	4661      	mov	r1, ip
   2f94a:	e7b3      	b.n	2f8b4 <opus_packet_parse_impl+0x2a4>
   2f94c:	fa0f f888 	sxth.w	r8, r8
   2f950:	f04f 0a01 	mov.w	sl, #1
   2f954:	f8a9 8000 	strh.w	r8, [r9]
   2f958:	46d3      	mov	fp, sl
   2f95a:	e6ec      	b.n	2f736 <opus_packet_parse_impl+0x126>
   2f95c:	f44f 6634 	mov.w	r6, #2880	; 0xb40
   2f960:	e677      	b.n	2f652 <opus_packet_parse_impl+0x42>
   2f962:	f1b9 0f01 	cmp.w	r9, #1
   2f966:	d06c      	beq.n	2fa42 <opus_packet_parse_impl+0x432>
   2f968:	9a02      	ldr	r2, [sp, #8]
   2f96a:	9102      	str	r1, [sp, #8]
   2f96c:	f1a5 0e02 	sub.w	lr, r5, #2
   2f970:	eb0e 0649 	add.w	r6, lr, r9, lsl #1
   2f974:	4690      	mov	r8, r2
   2f976:	46b3      	mov	fp, r6
   2f978:	46aa      	mov	sl, r5
   2f97a:	4616      	mov	r6, r2
   2f97c:	9a01      	ldr	r2, [sp, #4]
   2f97e:	e015      	b.n	2f9ac <opus_packet_parse_impl+0x39c>
   2f980:	2e01      	cmp	r6, #1
   2f982:	d049      	beq.n	2fa18 <opus_packet_parse_impl+0x408>
   2f984:	f894 e001 	ldrb.w	lr, [r4, #1]
   2f988:	eb01 018e 	add.w	r1, r1, lr, lsl #2
   2f98c:	f8aa 1000 	strh.w	r1, [sl]
   2f990:	46ce      	mov	lr, r9
   2f992:	eba6 060e 	sub.w	r6, r6, lr
   2f996:	42b1      	cmp	r1, r6
   2f998:	448e      	add	lr, r1
   2f99a:	f10a 0a02 	add.w	sl, sl, #2
   2f99e:	444c      	add	r4, r9
   2f9a0:	eba8 080e 	sub.w	r8, r8, lr
   2f9a4:	f73f ae8d 	bgt.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f9a8:	45d3      	cmp	fp, sl
   2f9aa:	d02a      	beq.n	2fa02 <opus_packet_parse_impl+0x3f2>
   2f9ac:	f04f 0902 	mov.w	r9, #2
   2f9b0:	b396      	cbz	r6, 2fa18 <opus_packet_parse_impl+0x408>
   2f9b2:	7821      	ldrb	r1, [r4, #0]
   2f9b4:	29fb      	cmp	r1, #251	; 0xfb
   2f9b6:	d8e3      	bhi.n	2f980 <opus_packet_parse_impl+0x370>
   2f9b8:	b209      	sxth	r1, r1
   2f9ba:	f04f 0901 	mov.w	r9, #1
   2f9be:	f8aa 1000 	strh.w	r1, [sl]
   2f9c2:	46ce      	mov	lr, r9
   2f9c4:	e7e5      	b.n	2f992 <opus_packet_parse_impl+0x382>
   2f9c6:	9a01      	ldr	r2, [sp, #4]
   2f9c8:	2100      	movs	r1, #0
   2f9ca:	f1aa 06fe 	sub.w	r6, sl, #254	; 0xfe
   2f9ce:	2e00      	cmp	r6, #0
   2f9d0:	f101 01fe 	add.w	r1, r1, #254	; 0xfe
   2f9d4:	f1aa 0aff 	sub.w	sl, sl, #255	; 0xff
   2f9d8:	f77f ae73 	ble.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2f9dc:	f814 6b01 	ldrb.w	r6, [r4], #1
   2f9e0:	2eff      	cmp	r6, #255	; 0xff
   2f9e2:	d0f2      	beq.n	2f9ca <opus_packet_parse_impl+0x3ba>
   2f9e4:	9201      	str	r2, [sp, #4]
   2f9e6:	4431      	add	r1, r6
   2f9e8:	e666      	b.n	2f6b8 <opus_packet_parse_impl+0xa8>
   2f9ea:	f1a5 0e04 	sub.w	lr, r5, #4
   2f9ee:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
   2f9f2:	462a      	mov	r2, r5
   2f9f4:	f9b9 6000 	ldrsh.w	r6, [r9]
   2f9f8:	f822 6f02 	strh.w	r6, [r2, #2]!
   2f9fc:	4596      	cmp	lr, r2
   2f9fe:	d1f9      	bne.n	2f9f4 <opus_packet_parse_impl+0x3e4>
   2fa00:	e6dd      	b.n	2f7be <opus_packet_parse_impl+0x1ae>
   2fa02:	f1b8 0f00 	cmp.w	r8, #0
   2fa06:	9902      	ldr	r1, [sp, #8]
   2fa08:	9201      	str	r2, [sp, #4]
   2fa0a:	f6ff ae5a 	blt.w	2f6c2 <opus_packet_parse_impl+0xb2>
   2fa0e:	46b6      	mov	lr, r6
   2fa10:	e66e      	b.n	2f6f0 <opus_packet_parse_impl+0xe0>
   2fa12:	bf00      	nop
   2fa14:	51eb851f 	.word	0x51eb851f
   2fa18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2fa1c:	f8aa 3000 	strh.w	r3, [sl]
   2fa20:	e64f      	b.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2fa22:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2fa26:	e6e4      	b.n	2f7f2 <opus_packet_parse_impl+0x1e2>
   2fa28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2fa2c:	f8a9 3000 	strh.w	r3, [r9]
   2fa30:	e647      	b.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2fa32:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2fa36:	802b      	strh	r3, [r5, #0]
   2fa38:	e643      	b.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2fa3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2fa3e:	52ab      	strh	r3, [r5, r2]
   2fa40:	e63f      	b.n	2f6c2 <opus_packet_parse_impl+0xb2>
   2fa42:	f8dd e008 	ldr.w	lr, [sp, #8]
   2fa46:	46f0      	mov	r8, lr
   2fa48:	e652      	b.n	2f6f0 <opus_packet_parse_impl+0xe0>
   2fa4a:	bf00      	nop

0002fa4c <deinterleave_hadamard>:
   2fa4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa50:	460e      	mov	r6, r1
   2fa52:	af00      	add	r7, sp, #0
   2fa54:	4615      	mov	r5, r2
   2fa56:	4604      	mov	r4, r0
   2fa58:	4698      	mov	r8, r3
   2fa5a:	f7f7 f867 	bl	26b2c <save_stack>
   2fa5e:	fb05 f206 	mul.w	r2, r5, r6
   2fa62:	0092      	lsls	r2, r2, #2
   2fa64:	1dd1      	adds	r1, r2, #7
   2fa66:	f021 0107 	bic.w	r1, r1, #7
   2fa6a:	ebad 0d01 	sub.w	sp, sp, r1
   2fa6e:	4669      	mov	r1, sp
   2fa70:	f1b8 0f00 	cmp.w	r8, #0
   2fa74:	d12a      	bne.n	2facc <deinterleave_hadamard+0x80>
   2fa76:	2d00      	cmp	r5, #0
   2fa78:	dd20      	ble.n	2fabc <deinterleave_hadamard+0x70>
   2fa7a:	2e00      	cmp	r6, #0
   2fa7c:	dd1e      	ble.n	2fabc <deinterleave_hadamard+0x70>
   2fa7e:	ebc6 7986 	rsb	r9, r6, r6, lsl #30
   2fa82:	ebc6 7846 	rsb	r8, r6, r6, lsl #29
   2fa86:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   2fa8a:	eb04 0a0c 	add.w	sl, r4, ip
   2fa8e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   2fa92:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   2fa96:	eb01 0686 	add.w	r6, r1, r6, lsl #2
   2fa9a:	46a6      	mov	lr, r4
   2fa9c:	eb06 0b09 	add.w	fp, r6, r9
   2faa0:	4658      	mov	r0, fp
   2faa2:	4673      	mov	r3, lr
   2faa4:	681d      	ldr	r5, [r3, #0]
   2faa6:	f840 5b04 	str.w	r5, [r0], #4
   2faaa:	42b0      	cmp	r0, r6
   2faac:	4463      	add	r3, ip
   2faae:	d1f9      	bne.n	2faa4 <deinterleave_hadamard+0x58>
   2fab0:	f10e 0e04 	add.w	lr, lr, #4
   2fab4:	45d6      	cmp	lr, sl
   2fab6:	ebab 0608 	sub.w	r6, fp, r8
   2faba:	d1ef      	bne.n	2fa9c <deinterleave_hadamard+0x50>
   2fabc:	4620      	mov	r0, r4
   2fabe:	f7dc fb4f 	bl	c160 <memcpy>
   2fac2:	f7f7 f845 	bl	26b50 <restore_stack>
   2fac6:	46bd      	mov	sp, r7
   2fac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2facc:	2d00      	cmp	r5, #0
   2face:	ddf5      	ble.n	2fabc <deinterleave_hadamard+0x70>
   2fad0:	2e00      	cmp	r6, #0
   2fad2:	ddf3      	ble.n	2fabc <deinterleave_hadamard+0x70>
   2fad4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   2fad8:	3d03      	subs	r5, #3
   2fada:	00ad      	lsls	r5, r5, #2
   2fadc:	4b12      	ldr	r3, [pc, #72]	; (2fb28 <deinterleave_hadamard+0xdc>)
   2fade:	f105 0c0c 	add.w	ip, r5, #12
   2fae2:	eb03 0805 	add.w	r8, r3, r5
   2fae6:	eb0c 0904 	add.w	r9, ip, r4
   2faea:	46a6      	mov	lr, r4
   2faec:	f858 3f04 	ldr.w	r3, [r8, #4]!
   2faf0:	fb03 f306 	mul.w	r3, r3, r6
   2faf4:	eb06 0a03 	add.w	sl, r6, r3
   2faf8:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
   2fafc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2fb00:	4670      	mov	r0, lr
   2fb02:	6805      	ldr	r5, [r0, #0]
   2fb04:	f843 5b04 	str.w	r5, [r3], #4
   2fb08:	459a      	cmp	sl, r3
   2fb0a:	4460      	add	r0, ip
   2fb0c:	d1f9      	bne.n	2fb02 <deinterleave_hadamard+0xb6>
   2fb0e:	f10e 0e04 	add.w	lr, lr, #4
   2fb12:	45f1      	cmp	r9, lr
   2fb14:	d1ea      	bne.n	2faec <deinterleave_hadamard+0xa0>
   2fb16:	4620      	mov	r0, r4
   2fb18:	f7dc fb22 	bl	c160 <memcpy>
   2fb1c:	f7f7 f818 	bl	26b50 <restore_stack>
   2fb20:	46bd      	mov	sp, r7
   2fb22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fb26:	bf00      	nop
   2fb28:	00041428 	.word	0x00041428

0002fb2c <interleave_hadamard>:
   2fb2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb30:	460e      	mov	r6, r1
   2fb32:	af00      	add	r7, sp, #0
   2fb34:	4615      	mov	r5, r2
   2fb36:	4604      	mov	r4, r0
   2fb38:	4698      	mov	r8, r3
   2fb3a:	f7f6 fff7 	bl	26b2c <save_stack>
   2fb3e:	fb05 f206 	mul.w	r2, r5, r6
   2fb42:	0092      	lsls	r2, r2, #2
   2fb44:	1dd1      	adds	r1, r2, #7
   2fb46:	f021 0107 	bic.w	r1, r1, #7
   2fb4a:	ebad 0d01 	sub.w	sp, sp, r1
   2fb4e:	4669      	mov	r1, sp
   2fb50:	f1b8 0f00 	cmp.w	r8, #0
   2fb54:	d12a      	bne.n	2fbac <interleave_hadamard+0x80>
   2fb56:	2d00      	cmp	r5, #0
   2fb58:	dd20      	ble.n	2fb9c <interleave_hadamard+0x70>
   2fb5a:	2e00      	cmp	r6, #0
   2fb5c:	dd1e      	ble.n	2fb9c <interleave_hadamard+0x70>
   2fb5e:	ebc6 7986 	rsb	r9, r6, r6, lsl #30
   2fb62:	ebc6 7846 	rsb	r8, r6, r6, lsl #29
   2fb66:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   2fb6a:	eb01 0a0c 	add.w	sl, r1, ip
   2fb6e:	ea4f 0989 	mov.w	r9, r9, lsl #2
   2fb72:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   2fb76:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   2fb7a:	468e      	mov	lr, r1
   2fb7c:	eb06 0b09 	add.w	fp, r6, r9
   2fb80:	4658      	mov	r0, fp
   2fb82:	4673      	mov	r3, lr
   2fb84:	f850 5b04 	ldr.w	r5, [r0], #4
   2fb88:	601d      	str	r5, [r3, #0]
   2fb8a:	42b0      	cmp	r0, r6
   2fb8c:	4463      	add	r3, ip
   2fb8e:	d1f9      	bne.n	2fb84 <interleave_hadamard+0x58>
   2fb90:	f10e 0e04 	add.w	lr, lr, #4
   2fb94:	45d6      	cmp	lr, sl
   2fb96:	ebab 0608 	sub.w	r6, fp, r8
   2fb9a:	d1ef      	bne.n	2fb7c <interleave_hadamard+0x50>
   2fb9c:	4620      	mov	r0, r4
   2fb9e:	f7dc fadf 	bl	c160 <memcpy>
   2fba2:	f7f6 ffd5 	bl	26b50 <restore_stack>
   2fba6:	46bd      	mov	sp, r7
   2fba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fbac:	2d00      	cmp	r5, #0
   2fbae:	ddf5      	ble.n	2fb9c <interleave_hadamard+0x70>
   2fbb0:	2e00      	cmp	r6, #0
   2fbb2:	ddf3      	ble.n	2fb9c <interleave_hadamard+0x70>
   2fbb4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   2fbb8:	3d03      	subs	r5, #3
   2fbba:	00ad      	lsls	r5, r5, #2
   2fbbc:	4b12      	ldr	r3, [pc, #72]	; (2fc08 <interleave_hadamard+0xdc>)
   2fbbe:	f105 0c0c 	add.w	ip, r5, #12
   2fbc2:	eb03 0805 	add.w	r8, r3, r5
   2fbc6:	eb0c 0901 	add.w	r9, ip, r1
   2fbca:	468e      	mov	lr, r1
   2fbcc:	f858 3f04 	ldr.w	r3, [r8, #4]!
   2fbd0:	fb03 f306 	mul.w	r3, r3, r6
   2fbd4:	eb06 0a03 	add.w	sl, r6, r3
   2fbd8:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
   2fbdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   2fbe0:	4670      	mov	r0, lr
   2fbe2:	f853 5b04 	ldr.w	r5, [r3], #4
   2fbe6:	6005      	str	r5, [r0, #0]
   2fbe8:	4553      	cmp	r3, sl
   2fbea:	4460      	add	r0, ip
   2fbec:	d1f9      	bne.n	2fbe2 <interleave_hadamard+0xb6>
   2fbee:	f10e 0e04 	add.w	lr, lr, #4
   2fbf2:	45f1      	cmp	r9, lr
   2fbf4:	d1ea      	bne.n	2fbcc <interleave_hadamard+0xa0>
   2fbf6:	4620      	mov	r0, r4
   2fbf8:	f7dc fab2 	bl	c160 <memcpy>
   2fbfc:	f7f6 ffa8 	bl	26b50 <restore_stack>
   2fc00:	46bd      	mov	sp, r7
   2fc02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc06:	bf00      	nop
   2fc08:	00041428 	.word	0x00041428

0002fc0c <quant_partition>:
   2fc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc10:	ed2d 8b04 	vpush	{d8-d9}
   2fc14:	e9d0 5902 	ldrd	r5, r9, [r0, #8]
   2fc18:	b08f      	sub	sp, #60	; 0x3c
   2fc1a:	4604      	mov	r4, r0
   2fc1c:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
   2fc20:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2fc22:	68ae      	ldr	r6, [r5, #8]
   2fc24:	9006      	str	r0, [sp, #24]
   2fc26:	69e0      	ldr	r0, [r4, #28]
   2fc28:	9007      	str	r0, [sp, #28]
   2fc2a:	fb0c 6606 	mla	r6, ip, r6, r6
   2fc2e:	981c      	ldr	r0, [sp, #112]	; 0x70
   2fc30:	9005      	str	r0, [sp, #20]
   2fc32:	444e      	add	r6, r9
   2fc34:	981d      	ldr	r0, [sp, #116]	; 0x74
   2fc36:	9009      	str	r0, [sp, #36]	; 0x24
   2fc38:	468b      	mov	fp, r1
   2fc3a:	9906      	ldr	r1, [sp, #24]
   2fc3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2fc3e:	6e6f      	ldr	r7, [r5, #100]	; 0x64
   2fc40:	9008      	str	r0, [sp, #32]
   2fc42:	f931 0016 	ldrsh.w	r0, [r1, r6, lsl #1]
   2fc46:	f8d4 e000 	ldr.w	lr, [r4]
   2fc4a:	f8d4 8014 	ldr.w	r8, [r4, #20]
   2fc4e:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   2fc52:	461e      	mov	r6, r3
   2fc54:	4611      	mov	r1, r2
   2fc56:	eeb0 8a40 	vmov.f32	s16, s0
   2fc5a:	eb07 0a00 	add.w	sl, r7, r0
   2fc5e:	5c3b      	ldrb	r3, [r7, r0]
   2fc60:	f000 80a5 	beq.w	2fdae <quant_partition+0x1a2>
   2fc64:	f81a 2003 	ldrb.w	r2, [sl, r3]
   2fc68:	320c      	adds	r2, #12
   2fc6a:	42b2      	cmp	r2, r6
   2fc6c:	f280 809f 	bge.w	2fdae <quant_partition+0x1a2>
   2fc70:	2902      	cmp	r1, #2
   2fc72:	f340 809c 	ble.w	2fdae <quant_partition+0x1a2>
   2fc76:	ea4f 0a61 	mov.w	sl, r1, asr #1
   2fc7a:	9805      	ldr	r0, [sp, #20]
   2fc7c:	ea4f 038a 	mov.w	r3, sl, lsl #2
   2fc80:	930c      	str	r3, [sp, #48]	; 0x30
   2fc82:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   2fc86:	445b      	add	r3, fp
   2fc88:	2801      	cmp	r0, #1
   2fc8a:	920a      	str	r2, [sp, #40]	; 0x28
   2fc8c:	930b      	str	r3, [sp, #44]	; 0x2c
   2fc8e:	d103      	bne.n	2fc98 <quant_partition+0x8c>
   2fc90:	9b08      	ldr	r3, [sp, #32]
   2fc92:	f363 035f 	bfi	r3, r3, #1, #31
   2fc96:	9308      	str	r3, [sp, #32]
   2fc98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   2fc9a:	f933 2019 	ldrsh.w	r2, [r3, r9, lsl #1]
   2fc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fca0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2fca4:	ea4f 034a 	mov.w	r3, sl, lsl #1
   2fca8:	1ab1      	subs	r1, r6, r2
   2fcaa:	1057      	asrs	r7, r2, #1
   2fcac:	1e5a      	subs	r2, r3, #1
   2fcae:	9b05      	ldr	r3, [sp, #20]
   2fcb0:	3f04      	subs	r7, #4
   2fcb2:	f1a1 001f 	sub.w	r0, r1, #31
   2fcb6:	1c5d      	adds	r5, r3, #1
   2fcb8:	fb02 6307 	mla	r3, r2, r7, r6
   2fcbc:	fb93 f3f2 	sdiv	r3, r3, r2
   2fcc0:	4283      	cmp	r3, r0
   2fcc2:	bfa8      	it	ge
   2fcc4:	f1a1 0320 	subge.w	r3, r1, #32
   2fcc8:	2b03      	cmp	r3, #3
   2fcca:	ea4f 0965 	mov.w	r9, r5, asr #1
   2fcce:	f300 8181 	bgt.w	2ffd4 <quant_partition+0x3c8>
   2fcd2:	f1be 0f00 	cmp.w	lr, #0
   2fcd6:	f040 838c 	bne.w	303f2 <quant_partition+0x7e6>
   2fcda:	9d07      	ldr	r5, [sp, #28]
   2fcdc:	4628      	mov	r0, r5
   2fcde:	f7fc fd09 	bl	2c6f4 <ec_tell_frac>
   2fce2:	4680      	mov	r8, r0
   2fce4:	4628      	mov	r0, r5
   2fce6:	f7fc fd05 	bl	2c6f4 <ec_tell_frac>
   2fcea:	eba0 0008 	sub.w	r0, r0, r8
   2fcee:	1a36      	subs	r6, r6, r0
   2fcf0:	2301      	movs	r3, #1
   2fcf2:	9a08      	ldr	r2, [sp, #32]
   2fcf4:	eddf 8ab1 	vldr	s17, [pc, #708]	; 2ffbc <quant_partition+0x3b0>
   2fcf8:	ed9f 9ab1 	vldr	s18, [pc, #708]	; 2ffc0 <quant_partition+0x3b4>
   2fcfc:	fa03 f309 	lsl.w	r3, r3, r9
   2fd00:	3b01      	subs	r3, #1
   2fd02:	401a      	ands	r2, r3
   2fd04:	9208      	str	r2, [sp, #32]
   2fd06:	4baf      	ldr	r3, [pc, #700]	; (2ffc4 <quant_partition+0x3b8>)
   2fd08:	2200      	movs	r2, #0
   2fd0a:	9206      	str	r2, [sp, #24]
   2fd0c:	1af3      	subs	r3, r6, r3
   2fd0e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   2fd12:	105f      	asrs	r7, r3, #1
   2fd14:	6a23      	ldr	r3, [r4, #32]
   2fd16:	42b7      	cmp	r7, r6
   2fd18:	bfa8      	it	ge
   2fd1a:	4637      	movge	r7, r6
   2fd1c:	eba3 0800 	sub.w	r8, r3, r0
   2fd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fd22:	f8c4 8020 	str.w	r8, [r4, #32]
   2fd26:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   2fd2a:	1bf6      	subs	r6, r6, r7
   2fd2c:	2b00      	cmp	r3, #0
   2fd2e:	f000 8300 	beq.w	30332 <quant_partition+0x726>
   2fd32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2fd34:	441a      	add	r2, r3
   2fd36:	9207      	str	r2, [sp, #28]
   2fd38:	9b05      	ldr	r3, [sp, #20]
   2fd3a:	105d      	asrs	r5, r3, #1
   2fd3c:	9b08      	ldr	r3, [sp, #32]
   2fd3e:	42b7      	cmp	r7, r6
   2fd40:	fa43 f209 	asr.w	r2, r3, r9
   2fd44:	9205      	str	r2, [sp, #20]
   2fd46:	f2c0 810b 	blt.w	2ff60 <quant_partition+0x354>
   2fd4a:	9303      	str	r3, [sp, #12]
   2fd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fd4e:	9302      	str	r3, [sp, #8]
   2fd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fd52:	4659      	mov	r1, fp
   2fd54:	e9cd 9300 	strd	r9, r3, [sp]
   2fd58:	ee28 0a28 	vmul.f32	s0, s16, s17
   2fd5c:	463b      	mov	r3, r7
   2fd5e:	4652      	mov	r2, sl
   2fd60:	4620      	mov	r0, r4
   2fd62:	f7ff ff53 	bl	2fc0c <quant_partition>
   2fd66:	6a23      	ldr	r3, [r4, #32]
   2fd68:	eba8 0303 	sub.w	r3, r8, r3
   2fd6c:	1aff      	subs	r7, r7, r3
   2fd6e:	2f18      	cmp	r7, #24
   2fd70:	4683      	mov	fp, r0
   2fd72:	dd03      	ble.n	2fd7c <quant_partition+0x170>
   2fd74:	9b06      	ldr	r3, [sp, #24]
   2fd76:	b10b      	cbz	r3, 2fd7c <quant_partition+0x170>
   2fd78:	3f18      	subs	r7, #24
   2fd7a:	443e      	add	r6, r7
   2fd7c:	9b05      	ldr	r3, [sp, #20]
   2fd7e:	9303      	str	r3, [sp, #12]
   2fd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2fd82:	9302      	str	r3, [sp, #8]
   2fd84:	9b07      	ldr	r3, [sp, #28]
   2fd86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2fd88:	e9cd 9300 	strd	r9, r3, [sp]
   2fd8c:	ee29 0a08 	vmul.f32	s0, s18, s16
   2fd90:	4633      	mov	r3, r6
   2fd92:	4652      	mov	r2, sl
   2fd94:	4620      	mov	r0, r4
   2fd96:	f7ff ff39 	bl	2fc0c <quant_partition>
   2fd9a:	fa00 f505 	lsl.w	r5, r0, r5
   2fd9e:	ea45 050b 	orr.w	r5, r5, fp
   2fda2:	4628      	mov	r0, r5
   2fda4:	b00f      	add	sp, #60	; 0x3c
   2fda6:	ecbd 8b04 	vpop	{d8-d9}
   2fdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fdae:	f103 0c01 	add.w	ip, r3, #1
   2fdb2:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   2fdb6:	1e75      	subs	r5, r6, #1
   2fdb8:	f81a 200c 	ldrb.w	r2, [sl, ip]
   2fdbc:	42aa      	cmp	r2, r5
   2fdbe:	bfa4      	itt	ge
   2fdc0:	4663      	movge	r3, ip
   2fdc2:	f04f 0c00 	movge.w	ip, #0
   2fdc6:	eb0c 0203 	add.w	r2, ip, r3
   2fdca:	3201      	adds	r2, #1
   2fdcc:	1052      	asrs	r2, r2, #1
   2fdce:	f81a 9002 	ldrb.w	r9, [sl, r2]
   2fdd2:	45a9      	cmp	r9, r5
   2fdd4:	bfa4      	itt	ge
   2fdd6:	4613      	movge	r3, r2
   2fdd8:	4662      	movge	r2, ip
   2fdda:	eb02 0c03 	add.w	ip, r2, r3
   2fdde:	f10c 0c01 	add.w	ip, ip, #1
   2fde2:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   2fde6:	f81a 900c 	ldrb.w	r9, [sl, ip]
   2fdea:	454d      	cmp	r5, r9
   2fdec:	bfdc      	itt	le
   2fdee:	4663      	movle	r3, ip
   2fdf0:	4694      	movle	ip, r2
   2fdf2:	eb03 020c 	add.w	r2, r3, ip
   2fdf6:	3201      	adds	r2, #1
   2fdf8:	1052      	asrs	r2, r2, #1
   2fdfa:	f81a 9002 	ldrb.w	r9, [sl, r2]
   2fdfe:	454d      	cmp	r5, r9
   2fe00:	bfdc      	itt	le
   2fe02:	4613      	movle	r3, r2
   2fe04:	4662      	movle	r2, ip
   2fe06:	eb03 0c02 	add.w	ip, r3, r2
   2fe0a:	f10c 0c01 	add.w	ip, ip, #1
   2fe0e:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   2fe12:	f81a 900c 	ldrb.w	r9, [sl, ip]
   2fe16:	454d      	cmp	r5, r9
   2fe18:	bfdc      	itt	le
   2fe1a:	4663      	movle	r3, ip
   2fe1c:	4694      	movle	ip, r2
   2fe1e:	eb03 020c 	add.w	r2, r3, ip
   2fe22:	3201      	adds	r2, #1
   2fe24:	1052      	asrs	r2, r2, #1
   2fe26:	f81a 9002 	ldrb.w	r9, [sl, r2]
   2fe2a:	454d      	cmp	r5, r9
   2fe2c:	bfdc      	itt	le
   2fe2e:	4613      	movle	r3, r2
   2fe30:	4662      	movle	r2, ip
   2fe32:	f81a c003 	ldrb.w	ip, [sl, r3]
   2fe36:	ebac 0c05 	sub.w	ip, ip, r5
   2fe3a:	2a00      	cmp	r2, #0
   2fe3c:	d039      	beq.n	2feb2 <quant_partition+0x2a6>
   2fe3e:	f81a 6002 	ldrb.w	r6, [sl, r2]
   2fe42:	1bad      	subs	r5, r5, r6
   2fe44:	45ac      	cmp	ip, r5
   2fe46:	4616      	mov	r6, r2
   2fe48:	db69      	blt.n	2ff1e <quant_partition+0x312>
   2fe4a:	f81a 5006 	ldrb.w	r5, [sl, r6]
   2fe4e:	6a23      	ldr	r3, [r4, #32]
   2fe50:	3501      	adds	r5, #1
   2fe52:	1b5b      	subs	r3, r3, r5
   2fe54:	2b00      	cmp	r3, #0
   2fe56:	6223      	str	r3, [r4, #32]
   2fe58:	da0c      	bge.n	2fe74 <quant_partition+0x268>
   2fe5a:	4410      	add	r0, r2
   2fe5c:	4407      	add	r7, r0
   2fe5e:	442b      	add	r3, r5
   2fe60:	3a01      	subs	r2, #1
   2fe62:	6223      	str	r3, [r4, #32]
   2fe64:	d027      	beq.n	2feb6 <quant_partition+0x2aa>
   2fe66:	f817 5d01 	ldrb.w	r5, [r7, #-1]!
   2fe6a:	3501      	adds	r5, #1
   2fe6c:	1b5b      	subs	r3, r3, r5
   2fe6e:	2b00      	cmp	r3, #0
   2fe70:	6223      	str	r3, [r4, #32]
   2fe72:	dbf4      	blt.n	2fe5e <quant_partition+0x252>
   2fe74:	2a07      	cmp	r2, #7
   2fe76:	dd06      	ble.n	2fe86 <quant_partition+0x27a>
   2fe78:	f002 0307 	and.w	r3, r2, #7
   2fe7c:	10d2      	asrs	r2, r2, #3
   2fe7e:	3308      	adds	r3, #8
   2fe80:	3a01      	subs	r2, #1
   2fe82:	fa03 f202 	lsl.w	r2, r3, r2
   2fe86:	f1be 0f00 	cmp.w	lr, #0
   2fe8a:	d04d      	beq.n	2ff28 <quant_partition+0x31c>
   2fe8c:	9b07      	ldr	r3, [sp, #28]
   2fe8e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   2fe90:	6864      	ldr	r4, [r4, #4]
   2fe92:	931d      	str	r3, [sp, #116]	; 0x74
   2fe94:	9b05      	ldr	r3, [sp, #20]
   2fe96:	931c      	str	r3, [sp, #112]	; 0x70
   2fe98:	eeb0 0a48 	vmov.f32	s0, s16
   2fe9c:	4643      	mov	r3, r8
   2fe9e:	4658      	mov	r0, fp
   2fea0:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
   2fea4:	b00f      	add	sp, #60	; 0x3c
   2fea6:	ecbd 8b04 	vpop	{d8-d9}
   2feaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2feae:	f005 b859 	b.w	34f64 <alg_quant>
   2feb2:	45b4      	cmp	ip, r6
   2feb4:	db33      	blt.n	2ff1e <quant_partition+0x312>
   2feb6:	6865      	ldr	r5, [r4, #4]
   2feb8:	2d00      	cmp	r5, #0
   2feba:	f43f af72 	beq.w	2fda2 <quant_partition+0x196>
   2febe:	9b05      	ldr	r3, [sp, #20]
   2fec0:	9a08      	ldr	r2, [sp, #32]
   2fec2:	2501      	movs	r5, #1
   2fec4:	409d      	lsls	r5, r3
   2fec6:	1e6b      	subs	r3, r5, #1
   2fec8:	ea12 0503 	ands.w	r5, r2, r3
   2fecc:	d03b      	beq.n	2ff46 <quant_partition+0x33a>
   2fece:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2fed0:	2a00      	cmp	r2, #0
   2fed2:	f000 8235 	beq.w	30340 <quant_partition+0x734>
   2fed6:	2900      	cmp	r1, #0
   2fed8:	dd15      	ble.n	2ff06 <quant_partition+0x2fa>
   2feda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2fedc:	4f3a      	ldr	r7, [pc, #232]	; (2ffc8 <quant_partition+0x3bc>)
   2fede:	4e3b      	ldr	r6, [pc, #236]	; (2ffcc <quant_partition+0x3c0>)
   2fee0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 2ffd0 <quant_partition+0x3c4>
   2fee4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
   2fee8:	4658      	mov	r0, fp
   2feea:	fb07 6303 	mla	r3, r7, r3, r6
   2feee:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   2fef2:	ecf2 7a01 	vldmia	r2!, {s15}
   2fef6:	d12c      	bne.n	2ff52 <quant_partition+0x346>
   2fef8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2fefc:	4594      	cmp	ip, r2
   2fefe:	ece0 7a01 	vstmia	r0!, {s15}
   2ff02:	d1f2      	bne.n	2feea <quant_partition+0x2de>
   2ff04:	62a3      	str	r3, [r4, #40]	; 0x28
   2ff06:	4658      	mov	r0, fp
   2ff08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2ff0a:	eeb0 0a48 	vmov.f32	s0, s16
   2ff0e:	f005 fbc9 	bl	356a4 <renormalise_vector>
   2ff12:	4628      	mov	r0, r5
   2ff14:	b00f      	add	sp, #60	; 0x3c
   2ff16:	ecbd 8b04 	vpop	{d8-d9}
   2ff1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff1e:	2b00      	cmp	r3, #0
   2ff20:	d0c9      	beq.n	2feb6 <quant_partition+0x2aa>
   2ff22:	461e      	mov	r6, r3
   2ff24:	461a      	mov	r2, r3
   2ff26:	e790      	b.n	2fe4a <quant_partition+0x23e>
   2ff28:	9b07      	ldr	r3, [sp, #28]
   2ff2a:	931d      	str	r3, [sp, #116]	; 0x74
   2ff2c:	9b05      	ldr	r3, [sp, #20]
   2ff2e:	931c      	str	r3, [sp, #112]	; 0x70
   2ff30:	eeb0 0a48 	vmov.f32	s0, s16
   2ff34:	4643      	mov	r3, r8
   2ff36:	4658      	mov	r0, fp
   2ff38:	b00f      	add	sp, #60	; 0x3c
   2ff3a:	ecbd 8b04 	vpop	{d8-d9}
   2ff3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff42:	f005 bae5 	b.w	35510 <alg_unquant>
   2ff46:	008a      	lsls	r2, r1, #2
   2ff48:	4658      	mov	r0, fp
   2ff4a:	4629      	mov	r1, r5
   2ff4c:	f7dc fa06 	bl	c35c <memset>
   2ff50:	e727      	b.n	2fda2 <quant_partition+0x196>
   2ff52:	ee77 7a87 	vadd.f32	s15, s15, s14
   2ff56:	4562      	cmp	r2, ip
   2ff58:	ece0 7a01 	vstmia	r0!, {s15}
   2ff5c:	d1c5      	bne.n	2feea <quant_partition+0x2de>
   2ff5e:	e7d1      	b.n	2ff04 <quant_partition+0x2f8>
   2ff60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ff62:	9302      	str	r3, [sp, #8]
   2ff64:	9b07      	ldr	r3, [sp, #28]
   2ff66:	9203      	str	r2, [sp, #12]
   2ff68:	e9cd 9300 	strd	r9, r3, [sp]
   2ff6c:	ee29 0a08 	vmul.f32	s0, s18, s16
   2ff70:	4633      	mov	r3, r6
   2ff72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ff74:	4652      	mov	r2, sl
   2ff76:	4620      	mov	r0, r4
   2ff78:	f7ff fe48 	bl	2fc0c <quant_partition>
   2ff7c:	6a23      	ldr	r3, [r4, #32]
   2ff7e:	eba8 0803 	sub.w	r8, r8, r3
   2ff82:	eba6 0608 	sub.w	r6, r6, r8
   2ff86:	2e18      	cmp	r6, #24
   2ff88:	fa00 f505 	lsl.w	r5, r0, r5
   2ff8c:	dd05      	ble.n	2ff9a <quant_partition+0x38e>
   2ff8e:	9b06      	ldr	r3, [sp, #24]
   2ff90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2ff94:	bf1c      	itt	ne
   2ff96:	3e18      	subne	r6, #24
   2ff98:	19bf      	addne	r7, r7, r6
   2ff9a:	9b08      	ldr	r3, [sp, #32]
   2ff9c:	9303      	str	r3, [sp, #12]
   2ff9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ffa0:	9302      	str	r3, [sp, #8]
   2ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ffa4:	ee28 0a28 	vmul.f32	s0, s16, s17
   2ffa8:	e9cd 9300 	strd	r9, r3, [sp]
   2ffac:	4652      	mov	r2, sl
   2ffae:	463b      	mov	r3, r7
   2ffb0:	4659      	mov	r1, fp
   2ffb2:	4620      	mov	r0, r4
   2ffb4:	f7ff fe2a 	bl	2fc0c <quant_partition>
   2ffb8:	4305      	orrs	r5, r0
   2ffba:	e6f2      	b.n	2fda2 <quant_partition+0x196>
   2ffbc:	3f7ffe00 	.word	0x3f7ffe00
   2ffc0:	00000000 	.word	0x00000000
   2ffc4:	ffffc000 	.word	0xffffc000
   2ffc8:	0019660d 	.word	0x0019660d
   2ffcc:	3c6ef35f 	.word	0x3c6ef35f
   2ffd0:	3b800000 	.word	0x3b800000
   2ffd4:	2b40      	cmp	r3, #64	; 0x40
   2ffd6:	bfa8      	it	ge
   2ffd8:	2340      	movge	r3, #64	; 0x40
   2ffda:	f003 0107 	and.w	r1, r3, #7
   2ffde:	4ad6      	ldr	r2, [pc, #856]	; (30338 <quant_partition+0x72c>)
   2ffe0:	10db      	asrs	r3, r3, #3
   2ffe2:	f932 5011 	ldrsh.w	r5, [r2, r1, lsl #1]
   2ffe6:	f1c3 030e 	rsb	r3, r3, #14
   2ffea:	411d      	asrs	r5, r3
   2ffec:	3501      	adds	r5, #1
   2ffee:	f025 0501 	bic.w	r5, r5, #1
   2fff2:	f1be 0f00 	cmp.w	lr, #0
   2fff6:	f040 80b4 	bne.w	30162 <quant_partition+0x556>
   2fffa:	9807      	ldr	r0, [sp, #28]
   2fffc:	f7fc fb7a 	bl	2c6f4 <ec_tell_frac>
   30000:	9b05      	ldr	r3, [sp, #20]
   30002:	900d      	str	r0, [sp, #52]	; 0x34
   30004:	2b01      	cmp	r3, #1
   30006:	f340 8173 	ble.w	302f0 <quant_partition+0x6e4>
   3000a:	1c69      	adds	r1, r5, #1
   3000c:	9807      	ldr	r0, [sp, #28]
   3000e:	f003 ff61 	bl	33ed4 <ec_dec_uint>
   30012:	ea4f 3880 	mov.w	r8, r0, lsl #14
   30016:	fb98 f3f5 	sdiv	r3, r8, r5
   3001a:	9306      	str	r3, [sp, #24]
   3001c:	9807      	ldr	r0, [sp, #28]
   3001e:	f7fc fb69 	bl	2c6f4 <ec_tell_frac>
   30022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30024:	1ac0      	subs	r0, r0, r3
   30026:	9b06      	ldr	r3, [sp, #24]
   30028:	1a36      	subs	r6, r6, r0
   3002a:	2b00      	cmp	r3, #0
   3002c:	f43f ae60 	beq.w	2fcf0 <quant_partition+0xe4>
   30030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   30034:	f000 819b 	beq.w	3036e <quant_partition+0x762>
   30038:	f5c3 4180 	rsb	r1, r3, #16384	; 0x4000
   3003c:	b209      	sxth	r1, r1
   3003e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   30042:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   30046:	fb01 3101 	mla	r1, r1, r1, r3
   3004a:	1349      	asrs	r1, r1, #13
   3004c:	fb08 3808 	mla	r8, r8, r8, r3
   30050:	f44f 4580 	mov.w	r5, #16384	; 0x4000
   30054:	b20f      	sxth	r7, r1
   30056:	ea4f 3868 	mov.w	r8, r8, asr #13
   3005a:	f64f 538e 	movw	r3, #64910	; 0xfd8e
   3005e:	fa0f fc88 	sxth.w	ip, r8
   30062:	fb17 5203 	smlabb	r2, r7, r3, r5
   30066:	f242 0e55 	movw	lr, #8277	; 0x2055
   3006a:	fb1c 5303 	smlabb	r3, ip, r3, r5
   3006e:	eb0e 32e2 	add.w	r2, lr, r2, asr #15
   30072:	eb0e 33e3 	add.w	r3, lr, r3, asr #15
   30076:	b292      	uxth	r2, r2
   30078:	fb07 f202 	mul.w	r2, r7, r2
   3007c:	b29b      	uxth	r3, r3
   3007e:	442a      	add	r2, r5
   30080:	fb0c f303 	mul.w	r3, ip, r3
   30084:	442b      	add	r3, r5
   30086:	13d2      	asrs	r2, r2, #15
   30088:	f5a2 52ef 	sub.w	r2, r2, #7648	; 0x1de0
   3008c:	13db      	asrs	r3, r3, #15
   3008e:	3a03      	subs	r2, #3
   30090:	f5a3 53ef 	sub.w	r3, r3, #7648	; 0x1de0
   30094:	fb17 5202 	smlabb	r2, r7, r2, r5
   30098:	f5c1 4100 	rsb	r1, r1, #32768	; 0x8000
   3009c:	3b03      	subs	r3, #3
   3009e:	fb1c 5303 	smlabb	r3, ip, r3, r5
   300a2:	eb01 32e2 	add.w	r2, r1, r2, asr #15
   300a6:	f5c8 4800 	rsb	r8, r8, #32768	; 0x8000
   300aa:	b212      	sxth	r2, r2
   300ac:	eb08 33e3 	add.w	r3, r8, r3, asr #15
   300b0:	b21f      	sxth	r7, r3
   300b2:	fab2 f182 	clz	r1, r2
   300b6:	4613      	mov	r3, r2
   300b8:	9707      	str	r7, [sp, #28]
   300ba:	f1a1 0211 	sub.w	r2, r1, #17
   300be:	fab7 f887 	clz	r8, r7
   300c2:	930d      	str	r3, [sp, #52]	; 0x34
   300c4:	fa03 f202 	lsl.w	r2, r3, r2
   300c8:	9b07      	ldr	r3, [sp, #28]
   300ca:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
   300ce:	ed9d 7a07 	vldr	s14, [sp, #28]
   300d2:	f1a8 0711 	sub.w	r7, r8, #17
   300d6:	b212      	sxth	r2, r2
   300d8:	f24f 5edb 	movw	lr, #62939	; 0xf5db
   300dc:	fa03 f707 	lsl.w	r7, r3, r7
   300e0:	fb12 5c0e 	smlabb	ip, r2, lr, r5
   300e4:	b23f      	sxth	r7, r7
   300e6:	f641 63fc 	movw	r3, #7932	; 0x1efc
   300ea:	fb17 5e0e 	smlabb	lr, r7, lr, r5
   300ee:	eb03 3cec 	add.w	ip, r3, ip, asr #15
   300f2:	fa1f fc8c 	uxth.w	ip, ip
   300f6:	eb03 33ee 	add.w	r3, r3, lr, asr #15
   300fa:	fb02 f20c 	mul.w	r2, r2, ip
   300fe:	eba8 0101 	sub.w	r1, r8, r1
   30102:	b29b      	uxth	r3, r3
   30104:	442a      	add	r2, r5
   30106:	fb07 f303 	mul.w	r3, r7, r3
   3010a:	02c9      	lsls	r1, r1, #11
   3010c:	195f      	adds	r7, r3, r5
   3010e:	eb01 32e2 	add.w	r2, r1, r2, asr #15
   30112:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   30116:	eba2 32e7 	sub.w	r2, r2, r7, asr #15
   3011a:	01db      	lsls	r3, r3, #7
   3011c:	fb13 5302 	smlabb	r3, r3, r2, r5
   30120:	9d05      	ldr	r5, [sp, #20]
   30122:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
   30126:	eef8 8ac7 	vcvt.f32.s32	s17, s14
   3012a:	eddf 7a84 	vldr	s15, [pc, #528]	; 3033c <quant_partition+0x730>
   3012e:	2d01      	cmp	r5, #1
   30130:	ea4f 33e3 	mov.w	r3, r3, asr #15
   30134:	ee29 9a27 	vmul.f32	s18, s18, s15
   30138:	ee68 8aa7 	vmul.f32	s17, s17, s15
   3013c:	f77f ade6 	ble.w	2fd0c <quant_partition+0x100>
   30140:	9906      	ldr	r1, [sp, #24]
   30142:	f3c1 020d 	ubfx	r2, r1, #0, #14
   30146:	2a00      	cmp	r2, #0
   30148:	f43f ade0 	beq.w	2fd0c <quant_partition+0x100>
   3014c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
   30150:	f340 811c 	ble.w	3038c <quant_partition+0x780>
   30154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   30156:	f1c2 0204 	rsb	r2, r2, #4
   3015a:	fa43 f202 	asr.w	r2, r3, r2
   3015e:	1a9b      	subs	r3, r3, r2
   30160:	e5d4      	b.n	2fd0c <quant_partition+0x100>
   30162:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   30164:	9300      	str	r3, [sp, #0]
   30166:	2200      	movs	r2, #0
   30168:	4653      	mov	r3, sl
   3016a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3016c:	4658      	mov	r0, fp
   3016e:	f005 fad7 	bl	35720 <stereo_itheta>
   30172:	4607      	mov	r7, r0
   30174:	9807      	ldr	r0, [sp, #28]
   30176:	f7fc fabd 	bl	2c6f4 <ec_tell_frac>
   3017a:	fb07 f705 	mul.w	r7, r7, r5
   3017e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   30180:	900d      	str	r0, [sp, #52]	; 0x34
   30182:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
   30186:	13bf      	asrs	r7, r7, #14
   30188:	2b00      	cmp	r3, #0
   3018a:	f000 809c 	beq.w	302c6 <quant_partition+0x6ba>
   3018e:	2f00      	cmp	r7, #0
   30190:	ea4f 3887 	mov.w	r8, r7, lsl #14
   30194:	f340 808e 	ble.w	302b4 <quant_partition+0x6a8>
   30198:	42af      	cmp	r7, r5
   3019a:	f280 808b 	bge.w	302b4 <quant_partition+0x6a8>
   3019e:	fb98 f3f5 	sdiv	r3, r8, r5
   301a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   301a6:	f5c3 4e80 	rsb	lr, r3, #16384	; 0x4000
   301aa:	b21b      	sxth	r3, r3
   301ac:	fb03 2303 	mla	r3, r3, r3, r2
   301b0:	fa0f fe8e 	sxth.w	lr, lr
   301b4:	fb0e 2e0e 	mla	lr, lr, lr, r2
   301b8:	135b      	asrs	r3, r3, #13
   301ba:	4618      	mov	r0, r3
   301bc:	ea4f 3e6e 	mov.w	lr, lr, asr #13
   301c0:	fa0f f18e 	sxth.w	r1, lr
   301c4:	9006      	str	r0, [sp, #24]
   301c6:	f64f 538e 	movw	r3, #64910	; 0xfd8e
   301ca:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
   301ce:	fb11 c203 	smlabb	r2, r1, r3, ip
   301d2:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
   301d6:	f242 0c55 	movw	ip, #8277	; 0x2055
   301da:	eb0c 32e2 	add.w	r2, ip, r2, asr #15
   301de:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
   301e2:	fb10 c303 	smlabb	r3, r0, r3, ip
   301e6:	f242 0c55 	movw	ip, #8277	; 0x2055
   301ea:	eb0c 33e3 	add.w	r3, ip, r3, asr #15
   301ee:	b292      	uxth	r2, r2
   301f0:	b29b      	uxth	r3, r3
   301f2:	fb01 f202 	mul.w	r2, r1, r2
   301f6:	fb00 f303 	mul.w	r3, r0, r3
   301fa:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
   301fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   30202:	13d2      	asrs	r2, r2, #15
   30204:	13db      	asrs	r3, r3, #15
   30206:	f5a2 52ef 	sub.w	r2, r2, #7648	; 0x1de0
   3020a:	f5a3 53ef 	sub.w	r3, r3, #7648	; 0x1de0
   3020e:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
   30212:	3b03      	subs	r3, #3
   30214:	3a03      	subs	r2, #3
   30216:	fb11 c202 	smlabb	r2, r1, r2, ip
   3021a:	fb10 c003 	smlabb	r0, r0, r3, ip
   3021e:	f5ce 4e00 	rsb	lr, lr, #32768	; 0x8000
   30222:	9b06      	ldr	r3, [sp, #24]
   30224:	eb0e 3ee2 	add.w	lr, lr, r2, asr #15
   30228:	fa0f f28e 	sxth.w	r2, lr
   3022c:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
   30230:	fab2 f182 	clz	r1, r2
   30234:	eb03 33e0 	add.w	r3, r3, r0, asr #15
   30238:	b21b      	sxth	r3, r3
   3023a:	f1a1 0011 	sub.w	r0, r1, #17
   3023e:	9106      	str	r1, [sp, #24]
   30240:	4082      	lsls	r2, r0
   30242:	fab3 f183 	clz	r1, r3
   30246:	b212      	sxth	r2, r2
   30248:	f1a1 0011 	sub.w	r0, r1, #17
   3024c:	f24f 5edb 	movw	lr, #62939	; 0xf5db
   30250:	4083      	lsls	r3, r0
   30252:	fb12 c00e 	smlabb	r0, r2, lr, ip
   30256:	f641 6cfc 	movw	ip, #7932	; 0x1efc
   3025a:	eb0c 30e0 	add.w	r0, ip, r0, asr #15
   3025e:	b21b      	sxth	r3, r3
   30260:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
   30264:	b280      	uxth	r0, r0
   30266:	fb13 ce0e 	smlabb	lr, r3, lr, ip
   3026a:	fb02 f000 	mul.w	r0, r2, r0
   3026e:	f641 6cfc 	movw	ip, #7932	; 0x1efc
   30272:	9a06      	ldr	r2, [sp, #24]
   30274:	eb0c 3eee 	add.w	lr, ip, lr, asr #15
   30278:	1a8a      	subs	r2, r1, r2
   3027a:	fa1f fe8e 	uxth.w	lr, lr
   3027e:	fb03 fe0e 	mul.w	lr, r3, lr
   30282:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   30286:	02d2      	lsls	r2, r2, #11
   30288:	eb02 32e0 	add.w	r2, r2, r0, asr #15
   3028c:	f50e 4180 	add.w	r1, lr, #16384	; 0x4000
   30290:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   30294:	eba2 32e1 	sub.w	r2, r2, r1, asr #15
   30298:	01db      	lsls	r3, r3, #7
   3029a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
   3029e:	fb13 c302 	smlabb	r3, r3, r2, ip
   302a2:	13db      	asrs	r3, r3, #15
   302a4:	42b3      	cmp	r3, r6
   302a6:	f300 80a0 	bgt.w	303ea <quant_partition+0x7de>
   302aa:	4272      	negs	r2, r6
   302ac:	4293      	cmp	r3, r2
   302ae:	da01      	bge.n	302b4 <quant_partition+0x6a8>
   302b0:	2700      	movs	r7, #0
   302b2:	46b8      	mov	r8, r7
   302b4:	9b05      	ldr	r3, [sp, #20]
   302b6:	2b01      	cmp	r3, #1
   302b8:	dd7b      	ble.n	303b2 <quant_partition+0x7a6>
   302ba:	4639      	mov	r1, r7
   302bc:	1c6a      	adds	r2, r5, #1
   302be:	9807      	ldr	r0, [sp, #28]
   302c0:	f7fc fbde 	bl	2ca80 <ec_enc_uint>
   302c4:	e6a7      	b.n	30016 <quant_partition+0x40a>
   302c6:	9b05      	ldr	r3, [sp, #20]
   302c8:	2b01      	cmp	r3, #1
   302ca:	f300 808b 	bgt.w	303e4 <quant_partition+0x7d8>
   302ce:	106a      	asrs	r2, r5, #1
   302d0:	1c53      	adds	r3, r2, #1
   302d2:	fb03 f303 	mul.w	r3, r3, r3
   302d6:	ea4f 3887 	mov.w	r8, r7, lsl #14
   302da:	42ba      	cmp	r2, r7
   302dc:	db60      	blt.n	303a0 <quant_partition+0x794>
   302de:	1c7a      	adds	r2, r7, #1
   302e0:	fb07 f102 	mul.w	r1, r7, r2
   302e4:	1049      	asrs	r1, r1, #1
   302e6:	440a      	add	r2, r1
   302e8:	9807      	ldr	r0, [sp, #28]
   302ea:	f7fc fa35 	bl	2c758 <ec_encode>
   302ee:	e692      	b.n	30016 <quant_partition+0x40a>
   302f0:	106f      	asrs	r7, r5, #1
   302f2:	1c7b      	adds	r3, r7, #1
   302f4:	fb03 f803 	mul.w	r8, r3, r3
   302f8:	4641      	mov	r1, r8
   302fa:	9807      	ldr	r0, [sp, #28]
   302fc:	9306      	str	r3, [sp, #24]
   302fe:	f003 fd33 	bl	33d68 <ec_decode>
   30302:	9b06      	ldr	r3, [sp, #24]
   30304:	fb07 f703 	mul.w	r7, r7, r3
   30308:	ebb0 0f67 	cmp.w	r0, r7, asr #1
   3030c:	da56      	bge.n	303bc <quant_partition+0x7b0>
   3030e:	00c0      	lsls	r0, r0, #3
   30310:	3001      	adds	r0, #1
   30312:	f004 fc3f 	bl	34b94 <isqrt32>
   30316:	3801      	subs	r0, #1
   30318:	0847      	lsrs	r7, r0, #1
   3031a:	1c7a      	adds	r2, r7, #1
   3031c:	fb02 f107 	mul.w	r1, r2, r7
   30320:	1049      	asrs	r1, r1, #1
   30322:	4643      	mov	r3, r8
   30324:	440a      	add	r2, r1
   30326:	9807      	ldr	r0, [sp, #28]
   30328:	f003 fd30 	bl	33d8c <ec_dec_update>
   3032c:	ea4f 3887 	mov.w	r8, r7, lsl #14
   30330:	e671      	b.n	30016 <quant_partition+0x40a>
   30332:	9307      	str	r3, [sp, #28]
   30334:	e500      	b.n	2fd38 <quant_partition+0x12c>
   30336:	bf00      	nop
   30338:	00041418 	.word	0x00041418
   3033c:	38000000 	.word	0x38000000
   30340:	2900      	cmp	r1, #0
   30342:	dd4d      	ble.n	303e0 <quant_partition+0x7d4>
   30344:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   30346:	4f32      	ldr	r7, [pc, #200]	; (30410 <quant_partition+0x804>)
   30348:	4e32      	ldr	r6, [pc, #200]	; (30414 <quant_partition+0x808>)
   3034a:	4658      	mov	r0, fp
   3034c:	eb0b 0581 	add.w	r5, fp, r1, lsl #2
   30350:	469c      	mov	ip, r3
   30352:	fb07 6202 	mla	r2, r7, r2, r6
   30356:	1513      	asrs	r3, r2, #20
   30358:	ee07 3a90 	vmov	s15, r3
   3035c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30360:	ece0 7a01 	vstmia	r0!, {s15}
   30364:	4285      	cmp	r5, r0
   30366:	d1f4      	bne.n	30352 <quant_partition+0x746>
   30368:	62a2      	str	r2, [r4, #40]	; 0x28
   3036a:	4665      	mov	r5, ip
   3036c:	e5cb      	b.n	2ff06 <quant_partition+0x2fa>
   3036e:	2301      	movs	r3, #1
   30370:	fa03 f309 	lsl.w	r3, r3, r9
   30374:	9a08      	ldr	r2, [sp, #32]
   30376:	eddf 8a28 	vldr	s17, [pc, #160]	; 30418 <quant_partition+0x80c>
   3037a:	ed9f 9a28 	vldr	s18, [pc, #160]	; 3041c <quant_partition+0x810>
   3037e:	3b01      	subs	r3, #1
   30380:	fa03 f309 	lsl.w	r3, r3, r9
   30384:	401a      	ands	r2, r3
   30386:	9208      	str	r2, [sp, #32]
   30388:	9b06      	ldr	r3, [sp, #24]
   3038a:	e4bf      	b.n	2fd0c <quant_partition+0x100>
   3038c:	990a      	ldr	r1, [sp, #40]	; 0x28
   3038e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
   30392:	f1c1 0105 	rsb	r1, r1, #5
   30396:	410a      	asrs	r2, r1
   30398:	4413      	add	r3, r2
   3039a:	ea03 73e3 	and.w	r3, r3, r3, asr #31
   3039e:	e4b5      	b.n	2fd0c <quant_partition+0x100>
   303a0:	1c6a      	adds	r2, r5, #1
   303a2:	1ca9      	adds	r1, r5, #2
   303a4:	1bd2      	subs	r2, r2, r7
   303a6:	1bc9      	subs	r1, r1, r7
   303a8:	fb02 f101 	mul.w	r1, r2, r1
   303ac:	eba3 0161 	sub.w	r1, r3, r1, asr #1
   303b0:	e799      	b.n	302e6 <quant_partition+0x6da>
   303b2:	106a      	asrs	r2, r5, #1
   303b4:	1c53      	adds	r3, r2, #1
   303b6:	fb03 f303 	mul.w	r3, r3, r3
   303ba:	e78e      	b.n	302da <quant_partition+0x6ce>
   303bc:	eba8 0000 	sub.w	r0, r8, r0
   303c0:	00c0      	lsls	r0, r0, #3
   303c2:	3807      	subs	r0, #7
   303c4:	f004 fbe6 	bl	34b94 <isqrt32>
   303c8:	1c6a      	adds	r2, r5, #1
   303ca:	ebc0 0042 	rsb	r0, r0, r2, lsl #1
   303ce:	0847      	lsrs	r7, r0, #1
   303d0:	1ca9      	adds	r1, r5, #2
   303d2:	1bd2      	subs	r2, r2, r7
   303d4:	1bc9      	subs	r1, r1, r7
   303d6:	fb02 f101 	mul.w	r1, r2, r1
   303da:	eba8 0161 	sub.w	r1, r8, r1, asr #1
   303de:	e7a0      	b.n	30322 <quant_partition+0x716>
   303e0:	461d      	mov	r5, r3
   303e2:	e590      	b.n	2ff06 <quant_partition+0x2fa>
   303e4:	ea4f 3887 	mov.w	r8, r7, lsl #14
   303e8:	e767      	b.n	302ba <quant_partition+0x6ae>
   303ea:	462f      	mov	r7, r5
   303ec:	ea4f 3885 	mov.w	r8, r5, lsl #14
   303f0:	e760      	b.n	302b4 <quant_partition+0x6a8>
   303f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   303f4:	9300      	str	r3, [sp, #0]
   303f6:	2200      	movs	r2, #0
   303f8:	4653      	mov	r3, sl
   303fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   303fc:	4658      	mov	r0, fp
   303fe:	f005 f98f 	bl	35720 <stereo_itheta>
   30402:	9006      	str	r0, [sp, #24]
   30404:	9807      	ldr	r0, [sp, #28]
   30406:	f7fc f975 	bl	2c6f4 <ec_tell_frac>
   3040a:	900d      	str	r0, [sp, #52]	; 0x34
   3040c:	e606      	b.n	3001c <quant_partition+0x410>
   3040e:	bf00      	nop
   30410:	0019660d 	.word	0x0019660d
   30414:	3c6ef35f 	.word	0x3c6ef35f
   30418:	00000000 	.word	0x00000000
   3041c:	3f7ffe00 	.word	0x3f7ffe00

00030420 <quant_band>:
   30420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30424:	ed2d 8b02 	vpush	{d8}
   30428:	b08b      	sub	sp, #44	; 0x2c
   3042a:	468b      	mov	fp, r1
   3042c:	9007      	str	r0, [sp, #28]
   3042e:	6801      	ldr	r1, [r0, #0]
   30430:	f8d0 9018 	ldr.w	r9, [r0, #24]
   30434:	9206      	str	r2, [sp, #24]
   30436:	e9dd 0a16 	ldrd	r0, sl, [sp, #88]	; 0x58
   3043a:	2a01      	cmp	r2, #1
   3043c:	4614      	mov	r4, r2
   3043e:	9308      	str	r3, [sp, #32]
   30440:	9105      	str	r1, [sp, #20]
   30442:	fb92 f5f0 	sdiv	r5, r2, r0
   30446:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   30448:	f000 81ea 	beq.w	30820 <quant_band+0x400>
   3044c:	f1b9 0f00 	cmp.w	r9, #0
   30450:	eeb0 8a40 	vmov.f32	s16, s0
   30454:	f340 818d 	ble.w	30772 <quant_band+0x352>
   30458:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   3045a:	b14b      	cbz	r3, 30470 <quant_band+0x50>
   3045c:	f1ba 0f00 	cmp.w	sl, #0
   30460:	d006      	beq.n	30470 <quant_band+0x50>
   30462:	4651      	mov	r1, sl
   30464:	0092      	lsls	r2, r2, #2
   30466:	981a      	ldr	r0, [sp, #104]	; 0x68
   30468:	f7db fe7a 	bl	c160 <memcpy>
   3046c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   30470:	f8df 8350 	ldr.w	r8, [pc, #848]	; 307c4 <quant_band+0x3a4>
   30474:	eddf 6ad2 	vldr	s13, [pc, #840]	; 307c0 <quant_band+0x3a0>
   30478:	f8dd e014 	ldr.w	lr, [sp, #20]
   3047c:	9509      	str	r5, [sp, #36]	; 0x24
   3047e:	2300      	movs	r3, #0
   30480:	f1be 0f00 	cmp.w	lr, #0
   30484:	d17c      	bne.n	30580 <quant_band+0x160>
   30486:	f1ba 0f00 	cmp.w	sl, #0
   3048a:	d032      	beq.n	304f2 <quant_band+0xd2>
   3048c:	9a06      	ldr	r2, [sp, #24]
   3048e:	fa42 f003 	asr.w	r0, r2, r3
   30492:	2201      	movs	r2, #1
   30494:	fa02 fc03 	lsl.w	ip, r2, r3
   30498:	f1bc 0f00 	cmp.w	ip, #0
   3049c:	fa40 f002 	asr.w	r0, r0, r2
   304a0:	dd27      	ble.n	304f2 <quant_band+0xd2>
   304a2:	2800      	cmp	r0, #0
   304a4:	dd25      	ble.n	304f2 <quant_band+0xd2>
   304a6:	2400      	movs	r4, #0
   304a8:	2601      	movs	r6, #1
   304aa:	2500      	movs	r5, #0
   304ac:	fa05 f103 	lsl.w	r1, r5, r3
   304b0:	fa06 f203 	lsl.w	r2, r6, r3
   304b4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   304b8:	4422      	add	r2, r4
   304ba:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   304be:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   304c2:	edd1 7a00 	vldr	s15, [r1]
   304c6:	ed92 7a00 	vldr	s14, [r2]
   304ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
   304ce:	ee27 7a26 	vmul.f32	s14, s14, s13
   304d2:	3501      	adds	r5, #1
   304d4:	ee37 6a87 	vadd.f32	s12, s15, s14
   304d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   304dc:	42a8      	cmp	r0, r5
   304de:	ed81 6a00 	vstr	s12, [r1]
   304e2:	f106 0602 	add.w	r6, r6, #2
   304e6:	edc2 7a00 	vstr	s15, [r2]
   304ea:	d1df      	bne.n	304ac <quant_band+0x8c>
   304ec:	3401      	adds	r4, #1
   304ee:	4564      	cmp	r4, ip
   304f0:	dbda      	blt.n	304a8 <quant_band+0x88>
   304f2:	f007 020f 	and.w	r2, r7, #15
   304f6:	113f      	asrs	r7, r7, #4
   304f8:	f818 2002 	ldrb.w	r2, [r8, r2]
   304fc:	f818 7007 	ldrb.w	r7, [r8, r7]
   30500:	3301      	adds	r3, #1
   30502:	4599      	cmp	r9, r3
   30504:	ea42 0787 	orr.w	r7, r2, r7, lsl #2
   30508:	d1ba      	bne.n	30480 <quant_band+0x60>
   3050a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   3050c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3050e:	fa05 f509 	lsl.w	r5, r5, r9
   30512:	fa43 f409 	asr.w	r4, r3, r9
   30516:	46c8      	mov	r8, r9
   30518:	2600      	movs	r6, #0
   3051a:	2c01      	cmp	r4, #1
   3051c:	dd69      	ble.n	305f2 <quant_band+0x1d2>
   3051e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   30520:	f1a3 0901 	sub.w	r9, r3, #1
   30524:	9b05      	ldr	r3, [sp, #20]
   30526:	fab9 f989 	clz	r9, r9
   3052a:	ea4f 1959 	mov.w	r9, r9, lsr #5
   3052e:	2b00      	cmp	r3, #0
   30530:	f040 8153 	bne.w	307da <quant_band+0x3ba>
   30534:	f1ba 0f00 	cmp.w	sl, #0
   30538:	d007      	beq.n	3054a <quant_band+0x12a>
   3053a:	464b      	mov	r3, r9
   3053c:	fa04 f208 	lsl.w	r2, r4, r8
   30540:	fa45 f108 	asr.w	r1, r5, r8
   30544:	4650      	mov	r0, sl
   30546:	f7ff fa81 	bl	2fa4c <deinterleave_hadamard>
   3054a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   3054c:	9703      	str	r7, [sp, #12]
   3054e:	e9cd a301 	strd	sl, r3, [sp, #4]
   30552:	f8dd a01c 	ldr.w	sl, [sp, #28]
   30556:	9b08      	ldr	r3, [sp, #32]
   30558:	9400      	str	r4, [sp, #0]
   3055a:	eeb0 0a48 	vmov.f32	s0, s16
   3055e:	9a06      	ldr	r2, [sp, #24]
   30560:	4659      	mov	r1, fp
   30562:	4650      	mov	r0, sl
   30564:	f7ff fb52 	bl	2fc0c <quant_partition>
   30568:	f8da 3004 	ldr.w	r3, [sl, #4]
   3056c:	4607      	mov	r7, r0
   3056e:	2b00      	cmp	r3, #0
   30570:	f040 814d 	bne.w	3080e <quant_band+0x3ee>
   30574:	4638      	mov	r0, r7
   30576:	b00b      	add	sp, #44	; 0x2c
   30578:	ecbd 8b02 	vpop	{d8}
   3057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30580:	9a06      	ldr	r2, [sp, #24]
   30582:	fa42 f003 	asr.w	r0, r2, r3
   30586:	2201      	movs	r2, #1
   30588:	fa02 fc03 	lsl.w	ip, r2, r3
   3058c:	f1bc 0f00 	cmp.w	ip, #0
   30590:	fa40 f002 	asr.w	r0, r0, r2
   30594:	ddad      	ble.n	304f2 <quant_band+0xd2>
   30596:	2800      	cmp	r0, #0
   30598:	bfc8      	it	gt
   3059a:	2400      	movgt	r4, #0
   3059c:	dda9      	ble.n	304f2 <quant_band+0xd2>
   3059e:	2601      	movs	r6, #1
   305a0:	2500      	movs	r5, #0
   305a2:	fa05 f103 	lsl.w	r1, r5, r3
   305a6:	fa06 f203 	lsl.w	r2, r6, r3
   305aa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
   305ae:	4422      	add	r2, r4
   305b0:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
   305b4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   305b8:	edd1 7a00 	vldr	s15, [r1]
   305bc:	ed92 7a00 	vldr	s14, [r2]
   305c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   305c4:	ee27 7a26 	vmul.f32	s14, s14, s13
   305c8:	3501      	adds	r5, #1
   305ca:	ee37 6a87 	vadd.f32	s12, s15, s14
   305ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
   305d2:	42a8      	cmp	r0, r5
   305d4:	ed81 6a00 	vstr	s12, [r1]
   305d8:	f106 0602 	add.w	r6, r6, #2
   305dc:	edc2 7a00 	vstr	s15, [r2]
   305e0:	d1df      	bne.n	305a2 <quant_band+0x182>
   305e2:	3401      	adds	r4, #1
   305e4:	45a4      	cmp	ip, r4
   305e6:	d1da      	bne.n	3059e <quant_band+0x17e>
   305e8:	f1ba 0f00 	cmp.w	sl, #0
   305ec:	f47f af5b 	bne.w	304a6 <quant_band+0x86>
   305f0:	e77f      	b.n	304f2 <quant_band+0xd2>
   305f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   305f4:	f8dd 901c 	ldr.w	r9, [sp, #28]
   305f8:	9703      	str	r7, [sp, #12]
   305fa:	e9cd a301 	strd	sl, r3, [sp, #4]
   305fe:	9400      	str	r4, [sp, #0]
   30600:	9b08      	ldr	r3, [sp, #32]
   30602:	9a06      	ldr	r2, [sp, #24]
   30604:	eeb0 0a48 	vmov.f32	s0, s16
   30608:	4659      	mov	r1, fp
   3060a:	4648      	mov	r0, r9
   3060c:	f7ff fafe 	bl	2fc0c <quant_partition>
   30610:	f8d9 3004 	ldr.w	r3, [r9, #4]
   30614:	4607      	mov	r7, r0
   30616:	2b00      	cmp	r3, #0
   30618:	d0ac      	beq.n	30574 <quant_band+0x154>
   3061a:	b3de      	cbz	r6, 30694 <quant_band+0x274>
   3061c:	eddf 6a68 	vldr	s13, [pc, #416]	; 307c0 <quant_band+0x3a0>
   30620:	f8cd 8014 	str.w	r8, [sp, #20]
   30624:	f04f 0a00 	mov.w	sl, #0
   30628:	1064      	asrs	r4, r4, #1
   3062a:	006d      	lsls	r5, r5, #1
   3062c:	fa27 f304 	lsr.w	r3, r7, r4
   30630:	2c00      	cmp	r4, #0
   30632:	ea47 0703 	orr.w	r7, r7, r3
   30636:	ea4f 0e65 	mov.w	lr, r5, asr #1
   3063a:	dd25      	ble.n	30688 <quant_band+0x268>
   3063c:	f1be 0f00 	cmp.w	lr, #0
   30640:	dd22      	ble.n	30688 <quant_band+0x268>
   30642:	ea4f 0884 	mov.w	r8, r4, lsl #2
   30646:	eb08 090b 	add.w	r9, r8, fp
   3064a:	465b      	mov	r3, fp
   3064c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
   30650:	eb08 0103 	add.w	r1, r8, r3
   30654:	461a      	mov	r2, r3
   30656:	2000      	movs	r0, #0
   30658:	edd2 7a00 	vldr	s15, [r2]
   3065c:	ed91 7a00 	vldr	s14, [r1]
   30660:	ee67 7aa6 	vmul.f32	s15, s15, s13
   30664:	ee27 7a26 	vmul.f32	s14, s14, s13
   30668:	3001      	adds	r0, #1
   3066a:	ee37 6a87 	vadd.f32	s12, s15, s14
   3066e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30672:	4586      	cmp	lr, r0
   30674:	ed82 6a00 	vstr	s12, [r2]
   30678:	edc1 7a00 	vstr	s15, [r1]
   3067c:	4462      	add	r2, ip
   3067e:	4461      	add	r1, ip
   30680:	d1ea      	bne.n	30658 <quant_band+0x238>
   30682:	3304      	adds	r3, #4
   30684:	4599      	cmp	r9, r3
   30686:	d1e3      	bne.n	30650 <quant_band+0x230>
   30688:	f10a 0a01 	add.w	sl, sl, #1
   3068c:	45b2      	cmp	sl, r6
   3068e:	d1cb      	bne.n	30628 <quant_band+0x208>
   30690:	f8dd 8014 	ldr.w	r8, [sp, #20]
   30694:	f1b8 0f00 	cmp.w	r8, #0
   30698:	d041      	beq.n	3071e <quant_band+0x2fe>
   3069a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 307c8 <quant_band+0x3a8>
   3069e:	eddf 6a48 	vldr	s13, [pc, #288]	; 307c0 <quant_band+0x3a0>
   306a2:	f8dd e018 	ldr.w	lr, [sp, #24]
   306a6:	9405      	str	r4, [sp, #20]
   306a8:	2500      	movs	r5, #0
   306aa:	f04f 0901 	mov.w	r9, #1
   306ae:	fa09 fc05 	lsl.w	ip, r9, r5
   306b2:	fa4e f605 	asr.w	r6, lr, r5
   306b6:	f1bc 0f00 	cmp.w	ip, #0
   306ba:	f81a 7007 	ldrb.w	r7, [sl, r7]
   306be:	ea4f 0666 	mov.w	r6, r6, asr #1
   306c2:	dd28      	ble.n	30716 <quant_band+0x2f6>
   306c4:	2e00      	cmp	r6, #0
   306c6:	bfc8      	it	gt
   306c8:	2100      	movgt	r1, #0
   306ca:	dd24      	ble.n	30716 <quant_band+0x2f6>
   306cc:	2401      	movs	r4, #1
   306ce:	2000      	movs	r0, #0
   306d0:	fa00 f205 	lsl.w	r2, r0, r5
   306d4:	fa04 f305 	lsl.w	r3, r4, r5
   306d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   306dc:	440b      	add	r3, r1
   306de:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   306e2:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
   306e6:	edd2 7a00 	vldr	s15, [r2]
   306ea:	ed93 7a00 	vldr	s14, [r3]
   306ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
   306f2:	ee27 7a26 	vmul.f32	s14, s14, s13
   306f6:	3001      	adds	r0, #1
   306f8:	ee37 6a87 	vadd.f32	s12, s15, s14
   306fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30700:	4286      	cmp	r6, r0
   30702:	ed82 6a00 	vstr	s12, [r2]
   30706:	f104 0402 	add.w	r4, r4, #2
   3070a:	edc3 7a00 	vstr	s15, [r3]
   3070e:	d1df      	bne.n	306d0 <quant_band+0x2b0>
   30710:	3101      	adds	r1, #1
   30712:	458c      	cmp	ip, r1
   30714:	d1da      	bne.n	306cc <quant_band+0x2ac>
   30716:	3501      	adds	r5, #1
   30718:	4545      	cmp	r5, r8
   3071a:	d1c8      	bne.n	306ae <quant_band+0x28e>
   3071c:	9c05      	ldr	r4, [sp, #20]
   3071e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   30720:	fa04 f408 	lsl.w	r4, r4, r8
   30724:	b1db      	cbz	r3, 3075e <quant_band+0x33e>
   30726:	9d06      	ldr	r5, [sp, #24]
   30728:	4628      	mov	r0, r5
   3072a:	f7dc f889 	bl	c840 <__aeabi_i2d>
   3072e:	ec41 0b10 	vmov	d0, r0, r1
   30732:	f7e2 ff5d 	bl	135f0 <sqrt>
   30736:	ec51 0b10 	vmov	r0, r1, d0
   3073a:	f7dc f96f 	bl	ca1c <__aeabi_d2f>
   3073e:	2d00      	cmp	r5, #0
   30740:	ee07 0a10 	vmov	s14, r0
   30744:	dd0b      	ble.n	3075e <quant_band+0x33e>
   30746:	9a19      	ldr	r2, [sp, #100]	; 0x64
   30748:	465b      	mov	r3, fp
   3074a:	eb0b 0185 	add.w	r1, fp, r5, lsl #2
   3074e:	ecf3 7a01 	vldmia	r3!, {s15}
   30752:	ee67 7a87 	vmul.f32	s15, s15, s14
   30756:	428b      	cmp	r3, r1
   30758:	ece2 7a01 	vstmia	r2!, {s15}
   3075c:	d1f7      	bne.n	3074e <quant_band+0x32e>
   3075e:	2301      	movs	r3, #1
   30760:	40a3      	lsls	r3, r4
   30762:	3b01      	subs	r3, #1
   30764:	401f      	ands	r7, r3
   30766:	4638      	mov	r0, r7
   30768:	b00b      	add	sp, #44	; 0x2c
   3076a:	ecbd 8b02 	vpop	{d8}
   3076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30772:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   30774:	f005 0301 	and.w	r3, r5, #1
   30778:	2a00      	cmp	r2, #0
   3077a:	f000 8108 	beq.w	3098e <quant_band+0x56e>
   3077e:	f1ba 0f00 	cmp.w	sl, #0
   30782:	f000 8104 	beq.w	3098e <quant_band+0x56e>
   30786:	b38b      	cbz	r3, 307ec <quant_band+0x3cc>
   30788:	2801      	cmp	r0, #1
   3078a:	f300 8114 	bgt.w	309b6 <quant_band+0x596>
   3078e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   30790:	9703      	str	r7, [sp, #12]
   30792:	e9cd a301 	strd	sl, r3, [sp, #4]
   30796:	9b16      	ldr	r3, [sp, #88]	; 0x58
   30798:	9300      	str	r3, [sp, #0]
   3079a:	9b08      	ldr	r3, [sp, #32]
   3079c:	4622      	mov	r2, r4
   3079e:	eeb0 0a48 	vmov.f32	s0, s16
   307a2:	9c07      	ldr	r4, [sp, #28]
   307a4:	4659      	mov	r1, fp
   307a6:	4620      	mov	r0, r4
   307a8:	f7ff fa30 	bl	2fc0c <quant_partition>
   307ac:	6863      	ldr	r3, [r4, #4]
   307ae:	4607      	mov	r7, r0
   307b0:	2b00      	cmp	r3, #0
   307b2:	f43f aedf 	beq.w	30574 <quant_band+0x154>
   307b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
   307b8:	f04f 0800 	mov.w	r8, #0
   307bc:	e7af      	b.n	3071e <quant_band+0x2fe>
   307be:	bf00      	nop
   307c0:	3f3504f3 	.word	0x3f3504f3
   307c4:	00041408 	.word	0x00041408
   307c8:	000413f8 	.word	0x000413f8
   307cc:	f04f 0800 	mov.w	r8, #0
   307d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
   307d2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   307d6:	4646      	mov	r6, r8
   307d8:	46c1      	mov	r9, r8
   307da:	464b      	mov	r3, r9
   307dc:	fa04 f208 	lsl.w	r2, r4, r8
   307e0:	fa45 f108 	asr.w	r1, r5, r8
   307e4:	4658      	mov	r0, fp
   307e6:	f7ff f931 	bl	2fa4c <deinterleave_hadamard>
   307ea:	e6a3      	b.n	30534 <quant_band+0x114>
   307ec:	f1b9 0f00 	cmp.w	r9, #0
   307f0:	d14e      	bne.n	30890 <quant_band+0x470>
   307f2:	2801      	cmp	r0, #1
   307f4:	f340 80d4 	ble.w	309a0 <quant_band+0x580>
   307f8:	4610      	mov	r0, r2
   307fa:	4651      	mov	r1, sl
   307fc:	00a2      	lsls	r2, r4, #2
   307fe:	f7db fcaf 	bl	c160 <memcpy>
   30802:	46c8      	mov	r8, r9
   30804:	464e      	mov	r6, r9
   30806:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   3080a:	9c16      	ldr	r4, [sp, #88]	; 0x58
   3080c:	e687      	b.n	3051e <quant_band+0xfe>
   3080e:	464b      	mov	r3, r9
   30810:	fa04 f208 	lsl.w	r2, r4, r8
   30814:	fa45 f108 	asr.w	r1, r5, r8
   30818:	4658      	mov	r0, fp
   3081a:	f7ff f987 	bl	2fb2c <interleave_hadamard>
   3081e:	e6fc      	b.n	3061a <quant_band+0x1fa>
   30820:	9907      	ldr	r1, [sp, #28]
   30822:	6a0b      	ldr	r3, [r1, #32]
   30824:	69c8      	ldr	r0, [r1, #28]
   30826:	2b07      	cmp	r3, #7
   30828:	dc0d      	bgt.n	30846 <quant_band+0x426>
   3082a:	684b      	ldr	r3, [r1, #4]
   3082c:	b11b      	cbz	r3, 30836 <quant_band+0x416>
   3082e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   30832:	f8cb 3000 	str.w	r3, [fp]
   30836:	9b19      	ldr	r3, [sp, #100]	; 0x64
   30838:	b1f3      	cbz	r3, 30878 <quant_band+0x458>
   3083a:	461a      	mov	r2, r3
   3083c:	f8db 3000 	ldr.w	r3, [fp]
   30840:	6013      	str	r3, [r2, #0]
   30842:	2701      	movs	r7, #1
   30844:	e696      	b.n	30574 <quant_band+0x154>
   30846:	9b05      	ldr	r3, [sp, #20]
   30848:	b1eb      	cbz	r3, 30886 <quant_band+0x466>
   3084a:	eddb 7a00 	vldr	s15, [fp]
   3084e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   30852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   30856:	bf4c      	ite	mi
   30858:	2401      	movmi	r4, #1
   3085a:	2400      	movpl	r4, #0
   3085c:	4621      	mov	r1, r4
   3085e:	f7fc f961 	bl	2cb24 <ec_enc_bits>
   30862:	9907      	ldr	r1, [sp, #28]
   30864:	6a0b      	ldr	r3, [r1, #32]
   30866:	684a      	ldr	r2, [r1, #4]
   30868:	3b08      	subs	r3, #8
   3086a:	620b      	str	r3, [r1, #32]
   3086c:	2a00      	cmp	r2, #0
   3086e:	d0e2      	beq.n	30836 <quant_band+0x416>
   30870:	2c00      	cmp	r4, #0
   30872:	d0dc      	beq.n	3082e <quant_band+0x40e>
   30874:	4b58      	ldr	r3, [pc, #352]	; (309d8 <quant_band+0x5b8>)
   30876:	e7dc      	b.n	30832 <quant_band+0x412>
   30878:	2701      	movs	r7, #1
   3087a:	4638      	mov	r0, r7
   3087c:	b00b      	add	sp, #44	; 0x2c
   3087e:	ecbd 8b02 	vpop	{d8}
   30882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30886:	4611      	mov	r1, r2
   30888:	f003 fc12 	bl	340b0 <ec_dec_bits>
   3088c:	4604      	mov	r4, r0
   3088e:	e7e8      	b.n	30862 <quant_band+0x442>
   30890:	4610      	mov	r0, r2
   30892:	4651      	mov	r1, sl
   30894:	00a2      	lsls	r2, r4, #2
   30896:	f7db fc63 	bl	c160 <memcpy>
   3089a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   3089e:	9b05      	ldr	r3, [sp, #20]
   308a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 309dc <quant_band+0x5bc>
   308a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
   308a6:	2600      	movs	r6, #0
   308a8:	106d      	asrs	r5, r5, #1
   308aa:	2b00      	cmp	r3, #0
   308ac:	d140      	bne.n	30930 <quant_band+0x510>
   308ae:	f1ba 0f00 	cmp.w	sl, #0
   308b2:	d02a      	beq.n	3090a <quant_band+0x4ea>
   308b4:	2c00      	cmp	r4, #0
   308b6:	dd28      	ble.n	3090a <quant_band+0x4ea>
   308b8:	2d00      	cmp	r5, #0
   308ba:	dd26      	ble.n	3090a <quant_band+0x4ea>
   308bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   308c0:	00e0      	lsls	r0, r4, #3
   308c2:	4651      	mov	r1, sl
   308c4:	f04f 0800 	mov.w	r8, #0
   308c8:	eb0c 0201 	add.w	r2, ip, r1
   308cc:	460b      	mov	r3, r1
   308ce:	f04f 0e00 	mov.w	lr, #0
   308d2:	edd3 7a00 	vldr	s15, [r3]
   308d6:	ed92 7a00 	vldr	s14, [r2]
   308da:	ee67 7aa6 	vmul.f32	s15, s15, s13
   308de:	ee27 7a26 	vmul.f32	s14, s14, s13
   308e2:	f10e 0e01 	add.w	lr, lr, #1
   308e6:	ee37 6a87 	vadd.f32	s12, s15, s14
   308ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
   308ee:	45ae      	cmp	lr, r5
   308f0:	ed83 6a00 	vstr	s12, [r3]
   308f4:	edc2 7a00 	vstr	s15, [r2]
   308f8:	4403      	add	r3, r0
   308fa:	4402      	add	r2, r0
   308fc:	d1e9      	bne.n	308d2 <quant_band+0x4b2>
   308fe:	f108 0801 	add.w	r8, r8, #1
   30902:	45a0      	cmp	r8, r4
   30904:	f101 0104 	add.w	r1, r1, #4
   30908:	dbde      	blt.n	308c8 <quant_band+0x4a8>
   3090a:	fa07 f304 	lsl.w	r3, r7, r4
   3090e:	f015 0801 	ands.w	r8, r5, #1
   30912:	f106 0601 	add.w	r6, r6, #1
   30916:	ea47 0703 	orr.w	r7, r7, r3
   3091a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   3091e:	d133      	bne.n	30988 <quant_band+0x568>
   30920:	eb16 0f09 	cmn.w	r6, r9
   30924:	f57f adf9 	bpl.w	3051a <quant_band+0xfa>
   30928:	9b05      	ldr	r3, [sp, #20]
   3092a:	106d      	asrs	r5, r5, #1
   3092c:	2b00      	cmp	r3, #0
   3092e:	d0be      	beq.n	308ae <quant_band+0x48e>
   30930:	2c00      	cmp	r4, #0
   30932:	ddea      	ble.n	3090a <quant_band+0x4ea>
   30934:	2d00      	cmp	r5, #0
   30936:	dde8      	ble.n	3090a <quant_band+0x4ea>
   30938:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   3093c:	eb0b 080c 	add.w	r8, fp, ip
   30940:	465b      	mov	r3, fp
   30942:	00e0      	lsls	r0, r4, #3
   30944:	eb0c 0103 	add.w	r1, ip, r3
   30948:	461a      	mov	r2, r3
   3094a:	f04f 0e00 	mov.w	lr, #0
   3094e:	edd2 7a00 	vldr	s15, [r2]
   30952:	ed91 7a00 	vldr	s14, [r1]
   30956:	ee67 7aa6 	vmul.f32	s15, s15, s13
   3095a:	ee27 7a26 	vmul.f32	s14, s14, s13
   3095e:	f10e 0e01 	add.w	lr, lr, #1
   30962:	ee37 6a87 	vadd.f32	s12, s15, s14
   30966:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3096a:	45ae      	cmp	lr, r5
   3096c:	ed82 6a00 	vstr	s12, [r2]
   30970:	edc1 7a00 	vstr	s15, [r1]
   30974:	4402      	add	r2, r0
   30976:	4401      	add	r1, r0
   30978:	d1e9      	bne.n	3094e <quant_band+0x52e>
   3097a:	3304      	adds	r3, #4
   3097c:	4598      	cmp	r8, r3
   3097e:	d1e1      	bne.n	30944 <quant_band+0x524>
   30980:	f1ba 0f00 	cmp.w	sl, #0
   30984:	d19d      	bne.n	308c2 <quant_band+0x4a2>
   30986:	e7c0      	b.n	3090a <quant_band+0x4ea>
   30988:	f04f 0800 	mov.w	r8, #0
   3098c:	e5c5      	b.n	3051a <quant_band+0xfa>
   3098e:	b913      	cbnz	r3, 30996 <quant_band+0x576>
   30990:	f1b9 0f00 	cmp.w	r9, #0
   30994:	d183      	bne.n	3089e <quant_band+0x47e>
   30996:	f04f 0800 	mov.w	r8, #0
   3099a:	4646      	mov	r6, r8
   3099c:	9c16      	ldr	r4, [sp, #88]	; 0x58
   3099e:	e5bc      	b.n	3051a <quant_band+0xfa>
   309a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   309a2:	9703      	str	r7, [sp, #12]
   309a4:	e9cd a301 	strd	sl, r3, [sp, #4]
   309a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   309aa:	9300      	str	r3, [sp, #0]
   309ac:	eeb0 0a48 	vmov.f32	s0, s16
   309b0:	9b08      	ldr	r3, [sp, #32]
   309b2:	9a06      	ldr	r2, [sp, #24]
   309b4:	e6f5      	b.n	307a2 <quant_band+0x382>
   309b6:	9b06      	ldr	r3, [sp, #24]
   309b8:	981a      	ldr	r0, [sp, #104]	; 0x68
   309ba:	009a      	lsls	r2, r3, #2
   309bc:	4651      	mov	r1, sl
   309be:	f7db fbcf 	bl	c160 <memcpy>
   309c2:	9b05      	ldr	r3, [sp, #20]
   309c4:	2b00      	cmp	r3, #0
   309c6:	f47f af01 	bne.w	307cc <quant_band+0x3ac>
   309ca:	4698      	mov	r8, r3
   309cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
   309ce:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   309d2:	461e      	mov	r6, r3
   309d4:	4699      	mov	r9, r3
   309d6:	e5b0      	b.n	3053a <quant_band+0x11a>
   309d8:	bf800000 	.word	0xbf800000
   309dc:	3f3504f3 	.word	0x3f3504f3

000309e0 <quant_band_stereo>:
   309e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   309e4:	ed2d 8b04 	vpush	{d8-d9}
   309e8:	b093      	sub	sp, #76	; 0x4c
   309ea:	2b01      	cmp	r3, #1
   309ec:	9208      	str	r2, [sp, #32]
   309ee:	6802      	ldr	r2, [r0, #0]
   309f0:	9307      	str	r3, [sp, #28]
   309f2:	4683      	mov	fp, r0
   309f4:	910a      	str	r1, [sp, #40]	; 0x28
   309f6:	9209      	str	r2, [sp, #36]	; 0x24
   309f8:	f8d0 a01c 	ldr.w	sl, [r0, #28]
   309fc:	9d21      	ldr	r5, [sp, #132]	; 0x84
   309fe:	f000 81b0 	beq.w	30d62 <quant_band_stereo+0x382>
   30a02:	e9db 8702 	ldrd	r8, r7, [fp, #8]
   30a06:	4618      	mov	r0, r3
   30a08:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   30a0c:	f8db 2010 	ldr.w	r2, [fp, #16]
   30a10:	f933 1017 	ldrsh.w	r1, [r3, r7, lsl #1]
   30a14:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   30a18:	930c      	str	r3, [sp, #48]	; 0x30
   30a1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   30a1c:	2802      	cmp	r0, #2
   30a1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   30a22:	ea4f 0361 	mov.w	r3, r1, asr #1
   30a26:	f000 8199 	beq.w	30d5c <quant_band_stereo+0x37c>
   30a2a:	0044      	lsls	r4, r0, #1
   30a2c:	3b04      	subs	r3, #4
   30a2e:	3c01      	subs	r4, #1
   30a30:	9820      	ldr	r0, [sp, #128]	; 0x80
   30a32:	9e20      	ldr	r6, [sp, #128]	; 0x80
   30a34:	1a41      	subs	r1, r0, r1
   30a36:	f1a1 001f 	sub.w	r0, r1, #31
   30a3a:	fb03 6304 	mla	r3, r3, r4, r6
   30a3e:	fb93 f3f4 	sdiv	r3, r3, r4
   30a42:	4283      	cmp	r3, r0
   30a44:	bfa8      	it	ge
   30a46:	f1a1 0320 	subge.w	r3, r1, #32
   30a4a:	2b03      	cmp	r3, #3
   30a4c:	dc1b      	bgt.n	30a86 <quant_band_stereo+0xa6>
   30a4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   30a50:	2e00      	cmp	r6, #0
   30a52:	f040 81c5 	bne.w	30de0 <quant_band_stereo+0x400>
   30a56:	4650      	mov	r0, sl
   30a58:	f7fb fe4c 	bl	2c6f4 <ec_tell_frac>
   30a5c:	4604      	mov	r4, r0
   30a5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   30a60:	2b10      	cmp	r3, #16
   30a62:	f340 8157 	ble.w	30d14 <quant_band_stereo+0x334>
   30a66:	f8db 3020 	ldr.w	r3, [fp, #32]
   30a6a:	2b10      	cmp	r3, #16
   30a6c:	f340 8152 	ble.w	30d14 <quant_band_stereo+0x334>
   30a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30a72:	2b00      	cmp	r3, #0
   30a74:	f001 8277 	beq.w	31f66 <quant_band_stereo+0x1586>
   30a78:	2202      	movs	r2, #2
   30a7a:	4631      	mov	r1, r6
   30a7c:	4650      	mov	r0, sl
   30a7e:	9609      	str	r6, [sp, #36]	; 0x24
   30a80:	f7fb ff38 	bl	2c8f4 <ec_enc_bit_logp>
   30a84:	e148      	b.n	30d18 <quant_band_stereo+0x338>
   30a86:	2b40      	cmp	r3, #64	; 0x40
   30a88:	bfa8      	it	ge
   30a8a:	2340      	movge	r3, #64	; 0x40
   30a8c:	f003 0007 	and.w	r0, r3, #7
   30a90:	49c8      	ldr	r1, [pc, #800]	; (30db4 <quant_band_stereo+0x3d4>)
   30a92:	10db      	asrs	r3, r3, #3
   30a94:	f931 4010 	ldrsh.w	r4, [r1, r0, lsl #1]
   30a98:	f1c3 030e 	rsb	r3, r3, #14
   30a9c:	fa44 f303 	asr.w	r3, r4, r3
   30aa0:	1c5c      	adds	r4, r3, #1
   30aa2:	4297      	cmp	r7, r2
   30aa4:	f024 0901 	bic.w	r9, r4, #1
   30aa8:	dad1      	bge.n	30a4e <quant_band_stereo+0x6e>
   30aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30aac:	2b00      	cmp	r3, #0
   30aae:	f040 84bc 	bne.w	3142a <quant_band_stereo+0xa4a>
   30ab2:	4650      	mov	r0, sl
   30ab4:	f7fb fe1e 	bl	2c6f4 <ec_tell_frac>
   30ab8:	9b07      	ldr	r3, [sp, #28]
   30aba:	2b02      	cmp	r3, #2
   30abc:	4606      	mov	r6, r0
   30abe:	f301 819f 	bgt.w	31e00 <quant_band_stereo+0x1420>
   30ac2:	f109 0101 	add.w	r1, r9, #1
   30ac6:	4650      	mov	r0, sl
   30ac8:	f003 fa04 	bl	33ed4 <ec_dec_uint>
   30acc:	0387      	lsls	r7, r0, #14
   30ace:	4650      	mov	r0, sl
   30ad0:	fb97 f4f9 	sdiv	r4, r7, r9
   30ad4:	940b      	str	r4, [sp, #44]	; 0x2c
   30ad6:	f7fb fe0d 	bl	2c6f4 <ec_tell_frac>
   30ada:	9b20      	ldr	r3, [sp, #128]	; 0x80
   30adc:	1b80      	subs	r0, r0, r6
   30ade:	1a1b      	subs	r3, r3, r0
   30ae0:	930c      	str	r3, [sp, #48]	; 0x30
   30ae2:	2c00      	cmp	r4, #0
   30ae4:	f000 8126 	beq.w	30d34 <quant_band_stereo+0x354>
   30ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   30aee:	f000 84f6 	beq.w	314de <quant_band_stereo+0xafe>
   30af2:	f5c3 4280 	rsb	r2, r3, #16384	; 0x4000
   30af6:	4619      	mov	r1, r3
   30af8:	b212      	sxth	r2, r2
   30afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   30afe:	fb02 3202 	mla	r2, r2, r2, r3
   30b02:	1352      	asrs	r2, r2, #13
   30b04:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   30b08:	fa0f fc82 	sxth.w	ip, r2
   30b0c:	b20e      	sxth	r6, r1
   30b0e:	f64f 518e 	movw	r1, #64910	; 0xfd8e
   30b12:	fb1c 7401 	smlabb	r4, ip, r1, r7
   30b16:	f242 0e55 	movw	lr, #8277	; 0x2055
   30b1a:	fb06 3606 	mla	r6, r6, r6, r3
   30b1e:	1376      	asrs	r6, r6, #13
   30b20:	eb0e 34e4 	add.w	r4, lr, r4, asr #15
   30b24:	b233      	sxth	r3, r6
   30b26:	b2a4      	uxth	r4, r4
   30b28:	fb13 7101 	smlabb	r1, r3, r1, r7
   30b2c:	fb0c f404 	mul.w	r4, ip, r4
   30b30:	eb0e 31e1 	add.w	r1, lr, r1, asr #15
   30b34:	443c      	add	r4, r7
   30b36:	b289      	uxth	r1, r1
   30b38:	13e4      	asrs	r4, r4, #15
   30b3a:	fb03 f101 	mul.w	r1, r3, r1
   30b3e:	f5a4 54ef 	sub.w	r4, r4, #7648	; 0x1de0
   30b42:	4439      	add	r1, r7
   30b44:	3c03      	subs	r4, #3
   30b46:	fb1c 7404 	smlabb	r4, ip, r4, r7
   30b4a:	13c9      	asrs	r1, r1, #15
   30b4c:	f5c2 4200 	rsb	r2, r2, #32768	; 0x8000
   30b50:	eb02 32e4 	add.w	r2, r2, r4, asr #15
   30b54:	f5a1 51ef 	sub.w	r1, r1, #7648	; 0x1de0
   30b58:	b212      	sxth	r2, r2
   30b5a:	3903      	subs	r1, #3
   30b5c:	fb13 7101 	smlabb	r1, r3, r1, r7
   30b60:	f5c6 4300 	rsb	r3, r6, #32768	; 0x8000
   30b64:	fab2 f682 	clz	r6, r2
   30b68:	eb03 33e1 	add.w	r3, r3, r1, asr #15
   30b6c:	f1a6 0411 	sub.w	r4, r6, #17
   30b70:	b21b      	sxth	r3, r3
   30b72:	fa02 f404 	lsl.w	r4, r2, r4
   30b76:	fab3 f983 	clz	r9, r3
   30b7a:	b224      	sxth	r4, r4
   30b7c:	f24f 58db 	movw	r8, #62939	; 0xf5db
   30b80:	fb14 7e08 	smlabb	lr, r4, r8, r7
   30b84:	f641 61fc 	movw	r1, #7932	; 0x1efc
   30b88:	f1a9 0c11 	sub.w	ip, r9, #17
   30b8c:	eb01 3eee 	add.w	lr, r1, lr, asr #15
   30b90:	fa03 fc0c 	lsl.w	ip, r3, ip
   30b94:	fa0f fc8c 	sxth.w	ip, ip
   30b98:	fa1f fe8e 	uxth.w	lr, lr
   30b9c:	fb1c 7808 	smlabb	r8, ip, r8, r7
   30ba0:	fb04 f40e 	mul.w	r4, r4, lr
   30ba4:	eba9 0606 	sub.w	r6, r9, r6
   30ba8:	02f6      	lsls	r6, r6, #11
   30baa:	eb01 31e8 	add.w	r1, r1, r8, asr #15
   30bae:	443c      	add	r4, r7
   30bb0:	eb06 34e4 	add.w	r4, r6, r4, asr #15
   30bb4:	b289      	uxth	r1, r1
   30bb6:	9e07      	ldr	r6, [sp, #28]
   30bb8:	fb0c f101 	mul.w	r1, ip, r1
   30bbc:	ee07 2a90 	vmov	s15, r2
   30bc0:	3e01      	subs	r6, #1
   30bc2:	4439      	add	r1, r7
   30bc4:	ee07 3a10 	vmov	s14, r3
   30bc8:	eba4 31e1 	sub.w	r1, r4, r1, asr #15
   30bcc:	01f4      	lsls	r4, r6, #7
   30bce:	9e07      	ldr	r6, [sp, #28]
   30bd0:	f8db 2020 	ldr.w	r2, [fp, #32]
   30bd4:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   30bd8:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
   30bdc:	eddf 7a76 	vldr	s15, [pc, #472]	; 30db8 <quant_band_stereo+0x3d8>
   30be0:	fb14 7101 	smlabb	r1, r4, r1, r7
   30be4:	2e02      	cmp	r6, #2
   30be6:	ea4f 31e1 	mov.w	r1, r1, asr #15
   30bea:	ee68 8aa7 	vmul.f32	s17, s17, s15
   30bee:	ee28 8a27 	vmul.f32	s16, s16, s15
   30bf2:	f001 80bf 	beq.w	31d74 <quant_band_stereo+0x1394>
   30bf6:	2300      	movs	r3, #0
   30bf8:	9309      	str	r3, [sp, #36]	; 0x24
   30bfa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   30bfc:	1a61      	subs	r1, r4, r1
   30bfe:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   30c02:	1049      	asrs	r1, r1, #1
   30c04:	42a1      	cmp	r1, r4
   30c06:	bfa8      	it	ge
   30c08:	4621      	movge	r1, r4
   30c0a:	1a16      	subs	r6, r2, r0
   30c0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   30c0e:	960e      	str	r6, [sp, #56]	; 0x38
   30c10:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
   30c14:	1ae7      	subs	r7, r4, r3
   30c16:	fa42 f405 	asr.w	r4, r2, r5
   30c1a:	f1a5 0201 	sub.w	r2, r5, #1
   30c1e:	fab2 f282 	clz	r2, r2
   30c22:	0952      	lsrs	r2, r2, #5
   30c24:	42bb      	cmp	r3, r7
   30c26:	930d      	str	r3, [sp, #52]	; 0x34
   30c28:	970c      	str	r7, [sp, #48]	; 0x30
   30c2a:	f8cb 6020 	str.w	r6, [fp, #32]
   30c2e:	920f      	str	r2, [sp, #60]	; 0x3c
   30c30:	f2c0 846d 	blt.w	3150e <quant_band_stereo+0xb2e>
   30c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
   30c36:	9205      	str	r2, [sp, #20]
   30c38:	9a25      	ldr	r2, [sp, #148]	; 0x94
   30c3a:	9204      	str	r2, [sp, #16]
   30c3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   30c3e:	9203      	str	r2, [sp, #12]
   30c40:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   30c42:	9202      	str	r2, [sp, #8]
   30c44:	9a22      	ldr	r2, [sp, #136]	; 0x88
   30c46:	990a      	ldr	r1, [sp, #40]	; 0x28
   30c48:	e9cd 5200 	strd	r5, r2, [sp]
   30c4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   30c50:	9a07      	ldr	r2, [sp, #28]
   30c52:	4658      	mov	r0, fp
   30c54:	4698      	mov	r8, r3
   30c56:	f7ff fbe3 	bl	30420 <quant_band>
   30c5a:	900d      	str	r0, [sp, #52]	; 0x34
   30c5c:	f8db 0020 	ldr.w	r0, [fp, #32]
   30c60:	4643      	mov	r3, r8
   30c62:	1a30      	subs	r0, r6, r0
   30c64:	1a18      	subs	r0, r3, r0
   30c66:	2818      	cmp	r0, #24
   30c68:	dd04      	ble.n	30c74 <quant_band_stereo+0x294>
   30c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30c6c:	b113      	cbz	r3, 30c74 <quant_band_stereo+0x294>
   30c6e:	3818      	subs	r0, #24
   30c70:	4407      	add	r7, r0
   30c72:	970c      	str	r7, [sp, #48]	; 0x30
   30c74:	f8db 7018 	ldr.w	r7, [fp, #24]
   30c78:	9b07      	ldr	r3, [sp, #28]
   30c7a:	f8db a000 	ldr.w	sl, [fp]
   30c7e:	fb93 f6f5 	sdiv	r6, r3, r5
   30c82:	2f00      	cmp	r7, #0
   30c84:	f340 864a 	ble.w	3191c <quant_band_stereo+0xf3c>
   30c88:	494c      	ldr	r1, [pc, #304]	; (30dbc <quant_band_stereo+0x3dc>)
   30c8a:	eddf 6a4d 	vldr	s13, [pc, #308]	; 30dc0 <quant_band_stereo+0x3e0>
   30c8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   30c92:	9521      	str	r5, [sp, #132]	; 0x84
   30c94:	2000      	movs	r0, #0
   30c96:	4655      	mov	r5, sl
   30c98:	960b      	str	r6, [sp, #44]	; 0x2c
   30c9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   30c9e:	469a      	mov	sl, r3
   30ca0:	2d00      	cmp	r5, #0
   30ca2:	f040 8388 	bne.w	313b6 <quant_band_stereo+0x9d6>
   30ca6:	f004 030f 	and.w	r3, r4, #15
   30caa:	1124      	asrs	r4, r4, #4
   30cac:	5ccb      	ldrb	r3, [r1, r3]
   30cae:	5d0c      	ldrb	r4, [r1, r4]
   30cb0:	3001      	adds	r0, #1
   30cb2:	4287      	cmp	r7, r0
   30cb4:	ea43 0484 	orr.w	r4, r3, r4, lsl #2
   30cb8:	d1f2      	bne.n	30ca0 <quant_band_stereo+0x2c0>
   30cba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   30cbc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   30cc0:	970b      	str	r7, [sp, #44]	; 0x2c
   30cc2:	46aa      	mov	sl, r5
   30cc4:	9d21      	ldr	r5, [sp, #132]	; 0x84
   30cc6:	40be      	lsls	r6, r7
   30cc8:	413d      	asrs	r5, r7
   30cca:	2700      	movs	r7, #0
   30ccc:	2d01      	cmp	r5, #1
   30cce:	f340 86f8 	ble.w	31ac2 <quant_band_stereo+0x10e2>
   30cd2:	f1ba 0f00 	cmp.w	sl, #0
   30cd6:	f041 818c 	bne.w	31ff2 <quant_band_stereo+0x1612>
   30cda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   30cdc:	9403      	str	r4, [sp, #12]
   30cde:	2200      	movs	r2, #0
   30ce0:	9302      	str	r3, [sp, #8]
   30ce2:	9201      	str	r2, [sp, #4]
   30ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30ce6:	9500      	str	r5, [sp, #0]
   30ce8:	eeb0 0a68 	vmov.f32	s0, s17
   30cec:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   30cf0:	4658      	mov	r0, fp
   30cf2:	f7fe ff8b 	bl	2fc0c <quant_partition>
   30cf6:	f8db 3004 	ldr.w	r3, [fp, #4]
   30cfa:	4604      	mov	r4, r0
   30cfc:	2b00      	cmp	r3, #0
   30cfe:	f041 815a 	bne.w	31fb6 <quant_band_stereo+0x15d6>
   30d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30d04:	4323      	orrs	r3, r4
   30d06:	461c      	mov	r4, r3
   30d08:	4620      	mov	r0, r4
   30d0a:	b013      	add	sp, #76	; 0x4c
   30d0c:	ecbd 8b04 	vpop	{d8-d9}
   30d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d14:	2300      	movs	r3, #0
   30d16:	9309      	str	r3, [sp, #36]	; 0x24
   30d18:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   30d1c:	4650      	mov	r0, sl
   30d1e:	2b00      	cmp	r3, #0
   30d20:	f000 80b7 	beq.w	30e92 <quant_band_stereo+0x4b2>
   30d24:	f7fb fce6 	bl	2c6f4 <ec_tell_frac>
   30d28:	1b00      	subs	r0, r0, r4
   30d2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   30d2c:	1a1b      	subs	r3, r3, r0
   30d2e:	930c      	str	r3, [sp, #48]	; 0x30
   30d30:	2300      	movs	r3, #0
   30d32:	9309      	str	r3, [sp, #36]	; 0x24
   30d34:	9b07      	ldr	r3, [sp, #28]
   30d36:	f8db 2020 	ldr.w	r2, [fp, #32]
   30d3a:	2b02      	cmp	r3, #2
   30d3c:	f000 80b5 	beq.w	30eaa <quant_band_stereo+0x4ca>
   30d40:	2301      	movs	r3, #1
   30d42:	9c26      	ldr	r4, [sp, #152]	; 0x98
   30d44:	491f      	ldr	r1, [pc, #124]	; (30dc4 <quant_band_stereo+0x3e4>)
   30d46:	eddf 8a25 	vldr	s17, [pc, #148]	; 30ddc <quant_band_stereo+0x3fc>
   30d4a:	ed9f 8a23 	vldr	s16, [pc, #140]	; 30dd8 <quant_band_stereo+0x3f8>
   30d4e:	40ab      	lsls	r3, r5
   30d50:	3b01      	subs	r3, #1
   30d52:	401c      	ands	r4, r3
   30d54:	2300      	movs	r3, #0
   30d56:	9426      	str	r4, [sp, #152]	; 0x98
   30d58:	930b      	str	r3, [sp, #44]	; 0x2c
   30d5a:	e74e      	b.n	30bfa <quant_band_stereo+0x21a>
   30d5c:	4604      	mov	r4, r0
   30d5e:	3b10      	subs	r3, #16
   30d60:	e666      	b.n	30a30 <quant_band_stereo+0x50>
   30d62:	9f08      	ldr	r7, [sp, #32]
   30d64:	1c3c      	adds	r4, r7, #0
   30d66:	bf18      	it	ne
   30d68:	2401      	movne	r4, #1
   30d6a:	4616      	mov	r6, r2
   30d6c:	460d      	mov	r5, r1
   30d6e:	2a00      	cmp	r2, #0
   30d70:	f040 82f3 	bne.w	3135a <quant_band_stereo+0x97a>
   30d74:	6a03      	ldr	r3, [r0, #32]
   30d76:	e013      	b.n	30da0 <quant_band_stereo+0x3c0>
   30d78:	2101      	movs	r1, #1
   30d7a:	4650      	mov	r0, sl
   30d7c:	f003 f998 	bl	340b0 <ec_dec_bits>
   30d80:	f8db 3020 	ldr.w	r3, [fp, #32]
   30d84:	f8db 2004 	ldr.w	r2, [fp, #4]
   30d88:	3b08      	subs	r3, #8
   30d8a:	f8cb 3020 	str.w	r3, [fp, #32]
   30d8e:	b112      	cbz	r2, 30d96 <quant_band_stereo+0x3b6>
   30d90:	b160      	cbz	r0, 30dac <quant_band_stereo+0x3cc>
   30d92:	4a0d      	ldr	r2, [pc, #52]	; (30dc8 <quant_band_stereo+0x3e8>)
   30d94:	602a      	str	r2, [r5, #0]
   30d96:	42b4      	cmp	r4, r6
   30d98:	463d      	mov	r5, r7
   30d9a:	f340 84f7 	ble.w	3178c <quant_band_stereo+0xdac>
   30d9e:	2601      	movs	r6, #1
   30da0:	2b07      	cmp	r3, #7
   30da2:	dce9      	bgt.n	30d78 <quant_band_stereo+0x398>
   30da4:	f8db 2004 	ldr.w	r2, [fp, #4]
   30da8:	2a00      	cmp	r2, #0
   30daa:	d0f4      	beq.n	30d96 <quant_band_stereo+0x3b6>
   30dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   30db0:	e7f0      	b.n	30d94 <quant_band_stereo+0x3b4>
   30db2:	bf00      	nop
   30db4:	00041418 	.word	0x00041418
   30db8:	38000000 	.word	0x38000000
   30dbc:	00041408 	.word	0x00041408
   30dc0:	3f3504f3 	.word	0x3f3504f3
   30dc4:	ffffc000 	.word	0xffffc000
   30dc8:	bf800000 	.word	0xbf800000
   30dcc:	26901d7d 	.word	0x26901d7d
   30dd0:	00000001 	.word	0x00000001
   30dd4:	ffffffff 	.word	0xffffffff
   30dd8:	3f7ffe00 	.word	0x3f7ffe00
   30ddc:	00000000 	.word	0x00000000
   30de0:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
   30de4:	9300      	str	r3, [sp, #0]
   30de6:	2201      	movs	r2, #1
   30de8:	9b07      	ldr	r3, [sp, #28]
   30dea:	9908      	ldr	r1, [sp, #32]
   30dec:	980a      	ldr	r0, [sp, #40]	; 0x28
   30dee:	f004 fc97 	bl	35720 <stereo_itheta>
   30df2:	4606      	mov	r6, r0
   30df4:	4650      	mov	r0, sl
   30df6:	f7fb fc7d 	bl	2c6f4 <ec_tell_frac>
   30dfa:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
   30dfe:	4604      	mov	r4, r0
   30e00:	dd04      	ble.n	30e0c <quant_band_stereo+0x42c>
   30e02:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   30e06:	2b00      	cmp	r3, #0
   30e08:	f001 80b4 	beq.w	31f74 <quant_band_stereo+0x1594>
   30e0c:	2600      	movs	r6, #0
   30e0e:	990c      	ldr	r1, [sp, #48]	; 0x30
   30e10:	f8d8 3008 	ldr.w	r3, [r8, #8]
   30e14:	ed1f 8a13 	vldr	s16, [pc, #-76]	; 30dcc <quant_band_stereo+0x3ec>
   30e18:	eb01 0287 	add.w	r2, r1, r7, lsl #2
   30e1c:	edd2 8a00 	vldr	s17, [r2]
   30e20:	441f      	add	r7, r3
   30e22:	eb01 0387 	add.w	r3, r1, r7, lsl #2
   30e26:	ed93 9a00 	vldr	s18, [r3]
   30e2a:	ee68 7aa8 	vmul.f32	s15, s17, s17
   30e2e:	ee29 7a09 	vmul.f32	s14, s18, s18
   30e32:	ee77 7a88 	vadd.f32	s15, s15, s16
   30e36:	ee77 7a87 	vadd.f32	s15, s15, s14
   30e3a:	ee17 0a90 	vmov	r0, s15
   30e3e:	f7db fd11 	bl	c864 <__aeabi_f2d>
   30e42:	ec41 0b10 	vmov	d0, r0, r1
   30e46:	f7e2 fbd3 	bl	135f0 <sqrt>
   30e4a:	ec51 0b10 	vmov	r0, r1, d0
   30e4e:	f7db fde5 	bl	ca1c <__aeabi_d2f>
   30e52:	ee07 0a90 	vmov	s15, r0
   30e56:	9907      	ldr	r1, [sp, #28]
   30e58:	ee37 8a88 	vadd.f32	s16, s15, s16
   30e5c:	2900      	cmp	r1, #0
   30e5e:	ee89 6a08 	vdiv.f32	s12, s18, s16
   30e62:	eec8 6a88 	vdiv.f32	s13, s17, s16
   30e66:	f77f adfa 	ble.w	30a5e <quant_band_stereo+0x7e>
   30e6a:	980a      	ldr	r0, [sp, #40]	; 0x28
   30e6c:	9a08      	ldr	r2, [sp, #32]
   30e6e:	4603      	mov	r3, r0
   30e70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   30e74:	edd3 7a00 	vldr	s15, [r3]
   30e78:	ecb2 7a01 	vldmia	r2!, {s14}
   30e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   30e80:	ee26 7a07 	vmul.f32	s14, s12, s14
   30e84:	ee77 7a87 	vadd.f32	s15, s15, s14
   30e88:	ece3 7a01 	vstmia	r3!, {s15}
   30e8c:	4299      	cmp	r1, r3
   30e8e:	d1f1      	bne.n	30e74 <quant_band_stereo+0x494>
   30e90:	e5e5      	b.n	30a5e <quant_band_stereo+0x7e>
   30e92:	f7fb fc2f 	bl	2c6f4 <ec_tell_frac>
   30e96:	9b20      	ldr	r3, [sp, #128]	; 0x80
   30e98:	f8db 2020 	ldr.w	r2, [fp, #32]
   30e9c:	1b00      	subs	r0, r0, r4
   30e9e:	1a1b      	subs	r3, r3, r0
   30ea0:	930c      	str	r3, [sp, #48]	; 0x30
   30ea2:	9b07      	ldr	r3, [sp, #28]
   30ea4:	2b02      	cmp	r3, #2
   30ea6:	f47f af4b 	bne.w	30d40 <quant_band_stereo+0x360>
   30eaa:	1a10      	subs	r0, r2, r0
   30eac:	9b08      	ldr	r3, [sp, #32]
   30eae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   30eb0:	ed1f 9a39 	vldr	s18, [pc, #-228]	; 30dd0 <quant_band_stereo+0x3f0>
   30eb4:	ed5f 9a39 	vldr	s19, [pc, #-228]	; 30dd4 <quant_band_stereo+0x3f4>
   30eb8:	ed5f 8a38 	vldr	s17, [pc, #-224]	; 30ddc <quant_band_stereo+0x3fc>
   30ebc:	ed1f 8a3a 	vldr	s16, [pc, #-232]	; 30dd8 <quant_band_stereo+0x3f8>
   30ec0:	f8cb 0020 	str.w	r0, [fp, #32]
   30ec4:	930e      	str	r3, [sp, #56]	; 0x38
   30ec6:	f8db 3000 	ldr.w	r3, [fp]
   30eca:	930b      	str	r3, [sp, #44]	; 0x2c
   30ecc:	f8db e018 	ldr.w	lr, [fp, #24]
   30ed0:	469a      	mov	sl, r3
   30ed2:	f1a5 0301 	sub.w	r3, r5, #1
   30ed6:	fab3 f383 	clz	r3, r3
   30eda:	095b      	lsrs	r3, r3, #5
   30edc:	f1be 0f00 	cmp.w	lr, #0
   30ee0:	f04f 0602 	mov.w	r6, #2
   30ee4:	9310      	str	r3, [sp, #64]	; 0x40
   30ee6:	fb96 f6f5 	sdiv	r6, r6, r5
   30eea:	f340 85b1 	ble.w	31a50 <quant_band_stereo+0x1070>
   30eee:	9b25      	ldr	r3, [sp, #148]	; 0x94
   30ef0:	b133      	cbz	r3, 30f00 <quant_band_stereo+0x520>
   30ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   30ef4:	b123      	cbz	r3, 30f00 <quant_band_stereo+0x520>
   30ef6:	cb03      	ldmia	r3!, {r0, r1}
   30ef8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   30efa:	9322      	str	r3, [sp, #136]	; 0x88
   30efc:	6018      	str	r0, [r3, #0]
   30efe:	6059      	str	r1, [r3, #4]
   30f00:	49db      	ldr	r1, [pc, #876]	; (31270 <quant_band_stereo+0x890>)
   30f02:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   30f06:	468a      	mov	sl, r1
   30f08:	eddf 6ada 	vldr	s13, [pc, #872]	; 31274 <quant_band_stereo+0x894>
   30f0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   30f0e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   30f12:	9922      	ldr	r1, [sp, #136]	; 0x88
   30f14:	960d      	str	r6, [sp, #52]	; 0x34
   30f16:	2300      	movs	r3, #0
   30f18:	9521      	str	r5, [sp, #132]	; 0x84
   30f1a:	f1bb 0f00 	cmp.w	fp, #0
   30f1e:	f040 846c 	bne.w	317fa <quant_band_stereo+0xe1a>
   30f22:	b3a9      	cbz	r1, 30f90 <quant_band_stereo+0x5b0>
   30f24:	2002      	movs	r0, #2
   30f26:	fa40 f503 	asr.w	r5, r0, r3
   30f2a:	2001      	movs	r0, #1
   30f2c:	fa00 f903 	lsl.w	r9, r0, r3
   30f30:	f1b9 0f00 	cmp.w	r9, #0
   30f34:	fa45 f500 	asr.w	r5, r5, r0
   30f38:	dd2a      	ble.n	30f90 <quant_band_stereo+0x5b0>
   30f3a:	2d00      	cmp	r5, #0
   30f3c:	dd28      	ble.n	30f90 <quant_band_stereo+0x5b0>
   30f3e:	2600      	movs	r6, #0
   30f40:	f04f 0801 	mov.w	r8, #1
   30f44:	f04f 0c00 	mov.w	ip, #0
   30f48:	fa0c f403 	lsl.w	r4, ip, r3
   30f4c:	fa08 f003 	lsl.w	r0, r8, r3
   30f50:	eb06 0444 	add.w	r4, r6, r4, lsl #1
   30f54:	4430      	add	r0, r6
   30f56:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   30f5a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   30f5e:	edd4 7a00 	vldr	s15, [r4]
   30f62:	ed90 7a00 	vldr	s14, [r0]
   30f66:	ee67 7aa6 	vmul.f32	s15, s15, s13
   30f6a:	ee27 7a26 	vmul.f32	s14, s14, s13
   30f6e:	f10c 0c01 	add.w	ip, ip, #1
   30f72:	ee37 6a87 	vadd.f32	s12, s15, s14
   30f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
   30f7a:	45ac      	cmp	ip, r5
   30f7c:	ed84 6a00 	vstr	s12, [r4]
   30f80:	f108 0802 	add.w	r8, r8, #2
   30f84:	edc0 7a00 	vstr	s15, [r0]
   30f88:	d1de      	bne.n	30f48 <quant_band_stereo+0x568>
   30f8a:	3601      	adds	r6, #1
   30f8c:	454e      	cmp	r6, r9
   30f8e:	dbd7      	blt.n	30f40 <quant_band_stereo+0x560>
   30f90:	f002 000f 	and.w	r0, r2, #15
   30f94:	1112      	asrs	r2, r2, #4
   30f96:	f81a 0000 	ldrb.w	r0, [sl, r0]
   30f9a:	f81a 2002 	ldrb.w	r2, [sl, r2]
   30f9e:	3301      	adds	r3, #1
   30fa0:	459e      	cmp	lr, r3
   30fa2:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
   30fa6:	d1b8      	bne.n	30f1a <quant_band_stereo+0x53a>
   30fa8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   30faa:	9d21      	ldr	r5, [sp, #132]	; 0x84
   30fac:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   30fb0:	9226      	str	r2, [sp, #152]	; 0x98
   30fb2:	fa45 f50e 	asr.w	r5, r5, lr
   30fb6:	fa06 f60e 	lsl.w	r6, r6, lr
   30fba:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
   30fbe:	f04f 0800 	mov.w	r8, #0
   30fc2:	2d01      	cmp	r5, #1
   30fc4:	f340 8563 	ble.w	31a8e <quant_band_stereo+0x10ae>
   30fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30fca:	2b00      	cmp	r3, #0
   30fcc:	f040 87a4 	bne.w	31f18 <quant_band_stereo+0x1538>
   30fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   30fd2:	b143      	cbz	r3, 30fe6 <quant_band_stereo+0x606>
   30fd4:	990d      	ldr	r1, [sp, #52]	; 0x34
   30fd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30fd8:	9822      	ldr	r0, [sp, #136]	; 0x88
   30fda:	fa05 f201 	lsl.w	r2, r5, r1
   30fde:	fa46 f101 	asr.w	r1, r6, r1
   30fe2:	f7fe fd33 	bl	2fa4c <deinterleave_hadamard>
   30fe6:	f8db a000 	ldr.w	sl, [fp]
   30fea:	e9db 0302 	ldrd	r0, r3, [fp, #8]
   30fee:	e9d0 2e18 	ldrd	r2, lr, [r0, #96]	; 0x60
   30ff2:	6881      	ldr	r1, [r0, #8]
   30ff4:	f8db 0014 	ldr.w	r0, [fp, #20]
   30ff8:	900b      	str	r0, [sp, #44]	; 0x2c
   30ffa:	f8db 001c 	ldr.w	r0, [fp, #28]
   30ffe:	900f      	str	r0, [sp, #60]	; 0x3c
   31000:	9823      	ldr	r0, [sp, #140]	; 0x8c
   31002:	fb00 1101 	mla	r1, r0, r1, r1
   31006:	440b      	add	r3, r1
   31008:	990c      	ldr	r1, [sp, #48]	; 0x30
   3100a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
   3100e:	1e4c      	subs	r4, r1, #1
   31010:	f81e 1003 	ldrb.w	r1, [lr, r3]
   31014:	f101 0c01 	add.w	ip, r1, #1
   31018:	eb0e 0003 	add.w	r0, lr, r3
   3101c:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   31020:	f810 200c 	ldrb.w	r2, [r0, ip]
   31024:	4294      	cmp	r4, r2
   31026:	bfdc      	itt	le
   31028:	4661      	movle	r1, ip
   3102a:	f04f 0c00 	movle.w	ip, #0
   3102e:	eb0c 0201 	add.w	r2, ip, r1
   31032:	3201      	adds	r2, #1
   31034:	1052      	asrs	r2, r2, #1
   31036:	f810 9002 	ldrb.w	r9, [r0, r2]
   3103a:	454c      	cmp	r4, r9
   3103c:	bfdc      	itt	le
   3103e:	4611      	movle	r1, r2
   31040:	4662      	movle	r2, ip
   31042:	eb02 0c01 	add.w	ip, r2, r1
   31046:	f10c 0c01 	add.w	ip, ip, #1
   3104a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   3104e:	f810 900c 	ldrb.w	r9, [r0, ip]
   31052:	454c      	cmp	r4, r9
   31054:	bfdc      	itt	le
   31056:	4661      	movle	r1, ip
   31058:	4694      	movle	ip, r2
   3105a:	eb0c 0201 	add.w	r2, ip, r1
   3105e:	3201      	adds	r2, #1
   31060:	1052      	asrs	r2, r2, #1
   31062:	f810 9002 	ldrb.w	r9, [r0, r2]
   31066:	454c      	cmp	r4, r9
   31068:	bfdc      	itt	le
   3106a:	4611      	movle	r1, r2
   3106c:	4662      	movle	r2, ip
   3106e:	eb01 0c02 	add.w	ip, r1, r2
   31072:	f10c 0c01 	add.w	ip, ip, #1
   31076:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   3107a:	f810 900c 	ldrb.w	r9, [r0, ip]
   3107e:	454c      	cmp	r4, r9
   31080:	bfdc      	itt	le
   31082:	4661      	movle	r1, ip
   31084:	4694      	movle	ip, r2
   31086:	eb01 020c 	add.w	r2, r1, ip
   3108a:	3201      	adds	r2, #1
   3108c:	1052      	asrs	r2, r2, #1
   3108e:	f810 9002 	ldrb.w	r9, [r0, r2]
   31092:	454c      	cmp	r4, r9
   31094:	bfdc      	itt	le
   31096:	4611      	movle	r1, r2
   31098:	4662      	movle	r2, ip
   3109a:	f810 c001 	ldrb.w	ip, [r0, r1]
   3109e:	ebac 0c04 	sub.w	ip, ip, r4
   310a2:	2a00      	cmp	r2, #0
   310a4:	f000 83e7 	beq.w	31876 <quant_band_stereo+0xe96>
   310a8:	f810 9002 	ldrb.w	r9, [r0, r2]
   310ac:	eba4 0409 	sub.w	r4, r4, r9
   310b0:	4564      	cmp	r4, ip
   310b2:	4691      	mov	r9, r2
   310b4:	dd02      	ble.n	310bc <quant_band_stereo+0x6dc>
   310b6:	b1a1      	cbz	r1, 310e2 <quant_band_stereo+0x702>
   310b8:	4689      	mov	r9, r1
   310ba:	460a      	mov	r2, r1
   310bc:	f810 0009 	ldrb.w	r0, [r0, r9]
   310c0:	f8db 1020 	ldr.w	r1, [fp, #32]
   310c4:	3001      	adds	r0, #1
   310c6:	1a09      	subs	r1, r1, r0
   310c8:	2900      	cmp	r1, #0
   310ca:	f8cb 1020 	str.w	r1, [fp, #32]
   310ce:	f280 8375 	bge.w	317bc <quant_band_stereo+0xddc>
   310d2:	4413      	add	r3, r2
   310d4:	4473      	add	r3, lr
   310d6:	4401      	add	r1, r0
   310d8:	3a01      	subs	r2, #1
   310da:	f8cb 1020 	str.w	r1, [fp, #32]
   310de:	f040 8364 	bne.w	317aa <quant_band_stereo+0xdca>
   310e2:	f8db 4004 	ldr.w	r4, [fp, #4]
   310e6:	2c00      	cmp	r4, #0
   310e8:	f000 83ca 	beq.w	31880 <quant_band_stereo+0xea0>
   310ec:	2301      	movs	r3, #1
   310ee:	40ab      	lsls	r3, r5
   310f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   310f2:	3b01      	subs	r3, #1
   310f4:	ea12 0403 	ands.w	r4, r2, r3
   310f8:	f000 874f 	beq.w	31f9a <quant_band_stereo+0x15ba>
   310fc:	485e      	ldr	r0, [pc, #376]	; (31278 <quant_band_stereo+0x898>)
   310fe:	495f      	ldr	r1, [pc, #380]	; (3127c <quant_band_stereo+0x89c>)
   31100:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
   31104:	fb00 1202 	mla	r2, r0, r2, r1
   31108:	fb00 1102 	mla	r1, r0, r2, r1
   3110c:	9822      	ldr	r0, [sp, #136]	; 0x88
   3110e:	2800      	cmp	r0, #0
   31110:	f001 8024 	beq.w	3215c <quant_band_stereo+0x177c>
   31114:	eddf 6a5a 	vldr	s13, [pc, #360]	; 31280 <quant_band_stereo+0x8a0>
   31118:	eddf 7a5a 	vldr	s15, [pc, #360]	; 31284 <quant_band_stereo+0x8a4>
   3111c:	ed90 7a00 	vldr	s14, [r0]
   31120:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   31124:	bf0c      	ite	eq
   31126:	eeb0 6a67 	vmoveq.f32	s12, s15
   3112a:	eeb0 6a66 	vmovne.f32	s12, s13
   3112e:	ee37 7a06 	vadd.f32	s14, s14, s12
   31132:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   31136:	ed87 7a00 	vstr	s14, [r7]
   3113a:	ed90 7a01 	vldr	s14, [r0, #4]
   3113e:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
   31142:	bf18      	it	ne
   31144:	eef0 7a66 	vmovne.f32	s15, s13
   31148:	ee77 7a27 	vadd.f32	s15, s14, s15
   3114c:	edc7 7a01 	vstr	s15, [r7, #4]
   31150:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
   31154:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   31158:	2102      	movs	r1, #2
   3115a:	4638      	mov	r0, r7
   3115c:	f004 faa2 	bl	356a4 <renormalise_vector>
   31160:	f8db 3004 	ldr.w	r3, [fp, #4]
   31164:	930b      	str	r3, [sp, #44]	; 0x2c
   31166:	2b00      	cmp	r3, #0
   31168:	f000 838a 	beq.w	31880 <quant_band_stereo+0xea0>
   3116c:	2d01      	cmp	r5, #1
   3116e:	f300 86de 	bgt.w	31f2e <quant_band_stereo+0x154e>
   31172:	f1b8 0f00 	cmp.w	r8, #0
   31176:	d037      	beq.n	311e8 <quant_band_stereo+0x808>
   31178:	eddf 6a3e 	vldr	s13, [pc, #248]	; 31274 <quant_band_stereo+0x894>
   3117c:	f04f 0a00 	mov.w	sl, #0
   31180:	106d      	asrs	r5, r5, #1
   31182:	0076      	lsls	r6, r6, #1
   31184:	fa24 f305 	lsr.w	r3, r4, r5
   31188:	2d00      	cmp	r5, #0
   3118a:	ea44 0403 	orr.w	r4, r4, r3
   3118e:	ea4f 0e66 	mov.w	lr, r6, asr #1
   31192:	dd25      	ble.n	311e0 <quant_band_stereo+0x800>
   31194:	f1be 0f00 	cmp.w	lr, #0
   31198:	dd22      	ble.n	311e0 <quant_band_stereo+0x800>
   3119a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   3119e:	eb09 0b07 	add.w	fp, r9, r7
   311a2:	463b      	mov	r3, r7
   311a4:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
   311a8:	eb09 0103 	add.w	r1, r9, r3
   311ac:	461a      	mov	r2, r3
   311ae:	2000      	movs	r0, #0
   311b0:	edd2 7a00 	vldr	s15, [r2]
   311b4:	ed91 7a00 	vldr	s14, [r1]
   311b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
   311bc:	ee27 7a26 	vmul.f32	s14, s14, s13
   311c0:	3001      	adds	r0, #1
   311c2:	ee37 6a87 	vadd.f32	s12, s15, s14
   311c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   311ca:	4586      	cmp	lr, r0
   311cc:	ed82 6a00 	vstr	s12, [r2]
   311d0:	edc1 7a00 	vstr	s15, [r1]
   311d4:	4462      	add	r2, ip
   311d6:	4461      	add	r1, ip
   311d8:	d1ea      	bne.n	311b0 <quant_band_stereo+0x7d0>
   311da:	3304      	adds	r3, #4
   311dc:	459b      	cmp	fp, r3
   311de:	d1e3      	bne.n	311a8 <quant_band_stereo+0x7c8>
   311e0:	f10a 0a01 	add.w	sl, sl, #1
   311e4:	45d0      	cmp	r8, sl
   311e6:	d1cb      	bne.n	31180 <quant_band_stereo+0x7a0>
   311e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   311ea:	2b00      	cmp	r3, #0
   311ec:	d054      	beq.n	31298 <quant_band_stereo+0x8b8>
   311ee:	f8df 8098 	ldr.w	r8, [pc, #152]	; 31288 <quant_band_stereo+0x8a8>
   311f2:	eddf 6a20 	vldr	s13, [pc, #128]	; 31274 <quant_band_stereo+0x894>
   311f6:	9521      	str	r5, [sp, #132]	; 0x84
   311f8:	2000      	movs	r0, #0
   311fa:	f04f 0b01 	mov.w	fp, #1
   311fe:	f04f 0a02 	mov.w	sl, #2
   31202:	4699      	mov	r9, r3
   31204:	fa0b fe00 	lsl.w	lr, fp, r0
   31208:	fa4a f600 	asr.w	r6, sl, r0
   3120c:	f1be 0f00 	cmp.w	lr, #0
   31210:	f818 4004 	ldrb.w	r4, [r8, r4]
   31214:	ea4f 0666 	mov.w	r6, r6, asr #1
   31218:	dd3a      	ble.n	31290 <quant_band_stereo+0x8b0>
   3121a:	2e00      	cmp	r6, #0
   3121c:	bfc8      	it	gt
   3121e:	2100      	movgt	r1, #0
   31220:	dd36      	ble.n	31290 <quant_band_stereo+0x8b0>
   31222:	f04f 0c01 	mov.w	ip, #1
   31226:	2500      	movs	r5, #0
   31228:	fa05 f200 	lsl.w	r2, r5, r0
   3122c:	fa0c f300 	lsl.w	r3, ip, r0
   31230:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   31234:	440b      	add	r3, r1
   31236:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   3123a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   3123e:	edd2 7a00 	vldr	s15, [r2]
   31242:	ed93 7a00 	vldr	s14, [r3]
   31246:	ee67 7aa6 	vmul.f32	s15, s15, s13
   3124a:	ee27 7a26 	vmul.f32	s14, s14, s13
   3124e:	3501      	adds	r5, #1
   31250:	ee37 6a87 	vadd.f32	s12, s15, s14
   31254:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31258:	42ae      	cmp	r6, r5
   3125a:	ed82 6a00 	vstr	s12, [r2]
   3125e:	f10c 0c02 	add.w	ip, ip, #2
   31262:	edc3 7a00 	vstr	s15, [r3]
   31266:	d1df      	bne.n	31228 <quant_band_stereo+0x848>
   31268:	3101      	adds	r1, #1
   3126a:	458e      	cmp	lr, r1
   3126c:	d1d9      	bne.n	31222 <quant_band_stereo+0x842>
   3126e:	e00f      	b.n	31290 <quant_band_stereo+0x8b0>
   31270:	00041408 	.word	0x00041408
   31274:	3f3504f3 	.word	0x3f3504f3
   31278:	0019660d 	.word	0x0019660d
   3127c:	3c6ef35f 	.word	0x3c6ef35f
   31280:	3b800000 	.word	0x3b800000
   31284:	bb800000 	.word	0xbb800000
   31288:	000413f8 	.word	0x000413f8
   3128c:	3fb504f3 	.word	0x3fb504f3
   31290:	3001      	adds	r0, #1
   31292:	4548      	cmp	r0, r9
   31294:	d1b6      	bne.n	31204 <quant_band_stereo+0x824>
   31296:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3129a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   3129c:	fa05 f303 	lsl.w	r3, r5, r3
   312a0:	b16a      	cbz	r2, 312be <quant_band_stereo+0x8de>
   312a2:	ed97 7a00 	vldr	s14, [r7]
   312a6:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 3128c <quant_band_stereo+0x8ac>
   312aa:	ee27 7a26 	vmul.f32	s14, s14, s13
   312ae:	ed82 7a00 	vstr	s14, [r2]
   312b2:	edd7 7a01 	vldr	s15, [r7, #4]
   312b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   312ba:	edc2 7a01 	vstr	s15, [r2, #4]
   312be:	edd7 7a01 	vldr	s15, [r7, #4]
   312c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   312c4:	eef8 9ae9 	vcvt.f32.s32	s19, s19
   312c8:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
   312cc:	ee69 9aa7 	vmul.f32	s19, s19, s15
   312d0:	2501      	movs	r5, #1
   312d2:	edc2 9a00 	vstr	s19, [r2]
   312d6:	edd7 7a00 	vldr	s15, [r7]
   312da:	409d      	lsls	r5, r3
   312dc:	ee29 9a27 	vmul.f32	s18, s18, s15
   312e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   312e2:	ed82 9a01 	vstr	s18, [r2, #4]
   312e6:	3d01      	subs	r5, #1
   312e8:	402c      	ands	r4, r5
   312ea:	2b00      	cmp	r3, #0
   312ec:	f43f ad0c 	beq.w	30d08 <quant_band_stereo+0x328>
   312f0:	990a      	ldr	r1, [sp, #40]	; 0x28
   312f2:	9b08      	ldr	r3, [sp, #32]
   312f4:	edd1 7a01 	vldr	s15, [r1, #4]
   312f8:	ed91 7a00 	vldr	s14, [r1]
   312fc:	ee27 7a08 	vmul.f32	s14, s14, s16
   31300:	ee27 8a88 	vmul.f32	s16, s15, s16
   31304:	ed81 7a00 	vstr	s14, [r1]
   31308:	ed81 8a01 	vstr	s16, [r1, #4]
   3130c:	ed93 7a01 	vldr	s14, [r3, #4]
   31310:	edd3 7a00 	vldr	s15, [r3]
   31314:	ee68 7aa7 	vmul.f32	s15, s17, s15
   31318:	ee67 8a28 	vmul.f32	s17, s14, s17
   3131c:	edc3 7a00 	vstr	s15, [r3]
   31320:	edc3 8a01 	vstr	s17, [r3, #4]
   31324:	edd1 6a00 	vldr	s13, [r1]
   31328:	ee76 7ae7 	vsub.f32	s15, s13, s15
   3132c:	edc1 7a00 	vstr	s15, [r1]
   31330:	edd3 7a00 	vldr	s15, [r3]
   31334:	ed93 7a01 	vldr	s14, [r3, #4]
   31338:	ee77 7aa6 	vadd.f32	s15, s15, s13
   3133c:	edc3 7a00 	vstr	s15, [r3]
   31340:	edd1 6a01 	vldr	s13, [r1, #4]
   31344:	ee36 7ac7 	vsub.f32	s14, s13, s14
   31348:	ed81 7a01 	vstr	s14, [r1, #4]
   3134c:	edd3 7a01 	vldr	s15, [r3, #4]
   31350:	ee77 7aa6 	vadd.f32	s15, s15, s13
   31354:	edc3 7a01 	vstr	s15, [r3, #4]
   31358:	e2d6      	b.n	31908 <quant_band_stereo+0xf28>
   3135a:	2600      	movs	r6, #0
   3135c:	6a03      	ldr	r3, [r0, #32]
   3135e:	e00a      	b.n	31376 <quant_band_stereo+0x996>
   31360:	f8db 2004 	ldr.w	r2, [fp, #4]
   31364:	b112      	cbz	r2, 3136c <quant_band_stereo+0x98c>
   31366:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   3136a:	602a      	str	r2, [r5, #0]
   3136c:	42b4      	cmp	r4, r6
   3136e:	463d      	mov	r5, r7
   31370:	f340 820c 	ble.w	3178c <quant_band_stereo+0xdac>
   31374:	2601      	movs	r6, #1
   31376:	2b07      	cmp	r3, #7
   31378:	f04f 0201 	mov.w	r2, #1
   3137c:	4650      	mov	r0, sl
   3137e:	ddef      	ble.n	31360 <quant_band_stereo+0x980>
   31380:	ed95 8a00 	vldr	s16, [r5]
   31384:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   31388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3138c:	bf4c      	ite	mi
   3138e:	2101      	movmi	r1, #1
   31390:	2100      	movpl	r1, #0
   31392:	f7fb fbc7 	bl	2cb24 <ec_enc_bits>
   31396:	f8db 3020 	ldr.w	r3, [fp, #32]
   3139a:	f8db 2004 	ldr.w	r2, [fp, #4]
   3139e:	3b08      	subs	r3, #8
   313a0:	f8cb 3020 	str.w	r3, [fp, #32]
   313a4:	2a00      	cmp	r2, #0
   313a6:	d0e1      	beq.n	3136c <quant_band_stereo+0x98c>
   313a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   313ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   313b0:	d5d9      	bpl.n	31366 <quant_band_stereo+0x986>
   313b2:	4ad4      	ldr	r2, [pc, #848]	; (31704 <quant_band_stereo+0xd24>)
   313b4:	e7d9      	b.n	3136a <quant_band_stereo+0x98a>
   313b6:	2301      	movs	r3, #1
   313b8:	fa03 fb00 	lsl.w	fp, r3, r0
   313bc:	fa4a f800 	asr.w	r8, sl, r0
   313c0:	f1bb 0f00 	cmp.w	fp, #0
   313c4:	fa48 f803 	asr.w	r8, r8, r3
   313c8:	f77f ac6d 	ble.w	30ca6 <quant_band_stereo+0x2c6>
   313cc:	f1b8 0f00 	cmp.w	r8, #0
   313d0:	bfc8      	it	gt
   313d2:	2600      	movgt	r6, #0
   313d4:	f77f ac67 	ble.w	30ca6 <quant_band_stereo+0x2c6>
   313d8:	f04f 0e01 	mov.w	lr, #1
   313dc:	f04f 0c00 	mov.w	ip, #0
   313e0:	fa0c f200 	lsl.w	r2, ip, r0
   313e4:	fa0e f300 	lsl.w	r3, lr, r0
   313e8:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   313ec:	4433      	add	r3, r6
   313ee:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   313f2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   313f6:	edd2 7a00 	vldr	s15, [r2]
   313fa:	ed93 7a00 	vldr	s14, [r3]
   313fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31402:	ee27 7a26 	vmul.f32	s14, s14, s13
   31406:	f10c 0c01 	add.w	ip, ip, #1
   3140a:	ee37 6a87 	vadd.f32	s12, s15, s14
   3140e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31412:	45e0      	cmp	r8, ip
   31414:	ed82 6a00 	vstr	s12, [r2]
   31418:	f10e 0e02 	add.w	lr, lr, #2
   3141c:	edc3 7a00 	vstr	s15, [r3]
   31420:	d1de      	bne.n	313e0 <quant_band_stereo+0xa00>
   31422:	3601      	adds	r6, #1
   31424:	45b3      	cmp	fp, r6
   31426:	d1d7      	bne.n	313d8 <quant_band_stereo+0x9f8>
   31428:	e43d      	b.n	30ca6 <quant_band_stereo+0x2c6>
   3142a:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
   3142e:	9300      	str	r3, [sp, #0]
   31430:	2201      	movs	r2, #1
   31432:	9b07      	ldr	r3, [sp, #28]
   31434:	9908      	ldr	r1, [sp, #32]
   31436:	980a      	ldr	r0, [sp, #40]	; 0x28
   31438:	f004 f972 	bl	35720 <stereo_itheta>
   3143c:	900b      	str	r0, [sp, #44]	; 0x2c
   3143e:	4650      	mov	r0, sl
   31440:	f7fb f958 	bl	2c6f4 <ec_tell_frac>
   31444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31446:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
   3144a:	900d      	str	r0, [sp, #52]	; 0x34
   3144c:	fb03 f609 	mul.w	r6, r3, r9
   31450:	2a00      	cmp	r2, #0
   31452:	f040 823e 	bne.w	318d2 <quant_band_stereo+0xef2>
   31456:	f506 5600 	add.w	r6, r6, #8192	; 0x2000
   3145a:	13b6      	asrs	r6, r6, #14
   3145c:	9b07      	ldr	r3, [sp, #28]
   3145e:	2b02      	cmp	r3, #2
   31460:	f340 8225 	ble.w	318ae <quant_band_stereo+0xece>
   31464:	1064      	asrs	r4, r4, #1
   31466:	1c62      	adds	r2, r4, #1
   31468:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3146c:	42b4      	cmp	r4, r6
   3146e:	eb04 0302 	add.w	r3, r4, r2
   31472:	f2c0 84be 	blt.w	31df2 <quant_band_stereo+0x1412>
   31476:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   3147a:	1cca      	adds	r2, r1, #3
   3147c:	4650      	mov	r0, sl
   3147e:	f7fb f96b 	bl	2c758 <ec_encode>
   31482:	03b6      	lsls	r6, r6, #14
   31484:	fb96 f3f9 	sdiv	r3, r6, r9
   31488:	930b      	str	r3, [sp, #44]	; 0x2c
   3148a:	2b00      	cmp	r3, #0
   3148c:	f000 84e7 	beq.w	31e5e <quant_band_stereo+0x147e>
   31490:	e9dd 0207 	ldrd	r0, r2, [sp, #28]
   31494:	990a      	ldr	r1, [sp, #40]	; 0x28
   31496:	ed9f 6a9c 	vldr	s12, [pc, #624]	; 31708 <quant_band_stereo+0xd28>
   3149a:	460b      	mov	r3, r1
   3149c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   314a0:	edd3 7a00 	vldr	s15, [r3]
   314a4:	ed92 7a00 	vldr	s14, [r2]
   314a8:	ee67 6a86 	vmul.f32	s13, s15, s12
   314ac:	ee67 7a06 	vmul.f32	s15, s14, s12
   314b0:	ee36 7aa7 	vadd.f32	s14, s13, s15
   314b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
   314b8:	eca3 7a01 	vstmia	r3!, {s14}
   314bc:	4299      	cmp	r1, r3
   314be:	ece2 7a01 	vstmia	r2!, {s15}
   314c2:	d1ed      	bne.n	314a0 <quant_band_stereo+0xac0>
   314c4:	4650      	mov	r0, sl
   314c6:	f7fb f915 	bl	2c6f4 <ec_tell_frac>
   314ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   314cc:	1ac0      	subs	r0, r0, r3
   314ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
   314d0:	1a1b      	subs	r3, r3, r0
   314d2:	930c      	str	r3, [sp, #48]	; 0x30
   314d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   314d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   314da:	f47f ab0a 	bne.w	30af2 <quant_band_stereo+0x112>
   314de:	2101      	movs	r1, #1
   314e0:	fa01 f305 	lsl.w	r3, r1, r5
   314e4:	9c07      	ldr	r4, [sp, #28]
   314e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   314e8:	3b01      	subs	r3, #1
   314ea:	40ab      	lsls	r3, r5
   314ec:	2c02      	cmp	r4, #2
   314ee:	ea03 0302 	and.w	r3, r3, r2
   314f2:	f8db 2020 	ldr.w	r2, [fp, #32]
   314f6:	f000 856a 	beq.w	31fce <quant_band_stereo+0x15ee>
   314fa:	9326      	str	r3, [sp, #152]	; 0x98
   314fc:	2300      	movs	r3, #0
   314fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   31500:	9309      	str	r3, [sp, #36]	; 0x24
   31502:	eddf 8a82 	vldr	s17, [pc, #520]	; 3170c <quant_band_stereo+0xd2c>
   31506:	ed9f 8a82 	vldr	s16, [pc, #520]	; 31710 <quant_band_stereo+0xd30>
   3150a:	f7ff bb76 	b.w	30bfa <quant_band_stereo+0x21a>
   3150e:	f8db 8018 	ldr.w	r8, [fp, #24]
   31512:	9b07      	ldr	r3, [sp, #28]
   31514:	f8db c000 	ldr.w	ip, [fp]
   31518:	fb93 f7f5 	sdiv	r7, r3, r5
   3151c:	f1b8 0f00 	cmp.w	r8, #0
   31520:	f340 8248 	ble.w	319b4 <quant_band_stereo+0xfd4>
   31524:	e9cd 7b10 	strd	r7, fp, [sp, #64]	; 0x40
   31528:	497a      	ldr	r1, [pc, #488]	; (31714 <quant_band_stereo+0xd34>)
   3152a:	eddf 6a77 	vldr	s13, [pc, #476]	; 31708 <quant_band_stereo+0xd28>
   3152e:	f8dd a020 	ldr.w	sl, [sp, #32]
   31532:	9521      	str	r5, [sp, #132]	; 0x84
   31534:	2000      	movs	r0, #0
   31536:	4665      	mov	r5, ip
   31538:	469c      	mov	ip, r3
   3153a:	2d00      	cmp	r5, #0
   3153c:	f040 80ee 	bne.w	3171c <quant_band_stereo+0xd3c>
   31540:	f004 030f 	and.w	r3, r4, #15
   31544:	1124      	asrs	r4, r4, #4
   31546:	5ccb      	ldrb	r3, [r1, r3]
   31548:	5d0c      	ldrb	r4, [r1, r4]
   3154a:	3001      	adds	r0, #1
   3154c:	4580      	cmp	r8, r0
   3154e:	ea43 0484 	orr.w	r4, r3, r4, lsl #2
   31552:	d1f2      	bne.n	3153a <quant_band_stereo+0xb5a>
   31554:	9f10      	ldr	r7, [sp, #64]	; 0x40
   31556:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   3155a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   3155e:	46ac      	mov	ip, r5
   31560:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31562:	fa07 f708 	lsl.w	r7, r7, r8
   31566:	fa45 f608 	asr.w	r6, r5, r8
   3156a:	f04f 0800 	mov.w	r8, #0
   3156e:	2e01      	cmp	r6, #1
   31570:	f340 8356 	ble.w	31c20 <quant_band_stereo+0x1240>
   31574:	f1bc 0f00 	cmp.w	ip, #0
   31578:	f040 8546 	bne.w	32008 <quant_band_stereo+0x1628>
   3157c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   3157e:	9403      	str	r4, [sp, #12]
   31580:	2300      	movs	r3, #0
   31582:	9202      	str	r2, [sp, #8]
   31584:	9301      	str	r3, [sp, #4]
   31586:	9600      	str	r6, [sp, #0]
   31588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3158a:	eeb0 0a68 	vmov.f32	s0, s17
   3158e:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   31592:	4658      	mov	r0, fp
   31594:	f7fe fb3a 	bl	2fc0c <quant_partition>
   31598:	f8db 3004 	ldr.w	r3, [fp, #4]
   3159c:	4604      	mov	r4, r0
   3159e:	2b00      	cmp	r3, #0
   315a0:	f040 84ff 	bne.w	31fa2 <quant_band_stereo+0x15c2>
   315a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   315a6:	f8db 0020 	ldr.w	r0, [fp, #32]
   315aa:	1a18      	subs	r0, r3, r0
   315ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   315ae:	1a18      	subs	r0, r3, r0
   315b0:	2818      	cmp	r0, #24
   315b2:	dd07      	ble.n	315c4 <quant_band_stereo+0xbe4>
   315b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   315b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   315ba:	d003      	beq.n	315c4 <quant_band_stereo+0xbe4>
   315bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   315be:	3818      	subs	r0, #24
   315c0:	4403      	add	r3, r0
   315c2:	930d      	str	r3, [sp, #52]	; 0x34
   315c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   315c6:	9305      	str	r3, [sp, #20]
   315c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   315ca:	9304      	str	r3, [sp, #16]
   315cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   315ce:	9303      	str	r3, [sp, #12]
   315d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   315d2:	9302      	str	r3, [sp, #8]
   315d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   315d6:	9a07      	ldr	r2, [sp, #28]
   315d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   315da:	e9cd 5300 	strd	r5, r3, [sp]
   315de:	4658      	mov	r0, fp
   315e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   315e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   315e6:	f7fe ff1b 	bl	30420 <quant_band>
   315ea:	f8db b004 	ldr.w	fp, [fp, #4]
   315ee:	4304      	orrs	r4, r0
   315f0:	f1bb 0f00 	cmp.w	fp, #0
   315f4:	f43f ab88 	beq.w	30d08 <quant_band_stereo+0x328>
   315f8:	9907      	ldr	r1, [sp, #28]
   315fa:	eddf 6a45 	vldr	s13, [pc, #276]	; 31710 <quant_band_stereo+0xd30>
   315fe:	2900      	cmp	r1, #0
   31600:	eeb0 7a66 	vmov.f32	s14, s13
   31604:	dd12      	ble.n	3162c <quant_band_stereo+0xc4c>
   31606:	9808      	ldr	r0, [sp, #32]
   31608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3160a:	4603      	mov	r3, r0
   3160c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   31610:	ecf3 7a01 	vldmia	r3!, {s15}
   31614:	ecf2 5a01 	vldmia	r2!, {s11}
   31618:	ee27 6aa7 	vmul.f32	s12, s15, s15
   3161c:	ee67 7aa5 	vmul.f32	s15, s15, s11
   31620:	4299      	cmp	r1, r3
   31622:	ee76 6a86 	vadd.f32	s13, s13, s12
   31626:	ee37 7a27 	vadd.f32	s14, s14, s15
   3162a:	d1f1      	bne.n	31610 <quant_band_stereo+0xc30>
   3162c:	ee68 7a08 	vmul.f32	s15, s16, s16
   31630:	ee27 7a08 	vmul.f32	s14, s14, s16
   31634:	ee77 6aa6 	vadd.f32	s13, s15, s13
   31638:	ee37 7a07 	vadd.f32	s14, s14, s14
   3163c:	eddf 7a36 	vldr	s15, [pc, #216]	; 31718 <quant_band_stereo+0xd38>
   31640:	ee36 9a87 	vadd.f32	s18, s13, s14
   31644:	ee76 6ac7 	vsub.f32	s13, s13, s14
   31648:	eeb4 9ae7 	vcmpe.f32	s18, s15
   3164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31650:	f100 8154 	bmi.w	318fc <quant_band_stereo+0xf1c>
   31654:	eef4 6ae7 	vcmpe.f32	s13, s15
   31658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3165c:	f100 814e 	bmi.w	318fc <quant_band_stereo+0xf1c>
   31660:	ee16 0a90 	vmov	r0, s13
   31664:	f7db f8fe 	bl	c864 <__aeabi_f2d>
   31668:	ec41 0b10 	vmov	d0, r0, r1
   3166c:	f7e1 ffc0 	bl	135f0 <sqrt>
   31670:	ec51 0b10 	vmov	r0, r1, d0
   31674:	f7db f9d2 	bl	ca1c <__aeabi_d2f>
   31678:	ee07 0a90 	vmov	s15, r0
   3167c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
   31680:	ee19 0a10 	vmov	r0, s18
   31684:	eec9 8aa7 	vdiv.f32	s17, s19, s15
   31688:	f7db f8ec 	bl	c864 <__aeabi_f2d>
   3168c:	ec41 0b10 	vmov	d0, r0, r1
   31690:	f7e1 ffae 	bl	135f0 <sqrt>
   31694:	ec51 0b10 	vmov	r0, r1, d0
   31698:	f7db f9c0 	bl	ca1c <__aeabi_d2f>
   3169c:	9a07      	ldr	r2, [sp, #28]
   3169e:	ee07 0a90 	vmov	s15, r0
   316a2:	2a00      	cmp	r2, #0
   316a4:	ee89 6aa7 	vdiv.f32	s12, s19, s15
   316a8:	f77f ab2e 	ble.w	30d08 <quant_band_stereo+0x328>
   316ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   316ae:	9908      	ldr	r1, [sp, #32]
   316b0:	0092      	lsls	r2, r2, #2
   316b2:	1898      	adds	r0, r3, r2
   316b4:	edd3 7a00 	vldr	s15, [r3]
   316b8:	edd1 6a00 	vldr	s13, [r1]
   316bc:	ee67 7a88 	vmul.f32	s15, s15, s16
   316c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
   316c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
   316c8:	ee27 7a28 	vmul.f32	s14, s14, s17
   316cc:	ee67 7a86 	vmul.f32	s15, s15, s12
   316d0:	eca3 7a01 	vstmia	r3!, {s14}
   316d4:	4298      	cmp	r0, r3
   316d6:	ece1 7a01 	vstmia	r1!, {s15}
   316da:	d1eb      	bne.n	316b4 <quant_band_stereo+0xcd4>
   316dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   316de:	2b00      	cmp	r3, #0
   316e0:	f43f ab12 	beq.w	30d08 <quant_band_stereo+0x328>
   316e4:	9b08      	ldr	r3, [sp, #32]
   316e6:	441a      	add	r2, r3
   316e8:	edd3 7a00 	vldr	s15, [r3]
   316ec:	eef1 7a67 	vneg.f32	s15, s15
   316f0:	ece3 7a01 	vstmia	r3!, {s15}
   316f4:	429a      	cmp	r2, r3
   316f6:	d1f7      	bne.n	316e8 <quant_band_stereo+0xd08>
   316f8:	4620      	mov	r0, r4
   316fa:	b013      	add	sp, #76	; 0x4c
   316fc:	ecbd 8b04 	vpop	{d8-d9}
   31700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31704:	bf800000 	.word	0xbf800000
   31708:	3f3504f3 	.word	0x3f3504f3
   3170c:	3f7ffe00 	.word	0x3f7ffe00
   31710:	00000000 	.word	0x00000000
   31714:	00041408 	.word	0x00041408
   31718:	3a1d4952 	.word	0x3a1d4952
   3171c:	2301      	movs	r3, #1
   3171e:	fa03 fb00 	lsl.w	fp, r3, r0
   31722:	fa4c f900 	asr.w	r9, ip, r0
   31726:	f1bb 0f00 	cmp.w	fp, #0
   3172a:	fa49 f903 	asr.w	r9, r9, r3
   3172e:	f77f af07 	ble.w	31540 <quant_band_stereo+0xb60>
   31732:	f1b9 0f00 	cmp.w	r9, #0
   31736:	bfc8      	it	gt
   31738:	2600      	movgt	r6, #0
   3173a:	f77f af01 	ble.w	31540 <quant_band_stereo+0xb60>
   3173e:	f04f 0e01 	mov.w	lr, #1
   31742:	2700      	movs	r7, #0
   31744:	fa07 f200 	lsl.w	r2, r7, r0
   31748:	fa0e f300 	lsl.w	r3, lr, r0
   3174c:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   31750:	4433      	add	r3, r6
   31752:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   31756:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   3175a:	edd2 7a00 	vldr	s15, [r2]
   3175e:	ed93 7a00 	vldr	s14, [r3]
   31762:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31766:	ee27 7a26 	vmul.f32	s14, s14, s13
   3176a:	3701      	adds	r7, #1
   3176c:	ee37 6a87 	vadd.f32	s12, s15, s14
   31770:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31774:	45b9      	cmp	r9, r7
   31776:	ed82 6a00 	vstr	s12, [r2]
   3177a:	f10e 0e02 	add.w	lr, lr, #2
   3177e:	edc3 7a00 	vstr	s15, [r3]
   31782:	d1df      	bne.n	31744 <quant_band_stereo+0xd64>
   31784:	3601      	adds	r6, #1
   31786:	45b3      	cmp	fp, r6
   31788:	d1d9      	bne.n	3173e <quant_band_stereo+0xd5e>
   3178a:	e6d9      	b.n	31540 <quant_band_stereo+0xb60>
   3178c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   3178e:	2b00      	cmp	r3, #0
   31790:	f000 83ba 	beq.w	31f08 <quant_band_stereo+0x1528>
   31794:	461a      	mov	r2, r3
   31796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31798:	2401      	movs	r4, #1
   3179a:	681b      	ldr	r3, [r3, #0]
   3179c:	6013      	str	r3, [r2, #0]
   3179e:	4620      	mov	r0, r4
   317a0:	b013      	add	sp, #76	; 0x4c
   317a2:	ecbd 8b04 	vpop	{d8-d9}
   317a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317aa:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   317ae:	3001      	adds	r0, #1
   317b0:	1a09      	subs	r1, r1, r0
   317b2:	2900      	cmp	r1, #0
   317b4:	f8cb 1020 	str.w	r1, [fp, #32]
   317b8:	f6ff ac8d 	blt.w	310d6 <quant_band_stereo+0x6f6>
   317bc:	2a07      	cmp	r2, #7
   317be:	dd06      	ble.n	317ce <quant_band_stereo+0xdee>
   317c0:	f002 0307 	and.w	r3, r2, #7
   317c4:	10d2      	asrs	r2, r2, #3
   317c6:	3308      	adds	r3, #8
   317c8:	3a01      	subs	r2, #1
   317ca:	fa03 f202 	lsl.w	r2, r3, r2
   317ce:	f1ba 0f00 	cmp.w	sl, #0
   317d2:	f000 84b6 	beq.w	32142 <quant_band_stereo+0x1762>
   317d6:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
   317da:	f8db 0004 	ldr.w	r0, [fp, #4]
   317de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   317e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   317e4:	e9cd 5300 	strd	r5, r3, [sp]
   317e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   317ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   317ee:	2102      	movs	r1, #2
   317f0:	4638      	mov	r0, r7
   317f2:	f003 fbb7 	bl	34f64 <alg_quant>
   317f6:	4604      	mov	r4, r0
   317f8:	e4b2      	b.n	31160 <quant_band_stereo+0x780>
   317fa:	2002      	movs	r0, #2
   317fc:	fa40 f503 	asr.w	r5, r0, r3
   31800:	2001      	movs	r0, #1
   31802:	fa00 f903 	lsl.w	r9, r0, r3
   31806:	f1b9 0f00 	cmp.w	r9, #0
   3180a:	fa45 f500 	asr.w	r5, r5, r0
   3180e:	f77f abbf 	ble.w	30f90 <quant_band_stereo+0x5b0>
   31812:	2d00      	cmp	r5, #0
   31814:	bfc8      	it	gt
   31816:	2600      	movgt	r6, #0
   31818:	f77f abba 	ble.w	30f90 <quant_band_stereo+0x5b0>
   3181c:	f04f 0801 	mov.w	r8, #1
   31820:	f04f 0c00 	mov.w	ip, #0
   31824:	fa0c f403 	lsl.w	r4, ip, r3
   31828:	fa08 f003 	lsl.w	r0, r8, r3
   3182c:	eb06 0444 	add.w	r4, r6, r4, lsl #1
   31830:	4430      	add	r0, r6
   31832:	eb07 0484 	add.w	r4, r7, r4, lsl #2
   31836:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   3183a:	edd4 7a00 	vldr	s15, [r4]
   3183e:	ed90 7a00 	vldr	s14, [r0]
   31842:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31846:	ee27 7a26 	vmul.f32	s14, s14, s13
   3184a:	f10c 0c01 	add.w	ip, ip, #1
   3184e:	ee37 6a87 	vadd.f32	s12, s15, s14
   31852:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31856:	4565      	cmp	r5, ip
   31858:	ed84 6a00 	vstr	s12, [r4]
   3185c:	f108 0802 	add.w	r8, r8, #2
   31860:	edc0 7a00 	vstr	s15, [r0]
   31864:	d1de      	bne.n	31824 <quant_band_stereo+0xe44>
   31866:	3601      	adds	r6, #1
   31868:	45b1      	cmp	r9, r6
   3186a:	d1d7      	bne.n	3181c <quant_band_stereo+0xe3c>
   3186c:	2900      	cmp	r1, #0
   3186e:	f47f ab66 	bne.w	30f3e <quant_band_stereo+0x55e>
   31872:	f7ff bb8d 	b.w	30f90 <quant_band_stereo+0x5b0>
   31876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   31878:	4562      	cmp	r2, ip
   3187a:	f77f ac32 	ble.w	310e2 <quant_band_stereo+0x702>
   3187e:	e41a      	b.n	310b6 <quant_band_stereo+0x6d6>
   31880:	edd7 7a01 	vldr	s15, [r7, #4]
   31884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31886:	eef8 9ae9 	vcvt.f32.s32	s19, s19
   3188a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
   3188e:	ee67 9aa9 	vmul.f32	s19, s15, s19
   31892:	4620      	mov	r0, r4
   31894:	edc3 9a00 	vstr	s19, [r3]
   31898:	edd7 7a00 	vldr	s15, [r7]
   3189c:	ee29 9a27 	vmul.f32	s18, s18, s15
   318a0:	ed83 9a01 	vstr	s18, [r3, #4]
   318a4:	b013      	add	sp, #76	; 0x4c
   318a6:	ecbd 8b04 	vpop	{d8-d9}
   318aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   318ae:	4631      	mov	r1, r6
   318b0:	f109 0201 	add.w	r2, r9, #1
   318b4:	4650      	mov	r0, sl
   318b6:	f7fb f8e3 	bl	2ca80 <ec_enc_uint>
   318ba:	03b6      	lsls	r6, r6, #14
   318bc:	fb96 f3f9 	sdiv	r3, r6, r9
   318c0:	930b      	str	r3, [sp, #44]	; 0x2c
   318c2:	2b00      	cmp	r3, #0
   318c4:	f000 82cb 	beq.w	31e5e <quant_band_stereo+0x147e>
   318c8:	9b07      	ldr	r3, [sp, #28]
   318ca:	2b00      	cmp	r3, #0
   318cc:	f73f ade0 	bgt.w	31490 <quant_band_stereo+0xab0>
   318d0:	e5f8      	b.n	314c4 <quant_band_stereo+0xae4>
   318d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   318d6:	bfcc      	ite	gt
   318d8:	f647 73ff 	movwgt	r3, #32767	; 0x7fff
   318dc:	4bcd      	ldrle	r3, [pc, #820]	; (31c14 <quant_band_stereo+0x1234>)
   318de:	fb93 f3f9 	sdiv	r3, r3, r9
   318e2:	441e      	add	r6, r3
   318e4:	13b6      	asrs	r6, r6, #14
   318e6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   318ea:	454e      	cmp	r6, r9
   318ec:	bfa8      	it	ge
   318ee:	f109 36ff 	addge.w	r6, r9, #4294967295	; 0xffffffff
   318f2:	2a00      	cmp	r2, #0
   318f4:	f6ff adb2 	blt.w	3145c <quant_band_stereo+0xa7c>
   318f8:	3601      	adds	r6, #1
   318fa:	e5af      	b.n	3145c <quant_band_stereo+0xa7c>
   318fc:	9b07      	ldr	r3, [sp, #28]
   318fe:	990a      	ldr	r1, [sp, #40]	; 0x28
   31900:	9808      	ldr	r0, [sp, #32]
   31902:	009a      	lsls	r2, r3, #2
   31904:	f7da fc2c 	bl	c160 <memcpy>
   31908:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3190a:	2b00      	cmp	r3, #0
   3190c:	f43f a9fc 	beq.w	30d08 <quant_band_stereo+0x328>
   31910:	9b07      	ldr	r3, [sp, #28]
   31912:	2b00      	cmp	r3, #0
   31914:	f77f a9f8 	ble.w	30d08 <quant_band_stereo+0x328>
   31918:	009a      	lsls	r2, r3, #2
   3191a:	e6e3      	b.n	316e4 <quant_band_stereo+0xd04>
   3191c:	f016 0301 	ands.w	r3, r6, #1
   31920:	930b      	str	r3, [sp, #44]	; 0x2c
   31922:	f040 8445 	bne.w	321b0 <quant_band_stereo+0x17d0>
   31926:	2f00      	cmp	r7, #0
   31928:	f000 8459 	beq.w	321de <quant_band_stereo+0x17fe>
   3192c:	f1c7 0900 	rsb	r9, r7, #0
   31930:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
   31934:	eddf 6ab9 	vldr	s13, [pc, #740]	; 31c1c <quant_band_stereo+0x123c>
   31938:	f8dd b020 	ldr.w	fp, [sp, #32]
   3193c:	461f      	mov	r7, r3
   3193e:	e00d      	b.n	3195c <quant_band_stereo+0xf7c>
   31940:	fa04 f305 	lsl.w	r3, r4, r5
   31944:	431c      	orrs	r4, r3
   31946:	f016 0301 	ands.w	r3, r6, #1
   3194a:	f107 0701 	add.w	r7, r7, #1
   3194e:	ea4f 0545 	mov.w	r5, r5, lsl #1
   31952:	f040 80a2 	bne.w	31a9a <quant_band_stereo+0x10ba>
   31956:	454f      	cmp	r7, r9
   31958:	f000 80a8 	beq.w	31aac <quant_band_stereo+0x10cc>
   3195c:	1076      	asrs	r6, r6, #1
   3195e:	f1ba 0f00 	cmp.w	sl, #0
   31962:	d0ed      	beq.n	31940 <quant_band_stereo+0xf60>
   31964:	2d00      	cmp	r5, #0
   31966:	ddeb      	ble.n	31940 <quant_band_stereo+0xf60>
   31968:	2e00      	cmp	r6, #0
   3196a:	dde9      	ble.n	31940 <quant_band_stereo+0xf60>
   3196c:	ea4f 0e85 	mov.w	lr, r5, lsl #2
   31970:	eb0e 080b 	add.w	r8, lr, fp
   31974:	465b      	mov	r3, fp
   31976:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
   3197a:	eb0e 0103 	add.w	r1, lr, r3
   3197e:	461a      	mov	r2, r3
   31980:	2000      	movs	r0, #0
   31982:	edd2 7a00 	vldr	s15, [r2]
   31986:	ed91 7a00 	vldr	s14, [r1]
   3198a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   3198e:	ee27 7a26 	vmul.f32	s14, s14, s13
   31992:	3001      	adds	r0, #1
   31994:	ee37 6a87 	vadd.f32	s12, s15, s14
   31998:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3199c:	42b0      	cmp	r0, r6
   3199e:	ed82 6a00 	vstr	s12, [r2]
   319a2:	edc1 7a00 	vstr	s15, [r1]
   319a6:	4462      	add	r2, ip
   319a8:	4461      	add	r1, ip
   319aa:	d1ea      	bne.n	31982 <quant_band_stereo+0xfa2>
   319ac:	3304      	adds	r3, #4
   319ae:	4598      	cmp	r8, r3
   319b0:	d1e3      	bne.n	3197a <quant_band_stereo+0xf9a>
   319b2:	e7c5      	b.n	31940 <quant_band_stereo+0xf60>
   319b4:	f017 0301 	ands.w	r3, r7, #1
   319b8:	9310      	str	r3, [sp, #64]	; 0x40
   319ba:	f040 840a 	bne.w	321d2 <quant_band_stereo+0x17f2>
   319be:	f1b8 0f00 	cmp.w	r8, #0
   319c2:	f000 83fa 	beq.w	321ba <quant_band_stereo+0x17da>
   319c6:	f1c8 0200 	rsb	r2, r8, #0
   319ca:	462e      	mov	r6, r5
   319cc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   319d0:	9521      	str	r5, [sp, #132]	; 0x84
   319d2:	eddf 6a92 	vldr	s13, [pc, #584]	; 31c1c <quant_band_stereo+0x123c>
   319d6:	f8dd b020 	ldr.w	fp, [sp, #32]
   319da:	4665      	mov	r5, ip
   319dc:	4698      	mov	r8, r3
   319de:	4694      	mov	ip, r2
   319e0:	e00b      	b.n	319fa <quant_band_stereo+0x101a>
   319e2:	fa04 f306 	lsl.w	r3, r4, r6
   319e6:	431c      	orrs	r4, r3
   319e8:	f017 0301 	ands.w	r3, r7, #1
   319ec:	f108 0801 	add.w	r8, r8, #1
   319f0:	ea4f 0646 	mov.w	r6, r6, lsl #1
   319f4:	d155      	bne.n	31aa2 <quant_band_stereo+0x10c2>
   319f6:	45e0      	cmp	r8, ip
   319f8:	d05d      	beq.n	31ab6 <quant_band_stereo+0x10d6>
   319fa:	107f      	asrs	r7, r7, #1
   319fc:	2d00      	cmp	r5, #0
   319fe:	d0f0      	beq.n	319e2 <quant_band_stereo+0x1002>
   31a00:	2e00      	cmp	r6, #0
   31a02:	ddee      	ble.n	319e2 <quant_band_stereo+0x1002>
   31a04:	2f00      	cmp	r7, #0
   31a06:	ddec      	ble.n	319e2 <quant_band_stereo+0x1002>
   31a08:	ea4f 0986 	mov.w	r9, r6, lsl #2
   31a0c:	eb09 0a0b 	add.w	sl, r9, fp
   31a10:	465b      	mov	r3, fp
   31a12:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
   31a16:	eb09 0103 	add.w	r1, r9, r3
   31a1a:	461a      	mov	r2, r3
   31a1c:	2000      	movs	r0, #0
   31a1e:	edd2 7a00 	vldr	s15, [r2]
   31a22:	ed91 7a00 	vldr	s14, [r1]
   31a26:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31a2a:	ee27 7a26 	vmul.f32	s14, s14, s13
   31a2e:	3001      	adds	r0, #1
   31a30:	ee37 6a87 	vadd.f32	s12, s15, s14
   31a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31a38:	42b8      	cmp	r0, r7
   31a3a:	ed82 6a00 	vstr	s12, [r2]
   31a3e:	edc1 7a00 	vstr	s15, [r1]
   31a42:	4472      	add	r2, lr
   31a44:	4471      	add	r1, lr
   31a46:	d1ea      	bne.n	31a1e <quant_band_stereo+0x103e>
   31a48:	3304      	adds	r3, #4
   31a4a:	459a      	cmp	sl, r3
   31a4c:	d1e3      	bne.n	31a16 <quant_band_stereo+0x1036>
   31a4e:	e7c8      	b.n	319e2 <quant_band_stereo+0x1002>
   31a50:	9a25      	ldr	r2, [sp, #148]	; 0x94
   31a52:	f006 0301 	and.w	r3, r6, #1
   31a56:	2a00      	cmp	r2, #0
   31a58:	f000 8393 	beq.w	32182 <quant_band_stereo+0x17a2>
   31a5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   31a5e:	2a00      	cmp	r2, #0
   31a60:	f000 838f 	beq.w	32182 <quant_band_stereo+0x17a2>
   31a64:	2b00      	cmp	r3, #0
   31a66:	f040 8270 	bne.w	31f4a <quant_band_stereo+0x156a>
   31a6a:	f1be 0f00 	cmp.w	lr, #0
   31a6e:	f040 82ed 	bne.w	3204c <quant_band_stereo+0x166c>
   31a72:	2d01      	cmp	r5, #1
   31a74:	f340 83a6 	ble.w	321c4 <quant_band_stereo+0x17e4>
   31a78:	4613      	mov	r3, r2
   31a7a:	cb03      	ldmia	r3!, {r0, r1}
   31a7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   31a7e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
   31a82:	6018      	str	r0, [r3, #0]
   31a84:	6059      	str	r1, [r3, #4]
   31a86:	9322      	str	r3, [sp, #136]	; 0x88
   31a88:	46f0      	mov	r8, lr
   31a8a:	f7ff ba9d 	b.w	30fc8 <quant_band_stereo+0x5e8>
   31a8e:	f8db 3000 	ldr.w	r3, [fp]
   31a92:	930b      	str	r3, [sp, #44]	; 0x2c
   31a94:	469a      	mov	sl, r3
   31a96:	f7ff baa8 	b.w	30fea <quant_band_stereo+0x60a>
   31a9a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   31a9e:	f7ff b915 	b.w	30ccc <quant_band_stereo+0x2ec>
   31aa2:	46ac      	mov	ip, r5
   31aa4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   31aa8:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31aaa:	e560      	b.n	3156e <quant_band_stereo+0xb8e>
   31aac:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   31ab0:	930b      	str	r3, [sp, #44]	; 0x2c
   31ab2:	f7ff b90b 	b.w	30ccc <quant_band_stereo+0x2ec>
   31ab6:	46ac      	mov	ip, r5
   31ab8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   31abc:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31abe:	9310      	str	r3, [sp, #64]	; 0x40
   31ac0:	e555      	b.n	3156e <quant_band_stereo+0xb8e>
   31ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   31ac4:	9403      	str	r4, [sp, #12]
   31ac6:	2200      	movs	r2, #0
   31ac8:	9302      	str	r3, [sp, #8]
   31aca:	9201      	str	r2, [sp, #4]
   31acc:	4658      	mov	r0, fp
   31ace:	9500      	str	r5, [sp, #0]
   31ad0:	eeb0 0a68 	vmov.f32	s0, s17
   31ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   31ad6:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   31ada:	f7fe f897 	bl	2fc0c <quant_partition>
   31ade:	f8db b004 	ldr.w	fp, [fp, #4]
   31ae2:	4604      	mov	r4, r0
   31ae4:	f1bb 0f00 	cmp.w	fp, #0
   31ae8:	f43f a90b 	beq.w	30d02 <quant_band_stereo+0x322>
   31aec:	b3ef      	cbz	r7, 31b6a <quant_band_stereo+0x118a>
   31aee:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   31af2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 31c1c <quant_band_stereo+0x123c>
   31af6:	f8dd b020 	ldr.w	fp, [sp, #32]
   31afa:	f04f 0900 	mov.w	r9, #0
   31afe:	106d      	asrs	r5, r5, #1
   31b00:	0076      	lsls	r6, r6, #1
   31b02:	fa24 f305 	lsr.w	r3, r4, r5
   31b06:	2d00      	cmp	r5, #0
   31b08:	ea44 0403 	orr.w	r4, r4, r3
   31b0c:	ea4f 0e66 	mov.w	lr, r6, asr #1
   31b10:	dd25      	ble.n	31b5e <quant_band_stereo+0x117e>
   31b12:	f1be 0f00 	cmp.w	lr, #0
   31b16:	dd22      	ble.n	31b5e <quant_band_stereo+0x117e>
   31b18:	ea4f 0885 	mov.w	r8, r5, lsl #2
   31b1c:	eb08 0a0b 	add.w	sl, r8, fp
   31b20:	465b      	mov	r3, fp
   31b22:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
   31b26:	eb08 0103 	add.w	r1, r8, r3
   31b2a:	461a      	mov	r2, r3
   31b2c:	2000      	movs	r0, #0
   31b2e:	edd2 7a00 	vldr	s15, [r2]
   31b32:	ed91 7a00 	vldr	s14, [r1]
   31b36:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31b3a:	ee27 7a26 	vmul.f32	s14, s14, s13
   31b3e:	3001      	adds	r0, #1
   31b40:	ee37 6a87 	vadd.f32	s12, s15, s14
   31b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31b48:	4586      	cmp	lr, r0
   31b4a:	ed82 6a00 	vstr	s12, [r2]
   31b4e:	edc1 7a00 	vstr	s15, [r1]
   31b52:	4462      	add	r2, ip
   31b54:	4461      	add	r1, ip
   31b56:	d1ea      	bne.n	31b2e <quant_band_stereo+0x114e>
   31b58:	3304      	adds	r3, #4
   31b5a:	459a      	cmp	sl, r3
   31b5c:	d1e3      	bne.n	31b26 <quant_band_stereo+0x1146>
   31b5e:	f109 0901 	add.w	r9, r9, #1
   31b62:	454f      	cmp	r7, r9
   31b64:	d1cb      	bne.n	31afe <quant_band_stereo+0x111e>
   31b66:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   31b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31b6c:	2b00      	cmp	r3, #0
   31b6e:	d046      	beq.n	31bfe <quant_band_stereo+0x121e>
   31b70:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   31b74:	e9dd be07 	ldrd	fp, lr, [sp, #28]
   31b78:	f8df 809c 	ldr.w	r8, [pc, #156]	; 31c18 <quant_band_stereo+0x1238>
   31b7c:	eddf 6a27 	vldr	s13, [pc, #156]	; 31c1c <quant_band_stereo+0x123c>
   31b80:	9521      	str	r5, [sp, #132]	; 0x84
   31b82:	2600      	movs	r6, #0
   31b84:	f04f 0901 	mov.w	r9, #1
   31b88:	469a      	mov	sl, r3
   31b8a:	fa09 fc06 	lsl.w	ip, r9, r6
   31b8e:	fa4b f506 	asr.w	r5, fp, r6
   31b92:	f1bc 0f00 	cmp.w	ip, #0
   31b96:	f818 4004 	ldrb.w	r4, [r8, r4]
   31b9a:	ea4f 0565 	mov.w	r5, r5, asr #1
   31b9e:	dd28      	ble.n	31bf2 <quant_band_stereo+0x1212>
   31ba0:	2d00      	cmp	r5, #0
   31ba2:	bfc8      	it	gt
   31ba4:	2100      	movgt	r1, #0
   31ba6:	dd24      	ble.n	31bf2 <quant_band_stereo+0x1212>
   31ba8:	2701      	movs	r7, #1
   31baa:	2000      	movs	r0, #0
   31bac:	fa00 f206 	lsl.w	r2, r0, r6
   31bb0:	fa07 f306 	lsl.w	r3, r7, r6
   31bb4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   31bb8:	440b      	add	r3, r1
   31bba:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   31bbe:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
   31bc2:	edd2 7a00 	vldr	s15, [r2]
   31bc6:	ed93 7a00 	vldr	s14, [r3]
   31bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31bce:	ee27 7a26 	vmul.f32	s14, s14, s13
   31bd2:	3001      	adds	r0, #1
   31bd4:	ee37 6a87 	vadd.f32	s12, s15, s14
   31bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31bdc:	4285      	cmp	r5, r0
   31bde:	ed82 6a00 	vstr	s12, [r2]
   31be2:	f107 0702 	add.w	r7, r7, #2
   31be6:	edc3 7a00 	vstr	s15, [r3]
   31bea:	d1df      	bne.n	31bac <quant_band_stereo+0x11cc>
   31bec:	3101      	adds	r1, #1
   31bee:	458c      	cmp	ip, r1
   31bf0:	d1da      	bne.n	31ba8 <quant_band_stereo+0x11c8>
   31bf2:	3601      	adds	r6, #1
   31bf4:	4556      	cmp	r6, sl
   31bf6:	d1c8      	bne.n	31b8a <quant_band_stereo+0x11aa>
   31bf8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   31bfc:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31c00:	fa05 f303 	lsl.w	r3, r5, r3
   31c04:	2501      	movs	r5, #1
   31c06:	409d      	lsls	r5, r3
   31c08:	3d01      	subs	r5, #1
   31c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31c0c:	402c      	ands	r4, r5
   31c0e:	431c      	orrs	r4, r3
   31c10:	e4ee      	b.n	315f0 <quant_band_stereo+0xc10>
   31c12:	bf00      	nop
   31c14:	ffff8001 	.word	0xffff8001
   31c18:	000413f8 	.word	0x000413f8
   31c1c:	3f3504f3 	.word	0x3f3504f3
   31c20:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   31c22:	9403      	str	r4, [sp, #12]
   31c24:	2300      	movs	r3, #0
   31c26:	9202      	str	r2, [sp, #8]
   31c28:	9301      	str	r3, [sp, #4]
   31c2a:	9600      	str	r6, [sp, #0]
   31c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   31c2e:	eeb0 0a68 	vmov.f32	s0, s17
   31c32:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   31c36:	4658      	mov	r0, fp
   31c38:	f7fd ffe8 	bl	2fc0c <quant_partition>
   31c3c:	f8db 3004 	ldr.w	r3, [fp, #4]
   31c40:	4604      	mov	r4, r0
   31c42:	2b00      	cmp	r3, #0
   31c44:	f43f acae 	beq.w	315a4 <quant_band_stereo+0xbc4>
   31c48:	f1b8 0f00 	cmp.w	r8, #0
   31c4c:	d03e      	beq.n	31ccc <quant_band_stereo+0x12ec>
   31c4e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   31c52:	ed5f 6a0e 	vldr	s13, [pc, #-56]	; 31c1c <quant_band_stereo+0x123c>
   31c56:	f8dd b020 	ldr.w	fp, [sp, #32]
   31c5a:	9521      	str	r5, [sp, #132]	; 0x84
   31c5c:	f04f 0a00 	mov.w	sl, #0
   31c60:	1076      	asrs	r6, r6, #1
   31c62:	007f      	lsls	r7, r7, #1
   31c64:	fa24 f306 	lsr.w	r3, r4, r6
   31c68:	2e00      	cmp	r6, #0
   31c6a:	ea44 0403 	orr.w	r4, r4, r3
   31c6e:	ea4f 0c67 	mov.w	ip, r7, asr #1
   31c72:	dd24      	ble.n	31cbe <quant_band_stereo+0x12de>
   31c74:	f1bc 0f00 	cmp.w	ip, #0
   31c78:	dd21      	ble.n	31cbe <quant_band_stereo+0x12de>
   31c7a:	ea4f 0e86 	mov.w	lr, r6, lsl #2
   31c7e:	eb0e 090b 	add.w	r9, lr, fp
   31c82:	465b      	mov	r3, fp
   31c84:	00f5      	lsls	r5, r6, #3
   31c86:	eb0e 0103 	add.w	r1, lr, r3
   31c8a:	461a      	mov	r2, r3
   31c8c:	2000      	movs	r0, #0
   31c8e:	edd2 7a00 	vldr	s15, [r2]
   31c92:	ed91 7a00 	vldr	s14, [r1]
   31c96:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31c9a:	ee27 7a26 	vmul.f32	s14, s14, s13
   31c9e:	3001      	adds	r0, #1
   31ca0:	ee37 6a87 	vadd.f32	s12, s15, s14
   31ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31ca8:	4584      	cmp	ip, r0
   31caa:	ed82 6a00 	vstr	s12, [r2]
   31cae:	edc1 7a00 	vstr	s15, [r1]
   31cb2:	442a      	add	r2, r5
   31cb4:	4429      	add	r1, r5
   31cb6:	d1ea      	bne.n	31c8e <quant_band_stereo+0x12ae>
   31cb8:	3304      	adds	r3, #4
   31cba:	4599      	cmp	r9, r3
   31cbc:	d1e3      	bne.n	31c86 <quant_band_stereo+0x12a6>
   31cbe:	f10a 0a01 	add.w	sl, sl, #1
   31cc2:	45d0      	cmp	r8, sl
   31cc4:	d1cc      	bne.n	31c60 <quant_band_stereo+0x1280>
   31cc6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   31cca:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31cce:	2b00      	cmp	r3, #0
   31cd0:	d048      	beq.n	31d64 <quant_band_stereo+0x1384>
   31cd2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   31cd6:	e9dd be07 	ldrd	fp, lr, [sp, #28]
   31cda:	f8df 8368 	ldr.w	r8, [pc, #872]	; 32044 <quant_band_stereo+0x1664>
   31cde:	eddf 6ad3 	vldr	s13, [pc, #844]	; 3202c <quant_band_stereo+0x164c>
   31ce2:	960f      	str	r6, [sp, #60]	; 0x3c
   31ce4:	2700      	movs	r7, #0
   31ce6:	f04f 0a01 	mov.w	sl, #1
   31cea:	4699      	mov	r9, r3
   31cec:	9521      	str	r5, [sp, #132]	; 0x84
   31cee:	fa0a fc07 	lsl.w	ip, sl, r7
   31cf2:	fa4b f507 	asr.w	r5, fp, r7
   31cf6:	f1bc 0f00 	cmp.w	ip, #0
   31cfa:	f818 4004 	ldrb.w	r4, [r8, r4]
   31cfe:	ea4f 0565 	mov.w	r5, r5, asr #1
   31d02:	dd28      	ble.n	31d56 <quant_band_stereo+0x1376>
   31d04:	2d00      	cmp	r5, #0
   31d06:	bfc8      	it	gt
   31d08:	2100      	movgt	r1, #0
   31d0a:	dd24      	ble.n	31d56 <quant_band_stereo+0x1376>
   31d0c:	2601      	movs	r6, #1
   31d0e:	2000      	movs	r0, #0
   31d10:	fa00 f207 	lsl.w	r2, r0, r7
   31d14:	fa06 f307 	lsl.w	r3, r6, r7
   31d18:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   31d1c:	440b      	add	r3, r1
   31d1e:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   31d22:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
   31d26:	edd2 7a00 	vldr	s15, [r2]
   31d2a:	ed93 7a00 	vldr	s14, [r3]
   31d2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   31d32:	ee27 7a26 	vmul.f32	s14, s14, s13
   31d36:	3001      	adds	r0, #1
   31d38:	ee37 6a87 	vadd.f32	s12, s15, s14
   31d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   31d40:	4285      	cmp	r5, r0
   31d42:	ed82 6a00 	vstr	s12, [r2]
   31d46:	f106 0602 	add.w	r6, r6, #2
   31d4a:	edc3 7a00 	vstr	s15, [r3]
   31d4e:	d1df      	bne.n	31d10 <quant_band_stereo+0x1330>
   31d50:	3101      	adds	r1, #1
   31d52:	458c      	cmp	ip, r1
   31d54:	d1da      	bne.n	31d0c <quant_band_stereo+0x132c>
   31d56:	3701      	adds	r7, #1
   31d58:	45b9      	cmp	r9, r7
   31d5a:	d1c8      	bne.n	31cee <quant_band_stereo+0x130e>
   31d5c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   31d5e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   31d62:	9d21      	ldr	r5, [sp, #132]	; 0x84
   31d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31d66:	fa06 f303 	lsl.w	r3, r6, r3
   31d6a:	2601      	movs	r6, #1
   31d6c:	409e      	lsls	r6, r3
   31d6e:	3e01      	subs	r6, #1
   31d70:	4034      	ands	r4, r6
   31d72:	e417      	b.n	315a4 <quant_band_stereo+0xbc4>
   31d74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   31d76:	3b08      	subs	r3, #8
   31d78:	930c      	str	r3, [sp, #48]	; 0x30
   31d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31d7c:	3008      	adds	r0, #8
   31d7e:	1a10      	subs	r0, r2, r0
   31d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   31d84:	f8cb 0020 	str.w	r0, [fp, #32]
   31d88:	f340 822c 	ble.w	321e4 <quant_band_stereo+0x1804>
   31d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31d8e:	9f08      	ldr	r7, [sp, #32]
   31d90:	930e      	str	r3, [sp, #56]	; 0x38
   31d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   31d94:	2b00      	cmp	r3, #0
   31d96:	f000 80a9 	beq.w	31eec <quant_band_stereo+0x150c>
   31d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31d9c:	ed97 9a00 	vldr	s18, [r7]
   31da0:	edd3 6a01 	vldr	s13, [r3, #4]
   31da4:	ed93 7a00 	vldr	s14, [r3]
   31da8:	edd7 7a01 	vldr	s15, [r7, #4]
   31dac:	ee29 9a26 	vmul.f32	s18, s18, s13
   31db0:	ee67 7a87 	vmul.f32	s15, s15, s14
   31db4:	2201      	movs	r2, #1
   31db6:	ee39 9a67 	vsub.f32	s18, s18, s15
   31dba:	4650      	mov	r0, sl
   31dbc:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   31dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31dc4:	bf4c      	ite	mi
   31dc6:	4611      	movmi	r1, r2
   31dc8:	2100      	movpl	r1, #0
   31dca:	f7fa feab 	bl	2cb24 <ec_enc_bits>
   31dce:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
   31dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31dd6:	bf4c      	ite	mi
   31dd8:	2002      	movmi	r0, #2
   31dda:	2000      	movpl	r0, #0
   31ddc:	1e43      	subs	r3, r0, #1
   31dde:	ee09 3a90 	vmov	s19, r3
   31de2:	f1c0 0301 	rsb	r3, r0, #1
   31de6:	ee09 3a10 	vmov	s18, r3
   31dea:	2300      	movs	r3, #0
   31dec:	9309      	str	r3, [sp, #36]	; 0x24
   31dee:	f7ff b86a 	b.w	30ec6 <quant_band_stereo+0x4e6>
   31df2:	1e71      	subs	r1, r6, #1
   31df4:	1b09      	subs	r1, r1, r4
   31df6:	1b34      	subs	r4, r6, r4
   31df8:	4411      	add	r1, r2
   31dfa:	4422      	add	r2, r4
   31dfc:	f7ff bb3e 	b.w	3147c <quant_band_stereo+0xa9c>
   31e00:	1064      	asrs	r4, r4, #1
   31e02:	1c67      	adds	r7, r4, #1
   31e04:	eb07 0847 	add.w	r8, r7, r7, lsl #1
   31e08:	eb04 0308 	add.w	r3, r4, r8
   31e0c:	4619      	mov	r1, r3
   31e0e:	4650      	mov	r0, sl
   31e10:	930b      	str	r3, [sp, #44]	; 0x2c
   31e12:	f001 ffa9 	bl	33d68 <ec_decode>
   31e16:	4540      	cmp	r0, r8
   31e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31e1a:	f2c0 809e 	blt.w	31f5a <quant_band_stereo+0x157a>
   31e1e:	eba0 0008 	sub.w	r0, r0, r8
   31e22:	4407      	add	r7, r0
   31e24:	42a7      	cmp	r7, r4
   31e26:	f300 80fa 	bgt.w	3201e <quant_band_stereo+0x163e>
   31e2a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   31e2e:	1cca      	adds	r2, r1, #3
   31e30:	4650      	mov	r0, sl
   31e32:	f001 ffab 	bl	33d8c <ec_dec_update>
   31e36:	4650      	mov	r0, sl
   31e38:	03bf      	lsls	r7, r7, #14
   31e3a:	fb97 f4f9 	sdiv	r4, r7, r9
   31e3e:	940b      	str	r4, [sp, #44]	; 0x2c
   31e40:	f7fa fc58 	bl	2c6f4 <ec_tell_frac>
   31e44:	9b20      	ldr	r3, [sp, #128]	; 0x80
   31e46:	1b80      	subs	r0, r0, r6
   31e48:	1a1b      	subs	r3, r3, r0
   31e4a:	930c      	str	r3, [sp, #48]	; 0x30
   31e4c:	2c00      	cmp	r4, #0
   31e4e:	f47e ae4b 	bne.w	30ae8 <quant_band_stereo+0x108>
   31e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   31e54:	9309      	str	r3, [sp, #36]	; 0x24
   31e56:	f8db 2020 	ldr.w	r2, [fp, #32]
   31e5a:	f7fe bf71 	b.w	30d40 <quant_band_stereo+0x360>
   31e5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   31e60:	f8d8 3008 	ldr.w	r3, [r8, #8]
   31e64:	ed9f 8a72 	vldr	s16, [pc, #456]	; 32030 <quant_band_stereo+0x1650>
   31e68:	eb01 0287 	add.w	r2, r1, r7, lsl #2
   31e6c:	edd2 8a00 	vldr	s17, [r2]
   31e70:	441f      	add	r7, r3
   31e72:	eb01 0387 	add.w	r3, r1, r7, lsl #2
   31e76:	ed93 9a00 	vldr	s18, [r3]
   31e7a:	ee68 7aa8 	vmul.f32	s15, s17, s17
   31e7e:	ee29 7a09 	vmul.f32	s14, s18, s18
   31e82:	ee77 7a88 	vadd.f32	s15, s15, s16
   31e86:	ee77 7a87 	vadd.f32	s15, s15, s14
   31e8a:	ee17 0a90 	vmov	r0, s15
   31e8e:	f7da fce9 	bl	c864 <__aeabi_f2d>
   31e92:	ec41 0b10 	vmov	d0, r0, r1
   31e96:	f7e1 fbab 	bl	135f0 <sqrt>
   31e9a:	ec51 0b10 	vmov	r0, r1, d0
   31e9e:	f7da fdbd 	bl	ca1c <__aeabi_d2f>
   31ea2:	ee07 0a90 	vmov	s15, r0
   31ea6:	9907      	ldr	r1, [sp, #28]
   31ea8:	ee37 8a88 	vadd.f32	s16, s15, s16
   31eac:	2900      	cmp	r1, #0
   31eae:	ee89 6a08 	vdiv.f32	s12, s18, s16
   31eb2:	eec8 6a88 	vdiv.f32	s13, s17, s16
   31eb6:	dd12      	ble.n	31ede <quant_band_stereo+0x14fe>
   31eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
   31eba:	9a08      	ldr	r2, [sp, #32]
   31ebc:	4603      	mov	r3, r0
   31ebe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   31ec2:	edd3 7a00 	vldr	s15, [r3]
   31ec6:	ecb2 7a01 	vldmia	r2!, {s14}
   31eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
   31ece:	ee26 7a07 	vmul.f32	s14, s12, s14
   31ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
   31ed6:	ece3 7a01 	vstmia	r3!, {s15}
   31eda:	4299      	cmp	r1, r3
   31edc:	d1f1      	bne.n	31ec2 <quant_band_stereo+0x14e2>
   31ede:	4650      	mov	r0, sl
   31ee0:	f7fa fc08 	bl	2c6f4 <ec_tell_frac>
   31ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31ee6:	1ac0      	subs	r0, r0, r3
   31ee8:	f7fe bf1f 	b.w	30d2a <quant_band_stereo+0x34a>
   31eec:	4650      	mov	r0, sl
   31eee:	2101      	movs	r1, #1
   31ef0:	f002 f8de 	bl	340b0 <ec_dec_bits>
   31ef4:	0040      	lsls	r0, r0, #1
   31ef6:	1e43      	subs	r3, r0, #1
   31ef8:	ee09 3a90 	vmov	s19, r3
   31efc:	f1c0 0301 	rsb	r3, r0, #1
   31f00:	ee09 3a10 	vmov	s18, r3
   31f04:	f7fe bfdf 	b.w	30ec6 <quant_band_stereo+0x4e6>
   31f08:	2401      	movs	r4, #1
   31f0a:	f7fe befd 	b.w	30d08 <quant_band_stereo+0x328>
   31f0e:	2300      	movs	r3, #0
   31f10:	9a25      	ldr	r2, [sp, #148]	; 0x94
   31f12:	930d      	str	r3, [sp, #52]	; 0x34
   31f14:	9222      	str	r2, [sp, #136]	; 0x88
   31f16:	4698      	mov	r8, r3
   31f18:	990d      	ldr	r1, [sp, #52]	; 0x34
   31f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31f1c:	fa05 f201 	lsl.w	r2, r5, r1
   31f20:	4638      	mov	r0, r7
   31f22:	fa46 f101 	asr.w	r1, r6, r1
   31f26:	f7fd fd91 	bl	2fa4c <deinterleave_hadamard>
   31f2a:	f7ff b851 	b.w	30fd0 <quant_band_stereo+0x5f0>
   31f2e:	990d      	ldr	r1, [sp, #52]	; 0x34
   31f30:	9b10      	ldr	r3, [sp, #64]	; 0x40
   31f32:	fa05 f201 	lsl.w	r2, r5, r1
   31f36:	4638      	mov	r0, r7
   31f38:	fa46 f101 	asr.w	r1, r6, r1
   31f3c:	f7fd fdf6 	bl	2fb2c <interleave_hadamard>
   31f40:	f8db 3004 	ldr.w	r3, [fp, #4]
   31f44:	930b      	str	r3, [sp, #44]	; 0x2c
   31f46:	f7ff b914 	b.w	31172 <quant_band_stereo+0x792>
   31f4a:	2d01      	cmp	r5, #1
   31f4c:	f300 8121 	bgt.w	32192 <quant_band_stereo+0x17b2>
   31f50:	2300      	movs	r3, #0
   31f52:	930d      	str	r3, [sp, #52]	; 0x34
   31f54:	4698      	mov	r8, r3
   31f56:	f7ff b848 	b.w	30fea <quant_band_stereo+0x60a>
   31f5a:	4f36      	ldr	r7, [pc, #216]	; (32034 <quant_band_stereo+0x1654>)
   31f5c:	fb87 2700 	smull	r2, r7, r7, r0
   31f60:	eba7 77e0 	sub.w	r7, r7, r0, asr #31
   31f64:	e75e      	b.n	31e24 <quant_band_stereo+0x1444>
   31f66:	2102      	movs	r1, #2
   31f68:	4650      	mov	r0, sl
   31f6a:	f001 ff61 	bl	33e30 <ec_dec_bit_logp>
   31f6e:	9009      	str	r0, [sp, #36]	; 0x24
   31f70:	f7fe bed2 	b.w	30d18 <quant_band_stereo+0x338>
   31f74:	9b07      	ldr	r3, [sp, #28]
   31f76:	2b00      	cmp	r3, #0
   31f78:	dd0c      	ble.n	31f94 <quant_band_stereo+0x15b4>
   31f7a:	9a08      	ldr	r2, [sp, #32]
   31f7c:	4619      	mov	r1, r3
   31f7e:	4613      	mov	r3, r2
   31f80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   31f84:	edd3 7a00 	vldr	s15, [r3]
   31f88:	eef1 7a67 	vneg.f32	s15, s15
   31f8c:	ece3 7a01 	vstmia	r3!, {s15}
   31f90:	429a      	cmp	r2, r3
   31f92:	d1f7      	bne.n	31f84 <quant_band_stereo+0x15a4>
   31f94:	2601      	movs	r6, #1
   31f96:	f7fe bf3a 	b.w	30e0e <quant_band_stereo+0x42e>
   31f9a:	603c      	str	r4, [r7, #0]
   31f9c:	607c      	str	r4, [r7, #4]
   31f9e:	f7ff b8df 	b.w	31160 <quant_band_stereo+0x780>
   31fa2:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
   31fa6:	9808      	ldr	r0, [sp, #32]
   31fa8:	fa06 f201 	lsl.w	r2, r6, r1
   31fac:	fa47 f101 	asr.w	r1, r7, r1
   31fb0:	f7fd fdbc 	bl	2fb2c <interleave_hadamard>
   31fb4:	e648      	b.n	31c48 <quant_band_stereo+0x1268>
   31fb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   31fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   31fba:	9808      	ldr	r0, [sp, #32]
   31fbc:	fa05 f201 	lsl.w	r2, r5, r1
   31fc0:	fa46 f101 	asr.w	r1, r6, r1
   31fc4:	f7fd fdb2 	bl	2fb2c <interleave_hadamard>
   31fc8:	f8db b004 	ldr.w	fp, [fp, #4]
   31fcc:	e58e      	b.n	31aec <quant_band_stereo+0x110c>
   31fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31fd0:	930e      	str	r3, [sp, #56]	; 0x38
   31fd2:	1a10      	subs	r0, r2, r0
   31fd4:	2300      	movs	r3, #0
   31fd6:	f8cb 0020 	str.w	r0, [fp, #32]
   31fda:	ee09 1a10 	vmov	s18, r1
   31fde:	9f08      	ldr	r7, [sp, #32]
   31fe0:	eddf 9a15 	vldr	s19, [pc, #84]	; 32038 <quant_band_stereo+0x1658>
   31fe4:	9309      	str	r3, [sp, #36]	; 0x24
   31fe6:	eddf 8a15 	vldr	s17, [pc, #84]	; 3203c <quant_band_stereo+0x165c>
   31fea:	ed9f 8a15 	vldr	s16, [pc, #84]	; 32040 <quant_band_stereo+0x1660>
   31fee:	f7fe bf6a 	b.w	30ec6 <quant_band_stereo+0x4e6>
   31ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   31ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   31ff6:	9808      	ldr	r0, [sp, #32]
   31ff8:	fa05 f201 	lsl.w	r2, r5, r1
   31ffc:	fa46 f101 	asr.w	r1, r6, r1
   32000:	f7fd fd24 	bl	2fa4c <deinterleave_hadamard>
   32004:	f7fe be69 	b.w	30cda <quant_band_stereo+0x2fa>
   32008:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
   3200c:	9808      	ldr	r0, [sp, #32]
   3200e:	fa06 f201 	lsl.w	r2, r6, r1
   32012:	fa47 f101 	asr.w	r1, r7, r1
   32016:	f7fd fd19 	bl	2fa4c <deinterleave_hadamard>
   3201a:	f7ff baaf 	b.w	3157c <quant_band_stereo+0xb9c>
   3201e:	1e79      	subs	r1, r7, #1
   32020:	1b09      	subs	r1, r1, r4
   32022:	1b3c      	subs	r4, r7, r4
   32024:	4441      	add	r1, r8
   32026:	eb04 0208 	add.w	r2, r4, r8
   3202a:	e701      	b.n	31e30 <quant_band_stereo+0x1450>
   3202c:	3f3504f3 	.word	0x3f3504f3
   32030:	26901d7d 	.word	0x26901d7d
   32034:	55555556 	.word	0x55555556
   32038:	ffffffff 	.word	0xffffffff
   3203c:	3f7ffe00 	.word	0x3f7ffe00
   32040:	00000000 	.word	0x00000000
   32044:	000413f8 	.word	0x000413f8
   32048:	3f3504f3 	.word	0x3f3504f3
   3204c:	4613      	mov	r3, r2
   3204e:	cb03      	ldmia	r3!, {r0, r1}
   32050:	9b25      	ldr	r3, [sp, #148]	; 0x94
   32052:	9322      	str	r3, [sp, #136]	; 0x88
   32054:	6018      	str	r0, [r3, #0]
   32056:	6059      	str	r1, [r3, #4]
   32058:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   3205c:	ed1f 6a06 	vldr	s12, [pc, #-24]	; 32048 <quant_band_stereo+0x1668>
   32060:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
   32064:	46bb      	mov	fp, r7
   32066:	9f22      	ldr	r7, [sp, #136]	; 0x88
   32068:	f04f 0800 	mov.w	r8, #0
   3206c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3206e:	1076      	asrs	r6, r6, #1
   32070:	bbf3      	cbnz	r3, 320f0 <quant_band_stereo+0x1710>
   32072:	b33f      	cbz	r7, 320c4 <quant_band_stereo+0x16e4>
   32074:	2d00      	cmp	r5, #0
   32076:	dd25      	ble.n	320c4 <quant_band_stereo+0x16e4>
   32078:	2e01      	cmp	r6, #1
   3207a:	d123      	bne.n	320c4 <quant_band_stereo+0x16e4>
   3207c:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   32080:	4639      	mov	r1, r7
   32082:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   32086:	2400      	movs	r4, #0
   32088:	eb0c 0201 	add.w	r2, ip, r1
   3208c:	460b      	mov	r3, r1
   3208e:	2000      	movs	r0, #0
   32090:	edd3 7a00 	vldr	s15, [r3]
   32094:	ed92 7a00 	vldr	s14, [r2]
   32098:	ee67 7a86 	vmul.f32	s15, s15, s12
   3209c:	ee27 7a06 	vmul.f32	s14, s14, s12
   320a0:	3001      	adds	r0, #1
   320a2:	ee77 6a87 	vadd.f32	s13, s15, s14
   320a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   320aa:	2801      	cmp	r0, #1
   320ac:	edc3 6a00 	vstr	s13, [r3]
   320b0:	edc2 7a00 	vstr	s15, [r2]
   320b4:	4453      	add	r3, sl
   320b6:	4452      	add	r2, sl
   320b8:	d1ea      	bne.n	32090 <quant_band_stereo+0x16b0>
   320ba:	3401      	adds	r4, #1
   320bc:	42ac      	cmp	r4, r5
   320be:	f101 0104 	add.w	r1, r1, #4
   320c2:	dbe1      	blt.n	32088 <quant_band_stereo+0x16a8>
   320c4:	fa09 f305 	lsl.w	r3, r9, r5
   320c8:	ea49 0903 	orr.w	r9, r9, r3
   320cc:	f016 0301 	ands.w	r3, r6, #1
   320d0:	f108 0801 	add.w	r8, r8, #1
   320d4:	ea4f 0545 	mov.w	r5, r5, lsl #1
   320d8:	d12a      	bne.n	32130 <quant_band_stereo+0x1750>
   320da:	eb18 0f0e 	cmn.w	r8, lr
   320de:	d4c5      	bmi.n	3206c <quant_band_stereo+0x168c>
   320e0:	465f      	mov	r7, fp
   320e2:	930d      	str	r3, [sp, #52]	; 0x34
   320e4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   320e8:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   320ec:	f7fe bf69 	b.w	30fc2 <quant_band_stereo+0x5e2>
   320f0:	2d00      	cmp	r5, #0
   320f2:	dde7      	ble.n	320c4 <quant_band_stereo+0x16e4>
   320f4:	2e01      	cmp	r6, #1
   320f6:	d1e5      	bne.n	320c4 <quant_band_stereo+0x16e4>
   320f8:	ea4f 0c85 	mov.w	ip, r5, lsl #2
   320fc:	eb0b 010c 	add.w	r1, fp, ip
   32100:	465b      	mov	r3, fp
   32102:	eb0c 0203 	add.w	r2, ip, r3
   32106:	edd2 7a00 	vldr	s15, [r2]
   3210a:	ed93 7a00 	vldr	s14, [r3]
   3210e:	ee67 6a86 	vmul.f32	s13, s15, s12
   32112:	ee67 7a06 	vmul.f32	s15, s14, s12
   32116:	ee37 7aa6 	vadd.f32	s14, s15, s13
   3211a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   3211e:	eca3 7a01 	vstmia	r3!, {s14}
   32122:	4299      	cmp	r1, r3
   32124:	edc2 7a00 	vstr	s15, [r2]
   32128:	d1eb      	bne.n	32102 <quant_band_stereo+0x1722>
   3212a:	2f00      	cmp	r7, #0
   3212c:	d1a8      	bne.n	32080 <quant_band_stereo+0x16a0>
   3212e:	e7c9      	b.n	320c4 <quant_band_stereo+0x16e4>
   32130:	2300      	movs	r3, #0
   32132:	465f      	mov	r7, fp
   32134:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
   32138:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   3213c:	930d      	str	r3, [sp, #52]	; 0x34
   3213e:	f7fe bf40 	b.w	30fc2 <quant_band_stereo+0x5e2>
   32142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   32144:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   32148:	e9cd 5300 	strd	r5, r3, [sp]
   3214c:	2102      	movs	r1, #2
   3214e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   32150:	4638      	mov	r0, r7
   32152:	f003 f9dd 	bl	35510 <alg_unquant>
   32156:	4604      	mov	r4, r0
   32158:	f7ff b802 	b.w	31160 <quant_band_stereo+0x780>
   3215c:	1512      	asrs	r2, r2, #20
   3215e:	1508      	asrs	r0, r1, #20
   32160:	ee07 0a10 	vmov	s14, r0
   32164:	ee07 2a90 	vmov	s15, r2
   32168:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   3216c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   32170:	461c      	mov	r4, r3
   32172:	edc7 7a00 	vstr	s15, [r7]
   32176:	f8cb 1028 	str.w	r1, [fp, #40]	; 0x28
   3217a:	ed87 7a01 	vstr	s14, [r7, #4]
   3217e:	f7fe bfe7 	b.w	31150 <quant_band_stereo+0x770>
   32182:	2b00      	cmp	r3, #0
   32184:	d132      	bne.n	321ec <quant_band_stereo+0x180c>
   32186:	f1be 0f00 	cmp.w	lr, #0
   3218a:	f47f af65 	bne.w	32058 <quant_band_stereo+0x1678>
   3218e:	f7fe bf14 	b.w	30fba <quant_band_stereo+0x5da>
   32192:	4613      	mov	r3, r2
   32194:	cb03      	ldmia	r3!, {r0, r1}
   32196:	9b25      	ldr	r3, [sp, #148]	; 0x94
   32198:	6018      	str	r0, [r3, #0]
   3219a:	6059      	str	r1, [r3, #4]
   3219c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3219e:	2b00      	cmp	r3, #0
   321a0:	f47f aeb5 	bne.w	31f0e <quant_band_stereo+0x152e>
   321a4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   321a6:	930d      	str	r3, [sp, #52]	; 0x34
   321a8:	9222      	str	r2, [sp, #136]	; 0x88
   321aa:	4698      	mov	r8, r3
   321ac:	f7fe bf12 	b.w	30fd4 <quant_band_stereo+0x5f4>
   321b0:	2300      	movs	r3, #0
   321b2:	930b      	str	r3, [sp, #44]	; 0x2c
   321b4:	461f      	mov	r7, r3
   321b6:	f7fe bd89 	b.w	30ccc <quant_band_stereo+0x2ec>
   321ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   321be:	462e      	mov	r6, r5
   321c0:	f7ff b9d5 	b.w	3156e <quant_band_stereo+0xb8e>
   321c4:	2300      	movs	r3, #0
   321c6:	930d      	str	r3, [sp, #52]	; 0x34
   321c8:	4698      	mov	r8, r3
   321ca:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   321ce:	f7fe bf0c 	b.w	30fea <quant_band_stereo+0x60a>
   321d2:	2300      	movs	r3, #0
   321d4:	9310      	str	r3, [sp, #64]	; 0x40
   321d6:	4698      	mov	r8, r3
   321d8:	462e      	mov	r6, r5
   321da:	f7ff b9c8 	b.w	3156e <quant_band_stereo+0xb8e>
   321de:	970b      	str	r7, [sp, #44]	; 0x2c
   321e0:	f7fe bd74 	b.w	30ccc <quant_band_stereo+0x2ec>
   321e4:	9b08      	ldr	r3, [sp, #32]
   321e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   321e8:	930e      	str	r3, [sp, #56]	; 0x38
   321ea:	e5d2      	b.n	31d92 <quant_band_stereo+0x13b2>
   321ec:	2300      	movs	r3, #0
   321ee:	930d      	str	r3, [sp, #52]	; 0x34
   321f0:	4698      	mov	r8, r3
   321f2:	f7fe bee6 	b.w	30fc2 <quant_band_stereo+0x5e2>
   321f6:	bf00      	nop

000321f8 <hysteresis_decision>:
   321f8:	2a00      	cmp	r2, #0
   321fa:	b430      	push	{r4, r5}
   321fc:	dd3d      	ble.n	3227a <hysteresis_decision+0x82>
   321fe:	edd0 7a00 	vldr	s15, [r0]
   32202:	eeb4 0ae7 	vcmpe.f32	s0, s15
   32206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3220a:	d436      	bmi.n	3227a <hysteresis_decision+0x82>
   3220c:	1d05      	adds	r5, r0, #4
   3220e:	2400      	movs	r4, #0
   32210:	e006      	b.n	32220 <hysteresis_decision+0x28>
   32212:	ecf5 7a01 	vldmia	r5!, {s15}
   32216:	eef4 7ac0 	vcmpe.f32	s15, s0
   3221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3221e:	dc02      	bgt.n	32226 <hysteresis_decision+0x2e>
   32220:	3401      	adds	r4, #1
   32222:	42a2      	cmp	r2, r4
   32224:	d1f5      	bne.n	32212 <hysteresis_decision+0x1a>
   32226:	42a3      	cmp	r3, r4
   32228:	da11      	bge.n	3224e <hysteresis_decision+0x56>
   3222a:	009a      	lsls	r2, r3, #2
   3222c:	4410      	add	r0, r2
   3222e:	4411      	add	r1, r2
   32230:	edd0 7a00 	vldr	s15, [r0]
   32234:	ed91 7a00 	vldr	s14, [r1]
   32238:	ee77 7a87 	vadd.f32	s15, s15, s14
   3223c:	eef4 7a40 	vcmp.f32	s15, s0
   32240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32244:	bfc8      	it	gt
   32246:	461c      	movgt	r4, r3
   32248:	4620      	mov	r0, r4
   3224a:	bc30      	pop	{r4, r5}
   3224c:	4770      	bx	lr
   3224e:	ddfb      	ble.n	32248 <hysteresis_decision+0x50>
   32250:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   32254:	3a01      	subs	r2, #1
   32256:	0092      	lsls	r2, r2, #2
   32258:	4410      	add	r0, r2
   3225a:	4411      	add	r1, r2
   3225c:	edd0 7a00 	vldr	s15, [r0]
   32260:	ed91 7a00 	vldr	s14, [r1]
   32264:	ee77 7ac7 	vsub.f32	s15, s15, s14
   32268:	eef4 7a40 	vcmp.f32	s15, s0
   3226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32270:	bf48      	it	mi
   32272:	461c      	movmi	r4, r3
   32274:	4620      	mov	r0, r4
   32276:	bc30      	pop	{r4, r5}
   32278:	4770      	bx	lr
   3227a:	2400      	movs	r4, #0
   3227c:	e7d3      	b.n	32226 <hysteresis_decision+0x2e>
   3227e:	bf00      	nop

00032280 <compute_band_energies>:
   32280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32284:	ed2d 8b04 	vpush	{d8-d9}
   32288:	b085      	sub	sp, #20
   3228a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   3228c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   3228e:	6a05      	ldr	r5, [r0, #32]
   32290:	9502      	str	r5, [sp, #8]
   32292:	40b4      	lsls	r4, r6
   32294:	2b00      	cmp	r3, #0
   32296:	9403      	str	r4, [sp, #12]
   32298:	dd47      	ble.n	3232a <compute_band_energies+0xaa>
   3229a:	e9cd 2300 	strd	r2, r3, [sp]
   3229e:	ed9f 9b28 	vldr	d9, [pc, #160]	; 32340 <compute_band_energies+0xc0>
   322a2:	f04f 0900 	mov.w	r9, #0
   322a6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 32348 <compute_band_energies+0xc8>
   322aa:	460f      	mov	r7, r1
   322ac:	4682      	mov	sl, r0
   322ae:	46c8      	mov	r8, r9
   322b0:	9d02      	ldr	r5, [sp, #8]
   322b2:	2400      	movs	r4, #0
   322b4:	f9b5 3000 	ldrsh.w	r3, [r5]
   322b8:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
   322bc:	1ad2      	subs	r2, r2, r3
   322be:	40b2      	lsls	r2, r6
   322c0:	40b3      	lsls	r3, r6
   322c2:	2a00      	cmp	r2, #0
   322c4:	444b      	add	r3, r9
   322c6:	dd35      	ble.n	32334 <compute_band_energies+0xb4>
   322c8:	441a      	add	r2, r3
   322ca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 3234c <compute_band_energies+0xcc>
   322ce:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   322d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   322d6:	ecf3 7a01 	vldmia	r3!, {s15}
   322da:	ee67 7aa7 	vmul.f32	s15, s15, s15
   322de:	429a      	cmp	r2, r3
   322e0:	ee37 7a27 	vadd.f32	s14, s14, s15
   322e4:	d1f7      	bne.n	322d6 <compute_band_energies+0x56>
   322e6:	ee77 7a08 	vadd.f32	s15, s14, s16
   322ea:	ee17 0a90 	vmov	r0, s15
   322ee:	f7da fab9 	bl	c864 <__aeabi_f2d>
   322f2:	ec41 0b10 	vmov	d0, r0, r1
   322f6:	f7e1 f97b 	bl	135f0 <sqrt>
   322fa:	f8da 3008 	ldr.w	r3, [sl, #8]
   322fe:	9a00      	ldr	r2, [sp, #0]
   32300:	fb03 4308 	mla	r3, r3, r8, r4
   32304:	ec51 0b10 	vmov	r0, r1, d0
   32308:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
   3230c:	f7da fb86 	bl	ca1c <__aeabi_d2f>
   32310:	9b01      	ldr	r3, [sp, #4]
   32312:	f8cb 0000 	str.w	r0, [fp]
   32316:	3401      	adds	r4, #1
   32318:	42a3      	cmp	r3, r4
   3231a:	d1cb      	bne.n	322b4 <compute_band_energies+0x34>
   3231c:	9b03      	ldr	r3, [sp, #12]
   3231e:	4499      	add	r9, r3
   32320:	9b12      	ldr	r3, [sp, #72]	; 0x48
   32322:	f108 0801 	add.w	r8, r8, #1
   32326:	4598      	cmp	r8, r3
   32328:	dbc2      	blt.n	322b0 <compute_band_energies+0x30>
   3232a:	b005      	add	sp, #20
   3232c:	ecbd 8b04 	vpop	{d8-d9}
   32330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32334:	eeb0 0a49 	vmov.f32	s0, s18
   32338:	eef0 0a69 	vmov.f32	s1, s19
   3233c:	e7db      	b.n	322f6 <compute_band_energies+0x76>
   3233e:	bf00      	nop
   32340:	40000000 	.word	0x40000000
   32344:	3a53ce9a 	.word	0x3a53ce9a
   32348:	129e74d2 	.word	0x129e74d2
   3234c:	00000000 	.word	0x00000000

00032350 <normalise_bands>:
   32350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32354:	b083      	sub	sp, #12
   32356:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   32358:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   3235c:	f8d0 9020 	ldr.w	r9, [r0, #32]
   32360:	fb04 fb0c 	mul.w	fp, r4, ip
   32364:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   32366:	2c00      	cmp	r4, #0
   32368:	dd3a      	ble.n	323e0 <normalise_bands+0x90>
   3236a:	6880      	ldr	r0, [r0, #8]
   3236c:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 323e8 <normalise_bands+0x98>
   32370:	9001      	str	r0, [sp, #4]
   32372:	f04f 0e00 	mov.w	lr, #0
   32376:	46f2      	mov	sl, lr
   32378:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   3237c:	9801      	ldr	r0, [sp, #4]
   3237e:	fb0a f600 	mul.w	r6, sl, r0
   32382:	980c      	ldr	r0, [sp, #48]	; 0x30
   32384:	eb00 0806 	add.w	r8, r0, r6
   32388:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   3238c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   32390:	464f      	mov	r7, r9
   32392:	f9b7 0000 	ldrsh.w	r0, [r7]
   32396:	ecf6 7a01 	vldmia	r6!, {s15}
   3239a:	f937 5f02 	ldrsh.w	r5, [r7, #2]!
   3239e:	ee77 7a86 	vadd.f32	s15, s15, s12
   323a2:	fb0c f000 	mul.w	r0, ip, r0
   323a6:	fb0c f505 	mul.w	r5, ip, r5
   323aa:	42a8      	cmp	r0, r5
   323ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   323b0:	da0e      	bge.n	323d0 <normalise_bands+0x80>
   323b2:	4470      	add	r0, lr
   323b4:	0080      	lsls	r0, r0, #2
   323b6:	4475      	add	r5, lr
   323b8:	180c      	adds	r4, r1, r0
   323ba:	eb01 0585 	add.w	r5, r1, r5, lsl #2
   323be:	4410      	add	r0, r2
   323c0:	ecf4 7a01 	vldmia	r4!, {s15}
   323c4:	ee67 7a87 	vmul.f32	s15, s15, s14
   323c8:	42a5      	cmp	r5, r4
   323ca:	ece0 7a01 	vstmia	r0!, {s15}
   323ce:	d1f7      	bne.n	323c0 <normalise_bands+0x70>
   323d0:	45b0      	cmp	r8, r6
   323d2:	d1de      	bne.n	32392 <normalise_bands+0x42>
   323d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   323d6:	f10a 0a01 	add.w	sl, sl, #1
   323da:	4582      	cmp	sl, r0
   323dc:	44de      	add	lr, fp
   323de:	dbcd      	blt.n	3237c <normalise_bands+0x2c>
   323e0:	b003      	add	sp, #12
   323e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   323e6:	bf00      	nop
   323e8:	129e74d2 	.word	0x129e74d2

000323ec <spreading_decision>:
   323ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323f0:	b089      	sub	sp, #36	; 0x24
   323f2:	6a05      	ldr	r5, [r0, #32]
   323f4:	9e15      	ldr	r6, [sp, #84]	; 0x54
   323f6:	9505      	str	r5, [sp, #20]
   323f8:	eb05 0846 	add.w	r8, r5, r6, lsl #1
   323fc:	f935 4016 	ldrsh.w	r4, [r5, r6, lsl #1]
   32400:	f938 5c02 	ldrsh.w	r5, [r8, #-2]
   32404:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
   32408:	1b64      	subs	r4, r4, r5
   3240a:	fb0e f404 	mul.w	r4, lr, r4
   3240e:	2c08      	cmp	r4, #8
   32410:	e9cd 2306 	strd	r2, r3, [sp, #24]
   32414:	f340 80b4 	ble.w	32580 <spreading_decision+0x194>
   32418:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3241a:	eddf 5a69 	vldr	s11, [pc, #420]	; 325c0 <spreading_decision+0x1d4>
   3241e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 325c4 <spreading_decision+0x1d8>
   32422:	2200      	movs	r2, #0
   32424:	fb03 f30e 	mul.w	r3, r3, lr
   32428:	9201      	str	r2, [sp, #4]
   3242a:	9304      	str	r3, [sp, #16]
   3242c:	9202      	str	r2, [sp, #8]
   3242e:	4692      	mov	sl, r2
   32430:	4691      	mov	r9, r2
   32432:	9203      	str	r2, [sp, #12]
   32434:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
   32438:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3243a:	2b00      	cmp	r3, #0
   3243c:	dd5d      	ble.n	324fa <spreading_decision+0x10e>
   3243e:	9f05      	ldr	r7, [sp, #20]
   32440:	f04f 0c00 	mov.w	ip, #0
   32444:	e003      	b.n	3244e <spreading_decision+0x62>
   32446:	4547      	cmp	r7, r8
   32448:	f10c 0c01 	add.w	ip, ip, #1
   3244c:	d055      	beq.n	324fa <spreading_decision+0x10e>
   3244e:	f9b7 3000 	ldrsh.w	r3, [r7]
   32452:	f937 2f02 	ldrsh.w	r2, [r7, #2]!
   32456:	1ad2      	subs	r2, r2, r3
   32458:	fb0e f202 	mul.w	r2, lr, r2
   3245c:	2a08      	cmp	r2, #8
   3245e:	ddf2      	ble.n	32446 <spreading_decision+0x5a>
   32460:	9c01      	ldr	r4, [sp, #4]
   32462:	ee07 2a90 	vmov	s15, r2
   32466:	fb0e 4303 	mla	r3, lr, r3, r4
   3246a:	eb02 0b03 	add.w	fp, r2, r3
   3246e:	2600      	movs	r6, #0
   32470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   32474:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
   32478:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3247c:	4635      	mov	r5, r6
   3247e:	4634      	mov	r4, r6
   32480:	ecf3 7a01 	vldmia	r3!, {s15}
   32484:	ee67 7aa7 	vmul.f32	s15, s15, s15
   32488:	ee67 7a87 	vmul.f32	s15, s15, s14
   3248c:	eef4 7ae6 	vcmpe.f32	s15, s13
   32490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32494:	eef4 7ae5 	vcmpe.f32	s15, s11
   32498:	bf48      	it	mi
   3249a:	3401      	addmi	r4, #1
   3249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   324a0:	eef4 7ac6 	vcmpe.f32	s15, s12
   324a4:	bf48      	it	mi
   324a6:	3501      	addmi	r5, #1
   324a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   324ac:	bf48      	it	mi
   324ae:	3601      	addmi	r6, #1
   324b0:	459b      	cmp	fp, r3
   324b2:	d1e5      	bne.n	32480 <spreading_decision+0x94>
   324b4:	6883      	ldr	r3, [r0, #8]
   324b6:	3b03      	subs	r3, #3
   324b8:	4563      	cmp	r3, ip
   324ba:	dc06      	bgt.n	324ca <spreading_decision+0xde>
   324bc:	192b      	adds	r3, r5, r4
   324be:	015b      	lsls	r3, r3, #5
   324c0:	fb93 fbf2 	sdiv	fp, r3, r2
   324c4:	9b02      	ldr	r3, [sp, #8]
   324c6:	445b      	add	r3, fp
   324c8:	9302      	str	r3, [sp, #8]
   324ca:	ebb2 0f46 	cmp.w	r2, r6, lsl #1
   324ce:	bfd4      	ite	le
   324d0:	2301      	movle	r3, #1
   324d2:	2300      	movgt	r3, #0
   324d4:	006d      	lsls	r5, r5, #1
   324d6:	4295      	cmp	r5, r2
   324d8:	bfb4      	ite	lt
   324da:	461d      	movlt	r5, r3
   324dc:	1c5d      	addge	r5, r3, #1
   324de:	9b18      	ldr	r3, [sp, #96]	; 0x60
   324e0:	0064      	lsls	r4, r4, #1
   324e2:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
   324e6:	4294      	cmp	r4, r2
   324e8:	bfa8      	it	ge
   324ea:	3501      	addge	r5, #1
   324ec:	4547      	cmp	r7, r8
   324ee:	fb06 9905 	mla	r9, r6, r5, r9
   324f2:	44b2      	add	sl, r6
   324f4:	f10c 0c01 	add.w	ip, ip, #1
   324f8:	d1a9      	bne.n	3244e <spreading_decision+0x62>
   324fa:	9a01      	ldr	r2, [sp, #4]
   324fc:	9c04      	ldr	r4, [sp, #16]
   324fe:	9b03      	ldr	r3, [sp, #12]
   32500:	4422      	add	r2, r4
   32502:	9201      	str	r2, [sp, #4]
   32504:	9a16      	ldr	r2, [sp, #88]	; 0x58
   32506:	3301      	adds	r3, #1
   32508:	4293      	cmp	r3, r2
   3250a:	9303      	str	r3, [sp, #12]
   3250c:	db94      	blt.n	32438 <spreading_decision+0x4c>
   3250e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   32510:	b1a3      	cbz	r3, 3253c <spreading_decision+0x150>
   32512:	9a02      	ldr	r2, [sp, #8]
   32514:	2a00      	cmp	r2, #0
   32516:	d13e      	bne.n	32596 <spreading_decision+0x1aa>
   32518:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3251a:	9a02      	ldr	r2, [sp, #8]
   3251c:	681b      	ldr	r3, [r3, #0]
   3251e:	441a      	add	r2, r3
   32520:	1053      	asrs	r3, r2, #1
   32522:	9a12      	ldr	r2, [sp, #72]	; 0x48
   32524:	6013      	str	r3, [r2, #0]
   32526:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   32528:	6812      	ldr	r2, [r2, #0]
   3252a:	2a02      	cmp	r2, #2
   3252c:	d043      	beq.n	325b6 <spreading_decision+0x1ca>
   3252e:	b902      	cbnz	r2, 32532 <spreading_decision+0x146>
   32530:	3b04      	subs	r3, #4
   32532:	2b16      	cmp	r3, #22
   32534:	dd28      	ble.n	32588 <spreading_decision+0x19c>
   32536:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   32538:	2302      	movs	r3, #2
   3253a:	6013      	str	r3, [r2, #0]
   3253c:	9806      	ldr	r0, [sp, #24]
   3253e:	6802      	ldr	r2, [r0, #0]
   32540:	ea4f 2309 	mov.w	r3, r9, lsl #8
   32544:	fb93 f3fa 	sdiv	r3, r3, sl
   32548:	4413      	add	r3, r2
   3254a:	9a07      	ldr	r2, [sp, #28]
   3254c:	105b      	asrs	r3, r3, #1
   3254e:	f1c2 0103 	rsb	r1, r2, #3
   32552:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   32556:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
   3255a:	3242      	adds	r2, #66	; 0x42
   3255c:	1092      	asrs	r2, r2, #2
   3255e:	2a4f      	cmp	r2, #79	; 0x4f
   32560:	6003      	str	r3, [r0, #0]
   32562:	dd09      	ble.n	32578 <spreading_decision+0x18c>
   32564:	2aff      	cmp	r2, #255	; 0xff
   32566:	dd22      	ble.n	325ae <spreading_decision+0x1c2>
   32568:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   3256c:	bfac      	ite	ge
   3256e:	2000      	movge	r0, #0
   32570:	2001      	movlt	r0, #1
   32572:	b009      	add	sp, #36	; 0x24
   32574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32578:	2003      	movs	r0, #3
   3257a:	b009      	add	sp, #36	; 0x24
   3257c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32580:	2000      	movs	r0, #0
   32582:	b009      	add	sp, #36	; 0x24
   32584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32588:	2b12      	cmp	r3, #18
   3258a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3258c:	bfcc      	ite	gt
   3258e:	2301      	movgt	r3, #1
   32590:	2300      	movle	r3, #0
   32592:	6013      	str	r3, [r2, #0]
   32594:	e7d2      	b.n	3253c <spreading_decision+0x150>
   32596:	6883      	ldr	r3, [r0, #8]
   32598:	9915      	ldr	r1, [sp, #84]	; 0x54
   3259a:	f1c3 0304 	rsb	r3, r3, #4
   3259e:	440b      	add	r3, r1
   325a0:	9916      	ldr	r1, [sp, #88]	; 0x58
   325a2:	fb01 f303 	mul.w	r3, r1, r3
   325a6:	fb92 f3f3 	sdiv	r3, r2, r3
   325aa:	9302      	str	r3, [sp, #8]
   325ac:	e7b4      	b.n	32518 <spreading_decision+0x12c>
   325ae:	2002      	movs	r0, #2
   325b0:	b009      	add	sp, #36	; 0x24
   325b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   325b6:	3304      	adds	r3, #4
   325b8:	2b16      	cmp	r3, #22
   325ba:	dde5      	ble.n	32588 <spreading_decision+0x19c>
   325bc:	e7bb      	b.n	32536 <spreading_decision+0x14a>
   325be:	bf00      	nop
   325c0:	3d800000 	.word	0x3d800000
   325c4:	3c800000 	.word	0x3c800000

000325c8 <haar1>:
   325c8:	2a00      	cmp	r2, #0
   325ca:	dd25      	ble.n	32618 <haar1+0x50>
   325cc:	1049      	asrs	r1, r1, #1
   325ce:	2900      	cmp	r1, #0
   325d0:	dd22      	ble.n	32618 <haar1+0x50>
   325d2:	b4f0      	push	{r4, r5, r6, r7}
   325d4:	eddf 6a11 	vldr	s13, [pc, #68]	; 3261c <haar1+0x54>
   325d8:	0096      	lsls	r6, r2, #2
   325da:	00d5      	lsls	r5, r2, #3
   325dc:	1987      	adds	r7, r0, r6
   325de:	1832      	adds	r2, r6, r0
   325e0:	4603      	mov	r3, r0
   325e2:	2400      	movs	r4, #0
   325e4:	edd3 7a00 	vldr	s15, [r3]
   325e8:	ed92 7a00 	vldr	s14, [r2]
   325ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
   325f0:	ee27 7a26 	vmul.f32	s14, s14, s13
   325f4:	3401      	adds	r4, #1
   325f6:	ee37 6a87 	vadd.f32	s12, s15, s14
   325fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
   325fe:	42a1      	cmp	r1, r4
   32600:	ed83 6a00 	vstr	s12, [r3]
   32604:	edc2 7a00 	vstr	s15, [r2]
   32608:	442b      	add	r3, r5
   3260a:	442a      	add	r2, r5
   3260c:	d1ea      	bne.n	325e4 <haar1+0x1c>
   3260e:	3004      	adds	r0, #4
   32610:	4287      	cmp	r7, r0
   32612:	d1e4      	bne.n	325de <haar1+0x16>
   32614:	bcf0      	pop	{r4, r5, r6, r7}
   32616:	4770      	bx	lr
   32618:	4770      	bx	lr
   3261a:	bf00      	nop
   3261c:	3f3504f3 	.word	0x3f3504f3

00032620 <quant_all_bands>:
   32620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32624:	ed2d 8b04 	vpush	{d8-d9}
   32628:	f2ad 6dd4 	subw	sp, sp, #1748	; 0x6d4
   3262c:	af08      	add	r7, sp, #32
   3262e:	4605      	mov	r5, r0
   32630:	643b      	str	r3, [r7, #64]	; 0x40
   32632:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
   32636:	6739      	str	r1, [r7, #112]	; 0x70
   32638:	6a09      	ldr	r1, [r1, #32]
   3263a:	6539      	str	r1, [r7, #80]	; 0x50
   3263c:	f8d7 46fc 	ldr.w	r4, [r7, #1788]	; 0x6fc
   32640:	f8d7 871c 	ldr.w	r8, [r7, #1820]	; 0x71c
   32644:	f8d7 672c 	ldr.w	r6, [r7, #1836]	; 0x72c
   32648:	66ba      	str	r2, [r7, #104]	; 0x68
   3264a:	2b00      	cmp	r3, #0
   3264c:	f001 808a 	beq.w	33764 <quant_all_bands+0x1144>
   32650:	2800      	cmp	r0, #0
   32652:	f040 8229 	bne.w	32aa8 <quant_all_bands+0x488>
   32656:	2302      	movs	r3, #2
   32658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   3265c:	2301      	movs	r3, #1
   3265e:	63b8      	str	r0, [r7, #56]	; 0x38
   32660:	667b      	str	r3, [r7, #100]	; 0x64
   32662:	f7f4 fa63 	bl	26b2c <save_stack>
   32666:	2301      	movs	r3, #1
   32668:	2c00      	cmp	r4, #0
   3266a:	f000 87fc 	beq.w	33666 <quant_all_bands+0x1046>
   3266e:	fa03 f308 	lsl.w	r3, r3, r8
   32672:	2b01      	cmp	r3, #1
   32674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   32678:	bfd4      	ite	le
   3267a:	2400      	movle	r4, #0
   3267c:	2401      	movgt	r4, #1
   3267e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32680:	6d39      	ldr	r1, [r7, #80]	; 0x50
   32682:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   32684:	689b      	ldr	r3, [r3, #8]
   32686:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
   3268a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   3268e:	3b01      	subs	r3, #1
   32690:	fa02 f208 	lsl.w	r2, r2, r8
   32694:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
   32698:	67fa      	str	r2, [r7, #124]	; 0x7c
   3269a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   3269c:	fa00 fc08 	lsl.w	ip, r0, r8
   326a0:	ebac 0102 	sub.w	r1, ip, r2
   326a4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   326a8:	fb02 f201 	mul.w	r2, r2, r1
   326ac:	0092      	lsls	r2, r2, #2
   326ae:	3207      	adds	r2, #7
   326b0:	f022 0207 	bic.w	r2, r2, #7
   326b4:	ebad 0d02 	sub.w	sp, sp, r2
   326b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
   326ba:	0052      	lsls	r2, r2, #1
   326bc:	f10d 0e20 	add.w	lr, sp, #32
   326c0:	62ba      	str	r2, [r7, #40]	; 0x28
   326c2:	f8c7 e08c 	str.w	lr, [r7, #140]	; 0x8c
   326c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   326c8:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
   326cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
   326ce:	f8c7 e048 	str.w	lr, [r7, #72]	; 0x48
   326d2:	188a      	adds	r2, r1, r2
   326d4:	005b      	lsls	r3, r3, #1
   326d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   326d8:	2d00      	cmp	r5, #0
   326da:	f000 87ae 	beq.w	3363a <quant_all_bands+0x101a>
   326de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   326e0:	2a00      	cmp	r2, #0
   326e2:	f000 87aa 	beq.w	3363a <quant_all_bands+0x101a>
   326e6:	440b      	add	r3, r1
   326e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   326ec:	1a1b      	subs	r3, r3, r0
   326ee:	fa03 f308 	lsl.w	r3, r3, r8
   326f2:	009b      	lsls	r3, r3, #2
   326f4:	3307      	adds	r3, #7
   326f6:	f023 0207 	bic.w	r2, r3, #7
   326fa:	ebad 0d02 	sub.w	sp, sp, r2
   326fe:	aa08      	add	r2, sp, #32
   32700:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   32704:	f023 0307 	bic.w	r3, r3, #7
   32708:	ebad 0d03 	sub.w	sp, sp, r3
   3270c:	aa08      	add	r2, sp, #32
   3270e:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
   32712:	61fa      	str	r2, [r7, #28]
   32714:	ebad 0d03 	sub.w	sp, sp, r3
   32718:	aa08      	add	r2, sp, #32
   3271a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
   3271e:	ebad 0d03 	sub.w	sp, sp, r3
   32722:	6f39      	ldr	r1, [r7, #112]	; 0x70
   32724:	61ba      	str	r2, [r7, #24]
   32726:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
   3272a:	aa08      	add	r2, sp, #32
   3272c:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
   32730:	617a      	str	r2, [r7, #20]
   32732:	ebad 0d03 	sub.w	sp, sp, r3
   32736:	aa08      	add	r2, sp, #32
   32738:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
   3273c:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
   32740:	613a      	str	r2, [r7, #16]
   32742:	ebad 0d03 	sub.w	sp, sp, r3
   32746:	f8d7 26f4 	ldr.w	r2, [r7, #1780]	; 0x6f4
   3274a:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
   3274e:	6e79      	ldr	r1, [r7, #100]	; 0x64
   32750:	f8d7 3724 	ldr.w	r3, [r7, #1828]	; 0x724
   32754:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
   32758:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
   3275c:	aa08      	add	r2, sp, #32
   3275e:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
   32762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32764:	6c3c      	ldr	r4, [r7, #64]	; 0x40
   32766:	60fa      	str	r2, [r7, #12]
   32768:	f8d7 2718 	ldr.w	r2, [r7, #1816]	; 0x718
   3276c:	681b      	ldr	r3, [r3, #0]
   3276e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
   32772:	42a1      	cmp	r1, r4
   32774:	f04f 0200 	mov.w	r2, #0
   32778:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
   3277c:	f8c7 612c 	str.w	r6, [r7, #300]	; 0x12c
   32780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   32784:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
   32788:	f280 8436 	bge.w	32ff8 <quant_all_bands+0x9d8>
   3278c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   32790:	f04f 0a01 	mov.w	sl, #1
   32794:	fa0a f303 	lsl.w	r3, sl, r3
   32798:	3b01      	subs	r3, #1
   3279a:	647b      	str	r3, [r7, #68]	; 0x44
   3279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3279e:	1c98      	adds	r0, r3, #2
   327a0:	3304      	adds	r3, #4
   327a2:	6278      	str	r0, [r7, #36]	; 0x24
   327a4:	623b      	str	r3, [r7, #32]
   327a6:	4620      	mov	r0, r4
   327a8:	1e63      	subs	r3, r4, #1
   327aa:	f8d7 4708 	ldr.w	r4, [r7, #1800]	; 0x708
   327ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   327b2:	eb01 050a 	add.w	r5, r1, sl
   327b6:	42a1      	cmp	r1, r4
   327b8:	65fd      	str	r5, [r7, #92]	; 0x5c
   327ba:	f280 868e 	bge.w	334da <quant_all_bands+0xeba>
   327be:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
   327c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   327c6:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   327ca:	4622      	mov	r2, r4
   327cc:	fb05 f202 	mul.w	r2, r5, r2
   327d0:	3b01      	subs	r3, #1
   327d2:	f8d7 56f8 	ldr.w	r5, [r7, #1784]	; 0x6f8
   327d6:	eddf 8acc 	vldr	s17, [pc, #816]	; 32b08 <quant_all_bands+0x4e8>
   327da:	009b      	lsls	r3, r3, #2
   327dc:	441d      	add	r5, r3
   327de:	66fd      	str	r5, [r7, #108]	; 0x6c
   327e0:	f8d7 570c 	ldr.w	r5, [r7, #1804]	; 0x70c
   327e4:	18eb      	adds	r3, r5, r3
   327e6:	657b      	str	r3, [r7, #84]	; 0x54
   327e8:	4613      	mov	r3, r2
   327ea:	f8d7 26f0 	ldr.w	r2, [r7, #1776]	; 0x6f0
   327ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   327f0:	441a      	add	r2, r3
   327f2:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
   327f6:	65ba      	str	r2, [r7, #88]	; 0x58
   327f8:	4283      	cmp	r3, r0
   327fa:	bfa8      	it	ge
   327fc:	4603      	movge	r3, r0
   327fe:	633b      	str	r3, [r7, #48]	; 0x30
   32800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   32806:	460b      	mov	r3, r1
   32808:	fb04 f303 	mul.w	r3, r4, r3
   3280c:	637b      	str	r3, [r7, #52]	; 0x34
   3280e:	460c      	mov	r4, r1
   32810:	4645      	mov	r5, r8
   32812:	e0da      	b.n	329ca <quant_all_bands+0x3aa>
   32814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   32816:	6859      	ldr	r1, [r3, #4]
   32818:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
   3281c:	f643 70ff 	movw	r0, #16383	; 0x3fff
   32820:	1b1b      	subs	r3, r3, r4
   32822:	4282      	cmp	r2, r0
   32824:	bfa8      	it	ge
   32826:	4602      	movge	r2, r0
   32828:	2b03      	cmp	r3, #3
   3282a:	bfa8      	it	ge
   3282c:	2303      	movge	r3, #3
   3282e:	f8d7 0714 	ldr.w	r0, [r7, #1812]	; 0x714
   32832:	fb90 f3f3 	sdiv	r3, r0, r3
   32836:	440b      	add	r3, r1
   32838:	4293      	cmp	r3, r2
   3283a:	bfa8      	it	ge
   3283c:	4613      	movge	r3, r2
   3283e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   32842:	67bb      	str	r3, [r7, #120]	; 0x78
   32844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32846:	2b00      	cmp	r3, #0
   32848:	f000 80f7 	beq.w	32a3a <quant_all_bands+0x41a>
   3284c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   32850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   32852:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   32856:	f9b2 2000 	ldrsh.w	r2, [r2]
   3285a:	40ab      	lsls	r3, r5
   3285c:	eba3 030b 	sub.w	r3, r3, fp
   32860:	40aa      	lsls	r2, r5
   32862:	4293      	cmp	r3, r2
   32864:	f280 81f4 	bge.w	32c50 <quant_all_bands+0x630>
   32868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   3286a:	429c      	cmp	r4, r3
   3286c:	f000 86ee 	beq.w	3364c <quant_all_bands+0x102c>
   32870:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32872:	6d79      	ldr	r1, [r7, #84]	; 0x54
   32874:	68da      	ldr	r2, [r3, #12]
   32876:	f851 3f04 	ldr.w	r3, [r1, #4]!
   3287a:	6579      	str	r1, [r7, #84]	; 0x54
   3287c:	42a2      	cmp	r2, r4
   3287e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   32882:	f340 8122 	ble.w	32aca <quant_all_bands+0x4aa>
   32886:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
   3288a:	4432      	add	r2, r6
   3288c:	663a      	str	r2, [r7, #96]	; 0x60
   3288e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   32892:	4294      	cmp	r4, r2
   32894:	f000 812e 	beq.w	32af4 <quant_all_bands+0x4d4>
   32898:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   3289c:	b162      	cbz	r2, 328b8 <quant_all_bands+0x298>
   3289e:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
   328a2:	2a03      	cmp	r2, #3
   328a4:	f040 8132 	bne.w	32b0c <quant_all_bands+0x4ec>
   328a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   328ac:	2a01      	cmp	r2, #1
   328ae:	f300 812d 	bgt.w	32b0c <quant_all_bands+0x4ec>
   328b2:	2b00      	cmp	r3, #0
   328b4:	f2c0 812a 	blt.w	32b0c <quant_all_bands+0x4ec>
   328b8:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   328bc:	2b00      	cmp	r3, #0
   328be:	f000 818d 	beq.w	32bdc <quant_all_bands+0x5bc>
   328c2:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
   328c6:	42a3      	cmp	r3, r4
   328c8:	f000 860b 	beq.w	334e2 <quant_all_bands+0xec2>
   328cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   328ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   328d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   328d2:	105e      	asrs	r6, r3, #1
   328d4:	f06f 0a03 	mvn.w	sl, #3
   328d8:	4613      	mov	r3, r2
   328da:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   328de:	2200      	movs	r2, #0
   328e0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   328e4:	9305      	str	r3, [sp, #20]
   328e6:	428c      	cmp	r4, r1
   328e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   328ec:	9304      	str	r3, [sp, #16]
   328ee:	f000 866f 	beq.w	335d0 <quant_all_bands+0xfb0>
   328f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   328f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   328f8:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   328fc:	9201      	str	r2, [sp, #4]
   328fe:	40ab      	lsls	r3, r5
   32900:	1a5b      	subs	r3, r3, r1
   32902:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   32906:	9502      	str	r5, [sp, #8]
   32908:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3290c:	9303      	str	r3, [sp, #12]
   3290e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   32912:	9300      	str	r3, [sp, #0]
   32914:	6e39      	ldr	r1, [r7, #96]	; 0x60
   32916:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   3291a:	4633      	mov	r3, r6
   3291c:	465a      	mov	r2, fp
   3291e:	f507 7080 	add.w	r0, r7, #256	; 0x100
   32922:	f7fd fd7d 	bl	30420 <quant_band>
   32926:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3292a:	4681      	mov	r9, r0
   3292c:	f000 8370 	beq.w	33010 <quant_all_bands+0x9f0>
   32930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32932:	eb03 020a 	add.w	r2, r3, sl
   32936:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   3293a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   3293c:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   32940:	40ab      	lsls	r3, r5
   32942:	1a5b      	subs	r3, r3, r1
   32944:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   32946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3294a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   3294c:	9105      	str	r1, [sp, #20]
   3294e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   32952:	e9cd 3103 	strd	r3, r1, [sp, #12]
   32956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   3295a:	9300      	str	r3, [sp, #0]
   3295c:	e9cd 2501 	strd	r2, r5, [sp, #4]
   32960:	4633      	mov	r3, r6
   32962:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   32966:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   3296a:	465a      	mov	r2, fp
   3296c:	f507 7080 	add.w	r0, r7, #256	; 0x100
   32970:	f7fd fd56 	bl	30420 <quant_band>
   32974:	6dba      	ldr	r2, [r7, #88]	; 0x58
   32976:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   32978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   3297a:	ebb1 0fcb 	cmp.w	r1, fp, lsl #3
   3297e:	eba2 0303 	sub.w	r3, r2, r3
   32982:	6b79      	ldr	r1, [r7, #52]	; 0x34
   32984:	f803 9001 	strb.w	r9, [r3, r1]
   32988:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   3298a:	f802 0c01 	strb.w	r0, [r2, #-1]
   3298e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   32992:	66f9      	str	r1, [r7, #108]	; 0x6c
   32994:	f04f 0100 	mov.w	r1, #0
   32998:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
   3299c:	6f79      	ldr	r1, [r7, #116]	; 0x74
   3299e:	4419      	add	r1, r3
   329a0:	460b      	mov	r3, r1
   329a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   329a6:	440a      	add	r2, r1
   329a8:	65ba      	str	r2, [r7, #88]	; 0x58
   329aa:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
   329ae:	441a      	add	r2, r3
   329b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   329b2:	f8c7 2714 	str.w	r2, [r7, #1812]	; 0x714
   329b6:	f104 0401 	add.w	r4, r4, #1
   329ba:	bfcc      	ite	gt
   329bc:	f04f 0a01 	movgt.w	sl, #1
   329c0:	f04f 0a00 	movle.w	sl, #0
   329c4:	429c      	cmp	r4, r3
   329c6:	f280 8325 	bge.w	33014 <quant_all_bands+0x9f4>
   329ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   329ce:	f932 3b02 	ldrsh.w	r3, [r2], #2
   329d2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
   329d6:	f8d7 26ec 	ldr.w	r2, [r7, #1772]	; 0x6ec
   329da:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
   329de:	40ab      	lsls	r3, r5
   329e0:	009e      	lsls	r6, r3, #2
   329e2:	2a00      	cmp	r2, #0
   329e4:	f000 8131 	beq.w	32c4a <quant_all_bands+0x62a>
   329e8:	4432      	add	r2, r6
   329ea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
   329ee:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   329f2:	f8d7 0718 	ldr.w	r0, [r7, #1816]	; 0x718
   329f6:	f9b2 2000 	ldrsh.w	r2, [r2]
   329fa:	40aa      	lsls	r2, r5
   329fc:	eba2 0b03 	sub.w	fp, r2, r3
   32a00:	f7f9 fe78 	bl	2c6f4 <ec_tell_frac>
   32a04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32a06:	6778      	str	r0, [r7, #116]	; 0x74
   32a08:	42a3      	cmp	r3, r4
   32a0a:	d004      	beq.n	32a16 <quant_all_bands+0x3f6>
   32a0c:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
   32a10:	1a1b      	subs	r3, r3, r0
   32a12:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
   32a16:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
   32a1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   32a1c:	1a9a      	subs	r2, r3, r2
   32a1e:	1e53      	subs	r3, r2, #1
   32a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   32a24:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
   32a28:	42a3      	cmp	r3, r4
   32a2a:	f73f aef3 	bgt.w	32814 <quant_all_bands+0x1f4>
   32a2e:	2300      	movs	r3, #0
   32a30:	67bb      	str	r3, [r7, #120]	; 0x78
   32a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32a34:	2b00      	cmp	r3, #0
   32a36:	f47f af09 	bne.w	3284c <quant_all_bands+0x22c>
   32a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   32a3c:	429c      	cmp	r4, r3
   32a3e:	f47f af17 	bne.w	32870 <quant_all_bands+0x250>
   32a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   32a46:	6a1b      	ldr	r3, [r3, #32]
   32a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32a4a:	f933 9001 	ldrsh.w	r9, [r3, r1]
   32a4e:	6a39      	ldr	r1, [r7, #32]
   32a50:	5e9a      	ldrsh	r2, [r3, r2]
   32a52:	f933 8001 	ldrsh.w	r8, [r3, r1]
   32a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   32a5a:	eba2 0909 	sub.w	r9, r2, r9
   32a5e:	eba8 0802 	sub.w	r8, r8, r2
   32a62:	fa09 f905 	lsl.w	r9, r9, r5
   32a66:	fa08 f805 	lsl.w	r8, r8, r5
   32a6a:	ebc8 0a49 	rsb	sl, r8, r9, lsl #1
   32a6e:	eba8 0809 	sub.w	r8, r8, r9
   32a72:	4619      	mov	r1, r3
   32a74:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   32a78:	ea4f 0888 	mov.w	r8, r8, lsl #2
   32a7c:	ea4f 0989 	mov.w	r9, r9, lsl #2
   32a80:	eb03 0009 	add.w	r0, r3, r9
   32a84:	4642      	mov	r2, r8
   32a86:	4451      	add	r1, sl
   32a88:	f7d9 fb6a 	bl	c160 <memcpy>
   32a8c:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   32a90:	2b00      	cmp	r3, #0
   32a92:	f43f aeed 	beq.w	32870 <quant_all_bands+0x250>
   32a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   32a98:	4619      	mov	r1, r3
   32a9a:	4642      	mov	r2, r8
   32a9c:	4451      	add	r1, sl
   32a9e:	eb03 0009 	add.w	r0, r3, r9
   32aa2:	f7d9 fb5d 	bl	c160 <memcpy>
   32aa6:	e6e3      	b.n	32870 <quant_all_bands+0x250>
   32aa8:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   32aac:	2b00      	cmp	r3, #0
   32aae:	f040 866c 	bne.w	3378a <quant_all_bands+0x116a>
   32ab2:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
   32ab6:	2b07      	cmp	r3, #7
   32ab8:	f340 86c1 	ble.w	3383e <quant_all_bands+0x121e>
   32abc:	2301      	movs	r3, #1
   32abe:	63bb      	str	r3, [r7, #56]	; 0x38
   32ac0:	667b      	str	r3, [r7, #100]	; 0x64
   32ac2:	2302      	movs	r3, #2
   32ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   32ac8:	e5cb      	b.n	32662 <quant_all_bands+0x42>
   32aca:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   32ace:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   32ad2:	f8d7 06ec 	ldr.w	r0, [r7, #1772]	; 0x6ec
   32ad6:	663a      	str	r2, [r7, #96]	; 0x60
   32ad8:	460e      	mov	r6, r1
   32ada:	2800      	cmp	r0, #0
   32adc:	bf18      	it	ne
   32ade:	4616      	movne	r6, r2
   32ae0:	2200      	movs	r2, #0
   32ae2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   32ae6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   32aea:	f8c7 6084 	str.w	r6, [r7, #132]	; 0x84
   32aee:	4294      	cmp	r4, r2
   32af0:	f47f aed2 	bne.w	32898 <quant_all_bands+0x278>
   32af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   32af6:	2a00      	cmp	r2, #0
   32af8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   32afc:	bf08      	it	eq
   32afe:	2200      	moveq	r2, #0
   32b00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   32b04:	e6c8      	b.n	32898 <quant_all_bands+0x278>
   32b06:	bf00      	nop
   32b08:	00000000 	.word	0x00000000
   32b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   32b0e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   32b12:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   32b14:	f932 8011 	ldrsh.w	r8, [r2, r1, lsl #1]
   32b18:	fa08 f805 	lsl.w	r8, r8, r5
   32b1c:	eba8 0800 	sub.w	r8, r8, r0
   32b20:	eba8 080b 	sub.w	r8, r8, fp
   32b24:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   32b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   32b2c:	eb00 0e08 	add.w	lr, r0, r8
   32b30:	eb02 000c 	add.w	r0, r2, ip
   32b34:	e000      	b.n	32b38 <quant_all_bands+0x518>
   32b36:	4619      	mov	r1, r3
   32b38:	f930 2d02 	ldrsh.w	r2, [r0, #-2]!
   32b3c:	40aa      	lsls	r2, r5
   32b3e:	4572      	cmp	r2, lr
   32b40:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
   32b44:	dcf7      	bgt.n	32b36 <quant_all_bands+0x516>
   32b46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   32b48:	f1ac 0c02 	sub.w	ip, ip, #2
   32b4c:	4494      	add	ip, r2
   32b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   32b52:	44de      	add	lr, fp
   32b54:	1e50      	subs	r0, r2, #1
   32b56:	e005      	b.n	32b64 <quant_all_bands+0x544>
   32b58:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!
   32b5c:	40aa      	lsls	r2, r5
   32b5e:	4572      	cmp	r2, lr
   32b60:	da03      	bge.n	32b6a <quant_all_bands+0x54a>
   32b62:	4630      	mov	r0, r6
   32b64:	1c46      	adds	r6, r0, #1
   32b66:	42a6      	cmp	r6, r4
   32b68:	dbf6      	blt.n	32b58 <quant_all_bands+0x538>
   32b6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   32b6e:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   32b72:	fb02 f101 	mul.w	r1, r2, r1
   32b76:	f8d7 26f0 	ldr.w	r2, [r7, #1776]	; 0x6f0
   32b7a:	f8d7 9090 	ldr.w	r9, [r7, #144]	; 0x90
   32b7e:	eb02 0e01 	add.w	lr, r2, r1
   32b82:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   32b86:	2600      	movs	r6, #0
   32b88:	eba1 0a02 	sub.w	sl, r1, r2
   32b8c:	46b4      	mov	ip, r6
   32b8e:	4672      	mov	r2, lr
   32b90:	e000      	b.n	32b94 <quant_all_bands+0x574>
   32b92:	4673      	mov	r3, lr
   32b94:	eba2 0e01 	sub.w	lr, r2, r1
   32b98:	f812 8c01 	ldrb.w	r8, [r2, #-1]
   32b9c:	f81e e00a 	ldrb.w	lr, [lr, sl]
   32ba0:	4298      	cmp	r0, r3
   32ba2:	ea4c 0c0e 	orr.w	ip, ip, lr
   32ba6:	ea46 0608 	orr.w	r6, r6, r8
   32baa:	444a      	add	r2, r9
   32bac:	f103 0e01 	add.w	lr, r3, #1
   32bb0:	dcef      	bgt.n	32b92 <quant_all_bands+0x572>
   32bb2:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   32bb6:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   32bba:	2b00      	cmp	r3, #0
   32bbc:	d059      	beq.n	32c72 <quant_all_bands+0x652>
   32bbe:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
   32bc2:	42a3      	cmp	r3, r4
   32bc4:	f000 8579 	beq.w	336ba <quant_all_bands+0x109a>
   32bc8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   32bcc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   32bce:	62fe      	str	r6, [r7, #44]	; 0x2c
   32bd0:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   32bd4:	4663      	mov	r3, ip
   32bd6:	4452      	add	r2, sl
   32bd8:	104e      	asrs	r6, r1, #1
   32bda:	e681      	b.n	328e0 <quant_all_bands+0x2c0>
   32bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   32be0:	2b00      	cmp	r3, #0
   32be2:	f000 854c 	beq.w	3367e <quant_all_bands+0x105e>
   32be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   32be8:	2a00      	cmp	r2, #0
   32bea:	f040 81f7 	bne.w	32fdc <quant_all_bands+0x9bc>
   32bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   32bf2:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
   32bf6:	429c      	cmp	r4, r3
   32bf8:	f8d7 a044 	ldr.w	sl, [r7, #68]	; 0x44
   32bfc:	f000 81ec 	beq.w	32fd8 <quant_all_bands+0x9b8>
   32c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   32c04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   32c06:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   32c0a:	40ab      	lsls	r3, r5
   32c0c:	1a5b      	subs	r3, r3, r1
   32c0e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   32c12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   32c16:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   32c1a:	f8cd a018 	str.w	sl, [sp, #24]
   32c1e:	e9cd 3104 	strd	r3, r1, [sp, #16]
   32c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   32c26:	9301      	str	r3, [sp, #4]
   32c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   32c2a:	9300      	str	r3, [sp, #0]
   32c2c:	e9cd 2502 	strd	r2, r5, [sp, #8]
   32c30:	465b      	mov	r3, fp
   32c32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   32c36:	6e39      	ldr	r1, [r7, #96]	; 0x60
   32c38:	f507 7080 	add.w	r0, r7, #256	; 0x100
   32c3c:	f7fd fed0 	bl	309e0 <quant_band_stereo>
   32c40:	2300      	movs	r3, #0
   32c42:	4681      	mov	r9, r0
   32c44:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
   32c48:	e694      	b.n	32974 <quant_all_bands+0x354>
   32c4a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
   32c4e:	e6ce      	b.n	329ee <quant_all_bands+0x3ce>
   32c50:	f1ba 0f00 	cmp.w	sl, #0
   32c54:	f040 81c7 	bne.w	32fe6 <quant_all_bands+0x9c6>
   32c58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   32c5c:	461a      	mov	r2, r3
   32c5e:	2b00      	cmp	r3, #0
   32c60:	bf08      	it	eq
   32c62:	4622      	moveq	r2, r4
   32c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   32c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   32c6a:	429c      	cmp	r4, r3
   32c6c:	f47f ae00 	bne.w	32870 <quant_all_bands+0x250>
   32c70:	e6e7      	b.n	32a42 <quant_all_bands+0x422>
   32c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   32c76:	ea4c 0a06 	orr.w	sl, ip, r6
   32c7a:	2b00      	cmp	r3, #0
   32c7c:	f000 8442 	beq.w	33504 <quant_all_bands+0xee4>
   32c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32c82:	2b00      	cmp	r3, #0
   32c84:	f000 8199 	beq.w	32fba <quant_all_bands+0x99a>
   32c88:	f8d7 6718 	ldr.w	r6, [r7, #1816]	; 0x718
   32c8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   32c8e:	f107 0ca0 	add.w	ip, r7, #160	; 0xa0
   32c92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32c96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   32c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32c9c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   32ca0:	6f3e      	ldr	r6, [r7, #112]	; 0x70
   32ca2:	68b6      	ldr	r6, [r6, #8]
   32ca4:	607e      	str	r6, [r7, #4]
   32ca6:	f8d7 6718 	ldr.w	r6, [r7, #1816]	; 0x718
   32caa:	6836      	ldr	r6, [r6, #0]
   32cac:	62fe      	str	r6, [r7, #44]	; 0x2c
   32cae:	f8d7 6718 	ldr.w	r6, [r7, #1816]	; 0x718
   32cb2:	6876      	ldr	r6, [r6, #4]
   32cb4:	60be      	str	r6, [r7, #8]
   32cb6:	f8d7 6718 	ldr.w	r6, [r7, #1816]	; 0x718
   32cba:	f8d6 9018 	ldr.w	r9, [r6, #24]
   32cbe:	687e      	ldr	r6, [r7, #4]
   32cc0:	4426      	add	r6, r4
   32cc2:	46b6      	mov	lr, r6
   32cc4:	f8d7 66f4 	ldr.w	r6, [r7, #1780]	; 0x6f4
   32cc8:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
   32ccc:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   32cd0:	607e      	str	r6, [r7, #4]
   32cd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   32cd6:	687b      	ldr	r3, [r7, #4]
   32cd8:	ed9e 9a00 	vldr	s18, [lr]
   32cdc:	ed93 7a00 	vldr	s14, [r3]
   32ce0:	f507 7680 	add.w	r6, r7, #256	; 0x100
   32ce4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   32ce6:	eeb4 7ac9 	vcmpe.f32	s14, s18
   32cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32cee:	f507 7c9e 	add.w	ip, r7, #316	; 0x13c
   32cf2:	bf54      	ite	pl
   32cf4:	eeb0 6a49 	vmovpl.f32	s12, s18
   32cf8:	eeb0 6a47 	vmovmi.f32	s12, s14
   32cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32d00:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
   32d04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   32d06:	eec6 7a26 	vdiv.f32	s15, s12, s13
   32d0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32d0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   32d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32d14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   32d18:	ea4f 068b 	mov.w	r6, fp, lsl #2
   32d1c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   32d20:	4632      	mov	r2, r6
   32d22:	6e39      	ldr	r1, [r7, #96]	; 0x60
   32d24:	69f8      	ldr	r0, [r7, #28]
   32d26:	ee77 9a27 	vadd.f32	s19, s14, s15
   32d2a:	ee39 9a27 	vadd.f32	s18, s18, s15
   32d2e:	f7d9 fa17 	bl	c160 <memcpy>
   32d32:	4632      	mov	r2, r6
   32d34:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   32d38:	69b8      	ldr	r0, [r7, #24]
   32d3a:	f7d9 fa11 	bl	c160 <memcpy>
   32d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32d42:	4598      	cmp	r8, r3
   32d44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   32d48:	bf1c      	itt	ne
   32d4a:	f8d7 308c 	ldrne.w	r3, [r7, #140]	; 0x8c
   32d4e:	eb03 0888 	addne.w	r8, r3, r8, lsl #2
   32d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   32d56:	bf08      	it	eq
   32d58:	f04f 0800 	moveq.w	r8, #0
   32d5c:	429c      	cmp	r4, r3
   32d5e:	f000 856b 	beq.w	33838 <quant_all_bands+0x1218>
   32d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   32d66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   32d68:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   32d6c:	40ab      	lsls	r3, r5
   32d6e:	1a9b      	subs	r3, r3, r2
   32d70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   32d74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32d78:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   32d7c:	f8cd a018 	str.w	sl, [sp, #24]
   32d80:	e9cd 3204 	strd	r3, r2, [sp, #16]
   32d84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   32d88:	9301      	str	r3, [sp, #4]
   32d8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   32d8c:	9300      	str	r3, [sp, #0]
   32d8e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   32d92:	465b      	mov	r3, fp
   32d94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   32d98:	6e39      	ldr	r1, [r7, #96]	; 0x60
   32d9a:	f507 7080 	add.w	r0, r7, #256	; 0x100
   32d9e:	f7fd fe1f 	bl	309e0 <quant_band_stereo>
   32da2:	f1bb 0f00 	cmp.w	fp, #0
   32da6:	6078      	str	r0, [r7, #4]
   32da8:	f340 8574 	ble.w	33894 <quant_all_bands+0x1274>
   32dac:	69f9      	ldr	r1, [r7, #28]
   32dae:	ed1f 7aaa 	vldr	s14, [pc, #-680]	; 32b08 <quant_all_bands+0x4e8>
   32db2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   32db4:	460b      	mov	r3, r1
   32db6:	1871      	adds	r1, r6, r1
   32db8:	ecf3 7a01 	vldmia	r3!, {s15}
   32dbc:	ecf2 6a01 	vldmia	r2!, {s13}
   32dc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   32dc4:	4299      	cmp	r1, r3
   32dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
   32dca:	d1f5      	bne.n	32db8 <quant_all_bands+0x798>
   32dcc:	69b9      	ldr	r1, [r7, #24]
   32dce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   32dd2:	ee29 8a87 	vmul.f32	s16, s19, s14
   32dd6:	ed1f 7ab4 	vldr	s14, [pc, #-720]	; 32b08 <quant_all_bands+0x4e8>
   32dda:	460b      	mov	r3, r1
   32ddc:	1871      	adds	r1, r6, r1
   32dde:	ecf3 7a01 	vldmia	r3!, {s15}
   32de2:	ecf2 6a01 	vldmia	r2!, {s13}
   32de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
   32dea:	4299      	cmp	r1, r3
   32dec:	ee37 7a27 	vadd.f32	s14, s14, s15
   32df0:	d1f5      	bne.n	32dde <quant_all_bands+0x7be>
   32df2:	f8d7 e718 	ldr.w	lr, [r7, #1816]	; 0x718
   32df6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   32dfa:	f107 0cd0 	add.w	ip, r7, #208	; 0xd0
   32dfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32e02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   32e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32e0a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   32e0e:	f507 7e80 	add.w	lr, r7, #256	; 0x100
   32e12:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   32e16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   32e1a:	f507 7cbc 	add.w	ip, r7, #376	; 0x178
   32e1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32e22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   32e26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32e2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   32e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   32e32:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
   32e36:	ee29 7a07 	vmul.f32	s14, s18, s14
   32e3a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
   32e3e:	4632      	mov	r2, r6
   32e40:	6e39      	ldr	r1, [r7, #96]	; 0x60
   32e42:	6978      	ldr	r0, [r7, #20]
   32e44:	ee37 8a08 	vadd.f32	s16, s14, s16
   32e48:	f7d9 f98a 	bl	c160 <memcpy>
   32e4c:	4632      	mov	r2, r6
   32e4e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   32e52:	6938      	ldr	r0, [r7, #16]
   32e54:	f7d9 f984 	bl	c160 <memcpy>
   32e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   32e5c:	429c      	cmp	r4, r3
   32e5e:	d00e      	beq.n	32e7e <quant_all_bands+0x85e>
   32e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   32e64:	68f8      	ldr	r0, [r7, #12]
   32e66:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
   32e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   32e6c:	40a9      	lsls	r1, r5
   32e6e:	1ac9      	subs	r1, r1, r3
   32e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   32e74:	4632      	mov	r2, r6
   32e76:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   32e7a:	f7d9 f971 	bl	c160 <memcpy>
   32e7e:	68bb      	ldr	r3, [r7, #8]
   32e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   32e82:	eba3 0309 	sub.w	r3, r3, r9
   32e86:	4449      	add	r1, r9
   32e88:	461a      	mov	r2, r3
   32e8a:	f507 70da 	add.w	r0, r7, #436	; 0x1b4
   32e8e:	6039      	str	r1, [r7, #0]
   32e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   32e92:	f7d9 f965 	bl	c160 <memcpy>
   32e96:	f107 0ca0 	add.w	ip, r7, #160	; 0xa0
   32e9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   32e9e:	f8d7 e718 	ldr.w	lr, [r7, #1816]	; 0x718
   32ea2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   32ea6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   32eaa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   32eae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   32eb2:	f507 7c9e 	add.w	ip, r7, #316	; 0x13c
   32eb6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   32eba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   32ebe:	f507 7e80 	add.w	lr, r7, #256	; 0x100
   32ec2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   32ec6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   32eca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   32ece:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   32ed2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   32ed6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   32eda:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
   32ede:	4632      	mov	r2, r6
   32ee0:	69f9      	ldr	r1, [r7, #28]
   32ee2:	6e38      	ldr	r0, [r7, #96]	; 0x60
   32ee4:	f7d9 f93c 	bl	c160 <memcpy>
   32ee8:	4632      	mov	r2, r6
   32eea:	69b9      	ldr	r1, [r7, #24]
   32eec:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   32ef0:	f7d9 f936 	bl	c160 <memcpy>
   32ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   32ef6:	429c      	cmp	r4, r3
   32ef8:	f000 84aa 	beq.w	33850 <quant_all_bands+0x1230>
   32efc:	2301      	movs	r3, #1
   32efe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   32f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   32f06:	429c      	cmp	r4, r3
   32f08:	f000 8493 	beq.w	33832 <quant_all_bands+0x1212>
   32f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   32f10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   32f12:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   32f16:	40ab      	lsls	r3, r5
   32f18:	1a9b      	subs	r3, r3, r2
   32f1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   32f1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32f22:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   32f26:	f8cd a018 	str.w	sl, [sp, #24]
   32f2a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   32f2e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   32f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   32f36:	f8d7 8060 	ldr.w	r8, [r7, #96]	; 0x60
   32f3a:	9301      	str	r3, [sp, #4]
   32f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   32f3e:	9300      	str	r3, [sp, #0]
   32f40:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   32f44:	465b      	mov	r3, fp
   32f46:	4641      	mov	r1, r8
   32f48:	f507 7080 	add.w	r0, r7, #256	; 0x100
   32f4c:	f7fd fd48 	bl	309e0 <quant_band_stereo>
   32f50:	f1bb 0f00 	cmp.w	fp, #0
   32f54:	4681      	mov	r9, r0
   32f56:	f340 8497 	ble.w	33888 <quant_all_bands+0x1268>
   32f5a:	69f9      	ldr	r1, [r7, #28]
   32f5c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 33064 <quant_all_bands+0xa44>
   32f60:	460b      	mov	r3, r1
   32f62:	4642      	mov	r2, r8
   32f64:	4431      	add	r1, r6
   32f66:	ecf3 7a01 	vldmia	r3!, {s15}
   32f6a:	ecf2 6a01 	vldmia	r2!, {s13}
   32f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   32f72:	428b      	cmp	r3, r1
   32f74:	ee37 7a27 	vadd.f32	s14, s14, s15
   32f78:	d1f5      	bne.n	32f66 <quant_all_bands+0x946>
   32f7a:	69b9      	ldr	r1, [r7, #24]
   32f7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   32f80:	eddf 6a38 	vldr	s13, [pc, #224]	; 33064 <quant_all_bands+0xa44>
   32f84:	ee29 7a87 	vmul.f32	s14, s19, s14
   32f88:	460b      	mov	r3, r1
   32f8a:	1871      	adds	r1, r6, r1
   32f8c:	ecf3 7a01 	vldmia	r3!, {s15}
   32f90:	ecb2 6a01 	vldmia	r2!, {s12}
   32f94:	ee67 7a86 	vmul.f32	s15, s15, s12
   32f98:	4299      	cmp	r1, r3
   32f9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
   32f9e:	d1f5      	bne.n	32f8c <quant_all_bands+0x96c>
   32fa0:	ee09 7a26 	vmla.f32	s14, s18, s13
   32fa4:	eeb4 7ac8 	vcmpe.f32	s14, s16
   32fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32fac:	f240 83f5 	bls.w	3379a <quant_all_bands+0x117a>
   32fb0:	2300      	movs	r3, #0
   32fb2:	4648      	mov	r0, r9
   32fb4:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
   32fb8:	e4dc      	b.n	32974 <quant_all_bands+0x354>
   32fba:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   32fbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   32fc2:	bf16      	itet	ne
   32fc4:	f8d7 308c 	ldrne.w	r3, [r7, #140]	; 0x8c
   32fc8:	461a      	moveq	r2, r3
   32fca:	eb03 0288 	addne.w	r2, r3, r8, lsl #2
   32fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   32fd2:	429c      	cmp	r4, r3
   32fd4:	f47f ae14 	bne.w	32c00 <quant_all_bands+0x5e0>
   32fd8:	2300      	movs	r3, #0
   32fda:	e61c      	b.n	32c16 <quant_all_bands+0x5f6>
   32fdc:	f8d7 a044 	ldr.w	sl, [r7, #68]	; 0x44
   32fe0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   32fe4:	e650      	b.n	32c88 <quant_all_bands+0x668>
   32fe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   32fe8:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
   32fec:	429c      	cmp	r4, r3
   32fee:	f47f ac3f 	bne.w	32870 <quant_all_bands+0x250>
   32ff2:	e526      	b.n	32a42 <quant_all_bands+0x422>
   32ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
   32ff8:	f8d7 2724 	ldr.w	r2, [r7, #1828]	; 0x724
   32ffc:	6013      	str	r3, [r2, #0]
   32ffe:	f7f3 fda7 	bl	26b50 <restore_stack>
   33002:	f207 67b4 	addw	r7, r7, #1716	; 0x6b4
   33006:	46bd      	mov	sp, r7
   33008:	ecbd 8b04 	vpop	{d8-d9}
   3300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33010:	2200      	movs	r2, #0
   33012:	e490      	b.n	32936 <quant_all_bands+0x316>
   33014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   33016:	42a3      	cmp	r3, r4
   33018:	46a3      	mov	fp, r4
   3301a:	46a8      	mov	r8, r5
   3301c:	ddea      	ble.n	32ff4 <quant_all_bands+0x9d4>
   3301e:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
   33022:	3b01      	subs	r3, #1
   33024:	f8d7 06f8 	ldr.w	r0, [r7, #1784]	; 0x6f8
   33028:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   3302c:	009b      	lsls	r3, r3, #2
   3302e:	4418      	add	r0, r3
   33030:	66f8      	str	r0, [r7, #108]	; 0x6c
   33032:	f8d7 070c 	ldr.w	r0, [r7, #1804]	; 0x70c
   33036:	18c3      	adds	r3, r0, r3
   33038:	f10b 0201 	add.w	r2, fp, #1
   3303c:	663b      	str	r3, [r7, #96]	; 0x60
   3303e:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
   33042:	657a      	str	r2, [r7, #84]	; 0x54
   33044:	fb01 f202 	mul.w	r2, r1, r2
   33048:	4413      	add	r3, r2
   3304a:	65bb      	str	r3, [r7, #88]	; 0x58
   3304c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   3304e:	633a      	str	r2, [r7, #48]	; 0x30
   33050:	eb03 034b 	add.w	r3, r3, fp, lsl #1
   33054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   33058:	fb01 f30b 	mul.w	r3, r1, fp
   3305c:	637b      	str	r3, [r7, #52]	; 0x34
   3305e:	465c      	mov	r4, fp
   33060:	4645      	mov	r5, r8
   33062:	e0eb      	b.n	3323c <quant_all_bands+0xc1c>
   33064:	00000000 	.word	0x00000000
   33068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   3306a:	685a      	ldr	r2, [r3, #4]
   3306c:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
   33070:	f643 70ff 	movw	r0, #16383	; 0x3fff
   33074:	1b1b      	subs	r3, r3, r4
   33076:	4281      	cmp	r1, r0
   33078:	bfa8      	it	ge
   3307a:	4601      	movge	r1, r0
   3307c:	2b03      	cmp	r3, #3
   3307e:	bfa8      	it	ge
   33080:	2303      	movge	r3, #3
   33082:	f8d7 0714 	ldr.w	r0, [r7, #1812]	; 0x714
   33086:	fb90 f3f3 	sdiv	r3, r0, r3
   3308a:	4413      	add	r3, r2
   3308c:	428b      	cmp	r3, r1
   3308e:	bfa8      	it	ge
   33090:	460b      	movge	r3, r1
   33092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   33096:	67bb      	str	r3, [r7, #120]	; 0x78
   33098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3309a:	2b00      	cmp	r3, #0
   3309c:	f000 8107 	beq.w	332ae <quant_all_bands+0xc8e>
   330a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   330a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   330a6:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   330aa:	f9b2 2000 	ldrsh.w	r2, [r2]
   330ae:	40ab      	lsls	r3, r5
   330b0:	1b9b      	subs	r3, r3, r6
   330b2:	40aa      	lsls	r2, r5
   330b4:	429a      	cmp	r2, r3
   330b6:	f340 81e3 	ble.w	33480 <quant_all_bands+0xe60>
   330ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   330bc:	42a3      	cmp	r3, r4
   330be:	f000 82cc 	beq.w	3365a <quant_all_bands+0x103a>
   330c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   330c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   330c6:	68da      	ldr	r2, [r3, #12]
   330c8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   330cc:	6639      	str	r1, [r7, #96]	; 0x60
   330ce:	42a2      	cmp	r2, r4
   330d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   330d4:	f300 8122 	bgt.w	3331c <quant_all_bands+0xcfc>
   330d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   330dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   330e0:	f8d7 06ec 	ldr.w	r0, [r7, #1772]	; 0x6ec
   330e4:	64fa      	str	r2, [r7, #76]	; 0x4c
   330e6:	468c      	mov	ip, r1
   330e8:	2800      	cmp	r0, #0
   330ea:	bf18      	it	ne
   330ec:	4694      	movne	ip, r2
   330ee:	2200      	movs	r2, #0
   330f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   330f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   330f8:	f8c7 c084 	str.w	ip, [r7, #132]	; 0x84
   330fc:	42a2      	cmp	r2, r4
   330fe:	4661      	mov	r1, ip
   33100:	f000 8115 	beq.w	3332e <quant_all_bands+0xd0e>
   33104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   33108:	b162      	cbz	r2, 33124 <quant_all_bands+0xb04>
   3310a:	f8d7 2700 	ldr.w	r2, [r7, #1792]	; 0x700
   3310e:	2a03      	cmp	r2, #3
   33110:	f040 8116 	bne.w	33340 <quant_all_bands+0xd20>
   33114:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   33118:	2a01      	cmp	r2, #1
   3311a:	f300 8111 	bgt.w	33340 <quant_all_bands+0xd20>
   3311e:	2b00      	cmp	r3, #0
   33120:	f2c0 810e 	blt.w	33340 <quant_all_bands+0xd20>
   33124:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   33128:	2b00      	cmp	r3, #0
   3312a:	f000 8173 	beq.w	33414 <quant_all_bands+0xdf4>
   3312e:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
   33132:	42a3      	cmp	r3, r4
   33134:	f000 8210 	beq.w	33558 <quant_all_bands+0xf38>
   33138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   3313a:	f8d7 a044 	ldr.w	sl, [r7, #68]	; 0x44
   3313e:	ea4f 0b63 	mov.w	fp, r3, asr #1
   33142:	f06f 0903 	mvn.w	r9, #3
   33146:	4653      	mov	r3, sl
   33148:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   3314c:	2200      	movs	r2, #0
   3314e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
   33152:	9305      	str	r3, [sp, #20]
   33154:	42a1      	cmp	r1, r4
   33156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   3315a:	9304      	str	r3, [sp, #16]
   3315c:	f000 8253 	beq.w	33606 <quant_all_bands+0xfe6>
   33160:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   33164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   33166:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   3316a:	9201      	str	r2, [sp, #4]
   3316c:	40ab      	lsls	r3, r5
   3316e:	1a5b      	subs	r3, r3, r1
   33170:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   33174:	9502      	str	r5, [sp, #8]
   33176:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3317a:	9303      	str	r3, [sp, #12]
   3317c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   33180:	9300      	str	r3, [sp, #0]
   33182:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   33184:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   33188:	465b      	mov	r3, fp
   3318a:	4632      	mov	r2, r6
   3318c:	f507 7080 	add.w	r0, r7, #256	; 0x100
   33190:	f7fd f946 	bl	30420 <quant_band>
   33194:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   33198:	4604      	mov	r4, r0
   3319a:	f000 819c 	beq.w	334d6 <quant_all_bands+0xeb6>
   3319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   331a0:	eb03 0209 	add.w	r2, r3, r9
   331a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   331a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   331aa:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   331ae:	40ab      	lsls	r3, r5
   331b0:	1a5b      	subs	r3, r3, r1
   331b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   331b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   331b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   331bc:	f8cd a014 	str.w	sl, [sp, #20]
   331c0:	e9cd 3103 	strd	r3, r1, [sp, #12]
   331c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   331c8:	9300      	str	r3, [sp, #0]
   331ca:	e9cd 2501 	strd	r2, r5, [sp, #4]
   331ce:	465b      	mov	r3, fp
   331d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   331d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   331d8:	4632      	mov	r2, r6
   331da:	f507 7080 	add.w	r0, r7, #256	; 0x100
   331de:	f7fd f91f 	bl	30420 <quant_band>
   331e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
   331e4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   331e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   331e8:	ebb1 0fc6 	cmp.w	r1, r6, lsl #3
   331ec:	eba2 0303 	sub.w	r3, r2, r3
   331f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   331f2:	545c      	strb	r4, [r3, r1]
   331f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   331f6:	f802 0c01 	strb.w	r0, [r2, #-1]
   331fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
   331fe:	66f9      	str	r1, [r7, #108]	; 0x6c
   33200:	f04f 0100 	mov.w	r1, #0
   33204:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
   33208:	6f79      	ldr	r1, [r7, #116]	; 0x74
   3320a:	4419      	add	r1, r3
   3320c:	460b      	mov	r3, r1
   3320e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   33212:	440a      	add	r2, r1
   33214:	65ba      	str	r2, [r7, #88]	; 0x58
   33216:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
   3321a:	441a      	add	r2, r3
   3321c:	f8c7 2714 	str.w	r2, [r7, #1812]	; 0x714
   33220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   33222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   33224:	4611      	mov	r1, r2
   33226:	bfcc      	ite	gt
   33228:	f04f 0a01 	movgt.w	sl, #1
   3322c:	f04f 0a00 	movle.w	sl, #0
   33230:	4299      	cmp	r1, r3
   33232:	461c      	mov	r4, r3
   33234:	f77f aede 	ble.w	32ff4 <quant_all_bands+0x9d4>
   33238:	3301      	adds	r3, #1
   3323a:	657b      	str	r3, [r7, #84]	; 0x54
   3323c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   33240:	f8d7 26ec 	ldr.w	r2, [r7, #1772]	; 0x6ec
   33244:	f9b3 6000 	ldrsh.w	r6, [r3]
   33248:	f8c7 410c 	str.w	r4, [r7, #268]	; 0x10c
   3324c:	fa06 f305 	lsl.w	r3, r6, r5
   33250:	ea4f 0883 	mov.w	r8, r3, lsl #2
   33254:	2a00      	cmp	r2, #0
   33256:	f000 8110 	beq.w	3347a <quant_all_bands+0xe5a>
   3325a:	4442      	add	r2, r8
   3325c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
   33260:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   33264:	f8d7 0718 	ldr.w	r0, [r7, #1816]	; 0x718
   33268:	f932 6f02 	ldrsh.w	r6, [r2, #2]!
   3326c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
   33270:	40ae      	lsls	r6, r5
   33272:	1af6      	subs	r6, r6, r3
   33274:	f7f9 fa3e 	bl	2c6f4 <ec_tell_frac>
   33278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3327a:	6778      	str	r0, [r7, #116]	; 0x74
   3327c:	42a3      	cmp	r3, r4
   3327e:	d004      	beq.n	3328a <quant_all_bands+0xc6a>
   33280:	f8d7 3714 	ldr.w	r3, [r7, #1812]	; 0x714
   33284:	1a1b      	subs	r3, r3, r0
   33286:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
   3328a:	f8d7 3710 	ldr.w	r3, [r7, #1808]	; 0x710
   3328e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   33290:	1a99      	subs	r1, r3, r2
   33292:	1e4b      	subs	r3, r1, #1
   33294:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
   33298:	f8d7 3720 	ldr.w	r3, [r7, #1824]	; 0x720
   3329c:	42a3      	cmp	r3, r4
   3329e:	f73f aee3 	bgt.w	33068 <quant_all_bands+0xa48>
   332a2:	2300      	movs	r3, #0
   332a4:	67bb      	str	r3, [r7, #120]	; 0x78
   332a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   332a8:	2b00      	cmp	r3, #0
   332aa:	f47f aef9 	bne.w	330a0 <quant_all_bands+0xa80>
   332ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   332b0:	42a3      	cmp	r3, r4
   332b2:	f47f af06 	bne.w	330c2 <quant_all_bands+0xaa2>
   332b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   332b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   332ba:	6a1b      	ldr	r3, [r3, #32]
   332bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   332be:	f933 a001 	ldrsh.w	sl, [r3, r1]
   332c2:	6a39      	ldr	r1, [r7, #32]
   332c4:	5e9a      	ldrsh	r2, [r3, r2]
   332c6:	f933 9001 	ldrsh.w	r9, [r3, r1]
   332ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   332ce:	eba2 0a0a 	sub.w	sl, r2, sl
   332d2:	eba9 0902 	sub.w	r9, r9, r2
   332d6:	fa0a fa05 	lsl.w	sl, sl, r5
   332da:	fa09 f905 	lsl.w	r9, r9, r5
   332de:	ebc9 0b4a 	rsb	fp, r9, sl, lsl #1
   332e2:	eba9 090a 	sub.w	r9, r9, sl
   332e6:	4619      	mov	r1, r3
   332e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   332ec:	ea4f 0989 	mov.w	r9, r9, lsl #2
   332f0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   332f4:	eb03 000a 	add.w	r0, r3, sl
   332f8:	464a      	mov	r2, r9
   332fa:	4459      	add	r1, fp
   332fc:	f7d8 ff30 	bl	c160 <memcpy>
   33300:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   33304:	2b00      	cmp	r3, #0
   33306:	f43f aedc 	beq.w	330c2 <quant_all_bands+0xaa2>
   3330a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3330c:	4619      	mov	r1, r3
   3330e:	464a      	mov	r2, r9
   33310:	4459      	add	r1, fp
   33312:	eb03 000a 	add.w	r0, r3, sl
   33316:	f7d8 ff23 	bl	c160 <memcpy>
   3331a:	e6d2      	b.n	330c2 <quant_all_bands+0xaa2>
   3331c:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
   33320:	4442      	add	r2, r8
   33322:	64fa      	str	r2, [r7, #76]	; 0x4c
   33324:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   33328:	42a2      	cmp	r2, r4
   3332a:	f47f aeeb 	bne.w	33104 <quant_all_bands+0xae4>
   3332e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   33330:	2a00      	cmp	r2, #0
   33332:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   33336:	bf08      	it	eq
   33338:	2200      	moveq	r2, #0
   3333a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
   3333e:	e6e1      	b.n	33104 <quant_all_bands+0xae4>
   33340:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   33342:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   33346:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   33348:	f932 8011 	ldrsh.w	r8, [r2, r1, lsl #1]
   3334c:	fa08 f805 	lsl.w	r8, r8, r5
   33350:	eba8 0800 	sub.w	r8, r8, r0
   33354:	eba8 0806 	sub.w	r8, r8, r6
   33358:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   3335c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
   33360:	eb00 0908 	add.w	r9, r0, r8
   33364:	eb02 000e 	add.w	r0, r2, lr
   33368:	e000      	b.n	3336c <quant_all_bands+0xd4c>
   3336a:	4619      	mov	r1, r3
   3336c:	f930 2d02 	ldrsh.w	r2, [r0, #-2]!
   33370:	40aa      	lsls	r2, r5
   33372:	4591      	cmp	r9, r2
   33374:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
   33378:	dbf7      	blt.n	3336a <quant_all_bands+0xd4a>
   3337a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   3337c:	f1ae 0e02 	sub.w	lr, lr, #2
   33380:	4496      	add	lr, r2
   33382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   33386:	44b1      	add	r9, r6
   33388:	1e50      	subs	r0, r2, #1
   3338a:	e005      	b.n	33398 <quant_all_bands+0xd78>
   3338c:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!
   33390:	40aa      	lsls	r2, r5
   33392:	454a      	cmp	r2, r9
   33394:	da04      	bge.n	333a0 <quant_all_bands+0xd80>
   33396:	4660      	mov	r0, ip
   33398:	f100 0c01 	add.w	ip, r0, #1
   3339c:	4564      	cmp	r4, ip
   3339e:	dcf5      	bgt.n	3338c <quant_all_bands+0xd6c>
   333a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   333a4:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
   333a8:	fb01 f102 	mul.w	r1, r1, r2
   333ac:	f8d7 26f0 	ldr.w	r2, [r7, #1776]	; 0x6f0
   333b0:	eb02 0901 	add.w	r9, r2, r1
   333b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   333b8:	f04f 0c00 	mov.w	ip, #0
   333bc:	eba1 0b02 	sub.w	fp, r1, r2
   333c0:	4692      	mov	sl, r2
   333c2:	46e6      	mov	lr, ip
   333c4:	464a      	mov	r2, r9
   333c6:	e000      	b.n	333ca <quant_all_bands+0xdaa>
   333c8:	4643      	mov	r3, r8
   333ca:	eba2 0801 	sub.w	r8, r2, r1
   333ce:	f812 9c01 	ldrb.w	r9, [r2, #-1]
   333d2:	f818 800b 	ldrb.w	r8, [r8, fp]
   333d6:	4298      	cmp	r0, r3
   333d8:	ea4e 0e08 	orr.w	lr, lr, r8
   333dc:	ea4c 0c09 	orr.w	ip, ip, r9
   333e0:	4452      	add	r2, sl
   333e2:	f103 0801 	add.w	r8, r3, #1
   333e6:	dcef      	bgt.n	333c8 <quant_all_bands+0xda8>
   333e8:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   333ec:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
   333f0:	2b00      	cmp	r3, #0
   333f2:	d055      	beq.n	334a0 <quant_all_bands+0xe80>
   333f4:	f8d7 3708 	ldr.w	r3, [r7, #1800]	; 0x708
   333f8:	42a3      	cmp	r3, r4
   333fa:	f000 8182 	beq.w	33702 <quant_all_bands+0x10e2>
   333fe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   33402:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   33404:	ea4f 0988 	mov.w	r9, r8, lsl #2
   33408:	46e2      	mov	sl, ip
   3340a:	4673      	mov	r3, lr
   3340c:	444a      	add	r2, r9
   3340e:	ea4f 0b61 	mov.w	fp, r1, asr #1
   33412:	e69c      	b.n	3314e <quant_all_bands+0xb2e>
   33414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   33418:	2b00      	cmp	r3, #0
   3341a:	f000 8128 	beq.w	3366e <quant_all_bands+0x104e>
   3341e:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   33422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   33424:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   33428:	4619      	mov	r1, r3
   3342a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   3342e:	42a3      	cmp	r3, r4
   33430:	d048      	beq.n	334c4 <quant_all_bands+0xea4>
   33432:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   33436:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   33438:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   3343c:	40ab      	lsls	r3, r5
   3343e:	1a1b      	subs	r3, r3, r0
   33440:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   33444:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   33448:	9206      	str	r2, [sp, #24]
   3344a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   3344e:	e9cd 3204 	strd	r3, r2, [sp, #16]
   33452:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   33456:	9301      	str	r3, [sp, #4]
   33458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   3345a:	9300      	str	r3, [sp, #0]
   3345c:	e9cd 1502 	strd	r1, r5, [sp, #8]
   33460:	4633      	mov	r3, r6
   33462:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   33466:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   33468:	f507 7080 	add.w	r0, r7, #256	; 0x100
   3346c:	f7fd fab8 	bl	309e0 <quant_band_stereo>
   33470:	2300      	movs	r3, #0
   33472:	4604      	mov	r4, r0
   33474:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
   33478:	e6b3      	b.n	331e2 <quant_all_bands+0xbc2>
   3347a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
   3347e:	e6ef      	b.n	33260 <quant_all_bands+0xc40>
   33480:	f1ba 0f00 	cmp.w	sl, #0
   33484:	d120      	bne.n	334c8 <quant_all_bands+0xea8>
   33486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   3348a:	461a      	mov	r2, r3
   3348c:	2b00      	cmp	r3, #0
   3348e:	bf08      	it	eq
   33490:	4622      	moveq	r2, r4
   33492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   33494:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   33498:	42a3      	cmp	r3, r4
   3349a:	f47f ae12 	bne.w	330c2 <quant_all_bands+0xaa2>
   3349e:	e70a      	b.n	332b6 <quant_all_bands+0xc96>
   334a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   334a4:	ea4e 020c 	orr.w	r2, lr, ip
   334a8:	2b00      	cmp	r3, #0
   334aa:	d066      	beq.n	3357a <quant_all_bands+0xf5a>
   334ac:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   334b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   334b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   334b8:	eb03 0188 	add.w	r1, r3, r8, lsl #2
   334bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   334c0:	42a3      	cmp	r3, r4
   334c2:	d1b6      	bne.n	33432 <quant_all_bands+0xe12>
   334c4:	2300      	movs	r3, #0
   334c6:	e7bf      	b.n	33448 <quant_all_bands+0xe28>
   334c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   334ca:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
   334ce:	42a3      	cmp	r3, r4
   334d0:	f47f adf7 	bne.w	330c2 <quant_all_bands+0xaa2>
   334d4:	e6ef      	b.n	332b6 <quant_all_bands+0xc96>
   334d6:	2200      	movs	r2, #0
   334d8:	e664      	b.n	331a4 <quant_all_bands+0xb84>
   334da:	468b      	mov	fp, r1
   334dc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   334e0:	e59d      	b.n	3301e <quant_all_bands+0x9fe>
   334e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   334e4:	f8d7 a044 	ldr.w	sl, [r7, #68]	; 0x44
   334e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   334ec:	2b00      	cmp	r3, #0
   334ee:	f040 80ea 	bne.w	336c6 <quant_all_bands+0x10a6>
   334f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   334f6:	2b00      	cmp	r3, #0
   334f8:	f47f abc2 	bne.w	32c80 <quant_all_bands+0x660>
   334fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   33500:	f000 81ce 	beq.w	338a0 <quant_all_bands+0x1280>
   33504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   33508:	eb03 0288 	add.w	r2, r3, r8, lsl #2
   3350c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   33510:	429c      	cmp	r4, r3
   33512:	f000 80bc 	beq.w	3368e <quant_all_bands+0x106e>
   33516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   3351a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   3351c:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   33520:	40ab      	lsls	r3, r5
   33522:	1a5b      	subs	r3, r3, r1
   33524:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   33528:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   3352c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   33530:	f8cd a014 	str.w	sl, [sp, #20]
   33534:	e9cd 3103 	strd	r3, r1, [sp, #12]
   33538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   3353c:	9300      	str	r3, [sp, #0]
   3353e:	e9cd 2501 	strd	r2, r5, [sp, #4]
   33542:	6e39      	ldr	r1, [r7, #96]	; 0x60
   33544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   33546:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   3354a:	465a      	mov	r2, fp
   3354c:	f507 7080 	add.w	r0, r7, #256	; 0x100
   33550:	f7fc ff66 	bl	30420 <quant_band>
   33554:	4681      	mov	r9, r0
   33556:	e52b      	b.n	32fb0 <quant_all_bands+0x990>
   33558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3355a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   3355c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   33560:	2b00      	cmp	r3, #0
   33562:	f040 80d4 	bne.w	3370e <quant_all_bands+0x10ee>
   33566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   3356a:	2b00      	cmp	r3, #0
   3356c:	f040 80f1 	bne.w	33752 <quant_all_bands+0x1132>
   33570:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   33574:	bf08      	it	eq
   33576:	4619      	moveq	r1, r3
   33578:	d003      	beq.n	33582 <quant_all_bands+0xf62>
   3357a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   3357e:	eb03 0188 	add.w	r1, r3, r8, lsl #2
   33582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   33586:	42a3      	cmp	r3, r4
   33588:	d077      	beq.n	3367a <quant_all_bands+0x105a>
   3358a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   3358e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   33590:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
   33594:	40ab      	lsls	r3, r5
   33596:	1a1b      	subs	r3, r3, r0
   33598:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   3359c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   335a0:	9205      	str	r2, [sp, #20]
   335a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   335a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   335aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   335ae:	9300      	str	r3, [sp, #0]
   335b0:	e9cd 1501 	strd	r1, r5, [sp, #4]
   335b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   335b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   335b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   335bc:	4632      	mov	r2, r6
   335be:	f507 7080 	add.w	r0, r7, #256	; 0x100
   335c2:	f7fc ff2d 	bl	30420 <quant_band>
   335c6:	2300      	movs	r3, #0
   335c8:	4604      	mov	r4, r0
   335ca:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
   335ce:	e608      	b.n	331e2 <quant_all_bands+0xbc2>
   335d0:	2300      	movs	r3, #0
   335d2:	e9cd 5302 	strd	r5, r3, [sp, #8]
   335d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   335da:	9201      	str	r2, [sp, #4]
   335dc:	9300      	str	r3, [sp, #0]
   335de:	6e39      	ldr	r1, [r7, #96]	; 0x60
   335e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   335e4:	4633      	mov	r3, r6
   335e6:	465a      	mov	r2, fp
   335e8:	f507 7080 	add.w	r0, r7, #256	; 0x100
   335ec:	f7fc ff18 	bl	30420 <quant_band>
   335f0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   335f4:	4681      	mov	r9, r0
   335f6:	f000 80c1 	beq.w	3377c <quant_all_bands+0x115c>
   335fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   335fc:	eb03 020a 	add.w	r2, r3, sl
   33600:	2300      	movs	r3, #0
   33602:	f7ff b9a2 	b.w	3294a <quant_all_bands+0x32a>
   33606:	2300      	movs	r3, #0
   33608:	e9cd 5302 	strd	r5, r3, [sp, #8]
   3360c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   33610:	9201      	str	r2, [sp, #4]
   33612:	9300      	str	r3, [sp, #0]
   33614:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   33616:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   3361a:	465b      	mov	r3, fp
   3361c:	4632      	mov	r2, r6
   3361e:	f507 7080 	add.w	r0, r7, #256	; 0x100
   33622:	f7fc fefd 	bl	30420 <quant_band>
   33626:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3362a:	4604      	mov	r4, r0
   3362c:	f000 80aa 	beq.w	33784 <quant_all_bands+0x1164>
   33630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   33632:	eb03 0209 	add.w	r2, r3, r9
   33636:	2300      	movs	r3, #0
   33638:	e5be      	b.n	331b8 <quant_all_bands+0xb98>
   3363a:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
   3363e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   33642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   33646:	2307      	movs	r3, #7
   33648:	f7ff b85c 	b.w	32704 <quant_all_bands+0xe4>
   3364c:	f1ba 0f00 	cmp.w	sl, #0
   33650:	d01f      	beq.n	33692 <quant_all_bands+0x1072>
   33652:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
   33656:	f7ff b9f4 	b.w	32a42 <quant_all_bands+0x422>
   3365a:	f1ba 0f00 	cmp.w	sl, #0
   3365e:	d022      	beq.n	336a6 <quant_all_bands+0x1086>
   33660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   33664:	e627      	b.n	332b6 <quant_all_bands+0xc96>
   33666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   3366a:	f7ff b808 	b.w	3267e <quant_all_bands+0x5e>
   3366e:	4619      	mov	r1, r3
   33670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   33674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   33676:	42a3      	cmp	r3, r4
   33678:	d187      	bne.n	3358a <quant_all_bands+0xf6a>
   3367a:	2300      	movs	r3, #0
   3367c:	e790      	b.n	335a0 <quant_all_bands+0xf80>
   3367e:	461a      	mov	r2, r3
   33680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   33684:	f8d7 a044 	ldr.w	sl, [r7, #68]	; 0x44
   33688:	429c      	cmp	r4, r3
   3368a:	f47f af44 	bne.w	33516 <quant_all_bands+0xef6>
   3368e:	2300      	movs	r3, #0
   33690:	e74c      	b.n	3352c <quant_all_bands+0xf0c>
   33692:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   33696:	461a      	mov	r2, r3
   33698:	2b00      	cmp	r3, #0
   3369a:	bf08      	it	eq
   3369c:	4622      	moveq	r2, r4
   3369e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   336a2:	f7ff b9ce 	b.w	32a42 <quant_all_bands+0x422>
   336a6:	4619      	mov	r1, r3
   336a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   336ac:	461a      	mov	r2, r3
   336ae:	2b00      	cmp	r3, #0
   336b0:	bf08      	it	eq
   336b2:	460a      	moveq	r2, r1
   336b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
   336b8:	e5fd      	b.n	332b6 <quant_all_bands+0xc96>
   336ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   336bc:	ea4c 0a06 	orr.w	sl, ip, r6
   336c0:	2b00      	cmp	r3, #0
   336c2:	f43f af16 	beq.w	334f2 <quant_all_bands+0xed2>
   336c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   336ca:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
   336ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   336d0:	40a9      	lsls	r1, r5
   336d2:	1ac9      	subs	r1, r1, r3
   336d4:	2900      	cmp	r1, #0
   336d6:	f77f af0c 	ble.w	334f2 <quant_all_bands+0xed2>
   336da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   336de:	6cba      	ldr	r2, [r7, #72]	; 0x48
   336e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   336e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   336e8:	edd3 7a00 	vldr	s15, [r3]
   336ec:	ecb2 7a01 	vldmia	r2!, {s14}
   336f0:	ee77 7a87 	vadd.f32	s15, s15, s14
   336f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   336f8:	ece3 7a01 	vstmia	r3!, {s15}
   336fc:	4299      	cmp	r1, r3
   336fe:	d1f3      	bne.n	336e8 <quant_all_bands+0x10c8>
   33700:	e6f7      	b.n	334f2 <quant_all_bands+0xed2>
   33702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   33704:	ea4e 020c 	orr.w	r2, lr, ip
   33708:	2b00      	cmp	r3, #0
   3370a:	f43f af2c 	beq.w	33566 <quant_all_bands+0xf46>
   3370e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   33712:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
   33716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   33718:	40a8      	lsls	r0, r5
   3371a:	1ac0      	subs	r0, r0, r3
   3371c:	2800      	cmp	r0, #0
   3371e:	f77f af22 	ble.w	33566 <quant_all_bands+0xf46>
   33722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   33726:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   33728:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3372c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   33730:	edd3 7a00 	vldr	s15, [r3]
   33734:	ecb1 7a01 	vldmia	r1!, {s14}
   33738:	ee77 7a87 	vadd.f32	s15, s15, s14
   3373c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   33740:	ece3 7a01 	vstmia	r3!, {s15}
   33744:	4283      	cmp	r3, r0
   33746:	d1f3      	bne.n	33730 <quant_all_bands+0x1110>
   33748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   3374c:	2b00      	cmp	r3, #0
   3374e:	f43f af0f 	beq.w	33570 <quant_all_bands+0xf50>
   33752:	2300      	movs	r3, #0
   33754:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   33758:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   3375c:	f47f aeaa 	bne.w	334b4 <quant_all_bands+0xe94>
   33760:	2100      	movs	r1, #0
   33762:	e662      	b.n	3342a <quant_all_bands+0xe0a>
   33764:	fab0 f380 	clz	r3, r0
   33768:	095b      	lsrs	r3, r3, #5
   3376a:	667b      	str	r3, [r7, #100]	; 0x64
   3376c:	2301      	movs	r3, #1
   3376e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   33772:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
   33776:	63bb      	str	r3, [r7, #56]	; 0x38
   33778:	f7fe bf73 	b.w	32662 <quant_all_bands+0x42>
   3377c:	2200      	movs	r2, #0
   3377e:	4613      	mov	r3, r2
   33780:	f7ff b8e3 	b.w	3294a <quant_all_bands+0x32a>
   33784:	2200      	movs	r2, #0
   33786:	4613      	mov	r3, r2
   33788:	e516      	b.n	331b8 <quant_all_bands+0xb98>
   3378a:	2300      	movs	r3, #0
   3378c:	63bb      	str	r3, [r7, #56]	; 0x38
   3378e:	667b      	str	r3, [r7, #100]	; 0x64
   33790:	2302      	movs	r3, #2
   33792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   33796:	f7fe bf64 	b.w	32662 <quant_all_bands+0x42>
   3379a:	f107 0cd0 	add.w	ip, r7, #208	; 0xd0
   3379e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   337a2:	f8d7 e718 	ldr.w	lr, [r7, #1816]	; 0x718
   337a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   337aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   337ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   337b2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   337b6:	f507 7cbc 	add.w	ip, r7, #376	; 0x178
   337ba:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   337be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   337c2:	f507 7e80 	add.w	lr, r7, #256	; 0x100
   337c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   337ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   337ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   337d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   337d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   337da:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
   337de:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
   337e2:	4632      	mov	r2, r6
   337e4:	6979      	ldr	r1, [r7, #20]
   337e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   337e8:	f7d8 fcba 	bl	c160 <memcpy>
   337ec:	4632      	mov	r2, r6
   337ee:	6939      	ldr	r1, [r7, #16]
   337f0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
   337f4:	f7d8 fcb4 	bl	c160 <memcpy>
   337f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   337fc:	429c      	cmp	r4, r3
   337fe:	d00e      	beq.n	3381e <quant_all_bands+0x11fe>
   33800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   33804:	68f9      	ldr	r1, [r7, #12]
   33806:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
   3380a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   3380c:	40a8      	lsls	r0, r5
   3380e:	1ac0      	subs	r0, r0, r3
   33810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   33814:	4632      	mov	r2, r6
   33816:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3381a:	f7d8 fca1 	bl	c160 <memcpy>
   3381e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   33820:	6838      	ldr	r0, [r7, #0]
   33822:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
   33826:	f7d8 fc9b 	bl	c160 <memcpy>
   3382a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   3382e:	f7ff bbbf 	b.w	32fb0 <quant_all_bands+0x990>
   33832:	2300      	movs	r3, #0
   33834:	f7ff bb75 	b.w	32f22 <quant_all_bands+0x902>
   33838:	2300      	movs	r3, #0
   3383a:	f7ff ba9d 	b.w	32d78 <quant_all_bands+0x758>
   3383e:	f8d7 3704 	ldr.w	r3, [r7, #1796]	; 0x704
   33842:	63bb      	str	r3, [r7, #56]	; 0x38
   33844:	667b      	str	r3, [r7, #100]	; 0x64
   33846:	2302      	movs	r3, #2
   33848:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   3384c:	f7fe bf09 	b.w	32662 <quant_all_bands+0x42>
   33850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   33852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   33854:	6a1b      	ldr	r3, [r3, #32]
   33856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   33858:	5e58      	ldrsh	r0, [r3, r1]
   3385a:	6a39      	ldr	r1, [r7, #32]
   3385c:	5e9a      	ldrsh	r2, [r3, r2]
   3385e:	5e5b      	ldrsh	r3, [r3, r1]
   33860:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   33864:	1a10      	subs	r0, r2, r0
   33866:	1a9b      	subs	r3, r3, r2
   33868:	40a8      	lsls	r0, r5
   3386a:	40ab      	lsls	r3, r5
   3386c:	1a1a      	subs	r2, r3, r0
   3386e:	ebc3 0340 	rsb	r3, r3, r0, lsl #1
   33872:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   33876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   3387a:	0092      	lsls	r2, r2, #2
   3387c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   33880:	f7d8 fc6e 	bl	c160 <memcpy>
   33884:	f7ff bb3a 	b.w	32efc <quant_all_bands+0x8dc>
   33888:	ee29 7aa8 	vmul.f32	s14, s19, s17
   3388c:	eddf 6a06 	vldr	s13, [pc, #24]	; 338a8 <quant_all_bands+0x1288>
   33890:	f7ff bb86 	b.w	32fa0 <quant_all_bands+0x980>
   33894:	ee29 8aa8 	vmul.f32	s16, s19, s17
   33898:	ed9f 7a03 	vldr	s14, [pc, #12]	; 338a8 <quant_all_bands+0x1288>
   3389c:	f7ff baa9 	b.w	32df2 <quant_all_bands+0x7d2>
   338a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   338a4:	e632      	b.n	3350c <quant_all_bands+0xeec>
   338a6:	bf00      	nop
   338a8:	00000000 	.word	0x00000000

000338ac <resampling_factor>:
   338ac:	f5b0 5f7a 	cmp.w	r0, #16000	; 0x3e80
   338b0:	d019      	beq.n	338e6 <resampling_factor+0x3a>
   338b2:	dd0a      	ble.n	338ca <resampling_factor+0x1e>
   338b4:	f645 53c0 	movw	r3, #24000	; 0x5dc0
   338b8:	4298      	cmp	r0, r3
   338ba:	d010      	beq.n	338de <resampling_factor+0x32>
   338bc:	f64b 3380 	movw	r3, #48000	; 0xbb80
   338c0:	1ac0      	subs	r0, r0, r3
   338c2:	fab0 f080 	clz	r0, r0
   338c6:	0940      	lsrs	r0, r0, #5
   338c8:	4770      	bx	lr
   338ca:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
   338ce:	d008      	beq.n	338e2 <resampling_factor+0x36>
   338d0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
   338d4:	4298      	cmp	r0, r3
   338d6:	bf0c      	ite	eq
   338d8:	2004      	moveq	r0, #4
   338da:	2000      	movne	r0, #0
   338dc:	4770      	bx	lr
   338de:	2002      	movs	r0, #2
   338e0:	4770      	bx	lr
   338e2:	2006      	movs	r0, #6
   338e4:	4770      	bx	lr
   338e6:	2003      	movs	r0, #3
   338e8:	4770      	bx	lr
   338ea:	bf00      	nop

000338ec <comb_filter>:
   338ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   338f0:	ed2d 8b06 	vpush	{d8-d10}
   338f4:	b085      	sub	sp, #20
   338f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
   338fa:	9e14      	ldr	r6, [sp, #80]	; 0x50
   338fc:	9601      	str	r6, [sp, #4]
   338fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33902:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   33904:	9602      	str	r6, [sp, #8]
   33906:	4605      	mov	r5, r0
   33908:	460c      	mov	r4, r1
   3390a:	e9dd ec15 	ldrd	lr, ip, [sp, #84]	; 0x54
   3390e:	9e18      	ldr	r6, [sp, #96]	; 0x60
   33910:	d105      	bne.n	3391e <comb_filter+0x32>
   33912:	eef5 0a40 	vcmp.f32	s1, #0.0
   33916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3391a:	f000 8103 	beq.w	33b24 <comb_filter+0x238>
   3391e:	2b0f      	cmp	r3, #15
   33920:	bfb8      	it	lt
   33922:	230f      	movlt	r3, #15
   33924:	4882      	ldr	r0, [pc, #520]	; (33b30 <comb_filter+0x244>)
   33926:	9303      	str	r3, [sp, #12]
   33928:	ebc3 7183 	rsb	r1, r3, r3, lsl #30
   3392c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
   33930:	eb0c 094c 	add.w	r9, ip, ip, lsl #1
   33934:	eb00 0888 	add.w	r8, r0, r8, lsl #2
   33938:	eb00 0989 	add.w	r9, r0, r9, lsl #2
   3393c:	0089      	lsls	r1, r1, #2
   3393e:	ed98 8a00 	vldr	s16, [r8]
   33942:	edd8 8a01 	vldr	s17, [r8, #4]
   33946:	ed98 9a02 	vldr	s18, [r8, #8]
   3394a:	ed99 2a00 	vldr	s4, [r9]
   3394e:	edd9 1a01 	vldr	s3, [r9, #4]
   33952:	ed99 1a02 	vldr	s2, [r9, #8]
   33956:	2a0f      	cmp	r2, #15
   33958:	f101 0a04 	add.w	sl, r1, #4
   3395c:	f1a1 0004 	sub.w	r0, r1, #4
   33960:	f1a1 0708 	sub.w	r7, r1, #8
   33964:	eeb4 0a60 	vcmp.f32	s0, s1
   33968:	eb04 0b0a 	add.w	fp, r4, sl
   3396c:	eb04 0300 	add.w	r3, r4, r0
   33970:	eb04 0907 	add.w	r9, r4, r7
   33974:	eb04 0801 	add.w	r8, r4, r1
   33978:	bfb8      	it	lt
   3397a:	220f      	movlt	r2, #15
   3397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33980:	ed9b 3a00 	vldr	s6, [fp]
   33984:	ed93 4a00 	vldr	s8, [r3]
   33988:	edd9 4a00 	vldr	s9, [r9]
   3398c:	edd8 3a00 	vldr	s7, [r8]
   33990:	ee20 8a08 	vmul.f32	s16, s0, s16
   33994:	ee60 8a28 	vmul.f32	s17, s0, s17
   33998:	ee20 9a09 	vmul.f32	s18, s0, s18
   3399c:	ee20 2a82 	vmul.f32	s4, s1, s4
   339a0:	ee60 1aa1 	vmul.f32	s3, s1, s3
   339a4:	ee20 1a81 	vmul.f32	s2, s1, s2
   339a8:	d074      	beq.n	33a94 <comb_filter+0x1a8>
   339aa:	2e00      	cmp	r6, #0
   339ac:	bfd8      	it	le
   339ae:	2300      	movle	r3, #0
   339b0:	dd5c      	ble.n	33a6c <comb_filter+0x180>
   339b2:	9b02      	ldr	r3, [sp, #8]
   339b4:	ebc2 7282 	rsb	r2, r2, r2, lsl #30
   339b8:	f101 0c08 	add.w	ip, r1, #8
   339bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   339c0:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
   339c4:	44a4      	add	ip, r4
   339c6:	46a1      	mov	r9, r4
   339c8:	46a8      	mov	r8, r5
   339ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   339ce:	e003      	b.n	339d8 <comb_filter+0xec>
   339d0:	eef0 3a43 	vmov.f32	s7, s6
   339d4:	eeb0 3a62 	vmov.f32	s6, s5
   339d8:	ecf3 6a01 	vldmia	r3!, {s13}
   339dc:	ed92 aa00 	vldr	s20, [r2]
   339e0:	ecf9 9a01 	vldmia	r9!, {s19}
   339e4:	ed52 5a02 	vldr	s11, [r2, #-8]
   339e8:	ed92 6a02 	vldr	s12, [r2, #8]
   339ec:	edd2 7a01 	vldr	s15, [r2, #4]
   339f0:	ed12 7a01 	vldr	s14, [r2, #-4]
   339f4:	ecfc 2a01 	vldmia	ip!, {s5}
   339f8:	ee66 6aa6 	vmul.f32	s13, s13, s13
   339fc:	3204      	adds	r2, #4
   339fe:	ee30 5a66 	vsub.f32	s10, s0, s13
   33a02:	ee36 6a25 	vadd.f32	s12, s12, s11
   33a06:	ee65 5a08 	vmul.f32	s11, s10, s16
   33a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
   33a0e:	ee65 5a8a 	vmul.f32	s11, s11, s20
   33a12:	ee65 7a28 	vmul.f32	s15, s10, s17
   33a16:	ee75 5aa9 	vadd.f32	s11, s11, s19
   33a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
   33a1e:	ee25 5a09 	vmul.f32	s10, s10, s18
   33a22:	ee77 7aa5 	vadd.f32	s15, s15, s11
   33a26:	ee26 7a05 	vmul.f32	s14, s12, s10
   33a2a:	ee22 6a26 	vmul.f32	s12, s4, s13
   33a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
   33a32:	ee73 5a04 	vadd.f32	s11, s6, s8
   33a36:	ee21 7aa6 	vmul.f32	s14, s3, s13
   33a3a:	ee26 6a23 	vmul.f32	s12, s12, s7
   33a3e:	ee72 4aa4 	vadd.f32	s9, s5, s9
   33a42:	ee77 7a86 	vadd.f32	s15, s15, s12
   33a46:	ee61 6a26 	vmul.f32	s13, s2, s13
   33a4a:	ee27 7a25 	vmul.f32	s14, s14, s11
   33a4e:	ee66 6aa4 	vmul.f32	s13, s13, s9
   33a52:	ee77 7a87 	vadd.f32	s15, s15, s14
   33a56:	459e      	cmp	lr, r3
   33a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
   33a5c:	eef0 4a44 	vmov.f32	s9, s8
   33a60:	ece8 7a01 	vstmia	r8!, {s15}
   33a64:	eeb0 4a63 	vmov.f32	s8, s7
   33a68:	d1b2      	bne.n	339d0 <comb_filter+0xe4>
   33a6a:	4633      	mov	r3, r6
   33a6c:	eef5 0a40 	vcmp.f32	s1, #0.0
   33a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33a74:	d115      	bne.n	33aa2 <comb_filter+0x1b6>
   33a76:	42ac      	cmp	r4, r5
   33a78:	d04f      	beq.n	33b1a <comb_filter+0x22e>
   33a7a:	9b01      	ldr	r3, [sp, #4]
   33a7c:	00b0      	lsls	r0, r6, #2
   33a7e:	1b9a      	subs	r2, r3, r6
   33a80:	1821      	adds	r1, r4, r0
   33a82:	0092      	lsls	r2, r2, #2
   33a84:	4428      	add	r0, r5
   33a86:	b005      	add	sp, #20
   33a88:	ecbd 8b06 	vpop	{d8-d10}
   33a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a90:	f7d8 bc00 	b.w	c294 <memmove>
   33a94:	9b03      	ldr	r3, [sp, #12]
   33a96:	429a      	cmp	r2, r3
   33a98:	d187      	bne.n	339aa <comb_filter+0xbe>
   33a9a:	45e6      	cmp	lr, ip
   33a9c:	d185      	bne.n	339aa <comb_filter+0xbe>
   33a9e:	2600      	movs	r6, #0
   33aa0:	e7e3      	b.n	33a6a <comb_filter+0x17e>
   33aa2:	9a01      	ldr	r2, [sp, #4]
   33aa4:	009e      	lsls	r6, r3, #2
   33aa6:	4434      	add	r4, r6
   33aa8:	1ad3      	subs	r3, r2, r3
   33aaa:	4427      	add	r7, r4
   33aac:	4420      	add	r0, r4
   33aae:	eb04 020a 	add.w	r2, r4, sl
   33ab2:	eb04 0c01 	add.w	ip, r4, r1
   33ab6:	2b00      	cmp	r3, #0
   33ab8:	ed97 7a00 	vldr	s14, [r7]
   33abc:	edd0 5a00 	vldr	s11, [r0]
   33ac0:	ed92 6a00 	vldr	s12, [r2]
   33ac4:	eddc 4a00 	vldr	s9, [ip]
   33ac8:	dd27      	ble.n	33b1a <comb_filter+0x22e>
   33aca:	3108      	adds	r1, #8
   33acc:	4435      	add	r5, r6
   33ace:	4421      	add	r1, r4
   33ad0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   33ad4:	e003      	b.n	33ade <comb_filter+0x1f2>
   33ad6:	eef0 5a64 	vmov.f32	s11, s9
   33ada:	eef0 4a66 	vmov.f32	s9, s13
   33ade:	ecb1 5a01 	vldmia	r1!, {s10}
   33ae2:	ecb4 4a01 	vldmia	r4!, {s8}
   33ae6:	ee76 6a25 	vadd.f32	s13, s12, s11
   33aea:	ee62 7a24 	vmul.f32	s15, s4, s9
   33aee:	ee66 6aa1 	vmul.f32	s13, s13, s3
   33af2:	ee35 7a07 	vadd.f32	s14, s10, s14
   33af6:	ee77 7a84 	vadd.f32	s15, s15, s8
   33afa:	ee27 7a01 	vmul.f32	s14, s14, s2
   33afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
   33b02:	eef0 6a46 	vmov.f32	s13, s12
   33b06:	ee77 7a87 	vadd.f32	s15, s15, s14
   33b0a:	eeb0 6a45 	vmov.f32	s12, s10
   33b0e:	ece5 7a01 	vstmia	r5!, {s15}
   33b12:	42ab      	cmp	r3, r5
   33b14:	eeb0 7a65 	vmov.f32	s14, s11
   33b18:	d1dd      	bne.n	33ad6 <comb_filter+0x1ea>
   33b1a:	b005      	add	sp, #20
   33b1c:	ecbd 8b06 	vpop	{d8-d10}
   33b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b24:	4281      	cmp	r1, r0
   33b26:	d0f8      	beq.n	33b1a <comb_filter+0x22e>
   33b28:	9b01      	ldr	r3, [sp, #4]
   33b2a:	009a      	lsls	r2, r3, #2
   33b2c:	e7ab      	b.n	33a86 <comb_filter+0x19a>
   33b2e:	bf00      	nop
   33b30:	000414a0 	.word	0x000414a0

00033b34 <init_caps>:
   33b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33b38:	6884      	ldr	r4, [r0, #8]
   33b3a:	2c00      	cmp	r4, #0
   33b3c:	dd20      	ble.n	33b80 <init_caps+0x4c>
   33b3e:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
   33b42:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
   33b46:	6a07      	ldr	r7, [r0, #32]
   33b48:	3904      	subs	r1, #4
   33b4a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   33b4e:	2600      	movs	r6, #0
   33b50:	fb04 e40c 	mla	r4, r4, ip, lr
   33b54:	f9b7 8000 	ldrsh.w	r8, [r7]
   33b58:	5da5      	ldrb	r5, [r4, r6]
   33b5a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
   33b5e:	3540      	adds	r5, #64	; 0x40
   33b60:	eba4 0408 	sub.w	r4, r4, r8
   33b64:	fb03 f505 	mul.w	r5, r3, r5
   33b68:	4094      	lsls	r4, r2
   33b6a:	fb04 f405 	mul.w	r4, r4, r5
   33b6e:	10a4      	asrs	r4, r4, #2
   33b70:	f841 4f04 	str.w	r4, [r1, #4]!
   33b74:	6884      	ldr	r4, [r0, #8]
   33b76:	3601      	adds	r6, #1
   33b78:	42b4      	cmp	r4, r6
   33b7a:	f107 0702 	add.w	r7, r7, #2
   33b7e:	dce7      	bgt.n	33b50 <init_caps+0x1c>
   33b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033b84 <_celt_lpc>:
   33b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33b86:	460d      	mov	r5, r1
   33b88:	ed2d 8b02 	vpush	{d8}
   33b8c:	4616      	mov	r6, r2
   33b8e:	2100      	movs	r1, #0
   33b90:	0092      	lsls	r2, r2, #2
   33b92:	ed95 8a00 	vldr	s16, [r5]
   33b96:	4604      	mov	r4, r0
   33b98:	f7d8 fbe0 	bl	c35c <memset>
   33b9c:	edd5 7a00 	vldr	s15, [r5]
   33ba0:	eef5 7a40 	vcmp.f32	s15, #0.0
   33ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33ba8:	d051      	beq.n	33c4e <_celt_lpc+0xca>
   33baa:	2e00      	cmp	r6, #0
   33bac:	dd4f      	ble.n	33c4e <_celt_lpc+0xca>
   33bae:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 33c6c <_celt_lpc+0xe8>
   33bb2:	eddf 4a2f 	vldr	s9, [pc, #188]	; 33c70 <_celt_lpc+0xec>
   33bb6:	1d2a      	adds	r2, r5, #4
   33bb8:	4620      	mov	r0, r4
   33bba:	2300      	movs	r3, #0
   33bbc:	4694      	mov	ip, r2
   33bbe:	f103 0e01 	add.w	lr, r3, #1
   33bc2:	ecbc 6a01 	vldmia	ip!, {s12}
   33bc6:	ea4f 076e 	mov.w	r7, lr, asr #1
   33bca:	2b00      	cmp	r3, #0
   33bcc:	d042      	beq.n	33c54 <_celt_lpc+0xd0>
   33bce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 33c6c <_celt_lpc+0xe8>
   33bd2:	4623      	mov	r3, r4
   33bd4:	ecf3 7a01 	vldmia	r3!, {s15}
   33bd8:	ed72 6a01 	vldmdb	r2!, {s13}
   33bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
   33be0:	4298      	cmp	r0, r3
   33be2:	ee37 7a27 	vadd.f32	s14, s14, s15
   33be6:	d1f5      	bne.n	33bd4 <_celt_lpc+0x50>
   33be8:	ee37 7a06 	vadd.f32	s14, s14, s12
   33bec:	ee87 5a08 	vdiv.f32	s10, s14, s16
   33bf0:	eef1 5a45 	vneg.f32	s11, s10
   33bf4:	edc0 5a00 	vstr	s11, [r0]
   33bf8:	4601      	mov	r1, r0
   33bfa:	4622      	mov	r2, r4
   33bfc:	2300      	movs	r3, #0
   33bfe:	ed71 6a01 	vldmdb	r1!, {s13}
   33c02:	ed92 6a00 	vldr	s12, [r2]
   33c06:	ee26 7aa5 	vmul.f32	s14, s13, s11
   33c0a:	ee66 7a25 	vmul.f32	s15, s12, s11
   33c0e:	ee37 7a06 	vadd.f32	s14, s14, s12
   33c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
   33c16:	3301      	adds	r3, #1
   33c18:	42bb      	cmp	r3, r7
   33c1a:	eca2 7a01 	vstmia	r2!, {s14}
   33c1e:	edc1 7a00 	vstr	s15, [r1]
   33c22:	dbec      	blt.n	33bfe <_celt_lpc+0x7a>
   33c24:	ee25 5a05 	vmul.f32	s10, s10, s10
   33c28:	edd5 7a00 	vldr	s15, [r5]
   33c2c:	ee25 5a08 	vmul.f32	s10, s10, s16
   33c30:	ee67 7aa4 	vmul.f32	s15, s15, s9
   33c34:	ee38 8a45 	vsub.f32	s16, s16, s10
   33c38:	eef4 7ac8 	vcmpe.f32	s15, s16
   33c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   33c40:	dc05      	bgt.n	33c4e <_celt_lpc+0xca>
   33c42:	4576      	cmp	r6, lr
   33c44:	4673      	mov	r3, lr
   33c46:	f100 0004 	add.w	r0, r0, #4
   33c4a:	4662      	mov	r2, ip
   33c4c:	d1b6      	bne.n	33bbc <_celt_lpc+0x38>
   33c4e:	ecbd 8b02 	vpop	{d8}
   33c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33c54:	ee36 7a04 	vadd.f32	s14, s12, s8
   33c58:	ee87 5a08 	vdiv.f32	s10, s14, s16
   33c5c:	eef1 5a45 	vneg.f32	s11, s10
   33c60:	edc0 5a00 	vstr	s11, [r0]
   33c64:	2f00      	cmp	r7, #0
   33c66:	d0dd      	beq.n	33c24 <_celt_lpc+0xa0>
   33c68:	e7c6      	b.n	33bf8 <_celt_lpc+0x74>
   33c6a:	bf00      	nop
   33c6c:	00000000 	.word	0x00000000
   33c70:	3a83126f 	.word	0x3a83126f

00033c74 <_celt_autocorr>:
   33c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c78:	b085      	sub	sp, #20
   33c7a:	af02      	add	r7, sp, #8
   33c7c:	e9d7 b90c 	ldrd	fp, r9, [r7, #48]	; 0x30
   33c80:	ea4f 0489 	mov.w	r4, r9, lsl #2
   33c84:	469a      	mov	sl, r3
   33c86:	4680      	mov	r8, r0
   33c88:	460e      	mov	r6, r1
   33c8a:	607a      	str	r2, [r7, #4]
   33c8c:	f7f2 ff4e 	bl	26b2c <save_stack>
   33c90:	1de3      	adds	r3, r4, #7
   33c92:	f023 0307 	bic.w	r3, r3, #7
   33c96:	ebad 0d03 	sub.w	sp, sp, r3
   33c9a:	eba9 050b 	sub.w	r5, r9, fp
   33c9e:	f1ba 0f00 	cmp.w	sl, #0
   33ca2:	d024      	beq.n	33cee <_celt_autocorr+0x7a>
   33ca4:	f1b9 0f00 	cmp.w	r9, #0
   33ca8:	ab02      	add	r3, sp, #8
   33caa:	dd05      	ble.n	33cb8 <_celt_autocorr+0x44>
   33cac:	4618      	mov	r0, r3
   33cae:	4622      	mov	r2, r4
   33cb0:	4641      	mov	r1, r8
   33cb2:	f7d8 fa55 	bl	c160 <memcpy>
   33cb6:	4603      	mov	r3, r0
   33cb8:	f1ba 0f00 	cmp.w	sl, #0
   33cbc:	dd16      	ble.n	33cec <_celt_autocorr+0x78>
   33cbe:	687a      	ldr	r2, [r7, #4]
   33cc0:	eb08 0a8a 	add.w	sl, r8, sl, lsl #2
   33cc4:	eb08 0c04 	add.w	ip, r8, r4
   33cc8:	4618      	mov	r0, r3
   33cca:	1919      	adds	r1, r3, r4
   33ccc:	ecb8 7a01 	vldmia	r8!, {s14}
   33cd0:	ecf2 6a01 	vldmia	r2!, {s13}
   33cd4:	ed7c 7a01 	vldmdb	ip!, {s15}
   33cd8:	ee27 7a26 	vmul.f32	s14, s14, s13
   33cdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
   33ce0:	45c2      	cmp	sl, r8
   33ce2:	eca0 7a01 	vstmia	r0!, {s14}
   33ce6:	ed61 7a01 	vstmdb	r1!, {s15}
   33cea:	d1ef      	bne.n	33ccc <_celt_autocorr+0x58>
   33cec:	4698      	mov	r8, r3
   33cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   33cf0:	f10b 0a01 	add.w	sl, fp, #1
   33cf4:	e9cd a300 	strd	sl, r3, [sp]
   33cf8:	4632      	mov	r2, r6
   33cfa:	462b      	mov	r3, r5
   33cfc:	4641      	mov	r1, r8
   33cfe:	4640      	mov	r0, r8
   33d00:	f7f9 fbb8 	bl	2d474 <celt_pitch_xcorr_c>
   33d04:	f1bb 0f00 	cmp.w	fp, #0
   33d08:	db22      	blt.n	33d50 <_celt_autocorr+0xdc>
   33d0a:	4444      	add	r4, r8
   33d0c:	eb08 0085 	add.w	r0, r8, r5, lsl #2
   33d10:	2100      	movs	r1, #0
   33d12:	45a9      	cmp	r9, r5
   33d14:	dd23      	ble.n	33d5e <_celt_autocorr+0xea>
   33d16:	1a6a      	subs	r2, r5, r1
   33d18:	ed9f 7a12 	vldr	s14, [pc, #72]	; 33d64 <_celt_autocorr+0xf0>
   33d1c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
   33d20:	4603      	mov	r3, r0
   33d22:	ecf3 7a01 	vldmia	r3!, {s15}
   33d26:	ecf2 6a01 	vldmia	r2!, {s13}
   33d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
   33d2e:	42a3      	cmp	r3, r4
   33d30:	ee37 7a27 	vadd.f32	s14, s14, s15
   33d34:	d1f5      	bne.n	33d22 <_celt_autocorr+0xae>
   33d36:	edd6 7a00 	vldr	s15, [r6]
   33d3a:	3101      	adds	r1, #1
   33d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
   33d40:	4551      	cmp	r1, sl
   33d42:	f105 0501 	add.w	r5, r5, #1
   33d46:	f100 0004 	add.w	r0, r0, #4
   33d4a:	eca6 7a01 	vstmia	r6!, {s14}
   33d4e:	d1e0      	bne.n	33d12 <_celt_autocorr+0x9e>
   33d50:	f7f2 fefe 	bl	26b50 <restore_stack>
   33d54:	2000      	movs	r0, #0
   33d56:	370c      	adds	r7, #12
   33d58:	46bd      	mov	sp, r7
   33d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d5e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 33d64 <_celt_autocorr+0xf0>
   33d62:	e7e8      	b.n	33d36 <_celt_autocorr+0xc2>
   33d64:	00000000 	.word	0x00000000

00033d68 <ec_decode>:
   33d68:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   33d6c:	b410      	push	{r4}
   33d6e:	fbb2 f2f1 	udiv	r2, r2, r1
   33d72:	fbb3 f3f2 	udiv	r3, r3, r2
   33d76:	1e4c      	subs	r4, r1, #1
   33d78:	1ae4      	subs	r4, r4, r3
   33d7a:	3301      	adds	r3, #1
   33d7c:	6242      	str	r2, [r0, #36]	; 0x24
   33d7e:	428b      	cmp	r3, r1
   33d80:	bf94      	ite	ls
   33d82:	4620      	movls	r0, r4
   33d84:	2000      	movhi	r0, #0
   33d86:	f85d 4b04 	ldr.w	r4, [sp], #4
   33d8a:	4770      	bx	lr

00033d8c <ec_dec_update>:
   33d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33d90:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   33d94:	1a9b      	subs	r3, r3, r2
   33d96:	fb05 f303 	mul.w	r3, r5, r3
   33d9a:	1ae4      	subs	r4, r4, r3
   33d9c:	6204      	str	r4, [r0, #32]
   33d9e:	2900      	cmp	r1, #0
   33da0:	d043      	beq.n	33e2a <ec_dec_update+0x9e>
   33da2:	1a53      	subs	r3, r2, r1
   33da4:	fb05 f303 	mul.w	r3, r5, r3
   33da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   33dac:	61c3      	str	r3, [r0, #28]
   33dae:	d83a      	bhi.n	33e26 <ec_dec_update+0x9a>
   33db0:	6942      	ldr	r2, [r0, #20]
   33db2:	f8d0 e004 	ldr.w	lr, [r0, #4]
   33db6:	6a85      	ldr	r5, [r0, #40]	; 0x28
   33db8:	6981      	ldr	r1, [r0, #24]
   33dba:	3208      	adds	r2, #8
   33dbc:	f04f 0c00 	mov.w	ip, #0
   33dc0:	ea4f 2805 	mov.w	r8, r5, lsl #8
   33dc4:	0227      	lsls	r7, r4, #8
   33dc6:	021b      	lsls	r3, r3, #8
   33dc8:	ea6f 0468 	mvn.w	r4, r8, asr #1
   33dcc:	458e      	cmp	lr, r1
   33dce:	f101 0601 	add.w	r6, r1, #1
   33dd2:	fa57 f484 	uxtab	r4, r7, r4
   33dd6:	61c3      	str	r3, [r0, #28]
   33dd8:	6142      	str	r2, [r0, #20]
   33dda:	d916      	bls.n	33e0a <ec_dec_update+0x7e>
   33ddc:	6804      	ldr	r4, [r0, #0]
   33dde:	6186      	str	r6, [r0, #24]
   33de0:	f814 8001 	ldrb.w	r8, [r4, r1]
   33de4:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   33de8:	ea48 2405 	orr.w	r4, r8, r5, lsl #8
   33dec:	ea6f 0464 	mvn.w	r4, r4, asr #1
   33df0:	fa57 f484 	uxtab	r4, r7, r4
   33df4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   33df8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   33dfc:	f102 0208 	add.w	r2, r2, #8
   33e00:	6204      	str	r4, [r0, #32]
   33e02:	d810      	bhi.n	33e26 <ec_dec_update+0x9a>
   33e04:	4631      	mov	r1, r6
   33e06:	4645      	mov	r5, r8
   33e08:	e7da      	b.n	33dc0 <ec_dec_update+0x34>
   33e0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   33e0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   33e12:	6204      	str	r4, [r0, #32]
   33e14:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   33e18:	f102 0208 	add.w	r2, r2, #8
   33e1c:	d803      	bhi.n	33e26 <ec_dec_update+0x9a>
   33e1e:	f04f 0800 	mov.w	r8, #0
   33e22:	4645      	mov	r5, r8
   33e24:	e7cc      	b.n	33dc0 <ec_dec_update+0x34>
   33e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33e2a:	69c2      	ldr	r2, [r0, #28]
   33e2c:	1ad3      	subs	r3, r2, r3
   33e2e:	e7bb      	b.n	33da8 <ec_dec_update+0x1c>

00033e30 <ec_dec_bit_logp>:
   33e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33e34:	e9d0 4307 	ldrd	r4, r3, [r0, #28]
   33e38:	fa24 f101 	lsr.w	r1, r4, r1
   33e3c:	428b      	cmp	r3, r1
   33e3e:	4602      	mov	r2, r0
   33e40:	bf34      	ite	cc
   33e42:	2001      	movcc	r0, #1
   33e44:	2000      	movcs	r0, #0
   33e46:	d302      	bcc.n	33e4e <ec_dec_bit_logp+0x1e>
   33e48:	1a5b      	subs	r3, r3, r1
   33e4a:	6213      	str	r3, [r2, #32]
   33e4c:	1a61      	subs	r1, r4, r1
   33e4e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33e52:	61d1      	str	r1, [r2, #28]
   33e54:	d83b      	bhi.n	33ece <ec_dec_bit_logp+0x9e>
   33e56:	6954      	ldr	r4, [r2, #20]
   33e58:	f8d2 8004 	ldr.w	r8, [r2, #4]
   33e5c:	6a96      	ldr	r6, [r2, #40]	; 0x28
   33e5e:	6995      	ldr	r5, [r2, #24]
   33e60:	3408      	adds	r4, #8
   33e62:	f04f 0e00 	mov.w	lr, #0
   33e66:	ea4f 2906 	mov.w	r9, r6, lsl #8
   33e6a:	ea4f 2c03 	mov.w	ip, r3, lsl #8
   33e6e:	0209      	lsls	r1, r1, #8
   33e70:	ea6f 0369 	mvn.w	r3, r9, asr #1
   33e74:	45a8      	cmp	r8, r5
   33e76:	f105 0701 	add.w	r7, r5, #1
   33e7a:	fa5c f383 	uxtab	r3, ip, r3
   33e7e:	61d1      	str	r1, [r2, #28]
   33e80:	6154      	str	r4, [r2, #20]
   33e82:	d916      	bls.n	33eb2 <ec_dec_bit_logp+0x82>
   33e84:	6813      	ldr	r3, [r2, #0]
   33e86:	6197      	str	r7, [r2, #24]
   33e88:	f813 9005 	ldrb.w	r9, [r3, r5]
   33e8c:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
   33e90:	ea49 2306 	orr.w	r3, r9, r6, lsl #8
   33e94:	ea6f 0363 	mvn.w	r3, r3, asr #1
   33e98:	fa5c f383 	uxtab	r3, ip, r3
   33e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   33ea0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33ea4:	f104 0408 	add.w	r4, r4, #8
   33ea8:	6213      	str	r3, [r2, #32]
   33eaa:	d810      	bhi.n	33ece <ec_dec_bit_logp+0x9e>
   33eac:	463d      	mov	r5, r7
   33eae:	464e      	mov	r6, r9
   33eb0:	e7d9      	b.n	33e66 <ec_dec_bit_logp+0x36>
   33eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   33eb6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33eba:	6213      	str	r3, [r2, #32]
   33ebc:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
   33ec0:	f104 0408 	add.w	r4, r4, #8
   33ec4:	d803      	bhi.n	33ece <ec_dec_bit_logp+0x9e>
   33ec6:	f04f 0900 	mov.w	r9, #0
   33eca:	464e      	mov	r6, r9
   33ecc:	e7cb      	b.n	33e66 <ec_dec_bit_logp+0x36>
   33ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33ed2:	bf00      	nop

00033ed4 <ec_dec_uint>:
   33ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ed8:	1e4d      	subs	r5, r1, #1
   33eda:	fab5 f485 	clz	r4, r5
   33ede:	4602      	mov	r2, r0
   33ee0:	f1c4 0020 	rsb	r0, r4, #32
   33ee4:	2808      	cmp	r0, #8
   33ee6:	b083      	sub	sp, #12
   33ee8:	e9d2 7307 	ldrd	r7, r3, [r2, #28]
   33eec:	f340 8090 	ble.w	34010 <ec_dec_uint+0x13c>
   33ef0:	f1c4 0418 	rsb	r4, r4, #24
   33ef4:	fa25 f604 	lsr.w	r6, r5, r4
   33ef8:	f106 0c01 	add.w	ip, r6, #1
   33efc:	fbb7 f1fc 	udiv	r1, r7, ip
   33f00:	fbb3 f0f1 	udiv	r0, r3, r1
   33f04:	f100 0e01 	add.w	lr, r0, #1
   33f08:	45f4      	cmp	ip, lr
   33f0a:	bf38      	it	cc
   33f0c:	4630      	movcc	r0, r6
   33f0e:	fb00 fc01 	mul.w	ip, r0, r1
   33f12:	eba3 030c 	sub.w	r3, r3, ip
   33f16:	1a30      	subs	r0, r6, r0
   33f18:	e9c2 3108 	strd	r3, r1, [r2, #32]
   33f1c:	bf08      	it	eq
   33f1e:	eba7 010c 	subeq.w	r1, r7, ip
   33f22:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33f26:	9001      	str	r0, [sp, #4]
   33f28:	61d1      	str	r1, [r2, #28]
   33f2a:	6957      	ldr	r7, [r2, #20]
   33f2c:	d83e      	bhi.n	33fac <ec_dec_uint+0xd8>
   33f2e:	f8d2 a004 	ldr.w	sl, [r2, #4]
   33f32:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
   33f36:	6996      	ldr	r6, [r2, #24]
   33f38:	f107 0008 	add.w	r0, r7, #8
   33f3c:	f04f 0900 	mov.w	r9, #0
   33f40:	ea4f 270c 	mov.w	r7, ip, lsl #8
   33f44:	ea4f 2803 	mov.w	r8, r3, lsl #8
   33f48:	0209      	lsls	r1, r1, #8
   33f4a:	ea6f 0367 	mvn.w	r3, r7, asr #1
   33f4e:	45b2      	cmp	sl, r6
   33f50:	f106 0e01 	add.w	lr, r6, #1
   33f54:	fa58 f383 	uxtab	r3, r8, r3
   33f58:	61d1      	str	r1, [r2, #28]
   33f5a:	6150      	str	r0, [r2, #20]
   33f5c:	4607      	mov	r7, r0
   33f5e:	d917      	bls.n	33f90 <ec_dec_uint+0xbc>
   33f60:	6813      	ldr	r3, [r2, #0]
   33f62:	f8c2 e018 	str.w	lr, [r2, #24]
   33f66:	f813 b006 	ldrb.w	fp, [r3, r6]
   33f6a:	f8c2 b028 	str.w	fp, [r2, #40]	; 0x28
   33f6e:	ea4b 230c 	orr.w	r3, fp, ip, lsl #8
   33f72:	ea6f 0363 	mvn.w	r3, r3, asr #1
   33f76:	fa58 f383 	uxtab	r3, r8, r3
   33f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   33f7e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33f82:	f100 0008 	add.w	r0, r0, #8
   33f86:	6213      	str	r3, [r2, #32]
   33f88:	d810      	bhi.n	33fac <ec_dec_uint+0xd8>
   33f8a:	4676      	mov	r6, lr
   33f8c:	46dc      	mov	ip, fp
   33f8e:	e7d7      	b.n	33f40 <ec_dec_uint+0x6c>
   33f90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   33f94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   33f98:	6213      	str	r3, [r2, #32]
   33f9a:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
   33f9e:	f100 0008 	add.w	r0, r0, #8
   33fa2:	d803      	bhi.n	33fac <ec_dec_uint+0xd8>
   33fa4:	f04f 0b00 	mov.w	fp, #0
   33fa8:	46dc      	mov	ip, fp
   33faa:	e7c9      	b.n	33f40 <ec_dec_uint+0x6c>
   33fac:	e9d2 1303 	ldrd	r1, r3, [r2, #12]
   33fb0:	9801      	ldr	r0, [sp, #4]
   33fb2:	429c      	cmp	r4, r3
   33fb4:	fa00 fe04 	lsl.w	lr, r0, r4
   33fb8:	d911      	bls.n	33fde <ec_dec_uint+0x10a>
   33fba:	e9d2 8601 	ldrd	r8, r6, [r2, #4]
   33fbe:	45b0      	cmp	r8, r6
   33fc0:	d90a      	bls.n	33fd8 <ec_dec_uint+0x104>
   33fc2:	3601      	adds	r6, #1
   33fc4:	eba8 0c06 	sub.w	ip, r8, r6
   33fc8:	6810      	ldr	r0, [r2, #0]
   33fca:	6096      	str	r6, [r2, #8]
   33fcc:	f810 c00c 	ldrb.w	ip, [r0, ip]
   33fd0:	fa0c fc03 	lsl.w	ip, ip, r3
   33fd4:	ea41 010c 	orr.w	r1, r1, ip
   33fd8:	3308      	adds	r3, #8
   33fda:	2b18      	cmp	r3, #24
   33fdc:	ddef      	ble.n	33fbe <ec_dec_uint+0xea>
   33fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33fe2:	40a0      	lsls	r0, r4
   33fe4:	ea21 0000 	bic.w	r0, r1, r0
   33fe8:	ea40 000e 	orr.w	r0, r0, lr
   33fec:	1b1b      	subs	r3, r3, r4
   33fee:	4427      	add	r7, r4
   33ff0:	4285      	cmp	r5, r0
   33ff2:	fa21 f404 	lsr.w	r4, r1, r4
   33ff6:	e9c2 3704 	strd	r3, r7, [r2, #16]
   33ffa:	60d4      	str	r4, [r2, #12]
   33ffc:	d302      	bcc.n	34004 <ec_dec_uint+0x130>
   33ffe:	b003      	add	sp, #12
   34000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34004:	2301      	movs	r3, #1
   34006:	4628      	mov	r0, r5
   34008:	62d3      	str	r3, [r2, #44]	; 0x2c
   3400a:	b003      	add	sp, #12
   3400c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34010:	fbb7 f4f1 	udiv	r4, r7, r1
   34014:	fbb3 f0f4 	udiv	r0, r3, r4
   34018:	1c46      	adds	r6, r0, #1
   3401a:	42b1      	cmp	r1, r6
   3401c:	bf38      	it	cc
   3401e:	4628      	movcc	r0, r5
   34020:	fb00 f104 	mul.w	r1, r0, r4
   34024:	1a5b      	subs	r3, r3, r1
   34026:	1a28      	subs	r0, r5, r0
   34028:	e9c2 3408 	strd	r3, r4, [r2, #32]
   3402c:	bf08      	it	eq
   3402e:	1a7c      	subeq	r4, r7, r1
   34030:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   34034:	61d4      	str	r4, [r2, #28]
   34036:	d8e2      	bhi.n	33ffe <ec_dec_uint+0x12a>
   34038:	6951      	ldr	r1, [r2, #20]
   3403a:	f8d2 8004 	ldr.w	r8, [r2, #4]
   3403e:	6a96      	ldr	r6, [r2, #40]	; 0x28
   34040:	6995      	ldr	r5, [r2, #24]
   34042:	3108      	adds	r1, #8
   34044:	f04f 0e00 	mov.w	lr, #0
   34048:	ea4f 2906 	mov.w	r9, r6, lsl #8
   3404c:	ea4f 2c03 	mov.w	ip, r3, lsl #8
   34050:	0224      	lsls	r4, r4, #8
   34052:	ea6f 0369 	mvn.w	r3, r9, asr #1
   34056:	45a8      	cmp	r8, r5
   34058:	f105 0701 	add.w	r7, r5, #1
   3405c:	fa5c f383 	uxtab	r3, ip, r3
   34060:	61d4      	str	r4, [r2, #28]
   34062:	6151      	str	r1, [r2, #20]
   34064:	d916      	bls.n	34094 <ec_dec_uint+0x1c0>
   34066:	6813      	ldr	r3, [r2, #0]
   34068:	6197      	str	r7, [r2, #24]
   3406a:	f813 9005 	ldrb.w	r9, [r3, r5]
   3406e:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
   34072:	ea49 2306 	orr.w	r3, r9, r6, lsl #8
   34076:	ea6f 0363 	mvn.w	r3, r3, asr #1
   3407a:	fa5c f383 	uxtab	r3, ip, r3
   3407e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   34082:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   34086:	f101 0108 	add.w	r1, r1, #8
   3408a:	6213      	str	r3, [r2, #32]
   3408c:	d8b7      	bhi.n	33ffe <ec_dec_uint+0x12a>
   3408e:	463d      	mov	r5, r7
   34090:	464e      	mov	r6, r9
   34092:	e7d9      	b.n	34048 <ec_dec_uint+0x174>
   34094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   34098:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   3409c:	6213      	str	r3, [r2, #32]
   3409e:	f8c2 e028 	str.w	lr, [r2, #40]	; 0x28
   340a2:	f101 0108 	add.w	r1, r1, #8
   340a6:	d8aa      	bhi.n	33ffe <ec_dec_uint+0x12a>
   340a8:	f04f 0900 	mov.w	r9, #0
   340ac:	464e      	mov	r6, r9
   340ae:	e7cb      	b.n	34048 <ec_dec_uint+0x174>

000340b0 <ec_dec_bits>:
   340b0:	b4f0      	push	{r4, r5, r6, r7}
   340b2:	e9d0 6303 	ldrd	r6, r3, [r0, #12]
   340b6:	428b      	cmp	r3, r1
   340b8:	4604      	mov	r4, r0
   340ba:	d20d      	bcs.n	340d8 <ec_dec_bits+0x28>
   340bc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
   340c0:	4290      	cmp	r0, r2
   340c2:	d906      	bls.n	340d2 <ec_dec_bits+0x22>
   340c4:	3201      	adds	r2, #1
   340c6:	1a85      	subs	r5, r0, r2
   340c8:	6827      	ldr	r7, [r4, #0]
   340ca:	60a2      	str	r2, [r4, #8]
   340cc:	5d7d      	ldrb	r5, [r7, r5]
   340ce:	409d      	lsls	r5, r3
   340d0:	432e      	orrs	r6, r5
   340d2:	3308      	adds	r3, #8
   340d4:	2b18      	cmp	r3, #24
   340d6:	ddf3      	ble.n	340c0 <ec_dec_bits+0x10>
   340d8:	6962      	ldr	r2, [r4, #20]
   340da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   340de:	1a5b      	subs	r3, r3, r1
   340e0:	440a      	add	r2, r1
   340e2:	4088      	lsls	r0, r1
   340e4:	fa26 f101 	lsr.w	r1, r6, r1
   340e8:	ea26 0000 	bic.w	r0, r6, r0
   340ec:	e9c4 3204 	strd	r3, r2, [r4, #16]
   340f0:	60e1      	str	r1, [r4, #12]
   340f2:	bcf0      	pop	{r4, r5, r6, r7}
   340f4:	4770      	bx	lr
   340f6:	bf00      	nop

000340f8 <opus_fft_impl>:
   340f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   340fc:	ed2d 8b04 	vpush	{d8-d9}
   34100:	6884      	ldr	r4, [r0, #8]
   34102:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   34106:	b09d      	sub	sp, #116	; 0x74
   34108:	2301      	movs	r3, #1
   3410a:	4605      	mov	r5, r0
   3410c:	9011      	str	r0, [sp, #68]	; 0x44
   3410e:	9110      	str	r1, [sp, #64]	; 0x40
   34110:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   34114:	9015      	str	r0, [sp, #84]	; 0x54
   34116:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
   3411a:	429a      	cmp	r2, r3
   3411c:	e9cd 1313 	strd	r1, r3, [sp, #76]	; 0x4c
   34120:	f000 84c2 	beq.w	34aa8 <opus_fft_impl+0x9b0>
   34124:	8a2b      	ldrh	r3, [r5, #16]
   34126:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   3412a:	fb13 f300 	smulbb	r3, r3, r0
   3412e:	2a01      	cmp	r2, #1
   34130:	9316      	str	r3, [sp, #88]	; 0x58
   34132:	f000 84be 	beq.w	34ab2 <opus_fft_impl+0x9ba>
   34136:	f9b5 1014 	ldrsh.w	r1, [r5, #20]
   3413a:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
   3413e:	fb03 f301 	mul.w	r3, r3, r1
   34142:	2a01      	cmp	r2, #1
   34144:	9317      	str	r3, [sp, #92]	; 0x5c
   34146:	f000 84b9 	beq.w	34abc <opus_fft_impl+0x9c4>
   3414a:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
   3414e:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
   34152:	fb03 f301 	mul.w	r3, r3, r1
   34156:	2a01      	cmp	r2, #1
   34158:	9318      	str	r3, [sp, #96]	; 0x60
   3415a:	f000 84b5 	beq.w	34ac8 <opus_fft_impl+0x9d0>
   3415e:	f9b5 101c 	ldrsh.w	r1, [r5, #28]
   34162:	f9b5 201e 	ldrsh.w	r2, [r5, #30]
   34166:	fb03 f301 	mul.w	r3, r3, r1
   3416a:	2a01      	cmp	r2, #1
   3416c:	9319      	str	r3, [sp, #100]	; 0x64
   3416e:	f000 8495 	beq.w	34a9c <opus_fft_impl+0x9a4>
   34172:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
   34176:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
   3417a:	fb03 f301 	mul.w	r3, r3, r1
   3417e:	2a01      	cmp	r2, #1
   34180:	931a      	str	r3, [sp, #104]	; 0x68
   34182:	f000 84a7 	beq.w	34ad4 <opus_fft_impl+0x9dc>
   34186:	f9b5 2024 	ldrsh.w	r2, [r5, #36]	; 0x24
   3418a:	fb03 f302 	mul.w	r3, r3, r2
   3418e:	931b      	str	r3, [sp, #108]	; 0x6c
   34190:	2306      	movs	r3, #6
   34192:	9301      	str	r3, [sp, #4]
   34194:	2207      	movs	r2, #7
   34196:	462b      	mov	r3, r5
   34198:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   3419c:	a914      	add	r1, sp, #80	; 0x50
   3419e:	f9b2 e00a 	ldrsh.w	lr, [r2, #10]
   341a2:	9a01      	ldr	r2, [sp, #4]
   341a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 341f0 <opus_fft_impl+0xf8>
   341a8:	ed9f 6a10 	vldr	s12, [pc, #64]	; 341ec <opus_fft_impl+0xf4>
   341ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   341b0:	9202      	str	r2, [sp, #8]
   341b2:	461a      	mov	r2, r3
   341b4:	320c      	adds	r2, #12
   341b6:	330a      	adds	r3, #10
   341b8:	920f      	str	r2, [sp, #60]	; 0x3c
   341ba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
   341be:	9312      	str	r3, [sp, #72]	; 0x48
   341c0:	9a01      	ldr	r2, [sp, #4]
   341c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   341c4:	2a00      	cmp	r2, #0
   341c6:	f000 8408 	beq.w	349da <opus_fft_impl+0x8e2>
   341ca:	4619      	mov	r1, r3
   341cc:	f931 3022 	ldrsh.w	r3, [r1, r2, lsl #2]
   341d0:	9912      	ldr	r1, [sp, #72]	; 0x48
   341d2:	3b02      	subs	r3, #2
   341d4:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
   341d8:	9204      	str	r2, [sp, #16]
   341da:	2b03      	cmp	r3, #3
   341dc:	f200 81b8 	bhi.w	34550 <opus_fft_impl+0x458>
   341e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   341e4:	029c037b 	.word	0x029c037b
   341e8:	000a01c8 	.word	0x000a01c8
   341ec:	3f3504f3 	.word	0x3f3504f3
   341f0:	1004c61c 	.word	0x1004c61c
   341f4:	2301      	movs	r3, #1
   341f6:	9304      	str	r3, [sp, #16]
   341f8:	9b02      	ldr	r3, [sp, #8]
   341fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   341fc:	6818      	ldr	r0, [r3, #0]
   341fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34200:	9005      	str	r0, [sp, #20]
   34202:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   34204:	4603      	mov	r3, r0
   34206:	4093      	lsls	r3, r2
   34208:	fb0e f203 	mul.w	r2, lr, r3
   3420c:	00d2      	lsls	r2, r2, #3
   3420e:	18b9      	adds	r1, r7, r2
   34210:	440a      	add	r2, r1
   34212:	2800      	cmp	r0, #0
   34214:	ed92 4a00 	vldr	s8, [r2]
   34218:	edd2 3a01 	vldr	s7, [r2, #4]
   3421c:	ed91 5a00 	vldr	s10, [r1]
   34220:	edd1 4a01 	vldr	s9, [r1, #4]
   34224:	f340 8194 	ble.w	34550 <opus_fft_impl+0x458>
   34228:	eb0e 014e 	add.w	r1, lr, lr, lsl #1
   3422c:	f1be 0f00 	cmp.w	lr, #0
   34230:	ea4f 01c1 	mov.w	r1, r1, lsl #3
   34234:	ea4f 160e 	mov.w	r6, lr, lsl #4
   34238:	ea4f 144e 	mov.w	r4, lr, lsl #5
   3423c:	f340 8188 	ble.w	34550 <opus_fft_impl+0x458>
   34240:	f10e 0201 	add.w	r2, lr, #1
   34244:	00d2      	lsls	r2, r2, #3
   34246:	f1a2 0508 	sub.w	r5, r2, #8
   3424a:	1b49      	subs	r1, r1, r5
   3424c:	910b      	str	r1, [sp, #44]	; 0x2c
   3424e:	1b61      	subs	r1, r4, r5
   34250:	910a      	str	r1, [sp, #40]	; 0x28
   34252:	9910      	ldr	r1, [sp, #64]	; 0x40
   34254:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   34258:	440a      	add	r2, r1
   3425a:	00c1      	lsls	r1, r0, #3
   3425c:	910e      	str	r1, [sp, #56]	; 0x38
   3425e:	9904      	ldr	r1, [sp, #16]
   34260:	00c9      	lsls	r1, r1, #3
   34262:	910c      	str	r1, [sp, #48]	; 0x30
   34264:	00d9      	lsls	r1, r3, #3
   34266:	ebce 7e4e 	rsb	lr, lr, lr, lsl #29
   3426a:	9108      	str	r1, [sp, #32]
   3426c:	0119      	lsls	r1, r3, #4
   3426e:	015b      	lsls	r3, r3, #5
   34270:	f107 0a04 	add.w	sl, r7, #4
   34274:	1b76      	subs	r6, r6, r5
   34276:	ea4f 07ce 	mov.w	r7, lr, lsl #3
   3427a:	9306      	str	r3, [sp, #24]
   3427c:	2300      	movs	r3, #0
   3427e:	970d      	str	r7, [sp, #52]	; 0x34
   34280:	9609      	str	r6, [sp, #36]	; 0x24
   34282:	9107      	str	r1, [sp, #28]
   34284:	9303      	str	r3, [sp, #12]
   34286:	9909      	ldr	r1, [sp, #36]	; 0x24
   34288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3428a:	188f      	adds	r7, r1, r2
   3428c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3428e:	188e      	adds	r6, r1, r2
   34290:	990a      	ldr	r1, [sp, #40]	; 0x28
   34292:	4413      	add	r3, r2
   34294:	188d      	adds	r5, r1, r2
   34296:	46d1      	mov	r9, sl
   34298:	46d0      	mov	r8, sl
   3429a:	46d6      	mov	lr, sl
   3429c:	46d4      	mov	ip, sl
   3429e:	4614      	mov	r4, r2
   342a0:	e913 0003 	ldmdb	r3, {r0, r1}
   342a4:	e88b 0003 	stmia.w	fp, {r0, r1}
   342a8:	ed54 1a01 	vldr	s3, [r4, #-4]
   342ac:	ed99 7a00 	vldr	s14, [r9]
   342b0:	ed59 7a01 	vldr	s15, [r9, #-4]
   342b4:	ed14 1a02 	vldr	s2, [r4, #-8]
   342b8:	9908      	ldr	r1, [sp, #32]
   342ba:	ee21 2a87 	vmul.f32	s4, s3, s14
   342be:	ee27 1a81 	vmul.f32	s2, s15, s2
   342c2:	ee67 7aa1 	vmul.f32	s15, s15, s3
   342c6:	ee31 1a42 	vsub.f32	s2, s2, s4
   342ca:	4489      	add	r9, r1
   342cc:	ed8b 1a02 	vstr	s2, [fp, #8]
   342d0:	ed54 1a02 	vldr	s3, [r4, #-8]
   342d4:	9907      	ldr	r1, [sp, #28]
   342d6:	ee67 1a21 	vmul.f32	s3, s14, s3
   342da:	3308      	adds	r3, #8
   342dc:	ee71 1aa7 	vadd.f32	s3, s3, s15
   342e0:	3408      	adds	r4, #8
   342e2:	edcb 1a03 	vstr	s3, [fp, #12]
   342e6:	ed57 7a01 	vldr	s15, [r7, #-4]
   342ea:	ed9c 3a00 	vldr	s6, [ip]
   342ee:	ed5c 6a01 	vldr	s13, [ip, #-4]
   342f2:	ed17 7a02 	vldr	s14, [r7, #-8]
   342f6:	ee67 2a83 	vmul.f32	s5, s15, s6
   342fa:	ee26 7a87 	vmul.f32	s14, s13, s14
   342fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
   34302:	ee37 7a62 	vsub.f32	s14, s14, s5
   34306:	448c      	add	ip, r1
   34308:	ed8b 7a04 	vstr	s14, [fp, #16]
   3430c:	ed57 7a02 	vldr	s15, [r7, #-8]
   34310:	990e      	ldr	r1, [sp, #56]	; 0x38
   34312:	ee63 7a27 	vmul.f32	s15, s6, s15
   34316:	3508      	adds	r5, #8
   34318:	ee77 7aa6 	vadd.f32	s15, s15, s13
   3431c:	3708      	adds	r7, #8
   3431e:	edcb 7a05 	vstr	s15, [fp, #20]
   34322:	ed16 2a01 	vldr	s4, [r6, #-4]
   34326:	ed5e 2a01 	vldr	s5, [lr, #-4]
   3432a:	edde 6a00 	vldr	s13, [lr]
   3432e:	ed16 3a02 	vldr	s6, [r6, #-8]
   34332:	ee62 0a26 	vmul.f32	s1, s4, s13
   34336:	ee22 3a83 	vmul.f32	s6, s5, s6
   3433a:	ee62 2a82 	vmul.f32	s5, s5, s4
   3433e:	ee33 3a60 	vsub.f32	s6, s6, s1
   34342:	448e      	add	lr, r1
   34344:	ed8b 3a06 	vstr	s6, [fp, #24]
   34348:	ed16 2a02 	vldr	s4, [r6, #-8]
   3434c:	ee66 6a82 	vmul.f32	s13, s13, s4
   34350:	ee37 8a03 	vadd.f32	s16, s14, s6
   34354:	ee76 2aa2 	vadd.f32	s5, s13, s5
   34358:	ee37 7a43 	vsub.f32	s14, s14, s6
   3435c:	edcb 2a07 	vstr	s5, [fp, #28]
   34360:	ed58 6a01 	vldr	s13, [r8, #-4]
   34364:	ed98 3a00 	vldr	s6, [r8]
   34368:	ed15 0a03 	vldr	s0, [r5, #-12]
   3436c:	ed15 2a04 	vldr	s4, [r5, #-16]
   34370:	ee60 0a03 	vmul.f32	s1, s0, s6
   34374:	ee26 2a82 	vmul.f32	s4, s13, s4
   34378:	ee26 0a80 	vmul.f32	s0, s13, s0
   3437c:	ee32 2a60 	vsub.f32	s4, s4, s1
   34380:	ee77 8aa2 	vadd.f32	s17, s15, s5
   34384:	ed8b 2a08 	vstr	s4, [fp, #32]
   34388:	ed55 6a04 	vldr	s13, [r5, #-16]
   3438c:	edcb 8a11 	vstr	s17, [fp, #68]	; 0x44
   34390:	ee63 6a26 	vmul.f32	s13, s6, s13
   34394:	ee71 0a02 	vadd.f32	s1, s2, s4
   34398:	ee76 6a80 	vadd.f32	s13, s13, s0
   3439c:	ee31 2a42 	vsub.f32	s4, s2, s4
   343a0:	ee31 3aa6 	vadd.f32	s6, s3, s13
   343a4:	ee77 7ae2 	vsub.f32	s15, s15, s5
   343a8:	ee71 1ae6 	vsub.f32	s3, s3, s13
   343ac:	edcb 0a0e 	vstr	s1, [fp, #56]	; 0x38
   343b0:	edcb 1a15 	vstr	s3, [fp, #84]	; 0x54
   343b4:	ed8b 3a0f 	vstr	s6, [fp, #60]	; 0x3c
   343b8:	ed8b 2a14 	vstr	s4, [fp, #80]	; 0x50
   343bc:	edcb 6a09 	vstr	s13, [fp, #36]	; 0x24
   343c0:	edcb 7a13 	vstr	s15, [fp, #76]	; 0x4c
   343c4:	ed8b 8a10 	vstr	s16, [fp, #64]	; 0x40
   343c8:	ed8b 7a12 	vstr	s14, [fp, #72]	; 0x48
   343cc:	ed13 7a04 	vldr	s14, [r3, #-16]
   343d0:	ed53 7a03 	vldr	s15, [r3, #-12]
   343d4:	ee33 3a28 	vadd.f32	s6, s6, s17
   343d8:	ee70 0a88 	vadd.f32	s1, s1, s16
   343dc:	ee37 3a83 	vadd.f32	s6, s15, s6
   343e0:	ee77 0a20 	vadd.f32	s1, s14, s1
   343e4:	ed03 3a03 	vstr	s6, [r3, #-12]
   343e8:	ed43 0a04 	vstr	s1, [r3, #-16]
   343ec:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
   343f0:	ed9b 1a10 	vldr	s2, [fp, #64]	; 0x40
   343f4:	ed9b 7a0f 	vldr	s14, [fp, #60]	; 0x3c
   343f8:	eddb 1a11 	vldr	s3, [fp, #68]	; 0x44
   343fc:	ed9b 3a15 	vldr	s6, [fp, #84]	; 0x54
   34400:	ed9b 2a13 	vldr	s4, [fp, #76]	; 0x4c
   34404:	eddb 7a14 	vldr	s15, [fp, #80]	; 0x50
   34408:	eddb 2a12 	vldr	s5, [fp, #72]	; 0x48
   3440c:	ed9b 0a00 	vldr	s0, [fp]
   34410:	eddb 0a01 	vldr	s1, [fp, #4]
   34414:	ee24 1a01 	vmul.f32	s2, s8, s2
   34418:	ee64 1a21 	vmul.f32	s3, s8, s3
   3441c:	ee65 6a26 	vmul.f32	s13, s10, s13
   34420:	ee25 7a07 	vmul.f32	s14, s10, s14
   34424:	ee76 6a81 	vadd.f32	s13, s13, s2
   34428:	ee23 2a82 	vmul.f32	s4, s7, s4
   3442c:	ee37 7a21 	vadd.f32	s14, s14, s3
   34430:	ee63 2aa2 	vmul.f32	s5, s7, s5
   34434:	ee24 3a83 	vmul.f32	s6, s9, s6
   34438:	ee64 7aa7 	vmul.f32	s15, s9, s15
   3443c:	ee76 6a80 	vadd.f32	s13, s13, s0
   34440:	ee37 7a20 	vadd.f32	s14, s14, s1
   34444:	ee33 3a02 	vadd.f32	s6, s6, s4
   34448:	ee77 7aa2 	vadd.f32	s15, s15, s5
   3444c:	ee36 2ac3 	vsub.f32	s4, s13, s6
   34450:	ee77 2a27 	vadd.f32	s5, s14, s15
   34454:	eef1 7a67 	vneg.f32	s15, s15
   34458:	edcb 6a0a 	vstr	s13, [fp, #40]	; 0x28
   3445c:	ed8b 3a0c 	vstr	s6, [fp, #48]	; 0x30
   34460:	ed8b 7a0b 	vstr	s14, [fp, #44]	; 0x2c
   34464:	edcb 7a0d 	vstr	s15, [fp, #52]	; 0x34
   34468:	ed04 2a04 	vstr	s4, [r4, #-16]
   3446c:	ed44 2a03 	vstr	s5, [r4, #-12]
   34470:	ed9b 7a0c 	vldr	s14, [fp, #48]	; 0x30
   34474:	eddb 7a0a 	vldr	s15, [fp, #40]	; 0x28
   34478:	ee77 7a87 	vadd.f32	s15, s15, s14
   3447c:	4293      	cmp	r3, r2
   3447e:	ed45 7a04 	vstr	s15, [r5, #-16]
   34482:	ed9b 7a0d 	vldr	s14, [fp, #52]	; 0x34
   34486:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
   3448a:	9906      	ldr	r1, [sp, #24]
   3448c:	ee77 7a87 	vadd.f32	s15, s15, s14
   34490:	4488      	add	r8, r1
   34492:	ed45 7a03 	vstr	s15, [r5, #-12]
   34496:	ed9b 7a0e 	vldr	s14, [fp, #56]	; 0x38
   3449a:	ed9b 1a10 	vldr	s2, [fp, #64]	; 0x40
   3449e:	eddb 7a0f 	vldr	s15, [fp, #60]	; 0x3c
   344a2:	eddb 1a11 	vldr	s3, [fp, #68]	; 0x44
   344a6:	ed9b 3a13 	vldr	s6, [fp, #76]	; 0x4c
   344aa:	ed9b 2a15 	vldr	s4, [fp, #84]	; 0x54
   344ae:	eddb 6a14 	vldr	s13, [fp, #80]	; 0x50
   344b2:	eddb 2a12 	vldr	s5, [fp, #72]	; 0x48
   344b6:	ed9b 0a00 	vldr	s0, [fp]
   344ba:	eddb 0a01 	vldr	s1, [fp, #4]
   344be:	ee24 7a07 	vmul.f32	s14, s8, s14
   344c2:	ee25 1a01 	vmul.f32	s2, s10, s2
   344c6:	ee64 7a27 	vmul.f32	s15, s8, s15
   344ca:	ee65 1a21 	vmul.f32	s3, s10, s3
   344ce:	ee23 2a82 	vmul.f32	s4, s7, s4
   344d2:	ee64 2aa2 	vmul.f32	s5, s9, s5
   344d6:	ee37 7a01 	vadd.f32	s14, s14, s2
   344da:	ee24 3a83 	vmul.f32	s6, s9, s6
   344de:	ee77 7aa1 	vadd.f32	s15, s15, s3
   344e2:	ee63 6aa6 	vmul.f32	s13, s7, s13
   344e6:	ee37 7a00 	vadd.f32	s14, s14, s0
   344ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
   344ee:	ee33 3a42 	vsub.f32	s6, s6, s4
   344f2:	ee76 6ae2 	vsub.f32	s13, s13, s5
   344f6:	ee37 2a03 	vadd.f32	s4, s14, s6
   344fa:	ee77 2aa6 	vadd.f32	s5, s15, s13
   344fe:	ed8b 7a16 	vstr	s14, [fp, #88]	; 0x58
   34502:	edcb 7a17 	vstr	s15, [fp, #92]	; 0x5c
   34506:	ed8b 3a18 	vstr	s6, [fp, #96]	; 0x60
   3450a:	edcb 6a19 	vstr	s13, [fp, #100]	; 0x64
   3450e:	ed07 2a04 	vstr	s4, [r7, #-16]
   34512:	ed47 2a03 	vstr	s5, [r7, #-12]
   34516:	ed9b 7a18 	vldr	s14, [fp, #96]	; 0x60
   3451a:	eddb 7a16 	vldr	s15, [fp, #88]	; 0x58
   3451e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   34522:	f106 0608 	add.w	r6, r6, #8
   34526:	ed46 7a04 	vstr	s15, [r6, #-16]
   3452a:	eddb 7a17 	vldr	s15, [fp, #92]	; 0x5c
   3452e:	ed9b 7a19 	vldr	s14, [fp, #100]	; 0x64
   34532:	ee77 7ac7 	vsub.f32	s15, s15, s14
   34536:	ed46 7a03 	vstr	s15, [r6, #-12]
   3453a:	f47f aeb1 	bne.w	342a0 <opus_fft_impl+0x1a8>
   3453e:	990c      	ldr	r1, [sp, #48]	; 0x30
   34540:	9b03      	ldr	r3, [sp, #12]
   34542:	440a      	add	r2, r1
   34544:	9905      	ldr	r1, [sp, #20]
   34546:	3301      	adds	r3, #1
   34548:	4299      	cmp	r1, r3
   3454a:	9303      	str	r3, [sp, #12]
   3454c:	f47f ae9b 	bne.w	34286 <opus_fft_impl+0x18e>
   34550:	f8dd e010 	ldr.w	lr, [sp, #16]
   34554:	9b01      	ldr	r3, [sp, #4]
   34556:	9a02      	ldr	r2, [sp, #8]
   34558:	3b01      	subs	r3, #1
   3455a:	9301      	str	r3, [sp, #4]
   3455c:	3a04      	subs	r2, #4
   3455e:	3301      	adds	r3, #1
   34560:	9202      	str	r2, [sp, #8]
   34562:	f47f ae2d 	bne.w	341c0 <opus_fft_impl+0xc8>
   34566:	b01d      	add	sp, #116	; 0x74
   34568:	ecbd 8b04 	vpop	{d8-d9}
   3456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34570:	2301      	movs	r3, #1
   34572:	9304      	str	r3, [sp, #16]
   34574:	9b02      	ldr	r3, [sp, #8]
   34576:	f1be 0f01 	cmp.w	lr, #1
   3457a:	f8d3 8000 	ldr.w	r8, [r3]
   3457e:	f000 8240 	beq.w	34a02 <opus_fft_impl+0x90a>
   34582:	f1b8 0f00 	cmp.w	r8, #0
   34586:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   3458a:	dde1      	ble.n	34550 <opus_fft_impl+0x458>
   3458c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   3458e:	fa08 f902 	lsl.w	r9, r8, r2
   34592:	eb09 0249 	add.w	r2, r9, r9, lsl #1
   34596:	00d2      	lsls	r2, r2, #3
   34598:	9206      	str	r2, [sp, #24]
   3459a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
   3459e:	9205      	str	r2, [sp, #20]
   345a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   345a2:	ea4f 01ce 	mov.w	r1, lr, lsl #3
   345a6:	f1be 0f00 	cmp.w	lr, #0
   345aa:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
   345ae:	9107      	str	r1, [sp, #28]
   345b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   345b4:	ea4f 1909 	mov.w	r9, r9, lsl #4
   345b8:	ea4f 120e 	mov.w	r2, lr, lsl #4
   345bc:	ddc8      	ble.n	34550 <opus_fft_impl+0x458>
   345be:	3b08      	subs	r3, #8
   345c0:	930b      	str	r3, [sp, #44]	; 0x2c
   345c2:	9b04      	ldr	r3, [sp, #16]
   345c4:	00db      	lsls	r3, r3, #3
   345c6:	9308      	str	r3, [sp, #32]
   345c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   345ca:	3a08      	subs	r2, #8
   345cc:	f103 0408 	add.w	r4, r3, #8
   345d0:	f1a1 0308 	sub.w	r3, r1, #8
   345d4:	920a      	str	r2, [sp, #40]	; 0x28
   345d6:	f04f 0e00 	mov.w	lr, #0
   345da:	9309      	str	r3, [sp, #36]	; 0x24
   345dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   345de:	9403      	str	r4, [sp, #12]
   345e0:	1918      	adds	r0, r3, r4
   345e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   345e4:	1919      	adds	r1, r3, r4
   345e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   345e8:	191a      	adds	r2, r3, r4
   345ea:	9b07      	ldr	r3, [sp, #28]
   345ec:	4667      	mov	r7, ip
   345ee:	eb03 0a04 	add.w	sl, r3, r4
   345f2:	4666      	mov	r6, ip
   345f4:	4623      	mov	r3, r4
   345f6:	4665      	mov	r5, ip
   345f8:	ed95 1a00 	vldr	s2, [r5]
   345fc:	edd7 2a00 	vldr	s5, [r7]
   34600:	ed90 7a00 	vldr	s14, [r0]
   34604:	edd5 7a01 	vldr	s15, [r5, #4]
   34608:	ed92 4a00 	vldr	s8, [r2]
   3460c:	edd7 4a01 	vldr	s9, [r7, #4]
   34610:	edd1 3a00 	vldr	s7, [r1]
   34614:	ed96 2a00 	vldr	s4, [r6]
   34618:	edd6 8a01 	vldr	s17, [r6, #4]
   3461c:	ed90 8a01 	vldr	s16, [r0, #4]
   34620:	edd2 0a01 	vldr	s1, [r2, #4]
   34624:	edd1 1a01 	vldr	s3, [r1, #4]
   34628:	ed53 6a02 	vldr	s13, [r3, #-8]
   3462c:	ed13 3a01 	vldr	s6, [r3, #-4]
   34630:	9c05      	ldr	r4, [sp, #20]
   34632:	ee21 0a08 	vmul.f32	s0, s2, s16
   34636:	ee27 5a01 	vmul.f32	s10, s14, s2
   3463a:	ee28 8a27 	vmul.f32	s16, s16, s15
   3463e:	ee22 1aa0 	vmul.f32	s2, s5, s1
   34642:	ee67 7a27 	vmul.f32	s15, s14, s15
   34646:	ee60 0aa4 	vmul.f32	s1, s1, s9
   3464a:	ee24 7a22 	vmul.f32	s14, s8, s5
   3464e:	ee64 4a24 	vmul.f32	s9, s8, s9
   34652:	ee63 2a82 	vmul.f32	s5, s7, s4
   34656:	ee23 4aa8 	vmul.f32	s8, s7, s17
   3465a:	ee22 2a21 	vmul.f32	s4, s4, s3
   3465e:	ee61 1aa8 	vmul.f32	s3, s3, s17
   34662:	ee37 7a60 	vsub.f32	s14, s14, s1
   34666:	ee72 3ae1 	vsub.f32	s7, s5, s3
   3466a:	ee74 4a81 	vadd.f32	s9, s9, s2
   3466e:	ee34 4a02 	vadd.f32	s8, s8, s4
   34672:	ee77 7a80 	vadd.f32	s15, s15, s0
   34676:	ee35 5a48 	vsub.f32	s10, s10, s16
   3467a:	ee33 2aa6 	vadd.f32	s4, s7, s13
   3467e:	ee35 1a07 	vadd.f32	s2, s10, s14
   34682:	ee74 2a03 	vadd.f32	s5, s8, s6
   34686:	ee77 1aa4 	vadd.f32	s3, s15, s9
   3468a:	ee32 0a41 	vsub.f32	s0, s4, s2
   3468e:	ee72 0ae1 	vsub.f32	s1, s5, s3
   34692:	ed03 2a02 	vstr	s4, [r3, #-8]
   34696:	ed43 2a01 	vstr	s5, [r3, #-4]
   3469a:	ed81 0a00 	vstr	s0, [r1]
   3469e:	edc1 0a01 	vstr	s1, [r1, #4]
   346a2:	ed13 2a02 	vldr	s4, [r3, #-8]
   346a6:	ed53 2a01 	vldr	s5, [r3, #-4]
   346aa:	ee35 5a47 	vsub.f32	s10, s10, s14
   346ae:	ee76 6ae3 	vsub.f32	s13, s13, s7
   346b2:	ee33 7a44 	vsub.f32	s14, s6, s8
   346b6:	ee77 7ae4 	vsub.f32	s15, s15, s9
   346ba:	ee32 4a01 	vadd.f32	s8, s4, s2
   346be:	ee72 4aa1 	vadd.f32	s9, s5, s3
   346c2:	ed03 4a02 	vstr	s8, [r3, #-8]
   346c6:	ed43 4a01 	vstr	s9, [r3, #-4]
   346ca:	ee76 3aa7 	vadd.f32	s7, s13, s15
   346ce:	3308      	adds	r3, #8
   346d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
   346d4:	4425      	add	r5, r4
   346d6:	ee77 6a45 	vsub.f32	s13, s14, s10
   346da:	9c06      	ldr	r4, [sp, #24]
   346dc:	edc0 3a00 	vstr	s7, [r0]
   346e0:	ee37 7a05 	vadd.f32	s14, s14, s10
   346e4:	459a      	cmp	sl, r3
   346e6:	edc0 6a01 	vstr	s13, [r0, #4]
   346ea:	4427      	add	r7, r4
   346ec:	edc2 7a00 	vstr	s15, [r2]
   346f0:	ed82 7a01 	vstr	s14, [r2, #4]
   346f4:	444e      	add	r6, r9
   346f6:	f101 0108 	add.w	r1, r1, #8
   346fa:	f100 0008 	add.w	r0, r0, #8
   346fe:	f102 0208 	add.w	r2, r2, #8
   34702:	f47f af79 	bne.w	345f8 <opus_fft_impl+0x500>
   34706:	9c03      	ldr	r4, [sp, #12]
   34708:	9b08      	ldr	r3, [sp, #32]
   3470a:	f10e 0e01 	add.w	lr, lr, #1
   3470e:	45f0      	cmp	r8, lr
   34710:	441c      	add	r4, r3
   34712:	f47f af63 	bne.w	345dc <opus_fft_impl+0x4e4>
   34716:	e71b      	b.n	34550 <opus_fft_impl+0x458>
   34718:	2301      	movs	r3, #1
   3471a:	9304      	str	r3, [sp, #16]
   3471c:	9b02      	ldr	r3, [sp, #8]
   3471e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   34720:	6818      	ldr	r0, [r3, #0]
   34722:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34724:	9005      	str	r0, [sp, #20]
   34726:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
   3472a:	4603      	mov	r3, r0
   3472c:	4093      	lsls	r3, r2
   3472e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
   34732:	fb02 a103 	mla	r1, r2, r3, sl
   34736:	2800      	cmp	r0, #0
   34738:	ed91 3a01 	vldr	s6, [r1, #4]
   3473c:	f77f af08 	ble.w	34550 <opus_fft_impl+0x458>
   34740:	1d14      	adds	r4, r2, #4
   34742:	f1c2 0204 	rsb	r2, r2, #4
   34746:	9208      	str	r2, [sp, #32]
   34748:	00da      	lsls	r2, r3, #3
   3474a:	011b      	lsls	r3, r3, #4
   3474c:	9910      	ldr	r1, [sp, #64]	; 0x40
   3474e:	9307      	str	r3, [sp, #28]
   34750:	9b04      	ldr	r3, [sp, #16]
   34752:	9206      	str	r2, [sp, #24]
   34754:	eb01 1c0e 	add.w	ip, r1, lr, lsl #4
   34758:	00db      	lsls	r3, r3, #3
   3475a:	440c      	add	r4, r1
   3475c:	f10c 0c04 	add.w	ip, ip, #4
   34760:	f04f 0900 	mov.w	r9, #0
   34764:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   34768:	4698      	mov	r8, r3
   3476a:	9b08      	ldr	r3, [sp, #32]
   3476c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   34770:	9403      	str	r4, [sp, #12]
   34772:	191a      	adds	r2, r3, r4
   34774:	1f21      	subs	r1, r4, #4
   34776:	f1ac 0704 	sub.w	r7, ip, #4
   3477a:	4660      	mov	r0, ip
   3477c:	4623      	mov	r3, r4
   3477e:	4656      	mov	r6, sl
   34780:	4655      	mov	r5, sl
   34782:	edd5 7a00 	vldr	s15, [r5]
   34786:	ed95 7a01 	vldr	s14, [r5, #4]
   3478a:	ed91 5a01 	vldr	s10, [r1, #4]
   3478e:	ed53 6a01 	vldr	s13, [r3, #-4]
   34792:	9c06      	ldr	r4, [sp, #24]
   34794:	ee65 4a07 	vmul.f32	s9, s10, s14
   34798:	ee67 6aa6 	vmul.f32	s13, s15, s13
   3479c:	ee27 5a85 	vmul.f32	s10, s15, s10
   347a0:	ee76 6ae4 	vsub.f32	s13, s13, s9
   347a4:	4425      	add	r5, r4
   347a6:	edcb 6a02 	vstr	s13, [fp, #8]
   347aa:	ed53 7a01 	vldr	s15, [r3, #-4]
   347ae:	9c07      	ldr	r4, [sp, #28]
   347b0:	ee67 7a27 	vmul.f32	s15, s14, s15
   347b4:	f1be 0e01 	subs.w	lr, lr, #1
   347b8:	ee77 7a85 	vadd.f32	s15, s15, s10
   347bc:	f102 0208 	add.w	r2, r2, #8
   347c0:	edcb 7a03 	vstr	s15, [fp, #12]
   347c4:	ed96 7a00 	vldr	s14, [r6]
   347c8:	ed96 5a01 	vldr	s10, [r6, #4]
   347cc:	edd7 3a01 	vldr	s7, [r7, #4]
   347d0:	ed50 4a01 	vldr	s9, [r0, #-4]
   347d4:	ee23 4a85 	vmul.f32	s8, s7, s10
   347d8:	ee67 4a24 	vmul.f32	s9, s14, s9
   347dc:	ee67 3a23 	vmul.f32	s7, s14, s7
   347e0:	ee74 4ac4 	vsub.f32	s9, s9, s8
   347e4:	4426      	add	r6, r4
   347e6:	edcb 4a04 	vstr	s9, [fp, #16]
   347ea:	ed10 7a01 	vldr	s14, [r0, #-4]
   347ee:	ee25 7a07 	vmul.f32	s14, s10, s14
   347f2:	ee36 4aa4 	vadd.f32	s8, s13, s9
   347f6:	ee37 7a23 	vadd.f32	s14, s14, s7
   347fa:	ee76 6ae4 	vsub.f32	s13, s13, s9
   347fe:	ee37 5a87 	vadd.f32	s10, s15, s14
   34802:	ee77 7ac7 	vsub.f32	s15, s15, s14
   34806:	ed8b 4a06 	vstr	s8, [fp, #24]
   3480a:	edcb 7a01 	vstr	s15, [fp, #4]
   3480e:	edcb 6a00 	vstr	s13, [fp]
   34812:	ed8b 5a07 	vstr	s10, [fp, #28]
   34816:	ed8b 7a05 	vstr	s14, [fp, #20]
   3481a:	ed52 7a04 	vldr	s15, [r2, #-16]
   3481e:	ee24 4a25 	vmul.f32	s8, s8, s11
   34822:	ee25 5a25 	vmul.f32	s10, s10, s11
   34826:	ee37 4ac4 	vsub.f32	s8, s15, s8
   3482a:	f100 0008 	add.w	r0, r0, #8
   3482e:	ed03 4a01 	vstr	s8, [r3, #-4]
   34832:	ed52 7a03 	vldr	s15, [r2, #-12]
   34836:	ee37 5ac5 	vsub.f32	s10, s15, s10
   3483a:	f107 0708 	add.w	r7, r7, #8
   3483e:	ed81 5a01 	vstr	s10, [r1, #4]
   34842:	eddb 6a00 	vldr	s13, [fp]
   34846:	eddb 7a01 	vldr	s15, [fp, #4]
   3484a:	ed9b 5a06 	vldr	s10, [fp, #24]
   3484e:	ee67 7a83 	vmul.f32	s15, s15, s6
   34852:	ee66 6a83 	vmul.f32	s13, s13, s6
   34856:	edcb 7a01 	vstr	s15, [fp, #4]
   3485a:	edcb 6a00 	vstr	s13, [fp]
   3485e:	ed12 7a04 	vldr	s14, [r2, #-16]
   34862:	ed52 7a03 	vldr	s15, [r2, #-12]
   34866:	ee37 7a05 	vadd.f32	s14, s14, s10
   3486a:	f103 0308 	add.w	r3, r3, #8
   3486e:	ed02 7a04 	vstr	s14, [r2, #-16]
   34872:	ed9b 7a07 	vldr	s14, [fp, #28]
   34876:	ee77 7a87 	vadd.f32	s15, s15, s14
   3487a:	f101 0108 	add.w	r1, r1, #8
   3487e:	ed42 7a03 	vstr	s15, [r2, #-12]
   34882:	ed53 7a03 	vldr	s15, [r3, #-12]
   34886:	ed9b 7a01 	vldr	s14, [fp, #4]
   3488a:	ee77 7a87 	vadd.f32	s15, s15, s14
   3488e:	ed40 7a03 	vstr	s15, [r0, #-12]
   34892:	ed51 7a01 	vldr	s15, [r1, #-4]
   34896:	ed9b 7a00 	vldr	s14, [fp]
   3489a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   3489e:	ed47 7a01 	vstr	s15, [r7, #-4]
   348a2:	ed53 7a03 	vldr	s15, [r3, #-12]
   348a6:	ed9b 7a01 	vldr	s14, [fp, #4]
   348aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
   348ae:	ed43 7a03 	vstr	s15, [r3, #-12]
   348b2:	ed51 7a01 	vldr	s15, [r1, #-4]
   348b6:	ed9b 7a00 	vldr	s14, [fp]
   348ba:	ee77 7a87 	vadd.f32	s15, s15, s14
   348be:	ed41 7a01 	vstr	s15, [r1, #-4]
   348c2:	f47f af5e 	bne.w	34782 <opus_fft_impl+0x68a>
   348c6:	9b05      	ldr	r3, [sp, #20]
   348c8:	9c03      	ldr	r4, [sp, #12]
   348ca:	f109 0901 	add.w	r9, r9, #1
   348ce:	454b      	cmp	r3, r9
   348d0:	4444      	add	r4, r8
   348d2:	44c4      	add	ip, r8
   348d4:	f47f af49 	bne.w	3476a <opus_fft_impl+0x672>
   348d8:	e63a      	b.n	34550 <opus_fft_impl+0x458>
   348da:	f8dd e010 	ldr.w	lr, [sp, #16]
   348de:	9b02      	ldr	r3, [sp, #8]
   348e0:	6819      	ldr	r1, [r3, #0]
   348e2:	2900      	cmp	r1, #0
   348e4:	f77f ae36 	ble.w	34554 <opus_fft_impl+0x45c>
   348e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   348ea:	2200      	movs	r2, #0
   348ec:	3340      	adds	r3, #64	; 0x40
   348ee:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
   348f2:	ed13 9a02 	vldr	s18, [r3, #-8]
   348f6:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
   348fa:	ed53 7a01 	vldr	s15, [r3, #-4]
   348fe:	ed53 8a0e 	vldr	s17, [r3, #-56]	; 0xffffffc8
   34902:	ed13 8a0d 	vldr	s16, [r3, #-52]	; 0xffffffcc
   34906:	ed13 0a0a 	vldr	s0, [r3, #-40]	; 0xffffffd8
   3490a:	ed53 0a09 	vldr	s1, [r3, #-36]	; 0xffffffdc
   3490e:	ed13 1a10 	vldr	s2, [r3, #-64]	; 0xffffffc0
   34912:	ed53 1a0f 	vldr	s3, [r3, #-60]	; 0xffffffc4
   34916:	ed13 2a0c 	vldr	s4, [r3, #-48]	; 0xffffffd0
   3491a:	ed13 3a08 	vldr	s6, [r3, #-32]	; 0xffffffe0
   3491e:	ed53 3a07 	vldr	s7, [r3, #-28]	; 0xffffffe4
   34922:	ed13 4a03 	vldr	s8, [r3, #-12]
   34926:	ed53 2a04 	vldr	s5, [r3, #-16]
   3492a:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
   3492e:	ee36 5a87 	vadd.f32	s10, s13, s14
   34932:	ee37 7a66 	vsub.f32	s14, s14, s13
   34936:	ee77 6ac9 	vsub.f32	s13, s15, s18
   3493a:	ee77 7a89 	vadd.f32	s15, s15, s18
   3493e:	ee25 5a06 	vmul.f32	s10, s10, s12
   34942:	ee27 7a06 	vmul.f32	s14, s14, s12
   34946:	ee66 6a86 	vmul.f32	s13, s13, s12
   3494a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
   3494e:	ee38 9ac5 	vsub.f32	s18, s17, s10
   34952:	3201      	adds	r2, #1
   34954:	ee35 5a28 	vadd.f32	s10, s10, s17
   34958:	ee78 8a47 	vsub.f32	s17, s16, s14
   3495c:	ee37 7a08 	vadd.f32	s14, s14, s16
   34960:	ee30 8a66 	vsub.f32	s16, s0, s13
   34964:	ee76 6a80 	vadd.f32	s13, s13, s0
   34968:	ee30 0ae7 	vsub.f32	s0, s1, s15
   3496c:	ee77 7aa0 	vadd.f32	s15, s15, s1
   34970:	ee71 0a43 	vsub.f32	s1, s2, s6
   34974:	ee33 3a01 	vadd.f32	s6, s6, s2
   34978:	ee31 1ae3 	vsub.f32	s2, s3, s7
   3497c:	ee73 3aa1 	vadd.f32	s7, s7, s3
   34980:	ee72 1a44 	vsub.f32	s3, s4, s8
   34984:	ee34 4a02 	vadd.f32	s8, s8, s4
   34988:	ee32 2aa4 	vadd.f32	s4, s5, s9
   3498c:	ee74 4ae2 	vsub.f32	s9, s9, s5
   34990:	4291      	cmp	r1, r2
   34992:	ed03 9a06 	vstr	s18, [r3, #-24]	; 0xffffffe8
   34996:	ed03 5a0e 	vstr	s10, [r3, #-56]	; 0xffffffc8
   3499a:	ed43 8a05 	vstr	s17, [r3, #-20]	; 0xffffffec
   3499e:	ed03 7a0d 	vstr	s14, [r3, #-52]	; 0xffffffcc
   349a2:	ed03 8a02 	vstr	s16, [r3, #-8]
   349a6:	ed43 6a0a 	vstr	s13, [r3, #-40]	; 0xffffffd8
   349aa:	ed03 0a01 	vstr	s0, [r3, #-4]
   349ae:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
   349b2:	ed43 0a08 	vstr	s1, [r3, #-32]	; 0xffffffe0
   349b6:	ed03 3a10 	vstr	s6, [r3, #-64]	; 0xffffffc0
   349ba:	ed03 1a07 	vstr	s2, [r3, #-28]	; 0xffffffe4
   349be:	ed43 3a0f 	vstr	s7, [r3, #-60]	; 0xffffffc4
   349c2:	ed03 4a0c 	vstr	s8, [r3, #-48]	; 0xffffffd0
   349c6:	ed43 1a04 	vstr	s3, [r3, #-16]
   349ca:	ed03 2a03 	vstr	s4, [r3, #-12]
   349ce:	ed43 4a0b 	vstr	s9, [r3, #-44]	; 0xffffffd4
   349d2:	f103 0340 	add.w	r3, r3, #64	; 0x40
   349d6:	d18a      	bne.n	348ee <opus_fft_impl+0x7f6>
   349d8:	e5bc      	b.n	34554 <opus_fft_impl+0x45c>
   349da:	f9b3 3000 	ldrsh.w	r3, [r3]
   349de:	3b02      	subs	r3, #2
   349e0:	2b03      	cmp	r3, #3
   349e2:	f63f adc0 	bhi.w	34566 <opus_fft_impl+0x46e>
   349e6:	a201      	add	r2, pc, #4	; (adr r2, 349ec <opus_fft_impl+0x8f4>)
   349e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   349ec:	000349fd 	.word	0x000349fd
   349f0:	00034719 	.word	0x00034719
   349f4:	00034571 	.word	0x00034571
   349f8:	000341f5 	.word	0x000341f5
   349fc:	f04f 0e01 	mov.w	lr, #1
   34a00:	e76d      	b.n	348de <opus_fft_impl+0x7e6>
   34a02:	f1b8 0f00 	cmp.w	r8, #0
   34a06:	f77f ada3 	ble.w	34550 <opus_fft_impl+0x458>
   34a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34a0c:	2200      	movs	r2, #0
   34a0e:	3320      	adds	r3, #32
   34a10:	ed13 3a04 	vldr	s6, [r3, #-16]
   34a14:	ed53 3a02 	vldr	s7, [r3, #-8]
   34a18:	ed53 4a01 	vldr	s9, [r3, #-4]
   34a1c:	ed53 2a03 	vldr	s5, [r3, #-12]
   34a20:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
   34a24:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
   34a28:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
   34a2c:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
   34a30:	ee37 4a43 	vsub.f32	s8, s14, s6
   34a34:	ee37 7a03 	vadd.f32	s14, s14, s6
   34a38:	ee36 3aa3 	vadd.f32	s6, s13, s7
   34a3c:	ee76 6ae3 	vsub.f32	s13, s13, s7
   34a40:	ee75 3a64 	vsub.f32	s7, s10, s9
   34a44:	ee35 5a24 	vadd.f32	s10, s10, s9
   34a48:	ee77 4aa2 	vadd.f32	s9, s15, s5
   34a4c:	ee77 7ae2 	vsub.f32	s15, s15, s5
   34a50:	3201      	adds	r2, #1
   34a52:	ee77 2a43 	vsub.f32	s5, s14, s6
   34a56:	ee37 7a03 	vadd.f32	s14, s14, s6
   34a5a:	ee34 3a23 	vadd.f32	s6, s8, s7
   34a5e:	ee34 4a63 	vsub.f32	s8, s8, s7
   34a62:	ee74 3ac5 	vsub.f32	s7, s9, s10
   34a66:	ee34 5a85 	vadd.f32	s10, s9, s10
   34a6a:	ee77 4ae6 	vsub.f32	s9, s15, s13
   34a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
   34a72:	4590      	cmp	r8, r2
   34a74:	ed43 2a04 	vstr	s5, [r3, #-16]
   34a78:	ed03 7a08 	vstr	s14, [r3, #-32]	; 0xffffffe0
   34a7c:	ed03 3a06 	vstr	s6, [r3, #-24]	; 0xffffffe8
   34a80:	ed03 4a02 	vstr	s8, [r3, #-8]
   34a84:	ed43 3a03 	vstr	s7, [r3, #-12]
   34a88:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
   34a8c:	ed43 4a05 	vstr	s9, [r3, #-20]	; 0xffffffec
   34a90:	ed43 7a01 	vstr	s15, [r3, #-4]
   34a94:	f103 0320 	add.w	r3, r3, #32
   34a98:	d1ba      	bne.n	34a10 <opus_fft_impl+0x918>
   34a9a:	e559      	b.n	34550 <opus_fft_impl+0x458>
   34a9c:	2304      	movs	r3, #4
   34a9e:	9301      	str	r3, [sp, #4]
   34aa0:	2205      	movs	r2, #5
   34aa2:	462b      	mov	r3, r5
   34aa4:	f7ff bb78 	b.w	34198 <opus_fft_impl+0xa0>
   34aa8:	2300      	movs	r3, #0
   34aaa:	9301      	str	r3, [sp, #4]
   34aac:	462b      	mov	r3, r5
   34aae:	f7ff bb73 	b.w	34198 <opus_fft_impl+0xa0>
   34ab2:	9201      	str	r2, [sp, #4]
   34ab4:	462b      	mov	r3, r5
   34ab6:	2202      	movs	r2, #2
   34ab8:	f7ff bb6e 	b.w	34198 <opus_fft_impl+0xa0>
   34abc:	2302      	movs	r3, #2
   34abe:	9301      	str	r3, [sp, #4]
   34ac0:	2203      	movs	r2, #3
   34ac2:	462b      	mov	r3, r5
   34ac4:	f7ff bb68 	b.w	34198 <opus_fft_impl+0xa0>
   34ac8:	2303      	movs	r3, #3
   34aca:	9301      	str	r3, [sp, #4]
   34acc:	2204      	movs	r2, #4
   34ace:	462b      	mov	r3, r5
   34ad0:	f7ff bb62 	b.w	34198 <opus_fft_impl+0xa0>
   34ad4:	2305      	movs	r3, #5
   34ad6:	9301      	str	r3, [sp, #4]
   34ad8:	2206      	movs	r2, #6
   34ada:	462b      	mov	r3, r5
   34adc:	f7ff bb5c 	b.w	34198 <opus_fft_impl+0xa0>

00034ae0 <ec_laplace_encode>:
   34ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34ae4:	680d      	ldr	r5, [r1, #0]
   34ae6:	2d00      	cmp	r5, #0
   34ae8:	d040      	beq.n	34b6c <ec_laplace_encode+0x8c>
   34aea:	460f      	mov	r7, r1
   34aec:	f5c2 41ff 	rsb	r1, r2, #32640	; 0x7f80
   34af0:	3160      	adds	r1, #96	; 0x60
   34af2:	f5c3 4480 	rsb	r4, r3, #16384	; 0x4000
   34af6:	ea4f 7cd5 	mov.w	ip, r5, lsr #31
   34afa:	fb04 f401 	mul.w	r4, r4, r1
   34afe:	eba5 050c 	sub.w	r5, r5, ip
   34b02:	f1cc 0e00 	rsb	lr, ip, #0
   34b06:	0be4      	lsrs	r4, r4, #15
   34b08:	ea85 050e 	eor.w	r5, r5, lr
   34b0c:	d03f      	beq.n	34b8e <ec_laplace_encode+0xae>
   34b0e:	2d01      	cmp	r5, #1
   34b10:	dd32      	ble.n	34b78 <ec_laplace_encode+0x98>
   34b12:	f04f 0801 	mov.w	r8, #1
   34b16:	e001      	b.n	34b1c <ec_laplace_encode+0x3c>
   34b18:	4545      	cmp	r5, r8
   34b1a:	d02d      	beq.n	34b78 <ec_laplace_encode+0x98>
   34b1c:	0064      	lsls	r4, r4, #1
   34b1e:	1ca6      	adds	r6, r4, #2
   34b20:	fb03 f404 	mul.w	r4, r3, r4
   34b24:	0be4      	lsrs	r4, r4, #15
   34b26:	f108 0801 	add.w	r8, r8, #1
   34b2a:	4432      	add	r2, r6
   34b2c:	d1f4      	bne.n	34b18 <ec_laplace_encode+0x38>
   34b2e:	f5c2 4300 	rsb	r3, r2, #32768	; 0x8000
   34b32:	4463      	add	r3, ip
   34b34:	105b      	asrs	r3, r3, #1
   34b36:	eba5 0508 	sub.w	r5, r5, r8
   34b3a:	3b01      	subs	r3, #1
   34b3c:	429d      	cmp	r5, r3
   34b3e:	bfa8      	it	ge
   34b40:	461d      	movge	r5, r3
   34b42:	ebcc 0145 	rsb	r1, ip, r5, lsl #1
   34b46:	3101      	adds	r1, #1
   34b48:	4445      	add	r5, r8
   34b4a:	4411      	add	r1, r2
   34b4c:	eba5 050c 	sub.w	r5, r5, ip
   34b50:	ea85 050e 	eor.w	r5, r5, lr
   34b54:	f5c1 4200 	rsb	r2, r1, #32768	; 0x8000
   34b58:	603d      	str	r5, [r7, #0]
   34b5a:	2a01      	cmp	r2, #1
   34b5c:	bf94      	ite	ls
   34b5e:	188a      	addls	r2, r1, r2
   34b60:	1c4a      	addhi	r2, r1, #1
   34b62:	230f      	movs	r3, #15
   34b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34b68:	f7f7 be5c 	b.w	2c824 <ec_encode_bin>
   34b6c:	4629      	mov	r1, r5
   34b6e:	230f      	movs	r3, #15
   34b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34b74:	f7f7 be56 	b.w	2c824 <ec_encode_bin>
   34b78:	3401      	adds	r4, #1
   34b7a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   34b7e:	4021      	ands	r1, r4
   34b80:	4411      	add	r1, r2
   34b82:	1862      	adds	r2, r4, r1
   34b84:	230f      	movs	r3, #15
   34b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   34b8a:	f7f7 be4b 	b.w	2c824 <ec_encode_bin>
   34b8e:	f04f 0801 	mov.w	r8, #1
   34b92:	e7cc      	b.n	34b2e <ec_laplace_encode+0x4e>

00034b94 <isqrt32>:
   34b94:	fab0 f280 	clz	r2, r0
   34b98:	f1c2 021f 	rsb	r2, r2, #31
   34b9c:	1052      	asrs	r2, r2, #1
   34b9e:	2101      	movs	r1, #1
   34ba0:	4091      	lsls	r1, r2
   34ba2:	4603      	mov	r3, r0
   34ba4:	fa01 f002 	lsl.w	r0, r1, r2
   34ba8:	4298      	cmp	r0, r3
   34baa:	b470      	push	{r4, r5, r6}
   34bac:	bf96      	itet	ls
   34bae:	1a1b      	subls	r3, r3, r0
   34bb0:	2000      	movhi	r0, #0
   34bb2:	4608      	movls	r0, r1
   34bb4:	1e56      	subs	r6, r2, #1
   34bb6:	ea4f 0551 	mov.w	r5, r1, lsr #1
   34bba:	f100 80be 	bmi.w	34d3a <isqrt32+0x1a6>
   34bbe:	eb05 0440 	add.w	r4, r5, r0, lsl #1
   34bc2:	40b4      	lsls	r4, r6
   34bc4:	42a3      	cmp	r3, r4
   34bc6:	bf28      	it	cs
   34bc8:	1940      	addcs	r0, r0, r5
   34bca:	f1a2 0502 	sub.w	r5, r2, #2
   34bce:	bf28      	it	cs
   34bd0:	1b1b      	subcs	r3, r3, r4
   34bd2:	1c6c      	adds	r4, r5, #1
   34bd4:	ea4f 0691 	mov.w	r6, r1, lsr #2
   34bd8:	f000 80af 	beq.w	34d3a <isqrt32+0x1a6>
   34bdc:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34be0:	40ac      	lsls	r4, r5
   34be2:	42a3      	cmp	r3, r4
   34be4:	f1a2 0503 	sub.w	r5, r2, #3
   34be8:	bf24      	itt	cs
   34bea:	1980      	addcs	r0, r0, r6
   34bec:	1b1b      	subcs	r3, r3, r4
   34bee:	1c6c      	adds	r4, r5, #1
   34bf0:	ea4f 06d1 	mov.w	r6, r1, lsr #3
   34bf4:	f000 80a1 	beq.w	34d3a <isqrt32+0x1a6>
   34bf8:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34bfc:	40ac      	lsls	r4, r5
   34bfe:	42a3      	cmp	r3, r4
   34c00:	f1a2 0504 	sub.w	r5, r2, #4
   34c04:	bf24      	itt	cs
   34c06:	1980      	addcs	r0, r0, r6
   34c08:	1b1b      	subcs	r3, r3, r4
   34c0a:	1c6c      	adds	r4, r5, #1
   34c0c:	ea4f 1611 	mov.w	r6, r1, lsr #4
   34c10:	f000 8093 	beq.w	34d3a <isqrt32+0x1a6>
   34c14:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c18:	40ac      	lsls	r4, r5
   34c1a:	42a3      	cmp	r3, r4
   34c1c:	f1a2 0505 	sub.w	r5, r2, #5
   34c20:	bf24      	itt	cs
   34c22:	1980      	addcs	r0, r0, r6
   34c24:	1b1b      	subcs	r3, r3, r4
   34c26:	1c6c      	adds	r4, r5, #1
   34c28:	ea4f 1651 	mov.w	r6, r1, lsr #5
   34c2c:	f000 8085 	beq.w	34d3a <isqrt32+0x1a6>
   34c30:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c34:	40ac      	lsls	r4, r5
   34c36:	42a3      	cmp	r3, r4
   34c38:	f1a2 0506 	sub.w	r5, r2, #6
   34c3c:	bf24      	itt	cs
   34c3e:	1980      	addcs	r0, r0, r6
   34c40:	1b1b      	subcs	r3, r3, r4
   34c42:	1c6c      	adds	r4, r5, #1
   34c44:	ea4f 1691 	mov.w	r6, r1, lsr #6
   34c48:	d077      	beq.n	34d3a <isqrt32+0x1a6>
   34c4a:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c4e:	40ac      	lsls	r4, r5
   34c50:	42a3      	cmp	r3, r4
   34c52:	f1a2 0507 	sub.w	r5, r2, #7
   34c56:	bf24      	itt	cs
   34c58:	1980      	addcs	r0, r0, r6
   34c5a:	1b1b      	subcs	r3, r3, r4
   34c5c:	1c6c      	adds	r4, r5, #1
   34c5e:	ea4f 16d1 	mov.w	r6, r1, lsr #7
   34c62:	d06a      	beq.n	34d3a <isqrt32+0x1a6>
   34c64:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c68:	40ac      	lsls	r4, r5
   34c6a:	42a3      	cmp	r3, r4
   34c6c:	f1a2 0508 	sub.w	r5, r2, #8
   34c70:	bf24      	itt	cs
   34c72:	1980      	addcs	r0, r0, r6
   34c74:	1b1b      	subcs	r3, r3, r4
   34c76:	1c6c      	adds	r4, r5, #1
   34c78:	ea4f 2611 	mov.w	r6, r1, lsr #8
   34c7c:	d05d      	beq.n	34d3a <isqrt32+0x1a6>
   34c7e:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c82:	40ac      	lsls	r4, r5
   34c84:	42a3      	cmp	r3, r4
   34c86:	f1a2 0509 	sub.w	r5, r2, #9
   34c8a:	bf24      	itt	cs
   34c8c:	1980      	addcs	r0, r0, r6
   34c8e:	1b1b      	subcs	r3, r3, r4
   34c90:	1c6c      	adds	r4, r5, #1
   34c92:	ea4f 2651 	mov.w	r6, r1, lsr #9
   34c96:	d050      	beq.n	34d3a <isqrt32+0x1a6>
   34c98:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34c9c:	40ac      	lsls	r4, r5
   34c9e:	42a3      	cmp	r3, r4
   34ca0:	f1a2 050a 	sub.w	r5, r2, #10
   34ca4:	bf24      	itt	cs
   34ca6:	1980      	addcs	r0, r0, r6
   34ca8:	1b1b      	subcs	r3, r3, r4
   34caa:	1c6c      	adds	r4, r5, #1
   34cac:	ea4f 2691 	mov.w	r6, r1, lsr #10
   34cb0:	d043      	beq.n	34d3a <isqrt32+0x1a6>
   34cb2:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34cb6:	40ac      	lsls	r4, r5
   34cb8:	42a3      	cmp	r3, r4
   34cba:	f1a2 050b 	sub.w	r5, r2, #11
   34cbe:	bf24      	itt	cs
   34cc0:	1980      	addcs	r0, r0, r6
   34cc2:	1b1b      	subcs	r3, r3, r4
   34cc4:	1c6c      	adds	r4, r5, #1
   34cc6:	ea4f 26d1 	mov.w	r6, r1, lsr #11
   34cca:	d036      	beq.n	34d3a <isqrt32+0x1a6>
   34ccc:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34cd0:	40ac      	lsls	r4, r5
   34cd2:	42a3      	cmp	r3, r4
   34cd4:	f1a2 050c 	sub.w	r5, r2, #12
   34cd8:	bf24      	itt	cs
   34cda:	1980      	addcs	r0, r0, r6
   34cdc:	1b1b      	subcs	r3, r3, r4
   34cde:	1c6c      	adds	r4, r5, #1
   34ce0:	ea4f 3611 	mov.w	r6, r1, lsr #12
   34ce4:	d029      	beq.n	34d3a <isqrt32+0x1a6>
   34ce6:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34cea:	40ac      	lsls	r4, r5
   34cec:	42a3      	cmp	r3, r4
   34cee:	f1a2 050d 	sub.w	r5, r2, #13
   34cf2:	bf24      	itt	cs
   34cf4:	1980      	addcs	r0, r0, r6
   34cf6:	1b1b      	subcs	r3, r3, r4
   34cf8:	1c6c      	adds	r4, r5, #1
   34cfa:	ea4f 3651 	mov.w	r6, r1, lsr #13
   34cfe:	d01c      	beq.n	34d3a <isqrt32+0x1a6>
   34d00:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34d04:	40ac      	lsls	r4, r5
   34d06:	42a3      	cmp	r3, r4
   34d08:	f1a2 050e 	sub.w	r5, r2, #14
   34d0c:	bf24      	itt	cs
   34d0e:	1980      	addcs	r0, r0, r6
   34d10:	1b1b      	subcs	r3, r3, r4
   34d12:	1c6c      	adds	r4, r5, #1
   34d14:	ea4f 3691 	mov.w	r6, r1, lsr #14
   34d18:	d00f      	beq.n	34d3a <isqrt32+0x1a6>
   34d1a:	eb06 0440 	add.w	r4, r6, r0, lsl #1
   34d1e:	40ac      	lsls	r4, r5
   34d20:	42a3      	cmp	r3, r4
   34d22:	bf24      	itt	cs
   34d24:	1980      	addcs	r0, r0, r6
   34d26:	1b1b      	subcs	r3, r3, r4
   34d28:	2a0f      	cmp	r2, #15
   34d2a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   34d2e:	d104      	bne.n	34d3a <isqrt32+0x1a6>
   34d30:	eb01 0240 	add.w	r2, r1, r0, lsl #1
   34d34:	429a      	cmp	r2, r3
   34d36:	bf98      	it	ls
   34d38:	1840      	addls	r0, r0, r1
   34d3a:	bc70      	pop	{r4, r5, r6}
   34d3c:	4770      	bx	lr
   34d3e:	bf00      	nop

00034d40 <exp_rotation1>:
   34d40:	1a89      	subs	r1, r1, r2
   34d42:	2900      	cmp	r1, #0
   34d44:	b430      	push	{r4, r5}
   34d46:	eeb1 6a60 	vneg.f32	s12, s1
   34d4a:	dd1a      	ble.n	34d82 <exp_rotation1+0x42>
   34d4c:	4605      	mov	r5, r0
   34d4e:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   34d52:	2300      	movs	r3, #0
   34d54:	edd5 7a00 	vldr	s15, [r5]
   34d58:	ed94 7a00 	vldr	s14, [r4]
   34d5c:	ee60 5aa7 	vmul.f32	s11, s1, s15
   34d60:	ee67 6a00 	vmul.f32	s13, s14, s0
   34d64:	ee67 7a80 	vmul.f32	s15, s15, s0
   34d68:	ee26 7a07 	vmul.f32	s14, s12, s14
   34d6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
   34d70:	ee77 7a87 	vadd.f32	s15, s15, s14
   34d74:	3301      	adds	r3, #1
   34d76:	428b      	cmp	r3, r1
   34d78:	ece4 6a01 	vstmia	r4!, {s13}
   34d7c:	ece5 7a01 	vstmia	r5!, {s15}
   34d80:	d1e8      	bne.n	34d54 <exp_rotation1+0x14>
   34d82:	1a89      	subs	r1, r1, r2
   34d84:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
   34d88:	3b01      	subs	r3, #1
   34d8a:	3901      	subs	r1, #1
   34d8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   34d90:	d41a      	bmi.n	34dc8 <exp_rotation1+0x88>
   34d92:	3201      	adds	r2, #1
   34d94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   34d98:	3004      	adds	r0, #4
   34d9a:	ed70 7a01 	vldmdb	r0!, {s15}
   34d9e:	ed32 7a01 	vldmdb	r2!, {s14}
   34da2:	ee60 5aa7 	vmul.f32	s11, s1, s15
   34da6:	ee60 6a07 	vmul.f32	s13, s0, s14
   34daa:	ee60 7a27 	vmul.f32	s15, s0, s15
   34dae:	ee26 7a07 	vmul.f32	s14, s12, s14
   34db2:	ee76 6aa5 	vadd.f32	s13, s13, s11
   34db6:	ee77 7a87 	vadd.f32	s15, s15, s14
   34dba:	3901      	subs	r1, #1
   34dbc:	1c4b      	adds	r3, r1, #1
   34dbe:	edc2 6a00 	vstr	s13, [r2]
   34dc2:	edc0 7a00 	vstr	s15, [r0]
   34dc6:	d1e8      	bne.n	34d9a <exp_rotation1+0x5a>
   34dc8:	bc30      	pop	{r4, r5}
   34dca:	4770      	bx	lr

00034dcc <exp_rotation.part.0.constprop.2>:
   34dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34dd0:	ed2d 8b04 	vpush	{d8-d9}
   34dd4:	b083      	sub	sp, #12
   34dd6:	4e61      	ldr	r6, [pc, #388]	; (34f5c <exp_rotation.part.0.constprop.2+0x190>)
   34dd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
   34dda:	ed9f 9a61 	vldr	s18, [pc, #388]	; 34f60 <exp_rotation.part.0.constprop.2+0x194>
   34dde:	3c01      	subs	r4, #1
   34de0:	460d      	mov	r5, r1
   34de2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   34de6:	fb01 5303 	mla	r3, r1, r3, r5
   34dea:	ee07 3a90 	vmov	s15, r3
   34dee:	ee07 5a10 	vmov	s14, r5
   34df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   34df6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
   34dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   34dfe:	eec6 8aa7 	vdiv.f32	s17, s13, s15
   34e02:	4604      	mov	r4, r0
   34e04:	4693      	mov	fp, r2
   34e06:	ee68 8aa8 	vmul.f32	s17, s17, s17
   34e0a:	ee68 8a87 	vmul.f32	s17, s17, s14
   34e0e:	ee68 7a89 	vmul.f32	s15, s17, s18
   34e12:	ee17 0a90 	vmov	r0, s15
   34e16:	f7d7 fd25 	bl	c864 <__aeabi_f2d>
   34e1a:	ec41 0b10 	vmov	d0, r0, r1
   34e1e:	f7de fb87 	bl	13530 <cos>
   34e22:	ec51 0b10 	vmov	r0, r1, d0
   34e26:	f7d7 fdf9 	bl	ca1c <__aeabi_d2f>
   34e2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   34e2e:	ee77 8ae8 	vsub.f32	s17, s15, s17
   34e32:	ee08 0a10 	vmov	s16, r0
   34e36:	ee68 7a89 	vmul.f32	s15, s17, s18
   34e3a:	ee17 0a90 	vmov	r0, s15
   34e3e:	f7d7 fd11 	bl	c864 <__aeabi_f2d>
   34e42:	ec41 0b10 	vmov	d0, r0, r1
   34e46:	f7de fb73 	bl	13530 <cos>
   34e4a:	ec51 0b10 	vmov	r0, r1, d0
   34e4e:	f7d7 fde5 	bl	ca1c <__aeabi_d2f>
   34e52:	ebb5 0fcb 	cmp.w	r5, fp, lsl #3
   34e56:	ee05 0a10 	vmov	s10, r0
   34e5a:	db7c      	blt.n	34f56 <exp_rotation.part.0.constprop.2+0x18a>
   34e5c:	ea4f 01ab 	mov.w	r1, fp, asr #2
   34e60:	f04f 0801 	mov.w	r8, #1
   34e64:	e000      	b.n	34e68 <exp_rotation.part.0.constprop.2+0x9c>
   34e66:	4690      	mov	r8, r2
   34e68:	f108 0201 	add.w	r2, r8, #1
   34e6c:	fb02 f308 	mul.w	r3, r2, r8
   34e70:	fb0b 1303 	mla	r3, fp, r3, r1
   34e74:	429d      	cmp	r5, r3
   34e76:	dcf6      	bgt.n	34e66 <exp_rotation.part.0.constprop.2+0x9a>
   34e78:	fb95 f3fb 	sdiv	r3, r5, fp
   34e7c:	f1bb 0f00 	cmp.w	fp, #0
   34e80:	9301      	str	r3, [sp, #4]
   34e82:	dd58      	ble.n	34f36 <exp_rotation.part.0.constprop.2+0x16a>
   34e84:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
   34e88:	3d03      	subs	r5, #3
   34e8a:	00ad      	lsls	r5, r5, #2
   34e8c:	f105 060c 	add.w	r6, r5, #12
   34e90:	465a      	mov	r2, fp
   34e92:	3504      	adds	r5, #4
   34e94:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   34e98:	3b03      	subs	r3, #3
   34e9a:	4425      	add	r5, r4
   34e9c:	eb04 0906 	add.w	r9, r4, r6
   34ea0:	46c3      	mov	fp, r8
   34ea2:	3404      	adds	r4, #4
   34ea4:	4698      	mov	r8, r3
   34ea6:	eef1 4a45 	vneg.f32	s9, s10
   34eaa:	2700      	movs	r7, #0
   34eac:	4613      	mov	r3, r2
   34eae:	1f20      	subs	r0, r4, #4
   34eb0:	f1bb 0f00 	cmp.w	fp, #0
   34eb4:	d144      	bne.n	34f40 <exp_rotation.part.0.constprop.2+0x174>
   34eb6:	f1ba 0f00 	cmp.w	sl, #0
   34eba:	dd18      	ble.n	34eee <exp_rotation.part.0.constprop.2+0x122>
   34ebc:	ed54 7a01 	vldr	s15, [r4, #-4]
   34ec0:	4622      	mov	r2, r4
   34ec2:	2100      	movs	r1, #0
   34ec4:	edd2 6a00 	vldr	s13, [r2]
   34ec8:	ee65 5a27 	vmul.f32	s11, s10, s15
   34ecc:	ee28 7a26 	vmul.f32	s14, s16, s13
   34ed0:	ee28 6a27 	vmul.f32	s12, s16, s15
   34ed4:	ee66 6aa4 	vmul.f32	s13, s13, s9
   34ed8:	ee77 7a25 	vadd.f32	s15, s14, s11
   34edc:	ee76 6a26 	vadd.f32	s13, s12, s13
   34ee0:	3101      	adds	r1, #1
   34ee2:	ece2 7a01 	vstmia	r2!, {s15}
   34ee6:	4551      	cmp	r1, sl
   34ee8:	ed42 6a02 	vstr	s13, [r2, #-8]
   34eec:	d1ea      	bne.n	34ec4 <exp_rotation.part.0.constprop.2+0xf8>
   34eee:	f1b8 0f00 	cmp.w	r8, #0
   34ef2:	db1a      	blt.n	34f2a <exp_rotation.part.0.constprop.2+0x15e>
   34ef4:	ed59 7a02 	vldr	s15, [r9, #-8]
   34ef8:	1d28      	adds	r0, r5, #4
   34efa:	4629      	mov	r1, r5
   34efc:	4642      	mov	r2, r8
   34efe:	ed11 7a01 	vldr	s14, [r1, #-4]
   34f02:	ee68 6a27 	vmul.f32	s13, s16, s15
   34f06:	ee25 6a07 	vmul.f32	s12, s10, s14
   34f0a:	ee64 7aa7 	vmul.f32	s15, s9, s15
   34f0e:	ee28 7a07 	vmul.f32	s14, s16, s14
   34f12:	ee76 6a86 	vadd.f32	s13, s13, s12
   34f16:	ee77 7a27 	vadd.f32	s15, s14, s15
   34f1a:	3a01      	subs	r2, #1
   34f1c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   34f20:	ed60 6a01 	vstmdb	r0!, {s13}
   34f24:	ed61 7a01 	vstmdb	r1!, {s15}
   34f28:	d1e9      	bne.n	34efe <exp_rotation.part.0.constprop.2+0x132>
   34f2a:	3701      	adds	r7, #1
   34f2c:	42bb      	cmp	r3, r7
   34f2e:	4435      	add	r5, r6
   34f30:	44b1      	add	r9, r6
   34f32:	4434      	add	r4, r6
   34f34:	d1bb      	bne.n	34eae <exp_rotation.part.0.constprop.2+0xe2>
   34f36:	b003      	add	sp, #12
   34f38:	ecbd 8b04 	vpop	{d8-d9}
   34f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f40:	eef0 0a48 	vmov.f32	s1, s16
   34f44:	eeb0 0a45 	vmov.f32	s0, s10
   34f48:	465a      	mov	r2, fp
   34f4a:	9901      	ldr	r1, [sp, #4]
   34f4c:	9300      	str	r3, [sp, #0]
   34f4e:	f7ff fef7 	bl	34d40 <exp_rotation1>
   34f52:	9b00      	ldr	r3, [sp, #0]
   34f54:	e7af      	b.n	34eb6 <exp_rotation.part.0.constprop.2+0xea>
   34f56:	f04f 0800 	mov.w	r8, #0
   34f5a:	e78d      	b.n	34e78 <exp_rotation.part.0.constprop.2+0xac>
   34f5c:	000414e4 	.word	0x000414e4
   34f60:	3fc90fdb 	.word	0x3fc90fdb

00034f64 <alg_quant>:
   34f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f68:	ed2d 8b04 	vpush	{d8-d9}
   34f6c:	b089      	sub	sp, #36	; 0x24
   34f6e:	460c      	mov	r4, r1
   34f70:	9202      	str	r2, [sp, #8]
   34f72:	0052      	lsls	r2, r2, #1
   34f74:	4291      	cmp	r1, r2
   34f76:	9206      	str	r2, [sp, #24]
   34f78:	4606      	mov	r6, r0
   34f7a:	9304      	str	r3, [sp, #16]
   34f7c:	eeb0 8a40 	vmov.f32	s16, s0
   34f80:	f340 80bb 	ble.w	350fa <alg_quant+0x196>
   34f84:	461a      	mov	r2, r3
   34f86:	2b00      	cmp	r3, #0
   34f88:	f000 80b7 	beq.w	350fa <alg_quant+0x196>
   34f8c:	3a01      	subs	r2, #1
   34f8e:	4bcd      	ldr	r3, [pc, #820]	; (352c4 <alg_quant+0x360>)
   34f90:	eddf 9acd 	vldr	s19, [pc, #820]	; 352c8 <alg_quant+0x364>
   34f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   34f98:	9a02      	ldr	r2, [sp, #8]
   34f9a:	fb03 1302 	mla	r3, r3, r2, r1
   34f9e:	ee07 3a90 	vmov	s15, r3
   34fa2:	ee07 1a10 	vmov	s14, r1
   34fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   34faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   34fae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   34fb2:	ee87 9a27 	vdiv.f32	s18, s14, s15
   34fb6:	ee29 9a09 	vmul.f32	s18, s18, s18
   34fba:	ee29 9a26 	vmul.f32	s18, s18, s13
   34fbe:	ee69 7a29 	vmul.f32	s15, s18, s19
   34fc2:	ee17 0a90 	vmov	r0, s15
   34fc6:	f7d7 fc4d 	bl	c864 <__aeabi_f2d>
   34fca:	ec41 0b10 	vmov	d0, r0, r1
   34fce:	f7de faaf 	bl	13530 <cos>
   34fd2:	ec51 0b10 	vmov	r0, r1, d0
   34fd6:	f7d7 fd21 	bl	ca1c <__aeabi_d2f>
   34fda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   34fde:	ee37 9ac9 	vsub.f32	s18, s15, s18
   34fe2:	ee08 0a90 	vmov	s17, r0
   34fe6:	ee69 7a29 	vmul.f32	s15, s18, s19
   34fea:	ee17 0a90 	vmov	r0, s15
   34fee:	f7d7 fc39 	bl	c864 <__aeabi_f2d>
   34ff2:	ec41 0b10 	vmov	d0, r0, r1
   34ff6:	f7de fa9b 	bl	13530 <cos>
   34ffa:	ec51 0b10 	vmov	r0, r1, d0
   34ffe:	f7d7 fd0d 	bl	ca1c <__aeabi_d2f>
   35002:	9b16      	ldr	r3, [sp, #88]	; 0x58
   35004:	ebb4 0fc3 	cmp.w	r4, r3, lsl #3
   35008:	ee05 0a10 	vmov	s10, r0
   3500c:	f2c0 8279 	blt.w	35502 <alg_quant+0x59e>
   35010:	1099      	asrs	r1, r3, #2
   35012:	f04f 0b01 	mov.w	fp, #1
   35016:	4618      	mov	r0, r3
   35018:	e000      	b.n	3501c <alg_quant+0xb8>
   3501a:	4693      	mov	fp, r2
   3501c:	f10b 0201 	add.w	r2, fp, #1
   35020:	fb02 f30b 	mul.w	r3, r2, fp
   35024:	fb00 1303 	mla	r3, r0, r3, r1
   35028:	429c      	cmp	r4, r3
   3502a:	dcf6      	bgt.n	3501a <alg_quant+0xb6>
   3502c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3502e:	fb94 f2f3 	sdiv	r2, r4, r3
   35032:	2b00      	cmp	r3, #0
   35034:	dd61      	ble.n	350fa <alg_quant+0x196>
   35036:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   3503a:	3b03      	subs	r3, #3
   3503c:	009b      	lsls	r3, r3, #2
   3503e:	f103 090c 	add.w	r9, r3, #12
   35042:	3304      	adds	r3, #4
   35044:	eb06 0803 	add.w	r8, r6, r3
   35048:	1ed0      	subs	r0, r2, #3
   3504a:	eb06 0309 	add.w	r3, r6, r9
   3504e:	1d37      	adds	r7, r6, #4
   35050:	9605      	str	r6, [sp, #20]
   35052:	9407      	str	r4, [sp, #28]
   35054:	eef1 4a45 	vneg.f32	s9, s10
   35058:	461c      	mov	r4, r3
   3505a:	f04f 0a00 	mov.w	sl, #0
   3505e:	1e55      	subs	r5, r2, #1
   35060:	eeb1 4a68 	vneg.f32	s8, s17
   35064:	4606      	mov	r6, r0
   35066:	4613      	mov	r3, r2
   35068:	2b01      	cmp	r3, #1
   3506a:	f1a7 0004 	sub.w	r0, r7, #4
   3506e:	dd18      	ble.n	350a2 <alg_quant+0x13e>
   35070:	ed57 7a01 	vldr	s15, [r7, #-4]
   35074:	463a      	mov	r2, r7
   35076:	2100      	movs	r1, #0
   35078:	edd2 6a00 	vldr	s13, [r2]
   3507c:	ee67 5aa4 	vmul.f32	s11, s15, s9
   35080:	ee28 7aa6 	vmul.f32	s14, s17, s13
   35084:	ee27 6aa8 	vmul.f32	s12, s15, s17
   35088:	ee65 6a26 	vmul.f32	s13, s10, s13
   3508c:	ee77 7a25 	vadd.f32	s15, s14, s11
   35090:	ee76 6a26 	vadd.f32	s13, s12, s13
   35094:	3101      	adds	r1, #1
   35096:	ece2 7a01 	vstmia	r2!, {s15}
   3509a:	42a9      	cmp	r1, r5
   3509c:	ed42 6a02 	vstr	s13, [r2, #-8]
   350a0:	d1ea      	bne.n	35078 <alg_quant+0x114>
   350a2:	2e00      	cmp	r6, #0
   350a4:	db1b      	blt.n	350de <alg_quant+0x17a>
   350a6:	ed54 7a02 	vldr	s15, [r4, #-8]
   350aa:	f108 0c04 	add.w	ip, r8, #4
   350ae:	4641      	mov	r1, r8
   350b0:	4632      	mov	r2, r6
   350b2:	ed11 7a01 	vldr	s14, [r1, #-4]
   350b6:	ee68 6aa7 	vmul.f32	s13, s17, s15
   350ba:	ee27 6a24 	vmul.f32	s12, s14, s9
   350be:	ee65 7a27 	vmul.f32	s15, s10, s15
   350c2:	ee28 7a87 	vmul.f32	s14, s17, s14
   350c6:	ee76 6a86 	vadd.f32	s13, s13, s12
   350ca:	ee77 7a27 	vadd.f32	s15, s14, s15
   350ce:	3a01      	subs	r2, #1
   350d0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   350d4:	ed6c 6a01 	vstmdb	ip!, {s13}
   350d8:	ed61 7a01 	vstmdb	r1!, {s15}
   350dc:	d1e9      	bne.n	350b2 <alg_quant+0x14e>
   350de:	f1bb 0f00 	cmp.w	fp, #0
   350e2:	f040 81c9 	bne.w	35478 <alg_quant+0x514>
   350e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   350e8:	f10a 0a01 	add.w	sl, sl, #1
   350ec:	4552      	cmp	r2, sl
   350ee:	44c8      	add	r8, r9
   350f0:	444c      	add	r4, r9
   350f2:	444f      	add	r7, r9
   350f4:	d1b8      	bne.n	35068 <alg_quant+0x104>
   350f6:	9e05      	ldr	r6, [sp, #20]
   350f8:	9c07      	ldr	r4, [sp, #28]
   350fa:	4b74      	ldr	r3, [pc, #464]	; (352cc <alg_quant+0x368>)
   350fc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 352e0 <alg_quant+0x37c>
   35100:	4d73      	ldr	r5, [pc, #460]	; (352d0 <alg_quant+0x36c>)
   35102:	9305      	str	r3, [sp, #20]
   35104:	461a      	mov	r2, r3
   35106:	eddf 6a77 	vldr	s13, [pc, #476]	; 352e4 <alg_quant+0x380>
   3510a:	2300      	movs	r3, #0
   3510c:	4693      	mov	fp, r2
   3510e:	4610      	mov	r0, r2
   35110:	46ac      	mov	ip, r5
   35112:	4647      	mov	r7, r8
   35114:	4641      	mov	r1, r8
   35116:	4699      	mov	r9, r3
   35118:	46b2      	mov	sl, r6
   3511a:	4632      	mov	r2, r6
   3511c:	ecf2 7a01 	vldmia	r2!, {s15}
   35120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   35124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35128:	bf4c      	ite	mi
   3512a:	f04f 0e01 	movmi.w	lr, #1
   3512e:	f04f 0e00 	movpl.w	lr, #0
   35132:	eeb1 7a67 	vneg.f32	s14, s15
   35136:	f84c eb04 	str.w	lr, [ip], #4
   3513a:	f103 0301 	add.w	r3, r3, #1
   3513e:	f100 80d3 	bmi.w	352e8 <alg_quant+0x384>
   35142:	429c      	cmp	r4, r3
   35144:	ed42 7a01 	vstr	s15, [r2, #-4]
   35148:	f840 9b04 	str.w	r9, [r0], #4
   3514c:	ece1 6a01 	vstmia	r1!, {s13}
   35150:	dce4      	bgt.n	3511c <alg_quant+0x1b8>
   35152:	9b02      	ldr	r3, [sp, #8]
   35154:	ebb3 0f64 	cmp.w	r3, r4, asr #1
   35158:	f340 80d4 	ble.w	35304 <alg_quant+0x3a0>
   3515c:	eddf 7a61 	vldr	s15, [pc, #388]	; 352e4 <alg_quant+0x380>
   35160:	4632      	mov	r2, r6
   35162:	2300      	movs	r3, #0
   35164:	ecb2 7a01 	vldmia	r2!, {s14}
   35168:	3301      	adds	r3, #1
   3516a:	429c      	cmp	r4, r3
   3516c:	ee77 7a87 	vadd.f32	s15, s15, s14
   35170:	dcf8      	bgt.n	35164 <alg_quant+0x200>
   35172:	ed9f 7a58 	vldr	s14, [pc, #352]	; 352d4 <alg_quant+0x370>
   35176:	eef4 7ac7 	vcmpe.f32	s15, s14
   3517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3517e:	f300 8168 	bgt.w	35452 <alg_quant+0x4ee>
   35182:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   35186:	3b01      	subs	r3, #1
   35188:	2c01      	cmp	r4, #1
   3518a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   3518e:	4630      	mov	r0, r6
   35190:	ea4f 0383 	mov.w	r3, r3, lsl #2
   35194:	ece0 8a01 	vstmia	r0!, {s17}
   35198:	bfcc      	ite	gt
   3519a:	461a      	movgt	r2, r3
   3519c:	2204      	movle	r2, #4
   3519e:	2100      	movs	r1, #0
   351a0:	f7d7 f8dc 	bl	c35c <memset>
   351a4:	eeb0 7a68 	vmov.f32	s14, s17
   351a8:	9b02      	ldr	r3, [sp, #8]
   351aa:	eddf 8a4e 	vldr	s17, [pc, #312]	; 352e4 <alg_quant+0x380>
   351ae:	4847      	ldr	r0, [pc, #284]	; (352cc <alg_quant+0x368>)
   351b0:	ee07 3a90 	vmov	s15, r3
   351b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
   351b8:	eddf 7a47 	vldr	s15, [pc, #284]	; 352d8 <alg_quant+0x374>
   351bc:	ee36 6a27 	vadd.f32	s12, s12, s15
   351c0:	4631      	mov	r1, r6
   351c2:	ee26 6a07 	vmul.f32	s12, s12, s14
   351c6:	469c      	mov	ip, r3
   351c8:	2200      	movs	r2, #0
   351ca:	eef0 4a68 	vmov.f32	s9, s17
   351ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   351d2:	ecf1 7a01 	vldmia	r1!, {s15}
   351d6:	ee66 7a27 	vmul.f32	s15, s12, s15
   351da:	3201      	adds	r2, #1
   351dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   351e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   351e4:	bf48      	it	mi
   351e6:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
   351ea:	4294      	cmp	r4, r2
   351ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   351f0:	ee17 3a90 	vmov	r3, s15
   351f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   351f8:	ebac 0c03 	sub.w	ip, ip, r3
   351fc:	edc8 7a00 	vstr	s15, [r8]
   35200:	ed11 7a01 	vldr	s14, [r1, #-4]
   35204:	f840 3b04 	str.w	r3, [r0], #4
   35208:	ee27 7a87 	vmul.f32	s14, s15, s14
   3520c:	ee67 6aa7 	vmul.f32	s13, s15, s15
   35210:	ee77 7aa7 	vadd.f32	s15, s15, s15
   35214:	ee74 4a87 	vadd.f32	s9, s9, s14
   35218:	ee78 8aa6 	vadd.f32	s17, s17, s13
   3521c:	ece8 7a01 	vstmia	r8!, {s15}
   35220:	dcd7      	bgt.n	351d2 <alg_quant+0x26e>
   35222:	1ce3      	adds	r3, r4, #3
   35224:	4563      	cmp	r3, ip
   35226:	db75      	blt.n	35314 <alg_quant+0x3b0>
   35228:	f1bc 0f00 	cmp.w	ip, #0
   3522c:	f340 8085 	ble.w	3533a <alg_quant+0x3d6>
   35230:	f04f 0e00 	mov.w	lr, #0
   35234:	1d30      	adds	r0, r6, #4
   35236:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   3523a:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
   3523e:	edd6 5a00 	vldr	s11, [r6]
   35242:	ed97 4a00 	vldr	s8, [r7]
   35246:	4925      	ldr	r1, [pc, #148]	; (352dc <alg_quant+0x378>)
   35248:	ee38 5a83 	vadd.f32	s10, s17, s6
   3524c:	ee74 5aa5 	vadd.f32	s11, s9, s11
   35250:	ee35 4a04 	vadd.f32	s8, s10, s8
   35254:	ee65 5aa5 	vmul.f32	s11, s11, s11
   35258:	4602      	mov	r2, r0
   3525a:	f04f 0800 	mov.w	r8, #0
   3525e:	2301      	movs	r3, #1
   35260:	ecf2 7a01 	vldmia	r2!, {s15}
   35264:	ecb1 7a01 	vldmia	r1!, {s14}
   35268:	ee74 7aa7 	vadd.f32	s15, s9, s15
   3526c:	ee35 7a07 	vadd.f32	s14, s10, s14
   35270:	ee67 7aa7 	vmul.f32	s15, s15, s15
   35274:	ee27 6a25 	vmul.f32	s12, s14, s11
   35278:	ee67 6a84 	vmul.f32	s13, s15, s8
   3527c:	eeb4 6ae6 	vcmpe.f32	s12, s13
   35280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35284:	f100 80f2 	bmi.w	3546c <alg_quant+0x508>
   35288:	3301      	adds	r3, #1
   3528a:	429c      	cmp	r4, r3
   3528c:	dce8      	bgt.n	35260 <alg_quant+0x2fc>
   3528e:	ea4f 0288 	mov.w	r2, r8, lsl #2
   35292:	18b9      	adds	r1, r7, r2
   35294:	edd1 8a00 	vldr	s17, [r1]
   35298:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   3529c:	4432      	add	r2, r6
   3529e:	edd2 7a00 	vldr	s15, [r2]
   352a2:	ee38 7aa3 	vadd.f32	s14, s17, s7
   352a6:	f10e 0e01 	add.w	lr, lr, #1
   352aa:	3301      	adds	r3, #1
   352ac:	45f4      	cmp	ip, lr
   352ae:	ed81 7a00 	vstr	s14, [r1]
   352b2:	ee75 8a28 	vadd.f32	s17, s10, s17
   352b6:	ee74 4aa7 	vadd.f32	s9, s9, s15
   352ba:	f84b 3028 	str.w	r3, [fp, r8, lsl #2]
   352be:	d1be      	bne.n	3523e <alg_quant+0x2da>
   352c0:	e03b      	b.n	3533a <alg_quant+0x3d6>
   352c2:	bf00      	nop
   352c4:	000414e4 	.word	0x000414e4
   352c8:	3fc90fdb 	.word	0x3fc90fdb
   352cc:	1004c694 	.word	0x1004c694
   352d0:	1004c9b4 	.word	0x1004c9b4
   352d4:	26901d7d 	.word	0x26901d7d
   352d8:	3f4ccccd 	.word	0x3f4ccccd
   352dc:	1004c828 	.word	0x1004c828
   352e0:	1004c824 	.word	0x1004c824
   352e4:	00000000 	.word	0x00000000
   352e8:	429c      	cmp	r4, r3
   352ea:	ed02 7a01 	vstr	s14, [r2, #-4]
   352ee:	f840 9b04 	str.w	r9, [r0], #4
   352f2:	ece1 6a01 	vstmia	r1!, {s13}
   352f6:	f73f af11 	bgt.w	3511c <alg_quant+0x1b8>
   352fa:	9b02      	ldr	r3, [sp, #8]
   352fc:	ebb3 0f64 	cmp.w	r3, r4, asr #1
   35300:	f73f af2c 	bgt.w	3515c <alg_quant+0x1f8>
   35304:	469c      	mov	ip, r3
   35306:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 352e4 <alg_quant+0x380>
   3530a:	1ce3      	adds	r3, r4, #3
   3530c:	4563      	cmp	r3, ip
   3530e:	eef0 4a68 	vmov.f32	s9, s17
   35312:	da89      	bge.n	35228 <alg_quant+0x2c4>
   35314:	ee07 ca90 	vmov	s15, ip
   35318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   3531c:	ed97 7a00 	vldr	s14, [r7]
   35320:	f8db 3000 	ldr.w	r3, [fp]
   35324:	ee27 5aa7 	vmul.f32	s10, s15, s15
   35328:	ee67 7a87 	vmul.f32	s15, s15, s14
   3532c:	ee35 5a28 	vadd.f32	s10, s10, s17
   35330:	4463      	add	r3, ip
   35332:	ee77 8a85 	vadd.f32	s17, s15, s10
   35336:	f8cb 3000 	str.w	r3, [fp]
   3533a:	4973      	ldr	r1, [pc, #460]	; (35508 <alg_quant+0x5a4>)
   3533c:	2200      	movs	r2, #0
   3533e:	f855 0b04 	ldr.w	r0, [r5], #4
   35342:	680f      	ldr	r7, [r1, #0]
   35344:	4243      	negs	r3, r0
   35346:	407b      	eors	r3, r7
   35348:	3201      	adds	r2, #1
   3534a:	4403      	add	r3, r0
   3534c:	4294      	cmp	r4, r2
   3534e:	f841 3b04 	str.w	r3, [r1], #4
   35352:	dcf4      	bgt.n	3533e <alg_quant+0x3da>
   35354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   35356:	9a02      	ldr	r2, [sp, #8]
   35358:	486b      	ldr	r0, [pc, #428]	; (35508 <alg_quant+0x5a4>)
   3535a:	4621      	mov	r1, r4
   3535c:	f000 fb00 	bl	35960 <encode_pulses>
   35360:	9b18      	ldr	r3, [sp, #96]	; 0x60
   35362:	2b00      	cmp	r3, #0
   35364:	f040 8093 	bne.w	3548e <alg_quant+0x52a>
   35368:	9b16      	ldr	r3, [sp, #88]	; 0x58
   3536a:	2b01      	cmp	r3, #1
   3536c:	f340 80c3 	ble.w	354f6 <alg_quant+0x592>
   35370:	fb94 f1f3 	sdiv	r1, r4, r3
   35374:	f04f 0e00 	mov.w	lr, #0
   35378:	008b      	lsls	r3, r1, #2
   3537a:	f8dd 8014 	ldr.w	r8, [sp, #20]
   3537e:	9303      	str	r3, [sp, #12]
   35380:	46f1      	mov	r9, lr
   35382:	4670      	mov	r0, lr
   35384:	2900      	cmp	r1, #0
   35386:	bfcc      	ite	gt
   35388:	468c      	movgt	ip, r1
   3538a:	f04f 0c01 	movle.w	ip, #1
   3538e:	2904      	cmp	r1, #4
   35390:	f3c8 0380 	ubfx	r3, r8, #2, #1
   35394:	dd59      	ble.n	3544a <alg_quant+0x4e6>
   35396:	2b00      	cmp	r3, #0
   35398:	d054      	beq.n	35444 <alg_quant+0x4e0>
   3539a:	2201      	movs	r2, #1
   3539c:	f85b a02e 	ldr.w	sl, [fp, lr, lsl #2]
   353a0:	9202      	str	r2, [sp, #8]
   353a2:	ebac 0c03 	sub.w	ip, ip, r3
   353a6:	4473      	add	r3, lr
   353a8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
   353ac:	ea4f 075c 	mov.w	r7, ip, lsr #1
   353b0:	2400      	movs	r4, #0
   353b2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   353b6:	4622      	mov	r2, r4
   353b8:	e9d3 6500 	ldrd	r6, r5, [r3]
   353bc:	3308      	adds	r3, #8
   353be:	429f      	cmp	r7, r3
   353c0:	ea44 0406 	orr.w	r4, r4, r6
   353c4:	ea42 0205 	orr.w	r2, r2, r5
   353c8:	d1f6      	bne.n	353b8 <alg_quant+0x454>
   353ca:	4322      	orrs	r2, r4
   353cc:	f02c 0301 	bic.w	r3, ip, #1
   353d0:	ea42 0a0a 	orr.w	sl, r2, sl
   353d4:	9a02      	ldr	r2, [sp, #8]
   353d6:	4563      	cmp	r3, ip
   353d8:	441a      	add	r2, r3
   353da:	d01d      	beq.n	35418 <alg_quant+0x4b4>
   353dc:	eb0e 0402 	add.w	r4, lr, r2
   353e0:	1c53      	adds	r3, r2, #1
   353e2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
   353e6:	4299      	cmp	r1, r3
   353e8:	ea4a 0a04 	orr.w	sl, sl, r4
   353ec:	dd14      	ble.n	35418 <alg_quant+0x4b4>
   353ee:	4473      	add	r3, lr
   353f0:	1c94      	adds	r4, r2, #2
   353f2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   353f6:	42a1      	cmp	r1, r4
   353f8:	ea4a 0a03 	orr.w	sl, sl, r3
   353fc:	dd0c      	ble.n	35418 <alg_quant+0x4b4>
   353fe:	4474      	add	r4, lr
   35400:	3203      	adds	r2, #3
   35402:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   35406:	4291      	cmp	r1, r2
   35408:	ea4a 0a03 	orr.w	sl, sl, r3
   3540c:	dd04      	ble.n	35418 <alg_quant+0x4b4>
   3540e:	4472      	add	r2, lr
   35410:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
   35414:	ea4a 0a03 	orr.w	sl, sl, r3
   35418:	9b03      	ldr	r3, [sp, #12]
   3541a:	f11a 0a00 	adds.w	sl, sl, #0
   3541e:	bf18      	it	ne
   35420:	f04f 0a01 	movne.w	sl, #1
   35424:	4498      	add	r8, r3
   35426:	9b16      	ldr	r3, [sp, #88]	; 0x58
   35428:	fa0a fa09 	lsl.w	sl, sl, r9
   3542c:	f109 0901 	add.w	r9, r9, #1
   35430:	454b      	cmp	r3, r9
   35432:	ea40 000a 	orr.w	r0, r0, sl
   35436:	448e      	add	lr, r1
   35438:	d1a4      	bne.n	35384 <alg_quant+0x420>
   3543a:	b009      	add	sp, #36	; 0x24
   3543c:	ecbd 8b04 	vpop	{d8-d9}
   35440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35444:	469a      	mov	sl, r3
   35446:	9302      	str	r3, [sp, #8]
   35448:	e7ab      	b.n	353a2 <alg_quant+0x43e>
   3544a:	f04f 0a00 	mov.w	sl, #0
   3544e:	4652      	mov	r2, sl
   35450:	e7c4      	b.n	353dc <alg_quant+0x478>
   35452:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 3550c <alg_quant+0x5a8>
   35456:	eef4 7ac7 	vcmpe.f32	s15, s14
   3545a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3545e:	f57f ae90 	bpl.w	35182 <alg_quant+0x21e>
   35462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   35466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   3546a:	e69d      	b.n	351a8 <alg_quant+0x244>
   3546c:	eeb0 4a47 	vmov.f32	s8, s14
   35470:	eef0 5a67 	vmov.f32	s11, s15
   35474:	4698      	mov	r8, r3
   35476:	e707      	b.n	35288 <alg_quant+0x324>
   35478:	4619      	mov	r1, r3
   3547a:	eef0 0a44 	vmov.f32	s1, s8
   3547e:	eeb0 0a45 	vmov.f32	s0, s10
   35482:	465a      	mov	r2, fp
   35484:	9303      	str	r3, [sp, #12]
   35486:	f7ff fc5b 	bl	34d40 <exp_rotation1>
   3548a:	9b03      	ldr	r3, [sp, #12]
   3548c:	e62b      	b.n	350e6 <alg_quant+0x182>
   3548e:	ee18 0a90 	vmov	r0, s17
   35492:	f7d7 f9e7 	bl	c864 <__aeabi_f2d>
   35496:	ec41 0b10 	vmov	d0, r0, r1
   3549a:	f7de f8a9 	bl	135f0 <sqrt>
   3549e:	ec51 0b10 	vmov	r0, r1, d0
   354a2:	f7d7 fabb 	bl	ca1c <__aeabi_d2f>
   354a6:	ee07 0a90 	vmov	s15, r0
   354aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   354ae:	eec7 7a27 	vdiv.f32	s15, s14, s15
   354b2:	4a15      	ldr	r2, [pc, #84]	; (35508 <alg_quant+0x5a4>)
   354b4:	2300      	movs	r3, #0
   354b6:	ee27 8a88 	vmul.f32	s16, s15, s16
   354ba:	ecf2 7a01 	vldmia	r2!, {s15}
   354be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   354c2:	3301      	adds	r3, #1
   354c4:	ee67 7a88 	vmul.f32	s15, s15, s16
   354c8:	429c      	cmp	r4, r3
   354ca:	ecea 7a01 	vstmia	sl!, {s15}
   354ce:	dcf4      	bgt.n	354ba <alg_quant+0x556>
   354d0:	9b06      	ldr	r3, [sp, #24]
   354d2:	429c      	cmp	r4, r3
   354d4:	f77f af48 	ble.w	35368 <alg_quant+0x404>
   354d8:	9b04      	ldr	r3, [sp, #16]
   354da:	2b00      	cmp	r3, #0
   354dc:	f43f af44 	beq.w	35368 <alg_quant+0x404>
   354e0:	9300      	str	r3, [sp, #0]
   354e2:	4630      	mov	r0, r6
   354e4:	9b02      	ldr	r3, [sp, #8]
   354e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   354e8:	4621      	mov	r1, r4
   354ea:	f7ff fc6f 	bl	34dcc <exp_rotation.part.0.constprop.2>
   354ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
   354f0:	2b01      	cmp	r3, #1
   354f2:	f73f af3d 	bgt.w	35370 <alg_quant+0x40c>
   354f6:	2001      	movs	r0, #1
   354f8:	b009      	add	sp, #36	; 0x24
   354fa:	ecbd 8b04 	vpop	{d8-d9}
   354fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35502:	f04f 0b00 	mov.w	fp, #0
   35506:	e591      	b.n	3502c <alg_quant+0xc8>
   35508:	1004c694 	.word	0x1004c694
   3550c:	42800000 	.word	0x42800000

00035510 <alg_unquant>:
   35510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35514:	ed2d 8b02 	vpush	{d8}
   35518:	b085      	sub	sp, #20
   3551a:	460c      	mov	r4, r1
   3551c:	af02      	add	r7, sp, #8
   3551e:	eeb0 8a40 	vmov.f32	s16, s0
   35522:	4680      	mov	r8, r0
   35524:	4615      	mov	r5, r2
   35526:	4699      	mov	r9, r3
   35528:	f7f1 fb00 	bl	26b2c <save_stack>
   3552c:	00a3      	lsls	r3, r4, #2
   3552e:	3307      	adds	r3, #7
   35530:	f023 0307 	bic.w	r3, r3, #7
   35534:	ebad 0d03 	sub.w	sp, sp, r3
   35538:	ae02      	add	r6, sp, #8
   3553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3553c:	462a      	mov	r2, r5
   3553e:	4630      	mov	r0, r6
   35540:	4621      	mov	r1, r4
   35542:	f000 fa73 	bl	35a2c <decode_pulses>
   35546:	ee10 0a10 	vmov	r0, s0
   3554a:	f7d7 f98b 	bl	c864 <__aeabi_f2d>
   3554e:	ec41 0b10 	vmov	d0, r0, r1
   35552:	f7de f84d 	bl	135f0 <sqrt>
   35556:	ec51 0b10 	vmov	r0, r1, d0
   3555a:	f7d7 fa5f 	bl	ca1c <__aeabi_d2f>
   3555e:	ee07 0a10 	vmov	s14, r0
   35562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   35566:	ee87 0a87 	vdiv.f32	s0, s15, s14
   3556a:	1f31      	subs	r1, r6, #4
   3556c:	4642      	mov	r2, r8
   3556e:	2300      	movs	r3, #0
   35570:	ee20 0a08 	vmul.f32	s0, s0, s16
   35574:	f851 0f04 	ldr.w	r0, [r1, #4]!
   35578:	ee07 0a90 	vmov	s15, r0
   3557c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   35580:	3301      	adds	r3, #1
   35582:	ee67 7a80 	vmul.f32	s15, s15, s0
   35586:	429c      	cmp	r4, r3
   35588:	ece2 7a01 	vstmia	r2!, {s15}
   3558c:	dcf2      	bgt.n	35574 <alg_unquant+0x64>
   3558e:	ebb4 0f45 	cmp.w	r4, r5, lsl #1
   35592:	dd0a      	ble.n	355aa <alg_unquant+0x9a>
   35594:	f1b9 0f00 	cmp.w	r9, #0
   35598:	d007      	beq.n	355aa <alg_unquant+0x9a>
   3559a:	f8cd 9000 	str.w	r9, [sp]
   3559e:	462b      	mov	r3, r5
   355a0:	4640      	mov	r0, r8
   355a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   355a4:	4621      	mov	r1, r4
   355a6:	f7ff fc11 	bl	34dcc <exp_rotation.part.0.constprop.2>
   355aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   355ac:	2b01      	cmp	r3, #1
   355ae:	dd75      	ble.n	3569c <alg_unquant+0x18c>
   355b0:	fb94 fcf3 	sdiv	ip, r4, r3
   355b4:	f04f 0800 	mov.w	r8, #0
   355b8:	46c2      	mov	sl, r8
   355ba:	f8c7 8004 	str.w	r8, [r7, #4]
   355be:	f1bc 0f00 	cmp.w	ip, #0
   355c2:	eb06 0388 	add.w	r3, r6, r8, lsl #2
   355c6:	bfcc      	ite	gt
   355c8:	46e1      	movgt	r9, ip
   355ca:	f04f 0901 	movle.w	r9, #1
   355ce:	f1bc 0f04 	cmp.w	ip, #4
   355d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
   355d6:	dd5d      	ble.n	35694 <alg_unquant+0x184>
   355d8:	2b00      	cmp	r3, #0
   355da:	d058      	beq.n	3568e <alg_unquant+0x17e>
   355dc:	f856 b028 	ldr.w	fp, [r6, r8, lsl #2]
   355e0:	f04f 0e01 	mov.w	lr, #1
   355e4:	eba9 0903 	sub.w	r9, r9, r3
   355e8:	4443      	add	r3, r8
   355ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   355ee:	ea4f 0559 	mov.w	r5, r9, lsr #1
   355f2:	2200      	movs	r2, #0
   355f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   355f8:	4611      	mov	r1, r2
   355fa:	e9d3 4000 	ldrd	r4, r0, [r3]
   355fe:	3308      	adds	r3, #8
   35600:	429d      	cmp	r5, r3
   35602:	ea42 0204 	orr.w	r2, r2, r4
   35606:	ea41 0100 	orr.w	r1, r1, r0
   3560a:	d1f6      	bne.n	355fa <alg_unquant+0xea>
   3560c:	f029 0301 	bic.w	r3, r9, #1
   35610:	430a      	orrs	r2, r1
   35612:	454b      	cmp	r3, r9
   35614:	ea42 0b0b 	orr.w	fp, r2, fp
   35618:	449e      	add	lr, r3
   3561a:	d020      	beq.n	3565e <alg_unquant+0x14e>
   3561c:	eb08 020e 	add.w	r2, r8, lr
   35620:	f10e 0301 	add.w	r3, lr, #1
   35624:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   35628:	459c      	cmp	ip, r3
   3562a:	ea4b 0b02 	orr.w	fp, fp, r2
   3562e:	dd16      	ble.n	3565e <alg_unquant+0x14e>
   35630:	4443      	add	r3, r8
   35632:	f10e 0202 	add.w	r2, lr, #2
   35636:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   3563a:	4594      	cmp	ip, r2
   3563c:	ea4b 0b03 	orr.w	fp, fp, r3
   35640:	dd0d      	ble.n	3565e <alg_unquant+0x14e>
   35642:	4442      	add	r2, r8
   35644:	f10e 0e03 	add.w	lr, lr, #3
   35648:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
   3564c:	45f4      	cmp	ip, lr
   3564e:	ea4b 0b03 	orr.w	fp, fp, r3
   35652:	dd04      	ble.n	3565e <alg_unquant+0x14e>
   35654:	44c6      	add	lr, r8
   35656:	f856 302e 	ldr.w	r3, [r6, lr, lsl #2]
   3565a:	ea4b 0b03 	orr.w	fp, fp, r3
   3565e:	f11b 0b00 	adds.w	fp, fp, #0
   35662:	bf18      	it	ne
   35664:	f04f 0b01 	movne.w	fp, #1
   35668:	687b      	ldr	r3, [r7, #4]
   3566a:	fa0b fb0a 	lsl.w	fp, fp, sl
   3566e:	ea43 030b 	orr.w	r3, r3, fp
   35672:	607b      	str	r3, [r7, #4]
   35674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   35676:	f10a 0a01 	add.w	sl, sl, #1
   3567a:	4553      	cmp	r3, sl
   3567c:	44e0      	add	r8, ip
   3567e:	d19e      	bne.n	355be <alg_unquant+0xae>
   35680:	6878      	ldr	r0, [r7, #4]
   35682:	370c      	adds	r7, #12
   35684:	46bd      	mov	sp, r7
   35686:	ecbd 8b02 	vpop	{d8}
   3568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3568e:	469b      	mov	fp, r3
   35690:	469e      	mov	lr, r3
   35692:	e7a7      	b.n	355e4 <alg_unquant+0xd4>
   35694:	f04f 0b00 	mov.w	fp, #0
   35698:	46de      	mov	lr, fp
   3569a:	e7bf      	b.n	3561c <alg_unquant+0x10c>
   3569c:	2301      	movs	r3, #1
   3569e:	607b      	str	r3, [r7, #4]
   356a0:	e7ee      	b.n	35680 <alg_unquant+0x170>
   356a2:	bf00      	nop

000356a4 <renormalise_vector>:
   356a4:	2900      	cmp	r1, #0
   356a6:	dd35      	ble.n	35714 <renormalise_vector+0x70>
   356a8:	b538      	push	{r3, r4, r5, lr}
   356aa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 35718 <renormalise_vector+0x74>
   356ae:	ed2d 8b02 	vpush	{d8}
   356b2:	4604      	mov	r4, r0
   356b4:	eeb0 8a40 	vmov.f32	s16, s0
   356b8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
   356bc:	4603      	mov	r3, r0
   356be:	ecf3 7a01 	vldmia	r3!, {s15}
   356c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   356c6:	429d      	cmp	r5, r3
   356c8:	ee37 7a27 	vadd.f32	s14, s14, s15
   356cc:	d1f7      	bne.n	356be <renormalise_vector+0x1a>
   356ce:	eddf 7a13 	vldr	s15, [pc, #76]	; 3571c <renormalise_vector+0x78>
   356d2:	ee77 7a27 	vadd.f32	s15, s14, s15
   356d6:	ee17 0a90 	vmov	r0, s15
   356da:	f7d7 f8c3 	bl	c864 <__aeabi_f2d>
   356de:	ec41 0b10 	vmov	d0, r0, r1
   356e2:	f7dd ff85 	bl	135f0 <sqrt>
   356e6:	ec51 0b10 	vmov	r0, r1, d0
   356ea:	f7d7 f997 	bl	ca1c <__aeabi_d2f>
   356ee:	ee07 0a10 	vmov	s14, r0
   356f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   356f6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   356fa:	ee20 0a08 	vmul.f32	s0, s0, s16
   356fe:	edd4 7a00 	vldr	s15, [r4]
   35702:	ee67 7a80 	vmul.f32	s15, s15, s0
   35706:	ece4 7a01 	vstmia	r4!, {s15}
   3570a:	42ac      	cmp	r4, r5
   3570c:	d1f7      	bne.n	356fe <renormalise_vector+0x5a>
   3570e:	ecbd 8b02 	vpop	{d8}
   35712:	bd38      	pop	{r3, r4, r5, pc}
   35714:	4770      	bx	lr
   35716:	bf00      	nop
   35718:	00000000 	.word	0x00000000
   3571c:	26901d7d 	.word	0x26901d7d

00035720 <stereo_itheta>:
   35720:	b500      	push	{lr}
   35722:	ed2d 8b02 	vpush	{d8}
   35726:	b083      	sub	sp, #12
   35728:	bb42      	cbnz	r2, 3577c <stereo_itheta+0x5c>
   3572a:	2b00      	cmp	r3, #0
   3572c:	f340 80c0 	ble.w	358b0 <stereo_itheta+0x190>
   35730:	009b      	lsls	r3, r3, #2
   35732:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 35930 <stereo_itheta+0x210>
   35736:	18c2      	adds	r2, r0, r3
   35738:	ecf0 7a01 	vldmia	r0!, {s15}
   3573c:	ee67 7aa7 	vmul.f32	s15, s15, s15
   35740:	4282      	cmp	r2, r0
   35742:	ee37 7a27 	vadd.f32	s14, s14, s15
   35746:	d1f7      	bne.n	35738 <stereo_itheta+0x18>
   35748:	eddf 7a7a 	vldr	s15, [pc, #488]	; 35934 <stereo_itheta+0x214>
   3574c:	ed9f 8a78 	vldr	s16, [pc, #480]	; 35930 <stereo_itheta+0x210>
   35750:	ee37 7a27 	vadd.f32	s14, s14, s15
   35754:	440b      	add	r3, r1
   35756:	ecf1 7a01 	vldmia	r1!, {s15}
   3575a:	ee67 7aa7 	vmul.f32	s15, s15, s15
   3575e:	428b      	cmp	r3, r1
   35760:	ee38 8a27 	vadd.f32	s16, s16, s15
   35764:	d1f7      	bne.n	35756 <stereo_itheta+0x36>
   35766:	eddf 7a73 	vldr	s15, [pc, #460]	; 35934 <stereo_itheta+0x214>
   3576a:	ee17 0a10 	vmov	r0, s14
   3576e:	ee38 8a27 	vadd.f32	s16, s16, s15
   35772:	f7d7 f877 	bl	c864 <__aeabi_f2d>
   35776:	ec41 0b10 	vmov	d0, r0, r1
   3577a:	e020      	b.n	357be <stereo_itheta+0x9e>
   3577c:	2b00      	cmp	r3, #0
   3577e:	f340 80d2 	ble.w	35926 <stereo_itheta+0x206>
   35782:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 35934 <stereo_itheta+0x214>
   35786:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3578a:	eeb0 6a48 	vmov.f32	s12, s16
   3578e:	ecf0 7a01 	vldmia	r0!, {s15}
   35792:	ecf1 6a01 	vldmia	r1!, {s13}
   35796:	ee37 7aa6 	vadd.f32	s14, s15, s13
   3579a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   3579e:	ee27 7a07 	vmul.f32	s14, s14, s14
   357a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
   357a6:	4298      	cmp	r0, r3
   357a8:	ee36 6a07 	vadd.f32	s12, s12, s14
   357ac:	ee38 8a27 	vadd.f32	s16, s16, s15
   357b0:	d1ed      	bne.n	3578e <stereo_itheta+0x6e>
   357b2:	ee16 0a10 	vmov	r0, s12
   357b6:	f7d7 f855 	bl	c864 <__aeabi_f2d>
   357ba:	ec41 0b10 	vmov	d0, r0, r1
   357be:	f7dd ff17 	bl	135f0 <sqrt>
   357c2:	ec51 0b10 	vmov	r0, r1, d0
   357c6:	f7d7 f929 	bl	ca1c <__aeabi_d2f>
   357ca:	ee08 0a90 	vmov	s17, r0
   357ce:	ee18 0a10 	vmov	r0, s16
   357d2:	f7d7 f847 	bl	c864 <__aeabi_f2d>
   357d6:	ec41 0b10 	vmov	d0, r0, r1
   357da:	f7dd ff09 	bl	135f0 <sqrt>
   357de:	ec51 0b10 	vmov	r0, r1, d0
   357e2:	f7d7 f91b 	bl	ca1c <__aeabi_d2f>
   357e6:	ee06 0a10 	vmov	s12, r0
   357ea:	ee28 7aa8 	vmul.f32	s14, s17, s17
   357ee:	ee66 6a06 	vmul.f32	s13, s12, s12
   357f2:	eddf 7a51 	vldr	s15, [pc, #324]	; 35938 <stereo_itheta+0x218>
   357f6:	ee77 5a26 	vadd.f32	s11, s14, s13
   357fa:	eeb0 5a68 	vmov.f32	s10, s17
   357fe:	eef4 5ae7 	vcmpe.f32	s11, s15
   35802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35806:	ee04 0a90 	vmov	s9, r0
   3580a:	d449      	bmi.n	358a0 <stereo_itheta+0x180>
   3580c:	eeb4 7ae6 	vcmpe.f32	s14, s13
   35810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35814:	d554      	bpl.n	358c0 <stereo_itheta+0x1a0>
   35816:	eddf 7a49 	vldr	s15, [pc, #292]	; 3593c <stereo_itheta+0x21c>
   3581a:	ed9f 5a49 	vldr	s10, [pc, #292]	; 35940 <stereo_itheta+0x220>
   3581e:	eddf 5a49 	vldr	s11, [pc, #292]	; 35944 <stereo_itheta+0x224>
   35822:	eddf 4a49 	vldr	s9, [pc, #292]	; 35948 <stereo_itheta+0x228>
   35826:	ed9f 4a49 	vldr	s8, [pc, #292]	; 3594c <stereo_itheta+0x22c>
   3582a:	ee27 5a05 	vmul.f32	s10, s14, s10
   3582e:	ee67 5a25 	vmul.f32	s11, s14, s11
   35832:	ee27 7a27 	vmul.f32	s14, s14, s15
   35836:	ee68 8ac6 	vnmul.f32	s17, s17, s12
   3583a:	ee35 5a26 	vadd.f32	s10, s10, s13
   3583e:	ee75 5aa6 	vadd.f32	s11, s11, s13
   35842:	ee37 7a26 	vadd.f32	s14, s14, s13
   35846:	ee68 8a85 	vmul.f32	s17, s17, s10
   3584a:	ee25 7a87 	vmul.f32	s14, s11, s14
   3584e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
   35852:	eec8 7a87 	vdiv.f32	s15, s17, s14
   35856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   3585a:	bf54      	ite	pl
   3585c:	eeb0 7a44 	vmovpl.f32	s14, s8
   35860:	eeb0 7a64 	vmovmi.f32	s14, s9
   35864:	ee77 7a87 	vadd.f32	s15, s15, s14
   35868:	ed9f 7a39 	vldr	s14, [pc, #228]	; 35950 <stereo_itheta+0x230>
   3586c:	ee67 7a87 	vmul.f32	s15, s15, s14
   35870:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   35874:	ee77 7a87 	vadd.f32	s15, s15, s14
   35878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   3587c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35880:	bf44      	itt	mi
   35882:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
   35886:	ee77 7ac7 	vsubmi.f32	s15, s15, s14
   3588a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   3588e:	ee17 0a90 	vmov	r0, s15
   35892:	edcd 7a01 	vstr	s15, [sp, #4]
   35896:	b003      	add	sp, #12
   35898:	ecbd 8b02 	vpop	{d8}
   3589c:	f85d fb04 	ldr.w	pc, [sp], #4
   358a0:	2300      	movs	r3, #0
   358a2:	4618      	mov	r0, r3
   358a4:	9301      	str	r3, [sp, #4]
   358a6:	b003      	add	sp, #12
   358a8:	ecbd 8b02 	vpop	{d8}
   358ac:	f85d fb04 	ldr.w	pc, [sp], #4
   358b0:	eddf 6a28 	vldr	s13, [pc, #160]	; 35954 <stereo_itheta+0x234>
   358b4:	eddf 4a28 	vldr	s9, [pc, #160]	; 35958 <stereo_itheta+0x238>
   358b8:	eeb0 7a66 	vmov.f32	s14, s13
   358bc:	eeb0 5a64 	vmov.f32	s10, s9
   358c0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 3593c <stereo_itheta+0x21c>
   358c4:	eddf 5a1e 	vldr	s11, [pc, #120]	; 35940 <stereo_itheta+0x220>
   358c8:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 35944 <stereo_itheta+0x224>
   358cc:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 35948 <stereo_itheta+0x228>
   358d0:	eddf 3a1e 	vldr	s7, [pc, #120]	; 3594c <stereo_itheta+0x22c>
   358d4:	ee66 5aa5 	vmul.f32	s11, s13, s11
   358d8:	ee26 6a86 	vmul.f32	s12, s13, s12
   358dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
   358e0:	ee36 6a07 	vadd.f32	s12, s12, s14
   358e4:	ee24 5a85 	vmul.f32	s10, s9, s10
   358e8:	ee75 5a87 	vadd.f32	s11, s11, s14
   358ec:	ee36 7a87 	vadd.f32	s14, s13, s14
   358f0:	ee65 6a85 	vmul.f32	s13, s11, s10
   358f4:	ee26 7a07 	vmul.f32	s14, s12, s14
   358f8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
   358fc:	ee86 6a87 	vdiv.f32	s12, s13, s14
   35900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35904:	bf54      	ite	pl
   35906:	eef0 7a63 	vmovpl.f32	s15, s7
   3590a:	eef0 7a44 	vmovmi.f32	s15, s8
   3590e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
   35912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   35916:	ee77 7a86 	vadd.f32	s15, s15, s12
   3591a:	bf58      	it	pl
   3591c:	eeb0 4a63 	vmovpl.f32	s8, s7
   35920:	ee77 7ac4 	vsub.f32	s15, s15, s8
   35924:	e7a0      	b.n	35868 <stereo_itheta+0x148>
   35926:	eddf 7a0d 	vldr	s15, [pc, #52]	; 3595c <stereo_itheta+0x23c>
   3592a:	ed9f 4a08 	vldr	s8, [pc, #32]	; 3594c <stereo_itheta+0x22c>
   3592e:	e7f7      	b.n	35920 <stereo_itheta+0x200>
   35930:	00000000 	.word	0x00000000
   35934:	26901d7d 	.word	0x26901d7d
   35938:	219392ef 	.word	0x219392ef
   3593c:	3db00965 	.word	0x3db00965
   35940:	3edcf805 	.word	0x3edcf805
   35944:	3f2db121 	.word	0x3f2db121
   35948:	bfc90fdb 	.word	0xbfc90fdb
   3594c:	3fc90fdb 	.word	0x3fc90fdb
   35950:	4622f987 	.word	0x4622f987
   35954:	26901d7c 	.word	0x26901d7c
   35958:	3307d19c 	.word	0x3307d19c
   3595c:	4016cbc9 	.word	0x4016cbc9

00035960 <encode_pulses>:
   35960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35964:	1e4d      	subs	r5, r1, #1
   35966:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
   3596a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   3596e:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 35a28 <encode_pulses+0xc8>
   35972:	3c01      	subs	r4, #1
   35974:	ea4f 0e84 	mov.w	lr, r4, lsl #2
   35978:	2d00      	cmp	r5, #0
   3597a:	ea4f 78d5 	mov.w	r8, r5, lsr #31
   3597e:	4470      	add	r0, lr
   35980:	bfb8      	it	lt
   35982:	426d      	neglt	r5, r5
   35984:	2608      	movs	r6, #8
   35986:	2402      	movs	r4, #2
   35988:	42ac      	cmp	r4, r5
   3598a:	46a1      	mov	r9, r4
   3598c:	bfa8      	it	ge
   3598e:	46a9      	movge	r9, r5
   35990:	42ac      	cmp	r4, r5
   35992:	ea4f 0785 	mov.w	r7, r5, lsl #2
   35996:	f85c a029 	ldr.w	sl, [ip, r9, lsl #2]
   3599a:	f850 9d04 	ldr.w	r9, [r0, #-4]!
   3599e:	bfc8      	it	gt
   359a0:	4637      	movgt	r7, r6
   359a2:	f1b9 0f00 	cmp.w	r9, #0
   359a6:	f85a a007 	ldr.w	sl, [sl, r7]
   359aa:	ea89 77e9 	eor.w	r7, r9, r9, asr #31
   359ae:	eba7 77e9 	sub.w	r7, r7, r9, asr #31
   359b2:	443d      	add	r5, r7
   359b4:	44d0      	add	r8, sl
   359b6:	f105 0701 	add.w	r7, r5, #1
   359ba:	da0d      	bge.n	359d8 <encode_pulses+0x78>
   359bc:	42ac      	cmp	r4, r5
   359be:	bfd4      	ite	le
   359c0:	46a2      	movle	sl, r4
   359c2:	46ba      	movgt	sl, r7
   359c4:	42bc      	cmp	r4, r7
   359c6:	ea4f 0987 	mov.w	r9, r7, lsl #2
   359ca:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
   359ce:	bfc8      	it	gt
   359d0:	46b1      	movgt	r9, r6
   359d2:	f85a 7009 	ldr.w	r7, [sl, r9]
   359d6:	44b8      	add	r8, r7
   359d8:	1b0f      	subs	r7, r1, r4
   359da:	2f00      	cmp	r7, #0
   359dc:	f106 0604 	add.w	r6, r6, #4
   359e0:	f104 0401 	add.w	r4, r4, #1
   359e4:	dcd0      	bgt.n	35988 <encode_pulses+0x28>
   359e6:	4291      	cmp	r1, r2
   359e8:	4608      	mov	r0, r1
   359ea:	bfa8      	it	ge
   359ec:	4610      	movge	r0, r2
   359ee:	4291      	cmp	r1, r2
   359f0:	f102 0501 	add.w	r5, r2, #1
   359f4:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
   359f8:	dd11      	ble.n	35a1e <encode_pulses+0xbe>
   359fa:	4476      	add	r6, lr
   359fc:	462a      	mov	r2, r5
   359fe:	6870      	ldr	r0, [r6, #4]
   35a00:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
   35a04:	42a9      	cmp	r1, r5
   35a06:	bfd4      	ite	le
   35a08:	00ac      	lslle	r4, r5, #2
   35a0a:	f10e 0404 	addgt.w	r4, lr, #4
   35a0e:	4641      	mov	r1, r8
   35a10:	5912      	ldr	r2, [r2, r4]
   35a12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35a16:	4402      	add	r2, r0
   35a18:	4618      	mov	r0, r3
   35a1a:	f7f7 b831 	b.w	2ca80 <ec_enc_uint>
   35a1e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
   35a22:	460a      	mov	r2, r1
   35a24:	e7ec      	b.n	35a00 <encode_pulses+0xa0>
   35a26:	bf00      	nop
   35a28:	000428d0 	.word	0x000428d0

00035a2c <decode_pulses>:
   35a2c:	428a      	cmp	r2, r1
   35a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a32:	4614      	mov	r4, r2
   35a34:	4dcc      	ldr	r5, [pc, #816]	; (35d68 <decode_pulses+0x33c>)
   35a36:	bfa8      	it	ge
   35a38:	460a      	movge	r2, r1
   35a3a:	4688      	mov	r8, r1
   35a3c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   35a40:	428c      	cmp	r4, r1
   35a42:	f104 0901 	add.w	r9, r4, #1
   35a46:	bfb5      	itete	lt
   35a48:	f852 1021 	ldrlt.w	r1, [r2, r1, lsl #2]
   35a4c:	f852 1024 	ldrge.w	r1, [r2, r4, lsl #2]
   35a50:	464a      	movlt	r2, r9
   35a52:	4642      	movge	r2, r8
   35a54:	45c8      	cmp	r8, r9
   35a56:	4682      	mov	sl, r0
   35a58:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
   35a5c:	bfd4      	ite	le
   35a5e:	ea4f 0289 	movle.w	r2, r9, lsl #2
   35a62:	ea4f 0288 	movgt.w	r2, r8, lsl #2
   35a66:	b083      	sub	sp, #12
   35a68:	5882      	ldr	r2, [r0, r2]
   35a6a:	4618      	mov	r0, r3
   35a6c:	4411      	add	r1, r2
   35a6e:	f7fe fa31 	bl	33ed4 <ec_dec_uint>
   35a72:	f1b8 0f02 	cmp.w	r8, #2
   35a76:	f340 8197 	ble.w	35da8 <decode_pulses+0x37c>
   35a7a:	ea4f 0388 	mov.w	r3, r8, lsl #2
   35a7e:	46d3      	mov	fp, sl
   35a80:	fa1f fe84 	uxth.w	lr, r4
   35a84:	4544      	cmp	r4, r8
   35a86:	f8cd a004 	str.w	sl, [sp, #4]
   35a8a:	eddf 7ab8 	vldr	s15, [pc, #736]	; 35d6c <decode_pulses+0x340>
   35a8e:	9300      	str	r3, [sp, #0]
   35a90:	eb05 0203 	add.w	r2, r5, r3
   35a94:	f10b 0b04 	add.w	fp, fp, #4
   35a98:	46f2      	mov	sl, lr
   35a9a:	f2c0 809e 	blt.w	35bda <decode_pulses+0x1ae>
   35a9e:	6817      	ldr	r7, [r2, #0]
   35aa0:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
   35aa4:	4286      	cmp	r6, r0
   35aa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   35aaa:	bf88      	it	hi
   35aac:	2100      	movhi	r1, #0
   35aae:	ea01 0c06 	and.w	ip, r1, r6
   35ab2:	58fe      	ldr	r6, [r7, r3]
   35ab4:	eba0 000c 	sub.w	r0, r0, ip
   35ab8:	42b0      	cmp	r0, r6
   35aba:	ea4f 0989 	mov.w	r9, r9, lsl #2
   35abe:	f080 80d3 	bcs.w	35c68 <decode_pulses+0x23c>
   35ac2:	f852 4c04 	ldr.w	r4, [r2, #-4]
   35ac6:	58e6      	ldr	r6, [r4, r3]
   35ac8:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
   35acc:	42b0      	cmp	r0, r6
   35ace:	4627      	mov	r7, r4
   35ad0:	d25f      	bcs.n	35b92 <decode_pulses+0x166>
   35ad2:	f852 4c08 	ldr.w	r4, [r2, #-8]
   35ad6:	58e6      	ldr	r6, [r4, r3]
   35ad8:	42b0      	cmp	r0, r6
   35ada:	f1a8 0402 	sub.w	r4, r8, #2
   35ade:	d258      	bcs.n	35b92 <decode_pulses+0x166>
   35ae0:	f852 4c0c 	ldr.w	r4, [r2, #-12]
   35ae4:	58e6      	ldr	r6, [r4, r3]
   35ae6:	42b0      	cmp	r0, r6
   35ae8:	f1a8 0403 	sub.w	r4, r8, #3
   35aec:	d251      	bcs.n	35b92 <decode_pulses+0x166>
   35aee:	f852 4c10 	ldr.w	r4, [r2, #-16]
   35af2:	58e6      	ldr	r6, [r4, r3]
   35af4:	42b0      	cmp	r0, r6
   35af6:	f1a8 0404 	sub.w	r4, r8, #4
   35afa:	d24a      	bcs.n	35b92 <decode_pulses+0x166>
   35afc:	f852 4c14 	ldr.w	r4, [r2, #-20]
   35b00:	58e6      	ldr	r6, [r4, r3]
   35b02:	42b0      	cmp	r0, r6
   35b04:	f1a8 0405 	sub.w	r4, r8, #5
   35b08:	d243      	bcs.n	35b92 <decode_pulses+0x166>
   35b0a:	f852 4c18 	ldr.w	r4, [r2, #-24]
   35b0e:	58e6      	ldr	r6, [r4, r3]
   35b10:	42b0      	cmp	r0, r6
   35b12:	f1a8 0406 	sub.w	r4, r8, #6
   35b16:	d23c      	bcs.n	35b92 <decode_pulses+0x166>
   35b18:	f852 4c1c 	ldr.w	r4, [r2, #-28]
   35b1c:	58e6      	ldr	r6, [r4, r3]
   35b1e:	42b0      	cmp	r0, r6
   35b20:	f1a8 0407 	sub.w	r4, r8, #7
   35b24:	d235      	bcs.n	35b92 <decode_pulses+0x166>
   35b26:	f852 4c20 	ldr.w	r4, [r2, #-32]
   35b2a:	58e6      	ldr	r6, [r4, r3]
   35b2c:	42b0      	cmp	r0, r6
   35b2e:	f1a8 0408 	sub.w	r4, r8, #8
   35b32:	d22e      	bcs.n	35b92 <decode_pulses+0x166>
   35b34:	f852 4c24 	ldr.w	r4, [r2, #-36]
   35b38:	58e6      	ldr	r6, [r4, r3]
   35b3a:	42b0      	cmp	r0, r6
   35b3c:	f1a8 0409 	sub.w	r4, r8, #9
   35b40:	d227      	bcs.n	35b92 <decode_pulses+0x166>
   35b42:	f852 4c28 	ldr.w	r4, [r2, #-40]
   35b46:	58e6      	ldr	r6, [r4, r3]
   35b48:	42b0      	cmp	r0, r6
   35b4a:	f1a8 040a 	sub.w	r4, r8, #10
   35b4e:	d220      	bcs.n	35b92 <decode_pulses+0x166>
   35b50:	f852 4c2c 	ldr.w	r4, [r2, #-44]
   35b54:	58e6      	ldr	r6, [r4, r3]
   35b56:	42b0      	cmp	r0, r6
   35b58:	f1a8 040b 	sub.w	r4, r8, #11
   35b5c:	d219      	bcs.n	35b92 <decode_pulses+0x166>
   35b5e:	f852 4c30 	ldr.w	r4, [r2, #-48]
   35b62:	58e6      	ldr	r6, [r4, r3]
   35b64:	42b0      	cmp	r0, r6
   35b66:	f1a8 040c 	sub.w	r4, r8, #12
   35b6a:	d212      	bcs.n	35b92 <decode_pulses+0x166>
   35b6c:	f852 4c34 	ldr.w	r4, [r2, #-52]
   35b70:	58e6      	ldr	r6, [r4, r3]
   35b72:	42b0      	cmp	r0, r6
   35b74:	f1a8 040d 	sub.w	r4, r8, #13
   35b78:	d20b      	bcs.n	35b92 <decode_pulses+0x166>
   35b7a:	f852 4c38 	ldr.w	r4, [r2, #-56]
   35b7e:	58e6      	ldr	r6, [r4, r3]
   35b80:	42b0      	cmp	r0, r6
   35b82:	f1a8 040e 	sub.w	r4, r8, #14
   35b86:	d204      	bcs.n	35b92 <decode_pulses+0x166>
   35b88:	f852 6c3c 	ldr.w	r6, [r2, #-60]
   35b8c:	58f6      	ldr	r6, [r6, r3]
   35b8e:	f1a8 040f 	sub.w	r4, r8, #15
   35b92:	fa1f fe84 	uxth.w	lr, r4
   35b96:	4673      	mov	r3, lr
   35b98:	eb0a 0c01 	add.w	ip, sl, r1
   35b9c:	ebac 0c0e 	sub.w	ip, ip, lr
   35ba0:	ea81 010c 	eor.w	r1, r1, ip
   35ba4:	b209      	sxth	r1, r1
   35ba6:	ee07 1a10 	vmov	s14, r1
   35baa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   35bae:	f84b 1c04 	str.w	r1, [fp, #-4]
   35bb2:	ee27 7a07 	vmul.f32	s14, s14, s14
   35bb6:	1b80      	subs	r0, r0, r6
   35bb8:	ee77 7a87 	vadd.f32	s15, s15, s14
   35bbc:	2f02      	cmp	r7, #2
   35bbe:	f1a2 0204 	sub.w	r2, r2, #4
   35bc2:	46b8      	mov	r8, r7
   35bc4:	d020      	beq.n	35c08 <decode_pulses+0x1dc>
   35bc6:	4544      	cmp	r4, r8
   35bc8:	f104 0901 	add.w	r9, r4, #1
   35bcc:	ea4f 0387 	mov.w	r3, r7, lsl #2
   35bd0:	f10b 0b04 	add.w	fp, fp, #4
   35bd4:	46f2      	mov	sl, lr
   35bd6:	f6bf af62 	bge.w	35a9e <decode_pulses+0x72>
   35bda:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
   35bde:	f855 6029 	ldr.w	r6, [r5, r9, lsl #2]
   35be2:	58c9      	ldr	r1, [r1, r3]
   35be4:	58f6      	ldr	r6, [r6, r3]
   35be6:	4281      	cmp	r1, r0
   35be8:	d853      	bhi.n	35c92 <decode_pulses+0x266>
   35bea:	4286      	cmp	r6, r0
   35bec:	d951      	bls.n	35c92 <decode_pulses+0x266>
   35bee:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   35bf2:	2300      	movs	r3, #0
   35bf4:	2f02      	cmp	r7, #2
   35bf6:	f84b 3c04 	str.w	r3, [fp, #-4]
   35bfa:	eba0 0001 	sub.w	r0, r0, r1
   35bfe:	4673      	mov	r3, lr
   35c00:	f1a2 0204 	sub.w	r2, r2, #4
   35c04:	46b8      	mov	r8, r7
   35c06:	d1de      	bne.n	35bc6 <decode_pulses+0x19a>
   35c08:	e9dd 2a00 	ldrd	r2, sl, [sp]
   35c0c:	3a08      	subs	r2, #8
   35c0e:	4492      	add	sl, r2
   35c10:	0064      	lsls	r4, r4, #1
   35c12:	3401      	adds	r4, #1
   35c14:	4284      	cmp	r4, r0
   35c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35c1a:	bf88      	it	hi
   35c1c:	2200      	movhi	r2, #0
   35c1e:	4014      	ands	r4, r2
   35c20:	1b00      	subs	r0, r0, r4
   35c22:	1c41      	adds	r1, r0, #1
   35c24:	084c      	lsrs	r4, r1, #1
   35c26:	bf18      	it	ne
   35c28:	eba1 0044 	subne.w	r0, r1, r4, lsl #1
   35c2c:	4413      	add	r3, r2
   35c2e:	b2a4      	uxth	r4, r4
   35c30:	1b1b      	subs	r3, r3, r4
   35c32:	4053      	eors	r3, r2
   35c34:	4240      	negs	r0, r0
   35c36:	b21b      	sxth	r3, r3
   35c38:	4404      	add	r4, r0
   35c3a:	ee07 3a10 	vmov	s14, r3
   35c3e:	4060      	eors	r0, r4
   35c40:	b200      	sxth	r0, r0
   35c42:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
   35c46:	ee07 0a10 	vmov	s14, r0
   35c4a:	ee20 0a00 	vmul.f32	s0, s0, s0
   35c4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   35c52:	ee30 0a27 	vadd.f32	s0, s0, s15
   35c56:	ee27 7a07 	vmul.f32	s14, s14, s14
   35c5a:	e9ca 3000 	strd	r3, r0, [sl]
   35c5e:	ee37 0a00 	vadd.f32	s0, s14, s0
   35c62:	b003      	add	sp, #12
   35c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c68:	f1a9 0904 	sub.w	r9, r9, #4
   35c6c:	eb07 0309 	add.w	r3, r7, r9
   35c70:	f857 6009 	ldr.w	r6, [r7, r9]
   35c74:	42b0      	cmp	r0, r6
   35c76:	f080 8093 	bcs.w	35da0 <decode_pulses+0x374>
   35c7a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
   35c7e:	42b0      	cmp	r0, r6
   35c80:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   35c84:	d3f9      	bcc.n	35c7a <decode_pulses+0x24e>
   35c86:	fa1f fe84 	uxth.w	lr, r4
   35c8a:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   35c8e:	4673      	mov	r3, lr
   35c90:	e782      	b.n	35b98 <decode_pulses+0x16c>
   35c92:	4286      	cmp	r6, r0
   35c94:	f104 37ff 	add.w	r7, r4, #4294967295	; 0xffffffff
   35c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   35c9c:	bf88      	it	hi
   35c9e:	2100      	movhi	r1, #0
   35ca0:	ea01 0c06 	and.w	ip, r1, r6
   35ca4:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35ca8:	58f6      	ldr	r6, [r6, r3]
   35caa:	eba0 000c 	sub.w	r0, r0, ip
   35cae:	42b0      	cmp	r0, r6
   35cb0:	d25e      	bcs.n	35d70 <decode_pulses+0x344>
   35cb2:	1ea7      	subs	r7, r4, #2
   35cb4:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35cb8:	58f6      	ldr	r6, [r6, r3]
   35cba:	42b0      	cmp	r0, r6
   35cbc:	d258      	bcs.n	35d70 <decode_pulses+0x344>
   35cbe:	1ee7      	subs	r7, r4, #3
   35cc0:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35cc4:	58f6      	ldr	r6, [r6, r3]
   35cc6:	42b0      	cmp	r0, r6
   35cc8:	d252      	bcs.n	35d70 <decode_pulses+0x344>
   35cca:	1f27      	subs	r7, r4, #4
   35ccc:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35cd0:	58f6      	ldr	r6, [r6, r3]
   35cd2:	42b0      	cmp	r0, r6
   35cd4:	d24c      	bcs.n	35d70 <decode_pulses+0x344>
   35cd6:	1f67      	subs	r7, r4, #5
   35cd8:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35cdc:	58f6      	ldr	r6, [r6, r3]
   35cde:	42b0      	cmp	r0, r6
   35ce0:	d246      	bcs.n	35d70 <decode_pulses+0x344>
   35ce2:	1fa7      	subs	r7, r4, #6
   35ce4:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35ce8:	58f6      	ldr	r6, [r6, r3]
   35cea:	42b0      	cmp	r0, r6
   35cec:	d240      	bcs.n	35d70 <decode_pulses+0x344>
   35cee:	1fe7      	subs	r7, r4, #7
   35cf0:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35cf4:	58f6      	ldr	r6, [r6, r3]
   35cf6:	42b0      	cmp	r0, r6
   35cf8:	d23a      	bcs.n	35d70 <decode_pulses+0x344>
   35cfa:	f1a4 0708 	sub.w	r7, r4, #8
   35cfe:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d02:	58f6      	ldr	r6, [r6, r3]
   35d04:	42b0      	cmp	r0, r6
   35d06:	d233      	bcs.n	35d70 <decode_pulses+0x344>
   35d08:	f1a4 0709 	sub.w	r7, r4, #9
   35d0c:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d10:	58f6      	ldr	r6, [r6, r3]
   35d12:	42b0      	cmp	r0, r6
   35d14:	d22c      	bcs.n	35d70 <decode_pulses+0x344>
   35d16:	f1a4 070a 	sub.w	r7, r4, #10
   35d1a:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d1e:	58f6      	ldr	r6, [r6, r3]
   35d20:	42b0      	cmp	r0, r6
   35d22:	d225      	bcs.n	35d70 <decode_pulses+0x344>
   35d24:	f1a4 070b 	sub.w	r7, r4, #11
   35d28:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d2c:	58f6      	ldr	r6, [r6, r3]
   35d2e:	42b0      	cmp	r0, r6
   35d30:	d21e      	bcs.n	35d70 <decode_pulses+0x344>
   35d32:	f1a4 070c 	sub.w	r7, r4, #12
   35d36:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d3a:	58f6      	ldr	r6, [r6, r3]
   35d3c:	42b0      	cmp	r0, r6
   35d3e:	d217      	bcs.n	35d70 <decode_pulses+0x344>
   35d40:	f1a4 070d 	sub.w	r7, r4, #13
   35d44:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d48:	58f6      	ldr	r6, [r6, r3]
   35d4a:	42b0      	cmp	r0, r6
   35d4c:	d210      	bcs.n	35d70 <decode_pulses+0x344>
   35d4e:	f1a4 070e 	sub.w	r7, r4, #14
   35d52:	f855 6027 	ldr.w	r6, [r5, r7, lsl #2]
   35d56:	58f6      	ldr	r6, [r6, r3]
   35d58:	42b0      	cmp	r0, r6
   35d5a:	d209      	bcs.n	35d70 <decode_pulses+0x344>
   35d5c:	3c0f      	subs	r4, #15
   35d5e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
   35d62:	58f6      	ldr	r6, [r6, r3]
   35d64:	e005      	b.n	35d72 <decode_pulses+0x346>
   35d66:	bf00      	nop
   35d68:	000428d0 	.word	0x000428d0
   35d6c:	00000000 	.word	0x00000000
   35d70:	463c      	mov	r4, r7
   35d72:	eb0a 0301 	add.w	r3, sl, r1
   35d76:	fa1f fe84 	uxth.w	lr, r4
   35d7a:	eba3 030e 	sub.w	r3, r3, lr
   35d7e:	4059      	eors	r1, r3
   35d80:	b209      	sxth	r1, r1
   35d82:	ee07 1a10 	vmov	s14, r1
   35d86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   35d8a:	1b80      	subs	r0, r0, r6
   35d8c:	ee27 7a07 	vmul.f32	s14, s14, s14
   35d90:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   35d94:	ee77 7a87 	vadd.f32	s15, s15, s14
   35d98:	f84b 1c04 	str.w	r1, [fp, #-4]
   35d9c:	4673      	mov	r3, lr
   35d9e:	e70d      	b.n	35bbc <decode_pulses+0x190>
   35da0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   35da4:	4673      	mov	r3, lr
   35da6:	e6f7      	b.n	35b98 <decode_pulses+0x16c>
   35da8:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 35d6c <decode_pulses+0x340>
   35dac:	b2a3      	uxth	r3, r4
   35dae:	e72f      	b.n	35c10 <decode_pulses+0x1e4>

00035db0 <am_hal_ble_blocking_transfer.part.7>:
   35db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35db4:	4dcb      	ldr	r5, [pc, #812]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35db6:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   35dba:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   35dbe:	f36f 13c7 	bfc	r3, #7, #1
   35dc2:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   35dc6:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   35dca:	f36f 2308 	bfc	r3, #8, #1
   35dce:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   35dd2:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   35dd6:	f36f 0300 	bfc	r3, #0, #1
   35dda:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   35dde:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   35de2:	f36f 0341 	bfc	r3, #1, #1
   35de6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   35dea:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   35dee:	f043 0301 	orr.w	r3, r3, #1
   35df2:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   35df6:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   35dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   35dfe:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   35e02:	7a8b      	ldrb	r3, [r1, #10]
   35e04:	2b01      	cmp	r3, #1
   35e06:	b085      	sub	sp, #20
   35e08:	460e      	mov	r6, r1
   35e0a:	4604      	mov	r4, r0
   35e0c:	d00a      	beq.n	35e24 <am_hal_ble_blocking_transfer.part.7+0x74>
   35e0e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   35e12:	061f      	lsls	r7, r3, #24
   35e14:	f100 8123 	bmi.w	3605e <am_hal_ble_blocking_transfer.part.7+0x2ae>
   35e18:	48b3      	ldr	r0, [pc, #716]	; (360e8 <am_hal_ble_blocking_transfer.part.7+0x338>)
   35e1a:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   35e1e:	b005      	add	sp, #20
   35e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35e24:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   35e28:	2b00      	cmp	r3, #0
   35e2a:	f000 80e6 	beq.w	35ffa <am_hal_ble_blocking_transfer.part.7+0x24a>
   35e2e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   35e32:	2b00      	cmp	r3, #0
   35e34:	f000 81f2 	beq.w	3621c <am_hal_ble_blocking_transfer.part.7+0x46c>
   35e38:	2200      	movs	r2, #0
   35e3a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   35e3e:	b1a3      	cbz	r3, 35e6a <am_hal_ble_blocking_transfer.part.7+0xba>
   35e40:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 360e4 <am_hal_ble_blocking_transfer.part.7+0x334>
   35e44:	f240 152d 	movw	r5, #301	; 0x12d
   35e48:	2700      	movs	r7, #0
   35e4a:	e006      	b.n	35e5a <am_hal_ble_blocking_transfer.part.7+0xaa>
   35e4c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   35e50:	20a0      	movs	r0, #160	; 0xa0
   35e52:	f001 fdbd 	bl	379d0 <am_hal_flash_delay>
   35e56:	3d01      	subs	r5, #1
   35e58:	d007      	beq.n	35e6a <am_hal_ble_blocking_transfer.part.7+0xba>
   35e5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   35e5e:	2b00      	cmp	r3, #0
   35e60:	d1f4      	bne.n	35e4c <am_hal_ble_blocking_transfer.part.7+0x9c>
   35e62:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   35e66:	0718      	lsls	r0, r3, #28
   35e68:	d4f2      	bmi.n	35e50 <am_hal_ble_blocking_transfer.part.7+0xa0>
   35e6a:	4a9e      	ldr	r2, [pc, #632]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35e6c:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   35e70:	f043 0302 	orr.w	r3, r3, #2
   35e74:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   35e78:	2050      	movs	r0, #80	; 0x50
   35e7a:	f001 fda9 	bl	379d0 <am_hal_flash_delay>
   35e7e:	6823      	ldr	r3, [r4, #0]
   35e80:	4a9a      	ldr	r2, [pc, #616]	; (360ec <am_hal_ble_blocking_transfer.part.7+0x33c>)
   35e82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   35e86:	4293      	cmp	r3, r2
   35e88:	f000 81d5 	beq.w	36236 <am_hal_ble_blocking_transfer.part.7+0x486>
   35e8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   35e90:	f8df 9250 	ldr.w	r9, [pc, #592]	; 360e4 <am_hal_ble_blocking_transfer.part.7+0x334>
   35e94:	2500      	movs	r5, #0
   35e96:	46aa      	mov	sl, r5
   35e98:	2b00      	cmp	r3, #0
   35e9a:	f040 80c6 	bne.w	3602a <am_hal_ble_blocking_transfer.part.7+0x27a>
   35e9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   35ea2:	2b00      	cmp	r3, #0
   35ea4:	f040 80ac 	bne.w	36000 <am_hal_ble_blocking_transfer.part.7+0x250>
   35ea8:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   35eac:	0719      	lsls	r1, r3, #28
   35eae:	f140 80ac 	bpl.w	3600a <am_hal_ble_blocking_transfer.part.7+0x25a>
   35eb2:	f001 ff93 	bl	37ddc <am_hal_interrupt_master_disable>
   35eb6:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   35eba:	9002      	str	r0, [sp, #8]
   35ebc:	9802      	ldr	r0, [sp, #8]
   35ebe:	2f00      	cmp	r7, #0
   35ec0:	f040 80b6 	bne.w	36030 <am_hal_ble_blocking_transfer.part.7+0x280>
   35ec4:	2301      	movs	r3, #1
   35ec6:	6463      	str	r3, [r4, #68]	; 0x44
   35ec8:	f001 ff8c 	bl	37de4 <am_hal_interrupt_master_set>
   35ecc:	4b85      	ldr	r3, [pc, #532]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35ece:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   35ed2:	f367 0241 	bfi	r2, r7, #1, #1
   35ed6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   35eda:	7b33      	ldrb	r3, [r6, #12]
   35edc:	2b00      	cmp	r3, #0
   35ede:	f000 80cb 	beq.w	36078 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   35ee2:	2301      	movs	r3, #1
   35ee4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   35ee8:	f104 070c 	add.w	r7, r4, #12
   35eec:	6833      	ldr	r3, [r6, #0]
   35eee:	6872      	ldr	r2, [r6, #4]
   35ef0:	68b0      	ldr	r0, [r6, #8]
   35ef2:	68f1      	ldr	r1, [r6, #12]
   35ef4:	60e3      	str	r3, [r4, #12]
   35ef6:	607a      	str	r2, [r7, #4]
   35ef8:	60b8      	str	r0, [r7, #8]
   35efa:	60f9      	str	r1, [r7, #12]
   35efc:	6933      	ldr	r3, [r6, #16]
   35efe:	6972      	ldr	r2, [r6, #20]
   35f00:	617a      	str	r2, [r7, #20]
   35f02:	613b      	str	r3, [r7, #16]
   35f04:	f001 ff6a 	bl	37ddc <am_hal_interrupt_master_disable>
   35f08:	9001      	str	r0, [sp, #4]
   35f0a:	6823      	ldr	r3, [r4, #0]
   35f0c:	4a77      	ldr	r2, [pc, #476]	; (360ec <am_hal_ble_blocking_transfer.part.7+0x33c>)
   35f0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   35f12:	4293      	cmp	r3, r2
   35f14:	f000 8197 	beq.w	36246 <am_hal_ble_blocking_transfer.part.7+0x496>
   35f18:	7ab3      	ldrb	r3, [r6, #10]
   35f1a:	2b01      	cmp	r3, #1
   35f1c:	f000 8185 	beq.w	3622a <am_hal_ble_blocking_transfer.part.7+0x47a>
   35f20:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   35f22:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   35f26:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 360ec <am_hal_ble_blocking_transfer.part.7+0x33c>
   35f2a:	496e      	ldr	r1, [pc, #440]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35f2c:	f04f 0e00 	mov.w	lr, #0
   35f30:	45a9      	cmp	r9, r5
   35f32:	d926      	bls.n	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   35f34:	6823      	ldr	r3, [r4, #0]
   35f36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   35f3a:	4563      	cmp	r3, ip
   35f3c:	d1f8      	bne.n	35f30 <am_hal_ble_blocking_transfer.part.7+0x180>
   35f3e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   35f42:	f3c0 4007 	ubfx	r0, r0, #16, #8
   35f46:	2803      	cmp	r0, #3
   35f48:	d9f2      	bls.n	35f30 <am_hal_ble_blocking_transfer.part.7+0x180>
   35f4a:	4581      	cmp	r9, r0
   35f4c:	bf94      	ite	ls
   35f4e:	ebc5 0009 	rsbls	r0, r5, r9
   35f52:	f020 0003 	bichi.w	r0, r0, #3
   35f56:	68e2      	ldr	r2, [r4, #12]
   35f58:	f025 0303 	bic.w	r3, r5, #3
   35f5c:	b168      	cbz	r0, 35f7a <am_hal_ble_blocking_transfer.part.7+0x1ca>
   35f5e:	441a      	add	r2, r3
   35f60:	2300      	movs	r3, #0
   35f62:	3304      	adds	r3, #4
   35f64:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   35f68:	f842 5b04 	str.w	r5, [r2], #4
   35f6c:	4283      	cmp	r3, r0
   35f6e:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   35f72:	d3f6      	bcc.n	35f62 <am_hal_ble_blocking_transfer.part.7+0x1b2>
   35f74:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   35f76:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   35f7a:	4405      	add	r5, r0
   35f7c:	45a9      	cmp	r9, r5
   35f7e:	63e5      	str	r5, [r4, #60]	; 0x3c
   35f80:	d8d8      	bhi.n	35f34 <am_hal_ble_blocking_transfer.part.7+0x184>
   35f82:	9801      	ldr	r0, [sp, #4]
   35f84:	f001 ff2e 	bl	37de4 <am_hal_interrupt_master_set>
   35f88:	4b56      	ldr	r3, [pc, #344]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35f8a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   35f8e:	07d2      	lsls	r2, r2, #31
   35f90:	d40d      	bmi.n	35fae <am_hal_ble_blocking_transfer.part.7+0x1fe>
   35f92:	4699      	mov	r9, r3
   35f94:	f242 7510 	movw	r5, #10000	; 0x2710
   35f98:	e002      	b.n	35fa0 <am_hal_ble_blocking_transfer.part.7+0x1f0>
   35f9a:	3d01      	subs	r5, #1
   35f9c:	f000 8149 	beq.w	36232 <am_hal_ble_blocking_transfer.part.7+0x482>
   35fa0:	2010      	movs	r0, #16
   35fa2:	f001 fd15 	bl	379d0 <am_hal_flash_delay>
   35fa6:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   35faa:	07db      	lsls	r3, r3, #31
   35fac:	d5f5      	bpl.n	35f9a <am_hal_ble_blocking_transfer.part.7+0x1ea>
   35fae:	4a4d      	ldr	r2, [pc, #308]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35fb0:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   35fb4:	f043 0301 	orr.w	r3, r3, #1
   35fb8:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   35fbc:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   35fc0:	2300      	movs	r3, #0
   35fc2:	f041 0102 	orr.w	r1, r1, #2
   35fc6:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   35fca:	603b      	str	r3, [r7, #0]
   35fcc:	607b      	str	r3, [r7, #4]
   35fce:	60bb      	str	r3, [r7, #8]
   35fd0:	60fb      	str	r3, [r7, #12]
   35fd2:	613b      	str	r3, [r7, #16]
   35fd4:	617b      	str	r3, [r7, #20]
   35fd6:	63e3      	str	r3, [r4, #60]	; 0x3c
   35fd8:	7ab3      	ldrb	r3, [r6, #10]
   35fda:	2b01      	cmp	r3, #1
   35fdc:	f000 8113 	beq.w	36206 <am_hal_ble_blocking_transfer.part.7+0x456>
   35fe0:	2b02      	cmp	r3, #2
   35fe2:	f000 8107 	beq.w	361f4 <am_hal_ble_blocking_transfer.part.7+0x444>
   35fe6:	2300      	movs	r3, #0
   35fe8:	4a3e      	ldr	r2, [pc, #248]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   35fea:	4618      	mov	r0, r3
   35fec:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   35ff0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   35ff4:	b005      	add	sp, #20
   35ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ffa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   35ffe:	e71e      	b.n	35e3e <am_hal_ble_blocking_transfer.part.7+0x8e>
   36000:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   36004:	05da      	lsls	r2, r3, #23
   36006:	f53f af54 	bmi.w	35eb2 <am_hal_ble_blocking_transfer.part.7+0x102>
   3600a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   3600e:	d012      	beq.n	36036 <am_hal_ble_blocking_transfer.part.7+0x286>
   36010:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   36014:	061b      	lsls	r3, r3, #24
   36016:	d40e      	bmi.n	36036 <am_hal_ble_blocking_transfer.part.7+0x286>
   36018:	20a0      	movs	r0, #160	; 0xa0
   3601a:	f001 fcd9 	bl	379d0 <am_hal_flash_delay>
   3601e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   36022:	3501      	adds	r5, #1
   36024:	2b00      	cmp	r3, #0
   36026:	f43f af3a 	beq.w	35e9e <am_hal_ble_blocking_transfer.part.7+0xee>
   3602a:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   3602e:	e740      	b.n	35eb2 <am_hal_ble_blocking_transfer.part.7+0x102>
   36030:	f001 fed8 	bl	37de4 <am_hal_interrupt_master_set>
   36034:	e7f0      	b.n	36018 <am_hal_ble_blocking_transfer.part.7+0x268>
   36036:	6823      	ldr	r3, [r4, #0]
   36038:	4a2c      	ldr	r2, [pc, #176]	; (360ec <am_hal_ble_blocking_transfer.part.7+0x33c>)
   3603a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3603e:	4293      	cmp	r3, r2
   36040:	f000 811e 	beq.w	36280 <am_hal_ble_blocking_transfer.part.7+0x4d0>
   36044:	4b27      	ldr	r3, [pc, #156]	; (360e4 <am_hal_ble_blocking_transfer.part.7+0x334>)
   36046:	482a      	ldr	r0, [pc, #168]	; (360f0 <am_hal_ble_blocking_transfer.part.7+0x340>)
   36048:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   3604c:	f36f 0241 	bfc	r2, #1, #1
   36050:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   36054:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   36058:	b005      	add	sp, #20
   3605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3605e:	f001 febd 	bl	37ddc <am_hal_interrupt_master_disable>
   36062:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   36066:	9003      	str	r0, [sp, #12]
   36068:	9803      	ldr	r0, [sp, #12]
   3606a:	2b00      	cmp	r3, #0
   3606c:	d157      	bne.n	3611e <am_hal_ble_blocking_transfer.part.7+0x36e>
   3606e:	2301      	movs	r3, #1
   36070:	6463      	str	r3, [r4, #68]	; 0x44
   36072:	f001 feb7 	bl	37de4 <am_hal_interrupt_master_set>
   36076:	e730      	b.n	35eda <am_hal_ble_blocking_transfer.part.7+0x12a>
   36078:	f104 070c 	add.w	r7, r4, #12
   3607c:	6833      	ldr	r3, [r6, #0]
   3607e:	6872      	ldr	r2, [r6, #4]
   36080:	68b0      	ldr	r0, [r6, #8]
   36082:	68f1      	ldr	r1, [r6, #12]
   36084:	60e3      	str	r3, [r4, #12]
   36086:	607a      	str	r2, [r7, #4]
   36088:	60b8      	str	r0, [r7, #8]
   3608a:	60f9      	str	r1, [r7, #12]
   3608c:	6933      	ldr	r3, [r6, #16]
   3608e:	6972      	ldr	r2, [r6, #20]
   36090:	617a      	str	r2, [r7, #20]
   36092:	613b      	str	r3, [r7, #16]
   36094:	f001 fea2 	bl	37ddc <am_hal_interrupt_master_disable>
   36098:	9001      	str	r0, [sp, #4]
   3609a:	2c00      	cmp	r4, #0
   3609c:	f47f af35 	bne.w	35f0a <am_hal_ble_blocking_transfer.part.7+0x15a>
   360a0:	7ab3      	ldrb	r3, [r6, #10]
   360a2:	2b01      	cmp	r3, #1
   360a4:	f47f af3c 	bne.w	35f20 <am_hal_ble_blocking_transfer.part.7+0x170>
   360a8:	6823      	ldr	r3, [r4, #0]
   360aa:	4a10      	ldr	r2, [pc, #64]	; (360ec <am_hal_ble_blocking_transfer.part.7+0x33c>)
   360ac:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   360b0:	68e5      	ldr	r5, [r4, #12]
   360b2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   360b6:	4293      	cmp	r3, r2
   360b8:	d06b      	beq.n	36192 <am_hal_ble_blocking_transfer.part.7+0x3e2>
   360ba:	f1bb 0f00 	cmp.w	fp, #0
   360be:	f43f af60 	beq.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   360c2:	f8df a020 	ldr.w	sl, [pc, #32]	; 360e4 <am_hal_ble_blocking_transfer.part.7+0x334>
   360c6:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   360ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
   360ce:	2b03      	cmp	r3, #3
   360d0:	d833      	bhi.n	3613a <am_hal_ble_blocking_transfer.part.7+0x38a>
   360d2:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   360d6:	07d9      	lsls	r1, r3, #31
   360d8:	f53f af53 	bmi.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   360dc:	f8df 9014 	ldr.w	r9, [pc, #20]	; 360f4 <am_hal_ble_blocking_transfer.part.7+0x344>
   360e0:	e013      	b.n	3610a <am_hal_ble_blocking_transfer.part.7+0x35a>
   360e2:	bf00      	nop
   360e4:	5000c000 	.word	0x5000c000
   360e8:	08000001 	.word	0x08000001
   360ec:	01775230 	.word	0x01775230
   360f0:	08000002 	.word	0x08000002
   360f4:	0007a120 	.word	0x0007a120
   360f8:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   360fc:	07d8      	lsls	r0, r3, #31
   360fe:	f53f af40 	bmi.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   36102:	f1b9 0901 	subs.w	r9, r9, #1
   36106:	f43f af3c 	beq.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   3610a:	2010      	movs	r0, #16
   3610c:	f001 fc60 	bl	379d0 <am_hal_flash_delay>
   36110:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   36114:	f3c3 2307 	ubfx	r3, r3, #8, #8
   36118:	2b03      	cmp	r3, #3
   3611a:	d9ed      	bls.n	360f8 <am_hal_ble_blocking_transfer.part.7+0x348>
   3611c:	e00d      	b.n	3613a <am_hal_ble_blocking_transfer.part.7+0x38a>
   3611e:	f001 fe61 	bl	37de4 <am_hal_interrupt_master_set>
   36122:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   36126:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   3612a:	e678      	b.n	35e1e <am_hal_ble_blocking_transfer.part.7+0x6e>
   3612c:	2b03      	cmp	r3, #3
   3612e:	f240 80b8 	bls.w	362a2 <am_hal_ble_blocking_transfer.part.7+0x4f2>
   36132:	f1bb 0f00 	cmp.w	fp, #0
   36136:	f43f af24 	beq.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   3613a:	f855 2b04 	ldr.w	r2, [r5], #4
   3613e:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   36142:	f1bb 0f03 	cmp.w	fp, #3
   36146:	f1a3 0304 	sub.w	r3, r3, #4
   3614a:	f1ab 0b04 	sub.w	fp, fp, #4
   3614e:	f67f af18 	bls.w	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   36152:	e7eb      	b.n	3612c <am_hal_ble_blocking_transfer.part.7+0x37c>
   36154:	2000      	movs	r0, #0
   36156:	4602      	mov	r2, r0
   36158:	f896 c00c 	ldrb.w	ip, [r6, #12]
   3615c:	f896 e00a 	ldrb.w	lr, [r6, #10]
   36160:	8935      	ldrh	r5, [r6, #8]
   36162:	4952      	ldr	r1, [pc, #328]	; (362ac <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   36164:	015b      	lsls	r3, r3, #5
   36166:	f003 0360 	and.w	r3, r3, #96	; 0x60
   3616a:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   3616e:	022d      	lsls	r5, r5, #8
   36170:	4029      	ands	r1, r5
   36172:	ea4e 0303 	orr.w	r3, lr, r3
   36176:	430b      	orrs	r3, r1
   36178:	494d      	ldr	r1, [pc, #308]	; (362b0 <am_hal_ble_blocking_transfer.part.7+0x500>)
   3617a:	4313      	orrs	r3, r2
   3617c:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   36180:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   36184:	7ab3      	ldrb	r3, [r6, #10]
   36186:	2b01      	cmp	r3, #1
   36188:	f47f aeca 	bne.w	35f20 <am_hal_ble_blocking_transfer.part.7+0x170>
   3618c:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   36190:	68e5      	ldr	r5, [r4, #12]
   36192:	79f2      	ldrb	r2, [r6, #7]
   36194:	2a03      	cmp	r2, #3
   36196:	d890      	bhi.n	360ba <am_hal_ble_blocking_transfer.part.7+0x30a>
   36198:	e8df f002 	tbb	[pc, r2]
   3619c:	1e242802 	.word	0x1e242802
   361a0:	2100      	movs	r1, #0
   361a2:	460b      	mov	r3, r1
   361a4:	f896 e00c 	ldrb.w	lr, [r6, #12]
   361a8:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   361ac:	483f      	ldr	r0, [pc, #252]	; (362ac <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   361ae:	0152      	lsls	r2, r2, #5
   361b0:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   361b4:	f002 0260 	and.w	r2, r2, #96	; 0x60
   361b8:	f04e 0e01 	orr.w	lr, lr, #1
   361bc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   361c0:	ea0c 0000 	and.w	r0, ip, r0
   361c4:	ea4e 0202 	orr.w	r2, lr, r2
   361c8:	4302      	orrs	r2, r0
   361ca:	4839      	ldr	r0, [pc, #228]	; (362b0 <am_hal_ble_blocking_transfer.part.7+0x500>)
   361cc:	4313      	orrs	r3, r2
   361ce:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   361d2:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   361d6:	e770      	b.n	360ba <am_hal_ble_blocking_transfer.part.7+0x30a>
   361d8:	88b1      	ldrh	r1, [r6, #4]
   361da:	79b3      	ldrb	r3, [r6, #6]
   361dc:	ba49      	rev16	r1, r1
   361de:	b289      	uxth	r1, r1
   361e0:	061b      	lsls	r3, r3, #24
   361e2:	e7df      	b.n	361a4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   361e4:	7973      	ldrb	r3, [r6, #5]
   361e6:	7931      	ldrb	r1, [r6, #4]
   361e8:	061b      	lsls	r3, r3, #24
   361ea:	e7db      	b.n	361a4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   361ec:	7933      	ldrb	r3, [r6, #4]
   361ee:	2100      	movs	r1, #0
   361f0:	061b      	lsls	r3, r3, #24
   361f2:	e7d7      	b.n	361a4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   361f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   361f8:	2b00      	cmp	r3, #0
   361fa:	f43f aef4 	beq.w	35fe6 <am_hal_ble_blocking_transfer.part.7+0x236>
   361fe:	2300      	movs	r3, #0
   36200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   36204:	e6ef      	b.n	35fe6 <am_hal_ble_blocking_transfer.part.7+0x236>
   36206:	6823      	ldr	r3, [r4, #0]
   36208:	492a      	ldr	r1, [pc, #168]	; (362b4 <am_hal_ble_blocking_transfer.part.7+0x504>)
   3620a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3620e:	428b      	cmp	r3, r1
   36210:	d03f      	beq.n	36292 <am_hal_ble_blocking_transfer.part.7+0x4e2>
   36212:	2301      	movs	r3, #1
   36214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   36218:	7ab3      	ldrb	r3, [r6, #10]
   3621a:	e6e1      	b.n	35fe0 <am_hal_ble_blocking_transfer.part.7+0x230>
   3621c:	f64b 3080 	movw	r0, #48000	; 0xbb80
   36220:	f001 fbd6 	bl	379d0 <am_hal_flash_delay>
   36224:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   36228:	e606      	b.n	35e38 <am_hal_ble_blocking_transfer.part.7+0x88>
   3622a:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   3622e:	68e5      	ldr	r5, [r4, #12]
   36230:	e743      	b.n	360ba <am_hal_ble_blocking_transfer.part.7+0x30a>
   36232:	4821      	ldr	r0, [pc, #132]	; (362b8 <am_hal_ble_blocking_transfer.part.7+0x508>)
   36234:	e5f3      	b.n	35e1e <am_hal_ble_blocking_transfer.part.7+0x6e>
   36236:	4a1e      	ldr	r2, [pc, #120]	; (362b0 <am_hal_ble_blocking_transfer.part.7+0x500>)
   36238:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   3623c:	f043 030c 	orr.w	r3, r3, #12
   36240:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   36244:	e622      	b.n	35e8c <am_hal_ble_blocking_transfer.part.7+0xdc>
   36246:	79f3      	ldrb	r3, [r6, #7]
   36248:	2b03      	cmp	r3, #3
   3624a:	f63f af29 	bhi.w	360a0 <am_hal_ble_blocking_transfer.part.7+0x2f0>
   3624e:	a201      	add	r2, pc, #4	; (adr r2, 36254 <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   36250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   36254:	00036155 	.word	0x00036155
   36258:	00036279 	.word	0x00036279
   3625c:	00036271 	.word	0x00036271
   36260:	00036265 	.word	0x00036265
   36264:	88b0      	ldrh	r0, [r6, #4]
   36266:	79b2      	ldrb	r2, [r6, #6]
   36268:	ba40      	rev16	r0, r0
   3626a:	b280      	uxth	r0, r0
   3626c:	0612      	lsls	r2, r2, #24
   3626e:	e773      	b.n	36158 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   36270:	7972      	ldrb	r2, [r6, #5]
   36272:	7930      	ldrb	r0, [r6, #4]
   36274:	0612      	lsls	r2, r2, #24
   36276:	e76f      	b.n	36158 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   36278:	7932      	ldrb	r2, [r6, #4]
   3627a:	2000      	movs	r0, #0
   3627c:	0612      	lsls	r2, r2, #24
   3627e:	e76b      	b.n	36158 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   36280:	4b0b      	ldr	r3, [pc, #44]	; (362b0 <am_hal_ble_blocking_transfer.part.7+0x500>)
   36282:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   36286:	2102      	movs	r1, #2
   36288:	f361 0283 	bfi	r2, r1, #2, #2
   3628c:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   36290:	e6d8      	b.n	36044 <am_hal_ble_blocking_transfer.part.7+0x294>
   36292:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   36296:	2102      	movs	r1, #2
   36298:	f361 0383 	bfi	r3, r1, #2, #2
   3629c:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   362a0:	e7b7      	b.n	36212 <am_hal_ble_blocking_transfer.part.7+0x462>
   362a2:	f1bb 0f00 	cmp.w	fp, #0
   362a6:	f47f af0e 	bne.w	360c6 <am_hal_ble_blocking_transfer.part.7+0x316>
   362aa:	e66a      	b.n	35f82 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   362ac:	000fff00 	.word	0x000fff00
   362b0:	5000c000 	.word	0x5000c000
   362b4:	01775230 	.word	0x01775230
   362b8:	08000009 	.word	0x08000009

000362bc <am_hal_ble_initialize>:
   362bc:	b108      	cbz	r0, 362c2 <am_hal_ble_initialize+0x6>
   362be:	2005      	movs	r0, #5
   362c0:	4770      	bx	lr
   362c2:	b149      	cbz	r1, 362d8 <am_hal_ble_initialize+0x1c>
   362c4:	b4f0      	push	{r4, r5, r6, r7}
   362c6:	4b19      	ldr	r3, [pc, #100]	; (3632c <am_hal_ble_initialize+0x70>)
   362c8:	78dc      	ldrb	r4, [r3, #3]
   362ca:	f3c4 0200 	ubfx	r2, r4, #0, #1
   362ce:	b2d0      	uxtb	r0, r2
   362d0:	b120      	cbz	r0, 362dc <am_hal_ble_initialize+0x20>
   362d2:	2007      	movs	r0, #7
   362d4:	bcf0      	pop	{r4, r5, r6, r7}
   362d6:	4770      	bx	lr
   362d8:	2006      	movs	r0, #6
   362da:	4770      	bx	lr
   362dc:	f044 0401 	orr.w	r4, r4, #1
   362e0:	70dc      	strb	r4, [r3, #3]
   362e2:	681e      	ldr	r6, [r3, #0]
   362e4:	4f12      	ldr	r7, [pc, #72]	; (36330 <am_hal_ble_initialize+0x74>)
   362e6:	60d8      	str	r0, [r3, #12]
   362e8:	f367 0617 	bfi	r6, r7, #0, #24
   362ec:	6258      	str	r0, [r3, #36]	; 0x24
   362ee:	6058      	str	r0, [r3, #4]
   362f0:	63d8      	str	r0, [r3, #60]	; 0x3c
   362f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   362f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   362fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   362fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   36302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   36306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   3630a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   3630e:	721a      	strb	r2, [r3, #8]
   36310:	601e      	str	r6, [r3, #0]
   36312:	6118      	str	r0, [r3, #16]
   36314:	6158      	str	r0, [r3, #20]
   36316:	6198      	str	r0, [r3, #24]
   36318:	61d8      	str	r0, [r3, #28]
   3631a:	6218      	str	r0, [r3, #32]
   3631c:	6298      	str	r0, [r3, #40]	; 0x28
   3631e:	62d8      	str	r0, [r3, #44]	; 0x2c
   36320:	6318      	str	r0, [r3, #48]	; 0x30
   36322:	6358      	str	r0, [r3, #52]	; 0x34
   36324:	6398      	str	r0, [r3, #56]	; 0x38
   36326:	600b      	str	r3, [r1, #0]
   36328:	e7d4      	b.n	362d4 <am_hal_ble_initialize+0x18>
   3632a:	bf00      	nop
   3632c:	1004cb44 	.word	0x1004cb44
   36330:	00775230 	.word	0x00775230

00036334 <am_hal_ble_deinitialize>:
   36334:	b128      	cbz	r0, 36342 <am_hal_ble_deinitialize+0xe>
   36336:	6803      	ldr	r3, [r0, #0]
   36338:	4a13      	ldr	r2, [pc, #76]	; (36388 <am_hal_ble_deinitialize+0x54>)
   3633a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3633e:	4293      	cmp	r3, r2
   36340:	d001      	beq.n	36346 <am_hal_ble_deinitialize+0x12>
   36342:	2002      	movs	r0, #2
   36344:	4770      	bx	lr
   36346:	78c2      	ldrb	r2, [r0, #3]
   36348:	2300      	movs	r3, #0
   3634a:	f363 0200 	bfi	r2, r3, #0, #1
   3634e:	70c2      	strb	r2, [r0, #3]
   36350:	6802      	ldr	r2, [r0, #0]
   36352:	60c3      	str	r3, [r0, #12]
   36354:	f363 0217 	bfi	r2, r3, #0, #24
   36358:	6103      	str	r3, [r0, #16]
   3635a:	6143      	str	r3, [r0, #20]
   3635c:	6183      	str	r3, [r0, #24]
   3635e:	61c3      	str	r3, [r0, #28]
   36360:	6203      	str	r3, [r0, #32]
   36362:	6043      	str	r3, [r0, #4]
   36364:	63c3      	str	r3, [r0, #60]	; 0x3c
   36366:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   3636a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   3636e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   36372:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   36376:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   3637a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   3637e:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   36382:	6002      	str	r2, [r0, #0]
   36384:	4618      	mov	r0, r3
   36386:	4770      	bx	lr
   36388:	01775230 	.word	0x01775230

0003638c <am_hal_ble_config>:
   3638c:	b128      	cbz	r0, 3639a <am_hal_ble_config+0xe>
   3638e:	6803      	ldr	r3, [r0, #0]
   36390:	4a3c      	ldr	r2, [pc, #240]	; (36484 <am_hal_ble_config+0xf8>)
   36392:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36396:	4293      	cmp	r3, r2
   36398:	d001      	beq.n	3639e <am_hal_ble_config+0x12>
   3639a:	2002      	movs	r0, #2
   3639c:	4770      	bx	lr
   3639e:	b4f0      	push	{r4, r5, r6, r7}
   363a0:	4b39      	ldr	r3, [pc, #228]	; (36488 <am_hal_ble_config+0xfc>)
   363a2:	6844      	ldr	r4, [r0, #4]
   363a4:	4d38      	ldr	r5, [pc, #224]	; (36488 <am_hal_ble_config+0xfc>)
   363a6:	2203      	movs	r2, #3
   363a8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   363ac:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   363b0:	f36f 4251 	bfc	r2, #17, #1
   363b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   363b8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   363bc:	f36f 4210 	bfc	r2, #16, #1
   363c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   363c4:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   363c8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   363cc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   363d0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   363d4:	6888      	ldr	r0, [r1, #8]
   363d6:	f360 220d 	bfi	r2, r0, #8, #6
   363da:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   363de:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   363e2:	6848      	ldr	r0, [r1, #4]
   363e4:	f360 0205 	bfi	r2, r0, #0, #6
   363e8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   363ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   363f0:	f042 0201 	orr.w	r2, r2, #1
   363f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   363f8:	680b      	ldr	r3, [r1, #0]
   363fa:	68c8      	ldr	r0, [r1, #12]
   363fc:	4a23      	ldr	r2, [pc, #140]	; (3648c <am_hal_ble_config+0x100>)
   363fe:	021b      	lsls	r3, r3, #8
   36400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   36404:	2802      	cmp	r0, #2
   36406:	bf08      	it	eq
   36408:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   3640c:	f043 0301 	orr.w	r3, r3, #1
   36410:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   36414:	68d3      	ldr	r3, [r2, #12]
   36416:	b2db      	uxtb	r3, r3
   36418:	2b12      	cmp	r3, #18
   3641a:	d009      	beq.n	36430 <am_hal_ble_config+0xa4>
   3641c:	4b1c      	ldr	r3, [pc, #112]	; (36490 <am_hal_ble_config+0x104>)
   3641e:	7e8a      	ldrb	r2, [r1, #26]
   36420:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   36424:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   36428:	2000      	movs	r0, #0
   3642a:	7222      	strb	r2, [r4, #8]
   3642c:	bcf0      	pop	{r4, r5, r6, r7}
   3642e:	4770      	bx	lr
   36430:	4f18      	ldr	r7, [pc, #96]	; (36494 <am_hal_ble_config+0x108>)
   36432:	68fa      	ldr	r2, [r7, #12]
   36434:	687b      	ldr	r3, [r7, #4]
   36436:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   3643a:	6908      	ldr	r0, [r1, #16]
   3643c:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   36440:	6908      	ldr	r0, [r1, #16]
   36442:	0a00      	lsrs	r0, r0, #8
   36444:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   36448:	6948      	ldr	r0, [r1, #20]
   3644a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   3644e:	6948      	ldr	r0, [r1, #20]
   36450:	0a00      	lsrs	r0, r0, #8
   36452:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   36456:	7e48      	ldrb	r0, [r1, #25]
   36458:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   3645c:	7e08      	ldrb	r0, [r1, #24]
   3645e:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   36462:	b16b      	cbz	r3, 36480 <am_hal_ble_config+0xf4>
   36464:	4e0c      	ldr	r6, [pc, #48]	; (36498 <am_hal_ble_config+0x10c>)
   36466:	18d5      	adds	r5, r2, r3
   36468:	2300      	movs	r3, #0
   3646a:	f812 0b01 	ldrb.w	r0, [r2], #1
   3646e:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   36472:	4295      	cmp	r5, r2
   36474:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   36478:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   3647c:	b29b      	uxth	r3, r3
   3647e:	d1f4      	bne.n	3646a <am_hal_ble_config+0xde>
   36480:	60bb      	str	r3, [r7, #8]
   36482:	e7cb      	b.n	3641c <am_hal_ble_config+0x90>
   36484:	01775230 	.word	0x01775230
   36488:	5000c000 	.word	0x5000c000
   3648c:	40020000 	.word	0x40020000
   36490:	1004cb44 	.word	0x1004cb44
   36494:	10018184 	.word	0x10018184
   36498:	0004290c 	.word	0x0004290c

0003649c <am_hal_ble_power_control>:
   3649c:	b538      	push	{r3, r4, r5, lr}
   3649e:	4b52      	ldr	r3, [pc, #328]	; (365e8 <am_hal_ble_power_control+0x14c>)
   364a0:	68db      	ldr	r3, [r3, #12]
   364a2:	b2db      	uxtb	r3, r3
   364a4:	2b11      	cmp	r3, #17
   364a6:	d903      	bls.n	364b0 <am_hal_ble_power_control+0x14>
   364a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   364ac:	4a4f      	ldr	r2, [pc, #316]	; (365ec <am_hal_ble_power_control+0x150>)
   364ae:	63da      	str	r2, [r3, #60]	; 0x3c
   364b0:	b128      	cbz	r0, 364be <am_hal_ble_power_control+0x22>
   364b2:	6803      	ldr	r3, [r0, #0]
   364b4:	4a4e      	ldr	r2, [pc, #312]	; (365f0 <am_hal_ble_power_control+0x154>)
   364b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   364ba:	4293      	cmp	r3, r2
   364bc:	d002      	beq.n	364c4 <am_hal_ble_power_control+0x28>
   364be:	2402      	movs	r4, #2
   364c0:	4620      	mov	r0, r4
   364c2:	bd38      	pop	{r3, r4, r5, pc}
   364c4:	b9f9      	cbnz	r1, 36506 <am_hal_ble_power_control+0x6a>
   364c6:	4b4b      	ldr	r3, [pc, #300]	; (365f4 <am_hal_ble_power_control+0x158>)
   364c8:	699b      	ldr	r3, [r3, #24]
   364ca:	05db      	lsls	r3, r3, #23
   364cc:	d454      	bmi.n	36578 <am_hal_ble_power_control+0xdc>
   364ce:	4d46      	ldr	r5, [pc, #280]	; (365e8 <am_hal_ble_power_control+0x14c>)
   364d0:	69ab      	ldr	r3, [r5, #24]
   364d2:	f043 0301 	orr.w	r3, r3, #1
   364d6:	61ab      	str	r3, [r5, #24]
   364d8:	69ab      	ldr	r3, [r5, #24]
   364da:	f003 0307 	and.w	r3, r3, #7
   364de:	2b07      	cmp	r3, #7
   364e0:	d00b      	beq.n	364fa <am_hal_ble_power_control+0x5e>
   364e2:	4c45      	ldr	r4, [pc, #276]	; (365f8 <am_hal_ble_power_control+0x15c>)
   364e4:	e001      	b.n	364ea <am_hal_ble_power_control+0x4e>
   364e6:	3c01      	subs	r4, #1
   364e8:	d06b      	beq.n	365c2 <am_hal_ble_power_control+0x126>
   364ea:	2010      	movs	r0, #16
   364ec:	f001 fa70 	bl	379d0 <am_hal_flash_delay>
   364f0:	69ab      	ldr	r3, [r5, #24]
   364f2:	f003 0307 	and.w	r3, r3, #7
   364f6:	2b07      	cmp	r3, #7
   364f8:	d1f5      	bne.n	364e6 <am_hal_ble_power_control+0x4a>
   364fa:	200e      	movs	r0, #14
   364fc:	f001 fd98 	bl	38030 <am_hal_pwrctrl_periph_enable>
   36500:	b128      	cbz	r0, 3650e <am_hal_ble_power_control+0x72>
   36502:	4c3e      	ldr	r4, [pc, #248]	; (365fc <am_hal_ble_power_control+0x160>)
   36504:	e7dc      	b.n	364c0 <am_hal_ble_power_control+0x24>
   36506:	2901      	cmp	r1, #1
   36508:	d038      	beq.n	3657c <am_hal_ble_power_control+0xe0>
   3650a:	2407      	movs	r4, #7
   3650c:	e7d8      	b.n	364c0 <am_hal_ble_power_control+0x24>
   3650e:	4b3c      	ldr	r3, [pc, #240]	; (36600 <am_hal_ble_power_control+0x164>)
   36510:	4935      	ldr	r1, [pc, #212]	; (365e8 <am_hal_ble_power_control+0x14c>)
   36512:	f44f 6200 	mov.w	r2, #2048	; 0x800
   36516:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   3651a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   3651e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   36522:	f360 02df 	bfi	r2, r0, #3, #29
   36526:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   3652a:	68cb      	ldr	r3, [r1, #12]
   3652c:	b2db      	uxtb	r3, r3
   3652e:	2b11      	cmp	r3, #17
   36530:	d949      	bls.n	365c6 <am_hal_ble_power_control+0x12a>
   36532:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   36536:	f043 0320 	orr.w	r3, r3, #32
   3653a:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   3653e:	4d30      	ldr	r5, [pc, #192]	; (36600 <am_hal_ble_power_control+0x164>)
   36540:	4830      	ldr	r0, [pc, #192]	; (36604 <am_hal_ble_power_control+0x168>)
   36542:	f001 fa45 	bl	379d0 <am_hal_flash_delay>
   36546:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   3654a:	f043 0301 	orr.w	r3, r3, #1
   3654e:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   36552:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36556:	f3c3 2302 	ubfx	r3, r3, #8, #3
   3655a:	2b03      	cmp	r3, #3
   3655c:	d00c      	beq.n	36578 <am_hal_ble_power_control+0xdc>
   3655e:	4c2a      	ldr	r4, [pc, #168]	; (36608 <am_hal_ble_power_control+0x16c>)
   36560:	e001      	b.n	36566 <am_hal_ble_power_control+0xca>
   36562:	3c01      	subs	r4, #1
   36564:	d039      	beq.n	365da <am_hal_ble_power_control+0x13e>
   36566:	2010      	movs	r0, #16
   36568:	f001 fa32 	bl	379d0 <am_hal_flash_delay>
   3656c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36570:	f3c3 2302 	ubfx	r3, r3, #8, #3
   36574:	2b03      	cmp	r3, #3
   36576:	d1f4      	bne.n	36562 <am_hal_ble_power_control+0xc6>
   36578:	2400      	movs	r4, #0
   3657a:	e7a1      	b.n	364c0 <am_hal_ble_power_control+0x24>
   3657c:	4b20      	ldr	r3, [pc, #128]	; (36600 <am_hal_ble_power_control+0x164>)
   3657e:	481a      	ldr	r0, [pc, #104]	; (365e8 <am_hal_ble_power_control+0x14c>)
   36580:	2200      	movs	r2, #0
   36582:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   36586:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   3658a:	f362 01df 	bfi	r1, r2, #3, #29
   3658e:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   36592:	68c3      	ldr	r3, [r0, #12]
   36594:	b2db      	uxtb	r3, r3
   36596:	2b11      	cmp	r3, #17
   36598:	d919      	bls.n	365ce <am_hal_ble_power_control+0x132>
   3659a:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   3659e:	f362 1345 	bfi	r3, r2, #5, #1
   365a2:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   365a6:	4b16      	ldr	r3, [pc, #88]	; (36600 <am_hal_ble_power_control+0x164>)
   365a8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   365ac:	f36f 0200 	bfc	r2, #0, #1
   365b0:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   365b4:	200e      	movs	r0, #14
   365b6:	f001 fd65 	bl	38084 <am_hal_pwrctrl_periph_disable>
   365ba:	4604      	mov	r4, r0
   365bc:	b178      	cbz	r0, 365de <am_hal_ble_power_control+0x142>
   365be:	4c13      	ldr	r4, [pc, #76]	; (3660c <am_hal_ble_power_control+0x170>)
   365c0:	e77e      	b.n	364c0 <am_hal_ble_power_control+0x24>
   365c2:	4c13      	ldr	r4, [pc, #76]	; (36610 <am_hal_ble_power_control+0x174>)
   365c4:	e77c      	b.n	364c0 <am_hal_ble_power_control+0x24>
   365c6:	4b13      	ldr	r3, [pc, #76]	; (36614 <am_hal_ble_power_control+0x178>)
   365c8:	2204      	movs	r2, #4
   365ca:	601a      	str	r2, [r3, #0]
   365cc:	e7b7      	b.n	3653e <am_hal_ble_power_control+0xa2>
   365ce:	4a11      	ldr	r2, [pc, #68]	; (36614 <am_hal_ble_power_control+0x178>)
   365d0:	6813      	ldr	r3, [r2, #0]
   365d2:	f023 0304 	bic.w	r3, r3, #4
   365d6:	6013      	str	r3, [r2, #0]
   365d8:	e7e5      	b.n	365a6 <am_hal_ble_power_control+0x10a>
   365da:	4c0f      	ldr	r4, [pc, #60]	; (36618 <am_hal_ble_power_control+0x17c>)
   365dc:	e770      	b.n	364c0 <am_hal_ble_power_control+0x24>
   365de:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   365e2:	f001 f9f5 	bl	379d0 <am_hal_flash_delay>
   365e6:	e76b      	b.n	364c0 <am_hal_ble_power_control+0x24>
   365e8:	40020000 	.word	0x40020000
   365ec:	0fc0400f 	.word	0x0fc0400f
   365f0:	01775230 	.word	0x01775230
   365f4:	40021000 	.word	0x40021000
   365f8:	000186a0 	.word	0x000186a0
   365fc:	08000007 	.word	0x08000007
   36600:	5000c000 	.word	0x5000c000
   36604:	00013880 	.word	0x00013880
   36608:	000f4240 	.word	0x000f4240
   3660c:	08000006 	.word	0x08000006
   36610:	08000005 	.word	0x08000005
   36614:	40020198 	.word	0x40020198
   36618:	08000008 	.word	0x08000008

0003661c <am_hal_ble_patch_copy_end_apply>:
   3661c:	b128      	cbz	r0, 3662a <am_hal_ble_patch_copy_end_apply+0xe>
   3661e:	6803      	ldr	r3, [r0, #0]
   36620:	4a46      	ldr	r2, [pc, #280]	; (3673c <am_hal_ble_patch_copy_end_apply+0x120>)
   36622:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36626:	4293      	cmp	r3, r2
   36628:	d001      	beq.n	3662e <am_hal_ble_patch_copy_end_apply+0x12>
   3662a:	2002      	movs	r0, #2
   3662c:	4770      	bx	lr
   3662e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36632:	b092      	sub	sp, #72	; 0x48
   36634:	2501      	movs	r5, #1
   36636:	2400      	movs	r4, #0
   36638:	4606      	mov	r6, r0
   3663a:	21f1      	movs	r1, #241	; 0xf1
   3663c:	20ee      	movs	r0, #238	; 0xee
   3663e:	2202      	movs	r2, #2
   36640:	f88d 5000 	strb.w	r5, [sp]
   36644:	f88d 0001 	strb.w	r0, [sp, #1]
   36648:	f88d 1002 	strb.w	r1, [sp, #2]
   3664c:	f88d 2003 	strb.w	r2, [sp, #3]
   36650:	f88d 4004 	strb.w	r4, [sp, #4]
   36654:	f88d 4005 	strb.w	r4, [sp, #5]
   36658:	f241 3588 	movw	r5, #5000	; 0x1388
   3665c:	f04f 0806 	mov.w	r8, #6
   36660:	461f      	mov	r7, r3
   36662:	2201      	movs	r2, #1
   36664:	42bb      	cmp	r3, r7
   36666:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   3666a:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   3666e:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   36672:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   36676:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   3667a:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   3667e:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   36682:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   36686:	940e      	str	r4, [sp, #56]	; 0x38
   36688:	940f      	str	r4, [sp, #60]	; 0x3c
   3668a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   3668e:	d029      	beq.n	366e4 <am_hal_ble_patch_copy_end_apply+0xc8>
   36690:	4b2b      	ldr	r3, [pc, #172]	; (36740 <am_hal_ble_patch_copy_end_apply+0x124>)
   36692:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   36696:	0612      	lsls	r2, r2, #24
   36698:	d40c      	bmi.n	366b4 <am_hal_ble_patch_copy_end_apply+0x98>
   3669a:	4d2a      	ldr	r5, [pc, #168]	; (36744 <am_hal_ble_patch_copy_end_apply+0x128>)
   3669c:	461c      	mov	r4, r3
   3669e:	2010      	movs	r0, #16
   366a0:	f001 f996 	bl	379d0 <am_hal_flash_delay>
   366a4:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   366a8:	0619      	lsls	r1, r3, #24
   366aa:	d403      	bmi.n	366b4 <am_hal_ble_patch_copy_end_apply+0x98>
   366ac:	3d01      	subs	r5, #1
   366ae:	d1f6      	bne.n	3669e <am_hal_ble_patch_copy_end_apply+0x82>
   366b0:	4825      	ldr	r0, [pc, #148]	; (36748 <am_hal_ble_patch_copy_end_apply+0x12c>)
   366b2:	e014      	b.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   366b4:	6832      	ldr	r2, [r6, #0]
   366b6:	4921      	ldr	r1, [pc, #132]	; (3673c <am_hal_ble_patch_copy_end_apply+0x120>)
   366b8:	f8cd d010 	str.w	sp, [sp, #16]
   366bc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   366c0:	2300      	movs	r3, #0
   366c2:	2402      	movs	r4, #2
   366c4:	2005      	movs	r0, #5
   366c6:	428a      	cmp	r2, r1
   366c8:	9306      	str	r3, [sp, #24]
   366ca:	9305      	str	r3, [sp, #20]
   366cc:	9307      	str	r3, [sp, #28]
   366ce:	9308      	str	r3, [sp, #32]
   366d0:	9309      	str	r3, [sp, #36]	; 0x24
   366d2:	f88d 401a 	strb.w	r4, [sp, #26]
   366d6:	f8ad 0018 	strh.w	r0, [sp, #24]
   366da:	d00f      	beq.n	366fc <am_hal_ble_patch_copy_end_apply+0xe0>
   366dc:	2002      	movs	r0, #2
   366de:	b012      	add	sp, #72	; 0x48
   366e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   366e4:	a90a      	add	r1, sp, #40	; 0x28
   366e6:	4630      	mov	r0, r6
   366e8:	f7ff fb62 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   366ec:	2800      	cmp	r0, #0
   366ee:	d0cf      	beq.n	36690 <am_hal_ble_patch_copy_end_apply+0x74>
   366f0:	3d01      	subs	r5, #1
   366f2:	d0f4      	beq.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   366f4:	6833      	ldr	r3, [r6, #0]
   366f6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   366fa:	e7b2      	b.n	36662 <am_hal_ble_patch_copy_end_apply+0x46>
   366fc:	a904      	add	r1, sp, #16
   366fe:	4630      	mov	r0, r6
   36700:	f7ff fb56 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36704:	2800      	cmp	r0, #0
   36706:	d1ea      	bne.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   36708:	f89d 3000 	ldrb.w	r3, [sp]
   3670c:	2b04      	cmp	r3, #4
   3670e:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   36712:	f04f 0001 	mov.w	r0, #1
   36716:	d1e2      	bne.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   36718:	f89d 3001 	ldrb.w	r3, [sp, #1]
   3671c:	2bee      	cmp	r3, #238	; 0xee
   3671e:	d1de      	bne.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   36720:	f89d 3002 	ldrb.w	r3, [sp, #2]
   36724:	429a      	cmp	r2, r3
   36726:	d1da      	bne.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   36728:	f89d 3003 	ldrb.w	r3, [sp, #3]
   3672c:	4283      	cmp	r3, r0
   3672e:	d1d6      	bne.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   36730:	f89d 0004 	ldrb.w	r0, [sp, #4]
   36734:	3000      	adds	r0, #0
   36736:	bf18      	it	ne
   36738:	2001      	movne	r0, #1
   3673a:	e7d0      	b.n	366de <am_hal_ble_patch_copy_end_apply+0xc2>
   3673c:	01775230 	.word	0x01775230
   36740:	5000c000 	.word	0x5000c000
   36744:	000f4240 	.word	0x000f4240
   36748:	08000004 	.word	0x08000004

0003674c <am_hal_ble_blocking_hci_write>:
   3674c:	b530      	push	{r4, r5, lr}
   3674e:	b087      	sub	sp, #28
   36750:	2400      	movs	r4, #0
   36752:	b29b      	uxth	r3, r3
   36754:	2501      	movs	r5, #1
   36756:	f88d 1004 	strb.w	r1, [sp, #4]
   3675a:	f8ad 3008 	strh.w	r3, [sp, #8]
   3675e:	9200      	str	r2, [sp, #0]
   36760:	f88d 4005 	strb.w	r4, [sp, #5]
   36764:	f88d 4006 	strb.w	r4, [sp, #6]
   36768:	f88d 4007 	strb.w	r4, [sp, #7]
   3676c:	f88d 400b 	strb.w	r4, [sp, #11]
   36770:	f88d 400c 	strb.w	r4, [sp, #12]
   36774:	9404      	str	r4, [sp, #16]
   36776:	9405      	str	r4, [sp, #20]
   36778:	f88d 500a 	strb.w	r5, [sp, #10]
   3677c:	b128      	cbz	r0, 3678a <am_hal_ble_blocking_hci_write+0x3e>
   3677e:	6802      	ldr	r2, [r0, #0]
   36780:	4c09      	ldr	r4, [pc, #36]	; (367a8 <am_hal_ble_blocking_hci_write+0x5c>)
   36782:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   36786:	42a2      	cmp	r2, r4
   36788:	d002      	beq.n	36790 <am_hal_ble_blocking_hci_write+0x44>
   3678a:	2000      	movs	r0, #0
   3678c:	b007      	add	sp, #28
   3678e:	bd30      	pop	{r4, r5, pc}
   36790:	b939      	cbnz	r1, 367a2 <am_hal_ble_blocking_hci_write+0x56>
   36792:	2b00      	cmp	r3, #0
   36794:	d0f9      	beq.n	3678a <am_hal_ble_blocking_hci_write+0x3e>
   36796:	4669      	mov	r1, sp
   36798:	f7ff fb0a 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   3679c:	2800      	cmp	r0, #0
   3679e:	d0f4      	beq.n	3678a <am_hal_ble_blocking_hci_write+0x3e>
   367a0:	e7f4      	b.n	3678c <am_hal_ble_blocking_hci_write+0x40>
   367a2:	f88d 5007 	strb.w	r5, [sp, #7]
   367a6:	e7f4      	b.n	36792 <am_hal_ble_blocking_hci_write+0x46>
   367a8:	01775230 	.word	0x01775230

000367ac <am_hal_ble_blocking_hci_read>:
   367ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   367b0:	b089      	sub	sp, #36	; 0x24
   367b2:	2300      	movs	r3, #0
   367b4:	2502      	movs	r5, #2
   367b6:	ac01      	add	r4, sp, #4
   367b8:	9402      	str	r4, [sp, #8]
   367ba:	f88d 300c 	strb.w	r3, [sp, #12]
   367be:	f88d 300d 	strb.w	r3, [sp, #13]
   367c2:	f88d 300e 	strb.w	r3, [sp, #14]
   367c6:	f88d 300f 	strb.w	r3, [sp, #15]
   367ca:	f88d 3013 	strb.w	r3, [sp, #19]
   367ce:	f88d 3014 	strb.w	r3, [sp, #20]
   367d2:	9306      	str	r3, [sp, #24]
   367d4:	9307      	str	r3, [sp, #28]
   367d6:	f8ad 5010 	strh.w	r5, [sp, #16]
   367da:	f88d 5012 	strb.w	r5, [sp, #18]
   367de:	b128      	cbz	r0, 367ec <am_hal_ble_blocking_hci_read+0x40>
   367e0:	6804      	ldr	r4, [r0, #0]
   367e2:	4e1f      	ldr	r6, [pc, #124]	; (36860 <am_hal_ble_blocking_hci_read+0xb4>)
   367e4:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   367e8:	42b4      	cmp	r4, r6
   367ea:	d003      	beq.n	367f4 <am_hal_ble_blocking_hci_read+0x48>
   367ec:	2000      	movs	r0, #0
   367ee:	b009      	add	sp, #36	; 0x24
   367f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   367f4:	460f      	mov	r7, r1
   367f6:	491b      	ldr	r1, [pc, #108]	; (36864 <am_hal_ble_blocking_hci_read+0xb8>)
   367f8:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   367fc:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   36800:	4681      	mov	r9, r0
   36802:	4690      	mov	r8, r2
   36804:	b92e      	cbnz	r6, 36812 <am_hal_ble_blocking_hci_read+0x66>
   36806:	f1b8 0f00 	cmp.w	r8, #0
   3680a:	d0ef      	beq.n	367ec <am_hal_ble_blocking_hci_read+0x40>
   3680c:	f8c8 6000 	str.w	r6, [r8]
   36810:	e7ec      	b.n	367ec <am_hal_ble_blocking_hci_read+0x40>
   36812:	a902      	add	r1, sp, #8
   36814:	f7ff facc 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36818:	2800      	cmp	r0, #0
   3681a:	d1e8      	bne.n	367ee <am_hal_ble_blocking_hci_read+0x42>
   3681c:	f89d 0005 	ldrb.w	r0, [sp, #5]
   36820:	f89d 1004 	ldrb.w	r1, [sp, #4]
   36824:	9702      	str	r7, [sp, #8]
   36826:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   3682a:	b289      	uxth	r1, r1
   3682c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   36830:	f8ad 1010 	strh.w	r1, [sp, #16]
   36834:	d901      	bls.n	3683a <am_hal_ble_blocking_hci_read+0x8e>
   36836:	2005      	movs	r0, #5
   36838:	e7d9      	b.n	367ee <am_hal_ble_blocking_hci_read+0x42>
   3683a:	f8d9 0000 	ldr.w	r0, [r9]
   3683e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   36842:	42a0      	cmp	r0, r4
   36844:	d001      	beq.n	3684a <am_hal_ble_blocking_hci_read+0x9e>
   36846:	4628      	mov	r0, r5
   36848:	e7d1      	b.n	367ee <am_hal_ble_blocking_hci_read+0x42>
   3684a:	b129      	cbz	r1, 36858 <am_hal_ble_blocking_hci_read+0xac>
   3684c:	a902      	add	r1, sp, #8
   3684e:	4648      	mov	r0, r9
   36850:	f7ff faae 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36854:	2800      	cmp	r0, #0
   36856:	d1ca      	bne.n	367ee <am_hal_ble_blocking_hci_read+0x42>
   36858:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   3685c:	e7d3      	b.n	36806 <am_hal_ble_blocking_hci_read+0x5a>
   3685e:	bf00      	nop
   36860:	01775230 	.word	0x01775230
   36864:	5000c000 	.word	0x5000c000

00036868 <am_hal_ble_blocking_transfer>:
   36868:	b128      	cbz	r0, 36876 <am_hal_ble_blocking_transfer+0xe>
   3686a:	6803      	ldr	r3, [r0, #0]
   3686c:	4a08      	ldr	r2, [pc, #32]	; (36890 <am_hal_ble_blocking_transfer+0x28>)
   3686e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36872:	4293      	cmp	r3, r2
   36874:	d001      	beq.n	3687a <am_hal_ble_blocking_transfer+0x12>
   36876:	2002      	movs	r0, #2
   36878:	4770      	bx	lr
   3687a:	890b      	ldrh	r3, [r1, #8]
   3687c:	b410      	push	{r4}
   3687e:	b11b      	cbz	r3, 36888 <am_hal_ble_blocking_transfer+0x20>
   36880:	f85d 4b04 	ldr.w	r4, [sp], #4
   36884:	f7ff ba94 	b.w	35db0 <am_hal_ble_blocking_transfer.part.7>
   36888:	4618      	mov	r0, r3
   3688a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3688e:	4770      	bx	lr
   36890:	01775230 	.word	0x01775230

00036894 <am_hal_ble_patch_apply>:
   36894:	b128      	cbz	r0, 368a2 <am_hal_ble_patch_apply+0xe>
   36896:	6803      	ldr	r3, [r0, #0]
   36898:	4aae      	ldr	r2, [pc, #696]	; (36b54 <am_hal_ble_patch_apply+0x2c0>)
   3689a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3689e:	4293      	cmp	r3, r2
   368a0:	d002      	beq.n	368a8 <am_hal_ble_patch_apply+0x14>
   368a2:	2302      	movs	r3, #2
   368a4:	4618      	mov	r0, r3
   368a6:	4770      	bx	lr
   368a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   368ac:	684a      	ldr	r2, [r1, #4]
   368ae:	680d      	ldr	r5, [r1, #0]
   368b0:	b095      	sub	sp, #84	; 0x54
   368b2:	2701      	movs	r7, #1
   368b4:	4604      	mov	r4, r0
   368b6:	460e      	mov	r6, r1
   368b8:	f88d 200c 	strb.w	r2, [sp, #12]
   368bc:	20f1      	movs	r0, #241	; 0xf1
   368be:	0a12      	lsrs	r2, r2, #8
   368c0:	2102      	movs	r1, #2
   368c2:	f88d 7008 	strb.w	r7, [sp, #8]
   368c6:	f88d 5009 	strb.w	r5, [sp, #9]
   368ca:	f88d 200d 	strb.w	r2, [sp, #13]
   368ce:	f88d 000a 	strb.w	r0, [sp, #10]
   368d2:	f88d 100b 	strb.w	r1, [sp, #11]
   368d6:	f241 3788 	movw	r7, #5000	; 0x1388
   368da:	2500      	movs	r5, #0
   368dc:	f04f 0906 	mov.w	r9, #6
   368e0:	4698      	mov	r8, r3
   368e2:	2201      	movs	r2, #1
   368e4:	a902      	add	r1, sp, #8
   368e6:	4543      	cmp	r3, r8
   368e8:	910c      	str	r1, [sp, #48]	; 0x30
   368ea:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   368ee:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   368f2:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   368f6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   368fa:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   368fe:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   36902:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   36906:	9510      	str	r5, [sp, #64]	; 0x40
   36908:	9511      	str	r5, [sp, #68]	; 0x44
   3690a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   3690e:	d02b      	beq.n	36968 <am_hal_ble_patch_apply+0xd4>
   36910:	4b91      	ldr	r3, [pc, #580]	; (36b58 <am_hal_ble_patch_apply+0x2c4>)
   36912:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   36916:	0612      	lsls	r2, r2, #24
   36918:	d40c      	bmi.n	36934 <am_hal_ble_patch_apply+0xa0>
   3691a:	4f90      	ldr	r7, [pc, #576]	; (36b5c <am_hal_ble_patch_apply+0x2c8>)
   3691c:	461d      	mov	r5, r3
   3691e:	2010      	movs	r0, #16
   36920:	f001 f856 	bl	379d0 <am_hal_flash_delay>
   36924:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36928:	061b      	lsls	r3, r3, #24
   3692a:	d403      	bmi.n	36934 <am_hal_ble_patch_apply+0xa0>
   3692c:	3f01      	subs	r7, #1
   3692e:	d1f6      	bne.n	3691e <am_hal_ble_patch_apply+0x8a>
   36930:	4b8b      	ldr	r3, [pc, #556]	; (36b60 <am_hal_ble_patch_apply+0x2cc>)
   36932:	e015      	b.n	36960 <am_hal_ble_patch_apply+0xcc>
   36934:	6825      	ldr	r5, [r4, #0]
   36936:	4a87      	ldr	r2, [pc, #540]	; (36b54 <am_hal_ble_patch_apply+0x2c0>)
   36938:	ab02      	add	r3, sp, #8
   3693a:	9306      	str	r3, [sp, #24]
   3693c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   36940:	2300      	movs	r3, #0
   36942:	9308      	str	r3, [sp, #32]
   36944:	2102      	movs	r1, #2
   36946:	9307      	str	r3, [sp, #28]
   36948:	9309      	str	r3, [sp, #36]	; 0x24
   3694a:	930a      	str	r3, [sp, #40]	; 0x28
   3694c:	930b      	str	r3, [sp, #44]	; 0x2c
   3694e:	4295      	cmp	r5, r2
   36950:	f04f 0305 	mov.w	r3, #5
   36954:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   36958:	f8ad 3020 	strh.w	r3, [sp, #32]
   3695c:	d011      	beq.n	36982 <am_hal_ble_patch_apply+0xee>
   3695e:	2302      	movs	r3, #2
   36960:	4618      	mov	r0, r3
   36962:	b015      	add	sp, #84	; 0x54
   36964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36968:	a90c      	add	r1, sp, #48	; 0x30
   3696a:	4620      	mov	r0, r4
   3696c:	f7ff fa20 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36970:	4603      	mov	r3, r0
   36972:	2800      	cmp	r0, #0
   36974:	d0cc      	beq.n	36910 <am_hal_ble_patch_apply+0x7c>
   36976:	3f01      	subs	r7, #1
   36978:	d0f2      	beq.n	36960 <am_hal_ble_patch_apply+0xcc>
   3697a:	6823      	ldr	r3, [r4, #0]
   3697c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36980:	e7af      	b.n	368e2 <am_hal_ble_patch_apply+0x4e>
   36982:	a906      	add	r1, sp, #24
   36984:	4620      	mov	r0, r4
   36986:	f7ff fa13 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   3698a:	4603      	mov	r3, r0
   3698c:	2800      	cmp	r0, #0
   3698e:	d1e7      	bne.n	36960 <am_hal_ble_patch_apply+0xcc>
   36990:	2304      	movs	r3, #4
   36992:	f89d 1008 	ldrb.w	r1, [sp, #8]
   36996:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   3699a:	23f1      	movs	r3, #241	; 0xf1
   3699c:	7832      	ldrb	r2, [r6, #0]
   3699e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   369a2:	2904      	cmp	r1, #4
   369a4:	f04f 0301 	mov.w	r3, #1
   369a8:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   369ac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   369b0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   369b4:	f040 811a 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   369b8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   369bc:	b2d3      	uxtb	r3, r2
   369be:	4299      	cmp	r1, r3
   369c0:	f040 8114 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   369c4:	f89d 300a 	ldrb.w	r3, [sp, #10]
   369c8:	2bf1      	cmp	r3, #241	; 0xf1
   369ca:	f040 810f 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   369ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   369d2:	2b01      	cmp	r3, #1
   369d4:	f040 810a 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   369d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   369dc:	2b00      	cmp	r3, #0
   369de:	f040 8105 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   369e2:	f8d6 a004 	ldr.w	sl, [r6, #4]
   369e6:	f1ba 0f00 	cmp.w	sl, #0
   369ea:	f000 8091 	beq.w	36b10 <am_hal_ble_patch_apply+0x27c>
   369ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 36b68 <am_hal_ble_patch_apply+0x2d4>
   369f2:	4f59      	ldr	r7, [pc, #356]	; (36b58 <am_hal_ble_patch_apply+0x2c4>)
   369f4:	9501      	str	r5, [sp, #4]
   369f6:	469b      	mov	fp, r3
   369f8:	2201      	movs	r2, #1
   369fa:	f889 2000 	strb.w	r2, [r9]
   369fe:	6833      	ldr	r3, [r6, #0]
   36a00:	f889 3001 	strb.w	r3, [r9, #1]
   36a04:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   36a08:	46d0      	mov	r8, sl
   36a0a:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   36a0e:	bf28      	it	cs
   36a10:	f04f 0880 	movcs.w	r8, #128	; 0x80
   36a14:	f889 3002 	strb.w	r3, [r9, #2]
   36a18:	f889 8003 	strb.w	r8, [r9, #3]
   36a1c:	68f1      	ldr	r1, [r6, #12]
   36a1e:	4851      	ldr	r0, [pc, #324]	; (36b64 <am_hal_ble_patch_apply+0x2d0>)
   36a20:	f8cd 9018 	str.w	r9, [sp, #24]
   36a24:	2300      	movs	r3, #0
   36a26:	f02b 0503 	bic.w	r5, fp, #3
   36a2a:	9308      	str	r3, [sp, #32]
   36a2c:	4429      	add	r1, r5
   36a2e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   36a32:	f108 0504 	add.w	r5, r8, #4
   36a36:	4642      	mov	r2, r8
   36a38:	9307      	str	r3, [sp, #28]
   36a3a:	9309      	str	r3, [sp, #36]	; 0x24
   36a3c:	930a      	str	r3, [sp, #40]	; 0x28
   36a3e:	930b      	str	r3, [sp, #44]	; 0x2c
   36a40:	f8ad 5020 	strh.w	r5, [sp, #32]
   36a44:	f7d5 fb8c 	bl	c160 <memcpy>
   36a48:	6823      	ldr	r3, [r4, #0]
   36a4a:	9a01      	ldr	r2, [sp, #4]
   36a4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36a50:	4293      	cmp	r3, r2
   36a52:	d184      	bne.n	3695e <am_hal_ble_patch_apply+0xca>
   36a54:	a906      	add	r1, sp, #24
   36a56:	4620      	mov	r0, r4
   36a58:	f7ff f9aa 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36a5c:	4603      	mov	r3, r0
   36a5e:	2800      	cmp	r0, #0
   36a60:	f47f af7e 	bne.w	36960 <am_hal_ble_patch_apply+0xcc>
   36a64:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   36a68:	061d      	lsls	r5, r3, #24
   36a6a:	d40b      	bmi.n	36a84 <am_hal_ble_patch_apply+0x1f0>
   36a6c:	4d3b      	ldr	r5, [pc, #236]	; (36b5c <am_hal_ble_patch_apply+0x2c8>)
   36a6e:	e002      	b.n	36a76 <am_hal_ble_patch_apply+0x1e2>
   36a70:	3d01      	subs	r5, #1
   36a72:	f43f af5d 	beq.w	36930 <am_hal_ble_patch_apply+0x9c>
   36a76:	2010      	movs	r0, #16
   36a78:	f000 ffaa 	bl	379d0 <am_hal_flash_delay>
   36a7c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   36a80:	0618      	lsls	r0, r3, #24
   36a82:	d5f5      	bpl.n	36a70 <am_hal_ble_patch_apply+0x1dc>
   36a84:	ab02      	add	r3, sp, #8
   36a86:	9306      	str	r3, [sp, #24]
   36a88:	2300      	movs	r3, #0
   36a8a:	9308      	str	r3, [sp, #32]
   36a8c:	6822      	ldr	r2, [r4, #0]
   36a8e:	9307      	str	r3, [sp, #28]
   36a90:	9309      	str	r3, [sp, #36]	; 0x24
   36a92:	930a      	str	r3, [sp, #40]	; 0x28
   36a94:	930b      	str	r3, [sp, #44]	; 0x2c
   36a96:	2305      	movs	r3, #5
   36a98:	f8ad 3020 	strh.w	r3, [sp, #32]
   36a9c:	9b01      	ldr	r3, [sp, #4]
   36a9e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   36aa2:	2102      	movs	r1, #2
   36aa4:	429a      	cmp	r2, r3
   36aa6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   36aaa:	f47f af58 	bne.w	3695e <am_hal_ble_patch_apply+0xca>
   36aae:	a906      	add	r1, sp, #24
   36ab0:	4620      	mov	r0, r4
   36ab2:	f7ff f97d 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36ab6:	4603      	mov	r3, r0
   36ab8:	2800      	cmp	r0, #0
   36aba:	f47f af51 	bne.w	36960 <am_hal_ble_patch_apply+0xcc>
   36abe:	2304      	movs	r3, #4
   36ac0:	f89d 1008 	ldrb.w	r1, [sp, #8]
   36ac4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   36ac8:	23f2      	movs	r3, #242	; 0xf2
   36aca:	7832      	ldrb	r2, [r6, #0]
   36acc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   36ad0:	2904      	cmp	r1, #4
   36ad2:	f04f 0301 	mov.w	r3, #1
   36ad6:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   36ada:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   36ade:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   36ae2:	f040 8083 	bne.w	36bec <am_hal_ble_patch_apply+0x358>
   36ae6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   36aea:	4293      	cmp	r3, r2
   36aec:	d17e      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36aee:	f89d 300a 	ldrb.w	r3, [sp, #10]
   36af2:	2bf2      	cmp	r3, #242	; 0xf2
   36af4:	d17a      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36af6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   36afa:	2b01      	cmp	r3, #1
   36afc:	d176      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36afe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   36b02:	2b00      	cmp	r3, #0
   36b04:	d172      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36b06:	ebba 0a08 	subs.w	sl, sl, r8
   36b0a:	44c3      	add	fp, r8
   36b0c:	f47f af74 	bne.w	369f8 <am_hal_ble_patch_apply+0x164>
   36b10:	68b3      	ldr	r3, [r6, #8]
   36b12:	f88d 2009 	strb.w	r2, [sp, #9]
   36b16:	2101      	movs	r1, #1
   36b18:	0a1a      	lsrs	r2, r3, #8
   36b1a:	20f3      	movs	r0, #243	; 0xf3
   36b1c:	f88d 300c 	strb.w	r3, [sp, #12]
   36b20:	f88d 200d 	strb.w	r2, [sp, #13]
   36b24:	2306      	movs	r3, #6
   36b26:	f88d 1008 	strb.w	r1, [sp, #8]
   36b2a:	f88d 000a 	strb.w	r0, [sp, #10]
   36b2e:	2502      	movs	r5, #2
   36b30:	aa02      	add	r2, sp, #8
   36b32:	2100      	movs	r1, #0
   36b34:	4620      	mov	r0, r4
   36b36:	f88d 500b 	strb.w	r5, [sp, #11]
   36b3a:	f7ff fe07 	bl	3674c <am_hal_ble_blocking_hci_write>
   36b3e:	4603      	mov	r3, r0
   36b40:	2800      	cmp	r0, #0
   36b42:	d153      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36b44:	4f04      	ldr	r7, [pc, #16]	; (36b58 <am_hal_ble_patch_apply+0x2c4>)
   36b46:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   36b4a:	0611      	lsls	r1, r2, #24
   36b4c:	d41b      	bmi.n	36b86 <am_hal_ble_patch_apply+0x2f2>
   36b4e:	4d03      	ldr	r5, [pc, #12]	; (36b5c <am_hal_ble_patch_apply+0x2c8>)
   36b50:	e00f      	b.n	36b72 <am_hal_ble_patch_apply+0x2de>
   36b52:	bf00      	nop
   36b54:	01775230 	.word	0x01775230
   36b58:	5000c000 	.word	0x5000c000
   36b5c:	000f4240 	.word	0x000f4240
   36b60:	08000004 	.word	0x08000004
   36b64:	1004cb90 	.word	0x1004cb90
   36b68:	1004cb8c 	.word	0x1004cb8c
   36b6c:	3d01      	subs	r5, #1
   36b6e:	f43f aedf 	beq.w	36930 <am_hal_ble_patch_apply+0x9c>
   36b72:	2010      	movs	r0, #16
   36b74:	9301      	str	r3, [sp, #4]
   36b76:	f000 ff2b 	bl	379d0 <am_hal_flash_delay>
   36b7a:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   36b7e:	9b01      	ldr	r3, [sp, #4]
   36b80:	f012 0f80 	tst.w	r2, #128	; 0x80
   36b84:	d0f2      	beq.n	36b6c <am_hal_ble_patch_apply+0x2d8>
   36b86:	2200      	movs	r2, #0
   36b88:	9301      	str	r3, [sp, #4]
   36b8a:	4620      	mov	r0, r4
   36b8c:	ab02      	add	r3, sp, #8
   36b8e:	a906      	add	r1, sp, #24
   36b90:	2502      	movs	r5, #2
   36b92:	2405      	movs	r4, #5
   36b94:	9208      	str	r2, [sp, #32]
   36b96:	9306      	str	r3, [sp, #24]
   36b98:	9207      	str	r2, [sp, #28]
   36b9a:	9209      	str	r2, [sp, #36]	; 0x24
   36b9c:	920a      	str	r2, [sp, #40]	; 0x28
   36b9e:	920b      	str	r2, [sp, #44]	; 0x2c
   36ba0:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   36ba4:	f8ad 4020 	strh.w	r4, [sp, #32]
   36ba8:	f7ff fe5e 	bl	36868 <am_hal_ble_blocking_transfer>
   36bac:	9b01      	ldr	r3, [sp, #4]
   36bae:	b9f8      	cbnz	r0, 36bf0 <am_hal_ble_patch_apply+0x35c>
   36bb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   36bb4:	6831      	ldr	r1, [r6, #0]
   36bb6:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   36bba:	2a04      	cmp	r2, #4
   36bbc:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   36bc0:	f04f 0101 	mov.w	r1, #1
   36bc4:	d112      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36bc6:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   36bca:	f89d 2009 	ldrb.w	r2, [sp, #9]
   36bce:	4294      	cmp	r4, r2
   36bd0:	d10c      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36bd2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   36bd6:	4290      	cmp	r0, r2
   36bd8:	d108      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36bda:	f89d 200b 	ldrb.w	r2, [sp, #11]
   36bde:	4291      	cmp	r1, r2
   36be0:	d104      	bne.n	36bec <am_hal_ble_patch_apply+0x358>
   36be2:	f89d 200c 	ldrb.w	r2, [sp, #12]
   36be6:	2a00      	cmp	r2, #0
   36be8:	f43f aeba 	beq.w	36960 <am_hal_ble_patch_apply+0xcc>
   36bec:	2301      	movs	r3, #1
   36bee:	e6b7      	b.n	36960 <am_hal_ble_patch_apply+0xcc>
   36bf0:	4603      	mov	r3, r0
   36bf2:	e6b5      	b.n	36960 <am_hal_ble_patch_apply+0xcc>

00036bf4 <am_hal_ble_int_enable>:
   36bf4:	b128      	cbz	r0, 36c02 <am_hal_ble_int_enable+0xe>
   36bf6:	6803      	ldr	r3, [r0, #0]
   36bf8:	4a0c      	ldr	r2, [pc, #48]	; (36c2c <am_hal_ble_int_enable+0x38>)
   36bfa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36bfe:	4293      	cmp	r3, r2
   36c00:	d001      	beq.n	36c06 <am_hal_ble_int_enable+0x12>
   36c02:	2002      	movs	r0, #2
   36c04:	4770      	bx	lr
   36c06:	b510      	push	{r4, lr}
   36c08:	b082      	sub	sp, #8
   36c0a:	460c      	mov	r4, r1
   36c0c:	f001 f8e6 	bl	37ddc <am_hal_interrupt_master_disable>
   36c10:	4b07      	ldr	r3, [pc, #28]	; (36c30 <am_hal_ble_int_enable+0x3c>)
   36c12:	9001      	str	r0, [sp, #4]
   36c14:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   36c18:	4321      	orrs	r1, r4
   36c1a:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   36c1e:	9801      	ldr	r0, [sp, #4]
   36c20:	f001 f8e0 	bl	37de4 <am_hal_interrupt_master_set>
   36c24:	2000      	movs	r0, #0
   36c26:	b002      	add	sp, #8
   36c28:	bd10      	pop	{r4, pc}
   36c2a:	bf00      	nop
   36c2c:	01775230 	.word	0x01775230
   36c30:	5000c000 	.word	0x5000c000

00036c34 <am_hal_ble_int_status>:
   36c34:	4b05      	ldr	r3, [pc, #20]	; (36c4c <am_hal_ble_int_status+0x18>)
   36c36:	b911      	cbnz	r1, 36c3e <am_hal_ble_int_status+0xa>
   36c38:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   36c3c:	4770      	bx	lr
   36c3e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   36c42:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   36c46:	4018      	ands	r0, r3
   36c48:	4770      	bx	lr
   36c4a:	bf00      	nop
   36c4c:	5000c000 	.word	0x5000c000

00036c50 <am_hal_ble_int_clear>:
   36c50:	b128      	cbz	r0, 36c5e <am_hal_ble_int_clear+0xe>
   36c52:	6803      	ldr	r3, [r0, #0]
   36c54:	4a05      	ldr	r2, [pc, #20]	; (36c6c <am_hal_ble_int_clear+0x1c>)
   36c56:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36c5a:	4293      	cmp	r3, r2
   36c5c:	d001      	beq.n	36c62 <am_hal_ble_int_clear+0x12>
   36c5e:	2002      	movs	r0, #2
   36c60:	4770      	bx	lr
   36c62:	4b03      	ldr	r3, [pc, #12]	; (36c70 <am_hal_ble_int_clear+0x20>)
   36c64:	2000      	movs	r0, #0
   36c66:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   36c6a:	4770      	bx	lr
   36c6c:	01775230 	.word	0x01775230
   36c70:	5000c000 	.word	0x5000c000

00036c74 <am_hal_ble_plf_reg_read>:
   36c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36c78:	b092      	sub	sp, #72	; 0x48
   36c7a:	0a0e      	lsrs	r6, r1, #8
   36c7c:	0c0d      	lsrs	r5, r1, #16
   36c7e:	2300      	movs	r3, #0
   36c80:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   36c84:	f88d 100c 	strb.w	r1, [sp, #12]
   36c88:	f88d 600d 	strb.w	r6, [sp, #13]
   36c8c:	f88d 500e 	strb.w	r5, [sp, #14]
   36c90:	2401      	movs	r4, #1
   36c92:	2702      	movs	r7, #2
   36c94:	26fd      	movs	r6, #253	; 0xfd
   36c96:	2504      	movs	r5, #4
   36c98:	4952      	ldr	r1, [pc, #328]	; (36de4 <am_hal_ble_plf_reg_read+0x170>)
   36c9a:	f88d e00f 	strb.w	lr, [sp, #15]
   36c9e:	f88d 7009 	strb.w	r7, [sp, #9]
   36ca2:	f88d 500b 	strb.w	r5, [sp, #11]
   36ca6:	930a      	str	r3, [sp, #40]	; 0x28
   36ca8:	930b      	str	r3, [sp, #44]	; 0x2c
   36caa:	930c      	str	r3, [sp, #48]	; 0x30
   36cac:	f88d 4008 	strb.w	r4, [sp, #8]
   36cb0:	f88d 600a 	strb.w	r6, [sp, #10]
   36cb4:	f10d 0e08 	add.w	lr, sp, #8
   36cb8:	2508      	movs	r5, #8
   36cba:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   36cbe:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   36cc2:	4617      	mov	r7, r2
   36cc4:	f88d 3014 	strb.w	r3, [sp, #20]
   36cc8:	f88d 3015 	strb.w	r3, [sp, #21]
   36ccc:	f88d 3016 	strb.w	r3, [sp, #22]
   36cd0:	f88d 3017 	strb.w	r3, [sp, #23]
   36cd4:	f88d 401a 	strb.w	r4, [sp, #26]
   36cd8:	f88d 301b 	strb.w	r3, [sp, #27]
   36cdc:	f88d 301c 	strb.w	r3, [sp, #28]
   36ce0:	9308      	str	r3, [sp, #32]
   36ce2:	9309      	str	r3, [sp, #36]	; 0x24
   36ce4:	f8cd e010 	str.w	lr, [sp, #16]
   36ce8:	f8ad 5018 	strh.w	r5, [sp, #24]
   36cec:	4680      	mov	r8, r0
   36cee:	b128      	cbz	r0, 36cfc <am_hal_ble_plf_reg_read+0x88>
   36cf0:	6803      	ldr	r3, [r0, #0]
   36cf2:	4a3d      	ldr	r2, [pc, #244]	; (36de8 <am_hal_ble_plf_reg_read+0x174>)
   36cf4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36cf8:	4293      	cmp	r3, r2
   36cfa:	d06e      	beq.n	36dda <am_hal_ble_plf_reg_read+0x166>
   36cfc:	4d39      	ldr	r5, [pc, #228]	; (36de4 <am_hal_ble_plf_reg_read+0x170>)
   36cfe:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   36d02:	f043 0302 	orr.w	r3, r3, #2
   36d06:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   36d0a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36d0e:	0619      	lsls	r1, r3, #24
   36d10:	d40a      	bmi.n	36d28 <am_hal_ble_plf_reg_read+0xb4>
   36d12:	4c36      	ldr	r4, [pc, #216]	; (36dec <am_hal_ble_plf_reg_read+0x178>)
   36d14:	e001      	b.n	36d1a <am_hal_ble_plf_reg_read+0xa6>
   36d16:	3c01      	subs	r4, #1
   36d18:	d05b      	beq.n	36dd2 <am_hal_ble_plf_reg_read+0x15e>
   36d1a:	2010      	movs	r0, #16
   36d1c:	f000 fe58 	bl	379d0 <am_hal_flash_delay>
   36d20:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36d24:	061a      	lsls	r2, r3, #24
   36d26:	d5f6      	bpl.n	36d16 <am_hal_ble_plf_reg_read+0xa2>
   36d28:	2300      	movs	r3, #0
   36d2a:	2202      	movs	r2, #2
   36d2c:	a901      	add	r1, sp, #4
   36d2e:	9104      	str	r1, [sp, #16]
   36d30:	f88d 3014 	strb.w	r3, [sp, #20]
   36d34:	f88d 3015 	strb.w	r3, [sp, #21]
   36d38:	f88d 3016 	strb.w	r3, [sp, #22]
   36d3c:	f88d 3017 	strb.w	r3, [sp, #23]
   36d40:	f88d 301b 	strb.w	r3, [sp, #27]
   36d44:	f88d 301c 	strb.w	r3, [sp, #28]
   36d48:	9308      	str	r3, [sp, #32]
   36d4a:	9309      	str	r3, [sp, #36]	; 0x24
   36d4c:	f8ad 2018 	strh.w	r2, [sp, #24]
   36d50:	f88d 201a 	strb.w	r2, [sp, #26]
   36d54:	f1b8 0f00 	cmp.w	r8, #0
   36d58:	d006      	beq.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36d5a:	f8d8 4000 	ldr.w	r4, [r8]
   36d5e:	4b22      	ldr	r3, [pc, #136]	; (36de8 <am_hal_ble_plf_reg_read+0x174>)
   36d60:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   36d64:	429c      	cmp	r4, r3
   36d66:	d00e      	beq.n	36d86 <am_hal_ble_plf_reg_read+0x112>
   36d68:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   36d6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   36d6e:	4a1d      	ldr	r2, [pc, #116]	; (36de4 <am_hal_ble_plf_reg_read+0x170>)
   36d70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   36d74:	2000      	movs	r0, #0
   36d76:	603b      	str	r3, [r7, #0]
   36d78:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   36d7c:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   36d80:	b012      	add	sp, #72	; 0x48
   36d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36d86:	4b17      	ldr	r3, [pc, #92]	; (36de4 <am_hal_ble_plf_reg_read+0x170>)
   36d88:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   36d8c:	061b      	lsls	r3, r3, #24
   36d8e:	d5eb      	bpl.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36d90:	a904      	add	r1, sp, #16
   36d92:	4640      	mov	r0, r8
   36d94:	f7ff f80c 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36d98:	2800      	cmp	r0, #0
   36d9a:	d1e5      	bne.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36d9c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   36da0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   36da4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   36da8:	b29b      	uxth	r3, r3
   36daa:	aa0a      	add	r2, sp, #40	; 0x28
   36dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   36db0:	f8ad 3018 	strh.w	r3, [sp, #24]
   36db4:	9204      	str	r2, [sp, #16]
   36db6:	d8d7      	bhi.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36db8:	f8d8 2000 	ldr.w	r2, [r8]
   36dbc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   36dc0:	42a2      	cmp	r2, r4
   36dc2:	d1d1      	bne.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36dc4:	2b00      	cmp	r3, #0
   36dc6:	d0cf      	beq.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36dc8:	a904      	add	r1, sp, #16
   36dca:	4640      	mov	r0, r8
   36dcc:	f7fe fff0 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36dd0:	e7ca      	b.n	36d68 <am_hal_ble_plf_reg_read+0xf4>
   36dd2:	4807      	ldr	r0, [pc, #28]	; (36df0 <am_hal_ble_plf_reg_read+0x17c>)
   36dd4:	b012      	add	sp, #72	; 0x48
   36dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36dda:	a904      	add	r1, sp, #16
   36ddc:	f7fe ffe8 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36de0:	e78c      	b.n	36cfc <am_hal_ble_plf_reg_read+0x88>
   36de2:	bf00      	nop
   36de4:	5000c000 	.word	0x5000c000
   36de8:	01775230 	.word	0x01775230
   36dec:	0007a120 	.word	0x0007a120
   36df0:	08000004 	.word	0x08000004

00036df4 <am_hal_ble_plf_reg_write>:
   36df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   36df6:	b091      	sub	sp, #68	; 0x44
   36df8:	0c0f      	lsrs	r7, r1, #16
   36dfa:	0e0e      	lsrs	r6, r1, #24
   36dfc:	0c14      	lsrs	r4, r2, #16
   36dfe:	0e13      	lsrs	r3, r2, #24
   36e00:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   36e04:	0a15      	lsrs	r5, r2, #8
   36e06:	f88d 2008 	strb.w	r2, [sp, #8]
   36e0a:	f88d 6007 	strb.w	r6, [sp, #7]
   36e0e:	f88d 400a 	strb.w	r4, [sp, #10]
   36e12:	f88d 300b 	strb.w	r3, [sp, #11]
   36e16:	f88d 1004 	strb.w	r1, [sp, #4]
   36e1a:	f88d e005 	strb.w	lr, [sp, #5]
   36e1e:	f88d 7006 	strb.w	r7, [sp, #6]
   36e22:	f88d 5009 	strb.w	r5, [sp, #9]
   36e26:	ab01      	add	r3, sp, #4
   36e28:	4606      	mov	r6, r0
   36e2a:	e893 0003 	ldmia.w	r3, {r0, r1}
   36e2e:	ab04      	add	r3, sp, #16
   36e30:	e883 0003 	stmia.w	r3, {r0, r1}
   36e34:	4a47      	ldr	r2, [pc, #284]	; (36f54 <am_hal_ble_plf_reg_write+0x160>)
   36e36:	4b48      	ldr	r3, [pc, #288]	; (36f58 <am_hal_ble_plf_reg_write+0x164>)
   36e38:	9303      	str	r3, [sp, #12]
   36e3a:	ac03      	add	r4, sp, #12
   36e3c:	2300      	movs	r3, #0
   36e3e:	200c      	movs	r0, #12
   36e40:	2101      	movs	r1, #1
   36e42:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   36e46:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   36e4a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   36e4e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   36e52:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   36e56:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   36e5a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   36e5e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   36e62:	930e      	str	r3, [sp, #56]	; 0x38
   36e64:	930f      	str	r3, [sp, #60]	; 0x3c
   36e66:	940a      	str	r4, [sp, #40]	; 0x28
   36e68:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   36e6c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   36e70:	b12e      	cbz	r6, 36e7e <am_hal_ble_plf_reg_write+0x8a>
   36e72:	6833      	ldr	r3, [r6, #0]
   36e74:	4a39      	ldr	r2, [pc, #228]	; (36f5c <am_hal_ble_plf_reg_write+0x168>)
   36e76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   36e7a:	4293      	cmp	r3, r2
   36e7c:	d064      	beq.n	36f48 <am_hal_ble_plf_reg_write+0x154>
   36e7e:	4d35      	ldr	r5, [pc, #212]	; (36f54 <am_hal_ble_plf_reg_write+0x160>)
   36e80:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   36e84:	f043 0302 	orr.w	r3, r3, #2
   36e88:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   36e8c:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36e90:	0619      	lsls	r1, r3, #24
   36e92:	bf58      	it	pl
   36e94:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   36e98:	d502      	bpl.n	36ea0 <am_hal_ble_plf_reg_write+0xac>
   36e9a:	e008      	b.n	36eae <am_hal_ble_plf_reg_write+0xba>
   36e9c:	3c01      	subs	r4, #1
   36e9e:	d050      	beq.n	36f42 <am_hal_ble_plf_reg_write+0x14e>
   36ea0:	2010      	movs	r0, #16
   36ea2:	f000 fd95 	bl	379d0 <am_hal_flash_delay>
   36ea6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   36eaa:	061a      	lsls	r2, r3, #24
   36eac:	d5f6      	bpl.n	36e9c <am_hal_ble_plf_reg_write+0xa8>
   36eae:	2300      	movs	r3, #0
   36eb0:	2202      	movs	r2, #2
   36eb2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   36eb6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   36eba:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   36ebe:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   36ec2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   36ec6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   36eca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   36ece:	930e      	str	r3, [sp, #56]	; 0x38
   36ed0:	930f      	str	r3, [sp, #60]	; 0x3c
   36ed2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   36ed6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   36eda:	b12e      	cbz	r6, 36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36edc:	6834      	ldr	r4, [r6, #0]
   36ede:	4b1f      	ldr	r3, [pc, #124]	; (36f5c <am_hal_ble_plf_reg_write+0x168>)
   36ee0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   36ee4:	429c      	cmp	r4, r3
   36ee6:	d007      	beq.n	36ef8 <am_hal_ble_plf_reg_write+0x104>
   36ee8:	4b1a      	ldr	r3, [pc, #104]	; (36f54 <am_hal_ble_plf_reg_write+0x160>)
   36eea:	2000      	movs	r0, #0
   36eec:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   36ef0:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   36ef4:	b011      	add	sp, #68	; 0x44
   36ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36ef8:	4b16      	ldr	r3, [pc, #88]	; (36f54 <am_hal_ble_plf_reg_write+0x160>)
   36efa:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   36efe:	061b      	lsls	r3, r3, #24
   36f00:	d5f2      	bpl.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f02:	a90a      	add	r1, sp, #40	; 0x28
   36f04:	4630      	mov	r0, r6
   36f06:	f7fe ff53 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36f0a:	2800      	cmp	r0, #0
   36f0c:	d1ec      	bne.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f0e:	f89d 2001 	ldrb.w	r2, [sp, #1]
   36f12:	f89d 3000 	ldrb.w	r3, [sp]
   36f16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   36f1a:	b29b      	uxth	r3, r3
   36f1c:	aa06      	add	r2, sp, #24
   36f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   36f22:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   36f26:	920a      	str	r2, [sp, #40]	; 0x28
   36f28:	d8de      	bhi.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f2a:	6832      	ldr	r2, [r6, #0]
   36f2c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   36f30:	42a2      	cmp	r2, r4
   36f32:	d1d9      	bne.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f34:	2b00      	cmp	r3, #0
   36f36:	d0d7      	beq.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f38:	a90a      	add	r1, sp, #40	; 0x28
   36f3a:	4630      	mov	r0, r6
   36f3c:	f7fe ff38 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36f40:	e7d2      	b.n	36ee8 <am_hal_ble_plf_reg_write+0xf4>
   36f42:	4807      	ldr	r0, [pc, #28]	; (36f60 <am_hal_ble_plf_reg_write+0x16c>)
   36f44:	b011      	add	sp, #68	; 0x44
   36f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36f48:	a90a      	add	r1, sp, #40	; 0x28
   36f4a:	4630      	mov	r0, r6
   36f4c:	f7fe ff30 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   36f50:	e795      	b.n	36e7e <am_hal_ble_plf_reg_write+0x8a>
   36f52:	bf00      	nop
   36f54:	5000c000 	.word	0x5000c000
   36f58:	08fd0301 	.word	0x08fd0301
   36f5c:	01775230 	.word	0x01775230
   36f60:	08000004 	.word	0x08000004

00036f64 <am_hal_ble_transmitter_modex_set>:
   36f64:	b530      	push	{r4, r5, lr}
   36f66:	b085      	sub	sp, #20
   36f68:	4604      	mov	r4, r0
   36f6a:	2300      	movs	r3, #0
   36f6c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   36f70:	466a      	mov	r2, sp
   36f72:	4927      	ldr	r1, [pc, #156]	; (37010 <am_hal_ble_transmitter_modex_set+0xac>)
   36f74:	9303      	str	r3, [sp, #12]
   36f76:	f7ff fe7d 	bl	36c74 <am_hal_ble_plf_reg_read>
   36f7a:	4620      	mov	r0, r4
   36f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36f80:	4923      	ldr	r1, [pc, #140]	; (37010 <am_hal_ble_transmitter_modex_set+0xac>)
   36f82:	f7ff ff37 	bl	36df4 <am_hal_ble_plf_reg_write>
   36f86:	aa03      	add	r2, sp, #12
   36f88:	4620      	mov	r0, r4
   36f8a:	4922      	ldr	r1, [pc, #136]	; (37014 <am_hal_ble_transmitter_modex_set+0xb0>)
   36f8c:	f7ff fe72 	bl	36c74 <am_hal_ble_plf_reg_read>
   36f90:	9b03      	ldr	r3, [sp, #12]
   36f92:	aa02      	add	r2, sp, #8
   36f94:	f043 0308 	orr.w	r3, r3, #8
   36f98:	4620      	mov	r0, r4
   36f9a:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   36f9e:	9303      	str	r3, [sp, #12]
   36fa0:	f7ff fe68 	bl	36c74 <am_hal_ble_plf_reg_read>
   36fa4:	9b02      	ldr	r3, [sp, #8]
   36fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   36faa:	461a      	mov	r2, r3
   36fac:	4620      	mov	r0, r4
   36fae:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   36fb2:	9302      	str	r3, [sp, #8]
   36fb4:	f7ff ff1e 	bl	36df4 <am_hal_ble_plf_reg_write>
   36fb8:	aa01      	add	r2, sp, #4
   36fba:	4620      	mov	r0, r4
   36fbc:	4916      	ldr	r1, [pc, #88]	; (37018 <am_hal_ble_transmitter_modex_set+0xb4>)
   36fbe:	f7ff fe59 	bl	36c74 <am_hal_ble_plf_reg_read>
   36fc2:	9a01      	ldr	r2, [sp, #4]
   36fc4:	4914      	ldr	r1, [pc, #80]	; (37018 <am_hal_ble_transmitter_modex_set+0xb4>)
   36fc6:	4620      	mov	r0, r4
   36fc8:	f042 0208 	orr.w	r2, r2, #8
   36fcc:	f7ff ff12 	bl	36df4 <am_hal_ble_plf_reg_write>
   36fd0:	006a      	lsls	r2, r5, #1
   36fd2:	f042 0201 	orr.w	r2, r2, #1
   36fd6:	4620      	mov	r0, r4
   36fd8:	4910      	ldr	r1, [pc, #64]	; (3701c <am_hal_ble_transmitter_modex_set+0xb8>)
   36fda:	f7ff ff0b 	bl	36df4 <am_hal_ble_plf_reg_write>
   36fde:	490d      	ldr	r1, [pc, #52]	; (37014 <am_hal_ble_transmitter_modex_set+0xb0>)
   36fe0:	9a03      	ldr	r2, [sp, #12]
   36fe2:	4620      	mov	r0, r4
   36fe4:	f7ff ff06 	bl	36df4 <am_hal_ble_plf_reg_write>
   36fe8:	4b0d      	ldr	r3, [pc, #52]	; (37020 <am_hal_ble_transmitter_modex_set+0xbc>)
   36fea:	68db      	ldr	r3, [r3, #12]
   36fec:	b2db      	uxtb	r3, r3
   36fee:	2b21      	cmp	r3, #33	; 0x21
   36ff0:	bf0c      	ite	eq
   36ff2:	490c      	ldreq	r1, [pc, #48]	; (37024 <am_hal_ble_transmitter_modex_set+0xc0>)
   36ff4:	490c      	ldrne	r1, [pc, #48]	; (37028 <am_hal_ble_transmitter_modex_set+0xc4>)
   36ff6:	462a      	mov	r2, r5
   36ff8:	4620      	mov	r0, r4
   36ffa:	f7ff fefb 	bl	36df4 <am_hal_ble_plf_reg_write>
   36ffe:	4620      	mov	r0, r4
   37000:	9a00      	ldr	r2, [sp, #0]
   37002:	4903      	ldr	r1, [pc, #12]	; (37010 <am_hal_ble_transmitter_modex_set+0xac>)
   37004:	f7ff fef6 	bl	36df4 <am_hal_ble_plf_reg_write>
   37008:	2000      	movs	r0, #0
   3700a:	b005      	add	sp, #20
   3700c:	bd30      	pop	{r4, r5, pc}
   3700e:	bf00      	nop
   37010:	43000004 	.word	0x43000004
   37014:	52000008 	.word	0x52000008
   37018:	45800070 	.word	0x45800070
   3701c:	52000014 	.word	0x52000014
   37020:	40020000 	.word	0x40020000
   37024:	20006874 	.word	0x20006874
   37028:	20006070 	.word	0x20006070

0003702c <am_hal_ble_patch_complete.part.10>:
   3702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37030:	b08c      	sub	sp, #48	; 0x30
   37032:	2300      	movs	r3, #0
   37034:	9308      	str	r3, [sp, #32]
   37036:	2201      	movs	r2, #1
   37038:	2506      	movs	r5, #6
   3703a:	24ee      	movs	r4, #238	; 0xee
   3703c:	21f1      	movs	r1, #241	; 0xf1
   3703e:	9307      	str	r3, [sp, #28]
   37040:	9309      	str	r3, [sp, #36]	; 0x24
   37042:	930a      	str	r3, [sp, #40]	; 0x28
   37044:	930b      	str	r3, [sp, #44]	; 0x2c
   37046:	f88d 3004 	strb.w	r3, [sp, #4]
   3704a:	f88d 3005 	strb.w	r3, [sp, #5]
   3704e:	2302      	movs	r3, #2
   37050:	f8ad 5020 	strh.w	r5, [sp, #32]
   37054:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   37058:	f88d 2000 	strb.w	r2, [sp]
   3705c:	f8cd d018 	str.w	sp, [sp, #24]
   37060:	f88d 4001 	strb.w	r4, [sp, #1]
   37064:	f88d 1002 	strb.w	r1, [sp, #2]
   37068:	f88d 3003 	strb.w	r3, [sp, #3]
   3706c:	4605      	mov	r5, r0
   3706e:	2800      	cmp	r0, #0
   37070:	f000 80e4 	beq.w	3723c <am_hal_ble_patch_complete.part.10+0x210>
   37074:	4e7d      	ldr	r6, [pc, #500]	; (3726c <am_hal_ble_patch_complete.part.10+0x240>)
   37076:	f241 3488 	movw	r4, #5000	; 0x1388
   3707a:	e001      	b.n	37080 <am_hal_ble_patch_complete.part.10+0x54>
   3707c:	3c01      	subs	r4, #1
   3707e:	d00d      	beq.n	3709c <am_hal_ble_patch_complete.part.10+0x70>
   37080:	682b      	ldr	r3, [r5, #0]
   37082:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   37086:	42b3      	cmp	r3, r6
   37088:	d1f8      	bne.n	3707c <am_hal_ble_patch_complete.part.10+0x50>
   3708a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   3708e:	a906      	add	r1, sp, #24
   37090:	4628      	mov	r0, r5
   37092:	b11b      	cbz	r3, 3709c <am_hal_ble_patch_complete.part.10+0x70>
   37094:	f7fe fe8c 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   37098:	2800      	cmp	r0, #0
   3709a:	d1ef      	bne.n	3707c <am_hal_ble_patch_complete.part.10+0x50>
   3709c:	4b74      	ldr	r3, [pc, #464]	; (37270 <am_hal_ble_patch_complete.part.10+0x244>)
   3709e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   370a2:	061b      	lsls	r3, r3, #24
   370a4:	f100 80d1 	bmi.w	3724a <am_hal_ble_patch_complete.part.10+0x21e>
   370a8:	4c72      	ldr	r4, [pc, #456]	; (37274 <am_hal_ble_patch_complete.part.10+0x248>)
   370aa:	4e71      	ldr	r6, [pc, #452]	; (37270 <am_hal_ble_patch_complete.part.10+0x244>)
   370ac:	e001      	b.n	370b2 <am_hal_ble_patch_complete.part.10+0x86>
   370ae:	3c01      	subs	r4, #1
   370b0:	d019      	beq.n	370e6 <am_hal_ble_patch_complete.part.10+0xba>
   370b2:	2010      	movs	r0, #16
   370b4:	f000 fc8c 	bl	379d0 <am_hal_flash_delay>
   370b8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   370bc:	061f      	lsls	r7, r3, #24
   370be:	d5f6      	bpl.n	370ae <am_hal_ble_patch_complete.part.10+0x82>
   370c0:	2302      	movs	r3, #2
   370c2:	af03      	add	r7, sp, #12
   370c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   370c8:	f8ad 3020 	strh.w	r3, [sp, #32]
   370cc:	9706      	str	r7, [sp, #24]
   370ce:	b12d      	cbz	r5, 370dc <am_hal_ble_patch_complete.part.10+0xb0>
   370d0:	682e      	ldr	r6, [r5, #0]
   370d2:	4b66      	ldr	r3, [pc, #408]	; (3726c <am_hal_ble_patch_complete.part.10+0x240>)
   370d4:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   370d8:	429e      	cmp	r6, r3
   370da:	d009      	beq.n	370f0 <am_hal_ble_patch_complete.part.10+0xc4>
   370dc:	2402      	movs	r4, #2
   370de:	4620      	mov	r0, r4
   370e0:	b00c      	add	sp, #48	; 0x30
   370e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   370e6:	4c64      	ldr	r4, [pc, #400]	; (37278 <am_hal_ble_patch_complete.part.10+0x24c>)
   370e8:	4620      	mov	r0, r4
   370ea:	b00c      	add	sp, #48	; 0x30
   370ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   370f0:	a906      	add	r1, sp, #24
   370f2:	4628      	mov	r0, r5
   370f4:	f7fe fe5c 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   370f8:	4604      	mov	r4, r0
   370fa:	2800      	cmp	r0, #0
   370fc:	d1ef      	bne.n	370de <am_hal_ble_patch_complete.part.10+0xb2>
   370fe:	f89d 100d 	ldrb.w	r1, [sp, #13]
   37102:	29ee      	cmp	r1, #238	; 0xee
   37104:	d01a      	beq.n	3713c <am_hal_ble_patch_complete.part.10+0x110>
   37106:	f89d 300c 	ldrb.w	r3, [sp, #12]
   3710a:	682a      	ldr	r2, [r5, #0]
   3710c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   37110:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   37114:	b29b      	uxth	r3, r3
   37116:	42b2      	cmp	r2, r6
   37118:	f8ad 3020 	strh.w	r3, [sp, #32]
   3711c:	d1de      	bne.n	370dc <am_hal_ble_patch_complete.part.10+0xb0>
   3711e:	b133      	cbz	r3, 3712e <am_hal_ble_patch_complete.part.10+0x102>
   37120:	a906      	add	r1, sp, #24
   37122:	4628      	mov	r0, r5
   37124:	f7fe fe44 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   37128:	b108      	cbz	r0, 3712e <am_hal_ble_patch_complete.part.10+0x102>
   3712a:	4604      	mov	r4, r0
   3712c:	e7d7      	b.n	370de <am_hal_ble_patch_complete.part.10+0xb2>
   3712e:	2301      	movs	r3, #1
   37130:	4620      	mov	r0, r4
   37132:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   37136:	b00c      	add	sp, #48	; 0x30
   37138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3713c:	682b      	ldr	r3, [r5, #0]
   3713e:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   37142:	2203      	movs	r2, #3
   37144:	45b0      	cmp	r8, r6
   37146:	f8ad 2020 	strh.w	r2, [sp, #32]
   3714a:	d1c7      	bne.n	370dc <am_hal_ble_patch_complete.part.10+0xb0>
   3714c:	a906      	add	r1, sp, #24
   3714e:	4628      	mov	r0, r5
   37150:	f7fe fe2e 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   37154:	4604      	mov	r4, r0
   37156:	2800      	cmp	r0, #0
   37158:	d1c1      	bne.n	370de <am_hal_ble_patch_complete.part.10+0xb2>
   3715a:	2301      	movs	r3, #1
   3715c:	2005      	movs	r0, #5
   3715e:	2104      	movs	r1, #4
   37160:	22fd      	movs	r2, #253	; 0xfd
   37162:	9408      	str	r4, [sp, #32]
   37164:	9407      	str	r4, [sp, #28]
   37166:	9409      	str	r4, [sp, #36]	; 0x24
   37168:	940a      	str	r4, [sp, #40]	; 0x28
   3716a:	940b      	str	r4, [sp, #44]	; 0x2c
   3716c:	f8cd d018 	str.w	sp, [sp, #24]
   37170:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   37174:	f88d 3000 	strb.w	r3, [sp]
   37178:	f88d 3003 	strb.w	r3, [sp, #3]
   3717c:	f88d 3004 	strb.w	r3, [sp, #4]
   37180:	f8ad 0020 	strh.w	r0, [sp, #32]
   37184:	f88d 1001 	strb.w	r1, [sp, #1]
   37188:	f88d 2002 	strb.w	r2, [sp, #2]
   3718c:	f241 3688 	movw	r6, #5000	; 0x1388
   37190:	e002      	b.n	37198 <am_hal_ble_patch_complete.part.10+0x16c>
   37192:	2402      	movs	r4, #2
   37194:	3e01      	subs	r6, #1
   37196:	d0a2      	beq.n	370de <am_hal_ble_patch_complete.part.10+0xb2>
   37198:	682b      	ldr	r3, [r5, #0]
   3719a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   3719e:	4543      	cmp	r3, r8
   371a0:	d1f7      	bne.n	37192 <am_hal_ble_patch_complete.part.10+0x166>
   371a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   371a6:	a906      	add	r1, sp, #24
   371a8:	4628      	mov	r0, r5
   371aa:	b123      	cbz	r3, 371b6 <am_hal_ble_patch_complete.part.10+0x18a>
   371ac:	f7fe fe00 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   371b0:	4604      	mov	r4, r0
   371b2:	2800      	cmp	r0, #0
   371b4:	d1ee      	bne.n	37194 <am_hal_ble_patch_complete.part.10+0x168>
   371b6:	4e2e      	ldr	r6, [pc, #184]	; (37270 <am_hal_ble_patch_complete.part.10+0x244>)
   371b8:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   371bc:	0619      	lsls	r1, r3, #24
   371be:	d40a      	bmi.n	371d6 <am_hal_ble_patch_complete.part.10+0x1aa>
   371c0:	4c2c      	ldr	r4, [pc, #176]	; (37274 <am_hal_ble_patch_complete.part.10+0x248>)
   371c2:	e001      	b.n	371c8 <am_hal_ble_patch_complete.part.10+0x19c>
   371c4:	3c01      	subs	r4, #1
   371c6:	d08e      	beq.n	370e6 <am_hal_ble_patch_complete.part.10+0xba>
   371c8:	2010      	movs	r0, #16
   371ca:	f000 fc01 	bl	379d0 <am_hal_flash_delay>
   371ce:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   371d2:	0618      	lsls	r0, r3, #24
   371d4:	d5f6      	bpl.n	371c4 <am_hal_ble_patch_complete.part.10+0x198>
   371d6:	682e      	ldr	r6, [r5, #0]
   371d8:	4b24      	ldr	r3, [pc, #144]	; (3726c <am_hal_ble_patch_complete.part.10+0x240>)
   371da:	9706      	str	r7, [sp, #24]
   371dc:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   371e0:	2702      	movs	r7, #2
   371e2:	2209      	movs	r2, #9
   371e4:	429e      	cmp	r6, r3
   371e6:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   371ea:	f8ad 2020 	strh.w	r2, [sp, #32]
   371ee:	f47f af75 	bne.w	370dc <am_hal_ble_patch_complete.part.10+0xb0>
   371f2:	a906      	add	r1, sp, #24
   371f4:	4628      	mov	r0, r5
   371f6:	f7fe fddb 	bl	35db0 <am_hal_ble_blocking_transfer.part.7>
   371fa:	4604      	mov	r4, r0
   371fc:	2800      	cmp	r0, #0
   371fe:	f47f af6e 	bne.w	370de <am_hal_ble_patch_complete.part.10+0xb2>
   37202:	682b      	ldr	r3, [r5, #0]
   37204:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   37208:	42b3      	cmp	r3, r6
   3720a:	d026      	beq.n	3725a <am_hal_ble_patch_complete.part.10+0x22e>
   3720c:	2301      	movs	r3, #1
   3720e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   37212:	481a      	ldr	r0, [pc, #104]	; (3727c <am_hal_ble_patch_complete.part.10+0x250>)
   37214:	f000 fbdc 	bl	379d0 <am_hal_flash_delay>
   37218:	4a19      	ldr	r2, [pc, #100]	; (37280 <am_hal_ble_patch_complete.part.10+0x254>)
   3721a:	4b1a      	ldr	r3, [pc, #104]	; (37284 <am_hal_ble_patch_complete.part.10+0x258>)
   3721c:	6811      	ldr	r1, [r2, #0]
   3721e:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   37222:	429a      	cmp	r2, r3
   37224:	f47f af5b 	bne.w	370de <am_hal_ble_patch_complete.part.10+0xb2>
   37228:	b2c9      	uxtb	r1, r1
   3722a:	f1a1 0320 	sub.w	r3, r1, #32
   3722e:	2b20      	cmp	r3, #32
   37230:	f63f af55 	bhi.w	370de <am_hal_ble_patch_complete.part.10+0xb2>
   37234:	4628      	mov	r0, r5
   37236:	f7ff fe95 	bl	36f64 <am_hal_ble_transmitter_modex_set>
   3723a:	e750      	b.n	370de <am_hal_ble_patch_complete.part.10+0xb2>
   3723c:	4b0c      	ldr	r3, [pc, #48]	; (37270 <am_hal_ble_patch_complete.part.10+0x244>)
   3723e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   37242:	061a      	lsls	r2, r3, #24
   37244:	f57f af30 	bpl.w	370a8 <am_hal_ble_patch_complete.part.10+0x7c>
   37248:	e748      	b.n	370dc <am_hal_ble_patch_complete.part.10+0xb0>
   3724a:	2302      	movs	r3, #2
   3724c:	af03      	add	r7, sp, #12
   3724e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   37252:	f8ad 3020 	strh.w	r3, [sp, #32]
   37256:	9706      	str	r7, [sp, #24]
   37258:	e73a      	b.n	370d0 <am_hal_ble_patch_complete.part.10+0xa4>
   3725a:	4b05      	ldr	r3, [pc, #20]	; (37270 <am_hal_ble_patch_complete.part.10+0x244>)
   3725c:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   37260:	f367 0283 	bfi	r2, r7, #2, #2
   37264:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   37268:	e7d0      	b.n	3720c <am_hal_ble_patch_complete.part.10+0x1e0>
   3726a:	bf00      	nop
   3726c:	01775230 	.word	0x01775230
   37270:	5000c000 	.word	0x5000c000
   37274:	000186a0 	.word	0x000186a0
   37278:	08000004 	.word	0x08000004
   3727c:	007a1200 	.word	0x007a1200
   37280:	50023808 	.word	0x50023808
   37284:	18240600 	.word	0x18240600

00037288 <am_hal_ble_boot>:
   37288:	b128      	cbz	r0, 37296 <am_hal_ble_boot+0xe>
   3728a:	6803      	ldr	r3, [r0, #0]
   3728c:	4a59      	ldr	r2, [pc, #356]	; (373f4 <am_hal_ble_boot+0x16c>)
   3728e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   37292:	4293      	cmp	r3, r2
   37294:	d001      	beq.n	3729a <am_hal_ble_boot+0x12>
   37296:	2002      	movs	r0, #2
   37298:	4770      	bx	lr
   3729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3729e:	7a03      	ldrb	r3, [r0, #8]
   372a0:	b082      	sub	sp, #8
   372a2:	4604      	mov	r4, r0
   372a4:	2b00      	cmp	r3, #0
   372a6:	d065      	beq.n	37374 <am_hal_ble_boot+0xec>
   372a8:	4a53      	ldr	r2, [pc, #332]	; (373f8 <am_hal_ble_boot+0x170>)
   372aa:	68d3      	ldr	r3, [r2, #12]
   372ac:	b2db      	uxtb	r3, r3
   372ae:	2b11      	cmp	r3, #17
   372b0:	d076      	beq.n	373a0 <am_hal_ble_boot+0x118>
   372b2:	68d3      	ldr	r3, [r2, #12]
   372b4:	b2db      	uxtb	r3, r3
   372b6:	2b12      	cmp	r3, #18
   372b8:	d072      	beq.n	373a0 <am_hal_ble_boot+0x118>
   372ba:	4b4f      	ldr	r3, [pc, #316]	; (373f8 <am_hal_ble_boot+0x170>)
   372bc:	68db      	ldr	r3, [r3, #12]
   372be:	b2db      	uxtb	r3, r3
   372c0:	2b21      	cmp	r3, #33	; 0x21
   372c2:	f000 808d 	beq.w	373e0 <am_hal_ble_boot+0x158>
   372c6:	4b4d      	ldr	r3, [pc, #308]	; (373fc <am_hal_ble_boot+0x174>)
   372c8:	68da      	ldr	r2, [r3, #12]
   372ca:	4b4d      	ldr	r3, [pc, #308]	; (37400 <am_hal_ble_boot+0x178>)
   372cc:	681b      	ldr	r3, [r3, #0]
   372ce:	ba1b      	rev	r3, r3
   372d0:	1c5d      	adds	r5, r3, #1
   372d2:	bf18      	it	ne
   372d4:	6093      	strne	r3, [r2, #8]
   372d6:	4b4b      	ldr	r3, [pc, #300]	; (37404 <am_hal_ble_boot+0x17c>)
   372d8:	681b      	ldr	r3, [r3, #0]
   372da:	1c58      	adds	r0, r3, #1
   372dc:	d009      	beq.n	372f2 <am_hal_ble_boot+0x6a>
   372de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   372e2:	ba1b      	rev	r3, r3
   372e4:	1c59      	adds	r1, r3, #1
   372e6:	d004      	beq.n	372f2 <am_hal_ble_boot+0x6a>
   372e8:	68d1      	ldr	r1, [r2, #12]
   372ea:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   372ee:	430b      	orrs	r3, r1
   372f0:	60d3      	str	r3, [r2, #12]
   372f2:	4a41      	ldr	r2, [pc, #260]	; (373f8 <am_hal_ble_boot+0x170>)
   372f4:	68d3      	ldr	r3, [r2, #12]
   372f6:	b2db      	uxtb	r3, r3
   372f8:	2b11      	cmp	r3, #17
   372fa:	d031      	beq.n	37360 <am_hal_ble_boot+0xd8>
   372fc:	68d3      	ldr	r3, [r2, #12]
   372fe:	b2db      	uxtb	r3, r3
   37300:	2b12      	cmp	r3, #18
   37302:	d02d      	beq.n	37360 <am_hal_ble_boot+0xd8>
   37304:	4a40      	ldr	r2, [pc, #256]	; (37408 <am_hal_ble_boot+0x180>)
   37306:	4b41      	ldr	r3, [pc, #260]	; (3740c <am_hal_ble_boot+0x184>)
   37308:	6816      	ldr	r6, [r2, #0]
   3730a:	681b      	ldr	r3, [r3, #0]
   3730c:	b1f6      	cbz	r6, 3734c <am_hal_ble_boot+0xc4>
   3730e:	4d40      	ldr	r5, [pc, #256]	; (37410 <am_hal_ble_boot+0x188>)
   37310:	f1a3 0804 	sub.w	r8, r3, #4
   37314:	2700      	movs	r7, #0
   37316:	f858 1f04 	ldr.w	r1, [r8, #4]!
   3731a:	684b      	ldr	r3, [r1, #4]
   3731c:	68c8      	ldr	r0, [r1, #12]
   3731e:	b16b      	cbz	r3, 3733c <am_hal_ble_boot+0xb4>
   37320:	eb00 0e03 	add.w	lr, r0, r3
   37324:	2300      	movs	r3, #0
   37326:	f810 2b01 	ldrb.w	r2, [r0], #1
   3732a:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   3732e:	4570      	cmp	r0, lr
   37330:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   37334:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   37338:	b29b      	uxth	r3, r3
   3733a:	d1f4      	bne.n	37326 <am_hal_ble_boot+0x9e>
   3733c:	608b      	str	r3, [r1, #8]
   3733e:	4620      	mov	r0, r4
   37340:	f7ff faa8 	bl	36894 <am_hal_ble_patch_apply>
   37344:	b948      	cbnz	r0, 3735a <am_hal_ble_boot+0xd2>
   37346:	3701      	adds	r7, #1
   37348:	42b7      	cmp	r7, r6
   3734a:	d1e4      	bne.n	37316 <am_hal_ble_boot+0x8e>
   3734c:	6823      	ldr	r3, [r4, #0]
   3734e:	4a29      	ldr	r2, [pc, #164]	; (373f4 <am_hal_ble_boot+0x16c>)
   37350:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   37354:	4293      	cmp	r3, r2
   37356:	d008      	beq.n	3736a <am_hal_ble_boot+0xe2>
   37358:	2002      	movs	r0, #2
   3735a:	b002      	add	sp, #8
   3735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37360:	4a2c      	ldr	r2, [pc, #176]	; (37414 <am_hal_ble_boot+0x18c>)
   37362:	4b2d      	ldr	r3, [pc, #180]	; (37418 <am_hal_ble_boot+0x190>)
   37364:	6816      	ldr	r6, [r2, #0]
   37366:	681b      	ldr	r3, [r3, #0]
   37368:	e7d0      	b.n	3730c <am_hal_ble_boot+0x84>
   3736a:	4620      	mov	r0, r4
   3736c:	f7ff fe5e 	bl	3702c <am_hal_ble_patch_complete.part.10>
   37370:	2800      	cmp	r0, #0
   37372:	d1f2      	bne.n	3735a <am_hal_ble_boot+0xd2>
   37374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37378:	4b1f      	ldr	r3, [pc, #124]	; (373f8 <am_hal_ble_boot+0x170>)
   3737a:	9201      	str	r2, [sp, #4]
   3737c:	68db      	ldr	r3, [r3, #12]
   3737e:	b2db      	uxtb	r3, r3
   37380:	2b21      	cmp	r3, #33	; 0x21
   37382:	d030      	beq.n	373e6 <am_hal_ble_boot+0x15e>
   37384:	4620      	mov	r0, r4
   37386:	aa01      	add	r2, sp, #4
   37388:	4924      	ldr	r1, [pc, #144]	; (3741c <am_hal_ble_boot+0x194>)
   3738a:	f7ff fc73 	bl	36c74 <am_hal_ble_plf_reg_read>
   3738e:	9b01      	ldr	r3, [sp, #4]
   37390:	4823      	ldr	r0, [pc, #140]	; (37420 <am_hal_ble_boot+0x198>)
   37392:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   37396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   3739a:	bf98      	it	ls
   3739c:	2000      	movls	r0, #0
   3739e:	e7dc      	b.n	3735a <am_hal_ble_boot+0xd2>
   373a0:	4b20      	ldr	r3, [pc, #128]	; (37424 <am_hal_ble_boot+0x19c>)
   373a2:	681b      	ldr	r3, [r3, #0]
   373a4:	6819      	ldr	r1, [r3, #0]
   373a6:	684b      	ldr	r3, [r1, #4]
   373a8:	68c8      	ldr	r0, [r1, #12]
   373aa:	b16b      	cbz	r3, 373c8 <am_hal_ble_boot+0x140>
   373ac:	4e18      	ldr	r6, [pc, #96]	; (37410 <am_hal_ble_boot+0x188>)
   373ae:	18c5      	adds	r5, r0, r3
   373b0:	2300      	movs	r3, #0
   373b2:	f810 2b01 	ldrb.w	r2, [r0], #1
   373b6:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   373ba:	4285      	cmp	r5, r0
   373bc:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   373c0:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   373c4:	b29b      	uxth	r3, r3
   373c6:	d1f4      	bne.n	373b2 <am_hal_ble_boot+0x12a>
   373c8:	608b      	str	r3, [r1, #8]
   373ca:	4620      	mov	r0, r4
   373cc:	f7ff fa62 	bl	36894 <am_hal_ble_patch_apply>
   373d0:	2800      	cmp	r0, #0
   373d2:	d1c2      	bne.n	3735a <am_hal_ble_boot+0xd2>
   373d4:	4620      	mov	r0, r4
   373d6:	f7ff f921 	bl	3661c <am_hal_ble_patch_copy_end_apply>
   373da:	2800      	cmp	r0, #0
   373dc:	d1bd      	bne.n	3735a <am_hal_ble_boot+0xd2>
   373de:	e76c      	b.n	372ba <am_hal_ble_boot+0x32>
   373e0:	4b11      	ldr	r3, [pc, #68]	; (37428 <am_hal_ble_boot+0x1a0>)
   373e2:	68da      	ldr	r2, [r3, #12]
   373e4:	e771      	b.n	372ca <am_hal_ble_boot+0x42>
   373e6:	4620      	mov	r0, r4
   373e8:	aa01      	add	r2, sp, #4
   373ea:	4910      	ldr	r1, [pc, #64]	; (3742c <am_hal_ble_boot+0x1a4>)
   373ec:	f7ff fc42 	bl	36c74 <am_hal_ble_plf_reg_read>
   373f0:	e7cd      	b.n	3738e <am_hal_ble_boot+0x106>
   373f2:	bf00      	nop
   373f4:	01775230 	.word	0x01775230
   373f8:	40020000 	.word	0x40020000
   373fc:	10018194 	.word	0x10018194
   37400:	50023800 	.word	0x50023800
   37404:	50023804 	.word	0x50023804
   37408:	0004415c 	.word	0x0004415c
   3740c:	10018c40 	.word	0x10018c40
   37410:	0004290c 	.word	0x0004290c
   37414:	00043844 	.word	0x00043844
   37418:	100182b8 	.word	0x100182b8
   3741c:	20006054 	.word	0x20006054
   37420:	0800000b 	.word	0x0800000b
   37424:	10018180 	.word	0x10018180
   37428:	10018c44 	.word	0x10018c44
   3742c:	20006858 	.word	0x20006858

00037430 <am_hal_ble_tx_power_set>:
   37430:	b570      	push	{r4, r5, r6, lr}
   37432:	b082      	sub	sp, #8
   37434:	4605      	mov	r5, r0
   37436:	2300      	movs	r3, #0
   37438:	460e      	mov	r6, r1
   3743a:	466a      	mov	r2, sp
   3743c:	040c      	lsls	r4, r1, #16
   3743e:	4919      	ldr	r1, [pc, #100]	; (374a4 <am_hal_ble_tx_power_set+0x74>)
   37440:	9301      	str	r3, [sp, #4]
   37442:	f7ff fc17 	bl	36c74 <am_hal_ble_plf_reg_read>
   37446:	4917      	ldr	r1, [pc, #92]	; (374a4 <am_hal_ble_tx_power_set+0x74>)
   37448:	4628      	mov	r0, r5
   3744a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3744e:	f7ff fcd1 	bl	36df4 <am_hal_ble_plf_reg_write>
   37452:	4b15      	ldr	r3, [pc, #84]	; (374a8 <am_hal_ble_tx_power_set+0x78>)
   37454:	68db      	ldr	r3, [r3, #12]
   37456:	b2db      	uxtb	r3, r3
   37458:	2b21      	cmp	r3, #33	; 0x21
   3745a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   3745e:	bf0c      	ite	eq
   37460:	4912      	ldreq	r1, [pc, #72]	; (374ac <am_hal_ble_tx_power_set+0x7c>)
   37462:	4913      	ldrne	r1, [pc, #76]	; (374b0 <am_hal_ble_tx_power_set+0x80>)
   37464:	aa01      	add	r2, sp, #4
   37466:	f044 0408 	orr.w	r4, r4, #8
   3746a:	4628      	mov	r0, r5
   3746c:	f7ff fc02 	bl	36c74 <am_hal_ble_plf_reg_read>
   37470:	4910      	ldr	r1, [pc, #64]	; (374b4 <am_hal_ble_tx_power_set+0x84>)
   37472:	f88d 6004 	strb.w	r6, [sp, #4]
   37476:	4622      	mov	r2, r4
   37478:	4628      	mov	r0, r5
   3747a:	f7ff fcbb 	bl	36df4 <am_hal_ble_plf_reg_write>
   3747e:	4b0a      	ldr	r3, [pc, #40]	; (374a8 <am_hal_ble_tx_power_set+0x78>)
   37480:	9a01      	ldr	r2, [sp, #4]
   37482:	68db      	ldr	r3, [r3, #12]
   37484:	b2db      	uxtb	r3, r3
   37486:	2b21      	cmp	r3, #33	; 0x21
   37488:	bf0c      	ite	eq
   3748a:	4908      	ldreq	r1, [pc, #32]	; (374ac <am_hal_ble_tx_power_set+0x7c>)
   3748c:	4908      	ldrne	r1, [pc, #32]	; (374b0 <am_hal_ble_tx_power_set+0x80>)
   3748e:	4628      	mov	r0, r5
   37490:	f7ff fcb0 	bl	36df4 <am_hal_ble_plf_reg_write>
   37494:	4628      	mov	r0, r5
   37496:	9a00      	ldr	r2, [sp, #0]
   37498:	4902      	ldr	r1, [pc, #8]	; (374a4 <am_hal_ble_tx_power_set+0x74>)
   3749a:	f7ff fcab 	bl	36df4 <am_hal_ble_plf_reg_write>
   3749e:	2000      	movs	r0, #0
   374a0:	b002      	add	sp, #8
   374a2:	bd70      	pop	{r4, r5, r6, pc}
   374a4:	43000004 	.word	0x43000004
   374a8:	40020000 	.word	0x40020000
   374ac:	20006838 	.word	0x20006838
   374b0:	20006038 	.word	0x20006038
   374b4:	52400018 	.word	0x52400018

000374b8 <am_hal_cachectrl_config>:
   374b8:	b530      	push	{r4, r5, lr}
   374ba:	b083      	sub	sp, #12
   374bc:	4605      	mov	r5, r0
   374be:	f000 fc8d 	bl	37ddc <am_hal_interrupt_master_disable>
   374c2:	4c0f      	ldr	r4, [pc, #60]	; (37500 <am_hal_cachectrl_config+0x48>)
   374c4:	9001      	str	r0, [sp, #4]
   374c6:	6823      	ldr	r3, [r4, #0]
   374c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   374cc:	6023      	str	r3, [r4, #0]
   374ce:	9801      	ldr	r0, [sp, #4]
   374d0:	f000 fc88 	bl	37de4 <am_hal_interrupt_master_set>
   374d4:	78ab      	ldrb	r3, [r5, #2]
   374d6:	782a      	ldrb	r2, [r5, #0]
   374d8:	7869      	ldrb	r1, [r5, #1]
   374da:	005b      	lsls	r3, r3, #1
   374dc:	0112      	lsls	r2, r2, #4
   374de:	b2d2      	uxtb	r2, r2
   374e0:	f003 0302 	and.w	r3, r3, #2
   374e4:	4313      	orrs	r3, r2
   374e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   374ea:	020a      	lsls	r2, r1, #8
   374ec:	f402 7240 	and.w	r2, r2, #768	; 0x300
   374f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   374f4:	4313      	orrs	r3, r2
   374f6:	2000      	movs	r0, #0
   374f8:	6023      	str	r3, [r4, #0]
   374fa:	b003      	add	sp, #12
   374fc:	bd30      	pop	{r4, r5, pc}
   374fe:	bf00      	nop
   37500:	40018000 	.word	0x40018000

00037504 <am_hal_cachectrl_enable>:
   37504:	4a03      	ldr	r2, [pc, #12]	; (37514 <am_hal_cachectrl_enable+0x10>)
   37506:	6813      	ldr	r3, [r2, #0]
   37508:	f043 0301 	orr.w	r3, r3, #1
   3750c:	6013      	str	r3, [r2, #0]
   3750e:	2000      	movs	r0, #0
   37510:	4770      	bx	lr
   37512:	bf00      	nop
   37514:	40018000 	.word	0x40018000

00037518 <am_hal_cachectrl_control>:
   37518:	b510      	push	{r4, lr}
   3751a:	3801      	subs	r0, #1
   3751c:	b08e      	sub	sp, #56	; 0x38
   3751e:	2810      	cmp	r0, #16
   37520:	f200 8143 	bhi.w	377aa <am_hal_cachectrl_control+0x292>
   37524:	e8df f010 	tbh	[pc, r0, lsl #1]
   37528:	01380136 	.word	0x01380136
   3752c:	0011013e 	.word	0x0011013e
   37530:	001a0018 	.word	0x001a0018
   37534:	001f001c 	.word	0x001f001c
   37538:	00300022 	.word	0x00300022
   3753c:	0074003c 	.word	0x0074003c
   37540:	00e400ac 	.word	0x00e400ac
   37544:	011a00ff 	.word	0x011a00ff
   37548:	0120      	.short	0x0120
   3754a:	f44f 7208 	mov.w	r2, #544	; 0x220
   3754e:	4ba8      	ldr	r3, [pc, #672]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   37550:	2000      	movs	r0, #0
   37552:	609a      	str	r2, [r3, #8]
   37554:	b00e      	add	sp, #56	; 0x38
   37556:	bd10      	pop	{r4, pc}
   37558:	2240      	movs	r2, #64	; 0x40
   3755a:	e7f8      	b.n	3754e <am_hal_cachectrl_control+0x36>
   3755c:	2220      	movs	r2, #32
   3755e:	e7f6      	b.n	3754e <am_hal_cachectrl_control+0x36>
   37560:	f44f 6280 	mov.w	r2, #1024	; 0x400
   37564:	e7f3      	b.n	3754e <am_hal_cachectrl_control+0x36>
   37566:	f44f 7200 	mov.w	r2, #512	; 0x200
   3756a:	e7f0      	b.n	3754e <am_hal_cachectrl_control+0x36>
   3756c:	f000 fc36 	bl	37ddc <am_hal_interrupt_master_disable>
   37570:	4a9f      	ldr	r2, [pc, #636]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   37572:	9000      	str	r0, [sp, #0]
   37574:	6813      	ldr	r3, [r2, #0]
   37576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3757a:	6013      	str	r3, [r2, #0]
   3757c:	9800      	ldr	r0, [sp, #0]
   3757e:	f000 fc31 	bl	37de4 <am_hal_interrupt_master_set>
   37582:	2000      	movs	r0, #0
   37584:	b00e      	add	sp, #56	; 0x38
   37586:	bd10      	pop	{r4, pc}
   37588:	f000 fc28 	bl	37ddc <am_hal_interrupt_master_disable>
   3758c:	4a98      	ldr	r2, [pc, #608]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   3758e:	9001      	str	r0, [sp, #4]
   37590:	6813      	ldr	r3, [r2, #0]
   37592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37596:	6013      	str	r3, [r2, #0]
   37598:	9801      	ldr	r0, [sp, #4]
   3759a:	f000 fc23 	bl	37de4 <am_hal_interrupt_master_set>
   3759e:	e7f0      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   375a0:	f000 fc1c 	bl	37ddc <am_hal_interrupt_master_disable>
   375a4:	4603      	mov	r3, r0
   375a6:	4893      	ldr	r0, [pc, #588]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   375a8:	9302      	str	r3, [sp, #8]
   375aa:	f000 fa5b 	bl	37a64 <am_hal_flash_load_ui32>
   375ae:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   375b2:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   375b6:	488f      	ldr	r0, [pc, #572]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   375b8:	f000 fa58 	bl	37a6c <am_hal_flash_store_ui32>
   375bc:	9802      	ldr	r0, [sp, #8]
   375be:	f000 fc11 	bl	37de4 <am_hal_interrupt_master_set>
   375c2:	f000 fc0b 	bl	37ddc <am_hal_interrupt_master_disable>
   375c6:	4603      	mov	r3, r0
   375c8:	488a      	ldr	r0, [pc, #552]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   375ca:	9303      	str	r3, [sp, #12]
   375cc:	f000 fa4a 	bl	37a64 <am_hal_flash_load_ui32>
   375d0:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   375d4:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   375d8:	4886      	ldr	r0, [pc, #536]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   375da:	f000 fa47 	bl	37a6c <am_hal_flash_store_ui32>
   375de:	9803      	ldr	r0, [sp, #12]
   375e0:	f000 fc00 	bl	37de4 <am_hal_interrupt_master_set>
   375e4:	f000 fbfa 	bl	37ddc <am_hal_interrupt_master_disable>
   375e8:	4603      	mov	r3, r0
   375ea:	4882      	ldr	r0, [pc, #520]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   375ec:	9304      	str	r3, [sp, #16]
   375ee:	f000 fa39 	bl	37a64 <am_hal_flash_load_ui32>
   375f2:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   375f6:	f021 010f 	bic.w	r1, r1, #15
   375fa:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   375fe:	f041 0103 	orr.w	r1, r1, #3
   37602:	487c      	ldr	r0, [pc, #496]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37604:	f000 fa32 	bl	37a6c <am_hal_flash_store_ui32>
   37608:	9804      	ldr	r0, [sp, #16]
   3760a:	f000 fbeb 	bl	37de4 <am_hal_interrupt_master_set>
   3760e:	e7b8      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   37610:	f000 fbe4 	bl	37ddc <am_hal_interrupt_master_disable>
   37614:	4603      	mov	r3, r0
   37616:	4877      	ldr	r0, [pc, #476]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37618:	9305      	str	r3, [sp, #20]
   3761a:	f000 fa23 	bl	37a64 <am_hal_flash_load_ui32>
   3761e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   37622:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   37626:	4873      	ldr	r0, [pc, #460]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37628:	f000 fa20 	bl	37a6c <am_hal_flash_store_ui32>
   3762c:	9805      	ldr	r0, [sp, #20]
   3762e:	f000 fbd9 	bl	37de4 <am_hal_interrupt_master_set>
   37632:	f000 fbd3 	bl	37ddc <am_hal_interrupt_master_disable>
   37636:	4603      	mov	r3, r0
   37638:	486e      	ldr	r0, [pc, #440]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   3763a:	9306      	str	r3, [sp, #24]
   3763c:	f000 fa12 	bl	37a64 <am_hal_flash_load_ui32>
   37640:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   37644:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   37648:	486a      	ldr	r0, [pc, #424]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   3764a:	f000 fa0f 	bl	37a6c <am_hal_flash_store_ui32>
   3764e:	9806      	ldr	r0, [sp, #24]
   37650:	f000 fbc8 	bl	37de4 <am_hal_interrupt_master_set>
   37654:	f000 fbc2 	bl	37ddc <am_hal_interrupt_master_disable>
   37658:	4603      	mov	r3, r0
   3765a:	4866      	ldr	r0, [pc, #408]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   3765c:	9307      	str	r3, [sp, #28]
   3765e:	f000 fa01 	bl	37a64 <am_hal_flash_load_ui32>
   37662:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   37666:	f021 010f 	bic.w	r1, r1, #15
   3766a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   3766e:	f041 0101 	orr.w	r1, r1, #1
   37672:	4860      	ldr	r0, [pc, #384]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37674:	f000 f9fa 	bl	37a6c <am_hal_flash_store_ui32>
   37678:	9807      	ldr	r0, [sp, #28]
   3767a:	f000 fbb3 	bl	37de4 <am_hal_interrupt_master_set>
   3767e:	e780      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   37680:	f000 fbac 	bl	37ddc <am_hal_interrupt_master_disable>
   37684:	4603      	mov	r3, r0
   37686:	485b      	ldr	r0, [pc, #364]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37688:	9308      	str	r3, [sp, #32]
   3768a:	f000 f9eb 	bl	37a64 <am_hal_flash_load_ui32>
   3768e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   37692:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   37696:	4857      	ldr	r0, [pc, #348]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37698:	f000 f9e8 	bl	37a6c <am_hal_flash_store_ui32>
   3769c:	9808      	ldr	r0, [sp, #32]
   3769e:	f000 fba1 	bl	37de4 <am_hal_interrupt_master_set>
   376a2:	f000 fb9b 	bl	37ddc <am_hal_interrupt_master_disable>
   376a6:	4603      	mov	r3, r0
   376a8:	4852      	ldr	r0, [pc, #328]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   376aa:	9309      	str	r3, [sp, #36]	; 0x24
   376ac:	f000 f9da 	bl	37a64 <am_hal_flash_load_ui32>
   376b0:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   376b4:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   376b8:	484e      	ldr	r0, [pc, #312]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   376ba:	f000 f9d7 	bl	37a6c <am_hal_flash_store_ui32>
   376be:	9809      	ldr	r0, [sp, #36]	; 0x24
   376c0:	f000 fb90 	bl	37de4 <am_hal_interrupt_master_set>
   376c4:	f000 fb8a 	bl	37ddc <am_hal_interrupt_master_disable>
   376c8:	4603      	mov	r3, r0
   376ca:	484a      	ldr	r0, [pc, #296]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   376cc:	930a      	str	r3, [sp, #40]	; 0x28
   376ce:	f000 f9c9 	bl	37a64 <am_hal_flash_load_ui32>
   376d2:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   376d6:	f021 010f 	bic.w	r1, r1, #15
   376da:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   376de:	f041 0101 	orr.w	r1, r1, #1
   376e2:	4844      	ldr	r0, [pc, #272]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   376e4:	f000 f9c2 	bl	37a6c <am_hal_flash_store_ui32>
   376e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   376ea:	f000 fb7b 	bl	37de4 <am_hal_interrupt_master_set>
   376ee:	e748      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   376f0:	2900      	cmp	r1, #0
   376f2:	d05a      	beq.n	377aa <am_hal_cachectrl_control+0x292>
   376f4:	680c      	ldr	r4, [r1, #0]
   376f6:	2c03      	cmp	r4, #3
   376f8:	d834      	bhi.n	37764 <am_hal_cachectrl_control+0x24c>
   376fa:	f000 fb6f 	bl	37ddc <am_hal_interrupt_master_disable>
   376fe:	4603      	mov	r3, r0
   37700:	483c      	ldr	r0, [pc, #240]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37702:	930b      	str	r3, [sp, #44]	; 0x2c
   37704:	f000 f9ae 	bl	37a64 <am_hal_flash_load_ui32>
   37708:	0323      	lsls	r3, r4, #12
   3770a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   3770e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   37712:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   37716:	4319      	orrs	r1, r3
   37718:	4836      	ldr	r0, [pc, #216]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   3771a:	f000 f9a7 	bl	37a6c <am_hal_flash_store_ui32>
   3771e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   37720:	f000 fb60 	bl	37de4 <am_hal_interrupt_master_set>
   37724:	e72d      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   37726:	2900      	cmp	r1, #0
   37728:	d03f      	beq.n	377aa <am_hal_cachectrl_control+0x292>
   3772a:	680c      	ldr	r4, [r1, #0]
   3772c:	2c07      	cmp	r4, #7
   3772e:	d819      	bhi.n	37764 <am_hal_cachectrl_control+0x24c>
   37730:	f000 fb54 	bl	37ddc <am_hal_interrupt_master_disable>
   37734:	4603      	mov	r3, r0
   37736:	482f      	ldr	r0, [pc, #188]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37738:	930c      	str	r3, [sp, #48]	; 0x30
   3773a:	f000 f993 	bl	37a64 <am_hal_flash_load_ui32>
   3773e:	0123      	lsls	r3, r4, #4
   37740:	f003 0370 	and.w	r3, r3, #112	; 0x70
   37744:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   37748:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   3774c:	4319      	orrs	r1, r3
   3774e:	4829      	ldr	r0, [pc, #164]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   37750:	f000 f98c 	bl	37a6c <am_hal_flash_store_ui32>
   37754:	980c      	ldr	r0, [sp, #48]	; 0x30
   37756:	f000 fb45 	bl	37de4 <am_hal_interrupt_master_set>
   3775a:	e712      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   3775c:	b329      	cbz	r1, 377aa <am_hal_cachectrl_control+0x292>
   3775e:	680c      	ldr	r4, [r1, #0]
   37760:	2c0f      	cmp	r4, #15
   37762:	d926      	bls.n	377b2 <am_hal_cachectrl_control+0x29a>
   37764:	2001      	movs	r0, #1
   37766:	e6f5      	b.n	37554 <am_hal_cachectrl_control+0x3c>
   37768:	b1f9      	cbz	r1, 377aa <am_hal_cachectrl_control+0x292>
   3776a:	684a      	ldr	r2, [r1, #4]
   3776c:	4b22      	ldr	r3, [pc, #136]	; (377f8 <am_hal_cachectrl_control+0x2e0>)
   3776e:	4013      	ands	r3, r2
   37770:	b9db      	cbnz	r3, 377aa <am_hal_cachectrl_control+0x292>
   37772:	688b      	ldr	r3, [r1, #8]
   37774:	4820      	ldr	r0, [pc, #128]	; (377f8 <am_hal_cachectrl_control+0x2e0>)
   37776:	4018      	ands	r0, r3
   37778:	b9b8      	cbnz	r0, 377aa <am_hal_cachectrl_control+0x292>
   3777a:	780c      	ldrb	r4, [r1, #0]
   3777c:	b374      	cbz	r4, 377dc <am_hal_cachectrl_control+0x2c4>
   3777e:	2c01      	cmp	r4, #1
   37780:	d113      	bne.n	377aa <am_hal_cachectrl_control+0x292>
   37782:	4c1b      	ldr	r4, [pc, #108]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   37784:	61a2      	str	r2, [r4, #24]
   37786:	61e3      	str	r3, [r4, #28]
   37788:	784a      	ldrb	r2, [r1, #1]
   3778a:	6823      	ldr	r3, [r4, #0]
   3778c:	f362 03c3 	bfi	r3, r2, #3, #1
   37790:	6023      	str	r3, [r4, #0]
   37792:	e6df      	b.n	37554 <am_hal_cachectrl_control+0x3c>
   37794:	2201      	movs	r2, #1
   37796:	e6da      	b.n	3754e <am_hal_cachectrl_control+0x36>
   37798:	4b15      	ldr	r3, [pc, #84]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   3779a:	681b      	ldr	r3, [r3, #0]
   3779c:	01db      	lsls	r3, r3, #7
   3779e:	d406      	bmi.n	377ae <am_hal_cachectrl_control+0x296>
   377a0:	2007      	movs	r0, #7
   377a2:	e6d7      	b.n	37554 <am_hal_cachectrl_control+0x3c>
   377a4:	f44f 6288 	mov.w	r2, #1088	; 0x440
   377a8:	e6d1      	b.n	3754e <am_hal_cachectrl_control+0x36>
   377aa:	2006      	movs	r0, #6
   377ac:	e6d2      	b.n	37554 <am_hal_cachectrl_control+0x3c>
   377ae:	2202      	movs	r2, #2
   377b0:	e6cd      	b.n	3754e <am_hal_cachectrl_control+0x36>
   377b2:	f000 fb13 	bl	37ddc <am_hal_interrupt_master_disable>
   377b6:	4603      	mov	r3, r0
   377b8:	480e      	ldr	r0, [pc, #56]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   377ba:	930d      	str	r3, [sp, #52]	; 0x34
   377bc:	f000 f952 	bl	37a64 <am_hal_flash_load_ui32>
   377c0:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   377c4:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   377c8:	f021 010f 	bic.w	r1, r1, #15
   377cc:	4321      	orrs	r1, r4
   377ce:	4809      	ldr	r0, [pc, #36]	; (377f4 <am_hal_cachectrl_control+0x2dc>)
   377d0:	f000 f94c 	bl	37a6c <am_hal_flash_store_ui32>
   377d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   377d6:	f000 fb05 	bl	37de4 <am_hal_interrupt_master_set>
   377da:	e6d2      	b.n	37582 <am_hal_cachectrl_control+0x6a>
   377dc:	4c04      	ldr	r4, [pc, #16]	; (377f0 <am_hal_cachectrl_control+0x2d8>)
   377de:	6122      	str	r2, [r4, #16]
   377e0:	6163      	str	r3, [r4, #20]
   377e2:	784a      	ldrb	r2, [r1, #1]
   377e4:	6823      	ldr	r3, [r4, #0]
   377e6:	f362 0382 	bfi	r3, r2, #2, #1
   377ea:	6023      	str	r3, [r4, #0]
   377ec:	e6b2      	b.n	37554 <am_hal_cachectrl_control+0x3c>
   377ee:	bf00      	nop
   377f0:	40018000 	.word	0x40018000
   377f4:	40018004 	.word	0x40018004
   377f8:	f800000f 	.word	0xf800000f

000377fc <am_hal_clkgen_control>:
   377fc:	4b41      	ldr	r3, [pc, #260]	; (37904 <am_hal_clkgen_control+0x108>)
   377fe:	681a      	ldr	r2, [r3, #0]
   37800:	b912      	cbnz	r2, 37808 <am_hal_clkgen_control+0xc>
   37802:	4a41      	ldr	r2, [pc, #260]	; (37908 <am_hal_clkgen_control+0x10c>)
   37804:	6812      	ldr	r2, [r2, #0]
   37806:	601a      	str	r2, [r3, #0]
   37808:	2809      	cmp	r0, #9
   3780a:	d878      	bhi.n	378fe <am_hal_clkgen_control+0x102>
   3780c:	e8df f000 	tbb	[pc, r0]
   37810:	261e160d 	.word	0x261e160d
   37814:	524c423a 	.word	0x524c423a
   37818:	055a      	.short	0x055a
   3781a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3781e:	2000      	movs	r0, #0
   37820:	6a1a      	ldr	r2, [r3, #32]
   37822:	f36f 0200 	bfc	r2, #0, #1
   37826:	621a      	str	r2, [r3, #32]
   37828:	4770      	bx	lr
   3782a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3782e:	2200      	movs	r2, #0
   37830:	2147      	movs	r1, #71	; 0x47
   37832:	6159      	str	r1, [r3, #20]
   37834:	4610      	mov	r0, r2
   37836:	619a      	str	r2, [r3, #24]
   37838:	615a      	str	r2, [r3, #20]
   3783a:	4770      	bx	lr
   3783c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   37840:	2000      	movs	r0, #0
   37842:	68d3      	ldr	r3, [r2, #12]
   37844:	f023 0301 	bic.w	r3, r3, #1
   37848:	60d3      	str	r3, [r2, #12]
   3784a:	4770      	bx	lr
   3784c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   37850:	2000      	movs	r0, #0
   37852:	68d3      	ldr	r3, [r2, #12]
   37854:	f023 0302 	bic.w	r3, r3, #2
   37858:	60d3      	str	r3, [r2, #12]
   3785a:	4770      	bx	lr
   3785c:	4a2b      	ldr	r2, [pc, #172]	; (3790c <am_hal_clkgen_control+0x110>)
   3785e:	68d3      	ldr	r3, [r2, #12]
   37860:	b2db      	uxtb	r3, r3
   37862:	2b21      	cmp	r3, #33	; 0x21
   37864:	d106      	bne.n	37874 <am_hal_clkgen_control+0x78>
   37866:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   3786a:	2101      	movs	r1, #1
   3786c:	f361 2309 	bfi	r3, r1, #8, #2
   37870:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   37874:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   37878:	2000      	movs	r0, #0
   3787a:	68d3      	ldr	r3, [r2, #12]
   3787c:	f043 0301 	orr.w	r3, r3, #1
   37880:	60d3      	str	r3, [r2, #12]
   37882:	4770      	bx	lr
   37884:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   37888:	2000      	movs	r0, #0
   3788a:	68d3      	ldr	r3, [r2, #12]
   3788c:	f043 0302 	orr.w	r3, r3, #2
   37890:	60d3      	str	r3, [r2, #12]
   37892:	4770      	bx	lr
   37894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   37898:	2200      	movs	r2, #0
   3789a:	2047      	movs	r0, #71	; 0x47
   3789c:	2101      	movs	r1, #1
   3789e:	6158      	str	r0, [r3, #20]
   378a0:	6199      	str	r1, [r3, #24]
   378a2:	4610      	mov	r0, r2
   378a4:	615a      	str	r2, [r3, #20]
   378a6:	4770      	bx	lr
   378a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   378ac:	2000      	movs	r0, #0
   378ae:	68da      	ldr	r2, [r3, #12]
   378b0:	60da      	str	r2, [r3, #12]
   378b2:	4770      	bx	lr
   378b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   378b8:	2000      	movs	r0, #0
   378ba:	68d3      	ldr	r3, [r2, #12]
   378bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   378c0:	60d3      	str	r3, [r2, #12]
   378c2:	4770      	bx	lr
   378c4:	b510      	push	{r4, lr}
   378c6:	4a11      	ldr	r2, [pc, #68]	; (3790c <am_hal_clkgen_control+0x110>)
   378c8:	68d3      	ldr	r3, [r2, #12]
   378ca:	b2db      	uxtb	r3, r3
   378cc:	2b21      	cmp	r3, #33	; 0x21
   378ce:	460c      	mov	r4, r1
   378d0:	d008      	beq.n	378e4 <am_hal_clkgen_control+0xe8>
   378d2:	b194      	cbz	r4, 378fa <am_hal_clkgen_control+0xfe>
   378d4:	6823      	ldr	r3, [r4, #0]
   378d6:	f043 0301 	orr.w	r3, r3, #1
   378da:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   378de:	2000      	movs	r0, #0
   378e0:	6213      	str	r3, [r2, #32]
   378e2:	bd10      	pop	{r4, pc}
   378e4:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   378e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   378ec:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   378f0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   378f4:	f000 f86c 	bl	379d0 <am_hal_flash_delay>
   378f8:	e7eb      	b.n	378d2 <am_hal_clkgen_control+0xd6>
   378fa:	4b05      	ldr	r3, [pc, #20]	; (37910 <am_hal_clkgen_control+0x114>)
   378fc:	e7ed      	b.n	378da <am_hal_clkgen_control+0xde>
   378fe:	2006      	movs	r0, #6
   37900:	4770      	bx	lr
   37902:	bf00      	nop
   37904:	10044044 	.word	0x10044044
   37908:	4ffff000 	.word	0x4ffff000
   3790c:	40020000 	.word	0x40020000
   37910:	0025b801 	.word	0x0025b801

00037914 <am_hal_clkgen_status_get>:
   37914:	b1a8      	cbz	r0, 37942 <am_hal_clkgen_status_get+0x2e>
   37916:	b410      	push	{r4}
   37918:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   3791c:	490a      	ldr	r1, [pc, #40]	; (37948 <am_hal_clkgen_status_get+0x34>)
   3791e:	6994      	ldr	r4, [r2, #24]
   37920:	4b0a      	ldr	r3, [pc, #40]	; (3794c <am_hal_clkgen_status_get+0x38>)
   37922:	f014 0f01 	tst.w	r4, #1
   37926:	bf08      	it	eq
   37928:	460b      	moveq	r3, r1
   3792a:	6003      	str	r3, [r0, #0]
   3792c:	69d3      	ldr	r3, [r2, #28]
   3792e:	f85d 4b04 	ldr.w	r4, [sp], #4
   37932:	f003 0201 	and.w	r2, r3, #1
   37936:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3793a:	6042      	str	r2, [r0, #4]
   3793c:	7203      	strb	r3, [r0, #8]
   3793e:	2000      	movs	r0, #0
   37940:	4770      	bx	lr
   37942:	2006      	movs	r0, #6
   37944:	4770      	bx	lr
   37946:	bf00      	nop
   37948:	02dc6c00 	.word	0x02dc6c00
   3794c:	016e3600 	.word	0x016e3600

00037950 <am_hal_ctimer_int_service>:
   37950:	b198      	cbz	r0, 3797a <am_hal_ctimer_int_service+0x2a>
   37952:	b570      	push	{r4, r5, r6, lr}
   37954:	4e09      	ldr	r6, [pc, #36]	; (3797c <am_hal_ctimer_int_service+0x2c>)
   37956:	4604      	mov	r4, r0
   37958:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   3795c:	fab4 f384 	clz	r3, r4
   37960:	f1c3 021f 	rsb	r2, r3, #31
   37964:	fa25 f303 	lsr.w	r3, r5, r3
   37968:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   3796c:	ea24 0403 	bic.w	r4, r4, r3
   37970:	b102      	cbz	r2, 37974 <am_hal_ctimer_int_service+0x24>
   37972:	4790      	blx	r2
   37974:	2c00      	cmp	r4, #0
   37976:	d1f1      	bne.n	3795c <am_hal_ctimer_int_service+0xc>
   37978:	bd70      	pop	{r4, r5, r6, pc}
   3797a:	4770      	bx	lr
   3797c:	10043fc4 	.word	0x10043fc4

00037980 <am_hal_ctimer_int_clear>:
   37980:	b510      	push	{r4, lr}
   37982:	b082      	sub	sp, #8
   37984:	4604      	mov	r4, r0
   37986:	f000 fa29 	bl	37ddc <am_hal_interrupt_master_disable>
   3798a:	4b04      	ldr	r3, [pc, #16]	; (3799c <am_hal_ctimer_int_clear+0x1c>)
   3798c:	9001      	str	r0, [sp, #4]
   3798e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   37992:	9801      	ldr	r0, [sp, #4]
   37994:	f000 fa26 	bl	37de4 <am_hal_interrupt_master_set>
   37998:	b002      	add	sp, #8
   3799a:	bd10      	pop	{r4, pc}
   3799c:	40008000 	.word	0x40008000

000379a0 <am_hal_ctimer_int_status_get>:
   379a0:	b510      	push	{r4, lr}
   379a2:	b082      	sub	sp, #8
   379a4:	4604      	mov	r4, r0
   379a6:	f000 fa19 	bl	37ddc <am_hal_interrupt_master_disable>
   379aa:	4b08      	ldr	r3, [pc, #32]	; (379cc <am_hal_ctimer_int_status_get+0x2c>)
   379ac:	9001      	str	r0, [sp, #4]
   379ae:	b93c      	cbnz	r4, 379c0 <am_hal_ctimer_int_status_get+0x20>
   379b0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   379b4:	9801      	ldr	r0, [sp, #4]
   379b6:	f000 fa15 	bl	37de4 <am_hal_interrupt_master_set>
   379ba:	4620      	mov	r0, r4
   379bc:	b002      	add	sp, #8
   379be:	bd10      	pop	{r4, pc}
   379c0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   379c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   379c8:	401c      	ands	r4, r3
   379ca:	e7f3      	b.n	379b4 <am_hal_ctimer_int_status_get+0x14>
   379cc:	40008000 	.word	0x40008000

000379d0 <am_hal_flash_delay>:
   379d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   379d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   379d6:	075b      	lsls	r3, r3, #29
   379d8:	bf46      	itte	mi
   379da:	0040      	lslmi	r0, r0, #1
   379dc:	230e      	movmi	r3, #14
   379de:	230b      	movpl	r3, #11
   379e0:	4298      	cmp	r0, r3
   379e2:	d800      	bhi.n	379e6 <am_hal_flash_delay+0x16>
   379e4:	4770      	bx	lr
   379e6:	1ac0      	subs	r0, r0, r3
   379e8:	4b00      	ldr	r3, [pc, #0]	; (379ec <am_hal_flash_delay+0x1c>)
   379ea:	4718      	bx	r3
   379ec:	0800009d 	.word	0x0800009d

000379f0 <am_hal_flash_delay_status_check>:
   379f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   379f4:	f89d 4020 	ldrb.w	r4, [sp, #32]
   379f8:	460d      	mov	r5, r1
   379fa:	4616      	mov	r6, r2
   379fc:	461f      	mov	r7, r3
   379fe:	b1b4      	cbz	r4, 37a2e <am_hal_flash_delay_status_check+0x3e>
   37a00:	4604      	mov	r4, r0
   37a02:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   37a06:	f8df 8058 	ldr.w	r8, [pc, #88]	; 37a60 <am_hal_flash_delay_status_check+0x70>
   37a0a:	e009      	b.n	37a20 <am_hal_flash_delay_status_check+0x30>
   37a0c:	b324      	cbz	r4, 37a58 <am_hal_flash_delay_status_check+0x68>
   37a0e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   37a12:	f013 0f04 	tst.w	r3, #4
   37a16:	bf14      	ite	ne
   37a18:	2012      	movne	r0, #18
   37a1a:	2005      	moveq	r0, #5
   37a1c:	3c01      	subs	r4, #1
   37a1e:	47c0      	blx	r8
   37a20:	682b      	ldr	r3, [r5, #0]
   37a22:	4033      	ands	r3, r6
   37a24:	429f      	cmp	r7, r3
   37a26:	d1f1      	bne.n	37a0c <am_hal_flash_delay_status_check+0x1c>
   37a28:	2000      	movs	r0, #0
   37a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   37a2e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 37a60 <am_hal_flash_delay_status_check+0x70>
   37a32:	4604      	mov	r4, r0
   37a34:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   37a38:	e009      	b.n	37a4e <am_hal_flash_delay_status_check+0x5e>
   37a3a:	b16c      	cbz	r4, 37a58 <am_hal_flash_delay_status_check+0x68>
   37a3c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   37a40:	f013 0f04 	tst.w	r3, #4
   37a44:	bf14      	ite	ne
   37a46:	2012      	movne	r0, #18
   37a48:	2005      	moveq	r0, #5
   37a4a:	3c01      	subs	r4, #1
   37a4c:	47c0      	blx	r8
   37a4e:	682b      	ldr	r3, [r5, #0]
   37a50:	4033      	ands	r3, r6
   37a52:	429f      	cmp	r7, r3
   37a54:	d0f1      	beq.n	37a3a <am_hal_flash_delay_status_check+0x4a>
   37a56:	e7e7      	b.n	37a28 <am_hal_flash_delay_status_check+0x38>
   37a58:	2004      	movs	r0, #4
   37a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   37a5e:	bf00      	nop
   37a60:	0800009d 	.word	0x0800009d

00037a64 <am_hal_flash_load_ui32>:
   37a64:	4b00      	ldr	r3, [pc, #0]	; (37a68 <am_hal_flash_load_ui32+0x4>)
   37a66:	4718      	bx	r3
   37a68:	08000075 	.word	0x08000075

00037a6c <am_hal_flash_store_ui32>:
   37a6c:	4b01      	ldr	r3, [pc, #4]	; (37a74 <am_hal_flash_store_ui32+0x8>)
   37a6e:	f043 0301 	orr.w	r3, r3, #1
   37a72:	4718      	bx	r3
   37a74:	10018c54 	.word	0x10018c54

00037a78 <am_hal_gpio_pinconfig>:
   37a78:	2831      	cmp	r0, #49	; 0x31
   37a7a:	d901      	bls.n	37a80 <am_hal_gpio_pinconfig+0x8>
   37a7c:	2006      	movs	r0, #6
   37a7e:	4770      	bx	lr
   37a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37a84:	f001 0307 	and.w	r3, r1, #7
   37a88:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   37a8c:	b085      	sub	sp, #20
   37a8e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   37a92:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   37a96:	d014      	beq.n	37ac2 <am_hal_gpio_pinconfig+0x4a>
   37a98:	f3c1 1742 	ubfx	r7, r1, #5, #3
   37a9c:	1dbd      	adds	r5, r7, #6
   37a9e:	f005 0507 	and.w	r5, r5, #7
   37aa2:	2d03      	cmp	r5, #3
   37aa4:	f042 0201 	orr.w	r2, r2, #1
   37aa8:	f200 80a7 	bhi.w	37bfa <am_hal_gpio_pinconfig+0x182>
   37aac:	4d82      	ldr	r5, [pc, #520]	; (37cb8 <am_hal_gpio_pinconfig+0x240>)
   37aae:	5c2d      	ldrb	r5, [r5, r0]
   37ab0:	07ee      	lsls	r6, r5, #31
   37ab2:	d403      	bmi.n	37abc <am_hal_gpio_pinconfig+0x44>
   37ab4:	4881      	ldr	r0, [pc, #516]	; (37cbc <am_hal_gpio_pinconfig+0x244>)
   37ab6:	b005      	add	sp, #20
   37ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37abc:	3f02      	subs	r7, #2
   37abe:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   37ac2:	2c00      	cmp	r4, #0
   37ac4:	f040 8091 	bne.w	37bea <am_hal_gpio_pinconfig+0x172>
   37ac8:	4c7d      	ldr	r4, [pc, #500]	; (37cc0 <am_hal_gpio_pinconfig+0x248>)
   37aca:	4d7e      	ldr	r5, [pc, #504]	; (37cc4 <am_hal_gpio_pinconfig+0x24c>)
   37acc:	5c24      	ldrb	r4, [r4, r0]
   37ace:	5c2d      	ldrb	r5, [r5, r0]
   37ad0:	411c      	asrs	r4, r3
   37ad2:	f014 0f01 	tst.w	r4, #1
   37ad6:	bf0c      	ite	eq
   37ad8:	2400      	moveq	r4, #0
   37ada:	2402      	movne	r4, #2
   37adc:	42ab      	cmp	r3, r5
   37ade:	ea42 0204 	orr.w	r2, r2, r4
   37ae2:	f000 8096 	beq.w	37c12 <am_hal_gpio_pinconfig+0x19a>
   37ae6:	f3c1 3341 	ubfx	r3, r1, #13, #2
   37aea:	105d      	asrs	r5, r3, #1
   37aec:	f3c1 2681 	ubfx	r6, r1, #10, #2
   37af0:	00db      	lsls	r3, r3, #3
   37af2:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   37af6:	f003 0408 	and.w	r4, r3, #8
   37afa:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   37afe:	f00e 060c 	and.w	r6, lr, #12
   37b02:	f3c1 3500 	ubfx	r5, r1, #12, #1
   37b06:	2e04      	cmp	r6, #4
   37b08:	ea43 0304 	orr.w	r3, r3, r4
   37b0c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   37b10:	462c      	mov	r4, r5
   37b12:	f000 808b 	beq.w	37c2c <am_hal_gpio_pinconfig+0x1b4>
   37b16:	4c6c      	ldr	r4, [pc, #432]	; (37cc8 <am_hal_gpio_pinconfig+0x250>)
   37b18:	6827      	ldr	r7, [r4, #0]
   37b1a:	1bcf      	subs	r7, r1, r7
   37b1c:	fab7 f787 	clz	r7, r7
   37b20:	097f      	lsrs	r7, r7, #5
   37b22:	f01e 0f60 	tst.w	lr, #96	; 0x60
   37b26:	bf04      	itt	eq
   37b28:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   37b2c:	f364 0300 	bfieq	r3, r4, #0, #1
   37b30:	0084      	lsls	r4, r0, #2
   37b32:	f3c1 2101 	ubfx	r1, r1, #8, #2
   37b36:	2902      	cmp	r1, #2
   37b38:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   37b3c:	d078      	beq.n	37c30 <am_hal_gpio_pinconfig+0x1b8>
   37b3e:	d87f      	bhi.n	37c40 <am_hal_gpio_pinconfig+0x1c8>
   37b40:	2901      	cmp	r1, #1
   37b42:	f04f 0100 	mov.w	r1, #0
   37b46:	bf08      	it	eq
   37b48:	f042 0204 	orreq.w	r2, r2, #4
   37b4c:	f005 0518 	and.w	r5, r5, #24
   37b50:	9101      	str	r1, [sp, #4]
   37b52:	f004 041c 	and.w	r4, r4, #28
   37b56:	f020 0a03 	bic.w	sl, r0, #3
   37b5a:	f04f 090f 	mov.w	r9, #15
   37b5e:	fa09 f904 	lsl.w	r9, r9, r4
   37b62:	0841      	lsrs	r1, r0, #1
   37b64:	26ff      	movs	r6, #255	; 0xff
   37b66:	fa03 f404 	lsl.w	r4, r3, r4
   37b6a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   37b6e:	40ae      	lsls	r6, r5
   37b70:	9300      	str	r3, [sp, #0]
   37b72:	fa02 f505 	lsl.w	r5, r2, r5
   37b76:	4683      	mov	fp, r0
   37b78:	f021 0803 	bic.w	r8, r1, #3
   37b7c:	f000 f92e 	bl	37ddc <am_hal_interrupt_master_disable>
   37b80:	9b00      	ldr	r3, [sp, #0]
   37b82:	9003      	str	r0, [sp, #12]
   37b84:	ea6f 0909 	mvn.w	r9, r9
   37b88:	43f6      	mvns	r6, r6
   37b8a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   37b8e:	f8df e15c 	ldr.w	lr, [pc, #348]	; 37cec <am_hal_gpio_pinconfig+0x274>
   37b92:	4a4e      	ldr	r2, [pc, #312]	; (37ccc <am_hal_gpio_pinconfig+0x254>)
   37b94:	b15f      	cbz	r7, 37bae <am_hal_gpio_pinconfig+0x136>
   37b96:	ea4f 07db 	mov.w	r7, fp, lsr #3
   37b9a:	f00b 001f 	and.w	r0, fp, #31
   37b9e:	f007 0704 	and.w	r7, r7, #4
   37ba2:	f04f 0b01 	mov.w	fp, #1
   37ba6:	494a      	ldr	r1, [pc, #296]	; (37cd0 <am_hal_gpio_pinconfig+0x258>)
   37ba8:	fa0b f000 	lsl.w	r0, fp, r0
   37bac:	5078      	str	r0, [r7, r1]
   37bae:	4849      	ldr	r0, [pc, #292]	; (37cd4 <am_hal_gpio_pinconfig+0x25c>)
   37bb0:	2773      	movs	r7, #115	; 0x73
   37bb2:	6607      	str	r7, [r0, #96]	; 0x60
   37bb4:	681f      	ldr	r7, [r3, #0]
   37bb6:	4037      	ands	r7, r6
   37bb8:	433d      	orrs	r5, r7
   37bba:	601d      	str	r5, [r3, #0]
   37bbc:	f858 300e 	ldr.w	r3, [r8, lr]
   37bc0:	ea09 0303 	and.w	r3, r9, r3
   37bc4:	4323      	orrs	r3, r4
   37bc6:	f848 300e 	str.w	r3, [r8, lr]
   37bca:	f85a 3002 	ldr.w	r3, [sl, r2]
   37bce:	401e      	ands	r6, r3
   37bd0:	9b01      	ldr	r3, [sp, #4]
   37bd2:	2400      	movs	r4, #0
   37bd4:	431e      	orrs	r6, r3
   37bd6:	f84a 6002 	str.w	r6, [sl, r2]
   37bda:	6604      	str	r4, [r0, #96]	; 0x60
   37bdc:	9803      	ldr	r0, [sp, #12]
   37bde:	f000 f901 	bl	37de4 <am_hal_interrupt_master_set>
   37be2:	4620      	mov	r0, r4
   37be4:	b005      	add	sp, #20
   37be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bea:	2c01      	cmp	r4, #1
   37bec:	d017      	beq.n	37c1e <am_hal_gpio_pinconfig+0x1a6>
   37bee:	2c02      	cmp	r4, #2
   37bf0:	d035      	beq.n	37c5e <am_hal_gpio_pinconfig+0x1e6>
   37bf2:	4839      	ldr	r0, [pc, #228]	; (37cd8 <am_hal_gpio_pinconfig+0x260>)
   37bf4:	b005      	add	sp, #20
   37bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bfa:	2ec0      	cmp	r6, #192	; 0xc0
   37bfc:	d02a      	beq.n	37c54 <am_hal_gpio_pinconfig+0x1dc>
   37bfe:	2e20      	cmp	r6, #32
   37c00:	f47f af5f 	bne.w	37ac2 <am_hal_gpio_pinconfig+0x4a>
   37c04:	2814      	cmp	r0, #20
   37c06:	f43f af55 	beq.w	37ab4 <am_hal_gpio_pinconfig+0x3c>
   37c0a:	2c00      	cmp	r4, #0
   37c0c:	f43f af5c 	beq.w	37ac8 <am_hal_gpio_pinconfig+0x50>
   37c10:	e7eb      	b.n	37bea <am_hal_gpio_pinconfig+0x172>
   37c12:	f3c1 4402 	ubfx	r4, r1, #16, #3
   37c16:	2c07      	cmp	r4, #7
   37c18:	d128      	bne.n	37c6c <am_hal_gpio_pinconfig+0x1f4>
   37c1a:	4830      	ldr	r0, [pc, #192]	; (37cdc <am_hal_gpio_pinconfig+0x264>)
   37c1c:	e74b      	b.n	37ab6 <am_hal_gpio_pinconfig+0x3e>
   37c1e:	4c26      	ldr	r4, [pc, #152]	; (37cb8 <am_hal_gpio_pinconfig+0x240>)
   37c20:	5c24      	ldrb	r4, [r4, r0]
   37c22:	07a5      	lsls	r5, r4, #30
   37c24:	d5e5      	bpl.n	37bf2 <am_hal_gpio_pinconfig+0x17a>
   37c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   37c2a:	e74d      	b.n	37ac8 <am_hal_gpio_pinconfig+0x50>
   37c2c:	2701      	movs	r7, #1
   37c2e:	e778      	b.n	37b22 <am_hal_gpio_pinconfig+0xaa>
   37c30:	f005 0518 	and.w	r5, r5, #24
   37c34:	f04f 0801 	mov.w	r8, #1
   37c38:	fa08 f105 	lsl.w	r1, r8, r5
   37c3c:	9101      	str	r1, [sp, #4]
   37c3e:	e788      	b.n	37b52 <am_hal_gpio_pinconfig+0xda>
   37c40:	f005 0518 	and.w	r5, r5, #24
   37c44:	f04f 0801 	mov.w	r8, #1
   37c48:	fa08 f105 	lsl.w	r1, r8, r5
   37c4c:	f042 0204 	orr.w	r2, r2, #4
   37c50:	9101      	str	r1, [sp, #4]
   37c52:	e77e      	b.n	37b52 <am_hal_gpio_pinconfig+0xda>
   37c54:	2814      	cmp	r0, #20
   37c56:	f43f af34 	beq.w	37ac2 <am_hal_gpio_pinconfig+0x4a>
   37c5a:	4821      	ldr	r0, [pc, #132]	; (37ce0 <am_hal_gpio_pinconfig+0x268>)
   37c5c:	e72b      	b.n	37ab6 <am_hal_gpio_pinconfig+0x3e>
   37c5e:	4c16      	ldr	r4, [pc, #88]	; (37cb8 <am_hal_gpio_pinconfig+0x240>)
   37c60:	5c24      	ldrb	r4, [r4, r0]
   37c62:	0764      	lsls	r4, r4, #29
   37c64:	d5c5      	bpl.n	37bf2 <am_hal_gpio_pinconfig+0x17a>
   37c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   37c6a:	e72d      	b.n	37ac8 <am_hal_gpio_pinconfig+0x50>
   37c6c:	4d1d      	ldr	r5, [pc, #116]	; (37ce4 <am_hal_gpio_pinconfig+0x26c>)
   37c6e:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   37c72:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   37c76:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   37c7a:	429e      	cmp	r6, r3
   37c7c:	d00c      	beq.n	37c98 <am_hal_gpio_pinconfig+0x220>
   37c7e:	0084      	lsls	r4, r0, #2
   37c80:	4425      	add	r5, r4
   37c82:	786e      	ldrb	r6, [r5, #1]
   37c84:	429e      	cmp	r6, r3
   37c86:	d012      	beq.n	37cae <am_hal_gpio_pinconfig+0x236>
   37c88:	78ae      	ldrb	r6, [r5, #2]
   37c8a:	429e      	cmp	r6, r3
   37c8c:	d00d      	beq.n	37caa <am_hal_gpio_pinconfig+0x232>
   37c8e:	78ed      	ldrb	r5, [r5, #3]
   37c90:	429d      	cmp	r5, r3
   37c92:	d00e      	beq.n	37cb2 <am_hal_gpio_pinconfig+0x23a>
   37c94:	4814      	ldr	r0, [pc, #80]	; (37ce8 <am_hal_gpio_pinconfig+0x270>)
   37c96:	e70e      	b.n	37ab6 <am_hal_gpio_pinconfig+0x3e>
   37c98:	2300      	movs	r3, #0
   37c9a:	0084      	lsls	r4, r0, #2
   37c9c:	005b      	lsls	r3, r3, #1
   37c9e:	f3c1 5540 	ubfx	r5, r1, #21, #1
   37ca2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   37ca6:	2700      	movs	r7, #0
   37ca8:	e743      	b.n	37b32 <am_hal_gpio_pinconfig+0xba>
   37caa:	2302      	movs	r3, #2
   37cac:	e7f6      	b.n	37c9c <am_hal_gpio_pinconfig+0x224>
   37cae:	2301      	movs	r3, #1
   37cb0:	e7f4      	b.n	37c9c <am_hal_gpio_pinconfig+0x224>
   37cb2:	2303      	movs	r3, #3
   37cb4:	e7f2      	b.n	37c9c <am_hal_gpio_pinconfig+0x224>
   37cb6:	bf00      	nop
   37cb8:	00044168 	.word	0x00044168
   37cbc:	08000100 	.word	0x08000100
   37cc0:	00044264 	.word	0x00044264
   37cc4:	000442a0 	.word	0x000442a0
   37cc8:	00044298 	.word	0x00044298
   37ccc:	400100e0 	.word	0x400100e0
   37cd0:	400100b4 	.word	0x400100b4
   37cd4:	40010000 	.word	0x40010000
   37cd8:	08000102 	.word	0x08000102
   37cdc:	08000103 	.word	0x08000103
   37ce0:	08000101 	.word	0x08000101
   37ce4:	0004419c 	.word	0x0004419c
   37ce8:	08000104 	.word	0x08000104
   37cec:	40010040 	.word	0x40010040

00037cf0 <am_hal_gpio_state_read>:
   37cf0:	b1ca      	cbz	r2, 37d26 <am_hal_gpio_state_read+0x36>
   37cf2:	2831      	cmp	r0, #49	; 0x31
   37cf4:	d904      	bls.n	37d00 <am_hal_gpio_state_read+0x10>
   37cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37cfa:	6013      	str	r3, [r2, #0]
   37cfc:	2005      	movs	r0, #5
   37cfe:	4770      	bx	lr
   37d00:	08c3      	lsrs	r3, r0, #3
   37d02:	2901      	cmp	r1, #1
   37d04:	f003 0304 	and.w	r3, r3, #4
   37d08:	f000 001f 	and.w	r0, r0, #31
   37d0c:	d00d      	beq.n	37d2a <am_hal_gpio_state_read+0x3a>
   37d0e:	d313      	bcc.n	37d38 <am_hal_gpio_state_read+0x48>
   37d10:	2902      	cmp	r1, #2
   37d12:	d108      	bne.n	37d26 <am_hal_gpio_state_read+0x36>
   37d14:	490c      	ldr	r1, [pc, #48]	; (37d48 <am_hal_gpio_state_read+0x58>)
   37d16:	585b      	ldr	r3, [r3, r1]
   37d18:	fa23 f000 	lsr.w	r0, r3, r0
   37d1c:	f000 0001 	and.w	r0, r0, #1
   37d20:	6010      	str	r0, [r2, #0]
   37d22:	2000      	movs	r0, #0
   37d24:	4770      	bx	lr
   37d26:	2006      	movs	r0, #6
   37d28:	4770      	bx	lr
   37d2a:	4908      	ldr	r1, [pc, #32]	; (37d4c <am_hal_gpio_state_read+0x5c>)
   37d2c:	585b      	ldr	r3, [r3, r1]
   37d2e:	fa23 f000 	lsr.w	r0, r3, r0
   37d32:	f000 0001 	and.w	r0, r0, #1
   37d36:	e7f3      	b.n	37d20 <am_hal_gpio_state_read+0x30>
   37d38:	4905      	ldr	r1, [pc, #20]	; (37d50 <am_hal_gpio_state_read+0x60>)
   37d3a:	585b      	ldr	r3, [r3, r1]
   37d3c:	fa23 f000 	lsr.w	r0, r3, r0
   37d40:	f000 0001 	and.w	r0, r0, #1
   37d44:	e7ec      	b.n	37d20 <am_hal_gpio_state_read+0x30>
   37d46:	bf00      	nop
   37d48:	400100a0 	.word	0x400100a0
   37d4c:	40010088 	.word	0x40010088
   37d50:	40010080 	.word	0x40010080

00037d54 <am_hal_gpio_state_write>:
   37d54:	2831      	cmp	r0, #49	; 0x31
   37d56:	d901      	bls.n	37d5c <am_hal_gpio_state_write+0x8>
   37d58:	2005      	movs	r0, #5
   37d5a:	4770      	bx	lr
   37d5c:	2905      	cmp	r1, #5
   37d5e:	d901      	bls.n	37d64 <am_hal_gpio_state_write+0x10>
   37d60:	2006      	movs	r0, #6
   37d62:	4770      	bx	lr
   37d64:	b570      	push	{r4, r5, r6, lr}
   37d66:	f000 031f 	and.w	r3, r0, #31
   37d6a:	b082      	sub	sp, #8
   37d6c:	08c0      	lsrs	r0, r0, #3
   37d6e:	2201      	movs	r2, #1
   37d70:	460d      	mov	r5, r1
   37d72:	f000 0404 	and.w	r4, r0, #4
   37d76:	fa02 f603 	lsl.w	r6, r2, r3
   37d7a:	f000 f82f 	bl	37ddc <am_hal_interrupt_master_disable>
   37d7e:	1e69      	subs	r1, r5, #1
   37d80:	9001      	str	r0, [sp, #4]
   37d82:	2904      	cmp	r1, #4
   37d84:	d817      	bhi.n	37db6 <am_hal_gpio_state_write+0x62>
   37d86:	e8df f001 	tbb	[pc, r1]
   37d8a:	0e13      	.short	0x0e13
   37d8c:	030b      	.short	0x030b
   37d8e:	19          	.byte	0x19
   37d8f:	00          	.byte	0x00
   37d90:	4b0d      	ldr	r3, [pc, #52]	; (37dc8 <am_hal_gpio_state_write+0x74>)
   37d92:	50e6      	str	r6, [r4, r3]
   37d94:	9801      	ldr	r0, [sp, #4]
   37d96:	f000 f825 	bl	37de4 <am_hal_interrupt_master_set>
   37d9a:	2000      	movs	r0, #0
   37d9c:	b002      	add	sp, #8
   37d9e:	bd70      	pop	{r4, r5, r6, pc}
   37da0:	4b0a      	ldr	r3, [pc, #40]	; (37dcc <am_hal_gpio_state_write+0x78>)
   37da2:	50e6      	str	r6, [r4, r3]
   37da4:	e7f6      	b.n	37d94 <am_hal_gpio_state_write+0x40>
   37da6:	4a0a      	ldr	r2, [pc, #40]	; (37dd0 <am_hal_gpio_state_write+0x7c>)
   37da8:	58a3      	ldr	r3, [r4, r2]
   37daa:	4073      	eors	r3, r6
   37dac:	50a3      	str	r3, [r4, r2]
   37dae:	e7f1      	b.n	37d94 <am_hal_gpio_state_write+0x40>
   37db0:	4b08      	ldr	r3, [pc, #32]	; (37dd4 <am_hal_gpio_state_write+0x80>)
   37db2:	50e6      	str	r6, [r4, r3]
   37db4:	e7ee      	b.n	37d94 <am_hal_gpio_state_write+0x40>
   37db6:	4b08      	ldr	r3, [pc, #32]	; (37dd8 <am_hal_gpio_state_write+0x84>)
   37db8:	50e6      	str	r6, [r4, r3]
   37dba:	e7eb      	b.n	37d94 <am_hal_gpio_state_write+0x40>
   37dbc:	4a03      	ldr	r2, [pc, #12]	; (37dcc <am_hal_gpio_state_write+0x78>)
   37dbe:	58a3      	ldr	r3, [r4, r2]
   37dc0:	4073      	eors	r3, r6
   37dc2:	50a3      	str	r3, [r4, r2]
   37dc4:	e7e6      	b.n	37d94 <am_hal_gpio_state_write+0x40>
   37dc6:	bf00      	nop
   37dc8:	400100a8 	.word	0x400100a8
   37dcc:	400100b4 	.word	0x400100b4
   37dd0:	40010088 	.word	0x40010088
   37dd4:	40010090 	.word	0x40010090
   37dd8:	40010098 	.word	0x40010098

00037ddc <am_hal_interrupt_master_disable>:
   37ddc:	f3ef 8010 	mrs	r0, PRIMASK
   37de0:	b672      	cpsid	i
   37de2:	4770      	bx	lr

00037de4 <am_hal_interrupt_master_set>:
   37de4:	f380 8810 	msr	PRIMASK, r0
   37de8:	4770      	bx	lr
   37dea:	bf00      	nop

00037dec <am_hal_itm_enable>:
   37dec:	4a0b      	ldr	r2, [pc, #44]	; (37e1c <am_hal_itm_enable+0x30>)
   37dee:	68d3      	ldr	r3, [r2, #12]
   37df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   37df4:	60d3      	str	r3, [r2, #12]
   37df6:	68d3      	ldr	r3, [r2, #12]
   37df8:	01db      	lsls	r3, r3, #7
   37dfa:	d5fc      	bpl.n	37df6 <am_hal_itm_enable+0xa>
   37dfc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   37e00:	4907      	ldr	r1, [pc, #28]	; (37e20 <am_hal_itm_enable+0x34>)
   37e02:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   37e06:	4a07      	ldr	r2, [pc, #28]	; (37e24 <am_hal_itm_enable+0x38>)
   37e08:	200f      	movs	r0, #15
   37e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   37e0e:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   37e12:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   37e16:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   37e1a:	4770      	bx	lr
   37e1c:	e000edf0 	.word	0xe000edf0
   37e20:	c5acce55 	.word	0xc5acce55
   37e24:	00150511 	.word	0x00150511

00037e28 <am_hal_itm_disable>:
   37e28:	b510      	push	{r4, lr}
   37e2a:	4b25      	ldr	r3, [pc, #148]	; (37ec0 <am_hal_itm_disable+0x98>)
   37e2c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   37e30:	b9b3      	cbnz	r3, 37e60 <am_hal_itm_disable+0x38>
   37e32:	4b24      	ldr	r3, [pc, #144]	; (37ec4 <am_hal_itm_disable+0x9c>)
   37e34:	68da      	ldr	r2, [r3, #12]
   37e36:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   37e3a:	60da      	str	r2, [r3, #12]
   37e3c:	68da      	ldr	r2, [r3, #12]
   37e3e:	01d2      	lsls	r2, r2, #7
   37e40:	d5fc      	bpl.n	37e3c <am_hal_itm_disable+0x14>
   37e42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   37e46:	4920      	ldr	r1, [pc, #128]	; (37ec8 <am_hal_itm_disable+0xa0>)
   37e48:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   37e4c:	4a1f      	ldr	r2, [pc, #124]	; (37ecc <am_hal_itm_disable+0xa4>)
   37e4e:	200f      	movs	r0, #15
   37e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   37e54:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   37e58:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   37e5c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   37e60:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   37e64:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   37e68:	021b      	lsls	r3, r3, #8
   37e6a:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   37e6e:	d4f9      	bmi.n	37e64 <am_hal_itm_disable+0x3c>
   37e70:	f44f 7048 	mov.w	r0, #800	; 0x320
   37e74:	f7ff fdac 	bl	379d0 <am_hal_flash_delay>
   37e78:	4b13      	ldr	r3, [pc, #76]	; (37ec8 <am_hal_itm_disable+0xa0>)
   37e7a:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   37e7e:	4621      	mov	r1, r4
   37e80:	2064      	movs	r0, #100	; 0x64
   37e82:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   37e86:	f023 0301 	bic.w	r3, r3, #1
   37e8a:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   37e8e:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   37e92:	4b0f      	ldr	r3, [pc, #60]	; (37ed0 <am_hal_itm_disable+0xa8>)
   37e94:	4013      	ands	r3, r2
   37e96:	2b00      	cmp	r3, #0
   37e98:	d1f9      	bne.n	37e8e <am_hal_itm_disable+0x66>
   37e9a:	3801      	subs	r0, #1
   37e9c:	d1f1      	bne.n	37e82 <am_hal_itm_disable+0x5a>
   37e9e:	4a09      	ldr	r2, [pc, #36]	; (37ec4 <am_hal_itm_disable+0x9c>)
   37ea0:	68d3      	ldr	r3, [r2, #12]
   37ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37ea6:	60d3      	str	r3, [r2, #12]
   37ea8:	68d3      	ldr	r3, [r2, #12]
   37eaa:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   37eae:	d1fb      	bne.n	37ea8 <am_hal_itm_disable+0x80>
   37eb0:	4a03      	ldr	r2, [pc, #12]	; (37ec0 <am_hal_itm_disable+0x98>)
   37eb2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   37eb6:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   37eba:	2b00      	cmp	r3, #0
   37ebc:	d1fb      	bne.n	37eb6 <am_hal_itm_disable+0x8e>
   37ebe:	bd10      	pop	{r4, pc}
   37ec0:	40020000 	.word	0x40020000
   37ec4:	e000edf0 	.word	0xe000edf0
   37ec8:	c5acce55 	.word	0xc5acce55
   37ecc:	00150511 	.word	0x00150511
   37ed0:	00800001 	.word	0x00800001

00037ed4 <am_hal_itm_print>:
   37ed4:	7803      	ldrb	r3, [r0, #0]
   37ed6:	b1a3      	cbz	r3, 37f02 <am_hal_itm_print+0x2e>
   37ed8:	4602      	mov	r2, r0
   37eda:	2300      	movs	r3, #0
   37edc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   37ee0:	3301      	adds	r3, #1
   37ee2:	2900      	cmp	r1, #0
   37ee4:	d1fa      	bne.n	37edc <am_hal_itm_print+0x8>
   37ee6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   37eea:	b430      	push	{r4, r5}
   37eec:	18c1      	adds	r1, r0, r3
   37eee:	4615      	mov	r5, r2
   37ef0:	f810 4b01 	ldrb.w	r4, [r0], #1
   37ef4:	6813      	ldr	r3, [r2, #0]
   37ef6:	2b00      	cmp	r3, #0
   37ef8:	d0fc      	beq.n	37ef4 <am_hal_itm_print+0x20>
   37efa:	4288      	cmp	r0, r1
   37efc:	702c      	strb	r4, [r5, #0]
   37efe:	d1f7      	bne.n	37ef0 <am_hal_itm_print+0x1c>
   37f00:	bc30      	pop	{r4, r5}
   37f02:	4770      	bx	lr

00037f04 <am_hal_mcuctrl_info_get>:
   37f04:	b4f0      	push	{r4, r5, r6, r7}
   37f06:	b121      	cbz	r1, 37f12 <am_hal_mcuctrl_info_get+0xe>
   37f08:	2801      	cmp	r0, #1
   37f0a:	d038      	beq.n	37f7e <am_hal_mcuctrl_info_get+0x7a>
   37f0c:	d320      	bcc.n	37f50 <am_hal_mcuctrl_info_get+0x4c>
   37f0e:	2802      	cmp	r0, #2
   37f10:	d002      	beq.n	37f18 <am_hal_mcuctrl_info_get+0x14>
   37f12:	2006      	movs	r0, #6
   37f14:	bcf0      	pop	{r4, r5, r6, r7}
   37f16:	4770      	bx	lr
   37f18:	4a41      	ldr	r2, [pc, #260]	; (38020 <am_hal_mcuctrl_info_get+0x11c>)
   37f1a:	684d      	ldr	r5, [r1, #4]
   37f1c:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   37f20:	694c      	ldr	r4, [r1, #20]
   37f22:	f003 0601 	and.w	r6, r3, #1
   37f26:	f3c3 0040 	ubfx	r0, r3, #1, #1
   37f2a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   37f2e:	700e      	strb	r6, [r1, #0]
   37f30:	7208      	strb	r0, [r1, #8]
   37f32:	740b      	strb	r3, [r1, #16]
   37f34:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   37f38:	60cb      	str	r3, [r1, #12]
   37f3a:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   37f3e:	4328      	orrs	r0, r5
   37f40:	6048      	str	r0, [r1, #4]
   37f42:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   37f46:	4323      	orrs	r3, r4
   37f48:	2000      	movs	r0, #0
   37f4a:	614b      	str	r3, [r1, #20]
   37f4c:	bcf0      	pop	{r4, r5, r6, r7}
   37f4e:	4770      	bx	lr
   37f50:	4a33      	ldr	r2, [pc, #204]	; (38020 <am_hal_mcuctrl_info_get+0x11c>)
   37f52:	6993      	ldr	r3, [r2, #24]
   37f54:	f3c3 1080 	ubfx	r0, r3, #6, #1
   37f58:	f3c3 0380 	ubfx	r3, r3, #2, #1
   37f5c:	7008      	strb	r0, [r1, #0]
   37f5e:	704b      	strb	r3, [r1, #1]
   37f60:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   37f64:	f3c3 6381 	ubfx	r3, r3, #26, #2
   37f68:	710b      	strb	r3, [r1, #4]
   37f6a:	6953      	ldr	r3, [r2, #20]
   37f6c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   37f70:	f003 0301 	and.w	r3, r3, #1
   37f74:	2000      	movs	r0, #0
   37f76:	708a      	strb	r2, [r1, #2]
   37f78:	70cb      	strb	r3, [r1, #3]
   37f7a:	bcf0      	pop	{r4, r5, r6, r7}
   37f7c:	4770      	bx	lr
   37f7e:	4b28      	ldr	r3, [pc, #160]	; (38020 <am_hal_mcuctrl_info_get+0x11c>)
   37f80:	4c28      	ldr	r4, [pc, #160]	; (38024 <am_hal_mcuctrl_info_get+0x120>)
   37f82:	681a      	ldr	r2, [r3, #0]
   37f84:	600a      	str	r2, [r1, #0]
   37f86:	6858      	ldr	r0, [r3, #4]
   37f88:	6048      	str	r0, [r1, #4]
   37f8a:	6898      	ldr	r0, [r3, #8]
   37f8c:	6088      	str	r0, [r1, #8]
   37f8e:	68d8      	ldr	r0, [r3, #12]
   37f90:	60c8      	str	r0, [r1, #12]
   37f92:	691d      	ldr	r5, [r3, #16]
   37f94:	4824      	ldr	r0, [pc, #144]	; (38028 <am_hal_mcuctrl_info_get+0x124>)
   37f96:	610d      	str	r5, [r1, #16]
   37f98:	f3c2 5703 	ubfx	r7, r2, #20, #4
   37f9c:	f3c2 4603 	ubfx	r6, r2, #16, #4
   37fa0:	695d      	ldr	r5, [r3, #20]
   37fa2:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   37fa6:	4b21      	ldr	r3, [pc, #132]	; (3802c <am_hal_mcuctrl_info_get+0x128>)
   37fa8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   37fac:	6208      	str	r0, [r1, #32]
   37fae:	f002 0201 	and.w	r2, r2, #1
   37fb2:	614d      	str	r5, [r1, #20]
   37fb4:	61cc      	str	r4, [r1, #28]
   37fb6:	618a      	str	r2, [r1, #24]
   37fb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   37fbc:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   37fc0:	b2d0      	uxtb	r0, r2
   37fc2:	f004 020f 	and.w	r2, r4, #15
   37fc6:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   37fca:	624a      	str	r2, [r1, #36]	; 0x24
   37fcc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   37fd0:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   37fd4:	f3c2 1003 	ubfx	r0, r2, #4, #4
   37fd8:	f004 020f 	and.w	r2, r4, #15
   37fdc:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   37fe0:	628a      	str	r2, [r1, #40]	; 0x28
   37fe2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   37fe6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   37fea:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   37fee:	f3c2 1203 	ubfx	r2, r2, #4, #4
   37ff2:	4302      	orrs	r2, r0
   37ff4:	62ca      	str	r2, [r1, #44]	; 0x2c
   37ff6:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   37ffa:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   37ffe:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   38002:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   38006:	b2c0      	uxtb	r0, r0
   38008:	0400      	lsls	r0, r0, #16
   3800a:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   3800e:	b2d2      	uxtb	r2, r2
   38010:	431a      	orrs	r2, r3
   38012:	b2e3      	uxtb	r3, r4
   38014:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   38018:	630b      	str	r3, [r1, #48]	; 0x30
   3801a:	2000      	movs	r0, #0
   3801c:	bcf0      	pop	{r4, r5, r6, r7}
   3801e:	4770      	bx	lr
   38020:	40020000 	.word	0x40020000
   38024:	000442d4 	.word	0x000442d4
   38028:	00044314 	.word	0x00044314
   3802c:	f0000f00 	.word	0xf0000f00

00038030 <am_hal_pwrctrl_periph_enable>:
   38030:	b570      	push	{r4, r5, r6, lr}
   38032:	b082      	sub	sp, #8
   38034:	4604      	mov	r4, r0
   38036:	f7ff fed1 	bl	37ddc <am_hal_interrupt_master_disable>
   3803a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3803e:	4d0f      	ldr	r5, [pc, #60]	; (3807c <am_hal_pwrctrl_periph_enable+0x4c>)
   38040:	4e0f      	ldr	r6, [pc, #60]	; (38080 <am_hal_pwrctrl_periph_enable+0x50>)
   38042:	9001      	str	r0, [sp, #4]
   38044:	00a4      	lsls	r4, r4, #2
   38046:	68aa      	ldr	r2, [r5, #8]
   38048:	5933      	ldr	r3, [r6, r4]
   3804a:	4313      	orrs	r3, r2
   3804c:	60ab      	str	r3, [r5, #8]
   3804e:	9801      	ldr	r0, [sp, #4]
   38050:	4434      	add	r4, r6
   38052:	f7ff fec7 	bl	37de4 <am_hal_interrupt_master_set>
   38056:	20a0      	movs	r0, #160	; 0xa0
   38058:	f7ff fcba 	bl	379d0 <am_hal_flash_delay>
   3805c:	69ab      	ldr	r3, [r5, #24]
   3805e:	6864      	ldr	r4, [r4, #4]
   38060:	4223      	tst	r3, r4
   38062:	d103      	bne.n	3806c <am_hal_pwrctrl_periph_enable+0x3c>
   38064:	20a0      	movs	r0, #160	; 0xa0
   38066:	f7ff fcb3 	bl	379d0 <am_hal_flash_delay>
   3806a:	69ab      	ldr	r3, [r5, #24]
   3806c:	4b03      	ldr	r3, [pc, #12]	; (3807c <am_hal_pwrctrl_periph_enable+0x4c>)
   3806e:	699b      	ldr	r3, [r3, #24]
   38070:	4223      	tst	r3, r4
   38072:	bf0c      	ite	eq
   38074:	2001      	moveq	r0, #1
   38076:	2000      	movne	r0, #0
   38078:	b002      	add	sp, #8
   3807a:	bd70      	pop	{r4, r5, r6, pc}
   3807c:	40021000 	.word	0x40021000
   38080:	00044354 	.word	0x00044354

00038084 <am_hal_pwrctrl_periph_disable>:
   38084:	b570      	push	{r4, r5, r6, lr}
   38086:	b082      	sub	sp, #8
   38088:	4604      	mov	r4, r0
   3808a:	f7ff fea7 	bl	37ddc <am_hal_interrupt_master_disable>
   3808e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   38092:	4d10      	ldr	r5, [pc, #64]	; (380d4 <am_hal_pwrctrl_periph_disable+0x50>)
   38094:	4e10      	ldr	r6, [pc, #64]	; (380d8 <am_hal_pwrctrl_periph_disable+0x54>)
   38096:	9001      	str	r0, [sp, #4]
   38098:	00a4      	lsls	r4, r4, #2
   3809a:	68ab      	ldr	r3, [r5, #8]
   3809c:	5932      	ldr	r2, [r6, r4]
   3809e:	ea23 0302 	bic.w	r3, r3, r2
   380a2:	60ab      	str	r3, [r5, #8]
   380a4:	9801      	ldr	r0, [sp, #4]
   380a6:	4434      	add	r4, r6
   380a8:	f7ff fe9c 	bl	37de4 <am_hal_interrupt_master_set>
   380ac:	20a0      	movs	r0, #160	; 0xa0
   380ae:	f7ff fc8f 	bl	379d0 <am_hal_flash_delay>
   380b2:	69ab      	ldr	r3, [r5, #24]
   380b4:	6864      	ldr	r4, [r4, #4]
   380b6:	4223      	tst	r3, r4
   380b8:	d003      	beq.n	380c2 <am_hal_pwrctrl_periph_disable+0x3e>
   380ba:	20a0      	movs	r0, #160	; 0xa0
   380bc:	f7ff fc88 	bl	379d0 <am_hal_flash_delay>
   380c0:	69ab      	ldr	r3, [r5, #24]
   380c2:	4b04      	ldr	r3, [pc, #16]	; (380d4 <am_hal_pwrctrl_periph_disable+0x50>)
   380c4:	699b      	ldr	r3, [r3, #24]
   380c6:	4223      	tst	r3, r4
   380c8:	bf14      	ite	ne
   380ca:	2001      	movne	r0, #1
   380cc:	2000      	moveq	r0, #0
   380ce:	b002      	add	sp, #8
   380d0:	bd70      	pop	{r4, r5, r6, pc}
   380d2:	bf00      	nop
   380d4:	40021000 	.word	0x40021000
   380d8:	00044354 	.word	0x00044354

000380dc <am_hal_pwrctrl_low_power_init>:
   380dc:	b530      	push	{r4, r5, lr}
   380de:	4b33      	ldr	r3, [pc, #204]	; (381ac <am_hal_pwrctrl_low_power_init+0xd0>)
   380e0:	681a      	ldr	r2, [r3, #0]
   380e2:	b085      	sub	sp, #20
   380e4:	b912      	cbnz	r2, 380ec <am_hal_pwrctrl_low_power_init+0x10>
   380e6:	4a32      	ldr	r2, [pc, #200]	; (381b0 <am_hal_pwrctrl_low_power_init+0xd4>)
   380e8:	6812      	ldr	r2, [r2, #0]
   380ea:	601a      	str	r2, [r3, #0]
   380ec:	4b31      	ldr	r3, [pc, #196]	; (381b4 <am_hal_pwrctrl_low_power_init+0xd8>)
   380ee:	68db      	ldr	r3, [r3, #12]
   380f0:	b2db      	uxtb	r3, r3
   380f2:	2b12      	cmp	r3, #18
   380f4:	d00a      	beq.n	3810c <am_hal_pwrctrl_low_power_init+0x30>
   380f6:	4c30      	ldr	r4, [pc, #192]	; (381b8 <am_hal_pwrctrl_low_power_init+0xdc>)
   380f8:	2100      	movs	r1, #0
   380fa:	200c      	movs	r0, #12
   380fc:	f7ff fa0c 	bl	37518 <am_hal_cachectrl_control>
   38100:	69a3      	ldr	r3, [r4, #24]
   38102:	05d8      	lsls	r0, r3, #23
   38104:	d520      	bpl.n	38148 <am_hal_pwrctrl_low_power_init+0x6c>
   38106:	2000      	movs	r0, #0
   38108:	b005      	add	sp, #20
   3810a:	bd30      	pop	{r4, r5, pc}
   3810c:	4c2a      	ldr	r4, [pc, #168]	; (381b8 <am_hal_pwrctrl_low_power_init+0xdc>)
   3810e:	6863      	ldr	r3, [r4, #4]
   38110:	07d9      	lsls	r1, r3, #31
   38112:	d5f0      	bpl.n	380f6 <am_hal_pwrctrl_low_power_init+0x1a>
   38114:	f7ff fe62 	bl	37ddc <am_hal_interrupt_master_disable>
   38118:	9003      	str	r0, [sp, #12]
   3811a:	68a3      	ldr	r3, [r4, #8]
   3811c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   38120:	60a3      	str	r3, [r4, #8]
   38122:	9803      	ldr	r0, [sp, #12]
   38124:	f7ff fe5e 	bl	37de4 <am_hal_interrupt_master_set>
   38128:	20a0      	movs	r0, #160	; 0xa0
   3812a:	f7ff fc51 	bl	379d0 <am_hal_flash_delay>
   3812e:	69a3      	ldr	r3, [r4, #24]
   38130:	061a      	lsls	r2, r3, #24
   38132:	d403      	bmi.n	3813c <am_hal_pwrctrl_low_power_init+0x60>
   38134:	20a0      	movs	r0, #160	; 0xa0
   38136:	f7ff fc4b 	bl	379d0 <am_hal_flash_delay>
   3813a:	69a3      	ldr	r3, [r4, #24]
   3813c:	4b1e      	ldr	r3, [pc, #120]	; (381b8 <am_hal_pwrctrl_low_power_init+0xdc>)
   3813e:	699b      	ldr	r3, [r3, #24]
   38140:	061b      	lsls	r3, r3, #24
   38142:	d4d8      	bmi.n	380f6 <am_hal_pwrctrl_low_power_init+0x1a>
   38144:	2001      	movs	r0, #1
   38146:	e7df      	b.n	38108 <am_hal_pwrctrl_low_power_init+0x2c>
   38148:	4d1a      	ldr	r5, [pc, #104]	; (381b4 <am_hal_pwrctrl_low_power_init+0xd8>)
   3814a:	491c      	ldr	r1, [pc, #112]	; (381bc <am_hal_pwrctrl_low_power_init+0xe0>)
   3814c:	7e2a      	ldrb	r2, [r5, #24]
   3814e:	2001      	movs	r0, #1
   38150:	4302      	orrs	r2, r0
   38152:	2307      	movs	r3, #7
   38154:	762a      	strb	r2, [r5, #24]
   38156:	9000      	str	r0, [sp, #0]
   38158:	461a      	mov	r2, r3
   3815a:	f242 7010 	movw	r0, #10000	; 0x2710
   3815e:	f7ff fc47 	bl	379f0 <am_hal_flash_delay_status_check>
   38162:	b110      	cbz	r0, 3816a <am_hal_pwrctrl_low_power_init+0x8e>
   38164:	2004      	movs	r0, #4
   38166:	b005      	add	sp, #20
   38168:	bd30      	pop	{r4, r5, pc}
   3816a:	6823      	ldr	r3, [r4, #0]
   3816c:	f043 0301 	orr.w	r3, r3, #1
   38170:	6023      	str	r3, [r4, #0]
   38172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38178:	6263      	str	r3, [r4, #36]	; 0x24
   3817a:	68eb      	ldr	r3, [r5, #12]
   3817c:	b2db      	uxtb	r3, r3
   3817e:	2b11      	cmp	r3, #17
   38180:	d1c1      	bne.n	38106 <am_hal_pwrctrl_low_power_init+0x2a>
   38182:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   38186:	f360 5356 	bfi	r3, r0, #21, #2
   3818a:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   3818e:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   38192:	220f      	movs	r2, #15
   38194:	f362 138b 	bfi	r3, r2, #6, #6
   38198:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   3819c:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   381a0:	f362 0305 	bfi	r3, r2, #0, #6
   381a4:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   381a8:	e7ae      	b.n	38108 <am_hal_pwrctrl_low_power_init+0x2c>
   381aa:	bf00      	nop
   381ac:	10044044 	.word	0x10044044
   381b0:	4ffff000 	.word	0x4ffff000
   381b4:	40020000 	.word	0x40020000
   381b8:	40021000 	.word	0x40021000
   381bc:	40020018 	.word	0x40020018

000381c0 <am_hal_queue_init>:
   381c0:	b410      	push	{r4}
   381c2:	2400      	movs	r4, #0
   381c4:	6004      	str	r4, [r0, #0]
   381c6:	6044      	str	r4, [r0, #4]
   381c8:	6084      	str	r4, [r0, #8]
   381ca:	60c3      	str	r3, [r0, #12]
   381cc:	6102      	str	r2, [r0, #16]
   381ce:	6141      	str	r1, [r0, #20]
   381d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   381d4:	4770      	bx	lr
   381d6:	bf00      	nop

000381d8 <am_hal_queue_item_add>:
   381d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   381da:	4604      	mov	r4, r0
   381dc:	6906      	ldr	r6, [r0, #16]
   381de:	b083      	sub	sp, #12
   381e0:	fb06 f602 	mul.w	r6, r6, r2
   381e4:	460d      	mov	r5, r1
   381e6:	f7ff fdf9 	bl	37ddc <am_hal_interrupt_master_disable>
   381ea:	68e7      	ldr	r7, [r4, #12]
   381ec:	68a2      	ldr	r2, [r4, #8]
   381ee:	9001      	str	r0, [sp, #4]
   381f0:	1abb      	subs	r3, r7, r2
   381f2:	429e      	cmp	r6, r3
   381f4:	d826      	bhi.n	38244 <am_hal_queue_item_add+0x6c>
   381f6:	b196      	cbz	r6, 3821e <am_hal_queue_item_add+0x46>
   381f8:	6823      	ldr	r3, [r4, #0]
   381fa:	4629      	mov	r1, r5
   381fc:	b1c5      	cbz	r5, 38230 <am_hal_queue_item_add+0x58>
   381fe:	19af      	adds	r7, r5, r6
   38200:	6962      	ldr	r2, [r4, #20]
   38202:	f811 0b01 	ldrb.w	r0, [r1], #1
   38206:	54d0      	strb	r0, [r2, r3]
   38208:	6823      	ldr	r3, [r4, #0]
   3820a:	68e5      	ldr	r5, [r4, #12]
   3820c:	3301      	adds	r3, #1
   3820e:	42b9      	cmp	r1, r7
   38210:	fbb3 f0f5 	udiv	r0, r3, r5
   38214:	fb05 3310 	mls	r3, r5, r0, r3
   38218:	6023      	str	r3, [r4, #0]
   3821a:	d1f1      	bne.n	38200 <am_hal_queue_item_add+0x28>
   3821c:	68a2      	ldr	r2, [r4, #8]
   3821e:	4432      	add	r2, r6
   38220:	60a2      	str	r2, [r4, #8]
   38222:	2401      	movs	r4, #1
   38224:	9801      	ldr	r0, [sp, #4]
   38226:	f7ff fddd 	bl	37de4 <am_hal_interrupt_master_set>
   3822a:	4620      	mov	r0, r4
   3822c:	b003      	add	sp, #12
   3822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38230:	3101      	adds	r1, #1
   38232:	3301      	adds	r3, #1
   38234:	428e      	cmp	r6, r1
   38236:	fbb3 f0f7 	udiv	r0, r3, r7
   3823a:	fb07 3310 	mls	r3, r7, r0, r3
   3823e:	d1f7      	bne.n	38230 <am_hal_queue_item_add+0x58>
   38240:	6023      	str	r3, [r4, #0]
   38242:	e7ec      	b.n	3821e <am_hal_queue_item_add+0x46>
   38244:	2400      	movs	r4, #0
   38246:	e7ed      	b.n	38224 <am_hal_queue_item_add+0x4c>

00038248 <am_hal_queue_item_get>:
   38248:	b5f0      	push	{r4, r5, r6, r7, lr}
   3824a:	4604      	mov	r4, r0
   3824c:	6906      	ldr	r6, [r0, #16]
   3824e:	b083      	sub	sp, #12
   38250:	fb06 f602 	mul.w	r6, r6, r2
   38254:	460d      	mov	r5, r1
   38256:	f7ff fdc1 	bl	37ddc <am_hal_interrupt_master_disable>
   3825a:	68a2      	ldr	r2, [r4, #8]
   3825c:	9001      	str	r0, [sp, #4]
   3825e:	4296      	cmp	r6, r2
   38260:	d81c      	bhi.n	3829c <am_hal_queue_item_get+0x54>
   38262:	b196      	cbz	r6, 3828a <am_hal_queue_item_get+0x42>
   38264:	6863      	ldr	r3, [r4, #4]
   38266:	b1dd      	cbz	r5, 382a0 <am_hal_queue_item_get+0x58>
   38268:	4629      	mov	r1, r5
   3826a:	19af      	adds	r7, r5, r6
   3826c:	6962      	ldr	r2, [r4, #20]
   3826e:	5cd3      	ldrb	r3, [r2, r3]
   38270:	f801 3b01 	strb.w	r3, [r1], #1
   38274:	6863      	ldr	r3, [r4, #4]
   38276:	68e5      	ldr	r5, [r4, #12]
   38278:	3301      	adds	r3, #1
   3827a:	428f      	cmp	r7, r1
   3827c:	fbb3 f0f5 	udiv	r0, r3, r5
   38280:	fb05 3310 	mls	r3, r5, r0, r3
   38284:	6063      	str	r3, [r4, #4]
   38286:	d1f1      	bne.n	3826c <am_hal_queue_item_get+0x24>
   38288:	68a2      	ldr	r2, [r4, #8]
   3828a:	1b92      	subs	r2, r2, r6
   3828c:	60a2      	str	r2, [r4, #8]
   3828e:	2401      	movs	r4, #1
   38290:	9801      	ldr	r0, [sp, #4]
   38292:	f7ff fda7 	bl	37de4 <am_hal_interrupt_master_set>
   38296:	4620      	mov	r0, r4
   38298:	b003      	add	sp, #12
   3829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3829c:	2400      	movs	r4, #0
   3829e:	e7f7      	b.n	38290 <am_hal_queue_item_get+0x48>
   382a0:	68e0      	ldr	r0, [r4, #12]
   382a2:	4629      	mov	r1, r5
   382a4:	3101      	adds	r1, #1
   382a6:	3301      	adds	r3, #1
   382a8:	428e      	cmp	r6, r1
   382aa:	fbb3 f5f0 	udiv	r5, r3, r0
   382ae:	fb00 3315 	mls	r3, r0, r5, r3
   382b2:	d1f7      	bne.n	382a4 <am_hal_queue_item_get+0x5c>
   382b4:	6063      	str	r3, [r4, #4]
   382b6:	e7e8      	b.n	3828a <am_hal_queue_item_get+0x42>

000382b8 <am_hal_rtc_osc_select>:
   382b8:	b928      	cbnz	r0, 382c6 <am_hal_rtc_osc_select+0xe>
   382ba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   382be:	68d3      	ldr	r3, [r2, #12]
   382c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   382c4:	60d3      	str	r3, [r2, #12]
   382c6:	4770      	bx	lr

000382c8 <am_hal_rtc_osc_disable>:
   382c8:	4a03      	ldr	r2, [pc, #12]	; (382d8 <am_hal_rtc_osc_disable+0x10>)
   382ca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   382ce:	f043 0310 	orr.w	r3, r3, #16
   382d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   382d6:	4770      	bx	lr
   382d8:	40004200 	.word	0x40004200

000382dc <am_hal_stimer_config>:
   382dc:	4b03      	ldr	r3, [pc, #12]	; (382ec <am_hal_stimer_config+0x10>)
   382de:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   382e2:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   382e6:	4610      	mov	r0, r2
   382e8:	4770      	bx	lr
   382ea:	bf00      	nop
   382ec:	40008000 	.word	0x40008000

000382f0 <am_hal_stimer_counter_get>:
   382f0:	4b01      	ldr	r3, [pc, #4]	; (382f8 <am_hal_stimer_counter_get+0x8>)
   382f2:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   382f6:	4770      	bx	lr
   382f8:	40008000 	.word	0x40008000

000382fc <am_hal_stimer_compare_delta_set>:
   382fc:	2807      	cmp	r0, #7
   382fe:	d900      	bls.n	38302 <am_hal_stimer_compare_delta_set+0x6>
   38300:	4770      	bx	lr
   38302:	b570      	push	{r4, r5, r6, lr}
   38304:	b082      	sub	sp, #8
   38306:	460c      	mov	r4, r1
   38308:	4605      	mov	r5, r0
   3830a:	f7ff fd67 	bl	37ddc <am_hal_interrupt_master_disable>
   3830e:	4923      	ldr	r1, [pc, #140]	; (3839c <am_hal_stimer_compare_delta_set+0xa0>)
   38310:	9001      	str	r0, [sp, #4]
   38312:	4b23      	ldr	r3, [pc, #140]	; (383a0 <am_hal_stimer_compare_delta_set+0xa4>)
   38314:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   38318:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   3831c:	f44f 7280 	mov.w	r2, #256	; 0x100
   38320:	442b      	add	r3, r5
   38322:	40aa      	lsls	r2, r5
   38324:	ea26 0502 	bic.w	r5, r6, r2
   38328:	009b      	lsls	r3, r3, #2
   3832a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   3832e:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   38332:	601c      	str	r4, [r3, #0]
   38334:	681d      	ldr	r5, [r3, #0]
   38336:	4421      	add	r1, r4
   38338:	1a6e      	subs	r6, r5, r1
   3833a:	2e00      	cmp	r6, #0
   3833c:	db03      	blt.n	38346 <am_hal_stimer_compare_delta_set+0x4a>
   3833e:	310a      	adds	r1, #10
   38340:	1a69      	subs	r1, r5, r1
   38342:	2900      	cmp	r1, #0
   38344:	dd1e      	ble.n	38384 <am_hal_stimer_compare_delta_set+0x88>
   38346:	4915      	ldr	r1, [pc, #84]	; (3839c <am_hal_stimer_compare_delta_set+0xa0>)
   38348:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   3834c:	601c      	str	r4, [r3, #0]
   3834e:	681d      	ldr	r5, [r3, #0]
   38350:	4421      	add	r1, r4
   38352:	1a6e      	subs	r6, r5, r1
   38354:	2e00      	cmp	r6, #0
   38356:	db03      	blt.n	38360 <am_hal_stimer_compare_delta_set+0x64>
   38358:	310a      	adds	r1, #10
   3835a:	1a69      	subs	r1, r5, r1
   3835c:	2900      	cmp	r1, #0
   3835e:	dd11      	ble.n	38384 <am_hal_stimer_compare_delta_set+0x88>
   38360:	490e      	ldr	r1, [pc, #56]	; (3839c <am_hal_stimer_compare_delta_set+0xa0>)
   38362:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   38366:	601c      	str	r4, [r3, #0]
   38368:	681d      	ldr	r5, [r3, #0]
   3836a:	4421      	add	r1, r4
   3836c:	1a6e      	subs	r6, r5, r1
   3836e:	2e00      	cmp	r6, #0
   38370:	db03      	blt.n	3837a <am_hal_stimer_compare_delta_set+0x7e>
   38372:	310a      	adds	r1, #10
   38374:	1a69      	subs	r1, r5, r1
   38376:	2900      	cmp	r1, #0
   38378:	dd04      	ble.n	38384 <am_hal_stimer_compare_delta_set+0x88>
   3837a:	4908      	ldr	r1, [pc, #32]	; (3839c <am_hal_stimer_compare_delta_set+0xa0>)
   3837c:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   38380:	601c      	str	r4, [r3, #0]
   38382:	681b      	ldr	r3, [r3, #0]
   38384:	4905      	ldr	r1, [pc, #20]	; (3839c <am_hal_stimer_compare_delta_set+0xa0>)
   38386:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   3838a:	4002      	ands	r2, r0
   3838c:	431a      	orrs	r2, r3
   3838e:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   38392:	9801      	ldr	r0, [sp, #4]
   38394:	f7ff fd26 	bl	37de4 <am_hal_interrupt_master_set>
   38398:	b002      	add	sp, #8
   3839a:	bd70      	pop	{r4, r5, r6, pc}
   3839c:	40008000 	.word	0x40008000
   383a0:	10002054 	.word	0x10002054

000383a4 <am_hal_stimer_int_enable>:
   383a4:	4a03      	ldr	r2, [pc, #12]	; (383b4 <am_hal_stimer_int_enable+0x10>)
   383a6:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   383aa:	4318      	orrs	r0, r3
   383ac:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   383b0:	4770      	bx	lr
   383b2:	bf00      	nop
   383b4:	40008000 	.word	0x40008000

000383b8 <am_hal_stimer_int_clear>:
   383b8:	4b01      	ldr	r3, [pc, #4]	; (383c0 <am_hal_stimer_int_clear+0x8>)
   383ba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   383be:	4770      	bx	lr
   383c0:	40008000 	.word	0x40008000

000383c4 <am_hal_stimer_int_status_get>:
   383c4:	4a04      	ldr	r2, [pc, #16]	; (383d8 <am_hal_stimer_int_status_get+0x14>)
   383c6:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   383ca:	b110      	cbz	r0, 383d2 <am_hal_stimer_int_status_get+0xe>
   383cc:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   383d0:	4013      	ands	r3, r2
   383d2:	4618      	mov	r0, r3
   383d4:	4770      	bx	lr
   383d6:	bf00      	nop
   383d8:	40008000 	.word	0x40008000

000383dc <am_hal_sysctrl_sleep>:
   383dc:	b510      	push	{r4, lr}
   383de:	b082      	sub	sp, #8
   383e0:	4604      	mov	r4, r0
   383e2:	f7ff fcfb 	bl	37ddc <am_hal_interrupt_master_disable>
   383e6:	9001      	str	r0, [sp, #4]
   383e8:	b124      	cbz	r4, 383f4 <am_hal_sysctrl_sleep+0x18>
   383ea:	4b12      	ldr	r3, [pc, #72]	; (38434 <am_hal_sysctrl_sleep+0x58>)
   383ec:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   383f0:	07db      	lsls	r3, r3, #31
   383f2:	d512      	bpl.n	3841a <am_hal_sysctrl_sleep+0x3e>
   383f4:	4a10      	ldr	r2, [pc, #64]	; (38438 <am_hal_sysctrl_sleep+0x5c>)
   383f6:	6913      	ldr	r3, [r2, #16]
   383f8:	f023 0304 	bic.w	r3, r3, #4
   383fc:	6113      	str	r3, [r2, #16]
   383fe:	f3bf 8f4f 	dsb	sy
   38402:	4a0e      	ldr	r2, [pc, #56]	; (3843c <am_hal_sysctrl_sleep+0x60>)
   38404:	4b0e      	ldr	r3, [pc, #56]	; (38440 <am_hal_sysctrl_sleep+0x64>)
   38406:	6812      	ldr	r2, [r2, #0]
   38408:	601a      	str	r2, [r3, #0]
   3840a:	bf30      	wfi
   3840c:	f3bf 8f6f 	isb	sy
   38410:	9801      	ldr	r0, [sp, #4]
   38412:	f7ff fce7 	bl	37de4 <am_hal_interrupt_master_set>
   38416:	b002      	add	sp, #8
   38418:	bd10      	pop	{r4, pc}
   3841a:	4b0a      	ldr	r3, [pc, #40]	; (38444 <am_hal_sysctrl_sleep+0x68>)
   3841c:	681a      	ldr	r2, [r3, #0]
   3841e:	b912      	cbnz	r2, 38426 <am_hal_sysctrl_sleep+0x4a>
   38420:	4a09      	ldr	r2, [pc, #36]	; (38448 <am_hal_sysctrl_sleep+0x6c>)
   38422:	6812      	ldr	r2, [r2, #0]
   38424:	601a      	str	r2, [r3, #0]
   38426:	4a04      	ldr	r2, [pc, #16]	; (38438 <am_hal_sysctrl_sleep+0x5c>)
   38428:	6913      	ldr	r3, [r2, #16]
   3842a:	f043 0304 	orr.w	r3, r3, #4
   3842e:	6113      	str	r3, [r2, #16]
   38430:	e7e5      	b.n	383fe <am_hal_sysctrl_sleep+0x22>
   38432:	bf00      	nop
   38434:	40020000 	.word	0x40020000
   38438:	e000ed00 	.word	0xe000ed00
   3843c:	5fff0000 	.word	0x5fff0000
   38440:	10044048 	.word	0x10044048
   38444:	10044044 	.word	0x10044044
   38448:	4ffff000 	.word	0x4ffff000

0003844c <am_hal_tpiu_enable>:
   3844c:	b530      	push	{r4, r5, lr}
   3844e:	4a23      	ldr	r2, [pc, #140]	; (384dc <am_hal_tpiu_enable+0x90>)
   38450:	6804      	ldr	r4, [r0, #0]
   38452:	2300      	movs	r3, #0
   38454:	b085      	sub	sp, #20
   38456:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   3845a:	b334      	cbz	r4, 384aa <am_hal_tpiu_enable+0x5e>
   3845c:	4b20      	ldr	r3, [pc, #128]	; (384e0 <am_hal_tpiu_enable+0x94>)
   3845e:	4921      	ldr	r1, [pc, #132]	; (384e4 <am_hal_tpiu_enable+0x98>)
   38460:	2001      	movs	r0, #1
   38462:	6050      	str	r0, [r2, #4]
   38464:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   38468:	a801      	add	r0, sp, #4
   3846a:	428a      	cmp	r2, r1
   3846c:	bf88      	it	hi
   3846e:	461c      	movhi	r4, r3
   38470:	f7ff fa50 	bl	37914 <am_hal_clkgen_status_get>
   38474:	9b01      	ldr	r3, [sp, #4]
   38476:	1c5a      	adds	r2, r3, #1
   38478:	d02d      	beq.n	384d6 <am_hal_tpiu_enable+0x8a>
   3847a:	08db      	lsrs	r3, r3, #3
   3847c:	fbb3 f3f4 	udiv	r3, r3, r4
   38480:	3b01      	subs	r3, #1
   38482:	b29b      	uxth	r3, r3
   38484:	4a15      	ldr	r2, [pc, #84]	; (384dc <am_hal_tpiu_enable+0x90>)
   38486:	4918      	ldr	r1, [pc, #96]	; (384e8 <am_hal_tpiu_enable+0x9c>)
   38488:	6113      	str	r3, [r2, #16]
   3848a:	2402      	movs	r4, #2
   3848c:	f240 2301 	movw	r3, #513	; 0x201
   38490:	2000      	movs	r0, #0
   38492:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   38496:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   3849a:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   3849e:	f44f 7048 	mov.w	r0, #800	; 0x320
   384a2:	f7ff fa95 	bl	379d0 <am_hal_flash_delay>
   384a6:	b005      	add	sp, #20
   384a8:	bd30      	pop	{r4, r5, pc}
   384aa:	6903      	ldr	r3, [r0, #16]
   384ac:	6113      	str	r3, [r2, #16]
   384ae:	6883      	ldr	r3, [r0, #8]
   384b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   384b4:	68c3      	ldr	r3, [r0, #12]
   384b6:	4d0c      	ldr	r5, [pc, #48]	; (384e8 <am_hal_tpiu_enable+0x9c>)
   384b8:	1e59      	subs	r1, r3, #1
   384ba:	2301      	movs	r3, #1
   384bc:	408b      	lsls	r3, r1
   384be:	6053      	str	r3, [r2, #4]
   384c0:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   384c4:	6843      	ldr	r3, [r0, #4]
   384c6:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   384ca:	f44f 7048 	mov.w	r0, #800	; 0x320
   384ce:	f7ff fa7f 	bl	379d0 <am_hal_flash_delay>
   384d2:	b005      	add	sp, #20
   384d4:	bd30      	pop	{r4, r5, pc}
   384d6:	2305      	movs	r3, #5
   384d8:	e7d4      	b.n	38484 <am_hal_tpiu_enable+0x38>
   384da:	bf00      	nop
   384dc:	e0040000 	.word	0xe0040000
   384e0:	000f4240 	.word	0x000f4240
   384e4:	001da380 	.word	0x001da380
   384e8:	40020000 	.word	0x40020000

000384ec <am_app_KWD_AMA_tx_ver_exchange_send>:
   384ec:	b510      	push	{r4, lr}
   384ee:	b0c2      	sub	sp, #264	; 0x108
   384f0:	2300      	movs	r3, #0
   384f2:	2214      	movs	r2, #20
   384f4:	f240 31fe 	movw	r1, #1022	; 0x3fe
   384f8:	f8cd 3002 	str.w	r3, [sp, #2]
   384fc:	f8cd 3006 	str.w	r3, [sp, #6]
   38500:	f8cd 300a 	str.w	r3, [sp, #10]
   38504:	f8cd 300e 	str.w	r3, [sp, #14]
   38508:	f8ad 3012 	strh.w	r3, [sp, #18]
   3850c:	2401      	movs	r4, #1
   3850e:	23ff      	movs	r3, #255	; 0xff
   38510:	f8ad 1000 	strh.w	r1, [sp]
   38514:	4668      	mov	r0, sp
   38516:	4611      	mov	r1, r2
   38518:	f88d 4002 	strb.w	r4, [sp, #2]
   3851c:	f88d 3005 	strb.w	r3, [sp, #5]
   38520:	f88d 3007 	strb.w	r3, [sp, #7]
   38524:	9240      	str	r2, [sp, #256]	; 0x100
   38526:	f7e1 fdfb 	bl	1a120 <VoleBleSend>
   3852a:	4620      	mov	r0, r4
   3852c:	b042      	add	sp, #264	; 0x108
   3852e:	bd10      	pop	{r4, pc}

00038530 <am_app_KWD_AMA_stream_send>:
   38530:	b510      	push	{r4, lr}
   38532:	b0c2      	sub	sp, #264	; 0x108
   38534:	460c      	mov	r4, r1
   38536:	4622      	mov	r2, r4
   38538:	f248 0310 	movw	r3, #32784	; 0x8010
   3853c:	4601      	mov	r1, r0
   3853e:	f88d 4002 	strb.w	r4, [sp, #2]
   38542:	f10d 0003 	add.w	r0, sp, #3
   38546:	3403      	adds	r4, #3
   38548:	f8ad 3000 	strh.w	r3, [sp]
   3854c:	f7d3 fe08 	bl	c160 <memcpy>
   38550:	4621      	mov	r1, r4
   38552:	4668      	mov	r0, sp
   38554:	9440      	str	r4, [sp, #256]	; 0x100
   38556:	f7e1 fde3 	bl	1a120 <VoleBleSend>
   3855a:	f8bd 0100 	ldrh.w	r0, [sp, #256]	; 0x100
   3855e:	b042      	add	sp, #264	; 0x108
   38560:	bd10      	pop	{r4, pc}
   38562:	bf00      	nop

00038564 <am_app_KWD_AMA_sync_rsp_send>:
   38564:	b570      	push	{r4, r5, r6, lr}
   38566:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   3856a:	f44f 7290 	mov.w	r2, #288	; 0x120
   3856e:	2100      	movs	r1, #0
   38570:	a868      	add	r0, sp, #416	; 0x1a0
   38572:	f7d3 fef3 	bl	c35c <memset>
   38576:	2280      	movs	r2, #128	; 0x80
   38578:	2100      	movs	r1, #0
   3857a:	a806      	add	r0, sp, #24
   3857c:	f7d3 feee 	bl	c35c <memset>
   38580:	a906      	add	r1, sp, #24
   38582:	a801      	add	r0, sp, #4
   38584:	2280      	movs	r2, #128	; 0x80
   38586:	f001 fffd 	bl	3a584 <pb_ostream_from_buffer>
   3858a:	2232      	movs	r2, #50	; 0x32
   3858c:	2009      	movs	r0, #9
   3858e:	2100      	movs	r1, #0
   38590:	2301      	movs	r3, #1
   38592:	f88d 21a0 	strb.w	r2, [sp, #416]	; 0x1a0
   38596:	f8ad 01a2 	strh.w	r0, [sp, #418]	; 0x1a2
   3859a:	f88d 11a4 	strb.w	r1, [sp, #420]	; 0x1a4
   3859e:	aa68      	add	r2, sp, #416	; 0x1a0
   385a0:	a801      	add	r0, sp, #4
   385a2:	490f      	ldr	r1, [pc, #60]	; (385e0 <am_app_KWD_AMA_sync_rsp_send+0x7c>)
   385a4:	f8ad 31a6 	strh.w	r3, [sp, #422]	; 0x1a6
   385a8:	f002 fb58 	bl	3ac5c <pb_encode>
   385ac:	4604      	mov	r4, r0
   385ae:	b190      	cbz	r0, 385d6 <am_app_KWD_AMA_sync_rsp_send+0x72>
   385b0:	9b04      	ldr	r3, [sp, #16]
   385b2:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   385b6:	b2dd      	uxtb	r5, r3
   385b8:	a906      	add	r1, sp, #24
   385ba:	462a      	mov	r2, r5
   385bc:	2610      	movs	r6, #16
   385be:	3503      	adds	r5, #3
   385c0:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   385c4:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   385c8:	f7d3 fdca 	bl	c160 <memcpy>
   385cc:	4629      	mov	r1, r5
   385ce:	a826      	add	r0, sp, #152	; 0x98
   385d0:	9566      	str	r5, [sp, #408]	; 0x198
   385d2:	f7e1 fda5 	bl	1a120 <VoleBleSend>
   385d6:	4620      	mov	r0, r4
   385d8:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   385dc:	bd70      	pop	{r4, r5, r6, pc}
   385de:	bf00      	nop
   385e0:	0004457c 	.word	0x0004457c

000385e4 <am_app_KWD_AMA_rsp_send>:
   385e4:	b570      	push	{r4, r5, r6, lr}
   385e6:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   385ea:	4606      	mov	r6, r0
   385ec:	460d      	mov	r5, r1
   385ee:	f44f 7290 	mov.w	r2, #288	; 0x120
   385f2:	2100      	movs	r1, #0
   385f4:	a868      	add	r0, sp, #416	; 0x1a0
   385f6:	f7d3 feb1 	bl	c35c <memset>
   385fa:	2280      	movs	r2, #128	; 0x80
   385fc:	2100      	movs	r1, #0
   385fe:	a806      	add	r0, sp, #24
   38600:	f7d3 feac 	bl	c35c <memset>
   38604:	a906      	add	r1, sp, #24
   38606:	a801      	add	r0, sp, #4
   38608:	2280      	movs	r2, #128	; 0x80
   3860a:	f001 ffbb 	bl	3a584 <pb_ostream_from_buffer>
   3860e:	2409      	movs	r4, #9
   38610:	2301      	movs	r3, #1
   38612:	aa68      	add	r2, sp, #416	; 0x1a0
   38614:	a801      	add	r0, sp, #4
   38616:	4912      	ldr	r1, [pc, #72]	; (38660 <am_app_KWD_AMA_rsp_send+0x7c>)
   38618:	f8ad 41a2 	strh.w	r4, [sp, #418]	; 0x1a2
   3861c:	f88d 61a0 	strb.w	r6, [sp, #416]	; 0x1a0
   38620:	f88d 51a4 	strb.w	r5, [sp, #420]	; 0x1a4
   38624:	f8ad 31a6 	strh.w	r3, [sp, #422]	; 0x1a6
   38628:	f002 fb18 	bl	3ac5c <pb_encode>
   3862c:	4604      	mov	r4, r0
   3862e:	b190      	cbz	r0, 38656 <am_app_KWD_AMA_rsp_send+0x72>
   38630:	9b04      	ldr	r3, [sp, #16]
   38632:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   38636:	b2dd      	uxtb	r5, r3
   38638:	a906      	add	r1, sp, #24
   3863a:	462a      	mov	r2, r5
   3863c:	2610      	movs	r6, #16
   3863e:	3503      	adds	r5, #3
   38640:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   38644:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   38648:	f7d3 fd8a 	bl	c160 <memcpy>
   3864c:	4629      	mov	r1, r5
   3864e:	a826      	add	r0, sp, #152	; 0x98
   38650:	9566      	str	r5, [sp, #408]	; 0x198
   38652:	f7e1 fd65 	bl	1a120 <VoleBleSend>
   38656:	4620      	mov	r0, r4
   38658:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   3865c:	bd70      	pop	{r4, r5, r6, pc}
   3865e:	bf00      	nop
   38660:	0004457c 	.word	0x0004457c

00038664 <am_app_KWD_AMA_start_speech_send>:
   38664:	b570      	push	{r4, r5, r6, lr}
   38666:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   3866a:	f44f 7290 	mov.w	r2, #288	; 0x120
   3866e:	2100      	movs	r1, #0
   38670:	a868      	add	r0, sp, #416	; 0x1a0
   38672:	f7d3 fe73 	bl	c35c <memset>
   38676:	2280      	movs	r2, #128	; 0x80
   38678:	2100      	movs	r1, #0
   3867a:	a806      	add	r0, sp, #24
   3867c:	f7d3 fe6e 	bl	c35c <memset>
   38680:	f7dc fdde 	bl	15240 <voles_get_codec_type>
   38684:	4d31      	ldr	r5, [pc, #196]	; (3874c <am_app_KWD_AMA_start_speech_send+0xe8>)
   38686:	4601      	mov	r1, r0
   38688:	4604      	mov	r4, r0
   3868a:	782a      	ldrb	r2, [r5, #0]
   3868c:	4830      	ldr	r0, [pc, #192]	; (38750 <am_app_KWD_AMA_start_speech_send+0xec>)
   3868e:	f7e8 f84f 	bl	20730 <WsfTrace>
   38692:	a906      	add	r1, sp, #24
   38694:	a801      	add	r0, sp, #4
   38696:	2280      	movs	r2, #128	; 0x80
   38698:	f001 ff74 	bl	3a584 <pb_ostream_from_buffer>
   3869c:	230b      	movs	r3, #11
   3869e:	2c01      	cmp	r4, #1
   386a0:	f88d 31a0 	strb.w	r3, [sp, #416]	; 0x1a0
   386a4:	f8ad 31a2 	strh.w	r3, [sp, #418]	; 0x1a2
   386a8:	d043      	beq.n	38732 <am_app_KWD_AMA_start_speech_send+0xce>
   386aa:	b37c      	cbz	r4, 3870c <am_app_KWD_AMA_start_speech_send+0xa8>
   386ac:	4b29      	ldr	r3, [pc, #164]	; (38754 <am_app_KWD_AMA_start_speech_send+0xf0>)
   386ae:	781b      	ldrb	r3, [r3, #0]
   386b0:	2101      	movs	r1, #1
   386b2:	2200      	movs	r2, #0
   386b4:	f88d 11a4 	strb.w	r1, [sp, #420]	; 0x1a4
   386b8:	f88d 21a6 	strb.w	r2, [sp, #422]	; 0x1a6
   386bc:	b913      	cbnz	r3, 386c4 <am_app_KWD_AMA_start_speech_send+0x60>
   386be:	4b26      	ldr	r3, [pc, #152]	; (38758 <am_app_KWD_AMA_start_speech_send+0xf4>)
   386c0:	781b      	ldrb	r3, [r3, #0]
   386c2:	bb3b      	cbnz	r3, 38714 <am_app_KWD_AMA_start_speech_send+0xb0>
   386c4:	2303      	movs	r3, #3
   386c6:	f88d 31a8 	strb.w	r3, [sp, #424]	; 0x1a8
   386ca:	4b24      	ldr	r3, [pc, #144]	; (3875c <am_app_KWD_AMA_start_speech_send+0xf8>)
   386cc:	4924      	ldr	r1, [pc, #144]	; (38760 <am_app_KWD_AMA_start_speech_send+0xfc>)
   386ce:	681b      	ldr	r3, [r3, #0]
   386d0:	93ae      	str	r3, [sp, #696]	; 0x2b8
   386d2:	aa68      	add	r2, sp, #416	; 0x1a0
   386d4:	a801      	add	r0, sp, #4
   386d6:	f002 fac1 	bl	3ac5c <pb_encode>
   386da:	4604      	mov	r4, r0
   386dc:	b190      	cbz	r0, 38704 <am_app_KWD_AMA_start_speech_send+0xa0>
   386de:	9b04      	ldr	r3, [sp, #16]
   386e0:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   386e4:	b2dd      	uxtb	r5, r3
   386e6:	a906      	add	r1, sp, #24
   386e8:	462a      	mov	r2, r5
   386ea:	2610      	movs	r6, #16
   386ec:	3503      	adds	r5, #3
   386ee:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   386f2:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   386f6:	f7d3 fd33 	bl	c160 <memcpy>
   386fa:	4629      	mov	r1, r5
   386fc:	a826      	add	r0, sp, #152	; 0x98
   386fe:	9566      	str	r5, [sp, #408]	; 0x198
   38700:	f7e1 fd0e 	bl	1a120 <VoleBleSend>
   38704:	4620      	mov	r0, r4
   38706:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   3870a:	bd70      	pop	{r4, r5, r6, pc}
   3870c:	2303      	movs	r3, #3
   3870e:	f88d 31a5 	strb.w	r3, [sp, #421]	; 0x1a5
   38712:	e7cb      	b.n	386ac <am_app_KWD_AMA_start_speech_send+0x48>
   38714:	4b13      	ldr	r3, [pc, #76]	; (38764 <am_app_KWD_AMA_start_speech_send+0x100>)
   38716:	4a14      	ldr	r2, [pc, #80]	; (38768 <am_app_KWD_AMA_start_speech_send+0x104>)
   38718:	681b      	ldr	r3, [r3, #0]
   3871a:	6812      	ldr	r2, [r2, #0]
   3871c:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
   38720:	1a9b      	subs	r3, r3, r2
   38722:	2104      	movs	r1, #4
   38724:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   38728:	936c      	str	r3, [sp, #432]	; 0x1b0
   3872a:	f88d 11a8 	strb.w	r1, [sp, #424]	; 0x1a8
   3872e:	926b      	str	r2, [sp, #428]	; 0x1ac
   38730:	e7cb      	b.n	386ca <am_app_KWD_AMA_start_speech_send+0x66>
   38732:	782b      	ldrb	r3, [r5, #0]
   38734:	2b02      	cmp	r3, #2
   38736:	d005      	beq.n	38744 <am_app_KWD_AMA_start_speech_send+0xe0>
   38738:	2b01      	cmp	r3, #1
   3873a:	d1b7      	bne.n	386ac <am_app_KWD_AMA_start_speech_send+0x48>
   3873c:	2302      	movs	r3, #2
   3873e:	f88d 31a5 	strb.w	r3, [sp, #421]	; 0x1a5
   38742:	e7b3      	b.n	386ac <am_app_KWD_AMA_start_speech_send+0x48>
   38744:	f88d 41a5 	strb.w	r4, [sp, #421]	; 0x1a5
   38748:	e7b0      	b.n	386ac <am_app_KWD_AMA_start_speech_send+0x48>
   3874a:	bf00      	nop
   3874c:	1004404c 	.word	0x1004404c
   38750:	00044544 	.word	0x00044544
   38754:	1001af18 	.word	0x1001af18
   38758:	10017f54 	.word	0x10017f54
   3875c:	10044050 	.word	0x10044050
   38760:	0004457c 	.word	0x0004457c
   38764:	1001af10 	.word	0x1001af10
   38768:	1001af14 	.word	0x1001af14

0003876c <am_app_KWD_AMA_get_devinfo_rsp_send>:
   3876c:	b570      	push	{r4, r5, r6, lr}
   3876e:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
   38772:	f44f 7290 	mov.w	r2, #288	; 0x120
   38776:	2100      	movs	r1, #0
   38778:	a86a      	add	r0, sp, #424	; 0x1a8
   3877a:	f7d3 fdef 	bl	c35c <memset>
   3877e:	2280      	movs	r2, #128	; 0x80
   38780:	2100      	movs	r1, #0
   38782:	a808      	add	r0, sp, #32
   38784:	f7d3 fdea 	bl	c35c <memset>
   38788:	a908      	add	r1, sp, #32
   3878a:	a803      	add	r0, sp, #12
   3878c:	2280      	movs	r2, #128	; 0x80
   3878e:	f001 fef9 	bl	3a584 <pb_ostream_from_buffer>
   38792:	2500      	movs	r5, #0
   38794:	2209      	movs	r2, #9
   38796:	2303      	movs	r3, #3
   38798:	2114      	movs	r1, #20
   3879a:	f8ad 21aa 	strh.w	r2, [sp, #426]	; 0x1aa
   3879e:	f8ad 31ae 	strh.w	r3, [sp, #430]	; 0x1ae
   387a2:	f88d 11a8 	strb.w	r1, [sp, #424]	; 0x1a8
   387a6:	f88d 51ac 	strb.w	r5, [sp, #428]	; 0x1ac
   387aa:	f7de fbe7 	bl	16f7c <HciGetBdAddr>
   387ae:	4601      	mov	r1, r0
   387b0:	a801      	add	r0, sp, #4
   387b2:	f7e7 fa4e 	bl	1fc52 <BdaCpy>
   387b6:	a801      	add	r0, sp, #4
   387b8:	f7e7 fa96 	bl	1fce8 <Bda2Str>
   387bc:	4601      	mov	r1, r0
   387be:	4604      	mov	r4, r0
   387c0:	a86c      	add	r0, sp, #432	; 0x1b0
   387c2:	f7d3 fe19 	bl	c3f8 <strcpy>
   387c6:	4827      	ldr	r0, [pc, #156]	; (38864 <am_app_KWD_AMA_get_devinfo_rsp_send+0xf8>)
   387c8:	f7d3 fe7a 	bl	c4c0 <strlen>
   387cc:	280a      	cmp	r0, #10
   387ce:	d81c      	bhi.n	3880a <am_app_KWD_AMA_get_devinfo_rsp_send+0x9e>
   387d0:	4a25      	ldr	r2, [pc, #148]	; (38868 <am_app_KWD_AMA_get_devinfo_rsp_send+0xfc>)
   387d2:	b2c3      	uxtb	r3, r0
   387d4:	4410      	add	r0, r2
   387d6:	1c59      	adds	r1, r3, #1
   387d8:	262d      	movs	r6, #45	; 0x2d
   387da:	7506      	strb	r6, [r0, #20]
   387dc:	fa52 f181 	uxtab	r1, r2, r1
   387e0:	7a20      	ldrb	r0, [r4, #8]
   387e2:	7508      	strb	r0, [r1, #20]
   387e4:	1c99      	adds	r1, r3, #2
   387e6:	fa52 f181 	uxtab	r1, r2, r1
   387ea:	7a60      	ldrb	r0, [r4, #9]
   387ec:	7508      	strb	r0, [r1, #20]
   387ee:	1cd9      	adds	r1, r3, #3
   387f0:	fa52 f181 	uxtab	r1, r2, r1
   387f4:	7aa0      	ldrb	r0, [r4, #10]
   387f6:	7508      	strb	r0, [r1, #20]
   387f8:	1d19      	adds	r1, r3, #4
   387fa:	3305      	adds	r3, #5
   387fc:	fa52 f181 	uxtab	r1, r2, r1
   38800:	fa52 f383 	uxtab	r3, r2, r3
   38804:	7ae2      	ldrb	r2, [r4, #11]
   38806:	750a      	strb	r2, [r1, #20]
   38808:	751d      	strb	r5, [r3, #20]
   3880a:	4916      	ldr	r1, [pc, #88]	; (38864 <am_app_KWD_AMA_get_devinfo_rsp_send+0xf8>)
   3880c:	a871      	add	r0, sp, #452	; 0x1c4
   3880e:	f7d3 fdf3 	bl	c3f8 <strcpy>
   38812:	4916      	ldr	r1, [pc, #88]	; (3886c <am_app_KWD_AMA_get_devinfo_rsp_send+0x100>)
   38814:	f50d 70ed 	add.w	r0, sp, #474	; 0x1da
   38818:	f7d3 fdee 	bl	c3f8 <strcpy>
   3881c:	2101      	movs	r1, #1
   3881e:	2300      	movs	r3, #0
   38820:	f8ad 11d4 	strh.w	r1, [sp, #468]	; 0x1d4
   38824:	aa6a      	add	r2, sp, #424	; 0x1a8
   38826:	4912      	ldr	r1, [pc, #72]	; (38870 <am_app_KWD_AMA_get_devinfo_rsp_send+0x104>)
   38828:	f88d 31d6 	strb.w	r3, [sp, #470]	; 0x1d6
   3882c:	a803      	add	r0, sp, #12
   3882e:	f002 fa15 	bl	3ac5c <pb_encode>
   38832:	4604      	mov	r4, r0
   38834:	b190      	cbz	r0, 3885c <am_app_KWD_AMA_get_devinfo_rsp_send+0xf0>
   38836:	9b06      	ldr	r3, [sp, #24]
   38838:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
   3883c:	b2dd      	uxtb	r5, r3
   3883e:	a908      	add	r1, sp, #32
   38840:	462a      	mov	r2, r5
   38842:	2610      	movs	r6, #16
   38844:	3503      	adds	r5, #3
   38846:	f10d 00a3 	add.w	r0, sp, #163	; 0xa3
   3884a:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
   3884e:	f7d3 fc87 	bl	c160 <memcpy>
   38852:	4629      	mov	r1, r5
   38854:	a828      	add	r0, sp, #160	; 0xa0
   38856:	9568      	str	r5, [sp, #416]	; 0x1a0
   38858:	f7e1 fc62 	bl	1a120 <VoleBleSend>
   3885c:	4620      	mov	r0, r4
   3885e:	f50d 7d32 	add.w	sp, sp, #712	; 0x2c8
   38862:	bd70      	pop	{r4, r5, r6, pc}
   38864:	10017f18 	.word	0x10017f18
   38868:	10017f04 	.word	0x10017f04
   3886c:	10017f2e 	.word	0x10017f2e
   38870:	0004457c 	.word	0x0004457c

00038874 <am_app_KWD_AMA_get_devconf_rsp_send>:
   38874:	b570      	push	{r4, r5, r6, lr}
   38876:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   3887a:	f44f 7290 	mov.w	r2, #288	; 0x120
   3887e:	2100      	movs	r1, #0
   38880:	a868      	add	r0, sp, #416	; 0x1a0
   38882:	f7d3 fd6b 	bl	c35c <memset>
   38886:	2280      	movs	r2, #128	; 0x80
   38888:	2100      	movs	r1, #0
   3888a:	a806      	add	r0, sp, #24
   3888c:	f7d3 fd66 	bl	c35c <memset>
   38890:	a906      	add	r1, sp, #24
   38892:	a801      	add	r0, sp, #4
   38894:	2280      	movs	r2, #128	; 0x80
   38896:	f001 fe75 	bl	3a584 <pb_ostream_from_buffer>
   3889a:	2315      	movs	r3, #21
   3889c:	2209      	movs	r2, #9
   3889e:	2000      	movs	r0, #0
   388a0:	210a      	movs	r1, #10
   388a2:	f88d 31a0 	strb.w	r3, [sp, #416]	; 0x1a0
   388a6:	f8ad 21a2 	strh.w	r2, [sp, #418]	; 0x1a2
   388aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   388ae:	f88d 01a4 	strb.w	r0, [sp, #420]	; 0x1a4
   388b2:	f8ad 11a6 	strh.w	r1, [sp, #422]	; 0x1a6
   388b6:	aa68      	add	r2, sp, #416	; 0x1a0
   388b8:	a801      	add	r0, sp, #4
   388ba:	490f      	ldr	r1, [pc, #60]	; (388f8 <am_app_KWD_AMA_get_devconf_rsp_send+0x84>)
   388bc:	f8ad 31a8 	strh.w	r3, [sp, #424]	; 0x1a8
   388c0:	f002 f9cc 	bl	3ac5c <pb_encode>
   388c4:	4604      	mov	r4, r0
   388c6:	b190      	cbz	r0, 388ee <am_app_KWD_AMA_get_devconf_rsp_send+0x7a>
   388c8:	9b04      	ldr	r3, [sp, #16]
   388ca:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   388ce:	b2dd      	uxtb	r5, r3
   388d0:	a906      	add	r1, sp, #24
   388d2:	462a      	mov	r2, r5
   388d4:	2610      	movs	r6, #16
   388d6:	3503      	adds	r5, #3
   388d8:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   388dc:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   388e0:	f7d3 fc3e 	bl	c160 <memcpy>
   388e4:	4629      	mov	r1, r5
   388e6:	a826      	add	r0, sp, #152	; 0x98
   388e8:	9566      	str	r5, [sp, #408]	; 0x198
   388ea:	f7e1 fc19 	bl	1a120 <VoleBleSend>
   388ee:	4620      	mov	r0, r4
   388f0:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   388f4:	bd70      	pop	{r4, r5, r6, pc}
   388f6:	bf00      	nop
   388f8:	0004457c 	.word	0x0004457c

000388fc <am_app_KWD_AMA_speech_rsp_send>:
   388fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   388fe:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
   38902:	4607      	mov	r7, r0
   38904:	460e      	mov	r6, r1
   38906:	f44f 7290 	mov.w	r2, #288	; 0x120
   3890a:	2100      	movs	r1, #0
   3890c:	a868      	add	r0, sp, #416	; 0x1a0
   3890e:	f7d3 fd25 	bl	c35c <memset>
   38912:	2280      	movs	r2, #128	; 0x80
   38914:	2100      	movs	r1, #0
   38916:	a806      	add	r0, sp, #24
   38918:	f7d3 fd20 	bl	c35c <memset>
   3891c:	a906      	add	r1, sp, #24
   3891e:	a801      	add	r0, sp, #4
   38920:	2280      	movs	r2, #128	; 0x80
   38922:	f001 fe2f 	bl	3a584 <pb_ostream_from_buffer>
   38926:	2400      	movs	r4, #0
   38928:	230e      	movs	r3, #14
   3892a:	2509      	movs	r5, #9
   3892c:	aa68      	add	r2, sp, #416	; 0x1a0
   3892e:	a801      	add	r0, sp, #4
   38930:	4912      	ldr	r1, [pc, #72]	; (3897c <am_app_KWD_AMA_speech_rsp_send+0x80>)
   38932:	f88d 41a4 	strb.w	r4, [sp, #420]	; 0x1a4
   38936:	f88d 71a0 	strb.w	r7, [sp, #416]	; 0x1a0
   3893a:	966a      	str	r6, [sp, #424]	; 0x1a8
   3893c:	f8ad 51a2 	strh.w	r5, [sp, #418]	; 0x1a2
   38940:	f8ad 31a6 	strh.w	r3, [sp, #422]	; 0x1a6
   38944:	f002 f98a 	bl	3ac5c <pb_encode>
   38948:	4604      	mov	r4, r0
   3894a:	b190      	cbz	r0, 38972 <am_app_KWD_AMA_speech_rsp_send+0x76>
   3894c:	9b04      	ldr	r3, [sp, #16]
   3894e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   38952:	b2dd      	uxtb	r5, r3
   38954:	a906      	add	r1, sp, #24
   38956:	462a      	mov	r2, r5
   38958:	2610      	movs	r6, #16
   3895a:	3503      	adds	r5, #3
   3895c:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   38960:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   38964:	f7d3 fbfc 	bl	c160 <memcpy>
   38968:	4629      	mov	r1, r5
   3896a:	a826      	add	r0, sp, #152	; 0x98
   3896c:	9566      	str	r5, [sp, #408]	; 0x198
   3896e:	f7e1 fbd7 	bl	1a120 <VoleBleSend>
   38972:	4620      	mov	r0, r4
   38974:	f50d 7d31 	add.w	sp, sp, #708	; 0x2c4
   38978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3897a:	bf00      	nop
   3897c:	0004457c 	.word	0x0004457c

00038980 <am_app_KWD_AMA_provide_speech_rsp_send>:
   38980:	b570      	push	{r4, r5, r6, lr}
   38982:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   38986:	4605      	mov	r5, r0
   38988:	f44f 7290 	mov.w	r2, #288	; 0x120
   3898c:	2100      	movs	r1, #0
   3898e:	a868      	add	r0, sp, #416	; 0x1a0
   38990:	f7d3 fce4 	bl	c35c <memset>
   38994:	2280      	movs	r2, #128	; 0x80
   38996:	2100      	movs	r1, #0
   38998:	a806      	add	r0, sp, #24
   3899a:	f7d3 fcdf 	bl	c35c <memset>
   3899e:	a906      	add	r1, sp, #24
   389a0:	a801      	add	r0, sp, #4
   389a2:	2280      	movs	r2, #128	; 0x80
   389a4:	f001 fdee 	bl	3a584 <pb_ostream_from_buffer>
   389a8:	200a      	movs	r0, #10
   389aa:	2309      	movs	r3, #9
   389ac:	210f      	movs	r1, #15
   389ae:	f240 3401 	movw	r4, #769	; 0x301
   389b2:	f88d 01a0 	strb.w	r0, [sp, #416]	; 0x1a0
   389b6:	f8ad 31a2 	strh.w	r3, [sp, #418]	; 0x1a2
   389ba:	f8ad 11a6 	strh.w	r1, [sp, #422]	; 0x1a6
   389be:	2300      	movs	r3, #0
   389c0:	aa68      	add	r2, sp, #416	; 0x1a0
   389c2:	a801      	add	r0, sp, #4
   389c4:	4911      	ldr	r1, [pc, #68]	; (38a0c <am_app_KWD_AMA_provide_speech_rsp_send+0x8c>)
   389c6:	f8ad 41a8 	strh.w	r4, [sp, #424]	; 0x1a8
   389ca:	956b      	str	r5, [sp, #428]	; 0x1ac
   389cc:	f88d 31a4 	strb.w	r3, [sp, #420]	; 0x1a4
   389d0:	f88d 31aa 	strb.w	r3, [sp, #426]	; 0x1aa
   389d4:	f002 f942 	bl	3ac5c <pb_encode>
   389d8:	4604      	mov	r4, r0
   389da:	b190      	cbz	r0, 38a02 <am_app_KWD_AMA_provide_speech_rsp_send+0x82>
   389dc:	9b04      	ldr	r3, [sp, #16]
   389de:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   389e2:	b2dd      	uxtb	r5, r3
   389e4:	a906      	add	r1, sp, #24
   389e6:	462a      	mov	r2, r5
   389e8:	2610      	movs	r6, #16
   389ea:	3503      	adds	r5, #3
   389ec:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   389f0:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   389f4:	f7d3 fbb4 	bl	c160 <memcpy>
   389f8:	4629      	mov	r1, r5
   389fa:	a826      	add	r0, sp, #152	; 0x98
   389fc:	9566      	str	r5, [sp, #408]	; 0x198
   389fe:	f7e1 fb8f 	bl	1a120 <VoleBleSend>
   38a02:	4620      	mov	r0, r4
   38a04:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   38a08:	bd70      	pop	{r4, r5, r6, pc}
   38a0a:	bf00      	nop
   38a0c:	0004457c 	.word	0x0004457c

00038a10 <am_app_KWD_AMA_get_central_info_send>:
   38a10:	b570      	push	{r4, r5, r6, lr}
   38a12:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
   38a16:	f44f 7290 	mov.w	r2, #288	; 0x120
   38a1a:	2100      	movs	r1, #0
   38a1c:	a868      	add	r0, sp, #416	; 0x1a0
   38a1e:	f7d3 fc9d 	bl	c35c <memset>
   38a22:	2280      	movs	r2, #128	; 0x80
   38a24:	2100      	movs	r1, #0
   38a26:	a806      	add	r0, sp, #24
   38a28:	f7d3 fc98 	bl	c35c <memset>
   38a2c:	a906      	add	r1, sp, #24
   38a2e:	a801      	add	r0, sp, #4
   38a30:	2280      	movs	r2, #128	; 0x80
   38a32:	f001 fda7 	bl	3a584 <pb_ostream_from_buffer>
   38a36:	2367      	movs	r3, #103	; 0x67
   38a38:	aa68      	add	r2, sp, #416	; 0x1a0
   38a3a:	a801      	add	r0, sp, #4
   38a3c:	490f      	ldr	r1, [pc, #60]	; (38a7c <am_app_KWD_AMA_get_central_info_send+0x6c>)
   38a3e:	f88d 31a0 	strb.w	r3, [sp, #416]	; 0x1a0
   38a42:	f8ad 31a2 	strh.w	r3, [sp, #418]	; 0x1a2
   38a46:	f002 f909 	bl	3ac5c <pb_encode>
   38a4a:	4604      	mov	r4, r0
   38a4c:	b190      	cbz	r0, 38a74 <am_app_KWD_AMA_get_central_info_send+0x64>
   38a4e:	9b04      	ldr	r3, [sp, #16]
   38a50:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
   38a54:	b2dd      	uxtb	r5, r3
   38a56:	a906      	add	r1, sp, #24
   38a58:	462a      	mov	r2, r5
   38a5a:	2610      	movs	r6, #16
   38a5c:	3503      	adds	r5, #3
   38a5e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
   38a62:	f8ad 6098 	strh.w	r6, [sp, #152]	; 0x98
   38a66:	f7d3 fb7b 	bl	c160 <memcpy>
   38a6a:	4629      	mov	r1, r5
   38a6c:	a826      	add	r0, sp, #152	; 0x98
   38a6e:	9566      	str	r5, [sp, #408]	; 0x198
   38a70:	f7e1 fb56 	bl	1a120 <VoleBleSend>
   38a74:	4620      	mov	r0, r4
   38a76:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
   38a7a:	bd70      	pop	{r4, r5, r6, pc}
   38a7c:	0004457c 	.word	0x0004457c

00038a80 <am_app_KWD_AMA_rx_handler>:
   38a80:	b530      	push	{r4, r5, lr}
   38a82:	b0d1      	sub	sp, #324	; 0x144
   38a84:	4604      	mov	r4, r0
   38a86:	f44f 7290 	mov.w	r2, #288	; 0x120
   38a8a:	a808      	add	r0, sp, #32
   38a8c:	2100      	movs	r1, #0
   38a8e:	f7d3 fc65 	bl	c35c <memset>
   38a92:	2c00      	cmp	r4, #0
   38a94:	f000 80d1 	beq.w	38c3a <am_app_KWD_AMA_rx_handler+0x1ba>
   38a98:	7863      	ldrb	r3, [r4, #1]
   38a9a:	78a2      	ldrb	r2, [r4, #2]
   38a9c:	07db      	lsls	r3, r3, #31
   38a9e:	466d      	mov	r5, sp
   38aa0:	bf4c      	ite	mi
   38aa2:	1d21      	addmi	r1, r4, #4
   38aa4:	1ce1      	addpl	r1, r4, #3
   38aa6:	4628      	mov	r0, r5
   38aa8:	f000 fb6a 	bl	39180 <pb_istream_from_buffer>
   38aac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   38ab0:	ac04      	add	r4, sp, #16
   38ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   38ab6:	aa08      	add	r2, sp, #32
   38ab8:	4964      	ldr	r1, [pc, #400]	; (38c4c <am_app_KWD_AMA_rx_handler+0x1cc>)
   38aba:	4620      	mov	r0, r4
   38abc:	f001 f808 	bl	39ad0 <pb_decode>
   38ac0:	4863      	ldr	r0, [pc, #396]	; (38c50 <am_app_KWD_AMA_rx_handler+0x1d0>)
   38ac2:	f89d 1020 	ldrb.w	r1, [sp, #32]
   38ac6:	f7e7 fe33 	bl	20730 <WsfTrace>
   38aca:	f89d 0020 	ldrb.w	r0, [sp, #32]
   38ace:	f1a0 030a 	sub.w	r3, r0, #10
   38ad2:	2b5d      	cmp	r3, #93	; 0x5d
   38ad4:	f200 8087 	bhi.w	38be6 <am_app_KWD_AMA_rx_handler+0x166>
   38ad8:	e8df f003 	tbb	[pc, r3]
   38adc:	483b3336 	.word	0x483b3336
   38ae0:	8585854b 	.word	0x8585854b
   38ae4:	5c588585 	.word	0x5c588585
   38ae8:	85666085 	.word	0x85666085
   38aec:	85858585 	.word	0x85858585
   38af0:	85858585 	.word	0x85858585
   38af4:	85858585 	.word	0x85858585
   38af8:	85858585 	.word	0x85858585
   38afc:	85858585 	.word	0x85858585
   38b00:	85858585 	.word	0x85858585
   38b04:	8585856c 	.word	0x8585856c
   38b08:	85852f85 	.word	0x85852f85
   38b0c:	85858585 	.word	0x85858585
   38b10:	85858585 	.word	0x85858585
   38b14:	85858585 	.word	0x85858585
   38b18:	85858585 	.word	0x85858585
   38b1c:	85858585 	.word	0x85858585
   38b20:	85858585 	.word	0x85858585
   38b24:	85858585 	.word	0x85858585
   38b28:	85858585 	.word	0x85858585
   38b2c:	85858585 	.word	0x85858585
   38b30:	85858585 	.word	0x85858585
   38b34:	85858585 	.word	0x85858585
   38b38:	7585      	.short	0x7585
   38b3a:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   38b3e:	2837      	cmp	r0, #55	; 0x37
   38b40:	d051      	beq.n	38be6 <am_app_KWD_AMA_rx_handler+0x166>
   38b42:	2000      	movs	r0, #0
   38b44:	b051      	add	sp, #324	; 0x144
   38b46:	bd30      	pop	{r4, r5, pc}
   38b48:	9809      	ldr	r0, [sp, #36]	; 0x24
   38b4a:	f7ff ff19 	bl	38980 <am_app_KWD_AMA_provide_speech_rsp_send>
   38b4e:	2000      	movs	r0, #0
   38b50:	e7f8      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38b52:	990a      	ldr	r1, [sp, #40]	; 0x28
   38b54:	200c      	movs	r0, #12
   38b56:	f7ff fed1 	bl	388fc <am_app_KWD_AMA_speech_rsp_send>
   38b5a:	4b3e      	ldr	r3, [pc, #248]	; (38c54 <am_app_KWD_AMA_rx_handler+0x1d4>)
   38b5c:	681a      	ldr	r2, [r3, #0]
   38b5e:	2a1c      	cmp	r2, #28
   38b60:	d046      	beq.n	38bf0 <am_app_KWD_AMA_rx_handler+0x170>
   38b62:	3201      	adds	r2, #1
   38b64:	2000      	movs	r0, #0
   38b66:	601a      	str	r2, [r3, #0]
   38b68:	b051      	add	sp, #324	; 0x144
   38b6a:	bd30      	pop	{r4, r5, pc}
   38b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   38b6e:	200d      	movs	r0, #13
   38b70:	e7f1      	b.n	38b56 <am_app_KWD_AMA_rx_handler+0xd6>
   38b72:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   38b76:	4838      	ldr	r0, [pc, #224]	; (38c58 <am_app_KWD_AMA_rx_handler+0x1d8>)
   38b78:	f7e7 fdda 	bl	20730 <WsfTrace>
   38b7c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   38b80:	2903      	cmp	r1, #3
   38b82:	d85d      	bhi.n	38c40 <am_app_KWD_AMA_rx_handler+0x1c0>
   38b84:	e8df f001 	tbb	[pc, r1]
   38b88:	373f4751 	.word	0x373f4751
   38b8c:	f7ff fdee 	bl	3876c <am_app_KWD_AMA_get_devinfo_rsp_send>
   38b90:	2000      	movs	r0, #0
   38b92:	e7d7      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38b94:	f7ff fe6e 	bl	38874 <am_app_KWD_AMA_get_devconf_rsp_send>
   38b98:	2000      	movs	r0, #0
   38b9a:	e7d3      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38b9c:	2100      	movs	r1, #0
   38b9e:	2017      	movs	r0, #23
   38ba0:	f7ff fd20 	bl	385e4 <am_app_KWD_AMA_rsp_send>
   38ba4:	2000      	movs	r0, #0
   38ba6:	e7cd      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38ba8:	2100      	movs	r1, #0
   38baa:	2018      	movs	r0, #24
   38bac:	f7ff fd1a 	bl	385e4 <am_app_KWD_AMA_rsp_send>
   38bb0:	2000      	movs	r0, #0
   38bb2:	e7c7      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38bb4:	4b29      	ldr	r3, [pc, #164]	; (38c5c <am_app_KWD_AMA_rx_handler+0x1dc>)
   38bb6:	2201      	movs	r2, #1
   38bb8:	701a      	strb	r2, [r3, #0]
   38bba:	f7ff fcd3 	bl	38564 <am_app_KWD_AMA_sync_rsp_send>
   38bbe:	f7ff ff27 	bl	38a10 <am_app_KWD_AMA_get_central_info_send>
   38bc2:	2000      	movs	r0, #0
   38bc4:	e7be      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38bc6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   38bca:	2b09      	cmp	r3, #9
   38bcc:	d1b9      	bne.n	38b42 <am_app_KWD_AMA_rx_handler+0xc2>
   38bce:	aa0a      	add	r2, sp, #40	; 0x28
   38bd0:	4823      	ldr	r0, [pc, #140]	; (38c60 <am_app_KWD_AMA_rx_handler+0x1e0>)
   38bd2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   38bd6:	f7e7 fdab 	bl	20730 <WsfTrace>
   38bda:	4b22      	ldr	r3, [pc, #136]	; (38c64 <am_app_KWD_AMA_rx_handler+0x1e4>)
   38bdc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   38be0:	701a      	strb	r2, [r3, #0]
   38be2:	2000      	movs	r0, #0
   38be4:	e7ae      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38be6:	2100      	movs	r1, #0
   38be8:	f7ff fcfc 	bl	385e4 <am_app_KWD_AMA_rsp_send>
   38bec:	2000      	movs	r0, #0
   38bee:	e7a9      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38bf0:	2000      	movs	r0, #0
   38bf2:	6018      	str	r0, [r3, #0]
   38bf4:	e7a6      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38bf6:	481c      	ldr	r0, [pc, #112]	; (38c68 <am_app_KWD_AMA_rx_handler+0x1e8>)
   38bf8:	f7e7 fd9a 	bl	20730 <WsfTrace>
   38bfc:	4b17      	ldr	r3, [pc, #92]	; (38c5c <am_app_KWD_AMA_rx_handler+0x1dc>)
   38bfe:	2204      	movs	r2, #4
   38c00:	701a      	strb	r2, [r3, #0]
   38c02:	2000      	movs	r0, #0
   38c04:	e79e      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c06:	4819      	ldr	r0, [pc, #100]	; (38c6c <am_app_KWD_AMA_rx_handler+0x1ec>)
   38c08:	f7e7 fd92 	bl	20730 <WsfTrace>
   38c0c:	4b13      	ldr	r3, [pc, #76]	; (38c5c <am_app_KWD_AMA_rx_handler+0x1dc>)
   38c0e:	2203      	movs	r2, #3
   38c10:	701a      	strb	r2, [r3, #0]
   38c12:	2000      	movs	r0, #0
   38c14:	e796      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c16:	4816      	ldr	r0, [pc, #88]	; (38c70 <am_app_KWD_AMA_rx_handler+0x1f0>)
   38c18:	f7e7 fd8a 	bl	20730 <WsfTrace>
   38c1c:	4b0f      	ldr	r3, [pc, #60]	; (38c5c <am_app_KWD_AMA_rx_handler+0x1dc>)
   38c1e:	2202      	movs	r2, #2
   38c20:	701a      	strb	r2, [r3, #0]
   38c22:	f7e1 fcfb 	bl	1a61c <amvoleStartSendVoiceData>
   38c26:	2000      	movs	r0, #0
   38c28:	e78c      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c2a:	4812      	ldr	r0, [pc, #72]	; (38c74 <am_app_KWD_AMA_rx_handler+0x1f4>)
   38c2c:	f7e7 fd80 	bl	20730 <WsfTrace>
   38c30:	4b0a      	ldr	r3, [pc, #40]	; (38c5c <am_app_KWD_AMA_rx_handler+0x1dc>)
   38c32:	2201      	movs	r2, #1
   38c34:	701a      	strb	r2, [r3, #0]
   38c36:	2000      	movs	r0, #0
   38c38:	e784      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38c3e:	e781      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c40:	480d      	ldr	r0, [pc, #52]	; (38c78 <am_app_KWD_AMA_rx_handler+0x1f8>)
   38c42:	f7e7 fd75 	bl	20730 <WsfTrace>
   38c46:	2000      	movs	r0, #0
   38c48:	e77c      	b.n	38b44 <am_app_KWD_AMA_rx_handler+0xc4>
   38c4a:	bf00      	nop
   38c4c:	0004457c 	.word	0x0004457c
   38c50:	00044408 	.word	0x00044408
   38c54:	10044050 	.word	0x10044050
   38c58:	0004441c 	.word	0x0004441c
   38c5c:	1004404d 	.word	0x1004404d
   38c60:	00044524 	.word	0x00044524
   38c64:	1004404c 	.word	0x1004404c
   38c68:	000444c4 	.word	0x000444c4
   38c6c:	00044494 	.word	0x00044494
   38c70:	00044464 	.word	0x00044464
   38c74:	00044438 	.word	0x00044438
   38c78:	000444f4 	.word	0x000444f4

00038c7c <buf_read>:
   38c7c:	b470      	push	{r4, r5, r6}
   38c7e:	6844      	ldr	r4, [r0, #4]
   38c80:	18a3      	adds	r3, r4, r2
   38c82:	6043      	str	r3, [r0, #4]
   38c84:	b329      	cbz	r1, 38cd2 <buf_read+0x56>
   38c86:	b322      	cbz	r2, 38cd2 <buf_read+0x56>
   38c88:	1d25      	adds	r5, r4, #4
   38c8a:	1d08      	adds	r0, r1, #4
   38c8c:	4284      	cmp	r4, r0
   38c8e:	bf38      	it	cc
   38c90:	42a9      	cmpcc	r1, r5
   38c92:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   38c96:	d31f      	bcc.n	38cd8 <buf_read+0x5c>
   38c98:	2b07      	cmp	r3, #7
   38c9a:	d91d      	bls.n	38cd8 <buf_read+0x5c>
   38c9c:	f022 0603 	bic.w	r6, r2, #3
   38ca0:	4426      	add	r6, r4
   38ca2:	4623      	mov	r3, r4
   38ca4:	4608      	mov	r0, r1
   38ca6:	f853 5b04 	ldr.w	r5, [r3], #4
   38caa:	f840 5b04 	str.w	r5, [r0], #4
   38cae:	42b3      	cmp	r3, r6
   38cb0:	d1f9      	bne.n	38ca6 <buf_read+0x2a>
   38cb2:	f022 0303 	bic.w	r3, r2, #3
   38cb6:	429a      	cmp	r2, r3
   38cb8:	d00b      	beq.n	38cd2 <buf_read+0x56>
   38cba:	5ce0      	ldrb	r0, [r4, r3]
   38cbc:	54c8      	strb	r0, [r1, r3]
   38cbe:	1c58      	adds	r0, r3, #1
   38cc0:	4282      	cmp	r2, r0
   38cc2:	d906      	bls.n	38cd2 <buf_read+0x56>
   38cc4:	3302      	adds	r3, #2
   38cc6:	5c25      	ldrb	r5, [r4, r0]
   38cc8:	540d      	strb	r5, [r1, r0]
   38cca:	429a      	cmp	r2, r3
   38ccc:	d901      	bls.n	38cd2 <buf_read+0x56>
   38cce:	5ce2      	ldrb	r2, [r4, r3]
   38cd0:	54ca      	strb	r2, [r1, r3]
   38cd2:	2001      	movs	r0, #1
   38cd4:	bc70      	pop	{r4, r5, r6}
   38cd6:	4770      	bx	lr
   38cd8:	4423      	add	r3, r4
   38cda:	3901      	subs	r1, #1
   38cdc:	3c01      	subs	r4, #1
   38cde:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   38ce2:	f801 2f01 	strb.w	r2, [r1, #1]!
   38ce6:	429c      	cmp	r4, r3
   38ce8:	d1f9      	bne.n	38cde <buf_read+0x62>
   38cea:	2001      	movs	r0, #1
   38cec:	bc70      	pop	{r4, r5, r6}
   38cee:	4770      	bx	lr

00038cf0 <pb_decode_varint32_eof>:
   38cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38cf4:	6883      	ldr	r3, [r0, #8]
   38cf6:	b082      	sub	sp, #8
   38cf8:	4604      	mov	r4, r0
   38cfa:	4615      	mov	r5, r2
   38cfc:	2b00      	cmp	r3, #0
   38cfe:	d067      	beq.n	38dd0 <pb_decode_varint32_eof+0xe0>
   38d00:	460f      	mov	r7, r1
   38d02:	6803      	ldr	r3, [r0, #0]
   38d04:	f10d 0107 	add.w	r1, sp, #7
   38d08:	2201      	movs	r2, #1
   38d0a:	4798      	blx	r3
   38d0c:	4606      	mov	r6, r0
   38d0e:	2800      	cmp	r0, #0
   38d10:	d048      	beq.n	38da4 <pb_decode_varint32_eof+0xb4>
   38d12:	68a3      	ldr	r3, [r4, #8]
   38d14:	f89d 8007 	ldrb.w	r8, [sp, #7]
   38d18:	3b01      	subs	r3, #1
   38d1a:	f018 0f80 	tst.w	r8, #128	; 0x80
   38d1e:	60a3      	str	r3, [r4, #8]
   38d20:	d105      	bne.n	38d2e <pb_decode_varint32_eof+0x3e>
   38d22:	f8c7 8000 	str.w	r8, [r7]
   38d26:	4630      	mov	r0, r6
   38d28:	b002      	add	sp, #8
   38d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38d2e:	f008 087f 	and.w	r8, r8, #127	; 0x7f
   38d32:	2b00      	cmp	r3, #0
   38d34:	d042      	beq.n	38dbc <pb_decode_varint32_eof+0xcc>
   38d36:	2507      	movs	r5, #7
   38d38:	e00f      	b.n	38d5a <pb_decode_varint32_eof+0x6a>
   38d3a:	2d3f      	cmp	r5, #63	; 0x3f
   38d3c:	bf34      	ite	cc
   38d3e:	20ff      	movcc	r0, #255	; 0xff
   38d40:	2001      	movcs	r0, #1
   38d42:	b121      	cbz	r1, 38d4e <pb_decode_varint32_eof+0x5e>
   38d44:	f1b8 0f00 	cmp.w	r8, #0
   38d48:	da24      	bge.n	38d94 <pb_decode_varint32_eof+0xa4>
   38d4a:	4290      	cmp	r0, r2
   38d4c:	d122      	bne.n	38d94 <pb_decode_varint32_eof+0xa4>
   38d4e:	0611      	lsls	r1, r2, #24
   38d50:	f105 0507 	add.w	r5, r5, #7
   38d54:	d519      	bpl.n	38d8a <pb_decode_varint32_eof+0x9a>
   38d56:	2b00      	cmp	r3, #0
   38d58:	d030      	beq.n	38dbc <pb_decode_varint32_eof+0xcc>
   38d5a:	6823      	ldr	r3, [r4, #0]
   38d5c:	2201      	movs	r2, #1
   38d5e:	f10d 0107 	add.w	r1, sp, #7
   38d62:	4620      	mov	r0, r4
   38d64:	4798      	blx	r3
   38d66:	2800      	cmp	r0, #0
   38d68:	d03d      	beq.n	38de6 <pb_decode_varint32_eof+0xf6>
   38d6a:	68a3      	ldr	r3, [r4, #8]
   38d6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   38d70:	3b01      	subs	r3, #1
   38d72:	2d1f      	cmp	r5, #31
   38d74:	60a3      	str	r3, [r4, #8]
   38d76:	f002 017f 	and.w	r1, r2, #127	; 0x7f
   38d7a:	d8de      	bhi.n	38d3a <pb_decode_varint32_eof+0x4a>
   38d7c:	40a9      	lsls	r1, r5
   38d7e:	ea48 0801 	orr.w	r8, r8, r1
   38d82:	0611      	lsls	r1, r2, #24
   38d84:	f105 0507 	add.w	r5, r5, #7
   38d88:	d4e5      	bmi.n	38d56 <pb_decode_varint32_eof+0x66>
   38d8a:	2d23      	cmp	r5, #35	; 0x23
   38d8c:	d1c9      	bne.n	38d22 <pb_decode_varint32_eof+0x32>
   38d8e:	f012 0f70 	tst.w	r2, #112	; 0x70
   38d92:	d0c6      	beq.n	38d22 <pb_decode_varint32_eof+0x32>
   38d94:	68e3      	ldr	r3, [r4, #12]
   38d96:	4a17      	ldr	r2, [pc, #92]	; (38df4 <pb_decode_varint32_eof+0x104>)
   38d98:	2b00      	cmp	r3, #0
   38d9a:	bf08      	it	eq
   38d9c:	4613      	moveq	r3, r2
   38d9e:	60e3      	str	r3, [r4, #12]
   38da0:	2000      	movs	r0, #0
   38da2:	e7c1      	b.n	38d28 <pb_decode_varint32_eof+0x38>
   38da4:	68e3      	ldr	r3, [r4, #12]
   38da6:	4914      	ldr	r1, [pc, #80]	; (38df8 <pb_decode_varint32_eof+0x108>)
   38da8:	68a2      	ldr	r2, [r4, #8]
   38daa:	2b00      	cmp	r3, #0
   38dac:	bf08      	it	eq
   38dae:	460b      	moveq	r3, r1
   38db0:	60e3      	str	r3, [r4, #12]
   38db2:	b19a      	cbz	r2, 38ddc <pb_decode_varint32_eof+0xec>
   38db4:	2000      	movs	r0, #0
   38db6:	b002      	add	sp, #8
   38db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38dbc:	68e3      	ldr	r3, [r4, #12]
   38dbe:	4a0f      	ldr	r2, [pc, #60]	; (38dfc <pb_decode_varint32_eof+0x10c>)
   38dc0:	2000      	movs	r0, #0
   38dc2:	2b00      	cmp	r3, #0
   38dc4:	bf08      	it	eq
   38dc6:	4613      	moveq	r3, r2
   38dc8:	60e3      	str	r3, [r4, #12]
   38dca:	b002      	add	sp, #8
   38dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38dd0:	68c3      	ldr	r3, [r0, #12]
   38dd2:	4a0a      	ldr	r2, [pc, #40]	; (38dfc <pb_decode_varint32_eof+0x10c>)
   38dd4:	2b00      	cmp	r3, #0
   38dd6:	bf08      	it	eq
   38dd8:	4613      	moveq	r3, r2
   38dda:	60c3      	str	r3, [r0, #12]
   38ddc:	2d00      	cmp	r5, #0
   38dde:	d0e9      	beq.n	38db4 <pb_decode_varint32_eof+0xc4>
   38de0:	2301      	movs	r3, #1
   38de2:	702b      	strb	r3, [r5, #0]
   38de4:	e7e6      	b.n	38db4 <pb_decode_varint32_eof+0xc4>
   38de6:	68e3      	ldr	r3, [r4, #12]
   38de8:	4a03      	ldr	r2, [pc, #12]	; (38df8 <pb_decode_varint32_eof+0x108>)
   38dea:	2b00      	cmp	r3, #0
   38dec:	bf08      	it	eq
   38dee:	4613      	moveq	r3, r2
   38df0:	60e3      	str	r3, [r4, #12]
   38df2:	e799      	b.n	38d28 <pb_decode_varint32_eof+0x38>
   38df4:	00044be0 	.word	0x00044be0
   38df8:	00044bd4 	.word	0x00044bd4
   38dfc:	00044bc4 	.word	0x00044bc4

00038e00 <pb_field_set_to_default>:
   38e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   38e02:	6842      	ldr	r2, [r0, #4]
   38e04:	7893      	ldrb	r3, [r2, #2]
   38e06:	f003 040f 	and.w	r4, r3, #15
   38e0a:	2c08      	cmp	r4, #8
   38e0c:	b087      	sub	sp, #28
   38e0e:	d020      	beq.n	38e52 <pb_field_set_to_default+0x52>
   38e10:	f013 01c0 	ands.w	r1, r3, #192	; 0xc0
   38e14:	d112      	bne.n	38e3c <pb_field_set_to_default+0x3c>
   38e16:	f003 0530 	and.w	r5, r3, #48	; 0x30
   38e1a:	2d10      	cmp	r5, #16
   38e1c:	d044      	beq.n	38ea8 <pb_field_set_to_default+0xa8>
   38e1e:	069d      	lsls	r5, r3, #26
   38e20:	d43e      	bmi.n	38ea0 <pb_field_set_to_default+0xa0>
   38e22:	6900      	ldr	r0, [r0, #16]
   38e24:	f8d2 100b 	ldr.w	r1, [r2, #11]
   38e28:	2c07      	cmp	r4, #7
   38e2a:	d046      	beq.n	38eba <pb_field_set_to_default+0xba>
   38e2c:	f8b2 2007 	ldrh.w	r2, [r2, #7]
   38e30:	2900      	cmp	r1, #0
   38e32:	d03f      	beq.n	38eb4 <pb_field_set_to_default+0xb4>
   38e34:	f7d3 f994 	bl	c160 <memcpy>
   38e38:	b007      	add	sp, #28
   38e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38e3c:	2980      	cmp	r1, #128	; 0x80
   38e3e:	d1fb      	bne.n	38e38 <pb_field_set_to_default+0x38>
   38e40:	6901      	ldr	r1, [r0, #16]
   38e42:	2200      	movs	r2, #0
   38e44:	600a      	str	r2, [r1, #0]
   38e46:	069b      	lsls	r3, r3, #26
   38e48:	bf44      	itt	mi
   38e4a:	6943      	ldrmi	r3, [r0, #20]
   38e4c:	801a      	strhmi	r2, [r3, #0]
   38e4e:	b007      	add	sp, #28
   38e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38e52:	6903      	ldr	r3, [r0, #16]
   38e54:	681c      	ldr	r4, [r3, #0]
   38e56:	2c00      	cmp	r4, #0
   38e58:	d0ee      	beq.n	38e38 <pb_field_set_to_default+0x38>
   38e5a:	466e      	mov	r6, sp
   38e5c:	2700      	movs	r7, #0
   38e5e:	6823      	ldr	r3, [r4, #0]
   38e60:	7327      	strb	r7, [r4, #12]
   38e62:	689d      	ldr	r5, [r3, #8]
   38e64:	6862      	ldr	r2, [r4, #4]
   38e66:	4629      	mov	r1, r5
   38e68:	4630      	mov	r0, r6
   38e6a:	f001 ff99 	bl	3ada0 <pb_field_iter_begin>
   38e6e:	6863      	ldr	r3, [r4, #4]
   38e70:	9304      	str	r3, [sp, #16]
   38e72:	f104 030c 	add.w	r3, r4, #12
   38e76:	9305      	str	r3, [sp, #20]
   38e78:	78ab      	ldrb	r3, [r5, #2]
   38e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   38e7e:	2b80      	cmp	r3, #128	; 0x80
   38e80:	4630      	mov	r0, r6
   38e82:	d005      	beq.n	38e90 <pb_field_set_to_default+0x90>
   38e84:	f7ff ffbc 	bl	38e00 <pb_field_set_to_default>
   38e88:	68a4      	ldr	r4, [r4, #8]
   38e8a:	2c00      	cmp	r4, #0
   38e8c:	d1e7      	bne.n	38e5e <pb_field_set_to_default+0x5e>
   38e8e:	e7d3      	b.n	38e38 <pb_field_set_to_default+0x38>
   38e90:	1d23      	adds	r3, r4, #4
   38e92:	9304      	str	r3, [sp, #16]
   38e94:	f7ff ffb4 	bl	38e00 <pb_field_set_to_default>
   38e98:	68a4      	ldr	r4, [r4, #8]
   38e9a:	2c00      	cmp	r4, #0
   38e9c:	d1df      	bne.n	38e5e <pb_field_set_to_default+0x5e>
   38e9e:	e7cb      	b.n	38e38 <pb_field_set_to_default+0x38>
   38ea0:	6943      	ldr	r3, [r0, #20]
   38ea2:	8019      	strh	r1, [r3, #0]
   38ea4:	b007      	add	sp, #28
   38ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38ea8:	e9d0 0304 	ldrd	r0, r3, [r0, #16]
   38eac:	4283      	cmp	r3, r0
   38eae:	d0b9      	beq.n	38e24 <pb_field_set_to_default+0x24>
   38eb0:	7019      	strb	r1, [r3, #0]
   38eb2:	e7b7      	b.n	38e24 <pb_field_set_to_default+0x24>
   38eb4:	f7d3 fa52 	bl	c35c <memset>
   38eb8:	e7be      	b.n	38e38 <pb_field_set_to_default+0x38>
   38eba:	466e      	mov	r6, sp
   38ebc:	4602      	mov	r2, r0
   38ebe:	4630      	mov	r0, r6
   38ec0:	f001 ff6e 	bl	3ada0 <pb_field_iter_begin>
   38ec4:	2800      	cmp	r0, #0
   38ec6:	d0b7      	beq.n	38e38 <pb_field_set_to_default+0x38>
   38ec8:	4630      	mov	r0, r6
   38eca:	f7ff ff99 	bl	38e00 <pb_field_set_to_default>
   38ece:	4630      	mov	r0, r6
   38ed0:	f001 ff7c 	bl	3adcc <pb_field_iter_next>
   38ed4:	2800      	cmp	r0, #0
   38ed6:	d1f7      	bne.n	38ec8 <pb_field_set_to_default+0xc8>
   38ed8:	e7ae      	b.n	38e38 <pb_field_set_to_default+0x38>
   38eda:	bf00      	nop

00038edc <pb_read>:
   38edc:	b570      	push	{r4, r5, r6, lr}
   38ede:	4604      	mov	r4, r0
   38ee0:	b084      	sub	sp, #16
   38ee2:	4615      	mov	r5, r2
   38ee4:	b161      	cbz	r1, 38f00 <pb_read+0x24>
   38ee6:	68a3      	ldr	r3, [r4, #8]
   38ee8:	42ab      	cmp	r3, r5
   38eea:	d321      	bcc.n	38f30 <pb_read+0x54>
   38eec:	6823      	ldr	r3, [r4, #0]
   38eee:	462a      	mov	r2, r5
   38ef0:	4620      	mov	r0, r4
   38ef2:	4798      	blx	r3
   38ef4:	b328      	cbz	r0, 38f42 <pb_read+0x66>
   38ef6:	68a3      	ldr	r3, [r4, #8]
   38ef8:	1b5d      	subs	r5, r3, r5
   38efa:	60a5      	str	r5, [r4, #8]
   38efc:	b004      	add	sp, #16
   38efe:	bd70      	pop	{r4, r5, r6, pc}
   38f00:	4b14      	ldr	r3, [pc, #80]	; (38f54 <pb_read+0x78>)
   38f02:	6802      	ldr	r2, [r0, #0]
   38f04:	429a      	cmp	r2, r3
   38f06:	d0ee      	beq.n	38ee6 <pb_read+0xa>
   38f08:	2d10      	cmp	r5, #16
   38f0a:	466e      	mov	r6, sp
   38f0c:	d909      	bls.n	38f22 <pb_read+0x46>
   38f0e:	2210      	movs	r2, #16
   38f10:	4631      	mov	r1, r6
   38f12:	4620      	mov	r0, r4
   38f14:	f7ff ffe2 	bl	38edc <pb_read>
   38f18:	3d10      	subs	r5, #16
   38f1a:	2800      	cmp	r0, #0
   38f1c:	d0ee      	beq.n	38efc <pb_read+0x20>
   38f1e:	2d10      	cmp	r5, #16
   38f20:	d8f5      	bhi.n	38f0e <pb_read+0x32>
   38f22:	462a      	mov	r2, r5
   38f24:	4631      	mov	r1, r6
   38f26:	4620      	mov	r0, r4
   38f28:	f7ff ffd8 	bl	38edc <pb_read>
   38f2c:	b004      	add	sp, #16
   38f2e:	bd70      	pop	{r4, r5, r6, pc}
   38f30:	68e3      	ldr	r3, [r4, #12]
   38f32:	4a09      	ldr	r2, [pc, #36]	; (38f58 <pb_read+0x7c>)
   38f34:	2000      	movs	r0, #0
   38f36:	2b00      	cmp	r3, #0
   38f38:	bf08      	it	eq
   38f3a:	4613      	moveq	r3, r2
   38f3c:	60e3      	str	r3, [r4, #12]
   38f3e:	b004      	add	sp, #16
   38f40:	bd70      	pop	{r4, r5, r6, pc}
   38f42:	68e3      	ldr	r3, [r4, #12]
   38f44:	4a05      	ldr	r2, [pc, #20]	; (38f5c <pb_read+0x80>)
   38f46:	2b00      	cmp	r3, #0
   38f48:	bf08      	it	eq
   38f4a:	4613      	moveq	r3, r2
   38f4c:	60e3      	str	r3, [r4, #12]
   38f4e:	b004      	add	sp, #16
   38f50:	bd70      	pop	{r4, r5, r6, pc}
   38f52:	bf00      	nop
   38f54:	00038c7d 	.word	0x00038c7d
   38f58:	00044bc4 	.word	0x00044bc4
   38f5c:	00044bd4 	.word	0x00044bd4

00038f60 <pb_dec_fixed_length_bytes>:
   38f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   38f62:	b083      	sub	sp, #12
   38f64:	460e      	mov	r6, r1
   38f66:	4617      	mov	r7, r2
   38f68:	a901      	add	r1, sp, #4
   38f6a:	2200      	movs	r2, #0
   38f6c:	4605      	mov	r5, r0
   38f6e:	f7ff febf 	bl	38cf0 <pb_decode_varint32_eof>
   38f72:	4604      	mov	r4, r0
   38f74:	b178      	cbz	r0, 38f96 <pb_dec_fixed_length_bytes+0x36>
   38f76:	9901      	ldr	r1, [sp, #4]
   38f78:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   38f7c:	d20e      	bcs.n	38f9c <pb_dec_fixed_length_bytes+0x3c>
   38f7e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   38f82:	b1f1      	cbz	r1, 38fc2 <pb_dec_fixed_length_bytes+0x62>
   38f84:	4291      	cmp	r1, r2
   38f86:	d013      	beq.n	38fb0 <pb_dec_fixed_length_bytes+0x50>
   38f88:	68eb      	ldr	r3, [r5, #12]
   38f8a:	4a10      	ldr	r2, [pc, #64]	; (38fcc <pb_dec_fixed_length_bytes+0x6c>)
   38f8c:	2b00      	cmp	r3, #0
   38f8e:	bf08      	it	eq
   38f90:	4613      	moveq	r3, r2
   38f92:	60eb      	str	r3, [r5, #12]
   38f94:	2400      	movs	r4, #0
   38f96:	4620      	mov	r0, r4
   38f98:	b003      	add	sp, #12
   38f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38f9c:	68eb      	ldr	r3, [r5, #12]
   38f9e:	4a0c      	ldr	r2, [pc, #48]	; (38fd0 <pb_dec_fixed_length_bytes+0x70>)
   38fa0:	2400      	movs	r4, #0
   38fa2:	2b00      	cmp	r3, #0
   38fa4:	bf08      	it	eq
   38fa6:	4613      	moveq	r3, r2
   38fa8:	4620      	mov	r0, r4
   38faa:	60eb      	str	r3, [r5, #12]
   38fac:	b003      	add	sp, #12
   38fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38fb0:	460a      	mov	r2, r1
   38fb2:	4628      	mov	r0, r5
   38fb4:	4639      	mov	r1, r7
   38fb6:	f7ff ff91 	bl	38edc <pb_read>
   38fba:	4604      	mov	r4, r0
   38fbc:	4620      	mov	r0, r4
   38fbe:	b003      	add	sp, #12
   38fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38fc2:	4638      	mov	r0, r7
   38fc4:	f7d3 f9ca 	bl	c35c <memset>
   38fc8:	e7e5      	b.n	38f96 <pb_dec_fixed_length_bytes+0x36>
   38fca:	bf00      	nop
   38fcc:	00044aec 	.word	0x00044aec
   38fd0:	00044adc 	.word	0x00044adc

00038fd4 <pb_dec_string>:
   38fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   38fd6:	b083      	sub	sp, #12
   38fd8:	460c      	mov	r4, r1
   38fda:	4616      	mov	r6, r2
   38fdc:	a901      	add	r1, sp, #4
   38fde:	2200      	movs	r2, #0
   38fe0:	4605      	mov	r5, r0
   38fe2:	f7ff fe85 	bl	38cf0 <pb_decode_varint32_eof>
   38fe6:	b1a8      	cbz	r0, 39014 <pb_dec_string+0x40>
   38fe8:	9a01      	ldr	r2, [sp, #4]
   38fea:	2301      	movs	r3, #1
   38fec:	18d3      	adds	r3, r2, r3
   38fee:	f04f 0700 	mov.w	r7, #0
   38ff2:	d221      	bcs.n	39038 <pb_dec_string+0x64>
   38ff4:	78a1      	ldrb	r1, [r4, #2]
   38ff6:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   38ffa:	2980      	cmp	r1, #128	; 0x80
   38ffc:	d014      	beq.n	39028 <pb_dec_string+0x54>
   38ffe:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   39002:	4299      	cmp	r1, r3
   39004:	d208      	bcs.n	39018 <pb_dec_string+0x44>
   39006:	68eb      	ldr	r3, [r5, #12]
   39008:	4a0f      	ldr	r2, [pc, #60]	; (39048 <pb_dec_string+0x74>)
   3900a:	2b00      	cmp	r3, #0
   3900c:	bf08      	it	eq
   3900e:	4613      	moveq	r3, r2
   39010:	4638      	mov	r0, r7
   39012:	60eb      	str	r3, [r5, #12]
   39014:	b003      	add	sp, #12
   39016:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39018:	4628      	mov	r0, r5
   3901a:	4631      	mov	r1, r6
   3901c:	f7ff ff5e 	bl	38edc <pb_read>
   39020:	9b01      	ldr	r3, [sp, #4]
   39022:	54f7      	strb	r7, [r6, r3]
   39024:	b003      	add	sp, #12
   39026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39028:	68eb      	ldr	r3, [r5, #12]
   3902a:	4a08      	ldr	r2, [pc, #32]	; (3904c <pb_dec_string+0x78>)
   3902c:	2b00      	cmp	r3, #0
   3902e:	bf08      	it	eq
   39030:	4613      	moveq	r3, r2
   39032:	4638      	mov	r0, r7
   39034:	60eb      	str	r3, [r5, #12]
   39036:	e7ed      	b.n	39014 <pb_dec_string+0x40>
   39038:	68eb      	ldr	r3, [r5, #12]
   3903a:	4a05      	ldr	r2, [pc, #20]	; (39050 <pb_dec_string+0x7c>)
   3903c:	2b00      	cmp	r3, #0
   3903e:	bf08      	it	eq
   39040:	4613      	moveq	r3, r2
   39042:	4638      	mov	r0, r7
   39044:	60eb      	str	r3, [r5, #12]
   39046:	e7e5      	b.n	39014 <pb_dec_string+0x40>
   39048:	00044b34 	.word	0x00044b34
   3904c:	00044b20 	.word	0x00044b20
   39050:	00044b10 	.word	0x00044b10

00039054 <pb_dec_bytes>:
   39054:	b570      	push	{r4, r5, r6, lr}
   39056:	b082      	sub	sp, #8
   39058:	460d      	mov	r5, r1
   3905a:	4616      	mov	r6, r2
   3905c:	a901      	add	r1, sp, #4
   3905e:	2200      	movs	r2, #0
   39060:	4604      	mov	r4, r0
   39062:	f7ff fe45 	bl	38cf0 <pb_decode_varint32_eof>
   39066:	b1b0      	cbz	r0, 39096 <pb_dec_bytes+0x42>
   39068:	9b01      	ldr	r3, [sp, #4]
   3906a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3906e:	d20b      	bcs.n	39088 <pb_dec_bytes+0x34>
   39070:	2202      	movs	r2, #2
   39072:	189a      	adds	r2, r3, r2
   39074:	d222      	bcs.n	390bc <pb_dec_bytes+0x68>
   39076:	78a8      	ldrb	r0, [r5, #2]
   39078:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   3907c:	2880      	cmp	r0, #128	; 0x80
   3907e:	d015      	beq.n	390ac <pb_dec_bytes+0x58>
   39080:	f8b5 1007 	ldrh.w	r1, [r5, #7]
   39084:	4291      	cmp	r1, r2
   39086:	d208      	bcs.n	3909a <pb_dec_bytes+0x46>
   39088:	68e3      	ldr	r3, [r4, #12]
   3908a:	4a10      	ldr	r2, [pc, #64]	; (390cc <pb_dec_bytes+0x78>)
   3908c:	2b00      	cmp	r3, #0
   3908e:	bf08      	it	eq
   39090:	4613      	moveq	r3, r2
   39092:	60e3      	str	r3, [r4, #12]
   39094:	2000      	movs	r0, #0
   39096:	b002      	add	sp, #8
   39098:	bd70      	pop	{r4, r5, r6, pc}
   3909a:	4631      	mov	r1, r6
   3909c:	461a      	mov	r2, r3
   3909e:	f821 3b02 	strh.w	r3, [r1], #2
   390a2:	4620      	mov	r0, r4
   390a4:	f7ff ff1a 	bl	38edc <pb_read>
   390a8:	b002      	add	sp, #8
   390aa:	bd70      	pop	{r4, r5, r6, pc}
   390ac:	68e3      	ldr	r3, [r4, #12]
   390ae:	4a08      	ldr	r2, [pc, #32]	; (390d0 <pb_dec_bytes+0x7c>)
   390b0:	2b00      	cmp	r3, #0
   390b2:	bf08      	it	eq
   390b4:	4613      	moveq	r3, r2
   390b6:	60e3      	str	r3, [r4, #12]
   390b8:	2000      	movs	r0, #0
   390ba:	e7ec      	b.n	39096 <pb_dec_bytes+0x42>
   390bc:	68e3      	ldr	r3, [r4, #12]
   390be:	4a05      	ldr	r2, [pc, #20]	; (390d4 <pb_dec_bytes+0x80>)
   390c0:	2b00      	cmp	r3, #0
   390c2:	bf08      	it	eq
   390c4:	4613      	moveq	r3, r2
   390c6:	60e3      	str	r3, [r4, #12]
   390c8:	2000      	movs	r0, #0
   390ca:	e7e4      	b.n	39096 <pb_dec_bytes+0x42>
   390cc:	00044adc 	.word	0x00044adc
   390d0:	00044b20 	.word	0x00044b20
   390d4:	00044b10 	.word	0x00044b10

000390d8 <pb_dec_fixed32>:
   390d8:	b530      	push	{r4, r5, lr}
   390da:	6881      	ldr	r1, [r0, #8]
   390dc:	2903      	cmp	r1, #3
   390de:	b083      	sub	sp, #12
   390e0:	4604      	mov	r4, r0
   390e2:	d915      	bls.n	39110 <pb_dec_fixed32+0x38>
   390e4:	4615      	mov	r5, r2
   390e6:	2204      	movs	r2, #4
   390e8:	6803      	ldr	r3, [r0, #0]
   390ea:	eb0d 0102 	add.w	r1, sp, r2
   390ee:	4798      	blx	r3
   390f0:	b130      	cbz	r0, 39100 <pb_dec_fixed32+0x28>
   390f2:	68a3      	ldr	r3, [r4, #8]
   390f4:	9a01      	ldr	r2, [sp, #4]
   390f6:	3b04      	subs	r3, #4
   390f8:	60a3      	str	r3, [r4, #8]
   390fa:	602a      	str	r2, [r5, #0]
   390fc:	b003      	add	sp, #12
   390fe:	bd30      	pop	{r4, r5, pc}
   39100:	68e3      	ldr	r3, [r4, #12]
   39102:	4a08      	ldr	r2, [pc, #32]	; (39124 <pb_dec_fixed32+0x4c>)
   39104:	2b00      	cmp	r3, #0
   39106:	bf08      	it	eq
   39108:	4613      	moveq	r3, r2
   3910a:	60e3      	str	r3, [r4, #12]
   3910c:	b003      	add	sp, #12
   3910e:	bd30      	pop	{r4, r5, pc}
   39110:	68c2      	ldr	r2, [r0, #12]
   39112:	4905      	ldr	r1, [pc, #20]	; (39128 <pb_dec_fixed32+0x50>)
   39114:	2a00      	cmp	r2, #0
   39116:	bf08      	it	eq
   39118:	460a      	moveq	r2, r1
   3911a:	60c2      	str	r2, [r0, #12]
   3911c:	2000      	movs	r0, #0
   3911e:	b003      	add	sp, #12
   39120:	bd30      	pop	{r4, r5, pc}
   39122:	bf00      	nop
   39124:	00044bd4 	.word	0x00044bd4
   39128:	00044bc4 	.word	0x00044bc4

0003912c <pb_dec_fixed64>:
   3912c:	b530      	push	{r4, r5, lr}
   3912e:	6881      	ldr	r1, [r0, #8]
   39130:	2907      	cmp	r1, #7
   39132:	b083      	sub	sp, #12
   39134:	4604      	mov	r4, r0
   39136:	d916      	bls.n	39166 <pb_dec_fixed64+0x3a>
   39138:	4615      	mov	r5, r2
   3913a:	6803      	ldr	r3, [r0, #0]
   3913c:	2208      	movs	r2, #8
   3913e:	4669      	mov	r1, sp
   39140:	4798      	blx	r3
   39142:	b140      	cbz	r0, 39156 <pb_dec_fixed64+0x2a>
   39144:	68a1      	ldr	r1, [r4, #8]
   39146:	e9dd 2300 	ldrd	r2, r3, [sp]
   3914a:	3908      	subs	r1, #8
   3914c:	60a1      	str	r1, [r4, #8]
   3914e:	e9c5 2300 	strd	r2, r3, [r5]
   39152:	b003      	add	sp, #12
   39154:	bd30      	pop	{r4, r5, pc}
   39156:	68e3      	ldr	r3, [r4, #12]
   39158:	4a07      	ldr	r2, [pc, #28]	; (39178 <pb_dec_fixed64+0x4c>)
   3915a:	2b00      	cmp	r3, #0
   3915c:	bf08      	it	eq
   3915e:	4613      	moveq	r3, r2
   39160:	60e3      	str	r3, [r4, #12]
   39162:	b003      	add	sp, #12
   39164:	bd30      	pop	{r4, r5, pc}
   39166:	68c2      	ldr	r2, [r0, #12]
   39168:	4904      	ldr	r1, [pc, #16]	; (3917c <pb_dec_fixed64+0x50>)
   3916a:	2a00      	cmp	r2, #0
   3916c:	bf08      	it	eq
   3916e:	460a      	moveq	r2, r1
   39170:	60c2      	str	r2, [r0, #12]
   39172:	2000      	movs	r0, #0
   39174:	b003      	add	sp, #12
   39176:	bd30      	pop	{r4, r5, pc}
   39178:	00044bd4 	.word	0x00044bd4
   3917c:	00044bc4 	.word	0x00044bc4

00039180 <pb_istream_from_buffer>:
   39180:	b410      	push	{r4}
   39182:	4c04      	ldr	r4, [pc, #16]	; (39194 <pb_istream_from_buffer+0x14>)
   39184:	6041      	str	r1, [r0, #4]
   39186:	2100      	movs	r1, #0
   39188:	6004      	str	r4, [r0, #0]
   3918a:	6082      	str	r2, [r0, #8]
   3918c:	60c1      	str	r1, [r0, #12]
   3918e:	f85d 4b04 	ldr.w	r4, [sp], #4
   39192:	4770      	bx	lr
   39194:	00038c7d 	.word	0x00038c7d

00039198 <pb_decode_varint>:
   39198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3919c:	6883      	ldr	r3, [r0, #8]
   3919e:	b083      	sub	sp, #12
   391a0:	4604      	mov	r4, r0
   391a2:	b36b      	cbz	r3, 39200 <pb_decode_varint+0x68>
   391a4:	2700      	movs	r7, #0
   391a6:	4688      	mov	r8, r1
   391a8:	46b9      	mov	r9, r7
   391aa:	2609      	movs	r6, #9
   391ac:	2507      	movs	r5, #7
   391ae:	6823      	ldr	r3, [r4, #0]
   391b0:	2201      	movs	r2, #1
   391b2:	f10d 0107 	add.w	r1, sp, #7
   391b6:	4620      	mov	r0, r4
   391b8:	4798      	blx	r3
   391ba:	f1a5 0a07 	sub.w	sl, r5, #7
   391be:	f1a5 0c27 	sub.w	ip, r5, #39	; 0x27
   391c2:	f1ca 0b20 	rsb	fp, sl, #32
   391c6:	b328      	cbz	r0, 39214 <pb_decode_varint+0x7c>
   391c8:	f89d e007 	ldrb.w	lr, [sp, #7]
   391cc:	68a1      	ldr	r1, [r4, #8]
   391ce:	f00e 027f 	and.w	r2, lr, #127	; 0x7f
   391d2:	b2d2      	uxtb	r2, r2
   391d4:	fa02 fc0c 	lsl.w	ip, r2, ip
   391d8:	fa22 fb0b 	lsr.w	fp, r2, fp
   391dc:	ea4c 0c0b 	orr.w	ip, ip, fp
   391e0:	fa02 f20a 	lsl.w	r2, r2, sl
   391e4:	3901      	subs	r1, #1
   391e6:	f01e 0f80 	tst.w	lr, #128	; 0x80
   391ea:	ea4c 0909 	orr.w	r9, ip, r9
   391ee:	ea47 0702 	orr.w	r7, r7, r2
   391f2:	60a1      	str	r1, [r4, #8]
   391f4:	d01f      	beq.n	39236 <pb_decode_varint+0x9e>
   391f6:	b1b6      	cbz	r6, 39226 <pb_decode_varint+0x8e>
   391f8:	3e01      	subs	r6, #1
   391fa:	3507      	adds	r5, #7
   391fc:	2900      	cmp	r1, #0
   391fe:	d1d6      	bne.n	391ae <pb_decode_varint+0x16>
   39200:	68e3      	ldr	r3, [r4, #12]
   39202:	4a0e      	ldr	r2, [pc, #56]	; (3923c <pb_decode_varint+0xa4>)
   39204:	2b00      	cmp	r3, #0
   39206:	bf08      	it	eq
   39208:	4613      	moveq	r3, r2
   3920a:	60e3      	str	r3, [r4, #12]
   3920c:	2000      	movs	r0, #0
   3920e:	b003      	add	sp, #12
   39210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39214:	68e3      	ldr	r3, [r4, #12]
   39216:	4a0a      	ldr	r2, [pc, #40]	; (39240 <pb_decode_varint+0xa8>)
   39218:	2b00      	cmp	r3, #0
   3921a:	bf08      	it	eq
   3921c:	4613      	moveq	r3, r2
   3921e:	60e3      	str	r3, [r4, #12]
   39220:	b003      	add	sp, #12
   39222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39226:	68e3      	ldr	r3, [r4, #12]
   39228:	4a06      	ldr	r2, [pc, #24]	; (39244 <pb_decode_varint+0xac>)
   3922a:	2b00      	cmp	r3, #0
   3922c:	bf08      	it	eq
   3922e:	4613      	moveq	r3, r2
   39230:	4630      	mov	r0, r6
   39232:	60e3      	str	r3, [r4, #12]
   39234:	e7eb      	b.n	3920e <pb_decode_varint+0x76>
   39236:	e9c8 7900 	strd	r7, r9, [r8]
   3923a:	e7e8      	b.n	3920e <pb_decode_varint+0x76>
   3923c:	00044bc4 	.word	0x00044bc4
   39240:	00044bd4 	.word	0x00044bd4
   39244:	00044be0 	.word	0x00044be0

00039248 <pb_dec_uvarint>:
   39248:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   3924c:	b082      	sub	sp, #8
   3924e:	460d      	mov	r5, r1
   39250:	4669      	mov	r1, sp
   39252:	4616      	mov	r6, r2
   39254:	4604      	mov	r4, r0
   39256:	f7ff ff9f 	bl	39198 <pb_decode_varint>
   3925a:	b1d8      	cbz	r0, 39294 <pb_dec_uvarint+0x4c>
   3925c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   39260:	2b08      	cmp	r3, #8
   39262:	d01a      	beq.n	3929a <pb_dec_uvarint+0x52>
   39264:	2b04      	cmp	r3, #4
   39266:	d027      	beq.n	392b8 <pb_dec_uvarint+0x70>
   39268:	2b02      	cmp	r3, #2
   3926a:	d01d      	beq.n	392a8 <pb_dec_uvarint+0x60>
   3926c:	2b01      	cmp	r3, #1
   3926e:	d12a      	bne.n	392c6 <pb_dec_uvarint+0x7e>
   39270:	e9dd 2300 	ldrd	r2, r3, [sp]
   39274:	f04f 0900 	mov.w	r9, #0
   39278:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   3927c:	7032      	strb	r2, [r6, #0]
   3927e:	4599      	cmp	r9, r3
   39280:	bf08      	it	eq
   39282:	4590      	cmpeq	r8, r2
   39284:	d006      	beq.n	39294 <pb_dec_uvarint+0x4c>
   39286:	68e3      	ldr	r3, [r4, #12]
   39288:	4a13      	ldr	r2, [pc, #76]	; (392d8 <pb_dec_uvarint+0x90>)
   3928a:	2b00      	cmp	r3, #0
   3928c:	bf08      	it	eq
   3928e:	4613      	moveq	r3, r2
   39290:	60e3      	str	r3, [r4, #12]
   39292:	2000      	movs	r0, #0
   39294:	b002      	add	sp, #8
   39296:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   3929a:	e9dd 2300 	ldrd	r2, r3, [sp]
   3929e:	e9c6 2300 	strd	r2, r3, [r6]
   392a2:	b002      	add	sp, #8
   392a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   392a8:	e9dd 2300 	ldrd	r2, r3, [sp]
   392ac:	f04f 0900 	mov.w	r9, #0
   392b0:	fa1f f882 	uxth.w	r8, r2
   392b4:	8032      	strh	r2, [r6, #0]
   392b6:	e7e2      	b.n	3927e <pb_dec_uvarint+0x36>
   392b8:	e9dd 2300 	ldrd	r2, r3, [sp]
   392bc:	f04f 0900 	mov.w	r9, #0
   392c0:	4690      	mov	r8, r2
   392c2:	6032      	str	r2, [r6, #0]
   392c4:	e7db      	b.n	3927e <pb_dec_uvarint+0x36>
   392c6:	68e3      	ldr	r3, [r4, #12]
   392c8:	4a04      	ldr	r2, [pc, #16]	; (392dc <pb_dec_uvarint+0x94>)
   392ca:	2b00      	cmp	r3, #0
   392cc:	bf08      	it	eq
   392ce:	4613      	moveq	r3, r2
   392d0:	60e3      	str	r3, [r4, #12]
   392d2:	2000      	movs	r0, #0
   392d4:	e7de      	b.n	39294 <pb_dec_uvarint+0x4c>
   392d6:	bf00      	nop
   392d8:	00044b74 	.word	0x00044b74
   392dc:	00044b60 	.word	0x00044b60

000392e0 <pb_dec_varint>:
   392e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   392e2:	b083      	sub	sp, #12
   392e4:	460e      	mov	r6, r1
   392e6:	4669      	mov	r1, sp
   392e8:	4615      	mov	r5, r2
   392ea:	4604      	mov	r4, r0
   392ec:	f7ff ff54 	bl	39198 <pb_decode_varint>
   392f0:	b1e8      	cbz	r0, 3932e <pb_dec_varint+0x4e>
   392f2:	f8b6 1007 	ldrh.w	r1, [r6, #7]
   392f6:	2908      	cmp	r1, #8
   392f8:	e9dd 3200 	ldrd	r3, r2, [sp]
   392fc:	d019      	beq.n	39332 <pb_dec_varint+0x52>
   392fe:	2904      	cmp	r1, #4
   39300:	461e      	mov	r6, r3
   39302:	ea4f 77e3 	mov.w	r7, r3, asr #31
   39306:	d01d      	beq.n	39344 <pb_dec_varint+0x64>
   39308:	2902      	cmp	r1, #2
   3930a:	d016      	beq.n	3933a <pb_dec_varint+0x5a>
   3930c:	2901      	cmp	r1, #1
   3930e:	d11c      	bne.n	3934a <pb_dec_varint+0x6a>
   39310:	b25b      	sxtb	r3, r3
   39312:	b25a      	sxtb	r2, r3
   39314:	702b      	strb	r3, [r5, #0]
   39316:	17d3      	asrs	r3, r2, #31
   39318:	42bb      	cmp	r3, r7
   3931a:	bf08      	it	eq
   3931c:	42b2      	cmpeq	r2, r6
   3931e:	d006      	beq.n	3932e <pb_dec_varint+0x4e>
   39320:	68e3      	ldr	r3, [r4, #12]
   39322:	4a0e      	ldr	r2, [pc, #56]	; (3935c <pb_dec_varint+0x7c>)
   39324:	2b00      	cmp	r3, #0
   39326:	bf08      	it	eq
   39328:	4613      	moveq	r3, r2
   3932a:	60e3      	str	r3, [r4, #12]
   3932c:	2000      	movs	r0, #0
   3932e:	b003      	add	sp, #12
   39330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39332:	e9c5 3200 	strd	r3, r2, [r5]
   39336:	b003      	add	sp, #12
   39338:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3933a:	b21b      	sxth	r3, r3
   3933c:	b21a      	sxth	r2, r3
   3933e:	802b      	strh	r3, [r5, #0]
   39340:	17d3      	asrs	r3, r2, #31
   39342:	e7e9      	b.n	39318 <pb_dec_varint+0x38>
   39344:	602b      	str	r3, [r5, #0]
   39346:	b003      	add	sp, #12
   39348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3934a:	68e3      	ldr	r3, [r4, #12]
   3934c:	4a04      	ldr	r2, [pc, #16]	; (39360 <pb_dec_varint+0x80>)
   3934e:	2b00      	cmp	r3, #0
   39350:	bf08      	it	eq
   39352:	4613      	moveq	r3, r2
   39354:	60e3      	str	r3, [r4, #12]
   39356:	2000      	movs	r0, #0
   39358:	e7e9      	b.n	3932e <pb_dec_varint+0x4e>
   3935a:	bf00      	nop
   3935c:	00044b74 	.word	0x00044b74
   39360:	00044b60 	.word	0x00044b60

00039364 <pb_dec_svarint>:
   39364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39368:	b082      	sub	sp, #8
   3936a:	460f      	mov	r7, r1
   3936c:	4669      	mov	r1, sp
   3936e:	4690      	mov	r8, r2
   39370:	4606      	mov	r6, r0
   39372:	f7ff ff11 	bl	39198 <pb_decode_varint>
   39376:	b358      	cbz	r0, 393d0 <pb_dec_svarint+0x6c>
   39378:	e9dd 3200 	ldrd	r3, r2, [sp]
   3937c:	2500      	movs	r5, #0
   3937e:	f003 0401 	and.w	r4, r3, #1
   39382:	085b      	lsrs	r3, r3, #1
   39384:	ea54 0105 	orrs.w	r1, r4, r5
   39388:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   3938c:	bf14      	ite	ne
   3938e:	43dc      	mvnne	r4, r3
   39390:	461c      	moveq	r4, r3
   39392:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   39396:	ea4f 0252 	mov.w	r2, r2, lsr #1
   3939a:	bf14      	ite	ne
   3939c:	43d5      	mvnne	r5, r2
   3939e:	4615      	moveq	r5, r2
   393a0:	2b08      	cmp	r3, #8
   393a2:	d018      	beq.n	393d6 <pb_dec_svarint+0x72>
   393a4:	2b04      	cmp	r3, #4
   393a6:	d021      	beq.n	393ec <pb_dec_svarint+0x88>
   393a8:	2b02      	cmp	r3, #2
   393aa:	d019      	beq.n	393e0 <pb_dec_svarint+0x7c>
   393ac:	2b01      	cmp	r3, #1
   393ae:	d122      	bne.n	393f6 <pb_dec_svarint+0x92>
   393b0:	b262      	sxtb	r2, r4
   393b2:	f888 2000 	strb.w	r2, [r8]
   393b6:	b252      	sxtb	r2, r2
   393b8:	17d3      	asrs	r3, r2, #31
   393ba:	42ab      	cmp	r3, r5
   393bc:	bf08      	it	eq
   393be:	42a2      	cmpeq	r2, r4
   393c0:	d006      	beq.n	393d0 <pb_dec_svarint+0x6c>
   393c2:	68f3      	ldr	r3, [r6, #12]
   393c4:	4a10      	ldr	r2, [pc, #64]	; (39408 <pb_dec_svarint+0xa4>)
   393c6:	2b00      	cmp	r3, #0
   393c8:	bf08      	it	eq
   393ca:	4613      	moveq	r3, r2
   393cc:	60f3      	str	r3, [r6, #12]
   393ce:	2000      	movs	r0, #0
   393d0:	b002      	add	sp, #8
   393d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   393d6:	e9c8 4500 	strd	r4, r5, [r8]
   393da:	b002      	add	sp, #8
   393dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   393e0:	b222      	sxth	r2, r4
   393e2:	f8a8 2000 	strh.w	r2, [r8]
   393e6:	b212      	sxth	r2, r2
   393e8:	17d3      	asrs	r3, r2, #31
   393ea:	e7e6      	b.n	393ba <pb_dec_svarint+0x56>
   393ec:	f8c8 4000 	str.w	r4, [r8]
   393f0:	4622      	mov	r2, r4
   393f2:	17e3      	asrs	r3, r4, #31
   393f4:	e7e1      	b.n	393ba <pb_dec_svarint+0x56>
   393f6:	68f3      	ldr	r3, [r6, #12]
   393f8:	4a04      	ldr	r2, [pc, #16]	; (3940c <pb_dec_svarint+0xa8>)
   393fa:	2b00      	cmp	r3, #0
   393fc:	bf08      	it	eq
   393fe:	4613      	moveq	r3, r2
   39400:	60f3      	str	r3, [r6, #12]
   39402:	2000      	movs	r0, #0
   39404:	e7e4      	b.n	393d0 <pb_dec_svarint+0x6c>
   39406:	bf00      	nop
   39408:	00044b74 	.word	0x00044b74
   3940c:	00044b60 	.word	0x00044b60

00039410 <pb_skip_field>:
   39410:	b510      	push	{r4, lr}
   39412:	4604      	mov	r4, r0
   39414:	b082      	sub	sp, #8
   39416:	2905      	cmp	r1, #5
   39418:	d836      	bhi.n	39488 <pb_skip_field+0x78>
   3941a:	e8df f001 	tbb	[pc, r1]
   3941e:	151b      	.short	0x151b
   39420:	03353509 	.word	0x03353509
   39424:	2204      	movs	r2, #4
   39426:	2100      	movs	r1, #0
   39428:	f7ff fd58 	bl	38edc <pb_read>
   3942c:	b002      	add	sp, #8
   3942e:	bd10      	pop	{r4, pc}
   39430:	2200      	movs	r2, #0
   39432:	a901      	add	r1, sp, #4
   39434:	f7ff fc5c 	bl	38cf0 <pb_decode_varint32_eof>
   39438:	2800      	cmp	r0, #0
   3943a:	d0f7      	beq.n	3942c <pb_skip_field+0x1c>
   3943c:	4620      	mov	r0, r4
   3943e:	9a01      	ldr	r2, [sp, #4]
   39440:	2100      	movs	r1, #0
   39442:	f7ff fd4b 	bl	38edc <pb_read>
   39446:	e7f1      	b.n	3942c <pb_skip_field+0x1c>
   39448:	2208      	movs	r2, #8
   3944a:	2100      	movs	r1, #0
   3944c:	f7ff fd46 	bl	38edc <pb_read>
   39450:	b002      	add	sp, #8
   39452:	bd10      	pop	{r4, pc}
   39454:	6883      	ldr	r3, [r0, #8]
   39456:	b173      	cbz	r3, 39476 <pb_skip_field+0x66>
   39458:	6823      	ldr	r3, [r4, #0]
   3945a:	2201      	movs	r2, #1
   3945c:	a901      	add	r1, sp, #4
   3945e:	4620      	mov	r0, r4
   39460:	4798      	blx	r3
   39462:	b1d0      	cbz	r0, 3949a <pb_skip_field+0x8a>
   39464:	68a3      	ldr	r3, [r4, #8]
   39466:	f99d 2004 	ldrsb.w	r2, [sp, #4]
   3946a:	3b01      	subs	r3, #1
   3946c:	2a00      	cmp	r2, #0
   3946e:	60a3      	str	r3, [r4, #8]
   39470:	dadc      	bge.n	3942c <pb_skip_field+0x1c>
   39472:	2b00      	cmp	r3, #0
   39474:	d1f0      	bne.n	39458 <pb_skip_field+0x48>
   39476:	68e3      	ldr	r3, [r4, #12]
   39478:	4a0b      	ldr	r2, [pc, #44]	; (394a8 <pb_skip_field+0x98>)
   3947a:	2000      	movs	r0, #0
   3947c:	2b00      	cmp	r3, #0
   3947e:	bf08      	it	eq
   39480:	4613      	moveq	r3, r2
   39482:	60e3      	str	r3, [r4, #12]
   39484:	b002      	add	sp, #8
   39486:	bd10      	pop	{r4, pc}
   39488:	68c3      	ldr	r3, [r0, #12]
   3948a:	4a08      	ldr	r2, [pc, #32]	; (394ac <pb_skip_field+0x9c>)
   3948c:	2b00      	cmp	r3, #0
   3948e:	bf08      	it	eq
   39490:	4613      	moveq	r3, r2
   39492:	60c3      	str	r3, [r0, #12]
   39494:	2000      	movs	r0, #0
   39496:	b002      	add	sp, #8
   39498:	bd10      	pop	{r4, pc}
   3949a:	68e3      	ldr	r3, [r4, #12]
   3949c:	4a04      	ldr	r2, [pc, #16]	; (394b0 <pb_skip_field+0xa0>)
   3949e:	2b00      	cmp	r3, #0
   394a0:	bf08      	it	eq
   394a2:	4613      	moveq	r3, r2
   394a4:	60e3      	str	r3, [r4, #12]
   394a6:	e7c1      	b.n	3942c <pb_skip_field+0x1c>
   394a8:	00044bc4 	.word	0x00044bc4
   394ac:	00044bf0 	.word	0x00044bf0
   394b0:	00044bd4 	.word	0x00044bd4

000394b4 <decode_field>:
   394b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   394b8:	6856      	ldr	r6, [r2, #4]
   394ba:	4614      	mov	r4, r2
   394bc:	78b2      	ldrb	r2, [r6, #2]
   394be:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   394c2:	2b40      	cmp	r3, #64	; 0x40
   394c4:	b08d      	sub	sp, #52	; 0x34
   394c6:	4605      	mov	r5, r0
   394c8:	d00d      	beq.n	394e6 <decode_field+0x32>
   394ca:	2b80      	cmp	r3, #128	; 0x80
   394cc:	d049      	beq.n	39562 <decode_field+0xae>
   394ce:	b32b      	cbz	r3, 3951c <decode_field+0x68>
   394d0:	68eb      	ldr	r3, [r5, #12]
   394d2:	4aa4      	ldr	r2, [pc, #656]	; (39764 <decode_field+0x2b0>)
   394d4:	2b00      	cmp	r3, #0
   394d6:	bf08      	it	eq
   394d8:	4613      	moveq	r3, r2
   394da:	60eb      	str	r3, [r5, #12]
   394dc:	2600      	movs	r6, #0
   394de:	4630      	mov	r0, r6
   394e0:	b00d      	add	sp, #52	; 0x34
   394e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   394e6:	6927      	ldr	r7, [r4, #16]
   394e8:	2f00      	cmp	r7, #0
   394ea:	d064      	beq.n	395b6 <decode_field+0x102>
   394ec:	683b      	ldr	r3, [r7, #0]
   394ee:	2b00      	cmp	r3, #0
   394f0:	d061      	beq.n	395b6 <decode_field+0x102>
   394f2:	2902      	cmp	r1, #2
   394f4:	f107 0804 	add.w	r8, r7, #4
   394f8:	d062      	beq.n	395c0 <decode_field+0x10c>
   394fa:	2901      	cmp	r1, #1
   394fc:	f000 80f8 	beq.w	396f0 <decode_field+0x23c>
   39500:	2900      	cmp	r1, #0
   39502:	f000 80de 	beq.w	396c2 <decode_field+0x20e>
   39506:	2905      	cmp	r1, #5
   39508:	f000 8109 	beq.w	3971e <decode_field+0x26a>
   3950c:	68c3      	ldr	r3, [r0, #12]
   3950e:	4a96      	ldr	r2, [pc, #600]	; (39768 <decode_field+0x2b4>)
   39510:	2b00      	cmp	r3, #0
   39512:	bf08      	it	eq
   39514:	4613      	moveq	r3, r2
   39516:	60c3      	str	r3, [r0, #12]
   39518:	2600      	movs	r6, #0
   3951a:	e7e0      	b.n	394de <decode_field+0x2a>
   3951c:	f002 0c0f 	and.w	ip, r2, #15
   39520:	4f92      	ldr	r7, [pc, #584]	; (3976c <decode_field+0x2b8>)
   39522:	f002 0230 	and.w	r2, r2, #48	; 0x30
   39526:	2a10      	cmp	r2, #16
   39528:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
   3952c:	d03c      	beq.n	395a8 <decode_field+0xf4>
   3952e:	d911      	bls.n	39554 <decode_field+0xa0>
   39530:	2a20      	cmp	r2, #32
   39532:	d021      	beq.n	39578 <decode_field+0xc4>
   39534:	2a30      	cmp	r2, #48	; 0x30
   39536:	d1cb      	bne.n	394d0 <decode_field+0x1c>
   39538:	6962      	ldr	r2, [r4, #20]
   3953a:	8831      	ldrh	r1, [r6, #0]
   3953c:	8011      	strh	r1, [r2, #0]
   3953e:	f1bc 0f07 	cmp.w	ip, #7
   39542:	6920      	ldr	r0, [r4, #16]
   39544:	f000 80a3 	beq.w	3968e <decode_field+0x1da>
   39548:	4602      	mov	r2, r0
   3954a:	4631      	mov	r1, r6
   3954c:	4628      	mov	r0, r5
   3954e:	47b8      	blx	r7
   39550:	4606      	mov	r6, r0
   39552:	e7c4      	b.n	394de <decode_field+0x2a>
   39554:	2a00      	cmp	r2, #0
   39556:	d1bb      	bne.n	394d0 <decode_field+0x1c>
   39558:	4631      	mov	r1, r6
   3955a:	6922      	ldr	r2, [r4, #16]
   3955c:	47b8      	blx	r7
   3955e:	4606      	mov	r6, r0
   39560:	e7bd      	b.n	394de <decode_field+0x2a>
   39562:	68c3      	ldr	r3, [r0, #12]
   39564:	4a82      	ldr	r2, [pc, #520]	; (39770 <decode_field+0x2bc>)
   39566:	2600      	movs	r6, #0
   39568:	2b00      	cmp	r3, #0
   3956a:	bf08      	it	eq
   3956c:	4613      	moveq	r3, r2
   3956e:	60c3      	str	r3, [r0, #12]
   39570:	4630      	mov	r0, r6
   39572:	b00d      	add	sp, #52	; 0x34
   39574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39578:	2902      	cmp	r1, #2
   3957a:	f8d4 8014 	ldr.w	r8, [r4, #20]
   3957e:	d047      	beq.n	39610 <decode_field+0x15c>
   39580:	f8b8 3000 	ldrh.w	r3, [r8]
   39584:	6922      	ldr	r2, [r4, #16]
   39586:	f8b6 0007 	ldrh.w	r0, [r6, #7]
   3958a:	1c59      	adds	r1, r3, #1
   3958c:	f8a8 1000 	strh.w	r1, [r8]
   39590:	f8b6 1009 	ldrh.w	r1, [r6, #9]
   39594:	4299      	cmp	r1, r3
   39596:	f240 80cf 	bls.w	39738 <decode_field+0x284>
   3959a:	fb03 2200 	mla	r2, r3, r0, r2
   3959e:	4631      	mov	r1, r6
   395a0:	4628      	mov	r0, r5
   395a2:	47b8      	blx	r7
   395a4:	4606      	mov	r6, r0
   395a6:	e79a      	b.n	394de <decode_field+0x2a>
   395a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   395ac:	4293      	cmp	r3, r2
   395ae:	d0f6      	beq.n	3959e <decode_field+0xea>
   395b0:	2101      	movs	r1, #1
   395b2:	7019      	strb	r1, [r3, #0]
   395b4:	e7f3      	b.n	3959e <decode_field+0xea>
   395b6:	4628      	mov	r0, r5
   395b8:	f7ff ff2a 	bl	39410 <pb_skip_field>
   395bc:	4606      	mov	r6, r0
   395be:	e78e      	b.n	394de <decode_field+0x2a>
   395c0:	2200      	movs	r2, #0
   395c2:	a903      	add	r1, sp, #12
   395c4:	f7ff fb94 	bl	38cf0 <pb_decode_varint32_eof>
   395c8:	4606      	mov	r6, r0
   395ca:	2800      	cmp	r0, #0
   395cc:	d087      	beq.n	394de <decode_field+0x2a>
   395ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   395d2:	f10d 0918 	add.w	r9, sp, #24
   395d6:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   395da:	9903      	ldr	r1, [sp, #12]
   395dc:	9808      	ldr	r0, [sp, #32]
   395de:	4288      	cmp	r0, r1
   395e0:	f0c0 80b1 	bcc.w	39746 <decode_field+0x292>
   395e4:	1a52      	subs	r2, r2, r1
   395e6:	60aa      	str	r2, [r5, #8]
   395e8:	9108      	str	r1, [sp, #32]
   395ea:	e002      	b.n	395f2 <decode_field+0x13e>
   395ec:	9b08      	ldr	r3, [sp, #32]
   395ee:	2b00      	cmp	r3, #0
   395f0:	d048      	beq.n	39684 <decode_field+0x1d0>
   395f2:	683b      	ldr	r3, [r7, #0]
   395f4:	6861      	ldr	r1, [r4, #4]
   395f6:	4642      	mov	r2, r8
   395f8:	4648      	mov	r0, r9
   395fa:	4798      	blx	r3
   395fc:	4606      	mov	r6, r0
   395fe:	2800      	cmp	r0, #0
   39600:	d1f4      	bne.n	395ec <decode_field+0x138>
   39602:	68eb      	ldr	r3, [r5, #12]
   39604:	4a5b      	ldr	r2, [pc, #364]	; (39774 <decode_field+0x2c0>)
   39606:	2b00      	cmp	r3, #0
   39608:	bf08      	it	eq
   3960a:	4613      	moveq	r3, r2
   3960c:	60eb      	str	r3, [r5, #12]
   3960e:	e766      	b.n	394de <decode_field+0x2a>
   39610:	f1bc 0f04 	cmp.w	ip, #4
   39614:	d8b4      	bhi.n	39580 <decode_field+0xcc>
   39616:	461a      	mov	r2, r3
   39618:	a903      	add	r1, sp, #12
   3961a:	f7ff fb69 	bl	38cf0 <pb_decode_varint32_eof>
   3961e:	4606      	mov	r6, r0
   39620:	2800      	cmp	r0, #0
   39622:	f43f af5c 	beq.w	394de <decode_field+0x2a>
   39626:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   3962a:	f10d 0918 	add.w	r9, sp, #24
   3962e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   39632:	9b03      	ldr	r3, [sp, #12]
   39634:	9a08      	ldr	r2, [sp, #32]
   39636:	429a      	cmp	r2, r3
   39638:	f0c0 808c 	bcc.w	39754 <decode_field+0x2a0>
   3963c:	68aa      	ldr	r2, [r5, #8]
   3963e:	9308      	str	r3, [sp, #32]
   39640:	1ad2      	subs	r2, r2, r3
   39642:	60aa      	str	r2, [r5, #8]
   39644:	b1f3      	cbz	r3, 39684 <decode_field+0x1d0>
   39646:	6861      	ldr	r1, [r4, #4]
   39648:	f8b8 3000 	ldrh.w	r3, [r8]
   3964c:	f8b1 2009 	ldrh.w	r2, [r1, #9]
   39650:	429a      	cmp	r2, r3
   39652:	d805      	bhi.n	39660 <decode_field+0x1ac>
   39654:	e070      	b.n	39738 <decode_field+0x284>
   39656:	6861      	ldr	r1, [r4, #4]
   39658:	f8b1 2009 	ldrh.w	r2, [r1, #9]
   3965c:	429a      	cmp	r2, r3
   3965e:	d96b      	bls.n	39738 <decode_field+0x284>
   39660:	f8b1 0007 	ldrh.w	r0, [r1, #7]
   39664:	6922      	ldr	r2, [r4, #16]
   39666:	fb03 2200 	mla	r2, r3, r0, r2
   3966a:	4648      	mov	r0, r9
   3966c:	47b8      	blx	r7
   3966e:	2800      	cmp	r0, #0
   39670:	d05f      	beq.n	39732 <decode_field+0x27e>
   39672:	f8b8 3000 	ldrh.w	r3, [r8]
   39676:	9a08      	ldr	r2, [sp, #32]
   39678:	3301      	adds	r3, #1
   3967a:	b29b      	uxth	r3, r3
   3967c:	f8a8 3000 	strh.w	r3, [r8]
   39680:	2a00      	cmp	r2, #0
   39682:	d1e8      	bne.n	39656 <decode_field+0x1a2>
   39684:	9a07      	ldr	r2, [sp, #28]
   39686:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39688:	60eb      	str	r3, [r5, #12]
   3968a:	606a      	str	r2, [r5, #4]
   3968c:	e727      	b.n	394de <decode_field+0x2a>
   3968e:	4619      	mov	r1, r3
   39690:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   39694:	f7d2 fe62 	bl	c35c <memset>
   39698:	6863      	ldr	r3, [r4, #4]
   3969a:	6922      	ldr	r2, [r4, #16]
   3969c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   396a0:	f10d 0918 	add.w	r9, sp, #24
   396a4:	4648      	mov	r0, r9
   396a6:	f001 fb7b 	bl	3ada0 <pb_field_iter_begin>
   396aa:	b138      	cbz	r0, 396bc <decode_field+0x208>
   396ac:	4648      	mov	r0, r9
   396ae:	f7ff fba7 	bl	38e00 <pb_field_set_to_default>
   396b2:	4648      	mov	r0, r9
   396b4:	f001 fb8a 	bl	3adcc <pb_field_iter_next>
   396b8:	2800      	cmp	r0, #0
   396ba:	d1f7      	bne.n	396ac <decode_field+0x1f8>
   396bc:	6866      	ldr	r6, [r4, #4]
   396be:	6920      	ldr	r0, [r4, #16]
   396c0:	e742      	b.n	39548 <decode_field+0x94>
   396c2:	ab03      	add	r3, sp, #12
   396c4:	9301      	str	r3, [sp, #4]
   396c6:	469a      	mov	sl, r3
   396c8:	f1c3 0901 	rsb	r9, r3, #1
   396cc:	f10d 0b16 	add.w	fp, sp, #22
   396d0:	2201      	movs	r2, #1
   396d2:	4651      	mov	r1, sl
   396d4:	4628      	mov	r0, r5
   396d6:	eb0a 0609 	add.w	r6, sl, r9
   396da:	f7ff fbff 	bl	38edc <pb_read>
   396de:	b128      	cbz	r0, 396ec <decode_field+0x238>
   396e0:	f91a 2b01 	ldrsb.w	r2, [sl], #1
   396e4:	2a00      	cmp	r2, #0
   396e6:	da0c      	bge.n	39702 <decode_field+0x24e>
   396e8:	45da      	cmp	sl, fp
   396ea:	d1f1      	bne.n	396d0 <decode_field+0x21c>
   396ec:	2600      	movs	r6, #0
   396ee:	e6f6      	b.n	394de <decode_field+0x2a>
   396f0:	ab03      	add	r3, sp, #12
   396f2:	4619      	mov	r1, r3
   396f4:	2208      	movs	r2, #8
   396f6:	9301      	str	r3, [sp, #4]
   396f8:	f7ff fbf0 	bl	38edc <pb_read>
   396fc:	2608      	movs	r6, #8
   396fe:	2800      	cmp	r0, #0
   39700:	d0f4      	beq.n	396ec <decode_field+0x238>
   39702:	9b01      	ldr	r3, [sp, #4]
   39704:	4a1c      	ldr	r2, [pc, #112]	; (39778 <decode_field+0x2c4>)
   39706:	9307      	str	r3, [sp, #28]
   39708:	2000      	movs	r0, #0
   3970a:	683b      	ldr	r3, [r7, #0]
   3970c:	9608      	str	r6, [sp, #32]
   3970e:	9206      	str	r2, [sp, #24]
   39710:	9009      	str	r0, [sp, #36]	; 0x24
   39712:	6861      	ldr	r1, [r4, #4]
   39714:	4642      	mov	r2, r8
   39716:	a806      	add	r0, sp, #24
   39718:	4798      	blx	r3
   3971a:	4606      	mov	r6, r0
   3971c:	e6df      	b.n	394de <decode_field+0x2a>
   3971e:	ab03      	add	r3, sp, #12
   39720:	4619      	mov	r1, r3
   39722:	2204      	movs	r2, #4
   39724:	9301      	str	r3, [sp, #4]
   39726:	f7ff fbd9 	bl	38edc <pb_read>
   3972a:	2604      	movs	r6, #4
   3972c:	2800      	cmp	r0, #0
   3972e:	d1e8      	bne.n	39702 <decode_field+0x24e>
   39730:	e7dc      	b.n	396ec <decode_field+0x238>
   39732:	9e08      	ldr	r6, [sp, #32]
   39734:	2e00      	cmp	r6, #0
   39736:	d0a5      	beq.n	39684 <decode_field+0x1d0>
   39738:	68eb      	ldr	r3, [r5, #12]
   3973a:	4a10      	ldr	r2, [pc, #64]	; (3977c <decode_field+0x2c8>)
   3973c:	2b00      	cmp	r3, #0
   3973e:	bf08      	it	eq
   39740:	4613      	moveq	r3, r2
   39742:	60eb      	str	r3, [r5, #12]
   39744:	e7d2      	b.n	396ec <decode_field+0x238>
   39746:	4a0e      	ldr	r2, [pc, #56]	; (39780 <decode_field+0x2cc>)
   39748:	2b00      	cmp	r3, #0
   3974a:	bf08      	it	eq
   3974c:	4613      	moveq	r3, r2
   3974e:	60eb      	str	r3, [r5, #12]
   39750:	2600      	movs	r6, #0
   39752:	e6c4      	b.n	394de <decode_field+0x2a>
   39754:	68eb      	ldr	r3, [r5, #12]
   39756:	4a0a      	ldr	r2, [pc, #40]	; (39780 <decode_field+0x2cc>)
   39758:	2b00      	cmp	r3, #0
   3975a:	bf08      	it	eq
   3975c:	4613      	moveq	r3, r2
   3975e:	60eb      	str	r3, [r5, #12]
   39760:	2600      	movs	r6, #0
   39762:	e6bc      	b.n	394de <decode_field+0x2a>
   39764:	00044ab8 	.word	0x00044ab8
   39768:	00044bf0 	.word	0x00044bf0
   3976c:	00044a68 	.word	0x00044a68
   39770:	00044b20 	.word	0x00044b20
   39774:	00044acc 	.word	0x00044acc
   39778:	00038c7d 	.word	0x00038c7d
   3977c:	00044aa8 	.word	0x00044aa8
   39780:	00044a90 	.word	0x00044a90

00039784 <pb_decode_noinit>:
   39784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39788:	4605      	mov	r5, r0
   3978a:	b093      	sub	sp, #76	; 0x4c
   3978c:	a806      	add	r0, sp, #24
   3978e:	2600      	movs	r6, #0
   39790:	2700      	movs	r7, #0
   39792:	f04f 0b00 	mov.w	fp, #0
   39796:	e9cd 6704 	strd	r6, r7, [sp, #16]
   3979a:	f8ad b00e 	strh.w	fp, [sp, #14]
   3979e:	f001 faff 	bl	3ada0 <pb_field_iter_begin>
   397a2:	68ab      	ldr	r3, [r5, #8]
   397a4:	2b00      	cmp	r3, #0
   397a6:	d04e      	beq.n	39846 <pb_decode_noinit+0xc2>
   397a8:	46da      	mov	sl, fp
   397aa:	46d9      	mov	r9, fp
   397ac:	f10d 020d 	add.w	r2, sp, #13
   397b0:	a90c      	add	r1, sp, #48	; 0x30
   397b2:	4628      	mov	r0, r5
   397b4:	f88d 900d 	strb.w	r9, [sp, #13]
   397b8:	f7ff fa9a 	bl	38cf0 <pb_decode_varint32_eof>
   397bc:	2800      	cmp	r0, #0
   397be:	f000 809c 	beq.w	398fa <pb_decode_noinit+0x176>
   397c2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   397c4:	2c00      	cmp	r4, #0
   397c6:	d034      	beq.n	39832 <pb_decode_noinit+0xae>
   397c8:	08e6      	lsrs	r6, r4, #3
   397ca:	4631      	mov	r1, r6
   397cc:	a806      	add	r0, sp, #24
   397ce:	f004 0407 	and.w	r4, r4, #7
   397d2:	f001 fb4d 	bl	3ae70 <pb_field_iter_find>
   397d6:	2800      	cmp	r0, #0
   397d8:	d16e      	bne.n	398b8 <pb_decode_noinit+0x134>
   397da:	4556      	cmp	r6, sl
   397dc:	f080 8093 	bcs.w	39906 <pb_decode_noinit+0x182>
   397e0:	4621      	mov	r1, r4
   397e2:	4628      	mov	r0, r5
   397e4:	f7ff fe14 	bl	39410 <pb_skip_field>
   397e8:	bb00      	cbnz	r0, 3982c <pb_decode_noinit+0xa8>
   397ea:	2000      	movs	r0, #0
   397ec:	b013      	add	sp, #76	; 0x4c
   397ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   397f2:	e9dd 310a 	ldrd	r3, r1, [sp, #40]	; 0x28
   397f6:	4299      	cmp	r1, r3
   397f8:	d111      	bne.n	3981e <pb_decode_noinit+0x9a>
   397fa:	455a      	cmp	r2, fp
   397fc:	d00c      	beq.n	39818 <pb_decode_noinit+0x94>
   397fe:	f1bb 0f00 	cmp.w	fp, #0
   39802:	d006      	beq.n	39812 <pb_decode_noinit+0x8e>
   39804:	f8bb 1009 	ldrh.w	r1, [fp, #9]
   39808:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3980c:	4299      	cmp	r1, r3
   3980e:	f040 80df 	bne.w	399d0 <pb_decode_noinit+0x24c>
   39812:	f8ad 900e 	strh.w	r9, [sp, #14]
   39816:	4693      	mov	fp, r2
   39818:	f10d 030e 	add.w	r3, sp, #14
   3981c:	930b      	str	r3, [sp, #44]	; 0x2c
   3981e:	4621      	mov	r1, r4
   39820:	aa06      	add	r2, sp, #24
   39822:	4628      	mov	r0, r5
   39824:	f7ff fe46 	bl	394b4 <decode_field>
   39828:	2800      	cmp	r0, #0
   3982a:	d0de      	beq.n	397ea <pb_decode_noinit+0x66>
   3982c:	68ab      	ldr	r3, [r5, #8]
   3982e:	2b00      	cmp	r3, #0
   39830:	d1bc      	bne.n	397ac <pb_decode_noinit+0x28>
   39832:	f1bb 0f00 	cmp.w	fp, #0
   39836:	d006      	beq.n	39846 <pb_decode_noinit+0xc2>
   39838:	f8bb 2009 	ldrh.w	r2, [fp, #9]
   3983c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   39840:	429a      	cmp	r2, r3
   39842:	f040 80c5 	bne.w	399d0 <pb_decode_noinit+0x24c>
   39846:	e9dd 3407 	ldrd	r3, r4, [sp, #28]
   3984a:	a806      	add	r0, sp, #24
   3984c:	789e      	ldrb	r6, [r3, #2]
   3984e:	f001 fabd 	bl	3adcc <pb_field_iter_next>
   39852:	2800      	cmp	r0, #0
   39854:	d1f7      	bne.n	39846 <pb_decode_noinit+0xc2>
   39856:	f016 0f30 	tst.w	r6, #48	; 0x30
   3985a:	d103      	bne.n	39864 <pb_decode_noinit+0xe0>
   3985c:	9b07      	ldr	r3, [sp, #28]
   3985e:	881b      	ldrh	r3, [r3, #0]
   39860:	b103      	cbz	r3, 39864 <pb_decode_noinit+0xe0>
   39862:	3401      	adds	r4, #1
   39864:	2c40      	cmp	r4, #64	; 0x40
   39866:	f200 80ba 	bhi.w	399de <pb_decode_noinit+0x25a>
   3986a:	2c00      	cmp	r4, #0
   3986c:	f000 80bf 	beq.w	399ee <pb_decode_noinit+0x26a>
   39870:	0962      	lsrs	r2, r4, #5
   39872:	d008      	beq.n	39886 <pb_decode_noinit+0x102>
   39874:	9b04      	ldr	r3, [sp, #16]
   39876:	3301      	adds	r3, #1
   39878:	d117      	bne.n	398aa <pb_decode_noinit+0x126>
   3987a:	2a02      	cmp	r2, #2
   3987c:	f040 80b9 	bne.w	399f2 <pb_decode_noinit+0x26e>
   39880:	9b05      	ldr	r3, [sp, #20]
   39882:	3301      	adds	r3, #1
   39884:	d111      	bne.n	398aa <pb_decode_noinit+0x126>
   39886:	f014 031f 	ands.w	r3, r4, #31
   3988a:	f000 80b0 	beq.w	399ee <pb_decode_noinit+0x26a>
   3988e:	a912      	add	r1, sp, #72	; 0x48
   39890:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   39894:	f1c3 0320 	rsb	r3, r3, #32
   39898:	f852 1c38 	ldr.w	r1, [r2, #-56]
   3989c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   398a0:	fa22 f303 	lsr.w	r3, r2, r3
   398a4:	4299      	cmp	r1, r3
   398a6:	f000 80a2 	beq.w	399ee <pb_decode_noinit+0x26a>
   398aa:	68eb      	ldr	r3, [r5, #12]
   398ac:	4a52      	ldr	r2, [pc, #328]	; (399f8 <pb_decode_noinit+0x274>)
   398ae:	2b00      	cmp	r3, #0
   398b0:	bf08      	it	eq
   398b2:	4613      	moveq	r3, r2
   398b4:	60eb      	str	r3, [r5, #12]
   398b6:	e799      	b.n	397ec <pb_decode_noinit+0x68>
   398b8:	9a07      	ldr	r2, [sp, #28]
   398ba:	7893      	ldrb	r3, [r2, #2]
   398bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   398c0:	2b20      	cmp	r3, #32
   398c2:	d096      	beq.n	397f2 <pb_decode_noinit+0x6e>
   398c4:	2b00      	cmp	r3, #0
   398c6:	d1aa      	bne.n	3981e <pb_decode_noinit+0x9a>
   398c8:	9b08      	ldr	r3, [sp, #32]
   398ca:	2b3f      	cmp	r3, #63	; 0x3f
   398cc:	d8a7      	bhi.n	3981e <pb_decode_noinit+0x9a>
   398ce:	095a      	lsrs	r2, r3, #5
   398d0:	a912      	add	r1, sp, #72	; 0x48
   398d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   398d6:	2001      	movs	r0, #1
   398d8:	f852 1c38 	ldr.w	r1, [r2, #-56]
   398dc:	f003 031f 	and.w	r3, r3, #31
   398e0:	fa00 f303 	lsl.w	r3, r0, r3
   398e4:	430b      	orrs	r3, r1
   398e6:	f842 3c38 	str.w	r3, [r2, #-56]
   398ea:	4621      	mov	r1, r4
   398ec:	aa06      	add	r2, sp, #24
   398ee:	4628      	mov	r0, r5
   398f0:	f7ff fde0 	bl	394b4 <decode_field>
   398f4:	2800      	cmp	r0, #0
   398f6:	d199      	bne.n	3982c <pb_decode_noinit+0xa8>
   398f8:	e777      	b.n	397ea <pb_decode_noinit+0x66>
   398fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
   398fe:	2b00      	cmp	r3, #0
   39900:	f43f af73 	beq.w	397ea <pb_decode_noinit+0x66>
   39904:	e795      	b.n	39832 <pb_decode_noinit+0xae>
   39906:	9f07      	ldr	r7, [sp, #28]
   39908:	463a      	mov	r2, r7
   3990a:	e004      	b.n	39916 <pb_decode_noinit+0x192>
   3990c:	f001 fa5e 	bl	3adcc <pb_field_iter_next>
   39910:	9a07      	ldr	r2, [sp, #28]
   39912:	4297      	cmp	r7, r2
   39914:	d050      	beq.n	399b8 <pb_decode_noinit+0x234>
   39916:	7893      	ldrb	r3, [r2, #2]
   39918:	f003 030f 	and.w	r3, r3, #15
   3991c:	2b08      	cmp	r3, #8
   3991e:	a806      	add	r0, sp, #24
   39920:	d1f4      	bne.n	3990c <pb_decode_noinit+0x188>
   39922:	f8b2 a000 	ldrh.w	sl, [r2]
   39926:	45b2      	cmp	sl, r6
   39928:	f63f af5a 	bhi.w	397e0 <pb_decode_noinit+0x5c>
   3992c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3992e:	f8d5 c008 	ldr.w	ip, [r5, #8]
   39932:	681f      	ldr	r7, [r3, #0]
   39934:	f8cd c004 	str.w	ip, [sp, #4]
   39938:	2f00      	cmp	r7, #0
   3993a:	f43f af51 	beq.w	397e0 <pb_decode_noinit+0x5c>
   3993e:	f8cd b000 	str.w	fp, [sp]
   39942:	46b0      	mov	r8, r6
   39944:	46e3      	mov	fp, ip
   39946:	f8d7 e000 	ldr.w	lr, [r7]
   3994a:	f8de 6000 	ldr.w	r6, [lr]
   3994e:	4623      	mov	r3, r4
   39950:	4642      	mov	r2, r8
   39952:	4639      	mov	r1, r7
   39954:	4628      	mov	r0, r5
   39956:	b186      	cbz	r6, 3997a <pb_decode_noinit+0x1f6>
   39958:	47b0      	blx	r6
   3995a:	2800      	cmp	r0, #0
   3995c:	f43f af45 	beq.w	397ea <pb_decode_noinit+0x66>
   39960:	f8d5 c008 	ldr.w	ip, [r5, #8]
   39964:	68bf      	ldr	r7, [r7, #8]
   39966:	4663      	mov	r3, ip
   39968:	b34f      	cbz	r7, 399be <pb_decode_noinit+0x23a>
   3996a:	45e3      	cmp	fp, ip
   3996c:	d0eb      	beq.n	39946 <pb_decode_noinit+0x1c2>
   3996e:	f8dd b000 	ldr.w	fp, [sp]
   39972:	2b00      	cmp	r3, #0
   39974:	f47f af1a 	bne.w	397ac <pb_decode_noinit+0x28>
   39978:	e75b      	b.n	39832 <pb_decode_noinit+0xae>
   3997a:	f8de 6008 	ldr.w	r6, [lr, #8]
   3997e:	8833      	ldrh	r3, [r6, #0]
   39980:	4598      	cmp	r8, r3
   39982:	d1ef      	bne.n	39964 <pb_decode_noinit+0x1e0>
   39984:	687a      	ldr	r2, [r7, #4]
   39986:	4631      	mov	r1, r6
   39988:	a80c      	add	r0, sp, #48	; 0x30
   3998a:	f001 fa09 	bl	3ada0 <pb_field_iter_begin>
   3998e:	687b      	ldr	r3, [r7, #4]
   39990:	9310      	str	r3, [sp, #64]	; 0x40
   39992:	f107 030c 	add.w	r3, r7, #12
   39996:	9311      	str	r3, [sp, #68]	; 0x44
   39998:	78b3      	ldrb	r3, [r6, #2]
   3999a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3999e:	2b80      	cmp	r3, #128	; 0x80
   399a0:	bf04      	itt	eq
   399a2:	1d3b      	addeq	r3, r7, #4
   399a4:	9310      	streq	r3, [sp, #64]	; 0x40
   399a6:	f04f 0301 	mov.w	r3, #1
   399aa:	733b      	strb	r3, [r7, #12]
   399ac:	aa0c      	add	r2, sp, #48	; 0x30
   399ae:	4621      	mov	r1, r4
   399b0:	4628      	mov	r0, r5
   399b2:	f7ff fd7f 	bl	394b4 <decode_field>
   399b6:	e7d0      	b.n	3995a <pb_decode_noinit+0x1d6>
   399b8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   399bc:	e710      	b.n	397e0 <pb_decode_noinit+0x5c>
   399be:	e9dd b200 	ldrd	fp, r2, [sp]
   399c2:	4562      	cmp	r2, ip
   399c4:	f43f af0c 	beq.w	397e0 <pb_decode_noinit+0x5c>
   399c8:	2b00      	cmp	r3, #0
   399ca:	f47f aeef 	bne.w	397ac <pb_decode_noinit+0x28>
   399ce:	e730      	b.n	39832 <pb_decode_noinit+0xae>
   399d0:	68eb      	ldr	r3, [r5, #12]
   399d2:	4a0a      	ldr	r2, [pc, #40]	; (399fc <pb_decode_noinit+0x278>)
   399d4:	2b00      	cmp	r3, #0
   399d6:	bf08      	it	eq
   399d8:	4613      	moveq	r3, r2
   399da:	60eb      	str	r3, [r5, #12]
   399dc:	e705      	b.n	397ea <pb_decode_noinit+0x66>
   399de:	9b04      	ldr	r3, [sp, #16]
   399e0:	3301      	adds	r3, #1
   399e2:	f47f af62 	bne.w	398aa <pb_decode_noinit+0x126>
   399e6:	9b05      	ldr	r3, [sp, #20]
   399e8:	3301      	adds	r3, #1
   399ea:	f47f af5e 	bne.w	398aa <pb_decode_noinit+0x126>
   399ee:	2001      	movs	r0, #1
   399f0:	e6fc      	b.n	397ec <pb_decode_noinit+0x68>
   399f2:	2201      	movs	r2, #1
   399f4:	e747      	b.n	39886 <pb_decode_noinit+0x102>
   399f6:	bf00      	nop
   399f8:	00044bac 	.word	0x00044bac
   399fc:	00044b88 	.word	0x00044b88

00039a00 <pb_dec_submessage>:
   39a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39a04:	4689      	mov	r9, r1
   39a06:	b08b      	sub	sp, #44	; 0x2c
   39a08:	4690      	mov	r8, r2
   39a0a:	a904      	add	r1, sp, #16
   39a0c:	2200      	movs	r2, #0
   39a0e:	f8d9 700b 	ldr.w	r7, [r9, #11]
   39a12:	4604      	mov	r4, r0
   39a14:	f7ff f96c 	bl	38cf0 <pb_decode_varint32_eof>
   39a18:	4605      	mov	r5, r0
   39a1a:	b300      	cbz	r0, 39a5e <pb_dec_submessage+0x5e>
   39a1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   39a20:	466e      	mov	r6, sp
   39a22:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   39a26:	9904      	ldr	r1, [sp, #16]
   39a28:	428a      	cmp	r2, r1
   39a2a:	d31c      	bcc.n	39a66 <pb_dec_submessage+0x66>
   39a2c:	1a52      	subs	r2, r2, r1
   39a2e:	60a2      	str	r2, [r4, #8]
   39a30:	f8d9 500b 	ldr.w	r5, [r9, #11]
   39a34:	9102      	str	r1, [sp, #8]
   39a36:	2d00      	cmp	r5, #0
   39a38:	d03c      	beq.n	39ab4 <pb_dec_submessage+0xb4>
   39a3a:	f899 3002 	ldrb.w	r3, [r9, #2]
   39a3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   39a42:	2b20      	cmp	r3, #32
   39a44:	4642      	mov	r2, r8
   39a46:	4639      	mov	r1, r7
   39a48:	d017      	beq.n	39a7a <pb_dec_submessage+0x7a>
   39a4a:	4630      	mov	r0, r6
   39a4c:	f7ff fe9a 	bl	39784 <pb_decode_noinit>
   39a50:	9a02      	ldr	r2, [sp, #8]
   39a52:	4605      	mov	r5, r0
   39a54:	bb32      	cbnz	r2, 39aa4 <pb_dec_submessage+0xa4>
   39a56:	9a01      	ldr	r2, [sp, #4]
   39a58:	9b03      	ldr	r3, [sp, #12]
   39a5a:	6062      	str	r2, [r4, #4]
   39a5c:	60e3      	str	r3, [r4, #12]
   39a5e:	4628      	mov	r0, r5
   39a60:	b00b      	add	sp, #44	; 0x2c
   39a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39a66:	4a18      	ldr	r2, [pc, #96]	; (39ac8 <pb_dec_submessage+0xc8>)
   39a68:	2500      	movs	r5, #0
   39a6a:	2b00      	cmp	r3, #0
   39a6c:	bf08      	it	eq
   39a6e:	4613      	moveq	r3, r2
   39a70:	4628      	mov	r0, r5
   39a72:	60e3      	str	r3, [r4, #12]
   39a74:	b00b      	add	sp, #44	; 0x2c
   39a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39a7a:	a804      	add	r0, sp, #16
   39a7c:	f001 f990 	bl	3ada0 <pb_field_iter_begin>
   39a80:	b138      	cbz	r0, 39a92 <pb_dec_submessage+0x92>
   39a82:	a804      	add	r0, sp, #16
   39a84:	f7ff f9bc 	bl	38e00 <pb_field_set_to_default>
   39a88:	a804      	add	r0, sp, #16
   39a8a:	f001 f99f 	bl	3adcc <pb_field_iter_next>
   39a8e:	2800      	cmp	r0, #0
   39a90:	d1f7      	bne.n	39a82 <pb_dec_submessage+0x82>
   39a92:	4642      	mov	r2, r8
   39a94:	4639      	mov	r1, r7
   39a96:	4630      	mov	r0, r6
   39a98:	f7ff fe74 	bl	39784 <pb_decode_noinit>
   39a9c:	9a02      	ldr	r2, [sp, #8]
   39a9e:	4605      	mov	r5, r0
   39aa0:	2a00      	cmp	r2, #0
   39aa2:	d0d8      	beq.n	39a56 <pb_dec_submessage+0x56>
   39aa4:	4630      	mov	r0, r6
   39aa6:	2100      	movs	r1, #0
   39aa8:	f7ff fa18 	bl	38edc <pb_read>
   39aac:	2800      	cmp	r0, #0
   39aae:	d1d2      	bne.n	39a56 <pb_dec_submessage+0x56>
   39ab0:	4605      	mov	r5, r0
   39ab2:	e7d4      	b.n	39a5e <pb_dec_submessage+0x5e>
   39ab4:	4a05      	ldr	r2, [pc, #20]	; (39acc <pb_dec_submessage+0xcc>)
   39ab6:	4628      	mov	r0, r5
   39ab8:	2b00      	cmp	r3, #0
   39aba:	bf08      	it	eq
   39abc:	4613      	moveq	r3, r2
   39abe:	60e3      	str	r3, [r4, #12]
   39ac0:	b00b      	add	sp, #44	; 0x2c
   39ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39ac6:	bf00      	nop
   39ac8:	00044a90 	.word	0x00044a90
   39acc:	00044b44 	.word	0x00044b44

00039ad0 <pb_decode>:
   39ad0:	b570      	push	{r4, r5, r6, lr}
   39ad2:	b086      	sub	sp, #24
   39ad4:	4604      	mov	r4, r0
   39ad6:	4668      	mov	r0, sp
   39ad8:	460d      	mov	r5, r1
   39ada:	4616      	mov	r6, r2
   39adc:	f001 f960 	bl	3ada0 <pb_field_iter_begin>
   39ae0:	b138      	cbz	r0, 39af2 <pb_decode+0x22>
   39ae2:	4668      	mov	r0, sp
   39ae4:	f7ff f98c 	bl	38e00 <pb_field_set_to_default>
   39ae8:	4668      	mov	r0, sp
   39aea:	f001 f96f 	bl	3adcc <pb_field_iter_next>
   39aee:	2800      	cmp	r0, #0
   39af0:	d1f7      	bne.n	39ae2 <pb_decode+0x12>
   39af2:	4632      	mov	r2, r6
   39af4:	4629      	mov	r1, r5
   39af6:	4620      	mov	r0, r4
   39af8:	f7ff fe44 	bl	39784 <pb_decode_noinit>
   39afc:	b006      	add	sp, #24
   39afe:	bd70      	pop	{r4, r5, r6, pc}

00039b00 <buf_write>:
   39b00:	b470      	push	{r4, r5, r6}
   39b02:	6844      	ldr	r4, [r0, #4]
   39b04:	18a3      	adds	r3, r4, r2
   39b06:	6043      	str	r3, [r0, #4]
   39b08:	b31a      	cbz	r2, 39b52 <buf_write+0x52>
   39b0a:	1d23      	adds	r3, r4, #4
   39b0c:	1d08      	adds	r0, r1, #4
   39b0e:	4284      	cmp	r4, r0
   39b10:	bf38      	it	cc
   39b12:	4299      	cmpcc	r1, r3
   39b14:	d320      	bcc.n	39b58 <buf_write+0x58>
   39b16:	1e53      	subs	r3, r2, #1
   39b18:	2b07      	cmp	r3, #7
   39b1a:	d91d      	bls.n	39b58 <buf_write+0x58>
   39b1c:	f022 0603 	bic.w	r6, r2, #3
   39b20:	440e      	add	r6, r1
   39b22:	460b      	mov	r3, r1
   39b24:	4620      	mov	r0, r4
   39b26:	f853 5b04 	ldr.w	r5, [r3], #4
   39b2a:	f840 5b04 	str.w	r5, [r0], #4
   39b2e:	42b3      	cmp	r3, r6
   39b30:	d1f9      	bne.n	39b26 <buf_write+0x26>
   39b32:	f022 0303 	bic.w	r3, r2, #3
   39b36:	429a      	cmp	r2, r3
   39b38:	d00b      	beq.n	39b52 <buf_write+0x52>
   39b3a:	5cc8      	ldrb	r0, [r1, r3]
   39b3c:	54e0      	strb	r0, [r4, r3]
   39b3e:	1c58      	adds	r0, r3, #1
   39b40:	4282      	cmp	r2, r0
   39b42:	d906      	bls.n	39b52 <buf_write+0x52>
   39b44:	3302      	adds	r3, #2
   39b46:	5c0d      	ldrb	r5, [r1, r0]
   39b48:	5425      	strb	r5, [r4, r0]
   39b4a:	429a      	cmp	r2, r3
   39b4c:	d901      	bls.n	39b52 <buf_write+0x52>
   39b4e:	5cca      	ldrb	r2, [r1, r3]
   39b50:	54e2      	strb	r2, [r4, r3]
   39b52:	2001      	movs	r0, #1
   39b54:	bc70      	pop	{r4, r5, r6}
   39b56:	4770      	bx	lr
   39b58:	440a      	add	r2, r1
   39b5a:	3a01      	subs	r2, #1
   39b5c:	3901      	subs	r1, #1
   39b5e:	3c01      	subs	r4, #1
   39b60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   39b64:	f804 3f01 	strb.w	r3, [r4, #1]!
   39b68:	4291      	cmp	r1, r2
   39b6a:	d1f9      	bne.n	39b60 <buf_write+0x60>
   39b6c:	2001      	movs	r0, #1
   39b6e:	bc70      	pop	{r4, r5, r6}
   39b70:	4770      	bx	lr
   39b72:	bf00      	nop

00039b74 <pb_check_proto3_default_value>:
   39b74:	7882      	ldrb	r2, [r0, #2]
   39b76:	f012 0330 	ands.w	r3, r2, #48	; 0x30
   39b7a:	d024      	beq.n	39bc6 <pb_check_proto3_default_value+0x52>
   39b7c:	b510      	push	{r4, lr}
   39b7e:	2b20      	cmp	r3, #32
   39b80:	b086      	sub	sp, #24
   39b82:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
   39b86:	d018      	beq.n	39bba <pb_check_proto3_default_value+0x46>
   39b88:	2b30      	cmp	r3, #48	; 0x30
   39b8a:	d016      	beq.n	39bba <pb_check_proto3_default_value+0x46>
   39b8c:	2b10      	cmp	r3, #16
   39b8e:	d03a      	beq.n	39c06 <pb_check_proto3_default_value+0x92>
   39b90:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   39b94:	d019      	beq.n	39bca <pb_check_proto3_default_value+0x56>
   39b96:	f8b0 2007 	ldrh.w	r2, [r0, #7]
   39b9a:	b15a      	cbz	r2, 39bb4 <pb_check_proto3_default_value+0x40>
   39b9c:	780b      	ldrb	r3, [r1, #0]
   39b9e:	2b00      	cmp	r3, #0
   39ba0:	d137      	bne.n	39c12 <pb_check_proto3_default_value+0x9e>
   39ba2:	3a01      	subs	r2, #1
   39ba4:	fa11 f282 	uxtah	r2, r1, r2
   39ba8:	e002      	b.n	39bb0 <pb_check_proto3_default_value+0x3c>
   39baa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   39bae:	bb83      	cbnz	r3, 39c12 <pb_check_proto3_default_value+0x9e>
   39bb0:	428a      	cmp	r2, r1
   39bb2:	d1fa      	bne.n	39baa <pb_check_proto3_default_value+0x36>
   39bb4:	2001      	movs	r0, #1
   39bb6:	b006      	add	sp, #24
   39bb8:	bd10      	pop	{r4, pc}
   39bba:	5b0b      	ldrh	r3, [r1, r4]
   39bbc:	fab3 f083 	clz	r0, r3
   39bc0:	0940      	lsrs	r0, r0, #5
   39bc2:	b006      	add	sp, #24
   39bc4:	bd10      	pop	{r4, pc}
   39bc6:	4618      	mov	r0, r3
   39bc8:	4770      	bx	lr
   39bca:	f002 020f 	and.w	r2, r2, #15
   39bce:	2a05      	cmp	r2, #5
   39bd0:	d022      	beq.n	39c18 <pb_check_proto3_default_value+0xa4>
   39bd2:	2a06      	cmp	r2, #6
   39bd4:	d025      	beq.n	39c22 <pb_check_proto3_default_value+0xae>
   39bd6:	2a09      	cmp	r2, #9
   39bd8:	d028      	beq.n	39c2c <pb_check_proto3_default_value+0xb8>
   39bda:	2a07      	cmp	r2, #7
   39bdc:	d1db      	bne.n	39b96 <pb_check_proto3_default_value+0x22>
   39bde:	460a      	mov	r2, r1
   39be0:	f8d0 100b 	ldr.w	r1, [r0, #11]
   39be4:	4668      	mov	r0, sp
   39be6:	f001 f8db 	bl	3ada0 <pb_field_iter_begin>
   39bea:	2800      	cmp	r0, #0
   39bec:	d0e2      	beq.n	39bb4 <pb_check_proto3_default_value+0x40>
   39bee:	9904      	ldr	r1, [sp, #16]
   39bf0:	9801      	ldr	r0, [sp, #4]
   39bf2:	f7ff ffbf 	bl	39b74 <pb_check_proto3_default_value>
   39bf6:	2800      	cmp	r0, #0
   39bf8:	d0e3      	beq.n	39bc2 <pb_check_proto3_default_value+0x4e>
   39bfa:	4668      	mov	r0, sp
   39bfc:	f001 f8e6 	bl	3adcc <pb_field_iter_next>
   39c00:	2800      	cmp	r0, #0
   39c02:	d1f4      	bne.n	39bee <pb_check_proto3_default_value+0x7a>
   39c04:	e7d6      	b.n	39bb4 <pb_check_proto3_default_value+0x40>
   39c06:	2c00      	cmp	r4, #0
   39c08:	d0c2      	beq.n	39b90 <pb_check_proto3_default_value+0x1c>
   39c0a:	5d0b      	ldrb	r3, [r1, r4]
   39c0c:	f083 0001 	eor.w	r0, r3, #1
   39c10:	e7d7      	b.n	39bc2 <pb_check_proto3_default_value+0x4e>
   39c12:	2000      	movs	r0, #0
   39c14:	b006      	add	sp, #24
   39c16:	bd10      	pop	{r4, pc}
   39c18:	880b      	ldrh	r3, [r1, #0]
   39c1a:	fab3 f083 	clz	r0, r3
   39c1e:	0940      	lsrs	r0, r0, #5
   39c20:	e7cf      	b.n	39bc2 <pb_check_proto3_default_value+0x4e>
   39c22:	780b      	ldrb	r3, [r1, #0]
   39c24:	fab3 f083 	clz	r0, r3
   39c28:	0940      	lsrs	r0, r0, #5
   39c2a:	e7ca      	b.n	39bc2 <pb_check_proto3_default_value+0x4e>
   39c2c:	f8b0 3007 	ldrh.w	r3, [r0, #7]
   39c30:	fab3 f083 	clz	r0, r3
   39c34:	0940      	lsrs	r0, r0, #5
   39c36:	e7c4      	b.n	39bc2 <pb_check_proto3_default_value+0x4e>

00039c38 <pb_enc_fixed32>:
   39c38:	b530      	push	{r4, r5, lr}
   39c3a:	6813      	ldr	r3, [r2, #0]
   39c3c:	6805      	ldr	r5, [r0, #0]
   39c3e:	2200      	movs	r2, #0
   39c40:	0a19      	lsrs	r1, r3, #8
   39c42:	f363 0207 	bfi	r2, r3, #0, #8
   39c46:	f361 220f 	bfi	r2, r1, #8, #8
   39c4a:	0c19      	lsrs	r1, r3, #16
   39c4c:	f361 4217 	bfi	r2, r1, #16, #8
   39c50:	b083      	sub	sp, #12
   39c52:	0e1b      	lsrs	r3, r3, #24
   39c54:	68c1      	ldr	r1, [r0, #12]
   39c56:	f363 621f 	bfi	r2, r3, #24, #8
   39c5a:	4604      	mov	r4, r0
   39c5c:	9201      	str	r2, [sp, #4]
   39c5e:	3104      	adds	r1, #4
   39c60:	b14d      	cbz	r5, 39c76 <pb_enc_fixed32+0x3e>
   39c62:	6882      	ldr	r2, [r0, #8]
   39c64:	428a      	cmp	r2, r1
   39c66:	d30a      	bcc.n	39c7e <pb_enc_fixed32+0x46>
   39c68:	2204      	movs	r2, #4
   39c6a:	eb0d 0102 	add.w	r1, sp, r2
   39c6e:	47a8      	blx	r5
   39c70:	b170      	cbz	r0, 39c90 <pb_enc_fixed32+0x58>
   39c72:	68e3      	ldr	r3, [r4, #12]
   39c74:	1d19      	adds	r1, r3, #4
   39c76:	2001      	movs	r0, #1
   39c78:	60e1      	str	r1, [r4, #12]
   39c7a:	b003      	add	sp, #12
   39c7c:	bd30      	pop	{r4, r5, pc}
   39c7e:	6903      	ldr	r3, [r0, #16]
   39c80:	4a07      	ldr	r2, [pc, #28]	; (39ca0 <pb_enc_fixed32+0x68>)
   39c82:	2b00      	cmp	r3, #0
   39c84:	bf08      	it	eq
   39c86:	4613      	moveq	r3, r2
   39c88:	6103      	str	r3, [r0, #16]
   39c8a:	2000      	movs	r0, #0
   39c8c:	b003      	add	sp, #12
   39c8e:	bd30      	pop	{r4, r5, pc}
   39c90:	6923      	ldr	r3, [r4, #16]
   39c92:	4a04      	ldr	r2, [pc, #16]	; (39ca4 <pb_enc_fixed32+0x6c>)
   39c94:	2b00      	cmp	r3, #0
   39c96:	bf08      	it	eq
   39c98:	4613      	moveq	r3, r2
   39c9a:	6123      	str	r3, [r4, #16]
   39c9c:	b003      	add	sp, #12
   39c9e:	bd30      	pop	{r4, r5, pc}
   39ca0:	00044c68 	.word	0x00044c68
   39ca4:	00044bd4 	.word	0x00044bd4

00039ca8 <pb_enc_fixed64>:
   39ca8:	e9d2 1300 	ldrd	r1, r3, [r2]
   39cac:	b530      	push	{r4, r5, lr}
   39cae:	2400      	movs	r4, #0
   39cb0:	0a0d      	lsrs	r5, r1, #8
   39cb2:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
   39cb6:	4622      	mov	r2, r4
   39cb8:	f361 0407 	bfi	r4, r1, #0, #8
   39cbc:	f365 240f 	bfi	r4, r5, #8, #8
   39cc0:	0c0d      	lsrs	r5, r1, #16
   39cc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   39cc6:	0e09      	lsrs	r1, r1, #24
   39cc8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   39ccc:	b083      	sub	sp, #12
   39cce:	f363 0207 	bfi	r2, r3, #0, #8
   39cd2:	f365 4417 	bfi	r4, r5, #16, #8
   39cd6:	0a1d      	lsrs	r5, r3, #8
   39cd8:	f361 641f 	bfi	r4, r1, #24, #8
   39cdc:	f365 220f 	bfi	r2, r5, #8, #8
   39ce0:	0c19      	lsrs	r1, r3, #16
   39ce2:	f361 4217 	bfi	r2, r1, #16, #8
   39ce6:	0e1b      	lsrs	r3, r3, #24
   39ce8:	68c1      	ldr	r1, [r0, #12]
   39cea:	9400      	str	r4, [sp, #0]
   39cec:	6804      	ldr	r4, [r0, #0]
   39cee:	f363 621f 	bfi	r2, r3, #24, #8
   39cf2:	4605      	mov	r5, r0
   39cf4:	9201      	str	r2, [sp, #4]
   39cf6:	3108      	adds	r1, #8
   39cf8:	b14c      	cbz	r4, 39d0e <pb_enc_fixed64+0x66>
   39cfa:	6882      	ldr	r2, [r0, #8]
   39cfc:	428a      	cmp	r2, r1
   39cfe:	d30a      	bcc.n	39d16 <pb_enc_fixed64+0x6e>
   39d00:	2208      	movs	r2, #8
   39d02:	4669      	mov	r1, sp
   39d04:	47a0      	blx	r4
   39d06:	b178      	cbz	r0, 39d28 <pb_enc_fixed64+0x80>
   39d08:	68eb      	ldr	r3, [r5, #12]
   39d0a:	f103 0108 	add.w	r1, r3, #8
   39d0e:	2001      	movs	r0, #1
   39d10:	60e9      	str	r1, [r5, #12]
   39d12:	b003      	add	sp, #12
   39d14:	bd30      	pop	{r4, r5, pc}
   39d16:	6903      	ldr	r3, [r0, #16]
   39d18:	4a07      	ldr	r2, [pc, #28]	; (39d38 <pb_enc_fixed64+0x90>)
   39d1a:	2b00      	cmp	r3, #0
   39d1c:	bf08      	it	eq
   39d1e:	4613      	moveq	r3, r2
   39d20:	6103      	str	r3, [r0, #16]
   39d22:	2000      	movs	r0, #0
   39d24:	b003      	add	sp, #12
   39d26:	bd30      	pop	{r4, r5, pc}
   39d28:	692b      	ldr	r3, [r5, #16]
   39d2a:	4a04      	ldr	r2, [pc, #16]	; (39d3c <pb_enc_fixed64+0x94>)
   39d2c:	2b00      	cmp	r3, #0
   39d2e:	bf08      	it	eq
   39d30:	4613      	moveq	r3, r2
   39d32:	612b      	str	r3, [r5, #16]
   39d34:	b003      	add	sp, #12
   39d36:	bd30      	pop	{r4, r5, pc}
   39d38:	00044c68 	.word	0x00044c68
   39d3c:	00044bd4 	.word	0x00044bd4

00039d40 <pb_enc_fixed_length_bytes>:
   39d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39d44:	f8b1 7007 	ldrh.w	r7, [r1, #7]
   39d48:	f8d0 8000 	ldr.w	r8, [r0]
   39d4c:	68c1      	ldr	r1, [r0, #12]
   39d4e:	2500      	movs	r5, #0
   39d50:	b2bc      	uxth	r4, r7
   39d52:	2d00      	cmp	r5, #0
   39d54:	bf08      	it	eq
   39d56:	2c80      	cmpeq	r4, #128	; 0x80
   39d58:	b085      	sub	sp, #20
   39d5a:	4606      	mov	r6, r0
   39d5c:	4691      	mov	r9, r2
   39d5e:	b2bf      	uxth	r7, r7
   39d60:	d34f      	bcc.n	39e02 <pb_enc_fixed_length_bytes+0xc2>
   39d62:	0ba2      	lsrs	r2, r4, #14
   39d64:	f067 007f 	orn	r0, r7, #127	; 0x7f
   39d68:	f3c4 14c7 	ubfx	r4, r4, #7, #8
   39d6c:	2300      	movs	r3, #0
   39d6e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   39d72:	f88d 0004 	strb.w	r0, [sp, #4]
   39d76:	ea52 0003 	orrs.w	r0, r2, r3
   39d7a:	f88d 4005 	strb.w	r4, [sp, #5]
   39d7e:	d053      	beq.n	39e28 <pb_enc_fixed_length_bytes+0xe8>
   39d80:	f062 047f 	orn	r4, r2, #127	; 0x7f
   39d84:	b2e4      	uxtb	r4, r4
   39d86:	f88d 4006 	strb.w	r4, [sp, #6]
   39d8a:	2302      	movs	r3, #2
   39d8c:	2503      	movs	r5, #3
   39d8e:	aa04      	add	r2, sp, #16
   39d90:	4413      	add	r3, r2
   39d92:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   39d96:	f803 4c0c 	strb.w	r4, [r3, #-12]
   39d9a:	4429      	add	r1, r5
   39d9c:	f1b8 0f00 	cmp.w	r8, #0
   39da0:	d016      	beq.n	39dd0 <pb_enc_fixed_length_bytes+0x90>
   39da2:	68b3      	ldr	r3, [r6, #8]
   39da4:	428b      	cmp	r3, r1
   39da6:	d319      	bcc.n	39ddc <pb_enc_fixed_length_bytes+0x9c>
   39da8:	462a      	mov	r2, r5
   39daa:	a901      	add	r1, sp, #4
   39dac:	4630      	mov	r0, r6
   39dae:	47c0      	blx	r8
   39db0:	b1f0      	cbz	r0, 39df0 <pb_enc_fixed_length_bytes+0xb0>
   39db2:	68f1      	ldr	r1, [r6, #12]
   39db4:	6833      	ldr	r3, [r6, #0]
   39db6:	4429      	add	r1, r5
   39db8:	60f1      	str	r1, [r6, #12]
   39dba:	4439      	add	r1, r7
   39dbc:	b14b      	cbz	r3, 39dd2 <pb_enc_fixed_length_bytes+0x92>
   39dbe:	68b2      	ldr	r2, [r6, #8]
   39dc0:	428a      	cmp	r2, r1
   39dc2:	d30b      	bcc.n	39ddc <pb_enc_fixed_length_bytes+0x9c>
   39dc4:	4649      	mov	r1, r9
   39dc6:	463a      	mov	r2, r7
   39dc8:	4630      	mov	r0, r6
   39dca:	4798      	blx	r3
   39dcc:	b180      	cbz	r0, 39df0 <pb_enc_fixed_length_bytes+0xb0>
   39dce:	68f1      	ldr	r1, [r6, #12]
   39dd0:	4439      	add	r1, r7
   39dd2:	2001      	movs	r0, #1
   39dd4:	60f1      	str	r1, [r6, #12]
   39dd6:	b005      	add	sp, #20
   39dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39ddc:	6933      	ldr	r3, [r6, #16]
   39dde:	4a14      	ldr	r2, [pc, #80]	; (39e30 <pb_enc_fixed_length_bytes+0xf0>)
   39de0:	2000      	movs	r0, #0
   39de2:	2b00      	cmp	r3, #0
   39de4:	bf08      	it	eq
   39de6:	4613      	moveq	r3, r2
   39de8:	6133      	str	r3, [r6, #16]
   39dea:	b005      	add	sp, #20
   39dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39df0:	6933      	ldr	r3, [r6, #16]
   39df2:	4a10      	ldr	r2, [pc, #64]	; (39e34 <pb_enc_fixed_length_bytes+0xf4>)
   39df4:	2b00      	cmp	r3, #0
   39df6:	bf08      	it	eq
   39df8:	4613      	moveq	r3, r2
   39dfa:	6133      	str	r3, [r6, #16]
   39dfc:	b005      	add	sp, #20
   39dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39e02:	f88d 7004 	strb.w	r7, [sp, #4]
   39e06:	3101      	adds	r1, #1
   39e08:	f1b8 0f00 	cmp.w	r8, #0
   39e0c:	d0e0      	beq.n	39dd0 <pb_enc_fixed_length_bytes+0x90>
   39e0e:	6883      	ldr	r3, [r0, #8]
   39e10:	428b      	cmp	r3, r1
   39e12:	d3e3      	bcc.n	39ddc <pb_enc_fixed_length_bytes+0x9c>
   39e14:	2201      	movs	r2, #1
   39e16:	a901      	add	r1, sp, #4
   39e18:	47c0      	blx	r8
   39e1a:	2800      	cmp	r0, #0
   39e1c:	d0e8      	beq.n	39df0 <pb_enc_fixed_length_bytes+0xb0>
   39e1e:	68f1      	ldr	r1, [r6, #12]
   39e20:	6833      	ldr	r3, [r6, #0]
   39e22:	3101      	adds	r1, #1
   39e24:	60f1      	str	r1, [r6, #12]
   39e26:	e7c8      	b.n	39dba <pb_enc_fixed_length_bytes+0x7a>
   39e28:	2301      	movs	r3, #1
   39e2a:	2502      	movs	r5, #2
   39e2c:	e7af      	b.n	39d8e <pb_enc_fixed_length_bytes+0x4e>
   39e2e:	bf00      	nop
   39e30:	00044c68 	.word	0x00044c68
   39e34:	00044bd4 	.word	0x00044bd4

00039e38 <pb_enc_varint>:
   39e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e3c:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   39e40:	2b01      	cmp	r3, #1
   39e42:	b085      	sub	sp, #20
   39e44:	f000 8098 	beq.w	39f78 <pb_enc_varint+0x140>
   39e48:	2b02      	cmp	r3, #2
   39e4a:	d008      	beq.n	39e5e <pb_enc_varint+0x26>
   39e4c:	2b04      	cmp	r3, #4
   39e4e:	f000 80ba 	beq.w	39fc6 <pb_enc_varint+0x18e>
   39e52:	2b08      	cmp	r3, #8
   39e54:	f040 809e 	bne.w	39f94 <pb_enc_varint+0x15c>
   39e58:	e9d2 4500 	ldrd	r4, r5, [r2]
   39e5c:	e002      	b.n	39e64 <pb_enc_varint+0x2c>
   39e5e:	f9b2 4000 	ldrsh.w	r4, [r2]
   39e62:	17e5      	asrs	r5, r4, #31
   39e64:	2d00      	cmp	r5, #0
   39e66:	bf08      	it	eq
   39e68:	2c80      	cmpeq	r4, #128	; 0x80
   39e6a:	4606      	mov	r6, r0
   39e6c:	6807      	ldr	r7, [r0, #0]
   39e6e:	68c2      	ldr	r2, [r0, #12]
   39e70:	f0c0 809a 	bcc.w	39fa8 <pb_enc_varint+0x170>
   39e74:	ea4f 3894 	mov.w	r8, r4, lsr #14
   39e78:	f064 017f 	orn	r1, r4, #127	; 0x7f
   39e7c:	ea48 4885 	orr.w	r8, r8, r5, lsl #18
   39e80:	f3c4 13c7 	ubfx	r3, r4, #7, #8
   39e84:	ea4f 3995 	mov.w	r9, r5, lsr #14
   39e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   39e8c:	f88d 1004 	strb.w	r1, [sp, #4]
   39e90:	ea58 0109 	orrs.w	r1, r8, r9
   39e94:	f88d 3005 	strb.w	r3, [sp, #5]
   39e98:	f000 80a1 	beq.w	39fde <pb_enc_varint+0x1a6>
   39e9c:	0d60      	lsrs	r0, r4, #21
   39e9e:	f068 037f 	orn	r3, r8, #127	; 0x7f
   39ea2:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
   39ea6:	0d69      	lsrs	r1, r5, #21
   39ea8:	b2db      	uxtb	r3, r3
   39eaa:	ea50 0c01 	orrs.w	ip, r0, r1
   39eae:	f88d 3006 	strb.w	r3, [sp, #6]
   39eb2:	f000 8097 	beq.w	39fe4 <pb_enc_varint+0x1ac>
   39eb6:	ea4f 7814 	mov.w	r8, r4, lsr #28
   39eba:	f060 037f 	orn	r3, r0, #127	; 0x7f
   39ebe:	ea48 1805 	orr.w	r8, r8, r5, lsl #4
   39ec2:	ea4f 7915 	mov.w	r9, r5, lsr #28
   39ec6:	b2db      	uxtb	r3, r3
   39ec8:	ea58 0109 	orrs.w	r1, r8, r9
   39ecc:	f88d 3007 	strb.w	r3, [sp, #7]
   39ed0:	f000 808b 	beq.w	39fea <pb_enc_varint+0x1b2>
   39ed4:	f068 037f 	orn	r3, r8, #127	; 0x7f
   39ed8:	08e8      	lsrs	r0, r5, #3
   39eda:	2100      	movs	r1, #0
   39edc:	b2db      	uxtb	r3, r3
   39ede:	ea50 0c01 	orrs.w	ip, r0, r1
   39ee2:	f88d 3008 	strb.w	r3, [sp, #8]
   39ee6:	f000 8083 	beq.w	39ff0 <pb_enc_varint+0x1b8>
   39eea:	ea4f 2895 	mov.w	r8, r5, lsr #10
   39eee:	f060 037f 	orn	r3, r0, #127	; 0x7f
   39ef2:	4689      	mov	r9, r1
   39ef4:	b2db      	uxtb	r3, r3
   39ef6:	ea58 0c09 	orrs.w	ip, r8, r9
   39efa:	f88d 3009 	strb.w	r3, [sp, #9]
   39efe:	d07a      	beq.n	39ff6 <pb_enc_varint+0x1be>
   39f00:	f068 037f 	orn	r3, r8, #127	; 0x7f
   39f04:	ea4f 4a55 	mov.w	sl, r5, lsr #17
   39f08:	468b      	mov	fp, r1
   39f0a:	b2db      	uxtb	r3, r3
   39f0c:	ea5a 0c0b 	orrs.w	ip, sl, fp
   39f10:	f88d 300a 	strb.w	r3, [sp, #10]
   39f14:	d072      	beq.n	39ffc <pb_enc_varint+0x1c4>
   39f16:	f06a 037f 	orn	r3, sl, #127	; 0x7f
   39f1a:	ea4f 6815 	mov.w	r8, r5, lsr #24
   39f1e:	b2db      	uxtb	r3, r3
   39f20:	ea58 0c09 	orrs.w	ip, r8, r9
   39f24:	f88d 300b 	strb.w	r3, [sp, #11]
   39f28:	d06b      	beq.n	3a002 <pb_enc_varint+0x1ca>
   39f2a:	f068 037f 	orn	r3, r8, #127	; 0x7f
   39f2e:	ea4f 7ad5 	mov.w	sl, r5, lsr #31
   39f32:	b2db      	uxtb	r3, r3
   39f34:	ea5a 010b 	orrs.w	r1, sl, fp
   39f38:	f88d 300c 	strb.w	r3, [sp, #12]
   39f3c:	d064      	beq.n	3a008 <pb_enc_varint+0x1d0>
   39f3e:	2381      	movs	r3, #129	; 0x81
   39f40:	f88d 300d 	strb.w	r3, [sp, #13]
   39f44:	2109      	movs	r1, #9
   39f46:	240a      	movs	r4, #10
   39f48:	a804      	add	r0, sp, #16
   39f4a:	4401      	add	r1, r0
   39f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   39f50:	f801 3c0c 	strb.w	r3, [r1, #-12]
   39f54:	4422      	add	r2, r4
   39f56:	b157      	cbz	r7, 39f6e <pb_enc_varint+0x136>
   39f58:	68b3      	ldr	r3, [r6, #8]
   39f5a:	4293      	cmp	r3, r2
   39f5c:	d310      	bcc.n	39f80 <pb_enc_varint+0x148>
   39f5e:	4622      	mov	r2, r4
   39f60:	a901      	add	r1, sp, #4
   39f62:	4630      	mov	r0, r6
   39f64:	47b8      	blx	r7
   39f66:	2800      	cmp	r0, #0
   39f68:	d030      	beq.n	39fcc <pb_enc_varint+0x194>
   39f6a:	68f2      	ldr	r2, [r6, #12]
   39f6c:	4422      	add	r2, r4
   39f6e:	2001      	movs	r0, #1
   39f70:	60f2      	str	r2, [r6, #12]
   39f72:	b005      	add	sp, #20
   39f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f78:	f992 4000 	ldrsb.w	r4, [r2]
   39f7c:	17e5      	asrs	r5, r4, #31
   39f7e:	e771      	b.n	39e64 <pb_enc_varint+0x2c>
   39f80:	6933      	ldr	r3, [r6, #16]
   39f82:	4a23      	ldr	r2, [pc, #140]	; (3a010 <pb_enc_varint+0x1d8>)
   39f84:	2000      	movs	r0, #0
   39f86:	2b00      	cmp	r3, #0
   39f88:	bf08      	it	eq
   39f8a:	4613      	moveq	r3, r2
   39f8c:	6133      	str	r3, [r6, #16]
   39f8e:	b005      	add	sp, #20
   39f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f94:	6903      	ldr	r3, [r0, #16]
   39f96:	4a1f      	ldr	r2, [pc, #124]	; (3a014 <pb_enc_varint+0x1dc>)
   39f98:	2b00      	cmp	r3, #0
   39f9a:	bf08      	it	eq
   39f9c:	4613      	moveq	r3, r2
   39f9e:	6103      	str	r3, [r0, #16]
   39fa0:	2000      	movs	r0, #0
   39fa2:	b005      	add	sp, #20
   39fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fa8:	f88d 4004 	strb.w	r4, [sp, #4]
   39fac:	3201      	adds	r2, #1
   39fae:	2f00      	cmp	r7, #0
   39fb0:	d0dd      	beq.n	39f6e <pb_enc_varint+0x136>
   39fb2:	6883      	ldr	r3, [r0, #8]
   39fb4:	429a      	cmp	r2, r3
   39fb6:	d8e3      	bhi.n	39f80 <pb_enc_varint+0x148>
   39fb8:	2201      	movs	r2, #1
   39fba:	a901      	add	r1, sp, #4
   39fbc:	47b8      	blx	r7
   39fbe:	b128      	cbz	r0, 39fcc <pb_enc_varint+0x194>
   39fc0:	68f2      	ldr	r2, [r6, #12]
   39fc2:	3201      	adds	r2, #1
   39fc4:	e7d3      	b.n	39f6e <pb_enc_varint+0x136>
   39fc6:	6814      	ldr	r4, [r2, #0]
   39fc8:	17e5      	asrs	r5, r4, #31
   39fca:	e74b      	b.n	39e64 <pb_enc_varint+0x2c>
   39fcc:	6933      	ldr	r3, [r6, #16]
   39fce:	4a12      	ldr	r2, [pc, #72]	; (3a018 <pb_enc_varint+0x1e0>)
   39fd0:	2b00      	cmp	r3, #0
   39fd2:	bf08      	it	eq
   39fd4:	4613      	moveq	r3, r2
   39fd6:	6133      	str	r3, [r6, #16]
   39fd8:	b005      	add	sp, #20
   39fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fde:	2101      	movs	r1, #1
   39fe0:	2402      	movs	r4, #2
   39fe2:	e7b1      	b.n	39f48 <pb_enc_varint+0x110>
   39fe4:	2102      	movs	r1, #2
   39fe6:	2403      	movs	r4, #3
   39fe8:	e7ae      	b.n	39f48 <pb_enc_varint+0x110>
   39fea:	2103      	movs	r1, #3
   39fec:	2404      	movs	r4, #4
   39fee:	e7ab      	b.n	39f48 <pb_enc_varint+0x110>
   39ff0:	2104      	movs	r1, #4
   39ff2:	2405      	movs	r4, #5
   39ff4:	e7a8      	b.n	39f48 <pb_enc_varint+0x110>
   39ff6:	2105      	movs	r1, #5
   39ff8:	2406      	movs	r4, #6
   39ffa:	e7a5      	b.n	39f48 <pb_enc_varint+0x110>
   39ffc:	2106      	movs	r1, #6
   39ffe:	2407      	movs	r4, #7
   3a000:	e7a2      	b.n	39f48 <pb_enc_varint+0x110>
   3a002:	2107      	movs	r1, #7
   3a004:	2408      	movs	r4, #8
   3a006:	e79f      	b.n	39f48 <pb_enc_varint+0x110>
   3a008:	2108      	movs	r1, #8
   3a00a:	2409      	movs	r4, #9
   3a00c:	e79c      	b.n	39f48 <pb_enc_varint+0x110>
   3a00e:	bf00      	nop
   3a010:	00044c68 	.word	0x00044c68
   3a014:	00044b60 	.word	0x00044b60
   3a018:	00044bd4 	.word	0x00044bd4

0003a01c <pb_enc_uvarint>:
   3a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a020:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   3a024:	2b01      	cmp	r3, #1
   3a026:	b085      	sub	sp, #20
   3a028:	f000 809a 	beq.w	3a160 <pb_enc_uvarint+0x144>
   3a02c:	2b02      	cmp	r3, #2
   3a02e:	d009      	beq.n	3a044 <pb_enc_uvarint+0x28>
   3a030:	2b04      	cmp	r3, #4
   3a032:	f000 80bc 	beq.w	3a1ae <pb_enc_uvarint+0x192>
   3a036:	2b08      	cmp	r3, #8
   3a038:	f040 80a0 	bne.w	3a17c <pb_enc_uvarint+0x160>
   3a03c:	e9d2 4500 	ldrd	r4, r5, [r2]
   3a040:	b2e3      	uxtb	r3, r4
   3a042:	e003      	b.n	3a04c <pb_enc_uvarint+0x30>
   3a044:	8813      	ldrh	r3, [r2, #0]
   3a046:	2500      	movs	r5, #0
   3a048:	b29c      	uxth	r4, r3
   3a04a:	b2db      	uxtb	r3, r3
   3a04c:	2d00      	cmp	r5, #0
   3a04e:	bf08      	it	eq
   3a050:	2c80      	cmpeq	r4, #128	; 0x80
   3a052:	4606      	mov	r6, r0
   3a054:	6807      	ldr	r7, [r0, #0]
   3a056:	68c2      	ldr	r2, [r0, #12]
   3a058:	f0c0 809a 	bcc.w	3a190 <pb_enc_uvarint+0x174>
   3a05c:	ea4f 3894 	mov.w	r8, r4, lsr #14
   3a060:	f064 017f 	orn	r1, r4, #127	; 0x7f
   3a064:	ea48 4885 	orr.w	r8, r8, r5, lsl #18
   3a068:	f3c4 13c7 	ubfx	r3, r4, #7, #8
   3a06c:	ea4f 3995 	mov.w	r9, r5, lsr #14
   3a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3a074:	f88d 1004 	strb.w	r1, [sp, #4]
   3a078:	ea58 0109 	orrs.w	r1, r8, r9
   3a07c:	f88d 3005 	strb.w	r3, [sp, #5]
   3a080:	f000 80a3 	beq.w	3a1ca <pb_enc_uvarint+0x1ae>
   3a084:	0d60      	lsrs	r0, r4, #21
   3a086:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a08a:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
   3a08e:	0d69      	lsrs	r1, r5, #21
   3a090:	b2db      	uxtb	r3, r3
   3a092:	ea50 0c01 	orrs.w	ip, r0, r1
   3a096:	f88d 3006 	strb.w	r3, [sp, #6]
   3a09a:	f000 8099 	beq.w	3a1d0 <pb_enc_uvarint+0x1b4>
   3a09e:	ea4f 7814 	mov.w	r8, r4, lsr #28
   3a0a2:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a0a6:	ea48 1805 	orr.w	r8, r8, r5, lsl #4
   3a0aa:	ea4f 7915 	mov.w	r9, r5, lsr #28
   3a0ae:	b2db      	uxtb	r3, r3
   3a0b0:	ea58 0109 	orrs.w	r1, r8, r9
   3a0b4:	f88d 3007 	strb.w	r3, [sp, #7]
   3a0b8:	f000 808d 	beq.w	3a1d6 <pb_enc_uvarint+0x1ba>
   3a0bc:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a0c0:	08e8      	lsrs	r0, r5, #3
   3a0c2:	2100      	movs	r1, #0
   3a0c4:	b2db      	uxtb	r3, r3
   3a0c6:	ea50 0c01 	orrs.w	ip, r0, r1
   3a0ca:	f88d 3008 	strb.w	r3, [sp, #8]
   3a0ce:	f000 8085 	beq.w	3a1dc <pb_enc_uvarint+0x1c0>
   3a0d2:	ea4f 2895 	mov.w	r8, r5, lsr #10
   3a0d6:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a0da:	4689      	mov	r9, r1
   3a0dc:	b2db      	uxtb	r3, r3
   3a0de:	ea58 0c09 	orrs.w	ip, r8, r9
   3a0e2:	f88d 3009 	strb.w	r3, [sp, #9]
   3a0e6:	d07c      	beq.n	3a1e2 <pb_enc_uvarint+0x1c6>
   3a0e8:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a0ec:	ea4f 4a55 	mov.w	sl, r5, lsr #17
   3a0f0:	468b      	mov	fp, r1
   3a0f2:	b2db      	uxtb	r3, r3
   3a0f4:	ea5a 0c0b 	orrs.w	ip, sl, fp
   3a0f8:	f88d 300a 	strb.w	r3, [sp, #10]
   3a0fc:	d074      	beq.n	3a1e8 <pb_enc_uvarint+0x1cc>
   3a0fe:	f06a 037f 	orn	r3, sl, #127	; 0x7f
   3a102:	ea4f 6815 	mov.w	r8, r5, lsr #24
   3a106:	b2db      	uxtb	r3, r3
   3a108:	ea58 0c09 	orrs.w	ip, r8, r9
   3a10c:	f88d 300b 	strb.w	r3, [sp, #11]
   3a110:	d06d      	beq.n	3a1ee <pb_enc_uvarint+0x1d2>
   3a112:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a116:	ea4f 7ad5 	mov.w	sl, r5, lsr #31
   3a11a:	b2db      	uxtb	r3, r3
   3a11c:	ea5a 010b 	orrs.w	r1, sl, fp
   3a120:	f88d 300c 	strb.w	r3, [sp, #12]
   3a124:	d066      	beq.n	3a1f4 <pb_enc_uvarint+0x1d8>
   3a126:	2381      	movs	r3, #129	; 0x81
   3a128:	f88d 300d 	strb.w	r3, [sp, #13]
   3a12c:	2109      	movs	r1, #9
   3a12e:	240a      	movs	r4, #10
   3a130:	a804      	add	r0, sp, #16
   3a132:	4401      	add	r1, r0
   3a134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3a138:	f801 3c0c 	strb.w	r3, [r1, #-12]
   3a13c:	4422      	add	r2, r4
   3a13e:	b157      	cbz	r7, 3a156 <pb_enc_uvarint+0x13a>
   3a140:	68b3      	ldr	r3, [r6, #8]
   3a142:	429a      	cmp	r2, r3
   3a144:	d810      	bhi.n	3a168 <pb_enc_uvarint+0x14c>
   3a146:	4622      	mov	r2, r4
   3a148:	a901      	add	r1, sp, #4
   3a14a:	4630      	mov	r0, r6
   3a14c:	47b8      	blx	r7
   3a14e:	2800      	cmp	r0, #0
   3a150:	d032      	beq.n	3a1b8 <pb_enc_uvarint+0x19c>
   3a152:	68f2      	ldr	r2, [r6, #12]
   3a154:	4422      	add	r2, r4
   3a156:	2001      	movs	r0, #1
   3a158:	60f2      	str	r2, [r6, #12]
   3a15a:	b005      	add	sp, #20
   3a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a160:	7813      	ldrb	r3, [r2, #0]
   3a162:	2500      	movs	r5, #0
   3a164:	b2dc      	uxtb	r4, r3
   3a166:	e771      	b.n	3a04c <pb_enc_uvarint+0x30>
   3a168:	6933      	ldr	r3, [r6, #16]
   3a16a:	4a24      	ldr	r2, [pc, #144]	; (3a1fc <pb_enc_uvarint+0x1e0>)
   3a16c:	2000      	movs	r0, #0
   3a16e:	2b00      	cmp	r3, #0
   3a170:	bf08      	it	eq
   3a172:	4613      	moveq	r3, r2
   3a174:	6133      	str	r3, [r6, #16]
   3a176:	b005      	add	sp, #20
   3a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a17c:	6903      	ldr	r3, [r0, #16]
   3a17e:	4a20      	ldr	r2, [pc, #128]	; (3a200 <pb_enc_uvarint+0x1e4>)
   3a180:	2b00      	cmp	r3, #0
   3a182:	bf08      	it	eq
   3a184:	4613      	moveq	r3, r2
   3a186:	6103      	str	r3, [r0, #16]
   3a188:	2000      	movs	r0, #0
   3a18a:	b005      	add	sp, #20
   3a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a190:	f88d 3004 	strb.w	r3, [sp, #4]
   3a194:	3201      	adds	r2, #1
   3a196:	2f00      	cmp	r7, #0
   3a198:	d0dd      	beq.n	3a156 <pb_enc_uvarint+0x13a>
   3a19a:	6883      	ldr	r3, [r0, #8]
   3a19c:	4293      	cmp	r3, r2
   3a19e:	d3e3      	bcc.n	3a168 <pb_enc_uvarint+0x14c>
   3a1a0:	2201      	movs	r2, #1
   3a1a2:	a901      	add	r1, sp, #4
   3a1a4:	47b8      	blx	r7
   3a1a6:	b138      	cbz	r0, 3a1b8 <pb_enc_uvarint+0x19c>
   3a1a8:	68f2      	ldr	r2, [r6, #12]
   3a1aa:	3201      	adds	r2, #1
   3a1ac:	e7d3      	b.n	3a156 <pb_enc_uvarint+0x13a>
   3a1ae:	6813      	ldr	r3, [r2, #0]
   3a1b0:	2500      	movs	r5, #0
   3a1b2:	461c      	mov	r4, r3
   3a1b4:	b2db      	uxtb	r3, r3
   3a1b6:	e749      	b.n	3a04c <pb_enc_uvarint+0x30>
   3a1b8:	6933      	ldr	r3, [r6, #16]
   3a1ba:	4a12      	ldr	r2, [pc, #72]	; (3a204 <pb_enc_uvarint+0x1e8>)
   3a1bc:	2b00      	cmp	r3, #0
   3a1be:	bf08      	it	eq
   3a1c0:	4613      	moveq	r3, r2
   3a1c2:	6133      	str	r3, [r6, #16]
   3a1c4:	b005      	add	sp, #20
   3a1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a1ca:	2101      	movs	r1, #1
   3a1cc:	2402      	movs	r4, #2
   3a1ce:	e7af      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1d0:	2102      	movs	r1, #2
   3a1d2:	2403      	movs	r4, #3
   3a1d4:	e7ac      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1d6:	2103      	movs	r1, #3
   3a1d8:	2404      	movs	r4, #4
   3a1da:	e7a9      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1dc:	2104      	movs	r1, #4
   3a1de:	2405      	movs	r4, #5
   3a1e0:	e7a6      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1e2:	2105      	movs	r1, #5
   3a1e4:	2406      	movs	r4, #6
   3a1e6:	e7a3      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1e8:	2106      	movs	r1, #6
   3a1ea:	2407      	movs	r4, #7
   3a1ec:	e7a0      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1ee:	2107      	movs	r1, #7
   3a1f0:	2408      	movs	r4, #8
   3a1f2:	e79d      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1f4:	2108      	movs	r1, #8
   3a1f6:	2409      	movs	r4, #9
   3a1f8:	e79a      	b.n	3a130 <pb_enc_uvarint+0x114>
   3a1fa:	bf00      	nop
   3a1fc:	00044c68 	.word	0x00044c68
   3a200:	00044b60 	.word	0x00044b60
   3a204:	00044bd4 	.word	0x00044bd4

0003a208 <pb_enc_svarint>:
   3a208:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   3a20c:	2b01      	cmp	r3, #1
   3a20e:	f000 80a6 	beq.w	3a35e <pb_enc_svarint+0x156>
   3a212:	2b02      	cmp	r3, #2
   3a214:	d008      	beq.n	3a228 <pb_enc_svarint+0x20>
   3a216:	2b04      	cmp	r3, #4
   3a218:	f000 80c6 	beq.w	3a3a8 <pb_enc_svarint+0x1a0>
   3a21c:	2b08      	cmp	r3, #8
   3a21e:	f040 80ac 	bne.w	3a37a <pb_enc_svarint+0x172>
   3a222:	e9d2 2300 	ldrd	r2, r3, [r2]
   3a226:	e002      	b.n	3a22e <pb_enc_svarint+0x26>
   3a228:	f9b2 2000 	ldrsh.w	r2, [r2]
   3a22c:	17d3      	asrs	r3, r2, #31
   3a22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a232:	1894      	adds	r4, r2, r2
   3a234:	eb43 0503 	adc.w	r5, r3, r3
   3a238:	2a00      	cmp	r2, #0
   3a23a:	f173 0300 	sbcs.w	r3, r3, #0
   3a23e:	b085      	sub	sp, #20
   3a240:	da03      	bge.n	3a24a <pb_enc_svarint+0x42>
   3a242:	43e2      	mvns	r2, r4
   3a244:	43eb      	mvns	r3, r5
   3a246:	4614      	mov	r4, r2
   3a248:	461d      	mov	r5, r3
   3a24a:	2d00      	cmp	r5, #0
   3a24c:	bf08      	it	eq
   3a24e:	2c80      	cmpeq	r4, #128	; 0x80
   3a250:	4606      	mov	r6, r0
   3a252:	6807      	ldr	r7, [r0, #0]
   3a254:	68c2      	ldr	r2, [r0, #12]
   3a256:	f0c0 8098 	bcc.w	3a38a <pb_enc_svarint+0x182>
   3a25a:	ea4f 3894 	mov.w	r8, r4, lsr #14
   3a25e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   3a262:	ea48 4885 	orr.w	r8, r8, r5, lsl #18
   3a266:	f3c4 13c7 	ubfx	r3, r4, #7, #8
   3a26a:	ea4f 3995 	mov.w	r9, r5, lsr #14
   3a26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3a272:	f88d 1004 	strb.w	r1, [sp, #4]
   3a276:	ea58 0109 	orrs.w	r1, r8, r9
   3a27a:	f88d 3005 	strb.w	r3, [sp, #5]
   3a27e:	f000 809f 	beq.w	3a3c0 <pb_enc_svarint+0x1b8>
   3a282:	0d60      	lsrs	r0, r4, #21
   3a284:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a288:	ea40 20c5 	orr.w	r0, r0, r5, lsl #11
   3a28c:	0d69      	lsrs	r1, r5, #21
   3a28e:	b2db      	uxtb	r3, r3
   3a290:	ea50 0c01 	orrs.w	ip, r0, r1
   3a294:	f88d 3006 	strb.w	r3, [sp, #6]
   3a298:	f000 8095 	beq.w	3a3c6 <pb_enc_svarint+0x1be>
   3a29c:	ea4f 7814 	mov.w	r8, r4, lsr #28
   3a2a0:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a2a4:	ea48 1805 	orr.w	r8, r8, r5, lsl #4
   3a2a8:	ea4f 7915 	mov.w	r9, r5, lsr #28
   3a2ac:	b2db      	uxtb	r3, r3
   3a2ae:	ea58 0109 	orrs.w	r1, r8, r9
   3a2b2:	f88d 3007 	strb.w	r3, [sp, #7]
   3a2b6:	f000 8089 	beq.w	3a3cc <pb_enc_svarint+0x1c4>
   3a2ba:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a2be:	08e8      	lsrs	r0, r5, #3
   3a2c0:	2100      	movs	r1, #0
   3a2c2:	b2db      	uxtb	r3, r3
   3a2c4:	ea50 0c01 	orrs.w	ip, r0, r1
   3a2c8:	f88d 3008 	strb.w	r3, [sp, #8]
   3a2cc:	f000 8081 	beq.w	3a3d2 <pb_enc_svarint+0x1ca>
   3a2d0:	ea4f 2895 	mov.w	r8, r5, lsr #10
   3a2d4:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a2d8:	4689      	mov	r9, r1
   3a2da:	b2db      	uxtb	r3, r3
   3a2dc:	ea58 0c09 	orrs.w	ip, r8, r9
   3a2e0:	f88d 3009 	strb.w	r3, [sp, #9]
   3a2e4:	d078      	beq.n	3a3d8 <pb_enc_svarint+0x1d0>
   3a2e6:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a2ea:	ea4f 4a55 	mov.w	sl, r5, lsr #17
   3a2ee:	468b      	mov	fp, r1
   3a2f0:	b2db      	uxtb	r3, r3
   3a2f2:	ea5a 0c0b 	orrs.w	ip, sl, fp
   3a2f6:	f88d 300a 	strb.w	r3, [sp, #10]
   3a2fa:	d070      	beq.n	3a3de <pb_enc_svarint+0x1d6>
   3a2fc:	f06a 037f 	orn	r3, sl, #127	; 0x7f
   3a300:	ea4f 6815 	mov.w	r8, r5, lsr #24
   3a304:	b2db      	uxtb	r3, r3
   3a306:	ea58 0c09 	orrs.w	ip, r8, r9
   3a30a:	f88d 300b 	strb.w	r3, [sp, #11]
   3a30e:	d069      	beq.n	3a3e4 <pb_enc_svarint+0x1dc>
   3a310:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a314:	ea4f 7ad5 	mov.w	sl, r5, lsr #31
   3a318:	b2db      	uxtb	r3, r3
   3a31a:	ea5a 010b 	orrs.w	r1, sl, fp
   3a31e:	f88d 300c 	strb.w	r3, [sp, #12]
   3a322:	d062      	beq.n	3a3ea <pb_enc_svarint+0x1e2>
   3a324:	2381      	movs	r3, #129	; 0x81
   3a326:	f88d 300d 	strb.w	r3, [sp, #13]
   3a32a:	2109      	movs	r1, #9
   3a32c:	240a      	movs	r4, #10
   3a32e:	a804      	add	r0, sp, #16
   3a330:	4401      	add	r1, r0
   3a332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3a336:	f801 3c0c 	strb.w	r3, [r1, #-12]
   3a33a:	4422      	add	r2, r4
   3a33c:	b157      	cbz	r7, 3a354 <pb_enc_svarint+0x14c>
   3a33e:	68b3      	ldr	r3, [r6, #8]
   3a340:	429a      	cmp	r2, r3
   3a342:	d810      	bhi.n	3a366 <pb_enc_svarint+0x15e>
   3a344:	4622      	mov	r2, r4
   3a346:	a901      	add	r1, sp, #4
   3a348:	4630      	mov	r0, r6
   3a34a:	47b8      	blx	r7
   3a34c:	2800      	cmp	r0, #0
   3a34e:	d02e      	beq.n	3a3ae <pb_enc_svarint+0x1a6>
   3a350:	68f2      	ldr	r2, [r6, #12]
   3a352:	4422      	add	r2, r4
   3a354:	2001      	movs	r0, #1
   3a356:	60f2      	str	r2, [r6, #12]
   3a358:	b005      	add	sp, #20
   3a35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a35e:	f992 2000 	ldrsb.w	r2, [r2]
   3a362:	17d3      	asrs	r3, r2, #31
   3a364:	e763      	b.n	3a22e <pb_enc_svarint+0x26>
   3a366:	6933      	ldr	r3, [r6, #16]
   3a368:	4a21      	ldr	r2, [pc, #132]	; (3a3f0 <pb_enc_svarint+0x1e8>)
   3a36a:	2000      	movs	r0, #0
   3a36c:	2b00      	cmp	r3, #0
   3a36e:	bf08      	it	eq
   3a370:	4613      	moveq	r3, r2
   3a372:	6133      	str	r3, [r6, #16]
   3a374:	b005      	add	sp, #20
   3a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a37a:	6903      	ldr	r3, [r0, #16]
   3a37c:	4a1d      	ldr	r2, [pc, #116]	; (3a3f4 <pb_enc_svarint+0x1ec>)
   3a37e:	2b00      	cmp	r3, #0
   3a380:	bf08      	it	eq
   3a382:	4613      	moveq	r3, r2
   3a384:	6103      	str	r3, [r0, #16]
   3a386:	2000      	movs	r0, #0
   3a388:	4770      	bx	lr
   3a38a:	f88d 4004 	strb.w	r4, [sp, #4]
   3a38e:	3201      	adds	r2, #1
   3a390:	2f00      	cmp	r7, #0
   3a392:	d0df      	beq.n	3a354 <pb_enc_svarint+0x14c>
   3a394:	6883      	ldr	r3, [r0, #8]
   3a396:	4293      	cmp	r3, r2
   3a398:	d3e5      	bcc.n	3a366 <pb_enc_svarint+0x15e>
   3a39a:	2201      	movs	r2, #1
   3a39c:	a901      	add	r1, sp, #4
   3a39e:	47b8      	blx	r7
   3a3a0:	b128      	cbz	r0, 3a3ae <pb_enc_svarint+0x1a6>
   3a3a2:	68f2      	ldr	r2, [r6, #12]
   3a3a4:	3201      	adds	r2, #1
   3a3a6:	e7d5      	b.n	3a354 <pb_enc_svarint+0x14c>
   3a3a8:	6812      	ldr	r2, [r2, #0]
   3a3aa:	17d3      	asrs	r3, r2, #31
   3a3ac:	e73f      	b.n	3a22e <pb_enc_svarint+0x26>
   3a3ae:	6933      	ldr	r3, [r6, #16]
   3a3b0:	4a11      	ldr	r2, [pc, #68]	; (3a3f8 <pb_enc_svarint+0x1f0>)
   3a3b2:	2b00      	cmp	r3, #0
   3a3b4:	bf08      	it	eq
   3a3b6:	4613      	moveq	r3, r2
   3a3b8:	6133      	str	r3, [r6, #16]
   3a3ba:	b005      	add	sp, #20
   3a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a3c0:	2101      	movs	r1, #1
   3a3c2:	2402      	movs	r4, #2
   3a3c4:	e7b3      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3c6:	2102      	movs	r1, #2
   3a3c8:	2403      	movs	r4, #3
   3a3ca:	e7b0      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3cc:	2103      	movs	r1, #3
   3a3ce:	2404      	movs	r4, #4
   3a3d0:	e7ad      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3d2:	2104      	movs	r1, #4
   3a3d4:	2405      	movs	r4, #5
   3a3d6:	e7aa      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3d8:	2105      	movs	r1, #5
   3a3da:	2406      	movs	r4, #6
   3a3dc:	e7a7      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3de:	2106      	movs	r1, #6
   3a3e0:	2407      	movs	r4, #7
   3a3e2:	e7a4      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3e4:	2107      	movs	r1, #7
   3a3e6:	2408      	movs	r4, #8
   3a3e8:	e7a1      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3ea:	2108      	movs	r1, #8
   3a3ec:	2409      	movs	r4, #9
   3a3ee:	e79e      	b.n	3a32e <pb_enc_svarint+0x126>
   3a3f0:	00044c68 	.word	0x00044c68
   3a3f4:	00044b60 	.word	0x00044b60
   3a3f8:	00044bd4 	.word	0x00044bd4

0003a3fc <pb_enc_string>:
   3a3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a400:	788b      	ldrb	r3, [r1, #2]
   3a402:	f8b1 5007 	ldrh.w	r5, [r1, #7]
   3a406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3a40a:	2b80      	cmp	r3, #128	; 0x80
   3a40c:	b085      	sub	sp, #20
   3a40e:	4606      	mov	r6, r0
   3a410:	4617      	mov	r7, r2
   3a412:	f000 809a 	beq.w	3a54a <pb_enc_string+0x14e>
   3a416:	2a00      	cmp	r2, #0
   3a418:	d06d      	beq.n	3a4f6 <pb_enc_string+0xfa>
   3a41a:	2d00      	cmp	r5, #0
   3a41c:	f000 80a5 	beq.w	3a56a <pb_enc_string+0x16e>
   3a420:	783b      	ldrb	r3, [r7, #0]
   3a422:	2b00      	cmp	r3, #0
   3a424:	f000 80a0 	beq.w	3a568 <pb_enc_string+0x16c>
   3a428:	463b      	mov	r3, r7
   3a42a:	2400      	movs	r4, #0
   3a42c:	e002      	b.n	3a434 <pb_enc_string+0x38>
   3a42e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   3a432:	b112      	cbz	r2, 3a43a <pb_enc_string+0x3e>
   3a434:	3401      	adds	r4, #1
   3a436:	42ac      	cmp	r4, r5
   3a438:	d3f9      	bcc.n	3a42e <pb_enc_string+0x32>
   3a43a:	2c7f      	cmp	r4, #127	; 0x7f
   3a43c:	f04f 0500 	mov.w	r5, #0
   3a440:	f240 8099 	bls.w	3a576 <pb_enc_string+0x17a>
   3a444:	f064 027f 	orn	r2, r4, #127	; 0x7f
   3a448:	0ba0      	lsrs	r0, r4, #14
   3a44a:	f3c4 13c7 	ubfx	r3, r4, #7, #8
   3a44e:	4629      	mov	r1, r5
   3a450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3a454:	f88d 2004 	strb.w	r2, [sp, #4]
   3a458:	ea50 0201 	orrs.w	r2, r0, r1
   3a45c:	f88d 3005 	strb.w	r3, [sp, #5]
   3a460:	d07a      	beq.n	3a558 <pb_enc_string+0x15c>
   3a462:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a466:	ea4f 5854 	mov.w	r8, r4, lsr #21
   3a46a:	46a9      	mov	r9, r5
   3a46c:	b2db      	uxtb	r3, r3
   3a46e:	ea58 0209 	orrs.w	r2, r8, r9
   3a472:	f88d 3006 	strb.w	r3, [sp, #6]
   3a476:	d073      	beq.n	3a560 <pb_enc_string+0x164>
   3a478:	f068 037f 	orn	r3, r8, #127	; 0x7f
   3a47c:	0f20      	lsrs	r0, r4, #28
   3a47e:	b2db      	uxtb	r3, r3
   3a480:	ea50 0201 	orrs.w	r2, r0, r1
   3a484:	f88d 3007 	strb.w	r3, [sp, #7]
   3a488:	d071      	beq.n	3a56e <pb_enc_string+0x172>
   3a48a:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a48e:	b2db      	uxtb	r3, r3
   3a490:	f88d 3008 	strb.w	r3, [sp, #8]
   3a494:	2204      	movs	r2, #4
   3a496:	f04f 0805 	mov.w	r8, #5
   3a49a:	a904      	add	r1, sp, #16
   3a49c:	440a      	add	r2, r1
   3a49e:	68f5      	ldr	r5, [r6, #12]
   3a4a0:	f8d6 9000 	ldr.w	r9, [r6]
   3a4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3a4a8:	f802 3c0c 	strb.w	r3, [r2, #-12]
   3a4ac:	4445      	add	r5, r8
   3a4ae:	f1b9 0f00 	cmp.w	r9, #0
   3a4b2:	d01a      	beq.n	3a4ea <pb_enc_string+0xee>
   3a4b4:	68b3      	ldr	r3, [r6, #8]
   3a4b6:	42ab      	cmp	r3, r5
   3a4b8:	d33d      	bcc.n	3a536 <pb_enc_string+0x13a>
   3a4ba:	4642      	mov	r2, r8
   3a4bc:	a901      	add	r1, sp, #4
   3a4be:	4630      	mov	r0, r6
   3a4c0:	47c8      	blx	r9
   3a4c2:	b378      	cbz	r0, 3a524 <pb_enc_string+0x128>
   3a4c4:	68f5      	ldr	r5, [r6, #12]
   3a4c6:	f8d6 9000 	ldr.w	r9, [r6]
   3a4ca:	eb08 0305 	add.w	r3, r8, r5
   3a4ce:	60f3      	str	r3, [r6, #12]
   3a4d0:	191d      	adds	r5, r3, r4
   3a4d2:	f1b9 0f00 	cmp.w	r9, #0
   3a4d6:	d009      	beq.n	3a4ec <pb_enc_string+0xf0>
   3a4d8:	68b3      	ldr	r3, [r6, #8]
   3a4da:	429d      	cmp	r5, r3
   3a4dc:	d82b      	bhi.n	3a536 <pb_enc_string+0x13a>
   3a4de:	4639      	mov	r1, r7
   3a4e0:	4622      	mov	r2, r4
   3a4e2:	4630      	mov	r0, r6
   3a4e4:	47c8      	blx	r9
   3a4e6:	b1e8      	cbz	r0, 3a524 <pb_enc_string+0x128>
   3a4e8:	68f5      	ldr	r5, [r6, #12]
   3a4ea:	4425      	add	r5, r4
   3a4ec:	2001      	movs	r0, #1
   3a4ee:	60f5      	str	r5, [r6, #12]
   3a4f0:	b005      	add	sp, #20
   3a4f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a4f6:	463a      	mov	r2, r7
   3a4f8:	463d      	mov	r5, r7
   3a4fa:	68f3      	ldr	r3, [r6, #12]
   3a4fc:	6834      	ldr	r4, [r6, #0]
   3a4fe:	f88d 2004 	strb.w	r2, [sp, #4]
   3a502:	3301      	adds	r3, #1
   3a504:	b334      	cbz	r4, 3a554 <pb_enc_string+0x158>
   3a506:	68b2      	ldr	r2, [r6, #8]
   3a508:	429a      	cmp	r2, r3
   3a50a:	d314      	bcc.n	3a536 <pb_enc_string+0x13a>
   3a50c:	2201      	movs	r2, #1
   3a50e:	a901      	add	r1, sp, #4
   3a510:	4630      	mov	r0, r6
   3a512:	47a0      	blx	r4
   3a514:	b130      	cbz	r0, 3a524 <pb_enc_string+0x128>
   3a516:	68f3      	ldr	r3, [r6, #12]
   3a518:	f8d6 9000 	ldr.w	r9, [r6]
   3a51c:	3301      	adds	r3, #1
   3a51e:	462c      	mov	r4, r5
   3a520:	60f3      	str	r3, [r6, #12]
   3a522:	e7d5      	b.n	3a4d0 <pb_enc_string+0xd4>
   3a524:	6933      	ldr	r3, [r6, #16]
   3a526:	4a15      	ldr	r2, [pc, #84]	; (3a57c <pb_enc_string+0x180>)
   3a528:	2b00      	cmp	r3, #0
   3a52a:	bf08      	it	eq
   3a52c:	4613      	moveq	r3, r2
   3a52e:	6133      	str	r3, [r6, #16]
   3a530:	b005      	add	sp, #20
   3a532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a536:	6933      	ldr	r3, [r6, #16]
   3a538:	4a11      	ldr	r2, [pc, #68]	; (3a580 <pb_enc_string+0x184>)
   3a53a:	2000      	movs	r0, #0
   3a53c:	2b00      	cmp	r3, #0
   3a53e:	bf08      	it	eq
   3a540:	4613      	moveq	r3, r2
   3a542:	6133      	str	r3, [r6, #16]
   3a544:	b005      	add	sp, #20
   3a546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a54a:	2a00      	cmp	r2, #0
   3a54c:	d0d3      	beq.n	3a4f6 <pb_enc_string+0xfa>
   3a54e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a552:	e765      	b.n	3a420 <pb_enc_string+0x24>
   3a554:	441d      	add	r5, r3
   3a556:	e7c9      	b.n	3a4ec <pb_enc_string+0xf0>
   3a558:	2201      	movs	r2, #1
   3a55a:	f04f 0802 	mov.w	r8, #2
   3a55e:	e79c      	b.n	3a49a <pb_enc_string+0x9e>
   3a560:	2202      	movs	r2, #2
   3a562:	f04f 0803 	mov.w	r8, #3
   3a566:	e798      	b.n	3a49a <pb_enc_string+0x9e>
   3a568:	461d      	mov	r5, r3
   3a56a:	462a      	mov	r2, r5
   3a56c:	e7c5      	b.n	3a4fa <pb_enc_string+0xfe>
   3a56e:	2203      	movs	r2, #3
   3a570:	f04f 0804 	mov.w	r8, #4
   3a574:	e791      	b.n	3a49a <pb_enc_string+0x9e>
   3a576:	b2e2      	uxtb	r2, r4
   3a578:	4625      	mov	r5, r4
   3a57a:	e7be      	b.n	3a4fa <pb_enc_string+0xfe>
   3a57c:	00044bd4 	.word	0x00044bd4
   3a580:	00044c68 	.word	0x00044c68

0003a584 <pb_ostream_from_buffer>:
   3a584:	b410      	push	{r4}
   3a586:	4c05      	ldr	r4, [pc, #20]	; (3a59c <pb_ostream_from_buffer+0x18>)
   3a588:	6041      	str	r1, [r0, #4]
   3a58a:	2100      	movs	r1, #0
   3a58c:	6004      	str	r4, [r0, #0]
   3a58e:	6082      	str	r2, [r0, #8]
   3a590:	e9c0 1103 	strd	r1, r1, [r0, #12]
   3a594:	f85d 4b04 	ldr.w	r4, [sp], #4
   3a598:	4770      	bx	lr
   3a59a:	bf00      	nop
   3a59c:	00039b01 	.word	0x00039b01

0003a5a0 <pb_write>:
   3a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a5a2:	68c3      	ldr	r3, [r0, #12]
   3a5a4:	6805      	ldr	r5, [r0, #0]
   3a5a6:	4604      	mov	r4, r0
   3a5a8:	4413      	add	r3, r2
   3a5aa:	b13d      	cbz	r5, 3a5bc <pb_write+0x1c>
   3a5ac:	6887      	ldr	r7, [r0, #8]
   3a5ae:	429f      	cmp	r7, r3
   3a5b0:	d307      	bcc.n	3a5c2 <pb_write+0x22>
   3a5b2:	4616      	mov	r6, r2
   3a5b4:	47a8      	blx	r5
   3a5b6:	b160      	cbz	r0, 3a5d2 <pb_write+0x32>
   3a5b8:	68e3      	ldr	r3, [r4, #12]
   3a5ba:	4433      	add	r3, r6
   3a5bc:	60e3      	str	r3, [r4, #12]
   3a5be:	2001      	movs	r0, #1
   3a5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a5c2:	6903      	ldr	r3, [r0, #16]
   3a5c4:	4a06      	ldr	r2, [pc, #24]	; (3a5e0 <pb_write+0x40>)
   3a5c6:	2b00      	cmp	r3, #0
   3a5c8:	bf08      	it	eq
   3a5ca:	4613      	moveq	r3, r2
   3a5cc:	6103      	str	r3, [r0, #16]
   3a5ce:	2000      	movs	r0, #0
   3a5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a5d2:	6923      	ldr	r3, [r4, #16]
   3a5d4:	4a03      	ldr	r2, [pc, #12]	; (3a5e4 <pb_write+0x44>)
   3a5d6:	2b00      	cmp	r3, #0
   3a5d8:	bf08      	it	eq
   3a5da:	4613      	moveq	r3, r2
   3a5dc:	6123      	str	r3, [r4, #16]
   3a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a5e0:	00044c68 	.word	0x00044c68
   3a5e4:	00044bd4 	.word	0x00044bd4

0003a5e8 <pb_encode_varint>:
   3a5e8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   3a5ec:	2b00      	cmp	r3, #0
   3a5ee:	bf08      	it	eq
   3a5f0:	2a80      	cmpeq	r2, #128	; 0x80
   3a5f2:	b084      	sub	sp, #16
   3a5f4:	4604      	mov	r4, r0
   3a5f6:	f8d0 8000 	ldr.w	r8, [r0]
   3a5fa:	68c5      	ldr	r5, [r0, #12]
   3a5fc:	f0c0 808f 	bcc.w	3a71e <pb_encode_varint+0x136>
   3a600:	0b90      	lsrs	r0, r2, #14
   3a602:	f062 067f 	orn	r6, r2, #127	; 0x7f
   3a606:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
   3a60a:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
   3a60e:	0b99      	lsrs	r1, r3, #14
   3a610:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
   3a614:	f88d 6004 	strb.w	r6, [sp, #4]
   3a618:	ea50 0601 	orrs.w	r6, r0, r1
   3a61c:	f88d c005 	strb.w	ip, [sp, #5]
   3a620:	f000 8099 	beq.w	3a756 <pb_encode_varint+0x16e>
   3a624:	0d56      	lsrs	r6, r2, #21
   3a626:	f060 007f 	orn	r0, r0, #127	; 0x7f
   3a62a:	ea46 26c3 	orr.w	r6, r6, r3, lsl #11
   3a62e:	0d5f      	lsrs	r7, r3, #21
   3a630:	fa5f fc80 	uxtb.w	ip, r0
   3a634:	ea56 0107 	orrs.w	r1, r6, r7
   3a638:	f88d c006 	strb.w	ip, [sp, #6]
   3a63c:	f000 808e 	beq.w	3a75c <pb_encode_varint+0x174>
   3a640:	ea4f 7a12 	mov.w	sl, r2, lsr #28
   3a644:	f066 067f 	orn	r6, r6, #127	; 0x7f
   3a648:	ea4a 1a03 	orr.w	sl, sl, r3, lsl #4
   3a64c:	ea4f 7b13 	mov.w	fp, r3, lsr #28
   3a650:	fa5f fc86 	uxtb.w	ip, r6
   3a654:	ea5a 010b 	orrs.w	r1, sl, fp
   3a658:	f88d c007 	strb.w	ip, [sp, #7]
   3a65c:	d06f      	beq.n	3a73e <pb_encode_varint+0x156>
   3a65e:	f06a 0a7f 	orn	sl, sl, #127	; 0x7f
   3a662:	08d8      	lsrs	r0, r3, #3
   3a664:	2100      	movs	r1, #0
   3a666:	fa5f fc8a 	uxtb.w	ip, sl
   3a66a:	ea50 0601 	orrs.w	r6, r0, r1
   3a66e:	f88d c008 	strb.w	ip, [sp, #8]
   3a672:	d076      	beq.n	3a762 <pb_encode_varint+0x17a>
   3a674:	0a9e      	lsrs	r6, r3, #10
   3a676:	f060 0c7f 	orn	ip, r0, #127	; 0x7f
   3a67a:	460f      	mov	r7, r1
   3a67c:	fa5f fc8c 	uxtb.w	ip, ip
   3a680:	ea56 0e07 	orrs.w	lr, r6, r7
   3a684:	f88d c009 	strb.w	ip, [sp, #9]
   3a688:	d06e      	beq.n	3a768 <pb_encode_varint+0x180>
   3a68a:	f066 067f 	orn	r6, r6, #127	; 0x7f
   3a68e:	ea4f 4a53 	mov.w	sl, r3, lsr #17
   3a692:	468b      	mov	fp, r1
   3a694:	fa5f fc86 	uxtb.w	ip, r6
   3a698:	ea5a 060b 	orrs.w	r6, sl, fp
   3a69c:	f88d c00a 	strb.w	ip, [sp, #10]
   3a6a0:	d065      	beq.n	3a76e <pb_encode_varint+0x186>
   3a6a2:	f06a 0c7f 	orn	ip, sl, #127	; 0x7f
   3a6a6:	0e1e      	lsrs	r6, r3, #24
   3a6a8:	fa5f fc8c 	uxtb.w	ip, ip
   3a6ac:	ea56 0e07 	orrs.w	lr, r6, r7
   3a6b0:	f88d c00b 	strb.w	ip, [sp, #11]
   3a6b4:	d05e      	beq.n	3a774 <pb_encode_varint+0x18c>
   3a6b6:	f066 067f 	orn	r6, r6, #127	; 0x7f
   3a6ba:	ea4f 7ad3 	mov.w	sl, r3, lsr #31
   3a6be:	fa5f fc86 	uxtb.w	ip, r6
   3a6c2:	ea5a 030b 	orrs.w	r3, sl, fp
   3a6c6:	f88d c00c 	strb.w	ip, [sp, #12]
   3a6ca:	d056      	beq.n	3a77a <pb_encode_varint+0x192>
   3a6cc:	f04f 0c81 	mov.w	ip, #129	; 0x81
   3a6d0:	f88d c00d 	strb.w	ip, [sp, #13]
   3a6d4:	2309      	movs	r3, #9
   3a6d6:	260a      	movs	r6, #10
   3a6d8:	aa04      	add	r2, sp, #16
   3a6da:	4413      	add	r3, r2
   3a6dc:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   3a6e0:	f803 cc0c 	strb.w	ip, [r3, #-12]
   3a6e4:	4435      	add	r5, r6
   3a6e6:	f1b8 0f00 	cmp.w	r8, #0
   3a6ea:	d009      	beq.n	3a700 <pb_encode_varint+0x118>
   3a6ec:	68a3      	ldr	r3, [r4, #8]
   3a6ee:	42ab      	cmp	r3, r5
   3a6f0:	d30b      	bcc.n	3a70a <pb_encode_varint+0x122>
   3a6f2:	4632      	mov	r2, r6
   3a6f4:	a901      	add	r1, sp, #4
   3a6f6:	4620      	mov	r0, r4
   3a6f8:	47c0      	blx	r8
   3a6fa:	b318      	cbz	r0, 3a744 <pb_encode_varint+0x15c>
   3a6fc:	68e5      	ldr	r5, [r4, #12]
   3a6fe:	4435      	add	r5, r6
   3a700:	2001      	movs	r0, #1
   3a702:	60e5      	str	r5, [r4, #12]
   3a704:	b004      	add	sp, #16
   3a706:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   3a70a:	6923      	ldr	r3, [r4, #16]
   3a70c:	4a1c      	ldr	r2, [pc, #112]	; (3a780 <pb_encode_varint+0x198>)
   3a70e:	2000      	movs	r0, #0
   3a710:	2b00      	cmp	r3, #0
   3a712:	bf08      	it	eq
   3a714:	4613      	moveq	r3, r2
   3a716:	6123      	str	r3, [r4, #16]
   3a718:	b004      	add	sp, #16
   3a71a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   3a71e:	f88d 2004 	strb.w	r2, [sp, #4]
   3a722:	3501      	adds	r5, #1
   3a724:	f1b8 0f00 	cmp.w	r8, #0
   3a728:	d0ea      	beq.n	3a700 <pb_encode_varint+0x118>
   3a72a:	6883      	ldr	r3, [r0, #8]
   3a72c:	429d      	cmp	r5, r3
   3a72e:	d8ec      	bhi.n	3a70a <pb_encode_varint+0x122>
   3a730:	2201      	movs	r2, #1
   3a732:	a901      	add	r1, sp, #4
   3a734:	47c0      	blx	r8
   3a736:	b128      	cbz	r0, 3a744 <pb_encode_varint+0x15c>
   3a738:	68e5      	ldr	r5, [r4, #12]
   3a73a:	3501      	adds	r5, #1
   3a73c:	e7e0      	b.n	3a700 <pb_encode_varint+0x118>
   3a73e:	2303      	movs	r3, #3
   3a740:	2604      	movs	r6, #4
   3a742:	e7c9      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a744:	6923      	ldr	r3, [r4, #16]
   3a746:	4a0f      	ldr	r2, [pc, #60]	; (3a784 <pb_encode_varint+0x19c>)
   3a748:	2b00      	cmp	r3, #0
   3a74a:	bf08      	it	eq
   3a74c:	4613      	moveq	r3, r2
   3a74e:	6123      	str	r3, [r4, #16]
   3a750:	b004      	add	sp, #16
   3a752:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
   3a756:	2301      	movs	r3, #1
   3a758:	2602      	movs	r6, #2
   3a75a:	e7bd      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a75c:	2302      	movs	r3, #2
   3a75e:	2603      	movs	r6, #3
   3a760:	e7ba      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a762:	2304      	movs	r3, #4
   3a764:	2605      	movs	r6, #5
   3a766:	e7b7      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a768:	2305      	movs	r3, #5
   3a76a:	2606      	movs	r6, #6
   3a76c:	e7b4      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a76e:	2306      	movs	r3, #6
   3a770:	2607      	movs	r6, #7
   3a772:	e7b1      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a774:	2307      	movs	r3, #7
   3a776:	2608      	movs	r6, #8
   3a778:	e7ae      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a77a:	2308      	movs	r3, #8
   3a77c:	2609      	movs	r6, #9
   3a77e:	e7ab      	b.n	3a6d8 <pb_encode_varint+0xf0>
   3a780:	00044c68 	.word	0x00044c68
   3a784:	00044bd4 	.word	0x00044bd4

0003a788 <pb_enc_bytes>:
   3a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a78c:	4604      	mov	r4, r0
   3a78e:	b084      	sub	sp, #16
   3a790:	4616      	mov	r6, r2
   3a792:	2a00      	cmp	r2, #0
   3a794:	f000 8086 	beq.w	3a8a4 <pb_enc_bytes+0x11c>
   3a798:	788f      	ldrb	r7, [r1, #2]
   3a79a:	8815      	ldrh	r5, [r2, #0]
   3a79c:	f017 07c0 	ands.w	r7, r7, #192	; 0xc0
   3a7a0:	d104      	bne.n	3a7ac <pb_enc_bytes+0x24>
   3a7a2:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   3a7a6:	1caa      	adds	r2, r5, #2
   3a7a8:	429a      	cmp	r2, r3
   3a7aa:	d849      	bhi.n	3a840 <pb_enc_bytes+0xb8>
   3a7ac:	2300      	movs	r3, #0
   3a7ae:	b2aa      	uxth	r2, r5
   3a7b0:	2b00      	cmp	r3, #0
   3a7b2:	bf08      	it	eq
   3a7b4:	2a80      	cmpeq	r2, #128	; 0x80
   3a7b6:	6827      	ldr	r7, [r4, #0]
   3a7b8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3a7bc:	d355      	bcc.n	3a86a <pb_enc_bytes+0xe2>
   3a7be:	0b90      	lsrs	r0, r2, #14
   3a7c0:	f065 037f 	orn	r3, r5, #127	; 0x7f
   3a7c4:	f3c2 12c7 	ubfx	r2, r2, #7, #8
   3a7c8:	2100      	movs	r1, #0
   3a7ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   3a7ce:	f88d 3004 	strb.w	r3, [sp, #4]
   3a7d2:	ea50 0301 	orrs.w	r3, r0, r1
   3a7d6:	f88d 2005 	strb.w	r2, [sp, #5]
   3a7da:	d05f      	beq.n	3a89c <pb_enc_bytes+0x114>
   3a7dc:	f060 027f 	orn	r2, r0, #127	; 0x7f
   3a7e0:	b2d2      	uxtb	r2, r2
   3a7e2:	f88d 2006 	strb.w	r2, [sp, #6]
   3a7e6:	2302      	movs	r3, #2
   3a7e8:	f04f 0803 	mov.w	r8, #3
   3a7ec:	a904      	add	r1, sp, #16
   3a7ee:	440b      	add	r3, r1
   3a7f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   3a7f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
   3a7f8:	eb0c 0308 	add.w	r3, ip, r8
   3a7fc:	b1cf      	cbz	r7, 3a832 <pb_enc_bytes+0xaa>
   3a7fe:	68a2      	ldr	r2, [r4, #8]
   3a800:	4293      	cmp	r3, r2
   3a802:	d827      	bhi.n	3a854 <pb_enc_bytes+0xcc>
   3a804:	4642      	mov	r2, r8
   3a806:	a901      	add	r1, sp, #4
   3a808:	4620      	mov	r0, r4
   3a80a:	47b8      	blx	r7
   3a80c:	4607      	mov	r7, r0
   3a80e:	2800      	cmp	r0, #0
   3a810:	d03a      	beq.n	3a888 <pb_enc_bytes+0x100>
   3a812:	68e3      	ldr	r3, [r4, #12]
   3a814:	6827      	ldr	r7, [r4, #0]
   3a816:	4443      	add	r3, r8
   3a818:	60e3      	str	r3, [r4, #12]
   3a81a:	442b      	add	r3, r5
   3a81c:	b157      	cbz	r7, 3a834 <pb_enc_bytes+0xac>
   3a81e:	68a2      	ldr	r2, [r4, #8]
   3a820:	429a      	cmp	r2, r3
   3a822:	d317      	bcc.n	3a854 <pb_enc_bytes+0xcc>
   3a824:	1cb1      	adds	r1, r6, #2
   3a826:	462a      	mov	r2, r5
   3a828:	4620      	mov	r0, r4
   3a82a:	47b8      	blx	r7
   3a82c:	4607      	mov	r7, r0
   3a82e:	b358      	cbz	r0, 3a888 <pb_enc_bytes+0x100>
   3a830:	68e3      	ldr	r3, [r4, #12]
   3a832:	442b      	add	r3, r5
   3a834:	2701      	movs	r7, #1
   3a836:	4638      	mov	r0, r7
   3a838:	60e3      	str	r3, [r4, #12]
   3a83a:	b004      	add	sp, #16
   3a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a840:	6903      	ldr	r3, [r0, #16]
   3a842:	4a2d      	ldr	r2, [pc, #180]	; (3a8f8 <pb_enc_bytes+0x170>)
   3a844:	2b00      	cmp	r3, #0
   3a846:	bf08      	it	eq
   3a848:	4613      	moveq	r3, r2
   3a84a:	6103      	str	r3, [r0, #16]
   3a84c:	4638      	mov	r0, r7
   3a84e:	b004      	add	sp, #16
   3a850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a854:	6923      	ldr	r3, [r4, #16]
   3a856:	4a29      	ldr	r2, [pc, #164]	; (3a8fc <pb_enc_bytes+0x174>)
   3a858:	2700      	movs	r7, #0
   3a85a:	2b00      	cmp	r3, #0
   3a85c:	bf08      	it	eq
   3a85e:	4613      	moveq	r3, r2
   3a860:	4638      	mov	r0, r7
   3a862:	6123      	str	r3, [r4, #16]
   3a864:	b004      	add	sp, #16
   3a866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a86a:	f88d 5004 	strb.w	r5, [sp, #4]
   3a86e:	f10c 0301 	add.w	r3, ip, #1
   3a872:	2f00      	cmp	r7, #0
   3a874:	d0dd      	beq.n	3a832 <pb_enc_bytes+0xaa>
   3a876:	68a2      	ldr	r2, [r4, #8]
   3a878:	4293      	cmp	r3, r2
   3a87a:	d8eb      	bhi.n	3a854 <pb_enc_bytes+0xcc>
   3a87c:	2201      	movs	r2, #1
   3a87e:	a901      	add	r1, sp, #4
   3a880:	4620      	mov	r0, r4
   3a882:	47b8      	blx	r7
   3a884:	4607      	mov	r7, r0
   3a886:	bb48      	cbnz	r0, 3a8dc <pb_enc_bytes+0x154>
   3a888:	6923      	ldr	r3, [r4, #16]
   3a88a:	4a1d      	ldr	r2, [pc, #116]	; (3a900 <pb_enc_bytes+0x178>)
   3a88c:	4638      	mov	r0, r7
   3a88e:	2b00      	cmp	r3, #0
   3a890:	bf08      	it	eq
   3a892:	4613      	moveq	r3, r2
   3a894:	6123      	str	r3, [r4, #16]
   3a896:	b004      	add	sp, #16
   3a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a89c:	2301      	movs	r3, #1
   3a89e:	f04f 0802 	mov.w	r8, #2
   3a8a2:	e7a3      	b.n	3a7ec <pb_enc_bytes+0x64>
   3a8a4:	2200      	movs	r2, #0
   3a8a6:	2300      	movs	r3, #0
   3a8a8:	f7ff fe9e 	bl	3a5e8 <pb_encode_varint>
   3a8ac:	4607      	mov	r7, r0
   3a8ae:	2800      	cmp	r0, #0
   3a8b0:	d0cc      	beq.n	3a84c <pb_enc_bytes+0xc4>
   3a8b2:	6823      	ldr	r3, [r4, #0]
   3a8b4:	2b00      	cmp	r3, #0
   3a8b6:	d0c9      	beq.n	3a84c <pb_enc_bytes+0xc4>
   3a8b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   3a8bc:	4291      	cmp	r1, r2
   3a8be:	d812      	bhi.n	3a8e6 <pb_enc_bytes+0x15e>
   3a8c0:	4632      	mov	r2, r6
   3a8c2:	4631      	mov	r1, r6
   3a8c4:	4620      	mov	r0, r4
   3a8c6:	4798      	blx	r3
   3a8c8:	2800      	cmp	r0, #0
   3a8ca:	d1bf      	bne.n	3a84c <pb_enc_bytes+0xc4>
   3a8cc:	6923      	ldr	r3, [r4, #16]
   3a8ce:	4a0c      	ldr	r2, [pc, #48]	; (3a900 <pb_enc_bytes+0x178>)
   3a8d0:	2b00      	cmp	r3, #0
   3a8d2:	bf08      	it	eq
   3a8d4:	4613      	moveq	r3, r2
   3a8d6:	4607      	mov	r7, r0
   3a8d8:	6123      	str	r3, [r4, #16]
   3a8da:	e7b7      	b.n	3a84c <pb_enc_bytes+0xc4>
   3a8dc:	68e3      	ldr	r3, [r4, #12]
   3a8de:	6827      	ldr	r7, [r4, #0]
   3a8e0:	3301      	adds	r3, #1
   3a8e2:	60e3      	str	r3, [r4, #12]
   3a8e4:	e799      	b.n	3a81a <pb_enc_bytes+0x92>
   3a8e6:	6923      	ldr	r3, [r4, #16]
   3a8e8:	4a04      	ldr	r2, [pc, #16]	; (3a8fc <pb_enc_bytes+0x174>)
   3a8ea:	2b00      	cmp	r3, #0
   3a8ec:	bf08      	it	eq
   3a8ee:	4613      	moveq	r3, r2
   3a8f0:	4637      	mov	r7, r6
   3a8f2:	6123      	str	r3, [r4, #16]
   3a8f4:	e7aa      	b.n	3a84c <pb_enc_bytes+0xc4>
   3a8f6:	bf00      	nop
   3a8f8:	00044c54 	.word	0x00044c54
   3a8fc:	00044c68 	.word	0x00044c68
   3a900:	00044bd4 	.word	0x00044bd4

0003a904 <pb_encode_tag_for_field>:
   3a904:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   3a908:	788b      	ldrb	r3, [r1, #2]
   3a90a:	f003 030f 	and.w	r3, r3, #15
   3a90e:	b084      	sub	sp, #16
   3a910:	2b09      	cmp	r3, #9
   3a912:	d84c      	bhi.n	3a9ae <pb_encode_tag_for_field+0xaa>
   3a914:	e8df f003 	tbb	[pc, r3]
   3a918:	45474747 	.word	0x45474747
   3a91c:	49494905 	.word	0x49494905
   3a920:	494b      	.short	0x494b
   3a922:	2601      	movs	r6, #1
   3a924:	8809      	ldrh	r1, [r1, #0]
   3a926:	6805      	ldr	r5, [r0, #0]
   3a928:	68c7      	ldr	r7, [r0, #12]
   3a92a:	f04f 0c00 	mov.w	ip, #0
   3a92e:	ea46 0bc1 	orr.w	fp, r6, r1, lsl #3
   3a932:	f1bc 0f00 	cmp.w	ip, #0
   3a936:	bf08      	it	eq
   3a938:	f1bb 0f80 	cmpeq.w	fp, #128	; 0x80
   3a93c:	4604      	mov	r4, r0
   3a93e:	d340      	bcc.n	3a9c2 <pb_encode_tag_for_field+0xbe>
   3a940:	ea4f 309b 	mov.w	r0, fp, lsr #14
   3a944:	f06b 027f 	orn	r2, fp, #127	; 0x7f
   3a948:	ea40 408c 	orr.w	r0, r0, ip, lsl #18
   3a94c:	f3cb 16c7 	ubfx	r6, fp, #7, #8
   3a950:	ea4f 319c 	mov.w	r1, ip, lsr #14
   3a954:	f046 0380 	orr.w	r3, r6, #128	; 0x80
   3a958:	f88d 2004 	strb.w	r2, [sp, #4]
   3a95c:	ea50 0201 	orrs.w	r2, r0, r1
   3a960:	f88d 3005 	strb.w	r3, [sp, #5]
   3a964:	d04c      	beq.n	3aa00 <pb_encode_tag_for_field+0xfc>
   3a966:	f060 037f 	orn	r3, r0, #127	; 0x7f
   3a96a:	b2db      	uxtb	r3, r3
   3a96c:	f88d 3006 	strb.w	r3, [sp, #6]
   3a970:	2202      	movs	r2, #2
   3a972:	2603      	movs	r6, #3
   3a974:	a904      	add	r1, sp, #16
   3a976:	440a      	add	r2, r1
   3a978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3a97c:	f802 3c0c 	strb.w	r3, [r2, #-12]
   3a980:	4437      	add	r7, r6
   3a982:	b14d      	cbz	r5, 3a998 <pb_encode_tag_for_field+0x94>
   3a984:	68a2      	ldr	r2, [r4, #8]
   3a986:	4297      	cmp	r7, r2
   3a988:	d830      	bhi.n	3a9ec <pb_encode_tag_for_field+0xe8>
   3a98a:	4632      	mov	r2, r6
   3a98c:	a901      	add	r1, sp, #4
   3a98e:	4620      	mov	r0, r4
   3a990:	47a8      	blx	r5
   3a992:	b310      	cbz	r0, 3a9da <pb_encode_tag_for_field+0xd6>
   3a994:	68e3      	ldr	r3, [r4, #12]
   3a996:	18f7      	adds	r7, r6, r3
   3a998:	60e7      	str	r7, [r4, #12]
   3a99a:	2001      	movs	r0, #1
   3a99c:	b004      	add	sp, #16
   3a99e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   3a9a2:	2605      	movs	r6, #5
   3a9a4:	e7be      	b.n	3a924 <pb_encode_tag_for_field+0x20>
   3a9a6:	2600      	movs	r6, #0
   3a9a8:	e7bc      	b.n	3a924 <pb_encode_tag_for_field+0x20>
   3a9aa:	2602      	movs	r6, #2
   3a9ac:	e7ba      	b.n	3a924 <pb_encode_tag_for_field+0x20>
   3a9ae:	6903      	ldr	r3, [r0, #16]
   3a9b0:	4a1a      	ldr	r2, [pc, #104]	; (3aa1c <pb_encode_tag_for_field+0x118>)
   3a9b2:	2b00      	cmp	r3, #0
   3a9b4:	bf08      	it	eq
   3a9b6:	4613      	moveq	r3, r2
   3a9b8:	6103      	str	r3, [r0, #16]
   3a9ba:	2000      	movs	r0, #0
   3a9bc:	b004      	add	sp, #16
   3a9be:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   3a9c2:	f88d b004 	strb.w	fp, [sp, #4]
   3a9c6:	3701      	adds	r7, #1
   3a9c8:	2d00      	cmp	r5, #0
   3a9ca:	d0e5      	beq.n	3a998 <pb_encode_tag_for_field+0x94>
   3a9cc:	6882      	ldr	r2, [r0, #8]
   3a9ce:	42ba      	cmp	r2, r7
   3a9d0:	d31c      	bcc.n	3aa0c <pb_encode_tag_for_field+0x108>
   3a9d2:	2201      	movs	r2, #1
   3a9d4:	a901      	add	r1, sp, #4
   3a9d6:	47a8      	blx	r5
   3a9d8:	b9a8      	cbnz	r0, 3aa06 <pb_encode_tag_for_field+0x102>
   3a9da:	6923      	ldr	r3, [r4, #16]
   3a9dc:	4a10      	ldr	r2, [pc, #64]	; (3aa20 <pb_encode_tag_for_field+0x11c>)
   3a9de:	2b00      	cmp	r3, #0
   3a9e0:	bf08      	it	eq
   3a9e2:	4613      	moveq	r3, r2
   3a9e4:	6123      	str	r3, [r4, #16]
   3a9e6:	b004      	add	sp, #16
   3a9e8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   3a9ec:	6923      	ldr	r3, [r4, #16]
   3a9ee:	4a0d      	ldr	r2, [pc, #52]	; (3aa24 <pb_encode_tag_for_field+0x120>)
   3a9f0:	2000      	movs	r0, #0
   3a9f2:	2b00      	cmp	r3, #0
   3a9f4:	bf08      	it	eq
   3a9f6:	4613      	moveq	r3, r2
   3a9f8:	6123      	str	r3, [r4, #16]
   3a9fa:	b004      	add	sp, #16
   3a9fc:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   3aa00:	2201      	movs	r2, #1
   3aa02:	2602      	movs	r6, #2
   3aa04:	e7b6      	b.n	3a974 <pb_encode_tag_for_field+0x70>
   3aa06:	68e3      	ldr	r3, [r4, #12]
   3aa08:	1c5f      	adds	r7, r3, #1
   3aa0a:	e7c5      	b.n	3a998 <pb_encode_tag_for_field+0x94>
   3aa0c:	6903      	ldr	r3, [r0, #16]
   3aa0e:	4a05      	ldr	r2, [pc, #20]	; (3aa24 <pb_encode_tag_for_field+0x120>)
   3aa10:	4563      	cmp	r3, ip
   3aa12:	bf08      	it	eq
   3aa14:	4613      	moveq	r3, r2
   3aa16:	6103      	str	r3, [r0, #16]
   3aa18:	4660      	mov	r0, ip
   3aa1a:	e7bf      	b.n	3a99c <pb_encode_tag_for_field+0x98>
   3aa1c:	00044ab8 	.word	0x00044ab8
   3aa20:	00044bd4 	.word	0x00044bd4
   3aa24:	00044c68 	.word	0x00044c68

0003aa28 <encode_field>:
   3aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3aa2c:	4615      	mov	r5, r2
   3aa2e:	788a      	ldrb	r2, [r1, #2]
   3aa30:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   3aa34:	2b40      	cmp	r3, #64	; 0x40
   3aa36:	b086      	sub	sp, #24
   3aa38:	4606      	mov	r6, r0
   3aa3a:	d038      	beq.n	3aaae <encode_field+0x86>
   3aa3c:	2b80      	cmp	r3, #128	; 0x80
   3aa3e:	460c      	mov	r4, r1
   3aa40:	d00a      	beq.n	3aa58 <encode_field+0x30>
   3aa42:	b14b      	cbz	r3, 3aa58 <encode_field+0x30>
   3aa44:	6933      	ldr	r3, [r6, #16]
   3aa46:	4a80      	ldr	r2, [pc, #512]	; (3ac48 <encode_field+0x220>)
   3aa48:	2b00      	cmp	r3, #0
   3aa4a:	bf08      	it	eq
   3aa4c:	4613      	moveq	r3, r2
   3aa4e:	6133      	str	r3, [r6, #16]
   3aa50:	2000      	movs	r0, #0
   3aa52:	b006      	add	sp, #24
   3aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3aa58:	4f7c      	ldr	r7, [pc, #496]	; (3ac4c <encode_field+0x224>)
   3aa5a:	f9b4 0005 	ldrsh.w	r0, [r4, #5]
   3aa5e:	f002 0c0f 	and.w	ip, r2, #15
   3aa62:	f002 0130 	and.w	r1, r2, #48	; 0x30
   3aa66:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
   3aa6a:	bb70      	cbnz	r0, 3aaca <encode_field+0xa2>
   3aa6c:	2910      	cmp	r1, #16
   3aa6e:	f000 8082 	beq.w	3ab76 <encode_field+0x14e>
   3aa72:	2001      	movs	r0, #1
   3aa74:	f88d 0003 	strb.w	r0, [sp, #3]
   3aa78:	f10d 0003 	add.w	r0, sp, #3
   3aa7c:	2b80      	cmp	r3, #128	; 0x80
   3aa7e:	d107      	bne.n	3aa90 <encode_field+0x68>
   3aa80:	682d      	ldr	r5, [r5, #0]
   3aa82:	f115 0c00 	adds.w	ip, r5, #0
   3aa86:	bf18      	it	ne
   3aa88:	f04f 0c01 	movne.w	ip, #1
   3aa8c:	f88d c003 	strb.w	ip, [sp, #3]
   3aa90:	2910      	cmp	r1, #16
   3aa92:	d061      	beq.n	3ab58 <encode_field+0x130>
   3aa94:	d91b      	bls.n	3aace <encode_field+0xa6>
   3aa96:	2920      	cmp	r1, #32
   3aa98:	d028      	beq.n	3aaec <encode_field+0xc4>
   3aa9a:	2930      	cmp	r1, #48	; 0x30
   3aa9c:	d1d2      	bne.n	3aa44 <encode_field+0x1c>
   3aa9e:	8802      	ldrh	r2, [r0, #0]
   3aaa0:	8823      	ldrh	r3, [r4, #0]
   3aaa2:	429a      	cmp	r2, r3
   3aaa4:	d017      	beq.n	3aad6 <encode_field+0xae>
   3aaa6:	2001      	movs	r0, #1
   3aaa8:	b006      	add	sp, #24
   3aaaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3aaae:	682b      	ldr	r3, [r5, #0]
   3aab0:	2b00      	cmp	r3, #0
   3aab2:	d0f8      	beq.n	3aaa6 <encode_field+0x7e>
   3aab4:	1d2a      	adds	r2, r5, #4
   3aab6:	4798      	blx	r3
   3aab8:	2800      	cmp	r0, #0
   3aaba:	d1f4      	bne.n	3aaa6 <encode_field+0x7e>
   3aabc:	6933      	ldr	r3, [r6, #16]
   3aabe:	4a64      	ldr	r2, [pc, #400]	; (3ac50 <encode_field+0x228>)
   3aac0:	2b00      	cmp	r3, #0
   3aac2:	bf08      	it	eq
   3aac4:	4613      	moveq	r3, r2
   3aac6:	6133      	str	r3, [r6, #16]
   3aac8:	e7c3      	b.n	3aa52 <encode_field+0x2a>
   3aaca:	4428      	add	r0, r5
   3aacc:	e7d6      	b.n	3aa7c <encode_field+0x54>
   3aace:	2900      	cmp	r1, #0
   3aad0:	d1b8      	bne.n	3aa44 <encode_field+0x1c>
   3aad2:	2d00      	cmp	r5, #0
   3aad4:	d047      	beq.n	3ab66 <encode_field+0x13e>
   3aad6:	4621      	mov	r1, r4
   3aad8:	4630      	mov	r0, r6
   3aada:	f7ff ff13 	bl	3a904 <pb_encode_tag_for_field>
   3aade:	2800      	cmp	r0, #0
   3aae0:	d0b6      	beq.n	3aa50 <encode_field+0x28>
   3aae2:	462a      	mov	r2, r5
   3aae4:	4621      	mov	r1, r4
   3aae6:	4630      	mov	r0, r6
   3aae8:	47b8      	blx	r7
   3aaea:	e7b2      	b.n	3aa52 <encode_field+0x2a>
   3aaec:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
   3aaf0:	2900      	cmp	r1, #0
   3aaf2:	d035      	beq.n	3ab60 <encode_field+0x138>
   3aaf4:	f8b0 8000 	ldrh.w	r8, [r0]
   3aaf8:	f1b8 0f00 	cmp.w	r8, #0
   3aafc:	d0d3      	beq.n	3aaa6 <encode_field+0x7e>
   3aafe:	2b80      	cmp	r3, #128	; 0x80
   3ab00:	d004      	beq.n	3ab0c <encode_field+0xe4>
   3ab02:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   3ab06:	4598      	cmp	r8, r3
   3ab08:	f200 808a 	bhi.w	3ac20 <encode_field+0x1f8>
   3ab0c:	f002 020f 	and.w	r2, r2, #15
   3ab10:	2a04      	cmp	r2, #4
   3ab12:	d940      	bls.n	3ab96 <encode_field+0x16e>
   3ab14:	f04f 0900 	mov.w	r9, #0
   3ab18:	4621      	mov	r1, r4
   3ab1a:	4630      	mov	r0, r6
   3ab1c:	f7ff fef2 	bl	3a904 <pb_encode_tag_for_field>
   3ab20:	f109 0901 	add.w	r9, r9, #1
   3ab24:	462a      	mov	r2, r5
   3ab26:	4621      	mov	r1, r4
   3ab28:	2800      	cmp	r0, #0
   3ab2a:	d091      	beq.n	3aa50 <encode_field+0x28>
   3ab2c:	78a3      	ldrb	r3, [r4, #2]
   3ab2e:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
   3ab32:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   3ab36:	4630      	mov	r0, r6
   3ab38:	d105      	bne.n	3ab46 <encode_field+0x11e>
   3ab3a:	f003 030f 	and.w	r3, r3, #15
   3ab3e:	3b05      	subs	r3, #5
   3ab40:	2b01      	cmp	r3, #1
   3ab42:	bf98      	it	ls
   3ab44:	682a      	ldrls	r2, [r5, #0]
   3ab46:	47b8      	blx	r7
   3ab48:	2800      	cmp	r0, #0
   3ab4a:	d081      	beq.n	3aa50 <encode_field+0x28>
   3ab4c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   3ab50:	45c8      	cmp	r8, r9
   3ab52:	441d      	add	r5, r3
   3ab54:	d1e0      	bne.n	3ab18 <encode_field+0xf0>
   3ab56:	e7a6      	b.n	3aaa6 <encode_field+0x7e>
   3ab58:	7803      	ldrb	r3, [r0, #0]
   3ab5a:	2b00      	cmp	r3, #0
   3ab5c:	d0a3      	beq.n	3aaa6 <encode_field+0x7e>
   3ab5e:	e7ba      	b.n	3aad6 <encode_field+0xae>
   3ab60:	f8b4 8009 	ldrh.w	r8, [r4, #9]
   3ab64:	e7c8      	b.n	3aaf8 <encode_field+0xd0>
   3ab66:	6933      	ldr	r3, [r6, #16]
   3ab68:	4a3a      	ldr	r2, [pc, #232]	; (3ac54 <encode_field+0x22c>)
   3ab6a:	2b00      	cmp	r3, #0
   3ab6c:	bf08      	it	eq
   3ab6e:	4613      	moveq	r3, r2
   3ab70:	4628      	mov	r0, r5
   3ab72:	6133      	str	r3, [r6, #16]
   3ab74:	e76d      	b.n	3aa52 <encode_field+0x2a>
   3ab76:	4629      	mov	r1, r5
   3ab78:	4620      	mov	r0, r4
   3ab7a:	f7fe fffb 	bl	39b74 <pb_check_proto3_default_value>
   3ab7e:	78a2      	ldrb	r2, [r4, #2]
   3ab80:	f080 0001 	eor.w	r0, r0, #1
   3ab84:	f88d 0003 	strb.w	r0, [sp, #3]
   3ab88:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   3ab8c:	f002 0130 	and.w	r1, r2, #48	; 0x30
   3ab90:	f10d 0003 	add.w	r0, sp, #3
   3ab94:	e772      	b.n	3aa7c <encode_field+0x54>
   3ab96:	8822      	ldrh	r2, [r4, #0]
   3ab98:	00d2      	lsls	r2, r2, #3
   3ab9a:	2300      	movs	r3, #0
   3ab9c:	f042 0202 	orr.w	r2, r2, #2
   3aba0:	4630      	mov	r0, r6
   3aba2:	4699      	mov	r9, r3
   3aba4:	f7ff fd20 	bl	3a5e8 <pb_encode_varint>
   3aba8:	2800      	cmp	r0, #0
   3abaa:	f43f af51 	beq.w	3aa50 <encode_field+0x28>
   3abae:	78a3      	ldrb	r3, [r4, #2]
   3abb0:	f003 030f 	and.w	r3, r3, #15
   3abb4:	2b03      	cmp	r3, #3
   3abb6:	d040      	beq.n	3ac3a <encode_field+0x212>
   3abb8:	2b04      	cmp	r3, #4
   3abba:	d041      	beq.n	3ac40 <encode_field+0x218>
   3abbc:	e9cd 9901 	strd	r9, r9, [sp, #4]
   3abc0:	e9cd 9903 	strd	r9, r9, [sp, #12]
   3abc4:	f8cd 9014 	str.w	r9, [sp, #20]
   3abc8:	46aa      	mov	sl, r5
   3abca:	4652      	mov	r2, sl
   3abcc:	4621      	mov	r1, r4
   3abce:	a801      	add	r0, sp, #4
   3abd0:	47b8      	blx	r7
   3abd2:	f109 0901 	add.w	r9, r9, #1
   3abd6:	2800      	cmp	r0, #0
   3abd8:	f43f af3b 	beq.w	3aa52 <encode_field+0x2a>
   3abdc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   3abe0:	45c8      	cmp	r8, r9
   3abe2:	449a      	add	sl, r3
   3abe4:	d1f1      	bne.n	3abca <encode_field+0x1a2>
   3abe6:	f8dd 9010 	ldr.w	r9, [sp, #16]
   3abea:	464a      	mov	r2, r9
   3abec:	2300      	movs	r3, #0
   3abee:	4630      	mov	r0, r6
   3abf0:	f7ff fcfa 	bl	3a5e8 <pb_encode_varint>
   3abf4:	2800      	cmp	r0, #0
   3abf6:	f43f af2b 	beq.w	3aa50 <encode_field+0x28>
   3abfa:	6831      	ldr	r1, [r6, #0]
   3abfc:	b1c1      	cbz	r1, 3ac30 <encode_field+0x208>
   3abfe:	f04f 0900 	mov.w	r9, #0
   3ac02:	462a      	mov	r2, r5
   3ac04:	4621      	mov	r1, r4
   3ac06:	4630      	mov	r0, r6
   3ac08:	47b8      	blx	r7
   3ac0a:	f109 0901 	add.w	r9, r9, #1
   3ac0e:	2800      	cmp	r0, #0
   3ac10:	f43f af1e 	beq.w	3aa50 <encode_field+0x28>
   3ac14:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   3ac18:	45c8      	cmp	r8, r9
   3ac1a:	441d      	add	r5, r3
   3ac1c:	d1f1      	bne.n	3ac02 <encode_field+0x1da>
   3ac1e:	e742      	b.n	3aaa6 <encode_field+0x7e>
   3ac20:	6933      	ldr	r3, [r6, #16]
   3ac22:	4a0d      	ldr	r2, [pc, #52]	; (3ac58 <encode_field+0x230>)
   3ac24:	2b00      	cmp	r3, #0
   3ac26:	bf08      	it	eq
   3ac28:	4613      	moveq	r3, r2
   3ac2a:	6133      	str	r3, [r6, #16]
   3ac2c:	2000      	movs	r0, #0
   3ac2e:	e710      	b.n	3aa52 <encode_field+0x2a>
   3ac30:	464a      	mov	r2, r9
   3ac32:	4630      	mov	r0, r6
   3ac34:	f7ff fcb4 	bl	3a5a0 <pb_write>
   3ac38:	e70b      	b.n	3aa52 <encode_field+0x2a>
   3ac3a:	ea4f 0988 	mov.w	r9, r8, lsl #2
   3ac3e:	e7d4      	b.n	3abea <encode_field+0x1c2>
   3ac40:	ea4f 09c8 	mov.w	r9, r8, lsl #3
   3ac44:	e7d1      	b.n	3abea <encode_field+0x1c2>
   3ac46:	bf00      	nop
   3ac48:	00044ab8 	.word	0x00044ab8
   3ac4c:	00044c04 	.word	0x00044c04
   3ac50:	00044c44 	.word	0x00044c44
   3ac54:	00044bac 	.word	0x00044bac
   3ac58:	00044c2c 	.word	0x00044c2c

0003ac5c <pb_encode>:
   3ac5c:	b530      	push	{r4, r5, lr}
   3ac5e:	b087      	sub	sp, #28
   3ac60:	4605      	mov	r5, r0
   3ac62:	4668      	mov	r0, sp
   3ac64:	f000 f89c 	bl	3ada0 <pb_field_iter_begin>
   3ac68:	b950      	cbnz	r0, 3ac80 <pb_encode+0x24>
   3ac6a:	e032      	b.n	3acd2 <pb_encode+0x76>
   3ac6c:	4628      	mov	r0, r5
   3ac6e:	f7ff fedb 	bl	3aa28 <encode_field>
   3ac72:	2800      	cmp	r0, #0
   3ac74:	d02a      	beq.n	3accc <pb_encode+0x70>
   3ac76:	4668      	mov	r0, sp
   3ac78:	f000 f8a8 	bl	3adcc <pb_field_iter_next>
   3ac7c:	2800      	cmp	r0, #0
   3ac7e:	d028      	beq.n	3acd2 <pb_encode+0x76>
   3ac80:	9901      	ldr	r1, [sp, #4]
   3ac82:	9a04      	ldr	r2, [sp, #16]
   3ac84:	788b      	ldrb	r3, [r1, #2]
   3ac86:	f003 030f 	and.w	r3, r3, #15
   3ac8a:	2b08      	cmp	r3, #8
   3ac8c:	d1ee      	bne.n	3ac6c <pb_encode+0x10>
   3ac8e:	6814      	ldr	r4, [r2, #0]
   3ac90:	2c00      	cmp	r4, #0
   3ac92:	d0f0      	beq.n	3ac76 <pb_encode+0x1a>
   3ac94:	6822      	ldr	r2, [r4, #0]
   3ac96:	6853      	ldr	r3, [r2, #4]
   3ac98:	4621      	mov	r1, r4
   3ac9a:	4628      	mov	r0, r5
   3ac9c:	b153      	cbz	r3, 3acb4 <pb_encode+0x58>
   3ac9e:	4798      	blx	r3
   3aca0:	b1a0      	cbz	r0, 3accc <pb_encode+0x70>
   3aca2:	68a4      	ldr	r4, [r4, #8]
   3aca4:	2c00      	cmp	r4, #0
   3aca6:	d0e6      	beq.n	3ac76 <pb_encode+0x1a>
   3aca8:	6822      	ldr	r2, [r4, #0]
   3acaa:	6853      	ldr	r3, [r2, #4]
   3acac:	4621      	mov	r1, r4
   3acae:	4628      	mov	r0, r5
   3acb0:	2b00      	cmp	r3, #0
   3acb2:	d1f4      	bne.n	3ac9e <pb_encode+0x42>
   3acb4:	6891      	ldr	r1, [r2, #8]
   3acb6:	788b      	ldrb	r3, [r1, #2]
   3acb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3acbc:	2b80      	cmp	r3, #128	; 0x80
   3acbe:	bf0c      	ite	eq
   3acc0:	1d22      	addeq	r2, r4, #4
   3acc2:	6862      	ldrne	r2, [r4, #4]
   3acc4:	f7ff feb0 	bl	3aa28 <encode_field>
   3acc8:	2800      	cmp	r0, #0
   3acca:	d1ea      	bne.n	3aca2 <pb_encode+0x46>
   3accc:	2000      	movs	r0, #0
   3acce:	b007      	add	sp, #28
   3acd0:	bd30      	pop	{r4, r5, pc}
   3acd2:	2001      	movs	r0, #1
   3acd4:	b007      	add	sp, #28
   3acd6:	bd30      	pop	{r4, r5, pc}

0003acd8 <pb_enc_submessage>:
   3acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3acdc:	f8d1 600b 	ldr.w	r6, [r1, #11]
   3ace0:	b086      	sub	sp, #24
   3ace2:	4604      	mov	r4, r0
   3ace4:	b36e      	cbz	r6, 3ad42 <pb_enc_submessage+0x6a>
   3ace6:	2500      	movs	r5, #0
   3ace8:	a801      	add	r0, sp, #4
   3acea:	4631      	mov	r1, r6
   3acec:	4617      	mov	r7, r2
   3acee:	e9cd 5501 	strd	r5, r5, [sp, #4]
   3acf2:	e9cd 5503 	strd	r5, r5, [sp, #12]
   3acf6:	9505      	str	r5, [sp, #20]
   3acf8:	f7ff ffb0 	bl	3ac5c <pb_encode>
   3acfc:	b920      	cbnz	r0, 3ad08 <pb_enc_submessage+0x30>
   3acfe:	9b05      	ldr	r3, [sp, #20]
   3ad00:	6123      	str	r3, [r4, #16]
   3ad02:	b006      	add	sp, #24
   3ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad08:	f8dd 8010 	ldr.w	r8, [sp, #16]
   3ad0c:	462b      	mov	r3, r5
   3ad0e:	4642      	mov	r2, r8
   3ad10:	4620      	mov	r0, r4
   3ad12:	f7ff fc69 	bl	3a5e8 <pb_encode_varint>
   3ad16:	2800      	cmp	r0, #0
   3ad18:	d0f3      	beq.n	3ad02 <pb_enc_submessage+0x2a>
   3ad1a:	68e3      	ldr	r3, [r4, #12]
   3ad1c:	f8d4 c000 	ldr.w	ip, [r4]
   3ad20:	4443      	add	r3, r8
   3ad22:	f1bc 0f00 	cmp.w	ip, #0
   3ad26:	d032      	beq.n	3ad8e <pb_enc_submessage+0xb6>
   3ad28:	68a2      	ldr	r2, [r4, #8]
   3ad2a:	429a      	cmp	r2, r3
   3ad2c:	d213      	bcs.n	3ad56 <pb_enc_submessage+0x7e>
   3ad2e:	6923      	ldr	r3, [r4, #16]
   3ad30:	4a18      	ldr	r2, [pc, #96]	; (3ad94 <pb_enc_submessage+0xbc>)
   3ad32:	4628      	mov	r0, r5
   3ad34:	2b00      	cmp	r3, #0
   3ad36:	bf08      	it	eq
   3ad38:	4613      	moveq	r3, r2
   3ad3a:	6123      	str	r3, [r4, #16]
   3ad3c:	b006      	add	sp, #24
   3ad3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad42:	6903      	ldr	r3, [r0, #16]
   3ad44:	4a14      	ldr	r2, [pc, #80]	; (3ad98 <pb_enc_submessage+0xc0>)
   3ad46:	4630      	mov	r0, r6
   3ad48:	2b00      	cmp	r3, #0
   3ad4a:	bf08      	it	eq
   3ad4c:	4613      	moveq	r3, r2
   3ad4e:	6123      	str	r3, [r4, #16]
   3ad50:	b006      	add	sp, #24
   3ad52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad56:	6863      	ldr	r3, [r4, #4]
   3ad58:	9302      	str	r3, [sp, #8]
   3ad5a:	463a      	mov	r2, r7
   3ad5c:	4631      	mov	r1, r6
   3ad5e:	a801      	add	r0, sp, #4
   3ad60:	f8cd c004 	str.w	ip, [sp, #4]
   3ad64:	e9cd 8503 	strd	r8, r5, [sp, #12]
   3ad68:	9505      	str	r5, [sp, #20]
   3ad6a:	f7ff ff77 	bl	3ac5c <pb_encode>
   3ad6e:	9a04      	ldr	r2, [sp, #16]
   3ad70:	68e3      	ldr	r3, [r4, #12]
   3ad72:	9902      	ldr	r1, [sp, #8]
   3ad74:	6061      	str	r1, [r4, #4]
   3ad76:	4413      	add	r3, r2
   3ad78:	4590      	cmp	r8, r2
   3ad7a:	60e3      	str	r3, [r4, #12]
   3ad7c:	9b05      	ldr	r3, [sp, #20]
   3ad7e:	d004      	beq.n	3ad8a <pb_enc_submessage+0xb2>
   3ad80:	4a06      	ldr	r2, [pc, #24]	; (3ad9c <pb_enc_submessage+0xc4>)
   3ad82:	4628      	mov	r0, r5
   3ad84:	2b00      	cmp	r3, #0
   3ad86:	bf08      	it	eq
   3ad88:	4613      	moveq	r3, r2
   3ad8a:	6123      	str	r3, [r4, #16]
   3ad8c:	e7b9      	b.n	3ad02 <pb_enc_submessage+0x2a>
   3ad8e:	60e3      	str	r3, [r4, #12]
   3ad90:	e7b7      	b.n	3ad02 <pb_enc_submessage+0x2a>
   3ad92:	bf00      	nop
   3ad94:	00044c68 	.word	0x00044c68
   3ad98:	00044b44 	.word	0x00044b44
   3ad9c:	00044c74 	.word	0x00044c74

0003ada0 <pb_field_iter_begin>:
   3ada0:	b410      	push	{r4}
   3ada2:	2300      	movs	r3, #0
   3ada4:	e9c0 3202 	strd	r3, r2, [r0, #8]
   3ada8:	e9c0 1100 	strd	r1, r1, [r0]
   3adac:	f8b1 4003 	ldrh.w	r4, [r1, #3]
   3adb0:	880b      	ldrh	r3, [r1, #0]
   3adb2:	4422      	add	r2, r4
   3adb4:	6102      	str	r2, [r0, #16]
   3adb6:	f9b1 1005 	ldrsh.w	r1, [r1, #5]
   3adba:	f85d 4b04 	ldr.w	r4, [sp], #4
   3adbe:	440a      	add	r2, r1
   3adc0:	6142      	str	r2, [r0, #20]
   3adc2:	1c18      	adds	r0, r3, #0
   3adc4:	bf18      	it	ne
   3adc6:	2001      	movne	r0, #1
   3adc8:	4770      	bx	lr
   3adca:	bf00      	nop

0003adcc <pb_field_iter_next>:
   3adcc:	6842      	ldr	r2, [r0, #4]
   3adce:	8813      	ldrh	r3, [r2, #0]
   3add0:	b363      	cbz	r3, 3ae2c <pb_field_iter_next+0x60>
   3add2:	f8b2 300f 	ldrh.w	r3, [r2, #15]
   3add6:	f102 010f 	add.w	r1, r2, #15
   3adda:	b470      	push	{r4, r5, r6}
   3addc:	6041      	str	r1, [r0, #4]
   3adde:	b1b3      	cbz	r3, 3ae0e <pb_field_iter_next+0x42>
   3ade0:	7894      	ldrb	r4, [r2, #2]
   3ade2:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   3ade6:	8a56      	ldrh	r6, [r2, #18]
   3ade8:	f004 0530 	and.w	r5, r4, #48	; 0x30
   3adec:	2d30      	cmp	r5, #48	; 0x30
   3adee:	d11f      	bne.n	3ae30 <pb_field_iter_next+0x64>
   3adf0:	7c55      	ldrb	r5, [r2, #17]
   3adf2:	f005 0530 	and.w	r5, r5, #48	; 0x30
   3adf6:	2d30      	cmp	r5, #48	; 0x30
   3adf8:	d103      	bne.n	3ae02 <pb_field_iter_next+0x36>
   3adfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3adfe:	429e      	cmp	r6, r3
   3ae00:	d034      	beq.n	3ae6c <pb_field_iter_next+0xa0>
   3ae02:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3ae06:	2c80      	cmp	r4, #128	; 0x80
   3ae08:	bf08      	it	eq
   3ae0a:	2104      	moveq	r1, #4
   3ae0c:	e01c      	b.n	3ae48 <pb_field_iter_next+0x7c>
   3ae0e:	6801      	ldr	r1, [r0, #0]
   3ae10:	68c2      	ldr	r2, [r0, #12]
   3ae12:	e9c0 1301 	strd	r1, r3, [r0, #4]
   3ae16:	f8b1 4003 	ldrh.w	r4, [r1, #3]
   3ae1a:	4422      	add	r2, r4
   3ae1c:	6102      	str	r2, [r0, #16]
   3ae1e:	f9b1 1005 	ldrsh.w	r1, [r1, #5]
   3ae22:	440a      	add	r2, r1
   3ae24:	6142      	str	r2, [r0, #20]
   3ae26:	4618      	mov	r0, r3
   3ae28:	bc70      	pop	{r4, r5, r6}
   3ae2a:	4770      	bx	lr
   3ae2c:	4618      	mov	r0, r3
   3ae2e:	4770      	bx	lr
   3ae30:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
   3ae34:	2b20      	cmp	r3, #32
   3ae36:	d113      	bne.n	3ae60 <pb_field_iter_next+0x94>
   3ae38:	f8b2 3009 	ldrh.w	r3, [r2, #9]
   3ae3c:	fb03 f101 	mul.w	r1, r3, r1
   3ae40:	b915      	cbnz	r5, 3ae48 <pb_field_iter_next+0x7c>
   3ae42:	6883      	ldr	r3, [r0, #8]
   3ae44:	3301      	adds	r3, #1
   3ae46:	6083      	str	r3, [r0, #8]
   3ae48:	6903      	ldr	r3, [r0, #16]
   3ae4a:	4431      	add	r1, r6
   3ae4c:	440b      	add	r3, r1
   3ae4e:	6103      	str	r3, [r0, #16]
   3ae50:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
   3ae54:	4413      	add	r3, r2
   3ae56:	6143      	str	r3, [r0, #20]
   3ae58:	2301      	movs	r3, #1
   3ae5a:	4618      	mov	r0, r3
   3ae5c:	bc70      	pop	{r4, r5, r6}
   3ae5e:	4770      	bx	lr
   3ae60:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3ae64:	2c80      	cmp	r4, #128	; 0x80
   3ae66:	bf08      	it	eq
   3ae68:	2104      	moveq	r1, #4
   3ae6a:	e7e9      	b.n	3ae40 <pb_field_iter_next+0x74>
   3ae6c:	2301      	movs	r3, #1
   3ae6e:	e7da      	b.n	3ae26 <pb_field_iter_next+0x5a>

0003ae70 <pb_field_iter_find>:
   3ae70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ae74:	6846      	ldr	r6, [r0, #4]
   3ae76:	f64f 77ff 	movw	r7, #65535	; 0xffff
   3ae7a:	4633      	mov	r3, r6
   3ae7c:	881a      	ldrh	r2, [r3, #0]
   3ae7e:	428a      	cmp	r2, r1
   3ae80:	d104      	bne.n	3ae8c <pb_field_iter_find+0x1c>
   3ae82:	789c      	ldrb	r4, [r3, #2]
   3ae84:	f004 040f 	and.w	r4, r4, #15
   3ae88:	2c08      	cmp	r4, #8
   3ae8a:	d14c      	bne.n	3af26 <pb_field_iter_find+0xb6>
   3ae8c:	b322      	cbz	r2, 3aed8 <pb_field_iter_find+0x68>
   3ae8e:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   3ae92:	f103 0c0f 	add.w	ip, r3, #15
   3ae96:	f8c0 c004 	str.w	ip, [r0, #4]
   3ae9a:	b312      	cbz	r2, 3aee2 <pb_field_iter_find+0x72>
   3ae9c:	789d      	ldrb	r5, [r3, #2]
   3ae9e:	f8b3 4007 	ldrh.w	r4, [r3, #7]
   3aea2:	f8b3 e012 	ldrh.w	lr, [r3, #18]
   3aea6:	f005 0230 	and.w	r2, r5, #48	; 0x30
   3aeaa:	2a30      	cmp	r2, #48	; 0x30
   3aeac:	d126      	bne.n	3aefc <pb_field_iter_find+0x8c>
   3aeae:	7c5a      	ldrb	r2, [r3, #17]
   3aeb0:	f002 0230 	and.w	r2, r2, #48	; 0x30
   3aeb4:	2a30      	cmp	r2, #48	; 0x30
   3aeb6:	d101      	bne.n	3aebc <pb_field_iter_find+0x4c>
   3aeb8:	45be      	cmp	lr, r7
   3aeba:	d037      	beq.n	3af2c <pb_field_iter_find+0xbc>
   3aebc:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
   3aec0:	2d80      	cmp	r5, #128	; 0x80
   3aec2:	bf08      	it	eq
   3aec4:	2404      	moveq	r4, #4
   3aec6:	6902      	ldr	r2, [r0, #16]
   3aec8:	4474      	add	r4, lr
   3aeca:	4422      	add	r2, r4
   3aecc:	6102      	str	r2, [r0, #16]
   3aece:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
   3aed2:	441a      	add	r2, r3
   3aed4:	6142      	str	r2, [r0, #20]
   3aed6:	4663      	mov	r3, ip
   3aed8:	429e      	cmp	r6, r3
   3aeda:	d1cf      	bne.n	3ae7c <pb_field_iter_find+0xc>
   3aedc:	2000      	movs	r0, #0
   3aede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3aee2:	6803      	ldr	r3, [r0, #0]
   3aee4:	e9c0 3201 	strd	r3, r2, [r0, #4]
   3aee8:	68c2      	ldr	r2, [r0, #12]
   3aeea:	f8b3 4003 	ldrh.w	r4, [r3, #3]
   3aeee:	4422      	add	r2, r4
   3aef0:	6102      	str	r2, [r0, #16]
   3aef2:	f9b3 4005 	ldrsh.w	r4, [r3, #5]
   3aef6:	4422      	add	r2, r4
   3aef8:	6142      	str	r2, [r0, #20]
   3aefa:	e7ed      	b.n	3aed8 <pb_field_iter_find+0x68>
   3aefc:	f005 08f0 	and.w	r8, r5, #240	; 0xf0
   3af00:	f1b8 0f20 	cmp.w	r8, #32
   3af04:	d109      	bne.n	3af1a <pb_field_iter_find+0xaa>
   3af06:	f8b3 5009 	ldrh.w	r5, [r3, #9]
   3af0a:	fb05 f404 	mul.w	r4, r5, r4
   3af0e:	2a00      	cmp	r2, #0
   3af10:	d1d9      	bne.n	3aec6 <pb_field_iter_find+0x56>
   3af12:	6885      	ldr	r5, [r0, #8]
   3af14:	3501      	adds	r5, #1
   3af16:	6085      	str	r5, [r0, #8]
   3af18:	e7d5      	b.n	3aec6 <pb_field_iter_find+0x56>
   3af1a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
   3af1e:	2d80      	cmp	r5, #128	; 0x80
   3af20:	bf08      	it	eq
   3af22:	2404      	moveq	r4, #4
   3af24:	e7f3      	b.n	3af0e <pb_field_iter_find+0x9e>
   3af26:	2001      	movs	r0, #1
   3af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3af2c:	4663      	mov	r3, ip
   3af2e:	e7d3      	b.n	3aed8 <pb_field_iter_find+0x68>
   3af30:	6e6e6f63 	.word	0x6e6e6f63
   3af34:	69746365 	.word	0x69746365
   3af38:	6f206e6f 	.word	0x6f206e6f
   3af3c:	656e6570 	.word	0x656e6570
   3af40:	00000a64 	.word	0x00000a64
   3af44:	646e6168 	.word	0x646e6168
   3af48:	3d20656c 	.word	0x3d20656c
   3af4c:	25783020 	.word	0x25783020
   3af50:	00000a78 	.word	0x00000a78
   3af54:	656c6f72 	.word	0x656c6f72
   3af58:	30203d20 	.word	0x30203d20
   3af5c:	0a782578 	.word	0x0a782578
   3af60:	00000000 	.word	0x00000000
   3af64:	72646461 	.word	0x72646461
   3af68:	2042534d 	.word	0x2042534d
   3af6c:	3025203d 	.word	0x3025203d
   3af70:	30257832 	.word	0x30257832
   3af74:	30257832 	.word	0x30257832
   3af78:	30257832 	.word	0x30257832
   3af7c:	30257832 	.word	0x30257832
   3af80:	30257832 	.word	0x30257832
   3af84:	000a7832 	.word	0x000a7832
   3af88:	72646461 	.word	0x72646461
   3af8c:	2042534c 	.word	0x2042534c
   3af90:	3025203d 	.word	0x3025203d
   3af94:	30257832 	.word	0x30257832
   3af98:	30257832 	.word	0x30257832
   3af9c:	30257832 	.word	0x30257832
   3afa0:	30257832 	.word	0x30257832
   3afa4:	30257832 	.word	0x30257832
   3afa8:	000a7832 	.word	0x000a7832
   3afac:	6e6e6f63 	.word	0x6e6e6f63
   3afb0:	65746e49 	.word	0x65746e49
   3afb4:	6c617672 	.word	0x6c617672
   3afb8:	25203d20 	.word	0x25203d20
   3afbc:	20782064 	.word	0x20782064
   3afc0:	35322e31 	.word	0x35322e31
   3afc4:	0a736d20 	.word	0x0a736d20
   3afc8:	00000000 	.word	0x00000000
   3afcc:	6e6e6f63 	.word	0x6e6e6f63
   3afd0:	6574614c 	.word	0x6574614c
   3afd4:	2079636e 	.word	0x2079636e
   3afd8:	6425203d 	.word	0x6425203d
   3afdc:	0000000a 	.word	0x0000000a
   3afe0:	54707573 	.word	0x54707573
   3afe4:	6f656d69 	.word	0x6f656d69
   3afe8:	3d207475 	.word	0x3d207475
   3afec:	20642520 	.word	0x20642520
   3aff0:	000a736d 	.word	0x000a736d
   3aff4:	6e6e6f63 	.word	0x6e6e6f63
   3aff8:	69746365 	.word	0x69746365
   3affc:	75206e6f 	.word	0x75206e6f
   3b000:	74616470 	.word	0x74616470
   3b004:	74732065 	.word	0x74732065
   3b008:	73757461 	.word	0x73757461
   3b00c:	30203d20 	.word	0x30203d20
   3b010:	00782578 	.word	0x00782578
   3b014:	646e6168 	.word	0x646e6168
   3b018:	3d20656c 	.word	0x3d20656c
   3b01c:	25783020 	.word	0x25783020
   3b020:	00000078 	.word	0x00000078
   3b024:	6e6e6f63 	.word	0x6e6e6f63
   3b028:	65746e49 	.word	0x65746e49
   3b02c:	6c617672 	.word	0x6c617672
   3b030:	30203d20 	.word	0x30203d20
   3b034:	00782578 	.word	0x00782578
   3b038:	6e6e6f63 	.word	0x6e6e6f63
   3b03c:	6574614c 	.word	0x6574614c
   3b040:	2079636e 	.word	0x2079636e
   3b044:	7830203d 	.word	0x7830203d
   3b048:	00007825 	.word	0x00007825
   3b04c:	54707573 	.word	0x54707573
   3b050:	6f656d69 	.word	0x6f656d69
   3b054:	3d207475 	.word	0x3d207475
   3b058:	25783020 	.word	0x25783020
   3b05c:	00000078 	.word	0x00000078
   3b060:	656c6f76 	.word	0x656c6f76
   3b064:	6e652073 	.word	0x6e652073
   3b068:	65646f63 	.word	0x65646f63
   3b06c:	6e69202c 	.word	0x6e69202c
   3b070:	20747570 	.word	0x20747570
   3b074:	3a6e656c 	.word	0x3a6e656c
   3b078:	202c6425 	.word	0x202c6425
   3b07c:	706d6f63 	.word	0x706d6f63
   3b080:	73736572 	.word	0x73736572
   3b084:	654c6465 	.word	0x654c6465
   3b088:	64253a6e 	.word	0x64253a6e
   3b08c:	00000000 	.word	0x00000000
   3b090:	4342534d 	.word	0x4342534d
   3b094:	646f6320 	.word	0x646f6320
   3b098:	00000065 	.word	0x00000065
   3b09c:	5355504f 	.word	0x5355504f
   3b0a0:	646f6320 	.word	0x646f6320
   3b0a4:	00006365 	.word	0x00006365
   3b0a8:	20746573 	.word	0x20746573
   3b0ac:	65646f63 	.word	0x65646f63
   3b0b0:	79742063 	.word	0x79742063
   3b0b4:	253a6570 	.word	0x253a6570
   3b0b8:	00000073 	.word	0x00000073
   3b0bc:	4342536d 	.word	0x4342536d
   3b0c0:	00000000 	.word	0x00000000
   3b0c4:	7375704f 	.word	0x7375704f
   3b0c8:	00000000 	.word	0x00000000
   3b0cc:	646e6573 	.word	0x646e6573
   3b0d0:	20732520 	.word	0x20732520
   3b0d4:	6f636e65 	.word	0x6f636e65
   3b0d8:	64206564 	.word	0x64206564
   3b0dc:	2c617461 	.word	0x2c617461
   3b0e0:	746f7420 	.word	0x746f7420
   3b0e4:	6c206c61 	.word	0x6c206c61
   3b0e8:	253a6e65 	.word	0x253a6e65
   3b0ec:	6f202c64 	.word	0x6f202c64
   3b0f0:	65736666 	.word	0x65736666
   3b0f4:	64253a74 	.word	0x64253a74
   3b0f8:	00000000 	.word	0x00000000
   3b0fc:	7375706f 	.word	0x7375706f
   3b100:	636e6520 	.word	0x636e6520
   3b104:	2c65646f 	.word	0x2c65646f
   3b108:	74756f20 	.word	0x74756f20
   3b10c:	5f747570 	.word	0x5f747570
   3b110:	3a6e656c 	.word	0x3a6e656c
   3b114:	00006425 	.word	0x00006425
   3b118:	20666e63 	.word	0x20666e63
   3b11c:	74617473 	.word	0x74617473
   3b120:	3d207375 	.word	0x3d207375
   3b124:	2c642520 	.word	0x2c642520
   3b128:	6c646820 	.word	0x6c646820
   3b12c:	30203d20 	.word	0x30203d20
   3b130:	0a782578 	.word	0x0a782578
   3b134:	00000000 	.word	0x00000000
   3b138:	7375704f 	.word	0x7375704f
   3b13c:	636e6520 	.word	0x636e6520
   3b140:	7265646f 	.word	0x7265646f
   3b144:	696e6920 	.word	0x696e6920
   3b148:	6c616974 	.word	0x6c616974
   3b14c:	74617a69 	.word	0x74617a69
   3b150:	206e6f69 	.word	0x206e6f69
   3b154:	66207369 	.word	0x66207369
   3b158:	73696e69 	.word	0x73696e69
   3b15c:	21646568 	.word	0x21646568
   3b160:	000a0a0d 	.word	0x000a0a0d
   3b164:	74697277 	.word	0x74697277
   3b168:	62632065 	.word	0x62632065
   3b16c:	656c202c 	.word	0x656c202c
   3b170:	64253a6e 	.word	0x64253a6e
   3b174:	6176202c 	.word	0x6176202c
   3b178:	2065756c 	.word	0x2065756c
   3b17c:	25207825 	.word	0x25207825
   3b180:	00000078 	.word	0x00000078
   3b184:	2055544d 	.word	0x2055544d
   3b188:	657a6973 	.word	0x657a6973
   3b18c:	25203d20 	.word	0x25203d20
   3b190:	79622064 	.word	0x79622064
   3b194:	00736574 	.word	0x00736574
   3b198:	203e3e3e 	.word	0x203e3e3e
   3b19c:	65736552 	.word	0x65736552
   3b1a0:	6f632074 	.word	0x6f632074
   3b1a4:	656c706d 	.word	0x656c706d
   3b1a8:	3c206574 	.word	0x3c206574
   3b1ac:	00003c3c 	.word	0x00003c3c
   3b1b0:	203e3e3e 	.word	0x203e3e3e
   3b1b4:	65766441 	.word	0x65766441
   3b1b8:	73697472 	.word	0x73697472
   3b1bc:	20676e69 	.word	0x20676e69
   3b1c0:	72617473 	.word	0x72617473
   3b1c4:	20646574 	.word	0x20646574
   3b1c8:	003c3c3c 	.word	0x003c3c3c
   3b1cc:	203e3e3e 	.word	0x203e3e3e
   3b1d0:	65766441 	.word	0x65766441
   3b1d4:	73697472 	.word	0x73697472
   3b1d8:	20676e69 	.word	0x20676e69
   3b1dc:	706f7473 	.word	0x706f7473
   3b1e0:	20646570 	.word	0x20646570
   3b1e4:	003c3c3c 	.word	0x003c3c3c
   3b1e8:	203e3e3e 	.word	0x203e3e3e
   3b1ec:	6e616353 	.word	0x6e616353
   3b1f0:	676e696e 	.word	0x676e696e
   3b1f4:	61747320 	.word	0x61747320
   3b1f8:	64657472 	.word	0x64657472
   3b1fc:	3c3c3c20 	.word	0x3c3c3c20
   3b200:	00000000 	.word	0x00000000
   3b204:	203e3e3e 	.word	0x203e3e3e
   3b208:	6e616353 	.word	0x6e616353
   3b20c:	676e696e 	.word	0x676e696e
   3b210:	6f747320 	.word	0x6f747320
   3b214:	64657070 	.word	0x64657070
   3b218:	3c3c3c20 	.word	0x3c3c3c20
   3b21c:	00000000 	.word	0x00000000
   3b220:	203e3e3e 	.word	0x203e3e3e
   3b224:	6e616353 	.word	0x6e616353
   3b228:	74616420 	.word	0x74616420
   3b22c:	65722061 	.word	0x65722061
   3b230:	76696563 	.word	0x76696563
   3b234:	66206465 	.word	0x66206465
   3b238:	206d6f72 	.word	0x206d6f72
   3b23c:	72656570 	.word	0x72656570
   3b240:	3c3c3c20 	.word	0x3c3c3c20
   3b244:	00000000 	.word	0x00000000
   3b248:	203e3e3e 	.word	0x203e3e3e
   3b24c:	6e6e6f43 	.word	0x6e6e6f43
   3b250:	69746365 	.word	0x69746365
   3b254:	6f206e6f 	.word	0x6f206e6f
   3b258:	656e6570 	.word	0x656e6570
   3b25c:	3c3c2064 	.word	0x3c3c2064
   3b260:	0000003c 	.word	0x0000003c
   3b264:	203e3e3e 	.word	0x203e3e3e
   3b268:	6e6e6f43 	.word	0x6e6e6f43
   3b26c:	69746365 	.word	0x69746365
   3b270:	63206e6f 	.word	0x63206e6f
   3b274:	65736f6c 	.word	0x65736f6c
   3b278:	3c3c2064 	.word	0x3c3c2064
   3b27c:	0000003c 	.word	0x0000003c
   3b280:	203e3e3e 	.word	0x203e3e3e
   3b284:	72696150 	.word	0x72696150
   3b288:	20676e69 	.word	0x20676e69
   3b28c:	706d6f63 	.word	0x706d6f63
   3b290:	6574656c 	.word	0x6574656c
   3b294:	75732064 	.word	0x75732064
   3b298:	73656363 	.word	0x73656363
   3b29c:	6c756673 	.word	0x6c756673
   3b2a0:	3c20796c 	.word	0x3c20796c
   3b2a4:	00003c3c 	.word	0x00003c3c
   3b2a8:	203e3e3e 	.word	0x203e3e3e
   3b2ac:	72696150 	.word	0x72696150
   3b2b0:	20676e69 	.word	0x20676e69
   3b2b4:	6c696166 	.word	0x6c696166
   3b2b8:	3c206465 	.word	0x3c206465
   3b2bc:	00003c3c 	.word	0x00003c3c
   3b2c0:	203e3e3e 	.word	0x203e3e3e
   3b2c4:	6e6e6f43 	.word	0x6e6e6f43
   3b2c8:	69746365 	.word	0x69746365
   3b2cc:	65206e6f 	.word	0x65206e6f
   3b2d0:	7972636e 	.word	0x7972636e
   3b2d4:	64657470 	.word	0x64657470
   3b2d8:	3c3c3c20 	.word	0x3c3c3c20
   3b2dc:	00000000 	.word	0x00000000
   3b2e0:	203e3e3e 	.word	0x203e3e3e
   3b2e4:	72636e45 	.word	0x72636e45
   3b2e8:	69747079 	.word	0x69747079
   3b2ec:	66206e6f 	.word	0x66206e6f
   3b2f0:	656c6961 	.word	0x656c6961
   3b2f4:	3c3c2064 	.word	0x3c3c2064
   3b2f8:	0000003c 	.word	0x0000003c
   3b2fc:	203e3e3e 	.word	0x203e3e3e
   3b300:	6d6f7250 	.word	0x6d6f7250
   3b304:	75207470 	.word	0x75207470
   3b308:	20726573 	.word	0x20726573
   3b30c:	65206f74 	.word	0x65206f74
   3b310:	7265746e 	.word	0x7265746e
   3b314:	73617020 	.word	0x73617020
   3b318:	79656b73 	.word	0x79656b73
   3b31c:	3c3c3c20 	.word	0x3c3c3c20
   3b320:	00000000 	.word	0x00000000
   3b324:	203e3e3e 	.word	0x203e3e3e
   3b328:	636e6143 	.word	0x636e6143
   3b32c:	61206c65 	.word	0x61206c65
   3b330:	776f6c20 	.word	0x776f6c20
   3b334:	20726f20 	.word	0x20726f20
   3b338:	68676968 	.word	0x68676968
   3b33c:	656c6120 	.word	0x656c6120
   3b340:	3c207472 	.word	0x3c207472
   3b344:	00003c3c 	.word	0x00003c3c
   3b348:	203e3e3e 	.word	0x203e3e3e
   3b34c:	20776f4c 	.word	0x20776f4c
   3b350:	72656c61 	.word	0x72656c61
   3b354:	3c3c2074 	.word	0x3c3c2074
   3b358:	0000003c 	.word	0x0000003c
   3b35c:	203e3e3e 	.word	0x203e3e3e
   3b360:	68676948 	.word	0x68676948
   3b364:	656c6120 	.word	0x656c6120
   3b368:	3c207472 	.word	0x3c207472
   3b36c:	00003c3c 	.word	0x00003c3c
   3b370:	203e3e3e 	.word	0x203e3e3e
   3b374:	73736150 	.word	0x73736150
   3b378:	3a79656b 	.word	0x3a79656b
   3b37c:	20642520 	.word	0x20642520
   3b380:	003c3c3c 	.word	0x003c3c3c
   3b384:	203e3e3e 	.word	0x203e3e3e
   3b388:	666e6f43 	.word	0x666e6f43
   3b38c:	206d7269 	.word	0x206d7269
   3b390:	756c6156 	.word	0x756c6156
   3b394:	25203a65 	.word	0x25203a65
   3b398:	3c3c2064 	.word	0x3c3c2064
   3b39c:	0000003c 	.word	0x0000003c
   3b3a0:	203e3e3e 	.word	0x203e3e3e
   3b3a4:	49535352 	.word	0x49535352
   3b3a8:	6425203a 	.word	0x6425203a
   3b3ac:	6d426420 	.word	0x6d426420
   3b3b0:	003c3c3c 	.word	0x003c3c3c
   3b3b4:	61636f4c 	.word	0x61636f4c
   3b3b8:	6544206c 	.word	0x6544206c
   3b3bc:	65636976 	.word	0x65636976
   3b3c0:	20444220 	.word	0x20444220
   3b3c4:	72646441 	.word	0x72646441
   3b3c8:	3a737365 	.word	0x3a737365
   3b3cc:	00000020 	.word	0x00000020
   3b3d0:	0000000a 	.word	0x0000000a
   3b3d4:	454c4f56 	.word	0x454c4f56
   3b3d8:	00002d53 	.word	0x00002d53
	...
   3b3e8:	20636363 	.word	0x20636363
   3b3ec:	74617473 	.word	0x74617473
   3b3f0:	6e692065 	.word	0x6e692065
   3b3f4:	61762064 	.word	0x61762064
   3b3f8:	3a65756c 	.word	0x3a65756c
   3b3fc:	68206425 	.word	0x68206425
   3b400:	6c646e61 	.word	0x6c646e61
   3b404:	64253a65 	.word	0x64253a65
   3b408:	78646920 	.word	0x78646920
   3b40c:	0a64253a 	.word	0x0a64253a
   3b410:	00000000 	.word	0x00000000
   3b414:	6e6e6f63 	.word	0x6e6e6f63
   3b418:	3a206449 	.word	0x3a206449
   3b41c:	0d642520 	.word	0x0d642520
   3b420:	0000000a 	.word	0x0000000a
   3b424:	74747562 	.word	0x74747562
   3b428:	25206e6f 	.word	0x25206e6f
   3b42c:	72702064 	.word	0x72702064
   3b430:	65737365 	.word	0x65737365
   3b434:	63202c64 	.word	0x63202c64
   3b438:	656e6e6f 	.word	0x656e6e6f
   3b43c:	6f697463 	.word	0x6f697463
   3b440:	706f206e 	.word	0x706f206e
   3b444:	253a6e65 	.word	0x253a6e65
   3b448:	00000064 	.word	0x00000064
   3b44c:	3a6e7462 	.word	0x3a6e7462
   3b450:	00006425 	.word	0x00006425
   3b454:	72617473 	.word	0x72617473
   3b458:	70732074 	.word	0x70732074
   3b45c:	68636565 	.word	0x68636565
   3b460:	74616420 	.word	0x74616420
   3b464:	65732061 	.word	0x65732061
   3b468:	2e2e646e 	.word	0x2e2e646e
   3b46c:	0000002e 	.word	0x0000002e
   3b470:	5f545441 	.word	0x5f545441
   3b474:	5f55544d 	.word	0x5f55544d
   3b478:	41445055 	.word	0x41445055
   3b47c:	495f4554 	.word	0x495f4554
   3b480:	4120444e 	.word	0x4120444e
   3b484:	65477474 	.word	0x65477474
   3b488:	75744d74 	.word	0x75744d74
   3b48c:	202c2928 	.word	0x202c2928
   3b490:	75746572 	.word	0x75746572
   3b494:	3d206e72 	.word	0x3d206e72
   3b498:	20642520 	.word	0x20642520
   3b49c:	67734d70 	.word	0x67734d70
   3b4a0:	74613e2d 	.word	0x74613e2d
   3b4a4:	746d2e74 	.word	0x746d2e74
   3b4a8:	203d2075 	.word	0x203d2075
   3b4ac:	000a6425 	.word	0x000a6425
   3b4b0:	435f4d44 	.word	0x435f4d44
   3b4b4:	5f4e4e4f 	.word	0x5f4e4e4f
   3b4b8:	41544144 	.word	0x41544144
   3b4bc:	4e454c5f 	.word	0x4e454c5f
   3b4c0:	4148435f 	.word	0x4148435f
   3b4c4:	5f45474e 	.word	0x5f45474e
   3b4c8:	3a444e49 	.word	0x3a444e49
   3b4cc:	61747320 	.word	0x61747320
   3b4d0:	20737574 	.word	0x20737574
   3b4d4:	6425203d 	.word	0x6425203d
   3b4d8:	616d202c 	.word	0x616d202c
   3b4dc:	58522078 	.word	0x58522078
   3b4e0:	6e656c20 	.word	0x6e656c20
   3b4e4:	25203d20 	.word	0x25203d20
   3b4e8:	6d202c64 	.word	0x6d202c64
   3b4ec:	54207861 	.word	0x54207861
   3b4f0:	656c2058 	.word	0x656c2058
   3b4f4:	203d206e 	.word	0x203d206e
   3b4f8:	0a206425 	.word	0x0a206425
   3b4fc:	00000000 	.word	0x00000000
   3b500:	435f4d44 	.word	0x435f4d44
   3b504:	5f4e4e4f 	.word	0x5f4e4e4f
   3b508:	534f4c43 	.word	0x534f4c43
   3b50c:	4e495f45 	.word	0x4e495f45
   3b510:	65722044 	.word	0x65722044
   3b514:	6e6f7361 	.word	0x6e6f7361
   3b518:	30203d20 	.word	0x30203d20
   3b51c:	32302578 	.word	0x32302578
   3b520:	00000a78 	.word	0x00000a78
   3b524:	656c6f56 	.word	0x656c6f56
   3b528:	646e6148 	.word	0x646e6148
   3b52c:	4972656c 	.word	0x4972656c
   3b530:	0074696e 	.word	0x0074696e
   3b534:	656c6f76 	.word	0x656c6f76
   3b538:	746f6720 	.word	0x746f6720
   3b53c:	74766520 	.word	0x74766520
   3b540:	25783020 	.word	0x25783020
   3b544:	00000078 	.word	0x00000078
   3b548:	42667357 	.word	0x42667357
   3b54c:	6c416675 	.word	0x6c416675
   3b550:	20636f6c 	.word	0x20636f6c
   3b554:	6c696166 	.word	0x6c696166
   3b558:	6c206465 	.word	0x6c206465
   3b55c:	253a6e65 	.word	0x253a6e65
   3b560:	00000075 	.word	0x00000075
   3b564:	20465357 	.word	0x20465357
   3b568:	20636573 	.word	0x20636573
   3b56c:	20746f6e 	.word	0x20746f6e
   3b570:	69676572 	.word	0x69676572
   3b574:	72657473 	.word	0x72657473
   3b578:	00006465 	.word	0x00006465
   3b57c:	20465357 	.word	0x20465357
   3b580:	20636573 	.word	0x20636573
   3b584:	75657571 	.word	0x75657571
   3b588:	6d652065 	.word	0x6d652065
   3b58c:	21797470 	.word	0x21797470
   3b590:	00000000 	.word	0x00000000
   3b594:	656e6547 	.word	0x656e6547
   3b598:	20636972 	.word	0x20636972
   3b59c:	00000043 	.word	0x00000043
   3b5a0:	65657246 	.word	0x65657246
   3b5a4:	534f5452 	.word	0x534f5452
   3b5a8:	4c4f5620 	.word	0x4c4f5620
   3b5ac:	78452045 	.word	0x78452045
   3b5b0:	6c706d61 	.word	0x6c706d61
   3b5b4:	00000a65 	.word	0x00000a65
   3b5b8:	20465357 	.word	0x20465357
   3b5bc:	656d6954 	.word	0x656d6954
   3b5c0:	00000072 	.word	0x00000072
   3b5c4:	20746f47 	.word	0x20746f47
   3b5c8:	74747542 	.word	0x74747542
   3b5cc:	30206e6f 	.word	0x30206e6f
   3b5d0:	65725020 	.word	0x65725020
   3b5d4:	000a7373 	.word	0x000a7373
   3b5d8:	20746f47 	.word	0x20746f47
   3b5dc:	74747542 	.word	0x74747542
   3b5e0:	31206e6f 	.word	0x31206e6f
   3b5e4:	65725020 	.word	0x65725020
   3b5e8:	000a7373 	.word	0x000a7373
   3b5ec:	20746f47 	.word	0x20746f47
   3b5f0:	74747542 	.word	0x74747542
   3b5f4:	32206e6f 	.word	0x32206e6f
   3b5f8:	65725020 	.word	0x65725020
   3b5fc:	000a7373 	.word	0x000a7373
   3b600:	6f6d654d 	.word	0x6f6d654d
   3b604:	70207972 	.word	0x70207972
   3b608:	206c6f6f 	.word	0x206c6f6f
   3b60c:	74207369 	.word	0x74207369
   3b610:	73206f6f 	.word	0x73206f6f
   3b614:	6c6c616d 	.word	0x6c6c616d
   3b618:	20796220 	.word	0x20796220
   3b61c:	0a0d6425 	.word	0x0a0d6425
   3b620:	00000000 	.word	0x00000000
   3b624:	69646152 	.word	0x69646152
   3b628:	7361546f 	.word	0x7361546f
   3b62c:	73203a6b 	.word	0x73203a6b
   3b630:	70757465 	.word	0x70757465
   3b634:	00000a0d 	.word	0x00000a0d
   3b638:	72617453 	.word	0x72617453
   3b63c:	676e6974 	.word	0x676e6974
   3b640:	63697720 	.word	0x63697720
   3b644:	72746e65 	.word	0x72746e65
   3b648:	74206369 	.word	0x74206369
   3b64c:	65636172 	.word	0x65636172
   3b650:	000a0a3a 	.word	0x000a0a3a
   3b654:	6e6e7552 	.word	0x6e6e7552
   3b658:	20676e69 	.word	0x20676e69
   3b65c:	75746573 	.word	0x75746573
   3b660:	61742070 	.word	0x61742070
   3b664:	2e736b73 	.word	0x2e736b73
   3b668:	0a0d2e2e 	.word	0x0a0d2e2e
   3b66c:	00000000 	.word	0x00000000
   3b670:	69646152 	.word	0x69646152
   3b674:	7361546f 	.word	0x7361546f
   3b678:	0000006b 	.word	0x0000006b
   3b67c:	75746553 	.word	0x75746553
   3b680:	00000070 	.word	0x00000070
   3b684:	58323025 	.word	0x58323025
   3b688:	00000020 	.word	0x00000020
   3b68c:	0000000a 	.word	0x0000000a
   3b690:	00000a0a 	.word	0x00000a0a
   3b694:	2e2f2e2e 	.word	0x2e2f2e2e
   3b698:	2e2e2f2e 	.word	0x2e2e2f2e
   3b69c:	2f2e2e2f 	.word	0x2f2e2e2f
   3b6a0:	742f2e2e 	.word	0x742f2e2e
   3b6a4:	64726968 	.word	0x64726968
   3b6a8:	7261705f 	.word	0x7261705f
   3b6ac:	652f7974 	.word	0x652f7974
   3b6b0:	74636178 	.word	0x74636178
   3b6b4:	772f656c 	.word	0x772f656c
   3b6b8:	6f632d73 	.word	0x6f632d73
   3b6bc:	732f6572 	.word	0x732f6572
   3b6c0:	73772f77 	.word	0x73772f77
   3b6c4:	6d612f66 	.word	0x6d612f66
   3b6c8:	2f716962 	.word	0x2f716962
   3b6cc:	5f667377 	.word	0x5f667377
   3b6d0:	63617274 	.word	0x63617274
   3b6d4:	00632e65 	.word	0x00632e65
   3b6d8:	4f525245 	.word	0x4f525245
   3b6dc:	48435f52 	.word	0x48435f52
   3b6e0:	5f4b4345 	.word	0x5f4b4345
   3b6e4:	44494f56 	.word	0x44494f56
   3b6e8:	5f6d6120 	.word	0x5f6d6120
   3b6ec:	5f6c6168 	.word	0x5f6c6168
   3b6f0:	5f656c62 	.word	0x5f656c62
   3b6f4:	74696e69 	.word	0x74696e69
   3b6f8:	696c6169 	.word	0x696c6169
   3b6fc:	3028657a 	.word	0x3028657a
   3b700:	4226202c 	.word	0x4226202c
   3b704:	0a29454c 	.word	0x0a29454c
   3b708:	00000000 	.word	0x00000000
   3b70c:	4f525245 	.word	0x4f525245
   3b710:	48435f52 	.word	0x48435f52
   3b714:	5f4b4345 	.word	0x5f4b4345
   3b718:	44494f56 	.word	0x44494f56
   3b71c:	5f6d6120 	.word	0x5f6d6120
   3b720:	5f6c6168 	.word	0x5f6c6168
   3b724:	5f656c62 	.word	0x5f656c62
   3b728:	65776f70 	.word	0x65776f70
   3b72c:	6f635f72 	.word	0x6f635f72
   3b730:	6f72746e 	.word	0x6f72746e
   3b734:	4c42286c 	.word	0x4c42286c
   3b738:	41202c45 	.word	0x41202c45
   3b73c:	41485f4d 	.word	0x41485f4d
   3b740:	4c425f4c 	.word	0x4c425f4c
   3b744:	4f505f45 	.word	0x4f505f45
   3b748:	5f524557 	.word	0x5f524557
   3b74c:	49544341 	.word	0x49544341
   3b750:	0a294556 	.word	0x0a294556
   3b754:	00000000 	.word	0x00000000
   3b758:	4f525245 	.word	0x4f525245
   3b75c:	48435f52 	.word	0x48435f52
   3b760:	5f4b4345 	.word	0x5f4b4345
   3b764:	44494f56 	.word	0x44494f56
   3b768:	5f6d6120 	.word	0x5f6d6120
   3b76c:	5f6c6168 	.word	0x5f6c6168
   3b770:	5f656c62 	.word	0x5f656c62
   3b774:	666e6f63 	.word	0x666e6f63
   3b778:	42286769 	.word	0x42286769
   3b77c:	202c454c 	.word	0x202c454c
   3b780:	6c427326 	.word	0x6c427326
   3b784:	6e6f4365 	.word	0x6e6f4365
   3b788:	29676966 	.word	0x29676966
   3b78c:	0000000a 	.word	0x0000000a
   3b790:	4f525245 	.word	0x4f525245
   3b794:	48435f52 	.word	0x48435f52
   3b798:	5f4b4345 	.word	0x5f4b4345
   3b79c:	44494f56 	.word	0x44494f56
   3b7a0:	5f6d6120 	.word	0x5f6d6120
   3b7a4:	5f6c6168 	.word	0x5f6c6168
   3b7a8:	5f656c62 	.word	0x5f656c62
   3b7ac:	65776f70 	.word	0x65776f70
   3b7b0:	6f635f72 	.word	0x6f635f72
   3b7b4:	6f72746e 	.word	0x6f72746e
   3b7b8:	4c42286c 	.word	0x4c42286c
   3b7bc:	41202c45 	.word	0x41202c45
   3b7c0:	41485f4d 	.word	0x41485f4d
   3b7c4:	4c425f4c 	.word	0x4c425f4c
   3b7c8:	4f505f45 	.word	0x4f505f45
   3b7cc:	5f524557 	.word	0x5f524557
   3b7d0:	2946464f 	.word	0x2946464f
   3b7d4:	0000000a 	.word	0x0000000a
   3b7d8:	4f525245 	.word	0x4f525245
   3b7dc:	48435f52 	.word	0x48435f52
   3b7e0:	5f4b4345 	.word	0x5f4b4345
   3b7e4:	44494f56 	.word	0x44494f56
   3b7e8:	5f6d6120 	.word	0x5f6d6120
   3b7ec:	5f6c6168 	.word	0x5f6c6168
   3b7f0:	5f656c62 	.word	0x5f656c62
   3b7f4:	6e696564 	.word	0x6e696564
   3b7f8:	61697469 	.word	0x61697469
   3b7fc:	657a696c 	.word	0x657a696c
   3b800:	454c4228 	.word	0x454c4228
   3b804:	00000a29 	.word	0x00000a29
   3b808:	00000004 	.word	0x00000004
   3b80c:	00000020 	.word	0x00000020
   3b810:	00000020 	.word	0x00000020
   3b814:	00000002 	.word	0x00000002
   3b818:	00000000 	.word	0x00000000
   3b81c:	00000032 	.word	0x00000032
   3b820:	00010101 	.word	0x00010101
   3b824:	4f525245 	.word	0x4f525245
   3b828:	48435f52 	.word	0x48435f52
   3b82c:	5f4b4345 	.word	0x5f4b4345
   3b830:	44494f56 	.word	0x44494f56
   3b834:	49434820 	.word	0x49434820
   3b838:	5652445f 	.word	0x5652445f
   3b83c:	5f58525f 	.word	0x5f58525f
   3b840:	4b434150 	.word	0x4b434150
   3b844:	545f5445 	.word	0x545f5445
   3b848:	4c5f4f4f 	.word	0x4c5f4f4f
   3b84c:	45475241 	.word	0x45475241
   3b850:	0000000a 	.word	0x0000000a
   3b854:	0a0a0a0a 	.word	0x0a0a0a0a
   3b858:	0a0a0a0a 	.word	0x0a0a0a0a
   3b85c:	0a0a0a0a 	.word	0x0a0a0a0a
   3b860:	0a0a0a0a 	.word	0x0a0a0a0a
   3b864:	00000a0a 	.word	0x00000a0a
   3b868:	61766e49 	.word	0x61766e49
   3b86c:	2064696c 	.word	0x2064696c
   3b870:	61204d44 	.word	0x61204d44
   3b874:	72657664 	.word	0x72657664
   3b878:	69736974 	.word	0x69736974
   3b87c:	6d20676e 	.word	0x6d20676e
   3b880:	3b65646f 	.word	0x3b65646f
   3b884:	646f6d20 	.word	0x646f6d20
   3b888:	6f632065 	.word	0x6f632065
   3b88c:	6769666e 	.word	0x6769666e
   3b890:	64657275 	.word	0x64657275
   3b894:	20736120 	.word	0x20736120
   3b898:	65747865 	.word	0x65747865
   3b89c:	6465646e 	.word	0x6465646e
   3b8a0:	00000000 	.word	0x00000000
   3b8a4:	454c4449 	.word	0x454c4449
   3b8a8:	00000000 	.word	0x00000000
   3b8ac:	20726d54 	.word	0x20726d54
   3b8b0:	00637653 	.word	0x00637653

0003b8b4 <attFcnDefault>:
   3b8b4:	0000ce39 0000ce35 0000ce35 0000ce37     9...5...5...7...

0003b8c4 <attWsfChUuid>:
   3b8c4:	2a9d2a9e                                         .*

0003b8c6 <attWmChUuid>:
   3b8c6:	181d2a9d                                         .*

0003b8c8 <attWssSvcUuid>:
   3b8c8:	2a9f181d                                         ..

0003b8ca <attUcpChUuid>:
   3b8ca:	2a9a2a9f                                         .*

0003b8cc <attUiChUuid>:
   3b8cc:	2a992a9a                                         .*

0003b8ce <attDbciChUuid>:
   3b8ce:	2ac92a99                                         .*

0003b8d0 <attRpaoChUuid>:
   3b8d0:	2a5f2ac9                                         .*

0003b8d2 <attPlxcmChUuid>:
   3b8d2:	2a5e2a5f                                         _*

0003b8d4 <attPlxscmChUuid>:
   3b8d4:	2a602a5e                                         ^*

0003b8d6 <attPlxfChUuid>:
   3b8d6:	2a5d2a60                                         `*

0003b8d8 <attSlChUuid>:
   3b8d8:	2a5b2a5d                                         ]*

0003b8da <attCsmChUuid>:
   3b8da:	2a5c2a5b                                         [*

0003b8dc <attCsfChUuid>:
   3b8dc:	2a632a5c                                         \*

0003b8de <attCpmChUuid>:
   3b8de:	2a652a63                                         c*

0003b8e0 <attCpfChUuid>:
   3b8e0:	2a532a65                                         e*

0003b8e2 <attRsmChUuid>:
   3b8e2:	2a542a53                                         S*

0003b8e4 <attRsfChUuid>:
   3b8e4:	2aa62a54                                         T*

0003b8e6 <attCarChUuid>:
   3b8e6:	2a522aa6                                         .*

0003b8e8 <attRacpChUuid>:
   3b8e8:	2a512a52                                         R*

0003b8ea <attGlfChUuid>:
   3b8ea:	2a502a51                                         Q*

0003b8ec <attPnpChUuid>:
   3b8ec:	2a4f2a50                                         P*

0003b8ee <attSiwChUuid>:
   3b8ee:	2a4e2a4f                                         O*

0003b8f0 <attHidPmChUuid>:
   3b8f0:	2a4d2a4e                                         N*

0003b8f2 <attHidRepChUuid>:
   3b8f2:	2a4c2a4d                                         M*

0003b8f4 <attHidcpChUuid>:
   3b8f4:	2a4b2a4c                                         L*

0003b8f6 <attHidRmChUuid>:
   3b8f6:	2a4a2a4b                                         K*

0003b8f8 <attHidiChUuid>:
   3b8f8:	2a322a4a                                         J*

0003b8fa <attHidBkoChUuid>:
   3b8fa:	2a222a32                                         2*

0003b8fc <attHidBkiChUuid>:
   3b8fc:	2a212a22                                         "*

0003b8fe <attHidBmiChUuid>:
   3b8fe:	2a492a21                                         !*

0003b900 <attBpfChUuid>:
   3b900:	2a482a49                                         I*

0003b902 <attSuacChUuid>:
   3b902:	2a472a48                                         H*

0003b904 <attSnacChUuid>:
   3b904:	2a462a47                                         G*

0003b906 <attNaChUuid>:
   3b906:	2a452a46                                         F*

0003b908 <attUasChUuid>:
   3b908:	2a442a45                                         E*

0003b90a <attAncpChUuid>:
   3b90a:	2a432a44                                         D*

0003b90c <attAcChUuid>:
   3b90c:	2a422a43                                         C*

0003b90e <attAcbmChUuid>:
   3b90e:	2a412a42                                         B*

0003b910 <attRsChUuid>:
   3b910:	2a402a41                                         A*

0003b912 <attRcpChUuid>:
   3b912:	2a3f2a40                                         @*

0003b914 <attAsChUuid>:
   3b914:	2a3e2a3f                                         ?*

0003b916 <attNwaChUuid>:
   3b916:	2a3d2a3e                                         >*

0003b918 <attStrChUuid>:
   3b918:	2a3c2a3d                                         =*

0003b91a <attStcChUuid>:
   3b91a:	2a3b2a3c                                         <*

0003b91c <attSrChUuid>:
   3b91c:	2a3a2a3b                                         ;*

0003b91e <attRemChUuid>:
   3b91e:	2a392a3a                                         :*

0003b920 <attHrcpChUuid>:
   3b920:	2a382a39                                         9*

0003b922 <attBslChUuid>:
   3b922:	2a372a38                                         8*

0003b924 <attHrmChUuid>:
   3b924:	2a362a37                                         7*

0003b926 <attIcpChUuid>:
   3b926:	2a352a36                                         6*

0003b928 <attBpmChUuid>:
   3b928:	2a342a35                                         5*

0003b92a <attGlmcChUuid>:
   3b92a:	2a332a34                                         4*

0003b92c <attHbmiChUuid>:
   3b92c:	2a312a33                                         3*

0003b92e <attVidChUuid>:
   3b92e:	2a302a31                                         1*

0003b930 <attP3dChUuid>:
   3b930:	2a2f2a30                                         0*

0003b932 <attP2dChUuid>:
   3b932:	2a2e2a2f                                         /*

0003b934 <attLongChUuid>:
   3b934:	2a2d2a2e                                         .*

0003b936 <attLatChUuid>:
   3b936:	2a2c2a2d                                         -*

0003b938 <attElChUuid>:
   3b938:	2a2b2a2c                                         ,*

0003b93a <attCtChUuid>:
   3b93a:	2a2a2a2b                                         +*

0003b93c <attIeeeChUuid>:
   3b93c:	2a292a2a                                         **

0003b93e <attMfnsChUuid>:
   3b93e:	2a282a29                                         )*

0003b940 <attSrsChUuid>:
   3b940:	2a272a28                                         (*

0003b942 <attHrsChUuid>:
   3b942:	2a262a27                                         '*

0003b944 <attFrsChUuid>:
   3b944:	2a252a26                                         &*

0003b946 <attSnsChUuid>:
   3b946:	2a242a25                                         %*

0003b948 <attMnsChUuid>:
   3b948:	2a232a24                                         $*

0003b94a <attSidChUuid>:
   3b94a:	2a202a23                                         #*

0003b94c <attTfahChUuid>:
   3b94c:	2a1f2a20                                          *

0003b94e <attTcelChUuid>:
   3b94e:	2a1e2a1f                                         .*

0003b950 <attItChUuid>:
   3b950:	2a1d2a1e                                         .*

0003b952 <attTtChUuid>:
   3b952:	2a1c2a1d                                         .*

0003b954 <attTmChUuid>:
   3b954:	2a1b2a1c                                         .*

0003b956 <attBlsChUuid>:
   3b956:	2a1a2a1b                                         .*

0003b958 <attBpsChUuid>:
   3b958:	2a192a1a                                         .*

0003b95a <attBlChUuid>:
   3b95a:	2a182a19                                         .*

0003b95c <attGlmChUuid>:
   3b95c:	2a172a18                                         .*

0003b95e <attTusChUuid>:
   3b95e:	2a162a17                                         .*

0003b960 <attTucpChUuid>:
   3b960:	2a152a16                                         .*

0003b962 <attTbChUuid>:
   3b962:	2a142a15                                         .*

0003b964 <attRtiChUuid>:
   3b964:	2a132a14                                         .*

0003b966 <attTsChUuid>:
   3b966:	2a122a13                                         .*

0003b968 <attTaChUuid>:
   3b968:	2a112a12                                         .*

0003b96a <attTdstChUuid>:
   3b96a:	2a102a11                                         .*

0003b96c <attStzChUuid>:
   3b96c:	2a0f2a10                                         .*

0003b96e <attLtiChUuid>:
   3b96e:	2a0e2a0f                                         .*

0003b970 <attTzChUuid>:
   3b970:	2a0d2a0e                                         .*

0003b972 <attDstoChUuid>:
   3b972:	2a0c2a0d                                         .*

0003b974 <attEt256ChUuid>:
   3b974:	2a0b2a0c                                         .*

0003b976 <attEt100ChUuid>:
   3b976:	2a0a2a0b                                         .*

0003b978 <attDdtChUuid>:
   3b978:	2a092a0a                                         .*

0003b97a <attDwChUuid>:
   3b97a:	2a082a09                                         .*

0003b97c <attDtChUuid>:
   3b97c:	2a072a08                                         .*

0003b97e <attTxpChUuid>:
   3b97e:	2a062a07                                         .*

0003b980 <attAlChUuid>:
   3b980:	2a052a06                                         .*

0003b982 <attScChUuid>:
   3b982:	2a042a05                                         .*

0003b984 <attPpcpChUuid>:
   3b984:	2a032a04                                         .*

0003b986 <attRaChUuid>:
   3b986:	2a022a03                                         .*

0003b988 <attPpfChUuid>:
   3b988:	2a012a02                                         .*

0003b98a <attApChUuid>:
   3b98a:	2a002a01                                         .*

0003b98c <attDnChUuid>:
   3b98c:	29082a00                                         .*

0003b98e <attHidRimUuid>:
   3b98e:	29072908                                         .)

0003b990 <attHidErmUuid>:
   3b990:	29062907                                         .)

0003b992 <attValRangeUuid>:
   3b992:	29052906                                         .)

0003b994 <attAggFmtUuid>:
   3b994:	29042905                                         .)

0003b996 <attChPresFmtUuid>:
   3b996:	29032904                                         .)

0003b998 <attSrvChCfgUuid>:
   3b998:	29022903                                         .)

0003b99a <attCliChCfgUuid>:
   3b99a:	29012902                                         .)

0003b99c <attChUserDescUuid>:
   3b99c:	29002901                                         .)

0003b99e <attChExtUuid>:
   3b99e:	28032900                                         .)

0003b9a0 <attChUuid>:
   3b9a0:	28022803                                         .(

0003b9a2 <attIncUuid>:
   3b9a2:	28012802                                         .(

0003b9a4 <attSecSvcUuid>:
   3b9a4:	28002801                                         .(

0003b9a6 <attPrimSvcUuid>:
   3b9a6:	181c2800                                         .(

0003b9a8 <attUdsSvcUuid>:
   3b9a8:	1822181c                                         ..

0003b9aa <attPlxsSvcUuid>:
   3b9aa:	18131822                                         ".

0003b9ac <attSpsSvcUuid>:
   3b9ac:	18121813                                         ..

0003b9ae <attHidSvcUuid>:
   3b9ae:	18111812                                         ..

0003b9b0 <attAnsSvcUuid>:
   3b9b0:	18101811                                         ..

0003b9b2 <attBpsSvcUuid>:
   3b9b2:	180f1810                                         ..

0003b9b4 <attBasSvcUuid>:
   3b9b4:	180e180f                                         ..

0003b9b6 <attPassSvcUuid>:
   3b9b6:	180d180e                                         ..

0003b9b8 <attHrsSvcUuid>:
   3b9b8:	180c180d                                         ..

0003b9ba <attWdsSvcUuid>:
   3b9ba:	180b180c                                         ..

0003b9bc <attNwaSvcUuid>:
   3b9bc:	180a180b                                         ..

0003b9be <attDisSvcUuid>:
   3b9be:	1809180a                                         ..

0003b9c0 <attHtsSvcUuid>:
   3b9c0:	18081809                                         ..

0003b9c2 <attGlsSvcUuid>:
   3b9c2:	18071808                                         ..

0003b9c4 <attNdcsSvcUuid>:
   3b9c4:	18061807                                         ..

0003b9c6 <attRtusSvcUuid>:
   3b9c6:	18051806                                         ..

0003b9c8 <attCtsSvcUuid>:
   3b9c8:	18041805                                         ..

0003b9ca <attTpsSvcUuid>:
   3b9ca:	18031804                                         ..

0003b9cc <attLlsSvcUuid>:
   3b9cc:	18021803                                         ..

0003b9ce <attIasSvcUuid>:
   3b9ce:	18011802                                         ..

0003b9d0 <attGattSvcUuid>:
   3b9d0:	18001801                                         ..

0003b9d2 <attGapSvcUuid>:
   3b9d2:	00001800                                         ..

0003b9d4 <attcSendReqTbl>:
   3b9d4:	00000000 0000d10b 0000d229 0000d229     ........)...)...
   3b9e4:	0000d229 0000d021 0000d229 0000d021     )...!...)...!...
   3b9f4:	0000d229 0000d021 0000d13d 0000d17b     )...!...=...{...
   3ba04:	0000d021                                !...

0003ba08 <attcFcnIf>:
   3ba08:	0000d0c1 0000ce35 0000d369 0000d2ad     ....5...i.......

0003ba18 <attcProcRspTbl>:
   3ba18:	0000d465 0000d559 0000d491 0000d84d     e...Y.......M...
   3ba28:	0000d491 0000d551 0000d8bf 0000d551     ....Q.......Q...
   3ba38:	0000d491 0000d553 00000000 0000da73     ....S.......s...
   3ba48:	0000d553                                S...

0003ba4c <attsIndFcnIf>:
   3ba4c:	0000ce39 0000ddb5 0000ddcf 0000df75     9...........u...

0003ba5c <attsMinPduLen>:
   3ba5c:	07050300 05050305 05030305 01000002     ................
   3ba6c:	0000000f                                ....

0003ba70 <attsFcnIf>:
   3ba70:	0000e0d7 0000e069 0000e075 0000e165     ....i...u...e...
   3ba80:	00002801                                .(..

0003ba84 <dmAdvAct>:
   3ba84:	0000f761 0000f781 0000f7a1 0000f7c5     a...............
   3ba94:	0000f6c1 0000f895 0000f7e9              ............

0003baa0 <dmAdvFcnIf>:
   3baa0:	0000f721 0000f7ed 0000f6c3              !...........

0003baac <dmConnSpecDefaults>:
   3baac:	00280018 07d00000 00000000              ..(.........

0003bab8 <dmConnFcnIf>:
   3bab8:	0000f949 0000fb81 0000fc19              I...........

0003bac4 <dmConn2FcnIf>:
   3bac4:	00010421 0000fa55 0000fc31              !...U...1...

0003bad0 <dmConnActSetMain>:
   3bad0:	0000f92d 0000f941 0000fcc5 0000fd31     -...A.......1...
   3bae0:	0000fd3f 0000f92f                       ?.../...

0003bae8 <dmConnActSetSlave>:
   3bae8:	00010249 00010267 00010165 0001027d     I...g...e...}...
   3baf8:	00010293 000101c1                       ........

0003bb00 <dmConnStateTbl>:
   3bb00:	00001001 00002002 00000000 00000000     ..... ..........
   3bb10:	00002303 00000000 00010000 00011104     .#..............
   3bb20:	00010001 00010001 02030300 00010300     ................
   3bb30:	00010001 21000002 00020002 00020002     .......!........
   3bb40:	24000002 24002303 00020002 00030002     ...$.#.$........
   3bb50:	00030104 22031203 25031303 00030003     ......."...%....
   3bb60:	05030400 05030003 00040004 00040004     ................
   3bb70:	00040004 04000004 04000104 00040004     ................
   3bb80:	00000004                                ....

0003bb84 <dmDevFcnIf>:
   3bb84:	00010421 000102fd 00010361              !.......a...

0003bb90 <dmHciToIdTbl>:
   3bb90:	03030307 04020303 04040404 05050505     ................
   3bba0:	07070705 06060607 05060606 07040405     ................
   3bbb0:	04070407 04050504 09090904 00000202     ................
   3bbc0:	070b0b0b 00020002 0000000a              ............

0003bbcc <dmFcnDefault>:
   3bbcc:	00010421 00010423 00010423              !...#...#...

0003bbd8 <dmEvtCbackLen>:
   3bbd8:	00040004 000c0004 00040004 0024001c     ..............$.
   3bbe8:	000e000a 00040006 00040006 00220006     ..............".
   3bbf8:	00080010 00240006 00140064 00040006     ......$.d.......
   3bc08:	0006000a 00060006 000c000c 000e0006     ................
   3bc18:	0008000e 000a0006 000a0006 000a0006     ................
   3bc28:	0004000c 00200004 00060006 00060016     ...... .........
   3bc38:	00100010 00440004 00040046              ......D.F...

0003bc44 <dmPrivAct>:
   3bc44:	000105fb 00010575 000105ad 000105d5     ....u...........
   3bc54:	000105ed 0001065d 000105f1              ....].......

0003bc60 <dmPrivFcnIf>:
   3bc60:	00010561 00010671 0001054d              a...q...M...

0003bc6c <dmSecFcnIf>:
   3bc6c:	00010421 0001095d 00010885 d4f6493f     !...].......?I..
   3bc7c:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   3bc8c:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   3bc9c:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   3bcac:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   3bcbc:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   3bccc:	2430ed8f d08e1c74 8bd28915              ..0$t.......

0003bcd8 <dmSecLescFcnIf>:
   3bcd8:	00010421 00010423 00010ad5              !...#.......

0003bce4 <smpPktLenTbl>:
   3bce4:	11070700 0b110211 02110811 00021141     ............A...

0003bcf4 <CSWTCH.23>:
   3bcf4:	0003d1ac 0003d510 0003d1b9 0003d1c8     ................
   3bd04:	0003d1d5 0003d1e6 0003d1ee 0003d201     ................
   3bd14:	0003d211 0003d223 0003d231 0003d23e     ....#...1...>...
   3bd24:	0003d250 0003d261 0003d272 0003d27e     P...a...r...~...
   3bd34:	0003d287 0003d292 0003d29c 0003d2a8     ................
   3bd44:	0003d2b0 0003d2c1 0003d2d3 0003d2e5     ................
   3bd54:	0003d2f2 0003d2fe 0003d30a 0003d318     ................
   3bd64:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

0003bd74 <smpScF5Key>:
   3bd74:	656c7462                                btle

0003bd78 <smpiScSmIf>:
   3bd78:	0003be18 0003bfe0 0003bfcf              ............

0003bd84 <CSWTCH.2>:
   3bd84:	0003d333 0003d512 0003d33a 0003d348     3.......:...H...
   3bd94:	0003d353 0003d35d 0003d36b 0003d37b     S...]...k...{...
   3bda4:	0003d387 0003d396 0003d3a5 0003d3b6     ................
   3bdb4:	0003d3c4 0003d3ce 0003d3d7 0003d3e1     ................
   3bdc4:	0003d3ec 0003d3f8 0003d408 0003d329     ............)...
   3bdd4:	0003d418 0003d427 0003d438 0003d446     ....'...8...F...
   3bde4:	0003d453 0003d460 0003d472 0003d47f     S...`...r.......
   3bdf4:	0003d48c 0003d499 0003d4a4 0003d4b0     ................
   3be04:	0003d4c1 0003d4d2 0003d4dd 0003d4e7     ................
   3be14:	0003d4f2                                ....

0003be18 <smpiScStateTbl>:
   3be18:	0003bfba 0003bfb4 0003bfab 0003bfa5     ................
   3be28:	0003bf9f 0003bf93 0003bf8d 0003bf87     ................
   3be38:	0003bf81 0003bf7b 0003bf75 0003bf69     ....{...u...i...
   3be48:	0003bf63 0003bf5d 0003bf57 0003bf51     c...]...W...Q...
   3be58:	0003bf48 0003bf42 0003bf3c 0003bf36     H...B...<...6...
   3be68:	0003bf30 0003bf2a 0003bf24 0003bf1e     0...*...$.......
   3be78:	0003bf18 0003bf12 0003bf0c 0003bf06     ................
   3be88:	0003bf00 0003befa 0003bef4 0003beee     ................
   3be98:	0003bee8 0003bedf 0003bed0 0003bec1     ................
   3bea8:	0003beac                                ....

0003beac <smpiScStateTblAttempts>:
   3beac:	060b000f 01010a24 01000a0d 07010003     ....$...........
   3bebc:	00000024 15230600                                $....

0003bec1 <smpiScStateTblKeyDist>:
   3bec1:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

0003bed0 <smpiScStateTblEncrypt>:
   3bed0:	09142308 22030200 03001c00 0b000000              .#.....".......

0003bedf <smpiScStateTblStkCalc>:
   3bedf:	0d13220b 00000924 12210b00                       ."..$....

0003bee8 <smpiScStateTblCnfVerCalc2>:
   3bee8:	0012210b 200b0000                                .!....

0003beee <smpiScStateTblCnfVerCalc1>:
   3beee:	0008200b 1f060000                                . ....

0003bef4 <smpiScStateTblPairRand>:
   3bef4:	00071f06 1e060000                                ......

0003befa <smpiScStateTblPairCnf>:
   3befa:	00111e06 1d0b0000                                ......

0003bf00 <smpiScStateTblCnfCalc2>:
   3bf00:	00061d0b 1c0b0000                                ......

0003bf06 <smpiScStateTblCnfCalc1>:
   3bf06:	00051c0b 1b040000                                ......

0003bf0c <smpiScStateTblLegacyPin>:
   3bf0c:	00041b04 22060000                                ......

0003bf12 <smpiScStateTblVerifyDHCheck>:
   3bf12:	00302206 191b0000                                ."0...

0003bf18 <smpiScStateTblDhCalcF6Eb>:
   3bf18:	002f191b 181b0000                                ../...

0003bf1e <smpiScStateTblDhCalcF6Ea>:
   3bf1e:	002e181b 171b0000                                ......

0003bf24 <smpiScStateTblCalcF5LTK>:
   3bf24:	002d171b 161b0000                                ..-...

0003bf2a <smpiScStateTblCalcF5MacKey>:
   3bf2a:	002c161b 151b0000                                ..,...

0003bf30 <smpiScStateTblCalcF5TKey>:
   3bf30:	002b151b 14180000                                ..+...

0003bf36 <smpiScStateTblCalcDHKey>:
   3bf36:	002a1418 13060000                                ..*...

0003bf3c <smpiScStateTblOobWaitRand>:
   3bf3c:	00281306 121b0000                                ..(...

0003bf42 <smpiScStateTblOobSendRand>:
   3bf42:	0027121b 0c190000                                ..'...

0003bf48 <smpiScStateTblPasskeyRepeat>:
   3bf48:	1a210c19 00002913 25101b00                       ..!..)...

0003bf51 <smpiScStateTblPasskeyCheck>:
   3bf51:	0025101b 0f060000                                ..%...

0003bf57 <smpiScStateTblPasskeyRand>:
   3bf57:	00220f06 0e060000                                .."...

0003bf5d <smpiScStateTblPasskeyCnf>:
   3bf5d:	00240e06 0d1b0000                                ..$...

0003bf63 <smpiScStateTblPasskeyCalc>:
   3bf63:	00230d1b 0b060000                                ..#...

0003bf69 <smprScStateTblPasskeyKeypress>:
   3bf69:	161f0b06 0c04200b 00000021              ..... ..!...

0003bf75 <smpiScStateTblJwNcWaitUser>:
   3bf75:	00291315 0a1b0000                                ..)...

0003bf7b <smpiScStateTblJwNcCheck2>:
   3bf7b:	001d0a1b 091b0000                                ......

0003bf81 <smpiScStateTblJwNcCheck1>:
   3bf81:	001c091b 08060000                                ......

0003bf87 <smpiScStateTblJwNcRand>:
   3bf87:	001b0806 07060000                                ......

0003bf8d <smpiScStateTblJwNcWaitCnf>:
   3bf8d:	001a0706 06120000                                ......

0003bf93 <smpiScStateTblAuthSelect>:
   3bf93:	13190612 11141e0b 00000026              ........&...

0003bf9f <smpiScStateTblPubKey>:
   3bf9f:	00180506 04040000                                ......

0003bfa5 <smpiScStateTblLescPin>:
   3bfa5:	00170404 03100000                                ......

0003bfab <smpiScStateTblModeSelect>:
   3bfab:	11000310 0000001a 10020600                       .........

0003bfb4 <smpiScStateTblPairRsp>:
   3bfb4:	00100206 01010000                                ......

0003bfba <smpiScStateTblIdle>:
   3bfba:	0a0d0101 00030100 0f00060e 0f000007     ................
   3bfca:	00000000 02000a00                                .....

0003bfcf <smpiScStateTblCommon>:
   3bfcf:	0702000a 00030200 02000f03 00000000     ................
	...

0003bfe0 <smpiScActionTbl>:
   3bfe0:	000122cd 00011ccb 00011cdd 00011cf3     ."..............
   3bff0:	0001238f 000123b1 000123b9 00012403     .#...#...#...$..
   3c000:	00012427 00012661 00012685 0001268d     '$..a&...&...&..
   3c010:	000126af 00012881 000128f1 00012905     .&...(...(...)..
   3c020:	0001292f 00012995 000129eb 00012a4d     /)...)...)..M*..
   3c030:	00012a91 00012b15 00012b43 00012b6d     .*...+..C+..m+..
   3c040:	00012b69 00012b77 00012bad 00012bd9     i+..w+...+...+..
   3c050:	00012bfb 00011e4b 00011d6d 00011e8f     .+..K...m.......
   3c060:	00011ec5 00012c37 00012cb1 00012cf1     ....7,...,...,..
   3c070:	00012cf7 00012cfb 00012d4b 00012dad     .,...,..K-...-..
   3c080:	00012e03 00011f05 00011f79 00011fd9     ........y.......
   3c090:	00012049 000120b9 00012127 00012e25     I ... ..'!..%...
   3c0a0:	00012e4f                                O...

0003c0a4 <smprScSmIf>:
   3c0a4:	0003c144 0003c31c 0003c30a              D...........

0003c0b0 <CSWTCH.2>:
   3c0b0:	0003d507 0003d50e 0003d51d 0003d52b     ............+...
   3c0c0:	0003d4fd 0003d535 0003d543 0003d550     ....5...C...P...
   3c0d0:	0003d561 0003d570 0003d581 0003d4fd     a...p...........
   3c0e0:	0003d58f 0003d59d 0003d5a7 0003d5b1     ................
   3c0f0:	0003d5bc 0003d5c8 0003d5d8 0003d5e8     ................
   3c100:	0003d4fd 0003d5f8 0003d607 0003d618     ................
   3c110:	0003d626 0003d633 0003d640 0003d64d     &...3...@...M...
   3c120:	0003d65a 0003d667 0003d674 0003d680     Z...g...t.......
   3c130:	0003d691 0003d6a2 0003d6ad 0003d6b7     ................
   3c140:	0003d6c2                                ....

0003c144 <smprScStateTbl>:
   3c144:	0003c2ef 0003c2e9 0003c2e0 0003c2d4     ................
   3c154:	0003c2da 0003c2c8 0003c2c2 0003c2bc     ................
   3c164:	0003c2b6 0003c2b0 0003c2a1 0003c29b     ................
   3c174:	0003c295 0003c28f 0003c289 0003c283     ................
   3c184:	0003c27a 0003c26e 0003c274 0003c268     z...n...t...h...
   3c194:	0003c262 0003c25c 0003c256 0003c250     b...\...V...P...
   3c1a4:	0003c24a 0003c244 0003c23b 0003c232     J...D...;...2...
   3c1b4:	0003c22c 0003c226 0003c220 0003c21a     ,...&... .......
   3c1c4:	0003c214 0003c20b 0003c1fc 0003c1ed     ................
   3c1d4:	0003c1d8                                ....

0003c1d8 <smprScStateTblAttempts>:
   3c1d8:	060e000f 00050f24 01000a10 07010003     ....$...........
   3c1e8:	00000024 33230600                                $....

0003c1ed <smprScStateTblKeyDist>:
   3c1ed:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

0003c1fc <smprScStateTblEncrypt>:
   3c1fc:	09322308 22030200 03001c00 0b000000              .#2....".......

0003c20b <smprScStateTblStkCalc>:
   3c20b:	0d31220b 00000c24 30210b00                       ."1.$....

0003c214 <smprStateTblCnfVerCalc2>:
   3c214:	0030210b 200b0000                                .!0...

0003c21a <smprStateTblCnfVerCalc1>:
   3c21a:	000b200b 1f060000                                . ....

0003c220 <smprStateTblPairRand>:
   3c220:	000a1f06 1e0b0000                                ......

0003c226 <smprStateTblCnfCalc2>:
   3c226:	00091e0b 1d0b0000                                ......

0003c22c <smprStateTblCnfCalc1>:
   3c22c:	00081d0b 1c040000                                ......

0003c232 <smprStateTblPinPair2>:
   3c232:	06071c04 00002f1c 051b0400                       ...../...

0003c23b <smprStateTblPinPair1>:
   3c23b:	06051b04 0000151b 2e221b00                       .........

0003c244 <smprScStateTblDhCalcF6Eb>:
   3c244:	002e221b 191b0000                                ."....

0003c24a <smprScStateTblDhCalcF6Ea>:
   3c24a:	002d191b 181b0000                                ..-...

0003c250 <smprScStateTblCalcF5LTK>:
   3c250:	002c181b 171b0000                                ..,...

0003c256 <smprScStateTblCalcF5MacKey>:
   3c256:	002b171b 161b0000                                ..+...

0003c25c <smprScStateTblCalcF5TKey>:
   3c25c:	002a161b 15180000                                ..*...

0003c262 <smprScStateTblCalcDHKey>:
   3c262:	00291518 14060000                                ..)...

0003c268 <smprScStateTblWaitDhCheck>:
   3c268:	00281406 131b0000                                ..(...

0003c26e <smprScStateTblOobSendRand>:
   3c26e:	0026131b 11060000                                ..&...

0003c274 <smprScStateTblOobWaitRand>:
   3c274:	00251106 0c190000                                ..%...

0003c27a <smprScStateTblPasskeyRepeat>:
   3c27a:	1a000c19 00002713 23101b00                       .....'...

0003c283 <smprScStateTblPasskeyCheck>:
   3c283:	0023101b 0f060000                                ..#...

0003c289 <smprScStateTblPasskeyRand>:
   3c289:	00220f06 0e1b0000                                .."...

0003c28f <smprScStateTblPasskeyCalc>:
   3c28f:	00210e1b 0d060000                                ..!...

0003c295 <smprScStateTblPasskeyWaitCnf>:
   3c295:	001e0d06 0d040000                                ......

0003c29b <smprScStateTblPassWaitAuthRsp>:
   3c29b:	001f0d04 0a060000                                ......

0003c2a1 <smprScStateTblPassKeyKeypress>:
   3c2a1:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

0003c2b0 <smprScStateTblJwNcWaitUser>:
   3c2b0:	00271315 091b0000                                ..'...

0003c2b6 <smprScStateTblJwNcCalcG2>:
   3c2b6:	0019091b 08060000                                ......

0003c2bc <smprScStateTblJwNcWaitRand>:
   3c2bc:	00180806 071b0000                                ......

0003c2c2 <smprScStateTblJwNcSetup>:
   3c2c2:	0017071b 06120000                                ......

0003c2c8 <smprScStateTblAuthSelect>:
   3c2c8:	13160612 12141a0a 00000024              ........$...

0003c2d4 <smprScStateTblPubKey>:
   3c2d4:	00040506 03040000                                ......

0003c2da <smprScStateTblLescPin>:
   3c2da:	00060304 04100000                                ......

0003c2e0 <smprScStateTblModeSelect>:
   3c2e0:	11000410 0000001a 14020200                       .........

0003c2e9 <smprScStateTblApiPairRsp>:
   3c2e9:	00140202 00050000                                ......

0003c2ef <smprScStateTblIdle>:
   3c2ef:	0a100005 00080100 12000912 07130106     ................
   3c2ff:	00031100 00000f01 0a000000                       ...........

0003c30a <smprScStateTblCommon>:
   3c30a:	0702000a 00030200 02000f03 00000000     ................
	...

0003c31c <smprScActionTbl>:
   3c31c:	000122cd 00011ccb 00011cdd 00011cf3     ."..............
   3c32c:	00013219 00012367 000131c9 0001238f     .2..g#...1...#..
   3c33c:	000123b1 000123b9 00012403 00012427     .#...#...$..'$..
   3c34c:	00012661 000126af 0001268d 00012685     a&...&...&...&..
   3c35c:	00012eb5 00012edf 00012eeb 00012ef3     ................
   3c36c:	00012f65 00012ff5 0001322f 00013271     e/.../../2..q2..
   3c37c:	00013277 00011e4b 00011d6d 00011e8f     w2..K...m.......
   3c38c:	00011ec5 00013297 000132e9 000132ff     .....2...2...2..
   3c39c:	000132a7 00013315 00013319 00013355     .2...3...3..U3..
   3c3ac:	000133bf 000133c7 00013435 0001348d     .3...3..54...4..
   3c3bc:	000134a5 00011f79 00011fd9 00012049     .4..y.......I ..
   3c3cc:	000120b9 00012127 000134c7 00013017     . ..'!...4...0..
   3c3dc:	00013039 00013095 0001315d 0001319f     90...0..]1...1..
   3c3ec:	000130f5                                .0..

0003c3f0 <smprSmIf>:
   3c3f0:	0003c3fc 0003c4cc 0003c4ba              ............

0003c3fc <smprStateTbl>:
   3c3fc:	0003c49f 0003c499 0003c490 0003c487     ................
   3c40c:	0003c481 0003c47b 0003c475 0003c46f     ....{...u...o...
   3c41c:	0003c469 0003c460 0003c454 0003c445     i...`...T...E...
   3c42c:	0003c430                                0...

0003c430 <smprStateTblAttempts>:
   3c430:	060c000f 00050b0c 01000a0e 07010003     ................
   3c440:	0000000c 180b0c00                                .....

0003c445 <smprStateTblKeyDist>:
   3c445:	06180b0c 000e190b 000b030d 08000000              ...............

0003c454 <smprStateTblEncrypt>:
   3c454:	09170b08 0a030200 00000000              ............

0003c460 <smprStateTblStkCalc>:
   3c460:	0d160a0b 00000a0c 15090b00                       .........

0003c469 <smprStateTblCnfVerCalc2>:
   3c469:	0015090b 080b0000                                ......

0003c46f <smprStateTblCnfVerCalc1>:
   3c46f:	0009080b 07060000                                ......

0003c475 <smprStateTblPairRand>:
   3c475:	00080706 060b0000                                ......

0003c47b <smprStateTblCnfCalc2>:
   3c47b:	0007060b 050b0000                                ......

0003c481 <smprStateTblCnfCalc1>:
   3c481:	0006050b 04040000                                ......

0003c487 <smprStateTblPinPair2>:
   3c487:	06050404 00001404 04030400                       .........

0003c490 <smprStateTblPinPair1>:
   3c490:	06040304 00001303 12020200                       .........

0003c499 <smprStateTblApiPairRsp>:
   3c499:	00120202 00050000                                ......

0003c49f <smprStateTblIdle>:
   3c49f:	0a0e0005 00080100 10000910 07110106     ................
   3c4af:	00030f00 00000f01 0a000000                       ...........

0003c4ba <smprStateTblCommon>:
   3c4ba:	0702000a 00030200 02000f03 00000000     ................
	...

0003c4cc <smprActionTbl>:
   3c4cc:	000122cd 00012301 00012327 0001234f     ."...#..'#..O#..
   3c4dc:	00012367 0001238f 000123b1 000123b9     g#...#...#...#..
   3c4ec:	00012403 00012427 00012661 00012685     .$..'$..a&...&..
   3c4fc:	0001268d 000126af 00012eb5 00012edf     .&...&..........
   3c50c:	00012eeb 00012ef3 00012f65 00012ff5     ........e/.../..
   3c51c:	00013017 00013039 00013095 0001315d     .0..90...0..]1..
   3c52c:	000130f5 0001319f                       .0...1..

0003c534 <npio2_hw>:
   3c534:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   3c544:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   3c554:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   3c564:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   3c574:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   3c584:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   3c594:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   3c5a4:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0003c5b4 <two_over_pi>:
   3c5b4:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   3c5c4:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   3c5d4:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   3c5e4:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   3c5f4:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   3c604:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   3c614:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   3c624:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   3c634:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   3c644:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   3c654:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   3c664:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   3c674:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   3c684:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   3c694:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   3c6a4:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   3c6b4:	0060e27b 00c08c6b 00000000              {.`.k.......

0003c6c0 <init_jk>:
   3c6c0:	00000002 00000003 00000004 00000006     ................

0003c6d0 <PIo2>:
   3c6d0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   3c6e0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   3c6f0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   3c700:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0003c710 <hciEventMask>:
   3c710:	02008890 20008000                       ....... 

0003c718 <hciLeEventMask>:
   3c718:	000fffff 00000000                       ........

0003c720 <hciEventMaskPage2>:
   3c720:	00800000 00000000                       ........

0003c728 <hciEvtParseFcnTbl>:
   3c728:	00000000 00017005 00017109 00017215     .....p...q...r..
   3c738:	00017277 0001732d 00000000 0001735b     wr..-s......[s..
   3c748:	000173bf 0001741f 00017473 00017515     .s...t..st...u..
   3c758:	00017575 000175cb 00017621 00017677     uu...u..!v..wv..
   3c768:	000176d9 0001774b 00017785 000177dd     .v..Kw...w...w..
   3c778:	00017801 00017897 000178c5 000178f3     .x...x...x...x..
   3c788:	00017921 0001795d 00017999 00017827     !y..]y...y..'x..
   3c798:	0001785f 000179c7 00017a1d 00017a73     _x...y...z..sz..
   3c7a8:	00017ae1 00017b0f 00017b65 00017c13     .z...{..e{...|..
   3c7b8:	00017cd5 00017d97 00017dcf 00017e07     .|...}...}...~..
   3c7c8:	00017e5d 00017e9f 00017f0d 00017f3b     ]~...~......;...
   3c7d8:	00000000 00018249 00018263 000182d1     ....I...c.......
   3c7e8:	00018311 00000000 000184b7 00000000     ................
   3c7f8:	00018491 00018491 00018491 00018491     ................
   3c808:	00018491                                ....

0003c80c <hciEvtCbackLen>:
   3c80c:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   3c81c:	44460610 06060606 16060c0c 0a08080e     ..FD............
   3c82c:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   3c83c:	04061016 04040404 00000004              ............

0003c848 <svcRxUuid>:
   3c848:	ddf83076 ac61a390 300543a7 f04eb177     v0....a..C.0w.N.

0003c858 <svcTxUuid>:
   3c858:	1f82420b 8a2f7264 18794bb4 2beea05b     .B..dr/..Ky.[..+

0003c868 <amvoleSvc>:
   3c868:	5f9b34fb 80000080 00001000 0000fe03     .4._............

0003c878 <amvoleLenSvc>:
   3c878:	00000010                                ....

0003c87c <amvoleRxCh>:
   3c87c:	76080208 90ddf830 a7ac61a3 77300543     ...v0....a..C.0w
   3c88c:	00f04eb1                                .N..

0003c890 <amvoleLenRxCh>:
   3c890:	00000013                                ....

0003c894 <amvoleTxCh>:
   3c894:	0b080412 641f8242 b48a2f72 5b18794b     ....B..dr/..Ky.[
   3c8a4:	002beea0                                ..+.

0003c8a8 <amvoleLenTxCh>:
   3c8a8:	00000013                                ....

0003c8ac <amvoleRx>:
	...

0003c8ae <amvoleLenRx>:
   3c8ae:	00000001                                         ..

0003c8b0 <amvoleTx>:
	...

0003c8b2 <amvoleLenTx>:
   3c8b2:	00020001                                         ..

0003c8b4 <amvoleLenTxChCcc>:
   3c8b4:	00000002                                ....

0003c8b8 <amvoleList>:
   3c8b8:	0003b9a6 0003c868 0003c878 01000010     ....h...x.......
   3c8c8:	0003b9a0 0003c87c 0003c890 01000013     ....|...........
   3c8d8:	0003c848 0003c8ac 0003c8ae 100b0200     H...............
   3c8e8:	0003b9a0 0003c894 0003c8a8 01000013     ................
   3c8f8:	0003c858 0003c8b0 0003c8b2 01010001     X...............
   3c908:	0003b99a 100196f4 0003c8b4 11200002     .............. .

0003c918 <amvoleAdvCfg>:
   3c918:	0000ea60 03200000 00000320              `..... . ...

0003c924 <amvoleSlaveCfg>:
   3c924:	00000001                                ....

0003c928 <amvoleSecCfg>:
   3c928:	00010009 00000000                       ........

0003c930 <amvoleUpdateCfg>:
   3c930:	000003e8 000c0006 01900000 00000005     ................

0003c940 <amvoleSmpCfg>:
   3c940:	07030bb8 00000310                       ........

0003c948 <amvoleAdvDataDiscDefault>:
   3c948:	02060102 0711000a 5f9b34fb 80000080     .........4._....
   3c958:	00001000 0000fe03                       ........

0003c960 <amvoleScanDataDiscDefault>:
   3c960:	6f560905 0000454c                       ..VoLE..

0003c968 <amvoleCccSet>:
   3c968:	00020013 08050000 00000001 00000000     ................
	...

0003c980 <analysis_consts_fixed4_simd_even>:
   3c980:	01130000 00ea002e 014d0106 ff5c0000     ..........M...\.
   3c990:	073e030e 0ac306d5 020d19f4 f39a0000     ..>.............
   3c9a0:	525f25f3 5e34412d 5e34bed3 961a0000     .%_R-A4^..4^....
   3c9b0:	073eda0d 020de60c 0ac3f92b 0c600000     ..>.....+.....`.
   3c9c0:	0113fcf2 014dfefa 00eaffd2 ff330000     ......M.......3.
   3c9d0:	5a9252ca 2584ad36 da7cad36 a56e52ca     .R.Z6..%6.|..Rn.
   3c9e0:	b3af2584 b3afa56e b3af5a92 b3afda7c     .%..n....Z..|...

0003c9f0 <analysis_consts_fixed4_simd_odd>:
   3c9f0:	002e00ea 0000ff5c 030e0113 0106014d     ....\.......M...
   3ca00:	06d50ac3 0000f39a 25f3073e 19f4020d     ........>..%....
   3ca10:	412d5e34 0000961a da0d525f bed35e34     4^-A...._R..4^..
   3ca20:	e60c020d 00000c60 fcf2073e f92b0ac3     ....`...>.....+.
   3ca30:	fefa014d 0000ff33 00000113 ffd200ea     M...3...........
   3ca40:	b3af5a92 b3af2584 b3afda7c b3afa56e     .Z...%..|...n...
   3ca50:	258452ca a56ead36 5a92ad36 da7c52ca     .R.%6.n.6..Z.R|.

0003ca60 <analysis_consts_fixed8_simd_even>:
   3ca60:	01700000 011c0019 010f003f 00ed0073     ..p.....?...s...
   3ca70:	0000ff77 022c014f 012f016e 00250150     w...O.,.n./.P.%.
   3ca80:	093e040b 098404fd 0ba20780 0ce90a59     ..>.........Y...
   3ca90:	0000f67b 210c0581 1c060219 1532fc02     {......!......2.
   3caa0:	68fc3094 5a55338f 64f345fb 6c2f5a45     .0.h.3UZ.E.dEZ/l
   3cab0:	0000afeb cc715a55 ba0564f3 a5bb6c2f     ....UZq..d../l..
   3cac0:	093ecf6c 0581def4 0219e3fa fc02eace     l.>.............
   3cad0:	00000983 fb030984 f8800ba2 f5a70ce9     ................
   3cae0:	0170fbf5 014ffdd4 016efed1 0150ffdb     ..p...O...n...P.
   3caf0:	0000ff6a ffe7011c ffc1010f ff8d00ed     j...............
   3cb00:	2bda206f f5b6df91 cc46df91 e2b3206f     o .+......F.o ..
   3cb10:	1d4d206f 33badf91 0a4adf91 d426206f     o M....3..J.o &.
   3cb20:	27972a36 2190117c 166dee84 07e0d5ca     6*.'|..!..m.....
   3cb30:	f820d5ca e993ee84 de70117c d8692a36     .. .....|.p.6*i.
   3cb40:	1d4dcd90 cc46cd90 0a4acd90 2bdacd90     ..M...F...J....+
   3cb50:	d426cd90 f5b6cd90 33bacd90 e2b3cd90     ..&........3....
   3cb60:	07e0117c e993d5ca 21902a36 d869ee84     |.......6*.!..i.
   3cb70:	2797ee84 de702a36 166dd5ca f820117c     ...'6*p...m.|. .

0003cb80 <analysis_consts_fixed8_simd_odd>:
   3cb80:	ff770000 011c0019 010f003f 00ed0073     ..w.....?...s...
   3cb90:	040b0170 022c014f 012f016e 00250150     p...O.,.n./.P.%.
   3cba0:	f67b0000 098404fd 0ba20780 0ce90a59     ..{.........Y...
   3cbb0:	3094093e 210c0581 1c060219 1532fc02     >..0...!......2.
   3cbc0:	afeb0000 5a55338f 64f345fb 6c2f5a45     .....3UZ.E.dEZ/l
   3cbd0:	cf6c68fc cc715a55 ba0564f3 a5bb6c2f     .hl.UZq..d../l..
   3cbe0:	09830000 0581def4 0219e3fa fc02eace     ................
   3cbf0:	fbf5093e fb030984 f8800ba2 f5a70ce9     >...............
   3cc00:	ff6a0000 014ffdd4 016efed1 0150ffdb     ..j...O...n...P.
   3cc10:	00000170 ffe7011c ffc1010f ff8d00ed     p...............
   3cc20:	2bdacd90 f5b6cd90 cc46cd90 e2b3cd90     ...+......F.....
   3cc30:	1d4dcd90 33bacd90 0a4acd90 d426cd90     ..M....3..J...&.
   3cc40:	27972a36 2190117c 166dee84 07e0d5ca     6*.'|..!..m.....
   3cc50:	f820d5ca e993ee84 de70117c d8692a36     .. .....|.p.6*i.
   3cc60:	1d4d206f cc46df91 0a4adf91 2bda206f     o M...F...J.o .+
   3cc70:	d426206f f5b6df91 33badf91 e2b3206f     o &........3o ..
   3cc80:	07e0117c e993d5ca 21902a36 d869ee84     |.......6*.!..i.
   3cc90:	2797ee84 de702a36 166dd5ca f820117c     ...'6*p...m.|. .

0003cca0 <sbc_offset4>:
   3cca0:	ffffffff 00000000 00000000 00000000     ................
   3ccb0:	fffffffe 00000000 00000000 00000001     ................
   3ccc0:	fffffffe 00000000 00000000 00000001     ................
   3ccd0:	fffffffe 00000000 00000000 00000001     ................

0003cce0 <sbc_offset8>:
   3cce0:	fffffffe 00000000 00000000 00000000     ................
	...
   3ccfc:	00000001 fffffffd 00000000 00000000     ................
	...
   3cd18:	00000001 00000002 fffffffc 00000000     ................
	...
   3cd38:	00000001 00000002 fffffffc 00000000     ................
	...
   3cd58:	00000001 00000002                       ........

0003cd60 <crc_table>:
   3cd60:	273a1d00 534e6974 cfd2f5e8 bba6819c     ..:'tiNS........
   3cd70:	eaf7d0cd 9e83a4b9 021f3825 766b4c51     ........%8..QLkv
   3cd80:	a0bd9a87 d4c9eef3 4855726f 3c21061b     ........orUH..!<
   3cd90:	6d70574a 1904233e 8598bfa2 f1eccbd6     JWpm>#..........
   3cda0:	34290e13 405d7a67 dcc1e6fb a8b5928f     ..)4gz]@........
   3cdb0:	f9e4c3de 8d90b7aa 110c2b36 65785f42     ........6+..B_xe
   3cdc0:	b3ae8994 c7dafde0 5b46617c 2f321508     ........|aF[..2/
   3cdd0:	7e634459 0a17302d 968bacb1 e2ffd8c5     YDc~-0..........
   3cde0:	011c3b26 75684f52 e9f4d3ce 9d80a7ba     &;..ROhu........
   3cdf0:	ccd1f6eb b8a5829f 24391e03 504d6a77     ..........9$wjMP
   3ce00:	869bbca1 f2efc8d5 6e735449 1a07203d     ........ITsn= ..
   3ce10:	4b56716c 3f220518 a3be9984 d7caedf0     lqVK.."?........
   3ce20:	120f2835 667b5c41 fae7c0dd 8e93b4a9     5(..A\{f........
   3ce30:	dfc2e5f8 abb6918c 372a0d10 435e7964     ..........*7dy^C
   3ce40:	9588afb2 e1fcdbc6 7d60475a 0914332e     ........ZG`}.3..
   3ce50:	5845627f 2c31160b b0ad8a97 c4d9fee3     .bEX..1,........

0003ce60 <hex.5448>:
   3ce60:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   3ce70:	00000000                                ....

0003ce74 <calc128Zeros>:
	...

0003ce84 <attCfg>:
   3ce84:	0000000f 041e01e0                       ........

0003ce8c <smpCfg>:
   3ce8c:	07030bb8 00000310                       ........

0003ce94 <appReqActCfg>:
   3ce94:	00000000                                ....

0003ce98 <gapValSvc>:
   3ce98:	00021800                                         ..

0003ce9a <gapLenSvc>:
   3ce9a:	05020002                                         ..

0003ce9c <gapValApCh>:
   3ce9c:	01000502 0005002a                                ....*.

0003cea2 <gapLenApCh>:
   3cea2:	00020005                                         ..

0003cea4 <gapLenAp>:
   3cea4:	00000002                                ....

0003cea8 <gapValCarCh>:
   3cea8:	a6000702 0005002a                                ....*.

0003ceae <gapLenCarCh>:
   3ceae:	00010005                                         ..

0003ceb0 <gapLenCar>:
   3ceb0:	00000001                                ....

0003ceb4 <gapValRpaoCh>:
   3ceb4:	c9000902 0005002a                                ....*.

0003ceba <gapLenRpaoCh>:
   3ceba:	00010005                                         ..

0003cebc <gapLenRpao>:
   3cebc:	00000001                                ....

0003cec0 <gapList>:
   3cec0:	0003b9a6 0003ce98 0003ce9a 01000002     ................
   3ced0:	0003b9a0 0003ce9c 0003cea2 01000005     ................
   3cee0:	0003b98a 1001be74 0003cea4 01000002     ....t...........
   3cef0:	0003b9a0 0003cea8 0003ceae 01000005     ................
   3cf00:	0003b8e6 1001be78 0003ceb0 01000001     ....x...........
   3cf10:	0003b9a0 0003ceb4 0003ceba 01000005     ................
   3cf20:	0003b8d0 1001be7c 0003cebc 01000001     ....|...........

0003cf30 <gattValSvc>:
   3cf30:	00021801                                         ..

0003cf32 <gattLenSvc>:
   3cf32:	12200002                                         ..

0003cf34 <gattValScCh>:
   3cf34:	05001220 0005002a                                 ...*.

0003cf3a <gattLenScCh>:
   3cf3a:	00010005                                         ..

0003cf3c <gattValSc>:
   3cf3c:	ffff0001                                ....

0003cf40 <gattLenSc>:
   3cf40:	00020004                                         ..

0003cf42 <gattLenScChCcc>:
   3cf42:	b9a60002                                         ..

0003cf44 <gattList>:
   3cf44:	0003b9a6 0003cf30 0003cf32 01000002     ....0...2.......
   3cf54:	0003b9a0 0003cf34 0003cf3a 01000005     ....4...:.......
   3cf64:	0003b982 0003cf3c 0003cf40 00000004     ....<...@.......
   3cf74:	0003b99a 1001be80 0003cf42 11200002     ........B..... .

0003cf84 <disValSvc>:
   3cf84:	0002180a                                         ..

0003cf86 <disLenSvc>:
   3cf86:	32020002                                         ..

0003cf88 <disValMfrCh>:
   3cf88:	29003202 0005002a                                .2.)*.

0003cf8e <disLenMfrCh>:
   3cf8e:	2a290005                                         ..

0003cf90 <disUuMfr>:
   3cf90:	00002a29                                )*..

0003cf94 <disValSidCh>:
   3cf94:	23003402 0005002a                                .4.#*.

0003cf9a <disLenSidCh>:
   3cf9a:	2a230005                                         ..

0003cf9c <disUuSid>:
   3cf9c:	00082a23                                         #*

0003cf9e <disLenSid>:
   3cf9e:	36020008                                         ..

0003cfa0 <disValMnCh>:
   3cfa0:	24003602 0005002a                                .6.$*.

0003cfa6 <disLenMnCh>:
   3cfa6:	2a240005                                         ..

0003cfa8 <disUuMn>:
   3cfa8:	00002a24                                $*..

0003cfac <disValSnCh>:
   3cfac:	25003802 0005002a                                .8.%*.

0003cfb2 <disLenSnCh>:
   3cfb2:	2a250005                                         ..

0003cfb4 <disUuSn>:
   3cfb4:	00002a25                                %*..

0003cfb8 <disValFwrCh>:
   3cfb8:	26003a02 0005002a                                .:.&*.

0003cfbe <disLenFwrCh>:
   3cfbe:	2a260005                                         ..

0003cfc0 <disUuFwr>:
   3cfc0:	00002a26                                &*..

0003cfc4 <disValHwrCh>:
   3cfc4:	27003c02 0005002a                                .<.'*.

0003cfca <disLenHwrCh>:
   3cfca:	2a270005                                         ..

0003cfcc <disUuHwr>:
   3cfcc:	00002a27                                '*..

0003cfd0 <disValSwrCh>:
   3cfd0:	28003e02 0005002a                                .>.(*.

0003cfd6 <disLenSwrCh>:
   3cfd6:	2a280005                                         ..

0003cfd8 <disUuSwr>:
   3cfd8:	00002a28                                (*..

0003cfdc <disValRcdCh>:
   3cfdc:	2a004002 0005002a                                .@.**.

0003cfe2 <disLenRcdCh>:
   3cfe2:	2a2a0005                                         ..

0003cfe4 <disUuRcd>:
   3cfe4:	00062a2a                                         **

0003cfe6 <disLenRcd>:
   3cfe6:	b9a60006                                         ..

0003cfe8 <disList>:
   3cfe8:	0003b9a6 0003cf84 0003cf86 01000002     ................
   3cff8:	0003b9a0 0003cf88 0003cf8e 01000005     ................
   3d008:	0003cf90 10017fb0 10017fc4 01080014     ................
   3d018:	0003b9a0 0003cf94 0003cf9a 01000005     ................
   3d028:	0003cf9c 10017fc8 0003cf9e 01000008     ................
   3d038:	0003b9a0 0003cfa0 0003cfa6 01000005     ................
   3d048:	0003cfa8 10017fd0 10017fe4 01080014     ................
   3d058:	0003b9a0 0003cfac 0003cfb2 01000005     ................
   3d068:	0003cfb4 10017fe8 10017ffc 01080014     ................
   3d078:	0003b9a0 0003cfb8 0003cfbe 01000005     ................
   3d088:	0003cfc0 10018000 10018010 01080010     ................
   3d098:	0003b9a0 0003cfc4 0003cfca 01000005     ................
   3d0a8:	0003cfcc 10018014 10018024 01080010     ........$.......
   3d0b8:	0003b9a0 0003cfd0 0003cfd6 01000005     ................
   3d0c8:	0003cfd8 10018028 10018038 01080010     ....(...8.......
   3d0d8:	0003b9a0 0003cfdc 0003cfe2 01000005     ................
   3d0e8:	0003cfe4 1001be84 0003cfe6 01000006     ................
   3d0f8:	00000043                                C...

0003d0fc <curve_secp256r1>:
   3d0fc:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   3d118:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   3d128:	a7179e84 bce6faad ffffffff ffffffff     ................
   3d138:	00000000 ffffffff d898c296 f4a13945     ............E9..
   3d148:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   3d158:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   3d168:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   3d178:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   3d188:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   3d198:	aa3a93e7 5ac635d8 000266f1 00025f11     ..:..5.Z.f..._..
   3d1a8:	000260c1 5f495041 52494150 5145525f     .`..API_PAIR_REQ
   3d1b8:	49504100 4e41435f 5f4c4543 00514552     .API_CANCEL_REQ.
   3d1c8:	5f495041 48545541 5053525f 49504100     API_AUTH_RSP.API
   3d1d8:	4345535f 54495255 45525f59 4d430051     _SECURITY_REQ.CM
   3d1e8:	4b505f44 4d430054 41505f44 4e495249     D_PKT.CMD_PAIRIN
   3d1f8:	41465f47 44454c49 5f4d4400 52434e45     G_FAILED.DM_ENCR
   3d208:	5f545059 4c504d43 5f4d4400 52434e45     YPT_CMPL.DM_ENCR
   3d218:	5f545059 4c494146 44004445 4f435f4d     YPT_FAILED.DM_CO
   3d228:	435f4e4e 45534f4c 46535700 5345415f     NN_CLOSE.WSF_AES
   3d238:	504d435f 4e49004c 45535f54 4e5f444e     _CMPL.INT_SEND_N
   3d248:	5f545845 0059454b 5f544e49 5f58414d     EXT_KEY.INT_MAX_
   3d258:	45545441 5354504d 544e4900 4941505f     ATTEMPTS.INT_PAI
   3d268:	474e4952 504d435f 4e49004c 49545f54     RING_CMPL.INT_TI
   3d278:	554f454d 4e490054 454c5f54 49004353     MEOUT.INT_LESC.I
   3d288:	4c5f544e 43414745 4e490059 574a5f54     NT_LEGACY.INT_JW
   3d298:	00434e5f 5f544e49 53534150 0059454b     _NC.INT_PASSKEY.
   3d2a8:	5f544e49 00424f4f 5f495041 52455355     INT_OOB.API_USER
   3d2b8:	4e4f435f 4d524946 49504100 4553555f     _CONFIRM.API_USE
   3d2c8:	454b5f52 45525059 41005353 4b5f4950     R_KEYPRESS.API_K
   3d2d8:	52505945 5f535345 4c504d43 46535700     EYPRESS_CMPL.WSF
   3d2e8:	4343455f 504d435f 4e49004c 4b505f54     _ECC_CMPL.INT_PK
   3d2f8:	58454e5f 4e490054 4b505f54 504d435f     _NEXT.INT_PK_CMP
   3d308:	5357004c 4d435f46 435f4341 004c504d     L.WSF_CMAC_CMPL.
   3d318:	435f4844 4b434548 4941465f 4552554c     DH_CHECK_FAILURE
   3d328:	555f4900 6f6e6b6e 49006e77 4c44495f     .I_Unknown.I_IDL
   3d338:	5f490045 45444f4d 4c45535f 00544345     E.I_MODE_SELECT.
   3d348:	454c5f49 505f4353 49004e49 4255505f     I_LESC_PIN.I_PUB
   3d358:	59454b5f 415f4900 5f485455 454c4553     _KEY.I_AUTH_SELE
   3d368:	49005443 4e574a5f 41575f43 435f5449     CT.I_JWNC_WAIT_C
   3d378:	4900464e 4e574a5f 41525f43 4900444e     NF.I_JWNC_RAND.I
   3d388:	4e574a5f 48435f43 5f4b4345 5f490031     _JWNC_CHECK_1.I_
   3d398:	434e574a 4548435f 325f4b43 4a5f4900     JWNC_CHECK_2.I_J
   3d3a8:	5f434e57 54494157 4553555f 5f490052     WNC_WAIT_USER.I_
   3d3b8:	4b5f4b50 52505945 00535345 4b505f49     PK_KEYPRESS.I_PK
   3d3c8:	4c41435f 5f490043 435f4b50 4900464e     _CALC.I_PK_CNF.I
   3d3d8:	5f4b505f 444e4152 505f4900 48435f4b     _PK_RAND.I_PK_CH
   3d3e8:	004b4345 4b505f49 5045525f 00544145     ECK.I_PK_REPEAT.
   3d3f8:	4f4f5f49 45535f42 525f444e 00444e41     I_OOB_SEND_RAND.
   3d408:	4f4f5f49 41575f42 525f5449 00444e41     I_OOB_WAIT_RAND.
   3d418:	41435f49 465f434c 4b545f35 49005945     I_CALC_F5_TKEY.I
   3d428:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   3d438:	41435f49 465f434c 544c5f35 5f49004b     I_CALC_F5_LTK.I_
   3d448:	434c4143 5f36465f 49004145 4c41435f     CALC_F6_EA.I_CAL
   3d458:	36465f43 0042455f 45565f49 59464952     C_F6_EB.I_VERIFY
   3d468:	5f48445f 43454843 5f49004b 4147454c     _DH_CHECK.I_LEGA
   3d478:	505f5943 49004e49 464e435f 4c41435f     CY_PIN.I_CNF_CAL
   3d488:	00315f43 4e435f49 41435f46 325f434c     C_1.I_CNF_CALC_2
   3d498:	505f4900 5f524941 00464e43 41505f49     .I_PAIR_CNF.I_PA
   3d4a8:	525f5249 00444e41 4e435f49 45565f46     IR_RAND.I_CNF_VE
   3d4b8:	41435f52 315f434c 435f4900 565f464e     R_CALC_1.I_CNF_V
   3d4c8:	435f5245 5f434c41 5f490032 5f4b5453     ER_CALC_2.I_STK_
   3d4d8:	434c4143 455f4900 5952434e 49005450     CALC.I_ENCRYPT.I
   3d4e8:	59454b5f 5349445f 5f490054 45545441     _KEY_DIST.I_ATTE
   3d4f8:	5354504d 555f5200 6f6e6b6e 52006e77     MPTS.R_Unknown.R
   3d508:	4c44495f 5f520045 5f495041 52494150     _IDLE.R_API_PAIR
   3d518:	5053525f 4d5f5200 5f45444f 454c4553     _RSP.R_MODE_SELE
   3d528:	52005443 4255505f 59454b5f 415f5200     CT.R_PUB_KEY.R_A
   3d538:	5f485455 454c4553 52005443 4e574a5f     UTH_SELECT.R_JWN
   3d548:	45535f43 00505554 574a5f52 575f434e     C_SETUP.R_JWNC_W
   3d558:	5f544941 444e4152 4a5f5200 5f434e57     AIT_RAND.R_JWNC_
   3d568:	434c4143 0032475f 574a5f52 575f434e     CALC_G2.R_JWNC_W
   3d578:	5f544941 52455355 505f5200 454b5f4b     AIT_USER.R_PK_KE
   3d588:	45525059 52005353 5f4b505f 54494157     YPRESS.R_PK_WAIT
   3d598:	464e435f 505f5200 41435f4b 5200434c     _CNF.R_PK_CALC.R
   3d5a8:	5f4b505f 444e4152 505f5200 48435f4b     _PK_RAND.R_PK_CH
   3d5b8:	004b4345 4b505f52 5045525f 00544145     ECK.R_PK_REPEAT.
   3d5c8:	4f4f5f52 45535f42 525f444e 00444e41     R_OOB_SEND_RAND.
   3d5d8:	4f4f5f52 41575f42 525f5449 00444e41     R_OOB_WAIT_RAND.
   3d5e8:	41575f52 445f5449 48435f48 004b4345     R_WAIT_DH_CHECK.
   3d5f8:	41435f52 465f434c 4b545f35 52005945     R_CALC_F5_TKEY.R
   3d608:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   3d618:	41435f52 465f434c 544c5f35 5f52004b     R_CALC_F5_LTK.R_
   3d628:	434c4143 5f36465f 52004145 4c41435f     CALC_F6_EA.R_CAL
   3d638:	36465f43 0042455f 49505f52 41505f4e     C_F6_EB.R_PIN_PA
   3d648:	315f5249 505f5200 505f4e49 5f524941     IR_1.R_PIN_PAIR_
   3d658:	5f520032 5f464e43 434c4143 5200315f     2.R_CNF_CALC_1.R
   3d668:	464e435f 4c41435f 00325f43 41505f52     _CNF_CALC_2.R_PA
   3d678:	525f5249 00444e41 4e435f52 45565f46     IR_RAND.R_CNF_VE
   3d688:	41435f52 315f434c 435f5200 565f464e     R_CALC_1.R_CNF_V
   3d698:	435f5245 5f434c41 5f520032 5f4b5453     ER_CALC_2.R_STK_
   3d6a8:	434c4143 455f5200 5952434e 52005450     CALC.R_ENCRYPT.R
   3d6b8:	59454b5f 5349445f 5f520054 45545441     _KEY_DIST.R_ATTE
   3d6c8:	5354504d 00000000                       MPTS....

0003d6d0 <g_AM_BSP_GPIO_ITM_SWO>:
   3d6d0:	00000007                                ....

0003d6d4 <intensity_histeresis.8604>:
   3d6d4:	3f800000 3f800000 3f800000 3f800000     ...?...?...?...?
   3d6e4:	3f800000 3f800000 3f800000 40000000     ...?...?...?...@
   3d6f4:	40000000 40000000 40000000 40000000     ...@...@...@...@
   3d704:	40000000 40000000 40400000 40400000     ...@...@..@@..@@
   3d714:	40800000 40a00000 40c00000 41000000     ...@...@...@...A
   3d724:	41000000                                ...A

0003d728 <intensity_thresholds.8603>:
   3d728:	3f800000 40000000 40400000 40800000     ...?...@..@@...@
   3d738:	40a00000 40c00000 40e00000 41000000     ...@...@...@...A
   3d748:	41800000 41c00000 42100000 42300000     ...A...A...B..0B
   3d758:	42480000 42600000 42780000 42860000     ..HB..`B..xB...B
   3d768:	42900000 429e0000 42b00000 42d40000     ...B...B...B...B
   3d778:	43060000                                ...C

0003d77c <inv_table.7992>:
   3d77c:	6e9cffff 333b4656 2125282d 191a1c1f     ...nVF;3-(%!....
   3d78c:	14151617 10111213 0e0f0f10 0c0c0d0d     ................
   3d79c:	0b0b0c0c 0a0a0a0b 09090909 08080909     ................
   3d7ac:	07080808 07070707 06060607 06060606     ................
   3d7bc:	06060606 06060606 05050506 05050505     ................
   3d7cc:	05050505 04040405 04040404 04040404     ................
   3d7dc:	04040404 04040404 04040404 03030404     ................
   3d7ec:	03030303 03030303 03030303 02030303     ................

0003d7fc <spread_icdf>:
   3d7fc:	00021719                                ....

0003d800 <tapset_icdf>:
   3d800:	00000102                                ....

0003d804 <trim_icdf>:
   3d804:	6d777c7e 09132957 00000204              ~|wmW)......

0003d810 <correction.7404>:
   3d810:	00008b95 00009837 0000a5ff 0000b504     ....7...........
   3d820:	0000c567 0000d745 0000eac1 0000ffff     g...E...........

0003d830 <band_allocation>:
	...
   3d844:	4b505a00 31383f45 141d2228 00000a12     .ZPKE?81("......
   3d854:	00000000 646e0000 474e545a 2d333a41     ......ndZTNGA:3-
   3d864:	141a2027 0000000c 76000000 565d676e     ' .........vng]V
   3d874:	41464b50 282f353b 040f171f 00000000     PKFA;5/(........
   3d884:	6870777e 4e53595f 363c4248 1920272f     ~wph_YSNHB<6/' .
   3d894:	00010c11 787f8600 5b616772 42484e55     .......xrga[UNHB
   3d8a4:	292f363c 10171d23 8990010a 6b717c82     <6/)#........|qk
   3d8b4:	52585f65 3940464c 21272d33 98010f1a     e_XRLF@93-'!....
   3d8c4:	7b848a91 62696f75 4a50565c 31373d43     ...{uoib\VPJC=71
   3d8d4:	0114242b 8e949ba2 73797f85 5a60666c     +$........yslf`Z
   3d8e4:	41474d54 1e2e353b 9ea5ac01 83898f98     TMGA;5..........
   3d8f4:	6a70767d 51575e64 383f454b c8c8142d     }vpjd^WQKE?8-...
   3d904:	c8c8c8c8 c1c6c8c8 adb2b7bc 999ea3a8     ................
   3d914:	00688194                                ..h.

0003d918 <cache_bits50>:
   3d918:	07070728 07070707 07070707 07070707     (...............
   3d928:	07070707 07070707 07070707 07070707     ................
   3d938:	07070707 07070707 170f2807 24221f1c     .........(...."$
   3d948:	2a292726 2e2d2c2b 32312f2f 36353433     &')*+,-.//123456
   3d958:	3a393737 3e3d3c3b 42413f3f 46454443     779:;<=>??ABCDEF
   3d968:	14284747 35302921 42403d39 4b494745     GG(.!)059=@BEGIK
   3d978:	52504e4c 5b595755 62605e5c 6b696765     LNPRUWY[\^`begik
   3d988:	72706e6c 7b797775 28807e7c 3c332717     lnpruwy{|~.(.'3<
   3d998:	534f4943 615e5b57 6b696664 7976736f     CIOSW[^adfikosvy
   3d9a8:	83817e7c 918e8b87 9b999694 a9a6a39f     |~..............
   3d9b8:	b3b1aeac 41311c23 6b63594e 847e7872     ....#.1ANYckrx~.
   3d9c8:	95918d88 aba59f99 bdb9b4b0 d3cdc7c0     ................
   3d9d8:	e5e1dcd8 fbf5efe8 4f3a2115 897d7061     .........!:Oap}.
   3d9e8:	aea69d94 c9c3bdb6 ebe3d9cf 2311fbf3     ...............#
   3d9f8:	7b6a563f b1a5988b d6cec5bb faede6de     ?Vj{............
   3da08:	4b371f19 8075695b a19a928a b9b4aea8     ..7K[iu.........
   3da18:	d7d0c8be f0ebe5de 2410fff5 806e5941     ...........$AYn.
   3da28:	b9ad9f90 e2d9cfc4 0bfaf2ea 80674a29     ............)Jg.
   3da38:	d1bfac97 09fff1e1 8a6e4f2b e3cfbaa3     ........+On.....
   3da48:	47270cf6 a4907b63 e4d6c6b6 2c09fdf1     ..'Gc{.........,
   3da58:	a88e7151 ffebd6c0 7f5a3107 f7dcbfa0     Qq.......1Z.....
   3da68:	865f3306 07eacbaa 9b7b572f 06edd4b8     .3_...../W{.....
   3da78:	ae896134 3905f0d0 e7c0976a 9e6f3b05     4a.....9j....;o.
   3da88:	3705f3ca e0bb9367 a1713c05 4104f8ce     ...7g....<q....A
   3da98:	04e0af7a eab67f43                       z...C...

0003daa0 <cache_caps50>:
   3daa0:	e0e0e0e0 e0e0e0e0 a0a0a0a0 b2b9b9b9     ................
   3dab0:	3d86a8b2 e0e0e025 e0e0e0e0 f0f0f0e0     ...=%...........
   3dac0:	cfcfcff0 90b7c6c6 a0a02842 a0a0a0a0     ........B(......
   3dad0:	b9b9a0a0 c1c1b9b9 acb7b7c1 f026408a     .............@&.
   3dae0:	f0f0f0f0 cff0f0f0 cccfcfcf c1c1cccc     ................
   3daf0:	28428fb4 b9b9b9b9 b9b9b9b9 c1c1c1c1     ..B(............
   3db00:	b7c1c1c1 418aacb7 cfcfcf27 cfcfcfcf     .......A'.......
   3db10:	cccccccf c9c9c9cc 8db0bcbc c1c12842     ............B(..
   3db20:	c1c1c1c1 c1c1c1c1 c2c2c1c1 adb8b8c2     ................
   3db30:	cc27418b cccccccc c9cccccc c6c9c9c9     .A'.............
   3db40:	bbbbc6c6 28428caf                       ......B(

0003db48 <cache_index50>:
   3db48:	ffffffff ffffffff ffffffff ffffffff     ................
	...
   3db60:	00290029 00520029 007b0052 00c800a4     ).).).R.R.{.....
   3db70:	000000de 00000000 00000000 00000000     ................
   3db80:	00290000 00290029 007b0029 007b007b     ..).).).).{.{.{.
   3db90:	00a400a4 010a00f0 0127011b 00290029     ..........'.).).
   3dba0:	00290029 00290029 00290029 007b007b     ).).).).).).{.{.
   3dbb0:	007b007b 00f000f0 010a00f0 0131010a     {.{...........1.
   3dbc0:	0148013e 007b0150 007b007b 007b007b     >.H.P.{.{.{.{.{.
   3dbd0:	007b007b 00f0007b 00f000f0 013100f0     {.{.{.........1.
   3dbe0:	01310131 013e013e 015f0157 016c0166     1.1.>.>.W._.f.l.
   3dbf0:	00f000f0 00f000f0 00f000f0 00f000f0     ................
   3dc00:	01310131 01310131 01570157 015f0157     1.1.1.1.W.W.W._.
   3dc10:	0172015f 017e0178 00000183              _.r.x.~.....

0003dc1c <eband5ms>:
   3dc1c:	00010000 00030002 00050004 00070006     ................
   3dc2c:	000a0008 000e000c 00140010 001c0018     ................
   3dc3c:	00280022 003c0030 0064004e              ".(.0.<.N.d.

0003dc48 <fft_bitrev120>:
   3dc48:	00180000 00480030 00080060 00380020     ....0.H.`... .8.
   3dc58:	00680050 00280010 00580040 00040070     P.h...(.@.X.p...
   3dc68:	0034001c 0064004c 0024000c 0054003c     ..4.L.d...$.<.T.
   3dc78:	0014006c 0044002c 0074005c 00190001     l...,.D.\.t.....
   3dc88:	00490031 00090061 00390021 00690051     1.I.a...!.9.Q.i.
   3dc98:	00290011 00590041 00050071 0035001d     ..).A.Y.q.....5.
   3dca8:	0065004d 0025000d 0055003d 0015006d     M.e...%.=.U.m...
   3dcb8:	0045002d 0075005d 001a0002 004a0032     -.E.].u.....2.J.
   3dcc8:	000a0062 003a0022 006a0052 002a0012     b...".:.R.j...*.
   3dcd8:	005a0042 00060072 0036001e 0066004e     B.Z.r.....6.N.f.
   3dce8:	0026000e 0056003e 0016006e 0046002e     ..&.>.V.n.....F.
   3dcf8:	0076005e 001b0003 004b0033 000b0063     ^.v.....3.K.c...
   3dd08:	003b0023 006b0053 002b0013 005b0043     #.;.S.k...+.C.[.
   3dd18:	00070073 0037001f 0067004f 0027000f     s.....7.O.g...'.
   3dd28:	0057003f 0017006f 0047002f 0077005f     ?.W.o.../.G._.w.

0003dd38 <fft_bitrev240>:
   3dd38:	00300000 00900060 001000c0 00700040     ..0.`.......@.p.
   3dd48:	00d000a0 00500020 00b00080 000400e0     .... .P.........
   3dd58:	00640034 00c40094 00440014 00a40074     4.d.......D.t...
   3dd68:	002400d4 00840054 00e400b4 00380008     ..$.T.........8.
   3dd78:	00980068 001800c8 00780048 00d800a8     h.......H.x.....
   3dd88:	00580028 00b80088 000c00e8 006c003c     (.X.........<.l.
   3dd98:	00cc009c 004c001c 00ac007c 002c00dc     ......L.|.....,.
   3dda8:	008c005c 00ec00bc 00310001 00910061     \.........1.a...
   3ddb8:	001100c1 00710041 00d100a1 00510021     ....A.q.....!.Q.
   3ddc8:	00b10081 000500e1 00650035 00c50095     ........5.e.....
   3ddd8:	00450015 00a50075 002500d5 00850055     ..E.u.....%.U...
   3dde8:	00e500b5 00390009 00990069 001900c9     ......9.i.......
   3ddf8:	00790049 00d900a9 00590029 00b90089     I.y.....).Y.....
   3de08:	000d00e9 006d003d 00cd009d 004d001d     ....=.m.......M.
   3de18:	00ad007d 002d00dd 008d005d 00ed00bd     }.....-.].......
   3de28:	00320002 00920062 001200c2 00720042     ..2.b.......B.r.
   3de38:	00d200a2 00520022 00b20082 000600e2     ....".R.........
   3de48:	00660036 00c60096 00460016 00a60076     6.f.......F.v...
   3de58:	002600d6 00860056 00e600b6 003a000a     ..&.V.........:.
   3de68:	009a006a 001a00ca 007a004a 00da00aa     j.......J.z.....
   3de78:	005a002a 00ba008a 000e00ea 006e003e     *.Z.........>.n.
   3de88:	00ce009e 004e001e 00ae007e 002e00de     ......N.~.......
   3de98:	008e005e 00ee00be 00330003 00930063     ^.........3.c...
   3dea8:	001300c3 00730043 00d300a3 00530023     ....C.s.....#.S.
   3deb8:	00b30083 000700e3 00670037 00c70097     ........7.g.....
   3dec8:	00470017 00a70077 002700d7 00870057     ..G.w.....'.W...
   3ded8:	00e700b7 003b000b 009b006b 001b00cb     ......;.k.......
   3dee8:	007b004b 00db00ab 005b002b 00bb008b     K.{.....+.[.....
   3def8:	000f00eb 006f003f 00cf009f 004f001f     ....?.o.......O.
   3df08:	00af007f 002f00df 008f005f 00ef00bf     ....../._.......

0003df18 <fft_bitrev480>:
   3df18:	00600000 012000c0 00200180 00e00080     ..`... ... .....
   3df28:	01a00140 00a00040 01600100 000801c0     @...@.....`.....
   3df38:	00c80068 01880128 00880028 014800e8     h...(...(.....H.
   3df48:	004801a8 010800a8 01c80168 00700010     ..H.....h.....p.
   3df58:	013000d0 00300190 00f00090 01b00150     ..0...0.....P...
   3df68:	00b00050 01700110 001801d0 00d80078     P.....p.....x...
   3df78:	01980138 00980038 015800f8 005801b8     8...8.....X...X.
   3df88:	011800b8 01d80178 00640004 012400c4     ....x.....d...$.
   3df98:	00240184 00e40084 01a40144 00a40044     ..$.....D...D...
   3dfa8:	01640104 000c01c4 00cc006c 018c012c     ..d.....l...,...
   3dfb8:	008c002c 014c00ec 004c01ac 010c00ac     ,.....L...L.....
   3dfc8:	01cc016c 00740014 013400d4 00340194     l.....t...4...4.
   3dfd8:	00f40094 01b40154 00b40054 01740114     ....T...T.....t.
   3dfe8:	001c01d4 00dc007c 019c013c 009c003c     ....|...<...<...
   3dff8:	015c00fc 005c01bc 011c00bc 01dc017c     ..\...\.....|...
   3e008:	00610001 012100c1 00210181 00e10081     ..a...!...!.....
   3e018:	01a10141 00a10041 01610101 000901c1     A...A.....a.....
   3e028:	00c90069 01890129 00890029 014900e9     i...)...).....I.
   3e038:	004901a9 010900a9 01c90169 00710011     ..I.....i.....q.
   3e048:	013100d1 00310191 00f10091 01b10151     ..1...1.....Q...
   3e058:	00b10051 01710111 001901d1 00d90079     Q.....q.....y...
   3e068:	01990139 00990039 015900f9 005901b9     9...9.....Y...Y.
   3e078:	011900b9 01d90179 00650005 012500c5     ....y.....e...%.
   3e088:	00250185 00e50085 01a50145 00a50045     ..%.....E...E...
   3e098:	01650105 000d01c5 00cd006d 018d012d     ..e.....m...-...
   3e0a8:	008d002d 014d00ed 004d01ad 010d00ad     -.....M...M.....
   3e0b8:	01cd016d 00750015 013500d5 00350195     m.....u...5...5.
   3e0c8:	00f50095 01b50155 00b50055 01750115     ....U...U.....u.
   3e0d8:	001d01d5 00dd007d 019d013d 009d003d     ....}...=...=...
   3e0e8:	015d00fd 005d01bd 011d00bd 01dd017d     ..]...].....}...
   3e0f8:	00620002 012200c2 00220182 00e20082     ..b..."...".....
   3e108:	01a20142 00a20042 01620102 000a01c2     B...B.....b.....
   3e118:	00ca006a 018a012a 008a002a 014a00ea     j...*...*.....J.
   3e128:	004a01aa 010a00aa 01ca016a 00720012     ..J.....j.....r.
   3e138:	013200d2 00320192 00f20092 01b20152     ..2...2.....R...
   3e148:	00b20052 01720112 001a01d2 00da007a     R.....r.....z...
   3e158:	019a013a 009a003a 015a00fa 005a01ba     :...:.....Z...Z.
   3e168:	011a00ba 01da017a 00660006 012600c6     ....z.....f...&.
   3e178:	00260186 00e60086 01a60146 00a60046     ..&.....F...F...
   3e188:	01660106 000e01c6 00ce006e 018e012e     ..f.....n.......
   3e198:	008e002e 014e00ee 004e01ae 010e00ae     ......N...N.....
   3e1a8:	01ce016e 00760016 013600d6 00360196     n.....v...6...6.
   3e1b8:	00f60096 01b60156 00b60056 01760116     ....V...V.....v.
   3e1c8:	001e01d6 00de007e 019e013e 009e003e     ....~...>...>...
   3e1d8:	015e00fe 005e01be 011e00be 01de017e     ..^...^.....~...
   3e1e8:	00630003 012300c3 00230183 00e30083     ..c...#...#.....
   3e1f8:	01a30143 00a30043 01630103 000b01c3     C...C.....c.....
   3e208:	00cb006b 018b012b 008b002b 014b00eb     k...+...+.....K.
   3e218:	004b01ab 010b00ab 01cb016b 00730013     ..K.....k.....s.
   3e228:	013300d3 00330193 00f30093 01b30153     ..3...3.....S...
   3e238:	00b30053 01730113 001b01d3 00db007b     S.....s.....{...
   3e248:	019b013b 009b003b 015b00fb 005b01bb     ;...;.....[...[.
   3e258:	011b00bb 01db017b 00670007 012700c7     ....{.....g...'.
   3e268:	00270187 00e70087 01a70147 00a70047     ..'.....G...G...
   3e278:	01670107 000f01c7 00cf006f 018f012f     ..g.....o.../...
   3e288:	008f002f 014f00ef 004f01af 010f00af     /.....O...O.....
   3e298:	01cf016f 00770017 013700d7 00370197     o.....w...7...7.
   3e2a8:	00f70097 01b70157 00b70057 01770117     ....W...W.....w.
   3e2b8:	001f01d7 00df007f 019f013f 009f003f     ........?...?...
   3e2c8:	015f00ff 005f01bf 011f00bf 01df017f     .._..._.........

0003e2d8 <fft_bitrev60>:
   3e2d8:	000c0000 00240018 00040030 001c0010     ......$.0.......
   3e2e8:	00340028 00140008 002c0020 00010038     (.4..... .,.8...
   3e2f8:	0019000d 00310025 00110005 0029001d     ....%.1.......).
   3e308:	00090035 00210015 0039002d 000e0002     5.....!.-.9.....
   3e318:	0026001a 00060032 001e0012 0036002a     ..&.2.......*.6.
   3e328:	0016000a 002e0022 0003003a 001b000f     ...."...:.......
   3e338:	00330027 00130007 002b001f 000b0037     '.3.......+.7...
   3e348:	00230017 003b002f                       ..#./.;.

0003e350 <fft_state48000_960_0>:
   3e350:	000001e0 3b088887 ffffffff 00600005     .......;......`.
   3e360:	00200003 00080004 00040002 00010004     .. .............
	...
   3e37c:	0003df18 0003e430 00000000              ....0.......

0003e388 <fft_state48000_960_1>:
   3e388:	000000f0 3b888889 00000001 00300005     .......;......0.
   3e398:	00100003 00040004 00010004 00000000     ................
	...
   3e3b4:	0003dd38 0003e430 00000000              8...0.......

0003e3c0 <fft_state48000_960_2>:
   3e3c0:	00000078 3c088888 00000002 00180005     x......<........
   3e3d0:	00080003 00040002 00010004 00000000     ................
	...
   3e3ec:	0003dc48 0003e430 00000000              H...0.......

0003e3f8 <fft_state48000_960_3>:
   3e3f8:	0000003c 3c888889 00000003 000c0005     <......<........
   3e408:	00040003 00010004 00000000 00000000     ................
	...
   3e424:	0003e2d8 0003e430 00000000              ....0.......

0003e430 <fft_twiddles48000_960>:
   3e430:	3f800000 80000000 3f7ffa63 bc5675bf     ...?....c..?.uV.
   3e440:	3f7fe98b bcd6710a 3f7fcd79 bd20cee7     ...?.q..y..?.. .
   3e450:	3f7fa62f bd565e3a 3f7f73af bd85f213     /..?:^V..s.?....
   3e460:	3f7f35f9 bda0af2a 3f7eed12 bdbb6533     .5.?*.....~?3e..
   3e470:	3f7e98fd bdd61304 3f7e39bc bdf0b773     ..~?.....9~?s...
   3e480:	3f7dcf55 be05a8a8 3f7d59cb be12efbb     U.}?.....Y}?....
   3e490:	3f7cd925 be20305c 3f7c4d67 be2d69f5     %.|?\0 .gM|?.i-.
   3e4a0:	3f7bb698 be3a9bf3 3f7b14be be47c5c2     ..{?..:...{?..G.
   3e4b0:	3f7a67e2 be54e6cd 3f79b009 be61fe82     .gz?..T...y?..a.
   3e4c0:	3f78ed3c be6f0c4d 3f781f84 be7c0f9c     <.x?M.o...x?..|.
   3e4d0:	3f7746ea be8483ee 3f766377 be8afa3e     .Fw?....wcv?>...
   3e4e0:	3f757536 be916a75 3f747c30 be97d44c     6uu?uj..0|t?L...
   3e4f0:	3f737871 be9e377a 3f726a03 bea493b7     qxs?z7...jr?....
   3e500:	3f7150f4 beaae8bc 3f702d4f beb13641     .Pq?....O-p?A6..
   3e510:	3f6eff21 beb77c01 3f6dc676 bebdb9b4     !.n?.|..v.m?....
   3e520:	3f6c835e bec3ef15 3f6b35e7 beca1bde     ^.l?.....5k?....
   3e530:	3f69de1e bed03fc9 3f687c12 bed65a92     ..i?.?...|h?.Z..
   3e540:	3f670fd4 bedc6bf3 3f659974 bee273aa     ..g?.k..t.e?.s..
   3e550:	3f641901 bee87171 3f628e8d beee6507     ..d?qq....b?.e..
   3e560:	3f60fa28 bef44e27 3f5f5be6 befa2c90     (.`?'N...[_?.,..
   3e570:	3f5db3d7 bf000000 3f5c020f bf02e41b     ..]?......\?....
   3e580:	3f5a46a0 bf05c277 3f58819e bf089af6     .FZ?w.....X?....
   3e590:	3f56b31d bf0b6d77 3f54db31 bf0e39da     ..V?wm..1.T?.9..
   3e5a0:	3f52f9ef bf110000 3f510f6c bf13bfca     ..R?....l.Q?....
   3e5b0:	3f4f1bbd bf167918 3f4d1ef8 bf192bcd     ..O?.y....M?.+..
   3e5c0:	3f4b1934 bf1bd7ca 3f490a88 bf1e7cf1     4.K?......I?.|..
   3e5d0:	3f46f30a bf211b24 3f44d2d1 bf23b246     ..F?$.!...D?F.#.
   3e5e0:	3f42a9f7 bf26423a 3f407893 bf28cae3     ..B?:B&..x@?..(.
   3e5f0:	3f3e3ebd bf2b4c25 3f3bfc8f bf2dc5e3     .>>?%L+...;?..-.
   3e600:	3f39b222 bf303801 3f375f90 bf32a265     ".9?.80.._7?e.2.
   3e610:	3f3504f3 bf3504f3 3f32a265 bf375f90     ..5?..5.e.2?._7.
   3e620:	3f303801 bf39b222 3f2dc5e3 bf3bfc8f     .80?".9...-?..;.
   3e630:	3f2b4c25 bf3e3ebd 3f28cae3 bf407893     %L+?.>>...(?.x@.
   3e640:	3f26423a bf42a9f7 3f23b246 bf44d2d1     :B&?..B.F.#?..D.
   3e650:	3f211b24 bf46f30a 3f1e7cf1 bf490a88     $.!?..F..|.?..I.
   3e660:	3f1bd7ca bf4b1934 3f192bcd bf4d1ef8     ...?4.K..+.?..M.
   3e670:	3f167918 bf4f1bbd 3f13bfca bf510f6c     .y.?..O....?l.Q.
   3e680:	3f110000 bf52f9ef 3f0e39da bf54db31     ...?..R..9.?1.T.
   3e690:	3f0b6d77 bf56b31d 3f089af6 bf58819e     wm.?..V....?..X.
   3e6a0:	3f05c277 bf5a46a0 3f02e41b bf5c020f     w..?.FZ....?..\.
   3e6b0:	3f000000 bf5db3d7 3efa2c90 bf5f5be6     ...?..]..,.>.[_.
   3e6c0:	3ef44e27 bf60fa28 3eee6507 bf628e8d     'N.>(.`..e.>..b.
   3e6d0:	3ee87171 bf641901 3ee273aa bf659974     qq.>..d..s.>t.e.
   3e6e0:	3edc6bf3 bf670fd4 3ed65a92 bf687c12     .k.>..g..Z.>.|h.
   3e6f0:	3ed03fc9 bf69de1e 3eca1bde bf6b35e7     .?.>..i....>.5k.
   3e700:	3ec3ef15 bf6c835e 3ebdb9b4 bf6dc676     ...>^.l....>v.m.
   3e710:	3eb77c01 bf6eff21 3eb13641 bf702d4f     .|.>!.n.A6.>O-p.
   3e720:	3eaae8bc bf7150f4 3ea493b7 bf726a03     ...>.Pq....>.jr.
   3e730:	3e9e377a bf737871 3e97d44c bf747c30     z7.>qxs.L..>0|t.
   3e740:	3e916a75 bf757536 3e8afa3e bf766377     uj.>6uu.>..>wcv.
   3e750:	3e8483ee bf7746ea 3e7c0f9c bf781f84     ...>.Fw...|>..x.
   3e760:	3e6f0c4d bf78ed3c 3e61fe82 bf79b009     M.o><.x...a>..y.
   3e770:	3e54e6cd bf7a67e2 3e47c5c2 bf7b14be     ..T>.gz...G>..{.
   3e780:	3e3a9bf3 bf7bb698 3e2d69f5 bf7c4d67     ..:>..{..i->gM|.
   3e790:	3e20305c bf7cd925 3e12efbb bf7d59cb     \0 >%.|....>.Y}.
   3e7a0:	3e05a8a8 bf7dcf55 3df0b773 bf7e39bc     ...>U.}.s..=.9~.
   3e7b0:	3dd61304 bf7e98fd 3dbb6533 bf7eed12     ...=..~.3e.=..~.
   3e7c0:	3da0af2a bf7f35f9 3d85f213 bf7f73af     *..=.5.....=.s..
   3e7d0:	3d565e3a bf7fa62f 3d20cee7 bf7fcd79     :^V=/..... =y...
   3e7e0:	3cd6710a bf7fe98b 3c5675bf bf7ffa63     .q.<.....uV<c...
   3e7f0:	248d3000 bf800000 bc5675bf bf7ffa63     .0.$.....uV.c...
   3e800:	bcd6710a bf7fe98b bd20cee7 bf7fcd79     .q........ .y...
   3e810:	bd565e3a bf7fa62f bd85f213 bf7f73af     :^V./........s..
   3e820:	bda0af2a bf7f35f9 bdbb6533 bf7eed12     *....5..3e....~.
   3e830:	bdd61304 bf7e98fd bdf0b773 bf7e39bc     ......~.s....9~.
   3e840:	be05a8a8 bf7dcf55 be12efbb bf7d59cb     ....U.}......Y}.
   3e850:	be20305c bf7cd925 be2d69f5 bf7c4d67     \0 .%.|..i-.gM|.
   3e860:	be3a9bf3 bf7bb698 be47c5c2 bf7b14be     ..:...{...G...{.
   3e870:	be54e6cd bf7a67e2 be61fe82 bf79b009     ..T..gz...a...y.
   3e880:	be6f0c4d bf78ed3c be7c0f9c bf781f84     M.o.<.x...|...x.
   3e890:	be8483ee bf7746ea be8afa3e bf766377     .....Fw.>...wcv.
   3e8a0:	be916a75 bf757536 be97d44c bf747c30     uj..6uu.L...0|t.
   3e8b0:	be9e377a bf737871 bea493b7 bf726a03     z7..qxs......jr.
   3e8c0:	beaae8bc bf7150f4 beb13641 bf702d4f     .....Pq.A6..O-p.
   3e8d0:	beb77c01 bf6eff21 bebdb9b4 bf6dc676     .|..!.n.....v.m.
   3e8e0:	bec3ef15 bf6c835e beca1bde bf6b35e7     ....^.l......5k.
   3e8f0:	bed03fc9 bf69de1e bed65a92 bf687c12     .?....i..Z...|h.
   3e900:	bedc6bf3 bf670fd4 bee273aa bf659974     .k....g..s..t.e.
   3e910:	bee87171 bf641901 beee6507 bf628e8d     qq....d..e....b.
   3e920:	bef44e27 bf60fa28 befa2c90 bf5f5be6     'N..(.`..,...[_.
   3e930:	bf000000 bf5db3d7 bf02e41b bf5c020f     ......].......\.
   3e940:	bf05c277 bf5a46a0 bf089af6 bf58819e     w....FZ.......X.
   3e950:	bf0b6d77 bf56b31d bf0e39da bf54db31     wm....V..9..1.T.
   3e960:	bf110000 bf52f9ef bf13bfca bf510f6c     ......R.....l.Q.
   3e970:	bf167918 bf4f1bbd bf192bcd bf4d1ef8     .y....O..+....M.
   3e980:	bf1bd7ca bf4b1934 bf1e7cf1 bf490a88     ....4.K..|....I.
   3e990:	bf211b24 bf46f30a bf23b246 bf44d2d1     $.!...F.F.#...D.
   3e9a0:	bf26423a bf42a9f7 bf28cae3 bf407893     :B&...B...(..x@.
   3e9b0:	bf2b4c25 bf3e3ebd bf2dc5e3 bf3bfc8f     %L+..>>...-...;.
   3e9c0:	bf303801 bf39b222 bf32a265 bf375f90     .80.".9.e.2.._7.
   3e9d0:	bf3504f3 bf3504f3 bf375f90 bf32a265     ..5...5.._7.e.2.
   3e9e0:	bf39b222 bf303801 bf3bfc8f bf2dc5e3     ".9..80...;...-.
   3e9f0:	bf3e3ebd bf2b4c25 bf407893 bf28cae3     .>>.%L+..x@...(.
   3ea00:	bf42a9f7 bf26423a bf44d2d1 bf23b246     ..B.:B&...D.F.#.
   3ea10:	bf46f30a bf211b24 bf490a88 bf1e7cf1     ..F.$.!...I..|..
   3ea20:	bf4b1934 bf1bd7ca bf4d1ef8 bf192bcd     4.K.......M..+..
   3ea30:	bf4f1bbd bf167918 bf510f6c bf13bfca     ..O..y..l.Q.....
   3ea40:	bf52f9ef bf110000 bf54db31 bf0e39da     ..R.....1.T..9..
   3ea50:	bf56b31d bf0b6d77 bf58819e bf089af6     ..V.wm....X.....
   3ea60:	bf5a46a0 bf05c277 bf5c020f bf02e41b     .FZ.w.....\.....
   3ea70:	bf5db3d7 bf000000 bf5f5be6 befa2c90     ..]......[_..,..
   3ea80:	bf60fa28 bef44e27 bf628e8d beee6507     (.`.'N....b..e..
   3ea90:	bf641901 bee87171 bf659974 bee273aa     ..d.qq..t.e..s..
   3eaa0:	bf670fd4 bedc6bf3 bf687c12 bed65a92     ..g..k...|h..Z..
   3eab0:	bf69de1e bed03fc9 bf6b35e7 beca1bde     ..i..?...5k.....
   3eac0:	bf6c835e bec3ef15 bf6dc676 bebdb9b4     ^.l.....v.m.....
   3ead0:	bf6eff21 beb77c01 bf702d4f beb13641     !.n..|..O-p.A6..
   3eae0:	bf7150f4 beaae8bc bf726a03 bea493b7     .Pq......jr.....
   3eaf0:	bf737871 be9e377a bf747c30 be97d44c     qxs.z7..0|t.L...
   3eb00:	bf757536 be916a75 bf766377 be8afa3e     6uu.uj..wcv.>...
   3eb10:	bf7746ea be8483ee bf781f84 be7c0f9c     .Fw.......x...|.
   3eb20:	bf78ed3c be6f0c4d bf79b009 be61fe82     <.x.M.o...y...a.
   3eb30:	bf7a67e2 be54e6cd bf7b14be be47c5c2     .gz...T...{...G.
   3eb40:	bf7bb698 be3a9bf3 bf7c4d67 be2d69f5     ..{...:.gM|..i-.
   3eb50:	bf7cd925 be20305c bf7d59cb be12efbb     %.|.\0 ..Y}.....
   3eb60:	bf7dcf55 be05a8a8 bf7e39bc bdf0b773     U.}......9~.s...
   3eb70:	bf7e98fd bdd61304 bf7eed12 bdbb6533     ..~.......~.3e..
   3eb80:	bf7f35f9 bda0af2a bf7f73af bd85f213     .5..*....s......
   3eb90:	bf7fa62f bd565e3a bf7fcd79 bd20cee7     /...:^V.y..... .
   3eba0:	bf7fe98b bcd6710a bf7ffa63 bc5675bf     .....q..c....uV.
   3ebb0:	bf800000 a50d3000 bf7ffa63 3c5675bf     .....0..c....uV<
   3ebc0:	bf7fe98b 3cd6710a bf7fcd79 3d20cee7     .....q.<y..... =
   3ebd0:	bf7fa62f 3d565e3a bf7f73af 3d85f213     /...:^V=.s.....=
   3ebe0:	bf7f35f9 3da0af2a bf7eed12 3dbb6533     .5..*..=..~.3e.=
   3ebf0:	bf7e98fd 3dd61304 bf7e39bc 3df0b773     ..~....=.9~.s..=
   3ec00:	bf7dcf55 3e05a8a8 bf7d59cb 3e12efbb     U.}....>.Y}....>
   3ec10:	bf7cd925 3e20305c bf7c4d67 3e2d69f5     %.|.\0 >gM|..i->
   3ec20:	bf7bb698 3e3a9bf3 bf7b14be 3e47c5c2     ..{...:>..{...G>
   3ec30:	bf7a67e2 3e54e6cd bf79b009 3e61fe82     .gz...T>..y...a>
   3ec40:	bf78ed3c 3e6f0c4d bf781f84 3e7c0f9c     <.x.M.o>..x...|>
   3ec50:	bf7746ea 3e8483ee bf766377 3e8afa3e     .Fw....>wcv.>..>
   3ec60:	bf757536 3e916a75 bf747c30 3e97d44c     6uu.uj.>0|t.L..>
   3ec70:	bf737871 3e9e377a bf726a03 3ea493b7     qxs.z7.>.jr....>
   3ec80:	bf7150f4 3eaae8bc bf702d4f 3eb13641     .Pq....>O-p.A6.>
   3ec90:	bf6eff21 3eb77c01 bf6dc676 3ebdb9b4     !.n..|.>v.m....>
   3eca0:	bf6c835e 3ec3ef15 bf6b35e7 3eca1bde     ^.l....>.5k....>
   3ecb0:	bf69de1e 3ed03fc9 bf687c12 3ed65a92     ..i..?.>.|h..Z.>
   3ecc0:	bf670fd4 3edc6bf3 bf659974 3ee273aa     ..g..k.>t.e..s.>
   3ecd0:	bf641901 3ee87171 bf628e8d 3eee6507     ..d.qq.>..b..e.>
   3ece0:	bf60fa28 3ef44e27 bf5f5be6 3efa2c90     (.`.'N.>.[_..,.>
   3ecf0:	bf5db3d7 3f000000 bf5c020f 3f02e41b     ..]....?..\....?
   3ed00:	bf5a46a0 3f05c277 bf58819e 3f089af6     .FZ.w..?..X....?
   3ed10:	bf56b31d 3f0b6d77 bf54db31 3f0e39da     ..V.wm.?1.T..9.?
   3ed20:	bf52f9ef 3f110000 bf510f6c 3f13bfca     ..R....?l.Q....?
   3ed30:	bf4f1bbd 3f167918 bf4d1ef8 3f192bcd     ..O..y.?..M..+.?
   3ed40:	bf4b1934 3f1bd7ca bf490a88 3f1e7cf1     4.K....?..I..|.?
   3ed50:	bf46f30a 3f211b24 bf44d2d1 3f23b246     ..F.$.!?..D.F.#?
   3ed60:	bf42a9f7 3f26423a bf407893 3f28cae3     ..B.:B&?.x@...(?
   3ed70:	bf3e3ebd 3f2b4c25 bf3bfc8f 3f2dc5e3     .>>.%L+?..;...-?
   3ed80:	bf39b222 3f303801 bf375f90 3f32a265     ".9..80?._7.e.2?
   3ed90:	bf3504f3 3f3504f3 bf32a265 3f375f90     ..5...5?e.2.._7?
   3eda0:	bf303801 3f39b222 bf2dc5e3 3f3bfc8f     .80.".9?..-...;?
   3edb0:	bf2b4c25 3f3e3ebd bf28cae3 3f407893     %L+..>>?..(..x@?
   3edc0:	bf26423a 3f42a9f7 bf23b246 3f44d2d1     :B&...B?F.#...D?
   3edd0:	bf211b24 3f46f30a bf1e7cf1 3f490a88     $.!...F?.|....I?
   3ede0:	bf1bd7ca 3f4b1934 bf192bcd 3f4d1ef8     ....4.K?.+....M?
   3edf0:	bf167918 3f4f1bbd bf13bfca 3f510f6c     .y....O?....l.Q?
   3ee00:	bf110000 3f52f9ef bf0e39da 3f54db31     ......R?.9..1.T?
   3ee10:	bf0b6d77 3f56b31d bf089af6 3f58819e     wm....V?......X?
   3ee20:	bf05c277 3f5a46a0 bf02e41b 3f5c020f     w....FZ?......\?
   3ee30:	bf000000 3f5db3d7 befa2c90 3f5f5be6     ......]?.,...[_?
   3ee40:	bef44e27 3f60fa28 beee6507 3f628e8d     'N..(.`?.e....b?
   3ee50:	bee87171 3f641901 bee273aa 3f659974     qq....d?.s..t.e?
   3ee60:	bedc6bf3 3f670fd4 bed65a92 3f687c12     .k....g?.Z...|h?
   3ee70:	bed03fc9 3f69de1e beca1bde 3f6b35e7     .?....i?.....5k?
   3ee80:	bec3ef15 3f6c835e bebdb9b4 3f6dc676     ....^.l?....v.m?
   3ee90:	beb77c01 3f6eff21 beb13641 3f702d4f     .|..!.n?A6..O-p?
   3eea0:	beaae8bc 3f7150f4 bea493b7 3f726a03     .....Pq?.....jr?
   3eeb0:	be9e377a 3f737871 be97d44c 3f747c30     z7..qxs?L...0|t?
   3eec0:	be916a75 3f757536 be8afa3e 3f766377     uj..6uu?>...wcv?
   3eed0:	be8483ee 3f7746ea be7c0f9c 3f781f84     .....Fw?..|...x?
   3eee0:	be6f0c4d 3f78ed3c be61fe82 3f79b009     M.o.<.x?..a...y?
   3eef0:	be54e6cd 3f7a67e2 be47c5c2 3f7b14be     ..T..gz?..G...{?
   3ef00:	be3a9bf3 3f7bb698 be2d69f5 3f7c4d67     ..:...{?.i-.gM|?
   3ef10:	be20305c 3f7cd925 be12efbb 3f7d59cb     \0 .%.|?.....Y}?
   3ef20:	be05a8a8 3f7dcf55 bdf0b773 3f7e39bc     ....U.}?s....9~?
   3ef30:	bdd61304 3f7e98fd bdbb6533 3f7eed12     ......~?3e....~?
   3ef40:	bda0af2a 3f7f35f9 bd85f213 3f7f73af     *....5.?.....s.?
   3ef50:	bd565e3a 3f7fa62f bd20cee7 3f7fcd79     :^V./..?.. .y..?
   3ef60:	bcd6710a 3f7fe98b bc5675bf 3f7ffa63     .q.....?.uV.c..?
   3ef70:	a553c800 3f800000 3c5675bf 3f7ffa63     ..S....?.uV<c..?
   3ef80:	3cd6710a 3f7fe98b 3d20cee7 3f7fcd79     .q.<...?.. =y..?
   3ef90:	3d565e3a 3f7fa62f 3d85f213 3f7f73af     :^V=/..?...=.s.?
   3efa0:	3da0af2a 3f7f35f9 3dbb6533 3f7eed12     *..=.5.?3e.=..~?
   3efb0:	3dd61304 3f7e98fd 3df0b773 3f7e39bc     ...=..~?s..=.9~?
   3efc0:	3e05a8a8 3f7dcf55 3e12efbb 3f7d59cb     ...>U.}?...>.Y}?
   3efd0:	3e20305c 3f7cd925 3e2d69f5 3f7c4d67     \0 >%.|?.i->gM|?
   3efe0:	3e3a9bf3 3f7bb698 3e47c5c2 3f7b14be     ..:>..{?..G>..{?
   3eff0:	3e54e6cd 3f7a67e2 3e61fe82 3f79b009     ..T>.gz?..a>..y?
   3f000:	3e6f0c4d 3f78ed3c 3e7c0f9c 3f781f84     M.o><.x?..|>..x?
   3f010:	3e8483ee 3f7746ea 3e8afa3e 3f766377     ...>.Fw?>..>wcv?
   3f020:	3e916a75 3f757536 3e97d44c 3f747c30     uj.>6uu?L..>0|t?
   3f030:	3e9e377a 3f737871 3ea493b7 3f726a03     z7.>qxs?...>.jr?
   3f040:	3eaae8bc 3f7150f4 3eb13641 3f702d4f     ...>.Pq?A6.>O-p?
   3f050:	3eb77c01 3f6eff21 3ebdb9b4 3f6dc676     .|.>!.n?...>v.m?
   3f060:	3ec3ef15 3f6c835e 3eca1bde 3f6b35e7     ...>^.l?...>.5k?
   3f070:	3ed03fc9 3f69de1e 3ed65a92 3f687c12     .?.>..i?.Z.>.|h?
   3f080:	3edc6bf3 3f670fd4 3ee273aa 3f659974     .k.>..g?.s.>t.e?
   3f090:	3ee87171 3f641901 3eee6507 3f628e8d     qq.>..d?.e.>..b?
   3f0a0:	3ef44e27 3f60fa28 3efa2c90 3f5f5be6     'N.>(.`?.,.>.[_?
   3f0b0:	3f000000 3f5db3d7 3f02e41b 3f5c020f     ...?..]?...?..\?
   3f0c0:	3f05c277 3f5a46a0 3f089af6 3f58819e     w..?.FZ?...?..X?
   3f0d0:	3f0b6d77 3f56b31d 3f0e39da 3f54db31     wm.?..V?.9.?1.T?
   3f0e0:	3f110000 3f52f9ef 3f13bfca 3f510f6c     ...?..R?...?l.Q?
   3f0f0:	3f167918 3f4f1bbd 3f192bcd 3f4d1ef8     .y.?..O?.+.?..M?
   3f100:	3f1bd7ca 3f4b1934 3f1e7cf1 3f490a88     ...?4.K?.|.?..I?
   3f110:	3f211b24 3f46f30a 3f23b246 3f44d2d1     $.!?..F?F.#?..D?
   3f120:	3f26423a 3f42a9f7 3f28cae3 3f407893     :B&?..B?..(?.x@?
   3f130:	3f2b4c25 3f3e3ebd 3f2dc5e3 3f3bfc8f     %L+?.>>?..-?..;?
   3f140:	3f303801 3f39b222 3f32a265 3f375f90     .80?".9?e.2?._7?
   3f150:	3f3504f3 3f3504f3 3f375f90 3f32a265     ..5?..5?._7?e.2?
   3f160:	3f39b222 3f303801 3f3bfc8f 3f2dc5e3     ".9?.80?..;?..-?
   3f170:	3f3e3ebd 3f2b4c25 3f407893 3f28cae3     .>>?%L+?.x@?..(?
   3f180:	3f42a9f7 3f26423a 3f44d2d1 3f23b246     ..B?:B&?..D?F.#?
   3f190:	3f46f30a 3f211b24 3f490a88 3f1e7cf1     ..F?$.!?..I?.|.?
   3f1a0:	3f4b1934 3f1bd7ca 3f4d1ef8 3f192bcd     4.K?...?..M?.+.?
   3f1b0:	3f4f1bbd 3f167918 3f510f6c 3f13bfca     ..O?.y.?l.Q?...?
   3f1c0:	3f52f9ef 3f110000 3f54db31 3f0e39da     ..R?...?1.T?.9.?
   3f1d0:	3f56b31d 3f0b6d77 3f58819e 3f089af6     ..V?wm.?..X?...?
   3f1e0:	3f5a46a0 3f05c277 3f5c020f 3f02e41b     .FZ?w..?..\?...?
   3f1f0:	3f5db3d7 3f000000 3f5f5be6 3efa2c90     ..]?...?.[_?.,.>
   3f200:	3f60fa28 3ef44e27 3f628e8d 3eee6507     (.`?'N.>..b?.e.>
   3f210:	3f641901 3ee87171 3f659974 3ee273aa     ..d?qq.>t.e?.s.>
   3f220:	3f670fd4 3edc6bf3 3f687c12 3ed65a92     ..g?.k.>.|h?.Z.>
   3f230:	3f69de1e 3ed03fc9 3f6b35e7 3eca1bde     ..i?.?.>.5k?...>
   3f240:	3f6c835e 3ec3ef15 3f6dc676 3ebdb9b4     ^.l?...>v.m?...>
   3f250:	3f6eff21 3eb77c01 3f702d4f 3eb13641     !.n?.|.>O-p?A6.>
   3f260:	3f7150f4 3eaae8bc 3f726a03 3ea493b7     .Pq?...>.jr?...>
   3f270:	3f737871 3e9e377a 3f747c30 3e97d44c     qxs?z7.>0|t?L..>
   3f280:	3f757536 3e916a75 3f766377 3e8afa3e     6uu?uj.>wcv?>..>
   3f290:	3f7746ea 3e8483ee 3f781f84 3e7c0f9c     .Fw?...>..x?..|>
   3f2a0:	3f78ed3c 3e6f0c4d 3f79b009 3e61fe82     <.x?M.o>..y?..a>
   3f2b0:	3f7a67e2 3e54e6cd 3f7b14be 3e47c5c2     .gz?..T>..{?..G>
   3f2c0:	3f7bb698 3e3a9bf3 3f7c4d67 3e2d69f5     ..{?..:>gM|?.i->
   3f2d0:	3f7cd925 3e20305c 3f7d59cb 3e12efbb     %.|?\0 >.Y}?...>
   3f2e0:	3f7dcf55 3e05a8a8 3f7e39bc 3df0b773     U.}?...>.9~?s..=
   3f2f0:	3f7e98fd 3dd61304 3f7eed12 3dbb6533     ..~?...=..~?3e.=
   3f300:	3f7f35f9 3da0af2a 3f7f73af 3d85f213     .5.?*..=.s.?...=
   3f310:	3f7fa62f 3d565e3a 3f7fcd79 3d20cee7     /..?:^V=y..?.. =
   3f320:	3f7fe98b 3cd6710a 3f7ffa63 3c5675bf     ...?.q.<c..?.uV<

0003f330 <logN400>:
	...
   3f340:	00080008 00080008 00100010 00150010     ................
   3f350:	00180015 0022001d 00000024              ......".$...

0003f35c <mdct_twiddles960>:
   3f35c:	3f7fffff 3f7fff8e 3f7ffe6a 3f7ffc93     ...?...?j..?...?
   3f36c:	3f7ffa07 3f7ff6c8 3f7ff2d6 3f7fee30     ...?...?...?0..?
   3f37c:	3f7fe8d6 3f7fe2c8 3f7fdc07 3f7fd493     ...?...?...?...?
   3f38c:	3f7fcc6b 3f7fc38f 3f7fba00 3f7fafbd     k..?...?...?...?
   3f39c:	3f7fa4c7 3f7f991d 3f7f8cc0 3f7f7fb0     ...?...?...?...?
   3f3ac:	3f7f71ec 3f7f6376 3f7f544b 3f7f446e     .q.?vc.?KT.?nD.?
   3f3bc:	3f7f33de 3f7f229a 3f7f10a3 3f7efdfa     .3.?.".?...?..~?
   3f3cc:	3f7eea9d 3f7ed68d 3f7ec1cb 3f7eac56     ..~?..~?..~?V.~?
   3f3dc:	3f7e962e 3f7e7f53 3f7e67c6 3f7e4f86     ..~?S.~?.g~?.O~?
   3f3ec:	3f7e3694 3f7e1cef 3f7e0298 3f7de78f     .6~?..~?..~?..}?
   3f3fc:	3f7dcbd3 3f7daf66 3f7d9246 3f7d7474     ..}?f.}?F.}?tt}?
   3f40c:	3f7d55f1 3f7d36bc 3f7d16d5 3f7cf63c     .U}?.6}?..}?<.|?
   3f41c:	3f7cd4f2 3f7cb2f6 3f7c9049 3f7c6ceb     ..|?..|?I.|?.l|?
   3f42c:	3f7c48db 3f7c241b 3f7bfea9 3f7bd887     .H|?.$|?..{?..{?
   3f43c:	3f7bb1b4 3f7b8a30 3f7b61fc 3f7b3917     ..{?0.{?.a{?.9{?
   3f44c:	3f7b0f82 3f7ae53d 3f7aba48 3f7a8ea2     ..{?=.z?H.z?..z?
   3f45c:	3f7a624d 3f7a3548 3f7a0794 3f79d930     Mbz?H5z?..z?0.y?
   3f46c:	3f79aa1d 3f797a5a 3f7949e9 3f7918c8     ..y?Zzy?.Iy?..y?
   3f47c:	3f78e6f9 3f78b47b 3f78814e 3f784d73     ..x?{.x?N.x?sMx?
   3f48c:	3f7818ea 3f77e3b2 3f77adcd 3f77773a     ..x?..w?..w?:ww?
   3f49c:	3f773ff9 3f77080a 3f76cf6e 3f769625     .?w?..w?n.v?%.v?
   3f4ac:	3f765c2f 3f76218c 3f75e63c 3f75aa40     /\v?.!v?<.u?@.u?
   3f4bc:	3f756d97 3f753042 3f74f241 3f74b394     .mu?B0u?A.t?..t?
   3f4cc:	3f74743b 3f743437 3f73f387 3f73b22c     ;tt?74t?..s?,.s?
   3f4dc:	3f737026 3f732d76 3f72ea1a 3f72a614     &ps?v-s?..r?..r?
   3f4ec:	3f726164 3f721c0a 3f71d605 3f718f57     dar?..r?..q?W.q?
   3f4fc:	3f714800 3f70ffff 3f70b755 3f706e02     .Hq?..p?U.p?.np?
   3f50c:	3f702406 3f6fd962 3f6f8e15 3f6f4220     .$p?b.o?..o? Bo?
   3f51c:	3f6ef584 3f6ea83f 3f6e5a53 3f6e0bc0     ..n??.n?SZn?..n?
   3f52c:	3f6dbc86 3f6d6ca5 3f6d1c1d 3f6ccaef     ..m?.lm?..m?..l?
   3f53c:	3f6c791b 3f6c26a1 3f6bd380 3f6b7fbb     .yl?.&l?..k?..k?
   3f54c:	3f6b2b50 3f6ad640 3f6a808c 3f6a2a32     P+k?@.j?..j?2*j?
   3f55c:	3f69d335 3f697b93 3f69234d 3f68ca64     5.i?.{i?M#i?d.h?
   3f56c:	3f6870d8 3f6816a8 3f67bbd5 3f676060     .ph?..h?..g?``g?
   3f57c:	3f670448 3f66a78f 3f664a33 3f65ec36     H.g?..f?3Jf?6.e?
   3f58c:	3f658d97 3f652e57 3f64ce77 3f646df5     ..e?W.e?w.d?.md?
   3f59c:	3f640cd4 3f63ab12 3f6348b1 3f62e5b0     ..d?..c?.Hc?..b?
   3f5ac:	3f628210 3f621dd1 3f61b8f3 3f615377     ..b?..b?..a?wSa?
   3f5bc:	3f60ed5c 3f6086a4 3f601f4e 3f5fb75b     \.`?..`?N.`?[._?
   3f5cc:	3f5f4ecb 3f5ee59e 3f5e7bd5 3f5e1170     .N_?..^?.{^?p.^?
   3f5dc:	3f5da66e 3f5d3ad2 3f5cce9a 3f5c61c6     n.]?.:]?..\?.a\?
   3f5ec:	3f5bf459 3f5b8651 3f5b17ae 3f5aa872     Y.[?Q.[?..[?r.Z?
   3f5fc:	3f5a389d 3f59c82e 3f595727 3f58e587     .8Z?..Y?'WY?..X?
   3f60c:	3f58734f 3f58007f 3f578d17 3f571918     OsX?..X?..W?..W?
   3f61c:	3f56a482 3f562f56 3f55b993 3f55433a     ..V?V/V?..U?:CU?
   3f62c:	3f54cc4b 3f5454c7 3f53dcae 3f536401     K.T?.TT?..S?.dS?
   3f63c:	3f52eabf 3f5270e9 3f51f67f 3f517b82     ..R?.pR?..Q?.{Q?
   3f64c:	3f50fff2 3f5083cf 3f50071a 3f4f89d2     ..P?..P?..P?..O?
   3f65c:	3f4f0bfa 3f4e8d90 3f4e0e94 3f4d8f09     ..O?..N?..N?..M?
   3f66c:	3f4d0eed 3f4c8e41 3f4c0d05 3f4b8b3b     ..M?A.L?..L?;.K?
   3f67c:	3f4b08e1 3f4a85f9 3f4a0283 3f497e7f     ..K?..J?..J?.~I?
   3f68c:	3f48f9ee 3f4874cf 3f47ef24 3f4768ed     ..H?.tH?$.G?.hG?
   3f69c:	3f46e229 3f465ada 3f45d300 3f454a9b     ).F?.ZF?..E?.JE?
   3f6ac:	3f44c1ac 3f443832 3f43ae2f 3f4323a2     ..D?28D?/.C?.#C?
   3f6bc:	3f42988d 3f420cef 3f4180c8 3f40f41a     ..B?..B?..A?..@?
   3f6cc:	3f4066e5 3f3fd928 3f3f4ae5 3f3ebc1b     .f@?(.??.J??..>?
   3f6dc:	3f3e2ccc 3f3d9cf7 3f3d0c9d 3f3c7bbe     .,>?..=?..=?.{<?
   3f6ec:	3f3bea5c 3f3b5875 3f3ac60a 3f3a331d     \.;?uX;?..:?.3:?
   3f6fc:	3f399fad 3f390bbb 3f387747 3f37e251     ..9?..9?Gw8?Q.7?
   3f70c:	3f374cda 3f36b6e3 3f36206b 3f358974     .L7?..6?k 6?t.5?
   3f71c:	3f34f1fd 3f345a07 3f33c193 3f3328a0     ..4?.Z4?..3?.(3?
   3f72c:	3f328f30 3f31f542 3f315ad8 3f30bff1     0.2?B.1?.Z1?..0?
   3f73c:	3f30248e 3f2f88af 3f2eec55 3f2e4f81     .$0?../?U..?.O.?
   3f74c:	3f2db232 3f2d1469 3f2c7627 3f2bd76b     2.-?i.-?'v,?k.+?
   3f75c:	3f2b3837 3f2a988b 3f29f867 3f2957cc     78+?..*?g.)?.W)?
   3f76c:	3f28b6ba 3f281532 3f277333 3f26d0bf     ..(?2.(?3s'?..&?
   3f77c:	3f262dd6 3f258a79 3f24e6a7 3f244261     .-&?y.%?..$?aB$?
   3f78c:	3f239da9 3f22f87d 3f2252df 3f21accf     ..#?}."?.R"?..!?
   3f79c:	3f21064d 3f205f5b 3f1fb7f8 3f1f1025     M.!?[_ ?...?%..?
   3f7ac:	3f1e67e2 3f1dbf30 3f1d1610 3f1c6c81     .g.?0..?...?.l.?
   3f7bc:	3f1bc284 3f1b181a 3f1a6d43 3f19c200     ...?...?Cm.?...?
   3f7cc:	3f191651 3f186a36 3f17bdb1 3f1710c1     Q..?6j.?...?...?
   3f7dc:	3f166367 3f15b5a3 3f150776 3f1458e1     gc.?...?v..?.X.?
   3f7ec:	3f13a9e4 3f12fa7f 3f124ab3 3f119a80     ...?...?.J.?...?
   3f7fc:	3f10e9e7 3f1038e8 3f0f8784 3f0ed5bb     ...?.8.?...?...?
   3f80c:	3f0e238e 3f0d70fe 3f0cbe0a 3f0c0ab3     .#.?.p.?...?...?
   3f81c:	3f0b56fa 3f0aa2df 3f09ee63 3f093986     .V.?...?c..?.9.?
   3f82c:	3f088449 3f07ceac 3f0718af 3f066254     I..?...?...?Tb.?
   3f83c:	3f05ab9b 3f04f483 3f043d0f 3f03853d     ...?...?.=.?=..?
   3f84c:	3f02cd0f 3f021486 3f015ba1 3f00a261     ...?...?.[.?a..?
   3f85c:	3effd18f 3efe5da7 3efce90e 3efb73c2     ...>.].>...>.s.>
   3f86c:	3ef9fdc6 3ef8871b 3ef70fc1 3ef597ba     ...>...>...>...>
   3f87c:	3ef41f06 3ef2a5a8 3ef12b9e 3eefb0ec     ...>...>.+.>...>
   3f88c:	3eee3591 3eecb990 3eeb3ce8 3ee9bf9a     .5.>...>.<.>...>
   3f89c:	3ee841a9 3ee6c315 3ee543df 3ee3c408     .A.>...>.C.>...>
   3f8ac:	3ee24391 3ee0c27c 3edf40c8 3eddbe78     .C.>|..>.@.>x..>
   3f8bc:	3edc3b8c 3edab806 3ed933e6 3ed7af2e     .;.>...>.3.>...>
   3f8cc:	3ed629df 3ed4a3f9 3ed31d7d 3ed1966e     .).>...>}..>n..>
   3f8dc:	3ed00ecc 3ece8697 3eccfdd2 3ecb747d     ...>...>...>}t.>
   3f8ec:	3ec9ea99 3ec86027 3ec6d528 3ec5499f     ...>'`.>(..>.I.>
   3f8fc:	3ec3bd8a 3ec230ec 3ec0a3c6 3ebf1619     ...>.0.>...>...>
   3f90c:	3ebd87e6 3ebbf92d 3eba69f1 3eb8da32     ...>-..>.i.>2..>
   3f91c:	3eb749f1 3eb5b92f 3eb427ee 3eb2962f     .I.>/..>.'.>/..>
   3f92c:	3eb103f2 3eaf7139 3eadde04 3eac4a56     ...>9q.>...>VJ.>
   3f93c:	3eaab62f 3ea92190 3ea78c7a 3ea5f6ef     /..>.!.>z..>...>
   3f94c:	3ea460ef 3ea2ca7c 3ea13397 3e9f9c40     .`.>|..>.3.>@..>
   3f95c:	3e9e047a 3e9c6c44 3e9ad3a1 3e993a91     z..>Dl.>...>.:.>
   3f96c:	3e97a116 3e960730 3e946ce1 3e92d229     ...>0..>.l.>)..>
   3f97c:	3e91370b 3e8f9b87 3e8dff9e 3e8c6351     .7.>...>...>Qc.>
   3f98c:	3e8ac6a2 3e892991 3e878c20 3e85ee50     ...>.).> ..>P..>
   3f99c:	3e845022 3e82b197 3e8112b0 3e7ee6de     "P.>...>...>..~>
   3f9ac:	3e7ba7a9 3e7867c3 3e75272f 3e71e5ee     ..{>.gx>/'u>..q>
   3f9bc:	3e6ea404 3e6b6173 3e681e3c 3e64da62     ..n>sak><.h>b.d>
   3f9cc:	3e6195e8 3e5e50cf 3e5b0b1a 3e57c4cc     ..a>.P^>..[>..W>
   3f9dc:	3e547de6 3e51366b 3e4dee5d 3e4aa5bf     .}T>k6Q>].M>..J>
   3f9ec:	3e475c92 3e4412da 3e40c897 3e3d7dce     .\G>..D>..@>.}=>
   3f9fc:	3e3a3280 3e36e6ae 3e339a5d 3e304d8d     .2:>..6>].3>.M0>
   3fa0c:	3e2d0042 3e29b27d 3e266442 3e231591     B.->}.)>Bd&>..#>
   3fa1c:	3e1fc66e 3e1c76db 3e1926da 3e15d66d     n..>.v.>.&.>m..>
   3fa2c:	3e128598 3e0f345b 3e0be2ba 3e0890b7     ...>[4.>...>...>
   3fa3c:	3e053e54 3e01eb94 3dfd30f0 3df68a06     T>.>...>.0.=...=
   3fa4c:	3defe271 3de93a33 3de2914f 3ddbe7cf     q..=3:.=O..=...=
   3fa5c:	3dd53db5 3dce9303 3dc7e7c0 3dc13bf2     .=.=...=...=.;.=
   3fa6c:	3dba8f9c 3db3e2c3 3dad356c 3da6879b     ...=...=l5.=...=
   3fa7c:	3d9fd955 3d992a9f 3d927b7e 3d8bcbf6     U..=.*.=~{.=...=
   3fa8c:	3d851c0b 3d7cd787 3d6f7646 3d62145d     ...=..|=Fvo=].b=
   3fa9c:	3d54b1d6 3d474eb9 3d39eb10 3d2c86e5     ..T=.NG=..9=..,=
   3faac:	3d1f2240 3d11bd2c 3d0457b2 3cede3b5     @".=,..=.W.=...<
   3fabc:	3cd31760 3cb84a76 3c9d7d0b 3c82af32     `..<vJ.<.}.<2..<
   3facc:	3c4fc1fa 3c1a24fe 3bc90f2a 3b3ba799     ..O<.$.<*..;..;;
   3fadc:	b9d67d2e bb7146d2 bbe3deab bc278ca6     .}...Fq.......'.
   3faec:	bc5d2981 bc8962e1 bca430a0 bcbefdec     .)]..b...0......
   3fafc:	bcd9cab3 bcf496e0 bd07b131 bd151693     ........1.......
   3fb0c:	bd227b8c bd2fe013 bd3d441e bd4aa7a5     .{".../..D=...J.
   3fb1c:	bd580a9d bd656cfe bd72cebe bd8017ea     ..X..le...r.....
   3fb2c:	bd86c81b bd8d77ed bd94275c bd9ad663     .....w..\'..c...
   3fb3c:	bda184fd bda83326 bdaee0d9 bdb58e11     ....&3..........
   3fb4c:	bdbc3aca bdc2e6fe bdc992aa bdd03dc8     .:...........=..
   3fb5c:	bdd6e854 bddd924a bde43ba4 bdeae45d     T...J....;..]...
   3fb6c:	bdf18c72 bdf833dd bdfeda9a be02c052     r....3......R...
   3fb7c:	be0612fc be096547 be0cb732 be1008ba     ....Ge..2.......
   3fb8c:	be1359dd be16aa98 be19faea be1d4ad0     .Y...........J..
   3fb9c:	be209a47 be23e94e be2737e1 be2a8600     G. .N.#..7'...*.
   3fbac:	be2dd3a6 be3120d3 be346d83 be37b9b5     ..-.. 1..m4...7.
   3fbbc:	be3b0565 be3e5093 be419b3a be44e55a     e.;..P>.:.A.Z.D.
   3fbcc:	be482ef0 be4b77f9 be4ec074 be52085d     ..H..wK.t.N.].R.
   3fbdc:	be554fb3 be589673 be5bdc9c be5f222a     .OU.s.X...[.*"_.
   3fbec:	be62671b be65ab6d be68ef1f be6c322c     .gb.m.e...h.,2l.
   3fbfc:	be6f7494 be72b654 be75f76a be7937d3     .to.T.r.j.u..7y.
   3fc0c:	be7c778d be7fb696 be817a75 be831945     .w|.....uz..E...
   3fc1c:	be84b7b9 be8655d0 be87f388 be8990e1     .....U..........
   3fc2c:	be8b2dda be8cca70 be8e66a4 be900274     .-..p....f..t...
   3fc3c:	be919ddf be9338e4 be94d381 be966db6     .....8.......m..
   3fc4c:	be980781 be99a0e2 be9b39d7 be9cd25f     .........9.._...
   3fc5c:	be9e6a79 bea00223 bea1995e bea33026     yj..#...^...&0..
   3fc6c:	bea4c67d bea65c60 bea7f1ce bea986c6     }...`\..........
   3fc7c:	beab1b47 beacaf50 beae42e0 beafd5f5     G...P....B......
   3fc8c:	beb1688f beb2faad beb48c4d beb61d6e     .h......M...n...
   3fc9c:	beb7ae10 beb93e30 bebacdcf bebc5cea     ....0>.......\..
   3fcac:	bebdeb82 bebf7994 bec1071f bec29423     .....y......#...
   3fcbc:	bec4209f bec5ac91 bec737f8 bec8c2d3     . .......7......
   3fccc:	beca4d22 becbd6e2 becd6013 becee8b5     "M.......`......
   3fcdc:	bed070c5 bed1f842 bed37f2d bed50583     .p..B...-.......
   3fcec:	bed68b43 bed8106d bed994ff bedb18f9     C...m...........
   3fcfc:	bedc9c59 bede1f1d bedfa146 bee122d3     Y.......F...."..
   3fd0c:	bee2a3c1 bee42410 bee5a3be bee722cc     .....$......."..
   3fd1c:	bee8a138 beea1f00 beeb9c24 beed18a2     8.......$.......
   3fd2c:	beee947a bef00fab bef18a33 bef30412     z.......3.......
   3fd3c:	bef47d46 bef5f5cf bef76daa bef8e4d9     F}.......m......
   3fd4c:	befa5b58 befbd128 befd4647 befebab5     X[..(...GF......
   3fd5c:	bf001738 bf00d0bb bf0189e4 bf0242b2     8............B..
   3fd6c:	bf02fb25 bf03b33b bf046af6 bf052253     %...;....j..S"..
   3fd7c:	bf05d953 bf068ff5 bf074638 bf07fc1d     S.......8F......
   3fd8c:	bf08b1a2 bf0966c7 bf0a1b8c bf0acff0     .....f..........
   3fd9c:	bf0b83f3 bf0c3793 bf0cead1 bf0d9dac     .....7..........
   3fdac:	bf0e5024 bf0f0238 bf0fb3e8 bf106532     $P..8.......2e..
   3fdbc:	bf111618 bf11c697 bf1276b0 bf132663     .........v..c&..
   3fdcc:	bf13d5ae bf148491 bf15330d bf15e11f     .........3......
   3fddc:	bf168ec8 bf173c08 bf17e8dd bf189548     .....<......H...
   3fdec:	bf194148 bf19ecdc bf1a9804 bf1b42c0     HA...........B..
   3fdfc:	bf1bed0f bf1c96f0 bf1d4063 bf1de968     ........c@..h...
   3fe0c:	bf1e91fe bf1f3a25 bf1fe1dc bf208923     ....%:......#. .
   3fe1c:	bf212ffa bf21d65f bf227c52 bf2321d4     ./!._.!.R|"..!#.
   3fe2c:	bf23c6e3 bf246b7f bf250fa7 bf25b35c     ..#..k$...%.\.%.
   3fe3c:	bf26569d bf26f968 bf279bbf bf283da0     .V&.h.&...'..=(.
   3fe4c:	bf28df0b bf297fff bf2a207d bf2ac083     ..(...).} *...*.
   3fe5c:	bf2b6011 bf2bff27 bf2c9dc4 bf2d3be8     .`+.'.+...,..;-.
   3fe6c:	bf2dd992 bf2e76c3 bf2f1379 bf2fafb4     ..-..v..y./.../.
   3fe7c:	bf304b73 bf30e6b7 bf31817f bf321bcb     sK0...0...1...2.
   3fe8c:	bf32b599 bf334eea bf33e7bd bf348012     ..2..N3...3...4.
   3fe9c:	bf3517e8 bf35af3f bf364616 bf36dc6e     ..5.?.5..F6.n.6.
   3feac:	bf377245 bf38079c bf389c71 bf3930c5     Er7...8.q.8..09.
   3febc:	bf39c496 bf3a57e6 bf3aeab2 bf3b7cfc     ..9..W:...:..|;.
   3fecc:	bf3c0ec2 bf3ca003 bf3d30c1 bf3dc0fa     ..<...<..0=...=.
   3fedc:	bf3e50ad bf3edfdb bf3f6e83 bf3ffca5     .P>...>..n?...?.
   3feec:	bf408a40 bf411753 bf41a3e0 bf422fe4     @.@.S.A...A../B.
   3fefc:	bf42bb60 bf434653 bf43d0be bf445a9e     `.B.SFC...C..ZD.
   3ff0c:	bf44e3f6 bf456cc2 bf45f505 bf467cbc     ..D..lE...E..|F.
   3ff1c:	bf4703e8 bf478a89 bf48109d bf489625     ..G...G...H.%.H.
   3ff2c:	bf491b20 bf499f8e bf4a236f bf4aa6c1      .I...I.o#J...J.
   3ff3c:	bf4b2986 bf4babbc bf4c2d63 bf4cae7a     .)K...K.c-L.z.L.
   3ff4c:	bf4d2f02 bf4daefa bf4e2e62 bf4ead39     ./M...M.b.N.9.N.
   3ff5c:	bf4f2b7e bf4fa933 bf502655 bf50a2e6     ~+O.3.O.U&P...P.
   3ff6c:	bf511ee4 bf519a50 bf521528 bf528f6d     ..Q.P.Q.(.R.m.R.
   3ff7c:	bf53091e bf53823b bf53fac3 bf5472b7     ..S.;.S...S..rT.
   3ff8c:	bf54ea16 bf5560df bf55d712 bf564cb0     ..T..`U...U..LV.
   3ff9c:	bf56c1b7 bf573627 bf57aa00 bf581d42     ..V.'6W...W.B.X.
   3ffac:	bf588fec bf5901fe bf597378 bf59e459     ..X...Y.xsY.Y.Y.
   3ffbc:	bf5a54a2 bf5ac451 bf5b3366 bf5ba1e2     .TZ.Q.Z.f3[...[.
   3ffcc:	bf5c0fc3 bf5c7d0a bf5ce9b7 bf5d55c8     ..\..}\...\..U].
   3ffdc:	bf5dc13e bf5e2c18 bf5e9657 bf5efff9     >.]..,^.W.^...^.
   3ffec:	bf5f68ff bf5fd168 bf603933 bf60a062     .h_.h._.39`.b.`.
   3fffc:	bf6106f3 bf616ce5 bf61d23a bf6236f0     ..a..la.:.a..6b.
   4000c:	bf629b08 bf62fe80 bf636159 bf63c392     ..b...b.Yac...c.
   4001c:	bf64252c bf648625 bf64e67e bf654637     ,%d.%.d.~.d.7Fe.
   4002c:	bf65a54e bf6603c5 bf66619a bf66becd     N.e...f..af...f.
   4003c:	bf671b5e bf67774d bf67d29a bf682d44     ^.g.Mwg...g.D-h.
   4004c:	bf68874b bf68e0ae bf69396f bf69918b     K.h...h.o9i...i.
   4005c:	bf69e904 bf6a3fd9 bf6a9609 bf6aeb94     ..i..?j...j...j.
   4006c:	bf6b407b bf6b94bc bf6be859 bf6c3b4f     {@k...k.Y.k.O;l.
   4007c:	bf6c8da0 bf6cdf4b bf6d304f bf6d80ad     ..l.K.l.O0m...m.
   4008c:	bf6dd065 bf6e1f75 bf6e6ddf bf6ebba1     e.m.u.n..mn...n.
   4009c:	bf6f08bb bf6f552e bf6fa0f8 bf6fec1b     ..o..Uo...o...o.
   400ac:	bf703695 bf708067 bf70c990 bf71120f     .6p.g.p...p...q.
   400bc:	bf7159e6 bf71a113 bf71e797 bf722d71     .Yq...q...q.q-r.
   400cc:	bf7272a0 bf72b726 bf72fb01 bf733e32     .rr.&.r...r.2>s.
   400dc:	bf7380b8 bf73c294 bf7403c4 bf744449     ..s...s...t.IDt.
   400ec:	bf748422 bf74c350 bf7501d2 bf753fa8     ".t.P.t...u..?u.
   400fc:	bf757cd2 bf75b950 bf75f521 bf763045     .|u.P.u.!.u.E0v.
   4010c:	bf766abd bf76a488 bf76dda6 bf771616     .jv...v...v...w.
   4011c:	bf774dd9 bf7784ef bf77bb57 bf77f111     .Mw...w.W.w...w.
   4012c:	bf78261d bf785a7a bf788e2a bf78c12b     .&x.zZx.*.x.+.x.
   4013c:	bf78f37d bf792521 bf795616 bf79865c     }.x.!%y..Vy.\.y.
   4014c:	bf79b5f2 bf79e4da bf7a1312 bf7a409a     ..y...y...z..@z.
   4015c:	bf7a6d73 bf7a999d bf7ac516 bf7aefdf     smz...z...z...z.
   4016c:	bf7b19f8 bf7b4361 bf7b6c1a bf7b9422     ..{.aC{..l{.".{.
   4017c:	bf7bbb7a bf7be220 bf7c0817 bf7c2d5c     z.{. .{...|.\-|.
   4018c:	bf7c51f0 bf7c75d3 bf7c9905 bf7cbb86     .Q|..u|...|...|.
   4019c:	bf7cdd55 bf7cfe73 bf7d1edf bf7d3e9a     U.|.s.|...}..>}.
   401ac:	bf7d5da3 bf7d7bfa bf7d999f bf7db692     .]}..{}...}...}.
   401bc:	bf7dd2d3 bf7dee62 bf7e093f bf7e2369     ..}.b.}.?.~.i#~.
   401cc:	bf7e3ce1 bf7e55a7 bf7e6dba bf7e851b     .<~..U~..m~...~.
   401dc:	bf7e9bc9 bf7eb1c4 bf7ec70d bf7edba2     ..~...~...~...~.
   401ec:	bf7eef85 bf7f02b5 bf7f1532 bf7f26fc     ..~.....2....&..
   401fc:	bf7f3813 bf7f4876 bf7f5827 bf7f6724     .8..vH..'X..$g..
   4020c:	bf7f756e bf7f8305 bf7f8fe8 bf7f9c19     nu..............
   4021c:	bf7fa795 bf7fb25f bf7fbc74 bf7fc5d7     ...._...t.......
   4022c:	bf7fce85 bf7fd681 bf7fddc8 bf7fe45d     ............]...
   4023c:	bf7fea3d bf7fef6a bf7ff3e3 bf7ff7a9     =...j...........
   4024c:	bf7ffabb bf7ffd19 bf7ffec4 bf7fffbb     ................
   4025c:	3f7ffffa 3f7ffe39 3f7ff9a9 3f7ff24b     ...?9..?...?K..?
   4026c:	3f7fe81e 3f7fdb23 3f7fcb59 3f7fb8c1     ...?#..?Y..?...?
   4027c:	3f7fa35b 3f7f8b28 3f7f7027 3f7f525a     [..?(..?'p.?ZR.?
   4028c:	3f7f31bf 3f7f0e58 3f7ee825 3f7ebf26     .1.?X..?%.~?&.~?
   4029c:	3f7e935c 3f7e64c8 3f7e3369 3f7dff41     \.~?.d~?i3~?A.}?
   402ac:	3f7dc84f 3f7d8e96 3f7d5214 3f7d12cb     O.}?..}?.R}?..}?
   402bc:	3f7cd0bc 3f7c8be7 3f7c444d 3f7bf9ef     ..|?..|?MD|?..{?
   402cc:	3f7baccd 3f7b5ce9 3f7b0a43 3f7ab4dd     ..{?.\{?C.{?..z?
   402dc:	3f7a5cb6 3f7a01d1 3f79a42e 3f7943ce     .\z?..z?..y?.Cy?
   402ec:	3f78e0b2 3f787adc 3f78124c 3f77a704     ..x?.zx?L.x?..w?
   402fc:	3f773904 3f76c84f 3f7654e4 3f75dec6     .9w?O.v?.Tv?..u?
   4030c:	3f7565f6 3f74ea75 3f746c44 3f73eb65     .eu?u.t?Dlt?e.s?
   4031c:	3f7367da 3f72e1a3 3f7258c2 3f71cd39     .gs?..r?.Xr?9.q?
   4032c:	3f713f09 3f70ae34 3f701abb 3f6f84a0     .?q?4.p?..p?..o?
   4033c:	3f6eebe4 3f6e508a 3f6db293 3f6d1201     ..n?.Pn?..m?..m?
   4034c:	3f6c6ed5 3f6bc911 3f6b20b7 3f6a75c9     .nl?..k?. k?.uj?
   4035c:	3f69c849 3f691839 3f68659b 3f67b06f     I.i?9.i?.eh?o.g?
   4036c:	3f66f8ba 3f663e7c 3f6581b8 3f64c26f     ..f?|>f?..e?o.d?
   4037c:	3f6400a4 3f633c5a 3f627591 3f61ac4c     ..d?Z<c?.ub?L.a?
   4038c:	3f60e08e 3f601259 3f5f41ae 3f5e6e91     ..`?Y.`?.A_?.n^?
   4039c:	3f5d9903 3f5cc108 3f5be6a0 3f5b09cf     ..]?..\?..[?..[?
   403ac:	3f5a2a98 3f5948fb 3f5864fd 3f577e9f     .*Z?.HY?.dX?.~W?
   403bc:	3f5695e5 3f55aad0 3f54bd63 3f53cda1     ..V?..U?c.T?..S?
   403cc:	3f52db8c 3f51e727 3f50f075 3f4ff779     ..R?'.Q?u.P?y.O?
   403dc:	3f4efc34 3f4dfeab 3f4cfedf 3f4bfcd4     4.N?..M?..L?..K?
   403ec:	3f4af88c 3f49f20a 3f48e952 3f47de65     ..J?..I?R.H?e.G?
   403fc:	3f46d147 3f45c1fb 3f44b084 3f439ce5     G.F?..E?..D?..C?
   4040c:	3f428720 3f416f3a 3f405534 3f3f3913      .B?:oA?4U@?.9??
   4041c:	3f3e1ad8 3f3cfa88 3f3bd826 3f3ab3b4     ..>?..<?&.;?..:?
   4042c:	3f398d36 3f3864af 3f373a22 3f360d93     6.9?.d8?":7?..6?
   4043c:	3f34df05 3f33ae7c 3f327bf9 3f314782     ..4?|.3?.{2?.G1?
   4044c:	3f301119 3f2ed8c2 3f2d9e7f 3f2c6256     ..0?...?..-?Vb,?
   4045c:	3f2b2448 3f29e45a 3f28a290 3f275eeb     H$+?Z.)?..(?.^'?
   4046c:	3f261971 3f24d225 3f238909 3f223e23     q.&?%.$?..#?#>"?
   4047c:	3f20f175 3f1fa304 3f1e52d2 3f1d00e4     u. ?...?.R.?...?
   4048c:	3f1bad3d 3f1a57e1 3f1900d3 3f17a819     =..?.W.?...?...?
   4049c:	3f164db4 3f14f1aa 3f1393fd 3f1234b2     .M.?...?...?.4.?
   404ac:	3f10d3cc 3f0f7150 3f0e0d42 3f0ca7a4     ...?Pq.?B..?...?
   404bc:	3f0b407c 3f09d7cd 3f086d9a 3f0701e9     |@.?...?.m.?...?
   404cc:	3f0594bd 3f042619 3f02b603 3f01447e     ...?.&.?...?~D.?
   404dc:	3effa31c 3efcba6e 3ef9cefa 3ef6e0ca     ...>n..>...>...>
   404ec:	3ef3efe4 3ef0fc51 3eee061a 3eeb0d47     ...>Q..>...>G..>
   404fc:	3ee811e0 3ee513ed 3ee21377 3edf1087     ...>...>w..>...>
   4050c:	3edc0b24 3ed90358 3ed5f92a 3ed2eca4     $..>X..>*..>...>
   4051c:	3ecfddcd 3eccccaf 3ec9b952 3ec6a3bf     ...>...>R..>...>
   4052c:	3ec38bfe 3ec07218 3ebd5616 3eba3800     ...>.r.>.V.>.8.>
   4053c:	3eb717e0 3eb3f5bd 3eb0d1a1 3eadab95     ...>...>...>...>
   4054c:	3eaa83a2 3ea759cf 3ea42e27 3ea100b2     ...>.Y.>'..>...>
   4055c:	3e9dd179 3e9aa085 3e976ddf 3e94398f     y..>...>.m.>.9.>
   4056c:	3e9103a0 3e8dcc1a 3e8a9305 3e87586b     ...>...>...>kX.>
   4057c:	3e841c56 3e80decd 3e7b3fb6 3e74bf10     V..>...>.?{>..t>
   4058c:	3e6e3bbb 3e67b5c9 3e612d4d 3e5aa259     .;n>..g>M-a>Y.Z>
   4059c:	3e5414ff 3e4d8551 3e46f363 3e405f46     ..T>Q.M>c.F>F_@>
   405ac:	3e39c90d 3e3330ca 3e2c9690 3e25fa72     ..9>.03>..,>r.%>
   405bc:	3e1f5c82 3e18bcd2 3e121b76 3e0b787f     .\.>...>v..>.x.>
   405cc:	3e04d401 3dfc5c1d 3def0d72 3de1bc29     ...>.\.=r..=)..=
   405dc:	3dd46866 3dc7124e 3db9ba08 3dac5fb8     fh.=N..=...=._.=
   405ec:	3d9f0384 3d91a592 3d844607 3d6dca12     ...=...=.F.=..m=
   405fc:	3d53057a 3d383e91 3d1d75a4 3d02aafc     z.S=.>8=.u.=...=
   4060c:	3ccfbdca 3c9a2356 3c490e61 3bbba7c5     ...<V#.<a.I<...;
   4061c:	ba567a3d bbf14609 bc63dd12 bca78a50     =zV..F....c.P...
   4062c:	bcdd2441 bd095de3 bd242823 bd3ef096     A$...]..#($...>.
   4063c:	bd59b6f2 bd747aea bd879e1a bd94fd42     ..Y..zt.....B...
   4064c:	bda25ac8 bdafb686 bdbd1057 bdca6816     .Z......W....h..
   4065c:	bdd7bd9b bde510c3 bdf26169 bdffaf65     ........ia..e...
   4066c:	be067d4a be0d2168 be13c3fa be1a64ed     J}..h!.......d..
   4067c:	be21042e be27a1ac be2e3d53 be34d710     ..!...'.S=....4.
   4068c:	be3b6ed2 be420486 be489819 be4f2979     .n;...B...H.y)O.
   4069c:	be55b894 be5c4556 be62cfae be695789     ..U.VE\...b..Wi.
   406ac:	be6fdcd6 be765f80 be7cdf78 be81ae54     ..o.._v.x.|.T...
   406bc:	be84eb81 be882738 be8b6172 be8e9a24     ....8'..ra..$...
   406cc:	be91d145 be9506cd be983ab3 be9b6cee     E........:...l..
   406dc:	be9e9d74 bea1cc3d bea4f940 bea82473     t...=...@...s$..
   406ec:	beab4dcf beae7549 beb19ada beb4be78     .M..Iu......x...
   406fc:	beb7e01b bebaffba bebe1d4b bec138c7     ........K....8..
   4070c:	bec45225 bec7695b beca7e61 becd9130     %R..[i..a~..0...
   4071c:	bed0a1bc bed3b000 bed6bbf1 bed9c587     ................
   4072c:	bedcccba bedfd181 bee2d3d3 bee5d3a9     ................
   4073c:	bee8d0fa beebcbbd beeec3ea bef1b978     ............x...
   4074c:	bef4ac60 bef79c9a befa8a1c befd74df     `............t..
   4075c:	bf002e6d bf01a103 bf03122d bf0481e6     m.......-.......
   4076c:	bf05f02c bf075cfa bf08c84c bf0a321e     ,....\..L....2..
   4077c:	bf0b9a6c bf0d0132 bf0e666c bf0fca17     l...2...lf......
   4078c:	bf112c2d bf128cac bf13eb90 bf1548d5     -,...........H..
   4079c:	bf16a476 bf17fe71 bf1956c0 bf1aad62     v...q....V..b...
   407ac:	bf1c0251 bf1d558a bf1ea709 bf1ff6cb     Q....U..........
   407bc:	bf2144cc bf229109 bf23db7c bf252424     .D!...".|.#.$$%.
   407cc:	bf266afd bf27b002 bf28f330 bf2a3484     .j&...'.0.(..4*.
   407dc:	bf2b73fa bf2cb18f bf2ded3f bf2f2707     .s+...,.?.-..'/.
   407ec:	bf305ee3 bf3194d0 bf32c8ca bf33face     .^0...1...2...3.
   407fc:	bf352ada bf3658e8 bf3784f7 bf38af02     .*5..X6...7...8.
   4080c:	bf39d707 bf3afd03 bf3c20f1 bf3d42cf     ..9...:.. <..B=.
   4081c:	bf3e629a bf3f804f bf409be9 bf41b568     .b>.O.?...@.h.A.
   4082c:	bf42ccc6 bf43e201 bf44f517 bf460603     ..B...C...D...F.
   4083c:	bf4714c4 bf482156 bf492bb6 bf4a33e1     ..G.V!H..+I..3J.
   4084c:	bf4b39d4 bf4c3d8d bf4d3f09 bf4e3e44     .9K..=L..?M.D>N.
   4085c:	bf4f3b3d bf5035f0 bf512e5a bf522479     =;O..5P.Z.Q.y$R.
   4086c:	bf53184a bf5409ca bf54f8f7 bf55e5ce     J.S...T...T...U.
   4087c:	bf56d04d bf57b870 bf589e37 bf59819c     M.V.p.W.7.X...Y.
   4088c:	bf5a62a0 bf5b413e bf5c1d75 bf5cf741     .bZ.>A[.u.\.A.\.
   4089c:	bf5dcea2 bf5ea394 bf5f7614 bf604622     ..]...^..v_."F`.
   408ac:	bf6113ba bf61ded9 bf62a77f bf636da9     ..a...a...b..mc.
   408bc:	bf643154 bf64f27e bf65b126 bf666d49     T1d.~.d.&.e.Imf.
   408cc:	bf6726e5 bf67ddf8 bf689280 bf69447b     .&g...g...h.{Di.
   408dc:	bf69f3e8 bf6aa0c3 bf6b4b0c bf6bf2c0     ..i...j..Kk...k.
   408ec:	bf6c97de bf6d3a64 bf6dda50 bf6e77a0     ..l.d:m.P.m..wn.
   408fc:	bf6f1253 bf6faa66 bf703fd9 bf70d2a9     S.o.f.o..?p...p.
   4090c:	bf7162d5 bf71f05b bf727b3a bf730371     .bq.[.q.:{r.q.s.
   4091c:	bf7388fd bf740bde bf748c11 bf750996     ..s...t...t...u.
   4092c:	bf75846b bf75fc8f bf767200 bf76e4bd     k.u...u..rv...v.
   4093c:	bf7754c6 bf77c218 bf782cb2 bf789493     .Tw...w..,x...x.
   4094c:	bf78f9bb bf795c28 bf79bbd9 bf7a18cd     ..x.(\y...y...z.
   4095c:	bf7a7302 bf7aca79 bf7b1f2f bf7b7124     .sz.y.z./.{.$q{.
   4096c:	bf7bc058 bf7c0cc9 bf7c5676 bf7c9d5f     X.{...|.vV|._.|.
   4097c:	bf7ce182 bf7d22e0 bf7d6177 bf7d9d47     ..|.."}.wa}.G.}.
   4098c:	bf7dd64f bf7e0c8e bf7e4004 bf7e70b0     O.}...~..@~..p~.
   4099c:	bf7e9e92 bf7ec9a9 bf7ef1f5 bf7f1775     ..~...~...~.u...
   409ac:	bf7f3a29 bf7f5a10 bf7f772b bf7f9178     ):...Z..+w..x...
   409bc:	bf7fa8f8 bf7fbdaa bf7fcf8f bf7fdea5     ................
   409cc:	bf7feaed bf7ff466 bf7ffb11 bf7ffeed     ....f...........
   409dc:	3f7fffea 3f7ff8e5 3f7fe6a6 3f7fc92d     ...?...?...?-..?
   409ec:	3f7fa07c 3f7f6c95 3f7f2d79 3f7ee32c     |..?.l.?y-.?,.~?
   409fc:	3f7e8db1 3f7e2d0b 3f7dc13f 3f7d4a52     ..~?.-~??.}?RJ}?
   40a0c:	3f7cc848 3f7c3b28 3f7ba2f7 3f7affbd     H.|?(;|?..{?..z?
   40a1c:	3f7a5180 3f799848 3f78d41e 3f780509     .Qz?H.y?..x?..x?
   40a2c:	3f772b13 3f764646 3f7556ac 3f745c4e     .+w?FFv?.Vu?N\t?
   40a3c:	3f735738 3f724776 3f712d13 3f70081c     8Ws?vGr?.-q?..p?
   40a4c:	3f6ed89e 3f6d9ea5 3f6c5a40 3f6b0b7e     ..n?..m?@Zl?~.k?
   40a5c:	3f69b26b 3f684f19 3f66e196 3f6569f2     k.i?.Oh?..f?.ie?
   40a6c:	3f63e83e 3f625c8b 3f60c6ea 3f5f276d     >.c?.\b?..`?m'_?
   40a7c:	3f5d7e26 3f5bcb28 3f5a0e85 3f584853     &~]?(.[?..Z?SHX?
   40a8c:	3f5678a3 3f549f8b 3f52bd20 3f50d176     .xV?..T? .R?v.P?
   40a9c:	3f4edca3 3f4cdebd 3f4ad7db 3f48c813     ..N?..L?..J?..H?
   40aac:	3f46af7c 3f448e2e 3f426441 3f4031ce     |.F?..D?AdB?.1@?
   40abc:	3f3df6ec 3f3bb3b4 3f396842 3f3714ad     ..=?..;?Bh9?..7?
   40acc:	3f34b910 3f325586 3f2fea29 3f2d7715     ..4?.U2?)./?.w-?
   40adc:	3f2afc65 3f287a35 3f25f0a1 3f235fc6     e.*?5z(?..%?._#?
   40aec:	3f20c7c0 3f1e28ac 3f1b82a9 3f18d5d4     .. ?.(.?...?...?
   40afc:	3f16224a 3f13682a 3f10a793 3f0de0a4     J".?*h.?...?...?
   40b0c:	3f0b137b 3f084039 3f0566fd 3f0287e7     {..?9@.?.f.?...?
   40b1c:	3eff462d 3ef9715b 3ef39197 3eeda724     -F.>[q.>...>$..>
   40b2c:	3ee7b245 3ee1b33c 3edbaa4c 3ed597ba     E..><..>L..>...>
   40b3c:	3ecf7bc9 3ec956be 3ec328df 3ebcf270     .{.>.V.>.(.>p..>
   40b4c:	3eb6b3b7 3eb06cfb 3eaa1e81 3ea3c892     ...>.l.>...>...>
   40b5c:	3e9d6b73 3e97076c 3e909cc5 3e8a2bc7     sk.>l..>...>.+.>
   40b6c:	3e83b4b9 3e7a6fc7 3e6d6b21 3e605c11     ...>.oz>!km>.\`>
   40b7c:	3e534329 3e4620fd 3e38f620 3e2bc326     )CS>. F> .8>&.+>
   40b8c:	3e1e88a4 3e11472d 3e03ff57 3ded636e     ...>-G.>W..>nc.=
   40b9c:	3dd2bdc2 3db80eda 3d9d57de 3d8299fb     ...=...=.W.=...=
   40bac:	3d4facbc 3d1a1c65 3cc90a99 3c3ba72a     ..O=e..=...<*.;<
   40bbc:	bad678c1 bc71442d bce3d757 bd27814c     .x..-Dq.W...L.'.
   40bcc:	bd5d0f94 bd894a15 bda4065a bdbebb6d     ..]..J..Z...m...
   40bdc:	bdd96822 bdf40b4e be0751e3 be14982f     "h..N....Q../...
   40bec:	be21d7f7 be2f10a5 be3c41a6 be496a64     ..!.../..A<.djI.
   40bfc:	be568a4d be63a0cd be70ad50 be7daf45     M.V...c.P.p.E.}.
   40c0c:	be85530d be8bc89e be92380d be98a112     .S.......8......
   40c1c:	be9f0366 bea55ebf beabb2d8 beb1ff69     f....^......i...
   40c2c:	beb8442b bebe80d8 bec4b52a becae0db     +D......*.......
   40c3c:	bed103a5 bed71d45 bedd2d75 bee333f1     ....E...u-...3..
   40c4c:	bee93076 beef22c0 bef50a8d befae79b     v0..."..........
   40c5c:	bf005cd3 bf034038 bf061ddb bf08f59b     .\..8@..........
   40c6c:	bf0bc75a bf0e92f7 bf115854 bf141750     Z.......TX..P...
   40c7c:	bf16cfcd bf1981ac bf1c2cd0 bf1ed11a     .........,......
   40c8c:	bf216e6d bf2404ab bf2693b7 bf291b74     mn!...$...&.t.).
   40c9c:	bf2b9bc7 bf2e1493 bf3085bb bf32ef26     ..+.......0.&.2.
   40cac:	bf3550b7 bf37aa55 bf39fbe3 bf3c454a     .P5.U.7...9.JE<.
   40cbc:	bf3e866e bf40bf37 bf42ef8b bf451753     n.>.7.@...B.S.E.
   40ccc:	bf473675 bf494cda bf4b5a6b bf4d5f10     u6G..LI.kZK.._M.
   40cdc:	bf4f5ab3 bf514d3e bf53369a bf5516b3     .ZO.>MQ..6S...U.
   40cec:	bf56ed72 bf58bac5 bf5a7e95 bf5c38d0     r.V...X..~Z..8\.
   40cfc:	bf5de962 bf5f9038 bf612d40 bf62c067     b.].8._.@-a.g.b.
   40d0c:	bf64499c bf65c8ce bf673deb bf68a8e3     .Id...e..=g...h.
   40d1c:	bf6a09a7 bf6b6027 bf6cac54 bf6dee1f     ..j.'`k.T.l...m.
   40d2c:	bf6f257a bf705258 bf7174ab bf728c67     z%o.XRp..tq.g.r.
   40d3c:	bf73997f bf749be7 bf759395 bf76807e     ..s...t...u.~.v.
   40d4c:	bf776296 bf7839d4 bf79062f bf79c79e     .bw..9x./.y...y.
   40d5c:	bf7a7e17 bf7b2994 bf7bca0d bf7c5f7a     .~z..){...{.z_|.
   40d6c:	bf7ce9d5 bf7d6918 bf7ddd3e bf7e4640     ..|..i}.>.}.@F~.
   40d7c:	bf7ea41c bf7ef6cc bf7f3e4d bf7f7a9c     ..~...~.M>...z..
   40d8c:	bf7fabb6 bf7fd199 bf7fec43 bf7ffbb4     ........C.......
   40d9c:	3f7fffa6 3f7fe394 3f7f9a9c 3f7f24cc     ...?...?...?.$.?
   40dac:	3f7e8238 3f7db2fd 3f7cb73f 3f7b8f2a     8.~?..}??.|?*.{?
   40dbc:	3f7a3af3 3f78bad4 3f770f11 3f7537f6     .:z?..x?..w?.7u?
   40dcc:	3f7335d5 3f710908 3f6eb1f1 3f6c30f9     .5s?..q?..n?.0l?
   40ddc:	3f698690 3f66b32f 3f63b753 3f609384     ..i?/.f?S.c?..`?
   40dec:	3f5d484e 3f59d645 3f563e03 3f52802b     NH]?E.Y?.>V?+.R?
   40dfc:	3f4e9d65 3f4a965e 3f466bcc 3f421e6a     e.N?^.J?.kF?j.B?
   40e0c:	3f3daef9 3f391e40 3f346d0d 3f2f9c32     ..=?@.9?.m4?2./?
   40e1c:	3f2aac87 3f259eeb 3f20743f 3f1b2d6d     ..*?..%??t ?m-.?
   40e2c:	3f15cb61 3f104f0d 3f0ab968 3f050b6b     a..?.O.?h..?k..?
   40e3c:	3efe8c2e 3ef2d4dd 3ee6f2f1 3edae87f     ...>...>...>...>
   40e4c:	3eceb7a6 3ec26288 3eb5eb4e 3ea9542a     ...>.b.>N..>*T.>
   40e5c:	3e9c9f51 3e8fcefd 3e82e56d 3e6bc9ce     Q..>...>m..>..k>
   40e6c:	3e519f62 3e375030 3e1ce0d3 3e0255f1     b.Q>0P7>...>.U.>
   40e7c:	3dcf6862 3d9a007c 3d48fb24 3cbba41b     bh.=|..=$.H=...<
   40e8c:	bb5677f3 bcf13d64 bd63c0bb bda75d67     .wV.d=....c.g]..
   40e9c:	bddcbd14 be08fb03 be237f73 be3de734     ........s.#.4.=.
   40eac:	be582da4 be724e26 be862212 be930589     .-X.&Nr.."......
   40ebc:	be9fcf34 beac7cd5 beb90c33 bec57b1a     4....|..3....{..
   40ecc:	bed1c75b beddeecd bee9ef50 bef5c6c7     [.......P.......
   40edc:	bf00b990 bf067926 bf0c2124 bf11b08d     ....&y..$!......
   40eec:	bf172666 bf1c81ba bf21c198 bf26e515     f&........!...&.
   40efc:	bf2beb4a bf30d356 bf359c5b bf3a4583     J.+.V.0.[.5..E:.
   40f0c:	bf3ecdfd bf4334fc bf4779bc bf4b9b7d     ..>..4C..yG.}.K.
   40f1c:	bf4f9984 bf53731f bf5727a1 bf5ab663     ..O..sS..'W.c.Z.
   40f2c:	bf5e1ec6 bf616030 bf647a0f bf676bd8     ..^.0`a..zd..kg.
   40f3c:	bf6a3507 bf6cd51f bf6f4ba9 bf719837     .5j...l..Ko.7.q.
   40f4c:	bf73ba62 bf75b1c9 bf777e16 bf791ef6     b.s...u..~w...y.
   40f5c:	bf7a9421 bf7bdd55 bf7cfa59 bf7deafa     !.z.U.{.Y.|...}.
   40f6c:	bf7eaf0e bf7f4674 bf7fb10f bf7feece     ..~.tF..........

00040f7c <mode48000_960_120>:
   40f7c:	0000bb80 00000078 00000015 00000015     ....x...........
   40f8c:	3f599a00 00000000 3f800000 3f800000     ..Y?.......?...?
   40f9c:	0003dc1c 00000003 00000008 00000078     ............x...
   40fac:	0000000b 0003d830 0003f330 00040fe8     ....0...0.......
   40fbc:	00000780 00000003 0003e350 0003e388     ........P.......
   40fcc:	0003e3c0 0003e3f8 0003f35c 00000188     ........\.......
   40fdc:	0003db48 0003d918 0003daa0              H...........

00040fe8 <window120>:
   40fe8:	388d1c6a 3a1ebb52 3adc6908 3b57ed82     j..8R..:.i.:..W;
   40ff8:	3bb26389 3c052a03 3c39dc30 3c773eb4     .c.;.*.<0.9<.>w<
   41008:	3c9ea31c 3cc5f2d1 3cf186fe 3d10ab9b     ...<...<...<...=
   41018:	3d2aad05 3d46c284 3d64e653 3d828911     ..*=..F=S.d=...=
   41028:	3d939f87 3da5b2cb 3db8bed1 3dccbf3a     ...=...=...=:..=
   41038:	3de1af54 3df78a14 3e07250e 3e12f4d9     T..=...=.%.>...>
   41048:	3e1f315f 3e2bd768 3e38e38a 3e465230     _1.>h.+>..8>0RF>
   41058:	3e541f94 3e6247bf 3e70c68e 3e7f97b0     ..T>.Gb>..p>...>
   41068:	3e875b52 3e8f0f60 3e96e598 3e9edb79     R[.>`..>...>y..>
   41078:	3ea6ee70 3eaf1bd8 3eb760fb 3ebfbb11     p..>...>.`.>...>
   41088:	3ec82746 3ed0a2b7 3ed92a78 3ee1bb94     F'.>...>x*.>...>
   41098:	3eea530c 3ef2edde 3efb8906 3f0210be     .S.>...>...>...?
   410a8:	3f065a1f 3f0a9f24 3f0ede50 3f13162b     .Z.?$..?P..?+..?
   410b8:	3f174541 3f1b6a25 3f1f8373 3f238fce     AE.?%j.?s..?..#?
   410c8:	3f278de6 3f2b7c74 3f2f5a3f 3f332619     ..'?t|+??Z/?.&3?
   410d8:	3f36dee7 3f3a8399 3f3e1333 3f418cc5     ..6?..:?3.>?..A?
   410e8:	3f44ef77 3f483a7f 3f4b6d27 3f4e86ce     w.D?.:H?'mK?..N?
   410f8:	3f5186e5 3f546cf1 3f57388e 3f59e969     ..Q?.lT?.8W?i.Y?
   41108:	3f5c7f45 3f5ef9fa 3f615973 3f639daf     E.\?..^?sYa?..c?
   41118:	3f65c6c1 3f67d4cf 3f69c811 3f6ba0d2     ..e?..g?..i?..k?
   41128:	3f6d5f6e 3f6f0450 3f708ff4 3f7202e6     n_m?P.o?..p?..r?
   41138:	3f735dbd 3f74a11f 3f75cdbf 3f76e457     .]s?..t?..u?W.v?
   41148:	3f77e5b0 3f78d297 3f79abe3 3f7a7273     ..w?..x?..y?srz?
   41158:	3f7b2727 3f7bcae7 3f7c5e9d 3f7ce335     ''{?..{?.^|?5.|?
   41168:	3f7d599c 3f7dc2bd 3f7e1f86 3f7e70de     .Y}?..}?..~?.p~?
   41178:	3f7eb7ab 3f7ef4cf 3f7f2926 3f7f5586     ..~?..~?&).?.U.?
   41188:	3f7f7abe 3f7f9996 3f7fb2cc 3f7fc714     .z.?...?...?...?
   41198:	3f7fd71c 3f7fe382 3f7fecdd 3f7ff3b6     ...?...?...?...?
   411a8:	3f7ff88a 3f7ffbc8 3f7ffdd6 3f7fff07     ...?...?...?...?
   411b8:	3f7fffa5 3f7fffe8 3f7ffffd 3f800000     ...?...?...?...?

000411c8 <second_check>:
	...
   411d0:	00000003 00000002 00000003 00000002     ................
   411e0:	00000005 00000002 00000003 00000002     ................
   411f0:	00000003 00000002 00000005 00000002     ................
   41200:	00000003 00000002                       ........

00041208 <beta_coef>:
   41208:	3f6b8600 3f2e1400 3ebd7000 3e4cd000     ..k?...?.p.>..L>

00041218 <eMeans>:
   41218:	40ce0000 40c80000 40b80000 40aa0000     ...@...@...@...@
   41228:	40a20000 409a0000 40900000 408c0000     ...@...@...@...@
   41238:	409c0000 40960000 40920000 408e0000     ...@...@...@...@
   41248:	409c0000 40940000 408a0000 40900000     ...@...@...@...@
   41258:	408c0000 40940000 40980000 408e0000     ...@...@...@...@
   41268:	40700000 40700000 40700000 40700000     ..p@..p@..p@..p@
   41278:	40700000                                ..p@

0004127c <e_prob_model>:
   4127c:	81417f48 80418042 803e8040 80408040     H.A.B.A.@.>.@.@.
   4128c:	4f5c4e5c 4f5a4e5c 28732974 1a842872     \N\O\NZOt)s(r(..
   4129c:	11911a84 0ab00ca1 b3180bb1 87368a30     ............0.6.
   412ac:	86358436 84378538 723d8437 584a6046     6.5.8.7.7.=rF`JX
   412bc:	4a57584b 435b4259 326c3b64 257a2878     KXWJYB[Cd;l2x(z%
   412cc:	324e2b61 51544e53 4a564b58 495a4757     a+N2SNTQXKVJWGZI
   412dc:	4a5d4a5d 2472286d 22752275 1291118f     ]J]Jm(r$u"u"....
   412ec:	0ca21392 07b20aa5 08be06bd b21709b1     ................
   412fc:	663f7336 63456242 5b47594a 594e5b49     6s?fBbEcJYG[I[NY
   4130c:	425c5056 3b66405d 3c683c67 2c7b3475     VP\B]@f;g<h<u4{,
   4131c:	1f85238a 2d4d2661 3c5d5a3d 296b2a69     .#..a&M-=Z]<i*k)
   4132c:	26742d6e 26702671 1b841a7c 148c1388     n-t&q&p&|.......
   4133c:	109f0e9b 0daa129e 08bb0ab1 09af06c0     ................
   4134c:	b2150a9f 56476e3b 5354554b 4958425b     ....;nGVKUTS[BXI
   4135c:	4b5c4857 3a694862 3473366b 38703772     WH\KbHi:k6s4r7p8
   4136c:	28843381 1d8c2196 2a4d2362 4260792a     .3.(.!..b#M**y`B
   4137c:	286f2b6c 207b2c75 21772478 2286217f     l+o(u,{ x$w!.!."
   4138c:	1793158b 199e1498 15a61a9a 0db810ad     ................
   4139c:	0d960ab8 b2160f8b 524a723f 525c5354     ........?rJRTS\R
   413ac:	48603e67 49654360 3771486b 347d3476     g>`H`CeIkHq7v4}4
   413bc:	37753476 27893187 1d91209d 284d2161     v4u7.1.'. ..a!M(

000413cc <pred_coef>:
   413cc:	3f660000 3f4c0000 3f260000 3f000000     ..f?..L?..&?...?

000413dc <small_energy_icdf>:
   413dc:	00000102                                ....

000413e0 <LOG2_FRAC_TABLE>:
   413e0:	100d0800 18171513 1d1c1b1a 20201f1e     ..............  
   413f0:	23222221 25252424                       !""#$$%%

000413f8 <bit_deinterleave_table.8341>:
   413f8:	0f0c0300 3f3c3330 cfccc3c0 fffcf3f0     ....03<?........

00041408 <bit_interleave_table.8331>:
   41408:	01010100 03030302 03030302 03030302     ................

00041418 <exp2_table8.8172>:
   41418:	45ca4000 52ff4c1b 62b35a82 75606ba2     .@.E.L.R.Z.b.k`u

00041428 <ordery_table>:
   41428:	00000001 00000000 00000003 00000000     ................
   41438:	00000002 00000001 00000007 00000000     ................
   41448:	00000004 00000003 00000006 00000001     ................
   41458:	00000005 00000002 0000000f 00000000     ................
   41468:	00000008 00000007 0000000c 00000003     ................
   41478:	0000000b 00000004 0000000e 00000001     ................
   41488:	00000009 00000006 0000000d 00000002     ................
   41498:	0000000a 00000005                       ........

000414a0 <gains.7955>:
   414a0:	3e9d0000 3e5e4000 3e04c000 3eed8000     ...>.@^>...>...>
   414b0:	3e894000 00000000 3f4cc000 3dcd0000     .@.>......L?...=
   414c0:	00000000                                ....

000414c4 <tf_select_table>:
   414c4:	ff00ff00 ff00ff00 fe00ff00 ff010001     ................
   414d4:	fd00fe00 ff010002 fd00fe00 ff010003     ................

000414e4 <SPREAD_FACTOR.7989>:
   414e4:	0000000f 0000000a 00000005              ............

000414f0 <CELT_PVQ_U_DATA>:
   414f0:	00000001 00000000 00000000 00000000     ................
	...
   417b4:	00000001 00000001 00000001 00000001     ................
   417c4:	00000001 00000001 00000001 00000001     ................
   417d4:	00000001 00000001 00000001 00000001     ................
   417e4:	00000001 00000001 00000001 00000001     ................
   417f4:	00000001 00000001 00000001 00000001     ................
   41804:	00000001 00000001 00000001 00000001     ................
   41814:	00000001 00000001 00000001 00000001     ................
   41824:	00000001 00000001 00000001 00000001     ................
   41834:	00000001 00000001 00000001 00000001     ................
   41844:	00000001 00000001 00000001 00000001     ................
   41854:	00000001 00000001 00000001 00000001     ................
   41864:	00000001 00000001 00000001 00000001     ................
   41874:	00000001 00000001 00000001 00000001     ................
   41884:	00000001 00000001 00000001 00000001     ................
   41894:	00000001 00000001 00000001 00000001     ................
   418a4:	00000001 00000001 00000001 00000001     ................
   418b4:	00000001 00000001 00000001 00000001     ................
   418c4:	00000001 00000001 00000001 00000001     ................
   418d4:	00000001 00000001 00000001 00000001     ................
   418e4:	00000001 00000001 00000001 00000001     ................
   418f4:	00000001 00000001 00000001 00000001     ................
   41904:	00000001 00000001 00000001 00000001     ................
   41914:	00000001 00000001 00000001 00000001     ................
   41924:	00000001 00000001 00000001 00000001     ................
   41934:	00000001 00000001 00000001 00000001     ................
   41944:	00000001 00000001 00000001 00000001     ................
   41954:	00000001 00000001 00000001 00000001     ................
   41964:	00000001 00000001 00000001 00000001     ................
   41974:	00000001 00000001 00000001 00000001     ................
   41984:	00000001 00000001 00000001 00000001     ................
   41994:	00000001 00000001 00000001 00000001     ................
   419a4:	00000001 00000001 00000001 00000001     ................
   419b4:	00000001 00000001 00000001 00000001     ................
   419c4:	00000001 00000001 00000001 00000001     ................
   419d4:	00000001 00000001 00000001 00000001     ................
   419e4:	00000001 00000001 00000001 00000001     ................
   419f4:	00000001 00000001 00000001 00000001     ................
   41a04:	00000001 00000001 00000001 00000001     ................
   41a14:	00000001 00000001 00000001 00000001     ................
   41a24:	00000001 00000001 00000001 00000001     ................
   41a34:	00000001 00000001 00000001 00000001     ................
   41a44:	00000001 00000001 00000001 00000001     ................
   41a54:	00000001 00000001 00000001 00000001     ................
   41a64:	00000001 00000001 00000001 00000001     ................
   41a74:	00000003 00000005 00000007 00000009     ................
   41a84:	0000000b 0000000d 0000000f 00000011     ................
   41a94:	00000013 00000015 00000017 00000019     ................
   41aa4:	0000001b 0000001d 0000001f 00000021     ............!...
   41ab4:	00000023 00000025 00000027 00000029     #...%...'...)...
   41ac4:	0000002b 0000002d 0000002f 00000031     +...-.../...1...
   41ad4:	00000033 00000035 00000037 00000039     3...5...7...9...
   41ae4:	0000003b 0000003d 0000003f 00000041     ;...=...?...A...
   41af4:	00000043 00000045 00000047 00000049     C...E...G...I...
   41b04:	0000004b 0000004d 0000004f 00000051     K...M...O...Q...
   41b14:	00000053 00000055 00000057 00000059     S...U...W...Y...
   41b24:	0000005b 0000005d 0000005f 00000061     [...]..._...a...
   41b34:	00000063 00000065 00000067 00000069     c...e...g...i...
   41b44:	0000006b 0000006d 0000006f 00000071     k...m...o...q...
   41b54:	00000073 00000075 00000077 00000079     s...u...w...y...
   41b64:	0000007b 0000007d 0000007f 00000081     {...}...........
   41b74:	00000083 00000085 00000087 00000089     ................
   41b84:	0000008b 0000008d 0000008f 00000091     ................
   41b94:	00000093 00000095 00000097 00000099     ................
   41ba4:	0000009b 0000009d 0000009f 000000a1     ................
   41bb4:	000000a3 000000a5 000000a7 000000a9     ................
   41bc4:	000000ab 000000ad 000000af 000000b1     ................
   41bd4:	000000b3 000000b5 000000b7 000000b9     ................
   41be4:	000000bb 000000bd 000000bf 000000c1     ................
   41bf4:	000000c3 000000c5 000000c7 000000c9     ................
   41c04:	000000cb 000000cd 000000cf 000000d1     ................
   41c14:	000000d3 000000d5 000000d7 000000d9     ................
   41c24:	000000db 000000dd 000000df 000000e1     ................
   41c34:	000000e3 000000e5 000000e7 000000e9     ................
   41c44:	000000eb 000000ed 000000ef 000000f1     ................
   41c54:	000000f3 000000f5 000000f7 000000f9     ................
   41c64:	000000fb 000000fd 000000ff 00000101     ................
   41c74:	00000103 00000105 00000107 00000109     ................
   41c84:	0000010b 0000010d 0000010f 00000111     ................
   41c94:	00000113 00000115 00000117 00000119     ................
   41ca4:	0000011b 0000011d 0000011f 00000121     ............!...
   41cb4:	00000123 00000125 00000127 00000129     #...%...'...)...
   41cc4:	0000012b 0000012d 0000012f 00000131     +...-.../...1...
   41cd4:	00000133 00000135 00000137 00000139     3...5...7...9...
   41ce4:	0000013b 0000013d 0000013f 00000141     ;...=...?...A...
   41cf4:	00000143 00000145 00000147 00000149     C...E...G...I...
   41d04:	0000014b 0000014d 0000014f 00000151     K...M...O...Q...
   41d14:	00000153 00000155 00000157 00000159     S...U...W...Y...
   41d24:	0000015b 0000015d 0000015f 0000000d     [...]..._.......
   41d34:	00000019 00000029 0000003d 00000055     ....)...=...U...
   41d44:	00000071 00000091 000000b5 000000dd     q...............
   41d54:	00000109 00000139 0000016d 000001a5     ....9...m.......
   41d64:	000001e1 00000221 00000265 000002ad     ....!...e.......
   41d74:	000002f9 00000349 0000039d 000003f5     ....I...........
   41d84:	00000451 000004b1 00000515 0000057d     Q...........}...
   41d94:	000005e9 00000659 000006cd 00000745     ....Y.......E...
   41da4:	000007c1 00000841 000008c5 0000094d     ....A.......M...
   41db4:	000009d9 00000a69 00000afd 00000b95     ....i...........
   41dc4:	00000c31 00000cd1 00000d75 00000e1d     1.......u.......
   41dd4:	00000ec9 00000f79 0000102d 000010e5     ....y...-.......
   41de4:	000011a1 00001261 00001325 000013ed     ....a...%.......
   41df4:	000014b9 00001589 0000165d 00001735     ........]...5...
   41e04:	00001811 000018f1 000019d5 00001abd     ................
   41e14:	00001ba9 00001c99 00001d8d 00001e85     ................
   41e24:	00001f81 00002081 00002185 0000228d     ..... ...!..."..
   41e34:	00002399 000024a9 000025bd 000026d5     .#...$...%...&..
   41e44:	000027f1 00002911 00002a35 00002b5d     .'...)..5*..]+..
   41e54:	00002c89 00002db9 00002eed 00003025     .,...-......%0..
   41e64:	00003161 000032a1 000033e5 0000352d     a1...2...3..-5..
   41e74:	00003679 000037c9 0000391d 00003a75     y6...7...9..u:..
   41e84:	00003bd1 00003d31 00003e95 00003ffd     .;..1=...>...?..
   41e94:	00004169 000042d9 0000444d 000045c5     iA...B..MD...E..
   41ea4:	00004741 000048c1 00004a45 00004bcd     AG...H..EJ...K..
   41eb4:	00004d59 00004ee9 0000507d 00005215     YM...N..}P...R..
   41ec4:	000053b1 00005551 000056f5 0000589d     .S..QU...V...X..
   41ed4:	00005a49 00005bf9 00005dad 00005f65     IZ...[...]..e_..
   41ee4:	00006121 000062e1 000064a5 0000666d     !a...b...d..mf..
   41ef4:	00006839 00006a09 00006bdd 00006db5     9h...j...k...m..
   41f04:	00006f91 00007171 00007355 0000753d     .o..qq..Us..=u..
   41f14:	00007729 00007919 00007b0d 00007d05     )w...y...{...}..
   41f24:	00007f01 00008101 00008305 0000850d     ................
   41f34:	00008719 00008929 00008b3d 00008d55     ....)...=...U...
   41f44:	00008f71 00009191 000093b5 000095dd     q...............
   41f54:	00009809 00009a39 00009c6d 00009ea5     ....9...m.......
   41f64:	0000a0e1 0000a321 0000a565 0000a7ad     ....!...e.......
   41f74:	0000a9f9 0000ac49 0000ae9d 0000b0f5     ....I...........
   41f84:	0000b351 0000b5b1 0000b815 0000ba7d     Q...........}...
   41f94:	0000bce9 0000bf59 0000c1cd 0000c445     ....Y.......E...
   41fa4:	0000c6c1 0000c941 0000cbc5 0000ce4d     ....A.......M...
   41fb4:	0000d0d9 0000d369 0000d5fd 0000d895     ....i...........
   41fc4:	0000db31 0000ddd1 0000e075 0000e31d     1.......u.......
   41fd4:	0000e5c9 0000e879 0000eb2d 0000ede5     ....y...-.......
   41fe4:	0000f0a1 0000003f 00000081 000000e7     ....?...........
   41ff4:	00000179 0000023f 00000341 00000487     y...?...A.......
   42004:	00000619 000007ff 00000a41 00000ce7     ........A.......
   42014:	00000ff9 0000137f 00001781 00001c07     ................
   42024:	00002119 000026bf 00002d01 000033e7     .!...&...-...3..
   42034:	00003b79 000043bf 00004cc1 00005687     y;...C...L...V..
   42044:	00006119 00006c7f 000078c1 000085e7     .a...l...x......
   42054:	000093f9 0000a2ff 0000b301 0000c407     ................
   42064:	0000d619 0000e93f 0000fd81 000112e7     ....?...........
   42074:	00012979 0001413f 00015a41 00017487     y)..?A..AZ...t..
   42084:	00019019 0001acff 0001cb41 0001eae7     ........A.......
   42094:	00020bf9 00022e7f 00025281 00027807     .........R...x..
   420a4:	00029f19 0002c7bf 0002f201 00031de7     ................
   420b4:	00034b79 00037abf 0003abc1 0003de87     yK...z..........
   420c4:	00041319 0004497f 000481c1 0004bbe7     .....I..........
   420d4:	0004f7f9 000535ff 00057601 0005b807     .....5...v......
   420e4:	0005fc19 0006423f 00068a81 0006d4e7     ....?B..........
   420f4:	00072179 0007703f 0007c141 00081487     y!..?p..A.......
   42104:	00086a19 0008c1ff 00091c41 000978e7     .j......A....x..
   42114:	0009d7f9 000a397f 000a9d81 000b0407     .....9..........
   42124:	000b6d19 000bd8bf 000c4701 000cb7e7     .m.......G......
   42134:	000d2b79 000da1bf 000e1ac1 000e9687     y+..............
   42144:	000f1519 000f967f 00101ac1 0010a1e7     ................
   42154:	00112bf9 0011b8ff 00124901 0012dc07     .+.......I......
   42164:	00137219 00140b3f 0014a781 001546e7     .r..?........F..
   42174:	0015e979 00168f3f 00173841 0017e487     y...?...A8......
   42184:	00189419 001946ff 0019fd41 001ab6e7     .....F..A.......
   42194:	001b73f9 001c347f 001cf881 001dc007     .s...4..........
   421a4:	001e8b19 001f59bf 00202c01 002101e7     .....Y..., ...!.
   421b4:	0021db79 0022b8bf 002399c1 00247e87     y.!..."...#..~$.
   421c4:	00256719 0026537f 002743c1 002837e7     .g%..S&..C'..7(.
   421d4:	00292ff9 002a2bff 002b2c01 002c3007     ./)..+*..,+..0,.
   421e4:	002d3819 002e443f 002f5481 003068e7     .8-.?D...T/..h0.
   421f4:	00318179 00329e3f 0033bf41 0034e487     y.1.?.2.A.3...4.
   42204:	00360e19 00373bff 00386e41 0039a4e7     ..6..;7.An8...9.
   42214:	003adff9 003c1f7f 003d6381 003eac07     ..:...<..c=...>.
   42224:	003ff919 00414abf 0042a101 0043fbe7     ..?..JA...B...C.
   42234:	00455b79 0046bfbf 004828c1 00499687     y[E...F..(H...I.
   42244:	004b0919 004c807f 004dfcc1 004f7de7     ..K...L...M..}O.
   42254:	005103f9 00528eff 00541f01 0055b407     ..Q...R...T...U.
   42264:	00574e19 0058ed3f 005a9181 005c3ae7     .NW.?.X...Z..:\.
   42274:	005de979 005f9d3f 00615641 00631487     y.].?._.AVa...c.
   42284:	0064d819 0066a0ff 00686f41 006a42e7     ..d...f.Aoh..Bj.
   42294:	006c1bf9 006dfa7f 00000141 000002a9     ..l...m.A.......
   422a4:	00000509 000008c1 00000e41 00001609     ........A.......
   422b4:	000020a9 00002ec1 00004101 00005829     . .......A..)X..
   422c4:	00007509 00009881 0000c381 0000f709     .u..............
   422d4:	00013429 00017c01 0001cfc1 000230a9     )4...|.......0..
   422e4:	0002a009 00031f41 0003afc1 00045309     ....A........S..
   422f4:	00050aa9 0005d841 0006bd81 0007bc29     ....A.......)...
   42304:	0008d609 000a0d01 000b6301 000cda09     .........c......
   42314:	000e7429 00103381 00121a41 00142aa9     )t...3..A....*..
   42324:	00166709 0018d1c1 001b6d41 001e3c09     .g......Am...<..
   42334:	002140a9 00247dc1 0027f601 002bac29     .@!..}$...'.).+.
   42344:	002fa309 0033dd81 00385e81 003d2909     ../...3..^8..)=.
   42354:	00424029 0047a701 004d60c1 005370a9     )@B...G..`M..pS.
   42364:	0059da09 0060a041 0067c6c1 006f5109     ..Y.A.`...g..Qo.
   42374:	007742a9 007f9f41 00886a81 0091a829     .Bw.A....j..)...
   42384:	009b5c09 00a58a01 00b03601 00bb6409     .\.......6...d..
   42394:	00c71829 00d35681 00e02341 00ed82a9     )....V..A#......
   423a4:	00fb7909 010a0ac1 01193c41 01291209     .y......A<....).
   423b4:	013990a9 014abcc1 015c9b01 016f3029     ..9...J...\.)0o.
   423c4:	01828109 01969281 01ab6981 01c10b09     .........i......
   423d4:	01d77c29 01eec201 0206e1c1 021fe0a9     )|..............
   423e4:	0239c409 02549141 02704dc1 028cff09     ..9.A.T..Mp.....
   423f4:	02aaaaa9 02c95641 02e90781 0309c429     ....AV......)...
   42404:	032b9209 034e7701 03727901 03979e09     ..+..wN..yr.....
   42414:	03bdec29 03e56981 040e1c41 04380aa9     )....i..A.....8.
   42424:	04633b09 048fb3c1 04bd7b41 04ec9809     .;c.....A{......
   42434:	051d10a9 054eebc1 05823001 05b6e429     ......N..0..)...
   42444:	05ed0f09 0624b781 065de481 06989d09     ......$...].....
   42454:	06d4e829 0712cd01 075252c1 079380a9     )........RR.....
   42464:	07d65e09 081af241 086144c1 08a95d09     .^..A....Da..]..
   42474:	08f342a9 093efd41 098c9481 09dc1029     .B..A.>.....)...
   42484:	0a2d7809 0a80d401 0ad62c01 0b2d8809     .x-......,....-.
   42494:	0b86f029 0be26c81 0c400541 0c9fc2a9     )....l..A.@.....
   424a4:	0d01ad09 0d65ccc1 0dcc2a41 0e34ce09     ......e.A*....4.
   424b4:	0e9fc0a9 0f0d0ac1 0f7cb501 0feec829     ..........|.)...
   424c4:	10634d09 10da4c81 1153cf81 11cfdf09     .Mc..L....S.....
   424d4:	124e8429 12cfc801 1353b3c1 13da50a9     ).N.......S..P..
   424e4:	1463a809 14efc341 157eabc1 16106b09     ..c.A.....~..k..
   424f4:	16a50aa9 173c9441 17d71181 18748c29     ....A.<.....).t.
   42504:	19150e09 19b8a101 1a5f4f01 1b092209     .........O_.."..
   42514:	1bb62429 1c665f81 1d19de41 1dd0aaa9     )$..._f.A.......
   42524:	1e8acf09 1f4855c1 20094941 20cdb409     .....UH.AI. ... 
   42534:	2195a0a9 226119c1 23302a01 2402dc29     ...!..a".*0#)..$
   42544:	24d93b09 25b35181 00000693 00000e45     .;.$.Q.%....E...
   42554:	00001c0f 00003311 0000575b 00008e0d     .....3..[W......
   42564:	0000dd77 00014d39 0001e663 0002b395     w...9M..c.......
   42574:	0003c11f 00051d21 0006d7ab 000902dd     ....!...........
   42584:	000bb307 000efec9 0012ff33 0017cfe5     ........3.......
   42594:	001d8f2f 00245e31 002c60fb 0035bead     /...1^$..`,...5.
   425a4:	0040a197 004d3759 005bb103 006c4335     ..@.Y7M...[.5Cl.
   425b4:	007f263f 00949641 00acd34b 00c8217d     ?&..A...K...}!..
   425c4:	00e6c927 010916e9 012f5bd3 0159ed85     '........[/...Y.
   425d4:	0189264f 01bd6551 01f70e9b 02368b4d     O&..Qe......M.6.
   425e4:	027c49b7 02c8bd79 031c5fa3 0377aed5     .I|.y...._....w.
   425f4:	03db2f5f 04476b61 04bcf2eb 053c5c1d     _/..akG......\<.
   42604:	05c64347 065b4b09 06fc1c73 07a96725     GC...K[.s...%g..
   42614:	0863e16f 092c4871 0a03603b 0ae9f3ed     o.c.qH,.;`......
   42624:	0be0d5d7 0ce8df99 0e02f243 0f2ff675     ........C...u./.
   42634:	1070dc7f 11c69c81 1332368b 14b4b2bd     ..p......62.....
   42644:	164f2167 18029b29 19d04113 1bb93cc5     g!O.)....A...<..
   42654:	1dbec08f 1fe20791 222455db 2486f88d     .........U$"...$
   42664:	270b45f7 29b29db9 2c7e68e3 2f701a15     .E.'...).h~,..p/
   42674:	32892d9f 35cb29a1 39379e2b 3cd0255d     .-.2.).5+.79]%.<
   42684:	40966387 448c0749 48b2c9b3 4d0c6e65     .c.@I..D...Hen.M
   42694:	519ac3af 565fa2b1 5b5cef7b 6094992d     ...Q.._V{.\[-..`
   426a4:	66089a17 6bbaf7d9 71adc383 77e319b5     ...f...k...q...w
   426b4:	7e5d22bf 0000231d 00004d71 00009c91     ."]~.#..qM......
   426c4:	000126fd 00020c65 000377e9 0005a299     .&..e....w......
   426d4:	0008d635 000d702d 0013e4e1 001cc321     5...-p......!...
   426e4:	0028b7ed 00389275 004d4859 0067fa29     ..(.u.8.YHM.).g.
   426f4:	0089f825 00b4c73d 00ea2651 012c13b1     %...=...Q&....,.
   42704:	017cd2dd 01def285 025552c9 02e32bb9     ..|......RU..+..
   42714:	038c1415 0454084d 053f71c1 06532e41     ....M.T..q?.A.S.
   42724:	079497cd 09098c95 0ab87739 0ca85749     ........9w..IW..
   42734:	0ee0ca05 116a135d 144d2731 1793b2d1     ....].j.1'M.....
   42744:	1b4826bd 1f75c0a5 242895a9 296d9cd9     .&H...u...($..m)
   42754:	2f52b9f5 35e6c86d 3d39a6a1 455c4161     ..R/m..5..9=aA\E
   42764:	4e609fad 5859eeb5 635c8e19 6f7e1c69     ..`N..YX..\ci.~o
   42774:	7cd583e5 0000bdff 0001a801 00036b8f     ...|.........k..
   42784:	00069ef1 000c233f 00153dc1 0023b68f     ....?#...=....#.
   42794:	0039fcf1 005b51ff 008bfa01 00d1750f     ..9..Q[......u..
   427a4:	0132bf71 01b89a3f 026ddcc1 035fcf0f     q.2.?.....m..._.
   427b4:	049e8e71 063d7bff 0853b601 0afc9c8f     q....{=...S.....
   427c4:	0e5861f1 128ca73f 17c525c1 1e34658f     .aX.?....%...e4.
   427d4:	261481f1 2fa7fbff 3b3a9c01 4922620f     ...&.../..:;.b"I
   427e4:	59c08671 6d828a3f 84e358c1 00040e01     q..Y?..m.X......
   427f4:	00092191 00132c11 0025ee41 00474f41     .!...,..A.%.AOG.
   42804:	00804391 00ddf711 01734601 025a9201     .C.......Fs...Z.
   42814:	03b80111 05bc3591 08a78f41 0cce0641     .....5..A...A...
   42824:	129bb211 1a9a0f91 25761a01 34074c01     ..........v%.L.4
   42834:	47579e91 60ac9d11 8191a641 00165123     ..WG...`A...#Q..
   42844:	00329ec5 006bb917 00d8f699 01a0896b     ..2...k.....k...
   42854:	02fec40d 0550011f 091dd921 0f306c33     ......P.!...3l0.
   42864:	18a4a2d5 270867a7 3c7dfd29 5be7b57b     .....g.').}<{..[
   42874:	891d771d c92da0af 007b8ead 0119e689     .w....-...{.....
   42884:	025e9639 04d8163d 097763b5 11c628e1     9.^.=....cw..(..
   42894:	20340321 38824875 6057577d 02af5bbf     !.4 uH.8}WW`.[..
   428a4:	0627d881 0d5e84f7 1badfee9 36eb8b7f     ..'...^........6
   428b4:	68e5b781 c19c0317 0eff0cc1 22856a39     ...h........9j."
   428c4:	4b91ee19 9e2b7881 5409e133              ...K.x+.3..T

000428d0 <CELT_PVQ_U_ROW>:
   428d0:	000414f0 000417b0 00041a6c 00041d24     ........l...$...
   428e0:	00041fd8 00042288 00042534 0004269c     ....."..4%...&..
   428f0:	00042758 000427cc 00042818 00042850     X'...'...(..P(..
   42900:	00042870 00042888 00042894              p(...(...(..

0004290c <ccitt_table>:
   4290c:	80050000 000a800f 001e801b 80110014     ................
   4291c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   4292c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   4293c:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   4294c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   4295c:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   4296c:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   4297c:	00968093 8099009c 808d0088 00828087     ................
   4298c:	01868183 8189018c 819d0198 01928197     ................
   4299c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   429ac:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   429bc:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   429cc:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   429dc:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   429ec:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   429fc:	81150110 011a811f 010e810b 81010104     ................
   42a0c:	03068303 8309030c 831d0318 03128317     ................
   42a1c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   42a2c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   42a3c:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   42a4c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   42a5c:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   42a6c:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   42a7c:	83950390 039a839f 038e838b 83810384     ................
   42a8c:	82850280 028a828f 029e829b 82910294     ................
   42a9c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   42aac:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   42abc:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   42acc:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   42adc:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   42aec:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   42afc:	02168213 8219021c 820d0208 02028207     ................

00042b0c <am_ble_buffer_patch_data>:
   42b0c:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   42b1c:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   42b2c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   42b3c:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   42b4c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   42b88:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   42b98:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   42ba8:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   42bb8:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   42bc8:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   42bd8:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   42be8:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   42bf8:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   42c08:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   42c18:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   42c28:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   42c38:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   42c48:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   42c58:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   42c68:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   42c78:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   42c88:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   42c98:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   42ca8:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   42cb8:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   42cc8:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   42cd8:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   42ce8:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   42cf8:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   42d08:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   42d18:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   42d28:	8f809011 9812900e 900d3008 30309812     .........0....00
   42d38:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   42d48:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   42d58:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   42d68:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   42d78:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   42d88:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   42d98:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   42da8:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   42db8:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   42dc8:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   42dd8:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   42de8:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   42df8:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   42e18:	00000021 00000000 00000001 00000000     !...............
   42e28:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   42e38:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   42e48:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   42e58:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   42e68:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   42e78:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   42e88:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   42e98:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   42ea8:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   42eb8:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   42ec8:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   42ed8:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   42ee8:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   42ef8:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   42f08:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   42f18:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   42f28:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   42f38:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   42f48:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   42f58:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   42f68:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   42f78:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   42f88:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   42f98:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   42fa8:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   42fb8:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   42fc8:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   42fd8:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   42fe8:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   42ff8:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   43008:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   43018:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   43028:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   43038:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   43048:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   43058:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   43068:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   43078:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   43088:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   43098:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   430a8:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   430b8:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   430c8:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   430d8:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   430e8:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   430f8:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   43108:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   43118:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   43128:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   43138:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   43148:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   43158:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   43168:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   43178:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   43188:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   43198:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   431a8:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   431b8:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   431c8:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   431d8:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   431e8:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   431f8:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   43208:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   43218:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   43228:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   43238:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   43248:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   43258:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   43268:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   43278:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   43288:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   43298:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   432a8:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   432b8:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   432c8:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   432d8:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   432e8:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   432f8:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   43308:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   43318:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   43328:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   43338:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   43348:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   43358:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   43368:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   43378:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   43388:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   43398:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   433a8:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   433b8:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   433c8:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   433d8:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   433e8:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   433f8:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   43408:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   43418:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   43428:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   43438:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   43448:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   43458:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   43468:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   43478:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   43488:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   43498:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   434a8:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   434b8:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   434c8:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   434d8:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   434e8:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   434f8:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   43508:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   43518:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   43528:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   43538:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   43548:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   43558:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   43568:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   43578:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   43588:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   43598:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   435a8:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   435b8:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   435c8:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   435d8:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   435e8:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   435f8:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   43608:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   43618:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   43628:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   43638:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   43648:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   43658:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   43668:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   43678:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   43688:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   43698:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   436a8:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   436b8:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   436c8:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   436d8:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   436e8:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   436f8:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   43708:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   43718:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   43728:	00010341 50804000 000093a5 00000466     A....@.P....f...
   43738:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   43748:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   43758:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   43768:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   43778:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   43788:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   43798:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   437a8:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   437b8:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   437c8:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   437d8:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   437e8:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   437f8:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   43808:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   43818:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   43828:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   43838:	00004770 20006780 20006054              pG...g. T`. 

00043844 <am_hal_ble_num_default_patches>:
   43844:	00000003                                ....

00043848 <am_ble_performance_copy_patch_data>:
   43848:	006e1100 00000400 00000000 01c50101     ..n.............
   43858:	00000039 00000000 00000000 00000000     9...............
   43868:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   43878:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   43888:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   43898:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   438a8:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   438b8:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   438c8:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   438d8:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   438e8:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   438f8:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   43908:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   43918:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   43928:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   43938:	f000e00a e007fb94 b2c09801 fac7f000     ................
   43948:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   43958:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   43968:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   43978:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   43988:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   43998:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   439a8:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   439b8:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   439c8:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   439d8:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   439e8:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   439f8:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   43a08:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   43a18:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   43a28:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   43a38:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   43a48:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   43a58:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   43a68:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   43a78:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   43a88:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   43a98:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   43aa8:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   43ab8:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   43ac8:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   43ad8:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   43ae8:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   43af8:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   43b08:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   43b18:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   43b28:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   43b38:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   43b48:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   43b58:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   43b68:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   43b78:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   43b88:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   43b98:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   43ba8:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   43bb8:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   43bc8:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   43bd8:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   43be8:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   43bf8:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   43c08:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   43c18:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   43c28:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   43c38:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   43c48:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   43c58:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   43c68:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   43c78:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   43c88:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   43c98:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   43ca8:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   43cb8:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   43cc8:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   43cd8:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   43ce8:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   43cf8:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   43d08:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   43d18:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   43d28:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   43d38:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   43d48:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   43d58:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   43d68:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   43d78:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   43d88:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   43d98:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   43da8:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   43db8:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   43dc8:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   43dd8:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   43de8:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   43df8:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   43e08:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   43e18:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   43e28:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   43e38:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   43e48:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   43e58:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   43e68:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   43e78:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   43e88:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   43e98:	00400000 00804580 021e4580 00030000     ..@..E...E......
   43ea8:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   43eb8:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   43ec8:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   43ed8:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   43ee8:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   43ef8:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   43f08:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   43f18:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   43f28:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   43f38:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   43f48:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   43f58:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   43f68:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   43f78:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   43f88:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   43f98:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   43fa8:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   43fb8:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   43fc8:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   43fd8:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   43fe8:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   43ff8:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   44008:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   44018:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   44028:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   44038:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   44048:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   44058:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   44068:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   44078:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   44088:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   44098:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   440a8:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   440b8:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   440c8:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   440d8:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   440e8:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   440f8:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   44108:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   44118:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   44128:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   44138:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   44148:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   44158:	00000001                                ....

0004415c <am_hal_ble_num_default_patches_b0>:
   4415c:	00000003                                ....

00044160 <am_hal_cachectrl_defaults>:
   44160:	00000308                                ....

00044164 <g_AM_HAL_GPIO_INPUT>:
   44164:	00001003                                ....

00044168 <g_ui8Bit76Capabilities>:
   44168:	02800101 80010180 80800101 80808080     ................
   44178:	80808080 80808008 01800180 80808080     ................
   44188:	80808080 01800402 01010401 80808080     ................
   44198:	00000101                                ....

0004419c <g_ui8NCEtable>:
   4419c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   441ac:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   441bc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   441cc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   441dc:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   441ec:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   441fc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   4420c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   4421c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   4422c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   4423c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   4424c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   4425c:	32221202 43231303                       .."2..#C

00044264 <g_ui8Inpen>:
   44264:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   44274:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   44284:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   44294:	00003130                                01..

00044298 <g_AM_HAL_GPIO_DISABLE>:
   44298:	00000003                                ....

0004429c <g_AM_HAL_GPIO_OUTPUT>:
   4429c:	00000403                                ....

000442a0 <g_ui8nCEpins>:
   442a0:	02070707 00080802 01020202 01010101     ................
   442b0:	01010101 01010101 01010101 01010101     ................
   442c0:	01010101 08010101 01010008 01010101     ................
   442d0:	00000101                                ....

000442d4 <g_am_hal_mcuctrl_flash_size>:
   442d4:	00004000 00008000 00010000 00020000     .@..............
   442e4:	00040000 00080000 00100000 00200000     .............. .
   442f4:	00180000 00000000 00000000 00000000     ................
	...

00044314 <g_am_hal_mcuctrl_sram_size>:
   44314:	00004000 00008000 00010000 00020000     .@..............
   44324:	00040000 00080000 00100000 00060000     ................
   44334:	000c0000 00000000 00000000 00000000     ................
	...

00044354 <am_hal_pwrctrl_peripheral_control>:
	...
   44360:	00000001 00000004 00000004 00000002     ................
   44370:	00000008 00000008 00000004 00000008     ................
   44380:	00000008 00000008 00000008 00000008     ................
   44390:	00000010 00000010 00000010 00000020     ............ ...
   443a0:	00000010 00000010 00000040 00000010     ........@.......
   443b0:	00000010 00000080 00000004 00000004     ................
   443c0:	00000100 00000004 00000004 00000200     ................
   443d0:	00000020 00000020 00000400 00000004      ... ...........
   443e0:	00000004 00000800 00000040 00000040     ........@...@...
   443f0:	00001000 00000080 00000080 00002000     ............. ..
   44400:	00000100 00000100 20616d61 63207872     ........ama rx c
   44410:	616d6d6f 253a646e 00000064 68207872     ommand:%d...rx h
   44420:	6c646e61 6570733a 20686365 74617473     andl:speech stat
   44430:	25202c65 00000064 414d415b 6d43205d     e, %d...[AMA] Cm
   44440:	4f4e2064 59464954 4550535f 5f484345     d NOTIFY_SPEECH_
   44450:	54415453 65722045 49207663 0a454c44     STATE recv IDLE.
   44460:	00000000 414d415b 6d43205d 4f4e2064     ....[AMA] Cmd NO
   44470:	59464954 4550535f 5f484345 54415453     TIFY_SPEECH_STAT
   44480:	65722045 4c207663 45545349 474e494e     E recv LISTENING
   44490:	0000000a 414d415b 6d43205d 4f4e2064     ....[AMA] Cmd NO
   444a0:	59464954 4550535f 5f484345 54415453     TIFY_SPEECH_STAT
   444b0:	65722045 50207663 45434f52 4e495353     E recv PROCESSIN
   444c0:	00000a47 414d415b 6d43205d 4f4e2064     G...[AMA] Cmd NO
   444d0:	59464954 4550535f 5f484345 54415453     TIFY_SPEECH_STAT
   444e0:	65722045 53207663 4b414550 0a474e49     E recv SPEAKING.
   444f0:	00000000 414d415b 6d43205d 4f4e2064     ....[AMA] Cmd NO
   44500:	59464954 4550535f 5f484345 54415453     TIFY_SPEECH_STAT
   44510:	65722045 75207663 6f6e6b6e 25206e77     E recv unknown %
   44520:	00000a64 414d415b 6c50205d 6f667461     d...[AMA] Platfo
   44530:	3a206d72 20642520 656d614e 25203a20     rm : %d Name : %
   44540:	00000a73 72617473 70732074 68636565     s...start speech
   44550:	6e657320 63202c64 6365646f 70797420      send, codec typ
   44560:	64253a65 6c41202c 20617865 20707041     e:%d, Alexa App 
   44570:	74616c50 6d726f66 0064253a              Platform:%d.

0004457c <ControlEnvelope_fields>:
   4457c:	00110001 01000000 00000000 09000000     ................
   4458c:	00033700 0054fffe 47300000 000a0004     .7....T...0G....
   4459c:	feffff37 000004ff 044ce800 37000b00     7.........L....7
   445ac:	fffeffff 0000011c 00044df0 ff37000c     .........M....7.
   445bc:	08fffeff 3c000000 0d00044e ffff3700     .......<N....7..
   445cc:	0004fffe 4ca80000 000e0004 feffff37     .......L....7...
   445dc:	000001ff 044cc800 37001400 fffeffff     ......L....7....
   445ec:	00000004 00044998 ff370015 01fffeff     .....I....7.....
   445fc:	88000000 16000449 ffff3700 0001fffe     ....I....7......
   4460c:	49f80000 00170004 feffff37 000001ff     ...I....7.......
   4461c:	044a1800 37001800 fffeffff 00000001     ..J....7........
   4462c:	00044838 ff370019 02fffeff b8000000     8H....7.........
   4463c:	1a000449 ffff3700 0008fffe 4a280000     I....7........(J
   4464c:	001b0004 feffff37 000050ff 0449d800     ....7....P....I.
   4465c:	37001e00 fffeffff 00000001 00044fc8     ...7.........O..
   4466c:	ff37001f 01fffeff a8000000 2800044f     ..7.........O..(
   4467c:	ffff3700 0022fffe 47b80000 00290004     .7...."....G..).
   4468c:	feffff37 000022ff 0447d800 37003200     7...."....G..2.7
   4469c:	fffeffff 00000008 00044f58 ff370033     ........XO..3.7.
   446ac:	08fffeff 28000000 3700044f ffff3700     .......(O..7.7..
   446bc:	0001fffe 4f080000 00380004 feffff37     .......O..8.7...
   446cc:	000001ff 044f1800 37003c00 fffeffff     ......O..<.7....
   446dc:	00000001 00044a48 ff370064 04fffeff     ....HJ..d.7.....
   446ec:	6c000000 6500044e ffff3700 000cfffe     ...lN..e.7......
   446fc:	4e8c0000 00660004 feffff37 00000cff     ...N..f.7.......
   4470c:	044ee800 37006700 fffeffff 00000001     ..N..g.7........
   4471c:	00044828 00000000 00000000 00000000     (H..............
   4472c:	00000000                                ....

00044730 <Response_fields>:
   44730:	00110001 01000000 00000000 03000000     ................
   44740:	00033700 0050fffe 48c40000 00070004     .7....P....H....
   44750:	feffff37 00000cff 044eac00 37000800     7.........N....7
   44760:	fffeffff 00000042 00044f88 ff37000a     ....B....O....7.
   44770:	02fffeff 94000000 0d000448 ffff3700     ........H....7..
   44780:	0021fffe 47f80000 000e0004 feffff37     ..!....G....7...
   44790:	000004ff 044c8800 37000f00 fffeffff     ......L....7....
   447a0:	00000008 00044d84 00000000 00000000     .....M..........
	...

000447b8 <ForwardATCommand_fields>:
   447b8:	00160001 22000000 00000000 00000000     ......."........
	...

000447d8 <IncomingCall_fields>:
   447d8:	00160001 22000000 00000000 00000000     ......."........
	...

000447f8 <CentralInformation_fields>:
   447f8:	00160001 20000000 00000000 02000000     ....... ........
   44808:	00001100 00010000 00000000 00000000     ................
	...

00044828 <GetCentralInformation_fields>:
	...

00044838 <CompleteSetup_fields>:
   44838:	00110001 01000000 00000000 00000000     ................
	...

00044858 <DeviceBattery_fields>:
   44858:	00110001 04000000 00000000 02000000     ................
   44868:	00001100 00040000 00000000 00030000     ................
   44878:	00000011 00000100 00000000 00000000     ................
	...

00044894 <DeviceConfiguration_fields>:
   44894:	00100001 01000000 00000000 02000000     ................
   448a4:	00001000 00010000 00000000 00000000     ................
	...

000448c4 <DeviceInformation_fields>:
   448c4:	00160001 14000000 00000000 02000000     ................
   448d4:	00001600 00100000 00000000 00030000     ................
   448e4:	fe000221 040001ff 00000000 16000400     !...............
   448f4:	00000000 0000000e 00000000 00110005     ................
   44904:	04000000 00000000 06000000 00001700     ................
   44914:	000c0000 48580000 00070004 00000017     ......XH........
   44924:	00000300 04494c00 11000800 00000001     .....LI.........
   44934:	00000004 00000000 00000000 00000000     ................
	...

0004494c <DeviceStatus_fields>:
   4494c:	00110001 01000000 00000000 02000000     ................
   4495c:	00001100 00010000 00000000 00030000     ................
   4496c:	00000011 00000100 00000000 00000000     ................
	...

00044988 <GetDeviceConfiguration_fields>:
	...

00044998 <GetDeviceInformation_fields>:
   44998:	00110001 04000000 00000000 00000000     ................
	...

000449b8 <NotifyDeviceConfiguration_fields>:
   449b8:	00170001 02000000 94000000 00000448     ............H...
	...

000449d8 <NotifyDeviceInformation_fields>:
   449d8:	00170001 50000000 c4000000 00000448     .......P....H...
	...

000449f8 <OverrideAssistant_fields>:
   449f8:	00110001 01000000 00000000 00000000     ................
	...

00044a18 <StartSetup_fields>:
	...

00044a28 <UpdateDeviceInformation_fields>:
   44a28:	00560001 08000000 00000000 00000000     ..V.............
	...

00044a48 <IssueMediaControl_fields>:
   44a48:	00110001 01000000 00000000 00000000     ................
	...

00044a68 <PB_DECODERS>:
   44a68:	000392e1 00039249 00039365 000390d9     ....I...e.......
   44a78:	0003912d 00039055 00038fd5 00039a01     -...U...........
   44a88:	00000000 00038f61 65726170 7320746e     ....a...parent s
   44a98:	61657274 6f74206d 6873206f 0074726f     tream too short.
   44aa8:	61727261 766f2079 6c667265 0000776f     array overflow..
   44ab8:	61766e69 2064696c 6c656966 79742064     invalid field ty
   44ac8:	00006570 6c6c6163 6b636162 69616620     pe..callback fai
   44ad8:	0064656c 65747962 766f2073 6c667265     led.bytes overfl
   44ae8:	0000776f 6f636e69 63657272 69662074     ow..incorrect fi
   44af8:	20646578 676e656c 62206874 73657479     xed length bytes
   44b08:	7a697320 00000065 657a6973 6f6f7420      size...size too
   44b18:	72616c20 00006567 6d206f6e 6f6c6c61      large..no mallo
   44b28:	75732063 726f7070 00000074 69727473     c support...stri
   44b38:	6f20676e 66726576 00776f6c 61766e69     ng overflow.inva
   44b48:	2064696c 6c656966 65642064 69726373     lid field descri
   44b58:	726f7470 00000000 61766e69 2064696c     ptor....invalid 
   44b68:	61746164 7a69735f 00000065 65746e69     data_size...inte
   44b78:	20726567 206f6f74 6772616c 00000065     ger too large...
   44b88:	6e6f7277 69732067 6620657a 6620726f     wrong size for f
   44b98:	64657869 756f6320 6620746e 646c6569     ixed count field
   44ba8:	00000000 7373696d 20676e69 75716572     ....missing requ
   44bb8:	64657269 65696620 0000646c 2d646e65     ired field..end-
   44bc8:	732d666f 61657274 0000006d 65206f69     of-stream...io e
   44bd8:	726f7272 00000000 69726176 6f20746e     rror....varint o
   44be8:	66726576 00776f6c 61766e69 2064696c     verflow.invalid 
   44bf8:	65726977 7079745f 00000065              wire_type...

00044c04 <PB_ENCODERS>:
   44c04:	00039e39 0003a01d 0003a209 00039c39     9...........9...
   44c14:	00039ca9 0003a789 0003a3fd 0003acd9     ................
   44c24:	00000000 00039d41 61727261 616d2079     ....A...array ma
   44c34:	69732078 6520657a 65656378 00646564     x size exceeded.
   44c44:	6c6c6163 6b636162 72726520 0000726f     callback error..
   44c54:	65747962 69732073 6520657a 65656378     bytes size excee
   44c64:	00646564 65727473 66206d61 006c6c75     ded.stream full.
   44c74:	6d627573 73206773 20657a69 6e616863     submsg size chan
   44c84:	00646567                                ged.

00044c88 <Dialog_fields>:
   44c88:	00110001 04000000 00000000 00000000     ................
	...

00044ca8 <EndpointSpeech_fields>:
   44ca8:	00170001 04000000 88000000 0000044c     ............L...
	...

00044cc8 <NotifySpeechState_fields>:
   44cc8:	00110001 01000000 00000000 00000000     ................
	...

00044ce8 <ProvideSpeech_fields>:
   44ce8:	00170001 04000000 88000000 0000044c     ............L...
	...

00044d08 <SpeechInitiator_WakeWord_fields>:
   44d08:	00110001 04000000 00000000 02000000     ................
   44d18:	00001100 00040000 00000000 00030000     ................
   44d28:	00000010 00000100 00000000 15000400     ................
   44d38:	00000001 00000102 00000000 00000000     ................
	...

00044d54 <SpeechInitiator_fields>:
   44d54:	00110001 01000000 00000000 02000000     ................
   44d64:	00031700 010c0000 4d080000 00000004     ...........M....
	...

00044d84 <SpeechProvider_fields>:
   44d84:	00170001 03000000 b4000000 0200044d     ............M...
   44d94:	00011700 00040000 4c880000 00000004     ...........L....
	...

00044db4 <SpeechSettings_fields>:
   44db4:	00110001 01000000 00000000 02000000     ................
   44dc4:	00001100 00010000 00000000 00030000     ................
   44dd4:	00000011 00000100 00000000 00000000     ................
	...

00044df0 <StartSpeech_fields>:
   44df0:	00170001 03000000 b4000000 0200044d     ............M...
   44e00:	00011700 01100000 4d540000 00030004     ..........TM....
   44e10:	00000017 00000400 044c8800 10000400     ..........L.....
   44e20:	00000000 00000001 00000000 00000000     ................
	...

00044e3c <StopSpeech_fields>:
   44e3c:	00110001 01000000 00000000 02000000     ................
   44e4c:	00031700 00040000 4c880000 00000004     ...........L....
	...

00044e6c <GetState_fields>:
   44e6c:	00110001 04000000 00000000 00000000     ................
	...

00044e8c <SetState_fields>:
   44e8c:	00170001 0c000000 ac000000 0000044e     ............N...
	...

00044eac <State_fields>:
   44eac:	00110001 04000000 00000000 02000000     ................
   44ebc:	00043000 0001fffc 00000000 00030000     .0..............
   44ecc:	fcffff31 000004ff 00000000 00000000     1...............
	...

00044ee8 <SynchronizeState_fields>:
   44ee8:	00170001 0c000000 ac000000 0000044e     ............N...
	...

00044f08 <KeepAlive_fields>:
	...

00044f18 <RemoveDevice_fields>:
	...

00044f28 <ResetConnection_fields>:
   44f28:	00110001 04000000 00000000 02000000     ................
   44f38:	00001000 00010000 00000000 00000000     ................
	...

00044f58 <SynchronizeSettings_fields>:
   44f58:	00110001 04000000 00000000 02000000     ................
   44f68:	00001100 00040000 00000000 00000000     ................
	...

00044f88 <ConnectionDetails_fields>:
   44f88:	00150001 42000000 00000000 00000000     .......B........
	...

00044fa8 <SwitchTransport_fields>:
   44fa8:	00110001 01000000 00000000 00000000     ................
	...

00044fc8 <UpgradeTransport_fields>:
   44fc8:	00110001 01000000 00000000 00000000     ................
	...
   44fe8:	74727173 00000000                       sqrt....
