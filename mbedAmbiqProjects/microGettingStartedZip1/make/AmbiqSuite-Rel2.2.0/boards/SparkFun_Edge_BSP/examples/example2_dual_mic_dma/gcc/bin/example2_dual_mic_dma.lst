
bin/example2_dual_mic_dma.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 59 d5 00 00 c1 d5 00 00 d9 c6 00 00     ....Y...........
    c010:	d9 c6 00 00 d9 c6 00 00 d9 c6 00 00 00 00 00 00     ................
	...
    c02c:	c7 d5 00 00 c7 d5 00 00 00 00 00 00 c7 d5 00 00     ................
    c03c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c04c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c05c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c06c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c07c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 dd c1 00 00     ................
    c08c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c09c:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c0ac:	c7 d5 00 00 c7 d5 00 00 c7 d5 00 00 c7 d5 00 00     ................
    c0bc:	c7 d5 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    c1a0:	b480      	push	{r7}
    c1a2:	b083      	sub	sp, #12
    c1a4:	af00      	add	r7, sp, #0
    c1a6:	4603      	mov	r3, r0
    c1a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    c1aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	db0b      	blt.n	c1ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1b2:	4909      	ldr	r1, [pc, #36]	; (c1d8 <__NVIC_EnableIRQ+0x38>)
    c1b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    c1b8:	095b      	lsrs	r3, r3, #5
    c1ba:	79fa      	ldrb	r2, [r7, #7]
    c1bc:	f002 021f 	and.w	r2, r2, #31
    c1c0:	2001      	movs	r0, #1
    c1c2:	fa00 f202 	lsl.w	r2, r0, r2
    c1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    c1ca:	bf00      	nop
    c1cc:	370c      	adds	r7, #12
    c1ce:	46bd      	mov	sp, r7
    c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	e000e100 	.word	0xe000e100

0000c1dc <am_adc_isr>:
// Interrupt handler for the ADC.
//
//*****************************************************************************
void
am_adc_isr(void)
{
    c1dc:	b580      	push	{r7, lr}
    c1de:	b082      	sub	sp, #8
    c1e0:	af00      	add	r7, sp, #0
    uint32_t ui32IntMask;

    //
    // Read the interrupt status.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    c1e2:	4b17      	ldr	r3, [pc, #92]	; (c240 <am_adc_isr+0x64>)
    c1e4:	681b      	ldr	r3, [r3, #0]
    c1e6:	1d39      	adds	r1, r7, #4
    c1e8:	2200      	movs	r2, #0
    c1ea:	4618      	mov	r0, r3
    c1ec:	f001 fb6c 	bl	d8c8 <am_hal_adc_interrupt_status>
    c1f0:	4603      	mov	r3, r0
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d002      	beq.n	c1fc <am_adc_isr+0x20>
    {
        am_util_stdio_printf("Error reading ADC0 interrupt status\n");
    c1f6:	4813      	ldr	r0, [pc, #76]	; (c244 <am_adc_isr+0x68>)
    c1f8:	f001 f980 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Clear the ADC interrupt.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    c1fc:	4b10      	ldr	r3, [pc, #64]	; (c240 <am_adc_isr+0x64>)
    c1fe:	681b      	ldr	r3, [r3, #0]
    c200:	687a      	ldr	r2, [r7, #4]
    c202:	4611      	mov	r1, r2
    c204:	4618      	mov	r0, r3
    c206:	f001 fb7d 	bl	d904 <am_hal_adc_interrupt_clear>
    c20a:	4603      	mov	r3, r0
    c20c:	2b00      	cmp	r3, #0
    c20e:	d002      	beq.n	c216 <am_adc_isr+0x3a>
    {
        am_util_stdio_printf("Error clearing ADC0 interrupt status\n");
    c210:	480d      	ldr	r0, [pc, #52]	; (c248 <am_adc_isr+0x6c>)
    c212:	f001 f973 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // If we got a DMA complete, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c21c:	2b00      	cmp	r3, #0
    c21e:	d002      	beq.n	c226 <am_adc_isr+0x4a>
    {
        g_bADCDMAComplete = true;
    c220:	4b0a      	ldr	r3, [pc, #40]	; (c24c <am_adc_isr+0x70>)
    c222:	2201      	movs	r2, #1
    c224:	701a      	strb	r2, [r3, #0]
    }

    //
    // If we got a DMA error, set the flag.
    //
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
    c226:	687b      	ldr	r3, [r7, #4]
    c228:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c22c:	2b00      	cmp	r3, #0
    c22e:	d002      	beq.n	c236 <am_adc_isr+0x5a>
    {
        g_bADCDMAError = true;
    c230:	4b07      	ldr	r3, [pc, #28]	; (c250 <am_adc_isr+0x74>)
    c232:	2201      	movs	r2, #1
    c234:	701a      	strb	r2, [r3, #0]
    }
}
    c236:	bf00      	nop
    c238:	3708      	adds	r7, #8
    c23a:	46bd      	mov	sp, r7
    c23c:	bd80      	pop	{r7, pc}
    c23e:	bf00      	nop
    c240:	10001010 	.word	0x10001010
    c244:	0000ec0c 	.word	0x0000ec0c
    c248:	0000ec34 	.word	0x0000ec34
    c24c:	10003138 	.word	0x10003138
    c250:	1000713c 	.word	0x1000713c

0000c254 <sleep>:
// Set up the core for sleeping, and then go to sleep.
//
//*****************************************************************************
void
sleep(void)
{
    c254:	b580      	push	{r7, lr}
    c256:	af00      	add	r7, sp, #0
#endif

    //
    // Go to Deep Sleep.
    //
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c258:	2001      	movs	r0, #1
    c25a:	f002 f82b 	bl	e2b4 <am_hal_sysctrl_sleep>
    // Re-enable peripherals for run mode.
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_enable();
#endif
}
    c25e:	bf00      	nop
    c260:	bd80      	pop	{r7, pc}
	...

0000c264 <adc_config_dma>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config_dma(void)
{
    c264:	b580      	push	{r7, lr}
    c266:	b084      	sub	sp, #16
    c268:	af00      	add	r7, sp, #0
    am_hal_adc_dma_config_t       ADCDMAConfig;

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    ADCDMAConfig.bDynamicPriority = true;
    c26a:	2301      	movs	r3, #1
    c26c:	713b      	strb	r3, [r7, #4]
    ADCDMAConfig.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
    c26e:	2301      	movs	r3, #1
    c270:	717b      	strb	r3, [r7, #5]
    ADCDMAConfig.bDMAEnable = true;
    c272:	2301      	movs	r3, #1
    c274:	71bb      	strb	r3, [r7, #6]
    ADCDMAConfig.ui32SampleCount = ADC_SAMPLE_BUF_SIZE;
    c276:	f44f 6300 	mov.w	r3, #2048	; 0x800
    c27a:	60bb      	str	r3, [r7, #8]
    ADCDMAConfig.ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer;
    c27c:	4b0c      	ldr	r3, [pc, #48]	; (c2b0 <adc_config_dma+0x4c>)
    c27e:	60fb      	str	r3, [r7, #12]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_ADCHandle, &ADCDMAConfig))
    c280:	4b0c      	ldr	r3, [pc, #48]	; (c2b4 <adc_config_dma+0x50>)
    c282:	681b      	ldr	r3, [r3, #0]
    c284:	1d3a      	adds	r2, r7, #4
    c286:	4611      	mov	r1, r2
    c288:	4618      	mov	r0, r3
    c28a:	f001 faaf 	bl	d7ec <am_hal_adc_configure_dma>
    c28e:	4603      	mov	r3, r0
    c290:	2b00      	cmp	r3, #0
    c292:	d002      	beq.n	c29a <adc_config_dma+0x36>
    {
        am_util_stdio_printf("Error - configuring ADC DMA failed.\n");
    c294:	4808      	ldr	r0, [pc, #32]	; (c2b8 <adc_config_dma+0x54>)
    c296:	f001 f931 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Reset the ADC DMA flags.
    //
    g_bADCDMAComplete = false;
    c29a:	4b08      	ldr	r3, [pc, #32]	; (c2bc <adc_config_dma+0x58>)
    c29c:	2200      	movs	r2, #0
    c29e:	701a      	strb	r2, [r3, #0]
    g_bADCDMAError = false;
    c2a0:	4b07      	ldr	r3, [pc, #28]	; (c2c0 <adc_config_dma+0x5c>)
    c2a2:	2200      	movs	r2, #0
    c2a4:	701a      	strb	r2, [r3, #0]
}
    c2a6:	bf00      	nop
    c2a8:	3710      	adds	r7, #16
    c2aa:	46bd      	mov	sp, r7
    c2ac:	bd80      	pop	{r7, pc}
    c2ae:	bf00      	nop
    c2b0:	10001138 	.word	0x10001138
    c2b4:	10001010 	.word	0x10001010
    c2b8:	0000ec5c 	.word	0x0000ec5c
    c2bc:	10003138 	.word	0x10003138
    c2c0:	1000713c 	.word	0x1000713c

0000c2c4 <adc_config0>:
// Configure the ADC.
//
//*****************************************************************************
void
adc_config0(void)
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    am_hal_adc_slot_config_t      ADCSlotConfig;

    //
    // Initialize the ADC and get the handle.
    //
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    c2ca:	493c      	ldr	r1, [pc, #240]	; (c3bc <adc_config0+0xf8>)
    c2cc:	2000      	movs	r0, #0
    c2ce:	f001 f9cf 	bl	d670 <am_hal_adc_initialize>
    c2d2:	4603      	mov	r3, r0
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d002      	beq.n	c2de <adc_config0+0x1a>
    {
        am_util_stdio_printf("Error - reservation of the ADC0 instance failed.\n");
    c2d8:	4839      	ldr	r0, [pc, #228]	; (c3c0 <adc_config0+0xfc>)
    c2da:	f001 f90f 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Power on the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    c2de:	4b37      	ldr	r3, [pc, #220]	; (c3bc <adc_config0+0xf8>)
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	2200      	movs	r2, #0
    c2e4:	2100      	movs	r1, #0
    c2e6:	4618      	mov	r0, r3
    c2e8:	f001 fb30 	bl	d94c <am_hal_adc_power_control>
    c2ec:	4603      	mov	r3, r0
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d002      	beq.n	c2f8 <adc_config0+0x34>
                                                          AM_HAL_SYSCTRL_WAKE,
                                                          false) )
    {
        am_util_stdio_printf("Error - ADC0 power on failed.\n");
    c2f2:	4834      	ldr	r0, [pc, #208]	; (c3c4 <adc_config0+0x100>)
    c2f4:	f001 f902 	bl	d4fc <am_util_stdio_printf>

    //
    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    //
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC_DIV2; // AM_HAL_ADC_CLKSEL_HFRC;
    c2f8:	2302      	movs	r3, #2
    c2fa:	723b      	strb	r3, [r7, #8]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    c2fc:	2300      	movs	r3, #0
    c2fe:	727b      	strb	r3, [r7, #9]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    c300:	2307      	movs	r3, #7
    c302:	72bb      	strb	r3, [r7, #10]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;  //AM_HAL_ADC_REFSEL_INT_1P5;
    c304:	2300      	movs	r3, #0
    c306:	72fb      	strb	r3, [r7, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_LATENCY;
    c308:	2301      	movs	r3, #1
    c30a:	733b      	strb	r3, [r7, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    c30c:	2300      	movs	r3, #0
    c30e:	737b      	strb	r3, [r7, #13]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    c310:	2301      	movs	r3, #1
    c312:	73bb      	strb	r3, [r7, #14]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    c314:	4b29      	ldr	r3, [pc, #164]	; (c3bc <adc_config0+0xf8>)
    c316:	681b      	ldr	r3, [r3, #0]
    c318:	f107 0208 	add.w	r2, r7, #8
    c31c:	4611      	mov	r1, r2
    c31e:	4618      	mov	r0, r3
    c320:	f001 f9f6 	bl	d710 <am_hal_adc_configure>
    c324:	4603      	mov	r3, r0
    c326:	2b00      	cmp	r3, #0
    c328:	d002      	beq.n	c330 <adc_config0+0x6c>
    {
        am_util_stdio_printf("Error - configuring ADC0 failed.\n");
    c32a:	4827      	ldr	r0, [pc, #156]	; (c3c8 <adc_config0+0x104>)
    c32c:	f001 f8e6 	bl	d4fc <am_util_stdio_printf>


    //
    // Set up an ADC slot (2)
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;  //AM_HAL_ADC_SLOT_AVG_128;
    c330:	2300      	movs	r3, #0
    c332:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c334:	2300      	movs	r3, #0
    c336:	707b      	strb	r3, [r7, #1]
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    c338:	2302      	movs	r3, #2
    c33a:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c33c:	2300      	movs	r3, #0
    c33e:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    c340:	2301      	movs	r3, #1
    c342:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 2, &ADCSlotConfig))
    c344:	4b1d      	ldr	r3, [pc, #116]	; (c3bc <adc_config0+0xf8>)
    c346:	681b      	ldr	r3, [r3, #0]
    c348:	463a      	mov	r2, r7
    c34a:	2102      	movs	r1, #2
    c34c:	4618      	mov	r0, r3
    c34e:	f001 fa17 	bl	d780 <am_hal_adc_configure_slot>
    c352:	4603      	mov	r3, r0
    c354:	2b00      	cmp	r3, #0
    c356:	d002      	beq.n	c35e <adc_config0+0x9a>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 2 failed.\n");
    c358:	481c      	ldr	r0, [pc, #112]	; (c3cc <adc_config0+0x108>)
    c35a:	f001 f8cf 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Set up an ADC slot (1)
    //
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;  //AM_HAL_ADC_SLOT_AVG_128;
    c35e:	2300      	movs	r3, #0
    c360:	703b      	strb	r3, [r7, #0]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    c362:	2300      	movs	r3, #0
    c364:	707b      	strb	r3, [r7, #1]
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE0;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    c366:	2301      	movs	r3, #1
    c368:	70bb      	strb	r3, [r7, #2]
    ADCSlotConfig.bWindowCompare  = false;
    c36a:	2300      	movs	r3, #0
    c36c:	70fb      	strb	r3, [r7, #3]
    ADCSlotConfig.bEnabled        = true;
    c36e:	2301      	movs	r3, #1
    c370:	713b      	strb	r3, [r7, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 1, &ADCSlotConfig))
    c372:	4b12      	ldr	r3, [pc, #72]	; (c3bc <adc_config0+0xf8>)
    c374:	681b      	ldr	r3, [r3, #0]
    c376:	463a      	mov	r2, r7
    c378:	2101      	movs	r1, #1
    c37a:	4618      	mov	r0, r3
    c37c:	f001 fa00 	bl	d780 <am_hal_adc_configure_slot>
    c380:	4603      	mov	r3, r0
    c382:	2b00      	cmp	r3, #0
    c384:	d002      	beq.n	c38c <adc_config0+0xc8>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 1 failed.\n");
    c386:	4812      	ldr	r0, [pc, #72]	; (c3d0 <adc_config0+0x10c>)
    c388:	f001 f8b8 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Configure the ADC to use DMA for the sample transfer.
    //
    adc_config_dma();
    c38c:	f7ff ff6a 	bl	c264 <adc_config_dma>

    //
    // For this example, the samples will be coming in slowly. This means we
    // can afford to wake up for every conversion.
    //
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
    c390:	4b0a      	ldr	r3, [pc, #40]	; (c3bc <adc_config0+0xf8>)
    c392:	681b      	ldr	r3, [r3, #0]
    c394:	21c0      	movs	r1, #192	; 0xc0
    c396:	4618      	mov	r0, r3
    c398:	f001 fa80 	bl	d89c <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    c39c:	4b07      	ldr	r3, [pc, #28]	; (c3bc <adc_config0+0xf8>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	4618      	mov	r0, r3
    c3a2:	f001 fa5b 	bl	d85c <am_hal_adc_enable>
    c3a6:	4603      	mov	r3, r0
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d002      	beq.n	c3b2 <adc_config0+0xee>
    {
        am_util_stdio_printf("Error - enabling ADC0 failed.\n");
    c3ac:	4809      	ldr	r0, [pc, #36]	; (c3d4 <adc_config0+0x110>)
    c3ae:	f001 f8a5 	bl	d4fc <am_util_stdio_printf>
    }
}
    c3b2:	bf00      	nop
    c3b4:	3710      	adds	r7, #16
    c3b6:	46bd      	mov	sp, r7
    c3b8:	bd80      	pop	{r7, pc}
    c3ba:	bf00      	nop
    c3bc:	10001010 	.word	0x10001010
    c3c0:	0000ec84 	.word	0x0000ec84
    c3c4:	0000ecb8 	.word	0x0000ecb8
    c3c8:	0000ecd8 	.word	0x0000ecd8
    c3cc:	0000ecfc 	.word	0x0000ecfc
    c3d0:	0000ed24 	.word	0x0000ed24
    c3d4:	0000ed4c 	.word	0x0000ed4c

0000c3d8 <init_timerA3_for_ADC>:
// Initialize the ADC repetitive sample timer A3.
//
//*****************************************************************************
void
init_timerA3_for_ADC(void)
{
    c3d8:	b580      	push	{r7, lr}
    c3da:	af00      	add	r7, sp, #0
    //
    // Start a timer to trigger the ADC periodically (1 second).
    //
    am_hal_ctimer_config_single(3, AM_HAL_CTIMER_TIMERA,
    c3dc:	f240 2242 	movw	r2, #578	; 0x242
    c3e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3e4:	2003      	movs	r0, #3
    c3e6:	f001 fbef 	bl	dbc8 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_HFRC_12MHZ    |
                                AM_HAL_CTIMER_FN_REPEAT     |
                                AM_HAL_CTIMER_INT_ENABLE);

    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA3);
    c3ea:	2040      	movs	r0, #64	; 0x40
    c3ec:	f001 fcbe 	bl	dd6c <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(3, AM_HAL_CTIMER_TIMERA, 750, 374);
    c3f0:	f44f 73bb 	mov.w	r3, #374	; 0x176
    c3f4:	f240 22ee 	movw	r2, #750	; 0x2ee
    c3f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3fc:	2003      	movs	r0, #3
    c3fe:	f001 fc4d 	bl	dc9c <am_hal_ctimer_period_set>

    //
    // Enable the timer A3 to trigger the ADC directly
    //
    am_hal_ctimer_adc_trigger_enable();
    c402:	f001 fca1 	bl	dd48 <am_hal_ctimer_adc_trigger_enable>

    //
    // Start the timer.
    //
    am_hal_ctimer_start(3, AM_HAL_CTIMER_TIMERA);
    c406:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c40a:	2003      	movs	r0, #3
    c40c:	f001 fc1c 	bl	dc48 <am_hal_ctimer_start>
}
    c410:	bf00      	nop
    c412:	bd80      	pop	{r7, pc}

0000c414 <main>:
// Main function.
//
//*****************************************************************************
int
main(void)
{
    c414:	b580      	push	{r7, lr}
    c416:	b088      	sub	sp, #32
    c418:	af00      	add	r7, sp, #0
    am_bsp_uart_printf_enable();                                            // Enable UART - will set debug output to UART. Replaces icm print enable
    c41a:	f001 f8fb 	bl	d614 <am_bsp_uart_printf_enable>
    am_util_stdio_terminal_clear();
    c41e:	f001 f891 	bl	d544 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge DMA ADC Test\n");
    c422:	4884      	ldr	r0, [pc, #528]	; (c634 <main+0x220>)
    c424:	f001 f86a 	bl	d4fc <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c428:	4a83      	ldr	r2, [pc, #524]	; (c638 <main+0x224>)
    c42a:	4984      	ldr	r1, [pc, #528]	; (c63c <main+0x228>)
    c42c:	4884      	ldr	r0, [pc, #528]	; (c640 <main+0x22c>)
    c42e:	f001 f865 	bl	d4fc <am_util_stdio_printf>


    //
    // Set the clock frequency.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0))
    c432:	2100      	movs	r1, #0
    c434:	2000      	movs	r0, #0
    c436:	f001 fb1d 	bl	da74 <am_hal_clkgen_control>
    c43a:	4603      	mov	r3, r0
    c43c:	2b00      	cmp	r3, #0
    c43e:	d002      	beq.n	c446 <main+0x32>
    {
        am_util_stdio_printf("Error - configuring the system clock failed.\n");
    c440:	4880      	ldr	r0, [pc, #512]	; (c644 <main+0x230>)
    c442:	f001 f85b 	bl	d4fc <am_util_stdio_printf>


    //
    // Set the default cache configuration and enable it.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_config(&am_hal_cachectrl_defaults))
    c446:	4880      	ldr	r0, [pc, #512]	; (c648 <main+0x234>)
    c448:	f001 fae4 	bl	da14 <am_hal_cachectrl_config>
    c44c:	4603      	mov	r3, r0
    c44e:	2b00      	cmp	r3, #0
    c450:	d002      	beq.n	c458 <main+0x44>
    {
        am_util_stdio_printf("Error - configuring the system cache failed.\n");
    c452:	487e      	ldr	r0, [pc, #504]	; (c64c <main+0x238>)
    c454:	f001 f852 	bl	d4fc <am_util_stdio_printf>
    }
    if (AM_HAL_STATUS_SUCCESS != am_hal_cachectrl_enable())
    c458:	f001 fb02 	bl	da60 <am_hal_cachectrl_enable>
    c45c:	4603      	mov	r3, r0
    c45e:	2b00      	cmp	r3, #0
    c460:	d002      	beq.n	c468 <main+0x54>
    {
        am_util_stdio_printf("Error - enabling the system cache failed.\n");
    c462:	487b      	ldr	r0, [pc, #492]	; (c650 <main+0x23c>)
    c464:	f001 f84a 	bl	d4fc <am_util_stdio_printf>


    //
    // Enable only the first 512KB bank of Flash (0).  Disable Flash(1)
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K))
    c468:	200e      	movs	r0, #14
    c46a:	f001 fedb 	bl	e224 <am_hal_pwrctrl_memory_enable>
    c46e:	4603      	mov	r3, r0
    c470:	2b00      	cmp	r3, #0
    c472:	d002      	beq.n	c47a <main+0x66>
    {
        am_util_stdio_printf("Error - configuring the flash memory failed.\n");
    c474:	4877      	ldr	r0, [pc, #476]	; (c654 <main+0x240>)
    c476:	f001 f841 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Enable the first 32K of TCM SRAM.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM))
    c47a:	2002      	movs	r0, #2
    c47c:	f001 fed2 	bl	e224 <am_hal_pwrctrl_memory_enable>
    c480:	4603      	mov	r3, r0
    c482:	2b00      	cmp	r3, #0
    c484:	d002      	beq.n	c48c <main+0x78>
    {
        am_util_stdio_printf("Error - configuring the SRAM failed.\n");
    c486:	4874      	ldr	r0, [pc, #464]	; (c658 <main+0x244>)
    c488:	f001 f838 	bl	d4fc <am_util_stdio_printf>
    }

    am_util_stdio_printf("Ayyy boo\n");
    c48c:	4873      	ldr	r0, [pc, #460]	; (c65c <main+0x248>)
    c48e:	f001 f835 	bl	d4fc <am_util_stdio_printf>


    //
    // Start the CTIMER A3 for timer-based ADC measurements.
    //
    init_timerA3_for_ADC();
    c492:	f7ff ffa1 	bl	c3d8 <init_timerA3_for_ADC>

    //
    // Enable interrupts.
    //
    NVIC_EnableIRQ(ADC_IRQn);
    c496:	2012      	movs	r0, #18
    c498:	f7ff fe82 	bl	c1a0 <__NVIC_EnableIRQ>
    am_hal_interrupt_master_enable();
    c49c:	f001 fdca 	bl	e034 <am_hal_interrupt_master_enable>

    //
    // Set a pin(s) to act as our ADC input
    //
    am_hal_gpio_pinconfig(SF_EDGE_PIN_MIC0, g_SF_EDGE_PIN_MIC0);
    c4a0:	4b6f      	ldr	r3, [pc, #444]	; (c660 <main+0x24c>)
    c4a2:	6819      	ldr	r1, [r3, #0]
    c4a4:	200b      	movs	r0, #11
    c4a6:	f001 fc89 	bl	ddbc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(SF_EDGE_PIN_MIC1, g_SF_EDGE_PIN_MIC1);
    c4aa:	4b6e      	ldr	r3, [pc, #440]	; (c664 <main+0x250>)
    c4ac:	6819      	ldr	r1, [r3, #0]
    c4ae:	201d      	movs	r0, #29
    c4b0:	f001 fc84 	bl	ddbc <am_hal_gpio_pinconfig>

    //
    // Configure the ADC
    //
    adc_config0();
    c4b4:	f7ff ff06 	bl	c2c4 <adc_config0>

    //
    // Trigger the ADC sampling for the first time manually.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c4b8:	4b6b      	ldr	r3, [pc, #428]	; (c668 <main+0x254>)
    c4ba:	681b      	ldr	r3, [r3, #0]
    c4bc:	4618      	mov	r0, r3
    c4be:	f001 fa33 	bl	d928 <am_hal_adc_sw_trigger>
    c4c2:	4603      	mov	r3, r0
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d002      	beq.n	c4ce <main+0xba>
    {
        am_util_stdio_printf("Error - triggering the ADC0 failed.\n");
    c4c8:	4868      	ldr	r0, [pc, #416]	; (c66c <main+0x258>)
    c4ca:	f001 f817 	bl	d4fc <am_util_stdio_printf>
    }

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c4ce:	f001 f839 	bl	d544 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("ADC Example with 1.2Msps and LPMODE=0\n");
    c4d2:	4867      	ldr	r0, [pc, #412]	; (c670 <main+0x25c>)
    c4d4:	f001 f812 	bl	d4fc <am_util_stdio_printf>

    //
    // Allow time for all printing to finish.
    //
    am_util_delay_ms(10);
    c4d8:	200a      	movs	r0, #10
    c4da:	f000 f8df 	bl	c69c <am_util_delay_ms>
    //
#if (0 == ADC_EXAMPLE_DEBUG)
    am_bsp_debug_printf_disable();
#endif

    am_util_stdio_printf("Entering the loop...\n");
    c4de:	4865      	ldr	r0, [pc, #404]	; (c674 <main+0x260>)
    c4e0:	f001 f80c 	bl	d4fc <am_util_stdio_printf>
    {
 
        //
        // Go to Deep Sleep.
        //
        if (!g_bADCDMAComplete)
    c4e4:	4b64      	ldr	r3, [pc, #400]	; (c678 <main+0x264>)
    c4e6:	781b      	ldrb	r3, [r3, #0]
    c4e8:	b2db      	uxtb	r3, r3
    c4ea:	f083 0301 	eor.w	r3, r3, #1
    c4ee:	b2db      	uxtb	r3, r3
    c4f0:	2b00      	cmp	r3, #0
    c4f2:	d001      	beq.n	c4f8 <main+0xe4>
        {
            sleep();
    c4f4:	f7ff feae 	bl	c254 <sleep>
        }

        //
        // Check for DMA errors.
        //
        if (g_bADCDMAError)
    c4f8:	4b60      	ldr	r3, [pc, #384]	; (c67c <main+0x268>)
    c4fa:	781b      	ldrb	r3, [r3, #0]
    c4fc:	b2db      	uxtb	r3, r3
    c4fe:	2b00      	cmp	r3, #0
    c500:	d003      	beq.n	c50a <main+0xf6>
        {
            am_util_stdio_printf("DMA Error occured\n");
    c502:	485f      	ldr	r0, [pc, #380]	; (c680 <main+0x26c>)
    c504:	f000 fffa 	bl	d4fc <am_util_stdio_printf>
            while(1);
    c508:	e7fe      	b.n	c508 <main+0xf4>
        }

        //
        // Check if the ADC DMA completion interrupt occurred.
        //
        if (g_bADCDMAComplete)
    c50a:	4b5b      	ldr	r3, [pc, #364]	; (c678 <main+0x264>)
    c50c:	781b      	ldrb	r3, [r3, #0]
    c50e:	b2db      	uxtb	r3, r3
    c510:	2b00      	cmp	r3, #0
    c512:	d0e7      	beq.n	c4e4 <main+0xd0>
        {
#if ADC_EXAMPLE_DEBUG
            {
                // uint32_t        ui32SampleCount;
                am_util_stdio_printf("DMA Complete\n");
    c514:	485b      	ldr	r0, [pc, #364]	; (c684 <main+0x270>)
    c516:	f000 fff1 	bl	d4fc <am_util_stdio_printf>
                //      .ui32Slot field actually gets set

                // I tried to write a function to take the raw samples fromt the ADC and sort them into the right buffer. It was close but I bailed to just hard-code it for now

                // For slot 1:
                uint32_t slotCount = 0;
    c51a:	2300      	movs	r3, #0
    c51c:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c51e:	2300      	movs	r3, #0
    c520:	61bb      	str	r3, [r7, #24]
    c522:	e022      	b.n	c56a <main+0x156>
                    am_hal_adc_sample_t temp;

                    temp.ui32Slot   = AM_HAL_ADC_FIFO_SLOT(g_ui32ADCSampleBuffer[indi]);
    c524:	4a58      	ldr	r2, [pc, #352]	; (c688 <main+0x274>)
    c526:	69bb      	ldr	r3, [r7, #24]
    c528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c52c:	0f1b      	lsrs	r3, r3, #28
    c52e:	f003 0307 	and.w	r3, r3, #7
    c532:	60fb      	str	r3, [r7, #12]
                    temp.ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(g_ui32ADCSampleBuffer[indi]);
    c534:	4a54      	ldr	r2, [pc, #336]	; (c688 <main+0x274>)
    c536:	69bb      	ldr	r3, [r7, #24]
    c538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c53c:	099b      	lsrs	r3, r3, #6
    c53e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c542:	60bb      	str	r3, [r7, #8]

                    if( temp.ui32Slot == 1 ){
    c544:	68fb      	ldr	r3, [r7, #12]
    c546:	2b01      	cmp	r3, #1
    c548:	d10c      	bne.n	c564 <main+0x150>
                        SampleBuffer1[slotCount] = temp;
    c54a:	4a50      	ldr	r2, [pc, #320]	; (c68c <main+0x278>)
    c54c:	69fb      	ldr	r3, [r7, #28]
    c54e:	00db      	lsls	r3, r3, #3
    c550:	4413      	add	r3, r2
    c552:	f107 0208 	add.w	r2, r7, #8
    c556:	e892 0003 	ldmia.w	r2, {r0, r1}
    c55a:	e883 0003 	stmia.w	r3, {r0, r1}
                        slotCount++;
    c55e:	69fb      	ldr	r3, [r7, #28]
    c560:	3301      	adds	r3, #1
    c562:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c564:	69bb      	ldr	r3, [r7, #24]
    c566:	3301      	adds	r3, #1
    c568:	61bb      	str	r3, [r7, #24]
    c56a:	69bb      	ldr	r3, [r7, #24]
    c56c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c570:	d3d8      	bcc.n	c524 <main+0x110>
                    }
                }


                slotCount = 0;
    c572:	2300      	movs	r3, #0
    c574:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c576:	2300      	movs	r3, #0
    c578:	617b      	str	r3, [r7, #20]
    c57a:	e021      	b.n	c5c0 <main+0x1ac>
                    am_hal_adc_sample_t temp;

                    temp.ui32Slot   = AM_HAL_ADC_FIFO_SLOT(g_ui32ADCSampleBuffer[indi]);
    c57c:	4a42      	ldr	r2, [pc, #264]	; (c688 <main+0x274>)
    c57e:	697b      	ldr	r3, [r7, #20]
    c580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c584:	0f1b      	lsrs	r3, r3, #28
    c586:	f003 0307 	and.w	r3, r3, #7
    c58a:	607b      	str	r3, [r7, #4]
                    temp.ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(g_ui32ADCSampleBuffer[indi]);
    c58c:	4a3e      	ldr	r2, [pc, #248]	; (c688 <main+0x274>)
    c58e:	697b      	ldr	r3, [r7, #20]
    c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c594:	099b      	lsrs	r3, r3, #6
    c596:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c59a:	603b      	str	r3, [r7, #0]

                    if( temp.ui32Slot == 2 ){
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	2b02      	cmp	r3, #2
    c5a0:	d10b      	bne.n	c5ba <main+0x1a6>
                        SampleBuffer0[slotCount] = temp;
    c5a2:	4a3b      	ldr	r2, [pc, #236]	; (c690 <main+0x27c>)
    c5a4:	69fb      	ldr	r3, [r7, #28]
    c5a6:	00db      	lsls	r3, r3, #3
    c5a8:	4413      	add	r3, r2
    c5aa:	463a      	mov	r2, r7
    c5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
    c5b0:	e883 0003 	stmia.w	r3, {r0, r1}
                        slotCount++;
    c5b4:	69fb      	ldr	r3, [r7, #28]
    c5b6:	3301      	adds	r3, #1
    c5b8:	61fb      	str	r3, [r7, #28]
                for( uint32_t indi = 0; indi < ADC_SAMPLE_BUF_SIZE; indi++){
    c5ba:	697b      	ldr	r3, [r7, #20]
    c5bc:	3301      	adds	r3, #1
    c5be:	617b      	str	r3, [r7, #20]
    c5c0:	697b      	ldr	r3, [r7, #20]
    c5c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c5c6:	d3d9      	bcc.n	c57c <main+0x168>
                    }
                }

                // Print out the results over UART for visual verification
                for(uint32_t indi = 0; indi < ADC_SAMPLES_PER_SLOT; indi++){
    c5c8:	2300      	movs	r3, #0
    c5ca:	613b      	str	r3, [r7, #16]
    c5cc:	e00e      	b.n	c5ec <main+0x1d8>
                    // am_util_stdio_printf("%d, %d\n", SampleBuffer0[indi].ui32Slot, SampleBuffer1[indi].ui32Slot);           // Show slot numbers

                    am_util_stdio_printf("%d, %d\n", SampleBuffer0[indi].ui32Sample, SampleBuffer1[indi].ui32Sample);    // Show values
    c5ce:	4a30      	ldr	r2, [pc, #192]	; (c690 <main+0x27c>)
    c5d0:	693b      	ldr	r3, [r7, #16]
    c5d2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    c5d6:	4a2d      	ldr	r2, [pc, #180]	; (c68c <main+0x278>)
    c5d8:	693b      	ldr	r3, [r7, #16]
    c5da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    c5de:	461a      	mov	r2, r3
    c5e0:	482c      	ldr	r0, [pc, #176]	; (c694 <main+0x280>)
    c5e2:	f000 ff8b 	bl	d4fc <am_util_stdio_printf>
                for(uint32_t indi = 0; indi < ADC_SAMPLES_PER_SLOT; indi++){
    c5e6:	693b      	ldr	r3, [r7, #16]
    c5e8:	3301      	adds	r3, #1
    c5ea:	613b      	str	r3, [r7, #16]
    c5ec:	693b      	ldr	r3, [r7, #16]
    c5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c5f2:	d3ec      	bcc.n	c5ce <main+0x1ba>
#endif

            //
            // Reset the DMA completion and error flags.
            //
            g_bADCDMAComplete = false;
    c5f4:	4b20      	ldr	r3, [pc, #128]	; (c678 <main+0x264>)
    c5f6:	2200      	movs	r2, #0
    c5f8:	701a      	strb	r2, [r3, #0]

            //
            // Re-configure the ADC DMA.
            //
            adc_config_dma();
    c5fa:	f7ff fe33 	bl	c264 <adc_config_dma>

            //
            // Clear the ADC interrupts.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, 0xFFFFFFFF))
    c5fe:	4b1a      	ldr	r3, [pc, #104]	; (c668 <main+0x254>)
    c600:	681b      	ldr	r3, [r3, #0]
    c602:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c606:	4618      	mov	r0, r3
    c608:	f001 f97c 	bl	d904 <am_hal_adc_interrupt_clear>
    c60c:	4603      	mov	r3, r0
    c60e:	2b00      	cmp	r3, #0
    c610:	d002      	beq.n	c618 <main+0x204>
            {
                am_util_stdio_printf("Error - clearing the ADC0 interrupts failed.\n");
    c612:	4821      	ldr	r0, [pc, #132]	; (c698 <main+0x284>)
    c614:	f000 ff72 	bl	d4fc <am_util_stdio_printf>
            }

            //
            // Trigger the ADC sampling for the first time manually.
            //
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_ADCHandle))
    c618:	4b13      	ldr	r3, [pc, #76]	; (c668 <main+0x254>)
    c61a:	681b      	ldr	r3, [r3, #0]
    c61c:	4618      	mov	r0, r3
    c61e:	f001 f983 	bl	d928 <am_hal_adc_sw_trigger>
    c622:	4603      	mov	r3, r0
    c624:	2b00      	cmp	r3, #0
    c626:	f43f af5d 	beq.w	c4e4 <main+0xd0>
            {
                am_util_stdio_printf("Error - triggering the ADC0 failed.\n");
    c62a:	4810      	ldr	r0, [pc, #64]	; (c66c <main+0x258>)
    c62c:	f000 ff66 	bl	d4fc <am_util_stdio_printf>
        if (!g_bADCDMAComplete)
    c630:	e758      	b.n	c4e4 <main+0xd0>
    c632:	bf00      	nop
    c634:	0000ed6c 	.word	0x0000ed6c
    c638:	0000ed88 	.word	0x0000ed88
    c63c:	0000ed94 	.word	0x0000ed94
    c640:	0000eda0 	.word	0x0000eda0
    c644:	0000edb8 	.word	0x0000edb8
    c648:	0000efb8 	.word	0x0000efb8
    c64c:	0000ede8 	.word	0x0000ede8
    c650:	0000ee18 	.word	0x0000ee18
    c654:	0000ee44 	.word	0x0000ee44
    c658:	0000ee74 	.word	0x0000ee74
    c65c:	0000ee9c 	.word	0x0000ee9c
    c660:	0000ef80 	.word	0x0000ef80
    c664:	0000ef84 	.word	0x0000ef84
    c668:	10001010 	.word	0x10001010
    c66c:	0000eea8 	.word	0x0000eea8
    c670:	0000eed0 	.word	0x0000eed0
    c674:	0000eef8 	.word	0x0000eef8
    c678:	10003138 	.word	0x10003138
    c67c:	1000713c 	.word	0x1000713c
    c680:	0000ef10 	.word	0x0000ef10
    c684:	0000ef24 	.word	0x0000ef24
    c688:	10001138 	.word	0x10001138
    c68c:	1000513c 	.word	0x1000513c
    c690:	1000313c 	.word	0x1000313c
    c694:	0000ef34 	.word	0x0000ef34
    c698:	0000ef3c 	.word	0x0000ef3c

0000c69c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b088      	sub	sp, #32
    c6a0:	af00      	add	r7, sp, #0
    c6a2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c6a4:	f107 030c 	add.w	r3, r7, #12
    c6a8:	4618      	mov	r0, r3
    c6aa:	f001 fa6f 	bl	db8c <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
    c6ae:	68fb      	ldr	r3, [r7, #12]
    c6b0:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c6b2:	69fb      	ldr	r3, [r7, #28]
    c6b4:	4a07      	ldr	r2, [pc, #28]	; (c6d4 <am_util_delay_ms+0x38>)
    c6b6:	fba2 2303 	umull	r2, r3, r2, r3
    c6ba:	099b      	lsrs	r3, r3, #6
    c6bc:	687a      	ldr	r2, [r7, #4]
    c6be:	fb02 f303 	mul.w	r3, r2, r3
    c6c2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c6c4:	69b8      	ldr	r0, [r7, #24]
    c6c6:	f001 fb65 	bl	dd94 <am_hal_flash_delay>
}
    c6ca:	bf00      	nop
    c6cc:	3720      	adds	r7, #32
    c6ce:	46bd      	mov	sp, r7
    c6d0:	bd80      	pop	{r7, pc}
    c6d2:	bf00      	nop
    c6d4:	057619f1 	.word	0x057619f1

0000c6d8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6d8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6da:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6de:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6e0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c6e4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c6e8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c6ec:	f000 f80a 	bl	c704 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c6f0:	bd01      	pop	{r0, pc}
}
    c6f2:	bf00      	nop
    c6f4:	4618      	mov	r0, r3

0000c6f6 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c6f6:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c6f8:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c6fa:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c6fc:	4770      	bx	lr
}
    c6fe:	bf00      	nop
    c700:	4618      	mov	r0, r3
	...

0000c704 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c704:	b580      	push	{r7, lr}
    c706:	b096      	sub	sp, #88	; 0x58
    c708:	af00      	add	r7, sp, #0
    c70a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c70c:	f107 030c 	add.w	r3, r7, #12
    c710:	2200      	movs	r2, #0
    c712:	601a      	str	r2, [r3, #0]
    c714:	605a      	str	r2, [r3, #4]
    c716:	609a      	str	r2, [r3, #8]
    c718:	60da      	str	r2, [r3, #12]
    c71a:	611a      	str	r2, [r3, #16]
    c71c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c71e:	2300      	movs	r3, #0
    c720:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c724:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c726:	4b2e      	ldr	r3, [pc, #184]	; (c7e0 <am_util_faultisr_collect_data+0xdc>)
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c72c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c72e:	b2db      	uxtb	r3, r3
    c730:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c736:	0a1b      	lsrs	r3, r3, #8
    c738:	b2db      	uxtb	r3, r3
    c73a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c740:	0c1b      	lsrs	r3, r3, #16
    c742:	b29b      	uxth	r3, r3
    c744:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c748:	4b26      	ldr	r3, [pc, #152]	; (c7e4 <am_util_faultisr_collect_data+0xe0>)
    c74a:	681b      	ldr	r3, [r3, #0]
    c74c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c74e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c752:	b2db      	uxtb	r3, r3
    c754:	f003 0302 	and.w	r3, r3, #2
    c758:	2b00      	cmp	r3, #0
    c75a:	d005      	beq.n	c768 <am_util_faultisr_collect_data+0x64>
    c75c:	6879      	ldr	r1, [r7, #4]
    c75e:	2006      	movs	r0, #6
    c760:	f7ff ffc9 	bl	c6f6 <getStackedReg>
    c764:	4603      	mov	r3, r0
    c766:	e001      	b.n	c76c <am_util_faultisr_collect_data+0x68>
    c768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c76c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76e:	6879      	ldr	r1, [r7, #4]
    c770:	2000      	movs	r0, #0
    c772:	f7ff ffc0 	bl	c6f6 <getStackedReg>
    c776:	4603      	mov	r3, r0
    c778:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c77a:	6879      	ldr	r1, [r7, #4]
    c77c:	2001      	movs	r0, #1
    c77e:	f7ff ffba 	bl	c6f6 <getStackedReg>
    c782:	4603      	mov	r3, r0
    c784:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c786:	6879      	ldr	r1, [r7, #4]
    c788:	2002      	movs	r0, #2
    c78a:	f7ff ffb4 	bl	c6f6 <getStackedReg>
    c78e:	4603      	mov	r3, r0
    c790:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c792:	6879      	ldr	r1, [r7, #4]
    c794:	2003      	movs	r0, #3
    c796:	f7ff ffae 	bl	c6f6 <getStackedReg>
    c79a:	4603      	mov	r3, r0
    c79c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79e:	6879      	ldr	r1, [r7, #4]
    c7a0:	2004      	movs	r0, #4
    c7a2:	f7ff ffa8 	bl	c6f6 <getStackedReg>
    c7a6:	4603      	mov	r3, r0
    c7a8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7aa:	6879      	ldr	r1, [r7, #4]
    c7ac:	2005      	movs	r0, #5
    c7ae:	f7ff ffa2 	bl	c6f6 <getStackedReg>
    c7b2:	4603      	mov	r3, r0
    c7b4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b6:	6879      	ldr	r1, [r7, #4]
    c7b8:	2006      	movs	r0, #6
    c7ba:	f7ff ff9c 	bl	c6f6 <getStackedReg>
    c7be:	4603      	mov	r3, r0
    c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c2:	6879      	ldr	r1, [r7, #4]
    c7c4:	2007      	movs	r0, #7
    c7c6:	f7ff ff96 	bl	c6f6 <getStackedReg>
    c7ca:	4603      	mov	r3, r0
    c7cc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7ce:	f107 030c 	add.w	r3, r7, #12
    c7d2:	4619      	mov	r1, r3
    c7d4:	2002      	movs	r0, #2
    c7d6:	f001 fc39 	bl	e04c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c7da:	2300      	movs	r3, #0
    c7dc:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c7de:	e7fe      	b.n	c7de <am_util_faultisr_collect_data+0xda>
    c7e0:	e000ed28 	.word	0xe000ed28
    c7e4:	e000ed38 	.word	0xe000ed38

0000c7e8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c7e8:	b480      	push	{r7}
    c7ea:	b083      	sub	sp, #12
    c7ec:	af00      	add	r7, sp, #0
    c7ee:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c7f0:	4a04      	ldr	r2, [pc, #16]	; (c804 <am_util_stdio_printf_init+0x1c>)
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	6013      	str	r3, [r2, #0]
}
    c7f6:	bf00      	nop
    c7f8:	370c      	adds	r7, #12
    c7fa:	46bd      	mov	sp, r7
    c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    c800:	4770      	bx	lr
    c802:	bf00      	nop
    c804:	10007140 	.word	0x10007140

0000c808 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c808:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c80c:	b096      	sub	sp, #88	; 0x58
    c80e:	af00      	add	r7, sp, #0
    c810:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c814:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c818:	0025      	movs	r5, r4
    c81a:	2600      	movs	r6, #0
    c81c:	ea55 0306 	orrs.w	r3, r5, r6
    c820:	f000 80a0 	beq.w	c964 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c824:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c828:	0862      	lsrs	r2, r4, #1
    c82a:	ea4f 0133 	mov.w	r1, r3, rrx
    c82e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c832:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c836:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c83a:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c83e:	eb11 0308 	adds.w	r3, r1, r8
    c842:	eb42 0409 	adc.w	r4, r2, r9
    c846:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c84a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c84e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c852:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c856:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c85a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c85e:	eb13 030a 	adds.w	r3, r3, sl
    c862:	eb44 040b 	adc.w	r4, r4, fp
    c866:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c86a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c86e:	0a1a      	lsrs	r2, r3, #8
    c870:	62ba      	str	r2, [r7, #40]	; 0x28
    c872:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c874:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c878:	62ba      	str	r2, [r7, #40]	; 0x28
    c87a:	0a23      	lsrs	r3, r4, #8
    c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
    c87e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c882:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c886:	18c9      	adds	r1, r1, r3
    c888:	eb42 0204 	adc.w	r2, r2, r4
    c88c:	460b      	mov	r3, r1
    c88e:	4614      	mov	r4, r2
    c890:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c894:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c898:	0c1a      	lsrs	r2, r3, #16
    c89a:	623a      	str	r2, [r7, #32]
    c89c:	6a3a      	ldr	r2, [r7, #32]
    c89e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c8a2:	623a      	str	r2, [r7, #32]
    c8a4:	0c23      	lsrs	r3, r4, #16
    c8a6:	627b      	str	r3, [r7, #36]	; 0x24
    c8a8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c8b0:	18c9      	adds	r1, r1, r3
    c8b2:	eb42 0204 	adc.w	r2, r2, r4
    c8b6:	460b      	mov	r3, r1
    c8b8:	4614      	mov	r4, r2
    c8ba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c8be:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8c2:	0023      	movs	r3, r4
    c8c4:	603b      	str	r3, [r7, #0]
    c8c6:	2300      	movs	r3, #0
    c8c8:	607b      	str	r3, [r7, #4]
    c8ca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8ce:	e9d7 1200 	ldrd	r1, r2, [r7]
    c8d2:	18c9      	adds	r1, r1, r3
    c8d4:	eb42 0204 	adc.w	r2, r2, r4
    c8d8:	460b      	mov	r3, r1
    c8da:	4614      	mov	r4, r2
    c8dc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c8e0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c8e4:	08da      	lsrs	r2, r3, #3
    c8e6:	613a      	str	r2, [r7, #16]
    c8e8:	693a      	ldr	r2, [r7, #16]
    c8ea:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c8ee:	613a      	str	r2, [r7, #16]
    c8f0:	08e3      	lsrs	r3, r4, #3
    c8f2:	617b      	str	r3, [r7, #20]
    c8f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c8f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c8fc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c900:	460b      	mov	r3, r1
    c902:	4614      	mov	r4, r2
    c904:	00a0      	lsls	r0, r4, #2
    c906:	60f8      	str	r0, [r7, #12]
    c908:	68f8      	ldr	r0, [r7, #12]
    c90a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c90e:	60f8      	str	r0, [r7, #12]
    c910:	009b      	lsls	r3, r3, #2
    c912:	60bb      	str	r3, [r7, #8]
    c914:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c918:	185b      	adds	r3, r3, r1
    c91a:	eb44 0402 	adc.w	r4, r4, r2
    c91e:	18db      	adds	r3, r3, r3
    c920:	eb44 0404 	adc.w	r4, r4, r4
    c924:	4619      	mov	r1, r3
    c926:	4622      	mov	r2, r4
    c928:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c92c:	1a5b      	subs	r3, r3, r1
    c92e:	eb64 0402 	sbc.w	r4, r4, r2
    c932:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c936:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c93a:	3306      	adds	r3, #6
    c93c:	f144 0400 	adc.w	r4, r4, #0
    c940:	091a      	lsrs	r2, r3, #4
    c942:	61ba      	str	r2, [r7, #24]
    c944:	69ba      	ldr	r2, [r7, #24]
    c946:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c94a:	61ba      	str	r2, [r7, #24]
    c94c:	0923      	lsrs	r3, r4, #4
    c94e:	61fb      	str	r3, [r7, #28]
    c950:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c954:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c958:	18c9      	adds	r1, r1, r3
    c95a:	eb42 0204 	adc.w	r2, r2, r4
    c95e:	460b      	mov	r3, r1
    c960:	4614      	mov	r4, r2
    c962:	e029      	b.n	c9b8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c966:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c96a:	085a      	lsrs	r2, r3, #1
    c96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c96e:	089b      	lsrs	r3, r3, #2
    c970:	4413      	add	r3, r2
    c972:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c976:	091b      	lsrs	r3, r3, #4
    c978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c97a:	4413      	add	r3, r2
    c97c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c980:	0a1b      	lsrs	r3, r3, #8
    c982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c984:	4413      	add	r3, r2
    c986:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c98a:	0c1b      	lsrs	r3, r3, #16
    c98c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c98e:	4413      	add	r3, r2
    c990:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c994:	08db      	lsrs	r3, r3, #3
    c996:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c99a:	4613      	mov	r3, r2
    c99c:	009b      	lsls	r3, r3, #2
    c99e:	4413      	add	r3, r2
    c9a0:	005b      	lsls	r3, r3, #1
    c9a2:	461a      	mov	r2, r3
    c9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9a6:	1a9b      	subs	r3, r3, r2
    c9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9ac:	3306      	adds	r3, #6
    c9ae:	091a      	lsrs	r2, r3, #4
    c9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c9b2:	4413      	add	r3, r2
    c9b4:	f04f 0400 	mov.w	r4, #0
    }
}
    c9b8:	4618      	mov	r0, r3
    c9ba:	4621      	mov	r1, r4
    c9bc:	3758      	adds	r7, #88	; 0x58
    c9be:	46bd      	mov	sp, r7
    c9c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c9c4:	4770      	bx	lr

0000c9c6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c9c6:	b590      	push	{r4, r7, lr}
    c9c8:	b085      	sub	sp, #20
    c9ca:	af00      	add	r7, sp, #0
    c9cc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c9d0:	683a      	ldr	r2, [r7, #0]
    c9d2:	687b      	ldr	r3, [r7, #4]
    c9d4:	4313      	orrs	r3, r2
    c9d6:	2b00      	cmp	r3, #0
    c9d8:	bf0c      	ite	eq
    c9da:	2301      	moveq	r3, #1
    c9dc:	2300      	movne	r3, #0
    c9de:	b2db      	uxtb	r3, r3
    c9e0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c9e2:	e008      	b.n	c9f6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c9e4:	e9d7 0100 	ldrd	r0, r1, [r7]
    c9e8:	f7ff ff0e 	bl	c808 <divu64_10>
    c9ec:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c9f0:	68fb      	ldr	r3, [r7, #12]
    c9f2:	3301      	adds	r3, #1
    c9f4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c9f6:	e9d7 3400 	ldrd	r3, r4, [r7]
    c9fa:	4323      	orrs	r3, r4
    c9fc:	d1f2      	bne.n	c9e4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c9fe:	68fb      	ldr	r3, [r7, #12]
}
    ca00:	4618      	mov	r0, r3
    ca02:	3714      	adds	r7, #20
    ca04:	46bd      	mov	sp, r7
    ca06:	bd90      	pop	{r4, r7, pc}

0000ca08 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    ca08:	b590      	push	{r4, r7, lr}
    ca0a:	b083      	sub	sp, #12
    ca0c:	af00      	add	r7, sp, #0
    ca0e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    ca12:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca16:	2b00      	cmp	r3, #0
    ca18:	f174 0300 	sbcs.w	r3, r4, #0
    ca1c:	da06      	bge.n	ca2c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    ca1e:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca22:	425b      	negs	r3, r3
    ca24:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    ca28:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    ca2c:	e9d7 3400 	ldrd	r3, r4, [r7]
    ca30:	4618      	mov	r0, r3
    ca32:	4621      	mov	r1, r4
    ca34:	f7ff ffc7 	bl	c9c6 <ndigits_in_u64>
    ca38:	4603      	mov	r3, r0
}
    ca3a:	4618      	mov	r0, r3
    ca3c:	370c      	adds	r7, #12
    ca3e:	46bd      	mov	sp, r7
    ca40:	bd90      	pop	{r4, r7, pc}

0000ca42 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    ca42:	b490      	push	{r4, r7}
    ca44:	b084      	sub	sp, #16
    ca46:	af00      	add	r7, sp, #0
    ca48:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    ca4c:	6839      	ldr	r1, [r7, #0]
    ca4e:	687a      	ldr	r2, [r7, #4]
    ca50:	430a      	orrs	r2, r1
    ca52:	2a00      	cmp	r2, #0
    ca54:	bf0c      	ite	eq
    ca56:	2201      	moveq	r2, #1
    ca58:	2200      	movne	r2, #0
    ca5a:	b2d2      	uxtb	r2, r2
    ca5c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    ca5e:	e00a      	b.n	ca76 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    ca60:	e9d7 1200 	ldrd	r1, r2, [r7]
    ca64:	090b      	lsrs	r3, r1, #4
    ca66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    ca6a:	0914      	lsrs	r4, r2, #4
    ca6c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    ca70:	68fa      	ldr	r2, [r7, #12]
    ca72:	3201      	adds	r2, #1
    ca74:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    ca76:	e9d7 1200 	ldrd	r1, r2, [r7]
    ca7a:	430a      	orrs	r2, r1
    ca7c:	d1f0      	bne.n	ca60 <ndigits_in_hex+0x1e>
    }

    return iDigits;
    ca7e:	68fb      	ldr	r3, [r7, #12]
}
    ca80:	4618      	mov	r0, r3
    ca82:	3710      	adds	r7, #16
    ca84:	46bd      	mov	sp, r7
    ca86:	bc90      	pop	{r4, r7}
    ca88:	4770      	bx	lr

0000ca8a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    ca8a:	b480      	push	{r7}
    ca8c:	b087      	sub	sp, #28
    ca8e:	af00      	add	r7, sp, #0
    ca90:	6078      	str	r0, [r7, #4]
    ca92:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    ca94:	2300      	movs	r3, #0
    ca96:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    ca98:	2300      	movs	r3, #0
    ca9a:	613b      	str	r3, [r7, #16]
    ca9c:	2300      	movs	r3, #0
    ca9e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    caa0:	687b      	ldr	r3, [r7, #4]
    caa2:	781b      	ldrb	r3, [r3, #0]
    caa4:	2b2d      	cmp	r3, #45	; 0x2d
    caa6:	d11b      	bne.n	cae0 <decstr_to_int+0x56>
    {
        bNeg = true;
    caa8:	2301      	movs	r3, #1
    caaa:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	3301      	adds	r3, #1
    cab0:	607b      	str	r3, [r7, #4]
        uCnt++;
    cab2:	68fb      	ldr	r3, [r7, #12]
    cab4:	3301      	adds	r3, #1
    cab6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cab8:	e012      	b.n	cae0 <decstr_to_int+0x56>
    {
        ++uCnt;
    caba:	68fb      	ldr	r3, [r7, #12]
    cabc:	3301      	adds	r3, #1
    cabe:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    cac0:	693a      	ldr	r2, [r7, #16]
    cac2:	4613      	mov	r3, r2
    cac4:	009b      	lsls	r3, r3, #2
    cac6:	4413      	add	r3, r2
    cac8:	005b      	lsls	r3, r3, #1
    caca:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	461a      	mov	r2, r3
    cad2:	693b      	ldr	r3, [r7, #16]
    cad4:	4413      	add	r3, r2
    cad6:	3b30      	subs	r3, #48	; 0x30
    cad8:	613b      	str	r3, [r7, #16]
        pcStr++;
    cada:	687b      	ldr	r3, [r7, #4]
    cadc:	3301      	adds	r3, #1
    cade:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cae0:	687b      	ldr	r3, [r7, #4]
    cae2:	781b      	ldrb	r3, [r3, #0]
    cae4:	2b2f      	cmp	r3, #47	; 0x2f
    cae6:	d903      	bls.n	caf0 <decstr_to_int+0x66>
    cae8:	687b      	ldr	r3, [r7, #4]
    caea:	781b      	ldrb	r3, [r3, #0]
    caec:	2b39      	cmp	r3, #57	; 0x39
    caee:	d9e4      	bls.n	caba <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    caf0:	683b      	ldr	r3, [r7, #0]
    caf2:	2b00      	cmp	r3, #0
    caf4:	d002      	beq.n	cafc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    caf6:	683b      	ldr	r3, [r7, #0]
    caf8:	68fa      	ldr	r2, [r7, #12]
    cafa:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    cafc:	7dfb      	ldrb	r3, [r7, #23]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d002      	beq.n	cb08 <decstr_to_int+0x7e>
    cb02:	693b      	ldr	r3, [r7, #16]
    cb04:	425b      	negs	r3, r3
    cb06:	e000      	b.n	cb0a <decstr_to_int+0x80>
    cb08:	693b      	ldr	r3, [r7, #16]
}
    cb0a:	4618      	mov	r0, r3
    cb0c:	371c      	adds	r7, #28
    cb0e:	46bd      	mov	sp, r7
    cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb14:	4770      	bx	lr

0000cb16 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    cb16:	b590      	push	{r4, r7, lr}
    cb18:	b091      	sub	sp, #68	; 0x44
    cb1a:	af00      	add	r7, sp, #0
    cb1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cb20:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    cb22:	2300      	movs	r3, #0
    cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
    cb26:	2300      	movs	r3, #0
    cb28:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    cb2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    cb2e:	f7ff fe6b 	bl	c808 <divu64_10>
    cb32:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    cb36:	68b9      	ldr	r1, [r7, #8]
    cb38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cb3a:	4613      	mov	r3, r2
    cb3c:	009b      	lsls	r3, r3, #2
    cb3e:	4413      	add	r3, r2
    cb40:	005b      	lsls	r3, r3, #1
    cb42:	1acb      	subs	r3, r1, r3
    cb44:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    cb46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb48:	1c5a      	adds	r2, r3, #1
    cb4a:	63fa      	str	r2, [r7, #60]	; 0x3c
    cb4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb4e:	b2d2      	uxtb	r2, r2
    cb50:	3230      	adds	r2, #48	; 0x30
    cb52:	b2d2      	uxtb	r2, r2
    cb54:	f107 0140 	add.w	r1, r7, #64	; 0x40
    cb58:	440b      	add	r3, r1
    cb5a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    cb5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    cb62:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    cb66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    cb6a:	4323      	orrs	r3, r4
    cb6c:	d1dd      	bne.n	cb2a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb70:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    cb72:	687b      	ldr	r3, [r7, #4]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d011      	beq.n	cb9c <uint64_to_str+0x86>
    {
        while ( ix-- )
    cb78:	e008      	b.n	cb8c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    cb7a:	687b      	ldr	r3, [r7, #4]
    cb7c:	1c5a      	adds	r2, r3, #1
    cb7e:	607a      	str	r2, [r7, #4]
    cb80:	f107 0110 	add.w	r1, r7, #16
    cb84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cb86:	440a      	add	r2, r1
    cb88:	7812      	ldrb	r2, [r2, #0]
    cb8a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    cb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cb8e:	1e5a      	subs	r2, r3, #1
    cb90:	63fa      	str	r2, [r7, #60]	; 0x3c
    cb92:	2b00      	cmp	r3, #0
    cb94:	d1f1      	bne.n	cb7a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    cb96:	687b      	ldr	r3, [r7, #4]
    cb98:	2200      	movs	r2, #0
    cb9a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    cb9e:	4618      	mov	r0, r3
    cba0:	3744      	adds	r7, #68	; 0x44
    cba2:	46bd      	mov	sp, r7
    cba4:	bd90      	pop	{r4, r7, pc}

0000cba6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    cba6:	b4b0      	push	{r4, r5, r7}
    cba8:	b08d      	sub	sp, #52	; 0x34
    cbaa:	af00      	add	r7, sp, #0
    cbac:	e9c7 0102 	strd	r0, r1, [r7, #8]
    cbb0:	607a      	str	r2, [r7, #4]
    cbb2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    cbb4:	2300      	movs	r3, #0
    cbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    cbb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cbbc:	4313      	orrs	r3, r2
    cbbe:	d131      	bne.n	cc24 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbc2:	1c5a      	adds	r2, r3, #1
    cbc4:	62fa      	str	r2, [r7, #44]	; 0x2c
    cbc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    cbca:	4413      	add	r3, r2
    cbcc:	2230      	movs	r2, #48	; 0x30
    cbce:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    cbd2:	e027      	b.n	cc24 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    cbd4:	7a3b      	ldrb	r3, [r7, #8]
    cbd6:	f003 030f 	and.w	r3, r3, #15
    cbda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    cbde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cbe2:	2b09      	cmp	r3, #9
    cbe4:	d90a      	bls.n	cbfc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    cbe6:	78fb      	ldrb	r3, [r7, #3]
    cbe8:	2b00      	cmp	r3, #0
    cbea:	d001      	beq.n	cbf0 <uint64_to_hexstr+0x4a>
    cbec:	2227      	movs	r2, #39	; 0x27
    cbee:	e000      	b.n	cbf2 <uint64_to_hexstr+0x4c>
    cbf0:	2207      	movs	r2, #7
    cbf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    cbf6:	4413      	add	r3, r2
    cbf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cbfe:	1c5a      	adds	r2, r3, #1
    cc00:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc02:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    cc06:	3230      	adds	r2, #48	; 0x30
    cc08:	b2d2      	uxtb	r2, r2
    cc0a:	f107 0130 	add.w	r1, r7, #48	; 0x30
    cc0e:	440b      	add	r3, r1
    cc10:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    cc14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cc18:	0914      	lsrs	r4, r2, #4
    cc1a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    cc1e:	091d      	lsrs	r5, r3, #4
    cc20:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    cc24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    cc28:	4313      	orrs	r3, r2
    cc2a:	d1d3      	bne.n	cbd4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc2e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    cc30:	687b      	ldr	r3, [r7, #4]
    cc32:	2b00      	cmp	r3, #0
    cc34:	d011      	beq.n	cc5a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    cc36:	e008      	b.n	cc4a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    cc38:	687b      	ldr	r3, [r7, #4]
    cc3a:	1c5a      	adds	r2, r3, #1
    cc3c:	607a      	str	r2, [r7, #4]
    cc3e:	f107 0110 	add.w	r1, r7, #16
    cc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cc44:	440a      	add	r2, r1
    cc46:	7812      	ldrb	r2, [r2, #0]
    cc48:	701a      	strb	r2, [r3, #0]
        while (ix--)
    cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cc4c:	1e5a      	subs	r2, r3, #1
    cc4e:	62fa      	str	r2, [r7, #44]	; 0x2c
    cc50:	2b00      	cmp	r3, #0
    cc52:	d1f1      	bne.n	cc38 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    cc54:	687b      	ldr	r3, [r7, #4]
    cc56:	2200      	movs	r2, #0
    cc58:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    cc5c:	4618      	mov	r0, r3
    cc5e:	3734      	adds	r7, #52	; 0x34
    cc60:	46bd      	mov	sp, r7
    cc62:	bcb0      	pop	{r4, r5, r7}
    cc64:	4770      	bx	lr

0000cc66 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    cc66:	b480      	push	{r7}
    cc68:	b085      	sub	sp, #20
    cc6a:	af00      	add	r7, sp, #0
    cc6c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    cc6e:	2300      	movs	r3, #0
    cc70:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    cc72:	687b      	ldr	r3, [r7, #4]
    cc74:	2b00      	cmp	r3, #0
    cc76:	d104      	bne.n	cc82 <simple_strlen+0x1c>
    {
        return ui32RetVal;
    cc78:	68fb      	ldr	r3, [r7, #12]
    cc7a:	e009      	b.n	cc90 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    cc7c:	68fb      	ldr	r3, [r7, #12]
    cc7e:	3301      	adds	r3, #1
    cc80:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    cc82:	687b      	ldr	r3, [r7, #4]
    cc84:	1c5a      	adds	r2, r3, #1
    cc86:	607a      	str	r2, [r7, #4]
    cc88:	781b      	ldrb	r3, [r3, #0]
    cc8a:	2b00      	cmp	r3, #0
    cc8c:	d1f6      	bne.n	cc7c <simple_strlen+0x16>
    }
    return ui32RetVal;
    cc8e:	68fb      	ldr	r3, [r7, #12]
}
    cc90:	4618      	mov	r0, r3
    cc92:	3714      	adds	r7, #20
    cc94:	46bd      	mov	sp, r7
    cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
    cc9a:	4770      	bx	lr

0000cc9c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cc9c:	b480      	push	{r7}
    cc9e:	b087      	sub	sp, #28
    cca0:	af00      	add	r7, sp, #0
    cca2:	60f8      	str	r0, [r7, #12]
    cca4:	460b      	mov	r3, r1
    cca6:	607a      	str	r2, [r7, #4]
    cca8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    ccaa:	2300      	movs	r3, #0
    ccac:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    ccae:	687b      	ldr	r3, [r7, #4]
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	dc0c      	bgt.n	ccce <padbuffer+0x32>
    {
        return i32Cnt;
    ccb4:	697b      	ldr	r3, [r7, #20]
    ccb6:	e010      	b.n	ccda <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    ccb8:	68fb      	ldr	r3, [r7, #12]
    ccba:	2b00      	cmp	r3, #0
    ccbc:	d004      	beq.n	ccc8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    ccbe:	68fb      	ldr	r3, [r7, #12]
    ccc0:	1c5a      	adds	r2, r3, #1
    ccc2:	60fa      	str	r2, [r7, #12]
    ccc4:	7afa      	ldrb	r2, [r7, #11]
    ccc6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    ccc8:	697b      	ldr	r3, [r7, #20]
    ccca:	3301      	adds	r3, #1
    cccc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    ccce:	687b      	ldr	r3, [r7, #4]
    ccd0:	1e5a      	subs	r2, r3, #1
    ccd2:	607a      	str	r2, [r7, #4]
    ccd4:	2b00      	cmp	r3, #0
    ccd6:	d1ef      	bne.n	ccb8 <padbuffer+0x1c>
    }

    return i32Cnt;
    ccd8:	697b      	ldr	r3, [r7, #20]
}
    ccda:	4618      	mov	r0, r3
    ccdc:	371c      	adds	r7, #28
    ccde:	46bd      	mov	sp, r7
    cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cce4:	4770      	bx	lr
	...

0000cce8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cce8:	b590      	push	{r4, r7, lr}
    ccea:	b08f      	sub	sp, #60	; 0x3c
    ccec:	af00      	add	r7, sp, #0
    ccee:	ed87 0a03 	vstr	s0, [r7, #12]
    ccf2:	60b8      	str	r0, [r7, #8]
    ccf4:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    ccf6:	68bb      	ldr	r3, [r7, #8]
    ccf8:	681b      	ldr	r3, [r3, #0]
    ccfa:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ccfe:	2b03      	cmp	r3, #3
    cd00:	dc02      	bgt.n	cd08 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cd02:	f06f 0302 	mvn.w	r3, #2
    cd06:	e0e7      	b.n	ced8 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    cd08:	edd7 7a03 	vldr	s15, [r7, #12]
    cd0c:	eef5 7a40 	vcmp.f32	s15, #0.0
    cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cd14:	d104      	bne.n	cd20 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cd16:	68bb      	ldr	r3, [r7, #8]
    cd18:	4a71      	ldr	r2, [pc, #452]	; (cee0 <ftoa+0x1f8>)
    cd1a:	601a      	str	r2, [r3, #0]
        return 3;
    cd1c:	2303      	movs	r3, #3
    cd1e:	e0db      	b.n	ced8 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    cd20:	68bb      	ldr	r3, [r7, #8]
    cd22:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cd24:	68fb      	ldr	r3, [r7, #12]
    cd26:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cd28:	693b      	ldr	r3, [r7, #16]
    cd2a:	15db      	asrs	r3, r3, #23
    cd2c:	b2db      	uxtb	r3, r3
    cd2e:	3b7f      	subs	r3, #127	; 0x7f
    cd30:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cd32:	693b      	ldr	r3, [r7, #16]
    cd34:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cd38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cd3c:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cd3e:	2300      	movs	r3, #0
    cd40:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cd42:	2300      	movs	r3, #0
    cd44:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cd46:	69fb      	ldr	r3, [r7, #28]
    cd48:	2b1e      	cmp	r3, #30
    cd4a:	dd02      	ble.n	cd52 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cd4c:	f06f 0301 	mvn.w	r3, #1
    cd50:	e0c2      	b.n	ced8 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    cd52:	69fb      	ldr	r3, [r7, #28]
    cd54:	f113 0f17 	cmn.w	r3, #23
    cd58:	da02      	bge.n	cd60 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cd5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd5e:	e0bb      	b.n	ced8 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    cd60:	69fb      	ldr	r3, [r7, #28]
    cd62:	2b16      	cmp	r3, #22
    cd64:	dd06      	ble.n	cd74 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cd66:	69fb      	ldr	r3, [r7, #28]
    cd68:	3b17      	subs	r3, #23
    cd6a:	69ba      	ldr	r2, [r7, #24]
    cd6c:	fa02 f303 	lsl.w	r3, r2, r3
    cd70:	637b      	str	r3, [r7, #52]	; 0x34
    cd72:	e01a      	b.n	cdaa <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    cd74:	69fb      	ldr	r3, [r7, #28]
    cd76:	2b00      	cmp	r3, #0
    cd78:	db0f      	blt.n	cd9a <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cd7a:	69fb      	ldr	r3, [r7, #28]
    cd7c:	f1c3 0317 	rsb	r3, r3, #23
    cd80:	69ba      	ldr	r2, [r7, #24]
    cd82:	fa42 f303 	asr.w	r3, r2, r3
    cd86:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cd88:	69fb      	ldr	r3, [r7, #28]
    cd8a:	3301      	adds	r3, #1
    cd8c:	69ba      	ldr	r2, [r7, #24]
    cd8e:	fa02 f303 	lsl.w	r3, r2, r3
    cd92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cd96:	633b      	str	r3, [r7, #48]	; 0x30
    cd98:	e007      	b.n	cdaa <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cd9a:	69bb      	ldr	r3, [r7, #24]
    cd9c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cda0:	69fb      	ldr	r3, [r7, #28]
    cda2:	43db      	mvns	r3, r3
    cda4:	fa42 f303 	asr.w	r3, r2, r3
    cda8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cdaa:	693b      	ldr	r3, [r7, #16]
    cdac:	2b00      	cmp	r3, #0
    cdae:	da04      	bge.n	cdba <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    cdb0:	68bb      	ldr	r3, [r7, #8]
    cdb2:	1c5a      	adds	r2, r3, #1
    cdb4:	60ba      	str	r2, [r7, #8]
    cdb6:	222d      	movs	r2, #45	; 0x2d
    cdb8:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d105      	bne.n	cdcc <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    cdc0:	68bb      	ldr	r3, [r7, #8]
    cdc2:	1c5a      	adds	r2, r3, #1
    cdc4:	60ba      	str	r2, [r7, #8]
    cdc6:	2230      	movs	r2, #48	; 0x30
    cdc8:	701a      	strb	r2, [r3, #0]
    cdca:	e021      	b.n	ce10 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    cdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdce:	2b00      	cmp	r3, #0
    cdd0:	dd08      	ble.n	cde4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdd4:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cdd8:	68ba      	ldr	r2, [r7, #8]
    cdda:	4618      	mov	r0, r3
    cddc:	4621      	mov	r1, r4
    cdde:	f7ff fe9a 	bl	cb16 <uint64_to_str>
    cde2:	e011      	b.n	ce08 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    cde4:	68bb      	ldr	r3, [r7, #8]
    cde6:	1c5a      	adds	r2, r3, #1
    cde8:	60ba      	str	r2, [r7, #8]
    cdea:	222d      	movs	r2, #45	; 0x2d
    cdec:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cdf0:	425b      	negs	r3, r3
    cdf2:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cdf6:	68ba      	ldr	r2, [r7, #8]
    cdf8:	4618      	mov	r0, r3
    cdfa:	4621      	mov	r1, r4
    cdfc:	f7ff fe8b 	bl	cb16 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    ce00:	e002      	b.n	ce08 <ftoa+0x120>
        {
            pcBuf++;
    ce02:	68bb      	ldr	r3, [r7, #8]
    ce04:	3301      	adds	r3, #1
    ce06:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    ce08:	68bb      	ldr	r3, [r7, #8]
    ce0a:	781b      	ldrb	r3, [r3, #0]
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d1f8      	bne.n	ce02 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    ce10:	68bb      	ldr	r3, [r7, #8]
    ce12:	1c5a      	adds	r2, r3, #1
    ce14:	60ba      	str	r2, [r7, #8]
    ce16:	222e      	movs	r2, #46	; 0x2e
    ce18:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d105      	bne.n	ce2c <ftoa+0x144>
    {
        *pcBuf++ = '0';
    ce20:	68bb      	ldr	r3, [r7, #8]
    ce22:	1c5a      	adds	r2, r3, #1
    ce24:	60ba      	str	r2, [r7, #8]
    ce26:	2230      	movs	r2, #48	; 0x30
    ce28:	701a      	strb	r2, [r3, #0]
    ce2a:	e04f      	b.n	cecc <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce2c:	68ba      	ldr	r2, [r7, #8]
    ce2e:	6a3b      	ldr	r3, [r7, #32]
    ce30:	1ad3      	subs	r3, r2, r3
    ce32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce34:	1ad3      	subs	r3, r2, r3
    ce36:	3b01      	subs	r3, #1
    ce38:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ce3a:	697a      	ldr	r2, [r7, #20]
    ce3c:	687b      	ldr	r3, [r7, #4]
    ce3e:	4293      	cmp	r3, r2
    ce40:	bfa8      	it	ge
    ce42:	4613      	movge	r3, r2
    ce44:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    ce46:	2300      	movs	r3, #0
    ce48:	62bb      	str	r3, [r7, #40]	; 0x28
    ce4a:	e015      	b.n	ce78 <ftoa+0x190>
        {
            i32FracPart *= 10;
    ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ce4e:	4613      	mov	r3, r2
    ce50:	009b      	lsls	r3, r3, #2
    ce52:	4413      	add	r3, r2
    ce54:	005b      	lsls	r3, r3, #1
    ce56:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ce58:	68bb      	ldr	r3, [r7, #8]
    ce5a:	1c5a      	adds	r2, r3, #1
    ce5c:	60ba      	str	r2, [r7, #8]
    ce5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ce60:	1612      	asrs	r2, r2, #24
    ce62:	b2d2      	uxtb	r2, r2
    ce64:	3230      	adds	r2, #48	; 0x30
    ce66:	b2d2      	uxtb	r2, r2
    ce68:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ce6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ce70:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ce74:	3301      	adds	r3, #1
    ce76:	62bb      	str	r3, [r7, #40]	; 0x28
    ce78:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ce7a:	697b      	ldr	r3, [r7, #20]
    ce7c:	429a      	cmp	r2, r3
    ce7e:	dbe5      	blt.n	ce4c <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ce80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ce82:	4613      	mov	r3, r2
    ce84:	009b      	lsls	r3, r3, #2
    ce86:	4413      	add	r3, r2
    ce88:	005b      	lsls	r3, r3, #1
    ce8a:	161b      	asrs	r3, r3, #24
    ce8c:	2b04      	cmp	r3, #4
    ce8e:	dd1d      	ble.n	cecc <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ce90:	68bb      	ldr	r3, [r7, #8]
    ce92:	3b01      	subs	r3, #1
    ce94:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ce96:	e015      	b.n	cec4 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce9a:	781b      	ldrb	r3, [r3, #0]
    ce9c:	2b2e      	cmp	r3, #46	; 0x2e
    ce9e:	d00e      	beq.n	cebe <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cea2:	781b      	ldrb	r3, [r3, #0]
    cea4:	2b39      	cmp	r3, #57	; 0x39
    cea6:	d103      	bne.n	ceb0 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    cea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceaa:	2230      	movs	r2, #48	; 0x30
    ceac:	701a      	strb	r2, [r3, #0]
    ceae:	e006      	b.n	cebe <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceb2:	781b      	ldrb	r3, [r3, #0]
    ceb4:	3301      	adds	r3, #1
    ceb6:	b2da      	uxtb	r2, r3
    ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ceba:	701a      	strb	r2, [r3, #0]
                    break;
    cebc:	e006      	b.n	cecc <ftoa+0x1e4>
                }
                pcBuftmp--;
    cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cec0:	3b01      	subs	r3, #1
    cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cec6:	6a3b      	ldr	r3, [r7, #32]
    cec8:	429a      	cmp	r2, r3
    ceca:	d2e5      	bcs.n	ce98 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cecc:	68bb      	ldr	r3, [r7, #8]
    cece:	2200      	movs	r2, #0
    ced0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ced2:	68ba      	ldr	r2, [r7, #8]
    ced4:	6a3b      	ldr	r3, [r7, #32]
    ced6:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ced8:	4618      	mov	r0, r3
    ceda:	373c      	adds	r7, #60	; 0x3c
    cedc:	46bd      	mov	sp, r7
    cede:	bd90      	pop	{r4, r7, pc}
    cee0:	00302e30 	.word	0x00302e30

0000cee4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cee4:	b590      	push	{r4, r7, lr}
    cee6:	b095      	sub	sp, #84	; 0x54
    cee8:	af00      	add	r7, sp, #0
    ceea:	60f8      	str	r0, [r7, #12]
    ceec:	60b9      	str	r1, [r7, #8]
    ceee:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cef0:	2300      	movs	r3, #0
    cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cef4:	2300      	movs	r3, #0
    cef6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cef8:	e2e9      	b.n	d4ce <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cefa:	2306      	movs	r3, #6
    cefc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cefe:	68bb      	ldr	r3, [r7, #8]
    cf00:	781b      	ldrb	r3, [r3, #0]
    cf02:	2b25      	cmp	r3, #37	; 0x25
    cf04:	d01f      	beq.n	cf46 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d015      	beq.n	cf38 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cf0c:	68bb      	ldr	r3, [r7, #8]
    cf0e:	781b      	ldrb	r3, [r3, #0]
    cf10:	2b0a      	cmp	r3, #10
    cf12:	d10b      	bne.n	cf2c <am_util_stdio_vsprintf+0x48>
    cf14:	4bb2      	ldr	r3, [pc, #712]	; (d1e0 <am_util_stdio_vsprintf+0x2fc>)
    cf16:	781b      	ldrb	r3, [r3, #0]
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d007      	beq.n	cf2c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cf1c:	68fb      	ldr	r3, [r7, #12]
    cf1e:	1c5a      	adds	r2, r3, #1
    cf20:	60fa      	str	r2, [r7, #12]
    cf22:	220d      	movs	r2, #13
    cf24:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cf26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf28:	3301      	adds	r3, #1
    cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cf2c:	68fb      	ldr	r3, [r7, #12]
    cf2e:	1c5a      	adds	r2, r3, #1
    cf30:	60fa      	str	r2, [r7, #12]
    cf32:	68ba      	ldr	r2, [r7, #8]
    cf34:	7812      	ldrb	r2, [r2, #0]
    cf36:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cf38:	68bb      	ldr	r3, [r7, #8]
    cf3a:	3301      	adds	r3, #1
    cf3c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf40:	3301      	adds	r3, #1
    cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cf44:	e2c3      	b.n	d4ce <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cf46:	68bb      	ldr	r3, [r7, #8]
    cf48:	3301      	adds	r3, #1
    cf4a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cf4c:	2300      	movs	r3, #0
    cf4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cf52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cf56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cf5a:	2320      	movs	r3, #32
    cf5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cf60:	68bb      	ldr	r3, [r7, #8]
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	2b30      	cmp	r3, #48	; 0x30
    cf66:	d105      	bne.n	cf74 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cf68:	2330      	movs	r3, #48	; 0x30
    cf6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cf6e:	68bb      	ldr	r3, [r7, #8]
    cf70:	3301      	adds	r3, #1
    cf72:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cf74:	f107 0310 	add.w	r3, r7, #16
    cf78:	4619      	mov	r1, r3
    cf7a:	68b8      	ldr	r0, [r7, #8]
    cf7c:	f7ff fd85 	bl	ca8a <decstr_to_int>
    cf80:	4603      	mov	r3, r0
    cf82:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cf84:	693b      	ldr	r3, [r7, #16]
    cf86:	68ba      	ldr	r2, [r7, #8]
    cf88:	4413      	add	r3, r2
    cf8a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cf8c:	68bb      	ldr	r3, [r7, #8]
    cf8e:	781b      	ldrb	r3, [r3, #0]
    cf90:	2b73      	cmp	r3, #115	; 0x73
    cf92:	d005      	beq.n	cfa0 <am_util_stdio_vsprintf+0xbc>
    cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf96:	2b00      	cmp	r3, #0
    cf98:	da02      	bge.n	cfa0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf9c:	425b      	negs	r3, r3
    cf9e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cfa0:	68bb      	ldr	r3, [r7, #8]
    cfa2:	781b      	ldrb	r3, [r3, #0]
    cfa4:	2b2e      	cmp	r3, #46	; 0x2e
    cfa6:	d10e      	bne.n	cfc6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cfa8:	68bb      	ldr	r3, [r7, #8]
    cfaa:	3301      	adds	r3, #1
    cfac:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cfae:	f107 0310 	add.w	r3, r7, #16
    cfb2:	4619      	mov	r1, r3
    cfb4:	68b8      	ldr	r0, [r7, #8]
    cfb6:	f7ff fd68 	bl	ca8a <decstr_to_int>
    cfba:	4603      	mov	r3, r0
    cfbc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cfbe:	693b      	ldr	r3, [r7, #16]
    cfc0:	68ba      	ldr	r2, [r7, #8]
    cfc2:	4413      	add	r3, r2
    cfc4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cfc6:	68bb      	ldr	r3, [r7, #8]
    cfc8:	781b      	ldrb	r3, [r3, #0]
    cfca:	2b6c      	cmp	r3, #108	; 0x6c
    cfcc:	d10c      	bne.n	cfe8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cfce:	68bb      	ldr	r3, [r7, #8]
    cfd0:	3301      	adds	r3, #1
    cfd2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cfd4:	68bb      	ldr	r3, [r7, #8]
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	2b6c      	cmp	r3, #108	; 0x6c
    cfda:	d105      	bne.n	cfe8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cfdc:	68bb      	ldr	r3, [r7, #8]
    cfde:	3301      	adds	r3, #1
    cfe0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cfe2:	2301      	movs	r3, #1
    cfe4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    cfe8:	68bb      	ldr	r3, [r7, #8]
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	3b46      	subs	r3, #70	; 0x46
    cfee:	2b32      	cmp	r3, #50	; 0x32
    cff0:	f200 825a 	bhi.w	d4a8 <am_util_stdio_vsprintf+0x5c4>
    cff4:	a201      	add	r2, pc, #4	; (adr r2, cffc <am_util_stdio_vsprintf+0x118>)
    cff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cffa:	bf00      	nop
    cffc:	0000d42f 	.word	0x0000d42f
    d000:	0000d4a9 	.word	0x0000d4a9
    d004:	0000d4a9 	.word	0x0000d4a9
    d008:	0000d4a9 	.word	0x0000d4a9
    d00c:	0000d4a9 	.word	0x0000d4a9
    d010:	0000d4a9 	.word	0x0000d4a9
    d014:	0000d4a9 	.word	0x0000d4a9
    d018:	0000d4a9 	.word	0x0000d4a9
    d01c:	0000d4a9 	.word	0x0000d4a9
    d020:	0000d4a9 	.word	0x0000d4a9
    d024:	0000d4a9 	.word	0x0000d4a9
    d028:	0000d4a9 	.word	0x0000d4a9
    d02c:	0000d4a9 	.word	0x0000d4a9
    d030:	0000d4a9 	.word	0x0000d4a9
    d034:	0000d4a9 	.word	0x0000d4a9
    d038:	0000d4a9 	.word	0x0000d4a9
    d03c:	0000d4a9 	.word	0x0000d4a9
    d040:	0000d4a9 	.word	0x0000d4a9
    d044:	0000d1c3 	.word	0x0000d1c3
    d048:	0000d4a9 	.word	0x0000d4a9
    d04c:	0000d4a9 	.word	0x0000d4a9
    d050:	0000d4a9 	.word	0x0000d4a9
    d054:	0000d4a9 	.word	0x0000d4a9
    d058:	0000d4a9 	.word	0x0000d4a9
    d05c:	0000d4a9 	.word	0x0000d4a9
    d060:	0000d4a9 	.word	0x0000d4a9
    d064:	0000d4a9 	.word	0x0000d4a9
    d068:	0000d4a9 	.word	0x0000d4a9
    d06c:	0000d4a9 	.word	0x0000d4a9
    d070:	0000d0c9 	.word	0x0000d0c9
    d074:	0000d2f5 	.word	0x0000d2f5
    d078:	0000d4a9 	.word	0x0000d4a9
    d07c:	0000d42f 	.word	0x0000d42f
    d080:	0000d4a9 	.word	0x0000d4a9
    d084:	0000d4a9 	.word	0x0000d4a9
    d088:	0000d2f5 	.word	0x0000d2f5
    d08c:	0000d4a9 	.word	0x0000d4a9
    d090:	0000d4a9 	.word	0x0000d4a9
    d094:	0000d4a9 	.word	0x0000d4a9
    d098:	0000d4a9 	.word	0x0000d4a9
    d09c:	0000d4a9 	.word	0x0000d4a9
    d0a0:	0000d4a9 	.word	0x0000d4a9
    d0a4:	0000d4a9 	.word	0x0000d4a9
    d0a8:	0000d4a9 	.word	0x0000d4a9
    d0ac:	0000d4a9 	.word	0x0000d4a9
    d0b0:	0000d0ef 	.word	0x0000d0ef
    d0b4:	0000d4a9 	.word	0x0000d4a9
    d0b8:	0000d261 	.word	0x0000d261
    d0bc:	0000d4a9 	.word	0x0000d4a9
    d0c0:	0000d4a9 	.word	0x0000d4a9
    d0c4:	0000d1bd 	.word	0x0000d1bd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    d0c8:	687b      	ldr	r3, [r7, #4]
    d0ca:	1d1a      	adds	r2, r3, #4
    d0cc:	607a      	str	r2, [r7, #4]
    d0ce:	681b      	ldr	r3, [r3, #0]
    d0d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    d0d4:	68fb      	ldr	r3, [r7, #12]
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d005      	beq.n	d0e6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    d0da:	68fb      	ldr	r3, [r7, #12]
    d0dc:	1c5a      	adds	r2, r3, #1
    d0de:	60fa      	str	r2, [r7, #12]
    d0e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    d0e4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d0e8:	3301      	adds	r3, #1
    d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d0ec:	e1ec      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    d0ee:	687b      	ldr	r3, [r7, #4]
    d0f0:	1d1a      	adds	r2, r3, #4
    d0f2:	607a      	str	r2, [r7, #4]
    d0f4:	681b      	ldr	r3, [r3, #0]
    d0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    d0f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    d0fa:	f7ff fdb4 	bl	cc66 <simple_strlen>
    d0fe:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d102:	2b00      	cmp	r3, #0
    d104:	dd2e      	ble.n	d164 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    d106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d10a:	429a      	cmp	r2, r3
    d10c:	d22a      	bcs.n	d164 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d10e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d112:	1ad3      	subs	r3, r2, r3
    d114:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d11c:	4619      	mov	r1, r3
    d11e:	68f8      	ldr	r0, [r7, #12]
    d120:	f7ff fdbc 	bl	cc9c <padbuffer>
    d124:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d126:	68fb      	ldr	r3, [r7, #12]
    d128:	2b00      	cmp	r3, #0
    d12a:	d001      	beq.n	d130 <am_util_stdio_vsprintf+0x24c>
    d12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d12e:	e000      	b.n	d132 <am_util_stdio_vsprintf+0x24e>
    d130:	2300      	movs	r3, #0
    d132:	68fa      	ldr	r2, [r7, #12]
    d134:	4413      	add	r3, r2
    d136:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d13a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d13c:	4413      	add	r3, r2
    d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d140:	2300      	movs	r3, #0
    d142:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    d144:	e00e      	b.n	d164 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    d146:	68fb      	ldr	r3, [r7, #12]
    d148:	2b00      	cmp	r3, #0
    d14a:	d005      	beq.n	d158 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    d14c:	68fb      	ldr	r3, [r7, #12]
    d14e:	1c5a      	adds	r2, r3, #1
    d150:	60fa      	str	r2, [r7, #12]
    d152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    d154:	7812      	ldrb	r2, [r2, #0]
    d156:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    d158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d15a:	3301      	adds	r3, #1
    d15c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    d15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d160:	3301      	adds	r3, #1
    d162:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    d164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d166:	781b      	ldrb	r3, [r3, #0]
    d168:	2b00      	cmp	r3, #0
    d16a:	d1ec      	bne.n	d146 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d16e:	2b00      	cmp	r3, #0
    d170:	f000 81a7 	beq.w	d4c2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d176:	425b      	negs	r3, r3
    d178:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d17e:	429a      	cmp	r2, r3
    d180:	f080 819f 	bcs.w	d4c2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    d184:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d188:	1ad3      	subs	r3, r2, r3
    d18a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d18c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d190:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d192:	4619      	mov	r1, r3
    d194:	68f8      	ldr	r0, [r7, #12]
    d196:	f7ff fd81 	bl	cc9c <padbuffer>
    d19a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    d19c:	68fb      	ldr	r3, [r7, #12]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d001      	beq.n	d1a6 <am_util_stdio_vsprintf+0x2c2>
    d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1a4:	e000      	b.n	d1a8 <am_util_stdio_vsprintf+0x2c4>
    d1a6:	2300      	movs	r3, #0
    d1a8:	68fa      	ldr	r2, [r7, #12]
    d1aa:	4413      	add	r3, r2
    d1ac:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1b2:	4413      	add	r3, r2
    d1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    d1b6:	2300      	movs	r3, #0
    d1b8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    d1ba:	e182      	b.n	d4c2 <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
    d1bc:	2301      	movs	r3, #1
    d1be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d00c      	beq.n	d1e4 <am_util_stdio_vsprintf+0x300>
    d1ca:	687b      	ldr	r3, [r7, #4]
    d1cc:	3307      	adds	r3, #7
    d1ce:	f023 0307 	bic.w	r3, r3, #7
    d1d2:	f103 0208 	add.w	r2, r3, #8
    d1d6:	607a      	str	r2, [r7, #4]
    d1d8:	e9d3 3400 	ldrd	r3, r4, [r3]
    d1dc:	e008      	b.n	d1f0 <am_util_stdio_vsprintf+0x30c>
    d1de:	bf00      	nop
    d1e0:	10001114 	.word	0x10001114
                                      va_arg(pArgs, uint32_t);
    d1e4:	687b      	ldr	r3, [r7, #4]
    d1e6:	1d1a      	adds	r2, r3, #4
    d1e8:	607a      	str	r2, [r7, #4]
    d1ea:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d1ec:	f04f 0400 	mov.w	r4, #0
    d1f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d01e      	beq.n	d238 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d1fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d1fe:	f7ff fc20 	bl	ca42 <ndigits_in_hex>
    d202:	4602      	mov	r2, r0
    d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d206:	1a9b      	subs	r3, r3, r2
    d208:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d20a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d20e:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d210:	4619      	mov	r1, r3
    d212:	68f8      	ldr	r0, [r7, #12]
    d214:	f7ff fd42 	bl	cc9c <padbuffer>
    d218:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d21a:	68fb      	ldr	r3, [r7, #12]
    d21c:	2b00      	cmp	r3, #0
    d21e:	d001      	beq.n	d224 <am_util_stdio_vsprintf+0x340>
    d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d222:	e000      	b.n	d226 <am_util_stdio_vsprintf+0x342>
    d224:	2300      	movs	r3, #0
    d226:	68fa      	ldr	r2, [r7, #12]
    d228:	4413      	add	r3, r2
    d22a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d22e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d230:	4413      	add	r3, r2
    d232:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d234:	2300      	movs	r3, #0
    d236:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d238:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d23c:	68fa      	ldr	r2, [r7, #12]
    d23e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d242:	f7ff fcb0 	bl	cba6 <uint64_to_hexstr>
    d246:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d248:	68fb      	ldr	r3, [r7, #12]
    d24a:	2b00      	cmp	r3, #0
    d24c:	d003      	beq.n	d256 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
    d24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d250:	68fa      	ldr	r2, [r7, #12]
    d252:	4413      	add	r3, r2
    d254:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d25a:	4413      	add	r3, r2
    d25c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d25e:	e133      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d264:	2b00      	cmp	r3, #0
    d266:	d009      	beq.n	d27c <am_util_stdio_vsprintf+0x398>
    d268:	687b      	ldr	r3, [r7, #4]
    d26a:	3307      	adds	r3, #7
    d26c:	f023 0307 	bic.w	r3, r3, #7
    d270:	f103 0208 	add.w	r2, r3, #8
    d274:	607a      	str	r2, [r7, #4]
    d276:	e9d3 3400 	ldrd	r3, r4, [r3]
    d27a:	e005      	b.n	d288 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	1d1a      	adds	r2, r3, #4
    d280:	607a      	str	r2, [r7, #4]
    d282:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d284:	f04f 0400 	mov.w	r4, #0
    d288:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d28e:	2b00      	cmp	r3, #0
    d290:	d01e      	beq.n	d2d0 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d292:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d296:	f7ff fb96 	bl	c9c6 <ndigits_in_u64>
    d29a:	4602      	mov	r2, r0
    d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d29e:	1a9b      	subs	r3, r3, r2
    d2a0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d2a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d2a8:	4619      	mov	r1, r3
    d2aa:	68f8      	ldr	r0, [r7, #12]
    d2ac:	f7ff fcf6 	bl	cc9c <padbuffer>
    d2b0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d2b2:	68fb      	ldr	r3, [r7, #12]
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d001      	beq.n	d2bc <am_util_stdio_vsprintf+0x3d8>
    d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2ba:	e000      	b.n	d2be <am_util_stdio_vsprintf+0x3da>
    d2bc:	2300      	movs	r3, #0
    d2be:	68fa      	ldr	r2, [r7, #12]
    d2c0:	4413      	add	r3, r2
    d2c2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d2c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2c8:	4413      	add	r3, r2
    d2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d2cc:	2300      	movs	r3, #0
    d2ce:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d2d0:	68fa      	ldr	r2, [r7, #12]
    d2d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d2d6:	f7ff fc1e 	bl	cb16 <uint64_to_str>
    d2da:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d2dc:	68fb      	ldr	r3, [r7, #12]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d003      	beq.n	d2ea <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2e4:	68fa      	ldr	r2, [r7, #12]
    d2e6:	4413      	add	r3, r2
    d2e8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2ee:	4413      	add	r3, r2
    d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2f2:	e0e9      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d2f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d2f8:	2b00      	cmp	r3, #0
    d2fa:	d009      	beq.n	d310 <am_util_stdio_vsprintf+0x42c>
    d2fc:	687b      	ldr	r3, [r7, #4]
    d2fe:	3307      	adds	r3, #7
    d300:	f023 0307 	bic.w	r3, r3, #7
    d304:	f103 0208 	add.w	r2, r3, #8
    d308:	607a      	str	r2, [r7, #4]
    d30a:	e9d3 3400 	ldrd	r3, r4, [r3]
    d30e:	e005      	b.n	d31c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d310:	687b      	ldr	r3, [r7, #4]
    d312:	1d1a      	adds	r2, r3, #4
    d314:	607a      	str	r2, [r7, #4]
    d316:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d318:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d31c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d320:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d324:	2b00      	cmp	r3, #0
    d326:	f174 0300 	sbcs.w	r3, r4, #0
    d32a:	da0a      	bge.n	d342 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d32c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d330:	425b      	negs	r3, r3
    d332:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d336:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d33a:	2301      	movs	r3, #1
    d33c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d340:	e006      	b.n	d350 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d342:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d346:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d34a:	2300      	movs	r3, #0
    d34c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d352:	2b00      	cmp	r3, #0
    d354:	d04a      	beq.n	d3ec <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d356:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d35a:	4618      	mov	r0, r3
    d35c:	4621      	mov	r1, r4
    d35e:	f7ff fb53 	bl	ca08 <ndigits_in_i64>
    d362:	4602      	mov	r2, r0
    d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d366:	1a9b      	subs	r3, r3, r2
    d368:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d36a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d36e:	2b00      	cmp	r3, #0
    d370:	d011      	beq.n	d396 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d374:	3b01      	subs	r3, #1
    d376:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d37c:	2b30      	cmp	r3, #48	; 0x30
    d37e:	d10a      	bne.n	d396 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d380:	68fb      	ldr	r3, [r7, #12]
    d382:	2b00      	cmp	r3, #0
    d384:	d004      	beq.n	d390 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d386:	68fb      	ldr	r3, [r7, #12]
    d388:	1c5a      	adds	r2, r3, #1
    d38a:	60fa      	str	r2, [r7, #12]
    d38c:	222d      	movs	r2, #45	; 0x2d
    d38e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d392:	3301      	adds	r3, #1
    d394:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d39a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d39c:	4619      	mov	r1, r3
    d39e:	68f8      	ldr	r0, [r7, #12]
    d3a0:	f7ff fc7c 	bl	cc9c <padbuffer>
    d3a4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d3a6:	68fb      	ldr	r3, [r7, #12]
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d001      	beq.n	d3b0 <am_util_stdio_vsprintf+0x4cc>
    d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3ae:	e000      	b.n	d3b2 <am_util_stdio_vsprintf+0x4ce>
    d3b0:	2300      	movs	r3, #0
    d3b2:	68fa      	ldr	r2, [r7, #12]
    d3b4:	4413      	add	r3, r2
    d3b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3bc:	4413      	add	r3, r2
    d3be:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d3c0:	2300      	movs	r3, #0
    d3c2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d3c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d01e      	beq.n	d40a <am_util_stdio_vsprintf+0x526>
    d3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d3d0:	2b20      	cmp	r3, #32
    d3d2:	d11a      	bne.n	d40a <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d3d4:	68fb      	ldr	r3, [r7, #12]
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	d004      	beq.n	d3e4 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d3da:	68fb      	ldr	r3, [r7, #12]
    d3dc:	1c5a      	adds	r2, r3, #1
    d3de:	60fa      	str	r2, [r7, #12]
    d3e0:	222d      	movs	r2, #45	; 0x2d
    d3e2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d3e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3e6:	3301      	adds	r3, #1
    d3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    d3ea:	e00e      	b.n	d40a <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d3ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d00a      	beq.n	d40a <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d3f4:	68fb      	ldr	r3, [r7, #12]
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d004      	beq.n	d404 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d3fa:	68fb      	ldr	r3, [r7, #12]
    d3fc:	1c5a      	adds	r2, r3, #1
    d3fe:	60fa      	str	r2, [r7, #12]
    d400:	222d      	movs	r2, #45	; 0x2d
    d402:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d406:	3301      	adds	r3, #1
    d408:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d40a:	68fa      	ldr	r2, [r7, #12]
    d40c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d410:	f7ff fb81 	bl	cb16 <uint64_to_str>
    d414:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d416:	68fb      	ldr	r3, [r7, #12]
    d418:	2b00      	cmp	r3, #0
    d41a:	d003      	beq.n	d424 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d41e:	68fa      	ldr	r2, [r7, #12]
    d420:	4413      	add	r3, r2
    d422:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d428:	4413      	add	r3, r2
    d42a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d42c:	e04c      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d42e:	68fb      	ldr	r3, [r7, #12]
    d430:	2b00      	cmp	r3, #0
    d432:	d048      	beq.n	d4c6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d434:	687b      	ldr	r3, [r7, #4]
    d436:	3307      	adds	r3, #7
    d438:	f023 0307 	bic.w	r3, r3, #7
    d43c:	f103 0208 	add.w	r2, r3, #8
    d440:	607a      	str	r2, [r7, #4]
    d442:	e9d3 3400 	ldrd	r3, r4, [r3]
    d446:	4618      	mov	r0, r3
    d448:	4621      	mov	r1, r4
    d44a:	f7fe fe59 	bl	c100 <__aeabi_d2f>
    d44e:	4603      	mov	r3, r0
    d450:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d452:	68fb      	ldr	r3, [r7, #12]
    d454:	2214      	movs	r2, #20
    d456:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d458:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d45a:	68f8      	ldr	r0, [r7, #12]
    d45c:	ed97 0a05 	vldr	s0, [r7, #20]
    d460:	f7ff fc42 	bl	cce8 <ftoa>
    d464:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d468:	2b00      	cmp	r3, #0
    d46a:	da14      	bge.n	d496 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d46e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d472:	d102      	bne.n	d47a <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d474:	4b1e      	ldr	r3, [pc, #120]	; (d4f0 <am_util_stdio_vsprintf+0x60c>)
    d476:	62bb      	str	r3, [r7, #40]	; 0x28
    d478:	e008      	b.n	d48c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d47c:	f113 0f02 	cmn.w	r3, #2
    d480:	d102      	bne.n	d488 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d482:	4b1c      	ldr	r3, [pc, #112]	; (d4f4 <am_util_stdio_vsprintf+0x610>)
    d484:	62bb      	str	r3, [r7, #40]	; 0x28
    d486:	e001      	b.n	d48c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d488:	4b1b      	ldr	r3, [pc, #108]	; (d4f8 <am_util_stdio_vsprintf+0x614>)
    d48a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d48c:	68fb      	ldr	r3, [r7, #12]
    d48e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d490:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d492:	2303      	movs	r3, #3
    d494:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d49a:	4413      	add	r3, r2
    d49c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d4a0:	68fa      	ldr	r2, [r7, #12]
    d4a2:	4413      	add	r3, r2
    d4a4:	60fb      	str	r3, [r7, #12]
                }
                break;
    d4a6:	e00e      	b.n	d4c6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d4a8:	68fb      	ldr	r3, [r7, #12]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d005      	beq.n	d4ba <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d4ae:	68fb      	ldr	r3, [r7, #12]
    d4b0:	1c5a      	adds	r2, r3, #1
    d4b2:	60fa      	str	r2, [r7, #12]
    d4b4:	68ba      	ldr	r2, [r7, #8]
    d4b6:	7812      	ldrb	r2, [r2, #0]
    d4b8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4bc:	3301      	adds	r3, #1
    d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d4c0:	e002      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d4c2:	bf00      	nop
    d4c4:	e000      	b.n	d4c8 <am_util_stdio_vsprintf+0x5e4>
                break;
    d4c6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d4c8:	68bb      	ldr	r3, [r7, #8]
    d4ca:	3301      	adds	r3, #1
    d4cc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d4ce:	68bb      	ldr	r3, [r7, #8]
    d4d0:	781b      	ldrb	r3, [r3, #0]
    d4d2:	2b00      	cmp	r3, #0
    d4d4:	f47f ad11 	bne.w	cefa <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d4d8:	68fb      	ldr	r3, [r7, #12]
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d002      	beq.n	d4e4 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d4de:	68fb      	ldr	r3, [r7, #12]
    d4e0:	2200      	movs	r2, #0
    d4e2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d4e6:	4618      	mov	r0, r3
    d4e8:	3754      	adds	r7, #84	; 0x54
    d4ea:	46bd      	mov	sp, r7
    d4ec:	bd90      	pop	{r4, r7, pc}
    d4ee:	bf00      	nop
    d4f0:	00302e30 	.word	0x00302e30
    d4f4:	00232e23 	.word	0x00232e23
    d4f8:	003f2e3f 	.word	0x003f2e3f

0000d4fc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d4fc:	b40f      	push	{r0, r1, r2, r3}
    d4fe:	b580      	push	{r7, lr}
    d500:	b082      	sub	sp, #8
    d502:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d504:	4b0d      	ldr	r3, [pc, #52]	; (d53c <am_util_stdio_printf+0x40>)
    d506:	681b      	ldr	r3, [r3, #0]
    d508:	2b00      	cmp	r3, #0
    d50a:	d101      	bne.n	d510 <am_util_stdio_printf+0x14>
    {
        return 0;
    d50c:	2300      	movs	r3, #0
    d50e:	e00d      	b.n	d52c <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d510:	f107 0314 	add.w	r3, r7, #20
    d514:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d516:	683a      	ldr	r2, [r7, #0]
    d518:	6939      	ldr	r1, [r7, #16]
    d51a:	4809      	ldr	r0, [pc, #36]	; (d540 <am_util_stdio_printf+0x44>)
    d51c:	f7ff fce2 	bl	cee4 <am_util_stdio_vsprintf>
    d520:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d522:	4b06      	ldr	r3, [pc, #24]	; (d53c <am_util_stdio_printf+0x40>)
    d524:	681b      	ldr	r3, [r3, #0]
    d526:	4806      	ldr	r0, [pc, #24]	; (d540 <am_util_stdio_printf+0x44>)
    d528:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d52a:	687b      	ldr	r3, [r7, #4]
}
    d52c:	4618      	mov	r0, r3
    d52e:	3708      	adds	r7, #8
    d530:	46bd      	mov	sp, r7
    d532:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d536:	b004      	add	sp, #16
    d538:	4770      	bx	lr
    d53a:	bf00      	nop
    d53c:	10007140 	.word	0x10007140
    d540:	10001014 	.word	0x10001014

0000d544 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d544:	b580      	push	{r7, lr}
    d546:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d548:	4802      	ldr	r0, [pc, #8]	; (d554 <am_util_stdio_terminal_clear+0x10>)
    d54a:	f7ff ffd7 	bl	d4fc <am_util_stdio_printf>
}
    d54e:	bf00      	nop
    d550:	bd80      	pop	{r7, pc}
    d552:	bf00      	nop
    d554:	0000ef6c 	.word	0x0000ef6c

0000d558 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d558:	4811      	ldr	r0, [pc, #68]	; (d5a0 <zero_loop+0x12>)
    d55a:	4912      	ldr	r1, [pc, #72]	; (d5a4 <zero_loop+0x16>)
    d55c:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d55e:	f8d1 d000 	ldr.w	sp, [r1]
#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d562:	4811      	ldr	r0, [pc, #68]	; (d5a8 <zero_loop+0x1a>)
    d564:	6801      	ldr	r1, [r0, #0]
    d566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d56a:	6001      	str	r1, [r0, #0]
    d56c:	f3bf 8f4f 	dsb	sy
    d570:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d574:	480d      	ldr	r0, [pc, #52]	; (d5ac <zero_loop+0x1e>)
    d576:	490e      	ldr	r1, [pc, #56]	; (d5b0 <zero_loop+0x22>)
    d578:	4a0e      	ldr	r2, [pc, #56]	; (d5b4 <zero_loop+0x26>)

0000d57a <copy_loop>:
    d57a:	f850 3b04 	ldr.w	r3, [r0], #4
    d57e:	f841 3b04 	str.w	r3, [r1], #4
    d582:	4291      	cmp	r1, r2
    d584:	dbf9      	blt.n	d57a <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d586:	480c      	ldr	r0, [pc, #48]	; (d5b8 <zero_loop+0x2a>)
    d588:	490c      	ldr	r1, [pc, #48]	; (d5bc <zero_loop+0x2e>)
    d58a:	f04f 0200 	mov.w	r2, #0

0000d58e <zero_loop>:
    d58e:	4288      	cmp	r0, r1
    d590:	bfb8      	it	lt
    d592:	f840 2b04 	strlt.w	r2, [r0], #4
    d596:	dbfa      	blt.n	d58e <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d598:	f7fe ff3c 	bl	c414 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d59c:	be00      	bkpt	0x0000
}
    d59e:	bf00      	nop
    d5a0:	e000ed08 	.word	0xe000ed08
    d5a4:	0000c000 	.word	0x0000c000
    d5a8:	e000ed88 	.word	0xe000ed88
    d5ac:	0000f3c0 	.word	0x0000f3c0
    d5b0:	10001000 	.word	0x10001000
    d5b4:	10001010 	.word	0x10001010
    d5b8:	10001010 	.word	0x10001010
    d5bc:	10007250 	.word	0x10007250

0000d5c0 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d5c0:	b480      	push	{r7}
    d5c2:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d5c4:	e7fe      	b.n	d5c4 <NMI_Handler+0x4>

0000d5c6 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d5c6:	b480      	push	{r7}
    d5c8:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d5ca:	e7fe      	b.n	d5ca <DebugMon_Handler+0x4>

0000d5cc <am_bsp_uart_string_print>:
    d5cc:	b510      	push	{r4, lr}
    d5ce:	b086      	sub	sp, #24
    d5d0:	7804      	ldrb	r4, [r0, #0]
    d5d2:	2300      	movs	r3, #0
    d5d4:	9300      	str	r3, [sp, #0]
    d5d6:	b13c      	cbz	r4, d5e8 <am_bsp_uart_string_print+0x1c>
    d5d8:	4603      	mov	r3, r0
    d5da:	f1c0 0201 	rsb	r2, r0, #1
    d5de:	18d4      	adds	r4, r2, r3
    d5e0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d5e4:	2900      	cmp	r1, #0
    d5e6:	d1fa      	bne.n	d5de <am_bsp_uart_string_print+0x12>
    d5e8:	4b09      	ldr	r3, [pc, #36]	; (d610 <am_bsp_uart_string_print+0x44>)
    d5ea:	9002      	str	r0, [sp, #8]
    d5ec:	2200      	movs	r2, #0
    d5ee:	6818      	ldr	r0, [r3, #0]
    d5f0:	9403      	str	r4, [sp, #12]
    d5f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5f6:	a901      	add	r1, sp, #4
    d5f8:	9304      	str	r3, [sp, #16]
    d5fa:	9201      	str	r2, [sp, #4]
    d5fc:	f8cd d014 	str.w	sp, [sp, #20]
    d600:	f001 f84e 	bl	e6a0 <am_hal_uart_transfer>
    d604:	9b00      	ldr	r3, [sp, #0]
    d606:	42a3      	cmp	r3, r4
    d608:	d000      	beq.n	d60c <am_bsp_uart_string_print+0x40>
    d60a:	e7fe      	b.n	d60a <am_bsp_uart_string_print+0x3e>
    d60c:	b006      	add	sp, #24
    d60e:	bd10      	pop	{r4, pc}
    d610:	10001118 	.word	0x10001118

0000d614 <am_bsp_uart_printf_enable>:
    d614:	b510      	push	{r4, lr}
    d616:	4c10      	ldr	r4, [pc, #64]	; (d658 <am_bsp_uart_printf_enable+0x44>)
    d618:	4b10      	ldr	r3, [pc, #64]	; (d65c <am_bsp_uart_printf_enable+0x48>)
    d61a:	4621      	mov	r1, r4
    d61c:	2202      	movs	r2, #2
    d61e:	2000      	movs	r0, #0
    d620:	601a      	str	r2, [r3, #0]
    d622:	f000 fe7f 	bl	e324 <am_hal_uart_initialize>
    d626:	2200      	movs	r2, #0
    d628:	4611      	mov	r1, r2
    d62a:	6820      	ldr	r0, [r4, #0]
    d62c:	f000 fea2 	bl	e374 <am_hal_uart_power_control>
    d630:	6820      	ldr	r0, [r4, #0]
    d632:	490b      	ldr	r1, [pc, #44]	; (d660 <am_bsp_uart_printf_enable+0x4c>)
    d634:	f000 ff10 	bl	e458 <am_hal_uart_configure>
    d638:	4b0a      	ldr	r3, [pc, #40]	; (d664 <am_bsp_uart_printf_enable+0x50>)
    d63a:	2030      	movs	r0, #48	; 0x30
    d63c:	6819      	ldr	r1, [r3, #0]
    d63e:	f000 fbbd 	bl	ddbc <am_hal_gpio_pinconfig>
    d642:	4b09      	ldr	r3, [pc, #36]	; (d668 <am_bsp_uart_printf_enable+0x54>)
    d644:	2031      	movs	r0, #49	; 0x31
    d646:	6819      	ldr	r1, [r3, #0]
    d648:	f000 fbb8 	bl	ddbc <am_hal_gpio_pinconfig>
    d64c:	4807      	ldr	r0, [pc, #28]	; (d66c <am_bsp_uart_printf_enable+0x58>)
    d64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d652:	f7ff b8c9 	b.w	c7e8 <am_util_stdio_printf_init>
    d656:	bf00      	nop
    d658:	10001118 	.word	0x10001118
    d65c:	1000111c 	.word	0x1000111c
    d660:	0000ef88 	.word	0x0000ef88
    d664:	0000efb4 	.word	0x0000efb4
    d668:	0000efb0 	.word	0x0000efb0
    d66c:	0000d5cd 	.word	0x0000d5cd

0000d670 <am_hal_adc_initialize>:
    d670:	b108      	cbz	r0, d676 <am_hal_adc_initialize+0x6>
    d672:	2005      	movs	r0, #5
    d674:	4770      	bx	lr
    d676:	b139      	cbz	r1, d688 <am_hal_adc_initialize+0x18>
    d678:	4a1b      	ldr	r2, [pc, #108]	; (d6e8 <am_hal_adc_initialize+0x78>)
    d67a:	b538      	push	{r3, r4, r5, lr}
    d67c:	78d3      	ldrb	r3, [r2, #3]
    d67e:	f013 0401 	ands.w	r4, r3, #1
    d682:	d003      	beq.n	d68c <am_hal_adc_initialize+0x1c>
    d684:	2007      	movs	r0, #7
    d686:	bd38      	pop	{r3, r4, r5, pc}
    d688:	2006      	movs	r0, #6
    d68a:	4770      	bx	lr
    d68c:	f043 0301 	orr.w	r3, r3, #1
    d690:	70d3      	strb	r3, [r2, #3]
    d692:	6813      	ldr	r3, [r2, #0]
    d694:	4d15      	ldr	r5, [pc, #84]	; (d6ec <am_hal_adc_initialize+0x7c>)
    d696:	4816      	ldr	r0, [pc, #88]	; (d6f0 <am_hal_adc_initialize+0x80>)
    d698:	6054      	str	r4, [r2, #4]
    d69a:	f365 0317 	bfi	r3, r5, #0, #24
    d69e:	6013      	str	r3, [r2, #0]
    d6a0:	6004      	str	r4, [r0, #0]
    d6a2:	600a      	str	r2, [r1, #0]
    d6a4:	4813      	ldr	r0, [pc, #76]	; (d6f4 <am_hal_adc_initialize+0x84>)
    d6a6:	4d14      	ldr	r5, [pc, #80]	; (d6f8 <am_hal_adc_initialize+0x88>)
    d6a8:	f000 fb84 	bl	ddb4 <am_hal_flash_load_ui32>
    d6ac:	6028      	str	r0, [r5, #0]
    d6ae:	4813      	ldr	r0, [pc, #76]	; (d6fc <am_hal_adc_initialize+0x8c>)
    d6b0:	f000 fb80 	bl	ddb4 <am_hal_flash_load_ui32>
    d6b4:	6068      	str	r0, [r5, #4]
    d6b6:	4812      	ldr	r0, [pc, #72]	; (d700 <am_hal_adc_initialize+0x90>)
    d6b8:	f000 fb7c 	bl	ddb4 <am_hal_flash_load_ui32>
    d6bc:	682b      	ldr	r3, [r5, #0]
    d6be:	60a8      	str	r0, [r5, #8]
    d6c0:	3301      	adds	r3, #1
    d6c2:	d008      	beq.n	d6d6 <am_hal_adc_initialize+0x66>
    d6c4:	686b      	ldr	r3, [r5, #4]
    d6c6:	3301      	adds	r3, #1
    d6c8:	d005      	beq.n	d6d6 <am_hal_adc_initialize+0x66>
    d6ca:	3001      	adds	r0, #1
    d6cc:	d003      	beq.n	d6d6 <am_hal_adc_initialize+0x66>
    d6ce:	2301      	movs	r3, #1
    d6d0:	732b      	strb	r3, [r5, #12]
    d6d2:	4620      	mov	r0, r4
    d6d4:	bd38      	pop	{r3, r4, r5, pc}
    d6d6:	490b      	ldr	r1, [pc, #44]	; (d704 <am_hal_adc_initialize+0x94>)
    d6d8:	4a0b      	ldr	r2, [pc, #44]	; (d708 <am_hal_adc_initialize+0x98>)
    d6da:	4b0c      	ldr	r3, [pc, #48]	; (d70c <am_hal_adc_initialize+0x9c>)
    d6dc:	6029      	str	r1, [r5, #0]
    d6de:	2000      	movs	r0, #0
    d6e0:	606a      	str	r2, [r5, #4]
    d6e2:	60ab      	str	r3, [r5, #8]
    d6e4:	7328      	strb	r0, [r5, #12]
    d6e6:	bd38      	pop	{r3, r4, r5, pc}
    d6e8:	10007148 	.word	0x10007148
    d6ec:	00afafaf 	.word	0x00afafaf
    d6f0:	10007144 	.word	0x10007144
    d6f4:	50023840 	.word	0x50023840
    d6f8:	10001120 	.word	0x10001120
    d6fc:	50023844 	.word	0x50023844
    d700:	50023848 	.word	0x50023848
    d704:	4395c000 	.word	0x4395c000
    d708:	3f839874 	.word	0x3f839874
    d70c:	bb8c47a1 	.word	0xbb8c47a1

0000d710 <am_hal_adc_configure>:
    d710:	b128      	cbz	r0, d71e <am_hal_adc_configure+0xe>
    d712:	6803      	ldr	r3, [r0, #0]
    d714:	4a18      	ldr	r2, [pc, #96]	; (d778 <am_hal_adc_configure+0x68>)
    d716:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d71a:	4293      	cmp	r3, r2
    d71c:	d001      	beq.n	d722 <am_hal_adc_configure+0x12>
    d71e:	2002      	movs	r0, #2
    d720:	4770      	bx	lr
    d722:	b5f0      	push	{r4, r5, r6, r7, lr}
    d724:	7808      	ldrb	r0, [r1, #0]
    d726:	784d      	ldrb	r5, [r1, #1]
    d728:	788c      	ldrb	r4, [r1, #2]
    d72a:	f891 e003 	ldrb.w	lr, [r1, #3]
    d72e:	790f      	ldrb	r7, [r1, #4]
    d730:	794a      	ldrb	r2, [r1, #5]
    d732:	798b      	ldrb	r3, [r1, #6]
    d734:	4e11      	ldr	r6, [pc, #68]	; (d77c <am_hal_adc_configure+0x6c>)
    d736:	0600      	lsls	r0, r0, #24
    d738:	04ed      	lsls	r5, r5, #19
    d73a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d73e:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d742:	4328      	orrs	r0, r5
    d744:	0424      	lsls	r4, r4, #16
    d746:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d74a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d74e:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d752:	4304      	orrs	r4, r0
    d754:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d758:	0139      	lsls	r1, r7, #4
    d75a:	4320      	orrs	r0, r4
    d75c:	f001 0110 	and.w	r1, r1, #16
    d760:	00d2      	lsls	r2, r2, #3
    d762:	4301      	orrs	r1, r0
    d764:	f002 0208 	and.w	r2, r2, #8
    d768:	009b      	lsls	r3, r3, #2
    d76a:	430a      	orrs	r2, r1
    d76c:	f003 0304 	and.w	r3, r3, #4
    d770:	4313      	orrs	r3, r2
    d772:	6033      	str	r3, [r6, #0]
    d774:	2000      	movs	r0, #0
    d776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d778:	01afafaf 	.word	0x01afafaf
    d77c:	50010000 	.word	0x50010000

0000d780 <am_hal_adc_configure_slot>:
    d780:	b128      	cbz	r0, d78e <am_hal_adc_configure_slot+0xe>
    d782:	6803      	ldr	r3, [r0, #0]
    d784:	4816      	ldr	r0, [pc, #88]	; (d7e0 <am_hal_adc_configure_slot+0x60>)
    d786:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d78a:	4283      	cmp	r3, r0
    d78c:	d001      	beq.n	d792 <am_hal_adc_configure_slot+0x12>
    d78e:	2002      	movs	r0, #2
    d790:	4770      	bx	lr
    d792:	2907      	cmp	r1, #7
    d794:	d901      	bls.n	d79a <am_hal_adc_configure_slot+0x1a>
    d796:	2005      	movs	r0, #5
    d798:	4770      	bx	lr
    d79a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d79c:	7813      	ldrb	r3, [r2, #0]
    d79e:	7854      	ldrb	r4, [r2, #1]
    d7a0:	7890      	ldrb	r0, [r2, #2]
    d7a2:	78d7      	ldrb	r7, [r2, #3]
    d7a4:	f892 e004 	ldrb.w	lr, [r2, #4]
    d7a8:	4d0e      	ldr	r5, [pc, #56]	; (d7e4 <am_hal_adc_configure_slot+0x64>)
    d7aa:	4e0f      	ldr	r6, [pc, #60]	; (d7e8 <am_hal_adc_configure_slot+0x68>)
    d7ac:	061b      	lsls	r3, r3, #24
    d7ae:	0424      	lsls	r4, r4, #16
    d7b0:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    d7b4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    d7b8:	4323      	orrs	r3, r4
    d7ba:	0202      	lsls	r2, r0, #8
    d7bc:	ea43 0e0e 	orr.w	lr, r3, lr
    d7c0:	440d      	add	r5, r1
    d7c2:	007b      	lsls	r3, r7, #1
    d7c4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    d7c8:	ea4e 0202 	orr.w	r2, lr, r2
    d7cc:	00ad      	lsls	r5, r5, #2
    d7ce:	f003 0302 	and.w	r3, r3, #2
    d7d2:	4313      	orrs	r3, r2
    d7d4:	602b      	str	r3, [r5, #0]
    d7d6:	6833      	ldr	r3, [r6, #0]
    d7d8:	3301      	adds	r3, #1
    d7da:	6033      	str	r3, [r6, #0]
    d7dc:	2000      	movs	r0, #0
    d7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7e0:	01afafaf 	.word	0x01afafaf
    d7e4:	14004003 	.word	0x14004003
    d7e8:	10007144 	.word	0x10007144

0000d7ec <am_hal_adc_configure_dma>:
    d7ec:	b128      	cbz	r0, d7fa <am_hal_adc_configure_dma+0xe>
    d7ee:	6803      	ldr	r3, [r0, #0]
    d7f0:	4a17      	ldr	r2, [pc, #92]	; (d850 <am_hal_adc_configure_dma+0x64>)
    d7f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d7f6:	4293      	cmp	r3, r2
    d7f8:	d001      	beq.n	d7fe <am_hal_adc_configure_dma+0x12>
    d7fa:	2002      	movs	r0, #2
    d7fc:	4770      	bx	lr
    d7fe:	b410      	push	{r4}
    d800:	7808      	ldrb	r0, [r1, #0]
    d802:	784b      	ldrb	r3, [r1, #1]
    d804:	4c13      	ldr	r4, [pc, #76]	; (d854 <am_hal_adc_configure_dma+0x68>)
    d806:	4a14      	ldr	r2, [pc, #80]	; (d858 <am_hal_adc_configure_dma+0x6c>)
    d808:	6824      	ldr	r4, [r4, #0]
    d80a:	0240      	lsls	r0, r0, #9
    d80c:	021b      	lsls	r3, r3, #8
    d80e:	f400 7000 	and.w	r0, r0, #512	; 0x200
    d812:	f403 7380 	and.w	r3, r3, #256	; 0x100
    d816:	4303      	orrs	r3, r0
    d818:	2c01      	cmp	r4, #1
    d81a:	bf8c      	ite	hi
    d81c:	2000      	movhi	r0, #0
    d81e:	f44f 3000 	movls.w	r0, #131072	; 0x20000
    d822:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    d826:	4303      	orrs	r3, r0
    d828:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
    d82c:	8888      	ldrh	r0, [r1, #4]
    d82e:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
    d832:	f360 0391 	bfi	r3, r0, #2, #16
    d836:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
    d83a:	688b      	ldr	r3, [r1, #8]
    d83c:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
    d840:	2301      	movs	r3, #1
    d842:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240
    d846:	2000      	movs	r0, #0
    d848:	f85d 4b04 	ldr.w	r4, [sp], #4
    d84c:	4770      	bx	lr
    d84e:	bf00      	nop
    d850:	01afafaf 	.word	0x01afafaf
    d854:	10007144 	.word	0x10007144
    d858:	50010000 	.word	0x50010000

0000d85c <am_hal_adc_enable>:
    d85c:	4603      	mov	r3, r0
    d85e:	b128      	cbz	r0, d86c <am_hal_adc_enable+0x10>
    d860:	6802      	ldr	r2, [r0, #0]
    d862:	490c      	ldr	r1, [pc, #48]	; (d894 <am_hal_adc_enable+0x38>)
    d864:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d868:	428a      	cmp	r2, r1
    d86a:	d001      	beq.n	d870 <am_hal_adc_enable+0x14>
    d86c:	2002      	movs	r0, #2
    d86e:	4770      	bx	lr
    d870:	78c2      	ldrb	r2, [r0, #3]
    d872:	f002 0202 	and.w	r2, r2, #2
    d876:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d87a:	b94a      	cbnz	r2, d890 <am_hal_adc_enable+0x34>
    d87c:	4906      	ldr	r1, [pc, #24]	; (d898 <am_hal_adc_enable+0x3c>)
    d87e:	680a      	ldr	r2, [r1, #0]
    d880:	f042 0201 	orr.w	r2, r2, #1
    d884:	600a      	str	r2, [r1, #0]
    d886:	78da      	ldrb	r2, [r3, #3]
    d888:	f042 0202 	orr.w	r2, r2, #2
    d88c:	70da      	strb	r2, [r3, #3]
    d88e:	4770      	bx	lr
    d890:	2000      	movs	r0, #0
    d892:	4770      	bx	lr
    d894:	01afafaf 	.word	0x01afafaf
    d898:	50010000 	.word	0x50010000

0000d89c <am_hal_adc_interrupt_enable>:
    d89c:	b128      	cbz	r0, d8aa <am_hal_adc_interrupt_enable+0xe>
    d89e:	6803      	ldr	r3, [r0, #0]
    d8a0:	4a07      	ldr	r2, [pc, #28]	; (d8c0 <am_hal_adc_interrupt_enable+0x24>)
    d8a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8a6:	4293      	cmp	r3, r2
    d8a8:	d001      	beq.n	d8ae <am_hal_adc_interrupt_enable+0x12>
    d8aa:	2002      	movs	r0, #2
    d8ac:	4770      	bx	lr
    d8ae:	4b05      	ldr	r3, [pc, #20]	; (d8c4 <am_hal_adc_interrupt_enable+0x28>)
    d8b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d8b4:	4311      	orrs	r1, r2
    d8b6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    d8ba:	2000      	movs	r0, #0
    d8bc:	4770      	bx	lr
    d8be:	bf00      	nop
    d8c0:	01afafaf 	.word	0x01afafaf
    d8c4:	50010000 	.word	0x50010000

0000d8c8 <am_hal_adc_interrupt_status>:
    d8c8:	b128      	cbz	r0, d8d6 <am_hal_adc_interrupt_status+0xe>
    d8ca:	6803      	ldr	r3, [r0, #0]
    d8cc:	480b      	ldr	r0, [pc, #44]	; (d8fc <am_hal_adc_interrupt_status+0x34>)
    d8ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d8d2:	4283      	cmp	r3, r0
    d8d4:	d001      	beq.n	d8da <am_hal_adc_interrupt_status+0x12>
    d8d6:	2002      	movs	r0, #2
    d8d8:	4770      	bx	lr
    d8da:	b92a      	cbnz	r2, d8e8 <am_hal_adc_interrupt_status+0x20>
    d8dc:	4b08      	ldr	r3, [pc, #32]	; (d900 <am_hal_adc_interrupt_status+0x38>)
    d8de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    d8e2:	600b      	str	r3, [r1, #0]
    d8e4:	4610      	mov	r0, r2
    d8e6:	4770      	bx	lr
    d8e8:	4a05      	ldr	r2, [pc, #20]	; (d900 <am_hal_adc_interrupt_status+0x38>)
    d8ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    d8ee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d8f2:	4003      	ands	r3, r0
    d8f4:	600b      	str	r3, [r1, #0]
    d8f6:	2000      	movs	r0, #0
    d8f8:	4770      	bx	lr
    d8fa:	bf00      	nop
    d8fc:	01afafaf 	.word	0x01afafaf
    d900:	50010000 	.word	0x50010000

0000d904 <am_hal_adc_interrupt_clear>:
    d904:	b128      	cbz	r0, d912 <am_hal_adc_interrupt_clear+0xe>
    d906:	6803      	ldr	r3, [r0, #0]
    d908:	4a05      	ldr	r2, [pc, #20]	; (d920 <am_hal_adc_interrupt_clear+0x1c>)
    d90a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d90e:	4293      	cmp	r3, r2
    d910:	d001      	beq.n	d916 <am_hal_adc_interrupt_clear+0x12>
    d912:	2002      	movs	r0, #2
    d914:	4770      	bx	lr
    d916:	4b03      	ldr	r3, [pc, #12]	; (d924 <am_hal_adc_interrupt_clear+0x20>)
    d918:	2000      	movs	r0, #0
    d91a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    d91e:	4770      	bx	lr
    d920:	01afafaf 	.word	0x01afafaf
    d924:	50010000 	.word	0x50010000

0000d928 <am_hal_adc_sw_trigger>:
    d928:	b128      	cbz	r0, d936 <am_hal_adc_sw_trigger+0xe>
    d92a:	6803      	ldr	r3, [r0, #0]
    d92c:	4a05      	ldr	r2, [pc, #20]	; (d944 <am_hal_adc_sw_trigger+0x1c>)
    d92e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d932:	4293      	cmp	r3, r2
    d934:	d001      	beq.n	d93a <am_hal_adc_sw_trigger+0x12>
    d936:	2002      	movs	r0, #2
    d938:	4770      	bx	lr
    d93a:	4b03      	ldr	r3, [pc, #12]	; (d948 <am_hal_adc_sw_trigger+0x20>)
    d93c:	2237      	movs	r2, #55	; 0x37
    d93e:	609a      	str	r2, [r3, #8]
    d940:	2000      	movs	r0, #0
    d942:	4770      	bx	lr
    d944:	01afafaf 	.word	0x01afafaf
    d948:	50010000 	.word	0x50010000

0000d94c <am_hal_adc_power_control>:
    d94c:	b140      	cbz	r0, d960 <am_hal_adc_power_control+0x14>
    d94e:	6803      	ldr	r3, [r0, #0]
    d950:	b570      	push	{r4, r5, r6, lr}
    d952:	4c2e      	ldr	r4, [pc, #184]	; (da0c <am_hal_adc_power_control+0xc0>)
    d954:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d958:	42a3      	cmp	r3, r4
    d95a:	d003      	beq.n	d964 <am_hal_adc_power_control+0x18>
    d95c:	2002      	movs	r0, #2
    d95e:	bd70      	pop	{r4, r5, r6, pc}
    d960:	2002      	movs	r0, #2
    d962:	4770      	bx	lr
    d964:	4604      	mov	r4, r0
    d966:	4615      	mov	r5, r2
    d968:	460e      	mov	r6, r1
    d96a:	b329      	cbz	r1, d9b8 <am_hal_adc_power_control+0x6c>
    d96c:	2902      	cmp	r1, #2
    d96e:	d821      	bhi.n	d9b4 <am_hal_adc_power_control+0x68>
    d970:	b1da      	cbz	r2, d9aa <am_hal_adc_power_control+0x5e>
    d972:	4b27      	ldr	r3, [pc, #156]	; (da10 <am_hal_adc_power_control+0xc4>)
    d974:	68da      	ldr	r2, [r3, #12]
    d976:	6142      	str	r2, [r0, #20]
    d978:	691a      	ldr	r2, [r3, #16]
    d97a:	6182      	str	r2, [r0, #24]
    d97c:	695a      	ldr	r2, [r3, #20]
    d97e:	61c2      	str	r2, [r0, #28]
    d980:	699a      	ldr	r2, [r3, #24]
    d982:	6202      	str	r2, [r0, #32]
    d984:	69da      	ldr	r2, [r3, #28]
    d986:	6242      	str	r2, [r0, #36]	; 0x24
    d988:	6a1a      	ldr	r2, [r3, #32]
    d98a:	6282      	str	r2, [r0, #40]	; 0x28
    d98c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d98e:	62c2      	str	r2, [r0, #44]	; 0x2c
    d990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d992:	6302      	str	r2, [r0, #48]	; 0x30
    d994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d996:	6342      	str	r2, [r0, #52]	; 0x34
    d998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d99a:	6382      	str	r2, [r0, #56]	; 0x38
    d99c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    d9a0:	63c2      	str	r2, [r0, #60]	; 0x3c
    d9a2:	681b      	ldr	r3, [r3, #0]
    d9a4:	6103      	str	r3, [r0, #16]
    d9a6:	2301      	movs	r3, #1
    d9a8:	7303      	strb	r3, [r0, #12]
    d9aa:	200a      	movs	r0, #10
    d9ac:	f000 fc0e 	bl	e1cc <am_hal_pwrctrl_periph_disable>
    d9b0:	2000      	movs	r0, #0
    d9b2:	bd70      	pop	{r4, r5, r6, pc}
    d9b4:	2006      	movs	r0, #6
    d9b6:	bd70      	pop	{r4, r5, r6, pc}
    d9b8:	b11a      	cbz	r2, d9c2 <am_hal_adc_power_control+0x76>
    d9ba:	7b03      	ldrb	r3, [r0, #12]
    d9bc:	b933      	cbnz	r3, d9cc <am_hal_adc_power_control+0x80>
    d9be:	2007      	movs	r0, #7
    d9c0:	bd70      	pop	{r4, r5, r6, pc}
    d9c2:	200a      	movs	r0, #10
    d9c4:	f000 fbd8 	bl	e178 <am_hal_pwrctrl_periph_enable>
    d9c8:	4628      	mov	r0, r5
    d9ca:	bd70      	pop	{r4, r5, r6, pc}
    d9cc:	200a      	movs	r0, #10
    d9ce:	f000 fbd3 	bl	e178 <am_hal_pwrctrl_periph_enable>
    d9d2:	4b0f      	ldr	r3, [pc, #60]	; (da10 <am_hal_adc_power_control+0xc4>)
    d9d4:	6962      	ldr	r2, [r4, #20]
    d9d6:	60da      	str	r2, [r3, #12]
    d9d8:	69a2      	ldr	r2, [r4, #24]
    d9da:	611a      	str	r2, [r3, #16]
    d9dc:	69e2      	ldr	r2, [r4, #28]
    d9de:	615a      	str	r2, [r3, #20]
    d9e0:	6a22      	ldr	r2, [r4, #32]
    d9e2:	619a      	str	r2, [r3, #24]
    d9e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d9e6:	61da      	str	r2, [r3, #28]
    d9e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d9ea:	621a      	str	r2, [r3, #32]
    d9ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d9ee:	625a      	str	r2, [r3, #36]	; 0x24
    d9f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    d9f2:	629a      	str	r2, [r3, #40]	; 0x28
    d9f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d9f6:	62da      	str	r2, [r3, #44]	; 0x2c
    d9f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    d9fa:	631a      	str	r2, [r3, #48]	; 0x30
    d9fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d9fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    da02:	6922      	ldr	r2, [r4, #16]
    da04:	601a      	str	r2, [r3, #0]
    da06:	4630      	mov	r0, r6
    da08:	7326      	strb	r6, [r4, #12]
    da0a:	bd70      	pop	{r4, r5, r6, pc}
    da0c:	01afafaf 	.word	0x01afafaf
    da10:	50010000 	.word	0x50010000

0000da14 <am_hal_cachectrl_config>:
    da14:	b530      	push	{r4, r5, lr}
    da16:	b083      	sub	sp, #12
    da18:	4605      	mov	r5, r0
    da1a:	f000 fb0f 	bl	e03c <am_hal_interrupt_master_disable>
    da1e:	4c0f      	ldr	r4, [pc, #60]	; (da5c <am_hal_cachectrl_config+0x48>)
    da20:	9001      	str	r0, [sp, #4]
    da22:	6823      	ldr	r3, [r4, #0]
    da24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    da28:	6023      	str	r3, [r4, #0]
    da2a:	9801      	ldr	r0, [sp, #4]
    da2c:	f000 fb0a 	bl	e044 <am_hal_interrupt_master_set>
    da30:	78ab      	ldrb	r3, [r5, #2]
    da32:	782a      	ldrb	r2, [r5, #0]
    da34:	7869      	ldrb	r1, [r5, #1]
    da36:	005b      	lsls	r3, r3, #1
    da38:	0112      	lsls	r2, r2, #4
    da3a:	b2d2      	uxtb	r2, r2
    da3c:	f003 0302 	and.w	r3, r3, #2
    da40:	4313      	orrs	r3, r2
    da42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    da46:	020a      	lsls	r2, r1, #8
    da48:	f402 7240 	and.w	r2, r2, #768	; 0x300
    da4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    da50:	4313      	orrs	r3, r2
    da52:	2000      	movs	r0, #0
    da54:	6023      	str	r3, [r4, #0]
    da56:	b003      	add	sp, #12
    da58:	bd30      	pop	{r4, r5, pc}
    da5a:	bf00      	nop
    da5c:	40018000 	.word	0x40018000

0000da60 <am_hal_cachectrl_enable>:
    da60:	4a03      	ldr	r2, [pc, #12]	; (da70 <am_hal_cachectrl_enable+0x10>)
    da62:	6813      	ldr	r3, [r2, #0]
    da64:	f043 0301 	orr.w	r3, r3, #1
    da68:	6013      	str	r3, [r2, #0]
    da6a:	2000      	movs	r0, #0
    da6c:	4770      	bx	lr
    da6e:	bf00      	nop
    da70:	40018000 	.word	0x40018000

0000da74 <am_hal_clkgen_control>:
    da74:	4b41      	ldr	r3, [pc, #260]	; (db7c <am_hal_clkgen_control+0x108>)
    da76:	681a      	ldr	r2, [r3, #0]
    da78:	b912      	cbnz	r2, da80 <am_hal_clkgen_control+0xc>
    da7a:	4a41      	ldr	r2, [pc, #260]	; (db80 <am_hal_clkgen_control+0x10c>)
    da7c:	6812      	ldr	r2, [r2, #0]
    da7e:	601a      	str	r2, [r3, #0]
    da80:	2809      	cmp	r0, #9
    da82:	d878      	bhi.n	db76 <am_hal_clkgen_control+0x102>
    da84:	e8df f000 	tbb	[pc, r0]
    da88:	261e160d 	.word	0x261e160d
    da8c:	524c423a 	.word	0x524c423a
    da90:	055a      	.short	0x055a
    da92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    da96:	2000      	movs	r0, #0
    da98:	6a1a      	ldr	r2, [r3, #32]
    da9a:	f36f 0200 	bfc	r2, #0, #1
    da9e:	621a      	str	r2, [r3, #32]
    daa0:	4770      	bx	lr
    daa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    daa6:	2200      	movs	r2, #0
    daa8:	2147      	movs	r1, #71	; 0x47
    daaa:	6159      	str	r1, [r3, #20]
    daac:	4610      	mov	r0, r2
    daae:	619a      	str	r2, [r3, #24]
    dab0:	615a      	str	r2, [r3, #20]
    dab2:	4770      	bx	lr
    dab4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dab8:	2000      	movs	r0, #0
    daba:	68d3      	ldr	r3, [r2, #12]
    dabc:	f023 0301 	bic.w	r3, r3, #1
    dac0:	60d3      	str	r3, [r2, #12]
    dac2:	4770      	bx	lr
    dac4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    dac8:	2000      	movs	r0, #0
    daca:	68d3      	ldr	r3, [r2, #12]
    dacc:	f023 0302 	bic.w	r3, r3, #2
    dad0:	60d3      	str	r3, [r2, #12]
    dad2:	4770      	bx	lr
    dad4:	4a2b      	ldr	r2, [pc, #172]	; (db84 <am_hal_clkgen_control+0x110>)
    dad6:	68d3      	ldr	r3, [r2, #12]
    dad8:	b2db      	uxtb	r3, r3
    dada:	2b21      	cmp	r3, #33	; 0x21
    dadc:	d106      	bne.n	daec <am_hal_clkgen_control+0x78>
    dade:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    dae2:	2101      	movs	r1, #1
    dae4:	f361 2309 	bfi	r3, r1, #8, #2
    dae8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    daec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    daf0:	2000      	movs	r0, #0
    daf2:	68d3      	ldr	r3, [r2, #12]
    daf4:	f043 0301 	orr.w	r3, r3, #1
    daf8:	60d3      	str	r3, [r2, #12]
    dafa:	4770      	bx	lr
    dafc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db00:	2000      	movs	r0, #0
    db02:	68d3      	ldr	r3, [r2, #12]
    db04:	f043 0302 	orr.w	r3, r3, #2
    db08:	60d3      	str	r3, [r2, #12]
    db0a:	4770      	bx	lr
    db0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db10:	2200      	movs	r2, #0
    db12:	2047      	movs	r0, #71	; 0x47
    db14:	2101      	movs	r1, #1
    db16:	6158      	str	r0, [r3, #20]
    db18:	6199      	str	r1, [r3, #24]
    db1a:	4610      	mov	r0, r2
    db1c:	615a      	str	r2, [r3, #20]
    db1e:	4770      	bx	lr
    db20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    db24:	2000      	movs	r0, #0
    db26:	68da      	ldr	r2, [r3, #12]
    db28:	60da      	str	r2, [r3, #12]
    db2a:	4770      	bx	lr
    db2c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db30:	2000      	movs	r0, #0
    db32:	68d3      	ldr	r3, [r2, #12]
    db34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    db38:	60d3      	str	r3, [r2, #12]
    db3a:	4770      	bx	lr
    db3c:	b510      	push	{r4, lr}
    db3e:	4a11      	ldr	r2, [pc, #68]	; (db84 <am_hal_clkgen_control+0x110>)
    db40:	68d3      	ldr	r3, [r2, #12]
    db42:	b2db      	uxtb	r3, r3
    db44:	2b21      	cmp	r3, #33	; 0x21
    db46:	460c      	mov	r4, r1
    db48:	d008      	beq.n	db5c <am_hal_clkgen_control+0xe8>
    db4a:	b194      	cbz	r4, db72 <am_hal_clkgen_control+0xfe>
    db4c:	6823      	ldr	r3, [r4, #0]
    db4e:	f043 0301 	orr.w	r3, r3, #1
    db52:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db56:	2000      	movs	r0, #0
    db58:	6213      	str	r3, [r2, #32]
    db5a:	bd10      	pop	{r4, pc}
    db5c:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    db60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    db64:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    db68:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    db6c:	f000 f912 	bl	dd94 <am_hal_flash_delay>
    db70:	e7eb      	b.n	db4a <am_hal_clkgen_control+0xd6>
    db72:	4b05      	ldr	r3, [pc, #20]	; (db88 <am_hal_clkgen_control+0x114>)
    db74:	e7ed      	b.n	db52 <am_hal_clkgen_control+0xde>
    db76:	2006      	movs	r0, #6
    db78:	4770      	bx	lr
    db7a:	bf00      	nop
    db7c:	10001130 	.word	0x10001130
    db80:	4ffff000 	.word	0x4ffff000
    db84:	40020000 	.word	0x40020000
    db88:	0025b801 	.word	0x0025b801

0000db8c <am_hal_clkgen_status_get>:
    db8c:	b1a8      	cbz	r0, dbba <am_hal_clkgen_status_get+0x2e>
    db8e:	b410      	push	{r4}
    db90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    db94:	490a      	ldr	r1, [pc, #40]	; (dbc0 <am_hal_clkgen_status_get+0x34>)
    db96:	6994      	ldr	r4, [r2, #24]
    db98:	4b0a      	ldr	r3, [pc, #40]	; (dbc4 <am_hal_clkgen_status_get+0x38>)
    db9a:	f014 0f01 	tst.w	r4, #1
    db9e:	bf08      	it	eq
    dba0:	460b      	moveq	r3, r1
    dba2:	6003      	str	r3, [r0, #0]
    dba4:	69d3      	ldr	r3, [r2, #28]
    dba6:	f85d 4b04 	ldr.w	r4, [sp], #4
    dbaa:	f003 0201 	and.w	r2, r3, #1
    dbae:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dbb2:	6042      	str	r2, [r0, #4]
    dbb4:	7203      	strb	r3, [r0, #8]
    dbb6:	2000      	movs	r0, #0
    dbb8:	4770      	bx	lr
    dbba:	2006      	movs	r0, #6
    dbbc:	4770      	bx	lr
    dbbe:	bf00      	nop
    dbc0:	02dc6c00 	.word	0x02dc6c00
    dbc4:	016e3600 	.word	0x016e3600

0000dbc8 <am_hal_ctimer_config_single>:
    dbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbca:	b083      	sub	sp, #12
    dbcc:	460e      	mov	r6, r1
    dbce:	4614      	mov	r4, r2
    dbd0:	0147      	lsls	r7, r0, #5
    dbd2:	4605      	mov	r5, r0
    dbd4:	f000 fa32 	bl	e03c <am_hal_interrupt_master_disable>
    dbd8:	4a19      	ldr	r2, [pc, #100]	; (dc40 <am_hal_ctimer_config_single+0x78>)
    dbda:	9001      	str	r0, [sp, #4]
    dbdc:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dbe0:	58bb      	ldr	r3, [r7, r2]
    dbe2:	d021      	beq.n	dc28 <am_hal_ctimer_config_single+0x60>
    dbe4:	ea23 0306 	bic.w	r3, r3, r6
    dbe8:	1c71      	adds	r1, r6, #1
    dbea:	ea43 0304 	orr.w	r3, r3, r4
    dbee:	d00c      	beq.n	dc0a <am_hal_ctimer_config_single+0x42>
    dbf0:	50bb      	str	r3, [r7, r2]
    dbf2:	9801      	ldr	r0, [sp, #4]
    dbf4:	f000 fa26 	bl	e044 <am_hal_interrupt_master_set>
    dbf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbfc:	429e      	cmp	r6, r3
    dbfe:	d01c      	beq.n	dc3a <am_hal_ctimer_config_single+0x72>
    dc00:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    dc04:	d017      	beq.n	dc36 <am_hal_ctimer_config_single+0x6e>
    dc06:	b003      	add	sp, #12
    dc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    dc0e:	50bb      	str	r3, [r7, r2]
    dc10:	9801      	ldr	r0, [sp, #4]
    dc12:	f000 fa17 	bl	e044 <am_hal_interrupt_master_set>
    dc16:	2200      	movs	r2, #0
    dc18:	4b0a      	ldr	r3, [pc, #40]	; (dc44 <am_hal_ctimer_config_single+0x7c>)
    dc1a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    dc1e:	f3c4 0444 	ubfx	r4, r4, #1, #5
    dc22:	54ac      	strb	r4, [r5, r2]
    dc24:	b003      	add	sp, #12
    dc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc28:	0424      	lsls	r4, r4, #16
    dc2a:	b29b      	uxth	r3, r3
    dc2c:	4323      	orrs	r3, r4
    dc2e:	50bb      	str	r3, [r7, r2]
    dc30:	9801      	ldr	r0, [sp, #4]
    dc32:	f000 fa07 	bl	e044 <am_hal_interrupt_master_set>
    dc36:	2201      	movs	r2, #1
    dc38:	e7ee      	b.n	dc18 <am_hal_ctimer_config_single+0x50>
    dc3a:	2200      	movs	r2, #0
    dc3c:	e7ec      	b.n	dc18 <am_hal_ctimer_config_single+0x50>
    dc3e:	bf00      	nop
    dc40:	4000800c 	.word	0x4000800c
    dc44:	10001000 	.word	0x10001000

0000dc48 <am_hal_ctimer_start>:
    dc48:	b570      	push	{r4, r5, r6, lr}
    dc4a:	b082      	sub	sp, #8
    dc4c:	460c      	mov	r4, r1
    dc4e:	0146      	lsls	r6, r0, #5
    dc50:	4605      	mov	r5, r0
    dc52:	f000 f9f3 	bl	e03c <am_hal_interrupt_master_disable>
    dc56:	4a0f      	ldr	r2, [pc, #60]	; (dc94 <am_hal_ctimer_start+0x4c>)
    dc58:	9001      	str	r0, [sp, #4]
    dc5a:	58b3      	ldr	r3, [r6, r2]
    dc5c:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    dc60:	ea23 0301 	bic.w	r3, r3, r1
    dc64:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    dc68:	430b      	orrs	r3, r1
    dc6a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    dc6e:	bf0c      	ite	eq
    dc70:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    dc74:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    dc78:	50b3      	str	r3, [r6, r2]
    dc7a:	4b07      	ldr	r3, [pc, #28]	; (dc98 <am_hal_ctimer_start+0x50>)
    dc7c:	9801      	ldr	r0, [sp, #4]
    dc7e:	bf0c      	ite	eq
    dc80:	2101      	moveq	r1, #1
    dc82:	2100      	movne	r1, #0
    dc84:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    dc88:	545c      	strb	r4, [r3, r1]
    dc8a:	f000 f9db 	bl	e044 <am_hal_interrupt_master_set>
    dc8e:	b002      	add	sp, #8
    dc90:	bd70      	pop	{r4, r5, r6, pc}
    dc92:	bf00      	nop
    dc94:	4000800c 	.word	0x4000800c
    dc98:	10001000 	.word	0x10001000

0000dc9c <am_hal_ctimer_period_set>:
    dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dca0:	b082      	sub	sp, #8
    dca2:	4689      	mov	r9, r1
    dca4:	4698      	mov	r8, r3
    dca6:	0147      	lsls	r7, r0, #5
    dca8:	4614      	mov	r4, r2
    dcaa:	f000 f9c7 	bl	e03c <am_hal_interrupt_master_disable>
    dcae:	f8df a094 	ldr.w	sl, [pc, #148]	; dd44 <am_hal_ctimer_period_set+0xa8>
    dcb2:	9001      	str	r0, [sp, #4]
    dcb4:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dcb8:	4d20      	ldr	r5, [pc, #128]	; (dd3c <am_hal_ctimer_period_set+0xa0>)
    dcba:	4e21      	ldr	r6, [pc, #132]	; (dd40 <am_hal_ctimer_period_set+0xa4>)
    dcbc:	f857 300a 	ldr.w	r3, [r7, sl]
    dcc0:	d01a      	beq.n	dcf8 <am_hal_ctimer_period_set+0x5c>
    dcc2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dcc6:	2b80      	cmp	r3, #128	; 0x80
    dcc8:	d01b      	beq.n	dd02 <am_hal_ctimer_period_set+0x66>
    dcca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dcce:	2000      	movs	r0, #0
    dcd0:	4591      	cmp	r9, r2
    dcd2:	4603      	mov	r3, r0
    dcd4:	d01e      	beq.n	dd14 <am_hal_ctimer_period_set+0x78>
    dcd6:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    dcda:	d025      	beq.n	dd28 <am_hal_ctimer_period_set+0x8c>
    dcdc:	0c1b      	lsrs	r3, r3, #16
    dcde:	b2a2      	uxth	r2, r4
    dce0:	041b      	lsls	r3, r3, #16
    dce2:	4310      	orrs	r0, r2
    dce4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    dce8:	5178      	str	r0, [r7, r5]
    dcea:	51bb      	str	r3, [r7, r6]
    dcec:	9801      	ldr	r0, [sp, #4]
    dcee:	f000 f9a9 	bl	e044 <am_hal_interrupt_master_set>
    dcf2:	b002      	add	sp, #8
    dcf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcf8:	0c1b      	lsrs	r3, r3, #16
    dcfa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    dcfe:	2b80      	cmp	r3, #128	; 0x80
    dd00:	d111      	bne.n	dd26 <am_hal_ctimer_period_set+0x8a>
    dd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dd06:	4591      	cmp	r9, r2
    dd08:	ea4f 4004 	mov.w	r0, r4, lsl #16
    dd0c:	4623      	mov	r3, r4
    dd0e:	ebc8 0404 	rsb	r4, r8, r4
    dd12:	d1e0      	bne.n	dcd6 <am_hal_ctimer_period_set+0x3a>
    dd14:	b2a3      	uxth	r3, r4
    dd16:	4318      	orrs	r0, r3
    dd18:	5178      	str	r0, [r7, r5]
    dd1a:	9801      	ldr	r0, [sp, #4]
    dd1c:	f000 f992 	bl	e044 <am_hal_interrupt_master_set>
    dd20:	b002      	add	sp, #8
    dd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd26:	2000      	movs	r0, #0
    dd28:	b2a3      	uxth	r3, r4
    dd2a:	4318      	orrs	r0, r3
    dd2c:	51b8      	str	r0, [r7, r6]
    dd2e:	9801      	ldr	r0, [sp, #4]
    dd30:	f000 f988 	bl	e044 <am_hal_interrupt_master_set>
    dd34:	b002      	add	sp, #8
    dd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd3a:	bf00      	nop
    dd3c:	40008004 	.word	0x40008004
    dd40:	40008008 	.word	0x40008008
    dd44:	4000800c 	.word	0x4000800c

0000dd48 <am_hal_ctimer_adc_trigger_enable>:
    dd48:	b500      	push	{lr}
    dd4a:	b083      	sub	sp, #12
    dd4c:	f000 f976 	bl	e03c <am_hal_interrupt_master_disable>
    dd50:	4a05      	ldr	r2, [pc, #20]	; (dd68 <am_hal_ctimer_adc_trigger_enable+0x20>)
    dd52:	9001      	str	r0, [sp, #4]
    dd54:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    dd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dd5a:	66d3      	str	r3, [r2, #108]	; 0x6c
    dd5c:	9801      	ldr	r0, [sp, #4]
    dd5e:	f000 f971 	bl	e044 <am_hal_interrupt_master_set>
    dd62:	b003      	add	sp, #12
    dd64:	f85d fb04 	ldr.w	pc, [sp], #4
    dd68:	40008000 	.word	0x40008000

0000dd6c <am_hal_ctimer_int_enable>:
    dd6c:	b510      	push	{r4, lr}
    dd6e:	b082      	sub	sp, #8
    dd70:	4604      	mov	r4, r0
    dd72:	f000 f963 	bl	e03c <am_hal_interrupt_master_disable>
    dd76:	4b06      	ldr	r3, [pc, #24]	; (dd90 <am_hal_ctimer_int_enable+0x24>)
    dd78:	9001      	str	r0, [sp, #4]
    dd7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dd7e:	4314      	orrs	r4, r2
    dd80:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    dd84:	9801      	ldr	r0, [sp, #4]
    dd86:	f000 f95d 	bl	e044 <am_hal_interrupt_master_set>
    dd8a:	b002      	add	sp, #8
    dd8c:	bd10      	pop	{r4, pc}
    dd8e:	bf00      	nop
    dd90:	40008000 	.word	0x40008000

0000dd94 <am_hal_flash_delay>:
    dd94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    dd98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dd9a:	075b      	lsls	r3, r3, #29
    dd9c:	bf46      	itte	mi
    dd9e:	0040      	lslmi	r0, r0, #1
    dda0:	230e      	movmi	r3, #14
    dda2:	230b      	movpl	r3, #11
    dda4:	4298      	cmp	r0, r3
    dda6:	d800      	bhi.n	ddaa <am_hal_flash_delay+0x16>
    dda8:	4770      	bx	lr
    ddaa:	1ac0      	subs	r0, r0, r3
    ddac:	4b00      	ldr	r3, [pc, #0]	; (ddb0 <am_hal_flash_delay+0x1c>)
    ddae:	4718      	bx	r3
    ddb0:	0800009d 	.word	0x0800009d

0000ddb4 <am_hal_flash_load_ui32>:
    ddb4:	4b00      	ldr	r3, [pc, #0]	; (ddb8 <am_hal_flash_load_ui32+0x4>)
    ddb6:	4718      	bx	r3
    ddb8:	08000075 	.word	0x08000075

0000ddbc <am_hal_gpio_pinconfig>:
    ddbc:	2831      	cmp	r0, #49	; 0x31
    ddbe:	d901      	bls.n	ddc4 <am_hal_gpio_pinconfig+0x8>
    ddc0:	2006      	movs	r0, #6
    ddc2:	4770      	bx	lr
    ddc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddc8:	f001 0307 	and.w	r3, r1, #7
    ddcc:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    ddd0:	b085      	sub	sp, #20
    ddd2:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ddd6:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    ddda:	d014      	beq.n	de06 <am_hal_gpio_pinconfig+0x4a>
    dddc:	f3c1 1742 	ubfx	r7, r1, #5, #3
    dde0:	1dbd      	adds	r5, r7, #6
    dde2:	f005 0507 	and.w	r5, r5, #7
    dde6:	2d03      	cmp	r5, #3
    dde8:	f042 0201 	orr.w	r2, r2, #1
    ddec:	f200 80a7 	bhi.w	df3e <am_hal_gpio_pinconfig+0x182>
    ddf0:	4d82      	ldr	r5, [pc, #520]	; (dffc <am_hal_gpio_pinconfig+0x240>)
    ddf2:	5c2d      	ldrb	r5, [r5, r0]
    ddf4:	07ee      	lsls	r6, r5, #31
    ddf6:	d403      	bmi.n	de00 <am_hal_gpio_pinconfig+0x44>
    ddf8:	4881      	ldr	r0, [pc, #516]	; (e000 <am_hal_gpio_pinconfig+0x244>)
    ddfa:	b005      	add	sp, #20
    ddfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de00:	3f02      	subs	r7, #2
    de02:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    de06:	2c00      	cmp	r4, #0
    de08:	f040 8091 	bne.w	df2e <am_hal_gpio_pinconfig+0x172>
    de0c:	4c7d      	ldr	r4, [pc, #500]	; (e004 <am_hal_gpio_pinconfig+0x248>)
    de0e:	4d7e      	ldr	r5, [pc, #504]	; (e008 <am_hal_gpio_pinconfig+0x24c>)
    de10:	5c24      	ldrb	r4, [r4, r0]
    de12:	5c2d      	ldrb	r5, [r5, r0]
    de14:	411c      	asrs	r4, r3
    de16:	f014 0f01 	tst.w	r4, #1
    de1a:	bf0c      	ite	eq
    de1c:	2400      	moveq	r4, #0
    de1e:	2402      	movne	r4, #2
    de20:	42ab      	cmp	r3, r5
    de22:	ea42 0204 	orr.w	r2, r2, r4
    de26:	f000 8096 	beq.w	df56 <am_hal_gpio_pinconfig+0x19a>
    de2a:	f3c1 3341 	ubfx	r3, r1, #13, #2
    de2e:	105d      	asrs	r5, r3, #1
    de30:	f3c1 2681 	ubfx	r6, r1, #10, #2
    de34:	00db      	lsls	r3, r3, #3
    de36:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    de3a:	f003 0408 	and.w	r4, r3, #8
    de3e:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    de42:	f00e 060c 	and.w	r6, lr, #12
    de46:	f3c1 3500 	ubfx	r5, r1, #12, #1
    de4a:	2e04      	cmp	r6, #4
    de4c:	ea43 0304 	orr.w	r3, r3, r4
    de50:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    de54:	462c      	mov	r4, r5
    de56:	f000 808b 	beq.w	df70 <am_hal_gpio_pinconfig+0x1b4>
    de5a:	4c6c      	ldr	r4, [pc, #432]	; (e00c <am_hal_gpio_pinconfig+0x250>)
    de5c:	6827      	ldr	r7, [r4, #0]
    de5e:	1bcf      	subs	r7, r1, r7
    de60:	fab7 f787 	clz	r7, r7
    de64:	097f      	lsrs	r7, r7, #5
    de66:	f01e 0f60 	tst.w	lr, #96	; 0x60
    de6a:	bf04      	itt	eq
    de6c:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    de70:	f364 0300 	bfieq	r3, r4, #0, #1
    de74:	0084      	lsls	r4, r0, #2
    de76:	f3c1 2101 	ubfx	r1, r1, #8, #2
    de7a:	2902      	cmp	r1, #2
    de7c:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    de80:	d078      	beq.n	df74 <am_hal_gpio_pinconfig+0x1b8>
    de82:	d87f      	bhi.n	df84 <am_hal_gpio_pinconfig+0x1c8>
    de84:	2901      	cmp	r1, #1
    de86:	f04f 0100 	mov.w	r1, #0
    de8a:	bf08      	it	eq
    de8c:	f042 0204 	orreq.w	r2, r2, #4
    de90:	f005 0518 	and.w	r5, r5, #24
    de94:	9101      	str	r1, [sp, #4]
    de96:	f004 041c 	and.w	r4, r4, #28
    de9a:	f020 0a03 	bic.w	sl, r0, #3
    de9e:	f04f 090f 	mov.w	r9, #15
    dea2:	fa09 f904 	lsl.w	r9, r9, r4
    dea6:	0841      	lsrs	r1, r0, #1
    dea8:	26ff      	movs	r6, #255	; 0xff
    deaa:	fa03 f404 	lsl.w	r4, r3, r4
    deae:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    deb2:	40ae      	lsls	r6, r5
    deb4:	9300      	str	r3, [sp, #0]
    deb6:	fa02 f505 	lsl.w	r5, r2, r5
    deba:	4683      	mov	fp, r0
    debc:	f021 0803 	bic.w	r8, r1, #3
    dec0:	f000 f8bc 	bl	e03c <am_hal_interrupt_master_disable>
    dec4:	9b00      	ldr	r3, [sp, #0]
    dec6:	9003      	str	r0, [sp, #12]
    dec8:	ea6f 0909 	mvn.w	r9, r9
    decc:	43f6      	mvns	r6, r6
    dece:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ded2:	f8df e15c 	ldr.w	lr, [pc, #348]	; e030 <am_hal_gpio_pinconfig+0x274>
    ded6:	4a4e      	ldr	r2, [pc, #312]	; (e010 <am_hal_gpio_pinconfig+0x254>)
    ded8:	b15f      	cbz	r7, def2 <am_hal_gpio_pinconfig+0x136>
    deda:	ea4f 07db 	mov.w	r7, fp, lsr #3
    dede:	f00b 001f 	and.w	r0, fp, #31
    dee2:	f007 0704 	and.w	r7, r7, #4
    dee6:	f04f 0b01 	mov.w	fp, #1
    deea:	494a      	ldr	r1, [pc, #296]	; (e014 <am_hal_gpio_pinconfig+0x258>)
    deec:	fa0b f000 	lsl.w	r0, fp, r0
    def0:	5078      	str	r0, [r7, r1]
    def2:	4849      	ldr	r0, [pc, #292]	; (e018 <am_hal_gpio_pinconfig+0x25c>)
    def4:	2773      	movs	r7, #115	; 0x73
    def6:	6607      	str	r7, [r0, #96]	; 0x60
    def8:	681f      	ldr	r7, [r3, #0]
    defa:	4037      	ands	r7, r6
    defc:	433d      	orrs	r5, r7
    defe:	601d      	str	r5, [r3, #0]
    df00:	f858 300e 	ldr.w	r3, [r8, lr]
    df04:	ea09 0303 	and.w	r3, r9, r3
    df08:	4323      	orrs	r3, r4
    df0a:	f848 300e 	str.w	r3, [r8, lr]
    df0e:	f85a 3002 	ldr.w	r3, [sl, r2]
    df12:	401e      	ands	r6, r3
    df14:	9b01      	ldr	r3, [sp, #4]
    df16:	2400      	movs	r4, #0
    df18:	431e      	orrs	r6, r3
    df1a:	f84a 6002 	str.w	r6, [sl, r2]
    df1e:	6604      	str	r4, [r0, #96]	; 0x60
    df20:	9803      	ldr	r0, [sp, #12]
    df22:	f000 f88f 	bl	e044 <am_hal_interrupt_master_set>
    df26:	4620      	mov	r0, r4
    df28:	b005      	add	sp, #20
    df2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df2e:	2c01      	cmp	r4, #1
    df30:	d017      	beq.n	df62 <am_hal_gpio_pinconfig+0x1a6>
    df32:	2c02      	cmp	r4, #2
    df34:	d035      	beq.n	dfa2 <am_hal_gpio_pinconfig+0x1e6>
    df36:	4839      	ldr	r0, [pc, #228]	; (e01c <am_hal_gpio_pinconfig+0x260>)
    df38:	b005      	add	sp, #20
    df3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df3e:	2ec0      	cmp	r6, #192	; 0xc0
    df40:	d02a      	beq.n	df98 <am_hal_gpio_pinconfig+0x1dc>
    df42:	2e20      	cmp	r6, #32
    df44:	f47f af5f 	bne.w	de06 <am_hal_gpio_pinconfig+0x4a>
    df48:	2814      	cmp	r0, #20
    df4a:	f43f af55 	beq.w	ddf8 <am_hal_gpio_pinconfig+0x3c>
    df4e:	2c00      	cmp	r4, #0
    df50:	f43f af5c 	beq.w	de0c <am_hal_gpio_pinconfig+0x50>
    df54:	e7eb      	b.n	df2e <am_hal_gpio_pinconfig+0x172>
    df56:	f3c1 4402 	ubfx	r4, r1, #16, #3
    df5a:	2c07      	cmp	r4, #7
    df5c:	d128      	bne.n	dfb0 <am_hal_gpio_pinconfig+0x1f4>
    df5e:	4830      	ldr	r0, [pc, #192]	; (e020 <am_hal_gpio_pinconfig+0x264>)
    df60:	e74b      	b.n	ddfa <am_hal_gpio_pinconfig+0x3e>
    df62:	4c26      	ldr	r4, [pc, #152]	; (dffc <am_hal_gpio_pinconfig+0x240>)
    df64:	5c24      	ldrb	r4, [r4, r0]
    df66:	07a5      	lsls	r5, r4, #30
    df68:	d5e5      	bpl.n	df36 <am_hal_gpio_pinconfig+0x17a>
    df6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    df6e:	e74d      	b.n	de0c <am_hal_gpio_pinconfig+0x50>
    df70:	2701      	movs	r7, #1
    df72:	e778      	b.n	de66 <am_hal_gpio_pinconfig+0xaa>
    df74:	f005 0518 	and.w	r5, r5, #24
    df78:	f04f 0801 	mov.w	r8, #1
    df7c:	fa08 f105 	lsl.w	r1, r8, r5
    df80:	9101      	str	r1, [sp, #4]
    df82:	e788      	b.n	de96 <am_hal_gpio_pinconfig+0xda>
    df84:	f005 0518 	and.w	r5, r5, #24
    df88:	f04f 0801 	mov.w	r8, #1
    df8c:	fa08 f105 	lsl.w	r1, r8, r5
    df90:	f042 0204 	orr.w	r2, r2, #4
    df94:	9101      	str	r1, [sp, #4]
    df96:	e77e      	b.n	de96 <am_hal_gpio_pinconfig+0xda>
    df98:	2814      	cmp	r0, #20
    df9a:	f43f af34 	beq.w	de06 <am_hal_gpio_pinconfig+0x4a>
    df9e:	4821      	ldr	r0, [pc, #132]	; (e024 <am_hal_gpio_pinconfig+0x268>)
    dfa0:	e72b      	b.n	ddfa <am_hal_gpio_pinconfig+0x3e>
    dfa2:	4c16      	ldr	r4, [pc, #88]	; (dffc <am_hal_gpio_pinconfig+0x240>)
    dfa4:	5c24      	ldrb	r4, [r4, r0]
    dfa6:	0764      	lsls	r4, r4, #29
    dfa8:	d5c5      	bpl.n	df36 <am_hal_gpio_pinconfig+0x17a>
    dfaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dfae:	e72d      	b.n	de0c <am_hal_gpio_pinconfig+0x50>
    dfb0:	4d1d      	ldr	r5, [pc, #116]	; (e028 <am_hal_gpio_pinconfig+0x26c>)
    dfb2:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dfb6:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dfba:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dfbe:	429e      	cmp	r6, r3
    dfc0:	d00c      	beq.n	dfdc <am_hal_gpio_pinconfig+0x220>
    dfc2:	0084      	lsls	r4, r0, #2
    dfc4:	4425      	add	r5, r4
    dfc6:	786e      	ldrb	r6, [r5, #1]
    dfc8:	429e      	cmp	r6, r3
    dfca:	d012      	beq.n	dff2 <am_hal_gpio_pinconfig+0x236>
    dfcc:	78ae      	ldrb	r6, [r5, #2]
    dfce:	429e      	cmp	r6, r3
    dfd0:	d00d      	beq.n	dfee <am_hal_gpio_pinconfig+0x232>
    dfd2:	78ed      	ldrb	r5, [r5, #3]
    dfd4:	429d      	cmp	r5, r3
    dfd6:	d00e      	beq.n	dff6 <am_hal_gpio_pinconfig+0x23a>
    dfd8:	4814      	ldr	r0, [pc, #80]	; (e02c <am_hal_gpio_pinconfig+0x270>)
    dfda:	e70e      	b.n	ddfa <am_hal_gpio_pinconfig+0x3e>
    dfdc:	2300      	movs	r3, #0
    dfde:	0084      	lsls	r4, r0, #2
    dfe0:	005b      	lsls	r3, r3, #1
    dfe2:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dfe6:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dfea:	2700      	movs	r7, #0
    dfec:	e743      	b.n	de76 <am_hal_gpio_pinconfig+0xba>
    dfee:	2302      	movs	r3, #2
    dff0:	e7f6      	b.n	dfe0 <am_hal_gpio_pinconfig+0x224>
    dff2:	2301      	movs	r3, #1
    dff4:	e7f4      	b.n	dfe0 <am_hal_gpio_pinconfig+0x224>
    dff6:	2303      	movs	r3, #3
    dff8:	e7f2      	b.n	dfe0 <am_hal_gpio_pinconfig+0x224>
    dffa:	bf00      	nop
    dffc:	0000efbc 	.word	0x0000efbc
    e000:	08000100 	.word	0x08000100
    e004:	0000f0b8 	.word	0x0000f0b8
    e008:	0000f0f0 	.word	0x0000f0f0
    e00c:	0000f0ec 	.word	0x0000f0ec
    e010:	400100e0 	.word	0x400100e0
    e014:	400100b4 	.word	0x400100b4
    e018:	40010000 	.word	0x40010000
    e01c:	08000102 	.word	0x08000102
    e020:	08000103 	.word	0x08000103
    e024:	08000101 	.word	0x08000101
    e028:	0000eff0 	.word	0x0000eff0
    e02c:	08000104 	.word	0x08000104
    e030:	40010040 	.word	0x40010040

0000e034 <am_hal_interrupt_master_enable>:
    e034:	f3ef 8010 	mrs	r0, PRIMASK
    e038:	b662      	cpsie	i
    e03a:	4770      	bx	lr

0000e03c <am_hal_interrupt_master_disable>:
    e03c:	f3ef 8010 	mrs	r0, PRIMASK
    e040:	b672      	cpsid	i
    e042:	4770      	bx	lr

0000e044 <am_hal_interrupt_master_set>:
    e044:	f380 8810 	msr	PRIMASK, r0
    e048:	4770      	bx	lr
    e04a:	bf00      	nop

0000e04c <am_hal_mcuctrl_info_get>:
    e04c:	b4f0      	push	{r4, r5, r6, r7}
    e04e:	b121      	cbz	r1, e05a <am_hal_mcuctrl_info_get+0xe>
    e050:	2801      	cmp	r0, #1
    e052:	d038      	beq.n	e0c6 <am_hal_mcuctrl_info_get+0x7a>
    e054:	d320      	bcc.n	e098 <am_hal_mcuctrl_info_get+0x4c>
    e056:	2802      	cmp	r0, #2
    e058:	d002      	beq.n	e060 <am_hal_mcuctrl_info_get+0x14>
    e05a:	2006      	movs	r0, #6
    e05c:	bcf0      	pop	{r4, r5, r6, r7}
    e05e:	4770      	bx	lr
    e060:	4a41      	ldr	r2, [pc, #260]	; (e168 <am_hal_mcuctrl_info_get+0x11c>)
    e062:	684d      	ldr	r5, [r1, #4]
    e064:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e068:	694c      	ldr	r4, [r1, #20]
    e06a:	f003 0601 	and.w	r6, r3, #1
    e06e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e072:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e076:	700e      	strb	r6, [r1, #0]
    e078:	7208      	strb	r0, [r1, #8]
    e07a:	740b      	strb	r3, [r1, #16]
    e07c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e080:	60cb      	str	r3, [r1, #12]
    e082:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e086:	4328      	orrs	r0, r5
    e088:	6048      	str	r0, [r1, #4]
    e08a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e08e:	4323      	orrs	r3, r4
    e090:	2000      	movs	r0, #0
    e092:	614b      	str	r3, [r1, #20]
    e094:	bcf0      	pop	{r4, r5, r6, r7}
    e096:	4770      	bx	lr
    e098:	4a33      	ldr	r2, [pc, #204]	; (e168 <am_hal_mcuctrl_info_get+0x11c>)
    e09a:	6993      	ldr	r3, [r2, #24]
    e09c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e0a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e0a4:	7008      	strb	r0, [r1, #0]
    e0a6:	704b      	strb	r3, [r1, #1]
    e0a8:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e0ac:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e0b0:	710b      	strb	r3, [r1, #4]
    e0b2:	6953      	ldr	r3, [r2, #20]
    e0b4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e0b8:	f003 0301 	and.w	r3, r3, #1
    e0bc:	2000      	movs	r0, #0
    e0be:	708a      	strb	r2, [r1, #2]
    e0c0:	70cb      	strb	r3, [r1, #3]
    e0c2:	bcf0      	pop	{r4, r5, r6, r7}
    e0c4:	4770      	bx	lr
    e0c6:	4b28      	ldr	r3, [pc, #160]	; (e168 <am_hal_mcuctrl_info_get+0x11c>)
    e0c8:	4c28      	ldr	r4, [pc, #160]	; (e16c <am_hal_mcuctrl_info_get+0x120>)
    e0ca:	681a      	ldr	r2, [r3, #0]
    e0cc:	600a      	str	r2, [r1, #0]
    e0ce:	6858      	ldr	r0, [r3, #4]
    e0d0:	6048      	str	r0, [r1, #4]
    e0d2:	6898      	ldr	r0, [r3, #8]
    e0d4:	6088      	str	r0, [r1, #8]
    e0d6:	68d8      	ldr	r0, [r3, #12]
    e0d8:	60c8      	str	r0, [r1, #12]
    e0da:	691d      	ldr	r5, [r3, #16]
    e0dc:	4824      	ldr	r0, [pc, #144]	; (e170 <am_hal_mcuctrl_info_get+0x124>)
    e0de:	610d      	str	r5, [r1, #16]
    e0e0:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e0e4:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e0e8:	695d      	ldr	r5, [r3, #20]
    e0ea:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e0ee:	4b21      	ldr	r3, [pc, #132]	; (e174 <am_hal_mcuctrl_info_get+0x128>)
    e0f0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e0f4:	6208      	str	r0, [r1, #32]
    e0f6:	f002 0201 	and.w	r2, r2, #1
    e0fa:	614d      	str	r5, [r1, #20]
    e0fc:	61cc      	str	r4, [r1, #28]
    e0fe:	618a      	str	r2, [r1, #24]
    e100:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e104:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e108:	b2d0      	uxtb	r0, r2
    e10a:	f004 020f 	and.w	r2, r4, #15
    e10e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e112:	624a      	str	r2, [r1, #36]	; 0x24
    e114:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e118:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e11c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e120:	f004 020f 	and.w	r2, r4, #15
    e124:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e128:	628a      	str	r2, [r1, #40]	; 0x28
    e12a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e12e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e132:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e136:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e13a:	4302      	orrs	r2, r0
    e13c:	62ca      	str	r2, [r1, #44]	; 0x2c
    e13e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e142:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e146:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e14a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e14e:	b2c0      	uxtb	r0, r0
    e150:	0400      	lsls	r0, r0, #16
    e152:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e156:	b2d2      	uxtb	r2, r2
    e158:	431a      	orrs	r2, r3
    e15a:	b2e3      	uxtb	r3, r4
    e15c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e160:	630b      	str	r3, [r1, #48]	; 0x30
    e162:	2000      	movs	r0, #0
    e164:	bcf0      	pop	{r4, r5, r6, r7}
    e166:	4770      	bx	lr
    e168:	40020000 	.word	0x40020000
    e16c:	0000f124 	.word	0x0000f124
    e170:	0000f164 	.word	0x0000f164
    e174:	f0000f00 	.word	0xf0000f00

0000e178 <am_hal_pwrctrl_periph_enable>:
    e178:	b570      	push	{r4, r5, r6, lr}
    e17a:	b082      	sub	sp, #8
    e17c:	4604      	mov	r4, r0
    e17e:	f7ff ff5d 	bl	e03c <am_hal_interrupt_master_disable>
    e182:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e186:	4d0f      	ldr	r5, [pc, #60]	; (e1c4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e188:	4e0f      	ldr	r6, [pc, #60]	; (e1c8 <am_hal_pwrctrl_periph_enable+0x50>)
    e18a:	9001      	str	r0, [sp, #4]
    e18c:	00a4      	lsls	r4, r4, #2
    e18e:	68aa      	ldr	r2, [r5, #8]
    e190:	5933      	ldr	r3, [r6, r4]
    e192:	4313      	orrs	r3, r2
    e194:	60ab      	str	r3, [r5, #8]
    e196:	9801      	ldr	r0, [sp, #4]
    e198:	4434      	add	r4, r6
    e19a:	f7ff ff53 	bl	e044 <am_hal_interrupt_master_set>
    e19e:	20a0      	movs	r0, #160	; 0xa0
    e1a0:	f7ff fdf8 	bl	dd94 <am_hal_flash_delay>
    e1a4:	69ab      	ldr	r3, [r5, #24]
    e1a6:	6864      	ldr	r4, [r4, #4]
    e1a8:	4223      	tst	r3, r4
    e1aa:	d103      	bne.n	e1b4 <am_hal_pwrctrl_periph_enable+0x3c>
    e1ac:	20a0      	movs	r0, #160	; 0xa0
    e1ae:	f7ff fdf1 	bl	dd94 <am_hal_flash_delay>
    e1b2:	69ab      	ldr	r3, [r5, #24]
    e1b4:	4b03      	ldr	r3, [pc, #12]	; (e1c4 <am_hal_pwrctrl_periph_enable+0x4c>)
    e1b6:	699b      	ldr	r3, [r3, #24]
    e1b8:	4223      	tst	r3, r4
    e1ba:	bf0c      	ite	eq
    e1bc:	2001      	moveq	r0, #1
    e1be:	2000      	movne	r0, #0
    e1c0:	b002      	add	sp, #8
    e1c2:	bd70      	pop	{r4, r5, r6, pc}
    e1c4:	40021000 	.word	0x40021000
    e1c8:	0000f1a4 	.word	0x0000f1a4

0000e1cc <am_hal_pwrctrl_periph_disable>:
    e1cc:	b570      	push	{r4, r5, r6, lr}
    e1ce:	b082      	sub	sp, #8
    e1d0:	4604      	mov	r4, r0
    e1d2:	f7ff ff33 	bl	e03c <am_hal_interrupt_master_disable>
    e1d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e1da:	4d10      	ldr	r5, [pc, #64]	; (e21c <am_hal_pwrctrl_periph_disable+0x50>)
    e1dc:	4e10      	ldr	r6, [pc, #64]	; (e220 <am_hal_pwrctrl_periph_disable+0x54>)
    e1de:	9001      	str	r0, [sp, #4]
    e1e0:	00a4      	lsls	r4, r4, #2
    e1e2:	68ab      	ldr	r3, [r5, #8]
    e1e4:	5932      	ldr	r2, [r6, r4]
    e1e6:	ea23 0302 	bic.w	r3, r3, r2
    e1ea:	60ab      	str	r3, [r5, #8]
    e1ec:	9801      	ldr	r0, [sp, #4]
    e1ee:	4434      	add	r4, r6
    e1f0:	f7ff ff28 	bl	e044 <am_hal_interrupt_master_set>
    e1f4:	20a0      	movs	r0, #160	; 0xa0
    e1f6:	f7ff fdcd 	bl	dd94 <am_hal_flash_delay>
    e1fa:	69ab      	ldr	r3, [r5, #24]
    e1fc:	6864      	ldr	r4, [r4, #4]
    e1fe:	4223      	tst	r3, r4
    e200:	d003      	beq.n	e20a <am_hal_pwrctrl_periph_disable+0x3e>
    e202:	20a0      	movs	r0, #160	; 0xa0
    e204:	f7ff fdc6 	bl	dd94 <am_hal_flash_delay>
    e208:	69ab      	ldr	r3, [r5, #24]
    e20a:	4b04      	ldr	r3, [pc, #16]	; (e21c <am_hal_pwrctrl_periph_disable+0x50>)
    e20c:	699b      	ldr	r3, [r3, #24]
    e20e:	4223      	tst	r3, r4
    e210:	bf14      	ite	ne
    e212:	2001      	movne	r0, #1
    e214:	2000      	moveq	r0, #0
    e216:	b002      	add	sp, #8
    e218:	bd70      	pop	{r4, r5, r6, pc}
    e21a:	bf00      	nop
    e21c:	40021000 	.word	0x40021000
    e220:	0000f1a4 	.word	0x0000f1a4

0000e224 <am_hal_pwrctrl_memory_enable>:
    e224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e228:	ea4f 0880 	mov.w	r8, r0, lsl #2
    e22c:	eb08 0300 	add.w	r3, r8, r0
    e230:	009b      	lsls	r3, r3, #2
    e232:	4d1e      	ldr	r5, [pc, #120]	; (e2ac <am_hal_pwrctrl_memory_enable+0x88>)
    e234:	58ee      	ldr	r6, [r5, r3]
    e236:	18ea      	adds	r2, r5, r3
    e238:	43f1      	mvns	r1, r6
    e23a:	4604      	mov	r4, r0
    e23c:	6917      	ldr	r7, [r2, #16]
    e23e:	d126      	bne.n	e28e <am_hal_pwrctrl_memory_enable+0x6a>
    e240:	b95e      	cbnz	r6, e25a <am_hal_pwrctrl_memory_enable+0x36>
    e242:	4444      	add	r4, r8
    e244:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e248:	6868      	ldr	r0, [r5, #4]
    e24a:	4b19      	ldr	r3, [pc, #100]	; (e2b0 <am_hal_pwrctrl_memory_enable+0x8c>)
    e24c:	695b      	ldr	r3, [r3, #20]
    e24e:	403b      	ands	r3, r7
    e250:	1a18      	subs	r0, r3, r0
    e252:	bf18      	it	ne
    e254:	2001      	movne	r0, #1
    e256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e25a:	f8df 9054 	ldr.w	r9, [pc, #84]	; e2b0 <am_hal_pwrctrl_memory_enable+0x8c>
    e25e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    e262:	4444      	add	r4, r8
    e264:	431e      	orrs	r6, r3
    e266:	20a0      	movs	r0, #160	; 0xa0
    e268:	f8c9 6010 	str.w	r6, [r9, #16]
    e26c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    e270:	f7ff fd90 	bl	dd94 <am_hal_flash_delay>
    e274:	f8d9 0014 	ldr.w	r0, [r9, #20]
    e278:	686c      	ldr	r4, [r5, #4]
    e27a:	4038      	ands	r0, r7
    e27c:	42a0      	cmp	r0, r4
    e27e:	d0e4      	beq.n	e24a <am_hal_pwrctrl_memory_enable+0x26>
    e280:	20a0      	movs	r0, #160	; 0xa0
    e282:	f7ff fd87 	bl	dd94 <am_hal_flash_delay>
    e286:	f8d9 3014 	ldr.w	r3, [r9, #20]
    e28a:	4620      	mov	r0, r4
    e28c:	e7dd      	b.n	e24a <am_hal_pwrctrl_memory_enable+0x26>
    e28e:	68d3      	ldr	r3, [r2, #12]
    e290:	4807      	ldr	r0, [pc, #28]	; (e2b0 <am_hal_pwrctrl_memory_enable+0x8c>)
    e292:	400b      	ands	r3, r1
    e294:	43db      	mvns	r3, r3
    e296:	6902      	ldr	r2, [r0, #16]
    e298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e29c:	f043 0301 	orr.w	r3, r3, #1
    e2a0:	4013      	ands	r3, r2
    e2a2:	6103      	str	r3, [r0, #16]
    e2a4:	2010      	movs	r0, #16
    e2a6:	f7ff fd75 	bl	dd94 <am_hal_flash_delay>
    e2aa:	e7c9      	b.n	e240 <am_hal_pwrctrl_memory_enable+0x1c>
    e2ac:	0000f258 	.word	0x0000f258
    e2b0:	40021000 	.word	0x40021000

0000e2b4 <am_hal_sysctrl_sleep>:
    e2b4:	b510      	push	{r4, lr}
    e2b6:	b082      	sub	sp, #8
    e2b8:	4604      	mov	r4, r0
    e2ba:	f7ff febf 	bl	e03c <am_hal_interrupt_master_disable>
    e2be:	9001      	str	r0, [sp, #4]
    e2c0:	b124      	cbz	r4, e2cc <am_hal_sysctrl_sleep+0x18>
    e2c2:	4b12      	ldr	r3, [pc, #72]	; (e30c <am_hal_sysctrl_sleep+0x58>)
    e2c4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e2c8:	07db      	lsls	r3, r3, #31
    e2ca:	d512      	bpl.n	e2f2 <am_hal_sysctrl_sleep+0x3e>
    e2cc:	4a10      	ldr	r2, [pc, #64]	; (e310 <am_hal_sysctrl_sleep+0x5c>)
    e2ce:	6913      	ldr	r3, [r2, #16]
    e2d0:	f023 0304 	bic.w	r3, r3, #4
    e2d4:	6113      	str	r3, [r2, #16]
    e2d6:	f3bf 8f4f 	dsb	sy
    e2da:	4a0e      	ldr	r2, [pc, #56]	; (e314 <am_hal_sysctrl_sleep+0x60>)
    e2dc:	4b0e      	ldr	r3, [pc, #56]	; (e318 <am_hal_sysctrl_sleep+0x64>)
    e2de:	6812      	ldr	r2, [r2, #0]
    e2e0:	601a      	str	r2, [r3, #0]
    e2e2:	bf30      	wfi
    e2e4:	f3bf 8f6f 	isb	sy
    e2e8:	9801      	ldr	r0, [sp, #4]
    e2ea:	f7ff feab 	bl	e044 <am_hal_interrupt_master_set>
    e2ee:	b002      	add	sp, #8
    e2f0:	bd10      	pop	{r4, pc}
    e2f2:	4b0a      	ldr	r3, [pc, #40]	; (e31c <am_hal_sysctrl_sleep+0x68>)
    e2f4:	681a      	ldr	r2, [r3, #0]
    e2f6:	b912      	cbnz	r2, e2fe <am_hal_sysctrl_sleep+0x4a>
    e2f8:	4a09      	ldr	r2, [pc, #36]	; (e320 <am_hal_sysctrl_sleep+0x6c>)
    e2fa:	6812      	ldr	r2, [r2, #0]
    e2fc:	601a      	str	r2, [r3, #0]
    e2fe:	4a04      	ldr	r2, [pc, #16]	; (e310 <am_hal_sysctrl_sleep+0x5c>)
    e300:	6913      	ldr	r3, [r2, #16]
    e302:	f043 0304 	orr.w	r3, r3, #4
    e306:	6113      	str	r3, [r2, #16]
    e308:	e7e5      	b.n	e2d6 <am_hal_sysctrl_sleep+0x22>
    e30a:	bf00      	nop
    e30c:	40020000 	.word	0x40020000
    e310:	e000ed00 	.word	0xe000ed00
    e314:	5fff0000 	.word	0x5fff0000
    e318:	10001134 	.word	0x10001134
    e31c:	10001130 	.word	0x10001130
    e320:	4ffff000 	.word	0x4ffff000

0000e324 <am_hal_uart_initialize>:
    e324:	2801      	cmp	r0, #1
    e326:	d901      	bls.n	e32c <am_hal_uart_initialize+0x8>
    e328:	2005      	movs	r0, #5
    e32a:	4770      	bx	lr
    e32c:	b169      	cbz	r1, e34a <am_hal_uart_initialize+0x26>
    e32e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e330:	2264      	movs	r2, #100	; 0x64
    e332:	4e0e      	ldr	r6, [pc, #56]	; (e36c <am_hal_uart_initialize+0x48>)
    e334:	fb02 f200 	mul.w	r2, r2, r0
    e338:	18b4      	adds	r4, r6, r2
    e33a:	4603      	mov	r3, r0
    e33c:	78e0      	ldrb	r0, [r4, #3]
    e33e:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e342:	b2fd      	uxtb	r5, r7
    e344:	b11d      	cbz	r5, e34e <am_hal_uart_initialize+0x2a>
    e346:	2007      	movs	r0, #7
    e348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e34a:	2006      	movs	r0, #6
    e34c:	4770      	bx	lr
    e34e:	f040 0001 	orr.w	r0, r0, #1
    e352:	70e0      	strb	r0, [r4, #3]
    e354:	58b0      	ldr	r0, [r6, r2]
    e356:	f8df e018 	ldr.w	lr, [pc, #24]	; e370 <am_hal_uart_initialize+0x4c>
    e35a:	f36e 0017 	bfi	r0, lr, #0, #24
    e35e:	50b0      	str	r0, [r6, r2]
    e360:	6263      	str	r3, [r4, #36]	; 0x24
    e362:	7127      	strb	r7, [r4, #4]
    e364:	6625      	str	r5, [r4, #96]	; 0x60
    e366:	4628      	mov	r0, r5
    e368:	600c      	str	r4, [r1, #0]
    e36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e36c:	10007188 	.word	0x10007188
    e370:	00ea9e06 	.word	0x00ea9e06

0000e374 <am_hal_uart_power_control>:
    e374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e378:	6804      	ldr	r4, [r0, #0]
    e37a:	4b36      	ldr	r3, [pc, #216]	; (e454 <am_hal_uart_power_control+0xe0>)
    e37c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e380:	429c      	cmp	r4, r3
    e382:	b083      	sub	sp, #12
    e384:	d003      	beq.n	e38e <am_hal_uart_power_control+0x1a>
    e386:	2002      	movs	r0, #2
    e388:	b003      	add	sp, #12
    e38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e38e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e390:	4605      	mov	r5, r0
    e392:	f107 0008 	add.w	r0, r7, #8
    e396:	4691      	mov	r9, r2
    e398:	460e      	mov	r6, r1
    e39a:	fa5f f880 	uxtb.w	r8, r0
    e39e:	b181      	cbz	r1, e3c2 <am_hal_uart_power_control+0x4e>
    e3a0:	2902      	cmp	r1, #2
    e3a2:	d80c      	bhi.n	e3be <am_hal_uart_power_control+0x4a>
    e3a4:	b992      	cbnz	r2, e3cc <am_hal_uart_power_control+0x58>
    e3a6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e3aa:	371c      	adds	r7, #28
    e3ac:	033f      	lsls	r7, r7, #12
    e3ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e3b2:	647b      	str	r3, [r7, #68]	; 0x44
    e3b4:	4640      	mov	r0, r8
    e3b6:	f7ff ff09 	bl	e1cc <am_hal_pwrctrl_periph_disable>
    e3ba:	2000      	movs	r0, #0
    e3bc:	e7e4      	b.n	e388 <am_hal_uart_power_control+0x14>
    e3be:	2006      	movs	r0, #6
    e3c0:	e7e2      	b.n	e388 <am_hal_uart_power_control+0x14>
    e3c2:	b322      	cbz	r2, e40e <am_hal_uart_power_control+0x9a>
    e3c4:	792b      	ldrb	r3, [r5, #4]
    e3c6:	bb3b      	cbnz	r3, e418 <am_hal_uart_power_control+0xa4>
    e3c8:	2007      	movs	r0, #7
    e3ca:	e7dd      	b.n	e388 <am_hal_uart_power_control+0x14>
    e3cc:	f7ff fe36 	bl	e03c <am_hal_interrupt_master_disable>
    e3d0:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e3d4:	331c      	adds	r3, #28
    e3d6:	031b      	lsls	r3, r3, #12
    e3d8:	9001      	str	r0, [sp, #4]
    e3da:	6a1a      	ldr	r2, [r3, #32]
    e3dc:	60aa      	str	r2, [r5, #8]
    e3de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e3e0:	60ea      	str	r2, [r5, #12]
    e3e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e3e4:	612a      	str	r2, [r5, #16]
    e3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3e8:	616a      	str	r2, [r5, #20]
    e3ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e3ec:	61aa      	str	r2, [r5, #24]
    e3ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e3f0:	61ea      	str	r2, [r5, #28]
    e3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e3f4:	622b      	str	r3, [r5, #32]
    e3f6:	2301      	movs	r3, #1
    e3f8:	712b      	strb	r3, [r5, #4]
    e3fa:	9801      	ldr	r0, [sp, #4]
    e3fc:	f7ff fe22 	bl	e044 <am_hal_interrupt_master_set>
    e400:	682b      	ldr	r3, [r5, #0]
    e402:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e406:	42a3      	cmp	r3, r4
    e408:	d1d4      	bne.n	e3b4 <am_hal_uart_power_control+0x40>
    e40a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e40c:	e7cb      	b.n	e3a6 <am_hal_uart_power_control+0x32>
    e40e:	4640      	mov	r0, r8
    e410:	f7ff feb2 	bl	e178 <am_hal_pwrctrl_periph_enable>
    e414:	4648      	mov	r0, r9
    e416:	e7b7      	b.n	e388 <am_hal_uart_power_control+0x14>
    e418:	4640      	mov	r0, r8
    e41a:	f7ff fead 	bl	e178 <am_hal_pwrctrl_periph_enable>
    e41e:	f7ff fe0d 	bl	e03c <am_hal_interrupt_master_disable>
    e422:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e426:	331c      	adds	r3, #28
    e428:	031b      	lsls	r3, r3, #12
    e42a:	68aa      	ldr	r2, [r5, #8]
    e42c:	9000      	str	r0, [sp, #0]
    e42e:	621a      	str	r2, [r3, #32]
    e430:	68ea      	ldr	r2, [r5, #12]
    e432:	625a      	str	r2, [r3, #36]	; 0x24
    e434:	692a      	ldr	r2, [r5, #16]
    e436:	629a      	str	r2, [r3, #40]	; 0x28
    e438:	696a      	ldr	r2, [r5, #20]
    e43a:	62da      	str	r2, [r3, #44]	; 0x2c
    e43c:	69aa      	ldr	r2, [r5, #24]
    e43e:	631a      	str	r2, [r3, #48]	; 0x30
    e440:	69ea      	ldr	r2, [r5, #28]
    e442:	635a      	str	r2, [r3, #52]	; 0x34
    e444:	6a2a      	ldr	r2, [r5, #32]
    e446:	639a      	str	r2, [r3, #56]	; 0x38
    e448:	9800      	ldr	r0, [sp, #0]
    e44a:	712e      	strb	r6, [r5, #4]
    e44c:	f7ff fdfa 	bl	e044 <am_hal_interrupt_master_set>
    e450:	4630      	mov	r0, r6
    e452:	e799      	b.n	e388 <am_hal_uart_power_control+0x14>
    e454:	01ea9e06 	.word	0x01ea9e06

0000e458 <am_hal_uart_configure>:
    e458:	6803      	ldr	r3, [r0, #0]
    e45a:	4a84      	ldr	r2, [pc, #528]	; (e66c <am_hal_uart_configure+0x214>)
    e45c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e460:	4293      	cmp	r3, r2
    e462:	d001      	beq.n	e468 <am_hal_uart_configure+0x10>
    e464:	2002      	movs	r0, #2
    e466:	4770      	bx	lr
    e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e46c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e46e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e472:	351c      	adds	r5, #28
    e474:	032d      	lsls	r5, r5, #12
    e476:	2700      	movs	r7, #0
    e478:	b084      	sub	sp, #16
    e47a:	632f      	str	r7, [r5, #48]	; 0x30
    e47c:	460e      	mov	r6, r1
    e47e:	4604      	mov	r4, r0
    e480:	f7ff fddc 	bl	e03c <am_hal_interrupt_master_disable>
    e484:	9001      	str	r0, [sp, #4]
    e486:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e488:	f043 0308 	orr.w	r3, r3, #8
    e48c:	862b      	strh	r3, [r5, #48]	; 0x30
    e48e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e490:	2201      	movs	r2, #1
    e492:	f362 1306 	bfi	r3, r2, #4, #3
    e496:	862b      	strh	r3, [r5, #48]	; 0x30
    e498:	9801      	ldr	r0, [sp, #4]
    e49a:	f7ff fdd3 	bl	e044 <am_hal_interrupt_master_set>
    e49e:	f7ff fdcd 	bl	e03c <am_hal_interrupt_master_disable>
    e4a2:	9002      	str	r0, [sp, #8]
    e4a4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4a6:	f367 0300 	bfi	r3, r7, #0, #1
    e4aa:	862b      	strh	r3, [r5, #48]	; 0x30
    e4ac:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4ae:	f367 2349 	bfi	r3, r7, #9, #1
    e4b2:	862b      	strh	r3, [r5, #48]	; 0x30
    e4b4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e4b6:	f367 2308 	bfi	r3, r7, #8, #1
    e4ba:	862b      	strh	r3, [r5, #48]	; 0x30
    e4bc:	9802      	ldr	r0, [sp, #8]
    e4be:	f7ff fdc1 	bl	e044 <am_hal_interrupt_master_set>
    e4c2:	4a6b      	ldr	r2, [pc, #428]	; (e670 <am_hal_uart_configure+0x218>)
    e4c4:	6833      	ldr	r3, [r6, #0]
    e4c6:	68d2      	ldr	r2, [r2, #12]
    e4c8:	b2d2      	uxtb	r2, r2
    e4ca:	2a12      	cmp	r2, #18
    e4cc:	d00b      	beq.n	e4e6 <am_hal_uart_configure+0x8e>
    e4ce:	4a68      	ldr	r2, [pc, #416]	; (e670 <am_hal_uart_configure+0x218>)
    e4d0:	68d2      	ldr	r2, [r2, #12]
    e4d2:	b2d2      	uxtb	r2, r2
    e4d4:	2a20      	cmp	r2, #32
    e4d6:	d90a      	bls.n	e4ee <am_hal_uart_configure+0x96>
    e4d8:	4a66      	ldr	r2, [pc, #408]	; (e674 <am_hal_uart_configure+0x21c>)
    e4da:	4293      	cmp	r3, r2
    e4dc:	d907      	bls.n	e4ee <am_hal_uart_configure+0x96>
    e4de:	4866      	ldr	r0, [pc, #408]	; (e678 <am_hal_uart_configure+0x220>)
    e4e0:	b004      	add	sp, #16
    e4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4e6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e4ea:	d8f8      	bhi.n	e4de <am_hal_uart_configure+0x86>
    e4ec:	e7ef      	b.n	e4ce <am_hal_uart_configure+0x76>
    e4ee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e4f0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    e4f4:	3a01      	subs	r2, #1
    e4f6:	2a03      	cmp	r2, #3
    e4f8:	d852      	bhi.n	e5a0 <am_hal_uart_configure+0x148>
    e4fa:	e8df f002 	tbb	[pc, r2]
    e4fe:	020f      	.short	0x020f
    e500:	1215      	.short	0x1215
    e502:	4a5e      	ldr	r2, [pc, #376]	; (e67c <am_hal_uart_configure+0x224>)
    e504:	495e      	ldr	r1, [pc, #376]	; (e680 <am_hal_uart_configure+0x228>)
    e506:	011b      	lsls	r3, r3, #4
    e508:	fbb2 f2f3 	udiv	r2, r2, r3
    e50c:	fbb1 f3f3 	udiv	r3, r1, r3
    e510:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e514:	b95b      	cbnz	r3, e52e <am_hal_uart_configure+0xd6>
    e516:	6623      	str	r3, [r4, #96]	; 0x60
    e518:	4857      	ldr	r0, [pc, #348]	; (e678 <am_hal_uart_configure+0x220>)
    e51a:	e7e1      	b.n	e4e0 <am_hal_uart_configure+0x88>
    e51c:	4a59      	ldr	r2, [pc, #356]	; (e684 <am_hal_uart_configure+0x22c>)
    e51e:	495a      	ldr	r1, [pc, #360]	; (e688 <am_hal_uart_configure+0x230>)
    e520:	e7f1      	b.n	e506 <am_hal_uart_configure+0xae>
    e522:	4a5a      	ldr	r2, [pc, #360]	; (e68c <am_hal_uart_configure+0x234>)
    e524:	495a      	ldr	r1, [pc, #360]	; (e690 <am_hal_uart_configure+0x238>)
    e526:	e7ee      	b.n	e506 <am_hal_uart_configure+0xae>
    e528:	4a5a      	ldr	r2, [pc, #360]	; (e694 <am_hal_uart_configure+0x23c>)
    e52a:	495b      	ldr	r1, [pc, #364]	; (e698 <am_hal_uart_configure+0x240>)
    e52c:	e7eb      	b.n	e506 <am_hal_uart_configure+0xae>
    e52e:	0890      	lsrs	r0, r2, #2
    e530:	626b      	str	r3, [r5, #36]	; 0x24
    e532:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e536:	626b      	str	r3, [r5, #36]	; 0x24
    e538:	fbb1 f1f0 	udiv	r1, r1, r0
    e53c:	62aa      	str	r2, [r5, #40]	; 0x28
    e53e:	6621      	str	r1, [r4, #96]	; 0x60
    e540:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e542:	f36f 338e 	bfc	r3, #14, #1
    e546:	862b      	strh	r3, [r5, #48]	; 0x30
    e548:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e54a:	f36f 33cf 	bfc	r3, #15, #1
    e54e:	862b      	strh	r3, [r5, #48]	; 0x30
    e550:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e552:	6933      	ldr	r3, [r6, #16]
    e554:	4313      	orrs	r3, r2
    e556:	632b      	str	r3, [r5, #48]	; 0x30
    e558:	6973      	ldr	r3, [r6, #20]
    e55a:	636b      	str	r3, [r5, #52]	; 0x34
    e55c:	6871      	ldr	r1, [r6, #4]
    e55e:	68b3      	ldr	r3, [r6, #8]
    e560:	68f2      	ldr	r2, [r6, #12]
    e562:	430b      	orrs	r3, r1
    e564:	f043 0310 	orr.w	r3, r3, #16
    e568:	4313      	orrs	r3, r2
    e56a:	62eb      	str	r3, [r5, #44]	; 0x2c
    e56c:	f7ff fd66 	bl	e03c <am_hal_interrupt_master_disable>
    e570:	9003      	str	r0, [sp, #12]
    e572:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e574:	f043 0301 	orr.w	r3, r3, #1
    e578:	862b      	strh	r3, [r5, #48]	; 0x30
    e57a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e57c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e580:	862b      	strh	r3, [r5, #48]	; 0x30
    e582:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e588:	862b      	strh	r3, [r5, #48]	; 0x30
    e58a:	9803      	ldr	r0, [sp, #12]
    e58c:	f7ff fd5a 	bl	e044 <am_hal_interrupt_master_set>
    e590:	6825      	ldr	r5, [r4, #0]
    e592:	4b36      	ldr	r3, [pc, #216]	; (e66c <am_hal_uart_configure+0x214>)
    e594:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e598:	429d      	cmp	r5, r3
    e59a:	d005      	beq.n	e5a8 <am_hal_uart_configure+0x150>
    e59c:	2000      	movs	r0, #0
    e59e:	e79f      	b.n	e4e0 <am_hal_uart_configure+0x88>
    e5a0:	2300      	movs	r3, #0
    e5a2:	6623      	str	r3, [r4, #96]	; 0x60
    e5a4:	483d      	ldr	r0, [pc, #244]	; (e69c <am_hal_uart_configure+0x244>)
    e5a6:	e79b      	b.n	e4e0 <am_hal_uart_configure+0x88>
    e5a8:	69b1      	ldr	r1, [r6, #24]
    e5aa:	6a37      	ldr	r7, [r6, #32]
    e5ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e5b0:	b109      	cbz	r1, e5b6 <am_hal_uart_configure+0x15e>
    e5b2:	69f3      	ldr	r3, [r6, #28]
    e5b4:	bb3b      	cbnz	r3, e606 <am_hal_uart_configure+0x1ae>
    e5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e5b8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e5bc:	f103 021c 	add.w	r2, r3, #28
    e5c0:	0312      	lsls	r2, r2, #12
    e5c2:	2100      	movs	r1, #0
    e5c4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e5c8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e5ca:	f021 0120 	bic.w	r1, r1, #32
    e5ce:	6391      	str	r1, [r2, #56]	; 0x38
    e5d0:	b1b7      	cbz	r7, e600 <am_hal_uart_configure+0x1a8>
    e5d2:	f1b8 0f00 	cmp.w	r8, #0
    e5d6:	d12e      	bne.n	e636 <am_hal_uart_configure+0x1de>
    e5d8:	6823      	ldr	r3, [r4, #0]
    e5da:	4a24      	ldr	r2, [pc, #144]	; (e66c <am_hal_uart_configure+0x214>)
    e5dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e5e0:	2100      	movs	r1, #0
    e5e2:	4293      	cmp	r3, r2
    e5e4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e5e8:	d1d8      	bne.n	e59c <am_hal_uart_configure+0x144>
    e5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e5ec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e5f0:	331c      	adds	r3, #28
    e5f2:	031b      	lsls	r3, r3, #12
    e5f4:	2000      	movs	r0, #0
    e5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e5f8:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e5fc:	639a      	str	r2, [r3, #56]	; 0x38
    e5fe:	e76f      	b.n	e4e0 <am_hal_uart_configure+0x88>
    e600:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e604:	e7f4      	b.n	e5f0 <am_hal_uart_configure+0x198>
    e606:	2201      	movs	r2, #1
    e608:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e60c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e610:	f000 fa80 	bl	eb14 <am_hal_queue_init>
    e614:	6823      	ldr	r3, [r4, #0]
    e616:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e61a:	42ab      	cmp	r3, r5
    e61c:	d1be      	bne.n	e59c <am_hal_uart_configure+0x144>
    e61e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e620:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e624:	331c      	adds	r3, #28
    e626:	031b      	lsls	r3, r3, #12
    e628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e62a:	f042 0220 	orr.w	r2, r2, #32
    e62e:	639a      	str	r2, [r3, #56]	; 0x38
    e630:	2f00      	cmp	r7, #0
    e632:	d1ce      	bne.n	e5d2 <am_hal_uart_configure+0x17a>
    e634:	e7d0      	b.n	e5d8 <am_hal_uart_configure+0x180>
    e636:	2201      	movs	r2, #1
    e638:	4643      	mov	r3, r8
    e63a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e63e:	4639      	mov	r1, r7
    e640:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e644:	f000 fa66 	bl	eb14 <am_hal_queue_init>
    e648:	6823      	ldr	r3, [r4, #0]
    e64a:	4a08      	ldr	r2, [pc, #32]	; (e66c <am_hal_uart_configure+0x214>)
    e64c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e650:	4293      	cmp	r3, r2
    e652:	d1a3      	bne.n	e59c <am_hal_uart_configure+0x144>
    e654:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e656:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e65a:	331c      	adds	r3, #28
    e65c:	031b      	lsls	r3, r3, #12
    e65e:	2000      	movs	r0, #0
    e660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e662:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e666:	639a      	str	r2, [r3, #56]	; 0x38
    e668:	e73a      	b.n	e4e0 <am_hal_uart_configure+0x88>
    e66a:	bf00      	nop
    e66c:	01ea9e06 	.word	0x01ea9e06
    e670:	40020000 	.word	0x40020000
    e674:	0016e360 	.word	0x0016e360
    e678:	08000003 	.word	0x08000003
    e67c:	2dc6c000 	.word	0x2dc6c000
    e680:	00b71b00 	.word	0x00b71b00
    e684:	5b8d8000 	.word	0x5b8d8000
    e688:	016e3600 	.word	0x016e3600
    e68c:	0b71b000 	.word	0x0b71b000
    e690:	002dc6c0 	.word	0x002dc6c0
    e694:	16e36000 	.word	0x16e36000
    e698:	005b8d80 	.word	0x005b8d80
    e69c:	08000002 	.word	0x08000002

0000e6a0 <am_hal_uart_transfer>:
    e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a4:	680f      	ldr	r7, [r1, #0]
    e6a6:	b091      	sub	sp, #68	; 0x44
    e6a8:	4605      	mov	r5, r0
    e6aa:	b13f      	cbz	r7, e6bc <am_hal_uart_transfer+0x1c>
    e6ac:	2f01      	cmp	r7, #1
    e6ae:	bf18      	it	ne
    e6b0:	2707      	movne	r7, #7
    e6b2:	d024      	beq.n	e6fe <am_hal_uart_transfer+0x5e>
    e6b4:	4638      	mov	r0, r7
    e6b6:	b011      	add	sp, #68	; 0x44
    e6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6bc:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e6c0:	690b      	ldr	r3, [r1, #16]
    e6c2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e6c6:	688e      	ldr	r6, [r1, #8]
    e6c8:	9300      	str	r3, [sp, #0]
    e6ca:	f1b9 0f00 	cmp.w	r9, #0
    e6ce:	d031      	beq.n	e734 <am_hal_uart_transfer+0x94>
    e6d0:	2e00      	cmp	r6, #0
    e6d2:	f000 819c 	beq.w	ea0e <am_hal_uart_transfer+0x36e>
    e6d6:	2800      	cmp	r0, #0
    e6d8:	f000 8097 	beq.w	e80a <am_hal_uart_transfer+0x16a>
    e6dc:	6803      	ldr	r3, [r0, #0]
    e6de:	4aa9      	ldr	r2, [pc, #676]	; (e984 <am_hal_uart_transfer+0x2e4>)
    e6e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6e4:	4293      	cmp	r3, r2
    e6e6:	f000 8092 	beq.w	e80e <am_hal_uart_transfer+0x16e>
    e6ea:	46b8      	mov	r8, r7
    e6ec:	9b00      	ldr	r3, [sp, #0]
    e6ee:	b10b      	cbz	r3, e6f4 <am_hal_uart_transfer+0x54>
    e6f0:	f8c3 8000 	str.w	r8, [r3]
    e6f4:	2702      	movs	r7, #2
    e6f6:	4638      	mov	r0, r7
    e6f8:	b011      	add	sp, #68	; 0x44
    e6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6fe:	1d0b      	adds	r3, r1, #4
    e700:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e704:	f1b9 0f00 	cmp.w	r9, #0
    e708:	d043      	beq.n	e792 <am_hal_uart_transfer+0xf2>
    e70a:	2f00      	cmp	r7, #0
    e70c:	f000 8185 	beq.w	ea1a <am_hal_uart_transfer+0x37a>
    e710:	2800      	cmp	r0, #0
    e712:	f000 80eb 	beq.w	e8ec <am_hal_uart_transfer+0x24c>
    e716:	6802      	ldr	r2, [r0, #0]
    e718:	499a      	ldr	r1, [pc, #616]	; (e984 <am_hal_uart_transfer+0x2e4>)
    e71a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e71e:	428a      	cmp	r2, r1
    e720:	f000 80e7 	beq.w	e8f2 <am_hal_uart_transfer+0x252>
    e724:	2600      	movs	r6, #0
    e726:	2702      	movs	r7, #2
    e728:	f1bb 0f00 	cmp.w	fp, #0
    e72c:	d0c2      	beq.n	e6b4 <am_hal_uart_transfer+0x14>
    e72e:	f8cb 6000 	str.w	r6, [fp]
    e732:	e7bf      	b.n	e6b4 <am_hal_uart_transfer+0x14>
    e734:	2800      	cmp	r0, #0
    e736:	d0dd      	beq.n	e6f4 <am_hal_uart_transfer+0x54>
    e738:	6803      	ldr	r3, [r0, #0]
    e73a:	4a92      	ldr	r2, [pc, #584]	; (e984 <am_hal_uart_transfer+0x2e4>)
    e73c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e740:	4293      	cmp	r3, r2
    e742:	d1d7      	bne.n	e6f4 <am_hal_uart_transfer+0x54>
    e744:	9b00      	ldr	r3, [sp, #0]
    e746:	b10b      	cbz	r3, e74c <am_hal_uart_transfer+0xac>
    e748:	f8c3 9000 	str.w	r9, [r3]
    e74c:	b1fe      	cbz	r6, e78e <am_hal_uart_transfer+0xee>
    e74e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e752:	2b00      	cmp	r3, #0
    e754:	f040 8165 	bne.w	ea22 <am_hal_uart_transfer+0x382>
    e758:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e75a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e75e:	311c      	adds	r1, #28
    e760:	0309      	lsls	r1, r1, #12
    e762:	698a      	ldr	r2, [r1, #24]
    e764:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e768:	2a00      	cmp	r2, #0
    e76a:	f040 818d 	bne.w	ea88 <am_hal_uart_transfer+0x3e8>
    e76e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    e772:	e003      	b.n	e77c <am_hal_uart_transfer+0xdc>
    e774:	6988      	ldr	r0, [r1, #24]
    e776:	0680      	lsls	r0, r0, #26
    e778:	f100 8151 	bmi.w	ea1e <am_hal_uart_transfer+0x37e>
    e77c:	3201      	adds	r2, #1
    e77e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e782:	6008      	str	r0, [r1, #0]
    e784:	4296      	cmp	r6, r2
    e786:	d1f5      	bne.n	e774 <am_hal_uart_transfer+0xd4>
    e788:	9b00      	ldr	r3, [sp, #0]
    e78a:	b103      	cbz	r3, e78e <am_hal_uart_transfer+0xee>
    e78c:	601e      	str	r6, [r3, #0]
    e78e:	2700      	movs	r7, #0
    e790:	e790      	b.n	e6b4 <am_hal_uart_transfer+0x14>
    e792:	2800      	cmp	r0, #0
    e794:	d0ae      	beq.n	e6f4 <am_hal_uart_transfer+0x54>
    e796:	6802      	ldr	r2, [r0, #0]
    e798:	497a      	ldr	r1, [pc, #488]	; (e984 <am_hal_uart_transfer+0x2e4>)
    e79a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e79e:	428a      	cmp	r2, r1
    e7a0:	d1a8      	bne.n	e6f4 <am_hal_uart_transfer+0x54>
    e7a2:	f1bb 0f00 	cmp.w	fp, #0
    e7a6:	d001      	beq.n	e7ac <am_hal_uart_transfer+0x10c>
    e7a8:	f8cb 9000 	str.w	r9, [fp]
    e7ac:	2f00      	cmp	r7, #0
    e7ae:	d0ee      	beq.n	e78e <am_hal_uart_transfer+0xee>
    e7b0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e7b4:	2c00      	cmp	r4, #0
    e7b6:	f040 816c 	bne.w	ea92 <am_hal_uart_transfer+0x3f2>
    e7ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e7bc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e7c0:	321c      	adds	r2, #28
    e7c2:	0312      	lsls	r2, r2, #12
    e7c4:	6990      	ldr	r0, [r2, #24]
    e7c6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e7ca:	2800      	cmp	r0, #0
    e7cc:	f040 819d 	bne.w	eb0a <am_hal_uart_transfer+0x46a>
    e7d0:	6811      	ldr	r1, [r2, #0]
    e7d2:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e7d6:	bf08      	it	eq
    e7d8:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    e7dc:	d008      	beq.n	e7f0 <am_hal_uart_transfer+0x150>
    e7de:	e190      	b.n	eb02 <am_hal_uart_transfer+0x462>
    e7e0:	6991      	ldr	r1, [r2, #24]
    e7e2:	06c8      	lsls	r0, r1, #27
    e7e4:	d409      	bmi.n	e7fa <am_hal_uart_transfer+0x15a>
    e7e6:	6811      	ldr	r1, [r2, #0]
    e7e8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e7ec:	f040 814e 	bne.w	ea8c <am_hal_uart_transfer+0x3ec>
    e7f0:	3401      	adds	r4, #1
    e7f2:	42a7      	cmp	r7, r4
    e7f4:	f803 1f01 	strb.w	r1, [r3, #1]!
    e7f8:	d1f2      	bne.n	e7e0 <am_hal_uart_transfer+0x140>
    e7fa:	2700      	movs	r7, #0
    e7fc:	f1bb 0f00 	cmp.w	fp, #0
    e800:	f43f af58 	beq.w	e6b4 <am_hal_uart_transfer+0x14>
    e804:	f8cb 4000 	str.w	r4, [fp]
    e808:	e754      	b.n	e6b4 <am_hal_uart_transfer+0x14>
    e80a:	4680      	mov	r8, r0
    e80c:	e76e      	b.n	e6ec <am_hal_uart_transfer+0x4c>
    e80e:	9301      	str	r3, [sp, #4]
    e810:	4651      	mov	r1, sl
    e812:	46bb      	mov	fp, r7
    e814:	46b8      	mov	r8, r7
    e816:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e81a:	b9f2      	cbnz	r2, e85a <am_hal_uart_transfer+0x1ba>
    e81c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e81e:	b19e      	cbz	r6, e848 <am_hal_uart_transfer+0x1a8>
    e820:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e824:	321c      	adds	r2, #28
    e826:	0312      	lsls	r2, r2, #12
    e828:	3901      	subs	r1, #1
    e82a:	6994      	ldr	r4, [r2, #24]
    e82c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e830:	b11c      	cbz	r4, e83a <am_hal_uart_transfer+0x19a>
    e832:	e047      	b.n	e8c4 <am_hal_uart_transfer+0x224>
    e834:	6993      	ldr	r3, [r2, #24]
    e836:	069b      	lsls	r3, r3, #26
    e838:	d441      	bmi.n	e8be <am_hal_uart_transfer+0x21e>
    e83a:	3401      	adds	r4, #1
    e83c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e840:	6013      	str	r3, [r2, #0]
    e842:	42b4      	cmp	r4, r6
    e844:	d1f6      	bne.n	e834 <am_hal_uart_transfer+0x194>
    e846:	44a0      	add	r8, r4
    e848:	9b00      	ldr	r3, [sp, #0]
    e84a:	2b00      	cmp	r3, #0
    e84c:	d09f      	beq.n	e78e <am_hal_uart_transfer+0xee>
    e84e:	4638      	mov	r0, r7
    e850:	f8c3 8000 	str.w	r8, [r3]
    e854:	b011      	add	sp, #68	; 0x44
    e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e85a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e85c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e85e:	1b14      	subs	r4, r2, r4
    e860:	42b4      	cmp	r4, r6
    e862:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e866:	bf28      	it	cs
    e868:	4634      	movcs	r4, r6
    e86a:	4622      	mov	r2, r4
    e86c:	4618      	mov	r0, r3
    e86e:	9302      	str	r3, [sp, #8]
    e870:	f000 f95c 	bl	eb2c <am_hal_queue_item_add>
    e874:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e876:	9303      	str	r3, [sp, #12]
    e878:	f7ff fbe0 	bl	e03c <am_hal_interrupt_master_disable>
    e87c:	9b03      	ldr	r3, [sp, #12]
    e87e:	9008      	str	r0, [sp, #32]
    e880:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e884:	331c      	adds	r3, #28
    e886:	031b      	lsls	r3, r3, #12
    e888:	9303      	str	r3, [sp, #12]
    e88a:	e00d      	b.n	e8a8 <am_hal_uart_transfer+0x208>
    e88c:	f000 f986 	bl	eb9c <am_hal_queue_item_get>
    e890:	b190      	cbz	r0, e8b8 <am_hal_uart_transfer+0x218>
    e892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e894:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e898:	331c      	adds	r3, #28
    e89a:	031b      	lsls	r3, r3, #12
    e89c:	699a      	ldr	r2, [r3, #24]
    e89e:	0692      	lsls	r2, r2, #26
    e8a0:	bf5c      	itt	pl
    e8a2:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e8a6:	601a      	strpl	r2, [r3, #0]
    e8a8:	9b03      	ldr	r3, [sp, #12]
    e8aa:	9802      	ldr	r0, [sp, #8]
    e8ac:	699b      	ldr	r3, [r3, #24]
    e8ae:	069b      	lsls	r3, r3, #26
    e8b0:	f04f 0201 	mov.w	r2, #1
    e8b4:	a907      	add	r1, sp, #28
    e8b6:	d5e9      	bpl.n	e88c <am_hal_uart_transfer+0x1ec>
    e8b8:	9808      	ldr	r0, [sp, #32]
    e8ba:	f7ff fbc3 	bl	e044 <am_hal_interrupt_master_set>
    e8be:	1b36      	subs	r6, r6, r4
    e8c0:	44a0      	add	r8, r4
    e8c2:	d0c1      	beq.n	e848 <am_hal_uart_transfer+0x1a8>
    e8c4:	2010      	movs	r0, #16
    e8c6:	f7ff fa65 	bl	dd94 <am_hal_flash_delay>
    e8ca:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e8ce:	d001      	beq.n	e8d4 <am_hal_uart_transfer+0x234>
    e8d0:	f10b 0b01 	add.w	fp, fp, #1
    e8d4:	45d9      	cmp	r9, fp
    e8d6:	d9b7      	bls.n	e848 <am_hal_uart_transfer+0x1a8>
    e8d8:	682a      	ldr	r2, [r5, #0]
    e8da:	9b01      	ldr	r3, [sp, #4]
    e8dc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e8e0:	429a      	cmp	r2, r3
    e8e2:	eb0a 0108 	add.w	r1, sl, r8
    e8e6:	f47f af01 	bne.w	e6ec <am_hal_uart_transfer+0x4c>
    e8ea:	e794      	b.n	e816 <am_hal_uart_transfer+0x176>
    e8ec:	4606      	mov	r6, r0
    e8ee:	2702      	movs	r7, #2
    e8f0:	e71a      	b.n	e728 <am_hal_uart_transfer+0x88>
    e8f2:	9200      	str	r2, [sp, #0]
    e8f4:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e8f8:	f04f 0a00 	mov.w	sl, #0
    e8fc:	9202      	str	r2, [sp, #8]
    e8fe:	465a      	mov	r2, fp
    e900:	4698      	mov	r8, r3
    e902:	469b      	mov	fp, r3
    e904:	4656      	mov	r6, sl
    e906:	4613      	mov	r3, r2
    e908:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    e90c:	2a00      	cmp	r2, #0
    e90e:	d152      	bne.n	e9b6 <am_hal_uart_transfer+0x316>
    e910:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e912:	b3a7      	cbz	r7, e97e <am_hal_uart_transfer+0x2de>
    e914:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e918:	311c      	adds	r1, #28
    e91a:	0309      	lsls	r1, r1, #12
    e91c:	698a      	ldr	r2, [r1, #24]
    e91e:	06d0      	lsls	r0, r2, #27
    e920:	d432      	bmi.n	e988 <am_hal_uart_transfer+0x2e8>
    e922:	680a      	ldr	r2, [r1, #0]
    e924:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    e928:	f040 80aa 	bne.w	ea80 <am_hal_uart_transfer+0x3e0>
    e92c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    e930:	e006      	b.n	e940 <am_hal_uart_transfer+0x2a0>
    e932:	698a      	ldr	r2, [r1, #24]
    e934:	06d2      	lsls	r2, r2, #27
    e936:	d41f      	bmi.n	e978 <am_hal_uart_transfer+0x2d8>
    e938:	680a      	ldr	r2, [r1, #0]
    e93a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    e93e:	d161      	bne.n	ea04 <am_hal_uart_transfer+0x364>
    e940:	3401      	adds	r4, #1
    e942:	42bc      	cmp	r4, r7
    e944:	f808 2f01 	strb.w	r2, [r8, #1]!
    e948:	d1f3      	bne.n	e932 <am_hal_uart_transfer+0x292>
    e94a:	469b      	mov	fp, r3
    e94c:	4426      	add	r6, r4
    e94e:	f1bb 0f00 	cmp.w	fp, #0
    e952:	f43f af1c 	beq.w	e78e <am_hal_uart_transfer+0xee>
    e956:	f8cb 6000 	str.w	r6, [fp]
    e95a:	2700      	movs	r7, #0
    e95c:	e6aa      	b.n	e6b4 <am_hal_uart_transfer+0x14>
    e95e:	9807      	ldr	r0, [sp, #28]
    e960:	f7ff fb70 	bl	e044 <am_hal_interrupt_master_set>
    e964:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    e966:	9802      	ldr	r0, [sp, #8]
    e968:	42bc      	cmp	r4, r7
    e96a:	bf28      	it	cs
    e96c:	463c      	movcs	r4, r7
    e96e:	4641      	mov	r1, r8
    e970:	4622      	mov	r2, r4
    e972:	f000 f913 	bl	eb9c <am_hal_queue_item_get>
    e976:	9b01      	ldr	r3, [sp, #4]
    e978:	1b3f      	subs	r7, r7, r4
    e97a:	4426      	add	r6, r4
    e97c:	d104      	bne.n	e988 <am_hal_uart_transfer+0x2e8>
    e97e:	469b      	mov	fp, r3
    e980:	e7e5      	b.n	e94e <am_hal_uart_transfer+0x2ae>
    e982:	bf00      	nop
    e984:	01ea9e06 	.word	0x01ea9e06
    e988:	2010      	movs	r0, #16
    e98a:	9301      	str	r3, [sp, #4]
    e98c:	f7ff fa02 	bl	dd94 <am_hal_flash_delay>
    e990:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    e994:	9b01      	ldr	r3, [sp, #4]
    e996:	d001      	beq.n	e99c <am_hal_uart_transfer+0x2fc>
    e998:	f10a 0a01 	add.w	sl, sl, #1
    e99c:	45d1      	cmp	r9, sl
    e99e:	d9ee      	bls.n	e97e <am_hal_uart_transfer+0x2de>
    e9a0:	682a      	ldr	r2, [r5, #0]
    e9a2:	9900      	ldr	r1, [sp, #0]
    e9a4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e9a8:	428a      	cmp	r2, r1
    e9aa:	eb0b 0806 	add.w	r8, fp, r6
    e9ae:	d0ab      	beq.n	e908 <am_hal_uart_transfer+0x268>
    e9b0:	469b      	mov	fp, r3
    e9b2:	2702      	movs	r7, #2
    e9b4:	e6b8      	b.n	e728 <am_hal_uart_transfer+0x88>
    e9b6:	9301      	str	r3, [sp, #4]
    e9b8:	f7ff fb40 	bl	e03c <am_hal_interrupt_master_disable>
    e9bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e9be:	9007      	str	r0, [sp, #28]
    e9c0:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    e9c4:	301c      	adds	r0, #28
    e9c6:	9b01      	ldr	r3, [sp, #4]
    e9c8:	0300      	lsls	r0, r0, #12
    e9ca:	ac08      	add	r4, sp, #32
    e9cc:	2200      	movs	r2, #0
    e9ce:	6981      	ldr	r1, [r0, #24]
    e9d0:	06c9      	lsls	r1, r1, #27
    e9d2:	d409      	bmi.n	e9e8 <am_hal_uart_transfer+0x348>
    e9d4:	6801      	ldr	r1, [r0, #0]
    e9d6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e9da:	f102 0201 	add.w	r2, r2, #1
    e9de:	d118      	bne.n	ea12 <am_hal_uart_transfer+0x372>
    e9e0:	2a20      	cmp	r2, #32
    e9e2:	f804 1b01 	strb.w	r1, [r4], #1
    e9e6:	d1f2      	bne.n	e9ce <am_hal_uart_transfer+0x32e>
    e9e8:	a908      	add	r1, sp, #32
    e9ea:	9802      	ldr	r0, [sp, #8]
    e9ec:	9301      	str	r3, [sp, #4]
    e9ee:	f000 f89d 	bl	eb2c <am_hal_queue_item_add>
    e9f2:	9b01      	ldr	r3, [sp, #4]
    e9f4:	2800      	cmp	r0, #0
    e9f6:	d1b2      	bne.n	e95e <am_hal_uart_transfer+0x2be>
    e9f8:	4f45      	ldr	r7, [pc, #276]	; (eb10 <am_hal_uart_transfer+0x470>)
    e9fa:	469b      	mov	fp, r3
    e9fc:	9807      	ldr	r0, [sp, #28]
    e9fe:	f7ff fb21 	bl	e044 <am_hal_interrupt_master_set>
    ea02:	e691      	b.n	e728 <am_hal_uart_transfer+0x88>
    ea04:	469b      	mov	fp, r3
    ea06:	4426      	add	r6, r4
    ea08:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea0c:	e68c      	b.n	e728 <am_hal_uart_transfer+0x88>
    ea0e:	46b8      	mov	r8, r7
    ea10:	e71a      	b.n	e848 <am_hal_uart_transfer+0x1a8>
    ea12:	469b      	mov	fp, r3
    ea14:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea18:	e7f0      	b.n	e9fc <am_hal_uart_transfer+0x35c>
    ea1a:	463e      	mov	r6, r7
    ea1c:	e797      	b.n	e94e <am_hal_uart_transfer+0x2ae>
    ea1e:	4616      	mov	r6, r2
    ea20:	e6b2      	b.n	e788 <am_hal_uart_transfer+0xe8>
    ea22:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    ea24:	6bab      	ldr	r3, [r5, #56]	; 0x38
    ea26:	1a9b      	subs	r3, r3, r2
    ea28:	429e      	cmp	r6, r3
    ea2a:	bf28      	it	cs
    ea2c:	461e      	movcs	r6, r3
    ea2e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ea32:	4651      	mov	r1, sl
    ea34:	4632      	mov	r2, r6
    ea36:	4620      	mov	r0, r4
    ea38:	f000 f878 	bl	eb2c <am_hal_queue_item_add>
    ea3c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ea3e:	f7ff fafd 	bl	e03c <am_hal_interrupt_master_disable>
    ea42:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    ea46:	371c      	adds	r7, #28
    ea48:	033f      	lsls	r7, r7, #12
    ea4a:	9005      	str	r0, [sp, #20]
    ea4c:	e00d      	b.n	ea6a <am_hal_uart_transfer+0x3ca>
    ea4e:	f000 f8a5 	bl	eb9c <am_hal_queue_item_get>
    ea52:	b188      	cbz	r0, ea78 <am_hal_uart_transfer+0x3d8>
    ea54:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea56:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ea5a:	331c      	adds	r3, #28
    ea5c:	031b      	lsls	r3, r3, #12
    ea5e:	699a      	ldr	r2, [r3, #24]
    ea60:	0692      	lsls	r2, r2, #26
    ea62:	bf5c      	itt	pl
    ea64:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    ea68:	601a      	strpl	r2, [r3, #0]
    ea6a:	69bb      	ldr	r3, [r7, #24]
    ea6c:	069b      	lsls	r3, r3, #26
    ea6e:	f04f 0201 	mov.w	r2, #1
    ea72:	a908      	add	r1, sp, #32
    ea74:	4620      	mov	r0, r4
    ea76:	d5ea      	bpl.n	ea4e <am_hal_uart_transfer+0x3ae>
    ea78:	9805      	ldr	r0, [sp, #20]
    ea7a:	f7ff fae3 	bl	e044 <am_hal_interrupt_master_set>
    ea7e:	e683      	b.n	e788 <am_hal_uart_transfer+0xe8>
    ea80:	469b      	mov	fp, r3
    ea82:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea86:	e64f      	b.n	e728 <am_hal_uart_transfer+0x88>
    ea88:	461e      	mov	r6, r3
    ea8a:	e67d      	b.n	e788 <am_hal_uart_transfer+0xe8>
    ea8c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ea90:	e6b4      	b.n	e7fc <am_hal_uart_transfer+0x15c>
    ea92:	9300      	str	r3, [sp, #0]
    ea94:	f7ff fad2 	bl	e03c <am_hal_interrupt_master_disable>
    ea98:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ea9a:	9006      	str	r0, [sp, #24]
    ea9c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    eaa0:	321c      	adds	r2, #28
    eaa2:	0311      	lsls	r1, r2, #12
    eaa4:	a808      	add	r0, sp, #32
    eaa6:	2200      	movs	r2, #0
    eaa8:	9b00      	ldr	r3, [sp, #0]
    eaaa:	e009      	b.n	eac0 <am_hal_uart_transfer+0x420>
    eaac:	680c      	ldr	r4, [r1, #0]
    eaae:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    eab2:	f102 0201 	add.w	r2, r2, #1
    eab6:	d121      	bne.n	eafc <am_hal_uart_transfer+0x45c>
    eab8:	2a20      	cmp	r2, #32
    eaba:	f800 4b01 	strb.w	r4, [r0], #1
    eabe:	d002      	beq.n	eac6 <am_hal_uart_transfer+0x426>
    eac0:	698c      	ldr	r4, [r1, #24]
    eac2:	06e4      	lsls	r4, r4, #27
    eac4:	d5f2      	bpl.n	eaac <am_hal_uart_transfer+0x40c>
    eac6:	f105 0648 	add.w	r6, r5, #72	; 0x48
    eaca:	a908      	add	r1, sp, #32
    eacc:	4630      	mov	r0, r6
    eace:	9300      	str	r3, [sp, #0]
    ead0:	f000 f82c 	bl	eb2c <am_hal_queue_item_add>
    ead4:	b920      	cbnz	r0, eae0 <am_hal_uart_transfer+0x440>
    ead6:	4f0e      	ldr	r7, [pc, #56]	; (eb10 <am_hal_uart_transfer+0x470>)
    ead8:	9806      	ldr	r0, [sp, #24]
    eada:	f7ff fab3 	bl	e044 <am_hal_interrupt_master_set>
    eade:	e5e9      	b.n	e6b4 <am_hal_uart_transfer+0x14>
    eae0:	9806      	ldr	r0, [sp, #24]
    eae2:	f7ff faaf 	bl	e044 <am_hal_interrupt_master_set>
    eae6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    eae8:	9b00      	ldr	r3, [sp, #0]
    eaea:	42bc      	cmp	r4, r7
    eaec:	bf28      	it	cs
    eaee:	463c      	movcs	r4, r7
    eaf0:	4619      	mov	r1, r3
    eaf2:	4630      	mov	r0, r6
    eaf4:	4622      	mov	r2, r4
    eaf6:	f000 f851 	bl	eb9c <am_hal_queue_item_get>
    eafa:	e67e      	b.n	e7fa <am_hal_uart_transfer+0x15a>
    eafc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb00:	e7ea      	b.n	ead8 <am_hal_uart_transfer+0x438>
    eb02:	4604      	mov	r4, r0
    eb04:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb08:	e678      	b.n	e7fc <am_hal_uart_transfer+0x15c>
    eb0a:	4627      	mov	r7, r4
    eb0c:	e676      	b.n	e7fc <am_hal_uart_transfer+0x15c>
    eb0e:	bf00      	nop
    eb10:	08000001 	.word	0x08000001

0000eb14 <am_hal_queue_init>:
    eb14:	b410      	push	{r4}
    eb16:	2400      	movs	r4, #0
    eb18:	6004      	str	r4, [r0, #0]
    eb1a:	6044      	str	r4, [r0, #4]
    eb1c:	6084      	str	r4, [r0, #8]
    eb1e:	60c3      	str	r3, [r0, #12]
    eb20:	6102      	str	r2, [r0, #16]
    eb22:	6141      	str	r1, [r0, #20]
    eb24:	f85d 4b04 	ldr.w	r4, [sp], #4
    eb28:	4770      	bx	lr
    eb2a:	bf00      	nop

0000eb2c <am_hal_queue_item_add>:
    eb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb2e:	4604      	mov	r4, r0
    eb30:	6906      	ldr	r6, [r0, #16]
    eb32:	b083      	sub	sp, #12
    eb34:	fb06 f602 	mul.w	r6, r6, r2
    eb38:	460d      	mov	r5, r1
    eb3a:	f7ff fa7f 	bl	e03c <am_hal_interrupt_master_disable>
    eb3e:	68e7      	ldr	r7, [r4, #12]
    eb40:	68a2      	ldr	r2, [r4, #8]
    eb42:	9001      	str	r0, [sp, #4]
    eb44:	1abb      	subs	r3, r7, r2
    eb46:	429e      	cmp	r6, r3
    eb48:	d826      	bhi.n	eb98 <am_hal_queue_item_add+0x6c>
    eb4a:	b196      	cbz	r6, eb72 <am_hal_queue_item_add+0x46>
    eb4c:	6823      	ldr	r3, [r4, #0]
    eb4e:	4629      	mov	r1, r5
    eb50:	b1c5      	cbz	r5, eb84 <am_hal_queue_item_add+0x58>
    eb52:	19af      	adds	r7, r5, r6
    eb54:	6962      	ldr	r2, [r4, #20]
    eb56:	f811 0b01 	ldrb.w	r0, [r1], #1
    eb5a:	54d0      	strb	r0, [r2, r3]
    eb5c:	6823      	ldr	r3, [r4, #0]
    eb5e:	68e5      	ldr	r5, [r4, #12]
    eb60:	3301      	adds	r3, #1
    eb62:	42b9      	cmp	r1, r7
    eb64:	fbb3 f0f5 	udiv	r0, r3, r5
    eb68:	fb05 3310 	mls	r3, r5, r0, r3
    eb6c:	6023      	str	r3, [r4, #0]
    eb6e:	d1f1      	bne.n	eb54 <am_hal_queue_item_add+0x28>
    eb70:	68a2      	ldr	r2, [r4, #8]
    eb72:	4432      	add	r2, r6
    eb74:	60a2      	str	r2, [r4, #8]
    eb76:	2401      	movs	r4, #1
    eb78:	9801      	ldr	r0, [sp, #4]
    eb7a:	f7ff fa63 	bl	e044 <am_hal_interrupt_master_set>
    eb7e:	4620      	mov	r0, r4
    eb80:	b003      	add	sp, #12
    eb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb84:	3101      	adds	r1, #1
    eb86:	3301      	adds	r3, #1
    eb88:	428e      	cmp	r6, r1
    eb8a:	fbb3 f0f7 	udiv	r0, r3, r7
    eb8e:	fb07 3310 	mls	r3, r7, r0, r3
    eb92:	d1f7      	bne.n	eb84 <am_hal_queue_item_add+0x58>
    eb94:	6023      	str	r3, [r4, #0]
    eb96:	e7ec      	b.n	eb72 <am_hal_queue_item_add+0x46>
    eb98:	2400      	movs	r4, #0
    eb9a:	e7ed      	b.n	eb78 <am_hal_queue_item_add+0x4c>

0000eb9c <am_hal_queue_item_get>:
    eb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb9e:	4604      	mov	r4, r0
    eba0:	6906      	ldr	r6, [r0, #16]
    eba2:	b083      	sub	sp, #12
    eba4:	fb06 f602 	mul.w	r6, r6, r2
    eba8:	460d      	mov	r5, r1
    ebaa:	f7ff fa47 	bl	e03c <am_hal_interrupt_master_disable>
    ebae:	68a2      	ldr	r2, [r4, #8]
    ebb0:	9001      	str	r0, [sp, #4]
    ebb2:	4296      	cmp	r6, r2
    ebb4:	d81c      	bhi.n	ebf0 <am_hal_queue_item_get+0x54>
    ebb6:	b196      	cbz	r6, ebde <am_hal_queue_item_get+0x42>
    ebb8:	6863      	ldr	r3, [r4, #4]
    ebba:	b1dd      	cbz	r5, ebf4 <am_hal_queue_item_get+0x58>
    ebbc:	4629      	mov	r1, r5
    ebbe:	19af      	adds	r7, r5, r6
    ebc0:	6962      	ldr	r2, [r4, #20]
    ebc2:	5cd3      	ldrb	r3, [r2, r3]
    ebc4:	f801 3b01 	strb.w	r3, [r1], #1
    ebc8:	6863      	ldr	r3, [r4, #4]
    ebca:	68e5      	ldr	r5, [r4, #12]
    ebcc:	3301      	adds	r3, #1
    ebce:	428f      	cmp	r7, r1
    ebd0:	fbb3 f0f5 	udiv	r0, r3, r5
    ebd4:	fb05 3310 	mls	r3, r5, r0, r3
    ebd8:	6063      	str	r3, [r4, #4]
    ebda:	d1f1      	bne.n	ebc0 <am_hal_queue_item_get+0x24>
    ebdc:	68a2      	ldr	r2, [r4, #8]
    ebde:	1b92      	subs	r2, r2, r6
    ebe0:	60a2      	str	r2, [r4, #8]
    ebe2:	2401      	movs	r4, #1
    ebe4:	9801      	ldr	r0, [sp, #4]
    ebe6:	f7ff fa2d 	bl	e044 <am_hal_interrupt_master_set>
    ebea:	4620      	mov	r0, r4
    ebec:	b003      	add	sp, #12
    ebee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebf0:	2400      	movs	r4, #0
    ebf2:	e7f7      	b.n	ebe4 <am_hal_queue_item_get+0x48>
    ebf4:	68e0      	ldr	r0, [r4, #12]
    ebf6:	4629      	mov	r1, r5
    ebf8:	3101      	adds	r1, #1
    ebfa:	3301      	adds	r3, #1
    ebfc:	428e      	cmp	r6, r1
    ebfe:	fbb3 f5f0 	udiv	r5, r3, r0
    ec02:	fb00 3315 	mls	r3, r0, r5, r3
    ec06:	d1f7      	bne.n	ebf8 <am_hal_queue_item_get+0x5c>
    ec08:	6063      	str	r3, [r4, #4]
    ec0a:	e7e8      	b.n	ebde <am_hal_queue_item_get+0x42>
    ec0c:	6f727245 	.word	0x6f727245
    ec10:	65722072 	.word	0x65722072
    ec14:	6e696461 	.word	0x6e696461
    ec18:	44412067 	.word	0x44412067
    ec1c:	69203043 	.word	0x69203043
    ec20:	7265746e 	.word	0x7265746e
    ec24:	74707572 	.word	0x74707572
    ec28:	61747320 	.word	0x61747320
    ec2c:	0a737574 	.word	0x0a737574
    ec30:	00000000 	.word	0x00000000
    ec34:	6f727245 	.word	0x6f727245
    ec38:	6c632072 	.word	0x6c632072
    ec3c:	69726165 	.word	0x69726165
    ec40:	4120676e 	.word	0x4120676e
    ec44:	20304344 	.word	0x20304344
    ec48:	65746e69 	.word	0x65746e69
    ec4c:	70757272 	.word	0x70757272
    ec50:	74732074 	.word	0x74732074
    ec54:	73757461 	.word	0x73757461
    ec58:	0000000a 	.word	0x0000000a
    ec5c:	6f727245 	.word	0x6f727245
    ec60:	202d2072 	.word	0x202d2072
    ec64:	666e6f63 	.word	0x666e6f63
    ec68:	72756769 	.word	0x72756769
    ec6c:	20676e69 	.word	0x20676e69
    ec70:	20434441 	.word	0x20434441
    ec74:	20414d44 	.word	0x20414d44
    ec78:	6c696166 	.word	0x6c696166
    ec7c:	0a2e6465 	.word	0x0a2e6465
    ec80:	00000000 	.word	0x00000000
    ec84:	6f727245 	.word	0x6f727245
    ec88:	202d2072 	.word	0x202d2072
    ec8c:	65736572 	.word	0x65736572
    ec90:	74617672 	.word	0x74617672
    ec94:	206e6f69 	.word	0x206e6f69
    ec98:	7420666f 	.word	0x7420666f
    ec9c:	41206568 	.word	0x41206568
    eca0:	20304344 	.word	0x20304344
    eca4:	74736e69 	.word	0x74736e69
    eca8:	65636e61 	.word	0x65636e61
    ecac:	69616620 	.word	0x69616620
    ecb0:	2e64656c 	.word	0x2e64656c
    ecb4:	0000000a 	.word	0x0000000a
    ecb8:	6f727245 	.word	0x6f727245
    ecbc:	202d2072 	.word	0x202d2072
    ecc0:	30434441 	.word	0x30434441
    ecc4:	776f7020 	.word	0x776f7020
    ecc8:	6f207265 	.word	0x6f207265
    eccc:	6166206e 	.word	0x6166206e
    ecd0:	64656c69 	.word	0x64656c69
    ecd4:	00000a2e 	.word	0x00000a2e
    ecd8:	6f727245 	.word	0x6f727245
    ecdc:	202d2072 	.word	0x202d2072
    ece0:	666e6f63 	.word	0x666e6f63
    ece4:	72756769 	.word	0x72756769
    ece8:	20676e69 	.word	0x20676e69
    ecec:	30434441 	.word	0x30434441
    ecf0:	69616620 	.word	0x69616620
    ecf4:	2e64656c 	.word	0x2e64656c
    ecf8:	0000000a 	.word	0x0000000a
    ecfc:	6f727245 	.word	0x6f727245
    ed00:	202d2072 	.word	0x202d2072
    ed04:	666e6f63 	.word	0x666e6f63
    ed08:	72756769 	.word	0x72756769
    ed0c:	20676e69 	.word	0x20676e69
    ed10:	20434441 	.word	0x20434441
    ed14:	746f6c53 	.word	0x746f6c53
    ed18:	66203220 	.word	0x66203220
    ed1c:	656c6961 	.word	0x656c6961
    ed20:	000a2e64 	.word	0x000a2e64
    ed24:	6f727245 	.word	0x6f727245
    ed28:	202d2072 	.word	0x202d2072
    ed2c:	666e6f63 	.word	0x666e6f63
    ed30:	72756769 	.word	0x72756769
    ed34:	20676e69 	.word	0x20676e69
    ed38:	20434441 	.word	0x20434441
    ed3c:	746f6c53 	.word	0x746f6c53
    ed40:	66203120 	.word	0x66203120
    ed44:	656c6961 	.word	0x656c6961
    ed48:	000a2e64 	.word	0x000a2e64
    ed4c:	6f727245 	.word	0x6f727245
    ed50:	202d2072 	.word	0x202d2072
    ed54:	62616e65 	.word	0x62616e65
    ed58:	676e696c 	.word	0x676e696c
    ed5c:	43444120 	.word	0x43444120
    ed60:	61662030 	.word	0x61662030
    ed64:	64656c69 	.word	0x64656c69
    ed68:	00000a2e 	.word	0x00000a2e
    ed6c:	72617053 	.word	0x72617053
    ed70:	6e75466b 	.word	0x6e75466b
    ed74:	67644520 	.word	0x67644520
    ed78:	4d442065 	.word	0x4d442065
    ed7c:	44412041 	.word	0x44412041
    ed80:	65542043 	.word	0x65542043
    ed84:	000a7473 	.word	0x000a7473
    ed88:	353a3531 	.word	0x353a3531
    ed8c:	39313a37 	.word	0x39313a37
    ed90:	00000000 	.word	0x00000000
    ed94:	20626546 	.word	0x20626546
    ed98:	32203332 	.word	0x32203332
    ed9c:	00303230 	.word	0x00303230
    eda0:	706d6f43 	.word	0x706d6f43
    eda4:	64656c69 	.word	0x64656c69
    eda8:	206e6f20 	.word	0x206e6f20
    edac:	202c7325 	.word	0x202c7325
    edb0:	0a0a7325 	.word	0x0a0a7325
    edb4:	00000000 	.word	0x00000000
    edb8:	6f727245 	.word	0x6f727245
    edbc:	202d2072 	.word	0x202d2072
    edc0:	666e6f63 	.word	0x666e6f63
    edc4:	72756769 	.word	0x72756769
    edc8:	20676e69 	.word	0x20676e69
    edcc:	20656874 	.word	0x20656874
    edd0:	74737973 	.word	0x74737973
    edd4:	63206d65 	.word	0x63206d65
    edd8:	6b636f6c 	.word	0x6b636f6c
    eddc:	69616620 	.word	0x69616620
    ede0:	2e64656c 	.word	0x2e64656c
    ede4:	0000000a 	.word	0x0000000a
    ede8:	6f727245 	.word	0x6f727245
    edec:	202d2072 	.word	0x202d2072
    edf0:	666e6f63 	.word	0x666e6f63
    edf4:	72756769 	.word	0x72756769
    edf8:	20676e69 	.word	0x20676e69
    edfc:	20656874 	.word	0x20656874
    ee00:	74737973 	.word	0x74737973
    ee04:	63206d65 	.word	0x63206d65
    ee08:	65686361 	.word	0x65686361
    ee0c:	69616620 	.word	0x69616620
    ee10:	2e64656c 	.word	0x2e64656c
    ee14:	0000000a 	.word	0x0000000a
    ee18:	6f727245 	.word	0x6f727245
    ee1c:	202d2072 	.word	0x202d2072
    ee20:	62616e65 	.word	0x62616e65
    ee24:	676e696c 	.word	0x676e696c
    ee28:	65687420 	.word	0x65687420
    ee2c:	73797320 	.word	0x73797320
    ee30:	206d6574 	.word	0x206d6574
    ee34:	68636163 	.word	0x68636163
    ee38:	61662065 	.word	0x61662065
    ee3c:	64656c69 	.word	0x64656c69
    ee40:	00000a2e 	.word	0x00000a2e
    ee44:	6f727245 	.word	0x6f727245
    ee48:	202d2072 	.word	0x202d2072
    ee4c:	666e6f63 	.word	0x666e6f63
    ee50:	72756769 	.word	0x72756769
    ee54:	20676e69 	.word	0x20676e69
    ee58:	20656874 	.word	0x20656874
    ee5c:	73616c66 	.word	0x73616c66
    ee60:	656d2068 	.word	0x656d2068
    ee64:	79726f6d 	.word	0x79726f6d
    ee68:	69616620 	.word	0x69616620
    ee6c:	2e64656c 	.word	0x2e64656c
    ee70:	0000000a 	.word	0x0000000a
    ee74:	6f727245 	.word	0x6f727245
    ee78:	202d2072 	.word	0x202d2072
    ee7c:	666e6f63 	.word	0x666e6f63
    ee80:	72756769 	.word	0x72756769
    ee84:	20676e69 	.word	0x20676e69
    ee88:	20656874 	.word	0x20656874
    ee8c:	4d415253 	.word	0x4d415253
    ee90:	69616620 	.word	0x69616620
    ee94:	2e64656c 	.word	0x2e64656c
    ee98:	0000000a 	.word	0x0000000a
    ee9c:	79797941 	.word	0x79797941
    eea0:	6f6f6220 	.word	0x6f6f6220
    eea4:	0000000a 	.word	0x0000000a
    eea8:	6f727245 	.word	0x6f727245
    eeac:	202d2072 	.word	0x202d2072
    eeb0:	67697274 	.word	0x67697274
    eeb4:	69726567 	.word	0x69726567
    eeb8:	7420676e 	.word	0x7420676e
    eebc:	41206568 	.word	0x41206568
    eec0:	20304344 	.word	0x20304344
    eec4:	6c696166 	.word	0x6c696166
    eec8:	0a2e6465 	.word	0x0a2e6465
    eecc:	00000000 	.word	0x00000000
    eed0:	20434441 	.word	0x20434441
    eed4:	6d617845 	.word	0x6d617845
    eed8:	20656c70 	.word	0x20656c70
    eedc:	68746977 	.word	0x68746977
    eee0:	322e3120 	.word	0x322e3120
    eee4:	7370734d 	.word	0x7370734d
    eee8:	646e6120 	.word	0x646e6120
    eeec:	4d504c20 	.word	0x4d504c20
    eef0:	3d45444f 	.word	0x3d45444f
    eef4:	00000a30 	.word	0x00000a30
    eef8:	65746e45 	.word	0x65746e45
    eefc:	676e6972 	.word	0x676e6972
    ef00:	65687420 	.word	0x65687420
    ef04:	6f6f6c20 	.word	0x6f6f6c20
    ef08:	2e2e2e70 	.word	0x2e2e2e70
    ef0c:	0000000a 	.word	0x0000000a
    ef10:	20414d44 	.word	0x20414d44
    ef14:	6f727245 	.word	0x6f727245
    ef18:	636f2072 	.word	0x636f2072
    ef1c:	65727563 	.word	0x65727563
    ef20:	00000a64 	.word	0x00000a64
    ef24:	20414d44 	.word	0x20414d44
    ef28:	706d6f43 	.word	0x706d6f43
    ef2c:	6574656c 	.word	0x6574656c
    ef30:	0000000a 	.word	0x0000000a
    ef34:	202c6425 	.word	0x202c6425
    ef38:	000a6425 	.word	0x000a6425
    ef3c:	6f727245 	.word	0x6f727245
    ef40:	202d2072 	.word	0x202d2072
    ef44:	61656c63 	.word	0x61656c63
    ef48:	676e6972 	.word	0x676e6972
    ef4c:	65687420 	.word	0x65687420
    ef50:	43444120 	.word	0x43444120
    ef54:	6e692030 	.word	0x6e692030
    ef58:	72726574 	.word	0x72726574
    ef5c:	73747075 	.word	0x73747075
    ef60:	69616620 	.word	0x69616620
    ef64:	2e64656c 	.word	0x2e64656c
    ef68:	0000000a 	.word	0x0000000a
    ef6c:	0a0a0a0a 	.word	0x0a0a0a0a
    ef70:	0a0a0a0a 	.word	0x0a0a0a0a
    ef74:	0a0a0a0a 	.word	0x0a0a0a0a
    ef78:	0a0a0a0a 	.word	0x0a0a0a0a
    ef7c:	00000a0a 	.word	0x00000a0a

0000ef80 <g_SF_EDGE_PIN_MIC0>:
    ef80:	00000000                                ....

0000ef84 <g_SF_EDGE_PIN_MIC1>:
    ef84:	00000000                                ....

0000ef88 <g_sBspUartConfig>:
    ef88:	0001c200 00000060 00000000 00000000     ....`...........
    ef98:	00000000 00000012 00000000 00000000     ................
	...

0000efb0 <g_AM_BSP_GPIO_COM_UART_RX>:
    efb0:	00000000                                ....

0000efb4 <g_AM_BSP_GPIO_COM_UART_TX>:
    efb4:	00000000                                ....

0000efb8 <am_hal_cachectrl_defaults>:
    efb8:	00000308                                ....

0000efbc <g_ui8Bit76Capabilities>:
    efbc:	02800101 80010180 80800101 80808080     ................
    efcc:	80808080 80808008 01800180 80808080     ................
    efdc:	80808080 01800402 01010401 80808080     ................
    efec:	00000101                                ....

0000eff0 <g_ui8NCEtable>:
    eff0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f000:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f010:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f020:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f030:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f040:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f050:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f060:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f070:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f080:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f090:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f0a0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f0b0:	32221202 43231303                       .."2..#C

0000f0b8 <g_ui8Inpen>:
    f0b8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    f0c8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    f0d8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    f0e8:	00003130                                01..

0000f0ec <g_AM_HAL_GPIO_DISABLE>:
    f0ec:	00000003                                ....

0000f0f0 <g_ui8nCEpins>:
    f0f0:	02070707 00080802 01020202 01010101     ................
    f100:	01010101 01010101 01010101 01010101     ................
    f110:	01010101 08010101 01010008 01010101     ................
    f120:	00000101                                ....

0000f124 <g_am_hal_mcuctrl_flash_size>:
    f124:	00004000 00008000 00010000 00020000     .@..............
    f134:	00040000 00080000 00100000 00200000     .............. .
    f144:	00180000 00000000 00000000 00000000     ................
	...

0000f164 <g_am_hal_mcuctrl_sram_size>:
    f164:	00004000 00008000 00010000 00020000     .@..............
    f174:	00040000 00080000 00100000 00060000     ................
    f184:	000c0000 00000000 00000000 00000000     ................
	...

0000f1a4 <am_hal_pwrctrl_peripheral_control>:
	...
    f1b0:	00000001 00000004 00000004 00000002     ................
    f1c0:	00000008 00000008 00000004 00000008     ................
    f1d0:	00000008 00000008 00000008 00000008     ................
    f1e0:	00000010 00000010 00000010 00000020     ............ ...
    f1f0:	00000010 00000010 00000040 00000010     ........@.......
    f200:	00000010 00000080 00000004 00000004     ................
    f210:	00000100 00000004 00000004 00000200     ................
    f220:	00000020 00000020 00000400 00000004      ... ...........
    f230:	00000004 00000800 00000040 00000040     ........@...@...
    f240:	00001000 00000080 00000080 00002000     ............. ..
    f250:	00000100 00000100                       ........

0000f258 <am_hal_pwrctrl_memory_control>:
	...
    f26c:	00000001 00000001 00000001 00001fff     ................
    f27c:	00001fff 00000003 00000003 00000003     ................
    f28c:	00001fff 00001fff 00000007 00000007     ................
    f29c:	00000007 00001fff 00001fff 0000000f     ................
    f2ac:	0000000f 0000000f 00001fff 00001fff     ................
    f2bc:	0000001f 0000001f 0000001f 00001fff     ................
    f2cc:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
    f2dc:	00001fff 00001fff 0000007f 0000007f     ................
    f2ec:	0000007f 00001fff 00001fff 000000ff     ................
    f2fc:	000000ff 000000ff 00001fff 00001fff     ................
    f30c:	000001ff 000001ff 000001ff 00001fff     ................
    f31c:	00001fff 000003ff 000003ff 000003ff     ................
    f32c:	00001fff 00001fff 000007ff 000007ff     ................
    f33c:	000007ff 00001fff 00001fff 00000fff     ................
    f34c:	00000fff 00000fff 00001fff 00001fff     ................
    f35c:	00001fff 00001fff 00001fff 00001fff     ................
    f36c:	00001fff 00002000 00002000 00002000     ..... ... ... ..
    f37c:	00006000 00006000 00006000 00006000     .`...`...`...`..
    f38c:	00006000 00006000 00006000 c0000000     .`...`...`......
    f39c:	00000000 c0000000 c0000000 00000000     ................
    f3ac:	c0007fff 00007fff c0007fff c0007fff     ................
    f3bc:	00007fff                                ....
