
bin/ble_freertos_fit.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 2b 00 10 51 f4 01 00 b9 f4 01 00 d9 aa 01 00     .+..Q...........
    c010:	bf f4 01 00 bf f4 01 00 bf f4 01 00 00 00 00 00     ................
	...
    c02c:	51 35 01 00 c5 f4 01 00 00 00 00 00 31 37 01 00     Q5..........17..
    c03c:	99 37 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     .7..............
    c04c:	c5 f4 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     ................
    c05c:	c5 f4 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     ................
    c06c:	c5 f4 01 00 f5 a0 01 00 c5 f4 01 00 99 a1 01 00     ................
    c07c:	cd a0 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     ................
    c08c:	c5 f4 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     ................
    c09c:	e9 39 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     .9..............
    c0ac:	c5 f4 01 00 c5 f4 01 00 c5 f4 01 00 c5 f4 01 00     ................
    c0bc:	c5 f4 01 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <__aeabi_d2f>:
    c3f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c3fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c400:	bf24      	itt	cs
    c402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c40a:	d90d      	bls.n	c428 <__aeabi_d2f+0x30>
    c40c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c41c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c420:	bf08      	it	eq
    c422:	f020 0001 	biceq.w	r0, r0, #1
    c426:	4770      	bx	lr
    c428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c42c:	d121      	bne.n	c472 <__aeabi_d2f+0x7a>
    c42e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c432:	bfbc      	itt	lt
    c434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c438:	4770      	bxlt	lr
    c43a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c43e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c442:	f1c2 0218 	rsb	r2, r2, #24
    c446:	f1c2 0c20 	rsb	ip, r2, #32
    c44a:	fa10 f30c 	lsls.w	r3, r0, ip
    c44e:	fa20 f002 	lsr.w	r0, r0, r2
    c452:	bf18      	it	ne
    c454:	f040 0001 	orrne.w	r0, r0, #1
    c458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c45c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c460:	fa03 fc0c 	lsl.w	ip, r3, ip
    c464:	ea40 000c 	orr.w	r0, r0, ip
    c468:	fa23 f302 	lsr.w	r3, r3, r2
    c46c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c470:	e7cc      	b.n	c40c <__aeabi_d2f+0x14>
    c472:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c476:	d107      	bne.n	c488 <__aeabi_d2f+0x90>
    c478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c47c:	bf1e      	ittt	ne
    c47e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c486:	4770      	bxne	lr
    c488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c48c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c494:	4770      	bx	lr
    c496:	bf00      	nop

0000c498 <attDmConnCback>:
    c498:	7803      	ldrb	r3, [r0, #0]
    c49a:	7882      	ldrb	r2, [r0, #2]
    c49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a0:	1e5f      	subs	r7, r3, #1
    c4a2:	4e16      	ldr	r6, [pc, #88]	; (c4fc <attDmConnCback+0x64>)
    c4a4:	017f      	lsls	r7, r7, #5
    c4a6:	2a27      	cmp	r2, #39	; 0x27
    c4a8:	4605      	mov	r5, r0
    c4aa:	eb06 0407 	add.w	r4, r6, r7
    c4ae:	d108      	bne.n	c4c2 <attDmConnCback+0x2a>
    c4b0:	88c2      	ldrh	r2, [r0, #6]
    c4b2:	8322      	strh	r2, [r4, #24]
    c4b4:	7723      	strb	r3, [r4, #28]
    c4b6:	2217      	movs	r2, #23
    c4b8:	2300      	movs	r3, #0
    c4ba:	8362      	strh	r2, [r4, #26]
    c4bc:	7763      	strb	r3, [r4, #29]
    c4be:	77a3      	strb	r3, [r4, #30]
    c4c0:	77e3      	strb	r3, [r4, #31]
    c4c2:	4437      	add	r7, r6
    c4c4:	7f3b      	ldrb	r3, [r7, #28]
    c4c6:	b183      	cbz	r3, c4ea <attDmConnCback+0x52>
    c4c8:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c4cc:	4629      	mov	r1, r5
    c4ce:	68db      	ldr	r3, [r3, #12]
    c4d0:	4620      	mov	r0, r4
    c4d2:	4798      	blx	r3
    c4d4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c4d8:	4629      	mov	r1, r5
    c4da:	68db      	ldr	r3, [r3, #12]
    c4dc:	4620      	mov	r0, r4
    c4de:	4798      	blx	r3
    c4e0:	78ab      	ldrb	r3, [r5, #2]
    c4e2:	2b28      	cmp	r3, #40	; 0x28
    c4e4:	bf04      	itt	eq
    c4e6:	2300      	moveq	r3, #0
    c4e8:	773b      	strbeq	r3, [r7, #28]
    c4ea:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c4ee:	b11b      	cbz	r3, c4f8 <attDmConnCback+0x60>
    c4f0:	4628      	mov	r0, r5
    c4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c4f6:	4718      	bx	r3
    c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4fc:	100037b4 	.word	0x100037b4

0000c500 <attEmptyHandler>:
    c500:	4770      	bx	lr

0000c502 <attEmptyConnCback>:
    c502:	4770      	bx	lr

0000c504 <attEmptyDataCback>:
    c504:	4770      	bx	lr

0000c506 <attL2cDataCback>:
    c506:	7a13      	ldrb	r3, [r2, #8]
    c508:	f013 0f01 	tst.w	r3, #1
    c50c:	4b03      	ldr	r3, [pc, #12]	; (c51c <attL2cDataCback+0x16>)
    c50e:	bf14      	ite	ne
    c510:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c514:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c518:	681b      	ldr	r3, [r3, #0]
    c51a:	4718      	bx	r3
    c51c:	100037b4 	.word	0x100037b4

0000c520 <attL2cCtrlCback>:
    c520:	b570      	push	{r4, r5, r6, lr}
    c522:	7804      	ldrb	r4, [r0, #0]
    c524:	4d0e      	ldr	r5, [pc, #56]	; (c560 <attL2cCtrlCback+0x40>)
    c526:	3c01      	subs	r4, #1
    c528:	0164      	lsls	r4, r4, #5
    c52a:	192b      	adds	r3, r5, r4
    c52c:	4606      	mov	r6, r0
    c52e:	7f1a      	ldrb	r2, [r3, #28]
    c530:	b1a2      	cbz	r2, c55c <attL2cCtrlCback+0x3c>
    c532:	7882      	ldrb	r2, [r0, #2]
    c534:	2a01      	cmp	r2, #1
    c536:	bf0c      	ite	eq
    c538:	2201      	moveq	r2, #1
    c53a:	2200      	movne	r2, #0
    c53c:	779a      	strb	r2, [r3, #30]
    c53e:	d003      	beq.n	c548 <attL2cCtrlCback+0x28>
    c540:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c544:	685b      	ldr	r3, [r3, #4]
    c546:	4798      	blx	r3
    c548:	442c      	add	r4, r5
    c54a:	7fa3      	ldrb	r3, [r4, #30]
    c54c:	b933      	cbnz	r3, c55c <attL2cCtrlCback+0x3c>
    c54e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c552:	4630      	mov	r0, r6
    c554:	685b      	ldr	r3, [r3, #4]
    c556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c55a:	4718      	bx	r3
    c55c:	bd70      	pop	{r4, r5, r6, pc}
    c55e:	bf00      	nop
    c560:	100037b4 	.word	0x100037b4

0000c564 <attCcbByHandle>:
    c564:	b508      	push	{r3, lr}
    c566:	f003 f8cd 	bl	f704 <DmConnIdByHandle>
    c56a:	b118      	cbz	r0, c574 <attCcbByHandle+0x10>
    c56c:	4b02      	ldr	r3, [pc, #8]	; (c578 <attCcbByHandle+0x14>)
    c56e:	3801      	subs	r0, #1
    c570:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c574:	bd08      	pop	{r3, pc}
    c576:	bf00      	nop
    c578:	100037b4 	.word	0x100037b4

0000c57c <attCcbByConnId>:
    c57c:	4b02      	ldr	r3, [pc, #8]	; (c588 <attCcbByConnId+0xc>)
    c57e:	3801      	subs	r0, #1
    c580:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c584:	4770      	bx	lr
    c586:	bf00      	nop
    c588:	100037b4 	.word	0x100037b4

0000c58c <attUuidCmp16to128>:
    c58c:	b508      	push	{r3, lr}
    c58e:	4b06      	ldr	r3, [pc, #24]	; (c5a8 <attUuidCmp16to128+0x1c>)
    c590:	7802      	ldrb	r2, [r0, #0]
    c592:	731a      	strb	r2, [r3, #12]
    c594:	7842      	ldrb	r2, [r0, #1]
    c596:	735a      	strb	r2, [r3, #13]
    c598:	4618      	mov	r0, r3
    c59a:	2210      	movs	r2, #16
    c59c:	f7ff fdb0 	bl	c100 <memcmp>
    c5a0:	fab0 f080 	clz	r0, r0
    c5a4:	0940      	lsrs	r0, r0, #5
    c5a6:	bd08      	pop	{r3, pc}
    c5a8:	10002b00 	.word	0x10002b00

0000c5ac <attExecCallback>:
    c5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c5ae:	f88d 3003 	strb.w	r3, [sp, #3]
    c5b2:	2300      	movs	r3, #0
    c5b4:	f8ad 3008 	strh.w	r3, [sp, #8]
    c5b8:	f88d 300c 	strb.w	r3, [sp, #12]
    c5bc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    c5c4:	4b06      	ldr	r3, [pc, #24]	; (c5e0 <attExecCallback+0x34>)
    c5c6:	f8ad 0000 	strh.w	r0, [sp]
    c5ca:	f88d 1002 	strb.w	r1, [sp, #2]
    c5ce:	f8ad 200a 	strh.w	r2, [sp, #10]
    c5d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c5d6:	4668      	mov	r0, sp
    c5d8:	4798      	blx	r3
    c5da:	b005      	add	sp, #20
    c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
    c5e0:	100037b4 	.word	0x100037b4

0000c5e4 <attSetMtu>:
    c5e4:	428a      	cmp	r2, r1
    c5e6:	8b43      	ldrh	r3, [r0, #26]
    c5e8:	b507      	push	{r0, r1, r2, lr}
    c5ea:	bf28      	it	cs
    c5ec:	460a      	movcs	r2, r1
    c5ee:	4293      	cmp	r3, r2
    c5f0:	d007      	beq.n	c602 <attSetMtu+0x1e>
    c5f2:	2300      	movs	r3, #0
    c5f4:	8342      	strh	r2, [r0, #26]
    c5f6:	2111      	movs	r1, #17
    c5f8:	7f00      	ldrb	r0, [r0, #28]
    c5fa:	9200      	str	r2, [sp, #0]
    c5fc:	461a      	mov	r2, r3
    c5fe:	f7ff ffd5 	bl	c5ac <attExecCallback>
    c602:	b003      	add	sp, #12
    c604:	f85d fb04 	ldr.w	pc, [sp], #4

0000c608 <attMsgAlloc>:
    c608:	2100      	movs	r1, #0
    c60a:	f00d bf55 	b.w	1a4b8 <WsfMsgDataAlloc>

0000c60e <AttHandlerInit>:
    c60e:	b508      	push	{r3, lr}
    c610:	4b09      	ldr	r3, [pc, #36]	; (c638 <AttHandlerInit+0x2a>)
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <AttHandlerInit+0x2e>)
    c614:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c618:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c61c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c620:	4907      	ldr	r1, [pc, #28]	; (c640 <AttHandlerInit+0x32>)
    c622:	4a08      	ldr	r2, [pc, #32]	; (c644 <AttHandlerInit+0x36>)
    c624:	2004      	movs	r0, #4
    c626:	f003 ffb7 	bl	10598 <L2cRegister>
    c62a:	4907      	ldr	r1, [pc, #28]	; (c648 <AttHandlerInit+0x3a>)
    c62c:	2000      	movs	r0, #0
    c62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c632:	f002 bf51 	b.w	f4d8 <DmConnRegister>
    c636:	bf00      	nop
    c638:	100037b4 	.word	0x100037b4
    c63c:	00022d14 	.word	0x00022d14
    c640:	0000c507 	.word	0x0000c507
    c644:	0000c521 	.word	0x0000c521
    c648:	0000c499 	.word	0x0000c499

0000c64c <AttHandler>:
    c64c:	4608      	mov	r0, r1
    c64e:	b149      	cbz	r1, c664 <AttHandler+0x18>
    c650:	788b      	ldrb	r3, [r1, #2]
    c652:	2b1f      	cmp	r3, #31
    c654:	4b04      	ldr	r3, [pc, #16]	; (c668 <AttHandler+0x1c>)
    c656:	bf8c      	ite	hi
    c658:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c65c:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c660:	689b      	ldr	r3, [r3, #8]
    c662:	4718      	bx	r3
    c664:	4770      	bx	lr
    c666:	bf00      	nop
    c668:	100037b4 	.word	0x100037b4

0000c66c <AttRegister>:
    c66c:	4b0a      	ldr	r3, [pc, #40]	; (c698 <AttRegister+0x2c>)
    c66e:	b507      	push	{r0, r1, r2, lr}
    c670:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c674:	f008 ffd2 	bl	1561c <HciGetMaxRxAclLen>
    c678:	4b08      	ldr	r3, [pc, #32]	; (c69c <AttRegister+0x30>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	889b      	ldrh	r3, [r3, #4]
    c67e:	3803      	subs	r0, #3
    c680:	4298      	cmp	r0, r3
    c682:	dc06      	bgt.n	c692 <AttRegister+0x26>
    c684:	2200      	movs	r2, #0
    c686:	9200      	str	r2, [sp, #0]
    c688:	2302      	movs	r3, #2
    c68a:	2152      	movs	r1, #82	; 0x52
    c68c:	4610      	mov	r0, r2
    c68e:	f7ff ff8d 	bl	c5ac <attExecCallback>
    c692:	b003      	add	sp, #12
    c694:	f85d fb04 	ldr.w	pc, [sp], #4
    c698:	100037b4 	.word	0x100037b4
    c69c:	10002bb4 	.word	0x10002bb4

0000c6a0 <AttConnRegister>:
    c6a0:	4b01      	ldr	r3, [pc, #4]	; (c6a8 <AttConnRegister+0x8>)
    c6a2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c6a6:	4770      	bx	lr
    c6a8:	100037b4 	.word	0x100037b4

0000c6ac <AttGetMtu>:
    c6ac:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <AttGetMtu+0xc>)
    c6ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c6b2:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c6b6:	4770      	bx	lr
    c6b8:	100037b4 	.word	0x100037b4

0000c6bc <AttMsgAlloc>:
    c6bc:	291b      	cmp	r1, #27
    c6be:	b508      	push	{r3, lr}
    c6c0:	d001      	beq.n	c6c6 <AttMsgAlloc+0xa>
    c6c2:	291d      	cmp	r1, #29
    c6c4:	d106      	bne.n	c6d4 <AttMsgAlloc+0x18>
    c6c6:	300b      	adds	r0, #11
    c6c8:	b280      	uxth	r0, r0
    c6ca:	f7ff ff9d 	bl	c608 <attMsgAlloc>
    c6ce:	b100      	cbz	r0, c6d2 <AttMsgAlloc+0x16>
    c6d0:	300b      	adds	r0, #11
    c6d2:	bd08      	pop	{r3, pc}
    c6d4:	2000      	movs	r0, #0
    c6d6:	e7fc      	b.n	c6d2 <AttMsgAlloc+0x16>

0000c6d8 <AttMsgFree>:
    c6d8:	291b      	cmp	r1, #27
    c6da:	d005      	beq.n	c6e8 <AttMsgFree+0x10>
    c6dc:	291d      	cmp	r1, #29
    c6de:	d003      	beq.n	c6e8 <AttMsgFree+0x10>
    c6e0:	2300      	movs	r3, #0
    c6e2:	1ac0      	subs	r0, r0, r3
    c6e4:	f00d bf14 	b.w	1a510 <WsfMsgFree>
    c6e8:	230b      	movs	r3, #11
    c6ea:	e7fa      	b.n	c6e2 <AttMsgFree+0xa>

0000c6ec <attcSendSimpleReq>:
    c6ec:	b570      	push	{r4, r5, r6, lr}
    c6ee:	2300      	movs	r3, #0
    c6f0:	6945      	ldr	r5, [r0, #20]
    c6f2:	6143      	str	r3, [r0, #20]
    c6f4:	7c83      	ldrb	r3, [r0, #18]
    c6f6:	2b0a      	cmp	r3, #10
    c6f8:	4604      	mov	r4, r0
    c6fa:	d008      	beq.n	c70e <attcSendSimpleReq+0x22>
    c6fc:	2310      	movs	r3, #16
    c6fe:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    c702:	4b07      	ldr	r3, [pc, #28]	; (c720 <attcSendSimpleReq+0x34>)
    c704:	681b      	ldr	r3, [r3, #0]
    c706:	3024      	adds	r0, #36	; 0x24
    c708:	7999      	ldrb	r1, [r3, #6]
    c70a:	f00e f8a3 	bl	1a854 <WsfTimerStartSec>
    c70e:	6821      	ldr	r1, [r4, #0]
    c710:	882a      	ldrh	r2, [r5, #0]
    c712:	8b09      	ldrh	r1, [r1, #24]
    c714:	462b      	mov	r3, r5
    c716:	2004      	movs	r0, #4
    c718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c71c:	f003 bf46 	b.w	105ac <L2cDataReq>
    c720:	10002bb4 	.word	0x10002bb4

0000c724 <attcSendReq>:
    c724:	7c82      	ldrb	r2, [r0, #18]
    c726:	4b02      	ldr	r3, [pc, #8]	; (c730 <attcSendReq+0xc>)
    c728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c72c:	4718      	bx	r3
    c72e:	bf00      	nop
    c730:	00022e34 	.word	0x00022e34

0000c734 <attcSetupReq>:
    c734:	b430      	push	{r4, r5}
    c736:	460b      	mov	r3, r1
    c738:	4604      	mov	r4, r0
    c73a:	f100 0510 	add.w	r5, r0, #16
    c73e:	c907      	ldmia	r1, {r0, r1, r2}
    c740:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    c744:	685a      	ldr	r2, [r3, #4]
    c746:	e892 0003 	ldmia.w	r2, {r0, r1}
    c74a:	f104 031c 	add.w	r3, r4, #28
    c74e:	e883 0003 	stmia.w	r3, {r0, r1}
    c752:	4620      	mov	r0, r4
    c754:	bc30      	pop	{r4, r5}
    c756:	f7ff bfe5 	b.w	c724 <attcSendReq>

0000c75a <attcCcbByConnId>:
    c75a:	b510      	push	{r4, lr}
    c75c:	4604      	mov	r4, r0
    c75e:	f002 ffe5 	bl	f72c <DmConnInUse>
    c762:	b120      	cbz	r0, c76e <attcCcbByConnId+0x14>
    c764:	4b02      	ldr	r3, [pc, #8]	; (c770 <attcCcbByConnId+0x16>)
    c766:	3c01      	subs	r4, #1
    c768:	2038      	movs	r0, #56	; 0x38
    c76a:	fb00 3004 	mla	r0, r0, r4, r3
    c76e:	bd10      	pop	{r4, pc}
    c770:	100038c8 	.word	0x100038c8

0000c774 <attcCcbByHandle>:
    c774:	b508      	push	{r3, lr}
    c776:	f002 ffc5 	bl	f704 <DmConnIdByHandle>
    c77a:	b120      	cbz	r0, c786 <attcCcbByHandle+0x12>
    c77c:	4b02      	ldr	r3, [pc, #8]	; (c788 <attcCcbByHandle+0x14>)
    c77e:	3801      	subs	r0, #1
    c780:	2238      	movs	r2, #56	; 0x38
    c782:	fb02 3000 	mla	r0, r2, r0, r3
    c786:	bd08      	pop	{r3, pc}
    c788:	100038c8 	.word	0x100038c8

0000c78c <attcDataCback>:
    c78c:	b570      	push	{r4, r5, r6, lr}
    c78e:	460d      	mov	r5, r1
    c790:	4614      	mov	r4, r2
    c792:	f7ff ffef 	bl	c774 <attcCcbByHandle>
    c796:	4606      	mov	r6, r0
    c798:	b198      	cbz	r0, c7c2 <attcDataCback+0x36>
    c79a:	7a23      	ldrb	r3, [r4, #8]
    c79c:	2b19      	cmp	r3, #25
    c79e:	d805      	bhi.n	c7ac <attcDataCback+0x20>
    c7a0:	4622      	mov	r2, r4
    c7a2:	4629      	mov	r1, r5
    c7a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7a8:	f000 ba5e 	b.w	cc68 <attcProcRsp>
    c7ac:	2b1b      	cmp	r3, #27
    c7ae:	d001      	beq.n	c7b4 <attcDataCback+0x28>
    c7b0:	2b1d      	cmp	r3, #29
    c7b2:	d106      	bne.n	c7c2 <attcDataCback+0x36>
    c7b4:	4622      	mov	r2, r4
    c7b6:	4629      	mov	r1, r5
    c7b8:	4630      	mov	r0, r6
    c7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c7be:	f000 baaf 	b.w	cd20 <attcProcInd>
    c7c2:	bd70      	pop	{r4, r5, r6, pc}

0000c7c4 <attcFreePkt>:
    c7c4:	b510      	push	{r4, lr}
    c7c6:	4604      	mov	r4, r0
    c7c8:	6840      	ldr	r0, [r0, #4]
    c7ca:	b118      	cbz	r0, c7d4 <attcFreePkt+0x10>
    c7cc:	f00d fea0 	bl	1a510 <WsfMsgFree>
    c7d0:	2300      	movs	r3, #0
    c7d2:	6063      	str	r3, [r4, #4]
    c7d4:	bd10      	pop	{r4, pc}

0000c7d6 <attcSendMtuReq>:
    c7d6:	b510      	push	{r4, lr}
    c7d8:	6803      	ldr	r3, [r0, #0]
    c7da:	7f5a      	ldrb	r2, [r3, #29]
    c7dc:	4604      	mov	r4, r0
    c7de:	b12a      	cbz	r2, c7ec <attcSendMtuReq+0x16>
    c7e0:	3010      	adds	r0, #16
    c7e2:	f7ff ffef 	bl	c7c4 <attcFreePkt>
    c7e6:	2300      	movs	r3, #0
    c7e8:	74a3      	strb	r3, [r4, #18]
    c7ea:	bd10      	pop	{r4, pc}
    c7ec:	2201      	movs	r2, #1
    c7ee:	775a      	strb	r2, [r3, #29]
    c7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7f4:	e77a      	b.n	c6ec <attcSendSimpleReq>

0000c7f6 <attcExecCallback>:
    c7f6:	2901      	cmp	r1, #1
    c7f8:	b513      	push	{r0, r1, r4, lr}
    c7fa:	d003      	beq.n	c804 <attcExecCallback+0xe>
    c7fc:	2400      	movs	r4, #0
    c7fe:	9400      	str	r4, [sp, #0]
    c800:	f7ff fed4 	bl	c5ac <attExecCallback>
    c804:	b002      	add	sp, #8
    c806:	bd10      	pop	{r4, pc}

0000c808 <attcSendWriteCmd>:
    c808:	b510      	push	{r4, lr}
    c80a:	4604      	mov	r4, r0
    c80c:	f7ff ff6e 	bl	c6ec <attcSendSimpleReq>
    c810:	6820      	ldr	r0, [r4, #0]
    c812:	8b22      	ldrh	r2, [r4, #24]
    c814:	7f00      	ldrb	r0, [r0, #28]
    c816:	2300      	movs	r3, #0
    c818:	210a      	movs	r1, #10
    c81a:	f7ff ffec 	bl	c7f6 <attcExecCallback>
    c81e:	2300      	movs	r3, #0
    c820:	74a3      	strb	r3, [r4, #18]
    c822:	bd10      	pop	{r4, pc}

0000c824 <attcReqClear>:
    c824:	b570      	push	{r4, r5, r6, lr}
    c826:	4606      	mov	r6, r0
    c828:	4608      	mov	r0, r1
    c82a:	460c      	mov	r4, r1
    c82c:	4615      	mov	r5, r2
    c82e:	f7ff ffc9 	bl	c7c4 <attcFreePkt>
    c832:	6830      	ldr	r0, [r6, #0]
    c834:	8922      	ldrh	r2, [r4, #8]
    c836:	78a1      	ldrb	r1, [r4, #2]
    c838:	7f00      	ldrb	r0, [r0, #28]
    c83a:	462b      	mov	r3, r5
    c83c:	f7ff ffdb 	bl	c7f6 <attcExecCallback>
    c840:	2300      	movs	r3, #0
    c842:	70a3      	strb	r3, [r4, #2]
    c844:	bd70      	pop	{r4, r5, r6, pc}

0000c846 <attcSendPrepWriteReq>:
    c846:	b570      	push	{r4, r5, r6, lr}
    c848:	7cc3      	ldrb	r3, [r0, #19]
    c84a:	8b85      	ldrh	r5, [r0, #28]
    c84c:	2b01      	cmp	r3, #1
    c84e:	4604      	mov	r4, r0
    c850:	d149      	bne.n	c8e6 <attcSendPrepWriteReq+0xa0>
    c852:	6803      	ldr	r3, [r0, #0]
    c854:	8b5b      	ldrh	r3, [r3, #26]
    c856:	3b05      	subs	r3, #5
    c858:	429d      	cmp	r5, r3
    c85a:	bfa8      	it	ge
    c85c:	b29d      	uxthge	r5, r3
    c85e:	f105 000d 	add.w	r0, r5, #13
    c862:	b280      	uxth	r0, r0
    c864:	f7ff fed0 	bl	c608 <attMsgAlloc>
    c868:	4606      	mov	r6, r0
    c86a:	2800      	cmp	r0, #0
    c86c:	d033      	beq.n	c8d6 <attcSendPrepWriteReq+0x90>
    c86e:	6963      	ldr	r3, [r4, #20]
    c870:	4602      	mov	r2, r0
    c872:	f103 010c 	add.w	r1, r3, #12
    c876:	f853 0b04 	ldr.w	r0, [r3], #4
    c87a:	f842 0b04 	str.w	r0, [r2], #4
    c87e:	428b      	cmp	r3, r1
    c880:	d1f9      	bne.n	c876 <attcSendPrepWriteReq+0x30>
    c882:	781b      	ldrb	r3, [r3, #0]
    c884:	7013      	strb	r3, [r2, #0]
    c886:	6a21      	ldr	r1, [r4, #32]
    c888:	462a      	mov	r2, r5
    c88a:	f106 000d 	add.w	r0, r6, #13
    c88e:	f7ff fc67 	bl	c160 <memcpy>
    c892:	6a23      	ldr	r3, [r4, #32]
    c894:	442b      	add	r3, r5
    c896:	6223      	str	r3, [r4, #32]
    c898:	8ba3      	ldrh	r3, [r4, #28]
    c89a:	1b5b      	subs	r3, r3, r5
    c89c:	83a3      	strh	r3, [r4, #28]
    c89e:	8be3      	ldrh	r3, [r4, #30]
    c8a0:	72f3      	strb	r3, [r6, #11]
    c8a2:	8be3      	ldrh	r3, [r4, #30]
    c8a4:	0a1b      	lsrs	r3, r3, #8
    c8a6:	7333      	strb	r3, [r6, #12]
    c8a8:	8be3      	ldrh	r3, [r4, #30]
    c8aa:	442b      	add	r3, r5
    c8ac:	83e3      	strh	r3, [r4, #30]
    c8ae:	2310      	movs	r3, #16
    c8b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    c8b4:	4b0e      	ldr	r3, [pc, #56]	; (c8f0 <attcSendPrepWriteReq+0xaa>)
    c8b6:	681b      	ldr	r3, [r3, #0]
    c8b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c8bc:	7999      	ldrb	r1, [r3, #6]
    c8be:	f00d ffc9 	bl	1a854 <WsfTimerStartSec>
    c8c2:	6821      	ldr	r1, [r4, #0]
    c8c4:	1d6a      	adds	r2, r5, #5
    c8c6:	4633      	mov	r3, r6
    c8c8:	b292      	uxth	r2, r2
    c8ca:	8b09      	ldrh	r1, [r1, #24]
    c8cc:	2004      	movs	r0, #4
    c8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c8d2:	f003 be6b 	b.w	105ac <L2cDataReq>
    c8d6:	f104 0110 	add.w	r1, r4, #16
    c8da:	4620      	mov	r0, r4
    c8dc:	2270      	movs	r2, #112	; 0x70
    c8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c8e2:	f7ff bf9f 	b.w	c824 <attcReqClear>
    c8e6:	2300      	movs	r3, #0
    c8e8:	6946      	ldr	r6, [r0, #20]
    c8ea:	6143      	str	r3, [r0, #20]
    c8ec:	e7d7      	b.n	c89e <attcSendPrepWriteReq+0x58>
    c8ee:	bf00      	nop
    c8f0:	10002bb4 	.word	0x10002bb4

0000c8f4 <attcSendContinuingReq>:
    c8f4:	b570      	push	{r4, r5, r6, lr}
    c8f6:	7cc3      	ldrb	r3, [r0, #19]
    c8f8:	6945      	ldr	r5, [r0, #20]
    c8fa:	2b01      	cmp	r3, #1
    c8fc:	4604      	mov	r4, r0
    c8fe:	d12e      	bne.n	c95e <attcSendContinuingReq+0x6a>
    c900:	8828      	ldrh	r0, [r5, #0]
    c902:	3008      	adds	r0, #8
    c904:	b280      	uxth	r0, r0
    c906:	f7ff fe7f 	bl	c608 <attMsgAlloc>
    c90a:	4605      	mov	r5, r0
    c90c:	b1f8      	cbz	r0, c94e <attcSendContinuingReq+0x5a>
    c90e:	6961      	ldr	r1, [r4, #20]
    c910:	880a      	ldrh	r2, [r1, #0]
    c912:	3208      	adds	r2, #8
    c914:	f7ff fc24 	bl	c160 <memcpy>
    c918:	7ca2      	ldrb	r2, [r4, #18]
    c91a:	7fa3      	ldrb	r3, [r4, #30]
    c91c:	2a06      	cmp	r2, #6
    c91e:	d121      	bne.n	c964 <attcSendContinuingReq+0x70>
    c920:	72eb      	strb	r3, [r5, #11]
    c922:	8be3      	ldrh	r3, [r4, #30]
    c924:	0a1b      	lsrs	r3, r3, #8
    c926:	732b      	strb	r3, [r5, #12]
    c928:	2310      	movs	r3, #16
    c92a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    c92e:	4b11      	ldr	r3, [pc, #68]	; (c974 <attcSendContinuingReq+0x80>)
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c936:	7999      	ldrb	r1, [r3, #6]
    c938:	f00d ff8c 	bl	1a854 <WsfTimerStartSec>
    c93c:	6821      	ldr	r1, [r4, #0]
    c93e:	882a      	ldrh	r2, [r5, #0]
    c940:	8b09      	ldrh	r1, [r1, #24]
    c942:	462b      	mov	r3, r5
    c944:	2004      	movs	r0, #4
    c946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c94a:	f003 be2f 	b.w	105ac <L2cDataReq>
    c94e:	f104 0110 	add.w	r1, r4, #16
    c952:	4620      	mov	r0, r4
    c954:	2270      	movs	r2, #112	; 0x70
    c956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c95a:	f7ff bf63 	b.w	c824 <attcReqClear>
    c95e:	2300      	movs	r3, #0
    c960:	6143      	str	r3, [r0, #20]
    c962:	e7d9      	b.n	c918 <attcSendContinuingReq+0x24>
    c964:	726b      	strb	r3, [r5, #9]
    c966:	8be3      	ldrh	r3, [r4, #30]
    c968:	0a1b      	lsrs	r3, r3, #8
    c96a:	72ab      	strb	r3, [r5, #10]
    c96c:	8c23      	ldrh	r3, [r4, #32]
    c96e:	72eb      	strb	r3, [r5, #11]
    c970:	8c23      	ldrh	r3, [r4, #32]
    c972:	e7d7      	b.n	c924 <attcSendContinuingReq+0x30>
    c974:	10002bb4 	.word	0x10002bb4

0000c978 <attcConnCback>:
    c978:	788b      	ldrb	r3, [r1, #2]
    c97a:	2b27      	cmp	r3, #39	; 0x27
    c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c980:	4605      	mov	r5, r0
    c982:	d11a      	bne.n	c9ba <attcConnCback+0x42>
    c984:	7f00      	ldrb	r0, [r0, #28]
    c986:	f002 ff49 	bl	f81c <DmConnRole>
    c98a:	2800      	cmp	r0, #0
    c98c:	d14c      	bne.n	ca28 <attcConnCback+0xb0>
    c98e:	4c27      	ldr	r4, [pc, #156]	; (ca2c <attcConnCback+0xb4>)
    c990:	6823      	ldr	r3, [r4, #0]
    c992:	889e      	ldrh	r6, [r3, #4]
    c994:	f008 fe42 	bl	1561c <HciGetMaxRxAclLen>
    c998:	3804      	subs	r0, #4
    c99a:	4286      	cmp	r6, r0
    c99c:	da08      	bge.n	c9b0 <attcConnCback+0x38>
    c99e:	6823      	ldr	r3, [r4, #0]
    c9a0:	8899      	ldrh	r1, [r3, #4]
    c9a2:	2917      	cmp	r1, #23
    c9a4:	d040      	beq.n	ca28 <attcConnCback+0xb0>
    c9a6:	7f28      	ldrb	r0, [r5, #28]
    c9a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c9ac:	f000 ba9c 	b.w	cee8 <AttcMtuReq>
    c9b0:	f008 fe34 	bl	1561c <HciGetMaxRxAclLen>
    c9b4:	1f01      	subs	r1, r0, #4
    c9b6:	b289      	uxth	r1, r1
    c9b8:	e7f3      	b.n	c9a2 <attcConnCback+0x2a>
    c9ba:	2b28      	cmp	r3, #40	; 0x28
    c9bc:	d134      	bne.n	ca28 <attcConnCback+0xb0>
    c9be:	78cc      	ldrb	r4, [r1, #3]
    c9c0:	b904      	cbnz	r4, c9c4 <attcConnCback+0x4c>
    c9c2:	7a0c      	ldrb	r4, [r1, #8]
    c9c4:	7f2e      	ldrb	r6, [r5, #28]
    c9c6:	4d1a      	ldr	r5, [pc, #104]	; (ca30 <attcConnCback+0xb8>)
    c9c8:	3e01      	subs	r6, #1
    c9ca:	2738      	movs	r7, #56	; 0x38
    c9cc:	4377      	muls	r7, r6
    c9ce:	eb05 0807 	add.w	r8, r5, r7
    c9d2:	3420      	adds	r4, #32
    c9d4:	f898 3012 	ldrb.w	r3, [r8, #18]
    c9d8:	b2e4      	uxtb	r4, r4
    c9da:	b15b      	cbz	r3, c9f4 <attcConnCback+0x7c>
    c9dc:	f107 0024 	add.w	r0, r7, #36	; 0x24
    c9e0:	4428      	add	r0, r5
    c9e2:	f00d ff5d 	bl	1a8a0 <WsfTimerStop>
    c9e6:	f107 0110 	add.w	r1, r7, #16
    c9ea:	4622      	mov	r2, r4
    c9ec:	4429      	add	r1, r5
    c9ee:	4640      	mov	r0, r8
    c9f0:	f7ff ff18 	bl	c824 <attcReqClear>
    c9f4:	2338      	movs	r3, #56	; 0x38
    c9f6:	fb03 5306 	mla	r3, r3, r6, r5
    c9fa:	799b      	ldrb	r3, [r3, #6]
    c9fc:	b12b      	cbz	r3, ca0a <attcConnCback+0x92>
    c9fe:	1d39      	adds	r1, r7, #4
    ca00:	4622      	mov	r2, r4
    ca02:	4429      	add	r1, r5
    ca04:	4640      	mov	r0, r8
    ca06:	f7ff ff0d 	bl	c824 <attcReqClear>
    ca0a:	2338      	movs	r3, #56	; 0x38
    ca0c:	fb03 5606 	mla	r6, r3, r6, r5
    ca10:	3630      	adds	r6, #48	; 0x30
    ca12:	2300      	movs	r3, #0
    ca14:	80b3      	strh	r3, [r6, #4]
    ca16:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    ca1a:	b12b      	cbz	r3, ca28 <attcConnCback+0xb0>
    ca1c:	4621      	mov	r1, r4
    ca1e:	4640      	mov	r0, r8
    ca20:	685b      	ldr	r3, [r3, #4]
    ca22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ca26:	4718      	bx	r3
    ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca2c:	10002bb4 	.word	0x10002bb4
    ca30:	100038c8 	.word	0x100038c8

0000ca34 <attcMsgCback>:
    ca34:	b570      	push	{r4, r5, r6, lr}
    ca36:	4605      	mov	r5, r0
    ca38:	7800      	ldrb	r0, [r0, #0]
    ca3a:	f7ff fe8e 	bl	c75a <attcCcbByConnId>
    ca3e:	78ab      	ldrb	r3, [r5, #2]
    ca40:	4604      	mov	r4, r0
    ca42:	b938      	cbnz	r0, ca54 <attcMsgCback+0x20>
    ca44:	3b01      	subs	r3, #1
    ca46:	2b0c      	cmp	r3, #12
    ca48:	d81b      	bhi.n	ca82 <attcMsgCback+0x4e>
    ca4a:	4628      	mov	r0, r5
    ca4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca50:	f7ff beb8 	b.w	c7c4 <attcFreePkt>
    ca54:	2b0c      	cmp	r3, #12
    ca56:	d81a      	bhi.n	ca8e <attcMsgCback+0x5a>
    ca58:	7983      	ldrb	r3, [r0, #6]
    ca5a:	b913      	cbnz	r3, ca62 <attcMsgCback+0x2e>
    ca5c:	7c83      	ldrb	r3, [r0, #18]
    ca5e:	2b01      	cmp	r3, #1
    ca60:	d906      	bls.n	ca70 <attcMsgCback+0x3c>
    ca62:	2272      	movs	r2, #114	; 0x72
    ca64:	4629      	mov	r1, r5
    ca66:	4620      	mov	r0, r4
    ca68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca6c:	f7ff beda 	b.w	c824 <attcReqClear>
    ca70:	d002      	beq.n	ca78 <attcMsgCback+0x44>
    ca72:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    ca76:	b12b      	cbz	r3, ca84 <attcMsgCback+0x50>
    ca78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    ca7c:	3404      	adds	r4, #4
    ca7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ca82:	bd70      	pop	{r4, r5, r6, pc}
    ca84:	4629      	mov	r1, r5
    ca86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca8a:	f7ff be53 	b.w	c734 <attcSetupReq>
    ca8e:	f1a3 020d 	sub.w	r2, r3, #13
    ca92:	2a01      	cmp	r2, #1
    ca94:	d809      	bhi.n	caaa <attcMsgCback+0x76>
    ca96:	4b15      	ldr	r3, [pc, #84]	; (caec <attcMsgCback+0xb8>)
    ca98:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d0f0      	beq.n	ca82 <attcMsgCback+0x4e>
    caa0:	4629      	mov	r1, r5
    caa2:	681b      	ldr	r3, [r3, #0]
    caa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    caa8:	4718      	bx	r3
    caaa:	2b0f      	cmp	r3, #15
    caac:	d10f      	bne.n	cace <attcMsgCback+0x9a>
    caae:	7c83      	ldrb	r3, [r0, #18]
    cab0:	2b01      	cmp	r3, #1
    cab2:	d906      	bls.n	cac2 <attcMsgCback+0x8e>
    cab4:	3024      	adds	r0, #36	; 0x24
    cab6:	f00d fef3 	bl	1a8a0 <WsfTimerStop>
    caba:	2274      	movs	r2, #116	; 0x74
    cabc:	f104 0110 	add.w	r1, r4, #16
    cac0:	e7d1      	b.n	ca66 <attcMsgCback+0x32>
    cac2:	7983      	ldrb	r3, [r0, #6]
    cac4:	2b00      	cmp	r3, #0
    cac6:	d0dc      	beq.n	ca82 <attcMsgCback+0x4e>
    cac8:	2274      	movs	r2, #116	; 0x74
    caca:	1d01      	adds	r1, r0, #4
    cacc:	e7cc      	b.n	ca68 <attcMsgCback+0x34>
    cace:	2b10      	cmp	r3, #16
    cad0:	d1d7      	bne.n	ca82 <attcMsgCback+0x4e>
    cad2:	7c83      	ldrb	r3, [r0, #18]
    cad4:	2b00      	cmp	r3, #0
    cad6:	d0d4      	beq.n	ca82 <attcMsgCback+0x4e>
    cad8:	2271      	movs	r2, #113	; 0x71
    cada:	f100 0110 	add.w	r1, r0, #16
    cade:	f7ff fea1 	bl	c824 <attcReqClear>
    cae2:	6823      	ldr	r3, [r4, #0]
    cae4:	2201      	movs	r2, #1
    cae6:	77da      	strb	r2, [r3, #31]
    cae8:	e7cb      	b.n	ca82 <attcMsgCback+0x4e>
    caea:	bf00      	nop
    caec:	100038c8 	.word	0x100038c8

0000caf0 <AttcInit>:
    caf0:	b510      	push	{r4, lr}
    caf2:	490c      	ldr	r1, [pc, #48]	; (cb24 <AttcInit+0x34>)
    caf4:	4a0c      	ldr	r2, [pc, #48]	; (cb28 <AttcInit+0x38>)
    caf6:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    cafa:	2300      	movs	r3, #0
    cafc:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    cb00:	3238      	adds	r2, #56	; 0x38
    cb02:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    cb06:	3301      	adds	r3, #1
    cb08:	2b08      	cmp	r3, #8
    cb0a:	f842 4c38 	str.w	r4, [r2, #-56]
    cb0e:	f802 0c0c 	strb.w	r0, [r2, #-12]
    cb12:	f822 3c0a 	strh.w	r3, [r2, #-10]
    cb16:	f102 0238 	add.w	r2, r2, #56	; 0x38
    cb1a:	d1f2      	bne.n	cb02 <AttcInit+0x12>
    cb1c:	4b03      	ldr	r3, [pc, #12]	; (cb2c <AttcInit+0x3c>)
    cb1e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    cb22:	bd10      	pop	{r4, pc}
    cb24:	100037b4 	.word	0x100037b4
    cb28:	100038c8 	.word	0x100038c8
    cb2c:	00022e68 	.word	0x00022e68

0000cb30 <attcProcErrRsp>:
    cb30:	7c81      	ldrb	r1, [r0, #18]
    cb32:	7099      	strb	r1, [r3, #2]
    cb34:	1f48      	subs	r0, r1, #5
    cb36:	2801      	cmp	r0, #1
    cb38:	d908      	bls.n	cb4c <attcProcErrRsp+0x1c>
    cb3a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    cb3e:	2909      	cmp	r1, #9
    cb40:	bf1f      	itttt	ne
    cb42:	7ad0      	ldrbne	r0, [r2, #11]
    cb44:	7a91      	ldrbne	r1, [r2, #10]
    cb46:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    cb4a:	8159      	strhne	r1, [r3, #10]
    cb4c:	7b12      	ldrb	r2, [r2, #12]
    cb4e:	b11a      	cbz	r2, cb58 <attcProcErrRsp+0x28>
    cb50:	70da      	strb	r2, [r3, #3]
    cb52:	2200      	movs	r2, #0
    cb54:	811a      	strh	r2, [r3, #8]
    cb56:	4770      	bx	lr
    cb58:	2275      	movs	r2, #117	; 0x75
    cb5a:	e7f9      	b.n	cb50 <attcProcErrRsp+0x20>

0000cb5c <attcProcFindOrReadRsp>:
    cb5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb60:	7c87      	ldrb	r7, [r0, #18]
    cb62:	7a55      	ldrb	r5, [r2, #9]
    cb64:	3108      	adds	r1, #8
    cb66:	2f02      	cmp	r7, #2
    cb68:	4411      	add	r1, r2
    cb6a:	f102 020a 	add.w	r2, r2, #10
    cb6e:	d12a      	bne.n	cbc6 <attcProcFindOrReadRsp+0x6a>
    cb70:	2d01      	cmp	r5, #1
    cb72:	bf14      	ite	ne
    cb74:	2510      	movne	r5, #16
    cb76:	2502      	moveq	r5, #2
    cb78:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    cb7c:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cb80:	428a      	cmp	r2, r1
    cb82:	d210      	bcs.n	cba6 <attcProcFindOrReadRsp+0x4a>
    cb84:	7854      	ldrb	r4, [r2, #1]
    cb86:	7816      	ldrb	r6, [r2, #0]
    cb88:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    cb8c:	b2b6      	uxth	r6, r6
    cb8e:	b146      	cbz	r6, cba2 <attcProcFindOrReadRsp+0x46>
    cb90:	f1bc 0f00 	cmp.w	ip, #0
    cb94:	d005      	beq.n	cba2 <attcProcFindOrReadRsp+0x46>
    cb96:	45b4      	cmp	ip, r6
    cb98:	d803      	bhi.n	cba2 <attcProcFindOrReadRsp+0x46>
    cb9a:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cb9e:	45b0      	cmp	r8, r6
    cba0:	d217      	bcs.n	cbd2 <attcProcFindOrReadRsp+0x76>
    cba2:	2273      	movs	r2, #115	; 0x73
    cba4:	70da      	strb	r2, [r3, #3]
    cba6:	78db      	ldrb	r3, [r3, #3]
    cba8:	b95b      	cbnz	r3, cbc2 <attcProcFindOrReadRsp+0x66>
    cbaa:	7cc3      	ldrb	r3, [r0, #19]
    cbac:	2b01      	cmp	r3, #1
    cbae:	d108      	bne.n	cbc2 <attcProcFindOrReadRsp+0x66>
    cbb0:	f1bc 0f00 	cmp.w	ip, #0
    cbb4:	d003      	beq.n	cbbe <attcProcFindOrReadRsp+0x62>
    cbb6:	8c03      	ldrh	r3, [r0, #32]
    cbb8:	3301      	adds	r3, #1
    cbba:	459c      	cmp	ip, r3
    cbbc:	d129      	bne.n	cc12 <attcProcFindOrReadRsp+0xb6>
    cbbe:	2300      	movs	r3, #0
    cbc0:	74c3      	strb	r3, [r0, #19]
    cbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbc6:	2f04      	cmp	r7, #4
    cbc8:	bf0c      	ite	eq
    cbca:	3d02      	subeq	r5, #2
    cbcc:	3d04      	subne	r5, #4
    cbce:	b2ed      	uxtb	r5, r5
    cbd0:	e7d2      	b.n	cb78 <attcProcFindOrReadRsp+0x1c>
    cbd2:	2f08      	cmp	r7, #8
    cbd4:	d11a      	bne.n	cc0c <attcProcFindOrReadRsp+0xb0>
    cbd6:	f892 9003 	ldrb.w	r9, [r2, #3]
    cbda:	7894      	ldrb	r4, [r2, #2]
    cbdc:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cbe0:	b2a4      	uxth	r4, r4
    cbe2:	3204      	adds	r2, #4
    cbe4:	2c00      	cmp	r4, #0
    cbe6:	d0dc      	beq.n	cba2 <attcProcFindOrReadRsp+0x46>
    cbe8:	42a6      	cmp	r6, r4
    cbea:	d8da      	bhi.n	cba2 <attcProcFindOrReadRsp+0x46>
    cbec:	45a4      	cmp	ip, r4
    cbee:	d8d8      	bhi.n	cba2 <attcProcFindOrReadRsp+0x46>
    cbf0:	45a0      	cmp	r8, r4
    cbf2:	d3d6      	bcc.n	cba2 <attcProcFindOrReadRsp+0x46>
    cbf4:	4574      	cmp	r4, lr
    cbf6:	bf18      	it	ne
    cbf8:	3401      	addne	r4, #1
    cbfa:	442a      	add	r2, r5
    cbfc:	bf14      	ite	ne
    cbfe:	fa1f fc84 	uxthne.w	ip, r4
    cc02:	f04f 0c00 	moveq.w	ip, #0
    cc06:	4291      	cmp	r1, r2
    cc08:	d2ba      	bcs.n	cb80 <attcProcFindOrReadRsp+0x24>
    cc0a:	e7ca      	b.n	cba2 <attcProcFindOrReadRsp+0x46>
    cc0c:	3202      	adds	r2, #2
    cc0e:	4634      	mov	r4, r6
    cc10:	e7f0      	b.n	cbf4 <attcProcFindOrReadRsp+0x98>
    cc12:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cc16:	f8a0 c018 	strh.w	ip, [r0, #24]
    cc1a:	e7d2      	b.n	cbc2 <attcProcFindOrReadRsp+0x66>

0000cc1c <attcProcReadRsp>:
    cc1c:	4770      	bx	lr

0000cc1e <attcProcWriteRsp>:
    cc1e:	2200      	movs	r2, #0
    cc20:	811a      	strh	r2, [r3, #8]
    cc22:	4770      	bx	lr

0000cc24 <attcProcMtuRsp>:
    cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc26:	7a93      	ldrb	r3, [r2, #10]
    cc28:	7a54      	ldrb	r4, [r2, #9]
    cc2a:	4d0e      	ldr	r5, [pc, #56]	; (cc64 <attcProcMtuRsp+0x40>)
    cc2c:	6806      	ldr	r6, [r0, #0]
    cc2e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cc32:	b2a4      	uxth	r4, r4
    cc34:	682b      	ldr	r3, [r5, #0]
    cc36:	2c17      	cmp	r4, #23
    cc38:	bf38      	it	cc
    cc3a:	2417      	movcc	r4, #23
    cc3c:	889f      	ldrh	r7, [r3, #4]
    cc3e:	f008 fced 	bl	1561c <HciGetMaxRxAclLen>
    cc42:	3804      	subs	r0, #4
    cc44:	4287      	cmp	r7, r0
    cc46:	da07      	bge.n	cc58 <attcProcMtuRsp+0x34>
    cc48:	682b      	ldr	r3, [r5, #0]
    cc4a:	889a      	ldrh	r2, [r3, #4]
    cc4c:	4621      	mov	r1, r4
    cc4e:	4630      	mov	r0, r6
    cc50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cc54:	f7ff bcc6 	b.w	c5e4 <attSetMtu>
    cc58:	f008 fce0 	bl	1561c <HciGetMaxRxAclLen>
    cc5c:	1f02      	subs	r2, r0, #4
    cc5e:	b292      	uxth	r2, r2
    cc60:	e7f4      	b.n	cc4c <attcProcMtuRsp+0x28>
    cc62:	bf00      	nop
    cc64:	10002bb4 	.word	0x10002bb4

0000cc68 <attcProcRsp>:
    cc68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cc6c:	460f      	mov	r7, r1
    cc6e:	7c81      	ldrb	r1, [r0, #18]
    cc70:	4604      	mov	r4, r0
    cc72:	4616      	mov	r6, r2
    cc74:	2900      	cmp	r1, #0
    cc76:	d042      	beq.n	ccfe <attcProcRsp+0x96>
    cc78:	7a13      	ldrb	r3, [r2, #8]
    cc7a:	105b      	asrs	r3, r3, #1
    cc7c:	b2da      	uxtb	r2, r3
    cc7e:	f88d 2002 	strb.w	r2, [sp, #2]
    cc82:	b10b      	cbz	r3, cc88 <attcProcRsp+0x20>
    cc84:	4291      	cmp	r1, r2
    cc86:	d13a      	bne.n	ccfe <attcProcRsp+0x96>
    cc88:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cc8c:	f00d fe08 	bl	1a8a0 <WsfTimerStop>
    cc90:	f106 0309 	add.w	r3, r6, #9
    cc94:	9301      	str	r3, [sp, #4]
    cc96:	1e7b      	subs	r3, r7, #1
    cc98:	f8ad 3008 	strh.w	r3, [sp, #8]
    cc9c:	8b23      	ldrh	r3, [r4, #24]
    cc9e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    cca2:	f8ad 300a 	strh.w	r3, [sp, #10]
    cca6:	4b1c      	ldr	r3, [pc, #112]	; (cd18 <attcProcRsp+0xb0>)
    cca8:	2500      	movs	r5, #0
    ccaa:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    ccae:	f88d 5003 	strb.w	r5, [sp, #3]
    ccb2:	466b      	mov	r3, sp
    ccb4:	4632      	mov	r2, r6
    ccb6:	4639      	mov	r1, r7
    ccb8:	4620      	mov	r0, r4
    ccba:	47c0      	blx	r8
    ccbc:	7ce3      	ldrb	r3, [r4, #19]
    ccbe:	b113      	cbz	r3, ccc6 <attcProcRsp+0x5e>
    ccc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccc4:	b123      	cbz	r3, ccd0 <attcProcRsp+0x68>
    ccc6:	74a5      	strb	r5, [r4, #18]
    ccc8:	f104 0010 	add.w	r0, r4, #16
    cccc:	f7ff fd7a 	bl	c7c4 <attcFreePkt>
    ccd0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ccd4:	2b01      	cmp	r3, #1
    ccd6:	d00a      	beq.n	ccee <attcProcRsp+0x86>
    ccd8:	7ce3      	ldrb	r3, [r4, #19]
    ccda:	f88d 300c 	strb.w	r3, [sp, #12]
    ccde:	8a23      	ldrh	r3, [r4, #16]
    cce0:	f8ad 3000 	strh.w	r3, [sp]
    cce4:	4b0d      	ldr	r3, [pc, #52]	; (cd1c <attcProcRsp+0xb4>)
    cce6:	4668      	mov	r0, sp
    cce8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    ccec:	4798      	blx	r3
    ccee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ccf2:	b923      	cbnz	r3, ccfe <attcProcRsp+0x96>
    ccf4:	6965      	ldr	r5, [r4, #20]
    ccf6:	b12d      	cbz	r5, cd04 <attcProcRsp+0x9c>
    ccf8:	4620      	mov	r0, r4
    ccfa:	f7ff fd13 	bl	c724 <attcSendReq>
    ccfe:	b004      	add	sp, #16
    cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd04:	79a3      	ldrb	r3, [r4, #6]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d0f9      	beq.n	ccfe <attcProcRsp+0x96>
    cd0a:	1d21      	adds	r1, r4, #4
    cd0c:	4620      	mov	r0, r4
    cd0e:	f7ff fd11 	bl	c734 <attcSetupReq>
    cd12:	71a5      	strb	r5, [r4, #6]
    cd14:	e7f3      	b.n	ccfe <attcProcRsp+0x96>
    cd16:	bf00      	nop
    cd18:	00022e78 	.word	0x00022e78
    cd1c:	100037b4 	.word	0x100037b4

0000cd20 <attcProcInd>:
    cd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cd22:	7a13      	ldrb	r3, [r2, #8]
    cd24:	4604      	mov	r4, r0
    cd26:	105b      	asrs	r3, r3, #1
    cd28:	7a90      	ldrb	r0, [r2, #10]
    cd2a:	f88d 3002 	strb.w	r3, [sp, #2]
    cd2e:	320b      	adds	r2, #11
    cd30:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    cd34:	9201      	str	r2, [sp, #4]
    cd36:	6822      	ldr	r2, [r4, #0]
    cd38:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    cd3c:	7f12      	ldrb	r2, [r2, #28]
    cd3e:	f8ad 2000 	strh.w	r2, [sp]
    cd42:	b29b      	uxth	r3, r3
    cd44:	2200      	movs	r2, #0
    cd46:	3903      	subs	r1, #3
    cd48:	f8ad 300a 	strh.w	r3, [sp, #10]
    cd4c:	f8ad 1008 	strh.w	r1, [sp, #8]
    cd50:	f88d 2003 	strb.w	r2, [sp, #3]
    cd54:	f88d 200c 	strb.w	r2, [sp, #12]
    cd58:	b123      	cbz	r3, cd64 <attcProcInd+0x44>
    cd5a:	4b0f      	ldr	r3, [pc, #60]	; (cd98 <attcProcInd+0x78>)
    cd5c:	4668      	mov	r0, sp
    cd5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    cd62:	4798      	blx	r3
    cd64:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cd68:	2b0e      	cmp	r3, #14
    cd6a:	d10f      	bne.n	cd8c <attcProcInd+0x6c>
    cd6c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    cd70:	b973      	cbnz	r3, cd90 <attcProcInd+0x70>
    cd72:	2009      	movs	r0, #9
    cd74:	f7ff fc48 	bl	c608 <attMsgAlloc>
    cd78:	4603      	mov	r3, r0
    cd7a:	b138      	cbz	r0, cd8c <attcProcInd+0x6c>
    cd7c:	221e      	movs	r2, #30
    cd7e:	7202      	strb	r2, [r0, #8]
    cd80:	6821      	ldr	r1, [r4, #0]
    cd82:	2201      	movs	r2, #1
    cd84:	8b09      	ldrh	r1, [r1, #24]
    cd86:	2004      	movs	r0, #4
    cd88:	f003 fc10 	bl	105ac <L2cDataReq>
    cd8c:	b004      	add	sp, #16
    cd8e:	bd10      	pop	{r4, pc}
    cd90:	2301      	movs	r3, #1
    cd92:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    cd96:	e7f9      	b.n	cd8c <attcProcInd+0x6c>
    cd98:	100037b4 	.word	0x100037b4

0000cd9c <attcSendMsg>:
    cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cda0:	4605      	mov	r5, r0
    cda2:	460f      	mov	r7, r1
    cda4:	4616      	mov	r6, r2
    cda6:	461c      	mov	r4, r3
    cda8:	f89d 8020 	ldrb.w	r8, [sp, #32]
    cdac:	f00b fed8 	bl	18b60 <WsfTaskLock>
    cdb0:	4628      	mov	r0, r5
    cdb2:	f7ff fcd2 	bl	c75a <attcCcbByConnId>
    cdb6:	b920      	cbnz	r0, cdc2 <attcSendMsg+0x26>
    cdb8:	f00b fed8 	bl	18b6c <WsfTaskUnlock>
    cdbc:	bb7c      	cbnz	r4, ce1e <attcSendMsg+0x82>
    cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cdc2:	6803      	ldr	r3, [r0, #0]
    cdc4:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    cdc8:	f00b fed0 	bl	18b6c <WsfTaskUnlock>
    cdcc:	f1b9 0f00 	cmp.w	r9, #0
    cdd0:	d0f4      	beq.n	cdbc <attcSendMsg+0x20>
    cdd2:	b124      	cbz	r4, cdde <attcSendMsg+0x42>
    cdd4:	2e0b      	cmp	r6, #11
    cdd6:	d015      	beq.n	ce04 <attcSendMsg+0x68>
    cdd8:	8823      	ldrh	r3, [r4, #0]
    cdda:	454b      	cmp	r3, r9
    cddc:	d819      	bhi.n	ce12 <attcSendMsg+0x76>
    cdde:	200c      	movs	r0, #12
    cde0:	f00d fb7f 	bl	1a4e2 <WsfMsgAlloc>
    cde4:	4601      	mov	r1, r0
    cde6:	2800      	cmp	r0, #0
    cde8:	d0e8      	beq.n	cdbc <attcSendMsg+0x20>
    cdea:	4b0f      	ldr	r3, [pc, #60]	; (ce28 <attcSendMsg+0x8c>)
    cdec:	8005      	strh	r5, [r0, #0]
    cdee:	f880 8003 	strb.w	r8, [r0, #3]
    cdf2:	7086      	strb	r6, [r0, #2]
    cdf4:	6044      	str	r4, [r0, #4]
    cdf6:	8107      	strh	r7, [r0, #8]
    cdf8:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    cdfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce00:	f00d bb93 	b.w	1a52a <WsfMsgSend>
    ce04:	f1b8 0f00 	cmp.w	r8, #0
    ce08:	d1e9      	bne.n	cdde <attcSendMsg+0x42>
    ce0a:	8823      	ldrh	r3, [r4, #0]
    ce0c:	3305      	adds	r3, #5
    ce0e:	b29b      	uxth	r3, r3
    ce10:	e7e3      	b.n	cdda <attcSendMsg+0x3e>
    ce12:	2377      	movs	r3, #119	; 0x77
    ce14:	463a      	mov	r2, r7
    ce16:	4631      	mov	r1, r6
    ce18:	4628      	mov	r0, r5
    ce1a:	f7ff fcec 	bl	c7f6 <attcExecCallback>
    ce1e:	4620      	mov	r0, r4
    ce20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce24:	f00d bb74 	b.w	1a510 <WsfMsgFree>
    ce28:	100037b4 	.word	0x100037b4

0000ce2c <AttcFindInfoReq>:
    ce2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ce2e:	4605      	mov	r5, r0
    ce30:	200d      	movs	r0, #13
    ce32:	460c      	mov	r4, r1
    ce34:	4617      	mov	r7, r2
    ce36:	461e      	mov	r6, r3
    ce38:	f7ff fbe6 	bl	c608 <attMsgAlloc>
    ce3c:	b160      	cbz	r0, ce58 <AttcFindInfoReq+0x2c>
    ce3e:	2305      	movs	r3, #5
    ce40:	8003      	strh	r3, [r0, #0]
    ce42:	2304      	movs	r3, #4
    ce44:	7203      	strb	r3, [r0, #8]
    ce46:	8044      	strh	r4, [r0, #2]
    ce48:	8087      	strh	r7, [r0, #4]
    ce4a:	4603      	mov	r3, r0
    ce4c:	9600      	str	r6, [sp, #0]
    ce4e:	2202      	movs	r2, #2
    ce50:	4621      	mov	r1, r4
    ce52:	4628      	mov	r0, r5
    ce54:	f7ff ffa2 	bl	cd9c <attcSendMsg>
    ce58:	b003      	add	sp, #12
    ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ce5c <AttcReadReq>:
    ce5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce5e:	4605      	mov	r5, r0
    ce60:	200b      	movs	r0, #11
    ce62:	460c      	mov	r4, r1
    ce64:	f7ff fbd0 	bl	c608 <attMsgAlloc>
    ce68:	4603      	mov	r3, r0
    ce6a:	b168      	cbz	r0, ce88 <AttcReadReq+0x2c>
    ce6c:	2203      	movs	r2, #3
    ce6e:	8002      	strh	r2, [r0, #0]
    ce70:	220a      	movs	r2, #10
    ce72:	7202      	strb	r2, [r0, #8]
    ce74:	0a22      	lsrs	r2, r4, #8
    ce76:	7282      	strb	r2, [r0, #10]
    ce78:	2200      	movs	r2, #0
    ce7a:	7244      	strb	r4, [r0, #9]
    ce7c:	4621      	mov	r1, r4
    ce7e:	9200      	str	r2, [sp, #0]
    ce80:	4628      	mov	r0, r5
    ce82:	2205      	movs	r2, #5
    ce84:	f7ff ff8a 	bl	cd9c <attcSendMsg>
    ce88:	b003      	add	sp, #12
    ce8a:	bd30      	pop	{r4, r5, pc}

0000ce8c <AttcWriteReq>:
    ce8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ce90:	4607      	mov	r7, r0
    ce92:	f102 000b 	add.w	r0, r2, #11
    ce96:	b280      	uxth	r0, r0
    ce98:	460d      	mov	r5, r1
    ce9a:	4616      	mov	r6, r2
    ce9c:	4698      	mov	r8, r3
    ce9e:	f7ff fbb3 	bl	c608 <attMsgAlloc>
    cea2:	4604      	mov	r4, r0
    cea4:	b198      	cbz	r0, cece <AttcWriteReq+0x42>
    cea6:	1cf3      	adds	r3, r6, #3
    cea8:	8003      	strh	r3, [r0, #0]
    ceaa:	2312      	movs	r3, #18
    ceac:	7203      	strb	r3, [r0, #8]
    ceae:	0a2b      	lsrs	r3, r5, #8
    ceb0:	7283      	strb	r3, [r0, #10]
    ceb2:	7245      	strb	r5, [r0, #9]
    ceb4:	4632      	mov	r2, r6
    ceb6:	4641      	mov	r1, r8
    ceb8:	300b      	adds	r0, #11
    ceba:	f7ff f951 	bl	c160 <memcpy>
    cebe:	2300      	movs	r3, #0
    cec0:	9300      	str	r3, [sp, #0]
    cec2:	2209      	movs	r2, #9
    cec4:	4623      	mov	r3, r4
    cec6:	4629      	mov	r1, r5
    cec8:	4638      	mov	r0, r7
    ceca:	f7ff ff67 	bl	cd9c <attcSendMsg>
    cece:	b002      	add	sp, #8
    ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ced4 <AttcCancelReq>:
    ced4:	b507      	push	{r0, r1, r2, lr}
    ced6:	2300      	movs	r3, #0
    ced8:	9300      	str	r3, [sp, #0]
    ceda:	220f      	movs	r2, #15
    cedc:	4619      	mov	r1, r3
    cede:	f7ff ff5d 	bl	cd9c <attcSendMsg>
    cee2:	b003      	add	sp, #12
    cee4:	f85d fb04 	ldr.w	pc, [sp], #4

0000cee8 <AttcMtuReq>:
    cee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ceea:	4605      	mov	r5, r0
    ceec:	200b      	movs	r0, #11
    ceee:	460c      	mov	r4, r1
    cef0:	f7ff fb8a 	bl	c608 <attMsgAlloc>
    cef4:	4603      	mov	r3, r0
    cef6:	b160      	cbz	r0, cf12 <AttcMtuReq+0x2a>
    cef8:	2203      	movs	r2, #3
    cefa:	8002      	strh	r2, [r0, #0]
    cefc:	7244      	strb	r4, [r0, #9]
    cefe:	2202      	movs	r2, #2
    cf00:	0a24      	lsrs	r4, r4, #8
    cf02:	2100      	movs	r1, #0
    cf04:	7202      	strb	r2, [r0, #8]
    cf06:	7284      	strb	r4, [r0, #10]
    cf08:	2201      	movs	r2, #1
    cf0a:	9100      	str	r1, [sp, #0]
    cf0c:	4628      	mov	r0, r5
    cf0e:	f7ff ff45 	bl	cd9c <attcSendMsg>
    cf12:	b003      	add	sp, #12
    cf14:	bd30      	pop	{r4, r5, pc}
    cf16:	bf00      	nop

0000cf18 <attcProcFindByTypeRsp>:
    cf18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf1a:	3108      	adds	r1, #8
    cf1c:	8bc5      	ldrh	r5, [r0, #30]
    cf1e:	f102 0609 	add.w	r6, r2, #9
    cf22:	440a      	add	r2, r1
    cf24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cf28:	4296      	cmp	r6, r2
    cf2a:	d217      	bcs.n	cf5c <attcProcFindByTypeRsp+0x44>
    cf2c:	7874      	ldrb	r4, [r6, #1]
    cf2e:	7837      	ldrb	r7, [r6, #0]
    cf30:	f896 c003 	ldrb.w	ip, [r6, #3]
    cf34:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    cf38:	78b4      	ldrb	r4, [r6, #2]
    cf3a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    cf3e:	b2bf      	uxth	r7, r7
    cf40:	b2a4      	uxth	r4, r4
    cf42:	42a7      	cmp	r7, r4
    cf44:	f106 0604 	add.w	r6, r6, #4
    cf48:	d806      	bhi.n	cf58 <attcProcFindByTypeRsp+0x40>
    cf4a:	42bd      	cmp	r5, r7
    cf4c:	d804      	bhi.n	cf58 <attcProcFindByTypeRsp+0x40>
    cf4e:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    cf52:	45bc      	cmp	ip, r7
    cf54:	d300      	bcc.n	cf58 <attcProcFindByTypeRsp+0x40>
    cf56:	b96d      	cbnz	r5, cf74 <attcProcFindByTypeRsp+0x5c>
    cf58:	2273      	movs	r2, #115	; 0x73
    cf5a:	70da      	strb	r2, [r3, #3]
    cf5c:	78db      	ldrb	r3, [r3, #3]
    cf5e:	b943      	cbnz	r3, cf72 <attcProcFindByTypeRsp+0x5a>
    cf60:	7cc3      	ldrb	r3, [r0, #19]
    cf62:	2b01      	cmp	r3, #1
    cf64:	d105      	bne.n	cf72 <attcProcFindByTypeRsp+0x5a>
    cf66:	b115      	cbz	r5, cf6e <attcProcFindByTypeRsp+0x56>
    cf68:	8c03      	ldrh	r3, [r0, #32]
    cf6a:	42ab      	cmp	r3, r5
    cf6c:	d20a      	bcs.n	cf84 <attcProcFindByTypeRsp+0x6c>
    cf6e:	2300      	movs	r3, #0
    cf70:	74c3      	strb	r3, [r0, #19]
    cf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf74:	428c      	cmp	r4, r1
    cf76:	bf1a      	itte	ne
    cf78:	3401      	addne	r4, #1
    cf7a:	b2a5      	uxthne	r5, r4
    cf7c:	2500      	moveq	r5, #0
    cf7e:	42b2      	cmp	r2, r6
    cf80:	d2d2      	bcs.n	cf28 <attcProcFindByTypeRsp+0x10>
    cf82:	e7e9      	b.n	cf58 <attcProcFindByTypeRsp+0x40>
    cf84:	83c5      	strh	r5, [r0, #30]
    cf86:	8305      	strh	r5, [r0, #24]
    cf88:	e7f3      	b.n	cf72 <attcProcFindByTypeRsp+0x5a>

0000cf8a <attcProcReadLongRsp>:
    cf8a:	7cc2      	ldrb	r2, [r0, #19]
    cf8c:	2a01      	cmp	r2, #1
    cf8e:	d10a      	bne.n	cfa6 <attcProcReadLongRsp+0x1c>
    cf90:	6802      	ldr	r2, [r0, #0]
    cf92:	8b52      	ldrh	r2, [r2, #26]
    cf94:	428a      	cmp	r2, r1
    cf96:	d902      	bls.n	cf9e <attcProcReadLongRsp+0x14>
    cf98:	2300      	movs	r3, #0
    cf9a:	74c3      	strb	r3, [r0, #19]
    cf9c:	4770      	bx	lr
    cf9e:	8bc2      	ldrh	r2, [r0, #30]
    cfa0:	891b      	ldrh	r3, [r3, #8]
    cfa2:	4413      	add	r3, r2
    cfa4:	83c3      	strh	r3, [r0, #30]
    cfa6:	4770      	bx	lr

0000cfa8 <AttcFindByTypeValueReq>:
    cfa8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfac:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    cfb0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    cfb4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    cfb8:	4680      	mov	r8, r0
    cfba:	f106 000f 	add.w	r0, r6, #15
    cfbe:	b280      	uxth	r0, r0
    cfc0:	460f      	mov	r7, r1
    cfc2:	4693      	mov	fp, r2
    cfc4:	461d      	mov	r5, r3
    cfc6:	f7ff fb1f 	bl	c608 <attMsgAlloc>
    cfca:	4604      	mov	r4, r0
    cfcc:	b1c8      	cbz	r0, d002 <AttcFindByTypeValueReq+0x5a>
    cfce:	1df3      	adds	r3, r6, #7
    cfd0:	8003      	strh	r3, [r0, #0]
    cfd2:	7345      	strb	r5, [r0, #13]
    cfd4:	2306      	movs	r3, #6
    cfd6:	0a2d      	lsrs	r5, r5, #8
    cfd8:	8047      	strh	r7, [r0, #2]
    cfda:	f8a0 b004 	strh.w	fp, [r0, #4]
    cfde:	7203      	strb	r3, [r0, #8]
    cfe0:	7385      	strb	r5, [r0, #14]
    cfe2:	4632      	mov	r2, r6
    cfe4:	4651      	mov	r1, sl
    cfe6:	300f      	adds	r0, #15
    cfe8:	f7ff f8ba 	bl	c160 <memcpy>
    cfec:	4623      	mov	r3, r4
    cfee:	2203      	movs	r2, #3
    cff0:	4639      	mov	r1, r7
    cff2:	4640      	mov	r0, r8
    cff4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    cff8:	b001      	add	sp, #4
    cffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cffe:	f7ff becd 	b.w	cd9c <attcSendMsg>
    d002:	b001      	add	sp, #4
    d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d008 <AttcReadByTypeReq>:
    d008:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d00c:	b29d      	uxth	r5, r3
    d00e:	4680      	mov	r8, r0
    d010:	f105 000d 	add.w	r0, r5, #13
    d014:	460e      	mov	r6, r1
    d016:	4693      	mov	fp, r2
    d018:	461f      	mov	r7, r3
    d01a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d01e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d022:	f7ff faf1 	bl	c608 <attMsgAlloc>
    d026:	4604      	mov	r4, r0
    d028:	b1b0      	cbz	r0, d058 <AttcReadByTypeReq+0x50>
    d02a:	2308      	movs	r3, #8
    d02c:	3505      	adds	r5, #5
    d02e:	8005      	strh	r5, [r0, #0]
    d030:	8046      	strh	r6, [r0, #2]
    d032:	f8a0 b004 	strh.w	fp, [r0, #4]
    d036:	7203      	strb	r3, [r0, #8]
    d038:	463a      	mov	r2, r7
    d03a:	4651      	mov	r1, sl
    d03c:	300d      	adds	r0, #13
    d03e:	f7ff f88f 	bl	c160 <memcpy>
    d042:	4623      	mov	r3, r4
    d044:	2204      	movs	r2, #4
    d046:	4631      	mov	r1, r6
    d048:	4640      	mov	r0, r8
    d04a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d04e:	b001      	add	sp, #4
    d050:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d054:	f7ff bea2 	b.w	cd9c <attcSendMsg>
    d058:	b001      	add	sp, #4
    d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d05e <AttcReadLongReq>:
    d05e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d060:	4605      	mov	r5, r0
    d062:	200d      	movs	r0, #13
    d064:	460c      	mov	r4, r1
    d066:	4617      	mov	r7, r2
    d068:	461e      	mov	r6, r3
    d06a:	f7ff facd 	bl	c608 <attMsgAlloc>
    d06e:	b170      	cbz	r0, d08e <AttcReadLongReq+0x30>
    d070:	2305      	movs	r3, #5
    d072:	8003      	strh	r3, [r0, #0]
    d074:	230c      	movs	r3, #12
    d076:	7203      	strb	r3, [r0, #8]
    d078:	0a23      	lsrs	r3, r4, #8
    d07a:	7283      	strb	r3, [r0, #10]
    d07c:	8047      	strh	r7, [r0, #2]
    d07e:	7244      	strb	r4, [r0, #9]
    d080:	4603      	mov	r3, r0
    d082:	9600      	str	r6, [sp, #0]
    d084:	2206      	movs	r2, #6
    d086:	4621      	mov	r1, r4
    d088:	4628      	mov	r0, r5
    d08a:	f7ff fe87 	bl	cd9c <attcSendMsg>
    d08e:	b003      	add	sp, #12
    d090:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d092 <AttcReadMultipleReq>:
    d092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d094:	004e      	lsls	r6, r1, #1
    d096:	4607      	mov	r7, r0
    d098:	f106 0009 	add.w	r0, r6, #9
    d09c:	460d      	mov	r5, r1
    d09e:	4614      	mov	r4, r2
    d0a0:	f7ff fab2 	bl	c608 <attMsgAlloc>
    d0a4:	4603      	mov	r3, r0
    d0a6:	b1a0      	cbz	r0, d0d2 <AttcReadMultipleReq+0x40>
    d0a8:	3601      	adds	r6, #1
    d0aa:	4622      	mov	r2, r4
    d0ac:	8006      	strh	r6, [r0, #0]
    d0ae:	200e      	movs	r0, #14
    d0b0:	f832 1902 	ldrh.w	r1, [r2], #-2
    d0b4:	7218      	strb	r0, [r3, #8]
    d0b6:	f103 0009 	add.w	r0, r3, #9
    d0ba:	3d01      	subs	r5, #1
    d0bc:	b2ed      	uxtb	r5, r5
    d0be:	2dff      	cmp	r5, #255	; 0xff
    d0c0:	f100 0002 	add.w	r0, r0, #2
    d0c4:	d107      	bne.n	d0d6 <AttcReadMultipleReq+0x44>
    d0c6:	2200      	movs	r2, #0
    d0c8:	9200      	str	r2, [sp, #0]
    d0ca:	4638      	mov	r0, r7
    d0cc:	2207      	movs	r2, #7
    d0ce:	f7ff fe65 	bl	cd9c <attcSendMsg>
    d0d2:	b003      	add	sp, #12
    d0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0d6:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d0da:	f800 4c02 	strb.w	r4, [r0, #-2]
    d0de:	8814      	ldrh	r4, [r2, #0]
    d0e0:	0a24      	lsrs	r4, r4, #8
    d0e2:	f800 4c01 	strb.w	r4, [r0, #-1]
    d0e6:	e7e8      	b.n	d0ba <AttcReadMultipleReq+0x28>

0000d0e8 <AttcReadByGroupTypeReq>:
    d0e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0ec:	b29d      	uxth	r5, r3
    d0ee:	4680      	mov	r8, r0
    d0f0:	f105 000d 	add.w	r0, r5, #13
    d0f4:	460e      	mov	r6, r1
    d0f6:	4693      	mov	fp, r2
    d0f8:	461f      	mov	r7, r3
    d0fa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d0fe:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d102:	f7ff fa81 	bl	c608 <attMsgAlloc>
    d106:	4604      	mov	r4, r0
    d108:	b1b0      	cbz	r0, d138 <AttcReadByGroupTypeReq+0x50>
    d10a:	2310      	movs	r3, #16
    d10c:	3505      	adds	r5, #5
    d10e:	8005      	strh	r5, [r0, #0]
    d110:	8046      	strh	r6, [r0, #2]
    d112:	f8a0 b004 	strh.w	fp, [r0, #4]
    d116:	7203      	strb	r3, [r0, #8]
    d118:	463a      	mov	r2, r7
    d11a:	4651      	mov	r1, sl
    d11c:	300d      	adds	r0, #13
    d11e:	f7ff f81f 	bl	c160 <memcpy>
    d122:	4623      	mov	r3, r4
    d124:	2208      	movs	r2, #8
    d126:	4631      	mov	r1, r6
    d128:	4640      	mov	r0, r8
    d12a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d12e:	b001      	add	sp, #4
    d130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d134:	f7ff be32 	b.w	cd9c <attcSendMsg>
    d138:	b001      	add	sp, #4
    d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d13e <attcProcPrepWriteRsp>:
    d13e:	7cc2      	ldrb	r2, [r0, #19]
    d140:	2a01      	cmp	r2, #1
    d142:	d102      	bne.n	d14a <attcProcPrepWriteRsp+0xc>
    d144:	8b82      	ldrh	r2, [r0, #28]
    d146:	b902      	cbnz	r2, d14a <attcProcPrepWriteRsp+0xc>
    d148:	74c2      	strb	r2, [r0, #19]
    d14a:	2200      	movs	r2, #0
    d14c:	811a      	strh	r2, [r3, #8]
    d14e:	4770      	bx	lr

0000d150 <AttcWriteCmd>:
    d150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d154:	4607      	mov	r7, r0
    d156:	f102 000b 	add.w	r0, r2, #11
    d15a:	b280      	uxth	r0, r0
    d15c:	460d      	mov	r5, r1
    d15e:	4616      	mov	r6, r2
    d160:	4698      	mov	r8, r3
    d162:	f7ff fa51 	bl	c608 <attMsgAlloc>
    d166:	4604      	mov	r4, r0
    d168:	b198      	cbz	r0, d192 <AttcWriteCmd+0x42>
    d16a:	1cf3      	adds	r3, r6, #3
    d16c:	8003      	strh	r3, [r0, #0]
    d16e:	2352      	movs	r3, #82	; 0x52
    d170:	7203      	strb	r3, [r0, #8]
    d172:	0a2b      	lsrs	r3, r5, #8
    d174:	7283      	strb	r3, [r0, #10]
    d176:	7245      	strb	r5, [r0, #9]
    d178:	4632      	mov	r2, r6
    d17a:	4641      	mov	r1, r8
    d17c:	300b      	adds	r0, #11
    d17e:	f7fe ffef 	bl	c160 <memcpy>
    d182:	2300      	movs	r3, #0
    d184:	9300      	str	r3, [sp, #0]
    d186:	220a      	movs	r2, #10
    d188:	4623      	mov	r3, r4
    d18a:	4629      	mov	r1, r5
    d18c:	4638      	mov	r0, r7
    d18e:	f7ff fe05 	bl	cd9c <attcSendMsg>
    d192:	b002      	add	sp, #8
    d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d198 <AttcPrepareWriteReq>:
    d198:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d19c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d1a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d1a4:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d1a8:	4607      	mov	r7, r0
    d1aa:	460d      	mov	r5, r1
    d1ac:	4693      	mov	fp, r2
    d1ae:	4698      	mov	r8, r3
    d1b0:	b116      	cbz	r6, d1b8 <AttcPrepareWriteReq+0x20>
    d1b2:	f1ba 0f00 	cmp.w	sl, #0
    d1b6:	d11f      	bne.n	d1f8 <AttcPrepareWriteReq+0x60>
    d1b8:	f108 000d 	add.w	r0, r8, #13
    d1bc:	b280      	uxth	r0, r0
    d1be:	f7ff fa23 	bl	c608 <attMsgAlloc>
    d1c2:	4604      	mov	r4, r0
    d1c4:	b310      	cbz	r0, d20c <AttcPrepareWriteReq+0x74>
    d1c6:	2316      	movs	r3, #22
    d1c8:	7203      	strb	r3, [r0, #8]
    d1ca:	0a2b      	lsrs	r3, r5, #8
    d1cc:	f8a0 8000 	strh.w	r8, [r0]
    d1d0:	f8a0 b002 	strh.w	fp, [r0, #2]
    d1d4:	7245      	strb	r5, [r0, #9]
    d1d6:	7283      	strb	r3, [r0, #10]
    d1d8:	b186      	cbz	r6, d1fc <AttcPrepareWriteReq+0x64>
    d1da:	f1ba 0f00 	cmp.w	sl, #0
    d1de:	d00d      	beq.n	d1fc <AttcPrepareWriteReq+0x64>
    d1e0:	f8c0 9004 	str.w	r9, [r0, #4]
    d1e4:	4623      	mov	r3, r4
    d1e6:	220b      	movs	r2, #11
    d1e8:	4629      	mov	r1, r5
    d1ea:	4638      	mov	r0, r7
    d1ec:	960a      	str	r6, [sp, #40]	; 0x28
    d1ee:	b001      	add	sp, #4
    d1f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1f4:	f7ff bdd2 	b.w	cd9c <attcSendMsg>
    d1f8:	200d      	movs	r0, #13
    d1fa:	e7e0      	b.n	d1be <AttcPrepareWriteReq+0x26>
    d1fc:	f104 000d 	add.w	r0, r4, #13
    d200:	4642      	mov	r2, r8
    d202:	4649      	mov	r1, r9
    d204:	f7fe ffac 	bl	c160 <memcpy>
    d208:	6060      	str	r0, [r4, #4]
    d20a:	e7eb      	b.n	d1e4 <AttcPrepareWriteReq+0x4c>
    d20c:	b001      	add	sp, #4
    d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d212 <AttcExecuteWriteReq>:
    d212:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d214:	4604      	mov	r4, r0
    d216:	200a      	movs	r0, #10
    d218:	460d      	mov	r5, r1
    d21a:	f7ff f9f5 	bl	c608 <attMsgAlloc>
    d21e:	4603      	mov	r3, r0
    d220:	b150      	cbz	r0, d238 <AttcExecuteWriteReq+0x26>
    d222:	2202      	movs	r2, #2
    d224:	8002      	strh	r2, [r0, #0]
    d226:	2100      	movs	r1, #0
    d228:	2218      	movs	r2, #24
    d22a:	7202      	strb	r2, [r0, #8]
    d22c:	7245      	strb	r5, [r0, #9]
    d22e:	220c      	movs	r2, #12
    d230:	9100      	str	r1, [sp, #0]
    d232:	4620      	mov	r0, r4
    d234:	f7ff fdb2 	bl	cd9c <attcSendMsg>
    d238:	b003      	add	sp, #12
    d23a:	bd30      	pop	{r4, r5, pc}

0000d23c <attsCccMainCback>:
    d23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d23e:	4d2e      	ldr	r5, [pc, #184]	; (d2f8 <attsCccMainCback+0xbc>)
    d240:	2905      	cmp	r1, #5
    d242:	b085      	sub	sp, #20
    d244:	6a2e      	ldr	r6, [r5, #32]
    d246:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    d24a:	f04f 0100 	mov.w	r1, #0
    d24e:	d041      	beq.n	d2d4 <attsCccMainCback+0x98>
    d250:	b2cf      	uxtb	r7, r1
    d252:	4567      	cmp	r7, ip
    d254:	d340      	bcc.n	d2d8 <attsCccMainCback+0x9c>
    d256:	d048      	beq.n	d2ea <attsCccMainCback+0xae>
    d258:	785c      	ldrb	r4, [r3, #1]
    d25a:	781b      	ldrb	r3, [r3, #0]
    d25c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    d260:	b29b      	uxth	r3, r3
    d262:	2b02      	cmp	r3, #2
    d264:	d844      	bhi.n	d2f0 <attsCccMainCback+0xb4>
    d266:	b113      	cbz	r3, d26e <attsCccMainCback+0x32>
    d268:	8874      	ldrh	r4, [r6, #2]
    d26a:	4223      	tst	r3, r4
    d26c:	d040      	beq.n	d2f0 <attsCccMainCback+0xb4>
    d26e:	1e44      	subs	r4, r0, #1
    d270:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    d274:	2c00      	cmp	r4, #0
    d276:	d03d      	beq.n	d2f4 <attsCccMainCback+0xb8>
    d278:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    d27c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    d280:	42b3      	cmp	r3, r6
    d282:	d025      	beq.n	d2d0 <attsCccMainCback+0x94>
    d284:	2110      	movs	r1, #16
    d286:	f8ad 0004 	strh.w	r0, [sp, #4]
    d28a:	f8ad 300a 	strh.w	r3, [sp, #10]
    d28e:	f88d 1006 	strb.w	r1, [sp, #6]
    d292:	f88d 700c 	strb.w	r7, [sp, #12]
    d296:	f8ad 2008 	strh.w	r2, [sp, #8]
    d29a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d29c:	a801      	add	r0, sp, #4
    d29e:	4798      	blx	r3
    d2a0:	e016      	b.n	d2d0 <attsCccMainCback+0x94>
    d2a2:	1c4c      	adds	r4, r1, #1
    d2a4:	fb07 6e04 	mla	lr, r7, r4, r6
    d2a8:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    d2ac:	4596      	cmp	lr, r2
    d2ae:	d004      	beq.n	d2ba <attsCccMainCback+0x7e>
    d2b0:	4621      	mov	r1, r4
    d2b2:	b2cc      	uxtb	r4, r1
    d2b4:	4564      	cmp	r4, ip
    d2b6:	d3f4      	bcc.n	d2a2 <attsCccMainCback+0x66>
    d2b8:	d017      	beq.n	d2ea <attsCccMainCback+0xae>
    d2ba:	3801      	subs	r0, #1
    d2bc:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    d2c0:	b1c2      	cbz	r2, d2f4 <attsCccMainCback+0xb8>
    d2c2:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    d2c6:	7018      	strb	r0, [r3, #0]
    d2c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    d2cc:	0a12      	lsrs	r2, r2, #8
    d2ce:	705a      	strb	r2, [r3, #1]
    d2d0:	2000      	movs	r0, #0
    d2d2:	e00b      	b.n	d2ec <attsCccMainCback+0xb0>
    d2d4:	2706      	movs	r7, #6
    d2d6:	e7ec      	b.n	d2b2 <attsCccMainCback+0x76>
    d2d8:	f8b6 e000 	ldrh.w	lr, [r6]
    d2dc:	4596      	cmp	lr, r2
    d2de:	f101 0401 	add.w	r4, r1, #1
    d2e2:	d0b9      	beq.n	d258 <attsCccMainCback+0x1c>
    d2e4:	3606      	adds	r6, #6
    d2e6:	4621      	mov	r1, r4
    d2e8:	e7b2      	b.n	d250 <attsCccMainCback+0x14>
    d2ea:	200a      	movs	r0, #10
    d2ec:	b005      	add	sp, #20
    d2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2f0:	2080      	movs	r0, #128	; 0x80
    d2f2:	e7fb      	b.n	d2ec <attsCccMainCback+0xb0>
    d2f4:	2011      	movs	r0, #17
    d2f6:	e7f9      	b.n	d2ec <attsCccMainCback+0xb0>
    d2f8:	10003a8c 	.word	0x10003a8c

0000d2fc <AttsCccRegister>:
    d2fc:	4b04      	ldr	r3, [pc, #16]	; (d310 <AttsCccRegister+0x14>)
    d2fe:	e9c3 1208 	strd	r1, r2, [r3, #32]
    d302:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    d306:	4b03      	ldr	r3, [pc, #12]	; (d314 <AttsCccRegister+0x18>)
    d308:	4a03      	ldr	r2, [pc, #12]	; (d318 <AttsCccRegister+0x1c>)
    d30a:	615a      	str	r2, [r3, #20]
    d30c:	4770      	bx	lr
    d30e:	bf00      	nop
    d310:	10003a8c 	.word	0x10003a8c
    d314:	10003c18 	.word	0x10003c18
    d318:	0000d23d 	.word	0x0000d23d

0000d31c <AttsCccInitTable>:
    d31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d320:	1e45      	subs	r5, r0, #1
    d322:	4c1e      	ldr	r4, [pc, #120]	; (d39c <AttsCccInitTable+0x80>)
    d324:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    d328:	4607      	mov	r7, r0
    d32a:	460e      	mov	r6, r1
    d32c:	b933      	cbnz	r3, d33c <AttsCccInitTable+0x20>
    d32e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d332:	0040      	lsls	r0, r0, #1
    d334:	f00d f846 	bl	1a3c4 <WsfBufAlloc>
    d338:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    d33c:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    d340:	f1b8 0f00 	cmp.w	r8, #0
    d344:	d022      	beq.n	d38c <AttsCccInitTable+0x70>
    d346:	bb26      	cbnz	r6, d392 <AttsCccInitTable+0x76>
    d348:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d34c:	4631      	mov	r1, r6
    d34e:	0052      	lsls	r2, r2, #1
    d350:	4640      	mov	r0, r8
    d352:	f7ff f803 	bl	c35c <memset>
    d356:	e019      	b.n	d38c <AttsCccInitTable+0x70>
    d358:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d35c:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    d360:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d364:	b162      	cbz	r2, d380 <AttsCccInitTable+0x64>
    d366:	f88d 300c 	strb.w	r3, [sp, #12]
    d36a:	f88d 9006 	strb.w	r9, [sp, #6]
    d36e:	f8ad 7004 	strh.w	r7, [sp, #4]
    d372:	f8ad a008 	strh.w	sl, [sp, #8]
    d376:	f8ad 200a 	strh.w	r2, [sp, #10]
    d37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d37c:	a801      	add	r0, sp, #4
    d37e:	4798      	blx	r3
    d380:	3501      	adds	r5, #1
    d382:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d386:	b2eb      	uxtb	r3, r5
    d388:	429a      	cmp	r2, r3
    d38a:	d8e5      	bhi.n	d358 <AttsCccInitTable+0x3c>
    d38c:	b004      	add	sp, #16
    d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d392:	2500      	movs	r5, #0
    d394:	f04f 0910 	mov.w	r9, #16
    d398:	46aa      	mov	sl, r5
    d39a:	e7f2      	b.n	d382 <AttsCccInitTable+0x66>
    d39c:	10003a8c 	.word	0x10003a8c

0000d3a0 <AttsCccClearTable>:
    d3a0:	b538      	push	{r3, r4, r5, lr}
    d3a2:	1e45      	subs	r5, r0, #1
    d3a4:	4c04      	ldr	r4, [pc, #16]	; (d3b8 <AttsCccClearTable+0x18>)
    d3a6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d3aa:	b120      	cbz	r0, d3b6 <AttsCccClearTable+0x16>
    d3ac:	f00d f84a 	bl	1a444 <WsfBufFree>
    d3b0:	2300      	movs	r3, #0
    d3b2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    d3b6:	bd38      	pop	{r3, r4, r5, pc}
    d3b8:	10003a8c 	.word	0x10003a8c

0000d3bc <AttsCccGet>:
    d3bc:	3801      	subs	r0, #1
    d3be:	4b03      	ldr	r3, [pc, #12]	; (d3cc <AttsCccGet+0x10>)
    d3c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d3c4:	b108      	cbz	r0, d3ca <AttsCccGet+0xe>
    d3c6:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    d3ca:	4770      	bx	lr
    d3cc:	10003a8c 	.word	0x10003a8c

0000d3d0 <AttsCccSet>:
    d3d0:	3801      	subs	r0, #1
    d3d2:	4b03      	ldr	r3, [pc, #12]	; (d3e0 <AttsCccSet+0x10>)
    d3d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d3d8:	b10b      	cbz	r3, d3de <AttsCccSet+0xe>
    d3da:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    d3de:	4770      	bx	lr
    d3e0:	10003a8c 	.word	0x10003a8c

0000d3e4 <AttsCccEnabled>:
    d3e4:	b538      	push	{r3, r4, r5, lr}
    d3e6:	460c      	mov	r4, r1
    d3e8:	4605      	mov	r5, r0
    d3ea:	f002 f9e3 	bl	f7b4 <DmConnSecLevel>
    d3ee:	4b08      	ldr	r3, [pc, #32]	; (d410 <AttsCccEnabled+0x2c>)
    d3f0:	6a1b      	ldr	r3, [r3, #32]
    d3f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d3f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d3fa:	791b      	ldrb	r3, [r3, #4]
    d3fc:	4283      	cmp	r3, r0
    d3fe:	d805      	bhi.n	d40c <AttsCccEnabled+0x28>
    d400:	4621      	mov	r1, r4
    d402:	4628      	mov	r0, r5
    d404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d408:	f7ff bfd8 	b.w	d3bc <AttsCccGet>
    d40c:	2000      	movs	r0, #0
    d40e:	bd38      	pop	{r3, r4, r5, pc}
    d410:	10003a8c 	.word	0x10003a8c

0000d414 <attsIndCcbByConnId>:
    d414:	b510      	push	{r4, lr}
    d416:	4604      	mov	r4, r0
    d418:	f002 f988 	bl	f72c <DmConnInUse>
    d41c:	b120      	cbz	r0, d428 <attsIndCcbByConnId+0x14>
    d41e:	4b03      	ldr	r3, [pc, #12]	; (d42c <attsIndCcbByConnId+0x18>)
    d420:	3c01      	subs	r4, #1
    d422:	202c      	movs	r0, #44	; 0x2c
    d424:	fb00 3004 	mla	r0, r0, r4, r3
    d428:	bd10      	pop	{r4, pc}
    d42a:	bf00      	nop
    d42c:	10003ab8 	.word	0x10003ab8

0000d430 <attsExecCallback>:
    d430:	b507      	push	{r0, r1, r2, lr}
    d432:	2300      	movs	r3, #0
    d434:	9300      	str	r3, [sp, #0]
    d436:	4613      	mov	r3, r2
    d438:	460a      	mov	r2, r1
    d43a:	210f      	movs	r1, #15
    d43c:	f7ff f8b6 	bl	c5ac <attExecCallback>
    d440:	b003      	add	sp, #12
    d442:	f85d fb04 	ldr.w	pc, [sp], #4

0000d446 <attsIndNtfCallback>:
    d446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d44a:	460c      	mov	r4, r1
    d44c:	8ac9      	ldrh	r1, [r1, #22]
    d44e:	4606      	mov	r6, r0
    d450:	4617      	mov	r7, r2
    d452:	b119      	cbz	r1, d45c <attsIndNtfCallback+0x16>
    d454:	f7ff ffec 	bl	d430 <attsExecCallback>
    d458:	2300      	movs	r3, #0
    d45a:	82e3      	strh	r3, [r4, #22]
    d45c:	f104 0518 	add.w	r5, r4, #24
    d460:	f04f 0800 	mov.w	r8, #0
    d464:	342c      	adds	r4, #44	; 0x2c
    d466:	f835 1b02 	ldrh.w	r1, [r5], #2
    d46a:	b129      	cbz	r1, d478 <attsIndNtfCallback+0x32>
    d46c:	463a      	mov	r2, r7
    d46e:	4630      	mov	r0, r6
    d470:	f7ff ffde 	bl	d430 <attsExecCallback>
    d474:	f825 8c02 	strh.w	r8, [r5, #-2]
    d478:	42ac      	cmp	r4, r5
    d47a:	d1f4      	bne.n	d466 <attsIndNtfCallback+0x20>
    d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d480 <attsIndCtrlCback>:
    d480:	b510      	push	{r4, lr}
    d482:	4604      	mov	r4, r0
    d484:	7800      	ldrb	r0, [r0, #0]
    d486:	f7ff ffc5 	bl	d414 <attsIndCcbByConnId>
    d48a:	4601      	mov	r1, r0
    d48c:	b120      	cbz	r0, d498 <attsIndCtrlCback+0x18>
    d48e:	7820      	ldrb	r0, [r4, #0]
    d490:	2200      	movs	r2, #0
    d492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d496:	e7d6      	b.n	d446 <attsIndNtfCallback>
    d498:	bd10      	pop	{r4, pc}

0000d49a <attsIndMsgCback>:
    d49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d49c:	4605      	mov	r5, r0
    d49e:	7800      	ldrb	r0, [r0, #0]
    d4a0:	f7ff ffb8 	bl	d414 <attsIndCcbByConnId>
    d4a4:	78ab      	ldrb	r3, [r5, #2]
    d4a6:	4604      	mov	r4, r0
    d4a8:	b930      	cbnz	r0, d4b8 <attsIndMsgCback+0x1e>
    d4aa:	2b21      	cmp	r3, #33	; 0x21
    d4ac:	d13d      	bne.n	d52a <attsIndMsgCback+0x90>
    d4ae:	6868      	ldr	r0, [r5, #4]
    d4b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4b4:	f00d b82c 	b.w	1a510 <WsfMsgFree>
    d4b8:	2b21      	cmp	r3, #33	; 0x21
    d4ba:	d13b      	bne.n	d534 <attsIndMsgCback+0x9a>
    d4bc:	686b      	ldr	r3, [r5, #4]
    d4be:	7a1a      	ldrb	r2, [r3, #8]
    d4c0:	885e      	ldrh	r6, [r3, #2]
    d4c2:	2a1d      	cmp	r2, #29
    d4c4:	d113      	bne.n	d4ee <attsIndMsgCback+0x54>
    d4c6:	8ac2      	ldrh	r2, [r0, #22]
    d4c8:	bb12      	cbnz	r2, d510 <attsIndMsgCback+0x76>
    d4ca:	6901      	ldr	r1, [r0, #16]
    d4cc:	881a      	ldrh	r2, [r3, #0]
    d4ce:	8b09      	ldrh	r1, [r1, #24]
    d4d0:	2004      	movs	r0, #4
    d4d2:	f003 f86b 	bl	105ac <L2cDataReq>
    d4d6:	2322      	movs	r3, #34	; 0x22
    d4d8:	7323      	strb	r3, [r4, #12]
    d4da:	4b27      	ldr	r3, [pc, #156]	; (d578 <attsIndMsgCback+0xde>)
    d4dc:	82e6      	strh	r6, [r4, #22]
    d4de:	681b      	ldr	r3, [r3, #0]
    d4e0:	82a6      	strh	r6, [r4, #20]
    d4e2:	7999      	ldrb	r1, [r3, #6]
    d4e4:	4620      	mov	r0, r4
    d4e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4ea:	f00d b9b3 	b.w	1a854 <WsfTimerStartSec>
    d4ee:	f100 0118 	add.w	r1, r0, #24
    d4f2:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d4f6:	2200      	movs	r2, #0
    d4f8:	460f      	mov	r7, r1
    d4fa:	f831 0b02 	ldrh.w	r0, [r1], #2
    d4fe:	b118      	cbz	r0, d508 <attsIndMsgCback+0x6e>
    d500:	4286      	cmp	r6, r0
    d502:	d005      	beq.n	d510 <attsIndMsgCback+0x76>
    d504:	3201      	adds	r2, #1
    d506:	b2d2      	uxtb	r2, r2
    d508:	458c      	cmp	ip, r1
    d50a:	d1f6      	bne.n	d4fa <attsIndMsgCback+0x60>
    d50c:	2a09      	cmp	r2, #9
    d50e:	d922      	bls.n	d556 <attsIndMsgCback+0xbc>
    d510:	2272      	movs	r2, #114	; 0x72
    d512:	4631      	mov	r1, r6
    d514:	7828      	ldrb	r0, [r5, #0]
    d516:	f7ff ff8b 	bl	d430 <attsExecCallback>
    d51a:	e7c8      	b.n	d4ae <attsIndMsgCback+0x14>
    d51c:	2300      	movs	r3, #0
    d51e:	f837 2b02 	ldrh.w	r2, [r7], #2
    d522:	b91a      	cbnz	r2, d52c <attsIndMsgCback+0x92>
    d524:	330c      	adds	r3, #12
    d526:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d52c:	3301      	adds	r3, #1
    d52e:	2b0a      	cmp	r3, #10
    d530:	d1f5      	bne.n	d51e <attsIndMsgCback+0x84>
    d532:	e7fa      	b.n	d52a <attsIndMsgCback+0x90>
    d534:	2b22      	cmp	r3, #34	; 0x22
    d536:	d1f8      	bne.n	d52a <attsIndMsgCback+0x90>
    d538:	8a83      	ldrh	r3, [r0, #20]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d0f5      	beq.n	d52a <attsIndMsgCback+0x90>
    d53e:	2600      	movs	r6, #0
    d540:	8286      	strh	r6, [r0, #20]
    d542:	2271      	movs	r2, #113	; 0x71
    d544:	8ac1      	ldrh	r1, [r0, #22]
    d546:	7828      	ldrb	r0, [r5, #0]
    d548:	f7ff ff72 	bl	d430 <attsExecCallback>
    d54c:	6923      	ldr	r3, [r4, #16]
    d54e:	82e6      	strh	r6, [r4, #22]
    d550:	2201      	movs	r2, #1
    d552:	77da      	strb	r2, [r3, #31]
    d554:	e7e9      	b.n	d52a <attsIndMsgCback+0x90>
    d556:	6921      	ldr	r1, [r4, #16]
    d558:	881a      	ldrh	r2, [r3, #0]
    d55a:	8b09      	ldrh	r1, [r1, #24]
    d55c:	882d      	ldrh	r5, [r5, #0]
    d55e:	2004      	movs	r0, #4
    d560:	f003 f824 	bl	105ac <L2cDataReq>
    d564:	6923      	ldr	r3, [r4, #16]
    d566:	7f9a      	ldrb	r2, [r3, #30]
    d568:	2a00      	cmp	r2, #0
    d56a:	d1d7      	bne.n	d51c <attsIndMsgCback+0x82>
    d56c:	4631      	mov	r1, r6
    d56e:	b2e8      	uxtb	r0, r5
    d570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d574:	e75c      	b.n	d430 <attsExecCallback>
    d576:	bf00      	nop
    d578:	10002bb4 	.word	0x10002bb4

0000d57c <attsHandleValueIndNtf>:
    d57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d580:	4606      	mov	r6, r0
    d582:	460c      	mov	r4, r1
    d584:	4617      	mov	r7, r2
    d586:	4698      	mov	r8, r3
    d588:	f89d a020 	ldrb.w	sl, [sp, #32]
    d58c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d590:	f00b fae6 	bl	18b60 <WsfTaskLock>
    d594:	4630      	mov	r0, r6
    d596:	f7ff ff3d 	bl	d414 <attsIndCcbByConnId>
    d59a:	b950      	cbnz	r0, d5b2 <attsHandleValueIndNtf+0x36>
    d59c:	f00b fae6 	bl	18b6c <WsfTaskUnlock>
    d5a0:	f1b9 0f00 	cmp.w	r9, #0
    d5a4:	d048      	beq.n	d638 <attsHandleValueIndNtf+0xbc>
    d5a6:	4651      	mov	r1, sl
    d5a8:	4640      	mov	r0, r8
    d5aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5ae:	f7ff b893 	b.w	c6d8 <AttMsgFree>
    d5b2:	6903      	ldr	r3, [r0, #16]
    d5b4:	8b5d      	ldrh	r5, [r3, #26]
    d5b6:	f00b fad9 	bl	18b6c <WsfTaskUnlock>
    d5ba:	2d00      	cmp	r5, #0
    d5bc:	d0f0      	beq.n	d5a0 <attsHandleValueIndNtf+0x24>
    d5be:	1cbb      	adds	r3, r7, #2
    d5c0:	42ab      	cmp	r3, r5
    d5c2:	da37      	bge.n	d634 <attsHandleValueIndNtf+0xb8>
    d5c4:	2008      	movs	r0, #8
    d5c6:	f00c ff8c 	bl	1a4e2 <WsfMsgAlloc>
    d5ca:	4605      	mov	r5, r0
    d5cc:	b360      	cbz	r0, d628 <attsHandleValueIndNtf+0xac>
    d5ce:	2321      	movs	r3, #33	; 0x21
    d5d0:	8006      	strh	r6, [r0, #0]
    d5d2:	7083      	strb	r3, [r0, #2]
    d5d4:	f1b9 0f00 	cmp.w	r9, #0
    d5d8:	d01c      	beq.n	d614 <attsHandleValueIndNtf+0x98>
    d5da:	f1a8 030b 	sub.w	r3, r8, #11
    d5de:	6043      	str	r3, [r0, #4]
    d5e0:	6868      	ldr	r0, [r5, #4]
    d5e2:	b1f0      	cbz	r0, d622 <attsHandleValueIndNtf+0xa6>
    d5e4:	1cfb      	adds	r3, r7, #3
    d5e6:	8044      	strh	r4, [r0, #2]
    d5e8:	7244      	strb	r4, [r0, #9]
    d5ea:	0a24      	lsrs	r4, r4, #8
    d5ec:	8003      	strh	r3, [r0, #0]
    d5ee:	f880 a008 	strb.w	sl, [r0, #8]
    d5f2:	7284      	strb	r4, [r0, #10]
    d5f4:	f1b9 0f00 	cmp.w	r9, #0
    d5f8:	d104      	bne.n	d604 <attsHandleValueIndNtf+0x88>
    d5fa:	463a      	mov	r2, r7
    d5fc:	4641      	mov	r1, r8
    d5fe:	300b      	adds	r0, #11
    d600:	f7fe fdae 	bl	c160 <memcpy>
    d604:	4b0d      	ldr	r3, [pc, #52]	; (d63c <attsHandleValueIndNtf+0xc0>)
    d606:	4629      	mov	r1, r5
    d608:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d60c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d610:	f00c bf8b 	b.w	1a52a <WsfMsgSend>
    d614:	f107 000b 	add.w	r0, r7, #11
    d618:	b280      	uxth	r0, r0
    d61a:	f7fe fff5 	bl	c608 <attMsgAlloc>
    d61e:	6068      	str	r0, [r5, #4]
    d620:	e7de      	b.n	d5e0 <attsHandleValueIndNtf+0x64>
    d622:	4628      	mov	r0, r5
    d624:	f00c ff74 	bl	1a510 <WsfMsgFree>
    d628:	2270      	movs	r2, #112	; 0x70
    d62a:	4621      	mov	r1, r4
    d62c:	4630      	mov	r0, r6
    d62e:	f7ff feff 	bl	d430 <attsExecCallback>
    d632:	e7b5      	b.n	d5a0 <attsHandleValueIndNtf+0x24>
    d634:	2277      	movs	r2, #119	; 0x77
    d636:	e7f8      	b.n	d62a <attsHandleValueIndNtf+0xae>
    d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d63c:	100037b4 	.word	0x100037b4

0000d640 <attsIndConnCback>:
    d640:	788b      	ldrb	r3, [r1, #2]
    d642:	2b28      	cmp	r3, #40	; 0x28
    d644:	b570      	push	{r4, r5, r6, lr}
    d646:	4606      	mov	r6, r0
    d648:	d117      	bne.n	d67a <attsIndConnCback+0x3a>
    d64a:	78cc      	ldrb	r4, [r1, #3]
    d64c:	b904      	cbnz	r4, d650 <attsIndConnCback+0x10>
    d64e:	7a0c      	ldrb	r4, [r1, #8]
    d650:	7f35      	ldrb	r5, [r6, #28]
    d652:	490a      	ldr	r1, [pc, #40]	; (d67c <attsIndConnCback+0x3c>)
    d654:	232c      	movs	r3, #44	; 0x2c
    d656:	3d01      	subs	r5, #1
    d658:	fb03 1505 	mla	r5, r3, r5, r1
    d65c:	3420      	adds	r4, #32
    d65e:	8aab      	ldrh	r3, [r5, #20]
    d660:	b2e4      	uxtb	r4, r4
    d662:	b123      	cbz	r3, d66e <attsIndConnCback+0x2e>
    d664:	4628      	mov	r0, r5
    d666:	f00d f91b 	bl	1a8a0 <WsfTimerStop>
    d66a:	2300      	movs	r3, #0
    d66c:	82ab      	strh	r3, [r5, #20]
    d66e:	4622      	mov	r2, r4
    d670:	4629      	mov	r1, r5
    d672:	7f30      	ldrb	r0, [r6, #28]
    d674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d678:	e6e5      	b.n	d446 <attsIndNtfCallback>
    d67a:	bd70      	pop	{r4, r5, r6, pc}
    d67c:	10003ab8 	.word	0x10003ab8

0000d680 <attsProcValueCnf>:
    d680:	b570      	push	{r4, r5, r6, lr}
    d682:	4606      	mov	r6, r0
    d684:	7f00      	ldrb	r0, [r0, #28]
    d686:	f7ff fec5 	bl	d414 <attsIndCcbByConnId>
    d68a:	4604      	mov	r4, r0
    d68c:	b168      	cbz	r0, d6aa <attsProcValueCnf+0x2a>
    d68e:	8a83      	ldrh	r3, [r0, #20]
    d690:	b15b      	cbz	r3, d6aa <attsProcValueCnf+0x2a>
    d692:	2300      	movs	r3, #0
    d694:	8283      	strh	r3, [r0, #20]
    d696:	f00d f903 	bl	1a8a0 <WsfTimerStop>
    d69a:	7fb5      	ldrb	r5, [r6, #30]
    d69c:	b92d      	cbnz	r5, d6aa <attsProcValueCnf+0x2a>
    d69e:	462a      	mov	r2, r5
    d6a0:	8ae1      	ldrh	r1, [r4, #22]
    d6a2:	7f30      	ldrb	r0, [r6, #28]
    d6a4:	f7ff fec4 	bl	d430 <attsExecCallback>
    d6a8:	82e5      	strh	r5, [r4, #22]
    d6aa:	bd70      	pop	{r4, r5, r6, pc}

0000d6ac <AttsIndInit>:
    d6ac:	b510      	push	{r4, lr}
    d6ae:	4909      	ldr	r1, [pc, #36]	; (d6d4 <AttsIndInit+0x28>)
    d6b0:	4a09      	ldr	r2, [pc, #36]	; (d6d8 <AttsIndInit+0x2c>)
    d6b2:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    d6b6:	2300      	movs	r3, #0
    d6b8:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    d6bc:	3301      	adds	r3, #1
    d6be:	2b08      	cmp	r3, #8
    d6c0:	6114      	str	r4, [r2, #16]
    d6c2:	7210      	strb	r0, [r2, #8]
    d6c4:	8153      	strh	r3, [r2, #10]
    d6c6:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    d6ca:	d1f5      	bne.n	d6b8 <AttsIndInit+0xc>
    d6cc:	4b03      	ldr	r3, [pc, #12]	; (d6dc <AttsIndInit+0x30>)
    d6ce:	4a04      	ldr	r2, [pc, #16]	; (d6e0 <AttsIndInit+0x34>)
    d6d0:	609a      	str	r2, [r3, #8]
    d6d2:	bd10      	pop	{r4, pc}
    d6d4:	100037b4 	.word	0x100037b4
    d6d8:	10003ab8 	.word	0x10003ab8
    d6dc:	10003c18 	.word	0x10003c18
    d6e0:	00022eac 	.word	0x00022eac

0000d6e4 <AttsHandleValueInd>:
    d6e4:	b513      	push	{r0, r1, r4, lr}
    d6e6:	f04f 0c00 	mov.w	ip, #0
    d6ea:	241d      	movs	r4, #29
    d6ec:	e9cd 4c00 	strd	r4, ip, [sp]
    d6f0:	f7ff ff44 	bl	d57c <attsHandleValueIndNtf>
    d6f4:	b002      	add	sp, #8
    d6f6:	bd10      	pop	{r4, pc}

0000d6f8 <AttsHandleValueNtf>:
    d6f8:	b513      	push	{r0, r1, r4, lr}
    d6fa:	f04f 0c00 	mov.w	ip, #0
    d6fe:	241b      	movs	r4, #27
    d700:	e9cd 4c00 	strd	r4, ip, [sp]
    d704:	f7ff ff3a 	bl	d57c <attsHandleValueIndNtf>
    d708:	b002      	add	sp, #8
    d70a:	bd10      	pop	{r4, pc}

0000d70c <AttsHandleValueIndZeroCpy>:
    d70c:	b513      	push	{r0, r1, r4, lr}
    d70e:	f04f 0c01 	mov.w	ip, #1
    d712:	241d      	movs	r4, #29
    d714:	e9cd 4c00 	strd	r4, ip, [sp]
    d718:	f7ff ff30 	bl	d57c <attsHandleValueIndNtf>
    d71c:	b002      	add	sp, #8
    d71e:	bd10      	pop	{r4, pc}

0000d720 <AttsHandleValueNtfZeroCpy>:
    d720:	b513      	push	{r0, r1, r4, lr}
    d722:	f04f 0c01 	mov.w	ip, #1
    d726:	241b      	movs	r4, #27
    d728:	e9cd 4c00 	strd	r4, ip, [sp]
    d72c:	f7ff ff26 	bl	d57c <attsHandleValueIndNtf>
    d730:	b002      	add	sp, #8
    d732:	bd10      	pop	{r4, pc}

0000d734 <attsL2cCtrlCback>:
    d734:	4b01      	ldr	r3, [pc, #4]	; (d73c <attsL2cCtrlCback+0x8>)
    d736:	689b      	ldr	r3, [r3, #8]
    d738:	685b      	ldr	r3, [r3, #4]
    d73a:	4718      	bx	r3
    d73c:	10003c18 	.word	0x10003c18

0000d740 <attsMsgCback>:
    d740:	b410      	push	{r4}
    d742:	7883      	ldrb	r3, [r0, #2]
    d744:	2b20      	cmp	r3, #32
    d746:	d106      	bne.n	d756 <attsMsgCback+0x16>
    d748:	2200      	movs	r2, #0
    d74a:	2104      	movs	r1, #4
    d74c:	7800      	ldrb	r0, [r0, #0]
    d74e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d752:	f002 b839 	b.w	f7c8 <DmConnSetIdle>
    d756:	2b22      	cmp	r3, #34	; 0x22
    d758:	4b03      	ldr	r3, [pc, #12]	; (d768 <attsMsgCback+0x28>)
    d75a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d75e:	bf96      	itet	ls
    d760:	689b      	ldrls	r3, [r3, #8]
    d762:	68db      	ldrhi	r3, [r3, #12]
    d764:	689b      	ldrls	r3, [r3, #8]
    d766:	4718      	bx	r3
    d768:	10003c18 	.word	0x10003c18

0000d76c <attsErrRsp>:
    d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d770:	4605      	mov	r5, r0
    d772:	200d      	movs	r0, #13
    d774:	460f      	mov	r7, r1
    d776:	4614      	mov	r4, r2
    d778:	461e      	mov	r6, r3
    d77a:	f7fe ff45 	bl	c608 <attMsgAlloc>
    d77e:	b170      	cbz	r0, d79e <attsErrRsp+0x32>
    d780:	7284      	strb	r4, [r0, #10]
    d782:	2301      	movs	r3, #1
    d784:	0a24      	lsrs	r4, r4, #8
    d786:	7203      	strb	r3, [r0, #8]
    d788:	7247      	strb	r7, [r0, #9]
    d78a:	72c4      	strb	r4, [r0, #11]
    d78c:	7306      	strb	r6, [r0, #12]
    d78e:	4603      	mov	r3, r0
    d790:	4629      	mov	r1, r5
    d792:	2205      	movs	r2, #5
    d794:	2004      	movs	r0, #4
    d796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d79a:	f002 bf07 	b.w	105ac <L2cDataReq>
    d79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7a2 <attsDataCback>:
    d7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a6:	4680      	mov	r8, r0
    d7a8:	460e      	mov	r6, r1
    d7aa:	4617      	mov	r7, r2
    d7ac:	f7fe feda 	bl	c564 <attCcbByHandle>
    d7b0:	b368      	cbz	r0, d80e <attsDataCback+0x6c>
    d7b2:	7a39      	ldrb	r1, [r7, #8]
    d7b4:	2912      	cmp	r1, #18
    d7b6:	d903      	bls.n	d7c0 <attsDataCback+0x1e>
    d7b8:	f1a1 0316 	sub.w	r3, r1, #22
    d7bc:	2b08      	cmp	r3, #8
    d7be:	d80e      	bhi.n	d7de <attsDataCback+0x3c>
    d7c0:	084b      	lsrs	r3, r1, #1
    d7c2:	4a14      	ldr	r2, [pc, #80]	; (d814 <attsDataCback+0x72>)
    d7c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    d7c8:	b195      	cbz	r5, d7f0 <attsDataCback+0x4e>
    d7ca:	4a13      	ldr	r2, [pc, #76]	; (d818 <attsDataCback+0x76>)
    d7cc:	5cd3      	ldrb	r3, [r2, r3]
    d7ce:	42b3      	cmp	r3, r6
    d7d0:	d81b      	bhi.n	d80a <attsDataCback+0x68>
    d7d2:	463a      	mov	r2, r7
    d7d4:	4631      	mov	r1, r6
    d7d6:	462b      	mov	r3, r5
    d7d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d7dc:	4718      	bx	r3
    d7de:	2952      	cmp	r1, #82	; 0x52
    d7e0:	d004      	beq.n	d7ec <attsDataCback+0x4a>
    d7e2:	29d2      	cmp	r1, #210	; 0xd2
    d7e4:	bf0c      	ite	eq
    d7e6:	2310      	moveq	r3, #16
    d7e8:	2300      	movne	r3, #0
    d7ea:	e7ea      	b.n	d7c2 <attsDataCback+0x20>
    d7ec:	230a      	movs	r3, #10
    d7ee:	e7e8      	b.n	d7c2 <attsDataCback+0x20>
    d7f0:	2306      	movs	r3, #6
    d7f2:	2902      	cmp	r1, #2
    d7f4:	d00b      	beq.n	d80e <attsDataCback+0x6c>
    d7f6:	291e      	cmp	r1, #30
    d7f8:	d009      	beq.n	d80e <attsDataCback+0x6c>
    d7fa:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    d7fe:	d106      	bne.n	d80e <attsDataCback+0x6c>
    d800:	4640      	mov	r0, r8
    d802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d806:	f7ff bfb1 	b.w	d76c <attsErrRsp>
    d80a:	2304      	movs	r3, #4
    d80c:	e7f1      	b.n	d7f2 <attsDataCback+0x50>
    d80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d812:	bf00      	nop
    d814:	10002b10 	.word	0x10002b10
    d818:	00022ebc 	.word	0x00022ebc

0000d81c <attsClearPrepWrites>:
    d81c:	b510      	push	{r4, lr}
    d81e:	4604      	mov	r4, r0
    d820:	4620      	mov	r0, r4
    d822:	f00c fee9 	bl	1a5f8 <WsfQueueDeq>
    d826:	b900      	cbnz	r0, d82a <attsClearPrepWrites+0xe>
    d828:	bd10      	pop	{r4, pc}
    d82a:	f00c fe0b 	bl	1a444 <WsfBufFree>
    d82e:	e7f7      	b.n	d820 <attsClearPrepWrites+0x4>

0000d830 <attsConnCback>:
    d830:	788b      	ldrb	r3, [r1, #2]
    d832:	2b28      	cmp	r3, #40	; 0x28
    d834:	b570      	push	{r4, r5, r6, lr}
    d836:	4604      	mov	r4, r0
    d838:	460d      	mov	r5, r1
    d83a:	d10a      	bne.n	d852 <attsConnCback+0x22>
    d83c:	f7ff ffee 	bl	d81c <attsClearPrepWrites>
    d840:	7f20      	ldrb	r0, [r4, #28]
    d842:	f001 ffdb 	bl	f7fc <DmConnCheckIdle>
    d846:	0743      	lsls	r3, r0, #29
    d848:	d503      	bpl.n	d852 <attsConnCback+0x22>
    d84a:	f104 0008 	add.w	r0, r4, #8
    d84e:	f00d f827 	bl	1a8a0 <WsfTimerStop>
    d852:	4b04      	ldr	r3, [pc, #16]	; (d864 <attsConnCback+0x34>)
    d854:	689b      	ldr	r3, [r3, #8]
    d856:	4629      	mov	r1, r5
    d858:	4620      	mov	r0, r4
    d85a:	68db      	ldr	r3, [r3, #12]
    d85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d860:	4718      	bx	r3
    d862:	bf00      	nop
    d864:	10003c18 	.word	0x10003c18

0000d868 <attsDiscBusy>:
    d868:	b538      	push	{r3, r4, r5, lr}
    d86a:	4d0d      	ldr	r5, [pc, #52]	; (d8a0 <attsDiscBusy+0x38>)
    d86c:	682b      	ldr	r3, [r5, #0]
    d86e:	681b      	ldr	r3, [r3, #0]
    d870:	4604      	mov	r4, r0
    d872:	b1a3      	cbz	r3, d89e <attsDiscBusy+0x36>
    d874:	2104      	movs	r1, #4
    d876:	7f00      	ldrb	r0, [r0, #28]
    d878:	2201      	movs	r2, #1
    d87a:	f001 ffa5 	bl	f7c8 <DmConnSetIdle>
    d87e:	4b09      	ldr	r3, [pc, #36]	; (d8a4 <attsDiscBusy+0x3c>)
    d880:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    d884:	7423      	strb	r3, [r4, #16]
    d886:	2320      	movs	r3, #32
    d888:	7523      	strb	r3, [r4, #20]
    d88a:	7f23      	ldrb	r3, [r4, #28]
    d88c:	8263      	strh	r3, [r4, #18]
    d88e:	682b      	ldr	r3, [r5, #0]
    d890:	f104 0008 	add.w	r0, r4, #8
    d894:	6819      	ldr	r1, [r3, #0]
    d896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d89a:	f00c bfdb 	b.w	1a854 <WsfTimerStartSec>
    d89e:	bd38      	pop	{r3, r4, r5, pc}
    d8a0:	10002bb4 	.word	0x10002bb4
    d8a4:	100037b4 	.word	0x100037b4

0000d8a8 <AttsInit>:
    d8a8:	4b06      	ldr	r3, [pc, #24]	; (d8c4 <AttsInit+0x1c>)
    d8aa:	2200      	movs	r2, #0
    d8ac:	e9c3 2200 	strd	r2, r2, [r3]
    d8b0:	4a05      	ldr	r2, [pc, #20]	; (d8c8 <AttsInit+0x20>)
    d8b2:	609a      	str	r2, [r3, #8]
    d8b4:	4a05      	ldr	r2, [pc, #20]	; (d8cc <AttsInit+0x24>)
    d8b6:	60da      	str	r2, [r3, #12]
    d8b8:	4b05      	ldr	r3, [pc, #20]	; (d8d0 <AttsInit+0x28>)
    d8ba:	4a06      	ldr	r2, [pc, #24]	; (d8d4 <AttsInit+0x2c>)
    d8bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d8c0:	4770      	bx	lr
    d8c2:	bf00      	nop
    d8c4:	10003c18 	.word	0x10003c18
    d8c8:	00022d14 	.word	0x00022d14
    d8cc:	0000c501 	.word	0x0000c501
    d8d0:	100037b4 	.word	0x100037b4
    d8d4:	00022ed0 	.word	0x00022ed0

0000d8d8 <AttsAuthorRegister>:
    d8d8:	4b01      	ldr	r3, [pc, #4]	; (d8e0 <AttsAuthorRegister+0x8>)
    d8da:	6118      	str	r0, [r3, #16]
    d8dc:	4770      	bx	lr
    d8de:	bf00      	nop
    d8e0:	10003c18 	.word	0x10003c18

0000d8e4 <AttsAddGroup>:
    d8e4:	b510      	push	{r4, lr}
    d8e6:	4604      	mov	r4, r0
    d8e8:	f00b f93a 	bl	18b60 <WsfTaskLock>
    d8ec:	4b09      	ldr	r3, [pc, #36]	; (d914 <AttsAddGroup+0x30>)
    d8ee:	681b      	ldr	r3, [r3, #0]
    d8f0:	2200      	movs	r2, #0
    d8f2:	b11b      	cbz	r3, d8fc <AttsAddGroup+0x18>
    d8f4:	8a20      	ldrh	r0, [r4, #16]
    d8f6:	8a19      	ldrh	r1, [r3, #16]
    d8f8:	4288      	cmp	r0, r1
    d8fa:	d207      	bcs.n	d90c <AttsAddGroup+0x28>
    d8fc:	4621      	mov	r1, r4
    d8fe:	4805      	ldr	r0, [pc, #20]	; (d914 <AttsAddGroup+0x30>)
    d900:	f00c feb3 	bl	1a66a <WsfQueueInsert>
    d904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d908:	f00b b930 	b.w	18b6c <WsfTaskUnlock>
    d90c:	461a      	mov	r2, r3
    d90e:	681b      	ldr	r3, [r3, #0]
    d910:	e7ef      	b.n	d8f2 <AttsAddGroup+0xe>
    d912:	bf00      	nop
    d914:	10003c18 	.word	0x10003c18

0000d918 <AttsRemoveGroup>:
    d918:	b510      	push	{r4, lr}
    d91a:	4604      	mov	r4, r0
    d91c:	f00b f920 	bl	18b60 <WsfTaskLock>
    d920:	4b08      	ldr	r3, [pc, #32]	; (d944 <AttsRemoveGroup+0x2c>)
    d922:	6819      	ldr	r1, [r3, #0]
    d924:	2200      	movs	r2, #0
    d926:	b919      	cbnz	r1, d930 <AttsRemoveGroup+0x18>
    d928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d92c:	f00b b91e 	b.w	18b6c <WsfTaskUnlock>
    d930:	8a0b      	ldrh	r3, [r1, #16]
    d932:	42a3      	cmp	r3, r4
    d934:	d002      	beq.n	d93c <AttsRemoveGroup+0x24>
    d936:	460a      	mov	r2, r1
    d938:	6809      	ldr	r1, [r1, #0]
    d93a:	e7f4      	b.n	d926 <AttsRemoveGroup+0xe>
    d93c:	4801      	ldr	r0, [pc, #4]	; (d944 <AttsRemoveGroup+0x2c>)
    d93e:	f00c febf 	bl	1a6c0 <WsfQueueRemove>
    d942:	e7f1      	b.n	d928 <AttsRemoveGroup+0x10>
    d944:	10003c18 	.word	0x10003c18

0000d948 <AttsSetAttr>:
    d948:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d94a:	4605      	mov	r5, r0
    d94c:	460e      	mov	r6, r1
    d94e:	4614      	mov	r4, r2
    d950:	f00b f906 	bl	18b60 <WsfTaskLock>
    d954:	4628      	mov	r0, r5
    d956:	a901      	add	r1, sp, #4
    d958:	f000 f862 	bl	da20 <attsFindByHandle>
    d95c:	4605      	mov	r5, r0
    d95e:	b198      	cbz	r0, d988 <AttsSetAttr+0x40>
    d960:	8983      	ldrh	r3, [r0, #12]
    d962:	42b3      	cmp	r3, r6
    d964:	d312      	bcc.n	d98c <AttsSetAttr+0x44>
    d966:	4621      	mov	r1, r4
    d968:	4632      	mov	r2, r6
    d96a:	6840      	ldr	r0, [r0, #4]
    d96c:	f7fe fbf8 	bl	c160 <memcpy>
    d970:	7bac      	ldrb	r4, [r5, #14]
    d972:	f014 0408 	ands.w	r4, r4, #8
    d976:	d002      	beq.n	d97e <AttsSetAttr+0x36>
    d978:	68ab      	ldr	r3, [r5, #8]
    d97a:	2400      	movs	r4, #0
    d97c:	801e      	strh	r6, [r3, #0]
    d97e:	f00b f8f5 	bl	18b6c <WsfTaskUnlock>
    d982:	4620      	mov	r0, r4
    d984:	b002      	add	sp, #8
    d986:	bd70      	pop	{r4, r5, r6, pc}
    d988:	240a      	movs	r4, #10
    d98a:	e7f8      	b.n	d97e <AttsSetAttr+0x36>
    d98c:	240d      	movs	r4, #13
    d98e:	e7f6      	b.n	d97e <AttsSetAttr+0x36>

0000d990 <AttsGetAttr>:
    d990:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d992:	460d      	mov	r5, r1
    d994:	a901      	add	r1, sp, #4
    d996:	4614      	mov	r4, r2
    d998:	f000 f842 	bl	da20 <attsFindByHandle>
    d99c:	b138      	cbz	r0, d9ae <AttsGetAttr+0x1e>
    d99e:	6883      	ldr	r3, [r0, #8]
    d9a0:	881b      	ldrh	r3, [r3, #0]
    d9a2:	802b      	strh	r3, [r5, #0]
    d9a4:	6843      	ldr	r3, [r0, #4]
    d9a6:	6023      	str	r3, [r4, #0]
    d9a8:	2000      	movs	r0, #0
    d9aa:	b003      	add	sp, #12
    d9ac:	bd30      	pop	{r4, r5, pc}
    d9ae:	200a      	movs	r0, #10
    d9b0:	e7fb      	b.n	d9aa <AttsGetAttr+0x1a>

0000d9b2 <AttsErrorTest>:
    d9b2:	4b02      	ldr	r3, [pc, #8]	; (d9bc <AttsErrorTest+0xa>)
    d9b4:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    d9b8:	4770      	bx	lr
    d9ba:	bf00      	nop
    d9bc:	100037b4 	.word	0x100037b4

0000d9c0 <attsUuidCmp>:
    d9c0:	b510      	push	{r4, lr}
    d9c2:	4604      	mov	r4, r0
    d9c4:	4613      	mov	r3, r2
    d9c6:	7ba2      	ldrb	r2, [r4, #14]
    d9c8:	6800      	ldr	r0, [r0, #0]
    d9ca:	07d2      	lsls	r2, r2, #31
    d9cc:	d409      	bmi.n	d9e2 <attsUuidCmp+0x22>
    d9ce:	2902      	cmp	r1, #2
    d9d0:	d10c      	bne.n	d9ec <attsUuidCmp+0x2c>
    d9d2:	460a      	mov	r2, r1
    d9d4:	4619      	mov	r1, r3
    d9d6:	f7fe fb93 	bl	c100 <memcmp>
    d9da:	fab0 f080 	clz	r0, r0
    d9de:	0940      	lsrs	r0, r0, #5
    d9e0:	bd10      	pop	{r4, pc}
    d9e2:	2910      	cmp	r1, #16
    d9e4:	d0f5      	beq.n	d9d2 <attsUuidCmp+0x12>
    d9e6:	4601      	mov	r1, r0
    d9e8:	4618      	mov	r0, r3
    d9ea:	e002      	b.n	d9f2 <attsUuidCmp+0x32>
    d9ec:	2910      	cmp	r1, #16
    d9ee:	d1fa      	bne.n	d9e6 <attsUuidCmp+0x26>
    d9f0:	4619      	mov	r1, r3
    d9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9f6:	f7fe bdc9 	b.w	c58c <attUuidCmp16to128>

0000d9fa <attsUuid16Cmp>:
    d9fa:	2902      	cmp	r1, #2
    d9fc:	4603      	mov	r3, r0
    d9fe:	d10c      	bne.n	da1a <attsUuid16Cmp+0x20>
    da00:	7800      	ldrb	r0, [r0, #0]
    da02:	7811      	ldrb	r1, [r2, #0]
    da04:	4288      	cmp	r0, r1
    da06:	d106      	bne.n	da16 <attsUuid16Cmp+0x1c>
    da08:	7858      	ldrb	r0, [r3, #1]
    da0a:	7853      	ldrb	r3, [r2, #1]
    da0c:	1ac3      	subs	r3, r0, r3
    da0e:	4258      	negs	r0, r3
    da10:	4158      	adcs	r0, r3
    da12:	b2c0      	uxtb	r0, r0
    da14:	4770      	bx	lr
    da16:	2000      	movs	r0, #0
    da18:	e7fb      	b.n	da12 <attsUuid16Cmp+0x18>
    da1a:	4611      	mov	r1, r2
    da1c:	f7fe bdb6 	b.w	c58c <attUuidCmp16to128>

0000da20 <attsFindByHandle>:
    da20:	b510      	push	{r4, lr}
    da22:	4b08      	ldr	r3, [pc, #32]	; (da44 <attsFindByHandle+0x24>)
    da24:	681b      	ldr	r3, [r3, #0]
    da26:	b90b      	cbnz	r3, da2c <attsFindByHandle+0xc>
    da28:	4618      	mov	r0, r3
    da2a:	e00a      	b.n	da42 <attsFindByHandle+0x22>
    da2c:	8a1a      	ldrh	r2, [r3, #16]
    da2e:	4282      	cmp	r2, r0
    da30:	d8f8      	bhi.n	da24 <attsFindByHandle+0x4>
    da32:	8a5c      	ldrh	r4, [r3, #18]
    da34:	4284      	cmp	r4, r0
    da36:	d3f5      	bcc.n	da24 <attsFindByHandle+0x4>
    da38:	600b      	str	r3, [r1, #0]
    da3a:	685b      	ldr	r3, [r3, #4]
    da3c:	1a80      	subs	r0, r0, r2
    da3e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    da42:	bd10      	pop	{r4, pc}
    da44:	10003c18 	.word	0x10003c18

0000da48 <attsFindInRange>:
    da48:	b530      	push	{r4, r5, lr}
    da4a:	4b0a      	ldr	r3, [pc, #40]	; (da74 <attsFindInRange+0x2c>)
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	b90b      	cbnz	r3, da54 <attsFindInRange+0xc>
    da50:	4618      	mov	r0, r3
    da52:	e00d      	b.n	da70 <attsFindInRange+0x28>
    da54:	8a1c      	ldrh	r4, [r3, #16]
    da56:	4284      	cmp	r4, r0
    da58:	d902      	bls.n	da60 <attsFindInRange+0x18>
    da5a:	428c      	cmp	r4, r1
    da5c:	d8f6      	bhi.n	da4c <attsFindInRange+0x4>
    da5e:	4620      	mov	r0, r4
    da60:	8a5d      	ldrh	r5, [r3, #18]
    da62:	4285      	cmp	r5, r0
    da64:	d3f2      	bcc.n	da4c <attsFindInRange+0x4>
    da66:	685b      	ldr	r3, [r3, #4]
    da68:	1b04      	subs	r4, r0, r4
    da6a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    da6e:	6014      	str	r4, [r2, #0]
    da70:	bd30      	pop	{r4, r5, pc}
    da72:	bf00      	nop
    da74:	10003c18 	.word	0x10003c18

0000da78 <attsPermissions>:
    da78:	420b      	tst	r3, r1
    da7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da7e:	4606      	mov	r6, r0
    da80:	460d      	mov	r5, r1
    da82:	4617      	mov	r7, r2
    da84:	461c      	mov	r4, r3
    da86:	d105      	bne.n	da94 <attsPermissions+0x1c>
    da88:	2901      	cmp	r1, #1
    da8a:	bf0c      	ite	eq
    da8c:	2002      	moveq	r0, #2
    da8e:	2003      	movne	r0, #3
    da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da94:	2910      	cmp	r1, #16
    da96:	bf08      	it	eq
    da98:	091c      	lsreq	r4, r3, #4
    da9a:	f014 0f0e 	tst.w	r4, #14
    da9e:	d101      	bne.n	daa4 <attsPermissions+0x2c>
    daa0:	2000      	movs	r0, #0
    daa2:	e7f5      	b.n	da90 <attsPermissions+0x18>
    daa4:	f001 fe86 	bl	f7b4 <DmConnSecLevel>
    daa8:	0722      	lsls	r2, r4, #28
    daaa:	d500      	bpl.n	daae <attsPermissions+0x36>
    daac:	b180      	cbz	r0, dad0 <attsPermissions+0x58>
    daae:	f004 030a 	and.w	r3, r4, #10
    dab2:	2b0a      	cmp	r3, #10
    dab4:	d101      	bne.n	daba <attsPermissions+0x42>
    dab6:	2801      	cmp	r0, #1
    dab8:	d90a      	bls.n	dad0 <attsPermissions+0x58>
    daba:	0763      	lsls	r3, r4, #29
    dabc:	d5f0      	bpl.n	daa0 <attsPermissions+0x28>
    dabe:	4b06      	ldr	r3, [pc, #24]	; (dad8 <attsPermissions+0x60>)
    dac0:	691b      	ldr	r3, [r3, #16]
    dac2:	b13b      	cbz	r3, dad4 <attsPermissions+0x5c>
    dac4:	463a      	mov	r2, r7
    dac6:	4629      	mov	r1, r5
    dac8:	4630      	mov	r0, r6
    daca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dace:	4718      	bx	r3
    dad0:	2005      	movs	r0, #5
    dad2:	e7dd      	b.n	da90 <attsPermissions+0x18>
    dad4:	2008      	movs	r0, #8
    dad6:	e7db      	b.n	da90 <attsPermissions+0x18>
    dad8:	10003c18 	.word	0x10003c18

0000dadc <attsProcMtuReq>:
    dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dade:	7a93      	ldrb	r3, [r2, #10]
    dae0:	7a54      	ldrb	r4, [r2, #9]
    dae2:	4d17      	ldr	r5, [pc, #92]	; (db40 <attsProcMtuReq+0x64>)
    dae4:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dae8:	b2a4      	uxth	r4, r4
    daea:	682b      	ldr	r3, [r5, #0]
    daec:	2c17      	cmp	r4, #23
    daee:	bf38      	it	cc
    daf0:	2417      	movcc	r4, #23
    daf2:	889f      	ldrh	r7, [r3, #4]
    daf4:	4606      	mov	r6, r0
    daf6:	f007 fd91 	bl	1561c <HciGetMaxRxAclLen>
    dafa:	3804      	subs	r0, #4
    dafc:	4287      	cmp	r7, r0
    dafe:	da1a      	bge.n	db36 <attsProcMtuReq+0x5a>
    db00:	682b      	ldr	r3, [r5, #0]
    db02:	889d      	ldrh	r5, [r3, #4]
    db04:	42a5      	cmp	r5, r4
    db06:	f04f 000b 	mov.w	r0, #11
    db0a:	bf28      	it	cs
    db0c:	4625      	movcs	r5, r4
    db0e:	f7fe fd7b 	bl	c608 <attMsgAlloc>
    db12:	4603      	mov	r3, r0
    db14:	b140      	cbz	r0, db28 <attsProcMtuReq+0x4c>
    db16:	0a29      	lsrs	r1, r5, #8
    db18:	2203      	movs	r2, #3
    db1a:	7202      	strb	r2, [r0, #8]
    db1c:	7245      	strb	r5, [r0, #9]
    db1e:	7281      	strb	r1, [r0, #10]
    db20:	8b31      	ldrh	r1, [r6, #24]
    db22:	2004      	movs	r0, #4
    db24:	f002 fd42 	bl	105ac <L2cDataReq>
    db28:	462a      	mov	r2, r5
    db2a:	4621      	mov	r1, r4
    db2c:	4630      	mov	r0, r6
    db2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    db32:	f7fe bd57 	b.w	c5e4 <attSetMtu>
    db36:	f007 fd71 	bl	1561c <HciGetMaxRxAclLen>
    db3a:	1f05      	subs	r5, r0, #4
    db3c:	b2ad      	uxth	r5, r5
    db3e:	e7e1      	b.n	db04 <attsProcMtuReq+0x28>
    db40:	10002bb4 	.word	0x10002bb4

0000db44 <attsProcFindInfoReq>:
    db44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    db48:	7a93      	ldrb	r3, [r2, #10]
    db4a:	7a57      	ldrb	r7, [r2, #9]
    db4c:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    db50:	b2bf      	uxth	r7, r7
    db52:	4680      	mov	r8, r0
    db54:	2f00      	cmp	r7, #0
    db56:	d076      	beq.n	dc46 <attsProcFindInfoReq+0x102>
    db58:	7b13      	ldrb	r3, [r2, #12]
    db5a:	f892 900b 	ldrb.w	r9, [r2, #11]
    db5e:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    db62:	fa1f f989 	uxth.w	r9, r9
    db66:	454f      	cmp	r7, r9
    db68:	d86d      	bhi.n	dc46 <attsProcFindInfoReq+0x102>
    db6a:	8b40      	ldrh	r0, [r0, #26]
    db6c:	3008      	adds	r0, #8
    db6e:	b280      	uxth	r0, r0
    db70:	f7fe fd4a 	bl	c608 <attMsgAlloc>
    db74:	4606      	mov	r6, r0
    db76:	2800      	cmp	r0, #0
    db78:	d067      	beq.n	dc4a <attsProcFindInfoReq+0x106>
    db7a:	2305      	movs	r3, #5
    db7c:	7203      	strb	r3, [r0, #8]
    db7e:	2301      	movs	r3, #1
    db80:	7243      	strb	r3, [r0, #9]
    db82:	f100 040e 	add.w	r4, r0, #14
    db86:	f64f 7aff 	movw	sl, #65535	; 0xffff
    db8a:	4638      	mov	r0, r7
    db8c:	aa01      	add	r2, sp, #4
    db8e:	4649      	mov	r1, r9
    db90:	1f25      	subs	r5, r4, #4
    db92:	f7ff ff59 	bl	da48 <attsFindInRange>
    db96:	b1d0      	cbz	r0, dbce <attsProcFindInfoReq+0x8a>
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	7b9b      	ldrb	r3, [r3, #14]
    db9c:	07db      	lsls	r3, r3, #31
    db9e:	d530      	bpl.n	dc02 <attsProcFindInfoReq+0xbe>
    dba0:	f106 030a 	add.w	r3, r6, #10
    dba4:	429d      	cmp	r5, r3
    dba6:	d112      	bne.n	dbce <attsProcFindInfoReq+0x8a>
    dba8:	7028      	strb	r0, [r5, #0]
    dbaa:	2302      	movs	r3, #2
    dbac:	0a00      	lsrs	r0, r0, #8
    dbae:	f805 3c01 	strb.w	r3, [r5, #-1]
    dbb2:	7068      	strb	r0, [r5, #1]
    dbb4:	9b01      	ldr	r3, [sp, #4]
    dbb6:	681b      	ldr	r3, [r3, #0]
    dbb8:	f106 020c 	add.w	r2, r6, #12
    dbbc:	f103 0110 	add.w	r1, r3, #16
    dbc0:	f853 0b04 	ldr.w	r0, [r3], #4
    dbc4:	f842 0b04 	str.w	r0, [r2], #4
    dbc8:	428b      	cmp	r3, r1
    dbca:	d1f9      	bne.n	dbc0 <attsProcFindInfoReq+0x7c>
    dbcc:	3512      	adds	r5, #18
    dbce:	f106 030a 	add.w	r3, r6, #10
    dbd2:	429d      	cmp	r5, r3
    dbd4:	d13b      	bne.n	dc4e <attsProcFindInfoReq+0x10a>
    dbd6:	4630      	mov	r0, r6
    dbd8:	f00c fc9a 	bl	1a510 <WsfMsgFree>
    dbdc:	240a      	movs	r4, #10
    dbde:	4640      	mov	r0, r8
    dbe0:	f7ff fe42 	bl	d868 <attsDiscBusy>
    dbe4:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    dbe8:	bb9c      	cbnz	r4, dc52 <attsProcFindInfoReq+0x10e>
    dbea:	f106 0208 	add.w	r2, r6, #8
    dbee:	1aaa      	subs	r2, r5, r2
    dbf0:	4601      	mov	r1, r0
    dbf2:	4633      	mov	r3, r6
    dbf4:	b292      	uxth	r2, r2
    dbf6:	2004      	movs	r0, #4
    dbf8:	f002 fcd8 	bl	105ac <L2cDataReq>
    dbfc:	b002      	add	sp, #8
    dbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc02:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    dc06:	3308      	adds	r3, #8
    dc08:	4433      	add	r3, r6
    dc0a:	429c      	cmp	r4, r3
    dc0c:	4622      	mov	r2, r4
    dc0e:	d8de      	bhi.n	dbce <attsProcFindInfoReq+0x8a>
    dc10:	0a03      	lsrs	r3, r0, #8
    dc12:	f804 0c04 	strb.w	r0, [r4, #-4]
    dc16:	f804 3c03 	strb.w	r3, [r4, #-3]
    dc1a:	9b01      	ldr	r3, [sp, #4]
    dc1c:	681b      	ldr	r3, [r3, #0]
    dc1e:	781b      	ldrb	r3, [r3, #0]
    dc20:	f804 3c02 	strb.w	r3, [r4, #-2]
    dc24:	9b01      	ldr	r3, [sp, #4]
    dc26:	681b      	ldr	r3, [r3, #0]
    dc28:	4550      	cmp	r0, sl
    dc2a:	785b      	ldrb	r3, [r3, #1]
    dc2c:	f804 3c01 	strb.w	r3, [r4, #-1]
    dc30:	d007      	beq.n	dc42 <attsProcFindInfoReq+0xfe>
    dc32:	3001      	adds	r0, #1
    dc34:	b280      	uxth	r0, r0
    dc36:	4581      	cmp	r9, r0
    dc38:	f104 0404 	add.w	r4, r4, #4
    dc3c:	d2a6      	bcs.n	db8c <attsProcFindInfoReq+0x48>
    dc3e:	4615      	mov	r5, r2
    dc40:	e7c5      	b.n	dbce <attsProcFindInfoReq+0x8a>
    dc42:	4625      	mov	r5, r4
    dc44:	e7c3      	b.n	dbce <attsProcFindInfoReq+0x8a>
    dc46:	2401      	movs	r4, #1
    dc48:	e7c9      	b.n	dbde <attsProcFindInfoReq+0x9a>
    dc4a:	2411      	movs	r4, #17
    dc4c:	e7c7      	b.n	dbde <attsProcFindInfoReq+0x9a>
    dc4e:	2400      	movs	r4, #0
    dc50:	e7c5      	b.n	dbde <attsProcFindInfoReq+0x9a>
    dc52:	4623      	mov	r3, r4
    dc54:	463a      	mov	r2, r7
    dc56:	2104      	movs	r1, #4
    dc58:	f7ff fd88 	bl	d76c <attsErrRsp>
    dc5c:	e7ce      	b.n	dbfc <attsProcFindInfoReq+0xb8>

0000dc5e <attsProcReadReq>:
    dc5e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    dc62:	7a93      	ldrb	r3, [r2, #10]
    dc64:	7a54      	ldrb	r4, [r2, #9]
    dc66:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dc6a:	b2a4      	uxth	r4, r4
    dc6c:	4606      	mov	r6, r0
    dc6e:	a903      	add	r1, sp, #12
    dc70:	4620      	mov	r0, r4
    dc72:	f7ff fed5 	bl	da20 <attsFindByHandle>
    dc76:	4605      	mov	r5, r0
    dc78:	2800      	cmp	r0, #0
    dc7a:	d047      	beq.n	dd0c <attsProcReadReq+0xae>
    dc7c:	7bc3      	ldrb	r3, [r0, #15]
    dc7e:	7f30      	ldrb	r0, [r6, #28]
    dc80:	4622      	mov	r2, r4
    dc82:	2101      	movs	r1, #1
    dc84:	f7ff fef8 	bl	da78 <attsPermissions>
    dc88:	4603      	mov	r3, r0
    dc8a:	b960      	cbnz	r0, dca6 <attsProcReadReq+0x48>
    dc8c:	7baa      	ldrb	r2, [r5, #14]
    dc8e:	0751      	lsls	r1, r2, #29
    dc90:	d50f      	bpl.n	dcb2 <attsProcReadReq+0x54>
    dc92:	9903      	ldr	r1, [sp, #12]
    dc94:	688f      	ldr	r7, [r1, #8]
    dc96:	b167      	cbz	r7, dcb2 <attsProcReadReq+0x54>
    dc98:	7f30      	ldrb	r0, [r6, #28]
    dc9a:	9500      	str	r5, [sp, #0]
    dc9c:	220a      	movs	r2, #10
    dc9e:	4621      	mov	r1, r4
    dca0:	47b8      	blx	r7
    dca2:	4603      	mov	r3, r0
    dca4:	b138      	cbz	r0, dcb6 <attsProcReadReq+0x58>
    dca6:	4622      	mov	r2, r4
    dca8:	210a      	movs	r1, #10
    dcaa:	8b30      	ldrh	r0, [r6, #24]
    dcac:	f7ff fd5e 	bl	d76c <attsErrRsp>
    dcb0:	e010      	b.n	dcd4 <attsProcReadReq+0x76>
    dcb2:	0693      	lsls	r3, r2, #26
    dcb4:	d411      	bmi.n	dcda <attsProcReadReq+0x7c>
    dcb6:	68ab      	ldr	r3, [r5, #8]
    dcb8:	8b74      	ldrh	r4, [r6, #26]
    dcba:	881a      	ldrh	r2, [r3, #0]
    dcbc:	3c01      	subs	r4, #1
    dcbe:	4294      	cmp	r4, r2
    dcc0:	bfa8      	it	ge
    dcc2:	4614      	movge	r4, r2
    dcc4:	b2a7      	uxth	r7, r4
    dcc6:	f107 0009 	add.w	r0, r7, #9
    dcca:	b280      	uxth	r0, r0
    dccc:	f7fe fc9c 	bl	c608 <attMsgAlloc>
    dcd0:	4680      	mov	r8, r0
    dcd2:	b960      	cbnz	r0, dcee <attsProcReadReq+0x90>
    dcd4:	b004      	add	sp, #16
    dcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dcda:	4b0d      	ldr	r3, [pc, #52]	; (dd10 <attsProcReadReq+0xb2>)
    dcdc:	695f      	ldr	r7, [r3, #20]
    dcde:	2f00      	cmp	r7, #0
    dce0:	d0e9      	beq.n	dcb6 <attsProcReadReq+0x58>
    dce2:	686b      	ldr	r3, [r5, #4]
    dce4:	7f30      	ldrb	r0, [r6, #28]
    dce6:	4622      	mov	r2, r4
    dce8:	2105      	movs	r1, #5
    dcea:	47b8      	blx	r7
    dcec:	e7d9      	b.n	dca2 <attsProcReadReq+0x44>
    dcee:	230b      	movs	r3, #11
    dcf0:	7203      	strb	r3, [r0, #8]
    dcf2:	b2a2      	uxth	r2, r4
    dcf4:	6869      	ldr	r1, [r5, #4]
    dcf6:	3009      	adds	r0, #9
    dcf8:	f7fe fa32 	bl	c160 <memcpy>
    dcfc:	1c7a      	adds	r2, r7, #1
    dcfe:	4643      	mov	r3, r8
    dd00:	b292      	uxth	r2, r2
    dd02:	8b31      	ldrh	r1, [r6, #24]
    dd04:	2004      	movs	r0, #4
    dd06:	f002 fc51 	bl	105ac <L2cDataReq>
    dd0a:	e7e3      	b.n	dcd4 <attsProcReadReq+0x76>
    dd0c:	2301      	movs	r3, #1
    dd0e:	e7ca      	b.n	dca6 <attsProcReadReq+0x48>
    dd10:	10003c18 	.word	0x10003c18

0000dd14 <attsFindUuidInRange>:
    dd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd18:	4699      	mov	r9, r3
    dd1a:	4b1a      	ldr	r3, [pc, #104]	; (dd84 <attsFindUuidInRange+0x70>)
    dd1c:	9e08      	ldr	r6, [sp, #32]
    dd1e:	681d      	ldr	r5, [r3, #0]
    dd20:	460f      	mov	r7, r1
    dd22:	4690      	mov	r8, r2
    dd24:	4604      	mov	r4, r0
    dd26:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dd2a:	b90d      	cbnz	r5, dd30 <attsFindUuidInRange+0x1c>
    dd2c:	462c      	mov	r4, r5
    dd2e:	e025      	b.n	dd7c <attsFindUuidInRange+0x68>
    dd30:	8a2a      	ldrh	r2, [r5, #16]
    dd32:	42a2      	cmp	r2, r4
    dd34:	d90c      	bls.n	dd50 <attsFindUuidInRange+0x3c>
    dd36:	42ba      	cmp	r2, r7
    dd38:	d909      	bls.n	dd4e <attsFindUuidInRange+0x3a>
    dd3a:	682d      	ldr	r5, [r5, #0]
    dd3c:	e7f5      	b.n	dd2a <attsFindUuidInRange+0x16>
    dd3e:	4554      	cmp	r4, sl
    dd40:	d0fb      	beq.n	dd3a <attsFindUuidInRange+0x26>
    dd42:	6833      	ldr	r3, [r6, #0]
    dd44:	3401      	adds	r4, #1
    dd46:	3310      	adds	r3, #16
    dd48:	b2a4      	uxth	r4, r4
    dd4a:	6033      	str	r3, [r6, #0]
    dd4c:	e008      	b.n	dd60 <attsFindUuidInRange+0x4c>
    dd4e:	4614      	mov	r4, r2
    dd50:	8a6b      	ldrh	r3, [r5, #18]
    dd52:	42a3      	cmp	r3, r4
    dd54:	d3f1      	bcc.n	dd3a <attsFindUuidInRange+0x26>
    dd56:	686b      	ldr	r3, [r5, #4]
    dd58:	1aa2      	subs	r2, r4, r2
    dd5a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    dd5e:	6032      	str	r2, [r6, #0]
    dd60:	8a6b      	ldrh	r3, [r5, #18]
    dd62:	42a3      	cmp	r3, r4
    dd64:	d3e9      	bcc.n	dd3a <attsFindUuidInRange+0x26>
    dd66:	42bc      	cmp	r4, r7
    dd68:	d8e7      	bhi.n	dd3a <attsFindUuidInRange+0x26>
    dd6a:	464a      	mov	r2, r9
    dd6c:	4641      	mov	r1, r8
    dd6e:	6830      	ldr	r0, [r6, #0]
    dd70:	f7ff fe26 	bl	d9c0 <attsUuidCmp>
    dd74:	2800      	cmp	r0, #0
    dd76:	d0e2      	beq.n	dd3e <attsFindUuidInRange+0x2a>
    dd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd7a:	601d      	str	r5, [r3, #0]
    dd7c:	4620      	mov	r0, r4
    dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd82:	bf00      	nop
    dd84:	10003c18 	.word	0x10003c18

0000dd88 <attsFindServiceGroupEnd>:
    dd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dd8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    dd8e:	f8ad 3000 	strh.w	r3, [sp]
    dd92:	4b1d      	ldr	r3, [pc, #116]	; (de08 <attsFindServiceGroupEnd+0x80>)
    dd94:	881b      	ldrh	r3, [r3, #0]
    dd96:	f8ad 3004 	strh.w	r3, [sp, #4]
    dd9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd9e:	4298      	cmp	r0, r3
    dda0:	d104      	bne.n	ddac <attsFindServiceGroupEnd+0x24>
    dda2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    dda6:	4628      	mov	r0, r5
    dda8:	b003      	add	sp, #12
    ddaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddac:	4b17      	ldr	r3, [pc, #92]	; (de0c <attsFindServiceGroupEnd+0x84>)
    ddae:	1c44      	adds	r4, r0, #1
    ddb0:	681f      	ldr	r7, [r3, #0]
    ddb2:	b2a4      	uxth	r4, r4
    ddb4:	4605      	mov	r5, r0
    ddb6:	2f00      	cmp	r7, #0
    ddb8:	d0f3      	beq.n	dda2 <attsFindServiceGroupEnd+0x1a>
    ddba:	8a3e      	ldrh	r6, [r7, #16]
    ddbc:	8a7b      	ldrh	r3, [r7, #18]
    ddbe:	42b4      	cmp	r4, r6
    ddc0:	bf38      	it	cc
    ddc2:	4634      	movcc	r4, r6
    ddc4:	42a3      	cmp	r3, r4
    ddc6:	d306      	bcc.n	ddd6 <attsFindServiceGroupEnd+0x4e>
    ddc8:	1ba3      	subs	r3, r4, r6
    ddca:	687e      	ldr	r6, [r7, #4]
    ddcc:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    ddd0:	8a7b      	ldrh	r3, [r7, #18]
    ddd2:	42a3      	cmp	r3, r4
    ddd4:	d201      	bcs.n	ddda <attsFindServiceGroupEnd+0x52>
    ddd6:	683f      	ldr	r7, [r7, #0]
    ddd8:	e7ed      	b.n	ddb6 <attsFindServiceGroupEnd+0x2e>
    ddda:	466a      	mov	r2, sp
    dddc:	2102      	movs	r1, #2
    ddde:	4630      	mov	r0, r6
    dde0:	f7ff fdee 	bl	d9c0 <attsUuidCmp>
    dde4:	2800      	cmp	r0, #0
    dde6:	d1de      	bne.n	dda6 <attsFindServiceGroupEnd+0x1e>
    dde8:	aa01      	add	r2, sp, #4
    ddea:	2102      	movs	r1, #2
    ddec:	4630      	mov	r0, r6
    ddee:	f7ff fde7 	bl	d9c0 <attsUuidCmp>
    ddf2:	2800      	cmp	r0, #0
    ddf4:	d1d7      	bne.n	dda6 <attsFindServiceGroupEnd+0x1e>
    ddf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ddfa:	429c      	cmp	r4, r3
    ddfc:	d0d1      	beq.n	dda2 <attsFindServiceGroupEnd+0x1a>
    ddfe:	1c63      	adds	r3, r4, #1
    de00:	4625      	mov	r5, r4
    de02:	3610      	adds	r6, #16
    de04:	b29c      	uxth	r4, r3
    de06:	e7e3      	b.n	ddd0 <attsFindServiceGroupEnd+0x48>
    de08:	00022ee0 	.word	0x00022ee0
    de0c:	10003c18 	.word	0x10003c18

0000de10 <attsProcReadBlobReq>:
    de10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    de14:	7a93      	ldrb	r3, [r2, #10]
    de16:	7a54      	ldrb	r4, [r2, #9]
    de18:	7ad5      	ldrb	r5, [r2, #11]
    de1a:	f892 800c 	ldrb.w	r8, [r2, #12]
    de1e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    de22:	b085      	sub	sp, #20
    de24:	b2a4      	uxth	r4, r4
    de26:	4607      	mov	r7, r0
    de28:	a903      	add	r1, sp, #12
    de2a:	4620      	mov	r0, r4
    de2c:	f7ff fdf8 	bl	da20 <attsFindByHandle>
    de30:	4606      	mov	r6, r0
    de32:	2800      	cmp	r0, #0
    de34:	d057      	beq.n	dee6 <attsProcReadBlobReq+0xd6>
    de36:	7bc3      	ldrb	r3, [r0, #15]
    de38:	7f38      	ldrb	r0, [r7, #28]
    de3a:	4622      	mov	r2, r4
    de3c:	2101      	movs	r1, #1
    de3e:	f7ff fe1b 	bl	da78 <attsPermissions>
    de42:	b9b0      	cbnz	r0, de72 <attsProcReadBlobReq+0x62>
    de44:	68b3      	ldr	r3, [r6, #8]
    de46:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    de4a:	881b      	ldrh	r3, [r3, #0]
    de4c:	b2ad      	uxth	r5, r5
    de4e:	42ab      	cmp	r3, r5
    de50:	d34b      	bcc.n	deea <attsProcReadBlobReq+0xda>
    de52:	7bb3      	ldrb	r3, [r6, #14]
    de54:	075a      	lsls	r2, r3, #29
    de56:	d513      	bpl.n	de80 <attsProcReadBlobReq+0x70>
    de58:	9a03      	ldr	r2, [sp, #12]
    de5a:	f8d2 8008 	ldr.w	r8, [r2, #8]
    de5e:	f1b8 0f00 	cmp.w	r8, #0
    de62:	d00d      	beq.n	de80 <attsProcReadBlobReq+0x70>
    de64:	7f38      	ldrb	r0, [r7, #28]
    de66:	9600      	str	r6, [sp, #0]
    de68:	462b      	mov	r3, r5
    de6a:	220c      	movs	r2, #12
    de6c:	4621      	mov	r1, r4
    de6e:	47c0      	blx	r8
    de70:	b140      	cbz	r0, de84 <attsProcReadBlobReq+0x74>
    de72:	4603      	mov	r3, r0
    de74:	4622      	mov	r2, r4
    de76:	210c      	movs	r1, #12
    de78:	8b38      	ldrh	r0, [r7, #24]
    de7a:	f7ff fc77 	bl	d76c <attsErrRsp>
    de7e:	e012      	b.n	dea6 <attsProcReadBlobReq+0x96>
    de80:	069b      	lsls	r3, r3, #26
    de82:	d413      	bmi.n	deac <attsProcReadBlobReq+0x9c>
    de84:	68b3      	ldr	r3, [r6, #8]
    de86:	8b7a      	ldrh	r2, [r7, #26]
    de88:	881c      	ldrh	r4, [r3, #0]
    de8a:	3a01      	subs	r2, #1
    de8c:	1b64      	subs	r4, r4, r5
    de8e:	4294      	cmp	r4, r2
    de90:	bfa8      	it	ge
    de92:	4614      	movge	r4, r2
    de94:	fa1f f884 	uxth.w	r8, r4
    de98:	f108 0009 	add.w	r0, r8, #9
    de9c:	b280      	uxth	r0, r0
    de9e:	f7fe fbb3 	bl	c608 <attMsgAlloc>
    dea2:	4681      	mov	r9, r0
    dea4:	b970      	cbnz	r0, dec4 <attsProcReadBlobReq+0xb4>
    dea6:	b005      	add	sp, #20
    dea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    deac:	4b10      	ldr	r3, [pc, #64]	; (def0 <attsProcReadBlobReq+0xe0>)
    deae:	f8d3 8014 	ldr.w	r8, [r3, #20]
    deb2:	f1b8 0f00 	cmp.w	r8, #0
    deb6:	d0e5      	beq.n	de84 <attsProcReadBlobReq+0x74>
    deb8:	6873      	ldr	r3, [r6, #4]
    deba:	7f38      	ldrb	r0, [r7, #28]
    debc:	4622      	mov	r2, r4
    debe:	2105      	movs	r1, #5
    dec0:	47c0      	blx	r8
    dec2:	e7d5      	b.n	de70 <attsProcReadBlobReq+0x60>
    dec4:	230d      	movs	r3, #13
    dec6:	7203      	strb	r3, [r0, #8]
    dec8:	6871      	ldr	r1, [r6, #4]
    deca:	b2a2      	uxth	r2, r4
    decc:	4429      	add	r1, r5
    dece:	3009      	adds	r0, #9
    ded0:	f7fe f946 	bl	c160 <memcpy>
    ded4:	f108 0201 	add.w	r2, r8, #1
    ded8:	464b      	mov	r3, r9
    deda:	b292      	uxth	r2, r2
    dedc:	8b39      	ldrh	r1, [r7, #24]
    dede:	2004      	movs	r0, #4
    dee0:	f002 fb64 	bl	105ac <L2cDataReq>
    dee4:	e7df      	b.n	dea6 <attsProcReadBlobReq+0x96>
    dee6:	2001      	movs	r0, #1
    dee8:	e7c3      	b.n	de72 <attsProcReadBlobReq+0x62>
    deea:	2007      	movs	r0, #7
    deec:	e7c1      	b.n	de72 <attsProcReadBlobReq+0x62>
    deee:	bf00      	nop
    def0:	10003c18 	.word	0x10003c18

0000def4 <attsProcFindTypeReq>:
    def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    def8:	7a93      	ldrb	r3, [r2, #10]
    defa:	7a55      	ldrb	r5, [r2, #9]
    defc:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    df00:	b2ad      	uxth	r5, r5
    df02:	b087      	sub	sp, #28
    df04:	4682      	mov	sl, r0
    df06:	4689      	mov	r9, r1
    df08:	4616      	mov	r6, r2
    df0a:	2d00      	cmp	r5, #0
    df0c:	d075      	beq.n	dffa <attsProcFindTypeReq+0x106>
    df0e:	7b13      	ldrb	r3, [r2, #12]
    df10:	f892 800b 	ldrb.w	r8, [r2, #11]
    df14:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    df18:	fa1f f888 	uxth.w	r8, r8
    df1c:	4545      	cmp	r5, r8
    df1e:	d86c      	bhi.n	dffa <attsProcFindTypeReq+0x106>
    df20:	8b40      	ldrh	r0, [r0, #26]
    df22:	3008      	adds	r0, #8
    df24:	b280      	uxth	r0, r0
    df26:	f7fe fb6f 	bl	c608 <attMsgAlloc>
    df2a:	4607      	mov	r7, r0
    df2c:	2800      	cmp	r0, #0
    df2e:	d066      	beq.n	dffe <attsProcFindTypeReq+0x10a>
    df30:	2307      	movs	r3, #7
    df32:	f100 0409 	add.w	r4, r0, #9
    df36:	7203      	strb	r3, [r0, #8]
    df38:	f1a9 0907 	sub.w	r9, r9, #7
    df3c:	f106 030d 	add.w	r3, r6, #13
    df40:	fa1f f989 	uxth.w	r9, r9
    df44:	4628      	mov	r0, r5
    df46:	9403      	str	r4, [sp, #12]
    df48:	9302      	str	r3, [sp, #8]
    df4a:	ab05      	add	r3, sp, #20
    df4c:	9301      	str	r3, [sp, #4]
    df4e:	ab04      	add	r3, sp, #16
    df50:	9300      	str	r3, [sp, #0]
    df52:	2202      	movs	r2, #2
    df54:	9b02      	ldr	r3, [sp, #8]
    df56:	4641      	mov	r1, r8
    df58:	f7ff fedc 	bl	dd14 <attsFindUuidInRange>
    df5c:	4683      	mov	fp, r0
    df5e:	b9c8      	cbnz	r0, df94 <attsProcFindTypeReq+0xa0>
    df60:	9b03      	ldr	r3, [sp, #12]
    df62:	429c      	cmp	r4, r3
    df64:	d14d      	bne.n	e002 <attsProcFindTypeReq+0x10e>
    df66:	4638      	mov	r0, r7
    df68:	f00c fad2 	bl	1a510 <WsfMsgFree>
    df6c:	260a      	movs	r6, #10
    df6e:	4650      	mov	r0, sl
    df70:	f7ff fc7a 	bl	d868 <attsDiscBusy>
    df74:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    df78:	2e00      	cmp	r6, #0
    df7a:	d144      	bne.n	e006 <attsProcFindTypeReq+0x112>
    df7c:	f107 0208 	add.w	r2, r7, #8
    df80:	1aa2      	subs	r2, r4, r2
    df82:	4601      	mov	r1, r0
    df84:	463b      	mov	r3, r7
    df86:	b292      	uxth	r2, r2
    df88:	2004      	movs	r0, #4
    df8a:	f002 fb0f 	bl	105ac <L2cDataReq>
    df8e:	b007      	add	sp, #28
    df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df94:	9904      	ldr	r1, [sp, #16]
    df96:	7bca      	ldrb	r2, [r1, #15]
    df98:	07d3      	lsls	r3, r2, #31
    df9a:	d526      	bpl.n	dfea <attsProcFindTypeReq+0xf6>
    df9c:	f1b9 0f00 	cmp.w	r9, #0
    dfa0:	d00a      	beq.n	dfb8 <attsProcFindTypeReq+0xc4>
    dfa2:	688a      	ldr	r2, [r1, #8]
    dfa4:	8812      	ldrh	r2, [r2, #0]
    dfa6:	454a      	cmp	r2, r9
    dfa8:	d11f      	bne.n	dfea <attsProcFindTypeReq+0xf6>
    dfaa:	464a      	mov	r2, r9
    dfac:	6849      	ldr	r1, [r1, #4]
    dfae:	f106 000f 	add.w	r0, r6, #15
    dfb2:	f7fe f8a5 	bl	c100 <memcmp>
    dfb6:	b9c0      	cbnz	r0, dfea <attsProcFindTypeReq+0xf6>
    dfb8:	7b72      	ldrb	r2, [r6, #13]
    dfba:	b9e2      	cbnz	r2, dff6 <attsProcFindTypeReq+0x102>
    dfbc:	7bb2      	ldrb	r2, [r6, #14]
    dfbe:	2a28      	cmp	r2, #40	; 0x28
    dfc0:	4658      	mov	r0, fp
    dfc2:	d101      	bne.n	dfc8 <attsProcFindTypeReq+0xd4>
    dfc4:	f7ff fee0 	bl	dd88 <attsFindServiceGroupEnd>
    dfc8:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    dfcc:	3208      	adds	r2, #8
    dfce:	1d21      	adds	r1, r4, #4
    dfd0:	443a      	add	r2, r7
    dfd2:	4291      	cmp	r1, r2
    dfd4:	d8c4      	bhi.n	df60 <attsProcFindTypeReq+0x6c>
    dfd6:	ea4f 231b 	mov.w	r3, fp, lsr #8
    dfda:	7063      	strb	r3, [r4, #1]
    dfdc:	0a03      	lsrs	r3, r0, #8
    dfde:	f884 b000 	strb.w	fp, [r4]
    dfe2:	70a0      	strb	r0, [r4, #2]
    dfe4:	70e3      	strb	r3, [r4, #3]
    dfe6:	4683      	mov	fp, r0
    dfe8:	460c      	mov	r4, r1
    dfea:	45c3      	cmp	fp, r8
    dfec:	d2b8      	bcs.n	df60 <attsProcFindTypeReq+0x6c>
    dfee:	f10b 0001 	add.w	r0, fp, #1
    dff2:	b280      	uxth	r0, r0
    dff4:	e7a9      	b.n	df4a <attsProcFindTypeReq+0x56>
    dff6:	4658      	mov	r0, fp
    dff8:	e7e6      	b.n	dfc8 <attsProcFindTypeReq+0xd4>
    dffa:	2601      	movs	r6, #1
    dffc:	e7b7      	b.n	df6e <attsProcFindTypeReq+0x7a>
    dffe:	2611      	movs	r6, #17
    e000:	e7b5      	b.n	df6e <attsProcFindTypeReq+0x7a>
    e002:	2600      	movs	r6, #0
    e004:	e7b3      	b.n	df6e <attsProcFindTypeReq+0x7a>
    e006:	4633      	mov	r3, r6
    e008:	462a      	mov	r2, r5
    e00a:	2106      	movs	r1, #6
    e00c:	f7ff fbae 	bl	d76c <attsErrRsp>
    e010:	e7bd      	b.n	df8e <attsProcFindTypeReq+0x9a>

0000e012 <attsProcReadTypeReq>:
    e012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e016:	3905      	subs	r1, #5
    e018:	4606      	mov	r6, r0
    e01a:	7a54      	ldrb	r4, [r2, #9]
    e01c:	7a90      	ldrb	r0, [r2, #10]
    e01e:	fa5f fa81 	uxtb.w	sl, r1
    e022:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    e026:	f1ba 0f02 	cmp.w	sl, #2
    e02a:	b089      	sub	sp, #36	; 0x24
    e02c:	b2a4      	uxth	r4, r4
    e02e:	d003      	beq.n	e038 <attsProcReadTypeReq+0x26>
    e030:	f1ba 0f10 	cmp.w	sl, #16
    e034:	f040 80d4 	bne.w	e1e0 <attsProcReadTypeReq+0x1ce>
    e038:	2c00      	cmp	r4, #0
    e03a:	f000 80d3 	beq.w	e1e4 <attsProcReadTypeReq+0x1d2>
    e03e:	7b13      	ldrb	r3, [r2, #12]
    e040:	f892 900b 	ldrb.w	r9, [r2, #11]
    e044:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    e048:	fa1f f989 	uxth.w	r9, r9
    e04c:	454c      	cmp	r4, r9
    e04e:	f200 80c9 	bhi.w	e1e4 <attsProcReadTypeReq+0x1d2>
    e052:	f102 030d 	add.w	r3, r2, #13
    e056:	9304      	str	r3, [sp, #16]
    e058:	ab07      	add	r3, sp, #28
    e05a:	9301      	str	r3, [sp, #4]
    e05c:	ab06      	add	r3, sp, #24
    e05e:	9300      	str	r3, [sp, #0]
    e060:	4620      	mov	r0, r4
    e062:	9b04      	ldr	r3, [sp, #16]
    e064:	4652      	mov	r2, sl
    e066:	4649      	mov	r1, r9
    e068:	f7ff fe54 	bl	dd14 <attsFindUuidInRange>
    e06c:	4604      	mov	r4, r0
    e06e:	2800      	cmp	r0, #0
    e070:	f000 80ba 	beq.w	e1e8 <attsProcReadTypeReq+0x1d6>
    e074:	9b06      	ldr	r3, [sp, #24]
    e076:	4602      	mov	r2, r0
    e078:	7bdb      	ldrb	r3, [r3, #15]
    e07a:	7f30      	ldrb	r0, [r6, #28]
    e07c:	2101      	movs	r1, #1
    e07e:	f7ff fcfb 	bl	da78 <attsPermissions>
    e082:	4603      	mov	r3, r0
    e084:	b9c0      	cbnz	r0, e0b8 <attsProcReadTypeReq+0xa6>
    e086:	9a06      	ldr	r2, [sp, #24]
    e088:	7b91      	ldrb	r1, [r2, #14]
    e08a:	074d      	lsls	r5, r1, #29
    e08c:	d50a      	bpl.n	e0a4 <attsProcReadTypeReq+0x92>
    e08e:	9807      	ldr	r0, [sp, #28]
    e090:	6885      	ldr	r5, [r0, #8]
    e092:	b13d      	cbz	r5, e0a4 <attsProcReadTypeReq+0x92>
    e094:	9200      	str	r2, [sp, #0]
    e096:	7f30      	ldrb	r0, [r6, #28]
    e098:	2208      	movs	r2, #8
    e09a:	4621      	mov	r1, r4
    e09c:	47a8      	blx	r5
    e09e:	4603      	mov	r3, r0
    e0a0:	b950      	cbnz	r0, e0b8 <attsProcReadTypeReq+0xa6>
    e0a2:	e001      	b.n	e0a8 <attsProcReadTypeReq+0x96>
    e0a4:	0688      	lsls	r0, r1, #26
    e0a6:	d40d      	bmi.n	e0c4 <attsProcReadTypeReq+0xb2>
    e0a8:	8b70      	ldrh	r0, [r6, #26]
    e0aa:	3008      	adds	r0, #8
    e0ac:	b280      	uxth	r0, r0
    e0ae:	f7fe faab 	bl	c608 <attMsgAlloc>
    e0b2:	4680      	mov	r8, r0
    e0b4:	b980      	cbnz	r0, e0d8 <attsProcReadTypeReq+0xc6>
    e0b6:	2311      	movs	r3, #17
    e0b8:	4622      	mov	r2, r4
    e0ba:	2108      	movs	r1, #8
    e0bc:	8b30      	ldrh	r0, [r6, #24]
    e0be:	f7ff fb55 	bl	d76c <attsErrRsp>
    e0c2:	e057      	b.n	e174 <attsProcReadTypeReq+0x162>
    e0c4:	4b49      	ldr	r3, [pc, #292]	; (e1ec <attsProcReadTypeReq+0x1da>)
    e0c6:	695d      	ldr	r5, [r3, #20]
    e0c8:	2d00      	cmp	r5, #0
    e0ca:	d0ed      	beq.n	e0a8 <attsProcReadTypeReq+0x96>
    e0cc:	6853      	ldr	r3, [r2, #4]
    e0ce:	7f30      	ldrb	r0, [r6, #28]
    e0d0:	4622      	mov	r2, r4
    e0d2:	2105      	movs	r1, #5
    e0d4:	47a8      	blx	r5
    e0d6:	e7e2      	b.n	e09e <attsProcReadTypeReq+0x8c>
    e0d8:	2309      	movs	r3, #9
    e0da:	7203      	strb	r3, [r0, #8]
    e0dc:	9b06      	ldr	r3, [sp, #24]
    e0de:	8b77      	ldrh	r7, [r6, #26]
    e0e0:	689a      	ldr	r2, [r3, #8]
    e0e2:	8812      	ldrh	r2, [r2, #0]
    e0e4:	7284      	strb	r4, [r0, #10]
    e0e6:	3f04      	subs	r7, #4
    e0e8:	4297      	cmp	r7, r2
    e0ea:	bf28      	it	cs
    e0ec:	4617      	movcs	r7, r2
    e0ee:	b2ff      	uxtb	r7, r7
    e0f0:	1cba      	adds	r2, r7, #2
    e0f2:	9205      	str	r2, [sp, #20]
    e0f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e0f8:	7242      	strb	r2, [r0, #9]
    e0fa:	0a22      	lsrs	r2, r4, #8
    e0fc:	72c2      	strb	r2, [r0, #11]
    e0fe:	f100 050c 	add.w	r5, r0, #12
    e102:	6859      	ldr	r1, [r3, #4]
    e104:	4628      	mov	r0, r5
    e106:	463a      	mov	r2, r7
    e108:	f7fe f82a 	bl	c160 <memcpy>
    e10c:	3401      	adds	r4, #1
    e10e:	1cbb      	adds	r3, r7, #2
    e110:	b2a0      	uxth	r0, r4
    e112:	441d      	add	r5, r3
    e114:	1eab      	subs	r3, r5, #2
    e116:	9303      	str	r3, [sp, #12]
    e118:	ab07      	add	r3, sp, #28
    e11a:	9301      	str	r3, [sp, #4]
    e11c:	ab06      	add	r3, sp, #24
    e11e:	9300      	str	r3, [sp, #0]
    e120:	4652      	mov	r2, sl
    e122:	9b04      	ldr	r3, [sp, #16]
    e124:	4649      	mov	r1, r9
    e126:	f7ff fdf5 	bl	dd14 <attsFindUuidInRange>
    e12a:	4604      	mov	r4, r0
    e12c:	b1c0      	cbz	r0, e160 <attsProcReadTypeReq+0x14e>
    e12e:	9b06      	ldr	r3, [sp, #24]
    e130:	7b9a      	ldrb	r2, [r3, #14]
    e132:	0751      	lsls	r1, r2, #29
    e134:	d50d      	bpl.n	e152 <attsProcReadTypeReq+0x140>
    e136:	9907      	ldr	r1, [sp, #28]
    e138:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e13c:	f1bb 0f00 	cmp.w	fp, #0
    e140:	d007      	beq.n	e152 <attsProcReadTypeReq+0x140>
    e142:	9300      	str	r3, [sp, #0]
    e144:	7f30      	ldrb	r0, [r6, #28]
    e146:	2300      	movs	r3, #0
    e148:	2208      	movs	r2, #8
    e14a:	4621      	mov	r1, r4
    e14c:	47d8      	blx	fp
    e14e:	b110      	cbz	r0, e156 <attsProcReadTypeReq+0x144>
    e150:	e006      	b.n	e160 <attsProcReadTypeReq+0x14e>
    e152:	0692      	lsls	r2, r2, #26
    e154:	d411      	bmi.n	e17a <attsProcReadTypeReq+0x168>
    e156:	9b06      	ldr	r3, [sp, #24]
    e158:	689a      	ldr	r2, [r3, #8]
    e15a:	8812      	ldrh	r2, [r2, #0]
    e15c:	42ba      	cmp	r2, r7
    e15e:	d018      	beq.n	e192 <attsProcReadTypeReq+0x180>
    e160:	9b03      	ldr	r3, [sp, #12]
    e162:	8b31      	ldrh	r1, [r6, #24]
    e164:	f108 0208 	add.w	r2, r8, #8
    e168:	1a9a      	subs	r2, r3, r2
    e16a:	b292      	uxth	r2, r2
    e16c:	4643      	mov	r3, r8
    e16e:	2004      	movs	r0, #4
    e170:	f002 fa1c 	bl	105ac <L2cDataReq>
    e174:	b009      	add	sp, #36	; 0x24
    e176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e17a:	4a1c      	ldr	r2, [pc, #112]	; (e1ec <attsProcReadTypeReq+0x1da>)
    e17c:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e180:	f1bb 0f00 	cmp.w	fp, #0
    e184:	d0e7      	beq.n	e156 <attsProcReadTypeReq+0x144>
    e186:	685b      	ldr	r3, [r3, #4]
    e188:	7f30      	ldrb	r0, [r6, #28]
    e18a:	4622      	mov	r2, r4
    e18c:	2105      	movs	r1, #5
    e18e:	47d8      	blx	fp
    e190:	e7dd      	b.n	e14e <attsProcReadTypeReq+0x13c>
    e192:	7bdb      	ldrb	r3, [r3, #15]
    e194:	7f30      	ldrb	r0, [r6, #28]
    e196:	4622      	mov	r2, r4
    e198:	2101      	movs	r1, #1
    e19a:	f7ff fc6d 	bl	da78 <attsPermissions>
    e19e:	2800      	cmp	r0, #0
    e1a0:	d1de      	bne.n	e160 <attsProcReadTypeReq+0x14e>
    e1a2:	8b73      	ldrh	r3, [r6, #26]
    e1a4:	3308      	adds	r3, #8
    e1a6:	eb07 0b05 	add.w	fp, r7, r5
    e1aa:	4443      	add	r3, r8
    e1ac:	459b      	cmp	fp, r3
    e1ae:	d8d7      	bhi.n	e160 <attsProcReadTypeReq+0x14e>
    e1b0:	0a23      	lsrs	r3, r4, #8
    e1b2:	f805 4c02 	strb.w	r4, [r5, #-2]
    e1b6:	f805 3c01 	strb.w	r3, [r5, #-1]
    e1ba:	9b06      	ldr	r3, [sp, #24]
    e1bc:	463a      	mov	r2, r7
    e1be:	6859      	ldr	r1, [r3, #4]
    e1c0:	4628      	mov	r0, r5
    e1c2:	f7fd ffcd 	bl	c160 <memcpy>
    e1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e1ca:	429c      	cmp	r4, r3
    e1cc:	d005      	beq.n	e1da <attsProcReadTypeReq+0x1c8>
    e1ce:	3401      	adds	r4, #1
    e1d0:	b2a0      	uxth	r0, r4
    e1d2:	9b05      	ldr	r3, [sp, #20]
    e1d4:	4581      	cmp	r9, r0
    e1d6:	441d      	add	r5, r3
    e1d8:	d29c      	bcs.n	e114 <attsProcReadTypeReq+0x102>
    e1da:	f8cd b00c 	str.w	fp, [sp, #12]
    e1de:	e7bf      	b.n	e160 <attsProcReadTypeReq+0x14e>
    e1e0:	2304      	movs	r3, #4
    e1e2:	e769      	b.n	e0b8 <attsProcReadTypeReq+0xa6>
    e1e4:	2301      	movs	r3, #1
    e1e6:	e767      	b.n	e0b8 <attsProcReadTypeReq+0xa6>
    e1e8:	230a      	movs	r3, #10
    e1ea:	e765      	b.n	e0b8 <attsProcReadTypeReq+0xa6>
    e1ec:	10003c18 	.word	0x10003c18

0000e1f0 <attsProcReadMultReq>:
    e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1f4:	4607      	mov	r7, r0
    e1f6:	8b40      	ldrh	r0, [r0, #26]
    e1f8:	3008      	adds	r0, #8
    e1fa:	b087      	sub	sp, #28
    e1fc:	b280      	uxth	r0, r0
    e1fe:	460c      	mov	r4, r1
    e200:	4693      	mov	fp, r2
    e202:	f7fe fa01 	bl	c608 <attMsgAlloc>
    e206:	4605      	mov	r5, r0
    e208:	2800      	cmp	r0, #0
    e20a:	d060      	beq.n	e2ce <attsProcReadMultReq+0xde>
    e20c:	230f      	movs	r3, #15
    e20e:	3408      	adds	r4, #8
    e210:	f10b 0909 	add.w	r9, fp, #9
    e214:	f100 0609 	add.w	r6, r0, #9
    e218:	7203      	strb	r3, [r0, #8]
    e21a:	44a3      	add	fp, r4
    e21c:	45d9      	cmp	r9, fp
    e21e:	d309      	bcc.n	e234 <attsProcReadMultReq+0x44>
    e220:	f105 0208 	add.w	r2, r5, #8
    e224:	1ab2      	subs	r2, r6, r2
    e226:	462b      	mov	r3, r5
    e228:	b292      	uxth	r2, r2
    e22a:	8b39      	ldrh	r1, [r7, #24]
    e22c:	2004      	movs	r0, #4
    e22e:	f002 f9bd 	bl	105ac <L2cDataReq>
    e232:	e053      	b.n	e2dc <attsProcReadMultReq+0xec>
    e234:	f899 3001 	ldrb.w	r3, [r9, #1]
    e238:	f819 4b02 	ldrb.w	r4, [r9], #2
    e23c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e240:	b2a4      	uxth	r4, r4
    e242:	a905      	add	r1, sp, #20
    e244:	4620      	mov	r0, r4
    e246:	f7ff fbeb 	bl	da20 <attsFindByHandle>
    e24a:	4680      	mov	r8, r0
    e24c:	2800      	cmp	r0, #0
    e24e:	d048      	beq.n	e2e2 <attsProcReadMultReq+0xf2>
    e250:	7bc3      	ldrb	r3, [r0, #15]
    e252:	7f38      	ldrb	r0, [r7, #28]
    e254:	4622      	mov	r2, r4
    e256:	2101      	movs	r1, #1
    e258:	f7ff fc0e 	bl	da78 <attsPermissions>
    e25c:	4603      	mov	r3, r0
    e25e:	2800      	cmp	r0, #0
    e260:	d140      	bne.n	e2e4 <attsProcReadMultReq+0xf4>
    e262:	f898 200e 	ldrb.w	r2, [r8, #14]
    e266:	0751      	lsls	r1, r2, #29
    e268:	d522      	bpl.n	e2b0 <attsProcReadMultReq+0xc0>
    e26a:	9905      	ldr	r1, [sp, #20]
    e26c:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e270:	f1ba 0f00 	cmp.w	sl, #0
    e274:	d01c      	beq.n	e2b0 <attsProcReadMultReq+0xc0>
    e276:	7f38      	ldrb	r0, [r7, #28]
    e278:	f8cd 8000 	str.w	r8, [sp]
    e27c:	220e      	movs	r2, #14
    e27e:	4621      	mov	r1, r4
    e280:	47d0      	blx	sl
    e282:	4603      	mov	r3, r0
    e284:	bb70      	cbnz	r0, e2e4 <attsProcReadMultReq+0xf4>
    e286:	8b7a      	ldrh	r2, [r7, #26]
    e288:	3208      	adds	r2, #8
    e28a:	442a      	add	r2, r5
    e28c:	42b2      	cmp	r2, r6
    e28e:	d9c5      	bls.n	e21c <attsProcReadMultReq+0x2c>
    e290:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e294:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e298:	881c      	ldrh	r4, [r3, #0]
    e29a:	1b92      	subs	r2, r2, r6
    e29c:	b292      	uxth	r2, r2
    e29e:	4294      	cmp	r4, r2
    e2a0:	bf28      	it	cs
    e2a2:	4614      	movcs	r4, r2
    e2a4:	4630      	mov	r0, r6
    e2a6:	4622      	mov	r2, r4
    e2a8:	f7fd ff5a 	bl	c160 <memcpy>
    e2ac:	4426      	add	r6, r4
    e2ae:	e7b5      	b.n	e21c <attsProcReadMultReq+0x2c>
    e2b0:	0693      	lsls	r3, r2, #26
    e2b2:	d5e8      	bpl.n	e286 <attsProcReadMultReq+0x96>
    e2b4:	4b0e      	ldr	r3, [pc, #56]	; (e2f0 <attsProcReadMultReq+0x100>)
    e2b6:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e2ba:	f1ba 0f00 	cmp.w	sl, #0
    e2be:	d0e2      	beq.n	e286 <attsProcReadMultReq+0x96>
    e2c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e2c4:	7f38      	ldrb	r0, [r7, #28]
    e2c6:	4622      	mov	r2, r4
    e2c8:	2105      	movs	r1, #5
    e2ca:	47d0      	blx	sl
    e2cc:	e7d9      	b.n	e282 <attsProcReadMultReq+0x92>
    e2ce:	2311      	movs	r3, #17
    e2d0:	4604      	mov	r4, r0
    e2d2:	4622      	mov	r2, r4
    e2d4:	210e      	movs	r1, #14
    e2d6:	8b38      	ldrh	r0, [r7, #24]
    e2d8:	f7ff fa48 	bl	d76c <attsErrRsp>
    e2dc:	b007      	add	sp, #28
    e2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e2e2:	2301      	movs	r3, #1
    e2e4:	4628      	mov	r0, r5
    e2e6:	9303      	str	r3, [sp, #12]
    e2e8:	f00c f912 	bl	1a510 <WsfMsgFree>
    e2ec:	9b03      	ldr	r3, [sp, #12]
    e2ee:	e7f0      	b.n	e2d2 <attsProcReadMultReq+0xe2>
    e2f0:	10003c18 	.word	0x10003c18

0000e2f4 <attsProcReadGroupTypeReq>:
    e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2f8:	b08f      	sub	sp, #60	; 0x3c
    e2fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e2fe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e302:	7a57      	ldrb	r7, [r2, #9]
    e304:	7a93      	ldrb	r3, [r2, #10]
    e306:	3905      	subs	r1, #5
    e308:	fa5f fa81 	uxtb.w	sl, r1
    e30c:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e310:	f1ba 0f02 	cmp.w	sl, #2
    e314:	4681      	mov	r9, r0
    e316:	b2bf      	uxth	r7, r7
    e318:	d003      	beq.n	e322 <attsProcReadGroupTypeReq+0x2e>
    e31a:	f1ba 0f10 	cmp.w	sl, #16
    e31e:	f040 80b6 	bne.w	e48e <attsProcReadGroupTypeReq+0x19a>
    e322:	2f00      	cmp	r7, #0
    e324:	f000 80b8 	beq.w	e498 <attsProcReadGroupTypeReq+0x1a4>
    e328:	7b11      	ldrb	r1, [r2, #12]
    e32a:	7ad3      	ldrb	r3, [r2, #11]
    e32c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e330:	b29b      	uxth	r3, r3
    e332:	429f      	cmp	r7, r3
    e334:	9303      	str	r3, [sp, #12]
    e336:	f200 80c7 	bhi.w	e4c8 <attsProcReadGroupTypeReq+0x1d4>
    e33a:	f102 030d 	add.w	r3, r2, #13
    e33e:	461a      	mov	r2, r3
    e340:	4651      	mov	r1, sl
    e342:	a80b      	add	r0, sp, #44	; 0x2c
    e344:	9308      	str	r3, [sp, #32]
    e346:	f7ff fb58 	bl	d9fa <attsUuid16Cmp>
    e34a:	2800      	cmp	r0, #0
    e34c:	f000 80bf 	beq.w	e4ce <attsProcReadGroupTypeReq+0x1da>
    e350:	ab0d      	add	r3, sp, #52	; 0x34
    e352:	9301      	str	r3, [sp, #4]
    e354:	ab0c      	add	r3, sp, #48	; 0x30
    e356:	9300      	str	r3, [sp, #0]
    e358:	4652      	mov	r2, sl
    e35a:	9b08      	ldr	r3, [sp, #32]
    e35c:	9903      	ldr	r1, [sp, #12]
    e35e:	4638      	mov	r0, r7
    e360:	f7ff fcd8 	bl	dd14 <attsFindUuidInRange>
    e364:	4604      	mov	r4, r0
    e366:	2800      	cmp	r0, #0
    e368:	f000 80b4 	beq.w	e4d4 <attsProcReadGroupTypeReq+0x1e0>
    e36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e36e:	4602      	mov	r2, r0
    e370:	7bdb      	ldrb	r3, [r3, #15]
    e372:	f899 001c 	ldrb.w	r0, [r9, #28]
    e376:	2101      	movs	r1, #1
    e378:	f7ff fb7e 	bl	da78 <attsPermissions>
    e37c:	4680      	mov	r8, r0
    e37e:	2800      	cmp	r0, #0
    e380:	f040 80ab 	bne.w	e4da <attsProcReadGroupTypeReq+0x1e6>
    e384:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e388:	3008      	adds	r0, #8
    e38a:	b280      	uxth	r0, r0
    e38c:	f7fe f93c 	bl	c608 <attMsgAlloc>
    e390:	2311      	movs	r3, #17
    e392:	4605      	mov	r5, r0
    e394:	2800      	cmp	r0, #0
    e396:	f000 80a2 	beq.w	e4de <attsProcReadGroupTypeReq+0x1ea>
    e39a:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e39e:	7203      	strb	r3, [r0, #8]
    e3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3a2:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e3a6:	689b      	ldr	r3, [r3, #8]
    e3a8:	881b      	ldrh	r3, [r3, #0]
    e3aa:	7284      	strb	r4, [r0, #10]
    e3ac:	3a06      	subs	r2, #6
    e3ae:	4293      	cmp	r3, r2
    e3b0:	bf28      	it	cs
    e3b2:	4613      	movcs	r3, r2
    e3b4:	b2db      	uxtb	r3, r3
    e3b6:	9304      	str	r3, [sp, #16]
    e3b8:	3304      	adds	r3, #4
    e3ba:	9305      	str	r3, [sp, #20]
    e3bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e3c0:	7243      	strb	r3, [r0, #9]
    e3c2:	0a23      	lsrs	r3, r4, #8
    e3c4:	72c3      	strb	r3, [r0, #11]
    e3c6:	4620      	mov	r0, r4
    e3c8:	f7ff fcde 	bl	dd88 <attsFindServiceGroupEnd>
    e3cc:	990c      	ldr	r1, [sp, #48]	; 0x30
    e3ce:	7328      	strb	r0, [r5, #12]
    e3d0:	0a02      	lsrs	r2, r0, #8
    e3d2:	f105 030e 	add.w	r3, r5, #14
    e3d6:	736a      	strb	r2, [r5, #13]
    e3d8:	4683      	mov	fp, r0
    e3da:	9a04      	ldr	r2, [sp, #16]
    e3dc:	6849      	ldr	r1, [r1, #4]
    e3de:	4618      	mov	r0, r3
    e3e0:	f7fd febe 	bl	c160 <memcpy>
    e3e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e3e8:	9206      	str	r2, [sp, #24]
    e3ea:	3e06      	subs	r6, #6
    e3ec:	1ab6      	subs	r6, r6, r2
    e3ee:	9b06      	ldr	r3, [sp, #24]
    e3f0:	b2b2      	uxth	r2, r6
    e3f2:	9207      	str	r2, [sp, #28]
    e3f4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e3f8:	9a05      	ldr	r2, [sp, #20]
    e3fa:	33fc      	adds	r3, #252	; 0xfc
    e3fc:	1886      	adds	r6, r0, r2
    e3fe:	9309      	str	r3, [sp, #36]	; 0x24
    e400:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e404:	459b      	cmp	fp, r3
    e406:	f1a6 0404 	sub.w	r4, r6, #4
    e40a:	d049      	beq.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e40c:	f10b 0001 	add.w	r0, fp, #1
    e410:	9b03      	ldr	r3, [sp, #12]
    e412:	b280      	uxth	r0, r0
    e414:	4283      	cmp	r3, r0
    e416:	d343      	bcc.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e418:	ab0d      	add	r3, sp, #52	; 0x34
    e41a:	9301      	str	r3, [sp, #4]
    e41c:	ab0c      	add	r3, sp, #48	; 0x30
    e41e:	9300      	str	r3, [sp, #0]
    e420:	4652      	mov	r2, sl
    e422:	9b08      	ldr	r3, [sp, #32]
    e424:	9903      	ldr	r1, [sp, #12]
    e426:	f7ff fc75 	bl	dd14 <attsFindUuidInRange>
    e42a:	4683      	mov	fp, r0
    e42c:	2800      	cmp	r0, #0
    e42e:	d037      	beq.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e432:	9906      	ldr	r1, [sp, #24]
    e434:	689a      	ldr	r2, [r3, #8]
    e436:	8812      	ldrh	r2, [r2, #0]
    e438:	428a      	cmp	r2, r1
    e43a:	d131      	bne.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e43c:	4602      	mov	r2, r0
    e43e:	7bdb      	ldrb	r3, [r3, #15]
    e440:	f899 001c 	ldrb.w	r0, [r9, #28]
    e444:	2101      	movs	r1, #1
    e446:	f7ff fb17 	bl	da78 <attsPermissions>
    e44a:	bb48      	cbnz	r0, e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e44c:	9b07      	ldr	r3, [sp, #28]
    e44e:	9a05      	ldr	r2, [sp, #20]
    e450:	4293      	cmp	r3, r2
    e452:	d347      	bcc.n	e4e4 <attsProcReadGroupTypeReq+0x1f0>
    e454:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e458:	f806 bc04 	strb.w	fp, [r6, #-4]
    e45c:	f806 3c03 	strb.w	r3, [r6, #-3]
    e460:	4658      	mov	r0, fp
    e462:	f7ff fc91 	bl	dd88 <attsFindServiceGroupEnd>
    e466:	0a03      	lsrs	r3, r0, #8
    e468:	f806 0c02 	strb.w	r0, [r6, #-2]
    e46c:	f806 3c01 	strb.w	r3, [r6, #-1]
    e470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e472:	9a04      	ldr	r2, [sp, #16]
    e474:	6859      	ldr	r1, [r3, #4]
    e476:	4683      	mov	fp, r0
    e478:	4630      	mov	r0, r6
    e47a:	f7fd fe71 	bl	c160 <memcpy>
    e47e:	9b07      	ldr	r3, [sp, #28]
    e480:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e482:	4413      	add	r3, r2
    e484:	b29b      	uxth	r3, r3
    e486:	9307      	str	r3, [sp, #28]
    e488:	9b05      	ldr	r3, [sp, #20]
    e48a:	441e      	add	r6, r3
    e48c:	e7b8      	b.n	e400 <attsProcReadGroupTypeReq+0x10c>
    e48e:	f04f 0804 	mov.w	r8, #4
    e492:	2400      	movs	r4, #0
    e494:	4625      	mov	r5, r4
    e496:	e003      	b.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e498:	f04f 0801 	mov.w	r8, #1
    e49c:	463c      	mov	r4, r7
    e49e:	463d      	mov	r5, r7
    e4a0:	4648      	mov	r0, r9
    e4a2:	f7ff f9e1 	bl	d868 <attsDiscBusy>
    e4a6:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e4aa:	f1b8 0f00 	cmp.w	r8, #0
    e4ae:	d11b      	bne.n	e4e8 <attsProcReadGroupTypeReq+0x1f4>
    e4b0:	f105 0208 	add.w	r2, r5, #8
    e4b4:	1aa2      	subs	r2, r4, r2
    e4b6:	4601      	mov	r1, r0
    e4b8:	462b      	mov	r3, r5
    e4ba:	b292      	uxth	r2, r2
    e4bc:	2004      	movs	r0, #4
    e4be:	f002 f875 	bl	105ac <L2cDataReq>
    e4c2:	b00f      	add	sp, #60	; 0x3c
    e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4c8:	f04f 0801 	mov.w	r8, #1
    e4cc:	e7e1      	b.n	e492 <attsProcReadGroupTypeReq+0x19e>
    e4ce:	f04f 0810 	mov.w	r8, #16
    e4d2:	e7de      	b.n	e492 <attsProcReadGroupTypeReq+0x19e>
    e4d4:	f04f 080a 	mov.w	r8, #10
    e4d8:	e7dc      	b.n	e494 <attsProcReadGroupTypeReq+0x1a0>
    e4da:	4627      	mov	r7, r4
    e4dc:	e7d9      	b.n	e492 <attsProcReadGroupTypeReq+0x19e>
    e4de:	4604      	mov	r4, r0
    e4e0:	4698      	mov	r8, r3
    e4e2:	e7dd      	b.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e4e4:	4680      	mov	r8, r0
    e4e6:	e7db      	b.n	e4a0 <attsProcReadGroupTypeReq+0x1ac>
    e4e8:	4643      	mov	r3, r8
    e4ea:	463a      	mov	r2, r7
    e4ec:	2110      	movs	r1, #16
    e4ee:	f7ff f93d 	bl	d76c <attsErrRsp>
    e4f2:	e7e6      	b.n	e4c2 <attsProcReadGroupTypeReq+0x1ce>

0000e4f4 <attsSignedWriteStart>:
    e4f4:	6843      	ldr	r3, [r0, #4]
    e4f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e4f8:	4606      	mov	r6, r0
    e4fa:	460d      	mov	r5, r1
    e4fc:	b1eb      	cbz	r3, e53a <attsSignedWriteStart+0x46>
    e4fe:	894c      	ldrh	r4, [r1, #10]
    e500:	3404      	adds	r4, #4
    e502:	b2a4      	uxth	r4, r4
    e504:	4620      	mov	r0, r4
    e506:	f00b ff5d 	bl	1a3c4 <WsfBufAlloc>
    e50a:	60b5      	str	r5, [r6, #8]
    e50c:	4607      	mov	r7, r0
    e50e:	b1a0      	cbz	r0, e53a <attsSignedWriteStart+0x46>
    e510:	4622      	mov	r2, r4
    e512:	f105 0110 	add.w	r1, r5, #16
    e516:	f005 fb41 	bl	13b9c <WStrReverseCpy>
    e51a:	4b0c      	ldr	r3, [pc, #48]	; (e54c <attsSignedWriteStart+0x58>)
    e51c:	6870      	ldr	r0, [r6, #4]
    e51e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e522:	2223      	movs	r2, #35	; 0x23
    e524:	9201      	str	r2, [sp, #4]
    e526:	7b2a      	ldrb	r2, [r5, #12]
    e528:	9200      	str	r2, [sp, #0]
    e52a:	4639      	mov	r1, r7
    e52c:	b2e2      	uxtb	r2, r4
    e52e:	f00a f8bb 	bl	186a8 <SecCmac>
    e532:	b940      	cbnz	r0, e546 <attsSignedWriteStart+0x52>
    e534:	4638      	mov	r0, r7
    e536:	f00b ff85 	bl	1a444 <WsfBufFree>
    e53a:	4628      	mov	r0, r5
    e53c:	b003      	add	sp, #12
    e53e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e542:	f00b bf7f 	b.w	1a444 <WsfBufFree>
    e546:	b003      	add	sp, #12
    e548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e54a:	bf00      	nop
    e54c:	100037b4 	.word	0x100037b4

0000e550 <attsProcSignedWrite>:
    e550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e554:	7a93      	ldrb	r3, [r2, #10]
    e556:	7a55      	ldrb	r5, [r2, #9]
    e558:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e55c:	b2ad      	uxth	r5, r5
    e55e:	4607      	mov	r7, r0
    e560:	4689      	mov	r9, r1
    e562:	4628      	mov	r0, r5
    e564:	a901      	add	r1, sp, #4
    e566:	4690      	mov	r8, r2
    e568:	f7ff fa5a 	bl	da20 <attsFindByHandle>
    e56c:	4604      	mov	r4, r0
    e56e:	2800      	cmp	r0, #0
    e570:	d033      	beq.n	e5da <attsProcSignedWrite+0x8a>
    e572:	7bc3      	ldrb	r3, [r0, #15]
    e574:	7f38      	ldrb	r0, [r7, #28]
    e576:	462a      	mov	r2, r5
    e578:	2110      	movs	r1, #16
    e57a:	f7ff fa7d 	bl	da78 <attsPermissions>
    e57e:	bb60      	cbnz	r0, e5da <attsProcSignedWrite+0x8a>
    e580:	7ba2      	ldrb	r2, [r4, #14]
    e582:	0651      	lsls	r1, r2, #25
    e584:	d529      	bpl.n	e5da <attsProcSignedWrite+0x8a>
    e586:	f1a9 060f 	sub.w	r6, r9, #15
    e58a:	0712      	lsls	r2, r2, #28
    e58c:	b2b6      	uxth	r6, r6
    e58e:	89a3      	ldrh	r3, [r4, #12]
    e590:	d421      	bmi.n	e5d6 <attsProcSignedWrite+0x86>
    e592:	429e      	cmp	r6, r3
    e594:	d121      	bne.n	e5da <attsProcSignedWrite+0x8a>
    e596:	f109 000f 	add.w	r0, r9, #15
    e59a:	b280      	uxth	r0, r0
    e59c:	f00b ff12 	bl	1a3c4 <WsfBufAlloc>
    e5a0:	4604      	mov	r4, r0
    e5a2:	b1d0      	cbz	r0, e5da <attsProcSignedWrite+0x8a>
    e5a4:	6047      	str	r7, [r0, #4]
    e5a6:	8105      	strh	r5, [r0, #8]
    e5a8:	8146      	strh	r6, [r0, #10]
    e5aa:	7f3b      	ldrb	r3, [r7, #28]
    e5ac:	7303      	strb	r3, [r0, #12]
    e5ae:	464a      	mov	r2, r9
    e5b0:	f108 0108 	add.w	r1, r8, #8
    e5b4:	300d      	adds	r0, #13
    e5b6:	f7fd fdd3 	bl	c160 <memcpy>
    e5ba:	7f38      	ldrb	r0, [r7, #28]
    e5bc:	4a0a      	ldr	r2, [pc, #40]	; (e5e8 <attsProcSignedWrite+0x98>)
    e5be:	1e43      	subs	r3, r0, #1
    e5c0:	200c      	movs	r0, #12
    e5c2:	fb00 2003 	mla	r0, r0, r3, r2
    e5c6:	4621      	mov	r1, r4
    e5c8:	6883      	ldr	r3, [r0, #8]
    e5ca:	b14b      	cbz	r3, e5e0 <attsProcSignedWrite+0x90>
    e5cc:	f102 0060 	add.w	r0, r2, #96	; 0x60
    e5d0:	f00b fff0 	bl	1a5b4 <WsfQueueEnq>
    e5d4:	e001      	b.n	e5da <attsProcSignedWrite+0x8a>
    e5d6:	429e      	cmp	r6, r3
    e5d8:	d9dd      	bls.n	e596 <attsProcSignedWrite+0x46>
    e5da:	b003      	add	sp, #12
    e5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e5e0:	f7ff ff88 	bl	e4f4 <attsSignedWriteStart>
    e5e4:	e7f9      	b.n	e5da <attsProcSignedWrite+0x8a>
    e5e6:	bf00      	nop
    e5e8:	10003c30 	.word	0x10003c30

0000e5ec <attsSignMsgCback>:
    e5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5f0:	7883      	ldrb	r3, [r0, #2]
    e5f2:	2b23      	cmp	r3, #35	; 0x23
    e5f4:	b088      	sub	sp, #32
    e5f6:	d152      	bne.n	e69e <attsSignMsgCback+0xb2>
    e5f8:	7806      	ldrb	r6, [r0, #0]
    e5fa:	4d39      	ldr	r5, [pc, #228]	; (e6e0 <attsSignMsgCback+0xf4>)
    e5fc:	6841      	ldr	r1, [r0, #4]
    e5fe:	3e01      	subs	r6, #1
    e600:	270c      	movs	r7, #12
    e602:	4377      	muls	r7, r6
    e604:	19eb      	adds	r3, r5, r7
    e606:	2208      	movs	r2, #8
    e608:	689c      	ldr	r4, [r3, #8]
    e60a:	a806      	add	r0, sp, #24
    e60c:	f005 fac6 	bl	13b9c <WStrReverseCpy>
    e610:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    e614:	f104 090d 	add.w	r9, r4, #13
    e618:	f10a 0107 	add.w	r1, sl, #7
    e61c:	2208      	movs	r2, #8
    e61e:	4449      	add	r1, r9
    e620:	a806      	add	r0, sp, #24
    e622:	f7fd fd6d 	bl	c100 <memcmp>
    e626:	4680      	mov	r8, r0
    e628:	bb50      	cbnz	r0, e680 <attsSignMsgCback+0x94>
    e62a:	eb09 030a 	add.w	r3, r9, sl
    e62e:	795a      	ldrb	r2, [r3, #5]
    e630:	7919      	ldrb	r1, [r3, #4]
    e632:	0412      	lsls	r2, r2, #16
    e634:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e638:	78d9      	ldrb	r1, [r3, #3]
    e63a:	799b      	ldrb	r3, [r3, #6]
    e63c:	440a      	add	r2, r1
    e63e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    e642:	59eb      	ldr	r3, [r5, r7]
    e644:	429a      	cmp	r2, r3
    e646:	d31b      	bcc.n	e680 <attsSignMsgCback+0x94>
    e648:	3201      	adds	r2, #1
    e64a:	51ea      	str	r2, [r5, r7]
    e64c:	a905      	add	r1, sp, #20
    e64e:	8920      	ldrh	r0, [r4, #8]
    e650:	f7ff f9e6 	bl	da20 <attsFindByHandle>
    e654:	4607      	mov	r7, r0
    e656:	b198      	cbz	r0, e680 <attsSignMsgCback+0x94>
    e658:	7b82      	ldrb	r2, [r0, #14]
    e65a:	0791      	lsls	r1, r2, #30
    e65c:	f104 0310 	add.w	r3, r4, #16
    e660:	d520      	bpl.n	e6a4 <attsSignMsgCback+0xb8>
    e662:	9905      	ldr	r1, [sp, #20]
    e664:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e668:	f1b9 0f00 	cmp.w	r9, #0
    e66c:	d01a      	beq.n	e6a4 <attsSignMsgCback+0xb8>
    e66e:	8921      	ldrh	r1, [r4, #8]
    e670:	7b20      	ldrb	r0, [r4, #12]
    e672:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e676:	8963      	ldrh	r3, [r4, #10]
    e678:	9300      	str	r3, [sp, #0]
    e67a:	22d2      	movs	r2, #210	; 0xd2
    e67c:	4643      	mov	r3, r8
    e67e:	47c8      	blx	r9
    e680:	4620      	mov	r0, r4
    e682:	f00b fedf 	bl	1a444 <WsfBufFree>
    e686:	4817      	ldr	r0, [pc, #92]	; (e6e4 <attsSignMsgCback+0xf8>)
    e688:	f00b ffb6 	bl	1a5f8 <WsfQueueDeq>
    e68c:	4601      	mov	r1, r0
    e68e:	200c      	movs	r0, #12
    e690:	b309      	cbz	r1, e6d6 <attsSignMsgCback+0xea>
    e692:	7b0b      	ldrb	r3, [r1, #12]
    e694:	3b01      	subs	r3, #1
    e696:	fb00 5003 	mla	r0, r0, r3, r5
    e69a:	f7ff ff2b 	bl	e4f4 <attsSignedWriteStart>
    e69e:	b008      	add	sp, #32
    e6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6a4:	0692      	lsls	r2, r2, #26
    e6a6:	d50a      	bpl.n	e6be <attsSignMsgCback+0xd2>
    e6a8:	4a0f      	ldr	r2, [pc, #60]	; (e6e8 <attsSignMsgCback+0xfc>)
    e6aa:	f8d2 8014 	ldr.w	r8, [r2, #20]
    e6ae:	f1b8 0f00 	cmp.w	r8, #0
    e6b2:	d004      	beq.n	e6be <attsSignMsgCback+0xd2>
    e6b4:	8922      	ldrh	r2, [r4, #8]
    e6b6:	7b20      	ldrb	r0, [r4, #12]
    e6b8:	2109      	movs	r1, #9
    e6ba:	47c0      	blx	r8
    e6bc:	e7e0      	b.n	e680 <attsSignMsgCback+0x94>
    e6be:	8962      	ldrh	r2, [r4, #10]
    e6c0:	6878      	ldr	r0, [r7, #4]
    e6c2:	4619      	mov	r1, r3
    e6c4:	f7fd fd4c 	bl	c160 <memcpy>
    e6c8:	7bbb      	ldrb	r3, [r7, #14]
    e6ca:	071b      	lsls	r3, r3, #28
    e6cc:	bf42      	ittt	mi
    e6ce:	68bb      	ldrmi	r3, [r7, #8]
    e6d0:	8962      	ldrhmi	r2, [r4, #10]
    e6d2:	801a      	strhmi	r2, [r3, #0]
    e6d4:	e7d4      	b.n	e680 <attsSignMsgCback+0x94>
    e6d6:	fb00 5506 	mla	r5, r0, r6, r5
    e6da:	60a9      	str	r1, [r5, #8]
    e6dc:	e7df      	b.n	e69e <attsSignMsgCback+0xb2>
    e6de:	bf00      	nop
    e6e0:	10003c30 	.word	0x10003c30
    e6e4:	10003c90 	.word	0x10003c90
    e6e8:	10003c18 	.word	0x10003c18

0000e6ec <AttsSignInit>:
    e6ec:	4b05      	ldr	r3, [pc, #20]	; (e704 <AttsSignInit+0x18>)
    e6ee:	2200      	movs	r2, #0
    e6f0:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    e6f4:	4b04      	ldr	r3, [pc, #16]	; (e708 <AttsSignInit+0x1c>)
    e6f6:	4a05      	ldr	r2, [pc, #20]	; (e70c <AttsSignInit+0x20>)
    e6f8:	60da      	str	r2, [r3, #12]
    e6fa:	4b05      	ldr	r3, [pc, #20]	; (e710 <AttsSignInit+0x24>)
    e6fc:	4a05      	ldr	r2, [pc, #20]	; (e714 <AttsSignInit+0x28>)
    e6fe:	641a      	str	r2, [r3, #64]	; 0x40
    e700:	4770      	bx	lr
    e702:	bf00      	nop
    e704:	10003c30 	.word	0x10003c30
    e708:	10003c18 	.word	0x10003c18
    e70c:	0000e5ed 	.word	0x0000e5ed
    e710:	10002b10 	.word	0x10002b10
    e714:	0000e551 	.word	0x0000e551

0000e718 <AttsSetCsrk>:
    e718:	4b03      	ldr	r3, [pc, #12]	; (e728 <AttsSetCsrk+0x10>)
    e71a:	3801      	subs	r0, #1
    e71c:	220c      	movs	r2, #12
    e71e:	fb02 3000 	mla	r0, r2, r0, r3
    e722:	6041      	str	r1, [r0, #4]
    e724:	4770      	bx	lr
    e726:	bf00      	nop
    e728:	10003c30 	.word	0x10003c30

0000e72c <AttsSetSignCounter>:
    e72c:	230c      	movs	r3, #12
    e72e:	3801      	subs	r0, #1
    e730:	4358      	muls	r0, r3
    e732:	4b01      	ldr	r3, [pc, #4]	; (e738 <AttsSetSignCounter+0xc>)
    e734:	5019      	str	r1, [r3, r0]
    e736:	4770      	bx	lr
    e738:	10003c30 	.word	0x10003c30

0000e73c <AttsGetSignCounter>:
    e73c:	230c      	movs	r3, #12
    e73e:	3801      	subs	r0, #1
    e740:	4358      	muls	r0, r3
    e742:	4b01      	ldr	r3, [pc, #4]	; (e748 <AttsGetSignCounter+0xc>)
    e744:	5818      	ldr	r0, [r3, r0]
    e746:	4770      	bx	lr
    e748:	10003c30 	.word	0x10003c30

0000e74c <attsProcWrite>:
    e74c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e750:	7a93      	ldrb	r3, [r2, #10]
    e752:	7a54      	ldrb	r4, [r2, #9]
    e754:	f892 9008 	ldrb.w	r9, [r2, #8]
    e758:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e75c:	b087      	sub	sp, #28
    e75e:	b2a4      	uxth	r4, r4
    e760:	4680      	mov	r8, r0
    e762:	460d      	mov	r5, r1
    e764:	4620      	mov	r0, r4
    e766:	a905      	add	r1, sp, #20
    e768:	4617      	mov	r7, r2
    e76a:	f7ff f959 	bl	da20 <attsFindByHandle>
    e76e:	4606      	mov	r6, r0
    e770:	2800      	cmp	r0, #0
    e772:	d057      	beq.n	e824 <attsProcWrite+0xd8>
    e774:	7bc3      	ldrb	r3, [r0, #15]
    e776:	f898 001c 	ldrb.w	r0, [r8, #28]
    e77a:	4622      	mov	r2, r4
    e77c:	2110      	movs	r1, #16
    e77e:	f7ff f97b 	bl	da78 <attsPermissions>
    e782:	b9c0      	cbnz	r0, e7b6 <attsProcWrite+0x6a>
    e784:	7bb2      	ldrb	r2, [r6, #14]
    e786:	89b3      	ldrh	r3, [r6, #12]
    e788:	3d03      	subs	r5, #3
    e78a:	0710      	lsls	r0, r2, #28
    e78c:	b2ad      	uxth	r5, r5
    e78e:	d41d      	bmi.n	e7cc <attsProcWrite+0x80>
    e790:	429d      	cmp	r5, r3
    e792:	d11d      	bne.n	e7d0 <attsProcWrite+0x84>
    e794:	0791      	lsls	r1, r2, #30
    e796:	f107 030b 	add.w	r3, r7, #11
    e79a:	d51b      	bpl.n	e7d4 <attsProcWrite+0x88>
    e79c:	9905      	ldr	r1, [sp, #20]
    e79e:	68cf      	ldr	r7, [r1, #12]
    e7a0:	b1c7      	cbz	r7, e7d4 <attsProcWrite+0x88>
    e7a2:	e9cd 3601 	strd	r3, r6, [sp, #4]
    e7a6:	f898 001c 	ldrb.w	r0, [r8, #28]
    e7aa:	9500      	str	r5, [sp, #0]
    e7ac:	2300      	movs	r3, #0
    e7ae:	464a      	mov	r2, r9
    e7b0:	4621      	mov	r1, r4
    e7b2:	47b8      	blx	r7
    e7b4:	b318      	cbz	r0, e7fe <attsProcWrite+0xb2>
    e7b6:	f1b9 0f12 	cmp.w	r9, #18
    e7ba:	d130      	bne.n	e81e <attsProcWrite+0xd2>
    e7bc:	4603      	mov	r3, r0
    e7be:	4622      	mov	r2, r4
    e7c0:	4649      	mov	r1, r9
    e7c2:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    e7c6:	f7fe ffd1 	bl	d76c <attsErrRsp>
    e7ca:	e028      	b.n	e81e <attsProcWrite+0xd2>
    e7cc:	429d      	cmp	r5, r3
    e7ce:	d9e1      	bls.n	e794 <attsProcWrite+0x48>
    e7d0:	200d      	movs	r0, #13
    e7d2:	e7f0      	b.n	e7b6 <attsProcWrite+0x6a>
    e7d4:	0692      	lsls	r2, r2, #26
    e7d6:	d508      	bpl.n	e7ea <attsProcWrite+0x9e>
    e7d8:	4a13      	ldr	r2, [pc, #76]	; (e828 <attsProcWrite+0xdc>)
    e7da:	6957      	ldr	r7, [r2, #20]
    e7dc:	b12f      	cbz	r7, e7ea <attsProcWrite+0x9e>
    e7de:	4622      	mov	r2, r4
    e7e0:	2109      	movs	r1, #9
    e7e2:	f898 001c 	ldrb.w	r0, [r8, #28]
    e7e6:	47b8      	blx	r7
    e7e8:	e7e4      	b.n	e7b4 <attsProcWrite+0x68>
    e7ea:	4619      	mov	r1, r3
    e7ec:	462a      	mov	r2, r5
    e7ee:	6870      	ldr	r0, [r6, #4]
    e7f0:	f7fd fcb6 	bl	c160 <memcpy>
    e7f4:	7bb3      	ldrb	r3, [r6, #14]
    e7f6:	071b      	lsls	r3, r3, #28
    e7f8:	d501      	bpl.n	e7fe <attsProcWrite+0xb2>
    e7fa:	68b3      	ldr	r3, [r6, #8]
    e7fc:	801d      	strh	r5, [r3, #0]
    e7fe:	f1b9 0f12 	cmp.w	r9, #18
    e802:	d10c      	bne.n	e81e <attsProcWrite+0xd2>
    e804:	2009      	movs	r0, #9
    e806:	f7fd feff 	bl	c608 <attMsgAlloc>
    e80a:	4603      	mov	r3, r0
    e80c:	b138      	cbz	r0, e81e <attsProcWrite+0xd2>
    e80e:	2213      	movs	r2, #19
    e810:	7202      	strb	r2, [r0, #8]
    e812:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    e816:	2201      	movs	r2, #1
    e818:	2004      	movs	r0, #4
    e81a:	f001 fec7 	bl	105ac <L2cDataReq>
    e81e:	b007      	add	sp, #28
    e820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e824:	2001      	movs	r0, #1
    e826:	e7c6      	b.n	e7b6 <attsProcWrite+0x6a>
    e828:	10003c18 	.word	0x10003c18

0000e82c <attsProcPrepWriteReq>:
    e82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e830:	7a93      	ldrb	r3, [r2, #10]
    e832:	7a54      	ldrb	r4, [r2, #9]
    e834:	7ad5      	ldrb	r5, [r2, #11]
    e836:	7b16      	ldrb	r6, [r2, #12]
    e838:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e83c:	b089      	sub	sp, #36	; 0x24
    e83e:	b2a4      	uxth	r4, r4
    e840:	4607      	mov	r7, r0
    e842:	468a      	mov	sl, r1
    e844:	4620      	mov	r0, r4
    e846:	a907      	add	r1, sp, #28
    e848:	4693      	mov	fp, r2
    e84a:	f7ff f8e9 	bl	da20 <attsFindByHandle>
    e84e:	4680      	mov	r8, r0
    e850:	2800      	cmp	r0, #0
    e852:	d079      	beq.n	e948 <attsProcPrepWriteReq+0x11c>
    e854:	7bc3      	ldrb	r3, [r0, #15]
    e856:	7f38      	ldrb	r0, [r7, #28]
    e858:	4622      	mov	r2, r4
    e85a:	2110      	movs	r1, #16
    e85c:	f7ff f90c 	bl	da78 <attsPermissions>
    e860:	2800      	cmp	r0, #0
    e862:	d153      	bne.n	e90c <attsProcPrepWriteReq+0xe0>
    e864:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    e868:	b2ab      	uxth	r3, r5
    e86a:	9305      	str	r3, [sp, #20]
    e86c:	9a05      	ldr	r2, [sp, #20]
    e86e:	f898 300e 	ldrb.w	r3, [r8, #14]
    e872:	b10a      	cbz	r2, e878 <attsProcPrepWriteReq+0x4c>
    e874:	06d9      	lsls	r1, r3, #27
    e876:	d569      	bpl.n	e94c <attsProcPrepWriteReq+0x120>
    e878:	f1aa 0605 	sub.w	r6, sl, #5
    e87c:	071a      	lsls	r2, r3, #28
    e87e:	b2b6      	uxth	r6, r6
    e880:	d403      	bmi.n	e88a <attsProcPrepWriteReq+0x5e>
    e882:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    e886:	42b3      	cmp	r3, r6
    e888:	d162      	bne.n	e950 <attsProcPrepWriteReq+0x124>
    e88a:	4638      	mov	r0, r7
    e88c:	f00b ff3f 	bl	1a70e <WsfQueueCount>
    e890:	4b32      	ldr	r3, [pc, #200]	; (e95c <attsProcPrepWriteReq+0x130>)
    e892:	681b      	ldr	r3, [r3, #0]
    e894:	79db      	ldrb	r3, [r3, #7]
    e896:	4283      	cmp	r3, r0
    e898:	d95c      	bls.n	e954 <attsProcPrepWriteReq+0x128>
    e89a:	f10a 0006 	add.w	r0, sl, #6
    e89e:	b280      	uxth	r0, r0
    e8a0:	f00b fd90 	bl	1a3c4 <WsfBufAlloc>
    e8a4:	4681      	mov	r9, r0
    e8a6:	2800      	cmp	r0, #0
    e8a8:	d056      	beq.n	e958 <attsProcPrepWriteReq+0x12c>
    e8aa:	f898 300e 	ldrb.w	r3, [r8, #14]
    e8ae:	079b      	lsls	r3, r3, #30
    e8b0:	f10b 0b0d 	add.w	fp, fp, #13
    e8b4:	d41b      	bmi.n	e8ee <attsProcPrepWriteReq+0xc2>
    e8b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e8ba:	f8a9 3008 	strh.w	r3, [r9, #8]
    e8be:	4632      	mov	r2, r6
    e8c0:	4659      	mov	r1, fp
    e8c2:	f8a9 6004 	strh.w	r6, [r9, #4]
    e8c6:	f8a9 4006 	strh.w	r4, [r9, #6]
    e8ca:	f109 000a 	add.w	r0, r9, #10
    e8ce:	f7fd fc47 	bl	c160 <memcpy>
    e8d2:	4649      	mov	r1, r9
    e8d4:	4638      	mov	r0, r7
    e8d6:	f00b fe6d 	bl	1a5b4 <WsfQueueEnq>
    e8da:	f10a 0008 	add.w	r0, sl, #8
    e8de:	b280      	uxth	r0, r0
    e8e0:	f7fd fe92 	bl	c608 <attMsgAlloc>
    e8e4:	4680      	mov	r8, r0
    e8e6:	b9c0      	cbnz	r0, e91a <attsProcPrepWriteReq+0xee>
    e8e8:	b009      	add	sp, #36	; 0x24
    e8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8ee:	9b07      	ldr	r3, [sp, #28]
    e8f0:	68db      	ldr	r3, [r3, #12]
    e8f2:	461d      	mov	r5, r3
    e8f4:	2b00      	cmp	r3, #0
    e8f6:	d0de      	beq.n	e8b6 <attsProcPrepWriteReq+0x8a>
    e8f8:	7f38      	ldrb	r0, [r7, #28]
    e8fa:	9600      	str	r6, [sp, #0]
    e8fc:	e9cd b801 	strd	fp, r8, [sp, #4]
    e900:	2300      	movs	r3, #0
    e902:	2216      	movs	r2, #22
    e904:	4621      	mov	r1, r4
    e906:	47a8      	blx	r5
    e908:	2800      	cmp	r0, #0
    e90a:	d0d4      	beq.n	e8b6 <attsProcPrepWriteReq+0x8a>
    e90c:	4603      	mov	r3, r0
    e90e:	4622      	mov	r2, r4
    e910:	2116      	movs	r1, #22
    e912:	8b38      	ldrh	r0, [r7, #24]
    e914:	f7fe ff2a 	bl	d76c <attsErrRsp>
    e918:	e7e6      	b.n	e8e8 <attsProcPrepWriteReq+0xbc>
    e91a:	2317      	movs	r3, #23
    e91c:	7203      	strb	r3, [r0, #8]
    e91e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e922:	72c3      	strb	r3, [r0, #11]
    e924:	9b05      	ldr	r3, [sp, #20]
    e926:	7244      	strb	r4, [r0, #9]
    e928:	0a1d      	lsrs	r5, r3, #8
    e92a:	0a24      	lsrs	r4, r4, #8
    e92c:	7284      	strb	r4, [r0, #10]
    e92e:	7305      	strb	r5, [r0, #12]
    e930:	4632      	mov	r2, r6
    e932:	4659      	mov	r1, fp
    e934:	300d      	adds	r0, #13
    e936:	f7fd fc13 	bl	c160 <memcpy>
    e93a:	4643      	mov	r3, r8
    e93c:	4652      	mov	r2, sl
    e93e:	8b39      	ldrh	r1, [r7, #24]
    e940:	2004      	movs	r0, #4
    e942:	f001 fe33 	bl	105ac <L2cDataReq>
    e946:	e7cf      	b.n	e8e8 <attsProcPrepWriteReq+0xbc>
    e948:	2001      	movs	r0, #1
    e94a:	e7df      	b.n	e90c <attsProcPrepWriteReq+0xe0>
    e94c:	200b      	movs	r0, #11
    e94e:	e7dd      	b.n	e90c <attsProcPrepWriteReq+0xe0>
    e950:	200d      	movs	r0, #13
    e952:	e7db      	b.n	e90c <attsProcPrepWriteReq+0xe0>
    e954:	2009      	movs	r0, #9
    e956:	e7d9      	b.n	e90c <attsProcPrepWriteReq+0xe0>
    e958:	2011      	movs	r0, #17
    e95a:	e7d7      	b.n	e90c <attsProcPrepWriteReq+0xe0>
    e95c:	10002bb4 	.word	0x10002bb4

0000e960 <attsProcExecWriteReq>:
    e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e964:	7a53      	ldrb	r3, [r2, #9]
    e966:	b086      	sub	sp, #24
    e968:	4606      	mov	r6, r0
    e96a:	b973      	cbnz	r3, e98a <attsProcExecWriteReq+0x2a>
    e96c:	f7fe ff56 	bl	d81c <attsClearPrepWrites>
    e970:	2009      	movs	r0, #9
    e972:	f7fd fe49 	bl	c608 <attMsgAlloc>
    e976:	4603      	mov	r3, r0
    e978:	b360      	cbz	r0, e9d4 <attsProcExecWriteReq+0x74>
    e97a:	2219      	movs	r2, #25
    e97c:	7202      	strb	r2, [r0, #8]
    e97e:	8b31      	ldrh	r1, [r6, #24]
    e980:	2201      	movs	r2, #1
    e982:	2004      	movs	r0, #4
    e984:	f001 fe12 	bl	105ac <L2cDataReq>
    e988:	e024      	b.n	e9d4 <attsProcExecWriteReq+0x74>
    e98a:	2b01      	cmp	r3, #1
    e98c:	d16e      	bne.n	ea6c <attsProcExecWriteReq+0x10c>
    e98e:	6804      	ldr	r4, [r0, #0]
    e990:	b94c      	cbnz	r4, e9a6 <attsProcExecWriteReq+0x46>
    e992:	f8df 80dc 	ldr.w	r8, [pc, #220]	; ea70 <attsProcExecWriteReq+0x110>
    e996:	4630      	mov	r0, r6
    e998:	f00b fe2e 	bl	1a5f8 <WsfQueueDeq>
    e99c:	4605      	mov	r5, r0
    e99e:	bb00      	cbnz	r0, e9e2 <attsProcExecWriteReq+0x82>
    e9a0:	2c00      	cmp	r4, #0
    e9a2:	d0e5      	beq.n	e970 <attsProcExecWriteReq+0x10>
    e9a4:	e010      	b.n	e9c8 <attsProcExecWriteReq+0x68>
    e9a6:	a904      	add	r1, sp, #16
    e9a8:	88e0      	ldrh	r0, [r4, #6]
    e9aa:	f7ff f839 	bl	da20 <attsFindByHandle>
    e9ae:	b1b0      	cbz	r0, e9de <attsProcExecWriteReq+0x7e>
    e9b0:	8921      	ldrh	r1, [r4, #8]
    e9b2:	8982      	ldrh	r2, [r0, #12]
    e9b4:	4291      	cmp	r1, r2
    e9b6:	d810      	bhi.n	e9da <attsProcExecWriteReq+0x7a>
    e9b8:	88a3      	ldrh	r3, [r4, #4]
    e9ba:	440b      	add	r3, r1
    e9bc:	4293      	cmp	r3, r2
    e9be:	dd0e      	ble.n	e9de <attsProcExecWriteReq+0x7e>
    e9c0:	240d      	movs	r4, #13
    e9c2:	4630      	mov	r0, r6
    e9c4:	f7fe ff2a 	bl	d81c <attsClearPrepWrites>
    e9c8:	4623      	mov	r3, r4
    e9ca:	2200      	movs	r2, #0
    e9cc:	2118      	movs	r1, #24
    e9ce:	8b30      	ldrh	r0, [r6, #24]
    e9d0:	f7fe fecc 	bl	d76c <attsErrRsp>
    e9d4:	b006      	add	sp, #24
    e9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9da:	2407      	movs	r4, #7
    e9dc:	e7f1      	b.n	e9c2 <attsProcExecWriteReq+0x62>
    e9de:	6824      	ldr	r4, [r4, #0]
    e9e0:	e7d6      	b.n	e990 <attsProcExecWriteReq+0x30>
    e9e2:	a905      	add	r1, sp, #20
    e9e4:	88e8      	ldrh	r0, [r5, #6]
    e9e6:	f7ff f81b 	bl	da20 <attsFindByHandle>
    e9ea:	4607      	mov	r7, r0
    e9ec:	b920      	cbnz	r0, e9f8 <attsProcExecWriteReq+0x98>
    e9ee:	240e      	movs	r4, #14
    e9f0:	4630      	mov	r0, r6
    e9f2:	f7fe ff13 	bl	d81c <attsClearPrepWrites>
    e9f6:	e017      	b.n	ea28 <attsProcExecWriteReq+0xc8>
    e9f8:	7bc3      	ldrb	r3, [r0, #15]
    e9fa:	06d8      	lsls	r0, r3, #27
    e9fc:	d534      	bpl.n	ea68 <attsProcExecWriteReq+0x108>
    e9fe:	7bba      	ldrb	r2, [r7, #14]
    ea00:	0791      	lsls	r1, r2, #30
    ea02:	f105 030a 	add.w	r3, r5, #10
    ea06:	d513      	bpl.n	ea30 <attsProcExecWriteReq+0xd0>
    ea08:	9905      	ldr	r1, [sp, #20]
    ea0a:	68cc      	ldr	r4, [r1, #12]
    ea0c:	b184      	cbz	r4, ea30 <attsProcExecWriteReq+0xd0>
    ea0e:	892a      	ldrh	r2, [r5, #8]
    ea10:	88e9      	ldrh	r1, [r5, #6]
    ea12:	7f30      	ldrb	r0, [r6, #28]
    ea14:	e9cd 3701 	strd	r3, r7, [sp, #4]
    ea18:	88ab      	ldrh	r3, [r5, #4]
    ea1a:	9300      	str	r3, [sp, #0]
    ea1c:	4613      	mov	r3, r2
    ea1e:	2218      	movs	r2, #24
    ea20:	47a0      	blx	r4
    ea22:	4604      	mov	r4, r0
    ea24:	2800      	cmp	r0, #0
    ea26:	d1e3      	bne.n	e9f0 <attsProcExecWriteReq+0x90>
    ea28:	4628      	mov	r0, r5
    ea2a:	f00b fd0b 	bl	1a444 <WsfBufFree>
    ea2e:	e7b2      	b.n	e996 <attsProcExecWriteReq+0x36>
    ea30:	0692      	lsls	r2, r2, #26
    ea32:	d507      	bpl.n	ea44 <attsProcExecWriteReq+0xe4>
    ea34:	f8d8 4014 	ldr.w	r4, [r8, #20]
    ea38:	b124      	cbz	r4, ea44 <attsProcExecWriteReq+0xe4>
    ea3a:	88ea      	ldrh	r2, [r5, #6]
    ea3c:	7f30      	ldrb	r0, [r6, #28]
    ea3e:	2109      	movs	r1, #9
    ea40:	47a0      	blx	r4
    ea42:	e7ee      	b.n	ea22 <attsProcExecWriteReq+0xc2>
    ea44:	892c      	ldrh	r4, [r5, #8]
    ea46:	6878      	ldr	r0, [r7, #4]
    ea48:	88aa      	ldrh	r2, [r5, #4]
    ea4a:	4420      	add	r0, r4
    ea4c:	4619      	mov	r1, r3
    ea4e:	f7fd fb87 	bl	c160 <memcpy>
    ea52:	7bbc      	ldrb	r4, [r7, #14]
    ea54:	f014 0408 	ands.w	r4, r4, #8
    ea58:	d0e6      	beq.n	ea28 <attsProcExecWriteReq+0xc8>
    ea5a:	88ab      	ldrh	r3, [r5, #4]
    ea5c:	8929      	ldrh	r1, [r5, #8]
    ea5e:	68ba      	ldr	r2, [r7, #8]
    ea60:	440b      	add	r3, r1
    ea62:	8013      	strh	r3, [r2, #0]
    ea64:	2400      	movs	r4, #0
    ea66:	e7df      	b.n	ea28 <attsProcExecWriteReq+0xc8>
    ea68:	2403      	movs	r4, #3
    ea6a:	e7c1      	b.n	e9f0 <attsProcExecWriteReq+0x90>
    ea6c:	2404      	movs	r4, #4
    ea6e:	e7ab      	b.n	e9c8 <attsProcExecWriteReq+0x68>
    ea70:	10003c18 	.word	0x10003c18

0000ea74 <dmAdvCbInit>:
    ea74:	4b0b      	ldr	r3, [pc, #44]	; (eaa4 <dmAdvCbInit+0x30>)
    ea76:	181a      	adds	r2, r3, r0
    ea78:	21ff      	movs	r1, #255	; 0xff
    ea7a:	b510      	push	{r4, lr}
    ea7c:	7511      	strb	r1, [r2, #20]
    ea7e:	f100 0108 	add.w	r1, r0, #8
    ea82:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    ea86:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    ea8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    ea8e:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    ea92:	8059      	strh	r1, [r3, #2]
    ea94:	2307      	movs	r3, #7
    ea96:	7553      	strb	r3, [r2, #21]
    ea98:	4b03      	ldr	r3, [pc, #12]	; (eaa8 <dmAdvCbInit+0x34>)
    ea9a:	4418      	add	r0, r3
    ea9c:	2300      	movs	r3, #0
    ea9e:	7443      	strb	r3, [r0, #17]
    eaa0:	75d3      	strb	r3, [r2, #23]
    eaa2:	bd10      	pop	{r4, pc}
    eaa4:	10003c98 	.word	0x10003c98
    eaa8:	10003e48 	.word	0x10003e48

0000eaac <dmAdvInit>:
    eaac:	b508      	push	{r3, lr}
    eaae:	2000      	movs	r0, #0
    eab0:	f7ff ffe0 	bl	ea74 <dmAdvCbInit>
    eab4:	4b03      	ldr	r3, [pc, #12]	; (eac4 <dmAdvInit+0x18>)
    eab6:	4a04      	ldr	r2, [pc, #16]	; (eac8 <dmAdvInit+0x1c>)
    eab8:	7b19      	ldrb	r1, [r3, #12]
    eaba:	7211      	strb	r1, [r2, #8]
    eabc:	2200      	movs	r2, #0
    eabe:	739a      	strb	r2, [r3, #14]
    eac0:	bd08      	pop	{r3, pc}
    eac2:	bf00      	nop
    eac4:	10003e48 	.word	0x10003e48
    eac8:	10003c98 	.word	0x10003c98

0000eacc <DmAdvConfig>:
    eacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ead0:	4607      	mov	r7, r0
    ead2:	200e      	movs	r0, #14
    ead4:	4688      	mov	r8, r1
    ead6:	4616      	mov	r6, r2
    ead8:	461d      	mov	r5, r3
    eada:	f00b fd02 	bl	1a4e2 <WsfMsgAlloc>
    eade:	4604      	mov	r4, r0
    eae0:	b180      	cbz	r0, eb04 <DmAdvConfig+0x38>
    eae2:	2300      	movs	r3, #0
    eae4:	7083      	strb	r3, [r0, #2]
    eae6:	f880 8005 	strb.w	r8, [r0, #5]
    eaea:	7107      	strb	r7, [r0, #4]
    eaec:	7186      	strb	r6, [r0, #6]
    eaee:	4629      	mov	r1, r5
    eaf0:	3007      	adds	r0, #7
    eaf2:	f004 ffcd 	bl	13a90 <BdaCpy>
    eaf6:	4b04      	ldr	r3, [pc, #16]	; (eb08 <DmAdvConfig+0x3c>)
    eaf8:	4621      	mov	r1, r4
    eafa:	7b18      	ldrb	r0, [r3, #12]
    eafc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb00:	f00b bd13 	b.w	1a52a <WsfMsgSend>
    eb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb08:	10003e48 	.word	0x10003e48

0000eb0c <DmAdvSetData>:
    eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb10:	4680      	mov	r8, r0
    eb12:	200c      	movs	r0, #12
    eb14:	460f      	mov	r7, r1
    eb16:	4616      	mov	r6, r2
    eb18:	461d      	mov	r5, r3
    eb1a:	9c06      	ldr	r4, [sp, #24]
    eb1c:	f00b fce1 	bl	1a4e2 <WsfMsgAlloc>
    eb20:	b170      	cbz	r0, eb40 <DmAdvSetData+0x34>
    eb22:	2301      	movs	r3, #1
    eb24:	7083      	strb	r3, [r0, #2]
    eb26:	4b07      	ldr	r3, [pc, #28]	; (eb44 <DmAdvSetData+0x38>)
    eb28:	f880 8004 	strb.w	r8, [r0, #4]
    eb2c:	7147      	strb	r7, [r0, #5]
    eb2e:	7186      	strb	r6, [r0, #6]
    eb30:	71c5      	strb	r5, [r0, #7]
    eb32:	6084      	str	r4, [r0, #8]
    eb34:	4601      	mov	r1, r0
    eb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb3a:	7b18      	ldrb	r0, [r3, #12]
    eb3c:	f00b bcf5 	b.w	1a52a <WsfMsgSend>
    eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb44:	10003e48 	.word	0x10003e48

0000eb48 <DmAdvStart>:
    eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb4a:	4604      	mov	r4, r0
    eb4c:	200a      	movs	r0, #10
    eb4e:	460f      	mov	r7, r1
    eb50:	4616      	mov	r6, r2
    eb52:	461d      	mov	r5, r3
    eb54:	f00b fcc5 	bl	1a4e2 <WsfMsgAlloc>
    eb58:	b180      	cbz	r0, eb7c <DmAdvStart+0x34>
    eb5a:	2302      	movs	r3, #2
    eb5c:	7083      	strb	r3, [r0, #2]
    eb5e:	7104      	strb	r4, [r0, #4]
    eb60:	b12c      	cbz	r4, eb6e <DmAdvStart+0x26>
    eb62:	783b      	ldrb	r3, [r7, #0]
    eb64:	7143      	strb	r3, [r0, #5]
    eb66:	8833      	ldrh	r3, [r6, #0]
    eb68:	80c3      	strh	r3, [r0, #6]
    eb6a:	782b      	ldrb	r3, [r5, #0]
    eb6c:	7203      	strb	r3, [r0, #8]
    eb6e:	4b04      	ldr	r3, [pc, #16]	; (eb80 <DmAdvStart+0x38>)
    eb70:	4601      	mov	r1, r0
    eb72:	7b18      	ldrb	r0, [r3, #12]
    eb74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    eb78:	f00b bcd7 	b.w	1a52a <WsfMsgSend>
    eb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb7e:	bf00      	nop
    eb80:	10003e48 	.word	0x10003e48

0000eb84 <DmAdvStop>:
    eb84:	b538      	push	{r3, r4, r5, lr}
    eb86:	4604      	mov	r4, r0
    eb88:	2006      	movs	r0, #6
    eb8a:	460d      	mov	r5, r1
    eb8c:	f00b fca9 	bl	1a4e2 <WsfMsgAlloc>
    eb90:	b1a0      	cbz	r0, ebbc <DmAdvStop+0x38>
    eb92:	2303      	movs	r3, #3
    eb94:	7104      	strb	r4, [r0, #4]
    eb96:	3405      	adds	r4, #5
    eb98:	7083      	strb	r3, [r0, #2]
    eb9a:	1e69      	subs	r1, r5, #1
    eb9c:	1d43      	adds	r3, r0, #5
    eb9e:	4404      	add	r4, r0
    eba0:	42a3      	cmp	r3, r4
    eba2:	d106      	bne.n	ebb2 <DmAdvStop+0x2e>
    eba4:	4b06      	ldr	r3, [pc, #24]	; (ebc0 <DmAdvStop+0x3c>)
    eba6:	4601      	mov	r1, r0
    eba8:	7b18      	ldrb	r0, [r3, #12]
    ebaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebae:	f00b bcbc 	b.w	1a52a <WsfMsgSend>
    ebb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ebb6:	f803 2b01 	strb.w	r2, [r3], #1
    ebba:	e7f1      	b.n	eba0 <DmAdvStop+0x1c>
    ebbc:	bd38      	pop	{r3, r4, r5, pc}
    ebbe:	bf00      	nop
    ebc0:	10003e48 	.word	0x10003e48

0000ebc4 <DmAdvRemoveAdvSet>:
    ebc4:	b510      	push	{r4, lr}
    ebc6:	4604      	mov	r4, r0
    ebc8:	2006      	movs	r0, #6
    ebca:	f00b fc8a 	bl	1a4e2 <WsfMsgAlloc>
    ebce:	4601      	mov	r1, r0
    ebd0:	b140      	cbz	r0, ebe4 <DmAdvRemoveAdvSet+0x20>
    ebd2:	2304      	movs	r3, #4
    ebd4:	7083      	strb	r3, [r0, #2]
    ebd6:	4b04      	ldr	r3, [pc, #16]	; (ebe8 <DmAdvRemoveAdvSet+0x24>)
    ebd8:	7104      	strb	r4, [r0, #4]
    ebda:	7b18      	ldrb	r0, [r3, #12]
    ebdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebe0:	f00b bca3 	b.w	1a52a <WsfMsgSend>
    ebe4:	bd10      	pop	{r4, pc}
    ebe6:	bf00      	nop
    ebe8:	10003e48 	.word	0x10003e48

0000ebec <DmAdvClearAdvSets>:
    ebec:	b508      	push	{r3, lr}
    ebee:	2004      	movs	r0, #4
    ebf0:	f00b fc77 	bl	1a4e2 <WsfMsgAlloc>
    ebf4:	4601      	mov	r1, r0
    ebf6:	b138      	cbz	r0, ec08 <DmAdvClearAdvSets+0x1c>
    ebf8:	2305      	movs	r3, #5
    ebfa:	7083      	strb	r3, [r0, #2]
    ebfc:	4b03      	ldr	r3, [pc, #12]	; (ec0c <DmAdvClearAdvSets+0x20>)
    ebfe:	7b18      	ldrb	r0, [r3, #12]
    ec00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ec04:	f00b bc91 	b.w	1a52a <WsfMsgSend>
    ec08:	bd08      	pop	{r3, pc}
    ec0a:	bf00      	nop
    ec0c:	10003e48 	.word	0x10003e48

0000ec10 <DmAdvSetInterval>:
    ec10:	b570      	push	{r4, r5, r6, lr}
    ec12:	4604      	mov	r4, r0
    ec14:	460e      	mov	r6, r1
    ec16:	4615      	mov	r5, r2
    ec18:	f009 ffa2 	bl	18b60 <WsfTaskLock>
    ec1c:	f104 0008 	add.w	r0, r4, #8
    ec20:	4b04      	ldr	r3, [pc, #16]	; (ec34 <DmAdvSetInterval+0x24>)
    ec22:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    ec26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    ec2a:	805d      	strh	r5, [r3, #2]
    ec2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec30:	f009 bf9c 	b.w	18b6c <WsfTaskUnlock>
    ec34:	10003c98 	.word	0x10003c98

0000ec38 <DmAdvSetChannelMap>:
    ec38:	b538      	push	{r3, r4, r5, lr}
    ec3a:	4605      	mov	r5, r0
    ec3c:	460c      	mov	r4, r1
    ec3e:	f009 ff8f 	bl	18b60 <WsfTaskLock>
    ec42:	4803      	ldr	r0, [pc, #12]	; (ec50 <DmAdvSetChannelMap+0x18>)
    ec44:	4428      	add	r0, r5
    ec46:	7544      	strb	r4, [r0, #21]
    ec48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec4c:	f009 bf8e 	b.w	18b6c <WsfTaskUnlock>
    ec50:	10003c98 	.word	0x10003c98

0000ec54 <DmAdvSetAddrType>:
    ec54:	b510      	push	{r4, lr}
    ec56:	4604      	mov	r4, r0
    ec58:	f009 ff82 	bl	18b60 <WsfTaskLock>
    ec5c:	4b02      	ldr	r3, [pc, #8]	; (ec68 <DmAdvSetAddrType+0x14>)
    ec5e:	739c      	strb	r4, [r3, #14]
    ec60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec64:	f009 bf82 	b.w	18b6c <WsfTaskUnlock>
    ec68:	10003e48 	.word	0x10003e48

0000ec6c <DmAdvSetAdValue>:
    ec6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec70:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ec74:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    ec78:	460c      	mov	r4, r1
    ec7a:	4691      	mov	r9, r2
    ec7c:	8819      	ldrh	r1, [r3, #0]
    ec7e:	4642      	mov	r2, r8
    ec80:	4683      	mov	fp, r0
    ec82:	461f      	mov	r7, r3
    ec84:	f000 ff50 	bl	fb28 <DmFindAdType>
    ec88:	b1f8      	cbz	r0, ecca <DmAdvSetAdValue+0x5e>
    ec8a:	7805      	ldrb	r5, [r0, #0]
    ec8c:	1c66      	adds	r6, r4, #1
    ec8e:	42ae      	cmp	r6, r5
    ec90:	d107      	bne.n	eca2 <DmAdvSetAdValue+0x36>
    ec92:	4622      	mov	r2, r4
    ec94:	4649      	mov	r1, r9
    ec96:	3002      	adds	r0, #2
    ec98:	f7fd fa62 	bl	c160 <memcpy>
    ec9c:	2001      	movs	r0, #1
    ec9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eca2:	f8b7 c000 	ldrh.w	ip, [r7]
    eca6:	b2ad      	uxth	r5, r5
    eca8:	4466      	add	r6, ip
    ecaa:	1b76      	subs	r6, r6, r5
    ecac:	b2b6      	uxth	r6, r6
    ecae:	4556      	cmp	r6, sl
    ecb0:	d80b      	bhi.n	ecca <DmAdvSetAdValue+0x5e>
    ecb2:	3501      	adds	r5, #1
    ecb4:	1941      	adds	r1, r0, r5
    ecb6:	eba1 0208 	sub.w	r2, r1, r8
    ecba:	b2d2      	uxtb	r2, r2
    ecbc:	ebac 0202 	sub.w	r2, ip, r2
    ecc0:	f7fd fae8 	bl	c294 <memmove>
    ecc4:	883b      	ldrh	r3, [r7, #0]
    ecc6:	1b5d      	subs	r5, r3, r5
    ecc8:	803d      	strh	r5, [r7, #0]
    ecca:	883b      	ldrh	r3, [r7, #0]
    eccc:	191a      	adds	r2, r3, r4
    ecce:	3201      	adds	r2, #1
    ecd0:	4552      	cmp	r2, sl
    ecd2:	da10      	bge.n	ecf6 <DmAdvSetAdValue+0x8a>
    ecd4:	eb08 0003 	add.w	r0, r8, r3
    ecd8:	1c62      	adds	r2, r4, #1
    ecda:	f808 2003 	strb.w	r2, [r8, r3]
    ecde:	4649      	mov	r1, r9
    ece0:	f880 b001 	strb.w	fp, [r0, #1]
    ece4:	4622      	mov	r2, r4
    ece6:	3002      	adds	r0, #2
    ece8:	f7fd fa3a 	bl	c160 <memcpy>
    ecec:	883b      	ldrh	r3, [r7, #0]
    ecee:	3402      	adds	r4, #2
    ecf0:	441c      	add	r4, r3
    ecf2:	803c      	strh	r4, [r7, #0]
    ecf4:	e7d2      	b.n	ec9c <DmAdvSetAdValue+0x30>
    ecf6:	2000      	movs	r0, #0
    ecf8:	e7d1      	b.n	ec9e <DmAdvSetAdValue+0x32>

0000ecfa <DmAdvSetName>:
    ecfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ecfe:	4614      	mov	r4, r2
    ed00:	4606      	mov	r6, r0
    ed02:	460f      	mov	r7, r1
    ed04:	461a      	mov	r2, r3
    ed06:	8821      	ldrh	r1, [r4, #0]
    ed08:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    ed0c:	2009      	movs	r0, #9
    ed0e:	4698      	mov	r8, r3
    ed10:	f000 ff0a 	bl	fb28 <DmFindAdType>
    ed14:	b928      	cbnz	r0, ed22 <DmAdvSetName+0x28>
    ed16:	4642      	mov	r2, r8
    ed18:	8821      	ldrh	r1, [r4, #0]
    ed1a:	2008      	movs	r0, #8
    ed1c:	f000 ff04 	bl	fb28 <DmFindAdType>
    ed20:	b188      	cbz	r0, ed46 <DmAdvSetName+0x4c>
    ed22:	f890 9000 	ldrb.w	r9, [r0]
    ed26:	8822      	ldrh	r2, [r4, #0]
    ed28:	f109 0901 	add.w	r9, r9, #1
    ed2c:	eb00 0109 	add.w	r1, r0, r9
    ed30:	eba1 0308 	sub.w	r3, r1, r8
    ed34:	b2db      	uxtb	r3, r3
    ed36:	1ad2      	subs	r2, r2, r3
    ed38:	f7fd faac 	bl	c294 <memmove>
    ed3c:	8823      	ldrh	r3, [r4, #0]
    ed3e:	eba3 0909 	sub.w	r9, r3, r9
    ed42:	f8a4 9000 	strh.w	r9, [r4]
    ed46:	8822      	ldrh	r2, [r4, #0]
    ed48:	1e6b      	subs	r3, r5, #1
    ed4a:	4293      	cmp	r3, r2
    ed4c:	dd1c      	ble.n	ed88 <DmAdvSetName+0x8e>
    ed4e:	18b3      	adds	r3, r6, r2
    ed50:	3301      	adds	r3, #1
    ed52:	429d      	cmp	r5, r3
    ed54:	bfde      	ittt	le
    ed56:	3d02      	suble	r5, #2
    ed58:	1aad      	suble	r5, r5, r2
    ed5a:	b2ee      	uxtble	r6, r5
    ed5c:	eb08 0002 	add.w	r0, r8, r2
    ed60:	bfd4      	ite	le
    ed62:	2308      	movle	r3, #8
    ed64:	2309      	movgt	r3, #9
    ed66:	1c71      	adds	r1, r6, #1
    ed68:	f808 1002 	strb.w	r1, [r8, r2]
    ed6c:	3002      	adds	r0, #2
    ed6e:	f800 3c01 	strb.w	r3, [r0, #-1]
    ed72:	4632      	mov	r2, r6
    ed74:	4639      	mov	r1, r7
    ed76:	f7fd f9f3 	bl	c160 <memcpy>
    ed7a:	8825      	ldrh	r5, [r4, #0]
    ed7c:	3502      	adds	r5, #2
    ed7e:	4435      	add	r5, r6
    ed80:	8025      	strh	r5, [r4, #0]
    ed82:	2001      	movs	r0, #1
    ed84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ed88:	2000      	movs	r0, #0
    ed8a:	e7fb      	b.n	ed84 <DmAdvSetName+0x8a>

0000ed8c <dmAdvActRemoveSet>:
    ed8c:	4770      	bx	lr

0000ed8e <dmAdvMsgHandler>:
    ed8e:	7883      	ldrb	r3, [r0, #2]
    ed90:	4a02      	ldr	r2, [pc, #8]	; (ed9c <dmAdvMsgHandler+0xe>)
    ed92:	f003 030f 	and.w	r3, r3, #15
    ed96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed9a:	4718      	bx	r3
    ed9c:	00022ee4 	.word	0x00022ee4

0000eda0 <dmAdvConfig>:
    eda0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    eda4:	4e0e      	ldr	r6, [pc, #56]	; (ede0 <dmAdvConfig+0x40>)
    eda6:	4c0f      	ldr	r4, [pc, #60]	; (ede4 <dmAdvConfig+0x44>)
    eda8:	4605      	mov	r5, r0
    edaa:	7bb0      	ldrb	r0, [r6, #14]
    edac:	8a27      	ldrh	r7, [r4, #16]
    edae:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    edb2:	4689      	mov	r9, r1
    edb4:	4692      	mov	sl, r2
    edb6:	f000 fef1 	bl	fb9c <DmLlAddrType>
    edba:	7c73      	ldrb	r3, [r6, #17]
    edbc:	9303      	str	r3, [sp, #12]
    edbe:	7d63      	ldrb	r3, [r4, #21]
    edc0:	f8cd 9000 	str.w	r9, [sp]
    edc4:	e9cd a301 	strd	sl, r3, [sp, #4]
    edc8:	462a      	mov	r2, r5
    edca:	4603      	mov	r3, r0
    edcc:	4641      	mov	r1, r8
    edce:	4638      	mov	r0, r7
    edd0:	f005 fbbc 	bl	1454c <HciLeSetAdvParamCmd>
    edd4:	4b04      	ldr	r3, [pc, #16]	; (ede8 <dmAdvConfig+0x48>)
    edd6:	701d      	strb	r5, [r3, #0]
    edd8:	b004      	add	sp, #16
    edda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    edde:	bf00      	nop
    ede0:	10003e48 	.word	0x10003e48
    ede4:	10003c98 	.word	0x10003c98
    ede8:	10003cb4 	.word	0x10003cb4

0000edec <dmAdvReset>:
    edec:	b507      	push	{r0, r1, r2, lr}
    edee:	4b0d      	ldr	r3, [pc, #52]	; (ee24 <dmAdvReset+0x38>)
    edf0:	7dda      	ldrb	r2, [r3, #23]
    edf2:	2a05      	cmp	r2, #5
    edf4:	d006      	beq.n	ee04 <dmAdvReset+0x18>
    edf6:	2a01      	cmp	r2, #1
    edf8:	d10e      	bne.n	ee18 <dmAdvReset+0x2c>
    edfa:	7d1b      	ldrb	r3, [r3, #20]
    edfc:	2b01      	cmp	r3, #1
    edfe:	d00b      	beq.n	ee18 <dmAdvReset+0x2c>
    ee00:	2b04      	cmp	r3, #4
    ee02:	d009      	beq.n	ee18 <dmAdvReset+0x2c>
    ee04:	4807      	ldr	r0, [pc, #28]	; (ee24 <dmAdvReset+0x38>)
    ee06:	f00b fd4b 	bl	1a8a0 <WsfTimerStop>
    ee0a:	2322      	movs	r3, #34	; 0x22
    ee0c:	f8ad 3006 	strh.w	r3, [sp, #6]
    ee10:	4b05      	ldr	r3, [pc, #20]	; (ee28 <dmAdvReset+0x3c>)
    ee12:	a801      	add	r0, sp, #4
    ee14:	689b      	ldr	r3, [r3, #8]
    ee16:	4798      	blx	r3
    ee18:	f7ff fe48 	bl	eaac <dmAdvInit>
    ee1c:	b003      	add	sp, #12
    ee1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ee22:	bf00      	nop
    ee24:	10003c98 	.word	0x10003c98
    ee28:	10003e48 	.word	0x10003e48

0000ee2c <dmAdvActConfig>:
    ee2c:	4b06      	ldr	r3, [pc, #24]	; (ee48 <dmAdvActConfig+0x1c>)
    ee2e:	7dda      	ldrb	r2, [r3, #23]
    ee30:	b942      	cbnz	r2, ee44 <dmAdvActConfig+0x18>
    ee32:	7d1b      	ldrb	r3, [r3, #20]
    ee34:	2b01      	cmp	r3, #1
    ee36:	d005      	beq.n	ee44 <dmAdvActConfig+0x18>
    ee38:	2b04      	cmp	r3, #4
    ee3a:	d003      	beq.n	ee44 <dmAdvActConfig+0x18>
    ee3c:	1dc2      	adds	r2, r0, #7
    ee3e:	7981      	ldrb	r1, [r0, #6]
    ee40:	7940      	ldrb	r0, [r0, #5]
    ee42:	e7ad      	b.n	eda0 <dmAdvConfig>
    ee44:	4770      	bx	lr
    ee46:	bf00      	nop
    ee48:	10003c98 	.word	0x10003c98

0000ee4c <dmAdvActSetData>:
    ee4c:	4a06      	ldr	r2, [pc, #24]	; (ee68 <dmAdvActSetData+0x1c>)
    ee4e:	7dd2      	ldrb	r2, [r2, #23]
    ee50:	4603      	mov	r3, r0
    ee52:	b93a      	cbnz	r2, ee64 <dmAdvActSetData+0x18>
    ee54:	6899      	ldr	r1, [r3, #8]
    ee56:	799b      	ldrb	r3, [r3, #6]
    ee58:	79c0      	ldrb	r0, [r0, #7]
    ee5a:	b90b      	cbnz	r3, ee60 <dmAdvActSetData+0x14>
    ee5c:	f005 bb46 	b.w	144ec <HciLeSetAdvDataCmd>
    ee60:	f005 bc17 	b.w	14692 <HciLeSetScanRespDataCmd>
    ee64:	4770      	bx	lr
    ee66:	bf00      	nop
    ee68:	10003c98 	.word	0x10003c98

0000ee6c <dmAdvActStart>:
    ee6c:	4b07      	ldr	r3, [pc, #28]	; (ee8c <dmAdvActStart+0x20>)
    ee6e:	7dda      	ldrb	r2, [r3, #23]
    ee70:	b95a      	cbnz	r2, ee8a <dmAdvActStart+0x1e>
    ee72:	7d1a      	ldrb	r2, [r3, #20]
    ee74:	2a01      	cmp	r2, #1
    ee76:	d008      	beq.n	ee8a <dmAdvActStart+0x1e>
    ee78:	2a04      	cmp	r2, #4
    ee7a:	d006      	beq.n	ee8a <dmAdvActStart+0x1e>
    ee7c:	2203      	movs	r2, #3
    ee7e:	75da      	strb	r2, [r3, #23]
    ee80:	88c2      	ldrh	r2, [r0, #6]
    ee82:	831a      	strh	r2, [r3, #24]
    ee84:	2001      	movs	r0, #1
    ee86:	f005 bb14 	b.w	144b2 <HciLeSetAdvEnableCmd>
    ee8a:	4770      	bx	lr
    ee8c:	10003c98 	.word	0x10003c98

0000ee90 <dmAdvActStop>:
    ee90:	4b07      	ldr	r3, [pc, #28]	; (eeb0 <dmAdvActStop+0x20>)
    ee92:	7dda      	ldrb	r2, [r3, #23]
    ee94:	2a01      	cmp	r2, #1
    ee96:	d109      	bne.n	eeac <dmAdvActStop+0x1c>
    ee98:	7d1a      	ldrb	r2, [r3, #20]
    ee9a:	2a01      	cmp	r2, #1
    ee9c:	d006      	beq.n	eeac <dmAdvActStop+0x1c>
    ee9e:	2a04      	cmp	r2, #4
    eea0:	d004      	beq.n	eeac <dmAdvActStop+0x1c>
    eea2:	2205      	movs	r2, #5
    eea4:	2000      	movs	r0, #0
    eea6:	75da      	strb	r2, [r3, #23]
    eea8:	f005 bb03 	b.w	144b2 <HciLeSetAdvEnableCmd>
    eeac:	4770      	bx	lr
    eeae:	bf00      	nop
    eeb0:	10003c98 	.word	0x10003c98

0000eeb4 <dmAdvActTimeout>:
    eeb4:	f7ff bfec 	b.w	ee90 <dmAdvActStop>

0000eeb8 <dmAdvHciHandler>:
    eeb8:	7883      	ldrb	r3, [r0, #2]
    eeba:	2b35      	cmp	r3, #53	; 0x35
    eebc:	b570      	push	{r4, r5, r6, lr}
    eebe:	4605      	mov	r5, r0
    eec0:	d144      	bne.n	ef4c <dmAdvHciHandler+0x94>
    eec2:	4c23      	ldr	r4, [pc, #140]	; (ef50 <dmAdvHciHandler+0x98>)
    eec4:	7de3      	ldrb	r3, [r4, #23]
    eec6:	2b03      	cmp	r3, #3
    eec8:	d01d      	beq.n	ef06 <dmAdvHciHandler+0x4e>
    eeca:	2b05      	cmp	r3, #5
    eecc:	d138      	bne.n	ef40 <dmAdvHciHandler+0x88>
    eece:	2622      	movs	r6, #34	; 0x22
    eed0:	78ea      	ldrb	r2, [r5, #3]
    eed2:	2a00      	cmp	r2, #0
    eed4:	d12e      	bne.n	ef34 <dmAdvHciHandler+0x7c>
    eed6:	2b05      	cmp	r3, #5
    eed8:	d109      	bne.n	eeee <dmAdvHciHandler+0x36>
    eeda:	481d      	ldr	r0, [pc, #116]	; (ef50 <dmAdvHciHandler+0x98>)
    eedc:	f00b fce0 	bl	1a8a0 <WsfTimerStop>
    eee0:	2315      	movs	r3, #21
    eee2:	70ab      	strb	r3, [r5, #2]
    eee4:	4b1b      	ldr	r3, [pc, #108]	; (ef54 <dmAdvHciHandler+0x9c>)
    eee6:	685b      	ldr	r3, [r3, #4]
    eee8:	4628      	mov	r0, r5
    eeea:	689b      	ldr	r3, [r3, #8]
    eeec:	4798      	blx	r3
    eeee:	23ff      	movs	r3, #255	; 0xff
    eef0:	7523      	strb	r3, [r4, #20]
    eef2:	2300      	movs	r3, #0
    eef4:	75e3      	strb	r3, [r4, #23]
    eef6:	b34e      	cbz	r6, ef4c <dmAdvHciHandler+0x94>
    eef8:	4b17      	ldr	r3, [pc, #92]	; (ef58 <dmAdvHciHandler+0xa0>)
    eefa:	70ae      	strb	r6, [r5, #2]
    eefc:	4628      	mov	r0, r5
    eefe:	689b      	ldr	r3, [r3, #8]
    ef00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef04:	4718      	bx	r3
    ef06:	2621      	movs	r6, #33	; 0x21
    ef08:	78ea      	ldrb	r2, [r5, #3]
    ef0a:	2a00      	cmp	r2, #0
    ef0c:	d1f1      	bne.n	eef2 <dmAdvHciHandler+0x3a>
    ef0e:	2b03      	cmp	r3, #3
    ef10:	d10d      	bne.n	ef2e <dmAdvHciHandler+0x76>
    ef12:	8b21      	ldrh	r1, [r4, #24]
    ef14:	b121      	cbz	r1, ef20 <dmAdvHciHandler+0x68>
    ef16:	2306      	movs	r3, #6
    ef18:	480d      	ldr	r0, [pc, #52]	; (ef50 <dmAdvHciHandler+0x98>)
    ef1a:	7323      	strb	r3, [r4, #12]
    ef1c:	f00b fcac 	bl	1a878 <WsfTimerStartMs>
    ef20:	2314      	movs	r3, #20
    ef22:	70ab      	strb	r3, [r5, #2]
    ef24:	4b0b      	ldr	r3, [pc, #44]	; (ef54 <dmAdvHciHandler+0x9c>)
    ef26:	685b      	ldr	r3, [r3, #4]
    ef28:	4628      	mov	r0, r5
    ef2a:	689b      	ldr	r3, [r3, #8]
    ef2c:	4798      	blx	r3
    ef2e:	4b0b      	ldr	r3, [pc, #44]	; (ef5c <dmAdvHciHandler+0xa4>)
    ef30:	781b      	ldrb	r3, [r3, #0]
    ef32:	7523      	strb	r3, [r4, #20]
    ef34:	2301      	movs	r3, #1
    ef36:	e7dd      	b.n	eef4 <dmAdvHciHandler+0x3c>
    ef38:	2600      	movs	r6, #0
    ef3a:	e7e5      	b.n	ef08 <dmAdvHciHandler+0x50>
    ef3c:	2600      	movs	r6, #0
    ef3e:	e7c7      	b.n	eed0 <dmAdvHciHandler+0x18>
    ef40:	2b02      	cmp	r3, #2
    ef42:	d303      	bcc.n	ef4c <dmAdvHciHandler+0x94>
    ef44:	2b03      	cmp	r3, #3
    ef46:	d9f7      	bls.n	ef38 <dmAdvHciHandler+0x80>
    ef48:	2b04      	cmp	r3, #4
    ef4a:	d0f7      	beq.n	ef3c <dmAdvHciHandler+0x84>
    ef4c:	bd70      	pop	{r4, r5, r6, pc}
    ef4e:	bf00      	nop
    ef50:	10003c98 	.word	0x10003c98
    ef54:	10002b54 	.word	0x10002b54
    ef58:	10003e48 	.word	0x10003e48
    ef5c:	10003cb4 	.word	0x10003cb4

0000ef60 <dmAdvActClearSets>:
    ef60:	4770      	bx	lr

0000ef62 <dmAdvStartDirected>:
    ef62:	b510      	push	{r4, lr}
    ef64:	4c08      	ldr	r4, [pc, #32]	; (ef88 <dmAdvStartDirected+0x26>)
    ef66:	9a03      	ldr	r2, [sp, #12]
    ef68:	7de3      	ldrb	r3, [r4, #23]
    ef6a:	4608      	mov	r0, r1
    ef6c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ef70:	b943      	cbnz	r3, ef84 <dmAdvStartDirected+0x22>
    ef72:	f7ff ff15 	bl	eda0 <dmAdvConfig>
    ef76:	2302      	movs	r3, #2
    ef78:	75e3      	strb	r3, [r4, #23]
    ef7a:	2001      	movs	r0, #1
    ef7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef80:	f005 ba97 	b.w	144b2 <HciLeSetAdvEnableCmd>
    ef84:	bd10      	pop	{r4, pc}
    ef86:	bf00      	nop
    ef88:	10003c98 	.word	0x10003c98

0000ef8c <dmAdvStopDirected>:
    ef8c:	4b04      	ldr	r3, [pc, #16]	; (efa0 <dmAdvStopDirected+0x14>)
    ef8e:	7dda      	ldrb	r2, [r3, #23]
    ef90:	2a01      	cmp	r2, #1
    ef92:	d104      	bne.n	ef9e <dmAdvStopDirected+0x12>
    ef94:	2204      	movs	r2, #4
    ef96:	2000      	movs	r0, #0
    ef98:	75da      	strb	r2, [r3, #23]
    ef9a:	f005 ba8a 	b.w	144b2 <HciLeSetAdvEnableCmd>
    ef9e:	4770      	bx	lr
    efa0:	10003c98 	.word	0x10003c98

0000efa4 <dmAdvConnected>:
    efa4:	b510      	push	{r4, lr}
    efa6:	4c04      	ldr	r4, [pc, #16]	; (efb8 <dmAdvConnected+0x14>)
    efa8:	4620      	mov	r0, r4
    efaa:	f00b fc79 	bl	1a8a0 <WsfTimerStop>
    efae:	23ff      	movs	r3, #255	; 0xff
    efb0:	7523      	strb	r3, [r4, #20]
    efb2:	2300      	movs	r3, #0
    efb4:	75e3      	strb	r3, [r4, #23]
    efb6:	bd10      	pop	{r4, pc}
    efb8:	10003c98 	.word	0x10003c98

0000efbc <dmAdvConnectFailed>:
    efbc:	f7ff bff2 	b.w	efa4 <dmAdvConnected>

0000efc0 <DmAdvInit>:
    efc0:	b508      	push	{r3, lr}
    efc2:	f009 fdcd 	bl	18b60 <WsfTaskLock>
    efc6:	4b04      	ldr	r3, [pc, #16]	; (efd8 <DmAdvInit+0x18>)
    efc8:	4a04      	ldr	r2, [pc, #16]	; (efdc <DmAdvInit+0x1c>)
    efca:	601a      	str	r2, [r3, #0]
    efcc:	f7ff fd6e 	bl	eaac <dmAdvInit>
    efd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    efd4:	f009 bdca 	b.w	18b6c <WsfTaskUnlock>
    efd8:	10002b54 	.word	0x10002b54
    efdc:	00022f00 	.word	0x00022f00

0000efe0 <DmAdvModeLeg>:
    efe0:	4b03      	ldr	r3, [pc, #12]	; (eff0 <DmAdvModeLeg+0x10>)
    efe2:	6818      	ldr	r0, [r3, #0]
    efe4:	4b03      	ldr	r3, [pc, #12]	; (eff4 <DmAdvModeLeg+0x14>)
    efe6:	1ac3      	subs	r3, r0, r3
    efe8:	4258      	negs	r0, r3
    efea:	4158      	adcs	r0, r3
    efec:	4770      	bx	lr
    efee:	bf00      	nop
    eff0:	10002b54 	.word	0x10002b54
    eff4:	00022f00 	.word	0x00022f00

0000eff8 <dmConnSmActNone>:
    eff8:	4770      	bx	lr

0000effa <dmConnSmActHciUpdated>:
    effa:	2329      	movs	r3, #41	; 0x29
    effc:	708b      	strb	r3, [r1, #2]
    effe:	4b02      	ldr	r3, [pc, #8]	; (f008 <dmConnSmActHciUpdated+0xe>)
    f000:	4608      	mov	r0, r1
    f002:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f006:	4718      	bx	r3
    f008:	10003cb8 	.word	0x10003cb8

0000f00c <dmConnSmActClose>:
    f00c:	7909      	ldrb	r1, [r1, #4]
    f00e:	8980      	ldrh	r0, [r0, #12]
    f010:	f004 bec8 	b.w	13da4 <HciDisconnectCmd>

0000f014 <dmConnReset>:
    f014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f016:	2339      	movs	r3, #57	; 0x39
    f018:	4d14      	ldr	r5, [pc, #80]	; (f06c <dmConnReset+0x58>)
    f01a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f01e:	2400      	movs	r4, #0
    f020:	2316      	movs	r3, #22
    f022:	f88d 4008 	strb.w	r4, [sp, #8]
    f026:	f88d 300c 	strb.w	r3, [sp, #12]
    f02a:	462e      	mov	r6, r5
    f02c:	1928      	adds	r0, r5, r4
    f02e:	7d83      	ldrb	r3, [r0, #22]
    f030:	b13b      	cbz	r3, f042 <dmConnReset+0x2e>
    f032:	7c03      	ldrb	r3, [r0, #16]
    f034:	f8ad 300a 	strh.w	r3, [sp, #10]
    f038:	a901      	add	r1, sp, #4
    f03a:	f8ad 3004 	strh.w	r3, [sp, #4]
    f03e:	f000 fca1 	bl	f984 <dmConnSmExecute>
    f042:	342c      	adds	r4, #44	; 0x2c
    f044:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f048:	d1f0      	bne.n	f02c <dmConnReset+0x18>
    f04a:	4a09      	ldr	r2, [pc, #36]	; (f070 <dmConnReset+0x5c>)
    f04c:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    f050:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    f054:	6810      	ldr	r0, [r2, #0]
    f056:	6851      	ldr	r1, [r2, #4]
    f058:	4b06      	ldr	r3, [pc, #24]	; (f074 <dmConnReset+0x60>)
    f05a:	c303      	stmia	r3!, {r0, r1}
    f05c:	6890      	ldr	r0, [r2, #8]
    f05e:	6018      	str	r0, [r3, #0]
    f060:	4b05      	ldr	r3, [pc, #20]	; (f078 <dmConnReset+0x64>)
    f062:	2200      	movs	r2, #0
    f064:	74da      	strb	r2, [r3, #19]
    f066:	735a      	strb	r2, [r3, #13]
    f068:	b004      	add	sp, #16
    f06a:	bd70      	pop	{r4, r5, r6, pc}
    f06c:	10003cb8 	.word	0x10003cb8
    f070:	00022f0c 	.word	0x00022f0c
    f074:	10003e2c 	.word	0x10003e2c
    f078:	10003e48 	.word	0x10003e48

0000f07c <dmConnSetConnSpec>:
    f07c:	b538      	push	{r3, r4, r5, lr}
    f07e:	4605      	mov	r5, r0
    f080:	460c      	mov	r4, r1
    f082:	f009 fd6d 	bl	18b60 <WsfTaskLock>
    f086:	4628      	mov	r0, r5
    f088:	f000 fdc4 	bl	fc14 <DmInitPhyToIdx>
    f08c:	4a07      	ldr	r2, [pc, #28]	; (f0ac <dmConnSetConnSpec+0x30>)
    f08e:	6861      	ldr	r1, [r4, #4]
    f090:	230c      	movs	r3, #12
    f092:	fb03 2300 	mla	r3, r3, r0, r2
    f096:	6820      	ldr	r0, [r4, #0]
    f098:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    f09c:	c303      	stmia	r3!, {r0, r1}
    f09e:	68a0      	ldr	r0, [r4, #8]
    f0a0:	6018      	str	r0, [r3, #0]
    f0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f0a6:	f009 bd61 	b.w	18b6c <WsfTaskUnlock>
    f0aa:	bf00      	nop
    f0ac:	10003cb8 	.word	0x10003cb8

0000f0b0 <dmConnCcbAlloc>:
    f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0b2:	4c0f      	ldr	r4, [pc, #60]	; (f0f0 <dmConnCcbAlloc+0x40>)
    f0b4:	4607      	mov	r7, r0
    f0b6:	2500      	movs	r5, #0
    f0b8:	7da6      	ldrb	r6, [r4, #22]
    f0ba:	3501      	adds	r5, #1
    f0bc:	b2ed      	uxtb	r5, r5
    f0be:	b98e      	cbnz	r6, f0e4 <dmConnCcbAlloc+0x34>
    f0c0:	222c      	movs	r2, #44	; 0x2c
    f0c2:	4631      	mov	r1, r6
    f0c4:	4620      	mov	r0, r4
    f0c6:	f7fd f949 	bl	c35c <memset>
    f0ca:	4639      	mov	r1, r7
    f0cc:	4620      	mov	r0, r4
    f0ce:	f004 fcdf 	bl	13a90 <BdaCpy>
    f0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f0d6:	81a3      	strh	r3, [r4, #12]
    f0d8:	2301      	movs	r3, #1
    f0da:	7425      	strb	r5, [r4, #16]
    f0dc:	7466      	strb	r6, [r4, #17]
    f0de:	75a3      	strb	r3, [r4, #22]
    f0e0:	4620      	mov	r0, r4
    f0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0e4:	2d08      	cmp	r5, #8
    f0e6:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f0ea:	d1e5      	bne.n	f0b8 <dmConnCcbAlloc+0x8>
    f0ec:	2400      	movs	r4, #0
    f0ee:	e7f7      	b.n	f0e0 <dmConnCcbAlloc+0x30>
    f0f0:	10003cb8 	.word	0x10003cb8

0000f0f4 <dmConnCcbDealloc>:
    f0f4:	2300      	movs	r3, #0
    f0f6:	7583      	strb	r3, [r0, #22]
    f0f8:	4770      	bx	lr

0000f0fa <dmConnCcbByHandle>:
    f0fa:	b510      	push	{r4, lr}
    f0fc:	4907      	ldr	r1, [pc, #28]	; (f11c <dmConnCcbByHandle+0x22>)
    f0fe:	2200      	movs	r2, #0
    f100:	188b      	adds	r3, r1, r2
    f102:	7d9c      	ldrb	r4, [r3, #22]
    f104:	b114      	cbz	r4, f10c <dmConnCcbByHandle+0x12>
    f106:	899c      	ldrh	r4, [r3, #12]
    f108:	4284      	cmp	r4, r0
    f10a:	d004      	beq.n	f116 <dmConnCcbByHandle+0x1c>
    f10c:	322c      	adds	r2, #44	; 0x2c
    f10e:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f112:	d1f5      	bne.n	f100 <dmConnCcbByHandle+0x6>
    f114:	2300      	movs	r3, #0
    f116:	4618      	mov	r0, r3
    f118:	bd10      	pop	{r4, pc}
    f11a:	bf00      	nop
    f11c:	10003cb8 	.word	0x10003cb8

0000f120 <dmConn2HciHandler>:
    f120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f122:	4604      	mov	r4, r0
    f124:	8800      	ldrh	r0, [r0, #0]
    f126:	f7ff ffe8 	bl	f0fa <dmConnCcbByHandle>
    f12a:	b138      	cbz	r0, f13c <dmConn2HciHandler+0x1c>
    f12c:	78a3      	ldrb	r3, [r4, #2]
    f12e:	2b23      	cmp	r3, #35	; 0x23
    f130:	d02a      	beq.n	f188 <dmConn2HciHandler+0x68>
    f132:	d805      	bhi.n	f140 <dmConn2HciHandler+0x20>
    f134:	2b07      	cmp	r3, #7
    f136:	d00f      	beq.n	f158 <dmConn2HciHandler+0x38>
    f138:	2b0b      	cmp	r3, #11
    f13a:	d052      	beq.n	f1e2 <dmConn2HciHandler+0xc2>
    f13c:	b004      	add	sp, #16
    f13e:	bd10      	pop	{r4, pc}
    f140:	2b27      	cmp	r3, #39	; 0x27
    f142:	d037      	beq.n	f1b4 <dmConn2HciHandler+0x94>
    f144:	2b28      	cmp	r3, #40	; 0x28
    f146:	d042      	beq.n	f1ce <dmConn2HciHandler+0xae>
    f148:	2b24      	cmp	r3, #36	; 0x24
    f14a:	d1f7      	bne.n	f13c <dmConn2HciHandler+0x1c>
    f14c:	7c02      	ldrb	r2, [r0, #16]
    f14e:	8983      	ldrh	r3, [r0, #12]
    f150:	f8ad 2000 	strh.w	r2, [sp]
    f154:	2240      	movs	r2, #64	; 0x40
    f156:	e01c      	b.n	f192 <dmConn2HciHandler+0x72>
    f158:	8981      	ldrh	r1, [r0, #12]
    f15a:	7923      	ldrb	r3, [r4, #4]
    f15c:	7c00      	ldrb	r0, [r0, #16]
    f15e:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f162:	f8ad 0000 	strh.w	r0, [sp]
    f166:	2438      	movs	r4, #56	; 0x38
    f168:	f88d 4002 	strb.w	r4, [sp, #2]
    f16c:	f88d 3003 	strb.w	r3, [sp, #3]
    f170:	f88d 3004 	strb.w	r3, [sp, #4]
    f174:	f8ad 1006 	strh.w	r1, [sp, #6]
    f178:	f88d 2008 	strb.w	r2, [sp, #8]
    f17c:	4b26      	ldr	r3, [pc, #152]	; (f218 <dmConn2HciHandler+0xf8>)
    f17e:	4668      	mov	r0, sp
    f180:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f184:	4798      	blx	r3
    f186:	e7d9      	b.n	f13c <dmConn2HciHandler+0x1c>
    f188:	7c02      	ldrb	r2, [r0, #16]
    f18a:	8983      	ldrh	r3, [r0, #12]
    f18c:	f8ad 2000 	strh.w	r2, [sp]
    f190:	223f      	movs	r2, #63	; 0x3f
    f192:	f8ad 2002 	strh.w	r2, [sp, #2]
    f196:	f8ad 3004 	strh.w	r3, [sp, #4]
    f19a:	88e3      	ldrh	r3, [r4, #6]
    f19c:	f8ad 3006 	strh.w	r3, [sp, #6]
    f1a0:	8923      	ldrh	r3, [r4, #8]
    f1a2:	f8ad 3008 	strh.w	r3, [sp, #8]
    f1a6:	8963      	ldrh	r3, [r4, #10]
    f1a8:	f8ad 300a 	strh.w	r3, [sp, #10]
    f1ac:	89a3      	ldrh	r3, [r4, #12]
    f1ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    f1b2:	e7e3      	b.n	f17c <dmConn2HciHandler+0x5c>
    f1b4:	7c01      	ldrb	r1, [r0, #16]
    f1b6:	7923      	ldrb	r3, [r4, #4]
    f1b8:	88e2      	ldrh	r2, [r4, #6]
    f1ba:	f8ad 1000 	strh.w	r1, [sp]
    f1be:	2141      	movs	r1, #65	; 0x41
    f1c0:	f8ad 1002 	strh.w	r1, [sp, #2]
    f1c4:	f8ad 2006 	strh.w	r2, [sp, #6]
    f1c8:	f88d 3004 	strb.w	r3, [sp, #4]
    f1cc:	e7d6      	b.n	f17c <dmConn2HciHandler+0x5c>
    f1ce:	7c02      	ldrb	r2, [r0, #16]
    f1d0:	88a3      	ldrh	r3, [r4, #4]
    f1d2:	f8ad 2000 	strh.w	r2, [sp]
    f1d6:	2242      	movs	r2, #66	; 0x42
    f1d8:	f8ad 2002 	strh.w	r2, [sp, #2]
    f1dc:	f8ad 3004 	strh.w	r3, [sp, #4]
    f1e0:	e7cc      	b.n	f17c <dmConn2HciHandler+0x5c>
    f1e2:	7a62      	ldrb	r2, [r4, #9]
    f1e4:	7a23      	ldrb	r3, [r4, #8]
    f1e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f1ea:	7aa2      	ldrb	r2, [r4, #10]
    f1ec:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f1f0:	6283      	str	r3, [r0, #40]	; 0x28
    f1f2:	7c03      	ldrb	r3, [r0, #16]
    f1f4:	f8ad 3000 	strh.w	r3, [sp]
    f1f8:	2351      	movs	r3, #81	; 0x51
    f1fa:	f8ad 3002 	strh.w	r3, [sp, #2]
    f1fe:	7923      	ldrb	r3, [r4, #4]
    f200:	f88d 3004 	strb.w	r3, [sp, #4]
    f204:	88e3      	ldrh	r3, [r4, #6]
    f206:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f20a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f20e:	6861      	ldr	r1, [r4, #4]
    f210:	ab02      	add	r3, sp, #8
    f212:	c303      	stmia	r3!, {r0, r1}
    f214:	e7b2      	b.n	f17c <dmConn2HciHandler+0x5c>
    f216:	bf00      	nop
    f218:	10003cb8 	.word	0x10003cb8

0000f21c <dmConnCcbByBdAddr>:
    f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f21e:	4f0a      	ldr	r7, [pc, #40]	; (f248 <dmConnCcbByBdAddr+0x2c>)
    f220:	4606      	mov	r6, r0
    f222:	2500      	movs	r5, #0
    f224:	197c      	adds	r4, r7, r5
    f226:	7da3      	ldrb	r3, [r4, #22]
    f228:	b933      	cbnz	r3, f238 <dmConnCcbByBdAddr+0x1c>
    f22a:	352c      	adds	r5, #44	; 0x2c
    f22c:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f230:	d1f8      	bne.n	f224 <dmConnCcbByBdAddr+0x8>
    f232:	2400      	movs	r4, #0
    f234:	4620      	mov	r0, r4
    f236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f238:	4631      	mov	r1, r6
    f23a:	4620      	mov	r0, r4
    f23c:	f004 fc36 	bl	13aac <BdaCmp>
    f240:	2800      	cmp	r0, #0
    f242:	d0f2      	beq.n	f22a <dmConnCcbByBdAddr+0xe>
    f244:	e7f6      	b.n	f234 <dmConnCcbByBdAddr+0x18>
    f246:	bf00      	nop
    f248:	10003cb8 	.word	0x10003cb8

0000f24c <dmConnHciHandler>:
    f24c:	b538      	push	{r3, r4, r5, lr}
    f24e:	7884      	ldrb	r4, [r0, #2]
    f250:	1e63      	subs	r3, r4, #1
    f252:	2b01      	cmp	r3, #1
    f254:	4605      	mov	r5, r0
    f256:	d82d      	bhi.n	f2b4 <dmConnHciHandler+0x68>
    f258:	f100 040a 	add.w	r4, r0, #10
    f25c:	4620      	mov	r0, r4
    f25e:	f7ff ffdd 	bl	f21c <dmConnCcbByBdAddr>
    f262:	b9c8      	cbnz	r0, f298 <dmConnHciHandler+0x4c>
    f264:	4817      	ldr	r0, [pc, #92]	; (f2c4 <dmConnHciHandler+0x78>)
    f266:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f26a:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f26e:	7d83      	ldrb	r3, [r0, #22]
    f270:	b13b      	cbz	r3, f282 <dmConnHciHandler+0x36>
    f272:	7d43      	ldrb	r3, [r0, #21]
    f274:	2b02      	cmp	r3, #2
    f276:	d00f      	beq.n	f298 <dmConnHciHandler+0x4c>
    f278:	2b04      	cmp	r3, #4
    f27a:	d102      	bne.n	f282 <dmConnHciHandler+0x36>
    f27c:	8983      	ldrh	r3, [r0, #12]
    f27e:	428b      	cmp	r3, r1
    f280:	d00a      	beq.n	f298 <dmConnHciHandler+0x4c>
    f282:	302c      	adds	r0, #44	; 0x2c
    f284:	4290      	cmp	r0, r2
    f286:	d1f2      	bne.n	f26e <dmConnHciHandler+0x22>
    f288:	7a2b      	ldrb	r3, [r5, #8]
    f28a:	2b01      	cmp	r3, #1
    f28c:	d001      	beq.n	f292 <dmConnHciHandler+0x46>
    f28e:	2000      	movs	r0, #0
    f290:	e002      	b.n	f298 <dmConnHciHandler+0x4c>
    f292:	4620      	mov	r0, r4
    f294:	f7ff ff0c 	bl	f0b0 <dmConnCcbAlloc>
    f298:	78eb      	ldrb	r3, [r5, #3]
    f29a:	b94b      	cbnz	r3, f2b0 <dmConnHciHandler+0x64>
    f29c:	2338      	movs	r3, #56	; 0x38
    f29e:	70ab      	strb	r3, [r5, #2]
    f2a0:	b170      	cbz	r0, f2c0 <dmConnHciHandler+0x74>
    f2a2:	7c03      	ldrb	r3, [r0, #16]
    f2a4:	802b      	strh	r3, [r5, #0]
    f2a6:	4629      	mov	r1, r5
    f2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f2ac:	f000 bb6a 	b.w	f984 <dmConnSmExecute>
    f2b0:	2337      	movs	r3, #55	; 0x37
    f2b2:	e7f4      	b.n	f29e <dmConnHciHandler+0x52>
    f2b4:	8800      	ldrh	r0, [r0, #0]
    f2b6:	3436      	adds	r4, #54	; 0x36
    f2b8:	f7ff ff1f 	bl	f0fa <dmConnCcbByHandle>
    f2bc:	70ac      	strb	r4, [r5, #2]
    f2be:	e7ef      	b.n	f2a0 <dmConnHciHandler+0x54>
    f2c0:	bd38      	pop	{r3, r4, r5, pc}
    f2c2:	bf00      	nop
    f2c4:	10003cb8 	.word	0x10003cb8

0000f2c8 <dmConnCcbById>:
    f2c8:	3801      	subs	r0, #1
    f2ca:	4a05      	ldr	r2, [pc, #20]	; (f2e0 <dmConnCcbById+0x18>)
    f2cc:	b2c3      	uxtb	r3, r0
    f2ce:	212c      	movs	r1, #44	; 0x2c
    f2d0:	fb01 2003 	mla	r0, r1, r3, r2
    f2d4:	7d80      	ldrb	r0, [r0, #22]
    f2d6:	b108      	cbz	r0, f2dc <dmConnCcbById+0x14>
    f2d8:	fb03 2001 	mla	r0, r3, r1, r2
    f2dc:	4770      	bx	lr
    f2de:	bf00      	nop
    f2e0:	10003cb8 	.word	0x10003cb8

0000f2e4 <dmConnMsgHandler>:
    f2e4:	b510      	push	{r4, lr}
    f2e6:	4604      	mov	r4, r0
    f2e8:	7800      	ldrb	r0, [r0, #0]
    f2ea:	f7ff ffed 	bl	f2c8 <dmConnCcbById>
    f2ee:	b120      	cbz	r0, f2fa <dmConnMsgHandler+0x16>
    f2f0:	4621      	mov	r1, r4
    f2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2f6:	f000 bb45 	b.w	f984 <dmConnSmExecute>
    f2fa:	bd10      	pop	{r4, pc}

0000f2fc <dmConn2MsgHandler>:
    f2fc:	b530      	push	{r4, r5, lr}
    f2fe:	4604      	mov	r4, r0
    f300:	b085      	sub	sp, #20
    f302:	7800      	ldrb	r0, [r0, #0]
    f304:	f7ff ffe0 	bl	f2c8 <dmConnCcbById>
    f308:	b1d0      	cbz	r0, f340 <dmConn2MsgHandler+0x44>
    f30a:	78a3      	ldrb	r3, [r4, #2]
    f30c:	3b41      	subs	r3, #65	; 0x41
    f30e:	2b04      	cmp	r3, #4
    f310:	d816      	bhi.n	f340 <dmConn2MsgHandler+0x44>
    f312:	e8df f003 	tbb	[pc, r3]
    f316:	0903      	.short	0x0903
    f318:	1e17      	.short	0x1e17
    f31a:	26          	.byte	0x26
    f31b:	00          	.byte	0x00
    f31c:	8980      	ldrh	r0, [r0, #12]
    f31e:	b005      	add	sp, #20
    f320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f324:	f005 ba50 	b.w	147c8 <HciReadRssiCmd>
    f328:	89e5      	ldrh	r5, [r4, #14]
    f32a:	8923      	ldrh	r3, [r4, #8]
    f32c:	88e2      	ldrh	r2, [r4, #6]
    f32e:	88a1      	ldrh	r1, [r4, #4]
    f330:	8980      	ldrh	r0, [r0, #12]
    f332:	9502      	str	r5, [sp, #8]
    f334:	89a5      	ldrh	r5, [r4, #12]
    f336:	9501      	str	r5, [sp, #4]
    f338:	8964      	ldrh	r4, [r4, #10]
    f33a:	9400      	str	r4, [sp, #0]
    f33c:	f004 fe1f 	bl	13f7e <HciLeRemoteConnParamReqReply>
    f340:	b005      	add	sp, #20
    f342:	bd30      	pop	{r4, r5, pc}
    f344:	7921      	ldrb	r1, [r4, #4]
    f346:	8980      	ldrh	r0, [r0, #12]
    f348:	b005      	add	sp, #20
    f34a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f34e:	f004 be9a 	b.w	14086 <HciLeRemoteConnParamReqNegReply>
    f352:	88e2      	ldrh	r2, [r4, #6]
    f354:	88a1      	ldrh	r1, [r4, #4]
    f356:	8980      	ldrh	r0, [r0, #12]
    f358:	b005      	add	sp, #20
    f35a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f35e:	f004 bec0 	b.w	140e2 <HciLeSetDataLen>
    f362:	88a1      	ldrh	r1, [r4, #4]
    f364:	8980      	ldrh	r0, [r0, #12]
    f366:	b005      	add	sp, #20
    f368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f36c:	f005 babc 	b.w	148e8 <HciWriteAuthPayloadTimeout>

0000f370 <dmConnExecCback>:
    f370:	b570      	push	{r4, r5, r6, lr}
    f372:	4e06      	ldr	r6, [pc, #24]	; (f38c <dmConnExecCback+0x1c>)
    f374:	4605      	mov	r5, r0
    f376:	2400      	movs	r4, #0
    f378:	1933      	adds	r3, r6, r4
    f37a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f37e:	b10b      	cbz	r3, f384 <dmConnExecCback+0x14>
    f380:	4628      	mov	r0, r5
    f382:	4798      	blx	r3
    f384:	3404      	adds	r4, #4
    f386:	2c14      	cmp	r4, #20
    f388:	d1f6      	bne.n	f378 <dmConnExecCback+0x8>
    f38a:	bd70      	pop	{r4, r5, r6, pc}
    f38c:	10003cb8 	.word	0x10003cb8

0000f390 <dmConnSmActConnOpened>:
    f390:	b570      	push	{r4, r5, r6, lr}
    f392:	460d      	mov	r5, r1
    f394:	4604      	mov	r4, r0
    f396:	310a      	adds	r1, #10
    f398:	f004 fb7a 	bl	13a90 <BdaCpy>
    f39c:	88eb      	ldrh	r3, [r5, #6]
    f39e:	81a3      	strh	r3, [r4, #12]
    f3a0:	7a68      	ldrb	r0, [r5, #9]
    f3a2:	f000 fc07 	bl	fbb4 <DmHostAddrType>
    f3a6:	74e0      	strb	r0, [r4, #19]
    f3a8:	7a2a      	ldrb	r2, [r5, #8]
    f3aa:	7662      	strb	r2, [r4, #25]
    f3ac:	4b12      	ldr	r3, [pc, #72]	; (f3f8 <dmConnSmActConnOpened+0x68>)
    f3ae:	b9fa      	cbnz	r2, f3f0 <dmConnSmActConnOpened+0x60>
    f3b0:	7b5b      	ldrb	r3, [r3, #13]
    f3b2:	7523      	strb	r3, [r4, #20]
    f3b4:	7d23      	ldrb	r3, [r4, #20]
    f3b6:	1da6      	adds	r6, r4, #6
    f3b8:	b9e3      	cbnz	r3, f3f4 <dmConnSmActConnOpened+0x64>
    f3ba:	f006 f909 	bl	155d0 <HciGetBdAddr>
    f3be:	4601      	mov	r1, r0
    f3c0:	4630      	mov	r0, r6
    f3c2:	f004 fb65 	bl	13a90 <BdaCpy>
    f3c6:	f105 0117 	add.w	r1, r5, #23
    f3ca:	f104 001a 	add.w	r0, r4, #26
    f3ce:	f004 fb5f 	bl	13a90 <BdaCpy>
    f3d2:	f104 0020 	add.w	r0, r4, #32
    f3d6:	f105 011d 	add.w	r1, r5, #29
    f3da:	f004 fb59 	bl	13a90 <BdaCpy>
    f3de:	2300      	movs	r3, #0
    f3e0:	81e3      	strh	r3, [r4, #14]
    f3e2:	2327      	movs	r3, #39	; 0x27
    f3e4:	70ab      	strb	r3, [r5, #2]
    f3e6:	4628      	mov	r0, r5
    f3e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3ec:	f7ff bfc0 	b.w	f370 <dmConnExecCback>
    f3f0:	7b9b      	ldrb	r3, [r3, #14]
    f3f2:	e7de      	b.n	f3b2 <dmConnSmActConnOpened+0x22>
    f3f4:	4900      	ldr	r1, [pc, #0]	; (f3f8 <dmConnSmActConnOpened+0x68>)
    f3f6:	e7e3      	b.n	f3c0 <dmConnSmActConnOpened+0x30>
    f3f8:	10003e48 	.word	0x10003e48

0000f3fc <dmConnSmActConnFailed>:
    f3fc:	2300      	movs	r3, #0
    f3fe:	7583      	strb	r3, [r0, #22]
    f400:	2328      	movs	r3, #40	; 0x28
    f402:	708b      	strb	r3, [r1, #2]
    f404:	4608      	mov	r0, r1
    f406:	f7ff bfb3 	b.w	f370 <dmConnExecCback>

0000f40a <dmConnSmActConnClosed>:
    f40a:	2300      	movs	r3, #0
    f40c:	7583      	strb	r3, [r0, #22]
    f40e:	2328      	movs	r3, #40	; 0x28
    f410:	708b      	strb	r3, [r1, #2]
    f412:	4608      	mov	r0, r1
    f414:	f7ff bfac 	b.w	f370 <dmConnExecCback>

0000f418 <dmConnOpenAccept>:
    f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f41c:	4607      	mov	r7, r0
    f41e:	468a      	mov	sl, r1
    f420:	4691      	mov	r9, r2
    f422:	4698      	mov	r8, r3
    f424:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f428:	f009 fb9a 	bl	18b60 <WsfTaskLock>
    f42c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f42e:	f7ff fef5 	bl	f21c <dmConnCcbByBdAddr>
    f432:	4605      	mov	r5, r0
    f434:	b918      	cbnz	r0, f43e <dmConnOpenAccept+0x26>
    f436:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f438:	f7ff fe3a 	bl	f0b0 <dmConnCcbAlloc>
    f43c:	4605      	mov	r5, r0
    f43e:	f009 fb95 	bl	18b6c <WsfTaskUnlock>
    f442:	b39d      	cbz	r5, f4ac <dmConnOpenAccept+0x94>
    f444:	2014      	movs	r0, #20
    f446:	f00b f84c 	bl	1a4e2 <WsfMsgAlloc>
    f44a:	4604      	mov	r4, r0
    f44c:	b338      	cbz	r0, f49e <dmConnOpenAccept+0x86>
    f44e:	7c2b      	ldrb	r3, [r5, #16]
    f450:	8003      	strh	r3, [r0, #0]
    f452:	2e00      	cmp	r6, #0
    f454:	bf0c      	ite	eq
    f456:	2330      	moveq	r3, #48	; 0x30
    f458:	2332      	movne	r3, #50	; 0x32
    f45a:	7083      	strb	r3, [r0, #2]
    f45c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f460:	8103      	strh	r3, [r0, #8]
    f462:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f466:	7283      	strb	r3, [r0, #10]
    f468:	f880 a004 	strb.w	sl, [r0, #4]
    f46c:	f880 9005 	strb.w	r9, [r0, #5]
    f470:	f880 8006 	strb.w	r8, [r0, #6]
    f474:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f476:	300b      	adds	r0, #11
    f478:	f004 fb0a 	bl	13a90 <BdaCpy>
    f47c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f480:	7463      	strb	r3, [r4, #17]
    f482:	4b0b      	ldr	r3, [pc, #44]	; (f4b0 <dmConnOpenAccept+0x98>)
    f484:	74a7      	strb	r7, [r4, #18]
    f486:	7b18      	ldrb	r0, [r3, #12]
    f488:	4621      	mov	r1, r4
    f48a:	f00b f84e 	bl	1a52a <WsfMsgSend>
    f48e:	f009 fb67 	bl	18b60 <WsfTaskLock>
    f492:	766e      	strb	r6, [r5, #25]
    f494:	f009 fb6a 	bl	18b6c <WsfTaskUnlock>
    f498:	7c28      	ldrb	r0, [r5, #16]
    f49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f49e:	f009 fb5f 	bl	18b60 <WsfTaskLock>
    f4a2:	75ac      	strb	r4, [r5, #22]
    f4a4:	f009 fb62 	bl	18b6c <WsfTaskUnlock>
    f4a8:	4620      	mov	r0, r4
    f4aa:	e7f6      	b.n	f49a <dmConnOpenAccept+0x82>
    f4ac:	4628      	mov	r0, r5
    f4ae:	e7f4      	b.n	f49a <dmConnOpenAccept+0x82>
    f4b0:	10003e48 	.word	0x10003e48

0000f4b4 <DmConnInit>:
    f4b4:	4b05      	ldr	r3, [pc, #20]	; (f4cc <DmConnInit+0x18>)
    f4b6:	4a06      	ldr	r2, [pc, #24]	; (f4d0 <DmConnInit+0x1c>)
    f4b8:	f103 010c 	add.w	r1, r3, #12
    f4bc:	60d1      	str	r1, [r2, #12]
    f4be:	f103 0118 	add.w	r1, r3, #24
    f4c2:	6111      	str	r1, [r2, #16]
    f4c4:	4a03      	ldr	r2, [pc, #12]	; (f4d4 <DmConnInit+0x20>)
    f4c6:	3324      	adds	r3, #36	; 0x24
    f4c8:	6013      	str	r3, [r2, #0]
    f4ca:	4770      	bx	lr
    f4cc:	00022f0c 	.word	0x00022f0c
    f4d0:	10002b54 	.word	0x10002b54
    f4d4:	10003e3c 	.word	0x10003e3c

0000f4d8 <DmConnRegister>:
    f4d8:	b538      	push	{r3, r4, r5, lr}
    f4da:	4604      	mov	r4, r0
    f4dc:	460d      	mov	r5, r1
    f4de:	3458      	adds	r4, #88	; 0x58
    f4e0:	f009 fb3e 	bl	18b60 <WsfTaskLock>
    f4e4:	4b03      	ldr	r3, [pc, #12]	; (f4f4 <DmConnRegister+0x1c>)
    f4e6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    f4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f4ee:	f009 bb3d 	b.w	18b6c <WsfTaskUnlock>
    f4f2:	bf00      	nop
    f4f4:	10003cb8 	.word	0x10003cb8

0000f4f8 <DmConnClose>:
    f4f8:	b570      	push	{r4, r5, r6, lr}
    f4fa:	4604      	mov	r4, r0
    f4fc:	2006      	movs	r0, #6
    f4fe:	460e      	mov	r6, r1
    f500:	4615      	mov	r5, r2
    f502:	f00a ffee 	bl	1a4e2 <WsfMsgAlloc>
    f506:	b158      	cbz	r0, f520 <DmConnClose+0x28>
    f508:	2331      	movs	r3, #49	; 0x31
    f50a:	7083      	strb	r3, [r0, #2]
    f50c:	4b05      	ldr	r3, [pc, #20]	; (f524 <DmConnClose+0x2c>)
    f50e:	8006      	strh	r6, [r0, #0]
    f510:	7105      	strb	r5, [r0, #4]
    f512:	7144      	strb	r4, [r0, #5]
    f514:	4601      	mov	r1, r0
    f516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f51a:	7b18      	ldrb	r0, [r3, #12]
    f51c:	f00b b805 	b.w	1a52a <WsfMsgSend>
    f520:	bd70      	pop	{r4, r5, r6, pc}
    f522:	bf00      	nop
    f524:	10003e48 	.word	0x10003e48

0000f528 <DmReadRemoteFeatures>:
    f528:	b508      	push	{r3, lr}
    f52a:	f7ff fecd 	bl	f2c8 <dmConnCcbById>
    f52e:	b120      	cbz	r0, f53a <DmReadRemoteFeatures+0x12>
    f530:	8980      	ldrh	r0, [r0, #12]
    f532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f536:	f004 bf4b 	b.w	143d0 <HciLeReadRemoteFeatCmd>
    f53a:	bd08      	pop	{r3, pc}

0000f53c <DmConnUpdate>:
    f53c:	b538      	push	{r3, r4, r5, lr}
    f53e:	4605      	mov	r5, r0
    f540:	2010      	movs	r0, #16
    f542:	460c      	mov	r4, r1
    f544:	f00a ffcd 	bl	1a4e2 <WsfMsgAlloc>
    f548:	b1d0      	cbz	r0, f580 <DmConnUpdate+0x44>
    f54a:	4a0e      	ldr	r2, [pc, #56]	; (f584 <DmConnUpdate+0x48>)
    f54c:	1e6b      	subs	r3, r5, #1
    f54e:	212c      	movs	r1, #44	; 0x2c
    f550:	fb01 2303 	mla	r3, r1, r3, r2
    f554:	4602      	mov	r2, r0
    f556:	7e5b      	ldrb	r3, [r3, #25]
    f558:	2b00      	cmp	r3, #0
    f55a:	bf0c      	ite	eq
    f55c:	2333      	moveq	r3, #51	; 0x33
    f55e:	2334      	movne	r3, #52	; 0x34
    f560:	7083      	strb	r3, [r0, #2]
    f562:	f822 5b04 	strh.w	r5, [r2], #4
    f566:	6823      	ldr	r3, [r4, #0]
    f568:	6043      	str	r3, [r0, #4]
    f56a:	6863      	ldr	r3, [r4, #4]
    f56c:	6053      	str	r3, [r2, #4]
    f56e:	68a3      	ldr	r3, [r4, #8]
    f570:	6093      	str	r3, [r2, #8]
    f572:	4b05      	ldr	r3, [pc, #20]	; (f588 <DmConnUpdate+0x4c>)
    f574:	4601      	mov	r1, r0
    f576:	7b18      	ldrb	r0, [r3, #12]
    f578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f57c:	f00a bfd5 	b.w	1a52a <WsfMsgSend>
    f580:	bd38      	pop	{r3, r4, r5, pc}
    f582:	bf00      	nop
    f584:	10003cb8 	.word	0x10003cb8
    f588:	10003e48 	.word	0x10003e48

0000f58c <DmConnSetScanInterval>:
    f58c:	b538      	push	{r3, r4, r5, lr}
    f58e:	4605      	mov	r5, r0
    f590:	460c      	mov	r4, r1
    f592:	f009 fae5 	bl	18b60 <WsfTaskLock>
    f596:	2001      	movs	r0, #1
    f598:	f000 fb3c 	bl	fc14 <DmInitPhyToIdx>
    f59c:	4b05      	ldr	r3, [pc, #20]	; (f5b4 <DmConnSetScanInterval+0x28>)
    f59e:	30c0      	adds	r0, #192	; 0xc0
    f5a0:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    f5a4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f5a8:	805c      	strh	r4, [r3, #2]
    f5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f5ae:	f009 badd 	b.w	18b6c <WsfTaskUnlock>
    f5b2:	bf00      	nop
    f5b4:	10003cb8 	.word	0x10003cb8

0000f5b8 <DmExtConnSetScanInterval>:
    f5b8:	b570      	push	{r4, r5, r6, lr}
    f5ba:	2400      	movs	r4, #0
    f5bc:	fa40 f304 	asr.w	r3, r0, r4
    f5c0:	07db      	lsls	r3, r3, #31
    f5c2:	d515      	bpl.n	f5f0 <DmExtConnSetScanInterval+0x38>
    f5c4:	880e      	ldrh	r6, [r1, #0]
    f5c6:	8815      	ldrh	r5, [r2, #0]
    f5c8:	f009 faca 	bl	18b60 <WsfTaskLock>
    f5cc:	2001      	movs	r0, #1
    f5ce:	40a0      	lsls	r0, r4
    f5d0:	b2c0      	uxtb	r0, r0
    f5d2:	f000 fb1f 	bl	fc14 <DmInitPhyToIdx>
    f5d6:	4b08      	ldr	r3, [pc, #32]	; (f5f8 <DmExtConnSetScanInterval+0x40>)
    f5d8:	30c0      	adds	r0, #192	; 0xc0
    f5da:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f5de:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f5e2:	805d      	strh	r5, [r3, #2]
    f5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f5e8:	f009 bac0 	b.w	18b6c <WsfTaskUnlock>
    f5ec:	3401      	adds	r4, #1
    f5ee:	e7e5      	b.n	f5bc <DmExtConnSetScanInterval+0x4>
    f5f0:	2c07      	cmp	r4, #7
    f5f2:	d1fb      	bne.n	f5ec <DmExtConnSetScanInterval+0x34>
    f5f4:	bd70      	pop	{r4, r5, r6, pc}
    f5f6:	bf00      	nop
    f5f8:	10003cb8 	.word	0x10003cb8

0000f5fc <DmConnSetConnSpec>:
    f5fc:	4601      	mov	r1, r0
    f5fe:	2001      	movs	r0, #1
    f600:	e53c      	b.n	f07c <dmConnSetConnSpec>

0000f602 <DmExtConnSetConnSpec>:
    f602:	2300      	movs	r3, #0
    f604:	fa40 f203 	asr.w	r2, r0, r3
    f608:	07d2      	lsls	r2, r2, #31
    f60a:	d505      	bpl.n	f618 <DmExtConnSetConnSpec+0x16>
    f60c:	2001      	movs	r0, #1
    f60e:	4098      	lsls	r0, r3
    f610:	b2c0      	uxtb	r0, r0
    f612:	e533      	b.n	f07c <dmConnSetConnSpec>
    f614:	3301      	adds	r3, #1
    f616:	e7f5      	b.n	f604 <DmExtConnSetConnSpec+0x2>
    f618:	2b07      	cmp	r3, #7
    f61a:	d1fb      	bne.n	f614 <DmExtConnSetConnSpec+0x12>
    f61c:	4770      	bx	lr

0000f61e <DmConnReadRssi>:
    f61e:	b510      	push	{r4, lr}
    f620:	4604      	mov	r4, r0
    f622:	2004      	movs	r0, #4
    f624:	f00a ff5d 	bl	1a4e2 <WsfMsgAlloc>
    f628:	4601      	mov	r1, r0
    f62a:	b140      	cbz	r0, f63e <DmConnReadRssi+0x20>
    f62c:	2341      	movs	r3, #65	; 0x41
    f62e:	7083      	strb	r3, [r0, #2]
    f630:	4b03      	ldr	r3, [pc, #12]	; (f640 <DmConnReadRssi+0x22>)
    f632:	8004      	strh	r4, [r0, #0]
    f634:	7b18      	ldrb	r0, [r3, #12]
    f636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f63a:	f00a bf76 	b.w	1a52a <WsfMsgSend>
    f63e:	bd10      	pop	{r4, pc}
    f640:	10003e48 	.word	0x10003e48

0000f644 <DmRemoteConnParamReqReply>:
    f644:	b538      	push	{r3, r4, r5, lr}
    f646:	4605      	mov	r5, r0
    f648:	2010      	movs	r0, #16
    f64a:	460c      	mov	r4, r1
    f64c:	f00a ff49 	bl	1a4e2 <WsfMsgAlloc>
    f650:	b188      	cbz	r0, f676 <DmRemoteConnParamReqReply+0x32>
    f652:	4602      	mov	r2, r0
    f654:	2342      	movs	r3, #66	; 0x42
    f656:	7083      	strb	r3, [r0, #2]
    f658:	f822 5b04 	strh.w	r5, [r2], #4
    f65c:	6823      	ldr	r3, [r4, #0]
    f65e:	6043      	str	r3, [r0, #4]
    f660:	6863      	ldr	r3, [r4, #4]
    f662:	6053      	str	r3, [r2, #4]
    f664:	68a3      	ldr	r3, [r4, #8]
    f666:	6093      	str	r3, [r2, #8]
    f668:	4b03      	ldr	r3, [pc, #12]	; (f678 <DmRemoteConnParamReqReply+0x34>)
    f66a:	4601      	mov	r1, r0
    f66c:	7b18      	ldrb	r0, [r3, #12]
    f66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f672:	f00a bf5a 	b.w	1a52a <WsfMsgSend>
    f676:	bd38      	pop	{r3, r4, r5, pc}
    f678:	10003e48 	.word	0x10003e48

0000f67c <DmRemoteConnParamReqNegReply>:
    f67c:	b538      	push	{r3, r4, r5, lr}
    f67e:	4605      	mov	r5, r0
    f680:	2006      	movs	r0, #6
    f682:	460c      	mov	r4, r1
    f684:	f00a ff2d 	bl	1a4e2 <WsfMsgAlloc>
    f688:	b150      	cbz	r0, f6a0 <DmRemoteConnParamReqNegReply+0x24>
    f68a:	2343      	movs	r3, #67	; 0x43
    f68c:	7083      	strb	r3, [r0, #2]
    f68e:	4b05      	ldr	r3, [pc, #20]	; (f6a4 <DmRemoteConnParamReqNegReply+0x28>)
    f690:	8005      	strh	r5, [r0, #0]
    f692:	7104      	strb	r4, [r0, #4]
    f694:	4601      	mov	r1, r0
    f696:	7b18      	ldrb	r0, [r3, #12]
    f698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f69c:	f00a bf45 	b.w	1a52a <WsfMsgSend>
    f6a0:	bd38      	pop	{r3, r4, r5, pc}
    f6a2:	bf00      	nop
    f6a4:	10003e48 	.word	0x10003e48

0000f6a8 <DmConnSetDataLen>:
    f6a8:	b570      	push	{r4, r5, r6, lr}
    f6aa:	4606      	mov	r6, r0
    f6ac:	2008      	movs	r0, #8
    f6ae:	460d      	mov	r5, r1
    f6b0:	4614      	mov	r4, r2
    f6b2:	f00a ff16 	bl	1a4e2 <WsfMsgAlloc>
    f6b6:	b158      	cbz	r0, f6d0 <DmConnSetDataLen+0x28>
    f6b8:	2344      	movs	r3, #68	; 0x44
    f6ba:	7083      	strb	r3, [r0, #2]
    f6bc:	4b05      	ldr	r3, [pc, #20]	; (f6d4 <DmConnSetDataLen+0x2c>)
    f6be:	8006      	strh	r6, [r0, #0]
    f6c0:	8085      	strh	r5, [r0, #4]
    f6c2:	80c4      	strh	r4, [r0, #6]
    f6c4:	4601      	mov	r1, r0
    f6c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6ca:	7b18      	ldrb	r0, [r3, #12]
    f6cc:	f00a bf2d 	b.w	1a52a <WsfMsgSend>
    f6d0:	bd70      	pop	{r4, r5, r6, pc}
    f6d2:	bf00      	nop
    f6d4:	10003e48 	.word	0x10003e48

0000f6d8 <DmWriteAuthPayloadTimeout>:
    f6d8:	b538      	push	{r3, r4, r5, lr}
    f6da:	4605      	mov	r5, r0
    f6dc:	2006      	movs	r0, #6
    f6de:	460c      	mov	r4, r1
    f6e0:	f00a feff 	bl	1a4e2 <WsfMsgAlloc>
    f6e4:	b150      	cbz	r0, f6fc <DmWriteAuthPayloadTimeout+0x24>
    f6e6:	2345      	movs	r3, #69	; 0x45
    f6e8:	7083      	strb	r3, [r0, #2]
    f6ea:	4b05      	ldr	r3, [pc, #20]	; (f700 <DmWriteAuthPayloadTimeout+0x28>)
    f6ec:	8005      	strh	r5, [r0, #0]
    f6ee:	8084      	strh	r4, [r0, #4]
    f6f0:	4601      	mov	r1, r0
    f6f2:	7b18      	ldrb	r0, [r3, #12]
    f6f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f6f8:	f00a bf17 	b.w	1a52a <WsfMsgSend>
    f6fc:	bd38      	pop	{r3, r4, r5, pc}
    f6fe:	bf00      	nop
    f700:	10003e48 	.word	0x10003e48

0000f704 <DmConnIdByHandle>:
    f704:	b510      	push	{r4, lr}
    f706:	4908      	ldr	r1, [pc, #32]	; (f728 <DmConnIdByHandle+0x24>)
    f708:	2300      	movs	r3, #0
    f70a:	18ca      	adds	r2, r1, r3
    f70c:	7d94      	ldrb	r4, [r2, #22]
    f70e:	b124      	cbz	r4, f71a <DmConnIdByHandle+0x16>
    f710:	8994      	ldrh	r4, [r2, #12]
    f712:	4284      	cmp	r4, r0
    f714:	d101      	bne.n	f71a <DmConnIdByHandle+0x16>
    f716:	7c10      	ldrb	r0, [r2, #16]
    f718:	bd10      	pop	{r4, pc}
    f71a:	332c      	adds	r3, #44	; 0x2c
    f71c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    f720:	d1f3      	bne.n	f70a <DmConnIdByHandle+0x6>
    f722:	2000      	movs	r0, #0
    f724:	e7f8      	b.n	f718 <DmConnIdByHandle+0x14>
    f726:	bf00      	nop
    f728:	10003cb8 	.word	0x10003cb8

0000f72c <DmConnInUse>:
    f72c:	4b03      	ldr	r3, [pc, #12]	; (f73c <DmConnInUse+0x10>)
    f72e:	222c      	movs	r2, #44	; 0x2c
    f730:	3801      	subs	r0, #1
    f732:	fb02 3000 	mla	r0, r2, r0, r3
    f736:	7d80      	ldrb	r0, [r0, #22]
    f738:	4770      	bx	lr
    f73a:	bf00      	nop
    f73c:	10003cb8 	.word	0x10003cb8

0000f740 <DmConnPeerAddrType>:
    f740:	4b03      	ldr	r3, [pc, #12]	; (f750 <DmConnPeerAddrType+0x10>)
    f742:	222c      	movs	r2, #44	; 0x2c
    f744:	3801      	subs	r0, #1
    f746:	fb02 3000 	mla	r0, r2, r0, r3
    f74a:	7cc0      	ldrb	r0, [r0, #19]
    f74c:	4770      	bx	lr
    f74e:	bf00      	nop
    f750:	10003cb8 	.word	0x10003cb8

0000f754 <DmConnPeerAddr>:
    f754:	4b02      	ldr	r3, [pc, #8]	; (f760 <DmConnPeerAddr+0xc>)
    f756:	222c      	movs	r2, #44	; 0x2c
    f758:	3801      	subs	r0, #1
    f75a:	fb02 3000 	mla	r0, r2, r0, r3
    f75e:	4770      	bx	lr
    f760:	10003cb8 	.word	0x10003cb8

0000f764 <DmConnLocalAddrType>:
    f764:	4b03      	ldr	r3, [pc, #12]	; (f774 <DmConnLocalAddrType+0x10>)
    f766:	222c      	movs	r2, #44	; 0x2c
    f768:	3801      	subs	r0, #1
    f76a:	fb02 3000 	mla	r0, r2, r0, r3
    f76e:	7d00      	ldrb	r0, [r0, #20]
    f770:	4770      	bx	lr
    f772:	bf00      	nop
    f774:	10003cb8 	.word	0x10003cb8

0000f778 <DmConnLocalAddr>:
    f778:	4b03      	ldr	r3, [pc, #12]	; (f788 <DmConnLocalAddr+0x10>)
    f77a:	222c      	movs	r2, #44	; 0x2c
    f77c:	3801      	subs	r0, #1
    f77e:	fb02 3000 	mla	r0, r2, r0, r3
    f782:	3006      	adds	r0, #6
    f784:	4770      	bx	lr
    f786:	bf00      	nop
    f788:	10003cb8 	.word	0x10003cb8

0000f78c <DmConnPeerRpa>:
    f78c:	4b03      	ldr	r3, [pc, #12]	; (f79c <DmConnPeerRpa+0x10>)
    f78e:	222c      	movs	r2, #44	; 0x2c
    f790:	3801      	subs	r0, #1
    f792:	fb02 3000 	mla	r0, r2, r0, r3
    f796:	3020      	adds	r0, #32
    f798:	4770      	bx	lr
    f79a:	bf00      	nop
    f79c:	10003cb8 	.word	0x10003cb8

0000f7a0 <DmConnLocalRpa>:
    f7a0:	4b03      	ldr	r3, [pc, #12]	; (f7b0 <DmConnLocalRpa+0x10>)
    f7a2:	222c      	movs	r2, #44	; 0x2c
    f7a4:	3801      	subs	r0, #1
    f7a6:	fb02 3000 	mla	r0, r2, r0, r3
    f7aa:	301a      	adds	r0, #26
    f7ac:	4770      	bx	lr
    f7ae:	bf00      	nop
    f7b0:	10003cb8 	.word	0x10003cb8

0000f7b4 <DmConnSecLevel>:
    f7b4:	4b03      	ldr	r3, [pc, #12]	; (f7c4 <DmConnSecLevel+0x10>)
    f7b6:	222c      	movs	r2, #44	; 0x2c
    f7b8:	3801      	subs	r0, #1
    f7ba:	fb02 3000 	mla	r0, r2, r0, r3
    f7be:	7dc0      	ldrb	r0, [r0, #23]
    f7c0:	4770      	bx	lr
    f7c2:	bf00      	nop
    f7c4:	10003cb8 	.word	0x10003cb8

0000f7c8 <DmConnSetIdle>:
    f7c8:	b570      	push	{r4, r5, r6, lr}
    f7ca:	4604      	mov	r4, r0
    f7cc:	4616      	mov	r6, r2
    f7ce:	460d      	mov	r5, r1
    f7d0:	f009 f9c6 	bl	18b60 <WsfTaskLock>
    f7d4:	4b08      	ldr	r3, [pc, #32]	; (f7f8 <DmConnSetIdle+0x30>)
    f7d6:	1e60      	subs	r0, r4, #1
    f7d8:	222c      	movs	r2, #44	; 0x2c
    f7da:	fb02 3000 	mla	r0, r2, r0, r3
    f7de:	7d83      	ldrb	r3, [r0, #22]
    f7e0:	b123      	cbz	r3, f7ec <DmConnSetIdle+0x24>
    f7e2:	89c1      	ldrh	r1, [r0, #14]
    f7e4:	b936      	cbnz	r6, f7f4 <DmConnSetIdle+0x2c>
    f7e6:	ea21 0505 	bic.w	r5, r1, r5
    f7ea:	81c5      	strh	r5, [r0, #14]
    f7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f7f0:	f009 b9bc 	b.w	18b6c <WsfTaskUnlock>
    f7f4:	430d      	orrs	r5, r1
    f7f6:	e7f8      	b.n	f7ea <DmConnSetIdle+0x22>
    f7f8:	10003cb8 	.word	0x10003cb8

0000f7fc <DmConnCheckIdle>:
    f7fc:	b510      	push	{r4, lr}
    f7fe:	4604      	mov	r4, r0
    f800:	f009 f9ae 	bl	18b60 <WsfTaskLock>
    f804:	4804      	ldr	r0, [pc, #16]	; (f818 <DmConnCheckIdle+0x1c>)
    f806:	232c      	movs	r3, #44	; 0x2c
    f808:	3c01      	subs	r4, #1
    f80a:	fb03 0404 	mla	r4, r3, r4, r0
    f80e:	89e4      	ldrh	r4, [r4, #14]
    f810:	f009 f9ac 	bl	18b6c <WsfTaskUnlock>
    f814:	4620      	mov	r0, r4
    f816:	bd10      	pop	{r4, pc}
    f818:	10003cb8 	.word	0x10003cb8

0000f81c <DmConnRole>:
    f81c:	4b03      	ldr	r3, [pc, #12]	; (f82c <DmConnRole+0x10>)
    f81e:	222c      	movs	r2, #44	; 0x2c
    f820:	3801      	subs	r0, #1
    f822:	fb02 3000 	mla	r0, r2, r0, r3
    f826:	7e40      	ldrb	r0, [r0, #25]
    f828:	4770      	bx	lr
    f82a:	bf00      	nop
    f82c:	10003cb8 	.word	0x10003cb8

0000f830 <dmConnSmActUpdateSlave>:
    f830:	b530      	push	{r4, r5, lr}
    f832:	6a83      	ldr	r3, [r0, #40]	; 0x28
    f834:	079a      	lsls	r2, r3, #30
    f836:	b085      	sub	sp, #20
    f838:	4604      	mov	r4, r0
    f83a:	460d      	mov	r5, r1
    f83c:	d509      	bpl.n	f852 <dmConnSmActUpdateSlave+0x22>
    f83e:	f005 fedd 	bl	155fc <HciGetLeSupFeat>
    f842:	0783      	lsls	r3, r0, #30
    f844:	d505      	bpl.n	f852 <dmConnSmActUpdateSlave+0x22>
    f846:	1d29      	adds	r1, r5, #4
    f848:	89a0      	ldrh	r0, [r4, #12]
    f84a:	f004 fb11 	bl	13e70 <HciLeConnUpdateCmd>
    f84e:	b005      	add	sp, #20
    f850:	bd30      	pop	{r4, r5, pc}
    f852:	7c63      	ldrb	r3, [r4, #17]
    f854:	89a0      	ldrh	r0, [r4, #12]
    f856:	b92b      	cbnz	r3, f864 <dmConnSmActUpdateSlave+0x34>
    f858:	2301      	movs	r3, #1
    f85a:	7463      	strb	r3, [r4, #17]
    f85c:	1d29      	adds	r1, r5, #4
    f85e:	f000 ff09 	bl	10674 <L2cDmConnUpdateReq>
    f862:	e7f4      	b.n	f84e <dmConnSmActUpdateSlave+0x1e>
    f864:	7c23      	ldrb	r3, [r4, #16]
    f866:	f8ad 3000 	strh.w	r3, [sp]
    f86a:	f640 4329 	movw	r3, #3113	; 0xc29
    f86e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f872:	230c      	movs	r3, #12
    f874:	f88d 3004 	strb.w	r3, [sp, #4]
    f878:	4b03      	ldr	r3, [pc, #12]	; (f888 <dmConnSmActUpdateSlave+0x58>)
    f87a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f87e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f882:	4668      	mov	r0, sp
    f884:	4798      	blx	r3
    f886:	e7e2      	b.n	f84e <dmConnSmActUpdateSlave+0x1e>
    f888:	10003cb8 	.word	0x10003cb8

0000f88c <dmConnSmActL2cUpdateCnf>:
    f88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f88e:	7c43      	ldrb	r3, [r0, #17]
    f890:	b1b3      	cbz	r3, f8c0 <dmConnSmActL2cUpdateCnf+0x34>
    f892:	2300      	movs	r3, #0
    f894:	7443      	strb	r3, [r0, #17]
    f896:	888b      	ldrh	r3, [r1, #4]
    f898:	b193      	cbz	r3, f8c0 <dmConnSmActL2cUpdateCnf+0x34>
    f89a:	b2db      	uxtb	r3, r3
    f89c:	f88d 3003 	strb.w	r3, [sp, #3]
    f8a0:	f88d 3004 	strb.w	r3, [sp, #4]
    f8a4:	4b08      	ldr	r3, [pc, #32]	; (f8c8 <dmConnSmActL2cUpdateCnf+0x3c>)
    f8a6:	8982      	ldrh	r2, [r0, #12]
    f8a8:	7c01      	ldrb	r1, [r0, #16]
    f8aa:	f8ad 1000 	strh.w	r1, [sp]
    f8ae:	2029      	movs	r0, #41	; 0x29
    f8b0:	f88d 0002 	strb.w	r0, [sp, #2]
    f8b4:	f8ad 2006 	strh.w	r2, [sp, #6]
    f8b8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f8bc:	4668      	mov	r0, sp
    f8be:	4798      	blx	r3
    f8c0:	b005      	add	sp, #20
    f8c2:	f85d fb04 	ldr.w	pc, [sp], #4
    f8c6:	bf00      	nop
    f8c8:	10003cb8 	.word	0x10003cb8

0000f8cc <DmL2cConnUpdateCnf>:
    f8cc:	b513      	push	{r0, r1, r4, lr}
    f8ce:	460c      	mov	r4, r1
    f8d0:	f7ff fc13 	bl	f0fa <dmConnCcbByHandle>
    f8d4:	b138      	cbz	r0, f8e6 <DmL2cConnUpdateCnf+0x1a>
    f8d6:	2336      	movs	r3, #54	; 0x36
    f8d8:	4669      	mov	r1, sp
    f8da:	f88d 3002 	strb.w	r3, [sp, #2]
    f8de:	f8ad 4004 	strh.w	r4, [sp, #4]
    f8e2:	f000 f84f 	bl	f984 <dmConnSmExecute>
    f8e6:	b002      	add	sp, #8
    f8e8:	bd10      	pop	{r4, pc}

0000f8ea <DmConnAccept>:
    f8ea:	b510      	push	{r4, lr}
    f8ec:	b086      	sub	sp, #24
    f8ee:	2401      	movs	r4, #1
    f8f0:	9404      	str	r4, [sp, #16]
    f8f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f8f4:	9403      	str	r4, [sp, #12]
    f8f6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    f8fa:	9402      	str	r4, [sp, #8]
    f8fc:	f89d 4020 	ldrb.w	r4, [sp, #32]
    f900:	e9cd 3400 	strd	r3, r4, [sp]
    f904:	4613      	mov	r3, r2
    f906:	460a      	mov	r2, r1
    f908:	2100      	movs	r1, #0
    f90a:	f7ff fd85 	bl	f418 <dmConnOpenAccept>
    f90e:	b006      	add	sp, #24
    f910:	bd10      	pop	{r4, pc}
    f912:	bf00      	nop

0000f914 <dmConnSmActAccept>:
    f914:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f916:	f101 050b 	add.w	r5, r1, #11
    f91a:	798c      	ldrb	r4, [r1, #6]
    f91c:	7a8b      	ldrb	r3, [r1, #10]
    f91e:	890a      	ldrh	r2, [r1, #8]
    f920:	7948      	ldrb	r0, [r1, #5]
    f922:	9501      	str	r5, [sp, #4]
    f924:	7c49      	ldrb	r1, [r1, #17]
    f926:	9100      	str	r1, [sp, #0]
    f928:	4621      	mov	r1, r4
    f92a:	f7ff fb1a 	bl	ef62 <dmAdvStartDirected>
    f92e:	b003      	add	sp, #12
    f930:	bd30      	pop	{r4, r5, pc}

0000f932 <dmConnSmActCancelAccept>:
    f932:	b538      	push	{r3, r4, r5, lr}
    f934:	4604      	mov	r4, r0
    f936:	460d      	mov	r5, r1
    f938:	f7ff fb28 	bl	ef8c <dmAdvStopDirected>
    f93c:	4629      	mov	r1, r5
    f93e:	4620      	mov	r0, r4
    f940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f944:	f7ff bd5a 	b.w	f3fc <dmConnSmActConnFailed>

0000f948 <dmConnSmActConnAccepted>:
    f948:	b538      	push	{r3, r4, r5, lr}
    f94a:	4604      	mov	r4, r0
    f94c:	460d      	mov	r5, r1
    f94e:	f7ff fb29 	bl	efa4 <dmAdvConnected>
    f952:	4629      	mov	r1, r5
    f954:	4620      	mov	r0, r4
    f956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f95a:	f7ff bd19 	b.w	f390 <dmConnSmActConnOpened>

0000f95e <dmConnSmActAcceptFailed>:
    f95e:	b538      	push	{r3, r4, r5, lr}
    f960:	4604      	mov	r4, r0
    f962:	460d      	mov	r5, r1
    f964:	f7ff fb2a 	bl	efbc <dmAdvConnectFailed>
    f968:	4629      	mov	r1, r5
    f96a:	4620      	mov	r0, r4
    f96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f970:	f7ff bd44 	b.w	f3fc <dmConnSmActConnFailed>

0000f974 <DmConnSlaveInit>:
    f974:	4b01      	ldr	r3, [pc, #4]	; (f97c <DmConnSlaveInit+0x8>)
    f976:	4a02      	ldr	r2, [pc, #8]	; (f980 <DmConnSlaveInit+0xc>)
    f978:	609a      	str	r2, [r3, #8]
    f97a:	4770      	bx	lr
    f97c:	10003e3c 	.word	0x10003e3c
    f980:	00022f48 	.word	0x00022f48

0000f984 <dmConnSmExecute>:
    f984:	788b      	ldrb	r3, [r1, #2]
    f986:	7d42      	ldrb	r2, [r0, #21]
    f988:	b470      	push	{r4, r5, r6}
    f98a:	f003 030f 	and.w	r3, r3, #15
    f98e:	4d0c      	ldr	r5, [pc, #48]	; (f9c0 <dmConnSmExecute+0x3c>)
    f990:	260d      	movs	r6, #13
    f992:	fb06 3202 	mla	r2, r6, r2, r3
    f996:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    f99a:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    f99e:	785b      	ldrb	r3, [r3, #1]
    f9a0:	7542      	strb	r2, [r0, #21]
    f9a2:	091c      	lsrs	r4, r3, #4
    f9a4:	4a07      	ldr	r2, [pc, #28]	; (f9c4 <dmConnSmExecute+0x40>)
    f9a6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    f9aa:	b12a      	cbz	r2, f9b8 <dmConnSmExecute+0x34>
    f9ac:	f003 030f 	and.w	r3, r3, #15
    f9b0:	bc70      	pop	{r4, r5, r6}
    f9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9b6:	4718      	bx	r3
    f9b8:	bc70      	pop	{r4, r5, r6}
    f9ba:	f7ff bb1d 	b.w	eff8 <dmConnSmActNone>
    f9be:	bf00      	nop
    f9c0:	00022f60 	.word	0x00022f60
    f9c4:	10003e3c 	.word	0x10003e3c

0000f9c8 <dmDevHciHandler>:
    f9c8:	7882      	ldrb	r2, [r0, #2]
    f9ca:	4603      	mov	r3, r0
    f9cc:	b92a      	cbnz	r2, f9da <dmDevHciHandler+0x12>
    f9ce:	490b      	ldr	r1, [pc, #44]	; (f9fc <dmDevHciHandler+0x34>)
    f9d0:	740a      	strb	r2, [r1, #16]
    f9d2:	688b      	ldr	r3, [r1, #8]
    f9d4:	2220      	movs	r2, #32
    f9d6:	7082      	strb	r2, [r0, #2]
    f9d8:	4718      	bx	r3
    f9da:	2a13      	cmp	r2, #19
    f9dc:	d104      	bne.n	f9e8 <dmDevHciHandler+0x20>
    f9de:	2253      	movs	r2, #83	; 0x53
    f9e0:	709a      	strb	r2, [r3, #2]
    f9e2:	4b06      	ldr	r3, [pc, #24]	; (f9fc <dmDevHciHandler+0x34>)
    f9e4:	689b      	ldr	r3, [r3, #8]
    f9e6:	e7f7      	b.n	f9d8 <dmDevHciHandler+0x10>
    f9e8:	2a14      	cmp	r2, #20
    f9ea:	d101      	bne.n	f9f0 <dmDevHciHandler+0x28>
    f9ec:	2255      	movs	r2, #85	; 0x55
    f9ee:	e7f7      	b.n	f9e0 <dmDevHciHandler+0x18>
    f9f0:	2a12      	cmp	r2, #18
    f9f2:	d101      	bne.n	f9f8 <dmDevHciHandler+0x30>
    f9f4:	2254      	movs	r2, #84	; 0x54
    f9f6:	e7f3      	b.n	f9e0 <dmDevHciHandler+0x18>
    f9f8:	4770      	bx	lr
    f9fa:	bf00      	nop
    f9fc:	10003e48 	.word	0x10003e48

0000fa00 <dmDevActReset>:
    fa00:	b538      	push	{r3, r4, r5, lr}
    fa02:	4b08      	ldr	r3, [pc, #32]	; (fa24 <dmDevActReset+0x24>)
    fa04:	4d08      	ldr	r5, [pc, #32]	; (fa28 <dmDevActReset+0x28>)
    fa06:	2201      	movs	r2, #1
    fa08:	741a      	strb	r2, [r3, #16]
    fa0a:	2400      	movs	r4, #0
    fa0c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fa10:	3401      	adds	r4, #1
    fa12:	681b      	ldr	r3, [r3, #0]
    fa14:	4798      	blx	r3
    fa16:	2c0c      	cmp	r4, #12
    fa18:	d1f8      	bne.n	fa0c <dmDevActReset+0xc>
    fa1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fa1e:	f005 bc3d 	b.w	1529c <HciResetSequence>
    fa22:	bf00      	nop
    fa24:	10003e48 	.word	0x10003e48
    fa28:	10002b54 	.word	0x10002b54

0000fa2c <dmDevMsgHandler>:
    fa2c:	f7ff bfe8 	b.w	fa00 <dmDevActReset>

0000fa30 <DmDevReset>:
    fa30:	b508      	push	{r3, lr}
    fa32:	2004      	movs	r0, #4
    fa34:	f00a fd55 	bl	1a4e2 <WsfMsgAlloc>
    fa38:	4601      	mov	r1, r0
    fa3a:	b138      	cbz	r0, fa4c <DmDevReset+0x1c>
    fa3c:	2370      	movs	r3, #112	; 0x70
    fa3e:	7083      	strb	r3, [r0, #2]
    fa40:	4b03      	ldr	r3, [pc, #12]	; (fa50 <DmDevReset+0x20>)
    fa42:	7b18      	ldrb	r0, [r3, #12]
    fa44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fa48:	f00a bd6f 	b.w	1a52a <WsfMsgSend>
    fa4c:	bd08      	pop	{r3, pc}
    fa4e:	bf00      	nop
    fa50:	10003e48 	.word	0x10003e48

0000fa54 <DmDevSetRandAddr>:
    fa54:	b510      	push	{r4, lr}
    fa56:	4601      	mov	r1, r0
    fa58:	4604      	mov	r4, r0
    fa5a:	4804      	ldr	r0, [pc, #16]	; (fa6c <DmDevSetRandAddr+0x18>)
    fa5c:	f004 f818 	bl	13a90 <BdaCpy>
    fa60:	4620      	mov	r0, r4
    fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa66:	f004 bdf6 	b.w	14656 <HciLeSetRandAddrCmd>
    fa6a:	bf00      	nop
    fa6c:	10003e48 	.word	0x10003e48

0000fa70 <DmDevWhiteListAdd>:
    fa70:	f004 b9c6 	b.w	13e00 <HciLeAddDevWhiteListCmd>

0000fa74 <DmDevWhiteListRemove>:
    fa74:	f004 bcf8 	b.w	14468 <HciLeRemoveDevWhiteListCmd>

0000fa78 <DmDevWhiteListClear>:
    fa78:	f004 b9e7 	b.w	13e4a <HciLeClearWhiteListCmd>

0000fa7c <dmDevSetFilterPolicy>:
    fa7c:	2901      	cmp	r1, #1
    fa7e:	d00b      	beq.n	fa98 <dmDevSetFilterPolicy+0x1c>
    fa80:	d303      	bcc.n	fa8a <dmDevSetFilterPolicy+0xe>
    fa82:	2902      	cmp	r1, #2
    fa84:	d00d      	beq.n	faa2 <dmDevSetFilterPolicy+0x26>
    fa86:	2000      	movs	r0, #0
    fa88:	4770      	bx	lr
    fa8a:	2a03      	cmp	r2, #3
    fa8c:	d8fb      	bhi.n	fa86 <dmDevSetFilterPolicy+0xa>
    fa8e:	4b07      	ldr	r3, [pc, #28]	; (faac <dmDevSetFilterPolicy+0x30>)
    fa90:	4418      	add	r0, r3
    fa92:	7442      	strb	r2, [r0, #17]
    fa94:	2001      	movs	r0, #1
    fa96:	4770      	bx	lr
    fa98:	2a03      	cmp	r2, #3
    fa9a:	d8f4      	bhi.n	fa86 <dmDevSetFilterPolicy+0xa>
    fa9c:	4b03      	ldr	r3, [pc, #12]	; (faac <dmDevSetFilterPolicy+0x30>)
    fa9e:	749a      	strb	r2, [r3, #18]
    faa0:	e7f8      	b.n	fa94 <dmDevSetFilterPolicy+0x18>
    faa2:	2a01      	cmp	r2, #1
    faa4:	d8ef      	bhi.n	fa86 <dmDevSetFilterPolicy+0xa>
    faa6:	4b01      	ldr	r3, [pc, #4]	; (faac <dmDevSetFilterPolicy+0x30>)
    faa8:	74da      	strb	r2, [r3, #19]
    faaa:	e7f3      	b.n	fa94 <dmDevSetFilterPolicy+0x18>
    faac:	10003e48 	.word	0x10003e48

0000fab0 <DmDevSetFilterPolicy>:
    fab0:	460a      	mov	r2, r1
    fab2:	4601      	mov	r1, r0
    fab4:	2000      	movs	r0, #0
    fab6:	f7ff bfe1 	b.w	fa7c <dmDevSetFilterPolicy>

0000faba <DmDevSetExtFilterPolicy>:
    faba:	f7ff bfdf 	b.w	fa7c <dmDevSetFilterPolicy>

0000fabe <DmDevVsInit>:
    fabe:	f007 bed2 	b.w	17866 <HciVsInit>
    fac2:	bf00      	nop

0000fac4 <dmHciEvtCback>:
    fac4:	4a06      	ldr	r2, [pc, #24]	; (fae0 <dmHciEvtCback+0x1c>)
    fac6:	7883      	ldrb	r3, [r0, #2]
    fac8:	7c12      	ldrb	r2, [r2, #16]
    faca:	b102      	cbz	r2, face <dmHciEvtCback+0xa>
    facc:	b933      	cbnz	r3, fadc <dmHciEvtCback+0x18>
    face:	4a05      	ldr	r2, [pc, #20]	; (fae4 <dmHciEvtCback+0x20>)
    fad0:	5cd2      	ldrb	r2, [r2, r3]
    fad2:	4b05      	ldr	r3, [pc, #20]	; (fae8 <dmHciEvtCback+0x24>)
    fad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fad8:	685b      	ldr	r3, [r3, #4]
    fada:	4718      	bx	r3
    fadc:	4770      	bx	lr
    fade:	bf00      	nop
    fae0:	10003e48 	.word	0x10003e48
    fae4:	00022ff0 	.word	0x00022ff0
    fae8:	10002b54 	.word	0x10002b54

0000faec <dmEmptyReset>:
    faec:	4770      	bx	lr

0000faee <dmEmptyHandler>:
    faee:	4770      	bx	lr

0000faf0 <DmRegister>:
    faf0:	b510      	push	{r4, lr}
    faf2:	4b0a      	ldr	r3, [pc, #40]	; (fb1c <DmRegister+0x2c>)
    faf4:	4c0a      	ldr	r4, [pc, #40]	; (fb20 <DmRegister+0x30>)
    faf6:	6a1a      	ldr	r2, [r3, #32]
    faf8:	4b0a      	ldr	r3, [pc, #40]	; (fb24 <DmRegister+0x34>)
    fafa:	60a0      	str	r0, [r4, #8]
    fafc:	429a      	cmp	r2, r3
    fafe:	b09a      	sub	sp, #104	; 0x68
    fb00:	d00a      	beq.n	fb18 <DmRegister+0x28>
    fb02:	f005 fd8b 	bl	1561c <HciGetMaxRxAclLen>
    fb06:	2844      	cmp	r0, #68	; 0x44
    fb08:	d806      	bhi.n	fb18 <DmRegister+0x28>
    fb0a:	a81a      	add	r0, sp, #104	; 0x68
    fb0c:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
    fb10:	f840 3d64 	str.w	r3, [r0, #-100]!
    fb14:	68a3      	ldr	r3, [r4, #8]
    fb16:	4798      	blx	r3
    fb18:	b01a      	add	sp, #104	; 0x68
    fb1a:	bd10      	pop	{r4, pc}
    fb1c:	10002b54 	.word	0x10002b54
    fb20:	10003e48 	.word	0x10003e48
    fb24:	0002302c 	.word	0x0002302c

0000fb28 <DmFindAdType>:
    fb28:	b530      	push	{r4, r5, lr}
    fb2a:	b121      	cbz	r1, fb36 <DmFindAdType+0xe>
    fb2c:	7813      	ldrb	r3, [r2, #0]
    fb2e:	b173      	cbz	r3, fb4e <DmFindAdType+0x26>
    fb30:	b29c      	uxth	r4, r3
    fb32:	428c      	cmp	r4, r1
    fb34:	d302      	bcc.n	fb3c <DmFindAdType+0x14>
    fb36:	2200      	movs	r2, #0
    fb38:	4610      	mov	r0, r2
    fb3a:	bd30      	pop	{r4, r5, pc}
    fb3c:	7855      	ldrb	r5, [r2, #1]
    fb3e:	4285      	cmp	r5, r0
    fb40:	d0fa      	beq.n	fb38 <DmFindAdType+0x10>
    fb42:	43e4      	mvns	r4, r4
    fb44:	4421      	add	r1, r4
    fb46:	3301      	adds	r3, #1
    fb48:	b289      	uxth	r1, r1
    fb4a:	441a      	add	r2, r3
    fb4c:	e7ed      	b.n	fb2a <DmFindAdType+0x2>
    fb4e:	461a      	mov	r2, r3
    fb50:	e7f2      	b.n	fb38 <DmFindAdType+0x10>

0000fb52 <DmHandlerInit>:
    fb52:	4b04      	ldr	r3, [pc, #16]	; (fb64 <DmHandlerInit+0x12>)
    fb54:	2200      	movs	r2, #0
    fb56:	7318      	strb	r0, [r3, #12]
    fb58:	4803      	ldr	r0, [pc, #12]	; (fb68 <DmHandlerInit+0x16>)
    fb5a:	751a      	strb	r2, [r3, #20]
    fb5c:	741a      	strb	r2, [r3, #16]
    fb5e:	f00a bf25 	b.w	1a9ac <HciEvtRegister>
    fb62:	bf00      	nop
    fb64:	10003e48 	.word	0x10003e48
    fb68:	0000fac5 	.word	0x0000fac5

0000fb6c <DmHandler>:
    fb6c:	b151      	cbz	r1, fb84 <DmHandler+0x18>
    fb6e:	4b06      	ldr	r3, [pc, #24]	; (fb88 <DmHandler+0x1c>)
    fb70:	7c1b      	ldrb	r3, [r3, #16]
    fb72:	b93b      	cbnz	r3, fb84 <DmHandler+0x18>
    fb74:	788b      	ldrb	r3, [r1, #2]
    fb76:	4a05      	ldr	r2, [pc, #20]	; (fb8c <DmHandler+0x20>)
    fb78:	091b      	lsrs	r3, r3, #4
    fb7a:	4608      	mov	r0, r1
    fb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb80:	689b      	ldr	r3, [r3, #8]
    fb82:	4718      	bx	r3
    fb84:	4770      	bx	lr
    fb86:	bf00      	nop
    fb88:	10003e48 	.word	0x10003e48
    fb8c:	10002b54 	.word	0x10002b54

0000fb90 <DmLlPrivEnabled>:
    fb90:	4b01      	ldr	r3, [pc, #4]	; (fb98 <DmLlPrivEnabled+0x8>)
    fb92:	7d18      	ldrb	r0, [r3, #20]
    fb94:	4770      	bx	lr
    fb96:	bf00      	nop
    fb98:	10003e48 	.word	0x10003e48

0000fb9c <DmLlAddrType>:
    fb9c:	4b04      	ldr	r3, [pc, #16]	; (fbb0 <DmLlAddrType+0x14>)
    fb9e:	7d1b      	ldrb	r3, [r3, #20]
    fba0:	b12b      	cbz	r3, fbae <DmLlAddrType+0x12>
    fba2:	b118      	cbz	r0, fbac <DmLlAddrType+0x10>
    fba4:	2801      	cmp	r0, #1
    fba6:	bf08      	it	eq
    fba8:	2003      	moveq	r0, #3
    fbaa:	4770      	bx	lr
    fbac:	2002      	movs	r0, #2
    fbae:	4770      	bx	lr
    fbb0:	10003e48 	.word	0x10003e48

0000fbb4 <DmHostAddrType>:
    fbb4:	4b05      	ldr	r3, [pc, #20]	; (fbcc <DmHostAddrType+0x18>)
    fbb6:	7d1b      	ldrb	r3, [r3, #20]
    fbb8:	b133      	cbz	r3, fbc8 <DmHostAddrType+0x14>
    fbba:	2802      	cmp	r0, #2
    fbbc:	d003      	beq.n	fbc6 <DmHostAddrType+0x12>
    fbbe:	2803      	cmp	r0, #3
    fbc0:	bf08      	it	eq
    fbc2:	2001      	moveq	r0, #1
    fbc4:	4770      	bx	lr
    fbc6:	2000      	movs	r0, #0
    fbc8:	4770      	bx	lr
    fbca:	bf00      	nop
    fbcc:	10003e48 	.word	0x10003e48

0000fbd0 <DmSizeOfEvt>:
    fbd0:	7883      	ldrb	r3, [r0, #2]
    fbd2:	3b20      	subs	r3, #32
    fbd4:	b2da      	uxtb	r2, r3
    fbd6:	2a35      	cmp	r2, #53	; 0x35
    fbd8:	bf9d      	ittte	ls
    fbda:	4a03      	ldrls	r2, [pc, #12]	; (fbe8 <DmSizeOfEvt+0x18>)
    fbdc:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
    fbe0:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
    fbe4:	2004      	movhi	r0, #4
    fbe6:	4770      	bx	lr
    fbe8:	00022ff0 	.word	0x00022ff0

0000fbec <DmScanPhyToIdx>:
    fbec:	2000      	movs	r0, #0
    fbee:	4770      	bx	lr

0000fbf0 <dmInitPhyToIdx>:
    fbf0:	2801      	cmp	r0, #1
    fbf2:	d00d      	beq.n	fc10 <dmInitPhyToIdx+0x20>
    fbf4:	2802      	cmp	r0, #2
    fbf6:	d104      	bne.n	fc02 <dmInitPhyToIdx+0x12>
    fbf8:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    fbfc:	bf18      	it	ne
    fbfe:	2001      	movne	r0, #1
    fc00:	4770      	bx	lr
    fc02:	2901      	cmp	r1, #1
    fc04:	d004      	beq.n	fc10 <dmInitPhyToIdx+0x20>
    fc06:	2902      	cmp	r1, #2
    fc08:	bf0c      	ite	eq
    fc0a:	2001      	moveq	r0, #1
    fc0c:	2002      	movne	r0, #2
    fc0e:	4770      	bx	lr
    fc10:	2000      	movs	r0, #0
    fc12:	4770      	bx	lr

0000fc14 <DmInitPhyToIdx>:
    fc14:	2000      	movs	r0, #0
    fc16:	4770      	bx	lr

0000fc18 <dmPrivMsgHandler>:
    fc18:	7883      	ldrb	r3, [r0, #2]
    fc1a:	4a03      	ldr	r2, [pc, #12]	; (fc28 <dmPrivMsgHandler+0x10>)
    fc1c:	f003 030f 	and.w	r3, r3, #15
    fc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc24:	4718      	bx	r3
    fc26:	bf00      	nop
    fc28:	000230a4 	.word	0x000230a4

0000fc2c <dmPrivReset>:
    fc2c:	4a02      	ldr	r2, [pc, #8]	; (fc38 <dmPrivReset+0xc>)
    fc2e:	2300      	movs	r3, #0
    fc30:	70d3      	strb	r3, [r2, #3]
    fc32:	4a02      	ldr	r2, [pc, #8]	; (fc3c <dmPrivReset+0x10>)
    fc34:	7513      	strb	r3, [r2, #20]
    fc36:	4770      	bx	lr
    fc38:	10003e60 	.word	0x10003e60
    fc3c:	10003e48 	.word	0x10003e48

0000fc40 <dmPrivActAesCmpl>:
    fc40:	b510      	push	{r4, lr}
    fc42:	6841      	ldr	r1, [r0, #4]
    fc44:	4604      	mov	r4, r0
    fc46:	2203      	movs	r2, #3
    fc48:	4809      	ldr	r0, [pc, #36]	; (fc70 <dmPrivActAesCmpl+0x30>)
    fc4a:	f7fc fa59 	bl	c100 <memcmp>
    fc4e:	b958      	cbnz	r0, fc68 <dmPrivActAesCmpl+0x28>
    fc50:	70e0      	strb	r0, [r4, #3]
    fc52:	4b07      	ldr	r3, [pc, #28]	; (fc70 <dmPrivActAesCmpl+0x30>)
    fc54:	2200      	movs	r2, #0
    fc56:	70da      	strb	r2, [r3, #3]
    fc58:	2337      	movs	r3, #55	; 0x37
    fc5a:	70a3      	strb	r3, [r4, #2]
    fc5c:	4b05      	ldr	r3, [pc, #20]	; (fc74 <dmPrivActAesCmpl+0x34>)
    fc5e:	4620      	mov	r0, r4
    fc60:	689b      	ldr	r3, [r3, #8]
    fc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc66:	4718      	bx	r3
    fc68:	2305      	movs	r3, #5
    fc6a:	70e3      	strb	r3, [r4, #3]
    fc6c:	e7f1      	b.n	fc52 <dmPrivActAesCmpl+0x12>
    fc6e:	bf00      	nop
    fc70:	10003e60 	.word	0x10003e60
    fc74:	10003e48 	.word	0x10003e48

0000fc78 <dmPrivActAddDevToResList>:
    fc78:	b510      	push	{r4, lr}
    fc7a:	f100 031b 	add.w	r3, r0, #27
    fc7e:	4604      	mov	r4, r0
    fc80:	f100 020b 	add.w	r2, r0, #11
    fc84:	1d41      	adds	r1, r0, #5
    fc86:	7900      	ldrb	r0, [r0, #4]
    fc88:	f004 fe65 	bl	14956 <HciLeAddDeviceToResolvingListCmd>
    fc8c:	4b03      	ldr	r3, [pc, #12]	; (fc9c <dmPrivActAddDevToResList+0x24>)
    fc8e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    fc92:	721a      	strb	r2, [r3, #8]
    fc94:	8822      	ldrh	r2, [r4, #0]
    fc96:	809a      	strh	r2, [r3, #4]
    fc98:	bd10      	pop	{r4, pc}
    fc9a:	bf00      	nop
    fc9c:	10003e60 	.word	0x10003e60

0000fca0 <dmPrivActRemDevFromResList>:
    fca0:	b510      	push	{r4, lr}
    fca2:	1d41      	adds	r1, r0, #5
    fca4:	4604      	mov	r4, r0
    fca6:	7900      	ldrb	r0, [r0, #4]
    fca8:	f004 fe89 	bl	149be <HciLeRemoveDeviceFromResolvingList>
    fcac:	4b01      	ldr	r3, [pc, #4]	; (fcb4 <dmPrivActRemDevFromResList+0x14>)
    fcae:	8822      	ldrh	r2, [r4, #0]
    fcb0:	80da      	strh	r2, [r3, #6]
    fcb2:	bd10      	pop	{r4, pc}
    fcb4:	10003e60 	.word	0x10003e60

0000fcb8 <dmPrivActClearResList>:
    fcb8:	f004 bea6 	b.w	14a08 <HciLeClearResolvingList>

0000fcbc <dmPrivActSetPrivacyMode>:
    fcbc:	7ac2      	ldrb	r2, [r0, #11]
    fcbe:	1d41      	adds	r1, r0, #5
    fcc0:	7900      	ldrb	r0, [r0, #4]
    fcc2:	f004 bf54 	b.w	14b6e <HciLeSetPrivacyModeCmd>

0000fcc6 <dmPrivActResolveAddr>:
    fcc6:	b570      	push	{r4, r5, r6, lr}
    fcc8:	4d15      	ldr	r5, [pc, #84]	; (fd20 <dmPrivActResolveAddr+0x5a>)
    fcca:	4e16      	ldr	r6, [pc, #88]	; (fd24 <dmPrivActResolveAddr+0x5e>)
    fccc:	78e9      	ldrb	r1, [r5, #3]
    fcce:	b086      	sub	sp, #24
    fcd0:	4604      	mov	r4, r0
    fcd2:	b9f9      	cbnz	r1, fd14 <dmPrivActResolveAddr+0x4e>
    fcd4:	4603      	mov	r3, r0
    fcd6:	f833 2f14 	ldrh.w	r2, [r3, #20]!
    fcda:	802a      	strh	r2, [r5, #0]
    fcdc:	789b      	ldrb	r3, [r3, #2]
    fcde:	70ab      	strb	r3, [r5, #2]
    fce0:	4603      	mov	r3, r0
    fce2:	f10d 000b 	add.w	r0, sp, #11
    fce6:	f833 2f17 	ldrh.w	r2, [r3, #23]!
    fcea:	f8ad 2008 	strh.w	r2, [sp, #8]
    fcee:	789b      	ldrb	r3, [r3, #2]
    fcf0:	f88d 300a 	strb.w	r3, [sp, #10]
    fcf4:	220d      	movs	r2, #13
    fcf6:	f7fc fb31 	bl	c35c <memset>
    fcfa:	2301      	movs	r3, #1
    fcfc:	4620      	mov	r0, r4
    fcfe:	2161      	movs	r1, #97	; 0x61
    fd00:	70eb      	strb	r3, [r5, #3]
    fd02:	f830 3b04 	ldrh.w	r3, [r0], #4
    fd06:	7b32      	ldrb	r2, [r6, #12]
    fd08:	9100      	str	r1, [sp, #0]
    fd0a:	a902      	add	r1, sp, #8
    fd0c:	f008 faf6 	bl	182fc <SecAes>
    fd10:	b006      	add	sp, #24
    fd12:	bd70      	pop	{r4, r5, r6, pc}
    fd14:	f240 7337 	movw	r3, #1847	; 0x737
    fd18:	8043      	strh	r3, [r0, #2]
    fd1a:	68b3      	ldr	r3, [r6, #8]
    fd1c:	4798      	blx	r3
    fd1e:	e7f7      	b.n	fd10 <dmPrivActResolveAddr+0x4a>
    fd20:	10003e60 	.word	0x10003e60
    fd24:	10003e48 	.word	0x10003e48

0000fd28 <dmPrivActSetAddrResEnable>:
    fd28:	b510      	push	{r4, lr}
    fd2a:	7904      	ldrb	r4, [r0, #4]
    fd2c:	4620      	mov	r0, r4
    fd2e:	f004 fedb 	bl	14ae8 <HciLeSetAddrResolutionEnable>
    fd32:	4b01      	ldr	r3, [pc, #4]	; (fd38 <dmPrivActSetAddrResEnable+0x10>)
    fd34:	725c      	strb	r4, [r3, #9]
    fd36:	bd10      	pop	{r4, pc}
    fd38:	10003e60 	.word	0x10003e60

0000fd3c <dmPrivHciHandler>:
    fd3c:	7883      	ldrb	r3, [r0, #2]
    fd3e:	3b15      	subs	r3, #21
    fd40:	b570      	push	{r4, r5, r6, lr}
    fd42:	4604      	mov	r4, r0
    fd44:	2b05      	cmp	r3, #5
    fd46:	d83f      	bhi.n	fdc8 <dmPrivHciHandler+0x8c>
    fd48:	e8df f003 	tbb	[pc, r3]
    fd4c:	2f201a03 	.word	0x2f201a03
    fd50:	3432      	.short	0x3432
    fd52:	4d1e      	ldr	r5, [pc, #120]	; (fdcc <dmPrivHciHandler+0x90>)
    fd54:	2339      	movs	r3, #57	; 0x39
    fd56:	7083      	strb	r3, [r0, #2]
    fd58:	88ab      	ldrh	r3, [r5, #4]
    fd5a:	8003      	strh	r3, [r0, #0]
    fd5c:	78c3      	ldrb	r3, [r0, #3]
    fd5e:	b94b      	cbnz	r3, fd74 <dmPrivHciHandler+0x38>
    fd60:	7a2b      	ldrb	r3, [r5, #8]
    fd62:	b13b      	cbz	r3, fd74 <dmPrivHciHandler+0x38>
    fd64:	4b1a      	ldr	r3, [pc, #104]	; (fdd0 <dmPrivHciHandler+0x94>)
    fd66:	7d1b      	ldrb	r3, [r3, #20]
    fd68:	b923      	cbnz	r3, fd74 <dmPrivHciHandler+0x38>
    fd6a:	2001      	movs	r0, #1
    fd6c:	f004 febc 	bl	14ae8 <HciLeSetAddrResolutionEnable>
    fd70:	2301      	movs	r3, #1
    fd72:	726b      	strb	r3, [r5, #9]
    fd74:	4b16      	ldr	r3, [pc, #88]	; (fdd0 <dmPrivHciHandler+0x94>)
    fd76:	4620      	mov	r0, r4
    fd78:	689b      	ldr	r3, [r3, #8]
    fd7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd7e:	4718      	bx	r3
    fd80:	233a      	movs	r3, #58	; 0x3a
    fd82:	7083      	strb	r3, [r0, #2]
    fd84:	4b11      	ldr	r3, [pc, #68]	; (fdcc <dmPrivHciHandler+0x90>)
    fd86:	88db      	ldrh	r3, [r3, #6]
    fd88:	8003      	strh	r3, [r0, #0]
    fd8a:	e7f3      	b.n	fd74 <dmPrivHciHandler+0x38>
    fd8c:	78c5      	ldrb	r5, [r0, #3]
    fd8e:	233b      	movs	r3, #59	; 0x3b
    fd90:	7083      	strb	r3, [r0, #2]
    fd92:	2d00      	cmp	r5, #0
    fd94:	d1ee      	bne.n	fd74 <dmPrivHciHandler+0x38>
    fd96:	4b0e      	ldr	r3, [pc, #56]	; (fdd0 <dmPrivHciHandler+0x94>)
    fd98:	7d1b      	ldrb	r3, [r3, #20]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d0ea      	beq.n	fd74 <dmPrivHciHandler+0x38>
    fd9e:	4628      	mov	r0, r5
    fda0:	f004 fea2 	bl	14ae8 <HciLeSetAddrResolutionEnable>
    fda4:	4b09      	ldr	r3, [pc, #36]	; (fdcc <dmPrivHciHandler+0x90>)
    fda6:	725d      	strb	r5, [r3, #9]
    fda8:	e7e4      	b.n	fd74 <dmPrivHciHandler+0x38>
    fdaa:	233c      	movs	r3, #60	; 0x3c
    fdac:	70a3      	strb	r3, [r4, #2]
    fdae:	e7e1      	b.n	fd74 <dmPrivHciHandler+0x38>
    fdb0:	233d      	movs	r3, #61	; 0x3d
    fdb2:	e7fb      	b.n	fdac <dmPrivHciHandler+0x70>
    fdb4:	233e      	movs	r3, #62	; 0x3e
    fdb6:	7083      	strb	r3, [r0, #2]
    fdb8:	78c3      	ldrb	r3, [r0, #3]
    fdba:	2b00      	cmp	r3, #0
    fdbc:	d1da      	bne.n	fd74 <dmPrivHciHandler+0x38>
    fdbe:	4b03      	ldr	r3, [pc, #12]	; (fdcc <dmPrivHciHandler+0x90>)
    fdc0:	7a5a      	ldrb	r2, [r3, #9]
    fdc2:	4b03      	ldr	r3, [pc, #12]	; (fdd0 <dmPrivHciHandler+0x94>)
    fdc4:	751a      	strb	r2, [r3, #20]
    fdc6:	e7d5      	b.n	fd74 <dmPrivHciHandler+0x38>
    fdc8:	bd70      	pop	{r4, r5, r6, pc}
    fdca:	bf00      	nop
    fdcc:	10003e60 	.word	0x10003e60
    fdd0:	10003e48 	.word	0x10003e48

0000fdd4 <DmPrivInit>:
    fdd4:	4b01      	ldr	r3, [pc, #4]	; (fddc <DmPrivInit+0x8>)
    fdd6:	4a02      	ldr	r2, [pc, #8]	; (fde0 <DmPrivInit+0xc>)
    fdd8:	619a      	str	r2, [r3, #24]
    fdda:	4770      	bx	lr
    fddc:	10002b54 	.word	0x10002b54
    fde0:	000230c0 	.word	0x000230c0

0000fde4 <DmPrivResolveAddr>:
    fde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fde6:	4605      	mov	r5, r0
    fde8:	201a      	movs	r0, #26
    fdea:	460e      	mov	r6, r1
    fdec:	4617      	mov	r7, r2
    fdee:	f00a fb78 	bl	1a4e2 <WsfMsgAlloc>
    fdf2:	4604      	mov	r4, r0
    fdf4:	b190      	cbz	r0, fe1c <DmPrivResolveAddr+0x38>
    fdf6:	2360      	movs	r3, #96	; 0x60
    fdf8:	7083      	strb	r3, [r0, #2]
    fdfa:	4631      	mov	r1, r6
    fdfc:	f820 7b04 	strh.w	r7, [r0], #4
    fe00:	f003 fe91 	bl	13b26 <Calc128Cpy>
    fe04:	4629      	mov	r1, r5
    fe06:	f104 0014 	add.w	r0, r4, #20
    fe0a:	f003 fe41 	bl	13a90 <BdaCpy>
    fe0e:	4b04      	ldr	r3, [pc, #16]	; (fe20 <DmPrivResolveAddr+0x3c>)
    fe10:	4621      	mov	r1, r4
    fe12:	7b18      	ldrb	r0, [r3, #12]
    fe14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fe18:	f00a bb87 	b.w	1a52a <WsfMsgSend>
    fe1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe1e:	bf00      	nop
    fe20:	10003e48 	.word	0x10003e48

0000fe24 <DmPrivAddDevToResList>:
    fe24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe28:	4681      	mov	r9, r0
    fe2a:	202c      	movs	r0, #44	; 0x2c
    fe2c:	4688      	mov	r8, r1
    fe2e:	4617      	mov	r7, r2
    fe30:	461e      	mov	r6, r3
    fe32:	f89d 5020 	ldrb.w	r5, [sp, #32]
    fe36:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
    fe3a:	f00a fb52 	bl	1a4e2 <WsfMsgAlloc>
    fe3e:	4604      	mov	r4, r0
    fe40:	b1e0      	cbz	r0, fe7c <DmPrivAddDevToResList+0x58>
    fe42:	2362      	movs	r3, #98	; 0x62
    fe44:	7083      	strb	r3, [r0, #2]
    fe46:	f8a0 a000 	strh.w	sl, [r0]
    fe4a:	f880 9004 	strb.w	r9, [r0, #4]
    fe4e:	4641      	mov	r1, r8
    fe50:	3005      	adds	r0, #5
    fe52:	f003 fe1d 	bl	13a90 <BdaCpy>
    fe56:	4639      	mov	r1, r7
    fe58:	f104 000b 	add.w	r0, r4, #11
    fe5c:	f003 fe63 	bl	13b26 <Calc128Cpy>
    fe60:	4631      	mov	r1, r6
    fe62:	f104 001b 	add.w	r0, r4, #27
    fe66:	f003 fe5e 	bl	13b26 <Calc128Cpy>
    fe6a:	4b05      	ldr	r3, [pc, #20]	; (fe80 <DmPrivAddDevToResList+0x5c>)
    fe6c:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    fe70:	4621      	mov	r1, r4
    fe72:	7b18      	ldrb	r0, [r3, #12]
    fe74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe78:	f00a bb57 	b.w	1a52a <WsfMsgSend>
    fe7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fe80:	10003e48 	.word	0x10003e48

0000fe84 <DmPrivRemDevFromResList>:
    fe84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe86:	4606      	mov	r6, r0
    fe88:	200c      	movs	r0, #12
    fe8a:	460d      	mov	r5, r1
    fe8c:	4617      	mov	r7, r2
    fe8e:	f00a fb28 	bl	1a4e2 <WsfMsgAlloc>
    fe92:	4604      	mov	r4, r0
    fe94:	b170      	cbz	r0, feb4 <DmPrivRemDevFromResList+0x30>
    fe96:	2363      	movs	r3, #99	; 0x63
    fe98:	7083      	strb	r3, [r0, #2]
    fe9a:	8007      	strh	r7, [r0, #0]
    fe9c:	7106      	strb	r6, [r0, #4]
    fe9e:	4629      	mov	r1, r5
    fea0:	3005      	adds	r0, #5
    fea2:	f003 fdf5 	bl	13a90 <BdaCpy>
    fea6:	4b04      	ldr	r3, [pc, #16]	; (feb8 <DmPrivRemDevFromResList+0x34>)
    fea8:	4621      	mov	r1, r4
    feaa:	7b18      	ldrb	r0, [r3, #12]
    feac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    feb0:	f00a bb3b 	b.w	1a52a <WsfMsgSend>
    feb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    feb6:	bf00      	nop
    feb8:	10003e48 	.word	0x10003e48

0000febc <DmPrivClearResList>:
    febc:	b508      	push	{r3, lr}
    febe:	202c      	movs	r0, #44	; 0x2c
    fec0:	f00a fb0f 	bl	1a4e2 <WsfMsgAlloc>
    fec4:	4601      	mov	r1, r0
    fec6:	b138      	cbz	r0, fed8 <DmPrivClearResList+0x1c>
    fec8:	2364      	movs	r3, #100	; 0x64
    feca:	7083      	strb	r3, [r0, #2]
    fecc:	4b03      	ldr	r3, [pc, #12]	; (fedc <DmPrivClearResList+0x20>)
    fece:	7b18      	ldrb	r0, [r3, #12]
    fed0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fed4:	f00a bb29 	b.w	1a52a <WsfMsgSend>
    fed8:	bd08      	pop	{r3, pc}
    feda:	bf00      	nop
    fedc:	10003e48 	.word	0x10003e48

0000fee0 <DmPrivReadPeerResolvableAddr>:
    fee0:	f004 bdb8 	b.w	14a54 <HciLeReadPeerResolvableAddr>

0000fee4 <DmPrivReadLocalResolvableAddr>:
    fee4:	f004 bddb 	b.w	14a9e <HciLeReadLocalResolvableAddr>

0000fee8 <DmPrivSetAddrResEnable>:
    fee8:	b510      	push	{r4, lr}
    feea:	4604      	mov	r4, r0
    feec:	202c      	movs	r0, #44	; 0x2c
    feee:	f00a faf8 	bl	1a4e2 <WsfMsgAlloc>
    fef2:	4601      	mov	r1, r0
    fef4:	b150      	cbz	r0, ff0c <DmPrivSetAddrResEnable+0x24>
    fef6:	2365      	movs	r3, #101	; 0x65
    fef8:	7083      	strb	r3, [r0, #2]
    fefa:	2300      	movs	r3, #0
    fefc:	8003      	strh	r3, [r0, #0]
    fefe:	4b04      	ldr	r3, [pc, #16]	; (ff10 <DmPrivSetAddrResEnable+0x28>)
    ff00:	7104      	strb	r4, [r0, #4]
    ff02:	7b18      	ldrb	r0, [r3, #12]
    ff04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff08:	f00a bb0f 	b.w	1a52a <WsfMsgSend>
    ff0c:	bd10      	pop	{r4, pc}
    ff0e:	bf00      	nop
    ff10:	10003e48 	.word	0x10003e48

0000ff14 <DmPrivSetResolvablePrivateAddrTimeout>:
    ff14:	f004 be05 	b.w	14b22 <HciLeSetResolvablePrivateAddrTimeout>

0000ff18 <DmPrivSetPrivacyMode>:
    ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff1a:	4607      	mov	r7, r0
    ff1c:	200c      	movs	r0, #12
    ff1e:	460e      	mov	r6, r1
    ff20:	4615      	mov	r5, r2
    ff22:	f00a fade 	bl	1a4e2 <WsfMsgAlloc>
    ff26:	4604      	mov	r4, r0
    ff28:	b170      	cbz	r0, ff48 <DmPrivSetPrivacyMode+0x30>
    ff2a:	2366      	movs	r3, #102	; 0x66
    ff2c:	7083      	strb	r3, [r0, #2]
    ff2e:	7107      	strb	r7, [r0, #4]
    ff30:	4631      	mov	r1, r6
    ff32:	3005      	adds	r0, #5
    ff34:	f003 fdac 	bl	13a90 <BdaCpy>
    ff38:	4b04      	ldr	r3, [pc, #16]	; (ff4c <DmPrivSetPrivacyMode+0x34>)
    ff3a:	72e5      	strb	r5, [r4, #11]
    ff3c:	4621      	mov	r1, r4
    ff3e:	7b18      	ldrb	r0, [r3, #12]
    ff40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ff44:	f00a baf1 	b.w	1a52a <WsfMsgSend>
    ff48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff4a:	bf00      	nop
    ff4c:	10003e48 	.word	0x10003e48

0000ff50 <dmSecMsgHandler>:
    ff50:	b570      	push	{r4, r5, r6, lr}
    ff52:	4605      	mov	r5, r0
    ff54:	7800      	ldrb	r0, [r0, #0]
    ff56:	f7ff f9b7 	bl	f2c8 <dmConnCcbById>
    ff5a:	4604      	mov	r4, r0
    ff5c:	b120      	cbz	r0, ff68 <dmSecMsgHandler+0x18>
    ff5e:	78ab      	ldrb	r3, [r5, #2]
    ff60:	2b50      	cmp	r3, #80	; 0x50
    ff62:	d002      	beq.n	ff6a <dmSecMsgHandler+0x1a>
    ff64:	2b51      	cmp	r3, #81	; 0x51
    ff66:	d012      	beq.n	ff8e <dmSecMsgHandler+0x3e>
    ff68:	bd70      	pop	{r4, r5, r6, pc}
    ff6a:	2201      	movs	r2, #1
    ff6c:	2102      	movs	r1, #2
    ff6e:	7c00      	ldrb	r0, [r0, #16]
    ff70:	f7ff fc2a 	bl	f7c8 <DmConnSetIdle>
    ff74:	7fab      	ldrb	r3, [r5, #30]
    ff76:	7623      	strb	r3, [r4, #24]
    ff78:	2301      	movs	r3, #1
    ff7a:	74a3      	strb	r3, [r4, #18]
    ff7c:	8baa      	ldrh	r2, [r5, #28]
    ff7e:	89a0      	ldrh	r0, [r4, #12]
    ff80:	1d2b      	adds	r3, r5, #4
    ff82:	f105 0114 	add.w	r1, r5, #20
    ff86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff8a:	f004 bbb2 	b.w	146f2 <HciLeStartEncryptionCmd>
    ff8e:	7d2a      	ldrb	r2, [r5, #20]
    ff90:	b13a      	cbz	r2, ffa2 <dmSecMsgHandler+0x52>
    ff92:	7d6b      	ldrb	r3, [r5, #21]
    ff94:	7603      	strb	r3, [r0, #24]
    ff96:	1d29      	adds	r1, r5, #4
    ff98:	8980      	ldrh	r0, [r0, #12]
    ff9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff9e:	f004 b9b2 	b.w	14306 <HciLeLtkReqReplCmd>
    ffa2:	7c00      	ldrb	r0, [r0, #16]
    ffa4:	2102      	movs	r1, #2
    ffa6:	f7ff fc0f 	bl	f7c8 <DmConnSetIdle>
    ffaa:	89a0      	ldrh	r0, [r4, #12]
    ffac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ffb0:	f004 b983 	b.w	142ba <HciLeLtkReqNegReplCmd>

0000ffb4 <dmSecApiLtkMsg>:
    ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffb6:	4606      	mov	r6, r0
    ffb8:	2020      	movs	r0, #32
    ffba:	460d      	mov	r5, r1
    ffbc:	4614      	mov	r4, r2
    ffbe:	461f      	mov	r7, r3
    ffc0:	f00a fa8f 	bl	1a4e2 <WsfMsgAlloc>
    ffc4:	b1a8      	cbz	r0, fff2 <dmSecApiLtkMsg+0x3e>
    ffc6:	7087      	strb	r7, [r0, #2]
    ffc8:	8006      	strh	r6, [r0, #0]
    ffca:	70c5      	strb	r5, [r0, #3]
    ffcc:	4622      	mov	r2, r4
    ffce:	1d03      	adds	r3, r0, #4
    ffd0:	f104 0118 	add.w	r1, r4, #24
    ffd4:	f852 4b04 	ldr.w	r4, [r2], #4
    ffd8:	f843 4b04 	str.w	r4, [r3], #4
    ffdc:	428a      	cmp	r2, r1
    ffde:	d1f9      	bne.n	ffd4 <dmSecApiLtkMsg+0x20>
    ffe0:	8812      	ldrh	r2, [r2, #0]
    ffe2:	801a      	strh	r2, [r3, #0]
    ffe4:	4b03      	ldr	r3, [pc, #12]	; (fff4 <dmSecApiLtkMsg+0x40>)
    ffe6:	4601      	mov	r1, r0
    ffe8:	7b18      	ldrb	r0, [r3, #12]
    ffea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ffee:	f00a ba9c 	b.w	1a52a <WsfMsgSend>
    fff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fff4:	10003e48 	.word	0x10003e48

0000fff8 <DmSmpCbackExec>:
    fff8:	7883      	ldrb	r3, [r0, #2]
    fffa:	2b2a      	cmp	r3, #42	; 0x2a
    fffc:	b510      	push	{r4, lr}
    fffe:	4604      	mov	r4, r0
   10000:	d001      	beq.n	10006 <DmSmpCbackExec+0xe>
   10002:	2b2c      	cmp	r3, #44	; 0x2c
   10004:	d105      	bne.n	10012 <DmSmpCbackExec+0x1a>
   10006:	4b06      	ldr	r3, [pc, #24]	; (10020 <DmSmpCbackExec+0x28>)
   10008:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1000c:	b10b      	cbz	r3, 10012 <DmSmpCbackExec+0x1a>
   1000e:	4620      	mov	r0, r4
   10010:	4798      	blx	r3
   10012:	4b04      	ldr	r3, [pc, #16]	; (10024 <DmSmpCbackExec+0x2c>)
   10014:	4620      	mov	r0, r4
   10016:	689b      	ldr	r3, [r3, #8]
   10018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1001c:	4718      	bx	r3
   1001e:	bf00      	nop
   10020:	10003cb8 	.word	0x10003cb8
   10024:	10003e48 	.word	0x10003e48

00010028 <dmSecHciHandler>:
   10028:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1002a:	4605      	mov	r5, r0
   1002c:	8800      	ldrh	r0, [r0, #0]
   1002e:	f7ff f864 	bl	f0fa <dmConnCcbByHandle>
   10032:	4604      	mov	r4, r0
   10034:	b1c0      	cbz	r0, 10068 <dmSecHciHandler+0x40>
   10036:	78ab      	ldrb	r3, [r5, #2]
   10038:	2b10      	cmp	r3, #16
   1003a:	d127      	bne.n	1008c <dmSecHciHandler+0x64>
   1003c:	89eb      	ldrh	r3, [r5, #14]
   1003e:	b9ab      	cbnz	r3, 1006c <dmSecHciHandler+0x44>
   10040:	2208      	movs	r2, #8
   10042:	4926      	ldr	r1, [pc, #152]	; (100dc <dmSecHciHandler+0xb4>)
   10044:	1da8      	adds	r0, r5, #6
   10046:	f7fc f85b 	bl	c100 <memcmp>
   1004a:	4606      	mov	r6, r0
   1004c:	b970      	cbnz	r0, 1006c <dmSecHciHandler+0x44>
   1004e:	4669      	mov	r1, sp
   10050:	7c20      	ldrb	r0, [r4, #16]
   10052:	f000 fda3 	bl	10b9c <SmpDmGetStk>
   10056:	4601      	mov	r1, r0
   10058:	b140      	cbz	r0, 1006c <dmSecHciHandler+0x44>
   1005a:	f89d 3000 	ldrb.w	r3, [sp]
   1005e:	7623      	strb	r3, [r4, #24]
   10060:	74a6      	strb	r6, [r4, #18]
   10062:	8828      	ldrh	r0, [r5, #0]
   10064:	f004 f94f 	bl	14306 <HciLeLtkReqReplCmd>
   10068:	b002      	add	sp, #8
   1006a:	bd70      	pop	{r4, r5, r6, pc}
   1006c:	7c20      	ldrb	r0, [r4, #16]
   1006e:	2201      	movs	r2, #1
   10070:	2102      	movs	r1, #2
   10072:	f7ff fba9 	bl	f7c8 <DmConnSetIdle>
   10076:	2301      	movs	r3, #1
   10078:	74a3      	strb	r3, [r4, #18]
   1007a:	7c23      	ldrb	r3, [r4, #16]
   1007c:	802b      	strh	r3, [r5, #0]
   1007e:	2330      	movs	r3, #48	; 0x30
   10080:	70ab      	strb	r3, [r5, #2]
   10082:	4b17      	ldr	r3, [pc, #92]	; (100e0 <dmSecHciHandler+0xb8>)
   10084:	4628      	mov	r0, r5
   10086:	689b      	ldr	r3, [r3, #8]
   10088:	4798      	blx	r3
   1008a:	e7ed      	b.n	10068 <dmSecHciHandler+0x40>
   1008c:	3b0e      	subs	r3, #14
   1008e:	2b01      	cmp	r3, #1
   10090:	d8ea      	bhi.n	10068 <dmSecHciHandler+0x40>
   10092:	2200      	movs	r2, #0
   10094:	2102      	movs	r1, #2
   10096:	7c00      	ldrb	r0, [r0, #16]
   10098:	f7ff fb96 	bl	f7c8 <DmConnSetIdle>
   1009c:	7c23      	ldrb	r3, [r4, #16]
   1009e:	f8ad 3000 	strh.w	r3, [sp]
   100a2:	78eb      	ldrb	r3, [r5, #3]
   100a4:	f88d 3003 	strb.w	r3, [sp, #3]
   100a8:	b9a3      	cbnz	r3, 100d4 <dmSecHciHandler+0xac>
   100aa:	232c      	movs	r3, #44	; 0x2c
   100ac:	f88d 3002 	strb.w	r3, [sp, #2]
   100b0:	7e23      	ldrb	r3, [r4, #24]
   100b2:	75e3      	strb	r3, [r4, #23]
   100b4:	7ca3      	ldrb	r3, [r4, #18]
   100b6:	f88d 3004 	strb.w	r3, [sp, #4]
   100ba:	4668      	mov	r0, sp
   100bc:	f7ff ff9c 	bl	fff8 <DmSmpCbackExec>
   100c0:	7c23      	ldrb	r3, [r4, #16]
   100c2:	f8ad 3000 	strh.w	r3, [sp]
   100c6:	4668      	mov	r0, sp
   100c8:	78eb      	ldrb	r3, [r5, #3]
   100ca:	f88d 3003 	strb.w	r3, [sp, #3]
   100ce:	f000 fddf 	bl	10c90 <SmpDmEncryptInd>
   100d2:	e7c9      	b.n	10068 <dmSecHciHandler+0x40>
   100d4:	232d      	movs	r3, #45	; 0x2d
   100d6:	f88d 3002 	strb.w	r3, [sp, #2]
   100da:	e7ee      	b.n	100ba <dmSecHciHandler+0x92>
   100dc:	00023994 	.word	0x00023994
   100e0:	10003e48 	.word	0x10003e48

000100e4 <DmSecCancelReq>:
   100e4:	b538      	push	{r3, r4, r5, lr}
   100e6:	4605      	mov	r5, r0
   100e8:	2004      	movs	r0, #4
   100ea:	460c      	mov	r4, r1
   100ec:	f00a f9f9 	bl	1a4e2 <WsfMsgAlloc>
   100f0:	b138      	cbz	r0, 10102 <DmSecCancelReq+0x1e>
   100f2:	2203      	movs	r2, #3
   100f4:	7082      	strb	r2, [r0, #2]
   100f6:	70c4      	strb	r4, [r0, #3]
   100f8:	8005      	strh	r5, [r0, #0]
   100fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   100fe:	f000 bd44 	b.w	10b8a <SmpDmMsgSend>
   10102:	bd38      	pop	{r3, r4, r5, pc}

00010104 <DmSecAuthRsp>:
   10104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10106:	4607      	mov	r7, r0
   10108:	2016      	movs	r0, #22
   1010a:	460e      	mov	r6, r1
   1010c:	4615      	mov	r5, r2
   1010e:	f00a f9e8 	bl	1a4e2 <WsfMsgAlloc>
   10112:	4604      	mov	r4, r0
   10114:	b170      	cbz	r0, 10134 <DmSecAuthRsp+0x30>
   10116:	2304      	movs	r3, #4
   10118:	7083      	strb	r3, [r0, #2]
   1011a:	8007      	strh	r7, [r0, #0]
   1011c:	7506      	strb	r6, [r0, #20]
   1011e:	b125      	cbz	r5, 1012a <DmSecAuthRsp+0x26>
   10120:	4632      	mov	r2, r6
   10122:	4629      	mov	r1, r5
   10124:	4418      	add	r0, r3
   10126:	f7fc f81b 	bl	c160 <memcpy>
   1012a:	4620      	mov	r0, r4
   1012c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10130:	f000 bd2b 	b.w	10b8a <SmpDmMsgSend>
   10134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010136 <DmSecInit>:
   10136:	4b04      	ldr	r3, [pc, #16]	; (10148 <DmSecInit+0x12>)
   10138:	4a04      	ldr	r2, [pc, #16]	; (1014c <DmSecInit+0x16>)
   1013a:	615a      	str	r2, [r3, #20]
   1013c:	4b04      	ldr	r3, [pc, #16]	; (10150 <DmSecInit+0x1a>)
   1013e:	4a05      	ldr	r2, [pc, #20]	; (10154 <DmSecInit+0x1e>)
   10140:	e9c3 2200 	strd	r2, r2, [r3]
   10144:	4770      	bx	lr
   10146:	bf00      	nop
   10148:	10002b54 	.word	0x10002b54
   1014c:	000230cc 	.word	0x000230cc
   10150:	10003e6c 	.word	0x10003e6c
   10154:	00023994 	.word	0x00023994

00010158 <DmSecSetLocalCsrk>:
   10158:	b510      	push	{r4, lr}
   1015a:	4604      	mov	r4, r0
   1015c:	f008 fd00 	bl	18b60 <WsfTaskLock>
   10160:	4b02      	ldr	r3, [pc, #8]	; (1016c <DmSecSetLocalCsrk+0x14>)
   10162:	605c      	str	r4, [r3, #4]
   10164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10168:	f008 bd00 	b.w	18b6c <WsfTaskUnlock>
   1016c:	10003e6c 	.word	0x10003e6c

00010170 <DmSecSetLocalIrk>:
   10170:	b510      	push	{r4, lr}
   10172:	4604      	mov	r4, r0
   10174:	f008 fcf4 	bl	18b60 <WsfTaskLock>
   10178:	4b02      	ldr	r3, [pc, #8]	; (10184 <DmSecSetLocalIrk+0x14>)
   1017a:	601c      	str	r4, [r3, #0]
   1017c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10180:	f008 bcf4 	b.w	18b6c <WsfTaskUnlock>
   10184:	10003e6c 	.word	0x10003e6c

00010188 <DmSecGetLocalCsrk>:
   10188:	4b01      	ldr	r3, [pc, #4]	; (10190 <DmSecGetLocalCsrk+0x8>)
   1018a:	6858      	ldr	r0, [r3, #4]
   1018c:	4770      	bx	lr
   1018e:	bf00      	nop
   10190:	10003e6c 	.word	0x10003e6c

00010194 <DmSecGetLocalIrk>:
   10194:	4b01      	ldr	r3, [pc, #4]	; (1019c <DmSecGetLocalIrk+0x8>)
   10196:	6818      	ldr	r0, [r3, #0]
   10198:	4770      	bx	lr
   1019a:	bf00      	nop
   1019c:	10003e6c 	.word	0x10003e6c

000101a0 <dmSecLescMsgHandler>:
   101a0:	7883      	ldrb	r3, [r0, #2]
   101a2:	2b81      	cmp	r3, #129	; 0x81
   101a4:	b570      	push	{r4, r5, r6, lr}
   101a6:	4604      	mov	r4, r0
   101a8:	d106      	bne.n	101b8 <dmSecLescMsgHandler+0x18>
   101aa:	2334      	movs	r3, #52	; 0x34
   101ac:	7083      	strb	r3, [r0, #2]
   101ae:	4b0d      	ldr	r3, [pc, #52]	; (101e4 <dmSecLescMsgHandler+0x44>)
   101b0:	689b      	ldr	r3, [r3, #8]
   101b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   101b6:	4718      	bx	r3
   101b8:	2b80      	cmp	r3, #128	; 0x80
   101ba:	d112      	bne.n	101e2 <dmSecLescMsgHandler+0x42>
   101bc:	2333      	movs	r3, #51	; 0x33
   101be:	4d0a      	ldr	r5, [pc, #40]	; (101e8 <dmSecLescMsgHandler+0x48>)
   101c0:	7083      	strb	r3, [r0, #2]
   101c2:	6841      	ldr	r1, [r0, #4]
   101c4:	3004      	adds	r0, #4
   101c6:	f003 fcae 	bl	13b26 <Calc128Cpy>
   101ca:	6829      	ldr	r1, [r5, #0]
   101cc:	f104 0014 	add.w	r0, r4, #20
   101d0:	f003 fca9 	bl	13b26 <Calc128Cpy>
   101d4:	6828      	ldr	r0, [r5, #0]
   101d6:	f00a f935 	bl	1a444 <WsfBufFree>
   101da:	4b02      	ldr	r3, [pc, #8]	; (101e4 <dmSecLescMsgHandler+0x44>)
   101dc:	4620      	mov	r0, r4
   101de:	689b      	ldr	r3, [r3, #8]
   101e0:	e7e7      	b.n	101b2 <dmSecLescMsgHandler+0x12>
   101e2:	bd70      	pop	{r4, r5, r6, pc}
   101e4:	10003e48 	.word	0x10003e48
   101e8:	10003e74 	.word	0x10003e74

000101ec <DmSecKeypressReq>:
   101ec:	b538      	push	{r3, r4, r5, lr}
   101ee:	4604      	mov	r4, r0
   101f0:	2006      	movs	r0, #6
   101f2:	460d      	mov	r5, r1
   101f4:	f00a f975 	bl	1a4e2 <WsfMsgAlloc>
   101f8:	b138      	cbz	r0, 1020a <DmSecKeypressReq+0x1e>
   101fa:	2216      	movs	r2, #22
   101fc:	7105      	strb	r5, [r0, #4]
   101fe:	7082      	strb	r2, [r0, #2]
   10200:	8004      	strh	r4, [r0, #0]
   10202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10206:	f000 bcc0 	b.w	10b8a <SmpDmMsgSend>
   1020a:	bd38      	pop	{r3, r4, r5, pc}

0001020c <DmSecSetOob>:
   1020c:	f000 bef9 	b.w	11002 <SmpScSetOobCfg>

00010210 <DmSecCalcOobReq>:
   10210:	b5f0      	push	{r4, r5, r6, r7, lr}
   10212:	4605      	mov	r5, r0
   10214:	b08d      	sub	sp, #52	; 0x34
   10216:	2010      	movs	r0, #16
   10218:	460e      	mov	r6, r1
   1021a:	f00a f8d3 	bl	1a3c4 <WsfBufAlloc>
   1021e:	4c1a      	ldr	r4, [pc, #104]	; (10288 <DmSecCalcOobReq+0x78>)
   10220:	4f1a      	ldr	r7, [pc, #104]	; (1028c <DmSecCalcOobReq+0x7c>)
   10222:	6020      	str	r0, [r4, #0]
   10224:	b308      	cbz	r0, 1026a <DmSecCalcOobReq+0x5a>
   10226:	4629      	mov	r1, r5
   10228:	f003 fc7d 	bl	13b26 <Calc128Cpy>
   1022c:	2041      	movs	r0, #65	; 0x41
   1022e:	f00a f8c9 	bl	1a3c4 <WsfBufAlloc>
   10232:	4605      	mov	r5, r0
   10234:	b1b0      	cbz	r0, 10264 <DmSecCalcOobReq+0x54>
   10236:	2220      	movs	r2, #32
   10238:	4631      	mov	r1, r6
   1023a:	f000 fdff 	bl	10e3c <SmpScCat>
   1023e:	2220      	movs	r2, #32
   10240:	4631      	mov	r1, r6
   10242:	f000 fdfb 	bl	10e3c <SmpScCat>
   10246:	2200      	movs	r2, #0
   10248:	7002      	strb	r2, [r0, #0]
   1024a:	2180      	movs	r1, #128	; 0x80
   1024c:	7b3b      	ldrb	r3, [r7, #12]
   1024e:	6820      	ldr	r0, [r4, #0]
   10250:	e9cd 2100 	strd	r2, r1, [sp]
   10254:	2241      	movs	r2, #65	; 0x41
   10256:	4629      	mov	r1, r5
   10258:	f008 fa26 	bl	186a8 <SecCmac>
   1025c:	b988      	cbnz	r0, 10282 <DmSecCalcOobReq+0x72>
   1025e:	4628      	mov	r0, r5
   10260:	f00a f8f0 	bl	1a444 <WsfBufFree>
   10264:	6820      	ldr	r0, [r4, #0]
   10266:	f00a f8ed 	bl	1a444 <WsfBufFree>
   1026a:	2224      	movs	r2, #36	; 0x24
   1026c:	2100      	movs	r1, #0
   1026e:	a803      	add	r0, sp, #12
   10270:	f7fc f874 	bl	c35c <memset>
   10274:	f240 7333 	movw	r3, #1843	; 0x733
   10278:	f8ad 300e 	strh.w	r3, [sp, #14]
   1027c:	a803      	add	r0, sp, #12
   1027e:	68bb      	ldr	r3, [r7, #8]
   10280:	4798      	blx	r3
   10282:	b00d      	add	sp, #52	; 0x34
   10284:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10286:	bf00      	nop
   10288:	10003e74 	.word	0x10003e74
   1028c:	10003e48 	.word	0x10003e48

00010290 <DmSecGenerateEccKeyReq>:
   10290:	4b02      	ldr	r3, [pc, #8]	; (1029c <DmSecGenerateEccKeyReq+0xc>)
   10292:	2281      	movs	r2, #129	; 0x81
   10294:	2100      	movs	r1, #0
   10296:	7b18      	ldrb	r0, [r3, #12]
   10298:	f008 bab8 	b.w	1880c <SecEccGenKey>
   1029c:	10003e48 	.word	0x10003e48

000102a0 <DmSecSetDebugEccKey>:
   102a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   102a2:	4b24      	ldr	r3, [pc, #144]	; (10334 <DmSecSetDebugEccKey+0x94>)
   102a4:	b099      	sub	sp, #100	; 0x64
   102a6:	466a      	mov	r2, sp
   102a8:	f103 0620 	add.w	r6, r3, #32
   102ac:	4615      	mov	r5, r2
   102ae:	6818      	ldr	r0, [r3, #0]
   102b0:	6859      	ldr	r1, [r3, #4]
   102b2:	4614      	mov	r4, r2
   102b4:	c403      	stmia	r4!, {r0, r1}
   102b6:	3308      	adds	r3, #8
   102b8:	42b3      	cmp	r3, r6
   102ba:	4622      	mov	r2, r4
   102bc:	d1f7      	bne.n	102ae <DmSecSetDebugEccKey+0xe>
   102be:	4b1e      	ldr	r3, [pc, #120]	; (10338 <DmSecSetDebugEccKey+0x98>)
   102c0:	ac08      	add	r4, sp, #32
   102c2:	f103 0720 	add.w	r7, r3, #32
   102c6:	4622      	mov	r2, r4
   102c8:	6818      	ldr	r0, [r3, #0]
   102ca:	6859      	ldr	r1, [r3, #4]
   102cc:	4626      	mov	r6, r4
   102ce:	c603      	stmia	r6!, {r0, r1}
   102d0:	3308      	adds	r3, #8
   102d2:	42bb      	cmp	r3, r7
   102d4:	4634      	mov	r4, r6
   102d6:	d1f7      	bne.n	102c8 <DmSecSetDebugEccKey+0x28>
   102d8:	4c18      	ldr	r4, [pc, #96]	; (1033c <DmSecSetDebugEccKey+0x9c>)
   102da:	ae10      	add	r6, sp, #64	; 0x40
   102dc:	f104 0c20 	add.w	ip, r4, #32
   102e0:	4633      	mov	r3, r6
   102e2:	6820      	ldr	r0, [r4, #0]
   102e4:	6861      	ldr	r1, [r4, #4]
   102e6:	4637      	mov	r7, r6
   102e8:	c703      	stmia	r7!, {r0, r1}
   102ea:	3408      	adds	r4, #8
   102ec:	4564      	cmp	r4, ip
   102ee:	463e      	mov	r6, r7
   102f0:	d1f7      	bne.n	102e2 <DmSecSetDebugEccKey+0x42>
   102f2:	4e13      	ldr	r6, [pc, #76]	; (10340 <DmSecSetDebugEccKey+0xa0>)
   102f4:	462c      	mov	r4, r5
   102f6:	cc03      	ldmia	r4!, {r0, r1}
   102f8:	4294      	cmp	r4, r2
   102fa:	6030      	str	r0, [r6, #0]
   102fc:	6071      	str	r1, [r6, #4]
   102fe:	4625      	mov	r5, r4
   10300:	f106 0608 	add.w	r6, r6, #8
   10304:	d1f6      	bne.n	102f4 <DmSecSetDebugEccKey+0x54>
   10306:	4d0f      	ldr	r5, [pc, #60]	; (10344 <DmSecSetDebugEccKey+0xa4>)
   10308:	4614      	mov	r4, r2
   1030a:	cc03      	ldmia	r4!, {r0, r1}
   1030c:	429c      	cmp	r4, r3
   1030e:	6028      	str	r0, [r5, #0]
   10310:	6069      	str	r1, [r5, #4]
   10312:	4622      	mov	r2, r4
   10314:	f105 0508 	add.w	r5, r5, #8
   10318:	d1f6      	bne.n	10308 <DmSecSetDebugEccKey+0x68>
   1031a:	4c0b      	ldr	r4, [pc, #44]	; (10348 <DmSecSetDebugEccKey+0xa8>)
   1031c:	ad18      	add	r5, sp, #96	; 0x60
   1031e:	461a      	mov	r2, r3
   10320:	ca03      	ldmia	r2!, {r0, r1}
   10322:	42aa      	cmp	r2, r5
   10324:	6020      	str	r0, [r4, #0]
   10326:	6061      	str	r1, [r4, #4]
   10328:	4613      	mov	r3, r2
   1032a:	f104 0408 	add.w	r4, r4, #8
   1032e:	d1f6      	bne.n	1031e <DmSecSetDebugEccKey+0x7e>
   10330:	b019      	add	sp, #100	; 0x64
   10332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10334:	000230d8 	.word	0x000230d8
   10338:	000230f8 	.word	0x000230f8
   1033c:	00023118 	.word	0x00023118
   10340:	10003eb8 	.word	0x10003eb8
   10344:	10003e78 	.word	0x10003e78
   10348:	10003e98 	.word	0x10003e98

0001034c <DmSecSetEccKey>:
   1034c:	b508      	push	{r3, lr}
   1034e:	4601      	mov	r1, r0
   10350:	2260      	movs	r2, #96	; 0x60
   10352:	4802      	ldr	r0, [pc, #8]	; (1035c <DmSecSetEccKey+0x10>)
   10354:	f7fb ff04 	bl	c160 <memcpy>
   10358:	bd08      	pop	{r3, pc}
   1035a:	bf00      	nop
   1035c:	10003e78 	.word	0x10003e78

00010360 <DmSecGetEccKey>:
   10360:	4800      	ldr	r0, [pc, #0]	; (10364 <DmSecGetEccKey+0x4>)
   10362:	4770      	bx	lr
   10364:	10003e78 	.word	0x10003e78

00010368 <DmSecCompareRsp>:
   10368:	b538      	push	{r3, r4, r5, lr}
   1036a:	4605      	mov	r5, r0
   1036c:	2016      	movs	r0, #22
   1036e:	460c      	mov	r4, r1
   10370:	f00a f8b7 	bl	1a4e2 <WsfMsgAlloc>
   10374:	b158      	cbz	r0, 1038e <DmSecCompareRsp+0x26>
   10376:	8005      	strh	r5, [r0, #0]
   10378:	b12c      	cbz	r4, 10386 <DmSecCompareRsp+0x1e>
   1037a:	2315      	movs	r3, #21
   1037c:	7083      	strb	r3, [r0, #2]
   1037e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10382:	f000 bc02 	b.w	10b8a <SmpDmMsgSend>
   10386:	f240 4303 	movw	r3, #1027	; 0x403
   1038a:	8043      	strh	r3, [r0, #2]
   1038c:	e7f7      	b.n	1037e <DmSecCompareRsp+0x16>
   1038e:	bd38      	pop	{r3, r4, r5, pc}

00010390 <DmSecGetCompareValue>:
   10390:	7b43      	ldrb	r3, [r0, #13]
   10392:	7b82      	ldrb	r2, [r0, #14]
   10394:	041b      	lsls	r3, r3, #16
   10396:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1039a:	7bc2      	ldrb	r2, [r0, #15]
   1039c:	7b00      	ldrb	r0, [r0, #12]
   1039e:	4413      	add	r3, r2
   103a0:	4a03      	ldr	r2, [pc, #12]	; (103b0 <DmSecGetCompareValue+0x20>)
   103a2:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   103a6:	fbb3 f0f2 	udiv	r0, r3, r2
   103aa:	fb02 3010 	mls	r0, r2, r0, r3
   103ae:	4770      	bx	lr
   103b0:	000f4240 	.word	0x000f4240

000103b4 <DmSecLescInit>:
   103b4:	4b01      	ldr	r3, [pc, #4]	; (103bc <DmSecLescInit+0x8>)
   103b6:	4a02      	ldr	r2, [pc, #8]	; (103c0 <DmSecLescInit+0xc>)
   103b8:	621a      	str	r2, [r3, #32]
   103ba:	4770      	bx	lr
   103bc:	10002b54 	.word	0x10002b54
   103c0:	00023138 	.word	0x00023138

000103c4 <DmSecPairRsp>:
   103c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103c8:	4681      	mov	r9, r0
   103ca:	2008      	movs	r0, #8
   103cc:	4688      	mov	r8, r1
   103ce:	4617      	mov	r7, r2
   103d0:	461e      	mov	r6, r3
   103d2:	f89d 5020 	ldrb.w	r5, [sp, #32]
   103d6:	f00a f884 	bl	1a4e2 <WsfMsgAlloc>
   103da:	b180      	cbz	r0, 103fe <DmSecPairRsp+0x3a>
   103dc:	2302      	movs	r3, #2
   103de:	f006 0607 	and.w	r6, r6, #7
   103e2:	f005 0507 	and.w	r5, r5, #7
   103e6:	7083      	strb	r3, [r0, #2]
   103e8:	f880 8004 	strb.w	r8, [r0, #4]
   103ec:	7147      	strb	r7, [r0, #5]
   103ee:	7186      	strb	r6, [r0, #6]
   103f0:	71c5      	strb	r5, [r0, #7]
   103f2:	f8a0 9000 	strh.w	r9, [r0]
   103f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103fa:	f000 bbc6 	b.w	10b8a <SmpDmMsgSend>
   103fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010402 <DmSecSlaveReq>:
   10402:	b538      	push	{r3, r4, r5, lr}
   10404:	4605      	mov	r5, r0
   10406:	2006      	movs	r0, #6
   10408:	460c      	mov	r4, r1
   1040a:	f00a f86a 	bl	1a4e2 <WsfMsgAlloc>
   1040e:	b138      	cbz	r0, 10420 <DmSecSlaveReq+0x1e>
   10410:	2205      	movs	r2, #5
   10412:	7082      	strb	r2, [r0, #2]
   10414:	7104      	strb	r4, [r0, #4]
   10416:	8005      	strh	r5, [r0, #0]
   10418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1041c:	f000 bbb5 	b.w	10b8a <SmpDmMsgSend>
   10420:	bd38      	pop	{r3, r4, r5, pc}

00010422 <DmSecLtkRsp>:
   10422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10426:	4680      	mov	r8, r0
   10428:	2016      	movs	r0, #22
   1042a:	460d      	mov	r5, r1
   1042c:	4617      	mov	r7, r2
   1042e:	461e      	mov	r6, r3
   10430:	f00a f857 	bl	1a4e2 <WsfMsgAlloc>
   10434:	4604      	mov	r4, r0
   10436:	b188      	cbz	r0, 1045c <DmSecLtkRsp+0x3a>
   10438:	2351      	movs	r3, #81	; 0x51
   1043a:	7083      	strb	r3, [r0, #2]
   1043c:	f8a0 8000 	strh.w	r8, [r0]
   10440:	7505      	strb	r5, [r0, #20]
   10442:	7547      	strb	r7, [r0, #21]
   10444:	b11d      	cbz	r5, 1044e <DmSecLtkRsp+0x2c>
   10446:	4631      	mov	r1, r6
   10448:	3004      	adds	r0, #4
   1044a:	f003 fb6c 	bl	13b26 <Calc128Cpy>
   1044e:	4b04      	ldr	r3, [pc, #16]	; (10460 <DmSecLtkRsp+0x3e>)
   10450:	4621      	mov	r1, r4
   10452:	7b18      	ldrb	r0, [r3, #12]
   10454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10458:	f00a b867 	b.w	1a52a <WsfMsgSend>
   1045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10460:	10003e48 	.word	0x10003e48

00010464 <l2cDefaultDataCback>:
   10464:	4770      	bx	lr

00010466 <l2cDefaultDataCidCback>:
   10466:	4770      	bx	lr

00010468 <l2cDefaultCtrlCback>:
   10468:	4770      	bx	lr

0001046a <l2cHciFlowCback>:
   1046a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1046c:	460d      	mov	r5, r1
   1046e:	f7ff f949 	bl	f704 <DmConnIdByHandle>
   10472:	b280      	uxth	r0, r0
   10474:	f8ad 0004 	strh.w	r0, [sp, #4]
   10478:	b178      	cbz	r0, 1049a <l2cHciFlowCback+0x30>
   1047a:	4c09      	ldr	r4, [pc, #36]	; (104a0 <l2cHciFlowCback+0x36>)
   1047c:	f88d 5006 	strb.w	r5, [sp, #6]
   10480:	68e3      	ldr	r3, [r4, #12]
   10482:	a801      	add	r0, sp, #4
   10484:	4798      	blx	r3
   10486:	6923      	ldr	r3, [r4, #16]
   10488:	f88d 5006 	strb.w	r5, [sp, #6]
   1048c:	a801      	add	r0, sp, #4
   1048e:	4798      	blx	r3
   10490:	f88d 5006 	strb.w	r5, [sp, #6]
   10494:	6963      	ldr	r3, [r4, #20]
   10496:	a801      	add	r0, sp, #4
   10498:	4798      	blx	r3
   1049a:	b003      	add	sp, #12
   1049c:	bd30      	pop	{r4, r5, pc}
   1049e:	bf00      	nop
   104a0:	10003ed8 	.word	0x10003ed8

000104a4 <l2cHciAclCback>:
   104a4:	b570      	push	{r4, r5, r6, lr}
   104a6:	78c2      	ldrb	r2, [r0, #3]
   104a8:	7883      	ldrb	r3, [r0, #2]
   104aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   104ae:	b29b      	uxth	r3, r3
   104b0:	2b03      	cmp	r3, #3
   104b2:	bf83      	ittte	hi
   104b4:	7942      	ldrbhi	r2, [r0, #5]
   104b6:	7901      	ldrbhi	r1, [r0, #4]
   104b8:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   104bc:	2100      	movls	r1, #0
   104be:	bf8a      	itet	hi
   104c0:	b289      	uxthhi	r1, r1
   104c2:	1d02      	addls	r2, r0, #4
   104c4:	1d82      	addhi	r2, r0, #6
   104c6:	4604      	mov	r4, r0
   104c8:	1d08      	adds	r0, r1, #4
   104ca:	4283      	cmp	r3, r0
   104cc:	d116      	bne.n	104fc <l2cHciAclCback+0x58>
   104ce:	7863      	ldrb	r3, [r4, #1]
   104d0:	7820      	ldrb	r0, [r4, #0]
   104d2:	7815      	ldrb	r5, [r2, #0]
   104d4:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   104d8:	7853      	ldrb	r3, [r2, #1]
   104da:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   104de:	b2ad      	uxth	r5, r5
   104e0:	2d05      	cmp	r5, #5
   104e2:	f3c0 000b 	ubfx	r0, r0, #0, #12
   104e6:	4b0c      	ldr	r3, [pc, #48]	; (10518 <l2cHciAclCback+0x74>)
   104e8:	d005      	beq.n	104f6 <l2cHciAclCback+0x52>
   104ea:	2d06      	cmp	r5, #6
   104ec:	d00b      	beq.n	10506 <l2cHciAclCback+0x62>
   104ee:	2d04      	cmp	r5, #4
   104f0:	d10b      	bne.n	1050a <l2cHciAclCback+0x66>
   104f2:	681b      	ldr	r3, [r3, #0]
   104f4:	e000      	b.n	104f8 <l2cHciAclCback+0x54>
   104f6:	689b      	ldr	r3, [r3, #8]
   104f8:	4622      	mov	r2, r4
   104fa:	4798      	blx	r3
   104fc:	4620      	mov	r0, r4
   104fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10502:	f00a b805 	b.w	1a510 <WsfMsgFree>
   10506:	685b      	ldr	r3, [r3, #4]
   10508:	e7f6      	b.n	104f8 <l2cHciAclCback+0x54>
   1050a:	6a1e      	ldr	r6, [r3, #32]
   1050c:	460a      	mov	r2, r1
   1050e:	4623      	mov	r3, r4
   10510:	4629      	mov	r1, r5
   10512:	47b0      	blx	r6
   10514:	e7f2      	b.n	104fc <l2cHciAclCback+0x58>
   10516:	bf00      	nop
   10518:	10003ed8 	.word	0x10003ed8

0001051c <l2cRxSignalingPkt>:
   1051c:	b570      	push	{r4, r5, r6, lr}
   1051e:	460d      	mov	r5, r1
   10520:	4616      	mov	r6, r2
   10522:	4604      	mov	r4, r0
   10524:	f7ff f8ee 	bl	f704 <DmConnIdByHandle>
   10528:	f7ff f978 	bl	f81c <DmConnRole>
   1052c:	b940      	cbnz	r0, 10540 <l2cRxSignalingPkt+0x24>
   1052e:	4b07      	ldr	r3, [pc, #28]	; (1054c <l2cRxSignalingPkt+0x30>)
   10530:	699b      	ldr	r3, [r3, #24]
   10532:	b153      	cbz	r3, 1054a <l2cRxSignalingPkt+0x2e>
   10534:	4632      	mov	r2, r6
   10536:	4629      	mov	r1, r5
   10538:	4620      	mov	r0, r4
   1053a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1053e:	4718      	bx	r3
   10540:	2801      	cmp	r0, #1
   10542:	d102      	bne.n	1054a <l2cRxSignalingPkt+0x2e>
   10544:	4b01      	ldr	r3, [pc, #4]	; (1054c <l2cRxSignalingPkt+0x30>)
   10546:	69db      	ldr	r3, [r3, #28]
   10548:	e7f3      	b.n	10532 <l2cRxSignalingPkt+0x16>
   1054a:	bd70      	pop	{r4, r5, r6, pc}
   1054c:	10003ed8 	.word	0x10003ed8

00010550 <l2cMsgAlloc>:
   10550:	2100      	movs	r1, #0
   10552:	f009 bfb1 	b.w	1a4b8 <WsfMsgDataAlloc>

00010556 <L2cInit>:
   10556:	4b09      	ldr	r3, [pc, #36]	; (1057c <L2cInit+0x26>)
   10558:	4a09      	ldr	r2, [pc, #36]	; (10580 <L2cInit+0x2a>)
   1055a:	490a      	ldr	r1, [pc, #40]	; (10584 <L2cInit+0x2e>)
   1055c:	480a      	ldr	r0, [pc, #40]	; (10588 <L2cInit+0x32>)
   1055e:	e9c3 2200 	strd	r2, r2, [r3]
   10562:	4a0a      	ldr	r2, [pc, #40]	; (1058c <L2cInit+0x36>)
   10564:	609a      	str	r2, [r3, #8]
   10566:	4a0a      	ldr	r2, [pc, #40]	; (10590 <L2cInit+0x3a>)
   10568:	615a      	str	r2, [r3, #20]
   1056a:	e9c3 2203 	strd	r2, r2, [r3, #12]
   1056e:	4a09      	ldr	r2, [pc, #36]	; (10594 <L2cInit+0x3e>)
   10570:	621a      	str	r2, [r3, #32]
   10572:	2201      	movs	r2, #1
   10574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   10578:	f00a ba38 	b.w	1a9ec <HciAclRegister>
   1057c:	10003ed8 	.word	0x10003ed8
   10580:	00010465 	.word	0x00010465
   10584:	0001046b 	.word	0x0001046b
   10588:	000104a5 	.word	0x000104a5
   1058c:	0001051d 	.word	0x0001051d
   10590:	00010469 	.word	0x00010469
   10594:	00010467 	.word	0x00010467

00010598 <L2cRegister>:
   10598:	4b03      	ldr	r3, [pc, #12]	; (105a8 <L2cRegister+0x10>)
   1059a:	2804      	cmp	r0, #4
   1059c:	bf07      	ittee	eq
   1059e:	6019      	streq	r1, [r3, #0]
   105a0:	60da      	streq	r2, [r3, #12]
   105a2:	6059      	strne	r1, [r3, #4]
   105a4:	611a      	strne	r2, [r3, #16]
   105a6:	4770      	bx	lr
   105a8:	10003ed8 	.word	0x10003ed8

000105ac <L2cDataReq>:
   105ac:	b410      	push	{r4}
   105ae:	7019      	strb	r1, [r3, #0]
   105b0:	b2d4      	uxtb	r4, r2
   105b2:	0a09      	lsrs	r1, r1, #8
   105b4:	7059      	strb	r1, [r3, #1]
   105b6:	1d21      	adds	r1, r4, #4
   105b8:	7099      	strb	r1, [r3, #2]
   105ba:	1d11      	adds	r1, r2, #4
   105bc:	1209      	asrs	r1, r1, #8
   105be:	0a12      	lsrs	r2, r2, #8
   105c0:	7198      	strb	r0, [r3, #6]
   105c2:	0a00      	lsrs	r0, r0, #8
   105c4:	711c      	strb	r4, [r3, #4]
   105c6:	71d8      	strb	r0, [r3, #7]
   105c8:	70d9      	strb	r1, [r3, #3]
   105ca:	715a      	strb	r2, [r3, #5]
   105cc:	4618      	mov	r0, r3
   105ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   105d2:	f004 bec5 	b.w	15360 <HciSendAclData>

000105d6 <l2cSendCmdReject>:
   105d6:	b570      	push	{r4, r5, r6, lr}
   105d8:	4605      	mov	r5, r0
   105da:	200e      	movs	r0, #14
   105dc:	460e      	mov	r6, r1
   105de:	4614      	mov	r4, r2
   105e0:	f7ff ffb6 	bl	10550 <l2cMsgAlloc>
   105e4:	4603      	mov	r3, r0
   105e6:	b180      	cbz	r0, 1060a <l2cSendCmdReject+0x34>
   105e8:	2201      	movs	r2, #1
   105ea:	7202      	strb	r2, [r0, #8]
   105ec:	2202      	movs	r2, #2
   105ee:	7282      	strb	r2, [r0, #10]
   105f0:	7304      	strb	r4, [r0, #12]
   105f2:	2200      	movs	r2, #0
   105f4:	0a24      	lsrs	r4, r4, #8
   105f6:	72c2      	strb	r2, [r0, #11]
   105f8:	7246      	strb	r6, [r0, #9]
   105fa:	7344      	strb	r4, [r0, #13]
   105fc:	4629      	mov	r1, r5
   105fe:	2206      	movs	r2, #6
   10600:	2005      	movs	r0, #5
   10602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10606:	f7ff bfd1 	b.w	105ac <L2cDataReq>
   1060a:	bd70      	pop	{r4, r5, r6, pc}

0001060c <l2cSlaveRxSignalingPkt>:
   1060c:	b538      	push	{r3, r4, r5, lr}
   1060e:	4605      	mov	r5, r0
   10610:	4613      	mov	r3, r2
   10612:	7ad0      	ldrb	r0, [r2, #11]
   10614:	7a92      	ldrb	r2, [r2, #10]
   10616:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   1061a:	b292      	uxth	r2, r2
   1061c:	1d10      	adds	r0, r2, #4
   1061e:	4281      	cmp	r1, r0
   10620:	d116      	bne.n	10650 <l2cSlaveRxSignalingPkt+0x44>
   10622:	7a19      	ldrb	r1, [r3, #8]
   10624:	2913      	cmp	r1, #19
   10626:	d10f      	bne.n	10648 <l2cSlaveRxSignalingPkt+0x3c>
   10628:	2a02      	cmp	r2, #2
   1062a:	d111      	bne.n	10650 <l2cSlaveRxSignalingPkt+0x44>
   1062c:	7b5c      	ldrb	r4, [r3, #13]
   1062e:	7b19      	ldrb	r1, [r3, #12]
   10630:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   10634:	b28c      	uxth	r4, r1
   10636:	480a      	ldr	r0, [pc, #40]	; (10660 <l2cSlaveRxSignalingPkt+0x54>)
   10638:	f00a f932 	bl	1a8a0 <WsfTimerStop>
   1063c:	4621      	mov	r1, r4
   1063e:	4628      	mov	r0, r5
   10640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10644:	f7ff b942 	b.w	f8cc <DmL2cConnUpdateCnf>
   10648:	2901      	cmp	r1, #1
   1064a:	d101      	bne.n	10650 <l2cSlaveRxSignalingPkt+0x44>
   1064c:	460c      	mov	r4, r1
   1064e:	e7f2      	b.n	10636 <l2cSlaveRxSignalingPkt+0x2a>
   10650:	7a59      	ldrb	r1, [r3, #9]
   10652:	4628      	mov	r0, r5
   10654:	2200      	movs	r2, #0
   10656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1065a:	f7ff bfbc 	b.w	105d6 <l2cSendCmdReject>
   1065e:	bf00      	nop
   10660:	10003f00 	.word	0x10003f00

00010664 <L2cSlaveInit>:
   10664:	4b01      	ldr	r3, [pc, #4]	; (1066c <L2cSlaveInit+0x8>)
   10666:	4a02      	ldr	r2, [pc, #8]	; (10670 <L2cSlaveInit+0xc>)
   10668:	61da      	str	r2, [r3, #28]
   1066a:	4770      	bx	lr
   1066c:	10003ed8 	.word	0x10003ed8
   10670:	0001060d 	.word	0x0001060d

00010674 <L2cDmConnUpdateReq>:
   10674:	b570      	push	{r4, r5, r6, lr}
   10676:	4e1e      	ldr	r6, [pc, #120]	; (106f0 <L2cDmConnUpdateReq+0x7c>)
   10678:	4605      	mov	r5, r0
   1067a:	460c      	mov	r4, r1
   1067c:	4630      	mov	r0, r6
   1067e:	211e      	movs	r1, #30
   10680:	f00a f8e8 	bl	1a854 <WsfTimerStartSec>
   10684:	2014      	movs	r0, #20
   10686:	8175      	strh	r5, [r6, #10]
   10688:	f7ff ff62 	bl	10550 <l2cMsgAlloc>
   1068c:	4603      	mov	r3, r0
   1068e:	b368      	cbz	r0, 106ec <L2cDmConnUpdateReq+0x78>
   10690:	4918      	ldr	r1, [pc, #96]	; (106f4 <L2cDmConnUpdateReq+0x80>)
   10692:	2212      	movs	r2, #18
   10694:	7202      	strb	r2, [r0, #8]
   10696:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   1069a:	7242      	strb	r2, [r0, #9]
   1069c:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   106a0:	2aff      	cmp	r2, #255	; 0xff
   106a2:	bf1a      	itte	ne
   106a4:	3201      	addne	r2, #1
   106a6:	b2d2      	uxtbne	r2, r2
   106a8:	2201      	moveq	r2, #1
   106aa:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   106ae:	2208      	movs	r2, #8
   106b0:	7282      	strb	r2, [r0, #10]
   106b2:	2200      	movs	r2, #0
   106b4:	72c2      	strb	r2, [r0, #11]
   106b6:	8822      	ldrh	r2, [r4, #0]
   106b8:	7302      	strb	r2, [r0, #12]
   106ba:	8822      	ldrh	r2, [r4, #0]
   106bc:	0a12      	lsrs	r2, r2, #8
   106be:	7342      	strb	r2, [r0, #13]
   106c0:	8862      	ldrh	r2, [r4, #2]
   106c2:	7382      	strb	r2, [r0, #14]
   106c4:	8862      	ldrh	r2, [r4, #2]
   106c6:	0a12      	lsrs	r2, r2, #8
   106c8:	73c2      	strb	r2, [r0, #15]
   106ca:	88a2      	ldrh	r2, [r4, #4]
   106cc:	7402      	strb	r2, [r0, #16]
   106ce:	88a2      	ldrh	r2, [r4, #4]
   106d0:	0a12      	lsrs	r2, r2, #8
   106d2:	7442      	strb	r2, [r0, #17]
   106d4:	88e2      	ldrh	r2, [r4, #6]
   106d6:	7482      	strb	r2, [r0, #18]
   106d8:	88e2      	ldrh	r2, [r4, #6]
   106da:	0a12      	lsrs	r2, r2, #8
   106dc:	74c2      	strb	r2, [r0, #19]
   106de:	4629      	mov	r1, r5
   106e0:	220c      	movs	r2, #12
   106e2:	2005      	movs	r0, #5
   106e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   106e8:	f7ff bf60 	b.w	105ac <L2cDataReq>
   106ec:	bd70      	pop	{r4, r5, r6, pc}
   106ee:	bf00      	nop
   106f0:	10003f00 	.word	0x10003f00
   106f4:	10003ed8 	.word	0x10003ed8

000106f8 <L2cSlaveHandlerInit>:
   106f8:	4b02      	ldr	r3, [pc, #8]	; (10704 <L2cSlaveHandlerInit+0xc>)
   106fa:	2201      	movs	r2, #1
   106fc:	731a      	strb	r2, [r3, #12]
   106fe:	7218      	strb	r0, [r3, #8]
   10700:	7418      	strb	r0, [r3, #16]
   10702:	4770      	bx	lr
   10704:	10003f00 	.word	0x10003f00

00010708 <L2cSlaveHandler>:
   10708:	460b      	mov	r3, r1
   1070a:	b129      	cbz	r1, 10718 <L2cSlaveHandler+0x10>
   1070c:	7889      	ldrb	r1, [r1, #2]
   1070e:	2901      	cmp	r1, #1
   10710:	d102      	bne.n	10718 <L2cSlaveHandler+0x10>
   10712:	8818      	ldrh	r0, [r3, #0]
   10714:	f7ff b8da 	b.w	f8cc <DmL2cConnUpdateCnf>
   10718:	4770      	bx	lr
   1071a:	bf00      	nop

0001071c <smpDmConnCback>:
   1071c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1071e:	4605      	mov	r5, r0
   10720:	8803      	ldrh	r3, [r0, #0]
   10722:	78aa      	ldrb	r2, [r5, #2]
   10724:	4e23      	ldr	r6, [pc, #140]	; (107b4 <smpDmConnCback+0x98>)
   10726:	b2d8      	uxtb	r0, r3
   10728:	2a27      	cmp	r2, #39	; 0x27
   1072a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   1072e:	d120      	bne.n	10772 <smpDmConnCback+0x56>
   10730:	f7ff f874 	bl	f81c <DmConnRole>
   10734:	2338      	movs	r3, #56	; 0x38
   10736:	fb03 6304 	mla	r3, r3, r4, r6
   1073a:	b9a8      	cbnz	r0, 10768 <smpDmConnCback+0x4c>
   1073c:	2201      	movs	r2, #1
   1073e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   10742:	220b      	movs	r2, #11
   10744:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   10748:	2338      	movs	r3, #56	; 0x38
   1074a:	fb03 6404 	mla	r4, r3, r4, r6
   1074e:	88eb      	ldrh	r3, [r5, #6]
   10750:	8523      	strh	r3, [r4, #40]	; 0x28
   10752:	882b      	ldrh	r3, [r5, #0]
   10754:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   10758:	2300      	movs	r3, #0
   1075a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   1075e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10762:	8663      	strh	r3, [r4, #50]	; 0x32
   10764:	b002      	add	sp, #8
   10766:	bd70      	pop	{r4, r5, r6, pc}
   10768:	2200      	movs	r2, #0
   1076a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   1076e:	2201      	movs	r2, #1
   10770:	e7e8      	b.n	10744 <smpDmConnCback+0x28>
   10772:	2138      	movs	r1, #56	; 0x38
   10774:	fb01 6404 	mla	r4, r1, r4, r6
   10778:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   1077c:	2900      	cmp	r1, #0
   1077e:	d0f1      	beq.n	10764 <smpDmConnCback+0x48>
   10780:	2a28      	cmp	r2, #40	; 0x28
   10782:	d1ef      	bne.n	10764 <smpDmConnCback+0x48>
   10784:	f8ad 3004 	strh.w	r3, [sp, #4]
   10788:	230a      	movs	r3, #10
   1078a:	f88d 3006 	strb.w	r3, [sp, #6]
   1078e:	7a2b      	ldrb	r3, [r5, #8]
   10790:	4620      	mov	r0, r4
   10792:	3320      	adds	r3, #32
   10794:	a901      	add	r1, sp, #4
   10796:	f88d 3007 	strb.w	r3, [sp, #7]
   1079a:	f001 fb0a 	bl	11db2 <smpSmExecute>
   1079e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   107a0:	2500      	movs	r5, #0
   107a2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   107a6:	2800      	cmp	r0, #0
   107a8:	d0dc      	beq.n	10764 <smpDmConnCback+0x48>
   107aa:	f009 feb1 	bl	1a510 <WsfMsgFree>
   107ae:	6265      	str	r5, [r4, #36]	; 0x24
   107b0:	e7d8      	b.n	10764 <smpDmConnCback+0x48>
   107b2:	bf00      	nop
   107b4:	10003f14 	.word	0x10003f14

000107b8 <smpCcbByHandle>:
   107b8:	b508      	push	{r3, lr}
   107ba:	f7fe ffa3 	bl	f704 <DmConnIdByHandle>
   107be:	b120      	cbz	r0, 107ca <smpCcbByHandle+0x12>
   107c0:	4b02      	ldr	r3, [pc, #8]	; (107cc <smpCcbByHandle+0x14>)
   107c2:	3801      	subs	r0, #1
   107c4:	2238      	movs	r2, #56	; 0x38
   107c6:	fb02 3000 	mla	r0, r2, r0, r3
   107ca:	bd08      	pop	{r3, pc}
   107cc:	10003f14 	.word	0x10003f14

000107d0 <smpL2cDataCback>:
   107d0:	b530      	push	{r4, r5, lr}
   107d2:	b087      	sub	sp, #28
   107d4:	460d      	mov	r5, r1
   107d6:	4614      	mov	r4, r2
   107d8:	f7ff ffee 	bl	107b8 <smpCcbByHandle>
   107dc:	b1d8      	cbz	r0, 10816 <smpL2cDataCback+0x46>
   107de:	7a23      	ldrb	r3, [r4, #8]
   107e0:	1e5a      	subs	r2, r3, #1
   107e2:	2a0d      	cmp	r2, #13
   107e4:	d817      	bhi.n	10816 <smpL2cDataCback+0x46>
   107e6:	4a10      	ldr	r2, [pc, #64]	; (10828 <smpL2cDataCback+0x58>)
   107e8:	5cd2      	ldrb	r2, [r2, r3]
   107ea:	42aa      	cmp	r2, r5
   107ec:	d113      	bne.n	10816 <smpL2cDataCback+0x46>
   107ee:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   107f2:	429a      	cmp	r2, r3
   107f4:	d011      	beq.n	1081a <smpL2cDataCback+0x4a>
   107f6:	2b05      	cmp	r3, #5
   107f8:	d10d      	bne.n	10816 <smpL2cDataCback+0x46>
   107fa:	2307      	movs	r3, #7
   107fc:	f88d 3002 	strb.w	r3, [sp, #2]
   10800:	7a63      	ldrb	r3, [r4, #9]
   10802:	f88d 3003 	strb.w	r3, [sp, #3]
   10806:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1080a:	f8ad 3000 	strh.w	r3, [sp]
   1080e:	4669      	mov	r1, sp
   10810:	9401      	str	r4, [sp, #4]
   10812:	f001 face 	bl	11db2 <smpSmExecute>
   10816:	b007      	add	sp, #28
   10818:	bd30      	pop	{r4, r5, pc}
   1081a:	2a05      	cmp	r2, #5
   1081c:	d0ed      	beq.n	107fa <smpL2cDataCback+0x2a>
   1081e:	2306      	movs	r3, #6
   10820:	f88d 3002 	strb.w	r3, [sp, #2]
   10824:	e7ef      	b.n	10806 <smpL2cDataCback+0x36>
   10826:	bf00      	nop
   10828:	00023144 	.word	0x00023144

0001082c <smpCcbByConnId>:
   1082c:	4b02      	ldr	r3, [pc, #8]	; (10838 <smpCcbByConnId+0xc>)
   1082e:	2238      	movs	r2, #56	; 0x38
   10830:	3801      	subs	r0, #1
   10832:	fb02 3000 	mla	r0, r2, r0, r3
   10836:	4770      	bx	lr
   10838:	10003f14 	.word	0x10003f14

0001083c <smpCalcC1Part1>:
   1083c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083e:	4604      	mov	r4, r0
   10840:	b089      	sub	sp, #36	; 0x24
   10842:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   10846:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   1084a:	460f      	mov	r7, r1
   1084c:	4615      	mov	r5, r2
   1084e:	2b00      	cmp	r3, #0
   10850:	d05a      	beq.n	10908 <smpCalcC1Part1+0xcc>
   10852:	f7fe ffa5 	bl	f7a0 <DmConnLocalRpa>
   10856:	f003 f94c 	bl	13af2 <BdaIsZeros>
   1085a:	2800      	cmp	r0, #0
   1085c:	d052      	beq.n	10904 <smpCalcC1Part1+0xc8>
   1085e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10862:	f7fe ff7f 	bl	f764 <DmConnLocalAddrType>
   10866:	4606      	mov	r6, r0
   10868:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1086c:	f7fe ff8e 	bl	f78c <DmConnPeerRpa>
   10870:	f003 f93f 	bl	13af2 <BdaIsZeros>
   10874:	2800      	cmp	r0, #0
   10876:	d05f      	beq.n	10938 <smpCalcC1Part1+0xfc>
   10878:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1087c:	f7fe ff60 	bl	f740 <DmConnPeerAddrType>
   10880:	462b      	mov	r3, r5
   10882:	f10d 0112 	add.w	r1, sp, #18
   10886:	f813 2b02 	ldrb.w	r2, [r3], #2
   1088a:	4056      	eors	r6, r2
   1088c:	786a      	ldrb	r2, [r5, #1]
   1088e:	f88d 6010 	strb.w	r6, [sp, #16]
   10892:	4050      	eors	r0, r2
   10894:	f88d 0011 	strb.w	r0, [sp, #17]
   10898:	f105 0609 	add.w	r6, r5, #9
   1089c:	f104 0010 	add.w	r0, r4, #16
   108a0:	f813 cb01 	ldrb.w	ip, [r3], #1
   108a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   108a8:	42b3      	cmp	r3, r6
   108aa:	ea82 020c 	eor.w	r2, r2, ip
   108ae:	f801 2b01 	strb.w	r2, [r1], #1
   108b2:	d1f5      	bne.n	108a0 <smpCalcC1Part1+0x64>
   108b4:	f104 0017 	add.w	r0, r4, #23
   108b8:	3510      	adds	r5, #16
   108ba:	f10d 0119 	add.w	r1, sp, #25
   108be:	f813 6b01 	ldrb.w	r6, [r3], #1
   108c2:	f810 2b01 	ldrb.w	r2, [r0], #1
   108c6:	42ab      	cmp	r3, r5
   108c8:	ea82 0206 	eor.w	r2, r2, r6
   108cc:	f801 2b01 	strb.w	r2, [r1], #1
   108d0:	d1f5      	bne.n	108be <smpCalcC1Part1+0x82>
   108d2:	4a1a      	ldr	r2, [pc, #104]	; (1093c <smpCalcC1Part1+0x100>)
   108d4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   108d8:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   108dc:	210b      	movs	r1, #11
   108de:	9100      	str	r1, [sp, #0]
   108e0:	4638      	mov	r0, r7
   108e2:	a904      	add	r1, sp, #16
   108e4:	f007 fd0a 	bl	182fc <SecAes>
   108e8:	28ff      	cmp	r0, #255	; 0xff
   108ea:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   108ee:	d107      	bne.n	10900 <smpCalcC1Part1+0xc4>
   108f0:	f640 0303 	movw	r3, #2051	; 0x803
   108f4:	a903      	add	r1, sp, #12
   108f6:	4620      	mov	r0, r4
   108f8:	f8ad 300e 	strh.w	r3, [sp, #14]
   108fc:	f001 fa59 	bl	11db2 <smpSmExecute>
   10900:	b009      	add	sp, #36	; 0x24
   10902:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10904:	2601      	movs	r6, #1
   10906:	e7af      	b.n	10868 <smpCalcC1Part1+0x2c>
   10908:	f7fe ff40 	bl	f78c <DmConnPeerRpa>
   1090c:	f003 f8f1 	bl	13af2 <BdaIsZeros>
   10910:	b180      	cbz	r0, 10934 <smpCalcC1Part1+0xf8>
   10912:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10916:	f7fe ff13 	bl	f740 <DmConnPeerAddrType>
   1091a:	4606      	mov	r6, r0
   1091c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10920:	f7fe ff3e 	bl	f7a0 <DmConnLocalRpa>
   10924:	f003 f8e5 	bl	13af2 <BdaIsZeros>
   10928:	b130      	cbz	r0, 10938 <smpCalcC1Part1+0xfc>
   1092a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1092e:	f7fe ff19 	bl	f764 <DmConnLocalAddrType>
   10932:	e7a5      	b.n	10880 <smpCalcC1Part1+0x44>
   10934:	2601      	movs	r6, #1
   10936:	e7f1      	b.n	1091c <smpCalcC1Part1+0xe0>
   10938:	2001      	movs	r0, #1
   1093a:	e7a1      	b.n	10880 <smpCalcC1Part1+0x44>
   1093c:	10003f14 	.word	0x10003f14

00010940 <smpCalcC1Part2>:
   10940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10944:	4604      	mov	r4, r0
   10946:	b088      	sub	sp, #32
   10948:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1094c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10950:	4688      	mov	r8, r1
   10952:	4615      	mov	r5, r2
   10954:	2b00      	cmp	r3, #0
   10956:	d058      	beq.n	10a0a <smpCalcC1Part2+0xca>
   10958:	f7fe ff22 	bl	f7a0 <DmConnLocalRpa>
   1095c:	4606      	mov	r6, r0
   1095e:	f003 f8c8 	bl	13af2 <BdaIsZeros>
   10962:	b120      	cbz	r0, 1096e <smpCalcC1Part2+0x2e>
   10964:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10968:	f7fe ff06 	bl	f778 <DmConnLocalAddr>
   1096c:	4606      	mov	r6, r0
   1096e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10972:	f7fe ff0b 	bl	f78c <DmConnPeerRpa>
   10976:	4607      	mov	r7, r0
   10978:	f003 f8bb 	bl	13af2 <BdaIsZeros>
   1097c:	b120      	cbz	r0, 10988 <smpCalcC1Part2+0x48>
   1097e:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10982:	f7fe fee7 	bl	f754 <DmConnPeerAddr>
   10986:	4607      	mov	r7, r0
   10988:	4628      	mov	r0, r5
   1098a:	2300      	movs	r3, #0
   1098c:	a904      	add	r1, sp, #16
   1098e:	f817 2b01 	ldrb.w	r2, [r7], #1
   10992:	f810 cb01 	ldrb.w	ip, [r0], #1
   10996:	ea82 020c 	eor.w	r2, r2, ip
   1099a:	545a      	strb	r2, [r3, r1]
   1099c:	3301      	adds	r3, #1
   1099e:	2b06      	cmp	r3, #6
   109a0:	d1f5      	bne.n	1098e <smpCalcC1Part2+0x4e>
   109a2:	1dab      	adds	r3, r5, #6
   109a4:	f105 070c 	add.w	r7, r5, #12
   109a8:	f10d 0016 	add.w	r0, sp, #22
   109ac:	f816 2b01 	ldrb.w	r2, [r6], #1
   109b0:	f813 cb01 	ldrb.w	ip, [r3], #1
   109b4:	ea82 020c 	eor.w	r2, r2, ip
   109b8:	42bb      	cmp	r3, r7
   109ba:	f800 2b01 	strb.w	r2, [r0], #1
   109be:	d1f5      	bne.n	109ac <smpCalcC1Part2+0x6c>
   109c0:	7b2b      	ldrb	r3, [r5, #12]
   109c2:	f88d 301c 	strb.w	r3, [sp, #28]
   109c6:	7b6b      	ldrb	r3, [r5, #13]
   109c8:	f88d 301d 	strb.w	r3, [sp, #29]
   109cc:	4a1b      	ldr	r2, [pc, #108]	; (10a3c <smpCalcC1Part2+0xfc>)
   109ce:	7bab      	ldrb	r3, [r5, #14]
   109d0:	f88d 301e 	strb.w	r3, [sp, #30]
   109d4:	200b      	movs	r0, #11
   109d6:	7beb      	ldrb	r3, [r5, #15]
   109d8:	f88d 301f 	strb.w	r3, [sp, #31]
   109dc:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   109e0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   109e4:	9000      	str	r0, [sp, #0]
   109e6:	4640      	mov	r0, r8
   109e8:	f007 fc88 	bl	182fc <SecAes>
   109ec:	28ff      	cmp	r0, #255	; 0xff
   109ee:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   109f2:	d107      	bne.n	10a04 <smpCalcC1Part2+0xc4>
   109f4:	f640 0303 	movw	r3, #2051	; 0x803
   109f8:	a903      	add	r1, sp, #12
   109fa:	4620      	mov	r0, r4
   109fc:	f8ad 300e 	strh.w	r3, [sp, #14]
   10a00:	f001 f9d7 	bl	11db2 <smpSmExecute>
   10a04:	b008      	add	sp, #32
   10a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a0a:	f7fe febf 	bl	f78c <DmConnPeerRpa>
   10a0e:	4606      	mov	r6, r0
   10a10:	f003 f86f 	bl	13af2 <BdaIsZeros>
   10a14:	b120      	cbz	r0, 10a20 <smpCalcC1Part2+0xe0>
   10a16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a1a:	f7fe fe9b 	bl	f754 <DmConnPeerAddr>
   10a1e:	4606      	mov	r6, r0
   10a20:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a24:	f7fe febc 	bl	f7a0 <DmConnLocalRpa>
   10a28:	4607      	mov	r7, r0
   10a2a:	f003 f862 	bl	13af2 <BdaIsZeros>
   10a2e:	2800      	cmp	r0, #0
   10a30:	d0aa      	beq.n	10988 <smpCalcC1Part2+0x48>
   10a32:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10a36:	f7fe fe9f 	bl	f778 <DmConnLocalAddr>
   10a3a:	e7a4      	b.n	10986 <smpCalcC1Part2+0x46>
   10a3c:	10003f14 	.word	0x10003f14

00010a40 <smpCalcS1>:
   10a40:	b570      	push	{r4, r5, r6, lr}
   10a42:	b088      	sub	sp, #32
   10a44:	4616      	mov	r6, r2
   10a46:	4604      	mov	r4, r0
   10a48:	460d      	mov	r5, r1
   10a4a:	a804      	add	r0, sp, #16
   10a4c:	4619      	mov	r1, r3
   10a4e:	f003 f878 	bl	13b42 <Calc128Cpy64>
   10a52:	4631      	mov	r1, r6
   10a54:	a806      	add	r0, sp, #24
   10a56:	f003 f874 	bl	13b42 <Calc128Cpy64>
   10a5a:	4a0c      	ldr	r2, [pc, #48]	; (10a8c <smpCalcS1+0x4c>)
   10a5c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10a60:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10a64:	210b      	movs	r1, #11
   10a66:	9100      	str	r1, [sp, #0]
   10a68:	4628      	mov	r0, r5
   10a6a:	a904      	add	r1, sp, #16
   10a6c:	f007 fc46 	bl	182fc <SecAes>
   10a70:	28ff      	cmp	r0, #255	; 0xff
   10a72:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10a76:	d107      	bne.n	10a88 <smpCalcS1+0x48>
   10a78:	f640 0303 	movw	r3, #2051	; 0x803
   10a7c:	a903      	add	r1, sp, #12
   10a7e:	4620      	mov	r0, r4
   10a80:	f8ad 300e 	strh.w	r3, [sp, #14]
   10a84:	f001 f995 	bl	11db2 <smpSmExecute>
   10a88:	b008      	add	sp, #32
   10a8a:	bd70      	pop	{r4, r5, r6, pc}
   10a8c:	10003f14 	.word	0x10003f14

00010a90 <smpGenerateLtk>:
   10a90:	b570      	push	{r4, r5, r6, lr}
   10a92:	6a04      	ldr	r4, [r0, #32]
   10a94:	1d26      	adds	r6, r4, #4
   10a96:	4605      	mov	r5, r0
   10a98:	f894 1020 	ldrb.w	r1, [r4, #32]
   10a9c:	4630      	mov	r0, r6
   10a9e:	f007 ffff 	bl	18aa0 <SecRand>
   10aa2:	f894 0020 	ldrb.w	r0, [r4, #32]
   10aa6:	2100      	movs	r1, #0
   10aa8:	f1c0 0210 	rsb	r2, r0, #16
   10aac:	4430      	add	r0, r6
   10aae:	f7fb fc55 	bl	c35c <memset>
   10ab2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   10ab6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10aba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10abe:	4622      	mov	r2, r4
   10ac0:	83a3      	strh	r3, [r4, #28]
   10ac2:	f852 3f32 	ldr.w	r3, [r2, #50]!
   10ac6:	6163      	str	r3, [r4, #20]
   10ac8:	6853      	ldr	r3, [r2, #4]
   10aca:	61a3      	str	r3, [r4, #24]
   10acc:	2301      	movs	r3, #1
   10ace:	77a3      	strb	r3, [r4, #30]
   10ad0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   10ad4:	f013 0f04 	tst.w	r3, #4
   10ad8:	bf14      	ite	ne
   10ada:	2302      	movne	r3, #2
   10adc:	2301      	moveq	r3, #1
   10ade:	77e3      	strb	r3, [r4, #31]
   10ae0:	232f      	movs	r3, #47	; 0x2f
   10ae2:	70a3      	strb	r3, [r4, #2]
   10ae4:	4620      	mov	r0, r4
   10ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10aea:	f7ff ba85 	b.w	fff8 <DmSmpCbackExec>

00010aee <smpSendPkt>:
   10aee:	b570      	push	{r4, r5, r6, lr}
   10af0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   10af4:	4604      	mov	r4, r0
   10af6:	460d      	mov	r5, r1
   10af8:	b12b      	cbz	r3, 10b06 <smpSendPkt+0x18>
   10afa:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10afc:	b108      	cbz	r0, 10b02 <smpSendPkt+0x14>
   10afe:	f009 fd07 	bl	1a510 <WsfMsgFree>
   10b02:	6265      	str	r5, [r4, #36]	; 0x24
   10b04:	bd70      	pop	{r4, r5, r6, pc}
   10b06:	7a0a      	ldrb	r2, [r1, #8]
   10b08:	460b      	mov	r3, r1
   10b0a:	4904      	ldr	r1, [pc, #16]	; (10b1c <smpSendPkt+0x2e>)
   10b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10b10:	5c8a      	ldrb	r2, [r1, r2]
   10b12:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   10b14:	2006      	movs	r0, #6
   10b16:	f7ff bd49 	b.w	105ac <L2cDataReq>
   10b1a:	bf00      	nop
   10b1c:	00023144 	.word	0x00023144

00010b20 <smpL2cCtrlCback>:
   10b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b22:	7805      	ldrb	r5, [r0, #0]
   10b24:	4f13      	ldr	r7, [pc, #76]	; (10b74 <smpL2cCtrlCback+0x54>)
   10b26:	3d01      	subs	r5, #1
   10b28:	2438      	movs	r4, #56	; 0x38
   10b2a:	fb04 7405 	mla	r4, r4, r5, r7
   10b2e:	4606      	mov	r6, r0
   10b30:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   10b34:	b1e2      	cbz	r2, 10b70 <smpL2cCtrlCback+0x50>
   10b36:	7883      	ldrb	r3, [r0, #2]
   10b38:	2b01      	cmp	r3, #1
   10b3a:	bf0c      	ite	eq
   10b3c:	2301      	moveq	r3, #1
   10b3e:	2300      	movne	r3, #0
   10b40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10b44:	d014      	beq.n	10b70 <smpL2cCtrlCback+0x50>
   10b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10b48:	b121      	cbz	r1, 10b54 <smpL2cCtrlCback+0x34>
   10b4a:	2300      	movs	r3, #0
   10b4c:	6263      	str	r3, [r4, #36]	; 0x24
   10b4e:	4620      	mov	r0, r4
   10b50:	f7ff ffcd 	bl	10aee <smpSendPkt>
   10b54:	2338      	movs	r3, #56	; 0x38
   10b56:	fb03 7505 	mla	r5, r3, r5, r7
   10b5a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10b5e:	b13b      	cbz	r3, 10b70 <smpL2cCtrlCback+0x50>
   10b60:	230c      	movs	r3, #12
   10b62:	70b3      	strb	r3, [r6, #2]
   10b64:	4631      	mov	r1, r6
   10b66:	4620      	mov	r0, r4
   10b68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10b6c:	f001 b921 	b.w	11db2 <smpSmExecute>
   10b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b72:	bf00      	nop
   10b74:	10003f14 	.word	0x10003f14

00010b78 <smpStateIdle>:
   10b78:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10b7c:	fab0 f080 	clz	r0, r0
   10b80:	0940      	lsrs	r0, r0, #5
   10b82:	4770      	bx	lr

00010b84 <smpMsgAlloc>:
   10b84:	2100      	movs	r1, #0
   10b86:	f009 bc97 	b.w	1a4b8 <WsfMsgDataAlloc>

00010b8a <SmpDmMsgSend>:
   10b8a:	4b03      	ldr	r3, [pc, #12]	; (10b98 <SmpDmMsgSend+0xe>)
   10b8c:	4601      	mov	r1, r0
   10b8e:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   10b92:	f009 bcca 	b.w	1a52a <WsfMsgSend>
   10b96:	bf00      	nop
   10b98:	10003f14 	.word	0x10003f14

00010b9c <SmpDmGetStk>:
   10b9c:	b530      	push	{r4, r5, lr}
   10b9e:	4c12      	ldr	r4, [pc, #72]	; (10be8 <SmpDmGetStk+0x4c>)
   10ba0:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   10ba4:	3801      	subs	r0, #1
   10ba6:	4623      	mov	r3, r4
   10ba8:	b16a      	cbz	r2, 10bc6 <SmpDmGetStk+0x2a>
   10baa:	2238      	movs	r2, #56	; 0x38
   10bac:	fb02 4200 	mla	r2, r2, r0, r4
   10bb0:	6b54      	ldr	r4, [r2, #52]	; 0x34
   10bb2:	7825      	ldrb	r5, [r4, #0]
   10bb4:	b13d      	cbz	r5, 10bc6 <SmpDmGetStk+0x2a>
   10bb6:	6924      	ldr	r4, [r4, #16]
   10bb8:	b12c      	cbz	r4, 10bc6 <SmpDmGetStk+0x2a>
   10bba:	2303      	movs	r3, #3
   10bbc:	700b      	strb	r3, [r1, #0]
   10bbe:	6b53      	ldr	r3, [r2, #52]	; 0x34
   10bc0:	6918      	ldr	r0, [r3, #16]
   10bc2:	3010      	adds	r0, #16
   10bc4:	bd30      	pop	{r4, r5, pc}
   10bc6:	2238      	movs	r2, #56	; 0x38
   10bc8:	fb02 3300 	mla	r3, r2, r0, r3
   10bcc:	6a18      	ldr	r0, [r3, #32]
   10bce:	2800      	cmp	r0, #0
   10bd0:	d0f8      	beq.n	10bc4 <SmpDmGetStk+0x28>
   10bd2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   10bd6:	f012 0f04 	tst.w	r2, #4
   10bda:	bf14      	ite	ne
   10bdc:	2202      	movne	r2, #2
   10bde:	2201      	moveq	r2, #1
   10be0:	700a      	strb	r2, [r1, #0]
   10be2:	6a18      	ldr	r0, [r3, #32]
   10be4:	3020      	adds	r0, #32
   10be6:	e7ed      	b.n	10bc4 <SmpDmGetStk+0x28>
   10be8:	10003f14 	.word	0x10003f14

00010bec <SmpDmGetLtk>:
   10bec:	4a05      	ldr	r2, [pc, #20]	; (10c04 <SmpDmGetLtk+0x18>)
   10bee:	1e43      	subs	r3, r0, #1
   10bf0:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   10bf4:	b128      	cbz	r0, 10c02 <SmpDmGetLtk+0x16>
   10bf6:	2038      	movs	r0, #56	; 0x38
   10bf8:	fb00 2003 	mla	r0, r0, r3, r2
   10bfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10bfe:	6918      	ldr	r0, [r3, #16]
   10c00:	3010      	adds	r0, #16
   10c02:	4770      	bx	lr
   10c04:	10003f14 	.word	0x10003f14

00010c08 <SmpHandlerInit>:
   10c08:	b508      	push	{r3, lr}
   10c0a:	4b0d      	ldr	r3, [pc, #52]	; (10c40 <SmpHandlerInit+0x38>)
   10c0c:	2201      	movs	r2, #1
   10c0e:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   10c12:	3338      	adds	r3, #56	; 0x38
   10c14:	f823 2c2e 	strh.w	r2, [r3, #-46]
   10c18:	3201      	adds	r2, #1
   10c1a:	b292      	uxth	r2, r2
   10c1c:	2a09      	cmp	r2, #9
   10c1e:	f803 0c30 	strb.w	r0, [r3, #-48]
   10c22:	f103 0338 	add.w	r3, r3, #56	; 0x38
   10c26:	d1f5      	bne.n	10c14 <SmpHandlerInit+0xc>
   10c28:	4906      	ldr	r1, [pc, #24]	; (10c44 <SmpHandlerInit+0x3c>)
   10c2a:	4a07      	ldr	r2, [pc, #28]	; (10c48 <SmpHandlerInit+0x40>)
   10c2c:	2006      	movs	r0, #6
   10c2e:	f7ff fcb3 	bl	10598 <L2cRegister>
   10c32:	4906      	ldr	r1, [pc, #24]	; (10c4c <SmpHandlerInit+0x44>)
   10c34:	2001      	movs	r0, #1
   10c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10c3a:	f7fe bc4d 	b.w	f4d8 <DmConnRegister>
   10c3e:	bf00      	nop
   10c40:	10003f14 	.word	0x10003f14
   10c44:	000107d1 	.word	0x000107d1
   10c48:	00010b21 	.word	0x00010b21
   10c4c:	0001071d 	.word	0x0001071d

00010c50 <SmpHandler>:
   10c50:	b410      	push	{r4}
   10c52:	b1b9      	cbz	r1, 10c84 <SmpHandler+0x34>
   10c54:	780b      	ldrb	r3, [r1, #0]
   10c56:	480d      	ldr	r0, [pc, #52]	; (10c8c <SmpHandler+0x3c>)
   10c58:	3b01      	subs	r3, #1
   10c5a:	2238      	movs	r2, #56	; 0x38
   10c5c:	fb02 0203 	mla	r2, r2, r3, r0
   10c60:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   10c64:	b174      	cbz	r4, 10c84 <SmpHandler+0x34>
   10c66:	788c      	ldrb	r4, [r1, #2]
   10c68:	2c0b      	cmp	r4, #11
   10c6a:	d104      	bne.n	10c76 <SmpHandler+0x26>
   10c6c:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   10c70:	78ca      	ldrb	r2, [r1, #3]
   10c72:	4294      	cmp	r4, r2
   10c74:	d106      	bne.n	10c84 <SmpHandler+0x34>
   10c76:	2238      	movs	r2, #56	; 0x38
   10c78:	fb02 0003 	mla	r0, r2, r3, r0
   10c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c80:	f001 b897 	b.w	11db2 <smpSmExecute>
   10c84:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c88:	4770      	bx	lr
   10c8a:	bf00      	nop
   10c8c:	10003f14 	.word	0x10003f14

00010c90 <SmpDmEncryptInd>:
   10c90:	78c3      	ldrb	r3, [r0, #3]
   10c92:	2b00      	cmp	r3, #0
   10c94:	bf0c      	ite	eq
   10c96:	2308      	moveq	r3, #8
   10c98:	2309      	movne	r3, #9
   10c9a:	4601      	mov	r1, r0
   10c9c:	7083      	strb	r3, [r0, #2]
   10c9e:	2000      	movs	r0, #0
   10ca0:	f7ff bfd6 	b.w	10c50 <SmpHandler>

00010ca4 <SmpScAllocScratchBuffers>:
   10ca4:	b538      	push	{r3, r4, r5, lr}
   10ca6:	6b45      	ldr	r5, [r0, #52]	; 0x34
   10ca8:	68eb      	ldr	r3, [r5, #12]
   10caa:	4604      	mov	r4, r0
   10cac:	b91b      	cbnz	r3, 10cb6 <SmpScAllocScratchBuffers+0x12>
   10cae:	2060      	movs	r0, #96	; 0x60
   10cb0:	f009 fb88 	bl	1a3c4 <WsfBufAlloc>
   10cb4:	60e8      	str	r0, [r5, #12]
   10cb6:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10cb8:	68ab      	ldr	r3, [r5, #8]
   10cba:	b91b      	cbnz	r3, 10cc4 <SmpScAllocScratchBuffers+0x20>
   10cbc:	2040      	movs	r0, #64	; 0x40
   10cbe:	f009 fb81 	bl	1a3c4 <WsfBufAlloc>
   10cc2:	60a8      	str	r0, [r5, #8]
   10cc4:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10cc6:	692b      	ldr	r3, [r5, #16]
   10cc8:	b91b      	cbnz	r3, 10cd2 <SmpScAllocScratchBuffers+0x2e>
   10cca:	2020      	movs	r0, #32
   10ccc:	f009 fb7a 	bl	1a3c4 <WsfBufAlloc>
   10cd0:	6128      	str	r0, [r5, #16]
   10cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10cd4:	68d8      	ldr	r0, [r3, #12]
   10cd6:	b128      	cbz	r0, 10ce4 <SmpScAllocScratchBuffers+0x40>
   10cd8:	6898      	ldr	r0, [r3, #8]
   10cda:	b118      	cbz	r0, 10ce4 <SmpScAllocScratchBuffers+0x40>
   10cdc:	6918      	ldr	r0, [r3, #16]
   10cde:	3000      	adds	r0, #0
   10ce0:	bf18      	it	ne
   10ce2:	2001      	movne	r0, #1
   10ce4:	bd38      	pop	{r3, r4, r5, pc}

00010ce6 <SmpScFreeScratchBuffers>:
   10ce6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10ce8:	b510      	push	{r4, lr}
   10cea:	4604      	mov	r4, r0
   10cec:	68d8      	ldr	r0, [r3, #12]
   10cee:	b120      	cbz	r0, 10cfa <SmpScFreeScratchBuffers+0x14>
   10cf0:	f009 fba8 	bl	1a444 <WsfBufFree>
   10cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10cf6:	2200      	movs	r2, #0
   10cf8:	60da      	str	r2, [r3, #12]
   10cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10cfc:	6898      	ldr	r0, [r3, #8]
   10cfe:	b120      	cbz	r0, 10d0a <SmpScFreeScratchBuffers+0x24>
   10d00:	f009 fba0 	bl	1a444 <WsfBufFree>
   10d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10d06:	2200      	movs	r2, #0
   10d08:	609a      	str	r2, [r3, #8]
   10d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10d0c:	6918      	ldr	r0, [r3, #16]
   10d0e:	b120      	cbz	r0, 10d1a <SmpScFreeScratchBuffers+0x34>
   10d10:	f009 fb98 	bl	1a444 <WsfBufFree>
   10d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10d16:	2200      	movs	r2, #0
   10d18:	611a      	str	r2, [r3, #16]
   10d1a:	bd10      	pop	{r4, pc}

00010d1c <SmpScCmac>:
   10d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10d1e:	461c      	mov	r4, r3
   10d20:	4b0b      	ldr	r3, [pc, #44]	; (10d50 <SmpScCmac+0x34>)
   10d22:	9d06      	ldr	r5, [sp, #24]
   10d24:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   10d28:	261b      	movs	r6, #27
   10d2a:	9601      	str	r6, [sp, #4]
   10d2c:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   10d30:	9600      	str	r6, [sp, #0]
   10d32:	f007 fcb9 	bl	186a8 <SecCmac>
   10d36:	b948      	cbnz	r0, 10d4c <SmpScCmac+0x30>
   10d38:	f640 0303 	movw	r3, #2051	; 0x803
   10d3c:	4629      	mov	r1, r5
   10d3e:	4620      	mov	r0, r4
   10d40:	806b      	strh	r3, [r5, #2]
   10d42:	b002      	add	sp, #8
   10d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10d48:	f001 b833 	b.w	11db2 <smpSmExecute>
   10d4c:	b002      	add	sp, #8
   10d4e:	bd70      	pop	{r4, r5, r6, pc}
   10d50:	10003f14 	.word	0x10003f14

00010d54 <SmpScAlloc>:
   10d54:	b570      	push	{r4, r5, r6, lr}
   10d56:	460e      	mov	r6, r1
   10d58:	4615      	mov	r5, r2
   10d5a:	f009 fb33 	bl	1a3c4 <WsfBufAlloc>
   10d5e:	4604      	mov	r4, r0
   10d60:	b930      	cbnz	r0, 10d70 <SmpScAlloc+0x1c>
   10d62:	f640 0303 	movw	r3, #2051	; 0x803
   10d66:	806b      	strh	r3, [r5, #2]
   10d68:	4629      	mov	r1, r5
   10d6a:	4630      	mov	r0, r6
   10d6c:	f001 f821 	bl	11db2 <smpSmExecute>
   10d70:	4620      	mov	r0, r4
   10d72:	bd70      	pop	{r4, r5, r6, pc}

00010d74 <SmpScFree>:
   10d74:	f009 bb66 	b.w	1a444 <WsfBufFree>

00010d78 <SmpScCalcF4>:
   10d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d7c:	4606      	mov	r6, r0
   10d7e:	460f      	mov	r7, r1
   10d80:	4615      	mov	r5, r2
   10d82:	460a      	mov	r2, r1
   10d84:	4601      	mov	r1, r0
   10d86:	2041      	movs	r0, #65	; 0x41
   10d88:	461c      	mov	r4, r3
   10d8a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   10d8e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10d92:	f7ff ffdf 	bl	10d54 <SmpScAlloc>
   10d96:	4601      	mov	r1, r0
   10d98:	b1f0      	cbz	r0, 10dd8 <SmpScCalcF4+0x60>
   10d9a:	4603      	mov	r3, r0
   10d9c:	462a      	mov	r2, r5
   10d9e:	f105 0020 	add.w	r0, r5, #32
   10da2:	f852 5b04 	ldr.w	r5, [r2], #4
   10da6:	f843 5b04 	str.w	r5, [r3], #4
   10daa:	4282      	cmp	r2, r0
   10dac:	d1f9      	bne.n	10da2 <SmpScCalcF4+0x2a>
   10dae:	4623      	mov	r3, r4
   10db0:	f101 0220 	add.w	r2, r1, #32
   10db4:	f104 0020 	add.w	r0, r4, #32
   10db8:	f853 4b04 	ldr.w	r4, [r3], #4
   10dbc:	f842 4b04 	str.w	r4, [r2], #4
   10dc0:	4283      	cmp	r3, r0
   10dc2:	d1f9      	bne.n	10db8 <SmpScCalcF4+0x40>
   10dc4:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   10dc8:	4633      	mov	r3, r6
   10dca:	9708      	str	r7, [sp, #32]
   10dcc:	4640      	mov	r0, r8
   10dce:	2241      	movs	r2, #65	; 0x41
   10dd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dd4:	f7ff bfa2 	b.w	10d1c <SmpScCmac>
   10dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010ddc <SmpScInit>:
   10ddc:	4a13      	ldr	r2, [pc, #76]	; (10e2c <SmpScInit+0x50>)
   10dde:	4b14      	ldr	r3, [pc, #80]	; (10e30 <SmpScInit+0x54>)
   10de0:	f102 0114 	add.w	r1, r2, #20
   10de4:	66d9      	str	r1, [r3, #108]	; 0x6c
   10de6:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10dea:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   10dee:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   10df2:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   10df6:	f102 0150 	add.w	r1, r2, #80	; 0x50
   10dfa:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   10dfe:	f102 0164 	add.w	r1, r2, #100	; 0x64
   10e02:	635a      	str	r2, [r3, #52]	; 0x34
   10e04:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   10e08:	f102 0178 	add.w	r1, r2, #120	; 0x78
   10e0c:	328c      	adds	r2, #140	; 0x8c
   10e0e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   10e12:	4a08      	ldr	r2, [pc, #32]	; (10e34 <SmpScInit+0x58>)
   10e14:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   10e18:	4a07      	ldr	r2, [pc, #28]	; (10e38 <SmpScInit+0x5c>)
   10e1a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   10e1e:	2201      	movs	r2, #1
   10e20:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   10e24:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   10e28:	4770      	bx	lr
   10e2a:	bf00      	nop
   10e2c:	100040ec 	.word	0x100040ec
   10e30:	10003f14 	.word	0x10003f14
   10e34:	00011165 	.word	0x00011165
   10e38:	0001133d 	.word	0x0001133d

00010e3c <SmpScCat>:
   10e3c:	b510      	push	{r4, lr}
   10e3e:	4614      	mov	r4, r2
   10e40:	f7fb f98e 	bl	c160 <memcpy>
   10e44:	4420      	add	r0, r4
   10e46:	bd10      	pop	{r4, pc}

00010e48 <SmpScCat128>:
   10e48:	b510      	push	{r4, lr}
   10e4a:	4604      	mov	r4, r0
   10e4c:	f002 fe6b 	bl	13b26 <Calc128Cpy>
   10e50:	f104 0010 	add.w	r0, r4, #16
   10e54:	bd10      	pop	{r4, pc}

00010e56 <smpScSendPubKey>:
   10e56:	b570      	push	{r4, r5, r6, lr}
   10e58:	2201      	movs	r2, #1
   10e5a:	4605      	mov	r5, r0
   10e5c:	460e      	mov	r6, r1
   10e5e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10e62:	4611      	mov	r1, r2
   10e64:	f7fe fcb0 	bl	f7c8 <DmConnSetIdle>
   10e68:	4628      	mov	r0, r5
   10e6a:	f000 fd8f 	bl	1198c <smpStartRspTimer>
   10e6e:	2049      	movs	r0, #73	; 0x49
   10e70:	f7ff fe88 	bl	10b84 <smpMsgAlloc>
   10e74:	4604      	mov	r4, r0
   10e76:	b1b8      	cbz	r0, 10ea8 <smpScSendPubKey+0x52>
   10e78:	230c      	movs	r3, #12
   10e7a:	7203      	strb	r3, [r0, #8]
   10e7c:	f7ff fa70 	bl	10360 <DmSecGetEccKey>
   10e80:	2220      	movs	r2, #32
   10e82:	4601      	mov	r1, r0
   10e84:	f104 0009 	add.w	r0, r4, #9
   10e88:	f002 fe88 	bl	13b9c <WStrReverseCpy>
   10e8c:	f7ff fa68 	bl	10360 <DmSecGetEccKey>
   10e90:	2220      	movs	r2, #32
   10e92:	1881      	adds	r1, r0, r2
   10e94:	f104 0029 	add.w	r0, r4, #41	; 0x29
   10e98:	f002 fe80 	bl	13b9c <WStrReverseCpy>
   10e9c:	4621      	mov	r1, r4
   10e9e:	4628      	mov	r0, r5
   10ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10ea4:	f7ff be23 	b.w	10aee <smpSendPkt>
   10ea8:	f640 0303 	movw	r3, #2051	; 0x803
   10eac:	8073      	strh	r3, [r6, #2]
   10eae:	4631      	mov	r1, r6
   10eb0:	4628      	mov	r0, r5
   10eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10eb6:	f000 bf7c 	b.w	11db2 <smpSmExecute>

00010eba <smpScSendDHKeyCheck>:
   10eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ebc:	4617      	mov	r7, r2
   10ebe:	2201      	movs	r2, #1
   10ec0:	4604      	mov	r4, r0
   10ec2:	460e      	mov	r6, r1
   10ec4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10ec8:	4611      	mov	r1, r2
   10eca:	f7fe fc7d 	bl	f7c8 <DmConnSetIdle>
   10ece:	4620      	mov	r0, r4
   10ed0:	f000 fd5c 	bl	1198c <smpStartRspTimer>
   10ed4:	2019      	movs	r0, #25
   10ed6:	f7ff fe55 	bl	10b84 <smpMsgAlloc>
   10eda:	4605      	mov	r5, r0
   10edc:	b160      	cbz	r0, 10ef8 <smpScSendDHKeyCheck+0x3e>
   10ede:	230d      	movs	r3, #13
   10ee0:	7203      	strb	r3, [r0, #8]
   10ee2:	4639      	mov	r1, r7
   10ee4:	3009      	adds	r0, #9
   10ee6:	2210      	movs	r2, #16
   10ee8:	f002 fe58 	bl	13b9c <WStrReverseCpy>
   10eec:	4629      	mov	r1, r5
   10eee:	4620      	mov	r0, r4
   10ef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10ef4:	f7ff bdfb 	b.w	10aee <smpSendPkt>
   10ef8:	f640 0303 	movw	r3, #2051	; 0x803
   10efc:	8073      	strh	r3, [r6, #2]
   10efe:	4631      	mov	r1, r6
   10f00:	4620      	mov	r0, r4
   10f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f06:	f000 bf54 	b.w	11db2 <smpSmExecute>

00010f0a <smpScSendRand>:
   10f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f0c:	4617      	mov	r7, r2
   10f0e:	2201      	movs	r2, #1
   10f10:	4604      	mov	r4, r0
   10f12:	460e      	mov	r6, r1
   10f14:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10f18:	4611      	mov	r1, r2
   10f1a:	f7fe fc55 	bl	f7c8 <DmConnSetIdle>
   10f1e:	4620      	mov	r0, r4
   10f20:	f000 fd34 	bl	1198c <smpStartRspTimer>
   10f24:	2019      	movs	r0, #25
   10f26:	f7ff fe2d 	bl	10b84 <smpMsgAlloc>
   10f2a:	4605      	mov	r5, r0
   10f2c:	b160      	cbz	r0, 10f48 <smpScSendRand+0x3e>
   10f2e:	2304      	movs	r3, #4
   10f30:	7203      	strb	r3, [r0, #8]
   10f32:	4639      	mov	r1, r7
   10f34:	3009      	adds	r0, #9
   10f36:	2210      	movs	r2, #16
   10f38:	f002 fe30 	bl	13b9c <WStrReverseCpy>
   10f3c:	4629      	mov	r1, r5
   10f3e:	4620      	mov	r0, r4
   10f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f44:	f7ff bdd3 	b.w	10aee <smpSendPkt>
   10f48:	f640 0303 	movw	r3, #2051	; 0x803
   10f4c:	8073      	strh	r3, [r6, #2]
   10f4e:	4631      	mov	r1, r6
   10f50:	4620      	mov	r0, r4
   10f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f56:	f000 bf2c 	b.w	11db2 <smpSmExecute>

00010f5a <smpScSendPairCnf>:
   10f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f5c:	4617      	mov	r7, r2
   10f5e:	2201      	movs	r2, #1
   10f60:	4604      	mov	r4, r0
   10f62:	460e      	mov	r6, r1
   10f64:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10f68:	4611      	mov	r1, r2
   10f6a:	f7fe fc2d 	bl	f7c8 <DmConnSetIdle>
   10f6e:	4620      	mov	r0, r4
   10f70:	f000 fd0c 	bl	1198c <smpStartRspTimer>
   10f74:	2019      	movs	r0, #25
   10f76:	f7ff fe05 	bl	10b84 <smpMsgAlloc>
   10f7a:	4605      	mov	r5, r0
   10f7c:	b160      	cbz	r0, 10f98 <smpScSendPairCnf+0x3e>
   10f7e:	2303      	movs	r3, #3
   10f80:	7203      	strb	r3, [r0, #8]
   10f82:	4639      	mov	r1, r7
   10f84:	3009      	adds	r0, #9
   10f86:	2210      	movs	r2, #16
   10f88:	f002 fe08 	bl	13b9c <WStrReverseCpy>
   10f8c:	4629      	mov	r1, r5
   10f8e:	4620      	mov	r0, r4
   10f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f94:	f7ff bdab 	b.w	10aee <smpSendPkt>
   10f98:	f640 0303 	movw	r3, #2051	; 0x803
   10f9c:	8073      	strh	r3, [r6, #2]
   10f9e:	4631      	mov	r1, r6
   10fa0:	4620      	mov	r0, r4
   10fa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10fa6:	f000 bf04 	b.w	11db2 <smpSmExecute>

00010faa <smpGetPkBit>:
   10faa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10fac:	78da      	ldrb	r2, [r3, #3]
   10fae:	68d9      	ldr	r1, [r3, #12]
   10fb0:	08d3      	lsrs	r3, r2, #3
   10fb2:	f1c3 030f 	rsb	r3, r3, #15
   10fb6:	fa51 f383 	uxtab	r3, r1, r3
   10fba:	f002 0207 	and.w	r2, r2, #7
   10fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
   10fc2:	fa43 f202 	asr.w	r2, r3, r2
   10fc6:	f012 0f01 	tst.w	r2, #1
   10fca:	bf14      	ite	ne
   10fcc:	2081      	movne	r0, #129	; 0x81
   10fce:	2080      	moveq	r0, #128	; 0x80
   10fd0:	4770      	bx	lr

00010fd2 <smpGetPeerPublicKey>:
   10fd2:	b508      	push	{r3, lr}
   10fd4:	f7ff fc2a 	bl	1082c <smpCcbByConnId>
   10fd8:	6b40      	ldr	r0, [r0, #52]	; 0x34
   10fda:	b100      	cbz	r0, 10fde <smpGetPeerPublicKey+0xc>
   10fdc:	6880      	ldr	r0, [r0, #8]
   10fde:	bd08      	pop	{r3, pc}

00010fe0 <smpSetPeerPublicKey>:
   10fe0:	b510      	push	{r4, lr}
   10fe2:	460c      	mov	r4, r1
   10fe4:	f7ff fc22 	bl	1082c <smpCcbByConnId>
   10fe8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10fea:	b14b      	cbz	r3, 11000 <smpSetPeerPublicKey+0x20>
   10fec:	689b      	ldr	r3, [r3, #8]
   10fee:	4621      	mov	r1, r4
   10ff0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10ff4:	f851 0b04 	ldr.w	r0, [r1], #4
   10ff8:	f843 0b04 	str.w	r0, [r3], #4
   10ffc:	4291      	cmp	r1, r2
   10ffe:	d1f9      	bne.n	10ff4 <smpSetPeerPublicKey+0x14>
   11000:	bd10      	pop	{r4, pc}

00011002 <SmpScSetOobCfg>:
   11002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11004:	460d      	mov	r5, r1
   11006:	f7ff fc11 	bl	1082c <smpCcbByConnId>
   1100a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   1100e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11010:	4604      	mov	r4, r0
   11012:	f105 0110 	add.w	r1, r5, #16
   11016:	f105 0730 	add.w	r7, r5, #48	; 0x30
   1101a:	f105 0620 	add.w	r6, r5, #32
   1101e:	68d8      	ldr	r0, [r3, #12]
   11020:	b1b2      	cbz	r2, 11050 <SmpScSetOobCfg+0x4e>
   11022:	3050      	adds	r0, #80	; 0x50
   11024:	f002 fd7f 	bl	13b26 <Calc128Cpy>
   11028:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1102a:	68d8      	ldr	r0, [r3, #12]
   1102c:	4629      	mov	r1, r5
   1102e:	3020      	adds	r0, #32
   11030:	f002 fd79 	bl	13b26 <Calc128Cpy>
   11034:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11036:	68d8      	ldr	r0, [r3, #12]
   11038:	4639      	mov	r1, r7
   1103a:	3040      	adds	r0, #64	; 0x40
   1103c:	f002 fd73 	bl	13b26 <Calc128Cpy>
   11040:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11042:	68d8      	ldr	r0, [r3, #12]
   11044:	4631      	mov	r1, r6
   11046:	3030      	adds	r0, #48	; 0x30
   11048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1104c:	f002 bd6b 	b.w	13b26 <Calc128Cpy>
   11050:	3040      	adds	r0, #64	; 0x40
   11052:	f002 fd68 	bl	13b26 <Calc128Cpy>
   11056:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11058:	68d8      	ldr	r0, [r3, #12]
   1105a:	4629      	mov	r1, r5
   1105c:	3030      	adds	r0, #48	; 0x30
   1105e:	f002 fd62 	bl	13b26 <Calc128Cpy>
   11062:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11064:	68d8      	ldr	r0, [r3, #12]
   11066:	4639      	mov	r1, r7
   11068:	3050      	adds	r0, #80	; 0x50
   1106a:	f002 fd5c 	bl	13b26 <Calc128Cpy>
   1106e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11070:	68d8      	ldr	r0, [r3, #12]
   11072:	4631      	mov	r1, r6
   11074:	3020      	adds	r0, #32
   11076:	e7e7      	b.n	11048 <SmpScSetOobCfg+0x46>

00011078 <smpEventStr>:
   11078:	3801      	subs	r0, #1
   1107a:	b2c0      	uxtb	r0, r0
   1107c:	281b      	cmp	r0, #27
   1107e:	bf9a      	itte	ls
   11080:	4b02      	ldrls	r3, [pc, #8]	; (1108c <smpEventStr+0x14>)
   11082:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   11086:	4802      	ldrhi	r0, [pc, #8]	; (11090 <smpEventStr+0x18>)
   11088:	4770      	bx	lr
   1108a:	bf00      	nop
   1108c:	00023154 	.word	0x00023154
   11090:	00025dff 	.word	0x00025dff

00011094 <smpStateStr>:
   11094:	4b03      	ldr	r3, [pc, #12]	; (110a4 <smpStateStr+0x10>)
   11096:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1109a:	b10b      	cbz	r3, 110a0 <smpStateStr+0xc>
   1109c:	f000 bbea 	b.w	11874 <smpiStateStr>
   110a0:	f000 bbfe 	b.w	118a0 <smprStateStr>
   110a4:	10003f14 	.word	0x10003f14

000110a8 <smpLogByteArray>:
   110a8:	4770      	bx	lr
   110aa:	bf00      	nop

000110ac <smpScCatInitiatorBdAddr>:
   110ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ae:	4607      	mov	r7, r0
   110b0:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   110b4:	460c      	mov	r4, r1
   110b6:	f7fe f907 	bl	f2c8 <dmConnCcbById>
   110ba:	4605      	mov	r5, r0
   110bc:	b1b0      	cbz	r0, 110ec <smpScCatInitiatorBdAddr+0x40>
   110be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   110c2:	1c66      	adds	r6, r4, #1
   110c4:	b1a3      	cbz	r3, 110f0 <smpScCatInitiatorBdAddr+0x44>
   110c6:	f100 071a 	add.w	r7, r0, #26
   110ca:	4638      	mov	r0, r7
   110cc:	f002 fd11 	bl	13af2 <BdaIsZeros>
   110d0:	b920      	cbnz	r0, 110dc <smpScCatInitiatorBdAddr+0x30>
   110d2:	2301      	movs	r3, #1
   110d4:	7023      	strb	r3, [r4, #0]
   110d6:	2206      	movs	r2, #6
   110d8:	4639      	mov	r1, r7
   110da:	e003      	b.n	110e4 <smpScCatInitiatorBdAddr+0x38>
   110dc:	7d2b      	ldrb	r3, [r5, #20]
   110de:	7023      	strb	r3, [r4, #0]
   110e0:	2206      	movs	r2, #6
   110e2:	18a9      	adds	r1, r5, r2
   110e4:	4630      	mov	r0, r6
   110e6:	f002 fd59 	bl	13b9c <WStrReverseCpy>
   110ea:	3407      	adds	r4, #7
   110ec:	4620      	mov	r0, r4
   110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110f0:	f100 0720 	add.w	r7, r0, #32
   110f4:	4638      	mov	r0, r7
   110f6:	f002 fcfc 	bl	13af2 <BdaIsZeros>
   110fa:	2800      	cmp	r0, #0
   110fc:	d0e9      	beq.n	110d2 <smpScCatInitiatorBdAddr+0x26>
   110fe:	7ceb      	ldrb	r3, [r5, #19]
   11100:	7023      	strb	r3, [r4, #0]
   11102:	2206      	movs	r2, #6
   11104:	4629      	mov	r1, r5
   11106:	e7ed      	b.n	110e4 <smpScCatInitiatorBdAddr+0x38>

00011108 <smpScCatResponderBdAddr>:
   11108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1110a:	4607      	mov	r7, r0
   1110c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11110:	460c      	mov	r4, r1
   11112:	f7fe f8d9 	bl	f2c8 <dmConnCcbById>
   11116:	4605      	mov	r5, r0
   11118:	b1b0      	cbz	r0, 11148 <smpScCatResponderBdAddr+0x40>
   1111a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1111e:	1c66      	adds	r6, r4, #1
   11120:	b1a3      	cbz	r3, 1114c <smpScCatResponderBdAddr+0x44>
   11122:	f100 0720 	add.w	r7, r0, #32
   11126:	4638      	mov	r0, r7
   11128:	f002 fce3 	bl	13af2 <BdaIsZeros>
   1112c:	b920      	cbnz	r0, 11138 <smpScCatResponderBdAddr+0x30>
   1112e:	2301      	movs	r3, #1
   11130:	7023      	strb	r3, [r4, #0]
   11132:	2206      	movs	r2, #6
   11134:	4639      	mov	r1, r7
   11136:	e003      	b.n	11140 <smpScCatResponderBdAddr+0x38>
   11138:	7ceb      	ldrb	r3, [r5, #19]
   1113a:	7023      	strb	r3, [r4, #0]
   1113c:	2206      	movs	r2, #6
   1113e:	4629      	mov	r1, r5
   11140:	4630      	mov	r0, r6
   11142:	f002 fd2b 	bl	13b9c <WStrReverseCpy>
   11146:	3407      	adds	r4, #7
   11148:	4620      	mov	r0, r4
   1114a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1114c:	f100 071a 	add.w	r7, r0, #26
   11150:	4638      	mov	r0, r7
   11152:	f002 fcce 	bl	13af2 <BdaIsZeros>
   11156:	2800      	cmp	r0, #0
   11158:	d0e9      	beq.n	1112e <smpScCatResponderBdAddr+0x26>
   1115a:	7d2b      	ldrb	r3, [r5, #20]
   1115c:	7023      	strb	r3, [r4, #0]
   1115e:	2206      	movs	r2, #6
   11160:	18a9      	adds	r1, r5, r2
   11162:	e7ed      	b.n	11140 <smpScCatResponderBdAddr+0x38>

00011164 <smpScProcPairing>:
   11164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11166:	2300      	movs	r3, #0
   11168:	7013      	strb	r3, [r2, #0]
   1116a:	700b      	strb	r3, [r1, #0]
   1116c:	7cc3      	ldrb	r3, [r0, #19]
   1116e:	7c85      	ldrb	r5, [r0, #18]
   11170:	f013 0f08 	tst.w	r3, #8
   11174:	4604      	mov	r4, r0
   11176:	d039      	beq.n	111ec <smpScProcPairing+0x88>
   11178:	7e83      	ldrb	r3, [r0, #26]
   1117a:	071e      	lsls	r6, r3, #28
   1117c:	d536      	bpl.n	111ec <smpScProcPairing+0x88>
   1117e:	2d01      	cmp	r5, #1
   11180:	d002      	beq.n	11188 <smpScProcPairing+0x24>
   11182:	7e43      	ldrb	r3, [r0, #25]
   11184:	2b01      	cmp	r3, #1
   11186:	d137      	bne.n	111f8 <smpScProcPairing+0x94>
   11188:	2301      	movs	r3, #1
   1118a:	700b      	strb	r3, [r1, #0]
   1118c:	2500      	movs	r5, #0
   1118e:	780b      	ldrb	r3, [r1, #0]
   11190:	b97b      	cbnz	r3, 111b2 <smpScProcPairing+0x4e>
   11192:	7ce3      	ldrb	r3, [r4, #19]
   11194:	0758      	lsls	r0, r3, #29
   11196:	d402      	bmi.n	1119e <smpScProcPairing+0x3a>
   11198:	7ea3      	ldrb	r3, [r4, #26]
   1119a:	075b      	lsls	r3, r3, #29
   1119c:	d509      	bpl.n	111b2 <smpScProcPairing+0x4e>
   1119e:	7c60      	ldrb	r0, [r4, #17]
   111a0:	2803      	cmp	r0, #3
   111a2:	d006      	beq.n	111b2 <smpScProcPairing+0x4e>
   111a4:	7e23      	ldrb	r3, [r4, #24]
   111a6:	2b03      	cmp	r3, #3
   111a8:	d003      	beq.n	111b2 <smpScProcPairing+0x4e>
   111aa:	2801      	cmp	r0, #1
   111ac:	d826      	bhi.n	111fc <smpScProcPairing+0x98>
   111ae:	2b01      	cmp	r3, #1
   111b0:	d83d      	bhi.n	1122e <smpScProcPairing+0xca>
   111b2:	f894 c013 	ldrb.w	ip, [r4, #19]
   111b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   111ba:	f01c 0f08 	tst.w	ip, #8
   111be:	f000 808e 	beq.w	112de <smpScProcPairing+0x17a>
   111c2:	7ea7      	ldrb	r7, [r4, #26]
   111c4:	073e      	lsls	r6, r7, #28
   111c6:	f140 808a 	bpl.w	112de <smpScProcPairing+0x17a>
   111ca:	4b5a      	ldr	r3, [pc, #360]	; (11334 <smpScProcPairing+0x1d0>)
   111cc:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   111d0:	bb7e      	cbnz	r6, 11232 <smpScProcPairing+0xce>
   111d2:	f8ad 0004 	strh.w	r0, [sp, #4]
   111d6:	f240 3303 	movw	r3, #771	; 0x303
   111da:	a901      	add	r1, sp, #4
   111dc:	4620      	mov	r0, r4
   111de:	f8ad 3006 	strh.w	r3, [sp, #6]
   111e2:	f000 fde6 	bl	11db2 <smpSmExecute>
   111e6:	4630      	mov	r0, r6
   111e8:	b003      	add	sp, #12
   111ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111ec:	2d01      	cmp	r5, #1
   111ee:	d103      	bne.n	111f8 <smpScProcPairing+0x94>
   111f0:	7e63      	ldrb	r3, [r4, #25]
   111f2:	2b01      	cmp	r3, #1
   111f4:	d1cb      	bne.n	1118e <smpScProcPairing+0x2a>
   111f6:	e7c7      	b.n	11188 <smpScProcPairing+0x24>
   111f8:	2501      	movs	r5, #1
   111fa:	e7c8      	b.n	1118e <smpScProcPairing+0x2a>
   111fc:	2804      	cmp	r0, #4
   111fe:	d114      	bne.n	1122a <smpScProcPairing+0xc6>
   11200:	2b02      	cmp	r3, #2
   11202:	d014      	beq.n	1122e <smpScProcPairing+0xca>
   11204:	1f1f      	subs	r7, r3, #4
   11206:	427b      	negs	r3, r7
   11208:	417b      	adcs	r3, r7
   1120a:	7013      	strb	r3, [r2, #0]
   1120c:	7e20      	ldrb	r0, [r4, #24]
   1120e:	2802      	cmp	r0, #2
   11210:	d102      	bne.n	11218 <smpScProcPairing+0xb4>
   11212:	7c60      	ldrb	r0, [r4, #17]
   11214:	2802      	cmp	r0, #2
   11216:	d006      	beq.n	11226 <smpScProcPairing+0xc2>
   11218:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1121c:	2800      	cmp	r0, #0
   1121e:	bf08      	it	eq
   11220:	f083 0301 	eoreq.w	r3, r3, #1
   11224:	7013      	strb	r3, [r2, #0]
   11226:	2500      	movs	r5, #0
   11228:	e7c3      	b.n	111b2 <smpScProcPairing+0x4e>
   1122a:	2300      	movs	r3, #0
   1122c:	e7ed      	b.n	1120a <smpScProcPairing+0xa6>
   1122e:	2301      	movs	r3, #1
   11230:	e7eb      	b.n	1120a <smpScProcPairing+0xa6>
   11232:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11234:	f240 1601 	movw	r6, #257	; 0x101
   11238:	801e      	strh	r6, [r3, #0]
   1123a:	7812      	ldrb	r2, [r2, #0]
   1123c:	711a      	strb	r2, [r3, #4]
   1123e:	780a      	ldrb	r2, [r1, #0]
   11240:	b112      	cbz	r2, 11248 <smpScProcPairing+0xe4>
   11242:	2202      	movs	r2, #2
   11244:	705a      	strb	r2, [r3, #1]
   11246:	e017      	b.n	11278 <smpScProcPairing+0x114>
   11248:	7e22      	ldrb	r2, [r4, #24]
   1124a:	b9fd      	cbnz	r5, 1128c <smpScProcPairing+0x128>
   1124c:	2103      	movs	r1, #3
   1124e:	2a04      	cmp	r2, #4
   11250:	7059      	strb	r1, [r3, #1]
   11252:	d106      	bne.n	11262 <smpScProcPairing+0xfe>
   11254:	7c62      	ldrb	r2, [r4, #17]
   11256:	2a01      	cmp	r2, #1
   11258:	d001      	beq.n	1125e <smpScProcPairing+0xfa>
   1125a:	2a04      	cmp	r2, #4
   1125c:	d105      	bne.n	1126a <smpScProcPairing+0x106>
   1125e:	2204      	movs	r2, #4
   11260:	e7f0      	b.n	11244 <smpScProcPairing+0xe0>
   11262:	2a01      	cmp	r2, #1
   11264:	d101      	bne.n	1126a <smpScProcPairing+0x106>
   11266:	7c62      	ldrb	r2, [r4, #17]
   11268:	e7f7      	b.n	1125a <smpScProcPairing+0xf6>
   1126a:	f01c 0f10 	tst.w	ip, #16
   1126e:	d003      	beq.n	11278 <smpScProcPairing+0x114>
   11270:	06fa      	lsls	r2, r7, #27
   11272:	d501      	bpl.n	11278 <smpScProcPairing+0x114>
   11274:	2201      	movs	r2, #1
   11276:	709a      	strb	r2, [r3, #2]
   11278:	f8ad 0004 	strh.w	r0, [sp, #4]
   1127c:	4620      	mov	r0, r4
   1127e:	f7ff fd11 	bl	10ca4 <SmpScAllocScratchBuffers>
   11282:	b148      	cbz	r0, 11298 <smpScProcPairing+0x134>
   11284:	2310      	movs	r3, #16
   11286:	f88d 3006 	strb.w	r3, [sp, #6]
   1128a:	e009      	b.n	112a0 <smpScProcPairing+0x13c>
   1128c:	2a01      	cmp	r2, #1
   1128e:	d1f3      	bne.n	11278 <smpScProcPairing+0x114>
   11290:	7c62      	ldrb	r2, [r4, #17]
   11292:	2a01      	cmp	r2, #1
   11294:	d1f0      	bne.n	11278 <smpScProcPairing+0x114>
   11296:	e7e2      	b.n	1125e <smpScProcPairing+0xfa>
   11298:	f640 0303 	movw	r3, #2051	; 0x803
   1129c:	f8ad 3006 	strh.w	r3, [sp, #6]
   112a0:	a901      	add	r1, sp, #4
   112a2:	4620      	mov	r0, r4
   112a4:	f000 fd85 	bl	11db2 <smpSmExecute>
   112a8:	7ce2      	ldrb	r2, [r4, #19]
   112aa:	7ea1      	ldrb	r1, [r4, #26]
   112ac:	ea01 0302 	and.w	r3, r1, r2
   112b0:	bb6d      	cbnz	r5, 1130e <smpScProcPairing+0x1aa>
   112b2:	f043 0304 	orr.w	r3, r3, #4
   112b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   112ba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   112be:	2b00      	cmp	r3, #0
   112c0:	bf08      	it	eq
   112c2:	460a      	moveq	r2, r1
   112c4:	4b1c      	ldr	r3, [pc, #112]	; (11338 <smpScProcPairing+0x1d4>)
   112c6:	6819      	ldr	r1, [r3, #0]
   112c8:	b325      	cbz	r5, 11314 <smpScProcPairing+0x1b0>
   112ca:	798b      	ldrb	r3, [r1, #6]
   112cc:	f003 0304 	and.w	r3, r3, #4
   112d0:	421a      	tst	r2, r3
   112d2:	d01f      	beq.n	11314 <smpScProcPairing+0x1b0>
   112d4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   112d8:	f8ad 3004 	strh.w	r3, [sp, #4]
   112dc:	e007      	b.n	112ee <smpScProcPairing+0x18a>
   112de:	4b16      	ldr	r3, [pc, #88]	; (11338 <smpScProcPairing+0x1d4>)
   112e0:	681b      	ldr	r3, [r3, #0]
   112e2:	799b      	ldrb	r3, [r3, #6]
   112e4:	f013 0308 	ands.w	r3, r3, #8
   112e8:	d00b      	beq.n	11302 <smpScProcPairing+0x19e>
   112ea:	f8ad 0004 	strh.w	r0, [sp, #4]
   112ee:	f240 3303 	movw	r3, #771	; 0x303
   112f2:	a901      	add	r1, sp, #4
   112f4:	4620      	mov	r0, r4
   112f6:	f8ad 3006 	strh.w	r3, [sp, #6]
   112fa:	2600      	movs	r6, #0
   112fc:	f000 fd59 	bl	11db2 <smpSmExecute>
   11300:	e771      	b.n	111e6 <smpScProcPairing+0x82>
   11302:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11304:	7013      	strb	r3, [r2, #0]
   11306:	f8ad 0004 	strh.w	r0, [sp, #4]
   1130a:	2311      	movs	r3, #17
   1130c:	e7bb      	b.n	11286 <smpScProcPairing+0x122>
   1130e:	f023 0304 	bic.w	r3, r3, #4
   11312:	e7d0      	b.n	112b6 <smpScProcPairing+0x152>
   11314:	78cb      	ldrb	r3, [r1, #3]
   11316:	7d22      	ldrb	r2, [r4, #20]
   11318:	429a      	cmp	r2, r3
   1131a:	d302      	bcc.n	11322 <smpScProcPairing+0x1be>
   1131c:	7ee2      	ldrb	r2, [r4, #27]
   1131e:	429a      	cmp	r2, r3
   11320:	d206      	bcs.n	11330 <smpScProcPairing+0x1cc>
   11322:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11326:	f8ad 3004 	strh.w	r3, [sp, #4]
   1132a:	f240 6303 	movw	r3, #1539	; 0x603
   1132e:	e7e0      	b.n	112f2 <smpScProcPairing+0x18e>
   11330:	2601      	movs	r6, #1
   11332:	e758      	b.n	111e6 <smpScProcPairing+0x82>
   11334:	10003f14 	.word	0x10003f14
   11338:	10002bb8 	.word	0x10002bb8

0001133c <smpScAuthReq>:
   1133c:	b530      	push	{r4, r5, lr}
   1133e:	6b44      	ldr	r4, [r0, #52]	; 0x34
   11340:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11344:	7825      	ldrb	r5, [r4, #0]
   11346:	b087      	sub	sp, #28
   11348:	b98d      	cbnz	r5, 1136e <smpScAuthReq+0x32>
   1134a:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   1134e:	0764      	lsls	r4, r4, #29
   11350:	d510      	bpl.n	11374 <smpScAuthReq+0x38>
   11352:	f8ad 3000 	strh.w	r3, [sp]
   11356:	4668      	mov	r0, sp
   11358:	232e      	movs	r3, #46	; 0x2e
   1135a:	f88d 3002 	strb.w	r3, [sp, #2]
   1135e:	f88d 1004 	strb.w	r1, [sp, #4]
   11362:	f88d 2005 	strb.w	r2, [sp, #5]
   11366:	f7fe fe47 	bl	fff8 <DmSmpCbackExec>
   1136a:	b007      	add	sp, #28
   1136c:	bd30      	pop	{r4, r5, pc}
   1136e:	7864      	ldrb	r4, [r4, #1]
   11370:	2c02      	cmp	r4, #2
   11372:	d0ee      	beq.n	11352 <smpScAuthReq+0x16>
   11374:	f8ad 3000 	strh.w	r3, [sp]
   11378:	2304      	movs	r3, #4
   1137a:	f88d 3002 	strb.w	r3, [sp, #2]
   1137e:	2300      	movs	r3, #0
   11380:	f8ad 3004 	strh.w	r3, [sp, #4]
   11384:	f88d 3006 	strb.w	r3, [sp, #6]
   11388:	4669      	mov	r1, sp
   1138a:	2303      	movs	r3, #3
   1138c:	f88d 3014 	strb.w	r3, [sp, #20]
   11390:	f000 fd0f 	bl	11db2 <smpSmExecute>
   11394:	e7e9      	b.n	1136a <smpScAuthReq+0x2e>

00011396 <smpScActCleanup>:
   11396:	b510      	push	{r4, lr}
   11398:	4604      	mov	r4, r0
   1139a:	f000 fb17 	bl	119cc <smpActCleanup>
   1139e:	4620      	mov	r0, r4
   113a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   113a4:	f7ff bc9f 	b.w	10ce6 <SmpScFreeScratchBuffers>

000113a8 <smpScActPairingFailed>:
   113a8:	b538      	push	{r3, r4, r5, lr}
   113aa:	4604      	mov	r4, r0
   113ac:	460d      	mov	r5, r1
   113ae:	f7ff fff2 	bl	11396 <smpScActCleanup>
   113b2:	4629      	mov	r1, r5
   113b4:	4620      	mov	r0, r4
   113b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   113ba:	f000 bb1a 	b.w	119f2 <smpActPairingFailed>

000113be <smpScActPairingCancel>:
   113be:	b538      	push	{r3, r4, r5, lr}
   113c0:	4605      	mov	r5, r0
   113c2:	460c      	mov	r4, r1
   113c4:	78c9      	ldrb	r1, [r1, #3]
   113c6:	f000 fb03 	bl	119d0 <smpSendPairingFailed>
   113ca:	4621      	mov	r1, r4
   113cc:	4628      	mov	r0, r5
   113ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   113d2:	f7ff bfe9 	b.w	113a8 <smpScActPairingFailed>

000113d6 <smpScActAuthSelect>:
   113d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   113d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   113da:	684d      	ldr	r5, [r1, #4]
   113dc:	4604      	mov	r4, r0
   113de:	2220      	movs	r2, #32
   113e0:	6898      	ldr	r0, [r3, #8]
   113e2:	f105 0109 	add.w	r1, r5, #9
   113e6:	f002 fbd9 	bl	13b9c <WStrReverseCpy>
   113ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   113ec:	6898      	ldr	r0, [r3, #8]
   113ee:	2220      	movs	r2, #32
   113f0:	f105 0129 	add.w	r1, r5, #41	; 0x29
   113f4:	4410      	add	r0, r2
   113f6:	f002 fbd1 	bl	13b9c <WStrReverseCpy>
   113fa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   113fe:	f8ad 3004 	strh.w	r3, [sp, #4]
   11402:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11404:	785b      	ldrb	r3, [r3, #1]
   11406:	3b01      	subs	r3, #1
   11408:	2b03      	cmp	r3, #3
   1140a:	d810      	bhi.n	1142e <smpScActAuthSelect+0x58>
   1140c:	e8df f003 	tbb	[pc, r3]
   11410:	020d0b02 	.word	0x020d0b02
   11414:	2312      	movs	r3, #18
   11416:	f88d 3006 	strb.w	r3, [sp, #6]
   1141a:	a901      	add	r1, sp, #4
   1141c:	4620      	mov	r0, r4
   1141e:	f000 fcc8 	bl	11db2 <smpSmExecute>
   11422:	b003      	add	sp, #12
   11424:	bd30      	pop	{r4, r5, pc}
   11426:	2314      	movs	r3, #20
   11428:	e7f5      	b.n	11416 <smpScActAuthSelect+0x40>
   1142a:	2313      	movs	r3, #19
   1142c:	e7f3      	b.n	11416 <smpScActAuthSelect+0x40>
   1142e:	f640 0303 	movw	r3, #2051	; 0x803
   11432:	f8ad 3006 	strh.w	r3, [sp, #6]
   11436:	e7f0      	b.n	1141a <smpScActAuthSelect+0x44>

00011438 <smpScActPkSetup>:
   11438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1143a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1143c:	2200      	movs	r2, #0
   1143e:	70da      	strb	r2, [r3, #3]
   11440:	2103      	movs	r1, #3
   11442:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   11446:	f88d 2004 	strb.w	r2, [sp, #4]
   1144a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   1144e:	f8ad 1000 	strh.w	r1, [sp]
   11452:	791b      	ldrb	r3, [r3, #4]
   11454:	f88d 3005 	strb.w	r3, [sp, #5]
   11458:	212e      	movs	r1, #46	; 0x2e
   1145a:	4668      	mov	r0, sp
   1145c:	f88d 1002 	strb.w	r1, [sp, #2]
   11460:	f7fe fdca 	bl	fff8 <DmSmpCbackExec>
   11464:	b007      	add	sp, #28
   11466:	f85d fb04 	ldr.w	pc, [sp], #4

0001146a <smpScActJwncCalcF4>:
   1146a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1146c:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   11470:	4604      	mov	r4, r0
   11472:	460d      	mov	r5, r1
   11474:	b18e      	cbz	r6, 1149a <smpScActJwncCalcF4+0x30>
   11476:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11478:	689e      	ldr	r6, [r3, #8]
   1147a:	f7fe ff71 	bl	10360 <DmSecGetEccKey>
   1147e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11480:	68db      	ldr	r3, [r3, #12]
   11482:	3310      	adds	r3, #16
   11484:	9301      	str	r3, [sp, #4]
   11486:	2300      	movs	r3, #0
   11488:	9300      	str	r3, [sp, #0]
   1148a:	4632      	mov	r2, r6
   1148c:	4603      	mov	r3, r0
   1148e:	4629      	mov	r1, r5
   11490:	4620      	mov	r0, r4
   11492:	f7ff fc71 	bl	10d78 <SmpScCalcF4>
   11496:	b002      	add	sp, #8
   11498:	bd70      	pop	{r4, r5, r6, pc}
   1149a:	f7fe ff61 	bl	10360 <DmSecGetEccKey>
   1149e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   114a0:	68d3      	ldr	r3, [r2, #12]
   114a2:	3310      	adds	r3, #16
   114a4:	e9cd 6300 	strd	r6, r3, [sp]
   114a8:	6893      	ldr	r3, [r2, #8]
   114aa:	4602      	mov	r2, r0
   114ac:	e7ef      	b.n	1148e <smpScActJwncCalcF4+0x24>

000114ae <smpScActJwncCalcG2>:
   114ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   114b0:	460a      	mov	r2, r1
   114b2:	4604      	mov	r4, r0
   114b4:	460e      	mov	r6, r1
   114b6:	4601      	mov	r1, r0
   114b8:	2050      	movs	r0, #80	; 0x50
   114ba:	f7ff fc4b 	bl	10d54 <SmpScAlloc>
   114be:	4605      	mov	r5, r0
   114c0:	b1d8      	cbz	r0, 114fa <smpScActJwncCalcG2+0x4c>
   114c2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   114c6:	b1d3      	cbz	r3, 114fe <smpScActJwncCalcG2+0x50>
   114c8:	f7fe ff4a 	bl	10360 <DmSecGetEccKey>
   114cc:	2220      	movs	r2, #32
   114ce:	4601      	mov	r1, r0
   114d0:	4628      	mov	r0, r5
   114d2:	f7ff fcb3 	bl	10e3c <SmpScCat>
   114d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   114d8:	6899      	ldr	r1, [r3, #8]
   114da:	2220      	movs	r2, #32
   114dc:	f7ff fcae 	bl	10e3c <SmpScCat>
   114e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   114e2:	68d9      	ldr	r1, [r3, #12]
   114e4:	3110      	adds	r1, #16
   114e6:	f7ff fcaf 	bl	10e48 <SmpScCat128>
   114ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
   114ec:	9600      	str	r6, [sp, #0]
   114ee:	4623      	mov	r3, r4
   114f0:	2250      	movs	r2, #80	; 0x50
   114f2:	4629      	mov	r1, r5
   114f4:	68c0      	ldr	r0, [r0, #12]
   114f6:	f7ff fc11 	bl	10d1c <SmpScCmac>
   114fa:	b003      	add	sp, #12
   114fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11500:	2220      	movs	r2, #32
   11502:	6899      	ldr	r1, [r3, #8]
   11504:	f7ff fc9a 	bl	10e3c <SmpScCat>
   11508:	4607      	mov	r7, r0
   1150a:	f7fe ff29 	bl	10360 <DmSecGetEccKey>
   1150e:	2220      	movs	r2, #32
   11510:	4601      	mov	r1, r0
   11512:	4638      	mov	r0, r7
   11514:	e7e2      	b.n	114dc <smpScActJwncCalcG2+0x2e>

00011516 <smpScActJwncDisplay>:
   11516:	b510      	push	{r4, lr}
   11518:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1151a:	785b      	ldrb	r3, [r3, #1]
   1151c:	2b04      	cmp	r3, #4
   1151e:	b086      	sub	sp, #24
   11520:	4604      	mov	r4, r0
   11522:	d10f      	bne.n	11544 <smpScActJwncDisplay+0x2e>
   11524:	a802      	add	r0, sp, #8
   11526:	6849      	ldr	r1, [r1, #4]
   11528:	f002 fafd 	bl	13b26 <Calc128Cpy>
   1152c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11530:	f8ad 3004 	strh.w	r3, [sp, #4]
   11534:	a801      	add	r0, sp, #4
   11536:	2335      	movs	r3, #53	; 0x35
   11538:	f88d 3006 	strb.w	r3, [sp, #6]
   1153c:	f7fe fd5c 	bl	fff8 <DmSmpCbackExec>
   11540:	b006      	add	sp, #24
   11542:	bd10      	pop	{r4, pc}
   11544:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11548:	f8ad 3004 	strh.w	r3, [sp, #4]
   1154c:	a901      	add	r1, sp, #4
   1154e:	2315      	movs	r3, #21
   11550:	f88d 3006 	strb.w	r3, [sp, #6]
   11554:	f000 fc2d 	bl	11db2 <smpSmExecute>
   11558:	e7f2      	b.n	11540 <smpScActJwncDisplay+0x2a>

0001155a <smpScActPkKeypress>:
   1155a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1155c:	684c      	ldr	r4, [r1, #4]
   1155e:	7a22      	ldrb	r2, [r4, #8]
   11560:	2a0e      	cmp	r2, #14
   11562:	d10e      	bne.n	11582 <smpScActPkKeypress+0x28>
   11564:	7a63      	ldrb	r3, [r4, #9]
   11566:	f88d 3004 	strb.w	r3, [sp, #4]
   1156a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1156e:	f8ad 3000 	strh.w	r3, [sp]
   11572:	4668      	mov	r0, sp
   11574:	2336      	movs	r3, #54	; 0x36
   11576:	f88d 3002 	strb.w	r3, [sp, #2]
   1157a:	f7fe fd3d 	bl	fff8 <DmSmpCbackExec>
   1157e:	b003      	add	sp, #12
   11580:	bd30      	pop	{r4, r5, pc}
   11582:	2a03      	cmp	r2, #3
   11584:	d1fb      	bne.n	1157e <smpScActPkKeypress+0x24>
   11586:	221d      	movs	r2, #29
   11588:	708a      	strb	r2, [r1, #2]
   1158a:	f000 fc12 	bl	11db2 <smpSmExecute>
   1158e:	e7f6      	b.n	1157e <smpScActPkKeypress+0x24>

00011590 <smpScActPkSendKeypress>:
   11590:	b538      	push	{r3, r4, r5, lr}
   11592:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11594:	789b      	ldrb	r3, [r3, #2]
   11596:	4604      	mov	r4, r0
   11598:	460d      	mov	r5, r1
   1159a:	b1c3      	cbz	r3, 115ce <smpScActPkSendKeypress+0x3e>
   1159c:	f000 f9f6 	bl	1198c <smpStartRspTimer>
   115a0:	200a      	movs	r0, #10
   115a2:	f7ff faef 	bl	10b84 <smpMsgAlloc>
   115a6:	b148      	cbz	r0, 115bc <smpScActPkSendKeypress+0x2c>
   115a8:	230e      	movs	r3, #14
   115aa:	7203      	strb	r3, [r0, #8]
   115ac:	792b      	ldrb	r3, [r5, #4]
   115ae:	7243      	strb	r3, [r0, #9]
   115b0:	4601      	mov	r1, r0
   115b2:	4620      	mov	r0, r4
   115b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   115b8:	f7ff ba99 	b.w	10aee <smpSendPkt>
   115bc:	f640 0303 	movw	r3, #2051	; 0x803
   115c0:	806b      	strh	r3, [r5, #2]
   115c2:	4629      	mov	r1, r5
   115c4:	4620      	mov	r0, r4
   115c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   115ca:	f000 bbf2 	b.w	11db2 <smpSmExecute>
   115ce:	bd38      	pop	{r3, r4, r5, pc}

000115d0 <smpScActCalcSharedSecret>:
   115d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115d2:	b099      	sub	sp, #100	; 0x64
   115d4:	4605      	mov	r5, r0
   115d6:	f7fe fec3 	bl	10360 <DmSecGetEccKey>
   115da:	ae10      	add	r6, sp, #64	; 0x40
   115dc:	f100 0340 	add.w	r3, r0, #64	; 0x40
   115e0:	f100 0260 	add.w	r2, r0, #96	; 0x60
   115e4:	6818      	ldr	r0, [r3, #0]
   115e6:	6859      	ldr	r1, [r3, #4]
   115e8:	4634      	mov	r4, r6
   115ea:	c403      	stmia	r4!, {r0, r1}
   115ec:	3308      	adds	r3, #8
   115ee:	4293      	cmp	r3, r2
   115f0:	4626      	mov	r6, r4
   115f2:	d1f7      	bne.n	115e4 <smpScActCalcSharedSecret+0x14>
   115f4:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   115f6:	68b3      	ldr	r3, [r6, #8]
   115f8:	466a      	mov	r2, sp
   115fa:	f103 0c20 	add.w	ip, r3, #32
   115fe:	4617      	mov	r7, r2
   11600:	6818      	ldr	r0, [r3, #0]
   11602:	6859      	ldr	r1, [r3, #4]
   11604:	4614      	mov	r4, r2
   11606:	c403      	stmia	r4!, {r0, r1}
   11608:	3308      	adds	r3, #8
   1160a:	4563      	cmp	r3, ip
   1160c:	4622      	mov	r2, r4
   1160e:	d1f7      	bne.n	11600 <smpScActCalcSharedSecret+0x30>
   11610:	68b3      	ldr	r3, [r6, #8]
   11612:	ac08      	add	r4, sp, #32
   11614:	f103 0640 	add.w	r6, r3, #64	; 0x40
   11618:	3320      	adds	r3, #32
   1161a:	6818      	ldr	r0, [r3, #0]
   1161c:	6859      	ldr	r1, [r3, #4]
   1161e:	4622      	mov	r2, r4
   11620:	c203      	stmia	r2!, {r0, r1}
   11622:	3308      	adds	r3, #8
   11624:	42b3      	cmp	r3, r6
   11626:	4614      	mov	r4, r2
   11628:	d1f7      	bne.n	1161a <smpScActCalcSharedSecret+0x4a>
   1162a:	4905      	ldr	r1, [pc, #20]	; (11640 <smpScActCalcSharedSecret+0x70>)
   1162c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11630:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11634:	2318      	movs	r3, #24
   11636:	4638      	mov	r0, r7
   11638:	f007 f916 	bl	18868 <SecEccGenSharedSecret>
   1163c:	b019      	add	sp, #100	; 0x64
   1163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11640:	10003f14 	.word	0x10003f14

00011644 <smpScActCalcF5TKey>:
   11644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11648:	460a      	mov	r2, r1
   1164a:	b086      	sub	sp, #24
   1164c:	4680      	mov	r8, r0
   1164e:	460c      	mov	r4, r1
   11650:	4601      	mov	r1, r0
   11652:	2020      	movs	r0, #32
   11654:	f7ff fb7e 	bl	10d54 <SmpScAlloc>
   11658:	4607      	mov	r7, r0
   1165a:	b1e8      	cbz	r0, 11698 <smpScActCalcF5TKey+0x54>
   1165c:	4a10      	ldr	r2, [pc, #64]	; (116a0 <smpScActCalcF5TKey+0x5c>)
   1165e:	ad02      	add	r5, sp, #8
   11660:	f102 0310 	add.w	r3, r2, #16
   11664:	46ac      	mov	ip, r5
   11666:	6810      	ldr	r0, [r2, #0]
   11668:	6851      	ldr	r1, [r2, #4]
   1166a:	462e      	mov	r6, r5
   1166c:	c603      	stmia	r6!, {r0, r1}
   1166e:	3208      	adds	r2, #8
   11670:	429a      	cmp	r2, r3
   11672:	4635      	mov	r5, r6
   11674:	d1f7      	bne.n	11666 <smpScActCalcF5TKey+0x22>
   11676:	1d22      	adds	r2, r4, #4
   11678:	463b      	mov	r3, r7
   1167a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   1167e:	f852 0b04 	ldr.w	r0, [r2], #4
   11682:	f843 0b04 	str.w	r0, [r3], #4
   11686:	428a      	cmp	r2, r1
   11688:	d1f9      	bne.n	1167e <smpScActCalcF5TKey+0x3a>
   1168a:	9400      	str	r4, [sp, #0]
   1168c:	4643      	mov	r3, r8
   1168e:	2220      	movs	r2, #32
   11690:	4639      	mov	r1, r7
   11692:	4660      	mov	r0, ip
   11694:	f7ff fb42 	bl	10d1c <SmpScCmac>
   11698:	b006      	add	sp, #24
   1169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1169e:	bf00      	nop
   116a0:	000231c4 	.word	0x000231c4

000116a4 <smpScActCalcF5MacKey>:
   116a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   116a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   116a8:	4604      	mov	r4, r0
   116aa:	6918      	ldr	r0, [r3, #16]
   116ac:	460e      	mov	r6, r1
   116ae:	3010      	adds	r0, #16
   116b0:	6849      	ldr	r1, [r1, #4]
   116b2:	f002 fa38 	bl	13b26 <Calc128Cpy>
   116b6:	4632      	mov	r2, r6
   116b8:	4621      	mov	r1, r4
   116ba:	2035      	movs	r0, #53	; 0x35
   116bc:	f7ff fb4a 	bl	10d54 <SmpScAlloc>
   116c0:	4605      	mov	r5, r0
   116c2:	b318      	cbz	r0, 1170c <smpScActCalcF5MacKey+0x68>
   116c4:	2700      	movs	r7, #0
   116c6:	2204      	movs	r2, #4
   116c8:	7007      	strb	r7, [r0, #0]
   116ca:	4911      	ldr	r1, [pc, #68]	; (11710 <smpScActCalcF5MacKey+0x6c>)
   116cc:	3001      	adds	r0, #1
   116ce:	f7ff fbb5 	bl	10e3c <SmpScCat>
   116d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116d4:	68d9      	ldr	r1, [r3, #12]
   116d6:	f7ff fbb7 	bl	10e48 <SmpScCat128>
   116da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116dc:	68d9      	ldr	r1, [r3, #12]
   116de:	3110      	adds	r1, #16
   116e0:	f7ff fbb2 	bl	10e48 <SmpScCat128>
   116e4:	4601      	mov	r1, r0
   116e6:	4620      	mov	r0, r4
   116e8:	f7ff fce0 	bl	110ac <smpScCatInitiatorBdAddr>
   116ec:	4601      	mov	r1, r0
   116ee:	4620      	mov	r0, r4
   116f0:	f7ff fd0a 	bl	11108 <smpScCatResponderBdAddr>
   116f4:	2301      	movs	r3, #1
   116f6:	7003      	strb	r3, [r0, #0]
   116f8:	7047      	strb	r7, [r0, #1]
   116fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116fc:	6918      	ldr	r0, [r3, #16]
   116fe:	9600      	str	r6, [sp, #0]
   11700:	4623      	mov	r3, r4
   11702:	2235      	movs	r2, #53	; 0x35
   11704:	4629      	mov	r1, r5
   11706:	3010      	adds	r0, #16
   11708:	f7ff fb08 	bl	10d1c <SmpScCmac>
   1170c:	b003      	add	sp, #12
   1170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11710:	000231d4 	.word	0x000231d4

00011714 <smpScActCalcF5Ltk>:
   11714:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11718:	4604      	mov	r4, r0
   1171a:	460e      	mov	r6, r1
   1171c:	6918      	ldr	r0, [r3, #16]
   1171e:	6849      	ldr	r1, [r1, #4]
   11720:	f002 fa01 	bl	13b26 <Calc128Cpy>
   11724:	4632      	mov	r2, r6
   11726:	4621      	mov	r1, r4
   11728:	2035      	movs	r0, #53	; 0x35
   1172a:	f7ff fb13 	bl	10d54 <SmpScAlloc>
   1172e:	4605      	mov	r5, r0
   11730:	b318      	cbz	r0, 1177a <smpScActCalcF5Ltk+0x66>
   11732:	2701      	movs	r7, #1
   11734:	2204      	movs	r2, #4
   11736:	7007      	strb	r7, [r0, #0]
   11738:	4911      	ldr	r1, [pc, #68]	; (11780 <smpScActCalcF5Ltk+0x6c>)
   1173a:	4438      	add	r0, r7
   1173c:	f7ff fb7e 	bl	10e3c <SmpScCat>
   11740:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11742:	68d9      	ldr	r1, [r3, #12]
   11744:	f7ff fb80 	bl	10e48 <SmpScCat128>
   11748:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1174a:	68d9      	ldr	r1, [r3, #12]
   1174c:	3110      	adds	r1, #16
   1174e:	f7ff fb7b 	bl	10e48 <SmpScCat128>
   11752:	4601      	mov	r1, r0
   11754:	4620      	mov	r0, r4
   11756:	f7ff fca9 	bl	110ac <smpScCatInitiatorBdAddr>
   1175a:	4601      	mov	r1, r0
   1175c:	4620      	mov	r0, r4
   1175e:	f7ff fcd3 	bl	11108 <smpScCatResponderBdAddr>
   11762:	2300      	movs	r3, #0
   11764:	7007      	strb	r7, [r0, #0]
   11766:	7043      	strb	r3, [r0, #1]
   11768:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1176a:	6918      	ldr	r0, [r3, #16]
   1176c:	9600      	str	r6, [sp, #0]
   1176e:	4623      	mov	r3, r4
   11770:	2235      	movs	r2, #53	; 0x35
   11772:	4629      	mov	r1, r5
   11774:	3010      	adds	r0, #16
   11776:	f7ff fad1 	bl	10d1c <SmpScCmac>
   1177a:	b003      	add	sp, #12
   1177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1177e:	bf00      	nop
   11780:	000231d4 	.word	0x000231d4

00011784 <smpScActDHKeyCalcF6Ea>:
   11784:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11786:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11788:	4604      	mov	r4, r0
   1178a:	6918      	ldr	r0, [r3, #16]
   1178c:	2210      	movs	r2, #16
   1178e:	4410      	add	r0, r2
   11790:	460d      	mov	r5, r1
   11792:	6849      	ldr	r1, [r1, #4]
   11794:	f002 fa02 	bl	13b9c <WStrReverseCpy>
   11798:	462a      	mov	r2, r5
   1179a:	4621      	mov	r1, r4
   1179c:	2041      	movs	r0, #65	; 0x41
   1179e:	f7ff fad9 	bl	10d54 <SmpScAlloc>
   117a2:	4606      	mov	r6, r0
   117a4:	b318      	cbz	r0, 117ee <smpScActDHKeyCalcF6Ea+0x6a>
   117a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117a8:	68d9      	ldr	r1, [r3, #12]
   117aa:	f7ff fb4d 	bl	10e48 <SmpScCat128>
   117ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117b0:	68d9      	ldr	r1, [r3, #12]
   117b2:	3110      	adds	r1, #16
   117b4:	f7ff fb48 	bl	10e48 <SmpScCat128>
   117b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117ba:	68d9      	ldr	r1, [r3, #12]
   117bc:	3130      	adds	r1, #48	; 0x30
   117be:	f7ff fb43 	bl	10e48 <SmpScCat128>
   117c2:	7ce3      	ldrb	r3, [r4, #19]
   117c4:	7003      	strb	r3, [r0, #0]
   117c6:	7ca3      	ldrb	r3, [r4, #18]
   117c8:	7043      	strb	r3, [r0, #1]
   117ca:	7c63      	ldrb	r3, [r4, #17]
   117cc:	7083      	strb	r3, [r0, #2]
   117ce:	1cc1      	adds	r1, r0, #3
   117d0:	4620      	mov	r0, r4
   117d2:	f7ff fc6b 	bl	110ac <smpScCatInitiatorBdAddr>
   117d6:	4601      	mov	r1, r0
   117d8:	4620      	mov	r0, r4
   117da:	f7ff fc95 	bl	11108 <smpScCatResponderBdAddr>
   117de:	6b60      	ldr	r0, [r4, #52]	; 0x34
   117e0:	9500      	str	r5, [sp, #0]
   117e2:	4623      	mov	r3, r4
   117e4:	2241      	movs	r2, #65	; 0x41
   117e6:	4631      	mov	r1, r6
   117e8:	6900      	ldr	r0, [r0, #16]
   117ea:	f7ff fa97 	bl	10d1c <SmpScCmac>
   117ee:	b002      	add	sp, #8
   117f0:	bd70      	pop	{r4, r5, r6, pc}

000117f2 <smpScActDHKeyCalcF6Eb>:
   117f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   117f4:	460a      	mov	r2, r1
   117f6:	4604      	mov	r4, r0
   117f8:	460d      	mov	r5, r1
   117fa:	4601      	mov	r1, r0
   117fc:	2041      	movs	r0, #65	; 0x41
   117fe:	f7ff faa9 	bl	10d54 <SmpScAlloc>
   11802:	4606      	mov	r6, r0
   11804:	b318      	cbz	r0, 1184e <smpScActDHKeyCalcF6Eb+0x5c>
   11806:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11808:	68d9      	ldr	r1, [r3, #12]
   1180a:	3110      	adds	r1, #16
   1180c:	f7ff fb1c 	bl	10e48 <SmpScCat128>
   11810:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11812:	68d9      	ldr	r1, [r3, #12]
   11814:	f7ff fb18 	bl	10e48 <SmpScCat128>
   11818:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1181a:	68d9      	ldr	r1, [r3, #12]
   1181c:	3120      	adds	r1, #32
   1181e:	f7ff fb13 	bl	10e48 <SmpScCat128>
   11822:	7ea3      	ldrb	r3, [r4, #26]
   11824:	7003      	strb	r3, [r0, #0]
   11826:	7e63      	ldrb	r3, [r4, #25]
   11828:	7043      	strb	r3, [r0, #1]
   1182a:	7e23      	ldrb	r3, [r4, #24]
   1182c:	7083      	strb	r3, [r0, #2]
   1182e:	1cc1      	adds	r1, r0, #3
   11830:	4620      	mov	r0, r4
   11832:	f7ff fc69 	bl	11108 <smpScCatResponderBdAddr>
   11836:	4601      	mov	r1, r0
   11838:	4620      	mov	r0, r4
   1183a:	f7ff fc37 	bl	110ac <smpScCatInitiatorBdAddr>
   1183e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11840:	9500      	str	r5, [sp, #0]
   11842:	4623      	mov	r3, r4
   11844:	2241      	movs	r2, #65	; 0x41
   11846:	4631      	mov	r1, r6
   11848:	6900      	ldr	r0, [r0, #16]
   1184a:	f7ff fa67 	bl	10d1c <SmpScCmac>
   1184e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11850:	6869      	ldr	r1, [r5, #4]
   11852:	68d8      	ldr	r0, [r3, #12]
   11854:	b002      	add	sp, #8
   11856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1185a:	f002 b964 	b.w	13b26 <Calc128Cpy>
   1185e:	bf00      	nop

00011860 <SmpiScInit>:
   11860:	4b02      	ldr	r3, [pc, #8]	; (1186c <SmpiScInit+0xc>)
   11862:	4a03      	ldr	r2, [pc, #12]	; (11870 <SmpiScInit+0x10>)
   11864:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   11868:	f7ff bab8 	b.w	10ddc <SmpScInit>
   1186c:	10003f14 	.word	0x10003f14
   11870:	000231d8 	.word	0x000231d8

00011874 <smpiStateStr>:
   11874:	2824      	cmp	r0, #36	; 0x24
   11876:	bf9d      	ittte	ls
   11878:	4b02      	ldrls	r3, [pc, #8]	; (11884 <smpiStateStr+0x10>)
   1187a:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   1187e:	68c0      	ldrls	r0, [r0, #12]
   11880:	4801      	ldrhi	r0, [pc, #4]	; (11888 <smpiStateStr+0x14>)
   11882:	4770      	bx	lr
   11884:	000231d8 	.word	0x000231d8
   11888:	00025dfd 	.word	0x00025dfd

0001188c <SmprScInit>:
   1188c:	4b02      	ldr	r3, [pc, #8]	; (11898 <SmprScInit+0xc>)
   1188e:	4a03      	ldr	r2, [pc, #12]	; (1189c <SmprScInit+0x10>)
   11890:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11894:	f7ff baa2 	b.w	10ddc <SmpScInit>
   11898:	10003f14 	.word	0x10003f14
   1189c:	00023504 	.word	0x00023504

000118a0 <smprStateStr>:
   118a0:	2824      	cmp	r0, #36	; 0x24
   118a2:	bf9d      	ittte	ls
   118a4:	4b02      	ldrls	r3, [pc, #8]	; (118b0 <smprStateStr+0x10>)
   118a6:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   118aa:	68c0      	ldrls	r0, [r0, #12]
   118ac:	4801      	ldrhi	r0, [pc, #4]	; (118b4 <smprStateStr+0x14>)
   118ae:	4770      	bx	lr
   118b0:	00023504 	.word	0x00023504
   118b4:	00025fd1 	.word	0x00025fd1

000118b8 <SmprInit>:
   118b8:	4b05      	ldr	r3, [pc, #20]	; (118d0 <SmprInit+0x18>)
   118ba:	4a06      	ldr	r2, [pc, #24]	; (118d4 <SmprInit+0x1c>)
   118bc:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   118c0:	4a05      	ldr	r2, [pc, #20]	; (118d8 <SmprInit+0x20>)
   118c2:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   118c6:	4a05      	ldr	r2, [pc, #20]	; (118dc <SmprInit+0x24>)
   118c8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   118cc:	4770      	bx	lr
   118ce:	bf00      	nop
   118d0:	10003f14 	.word	0x10003f14
   118d4:	00023850 	.word	0x00023850
   118d8:	00011e15 	.word	0x00011e15
   118dc:	00011f01 	.word	0x00011f01

000118e0 <DmSmpEncryptReq>:
   118e0:	b570      	push	{r4, r5, r6, lr}
   118e2:	460d      	mov	r5, r1
   118e4:	4614      	mov	r4, r2
   118e6:	f7fd fcef 	bl	f2c8 <dmConnCcbById>
   118ea:	b148      	cbz	r0, 11900 <DmSmpEncryptReq+0x20>
   118ec:	2200      	movs	r2, #0
   118ee:	7605      	strb	r5, [r0, #24]
   118f0:	7482      	strb	r2, [r0, #18]
   118f2:	4623      	mov	r3, r4
   118f4:	4903      	ldr	r1, [pc, #12]	; (11904 <DmSmpEncryptReq+0x24>)
   118f6:	8980      	ldrh	r0, [r0, #12]
   118f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   118fc:	f002 bef9 	b.w	146f2 <HciLeStartEncryptionCmd>
   11900:	bd70      	pop	{r4, r5, r6, pc}
   11902:	bf00      	nop
   11904:	00023994 	.word	0x00023994

00011908 <DmSecPairReq>:
   11908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1190c:	4681      	mov	r9, r0
   1190e:	2008      	movs	r0, #8
   11910:	4688      	mov	r8, r1
   11912:	4617      	mov	r7, r2
   11914:	461e      	mov	r6, r3
   11916:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1191a:	f008 fde2 	bl	1a4e2 <WsfMsgAlloc>
   1191e:	b180      	cbz	r0, 11942 <DmSecPairReq+0x3a>
   11920:	2301      	movs	r3, #1
   11922:	f006 0607 	and.w	r6, r6, #7
   11926:	f005 0507 	and.w	r5, r5, #7
   1192a:	7083      	strb	r3, [r0, #2]
   1192c:	f880 8004 	strb.w	r8, [r0, #4]
   11930:	7147      	strb	r7, [r0, #5]
   11932:	7186      	strb	r6, [r0, #6]
   11934:	71c5      	strb	r5, [r0, #7]
   11936:	f8a0 9000 	strh.w	r9, [r0]
   1193a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1193e:	f7ff b924 	b.w	10b8a <SmpDmMsgSend>
   11942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011946 <DmSecEncryptReq>:
   11946:	b570      	push	{r4, r5, r6, lr}
   11948:	4606      	mov	r6, r0
   1194a:	2020      	movs	r0, #32
   1194c:	460d      	mov	r5, r1
   1194e:	4614      	mov	r4, r2
   11950:	f008 fdc7 	bl	1a4e2 <WsfMsgAlloc>
   11954:	b1b8      	cbz	r0, 11986 <DmSecEncryptReq+0x40>
   11956:	2350      	movs	r3, #80	; 0x50
   11958:	7083      	strb	r3, [r0, #2]
   1195a:	4603      	mov	r3, r0
   1195c:	4622      	mov	r2, r4
   1195e:	f823 6b04 	strh.w	r6, [r3], #4
   11962:	f104 0118 	add.w	r1, r4, #24
   11966:	f852 4b04 	ldr.w	r4, [r2], #4
   1196a:	f843 4b04 	str.w	r4, [r3], #4
   1196e:	428a      	cmp	r2, r1
   11970:	d1f9      	bne.n	11966 <DmSecEncryptReq+0x20>
   11972:	8812      	ldrh	r2, [r2, #0]
   11974:	801a      	strh	r2, [r3, #0]
   11976:	4b04      	ldr	r3, [pc, #16]	; (11988 <DmSecEncryptReq+0x42>)
   11978:	7785      	strb	r5, [r0, #30]
   1197a:	4601      	mov	r1, r0
   1197c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11980:	7b18      	ldrb	r0, [r3, #12]
   11982:	f008 bdd2 	b.w	1a52a <WsfMsgSend>
   11986:	bd70      	pop	{r4, r5, r6, pc}
   11988:	10003e48 	.word	0x10003e48

0001198c <smpStartRspTimer>:
   1198c:	f24e 130f 	movw	r3, #57615	; 0xe10f
   11990:	8183      	strh	r3, [r0, #12]
   11992:	211e      	movs	r1, #30
   11994:	f008 bf5e 	b.w	1a854 <WsfTimerStartSec>

00011998 <smpActNone>:
   11998:	4770      	bx	lr

0001199a <smpCleanup>:
   1199a:	b510      	push	{r4, lr}
   1199c:	4604      	mov	r4, r0
   1199e:	6a00      	ldr	r0, [r0, #32]
   119a0:	b118      	cbz	r0, 119aa <smpCleanup+0x10>
   119a2:	f008 fd4f 	bl	1a444 <WsfBufFree>
   119a6:	2300      	movs	r3, #0
   119a8:	6223      	str	r3, [r4, #32]
   119aa:	4620      	mov	r0, r4
   119ac:	f008 ff78 	bl	1a8a0 <WsfTimerStop>
   119b0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   119b4:	2300      	movs	r3, #0
   119b6:	429a      	cmp	r2, r3
   119b8:	bf14      	ite	ne
   119ba:	220b      	movne	r2, #11
   119bc:	2201      	moveq	r2, #1
   119be:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   119c2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   119c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   119ca:	bd10      	pop	{r4, pc}

000119cc <smpActCleanup>:
   119cc:	f7ff bfe5 	b.w	1199a <smpCleanup>

000119d0 <smpSendPairingFailed>:
   119d0:	b538      	push	{r3, r4, r5, lr}
   119d2:	4604      	mov	r4, r0
   119d4:	200a      	movs	r0, #10
   119d6:	460d      	mov	r5, r1
   119d8:	f7ff f8d4 	bl	10b84 <smpMsgAlloc>
   119dc:	b140      	cbz	r0, 119f0 <smpSendPairingFailed+0x20>
   119de:	2305      	movs	r3, #5
   119e0:	7203      	strb	r3, [r0, #8]
   119e2:	7245      	strb	r5, [r0, #9]
   119e4:	4601      	mov	r1, r0
   119e6:	4620      	mov	r0, r4
   119e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119ec:	f7ff b87f 	b.w	10aee <smpSendPkt>
   119f0:	bd38      	pop	{r3, r4, r5, pc}

000119f2 <smpActPairingFailed>:
   119f2:	b538      	push	{r3, r4, r5, lr}
   119f4:	4605      	mov	r5, r0
   119f6:	460c      	mov	r4, r1
   119f8:	f7ff ffcf 	bl	1199a <smpCleanup>
   119fc:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   11a00:	2200      	movs	r2, #0
   11a02:	2101      	movs	r1, #1
   11a04:	f7fd fee0 	bl	f7c8 <DmConnSetIdle>
   11a08:	232b      	movs	r3, #43	; 0x2b
   11a0a:	70a3      	strb	r3, [r4, #2]
   11a0c:	4620      	mov	r0, r4
   11a0e:	f7fe faf3 	bl	fff8 <DmSmpCbackExec>
   11a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a16:	f7fe bca3 	b.w	10360 <DmSecGetEccKey>

00011a1a <smpActPairingCancel>:
   11a1a:	b538      	push	{r3, r4, r5, lr}
   11a1c:	4605      	mov	r5, r0
   11a1e:	460c      	mov	r4, r1
   11a20:	78c9      	ldrb	r1, [r1, #3]
   11a22:	f7ff ffd5 	bl	119d0 <smpSendPairingFailed>
   11a26:	4621      	mov	r1, r4
   11a28:	4628      	mov	r0, r5
   11a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a2e:	f7ff bfe0 	b.w	119f2 <smpActPairingFailed>

00011a32 <smpActStorePin>:
   11a32:	b538      	push	{r3, r4, r5, lr}
   11a34:	460c      	mov	r4, r1
   11a36:	7d0a      	ldrb	r2, [r1, #20]
   11a38:	4605      	mov	r5, r0
   11a3a:	3104      	adds	r1, #4
   11a3c:	6a00      	ldr	r0, [r0, #32]
   11a3e:	f7fa fb8f 	bl	c160 <memcpy>
   11a42:	7d23      	ldrb	r3, [r4, #20]
   11a44:	2b03      	cmp	r3, #3
   11a46:	d107      	bne.n	11a58 <smpActStorePin+0x26>
   11a48:	6a28      	ldr	r0, [r5, #32]
   11a4a:	220d      	movs	r2, #13
   11a4c:	2100      	movs	r1, #0
   11a4e:	3003      	adds	r0, #3
   11a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a54:	f7fa bc82 	b.w	c35c <memset>
   11a58:	bd38      	pop	{r3, r4, r5, pc}

00011a5a <smpActPairCnfCalc1>:
   11a5a:	b510      	push	{r4, lr}
   11a5c:	4604      	mov	r4, r0
   11a5e:	f7ff ffe8 	bl	11a32 <smpActStorePin>
   11a62:	6a20      	ldr	r0, [r4, #32]
   11a64:	2110      	movs	r1, #16
   11a66:	3030      	adds	r0, #48	; 0x30
   11a68:	f007 f81a 	bl	18aa0 <SecRand>
   11a6c:	6a21      	ldr	r1, [r4, #32]
   11a6e:	4620      	mov	r0, r4
   11a70:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11a78:	f7fe bee0 	b.w	1083c <smpCalcC1Part1>

00011a7c <smpActPairCnfCalc2>:
   11a7c:	684a      	ldr	r2, [r1, #4]
   11a7e:	6a01      	ldr	r1, [r0, #32]
   11a80:	f7fe bf5e 	b.w	10940 <smpCalcC1Part2>

00011a84 <smpActSendPairCnf>:
   11a84:	b538      	push	{r3, r4, r5, lr}
   11a86:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   11a8a:	2b00      	cmp	r3, #0
   11a8c:	bf14      	ite	ne
   11a8e:	2303      	movne	r3, #3
   11a90:	2304      	moveq	r3, #4
   11a92:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   11a96:	4604      	mov	r4, r0
   11a98:	460d      	mov	r5, r1
   11a9a:	f7ff ff77 	bl	1198c <smpStartRspTimer>
   11a9e:	2019      	movs	r0, #25
   11aa0:	f7ff f870 	bl	10b84 <smpMsgAlloc>
   11aa4:	b190      	cbz	r0, 11acc <smpActSendPairCnf+0x48>
   11aa6:	2303      	movs	r3, #3
   11aa8:	7203      	strb	r3, [r0, #8]
   11aaa:	686b      	ldr	r3, [r5, #4]
   11aac:	f100 0209 	add.w	r2, r0, #9
   11ab0:	f103 0110 	add.w	r1, r3, #16
   11ab4:	f853 5b04 	ldr.w	r5, [r3], #4
   11ab8:	f842 5b04 	str.w	r5, [r2], #4
   11abc:	428b      	cmp	r3, r1
   11abe:	d1f9      	bne.n	11ab4 <smpActSendPairCnf+0x30>
   11ac0:	4601      	mov	r1, r0
   11ac2:	4620      	mov	r0, r4
   11ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11ac8:	f7ff b811 	b.w	10aee <smpSendPkt>
   11acc:	bd38      	pop	{r3, r4, r5, pc}

00011ace <smpActPairCnfVerCalc1>:
   11ace:	684b      	ldr	r3, [r1, #4]
   11ad0:	6a01      	ldr	r1, [r0, #32]
   11ad2:	f103 0209 	add.w	r2, r3, #9
   11ad6:	b430      	push	{r4, r5}
   11ad8:	3110      	adds	r1, #16
   11ada:	4614      	mov	r4, r2
   11adc:	3319      	adds	r3, #25
   11ade:	f854 5b04 	ldr.w	r5, [r4], #4
   11ae2:	f841 5b04 	str.w	r5, [r1], #4
   11ae6:	429c      	cmp	r4, r3
   11ae8:	d1f9      	bne.n	11ade <smpActPairCnfVerCalc1+0x10>
   11aea:	6a01      	ldr	r1, [r0, #32]
   11aec:	bc30      	pop	{r4, r5}
   11aee:	f7fe bea5 	b.w	1083c <smpCalcC1Part1>

00011af2 <smpActPairCnfVerCalc2>:
   11af2:	f7ff bfc3 	b.w	11a7c <smpActPairCnfCalc2>

00011af6 <smpSendKey>:
   11af6:	b5f0      	push	{r4, r5, r6, r7, lr}
   11af8:	4f5d      	ldr	r7, [pc, #372]	; (11c70 <smpSendKey+0x17a>)
   11afa:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   11afe:	b08b      	sub	sp, #44	; 0x2c
   11b00:	4604      	mov	r4, r0
   11b02:	460e      	mov	r6, r1
   11b04:	b343      	cbz	r3, 11b58 <smpSendKey+0x62>
   11b06:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	b32b      	cbz	r3, 11b58 <smpSendKey+0x62>
   11b0c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   11b10:	bb13      	cbnz	r3, 11b58 <smpSendKey+0x62>
   11b12:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11b16:	f7fd fe81 	bl	f81c <DmConnRole>
   11b1a:	bb48      	cbnz	r0, 11b70 <smpSendKey+0x7a>
   11b1c:	2302      	movs	r3, #2
   11b1e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   11b22:	232f      	movs	r3, #47	; 0x2f
   11b24:	f88d 3006 	strb.w	r3, [sp, #6]
   11b28:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11b2c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11b30:	2303      	movs	r3, #3
   11b32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   11b36:	2300      	movs	r3, #0
   11b38:	e9cd 3306 	strd	r3, r3, [sp, #24]
   11b3c:	f8ad 3020 	strh.w	r3, [sp, #32]
   11b40:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11b42:	6919      	ldr	r1, [r3, #16]
   11b44:	a802      	add	r0, sp, #8
   11b46:	3110      	adds	r1, #16
   11b48:	f001 ffed 	bl	13b26 <Calc128Cpy>
   11b4c:	a801      	add	r0, sp, #4
   11b4e:	f7fe fa53 	bl	fff8 <DmSmpCbackExec>
   11b52:	2307      	movs	r3, #7
   11b54:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11b58:	2e00      	cmp	r6, #0
   11b5a:	f000 8086 	beq.w	11c6a <smpSendKey+0x174>
   11b5e:	2e01      	cmp	r6, #1
   11b60:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11b64:	d106      	bne.n	11b74 <smpSendKey+0x7e>
   11b66:	2b07      	cmp	r3, #7
   11b68:	d106      	bne.n	11b78 <smpSendKey+0x82>
   11b6a:	4630      	mov	r0, r6
   11b6c:	b00b      	add	sp, #44	; 0x2c
   11b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b70:	2301      	movs	r3, #1
   11b72:	e7d4      	b.n	11b1e <smpSendKey+0x28>
   11b74:	2e03      	cmp	r6, #3
   11b76:	d801      	bhi.n	11b7c <smpSendKey+0x86>
   11b78:	2b09      	cmp	r3, #9
   11b7a:	d076      	beq.n	11c6a <smpSendKey+0x174>
   11b7c:	2b0a      	cmp	r3, #10
   11b7e:	d074      	beq.n	11c6a <smpSendKey+0x174>
   11b80:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11b84:	b10b      	cbz	r3, 11b8a <smpSendKey+0x94>
   11b86:	2600      	movs	r6, #0
   11b88:	e7ef      	b.n	11b6a <smpSendKey+0x74>
   11b8a:	2019      	movs	r0, #25
   11b8c:	f7fe fffa 	bl	10b84 <smpMsgAlloc>
   11b90:	4605      	mov	r5, r0
   11b92:	2800      	cmp	r0, #0
   11b94:	d0f7      	beq.n	11b86 <smpSendKey+0x90>
   11b96:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11b9a:	b96b      	cbnz	r3, 11bb8 <smpSendKey+0xc2>
   11b9c:	07f0      	lsls	r0, r6, #31
   11b9e:	d539      	bpl.n	11c14 <smpSendKey+0x11e>
   11ba0:	4620      	mov	r0, r4
   11ba2:	f7fe ff75 	bl	10a90 <smpGenerateLtk>
   11ba6:	2306      	movs	r3, #6
   11ba8:	722b      	strb	r3, [r5, #8]
   11baa:	6a21      	ldr	r1, [r4, #32]
   11bac:	3104      	adds	r1, #4
   11bae:	f105 0009 	add.w	r0, r5, #9
   11bb2:	f001 ffb8 	bl	13b26 <Calc128Cpy>
   11bb6:	e012      	b.n	11bde <smpSendKey+0xe8>
   11bb8:	2b06      	cmp	r3, #6
   11bba:	d12b      	bne.n	11c14 <smpSendKey+0x11e>
   11bbc:	2307      	movs	r3, #7
   11bbe:	7203      	strb	r3, [r0, #8]
   11bc0:	6a23      	ldr	r3, [r4, #32]
   11bc2:	8b9b      	ldrh	r3, [r3, #28]
   11bc4:	7243      	strb	r3, [r0, #9]
   11bc6:	6a23      	ldr	r3, [r4, #32]
   11bc8:	8b9b      	ldrh	r3, [r3, #28]
   11bca:	0a1b      	lsrs	r3, r3, #8
   11bcc:	7283      	strb	r3, [r0, #10]
   11bce:	6a22      	ldr	r2, [r4, #32]
   11bd0:	f852 3f14 	ldr.w	r3, [r2, #20]!
   11bd4:	f8c0 300b 	str.w	r3, [r0, #11]
   11bd8:	6853      	ldr	r3, [r2, #4]
   11bda:	f8c0 300f 	str.w	r3, [r0, #15]
   11bde:	7a2b      	ldrb	r3, [r5, #8]
   11be0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11be4:	4629      	mov	r1, r5
   11be6:	4620      	mov	r0, r4
   11be8:	f7fe ff81 	bl	10aee <smpSendPkt>
   11bec:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   11bf0:	2e00      	cmp	r6, #0
   11bf2:	d1c8      	bne.n	11b86 <smpSendKey+0x90>
   11bf4:	2004      	movs	r0, #4
   11bf6:	f008 fc74 	bl	1a4e2 <WsfMsgAlloc>
   11bfa:	4601      	mov	r1, r0
   11bfc:	2800      	cmp	r0, #0
   11bfe:	d0c2      	beq.n	11b86 <smpSendKey+0x90>
   11c00:	230c      	movs	r3, #12
   11c02:	7083      	strb	r3, [r0, #2]
   11c04:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11c08:	8003      	strh	r3, [r0, #0]
   11c0a:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   11c0e:	f008 fc8c 	bl	1a52a <WsfMsgSend>
   11c12:	e7aa      	b.n	11b6a <smpSendKey+0x74>
   11c14:	07b1      	lsls	r1, r6, #30
   11c16:	d508      	bpl.n	11c2a <smpSendKey+0x134>
   11c18:	b10b      	cbz	r3, 11c1e <smpSendKey+0x128>
   11c1a:	2b07      	cmp	r3, #7
   11c1c:	d105      	bne.n	11c2a <smpSendKey+0x134>
   11c1e:	2308      	movs	r3, #8
   11c20:	722b      	strb	r3, [r5, #8]
   11c22:	f7fe fab7 	bl	10194 <DmSecGetLocalIrk>
   11c26:	4601      	mov	r1, r0
   11c28:	e7c1      	b.n	11bae <smpSendKey+0xb8>
   11c2a:	2b08      	cmp	r3, #8
   11c2c:	d10b      	bne.n	11c46 <smpSendKey+0x150>
   11c2e:	2309      	movs	r3, #9
   11c30:	722b      	strb	r3, [r5, #8]
   11c32:	2300      	movs	r3, #0
   11c34:	726b      	strb	r3, [r5, #9]
   11c36:	f003 fccb 	bl	155d0 <HciGetBdAddr>
   11c3a:	4601      	mov	r1, r0
   11c3c:	f105 000a 	add.w	r0, r5, #10
   11c40:	f001 ff26 	bl	13a90 <BdaCpy>
   11c44:	e7cb      	b.n	11bde <smpSendKey+0xe8>
   11c46:	0772      	lsls	r2, r6, #29
   11c48:	d50c      	bpl.n	11c64 <smpSendKey+0x16e>
   11c4a:	2b09      	cmp	r3, #9
   11c4c:	d80a      	bhi.n	11c64 <smpSendKey+0x16e>
   11c4e:	f240 2281 	movw	r2, #641	; 0x281
   11c52:	fa22 f303 	lsr.w	r3, r2, r3
   11c56:	07db      	lsls	r3, r3, #31
   11c58:	d504      	bpl.n	11c64 <smpSendKey+0x16e>
   11c5a:	230a      	movs	r3, #10
   11c5c:	722b      	strb	r3, [r5, #8]
   11c5e:	f7fe fa93 	bl	10188 <DmSecGetLocalCsrk>
   11c62:	e7e0      	b.n	11c26 <smpSendKey+0x130>
   11c64:	4628      	mov	r0, r5
   11c66:	f008 fc53 	bl	1a510 <WsfMsgFree>
   11c6a:	2601      	movs	r6, #1
   11c6c:	e77d      	b.n	11b6a <smpSendKey+0x74>
   11c6e:	bf00      	nop
   11c70:	10003f14 	.word	0x10003f14

00011c74 <smpProcRcvKey>:
   11c74:	b570      	push	{r4, r5, r6, lr}
   11c76:	461e      	mov	r6, r3
   11c78:	7a13      	ldrb	r3, [r2, #8]
   11c7a:	2b06      	cmp	r3, #6
   11c7c:	460c      	mov	r4, r1
   11c7e:	4605      	mov	r5, r0
   11c80:	f102 0109 	add.w	r1, r2, #9
   11c84:	d104      	bne.n	11c90 <smpProcRcvKey+0x1c>
   11c86:	1d20      	adds	r0, r4, #4
   11c88:	f001 ff4d 	bl	13b26 <Calc128Cpy>
   11c8c:	2200      	movs	r2, #0
   11c8e:	e016      	b.n	11cbe <smpProcRcvKey+0x4a>
   11c90:	2b07      	cmp	r3, #7
   11c92:	d126      	bne.n	11ce2 <smpProcRcvKey+0x6e>
   11c94:	7a91      	ldrb	r1, [r2, #10]
   11c96:	7a53      	ldrb	r3, [r2, #9]
   11c98:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   11c9c:	83a3      	strh	r3, [r4, #28]
   11c9e:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   11ca2:	6163      	str	r3, [r4, #20]
   11ca4:	6853      	ldr	r3, [r2, #4]
   11ca6:	61a3      	str	r3, [r4, #24]
   11ca8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11cac:	f013 0f04 	tst.w	r3, #4
   11cb0:	bf14      	ite	ne
   11cb2:	2302      	movne	r3, #2
   11cb4:	2301      	moveq	r3, #1
   11cb6:	77e3      	strb	r3, [r4, #31]
   11cb8:	2302      	movs	r3, #2
   11cba:	77a3      	strb	r3, [r4, #30]
   11cbc:	2201      	movs	r2, #1
   11cbe:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   11cc2:	2b06      	cmp	r3, #6
   11cc4:	d001      	beq.n	11cca <smpProcRcvKey+0x56>
   11cc6:	2b08      	cmp	r3, #8
   11cc8:	d120      	bne.n	11d0c <smpProcRcvKey+0x98>
   11cca:	3301      	adds	r3, #1
   11ccc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   11cd0:	2500      	movs	r5, #0
   11cd2:	b122      	cbz	r2, 11cde <smpProcRcvKey+0x6a>
   11cd4:	232f      	movs	r3, #47	; 0x2f
   11cd6:	70a3      	strb	r3, [r4, #2]
   11cd8:	4620      	mov	r0, r4
   11cda:	f7fe f98d 	bl	fff8 <DmSmpCbackExec>
   11cde:	4628      	mov	r0, r5
   11ce0:	bd70      	pop	{r4, r5, r6, pc}
   11ce2:	2b08      	cmp	r3, #8
   11ce4:	d0cf      	beq.n	11c86 <smpProcRcvKey+0x12>
   11ce6:	2b09      	cmp	r3, #9
   11ce8:	d109      	bne.n	11cfe <smpProcRcvKey+0x8a>
   11cea:	7a53      	ldrb	r3, [r2, #9]
   11cec:	76a3      	strb	r3, [r4, #26]
   11cee:	f102 010a 	add.w	r1, r2, #10
   11cf2:	f104 0014 	add.w	r0, r4, #20
   11cf6:	f001 fecb 	bl	13a90 <BdaCpy>
   11cfa:	2304      	movs	r3, #4
   11cfc:	e7dd      	b.n	11cba <smpProcRcvKey+0x46>
   11cfe:	2b0a      	cmp	r3, #10
   11d00:	d1c4      	bne.n	11c8c <smpProcRcvKey+0x18>
   11d02:	1d20      	adds	r0, r4, #4
   11d04:	f001 ff0f 	bl	13b26 <Calc128Cpy>
   11d08:	2308      	movs	r3, #8
   11d0a:	e7d6      	b.n	11cba <smpProcRcvKey+0x46>
   11d0c:	07b0      	lsls	r0, r6, #30
   11d0e:	d503      	bpl.n	11d18 <smpProcRcvKey+0xa4>
   11d10:	2b07      	cmp	r3, #7
   11d12:	d101      	bne.n	11d18 <smpProcRcvKey+0xa4>
   11d14:	2308      	movs	r3, #8
   11d16:	e7d9      	b.n	11ccc <smpProcRcvKey+0x58>
   11d18:	0771      	lsls	r1, r6, #29
   11d1a:	d505      	bpl.n	11d28 <smpProcRcvKey+0xb4>
   11d1c:	2b07      	cmp	r3, #7
   11d1e:	d001      	beq.n	11d24 <smpProcRcvKey+0xb0>
   11d20:	2b09      	cmp	r3, #9
   11d22:	d101      	bne.n	11d28 <smpProcRcvKey+0xb4>
   11d24:	230a      	movs	r3, #10
   11d26:	e7d1      	b.n	11ccc <smpProcRcvKey+0x58>
   11d28:	2501      	movs	r5, #1
   11d2a:	e7d2      	b.n	11cd2 <smpProcRcvKey+0x5e>

00011d2c <smpActMaxAttempts>:
   11d2c:	b510      	push	{r4, lr}
   11d2e:	4604      	mov	r4, r0
   11d30:	f7ff fe73 	bl	11a1a <smpActPairingCancel>
   11d34:	230f      	movs	r3, #15
   11d36:	7323      	strb	r3, [r4, #12]
   11d38:	4b04      	ldr	r3, [pc, #16]	; (11d4c <smpActMaxAttempts+0x20>)
   11d3a:	681b      	ldr	r3, [r3, #0]
   11d3c:	4620      	mov	r0, r4
   11d3e:	8819      	ldrh	r1, [r3, #0]
   11d40:	f008 fd9a 	bl	1a878 <WsfTimerStartMs>
   11d44:	2300      	movs	r3, #0
   11d46:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   11d4a:	bd10      	pop	{r4, pc}
   11d4c:	10002bb8 	.word	0x10002bb8

00011d50 <smpActAttemptRcvd>:
   11d50:	2301      	movs	r3, #1
   11d52:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11d56:	4770      	bx	lr

00011d58 <smpActCheckAttempts>:
   11d58:	b510      	push	{r4, lr}
   11d5a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11d5e:	4604      	mov	r4, r0
   11d60:	b153      	cbz	r3, 11d78 <smpActCheckAttempts+0x20>
   11d62:	2300      	movs	r3, #0
   11d64:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11d68:	2109      	movs	r1, #9
   11d6a:	f7ff fe31 	bl	119d0 <smpSendPairingFailed>
   11d6e:	4620      	mov	r0, r4
   11d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11d74:	f7ff be11 	b.w	1199a <smpCleanup>
   11d78:	bd10      	pop	{r4, pc}

00011d7a <smpActPairingCmpl>:
   11d7a:	b513      	push	{r0, r1, r4, lr}
   11d7c:	4604      	mov	r4, r0
   11d7e:	f7ff fe0c 	bl	1199a <smpCleanup>
   11d82:	2200      	movs	r2, #0
   11d84:	2101      	movs	r1, #1
   11d86:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11d8a:	f7fd fd1d 	bl	f7c8 <DmConnSetIdle>
   11d8e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   11d92:	f88d 3004 	strb.w	r3, [sp, #4]
   11d96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11d9a:	f8ad 3000 	strh.w	r3, [sp]
   11d9e:	4668      	mov	r0, sp
   11da0:	232a      	movs	r3, #42	; 0x2a
   11da2:	f88d 3002 	strb.w	r3, [sp, #2]
   11da6:	f7fe f927 	bl	fff8 <DmSmpCbackExec>
   11daa:	f7fe fad9 	bl	10360 <DmSecGetEccKey>
   11dae:	b002      	add	sp, #8
   11db0:	bd10      	pop	{r4, pc}

00011db2 <smpSmExecute>:
   11db2:	b570      	push	{r4, r5, r6, lr}
   11db4:	4604      	mov	r4, r0
   11db6:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11dba:	460d      	mov	r5, r1
   11dbc:	f7fd fd2e 	bl	f81c <DmConnRole>
   11dc0:	4b13      	ldr	r3, [pc, #76]	; (11e10 <smpSmExecute+0x5e>)
   11dc2:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   11dc6:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   11dca:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   11dce:	78ae      	ldrb	r6, [r5, #2]
   11dd0:	2801      	cmp	r0, #1
   11dd2:	bf18      	it	ne
   11dd4:	461a      	movne	r2, r3
   11dd6:	6813      	ldr	r3, [r2, #0]
   11dd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   11ddc:	4603      	mov	r3, r0
   11dde:	7819      	ldrb	r1, [r3, #0]
   11de0:	42b1      	cmp	r1, r6
   11de2:	d10b      	bne.n	11dfc <smpSmExecute+0x4a>
   11de4:	7859      	ldrb	r1, [r3, #1]
   11de6:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   11dea:	7899      	ldrb	r1, [r3, #2]
   11dec:	6853      	ldr	r3, [r2, #4]
   11dee:	4620      	mov	r0, r4
   11df0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11df4:	4629      	mov	r1, r5
   11df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11dfa:	4718      	bx	r3
   11dfc:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   11e00:	2900      	cmp	r1, #0
   11e02:	d1ec      	bne.n	11dde <smpSmExecute+0x2c>
   11e04:	6890      	ldr	r0, [r2, #8]
   11e06:	f100 010c 	add.w	r1, r0, #12
   11e0a:	4299      	cmp	r1, r3
   11e0c:	d1e6      	bne.n	11ddc <smpSmExecute+0x2a>
   11e0e:	bd70      	pop	{r4, r5, r6, pc}
   11e10:	10003f14 	.word	0x10003f14

00011e14 <smpProcPairing>:
   11e14:	b513      	push	{r0, r1, r4, lr}
   11e16:	2300      	movs	r3, #0
   11e18:	7013      	strb	r3, [r2, #0]
   11e1a:	700b      	strb	r3, [r1, #0]
   11e1c:	7c83      	ldrb	r3, [r0, #18]
   11e1e:	2b01      	cmp	r3, #1
   11e20:	d127      	bne.n	11e72 <smpProcPairing+0x5e>
   11e22:	7e43      	ldrb	r3, [r0, #25]
   11e24:	2b01      	cmp	r3, #1
   11e26:	d124      	bne.n	11e72 <smpProcPairing+0x5e>
   11e28:	700b      	strb	r3, [r1, #0]
   11e2a:	7cc3      	ldrb	r3, [r0, #19]
   11e2c:	7e82      	ldrb	r2, [r0, #26]
   11e2e:	4013      	ands	r3, r2
   11e30:	f043 0304 	orr.w	r3, r3, #4
   11e34:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   11e38:	2300      	movs	r3, #0
   11e3a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11e3e:	2a00      	cmp	r2, #0
   11e40:	d049      	beq.n	11ed6 <smpProcPairing+0xc2>
   11e42:	7cc1      	ldrb	r1, [r0, #19]
   11e44:	4a2d      	ldr	r2, [pc, #180]	; (11efc <smpProcPairing+0xe8>)
   11e46:	6812      	ldr	r2, [r2, #0]
   11e48:	2b00      	cmp	r3, #0
   11e4a:	d046      	beq.n	11eda <smpProcPairing+0xc6>
   11e4c:	7993      	ldrb	r3, [r2, #6]
   11e4e:	f003 0304 	and.w	r3, r3, #4
   11e52:	4219      	tst	r1, r3
   11e54:	d041      	beq.n	11eda <smpProcPairing+0xc6>
   11e56:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11e5a:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e5e:	f240 3303 	movw	r3, #771	; 0x303
   11e62:	a901      	add	r1, sp, #4
   11e64:	f8ad 3006 	strh.w	r3, [sp, #6]
   11e68:	f7ff ffa3 	bl	11db2 <smpSmExecute>
   11e6c:	2000      	movs	r0, #0
   11e6e:	b002      	add	sp, #8
   11e70:	bd10      	pop	{r4, pc}
   11e72:	7cc1      	ldrb	r1, [r0, #19]
   11e74:	074b      	lsls	r3, r1, #29
   11e76:	d402      	bmi.n	11e7e <smpProcPairing+0x6a>
   11e78:	7e83      	ldrb	r3, [r0, #26]
   11e7a:	075c      	lsls	r4, r3, #29
   11e7c:	d509      	bpl.n	11e92 <smpProcPairing+0x7e>
   11e7e:	7c44      	ldrb	r4, [r0, #17]
   11e80:	2c03      	cmp	r4, #3
   11e82:	d006      	beq.n	11e92 <smpProcPairing+0x7e>
   11e84:	7e03      	ldrb	r3, [r0, #24]
   11e86:	2b03      	cmp	r3, #3
   11e88:	d003      	beq.n	11e92 <smpProcPairing+0x7e>
   11e8a:	2c01      	cmp	r4, #1
   11e8c:	d809      	bhi.n	11ea2 <smpProcPairing+0x8e>
   11e8e:	2b01      	cmp	r3, #1
   11e90:	d81f      	bhi.n	11ed2 <smpProcPairing+0xbe>
   11e92:	7e83      	ldrb	r3, [r0, #26]
   11e94:	4019      	ands	r1, r3
   11e96:	f021 0104 	bic.w	r1, r1, #4
   11e9a:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   11e9e:	2301      	movs	r3, #1
   11ea0:	e7cb      	b.n	11e3a <smpProcPairing+0x26>
   11ea2:	2c04      	cmp	r4, #4
   11ea4:	d113      	bne.n	11ece <smpProcPairing+0xba>
   11ea6:	2b02      	cmp	r3, #2
   11ea8:	d013      	beq.n	11ed2 <smpProcPairing+0xbe>
   11eaa:	1f19      	subs	r1, r3, #4
   11eac:	424b      	negs	r3, r1
   11eae:	414b      	adcs	r3, r1
   11eb0:	7013      	strb	r3, [r2, #0]
   11eb2:	7e01      	ldrb	r1, [r0, #24]
   11eb4:	2902      	cmp	r1, #2
   11eb6:	d102      	bne.n	11ebe <smpProcPairing+0xaa>
   11eb8:	7c41      	ldrb	r1, [r0, #17]
   11eba:	2902      	cmp	r1, #2
   11ebc:	d0b5      	beq.n	11e2a <smpProcPairing+0x16>
   11ebe:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   11ec2:	2900      	cmp	r1, #0
   11ec4:	bf08      	it	eq
   11ec6:	f083 0301 	eoreq.w	r3, r3, #1
   11eca:	7013      	strb	r3, [r2, #0]
   11ecc:	e7ad      	b.n	11e2a <smpProcPairing+0x16>
   11ece:	2300      	movs	r3, #0
   11ed0:	e7ee      	b.n	11eb0 <smpProcPairing+0x9c>
   11ed2:	2301      	movs	r3, #1
   11ed4:	e7ec      	b.n	11eb0 <smpProcPairing+0x9c>
   11ed6:	7e81      	ldrb	r1, [r0, #26]
   11ed8:	e7b4      	b.n	11e44 <smpProcPairing+0x30>
   11eda:	78d3      	ldrb	r3, [r2, #3]
   11edc:	7d02      	ldrb	r2, [r0, #20]
   11ede:	429a      	cmp	r2, r3
   11ee0:	d302      	bcc.n	11ee8 <smpProcPairing+0xd4>
   11ee2:	7ec2      	ldrb	r2, [r0, #27]
   11ee4:	429a      	cmp	r2, r3
   11ee6:	d206      	bcs.n	11ef6 <smpProcPairing+0xe2>
   11ee8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11eec:	f8ad 3004 	strh.w	r3, [sp, #4]
   11ef0:	f240 6303 	movw	r3, #1539	; 0x603
   11ef4:	e7b5      	b.n	11e62 <smpProcPairing+0x4e>
   11ef6:	2001      	movs	r0, #1
   11ef8:	e7b9      	b.n	11e6e <smpProcPairing+0x5a>
   11efa:	bf00      	nop
   11efc:	10002bb8 	.word	0x10002bb8

00011f00 <smpAuthReq>:
   11f00:	b510      	push	{r4, lr}
   11f02:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11f06:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   11f0a:	b086      	sub	sp, #24
   11f0c:	f013 0304 	ands.w	r3, r3, #4
   11f10:	f8ad 4000 	strh.w	r4, [sp]
   11f14:	d00b      	beq.n	11f2e <smpAuthReq+0x2e>
   11f16:	232e      	movs	r3, #46	; 0x2e
   11f18:	4668      	mov	r0, sp
   11f1a:	f88d 3002 	strb.w	r3, [sp, #2]
   11f1e:	f88d 1004 	strb.w	r1, [sp, #4]
   11f22:	f88d 2005 	strb.w	r2, [sp, #5]
   11f26:	f7fe f867 	bl	fff8 <DmSmpCbackExec>
   11f2a:	b006      	add	sp, #24
   11f2c:	bd10      	pop	{r4, pc}
   11f2e:	2204      	movs	r2, #4
   11f30:	f8ad 3004 	strh.w	r3, [sp, #4]
   11f34:	f88d 3006 	strb.w	r3, [sp, #6]
   11f38:	4669      	mov	r1, sp
   11f3a:	2303      	movs	r3, #3
   11f3c:	f88d 2002 	strb.w	r2, [sp, #2]
   11f40:	f88d 3014 	strb.w	r3, [sp, #20]
   11f44:	f7ff ff35 	bl	11db2 <smpSmExecute>
   11f48:	e7ef      	b.n	11f2a <smpAuthReq+0x2a>
   11f4a:	bf00      	nop

00011f4c <smpiActPairReq>:
   11f4c:	b538      	push	{r3, r4, r5, lr}
   11f4e:	2201      	movs	r2, #1
   11f50:	4604      	mov	r4, r0
   11f52:	460d      	mov	r5, r1
   11f54:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11f58:	4611      	mov	r1, r2
   11f5a:	f7fd fc35 	bl	f7c8 <DmConnSetIdle>
   11f5e:	2302      	movs	r3, #2
   11f60:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   11f64:	4620      	mov	r0, r4
   11f66:	f7ff fd11 	bl	1198c <smpStartRspTimer>
   11f6a:	2040      	movs	r0, #64	; 0x40
   11f6c:	f008 fa2a 	bl	1a3c4 <WsfBufAlloc>
   11f70:	6220      	str	r0, [r4, #32]
   11f72:	200f      	movs	r0, #15
   11f74:	f7fe fe06 	bl	10b84 <smpMsgAlloc>
   11f78:	4601      	mov	r1, r0
   11f7a:	b1e0      	cbz	r0, 11fb6 <smpiActPairReq+0x6a>
   11f7c:	2301      	movs	r3, #1
   11f7e:	7203      	strb	r3, [r0, #8]
   11f80:	4b0d      	ldr	r3, [pc, #52]	; (11fb8 <smpiActPairReq+0x6c>)
   11f82:	681b      	ldr	r3, [r3, #0]
   11f84:	789a      	ldrb	r2, [r3, #2]
   11f86:	7242      	strb	r2, [r0, #9]
   11f88:	792a      	ldrb	r2, [r5, #4]
   11f8a:	7282      	strb	r2, [r0, #10]
   11f8c:	796a      	ldrb	r2, [r5, #5]
   11f8e:	72c2      	strb	r2, [r0, #11]
   11f90:	791b      	ldrb	r3, [r3, #4]
   11f92:	7303      	strb	r3, [r0, #12]
   11f94:	79ab      	ldrb	r3, [r5, #6]
   11f96:	7343      	strb	r3, [r0, #13]
   11f98:	79eb      	ldrb	r3, [r5, #7]
   11f9a:	7383      	strb	r3, [r0, #14]
   11f9c:	4603      	mov	r3, r0
   11f9e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   11fa2:	6120      	str	r0, [r4, #16]
   11fa4:	8898      	ldrh	r0, [r3, #4]
   11fa6:	82a0      	strh	r0, [r4, #20]
   11fa8:	799b      	ldrb	r3, [r3, #6]
   11faa:	75a3      	strb	r3, [r4, #22]
   11fac:	4620      	mov	r0, r4
   11fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11fb2:	f7fe bd9c 	b.w	10aee <smpSendPkt>
   11fb6:	bd38      	pop	{r3, r4, r5, pc}
   11fb8:	10002bb8 	.word	0x10002bb8

00011fbc <smpiActCheckSecurityReq>:
   11fbc:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   11fc0:	b12a      	cbz	r2, 11fce <smpiActCheckSecurityReq+0x12>
   11fc2:	2200      	movs	r2, #0
   11fc4:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   11fc8:	78c9      	ldrb	r1, [r1, #3]
   11fca:	f7ff bd01 	b.w	119d0 <smpSendPairingFailed>
   11fce:	4770      	bx	lr

00011fd0 <smpiActProcSecurityReq>:
   11fd0:	b507      	push	{r0, r1, r2, lr}
   11fd2:	2301      	movs	r3, #1
   11fd4:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   11fd8:	684b      	ldr	r3, [r1, #4]
   11fda:	7a5b      	ldrb	r3, [r3, #9]
   11fdc:	f88d 3004 	strb.w	r3, [sp, #4]
   11fe0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11fe4:	f8ad 3000 	strh.w	r3, [sp]
   11fe8:	4668      	mov	r0, sp
   11fea:	2332      	movs	r3, #50	; 0x32
   11fec:	f88d 3002 	strb.w	r3, [sp, #2]
   11ff0:	f7fe f802 	bl	fff8 <DmSmpCbackExec>
   11ff4:	b003      	add	sp, #12
   11ff6:	f85d fb04 	ldr.w	pc, [sp], #4

00011ffa <smpiActProcPairRsp>:
   11ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11ffc:	684a      	ldr	r2, [r1, #4]
   11ffe:	7d45      	ldrb	r5, [r0, #21]
   12000:	4613      	mov	r3, r2
   12002:	4604      	mov	r4, r0
   12004:	f853 6f08 	ldr.w	r6, [r3, #8]!
   12008:	f8c0 6017 	str.w	r6, [r0, #23]
   1200c:	889e      	ldrh	r6, [r3, #4]
   1200e:	f8a0 601b 	strh.w	r6, [r0, #27]
   12012:	799b      	ldrb	r3, [r3, #6]
   12014:	7743      	strb	r3, [r0, #29]
   12016:	7b53      	ldrb	r3, [r2, #13]
   12018:	43ab      	bics	r3, r5
   1201a:	d103      	bne.n	12024 <smpiActProcPairRsp+0x2a>
   1201c:	7d85      	ldrb	r5, [r0, #22]
   1201e:	7b93      	ldrb	r3, [r2, #14]
   12020:	43ab      	bics	r3, r5
   12022:	d007      	beq.n	12034 <smpiActProcPairRsp+0x3a>
   12024:	f640 2303 	movw	r3, #2563	; 0xa03
   12028:	804b      	strh	r3, [r1, #2]
   1202a:	4620      	mov	r0, r4
   1202c:	f7ff fec1 	bl	11db2 <smpSmExecute>
   12030:	b002      	add	sp, #8
   12032:	bd70      	pop	{r4, r5, r6, pc}
   12034:	4d09      	ldr	r5, [pc, #36]	; (1205c <smpiActProcPairRsp+0x62>)
   12036:	f10d 0207 	add.w	r2, sp, #7
   1203a:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   1203e:	f10d 0106 	add.w	r1, sp, #6
   12042:	4798      	blx	r3
   12044:	2800      	cmp	r0, #0
   12046:	d0f3      	beq.n	12030 <smpiActProcPairRsp+0x36>
   12048:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   1204c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   12050:	f89d 1006 	ldrb.w	r1, [sp, #6]
   12054:	4620      	mov	r0, r4
   12056:	4798      	blx	r3
   12058:	e7ea      	b.n	12030 <smpiActProcPairRsp+0x36>
   1205a:	bf00      	nop
   1205c:	10003f14 	.word	0x10003f14

00012060 <smpiActProcPairCnf>:
   12060:	b538      	push	{r3, r4, r5, lr}
   12062:	6a02      	ldr	r2, [r0, #32]
   12064:	684b      	ldr	r3, [r1, #4]
   12066:	4604      	mov	r4, r0
   12068:	f103 0109 	add.w	r1, r3, #9
   1206c:	3220      	adds	r2, #32
   1206e:	3319      	adds	r3, #25
   12070:	f851 0b04 	ldr.w	r0, [r1], #4
   12074:	f842 0b04 	str.w	r0, [r2], #4
   12078:	4299      	cmp	r1, r3
   1207a:	d1f9      	bne.n	12070 <smpiActProcPairCnf+0x10>
   1207c:	2504      	movs	r5, #4
   1207e:	4620      	mov	r0, r4
   12080:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   12084:	f7ff fc82 	bl	1198c <smpStartRspTimer>
   12088:	2019      	movs	r0, #25
   1208a:	f7fe fd7b 	bl	10b84 <smpMsgAlloc>
   1208e:	4601      	mov	r1, r0
   12090:	b180      	cbz	r0, 120b4 <smpiActProcPairCnf+0x54>
   12092:	7205      	strb	r5, [r0, #8]
   12094:	6a23      	ldr	r3, [r4, #32]
   12096:	3009      	adds	r0, #9
   12098:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1209c:	3340      	adds	r3, #64	; 0x40
   1209e:	f852 5b04 	ldr.w	r5, [r2], #4
   120a2:	f840 5b04 	str.w	r5, [r0], #4
   120a6:	429a      	cmp	r2, r3
   120a8:	d1f9      	bne.n	1209e <smpiActProcPairCnf+0x3e>
   120aa:	4620      	mov	r0, r4
   120ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   120b0:	f7fe bd1d 	b.w	10aee <smpSendPkt>
   120b4:	bd38      	pop	{r3, r4, r5, pc}

000120b6 <smpiActCnfVerify>:
   120b6:	b570      	push	{r4, r5, r6, lr}
   120b8:	460e      	mov	r6, r1
   120ba:	6a05      	ldr	r5, [r0, #32]
   120bc:	4604      	mov	r4, r0
   120be:	2210      	movs	r2, #16
   120c0:	f105 0120 	add.w	r1, r5, #32
   120c4:	6870      	ldr	r0, [r6, #4]
   120c6:	f7fa f81b 	bl	c100 <memcmp>
   120ca:	b1c8      	cbz	r0, 12100 <smpiActCnfVerify+0x4a>
   120cc:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   120d0:	b19b      	cbz	r3, 120fa <smpiActCnfVerify+0x44>
   120d2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   120d6:	4a0f      	ldr	r2, [pc, #60]	; (12114 <smpiActCnfVerify+0x5e>)
   120d8:	3301      	adds	r3, #1
   120da:	b2db      	uxtb	r3, r3
   120dc:	6812      	ldr	r2, [r2, #0]
   120de:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   120e2:	7952      	ldrb	r2, [r2, #5]
   120e4:	429a      	cmp	r2, r3
   120e6:	d108      	bne.n	120fa <smpiActCnfVerify+0x44>
   120e8:	f640 130d 	movw	r3, #2317	; 0x90d
   120ec:	8073      	strh	r3, [r6, #2]
   120ee:	4631      	mov	r1, r6
   120f0:	4620      	mov	r0, r4
   120f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   120f6:	f7ff be5c 	b.w	11db2 <smpSmExecute>
   120fa:	f240 4303 	movw	r3, #1027	; 0x403
   120fe:	e7f5      	b.n	120ec <smpiActCnfVerify+0x36>
   12100:	f105 0330 	add.w	r3, r5, #48	; 0x30
   12104:	f105 0210 	add.w	r2, r5, #16
   12108:	4629      	mov	r1, r5
   1210a:	4620      	mov	r0, r4
   1210c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12110:	f7fe bc96 	b.w	10a40 <smpCalcS1>
   12114:	10002bb8 	.word	0x10002bb8

00012118 <smpiActStkEncrypt>:
   12118:	b530      	push	{r4, r5, lr}
   1211a:	7ec4      	ldrb	r4, [r0, #27]
   1211c:	7d03      	ldrb	r3, [r0, #20]
   1211e:	6849      	ldr	r1, [r1, #4]
   12120:	429c      	cmp	r4, r3
   12122:	b085      	sub	sp, #20
   12124:	bf28      	it	cs
   12126:	461c      	movcs	r4, r3
   12128:	4605      	mov	r5, r0
   1212a:	4622      	mov	r2, r4
   1212c:	4668      	mov	r0, sp
   1212e:	f7fa f817 	bl	c160 <memcpy>
   12132:	2100      	movs	r1, #0
   12134:	f1c4 0210 	rsb	r2, r4, #16
   12138:	eb0d 0004 	add.w	r0, sp, r4
   1213c:	f7fa f90e 	bl	c35c <memset>
   12140:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   12144:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   12148:	f013 0f04 	tst.w	r3, #4
   1214c:	466a      	mov	r2, sp
   1214e:	bf14      	ite	ne
   12150:	2102      	movne	r1, #2
   12152:	2101      	moveq	r1, #1
   12154:	f7ff fbc4 	bl	118e0 <DmSmpEncryptReq>
   12158:	b005      	add	sp, #20
   1215a:	bd30      	pop	{r4, r5, pc}

0001215c <smpiActSetupKeyDist>:
   1215c:	b538      	push	{r3, r4, r5, lr}
   1215e:	4604      	mov	r4, r0
   12160:	460d      	mov	r5, r1
   12162:	f7ff fc13 	bl	1198c <smpStartRspTimer>
   12166:	6a23      	ldr	r3, [r4, #32]
   12168:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1216c:	801a      	strh	r2, [r3, #0]
   1216e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   12172:	f012 0f04 	tst.w	r2, #4
   12176:	bf14      	ite	ne
   12178:	2202      	movne	r2, #2
   1217a:	2201      	moveq	r2, #1
   1217c:	77da      	strb	r2, [r3, #31]
   1217e:	7ee2      	ldrb	r2, [r4, #27]
   12180:	7d21      	ldrb	r1, [r4, #20]
   12182:	428a      	cmp	r2, r1
   12184:	bf28      	it	cs
   12186:	460a      	movcs	r2, r1
   12188:	f883 2020 	strb.w	r2, [r3, #32]
   1218c:	2300      	movs	r3, #0
   1218e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12192:	7f62      	ldrb	r2, [r4, #29]
   12194:	7da3      	ldrb	r3, [r4, #22]
   12196:	4013      	ands	r3, r2
   12198:	07d8      	lsls	r0, r3, #31
   1219a:	d518      	bpl.n	121ce <smpiActSetupKeyDist+0x72>
   1219c:	4a0f      	ldr	r2, [pc, #60]	; (121dc <smpiActSetupKeyDist+0x80>)
   1219e:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   121a2:	b192      	cbz	r2, 121ca <smpiActSetupKeyDist+0x6e>
   121a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
   121a6:	7812      	ldrb	r2, [r2, #0]
   121a8:	b17a      	cbz	r2, 121ca <smpiActSetupKeyDist+0x6e>
   121aa:	0799      	lsls	r1, r3, #30
   121ac:	d502      	bpl.n	121b4 <smpiActSetupKeyDist+0x58>
   121ae:	2308      	movs	r3, #8
   121b0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   121b4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   121b8:	b97b      	cbnz	r3, 121da <smpiActSetupKeyDist+0x7e>
   121ba:	230c      	movs	r3, #12
   121bc:	70ab      	strb	r3, [r5, #2]
   121be:	4629      	mov	r1, r5
   121c0:	4620      	mov	r0, r4
   121c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   121c6:	f7ff bdf4 	b.w	11db2 <smpSmExecute>
   121ca:	2306      	movs	r3, #6
   121cc:	e7f0      	b.n	121b0 <smpiActSetupKeyDist+0x54>
   121ce:	079a      	lsls	r2, r3, #30
   121d0:	d4ed      	bmi.n	121ae <smpiActSetupKeyDist+0x52>
   121d2:	075b      	lsls	r3, r3, #29
   121d4:	d5ee      	bpl.n	121b4 <smpiActSetupKeyDist+0x58>
   121d6:	230a      	movs	r3, #10
   121d8:	e7ea      	b.n	121b0 <smpiActSetupKeyDist+0x54>
   121da:	bd38      	pop	{r3, r4, r5, pc}
   121dc:	10003f14 	.word	0x10003f14

000121e0 <smpiActRcvKey>:
   121e0:	b538      	push	{r3, r4, r5, lr}
   121e2:	7d82      	ldrb	r2, [r0, #22]
   121e4:	7f43      	ldrb	r3, [r0, #29]
   121e6:	460d      	mov	r5, r1
   121e8:	4013      	ands	r3, r2
   121ea:	684a      	ldr	r2, [r1, #4]
   121ec:	6a01      	ldr	r1, [r0, #32]
   121ee:	4604      	mov	r4, r0
   121f0:	f7ff fd40 	bl	11c74 <smpProcRcvKey>
   121f4:	b150      	cbz	r0, 1220c <smpiActRcvKey+0x2c>
   121f6:	2300      	movs	r3, #0
   121f8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   121fc:	230c      	movs	r3, #12
   121fe:	70ab      	strb	r3, [r5, #2]
   12200:	4629      	mov	r1, r5
   12202:	4620      	mov	r0, r4
   12204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12208:	f7ff bdd3 	b.w	11db2 <smpSmExecute>
   1220c:	bd38      	pop	{r3, r4, r5, pc}

0001220e <smpiActSendKey>:
   1220e:	b538      	push	{r3, r4, r5, lr}
   12210:	460d      	mov	r5, r1
   12212:	7f03      	ldrb	r3, [r0, #28]
   12214:	7d41      	ldrb	r1, [r0, #21]
   12216:	4019      	ands	r1, r3
   12218:	4604      	mov	r4, r0
   1221a:	f7ff fc6c 	bl	11af6 <smpSendKey>
   1221e:	b138      	cbz	r0, 12230 <smpiActSendKey+0x22>
   12220:	230e      	movs	r3, #14
   12222:	70ab      	strb	r3, [r5, #2]
   12224:	4629      	mov	r1, r5
   12226:	4620      	mov	r0, r4
   12228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1222c:	f7ff bdc1 	b.w	11db2 <smpSmExecute>
   12230:	bd38      	pop	{r3, r4, r5, pc}
   12232:	bf00      	nop

00012234 <smpiScActAuthSelect>:
   12234:	f7ff b8cf 	b.w	113d6 <smpScActAuthSelect>

00012238 <smpiScActSendPubKey>:
   12238:	230c      	movs	r3, #12
   1223a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   1223e:	f7fe be0a 	b.w	10e56 <smpScSendPubKey>

00012242 <smpiScActJwncSetup>:
   12242:	b538      	push	{r3, r4, r5, lr}
   12244:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12246:	4d0b      	ldr	r5, [pc, #44]	; (12274 <smpiScActJwncSetup+0x32>)
   12248:	4604      	mov	r4, r0
   1224a:	2110      	movs	r1, #16
   1224c:	68d8      	ldr	r0, [r3, #12]
   1224e:	f006 fc27 	bl	18aa0 <SecRand>
   12252:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12254:	68d8      	ldr	r0, [r3, #12]
   12256:	4629      	mov	r1, r5
   12258:	3020      	adds	r0, #32
   1225a:	f001 fc64 	bl	13b26 <Calc128Cpy>
   1225e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12260:	68d8      	ldr	r0, [r3, #12]
   12262:	4629      	mov	r1, r5
   12264:	3030      	adds	r0, #48	; 0x30
   12266:	f001 fc5e 	bl	13b26 <Calc128Cpy>
   1226a:	2303      	movs	r3, #3
   1226c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12270:	bd38      	pop	{r3, r4, r5, pc}
   12272:	bf00      	nop
   12274:	00023994 	.word	0x00023994

00012278 <smpiScActJwncSendRand>:
   12278:	b538      	push	{r3, r4, r5, lr}
   1227a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1227c:	4604      	mov	r4, r0
   1227e:	460d      	mov	r5, r1
   12280:	68d8      	ldr	r0, [r3, #12]
   12282:	6849      	ldr	r1, [r1, #4]
   12284:	2210      	movs	r2, #16
   12286:	3109      	adds	r1, #9
   12288:	3040      	adds	r0, #64	; 0x40
   1228a:	f001 fc87 	bl	13b9c <WStrReverseCpy>
   1228e:	2304      	movs	r3, #4
   12290:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12294:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12296:	4629      	mov	r1, r5
   12298:	68da      	ldr	r2, [r3, #12]
   1229a:	4620      	mov	r0, r4
   1229c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   122a0:	f7fe be33 	b.w	10f0a <smpScSendRand>

000122a4 <smpiScActJwncCalcF4>:
   122a4:	b538      	push	{r3, r4, r5, lr}
   122a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   122a8:	4604      	mov	r4, r0
   122aa:	460d      	mov	r5, r1
   122ac:	68d8      	ldr	r0, [r3, #12]
   122ae:	6849      	ldr	r1, [r1, #4]
   122b0:	2210      	movs	r2, #16
   122b2:	3109      	adds	r1, #9
   122b4:	4410      	add	r0, r2
   122b6:	f001 fc71 	bl	13b9c <WStrReverseCpy>
   122ba:	4629      	mov	r1, r5
   122bc:	4620      	mov	r0, r4
   122be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   122c2:	f7ff b8d2 	b.w	1146a <smpScActJwncCalcF4>

000122c6 <smpiScActJwncCalcG2>:
   122c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   122c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   122ca:	4604      	mov	r4, r0
   122cc:	68d8      	ldr	r0, [r3, #12]
   122ce:	460d      	mov	r5, r1
   122d0:	2210      	movs	r2, #16
   122d2:	6849      	ldr	r1, [r1, #4]
   122d4:	3040      	adds	r0, #64	; 0x40
   122d6:	f7f9 ff13 	bl	c100 <memcmp>
   122da:	b168      	cbz	r0, 122f8 <smpiScActJwncCalcG2+0x32>
   122dc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   122e0:	f8ad 3004 	strh.w	r3, [sp, #4]
   122e4:	a901      	add	r1, sp, #4
   122e6:	f240 4303 	movw	r3, #1027	; 0x403
   122ea:	4620      	mov	r0, r4
   122ec:	f8ad 3006 	strh.w	r3, [sp, #6]
   122f0:	f7ff fd5f 	bl	11db2 <smpSmExecute>
   122f4:	b003      	add	sp, #12
   122f6:	bd30      	pop	{r4, r5, pc}
   122f8:	4629      	mov	r1, r5
   122fa:	4620      	mov	r0, r4
   122fc:	f7ff f8d7 	bl	114ae <smpScActJwncCalcG2>
   12300:	e7f8      	b.n	122f4 <smpiScActJwncCalcG2+0x2e>

00012302 <smpiScActPkCalcCa>:
   12302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12304:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12306:	78da      	ldrb	r2, [r3, #3]
   12308:	4604      	mov	r4, r0
   1230a:	460d      	mov	r5, r1
   1230c:	b9da      	cbnz	r2, 12346 <smpiScActPkCalcCa+0x44>
   1230e:	68d8      	ldr	r0, [r3, #12]
   12310:	4919      	ldr	r1, [pc, #100]	; (12378 <smpiScActPkCalcCa+0x76>)
   12312:	3020      	adds	r0, #32
   12314:	f001 fc07 	bl	13b26 <Calc128Cpy>
   12318:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1231a:	4917      	ldr	r1, [pc, #92]	; (12378 <smpiScActPkCalcCa+0x76>)
   1231c:	68d8      	ldr	r0, [r3, #12]
   1231e:	3030      	adds	r0, #48	; 0x30
   12320:	f001 fc01 	bl	13b26 <Calc128Cpy>
   12324:	7d2a      	ldrb	r2, [r5, #20]
   12326:	2a03      	cmp	r2, #3
   12328:	d80d      	bhi.n	12346 <smpiScActPkCalcCa+0x44>
   1232a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1232c:	68d8      	ldr	r0, [r3, #12]
   1232e:	1d2e      	adds	r6, r5, #4
   12330:	4631      	mov	r1, r6
   12332:	302d      	adds	r0, #45	; 0x2d
   12334:	f001 fc32 	bl	13b9c <WStrReverseCpy>
   12338:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1233a:	7d2a      	ldrb	r2, [r5, #20]
   1233c:	68d8      	ldr	r0, [r3, #12]
   1233e:	4631      	mov	r1, r6
   12340:	303d      	adds	r0, #61	; 0x3d
   12342:	f001 fc2b 	bl	13b9c <WStrReverseCpy>
   12346:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12348:	2110      	movs	r1, #16
   1234a:	68d8      	ldr	r0, [r3, #12]
   1234c:	f006 fba8 	bl	18aa0 <SecRand>
   12350:	f7fe f806 	bl	10360 <DmSecGetEccKey>
   12354:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12356:	4606      	mov	r6, r0
   12358:	4620      	mov	r0, r4
   1235a:	689f      	ldr	r7, [r3, #8]
   1235c:	f7fe fe25 	bl	10faa <smpGetPkBit>
   12360:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12362:	68db      	ldr	r3, [r3, #12]
   12364:	4632      	mov	r2, r6
   12366:	e9cd 0300 	strd	r0, r3, [sp]
   1236a:	4629      	mov	r1, r5
   1236c:	463b      	mov	r3, r7
   1236e:	4620      	mov	r0, r4
   12370:	f7fe fd02 	bl	10d78 <SmpScCalcF4>
   12374:	b003      	add	sp, #12
   12376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12378:	00023994 	.word	0x00023994

0001237c <smpiScActPkCalcCb>:
   1237c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1237e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12380:	4604      	mov	r4, r0
   12382:	460d      	mov	r5, r1
   12384:	68d8      	ldr	r0, [r3, #12]
   12386:	6849      	ldr	r1, [r1, #4]
   12388:	2210      	movs	r2, #16
   1238a:	3109      	adds	r1, #9
   1238c:	4410      	add	r0, r2
   1238e:	f001 fc05 	bl	13b9c <WStrReverseCpy>
   12392:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12394:	689e      	ldr	r6, [r3, #8]
   12396:	f7fd ffe3 	bl	10360 <DmSecGetEccKey>
   1239a:	4607      	mov	r7, r0
   1239c:	4620      	mov	r0, r4
   1239e:	f7fe fe04 	bl	10faa <smpGetPkBit>
   123a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   123a4:	68d9      	ldr	r1, [r3, #12]
   123a6:	3110      	adds	r1, #16
   123a8:	e9cd 0100 	strd	r0, r1, [sp]
   123ac:	463b      	mov	r3, r7
   123ae:	4632      	mov	r2, r6
   123b0:	4629      	mov	r1, r5
   123b2:	4620      	mov	r0, r4
   123b4:	f7fe fce0 	bl	10d78 <SmpScCalcF4>
   123b8:	b003      	add	sp, #12
   123ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000123bc <smpiScActPkSendCnf>:
   123bc:	684a      	ldr	r2, [r1, #4]
   123be:	f7fe bdcc 	b.w	10f5a <smpScSendPairCnf>

000123c2 <smpiScActPkSendRand>:
   123c2:	f7ff bf59 	b.w	12278 <smpiScActJwncSendRand>

000123c6 <smpiScActPkCheck>:
   123c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   123c8:	6b45      	ldr	r5, [r0, #52]	; 0x34
   123ca:	6849      	ldr	r1, [r1, #4]
   123cc:	4604      	mov	r4, r0
   123ce:	68e8      	ldr	r0, [r5, #12]
   123d0:	2210      	movs	r2, #16
   123d2:	3040      	adds	r0, #64	; 0x40
   123d4:	f7f9 fe94 	bl	c100 <memcmp>
   123d8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   123dc:	b158      	cbz	r0, 123f6 <smpiScActPkCheck+0x30>
   123de:	f240 4303 	movw	r3, #1027	; 0x403
   123e2:	f8ad 2004 	strh.w	r2, [sp, #4]
   123e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   123ea:	a901      	add	r1, sp, #4
   123ec:	4620      	mov	r0, r4
   123ee:	f7ff fce0 	bl	11db2 <smpSmExecute>
   123f2:	b003      	add	sp, #12
   123f4:	bd30      	pop	{r4, r5, pc}
   123f6:	78eb      	ldrb	r3, [r5, #3]
   123f8:	3301      	adds	r3, #1
   123fa:	b2db      	uxtb	r3, r3
   123fc:	2b13      	cmp	r3, #19
   123fe:	70eb      	strb	r3, [r5, #3]
   12400:	bf97      	itett	ls
   12402:	2303      	movls	r3, #3
   12404:	231a      	movhi	r3, #26
   12406:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   1240a:	2319      	movls	r3, #25
   1240c:	f88d 3006 	strb.w	r3, [sp, #6]
   12410:	f8ad 2004 	strh.w	r2, [sp, #4]
   12414:	e7e9      	b.n	123ea <smpiScActPkCheck+0x24>

00012416 <smpiScActOobCalcCb>:
   12416:	b530      	push	{r4, r5, lr}
   12418:	7c83      	ldrb	r3, [r0, #18]
   1241a:	2b01      	cmp	r3, #1
   1241c:	b085      	sub	sp, #20
   1241e:	4604      	mov	r4, r0
   12420:	460d      	mov	r5, r1
   12422:	d005      	beq.n	12430 <smpiScActOobCalcCb+0x1a>
   12424:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12426:	4913      	ldr	r1, [pc, #76]	; (12474 <smpiScActOobCalcCb+0x5e>)
   12428:	68d8      	ldr	r0, [r3, #12]
   1242a:	3020      	adds	r0, #32
   1242c:	f001 fb7b 	bl	13b26 <Calc128Cpy>
   12430:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12432:	7e62      	ldrb	r2, [r4, #25]
   12434:	68d8      	ldr	r0, [r3, #12]
   12436:	2a01      	cmp	r2, #1
   12438:	f100 0030 	add.w	r0, r0, #48	; 0x30
   1243c:	d10a      	bne.n	12454 <smpiScActOobCalcCb+0x3e>
   1243e:	689b      	ldr	r3, [r3, #8]
   12440:	9001      	str	r0, [sp, #4]
   12442:	2200      	movs	r2, #0
   12444:	9200      	str	r2, [sp, #0]
   12446:	4629      	mov	r1, r5
   12448:	461a      	mov	r2, r3
   1244a:	4620      	mov	r0, r4
   1244c:	f7fe fc94 	bl	10d78 <SmpScCalcF4>
   12450:	b005      	add	sp, #20
   12452:	bd30      	pop	{r4, r5, pc}
   12454:	4907      	ldr	r1, [pc, #28]	; (12474 <smpiScActOobCalcCb+0x5e>)
   12456:	f001 fb66 	bl	13b26 <Calc128Cpy>
   1245a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1245e:	f8ad 300c 	strh.w	r3, [sp, #12]
   12462:	a903      	add	r1, sp, #12
   12464:	231b      	movs	r3, #27
   12466:	4620      	mov	r0, r4
   12468:	f88d 300e 	strb.w	r3, [sp, #14]
   1246c:	f7ff fca1 	bl	11db2 <smpSmExecute>
   12470:	e7ee      	b.n	12450 <smpiScActOobCalcCb+0x3a>
   12472:	bf00      	nop
   12474:	00023994 	.word	0x00023994

00012478 <smpiScActOobSendRand>:
   12478:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1247a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1247c:	68de      	ldr	r6, [r3, #12]
   1247e:	7e43      	ldrb	r3, [r0, #25]
   12480:	2b01      	cmp	r3, #1
   12482:	4604      	mov	r4, r0
   12484:	460d      	mov	r5, r1
   12486:	d114      	bne.n	124b2 <smpiScActOobSendRand+0x3a>
   12488:	2210      	movs	r2, #16
   1248a:	6849      	ldr	r1, [r1, #4]
   1248c:	f106 0040 	add.w	r0, r6, #64	; 0x40
   12490:	f7f9 fe36 	bl	c100 <memcmp>
   12494:	b168      	cbz	r0, 124b2 <smpiScActOobSendRand+0x3a>
   12496:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1249a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1249e:	a901      	add	r1, sp, #4
   124a0:	f240 4303 	movw	r3, #1027	; 0x403
   124a4:	4620      	mov	r0, r4
   124a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   124aa:	f7ff fc82 	bl	11db2 <smpSmExecute>
   124ae:	b002      	add	sp, #8
   124b0:	bd70      	pop	{r4, r5, r6, pc}
   124b2:	2304      	movs	r3, #4
   124b4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   124b8:	4630      	mov	r0, r6
   124ba:	2110      	movs	r1, #16
   124bc:	f006 faf0 	bl	18aa0 <SecRand>
   124c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   124c2:	4629      	mov	r1, r5
   124c4:	68da      	ldr	r2, [r3, #12]
   124c6:	4620      	mov	r0, r4
   124c8:	f7fe fd1f 	bl	10f0a <smpScSendRand>
   124cc:	e7ef      	b.n	124ae <smpiScActOobSendRand+0x36>

000124ce <smpiScActOobProcRand>:
   124ce:	b538      	push	{r3, r4, r5, lr}
   124d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   124d2:	4604      	mov	r4, r0
   124d4:	460d      	mov	r5, r1
   124d6:	68d8      	ldr	r0, [r3, #12]
   124d8:	6849      	ldr	r1, [r1, #4]
   124da:	2210      	movs	r2, #16
   124dc:	3109      	adds	r1, #9
   124de:	4410      	add	r0, r2
   124e0:	f001 fb5c 	bl	13b9c <WStrReverseCpy>
   124e4:	4629      	mov	r1, r5
   124e6:	4620      	mov	r0, r4
   124e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   124ec:	f7ff b870 	b.w	115d0 <smpScActCalcSharedSecret>

000124f0 <smpiScActDHKeyCheckSend>:
   124f0:	b538      	push	{r3, r4, r5, lr}
   124f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   124f4:	4604      	mov	r4, r0
   124f6:	68d8      	ldr	r0, [r3, #12]
   124f8:	2210      	movs	r2, #16
   124fa:	460d      	mov	r5, r1
   124fc:	4410      	add	r0, r2
   124fe:	6849      	ldr	r1, [r1, #4]
   12500:	f001 fb4c 	bl	13b9c <WStrReverseCpy>
   12504:	230d      	movs	r3, #13
   12506:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1250a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1250c:	4629      	mov	r1, r5
   1250e:	68da      	ldr	r2, [r3, #12]
   12510:	4620      	mov	r0, r4
   12512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12516:	f7fe bcd0 	b.w	10eba <smpScSendDHKeyCheck>

0001251a <smpiScActDHKeyCheckVerify>:
   1251a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1251c:	6b47      	ldr	r7, [r0, #52]	; 0x34
   1251e:	4604      	mov	r4, r0
   12520:	68fb      	ldr	r3, [r7, #12]
   12522:	6848      	ldr	r0, [r1, #4]
   12524:	2210      	movs	r2, #16
   12526:	b085      	sub	sp, #20
   12528:	1899      	adds	r1, r3, r2
   1252a:	3009      	adds	r0, #9
   1252c:	f7f9 fde8 	bl	c100 <memcmp>
   12530:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   12534:	4606      	mov	r6, r0
   12536:	b9c0      	cbnz	r0, 1256a <smpiScActDHKeyCheckVerify+0x50>
   12538:	7ee3      	ldrb	r3, [r4, #27]
   1253a:	7d24      	ldrb	r4, [r4, #20]
   1253c:	6939      	ldr	r1, [r7, #16]
   1253e:	429c      	cmp	r4, r3
   12540:	bf28      	it	cs
   12542:	461c      	movcs	r4, r3
   12544:	4622      	mov	r2, r4
   12546:	3110      	adds	r1, #16
   12548:	4668      	mov	r0, sp
   1254a:	f7f9 fe09 	bl	c160 <memcpy>
   1254e:	f1c4 0210 	rsb	r2, r4, #16
   12552:	4631      	mov	r1, r6
   12554:	eb0d 0004 	add.w	r0, sp, r4
   12558:	f7f9 ff00 	bl	c35c <memset>
   1255c:	466a      	mov	r2, sp
   1255e:	2103      	movs	r1, #3
   12560:	4628      	mov	r0, r5
   12562:	f7ff f9bd 	bl	118e0 <DmSmpEncryptReq>
   12566:	b005      	add	sp, #20
   12568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1256a:	f640 331c 	movw	r3, #2844	; 0xb1c
   1256e:	4669      	mov	r1, sp
   12570:	4620      	mov	r0, r4
   12572:	f8ad 5000 	strh.w	r5, [sp]
   12576:	f8ad 3002 	strh.w	r3, [sp, #2]
   1257a:	f7ff fc1a 	bl	11db2 <smpSmExecute>
   1257e:	e7f2      	b.n	12566 <smpiScActDHKeyCheckVerify+0x4c>

00012580 <smprActSendSecurityReq>:
   12580:	b538      	push	{r3, r4, r5, lr}
   12582:	2301      	movs	r3, #1
   12584:	4604      	mov	r4, r0
   12586:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   1258a:	200a      	movs	r0, #10
   1258c:	460d      	mov	r5, r1
   1258e:	f7fe faf9 	bl	10b84 <smpMsgAlloc>
   12592:	b148      	cbz	r0, 125a8 <smprActSendSecurityReq+0x28>
   12594:	230b      	movs	r3, #11
   12596:	7203      	strb	r3, [r0, #8]
   12598:	792b      	ldrb	r3, [r5, #4]
   1259a:	7243      	strb	r3, [r0, #9]
   1259c:	4601      	mov	r1, r0
   1259e:	4620      	mov	r0, r4
   125a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125a4:	f7fe baa3 	b.w	10aee <smpSendPkt>
   125a8:	bd38      	pop	{r3, r4, r5, pc}

000125aa <smprActCheckSecurityReq>:
   125aa:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   125ae:	b10b      	cbz	r3, 125b4 <smprActCheckSecurityReq+0xa>
   125b0:	f7ff ba1f 	b.w	119f2 <smpActPairingFailed>
   125b4:	4770      	bx	lr

000125b6 <smprActClearSecurityReq>:
   125b6:	2300      	movs	r3, #0
   125b8:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   125bc:	4770      	bx	lr

000125be <smprActProcPairReq>:
   125be:	6a03      	ldr	r3, [r0, #32]
   125c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   125c2:	4604      	mov	r4, r0
   125c4:	460d      	mov	r5, r1
   125c6:	b96b      	cbnz	r3, 125e4 <smprActProcPairReq+0x26>
   125c8:	2040      	movs	r0, #64	; 0x40
   125ca:	f007 fefb 	bl	1a3c4 <WsfBufAlloc>
   125ce:	6220      	str	r0, [r4, #32]
   125d0:	b940      	cbnz	r0, 125e4 <smprActProcPairReq+0x26>
   125d2:	f640 0303 	movw	r3, #2051	; 0x803
   125d6:	806b      	strh	r3, [r5, #2]
   125d8:	4629      	mov	r1, r5
   125da:	4620      	mov	r0, r4
   125dc:	f7ff fbe9 	bl	11db2 <smpSmExecute>
   125e0:	b003      	add	sp, #12
   125e2:	bd30      	pop	{r4, r5, pc}
   125e4:	2201      	movs	r2, #1
   125e6:	4611      	mov	r1, r2
   125e8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   125ec:	f7fd f8ec 	bl	f7c8 <DmConnSetIdle>
   125f0:	686b      	ldr	r3, [r5, #4]
   125f2:	461a      	mov	r2, r3
   125f4:	f852 0f08 	ldr.w	r0, [r2, #8]!
   125f8:	6120      	str	r0, [r4, #16]
   125fa:	8890      	ldrh	r0, [r2, #4]
   125fc:	82a0      	strh	r0, [r4, #20]
   125fe:	7992      	ldrb	r2, [r2, #6]
   12600:	75a2      	strb	r2, [r4, #22]
   12602:	7a9a      	ldrb	r2, [r3, #10]
   12604:	f88d 2005 	strb.w	r2, [sp, #5]
   12608:	7ada      	ldrb	r2, [r3, #11]
   1260a:	f88d 2004 	strb.w	r2, [sp, #4]
   1260e:	7b5a      	ldrb	r2, [r3, #13]
   12610:	7b9b      	ldrb	r3, [r3, #14]
   12612:	f88d 3007 	strb.w	r3, [sp, #7]
   12616:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1261a:	f8ad 3000 	strh.w	r3, [sp]
   1261e:	4668      	mov	r0, sp
   12620:	2331      	movs	r3, #49	; 0x31
   12622:	f88d 2006 	strb.w	r2, [sp, #6]
   12626:	f88d 3002 	strb.w	r3, [sp, #2]
   1262a:	f7fd fce5 	bl	fff8 <DmSmpCbackExec>
   1262e:	e7d7      	b.n	125e0 <smprActProcPairReq+0x22>

00012630 <smprActSendPairRsp>:
   12630:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12632:	2302      	movs	r3, #2
   12634:	75c3      	strb	r3, [r0, #23]
   12636:	4b20      	ldr	r3, [pc, #128]	; (126b8 <smprActSendPairRsp+0x88>)
   12638:	4e20      	ldr	r6, [pc, #128]	; (126bc <smprActSendPairRsp+0x8c>)
   1263a:	681b      	ldr	r3, [r3, #0]
   1263c:	789a      	ldrb	r2, [r3, #2]
   1263e:	7602      	strb	r2, [r0, #24]
   12640:	790a      	ldrb	r2, [r1, #4]
   12642:	7642      	strb	r2, [r0, #25]
   12644:	794a      	ldrb	r2, [r1, #5]
   12646:	7682      	strb	r2, [r0, #26]
   12648:	791b      	ldrb	r3, [r3, #4]
   1264a:	76c3      	strb	r3, [r0, #27]
   1264c:	798b      	ldrb	r3, [r1, #6]
   1264e:	7703      	strb	r3, [r0, #28]
   12650:	79cb      	ldrb	r3, [r1, #7]
   12652:	7743      	strb	r3, [r0, #29]
   12654:	460d      	mov	r5, r1
   12656:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   1265a:	f10d 0207 	add.w	r2, sp, #7
   1265e:	f10d 0106 	add.w	r1, sp, #6
   12662:	4604      	mov	r4, r0
   12664:	4798      	blx	r3
   12666:	b320      	cbz	r0, 126b2 <smprActSendPairRsp+0x82>
   12668:	796b      	ldrb	r3, [r5, #5]
   1266a:	7ce2      	ldrb	r2, [r4, #19]
   1266c:	f003 0308 	and.w	r3, r3, #8
   12670:	4213      	tst	r3, r2
   12672:	bf14      	ite	ne
   12674:	230c      	movne	r3, #12
   12676:	2303      	moveq	r3, #3
   12678:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1267c:	4620      	mov	r0, r4
   1267e:	f7ff f985 	bl	1198c <smpStartRspTimer>
   12682:	200f      	movs	r0, #15
   12684:	f7fe fa7e 	bl	10b84 <smpMsgAlloc>
   12688:	4601      	mov	r1, r0
   1268a:	b150      	cbz	r0, 126a2 <smprActSendPairRsp+0x72>
   1268c:	4623      	mov	r3, r4
   1268e:	f853 0f17 	ldr.w	r0, [r3, #23]!
   12692:	6088      	str	r0, [r1, #8]
   12694:	8898      	ldrh	r0, [r3, #4]
   12696:	8188      	strh	r0, [r1, #12]
   12698:	799b      	ldrb	r3, [r3, #6]
   1269a:	738b      	strb	r3, [r1, #14]
   1269c:	4620      	mov	r0, r4
   1269e:	f7fe fa26 	bl	10aee <smpSendPkt>
   126a2:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   126a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   126aa:	f89d 1006 	ldrb.w	r1, [sp, #6]
   126ae:	4620      	mov	r0, r4
   126b0:	4798      	blx	r3
   126b2:	b002      	add	sp, #8
   126b4:	bd70      	pop	{r4, r5, r6, pc}
   126b6:	bf00      	nop
   126b8:	10002bb8 	.word	0x10002bb8
   126bc:	10003f14 	.word	0x10003f14

000126c0 <smprActProcPairCnf>:
   126c0:	b510      	push	{r4, lr}
   126c2:	684b      	ldr	r3, [r1, #4]
   126c4:	6a02      	ldr	r2, [r0, #32]
   126c6:	f103 0109 	add.w	r1, r3, #9
   126ca:	3220      	adds	r2, #32
   126cc:	3319      	adds	r3, #25
   126ce:	f851 4b04 	ldr.w	r4, [r1], #4
   126d2:	f842 4b04 	str.w	r4, [r2], #4
   126d6:	4299      	cmp	r1, r3
   126d8:	d1f9      	bne.n	126ce <smprActProcPairCnf+0xe>
   126da:	2300      	movs	r3, #0
   126dc:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   126e0:	bd10      	pop	{r4, pc}

000126e2 <smprActProcPairCnfCalc1>:
   126e2:	b510      	push	{r4, lr}
   126e4:	4604      	mov	r4, r0
   126e6:	f7ff ffeb 	bl	126c0 <smprActProcPairCnf>
   126ea:	6a00      	ldr	r0, [r0, #32]
   126ec:	2110      	movs	r1, #16
   126ee:	3030      	adds	r0, #48	; 0x30
   126f0:	f006 f9d6 	bl	18aa0 <SecRand>
   126f4:	6a21      	ldr	r1, [r4, #32]
   126f6:	4620      	mov	r0, r4
   126f8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   126fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12700:	f7fe b89c 	b.w	1083c <smpCalcC1Part1>

00012704 <smprActCnfVerify>:
   12704:	b570      	push	{r4, r5, r6, lr}
   12706:	460e      	mov	r6, r1
   12708:	6a05      	ldr	r5, [r0, #32]
   1270a:	4604      	mov	r4, r0
   1270c:	2210      	movs	r2, #16
   1270e:	f105 0120 	add.w	r1, r5, #32
   12712:	6870      	ldr	r0, [r6, #4]
   12714:	f7f9 fcf4 	bl	c100 <memcmp>
   12718:	b1a8      	cbz	r0, 12746 <smprActCnfVerify+0x42>
   1271a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1271e:	4a0f      	ldr	r2, [pc, #60]	; (1275c <smprActCnfVerify+0x58>)
   12720:	3301      	adds	r3, #1
   12722:	b2db      	uxtb	r3, r3
   12724:	6812      	ldr	r2, [r2, #0]
   12726:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1272a:	7952      	ldrb	r2, [r2, #5]
   1272c:	429a      	cmp	r2, r3
   1272e:	bf0c      	ite	eq
   12730:	f240 430d 	movweq	r3, #1037	; 0x40d
   12734:	f240 4303 	movwne	r3, #1027	; 0x403
   12738:	8073      	strh	r3, [r6, #2]
   1273a:	4631      	mov	r1, r6
   1273c:	4620      	mov	r0, r4
   1273e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12742:	f7ff bb36 	b.w	11db2 <smpSmExecute>
   12746:	f105 0310 	add.w	r3, r5, #16
   1274a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1274e:	4629      	mov	r1, r5
   12750:	4620      	mov	r0, r4
   12752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12756:	f7fe b973 	b.w	10a40 <smpCalcS1>
   1275a:	bf00      	nop
   1275c:	10002bb8 	.word	0x10002bb8

00012760 <smprActSendPairRandom>:
   12760:	b538      	push	{r3, r4, r5, lr}
   12762:	7ec5      	ldrb	r5, [r0, #27]
   12764:	7d03      	ldrb	r3, [r0, #20]
   12766:	6849      	ldr	r1, [r1, #4]
   12768:	429d      	cmp	r5, r3
   1276a:	4604      	mov	r4, r0
   1276c:	6a00      	ldr	r0, [r0, #32]
   1276e:	bf28      	it	cs
   12770:	461d      	movcs	r5, r3
   12772:	462a      	mov	r2, r5
   12774:	3020      	adds	r0, #32
   12776:	f7f9 fcf3 	bl	c160 <memcpy>
   1277a:	6a20      	ldr	r0, [r4, #32]
   1277c:	3020      	adds	r0, #32
   1277e:	2100      	movs	r1, #0
   12780:	f1c5 0210 	rsb	r2, r5, #16
   12784:	4428      	add	r0, r5
   12786:	f7f9 fde9 	bl	c35c <memset>
   1278a:	4620      	mov	r0, r4
   1278c:	f7ff f8fe 	bl	1198c <smpStartRspTimer>
   12790:	2019      	movs	r0, #25
   12792:	f7fe f9f7 	bl	10b84 <smpMsgAlloc>
   12796:	4601      	mov	r1, r0
   12798:	b188      	cbz	r0, 127be <smprActSendPairRandom+0x5e>
   1279a:	2304      	movs	r3, #4
   1279c:	7203      	strb	r3, [r0, #8]
   1279e:	6a23      	ldr	r3, [r4, #32]
   127a0:	3009      	adds	r0, #9
   127a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
   127a6:	3340      	adds	r3, #64	; 0x40
   127a8:	f852 5b04 	ldr.w	r5, [r2], #4
   127ac:	f840 5b04 	str.w	r5, [r0], #4
   127b0:	429a      	cmp	r2, r3
   127b2:	d1f9      	bne.n	127a8 <smprActSendPairRandom+0x48>
   127b4:	4620      	mov	r0, r4
   127b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127ba:	f7fe b998 	b.w	10aee <smpSendPkt>
   127be:	bd38      	pop	{r3, r4, r5, pc}

000127c0 <smprActSendKey>:
   127c0:	b538      	push	{r3, r4, r5, lr}
   127c2:	460d      	mov	r5, r1
   127c4:	7f43      	ldrb	r3, [r0, #29]
   127c6:	7d81      	ldrb	r1, [r0, #22]
   127c8:	4019      	ands	r1, r3
   127ca:	4604      	mov	r4, r0
   127cc:	f7ff f993 	bl	11af6 <smpSendKey>
   127d0:	b330      	cbz	r0, 12820 <smprActSendKey+0x60>
   127d2:	2300      	movs	r3, #0
   127d4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   127d8:	7f22      	ldrb	r2, [r4, #28]
   127da:	7d63      	ldrb	r3, [r4, #21]
   127dc:	4013      	ands	r3, r2
   127de:	07d8      	lsls	r0, r3, #31
   127e0:	d518      	bpl.n	12814 <smprActSendKey+0x54>
   127e2:	4a10      	ldr	r2, [pc, #64]	; (12824 <smprActSendKey+0x64>)
   127e4:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   127e8:	b192      	cbz	r2, 12810 <smprActSendKey+0x50>
   127ea:	6b62      	ldr	r2, [r4, #52]	; 0x34
   127ec:	7812      	ldrb	r2, [r2, #0]
   127ee:	b17a      	cbz	r2, 12810 <smprActSendKey+0x50>
   127f0:	0799      	lsls	r1, r3, #30
   127f2:	d502      	bpl.n	127fa <smprActSendKey+0x3a>
   127f4:	2308      	movs	r3, #8
   127f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   127fa:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   127fe:	b97b      	cbnz	r3, 12820 <smprActSendKey+0x60>
   12800:	230e      	movs	r3, #14
   12802:	70ab      	strb	r3, [r5, #2]
   12804:	4629      	mov	r1, r5
   12806:	4620      	mov	r0, r4
   12808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1280c:	f7ff bad1 	b.w	11db2 <smpSmExecute>
   12810:	2306      	movs	r3, #6
   12812:	e7f0      	b.n	127f6 <smprActSendKey+0x36>
   12814:	079a      	lsls	r2, r3, #30
   12816:	d4ed      	bmi.n	127f4 <smprActSendKey+0x34>
   12818:	075b      	lsls	r3, r3, #29
   1281a:	d5ee      	bpl.n	127fa <smprActSendKey+0x3a>
   1281c:	230a      	movs	r3, #10
   1281e:	e7ea      	b.n	127f6 <smprActSendKey+0x36>
   12820:	bd38      	pop	{r3, r4, r5, pc}
   12822:	bf00      	nop
   12824:	10003f14 	.word	0x10003f14

00012828 <smprActSetupKeyDist>:
   12828:	b538      	push	{r3, r4, r5, lr}
   1282a:	4604      	mov	r4, r0
   1282c:	2300      	movs	r3, #0
   1282e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12832:	460d      	mov	r5, r1
   12834:	f7ff f8aa 	bl	1198c <smpStartRspTimer>
   12838:	6a23      	ldr	r3, [r4, #32]
   1283a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1283e:	801a      	strh	r2, [r3, #0]
   12840:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   12844:	f012 0f04 	tst.w	r2, #4
   12848:	bf14      	ite	ne
   1284a:	2202      	movne	r2, #2
   1284c:	2201      	moveq	r2, #1
   1284e:	77da      	strb	r2, [r3, #31]
   12850:	7d21      	ldrb	r1, [r4, #20]
   12852:	7ee2      	ldrb	r2, [r4, #27]
   12854:	428a      	cmp	r2, r1
   12856:	bf28      	it	cs
   12858:	460a      	movcs	r2, r1
   1285a:	f883 2020 	strb.w	r2, [r3, #32]
   1285e:	4629      	mov	r1, r5
   12860:	4620      	mov	r0, r4
   12862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12866:	f7ff bfab 	b.w	127c0 <smprActSendKey>

0001286a <smprActRcvKey>:
   1286a:	b538      	push	{r3, r4, r5, lr}
   1286c:	7d42      	ldrb	r2, [r0, #21]
   1286e:	7f03      	ldrb	r3, [r0, #28]
   12870:	460d      	mov	r5, r1
   12872:	4013      	ands	r3, r2
   12874:	684a      	ldr	r2, [r1, #4]
   12876:	6a01      	ldr	r1, [r0, #32]
   12878:	4604      	mov	r4, r0
   1287a:	f7ff f9fb 	bl	11c74 <smpProcRcvKey>
   1287e:	b138      	cbz	r0, 12890 <smprActRcvKey+0x26>
   12880:	230e      	movs	r3, #14
   12882:	70ab      	strb	r3, [r5, #2]
   12884:	4629      	mov	r1, r5
   12886:	4620      	mov	r0, r4
   12888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1288c:	f7ff ba91 	b.w	11db2 <smpSmExecute>
   12890:	bd38      	pop	{r3, r4, r5, pc}
   12892:	bf00      	nop

00012894 <smprScActStoreLescPin>:
   12894:	b570      	push	{r4, r5, r6, lr}
   12896:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12898:	785a      	ldrb	r2, [r3, #1]
   1289a:	2a03      	cmp	r2, #3
   1289c:	4604      	mov	r4, r0
   1289e:	460d      	mov	r5, r1
   128a0:	d11d      	bne.n	128de <smprScActStoreLescPin+0x4a>
   128a2:	68d8      	ldr	r0, [r3, #12]
   128a4:	490e      	ldr	r1, [pc, #56]	; (128e0 <smprScActStoreLescPin+0x4c>)
   128a6:	3020      	adds	r0, #32
   128a8:	f001 f93d 	bl	13b26 <Calc128Cpy>
   128ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   128ae:	490c      	ldr	r1, [pc, #48]	; (128e0 <smprScActStoreLescPin+0x4c>)
   128b0:	68d8      	ldr	r0, [r3, #12]
   128b2:	3030      	adds	r0, #48	; 0x30
   128b4:	f001 f937 	bl	13b26 <Calc128Cpy>
   128b8:	7d2a      	ldrb	r2, [r5, #20]
   128ba:	2a03      	cmp	r2, #3
   128bc:	d80f      	bhi.n	128de <smprScActStoreLescPin+0x4a>
   128be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   128c0:	68d8      	ldr	r0, [r3, #12]
   128c2:	1d2e      	adds	r6, r5, #4
   128c4:	4631      	mov	r1, r6
   128c6:	302d      	adds	r0, #45	; 0x2d
   128c8:	f001 f968 	bl	13b9c <WStrReverseCpy>
   128cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   128ce:	7d2a      	ldrb	r2, [r5, #20]
   128d0:	68d8      	ldr	r0, [r3, #12]
   128d2:	4631      	mov	r1, r6
   128d4:	303d      	adds	r0, #61	; 0x3d
   128d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   128da:	f001 b95f 	b.w	13b9c <WStrReverseCpy>
   128de:	bd70      	pop	{r4, r5, r6, pc}
   128e0:	00023994 	.word	0x00023994

000128e4 <smprScActSendPubKey>:
   128e4:	b538      	push	{r3, r4, r5, lr}
   128e6:	4604      	mov	r4, r0
   128e8:	460d      	mov	r5, r1
   128ea:	f7fe fd74 	bl	113d6 <smpScActAuthSelect>
   128ee:	4629      	mov	r1, r5
   128f0:	4620      	mov	r0, r4
   128f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128f6:	f7fe baae 	b.w	10e56 <smpScSendPubKey>

000128fa <smprScActJwncSetup>:
   128fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
   128fc:	b570      	push	{r4, r5, r6, lr}
   128fe:	4604      	mov	r4, r0
   12900:	68d8      	ldr	r0, [r3, #12]
   12902:	4d0d      	ldr	r5, [pc, #52]	; (12938 <smprScActJwncSetup+0x3e>)
   12904:	460e      	mov	r6, r1
   12906:	2110      	movs	r1, #16
   12908:	4408      	add	r0, r1
   1290a:	f006 f8c9 	bl	18aa0 <SecRand>
   1290e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12910:	68d8      	ldr	r0, [r3, #12]
   12912:	4629      	mov	r1, r5
   12914:	3020      	adds	r0, #32
   12916:	f001 f906 	bl	13b26 <Calc128Cpy>
   1291a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1291c:	68d8      	ldr	r0, [r3, #12]
   1291e:	4629      	mov	r1, r5
   12920:	3030      	adds	r0, #48	; 0x30
   12922:	f001 f900 	bl	13b26 <Calc128Cpy>
   12926:	2304      	movs	r3, #4
   12928:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1292c:	4631      	mov	r1, r6
   1292e:	4620      	mov	r0, r4
   12930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12934:	f7fe bd99 	b.w	1146a <smpScActJwncCalcF4>
   12938:	00023994 	.word	0x00023994

0001293c <smprScActJwncSendCnf>:
   1293c:	684a      	ldr	r2, [r1, #4]
   1293e:	f7fe bb0c 	b.w	10f5a <smpScSendPairCnf>

00012942 <smprScActJwncCalcG2>:
   12942:	b538      	push	{r3, r4, r5, lr}
   12944:	460d      	mov	r5, r1
   12946:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12948:	6849      	ldr	r1, [r1, #4]
   1294a:	4604      	mov	r4, r0
   1294c:	3109      	adds	r1, #9
   1294e:	68d8      	ldr	r0, [r3, #12]
   12950:	2210      	movs	r2, #16
   12952:	f001 f923 	bl	13b9c <WStrReverseCpy>
   12956:	4629      	mov	r1, r5
   12958:	4620      	mov	r0, r4
   1295a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1295e:	f7fe bda6 	b.w	114ae <smpScActJwncCalcG2>

00012962 <smprScActPkStoreCnf>:
   12962:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12964:	6849      	ldr	r1, [r1, #4]
   12966:	68d8      	ldr	r0, [r3, #12]
   12968:	2210      	movs	r2, #16
   1296a:	3109      	adds	r1, #9
   1296c:	3050      	adds	r0, #80	; 0x50
   1296e:	f001 b915 	b.w	13b9c <WStrReverseCpy>

00012972 <smprScActPkCalcCb>:
   12972:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12976:	4604      	mov	r4, r0
   12978:	68d8      	ldr	r0, [r3, #12]
   1297a:	460d      	mov	r5, r1
   1297c:	2110      	movs	r1, #16
   1297e:	4408      	add	r0, r1
   12980:	f006 f88e 	bl	18aa0 <SecRand>
   12984:	2304      	movs	r3, #4
   12986:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1298a:	f7fd fce9 	bl	10360 <DmSecGetEccKey>
   1298e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12990:	4606      	mov	r6, r0
   12992:	4620      	mov	r0, r4
   12994:	689f      	ldr	r7, [r3, #8]
   12996:	f7fe fb08 	bl	10faa <smpGetPkBit>
   1299a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1299c:	68d9      	ldr	r1, [r3, #12]
   1299e:	3110      	adds	r1, #16
   129a0:	e9cd 0100 	strd	r0, r1, [sp]
   129a4:	463b      	mov	r3, r7
   129a6:	4632      	mov	r2, r6
   129a8:	4629      	mov	r1, r5
   129aa:	4620      	mov	r0, r4
   129ac:	f7fe f9e4 	bl	10d78 <SmpScCalcF4>
   129b0:	b003      	add	sp, #12
   129b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000129b4 <smprScActPkStoreCnfAndCalcCb>:
   129b4:	b538      	push	{r3, r4, r5, lr}
   129b6:	4604      	mov	r4, r0
   129b8:	460d      	mov	r5, r1
   129ba:	f7ff ffd2 	bl	12962 <smprScActPkStoreCnf>
   129be:	4629      	mov	r1, r5
   129c0:	4620      	mov	r0, r4
   129c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129c6:	f7ff bfd4 	b.w	12972 <smprScActPkCalcCb>

000129ca <smprScActPkStorePinAndCalcCb>:
   129ca:	b538      	push	{r3, r4, r5, lr}
   129cc:	4604      	mov	r4, r0
   129ce:	460d      	mov	r5, r1
   129d0:	f7ff ff60 	bl	12894 <smprScActStoreLescPin>
   129d4:	4629      	mov	r1, r5
   129d6:	4620      	mov	r0, r4
   129d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   129dc:	f7ff bfc9 	b.w	12972 <smprScActPkCalcCb>

000129e0 <smprScActPkSendCnf>:
   129e0:	f7ff bfac 	b.w	1293c <smprScActJwncSendCnf>

000129e4 <smprScActPkCalcCa>:
   129e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   129e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   129e8:	460d      	mov	r5, r1
   129ea:	6849      	ldr	r1, [r1, #4]
   129ec:	4604      	mov	r4, r0
   129ee:	2210      	movs	r2, #16
   129f0:	3109      	adds	r1, #9
   129f2:	68d8      	ldr	r0, [r3, #12]
   129f4:	f001 f8d2 	bl	13b9c <WStrReverseCpy>
   129f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   129fa:	689e      	ldr	r6, [r3, #8]
   129fc:	f7fd fcb0 	bl	10360 <DmSecGetEccKey>
   12a00:	4607      	mov	r7, r0
   12a02:	4620      	mov	r0, r4
   12a04:	f7fe fad1 	bl	10faa <smpGetPkBit>
   12a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a0a:	68db      	ldr	r3, [r3, #12]
   12a0c:	4632      	mov	r2, r6
   12a0e:	e9cd 0300 	strd	r0, r3, [sp]
   12a12:	4629      	mov	r1, r5
   12a14:	463b      	mov	r3, r7
   12a16:	4620      	mov	r0, r4
   12a18:	f7fe f9ae 	bl	10d78 <SmpScCalcF4>
   12a1c:	b003      	add	sp, #12
   12a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012a20 <smprScActPkSendRand>:
   12a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12a22:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12a24:	68ef      	ldr	r7, [r5, #12]
   12a26:	4604      	mov	r4, r0
   12a28:	460e      	mov	r6, r1
   12a2a:	2210      	movs	r2, #16
   12a2c:	6849      	ldr	r1, [r1, #4]
   12a2e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   12a32:	f7f9 fb65 	bl	c100 <memcmp>
   12a36:	b168      	cbz	r0, 12a54 <smprScActPkSendRand+0x34>
   12a38:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12a3c:	f8ad 3004 	strh.w	r3, [sp, #4]
   12a40:	f240 4303 	movw	r3, #1027	; 0x403
   12a44:	f8ad 3006 	strh.w	r3, [sp, #6]
   12a48:	a901      	add	r1, sp, #4
   12a4a:	4620      	mov	r0, r4
   12a4c:	f7ff f9b1 	bl	11db2 <smpSmExecute>
   12a50:	b003      	add	sp, #12
   12a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a54:	78eb      	ldrb	r3, [r5, #3]
   12a56:	3301      	adds	r3, #1
   12a58:	b2db      	uxtb	r3, r3
   12a5a:	2b13      	cmp	r3, #19
   12a5c:	70eb      	strb	r3, [r5, #3]
   12a5e:	d907      	bls.n	12a70 <smprScActPkSendRand+0x50>
   12a60:	231a      	movs	r3, #26
   12a62:	f88d 3006 	strb.w	r3, [sp, #6]
   12a66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12a6a:	f8ad 3004 	strh.w	r3, [sp, #4]
   12a6e:	e7eb      	b.n	12a48 <smprScActPkSendRand+0x28>
   12a70:	2303      	movs	r3, #3
   12a72:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12a76:	f107 0210 	add.w	r2, r7, #16
   12a7a:	2319      	movs	r3, #25
   12a7c:	4631      	mov	r1, r6
   12a7e:	4620      	mov	r0, r4
   12a80:	f88d 3006 	strb.w	r3, [sp, #6]
   12a84:	f7fe fa41 	bl	10f0a <smpScSendRand>
   12a88:	e7ed      	b.n	12a66 <smprScActPkSendRand+0x46>

00012a8a <smprScActOobSetup>:
   12a8a:	2304      	movs	r3, #4
   12a8c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12a90:	4770      	bx	lr

00012a92 <smprScActOobCalcCa>:
   12a92:	b530      	push	{r4, r5, lr}
   12a94:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a96:	460d      	mov	r5, r1
   12a98:	6849      	ldr	r1, [r1, #4]
   12a9a:	4604      	mov	r4, r0
   12a9c:	b085      	sub	sp, #20
   12a9e:	68d8      	ldr	r0, [r3, #12]
   12aa0:	2210      	movs	r2, #16
   12aa2:	3109      	adds	r1, #9
   12aa4:	f001 f87a 	bl	13b9c <WStrReverseCpy>
   12aa8:	7e63      	ldrb	r3, [r4, #25]
   12aaa:	2b01      	cmp	r3, #1
   12aac:	d005      	beq.n	12aba <smprScActOobCalcCa+0x28>
   12aae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12ab0:	4912      	ldr	r1, [pc, #72]	; (12afc <smprScActOobCalcCa+0x6a>)
   12ab2:	68d8      	ldr	r0, [r3, #12]
   12ab4:	3030      	adds	r0, #48	; 0x30
   12ab6:	f001 f836 	bl	13b26 <Calc128Cpy>
   12aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12abc:	7ca2      	ldrb	r2, [r4, #18]
   12abe:	68d8      	ldr	r0, [r3, #12]
   12ac0:	2a01      	cmp	r2, #1
   12ac2:	f100 0020 	add.w	r0, r0, #32
   12ac6:	d10a      	bne.n	12ade <smprScActOobCalcCa+0x4c>
   12ac8:	689b      	ldr	r3, [r3, #8]
   12aca:	9001      	str	r0, [sp, #4]
   12acc:	2200      	movs	r2, #0
   12ace:	9200      	str	r2, [sp, #0]
   12ad0:	4629      	mov	r1, r5
   12ad2:	461a      	mov	r2, r3
   12ad4:	4620      	mov	r0, r4
   12ad6:	f7fe f94f 	bl	10d78 <SmpScCalcF4>
   12ada:	b005      	add	sp, #20
   12adc:	bd30      	pop	{r4, r5, pc}
   12ade:	4907      	ldr	r1, [pc, #28]	; (12afc <smprScActOobCalcCa+0x6a>)
   12ae0:	f001 f821 	bl	13b26 <Calc128Cpy>
   12ae4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
   12aec:	a903      	add	r1, sp, #12
   12aee:	231b      	movs	r3, #27
   12af0:	4620      	mov	r0, r4
   12af2:	f88d 300e 	strb.w	r3, [sp, #14]
   12af6:	f7ff f95c 	bl	11db2 <smpSmExecute>
   12afa:	e7ee      	b.n	12ada <smprScActOobCalcCa+0x48>
   12afc:	00023994 	.word	0x00023994

00012b00 <smprScActOobSendRand>:
   12b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12b02:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b04:	68de      	ldr	r6, [r3, #12]
   12b06:	7c83      	ldrb	r3, [r0, #18]
   12b08:	2b01      	cmp	r3, #1
   12b0a:	4604      	mov	r4, r0
   12b0c:	460d      	mov	r5, r1
   12b0e:	d114      	bne.n	12b3a <smprScActOobSendRand+0x3a>
   12b10:	2210      	movs	r2, #16
   12b12:	6849      	ldr	r1, [r1, #4]
   12b14:	f106 0050 	add.w	r0, r6, #80	; 0x50
   12b18:	f7f9 faf2 	bl	c100 <memcmp>
   12b1c:	b168      	cbz	r0, 12b3a <smprScActOobSendRand+0x3a>
   12b1e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12b22:	f8ad 3004 	strh.w	r3, [sp, #4]
   12b26:	a901      	add	r1, sp, #4
   12b28:	f240 4303 	movw	r3, #1027	; 0x403
   12b2c:	4620      	mov	r0, r4
   12b2e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12b32:	f7ff f93e 	bl	11db2 <smpSmExecute>
   12b36:	b002      	add	sp, #8
   12b38:	bd70      	pop	{r4, r5, r6, pc}
   12b3a:	230d      	movs	r3, #13
   12b3c:	2110      	movs	r1, #16
   12b3e:	1870      	adds	r0, r6, r1
   12b40:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12b44:	f005 ffac 	bl	18aa0 <SecRand>
   12b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b4a:	68da      	ldr	r2, [r3, #12]
   12b4c:	4629      	mov	r1, r5
   12b4e:	3210      	adds	r2, #16
   12b50:	4620      	mov	r0, r4
   12b52:	f7fe f9da 	bl	10f0a <smpScSendRand>
   12b56:	e7ee      	b.n	12b36 <smprScActOobSendRand+0x36>

00012b58 <smprScActWaitDhCheck>:
   12b58:	220d      	movs	r2, #13
   12b5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b5c:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   12b60:	785a      	ldrb	r2, [r3, #1]
   12b62:	2a02      	cmp	r2, #2
   12b64:	d003      	beq.n	12b6e <smprScActWaitDhCheck+0x16>
   12b66:	68da      	ldr	r2, [r3, #12]
   12b68:	3210      	adds	r2, #16
   12b6a:	f7fe b9ce 	b.w	10f0a <smpScSendRand>
   12b6e:	4770      	bx	lr

00012b70 <smprScActCalcDHKey>:
   12b70:	b538      	push	{r3, r4, r5, lr}
   12b72:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b74:	4604      	mov	r4, r0
   12b76:	460d      	mov	r5, r1
   12b78:	68d8      	ldr	r0, [r3, #12]
   12b7a:	6849      	ldr	r1, [r1, #4]
   12b7c:	3050      	adds	r0, #80	; 0x50
   12b7e:	3109      	adds	r1, #9
   12b80:	2210      	movs	r2, #16
   12b82:	f001 f80b 	bl	13b9c <WStrReverseCpy>
   12b86:	4629      	mov	r1, r5
   12b88:	4620      	mov	r0, r4
   12b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12b8e:	f7fe bd1f 	b.w	115d0 <smpScActCalcSharedSecret>

00012b92 <smprScActDHKeyCheckSend>:
   12b92:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12b96:	4604      	mov	r4, r0
   12b98:	68d8      	ldr	r0, [r3, #12]
   12b9a:	460e      	mov	r6, r1
   12b9c:	3010      	adds	r0, #16
   12b9e:	6849      	ldr	r1, [r1, #4]
   12ba0:	f000 ffc1 	bl	13b26 <Calc128Cpy>
   12ba4:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12ba6:	68e9      	ldr	r1, [r5, #12]
   12ba8:	2210      	movs	r2, #16
   12baa:	f101 0050 	add.w	r0, r1, #80	; 0x50
   12bae:	f7f9 faa7 	bl	c100 <memcmp>
   12bb2:	4601      	mov	r1, r0
   12bb4:	b9a0      	cbnz	r0, 12be0 <smprScActDHKeyCheckSend+0x4e>
   12bb6:	7d20      	ldrb	r0, [r4, #20]
   12bb8:	7ee3      	ldrb	r3, [r4, #27]
   12bba:	692d      	ldr	r5, [r5, #16]
   12bbc:	4298      	cmp	r0, r3
   12bbe:	bf28      	it	cs
   12bc0:	4618      	movcs	r0, r3
   12bc2:	3510      	adds	r5, #16
   12bc4:	f1c0 0210 	rsb	r2, r0, #16
   12bc8:	4428      	add	r0, r5
   12bca:	f7f9 fbc7 	bl	c35c <memset>
   12bce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12bd0:	68da      	ldr	r2, [r3, #12]
   12bd2:	4631      	mov	r1, r6
   12bd4:	3210      	adds	r2, #16
   12bd6:	4620      	mov	r0, r4
   12bd8:	f7fe f96f 	bl	10eba <smpScSendDHKeyCheck>
   12bdc:	b002      	add	sp, #8
   12bde:	bd70      	pop	{r4, r5, r6, pc}
   12be0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12be4:	f8ad 3004 	strh.w	r3, [sp, #4]
   12be8:	a901      	add	r1, sp, #4
   12bea:	f640 331c 	movw	r3, #2844	; 0xb1c
   12bee:	4620      	mov	r0, r4
   12bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
   12bf4:	f7ff f8dd 	bl	11db2 <smpSmExecute>
   12bf8:	e7f0      	b.n	12bdc <smprScActDHKeyCheckSend+0x4a>
   12bfa:	bf00      	nop

00012bfc <basNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t basNoConnActive(void)
{
   12bfc:	b480      	push	{r7}
   12bfe:	b083      	sub	sp, #12
   12c00:	af00      	add	r7, sp, #0
  basConn_t     *pConn = basCb.conn;
   12c02:	4b0d      	ldr	r3, [pc, #52]	; (12c38 <basNoConnActive+0x3c>)
   12c04:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12c06:	2300      	movs	r3, #0
   12c08:	70fb      	strb	r3, [r7, #3]
   12c0a:	e00b      	b.n	12c24 <basNoConnActive+0x28>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	781b      	ldrb	r3, [r3, #0]
   12c10:	2b00      	cmp	r3, #0
   12c12:	d001      	beq.n	12c18 <basNoConnActive+0x1c>
    {      
      return FALSE;
   12c14:	2300      	movs	r3, #0
   12c16:	e009      	b.n	12c2c <basNoConnActive+0x30>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12c18:	78fb      	ldrb	r3, [r7, #3]
   12c1a:	3301      	adds	r3, #1
   12c1c:	70fb      	strb	r3, [r7, #3]
   12c1e:	687b      	ldr	r3, [r7, #4]
   12c20:	3303      	adds	r3, #3
   12c22:	607b      	str	r3, [r7, #4]
   12c24:	78fb      	ldrb	r3, [r7, #3]
   12c26:	2b07      	cmp	r3, #7
   12c28:	d9f0      	bls.n	12c0c <basNoConnActive+0x10>
    }
  }
  return TRUE;
   12c2a:	2301      	movs	r3, #1
}
   12c2c:	4618      	mov	r0, r3
   12c2e:	370c      	adds	r7, #12
   12c30:	46bd      	mov	sp, r7
   12c32:	f85d 7b04 	ldr.w	r7, [sp], #4
   12c36:	4770      	bx	lr
   12c38:	1000418c 	.word	0x1000418c

00012c3c <basSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSetupToSend(void)
{
   12c3c:	b480      	push	{r7}
   12c3e:	b083      	sub	sp, #12
   12c40:	af00      	add	r7, sp, #0
  basConn_t     *pConn = basCb.conn;
   12c42:	4b0d      	ldr	r3, [pc, #52]	; (12c78 <basSetupToSend+0x3c>)
   12c44:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12c46:	2300      	movs	r3, #0
   12c48:	70fb      	strb	r3, [r7, #3]
   12c4a:	e00c      	b.n	12c66 <basSetupToSend+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   12c4c:	687b      	ldr	r3, [r7, #4]
   12c4e:	781b      	ldrb	r3, [r3, #0]
   12c50:	2b00      	cmp	r3, #0
   12c52:	d002      	beq.n	12c5a <basSetupToSend+0x1e>
    {      
      pConn->battToSend = TRUE;
   12c54:	687b      	ldr	r3, [r7, #4]
   12c56:	2201      	movs	r2, #1
   12c58:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12c5a:	78fb      	ldrb	r3, [r7, #3]
   12c5c:	3301      	adds	r3, #1
   12c5e:	70fb      	strb	r3, [r7, #3]
   12c60:	687b      	ldr	r3, [r7, #4]
   12c62:	3303      	adds	r3, #3
   12c64:	607b      	str	r3, [r7, #4]
   12c66:	78fb      	ldrb	r3, [r7, #3]
   12c68:	2b07      	cmp	r3, #7
   12c6a:	d9ef      	bls.n	12c4c <basSetupToSend+0x10>
    }
  }
}
   12c6c:	bf00      	nop
   12c6e:	370c      	adds	r7, #12
   12c70:	46bd      	mov	sp, r7
   12c72:	f85d 7b04 	ldr.w	r7, [sp], #4
   12c76:	4770      	bx	lr
   12c78:	1000418c 	.word	0x1000418c

00012c7c <basFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static basConn_t *basFindNextToSend(uint8_t cccIdx)
{
   12c7c:	b580      	push	{r7, lr}
   12c7e:	b084      	sub	sp, #16
   12c80:	af00      	add	r7, sp, #0
   12c82:	4603      	mov	r3, r0
   12c84:	71fb      	strb	r3, [r7, #7]
  basConn_t    *pConn = basCb.conn;
   12c86:	4b17      	ldr	r3, [pc, #92]	; (12ce4 <basFindNextToSend+0x68>)
   12c88:	60fb      	str	r3, [r7, #12]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12c8a:	2300      	movs	r3, #0
   12c8c:	72fb      	strb	r3, [r7, #11]
   12c8e:	e020      	b.n	12cd2 <basFindNextToSend+0x56>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   12c90:	68fb      	ldr	r3, [r7, #12]
   12c92:	781b      	ldrb	r3, [r3, #0]
   12c94:	2b00      	cmp	r3, #0
   12c96:	d016      	beq.n	12cc6 <basFindNextToSend+0x4a>
   12c98:	68fb      	ldr	r3, [r7, #12]
   12c9a:	785b      	ldrb	r3, [r3, #1]
   12c9c:	2b00      	cmp	r3, #0
   12c9e:	d012      	beq.n	12cc6 <basFindNextToSend+0x4a>
        pConn->sentBattLevel != basCb.measBattLevel)
   12ca0:	68fb      	ldr	r3, [r7, #12]
   12ca2:	789a      	ldrb	r2, [r3, #2]
   12ca4:	4b0f      	ldr	r3, [pc, #60]	; (12ce4 <basFindNextToSend+0x68>)
   12ca6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   12caa:	429a      	cmp	r2, r3
   12cac:	d00b      	beq.n	12cc6 <basFindNextToSend+0x4a>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   12cae:	68fb      	ldr	r3, [r7, #12]
   12cb0:	781b      	ldrb	r3, [r3, #0]
   12cb2:	79fa      	ldrb	r2, [r7, #7]
   12cb4:	4611      	mov	r1, r2
   12cb6:	4618      	mov	r0, r3
   12cb8:	f7fa fb94 	bl	d3e4 <AttsCccEnabled>
   12cbc:	4603      	mov	r3, r0
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	d001      	beq.n	12cc6 <basFindNextToSend+0x4a>
      {
        return pConn;
   12cc2:	68fb      	ldr	r3, [r7, #12]
   12cc4:	e009      	b.n	12cda <basFindNextToSend+0x5e>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12cc6:	7afb      	ldrb	r3, [r7, #11]
   12cc8:	3301      	adds	r3, #1
   12cca:	72fb      	strb	r3, [r7, #11]
   12ccc:	68fb      	ldr	r3, [r7, #12]
   12cce:	3303      	adds	r3, #3
   12cd0:	60fb      	str	r3, [r7, #12]
   12cd2:	7afb      	ldrb	r3, [r7, #11]
   12cd4:	2b07      	cmp	r3, #7
   12cd6:	d9db      	bls.n	12c90 <basFindNextToSend+0x14>
      }
    }
  }
  return NULL;
   12cd8:	2300      	movs	r3, #0
}
   12cda:	4618      	mov	r0, r3
   12cdc:	3710      	adds	r7, #16
   12cde:	46bd      	mov	sp, r7
   12ce0:	bd80      	pop	{r7, pc}
   12ce2:	bf00      	nop
   12ce4:	1000418c 	.word	0x1000418c

00012ce8 <basSendPeriodicBattlevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSendPeriodicBattlevel(basConn_t *pConn)
{
   12ce8:	b580      	push	{r7, lr}
   12cea:	b082      	sub	sp, #8
   12cec:	af00      	add	r7, sp, #0
   12cee:	6078      	str	r0, [r7, #4]
  BasSendBattLevel(pConn->connId, basCb.measTimer.msg.status, basCb.measBattLevel);
   12cf0:	687b      	ldr	r3, [r7, #4]
   12cf2:	7818      	ldrb	r0, [r3, #0]
   12cf4:	4b0c      	ldr	r3, [pc, #48]	; (12d28 <basSendPeriodicBattlevel+0x40>)
   12cf6:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   12cfa:	4b0b      	ldr	r3, [pc, #44]	; (12d28 <basSendPeriodicBattlevel+0x40>)
   12cfc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   12d00:	461a      	mov	r2, r3
   12d02:	f000 f92b 	bl	12f5c <BasSendBattLevel>
  pConn->sentBattLevel = basCb.measBattLevel;
   12d06:	4b08      	ldr	r3, [pc, #32]	; (12d28 <basSendPeriodicBattlevel+0x40>)
   12d08:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   12d0c:	687b      	ldr	r3, [r7, #4]
   12d0e:	709a      	strb	r2, [r3, #2]
  pConn->battToSend = FALSE;
   12d10:	687b      	ldr	r3, [r7, #4]
   12d12:	2200      	movs	r2, #0
   12d14:	705a      	strb	r2, [r3, #1]
  basCb.txReady = FALSE;
   12d16:	4b04      	ldr	r3, [pc, #16]	; (12d28 <basSendPeriodicBattlevel+0x40>)
   12d18:	2200      	movs	r2, #0
   12d1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   12d1e:	bf00      	nop
   12d20:	3708      	adds	r7, #8
   12d22:	46bd      	mov	sp, r7
   12d24:	bd80      	pop	{r7, pc}
   12d26:	bf00      	nop
   12d28:	1000418c 	.word	0x1000418c

00012d2c <basConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basConnOpen(dmEvt_t *pMsg)
{
   12d2c:	b480      	push	{r7}
   12d2e:	b083      	sub	sp, #12
   12d30:	af00      	add	r7, sp, #0
   12d32:	6078      	str	r0, [r7, #4]
  basCb.txReady = TRUE;
   12d34:	4b04      	ldr	r3, [pc, #16]	; (12d48 <basConnOpen+0x1c>)
   12d36:	2201      	movs	r2, #1
   12d38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   12d3c:	bf00      	nop
   12d3e:	370c      	adds	r7, #12
   12d40:	46bd      	mov	sp, r7
   12d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   12d46:	4770      	bx	lr
   12d48:	1000418c 	.word	0x1000418c

00012d4c <basHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basHandleValueCnf(attEvt_t *pMsg)
{
   12d4c:	b580      	push	{r7, lr}
   12d4e:	b084      	sub	sp, #16
   12d50:	af00      	add	r7, sp, #0
   12d52:	6078      	str	r0, [r7, #4]
  basConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == BATT_LVL_HDL)
   12d54:	687b      	ldr	r3, [r7, #4]
   12d56:	78db      	ldrb	r3, [r3, #3]
   12d58:	2b00      	cmp	r3, #0
   12d5a:	d114      	bne.n	12d86 <basHandleValueCnf+0x3a>
   12d5c:	687b      	ldr	r3, [r7, #4]
   12d5e:	895b      	ldrh	r3, [r3, #10]
   12d60:	2b62      	cmp	r3, #98	; 0x62
   12d62:	d110      	bne.n	12d86 <basHandleValueCnf+0x3a>
  {
    basCb.txReady = TRUE;
   12d64:	4b0a      	ldr	r3, [pc, #40]	; (12d90 <basHandleValueCnf+0x44>)
   12d66:	2201      	movs	r2, #1
   12d68:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = basFindNextToSend(basCb.measTimer.msg.status)) != NULL)
   12d6c:	4b08      	ldr	r3, [pc, #32]	; (12d90 <basHandleValueCnf+0x44>)
   12d6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   12d72:	4618      	mov	r0, r3
   12d74:	f7ff ff82 	bl	12c7c <basFindNextToSend>
   12d78:	60f8      	str	r0, [r7, #12]
   12d7a:	68fb      	ldr	r3, [r7, #12]
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	d002      	beq.n	12d86 <basHandleValueCnf+0x3a>
    {
      basSendPeriodicBattlevel(pConn);
   12d80:	68f8      	ldr	r0, [r7, #12]
   12d82:	f7ff ffb1 	bl	12ce8 <basSendPeriodicBattlevel>
    }
  }
}
   12d86:	bf00      	nop
   12d88:	3710      	adds	r7, #16
   12d8a:	46bd      	mov	sp, r7
   12d8c:	bd80      	pop	{r7, pc}
   12d8e:	bf00      	nop
   12d90:	1000418c 	.word	0x1000418c

00012d94 <basMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void basMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   12d94:	b580      	push	{r7, lr}
   12d96:	b084      	sub	sp, #16
   12d98:	af00      	add	r7, sp, #0
   12d9a:	6078      	str	r0, [r7, #4]
  basConn_t  *pConn;

  /* if there are active connections */
  if (basNoConnActive() == FALSE)
   12d9c:	f7ff ff2e 	bl	12bfc <basNoConnActive>
   12da0:	4603      	mov	r3, r0
   12da2:	2b00      	cmp	r3, #0
   12da4:	d129      	bne.n	12dfa <basMeasTimerExp+0x66>
  {
    if (--basCb.currCount == 0)
   12da6:	4b17      	ldr	r3, [pc, #92]	; (12e04 <basMeasTimerExp+0x70>)
   12da8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   12daa:	3b01      	subs	r3, #1
   12dac:	b29a      	uxth	r2, r3
   12dae:	4b15      	ldr	r3, [pc, #84]	; (12e04 <basMeasTimerExp+0x70>)
   12db0:	861a      	strh	r2, [r3, #48]	; 0x30
   12db2:	4b14      	ldr	r3, [pc, #80]	; (12e04 <basMeasTimerExp+0x70>)
   12db4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   12db6:	2b00      	cmp	r3, #0
   12db8:	d119      	bne.n	12dee <basMeasTimerExp+0x5a>
    {
      /* reset count */
      basCb.currCount = basCb.cfg.count;
   12dba:	4b12      	ldr	r3, [pc, #72]	; (12e04 <basMeasTimerExp+0x70>)
   12dbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   12dbe:	4b11      	ldr	r3, [pc, #68]	; (12e04 <basMeasTimerExp+0x70>)
   12dc0:	861a      	strh	r2, [r3, #48]	; 0x30
      
      /* set up battery measurement to be sent on all connections */
      basSetupToSend();
   12dc2:	f7ff ff3b 	bl	12c3c <basSetupToSend>

      /* read battery measurement sensor data */
      AppHwBattRead(&basCb.measBattLevel);
   12dc6:	4810      	ldr	r0, [pc, #64]	; (12e08 <basMeasTimerExp+0x74>)
   12dc8:	f006 feee 	bl	19ba8 <AppHwBattRead>
    
      /* if ready to send measurements */
      if (basCb.txReady)
   12dcc:	4b0d      	ldr	r3, [pc, #52]	; (12e04 <basMeasTimerExp+0x70>)
   12dce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   12dd2:	2b00      	cmp	r3, #0
   12dd4:	d00b      	beq.n	12dee <basMeasTimerExp+0x5a>
      {
        /* find next connection to send (note ccc idx is stored in timer status) */
        if ((pConn = basFindNextToSend(pMsg->status)) != NULL)
   12dd6:	687b      	ldr	r3, [r7, #4]
   12dd8:	78db      	ldrb	r3, [r3, #3]
   12dda:	4618      	mov	r0, r3
   12ddc:	f7ff ff4e 	bl	12c7c <basFindNextToSend>
   12de0:	60f8      	str	r0, [r7, #12]
   12de2:	68fb      	ldr	r3, [r7, #12]
   12de4:	2b00      	cmp	r3, #0
   12de6:	d002      	beq.n	12dee <basMeasTimerExp+0x5a>
        {
          basSendPeriodicBattlevel(pConn);
   12de8:	68f8      	ldr	r0, [r7, #12]
   12dea:	f7ff ff7d 	bl	12ce8 <basSendPeriodicBattlevel>
        }
      }
    }
        
    /* restart timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);    
   12dee:	4b05      	ldr	r3, [pc, #20]	; (12e04 <basMeasTimerExp+0x70>)
   12df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12df2:	4619      	mov	r1, r3
   12df4:	4805      	ldr	r0, [pc, #20]	; (12e0c <basMeasTimerExp+0x78>)
   12df6:	f007 fd2d 	bl	1a854 <WsfTimerStartSec>
  }
}
   12dfa:	bf00      	nop
   12dfc:	3710      	adds	r7, #16
   12dfe:	46bd      	mov	sp, r7
   12e00:	bd80      	pop	{r7, pc}
   12e02:	bf00      	nop
   12e04:	1000418c 	.word	0x1000418c
   12e08:	100041bf 	.word	0x100041bf
   12e0c:	100041a4 	.word	0x100041a4

00012e10 <BasInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasInit(wsfHandlerId_t handlerId, basCfg_t *pCfg)
{
   12e10:	b480      	push	{r7}
   12e12:	b083      	sub	sp, #12
   12e14:	af00      	add	r7, sp, #0
   12e16:	4603      	mov	r3, r0
   12e18:	6039      	str	r1, [r7, #0]
   12e1a:	71fb      	strb	r3, [r7, #7]
  basCb.measTimer.handlerId = handlerId;
   12e1c:	4a08      	ldr	r2, [pc, #32]	; (12e40 <BasInit+0x30>)
   12e1e:	79fb      	ldrb	r3, [r7, #7]
   12e20:	f882 3020 	strb.w	r3, [r2, #32]
  basCb.cfg = *pCfg;
   12e24:	4b06      	ldr	r3, [pc, #24]	; (12e40 <BasInit+0x30>)
   12e26:	683a      	ldr	r2, [r7, #0]
   12e28:	3328      	adds	r3, #40	; 0x28
   12e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
   12e2e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   12e32:	bf00      	nop
   12e34:	370c      	adds	r7, #12
   12e36:	46bd      	mov	sp, r7
   12e38:	f85d 7b04 	ldr.w	r7, [sp], #4
   12e3c:	4770      	bx	lr
   12e3e:	bf00      	nop
   12e40:	1000418c 	.word	0x1000418c

00012e44 <BasMeasBattStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStart(dmConnId_t connId, uint8_t timerEvt, uint8_t battCccIdx)
{
   12e44:	b580      	push	{r7, lr}
   12e46:	b082      	sub	sp, #8
   12e48:	af00      	add	r7, sp, #0
   12e4a:	4603      	mov	r3, r0
   12e4c:	71fb      	strb	r3, [r7, #7]
   12e4e:	460b      	mov	r3, r1
   12e50:	71bb      	strb	r3, [r7, #6]
   12e52:	4613      	mov	r3, r2
   12e54:	717b      	strb	r3, [r7, #5]
  /* if this is first connection */
  if (basNoConnActive())
   12e56:	f7ff fed1 	bl	12bfc <basNoConnActive>
   12e5a:	4603      	mov	r3, r0
   12e5c:	2b00      	cmp	r3, #0
   12e5e:	d015      	beq.n	12e8c <BasMeasBattStart+0x48>
  {   
    /* initialize control block */
    basCb.measTimer.msg.event = timerEvt;
   12e60:	4a16      	ldr	r2, [pc, #88]	; (12ebc <BasMeasBattStart+0x78>)
   12e62:	79bb      	ldrb	r3, [r7, #6]
   12e64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    basCb.measTimer.msg.status = battCccIdx;  
   12e68:	4a14      	ldr	r2, [pc, #80]	; (12ebc <BasMeasBattStart+0x78>)
   12e6a:	797b      	ldrb	r3, [r7, #5]
   12e6c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    basCb.measBattLevel = BAS_BATT_LEVEL_INIT;
   12e70:	4b12      	ldr	r3, [pc, #72]	; (12ebc <BasMeasBattStart+0x78>)
   12e72:	22ff      	movs	r2, #255	; 0xff
   12e74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    basCb.currCount = basCb.cfg.count;
   12e78:	4b10      	ldr	r3, [pc, #64]	; (12ebc <BasMeasBattStart+0x78>)
   12e7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   12e7c:	4b0f      	ldr	r3, [pc, #60]	; (12ebc <BasMeasBattStart+0x78>)
   12e7e:	861a      	strh	r2, [r3, #48]	; 0x30
    
    /* start timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);
   12e80:	4b0e      	ldr	r3, [pc, #56]	; (12ebc <BasMeasBattStart+0x78>)
   12e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12e84:	4619      	mov	r1, r3
   12e86:	480e      	ldr	r0, [pc, #56]	; (12ec0 <BasMeasBattStart+0x7c>)
   12e88:	f007 fce4 	bl	1a854 <WsfTimerStartSec>
  }
  
  /* set conn id and last sent battery level */
  basCb.conn[connId - 1].connId = connId;  
   12e8c:	79fb      	ldrb	r3, [r7, #7]
   12e8e:	1e5a      	subs	r2, r3, #1
   12e90:	490a      	ldr	r1, [pc, #40]	; (12ebc <BasMeasBattStart+0x78>)
   12e92:	4613      	mov	r3, r2
   12e94:	005b      	lsls	r3, r3, #1
   12e96:	4413      	add	r3, r2
   12e98:	440b      	add	r3, r1
   12e9a:	79fa      	ldrb	r2, [r7, #7]
   12e9c:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].sentBattLevel = BAS_BATT_LEVEL_INIT;
   12e9e:	79fb      	ldrb	r3, [r7, #7]
   12ea0:	1e5a      	subs	r2, r3, #1
   12ea2:	4906      	ldr	r1, [pc, #24]	; (12ebc <BasMeasBattStart+0x78>)
   12ea4:	4613      	mov	r3, r2
   12ea6:	005b      	lsls	r3, r3, #1
   12ea8:	4413      	add	r3, r2
   12eaa:	440b      	add	r3, r1
   12eac:	3302      	adds	r3, #2
   12eae:	22ff      	movs	r2, #255	; 0xff
   12eb0:	701a      	strb	r2, [r3, #0]
}
   12eb2:	bf00      	nop
   12eb4:	3708      	adds	r7, #8
   12eb6:	46bd      	mov	sp, r7
   12eb8:	bd80      	pop	{r7, pc}
   12eba:	bf00      	nop
   12ebc:	1000418c 	.word	0x1000418c
   12ec0:	100041a4 	.word	0x100041a4

00012ec4 <BasMeasBattStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStop(dmConnId_t connId)
{
   12ec4:	b580      	push	{r7, lr}
   12ec6:	b082      	sub	sp, #8
   12ec8:	af00      	add	r7, sp, #0
   12eca:	4603      	mov	r3, r0
   12ecc:	71fb      	strb	r3, [r7, #7]
  /* clear connection */
  basCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   12ece:	79fb      	ldrb	r3, [r7, #7]
   12ed0:	1e5a      	subs	r2, r3, #1
   12ed2:	490e      	ldr	r1, [pc, #56]	; (12f0c <BasMeasBattStop+0x48>)
   12ed4:	4613      	mov	r3, r2
   12ed6:	005b      	lsls	r3, r3, #1
   12ed8:	4413      	add	r3, r2
   12eda:	440b      	add	r3, r1
   12edc:	2200      	movs	r2, #0
   12ede:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].battToSend = FALSE;
   12ee0:	79fb      	ldrb	r3, [r7, #7]
   12ee2:	1e5a      	subs	r2, r3, #1
   12ee4:	4909      	ldr	r1, [pc, #36]	; (12f0c <BasMeasBattStop+0x48>)
   12ee6:	4613      	mov	r3, r2
   12ee8:	005b      	lsls	r3, r3, #1
   12eea:	4413      	add	r3, r2
   12eec:	440b      	add	r3, r1
   12eee:	3301      	adds	r3, #1
   12ef0:	2200      	movs	r2, #0
   12ef2:	701a      	strb	r2, [r3, #0]
  
  /* if no remaining connections */
  if (basNoConnActive())
   12ef4:	f7ff fe82 	bl	12bfc <basNoConnActive>
   12ef8:	4603      	mov	r3, r0
   12efa:	2b00      	cmp	r3, #0
   12efc:	d002      	beq.n	12f04 <BasMeasBattStop+0x40>
  {
    /* stop timer */
    WsfTimerStop(&basCb.measTimer);
   12efe:	4804      	ldr	r0, [pc, #16]	; (12f10 <BasMeasBattStop+0x4c>)
   12f00:	f007 fcce 	bl	1a8a0 <WsfTimerStop>
  }
}
   12f04:	bf00      	nop
   12f06:	3708      	adds	r7, #8
   12f08:	46bd      	mov	sp, r7
   12f0a:	bd80      	pop	{r7, pc}
   12f0c:	1000418c 	.word	0x1000418c
   12f10:	100041a4 	.word	0x100041a4

00012f14 <BasProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasProcMsg(wsfMsgHdr_t *pMsg)
{
   12f14:	b580      	push	{r7, lr}
   12f16:	b082      	sub	sp, #8
   12f18:	af00      	add	r7, sp, #0
   12f1a:	6078      	str	r0, [r7, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   12f1c:	687b      	ldr	r3, [r7, #4]
   12f1e:	789b      	ldrb	r3, [r3, #2]
   12f20:	2b27      	cmp	r3, #39	; 0x27
   12f22:	d103      	bne.n	12f2c <BasProcMsg+0x18>
  {
    basConnOpen((dmEvt_t *) pMsg);
   12f24:	6878      	ldr	r0, [r7, #4]
   12f26:	f7ff ff01 	bl	12d2c <basConnOpen>
  }
  else if (pMsg->event == basCb.measTimer.msg.event)
  {
    basMeasTimerExp(pMsg);
  }
}
   12f2a:	e011      	b.n	12f50 <BasProcMsg+0x3c>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   12f2c:	687b      	ldr	r3, [r7, #4]
   12f2e:	789b      	ldrb	r3, [r3, #2]
   12f30:	2b0f      	cmp	r3, #15
   12f32:	d103      	bne.n	12f3c <BasProcMsg+0x28>
    basHandleValueCnf((attEvt_t *) pMsg);
   12f34:	6878      	ldr	r0, [r7, #4]
   12f36:	f7ff ff09 	bl	12d4c <basHandleValueCnf>
}
   12f3a:	e009      	b.n	12f50 <BasProcMsg+0x3c>
  else if (pMsg->event == basCb.measTimer.msg.event)
   12f3c:	687b      	ldr	r3, [r7, #4]
   12f3e:	789a      	ldrb	r2, [r3, #2]
   12f40:	4b05      	ldr	r3, [pc, #20]	; (12f58 <BasProcMsg+0x44>)
   12f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   12f46:	429a      	cmp	r2, r3
   12f48:	d102      	bne.n	12f50 <BasProcMsg+0x3c>
    basMeasTimerExp(pMsg);
   12f4a:	6878      	ldr	r0, [r7, #4]
   12f4c:	f7ff ff22 	bl	12d94 <basMeasTimerExp>
}
   12f50:	bf00      	nop
   12f52:	3708      	adds	r7, #8
   12f54:	46bd      	mov	sp, r7
   12f56:	bd80      	pop	{r7, pc}
   12f58:	1000418c 	.word	0x1000418c

00012f5c <BasSendBattLevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasSendBattLevel(dmConnId_t connId, uint8_t idx, uint8_t level)
{
   12f5c:	b580      	push	{r7, lr}
   12f5e:	b082      	sub	sp, #8
   12f60:	af00      	add	r7, sp, #0
   12f62:	4603      	mov	r3, r0
   12f64:	71fb      	strb	r3, [r7, #7]
   12f66:	460b      	mov	r3, r1
   12f68:	71bb      	strb	r3, [r7, #6]
   12f6a:	4613      	mov	r3, r2
   12f6c:	717b      	strb	r3, [r7, #5]
  if (AttsCccEnabled(connId, idx))
   12f6e:	79ba      	ldrb	r2, [r7, #6]
   12f70:	79fb      	ldrb	r3, [r7, #7]
   12f72:	4611      	mov	r1, r2
   12f74:	4618      	mov	r0, r3
   12f76:	f7fa fa35 	bl	d3e4 <AttsCccEnabled>
   12f7a:	4603      	mov	r3, r0
   12f7c:	2b00      	cmp	r3, #0
   12f7e:	d005      	beq.n	12f8c <BasSendBattLevel+0x30>
  {
    AttsHandleValueNtf(connId, BATT_LVL_HDL, CH_BATT_LEVEL_LEN, &level);
   12f80:	1d7b      	adds	r3, r7, #5
   12f82:	79f8      	ldrb	r0, [r7, #7]
   12f84:	2201      	movs	r2, #1
   12f86:	2162      	movs	r1, #98	; 0x62
   12f88:	f7fa fbb6 	bl	d6f8 <AttsHandleValueNtf>
  }
}
   12f8c:	bf00      	nop
   12f8e:	3708      	adds	r7, #8
   12f90:	46bd      	mov	sp, r7
   12f92:	bd80      	pop	{r7, pc}

00012f94 <BasReadCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t BasReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                     uint16_t offset, attsAttr_t *pAttr)
{
   12f94:	b590      	push	{r4, r7, lr}
   12f96:	b083      	sub	sp, #12
   12f98:	af00      	add	r7, sp, #0
   12f9a:	4604      	mov	r4, r0
   12f9c:	4608      	mov	r0, r1
   12f9e:	4611      	mov	r1, r2
   12fa0:	461a      	mov	r2, r3
   12fa2:	4623      	mov	r3, r4
   12fa4:	71fb      	strb	r3, [r7, #7]
   12fa6:	4603      	mov	r3, r0
   12fa8:	80bb      	strh	r3, [r7, #4]
   12faa:	460b      	mov	r3, r1
   12fac:	71bb      	strb	r3, [r7, #6]
   12fae:	4613      	mov	r3, r2
   12fb0:	807b      	strh	r3, [r7, #2]
  /* read the battery level and set attribute value */
  AppHwBattRead(pAttr->pValue);
   12fb2:	69bb      	ldr	r3, [r7, #24]
   12fb4:	685b      	ldr	r3, [r3, #4]
   12fb6:	4618      	mov	r0, r3
   12fb8:	f006 fdf6 	bl	19ba8 <AppHwBattRead>
  
  return ATT_SUCCESS;
   12fbc:	2300      	movs	r3, #0
}
   12fbe:	4618      	mov	r0, r3
   12fc0:	370c      	adds	r7, #12
   12fc2:	46bd      	mov	sp, r7
   12fc4:	bd90      	pop	{r4, r7, pc}
	...

00012fc8 <hrpsNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t hrpsNoConnActive(void)
{
   12fc8:	b480      	push	{r7}
   12fca:	b083      	sub	sp, #12
   12fcc:	af00      	add	r7, sp, #0
  hrpsConn_t    *pConn = hrpsCb.conn;
   12fce:	4b0d      	ldr	r3, [pc, #52]	; (13004 <hrpsNoConnActive+0x3c>)
   12fd0:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12fd2:	2300      	movs	r3, #0
   12fd4:	70fb      	strb	r3, [r7, #3]
   12fd6:	e00b      	b.n	12ff0 <hrpsNoConnActive+0x28>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   12fd8:	687b      	ldr	r3, [r7, #4]
   12fda:	781b      	ldrb	r3, [r3, #0]
   12fdc:	2b00      	cmp	r3, #0
   12fde:	d001      	beq.n	12fe4 <hrpsNoConnActive+0x1c>
    {      
      return FALSE;
   12fe0:	2300      	movs	r3, #0
   12fe2:	e009      	b.n	12ff8 <hrpsNoConnActive+0x30>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   12fe4:	78fb      	ldrb	r3, [r7, #3]
   12fe6:	3301      	adds	r3, #1
   12fe8:	70fb      	strb	r3, [r7, #3]
   12fea:	687b      	ldr	r3, [r7, #4]
   12fec:	3302      	adds	r3, #2
   12fee:	607b      	str	r3, [r7, #4]
   12ff0:	78fb      	ldrb	r3, [r7, #3]
   12ff2:	2b07      	cmp	r3, #7
   12ff4:	d9f0      	bls.n	12fd8 <hrpsNoConnActive+0x10>
    }
  }
  return TRUE;
   12ff6:	2301      	movs	r3, #1
}
   12ff8:	4618      	mov	r0, r3
   12ffa:	370c      	adds	r7, #12
   12ffc:	46bd      	mov	sp, r7
   12ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
   13002:	4770      	bx	lr
   13004:	100041c0 	.word	0x100041c0

00013008 <hrpsSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSetupToSend(void)
{
   13008:	b480      	push	{r7}
   1300a:	b083      	sub	sp, #12
   1300c:	af00      	add	r7, sp, #0
  hrpsConn_t    *pConn = hrpsCb.conn;
   1300e:	4b0d      	ldr	r3, [pc, #52]	; (13044 <hrpsSetupToSend+0x3c>)
   13010:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   13012:	2300      	movs	r3, #0
   13014:	70fb      	strb	r3, [r7, #3]
   13016:	e00c      	b.n	13032 <hrpsSetupToSend+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   13018:	687b      	ldr	r3, [r7, #4]
   1301a:	781b      	ldrb	r3, [r3, #0]
   1301c:	2b00      	cmp	r3, #0
   1301e:	d002      	beq.n	13026 <hrpsSetupToSend+0x1e>
    {      
      pConn->hrmToSend = TRUE;
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	2201      	movs	r2, #1
   13024:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   13026:	78fb      	ldrb	r3, [r7, #3]
   13028:	3301      	adds	r3, #1
   1302a:	70fb      	strb	r3, [r7, #3]
   1302c:	687b      	ldr	r3, [r7, #4]
   1302e:	3302      	adds	r3, #2
   13030:	607b      	str	r3, [r7, #4]
   13032:	78fb      	ldrb	r3, [r7, #3]
   13034:	2b07      	cmp	r3, #7
   13036:	d9ef      	bls.n	13018 <hrpsSetupToSend+0x10>
    }
  }
}
   13038:	bf00      	nop
   1303a:	370c      	adds	r7, #12
   1303c:	46bd      	mov	sp, r7
   1303e:	f85d 7b04 	ldr.w	r7, [sp], #4
   13042:	4770      	bx	lr
   13044:	100041c0 	.word	0x100041c0

00013048 <hrpsFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static hrpsConn_t *hrpsFindNextToSend(uint8_t cccIdx)
{
   13048:	b580      	push	{r7, lr}
   1304a:	b084      	sub	sp, #16
   1304c:	af00      	add	r7, sp, #0
   1304e:	4603      	mov	r3, r0
   13050:	71fb      	strb	r3, [r7, #7]
  hrpsConn_t    *pConn = hrpsCb.conn;
   13052:	4b13      	ldr	r3, [pc, #76]	; (130a0 <hrpsFindNextToSend+0x58>)
   13054:	60fb      	str	r3, [r7, #12]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   13056:	2300      	movs	r3, #0
   13058:	72fb      	strb	r3, [r7, #11]
   1305a:	e019      	b.n	13090 <hrpsFindNextToSend+0x48>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->hrmToSend)
   1305c:	68fb      	ldr	r3, [r7, #12]
   1305e:	781b      	ldrb	r3, [r3, #0]
   13060:	2b00      	cmp	r3, #0
   13062:	d00f      	beq.n	13084 <hrpsFindNextToSend+0x3c>
   13064:	68fb      	ldr	r3, [r7, #12]
   13066:	785b      	ldrb	r3, [r3, #1]
   13068:	2b00      	cmp	r3, #0
   1306a:	d00b      	beq.n	13084 <hrpsFindNextToSend+0x3c>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   1306c:	68fb      	ldr	r3, [r7, #12]
   1306e:	781b      	ldrb	r3, [r3, #0]
   13070:	79fa      	ldrb	r2, [r7, #7]
   13072:	4611      	mov	r1, r2
   13074:	4618      	mov	r0, r3
   13076:	f7fa f9b5 	bl	d3e4 <AttsCccEnabled>
   1307a:	4603      	mov	r3, r0
   1307c:	2b00      	cmp	r3, #0
   1307e:	d001      	beq.n	13084 <hrpsFindNextToSend+0x3c>
      {
        return pConn;
   13080:	68fb      	ldr	r3, [r7, #12]
   13082:	e009      	b.n	13098 <hrpsFindNextToSend+0x50>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   13084:	7afb      	ldrb	r3, [r7, #11]
   13086:	3301      	adds	r3, #1
   13088:	72fb      	strb	r3, [r7, #11]
   1308a:	68fb      	ldr	r3, [r7, #12]
   1308c:	3302      	adds	r3, #2
   1308e:	60fb      	str	r3, [r7, #12]
   13090:	7afb      	ldrb	r3, [r7, #11]
   13092:	2b07      	cmp	r3, #7
   13094:	d9e2      	bls.n	1305c <hrpsFindNextToSend+0x14>
      }
    }
  }
  return NULL;
   13096:	2300      	movs	r3, #0
}
   13098:	4618      	mov	r0, r3
   1309a:	3710      	adds	r7, #16
   1309c:	46bd      	mov	sp, r7
   1309e:	bd80      	pop	{r7, pc}
   130a0:	100041c0 	.word	0x100041c0

000130a4 <hrpsBuildHrm>:
 *
 *  \return Length of pBuf in bytes.
 */
/*************************************************************************************************/
static uint8_t hrpsBuildHrm(uint8_t *pBuf, appHrm_t *pHrm)
{
   130a4:	b480      	push	{r7}
   130a6:	b087      	sub	sp, #28
   130a8:	af00      	add	r7, sp, #0
   130aa:	6078      	str	r0, [r7, #4]
   130ac:	6039      	str	r1, [r7, #0]
  uint8_t   *p = pBuf;
   130ae:	687b      	ldr	r3, [r7, #4]
   130b0:	617b      	str	r3, [r7, #20]
  uint8_t   flags = pHrm->flags;
   130b2:	683b      	ldr	r3, [r7, #0]
   130b4:	7a5b      	ldrb	r3, [r3, #9]
   130b6:	72fb      	strb	r3, [r7, #11]
  uint8_t   i;
  uint16_t  *pInterval;
  
  /* flags */
  UINT8_TO_BSTREAM(p, flags);
   130b8:	697b      	ldr	r3, [r7, #20]
   130ba:	1c5a      	adds	r2, r3, #1
   130bc:	617a      	str	r2, [r7, #20]
   130be:	7afa      	ldrb	r2, [r7, #11]
   130c0:	701a      	strb	r2, [r3, #0]
  
  /* heart rate measurement */
  if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   130c2:	7afb      	ldrb	r3, [r7, #11]
   130c4:	f003 0301 	and.w	r3, r3, #1
   130c8:	2b00      	cmp	r3, #0
   130ca:	d00e      	beq.n	130ea <hrpsBuildHrm+0x46>
  {
    UINT16_TO_BSTREAM(p, (uint16_t) pHrm->heartRate);
   130cc:	697b      	ldr	r3, [r7, #20]
   130ce:	1c5a      	adds	r2, r3, #1
   130d0:	617a      	str	r2, [r7, #20]
   130d2:	683a      	ldr	r2, [r7, #0]
   130d4:	7a12      	ldrb	r2, [r2, #8]
   130d6:	701a      	strb	r2, [r3, #0]
   130d8:	697b      	ldr	r3, [r7, #20]
   130da:	1c5a      	adds	r2, r3, #1
   130dc:	617a      	str	r2, [r7, #20]
   130de:	683a      	ldr	r2, [r7, #0]
   130e0:	7a12      	ldrb	r2, [r2, #8]
   130e2:	1212      	asrs	r2, r2, #8
   130e4:	b2d2      	uxtb	r2, r2
   130e6:	701a      	strb	r2, [r3, #0]
   130e8:	e005      	b.n	130f6 <hrpsBuildHrm+0x52>
  }
  else
  {
    UINT8_TO_BSTREAM(p, pHrm->heartRate);
   130ea:	697b      	ldr	r3, [r7, #20]
   130ec:	1c5a      	adds	r2, r3, #1
   130ee:	617a      	str	r2, [r7, #20]
   130f0:	683a      	ldr	r2, [r7, #0]
   130f2:	7a12      	ldrb	r2, [r2, #8]
   130f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* energy expended */
  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   130f6:	7afb      	ldrb	r3, [r7, #11]
   130f8:	f003 0308 	and.w	r3, r3, #8
   130fc:	2b00      	cmp	r3, #0
   130fe:	d00f      	beq.n	13120 <hrpsBuildHrm+0x7c>
  {
    UINT16_TO_BSTREAM(p, pHrm->energyExp);
   13100:	697b      	ldr	r3, [r7, #20]
   13102:	1c5a      	adds	r2, r3, #1
   13104:	617a      	str	r2, [r7, #20]
   13106:	683a      	ldr	r2, [r7, #0]
   13108:	88d2      	ldrh	r2, [r2, #6]
   1310a:	b2d2      	uxtb	r2, r2
   1310c:	701a      	strb	r2, [r3, #0]
   1310e:	697b      	ldr	r3, [r7, #20]
   13110:	1c5a      	adds	r2, r3, #1
   13112:	617a      	str	r2, [r7, #20]
   13114:	683a      	ldr	r2, [r7, #0]
   13116:	88d2      	ldrh	r2, [r2, #6]
   13118:	0a12      	lsrs	r2, r2, #8
   1311a:	b292      	uxth	r2, r2
   1311c:	b2d2      	uxtb	r2, r2
   1311e:	701a      	strb	r2, [r3, #0]
  }
  
  /* rr interval */
  if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   13120:	7afb      	ldrb	r3, [r7, #11]
   13122:	f003 0310 	and.w	r3, r3, #16
   13126:	2b00      	cmp	r3, #0
   13128:	d01f      	beq.n	1316a <hrpsBuildHrm+0xc6>
  {
    pInterval = pHrm->pRrInterval;
   1312a:	683b      	ldr	r3, [r7, #0]
   1312c:	681b      	ldr	r3, [r3, #0]
   1312e:	60fb      	str	r3, [r7, #12]
    for (i = pHrm->numIntervals; i > 0; i--, pInterval++)
   13130:	683b      	ldr	r3, [r7, #0]
   13132:	791b      	ldrb	r3, [r3, #4]
   13134:	74fb      	strb	r3, [r7, #19]
   13136:	e015      	b.n	13164 <hrpsBuildHrm+0xc0>
    {
      UINT16_TO_BSTREAM(p, *pInterval);
   13138:	697b      	ldr	r3, [r7, #20]
   1313a:	1c5a      	adds	r2, r3, #1
   1313c:	617a      	str	r2, [r7, #20]
   1313e:	68fa      	ldr	r2, [r7, #12]
   13140:	8812      	ldrh	r2, [r2, #0]
   13142:	b2d2      	uxtb	r2, r2
   13144:	701a      	strb	r2, [r3, #0]
   13146:	697b      	ldr	r3, [r7, #20]
   13148:	1c5a      	adds	r2, r3, #1
   1314a:	617a      	str	r2, [r7, #20]
   1314c:	68fa      	ldr	r2, [r7, #12]
   1314e:	8812      	ldrh	r2, [r2, #0]
   13150:	0a12      	lsrs	r2, r2, #8
   13152:	b292      	uxth	r2, r2
   13154:	b2d2      	uxtb	r2, r2
   13156:	701a      	strb	r2, [r3, #0]
    for (i = pHrm->numIntervals; i > 0; i--, pInterval++)
   13158:	7cfb      	ldrb	r3, [r7, #19]
   1315a:	3b01      	subs	r3, #1
   1315c:	74fb      	strb	r3, [r7, #19]
   1315e:	68fb      	ldr	r3, [r7, #12]
   13160:	3302      	adds	r3, #2
   13162:	60fb      	str	r3, [r7, #12]
   13164:	7cfb      	ldrb	r3, [r7, #19]
   13166:	2b00      	cmp	r3, #0
   13168:	d1e6      	bne.n	13138 <hrpsBuildHrm+0x94>
    }
  }

  /* return length */
  return (uint8_t) (p - pBuf);
   1316a:	697a      	ldr	r2, [r7, #20]
   1316c:	687b      	ldr	r3, [r7, #4]
   1316e:	1ad3      	subs	r3, r2, r3
   13170:	b2db      	uxtb	r3, r3
}
   13172:	4618      	mov	r0, r3
   13174:	371c      	adds	r7, #28
   13176:	46bd      	mov	sp, r7
   13178:	f85d 7b04 	ldr.w	r7, [sp], #4
   1317c:	4770      	bx	lr
	...

00013180 <hrpsSendHrmNtf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSendHrmNtf(dmConnId_t connId)
{
   13180:	b580      	push	{r7, lr}
   13182:	b088      	sub	sp, #32
   13184:	af00      	add	r7, sp, #0
   13186:	4603      	mov	r3, r0
   13188:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN];
  uint8_t len;
  
  /* build heart rate measurement characteristic */
  len = hrpsBuildHrm(buf, &hrpsCb.hrm);
   1318a:	f107 0308 	add.w	r3, r7, #8
   1318e:	4909      	ldr	r1, [pc, #36]	; (131b4 <hrpsSendHrmNtf+0x34>)
   13190:	4618      	mov	r0, r3
   13192:	f7ff ff87 	bl	130a4 <hrpsBuildHrm>
   13196:	4603      	mov	r3, r0
   13198:	77fb      	strb	r3, [r7, #31]

  /* send notification */
  AttsHandleValueNtf(connId, HRS_HRM_HDL, len, buf);
   1319a:	7ffb      	ldrb	r3, [r7, #31]
   1319c:	b29a      	uxth	r2, r3
   1319e:	f107 0308 	add.w	r3, r7, #8
   131a2:	79f8      	ldrb	r0, [r7, #7]
   131a4:	2122      	movs	r1, #34	; 0x22
   131a6:	f7fa faa7 	bl	d6f8 <AttsHandleValueNtf>
}
   131aa:	bf00      	nop
   131ac:	3720      	adds	r7, #32
   131ae:	46bd      	mov	sp, r7
   131b0:	bd80      	pop	{r7, pc}
   131b2:	bf00      	nop
   131b4:	100041e0 	.word	0x100041e0

000131b8 <hrpsConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsConnOpen(dmEvt_t *pMsg)
{
   131b8:	b480      	push	{r7}
   131ba:	b083      	sub	sp, #12
   131bc:	af00      	add	r7, sp, #0
   131be:	6078      	str	r0, [r7, #4]
  hrpsCb.txReady = TRUE;
   131c0:	4b04      	ldr	r3, [pc, #16]	; (131d4 <hrpsConnOpen+0x1c>)
   131c2:	2201      	movs	r2, #1
   131c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   131c8:	bf00      	nop
   131ca:	370c      	adds	r7, #12
   131cc:	46bd      	mov	sp, r7
   131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   131d2:	4770      	bx	lr
   131d4:	100041c0 	.word	0x100041c0

000131d8 <hrpsHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsHandleValueCnf(attEvt_t *pMsg)
{
   131d8:	b580      	push	{r7, lr}
   131da:	b084      	sub	sp, #16
   131dc:	af00      	add	r7, sp, #0
   131de:	6078      	str	r0, [r7, #4]
  hrpsConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == HRS_HRM_HDL)
   131e0:	687b      	ldr	r3, [r7, #4]
   131e2:	78db      	ldrb	r3, [r3, #3]
   131e4:	2b00      	cmp	r3, #0
   131e6:	d11c      	bne.n	13222 <hrpsHandleValueCnf+0x4a>
   131e8:	687b      	ldr	r3, [r7, #4]
   131ea:	895b      	ldrh	r3, [r3, #10]
   131ec:	2b22      	cmp	r3, #34	; 0x22
   131ee:	d118      	bne.n	13222 <hrpsHandleValueCnf+0x4a>
  {
    hrpsCb.txReady = TRUE;
   131f0:	4b0e      	ldr	r3, [pc, #56]	; (1322c <hrpsHandleValueCnf+0x54>)
   131f2:	2201      	movs	r2, #1
   131f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = hrpsFindNextToSend(hrpsCb.measTimer.msg.status)) != NULL)
   131f8:	4b0c      	ldr	r3, [pc, #48]	; (1322c <hrpsHandleValueCnf+0x54>)
   131fa:	7f5b      	ldrb	r3, [r3, #29]
   131fc:	4618      	mov	r0, r3
   131fe:	f7ff ff23 	bl	13048 <hrpsFindNextToSend>
   13202:	60f8      	str	r0, [r7, #12]
   13204:	68fb      	ldr	r3, [r7, #12]
   13206:	2b00      	cmp	r3, #0
   13208:	d00b      	beq.n	13222 <hrpsHandleValueCnf+0x4a>
    {
      hrpsSendHrmNtf(pConn->connId);
   1320a:	68fb      	ldr	r3, [r7, #12]
   1320c:	781b      	ldrb	r3, [r3, #0]
   1320e:	4618      	mov	r0, r3
   13210:	f7ff ffb6 	bl	13180 <hrpsSendHrmNtf>
      hrpsCb.txReady = FALSE;
   13214:	4b05      	ldr	r3, [pc, #20]	; (1322c <hrpsHandleValueCnf+0x54>)
   13216:	2200      	movs	r2, #0
   13218:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
      pConn->hrmToSend = FALSE;
   1321c:	68fb      	ldr	r3, [r7, #12]
   1321e:	2200      	movs	r2, #0
   13220:	705a      	strb	r2, [r3, #1]
    }
  }
}
   13222:	bf00      	nop
   13224:	3710      	adds	r7, #16
   13226:	46bd      	mov	sp, r7
   13228:	bd80      	pop	{r7, pc}
   1322a:	bf00      	nop
   1322c:	100041c0 	.word	0x100041c0

00013230 <hrpsMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hrpsMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   13230:	b580      	push	{r7, lr}
   13232:	b084      	sub	sp, #16
   13234:	af00      	add	r7, sp, #0
   13236:	6078      	str	r0, [r7, #4]
  hrpsConn_t  *pConn;

  /* if there are active connections */
  if (hrpsNoConnActive() == FALSE)
   13238:	f7ff fec6 	bl	12fc8 <hrpsNoConnActive>
   1323c:	4603      	mov	r3, r0
   1323e:	2b00      	cmp	r3, #0
   13240:	d12a      	bne.n	13298 <hrpsMeasTimerExp+0x68>
  {
  
    /* set up heart rate measurement to be sent on all connections */
    hrpsSetupToSend();
   13242:	f7ff fee1 	bl	13008 <hrpsSetupToSend>

    /* read heart rate measurement sensor data */
    AppHwHrmRead(&hrpsCb.hrm);
   13246:	4816      	ldr	r0, [pc, #88]	; (132a0 <hrpsMeasTimerExp+0x70>)
   13248:	f006 fcbe 	bl	19bc8 <AppHwHrmRead>
  
    /* if ready to send measurements */
    if (hrpsCb.txReady)
   1324c:	4b15      	ldr	r3, [pc, #84]	; (132a4 <hrpsMeasTimerExp+0x74>)
   1324e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   13252:	2b00      	cmp	r3, #0
   13254:	d014      	beq.n	13280 <hrpsMeasTimerExp+0x50>
    {
      /* find next connection to send (note ccc idx is stored in timer status) */
      if ((pConn = hrpsFindNextToSend(pMsg->status)) != NULL)
   13256:	687b      	ldr	r3, [r7, #4]
   13258:	78db      	ldrb	r3, [r3, #3]
   1325a:	4618      	mov	r0, r3
   1325c:	f7ff fef4 	bl	13048 <hrpsFindNextToSend>
   13260:	60f8      	str	r0, [r7, #12]
   13262:	68fb      	ldr	r3, [r7, #12]
   13264:	2b00      	cmp	r3, #0
   13266:	d00b      	beq.n	13280 <hrpsMeasTimerExp+0x50>
      {
        hrpsSendHrmNtf(pConn->connId);
   13268:	68fb      	ldr	r3, [r7, #12]
   1326a:	781b      	ldrb	r3, [r3, #0]
   1326c:	4618      	mov	r0, r3
   1326e:	f7ff ff87 	bl	13180 <hrpsSendHrmNtf>
        hrpsCb.txReady = FALSE;
   13272:	4b0c      	ldr	r3, [pc, #48]	; (132a4 <hrpsMeasTimerExp+0x74>)
   13274:	2200      	movs	r2, #0
   13276:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pConn->hrmToSend = FALSE;
   1327a:	68fb      	ldr	r3, [r7, #12]
   1327c:	2200      	movs	r2, #0
   1327e:	705a      	strb	r2, [r3, #1]
      }
    }
    
    /* restart timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   13280:	4b08      	ldr	r3, [pc, #32]	; (132a4 <hrpsMeasTimerExp+0x74>)
   13282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13284:	4619      	mov	r1, r3
   13286:	4808      	ldr	r0, [pc, #32]	; (132a8 <hrpsMeasTimerExp+0x78>)
   13288:	f007 faf6 	bl	1a878 <WsfTimerStartMs>
    
    /* increment energy expended for test/demonstration purposes */
    hrpsCb.hrm.energyExp++;
   1328c:	4b05      	ldr	r3, [pc, #20]	; (132a4 <hrpsMeasTimerExp+0x74>)
   1328e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   13290:	3301      	adds	r3, #1
   13292:	b29a      	uxth	r2, r3
   13294:	4b03      	ldr	r3, [pc, #12]	; (132a4 <hrpsMeasTimerExp+0x74>)
   13296:	84da      	strh	r2, [r3, #38]	; 0x26
  }
}
   13298:	bf00      	nop
   1329a:	3710      	adds	r7, #16
   1329c:	46bd      	mov	sp, r7
   1329e:	bd80      	pop	{r7, pc}
   132a0:	100041e0 	.word	0x100041e0
   132a4:	100041c0 	.word	0x100041c0
   132a8:	100041d0 	.word	0x100041d0

000132ac <HrpsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsInit(wsfHandlerId_t handlerId, hrpsCfg_t *pCfg)
{
   132ac:	b480      	push	{r7}
   132ae:	b083      	sub	sp, #12
   132b0:	af00      	add	r7, sp, #0
   132b2:	4603      	mov	r3, r0
   132b4:	6039      	str	r1, [r7, #0]
   132b6:	71fb      	strb	r3, [r7, #7]
  hrpsCb.measTimer.handlerId = handlerId;
   132b8:	4a06      	ldr	r2, [pc, #24]	; (132d4 <HrpsInit+0x28>)
   132ba:	79fb      	ldrb	r3, [r7, #7]
   132bc:	7613      	strb	r3, [r2, #24]
  hrpsCb.cfg = *pCfg;
   132be:	4a05      	ldr	r2, [pc, #20]	; (132d4 <HrpsInit+0x28>)
   132c0:	683b      	ldr	r3, [r7, #0]
   132c2:	681b      	ldr	r3, [r3, #0]
   132c4:	62d3      	str	r3, [r2, #44]	; 0x2c
}
   132c6:	bf00      	nop
   132c8:	370c      	adds	r7, #12
   132ca:	46bd      	mov	sp, r7
   132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   132d0:	4770      	bx	lr
   132d2:	bf00      	nop
   132d4:	100041c0 	.word	0x100041c0

000132d8 <HrpsMeasStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStart(dmConnId_t connId, uint8_t timerEvt, uint8_t hrmCccIdx)
{
   132d8:	b580      	push	{r7, lr}
   132da:	b082      	sub	sp, #8
   132dc:	af00      	add	r7, sp, #0
   132de:	4603      	mov	r3, r0
   132e0:	71fb      	strb	r3, [r7, #7]
   132e2:	460b      	mov	r3, r1
   132e4:	71bb      	strb	r3, [r7, #6]
   132e6:	4613      	mov	r3, r2
   132e8:	717b      	strb	r3, [r7, #5]
  /* if this is first connection */
  if (hrpsNoConnActive())
   132ea:	f7ff fe6d 	bl	12fc8 <hrpsNoConnActive>
   132ee:	4603      	mov	r3, r0
   132f0:	2b00      	cmp	r3, #0
   132f2:	d00b      	beq.n	1330c <HrpsMeasStart+0x34>
  {
    /* initialize control block */
    hrpsCb.measTimer.msg.event = timerEvt;
   132f4:	4a0a      	ldr	r2, [pc, #40]	; (13320 <HrpsMeasStart+0x48>)
   132f6:	79bb      	ldrb	r3, [r7, #6]
   132f8:	7713      	strb	r3, [r2, #28]
    hrpsCb.measTimer.msg.status = hrmCccIdx;  
   132fa:	4a09      	ldr	r2, [pc, #36]	; (13320 <HrpsMeasStart+0x48>)
   132fc:	797b      	ldrb	r3, [r7, #5]
   132fe:	7753      	strb	r3, [r2, #29]
    
    /* start timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   13300:	4b07      	ldr	r3, [pc, #28]	; (13320 <HrpsMeasStart+0x48>)
   13302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13304:	4619      	mov	r1, r3
   13306:	4807      	ldr	r0, [pc, #28]	; (13324 <HrpsMeasStart+0x4c>)
   13308:	f007 fab6 	bl	1a878 <WsfTimerStartMs>
  }
  
  /* set conn id */
  hrpsCb.conn[connId - 1].connId = connId;
   1330c:	79fb      	ldrb	r3, [r7, #7]
   1330e:	3b01      	subs	r3, #1
   13310:	4903      	ldr	r1, [pc, #12]	; (13320 <HrpsMeasStart+0x48>)
   13312:	79fa      	ldrb	r2, [r7, #7]
   13314:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
   13318:	bf00      	nop
   1331a:	3708      	adds	r7, #8
   1331c:	46bd      	mov	sp, r7
   1331e:	bd80      	pop	{r7, pc}
   13320:	100041c0 	.word	0x100041c0
   13324:	100041d0 	.word	0x100041d0

00013328 <HrpsMeasStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStop(dmConnId_t connId)
{
   13328:	b580      	push	{r7, lr}
   1332a:	b082      	sub	sp, #8
   1332c:	af00      	add	r7, sp, #0
   1332e:	4603      	mov	r3, r0
   13330:	71fb      	strb	r3, [r7, #7]
  /* clear connection */
  hrpsCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   13332:	79fb      	ldrb	r3, [r7, #7]
   13334:	3b01      	subs	r3, #1
   13336:	4a0b      	ldr	r2, [pc, #44]	; (13364 <HrpsMeasStop+0x3c>)
   13338:	2100      	movs	r1, #0
   1333a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
  hrpsCb.conn[connId - 1].hrmToSend = FALSE;
   1333e:	79fb      	ldrb	r3, [r7, #7]
   13340:	3b01      	subs	r3, #1
   13342:	4a08      	ldr	r2, [pc, #32]	; (13364 <HrpsMeasStop+0x3c>)
   13344:	005b      	lsls	r3, r3, #1
   13346:	4413      	add	r3, r2
   13348:	2200      	movs	r2, #0
   1334a:	705a      	strb	r2, [r3, #1]
  
  /* if no remaining connections */
  if (hrpsNoConnActive())
   1334c:	f7ff fe3c 	bl	12fc8 <hrpsNoConnActive>
   13350:	4603      	mov	r3, r0
   13352:	2b00      	cmp	r3, #0
   13354:	d002      	beq.n	1335c <HrpsMeasStop+0x34>
  {  
    /* stop timer */
    WsfTimerStop(&hrpsCb.measTimer);
   13356:	4804      	ldr	r0, [pc, #16]	; (13368 <HrpsMeasStop+0x40>)
   13358:	f007 faa2 	bl	1a8a0 <WsfTimerStop>
  }
}
   1335c:	bf00      	nop
   1335e:	3708      	adds	r7, #8
   13360:	46bd      	mov	sp, r7
   13362:	bd80      	pop	{r7, pc}
   13364:	100041c0 	.word	0x100041c0
   13368:	100041d0 	.word	0x100041d0

0001336c <HrpsProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsProcMsg(wsfMsgHdr_t *pMsg)
{
   1336c:	b580      	push	{r7, lr}
   1336e:	b082      	sub	sp, #8
   13370:	af00      	add	r7, sp, #0
   13372:	6078      	str	r0, [r7, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   13374:	687b      	ldr	r3, [r7, #4]
   13376:	789b      	ldrb	r3, [r3, #2]
   13378:	2b27      	cmp	r3, #39	; 0x27
   1337a:	d103      	bne.n	13384 <HrpsProcMsg+0x18>
  {
    hrpsConnOpen((dmEvt_t *) pMsg);
   1337c:	6878      	ldr	r0, [r7, #4]
   1337e:	f7ff ff1b 	bl	131b8 <hrpsConnOpen>
  }
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
  {
    hrpsMeasTimerExp(pMsg);
  }
}
   13382:	e010      	b.n	133a6 <HrpsProcMsg+0x3a>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   13384:	687b      	ldr	r3, [r7, #4]
   13386:	789b      	ldrb	r3, [r3, #2]
   13388:	2b0f      	cmp	r3, #15
   1338a:	d103      	bne.n	13394 <HrpsProcMsg+0x28>
    hrpsHandleValueCnf((attEvt_t *) pMsg);
   1338c:	6878      	ldr	r0, [r7, #4]
   1338e:	f7ff ff23 	bl	131d8 <hrpsHandleValueCnf>
}
   13392:	e008      	b.n	133a6 <HrpsProcMsg+0x3a>
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
   13394:	687b      	ldr	r3, [r7, #4]
   13396:	789a      	ldrb	r2, [r3, #2]
   13398:	4b05      	ldr	r3, [pc, #20]	; (133b0 <HrpsProcMsg+0x44>)
   1339a:	7f1b      	ldrb	r3, [r3, #28]
   1339c:	429a      	cmp	r2, r3
   1339e:	d102      	bne.n	133a6 <HrpsProcMsg+0x3a>
    hrpsMeasTimerExp(pMsg);
   133a0:	6878      	ldr	r0, [r7, #4]
   133a2:	f7ff ff45 	bl	13230 <hrpsMeasTimerExp>
}
   133a6:	bf00      	nop
   133a8:	3708      	adds	r7, #8
   133aa:	46bd      	mov	sp, r7
   133ac:	bd80      	pop	{r7, pc}
   133ae:	bf00      	nop
   133b0:	100041c0 	.word	0x100041c0

000133b4 <HrpsWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t HrpsWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{ 
   133b4:	b490      	push	{r4, r7}
   133b6:	b082      	sub	sp, #8
   133b8:	af00      	add	r7, sp, #0
   133ba:	4604      	mov	r4, r0
   133bc:	4608      	mov	r0, r1
   133be:	4611      	mov	r1, r2
   133c0:	461a      	mov	r2, r3
   133c2:	4623      	mov	r3, r4
   133c4:	71fb      	strb	r3, [r7, #7]
   133c6:	4603      	mov	r3, r0
   133c8:	80bb      	strh	r3, [r7, #4]
   133ca:	460b      	mov	r3, r1
   133cc:	71bb      	strb	r3, [r7, #6]
   133ce:	4613      	mov	r3, r2
   133d0:	807b      	strh	r3, [r7, #2]
  if (*pValue == CH_HRCP_RESET_ENERGY_EXP)
   133d2:	697b      	ldr	r3, [r7, #20]
   133d4:	781b      	ldrb	r3, [r3, #0]
   133d6:	2b01      	cmp	r3, #1
   133d8:	d104      	bne.n	133e4 <HrpsWriteCback+0x30>
  {
    /* reset energy expended */
    hrpsCb.hrm.energyExp = 0;
   133da:	4b05      	ldr	r3, [pc, #20]	; (133f0 <HrpsWriteCback+0x3c>)
   133dc:	2200      	movs	r2, #0
   133de:	84da      	strh	r2, [r3, #38]	; 0x26
    return ATT_SUCCESS;
   133e0:	2300      	movs	r3, #0
   133e2:	e000      	b.n	133e6 <HrpsWriteCback+0x32>
  }
  else
  {
    /* else unknown control point command */
    return HRS_ERR_CP_NOT_SUP;
   133e4:	2380      	movs	r3, #128	; 0x80
  }
}
   133e6:	4618      	mov	r0, r3
   133e8:	3708      	adds	r7, #8
   133ea:	46bd      	mov	sp, r7
   133ec:	bc90      	pop	{r4, r7}
   133ee:	4770      	bx	lr
   133f0:	100041c0 	.word	0x100041c0

000133f4 <HrpsSetFlags>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsSetFlags(uint8_t flags)
{
   133f4:	b480      	push	{r7}
   133f6:	b083      	sub	sp, #12
   133f8:	af00      	add	r7, sp, #0
   133fa:	4603      	mov	r3, r0
   133fc:	71fb      	strb	r3, [r7, #7]
  hrpsCb.hrm.flags = flags;
   133fe:	4a05      	ldr	r2, [pc, #20]	; (13414 <HrpsSetFlags+0x20>)
   13400:	79fb      	ldrb	r3, [r7, #7]
   13402:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
}
   13406:	bf00      	nop
   13408:	370c      	adds	r7, #12
   1340a:	46bd      	mov	sp, r7
   1340c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13410:	4770      	bx	lr
   13412:	bf00      	nop
   13414:	100041c0 	.word	0x100041c0

00013418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
   13418:	b480      	push	{r7}
   1341a:	b083      	sub	sp, #12
   1341c:	af00      	add	r7, sp, #0
   1341e:	4603      	mov	r3, r0
   13420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   13422:	f997 3007 	ldrsb.w	r3, [r7, #7]
   13426:	2b00      	cmp	r3, #0
   13428:	db0b      	blt.n	13442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1342a:	4909      	ldr	r1, [pc, #36]	; (13450 <__NVIC_EnableIRQ+0x38>)
   1342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   13430:	095b      	lsrs	r3, r3, #5
   13432:	79fa      	ldrb	r2, [r7, #7]
   13434:	f002 021f 	and.w	r2, r2, #31
   13438:	2001      	movs	r0, #1
   1343a:	fa00 f202 	lsl.w	r2, r0, r2
   1343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   13442:	bf00      	nop
   13444:	370c      	adds	r7, #12
   13446:	46bd      	mov	sp, r7
   13448:	f85d 7b04 	ldr.w	r7, [sp], #4
   1344c:	4770      	bx	lr
   1344e:	bf00      	nop
   13450:	e000e100 	.word	0xe000e100

00013454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   13454:	b480      	push	{r7}
   13456:	b083      	sub	sp, #12
   13458:	af00      	add	r7, sp, #0
   1345a:	4603      	mov	r3, r0
   1345c:	6039      	str	r1, [r7, #0]
   1345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   13460:	f997 3007 	ldrsb.w	r3, [r7, #7]
   13464:	2b00      	cmp	r3, #0
   13466:	db0a      	blt.n	1347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13468:	490d      	ldr	r1, [pc, #52]	; (134a0 <__NVIC_SetPriority+0x4c>)
   1346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1346e:	683a      	ldr	r2, [r7, #0]
   13470:	b2d2      	uxtb	r2, r2
   13472:	0152      	lsls	r2, r2, #5
   13474:	b2d2      	uxtb	r2, r2
   13476:	440b      	add	r3, r1
   13478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   1347c:	e00a      	b.n	13494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1347e:	4909      	ldr	r1, [pc, #36]	; (134a4 <__NVIC_SetPriority+0x50>)
   13480:	79fb      	ldrb	r3, [r7, #7]
   13482:	f003 030f 	and.w	r3, r3, #15
   13486:	3b04      	subs	r3, #4
   13488:	683a      	ldr	r2, [r7, #0]
   1348a:	b2d2      	uxtb	r2, r2
   1348c:	0152      	lsls	r2, r2, #5
   1348e:	b2d2      	uxtb	r2, r2
   13490:	440b      	add	r3, r1
   13492:	761a      	strb	r2, [r3, #24]
}
   13494:	bf00      	nop
   13496:	370c      	adds	r7, #12
   13498:	46bd      	mov	sp, r7
   1349a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1349e:	4770      	bx	lr
   134a0:	e000e100 	.word	0xe000e100
   134a4:	e000ed00 	.word	0xe000ed00

000134a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   134a8:	b480      	push	{r7}
   134aa:	b085      	sub	sp, #20
   134ac:	af00      	add	r7, sp, #0
   134ae:	60f8      	str	r0, [r7, #12]
   134b0:	60b9      	str	r1, [r7, #8]
   134b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   134b4:	68fb      	ldr	r3, [r7, #12]
   134b6:	3b04      	subs	r3, #4
   134b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   134ba:	68fb      	ldr	r3, [r7, #12]
   134bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   134c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   134c2:	68fb      	ldr	r3, [r7, #12]
   134c4:	3b04      	subs	r3, #4
   134c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   134c8:	68bb      	ldr	r3, [r7, #8]
   134ca:	f023 0201 	bic.w	r2, r3, #1
   134ce:	68fb      	ldr	r3, [r7, #12]
   134d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   134d2:	68fb      	ldr	r3, [r7, #12]
   134d4:	3b04      	subs	r3, #4
   134d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   134d8:	4a0c      	ldr	r2, [pc, #48]	; (1350c <pxPortInitialiseStack+0x64>)
   134da:	68fb      	ldr	r3, [r7, #12]
   134dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   134de:	68fb      	ldr	r3, [r7, #12]
   134e0:	3b14      	subs	r3, #20
   134e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   134e4:	687a      	ldr	r2, [r7, #4]
   134e6:	68fb      	ldr	r3, [r7, #12]
   134e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   134ea:	68fb      	ldr	r3, [r7, #12]
   134ec:	3b04      	subs	r3, #4
   134ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   134f0:	68fb      	ldr	r3, [r7, #12]
   134f2:	f06f 0202 	mvn.w	r2, #2
   134f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   134f8:	68fb      	ldr	r3, [r7, #12]
   134fa:	3b20      	subs	r3, #32
   134fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   134fe:	68fb      	ldr	r3, [r7, #12]
}
   13500:	4618      	mov	r0, r3
   13502:	3714      	adds	r7, #20
   13504:	46bd      	mov	sp, r7
   13506:	f85d 7b04 	ldr.w	r7, [sp], #4
   1350a:	4770      	bx	lr
   1350c:	00013511 	.word	0x00013511

00013510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   13510:	b480      	push	{r7}
   13512:	b083      	sub	sp, #12
   13514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   13516:	2300      	movs	r3, #0
   13518:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1351a:	4b0c      	ldr	r3, [pc, #48]	; (1354c <prvTaskExitError+0x3c>)
   1351c:	681b      	ldr	r3, [r3, #0]
   1351e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13522:	d000      	beq.n	13526 <prvTaskExitError+0x16>
   13524:	e7fe      	b.n	13524 <prvTaskExitError+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   13526:	f04f 0380 	mov.w	r3, #128	; 0x80
   1352a:	f383 8811 	msr	BASEPRI, r3
   1352e:	f3bf 8f6f 	isb	sy
   13532:	f3bf 8f4f 	dsb	sy
   13536:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   13538:	bf00      	nop
   1353a:	683b      	ldr	r3, [r7, #0]
   1353c:	2b00      	cmp	r3, #0
   1353e:	d0fc      	beq.n	1353a <prvTaskExitError+0x2a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   13540:	bf00      	nop
   13542:	370c      	adds	r7, #12
   13544:	46bd      	mov	sp, r7
   13546:	f85d 7b04 	ldr.w	r7, [sp], #4
   1354a:	4770      	bx	lr
   1354c:	10002b84 	.word	0x10002b84

00013550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   13550:	4b07      	ldr	r3, [pc, #28]	; (13570 <pxCurrentTCBConst2>)
   13552:	6819      	ldr	r1, [r3, #0]
   13554:	6808      	ldr	r0, [r1, #0]
   13556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1355a:	f380 8809 	msr	PSP, r0
   1355e:	f3bf 8f6f 	isb	sy
   13562:	f04f 0000 	mov.w	r0, #0
   13566:	f380 8811 	msr	BASEPRI, r0
   1356a:	4770      	bx	lr
   1356c:	f3af 8000 	nop.w

00013570 <pxCurrentTCBConst2>:
   13570:	10005110 	.word	0x10005110
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   13574:	bf00      	nop
   13576:	bf00      	nop

00013578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   13578:	4808      	ldr	r0, [pc, #32]	; (1359c <prvPortStartFirstTask+0x24>)
   1357a:	6800      	ldr	r0, [r0, #0]
   1357c:	6800      	ldr	r0, [r0, #0]
   1357e:	f380 8808 	msr	MSP, r0
   13582:	f04f 0000 	mov.w	r0, #0
   13586:	f380 8814 	msr	CONTROL, r0
   1358a:	b662      	cpsie	i
   1358c:	b661      	cpsie	f
   1358e:	f3bf 8f4f 	dsb	sy
   13592:	f3bf 8f6f 	isb	sy
   13596:	df00      	svc	0
   13598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1359a:	bf00      	nop
   1359c:	e000ed08 	.word	0xe000ed08

000135a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   135a0:	b580      	push	{r7, lr}
   135a2:	b084      	sub	sp, #16
   135a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   135a6:	4b37      	ldr	r3, [pc, #220]	; (13684 <xPortStartScheduler+0xe4>)
   135a8:	681b      	ldr	r3, [r3, #0]
   135aa:	4a37      	ldr	r2, [pc, #220]	; (13688 <xPortStartScheduler+0xe8>)
   135ac:	4293      	cmp	r3, r2
   135ae:	d100      	bne.n	135b2 <xPortStartScheduler+0x12>
   135b0:	e7fe      	b.n	135b0 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   135b2:	4b34      	ldr	r3, [pc, #208]	; (13684 <xPortStartScheduler+0xe4>)
   135b4:	681b      	ldr	r3, [r3, #0]
   135b6:	4a35      	ldr	r2, [pc, #212]	; (1368c <xPortStartScheduler+0xec>)
   135b8:	4293      	cmp	r3, r2
   135ba:	d100      	bne.n	135be <xPortStartScheduler+0x1e>
   135bc:	e7fe      	b.n	135bc <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   135be:	4b34      	ldr	r3, [pc, #208]	; (13690 <xPortStartScheduler+0xf0>)
   135c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   135c2:	68fb      	ldr	r3, [r7, #12]
   135c4:	781b      	ldrb	r3, [r3, #0]
   135c6:	b2db      	uxtb	r3, r3
   135c8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   135ca:	68fb      	ldr	r3, [r7, #12]
   135cc:	22ff      	movs	r2, #255	; 0xff
   135ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   135d0:	68fb      	ldr	r3, [r7, #12]
   135d2:	781b      	ldrb	r3, [r3, #0]
   135d4:	b2db      	uxtb	r3, r3
   135d6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   135d8:	79fb      	ldrb	r3, [r7, #7]
   135da:	b2db      	uxtb	r3, r3
   135dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   135e0:	b2da      	uxtb	r2, r3
   135e2:	4b2c      	ldr	r3, [pc, #176]	; (13694 <xPortStartScheduler+0xf4>)
   135e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   135e6:	4b2c      	ldr	r3, [pc, #176]	; (13698 <xPortStartScheduler+0xf8>)
   135e8:	2207      	movs	r2, #7
   135ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   135ec:	e009      	b.n	13602 <xPortStartScheduler+0x62>
		{
			ulMaxPRIGROUPValue--;
   135ee:	4b2a      	ldr	r3, [pc, #168]	; (13698 <xPortStartScheduler+0xf8>)
   135f0:	681b      	ldr	r3, [r3, #0]
   135f2:	3b01      	subs	r3, #1
   135f4:	4a28      	ldr	r2, [pc, #160]	; (13698 <xPortStartScheduler+0xf8>)
   135f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   135f8:	79fb      	ldrb	r3, [r7, #7]
   135fa:	b2db      	uxtb	r3, r3
   135fc:	005b      	lsls	r3, r3, #1
   135fe:	b2db      	uxtb	r3, r3
   13600:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   13602:	79fb      	ldrb	r3, [r7, #7]
   13604:	b2db      	uxtb	r3, r3
   13606:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1360a:	2b80      	cmp	r3, #128	; 0x80
   1360c:	d0ef      	beq.n	135ee <xPortStartScheduler+0x4e>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   1360e:	4b22      	ldr	r3, [pc, #136]	; (13698 <xPortStartScheduler+0xf8>)
   13610:	681b      	ldr	r3, [r3, #0]
   13612:	f1c3 0307 	rsb	r3, r3, #7
   13616:	2b03      	cmp	r3, #3
   13618:	d000      	beq.n	1361c <xPortStartScheduler+0x7c>
   1361a:	e7fe      	b.n	1361a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   1361c:	4b1e      	ldr	r3, [pc, #120]	; (13698 <xPortStartScheduler+0xf8>)
   1361e:	681b      	ldr	r3, [r3, #0]
   13620:	021b      	lsls	r3, r3, #8
   13622:	4a1d      	ldr	r2, [pc, #116]	; (13698 <xPortStartScheduler+0xf8>)
   13624:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   13626:	4b1c      	ldr	r3, [pc, #112]	; (13698 <xPortStartScheduler+0xf8>)
   13628:	681b      	ldr	r3, [r3, #0]
   1362a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1362e:	4a1a      	ldr	r2, [pc, #104]	; (13698 <xPortStartScheduler+0xf8>)
   13630:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   13632:	68bb      	ldr	r3, [r7, #8]
   13634:	b2da      	uxtb	r2, r3
   13636:	68fb      	ldr	r3, [r7, #12]
   13638:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1363a:	4a18      	ldr	r2, [pc, #96]	; (1369c <xPortStartScheduler+0xfc>)
   1363c:	4b17      	ldr	r3, [pc, #92]	; (1369c <xPortStartScheduler+0xfc>)
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   13644:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   13646:	4a15      	ldr	r2, [pc, #84]	; (1369c <xPortStartScheduler+0xfc>)
   13648:	4b14      	ldr	r3, [pc, #80]	; (1369c <xPortStartScheduler+0xfc>)
   1364a:	681b      	ldr	r3, [r3, #0]
   1364c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   13650:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   13652:	f000 f9df 	bl	13a14 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   13656:	4b12      	ldr	r3, [pc, #72]	; (136a0 <xPortStartScheduler+0x100>)
   13658:	2200      	movs	r2, #0
   1365a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   1365c:	f000 f8bc 	bl	137d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   13660:	4a10      	ldr	r2, [pc, #64]	; (136a4 <xPortStartScheduler+0x104>)
   13662:	4b10      	ldr	r3, [pc, #64]	; (136a4 <xPortStartScheduler+0x104>)
   13664:	681b      	ldr	r3, [r3, #0]
   13666:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1366a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   1366c:	f7ff ff84 	bl	13578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   13670:	f009 faf8 	bl	1cc64 <vTaskSwitchContext>
	prvTaskExitError();
   13674:	f7ff ff4c 	bl	13510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   13678:	2300      	movs	r3, #0
}
   1367a:	4618      	mov	r0, r3
   1367c:	3710      	adds	r7, #16
   1367e:	46bd      	mov	sp, r7
   13680:	bd80      	pop	{r7, pc}
   13682:	bf00      	nop
   13684:	e000ed00 	.word	0xe000ed00
   13688:	410fc271 	.word	0x410fc271
   1368c:	410fc270 	.word	0x410fc270
   13690:	e000e400 	.word	0xe000e400
   13694:	100041f8 	.word	0x100041f8
   13698:	100041fc 	.word	0x100041fc
   1369c:	e000ed20 	.word	0xe000ed20
   136a0:	10002b84 	.word	0x10002b84
   136a4:	e000ef34 	.word	0xe000ef34

000136a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   136a8:	b480      	push	{r7}
   136aa:	b083      	sub	sp, #12
   136ac:	af00      	add	r7, sp, #0
   136ae:	f04f 0380 	mov.w	r3, #128	; 0x80
   136b2:	f383 8811 	msr	BASEPRI, r3
   136b6:	f3bf 8f6f 	isb	sy
   136ba:	f3bf 8f4f 	dsb	sy
   136be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   136c0:	4b0a      	ldr	r3, [pc, #40]	; (136ec <vPortEnterCritical+0x44>)
   136c2:	681b      	ldr	r3, [r3, #0]
   136c4:	3301      	adds	r3, #1
   136c6:	4a09      	ldr	r2, [pc, #36]	; (136ec <vPortEnterCritical+0x44>)
   136c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   136ca:	4b08      	ldr	r3, [pc, #32]	; (136ec <vPortEnterCritical+0x44>)
   136cc:	681b      	ldr	r3, [r3, #0]
   136ce:	2b01      	cmp	r3, #1
   136d0:	d105      	bne.n	136de <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   136d2:	4b07      	ldr	r3, [pc, #28]	; (136f0 <vPortEnterCritical+0x48>)
   136d4:	681b      	ldr	r3, [r3, #0]
   136d6:	b2db      	uxtb	r3, r3
   136d8:	2b00      	cmp	r3, #0
   136da:	d000      	beq.n	136de <vPortEnterCritical+0x36>
   136dc:	e7fe      	b.n	136dc <vPortEnterCritical+0x34>
	}
}
   136de:	bf00      	nop
   136e0:	370c      	adds	r7, #12
   136e2:	46bd      	mov	sp, r7
   136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   136e8:	4770      	bx	lr
   136ea:	bf00      	nop
   136ec:	10002b84 	.word	0x10002b84
   136f0:	e000ed04 	.word	0xe000ed04

000136f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   136f4:	b480      	push	{r7}
   136f6:	b083      	sub	sp, #12
   136f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   136fa:	4b0c      	ldr	r3, [pc, #48]	; (1372c <vPortExitCritical+0x38>)
   136fc:	681b      	ldr	r3, [r3, #0]
   136fe:	2b00      	cmp	r3, #0
   13700:	d100      	bne.n	13704 <vPortExitCritical+0x10>
   13702:	e7fe      	b.n	13702 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   13704:	4b09      	ldr	r3, [pc, #36]	; (1372c <vPortExitCritical+0x38>)
   13706:	681b      	ldr	r3, [r3, #0]
   13708:	3b01      	subs	r3, #1
   1370a:	4a08      	ldr	r2, [pc, #32]	; (1372c <vPortExitCritical+0x38>)
   1370c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1370e:	4b07      	ldr	r3, [pc, #28]	; (1372c <vPortExitCritical+0x38>)
   13710:	681b      	ldr	r3, [r3, #0]
   13712:	2b00      	cmp	r3, #0
   13714:	d104      	bne.n	13720 <vPortExitCritical+0x2c>
   13716:	2300      	movs	r3, #0
   13718:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1371a:	687b      	ldr	r3, [r7, #4]
   1371c:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   13720:	bf00      	nop
   13722:	370c      	adds	r7, #12
   13724:	46bd      	mov	sp, r7
   13726:	f85d 7b04 	ldr.w	r7, [sp], #4
   1372a:	4770      	bx	lr
   1372c:	10002b84 	.word	0x10002b84

00013730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   13730:	f3ef 8009 	mrs	r0, PSP
   13734:	f3bf 8f6f 	isb	sy
   13738:	4b15      	ldr	r3, [pc, #84]	; (13790 <pxCurrentTCBConst>)
   1373a:	681a      	ldr	r2, [r3, #0]
   1373c:	f01e 0f10 	tst.w	lr, #16
   13740:	bf08      	it	eq
   13742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   13746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1374a:	6010      	str	r0, [r2, #0]
   1374c:	e92d 0009 	stmdb	sp!, {r0, r3}
   13750:	f04f 0080 	mov.w	r0, #128	; 0x80
   13754:	f380 8811 	msr	BASEPRI, r0
   13758:	f3bf 8f4f 	dsb	sy
   1375c:	f3bf 8f6f 	isb	sy
   13760:	f009 fa80 	bl	1cc64 <vTaskSwitchContext>
   13764:	f04f 0000 	mov.w	r0, #0
   13768:	f380 8811 	msr	BASEPRI, r0
   1376c:	bc09      	pop	{r0, r3}
   1376e:	6819      	ldr	r1, [r3, #0]
   13770:	6808      	ldr	r0, [r1, #0]
   13772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13776:	f01e 0f10 	tst.w	lr, #16
   1377a:	bf08      	it	eq
   1377c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   13780:	f380 8809 	msr	PSP, r0
   13784:	f3bf 8f6f 	isb	sy
   13788:	4770      	bx	lr
   1378a:	bf00      	nop
   1378c:	f3af 8000 	nop.w

00013790 <pxCurrentTCBConst>:
   13790:	10005110 	.word	0x10005110
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   13794:	bf00      	nop
   13796:	bf00      	nop

00013798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   13798:	b580      	push	{r7, lr}
   1379a:	b082      	sub	sp, #8
   1379c:	af00      	add	r7, sp, #0
	__asm volatile
   1379e:	f04f 0380 	mov.w	r3, #128	; 0x80
   137a2:	f383 8811 	msr	BASEPRI, r3
   137a6:	f3bf 8f6f 	isb	sy
   137aa:	f3bf 8f4f 	dsb	sy
   137ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   137b0:	f009 f9b8 	bl	1cb24 <xTaskIncrementTick>
   137b4:	4603      	mov	r3, r0
   137b6:	2b00      	cmp	r3, #0
   137b8:	d003      	beq.n	137c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   137ba:	4b06      	ldr	r3, [pc, #24]	; (137d4 <SysTick_Handler+0x3c>)
   137bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   137c0:	601a      	str	r2, [r3, #0]
   137c2:	2300      	movs	r3, #0
   137c4:	603b      	str	r3, [r7, #0]
	__asm volatile
   137c6:	683b      	ldr	r3, [r7, #0]
   137c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   137cc:	bf00      	nop
   137ce:	3708      	adds	r7, #8
   137d0:	46bd      	mov	sp, r7
   137d2:	bd80      	pop	{r7, pc}
   137d4:	e000ed04 	.word	0xe000ed04

000137d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   137d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 137e8 <vPortEnableVFP+0x10>
   137dc:	6801      	ldr	r1, [r0, #0]
   137de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   137e2:	6001      	str	r1, [r0, #0]
   137e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   137e6:	bf00      	nop
   137e8:	e000ed88 	.word	0xe000ed88

000137ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   137ec:	b480      	push	{r7}
   137ee:	b083      	sub	sp, #12
   137f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   137f2:	f3ef 8305 	mrs	r3, IPSR
   137f6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   137f8:	687b      	ldr	r3, [r7, #4]
   137fa:	2b0f      	cmp	r3, #15
   137fc:	d90a      	bls.n	13814 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   137fe:	4a0d      	ldr	r2, [pc, #52]	; (13834 <vPortValidateInterruptPriority+0x48>)
   13800:	687b      	ldr	r3, [r7, #4]
   13802:	4413      	add	r3, r2
   13804:	781b      	ldrb	r3, [r3, #0]
   13806:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   13808:	4b0b      	ldr	r3, [pc, #44]	; (13838 <vPortValidateInterruptPriority+0x4c>)
   1380a:	781b      	ldrb	r3, [r3, #0]
   1380c:	78fa      	ldrb	r2, [r7, #3]
   1380e:	429a      	cmp	r2, r3
   13810:	d200      	bcs.n	13814 <vPortValidateInterruptPriority+0x28>
   13812:	e7fe      	b.n	13812 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   13814:	4b09      	ldr	r3, [pc, #36]	; (1383c <vPortValidateInterruptPriority+0x50>)
   13816:	681b      	ldr	r3, [r3, #0]
   13818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   1381c:	4b08      	ldr	r3, [pc, #32]	; (13840 <vPortValidateInterruptPriority+0x54>)
   1381e:	681b      	ldr	r3, [r3, #0]
   13820:	429a      	cmp	r2, r3
   13822:	d900      	bls.n	13826 <vPortValidateInterruptPriority+0x3a>
   13824:	e7fe      	b.n	13824 <vPortValidateInterruptPriority+0x38>
	}
   13826:	bf00      	nop
   13828:	370c      	adds	r7, #12
   1382a:	46bd      	mov	sp, r7
   1382c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13830:	4770      	bx	lr
   13832:	bf00      	nop
   13834:	e000e3f0 	.word	0xe000e3f0
   13838:	100041f8 	.word	0x100041f8
   1383c:	e000ed0c 	.word	0xe000ed0c
   13840:	100041fc 	.word	0x100041fc

00013844 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   13844:	b580      	push	{r7, lr}
   13846:	b088      	sub	sp, #32
   13848:	af00      	add	r7, sp, #0
   1384a:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   1384c:	4b36      	ldr	r3, [pc, #216]	; (13928 <vPortSuppressTicksAndSleep+0xe4>)
   1384e:	681b      	ldr	r3, [r3, #0]
   13850:	687a      	ldr	r2, [r7, #4]
   13852:	429a      	cmp	r2, r3
   13854:	d902      	bls.n	1385c <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   13856:	4b34      	ldr	r3, [pc, #208]	; (13928 <vPortSuppressTicksAndSleep+0xe4>)
   13858:	681b      	ldr	r3, [r3, #0]
   1385a:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	3b01      	subs	r3, #1
   13860:	4a32      	ldr	r2, [pc, #200]	; (1392c <vPortSuppressTicksAndSleep+0xe8>)
   13862:	6812      	ldr	r2, [r2, #0]
   13864:	fb02 f303 	mul.w	r3, r2, r3
   13868:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   1386a:	b672      	cpsid	i
	__asm volatile( "dsb" );
   1386c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   13870:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   13874:	f00e fe14 	bl	224a0 <am_hal_stimer_counter_get>
   13878:	4602      	mov	r2, r0
   1387a:	4b2d      	ldr	r3, [pc, #180]	; (13930 <vPortSuppressTicksAndSleep+0xec>)
   1387c:	681b      	ldr	r3, [r3, #0]
   1387e:	1ad3      	subs	r3, r2, r3
   13880:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   13882:	f009 fc1b 	bl	1d0bc <eTaskConfirmSleepModeStatus>
   13886:	4603      	mov	r3, r0
   13888:	2b00      	cmp	r3, #0
   1388a:	d006      	beq.n	1389a <vPortSuppressTicksAndSleep+0x56>
   1388c:	4b27      	ldr	r3, [pc, #156]	; (1392c <vPortSuppressTicksAndSleep+0xe8>)
   1388e:	681a      	ldr	r2, [r3, #0]
   13890:	69bb      	ldr	r3, [r7, #24]
   13892:	441a      	add	r2, r3
   13894:	69fb      	ldr	r3, [r7, #28]
   13896:	429a      	cmp	r2, r3
   13898:	d901      	bls.n	1389e <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1389a:	b662      	cpsie	i
   1389c:	e03f      	b.n	1391e <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   1389e:	69fa      	ldr	r2, [r7, #28]
   138a0:	69bb      	ldr	r3, [r7, #24]
   138a2:	1ad3      	subs	r3, r2, r3
   138a4:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   138a6:	69f9      	ldr	r1, [r7, #28]
   138a8:	2000      	movs	r0, #0
   138aa:	f00e fdff 	bl	224ac <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   138ae:	687b      	ldr	r3, [r7, #4]
   138b0:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   138b2:	6978      	ldr	r0, [r7, #20]
   138b4:	f006 fc81 	bl	1a1ba <am_freertos_sleep>
   138b8:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   138ba:	697b      	ldr	r3, [r7, #20]
   138bc:	2b00      	cmp	r3, #0
   138be:	d004      	beq.n	138ca <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   138c0:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   138c4:	bf30      	wfi
			__asm volatile( "isb" );
   138c6:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   138ca:	6878      	ldr	r0, [r7, #4]
   138cc:	f006 fc81 	bl	1a1d2 <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   138d0:	f00e fde6 	bl	224a0 <am_hal_stimer_counter_get>
   138d4:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   138d6:	693b      	ldr	r3, [r7, #16]
   138d8:	4a15      	ldr	r2, [pc, #84]	; (13930 <vPortSuppressTicksAndSleep+0xec>)
   138da:	6812      	ldr	r2, [r2, #0]
   138dc:	1a9b      	subs	r3, r3, r2
   138de:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   138e0:	4b12      	ldr	r3, [pc, #72]	; (1392c <vPortSuppressTicksAndSleep+0xe8>)
   138e2:	681a      	ldr	r2, [r3, #0]
   138e4:	68fb      	ldr	r3, [r7, #12]
   138e6:	fbb3 f1f2 	udiv	r1, r3, r2
   138ea:	fb02 f201 	mul.w	r2, r2, r1
   138ee:	1a9b      	subs	r3, r3, r2
   138f0:	693a      	ldr	r2, [r7, #16]
   138f2:	1ad3      	subs	r3, r2, r3
   138f4:	4a0e      	ldr	r2, [pc, #56]	; (13930 <vPortSuppressTicksAndSleep+0xec>)
   138f6:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   138f8:	4b0c      	ldr	r3, [pc, #48]	; (1392c <vPortSuppressTicksAndSleep+0xe8>)
   138fa:	681b      	ldr	r3, [r3, #0]
   138fc:	68fa      	ldr	r2, [r7, #12]
   138fe:	fbb2 f3f3 	udiv	r3, r2, r3
   13902:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   13904:	68f8      	ldr	r0, [r7, #12]
   13906:	f009 f8ef 	bl	1cae8 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   1390a:	2001      	movs	r0, #1
   1390c:	f00e fe2c 	bl	22568 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13910:	4b06      	ldr	r3, [pc, #24]	; (1392c <vPortSuppressTicksAndSleep+0xe8>)
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	4619      	mov	r1, r3
   13916:	2000      	movs	r0, #0
   13918:	f00e fdc8 	bl	224ac <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   1391c:	b662      	cpsie	i

	}
}
   1391e:	bf00      	nop
   13920:	3720      	adds	r7, #32
   13922:	46bd      	mov	sp, r7
   13924:	bd80      	pop	{r7, pc}
   13926:	bf00      	nop
   13928:	10004204 	.word	0x10004204
   1392c:	10004200 	.word	0x10004200
   13930:	100041f4 	.word	0x100041f4

00013934 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   13934:	b580      	push	{r7, lr}
   13936:	b088      	sub	sp, #32
   13938:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   1393a:	2300      	movs	r3, #0
   1393c:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   1393e:	2300      	movs	r3, #0
   13940:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   13942:	f00e fdad 	bl	224a0 <am_hal_stimer_counter_get>
   13946:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13948:	4b24      	ldr	r3, [pc, #144]	; (139dc <xPortStimerTickHandler+0xa8>)
   1394a:	681b      	ldr	r3, [r3, #0]
   1394c:	4619      	mov	r1, r3
   1394e:	2000      	movs	r0, #0
   13950:	f00e fdac 	bl	224ac <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   13954:	4b22      	ldr	r3, [pc, #136]	; (139e0 <xPortStimerTickHandler+0xac>)
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	693a      	ldr	r2, [r7, #16]
   1395a:	1ad3      	subs	r3, r2, r3
   1395c:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   1395e:	4b1f      	ldr	r3, [pc, #124]	; (139dc <xPortStimerTickHandler+0xa8>)
   13960:	681b      	ldr	r3, [r3, #0]
   13962:	68fa      	ldr	r2, [r7, #12]
   13964:	fbb2 f3f3 	udiv	r3, r2, r3
   13968:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   1396a:	4b1c      	ldr	r3, [pc, #112]	; (139dc <xPortStimerTickHandler+0xa8>)
   1396c:	681a      	ldr	r2, [r3, #0]
   1396e:	68fb      	ldr	r3, [r7, #12]
   13970:	fbb3 f1f2 	udiv	r1, r3, r2
   13974:	fb02 f201 	mul.w	r2, r2, r1
   13978:	1a9b      	subs	r3, r3, r2
   1397a:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   1397c:	693a      	ldr	r2, [r7, #16]
   1397e:	697b      	ldr	r3, [r7, #20]
   13980:	1ad3      	subs	r3, r2, r3
   13982:	4a17      	ldr	r2, [pc, #92]	; (139e0 <xPortStimerTickHandler+0xac>)
   13984:	6013      	str	r3, [r2, #0]
	__asm volatile
   13986:	f3ef 8211 	mrs	r2, BASEPRI
   1398a:	f04f 0380 	mov.w	r3, #128	; 0x80
   1398e:	f383 8811 	msr	BASEPRI, r3
   13992:	f3bf 8f6f 	isb	sy
   13996:	f3bf 8f4f 	dsb	sy
   1399a:	60ba      	str	r2, [r7, #8]
   1399c:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   1399e:	e008      	b.n	139b2 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   139a0:	f009 f8c0 	bl	1cb24 <xTaskIncrementTick>
   139a4:	4603      	mov	r3, r0
   139a6:	2b00      	cmp	r3, #0
   139a8:	d101      	bne.n	139ae <xPortStimerTickHandler+0x7a>
   139aa:	69bb      	ldr	r3, [r7, #24]
   139ac:	e000      	b.n	139b0 <xPortStimerTickHandler+0x7c>
   139ae:	2301      	movs	r3, #1
   139b0:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
   139b2:	69fb      	ldr	r3, [r7, #28]
   139b4:	1e5a      	subs	r2, r3, #1
   139b6:	61fa      	str	r2, [r7, #28]
   139b8:	2b00      	cmp	r3, #0
   139ba:	d1f1      	bne.n	139a0 <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   139bc:	69bb      	ldr	r3, [r7, #24]
   139be:	2b00      	cmp	r3, #0
   139c0:	d003      	beq.n	139ca <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   139c2:	4b08      	ldr	r3, [pc, #32]	; (139e4 <xPortStimerTickHandler+0xb0>)
   139c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   139c8:	601a      	str	r2, [r3, #0]
   139ca:	2300      	movs	r3, #0
   139cc:	603b      	str	r3, [r7, #0]
	__asm volatile
   139ce:	683b      	ldr	r3, [r7, #0]
   139d0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   139d4:	bf00      	nop
   139d6:	3720      	adds	r7, #32
   139d8:	46bd      	mov	sp, r7
   139da:	bd80      	pop	{r7, pc}
   139dc:	10004200 	.word	0x10004200
   139e0:	100041f4 	.word	0x100041f4
   139e4:	e000ed04 	.word	0xe000ed04

000139e8 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   139e8:	b580      	push	{r7, lr}
   139ea:	b082      	sub	sp, #8
   139ec:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   139ee:	2000      	movs	r0, #0
   139f0:	f00e fdc0 	bl	22574 <am_hal_stimer_int_status_get>
   139f4:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   139f6:	687b      	ldr	r3, [r7, #4]
   139f8:	f003 0301 	and.w	r3, r3, #1
   139fc:	2b00      	cmp	r3, #0
   139fe:	d004      	beq.n	13a0a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   13a00:	2001      	movs	r0, #1
   13a02:	f00e fdb1 	bl	22568 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   13a06:	f7ff ff95 	bl	13934 <xPortStimerTickHandler>
    }
}
   13a0a:	bf00      	nop
   13a0c:	3708      	adds	r7, #8
   13a0e:	46bd      	mov	sp, r7
   13a10:	bd80      	pop	{r7, pc}
	...

00013a14 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   13a14:	b580      	push	{r7, lr}
   13a16:	b082      	sub	sp, #8
   13a18:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   13a1a:	4b19      	ldr	r3, [pc, #100]	; (13a80 <vPortSetupTimerInterrupt+0x6c>)
   13a1c:	2220      	movs	r2, #32
   13a1e:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   13a20:	4b17      	ldr	r3, [pc, #92]	; (13a80 <vPortSetupTimerInterrupt+0x6c>)
   13a22:	681b      	ldr	r3, [r3, #0]
   13a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a28:	fbb2 f3f3 	udiv	r3, r2, r3
   13a2c:	4a15      	ldr	r2, [pc, #84]	; (13a84 <vPortSetupTimerInterrupt+0x70>)
   13a2e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   13a30:	2001      	movs	r0, #1
   13a32:	f00e fd8f 	bl	22554 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   13a36:	2107      	movs	r1, #7
   13a38:	2017      	movs	r0, #23
   13a3a:	f7ff fd0b 	bl	13454 <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   13a3e:	2017      	movs	r0, #23
   13a40:	f7ff fcea 	bl	13418 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   13a44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   13a48:	f00e fd20 	bl	2248c <am_hal_stimer_config>
   13a4c:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   13a4e:	f00e fd27 	bl	224a0 <am_hal_stimer_counter_get>
   13a52:	4602      	mov	r2, r0
   13a54:	4b0c      	ldr	r3, [pc, #48]	; (13a88 <vPortSetupTimerInterrupt+0x74>)
   13a56:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   13a58:	4b09      	ldr	r3, [pc, #36]	; (13a80 <vPortSetupTimerInterrupt+0x6c>)
   13a5a:	681b      	ldr	r3, [r3, #0]
   13a5c:	4619      	mov	r1, r3
   13a5e:	2000      	movs	r0, #0
   13a60:	f00e fd24 	bl	224ac <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   13a64:	687a      	ldr	r2, [r7, #4]
   13a66:	4b09      	ldr	r3, [pc, #36]	; (13a8c <vPortSetupTimerInterrupt+0x78>)
   13a68:	4013      	ands	r3, r2
   13a6a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   13a6e:	f043 0301 	orr.w	r3, r3, #1
   13a72:	4618      	mov	r0, r3
   13a74:	f00e fd0a 	bl	2248c <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   13a78:	bf00      	nop
   13a7a:	3708      	adds	r7, #8
   13a7c:	46bd      	mov	sp, r7
   13a7e:	bd80      	pop	{r7, pc}
   13a80:	10004200 	.word	0x10004200
   13a84:	10004204 	.word	0x10004204
   13a88:	100041f4 	.word	0x100041f4
   13a8c:	7ffffef0 	.word	0x7ffffef0

00013a90 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   13a90:	b580      	push	{r7, lr}
   13a92:	b082      	sub	sp, #8
   13a94:	af00      	add	r7, sp, #0
   13a96:	6078      	str	r0, [r7, #4]
   13a98:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   13a9a:	2206      	movs	r2, #6
   13a9c:	6839      	ldr	r1, [r7, #0]
   13a9e:	6878      	ldr	r0, [r7, #4]
   13aa0:	f7f8 fb5e 	bl	c160 <memcpy>
}
   13aa4:	bf00      	nop
   13aa6:	3708      	adds	r7, #8
   13aa8:	46bd      	mov	sp, r7
   13aaa:	bd80      	pop	{r7, pc}

00013aac <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   13aac:	b580      	push	{r7, lr}
   13aae:	b082      	sub	sp, #8
   13ab0:	af00      	add	r7, sp, #0
   13ab2:	6078      	str	r0, [r7, #4]
   13ab4:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   13ab6:	2206      	movs	r2, #6
   13ab8:	6839      	ldr	r1, [r7, #0]
   13aba:	6878      	ldr	r0, [r7, #4]
   13abc:	f7f8 fb20 	bl	c100 <memcmp>
   13ac0:	4603      	mov	r3, r0
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	bf0c      	ite	eq
   13ac6:	2301      	moveq	r3, #1
   13ac8:	2300      	movne	r3, #0
   13aca:	b2db      	uxtb	r3, r3
}
   13acc:	4618      	mov	r0, r3
   13ace:	3708      	adds	r7, #8
   13ad0:	46bd      	mov	sp, r7
   13ad2:	bd80      	pop	{r7, pc}

00013ad4 <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   13ad4:	b580      	push	{r7, lr}
   13ad6:	b082      	sub	sp, #8
   13ad8:	af00      	add	r7, sp, #0
   13ada:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   13adc:	2206      	movs	r2, #6
   13ade:	2100      	movs	r1, #0
   13ae0:	6878      	ldr	r0, [r7, #4]
   13ae2:	f7f8 fc3b 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   13ae6:	687b      	ldr	r3, [r7, #4]
   13ae8:	3306      	adds	r3, #6
}
   13aea:	4618      	mov	r0, r3
   13aec:	3708      	adds	r7, #8
   13aee:	46bd      	mov	sp, r7
   13af0:	bd80      	pop	{r7, pc}

00013af2 <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   13af2:	b580      	push	{r7, lr}
   13af4:	b084      	sub	sp, #16
   13af6:	af00      	add	r7, sp, #0
   13af8:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   13afa:	f107 0308 	add.w	r3, r7, #8
   13afe:	2200      	movs	r2, #0
   13b00:	601a      	str	r2, [r3, #0]
   13b02:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   13b04:	f107 0308 	add.w	r3, r7, #8
   13b08:	2206      	movs	r2, #6
   13b0a:	4619      	mov	r1, r3
   13b0c:	6878      	ldr	r0, [r7, #4]
   13b0e:	f7f8 faf7 	bl	c100 <memcmp>
   13b12:	4603      	mov	r3, r0
   13b14:	2b00      	cmp	r3, #0
   13b16:	bf0c      	ite	eq
   13b18:	2301      	moveq	r3, #1
   13b1a:	2300      	movne	r3, #0
   13b1c:	b2db      	uxtb	r3, r3
}
   13b1e:	4618      	mov	r0, r3
   13b20:	3710      	adds	r7, #16
   13b22:	46bd      	mov	sp, r7
   13b24:	bd80      	pop	{r7, pc}

00013b26 <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   13b26:	b580      	push	{r7, lr}
   13b28:	b082      	sub	sp, #8
   13b2a:	af00      	add	r7, sp, #0
   13b2c:	6078      	str	r0, [r7, #4]
   13b2e:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   13b30:	2210      	movs	r2, #16
   13b32:	6839      	ldr	r1, [r7, #0]
   13b34:	6878      	ldr	r0, [r7, #4]
   13b36:	f7f8 fb13 	bl	c160 <memcpy>
}
   13b3a:	bf00      	nop
   13b3c:	3708      	adds	r7, #8
   13b3e:	46bd      	mov	sp, r7
   13b40:	bd80      	pop	{r7, pc}

00013b42 <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   13b42:	b580      	push	{r7, lr}
   13b44:	b082      	sub	sp, #8
   13b46:	af00      	add	r7, sp, #0
   13b48:	6078      	str	r0, [r7, #4]
   13b4a:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   13b4c:	2208      	movs	r2, #8
   13b4e:	6839      	ldr	r1, [r7, #0]
   13b50:	6878      	ldr	r0, [r7, #4]
   13b52:	f7f8 fb05 	bl	c160 <memcpy>
}
   13b56:	bf00      	nop
   13b58:	3708      	adds	r7, #8
   13b5a:	46bd      	mov	sp, r7
   13b5c:	bd80      	pop	{r7, pc}

00013b5e <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   13b5e:	b480      	push	{r7}
   13b60:	b085      	sub	sp, #20
   13b62:	af00      	add	r7, sp, #0
   13b64:	6078      	str	r0, [r7, #4]
   13b66:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   13b68:	2310      	movs	r3, #16
   13b6a:	73fb      	strb	r3, [r7, #15]
   13b6c:	e00d      	b.n	13b8a <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   13b6e:	683b      	ldr	r3, [r7, #0]
   13b70:	1c5a      	adds	r2, r3, #1
   13b72:	603a      	str	r2, [r7, #0]
   13b74:	781a      	ldrb	r2, [r3, #0]
   13b76:	687b      	ldr	r3, [r7, #4]
   13b78:	1c59      	adds	r1, r3, #1
   13b7a:	6079      	str	r1, [r7, #4]
   13b7c:	7819      	ldrb	r1, [r3, #0]
   13b7e:	404a      	eors	r2, r1
   13b80:	b2d2      	uxtb	r2, r2
   13b82:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   13b84:	7bfb      	ldrb	r3, [r7, #15]
   13b86:	3b01      	subs	r3, #1
   13b88:	73fb      	strb	r3, [r7, #15]
   13b8a:	7bfb      	ldrb	r3, [r7, #15]
   13b8c:	2b00      	cmp	r3, #0
   13b8e:	d1ee      	bne.n	13b6e <Calc128Xor+0x10>
  }
}
   13b90:	bf00      	nop
   13b92:	3714      	adds	r7, #20
   13b94:	46bd      	mov	sp, r7
   13b96:	f85d 7b04 	ldr.w	r7, [sp], #4
   13b9a:	4770      	bx	lr

00013b9c <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   13b9c:	b480      	push	{r7}
   13b9e:	b087      	sub	sp, #28
   13ba0:	af00      	add	r7, sp, #0
   13ba2:	60f8      	str	r0, [r7, #12]
   13ba4:	60b9      	str	r1, [r7, #8]
   13ba6:	4613      	mov	r3, r2
   13ba8:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   13baa:	2300      	movs	r3, #0
   13bac:	82fb      	strh	r3, [r7, #22]
   13bae:	e013      	b.n	13bd8 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   13bb0:	88fb      	ldrh	r3, [r7, #6]
   13bb2:	1e5a      	subs	r2, r3, #1
   13bb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   13bb8:	1ad3      	subs	r3, r2, r3
   13bba:	461a      	mov	r2, r3
   13bbc:	68fb      	ldr	r3, [r7, #12]
   13bbe:	4413      	add	r3, r2
   13bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   13bc4:	68b9      	ldr	r1, [r7, #8]
   13bc6:	440a      	add	r2, r1
   13bc8:	7812      	ldrb	r2, [r2, #0]
   13bca:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   13bcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   13bd0:	b29b      	uxth	r3, r3
   13bd2:	3301      	adds	r3, #1
   13bd4:	b29b      	uxth	r3, r3
   13bd6:	82fb      	strh	r3, [r7, #22]
   13bd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   13bdc:	88fb      	ldrh	r3, [r7, #6]
   13bde:	429a      	cmp	r2, r3
   13be0:	dbe6      	blt.n	13bb0 <WStrReverseCpy+0x14>
  }
}
   13be2:	bf00      	nop
   13be4:	371c      	adds	r7, #28
   13be6:	46bd      	mov	sp, r7
   13be8:	f85d 7b04 	ldr.w	r7, [sp], #4
   13bec:	4770      	bx	lr

00013bee <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   13bee:	b480      	push	{r7}
   13bf0:	b085      	sub	sp, #20
   13bf2:	af00      	add	r7, sp, #0
   13bf4:	6078      	str	r0, [r7, #4]
   13bf6:	460b      	mov	r3, r1
   13bf8:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   13bfa:	2300      	movs	r3, #0
   13bfc:	73fb      	strb	r3, [r7, #15]
   13bfe:	e01a      	b.n	13c36 <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   13c00:	78fa      	ldrb	r2, [r7, #3]
   13c02:	7bfb      	ldrb	r3, [r7, #15]
   13c04:	1ad3      	subs	r3, r2, r3
   13c06:	3b01      	subs	r3, #1
   13c08:	687a      	ldr	r2, [r7, #4]
   13c0a:	4413      	add	r3, r2
   13c0c:	781b      	ldrb	r3, [r3, #0]
   13c0e:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   13c10:	78fa      	ldrb	r2, [r7, #3]
   13c12:	7bfb      	ldrb	r3, [r7, #15]
   13c14:	1ad3      	subs	r3, r2, r3
   13c16:	3b01      	subs	r3, #1
   13c18:	687a      	ldr	r2, [r7, #4]
   13c1a:	4413      	add	r3, r2
   13c1c:	7bfa      	ldrb	r2, [r7, #15]
   13c1e:	6879      	ldr	r1, [r7, #4]
   13c20:	440a      	add	r2, r1
   13c22:	7812      	ldrb	r2, [r2, #0]
   13c24:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   13c26:	7bfb      	ldrb	r3, [r7, #15]
   13c28:	687a      	ldr	r2, [r7, #4]
   13c2a:	4413      	add	r3, r2
   13c2c:	7bba      	ldrb	r2, [r7, #14]
   13c2e:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   13c30:	7bfb      	ldrb	r3, [r7, #15]
   13c32:	3301      	adds	r3, #1
   13c34:	73fb      	strb	r3, [r7, #15]
   13c36:	78fb      	ldrb	r3, [r7, #3]
   13c38:	085b      	lsrs	r3, r3, #1
   13c3a:	b2db      	uxtb	r3, r3
   13c3c:	7bfa      	ldrb	r2, [r7, #15]
   13c3e:	429a      	cmp	r2, r3
   13c40:	d3de      	bcc.n	13c00 <WStrReverse+0x12>
  }
}
   13c42:	bf00      	nop
   13c44:	3714      	adds	r7, #20
   13c46:	46bd      	mov	sp, r7
   13c48:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c4c:	4770      	bx	lr

00013c4e <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   13c4e:	b580      	push	{r7, lr}
   13c50:	b084      	sub	sp, #16
   13c52:	af00      	add	r7, sp, #0
   13c54:	4603      	mov	r3, r0
   13c56:	460a      	mov	r2, r1
   13c58:	80fb      	strh	r3, [r7, #6]
   13c5a:	4613      	mov	r3, r2
   13c5c:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   13c5e:	88bb      	ldrh	r3, [r7, #4]
   13c60:	3303      	adds	r3, #3
   13c62:	b29b      	uxth	r3, r3
   13c64:	4618      	mov	r0, r3
   13c66:	f006 fc3c 	bl	1a4e2 <WsfMsgAlloc>
   13c6a:	60f8      	str	r0, [r7, #12]
   13c6c:	68fb      	ldr	r3, [r7, #12]
   13c6e:	2b00      	cmp	r3, #0
   13c70:	d016      	beq.n	13ca0 <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   13c72:	68fb      	ldr	r3, [r7, #12]
   13c74:	1c5a      	adds	r2, r3, #1
   13c76:	60fa      	str	r2, [r7, #12]
   13c78:	88fa      	ldrh	r2, [r7, #6]
   13c7a:	b2d2      	uxtb	r2, r2
   13c7c:	701a      	strb	r2, [r3, #0]
   13c7e:	68fb      	ldr	r3, [r7, #12]
   13c80:	1c5a      	adds	r2, r3, #1
   13c82:	60fa      	str	r2, [r7, #12]
   13c84:	88fa      	ldrh	r2, [r7, #6]
   13c86:	0a12      	lsrs	r2, r2, #8
   13c88:	b292      	uxth	r2, r2
   13c8a:	b2d2      	uxtb	r2, r2
   13c8c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   13c8e:	68fb      	ldr	r3, [r7, #12]
   13c90:	1c5a      	adds	r2, r3, #1
   13c92:	60fa      	str	r2, [r7, #12]
   13c94:	88ba      	ldrh	r2, [r7, #4]
   13c96:	b2d2      	uxtb	r2, r2
   13c98:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   13c9a:	68fb      	ldr	r3, [r7, #12]
   13c9c:	3b03      	subs	r3, #3
   13c9e:	60fb      	str	r3, [r7, #12]
  }

  return p;
   13ca0:	68fb      	ldr	r3, [r7, #12]
}
   13ca2:	4618      	mov	r0, r3
   13ca4:	3710      	adds	r7, #16
   13ca6:	46bd      	mov	sp, r7
   13ca8:	bd80      	pop	{r7, pc}
	...

00013cac <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   13cac:	b580      	push	{r7, lr}
   13cae:	b084      	sub	sp, #16
   13cb0:	af00      	add	r7, sp, #0
   13cb2:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   13cb4:	687b      	ldr	r3, [r7, #4]
   13cb6:	2b00      	cmp	r3, #0
   13cb8:	d004      	beq.n	13cc4 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   13cba:	687a      	ldr	r2, [r7, #4]
   13cbc:	2100      	movs	r1, #0
   13cbe:	4817      	ldr	r0, [pc, #92]	; (13d1c <hciCmdSend+0x70>)
   13cc0:	f006 fc4b 	bl	1a55a <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   13cc4:	4b16      	ldr	r3, [pc, #88]	; (13d20 <hciCmdSend+0x74>)
   13cc6:	7e9b      	ldrb	r3, [r3, #26]
   13cc8:	2b00      	cmp	r3, #0
   13cca:	d023      	beq.n	13d14 <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   13ccc:	f107 030b 	add.w	r3, r7, #11
   13cd0:	4619      	mov	r1, r3
   13cd2:	4812      	ldr	r0, [pc, #72]	; (13d1c <hciCmdSend+0x70>)
   13cd4:	f006 fc56 	bl	1a584 <WsfMsgDeq>
   13cd8:	60f8      	str	r0, [r7, #12]
   13cda:	68fb      	ldr	r3, [r7, #12]
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d019      	beq.n	13d14 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   13ce0:	4b0f      	ldr	r3, [pc, #60]	; (13d20 <hciCmdSend+0x74>)
   13ce2:	7e9b      	ldrb	r3, [r3, #26]
   13ce4:	3b01      	subs	r3, #1
   13ce6:	b2da      	uxtb	r2, r3
   13ce8:	4b0d      	ldr	r3, [pc, #52]	; (13d20 <hciCmdSend+0x74>)
   13cea:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   13cec:	68fb      	ldr	r3, [r7, #12]
   13cee:	781b      	ldrb	r3, [r3, #0]
   13cf0:	b29a      	uxth	r2, r3
   13cf2:	68fb      	ldr	r3, [r7, #12]
   13cf4:	3301      	adds	r3, #1
   13cf6:	781b      	ldrb	r3, [r3, #0]
   13cf8:	b29b      	uxth	r3, r3
   13cfa:	021b      	lsls	r3, r3, #8
   13cfc:	b29b      	uxth	r3, r3
   13cfe:	4413      	add	r3, r2
   13d00:	b29a      	uxth	r2, r3
   13d02:	4b07      	ldr	r3, [pc, #28]	; (13d20 <hciCmdSend+0x74>)
   13d04:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   13d06:	210a      	movs	r1, #10
   13d08:	4805      	ldr	r0, [pc, #20]	; (13d20 <hciCmdSend+0x74>)
   13d0a:	f006 fda3 	bl	1a854 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   13d0e:	68f8      	ldr	r0, [r7, #12]
   13d10:	f003 facd 	bl	172ae <hciTrSendCmd>
    }
  }
}
   13d14:	bf00      	nop
   13d16:	3710      	adds	r7, #16
   13d18:	46bd      	mov	sp, r7
   13d1a:	bd80      	pop	{r7, pc}
   13d1c:	10009300 	.word	0x10009300
   13d20:	100092f0 	.word	0x100092f0

00013d24 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   13d24:	b480      	push	{r7}
   13d26:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   13d28:	4b0a      	ldr	r3, [pc, #40]	; (13d54 <hciCmdInit+0x30>)
   13d2a:	2200      	movs	r2, #0
   13d2c:	611a      	str	r2, [r3, #16]
   13d2e:	4b09      	ldr	r3, [pc, #36]	; (13d54 <hciCmdInit+0x30>)
   13d30:	2200      	movs	r2, #0
   13d32:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   13d34:	4b07      	ldr	r3, [pc, #28]	; (13d54 <hciCmdInit+0x30>)
   13d36:	2201      	movs	r2, #1
   13d38:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   13d3a:	4b06      	ldr	r3, [pc, #24]	; (13d54 <hciCmdInit+0x30>)
   13d3c:	2201      	movs	r2, #1
   13d3e:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   13d40:	4b05      	ldr	r3, [pc, #20]	; (13d58 <hciCmdInit+0x34>)
   13d42:	7e1a      	ldrb	r2, [r3, #24]
   13d44:	4b03      	ldr	r3, [pc, #12]	; (13d54 <hciCmdInit+0x30>)
   13d46:	721a      	strb	r2, [r3, #8]
}
   13d48:	bf00      	nop
   13d4a:	46bd      	mov	sp, r7
   13d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13d50:	4770      	bx	lr
   13d52:	bf00      	nop
   13d54:	100092f0 	.word	0x100092f0
   13d58:	10009e2c 	.word	0x10009e2c

00013d5c <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   13d5c:	b580      	push	{r7, lr}
   13d5e:	b082      	sub	sp, #8
   13d60:	af00      	add	r7, sp, #0
   13d62:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   13d64:	f005 f9f4 	bl	19150 <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   13d68:	2000      	movs	r0, #0
   13d6a:	f005 f8f7 	bl	18f5c <HciDrvRadioBoot>
  DmDevReset();
   13d6e:	f7fb fe5f 	bl	fa30 <DmDevReset>
}
   13d72:	bf00      	nop
   13d74:	3708      	adds	r7, #8
   13d76:	46bd      	mov	sp, r7
   13d78:	bd80      	pop	{r7, pc}
	...

00013d7c <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   13d7c:	b580      	push	{r7, lr}
   13d7e:	b082      	sub	sp, #8
   13d80:	af00      	add	r7, sp, #0
   13d82:	4603      	mov	r3, r0
   13d84:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   13d86:	4806      	ldr	r0, [pc, #24]	; (13da0 <hciCmdRecvCmpl+0x24>)
   13d88:	f006 fd8a 	bl	1a8a0 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   13d8c:	4b04      	ldr	r3, [pc, #16]	; (13da0 <hciCmdRecvCmpl+0x24>)
   13d8e:	2201      	movs	r2, #1
   13d90:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   13d92:	2000      	movs	r0, #0
   13d94:	f7ff ff8a 	bl	13cac <hciCmdSend>
}
   13d98:	bf00      	nop
   13d9a:	3708      	adds	r7, #8
   13d9c:	46bd      	mov	sp, r7
   13d9e:	bd80      	pop	{r7, pc}
   13da0:	100092f0 	.word	0x100092f0

00013da4 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   13da4:	b580      	push	{r7, lr}
   13da6:	b084      	sub	sp, #16
   13da8:	af00      	add	r7, sp, #0
   13daa:	4603      	mov	r3, r0
   13dac:	460a      	mov	r2, r1
   13dae:	80fb      	strh	r3, [r7, #6]
   13db0:	4613      	mov	r3, r2
   13db2:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   13db4:	2103      	movs	r1, #3
   13db6:	f240 4006 	movw	r0, #1030	; 0x406
   13dba:	f7ff ff48 	bl	13c4e <hciCmdAlloc>
   13dbe:	60f8      	str	r0, [r7, #12]
   13dc0:	68fb      	ldr	r3, [r7, #12]
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	d018      	beq.n	13df8 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13dc6:	68fb      	ldr	r3, [r7, #12]
   13dc8:	3303      	adds	r3, #3
   13dca:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13dcc:	68bb      	ldr	r3, [r7, #8]
   13dce:	1c5a      	adds	r2, r3, #1
   13dd0:	60ba      	str	r2, [r7, #8]
   13dd2:	88fa      	ldrh	r2, [r7, #6]
   13dd4:	b2d2      	uxtb	r2, r2
   13dd6:	701a      	strb	r2, [r3, #0]
   13dd8:	68bb      	ldr	r3, [r7, #8]
   13dda:	1c5a      	adds	r2, r3, #1
   13ddc:	60ba      	str	r2, [r7, #8]
   13dde:	88fa      	ldrh	r2, [r7, #6]
   13de0:	0a12      	lsrs	r2, r2, #8
   13de2:	b292      	uxth	r2, r2
   13de4:	b2d2      	uxtb	r2, r2
   13de6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   13de8:	68bb      	ldr	r3, [r7, #8]
   13dea:	1c5a      	adds	r2, r3, #1
   13dec:	60ba      	str	r2, [r7, #8]
   13dee:	797a      	ldrb	r2, [r7, #5]
   13df0:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13df2:	68f8      	ldr	r0, [r7, #12]
   13df4:	f7ff ff5a 	bl	13cac <hciCmdSend>
  }
}
   13df8:	bf00      	nop
   13dfa:	3710      	adds	r7, #16
   13dfc:	46bd      	mov	sp, r7
   13dfe:	bd80      	pop	{r7, pc}

00013e00 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   13e00:	b580      	push	{r7, lr}
   13e02:	b084      	sub	sp, #16
   13e04:	af00      	add	r7, sp, #0
   13e06:	4603      	mov	r3, r0
   13e08:	6039      	str	r1, [r7, #0]
   13e0a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   13e0c:	2107      	movs	r1, #7
   13e0e:	f242 0011 	movw	r0, #8209	; 0x2011
   13e12:	f7ff ff1c 	bl	13c4e <hciCmdAlloc>
   13e16:	60f8      	str	r0, [r7, #12]
   13e18:	68fb      	ldr	r3, [r7, #12]
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	d011      	beq.n	13e42 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13e1e:	68fb      	ldr	r3, [r7, #12]
   13e20:	3303      	adds	r3, #3
   13e22:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   13e24:	68bb      	ldr	r3, [r7, #8]
   13e26:	1c5a      	adds	r2, r3, #1
   13e28:	60ba      	str	r2, [r7, #8]
   13e2a:	79fa      	ldrb	r2, [r7, #7]
   13e2c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   13e2e:	6839      	ldr	r1, [r7, #0]
   13e30:	68b8      	ldr	r0, [r7, #8]
   13e32:	f7ff fe2d 	bl	13a90 <BdaCpy>
   13e36:	68bb      	ldr	r3, [r7, #8]
   13e38:	3306      	adds	r3, #6
   13e3a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   13e3c:	68f8      	ldr	r0, [r7, #12]
   13e3e:	f7ff ff35 	bl	13cac <hciCmdSend>
  }
}
   13e42:	bf00      	nop
   13e44:	3710      	adds	r7, #16
   13e46:	46bd      	mov	sp, r7
   13e48:	bd80      	pop	{r7, pc}

00013e4a <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   13e4a:	b580      	push	{r7, lr}
   13e4c:	b082      	sub	sp, #8
   13e4e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   13e50:	2100      	movs	r1, #0
   13e52:	f242 0010 	movw	r0, #8208	; 0x2010
   13e56:	f7ff fefa 	bl	13c4e <hciCmdAlloc>
   13e5a:	6078      	str	r0, [r7, #4]
   13e5c:	687b      	ldr	r3, [r7, #4]
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d002      	beq.n	13e68 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   13e62:	6878      	ldr	r0, [r7, #4]
   13e64:	f7ff ff22 	bl	13cac <hciCmdSend>
  }
}
   13e68:	bf00      	nop
   13e6a:	3708      	adds	r7, #8
   13e6c:	46bd      	mov	sp, r7
   13e6e:	bd80      	pop	{r7, pc}

00013e70 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   13e70:	b580      	push	{r7, lr}
   13e72:	b084      	sub	sp, #16
   13e74:	af00      	add	r7, sp, #0
   13e76:	4603      	mov	r3, r0
   13e78:	6039      	str	r1, [r7, #0]
   13e7a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   13e7c:	210e      	movs	r1, #14
   13e7e:	f242 0013 	movw	r0, #8211	; 0x2013
   13e82:	f7ff fee4 	bl	13c4e <hciCmdAlloc>
   13e86:	60f8      	str	r0, [r7, #12]
   13e88:	68fb      	ldr	r3, [r7, #12]
   13e8a:	2b00      	cmp	r3, #0
   13e8c:	d073      	beq.n	13f76 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13e8e:	68fb      	ldr	r3, [r7, #12]
   13e90:	3303      	adds	r3, #3
   13e92:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13e94:	68bb      	ldr	r3, [r7, #8]
   13e96:	1c5a      	adds	r2, r3, #1
   13e98:	60ba      	str	r2, [r7, #8]
   13e9a:	88fa      	ldrh	r2, [r7, #6]
   13e9c:	b2d2      	uxtb	r2, r2
   13e9e:	701a      	strb	r2, [r3, #0]
   13ea0:	68bb      	ldr	r3, [r7, #8]
   13ea2:	1c5a      	adds	r2, r3, #1
   13ea4:	60ba      	str	r2, [r7, #8]
   13ea6:	88fa      	ldrh	r2, [r7, #6]
   13ea8:	0a12      	lsrs	r2, r2, #8
   13eaa:	b292      	uxth	r2, r2
   13eac:	b2d2      	uxtb	r2, r2
   13eae:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   13eb0:	68bb      	ldr	r3, [r7, #8]
   13eb2:	1c5a      	adds	r2, r3, #1
   13eb4:	60ba      	str	r2, [r7, #8]
   13eb6:	683a      	ldr	r2, [r7, #0]
   13eb8:	8812      	ldrh	r2, [r2, #0]
   13eba:	b2d2      	uxtb	r2, r2
   13ebc:	701a      	strb	r2, [r3, #0]
   13ebe:	68bb      	ldr	r3, [r7, #8]
   13ec0:	1c5a      	adds	r2, r3, #1
   13ec2:	60ba      	str	r2, [r7, #8]
   13ec4:	683a      	ldr	r2, [r7, #0]
   13ec6:	8812      	ldrh	r2, [r2, #0]
   13ec8:	0a12      	lsrs	r2, r2, #8
   13eca:	b292      	uxth	r2, r2
   13ecc:	b2d2      	uxtb	r2, r2
   13ece:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   13ed0:	68bb      	ldr	r3, [r7, #8]
   13ed2:	1c5a      	adds	r2, r3, #1
   13ed4:	60ba      	str	r2, [r7, #8]
   13ed6:	683a      	ldr	r2, [r7, #0]
   13ed8:	8852      	ldrh	r2, [r2, #2]
   13eda:	b2d2      	uxtb	r2, r2
   13edc:	701a      	strb	r2, [r3, #0]
   13ede:	68bb      	ldr	r3, [r7, #8]
   13ee0:	1c5a      	adds	r2, r3, #1
   13ee2:	60ba      	str	r2, [r7, #8]
   13ee4:	683a      	ldr	r2, [r7, #0]
   13ee6:	8852      	ldrh	r2, [r2, #2]
   13ee8:	0a12      	lsrs	r2, r2, #8
   13eea:	b292      	uxth	r2, r2
   13eec:	b2d2      	uxtb	r2, r2
   13eee:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   13ef0:	68bb      	ldr	r3, [r7, #8]
   13ef2:	1c5a      	adds	r2, r3, #1
   13ef4:	60ba      	str	r2, [r7, #8]
   13ef6:	683a      	ldr	r2, [r7, #0]
   13ef8:	8892      	ldrh	r2, [r2, #4]
   13efa:	b2d2      	uxtb	r2, r2
   13efc:	701a      	strb	r2, [r3, #0]
   13efe:	68bb      	ldr	r3, [r7, #8]
   13f00:	1c5a      	adds	r2, r3, #1
   13f02:	60ba      	str	r2, [r7, #8]
   13f04:	683a      	ldr	r2, [r7, #0]
   13f06:	8892      	ldrh	r2, [r2, #4]
   13f08:	0a12      	lsrs	r2, r2, #8
   13f0a:	b292      	uxth	r2, r2
   13f0c:	b2d2      	uxtb	r2, r2
   13f0e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   13f10:	68bb      	ldr	r3, [r7, #8]
   13f12:	1c5a      	adds	r2, r3, #1
   13f14:	60ba      	str	r2, [r7, #8]
   13f16:	683a      	ldr	r2, [r7, #0]
   13f18:	88d2      	ldrh	r2, [r2, #6]
   13f1a:	b2d2      	uxtb	r2, r2
   13f1c:	701a      	strb	r2, [r3, #0]
   13f1e:	68bb      	ldr	r3, [r7, #8]
   13f20:	1c5a      	adds	r2, r3, #1
   13f22:	60ba      	str	r2, [r7, #8]
   13f24:	683a      	ldr	r2, [r7, #0]
   13f26:	88d2      	ldrh	r2, [r2, #6]
   13f28:	0a12      	lsrs	r2, r2, #8
   13f2a:	b292      	uxth	r2, r2
   13f2c:	b2d2      	uxtb	r2, r2
   13f2e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   13f30:	68bb      	ldr	r3, [r7, #8]
   13f32:	1c5a      	adds	r2, r3, #1
   13f34:	60ba      	str	r2, [r7, #8]
   13f36:	683a      	ldr	r2, [r7, #0]
   13f38:	8912      	ldrh	r2, [r2, #8]
   13f3a:	b2d2      	uxtb	r2, r2
   13f3c:	701a      	strb	r2, [r3, #0]
   13f3e:	68bb      	ldr	r3, [r7, #8]
   13f40:	1c5a      	adds	r2, r3, #1
   13f42:	60ba      	str	r2, [r7, #8]
   13f44:	683a      	ldr	r2, [r7, #0]
   13f46:	8912      	ldrh	r2, [r2, #8]
   13f48:	0a12      	lsrs	r2, r2, #8
   13f4a:	b292      	uxth	r2, r2
   13f4c:	b2d2      	uxtb	r2, r2
   13f4e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   13f50:	68bb      	ldr	r3, [r7, #8]
   13f52:	1c5a      	adds	r2, r3, #1
   13f54:	60ba      	str	r2, [r7, #8]
   13f56:	683a      	ldr	r2, [r7, #0]
   13f58:	8952      	ldrh	r2, [r2, #10]
   13f5a:	b2d2      	uxtb	r2, r2
   13f5c:	701a      	strb	r2, [r3, #0]
   13f5e:	68bb      	ldr	r3, [r7, #8]
   13f60:	1c5a      	adds	r2, r3, #1
   13f62:	60ba      	str	r2, [r7, #8]
   13f64:	683a      	ldr	r2, [r7, #0]
   13f66:	8952      	ldrh	r2, [r2, #10]
   13f68:	0a12      	lsrs	r2, r2, #8
   13f6a:	b292      	uxth	r2, r2
   13f6c:	b2d2      	uxtb	r2, r2
   13f6e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13f70:	68f8      	ldr	r0, [r7, #12]
   13f72:	f7ff fe9b 	bl	13cac <hciCmdSend>
  }
}
   13f76:	bf00      	nop
   13f78:	3710      	adds	r7, #16
   13f7a:	46bd      	mov	sp, r7
   13f7c:	bd80      	pop	{r7, pc}

00013f7e <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   13f7e:	b590      	push	{r4, r7, lr}
   13f80:	b085      	sub	sp, #20
   13f82:	af00      	add	r7, sp, #0
   13f84:	4604      	mov	r4, r0
   13f86:	4608      	mov	r0, r1
   13f88:	4611      	mov	r1, r2
   13f8a:	461a      	mov	r2, r3
   13f8c:	4623      	mov	r3, r4
   13f8e:	80fb      	strh	r3, [r7, #6]
   13f90:	4603      	mov	r3, r0
   13f92:	80bb      	strh	r3, [r7, #4]
   13f94:	460b      	mov	r3, r1
   13f96:	807b      	strh	r3, [r7, #2]
   13f98:	4613      	mov	r3, r2
   13f9a:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   13f9c:	210e      	movs	r1, #14
   13f9e:	f242 0020 	movw	r0, #8224	; 0x2020
   13fa2:	f7ff fe54 	bl	13c4e <hciCmdAlloc>
   13fa6:	60f8      	str	r0, [r7, #12]
   13fa8:	68fb      	ldr	r3, [r7, #12]
   13faa:	2b00      	cmp	r3, #0
   13fac:	d067      	beq.n	1407e <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13fae:	68fb      	ldr	r3, [r7, #12]
   13fb0:	3303      	adds	r3, #3
   13fb2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13fb4:	68bb      	ldr	r3, [r7, #8]
   13fb6:	1c5a      	adds	r2, r3, #1
   13fb8:	60ba      	str	r2, [r7, #8]
   13fba:	88fa      	ldrh	r2, [r7, #6]
   13fbc:	b2d2      	uxtb	r2, r2
   13fbe:	701a      	strb	r2, [r3, #0]
   13fc0:	68bb      	ldr	r3, [r7, #8]
   13fc2:	1c5a      	adds	r2, r3, #1
   13fc4:	60ba      	str	r2, [r7, #8]
   13fc6:	88fa      	ldrh	r2, [r7, #6]
   13fc8:	0a12      	lsrs	r2, r2, #8
   13fca:	b292      	uxth	r2, r2
   13fcc:	b2d2      	uxtb	r2, r2
   13fce:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   13fd0:	68bb      	ldr	r3, [r7, #8]
   13fd2:	1c5a      	adds	r2, r3, #1
   13fd4:	60ba      	str	r2, [r7, #8]
   13fd6:	88ba      	ldrh	r2, [r7, #4]
   13fd8:	b2d2      	uxtb	r2, r2
   13fda:	701a      	strb	r2, [r3, #0]
   13fdc:	68bb      	ldr	r3, [r7, #8]
   13fde:	1c5a      	adds	r2, r3, #1
   13fe0:	60ba      	str	r2, [r7, #8]
   13fe2:	88ba      	ldrh	r2, [r7, #4]
   13fe4:	0a12      	lsrs	r2, r2, #8
   13fe6:	b292      	uxth	r2, r2
   13fe8:	b2d2      	uxtb	r2, r2
   13fea:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   13fec:	68bb      	ldr	r3, [r7, #8]
   13fee:	1c5a      	adds	r2, r3, #1
   13ff0:	60ba      	str	r2, [r7, #8]
   13ff2:	887a      	ldrh	r2, [r7, #2]
   13ff4:	b2d2      	uxtb	r2, r2
   13ff6:	701a      	strb	r2, [r3, #0]
   13ff8:	68bb      	ldr	r3, [r7, #8]
   13ffa:	1c5a      	adds	r2, r3, #1
   13ffc:	60ba      	str	r2, [r7, #8]
   13ffe:	887a      	ldrh	r2, [r7, #2]
   14000:	0a12      	lsrs	r2, r2, #8
   14002:	b292      	uxth	r2, r2
   14004:	b2d2      	uxtb	r2, r2
   14006:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   14008:	68bb      	ldr	r3, [r7, #8]
   1400a:	1c5a      	adds	r2, r3, #1
   1400c:	60ba      	str	r2, [r7, #8]
   1400e:	883a      	ldrh	r2, [r7, #0]
   14010:	b2d2      	uxtb	r2, r2
   14012:	701a      	strb	r2, [r3, #0]
   14014:	68bb      	ldr	r3, [r7, #8]
   14016:	1c5a      	adds	r2, r3, #1
   14018:	60ba      	str	r2, [r7, #8]
   1401a:	883a      	ldrh	r2, [r7, #0]
   1401c:	0a12      	lsrs	r2, r2, #8
   1401e:	b292      	uxth	r2, r2
   14020:	b2d2      	uxtb	r2, r2
   14022:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   14024:	68bb      	ldr	r3, [r7, #8]
   14026:	1c5a      	adds	r2, r3, #1
   14028:	60ba      	str	r2, [r7, #8]
   1402a:	8c3a      	ldrh	r2, [r7, #32]
   1402c:	b2d2      	uxtb	r2, r2
   1402e:	701a      	strb	r2, [r3, #0]
   14030:	68bb      	ldr	r3, [r7, #8]
   14032:	1c5a      	adds	r2, r3, #1
   14034:	60ba      	str	r2, [r7, #8]
   14036:	8c3a      	ldrh	r2, [r7, #32]
   14038:	0a12      	lsrs	r2, r2, #8
   1403a:	b292      	uxth	r2, r2
   1403c:	b2d2      	uxtb	r2, r2
   1403e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   14040:	68bb      	ldr	r3, [r7, #8]
   14042:	1c5a      	adds	r2, r3, #1
   14044:	60ba      	str	r2, [r7, #8]
   14046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   14048:	b2d2      	uxtb	r2, r2
   1404a:	701a      	strb	r2, [r3, #0]
   1404c:	68bb      	ldr	r3, [r7, #8]
   1404e:	1c5a      	adds	r2, r3, #1
   14050:	60ba      	str	r2, [r7, #8]
   14052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   14054:	0a12      	lsrs	r2, r2, #8
   14056:	b292      	uxth	r2, r2
   14058:	b2d2      	uxtb	r2, r2
   1405a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   1405c:	68bb      	ldr	r3, [r7, #8]
   1405e:	1c5a      	adds	r2, r3, #1
   14060:	60ba      	str	r2, [r7, #8]
   14062:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   14064:	b2d2      	uxtb	r2, r2
   14066:	701a      	strb	r2, [r3, #0]
   14068:	68bb      	ldr	r3, [r7, #8]
   1406a:	1c5a      	adds	r2, r3, #1
   1406c:	60ba      	str	r2, [r7, #8]
   1406e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   14070:	0a12      	lsrs	r2, r2, #8
   14072:	b292      	uxth	r2, r2
   14074:	b2d2      	uxtb	r2, r2
   14076:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14078:	68f8      	ldr	r0, [r7, #12]
   1407a:	f7ff fe17 	bl	13cac <hciCmdSend>
  }
}
   1407e:	bf00      	nop
   14080:	3714      	adds	r7, #20
   14082:	46bd      	mov	sp, r7
   14084:	bd90      	pop	{r4, r7, pc}

00014086 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   14086:	b580      	push	{r7, lr}
   14088:	b084      	sub	sp, #16
   1408a:	af00      	add	r7, sp, #0
   1408c:	4603      	mov	r3, r0
   1408e:	460a      	mov	r2, r1
   14090:	80fb      	strh	r3, [r7, #6]
   14092:	4613      	mov	r3, r2
   14094:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   14096:	2103      	movs	r1, #3
   14098:	f242 0021 	movw	r0, #8225	; 0x2021
   1409c:	f7ff fdd7 	bl	13c4e <hciCmdAlloc>
   140a0:	60f8      	str	r0, [r7, #12]
   140a2:	68fb      	ldr	r3, [r7, #12]
   140a4:	2b00      	cmp	r3, #0
   140a6:	d018      	beq.n	140da <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   140a8:	68fb      	ldr	r3, [r7, #12]
   140aa:	3303      	adds	r3, #3
   140ac:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   140ae:	68bb      	ldr	r3, [r7, #8]
   140b0:	1c5a      	adds	r2, r3, #1
   140b2:	60ba      	str	r2, [r7, #8]
   140b4:	88fa      	ldrh	r2, [r7, #6]
   140b6:	b2d2      	uxtb	r2, r2
   140b8:	701a      	strb	r2, [r3, #0]
   140ba:	68bb      	ldr	r3, [r7, #8]
   140bc:	1c5a      	adds	r2, r3, #1
   140be:	60ba      	str	r2, [r7, #8]
   140c0:	88fa      	ldrh	r2, [r7, #6]
   140c2:	0a12      	lsrs	r2, r2, #8
   140c4:	b292      	uxth	r2, r2
   140c6:	b2d2      	uxtb	r2, r2
   140c8:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   140ca:	68bb      	ldr	r3, [r7, #8]
   140cc:	1c5a      	adds	r2, r3, #1
   140ce:	60ba      	str	r2, [r7, #8]
   140d0:	797a      	ldrb	r2, [r7, #5]
   140d2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   140d4:	68f8      	ldr	r0, [r7, #12]
   140d6:	f7ff fde9 	bl	13cac <hciCmdSend>
  }
}
   140da:	bf00      	nop
   140dc:	3710      	adds	r7, #16
   140de:	46bd      	mov	sp, r7
   140e0:	bd80      	pop	{r7, pc}

000140e2 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   140e2:	b580      	push	{r7, lr}
   140e4:	b084      	sub	sp, #16
   140e6:	af00      	add	r7, sp, #0
   140e8:	4603      	mov	r3, r0
   140ea:	80fb      	strh	r3, [r7, #6]
   140ec:	460b      	mov	r3, r1
   140ee:	80bb      	strh	r3, [r7, #4]
   140f0:	4613      	mov	r3, r2
   140f2:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   140f4:	2106      	movs	r1, #6
   140f6:	f242 0022 	movw	r0, #8226	; 0x2022
   140fa:	f7ff fda8 	bl	13c4e <hciCmdAlloc>
   140fe:	60f8      	str	r0, [r7, #12]
   14100:	68fb      	ldr	r3, [r7, #12]
   14102:	2b00      	cmp	r3, #0
   14104:	d02f      	beq.n	14166 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14106:	68fb      	ldr	r3, [r7, #12]
   14108:	3303      	adds	r3, #3
   1410a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1410c:	68bb      	ldr	r3, [r7, #8]
   1410e:	1c5a      	adds	r2, r3, #1
   14110:	60ba      	str	r2, [r7, #8]
   14112:	88fa      	ldrh	r2, [r7, #6]
   14114:	b2d2      	uxtb	r2, r2
   14116:	701a      	strb	r2, [r3, #0]
   14118:	68bb      	ldr	r3, [r7, #8]
   1411a:	1c5a      	adds	r2, r3, #1
   1411c:	60ba      	str	r2, [r7, #8]
   1411e:	88fa      	ldrh	r2, [r7, #6]
   14120:	0a12      	lsrs	r2, r2, #8
   14122:	b292      	uxth	r2, r2
   14124:	b2d2      	uxtb	r2, r2
   14126:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   14128:	68bb      	ldr	r3, [r7, #8]
   1412a:	1c5a      	adds	r2, r3, #1
   1412c:	60ba      	str	r2, [r7, #8]
   1412e:	88ba      	ldrh	r2, [r7, #4]
   14130:	b2d2      	uxtb	r2, r2
   14132:	701a      	strb	r2, [r3, #0]
   14134:	68bb      	ldr	r3, [r7, #8]
   14136:	1c5a      	adds	r2, r3, #1
   14138:	60ba      	str	r2, [r7, #8]
   1413a:	88ba      	ldrh	r2, [r7, #4]
   1413c:	0a12      	lsrs	r2, r2, #8
   1413e:	b292      	uxth	r2, r2
   14140:	b2d2      	uxtb	r2, r2
   14142:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   14144:	68bb      	ldr	r3, [r7, #8]
   14146:	1c5a      	adds	r2, r3, #1
   14148:	60ba      	str	r2, [r7, #8]
   1414a:	887a      	ldrh	r2, [r7, #2]
   1414c:	b2d2      	uxtb	r2, r2
   1414e:	701a      	strb	r2, [r3, #0]
   14150:	68bb      	ldr	r3, [r7, #8]
   14152:	1c5a      	adds	r2, r3, #1
   14154:	60ba      	str	r2, [r7, #8]
   14156:	887a      	ldrh	r2, [r7, #2]
   14158:	0a12      	lsrs	r2, r2, #8
   1415a:	b292      	uxth	r2, r2
   1415c:	b2d2      	uxtb	r2, r2
   1415e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14160:	68f8      	ldr	r0, [r7, #12]
   14162:	f7ff fda3 	bl	13cac <hciCmdSend>
  }
}
   14166:	bf00      	nop
   14168:	3710      	adds	r7, #16
   1416a:	46bd      	mov	sp, r7
   1416c:	bd80      	pop	{r7, pc}

0001416e <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   1416e:	b580      	push	{r7, lr}
   14170:	b084      	sub	sp, #16
   14172:	af00      	add	r7, sp, #0
   14174:	4603      	mov	r3, r0
   14176:	460a      	mov	r2, r1
   14178:	80fb      	strh	r3, [r7, #6]
   1417a:	4613      	mov	r3, r2
   1417c:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   1417e:	2104      	movs	r1, #4
   14180:	f242 0024 	movw	r0, #8228	; 0x2024
   14184:	f7ff fd63 	bl	13c4e <hciCmdAlloc>
   14188:	60f8      	str	r0, [r7, #12]
   1418a:	68fb      	ldr	r3, [r7, #12]
   1418c:	2b00      	cmp	r3, #0
   1418e:	d021      	beq.n	141d4 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14190:	68fb      	ldr	r3, [r7, #12]
   14192:	3303      	adds	r3, #3
   14194:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   14196:	68bb      	ldr	r3, [r7, #8]
   14198:	1c5a      	adds	r2, r3, #1
   1419a:	60ba      	str	r2, [r7, #8]
   1419c:	88fa      	ldrh	r2, [r7, #6]
   1419e:	b2d2      	uxtb	r2, r2
   141a0:	701a      	strb	r2, [r3, #0]
   141a2:	68bb      	ldr	r3, [r7, #8]
   141a4:	1c5a      	adds	r2, r3, #1
   141a6:	60ba      	str	r2, [r7, #8]
   141a8:	88fa      	ldrh	r2, [r7, #6]
   141aa:	0a12      	lsrs	r2, r2, #8
   141ac:	b292      	uxth	r2, r2
   141ae:	b2d2      	uxtb	r2, r2
   141b0:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   141b2:	68bb      	ldr	r3, [r7, #8]
   141b4:	1c5a      	adds	r2, r3, #1
   141b6:	60ba      	str	r2, [r7, #8]
   141b8:	88ba      	ldrh	r2, [r7, #4]
   141ba:	b2d2      	uxtb	r2, r2
   141bc:	701a      	strb	r2, [r3, #0]
   141be:	68bb      	ldr	r3, [r7, #8]
   141c0:	1c5a      	adds	r2, r3, #1
   141c2:	60ba      	str	r2, [r7, #8]
   141c4:	88ba      	ldrh	r2, [r7, #4]
   141c6:	0a12      	lsrs	r2, r2, #8
   141c8:	b292      	uxth	r2, r2
   141ca:	b2d2      	uxtb	r2, r2
   141cc:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   141ce:	68f8      	ldr	r0, [r7, #12]
   141d0:	f7ff fd6c 	bl	13cac <hciCmdSend>
  }
}
   141d4:	bf00      	nop
   141d6:	3710      	adds	r7, #16
   141d8:	46bd      	mov	sp, r7
   141da:	bd80      	pop	{r7, pc}

000141dc <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   141dc:	b580      	push	{r7, lr}
   141de:	b082      	sub	sp, #8
   141e0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   141e2:	2100      	movs	r1, #0
   141e4:	f242 0025 	movw	r0, #8229	; 0x2025
   141e8:	f7ff fd31 	bl	13c4e <hciCmdAlloc>
   141ec:	6078      	str	r0, [r7, #4]
   141ee:	687b      	ldr	r3, [r7, #4]
   141f0:	2b00      	cmp	r3, #0
   141f2:	d002      	beq.n	141fa <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   141f4:	6878      	ldr	r0, [r7, #4]
   141f6:	f7ff fd59 	bl	13cac <hciCmdSend>
  }
}
   141fa:	bf00      	nop
   141fc:	3708      	adds	r7, #8
   141fe:	46bd      	mov	sp, r7
   14200:	bd80      	pop	{r7, pc}

00014202 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   14202:	b580      	push	{r7, lr}
   14204:	b084      	sub	sp, #16
   14206:	af00      	add	r7, sp, #0
   14208:	6078      	str	r0, [r7, #4]
   1420a:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   1420c:	2140      	movs	r1, #64	; 0x40
   1420e:	f242 0026 	movw	r0, #8230	; 0x2026
   14212:	f7ff fd1c 	bl	13c4e <hciCmdAlloc>
   14216:	60f8      	str	r0, [r7, #12]
   14218:	68fb      	ldr	r3, [r7, #12]
   1421a:	2b00      	cmp	r3, #0
   1421c:	d011      	beq.n	14242 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1421e:	68fb      	ldr	r3, [r7, #12]
   14220:	3303      	adds	r3, #3
   14222:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   14224:	2220      	movs	r2, #32
   14226:	6879      	ldr	r1, [r7, #4]
   14228:	68b8      	ldr	r0, [r7, #8]
   1422a:	f7f7 ff99 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   1422e:	68bb      	ldr	r3, [r7, #8]
   14230:	3320      	adds	r3, #32
   14232:	2220      	movs	r2, #32
   14234:	6839      	ldr	r1, [r7, #0]
   14236:	4618      	mov	r0, r3
   14238:	f7f7 ff92 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1423c:	68f8      	ldr	r0, [r7, #12]
   1423e:	f7ff fd35 	bl	13cac <hciCmdSend>
  }
}
   14242:	bf00      	nop
   14244:	3710      	adds	r7, #16
   14246:	46bd      	mov	sp, r7
   14248:	bd80      	pop	{r7, pc}

0001424a <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   1424a:	b580      	push	{r7, lr}
   1424c:	b082      	sub	sp, #8
   1424e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   14250:	2100      	movs	r1, #0
   14252:	f242 002f 	movw	r0, #8239	; 0x202f
   14256:	f7ff fcfa 	bl	13c4e <hciCmdAlloc>
   1425a:	6078      	str	r0, [r7, #4]
   1425c:	687b      	ldr	r3, [r7, #4]
   1425e:	2b00      	cmp	r3, #0
   14260:	d002      	beq.n	14268 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   14262:	6878      	ldr	r0, [r7, #4]
   14264:	f7ff fd22 	bl	13cac <hciCmdSend>
  }
}
   14268:	bf00      	nop
   1426a:	3708      	adds	r7, #8
   1426c:	46bd      	mov	sp, r7
   1426e:	bd80      	pop	{r7, pc}

00014270 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   14270:	b580      	push	{r7, lr}
   14272:	b084      	sub	sp, #16
   14274:	af00      	add	r7, sp, #0
   14276:	6078      	str	r0, [r7, #4]
   14278:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   1427a:	2120      	movs	r1, #32
   1427c:	f242 0017 	movw	r0, #8215	; 0x2017
   14280:	f7ff fce5 	bl	13c4e <hciCmdAlloc>
   14284:	60f8      	str	r0, [r7, #12]
   14286:	68fb      	ldr	r3, [r7, #12]
   14288:	2b00      	cmp	r3, #0
   1428a:	d012      	beq.n	142b2 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1428c:	68fb      	ldr	r3, [r7, #12]
   1428e:	3303      	adds	r3, #3
   14290:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   14292:	2210      	movs	r2, #16
   14294:	6879      	ldr	r1, [r7, #4]
   14296:	68b8      	ldr	r0, [r7, #8]
   14298:	f7f7 ff62 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   1429c:	68bb      	ldr	r3, [r7, #8]
   1429e:	3310      	adds	r3, #16
   142a0:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   142a2:	2210      	movs	r2, #16
   142a4:	6839      	ldr	r1, [r7, #0]
   142a6:	68b8      	ldr	r0, [r7, #8]
   142a8:	f7f7 ff5a 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   142ac:	68f8      	ldr	r0, [r7, #12]
   142ae:	f7ff fcfd 	bl	13cac <hciCmdSend>
  }
}
   142b2:	bf00      	nop
   142b4:	3710      	adds	r7, #16
   142b6:	46bd      	mov	sp, r7
   142b8:	bd80      	pop	{r7, pc}

000142ba <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   142ba:	b580      	push	{r7, lr}
   142bc:	b084      	sub	sp, #16
   142be:	af00      	add	r7, sp, #0
   142c0:	4603      	mov	r3, r0
   142c2:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   142c4:	2102      	movs	r1, #2
   142c6:	f242 001b 	movw	r0, #8219	; 0x201b
   142ca:	f7ff fcc0 	bl	13c4e <hciCmdAlloc>
   142ce:	60f8      	str	r0, [r7, #12]
   142d0:	68fb      	ldr	r3, [r7, #12]
   142d2:	2b00      	cmp	r3, #0
   142d4:	d013      	beq.n	142fe <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   142d6:	68fb      	ldr	r3, [r7, #12]
   142d8:	3303      	adds	r3, #3
   142da:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   142dc:	68bb      	ldr	r3, [r7, #8]
   142de:	1c5a      	adds	r2, r3, #1
   142e0:	60ba      	str	r2, [r7, #8]
   142e2:	88fa      	ldrh	r2, [r7, #6]
   142e4:	b2d2      	uxtb	r2, r2
   142e6:	701a      	strb	r2, [r3, #0]
   142e8:	68bb      	ldr	r3, [r7, #8]
   142ea:	1c5a      	adds	r2, r3, #1
   142ec:	60ba      	str	r2, [r7, #8]
   142ee:	88fa      	ldrh	r2, [r7, #6]
   142f0:	0a12      	lsrs	r2, r2, #8
   142f2:	b292      	uxth	r2, r2
   142f4:	b2d2      	uxtb	r2, r2
   142f6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   142f8:	68f8      	ldr	r0, [r7, #12]
   142fa:	f7ff fcd7 	bl	13cac <hciCmdSend>
  }
}
   142fe:	bf00      	nop
   14300:	3710      	adds	r7, #16
   14302:	46bd      	mov	sp, r7
   14304:	bd80      	pop	{r7, pc}

00014306 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   14306:	b580      	push	{r7, lr}
   14308:	b084      	sub	sp, #16
   1430a:	af00      	add	r7, sp, #0
   1430c:	4603      	mov	r3, r0
   1430e:	6039      	str	r1, [r7, #0]
   14310:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   14312:	2112      	movs	r1, #18
   14314:	f242 001a 	movw	r0, #8218	; 0x201a
   14318:	f7ff fc99 	bl	13c4e <hciCmdAlloc>
   1431c:	60f8      	str	r0, [r7, #12]
   1431e:	68fb      	ldr	r3, [r7, #12]
   14320:	2b00      	cmp	r3, #0
   14322:	d018      	beq.n	14356 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14324:	68fb      	ldr	r3, [r7, #12]
   14326:	3303      	adds	r3, #3
   14328:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1432a:	68bb      	ldr	r3, [r7, #8]
   1432c:	1c5a      	adds	r2, r3, #1
   1432e:	60ba      	str	r2, [r7, #8]
   14330:	88fa      	ldrh	r2, [r7, #6]
   14332:	b2d2      	uxtb	r2, r2
   14334:	701a      	strb	r2, [r3, #0]
   14336:	68bb      	ldr	r3, [r7, #8]
   14338:	1c5a      	adds	r2, r3, #1
   1433a:	60ba      	str	r2, [r7, #8]
   1433c:	88fa      	ldrh	r2, [r7, #6]
   1433e:	0a12      	lsrs	r2, r2, #8
   14340:	b292      	uxth	r2, r2
   14342:	b2d2      	uxtb	r2, r2
   14344:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14346:	2210      	movs	r2, #16
   14348:	6839      	ldr	r1, [r7, #0]
   1434a:	68b8      	ldr	r0, [r7, #8]
   1434c:	f7f7 ff08 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14350:	68f8      	ldr	r0, [r7, #12]
   14352:	f7ff fcab 	bl	13cac <hciCmdSend>
  }
}
   14356:	bf00      	nop
   14358:	3710      	adds	r7, #16
   1435a:	46bd      	mov	sp, r7
   1435c:	bd80      	pop	{r7, pc}

0001435e <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   1435e:	b580      	push	{r7, lr}
   14360:	b082      	sub	sp, #8
   14362:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   14364:	2100      	movs	r1, #0
   14366:	f242 0018 	movw	r0, #8216	; 0x2018
   1436a:	f7ff fc70 	bl	13c4e <hciCmdAlloc>
   1436e:	6078      	str	r0, [r7, #4]
   14370:	687b      	ldr	r3, [r7, #4]
   14372:	2b00      	cmp	r3, #0
   14374:	d002      	beq.n	1437c <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14376:	6878      	ldr	r0, [r7, #4]
   14378:	f7ff fc98 	bl	13cac <hciCmdSend>
  }
}
   1437c:	bf00      	nop
   1437e:	3708      	adds	r7, #8
   14380:	46bd      	mov	sp, r7
   14382:	bd80      	pop	{r7, pc}

00014384 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   14384:	b580      	push	{r7, lr}
   14386:	b082      	sub	sp, #8
   14388:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   1438a:	2100      	movs	r1, #0
   1438c:	f242 0002 	movw	r0, #8194	; 0x2002
   14390:	f7ff fc5d 	bl	13c4e <hciCmdAlloc>
   14394:	6078      	str	r0, [r7, #4]
   14396:	687b      	ldr	r3, [r7, #4]
   14398:	2b00      	cmp	r3, #0
   1439a:	d002      	beq.n	143a2 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1439c:	6878      	ldr	r0, [r7, #4]
   1439e:	f7ff fc85 	bl	13cac <hciCmdSend>
  }
}
   143a2:	bf00      	nop
   143a4:	3708      	adds	r7, #8
   143a6:	46bd      	mov	sp, r7
   143a8:	bd80      	pop	{r7, pc}

000143aa <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   143aa:	b580      	push	{r7, lr}
   143ac:	b082      	sub	sp, #8
   143ae:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   143b0:	2100      	movs	r1, #0
   143b2:	f242 0003 	movw	r0, #8195	; 0x2003
   143b6:	f7ff fc4a 	bl	13c4e <hciCmdAlloc>
   143ba:	6078      	str	r0, [r7, #4]
   143bc:	687b      	ldr	r3, [r7, #4]
   143be:	2b00      	cmp	r3, #0
   143c0:	d002      	beq.n	143c8 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   143c2:	6878      	ldr	r0, [r7, #4]
   143c4:	f7ff fc72 	bl	13cac <hciCmdSend>
  }
}
   143c8:	bf00      	nop
   143ca:	3708      	adds	r7, #8
   143cc:	46bd      	mov	sp, r7
   143ce:	bd80      	pop	{r7, pc}

000143d0 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   143d0:	b580      	push	{r7, lr}
   143d2:	b084      	sub	sp, #16
   143d4:	af00      	add	r7, sp, #0
   143d6:	4603      	mov	r3, r0
   143d8:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   143da:	2102      	movs	r1, #2
   143dc:	f242 0016 	movw	r0, #8214	; 0x2016
   143e0:	f7ff fc35 	bl	13c4e <hciCmdAlloc>
   143e4:	60f8      	str	r0, [r7, #12]
   143e6:	68fb      	ldr	r3, [r7, #12]
   143e8:	2b00      	cmp	r3, #0
   143ea:	d013      	beq.n	14414 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   143ec:	68fb      	ldr	r3, [r7, #12]
   143ee:	3303      	adds	r3, #3
   143f0:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   143f2:	68bb      	ldr	r3, [r7, #8]
   143f4:	1c5a      	adds	r2, r3, #1
   143f6:	60ba      	str	r2, [r7, #8]
   143f8:	88fa      	ldrh	r2, [r7, #6]
   143fa:	b2d2      	uxtb	r2, r2
   143fc:	701a      	strb	r2, [r3, #0]
   143fe:	68bb      	ldr	r3, [r7, #8]
   14400:	1c5a      	adds	r2, r3, #1
   14402:	60ba      	str	r2, [r7, #8]
   14404:	88fa      	ldrh	r2, [r7, #6]
   14406:	0a12      	lsrs	r2, r2, #8
   14408:	b292      	uxth	r2, r2
   1440a:	b2d2      	uxtb	r2, r2
   1440c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1440e:	68f8      	ldr	r0, [r7, #12]
   14410:	f7ff fc4c 	bl	13cac <hciCmdSend>
  }
}
   14414:	bf00      	nop
   14416:	3710      	adds	r7, #16
   14418:	46bd      	mov	sp, r7
   1441a:	bd80      	pop	{r7, pc}

0001441c <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1441c:	b580      	push	{r7, lr}
   1441e:	b082      	sub	sp, #8
   14420:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   14422:	2100      	movs	r1, #0
   14424:	f242 001c 	movw	r0, #8220	; 0x201c
   14428:	f7ff fc11 	bl	13c4e <hciCmdAlloc>
   1442c:	6078      	str	r0, [r7, #4]
   1442e:	687b      	ldr	r3, [r7, #4]
   14430:	2b00      	cmp	r3, #0
   14432:	d002      	beq.n	1443a <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14434:	6878      	ldr	r0, [r7, #4]
   14436:	f7ff fc39 	bl	13cac <hciCmdSend>
  }
}
   1443a:	bf00      	nop
   1443c:	3708      	adds	r7, #8
   1443e:	46bd      	mov	sp, r7
   14440:	bd80      	pop	{r7, pc}

00014442 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   14442:	b580      	push	{r7, lr}
   14444:	b082      	sub	sp, #8
   14446:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   14448:	2100      	movs	r1, #0
   1444a:	f242 000f 	movw	r0, #8207	; 0x200f
   1444e:	f7ff fbfe 	bl	13c4e <hciCmdAlloc>
   14452:	6078      	str	r0, [r7, #4]
   14454:	687b      	ldr	r3, [r7, #4]
   14456:	2b00      	cmp	r3, #0
   14458:	d002      	beq.n	14460 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1445a:	6878      	ldr	r0, [r7, #4]
   1445c:	f7ff fc26 	bl	13cac <hciCmdSend>
  }
}
   14460:	bf00      	nop
   14462:	3708      	adds	r7, #8
   14464:	46bd      	mov	sp, r7
   14466:	bd80      	pop	{r7, pc}

00014468 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   14468:	b580      	push	{r7, lr}
   1446a:	b084      	sub	sp, #16
   1446c:	af00      	add	r7, sp, #0
   1446e:	4603      	mov	r3, r0
   14470:	6039      	str	r1, [r7, #0]
   14472:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   14474:	2107      	movs	r1, #7
   14476:	f242 0012 	movw	r0, #8210	; 0x2012
   1447a:	f7ff fbe8 	bl	13c4e <hciCmdAlloc>
   1447e:	60f8      	str	r0, [r7, #12]
   14480:	68fb      	ldr	r3, [r7, #12]
   14482:	2b00      	cmp	r3, #0
   14484:	d011      	beq.n	144aa <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14486:	68fb      	ldr	r3, [r7, #12]
   14488:	3303      	adds	r3, #3
   1448a:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1448c:	68bb      	ldr	r3, [r7, #8]
   1448e:	1c5a      	adds	r2, r3, #1
   14490:	60ba      	str	r2, [r7, #8]
   14492:	79fa      	ldrb	r2, [r7, #7]
   14494:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   14496:	6839      	ldr	r1, [r7, #0]
   14498:	68b8      	ldr	r0, [r7, #8]
   1449a:	f7ff faf9 	bl	13a90 <BdaCpy>
   1449e:	68bb      	ldr	r3, [r7, #8]
   144a0:	3306      	adds	r3, #6
   144a2:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   144a4:	68f8      	ldr	r0, [r7, #12]
   144a6:	f7ff fc01 	bl	13cac <hciCmdSend>
  }
}
   144aa:	bf00      	nop
   144ac:	3710      	adds	r7, #16
   144ae:	46bd      	mov	sp, r7
   144b0:	bd80      	pop	{r7, pc}

000144b2 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   144b2:	b580      	push	{r7, lr}
   144b4:	b084      	sub	sp, #16
   144b6:	af00      	add	r7, sp, #0
   144b8:	4603      	mov	r3, r0
   144ba:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   144bc:	2101      	movs	r1, #1
   144be:	f242 000a 	movw	r0, #8202	; 0x200a
   144c2:	f7ff fbc4 	bl	13c4e <hciCmdAlloc>
   144c6:	60f8      	str	r0, [r7, #12]
   144c8:	68fb      	ldr	r3, [r7, #12]
   144ca:	2b00      	cmp	r3, #0
   144cc:	d00a      	beq.n	144e4 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   144ce:	68fb      	ldr	r3, [r7, #12]
   144d0:	3303      	adds	r3, #3
   144d2:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   144d4:	68bb      	ldr	r3, [r7, #8]
   144d6:	1c5a      	adds	r2, r3, #1
   144d8:	60ba      	str	r2, [r7, #8]
   144da:	79fa      	ldrb	r2, [r7, #7]
   144dc:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   144de:	68f8      	ldr	r0, [r7, #12]
   144e0:	f7ff fbe4 	bl	13cac <hciCmdSend>
  }
}
   144e4:	bf00      	nop
   144e6:	3710      	adds	r7, #16
   144e8:	46bd      	mov	sp, r7
   144ea:	bd80      	pop	{r7, pc}

000144ec <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   144ec:	b580      	push	{r7, lr}
   144ee:	b084      	sub	sp, #16
   144f0:	af00      	add	r7, sp, #0
   144f2:	4603      	mov	r3, r0
   144f4:	6039      	str	r1, [r7, #0]
   144f6:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   144f8:	2120      	movs	r1, #32
   144fa:	f242 0008 	movw	r0, #8200	; 0x2008
   144fe:	f7ff fba6 	bl	13c4e <hciCmdAlloc>
   14502:	60f8      	str	r0, [r7, #12]
   14504:	68fb      	ldr	r3, [r7, #12]
   14506:	2b00      	cmp	r3, #0
   14508:	d01c      	beq.n	14544 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1450a:	68fb      	ldr	r3, [r7, #12]
   1450c:	3303      	adds	r3, #3
   1450e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   14510:	68bb      	ldr	r3, [r7, #8]
   14512:	1c5a      	adds	r2, r3, #1
   14514:	60ba      	str	r2, [r7, #8]
   14516:	79fa      	ldrb	r2, [r7, #7]
   14518:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1451a:	79fb      	ldrb	r3, [r7, #7]
   1451c:	461a      	mov	r2, r3
   1451e:	6839      	ldr	r1, [r7, #0]
   14520:	68b8      	ldr	r0, [r7, #8]
   14522:	f7f7 fe1d 	bl	c160 <memcpy>
    p += len;
   14526:	79fb      	ldrb	r3, [r7, #7]
   14528:	68ba      	ldr	r2, [r7, #8]
   1452a:	4413      	add	r3, r2
   1452c:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   1452e:	79fb      	ldrb	r3, [r7, #7]
   14530:	f1c3 031f 	rsb	r3, r3, #31
   14534:	461a      	mov	r2, r3
   14536:	2100      	movs	r1, #0
   14538:	68b8      	ldr	r0, [r7, #8]
   1453a:	f7f7 ff0f 	bl	c35c <memset>
    hciCmdSend(pBuf);
   1453e:	68f8      	ldr	r0, [r7, #12]
   14540:	f7ff fbb4 	bl	13cac <hciCmdSend>
  }
}
   14544:	bf00      	nop
   14546:	3710      	adds	r7, #16
   14548:	46bd      	mov	sp, r7
   1454a:	bd80      	pop	{r7, pc}

0001454c <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1454c:	b590      	push	{r4, r7, lr}
   1454e:	b085      	sub	sp, #20
   14550:	af00      	add	r7, sp, #0
   14552:	4604      	mov	r4, r0
   14554:	4608      	mov	r0, r1
   14556:	4611      	mov	r1, r2
   14558:	461a      	mov	r2, r3
   1455a:	4623      	mov	r3, r4
   1455c:	80fb      	strh	r3, [r7, #6]
   1455e:	4603      	mov	r3, r0
   14560:	80bb      	strh	r3, [r7, #4]
   14562:	460b      	mov	r3, r1
   14564:	70fb      	strb	r3, [r7, #3]
   14566:	4613      	mov	r3, r2
   14568:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   1456a:	210f      	movs	r1, #15
   1456c:	f242 0006 	movw	r0, #8198	; 0x2006
   14570:	f7ff fb6d 	bl	13c4e <hciCmdAlloc>
   14574:	60b8      	str	r0, [r7, #8]
   14576:	68bb      	ldr	r3, [r7, #8]
   14578:	2b00      	cmp	r3, #0
   1457a:	d04c      	beq.n	14616 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1457c:	68bb      	ldr	r3, [r7, #8]
   1457e:	3303      	adds	r3, #3
   14580:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   14582:	68fb      	ldr	r3, [r7, #12]
   14584:	1c5a      	adds	r2, r3, #1
   14586:	60fa      	str	r2, [r7, #12]
   14588:	88fa      	ldrh	r2, [r7, #6]
   1458a:	b2d2      	uxtb	r2, r2
   1458c:	701a      	strb	r2, [r3, #0]
   1458e:	68fb      	ldr	r3, [r7, #12]
   14590:	1c5a      	adds	r2, r3, #1
   14592:	60fa      	str	r2, [r7, #12]
   14594:	88fa      	ldrh	r2, [r7, #6]
   14596:	0a12      	lsrs	r2, r2, #8
   14598:	b292      	uxth	r2, r2
   1459a:	b2d2      	uxtb	r2, r2
   1459c:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   1459e:	68fb      	ldr	r3, [r7, #12]
   145a0:	1c5a      	adds	r2, r3, #1
   145a2:	60fa      	str	r2, [r7, #12]
   145a4:	88ba      	ldrh	r2, [r7, #4]
   145a6:	b2d2      	uxtb	r2, r2
   145a8:	701a      	strb	r2, [r3, #0]
   145aa:	68fb      	ldr	r3, [r7, #12]
   145ac:	1c5a      	adds	r2, r3, #1
   145ae:	60fa      	str	r2, [r7, #12]
   145b0:	88ba      	ldrh	r2, [r7, #4]
   145b2:	0a12      	lsrs	r2, r2, #8
   145b4:	b292      	uxth	r2, r2
   145b6:	b2d2      	uxtb	r2, r2
   145b8:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   145ba:	68fb      	ldr	r3, [r7, #12]
   145bc:	1c5a      	adds	r2, r3, #1
   145be:	60fa      	str	r2, [r7, #12]
   145c0:	78fa      	ldrb	r2, [r7, #3]
   145c2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   145c4:	68fb      	ldr	r3, [r7, #12]
   145c6:	1c5a      	adds	r2, r3, #1
   145c8:	60fa      	str	r2, [r7, #12]
   145ca:	78ba      	ldrb	r2, [r7, #2]
   145cc:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   145ce:	68fb      	ldr	r3, [r7, #12]
   145d0:	1c5a      	adds	r2, r3, #1
   145d2:	60fa      	str	r2, [r7, #12]
   145d4:	f897 2020 	ldrb.w	r2, [r7, #32]
   145d8:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   145da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   145dc:	2b00      	cmp	r3, #0
   145de:	d007      	beq.n	145f0 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   145e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   145e2:	68f8      	ldr	r0, [r7, #12]
   145e4:	f7ff fa54 	bl	13a90 <BdaCpy>
   145e8:	68fb      	ldr	r3, [r7, #12]
   145ea:	3306      	adds	r3, #6
   145ec:	60fb      	str	r3, [r7, #12]
   145ee:	e003      	b.n	145f8 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   145f0:	68f8      	ldr	r0, [r7, #12]
   145f2:	f7ff fa6f 	bl	13ad4 <BdaClr>
   145f6:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   145f8:	68fb      	ldr	r3, [r7, #12]
   145fa:	1c5a      	adds	r2, r3, #1
   145fc:	60fa      	str	r2, [r7, #12]
   145fe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   14602:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   14604:	68fb      	ldr	r3, [r7, #12]
   14606:	1c5a      	adds	r2, r3, #1
   14608:	60fa      	str	r2, [r7, #12]
   1460a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1460e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14610:	68b8      	ldr	r0, [r7, #8]
   14612:	f7ff fb4b 	bl	13cac <hciCmdSend>
  }
}
   14616:	bf00      	nop
   14618:	3714      	adds	r7, #20
   1461a:	46bd      	mov	sp, r7
   1461c:	bd90      	pop	{r4, r7, pc}

0001461e <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   1461e:	b580      	push	{r7, lr}
   14620:	b084      	sub	sp, #16
   14622:	af00      	add	r7, sp, #0
   14624:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   14626:	2108      	movs	r1, #8
   14628:	f242 0001 	movw	r0, #8193	; 0x2001
   1462c:	f7ff fb0f 	bl	13c4e <hciCmdAlloc>
   14630:	60f8      	str	r0, [r7, #12]
   14632:	68fb      	ldr	r3, [r7, #12]
   14634:	2b00      	cmp	r3, #0
   14636:	d00a      	beq.n	1464e <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14638:	68fb      	ldr	r3, [r7, #12]
   1463a:	3303      	adds	r3, #3
   1463c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   1463e:	2208      	movs	r2, #8
   14640:	6879      	ldr	r1, [r7, #4]
   14642:	68b8      	ldr	r0, [r7, #8]
   14644:	f7f7 fd8c 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14648:	68f8      	ldr	r0, [r7, #12]
   1464a:	f7ff fb2f 	bl	13cac <hciCmdSend>
  }
}
   1464e:	bf00      	nop
   14650:	3710      	adds	r7, #16
   14652:	46bd      	mov	sp, r7
   14654:	bd80      	pop	{r7, pc}

00014656 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   14656:	b580      	push	{r7, lr}
   14658:	b084      	sub	sp, #16
   1465a:	af00      	add	r7, sp, #0
   1465c:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   1465e:	2106      	movs	r1, #6
   14660:	f242 0005 	movw	r0, #8197	; 0x2005
   14664:	f7ff faf3 	bl	13c4e <hciCmdAlloc>
   14668:	60f8      	str	r0, [r7, #12]
   1466a:	68fb      	ldr	r3, [r7, #12]
   1466c:	2b00      	cmp	r3, #0
   1466e:	d00c      	beq.n	1468a <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14670:	68fb      	ldr	r3, [r7, #12]
   14672:	3303      	adds	r3, #3
   14674:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   14676:	6879      	ldr	r1, [r7, #4]
   14678:	68b8      	ldr	r0, [r7, #8]
   1467a:	f7ff fa09 	bl	13a90 <BdaCpy>
   1467e:	68bb      	ldr	r3, [r7, #8]
   14680:	3306      	adds	r3, #6
   14682:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14684:	68f8      	ldr	r0, [r7, #12]
   14686:	f7ff fb11 	bl	13cac <hciCmdSend>
  }
}
   1468a:	bf00      	nop
   1468c:	3710      	adds	r7, #16
   1468e:	46bd      	mov	sp, r7
   14690:	bd80      	pop	{r7, pc}

00014692 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   14692:	b580      	push	{r7, lr}
   14694:	b084      	sub	sp, #16
   14696:	af00      	add	r7, sp, #0
   14698:	4603      	mov	r3, r0
   1469a:	6039      	str	r1, [r7, #0]
   1469c:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   1469e:	2120      	movs	r1, #32
   146a0:	f242 0009 	movw	r0, #8201	; 0x2009
   146a4:	f7ff fad3 	bl	13c4e <hciCmdAlloc>
   146a8:	60f8      	str	r0, [r7, #12]
   146aa:	68fb      	ldr	r3, [r7, #12]
   146ac:	2b00      	cmp	r3, #0
   146ae:	d01c      	beq.n	146ea <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   146b0:	68fb      	ldr	r3, [r7, #12]
   146b2:	3303      	adds	r3, #3
   146b4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   146b6:	68bb      	ldr	r3, [r7, #8]
   146b8:	1c5a      	adds	r2, r3, #1
   146ba:	60ba      	str	r2, [r7, #8]
   146bc:	79fa      	ldrb	r2, [r7, #7]
   146be:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   146c0:	79fb      	ldrb	r3, [r7, #7]
   146c2:	461a      	mov	r2, r3
   146c4:	6839      	ldr	r1, [r7, #0]
   146c6:	68b8      	ldr	r0, [r7, #8]
   146c8:	f7f7 fd4a 	bl	c160 <memcpy>
    p += len;
   146cc:	79fb      	ldrb	r3, [r7, #7]
   146ce:	68ba      	ldr	r2, [r7, #8]
   146d0:	4413      	add	r3, r2
   146d2:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   146d4:	79fb      	ldrb	r3, [r7, #7]
   146d6:	f1c3 031f 	rsb	r3, r3, #31
   146da:	461a      	mov	r2, r3
   146dc:	2100      	movs	r1, #0
   146de:	68b8      	ldr	r0, [r7, #8]
   146e0:	f7f7 fe3c 	bl	c35c <memset>
    hciCmdSend(pBuf);
   146e4:	68f8      	ldr	r0, [r7, #12]
   146e6:	f7ff fae1 	bl	13cac <hciCmdSend>
  }
}
   146ea:	bf00      	nop
   146ec:	3710      	adds	r7, #16
   146ee:	46bd      	mov	sp, r7
   146f0:	bd80      	pop	{r7, pc}

000146f2 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   146f2:	b580      	push	{r7, lr}
   146f4:	b086      	sub	sp, #24
   146f6:	af00      	add	r7, sp, #0
   146f8:	60b9      	str	r1, [r7, #8]
   146fa:	607b      	str	r3, [r7, #4]
   146fc:	4603      	mov	r3, r0
   146fe:	81fb      	strh	r3, [r7, #14]
   14700:	4613      	mov	r3, r2
   14702:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   14704:	211c      	movs	r1, #28
   14706:	f242 0019 	movw	r0, #8217	; 0x2019
   1470a:	f7ff faa0 	bl	13c4e <hciCmdAlloc>
   1470e:	6178      	str	r0, [r7, #20]
   14710:	697b      	ldr	r3, [r7, #20]
   14712:	2b00      	cmp	r3, #0
   14714:	d02e      	beq.n	14774 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14716:	697b      	ldr	r3, [r7, #20]
   14718:	3303      	adds	r3, #3
   1471a:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   1471c:	693b      	ldr	r3, [r7, #16]
   1471e:	1c5a      	adds	r2, r3, #1
   14720:	613a      	str	r2, [r7, #16]
   14722:	89fa      	ldrh	r2, [r7, #14]
   14724:	b2d2      	uxtb	r2, r2
   14726:	701a      	strb	r2, [r3, #0]
   14728:	693b      	ldr	r3, [r7, #16]
   1472a:	1c5a      	adds	r2, r3, #1
   1472c:	613a      	str	r2, [r7, #16]
   1472e:	89fa      	ldrh	r2, [r7, #14]
   14730:	0a12      	lsrs	r2, r2, #8
   14732:	b292      	uxth	r2, r2
   14734:	b2d2      	uxtb	r2, r2
   14736:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   14738:	2208      	movs	r2, #8
   1473a:	68b9      	ldr	r1, [r7, #8]
   1473c:	6938      	ldr	r0, [r7, #16]
   1473e:	f7f7 fd0f 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   14742:	693b      	ldr	r3, [r7, #16]
   14744:	3308      	adds	r3, #8
   14746:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   14748:	693b      	ldr	r3, [r7, #16]
   1474a:	1c5a      	adds	r2, r3, #1
   1474c:	613a      	str	r2, [r7, #16]
   1474e:	89ba      	ldrh	r2, [r7, #12]
   14750:	b2d2      	uxtb	r2, r2
   14752:	701a      	strb	r2, [r3, #0]
   14754:	693b      	ldr	r3, [r7, #16]
   14756:	1c5a      	adds	r2, r3, #1
   14758:	613a      	str	r2, [r7, #16]
   1475a:	89ba      	ldrh	r2, [r7, #12]
   1475c:	0a12      	lsrs	r2, r2, #8
   1475e:	b292      	uxth	r2, r2
   14760:	b2d2      	uxtb	r2, r2
   14762:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14764:	2210      	movs	r2, #16
   14766:	6879      	ldr	r1, [r7, #4]
   14768:	6938      	ldr	r0, [r7, #16]
   1476a:	f7f7 fcf9 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1476e:	6978      	ldr	r0, [r7, #20]
   14770:	f7ff fa9c 	bl	13cac <hciCmdSend>
  }
}
   14774:	bf00      	nop
   14776:	3718      	adds	r7, #24
   14778:	46bd      	mov	sp, r7
   1477a:	bd80      	pop	{r7, pc}

0001477c <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   1477c:	b580      	push	{r7, lr}
   1477e:	b082      	sub	sp, #8
   14780:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   14782:	2100      	movs	r1, #0
   14784:	f241 0009 	movw	r0, #4105	; 0x1009
   14788:	f7ff fa61 	bl	13c4e <hciCmdAlloc>
   1478c:	6078      	str	r0, [r7, #4]
   1478e:	687b      	ldr	r3, [r7, #4]
   14790:	2b00      	cmp	r3, #0
   14792:	d002      	beq.n	1479a <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14794:	6878      	ldr	r0, [r7, #4]
   14796:	f7ff fa89 	bl	13cac <hciCmdSend>
  }
}
   1479a:	bf00      	nop
   1479c:	3708      	adds	r7, #8
   1479e:	46bd      	mov	sp, r7
   147a0:	bd80      	pop	{r7, pc}

000147a2 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   147a2:	b580      	push	{r7, lr}
   147a4:	b082      	sub	sp, #8
   147a6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   147a8:	2100      	movs	r1, #0
   147aa:	f241 0001 	movw	r0, #4097	; 0x1001
   147ae:	f7ff fa4e 	bl	13c4e <hciCmdAlloc>
   147b2:	6078      	str	r0, [r7, #4]
   147b4:	687b      	ldr	r3, [r7, #4]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d002      	beq.n	147c0 <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   147ba:	6878      	ldr	r0, [r7, #4]
   147bc:	f7ff fa76 	bl	13cac <hciCmdSend>
  }
}
   147c0:	bf00      	nop
   147c2:	3708      	adds	r7, #8
   147c4:	46bd      	mov	sp, r7
   147c6:	bd80      	pop	{r7, pc}

000147c8 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   147c8:	b580      	push	{r7, lr}
   147ca:	b084      	sub	sp, #16
   147cc:	af00      	add	r7, sp, #0
   147ce:	4603      	mov	r3, r0
   147d0:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   147d2:	2102      	movs	r1, #2
   147d4:	f241 4005 	movw	r0, #5125	; 0x1405
   147d8:	f7ff fa39 	bl	13c4e <hciCmdAlloc>
   147dc:	60f8      	str	r0, [r7, #12]
   147de:	68fb      	ldr	r3, [r7, #12]
   147e0:	2b00      	cmp	r3, #0
   147e2:	d013      	beq.n	1480c <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   147e4:	68fb      	ldr	r3, [r7, #12]
   147e6:	3303      	adds	r3, #3
   147e8:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   147ea:	68bb      	ldr	r3, [r7, #8]
   147ec:	1c5a      	adds	r2, r3, #1
   147ee:	60ba      	str	r2, [r7, #8]
   147f0:	88fa      	ldrh	r2, [r7, #6]
   147f2:	b2d2      	uxtb	r2, r2
   147f4:	701a      	strb	r2, [r3, #0]
   147f6:	68bb      	ldr	r3, [r7, #8]
   147f8:	1c5a      	adds	r2, r3, #1
   147fa:	60ba      	str	r2, [r7, #8]
   147fc:	88fa      	ldrh	r2, [r7, #6]
   147fe:	0a12      	lsrs	r2, r2, #8
   14800:	b292      	uxth	r2, r2
   14802:	b2d2      	uxtb	r2, r2
   14804:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14806:	68f8      	ldr	r0, [r7, #12]
   14808:	f7ff fa50 	bl	13cac <hciCmdSend>
  }
}
   1480c:	bf00      	nop
   1480e:	3710      	adds	r7, #16
   14810:	46bd      	mov	sp, r7
   14812:	bd80      	pop	{r7, pc}

00014814 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   14814:	b580      	push	{r7, lr}
   14816:	b084      	sub	sp, #16
   14818:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   1481a:	2314      	movs	r3, #20
   1481c:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   1481e:	4b13      	ldr	r3, [pc, #76]	; (1486c <HciResetCmd+0x58>)
   14820:	68db      	ldr	r3, [r3, #12]
   14822:	1d3a      	adds	r2, r7, #4
   14824:	4610      	mov	r0, r2
   14826:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   14828:	e002      	b.n	14830 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1482a:	68f8      	ldr	r0, [r7, #12]
   1482c:	f005 fe70 	bl	1a510 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   14830:	f107 030b 	add.w	r3, r7, #11
   14834:	4619      	mov	r1, r3
   14836:	480e      	ldr	r0, [pc, #56]	; (14870 <HciResetCmd+0x5c>)
   14838:	f005 fea4 	bl	1a584 <WsfMsgDeq>
   1483c:	60f8      	str	r0, [r7, #12]
   1483e:	68fb      	ldr	r3, [r7, #12]
   14840:	2b00      	cmp	r3, #0
   14842:	d1f2      	bne.n	1482a <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   14844:	4b0b      	ldr	r3, [pc, #44]	; (14874 <HciResetCmd+0x60>)
   14846:	2201      	movs	r2, #1
   14848:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1484a:	2100      	movs	r1, #0
   1484c:	f640 4003 	movw	r0, #3075	; 0xc03
   14850:	f7ff f9fd 	bl	13c4e <hciCmdAlloc>
   14854:	60f8      	str	r0, [r7, #12]
   14856:	68fb      	ldr	r3, [r7, #12]
   14858:	2b00      	cmp	r3, #0
   1485a:	d002      	beq.n	14862 <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   1485c:	68f8      	ldr	r0, [r7, #12]
   1485e:	f7ff fa25 	bl	13cac <hciCmdSend>
  }
}
   14862:	bf00      	nop
   14864:	3710      	adds	r7, #16
   14866:	46bd      	mov	sp, r7
   14868:	bd80      	pop	{r7, pc}
   1486a:	bf00      	nop
   1486c:	10009e2c 	.word	0x10009e2c
   14870:	10009300 	.word	0x10009300
   14874:	100092f0 	.word	0x100092f0

00014878 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   14878:	b580      	push	{r7, lr}
   1487a:	b084      	sub	sp, #16
   1487c:	af00      	add	r7, sp, #0
   1487e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   14880:	2108      	movs	r1, #8
   14882:	f640 4001 	movw	r0, #3073	; 0xc01
   14886:	f7ff f9e2 	bl	13c4e <hciCmdAlloc>
   1488a:	60f8      	str	r0, [r7, #12]
   1488c:	68fb      	ldr	r3, [r7, #12]
   1488e:	2b00      	cmp	r3, #0
   14890:	d00a      	beq.n	148a8 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14892:	68fb      	ldr	r3, [r7, #12]
   14894:	3303      	adds	r3, #3
   14896:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   14898:	2208      	movs	r2, #8
   1489a:	6879      	ldr	r1, [r7, #4]
   1489c:	68b8      	ldr	r0, [r7, #8]
   1489e:	f7f7 fc5f 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   148a2:	68f8      	ldr	r0, [r7, #12]
   148a4:	f7ff fa02 	bl	13cac <hciCmdSend>
  }
}
   148a8:	bf00      	nop
   148aa:	3710      	adds	r7, #16
   148ac:	46bd      	mov	sp, r7
   148ae:	bd80      	pop	{r7, pc}

000148b0 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   148b0:	b580      	push	{r7, lr}
   148b2:	b084      	sub	sp, #16
   148b4:	af00      	add	r7, sp, #0
   148b6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   148b8:	2108      	movs	r1, #8
   148ba:	f640 4063 	movw	r0, #3171	; 0xc63
   148be:	f7ff f9c6 	bl	13c4e <hciCmdAlloc>
   148c2:	60f8      	str	r0, [r7, #12]
   148c4:	68fb      	ldr	r3, [r7, #12]
   148c6:	2b00      	cmp	r3, #0
   148c8:	d00a      	beq.n	148e0 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   148ca:	68fb      	ldr	r3, [r7, #12]
   148cc:	3303      	adds	r3, #3
   148ce:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   148d0:	2208      	movs	r2, #8
   148d2:	6879      	ldr	r1, [r7, #4]
   148d4:	68b8      	ldr	r0, [r7, #8]
   148d6:	f7f7 fc43 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   148da:	68f8      	ldr	r0, [r7, #12]
   148dc:	f7ff f9e6 	bl	13cac <hciCmdSend>
  }
}
   148e0:	bf00      	nop
   148e2:	3710      	adds	r7, #16
   148e4:	46bd      	mov	sp, r7
   148e6:	bd80      	pop	{r7, pc}

000148e8 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   148e8:	b580      	push	{r7, lr}
   148ea:	b084      	sub	sp, #16
   148ec:	af00      	add	r7, sp, #0
   148ee:	4603      	mov	r3, r0
   148f0:	460a      	mov	r2, r1
   148f2:	80fb      	strh	r3, [r7, #6]
   148f4:	4613      	mov	r3, r2
   148f6:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   148f8:	2104      	movs	r1, #4
   148fa:	f640 407c 	movw	r0, #3196	; 0xc7c
   148fe:	f7ff f9a6 	bl	13c4e <hciCmdAlloc>
   14902:	60f8      	str	r0, [r7, #12]
   14904:	68fb      	ldr	r3, [r7, #12]
   14906:	2b00      	cmp	r3, #0
   14908:	d021      	beq.n	1494e <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1490a:	68fb      	ldr	r3, [r7, #12]
   1490c:	3303      	adds	r3, #3
   1490e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14910:	68bb      	ldr	r3, [r7, #8]
   14912:	1c5a      	adds	r2, r3, #1
   14914:	60ba      	str	r2, [r7, #8]
   14916:	88fa      	ldrh	r2, [r7, #6]
   14918:	b2d2      	uxtb	r2, r2
   1491a:	701a      	strb	r2, [r3, #0]
   1491c:	68bb      	ldr	r3, [r7, #8]
   1491e:	1c5a      	adds	r2, r3, #1
   14920:	60ba      	str	r2, [r7, #8]
   14922:	88fa      	ldrh	r2, [r7, #6]
   14924:	0a12      	lsrs	r2, r2, #8
   14926:	b292      	uxth	r2, r2
   14928:	b2d2      	uxtb	r2, r2
   1492a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1492c:	68bb      	ldr	r3, [r7, #8]
   1492e:	1c5a      	adds	r2, r3, #1
   14930:	60ba      	str	r2, [r7, #8]
   14932:	88ba      	ldrh	r2, [r7, #4]
   14934:	b2d2      	uxtb	r2, r2
   14936:	701a      	strb	r2, [r3, #0]
   14938:	68bb      	ldr	r3, [r7, #8]
   1493a:	1c5a      	adds	r2, r3, #1
   1493c:	60ba      	str	r2, [r7, #8]
   1493e:	88ba      	ldrh	r2, [r7, #4]
   14940:	0a12      	lsrs	r2, r2, #8
   14942:	b292      	uxth	r2, r2
   14944:	b2d2      	uxtb	r2, r2
   14946:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14948:	68f8      	ldr	r0, [r7, #12]
   1494a:	f7ff f9af 	bl	13cac <hciCmdSend>
  }
}
   1494e:	bf00      	nop
   14950:	3710      	adds	r7, #16
   14952:	46bd      	mov	sp, r7
   14954:	bd80      	pop	{r7, pc}

00014956 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   14956:	b580      	push	{r7, lr}
   14958:	b086      	sub	sp, #24
   1495a:	af00      	add	r7, sp, #0
   1495c:	60b9      	str	r1, [r7, #8]
   1495e:	607a      	str	r2, [r7, #4]
   14960:	603b      	str	r3, [r7, #0]
   14962:	4603      	mov	r3, r0
   14964:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   14966:	2127      	movs	r1, #39	; 0x27
   14968:	f242 0027 	movw	r0, #8231	; 0x2027
   1496c:	f7ff f96f 	bl	13c4e <hciCmdAlloc>
   14970:	6178      	str	r0, [r7, #20]
   14972:	697b      	ldr	r3, [r7, #20]
   14974:	2b00      	cmp	r3, #0
   14976:	d01e      	beq.n	149b6 <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14978:	697b      	ldr	r3, [r7, #20]
   1497a:	3303      	adds	r3, #3
   1497c:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1497e:	693b      	ldr	r3, [r7, #16]
   14980:	1c5a      	adds	r2, r3, #1
   14982:	613a      	str	r2, [r7, #16]
   14984:	7bfa      	ldrb	r2, [r7, #15]
   14986:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   14988:	68b9      	ldr	r1, [r7, #8]
   1498a:	6938      	ldr	r0, [r7, #16]
   1498c:	f7ff f880 	bl	13a90 <BdaCpy>
   14990:	693b      	ldr	r3, [r7, #16]
   14992:	3306      	adds	r3, #6
   14994:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   14996:	2210      	movs	r2, #16
   14998:	6879      	ldr	r1, [r7, #4]
   1499a:	6938      	ldr	r0, [r7, #16]
   1499c:	f7f7 fbe0 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   149a0:	693b      	ldr	r3, [r7, #16]
   149a2:	3310      	adds	r3, #16
   149a4:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   149a6:	2210      	movs	r2, #16
   149a8:	6839      	ldr	r1, [r7, #0]
   149aa:	6938      	ldr	r0, [r7, #16]
   149ac:	f7f7 fbd8 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   149b0:	6978      	ldr	r0, [r7, #20]
   149b2:	f7ff f97b 	bl	13cac <hciCmdSend>
  }
}
   149b6:	bf00      	nop
   149b8:	3718      	adds	r7, #24
   149ba:	46bd      	mov	sp, r7
   149bc:	bd80      	pop	{r7, pc}

000149be <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   149be:	b580      	push	{r7, lr}
   149c0:	b084      	sub	sp, #16
   149c2:	af00      	add	r7, sp, #0
   149c4:	4603      	mov	r3, r0
   149c6:	6039      	str	r1, [r7, #0]
   149c8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   149ca:	2107      	movs	r1, #7
   149cc:	f242 0028 	movw	r0, #8232	; 0x2028
   149d0:	f7ff f93d 	bl	13c4e <hciCmdAlloc>
   149d4:	60f8      	str	r0, [r7, #12]
   149d6:	68fb      	ldr	r3, [r7, #12]
   149d8:	2b00      	cmp	r3, #0
   149da:	d011      	beq.n	14a00 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   149dc:	68fb      	ldr	r3, [r7, #12]
   149de:	3303      	adds	r3, #3
   149e0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   149e2:	68bb      	ldr	r3, [r7, #8]
   149e4:	1c5a      	adds	r2, r3, #1
   149e6:	60ba      	str	r2, [r7, #8]
   149e8:	79fa      	ldrb	r2, [r7, #7]
   149ea:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   149ec:	6839      	ldr	r1, [r7, #0]
   149ee:	68b8      	ldr	r0, [r7, #8]
   149f0:	f7ff f84e 	bl	13a90 <BdaCpy>
   149f4:	68bb      	ldr	r3, [r7, #8]
   149f6:	3306      	adds	r3, #6
   149f8:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   149fa:	68f8      	ldr	r0, [r7, #12]
   149fc:	f7ff f956 	bl	13cac <hciCmdSend>
  }
}
   14a00:	bf00      	nop
   14a02:	3710      	adds	r7, #16
   14a04:	46bd      	mov	sp, r7
   14a06:	bd80      	pop	{r7, pc}

00014a08 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   14a08:	b580      	push	{r7, lr}
   14a0a:	b082      	sub	sp, #8
   14a0c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   14a0e:	2100      	movs	r1, #0
   14a10:	f242 0029 	movw	r0, #8233	; 0x2029
   14a14:	f7ff f91b 	bl	13c4e <hciCmdAlloc>
   14a18:	6078      	str	r0, [r7, #4]
   14a1a:	687b      	ldr	r3, [r7, #4]
   14a1c:	2b00      	cmp	r3, #0
   14a1e:	d002      	beq.n	14a26 <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   14a20:	6878      	ldr	r0, [r7, #4]
   14a22:	f7ff f943 	bl	13cac <hciCmdSend>
  }
}
   14a26:	bf00      	nop
   14a28:	3708      	adds	r7, #8
   14a2a:	46bd      	mov	sp, r7
   14a2c:	bd80      	pop	{r7, pc}

00014a2e <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   14a2e:	b580      	push	{r7, lr}
   14a30:	b082      	sub	sp, #8
   14a32:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   14a34:	2100      	movs	r1, #0
   14a36:	f242 002a 	movw	r0, #8234	; 0x202a
   14a3a:	f7ff f908 	bl	13c4e <hciCmdAlloc>
   14a3e:	6078      	str	r0, [r7, #4]
   14a40:	687b      	ldr	r3, [r7, #4]
   14a42:	2b00      	cmp	r3, #0
   14a44:	d002      	beq.n	14a4c <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   14a46:	6878      	ldr	r0, [r7, #4]
   14a48:	f7ff f930 	bl	13cac <hciCmdSend>
  }
}
   14a4c:	bf00      	nop
   14a4e:	3708      	adds	r7, #8
   14a50:	46bd      	mov	sp, r7
   14a52:	bd80      	pop	{r7, pc}

00014a54 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   14a54:	b580      	push	{r7, lr}
   14a56:	b084      	sub	sp, #16
   14a58:	af00      	add	r7, sp, #0
   14a5a:	4603      	mov	r3, r0
   14a5c:	6039      	str	r1, [r7, #0]
   14a5e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   14a60:	2107      	movs	r1, #7
   14a62:	f242 002b 	movw	r0, #8235	; 0x202b
   14a66:	f7ff f8f2 	bl	13c4e <hciCmdAlloc>
   14a6a:	60f8      	str	r0, [r7, #12]
   14a6c:	68fb      	ldr	r3, [r7, #12]
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d011      	beq.n	14a96 <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14a72:	68fb      	ldr	r3, [r7, #12]
   14a74:	3303      	adds	r3, #3
   14a76:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14a78:	68bb      	ldr	r3, [r7, #8]
   14a7a:	1c5a      	adds	r2, r3, #1
   14a7c:	60ba      	str	r2, [r7, #8]
   14a7e:	79fa      	ldrb	r2, [r7, #7]
   14a80:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   14a82:	6839      	ldr	r1, [r7, #0]
   14a84:	68b8      	ldr	r0, [r7, #8]
   14a86:	f7ff f803 	bl	13a90 <BdaCpy>
   14a8a:	68bb      	ldr	r3, [r7, #8]
   14a8c:	3306      	adds	r3, #6
   14a8e:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14a90:	68f8      	ldr	r0, [r7, #12]
   14a92:	f7ff f90b 	bl	13cac <hciCmdSend>
  }
}
   14a96:	bf00      	nop
   14a98:	3710      	adds	r7, #16
   14a9a:	46bd      	mov	sp, r7
   14a9c:	bd80      	pop	{r7, pc}

00014a9e <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   14a9e:	b580      	push	{r7, lr}
   14aa0:	b084      	sub	sp, #16
   14aa2:	af00      	add	r7, sp, #0
   14aa4:	4603      	mov	r3, r0
   14aa6:	6039      	str	r1, [r7, #0]
   14aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   14aaa:	2107      	movs	r1, #7
   14aac:	f242 002c 	movw	r0, #8236	; 0x202c
   14ab0:	f7ff f8cd 	bl	13c4e <hciCmdAlloc>
   14ab4:	60f8      	str	r0, [r7, #12]
   14ab6:	68fb      	ldr	r3, [r7, #12]
   14ab8:	2b00      	cmp	r3, #0
   14aba:	d011      	beq.n	14ae0 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14abc:	68fb      	ldr	r3, [r7, #12]
   14abe:	3303      	adds	r3, #3
   14ac0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14ac2:	68bb      	ldr	r3, [r7, #8]
   14ac4:	1c5a      	adds	r2, r3, #1
   14ac6:	60ba      	str	r2, [r7, #8]
   14ac8:	79fa      	ldrb	r2, [r7, #7]
   14aca:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   14acc:	6839      	ldr	r1, [r7, #0]
   14ace:	68b8      	ldr	r0, [r7, #8]
   14ad0:	f7fe ffde 	bl	13a90 <BdaCpy>
   14ad4:	68bb      	ldr	r3, [r7, #8]
   14ad6:	3306      	adds	r3, #6
   14ad8:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14ada:	68f8      	ldr	r0, [r7, #12]
   14adc:	f7ff f8e6 	bl	13cac <hciCmdSend>
  }
}
   14ae0:	bf00      	nop
   14ae2:	3710      	adds	r7, #16
   14ae4:	46bd      	mov	sp, r7
   14ae6:	bd80      	pop	{r7, pc}

00014ae8 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   14ae8:	b580      	push	{r7, lr}
   14aea:	b084      	sub	sp, #16
   14aec:	af00      	add	r7, sp, #0
   14aee:	4603      	mov	r3, r0
   14af0:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   14af2:	2101      	movs	r1, #1
   14af4:	f242 002d 	movw	r0, #8237	; 0x202d
   14af8:	f7ff f8a9 	bl	13c4e <hciCmdAlloc>
   14afc:	60f8      	str	r0, [r7, #12]
   14afe:	68fb      	ldr	r3, [r7, #12]
   14b00:	2b00      	cmp	r3, #0
   14b02:	d00a      	beq.n	14b1a <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14b04:	68fb      	ldr	r3, [r7, #12]
   14b06:	3303      	adds	r3, #3
   14b08:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   14b0a:	68bb      	ldr	r3, [r7, #8]
   14b0c:	1c5a      	adds	r2, r3, #1
   14b0e:	60ba      	str	r2, [r7, #8]
   14b10:	79fa      	ldrb	r2, [r7, #7]
   14b12:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14b14:	68f8      	ldr	r0, [r7, #12]
   14b16:	f7ff f8c9 	bl	13cac <hciCmdSend>
  }
}
   14b1a:	bf00      	nop
   14b1c:	3710      	adds	r7, #16
   14b1e:	46bd      	mov	sp, r7
   14b20:	bd80      	pop	{r7, pc}

00014b22 <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   14b22:	b580      	push	{r7, lr}
   14b24:	b084      	sub	sp, #16
   14b26:	af00      	add	r7, sp, #0
   14b28:	4603      	mov	r3, r0
   14b2a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   14b2c:	2102      	movs	r1, #2
   14b2e:	f242 002e 	movw	r0, #8238	; 0x202e
   14b32:	f7ff f88c 	bl	13c4e <hciCmdAlloc>
   14b36:	60f8      	str	r0, [r7, #12]
   14b38:	68fb      	ldr	r3, [r7, #12]
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	d013      	beq.n	14b66 <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14b3e:	68fb      	ldr	r3, [r7, #12]
   14b40:	3303      	adds	r3, #3
   14b42:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   14b44:	68bb      	ldr	r3, [r7, #8]
   14b46:	1c5a      	adds	r2, r3, #1
   14b48:	60ba      	str	r2, [r7, #8]
   14b4a:	88fa      	ldrh	r2, [r7, #6]
   14b4c:	b2d2      	uxtb	r2, r2
   14b4e:	701a      	strb	r2, [r3, #0]
   14b50:	68bb      	ldr	r3, [r7, #8]
   14b52:	1c5a      	adds	r2, r3, #1
   14b54:	60ba      	str	r2, [r7, #8]
   14b56:	88fa      	ldrh	r2, [r7, #6]
   14b58:	0a12      	lsrs	r2, r2, #8
   14b5a:	b292      	uxth	r2, r2
   14b5c:	b2d2      	uxtb	r2, r2
   14b5e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14b60:	68f8      	ldr	r0, [r7, #12]
   14b62:	f7ff f8a3 	bl	13cac <hciCmdSend>
  }
}
   14b66:	bf00      	nop
   14b68:	3710      	adds	r7, #16
   14b6a:	46bd      	mov	sp, r7
   14b6c:	bd80      	pop	{r7, pc}

00014b6e <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   14b6e:	b580      	push	{r7, lr}
   14b70:	b084      	sub	sp, #16
   14b72:	af00      	add	r7, sp, #0
   14b74:	4603      	mov	r3, r0
   14b76:	6039      	str	r1, [r7, #0]
   14b78:	71fb      	strb	r3, [r7, #7]
   14b7a:	4613      	mov	r3, r2
   14b7c:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   14b7e:	2108      	movs	r1, #8
   14b80:	f242 004e 	movw	r0, #8270	; 0x204e
   14b84:	f7ff f863 	bl	13c4e <hciCmdAlloc>
   14b88:	60f8      	str	r0, [r7, #12]
   14b8a:	68fb      	ldr	r3, [r7, #12]
   14b8c:	2b00      	cmp	r3, #0
   14b8e:	d016      	beq.n	14bbe <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14b90:	68fb      	ldr	r3, [r7, #12]
   14b92:	3303      	adds	r3, #3
   14b94:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14b96:	68bb      	ldr	r3, [r7, #8]
   14b98:	1c5a      	adds	r2, r3, #1
   14b9a:	60ba      	str	r2, [r7, #8]
   14b9c:	79fa      	ldrb	r2, [r7, #7]
   14b9e:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   14ba0:	6839      	ldr	r1, [r7, #0]
   14ba2:	68b8      	ldr	r0, [r7, #8]
   14ba4:	f7fe ff74 	bl	13a90 <BdaCpy>
   14ba8:	68bb      	ldr	r3, [r7, #8]
   14baa:	3306      	adds	r3, #6
   14bac:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   14bae:	68bb      	ldr	r3, [r7, #8]
   14bb0:	1c5a      	adds	r2, r3, #1
   14bb2:	60ba      	str	r2, [r7, #8]
   14bb4:	79ba      	ldrb	r2, [r7, #6]
   14bb6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14bb8:	68f8      	ldr	r0, [r7, #12]
   14bba:	f7ff f877 	bl	13cac <hciCmdSend>
  }
}
   14bbe:	bf00      	nop
   14bc0:	3710      	adds	r7, #16
   14bc2:	46bd      	mov	sp, r7
   14bc4:	bd80      	pop	{r7, pc}

00014bc6 <HciVendorSpecificCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVendorSpecificCmd(uint16_t opcode, uint8_t len, uint8_t *pData)
{
   14bc6:	b580      	push	{r7, lr}
   14bc8:	b084      	sub	sp, #16
   14bca:	af00      	add	r7, sp, #0
   14bcc:	4603      	mov	r3, r0
   14bce:	603a      	str	r2, [r7, #0]
   14bd0:	80fb      	strh	r3, [r7, #6]
   14bd2:	460b      	mov	r3, r1
   14bd4:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(opcode, len)) != NULL)
   14bd6:	797b      	ldrb	r3, [r7, #5]
   14bd8:	b29a      	uxth	r2, r3
   14bda:	88fb      	ldrh	r3, [r7, #6]
   14bdc:	4611      	mov	r1, r2
   14bde:	4618      	mov	r0, r3
   14be0:	f7ff f835 	bl	13c4e <hciCmdAlloc>
   14be4:	60f8      	str	r0, [r7, #12]
   14be6:	68fb      	ldr	r3, [r7, #12]
   14be8:	2b00      	cmp	r3, #0
   14bea:	d00b      	beq.n	14c04 <HciVendorSpecificCmd+0x3e>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14bec:	68fb      	ldr	r3, [r7, #12]
   14bee:	3303      	adds	r3, #3
   14bf0:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, len);
   14bf2:	797b      	ldrb	r3, [r7, #5]
   14bf4:	461a      	mov	r2, r3
   14bf6:	6839      	ldr	r1, [r7, #0]
   14bf8:	68b8      	ldr	r0, [r7, #8]
   14bfa:	f7f7 fab1 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14bfe:	68f8      	ldr	r0, [r7, #12]
   14c00:	f7ff f854 	bl	13cac <hciCmdSend>
  }
}
   14c04:	bf00      	nop
   14c06:	3710      	adds	r7, #16
   14c08:	46bd      	mov	sp, r7
   14c0a:	bd80      	pop	{r7, pc}

00014c0c <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   14c0c:	b480      	push	{r7}
   14c0e:	b085      	sub	sp, #20
   14c10:	af00      	add	r7, sp, #0
   14c12:	4603      	mov	r3, r0
   14c14:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14c16:	4b13      	ldr	r3, [pc, #76]	; (14c64 <hciCoreConnAlloc+0x58>)
   14c18:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14c1a:	2308      	movs	r3, #8
   14c1c:	73fb      	strb	r3, [r7, #15]
   14c1e:	e018      	b.n	14c52 <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   14c20:	68bb      	ldr	r3, [r7, #8]
   14c22:	8a1b      	ldrh	r3, [r3, #16]
   14c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14c28:	4293      	cmp	r3, r2
   14c2a:	d10c      	bne.n	14c46 <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   14c2c:	68bb      	ldr	r3, [r7, #8]
   14c2e:	88fa      	ldrh	r2, [r7, #6]
   14c30:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   14c32:	68bb      	ldr	r3, [r7, #8]
   14c34:	2200      	movs	r2, #0
   14c36:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   14c38:	68bb      	ldr	r3, [r7, #8]
   14c3a:	2200      	movs	r2, #0
   14c3c:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   14c3e:	68bb      	ldr	r3, [r7, #8]
   14c40:	2200      	movs	r2, #0
   14c42:	761a      	strb	r2, [r3, #24]

      return;
   14c44:	e008      	b.n	14c58 <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14c46:	7bfb      	ldrb	r3, [r7, #15]
   14c48:	3b01      	subs	r3, #1
   14c4a:	73fb      	strb	r3, [r7, #15]
   14c4c:	68bb      	ldr	r3, [r7, #8]
   14c4e:	331c      	adds	r3, #28
   14c50:	60bb      	str	r3, [r7, #8]
   14c52:	7bfb      	ldrb	r3, [r7, #15]
   14c54:	2b00      	cmp	r3, #0
   14c56:	d1e3      	bne.n	14c20 <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   14c58:	3714      	adds	r7, #20
   14c5a:	46bd      	mov	sp, r7
   14c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c60:	4770      	bx	lr
   14c62:	bf00      	nop
   14c64:	1000930c 	.word	0x1000930c

00014c68 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   14c68:	b580      	push	{r7, lr}
   14c6a:	b084      	sub	sp, #16
   14c6c:	af00      	add	r7, sp, #0
   14c6e:	4603      	mov	r3, r0
   14c70:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14c72:	4b1d      	ldr	r3, [pc, #116]	; (14ce8 <hciCoreConnFree+0x80>)
   14c74:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14c76:	2308      	movs	r3, #8
   14c78:	73fb      	strb	r3, [r7, #15]
   14c7a:	e02f      	b.n	14cdc <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   14c7c:	68bb      	ldr	r3, [r7, #8]
   14c7e:	8a1b      	ldrh	r3, [r3, #16]
   14c80:	88fa      	ldrh	r2, [r7, #6]
   14c82:	429a      	cmp	r2, r3
   14c84:	d124      	bne.n	14cd0 <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   14c86:	68bb      	ldr	r3, [r7, #8]
   14c88:	681b      	ldr	r3, [r3, #0]
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	d007      	beq.n	14c9e <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   14c8e:	68bb      	ldr	r3, [r7, #8]
   14c90:	681b      	ldr	r3, [r3, #0]
   14c92:	4618      	mov	r0, r3
   14c94:	f005 fc3c 	bl	1a510 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   14c98:	68bb      	ldr	r3, [r7, #8]
   14c9a:	2200      	movs	r2, #0
   14c9c:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   14c9e:	68bb      	ldr	r3, [r7, #8]
   14ca0:	2200      	movs	r2, #0
   14ca2:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   14ca4:	68bb      	ldr	r3, [r7, #8]
   14ca6:	689b      	ldr	r3, [r3, #8]
   14ca8:	2b00      	cmp	r3, #0
   14caa:	d007      	beq.n	14cbc <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   14cac:	68bb      	ldr	r3, [r7, #8]
   14cae:	689b      	ldr	r3, [r3, #8]
   14cb0:	4618      	mov	r0, r3
   14cb2:	f005 fc2d 	bl	1a510 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   14cb6:	68bb      	ldr	r3, [r7, #8]
   14cb8:	2200      	movs	r2, #0
   14cba:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   14cbc:	68bb      	ldr	r3, [r7, #8]
   14cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14cc2:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   14cc4:	68bb      	ldr	r3, [r7, #8]
   14cc6:	7e5b      	ldrb	r3, [r3, #25]
   14cc8:	4618      	mov	r0, r3
   14cca:	f000 f895 	bl	14df8 <hciCoreTxReady>

      return;
   14cce:	e008      	b.n	14ce2 <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14cd0:	7bfb      	ldrb	r3, [r7, #15]
   14cd2:	3b01      	subs	r3, #1
   14cd4:	73fb      	strb	r3, [r7, #15]
   14cd6:	68bb      	ldr	r3, [r7, #8]
   14cd8:	331c      	adds	r3, #28
   14cda:	60bb      	str	r3, [r7, #8]
   14cdc:	7bfb      	ldrb	r3, [r7, #15]
   14cde:	2b00      	cmp	r3, #0
   14ce0:	d1cc      	bne.n	14c7c <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   14ce2:	3710      	adds	r7, #16
   14ce4:	46bd      	mov	sp, r7
   14ce6:	bd80      	pop	{r7, pc}
   14ce8:	1000930c 	.word	0x1000930c

00014cec <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   14cec:	b480      	push	{r7}
   14cee:	b085      	sub	sp, #20
   14cf0:	af00      	add	r7, sp, #0
   14cf2:	4603      	mov	r3, r0
   14cf4:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14cf6:	4b0e      	ldr	r3, [pc, #56]	; (14d30 <hciCoreConnByHandle+0x44>)
   14cf8:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14cfa:	2308      	movs	r3, #8
   14cfc:	73fb      	strb	r3, [r7, #15]
   14cfe:	e00c      	b.n	14d1a <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   14d00:	68bb      	ldr	r3, [r7, #8]
   14d02:	8a1b      	ldrh	r3, [r3, #16]
   14d04:	88fa      	ldrh	r2, [r7, #6]
   14d06:	429a      	cmp	r2, r3
   14d08:	d101      	bne.n	14d0e <hciCoreConnByHandle+0x22>
    {
      return pConn;
   14d0a:	68bb      	ldr	r3, [r7, #8]
   14d0c:	e009      	b.n	14d22 <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14d0e:	7bfb      	ldrb	r3, [r7, #15]
   14d10:	3b01      	subs	r3, #1
   14d12:	73fb      	strb	r3, [r7, #15]
   14d14:	68bb      	ldr	r3, [r7, #8]
   14d16:	331c      	adds	r3, #28
   14d18:	60bb      	str	r3, [r7, #8]
   14d1a:	7bfb      	ldrb	r3, [r7, #15]
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d1ef      	bne.n	14d00 <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   14d20:	2300      	movs	r3, #0
}
   14d22:	4618      	mov	r0, r3
   14d24:	3714      	adds	r7, #20
   14d26:	46bd      	mov	sp, r7
   14d28:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d2c:	4770      	bx	lr
   14d2e:	bf00      	nop
   14d30:	1000930c 	.word	0x1000930c

00014d34 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   14d34:	b480      	push	{r7}
   14d36:	b083      	sub	sp, #12
   14d38:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14d3a:	4b10      	ldr	r3, [pc, #64]	; (14d7c <hciCoreNextConnFragment+0x48>)
   14d3c:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14d3e:	2308      	movs	r3, #8
   14d40:	71fb      	strb	r3, [r7, #7]
   14d42:	e011      	b.n	14d68 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   14d44:	683b      	ldr	r3, [r7, #0]
   14d46:	8a1b      	ldrh	r3, [r3, #16]
   14d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14d4c:	4293      	cmp	r3, r2
   14d4e:	d005      	beq.n	14d5c <hciCoreNextConnFragment+0x28>
   14d50:	683b      	ldr	r3, [r7, #0]
   14d52:	7d9b      	ldrb	r3, [r3, #22]
   14d54:	2b00      	cmp	r3, #0
   14d56:	d001      	beq.n	14d5c <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   14d58:	683b      	ldr	r3, [r7, #0]
   14d5a:	e009      	b.n	14d70 <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14d5c:	79fb      	ldrb	r3, [r7, #7]
   14d5e:	3b01      	subs	r3, #1
   14d60:	71fb      	strb	r3, [r7, #7]
   14d62:	683b      	ldr	r3, [r7, #0]
   14d64:	331c      	adds	r3, #28
   14d66:	603b      	str	r3, [r7, #0]
   14d68:	79fb      	ldrb	r3, [r7, #7]
   14d6a:	2b00      	cmp	r3, #0
   14d6c:	d1ea      	bne.n	14d44 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   14d6e:	2300      	movs	r3, #0
}
   14d70:	4618      	mov	r0, r3
   14d72:	370c      	adds	r7, #12
   14d74:	46bd      	mov	sp, r7
   14d76:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d7a:	4770      	bx	lr
   14d7c:	1000930c 	.word	0x1000930c

00014d80 <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   14d80:	b580      	push	{r7, lr}
   14d82:	b082      	sub	sp, #8
   14d84:	af00      	add	r7, sp, #0
   14d86:	4603      	mov	r3, r0
   14d88:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   14d8a:	88fb      	ldrh	r3, [r7, #6]
   14d8c:	4618      	mov	r0, r3
   14d8e:	f7ff ff3d 	bl	14c0c <hciCoreConnAlloc>
}
   14d92:	bf00      	nop
   14d94:	3708      	adds	r7, #8
   14d96:	46bd      	mov	sp, r7
   14d98:	bd80      	pop	{r7, pc}

00014d9a <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   14d9a:	b580      	push	{r7, lr}
   14d9c:	b082      	sub	sp, #8
   14d9e:	af00      	add	r7, sp, #0
   14da0:	4603      	mov	r3, r0
   14da2:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   14da4:	88fb      	ldrh	r3, [r7, #6]
   14da6:	4618      	mov	r0, r3
   14da8:	f7ff ff5e 	bl	14c68 <hciCoreConnFree>
}
   14dac:	bf00      	nop
   14dae:	3708      	adds	r7, #8
   14db0:	46bd      	mov	sp, r7
   14db2:	bd80      	pop	{r7, pc}

00014db4 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   14db4:	b580      	push	{r7, lr}
   14db6:	b082      	sub	sp, #8
   14db8:	af00      	add	r7, sp, #0
   14dba:	6078      	str	r0, [r7, #4]
   14dbc:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   14dbe:	687b      	ldr	r3, [r7, #4]
   14dc0:	7e5b      	ldrb	r3, [r3, #25]
   14dc2:	3301      	adds	r3, #1
   14dc4:	b2da      	uxtb	r2, r3
   14dc6:	687b      	ldr	r3, [r7, #4]
   14dc8:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   14dca:	6839      	ldr	r1, [r7, #0]
   14dcc:	6878      	ldr	r0, [r7, #4]
   14dce:	f002 fa47 	bl	17260 <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   14dd2:	4b08      	ldr	r3, [pc, #32]	; (14df4 <hciCoreSendAclData+0x40>)
   14dd4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14dd8:	2b00      	cmp	r3, #0
   14dda:	d007      	beq.n	14dec <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   14ddc:	4b05      	ldr	r3, [pc, #20]	; (14df4 <hciCoreSendAclData+0x40>)
   14dde:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14de2:	3b01      	subs	r3, #1
   14de4:	b2da      	uxtb	r2, r3
   14de6:	4b03      	ldr	r3, [pc, #12]	; (14df4 <hciCoreSendAclData+0x40>)
   14de8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   14dec:	bf00      	nop
   14dee:	3708      	adds	r7, #8
   14df0:	46bd      	mov	sp, r7
   14df2:	bd80      	pop	{r7, pc}
   14df4:	1000930c 	.word	0x1000930c

00014df8 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   14df8:	b580      	push	{r7, lr}
   14dfa:	b086      	sub	sp, #24
   14dfc:	af00      	add	r7, sp, #0
   14dfe:	4603      	mov	r3, r0
   14e00:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   14e02:	79fb      	ldrb	r3, [r7, #7]
   14e04:	2b00      	cmp	r3, #0
   14e06:	d050      	beq.n	14eaa <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   14e08:	4b2d      	ldr	r3, [pc, #180]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e0a:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   14e0e:	79fb      	ldrb	r3, [r7, #7]
   14e10:	4413      	add	r3, r2
   14e12:	b2da      	uxtb	r2, r3
   14e14:	4b2a      	ldr	r3, [pc, #168]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e16:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   14e1a:	4b29      	ldr	r3, [pc, #164]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e1c:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   14e20:	4b27      	ldr	r3, [pc, #156]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e22:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   14e26:	429a      	cmp	r2, r3
   14e28:	d93f      	bls.n	14eaa <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   14e2a:	4b25      	ldr	r3, [pc, #148]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e2c:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   14e30:	4b23      	ldr	r3, [pc, #140]	; (14ec0 <hciCoreTxReady+0xc8>)
   14e32:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   14e36:	e038      	b.n	14eaa <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   14e38:	2000      	movs	r0, #0
   14e3a:	f000 f88d 	bl	14f58 <hciCoreTxAclContinue>
   14e3e:	4603      	mov	r3, r0
   14e40:	2b00      	cmp	r3, #0
   14e42:	d132      	bne.n	14eaa <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   14e44:	f107 030b 	add.w	r3, r7, #11
   14e48:	4619      	mov	r1, r3
   14e4a:	481e      	ldr	r0, [pc, #120]	; (14ec4 <hciCoreTxReady+0xcc>)
   14e4c:	f005 fb9a 	bl	1a584 <WsfMsgDeq>
   14e50:	6178      	str	r0, [r7, #20]
   14e52:	697b      	ldr	r3, [r7, #20]
   14e54:	2b00      	cmp	r3, #0
   14e56:	d02e      	beq.n	14eb6 <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   14e58:	697b      	ldr	r3, [r7, #20]
   14e5a:	781b      	ldrb	r3, [r3, #0]
   14e5c:	b29a      	uxth	r2, r3
   14e5e:	697b      	ldr	r3, [r7, #20]
   14e60:	3301      	adds	r3, #1
   14e62:	781b      	ldrb	r3, [r3, #0]
   14e64:	b29b      	uxth	r3, r3
   14e66:	021b      	lsls	r3, r3, #8
   14e68:	b29b      	uxth	r3, r3
   14e6a:	4413      	add	r3, r2
   14e6c:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   14e6e:	697b      	ldr	r3, [r7, #20]
   14e70:	3302      	adds	r3, #2
   14e72:	781b      	ldrb	r3, [r3, #0]
   14e74:	b29a      	uxth	r2, r3
   14e76:	697b      	ldr	r3, [r7, #20]
   14e78:	3303      	adds	r3, #3
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	b29b      	uxth	r3, r3
   14e7e:	021b      	lsls	r3, r3, #8
   14e80:	b29b      	uxth	r3, r3
   14e82:	4413      	add	r3, r2
   14e84:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   14e86:	8a7b      	ldrh	r3, [r7, #18]
   14e88:	4618      	mov	r0, r3
   14e8a:	f7ff ff2f 	bl	14cec <hciCoreConnByHandle>
   14e8e:	60f8      	str	r0, [r7, #12]
   14e90:	68fb      	ldr	r3, [r7, #12]
   14e92:	2b00      	cmp	r3, #0
   14e94:	d006      	beq.n	14ea4 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   14e96:	8a3b      	ldrh	r3, [r7, #16]
   14e98:	697a      	ldr	r2, [r7, #20]
   14e9a:	4619      	mov	r1, r3
   14e9c:	68f8      	ldr	r0, [r7, #12]
   14e9e:	f000 f813 	bl	14ec8 <hciCoreTxAclStart>
   14ea2:	e002      	b.n	14eaa <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   14ea4:	6978      	ldr	r0, [r7, #20]
   14ea6:	f005 fb33 	bl	1a510 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   14eaa:	4b05      	ldr	r3, [pc, #20]	; (14ec0 <hciCoreTxReady+0xc8>)
   14eac:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14eb0:	2b00      	cmp	r3, #0
   14eb2:	d1c1      	bne.n	14e38 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   14eb4:	e000      	b.n	14eb8 <hciCoreTxReady+0xc0>
        break;
   14eb6:	bf00      	nop
}
   14eb8:	bf00      	nop
   14eba:	3718      	adds	r7, #24
   14ebc:	46bd      	mov	sp, r7
   14ebe:	bd80      	pop	{r7, pc}
   14ec0:	1000930c 	.word	0x1000930c
   14ec4:	100093fc 	.word	0x100093fc

00014ec8 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   14ec8:	b580      	push	{r7, lr}
   14eca:	b086      	sub	sp, #24
   14ecc:	af00      	add	r7, sp, #0
   14ece:	60f8      	str	r0, [r7, #12]
   14ed0:	460b      	mov	r3, r1
   14ed2:	607a      	str	r2, [r7, #4]
   14ed4:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   14ed6:	f000 fb85 	bl	155e4 <HciGetBufSize>
   14eda:	4603      	mov	r3, r0
   14edc:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   14ede:	897a      	ldrh	r2, [r7, #10]
   14ee0:	8afb      	ldrh	r3, [r7, #22]
   14ee2:	429a      	cmp	r2, r3
   14ee4:	d92d      	bls.n	14f42 <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   14ee6:	897a      	ldrh	r2, [r7, #10]
   14ee8:	8afb      	ldrh	r3, [r7, #22]
   14eea:	1ad3      	subs	r3, r2, r3
   14eec:	b29a      	uxth	r2, r3
   14eee:	68fb      	ldr	r3, [r7, #12]
   14ef0:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   14ef2:	8afb      	ldrh	r3, [r7, #22]
   14ef4:	687a      	ldr	r2, [r7, #4]
   14ef6:	441a      	add	r2, r3
   14ef8:	68fb      	ldr	r3, [r7, #12]
   14efa:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   14efc:	68fb      	ldr	r3, [r7, #12]
   14efe:	687a      	ldr	r2, [r7, #4]
   14f00:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   14f02:	68fb      	ldr	r3, [r7, #12]
   14f04:	2201      	movs	r2, #1
   14f06:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   14f08:	687b      	ldr	r3, [r7, #4]
   14f0a:	3302      	adds	r3, #2
   14f0c:	8afa      	ldrh	r2, [r7, #22]
   14f0e:	b2d2      	uxtb	r2, r2
   14f10:	701a      	strb	r2, [r3, #0]
   14f12:	687b      	ldr	r3, [r7, #4]
   14f14:	3303      	adds	r3, #3
   14f16:	8afa      	ldrh	r2, [r7, #22]
   14f18:	0a12      	lsrs	r2, r2, #8
   14f1a:	b292      	uxth	r2, r2
   14f1c:	b2d2      	uxtb	r2, r2
   14f1e:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   14f20:	6879      	ldr	r1, [r7, #4]
   14f22:	68f8      	ldr	r0, [r7, #12]
   14f24:	f7ff ff46 	bl	14db4 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   14f28:	bf00      	nop
   14f2a:	4b0a      	ldr	r3, [pc, #40]	; (14f54 <hciCoreTxAclStart+0x8c>)
   14f2c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14f30:	2b00      	cmp	r3, #0
   14f32:	d00a      	beq.n	14f4a <hciCoreTxAclStart+0x82>
   14f34:	68f8      	ldr	r0, [r7, #12]
   14f36:	f000 f80f 	bl	14f58 <hciCoreTxAclContinue>
   14f3a:	4603      	mov	r3, r0
   14f3c:	2b00      	cmp	r3, #0
   14f3e:	d1f4      	bne.n	14f2a <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   14f40:	e003      	b.n	14f4a <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   14f42:	6879      	ldr	r1, [r7, #4]
   14f44:	68f8      	ldr	r0, [r7, #12]
   14f46:	f7ff ff35 	bl	14db4 <hciCoreSendAclData>
}
   14f4a:	bf00      	nop
   14f4c:	3718      	adds	r7, #24
   14f4e:	46bd      	mov	sp, r7
   14f50:	bd80      	pop	{r7, pc}
   14f52:	bf00      	nop
   14f54:	1000930c 	.word	0x1000930c

00014f58 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   14f58:	b590      	push	{r4, r7, lr}
   14f5a:	b085      	sub	sp, #20
   14f5c:	af00      	add	r7, sp, #0
   14f5e:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   14f60:	687b      	ldr	r3, [r7, #4]
   14f62:	2b00      	cmp	r3, #0
   14f64:	d102      	bne.n	14f6c <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   14f66:	f7ff fee5 	bl	14d34 <hciCoreNextConnFragment>
   14f6a:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   14f6c:	687b      	ldr	r3, [r7, #4]
   14f6e:	2b00      	cmp	r3, #0
   14f70:	d049      	beq.n	15006 <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   14f72:	687b      	ldr	r3, [r7, #4]
   14f74:	8a5c      	ldrh	r4, [r3, #18]
   14f76:	f000 fb35 	bl	155e4 <HciGetBufSize>
   14f7a:	4603      	mov	r3, r0
   14f7c:	429c      	cmp	r4, r3
   14f7e:	d202      	bcs.n	14f86 <hciCoreTxAclContinue+0x2e>
   14f80:	687b      	ldr	r3, [r7, #4]
   14f82:	8a5b      	ldrh	r3, [r3, #18]
   14f84:	e002      	b.n	14f8c <hciCoreTxAclContinue+0x34>
   14f86:	f000 fb2d 	bl	155e4 <HciGetBufSize>
   14f8a:	4603      	mov	r3, r0
   14f8c:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   14f8e:	89fb      	ldrh	r3, [r7, #14]
   14f90:	2b00      	cmp	r3, #0
   14f92:	d038      	beq.n	15006 <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   14f94:	687b      	ldr	r3, [r7, #4]
   14f96:	8a5a      	ldrh	r2, [r3, #18]
   14f98:	89fb      	ldrh	r3, [r7, #14]
   14f9a:	1ad3      	subs	r3, r2, r3
   14f9c:	b29a      	uxth	r2, r3
   14f9e:	687b      	ldr	r3, [r7, #4]
   14fa0:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   14fa2:	687b      	ldr	r3, [r7, #4]
   14fa4:	685b      	ldr	r3, [r3, #4]
   14fa6:	687a      	ldr	r2, [r7, #4]
   14fa8:	8a12      	ldrh	r2, [r2, #16]
   14faa:	b2d2      	uxtb	r2, r2
   14fac:	701a      	strb	r2, [r3, #0]
   14fae:	687b      	ldr	r3, [r7, #4]
   14fb0:	685b      	ldr	r3, [r3, #4]
   14fb2:	3301      	adds	r3, #1
   14fb4:	687a      	ldr	r2, [r7, #4]
   14fb6:	8a12      	ldrh	r2, [r2, #16]
   14fb8:	0a12      	lsrs	r2, r2, #8
   14fba:	b292      	uxth	r2, r2
   14fbc:	f042 0210 	orr.w	r2, r2, #16
   14fc0:	b292      	uxth	r2, r2
   14fc2:	b2d2      	uxtb	r2, r2
   14fc4:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   14fc6:	687b      	ldr	r3, [r7, #4]
   14fc8:	685b      	ldr	r3, [r3, #4]
   14fca:	3302      	adds	r3, #2
   14fcc:	89fa      	ldrh	r2, [r7, #14]
   14fce:	b2d2      	uxtb	r2, r2
   14fd0:	701a      	strb	r2, [r3, #0]
   14fd2:	687b      	ldr	r3, [r7, #4]
   14fd4:	685b      	ldr	r3, [r3, #4]
   14fd6:	3303      	adds	r3, #3
   14fd8:	89fa      	ldrh	r2, [r7, #14]
   14fda:	0a12      	lsrs	r2, r2, #8
   14fdc:	b292      	uxth	r2, r2
   14fde:	b2d2      	uxtb	r2, r2
   14fe0:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   14fe2:	687b      	ldr	r3, [r7, #4]
   14fe4:	685b      	ldr	r3, [r3, #4]
   14fe6:	4619      	mov	r1, r3
   14fe8:	6878      	ldr	r0, [r7, #4]
   14fea:	f7ff fee3 	bl	14db4 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   14fee:	687b      	ldr	r3, [r7, #4]
   14ff0:	8a5b      	ldrh	r3, [r3, #18]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d005      	beq.n	15002 <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   14ff6:	687b      	ldr	r3, [r7, #4]
   14ff8:	685a      	ldr	r2, [r3, #4]
   14ffa:	89fb      	ldrh	r3, [r7, #14]
   14ffc:	441a      	add	r2, r3
   14ffe:	687b      	ldr	r3, [r7, #4]
   15000:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   15002:	2301      	movs	r3, #1
   15004:	e000      	b.n	15008 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   15006:	2300      	movs	r3, #0
}
   15008:	4618      	mov	r0, r3
   1500a:	3714      	adds	r7, #20
   1500c:	46bd      	mov	sp, r7
   1500e:	bd90      	pop	{r4, r7, pc}

00015010 <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   15010:	b580      	push	{r7, lr}
   15012:	b082      	sub	sp, #8
   15014:	af00      	add	r7, sp, #0
   15016:	6078      	str	r0, [r7, #4]
   15018:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   1501a:	687b      	ldr	r3, [r7, #4]
   1501c:	7d9b      	ldrb	r3, [r3, #22]
   1501e:	2b00      	cmp	r3, #0
   15020:	d00f      	beq.n	15042 <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   15022:	687b      	ldr	r3, [r7, #4]
   15024:	8a5b      	ldrh	r3, [r3, #18]
   15026:	2b00      	cmp	r3, #0
   15028:	d111      	bne.n	1504e <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   1502a:	687b      	ldr	r3, [r7, #4]
   1502c:	681b      	ldr	r3, [r3, #0]
   1502e:	4618      	mov	r0, r3
   15030:	f005 fa6e 	bl	1a510 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   15034:	687b      	ldr	r3, [r7, #4]
   15036:	2200      	movs	r2, #0
   15038:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   1503a:	687b      	ldr	r3, [r7, #4]
   1503c:	2200      	movs	r2, #0
   1503e:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   15040:	e005      	b.n	1504e <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   15042:	683b      	ldr	r3, [r7, #0]
   15044:	2b00      	cmp	r3, #0
   15046:	d002      	beq.n	1504e <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   15048:	6838      	ldr	r0, [r7, #0]
   1504a:	f005 fa61 	bl	1a510 <WsfMsgFree>
}
   1504e:	bf00      	nop
   15050:	3708      	adds	r7, #8
   15052:	46bd      	mov	sp, r7
   15054:	bd80      	pop	{r7, pc}
	...

00015058 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   15058:	b580      	push	{r7, lr}
   1505a:	b088      	sub	sp, #32
   1505c:	af00      	add	r7, sp, #0
   1505e:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   15060:	2300      	movs	r3, #0
   15062:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   15064:	2301      	movs	r3, #1
   15066:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   15068:	687b      	ldr	r3, [r7, #4]
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	b29a      	uxth	r2, r3
   1506e:	687b      	ldr	r3, [r7, #4]
   15070:	3301      	adds	r3, #1
   15072:	781b      	ldrb	r3, [r3, #0]
   15074:	b29b      	uxth	r3, r3
   15076:	021b      	lsls	r3, r3, #8
   15078:	b29b      	uxth	r3, r3
   1507a:	4413      	add	r3, r2
   1507c:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   1507e:	8b3b      	ldrh	r3, [r7, #24]
   15080:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   15084:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   15086:	8b3b      	ldrh	r3, [r7, #24]
   15088:	f3c3 030b 	ubfx	r3, r3, #0, #12
   1508c:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   1508e:	687b      	ldr	r3, [r7, #4]
   15090:	3302      	adds	r3, #2
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	b29a      	uxth	r2, r3
   15096:	687b      	ldr	r3, [r7, #4]
   15098:	3303      	adds	r3, #3
   1509a:	781b      	ldrb	r3, [r3, #0]
   1509c:	b29b      	uxth	r3, r3
   1509e:	021b      	lsls	r3, r3, #8
   150a0:	b29b      	uxth	r3, r3
   150a2:	4413      	add	r3, r2
   150a4:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   150a6:	8b3b      	ldrh	r3, [r7, #24]
   150a8:	4618      	mov	r0, r3
   150aa:	f7ff fe1f 	bl	14cec <hciCoreConnByHandle>
   150ae:	6138      	str	r0, [r7, #16]
   150b0:	693b      	ldr	r3, [r7, #16]
   150b2:	2b00      	cmp	r3, #0
   150b4:	f000 80ad 	beq.w	15212 <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   150b8:	8afb      	ldrh	r3, [r7, #22]
   150ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   150be:	d17c      	bne.n	151ba <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   150c0:	693b      	ldr	r3, [r7, #16]
   150c2:	689b      	ldr	r3, [r3, #8]
   150c4:	2b00      	cmp	r3, #0
   150c6:	d007      	beq.n	150d8 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   150c8:	693b      	ldr	r3, [r7, #16]
   150ca:	689b      	ldr	r3, [r3, #8]
   150cc:	4618      	mov	r0, r3
   150ce:	f005 fa1f 	bl	1a510 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   150d2:	693b      	ldr	r3, [r7, #16]
   150d4:	2200      	movs	r2, #0
   150d6:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   150d8:	8abb      	ldrh	r3, [r7, #20]
   150da:	2b03      	cmp	r3, #3
   150dc:	f240 8099 	bls.w	15212 <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   150e0:	687b      	ldr	r3, [r7, #4]
   150e2:	3304      	adds	r3, #4
   150e4:	781b      	ldrb	r3, [r3, #0]
   150e6:	b29a      	uxth	r2, r3
   150e8:	687b      	ldr	r3, [r7, #4]
   150ea:	3305      	adds	r3, #5
   150ec:	781b      	ldrb	r3, [r3, #0]
   150ee:	b29b      	uxth	r3, r3
   150f0:	021b      	lsls	r3, r3, #8
   150f2:	b29b      	uxth	r3, r3
   150f4:	4413      	add	r3, r2
   150f6:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   150f8:	89fb      	ldrh	r3, [r7, #14]
   150fa:	3304      	adds	r3, #4
   150fc:	4a4a      	ldr	r2, [pc, #296]	; (15228 <hciCoreAclReassembly+0x1d0>)
   150fe:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   15102:	4293      	cmp	r3, r2
   15104:	f300 8085 	bgt.w	15212 <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   15108:	89fb      	ldrh	r3, [r7, #14]
   1510a:	1d1a      	adds	r2, r3, #4
   1510c:	8abb      	ldrh	r3, [r7, #20]
   1510e:	429a      	cmp	r2, r3
   15110:	dd4e      	ble.n	151b0 <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   15112:	89fb      	ldrh	r3, [r7, #14]
   15114:	3308      	adds	r3, #8
   15116:	b29b      	uxth	r3, r3
   15118:	2100      	movs	r1, #0
   1511a:	4618      	mov	r0, r3
   1511c:	f005 f9cc 	bl	1a4b8 <WsfMsgDataAlloc>
   15120:	4602      	mov	r2, r0
   15122:	693b      	ldr	r3, [r7, #16]
   15124:	609a      	str	r2, [r3, #8]
   15126:	693b      	ldr	r3, [r7, #16]
   15128:	689b      	ldr	r3, [r3, #8]
   1512a:	2b00      	cmp	r3, #0
   1512c:	d071      	beq.n	15212 <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   1512e:	693b      	ldr	r3, [r7, #16]
   15130:	689a      	ldr	r2, [r3, #8]
   15132:	693b      	ldr	r3, [r7, #16]
   15134:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   15136:	693b      	ldr	r3, [r7, #16]
   15138:	68db      	ldr	r3, [r3, #12]
   1513a:	1c59      	adds	r1, r3, #1
   1513c:	693a      	ldr	r2, [r7, #16]
   1513e:	60d1      	str	r1, [r2, #12]
   15140:	8b3a      	ldrh	r2, [r7, #24]
   15142:	b2d2      	uxtb	r2, r2
   15144:	701a      	strb	r2, [r3, #0]
   15146:	693b      	ldr	r3, [r7, #16]
   15148:	68db      	ldr	r3, [r3, #12]
   1514a:	1c59      	adds	r1, r3, #1
   1514c:	693a      	ldr	r2, [r7, #16]
   1514e:	60d1      	str	r1, [r2, #12]
   15150:	8b3a      	ldrh	r2, [r7, #24]
   15152:	0a12      	lsrs	r2, r2, #8
   15154:	b292      	uxth	r2, r2
   15156:	b2d2      	uxtb	r2, r2
   15158:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   1515a:	693b      	ldr	r3, [r7, #16]
   1515c:	68db      	ldr	r3, [r3, #12]
   1515e:	1c59      	adds	r1, r3, #1
   15160:	693a      	ldr	r2, [r7, #16]
   15162:	60d1      	str	r1, [r2, #12]
   15164:	89fa      	ldrh	r2, [r7, #14]
   15166:	b2d2      	uxtb	r2, r2
   15168:	3204      	adds	r2, #4
   1516a:	b2d2      	uxtb	r2, r2
   1516c:	701a      	strb	r2, [r3, #0]
   1516e:	693b      	ldr	r3, [r7, #16]
   15170:	68db      	ldr	r3, [r3, #12]
   15172:	1c59      	adds	r1, r3, #1
   15174:	693a      	ldr	r2, [r7, #16]
   15176:	60d1      	str	r1, [r2, #12]
   15178:	89fa      	ldrh	r2, [r7, #14]
   1517a:	3204      	adds	r2, #4
   1517c:	1212      	asrs	r2, r2, #8
   1517e:	b2d2      	uxtb	r2, r2
   15180:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   15182:	693b      	ldr	r3, [r7, #16]
   15184:	68d8      	ldr	r0, [r3, #12]
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	3304      	adds	r3, #4
   1518a:	8aba      	ldrh	r2, [r7, #20]
   1518c:	4619      	mov	r1, r3
   1518e:	f7f6 ffe7 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   15192:	693b      	ldr	r3, [r7, #16]
   15194:	68da      	ldr	r2, [r3, #12]
   15196:	8abb      	ldrh	r3, [r7, #20]
   15198:	441a      	add	r2, r3
   1519a:	693b      	ldr	r3, [r7, #16]
   1519c:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1519e:	89fa      	ldrh	r2, [r7, #14]
   151a0:	8abb      	ldrh	r3, [r7, #20]
   151a2:	1ad3      	subs	r3, r2, r3
   151a4:	b29b      	uxth	r3, r3
   151a6:	3304      	adds	r3, #4
   151a8:	b29a      	uxth	r2, r3
   151aa:	693b      	ldr	r3, [r7, #16]
   151ac:	829a      	strh	r2, [r3, #20]
   151ae:	e030      	b.n	15212 <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   151b0:	687b      	ldr	r3, [r7, #4]
   151b2:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   151b4:	2300      	movs	r3, #0
   151b6:	76fb      	strb	r3, [r7, #27]
   151b8:	e02b      	b.n	15212 <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   151ba:	8afb      	ldrh	r3, [r7, #22]
   151bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   151c0:	d127      	bne.n	15212 <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   151c2:	693b      	ldr	r3, [r7, #16]
   151c4:	689b      	ldr	r3, [r3, #8]
   151c6:	2b00      	cmp	r3, #0
   151c8:	d023      	beq.n	15212 <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   151ca:	693b      	ldr	r3, [r7, #16]
   151cc:	8a9b      	ldrh	r3, [r3, #20]
   151ce:	8aba      	ldrh	r2, [r7, #20]
   151d0:	429a      	cmp	r2, r3
   151d2:	d81e      	bhi.n	15212 <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   151d4:	693b      	ldr	r3, [r7, #16]
   151d6:	68d8      	ldr	r0, [r3, #12]
   151d8:	687b      	ldr	r3, [r7, #4]
   151da:	3304      	adds	r3, #4
   151dc:	8aba      	ldrh	r2, [r7, #20]
   151de:	4619      	mov	r1, r3
   151e0:	f7f6 ffbe 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   151e4:	693b      	ldr	r3, [r7, #16]
   151e6:	68da      	ldr	r2, [r3, #12]
   151e8:	8abb      	ldrh	r3, [r7, #20]
   151ea:	441a      	add	r2, r3
   151ec:	693b      	ldr	r3, [r7, #16]
   151ee:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   151f0:	693b      	ldr	r3, [r7, #16]
   151f2:	8a9a      	ldrh	r2, [r3, #20]
   151f4:	8abb      	ldrh	r3, [r7, #20]
   151f6:	1ad3      	subs	r3, r2, r3
   151f8:	b29a      	uxth	r2, r3
   151fa:	693b      	ldr	r3, [r7, #16]
   151fc:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   151fe:	693b      	ldr	r3, [r7, #16]
   15200:	8a9b      	ldrh	r3, [r3, #20]
   15202:	2b00      	cmp	r3, #0
   15204:	d105      	bne.n	15212 <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   15206:	693b      	ldr	r3, [r7, #16]
   15208:	689b      	ldr	r3, [r3, #8]
   1520a:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   1520c:	693b      	ldr	r3, [r7, #16]
   1520e:	2200      	movs	r2, #0
   15210:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   15212:	7efb      	ldrb	r3, [r7, #27]
   15214:	2b00      	cmp	r3, #0
   15216:	d002      	beq.n	1521e <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   15218:	6878      	ldr	r0, [r7, #4]
   1521a:	f005 f979 	bl	1a510 <WsfMsgFree>
  }

  return pDataRtn;
   1521e:	69fb      	ldr	r3, [r7, #28]
}
   15220:	4618      	mov	r0, r3
   15222:	3720      	adds	r7, #32
   15224:	46bd      	mov	sp, r7
   15226:	bd80      	pop	{r7, pc}
   15228:	1000930c 	.word	0x1000930c

0001522c <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   1522c:	b580      	push	{r7, lr}
   1522e:	b082      	sub	sp, #8
   15230:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   15232:	4b19      	ldr	r3, [pc, #100]	; (15298 <HciCoreInit+0x6c>)
   15234:	2200      	movs	r2, #0
   15236:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   1523a:	4b17      	ldr	r3, [pc, #92]	; (15298 <HciCoreInit+0x6c>)
   1523c:	2200      	movs	r2, #0
   1523e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   15242:	2300      	movs	r3, #0
   15244:	71fb      	strb	r3, [r7, #7]
   15246:	e00d      	b.n	15264 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   15248:	79fa      	ldrb	r2, [r7, #7]
   1524a:	4913      	ldr	r1, [pc, #76]	; (15298 <HciCoreInit+0x6c>)
   1524c:	4613      	mov	r3, r2
   1524e:	00db      	lsls	r3, r3, #3
   15250:	1a9b      	subs	r3, r3, r2
   15252:	009b      	lsls	r3, r3, #2
   15254:	440b      	add	r3, r1
   15256:	3310      	adds	r3, #16
   15258:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1525c:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   1525e:	79fb      	ldrb	r3, [r7, #7]
   15260:	3301      	adds	r3, #1
   15262:	71fb      	strb	r3, [r7, #7]
   15264:	79fb      	ldrb	r3, [r7, #7]
   15266:	2b07      	cmp	r3, #7
   15268:	d9ee      	bls.n	15248 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   1526a:	4b0b      	ldr	r3, [pc, #44]	; (15298 <HciCoreInit+0x6c>)
   1526c:	221b      	movs	r2, #27
   1526e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   15272:	4b09      	ldr	r3, [pc, #36]	; (15298 <HciCoreInit+0x6c>)
   15274:	2205      	movs	r2, #5
   15276:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   1527a:	4b07      	ldr	r3, [pc, #28]	; (15298 <HciCoreInit+0x6c>)
   1527c:	2203      	movs	r2, #3
   1527e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   15282:	4b05      	ldr	r3, [pc, #20]	; (15298 <HciCoreInit+0x6c>)
   15284:	2200      	movs	r2, #0
   15286:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   1528a:	f000 f8d5 	bl	15438 <hciCoreInit>
}
   1528e:	bf00      	nop
   15290:	3708      	adds	r7, #8
   15292:	46bd      	mov	sp, r7
   15294:	bd80      	pop	{r7, pc}
   15296:	bf00      	nop
   15298:	1000930c 	.word	0x1000930c

0001529c <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   1529c:	b580      	push	{r7, lr}
   1529e:	b084      	sub	sp, #16
   152a0:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   152a2:	4b24      	ldr	r3, [pc, #144]	; (15334 <HciResetSequence+0x98>)
   152a4:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   152a6:	e002      	b.n	152ae <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   152a8:	6878      	ldr	r0, [r7, #4]
   152aa:	f005 f931 	bl	1a510 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   152ae:	1cfb      	adds	r3, r7, #3
   152b0:	4619      	mov	r1, r3
   152b2:	4821      	ldr	r0, [pc, #132]	; (15338 <HciResetSequence+0x9c>)
   152b4:	f005 f966 	bl	1a584 <WsfMsgDeq>
   152b8:	6078      	str	r0, [r7, #4]
   152ba:	687b      	ldr	r3, [r7, #4]
   152bc:	2b00      	cmp	r3, #0
   152be:	d1f3      	bne.n	152a8 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   152c0:	2308      	movs	r3, #8
   152c2:	73fb      	strb	r3, [r7, #15]
   152c4:	e029      	b.n	1531a <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   152c6:	68bb      	ldr	r3, [r7, #8]
   152c8:	681b      	ldr	r3, [r3, #0]
   152ca:	2b00      	cmp	r3, #0
   152cc:	d007      	beq.n	152de <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   152ce:	68bb      	ldr	r3, [r7, #8]
   152d0:	681b      	ldr	r3, [r3, #0]
   152d2:	4618      	mov	r0, r3
   152d4:	f005 f91c 	bl	1a510 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   152d8:	68bb      	ldr	r3, [r7, #8]
   152da:	2200      	movs	r2, #0
   152dc:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   152de:	68bb      	ldr	r3, [r7, #8]
   152e0:	2200      	movs	r2, #0
   152e2:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   152e4:	68bb      	ldr	r3, [r7, #8]
   152e6:	689b      	ldr	r3, [r3, #8]
   152e8:	2b00      	cmp	r3, #0
   152ea:	d007      	beq.n	152fc <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   152ec:	68bb      	ldr	r3, [r7, #8]
   152ee:	689b      	ldr	r3, [r3, #8]
   152f0:	4618      	mov	r0, r3
   152f2:	f005 f90d 	bl	1a510 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   152f6:	68bb      	ldr	r3, [r7, #8]
   152f8:	2200      	movs	r2, #0
   152fa:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   152fc:	68bb      	ldr	r3, [r7, #8]
   152fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15302:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   15304:	68bb      	ldr	r3, [r7, #8]
   15306:	7e5b      	ldrb	r3, [r3, #25]
   15308:	4618      	mov	r0, r3
   1530a:	f7ff fd75 	bl	14df8 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1530e:	7bfb      	ldrb	r3, [r7, #15]
   15310:	3b01      	subs	r3, #1
   15312:	73fb      	strb	r3, [r7, #15]
   15314:	68bb      	ldr	r3, [r7, #8]
   15316:	331c      	adds	r3, #28
   15318:	60bb      	str	r3, [r7, #8]
   1531a:	7bfb      	ldrb	r3, [r7, #15]
   1531c:	2b00      	cmp	r3, #0
   1531e:	d1d2      	bne.n	152c6 <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   15320:	4b05      	ldr	r3, [pc, #20]	; (15338 <HciResetSequence+0x9c>)
   15322:	2201      	movs	r2, #1
   15324:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   15326:	f002 f923 	bl	17570 <hciCoreResetStart>
}
   1532a:	bf00      	nop
   1532c:	3710      	adds	r7, #16
   1532e:	46bd      	mov	sp, r7
   15330:	bd80      	pop	{r7, pc}
   15332:	bf00      	nop
   15334:	1000930c 	.word	0x1000930c
   15338:	10009e2c 	.word	0x10009e2c

0001533c <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   1533c:	b480      	push	{r7}
   1533e:	b083      	sub	sp, #12
   15340:	af00      	add	r7, sp, #0
   15342:	4603      	mov	r3, r0
   15344:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   15346:	4a05      	ldr	r2, [pc, #20]	; (1535c <HciSetMaxRxAclLen+0x20>)
   15348:	88fb      	ldrh	r3, [r7, #6]
   1534a:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   1534e:	bf00      	nop
   15350:	370c      	adds	r7, #12
   15352:	46bd      	mov	sp, r7
   15354:	f85d 7b04 	ldr.w	r7, [sp], #4
   15358:	4770      	bx	lr
   1535a:	bf00      	nop
   1535c:	1000930c 	.word	0x1000930c

00015360 <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   15360:	b590      	push	{r4, r7, lr}
   15362:	b085      	sub	sp, #20
   15364:	af00      	add	r7, sp, #0
   15366:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   15368:	687b      	ldr	r3, [r7, #4]
   1536a:	781b      	ldrb	r3, [r3, #0]
   1536c:	b29a      	uxth	r2, r3
   1536e:	687b      	ldr	r3, [r7, #4]
   15370:	3301      	adds	r3, #1
   15372:	781b      	ldrb	r3, [r3, #0]
   15374:	b29b      	uxth	r3, r3
   15376:	021b      	lsls	r3, r3, #8
   15378:	b29b      	uxth	r3, r3
   1537a:	4413      	add	r3, r2
   1537c:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   1537e:	687b      	ldr	r3, [r7, #4]
   15380:	3302      	adds	r3, #2
   15382:	781b      	ldrb	r3, [r3, #0]
   15384:	b29a      	uxth	r2, r3
   15386:	687b      	ldr	r3, [r7, #4]
   15388:	3303      	adds	r3, #3
   1538a:	781b      	ldrb	r3, [r3, #0]
   1538c:	b29b      	uxth	r3, r3
   1538e:	021b      	lsls	r3, r3, #8
   15390:	b29b      	uxth	r3, r3
   15392:	4413      	add	r3, r2
   15394:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15396:	89fb      	ldrh	r3, [r7, #14]
   15398:	4618      	mov	r0, r3
   1539a:	f7ff fca7 	bl	14cec <hciCoreConnByHandle>
   1539e:	60b8      	str	r0, [r7, #8]
   153a0:	68bb      	ldr	r3, [r7, #8]
   153a2:	2b00      	cmp	r3, #0
   153a4:	d03a      	beq.n	1541c <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   153a6:	4821      	ldr	r0, [pc, #132]	; (1542c <HciSendAclData+0xcc>)
   153a8:	f005 f9cd 	bl	1a746 <WsfQueueEmpty>
   153ac:	4603      	mov	r3, r0
   153ae:	2b00      	cmp	r3, #0
   153b0:	d00b      	beq.n	153ca <HciSendAclData+0x6a>
   153b2:	4b1f      	ldr	r3, [pc, #124]	; (15430 <HciSendAclData+0xd0>)
   153b4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   153b8:	2b00      	cmp	r3, #0
   153ba:	d006      	beq.n	153ca <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   153bc:	89bb      	ldrh	r3, [r7, #12]
   153be:	687a      	ldr	r2, [r7, #4]
   153c0:	4619      	mov	r1, r3
   153c2:	68b8      	ldr	r0, [r7, #8]
   153c4:	f7ff fd80 	bl	14ec8 <hciCoreTxAclStart>
   153c8:	e004      	b.n	153d4 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   153ca:	687a      	ldr	r2, [r7, #4]
   153cc:	2100      	movs	r1, #0
   153ce:	4817      	ldr	r0, [pc, #92]	; (1542c <HciSendAclData+0xcc>)
   153d0:	f005 f8c3 	bl	1a55a <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   153d4:	89bb      	ldrh	r3, [r7, #12]
   153d6:	1e5c      	subs	r4, r3, #1
   153d8:	f000 f904 	bl	155e4 <HciGetBufSize>
   153dc:	4603      	mov	r3, r0
   153de:	fb94 f3f3 	sdiv	r3, r4, r3
   153e2:	1c59      	adds	r1, r3, #1
   153e4:	68bb      	ldr	r3, [r7, #8]
   153e6:	7e1a      	ldrb	r2, [r3, #24]
   153e8:	b2cb      	uxtb	r3, r1
   153ea:	4413      	add	r3, r2
   153ec:	b2da      	uxtb	r2, r3
   153ee:	68bb      	ldr	r3, [r7, #8]
   153f0:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   153f2:	68bb      	ldr	r3, [r7, #8]
   153f4:	7e1a      	ldrb	r2, [r3, #24]
   153f6:	4b0e      	ldr	r3, [pc, #56]	; (15430 <HciSendAclData+0xd0>)
   153f8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   153fc:	429a      	cmp	r2, r3
   153fe:	d310      	bcc.n	15422 <HciSendAclData+0xc2>
   15400:	68bb      	ldr	r3, [r7, #8]
   15402:	7ddb      	ldrb	r3, [r3, #23]
   15404:	2b00      	cmp	r3, #0
   15406:	d10c      	bne.n	15422 <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   15408:	68bb      	ldr	r3, [r7, #8]
   1540a:	2201      	movs	r2, #1
   1540c:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   1540e:	4b09      	ldr	r3, [pc, #36]	; (15434 <HciSendAclData+0xd4>)
   15410:	695b      	ldr	r3, [r3, #20]
   15412:	89fa      	ldrh	r2, [r7, #14]
   15414:	2101      	movs	r1, #1
   15416:	4610      	mov	r0, r2
   15418:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   1541a:	e002      	b.n	15422 <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   1541c:	6878      	ldr	r0, [r7, #4]
   1541e:	f005 f877 	bl	1a510 <WsfMsgFree>
}
   15422:	bf00      	nop
   15424:	3714      	adds	r7, #20
   15426:	46bd      	mov	sp, r7
   15428:	bd90      	pop	{r4, r7, pc}
   1542a:	bf00      	nop
   1542c:	100093fc 	.word	0x100093fc
   15430:	1000930c 	.word	0x1000930c
   15434:	10009e2c 	.word	0x10009e2c

00015438 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   15438:	b580      	push	{r7, lr}
   1543a:	af00      	add	r7, sp, #0
  hciCmdInit();
   1543c:	f7fe fc72 	bl	13d24 <hciCmdInit>
}
   15440:	bf00      	nop
   15442:	bd80      	pop	{r7, pc}

00015444 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   15444:	b580      	push	{r7, lr}
   15446:	b086      	sub	sp, #24
   15448:	af00      	add	r7, sp, #0
   1544a:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   1544c:	2300      	movs	r3, #0
   1544e:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   15450:	687b      	ldr	r3, [r7, #4]
   15452:	1c5a      	adds	r2, r3, #1
   15454:	607a      	str	r2, [r7, #4]
   15456:	781b      	ldrb	r3, [r3, #0]
   15458:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   1545a:	e04c      	b.n	154f6 <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   1545c:	687b      	ldr	r3, [r7, #4]
   1545e:	781b      	ldrb	r3, [r3, #0]
   15460:	b29a      	uxth	r2, r3
   15462:	687b      	ldr	r3, [r7, #4]
   15464:	3301      	adds	r3, #1
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	b29b      	uxth	r3, r3
   1546a:	021b      	lsls	r3, r3, #8
   1546c:	b29b      	uxth	r3, r3
   1546e:	4413      	add	r3, r2
   15470:	82bb      	strh	r3, [r7, #20]
   15472:	687b      	ldr	r3, [r7, #4]
   15474:	3302      	adds	r3, #2
   15476:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   15478:	687b      	ldr	r3, [r7, #4]
   1547a:	781b      	ldrb	r3, [r3, #0]
   1547c:	b29a      	uxth	r2, r3
   1547e:	687b      	ldr	r3, [r7, #4]
   15480:	3301      	adds	r3, #1
   15482:	781b      	ldrb	r3, [r3, #0]
   15484:	b29b      	uxth	r3, r3
   15486:	021b      	lsls	r3, r3, #8
   15488:	b29b      	uxth	r3, r3
   1548a:	4413      	add	r3, r2
   1548c:	827b      	strh	r3, [r7, #18]
   1548e:	687b      	ldr	r3, [r7, #4]
   15490:	3302      	adds	r3, #2
   15492:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15494:	8abb      	ldrh	r3, [r7, #20]
   15496:	4618      	mov	r0, r3
   15498:	f7ff fc28 	bl	14cec <hciCoreConnByHandle>
   1549c:	60f8      	str	r0, [r7, #12]
   1549e:	68fb      	ldr	r3, [r7, #12]
   154a0:	2b00      	cmp	r3, #0
   154a2:	d028      	beq.n	154f6 <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   154a4:	68fb      	ldr	r3, [r7, #12]
   154a6:	7e5a      	ldrb	r2, [r3, #25]
   154a8:	8a7b      	ldrh	r3, [r7, #18]
   154aa:	b2db      	uxtb	r3, r3
   154ac:	1ad3      	subs	r3, r2, r3
   154ae:	b2da      	uxtb	r2, r3
   154b0:	68fb      	ldr	r3, [r7, #12]
   154b2:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   154b4:	68fb      	ldr	r3, [r7, #12]
   154b6:	7e1a      	ldrb	r2, [r3, #24]
   154b8:	8a7b      	ldrh	r3, [r7, #18]
   154ba:	b2db      	uxtb	r3, r3
   154bc:	1ad3      	subs	r3, r2, r3
   154be:	b2da      	uxtb	r2, r3
   154c0:	68fb      	ldr	r3, [r7, #12]
   154c2:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   154c4:	8a7b      	ldrh	r3, [r7, #18]
   154c6:	b2da      	uxtb	r2, r3
   154c8:	7dbb      	ldrb	r3, [r7, #22]
   154ca:	4413      	add	r3, r2
   154cc:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   154ce:	68fb      	ldr	r3, [r7, #12]
   154d0:	7ddb      	ldrb	r3, [r3, #23]
   154d2:	2b00      	cmp	r3, #0
   154d4:	d00f      	beq.n	154f6 <hciCoreNumCmplPkts+0xb2>
   154d6:	68fb      	ldr	r3, [r7, #12]
   154d8:	7e1a      	ldrb	r2, [r3, #24]
   154da:	4b0d      	ldr	r3, [pc, #52]	; (15510 <hciCoreNumCmplPkts+0xcc>)
   154dc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   154e0:	429a      	cmp	r2, r3
   154e2:	d808      	bhi.n	154f6 <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   154e4:	68fb      	ldr	r3, [r7, #12]
   154e6:	2200      	movs	r2, #0
   154e8:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   154ea:	4b0a      	ldr	r3, [pc, #40]	; (15514 <hciCoreNumCmplPkts+0xd0>)
   154ec:	695b      	ldr	r3, [r3, #20]
   154ee:	8aba      	ldrh	r2, [r7, #20]
   154f0:	2100      	movs	r1, #0
   154f2:	4610      	mov	r0, r2
   154f4:	4798      	blx	r3
  while (numHandles-- > 0)
   154f6:	7dfb      	ldrb	r3, [r7, #23]
   154f8:	1e5a      	subs	r2, r3, #1
   154fa:	75fa      	strb	r2, [r7, #23]
   154fc:	2b00      	cmp	r3, #0
   154fe:	d1ad      	bne.n	1545c <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   15500:	7dbb      	ldrb	r3, [r7, #22]
   15502:	4618      	mov	r0, r3
   15504:	f7ff fc78 	bl	14df8 <hciCoreTxReady>
}
   15508:	bf00      	nop
   1550a:	3718      	adds	r7, #24
   1550c:	46bd      	mov	sp, r7
   1550e:	bd80      	pop	{r7, pc}
   15510:	1000930c 	.word	0x1000930c
   15514:	10009e2c 	.word	0x10009e2c

00015518 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   15518:	b580      	push	{r7, lr}
   1551a:	b082      	sub	sp, #8
   1551c:	af00      	add	r7, sp, #0
   1551e:	4603      	mov	r3, r0
   15520:	6039      	str	r1, [r7, #0]
   15522:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   15524:	79fb      	ldrb	r3, [r7, #7]
   15526:	683a      	ldr	r2, [r7, #0]
   15528:	4619      	mov	r1, r3
   1552a:	4806      	ldr	r0, [pc, #24]	; (15544 <hciCoreRecv+0x2c>)
   1552c:	f005 f815 	bl	1a55a <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   15530:	4b04      	ldr	r3, [pc, #16]	; (15544 <hciCoreRecv+0x2c>)
   15532:	7e1b      	ldrb	r3, [r3, #24]
   15534:	2101      	movs	r1, #1
   15536:	4618      	mov	r0, r3
   15538:	f003 fb6a 	bl	18c10 <WsfSetEvent>
}
   1553c:	bf00      	nop
   1553e:	3708      	adds	r7, #8
   15540:	46bd      	mov	sp, r7
   15542:	bd80      	pop	{r7, pc}
   15544:	10009e2c 	.word	0x10009e2c

00015548 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   15548:	b580      	push	{r7, lr}
   1554a:	b084      	sub	sp, #16
   1554c:	af00      	add	r7, sp, #0
   1554e:	4603      	mov	r3, r0
   15550:	6039      	str	r1, [r7, #0]
   15552:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   15554:	683b      	ldr	r3, [r7, #0]
   15556:	2b00      	cmp	r3, #0
   15558:	d007      	beq.n	1556a <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   1555a:	683b      	ldr	r3, [r7, #0]
   1555c:	789b      	ldrb	r3, [r3, #2]
   1555e:	2b01      	cmp	r3, #1
   15560:	d12f      	bne.n	155c2 <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   15562:	6838      	ldr	r0, [r7, #0]
   15564:	f7fe fbfa 	bl	13d5c <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   15568:	e02b      	b.n	155c2 <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   1556a:	79fb      	ldrb	r3, [r7, #7]
   1556c:	f003 0301 	and.w	r3, r3, #1
   15570:	2b00      	cmp	r3, #0
   15572:	d026      	beq.n	155c2 <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15574:	e01b      	b.n	155ae <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   15576:	7afb      	ldrb	r3, [r7, #11]
   15578:	2b04      	cmp	r3, #4
   1557a:	d10d      	bne.n	15598 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   1557c:	68f8      	ldr	r0, [r7, #12]
   1557e:	f001 fcd5 	bl	16f2c <hciEvtProcessMsg>
        if (hciCb.resetting)
   15582:	4b12      	ldr	r3, [pc, #72]	; (155cc <HciCoreHandler+0x84>)
   15584:	7e5b      	ldrb	r3, [r3, #25]
   15586:	2b00      	cmp	r3, #0
   15588:	d002      	beq.n	15590 <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   1558a:	68f8      	ldr	r0, [r7, #12]
   1558c:	f001 fff6 	bl	1757c <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   15590:	68f8      	ldr	r0, [r7, #12]
   15592:	f004 ffbd 	bl	1a510 <WsfMsgFree>
   15596:	e00a      	b.n	155ae <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   15598:	68f8      	ldr	r0, [r7, #12]
   1559a:	f7ff fd5d 	bl	15058 <hciCoreAclReassembly>
   1559e:	60f8      	str	r0, [r7, #12]
   155a0:	68fb      	ldr	r3, [r7, #12]
   155a2:	2b00      	cmp	r3, #0
   155a4:	d003      	beq.n	155ae <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   155a6:	4b09      	ldr	r3, [pc, #36]	; (155cc <HciCoreHandler+0x84>)
   155a8:	691b      	ldr	r3, [r3, #16]
   155aa:	68f8      	ldr	r0, [r7, #12]
   155ac:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   155ae:	f107 030b 	add.w	r3, r7, #11
   155b2:	4619      	mov	r1, r3
   155b4:	4805      	ldr	r0, [pc, #20]	; (155cc <HciCoreHandler+0x84>)
   155b6:	f004 ffe5 	bl	1a584 <WsfMsgDeq>
   155ba:	60f8      	str	r0, [r7, #12]
   155bc:	68fb      	ldr	r3, [r7, #12]
   155be:	2b00      	cmp	r3, #0
   155c0:	d1d9      	bne.n	15576 <HciCoreHandler+0x2e>
}
   155c2:	bf00      	nop
   155c4:	3710      	adds	r7, #16
   155c6:	46bd      	mov	sp, r7
   155c8:	bd80      	pop	{r7, pc}
   155ca:	bf00      	nop
   155cc:	10009e2c 	.word	0x10009e2c

000155d0 <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   155d0:	b480      	push	{r7}
   155d2:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   155d4:	4b02      	ldr	r3, [pc, #8]	; (155e0 <HciGetBdAddr+0x10>)
}
   155d6:	4618      	mov	r0, r3
   155d8:	46bd      	mov	sp, r7
   155da:	f85d 7b04 	ldr.w	r7, [sp], #4
   155de:	4770      	bx	lr
   155e0:	100093f4 	.word	0x100093f4

000155e4 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   155e4:	b480      	push	{r7}
   155e6:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   155e8:	4b03      	ldr	r3, [pc, #12]	; (155f8 <HciGetBufSize+0x14>)
   155ea:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   155ee:	4618      	mov	r0, r3
   155f0:	46bd      	mov	sp, r7
   155f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   155f6:	4770      	bx	lr
   155f8:	1000930c 	.word	0x1000930c

000155fc <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   155fc:	b480      	push	{r7}
   155fe:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   15600:	4b05      	ldr	r3, [pc, #20]	; (15618 <HciGetLeSupFeat+0x1c>)
   15602:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   15606:	f023 0302 	bic.w	r3, r3, #2
   1560a:	b29b      	uxth	r3, r3
}
   1560c:	4618      	mov	r0, r3
   1560e:	46bd      	mov	sp, r7
   15610:	f85d 7b04 	ldr.w	r7, [sp], #4
   15614:	4770      	bx	lr
   15616:	bf00      	nop
   15618:	1000930c 	.word	0x1000930c

0001561c <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   1561c:	b480      	push	{r7}
   1561e:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   15620:	4b03      	ldr	r3, [pc, #12]	; (15630 <HciGetMaxRxAclLen+0x14>)
   15622:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   15626:	4618      	mov	r0, r3
   15628:	46bd      	mov	sp, r7
   1562a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1562e:	4770      	bx	lr
   15630:	1000930c 	.word	0x1000930c

00015634 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   15634:	b480      	push	{r7}
   15636:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   15638:	4b06      	ldr	r3, [pc, #24]	; (15654 <HciLlPrivacySupported+0x20>)
   1563a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   1563e:	2b00      	cmp	r3, #0
   15640:	bf14      	ite	ne
   15642:	2301      	movne	r3, #1
   15644:	2300      	moveq	r3, #0
   15646:	b2db      	uxtb	r3, r3
}
   15648:	4618      	mov	r0, r3
   1564a:	46bd      	mov	sp, r7
   1564c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15650:	4770      	bx	lr
   15652:	bf00      	nop
   15654:	1000930c 	.word	0x1000930c

00015658 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15658:	b580      	push	{r7, lr}
   1565a:	b084      	sub	sp, #16
   1565c:	af00      	add	r7, sp, #0
   1565e:	60f8      	str	r0, [r7, #12]
   15660:	60b9      	str	r1, [r7, #8]
   15662:	4613      	mov	r3, r2
   15664:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   15666:	68bb      	ldr	r3, [r7, #8]
   15668:	1c5a      	adds	r2, r3, #1
   1566a:	60ba      	str	r2, [r7, #8]
   1566c:	781a      	ldrb	r2, [r3, #0]
   1566e:	68fb      	ldr	r3, [r7, #12]
   15670:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   15672:	68bb      	ldr	r3, [r7, #8]
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	b29a      	uxth	r2, r3
   15678:	68bb      	ldr	r3, [r7, #8]
   1567a:	3301      	adds	r3, #1
   1567c:	781b      	ldrb	r3, [r3, #0]
   1567e:	b29b      	uxth	r3, r3
   15680:	021b      	lsls	r3, r3, #8
   15682:	b29b      	uxth	r3, r3
   15684:	4413      	add	r3, r2
   15686:	b29a      	uxth	r2, r3
   15688:	68fb      	ldr	r3, [r7, #12]
   1568a:	80da      	strh	r2, [r3, #6]
   1568c:	68bb      	ldr	r3, [r7, #8]
   1568e:	3302      	adds	r3, #2
   15690:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   15692:	68bb      	ldr	r3, [r7, #8]
   15694:	1c5a      	adds	r2, r3, #1
   15696:	60ba      	str	r2, [r7, #8]
   15698:	781a      	ldrb	r2, [r3, #0]
   1569a:	68fb      	ldr	r3, [r7, #12]
   1569c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1569e:	68bb      	ldr	r3, [r7, #8]
   156a0:	1c5a      	adds	r2, r3, #1
   156a2:	60ba      	str	r2, [r7, #8]
   156a4:	781a      	ldrb	r2, [r3, #0]
   156a6:	68fb      	ldr	r3, [r7, #12]
   156a8:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   156aa:	68fb      	ldr	r3, [r7, #12]
   156ac:	330a      	adds	r3, #10
   156ae:	68b9      	ldr	r1, [r7, #8]
   156b0:	4618      	mov	r0, r3
   156b2:	f7fe f9ed 	bl	13a90 <BdaCpy>
   156b6:	68bb      	ldr	r3, [r7, #8]
   156b8:	3306      	adds	r3, #6
   156ba:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   156bc:	68bb      	ldr	r3, [r7, #8]
   156be:	781b      	ldrb	r3, [r3, #0]
   156c0:	b29a      	uxth	r2, r3
   156c2:	68bb      	ldr	r3, [r7, #8]
   156c4:	3301      	adds	r3, #1
   156c6:	781b      	ldrb	r3, [r3, #0]
   156c8:	b29b      	uxth	r3, r3
   156ca:	021b      	lsls	r3, r3, #8
   156cc:	b29b      	uxth	r3, r3
   156ce:	4413      	add	r3, r2
   156d0:	b29a      	uxth	r2, r3
   156d2:	68fb      	ldr	r3, [r7, #12]
   156d4:	821a      	strh	r2, [r3, #16]
   156d6:	68bb      	ldr	r3, [r7, #8]
   156d8:	3302      	adds	r3, #2
   156da:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   156dc:	68bb      	ldr	r3, [r7, #8]
   156de:	781b      	ldrb	r3, [r3, #0]
   156e0:	b29a      	uxth	r2, r3
   156e2:	68bb      	ldr	r3, [r7, #8]
   156e4:	3301      	adds	r3, #1
   156e6:	781b      	ldrb	r3, [r3, #0]
   156e8:	b29b      	uxth	r3, r3
   156ea:	021b      	lsls	r3, r3, #8
   156ec:	b29b      	uxth	r3, r3
   156ee:	4413      	add	r3, r2
   156f0:	b29a      	uxth	r2, r3
   156f2:	68fb      	ldr	r3, [r7, #12]
   156f4:	825a      	strh	r2, [r3, #18]
   156f6:	68bb      	ldr	r3, [r7, #8]
   156f8:	3302      	adds	r3, #2
   156fa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   156fc:	68bb      	ldr	r3, [r7, #8]
   156fe:	781b      	ldrb	r3, [r3, #0]
   15700:	b29a      	uxth	r2, r3
   15702:	68bb      	ldr	r3, [r7, #8]
   15704:	3301      	adds	r3, #1
   15706:	781b      	ldrb	r3, [r3, #0]
   15708:	b29b      	uxth	r3, r3
   1570a:	021b      	lsls	r3, r3, #8
   1570c:	b29b      	uxth	r3, r3
   1570e:	4413      	add	r3, r2
   15710:	b29a      	uxth	r2, r3
   15712:	68fb      	ldr	r3, [r7, #12]
   15714:	829a      	strh	r2, [r3, #20]
   15716:	68bb      	ldr	r3, [r7, #8]
   15718:	3302      	adds	r3, #2
   1571a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   1571c:	68bb      	ldr	r3, [r7, #8]
   1571e:	1c5a      	adds	r2, r3, #1
   15720:	60ba      	str	r2, [r7, #8]
   15722:	781a      	ldrb	r2, [r3, #0]
   15724:	68fb      	ldr	r3, [r7, #12]
   15726:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   15728:	68fb      	ldr	r3, [r7, #12]
   1572a:	3317      	adds	r3, #23
   1572c:	2206      	movs	r2, #6
   1572e:	2100      	movs	r1, #0
   15730:	4618      	mov	r0, r3
   15732:	f7f6 fe13 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   15736:	68fb      	ldr	r3, [r7, #12]
   15738:	331d      	adds	r3, #29
   1573a:	2206      	movs	r2, #6
   1573c:	2100      	movs	r1, #0
   1573e:	4618      	mov	r0, r3
   15740:	f7f6 fe0c 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   15744:	68fb      	ldr	r3, [r7, #12]
   15746:	88da      	ldrh	r2, [r3, #6]
   15748:	68fb      	ldr	r3, [r7, #12]
   1574a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   1574c:	68fb      	ldr	r3, [r7, #12]
   1574e:	791a      	ldrb	r2, [r3, #4]
   15750:	68fb      	ldr	r3, [r7, #12]
   15752:	70da      	strb	r2, [r3, #3]
}
   15754:	bf00      	nop
   15756:	3710      	adds	r7, #16
   15758:	46bd      	mov	sp, r7
   1575a:	bd80      	pop	{r7, pc}

0001575c <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1575c:	b580      	push	{r7, lr}
   1575e:	b084      	sub	sp, #16
   15760:	af00      	add	r7, sp, #0
   15762:	60f8      	str	r0, [r7, #12]
   15764:	60b9      	str	r1, [r7, #8]
   15766:	4613      	mov	r3, r2
   15768:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   1576a:	68bb      	ldr	r3, [r7, #8]
   1576c:	1c5a      	adds	r2, r3, #1
   1576e:	60ba      	str	r2, [r7, #8]
   15770:	781a      	ldrb	r2, [r3, #0]
   15772:	68fb      	ldr	r3, [r7, #12]
   15774:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   15776:	68bb      	ldr	r3, [r7, #8]
   15778:	781b      	ldrb	r3, [r3, #0]
   1577a:	b29a      	uxth	r2, r3
   1577c:	68bb      	ldr	r3, [r7, #8]
   1577e:	3301      	adds	r3, #1
   15780:	781b      	ldrb	r3, [r3, #0]
   15782:	b29b      	uxth	r3, r3
   15784:	021b      	lsls	r3, r3, #8
   15786:	b29b      	uxth	r3, r3
   15788:	4413      	add	r3, r2
   1578a:	b29a      	uxth	r2, r3
   1578c:	68fb      	ldr	r3, [r7, #12]
   1578e:	80da      	strh	r2, [r3, #6]
   15790:	68bb      	ldr	r3, [r7, #8]
   15792:	3302      	adds	r3, #2
   15794:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   15796:	68bb      	ldr	r3, [r7, #8]
   15798:	1c5a      	adds	r2, r3, #1
   1579a:	60ba      	str	r2, [r7, #8]
   1579c:	781a      	ldrb	r2, [r3, #0]
   1579e:	68fb      	ldr	r3, [r7, #12]
   157a0:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   157a2:	68bb      	ldr	r3, [r7, #8]
   157a4:	1c5a      	adds	r2, r3, #1
   157a6:	60ba      	str	r2, [r7, #8]
   157a8:	781a      	ldrb	r2, [r3, #0]
   157aa:	68fb      	ldr	r3, [r7, #12]
   157ac:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   157ae:	68fb      	ldr	r3, [r7, #12]
   157b0:	330a      	adds	r3, #10
   157b2:	68b9      	ldr	r1, [r7, #8]
   157b4:	4618      	mov	r0, r3
   157b6:	f7fe f96b 	bl	13a90 <BdaCpy>
   157ba:	68bb      	ldr	r3, [r7, #8]
   157bc:	3306      	adds	r3, #6
   157be:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   157c0:	68fb      	ldr	r3, [r7, #12]
   157c2:	3317      	adds	r3, #23
   157c4:	68b9      	ldr	r1, [r7, #8]
   157c6:	4618      	mov	r0, r3
   157c8:	f7fe f962 	bl	13a90 <BdaCpy>
   157cc:	68bb      	ldr	r3, [r7, #8]
   157ce:	3306      	adds	r3, #6
   157d0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   157d2:	68fb      	ldr	r3, [r7, #12]
   157d4:	331d      	adds	r3, #29
   157d6:	68b9      	ldr	r1, [r7, #8]
   157d8:	4618      	mov	r0, r3
   157da:	f7fe f959 	bl	13a90 <BdaCpy>
   157de:	68bb      	ldr	r3, [r7, #8]
   157e0:	3306      	adds	r3, #6
   157e2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   157e4:	68bb      	ldr	r3, [r7, #8]
   157e6:	781b      	ldrb	r3, [r3, #0]
   157e8:	b29a      	uxth	r2, r3
   157ea:	68bb      	ldr	r3, [r7, #8]
   157ec:	3301      	adds	r3, #1
   157ee:	781b      	ldrb	r3, [r3, #0]
   157f0:	b29b      	uxth	r3, r3
   157f2:	021b      	lsls	r3, r3, #8
   157f4:	b29b      	uxth	r3, r3
   157f6:	4413      	add	r3, r2
   157f8:	b29a      	uxth	r2, r3
   157fa:	68fb      	ldr	r3, [r7, #12]
   157fc:	821a      	strh	r2, [r3, #16]
   157fe:	68bb      	ldr	r3, [r7, #8]
   15800:	3302      	adds	r3, #2
   15802:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   15804:	68bb      	ldr	r3, [r7, #8]
   15806:	781b      	ldrb	r3, [r3, #0]
   15808:	b29a      	uxth	r2, r3
   1580a:	68bb      	ldr	r3, [r7, #8]
   1580c:	3301      	adds	r3, #1
   1580e:	781b      	ldrb	r3, [r3, #0]
   15810:	b29b      	uxth	r3, r3
   15812:	021b      	lsls	r3, r3, #8
   15814:	b29b      	uxth	r3, r3
   15816:	4413      	add	r3, r2
   15818:	b29a      	uxth	r2, r3
   1581a:	68fb      	ldr	r3, [r7, #12]
   1581c:	825a      	strh	r2, [r3, #18]
   1581e:	68bb      	ldr	r3, [r7, #8]
   15820:	3302      	adds	r3, #2
   15822:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   15824:	68bb      	ldr	r3, [r7, #8]
   15826:	781b      	ldrb	r3, [r3, #0]
   15828:	b29a      	uxth	r2, r3
   1582a:	68bb      	ldr	r3, [r7, #8]
   1582c:	3301      	adds	r3, #1
   1582e:	781b      	ldrb	r3, [r3, #0]
   15830:	b29b      	uxth	r3, r3
   15832:	021b      	lsls	r3, r3, #8
   15834:	b29b      	uxth	r3, r3
   15836:	4413      	add	r3, r2
   15838:	b29a      	uxth	r2, r3
   1583a:	68fb      	ldr	r3, [r7, #12]
   1583c:	829a      	strh	r2, [r3, #20]
   1583e:	68bb      	ldr	r3, [r7, #8]
   15840:	3302      	adds	r3, #2
   15842:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   15844:	68bb      	ldr	r3, [r7, #8]
   15846:	1c5a      	adds	r2, r3, #1
   15848:	60ba      	str	r2, [r7, #8]
   1584a:	781a      	ldrb	r2, [r3, #0]
   1584c:	68fb      	ldr	r3, [r7, #12]
   1584e:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   15850:	68fb      	ldr	r3, [r7, #12]
   15852:	88da      	ldrh	r2, [r3, #6]
   15854:	68fb      	ldr	r3, [r7, #12]
   15856:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   15858:	68fb      	ldr	r3, [r7, #12]
   1585a:	791a      	ldrb	r2, [r3, #4]
   1585c:	68fb      	ldr	r3, [r7, #12]
   1585e:	70da      	strb	r2, [r3, #3]
}
   15860:	bf00      	nop
   15862:	3710      	adds	r7, #16
   15864:	46bd      	mov	sp, r7
   15866:	bd80      	pop	{r7, pc}

00015868 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15868:	b480      	push	{r7}
   1586a:	b085      	sub	sp, #20
   1586c:	af00      	add	r7, sp, #0
   1586e:	60f8      	str	r0, [r7, #12]
   15870:	60b9      	str	r1, [r7, #8]
   15872:	4613      	mov	r3, r2
   15874:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   15876:	68bb      	ldr	r3, [r7, #8]
   15878:	1c5a      	adds	r2, r3, #1
   1587a:	60ba      	str	r2, [r7, #8]
   1587c:	781a      	ldrb	r2, [r3, #0]
   1587e:	68fb      	ldr	r3, [r7, #12]
   15880:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   15882:	68bb      	ldr	r3, [r7, #8]
   15884:	781b      	ldrb	r3, [r3, #0]
   15886:	b29a      	uxth	r2, r3
   15888:	68bb      	ldr	r3, [r7, #8]
   1588a:	3301      	adds	r3, #1
   1588c:	781b      	ldrb	r3, [r3, #0]
   1588e:	b29b      	uxth	r3, r3
   15890:	021b      	lsls	r3, r3, #8
   15892:	b29b      	uxth	r3, r3
   15894:	4413      	add	r3, r2
   15896:	b29a      	uxth	r2, r3
   15898:	68fb      	ldr	r3, [r7, #12]
   1589a:	80da      	strh	r2, [r3, #6]
   1589c:	68bb      	ldr	r3, [r7, #8]
   1589e:	3302      	adds	r3, #2
   158a0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   158a2:	68bb      	ldr	r3, [r7, #8]
   158a4:	1c5a      	adds	r2, r3, #1
   158a6:	60ba      	str	r2, [r7, #8]
   158a8:	781a      	ldrb	r2, [r3, #0]
   158aa:	68fb      	ldr	r3, [r7, #12]
   158ac:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   158ae:	68fb      	ldr	r3, [r7, #12]
   158b0:	88da      	ldrh	r2, [r3, #6]
   158b2:	68fb      	ldr	r3, [r7, #12]
   158b4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   158b6:	68fb      	ldr	r3, [r7, #12]
   158b8:	791a      	ldrb	r2, [r3, #4]
   158ba:	68fb      	ldr	r3, [r7, #12]
   158bc:	70da      	strb	r2, [r3, #3]
}
   158be:	bf00      	nop
   158c0:	3714      	adds	r7, #20
   158c2:	46bd      	mov	sp, r7
   158c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   158c8:	4770      	bx	lr

000158ca <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   158ca:	b480      	push	{r7}
   158cc:	b085      	sub	sp, #20
   158ce:	af00      	add	r7, sp, #0
   158d0:	60f8      	str	r0, [r7, #12]
   158d2:	60b9      	str	r1, [r7, #8]
   158d4:	4613      	mov	r3, r2
   158d6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   158d8:	68bb      	ldr	r3, [r7, #8]
   158da:	1c5a      	adds	r2, r3, #1
   158dc:	60ba      	str	r2, [r7, #8]
   158de:	781a      	ldrb	r2, [r3, #0]
   158e0:	68fb      	ldr	r3, [r7, #12]
   158e2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   158e4:	68bb      	ldr	r3, [r7, #8]
   158e6:	781b      	ldrb	r3, [r3, #0]
   158e8:	b29a      	uxth	r2, r3
   158ea:	68bb      	ldr	r3, [r7, #8]
   158ec:	3301      	adds	r3, #1
   158ee:	781b      	ldrb	r3, [r3, #0]
   158f0:	b29b      	uxth	r3, r3
   158f2:	021b      	lsls	r3, r3, #8
   158f4:	b29b      	uxth	r3, r3
   158f6:	4413      	add	r3, r2
   158f8:	b29a      	uxth	r2, r3
   158fa:	68fb      	ldr	r3, [r7, #12]
   158fc:	80da      	strh	r2, [r3, #6]
   158fe:	68bb      	ldr	r3, [r7, #8]
   15900:	3302      	adds	r3, #2
   15902:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   15904:	68bb      	ldr	r3, [r7, #8]
   15906:	781b      	ldrb	r3, [r3, #0]
   15908:	b29a      	uxth	r2, r3
   1590a:	68bb      	ldr	r3, [r7, #8]
   1590c:	3301      	adds	r3, #1
   1590e:	781b      	ldrb	r3, [r3, #0]
   15910:	b29b      	uxth	r3, r3
   15912:	021b      	lsls	r3, r3, #8
   15914:	b29b      	uxth	r3, r3
   15916:	4413      	add	r3, r2
   15918:	b29a      	uxth	r2, r3
   1591a:	68fb      	ldr	r3, [r7, #12]
   1591c:	811a      	strh	r2, [r3, #8]
   1591e:	68bb      	ldr	r3, [r7, #8]
   15920:	3302      	adds	r3, #2
   15922:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   15924:	68bb      	ldr	r3, [r7, #8]
   15926:	781b      	ldrb	r3, [r3, #0]
   15928:	b29a      	uxth	r2, r3
   1592a:	68bb      	ldr	r3, [r7, #8]
   1592c:	3301      	adds	r3, #1
   1592e:	781b      	ldrb	r3, [r3, #0]
   15930:	b29b      	uxth	r3, r3
   15932:	021b      	lsls	r3, r3, #8
   15934:	b29b      	uxth	r3, r3
   15936:	4413      	add	r3, r2
   15938:	b29a      	uxth	r2, r3
   1593a:	68fb      	ldr	r3, [r7, #12]
   1593c:	815a      	strh	r2, [r3, #10]
   1593e:	68bb      	ldr	r3, [r7, #8]
   15940:	3302      	adds	r3, #2
   15942:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   15944:	68bb      	ldr	r3, [r7, #8]
   15946:	781b      	ldrb	r3, [r3, #0]
   15948:	b29a      	uxth	r2, r3
   1594a:	68bb      	ldr	r3, [r7, #8]
   1594c:	3301      	adds	r3, #1
   1594e:	781b      	ldrb	r3, [r3, #0]
   15950:	b29b      	uxth	r3, r3
   15952:	021b      	lsls	r3, r3, #8
   15954:	b29b      	uxth	r3, r3
   15956:	4413      	add	r3, r2
   15958:	b29a      	uxth	r2, r3
   1595a:	68fb      	ldr	r3, [r7, #12]
   1595c:	819a      	strh	r2, [r3, #12]
   1595e:	68bb      	ldr	r3, [r7, #8]
   15960:	3302      	adds	r3, #2
   15962:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   15964:	68fb      	ldr	r3, [r7, #12]
   15966:	88da      	ldrh	r2, [r3, #6]
   15968:	68fb      	ldr	r3, [r7, #12]
   1596a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   1596c:	68fb      	ldr	r3, [r7, #12]
   1596e:	791a      	ldrb	r2, [r3, #4]
   15970:	68fb      	ldr	r3, [r7, #12]
   15972:	70da      	strb	r2, [r3, #3]
}
   15974:	bf00      	nop
   15976:	3714      	adds	r7, #20
   15978:	46bd      	mov	sp, r7
   1597a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1597e:	4770      	bx	lr

00015980 <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15980:	b480      	push	{r7}
   15982:	b085      	sub	sp, #20
   15984:	af00      	add	r7, sp, #0
   15986:	60f8      	str	r0, [r7, #12]
   15988:	60b9      	str	r1, [r7, #8]
   1598a:	4613      	mov	r3, r2
   1598c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1598e:	68bb      	ldr	r3, [r7, #8]
   15990:	1c5a      	adds	r2, r3, #1
   15992:	60ba      	str	r2, [r7, #8]
   15994:	781a      	ldrb	r2, [r3, #0]
   15996:	68fb      	ldr	r3, [r7, #12]
   15998:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   1599a:	68fb      	ldr	r3, [r7, #12]
   1599c:	791a      	ldrb	r2, [r3, #4]
   1599e:	68fb      	ldr	r3, [r7, #12]
   159a0:	70da      	strb	r2, [r3, #3]
}
   159a2:	bf00      	nop
   159a4:	3714      	adds	r7, #20
   159a6:	46bd      	mov	sp, r7
   159a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   159ac:	4770      	bx	lr

000159ae <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   159ae:	b480      	push	{r7}
   159b0:	b085      	sub	sp, #20
   159b2:	af00      	add	r7, sp, #0
   159b4:	60f8      	str	r0, [r7, #12]
   159b6:	60b9      	str	r1, [r7, #8]
   159b8:	4613      	mov	r3, r2
   159ba:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   159bc:	68bb      	ldr	r3, [r7, #8]
   159be:	1c5a      	adds	r2, r3, #1
   159c0:	60ba      	str	r2, [r7, #8]
   159c2:	781a      	ldrb	r2, [r3, #0]
   159c4:	68fb      	ldr	r3, [r7, #12]
   159c6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   159c8:	68bb      	ldr	r3, [r7, #8]
   159ca:	781b      	ldrb	r3, [r3, #0]
   159cc:	b29a      	uxth	r2, r3
   159ce:	68bb      	ldr	r3, [r7, #8]
   159d0:	3301      	adds	r3, #1
   159d2:	781b      	ldrb	r3, [r3, #0]
   159d4:	b29b      	uxth	r3, r3
   159d6:	021b      	lsls	r3, r3, #8
   159d8:	b29b      	uxth	r3, r3
   159da:	4413      	add	r3, r2
   159dc:	b29a      	uxth	r2, r3
   159de:	68fb      	ldr	r3, [r7, #12]
   159e0:	80da      	strh	r2, [r3, #6]
   159e2:	68bb      	ldr	r3, [r7, #8]
   159e4:	3302      	adds	r3, #2
   159e6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   159e8:	68bb      	ldr	r3, [r7, #8]
   159ea:	1c5a      	adds	r2, r3, #1
   159ec:	60ba      	str	r2, [r7, #8]
   159ee:	781b      	ldrb	r3, [r3, #0]
   159f0:	b25a      	sxtb	r2, r3
   159f2:	68fb      	ldr	r3, [r7, #12]
   159f4:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   159f6:	68fb      	ldr	r3, [r7, #12]
   159f8:	88da      	ldrh	r2, [r3, #6]
   159fa:	68fb      	ldr	r3, [r7, #12]
   159fc:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   159fe:	68fb      	ldr	r3, [r7, #12]
   15a00:	791a      	ldrb	r2, [r3, #4]
   15a02:	68fb      	ldr	r3, [r7, #12]
   15a04:	70da      	strb	r2, [r3, #3]
}
   15a06:	bf00      	nop
   15a08:	3714      	adds	r7, #20
   15a0a:	46bd      	mov	sp, r7
   15a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a10:	4770      	bx	lr

00015a12 <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15a12:	b580      	push	{r7, lr}
   15a14:	b084      	sub	sp, #16
   15a16:	af00      	add	r7, sp, #0
   15a18:	60f8      	str	r0, [r7, #12]
   15a1a:	60b9      	str	r1, [r7, #8]
   15a1c:	4613      	mov	r3, r2
   15a1e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   15a20:	68bb      	ldr	r3, [r7, #8]
   15a22:	1c5a      	adds	r2, r3, #1
   15a24:	60ba      	str	r2, [r7, #8]
   15a26:	781a      	ldrb	r2, [r3, #0]
   15a28:	68fb      	ldr	r3, [r7, #12]
   15a2a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   15a2c:	68bb      	ldr	r3, [r7, #8]
   15a2e:	781b      	ldrb	r3, [r3, #0]
   15a30:	b29a      	uxth	r2, r3
   15a32:	68bb      	ldr	r3, [r7, #8]
   15a34:	3301      	adds	r3, #1
   15a36:	781b      	ldrb	r3, [r3, #0]
   15a38:	b29b      	uxth	r3, r3
   15a3a:	021b      	lsls	r3, r3, #8
   15a3c:	b29b      	uxth	r3, r3
   15a3e:	4413      	add	r3, r2
   15a40:	b29a      	uxth	r2, r3
   15a42:	68fb      	ldr	r3, [r7, #12]
   15a44:	80da      	strh	r2, [r3, #6]
   15a46:	68bb      	ldr	r3, [r7, #8]
   15a48:	3302      	adds	r3, #2
   15a4a:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   15a4c:	68fb      	ldr	r3, [r7, #12]
   15a4e:	3308      	adds	r3, #8
   15a50:	2205      	movs	r2, #5
   15a52:	68b9      	ldr	r1, [r7, #8]
   15a54:	4618      	mov	r0, r3
   15a56:	f7f6 fb83 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   15a5a:	68fb      	ldr	r3, [r7, #12]
   15a5c:	88da      	ldrh	r2, [r3, #6]
   15a5e:	68fb      	ldr	r3, [r7, #12]
   15a60:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   15a62:	68fb      	ldr	r3, [r7, #12]
   15a64:	791a      	ldrb	r2, [r3, #4]
   15a66:	68fb      	ldr	r3, [r7, #12]
   15a68:	70da      	strb	r2, [r3, #3]
}
   15a6a:	bf00      	nop
   15a6c:	3710      	adds	r7, #16
   15a6e:	46bd      	mov	sp, r7
   15a70:	bd80      	pop	{r7, pc}

00015a72 <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15a72:	b480      	push	{r7}
   15a74:	b085      	sub	sp, #20
   15a76:	af00      	add	r7, sp, #0
   15a78:	60f8      	str	r0, [r7, #12]
   15a7a:	60b9      	str	r1, [r7, #8]
   15a7c:	4613      	mov	r3, r2
   15a7e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   15a80:	68bb      	ldr	r3, [r7, #8]
   15a82:	1c5a      	adds	r2, r3, #1
   15a84:	60ba      	str	r2, [r7, #8]
   15a86:	781a      	ldrb	r2, [r3, #0]
   15a88:	68fb      	ldr	r3, [r7, #12]
   15a8a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   15a8c:	68bb      	ldr	r3, [r7, #8]
   15a8e:	781a      	ldrb	r2, [r3, #0]
   15a90:	68fb      	ldr	r3, [r7, #12]
   15a92:	715a      	strb	r2, [r3, #5]
   15a94:	68bb      	ldr	r3, [r7, #8]
   15a96:	3302      	adds	r3, #2
   15a98:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   15a9a:	68bb      	ldr	r3, [r7, #8]
   15a9c:	1c5a      	adds	r2, r3, #1
   15a9e:	60ba      	str	r2, [r7, #8]
   15aa0:	781b      	ldrb	r3, [r3, #0]
   15aa2:	b25a      	sxtb	r2, r3
   15aa4:	68fb      	ldr	r3, [r7, #12]
   15aa6:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   15aa8:	68fb      	ldr	r3, [r7, #12]
   15aaa:	795b      	ldrb	r3, [r3, #5]
   15aac:	b29a      	uxth	r2, r3
   15aae:	68fb      	ldr	r3, [r7, #12]
   15ab0:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   15ab2:	68fb      	ldr	r3, [r7, #12]
   15ab4:	791a      	ldrb	r2, [r3, #4]
   15ab6:	68fb      	ldr	r3, [r7, #12]
   15ab8:	70da      	strb	r2, [r3, #3]
}
   15aba:	bf00      	nop
   15abc:	3714      	adds	r7, #20
   15abe:	46bd      	mov	sp, r7
   15ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ac4:	4770      	bx	lr

00015ac6 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15ac6:	b480      	push	{r7}
   15ac8:	b085      	sub	sp, #20
   15aca:	af00      	add	r7, sp, #0
   15acc:	60f8      	str	r0, [r7, #12]
   15ace:	60b9      	str	r1, [r7, #8]
   15ad0:	4613      	mov	r3, r2
   15ad2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   15ad4:	68bb      	ldr	r3, [r7, #8]
   15ad6:	1c5a      	adds	r2, r3, #1
   15ad8:	60ba      	str	r2, [r7, #8]
   15ada:	781a      	ldrb	r2, [r3, #0]
   15adc:	68fb      	ldr	r3, [r7, #12]
   15ade:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   15ae0:	68bb      	ldr	r3, [r7, #8]
   15ae2:	781b      	ldrb	r3, [r3, #0]
   15ae4:	b29a      	uxth	r2, r3
   15ae6:	68bb      	ldr	r3, [r7, #8]
   15ae8:	3301      	adds	r3, #1
   15aea:	781b      	ldrb	r3, [r3, #0]
   15aec:	b29b      	uxth	r3, r3
   15aee:	021b      	lsls	r3, r3, #8
   15af0:	b29b      	uxth	r3, r3
   15af2:	4413      	add	r3, r2
   15af4:	b29a      	uxth	r2, r3
   15af6:	68fb      	ldr	r3, [r7, #12]
   15af8:	80da      	strh	r2, [r3, #6]
   15afa:	68bb      	ldr	r3, [r7, #8]
   15afc:	3302      	adds	r3, #2
   15afe:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   15b00:	68bb      	ldr	r3, [r7, #8]
   15b02:	1c5a      	adds	r2, r3, #1
   15b04:	60ba      	str	r2, [r7, #8]
   15b06:	781a      	ldrb	r2, [r3, #0]
   15b08:	68fb      	ldr	r3, [r7, #12]
   15b0a:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   15b0c:	68bb      	ldr	r3, [r7, #8]
   15b0e:	781b      	ldrb	r3, [r3, #0]
   15b10:	b29a      	uxth	r2, r3
   15b12:	68bb      	ldr	r3, [r7, #8]
   15b14:	3301      	adds	r3, #1
   15b16:	781b      	ldrb	r3, [r3, #0]
   15b18:	b29b      	uxth	r3, r3
   15b1a:	021b      	lsls	r3, r3, #8
   15b1c:	b29b      	uxth	r3, r3
   15b1e:	4413      	add	r3, r2
   15b20:	b29a      	uxth	r2, r3
   15b22:	68fb      	ldr	r3, [r7, #12]
   15b24:	815a      	strh	r2, [r3, #10]
   15b26:	68bb      	ldr	r3, [r7, #8]
   15b28:	3302      	adds	r3, #2
   15b2a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   15b2c:	68bb      	ldr	r3, [r7, #8]
   15b2e:	781b      	ldrb	r3, [r3, #0]
   15b30:	b29a      	uxth	r2, r3
   15b32:	68bb      	ldr	r3, [r7, #8]
   15b34:	3301      	adds	r3, #1
   15b36:	781b      	ldrb	r3, [r3, #0]
   15b38:	b29b      	uxth	r3, r3
   15b3a:	021b      	lsls	r3, r3, #8
   15b3c:	b29b      	uxth	r3, r3
   15b3e:	4413      	add	r3, r2
   15b40:	b29a      	uxth	r2, r3
   15b42:	68fb      	ldr	r3, [r7, #12]
   15b44:	819a      	strh	r2, [r3, #12]
   15b46:	68bb      	ldr	r3, [r7, #8]
   15b48:	3302      	adds	r3, #2
   15b4a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   15b4c:	68fb      	ldr	r3, [r7, #12]
   15b4e:	88da      	ldrh	r2, [r3, #6]
   15b50:	68fb      	ldr	r3, [r7, #12]
   15b52:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   15b54:	68fb      	ldr	r3, [r7, #12]
   15b56:	791a      	ldrb	r2, [r3, #4]
   15b58:	68fb      	ldr	r3, [r7, #12]
   15b5a:	70da      	strb	r2, [r3, #3]
}
   15b5c:	bf00      	nop
   15b5e:	3714      	adds	r7, #20
   15b60:	46bd      	mov	sp, r7
   15b62:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b66:	4770      	bx	lr

00015b68 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15b68:	b580      	push	{r7, lr}
   15b6a:	b084      	sub	sp, #16
   15b6c:	af00      	add	r7, sp, #0
   15b6e:	60f8      	str	r0, [r7, #12]
   15b70:	60b9      	str	r1, [r7, #8]
   15b72:	4613      	mov	r3, r2
   15b74:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   15b76:	68bb      	ldr	r3, [r7, #8]
   15b78:	1c5a      	adds	r2, r3, #1
   15b7a:	60ba      	str	r2, [r7, #8]
   15b7c:	781a      	ldrb	r2, [r3, #0]
   15b7e:	68fb      	ldr	r3, [r7, #12]
   15b80:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   15b82:	68bb      	ldr	r3, [r7, #8]
   15b84:	781b      	ldrb	r3, [r3, #0]
   15b86:	b29a      	uxth	r2, r3
   15b88:	68bb      	ldr	r3, [r7, #8]
   15b8a:	3301      	adds	r3, #1
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	b29b      	uxth	r3, r3
   15b90:	021b      	lsls	r3, r3, #8
   15b92:	b29b      	uxth	r3, r3
   15b94:	4413      	add	r3, r2
   15b96:	b29a      	uxth	r2, r3
   15b98:	68fb      	ldr	r3, [r7, #12]
   15b9a:	80da      	strh	r2, [r3, #6]
   15b9c:	68bb      	ldr	r3, [r7, #8]
   15b9e:	3302      	adds	r3, #2
   15ba0:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   15ba2:	68fb      	ldr	r3, [r7, #12]
   15ba4:	3308      	adds	r3, #8
   15ba6:	2208      	movs	r2, #8
   15ba8:	68b9      	ldr	r1, [r7, #8]
   15baa:	4618      	mov	r0, r3
   15bac:	f7f6 fad8 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   15bb0:	68fb      	ldr	r3, [r7, #12]
   15bb2:	88da      	ldrh	r2, [r3, #6]
   15bb4:	68fb      	ldr	r3, [r7, #12]
   15bb6:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   15bb8:	68fb      	ldr	r3, [r7, #12]
   15bba:	791a      	ldrb	r2, [r3, #4]
   15bbc:	68fb      	ldr	r3, [r7, #12]
   15bbe:	70da      	strb	r2, [r3, #3]
}
   15bc0:	bf00      	nop
   15bc2:	3710      	adds	r7, #16
   15bc4:	46bd      	mov	sp, r7
   15bc6:	bd80      	pop	{r7, pc}

00015bc8 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15bc8:	b480      	push	{r7}
   15bca:	b085      	sub	sp, #20
   15bcc:	af00      	add	r7, sp, #0
   15bce:	60f8      	str	r0, [r7, #12]
   15bd0:	60b9      	str	r1, [r7, #8]
   15bd2:	4613      	mov	r3, r2
   15bd4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   15bd6:	68bb      	ldr	r3, [r7, #8]
   15bd8:	1c5a      	adds	r2, r3, #1
   15bda:	60ba      	str	r2, [r7, #8]
   15bdc:	781a      	ldrb	r2, [r3, #0]
   15bde:	68fb      	ldr	r3, [r7, #12]
   15be0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   15be2:	68bb      	ldr	r3, [r7, #8]
   15be4:	781b      	ldrb	r3, [r3, #0]
   15be6:	b29a      	uxth	r2, r3
   15be8:	68bb      	ldr	r3, [r7, #8]
   15bea:	3301      	adds	r3, #1
   15bec:	781b      	ldrb	r3, [r3, #0]
   15bee:	b29b      	uxth	r3, r3
   15bf0:	021b      	lsls	r3, r3, #8
   15bf2:	b29b      	uxth	r3, r3
   15bf4:	4413      	add	r3, r2
   15bf6:	b29a      	uxth	r2, r3
   15bf8:	68fb      	ldr	r3, [r7, #12]
   15bfa:	80da      	strh	r2, [r3, #6]
   15bfc:	68bb      	ldr	r3, [r7, #8]
   15bfe:	3302      	adds	r3, #2
   15c00:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   15c02:	68fb      	ldr	r3, [r7, #12]
   15c04:	88da      	ldrh	r2, [r3, #6]
   15c06:	68fb      	ldr	r3, [r7, #12]
   15c08:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   15c0a:	68fb      	ldr	r3, [r7, #12]
   15c0c:	791a      	ldrb	r2, [r3, #4]
   15c0e:	68fb      	ldr	r3, [r7, #12]
   15c10:	70da      	strb	r2, [r3, #3]
}
   15c12:	bf00      	nop
   15c14:	3714      	adds	r7, #20
   15c16:	46bd      	mov	sp, r7
   15c18:	f85d 7b04 	ldr.w	r7, [sp], #4
   15c1c:	4770      	bx	lr

00015c1e <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15c1e:	b480      	push	{r7}
   15c20:	b085      	sub	sp, #20
   15c22:	af00      	add	r7, sp, #0
   15c24:	60f8      	str	r0, [r7, #12]
   15c26:	60b9      	str	r1, [r7, #8]
   15c28:	4613      	mov	r3, r2
   15c2a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   15c2c:	68bb      	ldr	r3, [r7, #8]
   15c2e:	1c5a      	adds	r2, r3, #1
   15c30:	60ba      	str	r2, [r7, #8]
   15c32:	781a      	ldrb	r2, [r3, #0]
   15c34:	68fb      	ldr	r3, [r7, #12]
   15c36:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   15c38:	68bb      	ldr	r3, [r7, #8]
   15c3a:	781b      	ldrb	r3, [r3, #0]
   15c3c:	b29a      	uxth	r2, r3
   15c3e:	68bb      	ldr	r3, [r7, #8]
   15c40:	3301      	adds	r3, #1
   15c42:	781b      	ldrb	r3, [r3, #0]
   15c44:	b29b      	uxth	r3, r3
   15c46:	021b      	lsls	r3, r3, #8
   15c48:	b29b      	uxth	r3, r3
   15c4a:	4413      	add	r3, r2
   15c4c:	b29a      	uxth	r2, r3
   15c4e:	68fb      	ldr	r3, [r7, #12]
   15c50:	80da      	strh	r2, [r3, #6]
   15c52:	68bb      	ldr	r3, [r7, #8]
   15c54:	3302      	adds	r3, #2
   15c56:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   15c58:	68fb      	ldr	r3, [r7, #12]
   15c5a:	88da      	ldrh	r2, [r3, #6]
   15c5c:	68fb      	ldr	r3, [r7, #12]
   15c5e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   15c60:	68fb      	ldr	r3, [r7, #12]
   15c62:	791a      	ldrb	r2, [r3, #4]
   15c64:	68fb      	ldr	r3, [r7, #12]
   15c66:	70da      	strb	r2, [r3, #3]
}
   15c68:	bf00      	nop
   15c6a:	3714      	adds	r7, #20
   15c6c:	46bd      	mov	sp, r7
   15c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15c72:	4770      	bx	lr

00015c74 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15c74:	b480      	push	{r7}
   15c76:	b085      	sub	sp, #20
   15c78:	af00      	add	r7, sp, #0
   15c7a:	60f8      	str	r0, [r7, #12]
   15c7c:	60b9      	str	r1, [r7, #8]
   15c7e:	4613      	mov	r3, r2
   15c80:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   15c82:	68bb      	ldr	r3, [r7, #8]
   15c84:	1c5a      	adds	r2, r3, #1
   15c86:	60ba      	str	r2, [r7, #8]
   15c88:	781a      	ldrb	r2, [r3, #0]
   15c8a:	68fb      	ldr	r3, [r7, #12]
   15c8c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   15c8e:	68bb      	ldr	r3, [r7, #8]
   15c90:	781b      	ldrb	r3, [r3, #0]
   15c92:	b29a      	uxth	r2, r3
   15c94:	68bb      	ldr	r3, [r7, #8]
   15c96:	3301      	adds	r3, #1
   15c98:	781b      	ldrb	r3, [r3, #0]
   15c9a:	b29b      	uxth	r3, r3
   15c9c:	021b      	lsls	r3, r3, #8
   15c9e:	b29b      	uxth	r3, r3
   15ca0:	4413      	add	r3, r2
   15ca2:	b29a      	uxth	r2, r3
   15ca4:	68fb      	ldr	r3, [r7, #12]
   15ca6:	80da      	strh	r2, [r3, #6]
   15ca8:	68bb      	ldr	r3, [r7, #8]
   15caa:	3302      	adds	r3, #2
   15cac:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   15cae:	68fb      	ldr	r3, [r7, #12]
   15cb0:	88da      	ldrh	r2, [r3, #6]
   15cb2:	68fb      	ldr	r3, [r7, #12]
   15cb4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   15cb6:	68fb      	ldr	r3, [r7, #12]
   15cb8:	791a      	ldrb	r2, [r3, #4]
   15cba:	68fb      	ldr	r3, [r7, #12]
   15cbc:	70da      	strb	r2, [r3, #3]
}
   15cbe:	bf00      	nop
   15cc0:	3714      	adds	r7, #20
   15cc2:	46bd      	mov	sp, r7
   15cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15cc8:	4770      	bx	lr

00015cca <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15cca:	b480      	push	{r7}
   15ccc:	b085      	sub	sp, #20
   15cce:	af00      	add	r7, sp, #0
   15cd0:	60f8      	str	r0, [r7, #12]
   15cd2:	60b9      	str	r1, [r7, #8]
   15cd4:	4613      	mov	r3, r2
   15cd6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   15cd8:	68bb      	ldr	r3, [r7, #8]
   15cda:	1c5a      	adds	r2, r3, #1
   15cdc:	60ba      	str	r2, [r7, #8]
   15cde:	781a      	ldrb	r2, [r3, #0]
   15ce0:	68fb      	ldr	r3, [r7, #12]
   15ce2:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   15ce4:	68bb      	ldr	r3, [r7, #8]
   15ce6:	781b      	ldrb	r3, [r3, #0]
   15ce8:	b29a      	uxth	r2, r3
   15cea:	68bb      	ldr	r3, [r7, #8]
   15cec:	3301      	adds	r3, #1
   15cee:	781b      	ldrb	r3, [r3, #0]
   15cf0:	b29b      	uxth	r3, r3
   15cf2:	021b      	lsls	r3, r3, #8
   15cf4:	b29b      	uxth	r3, r3
   15cf6:	4413      	add	r3, r2
   15cf8:	b29a      	uxth	r2, r3
   15cfa:	68fb      	ldr	r3, [r7, #12]
   15cfc:	80da      	strh	r2, [r3, #6]
   15cfe:	68bb      	ldr	r3, [r7, #8]
   15d00:	3302      	adds	r3, #2
   15d02:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   15d04:	68bb      	ldr	r3, [r7, #8]
   15d06:	1c5a      	adds	r2, r3, #1
   15d08:	60ba      	str	r2, [r7, #8]
   15d0a:	781a      	ldrb	r2, [r3, #0]
   15d0c:	68fb      	ldr	r3, [r7, #12]
   15d0e:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   15d10:	68fb      	ldr	r3, [r7, #12]
   15d12:	88da      	ldrh	r2, [r3, #6]
   15d14:	68fb      	ldr	r3, [r7, #12]
   15d16:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   15d18:	68fb      	ldr	r3, [r7, #12]
   15d1a:	791a      	ldrb	r2, [r3, #4]
   15d1c:	68fb      	ldr	r3, [r7, #12]
   15d1e:	70da      	strb	r2, [r3, #3]
}
   15d20:	bf00      	nop
   15d22:	3714      	adds	r7, #20
   15d24:	46bd      	mov	sp, r7
   15d26:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d2a:	4770      	bx	lr

00015d2c <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15d2c:	b580      	push	{r7, lr}
   15d2e:	b084      	sub	sp, #16
   15d30:	af00      	add	r7, sp, #0
   15d32:	60f8      	str	r0, [r7, #12]
   15d34:	60b9      	str	r1, [r7, #8]
   15d36:	4613      	mov	r3, r2
   15d38:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   15d3a:	68bb      	ldr	r3, [r7, #8]
   15d3c:	781b      	ldrb	r3, [r3, #0]
   15d3e:	b29a      	uxth	r2, r3
   15d40:	68bb      	ldr	r3, [r7, #8]
   15d42:	3301      	adds	r3, #1
   15d44:	781b      	ldrb	r3, [r3, #0]
   15d46:	b29b      	uxth	r3, r3
   15d48:	021b      	lsls	r3, r3, #8
   15d4a:	b29b      	uxth	r3, r3
   15d4c:	4413      	add	r3, r2
   15d4e:	b29a      	uxth	r2, r3
   15d50:	68fb      	ldr	r3, [r7, #12]
   15d52:	809a      	strh	r2, [r3, #4]
   15d54:	68bb      	ldr	r3, [r7, #8]
   15d56:	3302      	adds	r3, #2
   15d58:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   15d5a:	68fb      	ldr	r3, [r7, #12]
   15d5c:	3306      	adds	r3, #6
   15d5e:	2208      	movs	r2, #8
   15d60:	68b9      	ldr	r1, [r7, #8]
   15d62:	4618      	mov	r0, r3
   15d64:	f7f6 f9fc 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   15d68:	68bb      	ldr	r3, [r7, #8]
   15d6a:	3308      	adds	r3, #8
   15d6c:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   15d6e:	68bb      	ldr	r3, [r7, #8]
   15d70:	781b      	ldrb	r3, [r3, #0]
   15d72:	b29a      	uxth	r2, r3
   15d74:	68bb      	ldr	r3, [r7, #8]
   15d76:	3301      	adds	r3, #1
   15d78:	781b      	ldrb	r3, [r3, #0]
   15d7a:	b29b      	uxth	r3, r3
   15d7c:	021b      	lsls	r3, r3, #8
   15d7e:	b29b      	uxth	r3, r3
   15d80:	4413      	add	r3, r2
   15d82:	b29a      	uxth	r2, r3
   15d84:	68fb      	ldr	r3, [r7, #12]
   15d86:	81da      	strh	r2, [r3, #14]
   15d88:	68bb      	ldr	r3, [r7, #8]
   15d8a:	3302      	adds	r3, #2
   15d8c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   15d8e:	68fb      	ldr	r3, [r7, #12]
   15d90:	889a      	ldrh	r2, [r3, #4]
   15d92:	68fb      	ldr	r3, [r7, #12]
   15d94:	801a      	strh	r2, [r3, #0]
}
   15d96:	bf00      	nop
   15d98:	3710      	adds	r7, #16
   15d9a:	46bd      	mov	sp, r7
   15d9c:	bd80      	pop	{r7, pc}

00015d9e <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15d9e:	b480      	push	{r7}
   15da0:	b085      	sub	sp, #20
   15da2:	af00      	add	r7, sp, #0
   15da4:	60f8      	str	r0, [r7, #12]
   15da6:	60b9      	str	r1, [r7, #8]
   15da8:	4613      	mov	r3, r2
   15daa:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   15dac:	68bb      	ldr	r3, [r7, #8]
   15dae:	781b      	ldrb	r3, [r3, #0]
   15db0:	b29a      	uxth	r2, r3
   15db2:	68bb      	ldr	r3, [r7, #8]
   15db4:	3301      	adds	r3, #1
   15db6:	781b      	ldrb	r3, [r3, #0]
   15db8:	b29b      	uxth	r3, r3
   15dba:	021b      	lsls	r3, r3, #8
   15dbc:	b29b      	uxth	r3, r3
   15dbe:	4413      	add	r3, r2
   15dc0:	b29a      	uxth	r2, r3
   15dc2:	68fb      	ldr	r3, [r7, #12]
   15dc4:	809a      	strh	r2, [r3, #4]
   15dc6:	68bb      	ldr	r3, [r7, #8]
   15dc8:	3302      	adds	r3, #2
   15dca:	60bb      	str	r3, [r7, #8]
}
   15dcc:	bf00      	nop
   15dce:	3714      	adds	r7, #20
   15dd0:	46bd      	mov	sp, r7
   15dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15dd6:	4770      	bx	lr

00015dd8 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15dd8:	b580      	push	{r7, lr}
   15dda:	b084      	sub	sp, #16
   15ddc:	af00      	add	r7, sp, #0
   15dde:	60f8      	str	r0, [r7, #12]
   15de0:	60b9      	str	r1, [r7, #8]
   15de2:	4613      	mov	r3, r2
   15de4:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   15de6:	68bb      	ldr	r3, [r7, #8]
   15de8:	3b02      	subs	r3, #2
   15dea:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   15dec:	68bb      	ldr	r3, [r7, #8]
   15dee:	781b      	ldrb	r3, [r3, #0]
   15df0:	b29a      	uxth	r2, r3
   15df2:	68bb      	ldr	r3, [r7, #8]
   15df4:	3301      	adds	r3, #1
   15df6:	781b      	ldrb	r3, [r3, #0]
   15df8:	b29b      	uxth	r3, r3
   15dfa:	021b      	lsls	r3, r3, #8
   15dfc:	b29b      	uxth	r3, r3
   15dfe:	4413      	add	r3, r2
   15e00:	b29a      	uxth	r2, r3
   15e02:	68fb      	ldr	r3, [r7, #12]
   15e04:	809a      	strh	r2, [r3, #4]
   15e06:	68bb      	ldr	r3, [r7, #8]
   15e08:	3302      	adds	r3, #2
   15e0a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   15e0c:	68bb      	ldr	r3, [r7, #8]
   15e0e:	1c5a      	adds	r2, r3, #1
   15e10:	60ba      	str	r2, [r7, #8]
   15e12:	781a      	ldrb	r2, [r3, #0]
   15e14:	68fb      	ldr	r3, [r7, #12]
   15e16:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   15e18:	68fb      	ldr	r3, [r7, #12]
   15e1a:	1d98      	adds	r0, r3, #6
   15e1c:	79fb      	ldrb	r3, [r7, #7]
   15e1e:	3b04      	subs	r3, #4
   15e20:	461a      	mov	r2, r3
   15e22:	68b9      	ldr	r1, [r7, #8]
   15e24:	f7f6 f99c 	bl	c160 <memcpy>
}
   15e28:	bf00      	nop
   15e2a:	3710      	adds	r7, #16
   15e2c:	46bd      	mov	sp, r7
   15e2e:	bd80      	pop	{r7, pc}

00015e30 <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e30:	b580      	push	{r7, lr}
   15e32:	b084      	sub	sp, #16
   15e34:	af00      	add	r7, sp, #0
   15e36:	60f8      	str	r0, [r7, #12]
   15e38:	60b9      	str	r1, [r7, #8]
   15e3a:	4613      	mov	r3, r2
   15e3c:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   15e3e:	68fb      	ldr	r3, [r7, #12]
   15e40:	3304      	adds	r3, #4
   15e42:	79fa      	ldrb	r2, [r7, #7]
   15e44:	68b9      	ldr	r1, [r7, #8]
   15e46:	4618      	mov	r0, r3
   15e48:	f7f6 f98a 	bl	c160 <memcpy>
}
   15e4c:	bf00      	nop
   15e4e:	3710      	adds	r7, #16
   15e50:	46bd      	mov	sp, r7
   15e52:	bd80      	pop	{r7, pc}

00015e54 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e54:	b480      	push	{r7}
   15e56:	b085      	sub	sp, #20
   15e58:	af00      	add	r7, sp, #0
   15e5a:	60f8      	str	r0, [r7, #12]
   15e5c:	60b9      	str	r1, [r7, #8]
   15e5e:	4613      	mov	r3, r2
   15e60:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   15e62:	68bb      	ldr	r3, [r7, #8]
   15e64:	1c5a      	adds	r2, r3, #1
   15e66:	60ba      	str	r2, [r7, #8]
   15e68:	781a      	ldrb	r2, [r3, #0]
   15e6a:	68fb      	ldr	r3, [r7, #12]
   15e6c:	711a      	strb	r2, [r3, #4]
}
   15e6e:	bf00      	nop
   15e70:	3714      	adds	r7, #20
   15e72:	46bd      	mov	sp, r7
   15e74:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e78:	4770      	bx	lr

00015e7a <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e7a:	b580      	push	{r7, lr}
   15e7c:	b084      	sub	sp, #16
   15e7e:	af00      	add	r7, sp, #0
   15e80:	60f8      	str	r0, [r7, #12]
   15e82:	60b9      	str	r1, [r7, #8]
   15e84:	4613      	mov	r3, r2
   15e86:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   15e88:	68bb      	ldr	r3, [r7, #8]
   15e8a:	1c5a      	adds	r2, r3, #1
   15e8c:	60ba      	str	r2, [r7, #8]
   15e8e:	781a      	ldrb	r2, [r3, #0]
   15e90:	68fb      	ldr	r3, [r7, #12]
   15e92:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   15e94:	68fb      	ldr	r3, [r7, #12]
   15e96:	3305      	adds	r3, #5
   15e98:	2210      	movs	r2, #16
   15e9a:	68b9      	ldr	r1, [r7, #8]
   15e9c:	4618      	mov	r0, r3
   15e9e:	f7f6 f95f 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   15ea2:	68fb      	ldr	r3, [r7, #12]
   15ea4:	791a      	ldrb	r2, [r3, #4]
   15ea6:	68fb      	ldr	r3, [r7, #12]
   15ea8:	70da      	strb	r2, [r3, #3]
}
   15eaa:	bf00      	nop
   15eac:	3710      	adds	r7, #16
   15eae:	46bd      	mov	sp, r7
   15eb0:	bd80      	pop	{r7, pc}

00015eb2 <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15eb2:	b580      	push	{r7, lr}
   15eb4:	b084      	sub	sp, #16
   15eb6:	af00      	add	r7, sp, #0
   15eb8:	60f8      	str	r0, [r7, #12]
   15eba:	60b9      	str	r1, [r7, #8]
   15ebc:	4613      	mov	r3, r2
   15ebe:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   15ec0:	68bb      	ldr	r3, [r7, #8]
   15ec2:	1c5a      	adds	r2, r3, #1
   15ec4:	60ba      	str	r2, [r7, #8]
   15ec6:	781a      	ldrb	r2, [r3, #0]
   15ec8:	68fb      	ldr	r3, [r7, #12]
   15eca:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   15ecc:	68fb      	ldr	r3, [r7, #12]
   15ece:	3305      	adds	r3, #5
   15ed0:	2208      	movs	r2, #8
   15ed2:	68b9      	ldr	r1, [r7, #8]
   15ed4:	4618      	mov	r0, r3
   15ed6:	f7f6 f943 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   15eda:	68fb      	ldr	r3, [r7, #12]
   15edc:	791a      	ldrb	r2, [r3, #4]
   15ede:	68fb      	ldr	r3, [r7, #12]
   15ee0:	70da      	strb	r2, [r3, #3]
}
   15ee2:	bf00      	nop
   15ee4:	3710      	adds	r7, #16
   15ee6:	46bd      	mov	sp, r7
   15ee8:	bd80      	pop	{r7, pc}

00015eea <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15eea:	b480      	push	{r7}
   15eec:	b085      	sub	sp, #20
   15eee:	af00      	add	r7, sp, #0
   15ef0:	60f8      	str	r0, [r7, #12]
   15ef2:	60b9      	str	r1, [r7, #8]
   15ef4:	4613      	mov	r3, r2
   15ef6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   15ef8:	68bb      	ldr	r3, [r7, #8]
   15efa:	1c5a      	adds	r2, r3, #1
   15efc:	60ba      	str	r2, [r7, #8]
   15efe:	781a      	ldrb	r2, [r3, #0]
   15f00:	68fb      	ldr	r3, [r7, #12]
   15f02:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   15f04:	68fb      	ldr	r3, [r7, #12]
   15f06:	791a      	ldrb	r2, [r3, #4]
   15f08:	68fb      	ldr	r3, [r7, #12]
   15f0a:	70da      	strb	r2, [r3, #3]
}
   15f0c:	bf00      	nop
   15f0e:	3714      	adds	r7, #20
   15f10:	46bd      	mov	sp, r7
   15f12:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f16:	4770      	bx	lr

00015f18 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f18:	b480      	push	{r7}
   15f1a:	b085      	sub	sp, #20
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	60f8      	str	r0, [r7, #12]
   15f20:	60b9      	str	r1, [r7, #8]
   15f22:	4613      	mov	r3, r2
   15f24:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   15f26:	68bb      	ldr	r3, [r7, #8]
   15f28:	1c5a      	adds	r2, r3, #1
   15f2a:	60ba      	str	r2, [r7, #8]
   15f2c:	781a      	ldrb	r2, [r3, #0]
   15f2e:	68fb      	ldr	r3, [r7, #12]
   15f30:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   15f32:	68fb      	ldr	r3, [r7, #12]
   15f34:	791a      	ldrb	r2, [r3, #4]
   15f36:	68fb      	ldr	r3, [r7, #12]
   15f38:	70da      	strb	r2, [r3, #3]
}
   15f3a:	bf00      	nop
   15f3c:	3714      	adds	r7, #20
   15f3e:	46bd      	mov	sp, r7
   15f40:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f44:	4770      	bx	lr

00015f46 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f46:	b480      	push	{r7}
   15f48:	b085      	sub	sp, #20
   15f4a:	af00      	add	r7, sp, #0
   15f4c:	60f8      	str	r0, [r7, #12]
   15f4e:	60b9      	str	r1, [r7, #8]
   15f50:	4613      	mov	r3, r2
   15f52:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   15f54:	68bb      	ldr	r3, [r7, #8]
   15f56:	1c5a      	adds	r2, r3, #1
   15f58:	60ba      	str	r2, [r7, #8]
   15f5a:	781a      	ldrb	r2, [r3, #0]
   15f5c:	68fb      	ldr	r3, [r7, #12]
   15f5e:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   15f60:	68fb      	ldr	r3, [r7, #12]
   15f62:	791a      	ldrb	r2, [r3, #4]
   15f64:	68fb      	ldr	r3, [r7, #12]
   15f66:	70da      	strb	r2, [r3, #3]
}
   15f68:	bf00      	nop
   15f6a:	3714      	adds	r7, #20
   15f6c:	46bd      	mov	sp, r7
   15f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f72:	4770      	bx	lr

00015f74 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f74:	b580      	push	{r7, lr}
   15f76:	b084      	sub	sp, #16
   15f78:	af00      	add	r7, sp, #0
   15f7a:	60f8      	str	r0, [r7, #12]
   15f7c:	60b9      	str	r1, [r7, #8]
   15f7e:	4613      	mov	r3, r2
   15f80:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   15f82:	68bb      	ldr	r3, [r7, #8]
   15f84:	1c5a      	adds	r2, r3, #1
   15f86:	60ba      	str	r2, [r7, #8]
   15f88:	781a      	ldrb	r2, [r3, #0]
   15f8a:	68fb      	ldr	r3, [r7, #12]
   15f8c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   15f8e:	68fb      	ldr	r3, [r7, #12]
   15f90:	3305      	adds	r3, #5
   15f92:	68b9      	ldr	r1, [r7, #8]
   15f94:	4618      	mov	r0, r3
   15f96:	f7fd fd7b 	bl	13a90 <BdaCpy>
   15f9a:	68bb      	ldr	r3, [r7, #8]
   15f9c:	3306      	adds	r3, #6
   15f9e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   15fa0:	68fb      	ldr	r3, [r7, #12]
   15fa2:	791a      	ldrb	r2, [r3, #4]
   15fa4:	68fb      	ldr	r3, [r7, #12]
   15fa6:	70da      	strb	r2, [r3, #3]
}
   15fa8:	bf00      	nop
   15faa:	3710      	adds	r7, #16
   15fac:	46bd      	mov	sp, r7
   15fae:	bd80      	pop	{r7, pc}

00015fb0 <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15fb0:	b580      	push	{r7, lr}
   15fb2:	b084      	sub	sp, #16
   15fb4:	af00      	add	r7, sp, #0
   15fb6:	60f8      	str	r0, [r7, #12]
   15fb8:	60b9      	str	r1, [r7, #8]
   15fba:	4613      	mov	r3, r2
   15fbc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   15fbe:	68bb      	ldr	r3, [r7, #8]
   15fc0:	1c5a      	adds	r2, r3, #1
   15fc2:	60ba      	str	r2, [r7, #8]
   15fc4:	781a      	ldrb	r2, [r3, #0]
   15fc6:	68fb      	ldr	r3, [r7, #12]
   15fc8:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   15fca:	68fb      	ldr	r3, [r7, #12]
   15fcc:	3305      	adds	r3, #5
   15fce:	68b9      	ldr	r1, [r7, #8]
   15fd0:	4618      	mov	r0, r3
   15fd2:	f7fd fd5d 	bl	13a90 <BdaCpy>
   15fd6:	68bb      	ldr	r3, [r7, #8]
   15fd8:	3306      	adds	r3, #6
   15fda:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   15fdc:	68fb      	ldr	r3, [r7, #12]
   15fde:	791a      	ldrb	r2, [r3, #4]
   15fe0:	68fb      	ldr	r3, [r7, #12]
   15fe2:	70da      	strb	r2, [r3, #3]
}
   15fe4:	bf00      	nop
   15fe6:	3710      	adds	r7, #16
   15fe8:	46bd      	mov	sp, r7
   15fea:	bd80      	pop	{r7, pc}

00015fec <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15fec:	b480      	push	{r7}
   15fee:	b085      	sub	sp, #20
   15ff0:	af00      	add	r7, sp, #0
   15ff2:	60f8      	str	r0, [r7, #12]
   15ff4:	60b9      	str	r1, [r7, #8]
   15ff6:	4613      	mov	r3, r2
   15ff8:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   15ffa:	68bb      	ldr	r3, [r7, #8]
   15ffc:	1c5a      	adds	r2, r3, #1
   15ffe:	60ba      	str	r2, [r7, #8]
   16000:	781a      	ldrb	r2, [r3, #0]
   16002:	68fb      	ldr	r3, [r7, #12]
   16004:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   16006:	68fb      	ldr	r3, [r7, #12]
   16008:	791a      	ldrb	r2, [r3, #4]
   1600a:	68fb      	ldr	r3, [r7, #12]
   1600c:	70da      	strb	r2, [r3, #3]
}
   1600e:	bf00      	nop
   16010:	3714      	adds	r7, #20
   16012:	46bd      	mov	sp, r7
   16014:	f85d 7b04 	ldr.w	r7, [sp], #4
   16018:	4770      	bx	lr

0001601a <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1601a:	b480      	push	{r7}
   1601c:	b085      	sub	sp, #20
   1601e:	af00      	add	r7, sp, #0
   16020:	60f8      	str	r0, [r7, #12]
   16022:	60b9      	str	r1, [r7, #8]
   16024:	4613      	mov	r3, r2
   16026:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   16028:	68bb      	ldr	r3, [r7, #8]
   1602a:	1c5a      	adds	r2, r3, #1
   1602c:	60ba      	str	r2, [r7, #8]
   1602e:	781a      	ldrb	r2, [r3, #0]
   16030:	68fb      	ldr	r3, [r7, #12]
   16032:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   16034:	68bb      	ldr	r3, [r7, #8]
   16036:	781b      	ldrb	r3, [r3, #0]
   16038:	b29a      	uxth	r2, r3
   1603a:	68bb      	ldr	r3, [r7, #8]
   1603c:	3301      	adds	r3, #1
   1603e:	781b      	ldrb	r3, [r3, #0]
   16040:	b29b      	uxth	r3, r3
   16042:	021b      	lsls	r3, r3, #8
   16044:	b29b      	uxth	r3, r3
   16046:	4413      	add	r3, r2
   16048:	b29a      	uxth	r2, r3
   1604a:	68fb      	ldr	r3, [r7, #12]
   1604c:	80da      	strh	r2, [r3, #6]
   1604e:	68bb      	ldr	r3, [r7, #8]
   16050:	3302      	adds	r3, #2
   16052:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   16054:	68fb      	ldr	r3, [r7, #12]
   16056:	791a      	ldrb	r2, [r3, #4]
   16058:	68fb      	ldr	r3, [r7, #12]
   1605a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   1605c:	68fb      	ldr	r3, [r7, #12]
   1605e:	88da      	ldrh	r2, [r3, #6]
   16060:	68fb      	ldr	r3, [r7, #12]
   16062:	801a      	strh	r2, [r3, #0]
}
   16064:	bf00      	nop
   16066:	3714      	adds	r7, #20
   16068:	46bd      	mov	sp, r7
   1606a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1606e:	4770      	bx	lr

00016070 <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16070:	b480      	push	{r7}
   16072:	b085      	sub	sp, #20
   16074:	af00      	add	r7, sp, #0
   16076:	60f8      	str	r0, [r7, #12]
   16078:	60b9      	str	r1, [r7, #8]
   1607a:	4613      	mov	r3, r2
   1607c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   1607e:	68bb      	ldr	r3, [r7, #8]
   16080:	1c5a      	adds	r2, r3, #1
   16082:	60ba      	str	r2, [r7, #8]
   16084:	781a      	ldrb	r2, [r3, #0]
   16086:	68fb      	ldr	r3, [r7, #12]
   16088:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   1608a:	68bb      	ldr	r3, [r7, #8]
   1608c:	781b      	ldrb	r3, [r3, #0]
   1608e:	b29a      	uxth	r2, r3
   16090:	68bb      	ldr	r3, [r7, #8]
   16092:	3301      	adds	r3, #1
   16094:	781b      	ldrb	r3, [r3, #0]
   16096:	b29b      	uxth	r3, r3
   16098:	021b      	lsls	r3, r3, #8
   1609a:	b29b      	uxth	r3, r3
   1609c:	4413      	add	r3, r2
   1609e:	b29a      	uxth	r2, r3
   160a0:	68fb      	ldr	r3, [r7, #12]
   160a2:	80da      	strh	r2, [r3, #6]
   160a4:	68bb      	ldr	r3, [r7, #8]
   160a6:	3302      	adds	r3, #2
   160a8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   160aa:	68fb      	ldr	r3, [r7, #12]
   160ac:	791a      	ldrb	r2, [r3, #4]
   160ae:	68fb      	ldr	r3, [r7, #12]
   160b0:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	88da      	ldrh	r2, [r3, #6]
   160b6:	68fb      	ldr	r3, [r7, #12]
   160b8:	801a      	strh	r2, [r3, #0]
}
   160ba:	bf00      	nop
   160bc:	3714      	adds	r7, #20
   160be:	46bd      	mov	sp, r7
   160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   160c4:	4770      	bx	lr

000160c6 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   160c6:	b480      	push	{r7}
   160c8:	b085      	sub	sp, #20
   160ca:	af00      	add	r7, sp, #0
   160cc:	60f8      	str	r0, [r7, #12]
   160ce:	60b9      	str	r1, [r7, #8]
   160d0:	4613      	mov	r3, r2
   160d2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   160d4:	68bb      	ldr	r3, [r7, #8]
   160d6:	1c5a      	adds	r2, r3, #1
   160d8:	60ba      	str	r2, [r7, #8]
   160da:	781a      	ldrb	r2, [r3, #0]
   160dc:	68fb      	ldr	r3, [r7, #12]
   160de:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   160e0:	68bb      	ldr	r3, [r7, #8]
   160e2:	781b      	ldrb	r3, [r3, #0]
   160e4:	b29a      	uxth	r2, r3
   160e6:	68bb      	ldr	r3, [r7, #8]
   160e8:	3301      	adds	r3, #1
   160ea:	781b      	ldrb	r3, [r3, #0]
   160ec:	b29b      	uxth	r3, r3
   160ee:	021b      	lsls	r3, r3, #8
   160f0:	b29b      	uxth	r3, r3
   160f2:	4413      	add	r3, r2
   160f4:	b29a      	uxth	r2, r3
   160f6:	68fb      	ldr	r3, [r7, #12]
   160f8:	80da      	strh	r2, [r3, #6]
   160fa:	68bb      	ldr	r3, [r7, #8]
   160fc:	3302      	adds	r3, #2
   160fe:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   16100:	68bb      	ldr	r3, [r7, #8]
   16102:	781b      	ldrb	r3, [r3, #0]
   16104:	b29a      	uxth	r2, r3
   16106:	68bb      	ldr	r3, [r7, #8]
   16108:	3301      	adds	r3, #1
   1610a:	781b      	ldrb	r3, [r3, #0]
   1610c:	b29b      	uxth	r3, r3
   1610e:	021b      	lsls	r3, r3, #8
   16110:	b29b      	uxth	r3, r3
   16112:	4413      	add	r3, r2
   16114:	b29a      	uxth	r2, r3
   16116:	68fb      	ldr	r3, [r7, #12]
   16118:	811a      	strh	r2, [r3, #8]
   1611a:	68bb      	ldr	r3, [r7, #8]
   1611c:	3302      	adds	r3, #2
   1611e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   16120:	68fb      	ldr	r3, [r7, #12]
   16122:	791a      	ldrb	r2, [r3, #4]
   16124:	68fb      	ldr	r3, [r7, #12]
   16126:	70da      	strb	r2, [r3, #3]
}
   16128:	bf00      	nop
   1612a:	3714      	adds	r7, #20
   1612c:	46bd      	mov	sp, r7
   1612e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16132:	4770      	bx	lr

00016134 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16134:	b480      	push	{r7}
   16136:	b085      	sub	sp, #20
   16138:	af00      	add	r7, sp, #0
   1613a:	60f8      	str	r0, [r7, #12]
   1613c:	60b9      	str	r1, [r7, #8]
   1613e:	4613      	mov	r3, r2
   16140:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   16142:	68bb      	ldr	r3, [r7, #8]
   16144:	1c5a      	adds	r2, r3, #1
   16146:	60ba      	str	r2, [r7, #8]
   16148:	781a      	ldrb	r2, [r3, #0]
   1614a:	68fb      	ldr	r3, [r7, #12]
   1614c:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   1614e:	68fb      	ldr	r3, [r7, #12]
   16150:	791a      	ldrb	r2, [r3, #4]
   16152:	68fb      	ldr	r3, [r7, #12]
   16154:	70da      	strb	r2, [r3, #3]
}
   16156:	bf00      	nop
   16158:	3714      	adds	r7, #20
   1615a:	46bd      	mov	sp, r7
   1615c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16160:	4770      	bx	lr

00016162 <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16162:	b480      	push	{r7}
   16164:	b085      	sub	sp, #20
   16166:	af00      	add	r7, sp, #0
   16168:	60f8      	str	r0, [r7, #12]
   1616a:	60b9      	str	r1, [r7, #8]
   1616c:	4613      	mov	r3, r2
   1616e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   16170:	68bb      	ldr	r3, [r7, #8]
   16172:	1c5a      	adds	r2, r3, #1
   16174:	60ba      	str	r2, [r7, #8]
   16176:	781a      	ldrb	r2, [r3, #0]
   16178:	68fb      	ldr	r3, [r7, #12]
   1617a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   1617c:	68bb      	ldr	r3, [r7, #8]
   1617e:	781b      	ldrb	r3, [r3, #0]
   16180:	b29a      	uxth	r2, r3
   16182:	68bb      	ldr	r3, [r7, #8]
   16184:	3301      	adds	r3, #1
   16186:	781b      	ldrb	r3, [r3, #0]
   16188:	b29b      	uxth	r3, r3
   1618a:	021b      	lsls	r3, r3, #8
   1618c:	b29b      	uxth	r3, r3
   1618e:	4413      	add	r3, r2
   16190:	b29a      	uxth	r2, r3
   16192:	68fb      	ldr	r3, [r7, #12]
   16194:	80da      	strh	r2, [r3, #6]
   16196:	68bb      	ldr	r3, [r7, #8]
   16198:	3302      	adds	r3, #2
   1619a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   1619c:	68fb      	ldr	r3, [r7, #12]
   1619e:	791a      	ldrb	r2, [r3, #4]
   161a0:	68fb      	ldr	r3, [r7, #12]
   161a2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   161a4:	68fb      	ldr	r3, [r7, #12]
   161a6:	88da      	ldrh	r2, [r3, #6]
   161a8:	68fb      	ldr	r3, [r7, #12]
   161aa:	801a      	strh	r2, [r3, #0]
}
   161ac:	bf00      	nop
   161ae:	3714      	adds	r7, #20
   161b0:	46bd      	mov	sp, r7
   161b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   161b6:	4770      	bx	lr

000161b8 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   161b8:	b480      	push	{r7}
   161ba:	b085      	sub	sp, #20
   161bc:	af00      	add	r7, sp, #0
   161be:	60f8      	str	r0, [r7, #12]
   161c0:	60b9      	str	r1, [r7, #8]
   161c2:	4613      	mov	r3, r2
   161c4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   161c6:	68bb      	ldr	r3, [r7, #8]
   161c8:	1c5a      	adds	r2, r3, #1
   161ca:	60ba      	str	r2, [r7, #8]
   161cc:	781a      	ldrb	r2, [r3, #0]
   161ce:	68fb      	ldr	r3, [r7, #12]
   161d0:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   161d2:	68bb      	ldr	r3, [r7, #8]
   161d4:	781b      	ldrb	r3, [r3, #0]
   161d6:	b29a      	uxth	r2, r3
   161d8:	68bb      	ldr	r3, [r7, #8]
   161da:	3301      	adds	r3, #1
   161dc:	781b      	ldrb	r3, [r3, #0]
   161de:	b29b      	uxth	r3, r3
   161e0:	021b      	lsls	r3, r3, #8
   161e2:	b29b      	uxth	r3, r3
   161e4:	4413      	add	r3, r2
   161e6:	b29a      	uxth	r2, r3
   161e8:	68fb      	ldr	r3, [r7, #12]
   161ea:	80da      	strh	r2, [r3, #6]
   161ec:	68bb      	ldr	r3, [r7, #8]
   161ee:	3302      	adds	r3, #2
   161f0:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   161f2:	68bb      	ldr	r3, [r7, #8]
   161f4:	781b      	ldrb	r3, [r3, #0]
   161f6:	b29a      	uxth	r2, r3
   161f8:	68bb      	ldr	r3, [r7, #8]
   161fa:	3301      	adds	r3, #1
   161fc:	781b      	ldrb	r3, [r3, #0]
   161fe:	b29b      	uxth	r3, r3
   16200:	021b      	lsls	r3, r3, #8
   16202:	b29b      	uxth	r3, r3
   16204:	4413      	add	r3, r2
   16206:	b29a      	uxth	r2, r3
   16208:	68fb      	ldr	r3, [r7, #12]
   1620a:	811a      	strh	r2, [r3, #8]
   1620c:	68bb      	ldr	r3, [r7, #8]
   1620e:	3302      	adds	r3, #2
   16210:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   16212:	68bb      	ldr	r3, [r7, #8]
   16214:	781b      	ldrb	r3, [r3, #0]
   16216:	b29a      	uxth	r2, r3
   16218:	68bb      	ldr	r3, [r7, #8]
   1621a:	3301      	adds	r3, #1
   1621c:	781b      	ldrb	r3, [r3, #0]
   1621e:	b29b      	uxth	r3, r3
   16220:	021b      	lsls	r3, r3, #8
   16222:	b29b      	uxth	r3, r3
   16224:	4413      	add	r3, r2
   16226:	b29a      	uxth	r2, r3
   16228:	68fb      	ldr	r3, [r7, #12]
   1622a:	815a      	strh	r2, [r3, #10]
   1622c:	68bb      	ldr	r3, [r7, #8]
   1622e:	3302      	adds	r3, #2
   16230:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   16232:	68bb      	ldr	r3, [r7, #8]
   16234:	781b      	ldrb	r3, [r3, #0]
   16236:	b29a      	uxth	r2, r3
   16238:	68bb      	ldr	r3, [r7, #8]
   1623a:	3301      	adds	r3, #1
   1623c:	781b      	ldrb	r3, [r3, #0]
   1623e:	b29b      	uxth	r3, r3
   16240:	021b      	lsls	r3, r3, #8
   16242:	b29b      	uxth	r3, r3
   16244:	4413      	add	r3, r2
   16246:	b29a      	uxth	r2, r3
   16248:	68fb      	ldr	r3, [r7, #12]
   1624a:	819a      	strh	r2, [r3, #12]
   1624c:	68bb      	ldr	r3, [r7, #8]
   1624e:	3302      	adds	r3, #2
   16250:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   16252:	68fb      	ldr	r3, [r7, #12]
   16254:	791a      	ldrb	r2, [r3, #4]
   16256:	68fb      	ldr	r3, [r7, #12]
   16258:	70da      	strb	r2, [r3, #3]
}
   1625a:	bf00      	nop
   1625c:	3714      	adds	r7, #20
   1625e:	46bd      	mov	sp, r7
   16260:	f85d 7b04 	ldr.w	r7, [sp], #4
   16264:	4770      	bx	lr

00016266 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16266:	b480      	push	{r7}
   16268:	b085      	sub	sp, #20
   1626a:	af00      	add	r7, sp, #0
   1626c:	60f8      	str	r0, [r7, #12]
   1626e:	60b9      	str	r1, [r7, #8]
   16270:	4613      	mov	r3, r2
   16272:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   16274:	68bb      	ldr	r3, [r7, #8]
   16276:	781b      	ldrb	r3, [r3, #0]
   16278:	b29a      	uxth	r2, r3
   1627a:	68bb      	ldr	r3, [r7, #8]
   1627c:	3301      	adds	r3, #1
   1627e:	781b      	ldrb	r3, [r3, #0]
   16280:	b29b      	uxth	r3, r3
   16282:	021b      	lsls	r3, r3, #8
   16284:	b29b      	uxth	r3, r3
   16286:	4413      	add	r3, r2
   16288:	b29a      	uxth	r2, r3
   1628a:	68fb      	ldr	r3, [r7, #12]
   1628c:	809a      	strh	r2, [r3, #4]
   1628e:	68bb      	ldr	r3, [r7, #8]
   16290:	3302      	adds	r3, #2
   16292:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   16294:	68bb      	ldr	r3, [r7, #8]
   16296:	781b      	ldrb	r3, [r3, #0]
   16298:	b29a      	uxth	r2, r3
   1629a:	68bb      	ldr	r3, [r7, #8]
   1629c:	3301      	adds	r3, #1
   1629e:	781b      	ldrb	r3, [r3, #0]
   162a0:	b29b      	uxth	r3, r3
   162a2:	021b      	lsls	r3, r3, #8
   162a4:	b29b      	uxth	r3, r3
   162a6:	4413      	add	r3, r2
   162a8:	b29a      	uxth	r2, r3
   162aa:	68fb      	ldr	r3, [r7, #12]
   162ac:	80da      	strh	r2, [r3, #6]
   162ae:	68bb      	ldr	r3, [r7, #8]
   162b0:	3302      	adds	r3, #2
   162b2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   162b4:	68bb      	ldr	r3, [r7, #8]
   162b6:	781b      	ldrb	r3, [r3, #0]
   162b8:	b29a      	uxth	r2, r3
   162ba:	68bb      	ldr	r3, [r7, #8]
   162bc:	3301      	adds	r3, #1
   162be:	781b      	ldrb	r3, [r3, #0]
   162c0:	b29b      	uxth	r3, r3
   162c2:	021b      	lsls	r3, r3, #8
   162c4:	b29b      	uxth	r3, r3
   162c6:	4413      	add	r3, r2
   162c8:	b29a      	uxth	r2, r3
   162ca:	68fb      	ldr	r3, [r7, #12]
   162cc:	811a      	strh	r2, [r3, #8]
   162ce:	68bb      	ldr	r3, [r7, #8]
   162d0:	3302      	adds	r3, #2
   162d2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   162d4:	68bb      	ldr	r3, [r7, #8]
   162d6:	781b      	ldrb	r3, [r3, #0]
   162d8:	b29a      	uxth	r2, r3
   162da:	68bb      	ldr	r3, [r7, #8]
   162dc:	3301      	adds	r3, #1
   162de:	781b      	ldrb	r3, [r3, #0]
   162e0:	b29b      	uxth	r3, r3
   162e2:	021b      	lsls	r3, r3, #8
   162e4:	b29b      	uxth	r3, r3
   162e6:	4413      	add	r3, r2
   162e8:	b29a      	uxth	r2, r3
   162ea:	68fb      	ldr	r3, [r7, #12]
   162ec:	815a      	strh	r2, [r3, #10]
   162ee:	68bb      	ldr	r3, [r7, #8]
   162f0:	3302      	adds	r3, #2
   162f2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   162f4:	68bb      	ldr	r3, [r7, #8]
   162f6:	781b      	ldrb	r3, [r3, #0]
   162f8:	b29a      	uxth	r2, r3
   162fa:	68bb      	ldr	r3, [r7, #8]
   162fc:	3301      	adds	r3, #1
   162fe:	781b      	ldrb	r3, [r3, #0]
   16300:	b29b      	uxth	r3, r3
   16302:	021b      	lsls	r3, r3, #8
   16304:	b29b      	uxth	r3, r3
   16306:	4413      	add	r3, r2
   16308:	b29a      	uxth	r2, r3
   1630a:	68fb      	ldr	r3, [r7, #12]
   1630c:	819a      	strh	r2, [r3, #12]
   1630e:	68bb      	ldr	r3, [r7, #8]
   16310:	3302      	adds	r3, #2
   16312:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   16314:	68fb      	ldr	r3, [r7, #12]
   16316:	889a      	ldrh	r2, [r3, #4]
   16318:	68fb      	ldr	r3, [r7, #12]
   1631a:	801a      	strh	r2, [r3, #0]
}
   1631c:	bf00      	nop
   1631e:	3714      	adds	r7, #20
   16320:	46bd      	mov	sp, r7
   16322:	f85d 7b04 	ldr.w	r7, [sp], #4
   16326:	4770      	bx	lr

00016328 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16328:	b480      	push	{r7}
   1632a:	b085      	sub	sp, #20
   1632c:	af00      	add	r7, sp, #0
   1632e:	60f8      	str	r0, [r7, #12]
   16330:	60b9      	str	r1, [r7, #8]
   16332:	4613      	mov	r3, r2
   16334:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   16336:	68bb      	ldr	r3, [r7, #8]
   16338:	781b      	ldrb	r3, [r3, #0]
   1633a:	b29a      	uxth	r2, r3
   1633c:	68bb      	ldr	r3, [r7, #8]
   1633e:	3301      	adds	r3, #1
   16340:	781b      	ldrb	r3, [r3, #0]
   16342:	b29b      	uxth	r3, r3
   16344:	021b      	lsls	r3, r3, #8
   16346:	b29b      	uxth	r3, r3
   16348:	4413      	add	r3, r2
   1634a:	b29a      	uxth	r2, r3
   1634c:	68fb      	ldr	r3, [r7, #12]
   1634e:	809a      	strh	r2, [r3, #4]
   16350:	68bb      	ldr	r3, [r7, #8]
   16352:	3302      	adds	r3, #2
   16354:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   16356:	68bb      	ldr	r3, [r7, #8]
   16358:	781b      	ldrb	r3, [r3, #0]
   1635a:	b29a      	uxth	r2, r3
   1635c:	68bb      	ldr	r3, [r7, #8]
   1635e:	3301      	adds	r3, #1
   16360:	781b      	ldrb	r3, [r3, #0]
   16362:	b29b      	uxth	r3, r3
   16364:	021b      	lsls	r3, r3, #8
   16366:	b29b      	uxth	r3, r3
   16368:	4413      	add	r3, r2
   1636a:	b29a      	uxth	r2, r3
   1636c:	68fb      	ldr	r3, [r7, #12]
   1636e:	80da      	strh	r2, [r3, #6]
   16370:	68bb      	ldr	r3, [r7, #8]
   16372:	3302      	adds	r3, #2
   16374:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   16376:	68bb      	ldr	r3, [r7, #8]
   16378:	781b      	ldrb	r3, [r3, #0]
   1637a:	b29a      	uxth	r2, r3
   1637c:	68bb      	ldr	r3, [r7, #8]
   1637e:	3301      	adds	r3, #1
   16380:	781b      	ldrb	r3, [r3, #0]
   16382:	b29b      	uxth	r3, r3
   16384:	021b      	lsls	r3, r3, #8
   16386:	b29b      	uxth	r3, r3
   16388:	4413      	add	r3, r2
   1638a:	b29a      	uxth	r2, r3
   1638c:	68fb      	ldr	r3, [r7, #12]
   1638e:	811a      	strh	r2, [r3, #8]
   16390:	68bb      	ldr	r3, [r7, #8]
   16392:	3302      	adds	r3, #2
   16394:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   16396:	68bb      	ldr	r3, [r7, #8]
   16398:	781b      	ldrb	r3, [r3, #0]
   1639a:	b29a      	uxth	r2, r3
   1639c:	68bb      	ldr	r3, [r7, #8]
   1639e:	3301      	adds	r3, #1
   163a0:	781b      	ldrb	r3, [r3, #0]
   163a2:	b29b      	uxth	r3, r3
   163a4:	021b      	lsls	r3, r3, #8
   163a6:	b29b      	uxth	r3, r3
   163a8:	4413      	add	r3, r2
   163aa:	b29a      	uxth	r2, r3
   163ac:	68fb      	ldr	r3, [r7, #12]
   163ae:	815a      	strh	r2, [r3, #10]
   163b0:	68bb      	ldr	r3, [r7, #8]
   163b2:	3302      	adds	r3, #2
   163b4:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   163b6:	68bb      	ldr	r3, [r7, #8]
   163b8:	781b      	ldrb	r3, [r3, #0]
   163ba:	b29a      	uxth	r2, r3
   163bc:	68bb      	ldr	r3, [r7, #8]
   163be:	3301      	adds	r3, #1
   163c0:	781b      	ldrb	r3, [r3, #0]
   163c2:	b29b      	uxth	r3, r3
   163c4:	021b      	lsls	r3, r3, #8
   163c6:	b29b      	uxth	r3, r3
   163c8:	4413      	add	r3, r2
   163ca:	b29a      	uxth	r2, r3
   163cc:	68fb      	ldr	r3, [r7, #12]
   163ce:	819a      	strh	r2, [r3, #12]
   163d0:	68bb      	ldr	r3, [r7, #8]
   163d2:	3302      	adds	r3, #2
   163d4:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   163d6:	68fb      	ldr	r3, [r7, #12]
   163d8:	889a      	ldrh	r2, [r3, #4]
   163da:	68fb      	ldr	r3, [r7, #12]
   163dc:	801a      	strh	r2, [r3, #0]
}
   163de:	bf00      	nop
   163e0:	3714      	adds	r7, #20
   163e2:	46bd      	mov	sp, r7
   163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   163e8:	4770      	bx	lr

000163ea <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   163ea:	b580      	push	{r7, lr}
   163ec:	b084      	sub	sp, #16
   163ee:	af00      	add	r7, sp, #0
   163f0:	60f8      	str	r0, [r7, #12]
   163f2:	60b9      	str	r1, [r7, #8]
   163f4:	4613      	mov	r3, r2
   163f6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   163f8:	68bb      	ldr	r3, [r7, #8]
   163fa:	1c5a      	adds	r2, r3, #1
   163fc:	60ba      	str	r2, [r7, #8]
   163fe:	781a      	ldrb	r2, [r3, #0]
   16400:	68fb      	ldr	r3, [r7, #12]
   16402:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   16404:	68fb      	ldr	r3, [r7, #12]
   16406:	3305      	adds	r3, #5
   16408:	2240      	movs	r2, #64	; 0x40
   1640a:	68b9      	ldr	r1, [r7, #8]
   1640c:	4618      	mov	r0, r3
   1640e:	f7f5 fea7 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   16412:	68fb      	ldr	r3, [r7, #12]
   16414:	791a      	ldrb	r2, [r3, #4]
   16416:	68fb      	ldr	r3, [r7, #12]
   16418:	70da      	strb	r2, [r3, #3]
}
   1641a:	bf00      	nop
   1641c:	3710      	adds	r7, #16
   1641e:	46bd      	mov	sp, r7
   16420:	bd80      	pop	{r7, pc}

00016422 <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16422:	b580      	push	{r7, lr}
   16424:	b084      	sub	sp, #16
   16426:	af00      	add	r7, sp, #0
   16428:	60f8      	str	r0, [r7, #12]
   1642a:	60b9      	str	r1, [r7, #8]
   1642c:	4613      	mov	r3, r2
   1642e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   16430:	68bb      	ldr	r3, [r7, #8]
   16432:	1c5a      	adds	r2, r3, #1
   16434:	60ba      	str	r2, [r7, #8]
   16436:	781a      	ldrb	r2, [r3, #0]
   16438:	68fb      	ldr	r3, [r7, #12]
   1643a:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   1643c:	68fb      	ldr	r3, [r7, #12]
   1643e:	3305      	adds	r3, #5
   16440:	2220      	movs	r2, #32
   16442:	68b9      	ldr	r1, [r7, #8]
   16444:	4618      	mov	r0, r3
   16446:	f7f5 fe8b 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   1644a:	68fb      	ldr	r3, [r7, #12]
   1644c:	791a      	ldrb	r2, [r3, #4]
   1644e:	68fb      	ldr	r3, [r7, #12]
   16450:	70da      	strb	r2, [r3, #3]
}
   16452:	bf00      	nop
   16454:	3710      	adds	r7, #16
   16456:	46bd      	mov	sp, r7
   16458:	bd80      	pop	{r7, pc}

0001645a <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1645a:	b480      	push	{r7}
   1645c:	b085      	sub	sp, #20
   1645e:	af00      	add	r7, sp, #0
   16460:	60f8      	str	r0, [r7, #12]
   16462:	60b9      	str	r1, [r7, #8]
   16464:	4613      	mov	r3, r2
   16466:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   16468:	68bb      	ldr	r3, [r7, #8]
   1646a:	1c5a      	adds	r2, r3, #1
   1646c:	60ba      	str	r2, [r7, #8]
   1646e:	781a      	ldrb	r2, [r3, #0]
   16470:	68fb      	ldr	r3, [r7, #12]
   16472:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   16474:	68bb      	ldr	r3, [r7, #8]
   16476:	781b      	ldrb	r3, [r3, #0]
   16478:	b29a      	uxth	r2, r3
   1647a:	68bb      	ldr	r3, [r7, #8]
   1647c:	3301      	adds	r3, #1
   1647e:	781b      	ldrb	r3, [r3, #0]
   16480:	b29b      	uxth	r3, r3
   16482:	021b      	lsls	r3, r3, #8
   16484:	b29b      	uxth	r3, r3
   16486:	4413      	add	r3, r2
   16488:	b29a      	uxth	r2, r3
   1648a:	68fb      	ldr	r3, [r7, #12]
   1648c:	80da      	strh	r2, [r3, #6]
   1648e:	68bb      	ldr	r3, [r7, #8]
   16490:	3302      	adds	r3, #2
   16492:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   16494:	68fb      	ldr	r3, [r7, #12]
   16496:	791a      	ldrb	r2, [r3, #4]
   16498:	68fb      	ldr	r3, [r7, #12]
   1649a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   1649c:	68fb      	ldr	r3, [r7, #12]
   1649e:	88da      	ldrh	r2, [r3, #6]
   164a0:	68fb      	ldr	r3, [r7, #12]
   164a2:	801a      	strh	r2, [r3, #0]
}
   164a4:	bf00      	nop
   164a6:	3714      	adds	r7, #20
   164a8:	46bd      	mov	sp, r7
   164aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   164ae:	4770      	bx	lr

000164b0 <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   164b0:	b480      	push	{r7}
   164b2:	b085      	sub	sp, #20
   164b4:	af00      	add	r7, sp, #0
   164b6:	60f8      	str	r0, [r7, #12]
   164b8:	60b9      	str	r1, [r7, #8]
   164ba:	4613      	mov	r3, r2
   164bc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   164be:	68bb      	ldr	r3, [r7, #8]
   164c0:	781b      	ldrb	r3, [r3, #0]
   164c2:	b29a      	uxth	r2, r3
   164c4:	68bb      	ldr	r3, [r7, #8]
   164c6:	3301      	adds	r3, #1
   164c8:	781b      	ldrb	r3, [r3, #0]
   164ca:	b29b      	uxth	r3, r3
   164cc:	021b      	lsls	r3, r3, #8
   164ce:	b29b      	uxth	r3, r3
   164d0:	4413      	add	r3, r2
   164d2:	b29a      	uxth	r2, r3
   164d4:	68fb      	ldr	r3, [r7, #12]
   164d6:	809a      	strh	r2, [r3, #4]
   164d8:	68bb      	ldr	r3, [r7, #8]
   164da:	3302      	adds	r3, #2
   164dc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   164de:	68fb      	ldr	r3, [r7, #12]
   164e0:	889a      	ldrh	r2, [r3, #4]
   164e2:	68fb      	ldr	r3, [r7, #12]
   164e4:	801a      	strh	r2, [r3, #0]
}
   164e6:	bf00      	nop
   164e8:	3714      	adds	r7, #20
   164ea:	46bd      	mov	sp, r7
   164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   164f0:	4770      	bx	lr

000164f2 <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   164f2:	b480      	push	{r7}
   164f4:	b085      	sub	sp, #20
   164f6:	af00      	add	r7, sp, #0
   164f8:	60f8      	str	r0, [r7, #12]
   164fa:	60b9      	str	r1, [r7, #8]
   164fc:	4613      	mov	r3, r2
   164fe:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   16500:	68bb      	ldr	r3, [r7, #8]
   16502:	1c5a      	adds	r2, r3, #1
   16504:	60ba      	str	r2, [r7, #8]
   16506:	781a      	ldrb	r2, [r3, #0]
   16508:	68fb      	ldr	r3, [r7, #12]
   1650a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   1650c:	68bb      	ldr	r3, [r7, #8]
   1650e:	781b      	ldrb	r3, [r3, #0]
   16510:	b29a      	uxth	r2, r3
   16512:	68bb      	ldr	r3, [r7, #8]
   16514:	3301      	adds	r3, #1
   16516:	781b      	ldrb	r3, [r3, #0]
   16518:	b29b      	uxth	r3, r3
   1651a:	021b      	lsls	r3, r3, #8
   1651c:	b29b      	uxth	r3, r3
   1651e:	4413      	add	r3, r2
   16520:	b29a      	uxth	r2, r3
   16522:	68fb      	ldr	r3, [r7, #12]
   16524:	80da      	strh	r2, [r3, #6]
   16526:	68bb      	ldr	r3, [r7, #8]
   16528:	3302      	adds	r3, #2
   1652a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   1652c:	68bb      	ldr	r3, [r7, #8]
   1652e:	1c5a      	adds	r2, r3, #1
   16530:	60ba      	str	r2, [r7, #8]
   16532:	781a      	ldrb	r2, [r3, #0]
   16534:	68fb      	ldr	r3, [r7, #12]
   16536:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   16538:	68bb      	ldr	r3, [r7, #8]
   1653a:	1c5a      	adds	r2, r3, #1
   1653c:	60ba      	str	r2, [r7, #8]
   1653e:	781a      	ldrb	r2, [r3, #0]
   16540:	68fb      	ldr	r3, [r7, #12]
   16542:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   16544:	68fb      	ldr	r3, [r7, #12]
   16546:	791a      	ldrb	r2, [r3, #4]
   16548:	68fb      	ldr	r3, [r7, #12]
   1654a:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   1654c:	68fb      	ldr	r3, [r7, #12]
   1654e:	88da      	ldrh	r2, [r3, #6]
   16550:	68fb      	ldr	r3, [r7, #12]
   16552:	801a      	strh	r2, [r3, #0]
}
   16554:	bf00      	nop
   16556:	3714      	adds	r7, #20
   16558:	46bd      	mov	sp, r7
   1655a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1655e:	4770      	bx	lr

00016560 <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16560:	b480      	push	{r7}
   16562:	b085      	sub	sp, #20
   16564:	af00      	add	r7, sp, #0
   16566:	60f8      	str	r0, [r7, #12]
   16568:	60b9      	str	r1, [r7, #8]
   1656a:	4613      	mov	r3, r2
   1656c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   1656e:	68bb      	ldr	r3, [r7, #8]
   16570:	1c5a      	adds	r2, r3, #1
   16572:	60ba      	str	r2, [r7, #8]
   16574:	781a      	ldrb	r2, [r3, #0]
   16576:	68fb      	ldr	r3, [r7, #12]
   16578:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   1657a:	68fb      	ldr	r3, [r7, #12]
   1657c:	791a      	ldrb	r2, [r3, #4]
   1657e:	68fb      	ldr	r3, [r7, #12]
   16580:	70da      	strb	r2, [r3, #3]
}
   16582:	bf00      	nop
   16584:	3714      	adds	r7, #20
   16586:	46bd      	mov	sp, r7
   16588:	f85d 7b04 	ldr.w	r7, [sp], #4
   1658c:	4770      	bx	lr

0001658e <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1658e:	b480      	push	{r7}
   16590:	b085      	sub	sp, #20
   16592:	af00      	add	r7, sp, #0
   16594:	60f8      	str	r0, [r7, #12]
   16596:	60b9      	str	r1, [r7, #8]
   16598:	4613      	mov	r3, r2
   1659a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   1659c:	68bb      	ldr	r3, [r7, #8]
   1659e:	1c5a      	adds	r2, r3, #1
   165a0:	60ba      	str	r2, [r7, #8]
   165a2:	781a      	ldrb	r2, [r3, #0]
   165a4:	68fb      	ldr	r3, [r7, #12]
   165a6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   165a8:	68bb      	ldr	r3, [r7, #8]
   165aa:	781b      	ldrb	r3, [r3, #0]
   165ac:	b29a      	uxth	r2, r3
   165ae:	68bb      	ldr	r3, [r7, #8]
   165b0:	3301      	adds	r3, #1
   165b2:	781b      	ldrb	r3, [r3, #0]
   165b4:	b29b      	uxth	r3, r3
   165b6:	021b      	lsls	r3, r3, #8
   165b8:	b29b      	uxth	r3, r3
   165ba:	4413      	add	r3, r2
   165bc:	b29a      	uxth	r2, r3
   165be:	68fb      	ldr	r3, [r7, #12]
   165c0:	80da      	strh	r2, [r3, #6]
   165c2:	68bb      	ldr	r3, [r7, #8]
   165c4:	3302      	adds	r3, #2
   165c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   165c8:	68bb      	ldr	r3, [r7, #8]
   165ca:	1c5a      	adds	r2, r3, #1
   165cc:	60ba      	str	r2, [r7, #8]
   165ce:	781a      	ldrb	r2, [r3, #0]
   165d0:	68fb      	ldr	r3, [r7, #12]
   165d2:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   165d4:	68bb      	ldr	r3, [r7, #8]
   165d6:	1c5a      	adds	r2, r3, #1
   165d8:	60ba      	str	r2, [r7, #8]
   165da:	781a      	ldrb	r2, [r3, #0]
   165dc:	68fb      	ldr	r3, [r7, #12]
   165de:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   165e0:	68fb      	ldr	r3, [r7, #12]
   165e2:	791a      	ldrb	r2, [r3, #4]
   165e4:	68fb      	ldr	r3, [r7, #12]
   165e6:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   165e8:	68fb      	ldr	r3, [r7, #12]
   165ea:	88da      	ldrh	r2, [r3, #6]
   165ec:	68fb      	ldr	r3, [r7, #12]
   165ee:	801a      	strh	r2, [r3, #0]
}
   165f0:	bf00      	nop
   165f2:	3714      	adds	r7, #20
   165f4:	46bd      	mov	sp, r7
   165f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   165fa:	4770      	bx	lr

000165fc <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   165fc:	b580      	push	{r7, lr}
   165fe:	b084      	sub	sp, #16
   16600:	af00      	add	r7, sp, #0
   16602:	6078      	str	r0, [r7, #4]
   16604:	460b      	mov	r3, r1
   16606:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   16608:	687b      	ldr	r3, [r7, #4]
   1660a:	1c5a      	adds	r2, r3, #1
   1660c:	607a      	str	r2, [r7, #4]
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   16612:	7bfb      	ldrb	r3, [r7, #15]
   16614:	2b0f      	cmp	r3, #15
   16616:	d862      	bhi.n	166de <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   16618:	203b      	movs	r0, #59	; 0x3b
   1661a:	f003 fed3 	bl	1a3c4 <WsfBufAlloc>
   1661e:	60b8      	str	r0, [r7, #8]
   16620:	68bb      	ldr	r3, [r7, #8]
   16622:	2b00      	cmp	r3, #0
   16624:	d05c      	beq.n	166e0 <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   16626:	e04f      	b.n	166c8 <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   16628:	687b      	ldr	r3, [r7, #4]
   1662a:	1c5a      	adds	r2, r3, #1
   1662c:	607a      	str	r2, [r7, #4]
   1662e:	781a      	ldrb	r2, [r3, #0]
   16630:	68bb      	ldr	r3, [r7, #8]
   16632:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16634:	687b      	ldr	r3, [r7, #4]
   16636:	1c5a      	adds	r2, r3, #1
   16638:	607a      	str	r2, [r7, #4]
   1663a:	781a      	ldrb	r2, [r3, #0]
   1663c:	68bb      	ldr	r3, [r7, #8]
   1663e:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16640:	68bb      	ldr	r3, [r7, #8]
   16642:	330c      	adds	r3, #12
   16644:	6879      	ldr	r1, [r7, #4]
   16646:	4618      	mov	r0, r3
   16648:	f7fd fa22 	bl	13a90 <BdaCpy>
   1664c:	687b      	ldr	r3, [r7, #4]
   1664e:	3306      	adds	r3, #6
   16650:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   16652:	687b      	ldr	r3, [r7, #4]
   16654:	1c5a      	adds	r2, r3, #1
   16656:	607a      	str	r2, [r7, #4]
   16658:	781a      	ldrb	r2, [r3, #0]
   1665a:	68bb      	ldr	r3, [r7, #8]
   1665c:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   1665e:	68bb      	ldr	r3, [r7, #8]
   16660:	7a1b      	ldrb	r3, [r3, #8]
   16662:	2b1f      	cmp	r3, #31
   16664:	d836      	bhi.n	166d4 <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   16666:	68bb      	ldr	r3, [r7, #8]
   16668:	f103 021c 	add.w	r2, r3, #28
   1666c:	68bb      	ldr	r3, [r7, #8]
   1666e:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   16670:	68bb      	ldr	r3, [r7, #8]
   16672:	6858      	ldr	r0, [r3, #4]
   16674:	68bb      	ldr	r3, [r7, #8]
   16676:	7a1b      	ldrb	r3, [r3, #8]
   16678:	461a      	mov	r2, r3
   1667a:	6879      	ldr	r1, [r7, #4]
   1667c:	f7f5 fd70 	bl	c160 <memcpy>
      p += pMsg->len;
   16680:	68bb      	ldr	r3, [r7, #8]
   16682:	7a1b      	ldrb	r3, [r3, #8]
   16684:	461a      	mov	r2, r3
   16686:	687b      	ldr	r3, [r7, #4]
   16688:	4413      	add	r3, r2
   1668a:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   1668c:	687b      	ldr	r3, [r7, #4]
   1668e:	1c5a      	adds	r2, r3, #1
   16690:	607a      	str	r2, [r7, #4]
   16692:	781b      	ldrb	r3, [r3, #0]
   16694:	b25a      	sxtb	r2, r3
   16696:	68bb      	ldr	r3, [r7, #8]
   16698:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   1669a:	68bb      	ldr	r3, [r7, #8]
   1669c:	2200      	movs	r2, #0
   1669e:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   166a0:	68bb      	ldr	r3, [r7, #8]
   166a2:	3313      	adds	r3, #19
   166a4:	2206      	movs	r2, #6
   166a6:	2100      	movs	r1, #0
   166a8:	4618      	mov	r0, r3
   166aa:	f7f5 fe57 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   166ae:	68bb      	ldr	r3, [r7, #8]
   166b0:	2200      	movs	r2, #0
   166b2:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   166b4:	68bb      	ldr	r3, [r7, #8]
   166b6:	2206      	movs	r2, #6
   166b8:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   166ba:	68bb      	ldr	r3, [r7, #8]
   166bc:	2200      	movs	r2, #0
   166be:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   166c0:	4b09      	ldr	r3, [pc, #36]	; (166e8 <hciEvtProcessLeAdvReport+0xec>)
   166c2:	689b      	ldr	r3, [r3, #8]
   166c4:	68b8      	ldr	r0, [r7, #8]
   166c6:	4798      	blx	r3
    while (i-- > 0)
   166c8:	7bfb      	ldrb	r3, [r7, #15]
   166ca:	1e5a      	subs	r2, r3, #1
   166cc:	73fa      	strb	r2, [r7, #15]
   166ce:	2b00      	cmp	r3, #0
   166d0:	d1aa      	bne.n	16628 <hciEvtProcessLeAdvReport+0x2c>
   166d2:	e000      	b.n	166d6 <hciEvtProcessLeAdvReport+0xda>
        break;
   166d4:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   166d6:	68b8      	ldr	r0, [r7, #8]
   166d8:	f003 feb4 	bl	1a444 <WsfBufFree>
   166dc:	e000      	b.n	166e0 <hciEvtProcessLeAdvReport+0xe4>
    return;
   166de:	bf00      	nop
  }
}
   166e0:	3710      	adds	r7, #16
   166e2:	46bd      	mov	sp, r7
   166e4:	bd80      	pop	{r7, pc}
   166e6:	bf00      	nop
   166e8:	10009e2c 	.word	0x10009e2c

000166ec <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   166ec:	b580      	push	{r7, lr}
   166ee:	b086      	sub	sp, #24
   166f0:	af00      	add	r7, sp, #0
   166f2:	6078      	str	r0, [r7, #4]
   166f4:	460b      	mov	r3, r1
   166f6:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   166f8:	687b      	ldr	r3, [r7, #4]
   166fa:	781b      	ldrb	r3, [r3, #0]
   166fc:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   166fe:	7dfb      	ldrb	r3, [r7, #23]
   16700:	2b0f      	cmp	r3, #15
   16702:	f200 80c4 	bhi.w	1688e <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   16706:	687b      	ldr	r3, [r7, #4]
   16708:	3301      	adds	r3, #1
   1670a:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   1670c:	2300      	movs	r3, #0
   1670e:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   16710:	e011      	b.n	16736 <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   16712:	693b      	ldr	r3, [r7, #16]
   16714:	3317      	adds	r3, #23
   16716:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   16718:	693b      	ldr	r3, [r7, #16]
   1671a:	1c5a      	adds	r2, r3, #1
   1671c:	613a      	str	r2, [r7, #16]
   1671e:	781b      	ldrb	r3, [r3, #0]
   16720:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   16722:	7bbb      	ldrb	r3, [r7, #14]
   16724:	693a      	ldr	r2, [r7, #16]
   16726:	4413      	add	r3, r2
   16728:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   1672a:	7bba      	ldrb	r2, [r7, #14]
   1672c:	7bfb      	ldrb	r3, [r7, #15]
   1672e:	429a      	cmp	r2, r3
   16730:	d901      	bls.n	16736 <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   16732:	7bbb      	ldrb	r3, [r7, #14]
   16734:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   16736:	7dfb      	ldrb	r3, [r7, #23]
   16738:	1e5a      	subs	r2, r3, #1
   1673a:	75fa      	strb	r2, [r7, #23]
   1673c:	2b00      	cmp	r3, #0
   1673e:	d1e8      	bne.n	16712 <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   16740:	7bfb      	ldrb	r3, [r7, #15]
   16742:	b29b      	uxth	r3, r3
   16744:	3320      	adds	r3, #32
   16746:	b29b      	uxth	r3, r3
   16748:	4618      	mov	r0, r3
   1674a:	f003 fe3b 	bl	1a3c4 <WsfBufAlloc>
   1674e:	60b8      	str	r0, [r7, #8]
   16750:	68bb      	ldr	r3, [r7, #8]
   16752:	2b00      	cmp	r3, #0
   16754:	f000 809c 	beq.w	16890 <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   16758:	687b      	ldr	r3, [r7, #4]
   1675a:	1c5a      	adds	r2, r3, #1
   1675c:	607a      	str	r2, [r7, #4]
   1675e:	781b      	ldrb	r3, [r3, #0]
   16760:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   16762:	e088      	b.n	16876 <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   16764:	687b      	ldr	r3, [r7, #4]
   16766:	781b      	ldrb	r3, [r3, #0]
   16768:	b29a      	uxth	r2, r3
   1676a:	687b      	ldr	r3, [r7, #4]
   1676c:	3301      	adds	r3, #1
   1676e:	781b      	ldrb	r3, [r3, #0]
   16770:	b29b      	uxth	r3, r3
   16772:	021b      	lsls	r3, r3, #8
   16774:	b29b      	uxth	r3, r3
   16776:	4413      	add	r3, r2
   16778:	b29a      	uxth	r2, r3
   1677a:	68bb      	ldr	r3, [r7, #8]
   1677c:	809a      	strh	r2, [r3, #4]
   1677e:	687b      	ldr	r3, [r7, #4]
   16780:	3302      	adds	r3, #2
   16782:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16784:	687b      	ldr	r3, [r7, #4]
   16786:	1c5a      	adds	r2, r3, #1
   16788:	607a      	str	r2, [r7, #4]
   1678a:	781a      	ldrb	r2, [r3, #0]
   1678c:	68bb      	ldr	r3, [r7, #8]
   1678e:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16790:	68bb      	ldr	r3, [r7, #8]
   16792:	3307      	adds	r3, #7
   16794:	6879      	ldr	r1, [r7, #4]
   16796:	4618      	mov	r0, r3
   16798:	f7fd f97a 	bl	13a90 <BdaCpy>
   1679c:	687b      	ldr	r3, [r7, #4]
   1679e:	3306      	adds	r3, #6
   167a0:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   167a2:	687b      	ldr	r3, [r7, #4]
   167a4:	1c5a      	adds	r2, r3, #1
   167a6:	607a      	str	r2, [r7, #4]
   167a8:	781a      	ldrb	r2, [r3, #0]
   167aa:	68bb      	ldr	r3, [r7, #8]
   167ac:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   167ae:	687b      	ldr	r3, [r7, #4]
   167b0:	1c5a      	adds	r2, r3, #1
   167b2:	607a      	str	r2, [r7, #4]
   167b4:	781a      	ldrb	r2, [r3, #0]
   167b6:	68bb      	ldr	r3, [r7, #8]
   167b8:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   167ba:	687b      	ldr	r3, [r7, #4]
   167bc:	1c5a      	adds	r2, r3, #1
   167be:	607a      	str	r2, [r7, #4]
   167c0:	781a      	ldrb	r2, [r3, #0]
   167c2:	68bb      	ldr	r3, [r7, #8]
   167c4:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   167c6:	687b      	ldr	r3, [r7, #4]
   167c8:	1c5a      	adds	r2, r3, #1
   167ca:	607a      	str	r2, [r7, #4]
   167cc:	781b      	ldrb	r3, [r3, #0]
   167ce:	b25a      	sxtb	r2, r3
   167d0:	68bb      	ldr	r3, [r7, #8]
   167d2:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   167d4:	687b      	ldr	r3, [r7, #4]
   167d6:	1c5a      	adds	r2, r3, #1
   167d8:	607a      	str	r2, [r7, #4]
   167da:	781b      	ldrb	r3, [r3, #0]
   167dc:	b25a      	sxtb	r2, r3
   167de:	68bb      	ldr	r3, [r7, #8]
   167e0:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   167e2:	687b      	ldr	r3, [r7, #4]
   167e4:	781b      	ldrb	r3, [r3, #0]
   167e6:	b29a      	uxth	r2, r3
   167e8:	687b      	ldr	r3, [r7, #4]
   167ea:	3301      	adds	r3, #1
   167ec:	781b      	ldrb	r3, [r3, #0]
   167ee:	b29b      	uxth	r3, r3
   167f0:	021b      	lsls	r3, r3, #8
   167f2:	b29b      	uxth	r3, r3
   167f4:	4413      	add	r3, r2
   167f6:	b29b      	uxth	r3, r3
   167f8:	b21a      	sxth	r2, r3
   167fa:	68bb      	ldr	r3, [r7, #8]
   167fc:	825a      	strh	r2, [r3, #18]
   167fe:	687b      	ldr	r3, [r7, #4]
   16800:	3302      	adds	r3, #2
   16802:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   16804:	687b      	ldr	r3, [r7, #4]
   16806:	1c5a      	adds	r2, r3, #1
   16808:	607a      	str	r2, [r7, #4]
   1680a:	781a      	ldrb	r2, [r3, #0]
   1680c:	68bb      	ldr	r3, [r7, #8]
   1680e:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   16810:	68bb      	ldr	r3, [r7, #8]
   16812:	3315      	adds	r3, #21
   16814:	6879      	ldr	r1, [r7, #4]
   16816:	4618      	mov	r0, r3
   16818:	f7fd f93a 	bl	13a90 <BdaCpy>
   1681c:	687b      	ldr	r3, [r7, #4]
   1681e:	3306      	adds	r3, #6
   16820:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   16822:	687b      	ldr	r3, [r7, #4]
   16824:	1c5a      	adds	r2, r3, #1
   16826:	607a      	str	r2, [r7, #4]
   16828:	781a      	ldrb	r2, [r3, #0]
   1682a:	68bb      	ldr	r3, [r7, #8]
   1682c:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   1682e:	68bb      	ldr	r3, [r7, #8]
   16830:	7edb      	ldrb	r3, [r3, #27]
   16832:	2be5      	cmp	r3, #229	; 0xe5
   16834:	d826      	bhi.n	16884 <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   16836:	68bb      	ldr	r3, [r7, #8]
   16838:	f103 0220 	add.w	r2, r3, #32
   1683c:	68bb      	ldr	r3, [r7, #8]
   1683e:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   16840:	68bb      	ldr	r3, [r7, #8]
   16842:	69d8      	ldr	r0, [r3, #28]
   16844:	68bb      	ldr	r3, [r7, #8]
   16846:	7edb      	ldrb	r3, [r3, #27]
   16848:	461a      	mov	r2, r3
   1684a:	6879      	ldr	r1, [r7, #4]
   1684c:	f7f5 fc88 	bl	c160 <memcpy>
      p += pMsg->len;
   16850:	68bb      	ldr	r3, [r7, #8]
   16852:	7edb      	ldrb	r3, [r3, #27]
   16854:	461a      	mov	r2, r3
   16856:	687b      	ldr	r3, [r7, #4]
   16858:	4413      	add	r3, r2
   1685a:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   1685c:	68bb      	ldr	r3, [r7, #8]
   1685e:	2200      	movs	r2, #0
   16860:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   16862:	68bb      	ldr	r3, [r7, #8]
   16864:	222c      	movs	r2, #44	; 0x2c
   16866:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16868:	68bb      	ldr	r3, [r7, #8]
   1686a:	2200      	movs	r2, #0
   1686c:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1686e:	4b0a      	ldr	r3, [pc, #40]	; (16898 <hciEvtProcessLeExtAdvReport+0x1ac>)
   16870:	689b      	ldr	r3, [r3, #8]
   16872:	68b8      	ldr	r0, [r7, #8]
   16874:	4798      	blx	r3
    while (i-- > 0)
   16876:	7dfb      	ldrb	r3, [r7, #23]
   16878:	1e5a      	subs	r2, r3, #1
   1687a:	75fa      	strb	r2, [r7, #23]
   1687c:	2b00      	cmp	r3, #0
   1687e:	f47f af71 	bne.w	16764 <hciEvtProcessLeExtAdvReport+0x78>
   16882:	e000      	b.n	16886 <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   16884:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   16886:	68b8      	ldr	r0, [r7, #8]
   16888:	f003 fddc 	bl	1a444 <WsfBufFree>
   1688c:	e000      	b.n	16890 <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   1688e:	bf00      	nop
  }
}
   16890:	3718      	adds	r7, #24
   16892:	46bd      	mov	sp, r7
   16894:	bd80      	pop	{r7, pc}
   16896:	bf00      	nop
   16898:	10009e2c 	.word	0x10009e2c

0001689c <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1689c:	b480      	push	{r7}
   1689e:	b085      	sub	sp, #20
   168a0:	af00      	add	r7, sp, #0
   168a2:	60f8      	str	r0, [r7, #12]
   168a4:	60b9      	str	r1, [r7, #8]
   168a6:	4613      	mov	r3, r2
   168a8:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   168aa:	bf00      	nop
   168ac:	3714      	adds	r7, #20
   168ae:	46bd      	mov	sp, r7
   168b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   168b4:	4770      	bx	lr

000168b6 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   168b6:	b480      	push	{r7}
   168b8:	b085      	sub	sp, #20
   168ba:	af00      	add	r7, sp, #0
   168bc:	60f8      	str	r0, [r7, #12]
   168be:	60b9      	str	r1, [r7, #8]
   168c0:	4613      	mov	r3, r2
   168c2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   168c4:	68bb      	ldr	r3, [r7, #8]
   168c6:	1c5a      	adds	r2, r3, #1
   168c8:	60ba      	str	r2, [r7, #8]
   168ca:	781a      	ldrb	r2, [r3, #0]
   168cc:	68fb      	ldr	r3, [r7, #12]
   168ce:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   168d0:	68bb      	ldr	r3, [r7, #8]
   168d2:	1c5a      	adds	r2, r3, #1
   168d4:	60ba      	str	r2, [r7, #8]
   168d6:	781a      	ldrb	r2, [r3, #0]
   168d8:	68fb      	ldr	r3, [r7, #12]
   168da:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   168dc:	68bb      	ldr	r3, [r7, #8]
   168de:	781b      	ldrb	r3, [r3, #0]
   168e0:	b29a      	uxth	r2, r3
   168e2:	68bb      	ldr	r3, [r7, #8]
   168e4:	3301      	adds	r3, #1
   168e6:	781b      	ldrb	r3, [r3, #0]
   168e8:	b29b      	uxth	r3, r3
   168ea:	021b      	lsls	r3, r3, #8
   168ec:	b29b      	uxth	r3, r3
   168ee:	4413      	add	r3, r2
   168f0:	b29a      	uxth	r2, r3
   168f2:	68fb      	ldr	r3, [r7, #12]
   168f4:	80da      	strh	r2, [r3, #6]
   168f6:	68bb      	ldr	r3, [r7, #8]
   168f8:	3302      	adds	r3, #2
   168fa:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   168fc:	68bb      	ldr	r3, [r7, #8]
   168fe:	1c5a      	adds	r2, r3, #1
   16900:	60ba      	str	r2, [r7, #8]
   16902:	781a      	ldrb	r2, [r3, #0]
   16904:	68fb      	ldr	r3, [r7, #12]
   16906:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   16908:	68fb      	ldr	r3, [r7, #12]
   1690a:	791a      	ldrb	r2, [r3, #4]
   1690c:	68fb      	ldr	r3, [r7, #12]
   1690e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   16910:	68fb      	ldr	r3, [r7, #12]
   16912:	88da      	ldrh	r2, [r3, #6]
   16914:	68fb      	ldr	r3, [r7, #12]
   16916:	801a      	strh	r2, [r3, #0]
}
   16918:	bf00      	nop
   1691a:	3714      	adds	r7, #20
   1691c:	46bd      	mov	sp, r7
   1691e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16922:	4770      	bx	lr

00016924 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16924:	b580      	push	{r7, lr}
   16926:	b084      	sub	sp, #16
   16928:	af00      	add	r7, sp, #0
   1692a:	60f8      	str	r0, [r7, #12]
   1692c:	60b9      	str	r1, [r7, #8]
   1692e:	4613      	mov	r3, r2
   16930:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   16932:	68bb      	ldr	r3, [r7, #8]
   16934:	1c5a      	adds	r2, r3, #1
   16936:	60ba      	str	r2, [r7, #8]
   16938:	781a      	ldrb	r2, [r3, #0]
   1693a:	68fb      	ldr	r3, [r7, #12]
   1693c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   1693e:	68bb      	ldr	r3, [r7, #8]
   16940:	1c5a      	adds	r2, r3, #1
   16942:	60ba      	str	r2, [r7, #8]
   16944:	781a      	ldrb	r2, [r3, #0]
   16946:	68fb      	ldr	r3, [r7, #12]
   16948:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   1694a:	68fb      	ldr	r3, [r7, #12]
   1694c:	3306      	adds	r3, #6
   1694e:	68b9      	ldr	r1, [r7, #8]
   16950:	4618      	mov	r0, r3
   16952:	f7fd f89d 	bl	13a90 <BdaCpy>
   16956:	68bb      	ldr	r3, [r7, #8]
   16958:	3306      	adds	r3, #6
   1695a:	60bb      	str	r3, [r7, #8]
}
   1695c:	bf00      	nop
   1695e:	3710      	adds	r7, #16
   16960:	46bd      	mov	sp, r7
   16962:	bd80      	pop	{r7, pc}

00016964 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16964:	b580      	push	{r7, lr}
   16966:	b084      	sub	sp, #16
   16968:	af00      	add	r7, sp, #0
   1696a:	60f8      	str	r0, [r7, #12]
   1696c:	60b9      	str	r1, [r7, #8]
   1696e:	4613      	mov	r3, r2
   16970:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   16972:	68bb      	ldr	r3, [r7, #8]
   16974:	1c5a      	adds	r2, r3, #1
   16976:	60ba      	str	r2, [r7, #8]
   16978:	781a      	ldrb	r2, [r3, #0]
   1697a:	68fb      	ldr	r3, [r7, #12]
   1697c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1697e:	68bb      	ldr	r3, [r7, #8]
   16980:	781b      	ldrb	r3, [r3, #0]
   16982:	b29a      	uxth	r2, r3
   16984:	68bb      	ldr	r3, [r7, #8]
   16986:	3301      	adds	r3, #1
   16988:	781b      	ldrb	r3, [r3, #0]
   1698a:	b29b      	uxth	r3, r3
   1698c:	021b      	lsls	r3, r3, #8
   1698e:	b29b      	uxth	r3, r3
   16990:	4413      	add	r3, r2
   16992:	b29a      	uxth	r2, r3
   16994:	68fb      	ldr	r3, [r7, #12]
   16996:	80da      	strh	r2, [r3, #6]
   16998:	68bb      	ldr	r3, [r7, #8]
   1699a:	3302      	adds	r3, #2
   1699c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   1699e:	68bb      	ldr	r3, [r7, #8]
   169a0:	1c5a      	adds	r2, r3, #1
   169a2:	60ba      	str	r2, [r7, #8]
   169a4:	781a      	ldrb	r2, [r3, #0]
   169a6:	68fb      	ldr	r3, [r7, #12]
   169a8:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   169aa:	68bb      	ldr	r3, [r7, #8]
   169ac:	1c5a      	adds	r2, r3, #1
   169ae:	60ba      	str	r2, [r7, #8]
   169b0:	781a      	ldrb	r2, [r3, #0]
   169b2:	68fb      	ldr	r3, [r7, #12]
   169b4:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   169b6:	68fb      	ldr	r3, [r7, #12]
   169b8:	330a      	adds	r3, #10
   169ba:	68b9      	ldr	r1, [r7, #8]
   169bc:	4618      	mov	r0, r3
   169be:	f7fd f867 	bl	13a90 <BdaCpy>
   169c2:	68bb      	ldr	r3, [r7, #8]
   169c4:	3306      	adds	r3, #6
   169c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   169c8:	68bb      	ldr	r3, [r7, #8]
   169ca:	1c5a      	adds	r2, r3, #1
   169cc:	60ba      	str	r2, [r7, #8]
   169ce:	781a      	ldrb	r2, [r3, #0]
   169d0:	68fb      	ldr	r3, [r7, #12]
   169d2:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   169d4:	68bb      	ldr	r3, [r7, #8]
   169d6:	781b      	ldrb	r3, [r3, #0]
   169d8:	b29a      	uxth	r2, r3
   169da:	68bb      	ldr	r3, [r7, #8]
   169dc:	3301      	adds	r3, #1
   169de:	781b      	ldrb	r3, [r3, #0]
   169e0:	b29b      	uxth	r3, r3
   169e2:	021b      	lsls	r3, r3, #8
   169e4:	b29b      	uxth	r3, r3
   169e6:	4413      	add	r3, r2
   169e8:	b29a      	uxth	r2, r3
   169ea:	68fb      	ldr	r3, [r7, #12]
   169ec:	825a      	strh	r2, [r3, #18]
   169ee:	68bb      	ldr	r3, [r7, #8]
   169f0:	3302      	adds	r3, #2
   169f2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   169f4:	68bb      	ldr	r3, [r7, #8]
   169f6:	1c5a      	adds	r2, r3, #1
   169f8:	60ba      	str	r2, [r7, #8]
   169fa:	781a      	ldrb	r2, [r3, #0]
   169fc:	68fb      	ldr	r3, [r7, #12]
   169fe:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   16a00:	68fb      	ldr	r3, [r7, #12]
   16a02:	791a      	ldrb	r2, [r3, #4]
   16a04:	68fb      	ldr	r3, [r7, #12]
   16a06:	70da      	strb	r2, [r3, #3]
}
   16a08:	bf00      	nop
   16a0a:	3710      	adds	r7, #16
   16a0c:	46bd      	mov	sp, r7
   16a0e:	bd80      	pop	{r7, pc}

00016a10 <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   16a10:	b580      	push	{r7, lr}
   16a12:	b084      	sub	sp, #16
   16a14:	af00      	add	r7, sp, #0
   16a16:	6078      	str	r0, [r7, #4]
   16a18:	460b      	mov	r3, r1
   16a1a:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   16a1c:	687b      	ldr	r3, [r7, #4]
   16a1e:	795b      	ldrb	r3, [r3, #5]
   16a20:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   16a22:	7bfb      	ldrb	r3, [r7, #15]
   16a24:	2bf8      	cmp	r3, #248	; 0xf8
   16a26:	d857      	bhi.n	16ad8 <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   16a28:	7bfb      	ldrb	r3, [r7, #15]
   16a2a:	b29b      	uxth	r3, r3
   16a2c:	3310      	adds	r3, #16
   16a2e:	b29b      	uxth	r3, r3
   16a30:	4618      	mov	r0, r3
   16a32:	f003 fcc7 	bl	1a3c4 <WsfBufAlloc>
   16a36:	60b8      	str	r0, [r7, #8]
   16a38:	68bb      	ldr	r3, [r7, #8]
   16a3a:	2b00      	cmp	r3, #0
   16a3c:	d04d      	beq.n	16ada <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   16a3e:	687b      	ldr	r3, [r7, #4]
   16a40:	781b      	ldrb	r3, [r3, #0]
   16a42:	b29a      	uxth	r2, r3
   16a44:	687b      	ldr	r3, [r7, #4]
   16a46:	3301      	adds	r3, #1
   16a48:	781b      	ldrb	r3, [r3, #0]
   16a4a:	b29b      	uxth	r3, r3
   16a4c:	021b      	lsls	r3, r3, #8
   16a4e:	b29b      	uxth	r3, r3
   16a50:	4413      	add	r3, r2
   16a52:	b29a      	uxth	r2, r3
   16a54:	68bb      	ldr	r3, [r7, #8]
   16a56:	809a      	strh	r2, [r3, #4]
   16a58:	687b      	ldr	r3, [r7, #4]
   16a5a:	3302      	adds	r3, #2
   16a5c:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   16a5e:	687b      	ldr	r3, [r7, #4]
   16a60:	1c5a      	adds	r2, r3, #1
   16a62:	607a      	str	r2, [r7, #4]
   16a64:	781a      	ldrb	r2, [r3, #0]
   16a66:	68bb      	ldr	r3, [r7, #8]
   16a68:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   16a6a:	687b      	ldr	r3, [r7, #4]
   16a6c:	1c5a      	adds	r2, r3, #1
   16a6e:	607a      	str	r2, [r7, #4]
   16a70:	781a      	ldrb	r2, [r3, #0]
   16a72:	68bb      	ldr	r3, [r7, #8]
   16a74:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   16a76:	687b      	ldr	r3, [r7, #4]
   16a78:	1c5a      	adds	r2, r3, #1
   16a7a:	607a      	str	r2, [r7, #4]
   16a7c:	781a      	ldrb	r2, [r3, #0]
   16a7e:	68bb      	ldr	r3, [r7, #8]
   16a80:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   16a82:	687b      	ldr	r3, [r7, #4]
   16a84:	1c5a      	adds	r2, r3, #1
   16a86:	607a      	str	r2, [r7, #4]
   16a88:	781a      	ldrb	r2, [r3, #0]
   16a8a:	68bb      	ldr	r3, [r7, #8]
   16a8c:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   16a8e:	687b      	ldr	r3, [r7, #4]
   16a90:	1c5a      	adds	r2, r3, #1
   16a92:	607a      	str	r2, [r7, #4]
   16a94:	781a      	ldrb	r2, [r3, #0]
   16a96:	68bb      	ldr	r3, [r7, #8]
   16a98:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   16a9a:	68bb      	ldr	r3, [r7, #8]
   16a9c:	f103 0210 	add.w	r2, r3, #16
   16aa0:	68bb      	ldr	r3, [r7, #8]
   16aa2:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   16aa4:	68bb      	ldr	r3, [r7, #8]
   16aa6:	68d8      	ldr	r0, [r3, #12]
   16aa8:	68bb      	ldr	r3, [r7, #8]
   16aaa:	7a9b      	ldrb	r3, [r3, #10]
   16aac:	461a      	mov	r2, r3
   16aae:	6879      	ldr	r1, [r7, #4]
   16ab0:	f7f5 fb56 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   16ab4:	68bb      	ldr	r3, [r7, #8]
   16ab6:	2200      	movs	r2, #0
   16ab8:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   16aba:	68bb      	ldr	r3, [r7, #8]
   16abc:	2231      	movs	r2, #49	; 0x31
   16abe:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   16ac0:	68bb      	ldr	r3, [r7, #8]
   16ac2:	7a5a      	ldrb	r2, [r3, #9]
   16ac4:	68bb      	ldr	r3, [r7, #8]
   16ac6:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   16ac8:	4b05      	ldr	r3, [pc, #20]	; (16ae0 <hciEvtProcessLePerAdvReport+0xd0>)
   16aca:	689b      	ldr	r3, [r3, #8]
   16acc:	68b8      	ldr	r0, [r7, #8]
   16ace:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   16ad0:	68b8      	ldr	r0, [r7, #8]
   16ad2:	f003 fcb7 	bl	1a444 <WsfBufFree>
   16ad6:	e000      	b.n	16ada <hciEvtProcessLePerAdvReport+0xca>
    return;
   16ad8:	bf00      	nop
  }
}
   16ada:	3710      	adds	r7, #16
   16adc:	46bd      	mov	sp, r7
   16ade:	bd80      	pop	{r7, pc}
   16ae0:	10009e2c 	.word	0x10009e2c

00016ae4 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16ae4:	b480      	push	{r7}
   16ae6:	b085      	sub	sp, #20
   16ae8:	af00      	add	r7, sp, #0
   16aea:	60f8      	str	r0, [r7, #12]
   16aec:	60b9      	str	r1, [r7, #8]
   16aee:	4613      	mov	r3, r2
   16af0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   16af2:	68bb      	ldr	r3, [r7, #8]
   16af4:	1c5a      	adds	r2, r3, #1
   16af6:	60ba      	str	r2, [r7, #8]
   16af8:	781a      	ldrb	r2, [r3, #0]
   16afa:	68fb      	ldr	r3, [r7, #12]
   16afc:	70da      	strb	r2, [r3, #3]
}
   16afe:	bf00      	nop
   16b00:	3714      	adds	r7, #20
   16b02:	46bd      	mov	sp, r7
   16b04:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b08:	4770      	bx	lr

00016b0a <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16b0a:	b480      	push	{r7}
   16b0c:	b085      	sub	sp, #20
   16b0e:	af00      	add	r7, sp, #0
   16b10:	60f8      	str	r0, [r7, #12]
   16b12:	60b9      	str	r1, [r7, #8]
   16b14:	4613      	mov	r3, r2
   16b16:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   16b18:	68bb      	ldr	r3, [r7, #8]
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	b29a      	uxth	r2, r3
   16b1e:	68bb      	ldr	r3, [r7, #8]
   16b20:	3301      	adds	r3, #1
   16b22:	781b      	ldrb	r3, [r3, #0]
   16b24:	b29b      	uxth	r3, r3
   16b26:	021b      	lsls	r3, r3, #8
   16b28:	b29b      	uxth	r3, r3
   16b2a:	4413      	add	r3, r2
   16b2c:	b29a      	uxth	r2, r3
   16b2e:	68fb      	ldr	r3, [r7, #12]
   16b30:	809a      	strh	r2, [r3, #4]
   16b32:	68bb      	ldr	r3, [r7, #8]
   16b34:	3302      	adds	r3, #2
   16b36:	60bb      	str	r3, [r7, #8]
}
   16b38:	bf00      	nop
   16b3a:	3714      	adds	r7, #20
   16b3c:	46bd      	mov	sp, r7
   16b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16b42:	4770      	bx	lr

00016b44 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   16b44:	b580      	push	{r7, lr}
   16b46:	b084      	sub	sp, #16
   16b48:	af00      	add	r7, sp, #0
   16b4a:	6078      	str	r0, [r7, #4]
   16b4c:	460b      	mov	r3, r1
   16b4e:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   16b50:	687b      	ldr	r3, [r7, #4]
   16b52:	1c5a      	adds	r2, r3, #1
   16b54:	607a      	str	r2, [r7, #4]
   16b56:	781b      	ldrb	r3, [r3, #0]
   16b58:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   16b5a:	7bfb      	ldrb	r3, [r7, #15]
   16b5c:	2b0f      	cmp	r3, #15
   16b5e:	d84e      	bhi.n	16bfe <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   16b60:	201c      	movs	r0, #28
   16b62:	f003 fc2f 	bl	1a3c4 <WsfBufAlloc>
   16b66:	60b8      	str	r0, [r7, #8]
   16b68:	68bb      	ldr	r3, [r7, #8]
   16b6a:	2b00      	cmp	r3, #0
   16b6c:	d048      	beq.n	16c00 <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   16b6e:	e03d      	b.n	16bec <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   16b70:	687b      	ldr	r3, [r7, #4]
   16b72:	1c5a      	adds	r2, r3, #1
   16b74:	607a      	str	r2, [r7, #4]
   16b76:	781a      	ldrb	r2, [r3, #0]
   16b78:	68bb      	ldr	r3, [r7, #8]
   16b7a:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16b7c:	687b      	ldr	r3, [r7, #4]
   16b7e:	1c5a      	adds	r2, r3, #1
   16b80:	607a      	str	r2, [r7, #4]
   16b82:	781a      	ldrb	r2, [r3, #0]
   16b84:	68bb      	ldr	r3, [r7, #8]
   16b86:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16b88:	68bb      	ldr	r3, [r7, #8]
   16b8a:	330c      	adds	r3, #12
   16b8c:	6879      	ldr	r1, [r7, #4]
   16b8e:	4618      	mov	r0, r3
   16b90:	f7fc ff7e 	bl	13a90 <BdaCpy>
   16b94:	687b      	ldr	r3, [r7, #4]
   16b96:	3306      	adds	r3, #6
   16b98:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   16b9a:	687b      	ldr	r3, [r7, #4]
   16b9c:	1c5a      	adds	r2, r3, #1
   16b9e:	607a      	str	r2, [r7, #4]
   16ba0:	781a      	ldrb	r2, [r3, #0]
   16ba2:	68bb      	ldr	r3, [r7, #8]
   16ba4:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   16ba6:	68bb      	ldr	r3, [r7, #8]
   16ba8:	3313      	adds	r3, #19
   16baa:	6879      	ldr	r1, [r7, #4]
   16bac:	4618      	mov	r0, r3
   16bae:	f7fc ff6f 	bl	13a90 <BdaCpy>
   16bb2:	687b      	ldr	r3, [r7, #4]
   16bb4:	3306      	adds	r3, #6
   16bb6:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   16bb8:	687b      	ldr	r3, [r7, #4]
   16bba:	1c5a      	adds	r2, r3, #1
   16bbc:	607a      	str	r2, [r7, #4]
   16bbe:	781b      	ldrb	r3, [r3, #0]
   16bc0:	b25a      	sxtb	r2, r3
   16bc2:	68bb      	ldr	r3, [r7, #8]
   16bc4:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   16bc6:	68bb      	ldr	r3, [r7, #8]
   16bc8:	2200      	movs	r2, #0
   16bca:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   16bcc:	68bb      	ldr	r3, [r7, #8]
   16bce:	2200      	movs	r2, #0
   16bd0:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   16bd2:	68bb      	ldr	r3, [r7, #8]
   16bd4:	2200      	movs	r2, #0
   16bd6:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   16bd8:	68bb      	ldr	r3, [r7, #8]
   16bda:	2206      	movs	r2, #6
   16bdc:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16bde:	68bb      	ldr	r3, [r7, #8]
   16be0:	2200      	movs	r2, #0
   16be2:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   16be4:	4b08      	ldr	r3, [pc, #32]	; (16c08 <hciEvtProcessLeDirectAdvReport+0xc4>)
   16be6:	689b      	ldr	r3, [r3, #8]
   16be8:	68b8      	ldr	r0, [r7, #8]
   16bea:	4798      	blx	r3
    while (i-- > 0)
   16bec:	7bfb      	ldrb	r3, [r7, #15]
   16bee:	1e5a      	subs	r2, r3, #1
   16bf0:	73fa      	strb	r2, [r7, #15]
   16bf2:	2b00      	cmp	r3, #0
   16bf4:	d1bc      	bne.n	16b70 <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   16bf6:	68b8      	ldr	r0, [r7, #8]
   16bf8:	f003 fc24 	bl	1a444 <WsfBufFree>
   16bfc:	e000      	b.n	16c00 <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   16bfe:	bf00      	nop
  }
}
   16c00:	3710      	adds	r7, #16
   16c02:	46bd      	mov	sp, r7
   16c04:	bd80      	pop	{r7, pc}
   16c06:	bf00      	nop
   16c08:	10009e2c 	.word	0x10009e2c

00016c0c <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   16c0c:	b480      	push	{r7}
   16c0e:	b083      	sub	sp, #12
   16c10:	af00      	add	r7, sp, #0
   16c12:	4603      	mov	r3, r0
   16c14:	460a      	mov	r2, r1
   16c16:	71fb      	strb	r3, [r7, #7]
   16c18:	4613      	mov	r3, r2
   16c1a:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   16c1c:	bf00      	nop
   16c1e:	370c      	adds	r7, #12
   16c20:	46bd      	mov	sp, r7
   16c22:	f85d 7b04 	ldr.w	r7, [sp], #4
   16c26:	4770      	bx	lr

00016c28 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   16c28:	b580      	push	{r7, lr}
   16c2a:	b084      	sub	sp, #16
   16c2c:	af00      	add	r7, sp, #0
   16c2e:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   16c30:	687b      	ldr	r3, [r7, #4]
   16c32:	1c5a      	adds	r2, r3, #1
   16c34:	607a      	str	r2, [r7, #4]
   16c36:	781b      	ldrb	r3, [r3, #0]
   16c38:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   16c3a:	687b      	ldr	r3, [r7, #4]
   16c3c:	1c5a      	adds	r2, r3, #1
   16c3e:	607a      	str	r2, [r7, #4]
   16c40:	781b      	ldrb	r3, [r3, #0]
   16c42:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   16c44:	687b      	ldr	r3, [r7, #4]
   16c46:	781b      	ldrb	r3, [r3, #0]
   16c48:	b29a      	uxth	r2, r3
   16c4a:	687b      	ldr	r3, [r7, #4]
   16c4c:	3301      	adds	r3, #1
   16c4e:	781b      	ldrb	r3, [r3, #0]
   16c50:	b29b      	uxth	r3, r3
   16c52:	021b      	lsls	r3, r3, #8
   16c54:	b29b      	uxth	r3, r3
   16c56:	4413      	add	r3, r2
   16c58:	81bb      	strh	r3, [r7, #12]
   16c5a:	687b      	ldr	r3, [r7, #4]
   16c5c:	3302      	adds	r3, #2
   16c5e:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   16c60:	7bfb      	ldrb	r3, [r7, #15]
   16c62:	2b00      	cmp	r3, #0
   16c64:	d005      	beq.n	16c72 <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   16c66:	89ba      	ldrh	r2, [r7, #12]
   16c68:	7bfb      	ldrb	r3, [r7, #15]
   16c6a:	4611      	mov	r1, r2
   16c6c:	4618      	mov	r0, r3
   16c6e:	f7ff ffcd 	bl	16c0c <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   16c72:	7bbb      	ldrb	r3, [r7, #14]
   16c74:	4618      	mov	r0, r3
   16c76:	f7fd f881 	bl	13d7c <hciCmdRecvCmpl>
}
   16c7a:	bf00      	nop
   16c7c:	3710      	adds	r7, #16
   16c7e:	46bd      	mov	sp, r7
   16c80:	bd80      	pop	{r7, pc}
	...

00016c84 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   16c84:	b580      	push	{r7, lr}
   16c86:	b086      	sub	sp, #24
   16c88:	af00      	add	r7, sp, #0
   16c8a:	6078      	str	r0, [r7, #4]
   16c8c:	460b      	mov	r3, r1
   16c8e:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   16c90:	2300      	movs	r3, #0
   16c92:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   16c94:	4ba2      	ldr	r3, [pc, #648]	; (16f20 <hciEvtProcessCmdCmpl+0x29c>)
   16c96:	689b      	ldr	r3, [r3, #8]
   16c98:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   16c9a:	687b      	ldr	r3, [r7, #4]
   16c9c:	1c5a      	adds	r2, r3, #1
   16c9e:	607a      	str	r2, [r7, #4]
   16ca0:	781b      	ldrb	r3, [r3, #0]
   16ca2:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   16ca4:	687b      	ldr	r3, [r7, #4]
   16ca6:	781b      	ldrb	r3, [r3, #0]
   16ca8:	b29a      	uxth	r2, r3
   16caa:	687b      	ldr	r3, [r7, #4]
   16cac:	3301      	adds	r3, #1
   16cae:	781b      	ldrb	r3, [r3, #0]
   16cb0:	b29b      	uxth	r3, r3
   16cb2:	021b      	lsls	r3, r3, #8
   16cb4:	b29b      	uxth	r3, r3
   16cb6:	4413      	add	r3, r2
   16cb8:	81bb      	strh	r3, [r7, #12]
   16cba:	687b      	ldr	r3, [r7, #4]
   16cbc:	3302      	adds	r3, #2
   16cbe:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   16cc0:	89bb      	ldrh	r3, [r7, #12]
   16cc2:	f242 0222 	movw	r2, #8226	; 0x2022
   16cc6:	4293      	cmp	r3, r2
   16cc8:	f000 80aa 	beq.w	16e20 <hciEvtProcessCmdCmpl+0x19c>
   16ccc:	f242 0222 	movw	r2, #8226	; 0x2022
   16cd0:	4293      	cmp	r3, r2
   16cd2:	dc49      	bgt.n	16d68 <hciEvtProcessCmdCmpl+0xe4>
   16cd4:	f242 0215 	movw	r2, #8213	; 0x2015
   16cd8:	4293      	cmp	r3, r2
   16cda:	f000 80b3 	beq.w	16e44 <hciEvtProcessCmdCmpl+0x1c0>
   16cde:	f242 0215 	movw	r2, #8213	; 0x2015
   16ce2:	4293      	cmp	r3, r2
   16ce4:	dc22      	bgt.n	16d2c <hciEvtProcessCmdCmpl+0xa8>
   16ce6:	f241 4205 	movw	r2, #5125	; 0x1405
   16cea:	4293      	cmp	r3, r2
   16cec:	f000 80ad 	beq.w	16e4a <hciEvtProcessCmdCmpl+0x1c6>
   16cf0:	f241 4205 	movw	r2, #5125	; 0x1405
   16cf4:	4293      	cmp	r3, r2
   16cf6:	dc0a      	bgt.n	16d0e <hciEvtProcessCmdCmpl+0x8a>
   16cf8:	f640 422d 	movw	r2, #3117	; 0xc2d
   16cfc:	4293      	cmp	r3, r2
   16cfe:	f000 80a7 	beq.w	16e50 <hciEvtProcessCmdCmpl+0x1cc>
   16d02:	f640 427c 	movw	r2, #3196	; 0xc7c
   16d06:	4293      	cmp	r3, r2
   16d08:	f000 80b7 	beq.w	16e7a <hciEvtProcessCmdCmpl+0x1f6>
   16d0c:	e0cd      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16d0e:	f242 020c 	movw	r2, #8204	; 0x200c
   16d12:	4293      	cmp	r3, r2
   16d14:	f000 80ba 	beq.w	16e8c <hciEvtProcessCmdCmpl+0x208>
   16d18:	f242 020e 	movw	r2, #8206	; 0x200e
   16d1c:	4293      	cmp	r3, r2
   16d1e:	d06a      	beq.n	16df6 <hciEvtProcessCmdCmpl+0x172>
   16d20:	f242 020a 	movw	r2, #8202	; 0x200a
   16d24:	4293      	cmp	r3, r2
   16d26:	f000 80b4 	beq.w	16e92 <hciEvtProcessCmdCmpl+0x20e>
   16d2a:	e0be      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16d2c:	f242 021a 	movw	r2, #8218	; 0x201a
   16d30:	4293      	cmp	r3, r2
   16d32:	d07b      	beq.n	16e2c <hciEvtProcessCmdCmpl+0x1a8>
   16d34:	f242 021a 	movw	r2, #8218	; 0x201a
   16d38:	4293      	cmp	r3, r2
   16d3a:	dc08      	bgt.n	16d4e <hciEvtProcessCmdCmpl+0xca>
   16d3c:	f242 0217 	movw	r2, #8215	; 0x2017
   16d40:	4293      	cmp	r3, r2
   16d42:	d05b      	beq.n	16dfc <hciEvtProcessCmdCmpl+0x178>
   16d44:	f242 0218 	movw	r2, #8216	; 0x2018
   16d48:	4293      	cmp	r3, r2
   16d4a:	d075      	beq.n	16e38 <hciEvtProcessCmdCmpl+0x1b4>
   16d4c:	e0ad      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16d4e:	f242 0220 	movw	r2, #8224	; 0x2020
   16d52:	4293      	cmp	r3, r2
   16d54:	d058      	beq.n	16e08 <hciEvtProcessCmdCmpl+0x184>
   16d56:	f242 0220 	movw	r2, #8224	; 0x2020
   16d5a:	4293      	cmp	r3, r2
   16d5c:	dc57      	bgt.n	16e0e <hciEvtProcessCmdCmpl+0x18a>
   16d5e:	f242 021b 	movw	r2, #8219	; 0x201b
   16d62:	4293      	cmp	r3, r2
   16d64:	d065      	beq.n	16e32 <hciEvtProcessCmdCmpl+0x1ae>
   16d66:	e0a0      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16d68:	f242 022c 	movw	r2, #8236	; 0x202c
   16d6c:	4293      	cmp	r3, r2
   16d6e:	d07e      	beq.n	16e6e <hciEvtProcessCmdCmpl+0x1ea>
   16d70:	f242 022c 	movw	r2, #8236	; 0x202c
   16d74:	4293      	cmp	r3, r2
   16d76:	dc1d      	bgt.n	16db4 <hciEvtProcessCmdCmpl+0x130>
   16d78:	f242 0227 	movw	r2, #8231	; 0x2027
   16d7c:	4293      	cmp	r3, r2
   16d7e:	d06a      	beq.n	16e56 <hciEvtProcessCmdCmpl+0x1d2>
   16d80:	f242 0227 	movw	r2, #8231	; 0x2027
   16d84:	4293      	cmp	r3, r2
   16d86:	dc08      	bgt.n	16d9a <hciEvtProcessCmdCmpl+0x116>
   16d88:	f242 0223 	movw	r2, #8227	; 0x2023
   16d8c:	4293      	cmp	r3, r2
   16d8e:	d041      	beq.n	16e14 <hciEvtProcessCmdCmpl+0x190>
   16d90:	f242 0224 	movw	r2, #8228	; 0x2024
   16d94:	4293      	cmp	r3, r2
   16d96:	d040      	beq.n	16e1a <hciEvtProcessCmdCmpl+0x196>
   16d98:	e087      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16d9a:	f242 0229 	movw	r2, #8233	; 0x2029
   16d9e:	4293      	cmp	r3, r2
   16da0:	d05f      	beq.n	16e62 <hciEvtProcessCmdCmpl+0x1de>
   16da2:	f242 0229 	movw	r2, #8233	; 0x2029
   16da6:	4293      	cmp	r3, r2
   16da8:	db58      	blt.n	16e5c <hciEvtProcessCmdCmpl+0x1d8>
   16daa:	f242 022b 	movw	r2, #8235	; 0x202b
   16dae:	4293      	cmp	r3, r2
   16db0:	d05a      	beq.n	16e68 <hciEvtProcessCmdCmpl+0x1e4>
   16db2:	e07a      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16db4:	f242 0231 	movw	r2, #8241	; 0x2031
   16db8:	4293      	cmp	r3, r2
   16dba:	d064      	beq.n	16e86 <hciEvtProcessCmdCmpl+0x202>
   16dbc:	f242 0231 	movw	r2, #8241	; 0x2031
   16dc0:	4293      	cmp	r3, r2
   16dc2:	dc0c      	bgt.n	16dde <hciEvtProcessCmdCmpl+0x15a>
   16dc4:	f242 022f 	movw	r2, #8239	; 0x202f
   16dc8:	4293      	cmp	r3, r2
   16dca:	d02c      	beq.n	16e26 <hciEvtProcessCmdCmpl+0x1a2>
   16dcc:	f242 022f 	movw	r2, #8239	; 0x202f
   16dd0:	4293      	cmp	r3, r2
   16dd2:	dc55      	bgt.n	16e80 <hciEvtProcessCmdCmpl+0x1fc>
   16dd4:	f242 022d 	movw	r2, #8237	; 0x202d
   16dd8:	4293      	cmp	r3, r2
   16dda:	d04b      	beq.n	16e74 <hciEvtProcessCmdCmpl+0x1f0>
   16ddc:	e065      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
   16dde:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   16de2:	d05f      	beq.n	16ea4 <hciEvtProcessCmdCmpl+0x220>
   16de4:	f242 0242 	movw	r2, #8258	; 0x2042
   16de8:	4293      	cmp	r3, r2
   16dea:	d055      	beq.n	16e98 <hciEvtProcessCmdCmpl+0x214>
   16dec:	f242 0239 	movw	r2, #8249	; 0x2039
   16df0:	4293      	cmp	r3, r2
   16df2:	d054      	beq.n	16e9e <hciEvtProcessCmdCmpl+0x21a>
   16df4:	e059      	b.n	16eaa <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   16df6:	2305      	movs	r3, #5
   16df8:	75fb      	strb	r3, [r7, #23]
    break;
   16dfa:	e064      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   16dfc:	231b      	movs	r3, #27
   16dfe:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   16e00:	4b47      	ldr	r3, [pc, #284]	; (16f20 <hciEvtProcessCmdCmpl+0x29c>)
   16e02:	68db      	ldr	r3, [r3, #12]
   16e04:	613b      	str	r3, [r7, #16]
    break;
   16e06:	e05e      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   16e08:	231d      	movs	r3, #29
   16e0a:	75fb      	strb	r3, [r7, #23]
    break;
   16e0c:	e05b      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   16e0e:	231e      	movs	r3, #30
   16e10:	75fb      	strb	r3, [r7, #23]
    break;
   16e12:	e058      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16e14:	231f      	movs	r3, #31
   16e16:	75fb      	strb	r3, [r7, #23]
    break;
   16e18:	e055      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16e1a:	2320      	movs	r3, #32
   16e1c:	75fb      	strb	r3, [r7, #23]
    break;
   16e1e:	e052      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16e20:	2321      	movs	r3, #33	; 0x21
   16e22:	75fb      	strb	r3, [r7, #23]
    break;
   16e24:	e04f      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16e26:	2322      	movs	r3, #34	; 0x22
   16e28:	75fb      	strb	r3, [r7, #23]
    break;
   16e2a:	e04c      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   16e2c:	230c      	movs	r3, #12
   16e2e:	75fb      	strb	r3, [r7, #23]
    break;
   16e30:	e049      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   16e32:	230d      	movs	r3, #13
   16e34:	75fb      	strb	r3, [r7, #23]
    break;
   16e36:	e046      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   16e38:	231c      	movs	r3, #28
   16e3a:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   16e3c:	4b38      	ldr	r3, [pc, #224]	; (16f20 <hciEvtProcessCmdCmpl+0x29c>)
   16e3e:	68db      	ldr	r3, [r3, #12]
   16e40:	613b      	str	r3, [r7, #16]
    break;
   16e42:	e040      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   16e44:	2308      	movs	r3, #8
   16e46:	75fb      	strb	r3, [r7, #23]
    break;
   16e48:	e03d      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   16e4a:	2307      	movs	r3, #7
   16e4c:	75fb      	strb	r3, [r7, #23]
    break;
   16e4e:	e03a      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   16e50:	2309      	movs	r3, #9
   16e52:	75fb      	strb	r3, [r7, #23]
    break;
   16e54:	e037      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   16e56:	2315      	movs	r3, #21
   16e58:	75fb      	strb	r3, [r7, #23]
    break;
   16e5a:	e034      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   16e5c:	2316      	movs	r3, #22
   16e5e:	75fb      	strb	r3, [r7, #23]
    break;
   16e60:	e031      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   16e62:	2317      	movs	r3, #23
   16e64:	75fb      	strb	r3, [r7, #23]
    break;
   16e66:	e02e      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   16e68:	2318      	movs	r3, #24
   16e6a:	75fb      	strb	r3, [r7, #23]
    break;
   16e6c:	e02b      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   16e6e:	2319      	movs	r3, #25
   16e70:	75fb      	strb	r3, [r7, #23]
    break;
   16e72:	e028      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   16e74:	231a      	movs	r3, #26
   16e76:	75fb      	strb	r3, [r7, #23]
    break;
   16e78:	e025      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   16e7a:	2327      	movs	r3, #39	; 0x27
   16e7c:	75fb      	strb	r3, [r7, #23]
    break;
   16e7e:	e022      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   16e80:	2329      	movs	r3, #41	; 0x29
   16e82:	75fb      	strb	r3, [r7, #23]
    break;
   16e84:	e01f      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   16e86:	232a      	movs	r3, #42	; 0x2a
   16e88:	75fb      	strb	r3, [r7, #23]
    break;
   16e8a:	e01c      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   16e8c:	2334      	movs	r3, #52	; 0x34
   16e8e:	75fb      	strb	r3, [r7, #23]
    break;
   16e90:	e019      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   16e92:	2335      	movs	r3, #53	; 0x35
   16e94:	75fb      	strb	r3, [r7, #23]
    break;
   16e96:	e016      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   16e98:	2336      	movs	r3, #54	; 0x36
   16e9a:	75fb      	strb	r3, [r7, #23]
    break;
   16e9c:	e013      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   16e9e:	2337      	movs	r3, #55	; 0x37
   16ea0:	75fb      	strb	r3, [r7, #23]
    break;
   16ea2:	e010      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   16ea4:	2338      	movs	r3, #56	; 0x38
   16ea6:	75fb      	strb	r3, [r7, #23]
    break;
   16ea8:	e00d      	b.n	16ec6 <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   16eaa:	89bb      	ldrh	r3, [r7, #12]
   16eac:	0a9b      	lsrs	r3, r3, #10
   16eae:	b29b      	uxth	r3, r3
   16eb0:	2b3f      	cmp	r3, #63	; 0x3f
   16eb2:	d107      	bne.n	16ec4 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   16eb4:	78fa      	ldrb	r2, [r7, #3]
   16eb6:	89bb      	ldrh	r3, [r7, #12]
   16eb8:	6879      	ldr	r1, [r7, #4]
   16eba:	4618      	mov	r0, r3
   16ebc:	f000 fcc4 	bl	17848 <hciCoreVsCmdCmplRcvd>
   16ec0:	4603      	mov	r3, r0
   16ec2:	75fb      	strb	r3, [r7, #23]
    }
    break;
   16ec4:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   16ec6:	7dfb      	ldrb	r3, [r7, #23]
   16ec8:	2b00      	cmp	r3, #0
   16eca:	d021      	beq.n	16f10 <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   16ecc:	7dfb      	ldrb	r3, [r7, #23]
   16ece:	4a15      	ldr	r2, [pc, #84]	; (16f24 <hciEvtProcessCmdCmpl+0x2a0>)
   16ed0:	5cd3      	ldrb	r3, [r2, r3]
   16ed2:	b29b      	uxth	r3, r3
   16ed4:	4618      	mov	r0, r3
   16ed6:	f003 fa75 	bl	1a3c4 <WsfBufAlloc>
   16eda:	60b8      	str	r0, [r7, #8]
   16edc:	68bb      	ldr	r3, [r7, #8]
   16ede:	2b00      	cmp	r3, #0
   16ee0:	d016      	beq.n	16f10 <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   16ee2:	68bb      	ldr	r3, [r7, #8]
   16ee4:	2200      	movs	r2, #0
   16ee6:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   16ee8:	68bb      	ldr	r3, [r7, #8]
   16eea:	7dfa      	ldrb	r2, [r7, #23]
   16eec:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16eee:	68bb      	ldr	r3, [r7, #8]
   16ef0:	2200      	movs	r2, #0
   16ef2:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   16ef4:	7dfb      	ldrb	r3, [r7, #23]
   16ef6:	4a0c      	ldr	r2, [pc, #48]	; (16f28 <hciEvtProcessCmdCmpl+0x2a4>)
   16ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16efc:	78fa      	ldrb	r2, [r7, #3]
   16efe:	6879      	ldr	r1, [r7, #4]
   16f00:	68b8      	ldr	r0, [r7, #8]
   16f02:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   16f04:	693b      	ldr	r3, [r7, #16]
   16f06:	68b8      	ldr	r0, [r7, #8]
   16f08:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   16f0a:	68b8      	ldr	r0, [r7, #8]
   16f0c:	f003 fa9a 	bl	1a444 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   16f10:	7bfb      	ldrb	r3, [r7, #15]
   16f12:	4618      	mov	r0, r3
   16f14:	f7fc ff32 	bl	13d7c <hciCmdRecvCmpl>
}
   16f18:	bf00      	nop
   16f1a:	3718      	adds	r7, #24
   16f1c:	46bd      	mov	sp, r7
   16f1e:	bd80      	pop	{r7, pc}
   16f20:	10009e2c 	.word	0x10009e2c
   16f24:	00023aa0 	.word	0x00023aa0
   16f28:	000239bc 	.word	0x000239bc

00016f2c <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   16f2c:	b580      	push	{r7, lr}
   16f2e:	b088      	sub	sp, #32
   16f30:	af00      	add	r7, sp, #0
   16f32:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   16f34:	2300      	movs	r3, #0
   16f36:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   16f38:	4ba1      	ldr	r3, [pc, #644]	; (171c0 <hciEvtProcessMsg+0x294>)
   16f3a:	689b      	ldr	r3, [r3, #8]
   16f3c:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   16f3e:	687b      	ldr	r3, [r7, #4]
   16f40:	1c5a      	adds	r2, r3, #1
   16f42:	607a      	str	r2, [r7, #4]
   16f44:	781b      	ldrb	r3, [r3, #0]
   16f46:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   16f48:	687b      	ldr	r3, [r7, #4]
   16f4a:	1c5a      	adds	r2, r3, #1
   16f4c:	607a      	str	r2, [r7, #4]
   16f4e:	781b      	ldrb	r3, [r3, #0]
   16f50:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   16f52:	7dfb      	ldrb	r3, [r7, #23]
   16f54:	2b10      	cmp	r3, #16
   16f56:	f000 8121 	beq.w	1719c <hciEvtProcessMsg+0x270>
   16f5a:	2b10      	cmp	r3, #16
   16f5c:	dc10      	bgt.n	16f80 <hciEvtProcessMsg+0x54>
   16f5e:	2b0c      	cmp	r3, #12
   16f60:	f000 8103 	beq.w	1716a <hciEvtProcessMsg+0x23e>
   16f64:	2b0c      	cmp	r3, #12
   16f66:	dc06      	bgt.n	16f76 <hciEvtProcessMsg+0x4a>
   16f68:	2b05      	cmp	r3, #5
   16f6a:	f000 80ec 	beq.w	17146 <hciEvtProcessMsg+0x21a>
   16f6e:	2b08      	cmp	r3, #8
   16f70:	f000 80f2 	beq.w	17158 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   16f74:	e131      	b.n	171da <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16f76:	2b0e      	cmp	r3, #14
   16f78:	d020      	beq.n	16fbc <hciEvtProcessMsg+0x90>
   16f7a:	2b0f      	cmp	r3, #15
   16f7c:	d014      	beq.n	16fa8 <hciEvtProcessMsg+0x7c>
      break;
   16f7e:	e12c      	b.n	171da <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16f80:	2b30      	cmp	r3, #48	; 0x30
   16f82:	f000 80fb 	beq.w	1717c <hciEvtProcessMsg+0x250>
   16f86:	2b30      	cmp	r3, #48	; 0x30
   16f88:	dc05      	bgt.n	16f96 <hciEvtProcessMsg+0x6a>
   16f8a:	2b13      	cmp	r3, #19
   16f8c:	d022      	beq.n	16fd4 <hciEvtProcessMsg+0xa8>
   16f8e:	2b1a      	cmp	r3, #26
   16f90:	f000 80fd 	beq.w	1718e <hciEvtProcessMsg+0x262>
      break;
   16f94:	e121      	b.n	171da <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16f96:	2b57      	cmp	r3, #87	; 0x57
   16f98:	f000 8109 	beq.w	171ae <hciEvtProcessMsg+0x282>
   16f9c:	2bff      	cmp	r3, #255	; 0xff
   16f9e:	f000 8113 	beq.w	171c8 <hciEvtProcessMsg+0x29c>
   16fa2:	2b3e      	cmp	r3, #62	; 0x3e
   16fa4:	d020      	beq.n	16fe8 <hciEvtProcessMsg+0xbc>
      break;
   16fa6:	e118      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   16fa8:	4b86      	ldr	r3, [pc, #536]	; (171c4 <hciEvtProcessMsg+0x298>)
   16faa:	891b      	ldrh	r3, [r3, #8]
   16fac:	3301      	adds	r3, #1
   16fae:	b29a      	uxth	r2, r3
   16fb0:	4b84      	ldr	r3, [pc, #528]	; (171c4 <hciEvtProcessMsg+0x298>)
   16fb2:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   16fb4:	6878      	ldr	r0, [r7, #4]
   16fb6:	f7ff fe37 	bl	16c28 <hciEvtProcessCmdStatus>
      break;
   16fba:	e10e      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   16fbc:	4b81      	ldr	r3, [pc, #516]	; (171c4 <hciEvtProcessMsg+0x298>)
   16fbe:	88db      	ldrh	r3, [r3, #6]
   16fc0:	3301      	adds	r3, #1
   16fc2:	b29a      	uxth	r2, r3
   16fc4:	4b7f      	ldr	r3, [pc, #508]	; (171c4 <hciEvtProcessMsg+0x298>)
   16fc6:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   16fc8:	7dbb      	ldrb	r3, [r7, #22]
   16fca:	4619      	mov	r1, r3
   16fcc:	6878      	ldr	r0, [r7, #4]
   16fce:	f7ff fe59 	bl	16c84 <hciEvtProcessCmdCmpl>
      break;
   16fd2:	e102      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   16fd4:	6878      	ldr	r0, [r7, #4]
   16fd6:	f7fe fa35 	bl	15444 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   16fda:	4b7a      	ldr	r3, [pc, #488]	; (171c4 <hciEvtProcessMsg+0x298>)
   16fdc:	899b      	ldrh	r3, [r3, #12]
   16fde:	3301      	adds	r3, #1
   16fe0:	b29a      	uxth	r2, r3
   16fe2:	4b78      	ldr	r3, [pc, #480]	; (171c4 <hciEvtProcessMsg+0x298>)
   16fe4:	819a      	strh	r2, [r3, #12]
      break;
   16fe6:	e0f8      	b.n	171da <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   16fe8:	687b      	ldr	r3, [r7, #4]
   16fea:	1c5a      	adds	r2, r3, #1
   16fec:	607a      	str	r2, [r7, #4]
   16fee:	781b      	ldrb	r3, [r3, #0]
   16ff0:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   16ff2:	4b74      	ldr	r3, [pc, #464]	; (171c4 <hciEvtProcessMsg+0x298>)
   16ff4:	8a5b      	ldrh	r3, [r3, #18]
   16ff6:	3301      	adds	r3, #1
   16ff8:	b29a      	uxth	r2, r3
   16ffa:	4b72      	ldr	r3, [pc, #456]	; (171c4 <hciEvtProcessMsg+0x298>)
   16ffc:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   16ffe:	7d7b      	ldrb	r3, [r7, #21]
   17000:	3b01      	subs	r3, #1
   17002:	2b12      	cmp	r3, #18
   17004:	f200 809d 	bhi.w	17142 <hciEvtProcessMsg+0x216>
   17008:	a201      	add	r2, pc, #4	; (adr r2, 17010 <hciEvtProcessMsg+0xe4>)
   1700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1700e:	bf00      	nop
   17010:	0001705d 	.word	0x0001705d
   17014:	0001708b 	.word	0x0001708b
   17018:	00017097 	.word	0x00017097
   1701c:	0001709d 	.word	0x0001709d
   17020:	000170a3 	.word	0x000170a3
   17024:	000170e3 	.word	0x000170e3
   17028:	000170e9 	.word	0x000170e9
   1702c:	000170ef 	.word	0x000170ef
   17030:	000170fb 	.word	0x000170fb
   17034:	000170a9 	.word	0x000170a9
   17038:	000170d7 	.word	0x000170d7
   1703c:	00017107 	.word	0x00017107
   17040:	0001710d 	.word	0x0001710d
   17044:	0001712b 	.word	0x0001712b
   17048:	00017131 	.word	0x00017131
   1704c:	0001713d 	.word	0x0001713d
   17050:	00017119 	.word	0x00017119
   17054:	0001711f 	.word	0x0001711f
   17058:	00017125 	.word	0x00017125
          if (*pEvt == HCI_SUCCESS)
   1705c:	687b      	ldr	r3, [r7, #4]
   1705e:	781b      	ldrb	r3, [r3, #0]
   17060:	2b00      	cmp	r3, #0
   17062:	d10f      	bne.n	17084 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   17064:	687b      	ldr	r3, [r7, #4]
   17066:	3301      	adds	r3, #1
   17068:	781b      	ldrb	r3, [r3, #0]
   1706a:	b29a      	uxth	r2, r3
   1706c:	687b      	ldr	r3, [r7, #4]
   1706e:	3302      	adds	r3, #2
   17070:	781b      	ldrb	r3, [r3, #0]
   17072:	b29b      	uxth	r3, r3
   17074:	021b      	lsls	r3, r3, #8
   17076:	b29b      	uxth	r3, r3
   17078:	4413      	add	r3, r2
   1707a:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   1707c:	8a7b      	ldrh	r3, [r7, #18]
   1707e:	4618      	mov	r0, r3
   17080:	f7fd fe7e 	bl	14d80 <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   17084:	2301      	movs	r3, #1
   17086:	77fb      	strb	r3, [r7, #31]
          break;
   17088:	e05c      	b.n	17144 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   1708a:	7dbb      	ldrb	r3, [r7, #22]
   1708c:	4619      	mov	r1, r3
   1708e:	6878      	ldr	r0, [r7, #4]
   17090:	f7ff fab4 	bl	165fc <hciEvtProcessLeAdvReport>
          break;
   17094:	e056      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   17096:	2304      	movs	r3, #4
   17098:	77fb      	strb	r3, [r7, #31]
          break;
   1709a:	e053      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   1709c:	230b      	movs	r3, #11
   1709e:	77fb      	strb	r3, [r7, #31]
          break;
   170a0:	e050      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   170a2:	2310      	movs	r3, #16
   170a4:	77fb      	strb	r3, [r7, #31]
          break;
   170a6:	e04d      	b.n	17144 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   170a8:	687b      	ldr	r3, [r7, #4]
   170aa:	781b      	ldrb	r3, [r3, #0]
   170ac:	2b00      	cmp	r3, #0
   170ae:	d10f      	bne.n	170d0 <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   170b0:	687b      	ldr	r3, [r7, #4]
   170b2:	3301      	adds	r3, #1
   170b4:	781b      	ldrb	r3, [r3, #0]
   170b6:	b29a      	uxth	r2, r3
   170b8:	687b      	ldr	r3, [r7, #4]
   170ba:	3302      	adds	r3, #2
   170bc:	781b      	ldrb	r3, [r3, #0]
   170be:	b29b      	uxth	r3, r3
   170c0:	021b      	lsls	r3, r3, #8
   170c2:	b29b      	uxth	r3, r3
   170c4:	4413      	add	r3, r2
   170c6:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   170c8:	8a7b      	ldrh	r3, [r7, #18]
   170ca:	4618      	mov	r0, r3
   170cc:	f7fd fe58 	bl	14d80 <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   170d0:	2302      	movs	r3, #2
   170d2:	77fb      	strb	r3, [r7, #31]
          break;
   170d4:	e036      	b.n	17144 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   170d6:	7dbb      	ldrb	r3, [r7, #22]
   170d8:	4619      	mov	r1, r3
   170da:	6878      	ldr	r0, [r7, #4]
   170dc:	f7ff fd32 	bl	16b44 <hciEvtProcessLeDirectAdvReport>
          break;
   170e0:	e030      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   170e2:	2323      	movs	r3, #35	; 0x23
   170e4:	77fb      	strb	r3, [r7, #31]
          break;
   170e6:	e02d      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   170e8:	2324      	movs	r3, #36	; 0x24
   170ea:	77fb      	strb	r3, [r7, #31]
          break;
   170ec:	e02a      	b.n	17144 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   170ee:	4b34      	ldr	r3, [pc, #208]	; (171c0 <hciEvtProcessMsg+0x294>)
   170f0:	68db      	ldr	r3, [r3, #12]
   170f2:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   170f4:	2325      	movs	r3, #37	; 0x25
   170f6:	77fb      	strb	r3, [r7, #31]
          break;
   170f8:	e024      	b.n	17144 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   170fa:	4b31      	ldr	r3, [pc, #196]	; (171c0 <hciEvtProcessMsg+0x294>)
   170fc:	68db      	ldr	r3, [r3, #12]
   170fe:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   17100:	2326      	movs	r3, #38	; 0x26
   17102:	77fb      	strb	r3, [r7, #31]
          break;
   17104:	e01e      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   17106:	232b      	movs	r3, #43	; 0x2b
   17108:	77fb      	strb	r3, [r7, #31]
          break;
   1710a:	e01b      	b.n	17144 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   1710c:	7dbb      	ldrb	r3, [r7, #22]
   1710e:	4619      	mov	r1, r3
   17110:	6878      	ldr	r0, [r7, #4]
   17112:	f7ff faeb 	bl	166ec <hciEvtProcessLeExtAdvReport>
          break;
   17116:	e015      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   17118:	232d      	movs	r3, #45	; 0x2d
   1711a:	77fb      	strb	r3, [r7, #31]
          break;
   1711c:	e012      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   1711e:	232e      	movs	r3, #46	; 0x2e
   17120:	77fb      	strb	r3, [r7, #31]
          break;
   17122:	e00f      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   17124:	232f      	movs	r3, #47	; 0x2f
   17126:	77fb      	strb	r3, [r7, #31]
          break;
   17128:	e00c      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   1712a:	2330      	movs	r3, #48	; 0x30
   1712c:	77fb      	strb	r3, [r7, #31]
          break;
   1712e:	e009      	b.n	17144 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   17130:	7dbb      	ldrb	r3, [r7, #22]
   17132:	4619      	mov	r1, r3
   17134:	6878      	ldr	r0, [r7, #4]
   17136:	f7ff fc6b 	bl	16a10 <hciEvtProcessLePerAdvReport>
          break;
   1713a:	e003      	b.n	17144 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   1713c:	2332      	movs	r3, #50	; 0x32
   1713e:	77fb      	strb	r3, [r7, #31]
          break;
   17140:	e000      	b.n	17144 <hciEvtProcessMsg+0x218>
          break;
   17142:	bf00      	nop
      break;
   17144:	e049      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   17146:	4b1f      	ldr	r3, [pc, #124]	; (171c4 <hciEvtProcessMsg+0x298>)
   17148:	881b      	ldrh	r3, [r3, #0]
   1714a:	3301      	adds	r3, #1
   1714c:	b29a      	uxth	r2, r3
   1714e:	4b1d      	ldr	r3, [pc, #116]	; (171c4 <hciEvtProcessMsg+0x298>)
   17150:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   17152:	2303      	movs	r3, #3
   17154:	77fb      	strb	r3, [r7, #31]
      break;
   17156:	e040      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   17158:	4b1a      	ldr	r3, [pc, #104]	; (171c4 <hciEvtProcessMsg+0x298>)
   1715a:	885b      	ldrh	r3, [r3, #2]
   1715c:	3301      	adds	r3, #1
   1715e:	b29a      	uxth	r2, r3
   17160:	4b18      	ldr	r3, [pc, #96]	; (171c4 <hciEvtProcessMsg+0x298>)
   17162:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   17164:	230f      	movs	r3, #15
   17166:	77fb      	strb	r3, [r7, #31]
      break;
   17168:	e037      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   1716a:	4b16      	ldr	r3, [pc, #88]	; (171c4 <hciEvtProcessMsg+0x298>)
   1716c:	889b      	ldrh	r3, [r3, #4]
   1716e:	3301      	adds	r3, #1
   17170:	b29a      	uxth	r2, r3
   17172:	4b14      	ldr	r3, [pc, #80]	; (171c4 <hciEvtProcessMsg+0x298>)
   17174:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   17176:	230a      	movs	r3, #10
   17178:	77fb      	strb	r3, [r7, #31]
      break;
   1717a:	e02e      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   1717c:	4b11      	ldr	r3, [pc, #68]	; (171c4 <hciEvtProcessMsg+0x298>)
   1717e:	8a1b      	ldrh	r3, [r3, #16]
   17180:	3301      	adds	r3, #1
   17182:	b29a      	uxth	r2, r3
   17184:	4b0f      	ldr	r3, [pc, #60]	; (171c4 <hciEvtProcessMsg+0x298>)
   17186:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   17188:	230e      	movs	r3, #14
   1718a:	77fb      	strb	r3, [r7, #31]
      break;
   1718c:	e025      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   1718e:	4b0d      	ldr	r3, [pc, #52]	; (171c4 <hciEvtProcessMsg+0x298>)
   17190:	89db      	ldrh	r3, [r3, #14]
   17192:	3301      	adds	r3, #1
   17194:	b29a      	uxth	r2, r3
   17196:	4b0b      	ldr	r3, [pc, #44]	; (171c4 <hciEvtProcessMsg+0x298>)
   17198:	81da      	strh	r2, [r3, #14]
      break;
   1719a:	e01e      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   1719c:	4b09      	ldr	r3, [pc, #36]	; (171c4 <hciEvtProcessMsg+0x298>)
   1719e:	895b      	ldrh	r3, [r3, #10]
   171a0:	3301      	adds	r3, #1
   171a2:	b29a      	uxth	r2, r3
   171a4:	4b07      	ldr	r3, [pc, #28]	; (171c4 <hciEvtProcessMsg+0x298>)
   171a6:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   171a8:	2314      	movs	r3, #20
   171aa:	77fb      	strb	r3, [r7, #31]
      break;
   171ac:	e015      	b.n	171da <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   171ae:	4b05      	ldr	r3, [pc, #20]	; (171c4 <hciEvtProcessMsg+0x298>)
   171b0:	8adb      	ldrh	r3, [r3, #22]
   171b2:	3301      	adds	r3, #1
   171b4:	b29a      	uxth	r2, r3
   171b6:	4b03      	ldr	r3, [pc, #12]	; (171c4 <hciEvtProcessMsg+0x298>)
   171b8:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   171ba:	2328      	movs	r3, #40	; 0x28
   171bc:	77fb      	strb	r3, [r7, #31]
      break;
   171be:	e00c      	b.n	171da <hciEvtProcessMsg+0x2ae>
   171c0:	10009e2c 	.word	0x10009e2c
   171c4:	10004208 	.word	0x10004208
      hciEvtStats.numVendorSpecEvt++;
   171c8:	4b22      	ldr	r3, [pc, #136]	; (17254 <hciEvtProcessMsg+0x328>)
   171ca:	8a9b      	ldrh	r3, [r3, #20]
   171cc:	3301      	adds	r3, #1
   171ce:	b29a      	uxth	r2, r3
   171d0:	4b20      	ldr	r3, [pc, #128]	; (17254 <hciEvtProcessMsg+0x328>)
   171d2:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   171d4:	2313      	movs	r3, #19
   171d6:	77fb      	strb	r3, [r7, #31]
      break;
   171d8:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   171da:	7ffb      	ldrb	r3, [r7, #31]
   171dc:	2b00      	cmp	r3, #0
   171de:	d034      	beq.n	1724a <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   171e0:	7ffb      	ldrb	r3, [r7, #31]
   171e2:	4a1d      	ldr	r2, [pc, #116]	; (17258 <hciEvtProcessMsg+0x32c>)
   171e4:	5cd3      	ldrb	r3, [r2, r3]
   171e6:	b29b      	uxth	r3, r3
   171e8:	4618      	mov	r0, r3
   171ea:	f003 f8eb 	bl	1a3c4 <WsfBufAlloc>
   171ee:	60f8      	str	r0, [r7, #12]
   171f0:	68fb      	ldr	r3, [r7, #12]
   171f2:	2b00      	cmp	r3, #0
   171f4:	d016      	beq.n	17224 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   171f6:	68fb      	ldr	r3, [r7, #12]
   171f8:	2200      	movs	r2, #0
   171fa:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   171fc:	68fb      	ldr	r3, [r7, #12]
   171fe:	7ffa      	ldrb	r2, [r7, #31]
   17200:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   17202:	68fb      	ldr	r3, [r7, #12]
   17204:	2200      	movs	r2, #0
   17206:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   17208:	7ffb      	ldrb	r3, [r7, #31]
   1720a:	4a14      	ldr	r2, [pc, #80]	; (1725c <hciEvtProcessMsg+0x330>)
   1720c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17210:	7dba      	ldrb	r2, [r7, #22]
   17212:	6879      	ldr	r1, [r7, #4]
   17214:	68f8      	ldr	r0, [r7, #12]
   17216:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   17218:	69bb      	ldr	r3, [r7, #24]
   1721a:	68f8      	ldr	r0, [r7, #12]
   1721c:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   1721e:	68f8      	ldr	r0, [r7, #12]
   17220:	f003 f910 	bl	1a444 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   17224:	7ffb      	ldrb	r3, [r7, #31]
   17226:	2b03      	cmp	r3, #3
   17228:	d10f      	bne.n	1724a <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   1722a:	687b      	ldr	r3, [r7, #4]
   1722c:	3301      	adds	r3, #1
   1722e:	781b      	ldrb	r3, [r3, #0]
   17230:	b29a      	uxth	r2, r3
   17232:	687b      	ldr	r3, [r7, #4]
   17234:	3302      	adds	r3, #2
   17236:	781b      	ldrb	r3, [r3, #0]
   17238:	b29b      	uxth	r3, r3
   1723a:	021b      	lsls	r3, r3, #8
   1723c:	b29b      	uxth	r3, r3
   1723e:	4413      	add	r3, r2
   17240:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   17242:	8a7b      	ldrh	r3, [r7, #18]
   17244:	4618      	mov	r0, r3
   17246:	f7fd fda8 	bl	14d9a <hciCoreConnClose>
    }
  }
}
   1724a:	bf00      	nop
   1724c:	3720      	adds	r7, #32
   1724e:	46bd      	mov	sp, r7
   17250:	bd80      	pop	{r7, pc}
   17252:	bf00      	nop
   17254:	10004208 	.word	0x10004208
   17258:	00023aa0 	.word	0x00023aa0
   1725c:	000239bc 	.word	0x000239bc

00017260 <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   17260:	b580      	push	{r7, lr}
   17262:	b084      	sub	sp, #16
   17264:	af00      	add	r7, sp, #0
   17266:	6078      	str	r0, [r7, #4]
   17268:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   1726a:	683b      	ldr	r3, [r7, #0]
   1726c:	3302      	adds	r3, #2
   1726e:	781b      	ldrb	r3, [r3, #0]
   17270:	b29a      	uxth	r2, r3
   17272:	683b      	ldr	r3, [r7, #0]
   17274:	3303      	adds	r3, #3
   17276:	781b      	ldrb	r3, [r3, #0]
   17278:	b29b      	uxth	r3, r3
   1727a:	021b      	lsls	r3, r3, #8
   1727c:	b29b      	uxth	r3, r3
   1727e:	4413      	add	r3, r2
   17280:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   17282:	89fb      	ldrh	r3, [r7, #14]
   17284:	3304      	adds	r3, #4
   17286:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   17288:	89fb      	ldrh	r3, [r7, #14]
   1728a:	683a      	ldr	r2, [r7, #0]
   1728c:	4619      	mov	r1, r3
   1728e:	2002      	movs	r0, #2
   17290:	f001 ffa8 	bl	191e4 <hciDrvWrite>
   17294:	4603      	mov	r3, r0
   17296:	461a      	mov	r2, r3
   17298:	89fb      	ldrh	r3, [r7, #14]
   1729a:	4293      	cmp	r3, r2
   1729c:	d103      	bne.n	172a6 <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   1729e:	6839      	ldr	r1, [r7, #0]
   172a0:	6878      	ldr	r0, [r7, #4]
   172a2:	f7fd feb5 	bl	15010 <hciCoreTxAclComplete>
  }
}
   172a6:	bf00      	nop
   172a8:	3710      	adds	r7, #16
   172aa:	46bd      	mov	sp, r7
   172ac:	bd80      	pop	{r7, pc}

000172ae <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   172ae:	b580      	push	{r7, lr}
   172b0:	b084      	sub	sp, #16
   172b2:	af00      	add	r7, sp, #0
   172b4:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   172b6:	687b      	ldr	r3, [r7, #4]
   172b8:	3302      	adds	r3, #2
   172ba:	781b      	ldrb	r3, [r3, #0]
   172bc:	3303      	adds	r3, #3
   172be:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   172c0:	7bfb      	ldrb	r3, [r7, #15]
   172c2:	b29b      	uxth	r3, r3
   172c4:	687a      	ldr	r2, [r7, #4]
   172c6:	4619      	mov	r1, r3
   172c8:	2001      	movs	r0, #1
   172ca:	f001 ff8b 	bl	191e4 <hciDrvWrite>
   172ce:	4603      	mov	r3, r0
   172d0:	461a      	mov	r2, r3
   172d2:	7bfb      	ldrb	r3, [r7, #15]
   172d4:	b29b      	uxth	r3, r3
   172d6:	429a      	cmp	r2, r3
   172d8:	d102      	bne.n	172e0 <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   172da:	6878      	ldr	r0, [r7, #4]
   172dc:	f003 f918 	bl	1a510 <WsfMsgFree>
  }
}
   172e0:	bf00      	nop
   172e2:	3710      	adds	r7, #16
   172e4:	46bd      	mov	sp, r7
   172e6:	bd80      	pop	{r7, pc}

000172e8 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   172e8:	b580      	push	{r7, lr}
   172ea:	b084      	sub	sp, #16
   172ec:	af00      	add	r7, sp, #0
   172ee:	6078      	str	r0, [r7, #4]
   172f0:	460b      	mov	r3, r1
   172f2:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   172f4:	2300      	movs	r3, #0
   172f6:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   172f8:	e0e9      	b.n	174ce <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   172fa:	687b      	ldr	r3, [r7, #4]
   172fc:	781b      	ldrb	r3, [r3, #0]
   172fe:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   17300:	4b77      	ldr	r3, [pc, #476]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   17302:	781b      	ldrb	r3, [r3, #0]
   17304:	2b00      	cmp	r3, #0
   17306:	d115      	bne.n	17334 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   17308:	4a76      	ldr	r2, [pc, #472]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   1730a:	7a3b      	ldrb	r3, [r7, #8]
   1730c:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   1730e:	4b76      	ldr	r3, [pc, #472]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17310:	2200      	movs	r2, #0
   17312:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   17314:	4b72      	ldr	r3, [pc, #456]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   17316:	2201      	movs	r2, #1
   17318:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   1731a:	4b74      	ldr	r3, [pc, #464]	; (174ec <hciTrSerialRxIncoming+0x204>)
   1731c:	2201      	movs	r2, #1
   1731e:	701a      	strb	r2, [r3, #0]
      pBuf++;
   17320:	687b      	ldr	r3, [r7, #4]
   17322:	3301      	adds	r3, #1
   17324:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   17326:	89fb      	ldrh	r3, [r7, #14]
   17328:	3301      	adds	r3, #1
   1732a:	81fb      	strh	r3, [r7, #14]
      len--;
   1732c:	887b      	ldrh	r3, [r7, #2]
   1732e:	3b01      	subs	r3, #1
   17330:	807b      	strh	r3, [r7, #2]
   17332:	e0b6      	b.n	174a2 <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   17334:	4b6a      	ldr	r3, [pc, #424]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   17336:	781b      	ldrb	r3, [r3, #0]
   17338:	2b01      	cmp	r3, #1
   1733a:	f040 8091 	bne.w	17460 <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   1733e:	2300      	movs	r3, #0
   17340:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   17342:	2300      	movs	r3, #0
   17344:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   17346:	4b67      	ldr	r3, [pc, #412]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   17348:	781b      	ldrb	r3, [r3, #0]
   1734a:	2b04      	cmp	r3, #4
   1734c:	d102      	bne.n	17354 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   1734e:	2302      	movs	r3, #2
   17350:	737b      	strb	r3, [r7, #13]
   17352:	e008      	b.n	17366 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   17354:	4b63      	ldr	r3, [pc, #396]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   17356:	781b      	ldrb	r3, [r3, #0]
   17358:	2b02      	cmp	r3, #2
   1735a:	d102      	bne.n	17362 <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   1735c:	2304      	movs	r3, #4
   1735e:	737b      	strb	r3, [r7, #13]
   17360:	e001      	b.n	17366 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   17362:	89fb      	ldrh	r3, [r7, #14]
   17364:	e0b8      	b.n	174d8 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   17366:	7b7b      	ldrb	r3, [r7, #13]
   17368:	b29a      	uxth	r2, r3
   1736a:	4b5f      	ldr	r3, [pc, #380]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   1736c:	881b      	ldrh	r3, [r3, #0]
   1736e:	429a      	cmp	r2, r3
   17370:	d012      	beq.n	17398 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   17372:	4b5d      	ldr	r3, [pc, #372]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17374:	881b      	ldrh	r3, [r3, #0]
   17376:	1c5a      	adds	r2, r3, #1
   17378:	b291      	uxth	r1, r2
   1737a:	4a5b      	ldr	r2, [pc, #364]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   1737c:	8011      	strh	r1, [r2, #0]
   1737e:	4619      	mov	r1, r3
   17380:	4a5b      	ldr	r2, [pc, #364]	; (174f0 <hciTrSerialRxIncoming+0x208>)
   17382:	7a3b      	ldrb	r3, [r7, #8]
   17384:	5453      	strb	r3, [r2, r1]
        pBuf++;
   17386:	687b      	ldr	r3, [r7, #4]
   17388:	3301      	adds	r3, #1
   1738a:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   1738c:	89fb      	ldrh	r3, [r7, #14]
   1738e:	3301      	adds	r3, #1
   17390:	81fb      	strh	r3, [r7, #14]
        len--;
   17392:	887b      	ldrh	r3, [r7, #2]
   17394:	3b01      	subs	r3, #1
   17396:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   17398:	7b7b      	ldrb	r3, [r7, #13]
   1739a:	b29a      	uxth	r2, r3
   1739c:	4b52      	ldr	r3, [pc, #328]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   1739e:	881b      	ldrh	r3, [r3, #0]
   173a0:	429a      	cmp	r2, r3
   173a2:	d17e      	bne.n	174a2 <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   173a4:	4b4f      	ldr	r3, [pc, #316]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   173a6:	781b      	ldrb	r3, [r3, #0]
   173a8:	2b04      	cmp	r3, #4
   173aa:	d103      	bne.n	173b4 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   173ac:	4b50      	ldr	r3, [pc, #320]	; (174f0 <hciTrSerialRxIncoming+0x208>)
   173ae:	785b      	ldrb	r3, [r3, #1]
   173b0:	817b      	strh	r3, [r7, #10]
   173b2:	e00d      	b.n	173d0 <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   173b4:	4b4b      	ldr	r3, [pc, #300]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   173b6:	781b      	ldrb	r3, [r3, #0]
   173b8:	2b02      	cmp	r3, #2
   173ba:	d109      	bne.n	173d0 <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   173bc:	4b4c      	ldr	r3, [pc, #304]	; (174f0 <hciTrSerialRxIncoming+0x208>)
   173be:	789b      	ldrb	r3, [r3, #2]
   173c0:	b29a      	uxth	r2, r3
   173c2:	4b4c      	ldr	r3, [pc, #304]	; (174f4 <hciTrSerialRxIncoming+0x20c>)
   173c4:	781b      	ldrb	r3, [r3, #0]
   173c6:	b29b      	uxth	r3, r3
   173c8:	021b      	lsls	r3, r3, #8
   173ca:	b29b      	uxth	r3, r3
   173cc:	4413      	add	r3, r2
   173ce:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   173d0:	4b44      	ldr	r3, [pc, #272]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   173d2:	781b      	ldrb	r3, [r3, #0]
   173d4:	2b02      	cmp	r3, #2
   173d6:	d10c      	bne.n	173f2 <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   173d8:	7b7b      	ldrb	r3, [r7, #13]
   173da:	b29a      	uxth	r2, r3
   173dc:	897b      	ldrh	r3, [r7, #10]
   173de:	4413      	add	r3, r2
   173e0:	b29b      	uxth	r3, r3
   173e2:	2100      	movs	r1, #0
   173e4:	4618      	mov	r0, r3
   173e6:	f003 f867 	bl	1a4b8 <WsfMsgDataAlloc>
   173ea:	4602      	mov	r2, r0
   173ec:	4b42      	ldr	r3, [pc, #264]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   173ee:	601a      	str	r2, [r3, #0]
   173f0:	e00a      	b.n	17408 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   173f2:	7b7b      	ldrb	r3, [r7, #13]
   173f4:	b29a      	uxth	r2, r3
   173f6:	897b      	ldrh	r3, [r7, #10]
   173f8:	4413      	add	r3, r2
   173fa:	b29b      	uxth	r3, r3
   173fc:	4618      	mov	r0, r3
   173fe:	f003 f870 	bl	1a4e2 <WsfMsgAlloc>
   17402:	4602      	mov	r2, r0
   17404:	4b3c      	ldr	r3, [pc, #240]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   17406:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   17408:	4b3b      	ldr	r3, [pc, #236]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   1740a:	681b      	ldr	r3, [r3, #0]
   1740c:	2b00      	cmp	r3, #0
   1740e:	d025      	beq.n	1745c <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   17410:	4b39      	ldr	r3, [pc, #228]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   17412:	681b      	ldr	r3, [r3, #0]
   17414:	4a39      	ldr	r2, [pc, #228]	; (174fc <hciTrSerialRxIncoming+0x214>)
   17416:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   17418:	2300      	movs	r3, #0
   1741a:	727b      	strb	r3, [r7, #9]
   1741c:	e00b      	b.n	17436 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   1741e:	4b37      	ldr	r3, [pc, #220]	; (174fc <hciTrSerialRxIncoming+0x214>)
   17420:	681b      	ldr	r3, [r3, #0]
   17422:	1c5a      	adds	r2, r3, #1
   17424:	4935      	ldr	r1, [pc, #212]	; (174fc <hciTrSerialRxIncoming+0x214>)
   17426:	600a      	str	r2, [r1, #0]
   17428:	7a7a      	ldrb	r2, [r7, #9]
   1742a:	4931      	ldr	r1, [pc, #196]	; (174f0 <hciTrSerialRxIncoming+0x208>)
   1742c:	5c8a      	ldrb	r2, [r1, r2]
   1742e:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   17430:	7a7b      	ldrb	r3, [r7, #9]
   17432:	3301      	adds	r3, #1
   17434:	727b      	strb	r3, [r7, #9]
   17436:	7a7a      	ldrb	r2, [r7, #9]
   17438:	7b7b      	ldrb	r3, [r7, #13]
   1743a:	429a      	cmp	r2, r3
   1743c:	d3ef      	bcc.n	1741e <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   1743e:	4a2a      	ldr	r2, [pc, #168]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17440:	897b      	ldrh	r3, [r7, #10]
   17442:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   17444:	4b28      	ldr	r3, [pc, #160]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17446:	881b      	ldrh	r3, [r3, #0]
   17448:	2b00      	cmp	r3, #0
   1744a:	d103      	bne.n	17454 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   1744c:	4b24      	ldr	r3, [pc, #144]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   1744e:	2203      	movs	r2, #3
   17450:	701a      	strb	r2, [r3, #0]
   17452:	e026      	b.n	174a2 <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   17454:	4b22      	ldr	r3, [pc, #136]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   17456:	2202      	movs	r2, #2
   17458:	701a      	strb	r2, [r3, #0]
   1745a:	e022      	b.n	174a2 <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   1745c:	89fb      	ldrh	r3, [r7, #14]
   1745e:	e03b      	b.n	174d8 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   17460:	4b1f      	ldr	r3, [pc, #124]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   17462:	781b      	ldrb	r3, [r3, #0]
   17464:	2b02      	cmp	r3, #2
   17466:	d11c      	bne.n	174a2 <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   17468:	4b24      	ldr	r3, [pc, #144]	; (174fc <hciTrSerialRxIncoming+0x214>)
   1746a:	681b      	ldr	r3, [r3, #0]
   1746c:	1c5a      	adds	r2, r3, #1
   1746e:	4923      	ldr	r1, [pc, #140]	; (174fc <hciTrSerialRxIncoming+0x214>)
   17470:	600a      	str	r2, [r1, #0]
   17472:	7a3a      	ldrb	r2, [r7, #8]
   17474:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   17476:	4b1c      	ldr	r3, [pc, #112]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17478:	881b      	ldrh	r3, [r3, #0]
   1747a:	3b01      	subs	r3, #1
   1747c:	b29a      	uxth	r2, r3
   1747e:	4b1a      	ldr	r3, [pc, #104]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17480:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   17482:	4b19      	ldr	r3, [pc, #100]	; (174e8 <hciTrSerialRxIncoming+0x200>)
   17484:	881b      	ldrh	r3, [r3, #0]
   17486:	2b00      	cmp	r3, #0
   17488:	d102      	bne.n	17490 <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   1748a:	4b15      	ldr	r3, [pc, #84]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   1748c:	2203      	movs	r2, #3
   1748e:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   17490:	687b      	ldr	r3, [r7, #4]
   17492:	3301      	adds	r3, #1
   17494:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   17496:	89fb      	ldrh	r3, [r7, #14]
   17498:	3301      	adds	r3, #1
   1749a:	81fb      	strh	r3, [r7, #14]
      len--;
   1749c:	887b      	ldrh	r3, [r7, #2]
   1749e:	3b01      	subs	r3, #1
   174a0:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   174a2:	4b0f      	ldr	r3, [pc, #60]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   174a4:	781b      	ldrb	r3, [r3, #0]
   174a6:	2b03      	cmp	r3, #3
   174a8:	d111      	bne.n	174ce <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   174aa:	4b10      	ldr	r3, [pc, #64]	; (174ec <hciTrSerialRxIncoming+0x204>)
   174ac:	2200      	movs	r2, #0
   174ae:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   174b0:	4b11      	ldr	r3, [pc, #68]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   174b2:	681b      	ldr	r3, [r3, #0]
   174b4:	2b00      	cmp	r3, #0
   174b6:	d007      	beq.n	174c8 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   174b8:	4b0a      	ldr	r3, [pc, #40]	; (174e4 <hciTrSerialRxIncoming+0x1fc>)
   174ba:	781a      	ldrb	r2, [r3, #0]
   174bc:	4b0e      	ldr	r3, [pc, #56]	; (174f8 <hciTrSerialRxIncoming+0x210>)
   174be:	681b      	ldr	r3, [r3, #0]
   174c0:	4619      	mov	r1, r3
   174c2:	4610      	mov	r0, r2
   174c4:	f7fe f828 	bl	15518 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   174c8:	4b05      	ldr	r3, [pc, #20]	; (174e0 <hciTrSerialRxIncoming+0x1f8>)
   174ca:	2200      	movs	r2, #0
   174cc:	701a      	strb	r2, [r3, #0]
  while (len)
   174ce:	887b      	ldrh	r3, [r7, #2]
   174d0:	2b00      	cmp	r3, #0
   174d2:	f47f af12 	bne.w	172fa <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   174d6:	89fb      	ldrh	r3, [r7, #14]
}
   174d8:	4618      	mov	r0, r3
   174da:	3710      	adds	r7, #16
   174dc:	46bd      	mov	sp, r7
   174de:	bd80      	pop	{r7, pc}
   174e0:	10004221 	.word	0x10004221
   174e4:	10004222 	.word	0x10004222
   174e8:	10004224 	.word	0x10004224
   174ec:	10004220 	.word	0x10004220
   174f0:	10004228 	.word	0x10004228
   174f4:	1000422b 	.word	0x1000422b
   174f8:	1000422c 	.word	0x1000422c
   174fc:	10004230 	.word	0x10004230

00017500 <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   17500:	b580      	push	{r7, lr}
   17502:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   17504:	4b0b      	ldr	r3, [pc, #44]	; (17534 <hciCoreReadResolvingListSize+0x34>)
   17506:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   1750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1750e:	2b00      	cmp	r3, #0
   17510:	d008      	beq.n	17524 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   17512:	4b09      	ldr	r3, [pc, #36]	; (17538 <hciCoreReadResolvingListSize+0x38>)
   17514:	881b      	ldrh	r3, [r3, #0]
   17516:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   1751a:	2b00      	cmp	r3, #0
   1751c:	d002      	beq.n	17524 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   1751e:	f7fd fa86 	bl	14a2e <HciLeReadResolvingListSize>
   17522:	e005      	b.n	17530 <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   17524:	4b03      	ldr	r3, [pc, #12]	; (17534 <hciCoreReadResolvingListSize+0x34>)
   17526:	2200      	movs	r2, #0
   17528:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   1752c:	f000 f806 	bl	1753c <hciCoreReadMaxDataLen>
  }
}
   17530:	bf00      	nop
   17532:	bd80      	pop	{r7, pc}
   17534:	1000930c 	.word	0x1000930c
   17538:	10002b88 	.word	0x10002b88

0001753c <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   1753c:	b580      	push	{r7, lr}
   1753e:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17540:	4b09      	ldr	r3, [pc, #36]	; (17568 <hciCoreReadMaxDataLen+0x2c>)
   17542:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   17546:	f003 0320 	and.w	r3, r3, #32
   1754a:	2b00      	cmp	r3, #0
   1754c:	d008      	beq.n	17560 <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   1754e:	4b07      	ldr	r3, [pc, #28]	; (1756c <hciCoreReadMaxDataLen+0x30>)
   17550:	881b      	ldrh	r3, [r3, #0]
   17552:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17556:	2b00      	cmp	r3, #0
   17558:	d002      	beq.n	17560 <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   1755a:	f7fc fe76 	bl	1424a <HciLeReadMaxDataLen>
   1755e:	e001      	b.n	17564 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   17560:	f7fc fefd 	bl	1435e <HciLeRandCmd>
  }
}
   17564:	bf00      	nop
   17566:	bd80      	pop	{r7, pc}
   17568:	1000930c 	.word	0x1000930c
   1756c:	10002b88 	.word	0x10002b88

00017570 <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   17570:	b580      	push	{r7, lr}
   17572:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   17574:	f7fd f94e 	bl	14814 <HciResetCmd>
}
   17578:	bf00      	nop
   1757a:	bd80      	pop	{r7, pc}

0001757c <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   1757c:	b580      	push	{r7, lr}
   1757e:	b086      	sub	sp, #24
   17580:	af00      	add	r7, sp, #0
   17582:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   17584:	687b      	ldr	r3, [r7, #4]
   17586:	781b      	ldrb	r3, [r3, #0]
   17588:	2b0e      	cmp	r3, #14
   1758a:	f040 814b 	bne.w	17824 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   1758e:	687b      	ldr	r3, [r7, #4]
   17590:	3302      	adds	r3, #2
   17592:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   17594:	687b      	ldr	r3, [r7, #4]
   17596:	3301      	adds	r3, #1
   17598:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   1759a:	687b      	ldr	r3, [r7, #4]
   1759c:	781b      	ldrb	r3, [r3, #0]
   1759e:	b29a      	uxth	r2, r3
   175a0:	687b      	ldr	r3, [r7, #4]
   175a2:	3301      	adds	r3, #1
   175a4:	781b      	ldrb	r3, [r3, #0]
   175a6:	b29b      	uxth	r3, r3
   175a8:	021b      	lsls	r3, r3, #8
   175aa:	b29b      	uxth	r3, r3
   175ac:	4413      	add	r3, r2
   175ae:	82fb      	strh	r3, [r7, #22]
   175b0:	687b      	ldr	r3, [r7, #4]
   175b2:	3302      	adds	r3, #2
   175b4:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   175b6:	687b      	ldr	r3, [r7, #4]
   175b8:	3301      	adds	r3, #1
   175ba:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   175bc:	8afb      	ldrh	r3, [r7, #22]
   175be:	f242 020f 	movw	r2, #8207	; 0x200f
   175c2:	4293      	cmp	r3, r2
   175c4:	f000 809e 	beq.w	17704 <hciCoreResetSequence+0x188>
   175c8:	f242 020f 	movw	r2, #8207	; 0x200f
   175cc:	4293      	cmp	r3, r2
   175ce:	dc22      	bgt.n	17616 <hciCoreResetSequence+0x9a>
   175d0:	f241 0209 	movw	r2, #4105	; 0x1009
   175d4:	4293      	cmp	r3, r2
   175d6:	d05c      	beq.n	17692 <hciCoreResetSequence+0x116>
   175d8:	f241 0209 	movw	r2, #4105	; 0x1009
   175dc:	4293      	cmp	r3, r2
   175de:	dc0c      	bgt.n	175fa <hciCoreResetSequence+0x7e>
   175e0:	f640 4203 	movw	r2, #3075	; 0xc03
   175e4:	4293      	cmp	r3, r2
   175e6:	d042      	beq.n	1766e <hciCoreResetSequence+0xf2>
   175e8:	f640 4263 	movw	r2, #3171	; 0xc63
   175ec:	4293      	cmp	r3, r2
   175ee:	d04d      	beq.n	1768c <hciCoreResetSequence+0x110>
   175f0:	f640 4201 	movw	r2, #3073	; 0xc01
   175f4:	4293      	cmp	r3, r2
   175f6:	d041      	beq.n	1767c <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   175f8:	e114      	b.n	17824 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   175fa:	f242 0202 	movw	r2, #8194	; 0x2002
   175fe:	4293      	cmp	r3, r2
   17600:	d04e      	beq.n	176a0 <hciCoreResetSequence+0x124>
   17602:	f242 0203 	movw	r2, #8195	; 0x2003
   17606:	4293      	cmp	r3, r2
   17608:	f000 8086 	beq.w	17718 <hciCoreResetSequence+0x19c>
   1760c:	f242 0201 	movw	r2, #8193	; 0x2001
   17610:	4293      	cmp	r3, r2
   17612:	d037      	beq.n	17684 <hciCoreResetSequence+0x108>
        break;
   17614:	e106      	b.n	17824 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17616:	f242 022a 	movw	r2, #8234	; 0x202a
   1761a:	4293      	cmp	r3, r2
   1761c:	f000 8090 	beq.w	17740 <hciCoreResetSequence+0x1c4>
   17620:	f242 022a 	movw	r2, #8234	; 0x202a
   17624:	4293      	cmp	r3, r2
   17626:	dc0e      	bgt.n	17646 <hciCoreResetSequence+0xca>
   17628:	f242 021c 	movw	r2, #8220	; 0x201c
   1762c:	4293      	cmp	r3, r2
   1762e:	d060      	beq.n	176f2 <hciCoreResetSequence+0x176>
   17630:	f242 0224 	movw	r2, #8228	; 0x2024
   17634:	4293      	cmp	r3, r2
   17636:	f000 80b0 	beq.w	1779a <hciCoreResetSequence+0x21e>
   1763a:	f242 0218 	movw	r2, #8216	; 0x2018
   1763e:	4293      	cmp	r3, r2
   17640:	f000 80d4 	beq.w	177ec <hciCoreResetSequence+0x270>
        break;
   17644:	e0ee      	b.n	17824 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17646:	f242 023b 	movw	r2, #8251	; 0x203b
   1764a:	4293      	cmp	r3, r2
   1764c:	dc09      	bgt.n	17662 <hciCoreResetSequence+0xe6>
   1764e:	f242 023a 	movw	r2, #8250	; 0x203a
   17652:	4293      	cmp	r3, r2
   17654:	f280 80bd 	bge.w	177d2 <hciCoreResetSequence+0x256>
   17658:	f242 022f 	movw	r2, #8239	; 0x202f
   1765c:	4293      	cmp	r3, r2
   1765e:	d079      	beq.n	17754 <hciCoreResetSequence+0x1d8>
        break;
   17660:	e0e0      	b.n	17824 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17662:	f242 024a 	movw	r2, #8266	; 0x204a
   17666:	4293      	cmp	r3, r2
   17668:	f000 80b3 	beq.w	177d2 <hciCoreResetSequence+0x256>
        break;
   1766c:	e0da      	b.n	17824 <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   1766e:	4b6f      	ldr	r3, [pc, #444]	; (1782c <hciCoreResetSequence+0x2b0>)
   17670:	2200      	movs	r2, #0
   17672:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   17674:	486e      	ldr	r0, [pc, #440]	; (17830 <hciCoreResetSequence+0x2b4>)
   17676:	f7fd f8ff 	bl	14878 <HciSetEventMaskCmd>
        break;
   1767a:	e0d3      	b.n	17824 <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   1767c:	486d      	ldr	r0, [pc, #436]	; (17834 <hciCoreResetSequence+0x2b8>)
   1767e:	f7fc ffce 	bl	1461e <HciLeSetEventMaskCmd>
        break;
   17682:	e0cf      	b.n	17824 <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   17684:	486c      	ldr	r0, [pc, #432]	; (17838 <hciCoreResetSequence+0x2bc>)
   17686:	f7fd f913 	bl	148b0 <HciSetEventMaskPage2Cmd>
        break;
   1768a:	e0cb      	b.n	17824 <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   1768c:	f7fd f876 	bl	1477c <HciReadBdAddrCmd>
        break;
   17690:	e0c8      	b.n	17824 <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   17692:	6879      	ldr	r1, [r7, #4]
   17694:	4869      	ldr	r0, [pc, #420]	; (1783c <hciCoreResetSequence+0x2c0>)
   17696:	f7fc f9fb 	bl	13a90 <BdaCpy>
        HciLeReadBufSizeCmd();
   1769a:	f7fc fe73 	bl	14384 <HciLeReadBufSizeCmd>
        break;
   1769e:	e0c1      	b.n	17824 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   176a0:	687b      	ldr	r3, [r7, #4]
   176a2:	781b      	ldrb	r3, [r3, #0]
   176a4:	b29a      	uxth	r2, r3
   176a6:	687b      	ldr	r3, [r7, #4]
   176a8:	3301      	adds	r3, #1
   176aa:	781b      	ldrb	r3, [r3, #0]
   176ac:	b29b      	uxth	r3, r3
   176ae:	021b      	lsls	r3, r3, #8
   176b0:	b29b      	uxth	r3, r3
   176b2:	4413      	add	r3, r2
   176b4:	b29a      	uxth	r2, r3
   176b6:	4b62      	ldr	r3, [pc, #392]	; (17840 <hciCoreResetSequence+0x2c4>)
   176b8:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   176bc:	687b      	ldr	r3, [r7, #4]
   176be:	3302      	adds	r3, #2
   176c0:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   176c2:	687b      	ldr	r3, [r7, #4]
   176c4:	1c5a      	adds	r2, r3, #1
   176c6:	607a      	str	r2, [r7, #4]
   176c8:	781a      	ldrb	r2, [r3, #0]
   176ca:	4b5d      	ldr	r3, [pc, #372]	; (17840 <hciCoreResetSequence+0x2c4>)
   176cc:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   176d0:	4b5b      	ldr	r3, [pc, #364]	; (17840 <hciCoreResetSequence+0x2c4>)
   176d2:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   176d6:	3b01      	subs	r3, #1
   176d8:	b2da      	uxtb	r2, r3
   176da:	4b59      	ldr	r3, [pc, #356]	; (17840 <hciCoreResetSequence+0x2c4>)
   176dc:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   176e0:	4b57      	ldr	r3, [pc, #348]	; (17840 <hciCoreResetSequence+0x2c4>)
   176e2:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   176e6:	4b56      	ldr	r3, [pc, #344]	; (17840 <hciCoreResetSequence+0x2c4>)
   176e8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   176ec:	f7fc fe96 	bl	1441c <HciLeReadSupStatesCmd>
        break;
   176f0:	e098      	b.n	17824 <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   176f2:	4b53      	ldr	r3, [pc, #332]	; (17840 <hciCoreResetSequence+0x2c4>)
   176f4:	687a      	ldr	r2, [r7, #4]
   176f6:	33e0      	adds	r3, #224	; 0xe0
   176f8:	6810      	ldr	r0, [r2, #0]
   176fa:	6851      	ldr	r1, [r2, #4]
   176fc:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   176fe:	f7fc fea0 	bl	14442 <HciLeReadWhiteListSizeCmd>
        break;
   17702:	e08f      	b.n	17824 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   17704:	687b      	ldr	r3, [r7, #4]
   17706:	1c5a      	adds	r2, r3, #1
   17708:	607a      	str	r2, [r7, #4]
   1770a:	781a      	ldrb	r2, [r3, #0]
   1770c:	4b4c      	ldr	r3, [pc, #304]	; (17840 <hciCoreResetSequence+0x2c4>)
   1770e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   17712:	f7fc fe4a 	bl	143aa <HciLeReadLocalSupFeatCmd>
        break;
   17716:	e085      	b.n	17824 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   17718:	687b      	ldr	r3, [r7, #4]
   1771a:	781b      	ldrb	r3, [r3, #0]
   1771c:	b29a      	uxth	r2, r3
   1771e:	687b      	ldr	r3, [r7, #4]
   17720:	3301      	adds	r3, #1
   17722:	781b      	ldrb	r3, [r3, #0]
   17724:	b29b      	uxth	r3, r3
   17726:	021b      	lsls	r3, r3, #8
   17728:	b29b      	uxth	r3, r3
   1772a:	4413      	add	r3, r2
   1772c:	b29a      	uxth	r2, r3
   1772e:	4b44      	ldr	r3, [pc, #272]	; (17840 <hciCoreResetSequence+0x2c4>)
   17730:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	3302      	adds	r3, #2
   17738:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   1773a:	f7ff fee1 	bl	17500 <hciCoreReadResolvingListSize>
        break;
   1773e:	e071      	b.n	17824 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   17740:	687b      	ldr	r3, [r7, #4]
   17742:	1c5a      	adds	r2, r3, #1
   17744:	607a      	str	r2, [r7, #4]
   17746:	781a      	ldrb	r2, [r3, #0]
   17748:	4b3d      	ldr	r3, [pc, #244]	; (17840 <hciCoreResetSequence+0x2c4>)
   1774a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   1774e:	f7ff fef5 	bl	1753c <hciCoreReadMaxDataLen>
        break;
   17752:	e067      	b.n	17824 <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   17754:	687b      	ldr	r3, [r7, #4]
   17756:	781b      	ldrb	r3, [r3, #0]
   17758:	b29a      	uxth	r2, r3
   1775a:	687b      	ldr	r3, [r7, #4]
   1775c:	3301      	adds	r3, #1
   1775e:	781b      	ldrb	r3, [r3, #0]
   17760:	b29b      	uxth	r3, r3
   17762:	021b      	lsls	r3, r3, #8
   17764:	b29b      	uxth	r3, r3
   17766:	4413      	add	r3, r2
   17768:	82bb      	strh	r3, [r7, #20]
   1776a:	687b      	ldr	r3, [r7, #4]
   1776c:	3302      	adds	r3, #2
   1776e:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   17770:	687b      	ldr	r3, [r7, #4]
   17772:	781b      	ldrb	r3, [r3, #0]
   17774:	b29a      	uxth	r2, r3
   17776:	687b      	ldr	r3, [r7, #4]
   17778:	3301      	adds	r3, #1
   1777a:	781b      	ldrb	r3, [r3, #0]
   1777c:	b29b      	uxth	r3, r3
   1777e:	021b      	lsls	r3, r3, #8
   17780:	b29b      	uxth	r3, r3
   17782:	4413      	add	r3, r2
   17784:	827b      	strh	r3, [r7, #18]
   17786:	687b      	ldr	r3, [r7, #4]
   17788:	3302      	adds	r3, #2
   1778a:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   1778c:	8a7a      	ldrh	r2, [r7, #18]
   1778e:	8abb      	ldrh	r3, [r7, #20]
   17790:	4611      	mov	r1, r2
   17792:	4618      	mov	r0, r3
   17794:	f7fc fceb 	bl	1416e <HciLeWriteDefDataLen>
        break;
   17798:	e044      	b.n	17824 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1779a:	4b29      	ldr	r3, [pc, #164]	; (17840 <hciCoreResetSequence+0x2c4>)
   1779c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   177a0:	2b00      	cmp	r3, #0
   177a2:	d007      	beq.n	177b4 <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   177a4:	4b26      	ldr	r3, [pc, #152]	; (17840 <hciCoreResetSequence+0x2c4>)
   177a6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   177aa:	8afa      	ldrh	r2, [r7, #22]
   177ac:	4611      	mov	r1, r2
   177ae:	6878      	ldr	r0, [r7, #4]
   177b0:	4798      	blx	r3
        break;
   177b2:	e037      	b.n	17824 <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   177b4:	4b22      	ldr	r3, [pc, #136]	; (17840 <hciCoreResetSequence+0x2c4>)
   177b6:	2200      	movs	r2, #0
   177b8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   177bc:	4b20      	ldr	r3, [pc, #128]	; (17840 <hciCoreResetSequence+0x2c4>)
   177be:	2200      	movs	r2, #0
   177c0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   177c4:	4b1e      	ldr	r3, [pc, #120]	; (17840 <hciCoreResetSequence+0x2c4>)
   177c6:	2200      	movs	r2, #0
   177c8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   177cc:	f7fc fdc7 	bl	1435e <HciLeRandCmd>
        break;
   177d0:	e028      	b.n	17824 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   177d2:	4b1b      	ldr	r3, [pc, #108]	; (17840 <hciCoreResetSequence+0x2c4>)
   177d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   177d8:	2b00      	cmp	r3, #0
   177da:	d022      	beq.n	17822 <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   177dc:	4b18      	ldr	r3, [pc, #96]	; (17840 <hciCoreResetSequence+0x2c4>)
   177de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   177e2:	8afa      	ldrh	r2, [r7, #22]
   177e4:	4611      	mov	r1, r2
   177e6:	6878      	ldr	r0, [r7, #4]
   177e8:	4798      	blx	r3
        break;
   177ea:	e01a      	b.n	17822 <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   177ec:	4b0f      	ldr	r3, [pc, #60]	; (1782c <hciCoreResetSequence+0x2b0>)
   177ee:	781b      	ldrb	r3, [r3, #0]
   177f0:	2b02      	cmp	r3, #2
   177f2:	d808      	bhi.n	17806 <hciCoreResetSequence+0x28a>
          randCnt++;
   177f4:	4b0d      	ldr	r3, [pc, #52]	; (1782c <hciCoreResetSequence+0x2b0>)
   177f6:	781b      	ldrb	r3, [r3, #0]
   177f8:	3301      	adds	r3, #1
   177fa:	b2da      	uxtb	r2, r3
   177fc:	4b0b      	ldr	r3, [pc, #44]	; (1782c <hciCoreResetSequence+0x2b0>)
   177fe:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   17800:	f7fc fdad 	bl	1435e <HciLeRandCmd>
        break;
   17804:	e00e      	b.n	17824 <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   17806:	4b0f      	ldr	r3, [pc, #60]	; (17844 <hciCoreResetSequence+0x2c8>)
   17808:	2200      	movs	r2, #0
   1780a:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   1780c:	2300      	movs	r3, #0
   1780e:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   17810:	2300      	movs	r3, #0
   17812:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   17814:	4b0b      	ldr	r3, [pc, #44]	; (17844 <hciCoreResetSequence+0x2c8>)
   17816:	689b      	ldr	r3, [r3, #8]
   17818:	f107 020c 	add.w	r2, r7, #12
   1781c:	4610      	mov	r0, r2
   1781e:	4798      	blx	r3
        break;
   17820:	e000      	b.n	17824 <hciCoreResetSequence+0x2a8>
        break;
   17822:	bf00      	nop
    }
  }
}
   17824:	bf00      	nop
   17826:	3718      	adds	r7, #24
   17828:	46bd      	mov	sp, r7
   1782a:	bd80      	pop	{r7, pc}
   1782c:	10004234 	.word	0x10004234
   17830:	000239a4 	.word	0x000239a4
   17834:	000239ac 	.word	0x000239ac
   17838:	000239b4 	.word	0x000239b4
   1783c:	100093f4 	.word	0x100093f4
   17840:	1000930c 	.word	0x1000930c
   17844:	10009e2c 	.word	0x10009e2c

00017848 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   17848:	b480      	push	{r7}
   1784a:	b083      	sub	sp, #12
   1784c:	af00      	add	r7, sp, #0
   1784e:	4603      	mov	r3, r0
   17850:	6039      	str	r1, [r7, #0]
   17852:	80fb      	strh	r3, [r7, #6]
   17854:	4613      	mov	r3, r2
   17856:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   17858:	2312      	movs	r3, #18
}
   1785a:	4618      	mov	r0, r3
   1785c:	370c      	adds	r7, #12
   1785e:	46bd      	mov	sp, r7
   17860:	f85d 7b04 	ldr.w	r7, [sp], #4
   17864:	4770      	bx	lr

00017866 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   17866:	b480      	push	{r7}
   17868:	b083      	sub	sp, #12
   1786a:	af00      	add	r7, sp, #0
   1786c:	4603      	mov	r3, r0
   1786e:	71fb      	strb	r3, [r7, #7]

}
   17870:	bf00      	nop
   17872:	370c      	adds	r7, #12
   17874:	46bd      	mov	sp, r7
   17876:	f85d 7b04 	ldr.w	r7, [sp], #4
   1787a:	4770      	bx	lr

0001787c <fitDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitDmCback(dmEvt_t *pDmEvt)
{
   1787c:	b580      	push	{r7, lr}
   1787e:	b084      	sub	sp, #16
   17880:	af00      	add	r7, sp, #0
   17882:	6078      	str	r0, [r7, #4]
  dmEvt_t *pMsg;
  uint16_t len;

  len = DmSizeOfEvt(pDmEvt);
   17884:	6878      	ldr	r0, [r7, #4]
   17886:	f7f8 f9a3 	bl	fbd0 <DmSizeOfEvt>
   1788a:	4603      	mov	r3, r0
   1788c:	81fb      	strh	r3, [r7, #14]

  if ((pMsg = WsfMsgAlloc(len)) != NULL)
   1788e:	89fb      	ldrh	r3, [r7, #14]
   17890:	4618      	mov	r0, r3
   17892:	f002 fe26 	bl	1a4e2 <WsfMsgAlloc>
   17896:	60b8      	str	r0, [r7, #8]
   17898:	68bb      	ldr	r3, [r7, #8]
   1789a:	2b00      	cmp	r3, #0
   1789c:	d00b      	beq.n	178b6 <fitDmCback+0x3a>
  {
    memcpy(pMsg, pDmEvt, len);
   1789e:	89fb      	ldrh	r3, [r7, #14]
   178a0:	461a      	mov	r2, r3
   178a2:	6879      	ldr	r1, [r7, #4]
   178a4:	68b8      	ldr	r0, [r7, #8]
   178a6:	f7f4 fc5b 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   178aa:	4b05      	ldr	r3, [pc, #20]	; (178c0 <fitDmCback+0x44>)
   178ac:	781b      	ldrb	r3, [r3, #0]
   178ae:	68b9      	ldr	r1, [r7, #8]
   178b0:	4618      	mov	r0, r3
   178b2:	f002 fe3a 	bl	1a52a <WsfMsgSend>
  }
}
   178b6:	bf00      	nop
   178b8:	3710      	adds	r7, #16
   178ba:	46bd      	mov	sp, r7
   178bc:	bd80      	pop	{r7, pc}
   178be:	bf00      	nop
   178c0:	10009430 	.word	0x10009430

000178c4 <fitAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitAttCback(attEvt_t *pEvt)
{
   178c4:	b580      	push	{r7, lr}
   178c6:	b084      	sub	sp, #16
   178c8:	af00      	add	r7, sp, #0
   178ca:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   178cc:	687b      	ldr	r3, [r7, #4]
   178ce:	891b      	ldrh	r3, [r3, #8]
   178d0:	3310      	adds	r3, #16
   178d2:	b29b      	uxth	r3, r3
   178d4:	4618      	mov	r0, r3
   178d6:	f002 fe04 	bl	1a4e2 <WsfMsgAlloc>
   178da:	60f8      	str	r0, [r7, #12]
   178dc:	68fb      	ldr	r3, [r7, #12]
   178de:	2b00      	cmp	r3, #0
   178e0:	d018      	beq.n	17914 <fitAttCback+0x50>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   178e2:	2210      	movs	r2, #16
   178e4:	6879      	ldr	r1, [r7, #4]
   178e6:	68f8      	ldr	r0, [r7, #12]
   178e8:	f7f4 fc3a 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   178ec:	68fb      	ldr	r3, [r7, #12]
   178ee:	f103 0210 	add.w	r2, r3, #16
   178f2:	68fb      	ldr	r3, [r7, #12]
   178f4:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   178f6:	68fb      	ldr	r3, [r7, #12]
   178f8:	6858      	ldr	r0, [r3, #4]
   178fa:	687b      	ldr	r3, [r7, #4]
   178fc:	6859      	ldr	r1, [r3, #4]
   178fe:	687b      	ldr	r3, [r7, #4]
   17900:	891b      	ldrh	r3, [r3, #8]
   17902:	461a      	mov	r2, r3
   17904:	f7f4 fc2c 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   17908:	4b04      	ldr	r3, [pc, #16]	; (1791c <fitAttCback+0x58>)
   1790a:	781b      	ldrb	r3, [r3, #0]
   1790c:	68f9      	ldr	r1, [r7, #12]
   1790e:	4618      	mov	r0, r3
   17910:	f002 fe0b 	bl	1a52a <WsfMsgSend>
  }
}
   17914:	bf00      	nop
   17916:	3710      	adds	r7, #16
   17918:	46bd      	mov	sp, r7
   1791a:	bd80      	pop	{r7, pc}
   1791c:	10009430 	.word	0x10009430

00017920 <fitCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitCccCback(attsCccEvt_t *pEvt)
{
   17920:	b580      	push	{r7, lr}
   17922:	b084      	sub	sp, #16
   17924:	af00      	add	r7, sp, #0
   17926:	6078      	str	r0, [r7, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   17928:	687b      	ldr	r3, [r7, #4]
   1792a:	889b      	ldrh	r3, [r3, #4]
   1792c:	2b00      	cmp	r3, #0
   1792e:	d012      	beq.n	17956 <fitCccCback+0x36>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   17930:	687b      	ldr	r3, [r7, #4]
   17932:	881b      	ldrh	r3, [r3, #0]
   17934:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   17936:	4618      	mov	r0, r3
   17938:	f006 f978 	bl	1dc2c <AppDbGetHdl>
   1793c:	60f8      	str	r0, [r7, #12]
   1793e:	68fb      	ldr	r3, [r7, #12]
   17940:	2b00      	cmp	r3, #0
   17942:	d008      	beq.n	17956 <fitCccCback+0x36>
  {
    /* store value in device database */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   17944:	687b      	ldr	r3, [r7, #4]
   17946:	7a1b      	ldrb	r3, [r3, #8]
   17948:	b299      	uxth	r1, r3
   1794a:	687b      	ldr	r3, [r7, #4]
   1794c:	88db      	ldrh	r3, [r3, #6]
   1794e:	461a      	mov	r2, r3
   17950:	68f8      	ldr	r0, [r7, #12]
   17952:	f002 f8cd 	bl	19af0 <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   17956:	200a      	movs	r0, #10
   17958:	f002 fdc3 	bl	1a4e2 <WsfMsgAlloc>
   1795c:	60b8      	str	r0, [r7, #8]
   1795e:	68bb      	ldr	r3, [r7, #8]
   17960:	2b00      	cmp	r3, #0
   17962:	d00a      	beq.n	1797a <fitCccCback+0x5a>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   17964:	220a      	movs	r2, #10
   17966:	6879      	ldr	r1, [r7, #4]
   17968:	68b8      	ldr	r0, [r7, #8]
   1796a:	f7f4 fbf9 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   1796e:	4b05      	ldr	r3, [pc, #20]	; (17984 <fitCccCback+0x64>)
   17970:	781b      	ldrb	r3, [r3, #0]
   17972:	68b9      	ldr	r1, [r7, #8]
   17974:	4618      	mov	r0, r3
   17976:	f002 fdd8 	bl	1a52a <WsfMsgSend>
  }
}
   1797a:	bf00      	nop
   1797c:	3710      	adds	r7, #16
   1797e:	46bd      	mov	sp, r7
   17980:	bd80      	pop	{r7, pc}
   17982:	bf00      	nop
   17984:	10009430 	.word	0x10009430

00017988 <fitSendRunningSpeedMeasurement>:
*
*  \return None.
*/
/*************************************************************************************************/
static void fitSendRunningSpeedMeasurement(dmConnId_t connId)
{
   17988:	b580      	push	{r7, lr}
   1798a:	b082      	sub	sp, #8
   1798c:	af00      	add	r7, sp, #0
   1798e:	4603      	mov	r3, r0
   17990:	71fb      	strb	r3, [r7, #7]
  if (AttsCccEnabled(connId, FIT_RSCS_SM_CCC_IDX))
   17992:	79fb      	ldrb	r3, [r7, #7]
   17994:	2103      	movs	r1, #3
   17996:	4618      	mov	r0, r3
   17998:	f7f5 fd24 	bl	d3e4 <AttsCccEnabled>
   1799c:	4603      	mov	r3, r0
   1799e:	2b00      	cmp	r3, #0
   179a0:	d023      	beq.n	179ea <fitSendRunningSpeedMeasurement+0x62>
  {
    static uint8_t walk_run = 1;

    /* TODO: Set Running Speed and Cadence Measurement Parameters */

    RscpsSetParameter(RSCP_SM_PARAM_SPEED, 1);
   179a2:	2101      	movs	r1, #1
   179a4:	2000      	movs	r0, #0
   179a6:	f000 fba7 	bl	180f8 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_CADENCE, 2);
   179aa:	2102      	movs	r1, #2
   179ac:	2001      	movs	r0, #1
   179ae:	f000 fba3 	bl	180f8 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_STRIDE_LENGTH, 3);
   179b2:	2103      	movs	r1, #3
   179b4:	2002      	movs	r0, #2
   179b6:	f000 fb9f 	bl	180f8 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_TOTAL_DISTANCE, 4);
   179ba:	2104      	movs	r1, #4
   179bc:	2003      	movs	r0, #3
   179be:	f000 fb9b 	bl	180f8 <RscpsSetParameter>
    
    /* Toggle running/walking */
    walk_run = walk_run? 0 : 1;
   179c2:	4b16      	ldr	r3, [pc, #88]	; (17a1c <fitSendRunningSpeedMeasurement+0x94>)
   179c4:	781b      	ldrb	r3, [r3, #0]
   179c6:	2b00      	cmp	r3, #0
   179c8:	bf0c      	ite	eq
   179ca:	2301      	moveq	r3, #1
   179cc:	2300      	movne	r3, #0
   179ce:	b2db      	uxtb	r3, r3
   179d0:	461a      	mov	r2, r3
   179d2:	4b12      	ldr	r3, [pc, #72]	; (17a1c <fitSendRunningSpeedMeasurement+0x94>)
   179d4:	701a      	strb	r2, [r3, #0]
    RscpsSetParameter(RSCP_SM_PARAM_STATUS, walk_run);
   179d6:	4b11      	ldr	r3, [pc, #68]	; (17a1c <fitSendRunningSpeedMeasurement+0x94>)
   179d8:	781b      	ldrb	r3, [r3, #0]
   179da:	4619      	mov	r1, r3
   179dc:	2004      	movs	r0, #4
   179de:	f000 fb8b 	bl	180f8 <RscpsSetParameter>

    RscpsSendSpeedMeasurement(connId);
   179e2:	79fb      	ldrb	r3, [r7, #7]
   179e4:	4618      	mov	r0, r3
   179e6:	f000 fbdb 	bl	181a0 <RscpsSendSpeedMeasurement>
  }

  /* Configure and start timer to send the next measurement */
  fitRscmTimer.msg.event = FIT_RUNNING_TIMER_IND;
   179ea:	4b0d      	ldr	r3, [pc, #52]	; (17a20 <fitSendRunningSpeedMeasurement+0x98>)
   179ec:	22a2      	movs	r2, #162	; 0xa2
   179ee:	731a      	strb	r2, [r3, #12]
  fitRscmTimer.msg.status = FIT_RSCS_SM_CCC_IDX;
   179f0:	4b0b      	ldr	r3, [pc, #44]	; (17a20 <fitSendRunningSpeedMeasurement+0x98>)
   179f2:	2203      	movs	r2, #3
   179f4:	735a      	strb	r2, [r3, #13]
  fitRscmTimer.handlerId = fitHandlerId;
   179f6:	4b0b      	ldr	r3, [pc, #44]	; (17a24 <fitSendRunningSpeedMeasurement+0x9c>)
   179f8:	781a      	ldrb	r2, [r3, #0]
   179fa:	4b09      	ldr	r3, [pc, #36]	; (17a20 <fitSendRunningSpeedMeasurement+0x98>)
   179fc:	721a      	strb	r2, [r3, #8]
  fitRscmTimer.msg.param = connId;
   179fe:	79fb      	ldrb	r3, [r7, #7]
   17a00:	b29a      	uxth	r2, r3
   17a02:	4b07      	ldr	r3, [pc, #28]	; (17a20 <fitSendRunningSpeedMeasurement+0x98>)
   17a04:	815a      	strh	r2, [r3, #10]

  WsfTimerStartSec(&fitRscmTimer, fitRscmPeriod);
   17a06:	4b08      	ldr	r3, [pc, #32]	; (17a28 <fitSendRunningSpeedMeasurement+0xa0>)
   17a08:	881b      	ldrh	r3, [r3, #0]
   17a0a:	4619      	mov	r1, r3
   17a0c:	4804      	ldr	r0, [pc, #16]	; (17a20 <fitSendRunningSpeedMeasurement+0x98>)
   17a0e:	f002 ff21 	bl	1a854 <WsfTimerStartSec>
}
   17a12:	bf00      	nop
   17a14:	3708      	adds	r7, #8
   17a16:	46bd      	mov	sp, r7
   17a18:	bd80      	pop	{r7, pc}
   17a1a:	bf00      	nop
   17a1c:	10002b8c 	.word	0x10002b8c
   17a20:	10009420 	.word	0x10009420
   17a24:	10009430 	.word	0x10009430
   17a28:	10002b8a 	.word	0x10002b8a

00017a2c <fitProcCccState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcCccState(fitMsg_t *pMsg)
{
   17a2c:	b580      	push	{r7, lr}
   17a2e:	b082      	sub	sp, #8
   17a30:	af00      	add	r7, sp, #0
   17a32:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO3("ccc state ind value:%d handle:%d idx:%d", pMsg->ccc.value, pMsg->ccc.handle, pMsg->ccc.idx);
   17a34:	687b      	ldr	r3, [r7, #4]
   17a36:	88db      	ldrh	r3, [r3, #6]
   17a38:	4619      	mov	r1, r3
   17a3a:	687b      	ldr	r3, [r7, #4]
   17a3c:	889b      	ldrh	r3, [r3, #4]
   17a3e:	461a      	mov	r2, r3
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	7a1b      	ldrb	r3, [r3, #8]
   17a44:	4824      	ldr	r0, [pc, #144]	; (17ad8 <fitProcCccState+0xac>)
   17a46:	f001 fa01 	bl	18e4c <WsfTrace>

  /* handle heart rate measurement CCC */
  if (pMsg->ccc.idx == FIT_HRS_HRM_CCC_IDX)
   17a4a:	687b      	ldr	r3, [r7, #4]
   17a4c:	7a1b      	ldrb	r3, [r3, #8]
   17a4e:	2b01      	cmp	r3, #1
   17a50:	d113      	bne.n	17a7a <fitProcCccState+0x4e>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   17a52:	687b      	ldr	r3, [r7, #4]
   17a54:	88db      	ldrh	r3, [r3, #6]
   17a56:	2b01      	cmp	r3, #1
   17a58:	d108      	bne.n	17a6c <fitProcCccState+0x40>
    {
      HrpsMeasStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_HR_TIMER_IND, FIT_HRS_HRM_CCC_IDX);
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	881b      	ldrh	r3, [r3, #0]
   17a5e:	b2db      	uxtb	r3, r3
   17a60:	2201      	movs	r2, #1
   17a62:	21a0      	movs	r1, #160	; 0xa0
   17a64:	4618      	mov	r0, r3
   17a66:	f7fb fc37 	bl	132d8 <HrpsMeasStart>
    }
    else
    {
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   17a6a:	e031      	b.n	17ad0 <fitProcCccState+0xa4>
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
   17a6c:	687b      	ldr	r3, [r7, #4]
   17a6e:	881b      	ldrh	r3, [r3, #0]
   17a70:	b2db      	uxtb	r3, r3
   17a72:	4618      	mov	r0, r3
   17a74:	f7fb fc58 	bl	13328 <HrpsMeasStop>
    return;
   17a78:	e02a      	b.n	17ad0 <fitProcCccState+0xa4>
  }

  /* handle running speed and cadence measurement CCC */
  if (pMsg->ccc.idx == FIT_RSCS_SM_CCC_IDX)
   17a7a:	687b      	ldr	r3, [r7, #4]
   17a7c:	7a1b      	ldrb	r3, [r3, #8]
   17a7e:	2b03      	cmp	r3, #3
   17a80:	d10e      	bne.n	17aa0 <fitProcCccState+0x74>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   17a82:	687b      	ldr	r3, [r7, #4]
   17a84:	88db      	ldrh	r3, [r3, #6]
   17a86:	2b01      	cmp	r3, #1
   17a88:	d106      	bne.n	17a98 <fitProcCccState+0x6c>
    {
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   17a8a:	687b      	ldr	r3, [r7, #4]
   17a8c:	881b      	ldrh	r3, [r3, #0]
   17a8e:	b2db      	uxtb	r3, r3
   17a90:	4618      	mov	r0, r3
   17a92:	f7ff ff79 	bl	17988 <fitSendRunningSpeedMeasurement>
    }
    else
    {
      WsfTimerStop(&fitRscmTimer);
    }
    return;
   17a96:	e01b      	b.n	17ad0 <fitProcCccState+0xa4>
      WsfTimerStop(&fitRscmTimer);
   17a98:	4810      	ldr	r0, [pc, #64]	; (17adc <fitProcCccState+0xb0>)
   17a9a:	f002 ff01 	bl	1a8a0 <WsfTimerStop>
    return;
   17a9e:	e017      	b.n	17ad0 <fitProcCccState+0xa4>
  }

  /* handle battery level CCC */
  if (pMsg->ccc.idx == FIT_BATT_LVL_CCC_IDX)
   17aa0:	687b      	ldr	r3, [r7, #4]
   17aa2:	7a1b      	ldrb	r3, [r3, #8]
   17aa4:	2b02      	cmp	r3, #2
   17aa6:	d113      	bne.n	17ad0 <fitProcCccState+0xa4>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   17aa8:	687b      	ldr	r3, [r7, #4]
   17aaa:	88db      	ldrh	r3, [r3, #6]
   17aac:	2b01      	cmp	r3, #1
   17aae:	d108      	bne.n	17ac2 <fitProcCccState+0x96>
    {
      BasMeasBattStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_BATT_TIMER_IND, FIT_BATT_LVL_CCC_IDX);
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	881b      	ldrh	r3, [r3, #0]
   17ab4:	b2db      	uxtb	r3, r3
   17ab6:	2202      	movs	r2, #2
   17ab8:	21a1      	movs	r1, #161	; 0xa1
   17aba:	4618      	mov	r0, r3
   17abc:	f7fb f9c2 	bl	12e44 <BasMeasBattStart>
    }
    else
    {
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   17ac0:	e006      	b.n	17ad0 <fitProcCccState+0xa4>
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
   17ac2:	687b      	ldr	r3, [r7, #4]
   17ac4:	881b      	ldrh	r3, [r3, #0]
   17ac6:	b2db      	uxtb	r3, r3
   17ac8:	4618      	mov	r0, r3
   17aca:	f7fb f9fb 	bl	12ec4 <BasMeasBattStop>
    return;
   17ace:	bf00      	nop
  }
}
   17ad0:	3708      	adds	r7, #8
   17ad2:	46bd      	mov	sp, r7
   17ad4:	bd80      	pop	{r7, pc}
   17ad6:	bf00      	nop
   17ad8:	0002278c 	.word	0x0002278c
   17adc:	10009420 	.word	0x10009420

00017ae0 <fitClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitClose(fitMsg_t *pMsg)
{
   17ae0:	b580      	push	{r7, lr}
   17ae2:	b082      	sub	sp, #8
   17ae4:	af00      	add	r7, sp, #0
   17ae6:	6078      	str	r0, [r7, #4]
  /* stop heart rate measurement */
  HrpsMeasStop((dmConnId_t) pMsg->hdr.param);
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	881b      	ldrh	r3, [r3, #0]
   17aec:	b2db      	uxtb	r3, r3
   17aee:	4618      	mov	r0, r3
   17af0:	f7fb fc1a 	bl	13328 <HrpsMeasStop>

  /* stop battery measurement */
  BasMeasBattStop((dmConnId_t) pMsg->hdr.param);
   17af4:	687b      	ldr	r3, [r7, #4]
   17af6:	881b      	ldrh	r3, [r3, #0]
   17af8:	b2db      	uxtb	r3, r3
   17afa:	4618      	mov	r0, r3
   17afc:	f7fb f9e2 	bl	12ec4 <BasMeasBattStop>

  /* Stop running speed and cadence timer */
  WsfTimerStop(&fitRscmTimer);
   17b00:	4803      	ldr	r0, [pc, #12]	; (17b10 <fitClose+0x30>)
   17b02:	f002 fecd 	bl	1a8a0 <WsfTimerStop>
}
   17b06:	bf00      	nop
   17b08:	3708      	adds	r7, #8
   17b0a:	46bd      	mov	sp, r7
   17b0c:	bd80      	pop	{r7, pc}
   17b0e:	bf00      	nop
   17b10:	10009420 	.word	0x10009420

00017b14 <fitSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitSetup(fitMsg_t *pMsg)
{
   17b14:	b580      	push	{r7, lr}
   17b16:	b082      	sub	sp, #8
   17b18:	af00      	add	r7, sp, #0
   17b1a:	6078      	str	r0, [r7, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(fitAdvDataDisc), (uint8_t *) fitAdvDataDisc);
   17b1c:	4a0d      	ldr	r2, [pc, #52]	; (17b54 <fitSetup+0x40>)
   17b1e:	2110      	movs	r1, #16
   17b20:	2002      	movs	r0, #2
   17b22:	f007 fb4f 	bl	1f1c4 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(fitScanDataDisc), (uint8_t *) fitScanDataDisc);
   17b26:	4a0c      	ldr	r2, [pc, #48]	; (17b58 <fitSetup+0x44>)
   17b28:	2105      	movs	r1, #5
   17b2a:	2003      	movs	r0, #3
   17b2c:	f007 fb4a 	bl	1f1c4 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(fitAdvDataDisc), (uint8_t *) fitAdvDataDisc);
   17b30:	4a08      	ldr	r2, [pc, #32]	; (17b54 <fitSetup+0x40>)
   17b32:	2110      	movs	r1, #16
   17b34:	2000      	movs	r0, #0
   17b36:	f007 fb45 	bl	1f1c4 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(fitScanDataDisc), (uint8_t *) fitScanDataDisc);
   17b3a:	4a07      	ldr	r2, [pc, #28]	; (17b58 <fitSetup+0x44>)
   17b3c:	2105      	movs	r1, #5
   17b3e:	2001      	movs	r0, #1
   17b40:	f007 fb40 	bl	1f1c4 <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   17b44:	2002      	movs	r0, #2
   17b46:	f007 fb5f 	bl	1f208 <AppAdvStart>
}
   17b4a:	bf00      	nop
   17b4c:	3708      	adds	r7, #8
   17b4e:	46bd      	mov	sp, r7
   17b50:	bd80      	pop	{r7, pc}
   17b52:	bf00      	nop
   17b54:	00023b18 	.word	0x00023b18
   17b58:	00023b28 	.word	0x00023b28

00017b5c <fitBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitBtnCback(uint8_t btn)
{
   17b5c:	b580      	push	{r7, lr}
   17b5e:	b084      	sub	sp, #16
   17b60:	af00      	add	r7, sp, #0
   17b62:	4603      	mov	r3, r0
   17b64:	71fb      	strb	r3, [r7, #7]
  dmConnId_t      connId;
  static uint8_t  heartRate = 78;    /* for testing/demonstration */

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   17b66:	f006 f83f 	bl	1dbe8 <AppConnIsOpen>
   17b6a:	4603      	mov	r3, r0
   17b6c:	73fb      	strb	r3, [r7, #15]
   17b6e:	7bfb      	ldrb	r3, [r7, #15]
   17b70:	2b00      	cmp	r3, #0
   17b72:	d030      	beq.n	17bd6 <fitBtnCback+0x7a>
  {
    switch (btn)
   17b74:	79fb      	ldrb	r3, [r7, #7]
   17b76:	3b02      	subs	r3, #2
   17b78:	2b05      	cmp	r3, #5
   17b7a:	d845      	bhi.n	17c08 <fitBtnCback+0xac>
   17b7c:	a201      	add	r2, pc, #4	; (adr r2, 17b84 <fitBtnCback+0x28>)
   17b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17b82:	bf00      	nop
   17b84:	00017b9d 	.word	0x00017b9d
   17b88:	00017c09 	.word	0x00017c09
   17b8c:	00017bb5 	.word	0x00017bb5
   17b90:	00017c09 	.word	0x00017c09
   17b94:	00017c09 	.word	0x00017c09
   17b98:	00017bbf 	.word	0x00017bbf
    {
      case APP_UI_BTN_1_SHORT:
        /* increment the heart rate */
        AppHwHrmTest(++heartRate);
   17b9c:	4b1d      	ldr	r3, [pc, #116]	; (17c14 <fitBtnCback+0xb8>)
   17b9e:	781b      	ldrb	r3, [r3, #0]
   17ba0:	3301      	adds	r3, #1
   17ba2:	b2da      	uxtb	r2, r3
   17ba4:	4b1b      	ldr	r3, [pc, #108]	; (17c14 <fitBtnCback+0xb8>)
   17ba6:	701a      	strb	r2, [r3, #0]
   17ba8:	4b1a      	ldr	r3, [pc, #104]	; (17c14 <fitBtnCback+0xb8>)
   17baa:	781b      	ldrb	r3, [r3, #0]
   17bac:	4618      	mov	r0, r3
   17bae:	f002 f837 	bl	19c20 <AppHwHrmTest>
        break;
   17bb2:	e02a      	b.n	17c0a <fitBtnCback+0xae>

      case APP_UI_BTN_1_MED:
        break;

      case APP_UI_BTN_1_LONG:
        AppConnClose(connId);
   17bb4:	7bfb      	ldrb	r3, [r7, #15]
   17bb6:	4618      	mov	r0, r3
   17bb8:	f006 f806 	bl	1dbc8 <AppConnClose>
        break;
   17bbc:	e025      	b.n	17c0a <fitBtnCback+0xae>

      case APP_UI_BTN_2_SHORT:
        /* decrement the heart rate */
        AppHwHrmTest(--heartRate);
   17bbe:	4b15      	ldr	r3, [pc, #84]	; (17c14 <fitBtnCback+0xb8>)
   17bc0:	781b      	ldrb	r3, [r3, #0]
   17bc2:	3b01      	subs	r3, #1
   17bc4:	b2da      	uxtb	r2, r3
   17bc6:	4b13      	ldr	r3, [pc, #76]	; (17c14 <fitBtnCback+0xb8>)
   17bc8:	701a      	strb	r2, [r3, #0]
   17bca:	4b12      	ldr	r3, [pc, #72]	; (17c14 <fitBtnCback+0xb8>)
   17bcc:	781b      	ldrb	r3, [r3, #0]
   17bce:	4618      	mov	r0, r3
   17bd0:	f002 f826 	bl	19c20 <AppHwHrmTest>
        break;
   17bd4:	e019      	b.n	17c0a <fitBtnCback+0xae>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   17bd6:	79fb      	ldrb	r3, [r7, #7]
   17bd8:	2b03      	cmp	r3, #3
   17bda:	d008      	beq.n	17bee <fitBtnCback+0x92>
   17bdc:	2b04      	cmp	r3, #4
   17bde:	d00d      	beq.n	17bfc <fitBtnCback+0xa0>
   17be0:	2b02      	cmp	r3, #2
   17be2:	d000      	beq.n	17be6 <fitBtnCback+0x8a>
        AppDbDeleteAllRecords();
        AppAdvStart(APP_MODE_AUTO_INIT);
        break;

      default:
        break;
   17be4:	e011      	b.n	17c0a <fitBtnCback+0xae>
        AppAdvStart(APP_MODE_AUTO_INIT);
   17be6:	2002      	movs	r0, #2
   17be8:	f007 fb0e 	bl	1f208 <AppAdvStart>
        break;
   17bec:	e00d      	b.n	17c0a <fitBtnCback+0xae>
        AppSetBondable(TRUE);
   17bee:	2001      	movs	r0, #1
   17bf0:	f007 f9fe 	bl	1eff0 <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   17bf4:	2001      	movs	r0, #1
   17bf6:	f007 fb07 	bl	1f208 <AppAdvStart>
        break;
   17bfa:	e006      	b.n	17c0a <fitBtnCback+0xae>
        AppDbDeleteAllRecords();
   17bfc:	f001 fe20 	bl	19840 <AppDbDeleteAllRecords>
        AppAdvStart(APP_MODE_AUTO_INIT);
   17c00:	2002      	movs	r0, #2
   17c02:	f007 fb01 	bl	1f208 <AppAdvStart>
        break;
   17c06:	e000      	b.n	17c0a <fitBtnCback+0xae>
        break;
   17c08:	bf00      	nop
    }
  }
}
   17c0a:	bf00      	nop
   17c0c:	3710      	adds	r7, #16
   17c0e:	46bd      	mov	sp, r7
   17c10:	bd80      	pop	{r7, pc}
   17c12:	bf00      	nop
   17c14:	10002b8d 	.word	0x10002b8d

00017c18 <fitProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcMsg(fitMsg_t *pMsg)
{
   17c18:	b580      	push	{r7, lr}
   17c1a:	b084      	sub	sp, #16
   17c1c:	af00      	add	r7, sp, #0
   17c1e:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   17c20:	2300      	movs	r3, #0
   17c22:	73fb      	strb	r3, [r7, #15]

  switch(pMsg->hdr.event)
   17c24:	687b      	ldr	r3, [r7, #4]
   17c26:	789b      	ldrb	r3, [r3, #2]
   17c28:	3b0f      	subs	r3, #15
   17c2a:	2b93      	cmp	r3, #147	; 0x93
   17c2c:	f200 818c 	bhi.w	17f48 <fitProcMsg+0x330>
   17c30:	a201      	add	r2, pc, #4	; (adr r2, 17c38 <fitProcMsg+0x20>)
   17c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17c36:	bf00      	nop
   17c38:	00017eab 	.word	0x00017eab
   17c3c:	00017ebd 	.word	0x00017ebd
   17c40:	00017ec5 	.word	0x00017ec5
   17c44:	00017f49 	.word	0x00017f49
   17c48:	00017f49 	.word	0x00017f49
   17c4c:	00017f49 	.word	0x00017f49
   17c50:	00017f49 	.word	0x00017f49
   17c54:	00017f49 	.word	0x00017f49
   17c58:	00017f49 	.word	0x00017f49
   17c5c:	00017f49 	.word	0x00017f49
   17c60:	00017f49 	.word	0x00017f49
   17c64:	00017f49 	.word	0x00017f49
   17c68:	00017f49 	.word	0x00017f49
   17c6c:	00017f49 	.word	0x00017f49
   17c70:	00017f49 	.word	0x00017f49
   17c74:	00017f49 	.word	0x00017f49
   17c78:	00017f49 	.word	0x00017f49
   17c7c:	00017ed3 	.word	0x00017ed3
   17c80:	00017edd 	.word	0x00017edd
   17c84:	00017ee3 	.word	0x00017ee3
   17c88:	00017f49 	.word	0x00017f49
   17c8c:	00017f49 	.word	0x00017f49
   17c90:	00017f49 	.word	0x00017f49
   17c94:	00017f49 	.word	0x00017f49
   17c98:	00017ee9 	.word	0x00017ee9
   17c9c:	00017eff 	.word	0x00017eff
   17ca0:	00017f49 	.word	0x00017f49
   17ca4:	00017f0b 	.word	0x00017f0b
   17ca8:	00017f11 	.word	0x00017f11
   17cac:	00017f17 	.word	0x00017f17
   17cb0:	00017f1d 	.word	0x00017f1d
   17cb4:	00017f23 	.word	0x00017f23
   17cb8:	00017f49 	.word	0x00017f49
   17cbc:	00017f49 	.word	0x00017f49
   17cc0:	00017f49 	.word	0x00017f49
   17cc4:	00017f49 	.word	0x00017f49
   17cc8:	00017f49 	.word	0x00017f49
   17ccc:	00017f2d 	.word	0x00017f2d
   17cd0:	00017f3f 	.word	0x00017f3f
   17cd4:	00017f49 	.word	0x00017f49
   17cd8:	00017f49 	.word	0x00017f49
   17cdc:	00017f49 	.word	0x00017f49
   17ce0:	00017f49 	.word	0x00017f49
   17ce4:	00017f49 	.word	0x00017f49
   17ce8:	00017f49 	.word	0x00017f49
   17cec:	00017f49 	.word	0x00017f49
   17cf0:	00017f49 	.word	0x00017f49
   17cf4:	00017f49 	.word	0x00017f49
   17cf8:	00017f49 	.word	0x00017f49
   17cfc:	00017f49 	.word	0x00017f49
   17d00:	00017f49 	.word	0x00017f49
   17d04:	00017f49 	.word	0x00017f49
   17d08:	00017f49 	.word	0x00017f49
   17d0c:	00017f49 	.word	0x00017f49
   17d10:	00017f49 	.word	0x00017f49
   17d14:	00017f49 	.word	0x00017f49
   17d18:	00017f49 	.word	0x00017f49
   17d1c:	00017f49 	.word	0x00017f49
   17d20:	00017f49 	.word	0x00017f49
   17d24:	00017f49 	.word	0x00017f49
   17d28:	00017f49 	.word	0x00017f49
   17d2c:	00017f49 	.word	0x00017f49
   17d30:	00017f49 	.word	0x00017f49
   17d34:	00017f49 	.word	0x00017f49
   17d38:	00017f49 	.word	0x00017f49
   17d3c:	00017f49 	.word	0x00017f49
   17d40:	00017f49 	.word	0x00017f49
   17d44:	00017f49 	.word	0x00017f49
   17d48:	00017f49 	.word	0x00017f49
   17d4c:	00017f49 	.word	0x00017f49
   17d50:	00017f49 	.word	0x00017f49
   17d54:	00017f49 	.word	0x00017f49
   17d58:	00017f49 	.word	0x00017f49
   17d5c:	00017f49 	.word	0x00017f49
   17d60:	00017f49 	.word	0x00017f49
   17d64:	00017f49 	.word	0x00017f49
   17d68:	00017f49 	.word	0x00017f49
   17d6c:	00017f49 	.word	0x00017f49
   17d70:	00017f49 	.word	0x00017f49
   17d74:	00017f49 	.word	0x00017f49
   17d78:	00017f49 	.word	0x00017f49
   17d7c:	00017f49 	.word	0x00017f49
   17d80:	00017f49 	.word	0x00017f49
   17d84:	00017f49 	.word	0x00017f49
   17d88:	00017f49 	.word	0x00017f49
   17d8c:	00017f49 	.word	0x00017f49
   17d90:	00017f49 	.word	0x00017f49
   17d94:	00017f49 	.word	0x00017f49
   17d98:	00017f49 	.word	0x00017f49
   17d9c:	00017f49 	.word	0x00017f49
   17da0:	00017f49 	.word	0x00017f49
   17da4:	00017f49 	.word	0x00017f49
   17da8:	00017f49 	.word	0x00017f49
   17dac:	00017f49 	.word	0x00017f49
   17db0:	00017f49 	.word	0x00017f49
   17db4:	00017f49 	.word	0x00017f49
   17db8:	00017f49 	.word	0x00017f49
   17dbc:	00017f49 	.word	0x00017f49
   17dc0:	00017f49 	.word	0x00017f49
   17dc4:	00017f49 	.word	0x00017f49
   17dc8:	00017f49 	.word	0x00017f49
   17dcc:	00017f49 	.word	0x00017f49
   17dd0:	00017f49 	.word	0x00017f49
   17dd4:	00017f49 	.word	0x00017f49
   17dd8:	00017f49 	.word	0x00017f49
   17ddc:	00017f49 	.word	0x00017f49
   17de0:	00017f49 	.word	0x00017f49
   17de4:	00017f49 	.word	0x00017f49
   17de8:	00017f49 	.word	0x00017f49
   17dec:	00017f49 	.word	0x00017f49
   17df0:	00017f49 	.word	0x00017f49
   17df4:	00017f49 	.word	0x00017f49
   17df8:	00017f49 	.word	0x00017f49
   17dfc:	00017f49 	.word	0x00017f49
   17e00:	00017f49 	.word	0x00017f49
   17e04:	00017f49 	.word	0x00017f49
   17e08:	00017f49 	.word	0x00017f49
   17e0c:	00017f49 	.word	0x00017f49
   17e10:	00017f49 	.word	0x00017f49
   17e14:	00017f49 	.word	0x00017f49
   17e18:	00017f49 	.word	0x00017f49
   17e1c:	00017f49 	.word	0x00017f49
   17e20:	00017f49 	.word	0x00017f49
   17e24:	00017f49 	.word	0x00017f49
   17e28:	00017f49 	.word	0x00017f49
   17e2c:	00017f49 	.word	0x00017f49
   17e30:	00017f49 	.word	0x00017f49
   17e34:	00017f49 	.word	0x00017f49
   17e38:	00017f49 	.word	0x00017f49
   17e3c:	00017f49 	.word	0x00017f49
   17e40:	00017f49 	.word	0x00017f49
   17e44:	00017f49 	.word	0x00017f49
   17e48:	00017f49 	.word	0x00017f49
   17e4c:	00017f49 	.word	0x00017f49
   17e50:	00017f49 	.word	0x00017f49
   17e54:	00017f49 	.word	0x00017f49
   17e58:	00017f49 	.word	0x00017f49
   17e5c:	00017f49 	.word	0x00017f49
   17e60:	00017f49 	.word	0x00017f49
   17e64:	00017f49 	.word	0x00017f49
   17e68:	00017f49 	.word	0x00017f49
   17e6c:	00017f49 	.word	0x00017f49
   17e70:	00017f49 	.word	0x00017f49
   17e74:	00017f49 	.word	0x00017f49
   17e78:	00017f49 	.word	0x00017f49
   17e7c:	00017e97 	.word	0x00017e97
   17e80:	00017ea1 	.word	0x00017ea1
   17e84:	00017e89 	.word	0x00017e89
  {
    case FIT_RUNNING_TIMER_IND:
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   17e88:	687b      	ldr	r3, [r7, #4]
   17e8a:	881b      	ldrh	r3, [r3, #0]
   17e8c:	b2db      	uxtb	r3, r3
   17e8e:	4618      	mov	r0, r3
   17e90:	f7ff fd7a 	bl	17988 <fitSendRunningSpeedMeasurement>
      break;
   17e94:	e059      	b.n	17f4a <fitProcMsg+0x332>

    case FIT_HR_TIMER_IND:
      HrpsProcMsg(&pMsg->hdr);
   17e96:	687b      	ldr	r3, [r7, #4]
   17e98:	4618      	mov	r0, r3
   17e9a:	f7fb fa67 	bl	1336c <HrpsProcMsg>
      break;
   17e9e:	e054      	b.n	17f4a <fitProcMsg+0x332>

    case FIT_BATT_TIMER_IND:
      BasProcMsg(&pMsg->hdr);
   17ea0:	687b      	ldr	r3, [r7, #4]
   17ea2:	4618      	mov	r0, r3
   17ea4:	f7fb f836 	bl	12f14 <BasProcMsg>
      break;
   17ea8:	e04f      	b.n	17f4a <fitProcMsg+0x332>

    case ATTS_HANDLE_VALUE_CNF:
      HrpsProcMsg(&pMsg->hdr);
   17eaa:	687b      	ldr	r3, [r7, #4]
   17eac:	4618      	mov	r0, r3
   17eae:	f7fb fa5d 	bl	1336c <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   17eb2:	687b      	ldr	r3, [r7, #4]
   17eb4:	4618      	mov	r0, r3
   17eb6:	f7fb f82d 	bl	12f14 <BasProcMsg>
      break;
   17eba:	e046      	b.n	17f4a <fitProcMsg+0x332>

    case ATTS_CCC_STATE_IND:
      fitProcCccState(pMsg);
   17ebc:	6878      	ldr	r0, [r7, #4]
   17ebe:	f7ff fdb5 	bl	17a2c <fitProcCccState>
      break;
   17ec2:	e042      	b.n	17f4a <fitProcMsg+0x332>

    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
   17ec4:	687b      	ldr	r3, [r7, #4]
   17ec6:	89db      	ldrh	r3, [r3, #14]
   17ec8:	4619      	mov	r1, r3
   17eca:	4825      	ldr	r0, [pc, #148]	; (17f60 <fitProcMsg+0x348>)
   17ecc:	f000 ffbe 	bl	18e4c <WsfTrace>
      break;
   17ed0:	e03b      	b.n	17f4a <fitProcMsg+0x332>

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   17ed2:	f7f8 f9dd 	bl	10290 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_RESET_CMPL;
   17ed6:	2301      	movs	r3, #1
   17ed8:	73fb      	strb	r3, [r7, #15]
      break;
   17eda:	e036      	b.n	17f4a <fitProcMsg+0x332>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   17edc:	2303      	movs	r3, #3
   17ede:	73fb      	strb	r3, [r7, #15]
      break;
   17ee0:	e033      	b.n	17f4a <fitProcMsg+0x332>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   17ee2:	2304      	movs	r3, #4
   17ee4:	73fb      	strb	r3, [r7, #15]
      break;
   17ee6:	e030      	b.n	17f4a <fitProcMsg+0x332>

    case DM_CONN_OPEN_IND:
      HrpsProcMsg(&pMsg->hdr);
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	4618      	mov	r0, r3
   17eec:	f7fb fa3e 	bl	1336c <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   17ef0:	687b      	ldr	r3, [r7, #4]
   17ef2:	4618      	mov	r0, r3
   17ef4:	f7fb f80e 	bl	12f14 <BasProcMsg>
      // AppSlaveSecurityReq(1);
      uiEvent = APP_UI_CONN_OPEN;
   17ef8:	2308      	movs	r3, #8
   17efa:	73fb      	strb	r3, [r7, #15]
      break;
   17efc:	e025      	b.n	17f4a <fitProcMsg+0x332>

    case DM_CONN_CLOSE_IND:
      fitClose(pMsg);
   17efe:	6878      	ldr	r0, [r7, #4]
   17f00:	f7ff fdee 	bl	17ae0 <fitClose>
      uiEvent = APP_UI_CONN_CLOSE;
   17f04:	2309      	movs	r3, #9
   17f06:	73fb      	strb	r3, [r7, #15]
      break;
   17f08:	e01f      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   17f0a:	230a      	movs	r3, #10
   17f0c:	73fb      	strb	r3, [r7, #15]
      break;
   17f0e:	e01c      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   17f10:	230b      	movs	r3, #11
   17f12:	73fb      	strb	r3, [r7, #15]
      break;
   17f14:	e019      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   17f16:	230c      	movs	r3, #12
   17f18:	73fb      	strb	r3, [r7, #15]
      break;
   17f1a:	e016      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   17f1c:	230d      	movs	r3, #13
   17f1e:	73fb      	strb	r3, [r7, #15]
      break;
   17f20:	e013      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->dm.authReq);
   17f22:	687b      	ldr	r3, [r7, #4]
   17f24:	4618      	mov	r0, r3
   17f26:	f005 fdfb 	bl	1db20 <AppHandlePasskey>
      break;
   17f2a:	e00e      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_ECC_KEY_IND:
      fitSetup(pMsg);
   17f2c:	6878      	ldr	r0, [r7, #4]
   17f2e:	f7ff fdf1 	bl	17b14 <fitSetup>
      DmSecSetEccKey(&pMsg->dm.eccMsg.data.key);
   17f32:	687b      	ldr	r3, [r7, #4]
   17f34:	3304      	adds	r3, #4
   17f36:	4618      	mov	r0, r3
   17f38:	f7f8 fa08 	bl	1034c <DmSecSetEccKey>
      break;
   17f3c:	e005      	b.n	17f4a <fitProcMsg+0x332>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->dm.cnfInd);
   17f3e:	687b      	ldr	r3, [r7, #4]
   17f40:	4618      	mov	r0, r3
   17f42:	f005 fe29 	bl	1db98 <AppHandleNumericComparison>
      break;
   17f46:	e000      	b.n	17f4a <fitProcMsg+0x332>
        #endif
      }
      break;
      
    default:
      break;
   17f48:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   17f4a:	7bfb      	ldrb	r3, [r7, #15]
   17f4c:	2b00      	cmp	r3, #0
   17f4e:	d003      	beq.n	17f58 <fitProcMsg+0x340>
  {
    AppUiAction(uiEvent);
   17f50:	7bfb      	ldrb	r3, [r7, #15]
   17f52:	4618      	mov	r0, r3
   17f54:	f001 fe74 	bl	19c40 <AppUiAction>
  }
}
   17f58:	bf00      	nop
   17f5a:	3710      	adds	r7, #16
   17f5c:	46bd      	mov	sp, r7
   17f5e:	bd80      	pop	{r7, pc}
   17f60:	000227b4 	.word	0x000227b4

00017f64 <FitHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandlerInit(wsfHandlerId_t handlerId)
{
   17f64:	b580      	push	{r7, lr}
   17f66:	b082      	sub	sp, #8
   17f68:	af00      	add	r7, sp, #0
   17f6a:	4603      	mov	r3, r0
   17f6c:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("FitHandlerInit");
   17f6e:	4814      	ldr	r0, [pc, #80]	; (17fc0 <FitHandlerInit+0x5c>)
   17f70:	f000 ff6c 	bl	18e4c <WsfTrace>

  /* store handler ID */
  fitHandlerId = handlerId;
   17f74:	4a13      	ldr	r2, [pc, #76]	; (17fc4 <FitHandlerInit+0x60>)
   17f76:	79fb      	ldrb	r3, [r7, #7]
   17f78:	7013      	strb	r3, [r2, #0]

  /* Set configuration pointers */
  pAppAdvCfg = (appAdvCfg_t *) &fitAdvCfg;
   17f7a:	4b13      	ldr	r3, [pc, #76]	; (17fc8 <FitHandlerInit+0x64>)
   17f7c:	4a13      	ldr	r2, [pc, #76]	; (17fcc <FitHandlerInit+0x68>)
   17f7e:	601a      	str	r2, [r3, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &fitSlaveCfg;
   17f80:	4b13      	ldr	r3, [pc, #76]	; (17fd0 <FitHandlerInit+0x6c>)
   17f82:	4a14      	ldr	r2, [pc, #80]	; (17fd4 <FitHandlerInit+0x70>)
   17f84:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &fitSecCfg;
   17f86:	4b14      	ldr	r3, [pc, #80]	; (17fd8 <FitHandlerInit+0x74>)
   17f88:	4a14      	ldr	r2, [pc, #80]	; (17fdc <FitHandlerInit+0x78>)
   17f8a:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &fitUpdateCfg;
   17f8c:	4b14      	ldr	r3, [pc, #80]	; (17fe0 <FitHandlerInit+0x7c>)
   17f8e:	4a15      	ldr	r2, [pc, #84]	; (17fe4 <FitHandlerInit+0x80>)
   17f90:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   17f92:	f006 fd67 	bl	1ea64 <AppSlaveInit>

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &fitSmpCfg;
   17f96:	4b14      	ldr	r3, [pc, #80]	; (17fe8 <FitHandlerInit+0x84>)
   17f98:	4a14      	ldr	r2, [pc, #80]	; (17fec <FitHandlerInit+0x88>)
   17f9a:	601a      	str	r2, [r3, #0]

  /* initialize heart rate profile sensor */
  HrpsInit(handlerId, (hrpsCfg_t *) &fitHrpsCfg);
   17f9c:	79fb      	ldrb	r3, [r7, #7]
   17f9e:	4914      	ldr	r1, [pc, #80]	; (17ff0 <FitHandlerInit+0x8c>)
   17fa0:	4618      	mov	r0, r3
   17fa2:	f7fb f983 	bl	132ac <HrpsInit>
  HrpsSetFlags(CH_HRM_FLAGS_VALUE_8BIT | CH_HRM_FLAGS_ENERGY_EXP);
   17fa6:	2008      	movs	r0, #8
   17fa8:	f7fb fa24 	bl	133f4 <HrpsSetFlags>

  /* initialize battery service server */
  BasInit(handlerId, (basCfg_t *) &fitBasCfg);
   17fac:	79fb      	ldrb	r3, [r7, #7]
   17fae:	4911      	ldr	r1, [pc, #68]	; (17ff4 <FitHandlerInit+0x90>)
   17fb0:	4618      	mov	r0, r3
   17fb2:	f7fa ff2d 	bl	12e10 <BasInit>
}
   17fb6:	bf00      	nop
   17fb8:	3708      	adds	r7, #8
   17fba:	46bd      	mov	sp, r7
   17fbc:	bd80      	pop	{r7, pc}
   17fbe:	bf00      	nop
   17fc0:	000227c8 	.word	0x000227c8
   17fc4:	10009430 	.word	0x10009430
   17fc8:	10009e78 	.word	0x10009e78
   17fcc:	00023adc 	.word	0x00023adc
   17fd0:	10009e54 	.word	0x10009e54
   17fd4:	00023ae8 	.word	0x00023ae8
   17fd8:	10009e6c 	.word	0x10009e6c
   17fdc:	00023aec 	.word	0x00023aec
   17fe0:	10009e50 	.word	0x10009e50
   17fe4:	00023af4 	.word	0x00023af4
   17fe8:	10002bb8 	.word	0x10002bb8
   17fec:	00023b10 	.word	0x00023b10
   17ff0:	00023b04 	.word	0x00023b04
   17ff4:	00023b08 	.word	0x00023b08

00017ff8 <FitHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   17ff8:	b580      	push	{r7, lr}
   17ffa:	b082      	sub	sp, #8
   17ffc:	af00      	add	r7, sp, #0
   17ffe:	4603      	mov	r3, r0
   18000:	6039      	str	r1, [r7, #0]
   18002:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   18004:	683b      	ldr	r3, [r7, #0]
   18006:	2b00      	cmp	r3, #0
   18008:	d016      	beq.n	18038 <FitHandler+0x40>
  {
    APP_TRACE_INFO1("Fit got evt %d", pMsg->event);
   1800a:	683b      	ldr	r3, [r7, #0]
   1800c:	789b      	ldrb	r3, [r3, #2]
   1800e:	4619      	mov	r1, r3
   18010:	480b      	ldr	r0, [pc, #44]	; (18040 <FitHandler+0x48>)
   18012:	f000 ff1b 	bl	18e4c <WsfTrace>

    if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   18016:	683b      	ldr	r3, [r7, #0]
   18018:	789b      	ldrb	r3, [r3, #2]
   1801a:	2b1f      	cmp	r3, #31
   1801c:	d909      	bls.n	18032 <FitHandler+0x3a>
   1801e:	683b      	ldr	r3, [r7, #0]
   18020:	789b      	ldrb	r3, [r3, #2]
   18022:	2b55      	cmp	r3, #85	; 0x55
   18024:	d805      	bhi.n	18032 <FitHandler+0x3a>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   18026:	6838      	ldr	r0, [r7, #0]
   18028:	f006 fd5c 	bl	1eae4 <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   1802c:	6838      	ldr	r0, [r7, #0]
   1802e:	f006 ff5d 	bl	1eeec <AppSlaveSecProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    fitProcMsg((fitMsg_t *) pMsg);
   18032:	6838      	ldr	r0, [r7, #0]
   18034:	f7ff fdf0 	bl	17c18 <fitProcMsg>
  }
}
   18038:	bf00      	nop
   1803a:	3708      	adds	r7, #8
   1803c:	46bd      	mov	sp, r7
   1803e:	bd80      	pop	{r7, pc}
   18040:	000227d8 	.word	0x000227d8

00018044 <FitStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitStart(void)
{
   18044:	b580      	push	{r7, lr}
   18046:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(fitDmCback);
   18048:	4816      	ldr	r0, [pc, #88]	; (180a4 <FitStart+0x60>)
   1804a:	f7f7 fd51 	bl	faf0 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, fitDmCback);
   1804e:	4915      	ldr	r1, [pc, #84]	; (180a4 <FitStart+0x60>)
   18050:	2003      	movs	r0, #3
   18052:	f7f7 fa41 	bl	f4d8 <DmConnRegister>
  AttRegister(fitAttCback);
   18056:	4814      	ldr	r0, [pc, #80]	; (180a8 <FitStart+0x64>)
   18058:	f7f4 fb08 	bl	c66c <AttRegister>
  AttConnRegister(AppServerConnCback);
   1805c:	4813      	ldr	r0, [pc, #76]	; (180ac <FitStart+0x68>)
   1805e:	f7f4 fb1f 	bl	c6a0 <AttConnRegister>
  AttsCccRegister(FIT_NUM_CCC_IDX, (attsCccSet_t *) fitCccSet, fitCccCback);
   18062:	4a13      	ldr	r2, [pc, #76]	; (180b0 <FitStart+0x6c>)
   18064:	4913      	ldr	r1, [pc, #76]	; (180b4 <FitStart+0x70>)
   18066:	2004      	movs	r0, #4
   18068:	f7f5 f948 	bl	d2fc <AttsCccRegister>

  /* Register for app framework callbacks */
  AppUiBtnRegister(fitBtnCback);
   1806c:	4812      	ldr	r0, [pc, #72]	; (180b8 <FitStart+0x74>)
   1806e:	f001 feab 	bl	19dc8 <AppUiBtnRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   18072:	f005 fc5d 	bl	1d930 <SvcCoreAddGroup>
  SvcHrsCbackRegister(NULL, HrpsWriteCback);
   18076:	4911      	ldr	r1, [pc, #68]	; (180bc <FitStart+0x78>)
   18078:	2000      	movs	r0, #0
   1807a:	f005 fc8b 	bl	1d994 <SvcHrsCbackRegister>
  SvcHrsAddGroup();
   1807e:	f005 fc7f 	bl	1d980 <SvcHrsAddGroup>
  SvcDisAddGroup();
   18082:	f005 fc73 	bl	1d96c <SvcDisAddGroup>
  SvcBattCbackRegister(BasReadCback, NULL);
   18086:	2100      	movs	r1, #0
   18088:	480d      	ldr	r0, [pc, #52]	; (180c0 <FitStart+0x7c>)
   1808a:	f005 fc3d 	bl	1d908 <SvcBattCbackRegister>
  SvcBattAddGroup();
   1808e:	f005 fc31 	bl	1d8f4 <SvcBattAddGroup>
  SvcRscsAddGroup();
   18092:	f005 fc93 	bl	1d9bc <SvcRscsAddGroup>

  /* Set running speed and cadence features */
  RscpsSetFeatures(RSCS_ALL_FEATURES);
   18096:	2007      	movs	r0, #7
   18098:	f000 f814 	bl	180c4 <RscpsSetFeatures>

  /* Reset the device */
  DmDevReset();
   1809c:	f7f7 fcc8 	bl	fa30 <DmDevReset>
}
   180a0:	bf00      	nop
   180a2:	bd80      	pop	{r7, pc}
   180a4:	0001787d 	.word	0x0001787d
   180a8:	000178c5 	.word	0x000178c5
   180ac:	0001dd6b 	.word	0x0001dd6b
   180b0:	00017921 	.word	0x00017921
   180b4:	00023b30 	.word	0x00023b30
   180b8:	00017b5d 	.word	0x00017b5d
   180bc:	000133b5 	.word	0x000133b5
   180c0:	00012f95 	.word	0x00012f95

000180c4 <RscpsSetFeatures>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetFeatures(uint16_t features)
{
   180c4:	b580      	push	{r7, lr}
   180c6:	b084      	sub	sp, #16
   180c8:	af00      	add	r7, sp, #0
   180ca:	4603      	mov	r3, r0
   180cc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempData[2] = {UINT16_TO_BYTES(features)};
   180ce:	88fb      	ldrh	r3, [r7, #6]
   180d0:	b2db      	uxtb	r3, r3
   180d2:	733b      	strb	r3, [r7, #12]
   180d4:	88fb      	ldrh	r3, [r7, #6]
   180d6:	0a1b      	lsrs	r3, r3, #8
   180d8:	b29b      	uxth	r3, r3
   180da:	b2db      	uxtb	r3, r3
   180dc:	737b      	strb	r3, [r7, #13]
  AttsSetAttr(RSCS_RSF_HDL, sizeof(tempData), tempData);
   180de:	f107 030c 	add.w	r3, r7, #12
   180e2:	461a      	mov	r2, r3
   180e4:	2102      	movs	r1, #2
   180e6:	f240 40a2 	movw	r0, #1186	; 0x4a2
   180ea:	f7f5 fc2d 	bl	d948 <AttsSetAttr>
}
   180ee:	bf00      	nop
   180f0:	3710      	adds	r7, #16
   180f2:	46bd      	mov	sp, r7
   180f4:	bd80      	pop	{r7, pc}
	...

000180f8 <RscpsSetParameter>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetParameter(uint8_t type, uint32_t value)
{
   180f8:	b480      	push	{r7}
   180fa:	b083      	sub	sp, #12
   180fc:	af00      	add	r7, sp, #0
   180fe:	4603      	mov	r3, r0
   18100:	6039      	str	r1, [r7, #0]
   18102:	71fb      	strb	r3, [r7, #7]
  switch (type)
   18104:	79fb      	ldrb	r3, [r7, #7]
   18106:	2b04      	cmp	r3, #4
   18108:	d840      	bhi.n	1818c <RscpsSetParameter+0x94>
   1810a:	a201      	add	r2, pc, #4	; (adr r2, 18110 <RscpsSetParameter+0x18>)
   1810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18110:	00018125 	.word	0x00018125
   18114:	0001812f 	.word	0x0001812f
   18118:	00018139 	.word	0x00018139
   1811c:	00018151 	.word	0x00018151
   18120:	00018167 	.word	0x00018167
  {
  case RSCP_SM_PARAM_SPEED:
    rscpSmData.speed = (uint16_t) value;
   18124:	683b      	ldr	r3, [r7, #0]
   18126:	b29a      	uxth	r2, r3
   18128:	4b1c      	ldr	r3, [pc, #112]	; (1819c <RscpsSetParameter+0xa4>)
   1812a:	805a      	strh	r2, [r3, #2]
    break;
   1812c:	e02f      	b.n	1818e <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_CADENCE:
    rscpSmData.cadence = (uint8_t) value;
   1812e:	683b      	ldr	r3, [r7, #0]
   18130:	b2da      	uxtb	r2, r3
   18132:	4b1a      	ldr	r3, [pc, #104]	; (1819c <RscpsSetParameter+0xa4>)
   18134:	711a      	strb	r2, [r3, #4]
    break;
   18136:	e02a      	b.n	1818e <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STRIDE_LENGTH:
    rscpSmData.flags |= (1 << RSCPS_ISLP_FLAG_INDEX);
   18138:	4b18      	ldr	r3, [pc, #96]	; (1819c <RscpsSetParameter+0xa4>)
   1813a:	781b      	ldrb	r3, [r3, #0]
   1813c:	f043 0301 	orr.w	r3, r3, #1
   18140:	b2da      	uxtb	r2, r3
   18142:	4b16      	ldr	r3, [pc, #88]	; (1819c <RscpsSetParameter+0xa4>)
   18144:	701a      	strb	r2, [r3, #0]
    rscpSmData.stride = (uint16_t) value;
   18146:	683b      	ldr	r3, [r7, #0]
   18148:	b29a      	uxth	r2, r3
   1814a:	4b14      	ldr	r3, [pc, #80]	; (1819c <RscpsSetParameter+0xa4>)
   1814c:	80da      	strh	r2, [r3, #6]
    break;
   1814e:	e01e      	b.n	1818e <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_TOTAL_DISTANCE:
    rscpSmData.flags |= (1 << RSCPS_TDP_FLAG_INDEX);
   18150:	4b12      	ldr	r3, [pc, #72]	; (1819c <RscpsSetParameter+0xa4>)
   18152:	781b      	ldrb	r3, [r3, #0]
   18154:	f043 0302 	orr.w	r3, r3, #2
   18158:	b2da      	uxtb	r2, r3
   1815a:	4b10      	ldr	r3, [pc, #64]	; (1819c <RscpsSetParameter+0xa4>)
   1815c:	701a      	strb	r2, [r3, #0]
    rscpSmData.distance = value;
   1815e:	4a0f      	ldr	r2, [pc, #60]	; (1819c <RscpsSetParameter+0xa4>)
   18160:	683b      	ldr	r3, [r7, #0]
   18162:	6093      	str	r3, [r2, #8]
    break;
   18164:	e013      	b.n	1818e <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STATUS:
    if (value)
   18166:	683b      	ldr	r3, [r7, #0]
   18168:	2b00      	cmp	r3, #0
   1816a:	d007      	beq.n	1817c <RscpsSetParameter+0x84>
    {
      rscpSmData.flags |= (1 << RSCPS_WRS_FLAG_INDEX);
   1816c:	4b0b      	ldr	r3, [pc, #44]	; (1819c <RscpsSetParameter+0xa4>)
   1816e:	781b      	ldrb	r3, [r3, #0]
   18170:	f043 0304 	orr.w	r3, r3, #4
   18174:	b2da      	uxtb	r2, r3
   18176:	4b09      	ldr	r3, [pc, #36]	; (1819c <RscpsSetParameter+0xa4>)
   18178:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
    }
    break;
   1817a:	e008      	b.n	1818e <RscpsSetParameter+0x96>
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
   1817c:	4b07      	ldr	r3, [pc, #28]	; (1819c <RscpsSetParameter+0xa4>)
   1817e:	781b      	ldrb	r3, [r3, #0]
   18180:	f023 0304 	bic.w	r3, r3, #4
   18184:	b2da      	uxtb	r2, r3
   18186:	4b05      	ldr	r3, [pc, #20]	; (1819c <RscpsSetParameter+0xa4>)
   18188:	701a      	strb	r2, [r3, #0]
    break;
   1818a:	e000      	b.n	1818e <RscpsSetParameter+0x96>

  default:
    break;
   1818c:	bf00      	nop
  }
}
   1818e:	bf00      	nop
   18190:	370c      	adds	r7, #12
   18192:	46bd      	mov	sp, r7
   18194:	f85d 7b04 	ldr.w	r7, [sp], #4
   18198:	4770      	bx	lr
   1819a:	bf00      	nop
   1819c:	10009434 	.word	0x10009434

000181a0 <RscpsSendSpeedMeasurement>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSendSpeedMeasurement(dmConnId_t connId)
{
   181a0:	b580      	push	{r7, lr}
   181a2:	b088      	sub	sp, #32
   181a4:	af00      	add	r7, sp, #0
   181a6:	4603      	mov	r3, r0
   181a8:	71fb      	strb	r3, [r7, #7]
  int8_t i;
  uint16_t len;
  uint8_t msg[RSCPS_PM_MAX_LEN];
  uint8_t *p = msg;
   181aa:	f107 030c 	add.w	r3, r7, #12
   181ae:	61bb      	str	r3, [r7, #24]

  /* Add manditory parameters */
  UINT8_TO_BSTREAM(p, rscpSmData.flags);
   181b0:	69bb      	ldr	r3, [r7, #24]
   181b2:	1c5a      	adds	r2, r3, #1
   181b4:	61ba      	str	r2, [r7, #24]
   181b6:	4a3f      	ldr	r2, [pc, #252]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   181b8:	7812      	ldrb	r2, [r2, #0]
   181ba:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, rscpSmData.speed);
   181bc:	69bb      	ldr	r3, [r7, #24]
   181be:	1c5a      	adds	r2, r3, #1
   181c0:	61ba      	str	r2, [r7, #24]
   181c2:	4a3c      	ldr	r2, [pc, #240]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   181c4:	8852      	ldrh	r2, [r2, #2]
   181c6:	b2d2      	uxtb	r2, r2
   181c8:	701a      	strb	r2, [r3, #0]
   181ca:	69bb      	ldr	r3, [r7, #24]
   181cc:	1c5a      	adds	r2, r3, #1
   181ce:	61ba      	str	r2, [r7, #24]
   181d0:	4a38      	ldr	r2, [pc, #224]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   181d2:	8852      	ldrh	r2, [r2, #2]
   181d4:	0a12      	lsrs	r2, r2, #8
   181d6:	b292      	uxth	r2, r2
   181d8:	b2d2      	uxtb	r2, r2
   181da:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, rscpSmData.cadence);
   181dc:	69bb      	ldr	r3, [r7, #24]
   181de:	1c5a      	adds	r2, r3, #1
   181e0:	61ba      	str	r2, [r7, #24]
   181e2:	4a34      	ldr	r2, [pc, #208]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   181e4:	7912      	ldrb	r2, [r2, #4]
   181e6:	701a      	strb	r2, [r3, #0]

  /* Add optional parameters */
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   181e8:	2300      	movs	r3, #0
   181ea:	77fb      	strb	r3, [r7, #31]
   181ec:	e048      	b.n	18280 <RscpsSendSpeedMeasurement+0xe0>
  {
    if (rscpSmData.flags & (1 << i))
   181ee:	4b31      	ldr	r3, [pc, #196]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   181f0:	781b      	ldrb	r3, [r3, #0]
   181f2:	461a      	mov	r2, r3
   181f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
   181f8:	fa42 f303 	asr.w	r3, r2, r3
   181fc:	f003 0301 	and.w	r3, r3, #1
   18200:	2b00      	cmp	r3, #0
   18202:	d037      	beq.n	18274 <RscpsSendSpeedMeasurement+0xd4>
    {
      switch (i)
   18204:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18208:	2b00      	cmp	r3, #0
   1820a:	d002      	beq.n	18212 <RscpsSendSpeedMeasurement+0x72>
   1820c:	2b01      	cmp	r3, #1
   1820e:	d011      	beq.n	18234 <RscpsSendSpeedMeasurement+0x94>
      case RSCPS_TDP_FLAG_INDEX:
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
        break;

      default:
        break;
   18210:	e030      	b.n	18274 <RscpsSendSpeedMeasurement+0xd4>
        UINT16_TO_BSTREAM(p, rscpSmData.stride);
   18212:	69bb      	ldr	r3, [r7, #24]
   18214:	1c5a      	adds	r2, r3, #1
   18216:	61ba      	str	r2, [r7, #24]
   18218:	4a26      	ldr	r2, [pc, #152]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   1821a:	88d2      	ldrh	r2, [r2, #6]
   1821c:	b2d2      	uxtb	r2, r2
   1821e:	701a      	strb	r2, [r3, #0]
   18220:	69bb      	ldr	r3, [r7, #24]
   18222:	1c5a      	adds	r2, r3, #1
   18224:	61ba      	str	r2, [r7, #24]
   18226:	4a23      	ldr	r2, [pc, #140]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   18228:	88d2      	ldrh	r2, [r2, #6]
   1822a:	0a12      	lsrs	r2, r2, #8
   1822c:	b292      	uxth	r2, r2
   1822e:	b2d2      	uxtb	r2, r2
   18230:	701a      	strb	r2, [r3, #0]
        break;
   18232:	e01f      	b.n	18274 <RscpsSendSpeedMeasurement+0xd4>
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
   18234:	69bb      	ldr	r3, [r7, #24]
   18236:	1c5a      	adds	r2, r3, #1
   18238:	61ba      	str	r2, [r7, #24]
   1823a:	4a1e      	ldr	r2, [pc, #120]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   1823c:	6892      	ldr	r2, [r2, #8]
   1823e:	b2d2      	uxtb	r2, r2
   18240:	701a      	strb	r2, [r3, #0]
   18242:	69bb      	ldr	r3, [r7, #24]
   18244:	1c5a      	adds	r2, r3, #1
   18246:	61ba      	str	r2, [r7, #24]
   18248:	4a1a      	ldr	r2, [pc, #104]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   1824a:	6892      	ldr	r2, [r2, #8]
   1824c:	0a12      	lsrs	r2, r2, #8
   1824e:	b2d2      	uxtb	r2, r2
   18250:	701a      	strb	r2, [r3, #0]
   18252:	69bb      	ldr	r3, [r7, #24]
   18254:	1c5a      	adds	r2, r3, #1
   18256:	61ba      	str	r2, [r7, #24]
   18258:	4a16      	ldr	r2, [pc, #88]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   1825a:	6892      	ldr	r2, [r2, #8]
   1825c:	0c12      	lsrs	r2, r2, #16
   1825e:	b2d2      	uxtb	r2, r2
   18260:	701a      	strb	r2, [r3, #0]
   18262:	69bb      	ldr	r3, [r7, #24]
   18264:	1c5a      	adds	r2, r3, #1
   18266:	61ba      	str	r2, [r7, #24]
   18268:	4a12      	ldr	r2, [pc, #72]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   1826a:	6892      	ldr	r2, [r2, #8]
   1826c:	0e12      	lsrs	r2, r2, #24
   1826e:	b2d2      	uxtb	r2, r2
   18270:	701a      	strb	r2, [r3, #0]
        break;
   18272:	bf00      	nop
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   18274:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18278:	b2db      	uxtb	r3, r3
   1827a:	3301      	adds	r3, #1
   1827c:	b2db      	uxtb	r3, r3
   1827e:	77fb      	strb	r3, [r7, #31]
   18280:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18284:	2b02      	cmp	r3, #2
   18286:	ddb2      	ble.n	181ee <RscpsSendSpeedMeasurement+0x4e>
      }
    }
  }

  /* Calculate message length */
  len = (uint16_t) (p - msg);
   18288:	69ba      	ldr	r2, [r7, #24]
   1828a:	f107 030c 	add.w	r3, r7, #12
   1828e:	1ad3      	subs	r3, r2, r3
   18290:	82fb      	strh	r3, [r7, #22]

  /* Transmit notification */
  AttsHandleValueNtf(connId, RSCS_RSM_HDL, len, msg);
   18292:	f107 030c 	add.w	r3, r7, #12
   18296:	8afa      	ldrh	r2, [r7, #22]
   18298:	79f8      	ldrb	r0, [r7, #7]
   1829a:	f240 41a4 	movw	r1, #1188	; 0x4a4
   1829e:	f7f5 fa2b 	bl	d6f8 <AttsHandleValueNtf>

  /* Clear the measurement data */
  memset(&rscpSmData, 0, sizeof(rscpSmData));
   182a2:	220c      	movs	r2, #12
   182a4:	2100      	movs	r1, #0
   182a6:	4803      	ldr	r0, [pc, #12]	; (182b4 <RscpsSendSpeedMeasurement+0x114>)
   182a8:	f7f4 f858 	bl	c35c <memset>
}
   182ac:	bf00      	nop
   182ae:	3720      	adds	r7, #32
   182b0:	46bd      	mov	sp, r7
   182b2:	bd80      	pop	{r7, pc}
   182b4:	10009434 	.word	0x10009434

000182b8 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   182b8:	b480      	push	{r7}
   182ba:	b083      	sub	sp, #12
   182bc:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   182be:	4b0e      	ldr	r3, [pc, #56]	; (182f8 <getNextToken+0x40>)
   182c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   182c4:	1c5a      	adds	r2, r3, #1
   182c6:	b2d1      	uxtb	r1, r2
   182c8:	4a0b      	ldr	r2, [pc, #44]	; (182f8 <getNextToken+0x40>)
   182ca:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   182ce:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   182d0:	79fb      	ldrb	r3, [r7, #7]
   182d2:	2bff      	cmp	r3, #255	; 0xff
   182d4:	d108      	bne.n	182e8 <getNextToken+0x30>
  {
    token = secCb.token++;
   182d6:	4b08      	ldr	r3, [pc, #32]	; (182f8 <getNextToken+0x40>)
   182d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   182dc:	1c5a      	adds	r2, r3, #1
   182de:	b2d1      	uxtb	r1, r2
   182e0:	4a05      	ldr	r2, [pc, #20]	; (182f8 <getNextToken+0x40>)
   182e2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   182e6:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   182e8:	79fb      	ldrb	r3, [r7, #7]
}
   182ea:	4618      	mov	r0, r3
   182ec:	370c      	adds	r7, #12
   182ee:	46bd      	mov	sp, r7
   182f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   182f4:	4770      	bx	lr
   182f6:	bf00      	nop
   182f8:	10009440 	.word	0x10009440

000182fc <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   182fc:	b580      	push	{r7, lr}
   182fe:	b086      	sub	sp, #24
   18300:	af00      	add	r7, sp, #0
   18302:	60f8      	str	r0, [r7, #12]
   18304:	60b9      	str	r1, [r7, #8]
   18306:	4611      	mov	r1, r2
   18308:	461a      	mov	r2, r3
   1830a:	460b      	mov	r3, r1
   1830c:	71fb      	strb	r3, [r7, #7]
   1830e:	4613      	mov	r3, r2
   18310:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   18312:	2030      	movs	r0, #48	; 0x30
   18314:	f002 f8e5 	bl	1a4e2 <WsfMsgAlloc>
   18318:	6178      	str	r0, [r7, #20]
   1831a:	697b      	ldr	r3, [r7, #20]
   1831c:	2b00      	cmp	r3, #0
   1831e:	d01d      	beq.n	1835c <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   18320:	f7ff ffca 	bl	182b8 <getNextToken>
   18324:	4603      	mov	r3, r0
   18326:	461a      	mov	r2, r3
   18328:	697b      	ldr	r3, [r7, #20]
   1832a:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   1832c:	697b      	ldr	r3, [r7, #20]
   1832e:	88ba      	ldrh	r2, [r7, #4]
   18330:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18332:	697b      	ldr	r3, [r7, #20]
   18334:	f897 2020 	ldrb.w	r2, [r7, #32]
   18338:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   1833a:	697b      	ldr	r3, [r7, #20]
   1833c:	2200      	movs	r2, #0
   1833e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18342:	79fb      	ldrb	r3, [r7, #7]
   18344:	697a      	ldr	r2, [r7, #20]
   18346:	4619      	mov	r1, r3
   18348:	4807      	ldr	r0, [pc, #28]	; (18368 <SecAes+0x6c>)
   1834a:	f002 f906 	bl	1a55a <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   1834e:	68b9      	ldr	r1, [r7, #8]
   18350:	68f8      	ldr	r0, [r7, #12]
   18352:	f7fb ff8d 	bl	14270 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   18356:	697b      	ldr	r3, [r7, #20]
   18358:	78db      	ldrb	r3, [r3, #3]
   1835a:	e000      	b.n	1835e <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   1835c:	23ff      	movs	r3, #255	; 0xff
}
   1835e:	4618      	mov	r0, r3
   18360:	3718      	adds	r7, #24
   18362:	46bd      	mov	sp, r7
   18364:	bd80      	pop	{r7, pc}
   18366:	bf00      	nop
   18368:	10009460 	.word	0x10009460

0001836c <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   1836c:	b580      	push	{r7, lr}
   1836e:	b086      	sub	sp, #24
   18370:	af00      	add	r7, sp, #0
   18372:	60f8      	str	r0, [r7, #12]
   18374:	60b9      	str	r1, [r7, #8]
   18376:	4613      	mov	r3, r2
   18378:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   1837a:	68fb      	ldr	r3, [r7, #12]
   1837c:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   1837e:	68fb      	ldr	r3, [r7, #12]
   18380:	f103 0208 	add.w	r2, r3, #8
   18384:	697b      	ldr	r3, [r7, #20]
   18386:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   18388:	697b      	ldr	r3, [r7, #20]
   1838a:	685a      	ldr	r2, [r3, #4]
   1838c:	68bb      	ldr	r3, [r7, #8]
   1838e:	3305      	adds	r3, #5
   18390:	4619      	mov	r1, r3
   18392:	4610      	mov	r0, r2
   18394:	f7fb fbc7 	bl	13b26 <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   18398:	79fb      	ldrb	r3, [r7, #7]
   1839a:	6979      	ldr	r1, [r7, #20]
   1839c:	4618      	mov	r0, r3
   1839e:	f002 f8c4 	bl	1a52a <WsfMsgSend>
}
   183a2:	bf00      	nop
   183a4:	3718      	adds	r7, #24
   183a6:	46bd      	mov	sp, r7
   183a8:	bd80      	pop	{r7, pc}
	...

000183ac <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   183ac:	b480      	push	{r7}
   183ae:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   183b0:	4b03      	ldr	r3, [pc, #12]	; (183c0 <SecAesInit+0x14>)
   183b2:	4a04      	ldr	r2, [pc, #16]	; (183c4 <SecAesInit+0x18>)
   183b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
   183b6:	bf00      	nop
   183b8:	46bd      	mov	sp, r7
   183ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   183be:	4770      	bx	lr
   183c0:	10009440 	.word	0x10009440
   183c4:	0001836d 	.word	0x0001836d

000183c8 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   183c8:	b580      	push	{r7, lr}
   183ca:	b08a      	sub	sp, #40	; 0x28
   183cc:	af00      	add	r7, sp, #0
   183ce:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   183d0:	687b      	ldr	r3, [r7, #4]
   183d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   183d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   183d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183d8:	681b      	ldr	r3, [r3, #0]
   183da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   183dc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   183de:	4413      	add	r3, r2
   183e0:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   183e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   183e6:	b2da      	uxtb	r2, r3
   183e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   183ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   183ec:	b2db      	uxtb	r3, r3
   183ee:	1ad3      	subs	r3, r2, r3
   183f0:	b2db      	uxtb	r3, r3
   183f2:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   183f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
   183f8:	2b10      	cmp	r3, #16
   183fa:	dc2d      	bgt.n	18458 <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   183fc:	f107 030c 	add.w	r3, r7, #12
   18400:	2210      	movs	r2, #16
   18402:	6a39      	ldr	r1, [r7, #32]
   18404:	4618      	mov	r0, r3
   18406:	f7fb fbc9 	bl	13b9c <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   1840a:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1840e:	2b10      	cmp	r3, #16
   18410:	d014      	beq.n	1843c <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   18412:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18416:	f1c3 0310 	rsb	r3, r3, #16
   1841a:	461a      	mov	r2, r3
   1841c:	f107 030c 	add.w	r3, r7, #12
   18420:	2100      	movs	r1, #0
   18422:	4618      	mov	r0, r3
   18424:	f7f3 ff9a 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   18428:	f997 301f 	ldrsb.w	r3, [r7, #31]
   1842c:	f1c3 030f 	rsb	r3, r3, #15
   18430:	f107 0228 	add.w	r2, r7, #40	; 0x28
   18434:	4413      	add	r3, r2
   18436:	2280      	movs	r2, #128	; 0x80
   18438:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   1843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1843e:	f103 0214 	add.w	r2, r3, #20
   18442:	f107 030c 	add.w	r3, r7, #12
   18446:	4611      	mov	r1, r2
   18448:	4618      	mov	r0, r3
   1844a:	f7fb fb88 	bl	13b5e <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   1844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18450:	2202      	movs	r2, #2
   18452:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   18456:	e006      	b.n	18466 <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   18458:	f107 030c 	add.w	r3, r7, #12
   1845c:	2210      	movs	r2, #16
   1845e:	6a39      	ldr	r1, [r7, #32]
   18460:	4618      	mov	r0, r3
   18462:	f7fb fb9b 	bl	13b9c <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   18466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   1846a:	2b00      	cmp	r3, #0
   1846c:	d008      	beq.n	18480 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   1846e:	687b      	ldr	r3, [r7, #4]
   18470:	f103 0208 	add.w	r2, r3, #8
   18474:	f107 030c 	add.w	r3, r7, #12
   18478:	4611      	mov	r1, r2
   1847a:	4618      	mov	r0, r3
   1847c:	f7fb fb6f 	bl	13b5e <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   18480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18484:	3310      	adds	r3, #16
   18486:	b29a      	uxth	r2, r3
   18488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1848a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   1848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1848e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18492:	687a      	ldr	r2, [r7, #4]
   18494:	4619      	mov	r1, r3
   18496:	4807      	ldr	r0, [pc, #28]	; (184b4 <secCmacProcessBlock+0xec>)
   18498:	f002 f85f 	bl	1a55a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   1849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1849e:	3304      	adds	r3, #4
   184a0:	f107 020c 	add.w	r2, r7, #12
   184a4:	4611      	mov	r1, r2
   184a6:	4618      	mov	r0, r3
   184a8:	f7fb fee2 	bl	14270 <HciLeEncryptCmd>
}
   184ac:	bf00      	nop
   184ae:	3728      	adds	r7, #40	; 0x28
   184b0:	46bd      	mov	sp, r7
   184b2:	bd80      	pop	{r7, pc}
   184b4:	10009460 	.word	0x10009460

000184b8 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   184b8:	b580      	push	{r7, lr}
   184ba:	b088      	sub	sp, #32
   184bc:	af00      	add	r7, sp, #0
   184be:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   184c0:	687b      	ldr	r3, [r7, #4]
   184c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   184c4:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   184c6:	f107 030c 	add.w	r3, r7, #12
   184ca:	2210      	movs	r2, #16
   184cc:	2100      	movs	r1, #0
   184ce:	4618      	mov	r0, r3
   184d0:	f7f3 ff44 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   184d4:	69fb      	ldr	r3, [r7, #28]
   184d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   184da:	687a      	ldr	r2, [r7, #4]
   184dc:	4619      	mov	r1, r3
   184de:	4807      	ldr	r0, [pc, #28]	; (184fc <secCmacGenSubkey1+0x44>)
   184e0:	f002 f83b 	bl	1a55a <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   184e4:	69fb      	ldr	r3, [r7, #28]
   184e6:	3304      	adds	r3, #4
   184e8:	f107 020c 	add.w	r2, r7, #12
   184ec:	4611      	mov	r1, r2
   184ee:	4618      	mov	r0, r3
   184f0:	f7fb febe 	bl	14270 <HciLeEncryptCmd>
}
   184f4:	bf00      	nop
   184f6:	3720      	adds	r7, #32
   184f8:	46bd      	mov	sp, r7
   184fa:	bd80      	pop	{r7, pc}
   184fc:	10009460 	.word	0x10009460

00018500 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   18500:	b480      	push	{r7}
   18502:	b085      	sub	sp, #20
   18504:	af00      	add	r7, sp, #0
   18506:	6078      	str	r0, [r7, #4]
   18508:	460b      	mov	r3, r1
   1850a:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   1850c:	2300      	movs	r3, #0
   1850e:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18510:	2300      	movs	r3, #0
   18512:	73fb      	strb	r3, [r7, #15]
   18514:	e021      	b.n	1855a <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   18516:	7bfb      	ldrb	r3, [r7, #15]
   18518:	687a      	ldr	r2, [r7, #4]
   1851a:	4413      	add	r3, r2
   1851c:	781b      	ldrb	r3, [r3, #0]
   1851e:	461a      	mov	r2, r3
   18520:	78fb      	ldrb	r3, [r7, #3]
   18522:	f1c3 0308 	rsb	r3, r3, #8
   18526:	fa42 f303 	asr.w	r3, r2, r3
   1852a:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   1852c:	7bfb      	ldrb	r3, [r7, #15]
   1852e:	687a      	ldr	r2, [r7, #4]
   18530:	4413      	add	r3, r2
   18532:	7bfa      	ldrb	r2, [r7, #15]
   18534:	6879      	ldr	r1, [r7, #4]
   18536:	440a      	add	r2, r1
   18538:	7812      	ldrb	r2, [r2, #0]
   1853a:	4611      	mov	r1, r2
   1853c:	78fa      	ldrb	r2, [r7, #3]
   1853e:	fa01 f202 	lsl.w	r2, r1, r2
   18542:	b251      	sxtb	r1, r2
   18544:	f997 200e 	ldrsb.w	r2, [r7, #14]
   18548:	430a      	orrs	r2, r1
   1854a:	b252      	sxtb	r2, r2
   1854c:	b2d2      	uxtb	r2, r2
   1854e:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   18550:	7b7b      	ldrb	r3, [r7, #13]
   18552:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18554:	7bfb      	ldrb	r3, [r7, #15]
   18556:	3301      	adds	r3, #1
   18558:	73fb      	strb	r3, [r7, #15]
   1855a:	7bfb      	ldrb	r3, [r7, #15]
   1855c:	2b0f      	cmp	r3, #15
   1855e:	d9da      	bls.n	18516 <secCmacKeyShift+0x16>
  }

  return prevBits;
   18560:	7bbb      	ldrb	r3, [r7, #14]
}
   18562:	4618      	mov	r0, r3
   18564:	3714      	adds	r7, #20
   18566:	46bd      	mov	sp, r7
   18568:	f85d 7b04 	ldr.w	r7, [sp], #4
   1856c:	4770      	bx	lr

0001856e <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   1856e:	b580      	push	{r7, lr}
   18570:	b084      	sub	sp, #16
   18572:	af00      	add	r7, sp, #0
   18574:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   18576:	687b      	ldr	r3, [r7, #4]
   18578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1857a:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   1857c:	68fb      	ldr	r3, [r7, #12]
   1857e:	f103 0214 	add.w	r2, r3, #20
   18582:	687b      	ldr	r3, [r7, #4]
   18584:	3308      	adds	r3, #8
   18586:	4619      	mov	r1, r3
   18588:	4610      	mov	r0, r2
   1858a:	f7fb facc 	bl	13b26 <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   1858e:	68fb      	ldr	r3, [r7, #12]
   18590:	3314      	adds	r3, #20
   18592:	2101      	movs	r1, #1
   18594:	4618      	mov	r0, r3
   18596:	f7ff ffb3 	bl	18500 <secCmacKeyShift>
   1859a:	4603      	mov	r3, r0
   1859c:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   1859e:	7afb      	ldrb	r3, [r7, #11]
   185a0:	2b00      	cmp	r3, #0
   185a2:	d007      	beq.n	185b4 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   185a4:	68fb      	ldr	r3, [r7, #12]
   185a6:	7d1b      	ldrb	r3, [r3, #20]
   185a8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   185ac:	43db      	mvns	r3, r3
   185ae:	b2da      	uxtb	r2, r3
   185b0:	68fb      	ldr	r3, [r7, #12]
   185b2:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   185b4:	68fb      	ldr	r3, [r7, #12]
   185b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   185b8:	f003 030f 	and.w	r3, r3, #15
   185bc:	b29b      	uxth	r3, r3
   185be:	2b00      	cmp	r3, #0
   185c0:	d012      	beq.n	185e8 <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   185c2:	68fb      	ldr	r3, [r7, #12]
   185c4:	3314      	adds	r3, #20
   185c6:	2101      	movs	r1, #1
   185c8:	4618      	mov	r0, r3
   185ca:	f7ff ff99 	bl	18500 <secCmacKeyShift>
   185ce:	4603      	mov	r3, r0
   185d0:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   185d2:	7afb      	ldrb	r3, [r7, #11]
   185d4:	2b00      	cmp	r3, #0
   185d6:	d007      	beq.n	185e8 <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   185d8:	68fb      	ldr	r3, [r7, #12]
   185da:	7d1b      	ldrb	r3, [r3, #20]
   185dc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   185e0:	43db      	mvns	r3, r3
   185e2:	b2da      	uxtb	r2, r3
   185e4:	68fb      	ldr	r3, [r7, #12]
   185e6:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   185e8:	68fb      	ldr	r3, [r7, #12]
   185ea:	2201      	movs	r2, #1
   185ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   185f0:	6878      	ldr	r0, [r7, #4]
   185f2:	f7ff fee9 	bl	183c8 <secCmacProcessBlock>
}
   185f6:	bf00      	nop
   185f8:	3710      	adds	r7, #16
   185fa:	46bd      	mov	sp, r7
   185fc:	bd80      	pop	{r7, pc}

000185fe <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   185fe:	b580      	push	{r7, lr}
   18600:	b084      	sub	sp, #16
   18602:	af00      	add	r7, sp, #0
   18604:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   18606:	687b      	ldr	r3, [r7, #4]
   18608:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   1860a:	687b      	ldr	r3, [r7, #4]
   1860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1860e:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   18610:	687b      	ldr	r3, [r7, #4]
   18612:	3308      	adds	r3, #8
   18614:	2110      	movs	r1, #16
   18616:	4618      	mov	r0, r3
   18618:	f7fb fae9 	bl	13bee <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   1861c:	687b      	ldr	r3, [r7, #4]
   1861e:	f103 0208 	add.w	r2, r3, #8
   18622:	68fb      	ldr	r3, [r7, #12]
   18624:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   18626:	68bb      	ldr	r3, [r7, #8]
   18628:	681b      	ldr	r3, [r3, #0]
   1862a:	4618      	mov	r0, r3
   1862c:	f001 ff0a 	bl	1a444 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   18630:	68bb      	ldr	r3, [r7, #8]
   18632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18636:	68f9      	ldr	r1, [r7, #12]
   18638:	4618      	mov	r0, r3
   1863a:	f001 ff76 	bl	1a52a <WsfMsgSend>
}
   1863e:	bf00      	nop
   18640:	3710      	adds	r7, #16
   18642:	46bd      	mov	sp, r7
   18644:	bd80      	pop	{r7, pc}

00018646 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18646:	b580      	push	{r7, lr}
   18648:	b086      	sub	sp, #24
   1864a:	af00      	add	r7, sp, #0
   1864c:	60f8      	str	r0, [r7, #12]
   1864e:	60b9      	str	r1, [r7, #8]
   18650:	4613      	mov	r3, r2
   18652:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   18654:	68fb      	ldr	r3, [r7, #12]
   18656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18658:	617b      	str	r3, [r7, #20]

  if (pCmac)
   1865a:	697b      	ldr	r3, [r7, #20]
   1865c:	2b00      	cmp	r3, #0
   1865e:	d01e      	beq.n	1869e <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   18660:	68fb      	ldr	r3, [r7, #12]
   18662:	f103 0208 	add.w	r2, r3, #8
   18666:	68bb      	ldr	r3, [r7, #8]
   18668:	3305      	adds	r3, #5
   1866a:	4619      	mov	r1, r3
   1866c:	4610      	mov	r0, r2
   1866e:	f7fb fa5a 	bl	13b26 <Calc128Cpy>

    switch (pCmac->state)
   18672:	697b      	ldr	r3, [r7, #20]
   18674:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   18678:	2b01      	cmp	r3, #1
   1867a:	d008      	beq.n	1868e <SecCmacHciCback+0x48>
   1867c:	2b02      	cmp	r3, #2
   1867e:	d00a      	beq.n	18696 <SecCmacHciCback+0x50>
   18680:	2b00      	cmp	r3, #0
   18682:	d000      	beq.n	18686 <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   18684:	e00b      	b.n	1869e <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   18686:	68f8      	ldr	r0, [r7, #12]
   18688:	f7ff ff71 	bl	1856e <secCmacGenSubkey2>
      break;
   1868c:	e007      	b.n	1869e <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   1868e:	68f8      	ldr	r0, [r7, #12]
   18690:	f7ff fe9a 	bl	183c8 <secCmacProcessBlock>
      break;
   18694:	e003      	b.n	1869e <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   18696:	68f8      	ldr	r0, [r7, #12]
   18698:	f7ff ffb1 	bl	185fe <secCmacComplete>
      break;
   1869c:	bf00      	nop
}
   1869e:	bf00      	nop
   186a0:	3718      	adds	r7, #24
   186a2:	46bd      	mov	sp, r7
   186a4:	bd80      	pop	{r7, pc}
	...

000186a8 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   186a8:	b580      	push	{r7, lr}
   186aa:	b088      	sub	sp, #32
   186ac:	af00      	add	r7, sp, #0
   186ae:	60f8      	str	r0, [r7, #12]
   186b0:	60b9      	str	r1, [r7, #8]
   186b2:	4611      	mov	r1, r2
   186b4:	461a      	mov	r2, r3
   186b6:	460b      	mov	r3, r1
   186b8:	71fb      	strb	r3, [r7, #7]
   186ba:	4613      	mov	r3, r2
   186bc:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   186be:	235c      	movs	r3, #92	; 0x5c
   186c0:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   186c2:	8bfb      	ldrh	r3, [r7, #30]
   186c4:	4618      	mov	r0, r3
   186c6:	f001 ff0c 	bl	1a4e2 <WsfMsgAlloc>
   186ca:	61b8      	str	r0, [r7, #24]
   186cc:	69bb      	ldr	r3, [r7, #24]
   186ce:	2b00      	cmp	r3, #0
   186d0:	d038      	beq.n	18744 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   186d2:	69bb      	ldr	r3, [r7, #24]
   186d4:	3330      	adds	r3, #48	; 0x30
   186d6:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   186d8:	69bb      	ldr	r3, [r7, #24]
   186da:	697a      	ldr	r2, [r7, #20]
   186dc:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   186de:	69bb      	ldr	r3, [r7, #24]
   186e0:	2201      	movs	r2, #1
   186e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   186e6:	4b1a      	ldr	r3, [pc, #104]	; (18750 <SecCmac+0xa8>)
   186e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   186ec:	1c5a      	adds	r2, r3, #1
   186ee:	b2d1      	uxtb	r1, r2
   186f0:	4a17      	ldr	r2, [pc, #92]	; (18750 <SecCmac+0xa8>)
   186f2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   186f6:	69ba      	ldr	r2, [r7, #24]
   186f8:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   186fa:	69bb      	ldr	r3, [r7, #24]
   186fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   186fe:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18700:	69bb      	ldr	r3, [r7, #24]
   18702:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   18706:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   18708:	697b      	ldr	r3, [r7, #20]
   1870a:	68ba      	ldr	r2, [r7, #8]
   1870c:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   1870e:	79fb      	ldrb	r3, [r7, #7]
   18710:	b29a      	uxth	r2, r3
   18712:	697b      	ldr	r3, [r7, #20]
   18714:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   18716:	697b      	ldr	r3, [r7, #20]
   18718:	2200      	movs	r2, #0
   1871a:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   1871c:	697b      	ldr	r3, [r7, #20]
   1871e:	79ba      	ldrb	r2, [r7, #6]
   18720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   18724:	697b      	ldr	r3, [r7, #20]
   18726:	2200      	movs	r2, #0
   18728:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   1872c:	697b      	ldr	r3, [r7, #20]
   1872e:	3304      	adds	r3, #4
   18730:	2210      	movs	r2, #16
   18732:	68f9      	ldr	r1, [r7, #12]
   18734:	4618      	mov	r0, r3
   18736:	f7fb fa31 	bl	13b9c <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   1873a:	69b8      	ldr	r0, [r7, #24]
   1873c:	f7ff febc 	bl	184b8 <secCmacGenSubkey1>

    return TRUE;
   18740:	2301      	movs	r3, #1
   18742:	e000      	b.n	18746 <SecCmac+0x9e>
  }

  return FALSE;
   18744:	2300      	movs	r3, #0
}
   18746:	4618      	mov	r0, r3
   18748:	3720      	adds	r7, #32
   1874a:	46bd      	mov	sp, r7
   1874c:	bd80      	pop	{r7, pc}
   1874e:	bf00      	nop
   18750:	10009440 	.word	0x10009440

00018754 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   18754:	b480      	push	{r7}
   18756:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   18758:	4b03      	ldr	r3, [pc, #12]	; (18768 <SecCmacInit+0x14>)
   1875a:	4a04      	ldr	r2, [pc, #16]	; (1876c <SecCmacInit+0x18>)
   1875c:	631a      	str	r2, [r3, #48]	; 0x30
}
   1875e:	bf00      	nop
   18760:	46bd      	mov	sp, r7
   18762:	f85d 7b04 	ldr.w	r7, [sp], #4
   18766:	4770      	bx	lr
   18768:	10009440 	.word	0x10009440
   1876c:	00018647 	.word	0x00018647

00018770 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18770:	b580      	push	{r7, lr}
   18772:	b086      	sub	sp, #24
   18774:	af00      	add	r7, sp, #0
   18776:	60f8      	str	r0, [r7, #12]
   18778:	60b9      	str	r1, [r7, #8]
   1877a:	4613      	mov	r3, r2
   1877c:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   1877e:	68fb      	ldr	r3, [r7, #12]
   18780:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   18782:	68bb      	ldr	r3, [r7, #8]
   18784:	789b      	ldrb	r3, [r3, #2]
   18786:	2b25      	cmp	r3, #37	; 0x25
   18788:	d11b      	bne.n	187c2 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   1878a:	697b      	ldr	r3, [r7, #20]
   1878c:	1d18      	adds	r0, r3, #4
   1878e:	68bb      	ldr	r3, [r7, #8]
   18790:	3305      	adds	r3, #5
   18792:	2220      	movs	r2, #32
   18794:	4619      	mov	r1, r3
   18796:	f7fb fa01 	bl	13b9c <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   1879a:	697b      	ldr	r3, [r7, #20]
   1879c:	f103 0024 	add.w	r0, r3, #36	; 0x24
   187a0:	68bb      	ldr	r3, [r7, #8]
   187a2:	3305      	adds	r3, #5
   187a4:	3320      	adds	r3, #32
   187a6:	2220      	movs	r2, #32
   187a8:	4619      	mov	r1, r3
   187aa:	f7fb f9f7 	bl	13b9c <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   187ae:	68bb      	ldr	r3, [r7, #8]
   187b0:	791a      	ldrb	r2, [r3, #4]
   187b2:	697b      	ldr	r3, [r7, #20]
   187b4:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   187b6:	79fb      	ldrb	r3, [r7, #7]
   187b8:	6979      	ldr	r1, [r7, #20]
   187ba:	4618      	mov	r0, r3
   187bc:	f001 feb5 	bl	1a52a <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   187c0:	e01f      	b.n	18802 <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   187c2:	68bb      	ldr	r3, [r7, #8]
   187c4:	789b      	ldrb	r3, [r3, #2]
   187c6:	2b26      	cmp	r3, #38	; 0x26
   187c8:	d11b      	bne.n	18802 <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   187ca:	697b      	ldr	r3, [r7, #20]
   187cc:	1d18      	adds	r0, r3, #4
   187ce:	68bb      	ldr	r3, [r7, #8]
   187d0:	3305      	adds	r3, #5
   187d2:	2220      	movs	r2, #32
   187d4:	4619      	mov	r1, r3
   187d6:	f7fb f9e1 	bl	13b9c <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   187da:	68bb      	ldr	r3, [r7, #8]
   187dc:	791b      	ldrb	r3, [r3, #4]
   187de:	2b00      	cmp	r3, #0
   187e0:	d006      	beq.n	187f0 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   187e2:	697b      	ldr	r3, [r7, #20]
   187e4:	3304      	adds	r3, #4
   187e6:	2220      	movs	r2, #32
   187e8:	21ff      	movs	r1, #255	; 0xff
   187ea:	4618      	mov	r0, r3
   187ec:	f7f3 fdb6 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   187f0:	68bb      	ldr	r3, [r7, #8]
   187f2:	791a      	ldrb	r2, [r3, #4]
   187f4:	697b      	ldr	r3, [r7, #20]
   187f6:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   187f8:	79fb      	ldrb	r3, [r7, #7]
   187fa:	6979      	ldr	r1, [r7, #20]
   187fc:	4618      	mov	r0, r3
   187fe:	f001 fe94 	bl	1a52a <WsfMsgSend>
}
   18802:	bf00      	nop
   18804:	3718      	adds	r7, #24
   18806:	46bd      	mov	sp, r7
   18808:	bd80      	pop	{r7, pc}
	...

0001880c <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   1880c:	b580      	push	{r7, lr}
   1880e:	b084      	sub	sp, #16
   18810:	af00      	add	r7, sp, #0
   18812:	4603      	mov	r3, r0
   18814:	71fb      	strb	r3, [r7, #7]
   18816:	460b      	mov	r3, r1
   18818:	80bb      	strh	r3, [r7, #4]
   1881a:	4613      	mov	r3, r2
   1881c:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   1881e:	2394      	movs	r3, #148	; 0x94
   18820:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18822:	89fb      	ldrh	r3, [r7, #14]
   18824:	4618      	mov	r0, r3
   18826:	f001 fe5c 	bl	1a4e2 <WsfMsgAlloc>
   1882a:	60b8      	str	r0, [r7, #8]
   1882c:	68bb      	ldr	r3, [r7, #8]
   1882e:	2b00      	cmp	r3, #0
   18830:	d013      	beq.n	1885a <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   18832:	68bb      	ldr	r3, [r7, #8]
   18834:	88ba      	ldrh	r2, [r7, #4]
   18836:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18838:	68bb      	ldr	r3, [r7, #8]
   1883a:	79ba      	ldrb	r2, [r7, #6]
   1883c:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   1883e:	68bb      	ldr	r3, [r7, #8]
   18840:	2202      	movs	r2, #2
   18842:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18846:	79fb      	ldrb	r3, [r7, #7]
   18848:	68ba      	ldr	r2, [r7, #8]
   1884a:	4619      	mov	r1, r3
   1884c:	4805      	ldr	r0, [pc, #20]	; (18864 <SecEccGenKey+0x58>)
   1884e:	f001 fe84 	bl	1a55a <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   18852:	f7fb fcc3 	bl	141dc <HciLeReadLocalP256PubKey>

    return TRUE;
   18856:	2301      	movs	r3, #1
   18858:	e000      	b.n	1885c <SecEccGenKey+0x50>
  }

  return FALSE;
   1885a:	2300      	movs	r3, #0
}
   1885c:	4618      	mov	r0, r3
   1885e:	3710      	adds	r7, #16
   18860:	46bd      	mov	sp, r7
   18862:	bd80      	pop	{r7, pc}
   18864:	10009460 	.word	0x10009460

00018868 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   18868:	b580      	push	{r7, lr}
   1886a:	b09e      	sub	sp, #120	; 0x78
   1886c:	af00      	add	r7, sp, #0
   1886e:	6078      	str	r0, [r7, #4]
   18870:	4608      	mov	r0, r1
   18872:	4611      	mov	r1, r2
   18874:	461a      	mov	r2, r3
   18876:	4603      	mov	r3, r0
   18878:	70fb      	strb	r3, [r7, #3]
   1887a:	460b      	mov	r3, r1
   1887c:	803b      	strh	r3, [r7, #0]
   1887e:	4613      	mov	r3, r2
   18880:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   18882:	2394      	movs	r3, #148	; 0x94
   18884:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18888:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   1888c:	4618      	mov	r0, r3
   1888e:	f001 fe28 	bl	1a4e2 <WsfMsgAlloc>
   18892:	6738      	str	r0, [r7, #112]	; 0x70
   18894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18896:	2b00      	cmp	r3, #0
   18898:	d060      	beq.n	1895c <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   1889a:	6879      	ldr	r1, [r7, #4]
   1889c:	f107 030c 	add.w	r3, r7, #12
   188a0:	2220      	movs	r2, #32
   188a2:	4618      	mov	r0, r3
   188a4:	f7fb f97a 	bl	13b9c <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	f103 0120 	add.w	r1, r3, #32
   188ae:	f107 030c 	add.w	r3, r7, #12
   188b2:	3320      	adds	r3, #32
   188b4:	2220      	movs	r2, #32
   188b6:	4618      	mov	r0, r3
   188b8:	f7fb f970 	bl	13b9c <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   188bc:	4b2a      	ldr	r3, [pc, #168]	; (18968 <SecEccGenSharedSecret+0x100>)
   188be:	68db      	ldr	r3, [r3, #12]
   188c0:	b2db      	uxtb	r3, r3
   188c2:	2b21      	cmp	r3, #33	; 0x21
   188c4:	d02e      	beq.n	18924 <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   188c6:	f007 fdc3 	bl	20450 <uECC_secp256r1>
   188ca:	4602      	mov	r2, r0
   188cc:	f107 030c 	add.w	r3, r7, #12
   188d0:	4611      	mov	r1, r2
   188d2:	4618      	mov	r0, r3
   188d4:	f007 fe36 	bl	20544 <uECC_valid_public_key>
   188d8:	4603      	mov	r3, r0
   188da:	2b00      	cmp	r3, #0
   188dc:	d122      	bne.n	18924 <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   188de:	6f38      	ldr	r0, [r7, #112]	; 0x70
   188e0:	f001 fe16 	bl	1a510 <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   188e4:	2064      	movs	r0, #100	; 0x64
   188e6:	f001 fdfc 	bl	1a4e2 <WsfMsgAlloc>
   188ea:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   188ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   188ee:	2b00      	cmp	r3, #0
   188f0:	d016      	beq.n	18920 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   188f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   188f4:	3304      	adds	r3, #4
   188f6:	2220      	movs	r2, #32
   188f8:	21ff      	movs	r1, #255	; 0xff
   188fa:	4618      	mov	r0, r3
   188fc:	f7f3 fd2e 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   18900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18902:	78ba      	ldrb	r2, [r7, #2]
   18904:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   18906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18908:	883a      	ldrh	r2, [r7, #0]
   1890a:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   1890c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1890e:	2200      	movs	r2, #0
   18910:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   18912:	78fb      	ldrb	r3, [r7, #3]
   18914:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   18916:	4618      	mov	r0, r3
   18918:	f001 fe07 	bl	1a52a <WsfMsgSend>
          return TRUE;
   1891c:	2301      	movs	r3, #1
   1891e:	e01e      	b.n	1895e <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   18920:	2300      	movs	r3, #0
   18922:	e01c      	b.n	1895e <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   18924:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18926:	883a      	ldrh	r2, [r7, #0]
   18928:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1892a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1892c:	78ba      	ldrb	r2, [r7, #2]
   1892e:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   18930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18932:	2202      	movs	r2, #2
   18934:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18938:	78fb      	ldrb	r3, [r7, #3]
   1893a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1893c:	4619      	mov	r1, r3
   1893e:	480b      	ldr	r0, [pc, #44]	; (1896c <SecEccGenSharedSecret+0x104>)
   18940:	f001 fe0b 	bl	1a55a <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   18944:	f107 030c 	add.w	r3, r7, #12
   18948:	f103 0220 	add.w	r2, r3, #32
   1894c:	f107 030c 	add.w	r3, r7, #12
   18950:	4611      	mov	r1, r2
   18952:	4618      	mov	r0, r3
   18954:	f7fb fc55 	bl	14202 <HciLeGenerateDHKey>

    return TRUE;
   18958:	2301      	movs	r3, #1
   1895a:	e000      	b.n	1895e <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   1895c:	2300      	movs	r3, #0
}
   1895e:	4618      	mov	r0, r3
   18960:	3778      	adds	r7, #120	; 0x78
   18962:	46bd      	mov	sp, r7
   18964:	bd80      	pop	{r7, pc}
   18966:	bf00      	nop
   18968:	40020000 	.word	0x40020000
   1896c:	10009460 	.word	0x10009460

00018970 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   18970:	b480      	push	{r7}
   18972:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   18974:	4b03      	ldr	r3, [pc, #12]	; (18984 <SecEccInit+0x14>)
   18976:	4a04      	ldr	r2, [pc, #16]	; (18988 <SecEccInit+0x18>)
   18978:	635a      	str	r2, [r3, #52]	; 0x34
}
   1897a:	bf00      	nop
   1897c:	46bd      	mov	sp, r7
   1897e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18982:	4770      	bx	lr
   18984:	10009440 	.word	0x10009440
   18988:	00018771 	.word	0x00018771

0001898c <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1898c:	b580      	push	{r7, lr}
   1898e:	b084      	sub	sp, #16
   18990:	af00      	add	r7, sp, #0
   18992:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   18994:	2300      	movs	r3, #0
   18996:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   18998:	2300      	movs	r3, #0
   1899a:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   1899c:	687b      	ldr	r3, [r7, #4]
   1899e:	789b      	ldrb	r3, [r3, #2]
   189a0:	2b1c      	cmp	r3, #28
   189a2:	d10c      	bne.n	189be <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   189a4:	2218      	movs	r2, #24
   189a6:	492e      	ldr	r1, [pc, #184]	; (18a60 <secHciCback+0xd4>)
   189a8:	482e      	ldr	r0, [pc, #184]	; (18a64 <secHciCback+0xd8>)
   189aa:	f7f3 fc73 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   189ae:	687b      	ldr	r3, [r7, #4]
   189b0:	3305      	adds	r3, #5
   189b2:	2208      	movs	r2, #8
   189b4:	4619      	mov	r1, r3
   189b6:	482a      	ldr	r0, [pc, #168]	; (18a60 <secHciCback+0xd4>)
   189b8:	f7f3 fbd2 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   189bc:	e04b      	b.n	18a56 <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   189be:	687b      	ldr	r3, [r7, #4]
   189c0:	789b      	ldrb	r3, [r3, #2]
   189c2:	2b1b      	cmp	r3, #27
   189c4:	d007      	beq.n	189d6 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   189c6:	687b      	ldr	r3, [r7, #4]
   189c8:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   189ca:	2b25      	cmp	r3, #37	; 0x25
   189cc:	d003      	beq.n	189d6 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   189ce:	687b      	ldr	r3, [r7, #4]
   189d0:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   189d2:	2b26      	cmp	r3, #38	; 0x26
   189d4:	d128      	bne.n	18a28 <secHciCback+0x9c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   189d6:	f107 030b 	add.w	r3, r7, #11
   189da:	4619      	mov	r1, r3
   189dc:	4822      	ldr	r0, [pc, #136]	; (18a68 <secHciCback+0xdc>)
   189de:	f001 fdd1 	bl	1a584 <WsfMsgDeq>
   189e2:	60f8      	str	r0, [r7, #12]
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	2b00      	cmp	r3, #0
   189e8:	d01a      	beq.n	18a20 <secHciCback+0x94>
      if (secCb.hciCbackTbl[pBuf->type])
   189ea:	68fb      	ldr	r3, [r7, #12]
   189ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   189f0:	4a1b      	ldr	r2, [pc, #108]	; (18a60 <secHciCback+0xd4>)
   189f2:	330a      	adds	r3, #10
   189f4:	009b      	lsls	r3, r3, #2
   189f6:	4413      	add	r3, r2
   189f8:	685b      	ldr	r3, [r3, #4]
   189fa:	2b00      	cmp	r3, #0
   189fc:	d00c      	beq.n	18a18 <secHciCback+0x8c>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   189fe:	68fb      	ldr	r3, [r7, #12]
   18a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   18a04:	4a16      	ldr	r2, [pc, #88]	; (18a60 <secHciCback+0xd4>)
   18a06:	330a      	adds	r3, #10
   18a08:	009b      	lsls	r3, r3, #2
   18a0a:	4413      	add	r3, r2
   18a0c:	685b      	ldr	r3, [r3, #4]
   18a0e:	7afa      	ldrb	r2, [r7, #11]
   18a10:	6879      	ldr	r1, [r7, #4]
   18a12:	68f8      	ldr	r0, [r7, #12]
   18a14:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18a16:	e01e      	b.n	18a56 <secHciCback+0xca>
        WSF_TRACE_WARN0("WSF sec not registered");
   18a18:	4814      	ldr	r0, [pc, #80]	; (18a6c <secHciCback+0xe0>)
   18a1a:	f000 fa17 	bl	18e4c <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18a1e:	e01a      	b.n	18a56 <secHciCback+0xca>
      WSF_TRACE_WARN0("WSF sec queue empty!");
   18a20:	4813      	ldr	r0, [pc, #76]	; (18a70 <secHciCback+0xe4>)
   18a22:	f000 fa13 	bl	18e4c <WsfTrace>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18a26:	e016      	b.n	18a56 <secHciCback+0xca>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   18a28:	687b      	ldr	r3, [r7, #4]
   18a2a:	789b      	ldrb	r3, [r3, #2]
   18a2c:	2b14      	cmp	r3, #20
   18a2e:	d112      	bne.n	18a56 <secHciCback+0xca>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18a30:	e002      	b.n	18a38 <secHciCback+0xac>
      WsfMsgFree(pBuf);
   18a32:	68f8      	ldr	r0, [r7, #12]
   18a34:	f001 fd6c 	bl	1a510 <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   18a38:	f107 030b 	add.w	r3, r7, #11
   18a3c:	4619      	mov	r1, r3
   18a3e:	480a      	ldr	r0, [pc, #40]	; (18a68 <secHciCback+0xdc>)
   18a40:	f001 fda0 	bl	1a584 <WsfMsgDeq>
   18a44:	60f8      	str	r0, [r7, #12]
   18a46:	68fb      	ldr	r3, [r7, #12]
   18a48:	2b00      	cmp	r3, #0
   18a4a:	d1f2      	bne.n	18a32 <secHciCback+0xa6>
    secCb.token = 0;
   18a4c:	4b04      	ldr	r3, [pc, #16]	; (18a60 <secHciCback+0xd4>)
   18a4e:	2200      	movs	r2, #0
   18a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   18a54:	e7ff      	b.n	18a56 <secHciCback+0xca>
   18a56:	bf00      	nop
   18a58:	3710      	adds	r7, #16
   18a5a:	46bd      	mov	sp, r7
   18a5c:	bd80      	pop	{r7, pc}
   18a5e:	bf00      	nop
   18a60:	10009440 	.word	0x10009440
   18a64:	10009448 	.word	0x10009448
   18a68:	10009460 	.word	0x10009460
   18a6c:	000227e8 	.word	0x000227e8
   18a70:	00022800 	.word	0x00022800

00018a74 <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   18a74:	b580      	push	{r7, lr}
   18a76:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   18a78:	4b07      	ldr	r3, [pc, #28]	; (18a98 <SecInit+0x24>)
   18a7a:	2200      	movs	r2, #0
   18a7c:	621a      	str	r2, [r3, #32]
   18a7e:	4b06      	ldr	r3, [pc, #24]	; (18a98 <SecInit+0x24>)
   18a80:	2200      	movs	r2, #0
   18a82:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   18a84:	4b04      	ldr	r3, [pc, #16]	; (18a98 <SecInit+0x24>)
   18a86:	2200      	movs	r2, #0
   18a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   18a8c:	4803      	ldr	r0, [pc, #12]	; (18a9c <SecInit+0x28>)
   18a8e:	f001 ff9d 	bl	1a9cc <HciSecRegister>
}
   18a92:	bf00      	nop
   18a94:	bd80      	pop	{r7, pc}
   18a96:	bf00      	nop
   18a98:	10009440 	.word	0x10009440
   18a9c:	0001898d 	.word	0x0001898d

00018aa0 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   18aa0:	b580      	push	{r7, lr}
   18aa2:	b084      	sub	sp, #16
   18aa4:	af00      	add	r7, sp, #0
   18aa6:	6078      	str	r0, [r7, #4]
   18aa8:	460b      	mov	r3, r1
   18aaa:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   18aac:	78fb      	ldrb	r3, [r7, #3]
   18aae:	3307      	adds	r3, #7
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	da00      	bge.n	18ab6 <SecRand+0x16>
   18ab4:	3307      	adds	r3, #7
   18ab6:	10db      	asrs	r3, r3, #3
   18ab8:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   18aba:	78fb      	ldrb	r3, [r7, #3]
   18abc:	461a      	mov	r2, r3
   18abe:	4909      	ldr	r1, [pc, #36]	; (18ae4 <SecRand+0x44>)
   18ac0:	6878      	ldr	r0, [r7, #4]
   18ac2:	f7f3 fb4d 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   18ac6:	e001      	b.n	18acc <SecRand+0x2c>
  {
    HciLeRandCmd();
   18ac8:	f7fb fc49 	bl	1435e <HciLeRandCmd>
  while (count--)
   18acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
   18ad0:	b2da      	uxtb	r2, r3
   18ad2:	3a01      	subs	r2, #1
   18ad4:	b2d2      	uxtb	r2, r2
   18ad6:	73fa      	strb	r2, [r7, #15]
   18ad8:	2b00      	cmp	r3, #0
   18ada:	d1f5      	bne.n	18ac8 <SecRand+0x28>
  }
}
   18adc:	bf00      	nop
   18ade:	3710      	adds	r7, #16
   18ae0:	46bd      	mov	sp, r7
   18ae2:	bd80      	pop	{r7, pc}
   18ae4:	10009440 	.word	0x10009440

00018ae8 <WsfAssert>:
 *  \param  pFile   Name of file originating assert.
 *  \param  line    Line number of assert statement.
 */
/*************************************************************************************************/
void WsfAssert(const char *pFile, uint16_t line)
{
   18ae8:	b480      	push	{r7}
   18aea:	b085      	sub	sp, #20
   18aec:	af00      	add	r7, sp, #0
   18aee:	6078      	str	r0, [r7, #4]
   18af0:	460b      	mov	r3, r1
   18af2:	807b      	strh	r3, [r7, #2]
  volatile uint8_t escape=0;
   18af4:	2300      	movs	r3, #0
   18af6:	73fb      	strb	r3, [r7, #15]
  {
    /*
     *  However, you can exit with a debugger by setting variable 'escape'.
     *  Handy to see where the assert happened if you cannot view the call stack.
    */
    if (escape)
   18af8:	7bfb      	ldrb	r3, [r7, #15]
   18afa:	b2db      	uxtb	r3, r3
   18afc:	2b00      	cmp	r3, #0
   18afe:	d100      	bne.n	18b02 <WsfAssert+0x1a>
   18b00:	e7fa      	b.n	18af8 <WsfAssert+0x10>
    {
      break;
   18b02:	bf00      	nop
    }
  }
}
   18b04:	bf00      	nop
   18b06:	3714      	adds	r7, #20
   18b08:	46bd      	mov	sp, r7
   18b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b0e:	4770      	bx	lr

00018b10 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   18b10:	b480      	push	{r7}
   18b12:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   18b14:	4b07      	ldr	r3, [pc, #28]	; (18b34 <WsfCsEnter+0x24>)
   18b16:	781b      	ldrb	r3, [r3, #0]
   18b18:	2b00      	cmp	r3, #0
   18b1a:	d100      	bne.n	18b1e <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   18b1c:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   18b1e:	4b05      	ldr	r3, [pc, #20]	; (18b34 <WsfCsEnter+0x24>)
   18b20:	781b      	ldrb	r3, [r3, #0]
   18b22:	3301      	adds	r3, #1
   18b24:	b2da      	uxtb	r2, r3
   18b26:	4b03      	ldr	r3, [pc, #12]	; (18b34 <WsfCsEnter+0x24>)
   18b28:	701a      	strb	r2, [r3, #0]
}
   18b2a:	bf00      	nop
   18b2c:	46bd      	mov	sp, r7
   18b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b32:	4770      	bx	lr
   18b34:	10004235 	.word	0x10004235

00018b38 <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   18b38:	b480      	push	{r7}
   18b3a:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   18b3c:	4b07      	ldr	r3, [pc, #28]	; (18b5c <WsfCsExit+0x24>)
   18b3e:	781b      	ldrb	r3, [r3, #0]
   18b40:	3b01      	subs	r3, #1
   18b42:	b2da      	uxtb	r2, r3
   18b44:	4b05      	ldr	r3, [pc, #20]	; (18b5c <WsfCsExit+0x24>)
   18b46:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   18b48:	4b04      	ldr	r3, [pc, #16]	; (18b5c <WsfCsExit+0x24>)
   18b4a:	781b      	ldrb	r3, [r3, #0]
   18b4c:	2b00      	cmp	r3, #0
   18b4e:	d100      	bne.n	18b52 <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   18b50:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   18b52:	bf00      	nop
   18b54:	46bd      	mov	sp, r7
   18b56:	f85d 7b04 	ldr.w	r7, [sp], #4
   18b5a:	4770      	bx	lr
   18b5c:	10004235 	.word	0x10004235

00018b60 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   18b60:	b580      	push	{r7, lr}
   18b62:	af00      	add	r7, sp, #0
  WsfCsEnter();
   18b64:	f7ff ffd4 	bl	18b10 <WsfCsEnter>
}
   18b68:	bf00      	nop
   18b6a:	bd80      	pop	{r7, pc}

00018b6c <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   18b6c:	b580      	push	{r7, lr}
   18b6e:	af00      	add	r7, sp, #0
  WsfCsExit();
   18b70:	f7ff ffe2 	bl	18b38 <WsfCsExit>
}
   18b74:	bf00      	nop
   18b76:	bd80      	pop	{r7, pc}

00018b78 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   18b78:	b580      	push	{r7, lr}
   18b7a:	b084      	sub	sp, #16
   18b7c:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   18b7e:	4b21      	ldr	r3, [pc, #132]	; (18c04 <WsfSetOsSpecificEvent+0x8c>)
   18b80:	681b      	ldr	r3, [r3, #0]
   18b82:	2b00      	cmp	r3, #0
   18b84:	d039      	beq.n	18bfa <WsfSetOsSpecificEvent+0x82>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   18b86:	f3ef 8305 	mrs	r3, IPSR
   18b8a:	60bb      	str	r3, [r7, #8]
	if( ulCurrentInterrupt == 0 )
   18b8c:	68bb      	ldr	r3, [r7, #8]
   18b8e:	2b00      	cmp	r3, #0
   18b90:	d102      	bne.n	18b98 <WsfSetOsSpecificEvent+0x20>
		xReturn = pdFALSE;
   18b92:	2300      	movs	r3, #0
   18b94:	607b      	str	r3, [r7, #4]
   18b96:	e001      	b.n	18b9c <WsfSetOsSpecificEvent+0x24>
		xReturn = pdTRUE;
   18b98:	2301      	movs	r3, #1
   18b9a:	607b      	str	r3, [r7, #4]
	return xReturn;
   18b9c:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   18b9e:	2b01      	cmp	r3, #1
   18ba0:	d118      	bne.n	18bd4 <WsfSetOsSpecificEvent+0x5c>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   18ba2:	2300      	movs	r3, #0
   18ba4:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   18ba6:	4b17      	ldr	r3, [pc, #92]	; (18c04 <WsfSetOsSpecificEvent+0x8c>)
   18ba8:	6819      	ldr	r1, [r3, #0]
   18baa:	463b      	mov	r3, r7
   18bac:	2201      	movs	r2, #1
   18bae:	4816      	ldr	r0, [pc, #88]	; (18c08 <WsfSetOsSpecificEvent+0x90>)
   18bb0:	f004 fe80 	bl	1d8b4 <xTimerPendFunctionCallFromISR>
   18bb4:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   18bb6:	68fb      	ldr	r3, [r7, #12]
   18bb8:	2b00      	cmp	r3, #0
   18bba:	d01e      	beq.n	18bfa <WsfSetOsSpecificEvent+0x82>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   18bbc:	683b      	ldr	r3, [r7, #0]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	d01b      	beq.n	18bfa <WsfSetOsSpecificEvent+0x82>
   18bc2:	4b12      	ldr	r3, [pc, #72]	; (18c0c <WsfSetOsSpecificEvent+0x94>)
   18bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18bc8:	601a      	str	r2, [r3, #0]
   18bca:	f3bf 8f4f 	dsb	sy
   18bce:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   18bd2:	e012      	b.n	18bfa <WsfSetOsSpecificEvent+0x82>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   18bd4:	4b0b      	ldr	r3, [pc, #44]	; (18c04 <WsfSetOsSpecificEvent+0x8c>)
   18bd6:	681b      	ldr	r3, [r3, #0]
   18bd8:	2101      	movs	r1, #1
   18bda:	4618      	mov	r0, r3
   18bdc:	f002 ff70 	bl	1bac0 <xEventGroupSetBits>
   18be0:	4603      	mov	r3, r0
   18be2:	60fb      	str	r3, [r7, #12]
          if ( xResult != pdFAIL )
   18be4:	68fb      	ldr	r3, [r7, #12]
   18be6:	2b00      	cmp	r3, #0
   18be8:	d007      	beq.n	18bfa <WsfSetOsSpecificEvent+0x82>
              portYIELD();
   18bea:	4b08      	ldr	r3, [pc, #32]	; (18c0c <WsfSetOsSpecificEvent+0x94>)
   18bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18bf0:	601a      	str	r2, [r3, #0]
   18bf2:	f3bf 8f4f 	dsb	sy
   18bf6:	f3bf 8f6f 	isb	sy
}
   18bfa:	bf00      	nop
   18bfc:	3710      	adds	r7, #16
   18bfe:	46bd      	mov	sp, r7
   18c00:	bd80      	pop	{r7, pc}
   18c02:	bf00      	nop
   18c04:	10004238 	.word	0x10004238
   18c08:	0001bbaf 	.word	0x0001bbaf
   18c0c:	e000ed04 	.word	0xe000ed04

00018c10 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   18c10:	b580      	push	{r7, lr}
   18c12:	b082      	sub	sp, #8
   18c14:	af00      	add	r7, sp, #0
   18c16:	4603      	mov	r3, r0
   18c18:	460a      	mov	r2, r1
   18c1a:	71fb      	strb	r3, [r7, #7]
   18c1c:	4613      	mov	r3, r2
   18c1e:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   18c20:	f7ff ff76 	bl	18b10 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   18c24:	79fb      	ldrb	r3, [r7, #7]
   18c26:	f003 030f 	and.w	r3, r3, #15
   18c2a:	79fa      	ldrb	r2, [r7, #7]
   18c2c:	f002 020f 	and.w	r2, r2, #15
   18c30:	490e      	ldr	r1, [pc, #56]	; (18c6c <WsfSetEvent+0x5c>)
   18c32:	440a      	add	r2, r1
   18c34:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   18c38:	79ba      	ldrb	r2, [r7, #6]
   18c3a:	430a      	orrs	r2, r1
   18c3c:	b2d1      	uxtb	r1, r2
   18c3e:	4a0b      	ldr	r2, [pc, #44]	; (18c6c <WsfSetEvent+0x5c>)
   18c40:	4413      	add	r3, r2
   18c42:	460a      	mov	r2, r1
   18c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   18c48:	4b08      	ldr	r3, [pc, #32]	; (18c6c <WsfSetEvent+0x5c>)
   18c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   18c4e:	f043 0304 	orr.w	r3, r3, #4
   18c52:	b2da      	uxtb	r2, r3
   18c54:	4b05      	ldr	r3, [pc, #20]	; (18c6c <WsfSetEvent+0x5c>)
   18c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   18c5a:	f7ff ff6d 	bl	18b38 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   18c5e:	f7ff ff8b 	bl	18b78 <WsfSetOsSpecificEvent>
}
   18c62:	bf00      	nop
   18c64:	3708      	adds	r7, #8
   18c66:	46bd      	mov	sp, r7
   18c68:	bd80      	pop	{r7, pc}
   18c6a:	bf00      	nop
   18c6c:	10009478 	.word	0x10009478

00018c70 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   18c70:	b580      	push	{r7, lr}
   18c72:	b082      	sub	sp, #8
   18c74:	af00      	add	r7, sp, #0
   18c76:	4603      	mov	r3, r0
   18c78:	460a      	mov	r2, r1
   18c7a:	71fb      	strb	r3, [r7, #7]
   18c7c:	4613      	mov	r3, r2
   18c7e:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   18c80:	f7ff ff46 	bl	18b10 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   18c84:	4b08      	ldr	r3, [pc, #32]	; (18ca8 <WsfTaskSetReady+0x38>)
   18c86:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   18c8a:	79bb      	ldrb	r3, [r7, #6]
   18c8c:	4313      	orrs	r3, r2
   18c8e:	b2da      	uxtb	r2, r3
   18c90:	4b05      	ldr	r3, [pc, #20]	; (18ca8 <WsfTaskSetReady+0x38>)
   18c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   18c96:	f7ff ff4f 	bl	18b38 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   18c9a:	f7ff ff6d 	bl	18b78 <WsfSetOsSpecificEvent>
}
   18c9e:	bf00      	nop
   18ca0:	3708      	adds	r7, #8
   18ca2:	46bd      	mov	sp, r7
   18ca4:	bd80      	pop	{r7, pc}
   18ca6:	bf00      	nop
   18ca8:	10009478 	.word	0x10009478

00018cac <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   18cac:	b480      	push	{r7}
   18cae:	b083      	sub	sp, #12
   18cb0:	af00      	add	r7, sp, #0
   18cb2:	4603      	mov	r3, r0
   18cb4:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   18cb6:	4b03      	ldr	r3, [pc, #12]	; (18cc4 <WsfTaskMsgQueue+0x18>)
}
   18cb8:	4618      	mov	r0, r3
   18cba:	370c      	adds	r7, #12
   18cbc:	46bd      	mov	sp, r7
   18cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cc2:	4770      	bx	lr
   18cc4:	100094a8 	.word	0x100094a8

00018cc8 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   18cc8:	b480      	push	{r7}
   18cca:	b085      	sub	sp, #20
   18ccc:	af00      	add	r7, sp, #0
   18cce:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   18cd0:	4b0a      	ldr	r3, [pc, #40]	; (18cfc <WsfOsSetNextHandler+0x34>)
   18cd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   18cd6:	1c5a      	adds	r2, r3, #1
   18cd8:	b2d1      	uxtb	r1, r2
   18cda:	4a08      	ldr	r2, [pc, #32]	; (18cfc <WsfOsSetNextHandler+0x34>)
   18cdc:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   18ce0:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   18ce2:	7bfb      	ldrb	r3, [r7, #15]
   18ce4:	4905      	ldr	r1, [pc, #20]	; (18cfc <WsfOsSetNextHandler+0x34>)
   18ce6:	687a      	ldr	r2, [r7, #4]
   18ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   18cec:	7bfb      	ldrb	r3, [r7, #15]
}
   18cee:	4618      	mov	r0, r3
   18cf0:	3714      	adds	r7, #20
   18cf2:	46bd      	mov	sp, r7
   18cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18cf8:	4770      	bx	lr
   18cfa:	bf00      	nop
   18cfc:	10009478 	.word	0x10009478

00018d00 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   18d00:	b480      	push	{r7}
   18d02:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   18d04:	4b06      	ldr	r3, [pc, #24]	; (18d20 <wsfOsReadyToSleep+0x20>)
   18d06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   18d0a:	2b00      	cmp	r3, #0
   18d0c:	bf0c      	ite	eq
   18d0e:	2301      	moveq	r3, #1
   18d10:	2300      	movne	r3, #0
   18d12:	b2db      	uxtb	r3, r3
}
   18d14:	4618      	mov	r0, r3
   18d16:	46bd      	mov	sp, r7
   18d18:	f85d 7b04 	ldr.w	r7, [sp], #4
   18d1c:	4770      	bx	lr
   18d1e:	bf00      	nop
   18d20:	10009478 	.word	0x10009478

00018d24 <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   18d24:	b580      	push	{r7, lr}
   18d26:	b086      	sub	sp, #24
   18d28:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   18d2a:	4b3f      	ldr	r3, [pc, #252]	; (18e28 <wsfOsDispatcher+0x104>)
   18d2c:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   18d2e:	e072      	b.n	18e16 <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   18d30:	f7ff feee 	bl	18b10 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   18d34:	693b      	ldr	r3, [r7, #16]
   18d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   18d3a:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   18d3c:	693b      	ldr	r3, [r7, #16]
   18d3e:	2200      	movs	r2, #0
   18d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   18d44:	f7ff fef8 	bl	18b38 <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   18d48:	7bfb      	ldrb	r3, [r7, #15]
   18d4a:	f003 0301 	and.w	r3, r3, #1
   18d4e:	2b00      	cmp	r3, #0
   18d50:	d016      	beq.n	18d80 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   18d52:	e00a      	b.n	18d6a <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   18d54:	78bb      	ldrb	r3, [r7, #2]
   18d56:	461a      	mov	r2, r3
   18d58:	693b      	ldr	r3, [r7, #16]
   18d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18d5e:	68b9      	ldr	r1, [r7, #8]
   18d60:	2000      	movs	r0, #0
   18d62:	4798      	blx	r3
        WsfMsgFree(pMsg);
   18d64:	68b8      	ldr	r0, [r7, #8]
   18d66:	f001 fbd3 	bl	1a510 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   18d6a:	693b      	ldr	r3, [r7, #16]
   18d6c:	3330      	adds	r3, #48	; 0x30
   18d6e:	1cba      	adds	r2, r7, #2
   18d70:	4611      	mov	r1, r2
   18d72:	4618      	mov	r0, r3
   18d74:	f001 fc06 	bl	1a584 <WsfMsgDeq>
   18d78:	60b8      	str	r0, [r7, #8]
   18d7a:	68bb      	ldr	r3, [r7, #8]
   18d7c:	2b00      	cmp	r3, #0
   18d7e:	d1e9      	bne.n	18d54 <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   18d80:	7bfb      	ldrb	r3, [r7, #15]
   18d82:	f003 0302 	and.w	r3, r3, #2
   18d86:	2b00      	cmp	r3, #0
   18d88:	d012      	beq.n	18db0 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   18d8a:	e00a      	b.n	18da2 <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   18d8c:	687b      	ldr	r3, [r7, #4]
   18d8e:	7a1b      	ldrb	r3, [r3, #8]
   18d90:	461a      	mov	r2, r3
   18d92:	693b      	ldr	r3, [r7, #16]
   18d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18d98:	687a      	ldr	r2, [r7, #4]
   18d9a:	320a      	adds	r2, #10
   18d9c:	4611      	mov	r1, r2
   18d9e:	2000      	movs	r0, #0
   18da0:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   18da2:	2000      	movs	r0, #0
   18da4:	f001 fdda 	bl	1a95c <WsfTimerServiceExpired>
   18da8:	6078      	str	r0, [r7, #4]
   18daa:	687b      	ldr	r3, [r7, #4]
   18dac:	2b00      	cmp	r3, #0
   18dae:	d1ed      	bne.n	18d8c <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   18db0:	7bfb      	ldrb	r3, [r7, #15]
   18db2:	f003 0304 	and.w	r3, r3, #4
   18db6:	2b00      	cmp	r3, #0
   18db8:	d02d      	beq.n	18e16 <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   18dba:	2300      	movs	r3, #0
   18dbc:	75fb      	strb	r3, [r7, #23]
   18dbe:	e027      	b.n	18e10 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   18dc0:	7dfb      	ldrb	r3, [r7, #23]
   18dc2:	693a      	ldr	r2, [r7, #16]
   18dc4:	4413      	add	r3, r2
   18dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18dca:	2b00      	cmp	r3, #0
   18dcc:	d01d      	beq.n	18e0a <wsfOsDispatcher+0xe6>
   18dce:	7dfa      	ldrb	r2, [r7, #23]
   18dd0:	693b      	ldr	r3, [r7, #16]
   18dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18dd6:	2b00      	cmp	r3, #0
   18dd8:	d017      	beq.n	18e0a <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   18dda:	f7ff fe99 	bl	18b10 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   18dde:	7dfb      	ldrb	r3, [r7, #23]
   18de0:	693a      	ldr	r2, [r7, #16]
   18de2:	4413      	add	r3, r2
   18de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18de8:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   18dea:	7dfb      	ldrb	r3, [r7, #23]
   18dec:	693a      	ldr	r2, [r7, #16]
   18dee:	4413      	add	r3, r2
   18df0:	2200      	movs	r2, #0
   18df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   18df6:	f7ff fe9f 	bl	18b38 <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   18dfa:	7dfa      	ldrb	r2, [r7, #23]
   18dfc:	693b      	ldr	r3, [r7, #16]
   18dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   18e02:	78fa      	ldrb	r2, [r7, #3]
   18e04:	2100      	movs	r1, #0
   18e06:	4610      	mov	r0, r2
   18e08:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   18e0a:	7dfb      	ldrb	r3, [r7, #23]
   18e0c:	3301      	adds	r3, #1
   18e0e:	75fb      	strb	r3, [r7, #23]
   18e10:	7dfb      	ldrb	r3, [r7, #23]
   18e12:	2b08      	cmp	r3, #8
   18e14:	d9d4      	bls.n	18dc0 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   18e16:	693b      	ldr	r3, [r7, #16]
   18e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   18e1c:	2b00      	cmp	r3, #0
   18e1e:	d187      	bne.n	18d30 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   18e20:	bf00      	nop
   18e22:	3718      	adds	r7, #24
   18e24:	46bd      	mov	sp, r7
   18e26:	bd80      	pop	{r7, pc}
   18e28:	10009478 	.word	0x10009478

00018e2c <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   18e2c:	b480      	push	{r7}
   18e2e:	b083      	sub	sp, #12
   18e30:	af00      	add	r7, sp, #0
   18e32:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   18e34:	4a04      	ldr	r2, [pc, #16]	; (18e48 <wsfOsSetEventObject+0x1c>)
   18e36:	687b      	ldr	r3, [r7, #4]
   18e38:	6013      	str	r3, [r2, #0]
  #endif
}
   18e3a:	bf00      	nop
   18e3c:	370c      	adds	r7, #12
   18e3e:	46bd      	mov	sp, r7
   18e40:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e44:	4770      	bx	lr
   18e46:	bf00      	nop
   18e48:	10004238 	.word	0x10004238

00018e4c <WsfTrace>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTrace(const char *pStr, ...)
{
   18e4c:	b40f      	push	{r0, r1, r2, r3}
   18e4e:	b580      	push	{r7, lr}
   18e50:	b0c2      	sub	sp, #264	; 0x108
   18e52:	af00      	add	r7, sp, #0
  char pTraceMsg[AM_PRINTF_BUFSIZE];
  uint32_t ui32NumChars;
  va_list           args;

  va_start(args, pStr);
   18e54:	f507 728a 	add.w	r2, r7, #276	; 0x114
   18e58:	463b      	mov	r3, r7
   18e5a:	601a      	str	r2, [r3, #0]
  am_util_stdio_vsprintf(pTraceMsg, pStr, args);
   18e5c:	463b      	mov	r3, r7
   18e5e:	1d38      	adds	r0, r7, #4
   18e60:	681a      	ldr	r2, [r3, #0]
   18e62:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
   18e66:	f002 fa3d 	bl	1b2e4 <am_util_stdio_vsprintf>
  //vprintf(pStr, args);
  va_end(args);
  ui32NumChars = am_util_debug_printf(pTraceMsg);
   18e6a:	1d3b      	adds	r3, r7, #4
   18e6c:	4618      	mov	r0, r3
   18e6e:	f002 fd45 	bl	1b8fc <am_util_stdio_printf>
   18e72:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if (!(ui32NumChars < AM_PRINTF_BUFSIZE))
   18e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   18e7a:	2bff      	cmp	r3, #255	; 0xff
   18e7c:	d903      	bls.n	18e86 <WsfTrace+0x3a>
    WsfAssert(__FILE__, (uint16_t) __LINE__);
   18e7e:	2183      	movs	r1, #131	; 0x83
   18e80:	4806      	ldr	r0, [pc, #24]	; (18e9c <WsfTrace+0x50>)
   18e82:	f7ff fe31 	bl	18ae8 <WsfAssert>
  am_util_debug_printf("\n");
   18e86:	4806      	ldr	r0, [pc, #24]	; (18ea0 <WsfTrace+0x54>)
   18e88:	f002 fd38 	bl	1b8fc <am_util_stdio_printf>
}
   18e8c:	bf00      	nop
   18e8e:	f507 7784 	add.w	r7, r7, #264	; 0x108
   18e92:	46bd      	mov	sp, r7
   18e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   18e98:	b004      	add	sp, #16
   18e9a:	4770      	bx	lr
   18e9c:	00022828 	.word	0x00022828
   18ea0:	00022820 	.word	0x00022820

00018ea4 <__NVIC_EnableIRQ>:
{
   18ea4:	b480      	push	{r7}
   18ea6:	b083      	sub	sp, #12
   18ea8:	af00      	add	r7, sp, #0
   18eaa:	4603      	mov	r3, r0
   18eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18eb2:	2b00      	cmp	r3, #0
   18eb4:	db0b      	blt.n	18ece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18eb6:	4909      	ldr	r1, [pc, #36]	; (18edc <__NVIC_EnableIRQ+0x38>)
   18eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ebc:	095b      	lsrs	r3, r3, #5
   18ebe:	79fa      	ldrb	r2, [r7, #7]
   18ec0:	f002 021f 	and.w	r2, r2, #31
   18ec4:	2001      	movs	r0, #1
   18ec6:	fa00 f202 	lsl.w	r2, r0, r2
   18eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18ece:	bf00      	nop
   18ed0:	370c      	adds	r7, #12
   18ed2:	46bd      	mov	sp, r7
   18ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
   18ed8:	4770      	bx	lr
   18eda:	bf00      	nop
   18edc:	e000e100 	.word	0xe000e100

00018ee0 <__NVIC_DisableIRQ>:
{
   18ee0:	b480      	push	{r7}
   18ee2:	b083      	sub	sp, #12
   18ee4:	af00      	add	r7, sp, #0
   18ee6:	4603      	mov	r3, r0
   18ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18eee:	2b00      	cmp	r3, #0
   18ef0:	db10      	blt.n	18f14 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18ef2:	490b      	ldr	r1, [pc, #44]	; (18f20 <__NVIC_DisableIRQ+0x40>)
   18ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ef8:	095b      	lsrs	r3, r3, #5
   18efa:	79fa      	ldrb	r2, [r7, #7]
   18efc:	f002 021f 	and.w	r2, r2, #31
   18f00:	2001      	movs	r0, #1
   18f02:	fa00 f202 	lsl.w	r2, r0, r2
   18f06:	3320      	adds	r3, #32
   18f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   18f0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18f10:	f3bf 8f6f 	isb	sy
}
   18f14:	bf00      	nop
   18f16:	370c      	adds	r7, #12
   18f18:	46bd      	mov	sp, r7
   18f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   18f1e:	4770      	bx	lr
   18f20:	e000e100 	.word	0xe000e100

00018f24 <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   18f24:	b580      	push	{r7, lr}
   18f26:	b082      	sub	sp, #8
   18f28:	af00      	add	r7, sp, #0
   18f2a:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   18f2c:	687b      	ldr	r3, [r7, #4]
   18f2e:	2b00      	cmp	r3, #0
   18f30:	d00c      	beq.n	18f4c <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   18f32:	4a08      	ldr	r2, [pc, #32]	; (18f54 <error_check+0x30>)
   18f34:	687b      	ldr	r3, [r7, #4]
   18f36:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   18f38:	4b07      	ldr	r3, [pc, #28]	; (18f58 <error_check+0x34>)
   18f3a:	681b      	ldr	r3, [r3, #0]
   18f3c:	2b00      	cmp	r3, #0
   18f3e:	d005      	beq.n	18f4c <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   18f40:	4b05      	ldr	r3, [pc, #20]	; (18f58 <error_check+0x34>)
   18f42:	681b      	ldr	r3, [r3, #0]
   18f44:	4a03      	ldr	r2, [pc, #12]	; (18f54 <error_check+0x30>)
   18f46:	6812      	ldr	r2, [r2, #0]
   18f48:	4610      	mov	r0, r2
   18f4a:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   18f4c:	bf00      	nop
   18f4e:	3708      	adds	r7, #8
   18f50:	46bd      	mov	sp, r7
   18f52:	bd80      	pop	{r7, pc}
   18f54:	10004250 	.word	0x10004250
   18f58:	1000424c 	.word	0x1000424c

00018f5c <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   18f5c:	b5b0      	push	{r4, r5, r7, lr}
   18f5e:	b092      	sub	sp, #72	; 0x48
   18f60:	af00      	add	r7, sp, #0
   18f62:	4603      	mov	r3, r0
   18f64:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   18f66:	2300      	movs	r3, #0
   18f68:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   18f6a:	4b6c      	ldr	r3, [pc, #432]	; (1911c <HciDrvRadioBoot+0x1c0>)
   18f6c:	2200      	movs	r2, #0
   18f6e:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   18f70:	4b6b      	ldr	r3, [pc, #428]	; (19120 <HciDrvRadioBoot+0x1c4>)
   18f72:	2200      	movs	r2, #0
   18f74:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   18f76:	2301      	movs	r3, #1
   18f78:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   18f7a:	e0a1      	b.n	190c0 <HciDrvRadioBoot+0x164>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   18f7c:	4969      	ldr	r1, [pc, #420]	; (19124 <HciDrvRadioBoot+0x1c8>)
   18f7e:	2000      	movs	r0, #0
   18f80:	f007 fd68 	bl	20a54 <am_hal_ble_initialize>
   18f84:	63f8      	str	r0, [r7, #60]	; 0x3c
   18f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18f88:	2b00      	cmp	r3, #0
   18f8a:	d006      	beq.n	18f9a <HciDrvRadioBoot+0x3e>
   18f8c:	4866      	ldr	r0, [pc, #408]	; (19128 <HciDrvRadioBoot+0x1cc>)
   18f8e:	f002 fcb5 	bl	1b8fc <am_util_stdio_printf>
   18f92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   18f94:	f7ff ffc6 	bl	18f24 <error_check>
   18f98:	e0bd      	b.n	19116 <HciDrvRadioBoot+0x1ba>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   18f9a:	4b62      	ldr	r3, [pc, #392]	; (19124 <HciDrvRadioBoot+0x1c8>)
   18f9c:	681b      	ldr	r3, [r3, #0]
   18f9e:	2100      	movs	r1, #0
   18fa0:	4618      	mov	r0, r3
   18fa2:	f007 fe47 	bl	20c34 <am_hal_ble_power_control>
   18fa6:	63b8      	str	r0, [r7, #56]	; 0x38
   18fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18faa:	2b00      	cmp	r3, #0
   18fac:	d006      	beq.n	18fbc <HciDrvRadioBoot+0x60>
   18fae:	485f      	ldr	r0, [pc, #380]	; (1912c <HciDrvRadioBoot+0x1d0>)
   18fb0:	f002 fca4 	bl	1b8fc <am_util_stdio_printf>
   18fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   18fb6:	f7ff ffb5 	bl	18f24 <error_check>
   18fba:	e0ac      	b.n	19116 <HciDrvRadioBoot+0x1ba>

        am_hal_ble_config_t sBleConfig =
   18fbc:	4b5c      	ldr	r3, [pc, #368]	; (19130 <HciDrvRadioBoot+0x1d4>)
   18fbe:	f107 0408 	add.w	r4, r7, #8
   18fc2:	461d      	mov	r5, r3
   18fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   18fc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   18fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   18fd0:	4b54      	ldr	r3, [pc, #336]	; (19124 <HciDrvRadioBoot+0x1c8>)
   18fd2:	681b      	ldr	r3, [r3, #0]
   18fd4:	f107 0208 	add.w	r2, r7, #8
   18fd8:	4611      	mov	r1, r2
   18fda:	4618      	mov	r0, r3
   18fdc:	f007 fda2 	bl	20b24 <am_hal_ble_config>
   18fe0:	6378      	str	r0, [r7, #52]	; 0x34
   18fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18fe4:	2b00      	cmp	r3, #0
   18fe6:	d006      	beq.n	18ff6 <HciDrvRadioBoot+0x9a>
   18fe8:	4852      	ldr	r0, [pc, #328]	; (19134 <HciDrvRadioBoot+0x1d8>)
   18fea:	f002 fc87 	bl	1b8fc <am_util_stdio_printf>
   18fee:	6b78      	ldr	r0, [r7, #52]	; 0x34
   18ff0:	f7ff ff98 	bl	18f24 <error_check>
   18ff4:	e08f      	b.n	19116 <HciDrvRadioBoot+0x1ba>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   18ff6:	79fb      	ldrb	r3, [r7, #7]
   18ff8:	2b00      	cmp	r3, #0
   18ffa:	d003      	beq.n	19004 <HciDrvRadioBoot+0xa8>
        {
            am_util_delay_ms(1000);
   18ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   19000:	f001 fd2e 	bl	1aa60 <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   19004:	4b47      	ldr	r3, [pc, #284]	; (19124 <HciDrvRadioBoot+0x1c8>)
   19006:	681b      	ldr	r3, [r3, #0]
   19008:	4618      	mov	r0, r3
   1900a:	f008 fd09 	bl	21a20 <am_hal_ble_boot>
   1900e:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   19010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19012:	2b00      	cmp	r3, #0
   19014:	d059      	beq.n	190ca <HciDrvRadioBoot+0x16e>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   19016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19018:	4a47      	ldr	r2, [pc, #284]	; (19138 <HciDrvRadioBoot+0x1dc>)
   1901a:	4293      	cmp	r3, r2
   1901c:	d12a      	bne.n	19074 <HciDrvRadioBoot+0x118>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   1901e:	4b41      	ldr	r3, [pc, #260]	; (19124 <HciDrvRadioBoot+0x1c8>)
   19020:	681b      	ldr	r3, [r3, #0]
   19022:	2101      	movs	r1, #1
   19024:	4618      	mov	r0, r3
   19026:	f007 fe05 	bl	20c34 <am_hal_ble_power_control>
   1902a:	6338      	str	r0, [r7, #48]	; 0x30
   1902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1902e:	2b00      	cmp	r3, #0
   19030:	d006      	beq.n	19040 <HciDrvRadioBoot+0xe4>
   19032:	4842      	ldr	r0, [pc, #264]	; (1913c <HciDrvRadioBoot+0x1e0>)
   19034:	f002 fc62 	bl	1b8fc <am_util_stdio_printf>
   19038:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1903a:	f7ff ff73 	bl	18f24 <error_check>
   1903e:	e06a      	b.n	19116 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19040:	4b38      	ldr	r3, [pc, #224]	; (19124 <HciDrvRadioBoot+0x1c8>)
   19042:	681b      	ldr	r3, [r3, #0]
   19044:	4618      	mov	r0, r3
   19046:	f007 fd41 	bl	20acc <am_hal_ble_deinitialize>
   1904a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1904e:	2b00      	cmp	r3, #0
   19050:	d006      	beq.n	19060 <HciDrvRadioBoot+0x104>
   19052:	483b      	ldr	r0, [pc, #236]	; (19140 <HciDrvRadioBoot+0x1e4>)
   19054:	f002 fc52 	bl	1b8fc <am_util_stdio_printf>
   19058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1905a:	f7ff ff63 	bl	18f24 <error_check>
   1905e:	e05a      	b.n	19116 <HciDrvRadioBoot+0x1ba>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   19060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   19062:	1c5a      	adds	r2, r3, #1
   19064:	647a      	str	r2, [r7, #68]	; 0x44
   19066:	2b09      	cmp	r3, #9
   19068:	d854      	bhi.n	19114 <HciDrvRadioBoot+0x1b8>
            {
                am_util_delay_ms(1000);
   1906a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1906e:	f001 fcf7 	bl	1aa60 <am_util_delay_ms>
   19072:	e025      	b.n	190c0 <HciDrvRadioBoot+0x164>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   19074:	4b2b      	ldr	r3, [pc, #172]	; (19124 <HciDrvRadioBoot+0x1c8>)
   19076:	681b      	ldr	r3, [r3, #0]
   19078:	2101      	movs	r1, #1
   1907a:	4618      	mov	r0, r3
   1907c:	f007 fdda 	bl	20c34 <am_hal_ble_power_control>
   19080:	62b8      	str	r0, [r7, #40]	; 0x28
   19082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19084:	2b00      	cmp	r3, #0
   19086:	d006      	beq.n	19096 <HciDrvRadioBoot+0x13a>
   19088:	482c      	ldr	r0, [pc, #176]	; (1913c <HciDrvRadioBoot+0x1e0>)
   1908a:	f002 fc37 	bl	1b8fc <am_util_stdio_printf>
   1908e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   19090:	f7ff ff48 	bl	18f24 <error_check>
   19094:	e03f      	b.n	19116 <HciDrvRadioBoot+0x1ba>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19096:	4b23      	ldr	r3, [pc, #140]	; (19124 <HciDrvRadioBoot+0x1c8>)
   19098:	681b      	ldr	r3, [r3, #0]
   1909a:	4618      	mov	r0, r3
   1909c:	f007 fd16 	bl	20acc <am_hal_ble_deinitialize>
   190a0:	6278      	str	r0, [r7, #36]	; 0x24
   190a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   190a4:	2b00      	cmp	r3, #0
   190a6:	d006      	beq.n	190b6 <HciDrvRadioBoot+0x15a>
   190a8:	4825      	ldr	r0, [pc, #148]	; (19140 <HciDrvRadioBoot+0x1e4>)
   190aa:	f002 fc27 	bl	1b8fc <am_util_stdio_printf>
   190ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
   190b0:	f7ff ff38 	bl	18f24 <error_check>
   190b4:	e02f      	b.n	19116 <HciDrvRadioBoot+0x1ba>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   190b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
   190b8:	f7ff ff34 	bl	18f24 <error_check>
            return;
   190bc:	bf00      	nop
   190be:	e02a      	b.n	19116 <HciDrvRadioBoot+0x1ba>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   190c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   190c2:	2b00      	cmp	r3, #0
   190c4:	f47f af5a 	bne.w	18f7c <HciDrvRadioBoot+0x20>
   190c8:	e000      	b.n	190cc <HciDrvRadioBoot+0x170>
            break;
   190ca:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   190cc:	4b15      	ldr	r3, [pc, #84]	; (19124 <HciDrvRadioBoot+0x1c8>)
   190ce:	681b      	ldr	r3, [r3, #0]
   190d0:	2108      	movs	r1, #8
   190d2:	4618      	mov	r0, r3
   190d4:	f008 fd78 	bl	21bc8 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   190d8:	4b12      	ldr	r3, [pc, #72]	; (19124 <HciDrvRadioBoot+0x1c8>)
   190da:	681b      	ldr	r3, [r3, #0]
   190dc:	f240 2181 	movw	r1, #641	; 0x281
   190e0:	4618      	mov	r0, r3
   190e2:	f008 f981 	bl	213e8 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   190e6:	4b0f      	ldr	r3, [pc, #60]	; (19124 <HciDrvRadioBoot+0x1c8>)
   190e8:	681b      	ldr	r3, [r3, #0]
   190ea:	f240 2181 	movw	r1, #641	; 0x281
   190ee:	4618      	mov	r0, r3
   190f0:	f008 f94c 	bl	2138c <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   190f4:	200c      	movs	r0, #12
   190f6:	f7ff fed5 	bl	18ea4 <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   190fa:	f44f 6302 	mov.w	r3, #2080	; 0x820
   190fe:	f44f 7282 	mov.w	r2, #260	; 0x104
   19102:	4910      	ldr	r1, [pc, #64]	; (19144 <HciDrvRadioBoot+0x1e8>)
   19104:	4810      	ldr	r0, [pc, #64]	; (19148 <HciDrvRadioBoot+0x1ec>)
   19106:	f009 f945 	bl	22394 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   1910a:	4b10      	ldr	r3, [pc, #64]	; (1914c <HciDrvRadioBoot+0x1f0>)
   1910c:	2200      	movs	r2, #0
   1910e:	601a      	str	r2, [r3, #0]

    return;
   19110:	bf00      	nop
   19112:	e000      	b.n	19116 <HciDrvRadioBoot+0x1ba>
                return;
   19114:	bf00      	nop
}
   19116:	3748      	adds	r7, #72	; 0x48
   19118:	46bd      	mov	sp, r7
   1911a:	bdb0      	pop	{r4, r5, r7, pc}
   1911c:	10004240 	.word	0x10004240
   19120:	10004244 	.word	0x10004244
   19124:	10009dfc 	.word	0x10009dfc
   19128:	0002286c 	.word	0x0002286c
   1912c:	000228a0 	.word	0x000228a0
   19130:	0002299c 	.word	0x0002299c
   19134:	000228ec 	.word	0x000228ec
   19138:	0800000b 	.word	0x0800000b
   1913c:	00022924 	.word	0x00022924
   19140:	0002296c 	.word	0x0002296c
   19144:	100095dc 	.word	0x100095dc
   19148:	100094b4 	.word	0x100094b4
   1914c:	10004248 	.word	0x10004248

00019150 <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   19150:	b580      	push	{r7, lr}
   19152:	b082      	sub	sp, #8
   19154:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   19156:	481c      	ldr	r0, [pc, #112]	; (191c8 <HciDrvRadioShutdown+0x78>)
   19158:	f001 fba2 	bl	1a8a0 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   1915c:	200c      	movs	r0, #12
   1915e:	f7ff febf 	bl	18ee0 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   19162:	4b1a      	ldr	r3, [pc, #104]	; (191cc <HciDrvRadioShutdown+0x7c>)
   19164:	681b      	ldr	r3, [r3, #0]
   19166:	2101      	movs	r1, #1
   19168:	4618      	mov	r0, r3
   1916a:	f007 fd63 	bl	20c34 <am_hal_ble_power_control>
   1916e:	6078      	str	r0, [r7, #4]
   19170:	687b      	ldr	r3, [r7, #4]
   19172:	2b00      	cmp	r3, #0
   19174:	d006      	beq.n	19184 <HciDrvRadioShutdown+0x34>
   19176:	4816      	ldr	r0, [pc, #88]	; (191d0 <HciDrvRadioShutdown+0x80>)
   19178:	f002 fbc0 	bl	1b8fc <am_util_stdio_printf>
   1917c:	6878      	ldr	r0, [r7, #4]
   1917e:	f7ff fed1 	bl	18f24 <error_check>
   19182:	e01d      	b.n	191c0 <HciDrvRadioShutdown+0x70>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   19184:	bf00      	nop
   19186:	4b13      	ldr	r3, [pc, #76]	; (191d4 <HciDrvRadioShutdown+0x84>)
   19188:	689b      	ldr	r3, [r3, #8]
   1918a:	f3c3 3340 	ubfx	r3, r3, #13, #1
   1918e:	b2db      	uxtb	r3, r3
   19190:	2b00      	cmp	r3, #0
   19192:	d1f8      	bne.n	19186 <HciDrvRadioShutdown+0x36>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   19194:	4b0d      	ldr	r3, [pc, #52]	; (191cc <HciDrvRadioShutdown+0x7c>)
   19196:	681b      	ldr	r3, [r3, #0]
   19198:	4618      	mov	r0, r3
   1919a:	f007 fc97 	bl	20acc <am_hal_ble_deinitialize>
   1919e:	6038      	str	r0, [r7, #0]
   191a0:	683b      	ldr	r3, [r7, #0]
   191a2:	2b00      	cmp	r3, #0
   191a4:	d006      	beq.n	191b4 <HciDrvRadioShutdown+0x64>
   191a6:	480c      	ldr	r0, [pc, #48]	; (191d8 <HciDrvRadioShutdown+0x88>)
   191a8:	f002 fba8 	bl	1b8fc <am_util_stdio_printf>
   191ac:	6838      	ldr	r0, [r7, #0]
   191ae:	f7ff feb9 	bl	18f24 <error_check>
   191b2:	e005      	b.n	191c0 <HciDrvRadioShutdown+0x70>

    g_ui32NumBytes   = 0;
   191b4:	4b09      	ldr	r3, [pc, #36]	; (191dc <HciDrvRadioShutdown+0x8c>)
   191b6:	2200      	movs	r2, #0
   191b8:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   191ba:	4b09      	ldr	r3, [pc, #36]	; (191e0 <HciDrvRadioShutdown+0x90>)
   191bc:	2200      	movs	r2, #0
   191be:	601a      	str	r2, [r3, #0]
}
   191c0:	3708      	adds	r7, #8
   191c2:	46bd      	mov	sp, r7
   191c4:	bd80      	pop	{r7, pc}
   191c6:	bf00      	nop
   191c8:	100094cc 	.word	0x100094cc
   191cc:	10009dfc 	.word	0x10009dfc
   191d0:	00022924 	.word	0x00022924
   191d4:	40021000 	.word	0x40021000
   191d8:	0002296c 	.word	0x0002296c
   191dc:	10004240 	.word	0x10004240
   191e0:	10004244 	.word	0x10004244

000191e4 <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   191e4:	b580      	push	{r7, lr}
   191e6:	b094      	sub	sp, #80	; 0x50
   191e8:	af00      	add	r7, sp, #0
   191ea:	4603      	mov	r3, r0
   191ec:	603a      	str	r2, [r7, #0]
   191ee:	71fb      	strb	r3, [r7, #7]
   191f0:	460b      	mov	r3, r1
   191f2:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   191f4:	4b3b      	ldr	r3, [pc, #236]	; (192e4 <hciDrvWrite+0x100>)
   191f6:	689a      	ldr	r2, [r3, #8]
   191f8:	4b3a      	ldr	r3, [pc, #232]	; (192e4 <hciDrvWrite+0x100>)
   191fa:	68db      	ldr	r3, [r3, #12]
   191fc:	429a      	cmp	r2, r3
   191fe:	d105      	bne.n	1920c <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   19200:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   19204:	f7ff fe8e 	bl	18f24 <error_check>
   19208:	88bb      	ldrh	r3, [r7, #4]
   1920a:	e067      	b.n	192dc <hciDrvWrite+0xf8>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   1920c:	88bb      	ldrh	r3, [r7, #4]
   1920e:	2bff      	cmp	r3, #255	; 0xff
   19210:	d904      	bls.n	1921c <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   19212:	4835      	ldr	r0, [pc, #212]	; (192e8 <hciDrvWrite+0x104>)
   19214:	f7ff fe86 	bl	18f24 <error_check>
   19218:	88bb      	ldrh	r3, [r7, #4]
   1921a:	e05f      	b.n	192dc <hciDrvWrite+0xf8>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   1921c:	4b31      	ldr	r3, [pc, #196]	; (192e4 <hciDrvWrite+0x100>)
   1921e:	695a      	ldr	r2, [r3, #20]
   19220:	4b30      	ldr	r3, [pc, #192]	; (192e4 <hciDrvWrite+0x100>)
   19222:	681b      	ldr	r3, [r3, #0]
   19224:	4413      	add	r3, r2
   19226:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   19228:	88bb      	ldrh	r3, [r7, #4]
   1922a:	3301      	adds	r3, #1
   1922c:	461a      	mov	r2, r3
   1922e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   19230:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   19232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   19234:	3304      	adds	r3, #4
   19236:	647b      	str	r3, [r7, #68]	; 0x44

    *pui8Wptr++ = type;
   19238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1923a:	1c5a      	adds	r2, r3, #1
   1923c:	647a      	str	r2, [r7, #68]	; 0x44
   1923e:	79fa      	ldrb	r2, [r7, #7]
   19240:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   19242:	2300      	movs	r3, #0
   19244:	64fb      	str	r3, [r7, #76]	; 0x4c
   19246:	e00a      	b.n	1925e <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   19248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1924a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1924c:	4413      	add	r3, r2
   1924e:	6839      	ldr	r1, [r7, #0]
   19250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   19252:	440a      	add	r2, r1
   19254:	7812      	ldrb	r2, [r2, #0]
   19256:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   19258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1925a:	3301      	adds	r3, #1
   1925c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1925e:	88ba      	ldrh	r2, [r7, #4]
   19260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   19262:	429a      	cmp	r2, r3
   19264:	d8f0      	bhi.n	19248 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   19266:	2201      	movs	r2, #1
   19268:	2100      	movs	r1, #0
   1926a:	481e      	ldr	r0, [pc, #120]	; (192e4 <hciDrvWrite+0x100>)
   1926c:	f009 f89e 	bl	223ac <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19270:	4b1e      	ldr	r3, [pc, #120]	; (192ec <hciDrvWrite+0x108>)
   19272:	781b      	ldrb	r3, [r3, #0]
   19274:	2101      	movs	r1, #1
   19276:	4618      	mov	r0, r3
   19278:	f7ff fcca 	bl	18c10 <WsfSetEvent>
#endif

#ifdef AM_CUSTOM_BDADDR
    if (type == HCI_CMD_TYPE)
   1927c:	79fb      	ldrb	r3, [r7, #7]
   1927e:	2b01      	cmp	r3, #1
   19280:	d12b      	bne.n	192da <hciDrvWrite+0xf6>
    {
        uint16_t opcode;
        BYTES_TO_UINT16(opcode, pData);
   19282:	683b      	ldr	r3, [r7, #0]
   19284:	781b      	ldrb	r3, [r3, #0]
   19286:	b29a      	uxth	r2, r3
   19288:	683b      	ldr	r3, [r7, #0]
   1928a:	3301      	adds	r3, #1
   1928c:	781b      	ldrb	r3, [r3, #0]
   1928e:	b29b      	uxth	r3, r3
   19290:	021b      	lsls	r3, r3, #8
   19292:	b29b      	uxth	r3, r3
   19294:	4413      	add	r3, r2
   19296:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

        if (HCI_OPCODE_RESET == opcode)
   1929a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   1929e:	f640 4203 	movw	r2, #3075	; 0xc03
   192a2:	4293      	cmp	r3, r2
   192a4:	d119      	bne.n	192da <hciDrvWrite+0xf6>
        {

            extern uint8_t g_BLEMacAddress[6];
            am_hal_mcuctrl_device_t sDevice;
            am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &sDevice);
   192a6:	f107 030c 	add.w	r3, r7, #12
   192aa:	4619      	mov	r1, r3
   192ac:	2001      	movs	r0, #1
   192ae:	f008 ff3d 	bl	2212c <am_hal_mcuctrl_info_get>
            g_BLEMacAddress[0] = sDevice.ui32ChipID0;
   192b2:	693b      	ldr	r3, [r7, #16]
   192b4:	b2da      	uxtb	r2, r3
   192b6:	4b0e      	ldr	r3, [pc, #56]	; (192f0 <hciDrvWrite+0x10c>)
   192b8:	701a      	strb	r2, [r3, #0]
            g_BLEMacAddress[1] = sDevice.ui32ChipID0 >> 8;
   192ba:	693b      	ldr	r3, [r7, #16]
   192bc:	0a1b      	lsrs	r3, r3, #8
   192be:	b2da      	uxtb	r2, r3
   192c0:	4b0b      	ldr	r3, [pc, #44]	; (192f0 <hciDrvWrite+0x10c>)
   192c2:	705a      	strb	r2, [r3, #1]
            g_BLEMacAddress[2] = sDevice.ui32ChipID0 >> 16;
   192c4:	693b      	ldr	r3, [r7, #16]
   192c6:	0c1b      	lsrs	r3, r3, #16
   192c8:	b2da      	uxtb	r2, r3
   192ca:	4b09      	ldr	r3, [pc, #36]	; (192f0 <hciDrvWrite+0x10c>)
   192cc:	709a      	strb	r2, [r3, #2]

            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
   192ce:	4a08      	ldr	r2, [pc, #32]	; (192f0 <hciDrvWrite+0x10c>)
   192d0:	2106      	movs	r1, #6
   192d2:	f64f 4032 	movw	r0, #64562	; 0xfc32
   192d6:	f7fb fc76 	bl	14bc6 <HciVendorSpecificCmd>
        }
    }
#endif

    return len;
   192da:	88bb      	ldrh	r3, [r7, #4]
}
   192dc:	4618      	mov	r0, r3
   192de:	3750      	adds	r7, #80	; 0x50
   192e0:	46bd      	mov	sp, r7
   192e2:	bd80      	pop	{r7, pc}
   192e4:	100094b4 	.word	0x100094b4
   192e8:	09000001 	.word	0x09000001
   192ec:	1000423c 	.word	0x1000423c
   192f0:	10002b90 	.word	0x10002b90

000192f4 <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   192f4:	b480      	push	{r7}
   192f6:	b083      	sub	sp, #12
   192f8:	af00      	add	r7, sp, #0
   192fa:	4603      	mov	r3, r0
   192fc:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   192fe:	4a0a      	ldr	r2, [pc, #40]	; (19328 <HciDrvHandlerInit+0x34>)
   19300:	79fb      	ldrb	r3, [r7, #7]
   19302:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   19304:	4a09      	ldr	r2, [pc, #36]	; (1932c <HciDrvHandlerInit+0x38>)
   19306:	79fb      	ldrb	r3, [r7, #7]
   19308:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   1930a:	4b08      	ldr	r3, [pc, #32]	; (1932c <HciDrvHandlerInit+0x38>)
   1930c:	2202      	movs	r2, #2
   1930e:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   19310:	4a07      	ldr	r2, [pc, #28]	; (19330 <HciDrvHandlerInit+0x3c>)
   19312:	79fb      	ldrb	r3, [r7, #7]
   19314:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   19316:	4b06      	ldr	r3, [pc, #24]	; (19330 <HciDrvHandlerInit+0x3c>)
   19318:	2203      	movs	r2, #3
   1931a:	731a      	strb	r2, [r3, #12]
}
   1931c:	bf00      	nop
   1931e:	370c      	adds	r7, #12
   19320:	46bd      	mov	sp, r7
   19322:	f85d 7b04 	ldr.w	r7, [sp], #4
   19326:	4770      	bx	lr
   19328:	1000423c 	.word	0x1000423c
   1932c:	100094cc 	.word	0x100094cc
   19330:	10009e00 	.word	0x10009e00

00019334 <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   19334:	b580      	push	{r7, lr}
   19336:	b082      	sub	sp, #8
   19338:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   1933a:	4b0e      	ldr	r3, [pc, #56]	; (19374 <HciDrvIntService+0x40>)
   1933c:	681b      	ldr	r3, [r3, #0]
   1933e:	2101      	movs	r1, #1
   19340:	4618      	mov	r0, r3
   19342:	f008 f843 	bl	213cc <am_hal_ble_int_status>
   19346:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   19348:	4b0a      	ldr	r3, [pc, #40]	; (19374 <HciDrvIntService+0x40>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	6879      	ldr	r1, [r7, #4]
   1934e:	4618      	mov	r0, r3
   19350:	f008 f84a 	bl	213e8 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   19354:	4b08      	ldr	r3, [pc, #32]	; (19378 <HciDrvIntService+0x44>)
   19356:	681b      	ldr	r3, [r3, #0]
   19358:	3301      	adds	r3, #1
   1935a:	4a07      	ldr	r2, [pc, #28]	; (19378 <HciDrvIntService+0x44>)
   1935c:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1935e:	4b07      	ldr	r3, [pc, #28]	; (1937c <HciDrvIntService+0x48>)
   19360:	781b      	ldrb	r3, [r3, #0]
   19362:	2101      	movs	r1, #1
   19364:	4618      	mov	r0, r3
   19366:	f7ff fc53 	bl	18c10 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   1936a:	bf00      	nop
   1936c:	3708      	adds	r7, #8
   1936e:	46bd      	mov	sp, r7
   19370:	bd80      	pop	{r7, pc}
   19372:	bf00      	nop
   19374:	10009dfc 	.word	0x10009dfc
   19378:	10004248 	.word	0x10004248
   1937c:	1000423c 	.word	0x1000423c

00019380 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   19380:	b580      	push	{r7, lr}
   19382:	b08a      	sub	sp, #40	; 0x28
   19384:	af00      	add	r7, sp, #0
   19386:	4603      	mov	r3, r0
   19388:	6039      	str	r1, [r7, #0]
   1938a:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   1938c:	2300      	movs	r3, #0
   1938e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   19390:	2300      	movs	r3, #0
   19392:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   19394:	2300      	movs	r3, #0
   19396:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   19398:	683b      	ldr	r3, [r7, #0]
   1939a:	789b      	ldrb	r3, [r3, #2]
   1939c:	2b02      	cmp	r3, #2
   1939e:	d107      	bne.n	193b0 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   193a0:	f7fb f9ff 	bl	147a2 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   193a4:	f242 7110 	movw	r1, #10000	; 0x2710
   193a8:	4889      	ldr	r0, [pc, #548]	; (195d0 <HciDrvHandler+0x250>)
   193aa:	f001 fa65 	bl	1a878 <WsfTimerStartMs>
        return;
   193ae:	e10c      	b.n	195ca <HciDrvHandler+0x24a>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   193b0:	4b88      	ldr	r3, [pc, #544]	; (195d4 <HciDrvHandler+0x254>)
   193b2:	681a      	ldr	r2, [r3, #0]
   193b4:	4b88      	ldr	r3, [pc, #544]	; (195d8 <HciDrvHandler+0x258>)
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	429a      	cmp	r2, r3
   193ba:	f240 80ea 	bls.w	19592 <HciDrvHandler+0x212>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   193be:	4b87      	ldr	r3, [pc, #540]	; (195dc <HciDrvHandler+0x25c>)
   193c0:	681a      	ldr	r2, [r3, #0]
   193c2:	4b85      	ldr	r3, [pc, #532]	; (195d8 <HciDrvHandler+0x258>)
   193c4:	681b      	ldr	r3, [r3, #0]
   193c6:	18d0      	adds	r0, r2, r3
   193c8:	4b82      	ldr	r3, [pc, #520]	; (195d4 <HciDrvHandler+0x254>)
   193ca:	681b      	ldr	r3, [r3, #0]
   193cc:	b29a      	uxth	r2, r3
   193ce:	4b82      	ldr	r3, [pc, #520]	; (195d8 <HciDrvHandler+0x258>)
   193d0:	681b      	ldr	r3, [r3, #0]
   193d2:	b29b      	uxth	r3, r3
   193d4:	1ad3      	subs	r3, r2, r3
   193d6:	b29b      	uxth	r3, r3
   193d8:	4619      	mov	r1, r3
   193da:	f7fd ff85 	bl	172e8 <hciTrSerialRxIncoming>
   193de:	4603      	mov	r3, r0
   193e0:	461a      	mov	r2, r3
   193e2:	4b7d      	ldr	r3, [pc, #500]	; (195d8 <HciDrvHandler+0x258>)
   193e4:	681b      	ldr	r3, [r3, #0]
   193e6:	4413      	add	r3, r2
   193e8:	4a7b      	ldr	r2, [pc, #492]	; (195d8 <HciDrvHandler+0x258>)
   193ea:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   193ec:	4b7a      	ldr	r3, [pc, #488]	; (195d8 <HciDrvHandler+0x258>)
   193ee:	681a      	ldr	r2, [r3, #0]
   193f0:	4b78      	ldr	r3, [pc, #480]	; (195d4 <HciDrvHandler+0x254>)
   193f2:	681b      	ldr	r3, [r3, #0]
   193f4:	429a      	cmp	r2, r3
   193f6:	d006      	beq.n	19406 <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   193f8:	4b79      	ldr	r3, [pc, #484]	; (195e0 <HciDrvHandler+0x260>)
   193fa:	781b      	ldrb	r3, [r3, #0]
   193fc:	2101      	movs	r1, #1
   193fe:	4618      	mov	r0, r3
   19400:	f7ff fc06 	bl	18c10 <WsfSetEvent>
            return;
   19404:	e0e1      	b.n	195ca <HciDrvHandler+0x24a>
        }
        else
        {
            g_ui32NumBytes   = 0;
   19406:	4b73      	ldr	r3, [pc, #460]	; (195d4 <HciDrvHandler+0x254>)
   19408:	2200      	movs	r2, #0
   1940a:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   1940c:	4b72      	ldr	r3, [pc, #456]	; (195d8 <HciDrvHandler+0x258>)
   1940e:	2200      	movs	r2, #0
   19410:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   19412:	e0be      	b.n	19592 <HciDrvHandler+0x212>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   19414:	4b73      	ldr	r3, [pc, #460]	; (195e4 <HciDrvHandler+0x264>)
   19416:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1941a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1941e:	b2db      	uxtb	r3, r3
   19420:	2b00      	cmp	r3, #0
   19422:	d07e      	beq.n	19522 <HciDrvHandler+0x1a2>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   19424:	4b70      	ldr	r3, [pc, #448]	; (195e8 <HciDrvHandler+0x268>)
   19426:	681b      	ldr	r3, [r3, #0]
   19428:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   1942a:	4869      	ldr	r0, [pc, #420]	; (195d0 <HciDrvHandler+0x250>)
   1942c:	f001 fa38 	bl	1a8a0 <WsfTimerStop>
   19430:	f242 7110 	movw	r1, #10000	; 0x2710
   19434:	4866      	ldr	r0, [pc, #408]	; (195d0 <HciDrvHandler+0x250>)
   19436:	f001 fa1f 	bl	1a878 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   1943a:	4b66      	ldr	r3, [pc, #408]	; (195d4 <HciDrvHandler+0x254>)
   1943c:	2200      	movs	r2, #0
   1943e:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   19440:	4b6a      	ldr	r3, [pc, #424]	; (195ec <HciDrvHandler+0x26c>)
   19442:	681b      	ldr	r3, [r3, #0]
   19444:	4a63      	ldr	r2, [pc, #396]	; (195d4 <HciDrvHandler+0x254>)
   19446:	496a      	ldr	r1, [pc, #424]	; (195f0 <HciDrvHandler+0x270>)
   19448:	4618      	mov	r0, r3
   1944a:	f007 fd7b 	bl	20f44 <am_hal_ble_blocking_hci_read>
   1944e:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   19450:	4b60      	ldr	r3, [pc, #384]	; (195d4 <HciDrvHandler+0x254>)
   19452:	681b      	ldr	r3, [r3, #0]
   19454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19458:	d908      	bls.n	1946c <HciDrvHandler+0xec>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   1945a:	4b66      	ldr	r3, [pc, #408]	; (195f4 <HciDrvHandler+0x274>)
   1945c:	60bb      	str	r3, [r7, #8]
   1945e:	4866      	ldr	r0, [pc, #408]	; (195f8 <HciDrvHandler+0x278>)
   19460:	f002 fa4c 	bl	1b8fc <am_util_stdio_printf>
   19464:	68b8      	ldr	r0, [r7, #8]
   19466:	f7ff fd5d 	bl	18f24 <error_check>
   1946a:	e0ae      	b.n	195ca <HciDrvHandler+0x24a>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1946c:	693b      	ldr	r3, [r7, #16]
   1946e:	2b00      	cmp	r3, #0
   19470:	d13d      	bne.n	194ee <HciDrvHandler+0x16e>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   19472:	2300      	movs	r3, #0
   19474:	61bb      	str	r3, [r7, #24]
   19476:	e012      	b.n	1949e <HciDrvHandler+0x11e>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   19478:	4b5a      	ldr	r3, [pc, #360]	; (195e4 <HciDrvHandler+0x264>)
   1947a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1947e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   19482:	b2db      	uxtb	r3, r3
   19484:	2b00      	cmp	r3, #0
   19486:	d00e      	beq.n	194a6 <HciDrvHandler+0x126>
   19488:	4b57      	ldr	r3, [pc, #348]	; (195e8 <HciDrvHandler+0x268>)
   1948a:	681a      	ldr	r2, [r3, #0]
   1948c:	68fb      	ldr	r3, [r7, #12]
   1948e:	429a      	cmp	r2, r3
   19490:	d109      	bne.n	194a6 <HciDrvHandler+0x126>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   19492:	2001      	movs	r0, #1
   19494:	f001 fb02 	bl	1aa9c <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   19498:	69bb      	ldr	r3, [r7, #24]
   1949a:	3301      	adds	r3, #1
   1949c:	61bb      	str	r3, [r7, #24]
   1949e:	69bb      	ldr	r3, [r7, #24]
   194a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   194a4:	d3e8      	bcc.n	19478 <HciDrvHandler+0xf8>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   194a6:	4b4d      	ldr	r3, [pc, #308]	; (195dc <HciDrvHandler+0x25c>)
   194a8:	681a      	ldr	r2, [r3, #0]
   194aa:	4b4a      	ldr	r3, [pc, #296]	; (195d4 <HciDrvHandler+0x254>)
   194ac:	681b      	ldr	r3, [r3, #0]
   194ae:	b29b      	uxth	r3, r3
   194b0:	4619      	mov	r1, r3
   194b2:	4610      	mov	r0, r2
   194b4:	f7fd ff18 	bl	172e8 <hciTrSerialRxIncoming>
   194b8:	4603      	mov	r3, r0
   194ba:	461a      	mov	r2, r3
   194bc:	4b46      	ldr	r3, [pc, #280]	; (195d8 <HciDrvHandler+0x258>)
   194be:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   194c0:	4b45      	ldr	r3, [pc, #276]	; (195d8 <HciDrvHandler+0x258>)
   194c2:	681a      	ldr	r2, [r3, #0]
   194c4:	4b43      	ldr	r3, [pc, #268]	; (195d4 <HciDrvHandler+0x254>)
   194c6:	681b      	ldr	r3, [r3, #0]
   194c8:	429a      	cmp	r2, r3
   194ca:	d006      	beq.n	194da <HciDrvHandler+0x15a>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   194cc:	4b44      	ldr	r3, [pc, #272]	; (195e0 <HciDrvHandler+0x260>)
   194ce:	781b      	ldrb	r3, [r3, #0]
   194d0:	2101      	movs	r1, #1
   194d2:	4618      	mov	r0, r3
   194d4:	f7ff fb9c 	bl	18c10 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   194d8:	e065      	b.n	195a6 <HciDrvHandler+0x226>
                }

                g_ui32NumBytes   = 0;
   194da:	4b3e      	ldr	r3, [pc, #248]	; (195d4 <HciDrvHandler+0x254>)
   194dc:	2200      	movs	r2, #0
   194de:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   194e0:	4b3d      	ldr	r3, [pc, #244]	; (195d8 <HciDrvHandler+0x258>)
   194e2:	2200      	movs	r2, #0
   194e4:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   194e6:	69fb      	ldr	r3, [r7, #28]
   194e8:	3301      	adds	r3, #1
   194ea:	61fb      	str	r3, [r7, #28]
   194ec:	e00f      	b.n	1950e <HciDrvHandler+0x18e>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   194ee:	693b      	ldr	r3, [r7, #16]
   194f0:	2b00      	cmp	r3, #0
   194f2:	d00c      	beq.n	1950e <HciDrvHandler+0x18e>
   194f4:	6938      	ldr	r0, [r7, #16]
   194f6:	f7ff fd15 	bl	18f24 <error_check>
   194fa:	f7ff fe29 	bl	19150 <HciDrvRadioShutdown>
   194fe:	2000      	movs	r0, #0
   19500:	f7ff fd2c 	bl	18f5c <HciDrvRadioBoot>
   19504:	f000 f87e 	bl	19604 <HciDrvEmptyWriteQueue>
   19508:	f7f6 fa92 	bl	fa30 <DmDevReset>
   1950c:	e05d      	b.n	195ca <HciDrvHandler+0x24a>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   1950e:	69fb      	ldr	r3, [r7, #28]
   19510:	2b03      	cmp	r3, #3
   19512:	d93e      	bls.n	19592 <HciDrvHandler+0x212>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19514:	4b32      	ldr	r3, [pc, #200]	; (195e0 <HciDrvHandler+0x260>)
   19516:	781b      	ldrb	r3, [r3, #0]
   19518:	2101      	movs	r1, #1
   1951a:	4618      	mov	r0, r3
   1951c:	f7ff fb78 	bl	18c10 <WsfSetEvent>

                break;
   19520:	e041      	b.n	195a6 <HciDrvHandler+0x226>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   19522:	4b36      	ldr	r3, [pc, #216]	; (195fc <HciDrvHandler+0x27c>)
   19524:	689b      	ldr	r3, [r3, #8]
   19526:	2b00      	cmp	r3, #0
   19528:	d03c      	beq.n	195a4 <HciDrvHandler+0x224>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   1952a:	4b34      	ldr	r3, [pc, #208]	; (195fc <HciDrvHandler+0x27c>)
   1952c:	695a      	ldr	r2, [r3, #20]
   1952e:	4b33      	ldr	r3, [pc, #204]	; (195fc <HciDrvHandler+0x27c>)
   19530:	685b      	ldr	r3, [r3, #4]
   19532:	4413      	add	r3, r2
   19534:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   19536:	4b2d      	ldr	r3, [pc, #180]	; (195ec <HciDrvHandler+0x26c>)
   19538:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   1953a:	697b      	ldr	r3, [r7, #20]
   1953c:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   1953e:	697b      	ldr	r3, [r7, #20]
   19540:	681b      	ldr	r3, [r3, #0]
   19542:	2100      	movs	r1, #0
   19544:	f007 fcce 	bl	20ee4 <am_hal_ble_blocking_hci_write>
   19548:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1954a:	693b      	ldr	r3, [r7, #16]
   1954c:	2b00      	cmp	r3, #0
   1954e:	d111      	bne.n	19574 <HciDrvHandler+0x1f4>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   19550:	481f      	ldr	r0, [pc, #124]	; (195d0 <HciDrvHandler+0x250>)
   19552:	f001 f9a5 	bl	1a8a0 <WsfTimerStop>
   19556:	f242 7110 	movw	r1, #10000	; 0x2710
   1955a:	481d      	ldr	r0, [pc, #116]	; (195d0 <HciDrvHandler+0x250>)
   1955c:	f001 f98c 	bl	1a878 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   19560:	2201      	movs	r2, #1
   19562:	2100      	movs	r1, #0
   19564:	4825      	ldr	r0, [pc, #148]	; (195fc <HciDrvHandler+0x27c>)
   19566:	f008 ff59 	bl	2241c <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   1956a:	2300      	movs	r3, #0
   1956c:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   1956e:	2300      	movs	r3, #0
   19570:	623b      	str	r3, [r7, #32]
   19572:	e00e      	b.n	19592 <HciDrvHandler+0x212>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   19574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19576:	3301      	adds	r3, #1
   19578:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   1957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1957c:	f242 7210 	movw	r2, #10000	; 0x2710
   19580:	4293      	cmp	r3, r2
   19582:	d906      	bls.n	19592 <HciDrvHandler+0x212>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   19584:	4b16      	ldr	r3, [pc, #88]	; (195e0 <HciDrvHandler+0x260>)
   19586:	781b      	ldrb	r3, [r3, #0]
   19588:	2101      	movs	r1, #1
   1958a:	4618      	mov	r0, r3
   1958c:	f7ff fb40 	bl	18c10 <WsfSetEvent>
                        break;
   19590:	e009      	b.n	195a6 <HciDrvHandler+0x226>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   19592:	6a3b      	ldr	r3, [r7, #32]
   19594:	1c5a      	adds	r2, r3, #1
   19596:	623a      	str	r2, [r7, #32]
   19598:	f242 720f 	movw	r2, #9999	; 0x270f
   1959c:	4293      	cmp	r3, r2
   1959e:	f67f af39 	bls.w	19414 <HciDrvHandler+0x94>
   195a2:	e000      	b.n	195a6 <HciDrvHandler+0x226>
                break;
   195a4:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   195a6:	6a3b      	ldr	r3, [r7, #32]
   195a8:	f242 7210 	movw	r2, #10000	; 0x2710
   195ac:	4293      	cmp	r3, r2
   195ae:	d10c      	bne.n	195ca <HciDrvHandler+0x24a>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   195b0:	4813      	ldr	r0, [pc, #76]	; (19600 <HciDrvHandler+0x280>)
   195b2:	f7ff fcb7 	bl	18f24 <error_check>
   195b6:	f7ff fdcb 	bl	19150 <HciDrvRadioShutdown>
   195ba:	2000      	movs	r0, #0
   195bc:	f7ff fcce 	bl	18f5c <HciDrvRadioBoot>
   195c0:	f000 f820 	bl	19604 <HciDrvEmptyWriteQueue>
   195c4:	f7f6 fa34 	bl	fa30 <DmDevReset>
   195c8:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   195ca:	3728      	adds	r7, #40	; 0x28
   195cc:	46bd      	mov	sp, r7
   195ce:	bd80      	pop	{r7, pc}
   195d0:	100094cc 	.word	0x100094cc
   195d4:	10004240 	.word	0x10004240
   195d8:	10004244 	.word	0x10004244
   195dc:	10002b98 	.word	0x10002b98
   195e0:	1000423c 	.word	0x1000423c
   195e4:	5000c000 	.word	0x5000c000
   195e8:	10004248 	.word	0x10004248
   195ec:	10009dfc 	.word	0x10009dfc
   195f0:	100094dc 	.word	0x100094dc
   195f4:	09000002 	.word	0x09000002
   195f8:	000229b8 	.word	0x000229b8
   195fc:	100094b4 	.word	0x100094b4
   19600:	09000006 	.word	0x09000006

00019604 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   19604:	b580      	push	{r7, lr}
   19606:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   19608:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1960c:	f44f 7282 	mov.w	r2, #260	; 0x104
   19610:	4902      	ldr	r1, [pc, #8]	; (1961c <HciDrvEmptyWriteQueue+0x18>)
   19612:	4803      	ldr	r0, [pc, #12]	; (19620 <HciDrvEmptyWriteQueue+0x1c>)
   19614:	f008 febe 	bl	22394 <am_hal_queue_init>
}
   19618:	bf00      	nop
   1961a:	bd80      	pop	{r7, pc}
   1961c:	100095dc 	.word	0x100095dc
   19620:	100094b4 	.word	0x100094b4

00019624 <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   19624:	b480      	push	{r7}
   19626:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   19628:	bf00      	nop
}
   1962a:	46bd      	mov	sp, r7
   1962c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19630:	4770      	bx	lr
	...

00019634 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   19634:	b580      	push	{r7, lr}
   19636:	b084      	sub	sp, #16
   19638:	af00      	add	r7, sp, #0
   1963a:	4603      	mov	r3, r0
   1963c:	6039      	str	r1, [r7, #0]
   1963e:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19640:	4b22      	ldr	r3, [pc, #136]	; (196cc <AppDbNewRecord+0x98>)
   19642:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19644:	2303      	movs	r3, #3
   19646:	72fb      	strb	r3, [r7, #11]
   19648:	e00a      	b.n	19660 <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   1964a:	68fb      	ldr	r3, [r7, #12]
   1964c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19650:	2b00      	cmp	r3, #0
   19652:	d009      	beq.n	19668 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19654:	7afb      	ldrb	r3, [r7, #11]
   19656:	3b01      	subs	r3, #1
   19658:	72fb      	strb	r3, [r7, #11]
   1965a:	68fb      	ldr	r3, [r7, #12]
   1965c:	33b0      	adds	r3, #176	; 0xb0
   1965e:	60fb      	str	r3, [r7, #12]
   19660:	7afb      	ldrb	r3, [r7, #11]
   19662:	2b00      	cmp	r3, #0
   19664:	d1f1      	bne.n	1964a <AppDbNewRecord+0x16>
   19666:	e000      	b.n	1966a <AppDbNewRecord+0x36>
    {
      break;
   19668:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   1966a:	7afb      	ldrb	r3, [r7, #11]
   1966c:	2b00      	cmp	r3, #0
   1966e:	d10f      	bne.n	19690 <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   19670:	4b17      	ldr	r3, [pc, #92]	; (196d0 <AppDbNewRecord+0x9c>)
   19672:	681b      	ldr	r3, [r3, #0]
   19674:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   19676:	4b16      	ldr	r3, [pc, #88]	; (196d0 <AppDbNewRecord+0x9c>)
   19678:	681b      	ldr	r3, [r3, #0]
   1967a:	33b0      	adds	r3, #176	; 0xb0
   1967c:	4a14      	ldr	r2, [pc, #80]	; (196d0 <AppDbNewRecord+0x9c>)
   1967e:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   19680:	4b13      	ldr	r3, [pc, #76]	; (196d0 <AppDbNewRecord+0x9c>)
   19682:	681b      	ldr	r3, [r3, #0]
   19684:	4a13      	ldr	r2, [pc, #76]	; (196d4 <AppDbNewRecord+0xa0>)
   19686:	4293      	cmp	r3, r2
   19688:	d102      	bne.n	19690 <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   1968a:	4b11      	ldr	r3, [pc, #68]	; (196d0 <AppDbNewRecord+0x9c>)
   1968c:	4a0f      	ldr	r2, [pc, #60]	; (196cc <AppDbNewRecord+0x98>)
   1968e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   19690:	22b0      	movs	r2, #176	; 0xb0
   19692:	2100      	movs	r1, #0
   19694:	68f8      	ldr	r0, [r7, #12]
   19696:	f7f2 fe61 	bl	c35c <memset>
  pRec->inUse = TRUE;
   1969a:	68fb      	ldr	r3, [r7, #12]
   1969c:	2201      	movs	r2, #1
   1969e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   196a2:	68fb      	ldr	r3, [r7, #12]
   196a4:	79fa      	ldrb	r2, [r7, #7]
   196a6:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   196a8:	68fb      	ldr	r3, [r7, #12]
   196aa:	6839      	ldr	r1, [r7, #0]
   196ac:	4618      	mov	r0, r3
   196ae:	f7fa f9ef 	bl	13a90 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   196b2:	68fb      	ldr	r3, [r7, #12]
   196b4:	2200      	movs	r2, #0
   196b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   196ba:	68fb      	ldr	r3, [r7, #12]
   196bc:	2200      	movs	r2, #0
   196be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   196c2:	68fb      	ldr	r3, [r7, #12]
}
   196c4:	4618      	mov	r0, r3
   196c6:	3710      	adds	r7, #16
   196c8:	46bd      	mov	sp, r7
   196ca:	bd80      	pop	{r7, pc}
   196cc:	10004254 	.word	0x10004254
   196d0:	10002b9c 	.word	0x10002b9c
   196d4:	10004464 	.word	0x10004464

000196d8 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   196d8:	b580      	push	{r7, lr}
   196da:	b084      	sub	sp, #16
   196dc:	af00      	add	r7, sp, #0
   196de:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   196e0:	687b      	ldr	r3, [r7, #4]
   196e2:	2b00      	cmp	r3, #0
   196e4:	d102      	bne.n	196ec <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   196e6:	4b14      	ldr	r3, [pc, #80]	; (19738 <AppDbGetNextRecord+0x60>)
   196e8:	60fb      	str	r3, [r7, #12]
   196ea:	e01c      	b.n	19726 <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   196ec:	6878      	ldr	r0, [r7, #4]
   196ee:	f000 f859 	bl	197a4 <AppDbRecordInUse>
   196f2:	4603      	mov	r3, r0
   196f4:	2b00      	cmp	r3, #0
   196f6:	d005      	beq.n	19704 <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   196f8:	687b      	ldr	r3, [r7, #4]
   196fa:	60fb      	str	r3, [r7, #12]
    pRec++;
   196fc:	68fb      	ldr	r3, [r7, #12]
   196fe:	33b0      	adds	r3, #176	; 0xb0
   19700:	60fb      	str	r3, [r7, #12]
   19702:	e010      	b.n	19726 <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   19704:	2300      	movs	r3, #0
   19706:	e013      	b.n	19730 <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   19708:	68fb      	ldr	r3, [r7, #12]
   1970a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1970e:	2b00      	cmp	r3, #0
   19710:	d006      	beq.n	19720 <AppDbGetNextRecord+0x48>
   19712:	68fb      	ldr	r3, [r7, #12]
   19714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19718:	2b00      	cmp	r3, #0
   1971a:	d001      	beq.n	19720 <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   1971c:	68fb      	ldr	r3, [r7, #12]
   1971e:	e007      	b.n	19730 <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   19720:	68fb      	ldr	r3, [r7, #12]
   19722:	33b0      	adds	r3, #176	; 0xb0
   19724:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   19726:	68fb      	ldr	r3, [r7, #12]
   19728:	4a04      	ldr	r2, [pc, #16]	; (1973c <AppDbGetNextRecord+0x64>)
   1972a:	4293      	cmp	r3, r2
   1972c:	d3ec      	bcc.n	19708 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   1972e:	2300      	movs	r3, #0
}
   19730:	4618      	mov	r0, r3
   19732:	3710      	adds	r7, #16
   19734:	46bd      	mov	sp, r7
   19736:	bd80      	pop	{r7, pc}
   19738:	10004254 	.word	0x10004254
   1973c:	10004464 	.word	0x10004464

00019740 <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   19740:	b480      	push	{r7}
   19742:	b083      	sub	sp, #12
   19744:	af00      	add	r7, sp, #0
   19746:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   19748:	687b      	ldr	r3, [r7, #4]
   1974a:	2200      	movs	r2, #0
   1974c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   19750:	bf00      	nop
   19752:	370c      	adds	r7, #12
   19754:	46bd      	mov	sp, r7
   19756:	f85d 7b04 	ldr.w	r7, [sp], #4
   1975a:	4770      	bx	lr

0001975c <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   1975c:	b480      	push	{r7}
   1975e:	b083      	sub	sp, #12
   19760:	af00      	add	r7, sp, #0
   19762:	6078      	str	r0, [r7, #4]
   19764:	460b      	mov	r3, r1
   19766:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   19768:	687b      	ldr	r3, [r7, #4]
   1976a:	2201      	movs	r2, #1
   1976c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   19770:	687b      	ldr	r3, [r7, #4]
   19772:	78fa      	ldrb	r2, [r7, #3]
   19774:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   19778:	bf00      	nop
   1977a:	370c      	adds	r7, #12
   1977c:	46bd      	mov	sp, r7
   1977e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19782:	4770      	bx	lr

00019784 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   19784:	b580      	push	{r7, lr}
   19786:	b082      	sub	sp, #8
   19788:	af00      	add	r7, sp, #0
   1978a:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   1978c:	687b      	ldr	r3, [r7, #4]
   1978e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19792:	2b00      	cmp	r3, #0
   19794:	d102      	bne.n	1979c <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   19796:	6878      	ldr	r0, [r7, #4]
   19798:	f7ff ffd2 	bl	19740 <AppDbDeleteRecord>
  }
}
   1979c:	bf00      	nop
   1979e:	3708      	adds	r7, #8
   197a0:	46bd      	mov	sp, r7
   197a2:	bd80      	pop	{r7, pc}

000197a4 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   197a4:	b480      	push	{r7}
   197a6:	b085      	sub	sp, #20
   197a8:	af00      	add	r7, sp, #0
   197aa:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   197ac:	4b12      	ldr	r3, [pc, #72]	; (197f8 <AppDbRecordInUse+0x54>)
   197ae:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   197b0:	2303      	movs	r3, #3
   197b2:	72fb      	strb	r3, [r7, #11]
   197b4:	e015      	b.n	197e2 <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   197b6:	68fb      	ldr	r3, [r7, #12]
   197b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   197bc:	2b00      	cmp	r3, #0
   197be:	d00a      	beq.n	197d6 <AppDbRecordInUse+0x32>
   197c0:	68fb      	ldr	r3, [r7, #12]
   197c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   197c6:	2b00      	cmp	r3, #0
   197c8:	d005      	beq.n	197d6 <AppDbRecordInUse+0x32>
   197ca:	68fa      	ldr	r2, [r7, #12]
   197cc:	687b      	ldr	r3, [r7, #4]
   197ce:	429a      	cmp	r2, r3
   197d0:	d101      	bne.n	197d6 <AppDbRecordInUse+0x32>
    {
      return TRUE;
   197d2:	2301      	movs	r3, #1
   197d4:	e009      	b.n	197ea <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   197d6:	7afb      	ldrb	r3, [r7, #11]
   197d8:	3b01      	subs	r3, #1
   197da:	72fb      	strb	r3, [r7, #11]
   197dc:	68fb      	ldr	r3, [r7, #12]
   197de:	33b0      	adds	r3, #176	; 0xb0
   197e0:	60fb      	str	r3, [r7, #12]
   197e2:	7afb      	ldrb	r3, [r7, #11]
   197e4:	2b00      	cmp	r3, #0
   197e6:	d1e6      	bne.n	197b6 <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   197e8:	2300      	movs	r3, #0
}
   197ea:	4618      	mov	r0, r3
   197ec:	3714      	adds	r7, #20
   197ee:	46bd      	mov	sp, r7
   197f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   197f4:	4770      	bx	lr
   197f6:	bf00      	nop
   197f8:	10004254 	.word	0x10004254

000197fc <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   197fc:	b480      	push	{r7}
   197fe:	b083      	sub	sp, #12
   19800:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19802:	4b0e      	ldr	r3, [pc, #56]	; (1983c <AppDbCheckBonded+0x40>)
   19804:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19806:	2303      	movs	r3, #3
   19808:	70fb      	strb	r3, [r7, #3]
   1980a:	e00c      	b.n	19826 <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   1980c:	687b      	ldr	r3, [r7, #4]
   1980e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19812:	2b00      	cmp	r3, #0
   19814:	d001      	beq.n	1981a <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   19816:	2301      	movs	r3, #1
   19818:	e009      	b.n	1982e <AppDbCheckBonded+0x32>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1981a:	78fb      	ldrb	r3, [r7, #3]
   1981c:	3b01      	subs	r3, #1
   1981e:	70fb      	strb	r3, [r7, #3]
   19820:	687b      	ldr	r3, [r7, #4]
   19822:	33b0      	adds	r3, #176	; 0xb0
   19824:	607b      	str	r3, [r7, #4]
   19826:	78fb      	ldrb	r3, [r7, #3]
   19828:	2b00      	cmp	r3, #0
   1982a:	d1ef      	bne.n	1980c <AppDbCheckBonded+0x10>
    }
  }
  
  return FALSE;
   1982c:	2300      	movs	r3, #0
}
   1982e:	4618      	mov	r0, r3
   19830:	370c      	adds	r7, #12
   19832:	46bd      	mov	sp, r7
   19834:	f85d 7b04 	ldr.w	r7, [sp], #4
   19838:	4770      	bx	lr
   1983a:	bf00      	nop
   1983c:	10004254 	.word	0x10004254

00019840 <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   19840:	b480      	push	{r7}
   19842:	b083      	sub	sp, #12
   19844:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19846:	4b0c      	ldr	r3, [pc, #48]	; (19878 <AppDbDeleteAllRecords+0x38>)
   19848:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1984a:	2303      	movs	r3, #3
   1984c:	70fb      	strb	r3, [r7, #3]
   1984e:	e009      	b.n	19864 <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   19850:	687b      	ldr	r3, [r7, #4]
   19852:	2200      	movs	r2, #0
   19854:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19858:	78fb      	ldrb	r3, [r7, #3]
   1985a:	3b01      	subs	r3, #1
   1985c:	70fb      	strb	r3, [r7, #3]
   1985e:	687b      	ldr	r3, [r7, #4]
   19860:	33b0      	adds	r3, #176	; 0xb0
   19862:	607b      	str	r3, [r7, #4]
   19864:	78fb      	ldrb	r3, [r7, #3]
   19866:	2b00      	cmp	r3, #0
   19868:	d1f2      	bne.n	19850 <AppDbDeleteAllRecords+0x10>
  }  
}
   1986a:	bf00      	nop
   1986c:	370c      	adds	r7, #12
   1986e:	46bd      	mov	sp, r7
   19870:	f85d 7b04 	ldr.w	r7, [sp], #4
   19874:	4770      	bx	lr
   19876:	bf00      	nop
   19878:	10004254 	.word	0x10004254

0001987c <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   1987c:	b580      	push	{r7, lr}
   1987e:	b084      	sub	sp, #16
   19880:	af00      	add	r7, sp, #0
   19882:	4603      	mov	r3, r0
   19884:	6039      	str	r1, [r7, #0]
   19886:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19888:	4b16      	ldr	r3, [pc, #88]	; (198e4 <AppDbFindByAddr+0x68>)
   1988a:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   1988c:	79fb      	ldrb	r3, [r7, #7]
   1988e:	4618      	mov	r0, r3
   19890:	f7f6 f990 	bl	fbb4 <DmHostAddrType>
   19894:	4603      	mov	r3, r0
   19896:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19898:	2303      	movs	r3, #3
   1989a:	72fb      	strb	r3, [r7, #11]
   1989c:	e019      	b.n	198d2 <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   1989e:	68fb      	ldr	r3, [r7, #12]
   198a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   198a4:	2b00      	cmp	r3, #0
   198a6:	d00e      	beq.n	198c6 <AppDbFindByAddr+0x4a>
   198a8:	68fb      	ldr	r3, [r7, #12]
   198aa:	799b      	ldrb	r3, [r3, #6]
   198ac:	7aba      	ldrb	r2, [r7, #10]
   198ae:	429a      	cmp	r2, r3
   198b0:	d109      	bne.n	198c6 <AppDbFindByAddr+0x4a>
   198b2:	68fb      	ldr	r3, [r7, #12]
   198b4:	6839      	ldr	r1, [r7, #0]
   198b6:	4618      	mov	r0, r3
   198b8:	f7fa f8f8 	bl	13aac <BdaCmp>
   198bc:	4603      	mov	r3, r0
   198be:	2b00      	cmp	r3, #0
   198c0:	d001      	beq.n	198c6 <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   198c2:	68fb      	ldr	r3, [r7, #12]
   198c4:	e009      	b.n	198da <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   198c6:	7afb      	ldrb	r3, [r7, #11]
   198c8:	3b01      	subs	r3, #1
   198ca:	72fb      	strb	r3, [r7, #11]
   198cc:	68fb      	ldr	r3, [r7, #12]
   198ce:	33b0      	adds	r3, #176	; 0xb0
   198d0:	60fb      	str	r3, [r7, #12]
   198d2:	7afb      	ldrb	r3, [r7, #11]
   198d4:	2b00      	cmp	r3, #0
   198d6:	d1e2      	bne.n	1989e <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   198d8:	2300      	movs	r3, #0
}
   198da:	4618      	mov	r0, r3
   198dc:	3710      	adds	r7, #16
   198de:	46bd      	mov	sp, r7
   198e0:	bd80      	pop	{r7, pc}
   198e2:	bf00      	nop
   198e4:	10004254 	.word	0x10004254

000198e8 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   198e8:	b580      	push	{r7, lr}
   198ea:	b084      	sub	sp, #16
   198ec:	af00      	add	r7, sp, #0
   198ee:	4603      	mov	r3, r0
   198f0:	6039      	str	r1, [r7, #0]
   198f2:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   198f4:	4b14      	ldr	r3, [pc, #80]	; (19948 <AppDbFindByLtkReq+0x60>)
   198f6:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   198f8:	2303      	movs	r3, #3
   198fa:	72fb      	strb	r3, [r7, #11]
   198fc:	e01c      	b.n	19938 <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   198fe:	68fb      	ldr	r3, [r7, #12]
   19900:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19904:	2b00      	cmp	r3, #0
   19906:	d011      	beq.n	1992c <AppDbFindByLtkReq+0x44>
   19908:	68fb      	ldr	r3, [r7, #12]
   1990a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   1990e:	88fa      	ldrh	r2, [r7, #6]
   19910:	429a      	cmp	r2, r3
   19912:	d10b      	bne.n	1992c <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   19914:	68fb      	ldr	r3, [r7, #12]
   19916:	3344      	adds	r3, #68	; 0x44
   19918:	2208      	movs	r2, #8
   1991a:	6839      	ldr	r1, [r7, #0]
   1991c:	4618      	mov	r0, r3
   1991e:	f7f2 fbef 	bl	c100 <memcmp>
   19922:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   19924:	2b00      	cmp	r3, #0
   19926:	d101      	bne.n	1992c <AppDbFindByLtkReq+0x44>
    {
      return (appDbHdl_t) pRec;
   19928:	68fb      	ldr	r3, [r7, #12]
   1992a:	e009      	b.n	19940 <AppDbFindByLtkReq+0x58>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   1992c:	7afb      	ldrb	r3, [r7, #11]
   1992e:	3b01      	subs	r3, #1
   19930:	72fb      	strb	r3, [r7, #11]
   19932:	68fb      	ldr	r3, [r7, #12]
   19934:	33b0      	adds	r3, #176	; 0xb0
   19936:	60fb      	str	r3, [r7, #12]
   19938:	7afb      	ldrb	r3, [r7, #11]
   1993a:	2b00      	cmp	r3, #0
   1993c:	d1df      	bne.n	198fe <AppDbFindByLtkReq+0x16>
    }
  }
  
  return APP_DB_HDL_NONE;
   1993e:	2300      	movs	r3, #0
}
   19940:	4618      	mov	r0, r3
   19942:	3710      	adds	r7, #16
   19944:	46bd      	mov	sp, r7
   19946:	bd80      	pop	{r7, pc}
   19948:	10004254 	.word	0x10004254

0001994c <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   1994c:	b480      	push	{r7}
   1994e:	b087      	sub	sp, #28
   19950:	af00      	add	r7, sp, #0
   19952:	60f8      	str	r0, [r7, #12]
   19954:	460b      	mov	r3, r1
   19956:	607a      	str	r2, [r7, #4]
   19958:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   1995a:	2300      	movs	r3, #0
   1995c:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   1995e:	68fb      	ldr	r3, [r7, #12]
   19960:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   19964:	7afb      	ldrb	r3, [r7, #11]
   19966:	4013      	ands	r3, r2
   19968:	b2db      	uxtb	r3, r3
   1996a:	2b00      	cmp	r3, #0
   1996c:	d031      	beq.n	199d2 <AppDbGetKey+0x86>
  {
    switch(type)
   1996e:	7afb      	ldrb	r3, [r7, #11]
   19970:	3b01      	subs	r3, #1
   19972:	2b07      	cmp	r3, #7
   19974:	d82c      	bhi.n	199d0 <AppDbGetKey+0x84>
   19976:	a201      	add	r2, pc, #4	; (adr r2, 1997c <AppDbGetKey+0x30>)
   19978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1997c:	0001999d 	.word	0x0001999d
   19980:	000199af 	.word	0x000199af
   19984:	000199d1 	.word	0x000199d1
   19988:	000199c1 	.word	0x000199c1
   1998c:	000199d1 	.word	0x000199d1
   19990:	000199d1 	.word	0x000199d1
   19994:	000199d1 	.word	0x000199d1
   19998:	000199c9 	.word	0x000199c9
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1999c:	68fb      	ldr	r3, [r7, #12]
   1999e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   199a2:	687b      	ldr	r3, [r7, #4]
   199a4:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   199a6:	68fb      	ldr	r3, [r7, #12]
   199a8:	3334      	adds	r3, #52	; 0x34
   199aa:	617b      	str	r3, [r7, #20]
        break;
   199ac:	e011      	b.n	199d2 <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   199ae:	68fb      	ldr	r3, [r7, #12]
   199b0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   199b4:	687b      	ldr	r3, [r7, #4]
   199b6:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   199b8:	68fb      	ldr	r3, [r7, #12]
   199ba:	3350      	adds	r3, #80	; 0x50
   199bc:	617b      	str	r3, [r7, #20]
        break;
   199be:	e008      	b.n	199d2 <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   199c0:	68fb      	ldr	r3, [r7, #12]
   199c2:	3307      	adds	r3, #7
   199c4:	617b      	str	r3, [r7, #20]
        break;
   199c6:	e004      	b.n	199d2 <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   199c8:	68fb      	ldr	r3, [r7, #12]
   199ca:	331e      	adds	r3, #30
   199cc:	617b      	str	r3, [r7, #20]
        break;
   199ce:	e000      	b.n	199d2 <AppDbGetKey+0x86>
        
      default:
        break;
   199d0:	bf00      	nop
    }
  }
  
  return pKey;
   199d2:	697b      	ldr	r3, [r7, #20]
}
   199d4:	4618      	mov	r0, r3
   199d6:	371c      	adds	r7, #28
   199d8:	46bd      	mov	sp, r7
   199da:	f85d 7b04 	ldr.w	r7, [sp], #4
   199de:	4770      	bx	lr

000199e0 <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   199e0:	b5b0      	push	{r4, r5, r7, lr}
   199e2:	b082      	sub	sp, #8
   199e4:	af00      	add	r7, sp, #0
   199e6:	6078      	str	r0, [r7, #4]
   199e8:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   199ea:	683b      	ldr	r3, [r7, #0]
   199ec:	7f9b      	ldrb	r3, [r3, #30]
   199ee:	3b01      	subs	r3, #1
   199f0:	2b07      	cmp	r3, #7
   199f2:	d86c      	bhi.n	19ace <AppDbSetKey+0xee>
   199f4:	a201      	add	r2, pc, #4	; (adr r2, 199fc <AppDbSetKey+0x1c>)
   199f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   199fa:	bf00      	nop
   199fc:	00019a1d 	.word	0x00019a1d
   19a00:	00019a47 	.word	0x00019a47
   19a04:	00019acf 	.word	0x00019acf
   19a08:	00019a71 	.word	0x00019a71
   19a0c:	00019acf 	.word	0x00019acf
   19a10:	00019acf 	.word	0x00019acf
   19a14:	00019acf 	.word	0x00019acf
   19a18:	00019aad 	.word	0x00019aad
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   19a1c:	683b      	ldr	r3, [r7, #0]
   19a1e:	7fda      	ldrb	r2, [r3, #31]
   19a20:	687b      	ldr	r3, [r7, #4]
   19a22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   19a26:	687a      	ldr	r2, [r7, #4]
   19a28:	683b      	ldr	r3, [r7, #0]
   19a2a:	f102 0434 	add.w	r4, r2, #52	; 0x34
   19a2e:	1d1d      	adds	r5, r3, #4
   19a30:	6828      	ldr	r0, [r5, #0]
   19a32:	6869      	ldr	r1, [r5, #4]
   19a34:	68aa      	ldr	r2, [r5, #8]
   19a36:	68eb      	ldr	r3, [r5, #12]
   19a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19a3a:	6928      	ldr	r0, [r5, #16]
   19a3c:	6969      	ldr	r1, [r5, #20]
   19a3e:	c403      	stmia	r4!, {r0, r1}
   19a40:	8b2b      	ldrh	r3, [r5, #24]
   19a42:	8023      	strh	r3, [r4, #0]
      break;
   19a44:	e044      	b.n	19ad0 <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   19a46:	683b      	ldr	r3, [r7, #0]
   19a48:	7fda      	ldrb	r2, [r3, #31]
   19a4a:	687b      	ldr	r3, [r7, #4]
   19a4c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   19a50:	687a      	ldr	r2, [r7, #4]
   19a52:	683b      	ldr	r3, [r7, #0]
   19a54:	f102 0450 	add.w	r4, r2, #80	; 0x50
   19a58:	1d1d      	adds	r5, r3, #4
   19a5a:	6828      	ldr	r0, [r5, #0]
   19a5c:	6869      	ldr	r1, [r5, #4]
   19a5e:	68aa      	ldr	r2, [r5, #8]
   19a60:	68eb      	ldr	r3, [r5, #12]
   19a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19a64:	6928      	ldr	r0, [r5, #16]
   19a66:	6969      	ldr	r1, [r5, #20]
   19a68:	c403      	stmia	r4!, {r0, r1}
   19a6a:	8b2b      	ldrh	r3, [r5, #24]
   19a6c:	8023      	strh	r3, [r4, #0]
      break;
   19a6e:	e02f      	b.n	19ad0 <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   19a70:	687b      	ldr	r3, [r7, #4]
   19a72:	683a      	ldr	r2, [r7, #0]
   19a74:	3307      	adds	r3, #7
   19a76:	3204      	adds	r2, #4
   19a78:	6811      	ldr	r1, [r2, #0]
   19a7a:	6855      	ldr	r5, [r2, #4]
   19a7c:	6894      	ldr	r4, [r2, #8]
   19a7e:	68d0      	ldr	r0, [r2, #12]
   19a80:	6019      	str	r1, [r3, #0]
   19a82:	605d      	str	r5, [r3, #4]
   19a84:	609c      	str	r4, [r3, #8]
   19a86:	60d8      	str	r0, [r3, #12]
   19a88:	6911      	ldr	r1, [r2, #16]
   19a8a:	6119      	str	r1, [r3, #16]
   19a8c:	8a91      	ldrh	r1, [r2, #20]
   19a8e:	7d92      	ldrb	r2, [r2, #22]
   19a90:	8299      	strh	r1, [r3, #20]
   19a92:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   19a94:	683b      	ldr	r3, [r7, #0]
   19a96:	7e9a      	ldrb	r2, [r3, #26]
   19a98:	687b      	ldr	r3, [r7, #4]
   19a9a:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   19a9c:	687a      	ldr	r2, [r7, #4]
   19a9e:	683b      	ldr	r3, [r7, #0]
   19aa0:	3314      	adds	r3, #20
   19aa2:	4619      	mov	r1, r3
   19aa4:	4610      	mov	r0, r2
   19aa6:	f7f9 fff3 	bl	13a90 <BdaCpy>
      break;
   19aaa:	e011      	b.n	19ad0 <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   19aac:	687b      	ldr	r3, [r7, #4]
   19aae:	683a      	ldr	r2, [r7, #0]
   19ab0:	331e      	adds	r3, #30
   19ab2:	3204      	adds	r2, #4
   19ab4:	6814      	ldr	r4, [r2, #0]
   19ab6:	6850      	ldr	r0, [r2, #4]
   19ab8:	6891      	ldr	r1, [r2, #8]
   19aba:	68d2      	ldr	r2, [r2, #12]
   19abc:	601c      	str	r4, [r3, #0]
   19abe:	6058      	str	r0, [r3, #4]
   19ac0:	6099      	str	r1, [r3, #8]
   19ac2:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   19ac4:	687b      	ldr	r3, [r7, #4]
   19ac6:	2200      	movs	r2, #0
   19ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   19acc:	e000      	b.n	19ad0 <AppDbSetKey+0xf0>
      
    default:
      break;
   19ace:	bf00      	nop
  }
}
   19ad0:	bf00      	nop
   19ad2:	3708      	adds	r7, #8
   19ad4:	46bd      	mov	sp, r7
   19ad6:	bdb0      	pop	{r4, r5, r7, pc}

00019ad8 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   19ad8:	b480      	push	{r7}
   19ada:	b083      	sub	sp, #12
   19adc:	af00      	add	r7, sp, #0
   19ade:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   19ae0:	687b      	ldr	r3, [r7, #4]
   19ae2:	336c      	adds	r3, #108	; 0x6c
}
   19ae4:	4618      	mov	r0, r3
   19ae6:	370c      	adds	r7, #12
   19ae8:	46bd      	mov	sp, r7
   19aea:	f85d 7b04 	ldr.w	r7, [sp], #4
   19aee:	4770      	bx	lr

00019af0 <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   19af0:	b480      	push	{r7}
   19af2:	b083      	sub	sp, #12
   19af4:	af00      	add	r7, sp, #0
   19af6:	6078      	str	r0, [r7, #4]
   19af8:	460b      	mov	r3, r1
   19afa:	807b      	strh	r3, [r7, #2]
   19afc:	4613      	mov	r3, r2
   19afe:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   19b00:	887b      	ldrh	r3, [r7, #2]
   19b02:	687a      	ldr	r2, [r7, #4]
   19b04:	3334      	adds	r3, #52	; 0x34
   19b06:	005b      	lsls	r3, r3, #1
   19b08:	4413      	add	r3, r2
   19b0a:	883a      	ldrh	r2, [r7, #0]
   19b0c:	809a      	strh	r2, [r3, #4]
}
   19b0e:	bf00      	nop
   19b10:	370c      	adds	r7, #12
   19b12:	46bd      	mov	sp, r7
   19b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b18:	4770      	bx	lr

00019b1a <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   19b1a:	b480      	push	{r7}
   19b1c:	b083      	sub	sp, #12
   19b1e:	af00      	add	r7, sp, #0
   19b20:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   19b22:	687b      	ldr	r3, [r7, #4]
   19b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   19b28:	4618      	mov	r0, r3
   19b2a:	370c      	adds	r7, #12
   19b2c:	46bd      	mov	sp, r7
   19b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b32:	4770      	bx	lr

00019b34 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   19b34:	b480      	push	{r7}
   19b36:	b083      	sub	sp, #12
   19b38:	af00      	add	r7, sp, #0
   19b3a:	6078      	str	r0, [r7, #4]
   19b3c:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   19b3e:	687b      	ldr	r3, [r7, #4]
   19b40:	683a      	ldr	r2, [r7, #0]
   19b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   19b46:	bf00      	nop
   19b48:	370c      	adds	r7, #12
   19b4a:	46bd      	mov	sp, r7
   19b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b50:	4770      	bx	lr

00019b52 <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   19b52:	b480      	push	{r7}
   19b54:	b083      	sub	sp, #12
   19b56:	af00      	add	r7, sp, #0
   19b58:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   19b5a:	687b      	ldr	r3, [r7, #4]
   19b5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   19b60:	4618      	mov	r0, r3
   19b62:	370c      	adds	r7, #12
   19b64:	46bd      	mov	sp, r7
   19b66:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b6a:	4770      	bx	lr

00019b6c <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   19b6c:	b480      	push	{r7}
   19b6e:	b083      	sub	sp, #12
   19b70:	af00      	add	r7, sp, #0
   19b72:	6078      	str	r0, [r7, #4]
   19b74:	460b      	mov	r3, r1
   19b76:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   19b78:	687b      	ldr	r3, [r7, #4]
   19b7a:	78fa      	ldrb	r2, [r7, #3]
   19b7c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   19b80:	bf00      	nop
   19b82:	370c      	adds	r7, #12
   19b84:	46bd      	mov	sp, r7
   19b86:	f85d 7b04 	ldr.w	r7, [sp], #4
   19b8a:	4770      	bx	lr

00019b8c <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   19b8c:	b480      	push	{r7}
   19b8e:	b083      	sub	sp, #12
   19b90:	af00      	add	r7, sp, #0
   19b92:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   19b94:	687b      	ldr	r3, [r7, #4]
   19b96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   19b9a:	4618      	mov	r0, r3
   19b9c:	370c      	adds	r7, #12
   19b9e:	46bd      	mov	sp, r7
   19ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ba4:	4770      	bx	lr
	...

00019ba8 <AppHwBattRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwBattRead(uint8_t *pLevel)
{
   19ba8:	b480      	push	{r7}
   19baa:	b083      	sub	sp, #12
   19bac:	af00      	add	r7, sp, #0
   19bae:	6078      	str	r0, [r7, #4]
 *pLevel = appHwBattLevel;
   19bb0:	4b04      	ldr	r3, [pc, #16]	; (19bc4 <AppHwBattRead+0x1c>)
   19bb2:	781a      	ldrb	r2, [r3, #0]
   19bb4:	687b      	ldr	r3, [r7, #4]
   19bb6:	701a      	strb	r2, [r3, #0]
}
   19bb8:	bf00      	nop
   19bba:	370c      	adds	r7, #12
   19bbc:	46bd      	mov	sp, r7
   19bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   19bc2:	4770      	bx	lr
   19bc4:	10002ba0 	.word	0x10002ba0

00019bc8 <AppHwHrmRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmRead(appHrm_t *pHrm)
{
   19bc8:	b480      	push	{r7}
   19bca:	b083      	sub	sp, #12
   19bcc:	af00      	add	r7, sp, #0
   19bce:	6078      	str	r0, [r7, #4]
  pHrm->heartRate = appHwHeartRate;
   19bd0:	4b11      	ldr	r3, [pc, #68]	; (19c18 <AppHwHrmRead+0x50>)
   19bd2:	781a      	ldrb	r2, [r3, #0]
   19bd4:	687b      	ldr	r3, [r7, #4]
   19bd6:	721a      	strb	r2, [r3, #8]

  /* calculate simulated RR intervals from heart rate */
  appHwRrInterval[0] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
   19bd8:	4b0f      	ldr	r3, [pc, #60]	; (19c18 <AppHwHrmRead+0x50>)
   19bda:	781b      	ldrb	r3, [r3, #0]
   19bdc:	461a      	mov	r2, r3
   19bde:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   19be2:	fb93 f3f2 	sdiv	r3, r3, r2
   19be6:	b29a      	uxth	r2, r3
   19be8:	4b0c      	ldr	r3, [pc, #48]	; (19c1c <AppHwHrmRead+0x54>)
   19bea:	801a      	strh	r2, [r3, #0]
  appHwRrInterval[1] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
   19bec:	4b0a      	ldr	r3, [pc, #40]	; (19c18 <AppHwHrmRead+0x50>)
   19bee:	781b      	ldrb	r3, [r3, #0]
   19bf0:	461a      	mov	r2, r3
   19bf2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   19bf6:	fb93 f3f2 	sdiv	r3, r3, r2
   19bfa:	b29a      	uxth	r2, r3
   19bfc:	4b07      	ldr	r3, [pc, #28]	; (19c1c <AppHwHrmRead+0x54>)
   19bfe:	805a      	strh	r2, [r3, #2]
  
  pHrm->pRrInterval = appHwRrInterval;
   19c00:	687b      	ldr	r3, [r7, #4]
   19c02:	4a06      	ldr	r2, [pc, #24]	; (19c1c <AppHwHrmRead+0x54>)
   19c04:	601a      	str	r2, [r3, #0]
  pHrm->numIntervals = 2;
   19c06:	687b      	ldr	r3, [r7, #4]
   19c08:	2202      	movs	r2, #2
   19c0a:	711a      	strb	r2, [r3, #4]
}
   19c0c:	bf00      	nop
   19c0e:	370c      	adds	r7, #12
   19c10:	46bd      	mov	sp, r7
   19c12:	f85d 7b04 	ldr.w	r7, [sp], #4
   19c16:	4770      	bx	lr
   19c18:	10002ba1 	.word	0x10002ba1
   19c1c:	1000447c 	.word	0x1000447c

00019c20 <AppHwHrmTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmTest(uint8_t heartRate)
{
   19c20:	b480      	push	{r7}
   19c22:	b083      	sub	sp, #12
   19c24:	af00      	add	r7, sp, #0
   19c26:	4603      	mov	r3, r0
   19c28:	71fb      	strb	r3, [r7, #7]
  appHwHeartRate = heartRate;
   19c2a:	4a04      	ldr	r2, [pc, #16]	; (19c3c <AppHwHrmTest+0x1c>)
   19c2c:	79fb      	ldrb	r3, [r7, #7]
   19c2e:	7013      	strb	r3, [r2, #0]
}
   19c30:	bf00      	nop
   19c32:	370c      	adds	r7, #12
   19c34:	46bd      	mov	sp, r7
   19c36:	f85d 7b04 	ldr.w	r7, [sp], #4
   19c3a:	4770      	bx	lr
   19c3c:	10002ba1 	.word	0x10002ba1

00019c40 <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   19c40:	b580      	push	{r7, lr}
   19c42:	b082      	sub	sp, #8
   19c44:	af00      	add	r7, sp, #0
   19c46:	4603      	mov	r3, r0
   19c48:	71fb      	strb	r3, [r7, #7]
  switch (event)
   19c4a:	79fb      	ldrb	r3, [r7, #7]
   19c4c:	2b11      	cmp	r3, #17
   19c4e:	d868      	bhi.n	19d22 <AppUiAction+0xe2>
   19c50:	a201      	add	r2, pc, #4	; (adr r2, 19c58 <AppUiAction+0x18>)
   19c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19c56:	bf00      	nop
   19c58:	00019d21 	.word	0x00019d21
   19c5c:	00019ca1 	.word	0x00019ca1
   19c60:	00019d23 	.word	0x00019d23
   19c64:	00019ca9 	.word	0x00019ca9
   19c68:	00019cb1 	.word	0x00019cb1
   19c6c:	00019cb9 	.word	0x00019cb9
   19c70:	00019cc1 	.word	0x00019cc1
   19c74:	00019cc9 	.word	0x00019cc9
   19c78:	00019cd1 	.word	0x00019cd1
   19c7c:	00019cd9 	.word	0x00019cd9
   19c80:	00019ce1 	.word	0x00019ce1
   19c84:	00019ce9 	.word	0x00019ce9
   19c88:	00019cf1 	.word	0x00019cf1
   19c8c:	00019cf9 	.word	0x00019cf9
   19c90:	00019d01 	.word	0x00019d01
   19c94:	00019d09 	.word	0x00019d09
   19c98:	00019d11 	.word	0x00019d11
   19c9c:	00019d19 	.word	0x00019d19
    case APP_UI_NONE:
      /* no action */
      break;
      
    case APP_UI_RESET_CMPL:
      APP_TRACE_INFO0(">>> Reset complete <<<");
   19ca0:	4822      	ldr	r0, [pc, #136]	; (19d2c <AppUiAction+0xec>)
   19ca2:	f7ff f8d3 	bl	18e4c <WsfTrace>
      break;
   19ca6:	e03c      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_ADV_START:
      APP_TRACE_INFO0(">>> Advertising started <<<");
   19ca8:	4821      	ldr	r0, [pc, #132]	; (19d30 <AppUiAction+0xf0>)
   19caa:	f7ff f8cf 	bl	18e4c <WsfTrace>
      break;
   19cae:	e038      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_ADV_STOP:
      APP_TRACE_INFO0(">>> Advertising stopped <<<");
   19cb0:	4820      	ldr	r0, [pc, #128]	; (19d34 <AppUiAction+0xf4>)
   19cb2:	f7ff f8cb 	bl	18e4c <WsfTrace>
      break;
   19cb6:	e034      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SCAN_START:
      APP_TRACE_INFO0(">>> Scanning started <<<");
   19cb8:	481f      	ldr	r0, [pc, #124]	; (19d38 <AppUiAction+0xf8>)
   19cba:	f7ff f8c7 	bl	18e4c <WsfTrace>
      break;
   19cbe:	e030      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SCAN_STOP:
      APP_TRACE_INFO0(">>> Scanning stopped <<<");
   19cc0:	481e      	ldr	r0, [pc, #120]	; (19d3c <AppUiAction+0xfc>)
   19cc2:	f7ff f8c3 	bl	18e4c <WsfTrace>
      break;
   19cc6:	e02c      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SCAN_REPORT:
      APP_TRACE_INFO0(">>> Scan data received from peer <<<");
   19cc8:	481d      	ldr	r0, [pc, #116]	; (19d40 <AppUiAction+0x100>)
   19cca:	f7ff f8bf 	bl	18e4c <WsfTrace>
      break;
   19cce:	e028      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_CONN_OPEN:
      APP_TRACE_INFO0(">>> Connection opened <<<");
   19cd0:	481c      	ldr	r0, [pc, #112]	; (19d44 <AppUiAction+0x104>)
   19cd2:	f7ff f8bb 	bl	18e4c <WsfTrace>
      break;
   19cd6:	e024      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_CONN_CLOSE:
      APP_TRACE_INFO0(">>> Connection closed <<<");
   19cd8:	481b      	ldr	r0, [pc, #108]	; (19d48 <AppUiAction+0x108>)
   19cda:	f7ff f8b7 	bl	18e4c <WsfTrace>
      break;
   19cde:	e020      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_CMPL:
      APP_TRACE_INFO0(">>> Pairing completed successfully <<<");
   19ce0:	481a      	ldr	r0, [pc, #104]	; (19d4c <AppUiAction+0x10c>)
   19ce2:	f7ff f8b3 	bl	18e4c <WsfTrace>
      break;
   19ce6:	e01c      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SEC_PAIR_FAIL:
      APP_TRACE_INFO0(">>> Pairing failed <<<");
   19ce8:	4819      	ldr	r0, [pc, #100]	; (19d50 <AppUiAction+0x110>)
   19cea:	f7ff f8af 	bl	18e4c <WsfTrace>
      break;
   19cee:	e018      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT:
      APP_TRACE_INFO0(">>> Connection encrypted <<<");
   19cf0:	4818      	ldr	r0, [pc, #96]	; (19d54 <AppUiAction+0x114>)
   19cf2:	f7ff f8ab 	bl	18e4c <WsfTrace>
      break;
   19cf6:	e014      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_SEC_ENCRYPT_FAIL:
      APP_TRACE_INFO0(">>> Encryption failed <<<");
   19cf8:	4817      	ldr	r0, [pc, #92]	; (19d58 <AppUiAction+0x118>)
   19cfa:	f7ff f8a7 	bl	18e4c <WsfTrace>
      break;
   19cfe:	e010      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_PASSKEY_PROMPT:
      APP_TRACE_INFO0(">>> Prompt user to enter passkey <<<");
   19d00:	4816      	ldr	r0, [pc, #88]	; (19d5c <AppUiAction+0x11c>)
   19d02:	f7ff f8a3 	bl	18e4c <WsfTrace>
      break;
   19d06:	e00c      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_ALERT_CANCEL:
      APP_TRACE_INFO0(">>> Cancel a low or high alert <<<");
   19d08:	4815      	ldr	r0, [pc, #84]	; (19d60 <AppUiAction+0x120>)
   19d0a:	f7ff f89f 	bl	18e4c <WsfTrace>
      break;
   19d0e:	e008      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_ALERT_LOW:
      APP_TRACE_INFO0(">>> Low alert <<<");
   19d10:	4814      	ldr	r0, [pc, #80]	; (19d64 <AppUiAction+0x124>)
   19d12:	f7ff f89b 	bl	18e4c <WsfTrace>
      break;
   19d16:	e004      	b.n	19d22 <AppUiAction+0xe2>

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
   19d18:	4813      	ldr	r0, [pc, #76]	; (19d68 <AppUiAction+0x128>)
   19d1a:	f7ff f897 	bl	18e4c <WsfTrace>
      break;
   19d1e:	e000      	b.n	19d22 <AppUiAction+0xe2>
      break;
   19d20:	bf00      	nop
  }
}
   19d22:	bf00      	nop
   19d24:	3708      	adds	r7, #8
   19d26:	46bd      	mov	sp, r7
   19d28:	bd80      	pop	{r7, pc}
   19d2a:	bf00      	nop
   19d2c:	000229e8 	.word	0x000229e8
   19d30:	00022a00 	.word	0x00022a00
   19d34:	00022a1c 	.word	0x00022a1c
   19d38:	00022a38 	.word	0x00022a38
   19d3c:	00022a54 	.word	0x00022a54
   19d40:	00022a70 	.word	0x00022a70
   19d44:	00022a98 	.word	0x00022a98
   19d48:	00022ab4 	.word	0x00022ab4
   19d4c:	00022ad0 	.word	0x00022ad0
   19d50:	00022af8 	.word	0x00022af8
   19d54:	00022b10 	.word	0x00022b10
   19d58:	00022b30 	.word	0x00022b30
   19d5c:	00022b4c 	.word	0x00022b4c
   19d60:	00022b74 	.word	0x00022b74
   19d64:	00022b98 	.word	0x00022b98
   19d68:	00022bac 	.word	0x00022bac

00019d6c <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   19d6c:	b580      	push	{r7, lr}
   19d6e:	b082      	sub	sp, #8
   19d70:	af00      	add	r7, sp, #0
   19d72:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
   19d74:	6879      	ldr	r1, [r7, #4]
   19d76:	4803      	ldr	r0, [pc, #12]	; (19d84 <AppUiDisplayPasskey+0x18>)
   19d78:	f7ff f868 	bl	18e4c <WsfTrace>
}
   19d7c:	bf00      	nop
   19d7e:	3708      	adds	r7, #8
   19d80:	46bd      	mov	sp, r7
   19d82:	bd80      	pop	{r7, pc}
   19d84:	00022bc0 	.word	0x00022bc0

00019d88 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   19d88:	b580      	push	{r7, lr}
   19d8a:	b082      	sub	sp, #8
   19d8c:	af00      	add	r7, sp, #0
   19d8e:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
   19d90:	6879      	ldr	r1, [r7, #4]
   19d92:	4803      	ldr	r0, [pc, #12]	; (19da0 <AppUiDisplayConfirmValue+0x18>)
   19d94:	f7ff f85a 	bl	18e4c <WsfTrace>
}
   19d98:	bf00      	nop
   19d9a:	3708      	adds	r7, #8
   19d9c:	46bd      	mov	sp, r7
   19d9e:	bd80      	pop	{r7, pc}
   19da0:	00022bd4 	.word	0x00022bd4

00019da4 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   19da4:	b480      	push	{r7}
   19da6:	b083      	sub	sp, #12
   19da8:	af00      	add	r7, sp, #0
   19daa:	6078      	str	r0, [r7, #4]

}
   19dac:	bf00      	nop
   19dae:	370c      	adds	r7, #12
   19db0:	46bd      	mov	sp, r7
   19db2:	f85d 7b04 	ldr.w	r7, [sp], #4
   19db6:	4770      	bx	lr

00019db8 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   19db8:	b480      	push	{r7}
   19dba:	af00      	add	r7, sp, #0

}
   19dbc:	bf00      	nop
   19dbe:	46bd      	mov	sp, r7
   19dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19dc4:	4770      	bx	lr
	...

00019dc8 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   19dc8:	b480      	push	{r7}
   19dca:	b083      	sub	sp, #12
   19dcc:	af00      	add	r7, sp, #0
   19dce:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   19dd0:	4a04      	ldr	r2, [pc, #16]	; (19de4 <AppUiBtnRegister+0x1c>)
   19dd2:	687b      	ldr	r3, [r7, #4]
   19dd4:	6013      	str	r3, [r2, #0]
}
   19dd6:	bf00      	nop
   19dd8:	370c      	adds	r7, #12
   19dda:	46bd      	mov	sp, r7
   19ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
   19de0:	4770      	bx	lr
   19de2:	bf00      	nop
   19de4:	10004480 	.word	0x10004480

00019de8 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   19de8:	b480      	push	{r7}
   19dea:	af00      	add	r7, sp, #0

}
   19dec:	bf00      	nop
   19dee:	46bd      	mov	sp, r7
   19df0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19df4:	4770      	bx	lr

00019df6 <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   19df6:	b580      	push	{r7, lr}
   19df8:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   19dfa:	f008 fc21 	bl	22640 <am_bsp_itm_printf_enable>
}
   19dfe:	bf00      	nop
   19e00:	bd80      	pop	{r7, pc}
	...

00019e04 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   19e04:	b580      	push	{r7, lr}
   19e06:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   19e08:	2100      	movs	r1, #0
   19e0a:	2000      	movs	r0, #0
   19e0c:	f007 ff50 	bl	21cb0 <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   19e10:	480b      	ldr	r0, [pc, #44]	; (19e40 <main+0x3c>)
   19e12:	f007 ff1d 	bl	21c50 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   19e16:	f007 ff41 	bl	21c9c <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   19e1a:	f008 fbef 	bl	225fc <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   19e1e:	2001      	movs	r0, #1
   19e20:	f008 fbf4 	bl	2260c <am_hal_sysctrl_fpu_stacking_enable>
    //
    //am_bsp_low_power_init();

    // Turn off unused Flash & SRAM
#if 1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_96K);
   19e24:	2004      	movs	r0, #4
   19e26:	f008 fa6d 	bl	22304 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K);
   19e2a:	200e      	movs	r0, #14
   19e2c:	f008 fa6a 	bl	22304 <am_hal_pwrctrl_memory_enable>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   19e30:	f7ff ffe1 	bl	19df6 <enable_print_interface>
#endif

    //
    // Initialize plotting interface.
    //
    am_util_debug_printf("FreeRTOS Fit Example\n");
   19e34:	4803      	ldr	r0, [pc, #12]	; (19e44 <main+0x40>)
   19e36:	f001 fd61 	bl	1b8fc <am_util_stdio_printf>

    //
    // Run the application.
    //
    run_tasks();
   19e3a:	f000 f9ff 	bl	1a23c <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   19e3e:	e7fe      	b.n	19e3e <main+0x3a>
   19e40:	00025874 	.word	0x00025874
   19e44:	00022c04 	.word	0x00022c04

00019e48 <__NVIC_SetPriority>:
{
   19e48:	b480      	push	{r7}
   19e4a:	b083      	sub	sp, #12
   19e4c:	af00      	add	r7, sp, #0
   19e4e:	4603      	mov	r3, r0
   19e50:	6039      	str	r1, [r7, #0]
   19e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19e58:	2b00      	cmp	r3, #0
   19e5a:	db0a      	blt.n	19e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19e5c:	490d      	ldr	r1, [pc, #52]	; (19e94 <__NVIC_SetPriority+0x4c>)
   19e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19e62:	683a      	ldr	r2, [r7, #0]
   19e64:	b2d2      	uxtb	r2, r2
   19e66:	0152      	lsls	r2, r2, #5
   19e68:	b2d2      	uxtb	r2, r2
   19e6a:	440b      	add	r3, r1
   19e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   19e70:	e00a      	b.n	19e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19e72:	4909      	ldr	r1, [pc, #36]	; (19e98 <__NVIC_SetPriority+0x50>)
   19e74:	79fb      	ldrb	r3, [r7, #7]
   19e76:	f003 030f 	and.w	r3, r3, #15
   19e7a:	3b04      	subs	r3, #4
   19e7c:	683a      	ldr	r2, [r7, #0]
   19e7e:	b2d2      	uxtb	r2, r2
   19e80:	0152      	lsls	r2, r2, #5
   19e82:	b2d2      	uxtb	r2, r2
   19e84:	440b      	add	r3, r1
   19e86:	761a      	strb	r2, [r3, #24]
}
   19e88:	bf00      	nop
   19e8a:	370c      	adds	r7, #12
   19e8c:	46bd      	mov	sp, r7
   19e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19e92:	4770      	bx	lr
   19e94:	e000e100 	.word	0xe000e100
   19e98:	e000ed00 	.word	0xe000ed00

00019e9c <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   19e9c:	b580      	push	{r7, lr}
   19e9e:	b082      	sub	sp, #8
   19ea0:	af00      	add	r7, sp, #0
   19ea2:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   19ea4:	2100      	movs	r1, #0
   19ea6:	2000      	movs	r0, #0
   19ea8:	f7fe fee2 	bl	18c70 <WsfTaskSetReady>
}
   19eac:	bf00      	nop
   19eae:	3708      	adds	r7, #8
   19eb0:	46bd      	mov	sp, r7
   19eb2:	bd80      	pop	{r7, pc}

00019eb4 <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   19eb4:	b580      	push	{r7, lr}
   19eb6:	b082      	sub	sp, #8
   19eb8:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   19eba:	4b09      	ldr	r3, [pc, #36]	; (19ee0 <scheduler_timer_init+0x2c>)
   19ebc:	9300      	str	r3, [sp, #0]
   19ebe:	2300      	movs	r3, #0
   19ec0:	2200      	movs	r2, #0
   19ec2:	210a      	movs	r1, #10
   19ec4:	4807      	ldr	r0, [pc, #28]	; (19ee4 <scheduler_timer_init+0x30>)
   19ec6:	f003 fa3b 	bl	1d340 <xTimerCreate>
   19eca:	4602      	mov	r2, r0
   19ecc:	4b06      	ldr	r3, [pc, #24]	; (19ee8 <scheduler_timer_init+0x34>)
   19ece:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   19ed0:	4b05      	ldr	r3, [pc, #20]	; (19ee8 <scheduler_timer_init+0x34>)
   19ed2:	681b      	ldr	r3, [r3, #0]
   19ed4:	2b00      	cmp	r3, #0
   19ed6:	d100      	bne.n	19eda <scheduler_timer_init+0x26>
   19ed8:	e7fe      	b.n	19ed8 <scheduler_timer_init+0x24>
}
   19eda:	bf00      	nop
   19edc:	46bd      	mov	sp, r7
   19ede:	bd80      	pop	{r7, pc}
   19ee0:	00019e9d 	.word	0x00019e9d
   19ee4:	00022c1c 	.word	0x00022c1c
   19ee8:	10009e10 	.word	0x10009e10

00019eec <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   19eec:	b580      	push	{r7, lr}
   19eee:	b082      	sub	sp, #8
   19ef0:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   19ef2:	f002 fde9 	bl	1cac8 <xTaskGetTickCount>
   19ef6:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   19ef8:	4b0b      	ldr	r3, [pc, #44]	; (19f28 <update_scheduler_timers+0x3c>)
   19efa:	681b      	ldr	r3, [r3, #0]
   19efc:	687a      	ldr	r2, [r7, #4]
   19efe:	1ad3      	subs	r3, r2, r3
   19f00:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   19f02:	683b      	ldr	r3, [r7, #0]
   19f04:	2b09      	cmp	r3, #9
   19f06:	d90a      	bls.n	19f1e <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   19f08:	683b      	ldr	r3, [r7, #0]
   19f0a:	4a08      	ldr	r2, [pc, #32]	; (19f2c <update_scheduler_timers+0x40>)
   19f0c:	fba2 2303 	umull	r2, r3, r2, r3
   19f10:	08db      	lsrs	r3, r3, #3
   19f12:	4618      	mov	r0, r3
   19f14:	f000 fcd4 	bl	1a8c0 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   19f18:	4a03      	ldr	r2, [pc, #12]	; (19f28 <update_scheduler_timers+0x3c>)
   19f1a:	687b      	ldr	r3, [r7, #4]
   19f1c:	6013      	str	r3, [r2, #0]
    }
}
   19f1e:	bf00      	nop
   19f20:	3708      	adds	r7, #8
   19f22:	46bd      	mov	sp, r7
   19f24:	bd80      	pop	{r7, pc}
   19f26:	bf00      	nop
   19f28:	10005004 	.word	0x10005004
   19f2c:	cccccccd 	.word	0xcccccccd

00019f30 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   19f30:	b580      	push	{r7, lr}
   19f32:	b084      	sub	sp, #16
   19f34:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   19f36:	1cfb      	adds	r3, r7, #3
   19f38:	4618      	mov	r0, r3
   19f3a:	f000 fcef 	bl	1a91c <WsfTimerNextExpiration>
   19f3e:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   19f40:	687b      	ldr	r3, [r7, #4]
   19f42:	2b00      	cmp	r3, #0
   19f44:	d014      	beq.n	19f70 <set_next_wakeup+0x40>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   19f46:	4b0c      	ldr	r3, [pc, #48]	; (19f78 <set_next_wakeup+0x48>)
   19f48:	6818      	ldr	r0, [r3, #0]
   19f4a:	687b      	ldr	r3, [r7, #4]
   19f4c:	f242 7210 	movw	r2, #10000	; 0x2710
   19f50:	fb02 f303 	mul.w	r3, r2, r3
   19f54:	4a09      	ldr	r2, [pc, #36]	; (19f7c <set_next_wakeup+0x4c>)
   19f56:	fba2 2303 	umull	r2, r3, r2, r3
   19f5a:	099a      	lsrs	r2, r3, #6
   19f5c:	2364      	movs	r3, #100	; 0x64
   19f5e:	9300      	str	r3, [sp, #0]
   19f60:	2300      	movs	r3, #0
   19f62:	2104      	movs	r1, #4
   19f64:	f003 fa32 	bl	1d3cc <xTimerGenericCommand>
   19f68:	4603      	mov	r3, r0
   19f6a:	2b01      	cmp	r3, #1
   19f6c:	d000      	beq.n	19f70 <set_next_wakeup+0x40>
   19f6e:	e7fe      	b.n	19f6e <set_next_wakeup+0x3e>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   19f70:	bf00      	nop
   19f72:	3708      	adds	r7, #8
   19f74:	46bd      	mov	sp, r7
   19f76:	bd80      	pop	{r7, pc}
   19f78:	10009e10 	.word	0x10009e10
   19f7c:	10624dd3 	.word	0x10624dd3

00019f80 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   19f80:	b580      	push	{r7, lr}
   19f82:	b082      	sub	sp, #8
   19f84:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   19f86:	f7ff ff95 	bl	19eb4 <scheduler_timer_init>
    WsfTimerInit();
   19f8a:	f000 fc53 	bl	1a834 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   19f8e:	4b44      	ldr	r3, [pc, #272]	; (1a0a0 <exactle_stack_init+0x120>)
   19f90:	2204      	movs	r2, #4
   19f92:	4944      	ldr	r1, [pc, #272]	; (1a0a4 <exactle_stack_init+0x124>)
   19f94:	f44f 6038 	mov.w	r0, #2944	; 0xb80
   19f98:	f000 f96a 	bl	1a270 <WsfBufInit>
   19f9c:	4603      	mov	r3, r0
   19f9e:	80fb      	strh	r3, [r7, #6]
               g_psPoolDescriptors);

    if (wsfBufMemLen > sizeof(g_pui32BufMem))
   19fa0:	88fb      	ldrh	r3, [r7, #6]
   19fa2:	f5b3 6f38 	cmp.w	r3, #2944	; 0xb80
   19fa6:	d906      	bls.n	19fb6 <exactle_stack_init+0x36>
    {
        am_util_debug_printf("Memory pool is too small by %d\r\n",
   19fa8:	88fb      	ldrh	r3, [r7, #6]
   19faa:	f5a3 6338 	sub.w	r3, r3, #2944	; 0xb80
   19fae:	4619      	mov	r1, r3
   19fb0:	483d      	ldr	r0, [pc, #244]	; (1a0a8 <exactle_stack_init+0x128>)
   19fb2:	f001 fca3 	bl	1b8fc <am_util_stdio_printf>
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   19fb6:	f7fe fd5d 	bl	18a74 <SecInit>
    SecAesInit();
   19fba:	f7fe f9f7 	bl	183ac <SecAesInit>
    SecCmacInit();
   19fbe:	f7fe fbc9 	bl	18754 <SecCmacInit>
    SecEccInit();
   19fc2:	f7fe fcd5 	bl	18970 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   19fc6:	4839      	ldr	r0, [pc, #228]	; (1a0ac <exactle_stack_init+0x12c>)
   19fc8:	f7fe fe7e 	bl	18cc8 <WsfOsSetNextHandler>
   19fcc:	4603      	mov	r3, r0
   19fce:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   19fd0:	797b      	ldrb	r3, [r7, #5]
   19fd2:	4618      	mov	r0, r3
   19fd4:	f000 fd1e 	bl	1aa14 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   19fd8:	4835      	ldr	r0, [pc, #212]	; (1a0b0 <exactle_stack_init+0x130>)
   19fda:	f7fe fe75 	bl	18cc8 <WsfOsSetNextHandler>
   19fde:	4603      	mov	r3, r0
   19fe0:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   19fe2:	2000      	movs	r0, #0
   19fe4:	f7f5 fd6b 	bl	fabe <DmDevVsInit>
    DmAdvInit();
   19fe8:	f7f4 ffea 	bl	efc0 <DmAdvInit>
    DmConnInit();
   19fec:	f7f5 fa62 	bl	f4b4 <DmConnInit>
    DmConnSlaveInit();
   19ff0:	f7f5 fcc0 	bl	f974 <DmConnSlaveInit>
    DmSecInit();
   19ff4:	f7f6 f89f 	bl	10136 <DmSecInit>
    DmSecLescInit();
   19ff8:	f7f6 f9dc 	bl	103b4 <DmSecLescInit>
    DmPrivInit();
   19ffc:	f7f5 feea 	bl	fdd4 <DmPrivInit>
    DmHandlerInit(handlerId);
   1a000:	797b      	ldrb	r3, [r7, #5]
   1a002:	4618      	mov	r0, r3
   1a004:	f7f5 fda5 	bl	fb52 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   1a008:	482a      	ldr	r0, [pc, #168]	; (1a0b4 <exactle_stack_init+0x134>)
   1a00a:	f7fe fe5d 	bl	18cc8 <WsfOsSetNextHandler>
   1a00e:	4603      	mov	r3, r0
   1a010:	717b      	strb	r3, [r7, #5]
    L2cSlaveHandlerInit(handlerId);
   1a012:	797b      	ldrb	r3, [r7, #5]
   1a014:	4618      	mov	r0, r3
   1a016:	f7f6 fb6f 	bl	106f8 <L2cSlaveHandlerInit>
    L2cInit();
   1a01a:	f7f6 fa9c 	bl	10556 <L2cInit>
    L2cSlaveInit();
   1a01e:	f7f6 fb21 	bl	10664 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   1a022:	4825      	ldr	r0, [pc, #148]	; (1a0b8 <exactle_stack_init+0x138>)
   1a024:	f7fe fe50 	bl	18cc8 <WsfOsSetNextHandler>
   1a028:	4603      	mov	r3, r0
   1a02a:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   1a02c:	797b      	ldrb	r3, [r7, #5]
   1a02e:	4618      	mov	r0, r3
   1a030:	f7f2 faed 	bl	c60e <AttHandlerInit>
    AttsInit();
   1a034:	f7f3 fc38 	bl	d8a8 <AttsInit>
    AttsIndInit();
   1a038:	f7f3 fb38 	bl	d6ac <AttsIndInit>
    AttcInit();
   1a03c:	f7f2 fd58 	bl	caf0 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   1a040:	481e      	ldr	r0, [pc, #120]	; (1a0bc <exactle_stack_init+0x13c>)
   1a042:	f7fe fe41 	bl	18cc8 <WsfOsSetNextHandler>
   1a046:	4603      	mov	r3, r0
   1a048:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   1a04a:	797b      	ldrb	r3, [r7, #5]
   1a04c:	4618      	mov	r0, r3
   1a04e:	f7f6 fddb 	bl	10c08 <SmpHandlerInit>
    SmprInit();
   1a052:	f7f7 fc31 	bl	118b8 <SmprInit>
    SmprScInit();
   1a056:	f7f7 fc19 	bl	1188c <SmprScInit>
    HciSetMaxRxAclLen(251);
   1a05a:	20fb      	movs	r0, #251	; 0xfb
   1a05c:	f7fb f96e 	bl	1533c <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   1a060:	4817      	ldr	r0, [pc, #92]	; (1a0c0 <exactle_stack_init+0x140>)
   1a062:	f7fe fe31 	bl	18cc8 <WsfOsSetNextHandler>
   1a066:	4603      	mov	r3, r0
   1a068:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   1a06a:	797b      	ldrb	r3, [r7, #5]
   1a06c:	4618      	mov	r0, r3
   1a06e:	f003 fd1b 	bl	1daa8 <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(FitHandler);
   1a072:	4814      	ldr	r0, [pc, #80]	; (1a0c4 <exactle_stack_init+0x144>)
   1a074:	f7fe fe28 	bl	18cc8 <WsfOsSetNextHandler>
   1a078:	4603      	mov	r3, r0
   1a07a:	717b      	strb	r3, [r7, #5]
    FitHandlerInit(handlerId);
   1a07c:	797b      	ldrb	r3, [r7, #5]
   1a07e:	4618      	mov	r0, r3
   1a080:	f7fd ff70 	bl	17f64 <FitHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   1a084:	4810      	ldr	r0, [pc, #64]	; (1a0c8 <exactle_stack_init+0x148>)
   1a086:	f7fe fe1f 	bl	18cc8 <WsfOsSetNextHandler>
   1a08a:	4603      	mov	r3, r0
   1a08c:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   1a08e:	797b      	ldrb	r3, [r7, #5]
   1a090:	4618      	mov	r0, r3
   1a092:	f7ff f92f 	bl	192f4 <HciDrvHandlerInit>
}
   1a096:	bf00      	nop
   1a098:	3708      	adds	r7, #8
   1a09a:	46bd      	mov	sp, r7
   1a09c:	bd80      	pop	{r7, pc}
   1a09e:	bf00      	nop
   1a0a0:	10002ba4 	.word	0x10002ba4
   1a0a4:	10004484 	.word	0x10004484
   1a0a8:	00022c28 	.word	0x00022c28
   1a0ac:	0001aa41 	.word	0x0001aa41
   1a0b0:	0000fb6d 	.word	0x0000fb6d
   1a0b4:	00010709 	.word	0x00010709
   1a0b8:	0000c64d 	.word	0x0000c64d
   1a0bc:	00010c51 	.word	0x00010c51
   1a0c0:	0001dac9 	.word	0x0001dac9
   1a0c4:	00017ff9 	.word	0x00017ff9
   1a0c8:	00019381 	.word	0x00019381

0001a0cc <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   1a0cc:	b580      	push	{r7, lr}
   1a0ce:	b082      	sub	sp, #8
   1a0d0:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   1a0d2:	4b07      	ldr	r3, [pc, #28]	; (1a0f0 <am_uart_isr+0x24>)
   1a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a0d6:	607b      	str	r3, [r7, #4]
    UARTn(0)->IEC = ui32Status;
   1a0d8:	4a05      	ldr	r2, [pc, #20]	; (1a0f0 <am_uart_isr+0x24>)
   1a0da:	687b      	ldr	r3, [r7, #4]
   1a0dc:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1a0de:	2100      	movs	r1, #0
   1a0e0:	2000      	movs	r0, #0
   1a0e2:	f7fe fdc5 	bl	18c70 <WsfTaskSetReady>
}
   1a0e6:	bf00      	nop
   1a0e8:	3708      	adds	r7, #8
   1a0ea:	46bd      	mov	sp, r7
   1a0ec:	bd80      	pop	{r7, pc}
   1a0ee:	bf00      	nop
   1a0f0:	4001c000 	.word	0x4001c000

0001a0f4 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   1a0f4:	b580      	push	{r7, lr}
   1a0f6:	af00      	add	r7, sp, #0

    HciDrvIntService();
   1a0f8:	f7ff f91c 	bl	19334 <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   1a0fc:	2100      	movs	r1, #0
   1a0fe:	2000      	movs	r0, #0
   1a100:	f7fe fdb6 	bl	18c70 <WsfTaskSetReady>
}
   1a104:	bf00      	nop
   1a106:	bd80      	pop	{r7, pc}

0001a108 <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   1a108:	b580      	push	{r7, lr}
   1a10a:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");
   1a10c:	480d      	ldr	r0, [pc, #52]	; (1a144 <RadioTaskSetup+0x3c>)
   1a10e:	f001 fbf5 	bl	1b8fc <am_util_stdio_printf>

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   1a112:	f001 fc17 	bl	1b944 <xEventGroupCreate>
   1a116:	4602      	mov	r2, r0
   1a118:	4b0b      	ldr	r3, [pc, #44]	; (1a148 <RadioTaskSetup+0x40>)
   1a11a:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   1a11c:	bf00      	nop
   1a11e:	4b0a      	ldr	r3, [pc, #40]	; (1a148 <RadioTaskSetup+0x40>)
   1a120:	681b      	ldr	r3, [r3, #0]
   1a122:	2b00      	cmp	r3, #0
   1a124:	d0fb      	beq.n	1a11e <RadioTaskSetup+0x16>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   1a126:	4b08      	ldr	r3, [pc, #32]	; (1a148 <RadioTaskSetup+0x40>)
   1a128:	681b      	ldr	r3, [r3, #0]
   1a12a:	4618      	mov	r0, r3
   1a12c:	f7fe fe7e 	bl	18e2c <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   1a130:	2104      	movs	r1, #4
   1a132:	200c      	movs	r0, #12
   1a134:	f7ff fe88 	bl	19e48 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   1a138:	2001      	movs	r0, #1
   1a13a:	f7fe ff0f 	bl	18f5c <HciDrvRadioBoot>
}
   1a13e:	bf00      	nop
   1a140:	bd80      	pop	{r7, pc}
   1a142:	bf00      	nop
   1a144:	00022c4c 	.word	0x00022c4c
   1a148:	10009e18 	.word	0x10009e18

0001a14c <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   1a14c:	b580      	push	{r7, lr}
   1a14e:	b084      	sub	sp, #16
   1a150:	af02      	add	r7, sp, #8
   1a152:	6078      	str	r0, [r7, #4]
#if WSF_TRACE_ENABLED == TRUE
    //
    // Enable ITM
    //
    am_util_debug_printf("Starting wicentric trace:\n\n");
   1a154:	480e      	ldr	r0, [pc, #56]	; (1a190 <RadioTask+0x44>)
   1a156:	f001 fbd1 	bl	1b8fc <am_util_stdio_printf>
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   1a15a:	f7ff ff11 	bl	19f80 <exactle_stack_init>

    //
    // Start the "Fit" profile.
    //
    FitStart();
   1a15e:	f7fd ff71 	bl	18044 <FitStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   1a162:	f7ff fec3 	bl	19eec <update_scheduler_timers>
        wsfOsDispatcher();
   1a166:	f7fe fddd 	bl	18d24 <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   1a16a:	f7ff fee1 	bl	19f30 <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   1a16e:	f7fe fdc7 	bl	18d00 <wsfOsReadyToSleep>
   1a172:	4603      	mov	r3, r0
   1a174:	2b00      	cmp	r3, #0
   1a176:	d0f4      	beq.n	1a162 <RadioTask+0x16>
            //

            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   1a178:	4b06      	ldr	r3, [pc, #24]	; (1a194 <RadioTask+0x48>)
   1a17a:	6818      	ldr	r0, [r3, #0]
   1a17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a180:	9300      	str	r3, [sp, #0]
   1a182:	2300      	movs	r3, #0
   1a184:	2201      	movs	r2, #1
   1a186:	2101      	movs	r1, #1
   1a188:	f001 fbf4 	bl	1b974 <xEventGroupWaitBits>
        update_scheduler_timers();
   1a18c:	e7e9      	b.n	1a162 <RadioTask+0x16>
   1a18e:	bf00      	nop
   1a190:	00022c60 	.word	0x00022c60
   1a194:	10009e18 	.word	0x10009e18

0001a198 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   1a198:	b580      	push	{r7, lr}
   1a19a:	b082      	sub	sp, #8
   1a19c:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   1a19e:	2000      	movs	r0, #0
   1a1a0:	f007 fe58 	bl	21e54 <am_hal_ctimer_int_status_get>
   1a1a4:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   1a1a6:	6878      	ldr	r0, [r7, #4]
   1a1a8:	f007 fe44 	bl	21e34 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   1a1ac:	6878      	ldr	r0, [r7, #4]
   1a1ae:	f007 fe29 	bl	21e04 <am_hal_ctimer_int_service>
}
   1a1b2:	bf00      	nop
   1a1b4:	3708      	adds	r7, #8
   1a1b6:	46bd      	mov	sp, r7
   1a1b8:	bd80      	pop	{r7, pc}

0001a1ba <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   1a1ba:	b580      	push	{r7, lr}
   1a1bc:	b082      	sub	sp, #8
   1a1be:	af00      	add	r7, sp, #0
   1a1c0:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   1a1c2:	2001      	movs	r0, #1
   1a1c4:	f008 f9e2 	bl	2258c <am_hal_sysctrl_sleep>
    return 0;
   1a1c8:	2300      	movs	r3, #0
}
   1a1ca:	4618      	mov	r0, r3
   1a1cc:	3708      	adds	r7, #8
   1a1ce:	46bd      	mov	sp, r7
   1a1d0:	bd80      	pop	{r7, pc}

0001a1d2 <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   1a1d2:	b480      	push	{r7}
   1a1d4:	b083      	sub	sp, #12
   1a1d6:	af00      	add	r7, sp, #0
   1a1d8:	6078      	str	r0, [r7, #4]
    return;
   1a1da:	bf00      	nop
}
   1a1dc:	370c      	adds	r7, #12
   1a1de:	46bd      	mov	sp, r7
   1a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a1e4:	4770      	bx	lr

0001a1e6 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   1a1e6:	b480      	push	{r7}
   1a1e8:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   1a1ea:	e7fe      	b.n	1a1ea <vApplicationMallocFailedHook+0x4>

0001a1ec <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   1a1ec:	b480      	push	{r7}
   1a1ee:	b083      	sub	sp, #12
   1a1f0:	af00      	add	r7, sp, #0
   1a1f2:	6078      	str	r0, [r7, #4]
   1a1f4:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   1a1f6:	be00      	bkpt	0x0000
   1a1f8:	e7fd      	b.n	1a1f6 <vApplicationStackOverflowHook+0xa>
	...

0001a1fc <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   1a1fc:	b580      	push	{r7, lr}
   1a1fe:	b084      	sub	sp, #16
   1a200:	af02      	add	r7, sp, #8
   1a202:	6078      	str	r0, [r7, #4]
    //
    // Print a debug message.
    //
    am_util_debug_printf("Running setup tasks...\r\n");
   1a204:	4809      	ldr	r0, [pc, #36]	; (1a22c <setup_task+0x30>)
   1a206:	f001 fb79 	bl	1b8fc <am_util_stdio_printf>

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   1a20a:	f7ff ff7d 	bl	1a108 <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   1a20e:	4b08      	ldr	r3, [pc, #32]	; (1a230 <setup_task+0x34>)
   1a210:	9301      	str	r3, [sp, #4]
   1a212:	2303      	movs	r3, #3
   1a214:	9300      	str	r3, [sp, #0]
   1a216:	2300      	movs	r3, #0
   1a218:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a21c:	4905      	ldr	r1, [pc, #20]	; (1a234 <setup_task+0x38>)
   1a21e:	4806      	ldr	r0, [pc, #24]	; (1a238 <setup_task+0x3c>)
   1a220:	f002 f9a0 	bl	1c564 <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   1a224:	2000      	movs	r0, #0
   1a226:	f002 fac5 	bl	1c7b4 <vTaskSuspend>

    while (1);
   1a22a:	e7fe      	b.n	1a22a <setup_task+0x2e>
   1a22c:	00022c7c 	.word	0x00022c7c
   1a230:	10009e14 	.word	0x10009e14
   1a234:	00022c98 	.word	0x00022c98
   1a238:	0001a14d 	.word	0x0001a14d

0001a23c <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   1a23c:	b580      	push	{r7, lr}
   1a23e:	b082      	sub	sp, #8
   1a240:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   1a242:	4b08      	ldr	r3, [pc, #32]	; (1a264 <run_tasks+0x28>)
   1a244:	9301      	str	r3, [sp, #4]
   1a246:	2303      	movs	r3, #3
   1a248:	9300      	str	r3, [sp, #0]
   1a24a:	2300      	movs	r3, #0
   1a24c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1a250:	4905      	ldr	r1, [pc, #20]	; (1a268 <run_tasks+0x2c>)
   1a252:	4806      	ldr	r0, [pc, #24]	; (1a26c <run_tasks+0x30>)
   1a254:	f002 f986 	bl	1c564 <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   1a258:	f002 fb18 	bl	1c88c <vTaskStartScheduler>
}
   1a25c:	bf00      	nop
   1a25e:	46bd      	mov	sp, r7
   1a260:	bd80      	pop	{r7, pc}
   1a262:	bf00      	nop
   1a264:	10009e1c 	.word	0x10009e1c
   1a268:	00022ca4 	.word	0x00022ca4
   1a26c:	0001a1fd 	.word	0x0001a1fd

0001a270 <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   1a270:	b480      	push	{r7}
   1a272:	b089      	sub	sp, #36	; 0x24
   1a274:	af00      	add	r7, sp, #0
   1a276:	60b9      	str	r1, [r7, #8]
   1a278:	607b      	str	r3, [r7, #4]
   1a27a:	4603      	mov	r3, r0
   1a27c:	81fb      	strh	r3, [r7, #14]
   1a27e:	4613      	mov	r3, r2
   1a280:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1a282:	4a4d      	ldr	r2, [pc, #308]	; (1a3b8 <WsfBufInit+0x148>)
   1a284:	68bb      	ldr	r3, [r7, #8]
   1a286:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   1a288:	4b4b      	ldr	r3, [pc, #300]	; (1a3b8 <WsfBufInit+0x148>)
   1a28a:	681b      	ldr	r3, [r3, #0]
   1a28c:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1a28e:	7b7a      	ldrb	r2, [r7, #13]
   1a290:	4613      	mov	r3, r2
   1a292:	005b      	lsls	r3, r3, #1
   1a294:	4413      	add	r3, r2
   1a296:	009b      	lsls	r3, r3, #2
   1a298:	461a      	mov	r2, r3
   1a29a:	69fb      	ldr	r3, [r7, #28]
   1a29c:	4413      	add	r3, r2
   1a29e:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   1a2a0:	4a46      	ldr	r2, [pc, #280]	; (1a3bc <WsfBufInit+0x14c>)
   1a2a2:	7b7b      	ldrb	r3, [r7, #13]
   1a2a4:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a2a6:	4b44      	ldr	r3, [pc, #272]	; (1a3b8 <WsfBufInit+0x148>)
   1a2a8:	681a      	ldr	r2, [r3, #0]
   1a2aa:	89fb      	ldrh	r3, [r7, #14]
   1a2ac:	08db      	lsrs	r3, r3, #3
   1a2ae:	b29b      	uxth	r3, r3
   1a2b0:	00db      	lsls	r3, r3, #3
   1a2b2:	441a      	add	r2, r3
   1a2b4:	69bb      	ldr	r3, [r7, #24]
   1a2b6:	429a      	cmp	r2, r3
   1a2b8:	d201      	bcs.n	1a2be <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a2ba:	2300      	movs	r3, #0
   1a2bc:	e075      	b.n	1a3aa <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1a2be:	7b7b      	ldrb	r3, [r7, #13]
   1a2c0:	1e5a      	subs	r2, r3, #1
   1a2c2:	737a      	strb	r2, [r7, #13]
   1a2c4:	2b00      	cmp	r3, #0
   1a2c6:	d066      	beq.n	1a396 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   1a2c8:	687b      	ldr	r3, [r7, #4]
   1a2ca:	881b      	ldrh	r3, [r3, #0]
   1a2cc:	2b07      	cmp	r3, #7
   1a2ce:	d803      	bhi.n	1a2d8 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1a2d0:	69fb      	ldr	r3, [r7, #28]
   1a2d2:	2208      	movs	r2, #8
   1a2d4:	801a      	strh	r2, [r3, #0]
   1a2d6:	e014      	b.n	1a302 <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   1a2d8:	687b      	ldr	r3, [r7, #4]
   1a2da:	881b      	ldrh	r3, [r3, #0]
   1a2dc:	f003 0307 	and.w	r3, r3, #7
   1a2e0:	b29b      	uxth	r3, r3
   1a2e2:	2b00      	cmp	r3, #0
   1a2e4:	d009      	beq.n	1a2fa <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   1a2e6:	687b      	ldr	r3, [r7, #4]
   1a2e8:	881b      	ldrh	r3, [r3, #0]
   1a2ea:	f023 0307 	bic.w	r3, r3, #7
   1a2ee:	b29b      	uxth	r3, r3
   1a2f0:	3308      	adds	r3, #8
   1a2f2:	b29a      	uxth	r2, r3
   1a2f4:	69fb      	ldr	r3, [r7, #28]
   1a2f6:	801a      	strh	r2, [r3, #0]
   1a2f8:	e003      	b.n	1a302 <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   1a2fa:	687b      	ldr	r3, [r7, #4]
   1a2fc:	881a      	ldrh	r2, [r3, #0]
   1a2fe:	69fb      	ldr	r3, [r7, #28]
   1a300:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1a302:	687b      	ldr	r3, [r7, #4]
   1a304:	789a      	ldrb	r2, [r3, #2]
   1a306:	69fb      	ldr	r3, [r7, #28]
   1a308:	709a      	strb	r2, [r3, #2]
    pDesc++;
   1a30a:	687b      	ldr	r3, [r7, #4]
   1a30c:	3304      	adds	r3, #4
   1a30e:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   1a310:	69fb      	ldr	r3, [r7, #28]
   1a312:	69ba      	ldr	r2, [r7, #24]
   1a314:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   1a316:	69fb      	ldr	r3, [r7, #28]
   1a318:	69ba      	ldr	r2, [r7, #24]
   1a31a:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   1a31c:	69fb      	ldr	r3, [r7, #28]
   1a31e:	881b      	ldrh	r3, [r3, #0]
   1a320:	08db      	lsrs	r3, r3, #3
   1a322:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   1a324:	69fb      	ldr	r3, [r7, #28]
   1a326:	789b      	ldrb	r3, [r3, #2]
   1a328:	75fb      	strb	r3, [r7, #23]
   1a32a:	e019      	b.n	1a360 <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a32c:	4b22      	ldr	r3, [pc, #136]	; (1a3b8 <WsfBufInit+0x148>)
   1a32e:	681a      	ldr	r2, [r3, #0]
   1a330:	89fb      	ldrh	r3, [r7, #14]
   1a332:	08db      	lsrs	r3, r3, #3
   1a334:	b29b      	uxth	r3, r3
   1a336:	00db      	lsls	r3, r3, #3
   1a338:	441a      	add	r2, r3
   1a33a:	69bb      	ldr	r3, [r7, #24]
   1a33c:	429a      	cmp	r2, r3
   1a33e:	d201      	bcs.n	1a344 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   1a340:	2300      	movs	r3, #0
   1a342:	e032      	b.n	1a3aa <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   1a344:	8abb      	ldrh	r3, [r7, #20]
   1a346:	00db      	lsls	r3, r3, #3
   1a348:	69ba      	ldr	r2, [r7, #24]
   1a34a:	441a      	add	r2, r3
   1a34c:	69bb      	ldr	r3, [r7, #24]
   1a34e:	601a      	str	r2, [r3, #0]
      pStart += len;
   1a350:	8abb      	ldrh	r3, [r7, #20]
   1a352:	00db      	lsls	r3, r3, #3
   1a354:	69ba      	ldr	r2, [r7, #24]
   1a356:	4413      	add	r3, r2
   1a358:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   1a35a:	7dfb      	ldrb	r3, [r7, #23]
   1a35c:	3b01      	subs	r3, #1
   1a35e:	75fb      	strb	r3, [r7, #23]
   1a360:	7dfb      	ldrb	r3, [r7, #23]
   1a362:	2b01      	cmp	r3, #1
   1a364:	d8e2      	bhi.n	1a32c <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a366:	4b14      	ldr	r3, [pc, #80]	; (1a3b8 <WsfBufInit+0x148>)
   1a368:	681a      	ldr	r2, [r3, #0]
   1a36a:	89fb      	ldrh	r3, [r7, #14]
   1a36c:	08db      	lsrs	r3, r3, #3
   1a36e:	b29b      	uxth	r3, r3
   1a370:	00db      	lsls	r3, r3, #3
   1a372:	441a      	add	r2, r3
   1a374:	69bb      	ldr	r3, [r7, #24]
   1a376:	429a      	cmp	r2, r3
   1a378:	d201      	bcs.n	1a37e <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   1a37a:	2300      	movs	r3, #0
   1a37c:	e015      	b.n	1a3aa <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1a37e:	69bb      	ldr	r3, [r7, #24]
   1a380:	2200      	movs	r2, #0
   1a382:	601a      	str	r2, [r3, #0]
    pStart += len;
   1a384:	8abb      	ldrh	r3, [r7, #20]
   1a386:	00db      	lsls	r3, r3, #3
   1a388:	69ba      	ldr	r2, [r7, #24]
   1a38a:	4413      	add	r3, r2
   1a38c:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   1a38e:	69fb      	ldr	r3, [r7, #28]
   1a390:	330c      	adds	r3, #12
   1a392:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   1a394:	e787      	b.n	1a2a6 <WsfBufInit+0x36>
      break;
   1a396:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   1a398:	69bb      	ldr	r3, [r7, #24]
   1a39a:	4a07      	ldr	r2, [pc, #28]	; (1a3b8 <WsfBufInit+0x148>)
   1a39c:	6812      	ldr	r2, [r2, #0]
   1a39e:	1a9b      	subs	r3, r3, r2
   1a3a0:	b29a      	uxth	r2, r3
   1a3a2:	4b07      	ldr	r3, [pc, #28]	; (1a3c0 <WsfBufInit+0x150>)
   1a3a4:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   1a3a6:	4b06      	ldr	r3, [pc, #24]	; (1a3c0 <WsfBufInit+0x150>)
   1a3a8:	881b      	ldrh	r3, [r3, #0]
}
   1a3aa:	4618      	mov	r0, r3
   1a3ac:	3724      	adds	r7, #36	; 0x24
   1a3ae:	46bd      	mov	sp, r7
   1a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a3b4:	4770      	bx	lr
   1a3b6:	bf00      	nop
   1a3b8:	10005008 	.word	0x10005008
   1a3bc:	10009e22 	.word	0x10009e22
   1a3c0:	10009e20 	.word	0x10009e20

0001a3c4 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   1a3c4:	b580      	push	{r7, lr}
   1a3c6:	b086      	sub	sp, #24
   1a3c8:	af00      	add	r7, sp, #0
   1a3ca:	4603      	mov	r3, r0
   1a3cc:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1a3ce:	4b1a      	ldr	r3, [pc, #104]	; (1a438 <WsfBufAlloc+0x74>)
   1a3d0:	681b      	ldr	r3, [r3, #0]
   1a3d2:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a3d4:	4b19      	ldr	r3, [pc, #100]	; (1a43c <WsfBufAlloc+0x78>)
   1a3d6:	781b      	ldrb	r3, [r3, #0]
   1a3d8:	74fb      	strb	r3, [r7, #19]
   1a3da:	e020      	b.n	1a41e <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   1a3dc:	697b      	ldr	r3, [r7, #20]
   1a3de:	881b      	ldrh	r3, [r3, #0]
   1a3e0:	88fa      	ldrh	r2, [r7, #6]
   1a3e2:	429a      	cmp	r2, r3
   1a3e4:	d815      	bhi.n	1a412 <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a3e6:	f7fe fb93 	bl	18b10 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   1a3ea:	697b      	ldr	r3, [r7, #20]
   1a3ec:	689b      	ldr	r3, [r3, #8]
   1a3ee:	2b00      	cmp	r3, #0
   1a3f0:	d00d      	beq.n	1a40e <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1a3f2:	697b      	ldr	r3, [r7, #20]
   1a3f4:	689b      	ldr	r3, [r3, #8]
   1a3f6:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   1a3f8:	68fb      	ldr	r3, [r7, #12]
   1a3fa:	681a      	ldr	r2, [r3, #0]
   1a3fc:	697b      	ldr	r3, [r7, #20]
   1a3fe:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1a400:	68fb      	ldr	r3, [r7, #12]
   1a402:	2200      	movs	r2, #0
   1a404:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   1a406:	f7fe fb97 	bl	18b38 <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   1a40a:	68fb      	ldr	r3, [r7, #12]
   1a40c:	e010      	b.n	1a430 <WsfBufAlloc+0x6c>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a40e:	f7fe fb93 	bl	18b38 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1a412:	7cfb      	ldrb	r3, [r7, #19]
   1a414:	3b01      	subs	r3, #1
   1a416:	74fb      	strb	r3, [r7, #19]
   1a418:	697b      	ldr	r3, [r7, #20]
   1a41a:	330c      	adds	r3, #12
   1a41c:	617b      	str	r3, [r7, #20]
   1a41e:	7cfb      	ldrb	r3, [r7, #19]
   1a420:	2b00      	cmp	r3, #0
   1a422:	d1db      	bne.n	1a3dc <WsfBufAlloc+0x18>
  else
  {
    WSF_TRACE_WARN2("WsfBufAlloc failed len:%u - task:%u", len, WSF_OS_GET_ACTIVE_HANDLER_ID());
  }
#else
  WSF_TRACE_WARN1("WsfBufAlloc failed len:%u", len);
   1a424:	88fb      	ldrh	r3, [r7, #6]
   1a426:	4619      	mov	r1, r3
   1a428:	4805      	ldr	r0, [pc, #20]	; (1a440 <WsfBufAlloc+0x7c>)
   1a42a:	f7fe fd0f 	bl	18e4c <WsfTrace>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   1a42e:	2300      	movs	r3, #0
}
   1a430:	4618      	mov	r0, r3
   1a432:	3718      	adds	r7, #24
   1a434:	46bd      	mov	sp, r7
   1a436:	bd80      	pop	{r7, pc}
   1a438:	10005008 	.word	0x10005008
   1a43c:	10009e22 	.word	0x10009e22
   1a440:	00022cac 	.word	0x00022cac

0001a444 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   1a444:	b580      	push	{r7, lr}
   1a446:	b084      	sub	sp, #16
   1a448:	af00      	add	r7, sp, #0
   1a44a:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   1a44c:	687b      	ldr	r3, [r7, #4]
   1a44e:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   1a450:	4b16      	ldr	r3, [pc, #88]	; (1a4ac <WsfBufFree+0x68>)
   1a452:	681a      	ldr	r2, [r3, #0]
   1a454:	4b16      	ldr	r3, [pc, #88]	; (1a4b0 <WsfBufFree+0x6c>)
   1a456:	781b      	ldrb	r3, [r3, #0]
   1a458:	4619      	mov	r1, r3
   1a45a:	460b      	mov	r3, r1
   1a45c:	005b      	lsls	r3, r3, #1
   1a45e:	440b      	add	r3, r1
   1a460:	009b      	lsls	r3, r3, #2
   1a462:	3b0c      	subs	r3, #12
   1a464:	4413      	add	r3, r2
   1a466:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a468:	e016      	b.n	1a498 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   1a46a:	68fb      	ldr	r3, [r7, #12]
   1a46c:	685a      	ldr	r2, [r3, #4]
   1a46e:	68bb      	ldr	r3, [r7, #8]
   1a470:	429a      	cmp	r2, r3
   1a472:	d80e      	bhi.n	1a492 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   1a474:	f7fe fb4c 	bl	18b10 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   1a478:	68bb      	ldr	r3, [r7, #8]
   1a47a:	4a0e      	ldr	r2, [pc, #56]	; (1a4b4 <WsfBufFree+0x70>)
   1a47c:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   1a47e:	68fb      	ldr	r3, [r7, #12]
   1a480:	689a      	ldr	r2, [r3, #8]
   1a482:	68bb      	ldr	r3, [r7, #8]
   1a484:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   1a486:	68fb      	ldr	r3, [r7, #12]
   1a488:	68ba      	ldr	r2, [r7, #8]
   1a48a:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1a48c:	f7fe fb54 	bl	18b38 <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   1a490:	e008      	b.n	1a4a4 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   1a492:	68fb      	ldr	r3, [r7, #12]
   1a494:	3b0c      	subs	r3, #12
   1a496:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   1a498:	4b04      	ldr	r3, [pc, #16]	; (1a4ac <WsfBufFree+0x68>)
   1a49a:	681b      	ldr	r3, [r3, #0]
   1a49c:	68fa      	ldr	r2, [r7, #12]
   1a49e:	429a      	cmp	r2, r3
   1a4a0:	d2e3      	bcs.n	1a46a <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   1a4a2:	bf00      	nop
}
   1a4a4:	3710      	adds	r7, #16
   1a4a6:	46bd      	mov	sp, r7
   1a4a8:	bd80      	pop	{r7, pc}
   1a4aa:	bf00      	nop
   1a4ac:	10005008 	.word	0x10005008
   1a4b0:	10009e22 	.word	0x10009e22
   1a4b4:	faabd00d 	.word	0xfaabd00d

0001a4b8 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   1a4b8:	b580      	push	{r7, lr}
   1a4ba:	b082      	sub	sp, #8
   1a4bc:	af00      	add	r7, sp, #0
   1a4be:	4603      	mov	r3, r0
   1a4c0:	460a      	mov	r2, r1
   1a4c2:	80fb      	strh	r3, [r7, #6]
   1a4c4:	4613      	mov	r3, r2
   1a4c6:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   1a4c8:	797b      	ldrb	r3, [r7, #5]
   1a4ca:	b29a      	uxth	r2, r3
   1a4cc:	88fb      	ldrh	r3, [r7, #6]
   1a4ce:	4413      	add	r3, r2
   1a4d0:	b29b      	uxth	r3, r3
   1a4d2:	4618      	mov	r0, r3
   1a4d4:	f000 f805 	bl	1a4e2 <WsfMsgAlloc>
   1a4d8:	4603      	mov	r3, r0
}
   1a4da:	4618      	mov	r0, r3
   1a4dc:	3708      	adds	r7, #8
   1a4de:	46bd      	mov	sp, r7
   1a4e0:	bd80      	pop	{r7, pc}

0001a4e2 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   1a4e2:	b580      	push	{r7, lr}
   1a4e4:	b084      	sub	sp, #16
   1a4e6:	af00      	add	r7, sp, #0
   1a4e8:	4603      	mov	r3, r0
   1a4ea:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   1a4ec:	88fb      	ldrh	r3, [r7, #6]
   1a4ee:	3308      	adds	r3, #8
   1a4f0:	b29b      	uxth	r3, r3
   1a4f2:	4618      	mov	r0, r3
   1a4f4:	f7ff ff66 	bl	1a3c4 <WsfBufAlloc>
   1a4f8:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   1a4fa:	68fb      	ldr	r3, [r7, #12]
   1a4fc:	2b00      	cmp	r3, #0
   1a4fe:	d002      	beq.n	1a506 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   1a500:	68fb      	ldr	r3, [r7, #12]
   1a502:	3308      	adds	r3, #8
   1a504:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1a506:	68fb      	ldr	r3, [r7, #12]
}
   1a508:	4618      	mov	r0, r3
   1a50a:	3710      	adds	r7, #16
   1a50c:	46bd      	mov	sp, r7
   1a50e:	bd80      	pop	{r7, pc}

0001a510 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   1a510:	b580      	push	{r7, lr}
   1a512:	b082      	sub	sp, #8
   1a514:	af00      	add	r7, sp, #0
   1a516:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   1a518:	687b      	ldr	r3, [r7, #4]
   1a51a:	3b08      	subs	r3, #8
   1a51c:	4618      	mov	r0, r3
   1a51e:	f7ff ff91 	bl	1a444 <WsfBufFree>
}
   1a522:	bf00      	nop
   1a524:	3708      	adds	r7, #8
   1a526:	46bd      	mov	sp, r7
   1a528:	bd80      	pop	{r7, pc}

0001a52a <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   1a52a:	b580      	push	{r7, lr}
   1a52c:	b082      	sub	sp, #8
   1a52e:	af00      	add	r7, sp, #0
   1a530:	4603      	mov	r3, r0
   1a532:	6039      	str	r1, [r7, #0]
   1a534:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   1a536:	79fb      	ldrb	r3, [r7, #7]
   1a538:	4618      	mov	r0, r3
   1a53a:	f7fe fbb7 	bl	18cac <WsfTaskMsgQueue>
   1a53e:	79fb      	ldrb	r3, [r7, #7]
   1a540:	683a      	ldr	r2, [r7, #0]
   1a542:	4619      	mov	r1, r3
   1a544:	f000 f809 	bl	1a55a <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   1a548:	79fb      	ldrb	r3, [r7, #7]
   1a54a:	2101      	movs	r1, #1
   1a54c:	4618      	mov	r0, r3
   1a54e:	f7fe fb8f 	bl	18c70 <WsfTaskSetReady>
}
   1a552:	bf00      	nop
   1a554:	3708      	adds	r7, #8
   1a556:	46bd      	mov	sp, r7
   1a558:	bd80      	pop	{r7, pc}

0001a55a <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   1a55a:	b580      	push	{r7, lr}
   1a55c:	b086      	sub	sp, #24
   1a55e:	af00      	add	r7, sp, #0
   1a560:	60f8      	str	r0, [r7, #12]
   1a562:	460b      	mov	r3, r1
   1a564:	607a      	str	r2, [r7, #4]
   1a566:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   1a568:	687b      	ldr	r3, [r7, #4]
   1a56a:	3b08      	subs	r3, #8
   1a56c:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   1a56e:	697b      	ldr	r3, [r7, #20]
   1a570:	7afa      	ldrb	r2, [r7, #11]
   1a572:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   1a574:	6979      	ldr	r1, [r7, #20]
   1a576:	68f8      	ldr	r0, [r7, #12]
   1a578:	f000 f81c 	bl	1a5b4 <WsfQueueEnq>
}
   1a57c:	bf00      	nop
   1a57e:	3718      	adds	r7, #24
   1a580:	46bd      	mov	sp, r7
   1a582:	bd80      	pop	{r7, pc}

0001a584 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   1a584:	b580      	push	{r7, lr}
   1a586:	b084      	sub	sp, #16
   1a588:	af00      	add	r7, sp, #0
   1a58a:	6078      	str	r0, [r7, #4]
   1a58c:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   1a58e:	6878      	ldr	r0, [r7, #4]
   1a590:	f000 f832 	bl	1a5f8 <WsfQueueDeq>
   1a594:	60f8      	str	r0, [r7, #12]
   1a596:	68fb      	ldr	r3, [r7, #12]
   1a598:	2b00      	cmp	r3, #0
   1a59a:	d006      	beq.n	1a5aa <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   1a59c:	68fb      	ldr	r3, [r7, #12]
   1a59e:	791a      	ldrb	r2, [r3, #4]
   1a5a0:	683b      	ldr	r3, [r7, #0]
   1a5a2:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   1a5a4:	68fb      	ldr	r3, [r7, #12]
   1a5a6:	3308      	adds	r3, #8
   1a5a8:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   1a5aa:	68fb      	ldr	r3, [r7, #12]
}
   1a5ac:	4618      	mov	r0, r3
   1a5ae:	3710      	adds	r7, #16
   1a5b0:	46bd      	mov	sp, r7
   1a5b2:	bd80      	pop	{r7, pc}

0001a5b4 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   1a5b4:	b580      	push	{r7, lr}
   1a5b6:	b082      	sub	sp, #8
   1a5b8:	af00      	add	r7, sp, #0
   1a5ba:	6078      	str	r0, [r7, #4]
   1a5bc:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   1a5be:	683b      	ldr	r3, [r7, #0]
   1a5c0:	2200      	movs	r2, #0
   1a5c2:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a5c4:	f7fe faa4 	bl	18b10 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   1a5c8:	687b      	ldr	r3, [r7, #4]
   1a5ca:	681b      	ldr	r3, [r3, #0]
   1a5cc:	2b00      	cmp	r3, #0
   1a5ce:	d106      	bne.n	1a5de <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   1a5d0:	687b      	ldr	r3, [r7, #4]
   1a5d2:	683a      	ldr	r2, [r7, #0]
   1a5d4:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1a5d6:	687b      	ldr	r3, [r7, #4]
   1a5d8:	683a      	ldr	r2, [r7, #0]
   1a5da:	605a      	str	r2, [r3, #4]
   1a5dc:	e006      	b.n	1a5ec <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	685b      	ldr	r3, [r3, #4]
   1a5e2:	683a      	ldr	r2, [r7, #0]
   1a5e4:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   1a5e6:	687b      	ldr	r3, [r7, #4]
   1a5e8:	683a      	ldr	r2, [r7, #0]
   1a5ea:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a5ec:	f7fe faa4 	bl	18b38 <WsfCsExit>
}
   1a5f0:	bf00      	nop
   1a5f2:	3708      	adds	r7, #8
   1a5f4:	46bd      	mov	sp, r7
   1a5f6:	bd80      	pop	{r7, pc}

0001a5f8 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   1a5f8:	b580      	push	{r7, lr}
   1a5fa:	b084      	sub	sp, #16
   1a5fc:	af00      	add	r7, sp, #0
   1a5fe:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a600:	f7fe fa86 	bl	18b10 <WsfCsEnter>

  pElem = pQueue->pHead;
   1a604:	687b      	ldr	r3, [r7, #4]
   1a606:	681b      	ldr	r3, [r3, #0]
   1a608:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   1a60a:	68fb      	ldr	r3, [r7, #12]
   1a60c:	2b00      	cmp	r3, #0
   1a60e:	d00a      	beq.n	1a626 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1a610:	68fb      	ldr	r3, [r7, #12]
   1a612:	681a      	ldr	r2, [r3, #0]
   1a614:	687b      	ldr	r3, [r7, #4]
   1a616:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   1a618:	687b      	ldr	r3, [r7, #4]
   1a61a:	681b      	ldr	r3, [r3, #0]
   1a61c:	2b00      	cmp	r3, #0
   1a61e:	d102      	bne.n	1a626 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   1a620:	687b      	ldr	r3, [r7, #4]
   1a622:	2200      	movs	r2, #0
   1a624:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a626:	f7fe fa87 	bl	18b38 <WsfCsExit>

  return pElem;
   1a62a:	68fb      	ldr	r3, [r7, #12]
}
   1a62c:	4618      	mov	r0, r3
   1a62e:	3710      	adds	r7, #16
   1a630:	46bd      	mov	sp, r7
   1a632:	bd80      	pop	{r7, pc}

0001a634 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   1a634:	b580      	push	{r7, lr}
   1a636:	b082      	sub	sp, #8
   1a638:	af00      	add	r7, sp, #0
   1a63a:	6078      	str	r0, [r7, #4]
   1a63c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a63e:	f7fe fa67 	bl	18b10 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   1a642:	687b      	ldr	r3, [r7, #4]
   1a644:	681a      	ldr	r2, [r3, #0]
   1a646:	683b      	ldr	r3, [r7, #0]
   1a648:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   1a64a:	687b      	ldr	r3, [r7, #4]
   1a64c:	681b      	ldr	r3, [r3, #0]
   1a64e:	2b00      	cmp	r3, #0
   1a650:	d102      	bne.n	1a658 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   1a652:	687b      	ldr	r3, [r7, #4]
   1a654:	683a      	ldr	r2, [r7, #0]
   1a656:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   1a658:	687b      	ldr	r3, [r7, #4]
   1a65a:	683a      	ldr	r2, [r7, #0]
   1a65c:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a65e:	f7fe fa6b 	bl	18b38 <WsfCsExit>
}
   1a662:	bf00      	nop
   1a664:	3708      	adds	r7, #8
   1a666:	46bd      	mov	sp, r7
   1a668:	bd80      	pop	{r7, pc}

0001a66a <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1a66a:	b580      	push	{r7, lr}
   1a66c:	b084      	sub	sp, #16
   1a66e:	af00      	add	r7, sp, #0
   1a670:	60f8      	str	r0, [r7, #12]
   1a672:	60b9      	str	r1, [r7, #8]
   1a674:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a676:	f7fe fa4b 	bl	18b10 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   1a67a:	68fb      	ldr	r3, [r7, #12]
   1a67c:	681b      	ldr	r3, [r3, #0]
   1a67e:	2b00      	cmp	r3, #0
   1a680:	d004      	beq.n	1a68c <WsfQueueInsert+0x22>
   1a682:	68fb      	ldr	r3, [r7, #12]
   1a684:	685a      	ldr	r2, [r3, #4]
   1a686:	687b      	ldr	r3, [r7, #4]
   1a688:	429a      	cmp	r2, r3
   1a68a:	d104      	bne.n	1a696 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   1a68c:	68b9      	ldr	r1, [r7, #8]
   1a68e:	68f8      	ldr	r0, [r7, #12]
   1a690:	f7ff ff90 	bl	1a5b4 <WsfQueueEnq>
   1a694:	e00e      	b.n	1a6b4 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   1a696:	687b      	ldr	r3, [r7, #4]
   1a698:	2b00      	cmp	r3, #0
   1a69a:	d104      	bne.n	1a6a6 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   1a69c:	68b9      	ldr	r1, [r7, #8]
   1a69e:	68f8      	ldr	r0, [r7, #12]
   1a6a0:	f7ff ffc8 	bl	1a634 <WsfQueuePush>
   1a6a4:	e006      	b.n	1a6b4 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   1a6a6:	687b      	ldr	r3, [r7, #4]
   1a6a8:	681a      	ldr	r2, [r3, #0]
   1a6aa:	68bb      	ldr	r3, [r7, #8]
   1a6ac:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   1a6ae:	687b      	ldr	r3, [r7, #4]
   1a6b0:	68ba      	ldr	r2, [r7, #8]
   1a6b2:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a6b4:	f7fe fa40 	bl	18b38 <WsfCsExit>
}
   1a6b8:	bf00      	nop
   1a6ba:	3710      	adds	r7, #16
   1a6bc:	46bd      	mov	sp, r7
   1a6be:	bd80      	pop	{r7, pc}

0001a6c0 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   1a6c0:	b580      	push	{r7, lr}
   1a6c2:	b084      	sub	sp, #16
   1a6c4:	af00      	add	r7, sp, #0
   1a6c6:	60f8      	str	r0, [r7, #12]
   1a6c8:	60b9      	str	r1, [r7, #8]
   1a6ca:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a6cc:	f7fe fa20 	bl	18b10 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   1a6d0:	68fb      	ldr	r3, [r7, #12]
   1a6d2:	681a      	ldr	r2, [r3, #0]
   1a6d4:	68bb      	ldr	r3, [r7, #8]
   1a6d6:	429a      	cmp	r2, r3
   1a6d8:	d104      	bne.n	1a6e4 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   1a6da:	68bb      	ldr	r3, [r7, #8]
   1a6dc:	681a      	ldr	r2, [r3, #0]
   1a6de:	68fb      	ldr	r3, [r7, #12]
   1a6e0:	601a      	str	r2, [r3, #0]
   1a6e2:	e006      	b.n	1a6f2 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   1a6e4:	687b      	ldr	r3, [r7, #4]
   1a6e6:	2b00      	cmp	r3, #0
   1a6e8:	d003      	beq.n	1a6f2 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   1a6ea:	68bb      	ldr	r3, [r7, #8]
   1a6ec:	681a      	ldr	r2, [r3, #0]
   1a6ee:	687b      	ldr	r3, [r7, #4]
   1a6f0:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   1a6f2:	68fb      	ldr	r3, [r7, #12]
   1a6f4:	685a      	ldr	r2, [r3, #4]
   1a6f6:	68bb      	ldr	r3, [r7, #8]
   1a6f8:	429a      	cmp	r2, r3
   1a6fa:	d102      	bne.n	1a702 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   1a6fc:	68fb      	ldr	r3, [r7, #12]
   1a6fe:	687a      	ldr	r2, [r7, #4]
   1a700:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a702:	f7fe fa19 	bl	18b38 <WsfCsExit>
}
   1a706:	bf00      	nop
   1a708:	3710      	adds	r7, #16
   1a70a:	46bd      	mov	sp, r7
   1a70c:	bd80      	pop	{r7, pc}

0001a70e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   1a70e:	b580      	push	{r7, lr}
   1a710:	b084      	sub	sp, #16
   1a712:	af00      	add	r7, sp, #0
   1a714:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   1a716:	2300      	movs	r3, #0
   1a718:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a71a:	f7fe f9f9 	bl	18b10 <WsfCsEnter>

  pElem = pQueue->pHead;
   1a71e:	687b      	ldr	r3, [r7, #4]
   1a720:	681b      	ldr	r3, [r3, #0]
   1a722:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   1a724:	e005      	b.n	1a732 <WsfQueueCount+0x24>
  {
    count++;
   1a726:	897b      	ldrh	r3, [r7, #10]
   1a728:	3301      	adds	r3, #1
   1a72a:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   1a72c:	68fb      	ldr	r3, [r7, #12]
   1a72e:	681b      	ldr	r3, [r3, #0]
   1a730:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1a732:	68fb      	ldr	r3, [r7, #12]
   1a734:	2b00      	cmp	r3, #0
   1a736:	d1f6      	bne.n	1a726 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a738:	f7fe f9fe 	bl	18b38 <WsfCsExit>

  return count;
   1a73c:	897b      	ldrh	r3, [r7, #10]
}
   1a73e:	4618      	mov	r0, r3
   1a740:	3710      	adds	r7, #16
   1a742:	46bd      	mov	sp, r7
   1a744:	bd80      	pop	{r7, pc}

0001a746 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   1a746:	b580      	push	{r7, lr}
   1a748:	b084      	sub	sp, #16
   1a74a:	af00      	add	r7, sp, #0
   1a74c:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   1a74e:	f7fe f9df 	bl	18b10 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   1a752:	687b      	ldr	r3, [r7, #4]
   1a754:	681b      	ldr	r3, [r3, #0]
   1a756:	2b00      	cmp	r3, #0
   1a758:	bf0c      	ite	eq
   1a75a:	2301      	moveq	r3, #1
   1a75c:	2300      	movne	r3, #0
   1a75e:	b2db      	uxtb	r3, r3
   1a760:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   1a762:	f7fe f9e9 	bl	18b38 <WsfCsExit>

  return empty;
   1a766:	7bfb      	ldrb	r3, [r7, #15]
}
   1a768:	4618      	mov	r0, r3
   1a76a:	3710      	adds	r7, #16
   1a76c:	46bd      	mov	sp, r7
   1a76e:	bd80      	pop	{r7, pc}

0001a770 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   1a770:	b580      	push	{r7, lr}
   1a772:	b084      	sub	sp, #16
   1a774:	af00      	add	r7, sp, #0
   1a776:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1a778:	2300      	movs	r3, #0
   1a77a:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1a77c:	4b10      	ldr	r3, [pc, #64]	; (1a7c0 <wsfTimerRemove+0x50>)
   1a77e:	681b      	ldr	r3, [r3, #0]
   1a780:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   1a782:	e008      	b.n	1a796 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   1a784:	68fa      	ldr	r2, [r7, #12]
   1a786:	687b      	ldr	r3, [r7, #4]
   1a788:	429a      	cmp	r2, r3
   1a78a:	d008      	beq.n	1a79e <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   1a78c:	68fb      	ldr	r3, [r7, #12]
   1a78e:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1a790:	68fb      	ldr	r3, [r7, #12]
   1a792:	681b      	ldr	r3, [r3, #0]
   1a794:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1a796:	68fb      	ldr	r3, [r7, #12]
   1a798:	2b00      	cmp	r3, #0
   1a79a:	d1f3      	bne.n	1a784 <wsfTimerRemove+0x14>
   1a79c:	e000      	b.n	1a7a0 <wsfTimerRemove+0x30>
      break;
   1a79e:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   1a7a0:	68fb      	ldr	r3, [r7, #12]
   1a7a2:	2b00      	cmp	r3, #0
   1a7a4:	d007      	beq.n	1a7b6 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   1a7a6:	68ba      	ldr	r2, [r7, #8]
   1a7a8:	6879      	ldr	r1, [r7, #4]
   1a7aa:	4805      	ldr	r0, [pc, #20]	; (1a7c0 <wsfTimerRemove+0x50>)
   1a7ac:	f7ff ff88 	bl	1a6c0 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   1a7b0:	687b      	ldr	r3, [r7, #4]
   1a7b2:	2200      	movs	r2, #0
   1a7b4:	725a      	strb	r2, [r3, #9]
  }
}
   1a7b6:	bf00      	nop
   1a7b8:	3710      	adds	r7, #16
   1a7ba:	46bd      	mov	sp, r7
   1a7bc:	bd80      	pop	{r7, pc}
   1a7be:	bf00      	nop
   1a7c0:	10009e24 	.word	0x10009e24

0001a7c4 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   1a7c4:	b580      	push	{r7, lr}
   1a7c6:	b084      	sub	sp, #16
   1a7c8:	af00      	add	r7, sp, #0
   1a7ca:	6078      	str	r0, [r7, #4]
   1a7cc:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   1a7d2:	f7fe f9c5 	bl	18b60 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   1a7d6:	687b      	ldr	r3, [r7, #4]
   1a7d8:	7a5b      	ldrb	r3, [r3, #9]
   1a7da:	2b00      	cmp	r3, #0
   1a7dc:	d002      	beq.n	1a7e4 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   1a7de:	6878      	ldr	r0, [r7, #4]
   1a7e0:	f7ff ffc6 	bl	1a770 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   1a7e4:	687b      	ldr	r3, [r7, #4]
   1a7e6:	2201      	movs	r2, #1
   1a7e8:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   1a7ea:	687b      	ldr	r3, [r7, #4]
   1a7ec:	683a      	ldr	r2, [r7, #0]
   1a7ee:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1a7f0:	4b0f      	ldr	r3, [pc, #60]	; (1a830 <wsfTimerInsert+0x6c>)
   1a7f2:	681b      	ldr	r3, [r3, #0]
   1a7f4:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   1a7f6:	e00a      	b.n	1a80e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   1a7f8:	687b      	ldr	r3, [r7, #4]
   1a7fa:	685a      	ldr	r2, [r3, #4]
   1a7fc:	68fb      	ldr	r3, [r7, #12]
   1a7fe:	685b      	ldr	r3, [r3, #4]
   1a800:	429a      	cmp	r2, r3
   1a802:	d308      	bcc.n	1a816 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   1a804:	68fb      	ldr	r3, [r7, #12]
   1a806:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   1a808:	68fb      	ldr	r3, [r7, #12]
   1a80a:	681b      	ldr	r3, [r3, #0]
   1a80c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1a80e:	68fb      	ldr	r3, [r7, #12]
   1a810:	2b00      	cmp	r3, #0
   1a812:	d1f1      	bne.n	1a7f8 <wsfTimerInsert+0x34>
   1a814:	e000      	b.n	1a818 <wsfTimerInsert+0x54>
      break;
   1a816:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   1a818:	68ba      	ldr	r2, [r7, #8]
   1a81a:	6879      	ldr	r1, [r7, #4]
   1a81c:	4804      	ldr	r0, [pc, #16]	; (1a830 <wsfTimerInsert+0x6c>)
   1a81e:	f7ff ff24 	bl	1a66a <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   1a822:	f7fe f9a3 	bl	18b6c <WsfTaskUnlock>
}
   1a826:	bf00      	nop
   1a828:	3710      	adds	r7, #16
   1a82a:	46bd      	mov	sp, r7
   1a82c:	bd80      	pop	{r7, pc}
   1a82e:	bf00      	nop
   1a830:	10009e24 	.word	0x10009e24

0001a834 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   1a834:	b480      	push	{r7}
   1a836:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   1a838:	4b05      	ldr	r3, [pc, #20]	; (1a850 <WsfTimerInit+0x1c>)
   1a83a:	2200      	movs	r2, #0
   1a83c:	601a      	str	r2, [r3, #0]
   1a83e:	4b04      	ldr	r3, [pc, #16]	; (1a850 <WsfTimerInit+0x1c>)
   1a840:	2200      	movs	r2, #0
   1a842:	605a      	str	r2, [r3, #4]
}
   1a844:	bf00      	nop
   1a846:	46bd      	mov	sp, r7
   1a848:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a84c:	4770      	bx	lr
   1a84e:	bf00      	nop
   1a850:	10009e24 	.word	0x10009e24

0001a854 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   1a854:	b580      	push	{r7, lr}
   1a856:	b082      	sub	sp, #8
   1a858:	af00      	add	r7, sp, #0
   1a85a:	6078      	str	r0, [r7, #4]
   1a85c:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   1a85e:	683b      	ldr	r3, [r7, #0]
   1a860:	2264      	movs	r2, #100	; 0x64
   1a862:	fb02 f303 	mul.w	r3, r2, r3
   1a866:	4619      	mov	r1, r3
   1a868:	6878      	ldr	r0, [r7, #4]
   1a86a:	f7ff ffab 	bl	1a7c4 <wsfTimerInsert>
}
   1a86e:	bf00      	nop
   1a870:	3708      	adds	r7, #8
   1a872:	46bd      	mov	sp, r7
   1a874:	bd80      	pop	{r7, pc}
	...

0001a878 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   1a878:	b580      	push	{r7, lr}
   1a87a:	b082      	sub	sp, #8
   1a87c:	af00      	add	r7, sp, #0
   1a87e:	6078      	str	r0, [r7, #4]
   1a880:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   1a882:	683b      	ldr	r3, [r7, #0]
   1a884:	4a05      	ldr	r2, [pc, #20]	; (1a89c <WsfTimerStartMs+0x24>)
   1a886:	fba2 2303 	umull	r2, r3, r2, r3
   1a88a:	08db      	lsrs	r3, r3, #3
   1a88c:	4619      	mov	r1, r3
   1a88e:	6878      	ldr	r0, [r7, #4]
   1a890:	f7ff ff98 	bl	1a7c4 <wsfTimerInsert>
}
   1a894:	bf00      	nop
   1a896:	3708      	adds	r7, #8
   1a898:	46bd      	mov	sp, r7
   1a89a:	bd80      	pop	{r7, pc}
   1a89c:	cccccccd 	.word	0xcccccccd

0001a8a0 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   1a8a0:	b580      	push	{r7, lr}
   1a8a2:	b082      	sub	sp, #8
   1a8a4:	af00      	add	r7, sp, #0
   1a8a6:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   1a8a8:	f7fe f95a 	bl	18b60 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   1a8ac:	6878      	ldr	r0, [r7, #4]
   1a8ae:	f7ff ff5f 	bl	1a770 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   1a8b2:	f7fe f95b 	bl	18b6c <WsfTaskUnlock>
}
   1a8b6:	bf00      	nop
   1a8b8:	3708      	adds	r7, #8
   1a8ba:	46bd      	mov	sp, r7
   1a8bc:	bd80      	pop	{r7, pc}
	...

0001a8c0 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   1a8c0:	b580      	push	{r7, lr}
   1a8c2:	b084      	sub	sp, #16
   1a8c4:	af00      	add	r7, sp, #0
   1a8c6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   1a8c8:	f7fe f94a 	bl	18b60 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   1a8cc:	4b12      	ldr	r3, [pc, #72]	; (1a918 <WsfTimerUpdate+0x58>)
   1a8ce:	681b      	ldr	r3, [r3, #0]
   1a8d0:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   1a8d2:	e017      	b.n	1a904 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   1a8d4:	68fb      	ldr	r3, [r7, #12]
   1a8d6:	685a      	ldr	r2, [r3, #4]
   1a8d8:	687b      	ldr	r3, [r7, #4]
   1a8da:	429a      	cmp	r2, r3
   1a8dc:	d906      	bls.n	1a8ec <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   1a8de:	68fb      	ldr	r3, [r7, #12]
   1a8e0:	685a      	ldr	r2, [r3, #4]
   1a8e2:	687b      	ldr	r3, [r7, #4]
   1a8e4:	1ad2      	subs	r2, r2, r3
   1a8e6:	68fb      	ldr	r3, [r7, #12]
   1a8e8:	605a      	str	r2, [r3, #4]
   1a8ea:	e008      	b.n	1a8fe <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   1a8ec:	68fb      	ldr	r3, [r7, #12]
   1a8ee:	2200      	movs	r2, #0
   1a8f0:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   1a8f2:	68fb      	ldr	r3, [r7, #12]
   1a8f4:	7a1b      	ldrb	r3, [r3, #8]
   1a8f6:	2102      	movs	r1, #2
   1a8f8:	4618      	mov	r0, r3
   1a8fa:	f7fe f9b9 	bl	18c70 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   1a8fe:	68fb      	ldr	r3, [r7, #12]
   1a900:	681b      	ldr	r3, [r3, #0]
   1a902:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   1a904:	68fb      	ldr	r3, [r7, #12]
   1a906:	2b00      	cmp	r3, #0
   1a908:	d1e4      	bne.n	1a8d4 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1a90a:	f7fe f92f 	bl	18b6c <WsfTaskUnlock>
}
   1a90e:	bf00      	nop
   1a910:	3710      	adds	r7, #16
   1a912:	46bd      	mov	sp, r7
   1a914:	bd80      	pop	{r7, pc}
   1a916:	bf00      	nop
   1a918:	10009e24 	.word	0x10009e24

0001a91c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   1a91c:	b580      	push	{r7, lr}
   1a91e:	b084      	sub	sp, #16
   1a920:	af00      	add	r7, sp, #0
   1a922:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   1a924:	f7fe f91c 	bl	18b60 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   1a928:	4b0b      	ldr	r3, [pc, #44]	; (1a958 <WsfTimerNextExpiration+0x3c>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	2b00      	cmp	r3, #0
   1a92e:	d105      	bne.n	1a93c <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   1a930:	687b      	ldr	r3, [r7, #4]
   1a932:	2200      	movs	r2, #0
   1a934:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   1a936:	2300      	movs	r3, #0
   1a938:	60fb      	str	r3, [r7, #12]
   1a93a:	e006      	b.n	1a94a <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   1a93c:	687b      	ldr	r3, [r7, #4]
   1a93e:	2201      	movs	r2, #1
   1a940:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   1a942:	4b05      	ldr	r3, [pc, #20]	; (1a958 <WsfTimerNextExpiration+0x3c>)
   1a944:	681b      	ldr	r3, [r3, #0]
   1a946:	685b      	ldr	r3, [r3, #4]
   1a948:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1a94a:	f7fe f90f 	bl	18b6c <WsfTaskUnlock>

  return ticks;
   1a94e:	68fb      	ldr	r3, [r7, #12]
}
   1a950:	4618      	mov	r0, r3
   1a952:	3710      	adds	r7, #16
   1a954:	46bd      	mov	sp, r7
   1a956:	bd80      	pop	{r7, pc}
   1a958:	10009e24 	.word	0x10009e24

0001a95c <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   1a95c:	b580      	push	{r7, lr}
   1a95e:	b084      	sub	sp, #16
   1a960:	af00      	add	r7, sp, #0
   1a962:	4603      	mov	r3, r0
   1a964:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   1a966:	2300      	movs	r3, #0
   1a968:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   1a96a:	f7fe f8f9 	bl	18b60 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1a96e:	4b0e      	ldr	r3, [pc, #56]	; (1a9a8 <WsfTimerServiceExpired+0x4c>)
   1a970:	681b      	ldr	r3, [r3, #0]
   1a972:	60bb      	str	r3, [r7, #8]
   1a974:	68bb      	ldr	r3, [r7, #8]
   1a976:	2b00      	cmp	r3, #0
   1a978:	d00f      	beq.n	1a99a <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   1a97a:	68bb      	ldr	r3, [r7, #8]
   1a97c:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   1a97e:	2b00      	cmp	r3, #0
   1a980:	d10b      	bne.n	1a99a <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   1a982:	68fa      	ldr	r2, [r7, #12]
   1a984:	68b9      	ldr	r1, [r7, #8]
   1a986:	4808      	ldr	r0, [pc, #32]	; (1a9a8 <WsfTimerServiceExpired+0x4c>)
   1a988:	f7ff fe9a 	bl	1a6c0 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   1a98c:	68bb      	ldr	r3, [r7, #8]
   1a98e:	2200      	movs	r2, #0
   1a990:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   1a992:	f7fe f8eb 	bl	18b6c <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   1a996:	68bb      	ldr	r3, [r7, #8]
   1a998:	e002      	b.n	1a9a0 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   1a99a:	f7fe f8e7 	bl	18b6c <WsfTaskUnlock>

  return NULL;
   1a99e:	2300      	movs	r3, #0
}
   1a9a0:	4618      	mov	r0, r3
   1a9a2:	3710      	adds	r7, #16
   1a9a4:	46bd      	mov	sp, r7
   1a9a6:	bd80      	pop	{r7, pc}
   1a9a8:	10009e24 	.word	0x10009e24

0001a9ac <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   1a9ac:	b480      	push	{r7}
   1a9ae:	b083      	sub	sp, #12
   1a9b0:	af00      	add	r7, sp, #0
   1a9b2:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   1a9b4:	4a04      	ldr	r2, [pc, #16]	; (1a9c8 <HciEvtRegister+0x1c>)
   1a9b6:	687b      	ldr	r3, [r7, #4]
   1a9b8:	6093      	str	r3, [r2, #8]
}
   1a9ba:	bf00      	nop
   1a9bc:	370c      	adds	r7, #12
   1a9be:	46bd      	mov	sp, r7
   1a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a9c4:	4770      	bx	lr
   1a9c6:	bf00      	nop
   1a9c8:	10009e2c 	.word	0x10009e2c

0001a9cc <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   1a9cc:	b480      	push	{r7}
   1a9ce:	b083      	sub	sp, #12
   1a9d0:	af00      	add	r7, sp, #0
   1a9d2:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   1a9d4:	4a04      	ldr	r2, [pc, #16]	; (1a9e8 <HciSecRegister+0x1c>)
   1a9d6:	687b      	ldr	r3, [r7, #4]
   1a9d8:	60d3      	str	r3, [r2, #12]
}
   1a9da:	bf00      	nop
   1a9dc:	370c      	adds	r7, #12
   1a9de:	46bd      	mov	sp, r7
   1a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a9e4:	4770      	bx	lr
   1a9e6:	bf00      	nop
   1a9e8:	10009e2c 	.word	0x10009e2c

0001a9ec <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   1a9ec:	b480      	push	{r7}
   1a9ee:	b083      	sub	sp, #12
   1a9f0:	af00      	add	r7, sp, #0
   1a9f2:	6078      	str	r0, [r7, #4]
   1a9f4:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   1a9f6:	4a06      	ldr	r2, [pc, #24]	; (1aa10 <HciAclRegister+0x24>)
   1a9f8:	687b      	ldr	r3, [r7, #4]
   1a9fa:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   1a9fc:	4a04      	ldr	r2, [pc, #16]	; (1aa10 <HciAclRegister+0x24>)
   1a9fe:	683b      	ldr	r3, [r7, #0]
   1aa00:	6153      	str	r3, [r2, #20]
}
   1aa02:	bf00      	nop
   1aa04:	370c      	adds	r7, #12
   1aa06:	46bd      	mov	sp, r7
   1aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
   1aa0c:	4770      	bx	lr
   1aa0e:	bf00      	nop
   1aa10:	10009e2c 	.word	0x10009e2c

0001aa14 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   1aa14:	b580      	push	{r7, lr}
   1aa16:	b082      	sub	sp, #8
   1aa18:	af00      	add	r7, sp, #0
   1aa1a:	4603      	mov	r3, r0
   1aa1c:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   1aa1e:	4a07      	ldr	r2, [pc, #28]	; (1aa3c <HciHandlerInit+0x28>)
   1aa20:	79fb      	ldrb	r3, [r7, #7]
   1aa22:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   1aa24:	4b05      	ldr	r3, [pc, #20]	; (1aa3c <HciHandlerInit+0x28>)
   1aa26:	2200      	movs	r2, #0
   1aa28:	601a      	str	r2, [r3, #0]
   1aa2a:	4b04      	ldr	r3, [pc, #16]	; (1aa3c <HciHandlerInit+0x28>)
   1aa2c:	2200      	movs	r2, #0
   1aa2e:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   1aa30:	f7fa fbfc 	bl	1522c <HciCoreInit>
}
   1aa34:	bf00      	nop
   1aa36:	3708      	adds	r7, #8
   1aa38:	46bd      	mov	sp, r7
   1aa3a:	bd80      	pop	{r7, pc}
   1aa3c:	10009e2c 	.word	0x10009e2c

0001aa40 <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1aa40:	b580      	push	{r7, lr}
   1aa42:	b082      	sub	sp, #8
   1aa44:	af00      	add	r7, sp, #0
   1aa46:	4603      	mov	r3, r0
   1aa48:	6039      	str	r1, [r7, #0]
   1aa4a:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   1aa4c:	79fb      	ldrb	r3, [r7, #7]
   1aa4e:	6839      	ldr	r1, [r7, #0]
   1aa50:	4618      	mov	r0, r3
   1aa52:	f7fa fd79 	bl	15548 <HciCoreHandler>
}
   1aa56:	bf00      	nop
   1aa58:	3708      	adds	r7, #8
   1aa5a:	46bd      	mov	sp, r7
   1aa5c:	bd80      	pop	{r7, pc}
	...

0001aa60 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1aa60:	b580      	push	{r7, lr}
   1aa62:	b088      	sub	sp, #32
   1aa64:	af00      	add	r7, sp, #0
   1aa66:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1aa68:	f107 030c 	add.w	r3, r7, #12
   1aa6c:	4618      	mov	r0, r3
   1aa6e:	f007 f9ab 	bl	21dc8 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1aa72:	68fb      	ldr	r3, [r7, #12]
   1aa74:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1aa76:	69fb      	ldr	r3, [r7, #28]
   1aa78:	4a07      	ldr	r2, [pc, #28]	; (1aa98 <am_util_delay_ms+0x38>)
   1aa7a:	fba2 2303 	umull	r2, r3, r2, r3
   1aa7e:	099b      	lsrs	r3, r3, #6
   1aa80:	687a      	ldr	r2, [r7, #4]
   1aa82:	fb02 f303 	mul.w	r3, r2, r3
   1aa86:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1aa88:	69b8      	ldr	r0, [r7, #24]
   1aa8a:	f007 f9fb 	bl	21e84 <am_hal_flash_delay>
}
   1aa8e:	bf00      	nop
   1aa90:	3720      	adds	r7, #32
   1aa92:	46bd      	mov	sp, r7
   1aa94:	bd80      	pop	{r7, pc}
   1aa96:	bf00      	nop
   1aa98:	057619f1 	.word	0x057619f1

0001aa9c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1aa9c:	b580      	push	{r7, lr}
   1aa9e:	b088      	sub	sp, #32
   1aaa0:	af00      	add	r7, sp, #0
   1aaa2:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1aaa4:	f107 030c 	add.w	r3, r7, #12
   1aaa8:	4618      	mov	r0, r3
   1aaaa:	f007 f98d 	bl	21dc8 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1aaae:	68fb      	ldr	r3, [r7, #12]
   1aab0:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1aab2:	69fb      	ldr	r3, [r7, #28]
   1aab4:	4a07      	ldr	r2, [pc, #28]	; (1aad4 <am_util_delay_us+0x38>)
   1aab6:	fba2 2303 	umull	r2, r3, r2, r3
   1aaba:	0c9b      	lsrs	r3, r3, #18
   1aabc:	687a      	ldr	r2, [r7, #4]
   1aabe:	fb02 f303 	mul.w	r3, r2, r3
   1aac2:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1aac4:	69b8      	ldr	r0, [r7, #24]
   1aac6:	f007 f9dd 	bl	21e84 <am_hal_flash_delay>
}
   1aaca:	bf00      	nop
   1aacc:	3720      	adds	r7, #32
   1aace:	46bd      	mov	sp, r7
   1aad0:	bd80      	pop	{r7, pc}
   1aad2:	bf00      	nop
   1aad4:	165e9f81 	.word	0x165e9f81

0001aad8 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1aad8:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1aada:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1aade:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1aae0:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1aae4:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1aae8:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1aaec:	f000 f80a 	bl	1ab04 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1aaf0:	bd01      	pop	{r0, pc}
}
   1aaf2:	bf00      	nop
   1aaf4:	4618      	mov	r0, r3

0001aaf6 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1aaf6:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1aaf8:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1aafa:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1aafc:	4770      	bx	lr
}
   1aafe:	bf00      	nop
   1ab00:	4618      	mov	r0, r3
	...

0001ab04 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1ab04:	b580      	push	{r7, lr}
   1ab06:	b096      	sub	sp, #88	; 0x58
   1ab08:	af00      	add	r7, sp, #0
   1ab0a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1ab0c:	f107 030c 	add.w	r3, r7, #12
   1ab10:	2200      	movs	r2, #0
   1ab12:	601a      	str	r2, [r3, #0]
   1ab14:	605a      	str	r2, [r3, #4]
   1ab16:	609a      	str	r2, [r3, #8]
   1ab18:	60da      	str	r2, [r3, #12]
   1ab1a:	611a      	str	r2, [r3, #16]
   1ab1c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   1ab1e:	2300      	movs	r3, #0
   1ab20:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1ab22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ab24:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1ab26:	4b2e      	ldr	r3, [pc, #184]	; (1abe0 <am_util_faultisr_collect_data+0xdc>)
   1ab28:	681b      	ldr	r3, [r3, #0]
   1ab2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1ab2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab2e:	b2db      	uxtb	r3, r3
   1ab30:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1ab34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab36:	0a1b      	lsrs	r3, r3, #8
   1ab38:	b2db      	uxtb	r3, r3
   1ab3a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ab40:	0c1b      	lsrs	r3, r3, #16
   1ab42:	b29b      	uxth	r3, r3
   1ab44:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1ab48:	4b26      	ldr	r3, [pc, #152]	; (1abe4 <am_util_faultisr_collect_data+0xe0>)
   1ab4a:	681b      	ldr	r3, [r3, #0]
   1ab4c:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1ab4e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1ab52:	b2db      	uxtb	r3, r3
   1ab54:	f003 0302 	and.w	r3, r3, #2
   1ab58:	2b00      	cmp	r3, #0
   1ab5a:	d005      	beq.n	1ab68 <am_util_faultisr_collect_data+0x64>
   1ab5c:	6879      	ldr	r1, [r7, #4]
   1ab5e:	2006      	movs	r0, #6
   1ab60:	f7ff ffc9 	bl	1aaf6 <getStackedReg>
   1ab64:	4603      	mov	r3, r0
   1ab66:	e001      	b.n	1ab6c <am_util_faultisr_collect_data+0x68>
   1ab68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab6c:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ab6e:	6879      	ldr	r1, [r7, #4]
   1ab70:	2000      	movs	r0, #0
   1ab72:	f7ff ffc0 	bl	1aaf6 <getStackedReg>
   1ab76:	4603      	mov	r3, r0
   1ab78:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ab7a:	6879      	ldr	r1, [r7, #4]
   1ab7c:	2001      	movs	r0, #1
   1ab7e:	f7ff ffba 	bl	1aaf6 <getStackedReg>
   1ab82:	4603      	mov	r3, r0
   1ab84:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ab86:	6879      	ldr	r1, [r7, #4]
   1ab88:	2002      	movs	r0, #2
   1ab8a:	f7ff ffb4 	bl	1aaf6 <getStackedReg>
   1ab8e:	4603      	mov	r3, r0
   1ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ab92:	6879      	ldr	r1, [r7, #4]
   1ab94:	2003      	movs	r0, #3
   1ab96:	f7ff ffae 	bl	1aaf6 <getStackedReg>
   1ab9a:	4603      	mov	r3, r0
   1ab9c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ab9e:	6879      	ldr	r1, [r7, #4]
   1aba0:	2004      	movs	r0, #4
   1aba2:	f7ff ffa8 	bl	1aaf6 <getStackedReg>
   1aba6:	4603      	mov	r3, r0
   1aba8:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1abaa:	6879      	ldr	r1, [r7, #4]
   1abac:	2005      	movs	r0, #5
   1abae:	f7ff ffa2 	bl	1aaf6 <getStackedReg>
   1abb2:	4603      	mov	r3, r0
   1abb4:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1abb6:	6879      	ldr	r1, [r7, #4]
   1abb8:	2006      	movs	r0, #6
   1abba:	f7ff ff9c 	bl	1aaf6 <getStackedReg>
   1abbe:	4603      	mov	r3, r0
   1abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1abc2:	6879      	ldr	r1, [r7, #4]
   1abc4:	2007      	movs	r0, #7
   1abc6:	f7ff ff96 	bl	1aaf6 <getStackedReg>
   1abca:	4603      	mov	r3, r0
   1abcc:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1abce:	f107 030c 	add.w	r3, r7, #12
   1abd2:	4619      	mov	r1, r3
   1abd4:	2002      	movs	r0, #2
   1abd6:	f007 faa9 	bl	2212c <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   1abda:	2300      	movs	r3, #0
   1abdc:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1abde:	e7fe      	b.n	1abde <am_util_faultisr_collect_data+0xda>
   1abe0:	e000ed28 	.word	0xe000ed28
   1abe4:	e000ed38 	.word	0xe000ed38

0001abe8 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   1abe8:	b480      	push	{r7}
   1abea:	b083      	sub	sp, #12
   1abec:	af00      	add	r7, sp, #0
   1abee:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   1abf0:	4a04      	ldr	r2, [pc, #16]	; (1ac04 <am_util_stdio_printf_init+0x1c>)
   1abf2:	687b      	ldr	r3, [r7, #4]
   1abf4:	6013      	str	r3, [r2, #0]
}
   1abf6:	bf00      	nop
   1abf8:	370c      	adds	r7, #12
   1abfa:	46bd      	mov	sp, r7
   1abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ac00:	4770      	bx	lr
   1ac02:	bf00      	nop
   1ac04:	10009e48 	.word	0x10009e48

0001ac08 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   1ac08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1ac0c:	b096      	sub	sp, #88	; 0x58
   1ac0e:	af00      	add	r7, sp, #0
   1ac10:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   1ac14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1ac18:	0025      	movs	r5, r4
   1ac1a:	2600      	movs	r6, #0
   1ac1c:	ea55 0306 	orrs.w	r3, r5, r6
   1ac20:	f000 80a0 	beq.w	1ad64 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1ac24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1ac28:	0862      	lsrs	r2, r4, #1
   1ac2a:	ea4f 0133 	mov.w	r1, r3, rrx
   1ac2e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1ac32:	ea4f 0893 	mov.w	r8, r3, lsr #2
   1ac36:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
   1ac3a:	ea4f 0994 	mov.w	r9, r4, lsr #2
   1ac3e:	eb11 0308 	adds.w	r3, r1, r8
   1ac42:	eb42 0409 	adc.w	r4, r2, r9
   1ac46:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
   1ac4a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ac4e:	ea4f 1a13 	mov.w	sl, r3, lsr #4
   1ac52:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
   1ac56:	ea4f 1b14 	mov.w	fp, r4, lsr #4
   1ac5a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ac5e:	eb13 030a 	adds.w	r3, r3, sl
   1ac62:	eb44 040b 	adc.w	r4, r4, fp
   1ac66:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
   1ac6a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ac6e:	0a1a      	lsrs	r2, r3, #8
   1ac70:	62ba      	str	r2, [r7, #40]	; 0x28
   1ac72:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ac74:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
   1ac78:	62ba      	str	r2, [r7, #40]	; 0x28
   1ac7a:	0a23      	lsrs	r3, r4, #8
   1ac7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ac7e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ac82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   1ac86:	18c9      	adds	r1, r1, r3
   1ac88:	eb42 0204 	adc.w	r2, r2, r4
   1ac8c:	460b      	mov	r3, r1
   1ac8e:	4614      	mov	r4, r2
   1ac90:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
   1ac94:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ac98:	0c1a      	lsrs	r2, r3, #16
   1ac9a:	623a      	str	r2, [r7, #32]
   1ac9c:	6a3a      	ldr	r2, [r7, #32]
   1ac9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   1aca2:	623a      	str	r2, [r7, #32]
   1aca4:	0c23      	lsrs	r3, r4, #16
   1aca6:	627b      	str	r3, [r7, #36]	; 0x24
   1aca8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1acac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   1acb0:	18c9      	adds	r1, r1, r3
   1acb2:	eb42 0204 	adc.w	r2, r2, r4
   1acb6:	460b      	mov	r3, r1
   1acb8:	4614      	mov	r4, r2
   1acba:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
   1acbe:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1acc2:	0023      	movs	r3, r4
   1acc4:	603b      	str	r3, [r7, #0]
   1acc6:	2300      	movs	r3, #0
   1acc8:	607b      	str	r3, [r7, #4]
   1acca:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1acce:	e9d7 1200 	ldrd	r1, r2, [r7]
   1acd2:	18c9      	adds	r1, r1, r3
   1acd4:	eb42 0204 	adc.w	r2, r2, r4
   1acd8:	460b      	mov	r3, r1
   1acda:	4614      	mov	r4, r2
   1acdc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
   1ace0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ace4:	08da      	lsrs	r2, r3, #3
   1ace6:	613a      	str	r2, [r7, #16]
   1ace8:	693a      	ldr	r2, [r7, #16]
   1acea:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
   1acee:	613a      	str	r2, [r7, #16]
   1acf0:	08e3      	lsrs	r3, r4, #3
   1acf2:	617b      	str	r3, [r7, #20]
   1acf4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   1acf8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
   1acfc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
   1ad00:	460b      	mov	r3, r1
   1ad02:	4614      	mov	r4, r2
   1ad04:	00a0      	lsls	r0, r4, #2
   1ad06:	60f8      	str	r0, [r7, #12]
   1ad08:	68f8      	ldr	r0, [r7, #12]
   1ad0a:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   1ad0e:	60f8      	str	r0, [r7, #12]
   1ad10:	009b      	lsls	r3, r3, #2
   1ad12:	60bb      	str	r3, [r7, #8]
   1ad14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1ad18:	185b      	adds	r3, r3, r1
   1ad1a:	eb44 0402 	adc.w	r4, r4, r2
   1ad1e:	18db      	adds	r3, r3, r3
   1ad20:	eb44 0404 	adc.w	r4, r4, r4
   1ad24:	4619      	mov	r1, r3
   1ad26:	4622      	mov	r2, r4
   1ad28:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1ad2c:	1a5b      	subs	r3, r3, r1
   1ad2e:	eb64 0402 	sbc.w	r4, r4, r2
   1ad32:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
   1ad36:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
   1ad3a:	3306      	adds	r3, #6
   1ad3c:	f144 0400 	adc.w	r4, r4, #0
   1ad40:	091a      	lsrs	r2, r3, #4
   1ad42:	61ba      	str	r2, [r7, #24]
   1ad44:	69ba      	ldr	r2, [r7, #24]
   1ad46:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
   1ad4a:	61ba      	str	r2, [r7, #24]
   1ad4c:	0923      	lsrs	r3, r4, #4
   1ad4e:	61fb      	str	r3, [r7, #28]
   1ad50:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   1ad54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
   1ad58:	18c9      	adds	r1, r1, r3
   1ad5a:	eb42 0204 	adc.w	r2, r2, r4
   1ad5e:	460b      	mov	r3, r1
   1ad60:	4614      	mov	r4, r2
   1ad62:	e029      	b.n	1adb8 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   1ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ad66:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
   1ad68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad6a:	085a      	lsrs	r2, r3, #1
   1ad6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ad6e:	089b      	lsrs	r3, r3, #2
   1ad70:	4413      	add	r3, r2
   1ad72:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
   1ad74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad76:	091b      	lsrs	r3, r3, #4
   1ad78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ad7a:	4413      	add	r3, r2
   1ad7c:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
   1ad7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad80:	0a1b      	lsrs	r3, r3, #8
   1ad82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ad84:	4413      	add	r3, r2
   1ad86:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
   1ad88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad8a:	0c1b      	lsrs	r3, r3, #16
   1ad8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ad8e:	4413      	add	r3, r2
   1ad90:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
   1ad92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1ad94:	08db      	lsrs	r3, r3, #3
   1ad96:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
   1ad98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1ad9a:	4613      	mov	r3, r2
   1ad9c:	009b      	lsls	r3, r3, #2
   1ad9e:	4413      	add	r3, r2
   1ada0:	005b      	lsls	r3, r3, #1
   1ada2:	461a      	mov	r2, r3
   1ada4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1ada6:	1a9b      	subs	r3, r3, r2
   1ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   1adaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1adac:	3306      	adds	r3, #6
   1adae:	091a      	lsrs	r2, r3, #4
   1adb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1adb2:	4413      	add	r3, r2
   1adb4:	f04f 0400 	mov.w	r4, #0
    }
}
   1adb8:	4618      	mov	r0, r3
   1adba:	4621      	mov	r1, r4
   1adbc:	3758      	adds	r7, #88	; 0x58
   1adbe:	46bd      	mov	sp, r7
   1adc0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1adc4:	4770      	bx	lr

0001adc6 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   1adc6:	b590      	push	{r4, r7, lr}
   1adc8:	b085      	sub	sp, #20
   1adca:	af00      	add	r7, sp, #0
   1adcc:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   1add0:	683a      	ldr	r2, [r7, #0]
   1add2:	687b      	ldr	r3, [r7, #4]
   1add4:	4313      	orrs	r3, r2
   1add6:	2b00      	cmp	r3, #0
   1add8:	bf0c      	ite	eq
   1adda:	2301      	moveq	r3, #1
   1addc:	2300      	movne	r3, #0
   1adde:	b2db      	uxtb	r3, r3
   1ade0:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   1ade2:	e008      	b.n	1adf6 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   1ade4:	e9d7 0100 	ldrd	r0, r1, [r7]
   1ade8:	f7ff ff0e 	bl	1ac08 <divu64_10>
   1adec:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   1adf0:	68fb      	ldr	r3, [r7, #12]
   1adf2:	3301      	adds	r3, #1
   1adf4:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   1adf6:	e9d7 3400 	ldrd	r3, r4, [r7]
   1adfa:	4323      	orrs	r3, r4
   1adfc:	d1f2      	bne.n	1ade4 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   1adfe:	68fb      	ldr	r3, [r7, #12]
}
   1ae00:	4618      	mov	r0, r3
   1ae02:	3714      	adds	r7, #20
   1ae04:	46bd      	mov	sp, r7
   1ae06:	bd90      	pop	{r4, r7, pc}

0001ae08 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   1ae08:	b590      	push	{r4, r7, lr}
   1ae0a:	b083      	sub	sp, #12
   1ae0c:	af00      	add	r7, sp, #0
   1ae0e:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   1ae12:	e9d7 3400 	ldrd	r3, r4, [r7]
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	f174 0300 	sbcs.w	r3, r4, #0
   1ae1c:	da06      	bge.n	1ae2c <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   1ae1e:	e9d7 3400 	ldrd	r3, r4, [r7]
   1ae22:	425b      	negs	r3, r3
   1ae24:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1ae28:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   1ae2c:	e9d7 3400 	ldrd	r3, r4, [r7]
   1ae30:	4618      	mov	r0, r3
   1ae32:	4621      	mov	r1, r4
   1ae34:	f7ff ffc7 	bl	1adc6 <ndigits_in_u64>
   1ae38:	4603      	mov	r3, r0
}
   1ae3a:	4618      	mov	r0, r3
   1ae3c:	370c      	adds	r7, #12
   1ae3e:	46bd      	mov	sp, r7
   1ae40:	bd90      	pop	{r4, r7, pc}

0001ae42 <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   1ae42:	b490      	push	{r4, r7}
   1ae44:	b084      	sub	sp, #16
   1ae46:	af00      	add	r7, sp, #0
   1ae48:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   1ae4c:	6839      	ldr	r1, [r7, #0]
   1ae4e:	687a      	ldr	r2, [r7, #4]
   1ae50:	430a      	orrs	r2, r1
   1ae52:	2a00      	cmp	r2, #0
   1ae54:	bf0c      	ite	eq
   1ae56:	2201      	moveq	r2, #1
   1ae58:	2200      	movne	r2, #0
   1ae5a:	b2d2      	uxtb	r2, r2
   1ae5c:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
   1ae5e:	e00a      	b.n	1ae76 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
   1ae60:	e9d7 1200 	ldrd	r1, r2, [r7]
   1ae64:	090b      	lsrs	r3, r1, #4
   1ae66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   1ae6a:	0914      	lsrs	r4, r2, #4
   1ae6c:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   1ae70:	68fa      	ldr	r2, [r7, #12]
   1ae72:	3201      	adds	r2, #1
   1ae74:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
   1ae76:	e9d7 1200 	ldrd	r1, r2, [r7]
   1ae7a:	430a      	orrs	r2, r1
   1ae7c:	d1f0      	bne.n	1ae60 <ndigits_in_hex+0x1e>
    }

    return iDigits;
   1ae7e:	68fb      	ldr	r3, [r7, #12]
}
   1ae80:	4618      	mov	r0, r3
   1ae82:	3710      	adds	r7, #16
   1ae84:	46bd      	mov	sp, r7
   1ae86:	bc90      	pop	{r4, r7}
   1ae88:	4770      	bx	lr

0001ae8a <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   1ae8a:	b480      	push	{r7}
   1ae8c:	b087      	sub	sp, #28
   1ae8e:	af00      	add	r7, sp, #0
   1ae90:	6078      	str	r0, [r7, #4]
   1ae92:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   1ae94:	2300      	movs	r3, #0
   1ae96:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   1ae98:	2300      	movs	r3, #0
   1ae9a:	613b      	str	r3, [r7, #16]
   1ae9c:	2300      	movs	r3, #0
   1ae9e:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   1aea0:	687b      	ldr	r3, [r7, #4]
   1aea2:	781b      	ldrb	r3, [r3, #0]
   1aea4:	2b2d      	cmp	r3, #45	; 0x2d
   1aea6:	d11b      	bne.n	1aee0 <decstr_to_int+0x56>
    {
        bNeg = true;
   1aea8:	2301      	movs	r3, #1
   1aeaa:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   1aeac:	687b      	ldr	r3, [r7, #4]
   1aeae:	3301      	adds	r3, #1
   1aeb0:	607b      	str	r3, [r7, #4]
        uCnt++;
   1aeb2:	68fb      	ldr	r3, [r7, #12]
   1aeb4:	3301      	adds	r3, #1
   1aeb6:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1aeb8:	e012      	b.n	1aee0 <decstr_to_int+0x56>
    {
        ++uCnt;
   1aeba:	68fb      	ldr	r3, [r7, #12]
   1aebc:	3301      	adds	r3, #1
   1aebe:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   1aec0:	693a      	ldr	r2, [r7, #16]
   1aec2:	4613      	mov	r3, r2
   1aec4:	009b      	lsls	r3, r3, #2
   1aec6:	4413      	add	r3, r2
   1aec8:	005b      	lsls	r3, r3, #1
   1aeca:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   1aecc:	687b      	ldr	r3, [r7, #4]
   1aece:	781b      	ldrb	r3, [r3, #0]
   1aed0:	461a      	mov	r2, r3
   1aed2:	693b      	ldr	r3, [r7, #16]
   1aed4:	4413      	add	r3, r2
   1aed6:	3b30      	subs	r3, #48	; 0x30
   1aed8:	613b      	str	r3, [r7, #16]
        pcStr++;
   1aeda:	687b      	ldr	r3, [r7, #4]
   1aedc:	3301      	adds	r3, #1
   1aede:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   1aee0:	687b      	ldr	r3, [r7, #4]
   1aee2:	781b      	ldrb	r3, [r3, #0]
   1aee4:	2b2f      	cmp	r3, #47	; 0x2f
   1aee6:	d903      	bls.n	1aef0 <decstr_to_int+0x66>
   1aee8:	687b      	ldr	r3, [r7, #4]
   1aeea:	781b      	ldrb	r3, [r3, #0]
   1aeec:	2b39      	cmp	r3, #57	; 0x39
   1aeee:	d9e4      	bls.n	1aeba <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   1aef0:	683b      	ldr	r3, [r7, #0]
   1aef2:	2b00      	cmp	r3, #0
   1aef4:	d002      	beq.n	1aefc <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   1aef6:	683b      	ldr	r3, [r7, #0]
   1aef8:	68fa      	ldr	r2, [r7, #12]
   1aefa:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   1aefc:	7dfb      	ldrb	r3, [r7, #23]
   1aefe:	2b00      	cmp	r3, #0
   1af00:	d002      	beq.n	1af08 <decstr_to_int+0x7e>
   1af02:	693b      	ldr	r3, [r7, #16]
   1af04:	425b      	negs	r3, r3
   1af06:	e000      	b.n	1af0a <decstr_to_int+0x80>
   1af08:	693b      	ldr	r3, [r7, #16]
}
   1af0a:	4618      	mov	r0, r3
   1af0c:	371c      	adds	r7, #28
   1af0e:	46bd      	mov	sp, r7
   1af10:	f85d 7b04 	ldr.w	r7, [sp], #4
   1af14:	4770      	bx	lr

0001af16 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   1af16:	b590      	push	{r4, r7, lr}
   1af18:	b091      	sub	sp, #68	; 0x44
   1af1a:	af00      	add	r7, sp, #0
   1af1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1af20:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   1af22:	2300      	movs	r3, #0
   1af24:	63fb      	str	r3, [r7, #60]	; 0x3c
   1af26:	2300      	movs	r3, #0
   1af28:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   1af2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1af2e:	f7ff fe6b 	bl	1ac08 <divu64_10>
   1af32:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   1af36:	68b9      	ldr	r1, [r7, #8]
   1af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1af3a:	4613      	mov	r3, r2
   1af3c:	009b      	lsls	r3, r3, #2
   1af3e:	4413      	add	r3, r2
   1af40:	005b      	lsls	r3, r3, #1
   1af42:	1acb      	subs	r3, r1, r3
   1af44:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   1af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af48:	1c5a      	adds	r2, r3, #1
   1af4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   1af4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1af4e:	b2d2      	uxtb	r2, r2
   1af50:	3230      	adds	r2, #48	; 0x30
   1af52:	b2d2      	uxtb	r2, r2
   1af54:	f107 0140 	add.w	r1, r7, #64	; 0x40
   1af58:	440b      	add	r3, r1
   1af5a:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   1af5e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   1af62:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   1af66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   1af6a:	4323      	orrs	r3, r4
   1af6c:	d1dd      	bne.n	1af2a <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1af6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af70:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   1af72:	687b      	ldr	r3, [r7, #4]
   1af74:	2b00      	cmp	r3, #0
   1af76:	d011      	beq.n	1af9c <uint64_to_str+0x86>
    {
        while ( ix-- )
   1af78:	e008      	b.n	1af8c <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   1af7a:	687b      	ldr	r3, [r7, #4]
   1af7c:	1c5a      	adds	r2, r3, #1
   1af7e:	607a      	str	r2, [r7, #4]
   1af80:	f107 0110 	add.w	r1, r7, #16
   1af84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1af86:	440a      	add	r2, r1
   1af88:	7812      	ldrb	r2, [r2, #0]
   1af8a:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   1af8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1af8e:	1e5a      	subs	r2, r3, #1
   1af90:	63fa      	str	r2, [r7, #60]	; 0x3c
   1af92:	2b00      	cmp	r3, #0
   1af94:	d1f1      	bne.n	1af7a <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   1af96:	687b      	ldr	r3, [r7, #4]
   1af98:	2200      	movs	r2, #0
   1af9a:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   1af9e:	4618      	mov	r0, r3
   1afa0:	3744      	adds	r7, #68	; 0x44
   1afa2:	46bd      	mov	sp, r7
   1afa4:	bd90      	pop	{r4, r7, pc}

0001afa6 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   1afa6:	b4b0      	push	{r4, r5, r7}
   1afa8:	b08d      	sub	sp, #52	; 0x34
   1afaa:	af00      	add	r7, sp, #0
   1afac:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1afb0:	607a      	str	r2, [r7, #4]
   1afb2:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   1afb4:	2300      	movs	r3, #0
   1afb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   1afb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1afbc:	4313      	orrs	r3, r2
   1afbe:	d131      	bne.n	1b024 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
   1afc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1afc2:	1c5a      	adds	r2, r3, #1
   1afc4:	62fa      	str	r2, [r7, #44]	; 0x2c
   1afc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1afca:	4413      	add	r3, r2
   1afcc:	2230      	movs	r2, #48	; 0x30
   1afce:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   1afd2:	e027      	b.n	1b024 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
   1afd4:	7a3b      	ldrb	r3, [r7, #8]
   1afd6:	f003 030f 	and.w	r3, r3, #15
   1afda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   1afde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1afe2:	2b09      	cmp	r3, #9
   1afe4:	d90a      	bls.n	1affc <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   1afe6:	78fb      	ldrb	r3, [r7, #3]
   1afe8:	2b00      	cmp	r3, #0
   1afea:	d001      	beq.n	1aff0 <uint64_to_hexstr+0x4a>
   1afec:	2227      	movs	r2, #39	; 0x27
   1afee:	e000      	b.n	1aff2 <uint64_to_hexstr+0x4c>
   1aff0:	2207      	movs	r2, #7
   1aff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1aff6:	4413      	add	r3, r2
   1aff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   1affc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1affe:	1c5a      	adds	r2, r3, #1
   1b000:	62fa      	str	r2, [r7, #44]	; 0x2c
   1b002:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   1b006:	3230      	adds	r2, #48	; 0x30
   1b008:	b2d2      	uxtb	r2, r2
   1b00a:	f107 0130 	add.w	r1, r7, #48	; 0x30
   1b00e:	440b      	add	r3, r1
   1b010:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   1b014:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1b018:	0914      	lsrs	r4, r2, #4
   1b01a:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
   1b01e:	091d      	lsrs	r5, r3, #4
   1b020:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
   1b024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1b028:	4313      	orrs	r3, r2
   1b02a:	d1d3      	bne.n	1afd4 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   1b02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b02e:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   1b030:	687b      	ldr	r3, [r7, #4]
   1b032:	2b00      	cmp	r3, #0
   1b034:	d011      	beq.n	1b05a <uint64_to_hexstr+0xb4>
    {
        while (ix--)
   1b036:	e008      	b.n	1b04a <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
   1b038:	687b      	ldr	r3, [r7, #4]
   1b03a:	1c5a      	adds	r2, r3, #1
   1b03c:	607a      	str	r2, [r7, #4]
   1b03e:	f107 0110 	add.w	r1, r7, #16
   1b042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b044:	440a      	add	r2, r1
   1b046:	7812      	ldrb	r2, [r2, #0]
   1b048:	701a      	strb	r2, [r3, #0]
        while (ix--)
   1b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b04c:	1e5a      	subs	r2, r3, #1
   1b04e:	62fa      	str	r2, [r7, #44]	; 0x2c
   1b050:	2b00      	cmp	r3, #0
   1b052:	d1f1      	bne.n	1b038 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   1b054:	687b      	ldr	r3, [r7, #4]
   1b056:	2200      	movs	r2, #0
   1b058:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   1b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b05c:	4618      	mov	r0, r3
   1b05e:	3734      	adds	r7, #52	; 0x34
   1b060:	46bd      	mov	sp, r7
   1b062:	bcb0      	pop	{r4, r5, r7}
   1b064:	4770      	bx	lr

0001b066 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   1b066:	b480      	push	{r7}
   1b068:	b085      	sub	sp, #20
   1b06a:	af00      	add	r7, sp, #0
   1b06c:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   1b06e:	2300      	movs	r3, #0
   1b070:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   1b072:	687b      	ldr	r3, [r7, #4]
   1b074:	2b00      	cmp	r3, #0
   1b076:	d104      	bne.n	1b082 <simple_strlen+0x1c>
    {
        return ui32RetVal;
   1b078:	68fb      	ldr	r3, [r7, #12]
   1b07a:	e009      	b.n	1b090 <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   1b07c:	68fb      	ldr	r3, [r7, #12]
   1b07e:	3301      	adds	r3, #1
   1b080:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   1b082:	687b      	ldr	r3, [r7, #4]
   1b084:	1c5a      	adds	r2, r3, #1
   1b086:	607a      	str	r2, [r7, #4]
   1b088:	781b      	ldrb	r3, [r3, #0]
   1b08a:	2b00      	cmp	r3, #0
   1b08c:	d1f6      	bne.n	1b07c <simple_strlen+0x16>
    }
    return ui32RetVal;
   1b08e:	68fb      	ldr	r3, [r7, #12]
}
   1b090:	4618      	mov	r0, r3
   1b092:	3714      	adds	r7, #20
   1b094:	46bd      	mov	sp, r7
   1b096:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b09a:	4770      	bx	lr

0001b09c <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   1b09c:	b480      	push	{r7}
   1b09e:	b087      	sub	sp, #28
   1b0a0:	af00      	add	r7, sp, #0
   1b0a2:	60f8      	str	r0, [r7, #12]
   1b0a4:	460b      	mov	r3, r1
   1b0a6:	607a      	str	r2, [r7, #4]
   1b0a8:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   1b0ae:	687b      	ldr	r3, [r7, #4]
   1b0b0:	2b00      	cmp	r3, #0
   1b0b2:	dc0c      	bgt.n	1b0ce <padbuffer+0x32>
    {
        return i32Cnt;
   1b0b4:	697b      	ldr	r3, [r7, #20]
   1b0b6:	e010      	b.n	1b0da <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   1b0b8:	68fb      	ldr	r3, [r7, #12]
   1b0ba:	2b00      	cmp	r3, #0
   1b0bc:	d004      	beq.n	1b0c8 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   1b0be:	68fb      	ldr	r3, [r7, #12]
   1b0c0:	1c5a      	adds	r2, r3, #1
   1b0c2:	60fa      	str	r2, [r7, #12]
   1b0c4:	7afa      	ldrb	r2, [r7, #11]
   1b0c6:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   1b0c8:	697b      	ldr	r3, [r7, #20]
   1b0ca:	3301      	adds	r3, #1
   1b0cc:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   1b0ce:	687b      	ldr	r3, [r7, #4]
   1b0d0:	1e5a      	subs	r2, r3, #1
   1b0d2:	607a      	str	r2, [r7, #4]
   1b0d4:	2b00      	cmp	r3, #0
   1b0d6:	d1ef      	bne.n	1b0b8 <padbuffer+0x1c>
    }

    return i32Cnt;
   1b0d8:	697b      	ldr	r3, [r7, #20]
}
   1b0da:	4618      	mov	r0, r3
   1b0dc:	371c      	adds	r7, #28
   1b0de:	46bd      	mov	sp, r7
   1b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b0e4:	4770      	bx	lr
	...

0001b0e8 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   1b0e8:	b590      	push	{r4, r7, lr}
   1b0ea:	b08f      	sub	sp, #60	; 0x3c
   1b0ec:	af00      	add	r7, sp, #0
   1b0ee:	ed87 0a03 	vstr	s0, [r7, #12]
   1b0f2:	60b8      	str	r0, [r7, #8]
   1b0f4:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   1b0f6:	68bb      	ldr	r3, [r7, #8]
   1b0f8:	681b      	ldr	r3, [r3, #0]
   1b0fa:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   1b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b0fe:	2b03      	cmp	r3, #3
   1b100:	dc02      	bgt.n	1b108 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   1b102:	f06f 0302 	mvn.w	r3, #2
   1b106:	e0e7      	b.n	1b2d8 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   1b108:	edd7 7a03 	vldr	s15, [r7, #12]
   1b10c:	eef5 7a40 	vcmp.f32	s15, #0.0
   1b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b114:	d104      	bne.n	1b120 <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   1b116:	68bb      	ldr	r3, [r7, #8]
   1b118:	4a71      	ldr	r2, [pc, #452]	; (1b2e0 <ftoa+0x1f8>)
   1b11a:	601a      	str	r2, [r3, #0]
        return 3;
   1b11c:	2303      	movs	r3, #3
   1b11e:	e0db      	b.n	1b2d8 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   1b120:	68bb      	ldr	r3, [r7, #8]
   1b122:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   1b124:	68fb      	ldr	r3, [r7, #12]
   1b126:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   1b128:	693b      	ldr	r3, [r7, #16]
   1b12a:	15db      	asrs	r3, r3, #23
   1b12c:	b2db      	uxtb	r3, r3
   1b12e:	3b7f      	subs	r3, #127	; 0x7f
   1b130:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   1b132:	693b      	ldr	r3, [r7, #16]
   1b134:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1b138:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b13c:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   1b13e:	2300      	movs	r3, #0
   1b140:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   1b142:	2300      	movs	r3, #0
   1b144:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   1b146:	69fb      	ldr	r3, [r7, #28]
   1b148:	2b1e      	cmp	r3, #30
   1b14a:	dd02      	ble.n	1b152 <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   1b14c:	f06f 0301 	mvn.w	r3, #1
   1b150:	e0c2      	b.n	1b2d8 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   1b152:	69fb      	ldr	r3, [r7, #28]
   1b154:	f113 0f17 	cmn.w	r3, #23
   1b158:	da02      	bge.n	1b160 <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   1b15a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b15e:	e0bb      	b.n	1b2d8 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   1b160:	69fb      	ldr	r3, [r7, #28]
   1b162:	2b16      	cmp	r3, #22
   1b164:	dd06      	ble.n	1b174 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   1b166:	69fb      	ldr	r3, [r7, #28]
   1b168:	3b17      	subs	r3, #23
   1b16a:	69ba      	ldr	r2, [r7, #24]
   1b16c:	fa02 f303 	lsl.w	r3, r2, r3
   1b170:	637b      	str	r3, [r7, #52]	; 0x34
   1b172:	e01a      	b.n	1b1aa <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   1b174:	69fb      	ldr	r3, [r7, #28]
   1b176:	2b00      	cmp	r3, #0
   1b178:	db0f      	blt.n	1b19a <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   1b17a:	69fb      	ldr	r3, [r7, #28]
   1b17c:	f1c3 0317 	rsb	r3, r3, #23
   1b180:	69ba      	ldr	r2, [r7, #24]
   1b182:	fa42 f303 	asr.w	r3, r2, r3
   1b186:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   1b188:	69fb      	ldr	r3, [r7, #28]
   1b18a:	3301      	adds	r3, #1
   1b18c:	69ba      	ldr	r2, [r7, #24]
   1b18e:	fa02 f303 	lsl.w	r3, r2, r3
   1b192:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1b196:	633b      	str	r3, [r7, #48]	; 0x30
   1b198:	e007      	b.n	1b1aa <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   1b19a:	69bb      	ldr	r3, [r7, #24]
   1b19c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   1b1a0:	69fb      	ldr	r3, [r7, #28]
   1b1a2:	43db      	mvns	r3, r3
   1b1a4:	fa42 f303 	asr.w	r3, r2, r3
   1b1a8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   1b1aa:	693b      	ldr	r3, [r7, #16]
   1b1ac:	2b00      	cmp	r3, #0
   1b1ae:	da04      	bge.n	1b1ba <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   1b1b0:	68bb      	ldr	r3, [r7, #8]
   1b1b2:	1c5a      	adds	r2, r3, #1
   1b1b4:	60ba      	str	r2, [r7, #8]
   1b1b6:	222d      	movs	r2, #45	; 0x2d
   1b1b8:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   1b1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1bc:	2b00      	cmp	r3, #0
   1b1be:	d105      	bne.n	1b1cc <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   1b1c0:	68bb      	ldr	r3, [r7, #8]
   1b1c2:	1c5a      	adds	r2, r3, #1
   1b1c4:	60ba      	str	r2, [r7, #8]
   1b1c6:	2230      	movs	r2, #48	; 0x30
   1b1c8:	701a      	strb	r2, [r3, #0]
   1b1ca:	e021      	b.n	1b210 <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   1b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1ce:	2b00      	cmp	r3, #0
   1b1d0:	dd08      	ble.n	1b1e4 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   1b1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1b1d8:	68ba      	ldr	r2, [r7, #8]
   1b1da:	4618      	mov	r0, r3
   1b1dc:	4621      	mov	r1, r4
   1b1de:	f7ff fe9a 	bl	1af16 <uint64_to_str>
   1b1e2:	e011      	b.n	1b208 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   1b1e4:	68bb      	ldr	r3, [r7, #8]
   1b1e6:	1c5a      	adds	r2, r3, #1
   1b1e8:	60ba      	str	r2, [r7, #8]
   1b1ea:	222d      	movs	r2, #45	; 0x2d
   1b1ec:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   1b1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1f0:	425b      	negs	r3, r3
   1b1f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1b1f6:	68ba      	ldr	r2, [r7, #8]
   1b1f8:	4618      	mov	r0, r3
   1b1fa:	4621      	mov	r1, r4
   1b1fc:	f7ff fe8b 	bl	1af16 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   1b200:	e002      	b.n	1b208 <ftoa+0x120>
        {
            pcBuf++;
   1b202:	68bb      	ldr	r3, [r7, #8]
   1b204:	3301      	adds	r3, #1
   1b206:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   1b208:	68bb      	ldr	r3, [r7, #8]
   1b20a:	781b      	ldrb	r3, [r3, #0]
   1b20c:	2b00      	cmp	r3, #0
   1b20e:	d1f8      	bne.n	1b202 <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   1b210:	68bb      	ldr	r3, [r7, #8]
   1b212:	1c5a      	adds	r2, r3, #1
   1b214:	60ba      	str	r2, [r7, #8]
   1b216:	222e      	movs	r2, #46	; 0x2e
   1b218:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   1b21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b21c:	2b00      	cmp	r3, #0
   1b21e:	d105      	bne.n	1b22c <ftoa+0x144>
    {
        *pcBuf++ = '0';
   1b220:	68bb      	ldr	r3, [r7, #8]
   1b222:	1c5a      	adds	r2, r3, #1
   1b224:	60ba      	str	r2, [r7, #8]
   1b226:	2230      	movs	r2, #48	; 0x30
   1b228:	701a      	strb	r2, [r3, #0]
   1b22a:	e04f      	b.n	1b2cc <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   1b22c:	68ba      	ldr	r2, [r7, #8]
   1b22e:	6a3b      	ldr	r3, [r7, #32]
   1b230:	1ad3      	subs	r3, r2, r3
   1b232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b234:	1ad3      	subs	r3, r2, r3
   1b236:	3b01      	subs	r3, #1
   1b238:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   1b23a:	697a      	ldr	r2, [r7, #20]
   1b23c:	687b      	ldr	r3, [r7, #4]
   1b23e:	4293      	cmp	r3, r2
   1b240:	bfa8      	it	ge
   1b242:	4613      	movge	r3, r2
   1b244:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   1b246:	2300      	movs	r3, #0
   1b248:	62bb      	str	r3, [r7, #40]	; 0x28
   1b24a:	e015      	b.n	1b278 <ftoa+0x190>
        {
            i32FracPart *= 10;
   1b24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b24e:	4613      	mov	r3, r2
   1b250:	009b      	lsls	r3, r3, #2
   1b252:	4413      	add	r3, r2
   1b254:	005b      	lsls	r3, r3, #1
   1b256:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   1b258:	68bb      	ldr	r3, [r7, #8]
   1b25a:	1c5a      	adds	r2, r3, #1
   1b25c:	60ba      	str	r2, [r7, #8]
   1b25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b260:	1612      	asrs	r2, r2, #24
   1b262:	b2d2      	uxtb	r2, r2
   1b264:	3230      	adds	r2, #48	; 0x30
   1b266:	b2d2      	uxtb	r2, r2
   1b268:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   1b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b26c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1b270:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   1b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b274:	3301      	adds	r3, #1
   1b276:	62bb      	str	r3, [r7, #40]	; 0x28
   1b278:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b27a:	697b      	ldr	r3, [r7, #20]
   1b27c:	429a      	cmp	r2, r3
   1b27e:	dbe5      	blt.n	1b24c <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1b280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1b282:	4613      	mov	r3, r2
   1b284:	009b      	lsls	r3, r3, #2
   1b286:	4413      	add	r3, r2
   1b288:	005b      	lsls	r3, r3, #1
   1b28a:	161b      	asrs	r3, r3, #24
   1b28c:	2b04      	cmp	r3, #4
   1b28e:	dd1d      	ble.n	1b2cc <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   1b290:	68bb      	ldr	r3, [r7, #8]
   1b292:	3b01      	subs	r3, #1
   1b294:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1b296:	e015      	b.n	1b2c4 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   1b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b29a:	781b      	ldrb	r3, [r3, #0]
   1b29c:	2b2e      	cmp	r3, #46	; 0x2e
   1b29e:	d00e      	beq.n	1b2be <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   1b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2a2:	781b      	ldrb	r3, [r3, #0]
   1b2a4:	2b39      	cmp	r3, #57	; 0x39
   1b2a6:	d103      	bne.n	1b2b0 <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   1b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2aa:	2230      	movs	r2, #48	; 0x30
   1b2ac:	701a      	strb	r2, [r3, #0]
   1b2ae:	e006      	b.n	1b2be <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   1b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2b2:	781b      	ldrb	r3, [r3, #0]
   1b2b4:	3301      	adds	r3, #1
   1b2b6:	b2da      	uxtb	r2, r3
   1b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2ba:	701a      	strb	r2, [r3, #0]
                    break;
   1b2bc:	e006      	b.n	1b2cc <ftoa+0x1e4>
                }
                pcBuftmp--;
   1b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b2c0:	3b01      	subs	r3, #1
   1b2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   1b2c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1b2c6:	6a3b      	ldr	r3, [r7, #32]
   1b2c8:	429a      	cmp	r2, r3
   1b2ca:	d2e5      	bcs.n	1b298 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   1b2cc:	68bb      	ldr	r3, [r7, #8]
   1b2ce:	2200      	movs	r2, #0
   1b2d0:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   1b2d2:	68ba      	ldr	r2, [r7, #8]
   1b2d4:	6a3b      	ldr	r3, [r7, #32]
   1b2d6:	1ad3      	subs	r3, r2, r3
} // ftoa()
   1b2d8:	4618      	mov	r0, r3
   1b2da:	373c      	adds	r7, #60	; 0x3c
   1b2dc:	46bd      	mov	sp, r7
   1b2de:	bd90      	pop	{r4, r7, pc}
   1b2e0:	00302e30 	.word	0x00302e30

0001b2e4 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   1b2e4:	b590      	push	{r4, r7, lr}
   1b2e6:	b095      	sub	sp, #84	; 0x54
   1b2e8:	af00      	add	r7, sp, #0
   1b2ea:	60f8      	str	r0, [r7, #12]
   1b2ec:	60b9      	str	r1, [r7, #8]
   1b2ee:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   1b2f4:	2300      	movs	r3, #0
   1b2f6:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   1b2f8:	e2e9      	b.n	1b8ce <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   1b2fa:	2306      	movs	r3, #6
   1b2fc:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   1b2fe:	68bb      	ldr	r3, [r7, #8]
   1b300:	781b      	ldrb	r3, [r3, #0]
   1b302:	2b25      	cmp	r3, #37	; 0x25
   1b304:	d01f      	beq.n	1b346 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   1b306:	68fb      	ldr	r3, [r7, #12]
   1b308:	2b00      	cmp	r3, #0
   1b30a:	d015      	beq.n	1b338 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   1b30c:	68bb      	ldr	r3, [r7, #8]
   1b30e:	781b      	ldrb	r3, [r3, #0]
   1b310:	2b0a      	cmp	r3, #10
   1b312:	d10b      	bne.n	1b32c <am_util_stdio_vsprintf+0x48>
   1b314:	4bb2      	ldr	r3, [pc, #712]	; (1b5e0 <am_util_stdio_vsprintf+0x2fc>)
   1b316:	781b      	ldrb	r3, [r3, #0]
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d007      	beq.n	1b32c <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   1b31c:	68fb      	ldr	r3, [r7, #12]
   1b31e:	1c5a      	adds	r2, r3, #1
   1b320:	60fa      	str	r2, [r7, #12]
   1b322:	220d      	movs	r2, #13
   1b324:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   1b326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b328:	3301      	adds	r3, #1
   1b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   1b32c:	68fb      	ldr	r3, [r7, #12]
   1b32e:	1c5a      	adds	r2, r3, #1
   1b330:	60fa      	str	r2, [r7, #12]
   1b332:	68ba      	ldr	r2, [r7, #8]
   1b334:	7812      	ldrb	r2, [r2, #0]
   1b336:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   1b338:	68bb      	ldr	r3, [r7, #8]
   1b33a:	3301      	adds	r3, #1
   1b33c:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   1b33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b340:	3301      	adds	r3, #1
   1b342:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   1b344:	e2c3      	b.n	1b8ce <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   1b346:	68bb      	ldr	r3, [r7, #8]
   1b348:	3301      	adds	r3, #1
   1b34a:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   1b34c:	2300      	movs	r3, #0
   1b34e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1b352:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b356:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   1b35a:	2320      	movs	r3, #32
   1b35c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   1b360:	68bb      	ldr	r3, [r7, #8]
   1b362:	781b      	ldrb	r3, [r3, #0]
   1b364:	2b30      	cmp	r3, #48	; 0x30
   1b366:	d105      	bne.n	1b374 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   1b368:	2330      	movs	r3, #48	; 0x30
   1b36a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   1b36e:	68bb      	ldr	r3, [r7, #8]
   1b370:	3301      	adds	r3, #1
   1b372:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   1b374:	f107 0310 	add.w	r3, r7, #16
   1b378:	4619      	mov	r1, r3
   1b37a:	68b8      	ldr	r0, [r7, #8]
   1b37c:	f7ff fd85 	bl	1ae8a <decstr_to_int>
   1b380:	4603      	mov	r3, r0
   1b382:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   1b384:	693b      	ldr	r3, [r7, #16]
   1b386:	68ba      	ldr	r2, [r7, #8]
   1b388:	4413      	add	r3, r2
   1b38a:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   1b38c:	68bb      	ldr	r3, [r7, #8]
   1b38e:	781b      	ldrb	r3, [r3, #0]
   1b390:	2b73      	cmp	r3, #115	; 0x73
   1b392:	d005      	beq.n	1b3a0 <am_util_stdio_vsprintf+0xbc>
   1b394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b396:	2b00      	cmp	r3, #0
   1b398:	da02      	bge.n	1b3a0 <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   1b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b39c:	425b      	negs	r3, r3
   1b39e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1b3a0:	68bb      	ldr	r3, [r7, #8]
   1b3a2:	781b      	ldrb	r3, [r3, #0]
   1b3a4:	2b2e      	cmp	r3, #46	; 0x2e
   1b3a6:	d10e      	bne.n	1b3c6 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   1b3a8:	68bb      	ldr	r3, [r7, #8]
   1b3aa:	3301      	adds	r3, #1
   1b3ac:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1b3ae:	f107 0310 	add.w	r3, r7, #16
   1b3b2:	4619      	mov	r1, r3
   1b3b4:	68b8      	ldr	r0, [r7, #8]
   1b3b6:	f7ff fd68 	bl	1ae8a <decstr_to_int>
   1b3ba:	4603      	mov	r3, r0
   1b3bc:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   1b3be:	693b      	ldr	r3, [r7, #16]
   1b3c0:	68ba      	ldr	r2, [r7, #8]
   1b3c2:	4413      	add	r3, r2
   1b3c4:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   1b3c6:	68bb      	ldr	r3, [r7, #8]
   1b3c8:	781b      	ldrb	r3, [r3, #0]
   1b3ca:	2b6c      	cmp	r3, #108	; 0x6c
   1b3cc:	d10c      	bne.n	1b3e8 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   1b3ce:	68bb      	ldr	r3, [r7, #8]
   1b3d0:	3301      	adds	r3, #1
   1b3d2:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   1b3d4:	68bb      	ldr	r3, [r7, #8]
   1b3d6:	781b      	ldrb	r3, [r3, #0]
   1b3d8:	2b6c      	cmp	r3, #108	; 0x6c
   1b3da:	d105      	bne.n	1b3e8 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   1b3dc:	68bb      	ldr	r3, [r7, #8]
   1b3de:	3301      	adds	r3, #1
   1b3e0:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   1b3e2:	2301      	movs	r3, #1
   1b3e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   1b3e8:	68bb      	ldr	r3, [r7, #8]
   1b3ea:	781b      	ldrb	r3, [r3, #0]
   1b3ec:	3b46      	subs	r3, #70	; 0x46
   1b3ee:	2b32      	cmp	r3, #50	; 0x32
   1b3f0:	f200 825a 	bhi.w	1b8a8 <am_util_stdio_vsprintf+0x5c4>
   1b3f4:	a201      	add	r2, pc, #4	; (adr r2, 1b3fc <am_util_stdio_vsprintf+0x118>)
   1b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b3fa:	bf00      	nop
   1b3fc:	0001b82f 	.word	0x0001b82f
   1b400:	0001b8a9 	.word	0x0001b8a9
   1b404:	0001b8a9 	.word	0x0001b8a9
   1b408:	0001b8a9 	.word	0x0001b8a9
   1b40c:	0001b8a9 	.word	0x0001b8a9
   1b410:	0001b8a9 	.word	0x0001b8a9
   1b414:	0001b8a9 	.word	0x0001b8a9
   1b418:	0001b8a9 	.word	0x0001b8a9
   1b41c:	0001b8a9 	.word	0x0001b8a9
   1b420:	0001b8a9 	.word	0x0001b8a9
   1b424:	0001b8a9 	.word	0x0001b8a9
   1b428:	0001b8a9 	.word	0x0001b8a9
   1b42c:	0001b8a9 	.word	0x0001b8a9
   1b430:	0001b8a9 	.word	0x0001b8a9
   1b434:	0001b8a9 	.word	0x0001b8a9
   1b438:	0001b8a9 	.word	0x0001b8a9
   1b43c:	0001b8a9 	.word	0x0001b8a9
   1b440:	0001b8a9 	.word	0x0001b8a9
   1b444:	0001b5c3 	.word	0x0001b5c3
   1b448:	0001b8a9 	.word	0x0001b8a9
   1b44c:	0001b8a9 	.word	0x0001b8a9
   1b450:	0001b8a9 	.word	0x0001b8a9
   1b454:	0001b8a9 	.word	0x0001b8a9
   1b458:	0001b8a9 	.word	0x0001b8a9
   1b45c:	0001b8a9 	.word	0x0001b8a9
   1b460:	0001b8a9 	.word	0x0001b8a9
   1b464:	0001b8a9 	.word	0x0001b8a9
   1b468:	0001b8a9 	.word	0x0001b8a9
   1b46c:	0001b8a9 	.word	0x0001b8a9
   1b470:	0001b4c9 	.word	0x0001b4c9
   1b474:	0001b6f5 	.word	0x0001b6f5
   1b478:	0001b8a9 	.word	0x0001b8a9
   1b47c:	0001b82f 	.word	0x0001b82f
   1b480:	0001b8a9 	.word	0x0001b8a9
   1b484:	0001b8a9 	.word	0x0001b8a9
   1b488:	0001b6f5 	.word	0x0001b6f5
   1b48c:	0001b8a9 	.word	0x0001b8a9
   1b490:	0001b8a9 	.word	0x0001b8a9
   1b494:	0001b8a9 	.word	0x0001b8a9
   1b498:	0001b8a9 	.word	0x0001b8a9
   1b49c:	0001b8a9 	.word	0x0001b8a9
   1b4a0:	0001b8a9 	.word	0x0001b8a9
   1b4a4:	0001b8a9 	.word	0x0001b8a9
   1b4a8:	0001b8a9 	.word	0x0001b8a9
   1b4ac:	0001b8a9 	.word	0x0001b8a9
   1b4b0:	0001b4ef 	.word	0x0001b4ef
   1b4b4:	0001b8a9 	.word	0x0001b8a9
   1b4b8:	0001b661 	.word	0x0001b661
   1b4bc:	0001b8a9 	.word	0x0001b8a9
   1b4c0:	0001b8a9 	.word	0x0001b8a9
   1b4c4:	0001b5bd 	.word	0x0001b5bd
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   1b4c8:	687b      	ldr	r3, [r7, #4]
   1b4ca:	1d1a      	adds	r2, r3, #4
   1b4cc:	607a      	str	r2, [r7, #4]
   1b4ce:	681b      	ldr	r3, [r3, #0]
   1b4d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   1b4d4:	68fb      	ldr	r3, [r7, #12]
   1b4d6:	2b00      	cmp	r3, #0
   1b4d8:	d005      	beq.n	1b4e6 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   1b4da:	68fb      	ldr	r3, [r7, #12]
   1b4dc:	1c5a      	adds	r2, r3, #1
   1b4de:	60fa      	str	r2, [r7, #12]
   1b4e0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   1b4e4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1b4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b4e8:	3301      	adds	r3, #1
   1b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b4ec:	e1ec      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   1b4ee:	687b      	ldr	r3, [r7, #4]
   1b4f0:	1d1a      	adds	r2, r3, #4
   1b4f2:	607a      	str	r2, [r7, #4]
   1b4f4:	681b      	ldr	r3, [r3, #0]
   1b4f6:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   1b4f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1b4fa:	f7ff fdb4 	bl	1b066 <simple_strlen>
   1b4fe:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   1b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b502:	2b00      	cmp	r3, #0
   1b504:	dd2e      	ble.n	1b564 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   1b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b50a:	429a      	cmp	r2, r3
   1b50c:	d22a      	bcs.n	1b564 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1b50e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b512:	1ad3      	subs	r3, r2, r3
   1b514:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b516:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b51a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b51c:	4619      	mov	r1, r3
   1b51e:	68f8      	ldr	r0, [r7, #12]
   1b520:	f7ff fdbc 	bl	1b09c <padbuffer>
   1b524:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1b526:	68fb      	ldr	r3, [r7, #12]
   1b528:	2b00      	cmp	r3, #0
   1b52a:	d001      	beq.n	1b530 <am_util_stdio_vsprintf+0x24c>
   1b52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b52e:	e000      	b.n	1b532 <am_util_stdio_vsprintf+0x24e>
   1b530:	2300      	movs	r3, #0
   1b532:	68fa      	ldr	r2, [r7, #12]
   1b534:	4413      	add	r3, r2
   1b536:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1b538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b53a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b53c:	4413      	add	r3, r2
   1b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1b540:	2300      	movs	r3, #0
   1b542:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   1b544:	e00e      	b.n	1b564 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   1b546:	68fb      	ldr	r3, [r7, #12]
   1b548:	2b00      	cmp	r3, #0
   1b54a:	d005      	beq.n	1b558 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   1b54c:	68fb      	ldr	r3, [r7, #12]
   1b54e:	1c5a      	adds	r2, r3, #1
   1b550:	60fa      	str	r2, [r7, #12]
   1b552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1b554:	7812      	ldrb	r2, [r2, #0]
   1b556:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   1b558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b55a:	3301      	adds	r3, #1
   1b55c:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   1b55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b560:	3301      	adds	r3, #1
   1b562:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   1b564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1b566:	781b      	ldrb	r3, [r3, #0]
   1b568:	2b00      	cmp	r3, #0
   1b56a:	d1ec      	bne.n	1b546 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   1b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b56e:	2b00      	cmp	r3, #0
   1b570:	f000 81a7 	beq.w	1b8c2 <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   1b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b576:	425b      	negs	r3, r3
   1b578:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   1b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1b57e:	429a      	cmp	r2, r3
   1b580:	f080 819f 	bcs.w	1b8c2 <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   1b584:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b588:	1ad3      	subs	r3, r2, r3
   1b58a:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b590:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b592:	4619      	mov	r1, r3
   1b594:	68f8      	ldr	r0, [r7, #12]
   1b596:	f7ff fd81 	bl	1b09c <padbuffer>
   1b59a:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   1b59c:	68fb      	ldr	r3, [r7, #12]
   1b59e:	2b00      	cmp	r3, #0
   1b5a0:	d001      	beq.n	1b5a6 <am_util_stdio_vsprintf+0x2c2>
   1b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b5a4:	e000      	b.n	1b5a8 <am_util_stdio_vsprintf+0x2c4>
   1b5a6:	2300      	movs	r3, #0
   1b5a8:	68fa      	ldr	r2, [r7, #12]
   1b5aa:	4413      	add	r3, r2
   1b5ac:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1b5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b5b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b5b2:	4413      	add	r3, r2
   1b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   1b5b6:	2300      	movs	r3, #0
   1b5b8:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   1b5ba:	e182      	b.n	1b8c2 <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   1b5bc:	2301      	movs	r3, #1
   1b5be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b5c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b5c6:	2b00      	cmp	r3, #0
   1b5c8:	d00c      	beq.n	1b5e4 <am_util_stdio_vsprintf+0x300>
   1b5ca:	687b      	ldr	r3, [r7, #4]
   1b5cc:	3307      	adds	r3, #7
   1b5ce:	f023 0307 	bic.w	r3, r3, #7
   1b5d2:	f103 0208 	add.w	r2, r3, #8
   1b5d6:	607a      	str	r2, [r7, #4]
   1b5d8:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b5dc:	e008      	b.n	1b5f0 <am_util_stdio_vsprintf+0x30c>
   1b5de:	bf00      	nop
   1b5e0:	1000510c 	.word	0x1000510c
                                      va_arg(pArgs, uint32_t);
   1b5e4:	687b      	ldr	r3, [r7, #4]
   1b5e6:	1d1a      	adds	r2, r3, #4
   1b5e8:	607a      	str	r2, [r7, #4]
   1b5ea:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b5ec:	f04f 0400 	mov.w	r4, #0
   1b5f0:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b5f6:	2b00      	cmp	r3, #0
   1b5f8:	d01e      	beq.n	1b638 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   1b5fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b5fe:	f7ff fc20 	bl	1ae42 <ndigits_in_hex>
   1b602:	4602      	mov	r2, r0
   1b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b606:	1a9b      	subs	r3, r3, r2
   1b608:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b60a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b610:	4619      	mov	r1, r3
   1b612:	68f8      	ldr	r0, [r7, #12]
   1b614:	f7ff fd42 	bl	1b09c <padbuffer>
   1b618:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b61a:	68fb      	ldr	r3, [r7, #12]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d001      	beq.n	1b624 <am_util_stdio_vsprintf+0x340>
   1b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b622:	e000      	b.n	1b626 <am_util_stdio_vsprintf+0x342>
   1b624:	2300      	movs	r3, #0
   1b626:	68fa      	ldr	r2, [r7, #12]
   1b628:	4413      	add	r3, r2
   1b62a:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b62e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b630:	4413      	add	r3, r2
   1b632:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b634:	2300      	movs	r3, #0
   1b636:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   1b638:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1b63c:	68fa      	ldr	r2, [r7, #12]
   1b63e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b642:	f7ff fcb0 	bl	1afa6 <uint64_to_hexstr>
   1b646:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b648:	68fb      	ldr	r3, [r7, #12]
   1b64a:	2b00      	cmp	r3, #0
   1b64c:	d003      	beq.n	1b656 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   1b64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b650:	68fa      	ldr	r2, [r7, #12]
   1b652:	4413      	add	r3, r2
   1b654:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b65a:	4413      	add	r3, r2
   1b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b65e:	e133      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b660:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b664:	2b00      	cmp	r3, #0
   1b666:	d009      	beq.n	1b67c <am_util_stdio_vsprintf+0x398>
   1b668:	687b      	ldr	r3, [r7, #4]
   1b66a:	3307      	adds	r3, #7
   1b66c:	f023 0307 	bic.w	r3, r3, #7
   1b670:	f103 0208 	add.w	r2, r3, #8
   1b674:	607a      	str	r2, [r7, #4]
   1b676:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b67a:	e005      	b.n	1b688 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   1b67c:	687b      	ldr	r3, [r7, #4]
   1b67e:	1d1a      	adds	r2, r3, #4
   1b680:	607a      	str	r2, [r7, #4]
   1b682:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1b684:	f04f 0400 	mov.w	r4, #0
   1b688:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   1b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b68e:	2b00      	cmp	r3, #0
   1b690:	d01e      	beq.n	1b6d0 <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   1b692:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b696:	f7ff fb96 	bl	1adc6 <ndigits_in_u64>
   1b69a:	4602      	mov	r2, r0
   1b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b69e:	1a9b      	subs	r3, r3, r2
   1b6a0:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b6a8:	4619      	mov	r1, r3
   1b6aa:	68f8      	ldr	r0, [r7, #12]
   1b6ac:	f7ff fcf6 	bl	1b09c <padbuffer>
   1b6b0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b6b2:	68fb      	ldr	r3, [r7, #12]
   1b6b4:	2b00      	cmp	r3, #0
   1b6b6:	d001      	beq.n	1b6bc <am_util_stdio_vsprintf+0x3d8>
   1b6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b6ba:	e000      	b.n	1b6be <am_util_stdio_vsprintf+0x3da>
   1b6bc:	2300      	movs	r3, #0
   1b6be:	68fa      	ldr	r2, [r7, #12]
   1b6c0:	4413      	add	r3, r2
   1b6c2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b6c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b6c8:	4413      	add	r3, r2
   1b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b6cc:	2300      	movs	r3, #0
   1b6ce:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1b6d0:	68fa      	ldr	r2, [r7, #12]
   1b6d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b6d6:	f7ff fc1e 	bl	1af16 <uint64_to_str>
   1b6da:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b6dc:	68fb      	ldr	r3, [r7, #12]
   1b6de:	2b00      	cmp	r3, #0
   1b6e0:	d003      	beq.n	1b6ea <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   1b6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b6e4:	68fa      	ldr	r2, [r7, #12]
   1b6e6:	4413      	add	r3, r2
   1b6e8:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b6ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b6ee:	4413      	add	r3, r2
   1b6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b6f2:	e0e9      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1b6f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d009      	beq.n	1b710 <am_util_stdio_vsprintf+0x42c>
   1b6fc:	687b      	ldr	r3, [r7, #4]
   1b6fe:	3307      	adds	r3, #7
   1b700:	f023 0307 	bic.w	r3, r3, #7
   1b704:	f103 0208 	add.w	r2, r3, #8
   1b708:	607a      	str	r2, [r7, #4]
   1b70a:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b70e:	e005      	b.n	1b71c <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   1b710:	687b      	ldr	r3, [r7, #4]
   1b712:	1d1a      	adds	r2, r3, #4
   1b714:	607a      	str	r2, [r7, #4]
   1b716:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   1b718:	ea4f 74e3 	mov.w	r4, r3, asr #31
   1b71c:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   1b720:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b724:	2b00      	cmp	r3, #0
   1b726:	f174 0300 	sbcs.w	r3, r4, #0
   1b72a:	da0a      	bge.n	1b742 <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   1b72c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b730:	425b      	negs	r3, r3
   1b732:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   1b736:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   1b73a:	2301      	movs	r3, #1
   1b73c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   1b740:	e006      	b.n	1b750 <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   1b742:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   1b746:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   1b74a:	2300      	movs	r3, #0
   1b74c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   1b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b752:	2b00      	cmp	r3, #0
   1b754:	d04a      	beq.n	1b7ec <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   1b756:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   1b75a:	4618      	mov	r0, r3
   1b75c:	4621      	mov	r1, r4
   1b75e:	f7ff fb53 	bl	1ae08 <ndigits_in_i64>
   1b762:	4602      	mov	r2, r0
   1b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b766:	1a9b      	subs	r3, r3, r2
   1b768:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   1b76a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b76e:	2b00      	cmp	r3, #0
   1b770:	d011      	beq.n	1b796 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   1b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b774:	3b01      	subs	r3, #1
   1b776:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   1b778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b77c:	2b30      	cmp	r3, #48	; 0x30
   1b77e:	d10a      	bne.n	1b796 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   1b780:	68fb      	ldr	r3, [r7, #12]
   1b782:	2b00      	cmp	r3, #0
   1b784:	d004      	beq.n	1b790 <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   1b786:	68fb      	ldr	r3, [r7, #12]
   1b788:	1c5a      	adds	r2, r3, #1
   1b78a:	60fa      	str	r2, [r7, #12]
   1b78c:	222d      	movs	r2, #45	; 0x2d
   1b78e:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   1b790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b792:	3301      	adds	r3, #1
   1b794:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1b796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b79a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1b79c:	4619      	mov	r1, r3
   1b79e:	68f8      	ldr	r0, [r7, #12]
   1b7a0:	f7ff fc7c 	bl	1b09c <padbuffer>
   1b7a4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1b7a6:	68fb      	ldr	r3, [r7, #12]
   1b7a8:	2b00      	cmp	r3, #0
   1b7aa:	d001      	beq.n	1b7b0 <am_util_stdio_vsprintf+0x4cc>
   1b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b7ae:	e000      	b.n	1b7b2 <am_util_stdio_vsprintf+0x4ce>
   1b7b0:	2300      	movs	r3, #0
   1b7b2:	68fa      	ldr	r2, [r7, #12]
   1b7b4:	4413      	add	r3, r2
   1b7b6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   1b7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b7ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b7bc:	4413      	add	r3, r2
   1b7be:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   1b7c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d01e      	beq.n	1b80a <am_util_stdio_vsprintf+0x526>
   1b7cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1b7d0:	2b20      	cmp	r3, #32
   1b7d2:	d11a      	bne.n	1b80a <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   1b7d4:	68fb      	ldr	r3, [r7, #12]
   1b7d6:	2b00      	cmp	r3, #0
   1b7d8:	d004      	beq.n	1b7e4 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   1b7da:	68fb      	ldr	r3, [r7, #12]
   1b7dc:	1c5a      	adds	r2, r3, #1
   1b7de:	60fa      	str	r2, [r7, #12]
   1b7e0:	222d      	movs	r2, #45	; 0x2d
   1b7e2:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   1b7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b7e6:	3301      	adds	r3, #1
   1b7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   1b7ea:	e00e      	b.n	1b80a <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   1b7ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1b7f0:	2b00      	cmp	r3, #0
   1b7f2:	d00a      	beq.n	1b80a <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   1b7f4:	68fb      	ldr	r3, [r7, #12]
   1b7f6:	2b00      	cmp	r3, #0
   1b7f8:	d004      	beq.n	1b804 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   1b7fa:	68fb      	ldr	r3, [r7, #12]
   1b7fc:	1c5a      	adds	r2, r3, #1
   1b7fe:	60fa      	str	r2, [r7, #12]
   1b800:	222d      	movs	r2, #45	; 0x2d
   1b802:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   1b804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b806:	3301      	adds	r3, #1
   1b808:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1b80a:	68fa      	ldr	r2, [r7, #12]
   1b80c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   1b810:	f7ff fb81 	bl	1af16 <uint64_to_str>
   1b814:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   1b816:	68fb      	ldr	r3, [r7, #12]
   1b818:	2b00      	cmp	r3, #0
   1b81a:	d003      	beq.n	1b824 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   1b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b81e:	68fa      	ldr	r2, [r7, #12]
   1b820:	4413      	add	r3, r2
   1b822:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   1b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b828:	4413      	add	r3, r2
   1b82a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b82c:	e04c      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   1b82e:	68fb      	ldr	r3, [r7, #12]
   1b830:	2b00      	cmp	r3, #0
   1b832:	d048      	beq.n	1b8c6 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   1b834:	687b      	ldr	r3, [r7, #4]
   1b836:	3307      	adds	r3, #7
   1b838:	f023 0307 	bic.w	r3, r3, #7
   1b83c:	f103 0208 	add.w	r2, r3, #8
   1b840:	607a      	str	r2, [r7, #4]
   1b842:	e9d3 3400 	ldrd	r3, r4, [r3]
   1b846:	4618      	mov	r0, r3
   1b848:	4621      	mov	r1, r4
   1b84a:	f7f0 fdd5 	bl	c3f8 <__aeabi_d2f>
   1b84e:	4603      	mov	r3, r0
   1b850:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   1b852:	68fb      	ldr	r3, [r7, #12]
   1b854:	2214      	movs	r2, #20
   1b856:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   1b858:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1b85a:	68f8      	ldr	r0, [r7, #12]
   1b85c:	ed97 0a05 	vldr	s0, [r7, #20]
   1b860:	f7ff fc42 	bl	1b0e8 <ftoa>
   1b864:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   1b866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b868:	2b00      	cmp	r3, #0
   1b86a:	da14      	bge.n	1b896 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   1b86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b86e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b872:	d102      	bne.n	1b87a <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   1b874:	4b1e      	ldr	r3, [pc, #120]	; (1b8f0 <am_util_stdio_vsprintf+0x60c>)
   1b876:	62bb      	str	r3, [r7, #40]	; 0x28
   1b878:	e008      	b.n	1b88c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   1b87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b87c:	f113 0f02 	cmn.w	r3, #2
   1b880:	d102      	bne.n	1b888 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1b882:	4b1c      	ldr	r3, [pc, #112]	; (1b8f4 <am_util_stdio_vsprintf+0x610>)
   1b884:	62bb      	str	r3, [r7, #40]	; 0x28
   1b886:	e001      	b.n	1b88c <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   1b888:	4b1b      	ldr	r3, [pc, #108]	; (1b8f8 <am_util_stdio_vsprintf+0x614>)
   1b88a:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   1b88c:	68fb      	ldr	r3, [r7, #12]
   1b88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b890:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   1b892:	2303      	movs	r3, #3
   1b894:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   1b896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1b89a:	4413      	add	r3, r2
   1b89c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   1b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b8a0:	68fa      	ldr	r2, [r7, #12]
   1b8a2:	4413      	add	r3, r2
   1b8a4:	60fb      	str	r3, [r7, #12]
                }
                break;
   1b8a6:	e00e      	b.n	1b8c6 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   1b8a8:	68fb      	ldr	r3, [r7, #12]
   1b8aa:	2b00      	cmp	r3, #0
   1b8ac:	d005      	beq.n	1b8ba <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   1b8ae:	68fb      	ldr	r3, [r7, #12]
   1b8b0:	1c5a      	adds	r2, r3, #1
   1b8b2:	60fa      	str	r2, [r7, #12]
   1b8b4:	68ba      	ldr	r2, [r7, #8]
   1b8b6:	7812      	ldrb	r2, [r2, #0]
   1b8b8:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   1b8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1b8bc:	3301      	adds	r3, #1
   1b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1b8c0:	e002      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>
                break;
   1b8c2:	bf00      	nop
   1b8c4:	e000      	b.n	1b8c8 <am_util_stdio_vsprintf+0x5e4>
                break;
   1b8c6:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   1b8c8:	68bb      	ldr	r3, [r7, #8]
   1b8ca:	3301      	adds	r3, #1
   1b8cc:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   1b8ce:	68bb      	ldr	r3, [r7, #8]
   1b8d0:	781b      	ldrb	r3, [r3, #0]
   1b8d2:	2b00      	cmp	r3, #0
   1b8d4:	f47f ad11 	bne.w	1b2fa <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   1b8d8:	68fb      	ldr	r3, [r7, #12]
   1b8da:	2b00      	cmp	r3, #0
   1b8dc:	d002      	beq.n	1b8e4 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   1b8de:	68fb      	ldr	r3, [r7, #12]
   1b8e0:	2200      	movs	r2, #0
   1b8e2:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   1b8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1b8e6:	4618      	mov	r0, r3
   1b8e8:	3754      	adds	r7, #84	; 0x54
   1b8ea:	46bd      	mov	sp, r7
   1b8ec:	bd90      	pop	{r4, r7, pc}
   1b8ee:	bf00      	nop
   1b8f0:	00302e30 	.word	0x00302e30
   1b8f4:	00232e23 	.word	0x00232e23
   1b8f8:	003f2e3f 	.word	0x003f2e3f

0001b8fc <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   1b8fc:	b40f      	push	{r0, r1, r2, r3}
   1b8fe:	b580      	push	{r7, lr}
   1b900:	b082      	sub	sp, #8
   1b902:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   1b904:	4b0d      	ldr	r3, [pc, #52]	; (1b93c <am_util_stdio_printf+0x40>)
   1b906:	681b      	ldr	r3, [r3, #0]
   1b908:	2b00      	cmp	r3, #0
   1b90a:	d101      	bne.n	1b910 <am_util_stdio_printf+0x14>
    {
        return 0;
   1b90c:	2300      	movs	r3, #0
   1b90e:	e00d      	b.n	1b92c <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   1b910:	f107 0314 	add.w	r3, r7, #20
   1b914:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   1b916:	683a      	ldr	r2, [r7, #0]
   1b918:	6939      	ldr	r1, [r7, #16]
   1b91a:	4809      	ldr	r0, [pc, #36]	; (1b940 <am_util_stdio_printf+0x44>)
   1b91c:	f7ff fce2 	bl	1b2e4 <am_util_stdio_vsprintf>
   1b920:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   1b922:	4b06      	ldr	r3, [pc, #24]	; (1b93c <am_util_stdio_printf+0x40>)
   1b924:	681b      	ldr	r3, [r3, #0]
   1b926:	4806      	ldr	r0, [pc, #24]	; (1b940 <am_util_stdio_printf+0x44>)
   1b928:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   1b92a:	687b      	ldr	r3, [r7, #4]
}
   1b92c:	4618      	mov	r0, r3
   1b92e:	3708      	adds	r7, #8
   1b930:	46bd      	mov	sp, r7
   1b932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1b936:	b004      	add	sp, #16
   1b938:	4770      	bx	lr
   1b93a:	bf00      	nop
   1b93c:	10009e48 	.word	0x10009e48
   1b940:	1000500c 	.word	0x1000500c

0001b944 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1b944:	b580      	push	{r7, lr}
   1b946:	b082      	sub	sp, #8
   1b948:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1b94a:	2018      	movs	r0, #24
   1b94c:	f003 fc8a 	bl	1f264 <pvPortMalloc>
   1b950:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   1b952:	687b      	ldr	r3, [r7, #4]
   1b954:	2b00      	cmp	r3, #0
   1b956:	d007      	beq.n	1b968 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   1b958:	687b      	ldr	r3, [r7, #4]
   1b95a:	2200      	movs	r2, #0
   1b95c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1b95e:	687b      	ldr	r3, [r7, #4]
   1b960:	3304      	adds	r3, #4
   1b962:	4618      	mov	r0, r3
   1b964:	f000 f952 	bl	1bc0c <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   1b968:	687b      	ldr	r3, [r7, #4]
	}
   1b96a:	4618      	mov	r0, r3
   1b96c:	3708      	adds	r7, #8
   1b96e:	46bd      	mov	sp, r7
   1b970:	bd80      	pop	{r7, pc}
	...

0001b974 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   1b974:	b580      	push	{r7, lr}
   1b976:	b08c      	sub	sp, #48	; 0x30
   1b978:	af00      	add	r7, sp, #0
   1b97a:	60f8      	str	r0, [r7, #12]
   1b97c:	60b9      	str	r1, [r7, #8]
   1b97e:	607a      	str	r2, [r7, #4]
   1b980:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
   1b982:	68fb      	ldr	r3, [r7, #12]
   1b984:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   1b986:	2300      	movs	r3, #0
   1b988:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   1b98a:	2300      	movs	r3, #0
   1b98c:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1b98e:	68fb      	ldr	r3, [r7, #12]
   1b990:	2b00      	cmp	r3, #0
   1b992:	d100      	bne.n	1b996 <xEventGroupWaitBits+0x22>
   1b994:	e7fe      	b.n	1b994 <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1b996:	68bb      	ldr	r3, [r7, #8]
   1b998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1b99c:	2b00      	cmp	r3, #0
   1b99e:	d000      	beq.n	1b9a2 <xEventGroupWaitBits+0x2e>
   1b9a0:	e7fe      	b.n	1b9a0 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   1b9a2:	68bb      	ldr	r3, [r7, #8]
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d100      	bne.n	1b9aa <xEventGroupWaitBits+0x36>
   1b9a8:	e7fe      	b.n	1b9a8 <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b9aa:	f001 fc17 	bl	1d1dc <xTaskGetSchedulerState>
   1b9ae:	4603      	mov	r3, r0
   1b9b0:	2b00      	cmp	r3, #0
   1b9b2:	d102      	bne.n	1b9ba <xEventGroupWaitBits+0x46>
   1b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1b9b6:	2b00      	cmp	r3, #0
   1b9b8:	d101      	bne.n	1b9be <xEventGroupWaitBits+0x4a>
   1b9ba:	2301      	movs	r3, #1
   1b9bc:	e000      	b.n	1b9c0 <xEventGroupWaitBits+0x4c>
   1b9be:	2300      	movs	r3, #0
   1b9c0:	2b00      	cmp	r3, #0
   1b9c2:	d100      	bne.n	1b9c6 <xEventGroupWaitBits+0x52>
   1b9c4:	e7fe      	b.n	1b9c4 <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   1b9c6:	f000 ffa5 	bl	1c914 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9cc:	681b      	ldr	r3, [r3, #0]
   1b9ce:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   1b9d0:	683a      	ldr	r2, [r7, #0]
   1b9d2:	68b9      	ldr	r1, [r7, #8]
   1b9d4:	69f8      	ldr	r0, [r7, #28]
   1b9d6:	f000 f8f7 	bl	1bbc8 <prvTestWaitCondition>
   1b9da:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   1b9dc:	69bb      	ldr	r3, [r7, #24]
   1b9de:	2b00      	cmp	r3, #0
   1b9e0:	d00e      	beq.n	1ba00 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   1b9e2:	69fb      	ldr	r3, [r7, #28]
   1b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   1b9e6:	2300      	movs	r3, #0
   1b9e8:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   1b9ea:	687b      	ldr	r3, [r7, #4]
   1b9ec:	2b00      	cmp	r3, #0
   1b9ee:	d028      	beq.n	1ba42 <xEventGroupWaitBits+0xce>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9f2:	681a      	ldr	r2, [r3, #0]
   1b9f4:	68bb      	ldr	r3, [r7, #8]
   1b9f6:	43db      	mvns	r3, r3
   1b9f8:	401a      	ands	r2, r3
   1b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b9fc:	601a      	str	r2, [r3, #0]
   1b9fe:	e020      	b.n	1ba42 <xEventGroupWaitBits+0xce>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   1ba00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ba02:	2b00      	cmp	r3, #0
   1ba04:	d104      	bne.n	1ba10 <xEventGroupWaitBits+0x9c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   1ba06:	69fb      	ldr	r3, [r7, #28]
   1ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   1ba0a:	2301      	movs	r3, #1
   1ba0c:	623b      	str	r3, [r7, #32]
   1ba0e:	e018      	b.n	1ba42 <xEventGroupWaitBits+0xce>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   1ba10:	687b      	ldr	r3, [r7, #4]
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	d003      	beq.n	1ba1e <xEventGroupWaitBits+0xaa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   1ba16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   1ba1e:	683b      	ldr	r3, [r7, #0]
   1ba20:	2b00      	cmp	r3, #0
   1ba22:	d003      	beq.n	1ba2c <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   1ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1ba2a:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba2e:	1d18      	adds	r0, r3, #4
   1ba30:	68ba      	ldr	r2, [r7, #8]
   1ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ba34:	4313      	orrs	r3, r2
   1ba36:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1ba38:	4619      	mov	r1, r3
   1ba3a:	f001 f9a5 	bl	1cd88 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   1ba3e:	2300      	movs	r3, #0
   1ba40:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   1ba42:	f000 ffad 	bl	1c9a0 <xTaskResumeAll>
   1ba46:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   1ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1ba4a:	2b00      	cmp	r3, #0
   1ba4c:	d031      	beq.n	1bab2 <xEventGroupWaitBits+0x13e>
	{
		if( xAlreadyYielded == pdFALSE )
   1ba4e:	697b      	ldr	r3, [r7, #20]
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d107      	bne.n	1ba64 <xEventGroupWaitBits+0xf0>
		{
			portYIELD_WITHIN_API();
   1ba54:	4b19      	ldr	r3, [pc, #100]	; (1babc <xEventGroupWaitBits+0x148>)
   1ba56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ba5a:	601a      	str	r2, [r3, #0]
   1ba5c:	f3bf 8f4f 	dsb	sy
   1ba60:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   1ba64:	f001 fbd8 	bl	1d218 <uxTaskResetEventItemValue>
   1ba68:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1ba6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ba6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   1ba70:	2b00      	cmp	r3, #0
   1ba72:	d11a      	bne.n	1baaa <xEventGroupWaitBits+0x136>
		{
			taskENTER_CRITICAL();
   1ba74:	f7f7 fe18 	bl	136a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   1ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba7a:	681b      	ldr	r3, [r3, #0]
   1ba7c:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   1ba7e:	683a      	ldr	r2, [r7, #0]
   1ba80:	68b9      	ldr	r1, [r7, #8]
   1ba82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ba84:	f000 f8a0 	bl	1bbc8 <prvTestWaitCondition>
   1ba88:	4603      	mov	r3, r0
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	d009      	beq.n	1baa2 <xEventGroupWaitBits+0x12e>
				{
					if( xClearOnExit != pdFALSE )
   1ba8e:	687b      	ldr	r3, [r7, #4]
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	d006      	beq.n	1baa2 <xEventGroupWaitBits+0x12e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba96:	681a      	ldr	r2, [r3, #0]
   1ba98:	68bb      	ldr	r3, [r7, #8]
   1ba9a:	43db      	mvns	r3, r3
   1ba9c:	401a      	ands	r2, r3
   1ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1baa0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   1baa2:	2301      	movs	r3, #1
   1baa4:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
   1baa6:	f7f7 fe25 	bl	136f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1baac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   1bab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1bab4:	4618      	mov	r0, r3
   1bab6:	3730      	adds	r7, #48	; 0x30
   1bab8:	46bd      	mov	sp, r7
   1baba:	bd80      	pop	{r7, pc}
   1babc:	e000ed04 	.word	0xe000ed04

0001bac0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   1bac0:	b580      	push	{r7, lr}
   1bac2:	b08c      	sub	sp, #48	; 0x30
   1bac4:	af00      	add	r7, sp, #0
   1bac6:	6078      	str	r0, [r7, #4]
   1bac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   1baca:	2300      	movs	r3, #0
   1bacc:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   1bace:	687b      	ldr	r3, [r7, #4]
   1bad0:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   1bad2:	2300      	movs	r3, #0
   1bad4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   1bad6:	687b      	ldr	r3, [r7, #4]
   1bad8:	2b00      	cmp	r3, #0
   1bada:	d100      	bne.n	1bade <xEventGroupSetBits+0x1e>
   1badc:	e7fe      	b.n	1badc <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1bade:	683b      	ldr	r3, [r7, #0]
   1bae0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1bae4:	2b00      	cmp	r3, #0
   1bae6:	d000      	beq.n	1baea <xEventGroupSetBits+0x2a>
   1bae8:	e7fe      	b.n	1bae8 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   1baea:	6a3b      	ldr	r3, [r7, #32]
   1baec:	3304      	adds	r3, #4
   1baee:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1baf0:	69fb      	ldr	r3, [r7, #28]
   1baf2:	3308      	adds	r3, #8
   1baf4:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   1baf6:	f000 ff0d 	bl	1c914 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   1bafa:	69fb      	ldr	r3, [r7, #28]
   1bafc:	68db      	ldr	r3, [r3, #12]
   1bafe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   1bb00:	6a3b      	ldr	r3, [r7, #32]
   1bb02:	681a      	ldr	r2, [r3, #0]
   1bb04:	683b      	ldr	r3, [r7, #0]
   1bb06:	431a      	orrs	r2, r3
   1bb08:	6a3b      	ldr	r3, [r7, #32]
   1bb0a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1bb0c:	e03c      	b.n	1bb88 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   1bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bb10:	685b      	ldr	r3, [r3, #4]
   1bb12:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   1bb1a:	2300      	movs	r3, #0
   1bb1c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   1bb1e:	693b      	ldr	r3, [r7, #16]
   1bb20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1bb24:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1bb26:	693b      	ldr	r3, [r7, #16]
   1bb28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1bb2c:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1bb2e:	68fb      	ldr	r3, [r7, #12]
   1bb30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   1bb34:	2b00      	cmp	r3, #0
   1bb36:	d108      	bne.n	1bb4a <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1bb38:	6a3b      	ldr	r3, [r7, #32]
   1bb3a:	681a      	ldr	r2, [r3, #0]
   1bb3c:	693b      	ldr	r3, [r7, #16]
   1bb3e:	4013      	ands	r3, r2
   1bb40:	2b00      	cmp	r3, #0
   1bb42:	d00b      	beq.n	1bb5c <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   1bb44:	2301      	movs	r3, #1
   1bb46:	627b      	str	r3, [r7, #36]	; 0x24
   1bb48:	e008      	b.n	1bb5c <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1bb4a:	6a3b      	ldr	r3, [r7, #32]
   1bb4c:	681a      	ldr	r2, [r3, #0]
   1bb4e:	693b      	ldr	r3, [r7, #16]
   1bb50:	401a      	ands	r2, r3
   1bb52:	693b      	ldr	r3, [r7, #16]
   1bb54:	429a      	cmp	r2, r3
   1bb56:	d101      	bne.n	1bb5c <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   1bb58:	2301      	movs	r3, #1
   1bb5a:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   1bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bb5e:	2b00      	cmp	r3, #0
   1bb60:	d010      	beq.n	1bb84 <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1bb62:	68fb      	ldr	r3, [r7, #12]
   1bb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1bb68:	2b00      	cmp	r3, #0
   1bb6a:	d003      	beq.n	1bb74 <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   1bb6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bb6e:	693b      	ldr	r3, [r7, #16]
   1bb70:	4313      	orrs	r3, r2
   1bb72:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1bb74:	6a3b      	ldr	r3, [r7, #32]
   1bb76:	681b      	ldr	r3, [r3, #0]
   1bb78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1bb7c:	4619      	mov	r1, r3
   1bb7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1bb80:	f001 f9a8 	bl	1ced4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   1bb84:	697b      	ldr	r3, [r7, #20]
   1bb86:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   1bb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1bb8a:	69bb      	ldr	r3, [r7, #24]
   1bb8c:	429a      	cmp	r2, r3
   1bb8e:	d1be      	bne.n	1bb0e <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1bb90:	6a3b      	ldr	r3, [r7, #32]
   1bb92:	681a      	ldr	r2, [r3, #0]
   1bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bb96:	43db      	mvns	r3, r3
   1bb98:	401a      	ands	r2, r3
   1bb9a:	6a3b      	ldr	r3, [r7, #32]
   1bb9c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   1bb9e:	f000 feff 	bl	1c9a0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   1bba2:	6a3b      	ldr	r3, [r7, #32]
   1bba4:	681b      	ldr	r3, [r3, #0]
}
   1bba6:	4618      	mov	r0, r3
   1bba8:	3730      	adds	r7, #48	; 0x30
   1bbaa:	46bd      	mov	sp, r7
   1bbac:	bd80      	pop	{r7, pc}

0001bbae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   1bbae:	b580      	push	{r7, lr}
   1bbb0:	b082      	sub	sp, #8
   1bbb2:	af00      	add	r7, sp, #0
   1bbb4:	6078      	str	r0, [r7, #4]
   1bbb6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   1bbb8:	6839      	ldr	r1, [r7, #0]
   1bbba:	6878      	ldr	r0, [r7, #4]
   1bbbc:	f7ff ff80 	bl	1bac0 <xEventGroupSetBits>
}
   1bbc0:	bf00      	nop
   1bbc2:	3708      	adds	r7, #8
   1bbc4:	46bd      	mov	sp, r7
   1bbc6:	bd80      	pop	{r7, pc}

0001bbc8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   1bbc8:	b480      	push	{r7}
   1bbca:	b087      	sub	sp, #28
   1bbcc:	af00      	add	r7, sp, #0
   1bbce:	60f8      	str	r0, [r7, #12]
   1bbd0:	60b9      	str	r1, [r7, #8]
   1bbd2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   1bbd4:	2300      	movs	r3, #0
   1bbd6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   1bbd8:	687b      	ldr	r3, [r7, #4]
   1bbda:	2b00      	cmp	r3, #0
   1bbdc:	d107      	bne.n	1bbee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1bbde:	68fa      	ldr	r2, [r7, #12]
   1bbe0:	68bb      	ldr	r3, [r7, #8]
   1bbe2:	4013      	ands	r3, r2
   1bbe4:	2b00      	cmp	r3, #0
   1bbe6:	d00a      	beq.n	1bbfe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1bbe8:	2301      	movs	r3, #1
   1bbea:	617b      	str	r3, [r7, #20]
   1bbec:	e007      	b.n	1bbfe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1bbee:	68fa      	ldr	r2, [r7, #12]
   1bbf0:	68bb      	ldr	r3, [r7, #8]
   1bbf2:	401a      	ands	r2, r3
   1bbf4:	68bb      	ldr	r3, [r7, #8]
   1bbf6:	429a      	cmp	r2, r3
   1bbf8:	d101      	bne.n	1bbfe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1bbfa:	2301      	movs	r3, #1
   1bbfc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   1bbfe:	697b      	ldr	r3, [r7, #20]
}
   1bc00:	4618      	mov	r0, r3
   1bc02:	371c      	adds	r7, #28
   1bc04:	46bd      	mov	sp, r7
   1bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc0a:	4770      	bx	lr

0001bc0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1bc0c:	b480      	push	{r7}
   1bc0e:	b083      	sub	sp, #12
   1bc10:	af00      	add	r7, sp, #0
   1bc12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc14:	687b      	ldr	r3, [r7, #4]
   1bc16:	f103 0208 	add.w	r2, r3, #8
   1bc1a:	687b      	ldr	r3, [r7, #4]
   1bc1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1bc1e:	687b      	ldr	r3, [r7, #4]
   1bc20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bc24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc26:	687b      	ldr	r3, [r7, #4]
   1bc28:	f103 0208 	add.w	r2, r3, #8
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1bc30:	687b      	ldr	r3, [r7, #4]
   1bc32:	f103 0208 	add.w	r2, r3, #8
   1bc36:	687b      	ldr	r3, [r7, #4]
   1bc38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1bc3a:	687b      	ldr	r3, [r7, #4]
   1bc3c:	2200      	movs	r2, #0
   1bc3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1bc40:	bf00      	nop
   1bc42:	370c      	adds	r7, #12
   1bc44:	46bd      	mov	sp, r7
   1bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc4a:	4770      	bx	lr

0001bc4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1bc4c:	b480      	push	{r7}
   1bc4e:	b083      	sub	sp, #12
   1bc50:	af00      	add	r7, sp, #0
   1bc52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1bc54:	687b      	ldr	r3, [r7, #4]
   1bc56:	2200      	movs	r2, #0
   1bc58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1bc5a:	bf00      	nop
   1bc5c:	370c      	adds	r7, #12
   1bc5e:	46bd      	mov	sp, r7
   1bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bc64:	4770      	bx	lr

0001bc66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1bc66:	b480      	push	{r7}
   1bc68:	b085      	sub	sp, #20
   1bc6a:	af00      	add	r7, sp, #0
   1bc6c:	6078      	str	r0, [r7, #4]
   1bc6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1bc70:	687b      	ldr	r3, [r7, #4]
   1bc72:	685b      	ldr	r3, [r3, #4]
   1bc74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1bc76:	683b      	ldr	r3, [r7, #0]
   1bc78:	68fa      	ldr	r2, [r7, #12]
   1bc7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1bc7c:	68fb      	ldr	r3, [r7, #12]
   1bc7e:	689a      	ldr	r2, [r3, #8]
   1bc80:	683b      	ldr	r3, [r7, #0]
   1bc82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1bc84:	68fb      	ldr	r3, [r7, #12]
   1bc86:	689b      	ldr	r3, [r3, #8]
   1bc88:	683a      	ldr	r2, [r7, #0]
   1bc8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1bc8c:	68fb      	ldr	r3, [r7, #12]
   1bc8e:	683a      	ldr	r2, [r7, #0]
   1bc90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   1bc92:	683b      	ldr	r3, [r7, #0]
   1bc94:	687a      	ldr	r2, [r7, #4]
   1bc96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1bc98:	687b      	ldr	r3, [r7, #4]
   1bc9a:	681b      	ldr	r3, [r3, #0]
   1bc9c:	1c5a      	adds	r2, r3, #1
   1bc9e:	687b      	ldr	r3, [r7, #4]
   1bca0:	601a      	str	r2, [r3, #0]
}
   1bca2:	bf00      	nop
   1bca4:	3714      	adds	r7, #20
   1bca6:	46bd      	mov	sp, r7
   1bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bcac:	4770      	bx	lr

0001bcae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1bcae:	b480      	push	{r7}
   1bcb0:	b085      	sub	sp, #20
   1bcb2:	af00      	add	r7, sp, #0
   1bcb4:	6078      	str	r0, [r7, #4]
   1bcb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1bcb8:	683b      	ldr	r3, [r7, #0]
   1bcba:	681b      	ldr	r3, [r3, #0]
   1bcbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1bcbe:	68bb      	ldr	r3, [r7, #8]
   1bcc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bcc4:	d103      	bne.n	1bcce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1bcc6:	687b      	ldr	r3, [r7, #4]
   1bcc8:	691b      	ldr	r3, [r3, #16]
   1bcca:	60fb      	str	r3, [r7, #12]
   1bccc:	e00c      	b.n	1bce8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1bcce:	687b      	ldr	r3, [r7, #4]
   1bcd0:	3308      	adds	r3, #8
   1bcd2:	60fb      	str	r3, [r7, #12]
   1bcd4:	e002      	b.n	1bcdc <vListInsert+0x2e>
   1bcd6:	68fb      	ldr	r3, [r7, #12]
   1bcd8:	685b      	ldr	r3, [r3, #4]
   1bcda:	60fb      	str	r3, [r7, #12]
   1bcdc:	68fb      	ldr	r3, [r7, #12]
   1bcde:	685b      	ldr	r3, [r3, #4]
   1bce0:	681a      	ldr	r2, [r3, #0]
   1bce2:	68bb      	ldr	r3, [r7, #8]
   1bce4:	429a      	cmp	r2, r3
   1bce6:	d9f6      	bls.n	1bcd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1bce8:	68fb      	ldr	r3, [r7, #12]
   1bcea:	685a      	ldr	r2, [r3, #4]
   1bcec:	683b      	ldr	r3, [r7, #0]
   1bcee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1bcf0:	683b      	ldr	r3, [r7, #0]
   1bcf2:	685b      	ldr	r3, [r3, #4]
   1bcf4:	683a      	ldr	r2, [r7, #0]
   1bcf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1bcf8:	683b      	ldr	r3, [r7, #0]
   1bcfa:	68fa      	ldr	r2, [r7, #12]
   1bcfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1bcfe:	68fb      	ldr	r3, [r7, #12]
   1bd00:	683a      	ldr	r2, [r7, #0]
   1bd02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   1bd04:	683b      	ldr	r3, [r7, #0]
   1bd06:	687a      	ldr	r2, [r7, #4]
   1bd08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1bd0a:	687b      	ldr	r3, [r7, #4]
   1bd0c:	681b      	ldr	r3, [r3, #0]
   1bd0e:	1c5a      	adds	r2, r3, #1
   1bd10:	687b      	ldr	r3, [r7, #4]
   1bd12:	601a      	str	r2, [r3, #0]
}
   1bd14:	bf00      	nop
   1bd16:	3714      	adds	r7, #20
   1bd18:	46bd      	mov	sp, r7
   1bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd1e:	4770      	bx	lr

0001bd20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1bd20:	b480      	push	{r7}
   1bd22:	b085      	sub	sp, #20
   1bd24:	af00      	add	r7, sp, #0
   1bd26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1bd28:	687b      	ldr	r3, [r7, #4]
   1bd2a:	691b      	ldr	r3, [r3, #16]
   1bd2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1bd2e:	687b      	ldr	r3, [r7, #4]
   1bd30:	685b      	ldr	r3, [r3, #4]
   1bd32:	687a      	ldr	r2, [r7, #4]
   1bd34:	6892      	ldr	r2, [r2, #8]
   1bd36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1bd38:	687b      	ldr	r3, [r7, #4]
   1bd3a:	689b      	ldr	r3, [r3, #8]
   1bd3c:	687a      	ldr	r2, [r7, #4]
   1bd3e:	6852      	ldr	r2, [r2, #4]
   1bd40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1bd42:	68fb      	ldr	r3, [r7, #12]
   1bd44:	685a      	ldr	r2, [r3, #4]
   1bd46:	687b      	ldr	r3, [r7, #4]
   1bd48:	429a      	cmp	r2, r3
   1bd4a:	d103      	bne.n	1bd54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1bd4c:	687b      	ldr	r3, [r7, #4]
   1bd4e:	689a      	ldr	r2, [r3, #8]
   1bd50:	68fb      	ldr	r3, [r7, #12]
   1bd52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   1bd54:	687b      	ldr	r3, [r7, #4]
   1bd56:	2200      	movs	r2, #0
   1bd58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1bd5a:	68fb      	ldr	r3, [r7, #12]
   1bd5c:	681b      	ldr	r3, [r3, #0]
   1bd5e:	1e5a      	subs	r2, r3, #1
   1bd60:	68fb      	ldr	r3, [r7, #12]
   1bd62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1bd64:	68fb      	ldr	r3, [r7, #12]
   1bd66:	681b      	ldr	r3, [r3, #0]
}
   1bd68:	4618      	mov	r0, r3
   1bd6a:	3714      	adds	r7, #20
   1bd6c:	46bd      	mov	sp, r7
   1bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bd72:	4770      	bx	lr

0001bd74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1bd74:	b580      	push	{r7, lr}
   1bd76:	b084      	sub	sp, #16
   1bd78:	af00      	add	r7, sp, #0
   1bd7a:	6078      	str	r0, [r7, #4]
   1bd7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
   1bd7e:	687b      	ldr	r3, [r7, #4]
   1bd80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1bd82:	68fb      	ldr	r3, [r7, #12]
   1bd84:	2b00      	cmp	r3, #0
   1bd86:	d100      	bne.n	1bd8a <xQueueGenericReset+0x16>
   1bd88:	e7fe      	b.n	1bd88 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   1bd8a:	f7f7 fc8d 	bl	136a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1bd8e:	68fb      	ldr	r3, [r7, #12]
   1bd90:	681a      	ldr	r2, [r3, #0]
   1bd92:	68fb      	ldr	r3, [r7, #12]
   1bd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bd96:	68f9      	ldr	r1, [r7, #12]
   1bd98:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1bd9a:	fb01 f303 	mul.w	r3, r1, r3
   1bd9e:	441a      	add	r2, r3
   1bda0:	68fb      	ldr	r3, [r7, #12]
   1bda2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1bda4:	68fb      	ldr	r3, [r7, #12]
   1bda6:	2200      	movs	r2, #0
   1bda8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1bdaa:	68fb      	ldr	r3, [r7, #12]
   1bdac:	681a      	ldr	r2, [r3, #0]
   1bdae:	68fb      	ldr	r3, [r7, #12]
   1bdb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1bdb2:	68fb      	ldr	r3, [r7, #12]
   1bdb4:	681a      	ldr	r2, [r3, #0]
   1bdb6:	68fb      	ldr	r3, [r7, #12]
   1bdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bdba:	3b01      	subs	r3, #1
   1bdbc:	68f9      	ldr	r1, [r7, #12]
   1bdbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1bdc0:	fb01 f303 	mul.w	r3, r1, r3
   1bdc4:	441a      	add	r2, r3
   1bdc6:	68fb      	ldr	r3, [r7, #12]
   1bdc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1bdca:	68fb      	ldr	r3, [r7, #12]
   1bdcc:	22ff      	movs	r2, #255	; 0xff
   1bdce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   1bdd2:	68fb      	ldr	r3, [r7, #12]
   1bdd4:	22ff      	movs	r2, #255	; 0xff
   1bdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   1bdda:	683b      	ldr	r3, [r7, #0]
   1bddc:	2b00      	cmp	r3, #0
   1bdde:	d114      	bne.n	1be0a <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bde0:	68fb      	ldr	r3, [r7, #12]
   1bde2:	691b      	ldr	r3, [r3, #16]
   1bde4:	2b00      	cmp	r3, #0
   1bde6:	d01a      	beq.n	1be1e <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bde8:	68fb      	ldr	r3, [r7, #12]
   1bdea:	3310      	adds	r3, #16
   1bdec:	4618      	mov	r0, r3
   1bdee:	f001 f815 	bl	1ce1c <xTaskRemoveFromEventList>
   1bdf2:	4603      	mov	r3, r0
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d012      	beq.n	1be1e <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1bdf8:	4b0c      	ldr	r3, [pc, #48]	; (1be2c <xQueueGenericReset+0xb8>)
   1bdfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bdfe:	601a      	str	r2, [r3, #0]
   1be00:	f3bf 8f4f 	dsb	sy
   1be04:	f3bf 8f6f 	isb	sy
   1be08:	e009      	b.n	1be1e <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1be0a:	68fb      	ldr	r3, [r7, #12]
   1be0c:	3310      	adds	r3, #16
   1be0e:	4618      	mov	r0, r3
   1be10:	f7ff fefc 	bl	1bc0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1be14:	68fb      	ldr	r3, [r7, #12]
   1be16:	3324      	adds	r3, #36	; 0x24
   1be18:	4618      	mov	r0, r3
   1be1a:	f7ff fef7 	bl	1bc0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   1be1e:	f7f7 fc69 	bl	136f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1be22:	2301      	movs	r3, #1
}
   1be24:	4618      	mov	r0, r3
   1be26:	3710      	adds	r7, #16
   1be28:	46bd      	mov	sp, r7
   1be2a:	bd80      	pop	{r7, pc}
   1be2c:	e000ed04 	.word	0xe000ed04

0001be30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1be30:	b580      	push	{r7, lr}
   1be32:	b08a      	sub	sp, #40	; 0x28
   1be34:	af02      	add	r7, sp, #8
   1be36:	60f8      	str	r0, [r7, #12]
   1be38:	60b9      	str	r1, [r7, #8]
   1be3a:	4613      	mov	r3, r2
   1be3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1be3e:	68fb      	ldr	r3, [r7, #12]
   1be40:	2b00      	cmp	r3, #0
   1be42:	d100      	bne.n	1be46 <xQueueGenericCreate+0x16>
   1be44:	e7fe      	b.n	1be44 <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1be46:	68bb      	ldr	r3, [r7, #8]
   1be48:	2b00      	cmp	r3, #0
   1be4a:	d102      	bne.n	1be52 <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1be4c:	2300      	movs	r3, #0
   1be4e:	61fb      	str	r3, [r7, #28]
   1be50:	e004      	b.n	1be5c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1be52:	68fb      	ldr	r3, [r7, #12]
   1be54:	68ba      	ldr	r2, [r7, #8]
   1be56:	fb02 f303 	mul.w	r3, r2, r3
   1be5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1be5c:	69fb      	ldr	r3, [r7, #28]
   1be5e:	3348      	adds	r3, #72	; 0x48
   1be60:	4618      	mov	r0, r3
   1be62:	f003 f9ff 	bl	1f264 <pvPortMalloc>
   1be66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   1be68:	69bb      	ldr	r3, [r7, #24]
   1be6a:	2b00      	cmp	r3, #0
   1be6c:	d00d      	beq.n	1be8a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   1be6e:	69bb      	ldr	r3, [r7, #24]
   1be70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1be72:	697b      	ldr	r3, [r7, #20]
   1be74:	3348      	adds	r3, #72	; 0x48
   1be76:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1be78:	79fa      	ldrb	r2, [r7, #7]
   1be7a:	69bb      	ldr	r3, [r7, #24]
   1be7c:	9300      	str	r3, [sp, #0]
   1be7e:	4613      	mov	r3, r2
   1be80:	697a      	ldr	r2, [r7, #20]
   1be82:	68b9      	ldr	r1, [r7, #8]
   1be84:	68f8      	ldr	r0, [r7, #12]
   1be86:	f000 f805 	bl	1be94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   1be8a:	69bb      	ldr	r3, [r7, #24]
	}
   1be8c:	4618      	mov	r0, r3
   1be8e:	3720      	adds	r7, #32
   1be90:	46bd      	mov	sp, r7
   1be92:	bd80      	pop	{r7, pc}

0001be94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1be94:	b580      	push	{r7, lr}
   1be96:	b084      	sub	sp, #16
   1be98:	af00      	add	r7, sp, #0
   1be9a:	60f8      	str	r0, [r7, #12]
   1be9c:	60b9      	str	r1, [r7, #8]
   1be9e:	607a      	str	r2, [r7, #4]
   1bea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1bea2:	68bb      	ldr	r3, [r7, #8]
   1bea4:	2b00      	cmp	r3, #0
   1bea6:	d103      	bne.n	1beb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1bea8:	69bb      	ldr	r3, [r7, #24]
   1beaa:	69ba      	ldr	r2, [r7, #24]
   1beac:	601a      	str	r2, [r3, #0]
   1beae:	e002      	b.n	1beb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1beb0:	69bb      	ldr	r3, [r7, #24]
   1beb2:	687a      	ldr	r2, [r7, #4]
   1beb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1beb6:	69bb      	ldr	r3, [r7, #24]
   1beb8:	68fa      	ldr	r2, [r7, #12]
   1beba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1bebc:	69bb      	ldr	r3, [r7, #24]
   1bebe:	68ba      	ldr	r2, [r7, #8]
   1bec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1bec2:	2101      	movs	r1, #1
   1bec4:	69b8      	ldr	r0, [r7, #24]
   1bec6:	f7ff ff55 	bl	1bd74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1beca:	bf00      	nop
   1becc:	3710      	adds	r7, #16
   1bece:	46bd      	mov	sp, r7
   1bed0:	bd80      	pop	{r7, pc}
	...

0001bed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1bed4:	b580      	push	{r7, lr}
   1bed6:	b08a      	sub	sp, #40	; 0x28
   1bed8:	af00      	add	r7, sp, #0
   1beda:	60f8      	str	r0, [r7, #12]
   1bedc:	60b9      	str	r1, [r7, #8]
   1bede:	607a      	str	r2, [r7, #4]
   1bee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1bee2:	2300      	movs	r3, #0
   1bee4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1bee6:	68fb      	ldr	r3, [r7, #12]
   1bee8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1beea:	6a3b      	ldr	r3, [r7, #32]
   1beec:	2b00      	cmp	r3, #0
   1beee:	d100      	bne.n	1bef2 <xQueueGenericSend+0x1e>
   1bef0:	e7fe      	b.n	1bef0 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bef2:	68bb      	ldr	r3, [r7, #8]
   1bef4:	2b00      	cmp	r3, #0
   1bef6:	d103      	bne.n	1bf00 <xQueueGenericSend+0x2c>
   1bef8:	6a3b      	ldr	r3, [r7, #32]
   1befa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1befc:	2b00      	cmp	r3, #0
   1befe:	d101      	bne.n	1bf04 <xQueueGenericSend+0x30>
   1bf00:	2301      	movs	r3, #1
   1bf02:	e000      	b.n	1bf06 <xQueueGenericSend+0x32>
   1bf04:	2300      	movs	r3, #0
   1bf06:	2b00      	cmp	r3, #0
   1bf08:	d100      	bne.n	1bf0c <xQueueGenericSend+0x38>
   1bf0a:	e7fe      	b.n	1bf0a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1bf0c:	683b      	ldr	r3, [r7, #0]
   1bf0e:	2b02      	cmp	r3, #2
   1bf10:	d103      	bne.n	1bf1a <xQueueGenericSend+0x46>
   1bf12:	6a3b      	ldr	r3, [r7, #32]
   1bf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bf16:	2b01      	cmp	r3, #1
   1bf18:	d101      	bne.n	1bf1e <xQueueGenericSend+0x4a>
   1bf1a:	2301      	movs	r3, #1
   1bf1c:	e000      	b.n	1bf20 <xQueueGenericSend+0x4c>
   1bf1e:	2300      	movs	r3, #0
   1bf20:	2b00      	cmp	r3, #0
   1bf22:	d100      	bne.n	1bf26 <xQueueGenericSend+0x52>
   1bf24:	e7fe      	b.n	1bf24 <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bf26:	f001 f959 	bl	1d1dc <xTaskGetSchedulerState>
   1bf2a:	4603      	mov	r3, r0
   1bf2c:	2b00      	cmp	r3, #0
   1bf2e:	d102      	bne.n	1bf36 <xQueueGenericSend+0x62>
   1bf30:	687b      	ldr	r3, [r7, #4]
   1bf32:	2b00      	cmp	r3, #0
   1bf34:	d101      	bne.n	1bf3a <xQueueGenericSend+0x66>
   1bf36:	2301      	movs	r3, #1
   1bf38:	e000      	b.n	1bf3c <xQueueGenericSend+0x68>
   1bf3a:	2300      	movs	r3, #0
   1bf3c:	2b00      	cmp	r3, #0
   1bf3e:	d100      	bne.n	1bf42 <xQueueGenericSend+0x6e>
   1bf40:	e7fe      	b.n	1bf40 <xQueueGenericSend+0x6c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1bf42:	f7f7 fbb1 	bl	136a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1bf46:	6a3b      	ldr	r3, [r7, #32]
   1bf48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1bf4a:	6a3b      	ldr	r3, [r7, #32]
   1bf4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1bf4e:	429a      	cmp	r2, r3
   1bf50:	d302      	bcc.n	1bf58 <xQueueGenericSend+0x84>
   1bf52:	683b      	ldr	r3, [r7, #0]
   1bf54:	2b02      	cmp	r3, #2
   1bf56:	d129      	bne.n	1bfac <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1bf58:	683a      	ldr	r2, [r7, #0]
   1bf5a:	68b9      	ldr	r1, [r7, #8]
   1bf5c:	6a38      	ldr	r0, [r7, #32]
   1bf5e:	f000 f9cb 	bl	1c2f8 <prvCopyDataToQueue>
   1bf62:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bf64:	6a3b      	ldr	r3, [r7, #32]
   1bf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf68:	2b00      	cmp	r3, #0
   1bf6a:	d010      	beq.n	1bf8e <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bf6c:	6a3b      	ldr	r3, [r7, #32]
   1bf6e:	3324      	adds	r3, #36	; 0x24
   1bf70:	4618      	mov	r0, r3
   1bf72:	f000 ff53 	bl	1ce1c <xTaskRemoveFromEventList>
   1bf76:	4603      	mov	r3, r0
   1bf78:	2b00      	cmp	r3, #0
   1bf7a:	d013      	beq.n	1bfa4 <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1bf7c:	4b3f      	ldr	r3, [pc, #252]	; (1c07c <xQueueGenericSend+0x1a8>)
   1bf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bf82:	601a      	str	r2, [r3, #0]
   1bf84:	f3bf 8f4f 	dsb	sy
   1bf88:	f3bf 8f6f 	isb	sy
   1bf8c:	e00a      	b.n	1bfa4 <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   1bf8e:	69fb      	ldr	r3, [r7, #28]
   1bf90:	2b00      	cmp	r3, #0
   1bf92:	d007      	beq.n	1bfa4 <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   1bf94:	4b39      	ldr	r3, [pc, #228]	; (1c07c <xQueueGenericSend+0x1a8>)
   1bf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bf9a:	601a      	str	r2, [r3, #0]
   1bf9c:	f3bf 8f4f 	dsb	sy
   1bfa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1bfa4:	f7f7 fba6 	bl	136f4 <vPortExitCritical>
				return pdPASS;
   1bfa8:	2301      	movs	r3, #1
   1bfaa:	e063      	b.n	1c074 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bfac:	687b      	ldr	r3, [r7, #4]
   1bfae:	2b00      	cmp	r3, #0
   1bfb0:	d103      	bne.n	1bfba <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bfb2:	f7f7 fb9f 	bl	136f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1bfb6:	2300      	movs	r3, #0
   1bfb8:	e05c      	b.n	1c074 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfbc:	2b00      	cmp	r3, #0
   1bfbe:	d106      	bne.n	1bfce <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bfc0:	f107 0314 	add.w	r3, r7, #20
   1bfc4:	4618      	mov	r0, r3
   1bfc6:	f000 ffd3 	bl	1cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1bfca:	2301      	movs	r3, #1
   1bfcc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bfce:	f7f7 fb91 	bl	136f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bfd2:	f000 fc9f 	bl	1c914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1bfd6:	f7f7 fb67 	bl	136a8 <vPortEnterCritical>
   1bfda:	6a3b      	ldr	r3, [r7, #32]
   1bfdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1bfe0:	b25b      	sxtb	r3, r3
   1bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bfe6:	d103      	bne.n	1bff0 <xQueueGenericSend+0x11c>
   1bfe8:	6a3b      	ldr	r3, [r7, #32]
   1bfea:	2200      	movs	r2, #0
   1bfec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1bff0:	6a3b      	ldr	r3, [r7, #32]
   1bff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1bff6:	b25b      	sxtb	r3, r3
   1bff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bffc:	d103      	bne.n	1c006 <xQueueGenericSend+0x132>
   1bffe:	6a3b      	ldr	r3, [r7, #32]
   1c000:	2200      	movs	r2, #0
   1c002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c006:	f7f7 fb75 	bl	136f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c00a:	1d3a      	adds	r2, r7, #4
   1c00c:	f107 0314 	add.w	r3, r7, #20
   1c010:	4611      	mov	r1, r2
   1c012:	4618      	mov	r0, r3
   1c014:	f000 ffc2 	bl	1cf9c <xTaskCheckForTimeOut>
   1c018:	4603      	mov	r3, r0
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d124      	bne.n	1c068 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1c01e:	6a38      	ldr	r0, [r7, #32]
   1c020:	f000 fa54 	bl	1c4cc <prvIsQueueFull>
   1c024:	4603      	mov	r3, r0
   1c026:	2b00      	cmp	r3, #0
   1c028:	d018      	beq.n	1c05c <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1c02a:	6a3b      	ldr	r3, [r7, #32]
   1c02c:	3310      	adds	r3, #16
   1c02e:	687a      	ldr	r2, [r7, #4]
   1c030:	4611      	mov	r1, r2
   1c032:	4618      	mov	r0, r3
   1c034:	f000 fe8e 	bl	1cd54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1c038:	6a38      	ldr	r0, [r7, #32]
   1c03a:	f000 f9df 	bl	1c3fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1c03e:	f000 fcaf 	bl	1c9a0 <xTaskResumeAll>
   1c042:	4603      	mov	r3, r0
   1c044:	2b00      	cmp	r3, #0
   1c046:	f47f af7c 	bne.w	1bf42 <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
   1c04a:	4b0c      	ldr	r3, [pc, #48]	; (1c07c <xQueueGenericSend+0x1a8>)
   1c04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c050:	601a      	str	r2, [r3, #0]
   1c052:	f3bf 8f4f 	dsb	sy
   1c056:	f3bf 8f6f 	isb	sy
   1c05a:	e772      	b.n	1bf42 <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1c05c:	6a38      	ldr	r0, [r7, #32]
   1c05e:	f000 f9cd 	bl	1c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1c062:	f000 fc9d 	bl	1c9a0 <xTaskResumeAll>
   1c066:	e76c      	b.n	1bf42 <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1c068:	6a38      	ldr	r0, [r7, #32]
   1c06a:	f000 f9c7 	bl	1c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1c06e:	f000 fc97 	bl	1c9a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1c072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   1c074:	4618      	mov	r0, r3
   1c076:	3728      	adds	r7, #40	; 0x28
   1c078:	46bd      	mov	sp, r7
   1c07a:	bd80      	pop	{r7, pc}
   1c07c:	e000ed04 	.word	0xe000ed04

0001c080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1c080:	b580      	push	{r7, lr}
   1c082:	b08c      	sub	sp, #48	; 0x30
   1c084:	af00      	add	r7, sp, #0
   1c086:	60f8      	str	r0, [r7, #12]
   1c088:	60b9      	str	r1, [r7, #8]
   1c08a:	607a      	str	r2, [r7, #4]
   1c08c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   1c08e:	68fb      	ldr	r3, [r7, #12]
   1c090:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   1c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c094:	2b00      	cmp	r3, #0
   1c096:	d100      	bne.n	1c09a <xQueueGenericSendFromISR+0x1a>
   1c098:	e7fe      	b.n	1c098 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c09a:	68bb      	ldr	r3, [r7, #8]
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d103      	bne.n	1c0a8 <xQueueGenericSendFromISR+0x28>
   1c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c0a4:	2b00      	cmp	r3, #0
   1c0a6:	d101      	bne.n	1c0ac <xQueueGenericSendFromISR+0x2c>
   1c0a8:	2301      	movs	r3, #1
   1c0aa:	e000      	b.n	1c0ae <xQueueGenericSendFromISR+0x2e>
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	2b00      	cmp	r3, #0
   1c0b0:	d100      	bne.n	1c0b4 <xQueueGenericSendFromISR+0x34>
   1c0b2:	e7fe      	b.n	1c0b2 <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1c0b4:	683b      	ldr	r3, [r7, #0]
   1c0b6:	2b02      	cmp	r3, #2
   1c0b8:	d103      	bne.n	1c0c2 <xQueueGenericSendFromISR+0x42>
   1c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c0be:	2b01      	cmp	r3, #1
   1c0c0:	d101      	bne.n	1c0c6 <xQueueGenericSendFromISR+0x46>
   1c0c2:	2301      	movs	r3, #1
   1c0c4:	e000      	b.n	1c0c8 <xQueueGenericSendFromISR+0x48>
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d100      	bne.n	1c0ce <xQueueGenericSendFromISR+0x4e>
   1c0cc:	e7fe      	b.n	1c0cc <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1c0ce:	f7f7 fb8d 	bl	137ec <vPortValidateInterruptPriority>
	__asm volatile
   1c0d2:	f3ef 8211 	mrs	r2, BASEPRI
   1c0d6:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c0da:	f383 8811 	msr	BASEPRI, r3
   1c0de:	f3bf 8f6f 	isb	sy
   1c0e2:	f3bf 8f4f 	dsb	sy
   1c0e6:	61fa      	str	r2, [r7, #28]
   1c0e8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
   1c0ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1c0ec:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1c0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c0f6:	429a      	cmp	r2, r3
   1c0f8:	d302      	bcc.n	1c100 <xQueueGenericSendFromISR+0x80>
   1c0fa:	683b      	ldr	r3, [r7, #0]
   1c0fc:	2b02      	cmp	r3, #2
   1c0fe:	d12c      	bne.n	1c15a <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1c100:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1c10a:	683a      	ldr	r2, [r7, #0]
   1c10c:	68b9      	ldr	r1, [r7, #8]
   1c10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c110:	f000 f8f2 	bl	1c2f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1c114:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   1c118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c11c:	d112      	bne.n	1c144 <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c122:	2b00      	cmp	r3, #0
   1c124:	d016      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c128:	3324      	adds	r3, #36	; 0x24
   1c12a:	4618      	mov	r0, r3
   1c12c:	f000 fe76 	bl	1ce1c <xTaskRemoveFromEventList>
   1c130:	4603      	mov	r3, r0
   1c132:	2b00      	cmp	r3, #0
   1c134:	d00e      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1c136:	687b      	ldr	r3, [r7, #4]
   1c138:	2b00      	cmp	r3, #0
   1c13a:	d00b      	beq.n	1c154 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1c13c:	687b      	ldr	r3, [r7, #4]
   1c13e:	2201      	movs	r2, #1
   1c140:	601a      	str	r2, [r3, #0]
   1c142:	e007      	b.n	1c154 <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1c148:	3301      	adds	r3, #1
   1c14a:	b2db      	uxtb	r3, r3
   1c14c:	b25a      	sxtb	r2, r3
   1c14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   1c154:	2301      	movs	r3, #1
   1c156:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
   1c158:	e001      	b.n	1c15e <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1c15a:	2300      	movs	r3, #0
   1c15c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c160:	617b      	str	r3, [r7, #20]
	__asm volatile
   1c162:	697b      	ldr	r3, [r7, #20]
   1c164:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1c16a:	4618      	mov	r0, r3
   1c16c:	3730      	adds	r7, #48	; 0x30
   1c16e:	46bd      	mov	sp, r7
   1c170:	bd80      	pop	{r7, pc}
	...

0001c174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1c174:	b580      	push	{r7, lr}
   1c176:	b08a      	sub	sp, #40	; 0x28
   1c178:	af00      	add	r7, sp, #0
   1c17a:	60f8      	str	r0, [r7, #12]
   1c17c:	60b9      	str	r1, [r7, #8]
   1c17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1c180:	2300      	movs	r3, #0
   1c182:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1c184:	68fb      	ldr	r3, [r7, #12]
   1c186:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c188:	6a3b      	ldr	r3, [r7, #32]
   1c18a:	2b00      	cmp	r3, #0
   1c18c:	d100      	bne.n	1c190 <xQueueReceive+0x1c>
   1c18e:	e7fe      	b.n	1c18e <xQueueReceive+0x1a>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1c190:	68bb      	ldr	r3, [r7, #8]
   1c192:	2b00      	cmp	r3, #0
   1c194:	d103      	bne.n	1c19e <xQueueReceive+0x2a>
   1c196:	6a3b      	ldr	r3, [r7, #32]
   1c198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c19a:	2b00      	cmp	r3, #0
   1c19c:	d101      	bne.n	1c1a2 <xQueueReceive+0x2e>
   1c19e:	2301      	movs	r3, #1
   1c1a0:	e000      	b.n	1c1a4 <xQueueReceive+0x30>
   1c1a2:	2300      	movs	r3, #0
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	d100      	bne.n	1c1aa <xQueueReceive+0x36>
   1c1a8:	e7fe      	b.n	1c1a8 <xQueueReceive+0x34>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c1aa:	f001 f817 	bl	1d1dc <xTaskGetSchedulerState>
   1c1ae:	4603      	mov	r3, r0
   1c1b0:	2b00      	cmp	r3, #0
   1c1b2:	d102      	bne.n	1c1ba <xQueueReceive+0x46>
   1c1b4:	687b      	ldr	r3, [r7, #4]
   1c1b6:	2b00      	cmp	r3, #0
   1c1b8:	d101      	bne.n	1c1be <xQueueReceive+0x4a>
   1c1ba:	2301      	movs	r3, #1
   1c1bc:	e000      	b.n	1c1c0 <xQueueReceive+0x4c>
   1c1be:	2300      	movs	r3, #0
   1c1c0:	2b00      	cmp	r3, #0
   1c1c2:	d100      	bne.n	1c1c6 <xQueueReceive+0x52>
   1c1c4:	e7fe      	b.n	1c1c4 <xQueueReceive+0x50>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1c1c6:	f7f7 fa6f 	bl	136a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c1ca:	6a3b      	ldr	r3, [r7, #32]
   1c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c1ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c1d0:	69fb      	ldr	r3, [r7, #28]
   1c1d2:	2b00      	cmp	r3, #0
   1c1d4:	d01f      	beq.n	1c216 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1c1d6:	68b9      	ldr	r1, [r7, #8]
   1c1d8:	6a38      	ldr	r0, [r7, #32]
   1c1da:	f000 f8e9 	bl	1c3b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1c1de:	69fb      	ldr	r3, [r7, #28]
   1c1e0:	1e5a      	subs	r2, r3, #1
   1c1e2:	6a3b      	ldr	r3, [r7, #32]
   1c1e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c1e6:	6a3b      	ldr	r3, [r7, #32]
   1c1e8:	691b      	ldr	r3, [r3, #16]
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d00f      	beq.n	1c20e <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c1ee:	6a3b      	ldr	r3, [r7, #32]
   1c1f0:	3310      	adds	r3, #16
   1c1f2:	4618      	mov	r0, r3
   1c1f4:	f000 fe12 	bl	1ce1c <xTaskRemoveFromEventList>
   1c1f8:	4603      	mov	r3, r0
   1c1fa:	2b00      	cmp	r3, #0
   1c1fc:	d007      	beq.n	1c20e <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c1fe:	4b3d      	ldr	r3, [pc, #244]	; (1c2f4 <xQueueReceive+0x180>)
   1c200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c204:	601a      	str	r2, [r3, #0]
   1c206:	f3bf 8f4f 	dsb	sy
   1c20a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c20e:	f7f7 fa71 	bl	136f4 <vPortExitCritical>
				return pdPASS;
   1c212:	2301      	movs	r3, #1
   1c214:	e069      	b.n	1c2ea <xQueueReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c216:	687b      	ldr	r3, [r7, #4]
   1c218:	2b00      	cmp	r3, #0
   1c21a:	d103      	bne.n	1c224 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1c21c:	f7f7 fa6a 	bl	136f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1c220:	2300      	movs	r3, #0
   1c222:	e062      	b.n	1c2ea <xQueueReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c226:	2b00      	cmp	r3, #0
   1c228:	d106      	bne.n	1c238 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c22a:	f107 0314 	add.w	r3, r7, #20
   1c22e:	4618      	mov	r0, r3
   1c230:	f000 fe9e 	bl	1cf70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1c234:	2301      	movs	r3, #1
   1c236:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c238:	f7f7 fa5c 	bl	136f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c23c:	f000 fb6a 	bl	1c914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1c240:	f7f7 fa32 	bl	136a8 <vPortEnterCritical>
   1c244:	6a3b      	ldr	r3, [r7, #32]
   1c246:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c24a:	b25b      	sxtb	r3, r3
   1c24c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c250:	d103      	bne.n	1c25a <xQueueReceive+0xe6>
   1c252:	6a3b      	ldr	r3, [r7, #32]
   1c254:	2200      	movs	r2, #0
   1c256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1c25a:	6a3b      	ldr	r3, [r7, #32]
   1c25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c260:	b25b      	sxtb	r3, r3
   1c262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c266:	d103      	bne.n	1c270 <xQueueReceive+0xfc>
   1c268:	6a3b      	ldr	r3, [r7, #32]
   1c26a:	2200      	movs	r2, #0
   1c26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c270:	f7f7 fa40 	bl	136f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c274:	1d3a      	adds	r2, r7, #4
   1c276:	f107 0314 	add.w	r3, r7, #20
   1c27a:	4611      	mov	r1, r2
   1c27c:	4618      	mov	r0, r3
   1c27e:	f000 fe8d 	bl	1cf9c <xTaskCheckForTimeOut>
   1c282:	4603      	mov	r3, r0
   1c284:	2b00      	cmp	r3, #0
   1c286:	d123      	bne.n	1c2d0 <xQueueReceive+0x15c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c288:	6a38      	ldr	r0, [r7, #32]
   1c28a:	f000 f909 	bl	1c4a0 <prvIsQueueEmpty>
   1c28e:	4603      	mov	r3, r0
   1c290:	2b00      	cmp	r3, #0
   1c292:	d017      	beq.n	1c2c4 <xQueueReceive+0x150>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c294:	6a3b      	ldr	r3, [r7, #32]
   1c296:	3324      	adds	r3, #36	; 0x24
   1c298:	687a      	ldr	r2, [r7, #4]
   1c29a:	4611      	mov	r1, r2
   1c29c:	4618      	mov	r0, r3
   1c29e:	f000 fd59 	bl	1cd54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   1c2a2:	6a38      	ldr	r0, [r7, #32]
   1c2a4:	f000 f8aa 	bl	1c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1c2a8:	f000 fb7a 	bl	1c9a0 <xTaskResumeAll>
   1c2ac:	4603      	mov	r3, r0
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d189      	bne.n	1c1c6 <xQueueReceive+0x52>
				{
					portYIELD_WITHIN_API();
   1c2b2:	4b10      	ldr	r3, [pc, #64]	; (1c2f4 <xQueueReceive+0x180>)
   1c2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c2b8:	601a      	str	r2, [r3, #0]
   1c2ba:	f3bf 8f4f 	dsb	sy
   1c2be:	f3bf 8f6f 	isb	sy
   1c2c2:	e780      	b.n	1c1c6 <xQueueReceive+0x52>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1c2c4:	6a38      	ldr	r0, [r7, #32]
   1c2c6:	f000 f899 	bl	1c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1c2ca:	f000 fb69 	bl	1c9a0 <xTaskResumeAll>
   1c2ce:	e77a      	b.n	1c1c6 <xQueueReceive+0x52>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c2d0:	6a38      	ldr	r0, [r7, #32]
   1c2d2:	f000 f893 	bl	1c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1c2d6:	f000 fb63 	bl	1c9a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c2da:	6a38      	ldr	r0, [r7, #32]
   1c2dc:	f000 f8e0 	bl	1c4a0 <prvIsQueueEmpty>
   1c2e0:	4603      	mov	r3, r0
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	f43f af6f 	beq.w	1c1c6 <xQueueReceive+0x52>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1c2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   1c2ea:	4618      	mov	r0, r3
   1c2ec:	3728      	adds	r7, #40	; 0x28
   1c2ee:	46bd      	mov	sp, r7
   1c2f0:	bd80      	pop	{r7, pc}
   1c2f2:	bf00      	nop
   1c2f4:	e000ed04 	.word	0xe000ed04

0001c2f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c2f8:	b580      	push	{r7, lr}
   1c2fa:	b086      	sub	sp, #24
   1c2fc:	af00      	add	r7, sp, #0
   1c2fe:	60f8      	str	r0, [r7, #12]
   1c300:	60b9      	str	r1, [r7, #8]
   1c302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c304:	2300      	movs	r3, #0
   1c306:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c308:	68fb      	ldr	r3, [r7, #12]
   1c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c30c:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c30e:	68fb      	ldr	r3, [r7, #12]
   1c310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c312:	2b00      	cmp	r3, #0
   1c314:	d043      	beq.n	1c39e <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c316:	687b      	ldr	r3, [r7, #4]
   1c318:	2b00      	cmp	r3, #0
   1c31a:	d119      	bne.n	1c350 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1c31c:	68fb      	ldr	r3, [r7, #12]
   1c31e:	6858      	ldr	r0, [r3, #4]
   1c320:	68fb      	ldr	r3, [r7, #12]
   1c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c324:	461a      	mov	r2, r3
   1c326:	68b9      	ldr	r1, [r7, #8]
   1c328:	f7ef ff1a 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1c32c:	68fb      	ldr	r3, [r7, #12]
   1c32e:	685a      	ldr	r2, [r3, #4]
   1c330:	68fb      	ldr	r3, [r7, #12]
   1c332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c334:	441a      	add	r2, r3
   1c336:	68fb      	ldr	r3, [r7, #12]
   1c338:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c33a:	68fb      	ldr	r3, [r7, #12]
   1c33c:	685a      	ldr	r2, [r3, #4]
   1c33e:	68fb      	ldr	r3, [r7, #12]
   1c340:	689b      	ldr	r3, [r3, #8]
   1c342:	429a      	cmp	r2, r3
   1c344:	d32b      	bcc.n	1c39e <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c346:	68fb      	ldr	r3, [r7, #12]
   1c348:	681a      	ldr	r2, [r3, #0]
   1c34a:	68fb      	ldr	r3, [r7, #12]
   1c34c:	605a      	str	r2, [r3, #4]
   1c34e:	e026      	b.n	1c39e <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1c350:	68fb      	ldr	r3, [r7, #12]
   1c352:	68d8      	ldr	r0, [r3, #12]
   1c354:	68fb      	ldr	r3, [r7, #12]
   1c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c358:	461a      	mov	r2, r3
   1c35a:	68b9      	ldr	r1, [r7, #8]
   1c35c:	f7ef ff00 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1c360:	68fb      	ldr	r3, [r7, #12]
   1c362:	68da      	ldr	r2, [r3, #12]
   1c364:	68fb      	ldr	r3, [r7, #12]
   1c366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c368:	425b      	negs	r3, r3
   1c36a:	441a      	add	r2, r3
   1c36c:	68fb      	ldr	r3, [r7, #12]
   1c36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c370:	68fb      	ldr	r3, [r7, #12]
   1c372:	68da      	ldr	r2, [r3, #12]
   1c374:	68fb      	ldr	r3, [r7, #12]
   1c376:	681b      	ldr	r3, [r3, #0]
   1c378:	429a      	cmp	r2, r3
   1c37a:	d207      	bcs.n	1c38c <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1c37c:	68fb      	ldr	r3, [r7, #12]
   1c37e:	689a      	ldr	r2, [r3, #8]
   1c380:	68fb      	ldr	r3, [r7, #12]
   1c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c384:	425b      	negs	r3, r3
   1c386:	441a      	add	r2, r3
   1c388:	68fb      	ldr	r3, [r7, #12]
   1c38a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c38c:	687b      	ldr	r3, [r7, #4]
   1c38e:	2b02      	cmp	r3, #2
   1c390:	d105      	bne.n	1c39e <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c392:	697b      	ldr	r3, [r7, #20]
   1c394:	2b00      	cmp	r3, #0
   1c396:	d002      	beq.n	1c39e <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c398:	697b      	ldr	r3, [r7, #20]
   1c39a:	3b01      	subs	r3, #1
   1c39c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c39e:	697b      	ldr	r3, [r7, #20]
   1c3a0:	1c5a      	adds	r2, r3, #1
   1c3a2:	68fb      	ldr	r3, [r7, #12]
   1c3a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c3a6:	693b      	ldr	r3, [r7, #16]
}
   1c3a8:	4618      	mov	r0, r3
   1c3aa:	3718      	adds	r7, #24
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	bd80      	pop	{r7, pc}

0001c3b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c3b0:	b580      	push	{r7, lr}
   1c3b2:	b082      	sub	sp, #8
   1c3b4:	af00      	add	r7, sp, #0
   1c3b6:	6078      	str	r0, [r7, #4]
   1c3b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c3ba:	687b      	ldr	r3, [r7, #4]
   1c3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d018      	beq.n	1c3f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1c3c2:	687b      	ldr	r3, [r7, #4]
   1c3c4:	68da      	ldr	r2, [r3, #12]
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3ca:	441a      	add	r2, r3
   1c3cc:	687b      	ldr	r3, [r7, #4]
   1c3ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c3d0:	687b      	ldr	r3, [r7, #4]
   1c3d2:	68da      	ldr	r2, [r3, #12]
   1c3d4:	687b      	ldr	r3, [r7, #4]
   1c3d6:	689b      	ldr	r3, [r3, #8]
   1c3d8:	429a      	cmp	r2, r3
   1c3da:	d303      	bcc.n	1c3e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1c3dc:	687b      	ldr	r3, [r7, #4]
   1c3de:	681a      	ldr	r2, [r3, #0]
   1c3e0:	687b      	ldr	r3, [r7, #4]
   1c3e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1c3e4:	687b      	ldr	r3, [r7, #4]
   1c3e6:	68d9      	ldr	r1, [r3, #12]
   1c3e8:	687b      	ldr	r3, [r7, #4]
   1c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3ec:	461a      	mov	r2, r3
   1c3ee:	6838      	ldr	r0, [r7, #0]
   1c3f0:	f7ef feb6 	bl	c160 <memcpy>
	}
}
   1c3f4:	bf00      	nop
   1c3f6:	3708      	adds	r7, #8
   1c3f8:	46bd      	mov	sp, r7
   1c3fa:	bd80      	pop	{r7, pc}

0001c3fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c3fc:	b580      	push	{r7, lr}
   1c3fe:	b084      	sub	sp, #16
   1c400:	af00      	add	r7, sp, #0
   1c402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c404:	f7f7 f950 	bl	136a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c408:	687b      	ldr	r3, [r7, #4]
   1c40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c40e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c410:	e011      	b.n	1c436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c412:	687b      	ldr	r3, [r7, #4]
   1c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c416:	2b00      	cmp	r3, #0
   1c418:	d012      	beq.n	1c440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c41a:	687b      	ldr	r3, [r7, #4]
   1c41c:	3324      	adds	r3, #36	; 0x24
   1c41e:	4618      	mov	r0, r3
   1c420:	f000 fcfc 	bl	1ce1c <xTaskRemoveFromEventList>
   1c424:	4603      	mov	r3, r0
   1c426:	2b00      	cmp	r3, #0
   1c428:	d001      	beq.n	1c42e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   1c42a:	f000 fe05 	bl	1d038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c42e:	7bfb      	ldrb	r3, [r7, #15]
   1c430:	3b01      	subs	r3, #1
   1c432:	b2db      	uxtb	r3, r3
   1c434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c436:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1c43a:	2b00      	cmp	r3, #0
   1c43c:	dce9      	bgt.n	1c412 <prvUnlockQueue+0x16>
   1c43e:	e000      	b.n	1c442 <prvUnlockQueue+0x46>
					break;
   1c440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c442:	687b      	ldr	r3, [r7, #4]
   1c444:	22ff      	movs	r2, #255	; 0xff
   1c446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   1c44a:	f7f7 f953 	bl	136f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c44e:	f7f7 f92b 	bl	136a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c452:	687b      	ldr	r3, [r7, #4]
   1c454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c45a:	e011      	b.n	1c480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	691b      	ldr	r3, [r3, #16]
   1c460:	2b00      	cmp	r3, #0
   1c462:	d012      	beq.n	1c48a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c464:	687b      	ldr	r3, [r7, #4]
   1c466:	3310      	adds	r3, #16
   1c468:	4618      	mov	r0, r3
   1c46a:	f000 fcd7 	bl	1ce1c <xTaskRemoveFromEventList>
   1c46e:	4603      	mov	r3, r0
   1c470:	2b00      	cmp	r3, #0
   1c472:	d001      	beq.n	1c478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   1c474:	f000 fde0 	bl	1d038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c478:	7bbb      	ldrb	r3, [r7, #14]
   1c47a:	3b01      	subs	r3, #1
   1c47c:	b2db      	uxtb	r3, r3
   1c47e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c480:	f997 300e 	ldrsb.w	r3, [r7, #14]
   1c484:	2b00      	cmp	r3, #0
   1c486:	dce9      	bgt.n	1c45c <prvUnlockQueue+0x60>
   1c488:	e000      	b.n	1c48c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
   1c48a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c48c:	687b      	ldr	r3, [r7, #4]
   1c48e:	22ff      	movs	r2, #255	; 0xff
   1c490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   1c494:	f7f7 f92e 	bl	136f4 <vPortExitCritical>
}
   1c498:	bf00      	nop
   1c49a:	3710      	adds	r7, #16
   1c49c:	46bd      	mov	sp, r7
   1c49e:	bd80      	pop	{r7, pc}

0001c4a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c4a0:	b580      	push	{r7, lr}
   1c4a2:	b084      	sub	sp, #16
   1c4a4:	af00      	add	r7, sp, #0
   1c4a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c4a8:	f7f7 f8fe 	bl	136a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c4ac:	687b      	ldr	r3, [r7, #4]
   1c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c4b0:	2b00      	cmp	r3, #0
   1c4b2:	d102      	bne.n	1c4ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c4b4:	2301      	movs	r3, #1
   1c4b6:	60fb      	str	r3, [r7, #12]
   1c4b8:	e001      	b.n	1c4be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c4ba:	2300      	movs	r3, #0
   1c4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c4be:	f7f7 f919 	bl	136f4 <vPortExitCritical>

	return xReturn;
   1c4c2:	68fb      	ldr	r3, [r7, #12]
}
   1c4c4:	4618      	mov	r0, r3
   1c4c6:	3710      	adds	r7, #16
   1c4c8:	46bd      	mov	sp, r7
   1c4ca:	bd80      	pop	{r7, pc}

0001c4cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c4cc:	b580      	push	{r7, lr}
   1c4ce:	b084      	sub	sp, #16
   1c4d0:	af00      	add	r7, sp, #0
   1c4d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c4d4:	f7f7 f8e8 	bl	136a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c4d8:	687b      	ldr	r3, [r7, #4]
   1c4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c4dc:	687b      	ldr	r3, [r7, #4]
   1c4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c4e0:	429a      	cmp	r2, r3
   1c4e2:	d102      	bne.n	1c4ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c4e4:	2301      	movs	r3, #1
   1c4e6:	60fb      	str	r3, [r7, #12]
   1c4e8:	e001      	b.n	1c4ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c4ee:	f7f7 f901 	bl	136f4 <vPortExitCritical>

	return xReturn;
   1c4f2:	68fb      	ldr	r3, [r7, #12]
}
   1c4f4:	4618      	mov	r0, r3
   1c4f6:	3710      	adds	r7, #16
   1c4f8:	46bd      	mov	sp, r7
   1c4fa:	bd80      	pop	{r7, pc}

0001c4fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c4fc:	b580      	push	{r7, lr}
   1c4fe:	b086      	sub	sp, #24
   1c500:	af00      	add	r7, sp, #0
   1c502:	60f8      	str	r0, [r7, #12]
   1c504:	60b9      	str	r1, [r7, #8]
   1c506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
   1c508:	68fb      	ldr	r3, [r7, #12]
   1c50a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c50c:	f7f7 f8cc 	bl	136a8 <vPortEnterCritical>
   1c510:	697b      	ldr	r3, [r7, #20]
   1c512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1c516:	b25b      	sxtb	r3, r3
   1c518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c51c:	d103      	bne.n	1c526 <vQueueWaitForMessageRestricted+0x2a>
   1c51e:	697b      	ldr	r3, [r7, #20]
   1c520:	2200      	movs	r2, #0
   1c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1c526:	697b      	ldr	r3, [r7, #20]
   1c528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1c52c:	b25b      	sxtb	r3, r3
   1c52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c532:	d103      	bne.n	1c53c <vQueueWaitForMessageRestricted+0x40>
   1c534:	697b      	ldr	r3, [r7, #20]
   1c536:	2200      	movs	r2, #0
   1c538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1c53c:	f7f7 f8da 	bl	136f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c540:	697b      	ldr	r3, [r7, #20]
   1c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c544:	2b00      	cmp	r3, #0
   1c546:	d106      	bne.n	1c556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c548:	697b      	ldr	r3, [r7, #20]
   1c54a:	3324      	adds	r3, #36	; 0x24
   1c54c:	687a      	ldr	r2, [r7, #4]
   1c54e:	68b9      	ldr	r1, [r7, #8]
   1c550:	4618      	mov	r0, r3
   1c552:	f000 fc41 	bl	1cdd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c556:	6978      	ldr	r0, [r7, #20]
   1c558:	f7ff ff50 	bl	1c3fc <prvUnlockQueue>
	}
   1c55c:	bf00      	nop
   1c55e:	3718      	adds	r7, #24
   1c560:	46bd      	mov	sp, r7
   1c562:	bd80      	pop	{r7, pc}

0001c564 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c564:	b580      	push	{r7, lr}
   1c566:	b08c      	sub	sp, #48	; 0x30
   1c568:	af04      	add	r7, sp, #16
   1c56a:	60f8      	str	r0, [r7, #12]
   1c56c:	60b9      	str	r1, [r7, #8]
   1c56e:	603b      	str	r3, [r7, #0]
   1c570:	4613      	mov	r3, r2
   1c572:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1c574:	88fb      	ldrh	r3, [r7, #6]
   1c576:	009b      	lsls	r3, r3, #2
   1c578:	4618      	mov	r0, r3
   1c57a:	f002 fe73 	bl	1f264 <pvPortMalloc>
   1c57e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   1c580:	697b      	ldr	r3, [r7, #20]
   1c582:	2b00      	cmp	r3, #0
   1c584:	d00e      	beq.n	1c5a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1c586:	204c      	movs	r0, #76	; 0x4c
   1c588:	f002 fe6c 	bl	1f264 <pvPortMalloc>
   1c58c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   1c58e:	69fb      	ldr	r3, [r7, #28]
   1c590:	2b00      	cmp	r3, #0
   1c592:	d003      	beq.n	1c59c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c594:	69fb      	ldr	r3, [r7, #28]
   1c596:	697a      	ldr	r2, [r7, #20]
   1c598:	631a      	str	r2, [r3, #48]	; 0x30
   1c59a:	e005      	b.n	1c5a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c59c:	6978      	ldr	r0, [r7, #20]
   1c59e:	f002 fef3 	bl	1f388 <vPortFree>
   1c5a2:	e001      	b.n	1c5a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c5a8:	69fb      	ldr	r3, [r7, #28]
   1c5aa:	2b00      	cmp	r3, #0
   1c5ac:	d013      	beq.n	1c5d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c5ae:	88fa      	ldrh	r2, [r7, #6]
   1c5b0:	2300      	movs	r3, #0
   1c5b2:	9303      	str	r3, [sp, #12]
   1c5b4:	69fb      	ldr	r3, [r7, #28]
   1c5b6:	9302      	str	r3, [sp, #8]
   1c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c5ba:	9301      	str	r3, [sp, #4]
   1c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5be:	9300      	str	r3, [sp, #0]
   1c5c0:	683b      	ldr	r3, [r7, #0]
   1c5c2:	68b9      	ldr	r1, [r7, #8]
   1c5c4:	68f8      	ldr	r0, [r7, #12]
   1c5c6:	f000 f80e 	bl	1c5e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   1c5ca:	69f8      	ldr	r0, [r7, #28]
   1c5cc:	f000 f886 	bl	1c6dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   1c5d0:	2301      	movs	r3, #1
   1c5d2:	61bb      	str	r3, [r7, #24]
   1c5d4:	e002      	b.n	1c5dc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c5d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c5da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c5dc:	69bb      	ldr	r3, [r7, #24]
	}
   1c5de:	4618      	mov	r0, r3
   1c5e0:	3720      	adds	r7, #32
   1c5e2:	46bd      	mov	sp, r7
   1c5e4:	bd80      	pop	{r7, pc}

0001c5e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c5e6:	b580      	push	{r7, lr}
   1c5e8:	b086      	sub	sp, #24
   1c5ea:	af00      	add	r7, sp, #0
   1c5ec:	60f8      	str	r0, [r7, #12]
   1c5ee:	60b9      	str	r1, [r7, #8]
   1c5f0:	607a      	str	r2, [r7, #4]
   1c5f2:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   1c5f4:	68bb      	ldr	r3, [r7, #8]
   1c5f6:	2b00      	cmp	r3, #0
   1c5f8:	d100      	bne.n	1c5fc <prvInitialiseNewTask+0x16>
   1c5fa:	e7fe      	b.n	1c5fa <prvInitialiseNewTask+0x14>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c5fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c600:	687b      	ldr	r3, [r7, #4]
   1c602:	009b      	lsls	r3, r3, #2
   1c604:	461a      	mov	r2, r3
   1c606:	21a5      	movs	r1, #165	; 0xa5
   1c608:	f7ef fea8 	bl	c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1c60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c60e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c610:	687b      	ldr	r3, [r7, #4]
   1c612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1c616:	3b01      	subs	r3, #1
   1c618:	009b      	lsls	r3, r3, #2
   1c61a:	4413      	add	r3, r2
   1c61c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1c61e:	693b      	ldr	r3, [r7, #16]
   1c620:	f023 0307 	bic.w	r3, r3, #7
   1c624:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c626:	693b      	ldr	r3, [r7, #16]
   1c628:	f003 0307 	and.w	r3, r3, #7
   1c62c:	2b00      	cmp	r3, #0
   1c62e:	d000      	beq.n	1c632 <prvInitialiseNewTask+0x4c>
   1c630:	e7fe      	b.n	1c630 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c632:	2300      	movs	r3, #0
   1c634:	617b      	str	r3, [r7, #20]
   1c636:	e012      	b.n	1c65e <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c638:	68ba      	ldr	r2, [r7, #8]
   1c63a:	697b      	ldr	r3, [r7, #20]
   1c63c:	4413      	add	r3, r2
   1c63e:	7819      	ldrb	r1, [r3, #0]
   1c640:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c642:	697b      	ldr	r3, [r7, #20]
   1c644:	4413      	add	r3, r2
   1c646:	3334      	adds	r3, #52	; 0x34
   1c648:	460a      	mov	r2, r1
   1c64a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   1c64c:	68ba      	ldr	r2, [r7, #8]
   1c64e:	697b      	ldr	r3, [r7, #20]
   1c650:	4413      	add	r3, r2
   1c652:	781b      	ldrb	r3, [r3, #0]
   1c654:	2b00      	cmp	r3, #0
   1c656:	d006      	beq.n	1c666 <prvInitialiseNewTask+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c658:	697b      	ldr	r3, [r7, #20]
   1c65a:	3301      	adds	r3, #1
   1c65c:	617b      	str	r3, [r7, #20]
   1c65e:	697b      	ldr	r3, [r7, #20]
   1c660:	2b0f      	cmp	r3, #15
   1c662:	d9e9      	bls.n	1c638 <prvInitialiseNewTask+0x52>
   1c664:	e000      	b.n	1c668 <prvInitialiseNewTask+0x82>
		{
			break;
   1c666:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c66a:	2200      	movs	r2, #0
   1c66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c670:	6a3b      	ldr	r3, [r7, #32]
   1c672:	2b03      	cmp	r3, #3
   1c674:	d901      	bls.n	1c67a <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c676:	2303      	movs	r3, #3
   1c678:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c67c:	6a3a      	ldr	r2, [r7, #32]
   1c67e:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c682:	3304      	adds	r3, #4
   1c684:	4618      	mov	r0, r3
   1c686:	f7ff fae1 	bl	1bc4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c68c:	3318      	adds	r3, #24
   1c68e:	4618      	mov	r0, r3
   1c690:	f7ff fadc 	bl	1bc4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c696:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c698:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c69a:	6a3b      	ldr	r3, [r7, #32]
   1c69c:	f1c3 0204 	rsb	r2, r3, #4
   1c6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c6a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6ac:	2200      	movs	r2, #0
   1c6ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6b2:	2200      	movs	r2, #0
   1c6b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c6b8:	683a      	ldr	r2, [r7, #0]
   1c6ba:	68f9      	ldr	r1, [r7, #12]
   1c6bc:	6938      	ldr	r0, [r7, #16]
   1c6be:	f7f6 fef3 	bl	134a8 <pxPortInitialiseStack>
   1c6c2:	4602      	mov	r2, r0
   1c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c6c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   1c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6ca:	2b00      	cmp	r3, #0
   1c6cc:	d002      	beq.n	1c6d4 <prvInitialiseNewTask+0xee>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c6d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c6d4:	bf00      	nop
   1c6d6:	3718      	adds	r7, #24
   1c6d8:	46bd      	mov	sp, r7
   1c6da:	bd80      	pop	{r7, pc}

0001c6dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	b082      	sub	sp, #8
   1c6e0:	af00      	add	r7, sp, #0
   1c6e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c6e4:	f7f6 ffe0 	bl	136a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   1c6e8:	4b2b      	ldr	r3, [pc, #172]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c6ea:	681b      	ldr	r3, [r3, #0]
   1c6ec:	3301      	adds	r3, #1
   1c6ee:	4a2a      	ldr	r2, [pc, #168]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c6f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1c6f2:	4b2a      	ldr	r3, [pc, #168]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c6f4:	681b      	ldr	r3, [r3, #0]
   1c6f6:	2b00      	cmp	r3, #0
   1c6f8:	d109      	bne.n	1c70e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c6fa:	4a28      	ldr	r2, [pc, #160]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c6fc:	687b      	ldr	r3, [r7, #4]
   1c6fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c700:	4b25      	ldr	r3, [pc, #148]	; (1c798 <prvAddNewTaskToReadyList+0xbc>)
   1c702:	681b      	ldr	r3, [r3, #0]
   1c704:	2b01      	cmp	r3, #1
   1c706:	d110      	bne.n	1c72a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c708:	f000 fd06 	bl	1d118 <prvInitialiseTaskLists>
   1c70c:	e00d      	b.n	1c72a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c70e:	4b24      	ldr	r3, [pc, #144]	; (1c7a0 <prvAddNewTaskToReadyList+0xc4>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d109      	bne.n	1c72a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c716:	4b21      	ldr	r3, [pc, #132]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c720:	429a      	cmp	r2, r3
   1c722:	d802      	bhi.n	1c72a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c724:	4a1d      	ldr	r2, [pc, #116]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c726:	687b      	ldr	r3, [r7, #4]
   1c728:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c72a:	4b1e      	ldr	r3, [pc, #120]	; (1c7a4 <prvAddNewTaskToReadyList+0xc8>)
   1c72c:	681b      	ldr	r3, [r3, #0]
   1c72e:	3301      	adds	r3, #1
   1c730:	4a1c      	ldr	r2, [pc, #112]	; (1c7a4 <prvAddNewTaskToReadyList+0xc8>)
   1c732:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1c734:	687b      	ldr	r3, [r7, #4]
   1c736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c738:	4b1b      	ldr	r3, [pc, #108]	; (1c7a8 <prvAddNewTaskToReadyList+0xcc>)
   1c73a:	681b      	ldr	r3, [r3, #0]
   1c73c:	429a      	cmp	r2, r3
   1c73e:	d903      	bls.n	1c748 <prvAddNewTaskToReadyList+0x6c>
   1c740:	687b      	ldr	r3, [r7, #4]
   1c742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c744:	4a18      	ldr	r2, [pc, #96]	; (1c7a8 <prvAddNewTaskToReadyList+0xcc>)
   1c746:	6013      	str	r3, [r2, #0]
   1c748:	687b      	ldr	r3, [r7, #4]
   1c74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c74c:	4613      	mov	r3, r2
   1c74e:	009b      	lsls	r3, r3, #2
   1c750:	4413      	add	r3, r2
   1c752:	009b      	lsls	r3, r3, #2
   1c754:	4a15      	ldr	r2, [pc, #84]	; (1c7ac <prvAddNewTaskToReadyList+0xd0>)
   1c756:	441a      	add	r2, r3
   1c758:	687b      	ldr	r3, [r7, #4]
   1c75a:	3304      	adds	r3, #4
   1c75c:	4619      	mov	r1, r3
   1c75e:	4610      	mov	r0, r2
   1c760:	f7ff fa81 	bl	1bc66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c764:	f7f6 ffc6 	bl	136f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   1c768:	4b0d      	ldr	r3, [pc, #52]	; (1c7a0 <prvAddNewTaskToReadyList+0xc4>)
   1c76a:	681b      	ldr	r3, [r3, #0]
   1c76c:	2b00      	cmp	r3, #0
   1c76e:	d00e      	beq.n	1c78e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c770:	4b0a      	ldr	r3, [pc, #40]	; (1c79c <prvAddNewTaskToReadyList+0xc0>)
   1c772:	681b      	ldr	r3, [r3, #0]
   1c774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c776:	687b      	ldr	r3, [r7, #4]
   1c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c77a:	429a      	cmp	r2, r3
   1c77c:	d207      	bcs.n	1c78e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c77e:	4b0c      	ldr	r3, [pc, #48]	; (1c7b0 <prvAddNewTaskToReadyList+0xd4>)
   1c780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c784:	601a      	str	r2, [r3, #0]
   1c786:	f3bf 8f4f 	dsb	sy
   1c78a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c78e:	bf00      	nop
   1c790:	3708      	adds	r7, #8
   1c792:	46bd      	mov	sp, r7
   1c794:	bd80      	pop	{r7, pc}
   1c796:	bf00      	nop
   1c798:	100051bc 	.word	0x100051bc
   1c79c:	10005110 	.word	0x10005110
   1c7a0:	100051c8 	.word	0x100051c8
   1c7a4:	100051d8 	.word	0x100051d8
   1c7a8:	100051c4 	.word	0x100051c4
   1c7ac:	10005114 	.word	0x10005114
   1c7b0:	e000ed04 	.word	0xe000ed04

0001c7b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c7b4:	b580      	push	{r7, lr}
   1c7b6:	b084      	sub	sp, #16
   1c7b8:	af00      	add	r7, sp, #0
   1c7ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c7bc:	f7f6 ff74 	bl	136a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c7c0:	687b      	ldr	r3, [r7, #4]
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d102      	bne.n	1c7cc <vTaskSuspend+0x18>
   1c7c6:	4b2b      	ldr	r3, [pc, #172]	; (1c874 <vTaskSuspend+0xc0>)
   1c7c8:	681b      	ldr	r3, [r3, #0]
   1c7ca:	e000      	b.n	1c7ce <vTaskSuspend+0x1a>
   1c7cc:	687b      	ldr	r3, [r7, #4]
   1c7ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c7d0:	68fb      	ldr	r3, [r7, #12]
   1c7d2:	3304      	adds	r3, #4
   1c7d4:	4618      	mov	r0, r3
   1c7d6:	f7ff faa3 	bl	1bd20 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c7da:	68fb      	ldr	r3, [r7, #12]
   1c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c7de:	2b00      	cmp	r3, #0
   1c7e0:	d004      	beq.n	1c7ec <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c7e2:	68fb      	ldr	r3, [r7, #12]
   1c7e4:	3318      	adds	r3, #24
   1c7e6:	4618      	mov	r0, r3
   1c7e8:	f7ff fa9a 	bl	1bd20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c7ec:	68fb      	ldr	r3, [r7, #12]
   1c7ee:	3304      	adds	r3, #4
   1c7f0:	4619      	mov	r1, r3
   1c7f2:	4821      	ldr	r0, [pc, #132]	; (1c878 <vTaskSuspend+0xc4>)
   1c7f4:	f7ff fa37 	bl	1bc66 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c7f8:	68fb      	ldr	r3, [r7, #12]
   1c7fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   1c7fe:	b2db      	uxtb	r3, r3
   1c800:	2b01      	cmp	r3, #1
   1c802:	d103      	bne.n	1c80c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c804:	68fb      	ldr	r3, [r7, #12]
   1c806:	2200      	movs	r2, #0
   1c808:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c80c:	f7f6 ff72 	bl	136f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   1c810:	4b1a      	ldr	r3, [pc, #104]	; (1c87c <vTaskSuspend+0xc8>)
   1c812:	681b      	ldr	r3, [r3, #0]
   1c814:	2b00      	cmp	r3, #0
   1c816:	d005      	beq.n	1c824 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c818:	f7f6 ff46 	bl	136a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   1c81c:	f000 fcbe 	bl	1d19c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1c820:	f7f6 ff68 	bl	136f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c824:	4b13      	ldr	r3, [pc, #76]	; (1c874 <vTaskSuspend+0xc0>)
   1c826:	681b      	ldr	r3, [r3, #0]
   1c828:	68fa      	ldr	r2, [r7, #12]
   1c82a:	429a      	cmp	r2, r3
   1c82c:	d11d      	bne.n	1c86a <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
   1c82e:	4b13      	ldr	r3, [pc, #76]	; (1c87c <vTaskSuspend+0xc8>)
   1c830:	681b      	ldr	r3, [r3, #0]
   1c832:	2b00      	cmp	r3, #0
   1c834:	d00d      	beq.n	1c852 <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c836:	4b12      	ldr	r3, [pc, #72]	; (1c880 <vTaskSuspend+0xcc>)
   1c838:	681b      	ldr	r3, [r3, #0]
   1c83a:	2b00      	cmp	r3, #0
   1c83c:	d000      	beq.n	1c840 <vTaskSuspend+0x8c>
   1c83e:	e7fe      	b.n	1c83e <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
   1c840:	4b10      	ldr	r3, [pc, #64]	; (1c884 <vTaskSuspend+0xd0>)
   1c842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c846:	601a      	str	r2, [r3, #0]
   1c848:	f3bf 8f4f 	dsb	sy
   1c84c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c850:	e00b      	b.n	1c86a <vTaskSuspend+0xb6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1c852:	4b09      	ldr	r3, [pc, #36]	; (1c878 <vTaskSuspend+0xc4>)
   1c854:	681a      	ldr	r2, [r3, #0]
   1c856:	4b0c      	ldr	r3, [pc, #48]	; (1c888 <vTaskSuspend+0xd4>)
   1c858:	681b      	ldr	r3, [r3, #0]
   1c85a:	429a      	cmp	r2, r3
   1c85c:	d103      	bne.n	1c866 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1c85e:	4b05      	ldr	r3, [pc, #20]	; (1c874 <vTaskSuspend+0xc0>)
   1c860:	2200      	movs	r2, #0
   1c862:	601a      	str	r2, [r3, #0]
	}
   1c864:	e001      	b.n	1c86a <vTaskSuspend+0xb6>
					vTaskSwitchContext();
   1c866:	f000 f9fd 	bl	1cc64 <vTaskSwitchContext>
	}
   1c86a:	bf00      	nop
   1c86c:	3710      	adds	r7, #16
   1c86e:	46bd      	mov	sp, r7
   1c870:	bd80      	pop	{r7, pc}
   1c872:	bf00      	nop
   1c874:	10005110 	.word	0x10005110
   1c878:	100051a8 	.word	0x100051a8
   1c87c:	100051c8 	.word	0x100051c8
   1c880:	100051e4 	.word	0x100051e4
   1c884:	e000ed04 	.word	0xe000ed04
   1c888:	100051bc 	.word	0x100051bc

0001c88c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c88c:	b580      	push	{r7, lr}
   1c88e:	b084      	sub	sp, #16
   1c890:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c892:	4b1a      	ldr	r3, [pc, #104]	; (1c8fc <vTaskStartScheduler+0x70>)
   1c894:	9301      	str	r3, [sp, #4]
   1c896:	2300      	movs	r3, #0
   1c898:	9300      	str	r3, [sp, #0]
   1c89a:	2300      	movs	r3, #0
   1c89c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c8a0:	4917      	ldr	r1, [pc, #92]	; (1c900 <vTaskStartScheduler+0x74>)
   1c8a2:	4818      	ldr	r0, [pc, #96]	; (1c904 <vTaskStartScheduler+0x78>)
   1c8a4:	f7ff fe5e 	bl	1c564 <xTaskCreate>
   1c8a8:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c8aa:	687b      	ldr	r3, [r7, #4]
   1c8ac:	2b01      	cmp	r3, #1
   1c8ae:	d102      	bne.n	1c8b6 <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   1c8b0:	f000 fd1e 	bl	1d2f0 <xTimerCreateTimerTask>
   1c8b4:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c8b6:	687b      	ldr	r3, [r7, #4]
   1c8b8:	2b01      	cmp	r3, #1
   1c8ba:	d115      	bne.n	1c8e8 <vTaskStartScheduler+0x5c>
	__asm volatile
   1c8bc:	f04f 0380 	mov.w	r3, #128	; 0x80
   1c8c0:	f383 8811 	msr	BASEPRI, r3
   1c8c4:	f3bf 8f6f 	isb	sy
   1c8c8:	f3bf 8f4f 	dsb	sy
   1c8cc:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c8ce:	4b0e      	ldr	r3, [pc, #56]	; (1c908 <vTaskStartScheduler+0x7c>)
   1c8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c8d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c8d6:	4b0d      	ldr	r3, [pc, #52]	; (1c90c <vTaskStartScheduler+0x80>)
   1c8d8:	2201      	movs	r2, #1
   1c8da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1c8dc:	4b0c      	ldr	r3, [pc, #48]	; (1c910 <vTaskStartScheduler+0x84>)
   1c8de:	2200      	movs	r2, #0
   1c8e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c8e2:	f7f6 fe5d 	bl	135a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c8e6:	e004      	b.n	1c8f2 <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c8e8:	687b      	ldr	r3, [r7, #4]
   1c8ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c8ee:	d100      	bne.n	1c8f2 <vTaskStartScheduler+0x66>
   1c8f0:	e7fe      	b.n	1c8f0 <vTaskStartScheduler+0x64>
}
   1c8f2:	bf00      	nop
   1c8f4:	3708      	adds	r7, #8
   1c8f6:	46bd      	mov	sp, r7
   1c8f8:	bd80      	pop	{r7, pc}
   1c8fa:	bf00      	nop
   1c8fc:	100051e0 	.word	0x100051e0
   1c900:	00022cc8 	.word	0x00022cc8
   1c904:	0001d051 	.word	0x0001d051
   1c908:	100051dc 	.word	0x100051dc
   1c90c:	100051c8 	.word	0x100051c8
   1c910:	100051c0 	.word	0x100051c0

0001c914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c914:	b480      	push	{r7}
   1c916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c918:	4b04      	ldr	r3, [pc, #16]	; (1c92c <vTaskSuspendAll+0x18>)
   1c91a:	681b      	ldr	r3, [r3, #0]
   1c91c:	3301      	adds	r3, #1
   1c91e:	4a03      	ldr	r2, [pc, #12]	; (1c92c <vTaskSuspendAll+0x18>)
   1c920:	6013      	str	r3, [r2, #0]
}
   1c922:	bf00      	nop
   1c924:	46bd      	mov	sp, r7
   1c926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c92a:	4770      	bx	lr
   1c92c:	100051e4 	.word	0x100051e4

0001c930 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   1c930:	b480      	push	{r7}
   1c932:	b083      	sub	sp, #12
   1c934:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   1c936:	2300      	movs	r3, #0
   1c938:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1c93a:	4b14      	ldr	r3, [pc, #80]	; (1c98c <prvGetExpectedIdleTime+0x5c>)
   1c93c:	681b      	ldr	r3, [r3, #0]
   1c93e:	2b00      	cmp	r3, #0
   1c940:	d001      	beq.n	1c946 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   1c942:	2301      	movs	r3, #1
   1c944:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1c946:	4b12      	ldr	r3, [pc, #72]	; (1c990 <prvGetExpectedIdleTime+0x60>)
   1c948:	681b      	ldr	r3, [r3, #0]
   1c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d002      	beq.n	1c956 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   1c950:	2300      	movs	r3, #0
   1c952:	607b      	str	r3, [r7, #4]
   1c954:	e012      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1c956:	4b0f      	ldr	r3, [pc, #60]	; (1c994 <prvGetExpectedIdleTime+0x64>)
   1c958:	681b      	ldr	r3, [r3, #0]
   1c95a:	2b01      	cmp	r3, #1
   1c95c:	d902      	bls.n	1c964 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   1c95e:	2300      	movs	r3, #0
   1c960:	607b      	str	r3, [r7, #4]
   1c962:	e00b      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   1c964:	683b      	ldr	r3, [r7, #0]
   1c966:	2b00      	cmp	r3, #0
   1c968:	d002      	beq.n	1c970 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   1c96a:	2300      	movs	r3, #0
   1c96c:	607b      	str	r3, [r7, #4]
   1c96e:	e005      	b.n	1c97c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   1c970:	4b09      	ldr	r3, [pc, #36]	; (1c998 <prvGetExpectedIdleTime+0x68>)
   1c972:	681a      	ldr	r2, [r3, #0]
   1c974:	4b09      	ldr	r3, [pc, #36]	; (1c99c <prvGetExpectedIdleTime+0x6c>)
   1c976:	681b      	ldr	r3, [r3, #0]
   1c978:	1ad3      	subs	r3, r2, r3
   1c97a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   1c97c:	687b      	ldr	r3, [r7, #4]
	}
   1c97e:	4618      	mov	r0, r3
   1c980:	370c      	adds	r7, #12
   1c982:	46bd      	mov	sp, r7
   1c984:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c988:	4770      	bx	lr
   1c98a:	bf00      	nop
   1c98c:	100051c4 	.word	0x100051c4
   1c990:	10005110 	.word	0x10005110
   1c994:	10005114 	.word	0x10005114
   1c998:	100051dc 	.word	0x100051dc
   1c99c:	100051c0 	.word	0x100051c0

0001c9a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c9a0:	b580      	push	{r7, lr}
   1c9a2:	b084      	sub	sp, #16
   1c9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c9a6:	2300      	movs	r3, #0
   1c9a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c9aa:	2300      	movs	r3, #0
   1c9ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c9ae:	4b3d      	ldr	r3, [pc, #244]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9b0:	681b      	ldr	r3, [r3, #0]
   1c9b2:	2b00      	cmp	r3, #0
   1c9b4:	d100      	bne.n	1c9b8 <xTaskResumeAll+0x18>
   1c9b6:	e7fe      	b.n	1c9b6 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c9b8:	f7f6 fe76 	bl	136a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1c9bc:	4b39      	ldr	r3, [pc, #228]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9be:	681b      	ldr	r3, [r3, #0]
   1c9c0:	3b01      	subs	r3, #1
   1c9c2:	4a38      	ldr	r2, [pc, #224]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c9c6:	4b37      	ldr	r3, [pc, #220]	; (1caa4 <xTaskResumeAll+0x104>)
   1c9c8:	681b      	ldr	r3, [r3, #0]
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d162      	bne.n	1ca94 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c9ce:	4b36      	ldr	r3, [pc, #216]	; (1caa8 <xTaskResumeAll+0x108>)
   1c9d0:	681b      	ldr	r3, [r3, #0]
   1c9d2:	2b00      	cmp	r3, #0
   1c9d4:	d05e      	beq.n	1ca94 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c9d6:	e02f      	b.n	1ca38 <xTaskResumeAll+0x98>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1c9d8:	4b34      	ldr	r3, [pc, #208]	; (1caac <xTaskResumeAll+0x10c>)
   1c9da:	68db      	ldr	r3, [r3, #12]
   1c9dc:	68db      	ldr	r3, [r3, #12]
   1c9de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c9e0:	68fb      	ldr	r3, [r7, #12]
   1c9e2:	3318      	adds	r3, #24
   1c9e4:	4618      	mov	r0, r3
   1c9e6:	f7ff f99b 	bl	1bd20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c9ea:	68fb      	ldr	r3, [r7, #12]
   1c9ec:	3304      	adds	r3, #4
   1c9ee:	4618      	mov	r0, r3
   1c9f0:	f7ff f996 	bl	1bd20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1c9f4:	68fb      	ldr	r3, [r7, #12]
   1c9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c9f8:	4b2d      	ldr	r3, [pc, #180]	; (1cab0 <xTaskResumeAll+0x110>)
   1c9fa:	681b      	ldr	r3, [r3, #0]
   1c9fc:	429a      	cmp	r2, r3
   1c9fe:	d903      	bls.n	1ca08 <xTaskResumeAll+0x68>
   1ca00:	68fb      	ldr	r3, [r7, #12]
   1ca02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca04:	4a2a      	ldr	r2, [pc, #168]	; (1cab0 <xTaskResumeAll+0x110>)
   1ca06:	6013      	str	r3, [r2, #0]
   1ca08:	68fb      	ldr	r3, [r7, #12]
   1ca0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca0c:	4613      	mov	r3, r2
   1ca0e:	009b      	lsls	r3, r3, #2
   1ca10:	4413      	add	r3, r2
   1ca12:	009b      	lsls	r3, r3, #2
   1ca14:	4a27      	ldr	r2, [pc, #156]	; (1cab4 <xTaskResumeAll+0x114>)
   1ca16:	441a      	add	r2, r3
   1ca18:	68fb      	ldr	r3, [r7, #12]
   1ca1a:	3304      	adds	r3, #4
   1ca1c:	4619      	mov	r1, r3
   1ca1e:	4610      	mov	r0, r2
   1ca20:	f7ff f921 	bl	1bc66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ca24:	68fb      	ldr	r3, [r7, #12]
   1ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ca28:	4b23      	ldr	r3, [pc, #140]	; (1cab8 <xTaskResumeAll+0x118>)
   1ca2a:	681b      	ldr	r3, [r3, #0]
   1ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ca2e:	429a      	cmp	r2, r3
   1ca30:	d302      	bcc.n	1ca38 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   1ca32:	4b22      	ldr	r3, [pc, #136]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca34:	2201      	movs	r2, #1
   1ca36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ca38:	4b1c      	ldr	r3, [pc, #112]	; (1caac <xTaskResumeAll+0x10c>)
   1ca3a:	681b      	ldr	r3, [r3, #0]
   1ca3c:	2b00      	cmp	r3, #0
   1ca3e:	d1cb      	bne.n	1c9d8 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ca40:	68fb      	ldr	r3, [r7, #12]
   1ca42:	2b00      	cmp	r3, #0
   1ca44:	d001      	beq.n	1ca4a <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ca46:	f000 fba9 	bl	1d19c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1ca4a:	4b1d      	ldr	r3, [pc, #116]	; (1cac0 <xTaskResumeAll+0x120>)
   1ca4c:	681b      	ldr	r3, [r3, #0]
   1ca4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1ca50:	687b      	ldr	r3, [r7, #4]
   1ca52:	2b00      	cmp	r3, #0
   1ca54:	d010      	beq.n	1ca78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1ca56:	f000 f865 	bl	1cb24 <xTaskIncrementTick>
   1ca5a:	4603      	mov	r3, r0
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d002      	beq.n	1ca66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1ca60:	4b16      	ldr	r3, [pc, #88]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca62:	2201      	movs	r2, #1
   1ca64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1ca66:	687b      	ldr	r3, [r7, #4]
   1ca68:	3b01      	subs	r3, #1
   1ca6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1ca6c:	687b      	ldr	r3, [r7, #4]
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d1f1      	bne.n	1ca56 <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   1ca72:	4b13      	ldr	r3, [pc, #76]	; (1cac0 <xTaskResumeAll+0x120>)
   1ca74:	2200      	movs	r2, #0
   1ca76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1ca78:	4b10      	ldr	r3, [pc, #64]	; (1cabc <xTaskResumeAll+0x11c>)
   1ca7a:	681b      	ldr	r3, [r3, #0]
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	d009      	beq.n	1ca94 <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1ca80:	2301      	movs	r3, #1
   1ca82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1ca84:	4b0f      	ldr	r3, [pc, #60]	; (1cac4 <xTaskResumeAll+0x124>)
   1ca86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ca8a:	601a      	str	r2, [r3, #0]
   1ca8c:	f3bf 8f4f 	dsb	sy
   1ca90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ca94:	f7f6 fe2e 	bl	136f4 <vPortExitCritical>

	return xAlreadyYielded;
   1ca98:	68bb      	ldr	r3, [r7, #8]
}
   1ca9a:	4618      	mov	r0, r3
   1ca9c:	3710      	adds	r7, #16
   1ca9e:	46bd      	mov	sp, r7
   1caa0:	bd80      	pop	{r7, pc}
   1caa2:	bf00      	nop
   1caa4:	100051e4 	.word	0x100051e4
   1caa8:	100051bc 	.word	0x100051bc
   1caac:	10005194 	.word	0x10005194
   1cab0:	100051c4 	.word	0x100051c4
   1cab4:	10005114 	.word	0x10005114
   1cab8:	10005110 	.word	0x10005110
   1cabc:	100051d0 	.word	0x100051d0
   1cac0:	100051cc 	.word	0x100051cc
   1cac4:	e000ed04 	.word	0xe000ed04

0001cac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1cac8:	b480      	push	{r7}
   1caca:	b083      	sub	sp, #12
   1cacc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1cace:	4b05      	ldr	r3, [pc, #20]	; (1cae4 <xTaskGetTickCount+0x1c>)
   1cad0:	681b      	ldr	r3, [r3, #0]
   1cad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1cad4:	687b      	ldr	r3, [r7, #4]
}
   1cad6:	4618      	mov	r0, r3
   1cad8:	370c      	adds	r7, #12
   1cada:	46bd      	mov	sp, r7
   1cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cae0:	4770      	bx	lr
   1cae2:	bf00      	nop
   1cae4:	100051c0 	.word	0x100051c0

0001cae8 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   1cae8:	b480      	push	{r7}
   1caea:	b083      	sub	sp, #12
   1caec:	af00      	add	r7, sp, #0
   1caee:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1caf0:	4b0a      	ldr	r3, [pc, #40]	; (1cb1c <vTaskStepTick+0x34>)
   1caf2:	681a      	ldr	r2, [r3, #0]
   1caf4:	687b      	ldr	r3, [r7, #4]
   1caf6:	441a      	add	r2, r3
   1caf8:	4b09      	ldr	r3, [pc, #36]	; (1cb20 <vTaskStepTick+0x38>)
   1cafa:	681b      	ldr	r3, [r3, #0]
   1cafc:	429a      	cmp	r2, r3
   1cafe:	d900      	bls.n	1cb02 <vTaskStepTick+0x1a>
   1cb00:	e7fe      	b.n	1cb00 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   1cb02:	4b06      	ldr	r3, [pc, #24]	; (1cb1c <vTaskStepTick+0x34>)
   1cb04:	681a      	ldr	r2, [r3, #0]
   1cb06:	687b      	ldr	r3, [r7, #4]
   1cb08:	4413      	add	r3, r2
   1cb0a:	4a04      	ldr	r2, [pc, #16]	; (1cb1c <vTaskStepTick+0x34>)
   1cb0c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   1cb0e:	bf00      	nop
   1cb10:	370c      	adds	r7, #12
   1cb12:	46bd      	mov	sp, r7
   1cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cb18:	4770      	bx	lr
   1cb1a:	bf00      	nop
   1cb1c:	100051c0 	.word	0x100051c0
   1cb20:	100051dc 	.word	0x100051dc

0001cb24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1cb24:	b580      	push	{r7, lr}
   1cb26:	b086      	sub	sp, #24
   1cb28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cb2e:	4b42      	ldr	r3, [pc, #264]	; (1cc38 <xTaskIncrementTick+0x114>)
   1cb30:	681b      	ldr	r3, [r3, #0]
   1cb32:	2b00      	cmp	r3, #0
   1cb34:	d16f      	bne.n	1cc16 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1cb36:	4b41      	ldr	r3, [pc, #260]	; (1cc3c <xTaskIncrementTick+0x118>)
   1cb38:	681b      	ldr	r3, [r3, #0]
   1cb3a:	3301      	adds	r3, #1
   1cb3c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cb3e:	4a3f      	ldr	r2, [pc, #252]	; (1cc3c <xTaskIncrementTick+0x118>)
   1cb40:	693b      	ldr	r3, [r7, #16]
   1cb42:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cb44:	693b      	ldr	r3, [r7, #16]
   1cb46:	2b00      	cmp	r3, #0
   1cb48:	d116      	bne.n	1cb78 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   1cb4a:	4b3d      	ldr	r3, [pc, #244]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb4c:	681b      	ldr	r3, [r3, #0]
   1cb4e:	681b      	ldr	r3, [r3, #0]
   1cb50:	2b00      	cmp	r3, #0
   1cb52:	d000      	beq.n	1cb56 <xTaskIncrementTick+0x32>
   1cb54:	e7fe      	b.n	1cb54 <xTaskIncrementTick+0x30>
   1cb56:	4b3a      	ldr	r3, [pc, #232]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb58:	681b      	ldr	r3, [r3, #0]
   1cb5a:	60fb      	str	r3, [r7, #12]
   1cb5c:	4b39      	ldr	r3, [pc, #228]	; (1cc44 <xTaskIncrementTick+0x120>)
   1cb5e:	681b      	ldr	r3, [r3, #0]
   1cb60:	4a37      	ldr	r2, [pc, #220]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb62:	6013      	str	r3, [r2, #0]
   1cb64:	4a37      	ldr	r2, [pc, #220]	; (1cc44 <xTaskIncrementTick+0x120>)
   1cb66:	68fb      	ldr	r3, [r7, #12]
   1cb68:	6013      	str	r3, [r2, #0]
   1cb6a:	4b37      	ldr	r3, [pc, #220]	; (1cc48 <xTaskIncrementTick+0x124>)
   1cb6c:	681b      	ldr	r3, [r3, #0]
   1cb6e:	3301      	adds	r3, #1
   1cb70:	4a35      	ldr	r2, [pc, #212]	; (1cc48 <xTaskIncrementTick+0x124>)
   1cb72:	6013      	str	r3, [r2, #0]
   1cb74:	f000 fb12 	bl	1d19c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1cb78:	4b34      	ldr	r3, [pc, #208]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cb7a:	681b      	ldr	r3, [r3, #0]
   1cb7c:	693a      	ldr	r2, [r7, #16]
   1cb7e:	429a      	cmp	r2, r3
   1cb80:	d34e      	bcc.n	1cc20 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cb82:	4b2f      	ldr	r3, [pc, #188]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb84:	681b      	ldr	r3, [r3, #0]
   1cb86:	681b      	ldr	r3, [r3, #0]
   1cb88:	2b00      	cmp	r3, #0
   1cb8a:	d104      	bne.n	1cb96 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb8c:	4b2f      	ldr	r3, [pc, #188]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb92:	601a      	str	r2, [r3, #0]
					break;
   1cb94:	e044      	b.n	1cc20 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1cb96:	4b2a      	ldr	r3, [pc, #168]	; (1cc40 <xTaskIncrementTick+0x11c>)
   1cb98:	681b      	ldr	r3, [r3, #0]
   1cb9a:	68db      	ldr	r3, [r3, #12]
   1cb9c:	68db      	ldr	r3, [r3, #12]
   1cb9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1cba0:	68bb      	ldr	r3, [r7, #8]
   1cba2:	685b      	ldr	r3, [r3, #4]
   1cba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1cba6:	693a      	ldr	r2, [r7, #16]
   1cba8:	687b      	ldr	r3, [r7, #4]
   1cbaa:	429a      	cmp	r2, r3
   1cbac:	d203      	bcs.n	1cbb6 <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1cbae:	4a27      	ldr	r2, [pc, #156]	; (1cc4c <xTaskIncrementTick+0x128>)
   1cbb0:	687b      	ldr	r3, [r7, #4]
   1cbb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1cbb4:	e034      	b.n	1cc20 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cbb6:	68bb      	ldr	r3, [r7, #8]
   1cbb8:	3304      	adds	r3, #4
   1cbba:	4618      	mov	r0, r3
   1cbbc:	f7ff f8b0 	bl	1bd20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cbc0:	68bb      	ldr	r3, [r7, #8]
   1cbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cbc4:	2b00      	cmp	r3, #0
   1cbc6:	d004      	beq.n	1cbd2 <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cbc8:	68bb      	ldr	r3, [r7, #8]
   1cbca:	3318      	adds	r3, #24
   1cbcc:	4618      	mov	r0, r3
   1cbce:	f7ff f8a7 	bl	1bd20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cbd2:	68bb      	ldr	r3, [r7, #8]
   1cbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbd6:	4b1e      	ldr	r3, [pc, #120]	; (1cc50 <xTaskIncrementTick+0x12c>)
   1cbd8:	681b      	ldr	r3, [r3, #0]
   1cbda:	429a      	cmp	r2, r3
   1cbdc:	d903      	bls.n	1cbe6 <xTaskIncrementTick+0xc2>
   1cbde:	68bb      	ldr	r3, [r7, #8]
   1cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cbe2:	4a1b      	ldr	r2, [pc, #108]	; (1cc50 <xTaskIncrementTick+0x12c>)
   1cbe4:	6013      	str	r3, [r2, #0]
   1cbe6:	68bb      	ldr	r3, [r7, #8]
   1cbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cbea:	4613      	mov	r3, r2
   1cbec:	009b      	lsls	r3, r3, #2
   1cbee:	4413      	add	r3, r2
   1cbf0:	009b      	lsls	r3, r3, #2
   1cbf2:	4a18      	ldr	r2, [pc, #96]	; (1cc54 <xTaskIncrementTick+0x130>)
   1cbf4:	441a      	add	r2, r3
   1cbf6:	68bb      	ldr	r3, [r7, #8]
   1cbf8:	3304      	adds	r3, #4
   1cbfa:	4619      	mov	r1, r3
   1cbfc:	4610      	mov	r0, r2
   1cbfe:	f7ff f832 	bl	1bc66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cc02:	68bb      	ldr	r3, [r7, #8]
   1cc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc06:	4b14      	ldr	r3, [pc, #80]	; (1cc58 <xTaskIncrementTick+0x134>)
   1cc08:	681b      	ldr	r3, [r3, #0]
   1cc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc0c:	429a      	cmp	r2, r3
   1cc0e:	d3b8      	bcc.n	1cb82 <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
   1cc10:	2301      	movs	r3, #1
   1cc12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cc14:	e7b5      	b.n	1cb82 <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1cc16:	4b11      	ldr	r3, [pc, #68]	; (1cc5c <xTaskIncrementTick+0x138>)
   1cc18:	681b      	ldr	r3, [r3, #0]
   1cc1a:	3301      	adds	r3, #1
   1cc1c:	4a0f      	ldr	r2, [pc, #60]	; (1cc5c <xTaskIncrementTick+0x138>)
   1cc1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1cc20:	4b0f      	ldr	r3, [pc, #60]	; (1cc60 <xTaskIncrementTick+0x13c>)
   1cc22:	681b      	ldr	r3, [r3, #0]
   1cc24:	2b00      	cmp	r3, #0
   1cc26:	d001      	beq.n	1cc2c <xTaskIncrementTick+0x108>
		{
			xSwitchRequired = pdTRUE;
   1cc28:	2301      	movs	r3, #1
   1cc2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1cc2c:	697b      	ldr	r3, [r7, #20]
}
   1cc2e:	4618      	mov	r0, r3
   1cc30:	3718      	adds	r7, #24
   1cc32:	46bd      	mov	sp, r7
   1cc34:	bd80      	pop	{r7, pc}
   1cc36:	bf00      	nop
   1cc38:	100051e4 	.word	0x100051e4
   1cc3c:	100051c0 	.word	0x100051c0
   1cc40:	1000518c 	.word	0x1000518c
   1cc44:	10005190 	.word	0x10005190
   1cc48:	100051d4 	.word	0x100051d4
   1cc4c:	100051dc 	.word	0x100051dc
   1cc50:	100051c4 	.word	0x100051c4
   1cc54:	10005114 	.word	0x10005114
   1cc58:	10005110 	.word	0x10005110
   1cc5c:	100051cc 	.word	0x100051cc
   1cc60:	100051d0 	.word	0x100051d0

0001cc64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1cc64:	b580      	push	{r7, lr}
   1cc66:	b084      	sub	sp, #16
   1cc68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1cc6a:	4b35      	ldr	r3, [pc, #212]	; (1cd40 <vTaskSwitchContext+0xdc>)
   1cc6c:	681b      	ldr	r3, [r3, #0]
   1cc6e:	2b00      	cmp	r3, #0
   1cc70:	d003      	beq.n	1cc7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1cc72:	4b34      	ldr	r3, [pc, #208]	; (1cd44 <vTaskSwitchContext+0xe0>)
   1cc74:	2201      	movs	r2, #1
   1cc76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1cc78:	e05e      	b.n	1cd38 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   1cc7a:	4b32      	ldr	r3, [pc, #200]	; (1cd44 <vTaskSwitchContext+0xe0>)
   1cc7c:	2200      	movs	r2, #0
   1cc7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1cc80:	4b31      	ldr	r3, [pc, #196]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1cc82:	681b      	ldr	r3, [r3, #0]
   1cc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cc86:	60bb      	str	r3, [r7, #8]
   1cc88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   1cc8c:	607b      	str	r3, [r7, #4]
   1cc8e:	68bb      	ldr	r3, [r7, #8]
   1cc90:	681a      	ldr	r2, [r3, #0]
   1cc92:	687b      	ldr	r3, [r7, #4]
   1cc94:	429a      	cmp	r2, r3
   1cc96:	d111      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1cc98:	68bb      	ldr	r3, [r7, #8]
   1cc9a:	3304      	adds	r3, #4
   1cc9c:	681a      	ldr	r2, [r3, #0]
   1cc9e:	687b      	ldr	r3, [r7, #4]
   1cca0:	429a      	cmp	r2, r3
   1cca2:	d10b      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1cca4:	68bb      	ldr	r3, [r7, #8]
   1cca6:	3308      	adds	r3, #8
   1cca8:	681a      	ldr	r2, [r3, #0]
   1ccaa:	687b      	ldr	r3, [r7, #4]
   1ccac:	429a      	cmp	r2, r3
   1ccae:	d105      	bne.n	1ccbc <vTaskSwitchContext+0x58>
   1ccb0:	68bb      	ldr	r3, [r7, #8]
   1ccb2:	330c      	adds	r3, #12
   1ccb4:	681a      	ldr	r2, [r3, #0]
   1ccb6:	687b      	ldr	r3, [r7, #4]
   1ccb8:	429a      	cmp	r2, r3
   1ccba:	d008      	beq.n	1ccce <vTaskSwitchContext+0x6a>
   1ccbc:	4b22      	ldr	r3, [pc, #136]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1ccbe:	681a      	ldr	r2, [r3, #0]
   1ccc0:	4b21      	ldr	r3, [pc, #132]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1ccc2:	681b      	ldr	r3, [r3, #0]
   1ccc4:	3334      	adds	r3, #52	; 0x34
   1ccc6:	4619      	mov	r1, r3
   1ccc8:	4610      	mov	r0, r2
   1ccca:	f7fd fa8f 	bl	1a1ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ccce:	4b1f      	ldr	r3, [pc, #124]	; (1cd4c <vTaskSwitchContext+0xe8>)
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	60fb      	str	r3, [r7, #12]
   1ccd4:	e006      	b.n	1cce4 <vTaskSwitchContext+0x80>
   1ccd6:	68fb      	ldr	r3, [r7, #12]
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d100      	bne.n	1ccde <vTaskSwitchContext+0x7a>
   1ccdc:	e7fe      	b.n	1ccdc <vTaskSwitchContext+0x78>
   1ccde:	68fb      	ldr	r3, [r7, #12]
   1cce0:	3b01      	subs	r3, #1
   1cce2:	60fb      	str	r3, [r7, #12]
   1cce4:	491a      	ldr	r1, [pc, #104]	; (1cd50 <vTaskSwitchContext+0xec>)
   1cce6:	68fa      	ldr	r2, [r7, #12]
   1cce8:	4613      	mov	r3, r2
   1ccea:	009b      	lsls	r3, r3, #2
   1ccec:	4413      	add	r3, r2
   1ccee:	009b      	lsls	r3, r3, #2
   1ccf0:	440b      	add	r3, r1
   1ccf2:	681b      	ldr	r3, [r3, #0]
   1ccf4:	2b00      	cmp	r3, #0
   1ccf6:	d0ee      	beq.n	1ccd6 <vTaskSwitchContext+0x72>
   1ccf8:	68fa      	ldr	r2, [r7, #12]
   1ccfa:	4613      	mov	r3, r2
   1ccfc:	009b      	lsls	r3, r3, #2
   1ccfe:	4413      	add	r3, r2
   1cd00:	009b      	lsls	r3, r3, #2
   1cd02:	4a13      	ldr	r2, [pc, #76]	; (1cd50 <vTaskSwitchContext+0xec>)
   1cd04:	4413      	add	r3, r2
   1cd06:	603b      	str	r3, [r7, #0]
   1cd08:	683b      	ldr	r3, [r7, #0]
   1cd0a:	685b      	ldr	r3, [r3, #4]
   1cd0c:	685a      	ldr	r2, [r3, #4]
   1cd0e:	683b      	ldr	r3, [r7, #0]
   1cd10:	605a      	str	r2, [r3, #4]
   1cd12:	683b      	ldr	r3, [r7, #0]
   1cd14:	685a      	ldr	r2, [r3, #4]
   1cd16:	683b      	ldr	r3, [r7, #0]
   1cd18:	3308      	adds	r3, #8
   1cd1a:	429a      	cmp	r2, r3
   1cd1c:	d104      	bne.n	1cd28 <vTaskSwitchContext+0xc4>
   1cd1e:	683b      	ldr	r3, [r7, #0]
   1cd20:	685b      	ldr	r3, [r3, #4]
   1cd22:	685a      	ldr	r2, [r3, #4]
   1cd24:	683b      	ldr	r3, [r7, #0]
   1cd26:	605a      	str	r2, [r3, #4]
   1cd28:	683b      	ldr	r3, [r7, #0]
   1cd2a:	685b      	ldr	r3, [r3, #4]
   1cd2c:	68db      	ldr	r3, [r3, #12]
   1cd2e:	4a06      	ldr	r2, [pc, #24]	; (1cd48 <vTaskSwitchContext+0xe4>)
   1cd30:	6013      	str	r3, [r2, #0]
   1cd32:	4a06      	ldr	r2, [pc, #24]	; (1cd4c <vTaskSwitchContext+0xe8>)
   1cd34:	68fb      	ldr	r3, [r7, #12]
   1cd36:	6013      	str	r3, [r2, #0]
}
   1cd38:	bf00      	nop
   1cd3a:	3710      	adds	r7, #16
   1cd3c:	46bd      	mov	sp, r7
   1cd3e:	bd80      	pop	{r7, pc}
   1cd40:	100051e4 	.word	0x100051e4
   1cd44:	100051d0 	.word	0x100051d0
   1cd48:	10005110 	.word	0x10005110
   1cd4c:	100051c4 	.word	0x100051c4
   1cd50:	10005114 	.word	0x10005114

0001cd54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cd54:	b580      	push	{r7, lr}
   1cd56:	b082      	sub	sp, #8
   1cd58:	af00      	add	r7, sp, #0
   1cd5a:	6078      	str	r0, [r7, #4]
   1cd5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cd5e:	687b      	ldr	r3, [r7, #4]
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d100      	bne.n	1cd66 <vTaskPlaceOnEventList+0x12>
   1cd64:	e7fe      	b.n	1cd64 <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cd66:	4b07      	ldr	r3, [pc, #28]	; (1cd84 <vTaskPlaceOnEventList+0x30>)
   1cd68:	681b      	ldr	r3, [r3, #0]
   1cd6a:	3318      	adds	r3, #24
   1cd6c:	4619      	mov	r1, r3
   1cd6e:	6878      	ldr	r0, [r7, #4]
   1cd70:	f7fe ff9d 	bl	1bcae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cd74:	2101      	movs	r1, #1
   1cd76:	6838      	ldr	r0, [r7, #0]
   1cd78:	f000 fa66 	bl	1d248 <prvAddCurrentTaskToDelayedList>
}
   1cd7c:	bf00      	nop
   1cd7e:	3708      	adds	r7, #8
   1cd80:	46bd      	mov	sp, r7
   1cd82:	bd80      	pop	{r7, pc}
   1cd84:	10005110 	.word	0x10005110

0001cd88 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   1cd88:	b580      	push	{r7, lr}
   1cd8a:	b084      	sub	sp, #16
   1cd8c:	af00      	add	r7, sp, #0
   1cd8e:	60f8      	str	r0, [r7, #12]
   1cd90:	60b9      	str	r1, [r7, #8]
   1cd92:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   1cd94:	68fb      	ldr	r3, [r7, #12]
   1cd96:	2b00      	cmp	r3, #0
   1cd98:	d100      	bne.n	1cd9c <vTaskPlaceOnUnorderedEventList+0x14>
   1cd9a:	e7fe      	b.n	1cd9a <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   1cd9c:	4b0c      	ldr	r3, [pc, #48]	; (1cdd0 <vTaskPlaceOnUnorderedEventList+0x48>)
   1cd9e:	681b      	ldr	r3, [r3, #0]
   1cda0:	2b00      	cmp	r3, #0
   1cda2:	d100      	bne.n	1cda6 <vTaskPlaceOnUnorderedEventList+0x1e>
   1cda4:	e7fe      	b.n	1cda4 <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1cda6:	4b0b      	ldr	r3, [pc, #44]	; (1cdd4 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1cda8:	681b      	ldr	r3, [r3, #0]
   1cdaa:	68ba      	ldr	r2, [r7, #8]
   1cdac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1cdb0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cdb2:	4b08      	ldr	r3, [pc, #32]	; (1cdd4 <vTaskPlaceOnUnorderedEventList+0x4c>)
   1cdb4:	681b      	ldr	r3, [r3, #0]
   1cdb6:	3318      	adds	r3, #24
   1cdb8:	4619      	mov	r1, r3
   1cdba:	68f8      	ldr	r0, [r7, #12]
   1cdbc:	f7fe ff53 	bl	1bc66 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cdc0:	2101      	movs	r1, #1
   1cdc2:	6878      	ldr	r0, [r7, #4]
   1cdc4:	f000 fa40 	bl	1d248 <prvAddCurrentTaskToDelayedList>
}
   1cdc8:	bf00      	nop
   1cdca:	3710      	adds	r7, #16
   1cdcc:	46bd      	mov	sp, r7
   1cdce:	bd80      	pop	{r7, pc}
   1cdd0:	100051e4 	.word	0x100051e4
   1cdd4:	10005110 	.word	0x10005110

0001cdd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cdd8:	b580      	push	{r7, lr}
   1cdda:	b084      	sub	sp, #16
   1cddc:	af00      	add	r7, sp, #0
   1cdde:	60f8      	str	r0, [r7, #12]
   1cde0:	60b9      	str	r1, [r7, #8]
   1cde2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1cde4:	68fb      	ldr	r3, [r7, #12]
   1cde6:	2b00      	cmp	r3, #0
   1cde8:	d100      	bne.n	1cdec <vTaskPlaceOnEventListRestricted+0x14>
   1cdea:	e7fe      	b.n	1cdea <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cdec:	4b0a      	ldr	r3, [pc, #40]	; (1ce18 <vTaskPlaceOnEventListRestricted+0x40>)
   1cdee:	681b      	ldr	r3, [r3, #0]
   1cdf0:	3318      	adds	r3, #24
   1cdf2:	4619      	mov	r1, r3
   1cdf4:	68f8      	ldr	r0, [r7, #12]
   1cdf6:	f7fe ff36 	bl	1bc66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	2b00      	cmp	r3, #0
   1cdfe:	d002      	beq.n	1ce06 <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   1ce00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ce04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1ce06:	6879      	ldr	r1, [r7, #4]
   1ce08:	68b8      	ldr	r0, [r7, #8]
   1ce0a:	f000 fa1d 	bl	1d248 <prvAddCurrentTaskToDelayedList>
	}
   1ce0e:	bf00      	nop
   1ce10:	3710      	adds	r7, #16
   1ce12:	46bd      	mov	sp, r7
   1ce14:	bd80      	pop	{r7, pc}
   1ce16:	bf00      	nop
   1ce18:	10005110 	.word	0x10005110

0001ce1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1ce1c:	b580      	push	{r7, lr}
   1ce1e:	b084      	sub	sp, #16
   1ce20:	af00      	add	r7, sp, #0
   1ce22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ce24:	687b      	ldr	r3, [r7, #4]
   1ce26:	68db      	ldr	r3, [r3, #12]
   1ce28:	68db      	ldr	r3, [r3, #12]
   1ce2a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1ce2c:	68bb      	ldr	r3, [r7, #8]
   1ce2e:	2b00      	cmp	r3, #0
   1ce30:	d100      	bne.n	1ce34 <xTaskRemoveFromEventList+0x18>
   1ce32:	e7fe      	b.n	1ce32 <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1ce34:	68bb      	ldr	r3, [r7, #8]
   1ce36:	3318      	adds	r3, #24
   1ce38:	4618      	mov	r0, r3
   1ce3a:	f7fe ff71 	bl	1bd20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ce3e:	4b1f      	ldr	r3, [pc, #124]	; (1cebc <xTaskRemoveFromEventList+0xa0>)
   1ce40:	681b      	ldr	r3, [r3, #0]
   1ce42:	2b00      	cmp	r3, #0
   1ce44:	d11d      	bne.n	1ce82 <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1ce46:	68bb      	ldr	r3, [r7, #8]
   1ce48:	3304      	adds	r3, #4
   1ce4a:	4618      	mov	r0, r3
   1ce4c:	f7fe ff68 	bl	1bd20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1ce50:	68bb      	ldr	r3, [r7, #8]
   1ce52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce54:	4b1a      	ldr	r3, [pc, #104]	; (1cec0 <xTaskRemoveFromEventList+0xa4>)
   1ce56:	681b      	ldr	r3, [r3, #0]
   1ce58:	429a      	cmp	r2, r3
   1ce5a:	d903      	bls.n	1ce64 <xTaskRemoveFromEventList+0x48>
   1ce5c:	68bb      	ldr	r3, [r7, #8]
   1ce5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce60:	4a17      	ldr	r2, [pc, #92]	; (1cec0 <xTaskRemoveFromEventList+0xa4>)
   1ce62:	6013      	str	r3, [r2, #0]
   1ce64:	68bb      	ldr	r3, [r7, #8]
   1ce66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce68:	4613      	mov	r3, r2
   1ce6a:	009b      	lsls	r3, r3, #2
   1ce6c:	4413      	add	r3, r2
   1ce6e:	009b      	lsls	r3, r3, #2
   1ce70:	4a14      	ldr	r2, [pc, #80]	; (1cec4 <xTaskRemoveFromEventList+0xa8>)
   1ce72:	441a      	add	r2, r3
   1ce74:	68bb      	ldr	r3, [r7, #8]
   1ce76:	3304      	adds	r3, #4
   1ce78:	4619      	mov	r1, r3
   1ce7a:	4610      	mov	r0, r2
   1ce7c:	f7fe fef3 	bl	1bc66 <vListInsertEnd>
   1ce80:	e005      	b.n	1ce8e <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1ce82:	68bb      	ldr	r3, [r7, #8]
   1ce84:	3318      	adds	r3, #24
   1ce86:	4619      	mov	r1, r3
   1ce88:	480f      	ldr	r0, [pc, #60]	; (1cec8 <xTaskRemoveFromEventList+0xac>)
   1ce8a:	f7fe feec 	bl	1bc66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1ce8e:	68bb      	ldr	r3, [r7, #8]
   1ce90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce92:	4b0e      	ldr	r3, [pc, #56]	; (1cecc <xTaskRemoveFromEventList+0xb0>)
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce98:	429a      	cmp	r2, r3
   1ce9a:	d905      	bls.n	1cea8 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1ce9c:	2301      	movs	r3, #1
   1ce9e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1cea0:	4b0b      	ldr	r3, [pc, #44]	; (1ced0 <xTaskRemoveFromEventList+0xb4>)
   1cea2:	2201      	movs	r2, #1
   1cea4:	601a      	str	r2, [r3, #0]
   1cea6:	e001      	b.n	1ceac <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   1cea8:	2300      	movs	r3, #0
   1ceaa:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   1ceac:	f000 f976 	bl	1d19c <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   1ceb0:	68fb      	ldr	r3, [r7, #12]
}
   1ceb2:	4618      	mov	r0, r3
   1ceb4:	3710      	adds	r7, #16
   1ceb6:	46bd      	mov	sp, r7
   1ceb8:	bd80      	pop	{r7, pc}
   1ceba:	bf00      	nop
   1cebc:	100051e4 	.word	0x100051e4
   1cec0:	100051c4 	.word	0x100051c4
   1cec4:	10005114 	.word	0x10005114
   1cec8:	10005194 	.word	0x10005194
   1cecc:	10005110 	.word	0x10005110
   1ced0:	100051d0 	.word	0x100051d0

0001ced4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   1ced4:	b580      	push	{r7, lr}
   1ced6:	b084      	sub	sp, #16
   1ced8:	af00      	add	r7, sp, #0
   1ceda:	6078      	str	r0, [r7, #4]
   1cedc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1cede:	4b1f      	ldr	r3, [pc, #124]	; (1cf5c <vTaskRemoveFromUnorderedEventList+0x88>)
   1cee0:	681b      	ldr	r3, [r3, #0]
   1cee2:	2b00      	cmp	r3, #0
   1cee4:	d100      	bne.n	1cee8 <vTaskRemoveFromUnorderedEventList+0x14>
   1cee6:	e7fe      	b.n	1cee6 <vTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1cee8:	683b      	ldr	r3, [r7, #0]
   1ceea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   1ceee:	687b      	ldr	r3, [r7, #4]
   1cef0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1cef2:	687b      	ldr	r3, [r7, #4]
   1cef4:	68db      	ldr	r3, [r3, #12]
   1cef6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
   1cef8:	68fb      	ldr	r3, [r7, #12]
   1cefa:	2b00      	cmp	r3, #0
   1cefc:	d100      	bne.n	1cf00 <vTaskRemoveFromUnorderedEventList+0x2c>
   1cefe:	e7fe      	b.n	1cefe <vTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   1cf00:	6878      	ldr	r0, [r7, #4]
   1cf02:	f7fe ff0d 	bl	1bd20 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1cf06:	68fb      	ldr	r3, [r7, #12]
   1cf08:	3304      	adds	r3, #4
   1cf0a:	4618      	mov	r0, r3
   1cf0c:	f7fe ff08 	bl	1bd20 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1cf10:	68fb      	ldr	r3, [r7, #12]
   1cf12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf14:	4b12      	ldr	r3, [pc, #72]	; (1cf60 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1cf16:	681b      	ldr	r3, [r3, #0]
   1cf18:	429a      	cmp	r2, r3
   1cf1a:	d903      	bls.n	1cf24 <vTaskRemoveFromUnorderedEventList+0x50>
   1cf1c:	68fb      	ldr	r3, [r7, #12]
   1cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf20:	4a0f      	ldr	r2, [pc, #60]	; (1cf60 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1cf22:	6013      	str	r3, [r2, #0]
   1cf24:	68fb      	ldr	r3, [r7, #12]
   1cf26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf28:	4613      	mov	r3, r2
   1cf2a:	009b      	lsls	r3, r3, #2
   1cf2c:	4413      	add	r3, r2
   1cf2e:	009b      	lsls	r3, r3, #2
   1cf30:	4a0c      	ldr	r2, [pc, #48]	; (1cf64 <vTaskRemoveFromUnorderedEventList+0x90>)
   1cf32:	441a      	add	r2, r3
   1cf34:	68fb      	ldr	r3, [r7, #12]
   1cf36:	3304      	adds	r3, #4
   1cf38:	4619      	mov	r1, r3
   1cf3a:	4610      	mov	r0, r2
   1cf3c:	f7fe fe93 	bl	1bc66 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1cf40:	68fb      	ldr	r3, [r7, #12]
   1cf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf44:	4b08      	ldr	r3, [pc, #32]	; (1cf68 <vTaskRemoveFromUnorderedEventList+0x94>)
   1cf46:	681b      	ldr	r3, [r3, #0]
   1cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf4a:	429a      	cmp	r2, r3
   1cf4c:	d902      	bls.n	1cf54 <vTaskRemoveFromUnorderedEventList+0x80>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   1cf4e:	4b07      	ldr	r3, [pc, #28]	; (1cf6c <vTaskRemoveFromUnorderedEventList+0x98>)
   1cf50:	2201      	movs	r2, #1
   1cf52:	601a      	str	r2, [r3, #0]
	}
}
   1cf54:	bf00      	nop
   1cf56:	3710      	adds	r7, #16
   1cf58:	46bd      	mov	sp, r7
   1cf5a:	bd80      	pop	{r7, pc}
   1cf5c:	100051e4 	.word	0x100051e4
   1cf60:	100051c4 	.word	0x100051c4
   1cf64:	10005114 	.word	0x10005114
   1cf68:	10005110 	.word	0x10005110
   1cf6c:	100051d0 	.word	0x100051d0

0001cf70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1cf70:	b480      	push	{r7}
   1cf72:	b083      	sub	sp, #12
   1cf74:	af00      	add	r7, sp, #0
   1cf76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1cf78:	4b06      	ldr	r3, [pc, #24]	; (1cf94 <vTaskInternalSetTimeOutState+0x24>)
   1cf7a:	681a      	ldr	r2, [r3, #0]
   1cf7c:	687b      	ldr	r3, [r7, #4]
   1cf7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1cf80:	4b05      	ldr	r3, [pc, #20]	; (1cf98 <vTaskInternalSetTimeOutState+0x28>)
   1cf82:	681a      	ldr	r2, [r3, #0]
   1cf84:	687b      	ldr	r3, [r7, #4]
   1cf86:	605a      	str	r2, [r3, #4]
}
   1cf88:	bf00      	nop
   1cf8a:	370c      	adds	r7, #12
   1cf8c:	46bd      	mov	sp, r7
   1cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cf92:	4770      	bx	lr
   1cf94:	100051d4 	.word	0x100051d4
   1cf98:	100051c0 	.word	0x100051c0

0001cf9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1cf9c:	b580      	push	{r7, lr}
   1cf9e:	b086      	sub	sp, #24
   1cfa0:	af00      	add	r7, sp, #0
   1cfa2:	6078      	str	r0, [r7, #4]
   1cfa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1cfa6:	687b      	ldr	r3, [r7, #4]
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d100      	bne.n	1cfae <xTaskCheckForTimeOut+0x12>
   1cfac:	e7fe      	b.n	1cfac <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   1cfae:	683b      	ldr	r3, [r7, #0]
   1cfb0:	2b00      	cmp	r3, #0
   1cfb2:	d100      	bne.n	1cfb6 <xTaskCheckForTimeOut+0x1a>
   1cfb4:	e7fe      	b.n	1cfb4 <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   1cfb6:	f7f6 fb77 	bl	136a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1cfba:	4b1d      	ldr	r3, [pc, #116]	; (1d030 <xTaskCheckForTimeOut+0x94>)
   1cfbc:	681b      	ldr	r3, [r3, #0]
   1cfbe:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	685b      	ldr	r3, [r3, #4]
   1cfc4:	693a      	ldr	r2, [r7, #16]
   1cfc6:	1ad3      	subs	r3, r2, r3
   1cfc8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1cfca:	683b      	ldr	r3, [r7, #0]
   1cfcc:	681b      	ldr	r3, [r3, #0]
   1cfce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1cfd2:	d102      	bne.n	1cfda <xTaskCheckForTimeOut+0x3e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1cfd4:	2300      	movs	r3, #0
   1cfd6:	617b      	str	r3, [r7, #20]
   1cfd8:	e023      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1cfda:	687b      	ldr	r3, [r7, #4]
   1cfdc:	681a      	ldr	r2, [r3, #0]
   1cfde:	4b15      	ldr	r3, [pc, #84]	; (1d034 <xTaskCheckForTimeOut+0x98>)
   1cfe0:	681b      	ldr	r3, [r3, #0]
   1cfe2:	429a      	cmp	r2, r3
   1cfe4:	d007      	beq.n	1cff6 <xTaskCheckForTimeOut+0x5a>
   1cfe6:	687b      	ldr	r3, [r7, #4]
   1cfe8:	685a      	ldr	r2, [r3, #4]
   1cfea:	693b      	ldr	r3, [r7, #16]
   1cfec:	429a      	cmp	r2, r3
   1cfee:	d802      	bhi.n	1cff6 <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1cff0:	2301      	movs	r3, #1
   1cff2:	617b      	str	r3, [r7, #20]
   1cff4:	e015      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1cff6:	683b      	ldr	r3, [r7, #0]
   1cff8:	681a      	ldr	r2, [r3, #0]
   1cffa:	68fb      	ldr	r3, [r7, #12]
   1cffc:	429a      	cmp	r2, r3
   1cffe:	d90b      	bls.n	1d018 <xTaskCheckForTimeOut+0x7c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d000:	683b      	ldr	r3, [r7, #0]
   1d002:	681a      	ldr	r2, [r3, #0]
   1d004:	68fb      	ldr	r3, [r7, #12]
   1d006:	1ad2      	subs	r2, r2, r3
   1d008:	683b      	ldr	r3, [r7, #0]
   1d00a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d00c:	6878      	ldr	r0, [r7, #4]
   1d00e:	f7ff ffaf 	bl	1cf70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   1d012:	2300      	movs	r3, #0
   1d014:	617b      	str	r3, [r7, #20]
   1d016:	e004      	b.n	1d022 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			*pxTicksToWait = 0;
   1d018:	683b      	ldr	r3, [r7, #0]
   1d01a:	2200      	movs	r2, #0
   1d01c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d01e:	2301      	movs	r3, #1
   1d020:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d022:	f7f6 fb67 	bl	136f4 <vPortExitCritical>

	return xReturn;
   1d026:	697b      	ldr	r3, [r7, #20]
}
   1d028:	4618      	mov	r0, r3
   1d02a:	3718      	adds	r7, #24
   1d02c:	46bd      	mov	sp, r7
   1d02e:	bd80      	pop	{r7, pc}
   1d030:	100051c0 	.word	0x100051c0
   1d034:	100051d4 	.word	0x100051d4

0001d038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d038:	b480      	push	{r7}
   1d03a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d03c:	4b03      	ldr	r3, [pc, #12]	; (1d04c <vTaskMissedYield+0x14>)
   1d03e:	2201      	movs	r2, #1
   1d040:	601a      	str	r2, [r3, #0]
}
   1d042:	bf00      	nop
   1d044:	46bd      	mov	sp, r7
   1d046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d04a:	4770      	bx	lr
   1d04c:	100051d0 	.word	0x100051d0

0001d050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d050:	b580      	push	{r7, lr}
   1d052:	b084      	sub	sp, #16
   1d054:	af00      	add	r7, sp, #0
   1d056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d058:	f000 f898 	bl	1d18c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d05c:	4b13      	ldr	r3, [pc, #76]	; (1d0ac <prvIdleTask+0x5c>)
   1d05e:	681b      	ldr	r3, [r3, #0]
   1d060:	2b01      	cmp	r3, #1
   1d062:	d907      	bls.n	1d074 <prvIdleTask+0x24>
			{
				taskYIELD();
   1d064:	4b12      	ldr	r3, [pc, #72]	; (1d0b0 <prvIdleTask+0x60>)
   1d066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d06a:	601a      	str	r2, [r3, #0]
   1d06c:	f3bf 8f4f 	dsb	sy
   1d070:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   1d074:	f7ff fc5c 	bl	1c930 <prvGetExpectedIdleTime>
   1d078:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1d07a:	68fb      	ldr	r3, [r7, #12]
   1d07c:	2b01      	cmp	r3, #1
   1d07e:	d9eb      	bls.n	1d058 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
   1d080:	f7ff fc48 	bl	1c914 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1d084:	4b0b      	ldr	r3, [pc, #44]	; (1d0b4 <prvIdleTask+0x64>)
   1d086:	681a      	ldr	r2, [r3, #0]
   1d088:	4b0b      	ldr	r3, [pc, #44]	; (1d0b8 <prvIdleTask+0x68>)
   1d08a:	681b      	ldr	r3, [r3, #0]
   1d08c:	429a      	cmp	r2, r3
   1d08e:	d200      	bcs.n	1d092 <prvIdleTask+0x42>
   1d090:	e7fe      	b.n	1d090 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   1d092:	f7ff fc4d 	bl	1c930 <prvGetExpectedIdleTime>
   1d096:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1d098:	68fb      	ldr	r3, [r7, #12]
   1d09a:	2b01      	cmp	r3, #1
   1d09c:	d902      	bls.n	1d0a4 <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1d09e:	68f8      	ldr	r0, [r7, #12]
   1d0a0:	f7f6 fbd0 	bl	13844 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   1d0a4:	f7ff fc7c 	bl	1c9a0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   1d0a8:	e7d6      	b.n	1d058 <prvIdleTask+0x8>
   1d0aa:	bf00      	nop
   1d0ac:	10005114 	.word	0x10005114
   1d0b0:	e000ed04 	.word	0xe000ed04
   1d0b4:	100051dc 	.word	0x100051dc
   1d0b8:	100051c0 	.word	0x100051c0

0001d0bc <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   1d0bc:	b480      	push	{r7}
   1d0be:	b083      	sub	sp, #12
   1d0c0:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   1d0c2:	2301      	movs	r3, #1
   1d0c4:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   1d0c6:	2301      	movs	r3, #1
   1d0c8:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1d0ca:	4b0f      	ldr	r3, [pc, #60]	; (1d108 <eTaskConfirmSleepModeStatus+0x4c>)
   1d0cc:	681b      	ldr	r3, [r3, #0]
   1d0ce:	2b00      	cmp	r3, #0
   1d0d0:	d002      	beq.n	1d0d8 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1d0d2:	2300      	movs	r3, #0
   1d0d4:	71fb      	strb	r3, [r7, #7]
   1d0d6:	e010      	b.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   1d0d8:	4b0c      	ldr	r3, [pc, #48]	; (1d10c <eTaskConfirmSleepModeStatus+0x50>)
   1d0da:	681b      	ldr	r3, [r3, #0]
   1d0dc:	2b00      	cmp	r3, #0
   1d0de:	d002      	beq.n	1d0e6 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1d0e0:	2300      	movs	r3, #0
   1d0e2:	71fb      	strb	r3, [r7, #7]
   1d0e4:	e009      	b.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1d0e6:	4b0a      	ldr	r3, [pc, #40]	; (1d110 <eTaskConfirmSleepModeStatus+0x54>)
   1d0e8:	681a      	ldr	r2, [r3, #0]
   1d0ea:	4b0a      	ldr	r3, [pc, #40]	; (1d114 <eTaskConfirmSleepModeStatus+0x58>)
   1d0ec:	6819      	ldr	r1, [r3, #0]
   1d0ee:	683b      	ldr	r3, [r7, #0]
   1d0f0:	1acb      	subs	r3, r1, r3
   1d0f2:	429a      	cmp	r2, r3
   1d0f4:	d101      	bne.n	1d0fa <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   1d0f6:	2302      	movs	r3, #2
   1d0f8:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   1d0fa:	79fb      	ldrb	r3, [r7, #7]
	}
   1d0fc:	4618      	mov	r0, r3
   1d0fe:	370c      	adds	r7, #12
   1d100:	46bd      	mov	sp, r7
   1d102:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d106:	4770      	bx	lr
   1d108:	10005194 	.word	0x10005194
   1d10c:	100051d0 	.word	0x100051d0
   1d110:	100051a8 	.word	0x100051a8
   1d114:	100051bc 	.word	0x100051bc

0001d118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d118:	b580      	push	{r7, lr}
   1d11a:	b082      	sub	sp, #8
   1d11c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d11e:	2300      	movs	r3, #0
   1d120:	607b      	str	r3, [r7, #4]
   1d122:	e00c      	b.n	1d13e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d124:	687a      	ldr	r2, [r7, #4]
   1d126:	4613      	mov	r3, r2
   1d128:	009b      	lsls	r3, r3, #2
   1d12a:	4413      	add	r3, r2
   1d12c:	009b      	lsls	r3, r3, #2
   1d12e:	4a10      	ldr	r2, [pc, #64]	; (1d170 <prvInitialiseTaskLists+0x58>)
   1d130:	4413      	add	r3, r2
   1d132:	4618      	mov	r0, r3
   1d134:	f7fe fd6a 	bl	1bc0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d138:	687b      	ldr	r3, [r7, #4]
   1d13a:	3301      	adds	r3, #1
   1d13c:	607b      	str	r3, [r7, #4]
   1d13e:	687b      	ldr	r3, [r7, #4]
   1d140:	2b03      	cmp	r3, #3
   1d142:	d9ef      	bls.n	1d124 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d144:	480b      	ldr	r0, [pc, #44]	; (1d174 <prvInitialiseTaskLists+0x5c>)
   1d146:	f7fe fd61 	bl	1bc0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1d14a:	480b      	ldr	r0, [pc, #44]	; (1d178 <prvInitialiseTaskLists+0x60>)
   1d14c:	f7fe fd5e 	bl	1bc0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1d150:	480a      	ldr	r0, [pc, #40]	; (1d17c <prvInitialiseTaskLists+0x64>)
   1d152:	f7fe fd5b 	bl	1bc0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d156:	480a      	ldr	r0, [pc, #40]	; (1d180 <prvInitialiseTaskLists+0x68>)
   1d158:	f7fe fd58 	bl	1bc0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d15c:	4b09      	ldr	r3, [pc, #36]	; (1d184 <prvInitialiseTaskLists+0x6c>)
   1d15e:	4a05      	ldr	r2, [pc, #20]	; (1d174 <prvInitialiseTaskLists+0x5c>)
   1d160:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d162:	4b09      	ldr	r3, [pc, #36]	; (1d188 <prvInitialiseTaskLists+0x70>)
   1d164:	4a04      	ldr	r2, [pc, #16]	; (1d178 <prvInitialiseTaskLists+0x60>)
   1d166:	601a      	str	r2, [r3, #0]
}
   1d168:	bf00      	nop
   1d16a:	3708      	adds	r7, #8
   1d16c:	46bd      	mov	sp, r7
   1d16e:	bd80      	pop	{r7, pc}
   1d170:	10005114 	.word	0x10005114
   1d174:	10005164 	.word	0x10005164
   1d178:	10005178 	.word	0x10005178
   1d17c:	10005194 	.word	0x10005194
   1d180:	100051a8 	.word	0x100051a8
   1d184:	1000518c 	.word	0x1000518c
   1d188:	10005190 	.word	0x10005190

0001d18c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d18c:	b480      	push	{r7}
   1d18e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d190:	bf00      	nop
   1d192:	46bd      	mov	sp, r7
   1d194:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d198:	4770      	bx	lr
	...

0001d19c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d19c:	b480      	push	{r7}
   1d19e:	b083      	sub	sp, #12
   1d1a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d1a2:	4b0c      	ldr	r3, [pc, #48]	; (1d1d4 <prvResetNextTaskUnblockTime+0x38>)
   1d1a4:	681b      	ldr	r3, [r3, #0]
   1d1a6:	681b      	ldr	r3, [r3, #0]
   1d1a8:	2b00      	cmp	r3, #0
   1d1aa:	d104      	bne.n	1d1b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d1ac:	4b0a      	ldr	r3, [pc, #40]	; (1d1d8 <prvResetNextTaskUnblockTime+0x3c>)
   1d1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d1b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d1b4:	e008      	b.n	1d1c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d1b6:	4b07      	ldr	r3, [pc, #28]	; (1d1d4 <prvResetNextTaskUnblockTime+0x38>)
   1d1b8:	681b      	ldr	r3, [r3, #0]
   1d1ba:	68db      	ldr	r3, [r3, #12]
   1d1bc:	68db      	ldr	r3, [r3, #12]
   1d1be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d1c0:	687b      	ldr	r3, [r7, #4]
   1d1c2:	685b      	ldr	r3, [r3, #4]
   1d1c4:	4a04      	ldr	r2, [pc, #16]	; (1d1d8 <prvResetNextTaskUnblockTime+0x3c>)
   1d1c6:	6013      	str	r3, [r2, #0]
}
   1d1c8:	bf00      	nop
   1d1ca:	370c      	adds	r7, #12
   1d1cc:	46bd      	mov	sp, r7
   1d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d1d2:	4770      	bx	lr
   1d1d4:	1000518c 	.word	0x1000518c
   1d1d8:	100051dc 	.word	0x100051dc

0001d1dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d1dc:	b480      	push	{r7}
   1d1de:	b083      	sub	sp, #12
   1d1e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d1e2:	4b0b      	ldr	r3, [pc, #44]	; (1d210 <xTaskGetSchedulerState+0x34>)
   1d1e4:	681b      	ldr	r3, [r3, #0]
   1d1e6:	2b00      	cmp	r3, #0
   1d1e8:	d102      	bne.n	1d1f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d1ea:	2301      	movs	r3, #1
   1d1ec:	607b      	str	r3, [r7, #4]
   1d1ee:	e008      	b.n	1d202 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d1f0:	4b08      	ldr	r3, [pc, #32]	; (1d214 <xTaskGetSchedulerState+0x38>)
   1d1f2:	681b      	ldr	r3, [r3, #0]
   1d1f4:	2b00      	cmp	r3, #0
   1d1f6:	d102      	bne.n	1d1fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d1f8:	2302      	movs	r3, #2
   1d1fa:	607b      	str	r3, [r7, #4]
   1d1fc:	e001      	b.n	1d202 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d1fe:	2300      	movs	r3, #0
   1d200:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d202:	687b      	ldr	r3, [r7, #4]
	}
   1d204:	4618      	mov	r0, r3
   1d206:	370c      	adds	r7, #12
   1d208:	46bd      	mov	sp, r7
   1d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d20e:	4770      	bx	lr
   1d210:	100051c8 	.word	0x100051c8
   1d214:	100051e4 	.word	0x100051e4

0001d218 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   1d218:	b480      	push	{r7}
   1d21a:	b083      	sub	sp, #12
   1d21c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1d21e:	4b09      	ldr	r3, [pc, #36]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d220:	681b      	ldr	r3, [r3, #0]
   1d222:	699b      	ldr	r3, [r3, #24]
   1d224:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d226:	4b07      	ldr	r3, [pc, #28]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d228:	681b      	ldr	r3, [r3, #0]
   1d22a:	4a06      	ldr	r2, [pc, #24]	; (1d244 <uxTaskResetEventItemValue+0x2c>)
   1d22c:	6812      	ldr	r2, [r2, #0]
   1d22e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1d230:	f1c2 0204 	rsb	r2, r2, #4
   1d234:	619a      	str	r2, [r3, #24]

	return uxReturn;
   1d236:	687b      	ldr	r3, [r7, #4]
}
   1d238:	4618      	mov	r0, r3
   1d23a:	370c      	adds	r7, #12
   1d23c:	46bd      	mov	sp, r7
   1d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d242:	4770      	bx	lr
   1d244:	10005110 	.word	0x10005110

0001d248 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d248:	b580      	push	{r7, lr}
   1d24a:	b084      	sub	sp, #16
   1d24c:	af00      	add	r7, sp, #0
   1d24e:	6078      	str	r0, [r7, #4]
   1d250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d252:	4b21      	ldr	r3, [pc, #132]	; (1d2d8 <prvAddCurrentTaskToDelayedList+0x90>)
   1d254:	681b      	ldr	r3, [r3, #0]
   1d256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d258:	4b20      	ldr	r3, [pc, #128]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d25a:	681b      	ldr	r3, [r3, #0]
   1d25c:	3304      	adds	r3, #4
   1d25e:	4618      	mov	r0, r3
   1d260:	f7fe fd5e 	bl	1bd20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d264:	687b      	ldr	r3, [r7, #4]
   1d266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d26a:	d10a      	bne.n	1d282 <prvAddCurrentTaskToDelayedList+0x3a>
   1d26c:	683b      	ldr	r3, [r7, #0]
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d007      	beq.n	1d282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d272:	4b1a      	ldr	r3, [pc, #104]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d274:	681b      	ldr	r3, [r3, #0]
   1d276:	3304      	adds	r3, #4
   1d278:	4619      	mov	r1, r3
   1d27a:	4819      	ldr	r0, [pc, #100]	; (1d2e0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d27c:	f7fe fcf3 	bl	1bc66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d280:	e026      	b.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d282:	68fa      	ldr	r2, [r7, #12]
   1d284:	687b      	ldr	r3, [r7, #4]
   1d286:	4413      	add	r3, r2
   1d288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d28a:	4b14      	ldr	r3, [pc, #80]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d28c:	681b      	ldr	r3, [r3, #0]
   1d28e:	68ba      	ldr	r2, [r7, #8]
   1d290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d292:	68ba      	ldr	r2, [r7, #8]
   1d294:	68fb      	ldr	r3, [r7, #12]
   1d296:	429a      	cmp	r2, r3
   1d298:	d209      	bcs.n	1d2ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d29a:	4b12      	ldr	r3, [pc, #72]	; (1d2e4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d29c:	681a      	ldr	r2, [r3, #0]
   1d29e:	4b0f      	ldr	r3, [pc, #60]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d2a0:	681b      	ldr	r3, [r3, #0]
   1d2a2:	3304      	adds	r3, #4
   1d2a4:	4619      	mov	r1, r3
   1d2a6:	4610      	mov	r0, r2
   1d2a8:	f7fe fd01 	bl	1bcae <vListInsert>
}
   1d2ac:	e010      	b.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d2ae:	4b0e      	ldr	r3, [pc, #56]	; (1d2e8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d2b0:	681a      	ldr	r2, [r3, #0]
   1d2b2:	4b0a      	ldr	r3, [pc, #40]	; (1d2dc <prvAddCurrentTaskToDelayedList+0x94>)
   1d2b4:	681b      	ldr	r3, [r3, #0]
   1d2b6:	3304      	adds	r3, #4
   1d2b8:	4619      	mov	r1, r3
   1d2ba:	4610      	mov	r0, r2
   1d2bc:	f7fe fcf7 	bl	1bcae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1d2c0:	4b0a      	ldr	r3, [pc, #40]	; (1d2ec <prvAddCurrentTaskToDelayedList+0xa4>)
   1d2c2:	681b      	ldr	r3, [r3, #0]
   1d2c4:	68ba      	ldr	r2, [r7, #8]
   1d2c6:	429a      	cmp	r2, r3
   1d2c8:	d202      	bcs.n	1d2d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d2ca:	4a08      	ldr	r2, [pc, #32]	; (1d2ec <prvAddCurrentTaskToDelayedList+0xa4>)
   1d2cc:	68bb      	ldr	r3, [r7, #8]
   1d2ce:	6013      	str	r3, [r2, #0]
}
   1d2d0:	bf00      	nop
   1d2d2:	3710      	adds	r7, #16
   1d2d4:	46bd      	mov	sp, r7
   1d2d6:	bd80      	pop	{r7, pc}
   1d2d8:	100051c0 	.word	0x100051c0
   1d2dc:	10005110 	.word	0x10005110
   1d2e0:	100051a8 	.word	0x100051a8
   1d2e4:	10005190 	.word	0x10005190
   1d2e8:	1000518c 	.word	0x1000518c
   1d2ec:	100051dc 	.word	0x100051dc

0001d2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d2f0:	b580      	push	{r7, lr}
   1d2f2:	b084      	sub	sp, #16
   1d2f4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d2f6:	2300      	movs	r3, #0
   1d2f8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d2fa:	f000 fab1 	bl	1d860 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   1d2fe:	4b0c      	ldr	r3, [pc, #48]	; (1d330 <xTimerCreateTimerTask+0x40>)
   1d300:	681b      	ldr	r3, [r3, #0]
   1d302:	2b00      	cmp	r3, #0
   1d304:	d00b      	beq.n	1d31e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d306:	4b0b      	ldr	r3, [pc, #44]	; (1d334 <xTimerCreateTimerTask+0x44>)
   1d308:	9301      	str	r3, [sp, #4]
   1d30a:	2303      	movs	r3, #3
   1d30c:	9300      	str	r3, [sp, #0]
   1d30e:	2300      	movs	r3, #0
   1d310:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d314:	4908      	ldr	r1, [pc, #32]	; (1d338 <xTimerCreateTimerTask+0x48>)
   1d316:	4809      	ldr	r0, [pc, #36]	; (1d33c <xTimerCreateTimerTask+0x4c>)
   1d318:	f7ff f924 	bl	1c564 <xTaskCreate>
   1d31c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d31e:	687b      	ldr	r3, [r7, #4]
   1d320:	2b00      	cmp	r3, #0
   1d322:	d100      	bne.n	1d326 <xTimerCreateTimerTask+0x36>
   1d324:	e7fe      	b.n	1d324 <xTimerCreateTimerTask+0x34>
	return xReturn;
   1d326:	687b      	ldr	r3, [r7, #4]
}
   1d328:	4618      	mov	r0, r3
   1d32a:	3708      	adds	r7, #8
   1d32c:	46bd      	mov	sp, r7
   1d32e:	bd80      	pop	{r7, pc}
   1d330:	10005218 	.word	0x10005218
   1d334:	1000521c 	.word	0x1000521c
   1d338:	00022cd0 	.word	0x00022cd0
   1d33c:	0001d4c1 	.word	0x0001d4c1

0001d340 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   1d340:	b580      	push	{r7, lr}
   1d342:	b088      	sub	sp, #32
   1d344:	af02      	add	r7, sp, #8
   1d346:	60f8      	str	r0, [r7, #12]
   1d348:	60b9      	str	r1, [r7, #8]
   1d34a:	607a      	str	r2, [r7, #4]
   1d34c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1d34e:	2028      	movs	r0, #40	; 0x28
   1d350:	f001 ff88 	bl	1f264 <pvPortMalloc>
   1d354:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   1d356:	697b      	ldr	r3, [r7, #20]
   1d358:	2b00      	cmp	r3, #0
   1d35a:	d009      	beq.n	1d370 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   1d35c:	697b      	ldr	r3, [r7, #20]
   1d35e:	9301      	str	r3, [sp, #4]
   1d360:	6a3b      	ldr	r3, [r7, #32]
   1d362:	9300      	str	r3, [sp, #0]
   1d364:	683b      	ldr	r3, [r7, #0]
   1d366:	687a      	ldr	r2, [r7, #4]
   1d368:	68b9      	ldr	r1, [r7, #8]
   1d36a:	68f8      	ldr	r0, [r7, #12]
   1d36c:	f000 f805 	bl	1d37a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   1d370:	697b      	ldr	r3, [r7, #20]
	}
   1d372:	4618      	mov	r0, r3
   1d374:	3718      	adds	r7, #24
   1d376:	46bd      	mov	sp, r7
   1d378:	bd80      	pop	{r7, pc}

0001d37a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   1d37a:	b580      	push	{r7, lr}
   1d37c:	b084      	sub	sp, #16
   1d37e:	af00      	add	r7, sp, #0
   1d380:	60f8      	str	r0, [r7, #12]
   1d382:	60b9      	str	r1, [r7, #8]
   1d384:	607a      	str	r2, [r7, #4]
   1d386:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1d388:	68bb      	ldr	r3, [r7, #8]
   1d38a:	2b00      	cmp	r3, #0
   1d38c:	d100      	bne.n	1d390 <prvInitialiseNewTimer+0x16>
   1d38e:	e7fe      	b.n	1d38e <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   1d390:	69fb      	ldr	r3, [r7, #28]
   1d392:	2b00      	cmp	r3, #0
   1d394:	d015      	beq.n	1d3c2 <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   1d396:	f000 fa63 	bl	1d860 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   1d39a:	69fb      	ldr	r3, [r7, #28]
   1d39c:	68fa      	ldr	r2, [r7, #12]
   1d39e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   1d3a0:	69fb      	ldr	r3, [r7, #28]
   1d3a2:	68ba      	ldr	r2, [r7, #8]
   1d3a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1d3a6:	69fb      	ldr	r3, [r7, #28]
   1d3a8:	687a      	ldr	r2, [r7, #4]
   1d3aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   1d3ac:	69fb      	ldr	r3, [r7, #28]
   1d3ae:	683a      	ldr	r2, [r7, #0]
   1d3b0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1d3b2:	69fb      	ldr	r3, [r7, #28]
   1d3b4:	69ba      	ldr	r2, [r7, #24]
   1d3b6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1d3b8:	69fb      	ldr	r3, [r7, #28]
   1d3ba:	3304      	adds	r3, #4
   1d3bc:	4618      	mov	r0, r3
   1d3be:	f7fe fc45 	bl	1bc4c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   1d3c2:	bf00      	nop
   1d3c4:	3710      	adds	r7, #16
   1d3c6:	46bd      	mov	sp, r7
   1d3c8:	bd80      	pop	{r7, pc}
	...

0001d3cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d3cc:	b580      	push	{r7, lr}
   1d3ce:	b08a      	sub	sp, #40	; 0x28
   1d3d0:	af00      	add	r7, sp, #0
   1d3d2:	60f8      	str	r0, [r7, #12]
   1d3d4:	60b9      	str	r1, [r7, #8]
   1d3d6:	607a      	str	r2, [r7, #4]
   1d3d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d3da:	2300      	movs	r3, #0
   1d3dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d3de:	68fb      	ldr	r3, [r7, #12]
   1d3e0:	2b00      	cmp	r3, #0
   1d3e2:	d100      	bne.n	1d3e6 <xTimerGenericCommand+0x1a>
   1d3e4:	e7fe      	b.n	1d3e4 <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d3e6:	4b1a      	ldr	r3, [pc, #104]	; (1d450 <xTimerGenericCommand+0x84>)
   1d3e8:	681b      	ldr	r3, [r3, #0]
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d02a      	beq.n	1d444 <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d3ee:	68bb      	ldr	r3, [r7, #8]
   1d3f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d3f2:	687b      	ldr	r3, [r7, #4]
   1d3f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1d3f6:	68fb      	ldr	r3, [r7, #12]
   1d3f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d3fa:	68bb      	ldr	r3, [r7, #8]
   1d3fc:	2b05      	cmp	r3, #5
   1d3fe:	dc18      	bgt.n	1d432 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d400:	f7ff feec 	bl	1d1dc <xTaskGetSchedulerState>
   1d404:	4603      	mov	r3, r0
   1d406:	2b02      	cmp	r3, #2
   1d408:	d109      	bne.n	1d41e <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d40a:	4b11      	ldr	r3, [pc, #68]	; (1d450 <xTimerGenericCommand+0x84>)
   1d40c:	6818      	ldr	r0, [r3, #0]
   1d40e:	f107 0114 	add.w	r1, r7, #20
   1d412:	2300      	movs	r3, #0
   1d414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d416:	f7fe fd5d 	bl	1bed4 <xQueueGenericSend>
   1d41a:	6278      	str	r0, [r7, #36]	; 0x24
   1d41c:	e012      	b.n	1d444 <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d41e:	4b0c      	ldr	r3, [pc, #48]	; (1d450 <xTimerGenericCommand+0x84>)
   1d420:	6818      	ldr	r0, [r3, #0]
   1d422:	f107 0114 	add.w	r1, r7, #20
   1d426:	2300      	movs	r3, #0
   1d428:	2200      	movs	r2, #0
   1d42a:	f7fe fd53 	bl	1bed4 <xQueueGenericSend>
   1d42e:	6278      	str	r0, [r7, #36]	; 0x24
   1d430:	e008      	b.n	1d444 <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d432:	4b07      	ldr	r3, [pc, #28]	; (1d450 <xTimerGenericCommand+0x84>)
   1d434:	6818      	ldr	r0, [r3, #0]
   1d436:	f107 0114 	add.w	r1, r7, #20
   1d43a:	2300      	movs	r3, #0
   1d43c:	683a      	ldr	r2, [r7, #0]
   1d43e:	f7fe fe1f 	bl	1c080 <xQueueGenericSendFromISR>
   1d442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1d446:	4618      	mov	r0, r3
   1d448:	3728      	adds	r7, #40	; 0x28
   1d44a:	46bd      	mov	sp, r7
   1d44c:	bd80      	pop	{r7, pc}
   1d44e:	bf00      	nop
   1d450:	10005218 	.word	0x10005218

0001d454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d454:	b580      	push	{r7, lr}
   1d456:	b086      	sub	sp, #24
   1d458:	af02      	add	r7, sp, #8
   1d45a:	6078      	str	r0, [r7, #4]
   1d45c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d45e:	4b17      	ldr	r3, [pc, #92]	; (1d4bc <prvProcessExpiredTimer+0x68>)
   1d460:	681b      	ldr	r3, [r3, #0]
   1d462:	68db      	ldr	r3, [r3, #12]
   1d464:	68db      	ldr	r3, [r3, #12]
   1d466:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d468:	68fb      	ldr	r3, [r7, #12]
   1d46a:	3304      	adds	r3, #4
   1d46c:	4618      	mov	r0, r3
   1d46e:	f7fe fc57 	bl	1bd20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d472:	68fb      	ldr	r3, [r7, #12]
   1d474:	69db      	ldr	r3, [r3, #28]
   1d476:	2b01      	cmp	r3, #1
   1d478:	d118      	bne.n	1d4ac <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d47a:	68fb      	ldr	r3, [r7, #12]
   1d47c:	699a      	ldr	r2, [r3, #24]
   1d47e:	687b      	ldr	r3, [r7, #4]
   1d480:	18d1      	adds	r1, r2, r3
   1d482:	687b      	ldr	r3, [r7, #4]
   1d484:	683a      	ldr	r2, [r7, #0]
   1d486:	68f8      	ldr	r0, [r7, #12]
   1d488:	f000 f8be 	bl	1d608 <prvInsertTimerInActiveList>
   1d48c:	4603      	mov	r3, r0
   1d48e:	2b00      	cmp	r3, #0
   1d490:	d00c      	beq.n	1d4ac <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d492:	2300      	movs	r3, #0
   1d494:	9300      	str	r3, [sp, #0]
   1d496:	2300      	movs	r3, #0
   1d498:	687a      	ldr	r2, [r7, #4]
   1d49a:	2100      	movs	r1, #0
   1d49c:	68f8      	ldr	r0, [r7, #12]
   1d49e:	f7ff ff95 	bl	1d3cc <xTimerGenericCommand>
   1d4a2:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   1d4a4:	68bb      	ldr	r3, [r7, #8]
   1d4a6:	2b00      	cmp	r3, #0
   1d4a8:	d100      	bne.n	1d4ac <prvProcessExpiredTimer+0x58>
   1d4aa:	e7fe      	b.n	1d4aa <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d4ac:	68fb      	ldr	r3, [r7, #12]
   1d4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d4b0:	68f8      	ldr	r0, [r7, #12]
   1d4b2:	4798      	blx	r3
}
   1d4b4:	bf00      	nop
   1d4b6:	3710      	adds	r7, #16
   1d4b8:	46bd      	mov	sp, r7
   1d4ba:	bd80      	pop	{r7, pc}
   1d4bc:	10005210 	.word	0x10005210

0001d4c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d4c0:	b580      	push	{r7, lr}
   1d4c2:	b084      	sub	sp, #16
   1d4c4:	af00      	add	r7, sp, #0
   1d4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d4c8:	f107 0308 	add.w	r3, r7, #8
   1d4cc:	4618      	mov	r0, r3
   1d4ce:	f000 f857 	bl	1d580 <prvGetNextExpireTime>
   1d4d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d4d4:	68bb      	ldr	r3, [r7, #8]
   1d4d6:	4619      	mov	r1, r3
   1d4d8:	68f8      	ldr	r0, [r7, #12]
   1d4da:	f000 f803 	bl	1d4e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d4de:	f000 f8d5 	bl	1d68c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d4e2:	e7f1      	b.n	1d4c8 <prvTimerTask+0x8>

0001d4e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d4e4:	b580      	push	{r7, lr}
   1d4e6:	b084      	sub	sp, #16
   1d4e8:	af00      	add	r7, sp, #0
   1d4ea:	6078      	str	r0, [r7, #4]
   1d4ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d4ee:	f7ff fa11 	bl	1c914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d4f2:	f107 0308 	add.w	r3, r7, #8
   1d4f6:	4618      	mov	r0, r3
   1d4f8:	f000 f866 	bl	1d5c8 <prvSampleTimeNow>
   1d4fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d4fe:	68bb      	ldr	r3, [r7, #8]
   1d500:	2b00      	cmp	r3, #0
   1d502:	d130      	bne.n	1d566 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d504:	683b      	ldr	r3, [r7, #0]
   1d506:	2b00      	cmp	r3, #0
   1d508:	d10a      	bne.n	1d520 <prvProcessTimerOrBlockTask+0x3c>
   1d50a:	687a      	ldr	r2, [r7, #4]
   1d50c:	68fb      	ldr	r3, [r7, #12]
   1d50e:	429a      	cmp	r2, r3
   1d510:	d806      	bhi.n	1d520 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   1d512:	f7ff fa45 	bl	1c9a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d516:	68f9      	ldr	r1, [r7, #12]
   1d518:	6878      	ldr	r0, [r7, #4]
   1d51a:	f7ff ff9b 	bl	1d454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d51e:	e024      	b.n	1d56a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
   1d520:	683b      	ldr	r3, [r7, #0]
   1d522:	2b00      	cmp	r3, #0
   1d524:	d008      	beq.n	1d538 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d526:	4b13      	ldr	r3, [pc, #76]	; (1d574 <prvProcessTimerOrBlockTask+0x90>)
   1d528:	681b      	ldr	r3, [r3, #0]
   1d52a:	681b      	ldr	r3, [r3, #0]
   1d52c:	2b00      	cmp	r3, #0
   1d52e:	d101      	bne.n	1d534 <prvProcessTimerOrBlockTask+0x50>
   1d530:	2301      	movs	r3, #1
   1d532:	e000      	b.n	1d536 <prvProcessTimerOrBlockTask+0x52>
   1d534:	2300      	movs	r3, #0
   1d536:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d538:	4b0f      	ldr	r3, [pc, #60]	; (1d578 <prvProcessTimerOrBlockTask+0x94>)
   1d53a:	6818      	ldr	r0, [r3, #0]
   1d53c:	687a      	ldr	r2, [r7, #4]
   1d53e:	68fb      	ldr	r3, [r7, #12]
   1d540:	1ad3      	subs	r3, r2, r3
   1d542:	683a      	ldr	r2, [r7, #0]
   1d544:	4619      	mov	r1, r3
   1d546:	f7fe ffd9 	bl	1c4fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1d54a:	f7ff fa29 	bl	1c9a0 <xTaskResumeAll>
   1d54e:	4603      	mov	r3, r0
   1d550:	2b00      	cmp	r3, #0
   1d552:	d10a      	bne.n	1d56a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
   1d554:	4b09      	ldr	r3, [pc, #36]	; (1d57c <prvProcessTimerOrBlockTask+0x98>)
   1d556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d55a:	601a      	str	r2, [r3, #0]
   1d55c:	f3bf 8f4f 	dsb	sy
   1d560:	f3bf 8f6f 	isb	sy
}
   1d564:	e001      	b.n	1d56a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
   1d566:	f7ff fa1b 	bl	1c9a0 <xTaskResumeAll>
}
   1d56a:	bf00      	nop
   1d56c:	3710      	adds	r7, #16
   1d56e:	46bd      	mov	sp, r7
   1d570:	bd80      	pop	{r7, pc}
   1d572:	bf00      	nop
   1d574:	10005214 	.word	0x10005214
   1d578:	10005218 	.word	0x10005218
   1d57c:	e000ed04 	.word	0xe000ed04

0001d580 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d580:	b480      	push	{r7}
   1d582:	b085      	sub	sp, #20
   1d584:	af00      	add	r7, sp, #0
   1d586:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d588:	4b0e      	ldr	r3, [pc, #56]	; (1d5c4 <prvGetNextExpireTime+0x44>)
   1d58a:	681b      	ldr	r3, [r3, #0]
   1d58c:	681b      	ldr	r3, [r3, #0]
   1d58e:	2b00      	cmp	r3, #0
   1d590:	d101      	bne.n	1d596 <prvGetNextExpireTime+0x16>
   1d592:	2201      	movs	r2, #1
   1d594:	e000      	b.n	1d598 <prvGetNextExpireTime+0x18>
   1d596:	2200      	movs	r2, #0
   1d598:	687b      	ldr	r3, [r7, #4]
   1d59a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d59c:	687b      	ldr	r3, [r7, #4]
   1d59e:	681b      	ldr	r3, [r3, #0]
   1d5a0:	2b00      	cmp	r3, #0
   1d5a2:	d105      	bne.n	1d5b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d5a4:	4b07      	ldr	r3, [pc, #28]	; (1d5c4 <prvGetNextExpireTime+0x44>)
   1d5a6:	681b      	ldr	r3, [r3, #0]
   1d5a8:	68db      	ldr	r3, [r3, #12]
   1d5aa:	681b      	ldr	r3, [r3, #0]
   1d5ac:	60fb      	str	r3, [r7, #12]
   1d5ae:	e001      	b.n	1d5b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d5b0:	2300      	movs	r3, #0
   1d5b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d5b4:	68fb      	ldr	r3, [r7, #12]
}
   1d5b6:	4618      	mov	r0, r3
   1d5b8:	3714      	adds	r7, #20
   1d5ba:	46bd      	mov	sp, r7
   1d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d5c0:	4770      	bx	lr
   1d5c2:	bf00      	nop
   1d5c4:	10005210 	.word	0x10005210

0001d5c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d5c8:	b580      	push	{r7, lr}
   1d5ca:	b084      	sub	sp, #16
   1d5cc:	af00      	add	r7, sp, #0
   1d5ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d5d0:	f7ff fa7a 	bl	1cac8 <xTaskGetTickCount>
   1d5d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   1d5d6:	4b0b      	ldr	r3, [pc, #44]	; (1d604 <prvSampleTimeNow+0x3c>)
   1d5d8:	681b      	ldr	r3, [r3, #0]
   1d5da:	68fa      	ldr	r2, [r7, #12]
   1d5dc:	429a      	cmp	r2, r3
   1d5de:	d205      	bcs.n	1d5ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   1d5e0:	f000 f8e6 	bl	1d7b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1d5e4:	687b      	ldr	r3, [r7, #4]
   1d5e6:	2201      	movs	r2, #1
   1d5e8:	601a      	str	r2, [r3, #0]
   1d5ea:	e002      	b.n	1d5f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d5ec:	687b      	ldr	r3, [r7, #4]
   1d5ee:	2200      	movs	r2, #0
   1d5f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d5f2:	4a04      	ldr	r2, [pc, #16]	; (1d604 <prvSampleTimeNow+0x3c>)
   1d5f4:	68fb      	ldr	r3, [r7, #12]
   1d5f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   1d5f8:	68fb      	ldr	r3, [r7, #12]
}
   1d5fa:	4618      	mov	r0, r3
   1d5fc:	3710      	adds	r7, #16
   1d5fe:	46bd      	mov	sp, r7
   1d600:	bd80      	pop	{r7, pc}
   1d602:	bf00      	nop
   1d604:	10005220 	.word	0x10005220

0001d608 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d608:	b580      	push	{r7, lr}
   1d60a:	b086      	sub	sp, #24
   1d60c:	af00      	add	r7, sp, #0
   1d60e:	60f8      	str	r0, [r7, #12]
   1d610:	60b9      	str	r1, [r7, #8]
   1d612:	607a      	str	r2, [r7, #4]
   1d614:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d616:	2300      	movs	r3, #0
   1d618:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d61a:	68fb      	ldr	r3, [r7, #12]
   1d61c:	68ba      	ldr	r2, [r7, #8]
   1d61e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d620:	68fb      	ldr	r3, [r7, #12]
   1d622:	68fa      	ldr	r2, [r7, #12]
   1d624:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d626:	68ba      	ldr	r2, [r7, #8]
   1d628:	687b      	ldr	r3, [r7, #4]
   1d62a:	429a      	cmp	r2, r3
   1d62c:	d812      	bhi.n	1d654 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d62e:	687a      	ldr	r2, [r7, #4]
   1d630:	683b      	ldr	r3, [r7, #0]
   1d632:	1ad2      	subs	r2, r2, r3
   1d634:	68fb      	ldr	r3, [r7, #12]
   1d636:	699b      	ldr	r3, [r3, #24]
   1d638:	429a      	cmp	r2, r3
   1d63a:	d302      	bcc.n	1d642 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d63c:	2301      	movs	r3, #1
   1d63e:	617b      	str	r3, [r7, #20]
   1d640:	e01b      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d642:	4b10      	ldr	r3, [pc, #64]	; (1d684 <prvInsertTimerInActiveList+0x7c>)
   1d644:	681a      	ldr	r2, [r3, #0]
   1d646:	68fb      	ldr	r3, [r7, #12]
   1d648:	3304      	adds	r3, #4
   1d64a:	4619      	mov	r1, r3
   1d64c:	4610      	mov	r0, r2
   1d64e:	f7fe fb2e 	bl	1bcae <vListInsert>
   1d652:	e012      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d654:	687a      	ldr	r2, [r7, #4]
   1d656:	683b      	ldr	r3, [r7, #0]
   1d658:	429a      	cmp	r2, r3
   1d65a:	d206      	bcs.n	1d66a <prvInsertTimerInActiveList+0x62>
   1d65c:	68ba      	ldr	r2, [r7, #8]
   1d65e:	683b      	ldr	r3, [r7, #0]
   1d660:	429a      	cmp	r2, r3
   1d662:	d302      	bcc.n	1d66a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d664:	2301      	movs	r3, #1
   1d666:	617b      	str	r3, [r7, #20]
   1d668:	e007      	b.n	1d67a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d66a:	4b07      	ldr	r3, [pc, #28]	; (1d688 <prvInsertTimerInActiveList+0x80>)
   1d66c:	681a      	ldr	r2, [r3, #0]
   1d66e:	68fb      	ldr	r3, [r7, #12]
   1d670:	3304      	adds	r3, #4
   1d672:	4619      	mov	r1, r3
   1d674:	4610      	mov	r0, r2
   1d676:	f7fe fb1a 	bl	1bcae <vListInsert>
		}
	}

	return xProcessTimerNow;
   1d67a:	697b      	ldr	r3, [r7, #20]
}
   1d67c:	4618      	mov	r0, r3
   1d67e:	3718      	adds	r7, #24
   1d680:	46bd      	mov	sp, r7
   1d682:	bd80      	pop	{r7, pc}
   1d684:	10005214 	.word	0x10005214
   1d688:	10005210 	.word	0x10005210

0001d68c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d68c:	b580      	push	{r7, lr}
   1d68e:	b08c      	sub	sp, #48	; 0x30
   1d690:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d692:	e07a      	b.n	1d78a <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1d694:	68bb      	ldr	r3, [r7, #8]
   1d696:	2b00      	cmp	r3, #0
   1d698:	da0f      	bge.n	1d6ba <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   1d69a:	f107 0308 	add.w	r3, r7, #8
   1d69e:	3304      	adds	r3, #4
   1d6a0:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   1d6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6a4:	2b00      	cmp	r3, #0
   1d6a6:	d100      	bne.n	1d6aa <prvProcessReceivedCommands+0x1e>
   1d6a8:	e7fe      	b.n	1d6a8 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1d6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d6ac:	681b      	ldr	r3, [r3, #0]
   1d6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d6b0:	6850      	ldr	r0, [r2, #4]
   1d6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1d6b4:	6892      	ldr	r2, [r2, #8]
   1d6b6:	4611      	mov	r1, r2
   1d6b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d6ba:	68bb      	ldr	r3, [r7, #8]
   1d6bc:	2b00      	cmp	r3, #0
   1d6be:	db64      	blt.n	1d78a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d6c0:	693b      	ldr	r3, [r7, #16]
   1d6c2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d6c4:	6a3b      	ldr	r3, [r7, #32]
   1d6c6:	695b      	ldr	r3, [r3, #20]
   1d6c8:	2b00      	cmp	r3, #0
   1d6ca:	d004      	beq.n	1d6d6 <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d6cc:	6a3b      	ldr	r3, [r7, #32]
   1d6ce:	3304      	adds	r3, #4
   1d6d0:	4618      	mov	r0, r3
   1d6d2:	f7fe fb25 	bl	1bd20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d6d6:	1d3b      	adds	r3, r7, #4
   1d6d8:	4618      	mov	r0, r3
   1d6da:	f7ff ff75 	bl	1d5c8 <prvSampleTimeNow>
   1d6de:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   1d6e0:	68bb      	ldr	r3, [r7, #8]
   1d6e2:	2b09      	cmp	r3, #9
   1d6e4:	d850      	bhi.n	1d788 <prvProcessReceivedCommands+0xfc>
   1d6e6:	a201      	add	r2, pc, #4	; (adr r2, 1d6ec <prvProcessReceivedCommands+0x60>)
   1d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d6ec:	0001d715 	.word	0x0001d715
   1d6f0:	0001d715 	.word	0x0001d715
   1d6f4:	0001d715 	.word	0x0001d715
   1d6f8:	0001d78b 	.word	0x0001d78b
   1d6fc:	0001d75d 	.word	0x0001d75d
   1d700:	0001d781 	.word	0x0001d781
   1d704:	0001d715 	.word	0x0001d715
   1d708:	0001d715 	.word	0x0001d715
   1d70c:	0001d78b 	.word	0x0001d78b
   1d710:	0001d75d 	.word	0x0001d75d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d714:	68fa      	ldr	r2, [r7, #12]
   1d716:	6a3b      	ldr	r3, [r7, #32]
   1d718:	699b      	ldr	r3, [r3, #24]
   1d71a:	18d1      	adds	r1, r2, r3
   1d71c:	68fb      	ldr	r3, [r7, #12]
   1d71e:	69fa      	ldr	r2, [r7, #28]
   1d720:	6a38      	ldr	r0, [r7, #32]
   1d722:	f7ff ff71 	bl	1d608 <prvInsertTimerInActiveList>
   1d726:	4603      	mov	r3, r0
   1d728:	2b00      	cmp	r3, #0
   1d72a:	d02e      	beq.n	1d78a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d72c:	6a3b      	ldr	r3, [r7, #32]
   1d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d730:	6a38      	ldr	r0, [r7, #32]
   1d732:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d734:	6a3b      	ldr	r3, [r7, #32]
   1d736:	69db      	ldr	r3, [r3, #28]
   1d738:	2b01      	cmp	r3, #1
   1d73a:	d126      	bne.n	1d78a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d73c:	68fa      	ldr	r2, [r7, #12]
   1d73e:	6a3b      	ldr	r3, [r7, #32]
   1d740:	699b      	ldr	r3, [r3, #24]
   1d742:	441a      	add	r2, r3
   1d744:	2300      	movs	r3, #0
   1d746:	9300      	str	r3, [sp, #0]
   1d748:	2300      	movs	r3, #0
   1d74a:	2100      	movs	r1, #0
   1d74c:	6a38      	ldr	r0, [r7, #32]
   1d74e:	f7ff fe3d 	bl	1d3cc <xTimerGenericCommand>
   1d752:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   1d754:	69bb      	ldr	r3, [r7, #24]
   1d756:	2b00      	cmp	r3, #0
   1d758:	d117      	bne.n	1d78a <prvProcessReceivedCommands+0xfe>
   1d75a:	e7fe      	b.n	1d75a <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d75c:	68fa      	ldr	r2, [r7, #12]
   1d75e:	6a3b      	ldr	r3, [r7, #32]
   1d760:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d762:	6a3b      	ldr	r3, [r7, #32]
   1d764:	699b      	ldr	r3, [r3, #24]
   1d766:	2b00      	cmp	r3, #0
   1d768:	d100      	bne.n	1d76c <prvProcessReceivedCommands+0xe0>
   1d76a:	e7fe      	b.n	1d76a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d76c:	6a3b      	ldr	r3, [r7, #32]
   1d76e:	699a      	ldr	r2, [r3, #24]
   1d770:	69fb      	ldr	r3, [r7, #28]
   1d772:	18d1      	adds	r1, r2, r3
   1d774:	69fb      	ldr	r3, [r7, #28]
   1d776:	69fa      	ldr	r2, [r7, #28]
   1d778:	6a38      	ldr	r0, [r7, #32]
   1d77a:	f7ff ff45 	bl	1d608 <prvInsertTimerInActiveList>
					break;
   1d77e:	e004      	b.n	1d78a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d780:	6a38      	ldr	r0, [r7, #32]
   1d782:	f001 fe01 	bl	1f388 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d786:	e000      	b.n	1d78a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
   1d788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d78a:	4b08      	ldr	r3, [pc, #32]	; (1d7ac <prvProcessReceivedCommands+0x120>)
   1d78c:	681b      	ldr	r3, [r3, #0]
   1d78e:	f107 0108 	add.w	r1, r7, #8
   1d792:	2200      	movs	r2, #0
   1d794:	4618      	mov	r0, r3
   1d796:	f7fe fced 	bl	1c174 <xQueueReceive>
   1d79a:	4603      	mov	r3, r0
   1d79c:	2b00      	cmp	r3, #0
   1d79e:	f47f af79 	bne.w	1d694 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d7a2:	bf00      	nop
   1d7a4:	3728      	adds	r7, #40	; 0x28
   1d7a6:	46bd      	mov	sp, r7
   1d7a8:	bd80      	pop	{r7, pc}
   1d7aa:	bf00      	nop
   1d7ac:	10005218 	.word	0x10005218

0001d7b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d7b0:	b580      	push	{r7, lr}
   1d7b2:	b088      	sub	sp, #32
   1d7b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d7b6:	e03b      	b.n	1d830 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d7b8:	4b27      	ldr	r3, [pc, #156]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d7ba:	681b      	ldr	r3, [r3, #0]
   1d7bc:	68db      	ldr	r3, [r3, #12]
   1d7be:	681b      	ldr	r3, [r3, #0]
   1d7c0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1d7c2:	4b25      	ldr	r3, [pc, #148]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d7c4:	681b      	ldr	r3, [r3, #0]
   1d7c6:	68db      	ldr	r3, [r3, #12]
   1d7c8:	68db      	ldr	r3, [r3, #12]
   1d7ca:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d7cc:	693b      	ldr	r3, [r7, #16]
   1d7ce:	3304      	adds	r3, #4
   1d7d0:	4618      	mov	r0, r3
   1d7d2:	f7fe faa5 	bl	1bd20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d7d6:	693b      	ldr	r3, [r7, #16]
   1d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d7da:	6938      	ldr	r0, [r7, #16]
   1d7dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d7de:	693b      	ldr	r3, [r7, #16]
   1d7e0:	69db      	ldr	r3, [r3, #28]
   1d7e2:	2b01      	cmp	r3, #1
   1d7e4:	d124      	bne.n	1d830 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d7e6:	693b      	ldr	r3, [r7, #16]
   1d7e8:	699a      	ldr	r2, [r3, #24]
   1d7ea:	697b      	ldr	r3, [r7, #20]
   1d7ec:	4413      	add	r3, r2
   1d7ee:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d7f0:	68fa      	ldr	r2, [r7, #12]
   1d7f2:	697b      	ldr	r3, [r7, #20]
   1d7f4:	429a      	cmp	r2, r3
   1d7f6:	d90e      	bls.n	1d816 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d7f8:	693b      	ldr	r3, [r7, #16]
   1d7fa:	68fa      	ldr	r2, [r7, #12]
   1d7fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d7fe:	693b      	ldr	r3, [r7, #16]
   1d800:	693a      	ldr	r2, [r7, #16]
   1d802:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d804:	4b14      	ldr	r3, [pc, #80]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d806:	681a      	ldr	r2, [r3, #0]
   1d808:	693b      	ldr	r3, [r7, #16]
   1d80a:	3304      	adds	r3, #4
   1d80c:	4619      	mov	r1, r3
   1d80e:	4610      	mov	r0, r2
   1d810:	f7fe fa4d 	bl	1bcae <vListInsert>
   1d814:	e00c      	b.n	1d830 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d816:	2300      	movs	r3, #0
   1d818:	9300      	str	r3, [sp, #0]
   1d81a:	2300      	movs	r3, #0
   1d81c:	697a      	ldr	r2, [r7, #20]
   1d81e:	2100      	movs	r1, #0
   1d820:	6938      	ldr	r0, [r7, #16]
   1d822:	f7ff fdd3 	bl	1d3cc <xTimerGenericCommand>
   1d826:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   1d828:	68bb      	ldr	r3, [r7, #8]
   1d82a:	2b00      	cmp	r3, #0
   1d82c:	d100      	bne.n	1d830 <prvSwitchTimerLists+0x80>
   1d82e:	e7fe      	b.n	1d82e <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d830:	4b09      	ldr	r3, [pc, #36]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d832:	681b      	ldr	r3, [r3, #0]
   1d834:	681b      	ldr	r3, [r3, #0]
   1d836:	2b00      	cmp	r3, #0
   1d838:	d1be      	bne.n	1d7b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d83a:	4b07      	ldr	r3, [pc, #28]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d83c:	681b      	ldr	r3, [r3, #0]
   1d83e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d840:	4b06      	ldr	r3, [pc, #24]	; (1d85c <prvSwitchTimerLists+0xac>)
   1d842:	681b      	ldr	r3, [r3, #0]
   1d844:	4a04      	ldr	r2, [pc, #16]	; (1d858 <prvSwitchTimerLists+0xa8>)
   1d846:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   1d848:	4a04      	ldr	r2, [pc, #16]	; (1d85c <prvSwitchTimerLists+0xac>)
   1d84a:	687b      	ldr	r3, [r7, #4]
   1d84c:	6013      	str	r3, [r2, #0]
}
   1d84e:	bf00      	nop
   1d850:	3718      	adds	r7, #24
   1d852:	46bd      	mov	sp, r7
   1d854:	bd80      	pop	{r7, pc}
   1d856:	bf00      	nop
   1d858:	10005210 	.word	0x10005210
   1d85c:	10005214 	.word	0x10005214

0001d860 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d860:	b580      	push	{r7, lr}
   1d862:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d864:	f7f5 ff20 	bl	136a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   1d868:	4b0d      	ldr	r3, [pc, #52]	; (1d8a0 <prvCheckForValidListAndQueue+0x40>)
   1d86a:	681b      	ldr	r3, [r3, #0]
   1d86c:	2b00      	cmp	r3, #0
   1d86e:	d113      	bne.n	1d898 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   1d870:	480c      	ldr	r0, [pc, #48]	; (1d8a4 <prvCheckForValidListAndQueue+0x44>)
   1d872:	f7fe f9cb 	bl	1bc0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1d876:	480c      	ldr	r0, [pc, #48]	; (1d8a8 <prvCheckForValidListAndQueue+0x48>)
   1d878:	f7fe f9c8 	bl	1bc0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1d87c:	4b0b      	ldr	r3, [pc, #44]	; (1d8ac <prvCheckForValidListAndQueue+0x4c>)
   1d87e:	4a09      	ldr	r2, [pc, #36]	; (1d8a4 <prvCheckForValidListAndQueue+0x44>)
   1d880:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d882:	4b0b      	ldr	r3, [pc, #44]	; (1d8b0 <prvCheckForValidListAndQueue+0x50>)
   1d884:	4a08      	ldr	r2, [pc, #32]	; (1d8a8 <prvCheckForValidListAndQueue+0x48>)
   1d886:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d888:	2200      	movs	r2, #0
   1d88a:	2110      	movs	r1, #16
   1d88c:	2005      	movs	r0, #5
   1d88e:	f7fe facf 	bl	1be30 <xQueueGenericCreate>
   1d892:	4602      	mov	r2, r0
   1d894:	4b02      	ldr	r3, [pc, #8]	; (1d8a0 <prvCheckForValidListAndQueue+0x40>)
   1d896:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d898:	f7f5 ff2c 	bl	136f4 <vPortExitCritical>
}
   1d89c:	bf00      	nop
   1d89e:	bd80      	pop	{r7, pc}
   1d8a0:	10005218 	.word	0x10005218
   1d8a4:	100051e8 	.word	0x100051e8
   1d8a8:	100051fc 	.word	0x100051fc
   1d8ac:	10005210 	.word	0x10005210
   1d8b0:	10005214 	.word	0x10005214

0001d8b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   1d8b4:	b580      	push	{r7, lr}
   1d8b6:	b08a      	sub	sp, #40	; 0x28
   1d8b8:	af00      	add	r7, sp, #0
   1d8ba:	60f8      	str	r0, [r7, #12]
   1d8bc:	60b9      	str	r1, [r7, #8]
   1d8be:	607a      	str	r2, [r7, #4]
   1d8c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1d8c2:	f06f 0301 	mvn.w	r3, #1
   1d8c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   1d8c8:	68fb      	ldr	r3, [r7, #12]
   1d8ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   1d8cc:	68bb      	ldr	r3, [r7, #8]
   1d8ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   1d8d0:	687b      	ldr	r3, [r7, #4]
   1d8d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d8d4:	4b06      	ldr	r3, [pc, #24]	; (1d8f0 <xTimerPendFunctionCallFromISR+0x3c>)
   1d8d6:	6818      	ldr	r0, [r3, #0]
   1d8d8:	f107 0114 	add.w	r1, r7, #20
   1d8dc:	2300      	movs	r3, #0
   1d8de:	683a      	ldr	r2, [r7, #0]
   1d8e0:	f7fe fbce 	bl	1c080 <xQueueGenericSendFromISR>
   1d8e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   1d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   1d8e8:	4618      	mov	r0, r3
   1d8ea:	3728      	adds	r7, #40	; 0x28
   1d8ec:	46bd      	mov	sp, r7
   1d8ee:	bd80      	pop	{r7, pc}
   1d8f0:	10005218 	.word	0x10005218

0001d8f4 <SvcBattAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattAddGroup(void)
{
   1d8f4:	b580      	push	{r7, lr}
   1d8f6:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcBattGroup);
   1d8f8:	4802      	ldr	r0, [pc, #8]	; (1d904 <SvcBattAddGroup+0x10>)
   1d8fa:	f7ef fff3 	bl	d8e4 <AttsAddGroup>
}
   1d8fe:	bf00      	nop
   1d900:	bd80      	pop	{r7, pc}
   1d902:	bf00      	nop
   1d904:	10002bbc 	.word	0x10002bbc

0001d908 <SvcBattCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1d908:	b480      	push	{r7}
   1d90a:	b083      	sub	sp, #12
   1d90c:	af00      	add	r7, sp, #0
   1d90e:	6078      	str	r0, [r7, #4]
   1d910:	6039      	str	r1, [r7, #0]
  svcBattGroup.readCback = readCback;
   1d912:	4a06      	ldr	r2, [pc, #24]	; (1d92c <SvcBattCbackRegister+0x24>)
   1d914:	687b      	ldr	r3, [r7, #4]
   1d916:	6093      	str	r3, [r2, #8]
  svcBattGroup.writeCback = writeCback;
   1d918:	4a04      	ldr	r2, [pc, #16]	; (1d92c <SvcBattCbackRegister+0x24>)
   1d91a:	683b      	ldr	r3, [r7, #0]
   1d91c:	60d3      	str	r3, [r2, #12]
}
   1d91e:	bf00      	nop
   1d920:	370c      	adds	r7, #12
   1d922:	46bd      	mov	sp, r7
   1d924:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d928:	4770      	bx	lr
   1d92a:	bf00      	nop
   1d92c:	10002bbc 	.word	0x10002bbc

0001d930 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1d930:	b580      	push	{r7, lr}
   1d932:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1d934:	4803      	ldr	r0, [pc, #12]	; (1d944 <SvcCoreAddGroup+0x14>)
   1d936:	f7ef ffd5 	bl	d8e4 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1d93a:	4803      	ldr	r0, [pc, #12]	; (1d948 <SvcCoreAddGroup+0x18>)
   1d93c:	f7ef ffd2 	bl	d8e4 <AttsAddGroup>
}
   1d940:	bf00      	nop
   1d942:	bd80      	pop	{r7, pc}
   1d944:	10002bd0 	.word	0x10002bd0
   1d948:	10002be4 	.word	0x10002be4

0001d94c <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1d94c:	b480      	push	{r7}
   1d94e:	b083      	sub	sp, #12
   1d950:	af00      	add	r7, sp, #0
   1d952:	4603      	mov	r3, r0
   1d954:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1d956:	4a04      	ldr	r2, [pc, #16]	; (1d968 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1d958:	79fb      	ldrb	r3, [r7, #7]
   1d95a:	7013      	strb	r3, [r2, #0]
}
   1d95c:	bf00      	nop
   1d95e:	370c      	adds	r7, #12
   1d960:	46bd      	mov	sp, r7
   1d962:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d966:	4770      	bx	lr
   1d968:	10005230 	.word	0x10005230

0001d96c <SvcDisAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcDisAddGroup(void)
{
   1d96c:	b580      	push	{r7, lr}
   1d96e:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcDisGroup);
   1d970:	4802      	ldr	r0, [pc, #8]	; (1d97c <SvcDisAddGroup+0x10>)
   1d972:	f7ef ffb7 	bl	d8e4 <AttsAddGroup>
}
   1d976:	bf00      	nop
   1d978:	bd80      	pop	{r7, pc}
   1d97a:	bf00      	nop
   1d97c:	10002c84 	.word	0x10002c84

0001d980 <SvcHrsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsAddGroup(void)
{
   1d980:	b580      	push	{r7, lr}
   1d982:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcHrsGroup);
   1d984:	4802      	ldr	r0, [pc, #8]	; (1d990 <SvcHrsAddGroup+0x10>)
   1d986:	f7ef ffad 	bl	d8e4 <AttsAddGroup>
}
   1d98a:	bf00      	nop
   1d98c:	bd80      	pop	{r7, pc}
   1d98e:	bf00      	nop
   1d990:	10002c9c 	.word	0x10002c9c

0001d994 <SvcHrsCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1d994:	b480      	push	{r7}
   1d996:	b083      	sub	sp, #12
   1d998:	af00      	add	r7, sp, #0
   1d99a:	6078      	str	r0, [r7, #4]
   1d99c:	6039      	str	r1, [r7, #0]
  svcHrsGroup.readCback = readCback;
   1d99e:	4a06      	ldr	r2, [pc, #24]	; (1d9b8 <SvcHrsCbackRegister+0x24>)
   1d9a0:	687b      	ldr	r3, [r7, #4]
   1d9a2:	6093      	str	r3, [r2, #8]
  svcHrsGroup.writeCback = writeCback;
   1d9a4:	4a04      	ldr	r2, [pc, #16]	; (1d9b8 <SvcHrsCbackRegister+0x24>)
   1d9a6:	683b      	ldr	r3, [r7, #0]
   1d9a8:	60d3      	str	r3, [r2, #12]
}
   1d9aa:	bf00      	nop
   1d9ac:	370c      	adds	r7, #12
   1d9ae:	46bd      	mov	sp, r7
   1d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d9b4:	4770      	bx	lr
   1d9b6:	bf00      	nop
   1d9b8:	10002c9c 	.word	0x10002c9c

0001d9bc <SvcRscsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcRscsAddGroup(void)
{
   1d9bc:	b580      	push	{r7, lr}
   1d9be:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcRscsGroup);
   1d9c0:	4802      	ldr	r0, [pc, #8]	; (1d9cc <SvcRscsAddGroup+0x10>)
   1d9c2:	f7ef ff8f 	bl	d8e4 <AttsAddGroup>
}
   1d9c6:	bf00      	nop
   1d9c8:	bd80      	pop	{r7, pc}
   1d9ca:	bf00      	nop
   1d9cc:	10002cb4 	.word	0x10002cb4

0001d9d0 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1d9d0:	b580      	push	{r7, lr}
   1d9d2:	b082      	sub	sp, #8
   1d9d4:	af00      	add	r7, sp, #0
   1d9d6:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1d9d8:	687b      	ldr	r3, [r7, #4]
   1d9da:	789b      	ldrb	r3, [r3, #2]
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d002      	beq.n	1d9e6 <appProcMsg+0x16>
   1d9e0:	2b01      	cmp	r3, #1
   1d9e2:	d003      	beq.n	1d9ec <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1d9e4:	e006      	b.n	1d9f4 <appProcMsg+0x24>
      appUiBtnPoll();
   1d9e6:	f7fc f9e7 	bl	19db8 <appUiBtnPoll>
      break;
   1d9ea:	e003      	b.n	1d9f4 <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   1d9ec:	6878      	ldr	r0, [r7, #4]
   1d9ee:	f7fc f9d9 	bl	19da4 <appUiTimerExpired>
      break;
   1d9f2:	bf00      	nop
  }
}
   1d9f4:	bf00      	nop
   1d9f6:	3708      	adds	r7, #8
   1d9f8:	46bd      	mov	sp, r7
   1d9fa:	bd80      	pop	{r7, pc}

0001d9fc <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1d9fc:	b480      	push	{r7}
   1d9fe:	b083      	sub	sp, #12
   1da00:	af00      	add	r7, sp, #0
   1da02:	4603      	mov	r3, r0
   1da04:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1da06:	79fb      	ldrb	r3, [r7, #7]
   1da08:	3b01      	subs	r3, #1
   1da0a:	4a05      	ldr	r2, [pc, #20]	; (1da20 <appCheckBonded+0x24>)
   1da0c:	015b      	lsls	r3, r3, #5
   1da0e:	4413      	add	r3, r2
   1da10:	3305      	adds	r3, #5
   1da12:	781b      	ldrb	r3, [r3, #0]
}
   1da14:	4618      	mov	r0, r3
   1da16:	370c      	adds	r7, #12
   1da18:	46bd      	mov	sp, r7
   1da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1da1e:	4770      	bx	lr
   1da20:	10009e7c 	.word	0x10009e7c

0001da24 <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   1da24:	b480      	push	{r7}
   1da26:	b083      	sub	sp, #12
   1da28:	af00      	add	r7, sp, #0
   1da2a:	4603      	mov	r3, r0
   1da2c:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   1da2e:	79fb      	ldrb	r3, [r7, #7]
   1da30:	3b01      	subs	r3, #1
   1da32:	4a05      	ldr	r2, [pc, #20]	; (1da48 <appCheckBondByLtk+0x24>)
   1da34:	015b      	lsls	r3, r3, #5
   1da36:	4413      	add	r3, r2
   1da38:	3306      	adds	r3, #6
   1da3a:	781b      	ldrb	r3, [r3, #0]
}
   1da3c:	4618      	mov	r0, r3
   1da3e:	370c      	adds	r7, #12
   1da40:	46bd      	mov	sp, r7
   1da42:	f85d 7b04 	ldr.w	r7, [sp], #4
   1da46:	4770      	bx	lr
   1da48:	10009e7c 	.word	0x10009e7c

0001da4c <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1da4c:	b580      	push	{r7, lr}
   1da4e:	b084      	sub	sp, #16
   1da50:	af00      	add	r7, sp, #0
   1da52:	4603      	mov	r3, r0
   1da54:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   1da56:	4b13      	ldr	r3, [pc, #76]	; (1daa4 <appNumConns+0x58>)
   1da58:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1da5a:	2308      	movs	r3, #8
   1da5c:	72fb      	strb	r3, [r7, #11]
   1da5e:	2300      	movs	r3, #0
   1da60:	72bb      	strb	r3, [r7, #10]
   1da62:	e016      	b.n	1da92 <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1da64:	68fb      	ldr	r3, [r7, #12]
   1da66:	791b      	ldrb	r3, [r3, #4]
   1da68:	2b00      	cmp	r3, #0
   1da6a:	d00c      	beq.n	1da86 <appNumConns+0x3a>
   1da6c:	68fb      	ldr	r3, [r7, #12]
   1da6e:	791b      	ldrb	r3, [r3, #4]
   1da70:	4618      	mov	r0, r3
   1da72:	f7f1 fed3 	bl	f81c <DmConnRole>
   1da76:	4603      	mov	r3, r0
   1da78:	461a      	mov	r2, r3
   1da7a:	79fb      	ldrb	r3, [r7, #7]
   1da7c:	4293      	cmp	r3, r2
   1da7e:	d102      	bne.n	1da86 <appNumConns+0x3a>
    {      
      j++;
   1da80:	7abb      	ldrb	r3, [r7, #10]
   1da82:	3301      	adds	r3, #1
   1da84:	72bb      	strb	r3, [r7, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1da86:	7afb      	ldrb	r3, [r7, #11]
   1da88:	3b01      	subs	r3, #1
   1da8a:	72fb      	strb	r3, [r7, #11]
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	3320      	adds	r3, #32
   1da90:	60fb      	str	r3, [r7, #12]
   1da92:	7afb      	ldrb	r3, [r7, #11]
   1da94:	2b00      	cmp	r3, #0
   1da96:	d1e5      	bne.n	1da64 <appNumConns+0x18>
    }
  }

  return j;
   1da98:	7abb      	ldrb	r3, [r7, #10]
}
   1da9a:	4618      	mov	r0, r3
   1da9c:	3710      	adds	r7, #16
   1da9e:	46bd      	mov	sp, r7
   1daa0:	bd80      	pop	{r7, pc}
   1daa2:	bf00      	nop
   1daa4:	10009e7c 	.word	0x10009e7c

0001daa8 <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1daa8:	b580      	push	{r7, lr}
   1daaa:	b082      	sub	sp, #8
   1daac:	af00      	add	r7, sp, #0
   1daae:	4603      	mov	r3, r0
   1dab0:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1dab2:	4a04      	ldr	r2, [pc, #16]	; (1dac4 <AppHandlerInit+0x1c>)
   1dab4:	79fb      	ldrb	r3, [r7, #7]
   1dab6:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1dab8:	f7fb fdb4 	bl	19624 <AppDbInit>
}
   1dabc:	bf00      	nop
   1dabe:	3708      	adds	r7, #8
   1dac0:	46bd      	mov	sp, r7
   1dac2:	bd80      	pop	{r7, pc}
   1dac4:	10009e68 	.word	0x10009e68

0001dac8 <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1dac8:	b580      	push	{r7, lr}
   1daca:	b082      	sub	sp, #8
   1dacc:	af00      	add	r7, sp, #0
   1dace:	4603      	mov	r3, r0
   1dad0:	6039      	str	r1, [r7, #0]
   1dad2:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1dad4:	683b      	ldr	r3, [r7, #0]
   1dad6:	2b00      	cmp	r3, #0
   1dad8:	d015      	beq.n	1db06 <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1dada:	683b      	ldr	r3, [r7, #0]
   1dadc:	789b      	ldrb	r3, [r3, #2]
   1dade:	2b1f      	cmp	r3, #31
   1dae0:	d904      	bls.n	1daec <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1dae2:	4b0e      	ldr	r3, [pc, #56]	; (1db1c <AppHandler+0x54>)
   1dae4:	685b      	ldr	r3, [r3, #4]
   1dae6:	6838      	ldr	r0, [r7, #0]
   1dae8:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1daea:	e013      	b.n	1db14 <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1daec:	683b      	ldr	r3, [r7, #0]
   1daee:	789b      	ldrb	r3, [r3, #2]
   1daf0:	2b0f      	cmp	r3, #15
   1daf2:	d904      	bls.n	1dafe <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   1daf4:	4b09      	ldr	r3, [pc, #36]	; (1db1c <AppHandler+0x54>)
   1daf6:	681b      	ldr	r3, [r3, #0]
   1daf8:	6838      	ldr	r0, [r7, #0]
   1dafa:	4798      	blx	r3
}
   1dafc:	e00a      	b.n	1db14 <AppHandler+0x4c>
      appProcMsg(pMsg);
   1dafe:	6838      	ldr	r0, [r7, #0]
   1db00:	f7ff ff66 	bl	1d9d0 <appProcMsg>
}
   1db04:	e006      	b.n	1db14 <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   1db06:	79fb      	ldrb	r3, [r7, #7]
   1db08:	f003 0310 	and.w	r3, r3, #16
   1db0c:	2b00      	cmp	r3, #0
   1db0e:	d001      	beq.n	1db14 <AppHandler+0x4c>
      AppUiBtnPressed();
   1db10:	f7fc f96a 	bl	19de8 <AppUiBtnPressed>
}
   1db14:	bf00      	nop
   1db16:	3708      	adds	r7, #8
   1db18:	46bd      	mov	sp, r7
   1db1a:	bd80      	pop	{r7, pc}
   1db1c:	10009e58 	.word	0x10009e58

0001db20 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1db20:	b580      	push	{r7, lr}
   1db22:	b084      	sub	sp, #16
   1db24:	af00      	add	r7, sp, #0
   1db26:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1db28:	687b      	ldr	r3, [r7, #4]
   1db2a:	795b      	ldrb	r3, [r3, #5]
   1db2c:	2b00      	cmp	r3, #0
   1db2e:	d028      	beq.n	1db82 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1db30:	f107 030c 	add.w	r3, r7, #12
   1db34:	2104      	movs	r1, #4
   1db36:	4618      	mov	r0, r3
   1db38:	f7fa ffb2 	bl	18aa0 <SecRand>
    passkey %= 1000000;
   1db3c:	68fa      	ldr	r2, [r7, #12]
   1db3e:	4b14      	ldr	r3, [pc, #80]	; (1db90 <AppHandlePasskey+0x70>)
   1db40:	fba3 1302 	umull	r1, r3, r3, r2
   1db44:	0c9b      	lsrs	r3, r3, #18
   1db46:	4913      	ldr	r1, [pc, #76]	; (1db94 <AppHandlePasskey+0x74>)
   1db48:	fb01 f303 	mul.w	r3, r1, r3
   1db4c:	1ad3      	subs	r3, r2, r3
   1db4e:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1db50:	68fb      	ldr	r3, [r7, #12]
   1db52:	b2db      	uxtb	r3, r3
   1db54:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1db56:	68fb      	ldr	r3, [r7, #12]
   1db58:	0a1b      	lsrs	r3, r3, #8
   1db5a:	b2db      	uxtb	r3, r3
   1db5c:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1db5e:	68fb      	ldr	r3, [r7, #12]
   1db60:	0c1b      	lsrs	r3, r3, #16
   1db62:	b2db      	uxtb	r3, r3
   1db64:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1db66:	687b      	ldr	r3, [r7, #4]
   1db68:	881b      	ldrh	r3, [r3, #0]
   1db6a:	b2db      	uxtb	r3, r3
   1db6c:	f107 0208 	add.w	r2, r7, #8
   1db70:	2103      	movs	r1, #3
   1db72:	4618      	mov	r0, r3
   1db74:	f7f2 fac6 	bl	10104 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1db78:	68fb      	ldr	r3, [r7, #12]
   1db7a:	4618      	mov	r0, r3
   1db7c:	f7fc f8f6 	bl	19d6c <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   1db80:	e002      	b.n	1db88 <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1db82:	200e      	movs	r0, #14
   1db84:	f7fc f85c 	bl	19c40 <AppUiAction>
}
   1db88:	bf00      	nop
   1db8a:	3710      	adds	r7, #16
   1db8c:	46bd      	mov	sp, r7
   1db8e:	bd80      	pop	{r7, pc}
   1db90:	431bde83 	.word	0x431bde83
   1db94:	000f4240 	.word	0x000f4240

0001db98 <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   1db98:	b580      	push	{r7, lr}
   1db9a:	b084      	sub	sp, #16
   1db9c:	af00      	add	r7, sp, #0
   1db9e:	6078      	str	r0, [r7, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   1dba0:	687b      	ldr	r3, [r7, #4]
   1dba2:	3304      	adds	r3, #4
   1dba4:	4618      	mov	r0, r3
   1dba6:	f7f2 fbf3 	bl	10390 <DmSecGetCompareValue>
   1dbaa:	60f8      	str	r0, [r7, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   1dbac:	68f8      	ldr	r0, [r7, #12]
   1dbae:	f7fc f8eb 	bl	19d88 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1dbb2:	687b      	ldr	r3, [r7, #4]
   1dbb4:	881b      	ldrh	r3, [r3, #0]
   1dbb6:	b2db      	uxtb	r3, r3
   1dbb8:	2101      	movs	r1, #1
   1dbba:	4618      	mov	r0, r3
   1dbbc:	f7f2 fbd4 	bl	10368 <DmSecCompareRsp>
}
   1dbc0:	bf00      	nop
   1dbc2:	3710      	adds	r7, #16
   1dbc4:	46bd      	mov	sp, r7
   1dbc6:	bd80      	pop	{r7, pc}

0001dbc8 <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1dbc8:	b580      	push	{r7, lr}
   1dbca:	b082      	sub	sp, #8
   1dbcc:	af00      	add	r7, sp, #0
   1dbce:	4603      	mov	r3, r0
   1dbd0:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1dbd2:	79fb      	ldrb	r3, [r7, #7]
   1dbd4:	2213      	movs	r2, #19
   1dbd6:	4619      	mov	r1, r3
   1dbd8:	2003      	movs	r0, #3
   1dbda:	f7f1 fc8d 	bl	f4f8 <DmConnClose>
}
   1dbde:	bf00      	nop
   1dbe0:	3708      	adds	r7, #8
   1dbe2:	46bd      	mov	sp, r7
   1dbe4:	bd80      	pop	{r7, pc}
	...

0001dbe8 <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   1dbe8:	b480      	push	{r7}
   1dbea:	b083      	sub	sp, #12
   1dbec:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   1dbee:	4b0e      	ldr	r3, [pc, #56]	; (1dc28 <AppConnIsOpen+0x40>)
   1dbf0:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1dbf2:	2308      	movs	r3, #8
   1dbf4:	70fb      	strb	r3, [r7, #3]
   1dbf6:	e00c      	b.n	1dc12 <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1dbf8:	687b      	ldr	r3, [r7, #4]
   1dbfa:	791b      	ldrb	r3, [r3, #4]
   1dbfc:	2b00      	cmp	r3, #0
   1dbfe:	d002      	beq.n	1dc06 <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   1dc00:	687b      	ldr	r3, [r7, #4]
   1dc02:	791b      	ldrb	r3, [r3, #4]
   1dc04:	e009      	b.n	1dc1a <AppConnIsOpen+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1dc06:	78fb      	ldrb	r3, [r7, #3]
   1dc08:	3b01      	subs	r3, #1
   1dc0a:	70fb      	strb	r3, [r7, #3]
   1dc0c:	687b      	ldr	r3, [r7, #4]
   1dc0e:	3320      	adds	r3, #32
   1dc10:	607b      	str	r3, [r7, #4]
   1dc12:	78fb      	ldrb	r3, [r7, #3]
   1dc14:	2b00      	cmp	r3, #0
   1dc16:	d1ef      	bne.n	1dbf8 <AppConnIsOpen+0x10>
    }
  }
  
  return DM_CONN_ID_NONE;
   1dc18:	2300      	movs	r3, #0
}
   1dc1a:	4618      	mov	r0, r3
   1dc1c:	370c      	adds	r7, #12
   1dc1e:	46bd      	mov	sp, r7
   1dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dc24:	4770      	bx	lr
   1dc26:	bf00      	nop
   1dc28:	10009e7c 	.word	0x10009e7c

0001dc2c <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1dc2c:	b480      	push	{r7}
   1dc2e:	b083      	sub	sp, #12
   1dc30:	af00      	add	r7, sp, #0
   1dc32:	4603      	mov	r3, r0
   1dc34:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1dc36:	79fb      	ldrb	r3, [r7, #7]
   1dc38:	3b01      	subs	r3, #1
   1dc3a:	4a05      	ldr	r2, [pc, #20]	; (1dc50 <AppDbGetHdl+0x24>)
   1dc3c:	015b      	lsls	r3, r3, #5
   1dc3e:	4413      	add	r3, r2
   1dc40:	681b      	ldr	r3, [r3, #0]
}
   1dc42:	4618      	mov	r0, r3
   1dc44:	370c      	adds	r7, #12
   1dc46:	46bd      	mov	sp, r7
   1dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
   1dc4c:	4770      	bx	lr
   1dc4e:	bf00      	nop
   1dc50:	10009e7c 	.word	0x10009e7c

0001dc54 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc56:	b087      	sub	sp, #28
   1dc58:	af02      	add	r7, sp, #8
   1dc5a:	6078      	str	r0, [r7, #4]
   1dc5c:	460b      	mov	r3, r1
   1dc5e:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1dc60:	78fb      	ldrb	r3, [r7, #3]
   1dc62:	3b01      	subs	r3, #1
   1dc64:	4a15      	ldr	r2, [pc, #84]	; (1dcbc <AppAddDevToResList+0x68>)
   1dc66:	015b      	lsls	r3, r3, #5
   1dc68:	4413      	add	r3, r2
   1dc6a:	681b      	ldr	r3, [r3, #0]
   1dc6c:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1dc6e:	f7f7 fce1 	bl	15634 <HciLlPrivacySupported>
   1dc72:	4603      	mov	r3, r0
   1dc74:	2b00      	cmp	r3, #0
   1dc76:	d01c      	beq.n	1dcb2 <AppAddDevToResList+0x5e>
   1dc78:	2200      	movs	r2, #0
   1dc7a:	2104      	movs	r1, #4
   1dc7c:	68f8      	ldr	r0, [r7, #12]
   1dc7e:	f7fb fe65 	bl	1994c <AppDbGetKey>
   1dc82:	60b8      	str	r0, [r7, #8]
   1dc84:	68bb      	ldr	r3, [r7, #8]
   1dc86:	2b00      	cmp	r3, #0
   1dc88:	d013      	beq.n	1dcb2 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1dc8a:	68bb      	ldr	r3, [r7, #8]
   1dc8c:	7d9c      	ldrb	r4, [r3, #22]
   1dc8e:	68bb      	ldr	r3, [r7, #8]
   1dc90:	f103 0510 	add.w	r5, r3, #16
   1dc94:	68be      	ldr	r6, [r7, #8]
   1dc96:	f7f2 fa7d 	bl	10194 <DmSecGetLocalIrk>
   1dc9a:	4602      	mov	r2, r0
   1dc9c:	687b      	ldr	r3, [r7, #4]
   1dc9e:	881b      	ldrh	r3, [r3, #0]
   1dca0:	9301      	str	r3, [sp, #4]
   1dca2:	2301      	movs	r3, #1
   1dca4:	9300      	str	r3, [sp, #0]
   1dca6:	4613      	mov	r3, r2
   1dca8:	4632      	mov	r2, r6
   1dcaa:	4629      	mov	r1, r5
   1dcac:	4620      	mov	r0, r4
   1dcae:	f7f2 f8b9 	bl	fe24 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1dcb2:	bf00      	nop
   1dcb4:	3714      	adds	r7, #20
   1dcb6:	46bd      	mov	sp, r7
   1dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dcba:	bf00      	nop
   1dcbc:	10009e7c 	.word	0x10009e7c

0001dcc0 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1dcc0:	b580      	push	{r7, lr}
   1dcc2:	b084      	sub	sp, #16
   1dcc4:	af00      	add	r7, sp, #0
   1dcc6:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1dcc8:	687b      	ldr	r3, [r7, #4]
   1dcca:	2b00      	cmp	r3, #0
   1dccc:	d020      	beq.n	1dd10 <AppUpdatePrivacyMode+0x50>
   1dcce:	6878      	ldr	r0, [r7, #4]
   1dcd0:	f7fb ff3f 	bl	19b52 <AppDbGetPeerAddedToRl>
   1dcd4:	4603      	mov	r3, r0
   1dcd6:	2b00      	cmp	r3, #0
   1dcd8:	d01a      	beq.n	1dd10 <AppUpdatePrivacyMode+0x50>
   1dcda:	6878      	ldr	r0, [r7, #4]
   1dcdc:	f7fb ff56 	bl	19b8c <AppDbGetPeerRpao>
   1dce0:	4603      	mov	r3, r0
   1dce2:	2b00      	cmp	r3, #0
   1dce4:	d114      	bne.n	1dd10 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1dce6:	2200      	movs	r2, #0
   1dce8:	2104      	movs	r1, #4
   1dcea:	6878      	ldr	r0, [r7, #4]
   1dcec:	f7fb fe2e 	bl	1994c <AppDbGetKey>
   1dcf0:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1dcf2:	68fb      	ldr	r3, [r7, #12]
   1dcf4:	2b00      	cmp	r3, #0
   1dcf6:	d00b      	beq.n	1dd10 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1dcf8:	68fb      	ldr	r3, [r7, #12]
   1dcfa:	7d98      	ldrb	r0, [r3, #22]
   1dcfc:	68fb      	ldr	r3, [r7, #12]
   1dcfe:	3310      	adds	r3, #16
   1dd00:	2201      	movs	r2, #1
   1dd02:	4619      	mov	r1, r3
   1dd04:	f7f2 f908 	bl	ff18 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1dd08:	2100      	movs	r1, #0
   1dd0a:	6878      	ldr	r0, [r7, #4]
   1dd0c:	f7fb ff2e 	bl	19b6c <AppDbSetPeerAddedToRl>
    }
  }
}
   1dd10:	bf00      	nop
   1dd12:	3710      	adds	r7, #16
   1dd14:	46bd      	mov	sp, r7
   1dd16:	bd80      	pop	{r7, pc}

0001dd18 <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   1dd18:	b580      	push	{r7, lr}
   1dd1a:	b084      	sub	sp, #16
   1dd1c:	af00      	add	r7, sp, #0
   1dd1e:	4603      	mov	r3, r0
   1dd20:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1dd22:	79fb      	ldrb	r3, [r7, #7]
   1dd24:	4618      	mov	r0, r3
   1dd26:	f7ff ff81 	bl	1dc2c <AppDbGetHdl>
   1dd2a:	60f8      	str	r0, [r7, #12]
   1dd2c:	68fb      	ldr	r3, [r7, #12]
   1dd2e:	2b00      	cmp	r3, #0
   1dd30:	d017      	beq.n	1dd62 <appServerSetSigningInfo+0x4a>
   1dd32:	2200      	movs	r2, #0
   1dd34:	2108      	movs	r1, #8
   1dd36:	68f8      	ldr	r0, [r7, #12]
   1dd38:	f7fb fe08 	bl	1994c <AppDbGetKey>
   1dd3c:	60b8      	str	r0, [r7, #8]
   1dd3e:	68bb      	ldr	r3, [r7, #8]
   1dd40:	2b00      	cmp	r3, #0
   1dd42:	d00e      	beq.n	1dd62 <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   1dd44:	68ba      	ldr	r2, [r7, #8]
   1dd46:	79fb      	ldrb	r3, [r7, #7]
   1dd48:	4611      	mov	r1, r2
   1dd4a:	4618      	mov	r0, r3
   1dd4c:	f7f0 fce4 	bl	e718 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1dd50:	68f8      	ldr	r0, [r7, #12]
   1dd52:	f7fb fee2 	bl	19b1a <AppDbGetPeerSignCounter>
   1dd56:	4602      	mov	r2, r0
   1dd58:	79fb      	ldrb	r3, [r7, #7]
   1dd5a:	4611      	mov	r1, r2
   1dd5c:	4618      	mov	r0, r3
   1dd5e:	f7f0 fce5 	bl	e72c <AttsSetSignCounter>
  }
}
   1dd62:	bf00      	nop
   1dd64:	3710      	adds	r7, #16
   1dd66:	46bd      	mov	sp, r7
   1dd68:	bd80      	pop	{r7, pc}

0001dd6a <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1dd6a:	b580      	push	{r7, lr}
   1dd6c:	b084      	sub	sp, #16
   1dd6e:	af00      	add	r7, sp, #0
   1dd70:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1dd72:	687b      	ldr	r3, [r7, #4]
   1dd74:	881b      	ldrh	r3, [r3, #0]
   1dd76:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1dd78:	687b      	ldr	r3, [r7, #4]
   1dd7a:	789b      	ldrb	r3, [r3, #2]
   1dd7c:	2b27      	cmp	r3, #39	; 0x27
   1dd7e:	d109      	bne.n	1dd94 <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   1dd80:	7bfb      	ldrb	r3, [r7, #15]
   1dd82:	2100      	movs	r1, #0
   1dd84:	4618      	mov	r0, r3
   1dd86:	f7ef fac9 	bl	d31c <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1dd8a:	7bfb      	ldrb	r3, [r7, #15]
   1dd8c:	4618      	mov	r0, r3
   1dd8e:	f7ff ffc3 	bl	1dd18 <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   1dd92:	e067      	b.n	1de64 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1dd94:	687b      	ldr	r3, [r7, #4]
   1dd96:	789b      	ldrb	r3, [r3, #2]
   1dd98:	2b2a      	cmp	r3, #42	; 0x2a
   1dd9a:	d129      	bne.n	1ddf0 <AppServerConnCback+0x86>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   1dd9c:	687b      	ldr	r3, [r7, #4]
   1dd9e:	791b      	ldrb	r3, [r3, #4]
   1dda0:	f003 0301 	and.w	r3, r3, #1
   1dda4:	2b00      	cmp	r3, #0
   1dda6:	bf14      	ite	ne
   1dda8:	2301      	movne	r3, #1
   1ddaa:	2300      	moveq	r3, #0
   1ddac:	b2db      	uxtb	r3, r3
   1ddae:	73bb      	strb	r3, [r7, #14]
    if (bonded && (appCheckBonded(connId) == FALSE))
   1ddb0:	7bbb      	ldrb	r3, [r7, #14]
   1ddb2:	2b00      	cmp	r3, #0
   1ddb4:	d017      	beq.n	1dde6 <AppServerConnCback+0x7c>
   1ddb6:	7bfb      	ldrb	r3, [r7, #15]
   1ddb8:	4618      	mov	r0, r3
   1ddba:	f7ff fe1f 	bl	1d9fc <appCheckBonded>
   1ddbe:	4603      	mov	r3, r0
   1ddc0:	2b00      	cmp	r3, #0
   1ddc2:	d110      	bne.n	1dde6 <AppServerConnCback+0x7c>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1ddc4:	7bfb      	ldrb	r3, [r7, #15]
   1ddc6:	4618      	mov	r0, r3
   1ddc8:	f7ff ff30 	bl	1dc2c <AppDbGetHdl>
   1ddcc:	60b8      	str	r0, [r7, #8]
   1ddce:	68bb      	ldr	r3, [r7, #8]
   1ddd0:	2b00      	cmp	r3, #0
   1ddd2:	d008      	beq.n	1dde6 <AppServerConnCback+0x7c>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1ddd4:	68b8      	ldr	r0, [r7, #8]
   1ddd6:	f7fb fe7f 	bl	19ad8 <AppDbGetCccTbl>
   1ddda:	4602      	mov	r2, r0
   1dddc:	7bfb      	ldrb	r3, [r7, #15]
   1ddde:	4611      	mov	r1, r2
   1dde0:	4618      	mov	r0, r3
   1dde2:	f7ef fa9b 	bl	d31c <AttsCccInitTable>
    appServerSetSigningInfo(connId);
   1dde6:	7bfb      	ldrb	r3, [r7, #15]
   1dde8:	4618      	mov	r0, r3
   1ddea:	f7ff ff95 	bl	1dd18 <appServerSetSigningInfo>
}
   1ddee:	e039      	b.n	1de64 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1ddf0:	687b      	ldr	r3, [r7, #4]
   1ddf2:	789b      	ldrb	r3, [r3, #2]
   1ddf4:	2b2c      	cmp	r3, #44	; 0x2c
   1ddf6:	d11c      	bne.n	1de32 <AppServerConnCback+0xc8>
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   1ddf8:	687b      	ldr	r3, [r7, #4]
   1ddfa:	791b      	ldrb	r3, [r3, #4]
   1ddfc:	2b00      	cmp	r3, #0
   1ddfe:	d031      	beq.n	1de64 <AppServerConnCback+0xfa>
   1de00:	7bfb      	ldrb	r3, [r7, #15]
   1de02:	4618      	mov	r0, r3
   1de04:	f7ff fe0e 	bl	1da24 <appCheckBondByLtk>
   1de08:	4603      	mov	r3, r0
   1de0a:	2b00      	cmp	r3, #0
   1de0c:	d02a      	beq.n	1de64 <AppServerConnCback+0xfa>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1de0e:	7bfb      	ldrb	r3, [r7, #15]
   1de10:	4618      	mov	r0, r3
   1de12:	f7ff ff0b 	bl	1dc2c <AppDbGetHdl>
   1de16:	60b8      	str	r0, [r7, #8]
   1de18:	68bb      	ldr	r3, [r7, #8]
   1de1a:	2b00      	cmp	r3, #0
   1de1c:	d022      	beq.n	1de64 <AppServerConnCback+0xfa>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1de1e:	68b8      	ldr	r0, [r7, #8]
   1de20:	f7fb fe5a 	bl	19ad8 <AppDbGetCccTbl>
   1de24:	4602      	mov	r2, r0
   1de26:	7bfb      	ldrb	r3, [r7, #15]
   1de28:	4611      	mov	r1, r2
   1de2a:	4618      	mov	r0, r3
   1de2c:	f7ef fa76 	bl	d31c <AttsCccInitTable>
}
   1de30:	e018      	b.n	1de64 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1de32:	687b      	ldr	r3, [r7, #4]
   1de34:	789b      	ldrb	r3, [r3, #2]
   1de36:	2b28      	cmp	r3, #40	; 0x28
   1de38:	d114      	bne.n	1de64 <AppServerConnCback+0xfa>
    AttsCccClearTable(connId);
   1de3a:	7bfb      	ldrb	r3, [r7, #15]
   1de3c:	4618      	mov	r0, r3
   1de3e:	f7ef faaf 	bl	d3a0 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1de42:	7bfb      	ldrb	r3, [r7, #15]
   1de44:	4618      	mov	r0, r3
   1de46:	f7ff fef1 	bl	1dc2c <AppDbGetHdl>
   1de4a:	60b8      	str	r0, [r7, #8]
   1de4c:	68bb      	ldr	r3, [r7, #8]
   1de4e:	2b00      	cmp	r3, #0
   1de50:	d008      	beq.n	1de64 <AppServerConnCback+0xfa>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1de52:	7bfb      	ldrb	r3, [r7, #15]
   1de54:	4618      	mov	r0, r3
   1de56:	f7f0 fc71 	bl	e73c <AttsGetSignCounter>
   1de5a:	4603      	mov	r3, r0
   1de5c:	4619      	mov	r1, r3
   1de5e:	68b8      	ldr	r0, [r7, #8]
   1de60:	f7fb fe68 	bl	19b34 <AppDbSetPeerSignCounter>
}
   1de64:	bf00      	nop
   1de66:	3710      	adds	r7, #16
   1de68:	46bd      	mov	sp, r7
   1de6a:	bd80      	pop	{r7, pc}

0001de6c <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   1de6c:	b480      	push	{r7}
   1de6e:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   1de70:	4b05      	ldr	r3, [pc, #20]	; (1de88 <appSlaveAdvModeInit+0x1c>)
   1de72:	2200      	movs	r2, #0
   1de74:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   1de76:	4b04      	ldr	r3, [pc, #16]	; (1de88 <appSlaveAdvModeInit+0x1c>)
   1de78:	2200      	movs	r2, #0
   1de7a:	645a      	str	r2, [r3, #68]	; 0x44
}
   1de7c:	bf00      	nop
   1de7e:	46bd      	mov	sp, r7
   1de80:	f85d 7b04 	ldr.w	r7, [sp], #4
   1de84:	4770      	bx	lr
   1de86:	bf00      	nop
   1de88:	10009f7c 	.word	0x10009f7c

0001de8c <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   1de8c:	b480      	push	{r7}
   1de8e:	b085      	sub	sp, #20
   1de90:	af00      	add	r7, sp, #0
   1de92:	4603      	mov	r3, r0
   1de94:	6039      	str	r1, [r7, #0]
   1de96:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1de98:	2300      	movs	r3, #0
   1de9a:	73fb      	strb	r3, [r7, #15]
   1de9c:	e022      	b.n	1dee4 <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1de9e:	2300      	movs	r3, #0
   1dea0:	73bb      	strb	r3, [r7, #14]
   1dea2:	e019      	b.n	1ded8 <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1dea4:	7bfb      	ldrb	r3, [r7, #15]
   1dea6:	683a      	ldr	r2, [r7, #0]
   1dea8:	4413      	add	r3, r2
   1deaa:	781b      	ldrb	r3, [r3, #0]
   1deac:	7bba      	ldrb	r2, [r7, #14]
   1deae:	429a      	cmp	r2, r3
   1deb0:	d10f      	bne.n	1ded2 <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1deb2:	7bbb      	ldrb	r3, [r7, #14]
   1deb4:	4a11      	ldr	r2, [pc, #68]	; (1defc <appSlaveConnectableAdv+0x70>)
   1deb6:	4413      	add	r3, r2
   1deb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                            &&
   1debc:	2b00      	cmp	r3, #0
   1debe:	d006      	beq.n	1dece <appSlaveConnectableAdv+0x42>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   1dec0:	7bbb      	ldrb	r3, [r7, #14]
   1dec2:	4a0e      	ldr	r2, [pc, #56]	; (1defc <appSlaveConnectableAdv+0x70>)
   1dec4:	4413      	add	r3, r2
   1dec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1deca:	2b05      	cmp	r3, #5
   1decc:	d101      	bne.n	1ded2 <appSlaveConnectableAdv+0x46>
      {
        return TRUE;
   1dece:	2301      	movs	r3, #1
   1ded0:	e00d      	b.n	1deee <appSlaveConnectableAdv+0x62>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1ded2:	7bbb      	ldrb	r3, [r7, #14]
   1ded4:	3301      	adds	r3, #1
   1ded6:	73bb      	strb	r3, [r7, #14]
   1ded8:	7bbb      	ldrb	r3, [r7, #14]
   1deda:	2b00      	cmp	r3, #0
   1dedc:	d0e2      	beq.n	1dea4 <appSlaveConnectableAdv+0x18>
  for (i = 0; i < numSets; i++)
   1dede:	7bfb      	ldrb	r3, [r7, #15]
   1dee0:	3301      	adds	r3, #1
   1dee2:	73fb      	strb	r3, [r7, #15]
   1dee4:	7bfa      	ldrb	r2, [r7, #15]
   1dee6:	79fb      	ldrb	r3, [r7, #7]
   1dee8:	429a      	cmp	r2, r3
   1deea:	d3d8      	bcc.n	1de9e <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   1deec:	2300      	movs	r3, #0
}
   1deee:	4618      	mov	r0, r3
   1def0:	3714      	adds	r7, #20
   1def2:	46bd      	mov	sp, r7
   1def4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1def8:	4770      	bx	lr
   1defa:	bf00      	nop
   1defc:	10009f7c 	.word	0x10009f7c

0001df00 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   1df00:	b480      	push	{r7}
   1df02:	b085      	sub	sp, #20
   1df04:	af00      	add	r7, sp, #0
   1df06:	4603      	mov	r3, r0
   1df08:	460a      	mov	r2, r1
   1df0a:	71fb      	strb	r3, [r7, #7]
   1df0c:	4613      	mov	r3, r2
   1df0e:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1df10:	79bb      	ldrb	r3, [r7, #6]
   1df12:	005b      	lsls	r3, r3, #1
   1df14:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1df16:	79bb      	ldrb	r3, [r7, #6]
   1df18:	005b      	lsls	r3, r3, #1
   1df1a:	b2db      	uxtb	r3, r3
   1df1c:	3301      	adds	r3, #1
   1df1e:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1df20:	79fa      	ldrb	r2, [r7, #7]
   1df22:	7bfb      	ldrb	r3, [r7, #15]
   1df24:	490d      	ldr	r1, [pc, #52]	; (1df5c <appSlaveForceAdvDataSync+0x5c>)
   1df26:	0092      	lsls	r2, r2, #2
   1df28:	4413      	add	r3, r2
   1df2a:	3310      	adds	r3, #16
   1df2c:	2200      	movs	r2, #0
   1df2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1df32:	79fa      	ldrb	r2, [r7, #7]
   1df34:	7bbb      	ldrb	r3, [r7, #14]
   1df36:	4909      	ldr	r1, [pc, #36]	; (1df5c <appSlaveForceAdvDataSync+0x5c>)
   1df38:	0092      	lsls	r2, r2, #2
   1df3a:	4413      	add	r3, r2
   1df3c:	3310      	adds	r3, #16
   1df3e:	2200      	movs	r2, #0
   1df40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1df44:	79fb      	ldrb	r3, [r7, #7]
   1df46:	4a05      	ldr	r2, [pc, #20]	; (1df5c <appSlaveForceAdvDataSync+0x5c>)
   1df48:	4413      	add	r3, r2
   1df4a:	2200      	movs	r2, #0
   1df4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1df50:	bf00      	nop
   1df52:	3714      	adds	r7, #20
   1df54:	46bd      	mov	sp, r7
   1df56:	f85d 7b04 	ldr.w	r7, [sp], #4
   1df5a:	4770      	bx	lr
   1df5c:	10009f7c 	.word	0x10009f7c

0001df60 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   1df60:	b5b0      	push	{r4, r5, r7, lr}
   1df62:	b088      	sub	sp, #32
   1df64:	af02      	add	r7, sp, #8
   1df66:	4603      	mov	r3, r0
   1df68:	460a      	mov	r2, r1
   1df6a:	71fb      	strb	r3, [r7, #7]
   1df6c:	4613      	mov	r3, r2
   1df6e:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   1df70:	2301      	movs	r3, #1
   1df72:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1df74:	79fa      	ldrb	r2, [r7, #7]
   1df76:	79bb      	ldrb	r3, [r7, #6]
   1df78:	493a      	ldr	r1, [pc, #232]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1df7a:	0092      	lsls	r2, r2, #2
   1df7c:	4413      	add	r3, r2
   1df7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1df82:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1df84:	79fa      	ldrb	r2, [r7, #7]
   1df86:	79bb      	ldrb	r3, [r7, #6]
   1df88:	4936      	ldr	r1, [pc, #216]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1df8a:	0092      	lsls	r2, r2, #2
   1df8c:	4413      	add	r3, r2
   1df8e:	3308      	adds	r3, #8
   1df90:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1df94:	79f9      	ldrb	r1, [r7, #7]
   1df96:	79bb      	ldrb	r3, [r7, #6]
   1df98:	4832      	ldr	r0, [pc, #200]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1df9a:	0089      	lsls	r1, r1, #2
   1df9c:	440b      	add	r3, r1
   1df9e:	3310      	adds	r3, #16
   1dfa0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1dfa4:	1ad3      	subs	r3, r2, r3
   1dfa6:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1dfa8:	79fb      	ldrb	r3, [r7, #7]
   1dfaa:	4a2e      	ldr	r2, [pc, #184]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1dfac:	3314      	adds	r3, #20
   1dfae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1dfb2:	8a7a      	ldrh	r2, [r7, #18]
   1dfb4:	429a      	cmp	r2, r3
   1dfb6:	d94e      	bls.n	1e056 <appSetAdvScanDataFrag+0xf6>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   1dfb8:	79fb      	ldrb	r3, [r7, #7]
   1dfba:	4a2a      	ldr	r2, [pc, #168]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1dfbc:	3314      	adds	r3, #20
   1dfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1dfc2:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1dfc4:	e047      	b.n	1e056 <appSetAdvScanDataFrag+0xf6>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1dfc6:	8a7b      	ldrh	r3, [r7, #18]
   1dfc8:	2bfb      	cmp	r3, #251	; 0xfb
   1dfca:	d909      	bls.n	1dfe0 <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1dfcc:	23fb      	movs	r3, #251	; 0xfb
   1dfce:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1dfd0:	7c7b      	ldrb	r3, [r7, #17]
   1dfd2:	2b00      	cmp	r3, #0
   1dfd4:	bf14      	ite	ne
   1dfd6:	2301      	movne	r3, #1
   1dfd8:	2300      	moveq	r3, #0
   1dfda:	b2db      	uxtb	r3, r3
   1dfdc:	75fb      	strb	r3, [r7, #23]
   1dfde:	e008      	b.n	1dff2 <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   1dfe0:	8a7b      	ldrh	r3, [r7, #18]
   1dfe2:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1dfe4:	7c7b      	ldrb	r3, [r7, #17]
   1dfe6:	2b00      	cmp	r3, #0
   1dfe8:	d001      	beq.n	1dfee <appSetAdvScanDataFrag+0x8e>
   1dfea:	2303      	movs	r3, #3
   1dfec:	e000      	b.n	1dff0 <appSetAdvScanDataFrag+0x90>
   1dfee:	2302      	movs	r3, #2
   1dff0:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1dff2:	79bb      	ldrb	r3, [r7, #6]
   1dff4:	f003 0301 	and.w	r3, r3, #1
   1dff8:	b2dc      	uxtb	r4, r3
   1dffa:	8abb      	ldrh	r3, [r7, #20]
   1dffc:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   1dffe:	79fa      	ldrb	r2, [r7, #7]
   1e000:	79bb      	ldrb	r3, [r7, #6]
   1e002:	4918      	ldr	r1, [pc, #96]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1e004:	0092      	lsls	r2, r2, #2
   1e006:	4413      	add	r3, r2
   1e008:	3310      	adds	r3, #16
   1e00a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1e00e:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1e010:	68fb      	ldr	r3, [r7, #12]
   1e012:	4413      	add	r3, r2
   1e014:	7df9      	ldrb	r1, [r7, #23]
   1e016:	79f8      	ldrb	r0, [r7, #7]
   1e018:	9300      	str	r3, [sp, #0]
   1e01a:	462b      	mov	r3, r5
   1e01c:	4622      	mov	r2, r4
   1e01e:	f7f0 fd75 	bl	eb0c <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1e022:	79fa      	ldrb	r2, [r7, #7]
   1e024:	79bb      	ldrb	r3, [r7, #6]
   1e026:	79f8      	ldrb	r0, [r7, #7]
   1e028:	79b9      	ldrb	r1, [r7, #6]
   1e02a:	4c0e      	ldr	r4, [pc, #56]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1e02c:	0080      	lsls	r0, r0, #2
   1e02e:	4401      	add	r1, r0
   1e030:	3110      	adds	r1, #16
   1e032:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   1e036:	8ab9      	ldrh	r1, [r7, #20]
   1e038:	4401      	add	r1, r0
   1e03a:	b288      	uxth	r0, r1
   1e03c:	4909      	ldr	r1, [pc, #36]	; (1e064 <appSetAdvScanDataFrag+0x104>)
   1e03e:	0092      	lsls	r2, r2, #2
   1e040:	4413      	add	r3, r2
   1e042:	3310      	adds	r3, #16
   1e044:	4602      	mov	r2, r0
   1e046:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1e04a:	8a7a      	ldrh	r2, [r7, #18]
   1e04c:	8abb      	ldrh	r3, [r7, #20]
   1e04e:	1ad3      	subs	r3, r2, r3
   1e050:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   1e052:	2300      	movs	r3, #0
   1e054:	747b      	strb	r3, [r7, #17]
  while (remainLen > 0)
   1e056:	8a7b      	ldrh	r3, [r7, #18]
   1e058:	2b00      	cmp	r3, #0
   1e05a:	d1b4      	bne.n	1dfc6 <appSetAdvScanDataFrag+0x66>
  }
}
   1e05c:	bf00      	nop
   1e05e:	3718      	adds	r7, #24
   1e060:	46bd      	mov	sp, r7
   1e062:	bdb0      	pop	{r4, r5, r7, pc}
   1e064:	10009f7c 	.word	0x10009f7c

0001e068 <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   1e068:	b580      	push	{r7, lr}
   1e06a:	b084      	sub	sp, #16
   1e06c:	af00      	add	r7, sp, #0
   1e06e:	4603      	mov	r3, r0
   1e070:	460a      	mov	r2, r1
   1e072:	71fb      	strb	r3, [r7, #7]
   1e074:	4613      	mov	r3, r2
   1e076:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1e078:	79bb      	ldrb	r3, [r7, #6]
   1e07a:	005b      	lsls	r3, r3, #1
   1e07c:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1e07e:	79bb      	ldrb	r3, [r7, #6]
   1e080:	005b      	lsls	r3, r3, #1
   1e082:	b2db      	uxtb	r3, r3
   1e084:	3301      	adds	r3, #1
   1e086:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1e088:	79fa      	ldrb	r2, [r7, #7]
   1e08a:	7bfb      	ldrb	r3, [r7, #15]
   1e08c:	492d      	ldr	r1, [pc, #180]	; (1e144 <appSetAdvScanData+0xdc>)
   1e08e:	0092      	lsls	r2, r2, #2
   1e090:	4413      	add	r3, r2
   1e092:	3310      	adds	r3, #16
   1e094:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1e098:	79f9      	ldrb	r1, [r7, #7]
   1e09a:	7bfb      	ldrb	r3, [r7, #15]
   1e09c:	4829      	ldr	r0, [pc, #164]	; (1e144 <appSetAdvScanData+0xdc>)
   1e09e:	0089      	lsls	r1, r1, #2
   1e0a0:	440b      	add	r3, r1
   1e0a2:	3308      	adds	r3, #8
   1e0a4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1e0a8:	429a      	cmp	r2, r3
   1e0aa:	d205      	bcs.n	1e0b8 <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   1e0ac:	7bfa      	ldrb	r2, [r7, #15]
   1e0ae:	79fb      	ldrb	r3, [r7, #7]
   1e0b0:	4611      	mov	r1, r2
   1e0b2:	4618      	mov	r0, r3
   1e0b4:	f7ff ff54 	bl	1df60 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1e0b8:	79fa      	ldrb	r2, [r7, #7]
   1e0ba:	7bbb      	ldrb	r3, [r7, #14]
   1e0bc:	4921      	ldr	r1, [pc, #132]	; (1e144 <appSetAdvScanData+0xdc>)
   1e0be:	0092      	lsls	r2, r2, #2
   1e0c0:	4413      	add	r3, r2
   1e0c2:	3310      	adds	r3, #16
   1e0c4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1e0c8:	79f9      	ldrb	r1, [r7, #7]
   1e0ca:	7bbb      	ldrb	r3, [r7, #14]
   1e0cc:	481d      	ldr	r0, [pc, #116]	; (1e144 <appSetAdvScanData+0xdc>)
   1e0ce:	0089      	lsls	r1, r1, #2
   1e0d0:	440b      	add	r3, r1
   1e0d2:	3308      	adds	r3, #8
   1e0d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1e0d8:	429a      	cmp	r2, r3
   1e0da:	d205      	bcs.n	1e0e8 <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1e0dc:	7bba      	ldrb	r2, [r7, #14]
   1e0de:	79fb      	ldrb	r3, [r7, #7]
   1e0e0:	4611      	mov	r1, r2
   1e0e2:	4618      	mov	r0, r3
   1e0e4:	f7ff ff3c 	bl	1df60 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e0e8:	79fa      	ldrb	r2, [r7, #7]
   1e0ea:	7bfb      	ldrb	r3, [r7, #15]
   1e0ec:	4915      	ldr	r1, [pc, #84]	; (1e144 <appSetAdvScanData+0xdc>)
   1e0ee:	0092      	lsls	r2, r2, #2
   1e0f0:	4413      	add	r3, r2
   1e0f2:	3310      	adds	r3, #16
   1e0f4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1e0f8:	79f9      	ldrb	r1, [r7, #7]
   1e0fa:	7bfb      	ldrb	r3, [r7, #15]
   1e0fc:	4811      	ldr	r0, [pc, #68]	; (1e144 <appSetAdvScanData+0xdc>)
   1e0fe:	0089      	lsls	r1, r1, #2
   1e100:	440b      	add	r3, r1
   1e102:	3308      	adds	r3, #8
   1e104:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1e108:	429a      	cmp	r2, r3
   1e10a:	d317      	bcc.n	1e13c <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1e10c:	79fa      	ldrb	r2, [r7, #7]
   1e10e:	7bbb      	ldrb	r3, [r7, #14]
   1e110:	490c      	ldr	r1, [pc, #48]	; (1e144 <appSetAdvScanData+0xdc>)
   1e112:	0092      	lsls	r2, r2, #2
   1e114:	4413      	add	r3, r2
   1e116:	3310      	adds	r3, #16
   1e118:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1e11c:	79f9      	ldrb	r1, [r7, #7]
   1e11e:	7bbb      	ldrb	r3, [r7, #14]
   1e120:	4808      	ldr	r0, [pc, #32]	; (1e144 <appSetAdvScanData+0xdc>)
   1e122:	0089      	lsls	r1, r1, #2
   1e124:	440b      	add	r3, r1
   1e126:	3308      	adds	r3, #8
   1e128:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1e12c:	429a      	cmp	r2, r3
   1e12e:	d305      	bcc.n	1e13c <appSetAdvScanData+0xd4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1e130:	79fb      	ldrb	r3, [r7, #7]
   1e132:	4a04      	ldr	r2, [pc, #16]	; (1e144 <appSetAdvScanData+0xdc>)
   1e134:	4413      	add	r3, r2
   1e136:	2201      	movs	r2, #1
   1e138:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1e13c:	bf00      	nop
   1e13e:	3710      	adds	r7, #16
   1e140:	46bd      	mov	sp, r7
   1e142:	bd80      	pop	{r7, pc}
   1e144:	10009f7c 	.word	0x10009f7c

0001e148 <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   1e148:	b580      	push	{r7, lr}
   1e14a:	b084      	sub	sp, #16
   1e14c:	af00      	add	r7, sp, #0
   1e14e:	4603      	mov	r3, r0
   1e150:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1e152:	79fb      	ldrb	r3, [r7, #7]
   1e154:	3b01      	subs	r3, #1
   1e156:	015b      	lsls	r3, r3, #5
   1e158:	4a0d      	ldr	r2, [pc, #52]	; (1e190 <appConnUpdateTimerStart+0x48>)
   1e15a:	4413      	add	r3, r2
   1e15c:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   1e15e:	4b0d      	ldr	r3, [pc, #52]	; (1e194 <appConnUpdateTimerStart+0x4c>)
   1e160:	781a      	ldrb	r2, [r3, #0]
   1e162:	68fb      	ldr	r3, [r7, #12]
   1e164:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1e166:	68fb      	ldr	r3, [r7, #12]
   1e168:	2210      	movs	r2, #16
   1e16a:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   1e16c:	79fb      	ldrb	r3, [r7, #7]
   1e16e:	b29a      	uxth	r2, r3
   1e170:	68fb      	ldr	r3, [r7, #12]
   1e172:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1e174:	68fb      	ldr	r3, [r7, #12]
   1e176:	f103 0210 	add.w	r2, r3, #16
   1e17a:	4b07      	ldr	r3, [pc, #28]	; (1e198 <appConnUpdateTimerStart+0x50>)
   1e17c:	681b      	ldr	r3, [r3, #0]
   1e17e:	681b      	ldr	r3, [r3, #0]
   1e180:	4619      	mov	r1, r3
   1e182:	4610      	mov	r0, r2
   1e184:	f7fc fb78 	bl	1a878 <WsfTimerStartMs>
}
   1e188:	bf00      	nop
   1e18a:	3710      	adds	r7, #16
   1e18c:	46bd      	mov	sp, r7
   1e18e:	bd80      	pop	{r7, pc}
   1e190:	10009e7c 	.word	0x10009e7c
   1e194:	10009e68 	.word	0x10009e68
   1e198:	10009e50 	.word	0x10009e50

0001e19c <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   1e19c:	b580      	push	{r7, lr}
   1e19e:	b082      	sub	sp, #8
   1e1a0:	af00      	add	r7, sp, #0
   1e1a2:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   1e1a4:	4b06      	ldr	r3, [pc, #24]	; (1e1c0 <appConnUpdateTimerStop+0x24>)
   1e1a6:	681b      	ldr	r3, [r3, #0]
   1e1a8:	681b      	ldr	r3, [r3, #0]
   1e1aa:	2b00      	cmp	r3, #0
   1e1ac:	d004      	beq.n	1e1b8 <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   1e1ae:	687b      	ldr	r3, [r7, #4]
   1e1b0:	3310      	adds	r3, #16
   1e1b2:	4618      	mov	r0, r3
   1e1b4:	f7fc fb74 	bl	1a8a0 <WsfTimerStop>
  }  
}
   1e1b8:	bf00      	nop
   1e1ba:	3708      	adds	r7, #8
   1e1bc:	46bd      	mov	sp, r7
   1e1be:	bd80      	pop	{r7, pc}
   1e1c0:	10009e50 	.word	0x10009e50

0001e1c4 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   1e1c4:	b580      	push	{r7, lr}
   1e1c6:	b084      	sub	sp, #16
   1e1c8:	af00      	add	r7, sp, #0
   1e1ca:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   1e1cc:	4b16      	ldr	r3, [pc, #88]	; (1e228 <appSlaveResolveAddr+0x64>)
   1e1ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e1d2:	2b00      	cmp	r3, #0
   1e1d4:	d124      	bne.n	1e220 <appSlaveResolveAddr+0x5c>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1e1d6:	2000      	movs	r0, #0
   1e1d8:	f7fb fa7e 	bl	196d8 <AppDbGetNextRecord>
   1e1dc:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1e1de:	68fb      	ldr	r3, [r7, #12]
   1e1e0:	2b00      	cmp	r3, #0
   1e1e2:	d01e      	beq.n	1e222 <appSlaveResolveAddr+0x5e>
   1e1e4:	2200      	movs	r2, #0
   1e1e6:	2104      	movs	r1, #4
   1e1e8:	68f8      	ldr	r0, [r7, #12]
   1e1ea:	f7fb fbaf 	bl	1994c <AppDbGetKey>
   1e1ee:	60b8      	str	r0, [r7, #8]
   1e1f0:	68bb      	ldr	r3, [r7, #8]
   1e1f2:	2b00      	cmp	r3, #0
   1e1f4:	d015      	beq.n	1e222 <appSlaveResolveAddr+0x5e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1e1f6:	687b      	ldr	r3, [r7, #4]
   1e1f8:	f103 000a 	add.w	r0, r3, #10
   1e1fc:	68b9      	ldr	r1, [r7, #8]
   1e1fe:	687b      	ldr	r3, [r7, #4]
   1e200:	881b      	ldrh	r3, [r3, #0]
   1e202:	461a      	mov	r2, r3
   1e204:	f7f1 fdee 	bl	fde4 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   1e208:	4a07      	ldr	r2, [pc, #28]	; (1e228 <appSlaveResolveAddr+0x64>)
   1e20a:	68fb      	ldr	r3, [r7, #12]
   1e20c:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   1e20e:	4b06      	ldr	r3, [pc, #24]	; (1e228 <appSlaveResolveAddr+0x64>)
   1e210:	2201      	movs	r2, #1
   1e212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   1e216:	4b04      	ldr	r3, [pc, #16]	; (1e228 <appSlaveResolveAddr+0x64>)
   1e218:	2200      	movs	r2, #0
   1e21a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1e21e:	e000      	b.n	1e222 <appSlaveResolveAddr+0x5e>
    return;
   1e220:	bf00      	nop
  }
}
   1e222:	3710      	adds	r7, #16
   1e224:	46bd      	mov	sp, r7
   1e226:	bd80      	pop	{r7, pc}
   1e228:	10009f7c 	.word	0x10009f7c

0001e22c <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   1e22c:	b580      	push	{r7, lr}
   1e22e:	b084      	sub	sp, #16
   1e230:	af00      	add	r7, sp, #0
   1e232:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   1e234:	2300      	movs	r3, #0
   1e236:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e238:	687b      	ldr	r3, [r7, #4]
   1e23a:	681b      	ldr	r3, [r3, #0]
   1e23c:	2b00      	cmp	r3, #0
   1e23e:	d008      	beq.n	1e252 <appSecRspLtk+0x26>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1e240:	687b      	ldr	r3, [r7, #4]
   1e242:	681b      	ldr	r3, [r3, #0]
   1e244:	f107 020b 	add.w	r2, r7, #11
   1e248:	2101      	movs	r1, #1
   1e24a:	4618      	mov	r0, r3
   1e24c:	f7fb fb7e 	bl	1994c <AppDbGetKey>
   1e250:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   1e252:	68fb      	ldr	r3, [r7, #12]
   1e254:	2b00      	cmp	r3, #0
   1e256:	d011      	beq.n	1e27c <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   1e258:	687b      	ldr	r3, [r7, #4]
   1e25a:	795b      	ldrb	r3, [r3, #5]
   1e25c:	2b00      	cmp	r3, #0
   1e25e:	bf0c      	ite	eq
   1e260:	2301      	moveq	r3, #1
   1e262:	2300      	movne	r3, #0
   1e264:	b2db      	uxtb	r3, r3
   1e266:	461a      	mov	r2, r3
   1e268:	687b      	ldr	r3, [r7, #4]
   1e26a:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1e26c:	687b      	ldr	r3, [r7, #4]
   1e26e:	7918      	ldrb	r0, [r3, #4]
   1e270:	7afa      	ldrb	r2, [r7, #11]
   1e272:	68fb      	ldr	r3, [r7, #12]
   1e274:	2101      	movs	r1, #1
   1e276:	f7f2 f8d4 	bl	10422 <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   1e27a:	e009      	b.n	1e290 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   1e27c:	687b      	ldr	r3, [r7, #4]
   1e27e:	2200      	movs	r2, #0
   1e280:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1e282:	687b      	ldr	r3, [r7, #4]
   1e284:	7918      	ldrb	r0, [r3, #4]
   1e286:	2300      	movs	r3, #0
   1e288:	2200      	movs	r2, #0
   1e28a:	2100      	movs	r1, #0
   1e28c:	f7f2 f8c9 	bl	10422 <DmSecLtkRsp>
}
   1e290:	bf00      	nop
   1e292:	3710      	adds	r7, #16
   1e294:	46bd      	mov	sp, r7
   1e296:	bd80      	pop	{r7, pc}

0001e298 <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e298:	b580      	push	{r7, lr}
   1e29a:	b082      	sub	sp, #8
   1e29c:	af00      	add	r7, sp, #0
   1e29e:	6078      	str	r0, [r7, #4]
   1e2a0:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   1e2a2:	6839      	ldr	r1, [r7, #0]
   1e2a4:	6878      	ldr	r0, [r7, #4]
   1e2a6:	f000 f83f 	bl	1e328 <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   1e2aa:	4b06      	ldr	r3, [pc, #24]	; (1e2c4 <appSlaveConnOpen+0x2c>)
   1e2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e2ae:	2b00      	cmp	r3, #0
   1e2b0:	d003      	beq.n	1e2ba <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   1e2b2:	4b04      	ldr	r3, [pc, #16]	; (1e2c4 <appSlaveConnOpen+0x2c>)
   1e2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e2b6:	6878      	ldr	r0, [r7, #4]
   1e2b8:	4798      	blx	r3
  }
}
   1e2ba:	bf00      	nop
   1e2bc:	3708      	adds	r7, #8
   1e2be:	46bd      	mov	sp, r7
   1e2c0:	bd80      	pop	{r7, pc}
   1e2c2:	bf00      	nop
   1e2c4:	10009f7c 	.word	0x10009f7c

0001e2c8 <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e2c8:	b580      	push	{r7, lr}
   1e2ca:	b084      	sub	sp, #16
   1e2cc:	af00      	add	r7, sp, #0
   1e2ce:	6078      	str	r0, [r7, #4]
   1e2d0:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1e2d2:	683b      	ldr	r3, [r7, #0]
   1e2d4:	681b      	ldr	r3, [r3, #0]
   1e2d6:	4618      	mov	r0, r3
   1e2d8:	f7ff fcf2 	bl	1dcc0 <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   1e2dc:	687b      	ldr	r3, [r7, #4]
   1e2de:	78db      	ldrb	r3, [r3, #3]
   1e2e0:	2b3c      	cmp	r3, #60	; 0x3c
   1e2e2:	d10f      	bne.n	1e304 <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1e2e4:	2300      	movs	r3, #0
   1e2e6:	73fb      	strb	r3, [r7, #15]
   1e2e8:	e008      	b.n	1e2fc <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1e2ea:	7bfb      	ldrb	r3, [r7, #15]
   1e2ec:	4a0d      	ldr	r2, [pc, #52]	; (1e324 <appSlaveConnClose+0x5c>)
   1e2ee:	4413      	add	r3, r2
   1e2f0:	2203      	movs	r2, #3
   1e2f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1e2f6:	7bfb      	ldrb	r3, [r7, #15]
   1e2f8:	3301      	adds	r3, #1
   1e2fa:	73fb      	strb	r3, [r7, #15]
   1e2fc:	7bfb      	ldrb	r3, [r7, #15]
   1e2fe:	2b00      	cmp	r3, #0
   1e300:	d0f3      	beq.n	1e2ea <appSlaveConnClose+0x22>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
    }
  }
}
   1e302:	e00b      	b.n	1e31c <appSlaveConnClose+0x54>
    appSlaveProcConnClose(pMsg, pCb);
   1e304:	6839      	ldr	r1, [r7, #0]
   1e306:	6878      	ldr	r0, [r7, #4]
   1e308:	f000 f84a 	bl	1e3a0 <appSlaveProcConnClose>
    if (appSlaveCb.advRestartCback != NULL)
   1e30c:	4b05      	ldr	r3, [pc, #20]	; (1e324 <appSlaveConnClose+0x5c>)
   1e30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e310:	2b00      	cmp	r3, #0
   1e312:	d003      	beq.n	1e31c <appSlaveConnClose+0x54>
      (*appSlaveCb.advRestartCback)(pMsg);
   1e314:	4b03      	ldr	r3, [pc, #12]	; (1e324 <appSlaveConnClose+0x5c>)
   1e316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e318:	6878      	ldr	r0, [r7, #4]
   1e31a:	4798      	blx	r3
}
   1e31c:	bf00      	nop
   1e31e:	3710      	adds	r7, #16
   1e320:	46bd      	mov	sp, r7
   1e322:	bd80      	pop	{r7, pc}
   1e324:	10009f7c 	.word	0x10009f7c

0001e328 <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   1e328:	b580      	push	{r7, lr}
   1e32a:	b082      	sub	sp, #8
   1e32c:	af00      	add	r7, sp, #0
   1e32e:	6078      	str	r0, [r7, #4]
   1e330:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1e332:	687b      	ldr	r3, [r7, #4]
   1e334:	881b      	ldrh	r3, [r3, #0]
   1e336:	b2da      	uxtb	r2, r3
   1e338:	683b      	ldr	r3, [r7, #0]
   1e33a:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1e33c:	4b17      	ldr	r3, [pc, #92]	; (1e39c <appSlaveProcConnOpen+0x74>)
   1e33e:	681b      	ldr	r3, [r3, #0]
   1e340:	681b      	ldr	r3, [r3, #0]
   1e342:	2b00      	cmp	r3, #0
   1e344:	d026      	beq.n	1e394 <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1e346:	687b      	ldr	r3, [r7, #4]
   1e348:	8a1a      	ldrh	r2, [r3, #16]
   1e34a:	4b14      	ldr	r3, [pc, #80]	; (1e39c <appSlaveProcConnOpen+0x74>)
   1e34c:	681b      	ldr	r3, [r3, #0]
   1e34e:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1e350:	429a      	cmp	r2, r3
   1e352:	d314      	bcc.n	1e37e <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1e354:	687b      	ldr	r3, [r7, #4]
   1e356:	8a1a      	ldrh	r2, [r3, #16]
   1e358:	4b10      	ldr	r3, [pc, #64]	; (1e39c <appSlaveProcConnOpen+0x74>)
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1e35e:	429a      	cmp	r2, r3
   1e360:	d80d      	bhi.n	1e37e <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1e362:	687b      	ldr	r3, [r7, #4]
   1e364:	8a5a      	ldrh	r2, [r3, #18]
   1e366:	4b0d      	ldr	r3, [pc, #52]	; (1e39c <appSlaveProcConnOpen+0x74>)
   1e368:	681b      	ldr	r3, [r3, #0]
   1e36a:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1e36c:	429a      	cmp	r2, r3
   1e36e:	d106      	bne.n	1e37e <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   1e370:	687b      	ldr	r3, [r7, #4]
   1e372:	8a9a      	ldrh	r2, [r3, #20]
   1e374:	4b09      	ldr	r3, [pc, #36]	; (1e39c <appSlaveProcConnOpen+0x74>)
   1e376:	681b      	ldr	r3, [r3, #0]
   1e378:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1e37a:	429a      	cmp	r2, r3
   1e37c:	d00a      	beq.n	1e394 <appSlaveProcConnOpen+0x6c>
  {
    pCb->connWasIdle = FALSE;
   1e37e:	683b      	ldr	r3, [r7, #0]
   1e380:	2200      	movs	r2, #0
   1e382:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   1e384:	683b      	ldr	r3, [r7, #0]
   1e386:	2200      	movs	r2, #0
   1e388:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   1e38a:	683b      	ldr	r3, [r7, #0]
   1e38c:	791b      	ldrb	r3, [r3, #4]
   1e38e:	4618      	mov	r0, r3
   1e390:	f7ff feda 	bl	1e148 <appConnUpdateTimerStart>
  }
}
   1e394:	bf00      	nop
   1e396:	3708      	adds	r7, #8
   1e398:	46bd      	mov	sp, r7
   1e39a:	bd80      	pop	{r7, pc}
   1e39c:	10009e50 	.word	0x10009e50

0001e3a0 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e3a0:	b580      	push	{r7, lr}
   1e3a2:	b084      	sub	sp, #16
   1e3a4:	af00      	add	r7, sp, #0
   1e3a6:	6078      	str	r0, [r7, #4]
   1e3a8:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   1e3aa:	6838      	ldr	r0, [r7, #0]
   1e3ac:	f7ff fef6 	bl	1e19c <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1e3b0:	683b      	ldr	r3, [r7, #0]
   1e3b2:	2200      	movs	r2, #0
   1e3b4:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   1e3b6:	683b      	ldr	r3, [r7, #0]
   1e3b8:	2200      	movs	r2, #0
   1e3ba:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   1e3bc:	4b10      	ldr	r3, [pc, #64]	; (1e400 <appSlaveProcConnClose+0x60>)
   1e3be:	2200      	movs	r2, #0
   1e3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   1e3c4:	683b      	ldr	r3, [r7, #0]
   1e3c6:	7a5b      	ldrb	r3, [r3, #9]
   1e3c8:	2b00      	cmp	r3, #0
   1e3ca:	d014      	beq.n	1e3f6 <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   1e3cc:	683b      	ldr	r3, [r7, #0]
   1e3ce:	2200      	movs	r2, #0
   1e3d0:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1e3d2:	4b0b      	ldr	r3, [pc, #44]	; (1e400 <appSlaveProcConnClose+0x60>)
   1e3d4:	2200      	movs	r2, #0
   1e3d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1e3da:	2300      	movs	r3, #0
   1e3dc:	73fb      	strb	r3, [r7, #15]
   1e3de:	e007      	b.n	1e3f0 <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   1e3e0:	7bfb      	ldrb	r3, [r7, #15]
   1e3e2:	2100      	movs	r1, #0
   1e3e4:	4618      	mov	r0, r3
   1e3e6:	f7ff fd8b 	bl	1df00 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1e3ea:	7bfb      	ldrb	r3, [r7, #15]
   1e3ec:	3301      	adds	r3, #1
   1e3ee:	73fb      	strb	r3, [r7, #15]
   1e3f0:	7bfb      	ldrb	r3, [r7, #15]
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	d0f4      	beq.n	1e3e0 <appSlaveProcConnClose+0x40>
    }
  }
}
   1e3f6:	bf00      	nop
   1e3f8:	3710      	adds	r7, #16
   1e3fa:	46bd      	mov	sp, r7
   1e3fc:	bd80      	pop	{r7, pc}
   1e3fe:	bf00      	nop
   1e400:	10009f7c 	.word	0x10009f7c

0001e404 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e404:	b580      	push	{r7, lr}
   1e406:	b082      	sub	sp, #8
   1e408:	af00      	add	r7, sp, #0
   1e40a:	6078      	str	r0, [r7, #4]
   1e40c:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   1e40e:	4b1a      	ldr	r3, [pc, #104]	; (1e478 <appSlaveConnUpdate+0x74>)
   1e410:	681b      	ldr	r3, [r3, #0]
   1e412:	681b      	ldr	r3, [r3, #0]
   1e414:	2b00      	cmp	r3, #0
   1e416:	d02b      	beq.n	1e470 <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   1e418:	687b      	ldr	r3, [r7, #4]
   1e41a:	78db      	ldrb	r3, [r3, #3]
   1e41c:	2b00      	cmp	r3, #0
   1e41e:	d117      	bne.n	1e450 <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1e420:	4b15      	ldr	r3, [pc, #84]	; (1e478 <appSlaveConnUpdate+0x74>)
   1e422:	681b      	ldr	r3, [r3, #0]
   1e424:	889a      	ldrh	r2, [r3, #4]
   1e426:	687b      	ldr	r3, [r7, #4]
   1e428:	891b      	ldrh	r3, [r3, #8]
   1e42a:	429a      	cmp	r2, r3
   1e42c:	d80a      	bhi.n	1e444 <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1e42e:	4b12      	ldr	r3, [pc, #72]	; (1e478 <appSlaveConnUpdate+0x74>)
   1e430:	681b      	ldr	r3, [r3, #0]
   1e432:	88da      	ldrh	r2, [r3, #6]
   1e434:	687b      	ldr	r3, [r7, #4]
   1e436:	891b      	ldrh	r3, [r3, #8]
   1e438:	429a      	cmp	r2, r3
   1e43a:	d303      	bcc.n	1e444 <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   1e43c:	6838      	ldr	r0, [r7, #0]
   1e43e:	f7ff fead 	bl	1e19c <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   1e442:	e015      	b.n	1e470 <appSlaveConnUpdate+0x6c>
        appConnUpdateTimerStart(pCb->connId);
   1e444:	683b      	ldr	r3, [r7, #0]
   1e446:	791b      	ldrb	r3, [r3, #4]
   1e448:	4618      	mov	r0, r3
   1e44a:	f7ff fe7d 	bl	1e148 <appConnUpdateTimerStart>
}
   1e44e:	e00f      	b.n	1e470 <appSlaveConnUpdate+0x6c>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1e450:	687b      	ldr	r3, [r7, #4]
   1e452:	78db      	ldrb	r3, [r3, #3]
   1e454:	2b0c      	cmp	r3, #12
   1e456:	d00b      	beq.n	1e470 <appSlaveConnUpdate+0x6c>
   1e458:	683b      	ldr	r3, [r7, #0]
   1e45a:	7b1a      	ldrb	r2, [r3, #12]
   1e45c:	4b06      	ldr	r3, [pc, #24]	; (1e478 <appSlaveConnUpdate+0x74>)
   1e45e:	681b      	ldr	r3, [r3, #0]
   1e460:	7b1b      	ldrb	r3, [r3, #12]
   1e462:	429a      	cmp	r2, r3
   1e464:	d204      	bcs.n	1e470 <appSlaveConnUpdate+0x6c>
      appConnUpdateTimerStart(pCb->connId);
   1e466:	683b      	ldr	r3, [r7, #0]
   1e468:	791b      	ldrb	r3, [r3, #4]
   1e46a:	4618      	mov	r0, r3
   1e46c:	f7ff fe6c 	bl	1e148 <appConnUpdateTimerStart>
}
   1e470:	bf00      	nop
   1e472:	3708      	adds	r7, #8
   1e474:	46bd      	mov	sp, r7
   1e476:	bd80      	pop	{r7, pc}
   1e478:	10009e50 	.word	0x10009e50

0001e47c <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e47c:	b580      	push	{r7, lr}
   1e47e:	b084      	sub	sp, #16
   1e480:	af00      	add	r7, sp, #0
   1e482:	6078      	str	r0, [r7, #4]
   1e484:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   1e486:	4b27      	ldr	r3, [pc, #156]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e48c:	2b00      	cmp	r3, #0
   1e48e:	d044      	beq.n	1e51a <appSlaveResolvedAddrInd+0x9e>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e490:	687b      	ldr	r3, [r7, #4]
   1e492:	78db      	ldrb	r3, [r3, #3]
   1e494:	2b00      	cmp	r3, #0
   1e496:	d110      	bne.n	1e4ba <appSlaveResolvedAddrInd+0x3e>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   1e498:	4b22      	ldr	r3, [pc, #136]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e49c:	683b      	ldr	r3, [r7, #0]
   1e49e:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   1e4a0:	4b20      	ldr	r3, [pc, #128]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4a2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   1e4a6:	2b00      	cmp	r3, #0
   1e4a8:	d032      	beq.n	1e510 <appSlaveResolvedAddrInd+0x94>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   1e4aa:	6838      	ldr	r0, [r7, #0]
   1e4ac:	f7ff febe 	bl	1e22c <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   1e4b0:	4b1c      	ldr	r3, [pc, #112]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4b2:	2200      	movs	r2, #0
   1e4b4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1e4b8:	e02a      	b.n	1e510 <appSlaveResolvedAddrInd+0x94>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1e4ba:	687b      	ldr	r3, [r7, #4]
   1e4bc:	78db      	ldrb	r3, [r3, #3]
   1e4be:	2b05      	cmp	r3, #5
   1e4c0:	d126      	bne.n	1e510 <appSlaveResolvedAddrInd+0x94>
   1e4c2:	4b18      	ldr	r3, [pc, #96]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e4c6:	2b00      	cmp	r3, #0
   1e4c8:	d022      	beq.n	1e510 <appSlaveResolvedAddrInd+0x94>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1e4ca:	4b16      	ldr	r3, [pc, #88]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e4ce:	4618      	mov	r0, r3
   1e4d0:	f7fb f902 	bl	196d8 <AppDbGetNextRecord>
   1e4d4:	4602      	mov	r2, r0
   1e4d6:	4b13      	ldr	r3, [pc, #76]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1e4da:	4b12      	ldr	r3, [pc, #72]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e4de:	2b00      	cmp	r3, #0
   1e4e0:	d016      	beq.n	1e510 <appSlaveResolvedAddrInd+0x94>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1e4e2:	4b10      	ldr	r3, [pc, #64]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1e4e6:	2200      	movs	r2, #0
   1e4e8:	2104      	movs	r1, #4
   1e4ea:	4618      	mov	r0, r3
   1e4ec:	f7fb fa2e 	bl	1994c <AppDbGetKey>
   1e4f0:	60f8      	str	r0, [r7, #12]
   1e4f2:	68fb      	ldr	r3, [r7, #12]
   1e4f4:	2b00      	cmp	r3, #0
   1e4f6:	d00b      	beq.n	1e510 <appSlaveResolvedAddrInd+0x94>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1e4f8:	683b      	ldr	r3, [r7, #0]
   1e4fa:	791b      	ldrb	r3, [r3, #4]
   1e4fc:	4618      	mov	r0, r3
   1e4fe:	f7f1 f929 	bl	f754 <DmConnPeerAddr>
   1e502:	68f9      	ldr	r1, [r7, #12]
   1e504:	687b      	ldr	r3, [r7, #4]
   1e506:	881b      	ldrh	r3, [r3, #0]
   1e508:	461a      	mov	r2, r3
   1e50a:	f7f1 fc6b 	bl	fde4 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1e50e:	e005      	b.n	1e51c <appSlaveResolvedAddrInd+0xa0>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   1e510:	4b04      	ldr	r3, [pc, #16]	; (1e524 <appSlaveResolvedAddrInd+0xa8>)
   1e512:	2200      	movs	r2, #0
   1e514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   1e518:	e000      	b.n	1e51c <appSlaveResolvedAddrInd+0xa0>
    return;
   1e51a:	bf00      	nop
}
   1e51c:	3710      	adds	r7, #16
   1e51e:	46bd      	mov	sp, r7
   1e520:	bd80      	pop	{r7, pc}
   1e522:	bf00      	nop
   1e524:	10009f7c 	.word	0x10009f7c

0001e528 <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e528:	b580      	push	{r7, lr}
   1e52a:	b086      	sub	sp, #24
   1e52c:	af00      	add	r7, sp, #0
   1e52e:	6078      	str	r0, [r7, #4]
   1e530:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1e532:	4b16      	ldr	r3, [pc, #88]	; (1e58c <appSlaveRemoteConnParamReq+0x64>)
   1e534:	681b      	ldr	r3, [r3, #0]
   1e536:	781b      	ldrb	r3, [r3, #0]
   1e538:	2b00      	cmp	r3, #0
   1e53a:	d118      	bne.n	1e56e <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1e53c:	687b      	ldr	r3, [r7, #4]
   1e53e:	88db      	ldrh	r3, [r3, #6]
   1e540:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1e542:	687b      	ldr	r3, [r7, #4]
   1e544:	891b      	ldrh	r3, [r3, #8]
   1e546:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1e548:	687b      	ldr	r3, [r7, #4]
   1e54a:	895b      	ldrh	r3, [r3, #10]
   1e54c:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1e54e:	687b      	ldr	r3, [r7, #4]
   1e550:	899b      	ldrh	r3, [r3, #12]
   1e552:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1e554:	2300      	movs	r3, #0
   1e556:	82fb      	strh	r3, [r7, #22]
   1e558:	8afb      	ldrh	r3, [r7, #22]
   1e55a:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1e55c:	683b      	ldr	r3, [r7, #0]
   1e55e:	791b      	ldrb	r3, [r3, #4]
   1e560:	f107 020c 	add.w	r2, r7, #12
   1e564:	4611      	mov	r1, r2
   1e566:	4618      	mov	r0, r3
   1e568:	f7f1 f86c 	bl	f644 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1e56c:	e00a      	b.n	1e584 <appSlaveRemoteConnParamReq+0x5c>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1e56e:	4b07      	ldr	r3, [pc, #28]	; (1e58c <appSlaveRemoteConnParamReq+0x64>)
   1e570:	681b      	ldr	r3, [r3, #0]
   1e572:	781b      	ldrb	r3, [r3, #0]
   1e574:	2b01      	cmp	r3, #1
   1e576:	d105      	bne.n	1e584 <appSlaveRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1e578:	683b      	ldr	r3, [r7, #0]
   1e57a:	791b      	ldrb	r3, [r3, #4]
   1e57c:	2111      	movs	r1, #17
   1e57e:	4618      	mov	r0, r3
   1e580:	f7f1 f87c 	bl	f67c <DmRemoteConnParamReqNegReply>
}
   1e584:	bf00      	nop
   1e586:	3718      	adds	r7, #24
   1e588:	46bd      	mov	sp, r7
   1e58a:	bd80      	pop	{r7, pc}
   1e58c:	10002cc8 	.word	0x10002cc8

0001e590 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e590:	b580      	push	{r7, lr}
   1e592:	b082      	sub	sp, #8
   1e594:	af00      	add	r7, sp, #0
   1e596:	6078      	str	r0, [r7, #4]
   1e598:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   1e59a:	683b      	ldr	r3, [r7, #0]
   1e59c:	2200      	movs	r2, #0
   1e59e:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1e5a0:	683b      	ldr	r3, [r7, #0]
   1e5a2:	2200      	movs	r2, #0
   1e5a4:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1e5a6:	687b      	ldr	r3, [r7, #4]
   1e5a8:	7a5a      	ldrb	r2, [r3, #9]
   1e5aa:	687b      	ldr	r3, [r7, #4]
   1e5ac:	330a      	adds	r3, #10
   1e5ae:	4619      	mov	r1, r3
   1e5b0:	4610      	mov	r0, r2
   1e5b2:	f7fb f963 	bl	1987c <AppDbFindByAddr>
   1e5b6:	4602      	mov	r2, r0
   1e5b8:	683b      	ldr	r3, [r7, #0]
   1e5ba:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1e5bc:	683b      	ldr	r3, [r7, #0]
   1e5be:	681b      	ldr	r3, [r3, #0]
   1e5c0:	2b00      	cmp	r3, #0
   1e5c2:	d10c      	bne.n	1e5de <appSlaveSecConnOpen+0x4e>
   1e5c4:	687b      	ldr	r3, [r7, #4]
   1e5c6:	7a5b      	ldrb	r3, [r3, #9]
   1e5c8:	2b01      	cmp	r3, #1
   1e5ca:	d108      	bne.n	1e5de <appSlaveSecConnOpen+0x4e>
   1e5cc:	687b      	ldr	r3, [r7, #4]
   1e5ce:	7bdb      	ldrb	r3, [r3, #15]
   1e5d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e5d4:	2b40      	cmp	r3, #64	; 0x40
   1e5d6:	d102      	bne.n	1e5de <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   1e5d8:	6878      	ldr	r0, [r7, #4]
   1e5da:	f7ff fdf3 	bl	1e1c4 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1e5de:	4b0c      	ldr	r3, [pc, #48]	; (1e610 <appSlaveSecConnOpen+0x80>)
   1e5e0:	681b      	ldr	r3, [r3, #0]
   1e5e2:	791b      	ldrb	r3, [r3, #4]
   1e5e4:	2b00      	cmp	r3, #0
   1e5e6:	d00e      	beq.n	1e606 <appSlaveSecConnOpen+0x76>
   1e5e8:	f7fb f908 	bl	197fc <AppDbCheckBonded>
   1e5ec:	4603      	mov	r3, r0
   1e5ee:	2b00      	cmp	r3, #0
   1e5f0:	d009      	beq.n	1e606 <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1e5f2:	687b      	ldr	r3, [r7, #4]
   1e5f4:	881b      	ldrh	r3, [r3, #0]
   1e5f6:	b2da      	uxtb	r2, r3
   1e5f8:	4b05      	ldr	r3, [pc, #20]	; (1e610 <appSlaveSecConnOpen+0x80>)
   1e5fa:	681b      	ldr	r3, [r3, #0]
   1e5fc:	781b      	ldrb	r3, [r3, #0]
   1e5fe:	4619      	mov	r1, r3
   1e600:	4610      	mov	r0, r2
   1e602:	f7f1 fefe 	bl	10402 <DmSecSlaveReq>
  }
}
   1e606:	bf00      	nop
   1e608:	3708      	adds	r7, #8
   1e60a:	46bd      	mov	sp, r7
   1e60c:	bd80      	pop	{r7, pc}
   1e60e:	bf00      	nop
   1e610:	10009e6c 	.word	0x10009e6c

0001e614 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e614:	b580      	push	{r7, lr}
   1e616:	b082      	sub	sp, #8
   1e618:	af00      	add	r7, sp, #0
   1e61a:	6078      	str	r0, [r7, #4]
   1e61c:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e61e:	683b      	ldr	r3, [r7, #0]
   1e620:	681b      	ldr	r3, [r3, #0]
   1e622:	2b00      	cmp	r3, #0
   1e624:	d004      	beq.n	1e630 <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1e626:	683b      	ldr	r3, [r7, #0]
   1e628:	681b      	ldr	r3, [r3, #0]
   1e62a:	4618      	mov	r0, r3
   1e62c:	f7fb f8aa 	bl	19784 <AppDbCheckValidRecord>
  }
}
   1e630:	bf00      	nop
   1e632:	3708      	adds	r7, #8
   1e634:	46bd      	mov	sp, r7
   1e636:	bd80      	pop	{r7, pc}

0001e638 <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e638:	b590      	push	{r4, r7, lr}
   1e63a:	b087      	sub	sp, #28
   1e63c:	af02      	add	r7, sp, #8
   1e63e:	6078      	str	r0, [r7, #4]
   1e640:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1e642:	4b3f      	ldr	r3, [pc, #252]	; (1e740 <appSecPairInd+0x108>)
   1e644:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1e648:	2b00      	cmp	r3, #0
   1e64a:	d111      	bne.n	1e670 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1e64c:	687b      	ldr	r3, [r7, #4]
   1e64e:	791b      	ldrb	r3, [r3, #4]
   1e650:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   1e654:	2b00      	cmp	r3, #0
   1e656:	d00b      	beq.n	1e670 <appSecPairInd+0x38>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1e658:	683b      	ldr	r3, [r7, #0]
   1e65a:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1e65c:	2b00      	cmp	r3, #0
   1e65e:	d064      	beq.n	1e72a <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1e660:	683b      	ldr	r3, [r7, #0]
   1e662:	791b      	ldrb	r3, [r3, #4]
   1e664:	4618      	mov	r0, r3
   1e666:	f7f1 f8a5 	bl	f7b4 <DmConnSecLevel>
   1e66a:	4603      	mov	r3, r0
   1e66c:	2b00      	cmp	r3, #0
   1e66e:	d15c      	bne.n	1e72a <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1e670:	687b      	ldr	r3, [r7, #4]
   1e672:	791a      	ldrb	r2, [r3, #4]
   1e674:	4b33      	ldr	r3, [pc, #204]	; (1e744 <appSecPairInd+0x10c>)
   1e676:	681b      	ldr	r3, [r3, #0]
   1e678:	781b      	ldrb	r3, [r3, #0]
   1e67a:	4013      	ands	r3, r2
   1e67c:	b2db      	uxtb	r3, r3
   1e67e:	f003 0301 	and.w	r3, r3, #1
   1e682:	2b00      	cmp	r3, #0
   1e684:	bf14      	ite	ne
   1e686:	2301      	movne	r3, #1
   1e688:	2300      	moveq	r3, #0
   1e68a:	b2db      	uxtb	r3, r3
   1e68c:	461a      	mov	r2, r3
   1e68e:	683b      	ldr	r3, [r7, #0]
   1e690:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1e692:	683b      	ldr	r3, [r7, #0]
   1e694:	79db      	ldrb	r3, [r3, #7]
   1e696:	2b00      	cmp	r3, #0
   1e698:	d017      	beq.n	1e6ca <appSecPairInd+0x92>
   1e69a:	683b      	ldr	r3, [r7, #0]
   1e69c:	681b      	ldr	r3, [r3, #0]
   1e69e:	2b00      	cmp	r3, #0
   1e6a0:	d113      	bne.n	1e6ca <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   1e6a2:	683b      	ldr	r3, [r7, #0]
   1e6a4:	791b      	ldrb	r3, [r3, #4]
   1e6a6:	4618      	mov	r0, r3
   1e6a8:	f7f1 f84a 	bl	f740 <DmConnPeerAddrType>
   1e6ac:	4603      	mov	r3, r0
   1e6ae:	461c      	mov	r4, r3
   1e6b0:	683b      	ldr	r3, [r7, #0]
   1e6b2:	791b      	ldrb	r3, [r3, #4]
   1e6b4:	4618      	mov	r0, r3
   1e6b6:	f7f1 f84d 	bl	f754 <DmConnPeerAddr>
   1e6ba:	4603      	mov	r3, r0
   1e6bc:	4619      	mov	r1, r3
   1e6be:	4620      	mov	r0, r4
   1e6c0:	f7fa ffb8 	bl	19634 <AppDbNewRecord>
   1e6c4:	4602      	mov	r2, r0
   1e6c6:	683b      	ldr	r3, [r7, #0]
   1e6c8:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   1e6ca:	683b      	ldr	r3, [r7, #0]
   1e6cc:	2200      	movs	r2, #0
   1e6ce:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   1e6d0:	4b1c      	ldr	r3, [pc, #112]	; (1e744 <appSecPairInd+0x10c>)
   1e6d2:	681b      	ldr	r3, [r3, #0]
   1e6d4:	789b      	ldrb	r3, [r3, #2]
   1e6d6:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   1e6d8:	4b1a      	ldr	r3, [pc, #104]	; (1e744 <appSecPairInd+0x10c>)
   1e6da:	681b      	ldr	r3, [r3, #0]
   1e6dc:	785b      	ldrb	r3, [r3, #1]
   1e6de:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1e6e0:	683b      	ldr	r3, [r7, #0]
   1e6e2:	791b      	ldrb	r3, [r3, #4]
   1e6e4:	4618      	mov	r0, r3
   1e6e6:	f7f1 f82b 	bl	f740 <DmConnPeerAddrType>
   1e6ea:	4603      	mov	r3, r0
   1e6ec:	2b01      	cmp	r3, #1
   1e6ee:	d103      	bne.n	1e6f8 <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   1e6f0:	7bfb      	ldrb	r3, [r7, #15]
   1e6f2:	f043 0302 	orr.w	r3, r3, #2
   1e6f6:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1e6f8:	687b      	ldr	r3, [r7, #4]
   1e6fa:	79da      	ldrb	r2, [r3, #7]
   1e6fc:	7bbb      	ldrb	r3, [r7, #14]
   1e6fe:	4013      	ands	r3, r2
   1e700:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1e702:	687b      	ldr	r3, [r7, #4]
   1e704:	799a      	ldrb	r2, [r3, #6]
   1e706:	7bfb      	ldrb	r3, [r7, #15]
   1e708:	4013      	ands	r3, r2
   1e70a:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1e70c:	683b      	ldr	r3, [r7, #0]
   1e70e:	7918      	ldrb	r0, [r3, #4]
   1e710:	4b0c      	ldr	r3, [pc, #48]	; (1e744 <appSecPairInd+0x10c>)
   1e712:	681b      	ldr	r3, [r3, #0]
   1e714:	78d9      	ldrb	r1, [r3, #3]
   1e716:	4b0b      	ldr	r3, [pc, #44]	; (1e744 <appSecPairInd+0x10c>)
   1e718:	681b      	ldr	r3, [r3, #0]
   1e71a:	781a      	ldrb	r2, [r3, #0]
   1e71c:	7bfc      	ldrb	r4, [r7, #15]
   1e71e:	7bbb      	ldrb	r3, [r7, #14]
   1e720:	9300      	str	r3, [sp, #0]
   1e722:	4623      	mov	r3, r4
   1e724:	f7f1 fe4e 	bl	103c4 <DmSecPairRsp>
   1e728:	e005      	b.n	1e736 <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1e72a:	683b      	ldr	r3, [r7, #0]
   1e72c:	791b      	ldrb	r3, [r3, #4]
   1e72e:	2105      	movs	r1, #5
   1e730:	4618      	mov	r0, r3
   1e732:	f7f1 fcd7 	bl	100e4 <DmSecCancelReq>
  }
}
   1e736:	bf00      	nop
   1e738:	3714      	adds	r7, #20
   1e73a:	46bd      	mov	sp, r7
   1e73c:	bd90      	pop	{r4, r7, pc}
   1e73e:	bf00      	nop
   1e740:	10009f7c 	.word	0x10009f7c
   1e744:	10009e6c 	.word	0x10009e6c

0001e748 <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e748:	b580      	push	{r7, lr}
   1e74a:	b082      	sub	sp, #8
   1e74c:	af00      	add	r7, sp, #0
   1e74e:	6078      	str	r0, [r7, #4]
   1e750:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1e752:	683b      	ldr	r3, [r7, #0]
   1e754:	79db      	ldrb	r3, [r3, #7]
   1e756:	2b00      	cmp	r3, #0
   1e758:	d012      	beq.n	1e780 <appSecStoreKey+0x38>
   1e75a:	683b      	ldr	r3, [r7, #0]
   1e75c:	681b      	ldr	r3, [r3, #0]
   1e75e:	2b00      	cmp	r3, #0
   1e760:	d00e      	beq.n	1e780 <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1e762:	683b      	ldr	r3, [r7, #0]
   1e764:	7ada      	ldrb	r2, [r3, #11]
   1e766:	687b      	ldr	r3, [r7, #4]
   1e768:	7f9b      	ldrb	r3, [r3, #30]
   1e76a:	4313      	orrs	r3, r2
   1e76c:	b2da      	uxtb	r2, r3
   1e76e:	683b      	ldr	r3, [r7, #0]
   1e770:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1e772:	683b      	ldr	r3, [r7, #0]
   1e774:	681b      	ldr	r3, [r3, #0]
   1e776:	687a      	ldr	r2, [r7, #4]
   1e778:	4611      	mov	r1, r2
   1e77a:	4618      	mov	r0, r3
   1e77c:	f7fb f930 	bl	199e0 <AppDbSetKey>
  }
}
   1e780:	bf00      	nop
   1e782:	3708      	adds	r7, #8
   1e784:	46bd      	mov	sp, r7
   1e786:	bd80      	pop	{r7, pc}

0001e788 <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e788:	b580      	push	{r7, lr}
   1e78a:	b082      	sub	sp, #8
   1e78c:	af00      	add	r7, sp, #0
   1e78e:	6078      	str	r0, [r7, #4]
   1e790:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   1e792:	683b      	ldr	r3, [r7, #0]
   1e794:	79db      	ldrb	r3, [r3, #7]
   1e796:	2b00      	cmp	r3, #0
   1e798:	d024      	beq.n	1e7e4 <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1e79a:	683b      	ldr	r3, [r7, #0]
   1e79c:	2201      	movs	r2, #1
   1e79e:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e7a0:	683b      	ldr	r3, [r7, #0]
   1e7a2:	681b      	ldr	r3, [r3, #0]
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	d007      	beq.n	1e7b8 <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1e7a8:	683b      	ldr	r3, [r7, #0]
   1e7aa:	681a      	ldr	r2, [r3, #0]
   1e7ac:	683b      	ldr	r3, [r7, #0]
   1e7ae:	7adb      	ldrb	r3, [r3, #11]
   1e7b0:	4619      	mov	r1, r3
   1e7b2:	4610      	mov	r0, r2
   1e7b4:	f7fa ffd2 	bl	1975c <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   1e7b8:	4b0c      	ldr	r3, [pc, #48]	; (1e7ec <appSecPairCmpl+0x64>)
   1e7ba:	2200      	movs	r2, #0
   1e7bc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1e7c0:	4b0a      	ldr	r3, [pc, #40]	; (1e7ec <appSecPairCmpl+0x64>)
   1e7c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1e7c6:	2b01      	cmp	r3, #1
   1e7c8:	d102      	bne.n	1e7d0 <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   1e7ca:	683b      	ldr	r3, [r7, #0]
   1e7cc:	2201      	movs	r2, #1
   1e7ce:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e7d0:	683b      	ldr	r3, [r7, #0]
   1e7d2:	681b      	ldr	r3, [r3, #0]
   1e7d4:	2b00      	cmp	r3, #0
   1e7d6:	d005      	beq.n	1e7e4 <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1e7d8:	683b      	ldr	r3, [r7, #0]
   1e7da:	791b      	ldrb	r3, [r3, #4]
   1e7dc:	4619      	mov	r1, r3
   1e7de:	6878      	ldr	r0, [r7, #4]
   1e7e0:	f7ff fa38 	bl	1dc54 <AppAddDevToResList>
    }
  }
}
   1e7e4:	bf00      	nop
   1e7e6:	3708      	adds	r7, #8
   1e7e8:	46bd      	mov	sp, r7
   1e7ea:	bd80      	pop	{r7, pc}
   1e7ec:	10009f7c 	.word	0x10009f7c

0001e7f0 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e7f0:	b480      	push	{r7}
   1e7f2:	b083      	sub	sp, #12
   1e7f4:	af00      	add	r7, sp, #0
   1e7f6:	6078      	str	r0, [r7, #4]
   1e7f8:	6039      	str	r1, [r7, #0]
  return;
   1e7fa:	bf00      	nop
}
   1e7fc:	370c      	adds	r7, #12
   1e7fe:	46bd      	mov	sp, r7
   1e800:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e804:	4770      	bx	lr

0001e806 <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e806:	b480      	push	{r7}
   1e808:	b083      	sub	sp, #12
   1e80a:	af00      	add	r7, sp, #0
   1e80c:	6078      	str	r0, [r7, #4]
   1e80e:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1e810:	683b      	ldr	r3, [r7, #0]
   1e812:	799b      	ldrb	r3, [r3, #6]
   1e814:	2b00      	cmp	r3, #0
   1e816:	d009      	beq.n	1e82c <appSecEncryptInd+0x26>
   1e818:	687b      	ldr	r3, [r7, #4]
   1e81a:	791b      	ldrb	r3, [r3, #4]
   1e81c:	2b00      	cmp	r3, #0
   1e81e:	d005      	beq.n	1e82c <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   1e820:	683b      	ldr	r3, [r7, #0]
   1e822:	2201      	movs	r2, #1
   1e824:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1e826:	683b      	ldr	r3, [r7, #0]
   1e828:	2200      	movs	r2, #0
   1e82a:	719a      	strb	r2, [r3, #6]
  }
}
   1e82c:	bf00      	nop
   1e82e:	370c      	adds	r7, #12
   1e830:	46bd      	mov	sp, r7
   1e832:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e836:	4770      	bx	lr

0001e838 <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e838:	b580      	push	{r7, lr}
   1e83a:	b082      	sub	sp, #8
   1e83c:	af00      	add	r7, sp, #0
   1e83e:	6078      	str	r0, [r7, #4]
   1e840:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1e842:	683b      	ldr	r3, [r7, #0]
   1e844:	681b      	ldr	r3, [r3, #0]
   1e846:	2b00      	cmp	r3, #0
   1e848:	d12b      	bne.n	1e8a2 <appSecFindLtk+0x6a>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1e84a:	687b      	ldr	r3, [r7, #4]
   1e84c:	89db      	ldrh	r3, [r3, #14]
   1e84e:	2b00      	cmp	r3, #0
   1e850:	d109      	bne.n	1e866 <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1e852:	687b      	ldr	r3, [r7, #4]
   1e854:	3306      	adds	r3, #6
   1e856:	2208      	movs	r2, #8
   1e858:	4915      	ldr	r1, [pc, #84]	; (1e8b0 <appSecFindLtk+0x78>)
   1e85a:	4618      	mov	r0, r3
   1e85c:	f7ed fc50 	bl	c100 <memcmp>
   1e860:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1e862:	2b00      	cmp	r3, #0
   1e864:	d013      	beq.n	1e88e <appSecFindLtk+0x56>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1e866:	687b      	ldr	r3, [r7, #4]
   1e868:	89da      	ldrh	r2, [r3, #14]
   1e86a:	687b      	ldr	r3, [r7, #4]
   1e86c:	3306      	adds	r3, #6
   1e86e:	4619      	mov	r1, r3
   1e870:	4610      	mov	r0, r2
   1e872:	f7fb f839 	bl	198e8 <AppDbFindByLtkReq>
   1e876:	4602      	mov	r2, r0
   1e878:	683b      	ldr	r3, [r7, #0]
   1e87a:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e87c:	683b      	ldr	r3, [r7, #0]
   1e87e:	681b      	ldr	r3, [r3, #0]
   1e880:	2b00      	cmp	r3, #0
   1e882:	d00e      	beq.n	1e8a2 <appSecFindLtk+0x6a>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   1e884:	4b0b      	ldr	r3, [pc, #44]	; (1e8b4 <appSecFindLtk+0x7c>)
   1e886:	2200      	movs	r2, #0
   1e888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1e88c:	e009      	b.n	1e8a2 <appSecFindLtk+0x6a>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   1e88e:	4b09      	ldr	r3, [pc, #36]	; (1e8b4 <appSecFindLtk+0x7c>)
   1e890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e894:	2b00      	cmp	r3, #0
   1e896:	d004      	beq.n	1e8a2 <appSecFindLtk+0x6a>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   1e898:	4b06      	ldr	r3, [pc, #24]	; (1e8b4 <appSecFindLtk+0x7c>)
   1e89a:	2201      	movs	r2, #1
   1e89c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   1e8a0:	e002      	b.n	1e8a8 <appSecFindLtk+0x70>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   1e8a2:	6838      	ldr	r0, [r7, #0]
   1e8a4:	f7ff fcc2 	bl	1e22c <appSecRspLtk>
}
   1e8a8:	3708      	adds	r7, #8
   1e8aa:	46bd      	mov	sp, r7
   1e8ac:	bd80      	pop	{r7, pc}
   1e8ae:	bf00      	nop
   1e8b0:	00023994 	.word	0x00023994
   1e8b4:	10009f7c 	.word	0x10009f7c

0001e8b8 <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1e8b8:	b580      	push	{r7, lr}
   1e8ba:	b082      	sub	sp, #8
   1e8bc:	af00      	add	r7, sp, #0
   1e8be:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1e8c0:	687b      	ldr	r3, [r7, #4]
   1e8c2:	78db      	ldrb	r3, [r3, #3]
   1e8c4:	2b00      	cmp	r3, #0
   1e8c6:	d105      	bne.n	1e8d4 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1e8c8:	f7f1 f962 	bl	fb90 <DmLlPrivEnabled>
   1e8cc:	4603      	mov	r3, r0
   1e8ce:	4618      	mov	r0, r3
   1e8d0:	f7ff f83c 	bl	1d94c <SvcCoreGapCentAddrResUpdate>
  }
}
   1e8d4:	bf00      	nop
   1e8d6:	3708      	adds	r7, #8
   1e8d8:	46bd      	mov	sp, r7
   1e8da:	bd80      	pop	{r7, pc}

0001e8dc <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e8dc:	b580      	push	{r7, lr}
   1e8de:	b084      	sub	sp, #16
   1e8e0:	af00      	add	r7, sp, #0
   1e8e2:	6078      	str	r0, [r7, #4]
   1e8e4:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1e8e6:	687b      	ldr	r3, [r7, #4]
   1e8e8:	78db      	ldrb	r3, [r3, #3]
   1e8ea:	2b00      	cmp	r3, #0
   1e8ec:	d11c      	bne.n	1e928 <appPrivAddDevToResListInd+0x4c>
   1e8ee:	683b      	ldr	r3, [r7, #0]
   1e8f0:	681b      	ldr	r3, [r3, #0]
   1e8f2:	2b00      	cmp	r3, #0
   1e8f4:	d018      	beq.n	1e928 <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   1e8f6:	683b      	ldr	r3, [r7, #0]
   1e8f8:	681b      	ldr	r3, [r3, #0]
   1e8fa:	2200      	movs	r2, #0
   1e8fc:	2104      	movs	r1, #4
   1e8fe:	4618      	mov	r0, r3
   1e900:	f7fb f824 	bl	1994c <AppDbGetKey>
   1e904:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   1e906:	68fb      	ldr	r3, [r7, #12]
   1e908:	2b00      	cmp	r3, #0
   1e90a:	d007      	beq.n	1e91c <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1e90c:	68fb      	ldr	r3, [r7, #12]
   1e90e:	7d9a      	ldrb	r2, [r3, #22]
   1e910:	68fb      	ldr	r3, [r7, #12]
   1e912:	3310      	adds	r3, #16
   1e914:	4619      	mov	r1, r3
   1e916:	4610      	mov	r0, r2
   1e918:	f000 fb7c 	bl	1f014 <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1e91c:	683b      	ldr	r3, [r7, #0]
   1e91e:	681b      	ldr	r3, [r3, #0]
   1e920:	2101      	movs	r1, #1
   1e922:	4618      	mov	r0, r3
   1e924:	f7fb f922 	bl	19b6c <AppDbSetPeerAddedToRl>
  }
}
   1e928:	bf00      	nop
   1e92a:	3710      	adds	r7, #16
   1e92c:	46bd      	mov	sp, r7
   1e92e:	bd80      	pop	{r7, pc}

0001e930 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1e930:	b580      	push	{r7, lr}
   1e932:	b082      	sub	sp, #8
   1e934:	af00      	add	r7, sp, #0
   1e936:	6078      	str	r0, [r7, #4]
   1e938:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1e93a:	687b      	ldr	r3, [r7, #4]
   1e93c:	78db      	ldrb	r3, [r3, #3]
   1e93e:	2b00      	cmp	r3, #0
   1e940:	d112      	bne.n	1e968 <appPrivRemDevFromResListInd+0x38>
   1e942:	683b      	ldr	r3, [r7, #0]
   1e944:	681b      	ldr	r3, [r3, #0]
   1e946:	2b00      	cmp	r3, #0
   1e948:	d00e      	beq.n	1e968 <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1e94a:	4b09      	ldr	r3, [pc, #36]	; (1e970 <appPrivRemDevFromResListInd+0x40>)
   1e94c:	2200      	movs	r2, #0
   1e94e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1e952:	2206      	movs	r2, #6
   1e954:	2100      	movs	r1, #0
   1e956:	4807      	ldr	r0, [pc, #28]	; (1e974 <appPrivRemDevFromResListInd+0x44>)
   1e958:	f7ed fd00 	bl	c35c <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1e95c:	683b      	ldr	r3, [r7, #0]
   1e95e:	681b      	ldr	r3, [r3, #0]
   1e960:	2100      	movs	r1, #0
   1e962:	4618      	mov	r0, r3
   1e964:	f7fb f902 	bl	19b6c <AppDbSetPeerAddedToRl>
  }
}
   1e968:	bf00      	nop
   1e96a:	3708      	adds	r7, #8
   1e96c:	46bd      	mov	sp, r7
   1e96e:	bd80      	pop	{r7, pc}
   1e970:	10009f7c 	.word	0x10009f7c
   1e974:	10009fac 	.word	0x10009fac

0001e978 <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   1e978:	b580      	push	{r7, lr}
   1e97a:	b086      	sub	sp, #24
   1e97c:	af00      	add	r7, sp, #0
   1e97e:	6078      	str	r0, [r7, #4]
   1e980:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   1e982:	683b      	ldr	r3, [r7, #0]
   1e984:	2202      	movs	r2, #2
   1e986:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1e988:	683b      	ldr	r3, [r7, #0]
   1e98a:	791b      	ldrb	r3, [r3, #4]
   1e98c:	4618      	mov	r0, r3
   1e98e:	f7f0 ff35 	bl	f7fc <DmConnCheckIdle>
   1e992:	4603      	mov	r3, r0
   1e994:	2b00      	cmp	r3, #0
   1e996:	bf0c      	ite	eq
   1e998:	2301      	moveq	r3, #1
   1e99a:	2300      	movne	r3, #0
   1e99c:	b2db      	uxtb	r3, r3
   1e99e:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   1e9a0:	7dfb      	ldrb	r3, [r7, #23]
   1e9a2:	2b00      	cmp	r3, #0
   1e9a4:	d027      	beq.n	1e9f6 <appSlaveConnUpdateTimeout+0x7e>
   1e9a6:	683b      	ldr	r3, [r7, #0]
   1e9a8:	7a9b      	ldrb	r3, [r3, #10]
   1e9aa:	2b00      	cmp	r3, #0
   1e9ac:	d023      	beq.n	1e9f6 <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   1e9ae:	683b      	ldr	r3, [r7, #0]
   1e9b0:	7b1b      	ldrb	r3, [r3, #12]
   1e9b2:	3301      	adds	r3, #1
   1e9b4:	b2da      	uxtb	r2, r3
   1e9b6:	683b      	ldr	r3, [r7, #0]
   1e9b8:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1e9ba:	4b15      	ldr	r3, [pc, #84]	; (1ea10 <appSlaveConnUpdateTimeout+0x98>)
   1e9bc:	681b      	ldr	r3, [r3, #0]
   1e9be:	889b      	ldrh	r3, [r3, #4]
   1e9c0:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   1e9c2:	4b13      	ldr	r3, [pc, #76]	; (1ea10 <appSlaveConnUpdateTimeout+0x98>)
   1e9c4:	681b      	ldr	r3, [r3, #0]
   1e9c6:	88db      	ldrh	r3, [r3, #6]
   1e9c8:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   1e9ca:	4b11      	ldr	r3, [pc, #68]	; (1ea10 <appSlaveConnUpdateTimeout+0x98>)
   1e9cc:	681b      	ldr	r3, [r3, #0]
   1e9ce:	891b      	ldrh	r3, [r3, #8]
   1e9d0:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   1e9d2:	4b0f      	ldr	r3, [pc, #60]	; (1ea10 <appSlaveConnUpdateTimeout+0x98>)
   1e9d4:	681b      	ldr	r3, [r3, #0]
   1e9d6:	895b      	ldrh	r3, [r3, #10]
   1e9d8:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   1e9da:	2300      	movs	r3, #0
   1e9dc:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   1e9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e9e2:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   1e9e4:	683b      	ldr	r3, [r7, #0]
   1e9e6:	791b      	ldrb	r3, [r3, #4]
   1e9e8:	f107 0208 	add.w	r2, r7, #8
   1e9ec:	4611      	mov	r1, r2
   1e9ee:	4618      	mov	r0, r3
   1e9f0:	f7f0 fda4 	bl	f53c <DmConnUpdate>
   1e9f4:	e007      	b.n	1ea06 <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   1e9f6:	683b      	ldr	r3, [r7, #0]
   1e9f8:	7dfa      	ldrb	r2, [r7, #23]
   1e9fa:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   1e9fc:	683b      	ldr	r3, [r7, #0]
   1e9fe:	791b      	ldrb	r3, [r3, #4]
   1ea00:	4618      	mov	r0, r3
   1ea02:	f7ff fba1 	bl	1e148 <appConnUpdateTimerStart>
  }
}
   1ea06:	bf00      	nop
   1ea08:	3718      	adds	r7, #24
   1ea0a:	46bd      	mov	sp, r7
   1ea0c:	bd80      	pop	{r7, pc}
   1ea0e:	bf00      	nop
   1ea10:	10009e50 	.word	0x10009e50

0001ea14 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   1ea14:	b580      	push	{r7, lr}
   1ea16:	b084      	sub	sp, #16
   1ea18:	af00      	add	r7, sp, #0
   1ea1a:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   1ea1c:	687b      	ldr	r3, [r7, #4]
   1ea1e:	881b      	ldrh	r3, [r3, #0]
   1ea20:	3b01      	subs	r3, #1
   1ea22:	015b      	lsls	r3, r3, #5
   1ea24:	4a0e      	ldr	r2, [pc, #56]	; (1ea60 <appSlaveProcMsg+0x4c>)
   1ea26:	4413      	add	r3, r2
   1ea28:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   1ea2a:	687b      	ldr	r3, [r7, #4]
   1ea2c:	789b      	ldrb	r3, [r3, #2]
   1ea2e:	2b10      	cmp	r3, #16
   1ea30:	d000      	beq.n	1ea34 <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   1ea32:	e011      	b.n	1ea58 <appSlaveProcMsg+0x44>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1ea34:	68fb      	ldr	r3, [r7, #12]
   1ea36:	7b5b      	ldrb	r3, [r3, #13]
   1ea38:	2b02      	cmp	r3, #2
   1ea3a:	d104      	bne.n	1ea46 <appSlaveProcMsg+0x32>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   1ea3c:	68f9      	ldr	r1, [r7, #12]
   1ea3e:	6878      	ldr	r0, [r7, #4]
   1ea40:	f7ff ff9a 	bl	1e978 <appSlaveConnUpdateTimeout>
      break;
   1ea44:	e007      	b.n	1ea56 <appSlaveProcMsg+0x42>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1ea46:	68fb      	ldr	r3, [r7, #12]
   1ea48:	2201      	movs	r2, #1
   1ea4a:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   1ea4c:	68fb      	ldr	r3, [r7, #12]
   1ea4e:	791b      	ldrb	r3, [r3, #4]
   1ea50:	4618      	mov	r0, r3
   1ea52:	f7f0 fd69 	bl	f528 <DmReadRemoteFeatures>
      break;
   1ea56:	bf00      	nop
  }
}
   1ea58:	bf00      	nop
   1ea5a:	3710      	adds	r7, #16
   1ea5c:	46bd      	mov	sp, r7
   1ea5e:	bd80      	pop	{r7, pc}
   1ea60:	10009e7c 	.word	0x10009e7c

0001ea64 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   1ea64:	b580      	push	{r7, lr}
   1ea66:	b082      	sub	sp, #8
   1ea68:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1ea6a:	2300      	movs	r3, #0
   1ea6c:	71fb      	strb	r3, [r7, #7]
   1ea6e:	e014      	b.n	1ea9a <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1ea70:	79fb      	ldrb	r3, [r7, #7]
   1ea72:	4a18      	ldr	r2, [pc, #96]	; (1ead4 <AppSlaveInit+0x70>)
   1ea74:	4413      	add	r3, r2
   1ea76:	2203      	movs	r2, #3
   1ea78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   1ea7c:	79fb      	ldrb	r3, [r7, #7]
   1ea7e:	4a15      	ldr	r2, [pc, #84]	; (1ead4 <AppSlaveInit+0x70>)
   1ea80:	4413      	add	r3, r2
   1ea82:	2200      	movs	r2, #0
   1ea84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   1ea88:	79fb      	ldrb	r3, [r7, #7]
   1ea8a:	4a12      	ldr	r2, [pc, #72]	; (1ead4 <AppSlaveInit+0x70>)
   1ea8c:	4413      	add	r3, r2
   1ea8e:	2200      	movs	r2, #0
   1ea90:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1ea94:	79fb      	ldrb	r3, [r7, #7]
   1ea96:	3301      	adds	r3, #1
   1ea98:	71fb      	strb	r3, [r7, #7]
   1ea9a:	79fb      	ldrb	r3, [r7, #7]
   1ea9c:	2b00      	cmp	r3, #0
   1ea9e:	d0e7      	beq.n	1ea70 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   1eaa0:	4b0c      	ldr	r3, [pc, #48]	; (1ead4 <AppSlaveInit+0x70>)
   1eaa2:	22ff      	movs	r2, #255	; 0xff
   1eaa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   1eaa8:	f7ff f9e0 	bl	1de6c <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   1eaac:	4b09      	ldr	r3, [pc, #36]	; (1ead4 <AppSlaveInit+0x70>)
   1eaae:	2200      	movs	r2, #0
   1eab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1eab4:	4b08      	ldr	r3, [pc, #32]	; (1ead8 <AppSlaveInit+0x74>)
   1eab6:	4a09      	ldr	r2, [pc, #36]	; (1eadc <AppSlaveInit+0x78>)
   1eab8:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1eaba:	4b06      	ldr	r3, [pc, #24]	; (1ead4 <AppSlaveInit+0x70>)
   1eabc:	2200      	movs	r2, #0
   1eabe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1eac2:	2206      	movs	r2, #6
   1eac4:	2100      	movs	r1, #0
   1eac6:	4806      	ldr	r0, [pc, #24]	; (1eae0 <AppSlaveInit+0x7c>)
   1eac8:	f7ed fc48 	bl	c35c <memset>
}
   1eacc:	bf00      	nop
   1eace:	3708      	adds	r7, #8
   1ead0:	46bd      	mov	sp, r7
   1ead2:	bd80      	pop	{r7, pc}
   1ead4:	10009f7c 	.word	0x10009f7c
   1ead8:	10009e58 	.word	0x10009e58
   1eadc:	0001ea15 	.word	0x0001ea15
   1eae0:	10009fac 	.word	0x10009fac

0001eae4 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1eae4:	b580      	push	{r7, lr}
   1eae6:	b084      	sub	sp, #16
   1eae8:	af00      	add	r7, sp, #0
   1eaea:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1eaec:	2300      	movs	r3, #0
   1eaee:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1eaf0:	687b      	ldr	r3, [r7, #4]
   1eaf2:	789b      	ldrb	r3, [r3, #2]
   1eaf4:	2b22      	cmp	r3, #34	; 0x22
   1eaf6:	d00a      	beq.n	1eb0e <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   1eaf8:	687b      	ldr	r3, [r7, #4]
   1eafa:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1eafc:	2b47      	cmp	r3, #71	; 0x47
   1eafe:	d006      	beq.n	1eb0e <AppSlaveProcDmMsg+0x2a>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1eb00:	687b      	ldr	r3, [r7, #4]
   1eb02:	881b      	ldrh	r3, [r3, #0]
   1eb04:	3b01      	subs	r3, #1
   1eb06:	015b      	lsls	r3, r3, #5
   1eb08:	4a5a      	ldr	r2, [pc, #360]	; (1ec74 <AppSlaveProcDmMsg+0x190>)
   1eb0a:	4413      	add	r3, r2
   1eb0c:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   1eb0e:	687b      	ldr	r3, [r7, #4]
   1eb10:	789b      	ldrb	r3, [r3, #2]
   1eb12:	3b20      	subs	r3, #32
   1eb14:	2b35      	cmp	r3, #53	; 0x35
   1eb16:	f200 80a3 	bhi.w	1ec60 <AppSlaveProcDmMsg+0x17c>
   1eb1a:	a201      	add	r2, pc, #4	; (adr r2, 1eb20 <AppSlaveProcDmMsg+0x3c>)
   1eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1eb20:	0001ebf9 	.word	0x0001ebf9
   1eb24:	0001ec61 	.word	0x0001ec61
   1eb28:	0001ebff 	.word	0x0001ebff
   1eb2c:	0001ec61 	.word	0x0001ec61
   1eb30:	0001ec61 	.word	0x0001ec61
   1eb34:	0001ec61 	.word	0x0001ec61
   1eb38:	0001ec61 	.word	0x0001ec61
   1eb3c:	0001ec11 	.word	0x0001ec11
   1eb40:	0001ec1b 	.word	0x0001ec1b
   1eb44:	0001ec25 	.word	0x0001ec25
   1eb48:	0001ec61 	.word	0x0001ec61
   1eb4c:	0001ec61 	.word	0x0001ec61
   1eb50:	0001ec61 	.word	0x0001ec61
   1eb54:	0001ec61 	.word	0x0001ec61
   1eb58:	0001ec61 	.word	0x0001ec61
   1eb5c:	0001ec61 	.word	0x0001ec61
   1eb60:	0001ec61 	.word	0x0001ec61
   1eb64:	0001ec61 	.word	0x0001ec61
   1eb68:	0001ec61 	.word	0x0001ec61
   1eb6c:	0001ec61 	.word	0x0001ec61
   1eb70:	0001ec61 	.word	0x0001ec61
   1eb74:	0001ec61 	.word	0x0001ec61
   1eb78:	0001ec61 	.word	0x0001ec61
   1eb7c:	0001ec2f 	.word	0x0001ec2f
   1eb80:	0001ec61 	.word	0x0001ec61
   1eb84:	0001ec61 	.word	0x0001ec61
   1eb88:	0001ec61 	.word	0x0001ec61
   1eb8c:	0001ec61 	.word	0x0001ec61
   1eb90:	0001ec61 	.word	0x0001ec61
   1eb94:	0001ec61 	.word	0x0001ec61
   1eb98:	0001ec61 	.word	0x0001ec61
   1eb9c:	0001ec39 	.word	0x0001ec39
   1eba0:	0001ec61 	.word	0x0001ec61
   1eba4:	0001ec61 	.word	0x0001ec61
   1eba8:	0001ec61 	.word	0x0001ec61
   1ebac:	0001ec61 	.word	0x0001ec61
   1ebb0:	0001ec61 	.word	0x0001ec61
   1ebb4:	0001ec61 	.word	0x0001ec61
   1ebb8:	0001ec61 	.word	0x0001ec61
   1ebbc:	0001ebff 	.word	0x0001ebff
   1ebc0:	0001ec61 	.word	0x0001ec61
   1ebc4:	0001ec61 	.word	0x0001ec61
   1ebc8:	0001ec61 	.word	0x0001ec61
   1ebcc:	0001ec61 	.word	0x0001ec61
   1ebd0:	0001ec61 	.word	0x0001ec61
   1ebd4:	0001ec61 	.word	0x0001ec61
   1ebd8:	0001ec61 	.word	0x0001ec61
   1ebdc:	0001ec61 	.word	0x0001ec61
   1ebe0:	0001ec61 	.word	0x0001ec61
   1ebe4:	0001ec43 	.word	0x0001ec43
   1ebe8:	0001ec61 	.word	0x0001ec61
   1ebec:	0001ec61 	.word	0x0001ec61
   1ebf0:	0001ec61 	.word	0x0001ec61
   1ebf4:	0001ec55 	.word	0x0001ec55
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   1ebf8:	f7ff f938 	bl	1de6c <appSlaveAdvModeInit>
      break;
   1ebfc:	e035      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   1ebfe:	4b1e      	ldr	r3, [pc, #120]	; (1ec78 <AppSlaveProcDmMsg+0x194>)
   1ec00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ec02:	2b00      	cmp	r3, #0
   1ec04:	d02e      	beq.n	1ec64 <AppSlaveProcDmMsg+0x180>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   1ec06:	4b1c      	ldr	r3, [pc, #112]	; (1ec78 <AppSlaveProcDmMsg+0x194>)
   1ec08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ec0a:	6878      	ldr	r0, [r7, #4]
   1ec0c:	4798      	blx	r3
      }
      break;
   1ec0e:	e029      	b.n	1ec64 <AppSlaveProcDmMsg+0x180>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   1ec10:	68f9      	ldr	r1, [r7, #12]
   1ec12:	6878      	ldr	r0, [r7, #4]
   1ec14:	f7ff fb40 	bl	1e298 <appSlaveConnOpen>
      break;
   1ec18:	e027      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   1ec1a:	68f9      	ldr	r1, [r7, #12]
   1ec1c:	6878      	ldr	r0, [r7, #4]
   1ec1e:	f7ff fb53 	bl	1e2c8 <appSlaveConnClose>
      break;
   1ec22:	e022      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   1ec24:	68f9      	ldr	r1, [r7, #12]
   1ec26:	6878      	ldr	r0, [r7, #4]
   1ec28:	f7ff fbec 	bl	1e404 <appSlaveConnUpdate>
      break;
   1ec2c:	e01d      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   1ec2e:	68f9      	ldr	r1, [r7, #12]
   1ec30:	6878      	ldr	r0, [r7, #4]
   1ec32:	f7ff fc23 	bl	1e47c <appSlaveResolvedAddrInd>
      break;
   1ec36:	e018      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   1ec38:	68f9      	ldr	r1, [r7, #12]
   1ec3a:	6878      	ldr	r0, [r7, #4]
   1ec3c:	f7ff fc74 	bl	1e528 <appSlaveRemoteConnParamReq>
      break;
   1ec40:	e013      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1ec42:	68fb      	ldr	r3, [r7, #12]
   1ec44:	7b5b      	ldrb	r3, [r3, #13]
   1ec46:	2b01      	cmp	r3, #1
   1ec48:	d10e      	bne.n	1ec68 <AppSlaveProcDmMsg+0x184>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   1ec4a:	68f9      	ldr	r1, [r7, #12]
   1ec4c:	6878      	ldr	r0, [r7, #4]
   1ec4e:	f7ff fe93 	bl	1e978 <appSlaveConnUpdateTimeout>
      }
      break;
   1ec52:	e009      	b.n	1ec68 <AppSlaveProcDmMsg+0x184>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1ec54:	2000      	movs	r0, #0
   1ec56:	f7fa f981 	bl	18f5c <HciDrvRadioBoot>
      DmDevReset();
   1ec5a:	f7f0 fee9 	bl	fa30 <DmDevReset>
      break;
   1ec5e:	e004      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>

    default:
      break;
   1ec60:	bf00      	nop
   1ec62:	e002      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>
      break;
   1ec64:	bf00      	nop
   1ec66:	e000      	b.n	1ec6a <AppSlaveProcDmMsg+0x186>
      break;
   1ec68:	bf00      	nop
  }
}
   1ec6a:	bf00      	nop
   1ec6c:	3710      	adds	r7, #16
   1ec6e:	46bd      	mov	sp, r7
   1ec70:	bd80      	pop	{r7, pc}
   1ec72:	bf00      	nop
   1ec74:	10009e7c 	.word	0x10009e7c
   1ec78:	10009f7c 	.word	0x10009f7c

0001ec7c <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   1ec7c:	b580      	push	{r7, lr}
   1ec7e:	b082      	sub	sp, #8
   1ec80:	af00      	add	r7, sp, #0
   1ec82:	603b      	str	r3, [r7, #0]
   1ec84:	4603      	mov	r3, r0
   1ec86:	71fb      	strb	r3, [r7, #7]
   1ec88:	460b      	mov	r3, r1
   1ec8a:	71bb      	strb	r3, [r7, #6]
   1ec8c:	4613      	mov	r3, r2
   1ec8e:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1ec90:	79fa      	ldrb	r2, [r7, #7]
   1ec92:	79bb      	ldrb	r3, [r7, #6]
   1ec94:	4926      	ldr	r1, [pc, #152]	; (1ed30 <appAdvSetData+0xb4>)
   1ec96:	0092      	lsls	r2, r2, #2
   1ec98:	4413      	add	r3, r2
   1ec9a:	683a      	ldr	r2, [r7, #0]
   1ec9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   1eca0:	79fa      	ldrb	r2, [r7, #7]
   1eca2:	79bb      	ldrb	r3, [r7, #6]
   1eca4:	4922      	ldr	r1, [pc, #136]	; (1ed30 <appAdvSetData+0xb4>)
   1eca6:	0092      	lsls	r2, r2, #2
   1eca8:	4413      	add	r3, r2
   1ecaa:	3308      	adds	r3, #8
   1ecac:	88ba      	ldrh	r2, [r7, #4]
   1ecae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1ecb2:	79fa      	ldrb	r2, [r7, #7]
   1ecb4:	79bb      	ldrb	r3, [r7, #6]
   1ecb6:	491e      	ldr	r1, [pc, #120]	; (1ed30 <appAdvSetData+0xb4>)
   1ecb8:	0092      	lsls	r2, r2, #2
   1ecba:	4413      	add	r3, r2
   1ecbc:	330c      	adds	r3, #12
   1ecbe:	8a3a      	ldrh	r2, [r7, #16]
   1ecc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1ecc4:	79fb      	ldrb	r3, [r7, #7]
   1ecc6:	491a      	ldr	r1, [pc, #104]	; (1ed30 <appAdvSetData+0xb4>)
   1ecc8:	3314      	adds	r3, #20
   1ecca:	8aba      	ldrh	r2, [r7, #20]
   1eccc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1ecd0:	79fa      	ldrb	r2, [r7, #7]
   1ecd2:	79bb      	ldrb	r3, [r7, #6]
   1ecd4:	4916      	ldr	r1, [pc, #88]	; (1ed30 <appAdvSetData+0xb4>)
   1ecd6:	0092      	lsls	r2, r2, #2
   1ecd8:	4413      	add	r3, r2
   1ecda:	3310      	adds	r3, #16
   1ecdc:	2200      	movs	r2, #0
   1ecde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1ece2:	79fb      	ldrb	r3, [r7, #7]
   1ece4:	4a12      	ldr	r2, [pc, #72]	; (1ed30 <appAdvSetData+0xb4>)
   1ece6:	4413      	add	r3, r2
   1ece8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1ecec:	2b03      	cmp	r3, #3
   1ecee:	d015      	beq.n	1ed1c <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1ecf0:	79bb      	ldrb	r3, [r7, #6]
   1ecf2:	085b      	lsrs	r3, r3, #1
   1ecf4:	b2da      	uxtb	r2, r3
   1ecf6:	4b0e      	ldr	r3, [pc, #56]	; (1ed30 <appAdvSetData+0xb4>)
   1ecf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1ecfc:	429a      	cmp	r2, r3
   1ecfe:	d10d      	bne.n	1ed1c <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1ed00:	88bb      	ldrh	r3, [r7, #4]
   1ed02:	2bfb      	cmp	r3, #251	; 0xfb
   1ed04:	d80a      	bhi.n	1ed1c <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   1ed06:	88ba      	ldrh	r2, [r7, #4]
   1ed08:	8abb      	ldrh	r3, [r7, #20]
   1ed0a:	429a      	cmp	r2, r3
   1ed0c:	d806      	bhi.n	1ed1c <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   1ed0e:	79ba      	ldrb	r2, [r7, #6]
   1ed10:	79fb      	ldrb	r3, [r7, #7]
   1ed12:	4611      	mov	r1, r2
   1ed14:	4618      	mov	r0, r3
   1ed16:	f7ff f923 	bl	1df60 <appSetAdvScanDataFrag>
   1ed1a:	e005      	b.n	1ed28 <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   1ed1c:	79fb      	ldrb	r3, [r7, #7]
   1ed1e:	4a04      	ldr	r2, [pc, #16]	; (1ed30 <appAdvSetData+0xb4>)
   1ed20:	4413      	add	r3, r2
   1ed22:	2200      	movs	r2, #0
   1ed24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1ed28:	bf00      	nop
   1ed2a:	3708      	adds	r7, #8
   1ed2c:	46bd      	mov	sp, r7
   1ed2e:	bd80      	pop	{r7, pc}
   1ed30:	10009f7c 	.word	0x10009f7c

0001ed34 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   1ed34:	b580      	push	{r7, lr}
   1ed36:	b086      	sub	sp, #24
   1ed38:	af00      	add	r7, sp, #0
   1ed3a:	60b9      	str	r1, [r7, #8]
   1ed3c:	607a      	str	r2, [r7, #4]
   1ed3e:	603b      	str	r3, [r7, #0]
   1ed40:	4603      	mov	r3, r0
   1ed42:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1ed44:	7bfb      	ldrb	r3, [r7, #15]
   1ed46:	68b9      	ldr	r1, [r7, #8]
   1ed48:	4618      	mov	r0, r3
   1ed4a:	f7ff f89f 	bl	1de8c <appSlaveConnectableAdv>
   1ed4e:	4603      	mov	r3, r0
   1ed50:	2b00      	cmp	r3, #0
   1ed52:	d009      	beq.n	1ed68 <appAdvStart+0x34>
   1ed54:	2001      	movs	r0, #1
   1ed56:	f7fe fe79 	bl	1da4c <appNumConns>
   1ed5a:	4603      	mov	r3, r0
   1ed5c:	461a      	mov	r2, r3
   1ed5e:	4b35      	ldr	r3, [pc, #212]	; (1ee34 <appAdvStart+0x100>)
   1ed60:	681b      	ldr	r3, [r3, #0]
   1ed62:	781b      	ldrb	r3, [r3, #0]
   1ed64:	429a      	cmp	r2, r3
   1ed66:	d24e      	bcs.n	1ee06 <appAdvStart+0xd2>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1ed68:	2300      	movs	r3, #0
   1ed6a:	75fb      	strb	r3, [r7, #23]
   1ed6c:	e040      	b.n	1edf0 <appAdvStart+0xbc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   1ed6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1ed72:	2b00      	cmp	r3, #0
   1ed74:	d023      	beq.n	1edbe <appAdvStart+0x8a>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   1ed76:	7dfb      	ldrb	r3, [r7, #23]
   1ed78:	68ba      	ldr	r2, [r7, #8]
   1ed7a:	4413      	add	r3, r2
   1ed7c:	7818      	ldrb	r0, [r3, #0]
   1ed7e:	7dfb      	ldrb	r3, [r7, #23]
   1ed80:	005b      	lsls	r3, r3, #1
   1ed82:	687a      	ldr	r2, [r7, #4]
   1ed84:	4413      	add	r3, r2
   1ed86:	8819      	ldrh	r1, [r3, #0]
   1ed88:	7dfb      	ldrb	r3, [r7, #23]
   1ed8a:	005b      	lsls	r3, r3, #1
   1ed8c:	687a      	ldr	r2, [r7, #4]
   1ed8e:	4413      	add	r3, r2
   1ed90:	881b      	ldrh	r3, [r3, #0]
   1ed92:	461a      	mov	r2, r3
   1ed94:	f7ef ff3c 	bl	ec10 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   1ed98:	7dfb      	ldrb	r3, [r7, #23]
   1ed9a:	68ba      	ldr	r2, [r7, #8]
   1ed9c:	4413      	add	r3, r2
   1ed9e:	7818      	ldrb	r0, [r3, #0]
   1eda0:	7dfb      	ldrb	r3, [r7, #23]
   1eda2:	68ba      	ldr	r2, [r7, #8]
   1eda4:	4413      	add	r3, r2
   1eda6:	781b      	ldrb	r3, [r3, #0]
   1eda8:	461a      	mov	r2, r3
   1edaa:	4b23      	ldr	r3, [pc, #140]	; (1ee38 <appAdvStart+0x104>)
   1edac:	4413      	add	r3, r2
   1edae:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
   1edb2:	4b21      	ldr	r3, [pc, #132]	; (1ee38 <appAdvStart+0x104>)
   1edb4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   1edb8:	4b20      	ldr	r3, [pc, #128]	; (1ee3c <appAdvStart+0x108>)
   1edba:	f7ef fe87 	bl	eacc <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1edbe:	7dfb      	ldrb	r3, [r7, #23]
   1edc0:	68ba      	ldr	r2, [r7, #8]
   1edc2:	4413      	add	r3, r2
   1edc4:	781b      	ldrb	r3, [r3, #0]
   1edc6:	461a      	mov	r2, r3
   1edc8:	4b1b      	ldr	r3, [pc, #108]	; (1ee38 <appAdvStart+0x104>)
   1edca:	4413      	add	r3, r2
   1edcc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   1edd0:	2b00      	cmp	r3, #0
   1edd2:	d10a      	bne.n	1edea <appAdvStart+0xb6>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1edd4:	7dfb      	ldrb	r3, [r7, #23]
   1edd6:	68ba      	ldr	r2, [r7, #8]
   1edd8:	4413      	add	r3, r2
   1edda:	781a      	ldrb	r2, [r3, #0]
   1eddc:	4b16      	ldr	r3, [pc, #88]	; (1ee38 <appAdvStart+0x104>)
   1edde:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1ede2:	4619      	mov	r1, r3
   1ede4:	4610      	mov	r0, r2
   1ede6:	f7ff f93f 	bl	1e068 <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   1edea:	7dfb      	ldrb	r3, [r7, #23]
   1edec:	3301      	adds	r3, #1
   1edee:	75fb      	strb	r3, [r7, #23]
   1edf0:	7dfa      	ldrb	r2, [r7, #23]
   1edf2:	7bfb      	ldrb	r3, [r7, #15]
   1edf4:	429a      	cmp	r2, r3
   1edf6:	d3ba      	bcc.n	1ed6e <appAdvStart+0x3a>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1edf8:	7bf8      	ldrb	r0, [r7, #15]
   1edfa:	6a3b      	ldr	r3, [r7, #32]
   1edfc:	683a      	ldr	r2, [r7, #0]
   1edfe:	68b9      	ldr	r1, [r7, #8]
   1ee00:	f7ef fea2 	bl	eb48 <DmAdvStart>

    return;
   1ee04:	e013      	b.n	1ee2e <appAdvStart+0xfa>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   1ee06:	2300      	movs	r3, #0
   1ee08:	75fb      	strb	r3, [r7, #23]
   1ee0a:	e00c      	b.n	1ee26 <appAdvStart+0xf2>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1ee0c:	7dfb      	ldrb	r3, [r7, #23]
   1ee0e:	68ba      	ldr	r2, [r7, #8]
   1ee10:	4413      	add	r3, r2
   1ee12:	781b      	ldrb	r3, [r3, #0]
   1ee14:	461a      	mov	r2, r3
   1ee16:	4b08      	ldr	r3, [pc, #32]	; (1ee38 <appAdvStart+0x104>)
   1ee18:	4413      	add	r3, r2
   1ee1a:	2203      	movs	r2, #3
   1ee1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   1ee20:	7dfb      	ldrb	r3, [r7, #23]
   1ee22:	3301      	adds	r3, #1
   1ee24:	75fb      	strb	r3, [r7, #23]
   1ee26:	7dfa      	ldrb	r2, [r7, #23]
   1ee28:	7bfb      	ldrb	r3, [r7, #15]
   1ee2a:	429a      	cmp	r2, r3
   1ee2c:	d3ee      	bcc.n	1ee0c <appAdvStart+0xd8>
  }
}
   1ee2e:	3718      	adds	r7, #24
   1ee30:	46bd      	mov	sp, r7
   1ee32:	bd80      	pop	{r7, pc}
   1ee34:	10009e54 	.word	0x10009e54
   1ee38:	10009f7c 	.word	0x10009f7c
   1ee3c:	10009fac 	.word	0x10009fac

0001ee40 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   1ee40:	b580      	push	{r7, lr}
   1ee42:	b088      	sub	sp, #32
   1ee44:	af02      	add	r7, sp, #8
   1ee46:	60b9      	str	r1, [r7, #8]
   1ee48:	607a      	str	r2, [r7, #4]
   1ee4a:	603b      	str	r3, [r7, #0]
   1ee4c:	4603      	mov	r3, r0
   1ee4e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   1ee50:	4b25      	ldr	r3, [pc, #148]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1ee52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1ee56:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   1ee58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1ee5c:	2b02      	cmp	r3, #2
   1ee5e:	d114      	bne.n	1ee8a <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   1ee60:	f7fa fccc 	bl	197fc <AppDbCheckBonded>
   1ee64:	4603      	mov	r3, r0
   1ee66:	2b00      	cmp	r3, #0
   1ee68:	d107      	bne.n	1ee7a <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   1ee6a:	2001      	movs	r0, #1
   1ee6c:	f000 f8c0 	bl	1eff0 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   1ee70:	4b1d      	ldr	r3, [pc, #116]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1ee72:	2201      	movs	r2, #1
   1ee74:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1ee78:	e00c      	b.n	1ee94 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   1ee7a:	2000      	movs	r0, #0
   1ee7c:	f000 f8b8 	bl	1eff0 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1ee80:	4b19      	ldr	r3, [pc, #100]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1ee82:	2200      	movs	r2, #0
   1ee84:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1ee88:	e004      	b.n	1ee94 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   1ee8a:	4a17      	ldr	r2, [pc, #92]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1ee8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1ee90:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   1ee94:	4b14      	ldr	r3, [pc, #80]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1ee96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1ee9a:	7dba      	ldrb	r2, [r7, #22]
   1ee9c:	429a      	cmp	r2, r3
   1ee9e:	d014      	beq.n	1eeca <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   1eea0:	2300      	movs	r3, #0
   1eea2:	75fb      	strb	r3, [r7, #23]
   1eea4:	e00d      	b.n	1eec2 <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   1eea6:	7dfb      	ldrb	r3, [r7, #23]
   1eea8:	68ba      	ldr	r2, [r7, #8]
   1eeaa:	4413      	add	r3, r2
   1eeac:	781a      	ldrb	r2, [r3, #0]
   1eeae:	4b0e      	ldr	r3, [pc, #56]	; (1eee8 <appSlaveAdvStart+0xa8>)
   1eeb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1eeb4:	4619      	mov	r1, r3
   1eeb6:	4610      	mov	r0, r2
   1eeb8:	f7ff f822 	bl	1df00 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   1eebc:	7dfb      	ldrb	r3, [r7, #23]
   1eebe:	3301      	adds	r3, #1
   1eec0:	75fb      	strb	r3, [r7, #23]
   1eec2:	7dfa      	ldrb	r2, [r7, #23]
   1eec4:	7bfb      	ldrb	r3, [r7, #15]
   1eec6:	429a      	cmp	r2, r3
   1eec8:	d3ed      	bcc.n	1eea6 <appSlaveAdvStart+0x66>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1eeca:	7bf8      	ldrb	r0, [r7, #15]
   1eecc:	2301      	movs	r3, #1
   1eece:	9301      	str	r3, [sp, #4]
   1eed0:	6a3b      	ldr	r3, [r7, #32]
   1eed2:	9300      	str	r3, [sp, #0]
   1eed4:	683b      	ldr	r3, [r7, #0]
   1eed6:	687a      	ldr	r2, [r7, #4]
   1eed8:	68b9      	ldr	r1, [r7, #8]
   1eeda:	f7ff ff2b 	bl	1ed34 <appAdvStart>
}
   1eede:	bf00      	nop
   1eee0:	3718      	adds	r7, #24
   1eee2:	46bd      	mov	sp, r7
   1eee4:	bd80      	pop	{r7, pc}
   1eee6:	bf00      	nop
   1eee8:	10009f7c 	.word	0x10009f7c

0001eeec <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   1eeec:	b580      	push	{r7, lr}
   1eeee:	b084      	sub	sp, #16
   1eef0:	af00      	add	r7, sp, #0
   1eef2:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1eef4:	687b      	ldr	r3, [r7, #4]
   1eef6:	881b      	ldrh	r3, [r3, #0]
   1eef8:	3b01      	subs	r3, #1
   1eefa:	015b      	lsls	r3, r3, #5
   1eefc:	4a3b      	ldr	r2, [pc, #236]	; (1efec <AppSlaveSecProcDmMsg+0x100>)
   1eefe:	4413      	add	r3, r2
   1ef00:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1ef02:	687b      	ldr	r3, [r7, #4]
   1ef04:	789b      	ldrb	r3, [r3, #2]
   1ef06:	3b27      	subs	r3, #39	; 0x27
   1ef08:	2b17      	cmp	r3, #23
   1ef0a:	d869      	bhi.n	1efe0 <AppSlaveSecProcDmMsg+0xf4>
   1ef0c:	a201      	add	r2, pc, #4	; (adr r2, 1ef14 <AppSlaveSecProcDmMsg+0x28>)
   1ef0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ef12:	bf00      	nop
   1ef14:	0001ef75 	.word	0x0001ef75
   1ef18:	0001ef7f 	.word	0x0001ef7f
   1ef1c:	0001efe1 	.word	0x0001efe1
   1ef20:	0001ef89 	.word	0x0001ef89
   1ef24:	0001ef93 	.word	0x0001ef93
   1ef28:	0001ef9d 	.word	0x0001ef9d
   1ef2c:	0001efe1 	.word	0x0001efe1
   1ef30:	0001efe1 	.word	0x0001efe1
   1ef34:	0001efa7 	.word	0x0001efa7
   1ef38:	0001efbb 	.word	0x0001efbb
   1ef3c:	0001efb1 	.word	0x0001efb1
   1ef40:	0001efe1 	.word	0x0001efe1
   1ef44:	0001efe1 	.word	0x0001efe1
   1ef48:	0001efe1 	.word	0x0001efe1
   1ef4c:	0001efe1 	.word	0x0001efe1
   1ef50:	0001efe1 	.word	0x0001efe1
   1ef54:	0001efe1 	.word	0x0001efe1
   1ef58:	0001efe1 	.word	0x0001efe1
   1ef5c:	0001efcd 	.word	0x0001efcd
   1ef60:	0001efd7 	.word	0x0001efd7
   1ef64:	0001efe1 	.word	0x0001efe1
   1ef68:	0001efe1 	.word	0x0001efe1
   1ef6c:	0001efe1 	.word	0x0001efe1
   1ef70:	0001efc5 	.word	0x0001efc5
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   1ef74:	68f9      	ldr	r1, [r7, #12]
   1ef76:	6878      	ldr	r0, [r7, #4]
   1ef78:	f7ff fb0a 	bl	1e590 <appSlaveSecConnOpen>
      break;
   1ef7c:	e031      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   1ef7e:	68f9      	ldr	r1, [r7, #12]
   1ef80:	6878      	ldr	r0, [r7, #4]
   1ef82:	f7ff fb47 	bl	1e614 <appSecConnClose>
      break;
   1ef86:	e02c      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   1ef88:	68f9      	ldr	r1, [r7, #12]
   1ef8a:	6878      	ldr	r0, [r7, #4]
   1ef8c:	f7ff fbfc 	bl	1e788 <appSecPairCmpl>
      break;
   1ef90:	e027      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   1ef92:	68f9      	ldr	r1, [r7, #12]
   1ef94:	6878      	ldr	r0, [r7, #4]
   1ef96:	f7ff fc2b 	bl	1e7f0 <appSecPairFailed>
      break;
   1ef9a:	e022      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   1ef9c:	68f9      	ldr	r1, [r7, #12]
   1ef9e:	6878      	ldr	r0, [r7, #4]
   1efa0:	f7ff fc31 	bl	1e806 <appSecEncryptInd>
      break;
   1efa4:	e01d      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   1efa6:	68f9      	ldr	r1, [r7, #12]
   1efa8:	6878      	ldr	r0, [r7, #4]
   1efaa:	f7ff fbcd 	bl	1e748 <appSecStoreKey>
      break;
   1efae:	e018      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   1efb0:	68f9      	ldr	r1, [r7, #12]
   1efb2:	6878      	ldr	r0, [r7, #4]
   1efb4:	f7ff fb40 	bl	1e638 <appSecPairInd>
      break;
   1efb8:	e013      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   1efba:	68f9      	ldr	r1, [r7, #12]
   1efbc:	6878      	ldr	r0, [r7, #4]
   1efbe:	f7ff fc3b 	bl	1e838 <appSecFindLtk>
      break;
   1efc2:	e00e      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1efc4:	6878      	ldr	r0, [r7, #4]
   1efc6:	f7ff fc77 	bl	1e8b8 <appPrivSetAddrResEnableInd>
      break;
   1efca:	e00a      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1efcc:	68f9      	ldr	r1, [r7, #12]
   1efce:	6878      	ldr	r0, [r7, #4]
   1efd0:	f7ff fc84 	bl	1e8dc <appPrivAddDevToResListInd>
      break;
   1efd4:	e005      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1efd6:	68f9      	ldr	r1, [r7, #12]
   1efd8:	6878      	ldr	r0, [r7, #4]
   1efda:	f7ff fca9 	bl	1e930 <appPrivRemDevFromResListInd>
      break;
   1efde:	e000      	b.n	1efe2 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   1efe0:	bf00      	nop
  }
}
   1efe2:	bf00      	nop
   1efe4:	3710      	adds	r7, #16
   1efe6:	46bd      	mov	sp, r7
   1efe8:	bd80      	pop	{r7, pc}
   1efea:	bf00      	nop
   1efec:	10009e7c 	.word	0x10009e7c

0001eff0 <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   1eff0:	b480      	push	{r7}
   1eff2:	b083      	sub	sp, #12
   1eff4:	af00      	add	r7, sp, #0
   1eff6:	4603      	mov	r3, r0
   1eff8:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   1effa:	4a05      	ldr	r2, [pc, #20]	; (1f010 <AppSetBondable+0x20>)
   1effc:	79fb      	ldrb	r3, [r7, #7]
   1effe:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   1f002:	bf00      	nop
   1f004:	370c      	adds	r7, #12
   1f006:	46bd      	mov	sp, r7
   1f008:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f00c:	4770      	bx	lr
   1f00e:	bf00      	nop
   1f010:	10009f7c 	.word	0x10009f7c

0001f014 <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   1f014:	b580      	push	{r7, lr}
   1f016:	b082      	sub	sp, #8
   1f018:	af00      	add	r7, sp, #0
   1f01a:	4603      	mov	r3, r0
   1f01c:	6039      	str	r1, [r7, #0]
   1f01e:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   1f020:	4a05      	ldr	r2, [pc, #20]	; (1f038 <AppSetAdvPeerAddr+0x24>)
   1f022:	79fb      	ldrb	r3, [r7, #7]
   1f024:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   1f028:	6839      	ldr	r1, [r7, #0]
   1f02a:	4804      	ldr	r0, [pc, #16]	; (1f03c <AppSetAdvPeerAddr+0x28>)
   1f02c:	f7f4 fd30 	bl	13a90 <BdaCpy>
}
   1f030:	bf00      	nop
   1f032:	3708      	adds	r7, #8
   1f034:	46bd      	mov	sp, r7
   1f036:	bd80      	pop	{r7, pc}
   1f038:	10009f7c 	.word	0x10009f7c
   1f03c:	10009fac 	.word	0x10009fac

0001f040 <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   1f040:	b580      	push	{r7, lr}
   1f042:	b084      	sub	sp, #16
   1f044:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1f046:	4b15      	ldr	r3, [pc, #84]	; (1f09c <appSlaveLegAdvStart+0x5c>)
   1f048:	681a      	ldr	r2, [r3, #0]
   1f04a:	4b15      	ldr	r3, [pc, #84]	; (1f0a0 <appSlaveLegAdvStart+0x60>)
   1f04c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1f050:	005b      	lsls	r3, r3, #1
   1f052:	4413      	add	r3, r2
   1f054:	88db      	ldrh	r3, [r3, #6]
   1f056:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   1f058:	88bb      	ldrh	r3, [r7, #4]
   1f05a:	2b00      	cmp	r3, #0
   1f05c:	d015      	beq.n	1f08a <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f05e:	2300      	movs	r3, #0
   1f060:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   1f062:	2300      	movs	r3, #0
   1f064:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   1f066:	4b0d      	ldr	r3, [pc, #52]	; (1f09c <appSlaveLegAdvStart+0x5c>)
   1f068:	681a      	ldr	r2, [r3, #0]
   1f06a:	4b0d      	ldr	r3, [pc, #52]	; (1f0a0 <appSlaveLegAdvStart+0x60>)
   1f06c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   1f070:	005b      	lsls	r3, r3, #1
   1f072:	18d0      	adds	r0, r2, r3
   1f074:	1d3a      	adds	r2, r7, #4
   1f076:	1df9      	adds	r1, r7, #7
   1f078:	2301      	movs	r3, #1
   1f07a:	9301      	str	r3, [sp, #4]
   1f07c:	1dbb      	adds	r3, r7, #6
   1f07e:	9300      	str	r3, [sp, #0]
   1f080:	4603      	mov	r3, r0
   1f082:	2001      	movs	r0, #1
   1f084:	f7ff fe56 	bl	1ed34 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   1f088:	e003      	b.n	1f092 <appSlaveLegAdvStart+0x52>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1f08a:	4b05      	ldr	r3, [pc, #20]	; (1f0a0 <appSlaveLegAdvStart+0x60>)
   1f08c:	2203      	movs	r2, #3
   1f08e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   1f092:	bf00      	nop
   1f094:	3708      	adds	r7, #8
   1f096:	46bd      	mov	sp, r7
   1f098:	bd80      	pop	{r7, pc}
   1f09a:	bf00      	nop
   1f09c:	10009e78 	.word	0x10009e78
   1f0a0:	10009f7c 	.word	0x10009f7c

0001f0a4 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   1f0a4:	b580      	push	{r7, lr}
   1f0a6:	b082      	sub	sp, #8
   1f0a8:	af00      	add	r7, sp, #0
   1f0aa:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1f0ac:	4b06      	ldr	r3, [pc, #24]	; (1f0c8 <appSlaveLegAdvTypeChanged+0x24>)
   1f0ae:	2200      	movs	r2, #0
   1f0b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f0b4:	4b04      	ldr	r3, [pc, #16]	; (1f0c8 <appSlaveLegAdvTypeChanged+0x24>)
   1f0b6:	2200      	movs	r2, #0
   1f0b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   1f0bc:	f7ff ffc0 	bl	1f040 <appSlaveLegAdvStart>
}
   1f0c0:	bf00      	nop
   1f0c2:	3708      	adds	r7, #8
   1f0c4:	46bd      	mov	sp, r7
   1f0c6:	bd80      	pop	{r7, pc}
   1f0c8:	10009f7c 	.word	0x10009f7c

0001f0cc <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   1f0cc:	b580      	push	{r7, lr}
   1f0ce:	b082      	sub	sp, #8
   1f0d0:	af00      	add	r7, sp, #0
   1f0d2:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1f0d4:	4b09      	ldr	r3, [pc, #36]	; (1f0fc <appSlaveNextLegAdvState+0x30>)
   1f0d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1f0da:	3301      	adds	r3, #1
   1f0dc:	b2da      	uxtb	r2, r3
   1f0de:	4b07      	ldr	r3, [pc, #28]	; (1f0fc <appSlaveNextLegAdvState+0x30>)
   1f0e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1f0e4:	4b05      	ldr	r3, [pc, #20]	; (1f0fc <appSlaveNextLegAdvState+0x30>)
   1f0e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1f0ea:	2b02      	cmp	r3, #2
   1f0ec:	d801      	bhi.n	1f0f2 <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   1f0ee:	f7ff ffa7 	bl	1f040 <appSlaveLegAdvStart>
  }
}
   1f0f2:	bf00      	nop
   1f0f4:	3708      	adds	r7, #8
   1f0f6:	46bd      	mov	sp, r7
   1f0f8:	bd80      	pop	{r7, pc}
   1f0fa:	bf00      	nop
   1f0fc:	10009f7c 	.word	0x10009f7c

0001f100 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   1f100:	b580      	push	{r7, lr}
   1f102:	b082      	sub	sp, #8
   1f104:	af00      	add	r7, sp, #0
   1f106:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   1f108:	687b      	ldr	r3, [r7, #4]
   1f10a:	789b      	ldrb	r3, [r3, #2]
   1f10c:	2b47      	cmp	r3, #71	; 0x47
   1f10e:	d103      	bne.n	1f118 <appSlaveLegAdvStop+0x18>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   1f110:	687b      	ldr	r3, [r7, #4]
   1f112:	791b      	ldrb	r3, [r3, #4]
   1f114:	2b00      	cmp	r3, #0
   1f116:	d00c      	beq.n	1f132 <appSlaveLegAdvStop+0x32>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1f118:	4b08      	ldr	r3, [pc, #32]	; (1f13c <appSlaveLegAdvStop+0x3c>)
   1f11a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1f11e:	2b00      	cmp	r3, #0
   1f120:	d003      	beq.n	1f12a <appSlaveLegAdvStop+0x2a>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   1f122:	6878      	ldr	r0, [r7, #4]
   1f124:	f7ff ffbe 	bl	1f0a4 <appSlaveLegAdvTypeChanged>
   1f128:	e004      	b.n	1f134 <appSlaveLegAdvStop+0x34>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   1f12a:	6878      	ldr	r0, [r7, #4]
   1f12c:	f7ff ffce 	bl	1f0cc <appSlaveNextLegAdvState>
   1f130:	e000      	b.n	1f134 <appSlaveLegAdvStop+0x34>
      return;
   1f132:	bf00      	nop
  }
}
   1f134:	3708      	adds	r7, #8
   1f136:	46bd      	mov	sp, r7
   1f138:	bd80      	pop	{r7, pc}
   1f13a:	bf00      	nop
   1f13c:	10009f7c 	.word	0x10009f7c

0001f140 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   1f140:	b580      	push	{r7, lr}
   1f142:	b082      	sub	sp, #8
   1f144:	af00      	add	r7, sp, #0
   1f146:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   1f148:	687b      	ldr	r3, [r7, #4]
   1f14a:	789b      	ldrb	r3, [r3, #2]
   1f14c:	2b27      	cmp	r3, #39	; 0x27
   1f14e:	d103      	bne.n	1f158 <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1f150:	4b09      	ldr	r3, [pc, #36]	; (1f178 <appSlaveLegAdvRestart+0x38>)
   1f152:	2203      	movs	r2, #3
   1f154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   1f158:	4b07      	ldr	r3, [pc, #28]	; (1f178 <appSlaveLegAdvRestart+0x38>)
   1f15a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1f15e:	2b03      	cmp	r3, #3
   1f160:	d105      	bne.n	1f16e <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f162:	4b05      	ldr	r3, [pc, #20]	; (1f178 <appSlaveLegAdvRestart+0x38>)
   1f164:	2200      	movs	r2, #0
   1f166:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   1f16a:	f7ff ff69 	bl	1f040 <appSlaveLegAdvStart>
  }
}
   1f16e:	bf00      	nop
   1f170:	3708      	adds	r7, #8
   1f172:	46bd      	mov	sp, r7
   1f174:	bd80      	pop	{r7, pc}
   1f176:	bf00      	nop
   1f178:	10009f7c 	.word	0x10009f7c

0001f17c <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   1f17c:	b580      	push	{r7, lr}
   1f17e:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   1f180:	4b0c      	ldr	r3, [pc, #48]	; (1f1b4 <appSlaveAdvMode+0x38>)
   1f182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f184:	2b00      	cmp	r3, #0
   1f186:	d107      	bne.n	1f198 <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1f188:	4b0a      	ldr	r3, [pc, #40]	; (1f1b4 <appSlaveAdvMode+0x38>)
   1f18a:	4a0b      	ldr	r2, [pc, #44]	; (1f1b8 <appSlaveAdvMode+0x3c>)
   1f18c:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1f18e:	4b09      	ldr	r3, [pc, #36]	; (1f1b4 <appSlaveAdvMode+0x38>)
   1f190:	4a0a      	ldr	r2, [pc, #40]	; (1f1bc <appSlaveAdvMode+0x40>)
   1f192:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   1f194:	2301      	movs	r3, #1
   1f196:	e00a      	b.n	1f1ae <appSlaveAdvMode+0x32>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1f198:	4b06      	ldr	r3, [pc, #24]	; (1f1b4 <appSlaveAdvMode+0x38>)
   1f19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1f19c:	4a06      	ldr	r2, [pc, #24]	; (1f1b8 <appSlaveAdvMode+0x3c>)
   1f19e:	4293      	cmp	r3, r2
   1f1a0:	d101      	bne.n	1f1a6 <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   1f1a2:	2301      	movs	r3, #1
   1f1a4:	e003      	b.n	1f1ae <appSlaveAdvMode+0x32>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");
   1f1a6:	4806      	ldr	r0, [pc, #24]	; (1f1c0 <appSlaveAdvMode+0x44>)
   1f1a8:	f7f9 fe50 	bl	18e4c <WsfTrace>

  return FALSE;
   1f1ac:	2300      	movs	r3, #0
}
   1f1ae:	4618      	mov	r0, r3
   1f1b0:	bd80      	pop	{r7, pc}
   1f1b2:	bf00      	nop
   1f1b4:	10009f7c 	.word	0x10009f7c
   1f1b8:	0001f101 	.word	0x0001f101
   1f1bc:	0001f141 	.word	0x0001f141
   1f1c0:	00022cd8 	.word	0x00022cd8

0001f1c4 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   1f1c4:	b580      	push	{r7, lr}
   1f1c6:	b084      	sub	sp, #16
   1f1c8:	af02      	add	r7, sp, #8
   1f1ca:	4603      	mov	r3, r0
   1f1cc:	603a      	str	r2, [r7, #0]
   1f1ce:	71fb      	strb	r3, [r7, #7]
   1f1d0:	460b      	mov	r3, r1
   1f1d2:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   1f1d4:	f7ff ffd2 	bl	1f17c <appSlaveAdvMode>
   1f1d8:	4603      	mov	r3, r0
   1f1da:	2b00      	cmp	r3, #0
   1f1dc:	d00f      	beq.n	1f1fe <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   1f1de:	79bb      	ldrb	r3, [r7, #6]
   1f1e0:	2b1f      	cmp	r3, #31
   1f1e2:	d901      	bls.n	1f1e8 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   1f1e4:	231f      	movs	r3, #31
   1f1e6:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   1f1e8:	79bb      	ldrb	r3, [r7, #6]
   1f1ea:	b29a      	uxth	r2, r3
   1f1ec:	79f9      	ldrb	r1, [r7, #7]
   1f1ee:	231f      	movs	r3, #31
   1f1f0:	9301      	str	r3, [sp, #4]
   1f1f2:	231f      	movs	r3, #31
   1f1f4:	9300      	str	r3, [sp, #0]
   1f1f6:	683b      	ldr	r3, [r7, #0]
   1f1f8:	2000      	movs	r0, #0
   1f1fa:	f7ff fd3f 	bl	1ec7c <appAdvSetData>
  }
}
   1f1fe:	bf00      	nop
   1f200:	3708      	adds	r7, #8
   1f202:	46bd      	mov	sp, r7
   1f204:	bd80      	pop	{r7, pc}
	...

0001f208 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   1f208:	b580      	push	{r7, lr}
   1f20a:	b088      	sub	sp, #32
   1f20c:	af04      	add	r7, sp, #16
   1f20e:	4603      	mov	r3, r0
   1f210:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   1f212:	f7ff ffb3 	bl	1f17c <appSlaveAdvMode>
   1f216:	4603      	mov	r3, r0
   1f218:	2b00      	cmp	r3, #0
   1f21a:	d01a      	beq.n	1f252 <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1f21c:	2300      	movs	r3, #0
   1f21e:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   1f220:	2300      	movs	r3, #0
   1f222:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1f224:	4b0d      	ldr	r3, [pc, #52]	; (1f25c <AppAdvStart+0x54>)
   1f226:	2200      	movs	r2, #0
   1f228:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f22c:	4b0c      	ldr	r3, [pc, #48]	; (1f260 <AppAdvStart+0x58>)
   1f22e:	681b      	ldr	r3, [r3, #0]
   1f230:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   1f232:	4b0b      	ldr	r3, [pc, #44]	; (1f260 <AppAdvStart+0x58>)
   1f234:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1f236:	4618      	mov	r0, r3
   1f238:	f107 010f 	add.w	r1, r7, #15
   1f23c:	79fb      	ldrb	r3, [r7, #7]
   1f23e:	9302      	str	r3, [sp, #8]
   1f240:	2301      	movs	r3, #1
   1f242:	9301      	str	r3, [sp, #4]
   1f244:	f107 030e 	add.w	r3, r7, #14
   1f248:	9300      	str	r3, [sp, #0]
   1f24a:	4603      	mov	r3, r0
   1f24c:	2001      	movs	r0, #1
   1f24e:	f7ff fdf7 	bl	1ee40 <appSlaveAdvStart>
  }
}
   1f252:	bf00      	nop
   1f254:	3710      	adds	r7, #16
   1f256:	46bd      	mov	sp, r7
   1f258:	bd80      	pop	{r7, pc}
   1f25a:	bf00      	nop
   1f25c:	10009f7c 	.word	0x10009f7c
   1f260:	10009e78 	.word	0x10009e78

0001f264 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1f264:	b580      	push	{r7, lr}
   1f266:	b088      	sub	sp, #32
   1f268:	af00      	add	r7, sp, #0
   1f26a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   1f26c:	2300      	movs	r3, #0
   1f26e:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   1f270:	f7fd fb50 	bl	1c914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1f274:	4b40      	ldr	r3, [pc, #256]	; (1f378 <pvPortMalloc+0x114>)
   1f276:	681b      	ldr	r3, [r3, #0]
   1f278:	2b00      	cmp	r3, #0
   1f27a:	d104      	bne.n	1f286 <pvPortMalloc+0x22>
		{
			prvHeapInit();
   1f27c:	f000 f8be 	bl	1f3fc <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   1f280:	4b3d      	ldr	r3, [pc, #244]	; (1f378 <pvPortMalloc+0x114>)
   1f282:	2201      	movs	r2, #1
   1f284:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   1f286:	687b      	ldr	r3, [r7, #4]
   1f288:	2b00      	cmp	r3, #0
   1f28a:	d00e      	beq.n	1f2aa <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   1f28c:	2308      	movs	r3, #8
   1f28e:	461a      	mov	r2, r3
   1f290:	687b      	ldr	r3, [r7, #4]
   1f292:	4413      	add	r3, r2
   1f294:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1f296:	687b      	ldr	r3, [r7, #4]
   1f298:	f003 0307 	and.w	r3, r3, #7
   1f29c:	2b00      	cmp	r3, #0
   1f29e:	d004      	beq.n	1f2aa <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1f2a0:	687b      	ldr	r3, [r7, #4]
   1f2a2:	f023 0307 	bic.w	r3, r3, #7
   1f2a6:	3308      	adds	r3, #8
   1f2a8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1f2aa:	687b      	ldr	r3, [r7, #4]
   1f2ac:	2b00      	cmp	r3, #0
   1f2ae:	d057      	beq.n	1f360 <pvPortMalloc+0xfc>
   1f2b0:	687b      	ldr	r3, [r7, #4]
   1f2b2:	f643 72f7 	movw	r2, #16375	; 0x3ff7
   1f2b6:	4293      	cmp	r3, r2
   1f2b8:	d852      	bhi.n	1f360 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   1f2ba:	4b30      	ldr	r3, [pc, #192]	; (1f37c <pvPortMalloc+0x118>)
   1f2bc:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   1f2be:	4b2f      	ldr	r3, [pc, #188]	; (1f37c <pvPortMalloc+0x118>)
   1f2c0:	681b      	ldr	r3, [r3, #0]
   1f2c2:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1f2c4:	e004      	b.n	1f2d0 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
   1f2c6:	69fb      	ldr	r3, [r7, #28]
   1f2c8:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   1f2ca:	69fb      	ldr	r3, [r7, #28]
   1f2cc:	681b      	ldr	r3, [r3, #0]
   1f2ce:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1f2d0:	69fb      	ldr	r3, [r7, #28]
   1f2d2:	685a      	ldr	r2, [r3, #4]
   1f2d4:	687b      	ldr	r3, [r7, #4]
   1f2d6:	429a      	cmp	r2, r3
   1f2d8:	d203      	bcs.n	1f2e2 <pvPortMalloc+0x7e>
   1f2da:	69fb      	ldr	r3, [r7, #28]
   1f2dc:	681b      	ldr	r3, [r3, #0]
   1f2de:	2b00      	cmp	r3, #0
   1f2e0:	d1f1      	bne.n	1f2c6 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   1f2e2:	69fb      	ldr	r3, [r7, #28]
   1f2e4:	4a26      	ldr	r2, [pc, #152]	; (1f380 <pvPortMalloc+0x11c>)
   1f2e6:	4293      	cmp	r3, r2
   1f2e8:	d03a      	beq.n	1f360 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1f2ea:	69bb      	ldr	r3, [r7, #24]
   1f2ec:	681b      	ldr	r3, [r3, #0]
   1f2ee:	2208      	movs	r2, #8
   1f2f0:	4413      	add	r3, r2
   1f2f2:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1f2f4:	69fb      	ldr	r3, [r7, #28]
   1f2f6:	681a      	ldr	r2, [r3, #0]
   1f2f8:	69bb      	ldr	r3, [r7, #24]
   1f2fa:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1f2fc:	69fb      	ldr	r3, [r7, #28]
   1f2fe:	685a      	ldr	r2, [r3, #4]
   1f300:	687b      	ldr	r3, [r7, #4]
   1f302:	1ad3      	subs	r3, r2, r3
   1f304:	2208      	movs	r2, #8
   1f306:	0052      	lsls	r2, r2, #1
   1f308:	4293      	cmp	r3, r2
   1f30a:	d922      	bls.n	1f352 <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1f30c:	69fa      	ldr	r2, [r7, #28]
   1f30e:	687b      	ldr	r3, [r7, #4]
   1f310:	4413      	add	r3, r2
   1f312:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1f314:	69fb      	ldr	r3, [r7, #28]
   1f316:	685a      	ldr	r2, [r3, #4]
   1f318:	687b      	ldr	r3, [r7, #4]
   1f31a:	1ad2      	subs	r2, r2, r3
   1f31c:	68fb      	ldr	r3, [r7, #12]
   1f31e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   1f320:	69fb      	ldr	r3, [r7, #28]
   1f322:	687a      	ldr	r2, [r7, #4]
   1f324:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1f326:	68fb      	ldr	r3, [r7, #12]
   1f328:	685b      	ldr	r3, [r3, #4]
   1f32a:	60bb      	str	r3, [r7, #8]
   1f32c:	4b13      	ldr	r3, [pc, #76]	; (1f37c <pvPortMalloc+0x118>)
   1f32e:	613b      	str	r3, [r7, #16]
   1f330:	e002      	b.n	1f338 <pvPortMalloc+0xd4>
   1f332:	693b      	ldr	r3, [r7, #16]
   1f334:	681b      	ldr	r3, [r3, #0]
   1f336:	613b      	str	r3, [r7, #16]
   1f338:	693b      	ldr	r3, [r7, #16]
   1f33a:	681b      	ldr	r3, [r3, #0]
   1f33c:	685a      	ldr	r2, [r3, #4]
   1f33e:	68bb      	ldr	r3, [r7, #8]
   1f340:	429a      	cmp	r2, r3
   1f342:	d3f6      	bcc.n	1f332 <pvPortMalloc+0xce>
   1f344:	693b      	ldr	r3, [r7, #16]
   1f346:	681a      	ldr	r2, [r3, #0]
   1f348:	68fb      	ldr	r3, [r7, #12]
   1f34a:	601a      	str	r2, [r3, #0]
   1f34c:	693b      	ldr	r3, [r7, #16]
   1f34e:	68fa      	ldr	r2, [r7, #12]
   1f350:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1f352:	4b0c      	ldr	r3, [pc, #48]	; (1f384 <pvPortMalloc+0x120>)
   1f354:	681a      	ldr	r2, [r3, #0]
   1f356:	69fb      	ldr	r3, [r7, #28]
   1f358:	685b      	ldr	r3, [r3, #4]
   1f35a:	1ad3      	subs	r3, r2, r3
   1f35c:	4a09      	ldr	r2, [pc, #36]	; (1f384 <pvPortMalloc+0x120>)
   1f35e:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1f360:	f7fd fb1e 	bl	1c9a0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1f364:	697b      	ldr	r3, [r7, #20]
   1f366:	2b00      	cmp	r3, #0
   1f368:	d101      	bne.n	1f36e <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1f36a:	f7fa ff3c 	bl	1a1e6 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   1f36e:	697b      	ldr	r3, [r7, #20]
}
   1f370:	4618      	mov	r0, r3
   1f372:	3720      	adds	r7, #32
   1f374:	46bd      	mov	sp, r7
   1f376:	bd80      	pop	{r7, pc}
   1f378:	10009260 	.word	0x10009260
   1f37c:	10009250 	.word	0x10009250
   1f380:	10009258 	.word	0x10009258
   1f384:	10002ccc 	.word	0x10002ccc

0001f388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1f388:	b580      	push	{r7, lr}
   1f38a:	b086      	sub	sp, #24
   1f38c:	af00      	add	r7, sp, #0
   1f38e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   1f390:	687b      	ldr	r3, [r7, #4]
   1f392:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   1f394:	687b      	ldr	r3, [r7, #4]
   1f396:	2b00      	cmp	r3, #0
   1f398:	d027      	beq.n	1f3ea <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   1f39a:	2308      	movs	r3, #8
   1f39c:	425b      	negs	r3, r3
   1f39e:	693a      	ldr	r2, [r7, #16]
   1f3a0:	4413      	add	r3, r2
   1f3a2:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   1f3a4:	693b      	ldr	r3, [r7, #16]
   1f3a6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   1f3a8:	f7fd fab4 	bl	1c914 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1f3ac:	68fb      	ldr	r3, [r7, #12]
   1f3ae:	685b      	ldr	r3, [r3, #4]
   1f3b0:	60bb      	str	r3, [r7, #8]
   1f3b2:	4b10      	ldr	r3, [pc, #64]	; (1f3f4 <vPortFree+0x6c>)
   1f3b4:	617b      	str	r3, [r7, #20]
   1f3b6:	e002      	b.n	1f3be <vPortFree+0x36>
   1f3b8:	697b      	ldr	r3, [r7, #20]
   1f3ba:	681b      	ldr	r3, [r3, #0]
   1f3bc:	617b      	str	r3, [r7, #20]
   1f3be:	697b      	ldr	r3, [r7, #20]
   1f3c0:	681b      	ldr	r3, [r3, #0]
   1f3c2:	685a      	ldr	r2, [r3, #4]
   1f3c4:	68bb      	ldr	r3, [r7, #8]
   1f3c6:	429a      	cmp	r2, r3
   1f3c8:	d3f6      	bcc.n	1f3b8 <vPortFree+0x30>
   1f3ca:	697b      	ldr	r3, [r7, #20]
   1f3cc:	681a      	ldr	r2, [r3, #0]
   1f3ce:	68fb      	ldr	r3, [r7, #12]
   1f3d0:	601a      	str	r2, [r3, #0]
   1f3d2:	697b      	ldr	r3, [r7, #20]
   1f3d4:	68fa      	ldr	r2, [r7, #12]
   1f3d6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1f3d8:	68fb      	ldr	r3, [r7, #12]
   1f3da:	685a      	ldr	r2, [r3, #4]
   1f3dc:	4b06      	ldr	r3, [pc, #24]	; (1f3f8 <vPortFree+0x70>)
   1f3de:	681b      	ldr	r3, [r3, #0]
   1f3e0:	4413      	add	r3, r2
   1f3e2:	4a05      	ldr	r2, [pc, #20]	; (1f3f8 <vPortFree+0x70>)
   1f3e4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   1f3e6:	f7fd fadb 	bl	1c9a0 <xTaskResumeAll>
	}
}
   1f3ea:	bf00      	nop
   1f3ec:	3718      	adds	r7, #24
   1f3ee:	46bd      	mov	sp, r7
   1f3f0:	bd80      	pop	{r7, pc}
   1f3f2:	bf00      	nop
   1f3f4:	10009250 	.word	0x10009250
   1f3f8:	10002ccc 	.word	0x10002ccc

0001f3fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   1f3fc:	b480      	push	{r7}
   1f3fe:	b083      	sub	sp, #12
   1f400:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1f402:	4b10      	ldr	r3, [pc, #64]	; (1f444 <prvHeapInit+0x48>)
   1f404:	f023 0307 	bic.w	r3, r3, #7
   1f408:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1f40a:	4a0f      	ldr	r2, [pc, #60]	; (1f448 <prvHeapInit+0x4c>)
   1f40c:	687b      	ldr	r3, [r7, #4]
   1f40e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   1f410:	4b0d      	ldr	r3, [pc, #52]	; (1f448 <prvHeapInit+0x4c>)
   1f412:	2200      	movs	r2, #0
   1f414:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1f416:	4b0d      	ldr	r3, [pc, #52]	; (1f44c <prvHeapInit+0x50>)
   1f418:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1f41c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   1f41e:	4b0b      	ldr	r3, [pc, #44]	; (1f44c <prvHeapInit+0x50>)
   1f420:	2200      	movs	r2, #0
   1f422:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   1f424:	687b      	ldr	r3, [r7, #4]
   1f426:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1f428:	683b      	ldr	r3, [r7, #0]
   1f42a:	f643 72f8 	movw	r2, #16376	; 0x3ff8
   1f42e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1f430:	683b      	ldr	r3, [r7, #0]
   1f432:	4a06      	ldr	r2, [pc, #24]	; (1f44c <prvHeapInit+0x50>)
   1f434:	601a      	str	r2, [r3, #0]
}
   1f436:	bf00      	nop
   1f438:	370c      	adds	r7, #12
   1f43a:	46bd      	mov	sp, r7
   1f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f440:	4770      	bx	lr
   1f442:	bf00      	nop
   1f444:	10005258 	.word	0x10005258
   1f448:	10009250 	.word	0x10009250
   1f44c:	10009258 	.word	0x10009258

0001f450 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   1f450:	4811      	ldr	r0, [pc, #68]	; (1f498 <zero_loop+0x12>)
   1f452:	4912      	ldr	r1, [pc, #72]	; (1f49c <zero_loop+0x16>)
   1f454:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   1f456:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   1f45a:	4811      	ldr	r0, [pc, #68]	; (1f4a0 <zero_loop+0x1a>)
   1f45c:	6801      	ldr	r1, [r0, #0]
   1f45e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1f462:	6001      	str	r1, [r0, #0]
   1f464:	f3bf 8f4f 	dsb	sy
   1f468:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   1f46c:	480d      	ldr	r0, [pc, #52]	; (1f4a4 <zero_loop+0x1e>)
   1f46e:	490e      	ldr	r1, [pc, #56]	; (1f4a8 <zero_loop+0x22>)
   1f470:	4a0e      	ldr	r2, [pc, #56]	; (1f4ac <zero_loop+0x26>)

0001f472 <copy_loop>:
   1f472:	f850 3b04 	ldr.w	r3, [r0], #4
   1f476:	f841 3b04 	str.w	r3, [r1], #4
   1f47a:	4291      	cmp	r1, r2
   1f47c:	dbf9      	blt.n	1f472 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   1f47e:	480c      	ldr	r0, [pc, #48]	; (1f4b0 <zero_loop+0x2a>)
   1f480:	490c      	ldr	r1, [pc, #48]	; (1f4b4 <zero_loop+0x2e>)
   1f482:	f04f 0200 	mov.w	r2, #0

0001f486 <zero_loop>:
   1f486:	4288      	cmp	r0, r1
   1f488:	bfb8      	it	lt
   1f48a:	f840 2b04 	strlt.w	r2, [r0], #4
   1f48e:	dbfa      	blt.n	1f486 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   1f490:	f7fa fcb8 	bl	19e04 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   1f494:	be00      	bkpt	0x0000
}
   1f496:	bf00      	nop
   1f498:	e000ed08 	.word	0xe000ed08
   1f49c:	0000c000 	.word	0x0000c000
   1f4a0:	e000ed88 	.word	0xe000ed88
   1f4a4:	000261a4 	.word	0x000261a4
   1f4a8:	10002b00 	.word	0x10002b00
   1f4ac:	100037b4 	.word	0x100037b4
   1f4b0:	100037b4 	.word	0x100037b4
   1f4b4:	1000a090 	.word	0x1000a090

0001f4b8 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   1f4b8:	b480      	push	{r7}
   1f4ba:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1f4bc:	e7fe      	b.n	1f4bc <NMI_Handler+0x4>

0001f4be <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   1f4be:	b480      	push	{r7}
   1f4c0:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1f4c2:	e7fe      	b.n	1f4c2 <BusFault_Handler+0x4>

0001f4c4 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   1f4c4:	b480      	push	{r7}
   1f4c6:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1f4c8:	e7fe      	b.n	1f4c8 <DebugMon_Handler+0x4>
   1f4ca:	0000      	movs	r0, r0
   1f4cc:	0000      	movs	r0, r0
	...

0001f4d0 <uECC_vli_sub>:
   1f4d0:	f1c3 0308 	rsb	r3, r3, #8
   1f4d4:	00db      	lsls	r3, r3, #3
   1f4d6:	b470      	push	{r4, r5, r6}
   1f4d8:	3301      	adds	r3, #1
   1f4da:	2400      	movs	r4, #0
   1f4dc:	a503      	add	r5, pc, #12	; (adr r5, 1f4ec <uECC_vli_sub+0x1c>)
   1f4de:	bf00      	nop
   1f4e0:	195b      	adds	r3, r3, r5
   1f4e2:	c920      	ldmia	r1!, {r5}
   1f4e4:	ca40      	ldmia	r2!, {r6}
   1f4e6:	1bad      	subs	r5, r5, r6
   1f4e8:	c020      	stmia	r0!, {r5}
   1f4ea:	4718      	bx	r3
   1f4ec:	c920      	ldmia	r1!, {r5}
   1f4ee:	ca40      	ldmia	r2!, {r6}
   1f4f0:	41b5      	sbcs	r5, r6
   1f4f2:	c020      	stmia	r0!, {r5}
   1f4f4:	c920      	ldmia	r1!, {r5}
   1f4f6:	ca40      	ldmia	r2!, {r6}
   1f4f8:	41b5      	sbcs	r5, r6
   1f4fa:	c020      	stmia	r0!, {r5}
   1f4fc:	c920      	ldmia	r1!, {r5}
   1f4fe:	ca40      	ldmia	r2!, {r6}
   1f500:	41b5      	sbcs	r5, r6
   1f502:	c020      	stmia	r0!, {r5}
   1f504:	c920      	ldmia	r1!, {r5}
   1f506:	ca40      	ldmia	r2!, {r6}
   1f508:	41b5      	sbcs	r5, r6
   1f50a:	c020      	stmia	r0!, {r5}
   1f50c:	c920      	ldmia	r1!, {r5}
   1f50e:	ca40      	ldmia	r2!, {r6}
   1f510:	41b5      	sbcs	r5, r6
   1f512:	c020      	stmia	r0!, {r5}
   1f514:	c920      	ldmia	r1!, {r5}
   1f516:	ca40      	ldmia	r2!, {r6}
   1f518:	41b5      	sbcs	r5, r6
   1f51a:	c020      	stmia	r0!, {r5}
   1f51c:	c920      	ldmia	r1!, {r5}
   1f51e:	ca40      	ldmia	r2!, {r6}
   1f520:	41b5      	sbcs	r5, r6
   1f522:	c020      	stmia	r0!, {r5}
   1f524:	4164      	adcs	r4, r4
   1f526:	fab4 f084 	clz	r0, r4
   1f52a:	0940      	lsrs	r0, r0, #5
   1f52c:	bc70      	pop	{r4, r5, r6}
   1f52e:	4770      	bx	lr

0001f530 <uECC_vli_mult>:
   1f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f534:	b408      	push	{r3}
   1f536:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   1f538:	b404      	push	{r2}
   1f53a:	f851 2b04 	ldr.w	r2, [r1], #4
   1f53e:	fba3 8902 	umull	r8, r9, r3, r2
   1f542:	f840 8b04 	str.w	r8, [r0], #4
   1f546:	f04f 0a00 	mov.w	sl, #0
   1f54a:	fbe4 9a62 	umaal	r9, sl, r4, r2
   1f54e:	f04f 0b00 	mov.w	fp, #0
   1f552:	fbe5 ab62 	umaal	sl, fp, r5, r2
   1f556:	f04f 0c00 	mov.w	ip, #0
   1f55a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   1f55e:	f04f 0e00 	mov.w	lr, #0
   1f562:	fbe7 ce62 	umaal	ip, lr, r7, r2
   1f566:	f851 2b04 	ldr.w	r2, [r1], #4
   1f56a:	f04f 0800 	mov.w	r8, #0
   1f56e:	fbe3 8962 	umaal	r8, r9, r3, r2
   1f572:	f840 8b04 	str.w	r8, [r0], #4
   1f576:	fbe4 9a62 	umaal	r9, sl, r4, r2
   1f57a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   1f57e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   1f582:	fbe7 ce62 	umaal	ip, lr, r7, r2
   1f586:	f851 2b04 	ldr.w	r2, [r1], #4
   1f58a:	f04f 0800 	mov.w	r8, #0
   1f58e:	fbe3 8962 	umaal	r8, r9, r3, r2
   1f592:	f840 8b04 	str.w	r8, [r0], #4
   1f596:	fbe4 9a62 	umaal	r9, sl, r4, r2
   1f59a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   1f59e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   1f5a2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   1f5a6:	f851 2b04 	ldr.w	r2, [r1], #4
   1f5aa:	f04f 0800 	mov.w	r8, #0
   1f5ae:	fbe3 8962 	umaal	r8, r9, r3, r2
   1f5b2:	f840 8b04 	str.w	r8, [r0], #4
   1f5b6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   1f5ba:	fbe5 ab62 	umaal	sl, fp, r5, r2
   1f5be:	fbe6 bc62 	umaal	fp, ip, r6, r2
   1f5c2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   1f5c6:	f851 2b04 	ldr.w	r2, [r1], #4
   1f5ca:	f04f 0800 	mov.w	r8, #0
   1f5ce:	fbe3 8962 	umaal	r8, r9, r3, r2
   1f5d2:	f840 8b04 	str.w	r8, [r0], #4
   1f5d6:	fbe4 9a62 	umaal	r9, sl, r4, r2
   1f5da:	fbe5 ab62 	umaal	sl, fp, r5, r2
   1f5de:	fbe6 bc62 	umaal	fp, ip, r6, r2
   1f5e2:	fbe7 ce62 	umaal	ip, lr, r7, r2
   1f5e6:	f840 9b04 	str.w	r9, [r0], #4
   1f5ea:	f840 ab04 	str.w	sl, [r0], #4
   1f5ee:	f840 bb04 	str.w	fp, [r0], #4
   1f5f2:	f840 cb04 	str.w	ip, [r0], #4
   1f5f6:	f840 eb04 	str.w	lr, [r0], #4
   1f5fa:	bc0c      	pop	{r2, r3}
   1f5fc:	2b05      	cmp	r3, #5
   1f5fe:	f000 811e 	beq.w	1f83e <uECC_vli_mult+0x30e>
   1f602:	680c      	ldr	r4, [r1, #0]
   1f604:	f1a0 0014 	sub.w	r0, r0, #20
   1f608:	f1a1 0114 	sub.w	r1, r1, #20
   1f60c:	f1a2 0214 	sub.w	r2, r2, #20
   1f610:	f852 eb04 	ldr.w	lr, [r2], #4
   1f614:	f04f 0500 	mov.w	r5, #0
   1f618:	f850 6b04 	ldr.w	r6, [r0], #4
   1f61c:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f620:	f852 eb04 	ldr.w	lr, [r2], #4
   1f624:	f850 7b04 	ldr.w	r7, [r0], #4
   1f628:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f62c:	f852 eb04 	ldr.w	lr, [r2], #4
   1f630:	f850 8b04 	ldr.w	r8, [r0], #4
   1f634:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f638:	f852 eb04 	ldr.w	lr, [r2], #4
   1f63c:	f850 9b04 	ldr.w	r9, [r0], #4
   1f640:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f644:	f852 eb04 	ldr.w	lr, [r2], #4
   1f648:	f850 ab04 	ldr.w	sl, [r0], #4
   1f64c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f650:	f1a0 0014 	sub.w	r0, r0, #20
   1f654:	f852 4b04 	ldr.w	r4, [r2], #4
   1f658:	f851 eb04 	ldr.w	lr, [r1], #4
   1f65c:	f04f 0c00 	mov.w	ip, #0
   1f660:	fbe4 c56e 	umaal	ip, r5, r4, lr
   1f664:	f840 cb04 	str.w	ip, [r0], #4
   1f668:	f851 eb04 	ldr.w	lr, [r1], #4
   1f66c:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f670:	f840 5b04 	str.w	r5, [r0], #4
   1f674:	f851 eb04 	ldr.w	lr, [r1], #4
   1f678:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f67c:	f840 6b04 	str.w	r6, [r0], #4
   1f680:	f851 eb04 	ldr.w	lr, [r1], #4
   1f684:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f688:	f840 7b04 	str.w	r7, [r0], #4
   1f68c:	f851 eb04 	ldr.w	lr, [r1], #4
   1f690:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f694:	f840 8b04 	str.w	r8, [r0], #4
   1f698:	f851 eb04 	ldr.w	lr, [r1], #4
   1f69c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f6a0:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   1f6a4:	2b06      	cmp	r3, #6
   1f6a6:	f000 80ca 	beq.w	1f83e <uECC_vli_mult+0x30e>
   1f6aa:	680c      	ldr	r4, [r1, #0]
   1f6ac:	f1a0 0018 	sub.w	r0, r0, #24
   1f6b0:	f1a1 0118 	sub.w	r1, r1, #24
   1f6b4:	f1a2 0218 	sub.w	r2, r2, #24
   1f6b8:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6bc:	f04f 0500 	mov.w	r5, #0
   1f6c0:	f850 6b04 	ldr.w	r6, [r0], #4
   1f6c4:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f6c8:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6cc:	f850 7b04 	ldr.w	r7, [r0], #4
   1f6d0:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f6d4:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6d8:	f850 8b04 	ldr.w	r8, [r0], #4
   1f6dc:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f6e0:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6e4:	f850 9b04 	ldr.w	r9, [r0], #4
   1f6e8:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f6ec:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6f0:	f850 ab04 	ldr.w	sl, [r0], #4
   1f6f4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f6f8:	f852 eb04 	ldr.w	lr, [r2], #4
   1f6fc:	f850 bb04 	ldr.w	fp, [r0], #4
   1f700:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   1f704:	f1a0 0018 	sub.w	r0, r0, #24
   1f708:	f852 4b04 	ldr.w	r4, [r2], #4
   1f70c:	f851 eb04 	ldr.w	lr, [r1], #4
   1f710:	f04f 0c00 	mov.w	ip, #0
   1f714:	fbe4 c56e 	umaal	ip, r5, r4, lr
   1f718:	f840 cb04 	str.w	ip, [r0], #4
   1f71c:	f851 eb04 	ldr.w	lr, [r1], #4
   1f720:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f724:	f840 5b04 	str.w	r5, [r0], #4
   1f728:	f851 eb04 	ldr.w	lr, [r1], #4
   1f72c:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f730:	f840 6b04 	str.w	r6, [r0], #4
   1f734:	f851 eb04 	ldr.w	lr, [r1], #4
   1f738:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f73c:	f840 7b04 	str.w	r7, [r0], #4
   1f740:	f851 eb04 	ldr.w	lr, [r1], #4
   1f744:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f748:	f840 8b04 	str.w	r8, [r0], #4
   1f74c:	f851 eb04 	ldr.w	lr, [r1], #4
   1f750:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f754:	f840 9b04 	str.w	r9, [r0], #4
   1f758:	f851 eb04 	ldr.w	lr, [r1], #4
   1f75c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   1f760:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   1f764:	2b07      	cmp	r3, #7
   1f766:	d06a      	beq.n	1f83e <uECC_vli_mult+0x30e>
   1f768:	b408      	push	{r3}
   1f76a:	680c      	ldr	r4, [r1, #0]
   1f76c:	f1a0 001c 	sub.w	r0, r0, #28
   1f770:	f1a1 011c 	sub.w	r1, r1, #28
   1f774:	f1a2 021c 	sub.w	r2, r2, #28
   1f778:	f852 eb04 	ldr.w	lr, [r2], #4
   1f77c:	f04f 0500 	mov.w	r5, #0
   1f780:	f850 6b04 	ldr.w	r6, [r0], #4
   1f784:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f788:	f852 eb04 	ldr.w	lr, [r2], #4
   1f78c:	f850 7b04 	ldr.w	r7, [r0], #4
   1f790:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f794:	f852 eb04 	ldr.w	lr, [r2], #4
   1f798:	f850 8b04 	ldr.w	r8, [r0], #4
   1f79c:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f7a0:	f852 eb04 	ldr.w	lr, [r2], #4
   1f7a4:	f850 9b04 	ldr.w	r9, [r0], #4
   1f7a8:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f7ac:	f852 eb04 	ldr.w	lr, [r2], #4
   1f7b0:	f850 ab04 	ldr.w	sl, [r0], #4
   1f7b4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f7b8:	f852 eb04 	ldr.w	lr, [r2], #4
   1f7bc:	f850 bb04 	ldr.w	fp, [r0], #4
   1f7c0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   1f7c4:	f852 eb04 	ldr.w	lr, [r2], #4
   1f7c8:	f850 cb04 	ldr.w	ip, [r0], #4
   1f7cc:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   1f7d0:	f1a0 001c 	sub.w	r0, r0, #28
   1f7d4:	f852 4b04 	ldr.w	r4, [r2], #4
   1f7d8:	f851 eb04 	ldr.w	lr, [r1], #4
   1f7dc:	f04f 0300 	mov.w	r3, #0
   1f7e0:	fbe4 356e 	umaal	r3, r5, r4, lr
   1f7e4:	f840 3b04 	str.w	r3, [r0], #4
   1f7e8:	f851 eb04 	ldr.w	lr, [r1], #4
   1f7ec:	fbe4 566e 	umaal	r5, r6, r4, lr
   1f7f0:	f840 5b04 	str.w	r5, [r0], #4
   1f7f4:	f851 eb04 	ldr.w	lr, [r1], #4
   1f7f8:	fbe4 676e 	umaal	r6, r7, r4, lr
   1f7fc:	f840 6b04 	str.w	r6, [r0], #4
   1f800:	f851 eb04 	ldr.w	lr, [r1], #4
   1f804:	fbe4 786e 	umaal	r7, r8, r4, lr
   1f808:	f840 7b04 	str.w	r7, [r0], #4
   1f80c:	f851 eb04 	ldr.w	lr, [r1], #4
   1f810:	fbe4 896e 	umaal	r8, r9, r4, lr
   1f814:	f840 8b04 	str.w	r8, [r0], #4
   1f818:	f851 eb04 	ldr.w	lr, [r1], #4
   1f81c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   1f820:	f840 9b04 	str.w	r9, [r0], #4
   1f824:	f851 eb04 	ldr.w	lr, [r1], #4
   1f828:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   1f82c:	f840 ab04 	str.w	sl, [r0], #4
   1f830:	f851 eb04 	ldr.w	lr, [r1], #4
   1f834:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   1f838:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   1f83c:	bc08      	pop	{r3}
   1f83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f842:	bf00      	nop
	...

0001f850 <uECC_vli_modAdd>:
   1f850:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f852:	f99d c014 	ldrsb.w	ip, [sp, #20]
   1f856:	f1cc 0408 	rsb	r4, ip, #8
   1f85a:	00e4      	lsls	r4, r4, #3
   1f85c:	3401      	adds	r4, #1
   1f85e:	469e      	mov	lr, r3
   1f860:	4623      	mov	r3, r4
   1f862:	4604      	mov	r4, r0
   1f864:	2700      	movs	r7, #0
   1f866:	a505      	add	r5, pc, #20	; (adr r5, 1f87c <uECC_vli_modAdd+0x2c>)
   1f868:	f3af 8000 	nop.w
   1f86c:	f3af 8000 	nop.w
   1f870:	195b      	adds	r3, r3, r5
   1f872:	c920      	ldmia	r1!, {r5}
   1f874:	ca40      	ldmia	r2!, {r6}
   1f876:	19ad      	adds	r5, r5, r6
   1f878:	c420      	stmia	r4!, {r5}
   1f87a:	4718      	bx	r3
   1f87c:	c920      	ldmia	r1!, {r5}
   1f87e:	ca40      	ldmia	r2!, {r6}
   1f880:	4175      	adcs	r5, r6
   1f882:	c420      	stmia	r4!, {r5}
   1f884:	c920      	ldmia	r1!, {r5}
   1f886:	ca40      	ldmia	r2!, {r6}
   1f888:	4175      	adcs	r5, r6
   1f88a:	c420      	stmia	r4!, {r5}
   1f88c:	c920      	ldmia	r1!, {r5}
   1f88e:	ca40      	ldmia	r2!, {r6}
   1f890:	4175      	adcs	r5, r6
   1f892:	c420      	stmia	r4!, {r5}
   1f894:	c920      	ldmia	r1!, {r5}
   1f896:	ca40      	ldmia	r2!, {r6}
   1f898:	4175      	adcs	r5, r6
   1f89a:	c420      	stmia	r4!, {r5}
   1f89c:	c920      	ldmia	r1!, {r5}
   1f89e:	ca40      	ldmia	r2!, {r6}
   1f8a0:	4175      	adcs	r5, r6
   1f8a2:	c420      	stmia	r4!, {r5}
   1f8a4:	c920      	ldmia	r1!, {r5}
   1f8a6:	ca40      	ldmia	r2!, {r6}
   1f8a8:	4175      	adcs	r5, r6
   1f8aa:	c420      	stmia	r4!, {r5}
   1f8ac:	c920      	ldmia	r1!, {r5}
   1f8ae:	ca40      	ldmia	r2!, {r6}
   1f8b0:	4175      	adcs	r5, r6
   1f8b2:	c420      	stmia	r4!, {r5}
   1f8b4:	417f      	adcs	r7, r7
   1f8b6:	b9c7      	cbnz	r7, 1f8ea <uECC_vli_modAdd+0x9a>
   1f8b8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1f8bc:	b25b      	sxtb	r3, r3
   1f8be:	2b00      	cmp	r3, #0
   1f8c0:	db13      	blt.n	1f8ea <uECC_vli_modAdd+0x9a>
   1f8c2:	b21a      	sxth	r2, r3
   1f8c4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   1f8c8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1f8cc:	4291      	cmp	r1, r2
   1f8ce:	d80b      	bhi.n	1f8e8 <uECC_vli_modAdd+0x98>
   1f8d0:	d30b      	bcc.n	1f8ea <uECC_vli_modAdd+0x9a>
   1f8d2:	3b01      	subs	r3, #1
   1f8d4:	b25b      	sxtb	r3, r3
   1f8d6:	1c59      	adds	r1, r3, #1
   1f8d8:	b21a      	sxth	r2, r3
   1f8da:	d006      	beq.n	1f8ea <uECC_vli_modAdd+0x9a>
   1f8dc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   1f8e0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   1f8e4:	4291      	cmp	r1, r2
   1f8e6:	d9f3      	bls.n	1f8d0 <uECC_vli_modAdd+0x80>
   1f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8ea:	4672      	mov	r2, lr
   1f8ec:	4663      	mov	r3, ip
   1f8ee:	4601      	mov	r1, r0
   1f8f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1f8f4:	f7ff bdec 	b.w	1f4d0 <uECC_vli_sub>
	...

0001f900 <uECC_vli_modSub>:
   1f900:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f902:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   1f906:	f1c4 0408 	rsb	r4, r4, #8
   1f90a:	00e4      	lsls	r4, r4, #3
   1f90c:	1c66      	adds	r6, r4, #1
   1f90e:	4686      	mov	lr, r0
   1f910:	469c      	mov	ip, r3
   1f912:	4635      	mov	r5, r6
   1f914:	4604      	mov	r4, r0
   1f916:	2700      	movs	r7, #0
   1f918:	a304      	add	r3, pc, #16	; (adr r3, 1f92c <uECC_vli_modSub+0x2c>)
   1f91a:	bf00      	nop
   1f91c:	f3af 8000 	nop.w
   1f920:	18ed      	adds	r5, r5, r3
   1f922:	c908      	ldmia	r1!, {r3}
   1f924:	ca01      	ldmia	r2!, {r0}
   1f926:	1a1b      	subs	r3, r3, r0
   1f928:	c408      	stmia	r4!, {r3}
   1f92a:	4728      	bx	r5
   1f92c:	c908      	ldmia	r1!, {r3}
   1f92e:	ca01      	ldmia	r2!, {r0}
   1f930:	4183      	sbcs	r3, r0
   1f932:	c408      	stmia	r4!, {r3}
   1f934:	c908      	ldmia	r1!, {r3}
   1f936:	ca01      	ldmia	r2!, {r0}
   1f938:	4183      	sbcs	r3, r0
   1f93a:	c408      	stmia	r4!, {r3}
   1f93c:	c908      	ldmia	r1!, {r3}
   1f93e:	ca01      	ldmia	r2!, {r0}
   1f940:	4183      	sbcs	r3, r0
   1f942:	c408      	stmia	r4!, {r3}
   1f944:	c908      	ldmia	r1!, {r3}
   1f946:	ca01      	ldmia	r2!, {r0}
   1f948:	4183      	sbcs	r3, r0
   1f94a:	c408      	stmia	r4!, {r3}
   1f94c:	c908      	ldmia	r1!, {r3}
   1f94e:	ca01      	ldmia	r2!, {r0}
   1f950:	4183      	sbcs	r3, r0
   1f952:	c408      	stmia	r4!, {r3}
   1f954:	c908      	ldmia	r1!, {r3}
   1f956:	ca01      	ldmia	r2!, {r0}
   1f958:	4183      	sbcs	r3, r0
   1f95a:	c408      	stmia	r4!, {r3}
   1f95c:	c908      	ldmia	r1!, {r3}
   1f95e:	ca01      	ldmia	r2!, {r0}
   1f960:	4183      	sbcs	r3, r0
   1f962:	c408      	stmia	r4!, {r3}
   1f964:	417f      	adcs	r7, r7
   1f966:	2f00      	cmp	r7, #0
   1f968:	d12d      	bne.n	1f9c6 <uECC_vli_modSub+0xc6>
   1f96a:	4670      	mov	r0, lr
   1f96c:	4663      	mov	r3, ip
   1f96e:	4634      	mov	r4, r6
   1f970:	4672      	mov	r2, lr
   1f972:	2100      	movs	r1, #0
   1f974:	a505      	add	r5, pc, #20	; (adr r5, 1f98c <uECC_vli_modSub+0x8c>)
   1f976:	bf00      	nop
   1f978:	f3af 8000 	nop.w
   1f97c:	f3af 8000 	nop.w
   1f980:	1964      	adds	r4, r4, r5
   1f982:	ca20      	ldmia	r2!, {r5}
   1f984:	cb40      	ldmia	r3!, {r6}
   1f986:	19ad      	adds	r5, r5, r6
   1f988:	c020      	stmia	r0!, {r5}
   1f98a:	4720      	bx	r4
   1f98c:	ca20      	ldmia	r2!, {r5}
   1f98e:	cb40      	ldmia	r3!, {r6}
   1f990:	4175      	adcs	r5, r6
   1f992:	c020      	stmia	r0!, {r5}
   1f994:	ca20      	ldmia	r2!, {r5}
   1f996:	cb40      	ldmia	r3!, {r6}
   1f998:	4175      	adcs	r5, r6
   1f99a:	c020      	stmia	r0!, {r5}
   1f99c:	ca20      	ldmia	r2!, {r5}
   1f99e:	cb40      	ldmia	r3!, {r6}
   1f9a0:	4175      	adcs	r5, r6
   1f9a2:	c020      	stmia	r0!, {r5}
   1f9a4:	ca20      	ldmia	r2!, {r5}
   1f9a6:	cb40      	ldmia	r3!, {r6}
   1f9a8:	4175      	adcs	r5, r6
   1f9aa:	c020      	stmia	r0!, {r5}
   1f9ac:	ca20      	ldmia	r2!, {r5}
   1f9ae:	cb40      	ldmia	r3!, {r6}
   1f9b0:	4175      	adcs	r5, r6
   1f9b2:	c020      	stmia	r0!, {r5}
   1f9b4:	ca20      	ldmia	r2!, {r5}
   1f9b6:	cb40      	ldmia	r3!, {r6}
   1f9b8:	4175      	adcs	r5, r6
   1f9ba:	c020      	stmia	r0!, {r5}
   1f9bc:	ca20      	ldmia	r2!, {r5}
   1f9be:	cb40      	ldmia	r3!, {r6}
   1f9c0:	4175      	adcs	r5, r6
   1f9c2:	c020      	stmia	r0!, {r5}
   1f9c4:	4149      	adcs	r1, r1
   1f9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001f9d0 <x_side_default>:
   1f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9d4:	4693      	mov	fp, r2
   1f9d6:	b09b      	sub	sp, #108	; 0x6c
   1f9d8:	4604      	mov	r4, r0
   1f9da:	4689      	mov	r9, r1
   1f9dc:	a802      	add	r0, sp, #8
   1f9de:	2220      	movs	r2, #32
   1f9e0:	2100      	movs	r1, #0
   1f9e2:	f7ec fcbb 	bl	c35c <memset>
   1f9e6:	f99b 3000 	ldrsb.w	r3, [fp]
   1f9ea:	9301      	str	r3, [sp, #4]
   1f9ec:	464a      	mov	r2, r9
   1f9ee:	4649      	mov	r1, r9
   1f9f0:	a80a      	add	r0, sp, #40	; 0x28
   1f9f2:	2503      	movs	r5, #3
   1f9f4:	461e      	mov	r6, r3
   1f9f6:	9502      	str	r5, [sp, #8]
   1f9f8:	f7ff fd9a 	bl	1f530 <uECC_vli_mult>
   1f9fc:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   1fa00:	a90a      	add	r1, sp, #40	; 0x28
   1fa02:	4620      	mov	r0, r4
   1fa04:	4798      	blx	r3
   1fa06:	f1c6 0108 	rsb	r1, r6, #8
   1fa0a:	40a9      	lsls	r1, r5
   1fa0c:	f101 0801 	add.w	r8, r1, #1
   1fa10:	aa02      	add	r2, sp, #8
   1fa12:	4641      	mov	r1, r8
   1fa14:	f10b 0a04 	add.w	sl, fp, #4
   1fa18:	4623      	mov	r3, r4
   1fa1a:	4626      	mov	r6, r4
   1fa1c:	2000      	movs	r0, #0
   1fa1e:	a703      	add	r7, pc, #12	; (adr r7, 1fa2c <x_side_default+0x5c>)
   1fa20:	19c9      	adds	r1, r1, r7
   1fa22:	ce80      	ldmia	r6!, {r7}
   1fa24:	ca20      	ldmia	r2!, {r5}
   1fa26:	1b7f      	subs	r7, r7, r5
   1fa28:	c380      	stmia	r3!, {r7}
   1fa2a:	4708      	bx	r1
   1fa2c:	ce80      	ldmia	r6!, {r7}
   1fa2e:	ca20      	ldmia	r2!, {r5}
   1fa30:	41af      	sbcs	r7, r5
   1fa32:	c380      	stmia	r3!, {r7}
   1fa34:	ce80      	ldmia	r6!, {r7}
   1fa36:	ca20      	ldmia	r2!, {r5}
   1fa38:	41af      	sbcs	r7, r5
   1fa3a:	c380      	stmia	r3!, {r7}
   1fa3c:	ce80      	ldmia	r6!, {r7}
   1fa3e:	ca20      	ldmia	r2!, {r5}
   1fa40:	41af      	sbcs	r7, r5
   1fa42:	c380      	stmia	r3!, {r7}
   1fa44:	ce80      	ldmia	r6!, {r7}
   1fa46:	ca20      	ldmia	r2!, {r5}
   1fa48:	41af      	sbcs	r7, r5
   1fa4a:	c380      	stmia	r3!, {r7}
   1fa4c:	ce80      	ldmia	r6!, {r7}
   1fa4e:	ca20      	ldmia	r2!, {r5}
   1fa50:	41af      	sbcs	r7, r5
   1fa52:	c380      	stmia	r3!, {r7}
   1fa54:	ce80      	ldmia	r6!, {r7}
   1fa56:	ca20      	ldmia	r2!, {r5}
   1fa58:	41af      	sbcs	r7, r5
   1fa5a:	c380      	stmia	r3!, {r7}
   1fa5c:	ce80      	ldmia	r6!, {r7}
   1fa5e:	ca20      	ldmia	r2!, {r5}
   1fa60:	41af      	sbcs	r7, r5
   1fa62:	c380      	stmia	r3!, {r7}
   1fa64:	4140      	adcs	r0, r0
   1fa66:	2800      	cmp	r0, #0
   1fa68:	d12d      	bne.n	1fac6 <x_side_default+0xf6>
   1fa6a:	4623      	mov	r3, r4
   1fa6c:	4652      	mov	r2, sl
   1fa6e:	4641      	mov	r1, r8
   1fa70:	4620      	mov	r0, r4
   1fa72:	2500      	movs	r5, #0
   1fa74:	a605      	add	r6, pc, #20	; (adr r6, 1fa8c <x_side_default+0xbc>)
   1fa76:	bf00      	nop
   1fa78:	f3af 8000 	nop.w
   1fa7c:	f3af 8000 	nop.w
   1fa80:	1989      	adds	r1, r1, r6
   1fa82:	c840      	ldmia	r0!, {r6}
   1fa84:	ca80      	ldmia	r2!, {r7}
   1fa86:	19f6      	adds	r6, r6, r7
   1fa88:	c340      	stmia	r3!, {r6}
   1fa8a:	4708      	bx	r1
   1fa8c:	c840      	ldmia	r0!, {r6}
   1fa8e:	ca80      	ldmia	r2!, {r7}
   1fa90:	417e      	adcs	r6, r7
   1fa92:	c340      	stmia	r3!, {r6}
   1fa94:	c840      	ldmia	r0!, {r6}
   1fa96:	ca80      	ldmia	r2!, {r7}
   1fa98:	417e      	adcs	r6, r7
   1fa9a:	c340      	stmia	r3!, {r6}
   1fa9c:	c840      	ldmia	r0!, {r6}
   1fa9e:	ca80      	ldmia	r2!, {r7}
   1faa0:	417e      	adcs	r6, r7
   1faa2:	c340      	stmia	r3!, {r6}
   1faa4:	c840      	ldmia	r0!, {r6}
   1faa6:	ca80      	ldmia	r2!, {r7}
   1faa8:	417e      	adcs	r6, r7
   1faaa:	c340      	stmia	r3!, {r6}
   1faac:	c840      	ldmia	r0!, {r6}
   1faae:	ca80      	ldmia	r2!, {r7}
   1fab0:	417e      	adcs	r6, r7
   1fab2:	c340      	stmia	r3!, {r6}
   1fab4:	c840      	ldmia	r0!, {r6}
   1fab6:	ca80      	ldmia	r2!, {r7}
   1fab8:	417e      	adcs	r6, r7
   1faba:	c340      	stmia	r3!, {r6}
   1fabc:	c840      	ldmia	r0!, {r6}
   1fabe:	ca80      	ldmia	r2!, {r7}
   1fac0:	417e      	adcs	r6, r7
   1fac2:	c340      	stmia	r3!, {r6}
   1fac4:	416d      	adcs	r5, r5
   1fac6:	464a      	mov	r2, r9
   1fac8:	f99b 3000 	ldrsb.w	r3, [fp]
   1facc:	4621      	mov	r1, r4
   1face:	a80a      	add	r0, sp, #40	; 0x28
   1fad0:	f7ff fd2e 	bl	1f530 <uECC_vli_mult>
   1fad4:	a90a      	add	r1, sp, #40	; 0x28
   1fad6:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   1fada:	4620      	mov	r0, r4
   1fadc:	4798      	blx	r3
   1fade:	4626      	mov	r6, r4
   1fae0:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   1fae4:	4641      	mov	r1, r8
   1fae6:	4622      	mov	r2, r4
   1fae8:	2000      	movs	r0, #0
   1faea:	a504      	add	r5, pc, #16	; (adr r5, 1fafc <x_side_default+0x12c>)
   1faec:	f3af 8000 	nop.w
   1faf0:	1949      	adds	r1, r1, r5
   1faf2:	ce20      	ldmia	r6!, {r5}
   1faf4:	cb80      	ldmia	r3!, {r7}
   1faf6:	19ed      	adds	r5, r5, r7
   1faf8:	c220      	stmia	r2!, {r5}
   1fafa:	4708      	bx	r1
   1fafc:	ce20      	ldmia	r6!, {r5}
   1fafe:	cb80      	ldmia	r3!, {r7}
   1fb00:	417d      	adcs	r5, r7
   1fb02:	c220      	stmia	r2!, {r5}
   1fb04:	ce20      	ldmia	r6!, {r5}
   1fb06:	cb80      	ldmia	r3!, {r7}
   1fb08:	417d      	adcs	r5, r7
   1fb0a:	c220      	stmia	r2!, {r5}
   1fb0c:	ce20      	ldmia	r6!, {r5}
   1fb0e:	cb80      	ldmia	r3!, {r7}
   1fb10:	417d      	adcs	r5, r7
   1fb12:	c220      	stmia	r2!, {r5}
   1fb14:	ce20      	ldmia	r6!, {r5}
   1fb16:	cb80      	ldmia	r3!, {r7}
   1fb18:	417d      	adcs	r5, r7
   1fb1a:	c220      	stmia	r2!, {r5}
   1fb1c:	ce20      	ldmia	r6!, {r5}
   1fb1e:	cb80      	ldmia	r3!, {r7}
   1fb20:	417d      	adcs	r5, r7
   1fb22:	c220      	stmia	r2!, {r5}
   1fb24:	ce20      	ldmia	r6!, {r5}
   1fb26:	cb80      	ldmia	r3!, {r7}
   1fb28:	417d      	adcs	r5, r7
   1fb2a:	c220      	stmia	r2!, {r5}
   1fb2c:	ce20      	ldmia	r6!, {r5}
   1fb2e:	cb80      	ldmia	r3!, {r7}
   1fb30:	417d      	adcs	r5, r7
   1fb32:	c220      	stmia	r2!, {r5}
   1fb34:	4140      	adcs	r0, r0
   1fb36:	b9d0      	cbnz	r0, 1fb6e <x_side_default+0x19e>
   1fb38:	9b01      	ldr	r3, [sp, #4]
   1fb3a:	3b01      	subs	r3, #1
   1fb3c:	b25b      	sxtb	r3, r3
   1fb3e:	2b00      	cmp	r3, #0
   1fb40:	db15      	blt.n	1fb6e <x_side_default+0x19e>
   1fb42:	b21a      	sxth	r2, r3
   1fb44:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   1fb48:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1fb4c:	4291      	cmp	r1, r2
   1fb4e:	d80b      	bhi.n	1fb68 <x_side_default+0x198>
   1fb50:	d30d      	bcc.n	1fb6e <x_side_default+0x19e>
   1fb52:	3b01      	subs	r3, #1
   1fb54:	b25b      	sxtb	r3, r3
   1fb56:	1c59      	adds	r1, r3, #1
   1fb58:	b21a      	sxth	r2, r3
   1fb5a:	d008      	beq.n	1fb6e <x_side_default+0x19e>
   1fb5c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   1fb60:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1fb64:	4291      	cmp	r1, r2
   1fb66:	d9f3      	bls.n	1fb50 <x_side_default+0x180>
   1fb68:	b01b      	add	sp, #108	; 0x6c
   1fb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb6e:	9b01      	ldr	r3, [sp, #4]
   1fb70:	4652      	mov	r2, sl
   1fb72:	4621      	mov	r1, r4
   1fb74:	4620      	mov	r0, r4
   1fb76:	f7ff fcab 	bl	1f4d0 <uECC_vli_sub>
   1fb7a:	b01b      	add	sp, #108	; 0x6c
   1fb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001fb80 <vli_mmod_fast_secp256r1>:
   1fb80:	680b      	ldr	r3, [r1, #0]
   1fb82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb86:	6003      	str	r3, [r0, #0]
   1fb88:	684b      	ldr	r3, [r1, #4]
   1fb8a:	6043      	str	r3, [r0, #4]
   1fb8c:	688b      	ldr	r3, [r1, #8]
   1fb8e:	6083      	str	r3, [r0, #8]
   1fb90:	68cb      	ldr	r3, [r1, #12]
   1fb92:	60c3      	str	r3, [r0, #12]
   1fb94:	690b      	ldr	r3, [r1, #16]
   1fb96:	6103      	str	r3, [r0, #16]
   1fb98:	694b      	ldr	r3, [r1, #20]
   1fb9a:	6143      	str	r3, [r0, #20]
   1fb9c:	698b      	ldr	r3, [r1, #24]
   1fb9e:	6183      	str	r3, [r0, #24]
   1fba0:	69cb      	ldr	r3, [r1, #28]
   1fba2:	61c3      	str	r3, [r0, #28]
   1fba4:	b08d      	sub	sp, #52	; 0x34
   1fba6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   1fba8:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   1fbaa:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   1fbac:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   1fbae:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1fbb0:	940b      	str	r4, [sp, #44]	; 0x2c
   1fbb2:	f04f 0a00 	mov.w	sl, #0
   1fbb6:	ac04      	add	r4, sp, #16
   1fbb8:	9708      	str	r7, [sp, #32]
   1fbba:	9609      	str	r6, [sp, #36]	; 0x24
   1fbbc:	950a      	str	r5, [sp, #40]	; 0x28
   1fbbe:	4681      	mov	r9, r0
   1fbc0:	9307      	str	r3, [sp, #28]
   1fbc2:	f8cd a018 	str.w	sl, [sp, #24]
   1fbc6:	f8cd a014 	str.w	sl, [sp, #20]
   1fbca:	f8cd a010 	str.w	sl, [sp, #16]
   1fbce:	2501      	movs	r5, #1
   1fbd0:	4626      	mov	r6, r4
   1fbd2:	4627      	mov	r7, r4
   1fbd4:	2300      	movs	r3, #0
   1fbd6:	a205      	add	r2, pc, #20	; (adr r2, 1fbec <vli_mmod_fast_secp256r1+0x6c>)
   1fbd8:	f3af 8000 	nop.w
   1fbdc:	f3af 8000 	nop.w
   1fbe0:	18ad      	adds	r5, r5, r2
   1fbe2:	ce04      	ldmia	r6!, {r2}
   1fbe4:	cf01      	ldmia	r7!, {r0}
   1fbe6:	1812      	adds	r2, r2, r0
   1fbe8:	c404      	stmia	r4!, {r2}
   1fbea:	4728      	bx	r5
   1fbec:	ce04      	ldmia	r6!, {r2}
   1fbee:	cf01      	ldmia	r7!, {r0}
   1fbf0:	4142      	adcs	r2, r0
   1fbf2:	c404      	stmia	r4!, {r2}
   1fbf4:	ce04      	ldmia	r6!, {r2}
   1fbf6:	cf01      	ldmia	r7!, {r0}
   1fbf8:	4142      	adcs	r2, r0
   1fbfa:	c404      	stmia	r4!, {r2}
   1fbfc:	ce04      	ldmia	r6!, {r2}
   1fbfe:	cf01      	ldmia	r7!, {r0}
   1fc00:	4142      	adcs	r2, r0
   1fc02:	c404      	stmia	r4!, {r2}
   1fc04:	ce04      	ldmia	r6!, {r2}
   1fc06:	cf01      	ldmia	r7!, {r0}
   1fc08:	4142      	adcs	r2, r0
   1fc0a:	c404      	stmia	r4!, {r2}
   1fc0c:	ce04      	ldmia	r6!, {r2}
   1fc0e:	cf01      	ldmia	r7!, {r0}
   1fc10:	4142      	adcs	r2, r0
   1fc12:	c404      	stmia	r4!, {r2}
   1fc14:	ce04      	ldmia	r6!, {r2}
   1fc16:	cf01      	ldmia	r7!, {r0}
   1fc18:	4142      	adcs	r2, r0
   1fc1a:	c404      	stmia	r4!, {r2}
   1fc1c:	ce04      	ldmia	r6!, {r2}
   1fc1e:	cf01      	ldmia	r7!, {r0}
   1fc20:	4142      	adcs	r2, r0
   1fc22:	c404      	stmia	r4!, {r2}
   1fc24:	415b      	adcs	r3, r3
   1fc26:	2601      	movs	r6, #1
   1fc28:	9300      	str	r3, [sp, #0]
   1fc2a:	464c      	mov	r4, r9
   1fc2c:	ad04      	add	r5, sp, #16
   1fc2e:	464f      	mov	r7, r9
   1fc30:	2300      	movs	r3, #0
   1fc32:	a206      	add	r2, pc, #24	; (adr r2, 1fc4c <vli_mmod_fast_secp256r1+0xcc>)
   1fc34:	f3af 8000 	nop.w
   1fc38:	f3af 8000 	nop.w
   1fc3c:	f3af 8000 	nop.w
   1fc40:	18b6      	adds	r6, r6, r2
   1fc42:	cf04      	ldmia	r7!, {r2}
   1fc44:	cd01      	ldmia	r5!, {r0}
   1fc46:	1812      	adds	r2, r2, r0
   1fc48:	c404      	stmia	r4!, {r2}
   1fc4a:	4730      	bx	r6
   1fc4c:	cf04      	ldmia	r7!, {r2}
   1fc4e:	cd01      	ldmia	r5!, {r0}
   1fc50:	4142      	adcs	r2, r0
   1fc52:	c404      	stmia	r4!, {r2}
   1fc54:	cf04      	ldmia	r7!, {r2}
   1fc56:	cd01      	ldmia	r5!, {r0}
   1fc58:	4142      	adcs	r2, r0
   1fc5a:	c404      	stmia	r4!, {r2}
   1fc5c:	cf04      	ldmia	r7!, {r2}
   1fc5e:	cd01      	ldmia	r5!, {r0}
   1fc60:	4142      	adcs	r2, r0
   1fc62:	c404      	stmia	r4!, {r2}
   1fc64:	cf04      	ldmia	r7!, {r2}
   1fc66:	cd01      	ldmia	r5!, {r0}
   1fc68:	4142      	adcs	r2, r0
   1fc6a:	c404      	stmia	r4!, {r2}
   1fc6c:	cf04      	ldmia	r7!, {r2}
   1fc6e:	cd01      	ldmia	r5!, {r0}
   1fc70:	4142      	adcs	r2, r0
   1fc72:	c404      	stmia	r4!, {r2}
   1fc74:	cf04      	ldmia	r7!, {r2}
   1fc76:	cd01      	ldmia	r5!, {r0}
   1fc78:	4142      	adcs	r2, r0
   1fc7a:	c404      	stmia	r4!, {r2}
   1fc7c:	cf04      	ldmia	r7!, {r2}
   1fc7e:	cd01      	ldmia	r5!, {r0}
   1fc80:	4142      	adcs	r2, r0
   1fc82:	c404      	stmia	r4!, {r2}
   1fc84:	415b      	adcs	r3, r3
   1fc86:	f101 0434 	add.w	r4, r1, #52	; 0x34
   1fc8a:	ccd0      	ldmia	r4, {r4, r6, r7}
   1fc8c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   1fc8e:	9408      	str	r4, [sp, #32]
   1fc90:	ac04      	add	r4, sp, #16
   1fc92:	9507      	str	r5, [sp, #28]
   1fc94:	9609      	str	r6, [sp, #36]	; 0x24
   1fc96:	970a      	str	r7, [sp, #40]	; 0x28
   1fc98:	4698      	mov	r8, r3
   1fc9a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1fc9e:	2501      	movs	r5, #1
   1fca0:	4626      	mov	r6, r4
   1fca2:	4627      	mov	r7, r4
   1fca4:	2300      	movs	r3, #0
   1fca6:	a205      	add	r2, pc, #20	; (adr r2, 1fcbc <vli_mmod_fast_secp256r1+0x13c>)
   1fca8:	f3af 8000 	nop.w
   1fcac:	f3af 8000 	nop.w
   1fcb0:	18ad      	adds	r5, r5, r2
   1fcb2:	ce04      	ldmia	r6!, {r2}
   1fcb4:	cf01      	ldmia	r7!, {r0}
   1fcb6:	1812      	adds	r2, r2, r0
   1fcb8:	c404      	stmia	r4!, {r2}
   1fcba:	4728      	bx	r5
   1fcbc:	ce04      	ldmia	r6!, {r2}
   1fcbe:	cf01      	ldmia	r7!, {r0}
   1fcc0:	4142      	adcs	r2, r0
   1fcc2:	c404      	stmia	r4!, {r2}
   1fcc4:	ce04      	ldmia	r6!, {r2}
   1fcc6:	cf01      	ldmia	r7!, {r0}
   1fcc8:	4142      	adcs	r2, r0
   1fcca:	c404      	stmia	r4!, {r2}
   1fccc:	ce04      	ldmia	r6!, {r2}
   1fcce:	cf01      	ldmia	r7!, {r0}
   1fcd0:	4142      	adcs	r2, r0
   1fcd2:	c404      	stmia	r4!, {r2}
   1fcd4:	ce04      	ldmia	r6!, {r2}
   1fcd6:	cf01      	ldmia	r7!, {r0}
   1fcd8:	4142      	adcs	r2, r0
   1fcda:	c404      	stmia	r4!, {r2}
   1fcdc:	ce04      	ldmia	r6!, {r2}
   1fcde:	cf01      	ldmia	r7!, {r0}
   1fce0:	4142      	adcs	r2, r0
   1fce2:	c404      	stmia	r4!, {r2}
   1fce4:	ce04      	ldmia	r6!, {r2}
   1fce6:	cf01      	ldmia	r7!, {r0}
   1fce8:	4142      	adcs	r2, r0
   1fcea:	c404      	stmia	r4!, {r2}
   1fcec:	ce04      	ldmia	r6!, {r2}
   1fcee:	cf01      	ldmia	r7!, {r0}
   1fcf0:	4142      	adcs	r2, r0
   1fcf2:	c404      	stmia	r4!, {r2}
   1fcf4:	415b      	adcs	r3, r3
   1fcf6:	2601      	movs	r6, #1
   1fcf8:	9301      	str	r3, [sp, #4]
   1fcfa:	464c      	mov	r4, r9
   1fcfc:	ad04      	add	r5, sp, #16
   1fcfe:	464f      	mov	r7, r9
   1fd00:	2300      	movs	r3, #0
   1fd02:	a206      	add	r2, pc, #24	; (adr r2, 1fd1c <vli_mmod_fast_secp256r1+0x19c>)
   1fd04:	f3af 8000 	nop.w
   1fd08:	f3af 8000 	nop.w
   1fd0c:	f3af 8000 	nop.w
   1fd10:	18b6      	adds	r6, r6, r2
   1fd12:	cf04      	ldmia	r7!, {r2}
   1fd14:	cd01      	ldmia	r5!, {r0}
   1fd16:	1812      	adds	r2, r2, r0
   1fd18:	c404      	stmia	r4!, {r2}
   1fd1a:	4730      	bx	r6
   1fd1c:	cf04      	ldmia	r7!, {r2}
   1fd1e:	cd01      	ldmia	r5!, {r0}
   1fd20:	4142      	adcs	r2, r0
   1fd22:	c404      	stmia	r4!, {r2}
   1fd24:	cf04      	ldmia	r7!, {r2}
   1fd26:	cd01      	ldmia	r5!, {r0}
   1fd28:	4142      	adcs	r2, r0
   1fd2a:	c404      	stmia	r4!, {r2}
   1fd2c:	cf04      	ldmia	r7!, {r2}
   1fd2e:	cd01      	ldmia	r5!, {r0}
   1fd30:	4142      	adcs	r2, r0
   1fd32:	c404      	stmia	r4!, {r2}
   1fd34:	cf04      	ldmia	r7!, {r2}
   1fd36:	cd01      	ldmia	r5!, {r0}
   1fd38:	4142      	adcs	r2, r0
   1fd3a:	c404      	stmia	r4!, {r2}
   1fd3c:	cf04      	ldmia	r7!, {r2}
   1fd3e:	cd01      	ldmia	r5!, {r0}
   1fd40:	4142      	adcs	r2, r0
   1fd42:	c404      	stmia	r4!, {r2}
   1fd44:	cf04      	ldmia	r7!, {r2}
   1fd46:	cd01      	ldmia	r5!, {r0}
   1fd48:	4142      	adcs	r2, r0
   1fd4a:	c404      	stmia	r4!, {r2}
   1fd4c:	cf04      	ldmia	r7!, {r2}
   1fd4e:	cd01      	ldmia	r5!, {r0}
   1fd50:	4142      	adcs	r2, r0
   1fd52:	c404      	stmia	r4!, {r2}
   1fd54:	415b      	adcs	r3, r3
   1fd56:	f101 0420 	add.w	r4, r1, #32
   1fd5a:	cc70      	ldmia	r4, {r4, r5, r6}
   1fd5c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   1fd5e:	9404      	str	r4, [sp, #16]
   1fd60:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   1fd62:	9505      	str	r5, [sp, #20]
   1fd64:	9606      	str	r6, [sp, #24]
   1fd66:	970a      	str	r7, [sp, #40]	; 0x28
   1fd68:	940b      	str	r4, [sp, #44]	; 0x2c
   1fd6a:	9302      	str	r3, [sp, #8]
   1fd6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   1fd70:	f8cd a020 	str.w	sl, [sp, #32]
   1fd74:	f8cd a01c 	str.w	sl, [sp, #28]
   1fd78:	464c      	mov	r4, r9
   1fd7a:	ad04      	add	r5, sp, #16
   1fd7c:	2601      	movs	r6, #1
   1fd7e:	464f      	mov	r7, r9
   1fd80:	2300      	movs	r3, #0
   1fd82:	a206      	add	r2, pc, #24	; (adr r2, 1fd9c <vli_mmod_fast_secp256r1+0x21c>)
   1fd84:	f3af 8000 	nop.w
   1fd88:	f3af 8000 	nop.w
   1fd8c:	f3af 8000 	nop.w
   1fd90:	18b6      	adds	r6, r6, r2
   1fd92:	cf04      	ldmia	r7!, {r2}
   1fd94:	cd01      	ldmia	r5!, {r0}
   1fd96:	1812      	adds	r2, r2, r0
   1fd98:	c404      	stmia	r4!, {r2}
   1fd9a:	4730      	bx	r6
   1fd9c:	cf04      	ldmia	r7!, {r2}
   1fd9e:	cd01      	ldmia	r5!, {r0}
   1fda0:	4142      	adcs	r2, r0
   1fda2:	c404      	stmia	r4!, {r2}
   1fda4:	cf04      	ldmia	r7!, {r2}
   1fda6:	cd01      	ldmia	r5!, {r0}
   1fda8:	4142      	adcs	r2, r0
   1fdaa:	c404      	stmia	r4!, {r2}
   1fdac:	cf04      	ldmia	r7!, {r2}
   1fdae:	cd01      	ldmia	r5!, {r0}
   1fdb0:	4142      	adcs	r2, r0
   1fdb2:	c404      	stmia	r4!, {r2}
   1fdb4:	cf04      	ldmia	r7!, {r2}
   1fdb6:	cd01      	ldmia	r5!, {r0}
   1fdb8:	4142      	adcs	r2, r0
   1fdba:	c404      	stmia	r4!, {r2}
   1fdbc:	cf04      	ldmia	r7!, {r2}
   1fdbe:	cd01      	ldmia	r5!, {r0}
   1fdc0:	4142      	adcs	r2, r0
   1fdc2:	c404      	stmia	r4!, {r2}
   1fdc4:	cf04      	ldmia	r7!, {r2}
   1fdc6:	cd01      	ldmia	r5!, {r0}
   1fdc8:	4142      	adcs	r2, r0
   1fdca:	c404      	stmia	r4!, {r2}
   1fdcc:	cf04      	ldmia	r7!, {r2}
   1fdce:	cd01      	ldmia	r5!, {r0}
   1fdd0:	4142      	adcs	r2, r0
   1fdd2:	c404      	stmia	r4!, {r2}
   1fdd4:	415b      	adcs	r3, r3
   1fdd6:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   1fdd8:	9505      	str	r5, [sp, #20]
   1fdda:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   1fddc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   1fdde:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   1fde0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   1fde2:	9303      	str	r3, [sp, #12]
   1fde4:	9509      	str	r5, [sp, #36]	; 0x24
   1fde6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1fde8:	6a0d      	ldr	r5, [r1, #32]
   1fdea:	9606      	str	r6, [sp, #24]
   1fdec:	9708      	str	r7, [sp, #32]
   1fdee:	950b      	str	r5, [sp, #44]	; 0x2c
   1fdf0:	9407      	str	r4, [sp, #28]
   1fdf2:	940a      	str	r4, [sp, #40]	; 0x28
   1fdf4:	9304      	str	r3, [sp, #16]
   1fdf6:	464c      	mov	r4, r9
   1fdf8:	ad04      	add	r5, sp, #16
   1fdfa:	2601      	movs	r6, #1
   1fdfc:	464f      	mov	r7, r9
   1fdfe:	2300      	movs	r3, #0
   1fe00:	a206      	add	r2, pc, #24	; (adr r2, 1fe1c <vli_mmod_fast_secp256r1+0x29c>)
   1fe02:	bf00      	nop
   1fe04:	f3af 8000 	nop.w
   1fe08:	f3af 8000 	nop.w
   1fe0c:	f3af 8000 	nop.w
   1fe10:	18b6      	adds	r6, r6, r2
   1fe12:	cf04      	ldmia	r7!, {r2}
   1fe14:	cd01      	ldmia	r5!, {r0}
   1fe16:	1812      	adds	r2, r2, r0
   1fe18:	c404      	stmia	r4!, {r2}
   1fe1a:	4730      	bx	r6
   1fe1c:	cf04      	ldmia	r7!, {r2}
   1fe1e:	cd01      	ldmia	r5!, {r0}
   1fe20:	4142      	adcs	r2, r0
   1fe22:	c404      	stmia	r4!, {r2}
   1fe24:	cf04      	ldmia	r7!, {r2}
   1fe26:	cd01      	ldmia	r5!, {r0}
   1fe28:	4142      	adcs	r2, r0
   1fe2a:	c404      	stmia	r4!, {r2}
   1fe2c:	cf04      	ldmia	r7!, {r2}
   1fe2e:	cd01      	ldmia	r5!, {r0}
   1fe30:	4142      	adcs	r2, r0
   1fe32:	c404      	stmia	r4!, {r2}
   1fe34:	cf04      	ldmia	r7!, {r2}
   1fe36:	cd01      	ldmia	r5!, {r0}
   1fe38:	4142      	adcs	r2, r0
   1fe3a:	c404      	stmia	r4!, {r2}
   1fe3c:	cf04      	ldmia	r7!, {r2}
   1fe3e:	cd01      	ldmia	r5!, {r0}
   1fe40:	4142      	adcs	r2, r0
   1fe42:	c404      	stmia	r4!, {r2}
   1fe44:	cf04      	ldmia	r7!, {r2}
   1fe46:	cd01      	ldmia	r5!, {r0}
   1fe48:	4142      	adcs	r2, r0
   1fe4a:	c404      	stmia	r4!, {r2}
   1fe4c:	cf04      	ldmia	r7!, {r2}
   1fe4e:	cd01      	ldmia	r5!, {r0}
   1fe50:	4142      	adcs	r2, r0
   1fe52:	c404      	stmia	r4!, {r2}
   1fe54:	415b      	adcs	r3, r3
   1fe56:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   1fe5a:	cc70      	ldmia	r4, {r4, r5, r6}
   1fe5c:	6a0f      	ldr	r7, [r1, #32]
   1fe5e:	9404      	str	r4, [sp, #16]
   1fe60:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   1fe62:	9505      	str	r5, [sp, #20]
   1fe64:	9606      	str	r6, [sp, #24]
   1fe66:	970a      	str	r7, [sp, #40]	; 0x28
   1fe68:	940b      	str	r4, [sp, #44]	; 0x2c
   1fe6a:	469b      	mov	fp, r3
   1fe6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   1fe70:	f8cd a020 	str.w	sl, [sp, #32]
   1fe74:	f8cd a01c 	str.w	sl, [sp, #28]
   1fe78:	464c      	mov	r4, r9
   1fe7a:	ad04      	add	r5, sp, #16
   1fe7c:	2601      	movs	r6, #1
   1fe7e:	464f      	mov	r7, r9
   1fe80:	2300      	movs	r3, #0
   1fe82:	a206      	add	r2, pc, #24	; (adr r2, 1fe9c <vli_mmod_fast_secp256r1+0x31c>)
   1fe84:	f3af 8000 	nop.w
   1fe88:	f3af 8000 	nop.w
   1fe8c:	f3af 8000 	nop.w
   1fe90:	18b6      	adds	r6, r6, r2
   1fe92:	cf04      	ldmia	r7!, {r2}
   1fe94:	cd01      	ldmia	r5!, {r0}
   1fe96:	1a12      	subs	r2, r2, r0
   1fe98:	c404      	stmia	r4!, {r2}
   1fe9a:	4730      	bx	r6
   1fe9c:	cf04      	ldmia	r7!, {r2}
   1fe9e:	cd01      	ldmia	r5!, {r0}
   1fea0:	4182      	sbcs	r2, r0
   1fea2:	c404      	stmia	r4!, {r2}
   1fea4:	cf04      	ldmia	r7!, {r2}
   1fea6:	cd01      	ldmia	r5!, {r0}
   1fea8:	4182      	sbcs	r2, r0
   1feaa:	c404      	stmia	r4!, {r2}
   1feac:	cf04      	ldmia	r7!, {r2}
   1feae:	cd01      	ldmia	r5!, {r0}
   1feb0:	4182      	sbcs	r2, r0
   1feb2:	c404      	stmia	r4!, {r2}
   1feb4:	cf04      	ldmia	r7!, {r2}
   1feb6:	cd01      	ldmia	r5!, {r0}
   1feb8:	4182      	sbcs	r2, r0
   1feba:	c404      	stmia	r4!, {r2}
   1febc:	cf04      	ldmia	r7!, {r2}
   1febe:	cd01      	ldmia	r5!, {r0}
   1fec0:	4182      	sbcs	r2, r0
   1fec2:	c404      	stmia	r4!, {r2}
   1fec4:	cf04      	ldmia	r7!, {r2}
   1fec6:	cd01      	ldmia	r5!, {r0}
   1fec8:	4182      	sbcs	r2, r0
   1feca:	c404      	stmia	r4!, {r2}
   1fecc:	cf04      	ldmia	r7!, {r2}
   1fece:	cd01      	ldmia	r5!, {r0}
   1fed0:	4182      	sbcs	r2, r0
   1fed2:	c404      	stmia	r4!, {r2}
   1fed4:	415b      	adcs	r3, r3
   1fed6:	f101 0430 	add.w	r4, r1, #48	; 0x30
   1feda:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   1fedc:	9404      	str	r4, [sp, #16]
   1fede:	9505      	str	r5, [sp, #20]
   1fee0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   1fee2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   1fee4:	9606      	str	r6, [sp, #24]
   1fee6:	9707      	str	r7, [sp, #28]
   1fee8:	950a      	str	r5, [sp, #40]	; 0x28
   1feea:	940b      	str	r4, [sp, #44]	; 0x2c
   1feec:	469c      	mov	ip, r3
   1feee:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   1fef2:	f8cd a020 	str.w	sl, [sp, #32]
   1fef6:	464c      	mov	r4, r9
   1fef8:	ad04      	add	r5, sp, #16
   1fefa:	2601      	movs	r6, #1
   1fefc:	464f      	mov	r7, r9
   1fefe:	2300      	movs	r3, #0
   1ff00:	a206      	add	r2, pc, #24	; (adr r2, 1ff1c <vli_mmod_fast_secp256r1+0x39c>)
   1ff02:	bf00      	nop
   1ff04:	f3af 8000 	nop.w
   1ff08:	f3af 8000 	nop.w
   1ff0c:	f3af 8000 	nop.w
   1ff10:	18b6      	adds	r6, r6, r2
   1ff12:	cf04      	ldmia	r7!, {r2}
   1ff14:	cd01      	ldmia	r5!, {r0}
   1ff16:	1a12      	subs	r2, r2, r0
   1ff18:	c404      	stmia	r4!, {r2}
   1ff1a:	4730      	bx	r6
   1ff1c:	cf04      	ldmia	r7!, {r2}
   1ff1e:	cd01      	ldmia	r5!, {r0}
   1ff20:	4182      	sbcs	r2, r0
   1ff22:	c404      	stmia	r4!, {r2}
   1ff24:	cf04      	ldmia	r7!, {r2}
   1ff26:	cd01      	ldmia	r5!, {r0}
   1ff28:	4182      	sbcs	r2, r0
   1ff2a:	c404      	stmia	r4!, {r2}
   1ff2c:	cf04      	ldmia	r7!, {r2}
   1ff2e:	cd01      	ldmia	r5!, {r0}
   1ff30:	4182      	sbcs	r2, r0
   1ff32:	c404      	stmia	r4!, {r2}
   1ff34:	cf04      	ldmia	r7!, {r2}
   1ff36:	cd01      	ldmia	r5!, {r0}
   1ff38:	4182      	sbcs	r2, r0
   1ff3a:	c404      	stmia	r4!, {r2}
   1ff3c:	cf04      	ldmia	r7!, {r2}
   1ff3e:	cd01      	ldmia	r5!, {r0}
   1ff40:	4182      	sbcs	r2, r0
   1ff42:	c404      	stmia	r4!, {r2}
   1ff44:	cf04      	ldmia	r7!, {r2}
   1ff46:	cd01      	ldmia	r5!, {r0}
   1ff48:	4182      	sbcs	r2, r0
   1ff4a:	c404      	stmia	r4!, {r2}
   1ff4c:	cf04      	ldmia	r7!, {r2}
   1ff4e:	cd01      	ldmia	r5!, {r0}
   1ff50:	4182      	sbcs	r2, r0
   1ff52:	c404      	stmia	r4!, {r2}
   1ff54:	415b      	adcs	r3, r3
   1ff56:	f101 0434 	add.w	r4, r1, #52	; 0x34
   1ff5a:	cc70      	ldmia	r4, {r4, r5, r6}
   1ff5c:	6a0f      	ldr	r7, [r1, #32]
   1ff5e:	9404      	str	r4, [sp, #16]
   1ff60:	9505      	str	r5, [sp, #20]
   1ff62:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   1ff64:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   1ff66:	9606      	str	r6, [sp, #24]
   1ff68:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   1ff6a:	9408      	str	r4, [sp, #32]
   1ff6c:	469e      	mov	lr, r3
   1ff6e:	9509      	str	r5, [sp, #36]	; 0x24
   1ff70:	960b      	str	r6, [sp, #44]	; 0x2c
   1ff72:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1ff76:	9707      	str	r7, [sp, #28]
   1ff78:	464c      	mov	r4, r9
   1ff7a:	ad04      	add	r5, sp, #16
   1ff7c:	2601      	movs	r6, #1
   1ff7e:	464b      	mov	r3, r9
   1ff80:	2700      	movs	r7, #0
   1ff82:	a206      	add	r2, pc, #24	; (adr r2, 1ff9c <vli_mmod_fast_secp256r1+0x41c>)
   1ff84:	f3af 8000 	nop.w
   1ff88:	f3af 8000 	nop.w
   1ff8c:	f3af 8000 	nop.w
   1ff90:	18b6      	adds	r6, r6, r2
   1ff92:	cb04      	ldmia	r3!, {r2}
   1ff94:	cd01      	ldmia	r5!, {r0}
   1ff96:	1a12      	subs	r2, r2, r0
   1ff98:	c404      	stmia	r4!, {r2}
   1ff9a:	4730      	bx	r6
   1ff9c:	cb04      	ldmia	r3!, {r2}
   1ff9e:	cd01      	ldmia	r5!, {r0}
   1ffa0:	4182      	sbcs	r2, r0
   1ffa2:	c404      	stmia	r4!, {r2}
   1ffa4:	cb04      	ldmia	r3!, {r2}
   1ffa6:	cd01      	ldmia	r5!, {r0}
   1ffa8:	4182      	sbcs	r2, r0
   1ffaa:	c404      	stmia	r4!, {r2}
   1ffac:	cb04      	ldmia	r3!, {r2}
   1ffae:	cd01      	ldmia	r5!, {r0}
   1ffb0:	4182      	sbcs	r2, r0
   1ffb2:	c404      	stmia	r4!, {r2}
   1ffb4:	cb04      	ldmia	r3!, {r2}
   1ffb6:	cd01      	ldmia	r5!, {r0}
   1ffb8:	4182      	sbcs	r2, r0
   1ffba:	c404      	stmia	r4!, {r2}
   1ffbc:	cb04      	ldmia	r3!, {r2}
   1ffbe:	cd01      	ldmia	r5!, {r0}
   1ffc0:	4182      	sbcs	r2, r0
   1ffc2:	c404      	stmia	r4!, {r2}
   1ffc4:	cb04      	ldmia	r3!, {r2}
   1ffc6:	cd01      	ldmia	r5!, {r0}
   1ffc8:	4182      	sbcs	r2, r0
   1ffca:	c404      	stmia	r4!, {r2}
   1ffcc:	cb04      	ldmia	r3!, {r2}
   1ffce:	cd01      	ldmia	r5!, {r0}
   1ffd0:	4182      	sbcs	r2, r0
   1ffd2:	c404      	stmia	r4!, {r2}
   1ffd4:	417f      	adcs	r7, r7
   1ffd6:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   1ffd8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   1ffda:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   1ffdc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   1ffde:	9404      	str	r4, [sp, #16]
   1ffe0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   1ffe2:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1ffe4:	9208      	str	r2, [sp, #32]
   1ffe6:	9607      	str	r6, [sp, #28]
   1ffe8:	9409      	str	r4, [sp, #36]	; 0x24
   1ffea:	910b      	str	r1, [sp, #44]	; 0x2c
   1ffec:	f8cd a018 	str.w	sl, [sp, #24]
   1fff0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   1fff4:	9505      	str	r5, [sp, #20]
   1fff6:	aa04      	add	r2, sp, #16
   1fff8:	4649      	mov	r1, r9
   1fffa:	2401      	movs	r4, #1
   1fffc:	464e      	mov	r6, r9
   1fffe:	2500      	movs	r5, #0
   20000:	a006      	add	r0, pc, #24	; (adr r0, 2001c <vli_mmod_fast_secp256r1+0x49c>)
   20002:	bf00      	nop
   20004:	f3af 8000 	nop.w
   20008:	f3af 8000 	nop.w
   2000c:	f3af 8000 	nop.w
   20010:	1824      	adds	r4, r4, r0
   20012:	ce01      	ldmia	r6!, {r0}
   20014:	ca08      	ldmia	r2!, {r3}
   20016:	1ac0      	subs	r0, r0, r3
   20018:	c101      	stmia	r1!, {r0}
   2001a:	4720      	bx	r4
   2001c:	ce01      	ldmia	r6!, {r0}
   2001e:	ca08      	ldmia	r2!, {r3}
   20020:	4198      	sbcs	r0, r3
   20022:	c101      	stmia	r1!, {r0}
   20024:	ce01      	ldmia	r6!, {r0}
   20026:	ca08      	ldmia	r2!, {r3}
   20028:	4198      	sbcs	r0, r3
   2002a:	c101      	stmia	r1!, {r0}
   2002c:	ce01      	ldmia	r6!, {r0}
   2002e:	ca08      	ldmia	r2!, {r3}
   20030:	4198      	sbcs	r0, r3
   20032:	c101      	stmia	r1!, {r0}
   20034:	ce01      	ldmia	r6!, {r0}
   20036:	ca08      	ldmia	r2!, {r3}
   20038:	4198      	sbcs	r0, r3
   2003a:	c101      	stmia	r1!, {r0}
   2003c:	ce01      	ldmia	r6!, {r0}
   2003e:	ca08      	ldmia	r2!, {r3}
   20040:	4198      	sbcs	r0, r3
   20042:	c101      	stmia	r1!, {r0}
   20044:	ce01      	ldmia	r6!, {r0}
   20046:	ca08      	ldmia	r2!, {r3}
   20048:	4198      	sbcs	r0, r3
   2004a:	c101      	stmia	r1!, {r0}
   2004c:	ce01      	ldmia	r6!, {r0}
   2004e:	ca08      	ldmia	r2!, {r3}
   20050:	4198      	sbcs	r0, r3
   20052:	c101      	stmia	r1!, {r0}
   20054:	416d      	adcs	r5, r5
   20056:	9b00      	ldr	r3, [sp, #0]
   20058:	eb08 0203 	add.w	r2, r8, r3
   2005c:	9b01      	ldr	r3, [sp, #4]
   2005e:	441a      	add	r2, r3
   20060:	9b02      	ldr	r3, [sp, #8]
   20062:	441a      	add	r2, r3
   20064:	9b03      	ldr	r3, [sp, #12]
   20066:	441a      	add	r2, r3
   20068:	445a      	add	r2, fp
   2006a:	45d4      	cmp	ip, sl
   2006c:	bf14      	ite	ne
   2006e:	4694      	movne	ip, r2
   20070:	f1a2 0c01 	subeq.w	ip, r2, #1
   20074:	45d6      	cmp	lr, sl
   20076:	bf14      	ite	ne
   20078:	46e6      	movne	lr, ip
   2007a:	f1ac 0e01 	subeq.w	lr, ip, #1
   2007e:	4557      	cmp	r7, sl
   20080:	bf14      	ite	ne
   20082:	4677      	movne	r7, lr
   20084:	f1ae 0701 	subeq.w	r7, lr, #1
   20088:	4555      	cmp	r5, sl
   2008a:	bf14      	ite	ne
   2008c:	463d      	movne	r5, r7
   2008e:	1e7d      	subeq	r5, r7, #1
   20090:	4555      	cmp	r5, sl
   20092:	db4d      	blt.n	20130 <vli_mmod_fast_secp256r1+0x5b0>
   20094:	f8df c108 	ldr.w	ip, [pc, #264]	; 201a0 <vli_mmod_fast_secp256r1+0x620>
   20098:	f04f 0801 	mov.w	r8, #1
   2009c:	46ae      	mov	lr, r5
   2009e:	4648      	mov	r0, r9
   200a0:	f1be 0f00 	cmp.w	lr, #0
   200a4:	d116      	bne.n	200d4 <vli_mmod_fast_secp256r1+0x554>
   200a6:	69c2      	ldr	r2, [r0, #28]
   200a8:	3201      	adds	r2, #1
   200aa:	d176      	bne.n	2019a <vli_mmod_fast_secp256r1+0x61a>
   200ac:	6982      	ldr	r2, [r0, #24]
   200ae:	2a00      	cmp	r2, #0
   200b0:	d073      	beq.n	2019a <vli_mmod_fast_secp256r1+0x61a>
   200b2:	2a01      	cmp	r2, #1
   200b4:	d80e      	bhi.n	200d4 <vli_mmod_fast_secp256r1+0x554>
   200b6:	6942      	ldr	r2, [r0, #20]
   200b8:	b962      	cbnz	r2, 200d4 <vli_mmod_fast_secp256r1+0x554>
   200ba:	6902      	ldr	r2, [r0, #16]
   200bc:	b952      	cbnz	r2, 200d4 <vli_mmod_fast_secp256r1+0x554>
   200be:	68c2      	ldr	r2, [r0, #12]
   200c0:	b942      	cbnz	r2, 200d4 <vli_mmod_fast_secp256r1+0x554>
   200c2:	6882      	ldr	r2, [r0, #8]
   200c4:	3201      	adds	r2, #1
   200c6:	d168      	bne.n	2019a <vli_mmod_fast_secp256r1+0x61a>
   200c8:	6842      	ldr	r2, [r0, #4]
   200ca:	3201      	adds	r2, #1
   200cc:	d165      	bne.n	2019a <vli_mmod_fast_secp256r1+0x61a>
   200ce:	6802      	ldr	r2, [r0, #0]
   200d0:	3201      	adds	r2, #1
   200d2:	d162      	bne.n	2019a <vli_mmod_fast_secp256r1+0x61a>
   200d4:	4602      	mov	r2, r0
   200d6:	4661      	mov	r1, ip
   200d8:	4644      	mov	r4, r8
   200da:	4603      	mov	r3, r0
   200dc:	2600      	movs	r6, #0
   200de:	a703      	add	r7, pc, #12	; (adr r7, 200ec <vli_mmod_fast_secp256r1+0x56c>)
   200e0:	19e4      	adds	r4, r4, r7
   200e2:	cb80      	ldmia	r3!, {r7}
   200e4:	c920      	ldmia	r1!, {r5}
   200e6:	1b7f      	subs	r7, r7, r5
   200e8:	c280      	stmia	r2!, {r7}
   200ea:	4720      	bx	r4
   200ec:	cb80      	ldmia	r3!, {r7}
   200ee:	c920      	ldmia	r1!, {r5}
   200f0:	41af      	sbcs	r7, r5
   200f2:	c280      	stmia	r2!, {r7}
   200f4:	cb80      	ldmia	r3!, {r7}
   200f6:	c920      	ldmia	r1!, {r5}
   200f8:	41af      	sbcs	r7, r5
   200fa:	c280      	stmia	r2!, {r7}
   200fc:	cb80      	ldmia	r3!, {r7}
   200fe:	c920      	ldmia	r1!, {r5}
   20100:	41af      	sbcs	r7, r5
   20102:	c280      	stmia	r2!, {r7}
   20104:	cb80      	ldmia	r3!, {r7}
   20106:	c920      	ldmia	r1!, {r5}
   20108:	41af      	sbcs	r7, r5
   2010a:	c280      	stmia	r2!, {r7}
   2010c:	cb80      	ldmia	r3!, {r7}
   2010e:	c920      	ldmia	r1!, {r5}
   20110:	41af      	sbcs	r7, r5
   20112:	c280      	stmia	r2!, {r7}
   20114:	cb80      	ldmia	r3!, {r7}
   20116:	c920      	ldmia	r1!, {r5}
   20118:	41af      	sbcs	r7, r5
   2011a:	c280      	stmia	r2!, {r7}
   2011c:	cb80      	ldmia	r3!, {r7}
   2011e:	c920      	ldmia	r1!, {r5}
   20120:	41af      	sbcs	r7, r5
   20122:	c280      	stmia	r2!, {r7}
   20124:	4176      	adcs	r6, r6
   20126:	2e00      	cmp	r6, #0
   20128:	bf08      	it	eq
   2012a:	f1ae 0e01 	subeq.w	lr, lr, #1
   2012e:	e7b7      	b.n	200a0 <vli_mmod_fast_secp256r1+0x520>
   20130:	f8df e06c 	ldr.w	lr, [pc, #108]	; 201a0 <vli_mmod_fast_secp256r1+0x620>
   20134:	f04f 0c01 	mov.w	ip, #1
   20138:	46c8      	mov	r8, r9
   2013a:	4642      	mov	r2, r8
   2013c:	4671      	mov	r1, lr
   2013e:	4664      	mov	r4, ip
   20140:	4643      	mov	r3, r8
   20142:	2600      	movs	r6, #0
   20144:	a705      	add	r7, pc, #20	; (adr r7, 2015c <vli_mmod_fast_secp256r1+0x5dc>)
   20146:	bf00      	nop
   20148:	f3af 8000 	nop.w
   2014c:	f3af 8000 	nop.w
   20150:	19e4      	adds	r4, r4, r7
   20152:	cb80      	ldmia	r3!, {r7}
   20154:	c901      	ldmia	r1!, {r0}
   20156:	183f      	adds	r7, r7, r0
   20158:	c280      	stmia	r2!, {r7}
   2015a:	4720      	bx	r4
   2015c:	cb80      	ldmia	r3!, {r7}
   2015e:	c901      	ldmia	r1!, {r0}
   20160:	4147      	adcs	r7, r0
   20162:	c280      	stmia	r2!, {r7}
   20164:	cb80      	ldmia	r3!, {r7}
   20166:	c901      	ldmia	r1!, {r0}
   20168:	4147      	adcs	r7, r0
   2016a:	c280      	stmia	r2!, {r7}
   2016c:	cb80      	ldmia	r3!, {r7}
   2016e:	c901      	ldmia	r1!, {r0}
   20170:	4147      	adcs	r7, r0
   20172:	c280      	stmia	r2!, {r7}
   20174:	cb80      	ldmia	r3!, {r7}
   20176:	c901      	ldmia	r1!, {r0}
   20178:	4147      	adcs	r7, r0
   2017a:	c280      	stmia	r2!, {r7}
   2017c:	cb80      	ldmia	r3!, {r7}
   2017e:	c901      	ldmia	r1!, {r0}
   20180:	4147      	adcs	r7, r0
   20182:	c280      	stmia	r2!, {r7}
   20184:	cb80      	ldmia	r3!, {r7}
   20186:	c901      	ldmia	r1!, {r0}
   20188:	4147      	adcs	r7, r0
   2018a:	c280      	stmia	r2!, {r7}
   2018c:	cb80      	ldmia	r3!, {r7}
   2018e:	c901      	ldmia	r1!, {r0}
   20190:	4147      	adcs	r7, r0
   20192:	c280      	stmia	r2!, {r7}
   20194:	4176      	adcs	r6, r6
   20196:	19ad      	adds	r5, r5, r6
   20198:	d4cf      	bmi.n	2013a <vli_mmod_fast_secp256r1+0x5ba>
   2019a:	b00d      	add	sp, #52	; 0x34
   2019c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201a0:	00023f74 	.word	0x00023f74
	...

000201b0 <double_jacobian_default>:
   201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201b4:	f993 9000 	ldrsb.w	r9, [r3]
   201b8:	f1b9 0f00 	cmp.w	r9, #0
   201bc:	b0a9      	sub	sp, #164	; 0xa4
   201be:	dd15      	ble.n	201ec <double_jacobian_default+0x3c>
   201c0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   201c4:	b2e4      	uxtb	r4, r4
   201c6:	1f15      	subs	r5, r2, #4
   201c8:	9405      	str	r4, [sp, #20]
   201ca:	00a4      	lsls	r4, r4, #2
   201cc:	462e      	mov	r6, r5
   201ce:	9406      	str	r4, [sp, #24]
   201d0:	1914      	adds	r4, r2, r4
   201d2:	4625      	mov	r5, r4
   201d4:	46b6      	mov	lr, r6
   201d6:	2400      	movs	r4, #0
   201d8:	4637      	mov	r7, r6
   201da:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   201de:	4575      	cmp	r5, lr
   201e0:	ea44 0406 	orr.w	r4, r4, r6
   201e4:	d1f9      	bne.n	201da <double_jacobian_default+0x2a>
   201e6:	9703      	str	r7, [sp, #12]
   201e8:	9504      	str	r5, [sp, #16]
   201ea:	b914      	cbnz	r4, 201f2 <double_jacobian_default+0x42>
   201ec:	b029      	add	sp, #164	; 0xa4
   201ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201f2:	4698      	mov	r8, r3
   201f4:	4615      	mov	r5, r2
   201f6:	4604      	mov	r4, r0
   201f8:	9207      	str	r2, [sp, #28]
   201fa:	a818      	add	r0, sp, #96	; 0x60
   201fc:	460a      	mov	r2, r1
   201fe:	464b      	mov	r3, r9
   20200:	468a      	mov	sl, r1
   20202:	f7ff f995 	bl	1f530 <uECC_vli_mult>
   20206:	a918      	add	r1, sp, #96	; 0x60
   20208:	a808      	add	r0, sp, #32
   2020a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2020e:	4798      	blx	r3
   20210:	aa08      	add	r2, sp, #32
   20212:	a818      	add	r0, sp, #96	; 0x60
   20214:	f998 3000 	ldrsb.w	r3, [r8]
   20218:	4621      	mov	r1, r4
   2021a:	f7ff f989 	bl	1f530 <uECC_vli_mult>
   2021e:	a918      	add	r1, sp, #96	; 0x60
   20220:	a810      	add	r0, sp, #64	; 0x40
   20222:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   20226:	4798      	blx	r3
   20228:	aa08      	add	r2, sp, #32
   2022a:	4611      	mov	r1, r2
   2022c:	a818      	add	r0, sp, #96	; 0x60
   2022e:	f998 3000 	ldrsb.w	r3, [r8]
   20232:	f7ff f97d 	bl	1f530 <uECC_vli_mult>
   20236:	a918      	add	r1, sp, #96	; 0x60
   20238:	a808      	add	r0, sp, #32
   2023a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2023e:	4798      	blx	r3
   20240:	462a      	mov	r2, r5
   20242:	a818      	add	r0, sp, #96	; 0x60
   20244:	f998 3000 	ldrsb.w	r3, [r8]
   20248:	4651      	mov	r1, sl
   2024a:	f7ff f971 	bl	1f530 <uECC_vli_mult>
   2024e:	a918      	add	r1, sp, #96	; 0x60
   20250:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   20254:	4650      	mov	r0, sl
   20256:	4798      	blx	r3
   20258:	462a      	mov	r2, r5
   2025a:	a818      	add	r0, sp, #96	; 0x60
   2025c:	f998 3000 	ldrsb.w	r3, [r8]
   20260:	4629      	mov	r1, r5
   20262:	f7ff f965 	bl	1f530 <uECC_vli_mult>
   20266:	f108 0b04 	add.w	fp, r8, #4
   2026a:	a918      	add	r1, sp, #96	; 0x60
   2026c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   20270:	4628      	mov	r0, r5
   20272:	4798      	blx	r3
   20274:	465b      	mov	r3, fp
   20276:	462a      	mov	r2, r5
   20278:	4621      	mov	r1, r4
   2027a:	4620      	mov	r0, r4
   2027c:	f8cd 9000 	str.w	r9, [sp]
   20280:	f7ff fae6 	bl	1f850 <uECC_vli_modAdd>
   20284:	465b      	mov	r3, fp
   20286:	462a      	mov	r2, r5
   20288:	4629      	mov	r1, r5
   2028a:	4628      	mov	r0, r5
   2028c:	f8cd 9000 	str.w	r9, [sp]
   20290:	f7ff fade 	bl	1f850 <uECC_vli_modAdd>
   20294:	465b      	mov	r3, fp
   20296:	462a      	mov	r2, r5
   20298:	4621      	mov	r1, r4
   2029a:	4628      	mov	r0, r5
   2029c:	f8cd 9000 	str.w	r9, [sp]
   202a0:	f7ff fb2e 	bl	1f900 <uECC_vli_modSub>
   202a4:	462a      	mov	r2, r5
   202a6:	a818      	add	r0, sp, #96	; 0x60
   202a8:	f998 3000 	ldrsb.w	r3, [r8]
   202ac:	4621      	mov	r1, r4
   202ae:	f7ff f93f 	bl	1f530 <uECC_vli_mult>
   202b2:	a918      	add	r1, sp, #96	; 0x60
   202b4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   202b8:	4620      	mov	r0, r4
   202ba:	4798      	blx	r3
   202bc:	465b      	mov	r3, fp
   202be:	4622      	mov	r2, r4
   202c0:	4621      	mov	r1, r4
   202c2:	4628      	mov	r0, r5
   202c4:	f8cd 9000 	str.w	r9, [sp]
   202c8:	f7ff fac2 	bl	1f850 <uECC_vli_modAdd>
   202cc:	465b      	mov	r3, fp
   202ce:	f8cd 9000 	str.w	r9, [sp]
   202d2:	462a      	mov	r2, r5
   202d4:	4621      	mov	r1, r4
   202d6:	4620      	mov	r0, r4
   202d8:	f7ff faba 	bl	1f850 <uECC_vli_modAdd>
   202dc:	6823      	ldr	r3, [r4, #0]
   202de:	f013 0301 	ands.w	r3, r3, #1
   202e2:	d16a      	bne.n	203ba <double_jacobian_default+0x20a>
   202e4:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   202e8:	4294      	cmp	r4, r2
   202ea:	d20e      	bcs.n	2030a <double_jacobian_default+0x15a>
   202ec:	9f03      	ldr	r7, [sp, #12]
   202ee:	9d04      	ldr	r5, [sp, #16]
   202f0:	9e07      	ldr	r6, [sp, #28]
   202f2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   202f6:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   202fa:	4294      	cmp	r4, r2
   202fc:	6013      	str	r3, [r2, #0]
   202fe:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   20302:	d3f6      	bcc.n	202f2 <double_jacobian_default+0x142>
   20304:	9703      	str	r7, [sp, #12]
   20306:	9504      	str	r5, [sp, #16]
   20308:	9607      	str	r6, [sp, #28]
   2030a:	4622      	mov	r2, r4
   2030c:	4621      	mov	r1, r4
   2030e:	f998 3000 	ldrsb.w	r3, [r8]
   20312:	a818      	add	r0, sp, #96	; 0x60
   20314:	f7ff f90c 	bl	1f530 <uECC_vli_mult>
   20318:	9d07      	ldr	r5, [sp, #28]
   2031a:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   2031e:	4628      	mov	r0, r5
   20320:	a918      	add	r1, sp, #96	; 0x60
   20322:	4798      	blx	r3
   20324:	4629      	mov	r1, r5
   20326:	4628      	mov	r0, r5
   20328:	465b      	mov	r3, fp
   2032a:	aa10      	add	r2, sp, #64	; 0x40
   2032c:	f8cd 9000 	str.w	r9, [sp]
   20330:	f7ff fae6 	bl	1f900 <uECC_vli_modSub>
   20334:	4629      	mov	r1, r5
   20336:	4628      	mov	r0, r5
   20338:	465b      	mov	r3, fp
   2033a:	aa10      	add	r2, sp, #64	; 0x40
   2033c:	f8cd 9000 	str.w	r9, [sp]
   20340:	f7ff fade 	bl	1f900 <uECC_vli_modSub>
   20344:	a910      	add	r1, sp, #64	; 0x40
   20346:	462a      	mov	r2, r5
   20348:	4608      	mov	r0, r1
   2034a:	465b      	mov	r3, fp
   2034c:	f8cd 9000 	str.w	r9, [sp]
   20350:	f7ff fad6 	bl	1f900 <uECC_vli_modSub>
   20354:	aa10      	add	r2, sp, #64	; 0x40
   20356:	4621      	mov	r1, r4
   20358:	f998 3000 	ldrsb.w	r3, [r8]
   2035c:	a818      	add	r0, sp, #96	; 0x60
   2035e:	f7ff f8e7 	bl	1f530 <uECC_vli_mult>
   20362:	4620      	mov	r0, r4
   20364:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   20368:	a918      	add	r1, sp, #96	; 0x60
   2036a:	4798      	blx	r3
   2036c:	aa08      	add	r2, sp, #32
   2036e:	465b      	mov	r3, fp
   20370:	4621      	mov	r1, r4
   20372:	f8cd 9000 	str.w	r9, [sp]
   20376:	4610      	mov	r0, r2
   20378:	f7ff fac2 	bl	1f900 <uECC_vli_modSub>
   2037c:	9f03      	ldr	r7, [sp, #12]
   2037e:	9d04      	ldr	r5, [sp, #16]
   20380:	3c04      	subs	r4, #4
   20382:	463b      	mov	r3, r7
   20384:	f853 2f04 	ldr.w	r2, [r3, #4]!
   20388:	f844 2f04 	str.w	r2, [r4, #4]!
   2038c:	42ab      	cmp	r3, r5
   2038e:	d1f9      	bne.n	20384 <double_jacobian_default+0x1d4>
   20390:	9b06      	ldr	r3, [sp, #24]
   20392:	4453      	add	r3, sl
   20394:	4619      	mov	r1, r3
   20396:	f1aa 0304 	sub.w	r3, sl, #4
   2039a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2039e:	f847 2f04 	str.w	r2, [r7, #4]!
   203a2:	428b      	cmp	r3, r1
   203a4:	d1f9      	bne.n	2039a <double_jacobian_default+0x1ea>
   203a6:	9a05      	ldr	r2, [sp, #20]
   203a8:	3201      	adds	r2, #1
   203aa:	0092      	lsls	r2, r2, #2
   203ac:	a908      	add	r1, sp, #32
   203ae:	4650      	mov	r0, sl
   203b0:	f7eb fed6 	bl	c160 <memcpy>
   203b4:	b029      	add	sp, #164	; 0xa4
   203b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203ba:	f1c9 0208 	rsb	r2, r9, #8
   203be:	00d2      	lsls	r2, r2, #3
   203c0:	3201      	adds	r2, #1
   203c2:	4623      	mov	r3, r4
   203c4:	4659      	mov	r1, fp
   203c6:	4620      	mov	r0, r4
   203c8:	2500      	movs	r5, #0
   203ca:	a704      	add	r7, pc, #16	; (adr r7, 203dc <double_jacobian_default+0x22c>)
   203cc:	f3af 8000 	nop.w
   203d0:	19d2      	adds	r2, r2, r7
   203d2:	c880      	ldmia	r0!, {r7}
   203d4:	c940      	ldmia	r1!, {r6}
   203d6:	19bf      	adds	r7, r7, r6
   203d8:	c380      	stmia	r3!, {r7}
   203da:	4710      	bx	r2
   203dc:	c880      	ldmia	r0!, {r7}
   203de:	c940      	ldmia	r1!, {r6}
   203e0:	4177      	adcs	r7, r6
   203e2:	c380      	stmia	r3!, {r7}
   203e4:	c880      	ldmia	r0!, {r7}
   203e6:	c940      	ldmia	r1!, {r6}
   203e8:	4177      	adcs	r7, r6
   203ea:	c380      	stmia	r3!, {r7}
   203ec:	c880      	ldmia	r0!, {r7}
   203ee:	c940      	ldmia	r1!, {r6}
   203f0:	4177      	adcs	r7, r6
   203f2:	c380      	stmia	r3!, {r7}
   203f4:	c880      	ldmia	r0!, {r7}
   203f6:	c940      	ldmia	r1!, {r6}
   203f8:	4177      	adcs	r7, r6
   203fa:	c380      	stmia	r3!, {r7}
   203fc:	c880      	ldmia	r0!, {r7}
   203fe:	c940      	ldmia	r1!, {r6}
   20400:	4177      	adcs	r7, r6
   20402:	c380      	stmia	r3!, {r7}
   20404:	c880      	ldmia	r0!, {r7}
   20406:	c940      	ldmia	r1!, {r6}
   20408:	4177      	adcs	r7, r6
   2040a:	c380      	stmia	r3!, {r7}
   2040c:	c880      	ldmia	r0!, {r7}
   2040e:	c940      	ldmia	r1!, {r6}
   20410:	4177      	adcs	r7, r6
   20412:	c380      	stmia	r3!, {r7}
   20414:	416d      	adcs	r5, r5
   20416:	ea4f 0189 	mov.w	r1, r9, lsl #2
   2041a:	1863      	adds	r3, r4, r1
   2041c:	429c      	cmp	r4, r3
   2041e:	46ae      	mov	lr, r5
   20420:	d20f      	bcs.n	20442 <double_jacobian_default+0x292>
   20422:	9f03      	ldr	r7, [sp, #12]
   20424:	9d04      	ldr	r5, [sp, #16]
   20426:	9e07      	ldr	r6, [sp, #28]
   20428:	2200      	movs	r2, #0
   2042a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   2042e:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   20432:	429c      	cmp	r4, r3
   20434:	601a      	str	r2, [r3, #0]
   20436:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   2043a:	d3f6      	bcc.n	2042a <double_jacobian_default+0x27a>
   2043c:	9703      	str	r7, [sp, #12]
   2043e:	9504      	str	r5, [sp, #16]
   20440:	9607      	str	r6, [sp, #28]
   20442:	3904      	subs	r1, #4
   20444:	5863      	ldr	r3, [r4, r1]
   20446:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   2044a:	5063      	str	r3, [r4, r1]
   2044c:	e75d      	b.n	2030a <double_jacobian_default+0x15a>
   2044e:	bf00      	nop

00020450 <uECC_secp256r1>:
   20450:	4800      	ldr	r0, [pc, #0]	; (20454 <uECC_secp256r1+0x4>)
   20452:	4770      	bx	lr
   20454:	00023f70 	.word	0x00023f70

00020458 <uECC_valid_point>:
   20458:	b5f0      	push	{r4, r5, r6, r7, lr}
   2045a:	f991 3000 	ldrsb.w	r3, [r1]
   2045e:	b2da      	uxtb	r2, r3
   20460:	0057      	lsls	r7, r2, #1
   20462:	b2ff      	uxtb	r7, r7
   20464:	b27c      	sxtb	r4, r7
   20466:	2c00      	cmp	r4, #0
   20468:	b099      	sub	sp, #100	; 0x64
   2046a:	dd28      	ble.n	204be <uECC_valid_point+0x66>
   2046c:	3f01      	subs	r7, #1
   2046e:	b2ff      	uxtb	r7, r7
   20470:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   20474:	1f04      	subs	r4, r0, #4
   20476:	2500      	movs	r5, #0
   20478:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2047c:	42bc      	cmp	r4, r7
   2047e:	ea45 0506 	orr.w	r5, r5, r6
   20482:	d1f9      	bne.n	20478 <uECC_valid_point+0x20>
   20484:	b1f5      	cbz	r5, 204c4 <uECC_valid_point+0x6c>
   20486:	1e55      	subs	r5, r2, #1
   20488:	b26d      	sxtb	r5, r5
   2048a:	2d00      	cmp	r5, #0
   2048c:	f101 0e04 	add.w	lr, r1, #4
   20490:	db15      	blt.n	204be <uECC_valid_point+0x66>
   20492:	b22e      	sxth	r6, r5
   20494:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   20498:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   2049c:	4594      	cmp	ip, r2
   2049e:	d814      	bhi.n	204ca <uECC_valid_point+0x72>
   204a0:	d30d      	bcc.n	204be <uECC_valid_point+0x66>
   204a2:	462c      	mov	r4, r5
   204a4:	e006      	b.n	204b4 <uECC_valid_point+0x5c>
   204a6:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   204aa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   204ae:	4297      	cmp	r7, r2
   204b0:	d80b      	bhi.n	204ca <uECC_valid_point+0x72>
   204b2:	d304      	bcc.n	204be <uECC_valid_point+0x66>
   204b4:	3c01      	subs	r4, #1
   204b6:	b264      	sxtb	r4, r4
   204b8:	1c67      	adds	r7, r4, #1
   204ba:	b222      	sxth	r2, r4
   204bc:	d1f3      	bne.n	204a6 <uECC_valid_point+0x4e>
   204be:	2000      	movs	r0, #0
   204c0:	b019      	add	sp, #100	; 0x64
   204c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204c4:	4628      	mov	r0, r5
   204c6:	b019      	add	sp, #100	; 0x64
   204c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204ca:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   204ce:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   204d2:	4564      	cmp	r4, ip
   204d4:	d310      	bcc.n	204f8 <uECC_valid_point+0xa0>
   204d6:	d8f2      	bhi.n	204be <uECC_valid_point+0x66>
   204d8:	462c      	mov	r4, r5
   204da:	e006      	b.n	204ea <uECC_valid_point+0x92>
   204dc:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   204e0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   204e4:	45bc      	cmp	ip, r7
   204e6:	d807      	bhi.n	204f8 <uECC_valid_point+0xa0>
   204e8:	d3e9      	bcc.n	204be <uECC_valid_point+0x66>
   204ea:	3c01      	subs	r4, #1
   204ec:	b264      	sxtb	r4, r4
   204ee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   204f2:	b227      	sxth	r7, r4
   204f4:	d1f2      	bne.n	204dc <uECC_valid_point+0x84>
   204f6:	e7e2      	b.n	204be <uECC_valid_point+0x66>
   204f8:	460f      	mov	r7, r1
   204fa:	4604      	mov	r4, r0
   204fc:	4611      	mov	r1, r2
   204fe:	a808      	add	r0, sp, #32
   20500:	f7ff f816 	bl	1f530 <uECC_vli_mult>
   20504:	a908      	add	r1, sp, #32
   20506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   2050a:	4668      	mov	r0, sp
   2050c:	4798      	blx	r3
   2050e:	a808      	add	r0, sp, #32
   20510:	4621      	mov	r1, r4
   20512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   20516:	463a      	mov	r2, r7
   20518:	4798      	blx	r3
   2051a:	2000      	movs	r0, #0
   2051c:	e000      	b.n	20520 <uECC_valid_point+0xc8>
   2051e:	b22e      	sxth	r6, r5
   20520:	ab18      	add	r3, sp, #96	; 0x60
   20522:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20526:	3d01      	subs	r5, #1
   20528:	f856 2c60 	ldr.w	r2, [r6, #-96]
   2052c:	f856 3c40 	ldr.w	r3, [r6, #-64]
   20530:	b26d      	sxtb	r5, r5
   20532:	4053      	eors	r3, r2
   20534:	4318      	orrs	r0, r3
   20536:	1c6b      	adds	r3, r5, #1
   20538:	d1f1      	bne.n	2051e <uECC_valid_point+0xc6>
   2053a:	fab0 f080 	clz	r0, r0
   2053e:	0940      	lsrs	r0, r0, #5
   20540:	e7be      	b.n	204c0 <uECC_valid_point+0x68>
   20542:	bf00      	nop

00020544 <uECC_valid_public_key>:
   20544:	f7ff bf88 	b.w	20458 <uECC_valid_point>

00020548 <am_hal_ble_blocking_transfer.part.7>:
   20548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2054c:	4dcb      	ldr	r5, [pc, #812]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   2054e:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   20552:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   20556:	f36f 13c7 	bfc	r3, #7, #1
   2055a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2055e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   20562:	f36f 2308 	bfc	r3, #8, #1
   20566:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   2056a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2056e:	f36f 0300 	bfc	r3, #0, #1
   20572:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   20576:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   2057a:	f36f 0341 	bfc	r3, #1, #1
   2057e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   20582:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   20586:	f043 0301 	orr.w	r3, r3, #1
   2058a:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2058e:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   20592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20596:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   2059a:	7a8b      	ldrb	r3, [r1, #10]
   2059c:	2b01      	cmp	r3, #1
   2059e:	b085      	sub	sp, #20
   205a0:	460e      	mov	r6, r1
   205a2:	4604      	mov	r4, r0
   205a4:	d00a      	beq.n	205bc <am_hal_ble_blocking_transfer.part.7+0x74>
   205a6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   205aa:	061f      	lsls	r7, r3, #24
   205ac:	f100 8123 	bmi.w	207f6 <am_hal_ble_blocking_transfer.part.7+0x2ae>
   205b0:	48b3      	ldr	r0, [pc, #716]	; (20880 <am_hal_ble_blocking_transfer.part.7+0x338>)
   205b2:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   205b6:	b005      	add	sp, #20
   205b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205bc:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   205c0:	2b00      	cmp	r3, #0
   205c2:	f000 80e6 	beq.w	20792 <am_hal_ble_blocking_transfer.part.7+0x24a>
   205c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   205ca:	2b00      	cmp	r3, #0
   205cc:	f000 81f2 	beq.w	209b4 <am_hal_ble_blocking_transfer.part.7+0x46c>
   205d0:	2200      	movs	r2, #0
   205d2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   205d6:	b1a3      	cbz	r3, 20602 <am_hal_ble_blocking_transfer.part.7+0xba>
   205d8:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 2087c <am_hal_ble_blocking_transfer.part.7+0x334>
   205dc:	f240 152d 	movw	r5, #301	; 0x12d
   205e0:	2700      	movs	r7, #0
   205e2:	e006      	b.n	205f2 <am_hal_ble_blocking_transfer.part.7+0xaa>
   205e4:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   205e8:	20a0      	movs	r0, #160	; 0xa0
   205ea:	f001 fc4b 	bl	21e84 <am_hal_flash_delay>
   205ee:	3d01      	subs	r5, #1
   205f0:	d007      	beq.n	20602 <am_hal_ble_blocking_transfer.part.7+0xba>
   205f2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   205f6:	2b00      	cmp	r3, #0
   205f8:	d1f4      	bne.n	205e4 <am_hal_ble_blocking_transfer.part.7+0x9c>
   205fa:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   205fe:	0718      	lsls	r0, r3, #28
   20600:	d4f2      	bmi.n	205e8 <am_hal_ble_blocking_transfer.part.7+0xa0>
   20602:	4a9e      	ldr	r2, [pc, #632]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   20604:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   20608:	f043 0302 	orr.w	r3, r3, #2
   2060c:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   20610:	2050      	movs	r0, #80	; 0x50
   20612:	f001 fc37 	bl	21e84 <am_hal_flash_delay>
   20616:	6823      	ldr	r3, [r4, #0]
   20618:	4a9a      	ldr	r2, [pc, #616]	; (20884 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   2061a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2061e:	4293      	cmp	r3, r2
   20620:	f000 81d5 	beq.w	209ce <am_hal_ble_blocking_transfer.part.7+0x486>
   20624:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   20628:	f8df 9250 	ldr.w	r9, [pc, #592]	; 2087c <am_hal_ble_blocking_transfer.part.7+0x334>
   2062c:	2500      	movs	r5, #0
   2062e:	46aa      	mov	sl, r5
   20630:	2b00      	cmp	r3, #0
   20632:	f040 80c6 	bne.w	207c2 <am_hal_ble_blocking_transfer.part.7+0x27a>
   20636:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   2063a:	2b00      	cmp	r3, #0
   2063c:	f040 80ac 	bne.w	20798 <am_hal_ble_blocking_transfer.part.7+0x250>
   20640:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   20644:	0719      	lsls	r1, r3, #28
   20646:	f140 80ac 	bpl.w	207a2 <am_hal_ble_blocking_transfer.part.7+0x25a>
   2064a:	f001 fd67 	bl	2211c <am_hal_interrupt_master_disable>
   2064e:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   20652:	9002      	str	r0, [sp, #8]
   20654:	9802      	ldr	r0, [sp, #8]
   20656:	2f00      	cmp	r7, #0
   20658:	f040 80b6 	bne.w	207c8 <am_hal_ble_blocking_transfer.part.7+0x280>
   2065c:	2301      	movs	r3, #1
   2065e:	6463      	str	r3, [r4, #68]	; 0x44
   20660:	f001 fd60 	bl	22124 <am_hal_interrupt_master_set>
   20664:	4b85      	ldr	r3, [pc, #532]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   20666:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2066a:	f367 0241 	bfi	r2, r7, #1, #1
   2066e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   20672:	7b33      	ldrb	r3, [r6, #12]
   20674:	2b00      	cmp	r3, #0
   20676:	f000 80cb 	beq.w	20810 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   2067a:	2301      	movs	r3, #1
   2067c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   20680:	f104 070c 	add.w	r7, r4, #12
   20684:	6833      	ldr	r3, [r6, #0]
   20686:	6872      	ldr	r2, [r6, #4]
   20688:	68b0      	ldr	r0, [r6, #8]
   2068a:	68f1      	ldr	r1, [r6, #12]
   2068c:	60e3      	str	r3, [r4, #12]
   2068e:	607a      	str	r2, [r7, #4]
   20690:	60b8      	str	r0, [r7, #8]
   20692:	60f9      	str	r1, [r7, #12]
   20694:	6933      	ldr	r3, [r6, #16]
   20696:	6972      	ldr	r2, [r6, #20]
   20698:	617a      	str	r2, [r7, #20]
   2069a:	613b      	str	r3, [r7, #16]
   2069c:	f001 fd3e 	bl	2211c <am_hal_interrupt_master_disable>
   206a0:	9001      	str	r0, [sp, #4]
   206a2:	6823      	ldr	r3, [r4, #0]
   206a4:	4a77      	ldr	r2, [pc, #476]	; (20884 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   206a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   206aa:	4293      	cmp	r3, r2
   206ac:	f000 8197 	beq.w	209de <am_hal_ble_blocking_transfer.part.7+0x496>
   206b0:	7ab3      	ldrb	r3, [r6, #10]
   206b2:	2b01      	cmp	r3, #1
   206b4:	f000 8185 	beq.w	209c2 <am_hal_ble_blocking_transfer.part.7+0x47a>
   206b8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   206ba:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   206be:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 20884 <am_hal_ble_blocking_transfer.part.7+0x33c>
   206c2:	496e      	ldr	r1, [pc, #440]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   206c4:	f04f 0e00 	mov.w	lr, #0
   206c8:	45a9      	cmp	r9, r5
   206ca:	d926      	bls.n	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   206cc:	6823      	ldr	r3, [r4, #0]
   206ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   206d2:	4563      	cmp	r3, ip
   206d4:	d1f8      	bne.n	206c8 <am_hal_ble_blocking_transfer.part.7+0x180>
   206d6:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   206da:	f3c0 4007 	ubfx	r0, r0, #16, #8
   206de:	2803      	cmp	r0, #3
   206e0:	d9f2      	bls.n	206c8 <am_hal_ble_blocking_transfer.part.7+0x180>
   206e2:	4581      	cmp	r9, r0
   206e4:	bf94      	ite	ls
   206e6:	ebc5 0009 	rsbls	r0, r5, r9
   206ea:	f020 0003 	bichi.w	r0, r0, #3
   206ee:	68e2      	ldr	r2, [r4, #12]
   206f0:	f025 0303 	bic.w	r3, r5, #3
   206f4:	b168      	cbz	r0, 20712 <am_hal_ble_blocking_transfer.part.7+0x1ca>
   206f6:	441a      	add	r2, r3
   206f8:	2300      	movs	r3, #0
   206fa:	3304      	adds	r3, #4
   206fc:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   20700:	f842 5b04 	str.w	r5, [r2], #4
   20704:	4283      	cmp	r3, r0
   20706:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   2070a:	d3f6      	bcc.n	206fa <am_hal_ble_blocking_transfer.part.7+0x1b2>
   2070c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   2070e:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   20712:	4405      	add	r5, r0
   20714:	45a9      	cmp	r9, r5
   20716:	63e5      	str	r5, [r4, #60]	; 0x3c
   20718:	d8d8      	bhi.n	206cc <am_hal_ble_blocking_transfer.part.7+0x184>
   2071a:	9801      	ldr	r0, [sp, #4]
   2071c:	f001 fd02 	bl	22124 <am_hal_interrupt_master_set>
   20720:	4b56      	ldr	r3, [pc, #344]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   20722:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   20726:	07d2      	lsls	r2, r2, #31
   20728:	d40d      	bmi.n	20746 <am_hal_ble_blocking_transfer.part.7+0x1fe>
   2072a:	4699      	mov	r9, r3
   2072c:	f242 7510 	movw	r5, #10000	; 0x2710
   20730:	e002      	b.n	20738 <am_hal_ble_blocking_transfer.part.7+0x1f0>
   20732:	3d01      	subs	r5, #1
   20734:	f000 8149 	beq.w	209ca <am_hal_ble_blocking_transfer.part.7+0x482>
   20738:	2010      	movs	r0, #16
   2073a:	f001 fba3 	bl	21e84 <am_hal_flash_delay>
   2073e:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   20742:	07db      	lsls	r3, r3, #31
   20744:	d5f5      	bpl.n	20732 <am_hal_ble_blocking_transfer.part.7+0x1ea>
   20746:	4a4d      	ldr	r2, [pc, #308]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   20748:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   2074c:	f043 0301 	orr.w	r3, r3, #1
   20750:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   20754:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   20758:	2300      	movs	r3, #0
   2075a:	f041 0102 	orr.w	r1, r1, #2
   2075e:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   20762:	603b      	str	r3, [r7, #0]
   20764:	607b      	str	r3, [r7, #4]
   20766:	60bb      	str	r3, [r7, #8]
   20768:	60fb      	str	r3, [r7, #12]
   2076a:	613b      	str	r3, [r7, #16]
   2076c:	617b      	str	r3, [r7, #20]
   2076e:	63e3      	str	r3, [r4, #60]	; 0x3c
   20770:	7ab3      	ldrb	r3, [r6, #10]
   20772:	2b01      	cmp	r3, #1
   20774:	f000 8113 	beq.w	2099e <am_hal_ble_blocking_transfer.part.7+0x456>
   20778:	2b02      	cmp	r3, #2
   2077a:	f000 8107 	beq.w	2098c <am_hal_ble_blocking_transfer.part.7+0x444>
   2077e:	2300      	movs	r3, #0
   20780:	4a3e      	ldr	r2, [pc, #248]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   20782:	4618      	mov	r0, r3
   20784:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   20788:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   2078c:	b005      	add	sp, #20
   2078e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20792:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   20796:	e71e      	b.n	205d6 <am_hal_ble_blocking_transfer.part.7+0x8e>
   20798:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   2079c:	05da      	lsls	r2, r3, #23
   2079e:	f53f af54 	bmi.w	2064a <am_hal_ble_blocking_transfer.part.7+0x102>
   207a2:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   207a6:	d012      	beq.n	207ce <am_hal_ble_blocking_transfer.part.7+0x286>
   207a8:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   207ac:	061b      	lsls	r3, r3, #24
   207ae:	d40e      	bmi.n	207ce <am_hal_ble_blocking_transfer.part.7+0x286>
   207b0:	20a0      	movs	r0, #160	; 0xa0
   207b2:	f001 fb67 	bl	21e84 <am_hal_flash_delay>
   207b6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   207ba:	3501      	adds	r5, #1
   207bc:	2b00      	cmp	r3, #0
   207be:	f43f af3a 	beq.w	20636 <am_hal_ble_blocking_transfer.part.7+0xee>
   207c2:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   207c6:	e740      	b.n	2064a <am_hal_ble_blocking_transfer.part.7+0x102>
   207c8:	f001 fcac 	bl	22124 <am_hal_interrupt_master_set>
   207cc:	e7f0      	b.n	207b0 <am_hal_ble_blocking_transfer.part.7+0x268>
   207ce:	6823      	ldr	r3, [r4, #0]
   207d0:	4a2c      	ldr	r2, [pc, #176]	; (20884 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   207d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   207d6:	4293      	cmp	r3, r2
   207d8:	f000 811e 	beq.w	20a18 <am_hal_ble_blocking_transfer.part.7+0x4d0>
   207dc:	4b27      	ldr	r3, [pc, #156]	; (2087c <am_hal_ble_blocking_transfer.part.7+0x334>)
   207de:	482a      	ldr	r0, [pc, #168]	; (20888 <am_hal_ble_blocking_transfer.part.7+0x340>)
   207e0:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   207e4:	f36f 0241 	bfc	r2, #1, #1
   207e8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   207ec:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   207f0:	b005      	add	sp, #20
   207f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207f6:	f001 fc91 	bl	2211c <am_hal_interrupt_master_disable>
   207fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   207fe:	9003      	str	r0, [sp, #12]
   20800:	9803      	ldr	r0, [sp, #12]
   20802:	2b00      	cmp	r3, #0
   20804:	d157      	bne.n	208b6 <am_hal_ble_blocking_transfer.part.7+0x36e>
   20806:	2301      	movs	r3, #1
   20808:	6463      	str	r3, [r4, #68]	; 0x44
   2080a:	f001 fc8b 	bl	22124 <am_hal_interrupt_master_set>
   2080e:	e730      	b.n	20672 <am_hal_ble_blocking_transfer.part.7+0x12a>
   20810:	f104 070c 	add.w	r7, r4, #12
   20814:	6833      	ldr	r3, [r6, #0]
   20816:	6872      	ldr	r2, [r6, #4]
   20818:	68b0      	ldr	r0, [r6, #8]
   2081a:	68f1      	ldr	r1, [r6, #12]
   2081c:	60e3      	str	r3, [r4, #12]
   2081e:	607a      	str	r2, [r7, #4]
   20820:	60b8      	str	r0, [r7, #8]
   20822:	60f9      	str	r1, [r7, #12]
   20824:	6933      	ldr	r3, [r6, #16]
   20826:	6972      	ldr	r2, [r6, #20]
   20828:	617a      	str	r2, [r7, #20]
   2082a:	613b      	str	r3, [r7, #16]
   2082c:	f001 fc76 	bl	2211c <am_hal_interrupt_master_disable>
   20830:	9001      	str	r0, [sp, #4]
   20832:	2c00      	cmp	r4, #0
   20834:	f47f af35 	bne.w	206a2 <am_hal_ble_blocking_transfer.part.7+0x15a>
   20838:	7ab3      	ldrb	r3, [r6, #10]
   2083a:	2b01      	cmp	r3, #1
   2083c:	f47f af3c 	bne.w	206b8 <am_hal_ble_blocking_transfer.part.7+0x170>
   20840:	6823      	ldr	r3, [r4, #0]
   20842:	4a10      	ldr	r2, [pc, #64]	; (20884 <am_hal_ble_blocking_transfer.part.7+0x33c>)
   20844:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   20848:	68e5      	ldr	r5, [r4, #12]
   2084a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2084e:	4293      	cmp	r3, r2
   20850:	d06b      	beq.n	2092a <am_hal_ble_blocking_transfer.part.7+0x3e2>
   20852:	f1bb 0f00 	cmp.w	fp, #0
   20856:	f43f af60 	beq.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2085a:	f8df a020 	ldr.w	sl, [pc, #32]	; 2087c <am_hal_ble_blocking_transfer.part.7+0x334>
   2085e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   20862:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20866:	2b03      	cmp	r3, #3
   20868:	d833      	bhi.n	208d2 <am_hal_ble_blocking_transfer.part.7+0x38a>
   2086a:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   2086e:	07d9      	lsls	r1, r3, #31
   20870:	f53f af53 	bmi.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   20874:	f8df 9014 	ldr.w	r9, [pc, #20]	; 2088c <am_hal_ble_blocking_transfer.part.7+0x344>
   20878:	e013      	b.n	208a2 <am_hal_ble_blocking_transfer.part.7+0x35a>
   2087a:	bf00      	nop
   2087c:	5000c000 	.word	0x5000c000
   20880:	08000001 	.word	0x08000001
   20884:	01775230 	.word	0x01775230
   20888:	08000002 	.word	0x08000002
   2088c:	0007a120 	.word	0x0007a120
   20890:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   20894:	07d8      	lsls	r0, r3, #31
   20896:	f53f af40 	bmi.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   2089a:	f1b9 0901 	subs.w	r9, r9, #1
   2089e:	f43f af3c 	beq.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   208a2:	2010      	movs	r0, #16
   208a4:	f001 faee 	bl	21e84 <am_hal_flash_delay>
   208a8:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   208ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
   208b0:	2b03      	cmp	r3, #3
   208b2:	d9ed      	bls.n	20890 <am_hal_ble_blocking_transfer.part.7+0x348>
   208b4:	e00d      	b.n	208d2 <am_hal_ble_blocking_transfer.part.7+0x38a>
   208b6:	f001 fc35 	bl	22124 <am_hal_interrupt_master_set>
   208ba:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   208be:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   208c2:	e678      	b.n	205b6 <am_hal_ble_blocking_transfer.part.7+0x6e>
   208c4:	2b03      	cmp	r3, #3
   208c6:	f240 80b8 	bls.w	20a3a <am_hal_ble_blocking_transfer.part.7+0x4f2>
   208ca:	f1bb 0f00 	cmp.w	fp, #0
   208ce:	f43f af24 	beq.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   208d2:	f855 2b04 	ldr.w	r2, [r5], #4
   208d6:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   208da:	f1bb 0f03 	cmp.w	fp, #3
   208de:	f1a3 0304 	sub.w	r3, r3, #4
   208e2:	f1ab 0b04 	sub.w	fp, fp, #4
   208e6:	f67f af18 	bls.w	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   208ea:	e7eb      	b.n	208c4 <am_hal_ble_blocking_transfer.part.7+0x37c>
   208ec:	2000      	movs	r0, #0
   208ee:	4602      	mov	r2, r0
   208f0:	f896 c00c 	ldrb.w	ip, [r6, #12]
   208f4:	f896 e00a 	ldrb.w	lr, [r6, #10]
   208f8:	8935      	ldrh	r5, [r6, #8]
   208fa:	4952      	ldr	r1, [pc, #328]	; (20a44 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   208fc:	015b      	lsls	r3, r3, #5
   208fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
   20902:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   20906:	022d      	lsls	r5, r5, #8
   20908:	4029      	ands	r1, r5
   2090a:	ea4e 0303 	orr.w	r3, lr, r3
   2090e:	430b      	orrs	r3, r1
   20910:	494d      	ldr	r1, [pc, #308]	; (20a48 <am_hal_ble_blocking_transfer.part.7+0x500>)
   20912:	4313      	orrs	r3, r2
   20914:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   20918:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   2091c:	7ab3      	ldrb	r3, [r6, #10]
   2091e:	2b01      	cmp	r3, #1
   20920:	f47f aeca 	bne.w	206b8 <am_hal_ble_blocking_transfer.part.7+0x170>
   20924:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   20928:	68e5      	ldr	r5, [r4, #12]
   2092a:	79f2      	ldrb	r2, [r6, #7]
   2092c:	2a03      	cmp	r2, #3
   2092e:	d890      	bhi.n	20852 <am_hal_ble_blocking_transfer.part.7+0x30a>
   20930:	e8df f002 	tbb	[pc, r2]
   20934:	1e242802 	.word	0x1e242802
   20938:	2100      	movs	r1, #0
   2093a:	460b      	mov	r3, r1
   2093c:	f896 e00c 	ldrb.w	lr, [r6, #12]
   20940:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   20944:	483f      	ldr	r0, [pc, #252]	; (20a44 <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   20946:	0152      	lsls	r2, r2, #5
   20948:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   2094c:	f002 0260 	and.w	r2, r2, #96	; 0x60
   20950:	f04e 0e01 	orr.w	lr, lr, #1
   20954:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   20958:	ea0c 0000 	and.w	r0, ip, r0
   2095c:	ea4e 0202 	orr.w	r2, lr, r2
   20960:	4302      	orrs	r2, r0
   20962:	4839      	ldr	r0, [pc, #228]	; (20a48 <am_hal_ble_blocking_transfer.part.7+0x500>)
   20964:	4313      	orrs	r3, r2
   20966:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   2096a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   2096e:	e770      	b.n	20852 <am_hal_ble_blocking_transfer.part.7+0x30a>
   20970:	88b1      	ldrh	r1, [r6, #4]
   20972:	79b3      	ldrb	r3, [r6, #6]
   20974:	ba49      	rev16	r1, r1
   20976:	b289      	uxth	r1, r1
   20978:	061b      	lsls	r3, r3, #24
   2097a:	e7df      	b.n	2093c <am_hal_ble_blocking_transfer.part.7+0x3f4>
   2097c:	7973      	ldrb	r3, [r6, #5]
   2097e:	7931      	ldrb	r1, [r6, #4]
   20980:	061b      	lsls	r3, r3, #24
   20982:	e7db      	b.n	2093c <am_hal_ble_blocking_transfer.part.7+0x3f4>
   20984:	7933      	ldrb	r3, [r6, #4]
   20986:	2100      	movs	r1, #0
   20988:	061b      	lsls	r3, r3, #24
   2098a:	e7d7      	b.n	2093c <am_hal_ble_blocking_transfer.part.7+0x3f4>
   2098c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   20990:	2b00      	cmp	r3, #0
   20992:	f43f aef4 	beq.w	2077e <am_hal_ble_blocking_transfer.part.7+0x236>
   20996:	2300      	movs	r3, #0
   20998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2099c:	e6ef      	b.n	2077e <am_hal_ble_blocking_transfer.part.7+0x236>
   2099e:	6823      	ldr	r3, [r4, #0]
   209a0:	492a      	ldr	r1, [pc, #168]	; (20a4c <am_hal_ble_blocking_transfer.part.7+0x504>)
   209a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   209a6:	428b      	cmp	r3, r1
   209a8:	d03f      	beq.n	20a2a <am_hal_ble_blocking_transfer.part.7+0x4e2>
   209aa:	2301      	movs	r3, #1
   209ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   209b0:	7ab3      	ldrb	r3, [r6, #10]
   209b2:	e6e1      	b.n	20778 <am_hal_ble_blocking_transfer.part.7+0x230>
   209b4:	f64b 3080 	movw	r0, #48000	; 0xbb80
   209b8:	f001 fa64 	bl	21e84 <am_hal_flash_delay>
   209bc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   209c0:	e606      	b.n	205d0 <am_hal_ble_blocking_transfer.part.7+0x88>
   209c2:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   209c6:	68e5      	ldr	r5, [r4, #12]
   209c8:	e743      	b.n	20852 <am_hal_ble_blocking_transfer.part.7+0x30a>
   209ca:	4821      	ldr	r0, [pc, #132]	; (20a50 <am_hal_ble_blocking_transfer.part.7+0x508>)
   209cc:	e5f3      	b.n	205b6 <am_hal_ble_blocking_transfer.part.7+0x6e>
   209ce:	4a1e      	ldr	r2, [pc, #120]	; (20a48 <am_hal_ble_blocking_transfer.part.7+0x500>)
   209d0:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   209d4:	f043 030c 	orr.w	r3, r3, #12
   209d8:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   209dc:	e622      	b.n	20624 <am_hal_ble_blocking_transfer.part.7+0xdc>
   209de:	79f3      	ldrb	r3, [r6, #7]
   209e0:	2b03      	cmp	r3, #3
   209e2:	f63f af29 	bhi.w	20838 <am_hal_ble_blocking_transfer.part.7+0x2f0>
   209e6:	a201      	add	r2, pc, #4	; (adr r2, 209ec <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   209e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   209ec:	000208ed 	.word	0x000208ed
   209f0:	00020a11 	.word	0x00020a11
   209f4:	00020a09 	.word	0x00020a09
   209f8:	000209fd 	.word	0x000209fd
   209fc:	88b0      	ldrh	r0, [r6, #4]
   209fe:	79b2      	ldrb	r2, [r6, #6]
   20a00:	ba40      	rev16	r0, r0
   20a02:	b280      	uxth	r0, r0
   20a04:	0612      	lsls	r2, r2, #24
   20a06:	e773      	b.n	208f0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   20a08:	7972      	ldrb	r2, [r6, #5]
   20a0a:	7930      	ldrb	r0, [r6, #4]
   20a0c:	0612      	lsls	r2, r2, #24
   20a0e:	e76f      	b.n	208f0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   20a10:	7932      	ldrb	r2, [r6, #4]
   20a12:	2000      	movs	r0, #0
   20a14:	0612      	lsls	r2, r2, #24
   20a16:	e76b      	b.n	208f0 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   20a18:	4b0b      	ldr	r3, [pc, #44]	; (20a48 <am_hal_ble_blocking_transfer.part.7+0x500>)
   20a1a:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   20a1e:	2102      	movs	r1, #2
   20a20:	f361 0283 	bfi	r2, r1, #2, #2
   20a24:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   20a28:	e6d8      	b.n	207dc <am_hal_ble_blocking_transfer.part.7+0x294>
   20a2a:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   20a2e:	2102      	movs	r1, #2
   20a30:	f361 0383 	bfi	r3, r1, #2, #2
   20a34:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   20a38:	e7b7      	b.n	209aa <am_hal_ble_blocking_transfer.part.7+0x462>
   20a3a:	f1bb 0f00 	cmp.w	fp, #0
   20a3e:	f47f af0e 	bne.w	2085e <am_hal_ble_blocking_transfer.part.7+0x316>
   20a42:	e66a      	b.n	2071a <am_hal_ble_blocking_transfer.part.7+0x1d2>
   20a44:	000fff00 	.word	0x000fff00
   20a48:	5000c000 	.word	0x5000c000
   20a4c:	01775230 	.word	0x01775230
   20a50:	08000009 	.word	0x08000009

00020a54 <am_hal_ble_initialize>:
   20a54:	b108      	cbz	r0, 20a5a <am_hal_ble_initialize+0x6>
   20a56:	2005      	movs	r0, #5
   20a58:	4770      	bx	lr
   20a5a:	b149      	cbz	r1, 20a70 <am_hal_ble_initialize+0x1c>
   20a5c:	b4f0      	push	{r4, r5, r6, r7}
   20a5e:	4b19      	ldr	r3, [pc, #100]	; (20ac4 <am_hal_ble_initialize+0x70>)
   20a60:	78dc      	ldrb	r4, [r3, #3]
   20a62:	f3c4 0200 	ubfx	r2, r4, #0, #1
   20a66:	b2d0      	uxtb	r0, r2
   20a68:	b120      	cbz	r0, 20a74 <am_hal_ble_initialize+0x20>
   20a6a:	2007      	movs	r0, #7
   20a6c:	bcf0      	pop	{r4, r5, r6, r7}
   20a6e:	4770      	bx	lr
   20a70:	2006      	movs	r0, #6
   20a72:	4770      	bx	lr
   20a74:	f044 0401 	orr.w	r4, r4, #1
   20a78:	70dc      	strb	r4, [r3, #3]
   20a7a:	681e      	ldr	r6, [r3, #0]
   20a7c:	4f12      	ldr	r7, [pc, #72]	; (20ac8 <am_hal_ble_initialize+0x74>)
   20a7e:	60d8      	str	r0, [r3, #12]
   20a80:	f367 0617 	bfi	r6, r7, #0, #24
   20a84:	6258      	str	r0, [r3, #36]	; 0x24
   20a86:	6058      	str	r0, [r3, #4]
   20a88:	63d8      	str	r0, [r3, #60]	; 0x3c
   20a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   20a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   20a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   20a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   20a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   20a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   20aa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   20aa6:	721a      	strb	r2, [r3, #8]
   20aa8:	601e      	str	r6, [r3, #0]
   20aaa:	6118      	str	r0, [r3, #16]
   20aac:	6158      	str	r0, [r3, #20]
   20aae:	6198      	str	r0, [r3, #24]
   20ab0:	61d8      	str	r0, [r3, #28]
   20ab2:	6218      	str	r0, [r3, #32]
   20ab4:	6298      	str	r0, [r3, #40]	; 0x28
   20ab6:	62d8      	str	r0, [r3, #44]	; 0x2c
   20ab8:	6318      	str	r0, [r3, #48]	; 0x30
   20aba:	6358      	str	r0, [r3, #52]	; 0x34
   20abc:	6398      	str	r0, [r3, #56]	; 0x38
   20abe:	600b      	str	r3, [r1, #0]
   20ac0:	e7d4      	b.n	20a6c <am_hal_ble_initialize+0x18>
   20ac2:	bf00      	nop
   20ac4:	10009fc4 	.word	0x10009fc4
   20ac8:	00775230 	.word	0x00775230

00020acc <am_hal_ble_deinitialize>:
   20acc:	b128      	cbz	r0, 20ada <am_hal_ble_deinitialize+0xe>
   20ace:	6803      	ldr	r3, [r0, #0]
   20ad0:	4a13      	ldr	r2, [pc, #76]	; (20b20 <am_hal_ble_deinitialize+0x54>)
   20ad2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   20ad6:	4293      	cmp	r3, r2
   20ad8:	d001      	beq.n	20ade <am_hal_ble_deinitialize+0x12>
   20ada:	2002      	movs	r0, #2
   20adc:	4770      	bx	lr
   20ade:	78c2      	ldrb	r2, [r0, #3]
   20ae0:	2300      	movs	r3, #0
   20ae2:	f363 0200 	bfi	r2, r3, #0, #1
   20ae6:	70c2      	strb	r2, [r0, #3]
   20ae8:	6802      	ldr	r2, [r0, #0]
   20aea:	60c3      	str	r3, [r0, #12]
   20aec:	f363 0217 	bfi	r2, r3, #0, #24
   20af0:	6103      	str	r3, [r0, #16]
   20af2:	6143      	str	r3, [r0, #20]
   20af4:	6183      	str	r3, [r0, #24]
   20af6:	61c3      	str	r3, [r0, #28]
   20af8:	6203      	str	r3, [r0, #32]
   20afa:	6043      	str	r3, [r0, #4]
   20afc:	63c3      	str	r3, [r0, #60]	; 0x3c
   20afe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   20b02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   20b06:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   20b0a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   20b0e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   20b12:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   20b16:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   20b1a:	6002      	str	r2, [r0, #0]
   20b1c:	4618      	mov	r0, r3
   20b1e:	4770      	bx	lr
   20b20:	01775230 	.word	0x01775230

00020b24 <am_hal_ble_config>:
   20b24:	b128      	cbz	r0, 20b32 <am_hal_ble_config+0xe>
   20b26:	6803      	ldr	r3, [r0, #0]
   20b28:	4a3c      	ldr	r2, [pc, #240]	; (20c1c <am_hal_ble_config+0xf8>)
   20b2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   20b2e:	4293      	cmp	r3, r2
   20b30:	d001      	beq.n	20b36 <am_hal_ble_config+0x12>
   20b32:	2002      	movs	r0, #2
   20b34:	4770      	bx	lr
   20b36:	b4f0      	push	{r4, r5, r6, r7}
   20b38:	4b39      	ldr	r3, [pc, #228]	; (20c20 <am_hal_ble_config+0xfc>)
   20b3a:	6844      	ldr	r4, [r0, #4]
   20b3c:	4d38      	ldr	r5, [pc, #224]	; (20c20 <am_hal_ble_config+0xfc>)
   20b3e:	2203      	movs	r2, #3
   20b40:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   20b44:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   20b48:	f36f 4251 	bfc	r2, #17, #1
   20b4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   20b50:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   20b54:	f36f 4210 	bfc	r2, #16, #1
   20b58:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   20b5c:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   20b60:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   20b64:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   20b68:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   20b6c:	6888      	ldr	r0, [r1, #8]
   20b6e:	f360 220d 	bfi	r2, r0, #8, #6
   20b72:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   20b76:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   20b7a:	6848      	ldr	r0, [r1, #4]
   20b7c:	f360 0205 	bfi	r2, r0, #0, #6
   20b80:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   20b84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   20b88:	f042 0201 	orr.w	r2, r2, #1
   20b8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20b90:	680b      	ldr	r3, [r1, #0]
   20b92:	68c8      	ldr	r0, [r1, #12]
   20b94:	4a23      	ldr	r2, [pc, #140]	; (20c24 <am_hal_ble_config+0x100>)
   20b96:	021b      	lsls	r3, r3, #8
   20b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   20b9c:	2802      	cmp	r0, #2
   20b9e:	bf08      	it	eq
   20ba0:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   20ba4:	f043 0301 	orr.w	r3, r3, #1
   20ba8:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   20bac:	68d3      	ldr	r3, [r2, #12]
   20bae:	b2db      	uxtb	r3, r3
   20bb0:	2b12      	cmp	r3, #18
   20bb2:	d009      	beq.n	20bc8 <am_hal_ble_config+0xa4>
   20bb4:	4b1c      	ldr	r3, [pc, #112]	; (20c28 <am_hal_ble_config+0x104>)
   20bb6:	7e8a      	ldrb	r2, [r1, #26]
   20bb8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   20bbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   20bc0:	2000      	movs	r0, #0
   20bc2:	7222      	strb	r2, [r4, #8]
   20bc4:	bcf0      	pop	{r4, r5, r6, r7}
   20bc6:	4770      	bx	lr
   20bc8:	4f18      	ldr	r7, [pc, #96]	; (20c2c <am_hal_ble_config+0x108>)
   20bca:	68fa      	ldr	r2, [r7, #12]
   20bcc:	687b      	ldr	r3, [r7, #4]
   20bce:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   20bd2:	6908      	ldr	r0, [r1, #16]
   20bd4:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   20bd8:	6908      	ldr	r0, [r1, #16]
   20bda:	0a00      	lsrs	r0, r0, #8
   20bdc:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   20be0:	6948      	ldr	r0, [r1, #20]
   20be2:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   20be6:	6948      	ldr	r0, [r1, #20]
   20be8:	0a00      	lsrs	r0, r0, #8
   20bea:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   20bee:	7e48      	ldrb	r0, [r1, #25]
   20bf0:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   20bf4:	7e08      	ldrb	r0, [r1, #24]
   20bf6:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   20bfa:	b16b      	cbz	r3, 20c18 <am_hal_ble_config+0xf4>
   20bfc:	4e0c      	ldr	r6, [pc, #48]	; (20c30 <am_hal_ble_config+0x10c>)
   20bfe:	18d5      	adds	r5, r2, r3
   20c00:	2300      	movs	r3, #0
   20c02:	f812 0b01 	ldrb.w	r0, [r2], #1
   20c06:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   20c0a:	4295      	cmp	r5, r2
   20c0c:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   20c10:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   20c14:	b29b      	uxth	r3, r3
   20c16:	d1f4      	bne.n	20c02 <am_hal_ble_config+0xde>
   20c18:	60bb      	str	r3, [r7, #8]
   20c1a:	e7cb      	b.n	20bb4 <am_hal_ble_config+0x90>
   20c1c:	01775230 	.word	0x01775230
   20c20:	5000c000 	.word	0x5000c000
   20c24:	40020000 	.word	0x40020000
   20c28:	10009fc4 	.word	0x10009fc4
   20c2c:	10002ce4 	.word	0x10002ce4
   20c30:	00024020 	.word	0x00024020

00020c34 <am_hal_ble_power_control>:
   20c34:	b538      	push	{r3, r4, r5, lr}
   20c36:	4b52      	ldr	r3, [pc, #328]	; (20d80 <am_hal_ble_power_control+0x14c>)
   20c38:	68db      	ldr	r3, [r3, #12]
   20c3a:	b2db      	uxtb	r3, r3
   20c3c:	2b11      	cmp	r3, #17
   20c3e:	d903      	bls.n	20c48 <am_hal_ble_power_control+0x14>
   20c40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   20c44:	4a4f      	ldr	r2, [pc, #316]	; (20d84 <am_hal_ble_power_control+0x150>)
   20c46:	63da      	str	r2, [r3, #60]	; 0x3c
   20c48:	b128      	cbz	r0, 20c56 <am_hal_ble_power_control+0x22>
   20c4a:	6803      	ldr	r3, [r0, #0]
   20c4c:	4a4e      	ldr	r2, [pc, #312]	; (20d88 <am_hal_ble_power_control+0x154>)
   20c4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   20c52:	4293      	cmp	r3, r2
   20c54:	d002      	beq.n	20c5c <am_hal_ble_power_control+0x28>
   20c56:	2402      	movs	r4, #2
   20c58:	4620      	mov	r0, r4
   20c5a:	bd38      	pop	{r3, r4, r5, pc}
   20c5c:	b9f9      	cbnz	r1, 20c9e <am_hal_ble_power_control+0x6a>
   20c5e:	4b4b      	ldr	r3, [pc, #300]	; (20d8c <am_hal_ble_power_control+0x158>)
   20c60:	699b      	ldr	r3, [r3, #24]
   20c62:	05db      	lsls	r3, r3, #23
   20c64:	d454      	bmi.n	20d10 <am_hal_ble_power_control+0xdc>
   20c66:	4d46      	ldr	r5, [pc, #280]	; (20d80 <am_hal_ble_power_control+0x14c>)
   20c68:	69ab      	ldr	r3, [r5, #24]
   20c6a:	f043 0301 	orr.w	r3, r3, #1
   20c6e:	61ab      	str	r3, [r5, #24]
   20c70:	69ab      	ldr	r3, [r5, #24]
   20c72:	f003 0307 	and.w	r3, r3, #7
   20c76:	2b07      	cmp	r3, #7
   20c78:	d00b      	beq.n	20c92 <am_hal_ble_power_control+0x5e>
   20c7a:	4c45      	ldr	r4, [pc, #276]	; (20d90 <am_hal_ble_power_control+0x15c>)
   20c7c:	e001      	b.n	20c82 <am_hal_ble_power_control+0x4e>
   20c7e:	3c01      	subs	r4, #1
   20c80:	d06b      	beq.n	20d5a <am_hal_ble_power_control+0x126>
   20c82:	2010      	movs	r0, #16
   20c84:	f001 f8fe 	bl	21e84 <am_hal_flash_delay>
   20c88:	69ab      	ldr	r3, [r5, #24]
   20c8a:	f003 0307 	and.w	r3, r3, #7
   20c8e:	2b07      	cmp	r3, #7
   20c90:	d1f5      	bne.n	20c7e <am_hal_ble_power_control+0x4a>
   20c92:	200e      	movs	r0, #14
   20c94:	f001 fae0 	bl	22258 <am_hal_pwrctrl_periph_enable>
   20c98:	b128      	cbz	r0, 20ca6 <am_hal_ble_power_control+0x72>
   20c9a:	4c3e      	ldr	r4, [pc, #248]	; (20d94 <am_hal_ble_power_control+0x160>)
   20c9c:	e7dc      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20c9e:	2901      	cmp	r1, #1
   20ca0:	d038      	beq.n	20d14 <am_hal_ble_power_control+0xe0>
   20ca2:	2407      	movs	r4, #7
   20ca4:	e7d8      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20ca6:	4b3c      	ldr	r3, [pc, #240]	; (20d98 <am_hal_ble_power_control+0x164>)
   20ca8:	4935      	ldr	r1, [pc, #212]	; (20d80 <am_hal_ble_power_control+0x14c>)
   20caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20cae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   20cb2:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   20cb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   20cba:	f360 02df 	bfi	r2, r0, #3, #29
   20cbe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   20cc2:	68cb      	ldr	r3, [r1, #12]
   20cc4:	b2db      	uxtb	r3, r3
   20cc6:	2b11      	cmp	r3, #17
   20cc8:	d949      	bls.n	20d5e <am_hal_ble_power_control+0x12a>
   20cca:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   20cce:	f043 0320 	orr.w	r3, r3, #32
   20cd2:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   20cd6:	4d30      	ldr	r5, [pc, #192]	; (20d98 <am_hal_ble_power_control+0x164>)
   20cd8:	4830      	ldr	r0, [pc, #192]	; (20d9c <am_hal_ble_power_control+0x168>)
   20cda:	f001 f8d3 	bl	21e84 <am_hal_flash_delay>
   20cde:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   20ce2:	f043 0301 	orr.w	r3, r3, #1
   20ce6:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   20cea:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   20cee:	f3c3 2302 	ubfx	r3, r3, #8, #3
   20cf2:	2b03      	cmp	r3, #3
   20cf4:	d00c      	beq.n	20d10 <am_hal_ble_power_control+0xdc>
   20cf6:	4c2a      	ldr	r4, [pc, #168]	; (20da0 <am_hal_ble_power_control+0x16c>)
   20cf8:	e001      	b.n	20cfe <am_hal_ble_power_control+0xca>
   20cfa:	3c01      	subs	r4, #1
   20cfc:	d039      	beq.n	20d72 <am_hal_ble_power_control+0x13e>
   20cfe:	2010      	movs	r0, #16
   20d00:	f001 f8c0 	bl	21e84 <am_hal_flash_delay>
   20d04:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   20d08:	f3c3 2302 	ubfx	r3, r3, #8, #3
   20d0c:	2b03      	cmp	r3, #3
   20d0e:	d1f4      	bne.n	20cfa <am_hal_ble_power_control+0xc6>
   20d10:	2400      	movs	r4, #0
   20d12:	e7a1      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20d14:	4b20      	ldr	r3, [pc, #128]	; (20d98 <am_hal_ble_power_control+0x164>)
   20d16:	481a      	ldr	r0, [pc, #104]	; (20d80 <am_hal_ble_power_control+0x14c>)
   20d18:	2200      	movs	r2, #0
   20d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   20d1e:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   20d22:	f362 01df 	bfi	r1, r2, #3, #29
   20d26:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   20d2a:	68c3      	ldr	r3, [r0, #12]
   20d2c:	b2db      	uxtb	r3, r3
   20d2e:	2b11      	cmp	r3, #17
   20d30:	d919      	bls.n	20d66 <am_hal_ble_power_control+0x132>
   20d32:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   20d36:	f362 1345 	bfi	r3, r2, #5, #1
   20d3a:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   20d3e:	4b16      	ldr	r3, [pc, #88]	; (20d98 <am_hal_ble_power_control+0x164>)
   20d40:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   20d44:	f36f 0200 	bfc	r2, #0, #1
   20d48:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   20d4c:	200e      	movs	r0, #14
   20d4e:	f001 faad 	bl	222ac <am_hal_pwrctrl_periph_disable>
   20d52:	4604      	mov	r4, r0
   20d54:	b178      	cbz	r0, 20d76 <am_hal_ble_power_control+0x142>
   20d56:	4c13      	ldr	r4, [pc, #76]	; (20da4 <am_hal_ble_power_control+0x170>)
   20d58:	e77e      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20d5a:	4c13      	ldr	r4, [pc, #76]	; (20da8 <am_hal_ble_power_control+0x174>)
   20d5c:	e77c      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20d5e:	4b13      	ldr	r3, [pc, #76]	; (20dac <am_hal_ble_power_control+0x178>)
   20d60:	2204      	movs	r2, #4
   20d62:	601a      	str	r2, [r3, #0]
   20d64:	e7b7      	b.n	20cd6 <am_hal_ble_power_control+0xa2>
   20d66:	4a11      	ldr	r2, [pc, #68]	; (20dac <am_hal_ble_power_control+0x178>)
   20d68:	6813      	ldr	r3, [r2, #0]
   20d6a:	f023 0304 	bic.w	r3, r3, #4
   20d6e:	6013      	str	r3, [r2, #0]
   20d70:	e7e5      	b.n	20d3e <am_hal_ble_power_control+0x10a>
   20d72:	4c0f      	ldr	r4, [pc, #60]	; (20db0 <am_hal_ble_power_control+0x17c>)
   20d74:	e770      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20d76:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   20d7a:	f001 f883 	bl	21e84 <am_hal_flash_delay>
   20d7e:	e76b      	b.n	20c58 <am_hal_ble_power_control+0x24>
   20d80:	40020000 	.word	0x40020000
   20d84:	0fc0400f 	.word	0x0fc0400f
   20d88:	01775230 	.word	0x01775230
   20d8c:	40021000 	.word	0x40021000
   20d90:	000186a0 	.word	0x000186a0
   20d94:	08000007 	.word	0x08000007
   20d98:	5000c000 	.word	0x5000c000
   20d9c:	00013880 	.word	0x00013880
   20da0:	000f4240 	.word	0x000f4240
   20da4:	08000006 	.word	0x08000006
   20da8:	08000005 	.word	0x08000005
   20dac:	40020198 	.word	0x40020198
   20db0:	08000008 	.word	0x08000008

00020db4 <am_hal_ble_patch_copy_end_apply>:
   20db4:	b128      	cbz	r0, 20dc2 <am_hal_ble_patch_copy_end_apply+0xe>
   20db6:	6803      	ldr	r3, [r0, #0]
   20db8:	4a46      	ldr	r2, [pc, #280]	; (20ed4 <am_hal_ble_patch_copy_end_apply+0x120>)
   20dba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   20dbe:	4293      	cmp	r3, r2
   20dc0:	d001      	beq.n	20dc6 <am_hal_ble_patch_copy_end_apply+0x12>
   20dc2:	2002      	movs	r0, #2
   20dc4:	4770      	bx	lr
   20dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20dca:	b092      	sub	sp, #72	; 0x48
   20dcc:	2501      	movs	r5, #1
   20dce:	2400      	movs	r4, #0
   20dd0:	4606      	mov	r6, r0
   20dd2:	21f1      	movs	r1, #241	; 0xf1
   20dd4:	20ee      	movs	r0, #238	; 0xee
   20dd6:	2202      	movs	r2, #2
   20dd8:	f88d 5000 	strb.w	r5, [sp]
   20ddc:	f88d 0001 	strb.w	r0, [sp, #1]
   20de0:	f88d 1002 	strb.w	r1, [sp, #2]
   20de4:	f88d 2003 	strb.w	r2, [sp, #3]
   20de8:	f88d 4004 	strb.w	r4, [sp, #4]
   20dec:	f88d 4005 	strb.w	r4, [sp, #5]
   20df0:	f241 3588 	movw	r5, #5000	; 0x1388
   20df4:	f04f 0806 	mov.w	r8, #6
   20df8:	461f      	mov	r7, r3
   20dfa:	2201      	movs	r2, #1
   20dfc:	42bb      	cmp	r3, r7
   20dfe:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   20e02:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   20e06:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   20e0a:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   20e0e:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   20e12:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   20e16:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   20e1a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   20e1e:	940e      	str	r4, [sp, #56]	; 0x38
   20e20:	940f      	str	r4, [sp, #60]	; 0x3c
   20e22:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   20e26:	d029      	beq.n	20e7c <am_hal_ble_patch_copy_end_apply+0xc8>
   20e28:	4b2b      	ldr	r3, [pc, #172]	; (20ed8 <am_hal_ble_patch_copy_end_apply+0x124>)
   20e2a:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   20e2e:	0612      	lsls	r2, r2, #24
   20e30:	d40c      	bmi.n	20e4c <am_hal_ble_patch_copy_end_apply+0x98>
   20e32:	4d2a      	ldr	r5, [pc, #168]	; (20edc <am_hal_ble_patch_copy_end_apply+0x128>)
   20e34:	461c      	mov	r4, r3
   20e36:	2010      	movs	r0, #16
   20e38:	f001 f824 	bl	21e84 <am_hal_flash_delay>
   20e3c:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   20e40:	0619      	lsls	r1, r3, #24
   20e42:	d403      	bmi.n	20e4c <am_hal_ble_patch_copy_end_apply+0x98>
   20e44:	3d01      	subs	r5, #1
   20e46:	d1f6      	bne.n	20e36 <am_hal_ble_patch_copy_end_apply+0x82>
   20e48:	4825      	ldr	r0, [pc, #148]	; (20ee0 <am_hal_ble_patch_copy_end_apply+0x12c>)
   20e4a:	e014      	b.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20e4c:	6832      	ldr	r2, [r6, #0]
   20e4e:	4921      	ldr	r1, [pc, #132]	; (20ed4 <am_hal_ble_patch_copy_end_apply+0x120>)
   20e50:	f8cd d010 	str.w	sp, [sp, #16]
   20e54:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   20e58:	2300      	movs	r3, #0
   20e5a:	2402      	movs	r4, #2
   20e5c:	2005      	movs	r0, #5
   20e5e:	428a      	cmp	r2, r1
   20e60:	9306      	str	r3, [sp, #24]
   20e62:	9305      	str	r3, [sp, #20]
   20e64:	9307      	str	r3, [sp, #28]
   20e66:	9308      	str	r3, [sp, #32]
   20e68:	9309      	str	r3, [sp, #36]	; 0x24
   20e6a:	f88d 401a 	strb.w	r4, [sp, #26]
   20e6e:	f8ad 0018 	strh.w	r0, [sp, #24]
   20e72:	d00f      	beq.n	20e94 <am_hal_ble_patch_copy_end_apply+0xe0>
   20e74:	2002      	movs	r0, #2
   20e76:	b012      	add	sp, #72	; 0x48
   20e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e7c:	a90a      	add	r1, sp, #40	; 0x28
   20e7e:	4630      	mov	r0, r6
   20e80:	f7ff fb62 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   20e84:	2800      	cmp	r0, #0
   20e86:	d0cf      	beq.n	20e28 <am_hal_ble_patch_copy_end_apply+0x74>
   20e88:	3d01      	subs	r5, #1
   20e8a:	d0f4      	beq.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20e8c:	6833      	ldr	r3, [r6, #0]
   20e8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   20e92:	e7b2      	b.n	20dfa <am_hal_ble_patch_copy_end_apply+0x46>
   20e94:	a904      	add	r1, sp, #16
   20e96:	4630      	mov	r0, r6
   20e98:	f7ff fb56 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   20e9c:	2800      	cmp	r0, #0
   20e9e:	d1ea      	bne.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20ea0:	f89d 3000 	ldrb.w	r3, [sp]
   20ea4:	2b04      	cmp	r3, #4
   20ea6:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   20eaa:	f04f 0001 	mov.w	r0, #1
   20eae:	d1e2      	bne.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20eb0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   20eb4:	2bee      	cmp	r3, #238	; 0xee
   20eb6:	d1de      	bne.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20eb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   20ebc:	429a      	cmp	r2, r3
   20ebe:	d1da      	bne.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20ec0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   20ec4:	4283      	cmp	r3, r0
   20ec6:	d1d6      	bne.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20ec8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   20ecc:	3000      	adds	r0, #0
   20ece:	bf18      	it	ne
   20ed0:	2001      	movne	r0, #1
   20ed2:	e7d0      	b.n	20e76 <am_hal_ble_patch_copy_end_apply+0xc2>
   20ed4:	01775230 	.word	0x01775230
   20ed8:	5000c000 	.word	0x5000c000
   20edc:	000f4240 	.word	0x000f4240
   20ee0:	08000004 	.word	0x08000004

00020ee4 <am_hal_ble_blocking_hci_write>:
   20ee4:	b530      	push	{r4, r5, lr}
   20ee6:	b087      	sub	sp, #28
   20ee8:	2400      	movs	r4, #0
   20eea:	b29b      	uxth	r3, r3
   20eec:	2501      	movs	r5, #1
   20eee:	f88d 1004 	strb.w	r1, [sp, #4]
   20ef2:	f8ad 3008 	strh.w	r3, [sp, #8]
   20ef6:	9200      	str	r2, [sp, #0]
   20ef8:	f88d 4005 	strb.w	r4, [sp, #5]
   20efc:	f88d 4006 	strb.w	r4, [sp, #6]
   20f00:	f88d 4007 	strb.w	r4, [sp, #7]
   20f04:	f88d 400b 	strb.w	r4, [sp, #11]
   20f08:	f88d 400c 	strb.w	r4, [sp, #12]
   20f0c:	9404      	str	r4, [sp, #16]
   20f0e:	9405      	str	r4, [sp, #20]
   20f10:	f88d 500a 	strb.w	r5, [sp, #10]
   20f14:	b128      	cbz	r0, 20f22 <am_hal_ble_blocking_hci_write+0x3e>
   20f16:	6802      	ldr	r2, [r0, #0]
   20f18:	4c09      	ldr	r4, [pc, #36]	; (20f40 <am_hal_ble_blocking_hci_write+0x5c>)
   20f1a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   20f1e:	42a2      	cmp	r2, r4
   20f20:	d002      	beq.n	20f28 <am_hal_ble_blocking_hci_write+0x44>
   20f22:	2000      	movs	r0, #0
   20f24:	b007      	add	sp, #28
   20f26:	bd30      	pop	{r4, r5, pc}
   20f28:	b939      	cbnz	r1, 20f3a <am_hal_ble_blocking_hci_write+0x56>
   20f2a:	2b00      	cmp	r3, #0
   20f2c:	d0f9      	beq.n	20f22 <am_hal_ble_blocking_hci_write+0x3e>
   20f2e:	4669      	mov	r1, sp
   20f30:	f7ff fb0a 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   20f34:	2800      	cmp	r0, #0
   20f36:	d0f4      	beq.n	20f22 <am_hal_ble_blocking_hci_write+0x3e>
   20f38:	e7f4      	b.n	20f24 <am_hal_ble_blocking_hci_write+0x40>
   20f3a:	f88d 5007 	strb.w	r5, [sp, #7]
   20f3e:	e7f4      	b.n	20f2a <am_hal_ble_blocking_hci_write+0x46>
   20f40:	01775230 	.word	0x01775230

00020f44 <am_hal_ble_blocking_hci_read>:
   20f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20f48:	b089      	sub	sp, #36	; 0x24
   20f4a:	2300      	movs	r3, #0
   20f4c:	2502      	movs	r5, #2
   20f4e:	ac01      	add	r4, sp, #4
   20f50:	9402      	str	r4, [sp, #8]
   20f52:	f88d 300c 	strb.w	r3, [sp, #12]
   20f56:	f88d 300d 	strb.w	r3, [sp, #13]
   20f5a:	f88d 300e 	strb.w	r3, [sp, #14]
   20f5e:	f88d 300f 	strb.w	r3, [sp, #15]
   20f62:	f88d 3013 	strb.w	r3, [sp, #19]
   20f66:	f88d 3014 	strb.w	r3, [sp, #20]
   20f6a:	9306      	str	r3, [sp, #24]
   20f6c:	9307      	str	r3, [sp, #28]
   20f6e:	f8ad 5010 	strh.w	r5, [sp, #16]
   20f72:	f88d 5012 	strb.w	r5, [sp, #18]
   20f76:	b128      	cbz	r0, 20f84 <am_hal_ble_blocking_hci_read+0x40>
   20f78:	6804      	ldr	r4, [r0, #0]
   20f7a:	4e1f      	ldr	r6, [pc, #124]	; (20ff8 <am_hal_ble_blocking_hci_read+0xb4>)
   20f7c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   20f80:	42b4      	cmp	r4, r6
   20f82:	d003      	beq.n	20f8c <am_hal_ble_blocking_hci_read+0x48>
   20f84:	2000      	movs	r0, #0
   20f86:	b009      	add	sp, #36	; 0x24
   20f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f8c:	460f      	mov	r7, r1
   20f8e:	491b      	ldr	r1, [pc, #108]	; (20ffc <am_hal_ble_blocking_hci_read+0xb8>)
   20f90:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   20f94:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   20f98:	4681      	mov	r9, r0
   20f9a:	4690      	mov	r8, r2
   20f9c:	b92e      	cbnz	r6, 20faa <am_hal_ble_blocking_hci_read+0x66>
   20f9e:	f1b8 0f00 	cmp.w	r8, #0
   20fa2:	d0ef      	beq.n	20f84 <am_hal_ble_blocking_hci_read+0x40>
   20fa4:	f8c8 6000 	str.w	r6, [r8]
   20fa8:	e7ec      	b.n	20f84 <am_hal_ble_blocking_hci_read+0x40>
   20faa:	a902      	add	r1, sp, #8
   20fac:	f7ff facc 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   20fb0:	2800      	cmp	r0, #0
   20fb2:	d1e8      	bne.n	20f86 <am_hal_ble_blocking_hci_read+0x42>
   20fb4:	f89d 0005 	ldrb.w	r0, [sp, #5]
   20fb8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   20fbc:	9702      	str	r7, [sp, #8]
   20fbe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   20fc2:	b289      	uxth	r1, r1
   20fc4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   20fc8:	f8ad 1010 	strh.w	r1, [sp, #16]
   20fcc:	d901      	bls.n	20fd2 <am_hal_ble_blocking_hci_read+0x8e>
   20fce:	2005      	movs	r0, #5
   20fd0:	e7d9      	b.n	20f86 <am_hal_ble_blocking_hci_read+0x42>
   20fd2:	f8d9 0000 	ldr.w	r0, [r9]
   20fd6:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   20fda:	42a0      	cmp	r0, r4
   20fdc:	d001      	beq.n	20fe2 <am_hal_ble_blocking_hci_read+0x9e>
   20fde:	4628      	mov	r0, r5
   20fe0:	e7d1      	b.n	20f86 <am_hal_ble_blocking_hci_read+0x42>
   20fe2:	b129      	cbz	r1, 20ff0 <am_hal_ble_blocking_hci_read+0xac>
   20fe4:	a902      	add	r1, sp, #8
   20fe6:	4648      	mov	r0, r9
   20fe8:	f7ff faae 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   20fec:	2800      	cmp	r0, #0
   20fee:	d1ca      	bne.n	20f86 <am_hal_ble_blocking_hci_read+0x42>
   20ff0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   20ff4:	e7d3      	b.n	20f9e <am_hal_ble_blocking_hci_read+0x5a>
   20ff6:	bf00      	nop
   20ff8:	01775230 	.word	0x01775230
   20ffc:	5000c000 	.word	0x5000c000

00021000 <am_hal_ble_blocking_transfer>:
   21000:	b128      	cbz	r0, 2100e <am_hal_ble_blocking_transfer+0xe>
   21002:	6803      	ldr	r3, [r0, #0]
   21004:	4a08      	ldr	r2, [pc, #32]	; (21028 <am_hal_ble_blocking_transfer+0x28>)
   21006:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2100a:	4293      	cmp	r3, r2
   2100c:	d001      	beq.n	21012 <am_hal_ble_blocking_transfer+0x12>
   2100e:	2002      	movs	r0, #2
   21010:	4770      	bx	lr
   21012:	890b      	ldrh	r3, [r1, #8]
   21014:	b410      	push	{r4}
   21016:	b11b      	cbz	r3, 21020 <am_hal_ble_blocking_transfer+0x20>
   21018:	f85d 4b04 	ldr.w	r4, [sp], #4
   2101c:	f7ff ba94 	b.w	20548 <am_hal_ble_blocking_transfer.part.7>
   21020:	4618      	mov	r0, r3
   21022:	f85d 4b04 	ldr.w	r4, [sp], #4
   21026:	4770      	bx	lr
   21028:	01775230 	.word	0x01775230

0002102c <am_hal_ble_patch_apply>:
   2102c:	b128      	cbz	r0, 2103a <am_hal_ble_patch_apply+0xe>
   2102e:	6803      	ldr	r3, [r0, #0]
   21030:	4aae      	ldr	r2, [pc, #696]	; (212ec <am_hal_ble_patch_apply+0x2c0>)
   21032:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21036:	4293      	cmp	r3, r2
   21038:	d002      	beq.n	21040 <am_hal_ble_patch_apply+0x14>
   2103a:	2302      	movs	r3, #2
   2103c:	4618      	mov	r0, r3
   2103e:	4770      	bx	lr
   21040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21044:	684a      	ldr	r2, [r1, #4]
   21046:	680d      	ldr	r5, [r1, #0]
   21048:	b095      	sub	sp, #84	; 0x54
   2104a:	2701      	movs	r7, #1
   2104c:	4604      	mov	r4, r0
   2104e:	460e      	mov	r6, r1
   21050:	f88d 200c 	strb.w	r2, [sp, #12]
   21054:	20f1      	movs	r0, #241	; 0xf1
   21056:	0a12      	lsrs	r2, r2, #8
   21058:	2102      	movs	r1, #2
   2105a:	f88d 7008 	strb.w	r7, [sp, #8]
   2105e:	f88d 5009 	strb.w	r5, [sp, #9]
   21062:	f88d 200d 	strb.w	r2, [sp, #13]
   21066:	f88d 000a 	strb.w	r0, [sp, #10]
   2106a:	f88d 100b 	strb.w	r1, [sp, #11]
   2106e:	f241 3788 	movw	r7, #5000	; 0x1388
   21072:	2500      	movs	r5, #0
   21074:	f04f 0906 	mov.w	r9, #6
   21078:	4698      	mov	r8, r3
   2107a:	2201      	movs	r2, #1
   2107c:	a902      	add	r1, sp, #8
   2107e:	4543      	cmp	r3, r8
   21080:	910c      	str	r1, [sp, #48]	; 0x30
   21082:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   21086:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   2108a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   2108e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   21092:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   21096:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   2109a:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   2109e:	9510      	str	r5, [sp, #64]	; 0x40
   210a0:	9511      	str	r5, [sp, #68]	; 0x44
   210a2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   210a6:	d02b      	beq.n	21100 <am_hal_ble_patch_apply+0xd4>
   210a8:	4b91      	ldr	r3, [pc, #580]	; (212f0 <am_hal_ble_patch_apply+0x2c4>)
   210aa:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   210ae:	0612      	lsls	r2, r2, #24
   210b0:	d40c      	bmi.n	210cc <am_hal_ble_patch_apply+0xa0>
   210b2:	4f90      	ldr	r7, [pc, #576]	; (212f4 <am_hal_ble_patch_apply+0x2c8>)
   210b4:	461d      	mov	r5, r3
   210b6:	2010      	movs	r0, #16
   210b8:	f000 fee4 	bl	21e84 <am_hal_flash_delay>
   210bc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   210c0:	061b      	lsls	r3, r3, #24
   210c2:	d403      	bmi.n	210cc <am_hal_ble_patch_apply+0xa0>
   210c4:	3f01      	subs	r7, #1
   210c6:	d1f6      	bne.n	210b6 <am_hal_ble_patch_apply+0x8a>
   210c8:	4b8b      	ldr	r3, [pc, #556]	; (212f8 <am_hal_ble_patch_apply+0x2cc>)
   210ca:	e015      	b.n	210f8 <am_hal_ble_patch_apply+0xcc>
   210cc:	6825      	ldr	r5, [r4, #0]
   210ce:	4a87      	ldr	r2, [pc, #540]	; (212ec <am_hal_ble_patch_apply+0x2c0>)
   210d0:	ab02      	add	r3, sp, #8
   210d2:	9306      	str	r3, [sp, #24]
   210d4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   210d8:	2300      	movs	r3, #0
   210da:	9308      	str	r3, [sp, #32]
   210dc:	2102      	movs	r1, #2
   210de:	9307      	str	r3, [sp, #28]
   210e0:	9309      	str	r3, [sp, #36]	; 0x24
   210e2:	930a      	str	r3, [sp, #40]	; 0x28
   210e4:	930b      	str	r3, [sp, #44]	; 0x2c
   210e6:	4295      	cmp	r5, r2
   210e8:	f04f 0305 	mov.w	r3, #5
   210ec:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   210f0:	f8ad 3020 	strh.w	r3, [sp, #32]
   210f4:	d011      	beq.n	2111a <am_hal_ble_patch_apply+0xee>
   210f6:	2302      	movs	r3, #2
   210f8:	4618      	mov	r0, r3
   210fa:	b015      	add	sp, #84	; 0x54
   210fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21100:	a90c      	add	r1, sp, #48	; 0x30
   21102:	4620      	mov	r0, r4
   21104:	f7ff fa20 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21108:	4603      	mov	r3, r0
   2110a:	2800      	cmp	r0, #0
   2110c:	d0cc      	beq.n	210a8 <am_hal_ble_patch_apply+0x7c>
   2110e:	3f01      	subs	r7, #1
   21110:	d0f2      	beq.n	210f8 <am_hal_ble_patch_apply+0xcc>
   21112:	6823      	ldr	r3, [r4, #0]
   21114:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21118:	e7af      	b.n	2107a <am_hal_ble_patch_apply+0x4e>
   2111a:	a906      	add	r1, sp, #24
   2111c:	4620      	mov	r0, r4
   2111e:	f7ff fa13 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21122:	4603      	mov	r3, r0
   21124:	2800      	cmp	r0, #0
   21126:	d1e7      	bne.n	210f8 <am_hal_ble_patch_apply+0xcc>
   21128:	2304      	movs	r3, #4
   2112a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2112e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   21132:	23f1      	movs	r3, #241	; 0xf1
   21134:	7832      	ldrb	r2, [r6, #0]
   21136:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   2113a:	2904      	cmp	r1, #4
   2113c:	f04f 0301 	mov.w	r3, #1
   21140:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   21144:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   21148:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2114c:	f040 811a 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   21150:	f89d 1009 	ldrb.w	r1, [sp, #9]
   21154:	b2d3      	uxtb	r3, r2
   21156:	4299      	cmp	r1, r3
   21158:	f040 8114 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   2115c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   21160:	2bf1      	cmp	r3, #241	; 0xf1
   21162:	f040 810f 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   21166:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2116a:	2b01      	cmp	r3, #1
   2116c:	f040 810a 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   21170:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21174:	2b00      	cmp	r3, #0
   21176:	f040 8105 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   2117a:	f8d6 a004 	ldr.w	sl, [r6, #4]
   2117e:	f1ba 0f00 	cmp.w	sl, #0
   21182:	f000 8091 	beq.w	212a8 <am_hal_ble_patch_apply+0x27c>
   21186:	f8df 9178 	ldr.w	r9, [pc, #376]	; 21300 <am_hal_ble_patch_apply+0x2d4>
   2118a:	4f59      	ldr	r7, [pc, #356]	; (212f0 <am_hal_ble_patch_apply+0x2c4>)
   2118c:	9501      	str	r5, [sp, #4]
   2118e:	469b      	mov	fp, r3
   21190:	2201      	movs	r2, #1
   21192:	f889 2000 	strb.w	r2, [r9]
   21196:	6833      	ldr	r3, [r6, #0]
   21198:	f889 3001 	strb.w	r3, [r9, #1]
   2119c:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   211a0:	46d0      	mov	r8, sl
   211a2:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   211a6:	bf28      	it	cs
   211a8:	f04f 0880 	movcs.w	r8, #128	; 0x80
   211ac:	f889 3002 	strb.w	r3, [r9, #2]
   211b0:	f889 8003 	strb.w	r8, [r9, #3]
   211b4:	68f1      	ldr	r1, [r6, #12]
   211b6:	4851      	ldr	r0, [pc, #324]	; (212fc <am_hal_ble_patch_apply+0x2d0>)
   211b8:	f8cd 9018 	str.w	r9, [sp, #24]
   211bc:	2300      	movs	r3, #0
   211be:	f02b 0503 	bic.w	r5, fp, #3
   211c2:	9308      	str	r3, [sp, #32]
   211c4:	4429      	add	r1, r5
   211c6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   211ca:	f108 0504 	add.w	r5, r8, #4
   211ce:	4642      	mov	r2, r8
   211d0:	9307      	str	r3, [sp, #28]
   211d2:	9309      	str	r3, [sp, #36]	; 0x24
   211d4:	930a      	str	r3, [sp, #40]	; 0x28
   211d6:	930b      	str	r3, [sp, #44]	; 0x2c
   211d8:	f8ad 5020 	strh.w	r5, [sp, #32]
   211dc:	f7ea ffc0 	bl	c160 <memcpy>
   211e0:	6823      	ldr	r3, [r4, #0]
   211e2:	9a01      	ldr	r2, [sp, #4]
   211e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   211e8:	4293      	cmp	r3, r2
   211ea:	d184      	bne.n	210f6 <am_hal_ble_patch_apply+0xca>
   211ec:	a906      	add	r1, sp, #24
   211ee:	4620      	mov	r0, r4
   211f0:	f7ff f9aa 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   211f4:	4603      	mov	r3, r0
   211f6:	2800      	cmp	r0, #0
   211f8:	f47f af7e 	bne.w	210f8 <am_hal_ble_patch_apply+0xcc>
   211fc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21200:	061d      	lsls	r5, r3, #24
   21202:	d40b      	bmi.n	2121c <am_hal_ble_patch_apply+0x1f0>
   21204:	4d3b      	ldr	r5, [pc, #236]	; (212f4 <am_hal_ble_patch_apply+0x2c8>)
   21206:	e002      	b.n	2120e <am_hal_ble_patch_apply+0x1e2>
   21208:	3d01      	subs	r5, #1
   2120a:	f43f af5d 	beq.w	210c8 <am_hal_ble_patch_apply+0x9c>
   2120e:	2010      	movs	r0, #16
   21210:	f000 fe38 	bl	21e84 <am_hal_flash_delay>
   21214:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   21218:	0618      	lsls	r0, r3, #24
   2121a:	d5f5      	bpl.n	21208 <am_hal_ble_patch_apply+0x1dc>
   2121c:	ab02      	add	r3, sp, #8
   2121e:	9306      	str	r3, [sp, #24]
   21220:	2300      	movs	r3, #0
   21222:	9308      	str	r3, [sp, #32]
   21224:	6822      	ldr	r2, [r4, #0]
   21226:	9307      	str	r3, [sp, #28]
   21228:	9309      	str	r3, [sp, #36]	; 0x24
   2122a:	930a      	str	r3, [sp, #40]	; 0x28
   2122c:	930b      	str	r3, [sp, #44]	; 0x2c
   2122e:	2305      	movs	r3, #5
   21230:	f8ad 3020 	strh.w	r3, [sp, #32]
   21234:	9b01      	ldr	r3, [sp, #4]
   21236:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2123a:	2102      	movs	r1, #2
   2123c:	429a      	cmp	r2, r3
   2123e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   21242:	f47f af58 	bne.w	210f6 <am_hal_ble_patch_apply+0xca>
   21246:	a906      	add	r1, sp, #24
   21248:	4620      	mov	r0, r4
   2124a:	f7ff f97d 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   2124e:	4603      	mov	r3, r0
   21250:	2800      	cmp	r0, #0
   21252:	f47f af51 	bne.w	210f8 <am_hal_ble_patch_apply+0xcc>
   21256:	2304      	movs	r3, #4
   21258:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2125c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   21260:	23f2      	movs	r3, #242	; 0xf2
   21262:	7832      	ldrb	r2, [r6, #0]
   21264:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   21268:	2904      	cmp	r1, #4
   2126a:	f04f 0301 	mov.w	r3, #1
   2126e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   21272:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   21276:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   2127a:	f040 8083 	bne.w	21384 <am_hal_ble_patch_apply+0x358>
   2127e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   21282:	4293      	cmp	r3, r2
   21284:	d17e      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   21286:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2128a:	2bf2      	cmp	r3, #242	; 0xf2
   2128c:	d17a      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   2128e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   21292:	2b01      	cmp	r3, #1
   21294:	d176      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   21296:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2129a:	2b00      	cmp	r3, #0
   2129c:	d172      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   2129e:	ebba 0a08 	subs.w	sl, sl, r8
   212a2:	44c3      	add	fp, r8
   212a4:	f47f af74 	bne.w	21190 <am_hal_ble_patch_apply+0x164>
   212a8:	68b3      	ldr	r3, [r6, #8]
   212aa:	f88d 2009 	strb.w	r2, [sp, #9]
   212ae:	2101      	movs	r1, #1
   212b0:	0a1a      	lsrs	r2, r3, #8
   212b2:	20f3      	movs	r0, #243	; 0xf3
   212b4:	f88d 300c 	strb.w	r3, [sp, #12]
   212b8:	f88d 200d 	strb.w	r2, [sp, #13]
   212bc:	2306      	movs	r3, #6
   212be:	f88d 1008 	strb.w	r1, [sp, #8]
   212c2:	f88d 000a 	strb.w	r0, [sp, #10]
   212c6:	2502      	movs	r5, #2
   212c8:	aa02      	add	r2, sp, #8
   212ca:	2100      	movs	r1, #0
   212cc:	4620      	mov	r0, r4
   212ce:	f88d 500b 	strb.w	r5, [sp, #11]
   212d2:	f7ff fe07 	bl	20ee4 <am_hal_ble_blocking_hci_write>
   212d6:	4603      	mov	r3, r0
   212d8:	2800      	cmp	r0, #0
   212da:	d153      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   212dc:	4f04      	ldr	r7, [pc, #16]	; (212f0 <am_hal_ble_patch_apply+0x2c4>)
   212de:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   212e2:	0611      	lsls	r1, r2, #24
   212e4:	d41b      	bmi.n	2131e <am_hal_ble_patch_apply+0x2f2>
   212e6:	4d03      	ldr	r5, [pc, #12]	; (212f4 <am_hal_ble_patch_apply+0x2c8>)
   212e8:	e00f      	b.n	2130a <am_hal_ble_patch_apply+0x2de>
   212ea:	bf00      	nop
   212ec:	01775230 	.word	0x01775230
   212f0:	5000c000 	.word	0x5000c000
   212f4:	000f4240 	.word	0x000f4240
   212f8:	08000004 	.word	0x08000004
   212fc:	1000a010 	.word	0x1000a010
   21300:	1000a00c 	.word	0x1000a00c
   21304:	3d01      	subs	r5, #1
   21306:	f43f aedf 	beq.w	210c8 <am_hal_ble_patch_apply+0x9c>
   2130a:	2010      	movs	r0, #16
   2130c:	9301      	str	r3, [sp, #4]
   2130e:	f000 fdb9 	bl	21e84 <am_hal_flash_delay>
   21312:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   21316:	9b01      	ldr	r3, [sp, #4]
   21318:	f012 0f80 	tst.w	r2, #128	; 0x80
   2131c:	d0f2      	beq.n	21304 <am_hal_ble_patch_apply+0x2d8>
   2131e:	2200      	movs	r2, #0
   21320:	9301      	str	r3, [sp, #4]
   21322:	4620      	mov	r0, r4
   21324:	ab02      	add	r3, sp, #8
   21326:	a906      	add	r1, sp, #24
   21328:	2502      	movs	r5, #2
   2132a:	2405      	movs	r4, #5
   2132c:	9208      	str	r2, [sp, #32]
   2132e:	9306      	str	r3, [sp, #24]
   21330:	9207      	str	r2, [sp, #28]
   21332:	9209      	str	r2, [sp, #36]	; 0x24
   21334:	920a      	str	r2, [sp, #40]	; 0x28
   21336:	920b      	str	r2, [sp, #44]	; 0x2c
   21338:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   2133c:	f8ad 4020 	strh.w	r4, [sp, #32]
   21340:	f7ff fe5e 	bl	21000 <am_hal_ble_blocking_transfer>
   21344:	9b01      	ldr	r3, [sp, #4]
   21346:	b9f8      	cbnz	r0, 21388 <am_hal_ble_patch_apply+0x35c>
   21348:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2134c:	6831      	ldr	r1, [r6, #0]
   2134e:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   21352:	2a04      	cmp	r2, #4
   21354:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   21358:	f04f 0101 	mov.w	r1, #1
   2135c:	d112      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   2135e:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   21362:	f89d 2009 	ldrb.w	r2, [sp, #9]
   21366:	4294      	cmp	r4, r2
   21368:	d10c      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   2136a:	f89d 200a 	ldrb.w	r2, [sp, #10]
   2136e:	4290      	cmp	r0, r2
   21370:	d108      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   21372:	f89d 200b 	ldrb.w	r2, [sp, #11]
   21376:	4291      	cmp	r1, r2
   21378:	d104      	bne.n	21384 <am_hal_ble_patch_apply+0x358>
   2137a:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2137e:	2a00      	cmp	r2, #0
   21380:	f43f aeba 	beq.w	210f8 <am_hal_ble_patch_apply+0xcc>
   21384:	2301      	movs	r3, #1
   21386:	e6b7      	b.n	210f8 <am_hal_ble_patch_apply+0xcc>
   21388:	4603      	mov	r3, r0
   2138a:	e6b5      	b.n	210f8 <am_hal_ble_patch_apply+0xcc>

0002138c <am_hal_ble_int_enable>:
   2138c:	b128      	cbz	r0, 2139a <am_hal_ble_int_enable+0xe>
   2138e:	6803      	ldr	r3, [r0, #0]
   21390:	4a0c      	ldr	r2, [pc, #48]	; (213c4 <am_hal_ble_int_enable+0x38>)
   21392:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21396:	4293      	cmp	r3, r2
   21398:	d001      	beq.n	2139e <am_hal_ble_int_enable+0x12>
   2139a:	2002      	movs	r0, #2
   2139c:	4770      	bx	lr
   2139e:	b510      	push	{r4, lr}
   213a0:	b082      	sub	sp, #8
   213a2:	460c      	mov	r4, r1
   213a4:	f000 feba 	bl	2211c <am_hal_interrupt_master_disable>
   213a8:	4b07      	ldr	r3, [pc, #28]	; (213c8 <am_hal_ble_int_enable+0x3c>)
   213aa:	9001      	str	r0, [sp, #4]
   213ac:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   213b0:	4321      	orrs	r1, r4
   213b2:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   213b6:	9801      	ldr	r0, [sp, #4]
   213b8:	f000 feb4 	bl	22124 <am_hal_interrupt_master_set>
   213bc:	2000      	movs	r0, #0
   213be:	b002      	add	sp, #8
   213c0:	bd10      	pop	{r4, pc}
   213c2:	bf00      	nop
   213c4:	01775230 	.word	0x01775230
   213c8:	5000c000 	.word	0x5000c000

000213cc <am_hal_ble_int_status>:
   213cc:	4b05      	ldr	r3, [pc, #20]	; (213e4 <am_hal_ble_int_status+0x18>)
   213ce:	b911      	cbnz	r1, 213d6 <am_hal_ble_int_status+0xa>
   213d0:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   213d4:	4770      	bx	lr
   213d6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   213da:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   213de:	4018      	ands	r0, r3
   213e0:	4770      	bx	lr
   213e2:	bf00      	nop
   213e4:	5000c000 	.word	0x5000c000

000213e8 <am_hal_ble_int_clear>:
   213e8:	b128      	cbz	r0, 213f6 <am_hal_ble_int_clear+0xe>
   213ea:	6803      	ldr	r3, [r0, #0]
   213ec:	4a05      	ldr	r2, [pc, #20]	; (21404 <am_hal_ble_int_clear+0x1c>)
   213ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   213f2:	4293      	cmp	r3, r2
   213f4:	d001      	beq.n	213fa <am_hal_ble_int_clear+0x12>
   213f6:	2002      	movs	r0, #2
   213f8:	4770      	bx	lr
   213fa:	4b03      	ldr	r3, [pc, #12]	; (21408 <am_hal_ble_int_clear+0x20>)
   213fc:	2000      	movs	r0, #0
   213fe:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   21402:	4770      	bx	lr
   21404:	01775230 	.word	0x01775230
   21408:	5000c000 	.word	0x5000c000

0002140c <am_hal_ble_plf_reg_read>:
   2140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21410:	b092      	sub	sp, #72	; 0x48
   21412:	0a0e      	lsrs	r6, r1, #8
   21414:	0c0d      	lsrs	r5, r1, #16
   21416:	2300      	movs	r3, #0
   21418:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   2141c:	f88d 100c 	strb.w	r1, [sp, #12]
   21420:	f88d 600d 	strb.w	r6, [sp, #13]
   21424:	f88d 500e 	strb.w	r5, [sp, #14]
   21428:	2401      	movs	r4, #1
   2142a:	2702      	movs	r7, #2
   2142c:	26fd      	movs	r6, #253	; 0xfd
   2142e:	2504      	movs	r5, #4
   21430:	4952      	ldr	r1, [pc, #328]	; (2157c <am_hal_ble_plf_reg_read+0x170>)
   21432:	f88d e00f 	strb.w	lr, [sp, #15]
   21436:	f88d 7009 	strb.w	r7, [sp, #9]
   2143a:	f88d 500b 	strb.w	r5, [sp, #11]
   2143e:	930a      	str	r3, [sp, #40]	; 0x28
   21440:	930b      	str	r3, [sp, #44]	; 0x2c
   21442:	930c      	str	r3, [sp, #48]	; 0x30
   21444:	f88d 4008 	strb.w	r4, [sp, #8]
   21448:	f88d 600a 	strb.w	r6, [sp, #10]
   2144c:	f10d 0e08 	add.w	lr, sp, #8
   21450:	2508      	movs	r5, #8
   21452:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   21456:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   2145a:	4617      	mov	r7, r2
   2145c:	f88d 3014 	strb.w	r3, [sp, #20]
   21460:	f88d 3015 	strb.w	r3, [sp, #21]
   21464:	f88d 3016 	strb.w	r3, [sp, #22]
   21468:	f88d 3017 	strb.w	r3, [sp, #23]
   2146c:	f88d 401a 	strb.w	r4, [sp, #26]
   21470:	f88d 301b 	strb.w	r3, [sp, #27]
   21474:	f88d 301c 	strb.w	r3, [sp, #28]
   21478:	9308      	str	r3, [sp, #32]
   2147a:	9309      	str	r3, [sp, #36]	; 0x24
   2147c:	f8cd e010 	str.w	lr, [sp, #16]
   21480:	f8ad 5018 	strh.w	r5, [sp, #24]
   21484:	4680      	mov	r8, r0
   21486:	b128      	cbz	r0, 21494 <am_hal_ble_plf_reg_read+0x88>
   21488:	6803      	ldr	r3, [r0, #0]
   2148a:	4a3d      	ldr	r2, [pc, #244]	; (21580 <am_hal_ble_plf_reg_read+0x174>)
   2148c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21490:	4293      	cmp	r3, r2
   21492:	d06e      	beq.n	21572 <am_hal_ble_plf_reg_read+0x166>
   21494:	4d39      	ldr	r5, [pc, #228]	; (2157c <am_hal_ble_plf_reg_read+0x170>)
   21496:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2149a:	f043 0302 	orr.w	r3, r3, #2
   2149e:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   214a2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   214a6:	0619      	lsls	r1, r3, #24
   214a8:	d40a      	bmi.n	214c0 <am_hal_ble_plf_reg_read+0xb4>
   214aa:	4c36      	ldr	r4, [pc, #216]	; (21584 <am_hal_ble_plf_reg_read+0x178>)
   214ac:	e001      	b.n	214b2 <am_hal_ble_plf_reg_read+0xa6>
   214ae:	3c01      	subs	r4, #1
   214b0:	d05b      	beq.n	2156a <am_hal_ble_plf_reg_read+0x15e>
   214b2:	2010      	movs	r0, #16
   214b4:	f000 fce6 	bl	21e84 <am_hal_flash_delay>
   214b8:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   214bc:	061a      	lsls	r2, r3, #24
   214be:	d5f6      	bpl.n	214ae <am_hal_ble_plf_reg_read+0xa2>
   214c0:	2300      	movs	r3, #0
   214c2:	2202      	movs	r2, #2
   214c4:	a901      	add	r1, sp, #4
   214c6:	9104      	str	r1, [sp, #16]
   214c8:	f88d 3014 	strb.w	r3, [sp, #20]
   214cc:	f88d 3015 	strb.w	r3, [sp, #21]
   214d0:	f88d 3016 	strb.w	r3, [sp, #22]
   214d4:	f88d 3017 	strb.w	r3, [sp, #23]
   214d8:	f88d 301b 	strb.w	r3, [sp, #27]
   214dc:	f88d 301c 	strb.w	r3, [sp, #28]
   214e0:	9308      	str	r3, [sp, #32]
   214e2:	9309      	str	r3, [sp, #36]	; 0x24
   214e4:	f8ad 2018 	strh.w	r2, [sp, #24]
   214e8:	f88d 201a 	strb.w	r2, [sp, #26]
   214ec:	f1b8 0f00 	cmp.w	r8, #0
   214f0:	d006      	beq.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   214f2:	f8d8 4000 	ldr.w	r4, [r8]
   214f6:	4b22      	ldr	r3, [pc, #136]	; (21580 <am_hal_ble_plf_reg_read+0x174>)
   214f8:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   214fc:	429c      	cmp	r4, r3
   214fe:	d00e      	beq.n	2151e <am_hal_ble_plf_reg_read+0x112>
   21500:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   21504:	990c      	ldr	r1, [sp, #48]	; 0x30
   21506:	4a1d      	ldr	r2, [pc, #116]	; (2157c <am_hal_ble_plf_reg_read+0x170>)
   21508:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2150c:	2000      	movs	r0, #0
   2150e:	603b      	str	r3, [r7, #0]
   21510:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   21514:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   21518:	b012      	add	sp, #72	; 0x48
   2151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2151e:	4b17      	ldr	r3, [pc, #92]	; (2157c <am_hal_ble_plf_reg_read+0x170>)
   21520:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21524:	061b      	lsls	r3, r3, #24
   21526:	d5eb      	bpl.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   21528:	a904      	add	r1, sp, #16
   2152a:	4640      	mov	r0, r8
   2152c:	f7ff f80c 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21530:	2800      	cmp	r0, #0
   21532:	d1e5      	bne.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   21534:	f89d 2005 	ldrb.w	r2, [sp, #5]
   21538:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2153c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   21540:	b29b      	uxth	r3, r3
   21542:	aa0a      	add	r2, sp, #40	; 0x28
   21544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   21548:	f8ad 3018 	strh.w	r3, [sp, #24]
   2154c:	9204      	str	r2, [sp, #16]
   2154e:	d8d7      	bhi.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   21550:	f8d8 2000 	ldr.w	r2, [r8]
   21554:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   21558:	42a2      	cmp	r2, r4
   2155a:	d1d1      	bne.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   2155c:	2b00      	cmp	r3, #0
   2155e:	d0cf      	beq.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   21560:	a904      	add	r1, sp, #16
   21562:	4640      	mov	r0, r8
   21564:	f7fe fff0 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21568:	e7ca      	b.n	21500 <am_hal_ble_plf_reg_read+0xf4>
   2156a:	4807      	ldr	r0, [pc, #28]	; (21588 <am_hal_ble_plf_reg_read+0x17c>)
   2156c:	b012      	add	sp, #72	; 0x48
   2156e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21572:	a904      	add	r1, sp, #16
   21574:	f7fe ffe8 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21578:	e78c      	b.n	21494 <am_hal_ble_plf_reg_read+0x88>
   2157a:	bf00      	nop
   2157c:	5000c000 	.word	0x5000c000
   21580:	01775230 	.word	0x01775230
   21584:	0007a120 	.word	0x0007a120
   21588:	08000004 	.word	0x08000004

0002158c <am_hal_ble_plf_reg_write>:
   2158c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2158e:	b091      	sub	sp, #68	; 0x44
   21590:	0c0f      	lsrs	r7, r1, #16
   21592:	0e0e      	lsrs	r6, r1, #24
   21594:	0c14      	lsrs	r4, r2, #16
   21596:	0e13      	lsrs	r3, r2, #24
   21598:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   2159c:	0a15      	lsrs	r5, r2, #8
   2159e:	f88d 2008 	strb.w	r2, [sp, #8]
   215a2:	f88d 6007 	strb.w	r6, [sp, #7]
   215a6:	f88d 400a 	strb.w	r4, [sp, #10]
   215aa:	f88d 300b 	strb.w	r3, [sp, #11]
   215ae:	f88d 1004 	strb.w	r1, [sp, #4]
   215b2:	f88d e005 	strb.w	lr, [sp, #5]
   215b6:	f88d 7006 	strb.w	r7, [sp, #6]
   215ba:	f88d 5009 	strb.w	r5, [sp, #9]
   215be:	ab01      	add	r3, sp, #4
   215c0:	4606      	mov	r6, r0
   215c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   215c6:	ab04      	add	r3, sp, #16
   215c8:	e883 0003 	stmia.w	r3, {r0, r1}
   215cc:	4a47      	ldr	r2, [pc, #284]	; (216ec <am_hal_ble_plf_reg_write+0x160>)
   215ce:	4b48      	ldr	r3, [pc, #288]	; (216f0 <am_hal_ble_plf_reg_write+0x164>)
   215d0:	9303      	str	r3, [sp, #12]
   215d2:	ac03      	add	r4, sp, #12
   215d4:	2300      	movs	r3, #0
   215d6:	200c      	movs	r0, #12
   215d8:	2101      	movs	r1, #1
   215da:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   215de:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   215e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   215e6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   215ea:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   215ee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   215f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   215f6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   215fa:	930e      	str	r3, [sp, #56]	; 0x38
   215fc:	930f      	str	r3, [sp, #60]	; 0x3c
   215fe:	940a      	str	r4, [sp, #40]	; 0x28
   21600:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   21604:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   21608:	b12e      	cbz	r6, 21616 <am_hal_ble_plf_reg_write+0x8a>
   2160a:	6833      	ldr	r3, [r6, #0]
   2160c:	4a39      	ldr	r2, [pc, #228]	; (216f4 <am_hal_ble_plf_reg_write+0x168>)
   2160e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21612:	4293      	cmp	r3, r2
   21614:	d064      	beq.n	216e0 <am_hal_ble_plf_reg_write+0x154>
   21616:	4d35      	ldr	r5, [pc, #212]	; (216ec <am_hal_ble_plf_reg_write+0x160>)
   21618:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   2161c:	f043 0302 	orr.w	r3, r3, #2
   21620:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   21624:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21628:	0619      	lsls	r1, r3, #24
   2162a:	bf58      	it	pl
   2162c:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   21630:	d502      	bpl.n	21638 <am_hal_ble_plf_reg_write+0xac>
   21632:	e008      	b.n	21646 <am_hal_ble_plf_reg_write+0xba>
   21634:	3c01      	subs	r4, #1
   21636:	d050      	beq.n	216da <am_hal_ble_plf_reg_write+0x14e>
   21638:	2010      	movs	r0, #16
   2163a:	f000 fc23 	bl	21e84 <am_hal_flash_delay>
   2163e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   21642:	061a      	lsls	r2, r3, #24
   21644:	d5f6      	bpl.n	21634 <am_hal_ble_plf_reg_write+0xa8>
   21646:	2300      	movs	r3, #0
   21648:	2202      	movs	r2, #2
   2164a:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   2164e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   21652:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   21656:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   2165a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   2165e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   21662:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   21666:	930e      	str	r3, [sp, #56]	; 0x38
   21668:	930f      	str	r3, [sp, #60]	; 0x3c
   2166a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   2166e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   21672:	b12e      	cbz	r6, 21680 <am_hal_ble_plf_reg_write+0xf4>
   21674:	6834      	ldr	r4, [r6, #0]
   21676:	4b1f      	ldr	r3, [pc, #124]	; (216f4 <am_hal_ble_plf_reg_write+0x168>)
   21678:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   2167c:	429c      	cmp	r4, r3
   2167e:	d007      	beq.n	21690 <am_hal_ble_plf_reg_write+0x104>
   21680:	4b1a      	ldr	r3, [pc, #104]	; (216ec <am_hal_ble_plf_reg_write+0x160>)
   21682:	2000      	movs	r0, #0
   21684:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   21688:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   2168c:	b011      	add	sp, #68	; 0x44
   2168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21690:	4b16      	ldr	r3, [pc, #88]	; (216ec <am_hal_ble_plf_reg_write+0x160>)
   21692:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   21696:	061b      	lsls	r3, r3, #24
   21698:	d5f2      	bpl.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   2169a:	a90a      	add	r1, sp, #40	; 0x28
   2169c:	4630      	mov	r0, r6
   2169e:	f7fe ff53 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   216a2:	2800      	cmp	r0, #0
   216a4:	d1ec      	bne.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   216a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
   216aa:	f89d 3000 	ldrb.w	r3, [sp]
   216ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   216b2:	b29b      	uxth	r3, r3
   216b4:	aa06      	add	r2, sp, #24
   216b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   216ba:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   216be:	920a      	str	r2, [sp, #40]	; 0x28
   216c0:	d8de      	bhi.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   216c2:	6832      	ldr	r2, [r6, #0]
   216c4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   216c8:	42a2      	cmp	r2, r4
   216ca:	d1d9      	bne.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   216cc:	2b00      	cmp	r3, #0
   216ce:	d0d7      	beq.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   216d0:	a90a      	add	r1, sp, #40	; 0x28
   216d2:	4630      	mov	r0, r6
   216d4:	f7fe ff38 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   216d8:	e7d2      	b.n	21680 <am_hal_ble_plf_reg_write+0xf4>
   216da:	4807      	ldr	r0, [pc, #28]	; (216f8 <am_hal_ble_plf_reg_write+0x16c>)
   216dc:	b011      	add	sp, #68	; 0x44
   216de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   216e0:	a90a      	add	r1, sp, #40	; 0x28
   216e2:	4630      	mov	r0, r6
   216e4:	f7fe ff30 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   216e8:	e795      	b.n	21616 <am_hal_ble_plf_reg_write+0x8a>
   216ea:	bf00      	nop
   216ec:	5000c000 	.word	0x5000c000
   216f0:	08fd0301 	.word	0x08fd0301
   216f4:	01775230 	.word	0x01775230
   216f8:	08000004 	.word	0x08000004

000216fc <am_hal_ble_transmitter_modex_set>:
   216fc:	b530      	push	{r4, r5, lr}
   216fe:	b085      	sub	sp, #20
   21700:	4604      	mov	r4, r0
   21702:	2300      	movs	r3, #0
   21704:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   21708:	466a      	mov	r2, sp
   2170a:	4927      	ldr	r1, [pc, #156]	; (217a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2170c:	9303      	str	r3, [sp, #12]
   2170e:	f7ff fe7d 	bl	2140c <am_hal_ble_plf_reg_read>
   21712:	4620      	mov	r0, r4
   21714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21718:	4923      	ldr	r1, [pc, #140]	; (217a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2171a:	f7ff ff37 	bl	2158c <am_hal_ble_plf_reg_write>
   2171e:	aa03      	add	r2, sp, #12
   21720:	4620      	mov	r0, r4
   21722:	4922      	ldr	r1, [pc, #136]	; (217ac <am_hal_ble_transmitter_modex_set+0xb0>)
   21724:	f7ff fe72 	bl	2140c <am_hal_ble_plf_reg_read>
   21728:	9b03      	ldr	r3, [sp, #12]
   2172a:	aa02      	add	r2, sp, #8
   2172c:	f043 0308 	orr.w	r3, r3, #8
   21730:	4620      	mov	r0, r4
   21732:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   21736:	9303      	str	r3, [sp, #12]
   21738:	f7ff fe68 	bl	2140c <am_hal_ble_plf_reg_read>
   2173c:	9b02      	ldr	r3, [sp, #8]
   2173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   21742:	461a      	mov	r2, r3
   21744:	4620      	mov	r0, r4
   21746:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   2174a:	9302      	str	r3, [sp, #8]
   2174c:	f7ff ff1e 	bl	2158c <am_hal_ble_plf_reg_write>
   21750:	aa01      	add	r2, sp, #4
   21752:	4620      	mov	r0, r4
   21754:	4916      	ldr	r1, [pc, #88]	; (217b0 <am_hal_ble_transmitter_modex_set+0xb4>)
   21756:	f7ff fe59 	bl	2140c <am_hal_ble_plf_reg_read>
   2175a:	9a01      	ldr	r2, [sp, #4]
   2175c:	4914      	ldr	r1, [pc, #80]	; (217b0 <am_hal_ble_transmitter_modex_set+0xb4>)
   2175e:	4620      	mov	r0, r4
   21760:	f042 0208 	orr.w	r2, r2, #8
   21764:	f7ff ff12 	bl	2158c <am_hal_ble_plf_reg_write>
   21768:	006a      	lsls	r2, r5, #1
   2176a:	f042 0201 	orr.w	r2, r2, #1
   2176e:	4620      	mov	r0, r4
   21770:	4910      	ldr	r1, [pc, #64]	; (217b4 <am_hal_ble_transmitter_modex_set+0xb8>)
   21772:	f7ff ff0b 	bl	2158c <am_hal_ble_plf_reg_write>
   21776:	490d      	ldr	r1, [pc, #52]	; (217ac <am_hal_ble_transmitter_modex_set+0xb0>)
   21778:	9a03      	ldr	r2, [sp, #12]
   2177a:	4620      	mov	r0, r4
   2177c:	f7ff ff06 	bl	2158c <am_hal_ble_plf_reg_write>
   21780:	4b0d      	ldr	r3, [pc, #52]	; (217b8 <am_hal_ble_transmitter_modex_set+0xbc>)
   21782:	68db      	ldr	r3, [r3, #12]
   21784:	b2db      	uxtb	r3, r3
   21786:	2b21      	cmp	r3, #33	; 0x21
   21788:	bf0c      	ite	eq
   2178a:	490c      	ldreq	r1, [pc, #48]	; (217bc <am_hal_ble_transmitter_modex_set+0xc0>)
   2178c:	490c      	ldrne	r1, [pc, #48]	; (217c0 <am_hal_ble_transmitter_modex_set+0xc4>)
   2178e:	462a      	mov	r2, r5
   21790:	4620      	mov	r0, r4
   21792:	f7ff fefb 	bl	2158c <am_hal_ble_plf_reg_write>
   21796:	4620      	mov	r0, r4
   21798:	9a00      	ldr	r2, [sp, #0]
   2179a:	4903      	ldr	r1, [pc, #12]	; (217a8 <am_hal_ble_transmitter_modex_set+0xac>)
   2179c:	f7ff fef6 	bl	2158c <am_hal_ble_plf_reg_write>
   217a0:	2000      	movs	r0, #0
   217a2:	b005      	add	sp, #20
   217a4:	bd30      	pop	{r4, r5, pc}
   217a6:	bf00      	nop
   217a8:	43000004 	.word	0x43000004
   217ac:	52000008 	.word	0x52000008
   217b0:	45800070 	.word	0x45800070
   217b4:	52000014 	.word	0x52000014
   217b8:	40020000 	.word	0x40020000
   217bc:	20006874 	.word	0x20006874
   217c0:	20006070 	.word	0x20006070

000217c4 <am_hal_ble_patch_complete.part.10>:
   217c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   217c8:	b08c      	sub	sp, #48	; 0x30
   217ca:	2300      	movs	r3, #0
   217cc:	9308      	str	r3, [sp, #32]
   217ce:	2201      	movs	r2, #1
   217d0:	2506      	movs	r5, #6
   217d2:	24ee      	movs	r4, #238	; 0xee
   217d4:	21f1      	movs	r1, #241	; 0xf1
   217d6:	9307      	str	r3, [sp, #28]
   217d8:	9309      	str	r3, [sp, #36]	; 0x24
   217da:	930a      	str	r3, [sp, #40]	; 0x28
   217dc:	930b      	str	r3, [sp, #44]	; 0x2c
   217de:	f88d 3004 	strb.w	r3, [sp, #4]
   217e2:	f88d 3005 	strb.w	r3, [sp, #5]
   217e6:	2302      	movs	r3, #2
   217e8:	f8ad 5020 	strh.w	r5, [sp, #32]
   217ec:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   217f0:	f88d 2000 	strb.w	r2, [sp]
   217f4:	f8cd d018 	str.w	sp, [sp, #24]
   217f8:	f88d 4001 	strb.w	r4, [sp, #1]
   217fc:	f88d 1002 	strb.w	r1, [sp, #2]
   21800:	f88d 3003 	strb.w	r3, [sp, #3]
   21804:	4605      	mov	r5, r0
   21806:	2800      	cmp	r0, #0
   21808:	f000 80e4 	beq.w	219d4 <am_hal_ble_patch_complete.part.10+0x210>
   2180c:	4e7d      	ldr	r6, [pc, #500]	; (21a04 <am_hal_ble_patch_complete.part.10+0x240>)
   2180e:	f241 3488 	movw	r4, #5000	; 0x1388
   21812:	e001      	b.n	21818 <am_hal_ble_patch_complete.part.10+0x54>
   21814:	3c01      	subs	r4, #1
   21816:	d00d      	beq.n	21834 <am_hal_ble_patch_complete.part.10+0x70>
   21818:	682b      	ldr	r3, [r5, #0]
   2181a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2181e:	42b3      	cmp	r3, r6
   21820:	d1f8      	bne.n	21814 <am_hal_ble_patch_complete.part.10+0x50>
   21822:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   21826:	a906      	add	r1, sp, #24
   21828:	4628      	mov	r0, r5
   2182a:	b11b      	cbz	r3, 21834 <am_hal_ble_patch_complete.part.10+0x70>
   2182c:	f7fe fe8c 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21830:	2800      	cmp	r0, #0
   21832:	d1ef      	bne.n	21814 <am_hal_ble_patch_complete.part.10+0x50>
   21834:	4b74      	ldr	r3, [pc, #464]	; (21a08 <am_hal_ble_patch_complete.part.10+0x244>)
   21836:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   2183a:	061b      	lsls	r3, r3, #24
   2183c:	f100 80d1 	bmi.w	219e2 <am_hal_ble_patch_complete.part.10+0x21e>
   21840:	4c72      	ldr	r4, [pc, #456]	; (21a0c <am_hal_ble_patch_complete.part.10+0x248>)
   21842:	4e71      	ldr	r6, [pc, #452]	; (21a08 <am_hal_ble_patch_complete.part.10+0x244>)
   21844:	e001      	b.n	2184a <am_hal_ble_patch_complete.part.10+0x86>
   21846:	3c01      	subs	r4, #1
   21848:	d019      	beq.n	2187e <am_hal_ble_patch_complete.part.10+0xba>
   2184a:	2010      	movs	r0, #16
   2184c:	f000 fb1a 	bl	21e84 <am_hal_flash_delay>
   21850:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   21854:	061f      	lsls	r7, r3, #24
   21856:	d5f6      	bpl.n	21846 <am_hal_ble_patch_complete.part.10+0x82>
   21858:	2302      	movs	r3, #2
   2185a:	af03      	add	r7, sp, #12
   2185c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   21860:	f8ad 3020 	strh.w	r3, [sp, #32]
   21864:	9706      	str	r7, [sp, #24]
   21866:	b12d      	cbz	r5, 21874 <am_hal_ble_patch_complete.part.10+0xb0>
   21868:	682e      	ldr	r6, [r5, #0]
   2186a:	4b66      	ldr	r3, [pc, #408]	; (21a04 <am_hal_ble_patch_complete.part.10+0x240>)
   2186c:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   21870:	429e      	cmp	r6, r3
   21872:	d009      	beq.n	21888 <am_hal_ble_patch_complete.part.10+0xc4>
   21874:	2402      	movs	r4, #2
   21876:	4620      	mov	r0, r4
   21878:	b00c      	add	sp, #48	; 0x30
   2187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2187e:	4c64      	ldr	r4, [pc, #400]	; (21a10 <am_hal_ble_patch_complete.part.10+0x24c>)
   21880:	4620      	mov	r0, r4
   21882:	b00c      	add	sp, #48	; 0x30
   21884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21888:	a906      	add	r1, sp, #24
   2188a:	4628      	mov	r0, r5
   2188c:	f7fe fe5c 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21890:	4604      	mov	r4, r0
   21892:	2800      	cmp	r0, #0
   21894:	d1ef      	bne.n	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   21896:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2189a:	29ee      	cmp	r1, #238	; 0xee
   2189c:	d01a      	beq.n	218d4 <am_hal_ble_patch_complete.part.10+0x110>
   2189e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   218a2:	682a      	ldr	r2, [r5, #0]
   218a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   218a8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   218ac:	b29b      	uxth	r3, r3
   218ae:	42b2      	cmp	r2, r6
   218b0:	f8ad 3020 	strh.w	r3, [sp, #32]
   218b4:	d1de      	bne.n	21874 <am_hal_ble_patch_complete.part.10+0xb0>
   218b6:	b133      	cbz	r3, 218c6 <am_hal_ble_patch_complete.part.10+0x102>
   218b8:	a906      	add	r1, sp, #24
   218ba:	4628      	mov	r0, r5
   218bc:	f7fe fe44 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   218c0:	b108      	cbz	r0, 218c6 <am_hal_ble_patch_complete.part.10+0x102>
   218c2:	4604      	mov	r4, r0
   218c4:	e7d7      	b.n	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   218c6:	2301      	movs	r3, #1
   218c8:	4620      	mov	r0, r4
   218ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   218ce:	b00c      	add	sp, #48	; 0x30
   218d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   218d4:	682b      	ldr	r3, [r5, #0]
   218d6:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   218da:	2203      	movs	r2, #3
   218dc:	45b0      	cmp	r8, r6
   218de:	f8ad 2020 	strh.w	r2, [sp, #32]
   218e2:	d1c7      	bne.n	21874 <am_hal_ble_patch_complete.part.10+0xb0>
   218e4:	a906      	add	r1, sp, #24
   218e6:	4628      	mov	r0, r5
   218e8:	f7fe fe2e 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   218ec:	4604      	mov	r4, r0
   218ee:	2800      	cmp	r0, #0
   218f0:	d1c1      	bne.n	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   218f2:	2301      	movs	r3, #1
   218f4:	2005      	movs	r0, #5
   218f6:	2104      	movs	r1, #4
   218f8:	22fd      	movs	r2, #253	; 0xfd
   218fa:	9408      	str	r4, [sp, #32]
   218fc:	9407      	str	r4, [sp, #28]
   218fe:	9409      	str	r4, [sp, #36]	; 0x24
   21900:	940a      	str	r4, [sp, #40]	; 0x28
   21902:	940b      	str	r4, [sp, #44]	; 0x2c
   21904:	f8cd d018 	str.w	sp, [sp, #24]
   21908:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   2190c:	f88d 3000 	strb.w	r3, [sp]
   21910:	f88d 3003 	strb.w	r3, [sp, #3]
   21914:	f88d 3004 	strb.w	r3, [sp, #4]
   21918:	f8ad 0020 	strh.w	r0, [sp, #32]
   2191c:	f88d 1001 	strb.w	r1, [sp, #1]
   21920:	f88d 2002 	strb.w	r2, [sp, #2]
   21924:	f241 3688 	movw	r6, #5000	; 0x1388
   21928:	e002      	b.n	21930 <am_hal_ble_patch_complete.part.10+0x16c>
   2192a:	2402      	movs	r4, #2
   2192c:	3e01      	subs	r6, #1
   2192e:	d0a2      	beq.n	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   21930:	682b      	ldr	r3, [r5, #0]
   21932:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21936:	4543      	cmp	r3, r8
   21938:	d1f7      	bne.n	2192a <am_hal_ble_patch_complete.part.10+0x166>
   2193a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2193e:	a906      	add	r1, sp, #24
   21940:	4628      	mov	r0, r5
   21942:	b123      	cbz	r3, 2194e <am_hal_ble_patch_complete.part.10+0x18a>
   21944:	f7fe fe00 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21948:	4604      	mov	r4, r0
   2194a:	2800      	cmp	r0, #0
   2194c:	d1ee      	bne.n	2192c <am_hal_ble_patch_complete.part.10+0x168>
   2194e:	4e2e      	ldr	r6, [pc, #184]	; (21a08 <am_hal_ble_patch_complete.part.10+0x244>)
   21950:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   21954:	0619      	lsls	r1, r3, #24
   21956:	d40a      	bmi.n	2196e <am_hal_ble_patch_complete.part.10+0x1aa>
   21958:	4c2c      	ldr	r4, [pc, #176]	; (21a0c <am_hal_ble_patch_complete.part.10+0x248>)
   2195a:	e001      	b.n	21960 <am_hal_ble_patch_complete.part.10+0x19c>
   2195c:	3c01      	subs	r4, #1
   2195e:	d08e      	beq.n	2187e <am_hal_ble_patch_complete.part.10+0xba>
   21960:	2010      	movs	r0, #16
   21962:	f000 fa8f 	bl	21e84 <am_hal_flash_delay>
   21966:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   2196a:	0618      	lsls	r0, r3, #24
   2196c:	d5f6      	bpl.n	2195c <am_hal_ble_patch_complete.part.10+0x198>
   2196e:	682e      	ldr	r6, [r5, #0]
   21970:	4b24      	ldr	r3, [pc, #144]	; (21a04 <am_hal_ble_patch_complete.part.10+0x240>)
   21972:	9706      	str	r7, [sp, #24]
   21974:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   21978:	2702      	movs	r7, #2
   2197a:	2209      	movs	r2, #9
   2197c:	429e      	cmp	r6, r3
   2197e:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   21982:	f8ad 2020 	strh.w	r2, [sp, #32]
   21986:	f47f af75 	bne.w	21874 <am_hal_ble_patch_complete.part.10+0xb0>
   2198a:	a906      	add	r1, sp, #24
   2198c:	4628      	mov	r0, r5
   2198e:	f7fe fddb 	bl	20548 <am_hal_ble_blocking_transfer.part.7>
   21992:	4604      	mov	r4, r0
   21994:	2800      	cmp	r0, #0
   21996:	f47f af6e 	bne.w	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   2199a:	682b      	ldr	r3, [r5, #0]
   2199c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   219a0:	42b3      	cmp	r3, r6
   219a2:	d026      	beq.n	219f2 <am_hal_ble_patch_complete.part.10+0x22e>
   219a4:	2301      	movs	r3, #1
   219a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   219aa:	481a      	ldr	r0, [pc, #104]	; (21a14 <am_hal_ble_patch_complete.part.10+0x250>)
   219ac:	f000 fa6a 	bl	21e84 <am_hal_flash_delay>
   219b0:	4a19      	ldr	r2, [pc, #100]	; (21a18 <am_hal_ble_patch_complete.part.10+0x254>)
   219b2:	4b1a      	ldr	r3, [pc, #104]	; (21a1c <am_hal_ble_patch_complete.part.10+0x258>)
   219b4:	6811      	ldr	r1, [r2, #0]
   219b6:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   219ba:	429a      	cmp	r2, r3
   219bc:	f47f af5b 	bne.w	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   219c0:	b2c9      	uxtb	r1, r1
   219c2:	f1a1 0320 	sub.w	r3, r1, #32
   219c6:	2b20      	cmp	r3, #32
   219c8:	f63f af55 	bhi.w	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   219cc:	4628      	mov	r0, r5
   219ce:	f7ff fe95 	bl	216fc <am_hal_ble_transmitter_modex_set>
   219d2:	e750      	b.n	21876 <am_hal_ble_patch_complete.part.10+0xb2>
   219d4:	4b0c      	ldr	r3, [pc, #48]	; (21a08 <am_hal_ble_patch_complete.part.10+0x244>)
   219d6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   219da:	061a      	lsls	r2, r3, #24
   219dc:	f57f af30 	bpl.w	21840 <am_hal_ble_patch_complete.part.10+0x7c>
   219e0:	e748      	b.n	21874 <am_hal_ble_patch_complete.part.10+0xb0>
   219e2:	2302      	movs	r3, #2
   219e4:	af03      	add	r7, sp, #12
   219e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   219ea:	f8ad 3020 	strh.w	r3, [sp, #32]
   219ee:	9706      	str	r7, [sp, #24]
   219f0:	e73a      	b.n	21868 <am_hal_ble_patch_complete.part.10+0xa4>
   219f2:	4b05      	ldr	r3, [pc, #20]	; (21a08 <am_hal_ble_patch_complete.part.10+0x244>)
   219f4:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   219f8:	f367 0283 	bfi	r2, r7, #2, #2
   219fc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   21a00:	e7d0      	b.n	219a4 <am_hal_ble_patch_complete.part.10+0x1e0>
   21a02:	bf00      	nop
   21a04:	01775230 	.word	0x01775230
   21a08:	5000c000 	.word	0x5000c000
   21a0c:	000186a0 	.word	0x000186a0
   21a10:	08000004 	.word	0x08000004
   21a14:	007a1200 	.word	0x007a1200
   21a18:	50023808 	.word	0x50023808
   21a1c:	18240600 	.word	0x18240600

00021a20 <am_hal_ble_boot>:
   21a20:	b128      	cbz	r0, 21a2e <am_hal_ble_boot+0xe>
   21a22:	6803      	ldr	r3, [r0, #0]
   21a24:	4a59      	ldr	r2, [pc, #356]	; (21b8c <am_hal_ble_boot+0x16c>)
   21a26:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21a2a:	4293      	cmp	r3, r2
   21a2c:	d001      	beq.n	21a32 <am_hal_ble_boot+0x12>
   21a2e:	2002      	movs	r0, #2
   21a30:	4770      	bx	lr
   21a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a36:	7a03      	ldrb	r3, [r0, #8]
   21a38:	b082      	sub	sp, #8
   21a3a:	4604      	mov	r4, r0
   21a3c:	2b00      	cmp	r3, #0
   21a3e:	d065      	beq.n	21b0c <am_hal_ble_boot+0xec>
   21a40:	4a53      	ldr	r2, [pc, #332]	; (21b90 <am_hal_ble_boot+0x170>)
   21a42:	68d3      	ldr	r3, [r2, #12]
   21a44:	b2db      	uxtb	r3, r3
   21a46:	2b11      	cmp	r3, #17
   21a48:	d076      	beq.n	21b38 <am_hal_ble_boot+0x118>
   21a4a:	68d3      	ldr	r3, [r2, #12]
   21a4c:	b2db      	uxtb	r3, r3
   21a4e:	2b12      	cmp	r3, #18
   21a50:	d072      	beq.n	21b38 <am_hal_ble_boot+0x118>
   21a52:	4b4f      	ldr	r3, [pc, #316]	; (21b90 <am_hal_ble_boot+0x170>)
   21a54:	68db      	ldr	r3, [r3, #12]
   21a56:	b2db      	uxtb	r3, r3
   21a58:	2b21      	cmp	r3, #33	; 0x21
   21a5a:	f000 808d 	beq.w	21b78 <am_hal_ble_boot+0x158>
   21a5e:	4b4d      	ldr	r3, [pc, #308]	; (21b94 <am_hal_ble_boot+0x174>)
   21a60:	68da      	ldr	r2, [r3, #12]
   21a62:	4b4d      	ldr	r3, [pc, #308]	; (21b98 <am_hal_ble_boot+0x178>)
   21a64:	681b      	ldr	r3, [r3, #0]
   21a66:	ba1b      	rev	r3, r3
   21a68:	1c5d      	adds	r5, r3, #1
   21a6a:	bf18      	it	ne
   21a6c:	6093      	strne	r3, [r2, #8]
   21a6e:	4b4b      	ldr	r3, [pc, #300]	; (21b9c <am_hal_ble_boot+0x17c>)
   21a70:	681b      	ldr	r3, [r3, #0]
   21a72:	1c58      	adds	r0, r3, #1
   21a74:	d009      	beq.n	21a8a <am_hal_ble_boot+0x6a>
   21a76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21a7a:	ba1b      	rev	r3, r3
   21a7c:	1c59      	adds	r1, r3, #1
   21a7e:	d004      	beq.n	21a8a <am_hal_ble_boot+0x6a>
   21a80:	68d1      	ldr	r1, [r2, #12]
   21a82:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   21a86:	430b      	orrs	r3, r1
   21a88:	60d3      	str	r3, [r2, #12]
   21a8a:	4a41      	ldr	r2, [pc, #260]	; (21b90 <am_hal_ble_boot+0x170>)
   21a8c:	68d3      	ldr	r3, [r2, #12]
   21a8e:	b2db      	uxtb	r3, r3
   21a90:	2b11      	cmp	r3, #17
   21a92:	d031      	beq.n	21af8 <am_hal_ble_boot+0xd8>
   21a94:	68d3      	ldr	r3, [r2, #12]
   21a96:	b2db      	uxtb	r3, r3
   21a98:	2b12      	cmp	r3, #18
   21a9a:	d02d      	beq.n	21af8 <am_hal_ble_boot+0xd8>
   21a9c:	4a40      	ldr	r2, [pc, #256]	; (21ba0 <am_hal_ble_boot+0x180>)
   21a9e:	4b41      	ldr	r3, [pc, #260]	; (21ba4 <am_hal_ble_boot+0x184>)
   21aa0:	6816      	ldr	r6, [r2, #0]
   21aa2:	681b      	ldr	r3, [r3, #0]
   21aa4:	b1f6      	cbz	r6, 21ae4 <am_hal_ble_boot+0xc4>
   21aa6:	4d40      	ldr	r5, [pc, #256]	; (21ba8 <am_hal_ble_boot+0x188>)
   21aa8:	f1a3 0804 	sub.w	r8, r3, #4
   21aac:	2700      	movs	r7, #0
   21aae:	f858 1f04 	ldr.w	r1, [r8, #4]!
   21ab2:	684b      	ldr	r3, [r1, #4]
   21ab4:	68c8      	ldr	r0, [r1, #12]
   21ab6:	b16b      	cbz	r3, 21ad4 <am_hal_ble_boot+0xb4>
   21ab8:	eb00 0e03 	add.w	lr, r0, r3
   21abc:	2300      	movs	r3, #0
   21abe:	f810 2b01 	ldrb.w	r2, [r0], #1
   21ac2:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   21ac6:	4570      	cmp	r0, lr
   21ac8:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   21acc:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   21ad0:	b29b      	uxth	r3, r3
   21ad2:	d1f4      	bne.n	21abe <am_hal_ble_boot+0x9e>
   21ad4:	608b      	str	r3, [r1, #8]
   21ad6:	4620      	mov	r0, r4
   21ad8:	f7ff faa8 	bl	2102c <am_hal_ble_patch_apply>
   21adc:	b948      	cbnz	r0, 21af2 <am_hal_ble_boot+0xd2>
   21ade:	3701      	adds	r7, #1
   21ae0:	42b7      	cmp	r7, r6
   21ae2:	d1e4      	bne.n	21aae <am_hal_ble_boot+0x8e>
   21ae4:	6823      	ldr	r3, [r4, #0]
   21ae6:	4a29      	ldr	r2, [pc, #164]	; (21b8c <am_hal_ble_boot+0x16c>)
   21ae8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   21aec:	4293      	cmp	r3, r2
   21aee:	d008      	beq.n	21b02 <am_hal_ble_boot+0xe2>
   21af0:	2002      	movs	r0, #2
   21af2:	b002      	add	sp, #8
   21af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21af8:	4a2c      	ldr	r2, [pc, #176]	; (21bac <am_hal_ble_boot+0x18c>)
   21afa:	4b2d      	ldr	r3, [pc, #180]	; (21bb0 <am_hal_ble_boot+0x190>)
   21afc:	6816      	ldr	r6, [r2, #0]
   21afe:	681b      	ldr	r3, [r3, #0]
   21b00:	e7d0      	b.n	21aa4 <am_hal_ble_boot+0x84>
   21b02:	4620      	mov	r0, r4
   21b04:	f7ff fe5e 	bl	217c4 <am_hal_ble_patch_complete.part.10>
   21b08:	2800      	cmp	r0, #0
   21b0a:	d1f2      	bne.n	21af2 <am_hal_ble_boot+0xd2>
   21b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21b10:	4b1f      	ldr	r3, [pc, #124]	; (21b90 <am_hal_ble_boot+0x170>)
   21b12:	9201      	str	r2, [sp, #4]
   21b14:	68db      	ldr	r3, [r3, #12]
   21b16:	b2db      	uxtb	r3, r3
   21b18:	2b21      	cmp	r3, #33	; 0x21
   21b1a:	d030      	beq.n	21b7e <am_hal_ble_boot+0x15e>
   21b1c:	4620      	mov	r0, r4
   21b1e:	aa01      	add	r2, sp, #4
   21b20:	4924      	ldr	r1, [pc, #144]	; (21bb4 <am_hal_ble_boot+0x194>)
   21b22:	f7ff fc73 	bl	2140c <am_hal_ble_plf_reg_read>
   21b26:	9b01      	ldr	r3, [sp, #4]
   21b28:	4823      	ldr	r0, [pc, #140]	; (21bb8 <am_hal_ble_boot+0x198>)
   21b2a:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   21b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   21b32:	bf98      	it	ls
   21b34:	2000      	movls	r0, #0
   21b36:	e7dc      	b.n	21af2 <am_hal_ble_boot+0xd2>
   21b38:	4b20      	ldr	r3, [pc, #128]	; (21bbc <am_hal_ble_boot+0x19c>)
   21b3a:	681b      	ldr	r3, [r3, #0]
   21b3c:	6819      	ldr	r1, [r3, #0]
   21b3e:	684b      	ldr	r3, [r1, #4]
   21b40:	68c8      	ldr	r0, [r1, #12]
   21b42:	b16b      	cbz	r3, 21b60 <am_hal_ble_boot+0x140>
   21b44:	4e18      	ldr	r6, [pc, #96]	; (21ba8 <am_hal_ble_boot+0x188>)
   21b46:	18c5      	adds	r5, r0, r3
   21b48:	2300      	movs	r3, #0
   21b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
   21b4e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   21b52:	4285      	cmp	r5, r0
   21b54:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   21b58:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   21b5c:	b29b      	uxth	r3, r3
   21b5e:	d1f4      	bne.n	21b4a <am_hal_ble_boot+0x12a>
   21b60:	608b      	str	r3, [r1, #8]
   21b62:	4620      	mov	r0, r4
   21b64:	f7ff fa62 	bl	2102c <am_hal_ble_patch_apply>
   21b68:	2800      	cmp	r0, #0
   21b6a:	d1c2      	bne.n	21af2 <am_hal_ble_boot+0xd2>
   21b6c:	4620      	mov	r0, r4
   21b6e:	f7ff f921 	bl	20db4 <am_hal_ble_patch_copy_end_apply>
   21b72:	2800      	cmp	r0, #0
   21b74:	d1bd      	bne.n	21af2 <am_hal_ble_boot+0xd2>
   21b76:	e76c      	b.n	21a52 <am_hal_ble_boot+0x32>
   21b78:	4b11      	ldr	r3, [pc, #68]	; (21bc0 <am_hal_ble_boot+0x1a0>)
   21b7a:	68da      	ldr	r2, [r3, #12]
   21b7c:	e771      	b.n	21a62 <am_hal_ble_boot+0x42>
   21b7e:	4620      	mov	r0, r4
   21b80:	aa01      	add	r2, sp, #4
   21b82:	4910      	ldr	r1, [pc, #64]	; (21bc4 <am_hal_ble_boot+0x1a4>)
   21b84:	f7ff fc42 	bl	2140c <am_hal_ble_plf_reg_read>
   21b88:	e7cd      	b.n	21b26 <am_hal_ble_boot+0x106>
   21b8a:	bf00      	nop
   21b8c:	01775230 	.word	0x01775230
   21b90:	40020000 	.word	0x40020000
   21b94:	10002cf4 	.word	0x10002cf4
   21b98:	50023800 	.word	0x50023800
   21b9c:	50023804 	.word	0x50023804
   21ba0:	00025870 	.word	0x00025870
   21ba4:	100037a0 	.word	0x100037a0
   21ba8:	00024020 	.word	0x00024020
   21bac:	00024f58 	.word	0x00024f58
   21bb0:	10002e18 	.word	0x10002e18
   21bb4:	20006054 	.word	0x20006054
   21bb8:	0800000b 	.word	0x0800000b
   21bbc:	10002ce0 	.word	0x10002ce0
   21bc0:	100037a4 	.word	0x100037a4
   21bc4:	20006858 	.word	0x20006858

00021bc8 <am_hal_ble_tx_power_set>:
   21bc8:	b570      	push	{r4, r5, r6, lr}
   21bca:	b082      	sub	sp, #8
   21bcc:	4605      	mov	r5, r0
   21bce:	2300      	movs	r3, #0
   21bd0:	460e      	mov	r6, r1
   21bd2:	466a      	mov	r2, sp
   21bd4:	040c      	lsls	r4, r1, #16
   21bd6:	4919      	ldr	r1, [pc, #100]	; (21c3c <am_hal_ble_tx_power_set+0x74>)
   21bd8:	9301      	str	r3, [sp, #4]
   21bda:	f7ff fc17 	bl	2140c <am_hal_ble_plf_reg_read>
   21bde:	4917      	ldr	r1, [pc, #92]	; (21c3c <am_hal_ble_tx_power_set+0x74>)
   21be0:	4628      	mov	r0, r5
   21be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21be6:	f7ff fcd1 	bl	2158c <am_hal_ble_plf_reg_write>
   21bea:	4b15      	ldr	r3, [pc, #84]	; (21c40 <am_hal_ble_tx_power_set+0x78>)
   21bec:	68db      	ldr	r3, [r3, #12]
   21bee:	b2db      	uxtb	r3, r3
   21bf0:	2b21      	cmp	r3, #33	; 0x21
   21bf2:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   21bf6:	bf0c      	ite	eq
   21bf8:	4912      	ldreq	r1, [pc, #72]	; (21c44 <am_hal_ble_tx_power_set+0x7c>)
   21bfa:	4913      	ldrne	r1, [pc, #76]	; (21c48 <am_hal_ble_tx_power_set+0x80>)
   21bfc:	aa01      	add	r2, sp, #4
   21bfe:	f044 0408 	orr.w	r4, r4, #8
   21c02:	4628      	mov	r0, r5
   21c04:	f7ff fc02 	bl	2140c <am_hal_ble_plf_reg_read>
   21c08:	4910      	ldr	r1, [pc, #64]	; (21c4c <am_hal_ble_tx_power_set+0x84>)
   21c0a:	f88d 6004 	strb.w	r6, [sp, #4]
   21c0e:	4622      	mov	r2, r4
   21c10:	4628      	mov	r0, r5
   21c12:	f7ff fcbb 	bl	2158c <am_hal_ble_plf_reg_write>
   21c16:	4b0a      	ldr	r3, [pc, #40]	; (21c40 <am_hal_ble_tx_power_set+0x78>)
   21c18:	9a01      	ldr	r2, [sp, #4]
   21c1a:	68db      	ldr	r3, [r3, #12]
   21c1c:	b2db      	uxtb	r3, r3
   21c1e:	2b21      	cmp	r3, #33	; 0x21
   21c20:	bf0c      	ite	eq
   21c22:	4908      	ldreq	r1, [pc, #32]	; (21c44 <am_hal_ble_tx_power_set+0x7c>)
   21c24:	4908      	ldrne	r1, [pc, #32]	; (21c48 <am_hal_ble_tx_power_set+0x80>)
   21c26:	4628      	mov	r0, r5
   21c28:	f7ff fcb0 	bl	2158c <am_hal_ble_plf_reg_write>
   21c2c:	4628      	mov	r0, r5
   21c2e:	9a00      	ldr	r2, [sp, #0]
   21c30:	4902      	ldr	r1, [pc, #8]	; (21c3c <am_hal_ble_tx_power_set+0x74>)
   21c32:	f7ff fcab 	bl	2158c <am_hal_ble_plf_reg_write>
   21c36:	2000      	movs	r0, #0
   21c38:	b002      	add	sp, #8
   21c3a:	bd70      	pop	{r4, r5, r6, pc}
   21c3c:	43000004 	.word	0x43000004
   21c40:	40020000 	.word	0x40020000
   21c44:	20006838 	.word	0x20006838
   21c48:	20006038 	.word	0x20006038
   21c4c:	52400018 	.word	0x52400018

00021c50 <am_hal_cachectrl_config>:
   21c50:	b530      	push	{r4, r5, lr}
   21c52:	b083      	sub	sp, #12
   21c54:	4605      	mov	r5, r0
   21c56:	f000 fa61 	bl	2211c <am_hal_interrupt_master_disable>
   21c5a:	4c0f      	ldr	r4, [pc, #60]	; (21c98 <am_hal_cachectrl_config+0x48>)
   21c5c:	9001      	str	r0, [sp, #4]
   21c5e:	6823      	ldr	r3, [r4, #0]
   21c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   21c64:	6023      	str	r3, [r4, #0]
   21c66:	9801      	ldr	r0, [sp, #4]
   21c68:	f000 fa5c 	bl	22124 <am_hal_interrupt_master_set>
   21c6c:	78ab      	ldrb	r3, [r5, #2]
   21c6e:	782a      	ldrb	r2, [r5, #0]
   21c70:	7869      	ldrb	r1, [r5, #1]
   21c72:	005b      	lsls	r3, r3, #1
   21c74:	0112      	lsls	r2, r2, #4
   21c76:	b2d2      	uxtb	r2, r2
   21c78:	f003 0302 	and.w	r3, r3, #2
   21c7c:	4313      	orrs	r3, r2
   21c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21c82:	020a      	lsls	r2, r1, #8
   21c84:	f402 7240 	and.w	r2, r2, #768	; 0x300
   21c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   21c8c:	4313      	orrs	r3, r2
   21c8e:	2000      	movs	r0, #0
   21c90:	6023      	str	r3, [r4, #0]
   21c92:	b003      	add	sp, #12
   21c94:	bd30      	pop	{r4, r5, pc}
   21c96:	bf00      	nop
   21c98:	40018000 	.word	0x40018000

00021c9c <am_hal_cachectrl_enable>:
   21c9c:	4a03      	ldr	r2, [pc, #12]	; (21cac <am_hal_cachectrl_enable+0x10>)
   21c9e:	6813      	ldr	r3, [r2, #0]
   21ca0:	f043 0301 	orr.w	r3, r3, #1
   21ca4:	6013      	str	r3, [r2, #0]
   21ca6:	2000      	movs	r0, #0
   21ca8:	4770      	bx	lr
   21caa:	bf00      	nop
   21cac:	40018000 	.word	0x40018000

00021cb0 <am_hal_clkgen_control>:
   21cb0:	4b41      	ldr	r3, [pc, #260]	; (21db8 <am_hal_clkgen_control+0x108>)
   21cb2:	681a      	ldr	r2, [r3, #0]
   21cb4:	b912      	cbnz	r2, 21cbc <am_hal_clkgen_control+0xc>
   21cb6:	4a41      	ldr	r2, [pc, #260]	; (21dbc <am_hal_clkgen_control+0x10c>)
   21cb8:	6812      	ldr	r2, [r2, #0]
   21cba:	601a      	str	r2, [r3, #0]
   21cbc:	2809      	cmp	r0, #9
   21cbe:	d878      	bhi.n	21db2 <am_hal_clkgen_control+0x102>
   21cc0:	e8df f000 	tbb	[pc, r0]
   21cc4:	261e160d 	.word	0x261e160d
   21cc8:	524c423a 	.word	0x524c423a
   21ccc:	055a      	.short	0x055a
   21cce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21cd2:	2000      	movs	r0, #0
   21cd4:	6a1a      	ldr	r2, [r3, #32]
   21cd6:	f36f 0200 	bfc	r2, #0, #1
   21cda:	621a      	str	r2, [r3, #32]
   21cdc:	4770      	bx	lr
   21cde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21ce2:	2200      	movs	r2, #0
   21ce4:	2147      	movs	r1, #71	; 0x47
   21ce6:	6159      	str	r1, [r3, #20]
   21ce8:	4610      	mov	r0, r2
   21cea:	619a      	str	r2, [r3, #24]
   21cec:	615a      	str	r2, [r3, #20]
   21cee:	4770      	bx	lr
   21cf0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21cf4:	2000      	movs	r0, #0
   21cf6:	68d3      	ldr	r3, [r2, #12]
   21cf8:	f023 0301 	bic.w	r3, r3, #1
   21cfc:	60d3      	str	r3, [r2, #12]
   21cfe:	4770      	bx	lr
   21d00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21d04:	2000      	movs	r0, #0
   21d06:	68d3      	ldr	r3, [r2, #12]
   21d08:	f023 0302 	bic.w	r3, r3, #2
   21d0c:	60d3      	str	r3, [r2, #12]
   21d0e:	4770      	bx	lr
   21d10:	4a2b      	ldr	r2, [pc, #172]	; (21dc0 <am_hal_clkgen_control+0x110>)
   21d12:	68d3      	ldr	r3, [r2, #12]
   21d14:	b2db      	uxtb	r3, r3
   21d16:	2b21      	cmp	r3, #33	; 0x21
   21d18:	d106      	bne.n	21d28 <am_hal_clkgen_control+0x78>
   21d1a:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   21d1e:	2101      	movs	r1, #1
   21d20:	f361 2309 	bfi	r3, r1, #8, #2
   21d24:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   21d28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21d2c:	2000      	movs	r0, #0
   21d2e:	68d3      	ldr	r3, [r2, #12]
   21d30:	f043 0301 	orr.w	r3, r3, #1
   21d34:	60d3      	str	r3, [r2, #12]
   21d36:	4770      	bx	lr
   21d38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21d3c:	2000      	movs	r0, #0
   21d3e:	68d3      	ldr	r3, [r2, #12]
   21d40:	f043 0302 	orr.w	r3, r3, #2
   21d44:	60d3      	str	r3, [r2, #12]
   21d46:	4770      	bx	lr
   21d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21d4c:	2200      	movs	r2, #0
   21d4e:	2047      	movs	r0, #71	; 0x47
   21d50:	2101      	movs	r1, #1
   21d52:	6158      	str	r0, [r3, #20]
   21d54:	6199      	str	r1, [r3, #24]
   21d56:	4610      	mov	r0, r2
   21d58:	615a      	str	r2, [r3, #20]
   21d5a:	4770      	bx	lr
   21d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21d60:	2000      	movs	r0, #0
   21d62:	68da      	ldr	r2, [r3, #12]
   21d64:	60da      	str	r2, [r3, #12]
   21d66:	4770      	bx	lr
   21d68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21d6c:	2000      	movs	r0, #0
   21d6e:	68d3      	ldr	r3, [r2, #12]
   21d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21d74:	60d3      	str	r3, [r2, #12]
   21d76:	4770      	bx	lr
   21d78:	b510      	push	{r4, lr}
   21d7a:	4a11      	ldr	r2, [pc, #68]	; (21dc0 <am_hal_clkgen_control+0x110>)
   21d7c:	68d3      	ldr	r3, [r2, #12]
   21d7e:	b2db      	uxtb	r3, r3
   21d80:	2b21      	cmp	r3, #33	; 0x21
   21d82:	460c      	mov	r4, r1
   21d84:	d008      	beq.n	21d98 <am_hal_clkgen_control+0xe8>
   21d86:	b194      	cbz	r4, 21dae <am_hal_clkgen_control+0xfe>
   21d88:	6823      	ldr	r3, [r4, #0]
   21d8a:	f043 0301 	orr.w	r3, r3, #1
   21d8e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21d92:	2000      	movs	r0, #0
   21d94:	6213      	str	r3, [r2, #32]
   21d96:	bd10      	pop	{r4, pc}
   21d98:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   21d9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   21da0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   21da4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   21da8:	f000 f86c 	bl	21e84 <am_hal_flash_delay>
   21dac:	e7eb      	b.n	21d86 <am_hal_clkgen_control+0xd6>
   21dae:	4b05      	ldr	r3, [pc, #20]	; (21dc4 <am_hal_clkgen_control+0x114>)
   21db0:	e7ed      	b.n	21d8e <am_hal_clkgen_control+0xde>
   21db2:	2006      	movs	r0, #6
   21db4:	4770      	bx	lr
   21db6:	bf00      	nop
   21db8:	100092e4 	.word	0x100092e4
   21dbc:	4ffff000 	.word	0x4ffff000
   21dc0:	40020000 	.word	0x40020000
   21dc4:	0025b801 	.word	0x0025b801

00021dc8 <am_hal_clkgen_status_get>:
   21dc8:	b1a8      	cbz	r0, 21df6 <am_hal_clkgen_status_get+0x2e>
   21dca:	b410      	push	{r4}
   21dcc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21dd0:	490a      	ldr	r1, [pc, #40]	; (21dfc <am_hal_clkgen_status_get+0x34>)
   21dd2:	6994      	ldr	r4, [r2, #24]
   21dd4:	4b0a      	ldr	r3, [pc, #40]	; (21e00 <am_hal_clkgen_status_get+0x38>)
   21dd6:	f014 0f01 	tst.w	r4, #1
   21dda:	bf08      	it	eq
   21ddc:	460b      	moveq	r3, r1
   21dde:	6003      	str	r3, [r0, #0]
   21de0:	69d3      	ldr	r3, [r2, #28]
   21de2:	f85d 4b04 	ldr.w	r4, [sp], #4
   21de6:	f003 0201 	and.w	r2, r3, #1
   21dea:	f3c3 0340 	ubfx	r3, r3, #1, #1
   21dee:	6042      	str	r2, [r0, #4]
   21df0:	7203      	strb	r3, [r0, #8]
   21df2:	2000      	movs	r0, #0
   21df4:	4770      	bx	lr
   21df6:	2006      	movs	r0, #6
   21df8:	4770      	bx	lr
   21dfa:	bf00      	nop
   21dfc:	02dc6c00 	.word	0x02dc6c00
   21e00:	016e3600 	.word	0x016e3600

00021e04 <am_hal_ctimer_int_service>:
   21e04:	b198      	cbz	r0, 21e2e <am_hal_ctimer_int_service+0x2a>
   21e06:	b570      	push	{r4, r5, r6, lr}
   21e08:	4e09      	ldr	r6, [pc, #36]	; (21e30 <am_hal_ctimer_int_service+0x2c>)
   21e0a:	4604      	mov	r4, r0
   21e0c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   21e10:	fab4 f384 	clz	r3, r4
   21e14:	f1c3 021f 	rsb	r2, r3, #31
   21e18:	fa25 f303 	lsr.w	r3, r5, r3
   21e1c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   21e20:	ea24 0403 	bic.w	r4, r4, r3
   21e24:	b102      	cbz	r2, 21e28 <am_hal_ctimer_int_service+0x24>
   21e26:	4790      	blx	r2
   21e28:	2c00      	cmp	r4, #0
   21e2a:	d1f1      	bne.n	21e10 <am_hal_ctimer_int_service+0xc>
   21e2c:	bd70      	pop	{r4, r5, r6, pc}
   21e2e:	4770      	bx	lr
   21e30:	10009264 	.word	0x10009264

00021e34 <am_hal_ctimer_int_clear>:
   21e34:	b510      	push	{r4, lr}
   21e36:	b082      	sub	sp, #8
   21e38:	4604      	mov	r4, r0
   21e3a:	f000 f96f 	bl	2211c <am_hal_interrupt_master_disable>
   21e3e:	4b04      	ldr	r3, [pc, #16]	; (21e50 <am_hal_ctimer_int_clear+0x1c>)
   21e40:	9001      	str	r0, [sp, #4]
   21e42:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   21e46:	9801      	ldr	r0, [sp, #4]
   21e48:	f000 f96c 	bl	22124 <am_hal_interrupt_master_set>
   21e4c:	b002      	add	sp, #8
   21e4e:	bd10      	pop	{r4, pc}
   21e50:	40008000 	.word	0x40008000

00021e54 <am_hal_ctimer_int_status_get>:
   21e54:	b510      	push	{r4, lr}
   21e56:	b082      	sub	sp, #8
   21e58:	4604      	mov	r4, r0
   21e5a:	f000 f95f 	bl	2211c <am_hal_interrupt_master_disable>
   21e5e:	4b08      	ldr	r3, [pc, #32]	; (21e80 <am_hal_ctimer_int_status_get+0x2c>)
   21e60:	9001      	str	r0, [sp, #4]
   21e62:	b93c      	cbnz	r4, 21e74 <am_hal_ctimer_int_status_get+0x20>
   21e64:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   21e68:	9801      	ldr	r0, [sp, #4]
   21e6a:	f000 f95b 	bl	22124 <am_hal_interrupt_master_set>
   21e6e:	4620      	mov	r0, r4
   21e70:	b002      	add	sp, #8
   21e72:	bd10      	pop	{r4, pc}
   21e74:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   21e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   21e7c:	401c      	ands	r4, r3
   21e7e:	e7f3      	b.n	21e68 <am_hal_ctimer_int_status_get+0x14>
   21e80:	40008000 	.word	0x40008000

00021e84 <am_hal_flash_delay>:
   21e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   21e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   21e8a:	075b      	lsls	r3, r3, #29
   21e8c:	bf46      	itte	mi
   21e8e:	0040      	lslmi	r0, r0, #1
   21e90:	230e      	movmi	r3, #14
   21e92:	230b      	movpl	r3, #11
   21e94:	4298      	cmp	r0, r3
   21e96:	d800      	bhi.n	21e9a <am_hal_flash_delay+0x16>
   21e98:	4770      	bx	lr
   21e9a:	1ac0      	subs	r0, r0, r3
   21e9c:	4b00      	ldr	r3, [pc, #0]	; (21ea0 <am_hal_flash_delay+0x1c>)
   21e9e:	4718      	bx	r3
   21ea0:	0800009d 	.word	0x0800009d

00021ea4 <am_hal_gpio_pinconfig>:
   21ea4:	2831      	cmp	r0, #49	; 0x31
   21ea6:	d901      	bls.n	21eac <am_hal_gpio_pinconfig+0x8>
   21ea8:	2006      	movs	r0, #6
   21eaa:	4770      	bx	lr
   21eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21eb0:	f001 0307 	and.w	r3, r1, #7
   21eb4:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   21eb8:	b085      	sub	sp, #20
   21eba:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   21ebe:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   21ec2:	d014      	beq.n	21eee <am_hal_gpio_pinconfig+0x4a>
   21ec4:	f3c1 1742 	ubfx	r7, r1, #5, #3
   21ec8:	1dbd      	adds	r5, r7, #6
   21eca:	f005 0507 	and.w	r5, r5, #7
   21ece:	2d03      	cmp	r5, #3
   21ed0:	f042 0201 	orr.w	r2, r2, #1
   21ed4:	f200 80a7 	bhi.w	22026 <am_hal_gpio_pinconfig+0x182>
   21ed8:	4d82      	ldr	r5, [pc, #520]	; (220e4 <am_hal_gpio_pinconfig+0x240>)
   21eda:	5c2d      	ldrb	r5, [r5, r0]
   21edc:	07ee      	lsls	r6, r5, #31
   21ede:	d403      	bmi.n	21ee8 <am_hal_gpio_pinconfig+0x44>
   21ee0:	4881      	ldr	r0, [pc, #516]	; (220e8 <am_hal_gpio_pinconfig+0x244>)
   21ee2:	b005      	add	sp, #20
   21ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ee8:	3f02      	subs	r7, #2
   21eea:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   21eee:	2c00      	cmp	r4, #0
   21ef0:	f040 8091 	bne.w	22016 <am_hal_gpio_pinconfig+0x172>
   21ef4:	4c7d      	ldr	r4, [pc, #500]	; (220ec <am_hal_gpio_pinconfig+0x248>)
   21ef6:	4d7e      	ldr	r5, [pc, #504]	; (220f0 <am_hal_gpio_pinconfig+0x24c>)
   21ef8:	5c24      	ldrb	r4, [r4, r0]
   21efa:	5c2d      	ldrb	r5, [r5, r0]
   21efc:	411c      	asrs	r4, r3
   21efe:	f014 0f01 	tst.w	r4, #1
   21f02:	bf0c      	ite	eq
   21f04:	2400      	moveq	r4, #0
   21f06:	2402      	movne	r4, #2
   21f08:	42ab      	cmp	r3, r5
   21f0a:	ea42 0204 	orr.w	r2, r2, r4
   21f0e:	f000 8096 	beq.w	2203e <am_hal_gpio_pinconfig+0x19a>
   21f12:	f3c1 3341 	ubfx	r3, r1, #13, #2
   21f16:	105d      	asrs	r5, r3, #1
   21f18:	f3c1 2681 	ubfx	r6, r1, #10, #2
   21f1c:	00db      	lsls	r3, r3, #3
   21f1e:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   21f22:	f003 0408 	and.w	r4, r3, #8
   21f26:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   21f2a:	f00e 060c 	and.w	r6, lr, #12
   21f2e:	f3c1 3500 	ubfx	r5, r1, #12, #1
   21f32:	2e04      	cmp	r6, #4
   21f34:	ea43 0304 	orr.w	r3, r3, r4
   21f38:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   21f3c:	462c      	mov	r4, r5
   21f3e:	f000 808b 	beq.w	22058 <am_hal_gpio_pinconfig+0x1b4>
   21f42:	4c6c      	ldr	r4, [pc, #432]	; (220f4 <am_hal_gpio_pinconfig+0x250>)
   21f44:	6827      	ldr	r7, [r4, #0]
   21f46:	1bcf      	subs	r7, r1, r7
   21f48:	fab7 f787 	clz	r7, r7
   21f4c:	097f      	lsrs	r7, r7, #5
   21f4e:	f01e 0f60 	tst.w	lr, #96	; 0x60
   21f52:	bf04      	itt	eq
   21f54:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   21f58:	f364 0300 	bfieq	r3, r4, #0, #1
   21f5c:	0084      	lsls	r4, r0, #2
   21f5e:	f3c1 2101 	ubfx	r1, r1, #8, #2
   21f62:	2902      	cmp	r1, #2
   21f64:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   21f68:	d078      	beq.n	2205c <am_hal_gpio_pinconfig+0x1b8>
   21f6a:	d87f      	bhi.n	2206c <am_hal_gpio_pinconfig+0x1c8>
   21f6c:	2901      	cmp	r1, #1
   21f6e:	f04f 0100 	mov.w	r1, #0
   21f72:	bf08      	it	eq
   21f74:	f042 0204 	orreq.w	r2, r2, #4
   21f78:	f005 0518 	and.w	r5, r5, #24
   21f7c:	9101      	str	r1, [sp, #4]
   21f7e:	f004 041c 	and.w	r4, r4, #28
   21f82:	f020 0a03 	bic.w	sl, r0, #3
   21f86:	f04f 090f 	mov.w	r9, #15
   21f8a:	fa09 f904 	lsl.w	r9, r9, r4
   21f8e:	0841      	lsrs	r1, r0, #1
   21f90:	26ff      	movs	r6, #255	; 0xff
   21f92:	fa03 f404 	lsl.w	r4, r3, r4
   21f96:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   21f9a:	40ae      	lsls	r6, r5
   21f9c:	9300      	str	r3, [sp, #0]
   21f9e:	fa02 f505 	lsl.w	r5, r2, r5
   21fa2:	4683      	mov	fp, r0
   21fa4:	f021 0803 	bic.w	r8, r1, #3
   21fa8:	f000 f8b8 	bl	2211c <am_hal_interrupt_master_disable>
   21fac:	9b00      	ldr	r3, [sp, #0]
   21fae:	9003      	str	r0, [sp, #12]
   21fb0:	ea6f 0909 	mvn.w	r9, r9
   21fb4:	43f6      	mvns	r6, r6
   21fb6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   21fba:	f8df e15c 	ldr.w	lr, [pc, #348]	; 22118 <am_hal_gpio_pinconfig+0x274>
   21fbe:	4a4e      	ldr	r2, [pc, #312]	; (220f8 <am_hal_gpio_pinconfig+0x254>)
   21fc0:	b15f      	cbz	r7, 21fda <am_hal_gpio_pinconfig+0x136>
   21fc2:	ea4f 07db 	mov.w	r7, fp, lsr #3
   21fc6:	f00b 001f 	and.w	r0, fp, #31
   21fca:	f007 0704 	and.w	r7, r7, #4
   21fce:	f04f 0b01 	mov.w	fp, #1
   21fd2:	494a      	ldr	r1, [pc, #296]	; (220fc <am_hal_gpio_pinconfig+0x258>)
   21fd4:	fa0b f000 	lsl.w	r0, fp, r0
   21fd8:	5078      	str	r0, [r7, r1]
   21fda:	4849      	ldr	r0, [pc, #292]	; (22100 <am_hal_gpio_pinconfig+0x25c>)
   21fdc:	2773      	movs	r7, #115	; 0x73
   21fde:	6607      	str	r7, [r0, #96]	; 0x60
   21fe0:	681f      	ldr	r7, [r3, #0]
   21fe2:	4037      	ands	r7, r6
   21fe4:	433d      	orrs	r5, r7
   21fe6:	601d      	str	r5, [r3, #0]
   21fe8:	f858 300e 	ldr.w	r3, [r8, lr]
   21fec:	ea09 0303 	and.w	r3, r9, r3
   21ff0:	4323      	orrs	r3, r4
   21ff2:	f848 300e 	str.w	r3, [r8, lr]
   21ff6:	f85a 3002 	ldr.w	r3, [sl, r2]
   21ffa:	401e      	ands	r6, r3
   21ffc:	9b01      	ldr	r3, [sp, #4]
   21ffe:	2400      	movs	r4, #0
   22000:	431e      	orrs	r6, r3
   22002:	f84a 6002 	str.w	r6, [sl, r2]
   22006:	6604      	str	r4, [r0, #96]	; 0x60
   22008:	9803      	ldr	r0, [sp, #12]
   2200a:	f000 f88b 	bl	22124 <am_hal_interrupt_master_set>
   2200e:	4620      	mov	r0, r4
   22010:	b005      	add	sp, #20
   22012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22016:	2c01      	cmp	r4, #1
   22018:	d017      	beq.n	2204a <am_hal_gpio_pinconfig+0x1a6>
   2201a:	2c02      	cmp	r4, #2
   2201c:	d035      	beq.n	2208a <am_hal_gpio_pinconfig+0x1e6>
   2201e:	4839      	ldr	r0, [pc, #228]	; (22104 <am_hal_gpio_pinconfig+0x260>)
   22020:	b005      	add	sp, #20
   22022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22026:	2ec0      	cmp	r6, #192	; 0xc0
   22028:	d02a      	beq.n	22080 <am_hal_gpio_pinconfig+0x1dc>
   2202a:	2e20      	cmp	r6, #32
   2202c:	f47f af5f 	bne.w	21eee <am_hal_gpio_pinconfig+0x4a>
   22030:	2814      	cmp	r0, #20
   22032:	f43f af55 	beq.w	21ee0 <am_hal_gpio_pinconfig+0x3c>
   22036:	2c00      	cmp	r4, #0
   22038:	f43f af5c 	beq.w	21ef4 <am_hal_gpio_pinconfig+0x50>
   2203c:	e7eb      	b.n	22016 <am_hal_gpio_pinconfig+0x172>
   2203e:	f3c1 4402 	ubfx	r4, r1, #16, #3
   22042:	2c07      	cmp	r4, #7
   22044:	d128      	bne.n	22098 <am_hal_gpio_pinconfig+0x1f4>
   22046:	4830      	ldr	r0, [pc, #192]	; (22108 <am_hal_gpio_pinconfig+0x264>)
   22048:	e74b      	b.n	21ee2 <am_hal_gpio_pinconfig+0x3e>
   2204a:	4c26      	ldr	r4, [pc, #152]	; (220e4 <am_hal_gpio_pinconfig+0x240>)
   2204c:	5c24      	ldrb	r4, [r4, r0]
   2204e:	07a5      	lsls	r5, r4, #30
   22050:	d5e5      	bpl.n	2201e <am_hal_gpio_pinconfig+0x17a>
   22052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22056:	e74d      	b.n	21ef4 <am_hal_gpio_pinconfig+0x50>
   22058:	2701      	movs	r7, #1
   2205a:	e778      	b.n	21f4e <am_hal_gpio_pinconfig+0xaa>
   2205c:	f005 0518 	and.w	r5, r5, #24
   22060:	f04f 0801 	mov.w	r8, #1
   22064:	fa08 f105 	lsl.w	r1, r8, r5
   22068:	9101      	str	r1, [sp, #4]
   2206a:	e788      	b.n	21f7e <am_hal_gpio_pinconfig+0xda>
   2206c:	f005 0518 	and.w	r5, r5, #24
   22070:	f04f 0801 	mov.w	r8, #1
   22074:	fa08 f105 	lsl.w	r1, r8, r5
   22078:	f042 0204 	orr.w	r2, r2, #4
   2207c:	9101      	str	r1, [sp, #4]
   2207e:	e77e      	b.n	21f7e <am_hal_gpio_pinconfig+0xda>
   22080:	2814      	cmp	r0, #20
   22082:	f43f af34 	beq.w	21eee <am_hal_gpio_pinconfig+0x4a>
   22086:	4821      	ldr	r0, [pc, #132]	; (2210c <am_hal_gpio_pinconfig+0x268>)
   22088:	e72b      	b.n	21ee2 <am_hal_gpio_pinconfig+0x3e>
   2208a:	4c16      	ldr	r4, [pc, #88]	; (220e4 <am_hal_gpio_pinconfig+0x240>)
   2208c:	5c24      	ldrb	r4, [r4, r0]
   2208e:	0764      	lsls	r4, r4, #29
   22090:	d5c5      	bpl.n	2201e <am_hal_gpio_pinconfig+0x17a>
   22092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   22096:	e72d      	b.n	21ef4 <am_hal_gpio_pinconfig+0x50>
   22098:	4d1d      	ldr	r5, [pc, #116]	; (22110 <am_hal_gpio_pinconfig+0x26c>)
   2209a:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   2209e:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   220a2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   220a6:	429e      	cmp	r6, r3
   220a8:	d00c      	beq.n	220c4 <am_hal_gpio_pinconfig+0x220>
   220aa:	0084      	lsls	r4, r0, #2
   220ac:	4425      	add	r5, r4
   220ae:	786e      	ldrb	r6, [r5, #1]
   220b0:	429e      	cmp	r6, r3
   220b2:	d012      	beq.n	220da <am_hal_gpio_pinconfig+0x236>
   220b4:	78ae      	ldrb	r6, [r5, #2]
   220b6:	429e      	cmp	r6, r3
   220b8:	d00d      	beq.n	220d6 <am_hal_gpio_pinconfig+0x232>
   220ba:	78ed      	ldrb	r5, [r5, #3]
   220bc:	429d      	cmp	r5, r3
   220be:	d00e      	beq.n	220de <am_hal_gpio_pinconfig+0x23a>
   220c0:	4814      	ldr	r0, [pc, #80]	; (22114 <am_hal_gpio_pinconfig+0x270>)
   220c2:	e70e      	b.n	21ee2 <am_hal_gpio_pinconfig+0x3e>
   220c4:	2300      	movs	r3, #0
   220c6:	0084      	lsls	r4, r0, #2
   220c8:	005b      	lsls	r3, r3, #1
   220ca:	f3c1 5540 	ubfx	r5, r1, #21, #1
   220ce:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   220d2:	2700      	movs	r7, #0
   220d4:	e743      	b.n	21f5e <am_hal_gpio_pinconfig+0xba>
   220d6:	2302      	movs	r3, #2
   220d8:	e7f6      	b.n	220c8 <am_hal_gpio_pinconfig+0x224>
   220da:	2301      	movs	r3, #1
   220dc:	e7f4      	b.n	220c8 <am_hal_gpio_pinconfig+0x224>
   220de:	2303      	movs	r3, #3
   220e0:	e7f2      	b.n	220c8 <am_hal_gpio_pinconfig+0x224>
   220e2:	bf00      	nop
   220e4:	00025878 	.word	0x00025878
   220e8:	08000100 	.word	0x08000100
   220ec:	00025974 	.word	0x00025974
   220f0:	000259ac 	.word	0x000259ac
   220f4:	000259a8 	.word	0x000259a8
   220f8:	400100e0 	.word	0x400100e0
   220fc:	400100b4 	.word	0x400100b4
   22100:	40010000 	.word	0x40010000
   22104:	08000102 	.word	0x08000102
   22108:	08000103 	.word	0x08000103
   2210c:	08000101 	.word	0x08000101
   22110:	000258ac 	.word	0x000258ac
   22114:	08000104 	.word	0x08000104
   22118:	40010040 	.word	0x40010040

0002211c <am_hal_interrupt_master_disable>:
   2211c:	f3ef 8010 	mrs	r0, PRIMASK
   22120:	b672      	cpsid	i
   22122:	4770      	bx	lr

00022124 <am_hal_interrupt_master_set>:
   22124:	f380 8810 	msr	PRIMASK, r0
   22128:	4770      	bx	lr
   2212a:	bf00      	nop

0002212c <am_hal_mcuctrl_info_get>:
   2212c:	b4f0      	push	{r4, r5, r6, r7}
   2212e:	b121      	cbz	r1, 2213a <am_hal_mcuctrl_info_get+0xe>
   22130:	2801      	cmp	r0, #1
   22132:	d038      	beq.n	221a6 <am_hal_mcuctrl_info_get+0x7a>
   22134:	d320      	bcc.n	22178 <am_hal_mcuctrl_info_get+0x4c>
   22136:	2802      	cmp	r0, #2
   22138:	d002      	beq.n	22140 <am_hal_mcuctrl_info_get+0x14>
   2213a:	2006      	movs	r0, #6
   2213c:	bcf0      	pop	{r4, r5, r6, r7}
   2213e:	4770      	bx	lr
   22140:	4a41      	ldr	r2, [pc, #260]	; (22248 <am_hal_mcuctrl_info_get+0x11c>)
   22142:	684d      	ldr	r5, [r1, #4]
   22144:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   22148:	694c      	ldr	r4, [r1, #20]
   2214a:	f003 0601 	and.w	r6, r3, #1
   2214e:	f3c3 0040 	ubfx	r0, r3, #1, #1
   22152:	f3c3 0380 	ubfx	r3, r3, #2, #1
   22156:	700e      	strb	r6, [r1, #0]
   22158:	7208      	strb	r0, [r1, #8]
   2215a:	740b      	strb	r3, [r1, #16]
   2215c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   22160:	60cb      	str	r3, [r1, #12]
   22162:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   22166:	4328      	orrs	r0, r5
   22168:	6048      	str	r0, [r1, #4]
   2216a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   2216e:	4323      	orrs	r3, r4
   22170:	2000      	movs	r0, #0
   22172:	614b      	str	r3, [r1, #20]
   22174:	bcf0      	pop	{r4, r5, r6, r7}
   22176:	4770      	bx	lr
   22178:	4a33      	ldr	r2, [pc, #204]	; (22248 <am_hal_mcuctrl_info_get+0x11c>)
   2217a:	6993      	ldr	r3, [r2, #24]
   2217c:	f3c3 1080 	ubfx	r0, r3, #6, #1
   22180:	f3c3 0380 	ubfx	r3, r3, #2, #1
   22184:	7008      	strb	r0, [r1, #0]
   22186:	704b      	strb	r3, [r1, #1]
   22188:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   2218c:	f3c3 6381 	ubfx	r3, r3, #26, #2
   22190:	710b      	strb	r3, [r1, #4]
   22192:	6953      	ldr	r3, [r2, #20]
   22194:	f3c3 0240 	ubfx	r2, r3, #1, #1
   22198:	f003 0301 	and.w	r3, r3, #1
   2219c:	2000      	movs	r0, #0
   2219e:	708a      	strb	r2, [r1, #2]
   221a0:	70cb      	strb	r3, [r1, #3]
   221a2:	bcf0      	pop	{r4, r5, r6, r7}
   221a4:	4770      	bx	lr
   221a6:	4b28      	ldr	r3, [pc, #160]	; (22248 <am_hal_mcuctrl_info_get+0x11c>)
   221a8:	4c28      	ldr	r4, [pc, #160]	; (2224c <am_hal_mcuctrl_info_get+0x120>)
   221aa:	681a      	ldr	r2, [r3, #0]
   221ac:	600a      	str	r2, [r1, #0]
   221ae:	6858      	ldr	r0, [r3, #4]
   221b0:	6048      	str	r0, [r1, #4]
   221b2:	6898      	ldr	r0, [r3, #8]
   221b4:	6088      	str	r0, [r1, #8]
   221b6:	68d8      	ldr	r0, [r3, #12]
   221b8:	60c8      	str	r0, [r1, #12]
   221ba:	691d      	ldr	r5, [r3, #16]
   221bc:	4824      	ldr	r0, [pc, #144]	; (22250 <am_hal_mcuctrl_info_get+0x124>)
   221be:	610d      	str	r5, [r1, #16]
   221c0:	f3c2 5703 	ubfx	r7, r2, #20, #4
   221c4:	f3c2 4603 	ubfx	r6, r2, #16, #4
   221c8:	695d      	ldr	r5, [r3, #20]
   221ca:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   221ce:	4b21      	ldr	r3, [pc, #132]	; (22254 <am_hal_mcuctrl_info_get+0x128>)
   221d0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   221d4:	6208      	str	r0, [r1, #32]
   221d6:	f002 0201 	and.w	r2, r2, #1
   221da:	614d      	str	r5, [r1, #20]
   221dc:	61cc      	str	r4, [r1, #28]
   221de:	618a      	str	r2, [r1, #24]
   221e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   221e4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   221e8:	b2d0      	uxtb	r0, r2
   221ea:	f004 020f 	and.w	r2, r4, #15
   221ee:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   221f2:	624a      	str	r2, [r1, #36]	; 0x24
   221f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   221f8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   221fc:	f3c2 1003 	ubfx	r0, r2, #4, #4
   22200:	f004 020f 	and.w	r2, r4, #15
   22204:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   22208:	628a      	str	r2, [r1, #40]	; 0x28
   2220a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   2220e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   22212:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   22216:	f3c2 1203 	ubfx	r2, r2, #4, #4
   2221a:	4302      	orrs	r2, r0
   2221c:	62ca      	str	r2, [r1, #44]	; 0x2c
   2221e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   22222:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   22226:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   2222a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2222e:	b2c0      	uxtb	r0, r0
   22230:	0400      	lsls	r0, r0, #16
   22232:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   22236:	b2d2      	uxtb	r2, r2
   22238:	431a      	orrs	r2, r3
   2223a:	b2e3      	uxtb	r3, r4
   2223c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   22240:	630b      	str	r3, [r1, #48]	; 0x30
   22242:	2000      	movs	r0, #0
   22244:	bcf0      	pop	{r4, r5, r6, r7}
   22246:	4770      	bx	lr
   22248:	40020000 	.word	0x40020000
   2224c:	000259e0 	.word	0x000259e0
   22250:	00025a20 	.word	0x00025a20
   22254:	f0000f00 	.word	0xf0000f00

00022258 <am_hal_pwrctrl_periph_enable>:
   22258:	b570      	push	{r4, r5, r6, lr}
   2225a:	b082      	sub	sp, #8
   2225c:	4604      	mov	r4, r0
   2225e:	f7ff ff5d 	bl	2211c <am_hal_interrupt_master_disable>
   22262:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   22266:	4d0f      	ldr	r5, [pc, #60]	; (222a4 <am_hal_pwrctrl_periph_enable+0x4c>)
   22268:	4e0f      	ldr	r6, [pc, #60]	; (222a8 <am_hal_pwrctrl_periph_enable+0x50>)
   2226a:	9001      	str	r0, [sp, #4]
   2226c:	00a4      	lsls	r4, r4, #2
   2226e:	68aa      	ldr	r2, [r5, #8]
   22270:	5933      	ldr	r3, [r6, r4]
   22272:	4313      	orrs	r3, r2
   22274:	60ab      	str	r3, [r5, #8]
   22276:	9801      	ldr	r0, [sp, #4]
   22278:	4434      	add	r4, r6
   2227a:	f7ff ff53 	bl	22124 <am_hal_interrupt_master_set>
   2227e:	20a0      	movs	r0, #160	; 0xa0
   22280:	f7ff fe00 	bl	21e84 <am_hal_flash_delay>
   22284:	69ab      	ldr	r3, [r5, #24]
   22286:	6864      	ldr	r4, [r4, #4]
   22288:	4223      	tst	r3, r4
   2228a:	d103      	bne.n	22294 <am_hal_pwrctrl_periph_enable+0x3c>
   2228c:	20a0      	movs	r0, #160	; 0xa0
   2228e:	f7ff fdf9 	bl	21e84 <am_hal_flash_delay>
   22292:	69ab      	ldr	r3, [r5, #24]
   22294:	4b03      	ldr	r3, [pc, #12]	; (222a4 <am_hal_pwrctrl_periph_enable+0x4c>)
   22296:	699b      	ldr	r3, [r3, #24]
   22298:	4223      	tst	r3, r4
   2229a:	bf0c      	ite	eq
   2229c:	2001      	moveq	r0, #1
   2229e:	2000      	movne	r0, #0
   222a0:	b002      	add	sp, #8
   222a2:	bd70      	pop	{r4, r5, r6, pc}
   222a4:	40021000 	.word	0x40021000
   222a8:	00025a60 	.word	0x00025a60

000222ac <am_hal_pwrctrl_periph_disable>:
   222ac:	b570      	push	{r4, r5, r6, lr}
   222ae:	b082      	sub	sp, #8
   222b0:	4604      	mov	r4, r0
   222b2:	f7ff ff33 	bl	2211c <am_hal_interrupt_master_disable>
   222b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   222ba:	4d10      	ldr	r5, [pc, #64]	; (222fc <am_hal_pwrctrl_periph_disable+0x50>)
   222bc:	4e10      	ldr	r6, [pc, #64]	; (22300 <am_hal_pwrctrl_periph_disable+0x54>)
   222be:	9001      	str	r0, [sp, #4]
   222c0:	00a4      	lsls	r4, r4, #2
   222c2:	68ab      	ldr	r3, [r5, #8]
   222c4:	5932      	ldr	r2, [r6, r4]
   222c6:	ea23 0302 	bic.w	r3, r3, r2
   222ca:	60ab      	str	r3, [r5, #8]
   222cc:	9801      	ldr	r0, [sp, #4]
   222ce:	4434      	add	r4, r6
   222d0:	f7ff ff28 	bl	22124 <am_hal_interrupt_master_set>
   222d4:	20a0      	movs	r0, #160	; 0xa0
   222d6:	f7ff fdd5 	bl	21e84 <am_hal_flash_delay>
   222da:	69ab      	ldr	r3, [r5, #24]
   222dc:	6864      	ldr	r4, [r4, #4]
   222de:	4223      	tst	r3, r4
   222e0:	d003      	beq.n	222ea <am_hal_pwrctrl_periph_disable+0x3e>
   222e2:	20a0      	movs	r0, #160	; 0xa0
   222e4:	f7ff fdce 	bl	21e84 <am_hal_flash_delay>
   222e8:	69ab      	ldr	r3, [r5, #24]
   222ea:	4b04      	ldr	r3, [pc, #16]	; (222fc <am_hal_pwrctrl_periph_disable+0x50>)
   222ec:	699b      	ldr	r3, [r3, #24]
   222ee:	4223      	tst	r3, r4
   222f0:	bf14      	ite	ne
   222f2:	2001      	movne	r0, #1
   222f4:	2000      	moveq	r0, #0
   222f6:	b002      	add	sp, #8
   222f8:	bd70      	pop	{r4, r5, r6, pc}
   222fa:	bf00      	nop
   222fc:	40021000 	.word	0x40021000
   22300:	00025a60 	.word	0x00025a60

00022304 <am_hal_pwrctrl_memory_enable>:
   22304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22308:	ea4f 0880 	mov.w	r8, r0, lsl #2
   2230c:	eb08 0300 	add.w	r3, r8, r0
   22310:	009b      	lsls	r3, r3, #2
   22312:	4d1e      	ldr	r5, [pc, #120]	; (2238c <am_hal_pwrctrl_memory_enable+0x88>)
   22314:	58ee      	ldr	r6, [r5, r3]
   22316:	18ea      	adds	r2, r5, r3
   22318:	43f1      	mvns	r1, r6
   2231a:	4604      	mov	r4, r0
   2231c:	6917      	ldr	r7, [r2, #16]
   2231e:	d126      	bne.n	2236e <am_hal_pwrctrl_memory_enable+0x6a>
   22320:	b95e      	cbnz	r6, 2233a <am_hal_pwrctrl_memory_enable+0x36>
   22322:	4444      	add	r4, r8
   22324:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   22328:	6868      	ldr	r0, [r5, #4]
   2232a:	4b19      	ldr	r3, [pc, #100]	; (22390 <am_hal_pwrctrl_memory_enable+0x8c>)
   2232c:	695b      	ldr	r3, [r3, #20]
   2232e:	403b      	ands	r3, r7
   22330:	1a18      	subs	r0, r3, r0
   22332:	bf18      	it	ne
   22334:	2001      	movne	r0, #1
   22336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2233a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 22390 <am_hal_pwrctrl_memory_enable+0x8c>
   2233e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   22342:	4444      	add	r4, r8
   22344:	431e      	orrs	r6, r3
   22346:	20a0      	movs	r0, #160	; 0xa0
   22348:	f8c9 6010 	str.w	r6, [r9, #16]
   2234c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   22350:	f7ff fd98 	bl	21e84 <am_hal_flash_delay>
   22354:	f8d9 0014 	ldr.w	r0, [r9, #20]
   22358:	686c      	ldr	r4, [r5, #4]
   2235a:	4038      	ands	r0, r7
   2235c:	42a0      	cmp	r0, r4
   2235e:	d0e4      	beq.n	2232a <am_hal_pwrctrl_memory_enable+0x26>
   22360:	20a0      	movs	r0, #160	; 0xa0
   22362:	f7ff fd8f 	bl	21e84 <am_hal_flash_delay>
   22366:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2236a:	4620      	mov	r0, r4
   2236c:	e7dd      	b.n	2232a <am_hal_pwrctrl_memory_enable+0x26>
   2236e:	68d3      	ldr	r3, [r2, #12]
   22370:	4807      	ldr	r0, [pc, #28]	; (22390 <am_hal_pwrctrl_memory_enable+0x8c>)
   22372:	400b      	ands	r3, r1
   22374:	43db      	mvns	r3, r3
   22376:	6902      	ldr	r2, [r0, #16]
   22378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2237c:	f043 0301 	orr.w	r3, r3, #1
   22380:	4013      	ands	r3, r2
   22382:	6103      	str	r3, [r0, #16]
   22384:	2010      	movs	r0, #16
   22386:	f7ff fd7d 	bl	21e84 <am_hal_flash_delay>
   2238a:	e7c9      	b.n	22320 <am_hal_pwrctrl_memory_enable+0x1c>
   2238c:	00025b14 	.word	0x00025b14
   22390:	40021000 	.word	0x40021000

00022394 <am_hal_queue_init>:
   22394:	b410      	push	{r4}
   22396:	2400      	movs	r4, #0
   22398:	6004      	str	r4, [r0, #0]
   2239a:	6044      	str	r4, [r0, #4]
   2239c:	6084      	str	r4, [r0, #8]
   2239e:	60c3      	str	r3, [r0, #12]
   223a0:	6102      	str	r2, [r0, #16]
   223a2:	6141      	str	r1, [r0, #20]
   223a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   223a8:	4770      	bx	lr
   223aa:	bf00      	nop

000223ac <am_hal_queue_item_add>:
   223ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   223ae:	4604      	mov	r4, r0
   223b0:	6906      	ldr	r6, [r0, #16]
   223b2:	b083      	sub	sp, #12
   223b4:	fb06 f602 	mul.w	r6, r6, r2
   223b8:	460d      	mov	r5, r1
   223ba:	f7ff feaf 	bl	2211c <am_hal_interrupt_master_disable>
   223be:	68e7      	ldr	r7, [r4, #12]
   223c0:	68a2      	ldr	r2, [r4, #8]
   223c2:	9001      	str	r0, [sp, #4]
   223c4:	1abb      	subs	r3, r7, r2
   223c6:	429e      	cmp	r6, r3
   223c8:	d826      	bhi.n	22418 <am_hal_queue_item_add+0x6c>
   223ca:	b196      	cbz	r6, 223f2 <am_hal_queue_item_add+0x46>
   223cc:	6823      	ldr	r3, [r4, #0]
   223ce:	4629      	mov	r1, r5
   223d0:	b1c5      	cbz	r5, 22404 <am_hal_queue_item_add+0x58>
   223d2:	19af      	adds	r7, r5, r6
   223d4:	6962      	ldr	r2, [r4, #20]
   223d6:	f811 0b01 	ldrb.w	r0, [r1], #1
   223da:	54d0      	strb	r0, [r2, r3]
   223dc:	6823      	ldr	r3, [r4, #0]
   223de:	68e5      	ldr	r5, [r4, #12]
   223e0:	3301      	adds	r3, #1
   223e2:	42b9      	cmp	r1, r7
   223e4:	fbb3 f0f5 	udiv	r0, r3, r5
   223e8:	fb05 3310 	mls	r3, r5, r0, r3
   223ec:	6023      	str	r3, [r4, #0]
   223ee:	d1f1      	bne.n	223d4 <am_hal_queue_item_add+0x28>
   223f0:	68a2      	ldr	r2, [r4, #8]
   223f2:	4432      	add	r2, r6
   223f4:	60a2      	str	r2, [r4, #8]
   223f6:	2401      	movs	r4, #1
   223f8:	9801      	ldr	r0, [sp, #4]
   223fa:	f7ff fe93 	bl	22124 <am_hal_interrupt_master_set>
   223fe:	4620      	mov	r0, r4
   22400:	b003      	add	sp, #12
   22402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22404:	3101      	adds	r1, #1
   22406:	3301      	adds	r3, #1
   22408:	428e      	cmp	r6, r1
   2240a:	fbb3 f0f7 	udiv	r0, r3, r7
   2240e:	fb07 3310 	mls	r3, r7, r0, r3
   22412:	d1f7      	bne.n	22404 <am_hal_queue_item_add+0x58>
   22414:	6023      	str	r3, [r4, #0]
   22416:	e7ec      	b.n	223f2 <am_hal_queue_item_add+0x46>
   22418:	2400      	movs	r4, #0
   2241a:	e7ed      	b.n	223f8 <am_hal_queue_item_add+0x4c>

0002241c <am_hal_queue_item_get>:
   2241c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2241e:	4604      	mov	r4, r0
   22420:	6906      	ldr	r6, [r0, #16]
   22422:	b083      	sub	sp, #12
   22424:	fb06 f602 	mul.w	r6, r6, r2
   22428:	460d      	mov	r5, r1
   2242a:	f7ff fe77 	bl	2211c <am_hal_interrupt_master_disable>
   2242e:	68a2      	ldr	r2, [r4, #8]
   22430:	9001      	str	r0, [sp, #4]
   22432:	4296      	cmp	r6, r2
   22434:	d81c      	bhi.n	22470 <am_hal_queue_item_get+0x54>
   22436:	b196      	cbz	r6, 2245e <am_hal_queue_item_get+0x42>
   22438:	6863      	ldr	r3, [r4, #4]
   2243a:	b1dd      	cbz	r5, 22474 <am_hal_queue_item_get+0x58>
   2243c:	4629      	mov	r1, r5
   2243e:	19af      	adds	r7, r5, r6
   22440:	6962      	ldr	r2, [r4, #20]
   22442:	5cd3      	ldrb	r3, [r2, r3]
   22444:	f801 3b01 	strb.w	r3, [r1], #1
   22448:	6863      	ldr	r3, [r4, #4]
   2244a:	68e5      	ldr	r5, [r4, #12]
   2244c:	3301      	adds	r3, #1
   2244e:	428f      	cmp	r7, r1
   22450:	fbb3 f0f5 	udiv	r0, r3, r5
   22454:	fb05 3310 	mls	r3, r5, r0, r3
   22458:	6063      	str	r3, [r4, #4]
   2245a:	d1f1      	bne.n	22440 <am_hal_queue_item_get+0x24>
   2245c:	68a2      	ldr	r2, [r4, #8]
   2245e:	1b92      	subs	r2, r2, r6
   22460:	60a2      	str	r2, [r4, #8]
   22462:	2401      	movs	r4, #1
   22464:	9801      	ldr	r0, [sp, #4]
   22466:	f7ff fe5d 	bl	22124 <am_hal_interrupt_master_set>
   2246a:	4620      	mov	r0, r4
   2246c:	b003      	add	sp, #12
   2246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22470:	2400      	movs	r4, #0
   22472:	e7f7      	b.n	22464 <am_hal_queue_item_get+0x48>
   22474:	68e0      	ldr	r0, [r4, #12]
   22476:	4629      	mov	r1, r5
   22478:	3101      	adds	r1, #1
   2247a:	3301      	adds	r3, #1
   2247c:	428e      	cmp	r6, r1
   2247e:	fbb3 f5f0 	udiv	r5, r3, r0
   22482:	fb00 3315 	mls	r3, r0, r5, r3
   22486:	d1f7      	bne.n	22478 <am_hal_queue_item_get+0x5c>
   22488:	6063      	str	r3, [r4, #4]
   2248a:	e7e8      	b.n	2245e <am_hal_queue_item_get+0x42>

0002248c <am_hal_stimer_config>:
   2248c:	4b03      	ldr	r3, [pc, #12]	; (2249c <am_hal_stimer_config+0x10>)
   2248e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   22492:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   22496:	4610      	mov	r0, r2
   22498:	4770      	bx	lr
   2249a:	bf00      	nop
   2249c:	40008000 	.word	0x40008000

000224a0 <am_hal_stimer_counter_get>:
   224a0:	4b01      	ldr	r3, [pc, #4]	; (224a8 <am_hal_stimer_counter_get+0x8>)
   224a2:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   224a6:	4770      	bx	lr
   224a8:	40008000 	.word	0x40008000

000224ac <am_hal_stimer_compare_delta_set>:
   224ac:	2807      	cmp	r0, #7
   224ae:	d900      	bls.n	224b2 <am_hal_stimer_compare_delta_set+0x6>
   224b0:	4770      	bx	lr
   224b2:	b570      	push	{r4, r5, r6, lr}
   224b4:	b082      	sub	sp, #8
   224b6:	460c      	mov	r4, r1
   224b8:	4605      	mov	r5, r0
   224ba:	f7ff fe2f 	bl	2211c <am_hal_interrupt_master_disable>
   224be:	4923      	ldr	r1, [pc, #140]	; (2254c <am_hal_stimer_compare_delta_set+0xa0>)
   224c0:	9001      	str	r0, [sp, #4]
   224c2:	4b23      	ldr	r3, [pc, #140]	; (22550 <am_hal_stimer_compare_delta_set+0xa4>)
   224c4:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   224c8:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   224cc:	f44f 7280 	mov.w	r2, #256	; 0x100
   224d0:	442b      	add	r3, r5
   224d2:	40aa      	lsls	r2, r5
   224d4:	ea26 0502 	bic.w	r5, r6, r2
   224d8:	009b      	lsls	r3, r3, #2
   224da:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   224de:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   224e2:	601c      	str	r4, [r3, #0]
   224e4:	681d      	ldr	r5, [r3, #0]
   224e6:	4421      	add	r1, r4
   224e8:	1a6e      	subs	r6, r5, r1
   224ea:	2e00      	cmp	r6, #0
   224ec:	db03      	blt.n	224f6 <am_hal_stimer_compare_delta_set+0x4a>
   224ee:	310a      	adds	r1, #10
   224f0:	1a69      	subs	r1, r5, r1
   224f2:	2900      	cmp	r1, #0
   224f4:	dd1e      	ble.n	22534 <am_hal_stimer_compare_delta_set+0x88>
   224f6:	4915      	ldr	r1, [pc, #84]	; (2254c <am_hal_stimer_compare_delta_set+0xa0>)
   224f8:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   224fc:	601c      	str	r4, [r3, #0]
   224fe:	681d      	ldr	r5, [r3, #0]
   22500:	4421      	add	r1, r4
   22502:	1a6e      	subs	r6, r5, r1
   22504:	2e00      	cmp	r6, #0
   22506:	db03      	blt.n	22510 <am_hal_stimer_compare_delta_set+0x64>
   22508:	310a      	adds	r1, #10
   2250a:	1a69      	subs	r1, r5, r1
   2250c:	2900      	cmp	r1, #0
   2250e:	dd11      	ble.n	22534 <am_hal_stimer_compare_delta_set+0x88>
   22510:	490e      	ldr	r1, [pc, #56]	; (2254c <am_hal_stimer_compare_delta_set+0xa0>)
   22512:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   22516:	601c      	str	r4, [r3, #0]
   22518:	681d      	ldr	r5, [r3, #0]
   2251a:	4421      	add	r1, r4
   2251c:	1a6e      	subs	r6, r5, r1
   2251e:	2e00      	cmp	r6, #0
   22520:	db03      	blt.n	2252a <am_hal_stimer_compare_delta_set+0x7e>
   22522:	310a      	adds	r1, #10
   22524:	1a69      	subs	r1, r5, r1
   22526:	2900      	cmp	r1, #0
   22528:	dd04      	ble.n	22534 <am_hal_stimer_compare_delta_set+0x88>
   2252a:	4908      	ldr	r1, [pc, #32]	; (2254c <am_hal_stimer_compare_delta_set+0xa0>)
   2252c:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   22530:	601c      	str	r4, [r3, #0]
   22532:	681b      	ldr	r3, [r3, #0]
   22534:	4905      	ldr	r1, [pc, #20]	; (2254c <am_hal_stimer_compare_delta_set+0xa0>)
   22536:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   2253a:	4002      	ands	r2, r0
   2253c:	431a      	orrs	r2, r3
   2253e:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   22542:	9801      	ldr	r0, [sp, #4]
   22544:	f7ff fdee 	bl	22124 <am_hal_interrupt_master_set>
   22548:	b002      	add	sp, #8
   2254a:	bd70      	pop	{r4, r5, r6, pc}
   2254c:	40008000 	.word	0x40008000
   22550:	10002054 	.word	0x10002054

00022554 <am_hal_stimer_int_enable>:
   22554:	4a03      	ldr	r2, [pc, #12]	; (22564 <am_hal_stimer_int_enable+0x10>)
   22556:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2255a:	4318      	orrs	r0, r3
   2255c:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   22560:	4770      	bx	lr
   22562:	bf00      	nop
   22564:	40008000 	.word	0x40008000

00022568 <am_hal_stimer_int_clear>:
   22568:	4b01      	ldr	r3, [pc, #4]	; (22570 <am_hal_stimer_int_clear+0x8>)
   2256a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2256e:	4770      	bx	lr
   22570:	40008000 	.word	0x40008000

00022574 <am_hal_stimer_int_status_get>:
   22574:	4a04      	ldr	r2, [pc, #16]	; (22588 <am_hal_stimer_int_status_get+0x14>)
   22576:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2257a:	b110      	cbz	r0, 22582 <am_hal_stimer_int_status_get+0xe>
   2257c:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   22580:	4013      	ands	r3, r2
   22582:	4618      	mov	r0, r3
   22584:	4770      	bx	lr
   22586:	bf00      	nop
   22588:	40008000 	.word	0x40008000

0002258c <am_hal_sysctrl_sleep>:
   2258c:	b510      	push	{r4, lr}
   2258e:	b082      	sub	sp, #8
   22590:	4604      	mov	r4, r0
   22592:	f7ff fdc3 	bl	2211c <am_hal_interrupt_master_disable>
   22596:	9001      	str	r0, [sp, #4]
   22598:	b124      	cbz	r4, 225a4 <am_hal_sysctrl_sleep+0x18>
   2259a:	4b12      	ldr	r3, [pc, #72]	; (225e4 <am_hal_sysctrl_sleep+0x58>)
   2259c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   225a0:	07db      	lsls	r3, r3, #31
   225a2:	d512      	bpl.n	225ca <am_hal_sysctrl_sleep+0x3e>
   225a4:	4a10      	ldr	r2, [pc, #64]	; (225e8 <am_hal_sysctrl_sleep+0x5c>)
   225a6:	6913      	ldr	r3, [r2, #16]
   225a8:	f023 0304 	bic.w	r3, r3, #4
   225ac:	6113      	str	r3, [r2, #16]
   225ae:	f3bf 8f4f 	dsb	sy
   225b2:	4a0e      	ldr	r2, [pc, #56]	; (225ec <am_hal_sysctrl_sleep+0x60>)
   225b4:	4b0e      	ldr	r3, [pc, #56]	; (225f0 <am_hal_sysctrl_sleep+0x64>)
   225b6:	6812      	ldr	r2, [r2, #0]
   225b8:	601a      	str	r2, [r3, #0]
   225ba:	bf30      	wfi
   225bc:	f3bf 8f6f 	isb	sy
   225c0:	9801      	ldr	r0, [sp, #4]
   225c2:	f7ff fdaf 	bl	22124 <am_hal_interrupt_master_set>
   225c6:	b002      	add	sp, #8
   225c8:	bd10      	pop	{r4, pc}
   225ca:	4b0a      	ldr	r3, [pc, #40]	; (225f4 <am_hal_sysctrl_sleep+0x68>)
   225cc:	681a      	ldr	r2, [r3, #0]
   225ce:	b912      	cbnz	r2, 225d6 <am_hal_sysctrl_sleep+0x4a>
   225d0:	4a09      	ldr	r2, [pc, #36]	; (225f8 <am_hal_sysctrl_sleep+0x6c>)
   225d2:	6812      	ldr	r2, [r2, #0]
   225d4:	601a      	str	r2, [r3, #0]
   225d6:	4a04      	ldr	r2, [pc, #16]	; (225e8 <am_hal_sysctrl_sleep+0x5c>)
   225d8:	6913      	ldr	r3, [r2, #16]
   225da:	f043 0304 	orr.w	r3, r3, #4
   225de:	6113      	str	r3, [r2, #16]
   225e0:	e7e5      	b.n	225ae <am_hal_sysctrl_sleep+0x22>
   225e2:	bf00      	nop
   225e4:	40020000 	.word	0x40020000
   225e8:	e000ed00 	.word	0xe000ed00
   225ec:	5fff0000 	.word	0x5fff0000
   225f0:	100092e8 	.word	0x100092e8
   225f4:	100092e4 	.word	0x100092e4
   225f8:	4ffff000 	.word	0x4ffff000

000225fc <am_hal_sysctrl_fpu_enable>:
   225fc:	4b02      	ldr	r3, [pc, #8]	; (22608 <am_hal_sysctrl_fpu_enable+0xc>)
   225fe:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   22602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   22606:	4770      	bx	lr
   22608:	e000ed00 	.word	0xe000ed00

0002260c <am_hal_sysctrl_fpu_stacking_enable>:
   2260c:	b510      	push	{r4, lr}
   2260e:	b082      	sub	sp, #8
   22610:	4604      	mov	r4, r0
   22612:	f7ff fd83 	bl	2211c <am_hal_interrupt_master_disable>
   22616:	4a09      	ldr	r2, [pc, #36]	; (2263c <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   22618:	9001      	str	r0, [sp, #4]
   2261a:	6853      	ldr	r3, [r2, #4]
   2261c:	2c00      	cmp	r4, #0
   2261e:	bf14      	ite	ne
   22620:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   22624:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   22628:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   2262c:	430b      	orrs	r3, r1
   2262e:	6053      	str	r3, [r2, #4]
   22630:	9801      	ldr	r0, [sp, #4]
   22632:	f7ff fd77 	bl	22124 <am_hal_interrupt_master_set>
   22636:	b002      	add	sp, #8
   22638:	bd10      	pop	{r4, pc}
   2263a:	bf00      	nop
   2263c:	e000ef30 	.word	0xe000ef30

00022640 <am_bsp_itm_printf_enable>:
   22640:	b500      	push	{lr}
   22642:	4b0b      	ldr	r3, [pc, #44]	; (22670 <am_bsp_itm_printf_enable+0x30>)
   22644:	b087      	sub	sp, #28
   22646:	2201      	movs	r2, #1
   22648:	601a      	str	r2, [r3, #0]
   2264a:	f000 f819 	bl	22680 <am_hal_itm_enable>
   2264e:	4b09      	ldr	r3, [pc, #36]	; (22674 <am_bsp_itm_printf_enable+0x34>)
   22650:	9301      	str	r3, [sp, #4]
   22652:	a801      	add	r0, sp, #4
   22654:	f000 f84a 	bl	226ec <am_hal_tpiu_enable>
   22658:	4b07      	ldr	r3, [pc, #28]	; (22678 <am_bsp_itm_printf_enable+0x38>)
   2265a:	2021      	movs	r0, #33	; 0x21
   2265c:	6819      	ldr	r1, [r3, #0]
   2265e:	f7ff fc21 	bl	21ea4 <am_hal_gpio_pinconfig>
   22662:	4806      	ldr	r0, [pc, #24]	; (2267c <am_bsp_itm_printf_enable+0x3c>)
   22664:	f7f8 fac0 	bl	1abe8 <am_util_stdio_printf_init>
   22668:	b007      	add	sp, #28
   2266a:	f85d fb04 	ldr.w	pc, [sp], #4
   2266e:	bf00      	nop
   22670:	100092ec 	.word	0x100092ec
   22674:	000f4240 	.word	0x000f4240
   22678:	00025c7c 	.word	0x00025c7c
   2267c:	000226bd 	.word	0x000226bd

00022680 <am_hal_itm_enable>:
   22680:	4a0b      	ldr	r2, [pc, #44]	; (226b0 <am_hal_itm_enable+0x30>)
   22682:	68d3      	ldr	r3, [r2, #12]
   22684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   22688:	60d3      	str	r3, [r2, #12]
   2268a:	68d3      	ldr	r3, [r2, #12]
   2268c:	01db      	lsls	r3, r3, #7
   2268e:	d5fc      	bpl.n	2268a <am_hal_itm_enable+0xa>
   22690:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   22694:	4907      	ldr	r1, [pc, #28]	; (226b4 <am_hal_itm_enable+0x34>)
   22696:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   2269a:	4a07      	ldr	r2, [pc, #28]	; (226b8 <am_hal_itm_enable+0x38>)
   2269c:	200f      	movs	r0, #15
   2269e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   226a2:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   226a6:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   226aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   226ae:	4770      	bx	lr
   226b0:	e000edf0 	.word	0xe000edf0
   226b4:	c5acce55 	.word	0xc5acce55
   226b8:	00150511 	.word	0x00150511

000226bc <am_hal_itm_print>:
   226bc:	7803      	ldrb	r3, [r0, #0]
   226be:	b1a3      	cbz	r3, 226ea <am_hal_itm_print+0x2e>
   226c0:	4602      	mov	r2, r0
   226c2:	2300      	movs	r3, #0
   226c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   226c8:	3301      	adds	r3, #1
   226ca:	2900      	cmp	r1, #0
   226cc:	d1fa      	bne.n	226c4 <am_hal_itm_print+0x8>
   226ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   226d2:	b430      	push	{r4, r5}
   226d4:	18c1      	adds	r1, r0, r3
   226d6:	4615      	mov	r5, r2
   226d8:	f810 4b01 	ldrb.w	r4, [r0], #1
   226dc:	6813      	ldr	r3, [r2, #0]
   226de:	2b00      	cmp	r3, #0
   226e0:	d0fc      	beq.n	226dc <am_hal_itm_print+0x20>
   226e2:	4288      	cmp	r0, r1
   226e4:	702c      	strb	r4, [r5, #0]
   226e6:	d1f7      	bne.n	226d8 <am_hal_itm_print+0x1c>
   226e8:	bc30      	pop	{r4, r5}
   226ea:	4770      	bx	lr

000226ec <am_hal_tpiu_enable>:
   226ec:	b530      	push	{r4, r5, lr}
   226ee:	4a23      	ldr	r2, [pc, #140]	; (2277c <am_hal_tpiu_enable+0x90>)
   226f0:	6804      	ldr	r4, [r0, #0]
   226f2:	2300      	movs	r3, #0
   226f4:	b085      	sub	sp, #20
   226f6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   226fa:	b334      	cbz	r4, 2274a <am_hal_tpiu_enable+0x5e>
   226fc:	4b20      	ldr	r3, [pc, #128]	; (22780 <am_hal_tpiu_enable+0x94>)
   226fe:	4921      	ldr	r1, [pc, #132]	; (22784 <am_hal_tpiu_enable+0x98>)
   22700:	2001      	movs	r0, #1
   22702:	6050      	str	r0, [r2, #4]
   22704:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   22708:	a801      	add	r0, sp, #4
   2270a:	428a      	cmp	r2, r1
   2270c:	bf88      	it	hi
   2270e:	461c      	movhi	r4, r3
   22710:	f7ff fb5a 	bl	21dc8 <am_hal_clkgen_status_get>
   22714:	9b01      	ldr	r3, [sp, #4]
   22716:	1c5a      	adds	r2, r3, #1
   22718:	d02d      	beq.n	22776 <am_hal_tpiu_enable+0x8a>
   2271a:	08db      	lsrs	r3, r3, #3
   2271c:	fbb3 f3f4 	udiv	r3, r3, r4
   22720:	3b01      	subs	r3, #1
   22722:	b29b      	uxth	r3, r3
   22724:	4a15      	ldr	r2, [pc, #84]	; (2277c <am_hal_tpiu_enable+0x90>)
   22726:	4918      	ldr	r1, [pc, #96]	; (22788 <am_hal_tpiu_enable+0x9c>)
   22728:	6113      	str	r3, [r2, #16]
   2272a:	2402      	movs	r4, #2
   2272c:	f240 2301 	movw	r3, #513	; 0x201
   22730:	2000      	movs	r0, #0
   22732:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   22736:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   2273a:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   2273e:	f44f 7048 	mov.w	r0, #800	; 0x320
   22742:	f7ff fb9f 	bl	21e84 <am_hal_flash_delay>
   22746:	b005      	add	sp, #20
   22748:	bd30      	pop	{r4, r5, pc}
   2274a:	6903      	ldr	r3, [r0, #16]
   2274c:	6113      	str	r3, [r2, #16]
   2274e:	6883      	ldr	r3, [r0, #8]
   22750:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   22754:	68c3      	ldr	r3, [r0, #12]
   22756:	4d0c      	ldr	r5, [pc, #48]	; (22788 <am_hal_tpiu_enable+0x9c>)
   22758:	1e59      	subs	r1, r3, #1
   2275a:	2301      	movs	r3, #1
   2275c:	408b      	lsls	r3, r1
   2275e:	6053      	str	r3, [r2, #4]
   22760:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   22764:	6843      	ldr	r3, [r0, #4]
   22766:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   2276a:	f44f 7048 	mov.w	r0, #800	; 0x320
   2276e:	f7ff fb89 	bl	21e84 <am_hal_flash_delay>
   22772:	b005      	add	sp, #20
   22774:	bd30      	pop	{r4, r5, pc}
   22776:	2305      	movs	r3, #5
   22778:	e7d4      	b.n	22724 <am_hal_tpiu_enable+0x38>
   2277a:	bf00      	nop
   2277c:	e0040000 	.word	0xe0040000
   22780:	000f4240 	.word	0x000f4240
   22784:	001da380 	.word	0x001da380
   22788:	40020000 	.word	0x40020000
   2278c:	20636363 	.word	0x20636363
   22790:	74617473 	.word	0x74617473
   22794:	6e692065 	.word	0x6e692065
   22798:	61762064 	.word	0x61762064
   2279c:	3a65756c 	.word	0x3a65756c
   227a0:	68206425 	.word	0x68206425
   227a4:	6c646e61 	.word	0x6c646e61
   227a8:	64253a65 	.word	0x64253a65
   227ac:	78646920 	.word	0x78646920
   227b0:	0064253a 	.word	0x0064253a
   227b4:	6f67654e 	.word	0x6f67654e
   227b8:	74616974 	.word	0x74616974
   227bc:	4d206465 	.word	0x4d206465
   227c0:	25205554 	.word	0x25205554
   227c4:	00000064 	.word	0x00000064
   227c8:	48746946 	.word	0x48746946
   227cc:	6c646e61 	.word	0x6c646e61
   227d0:	6e497265 	.word	0x6e497265
   227d4:	00007469 	.word	0x00007469
   227d8:	20746946 	.word	0x20746946
   227dc:	20746f67 	.word	0x20746f67
   227e0:	20747665 	.word	0x20747665
   227e4:	00006425 	.word	0x00006425
   227e8:	20465357 	.word	0x20465357
   227ec:	20636573 	.word	0x20636573
   227f0:	20746f6e 	.word	0x20746f6e
   227f4:	69676572 	.word	0x69676572
   227f8:	72657473 	.word	0x72657473
   227fc:	00006465 	.word	0x00006465
   22800:	20465357 	.word	0x20465357
   22804:	20636573 	.word	0x20636573
   22808:	75657571 	.word	0x75657571
   2280c:	6d652065 	.word	0x6d652065
   22810:	21797470 	.word	0x21797470
   22814:	00000000 	.word	0x00000000
   22818:	58323025 	.word	0x58323025
   2281c:	00000020 	.word	0x00000020
   22820:	0000000a 	.word	0x0000000a
   22824:	00000a0a 	.word	0x00000a0a
   22828:	2e2f2e2e 	.word	0x2e2f2e2e
   2282c:	2e2e2f2e 	.word	0x2e2e2f2e
   22830:	2f2e2e2f 	.word	0x2f2e2e2f
   22834:	742f2e2e 	.word	0x742f2e2e
   22838:	64726968 	.word	0x64726968
   2283c:	7261705f 	.word	0x7261705f
   22840:	652f7974 	.word	0x652f7974
   22844:	74636178 	.word	0x74636178
   22848:	772f656c 	.word	0x772f656c
   2284c:	6f632d73 	.word	0x6f632d73
   22850:	732f6572 	.word	0x732f6572
   22854:	73772f77 	.word	0x73772f77
   22858:	6d612f66 	.word	0x6d612f66
   2285c:	2f716962 	.word	0x2f716962
   22860:	5f667377 	.word	0x5f667377
   22864:	63617274 	.word	0x63617274
   22868:	00632e65 	.word	0x00632e65
   2286c:	4f525245 	.word	0x4f525245
   22870:	48435f52 	.word	0x48435f52
   22874:	5f4b4345 	.word	0x5f4b4345
   22878:	44494f56 	.word	0x44494f56
   2287c:	5f6d6120 	.word	0x5f6d6120
   22880:	5f6c6168 	.word	0x5f6c6168
   22884:	5f656c62 	.word	0x5f656c62
   22888:	74696e69 	.word	0x74696e69
   2288c:	696c6169 	.word	0x696c6169
   22890:	3028657a 	.word	0x3028657a
   22894:	4226202c 	.word	0x4226202c
   22898:	0a29454c 	.word	0x0a29454c
   2289c:	00000000 	.word	0x00000000
   228a0:	4f525245 	.word	0x4f525245
   228a4:	48435f52 	.word	0x48435f52
   228a8:	5f4b4345 	.word	0x5f4b4345
   228ac:	44494f56 	.word	0x44494f56
   228b0:	5f6d6120 	.word	0x5f6d6120
   228b4:	5f6c6168 	.word	0x5f6c6168
   228b8:	5f656c62 	.word	0x5f656c62
   228bc:	65776f70 	.word	0x65776f70
   228c0:	6f635f72 	.word	0x6f635f72
   228c4:	6f72746e 	.word	0x6f72746e
   228c8:	4c42286c 	.word	0x4c42286c
   228cc:	41202c45 	.word	0x41202c45
   228d0:	41485f4d 	.word	0x41485f4d
   228d4:	4c425f4c 	.word	0x4c425f4c
   228d8:	4f505f45 	.word	0x4f505f45
   228dc:	5f524557 	.word	0x5f524557
   228e0:	49544341 	.word	0x49544341
   228e4:	0a294556 	.word	0x0a294556
   228e8:	00000000 	.word	0x00000000
   228ec:	4f525245 	.word	0x4f525245
   228f0:	48435f52 	.word	0x48435f52
   228f4:	5f4b4345 	.word	0x5f4b4345
   228f8:	44494f56 	.word	0x44494f56
   228fc:	5f6d6120 	.word	0x5f6d6120
   22900:	5f6c6168 	.word	0x5f6c6168
   22904:	5f656c62 	.word	0x5f656c62
   22908:	666e6f63 	.word	0x666e6f63
   2290c:	42286769 	.word	0x42286769
   22910:	202c454c 	.word	0x202c454c
   22914:	6c427326 	.word	0x6c427326
   22918:	6e6f4365 	.word	0x6e6f4365
   2291c:	29676966 	.word	0x29676966
   22920:	0000000a 	.word	0x0000000a
   22924:	4f525245 	.word	0x4f525245
   22928:	48435f52 	.word	0x48435f52
   2292c:	5f4b4345 	.word	0x5f4b4345
   22930:	44494f56 	.word	0x44494f56
   22934:	5f6d6120 	.word	0x5f6d6120
   22938:	5f6c6168 	.word	0x5f6c6168
   2293c:	5f656c62 	.word	0x5f656c62
   22940:	65776f70 	.word	0x65776f70
   22944:	6f635f72 	.word	0x6f635f72
   22948:	6f72746e 	.word	0x6f72746e
   2294c:	4c42286c 	.word	0x4c42286c
   22950:	41202c45 	.word	0x41202c45
   22954:	41485f4d 	.word	0x41485f4d
   22958:	4c425f4c 	.word	0x4c425f4c
   2295c:	4f505f45 	.word	0x4f505f45
   22960:	5f524557 	.word	0x5f524557
   22964:	2946464f 	.word	0x2946464f
   22968:	0000000a 	.word	0x0000000a
   2296c:	4f525245 	.word	0x4f525245
   22970:	48435f52 	.word	0x48435f52
   22974:	5f4b4345 	.word	0x5f4b4345
   22978:	44494f56 	.word	0x44494f56
   2297c:	5f6d6120 	.word	0x5f6d6120
   22980:	5f6c6168 	.word	0x5f6c6168
   22984:	5f656c62 	.word	0x5f656c62
   22988:	6e696564 	.word	0x6e696564
   2298c:	61697469 	.word	0x61697469
   22990:	657a696c 	.word	0x657a696c
   22994:	454c4228 	.word	0x454c4228
   22998:	00000a29 	.word	0x00000a29
   2299c:	00000004 	.word	0x00000004
   229a0:	00000020 	.word	0x00000020
   229a4:	00000020 	.word	0x00000020
   229a8:	00000002 	.word	0x00000002
   229ac:	00000000 	.word	0x00000000
   229b0:	00000032 	.word	0x00000032
   229b4:	00010101 	.word	0x00010101
   229b8:	4f525245 	.word	0x4f525245
   229bc:	48435f52 	.word	0x48435f52
   229c0:	5f4b4345 	.word	0x5f4b4345
   229c4:	44494f56 	.word	0x44494f56
   229c8:	49434820 	.word	0x49434820
   229cc:	5652445f 	.word	0x5652445f
   229d0:	5f58525f 	.word	0x5f58525f
   229d4:	4b434150 	.word	0x4b434150
   229d8:	545f5445 	.word	0x545f5445
   229dc:	4c5f4f4f 	.word	0x4c5f4f4f
   229e0:	45475241 	.word	0x45475241
   229e4:	0000000a 	.word	0x0000000a
   229e8:	203e3e3e 	.word	0x203e3e3e
   229ec:	65736552 	.word	0x65736552
   229f0:	6f632074 	.word	0x6f632074
   229f4:	656c706d 	.word	0x656c706d
   229f8:	3c206574 	.word	0x3c206574
   229fc:	00003c3c 	.word	0x00003c3c
   22a00:	203e3e3e 	.word	0x203e3e3e
   22a04:	65766441 	.word	0x65766441
   22a08:	73697472 	.word	0x73697472
   22a0c:	20676e69 	.word	0x20676e69
   22a10:	72617473 	.word	0x72617473
   22a14:	20646574 	.word	0x20646574
   22a18:	003c3c3c 	.word	0x003c3c3c
   22a1c:	203e3e3e 	.word	0x203e3e3e
   22a20:	65766441 	.word	0x65766441
   22a24:	73697472 	.word	0x73697472
   22a28:	20676e69 	.word	0x20676e69
   22a2c:	706f7473 	.word	0x706f7473
   22a30:	20646570 	.word	0x20646570
   22a34:	003c3c3c 	.word	0x003c3c3c
   22a38:	203e3e3e 	.word	0x203e3e3e
   22a3c:	6e616353 	.word	0x6e616353
   22a40:	676e696e 	.word	0x676e696e
   22a44:	61747320 	.word	0x61747320
   22a48:	64657472 	.word	0x64657472
   22a4c:	3c3c3c20 	.word	0x3c3c3c20
   22a50:	00000000 	.word	0x00000000
   22a54:	203e3e3e 	.word	0x203e3e3e
   22a58:	6e616353 	.word	0x6e616353
   22a5c:	676e696e 	.word	0x676e696e
   22a60:	6f747320 	.word	0x6f747320
   22a64:	64657070 	.word	0x64657070
   22a68:	3c3c3c20 	.word	0x3c3c3c20
   22a6c:	00000000 	.word	0x00000000
   22a70:	203e3e3e 	.word	0x203e3e3e
   22a74:	6e616353 	.word	0x6e616353
   22a78:	74616420 	.word	0x74616420
   22a7c:	65722061 	.word	0x65722061
   22a80:	76696563 	.word	0x76696563
   22a84:	66206465 	.word	0x66206465
   22a88:	206d6f72 	.word	0x206d6f72
   22a8c:	72656570 	.word	0x72656570
   22a90:	3c3c3c20 	.word	0x3c3c3c20
   22a94:	00000000 	.word	0x00000000
   22a98:	203e3e3e 	.word	0x203e3e3e
   22a9c:	6e6e6f43 	.word	0x6e6e6f43
   22aa0:	69746365 	.word	0x69746365
   22aa4:	6f206e6f 	.word	0x6f206e6f
   22aa8:	656e6570 	.word	0x656e6570
   22aac:	3c3c2064 	.word	0x3c3c2064
   22ab0:	0000003c 	.word	0x0000003c
   22ab4:	203e3e3e 	.word	0x203e3e3e
   22ab8:	6e6e6f43 	.word	0x6e6e6f43
   22abc:	69746365 	.word	0x69746365
   22ac0:	63206e6f 	.word	0x63206e6f
   22ac4:	65736f6c 	.word	0x65736f6c
   22ac8:	3c3c2064 	.word	0x3c3c2064
   22acc:	0000003c 	.word	0x0000003c
   22ad0:	203e3e3e 	.word	0x203e3e3e
   22ad4:	72696150 	.word	0x72696150
   22ad8:	20676e69 	.word	0x20676e69
   22adc:	706d6f63 	.word	0x706d6f63
   22ae0:	6574656c 	.word	0x6574656c
   22ae4:	75732064 	.word	0x75732064
   22ae8:	73656363 	.word	0x73656363
   22aec:	6c756673 	.word	0x6c756673
   22af0:	3c20796c 	.word	0x3c20796c
   22af4:	00003c3c 	.word	0x00003c3c
   22af8:	203e3e3e 	.word	0x203e3e3e
   22afc:	72696150 	.word	0x72696150
   22b00:	20676e69 	.word	0x20676e69
   22b04:	6c696166 	.word	0x6c696166
   22b08:	3c206465 	.word	0x3c206465
   22b0c:	00003c3c 	.word	0x00003c3c
   22b10:	203e3e3e 	.word	0x203e3e3e
   22b14:	6e6e6f43 	.word	0x6e6e6f43
   22b18:	69746365 	.word	0x69746365
   22b1c:	65206e6f 	.word	0x65206e6f
   22b20:	7972636e 	.word	0x7972636e
   22b24:	64657470 	.word	0x64657470
   22b28:	3c3c3c20 	.word	0x3c3c3c20
   22b2c:	00000000 	.word	0x00000000
   22b30:	203e3e3e 	.word	0x203e3e3e
   22b34:	72636e45 	.word	0x72636e45
   22b38:	69747079 	.word	0x69747079
   22b3c:	66206e6f 	.word	0x66206e6f
   22b40:	656c6961 	.word	0x656c6961
   22b44:	3c3c2064 	.word	0x3c3c2064
   22b48:	0000003c 	.word	0x0000003c
   22b4c:	203e3e3e 	.word	0x203e3e3e
   22b50:	6d6f7250 	.word	0x6d6f7250
   22b54:	75207470 	.word	0x75207470
   22b58:	20726573 	.word	0x20726573
   22b5c:	65206f74 	.word	0x65206f74
   22b60:	7265746e 	.word	0x7265746e
   22b64:	73617020 	.word	0x73617020
   22b68:	79656b73 	.word	0x79656b73
   22b6c:	3c3c3c20 	.word	0x3c3c3c20
   22b70:	00000000 	.word	0x00000000
   22b74:	203e3e3e 	.word	0x203e3e3e
   22b78:	636e6143 	.word	0x636e6143
   22b7c:	61206c65 	.word	0x61206c65
   22b80:	776f6c20 	.word	0x776f6c20
   22b84:	20726f20 	.word	0x20726f20
   22b88:	68676968 	.word	0x68676968
   22b8c:	656c6120 	.word	0x656c6120
   22b90:	3c207472 	.word	0x3c207472
   22b94:	00003c3c 	.word	0x00003c3c
   22b98:	203e3e3e 	.word	0x203e3e3e
   22b9c:	20776f4c 	.word	0x20776f4c
   22ba0:	72656c61 	.word	0x72656c61
   22ba4:	3c3c2074 	.word	0x3c3c2074
   22ba8:	0000003c 	.word	0x0000003c
   22bac:	203e3e3e 	.word	0x203e3e3e
   22bb0:	68676948 	.word	0x68676948
   22bb4:	656c6120 	.word	0x656c6120
   22bb8:	3c207472 	.word	0x3c207472
   22bbc:	00003c3c 	.word	0x00003c3c
   22bc0:	203e3e3e 	.word	0x203e3e3e
   22bc4:	73736150 	.word	0x73736150
   22bc8:	3a79656b 	.word	0x3a79656b
   22bcc:	20642520 	.word	0x20642520
   22bd0:	003c3c3c 	.word	0x003c3c3c
   22bd4:	203e3e3e 	.word	0x203e3e3e
   22bd8:	666e6f43 	.word	0x666e6f43
   22bdc:	206d7269 	.word	0x206d7269
   22be0:	756c6156 	.word	0x756c6156
   22be4:	25203a65 	.word	0x25203a65
   22be8:	3c3c2064 	.word	0x3c3c2064
   22bec:	0000003c 	.word	0x0000003c
   22bf0:	203e3e3e 	.word	0x203e3e3e
   22bf4:	49535352 	.word	0x49535352
   22bf8:	6425203a 	.word	0x6425203a
   22bfc:	6d426420 	.word	0x6d426420
   22c00:	003c3c3c 	.word	0x003c3c3c
   22c04:	65657246 	.word	0x65657246
   22c08:	534f5452 	.word	0x534f5452
   22c0c:	74694620 	.word	0x74694620
   22c10:	61784520 	.word	0x61784520
   22c14:	656c706d 	.word	0x656c706d
   22c18:	0000000a 	.word	0x0000000a
   22c1c:	20465357 	.word	0x20465357
   22c20:	656d6954 	.word	0x656d6954
   22c24:	00000072 	.word	0x00000072
   22c28:	6f6d654d 	.word	0x6f6d654d
   22c2c:	70207972 	.word	0x70207972
   22c30:	206c6f6f 	.word	0x206c6f6f
   22c34:	74207369 	.word	0x74207369
   22c38:	73206f6f 	.word	0x73206f6f
   22c3c:	6c6c616d 	.word	0x6c6c616d
   22c40:	20796220 	.word	0x20796220
   22c44:	0a0d6425 	.word	0x0a0d6425
   22c48:	00000000 	.word	0x00000000
   22c4c:	69646152 	.word	0x69646152
   22c50:	7361546f 	.word	0x7361546f
   22c54:	73203a6b 	.word	0x73203a6b
   22c58:	70757465 	.word	0x70757465
   22c5c:	00000a0d 	.word	0x00000a0d
   22c60:	72617453 	.word	0x72617453
   22c64:	676e6974 	.word	0x676e6974
   22c68:	63697720 	.word	0x63697720
   22c6c:	72746e65 	.word	0x72746e65
   22c70:	74206369 	.word	0x74206369
   22c74:	65636172 	.word	0x65636172
   22c78:	000a0a3a 	.word	0x000a0a3a
   22c7c:	6e6e7552 	.word	0x6e6e7552
   22c80:	20676e69 	.word	0x20676e69
   22c84:	75746573 	.word	0x75746573
   22c88:	61742070 	.word	0x61742070
   22c8c:	2e736b73 	.word	0x2e736b73
   22c90:	0a0d2e2e 	.word	0x0a0d2e2e
   22c94:	00000000 	.word	0x00000000
   22c98:	69646152 	.word	0x69646152
   22c9c:	7361546f 	.word	0x7361546f
   22ca0:	0000006b 	.word	0x0000006b
   22ca4:	75746553 	.word	0x75746553
   22ca8:	00000070 	.word	0x00000070
   22cac:	42667357 	.word	0x42667357
   22cb0:	6c416675 	.word	0x6c416675
   22cb4:	20636f6c 	.word	0x20636f6c
   22cb8:	6c696166 	.word	0x6c696166
   22cbc:	6c206465 	.word	0x6c206465
   22cc0:	253a6e65 	.word	0x253a6e65
   22cc4:	00000075 	.word	0x00000075
   22cc8:	454c4449 	.word	0x454c4449
   22ccc:	00000000 	.word	0x00000000
   22cd0:	20726d54 	.word	0x20726d54
   22cd4:	00637653 	.word	0x00637653
   22cd8:	61766e49 	.word	0x61766e49
   22cdc:	2064696c 	.word	0x2064696c
   22ce0:	61204d44 	.word	0x61204d44
   22ce4:	72657664 	.word	0x72657664
   22ce8:	69736974 	.word	0x69736974
   22cec:	6d20676e 	.word	0x6d20676e
   22cf0:	3b65646f 	.word	0x3b65646f
   22cf4:	646f6d20 	.word	0x646f6d20
   22cf8:	6f632065 	.word	0x6f632065
   22cfc:	6769666e 	.word	0x6769666e
   22d00:	64657275 	.word	0x64657275
   22d04:	20736120 	.word	0x20736120
   22d08:	65747865 	.word	0x65747865
   22d0c:	6465646e 	.word	0x6465646e
   22d10:	00000000 	.word	0x00000000

00022d14 <attFcnDefault>:
   22d14:	0000c505 0000c501 0000c501 0000c503     ................

00022d24 <attWsfChUuid>:
   22d24:	2a9d2a9e                                         .*

00022d26 <attWmChUuid>:
   22d26:	181d2a9d                                         .*

00022d28 <attWssSvcUuid>:
   22d28:	2a9f181d                                         ..

00022d2a <attUcpChUuid>:
   22d2a:	2a9a2a9f                                         .*

00022d2c <attUiChUuid>:
   22d2c:	2a992a9a                                         .*

00022d2e <attDbciChUuid>:
   22d2e:	2ac92a99                                         .*

00022d30 <attRpaoChUuid>:
   22d30:	2a5f2ac9                                         .*

00022d32 <attPlxcmChUuid>:
   22d32:	2a5e2a5f                                         _*

00022d34 <attPlxscmChUuid>:
   22d34:	2a602a5e                                         ^*

00022d36 <attPlxfChUuid>:
   22d36:	2a5d2a60                                         `*

00022d38 <attSlChUuid>:
   22d38:	2a5b2a5d                                         ]*

00022d3a <attCsmChUuid>:
   22d3a:	2a5c2a5b                                         [*

00022d3c <attCsfChUuid>:
   22d3c:	2a632a5c                                         \*

00022d3e <attCpmChUuid>:
   22d3e:	2a652a63                                         c*

00022d40 <attCpfChUuid>:
   22d40:	2a532a65                                         e*

00022d42 <attRsmChUuid>:
   22d42:	2a542a53                                         S*

00022d44 <attRsfChUuid>:
   22d44:	2aa62a54                                         T*

00022d46 <attCarChUuid>:
   22d46:	2a522aa6                                         .*

00022d48 <attRacpChUuid>:
   22d48:	2a512a52                                         R*

00022d4a <attGlfChUuid>:
   22d4a:	2a502a51                                         Q*

00022d4c <attPnpChUuid>:
   22d4c:	2a4f2a50                                         P*

00022d4e <attSiwChUuid>:
   22d4e:	2a4e2a4f                                         O*

00022d50 <attHidPmChUuid>:
   22d50:	2a4d2a4e                                         N*

00022d52 <attHidRepChUuid>:
   22d52:	2a4c2a4d                                         M*

00022d54 <attHidcpChUuid>:
   22d54:	2a4b2a4c                                         L*

00022d56 <attHidRmChUuid>:
   22d56:	2a4a2a4b                                         K*

00022d58 <attHidiChUuid>:
   22d58:	2a322a4a                                         J*

00022d5a <attHidBkoChUuid>:
   22d5a:	2a222a32                                         2*

00022d5c <attHidBkiChUuid>:
   22d5c:	2a212a22                                         "*

00022d5e <attHidBmiChUuid>:
   22d5e:	2a492a21                                         !*

00022d60 <attBpfChUuid>:
   22d60:	2a482a49                                         I*

00022d62 <attSuacChUuid>:
   22d62:	2a472a48                                         H*

00022d64 <attSnacChUuid>:
   22d64:	2a462a47                                         G*

00022d66 <attNaChUuid>:
   22d66:	2a452a46                                         F*

00022d68 <attUasChUuid>:
   22d68:	2a442a45                                         E*

00022d6a <attAncpChUuid>:
   22d6a:	2a432a44                                         D*

00022d6c <attAcChUuid>:
   22d6c:	2a422a43                                         C*

00022d6e <attAcbmChUuid>:
   22d6e:	2a412a42                                         B*

00022d70 <attRsChUuid>:
   22d70:	2a402a41                                         A*

00022d72 <attRcpChUuid>:
   22d72:	2a3f2a40                                         @*

00022d74 <attAsChUuid>:
   22d74:	2a3e2a3f                                         ?*

00022d76 <attNwaChUuid>:
   22d76:	2a3d2a3e                                         >*

00022d78 <attStrChUuid>:
   22d78:	2a3c2a3d                                         =*

00022d7a <attStcChUuid>:
   22d7a:	2a3b2a3c                                         <*

00022d7c <attSrChUuid>:
   22d7c:	2a3a2a3b                                         ;*

00022d7e <attRemChUuid>:
   22d7e:	2a392a3a                                         :*

00022d80 <attHrcpChUuid>:
   22d80:	2a382a39                                         9*

00022d82 <attBslChUuid>:
   22d82:	2a372a38                                         8*

00022d84 <attHrmChUuid>:
   22d84:	2a362a37                                         7*

00022d86 <attIcpChUuid>:
   22d86:	2a352a36                                         6*

00022d88 <attBpmChUuid>:
   22d88:	2a342a35                                         5*

00022d8a <attGlmcChUuid>:
   22d8a:	2a332a34                                         4*

00022d8c <attHbmiChUuid>:
   22d8c:	2a312a33                                         3*

00022d8e <attVidChUuid>:
   22d8e:	2a302a31                                         1*

00022d90 <attP3dChUuid>:
   22d90:	2a2f2a30                                         0*

00022d92 <attP2dChUuid>:
   22d92:	2a2e2a2f                                         /*

00022d94 <attLongChUuid>:
   22d94:	2a2d2a2e                                         .*

00022d96 <attLatChUuid>:
   22d96:	2a2c2a2d                                         -*

00022d98 <attElChUuid>:
   22d98:	2a2b2a2c                                         ,*

00022d9a <attCtChUuid>:
   22d9a:	2a2a2a2b                                         +*

00022d9c <attIeeeChUuid>:
   22d9c:	2a292a2a                                         **

00022d9e <attMfnsChUuid>:
   22d9e:	2a282a29                                         )*

00022da0 <attSrsChUuid>:
   22da0:	2a272a28                                         (*

00022da2 <attHrsChUuid>:
   22da2:	2a262a27                                         '*

00022da4 <attFrsChUuid>:
   22da4:	2a252a26                                         &*

00022da6 <attSnsChUuid>:
   22da6:	2a242a25                                         %*

00022da8 <attMnsChUuid>:
   22da8:	2a232a24                                         $*

00022daa <attSidChUuid>:
   22daa:	2a202a23                                         #*

00022dac <attTfahChUuid>:
   22dac:	2a1f2a20                                          *

00022dae <attTcelChUuid>:
   22dae:	2a1e2a1f                                         .*

00022db0 <attItChUuid>:
   22db0:	2a1d2a1e                                         .*

00022db2 <attTtChUuid>:
   22db2:	2a1c2a1d                                         .*

00022db4 <attTmChUuid>:
   22db4:	2a1b2a1c                                         .*

00022db6 <attBlsChUuid>:
   22db6:	2a1a2a1b                                         .*

00022db8 <attBpsChUuid>:
   22db8:	2a192a1a                                         .*

00022dba <attBlChUuid>:
   22dba:	2a182a19                                         .*

00022dbc <attGlmChUuid>:
   22dbc:	2a172a18                                         .*

00022dbe <attTusChUuid>:
   22dbe:	2a162a17                                         .*

00022dc0 <attTucpChUuid>:
   22dc0:	2a152a16                                         .*

00022dc2 <attTbChUuid>:
   22dc2:	2a142a15                                         .*

00022dc4 <attRtiChUuid>:
   22dc4:	2a132a14                                         .*

00022dc6 <attTsChUuid>:
   22dc6:	2a122a13                                         .*

00022dc8 <attTaChUuid>:
   22dc8:	2a112a12                                         .*

00022dca <attTdstChUuid>:
   22dca:	2a102a11                                         .*

00022dcc <attStzChUuid>:
   22dcc:	2a0f2a10                                         .*

00022dce <attLtiChUuid>:
   22dce:	2a0e2a0f                                         .*

00022dd0 <attTzChUuid>:
   22dd0:	2a0d2a0e                                         .*

00022dd2 <attDstoChUuid>:
   22dd2:	2a0c2a0d                                         .*

00022dd4 <attEt256ChUuid>:
   22dd4:	2a0b2a0c                                         .*

00022dd6 <attEt100ChUuid>:
   22dd6:	2a0a2a0b                                         .*

00022dd8 <attDdtChUuid>:
   22dd8:	2a092a0a                                         .*

00022dda <attDwChUuid>:
   22dda:	2a082a09                                         .*

00022ddc <attDtChUuid>:
   22ddc:	2a072a08                                         .*

00022dde <attTxpChUuid>:
   22dde:	2a062a07                                         .*

00022de0 <attAlChUuid>:
   22de0:	2a052a06                                         .*

00022de2 <attScChUuid>:
   22de2:	2a042a05                                         .*

00022de4 <attPpcpChUuid>:
   22de4:	2a032a04                                         .*

00022de6 <attRaChUuid>:
   22de6:	2a022a03                                         .*

00022de8 <attPpfChUuid>:
   22de8:	2a012a02                                         .*

00022dea <attApChUuid>:
   22dea:	2a002a01                                         .*

00022dec <attDnChUuid>:
   22dec:	29082a00                                         .*

00022dee <attHidRimUuid>:
   22dee:	29072908                                         .)

00022df0 <attHidErmUuid>:
   22df0:	29062907                                         .)

00022df2 <attValRangeUuid>:
   22df2:	29052906                                         .)

00022df4 <attAggFmtUuid>:
   22df4:	29042905                                         .)

00022df6 <attChPresFmtUuid>:
   22df6:	29032904                                         .)

00022df8 <attSrvChCfgUuid>:
   22df8:	29022903                                         .)

00022dfa <attCliChCfgUuid>:
   22dfa:	29012902                                         .)

00022dfc <attChUserDescUuid>:
   22dfc:	29002901                                         .)

00022dfe <attChExtUuid>:
   22dfe:	28032900                                         .)

00022e00 <attChUuid>:
   22e00:	28022803                                         .(

00022e02 <attIncUuid>:
   22e02:	28012802                                         .(

00022e04 <attSecSvcUuid>:
   22e04:	28002801                                         .(

00022e06 <attPrimSvcUuid>:
   22e06:	181c2800                                         .(

00022e08 <attUdsSvcUuid>:
   22e08:	1822181c                                         ..

00022e0a <attPlxsSvcUuid>:
   22e0a:	18131822                                         ".

00022e0c <attSpsSvcUuid>:
   22e0c:	18121813                                         ..

00022e0e <attHidSvcUuid>:
   22e0e:	18111812                                         ..

00022e10 <attAnsSvcUuid>:
   22e10:	18101811                                         ..

00022e12 <attBpsSvcUuid>:
   22e12:	180f1810                                         ..

00022e14 <attBasSvcUuid>:
   22e14:	180e180f                                         ..

00022e16 <attPassSvcUuid>:
   22e16:	180d180e                                         ..

00022e18 <attHrsSvcUuid>:
   22e18:	180c180d                                         ..

00022e1a <attWdsSvcUuid>:
   22e1a:	180b180c                                         ..

00022e1c <attNwaSvcUuid>:
   22e1c:	180a180b                                         ..

00022e1e <attDisSvcUuid>:
   22e1e:	1809180a                                         ..

00022e20 <attHtsSvcUuid>:
   22e20:	18081809                                         ..

00022e22 <attGlsSvcUuid>:
   22e22:	18071808                                         ..

00022e24 <attNdcsSvcUuid>:
   22e24:	18061807                                         ..

00022e26 <attRtusSvcUuid>:
   22e26:	18051806                                         ..

00022e28 <attCtsSvcUuid>:
   22e28:	18041805                                         ..

00022e2a <attTpsSvcUuid>:
   22e2a:	18031804                                         ..

00022e2c <attLlsSvcUuid>:
   22e2c:	18021803                                         ..

00022e2e <attIasSvcUuid>:
   22e2e:	18011802                                         ..

00022e30 <attGattSvcUuid>:
   22e30:	18001801                                         ..

00022e32 <attGapSvcUuid>:
   22e32:	00001800                                         ..

00022e34 <attcSendReqTbl>:
   22e34:	00000000 0000c7d7 0000c8f5 0000c8f5     ................
   22e44:	0000c8f5 0000c6ed 0000c8f5 0000c6ed     ................
   22e54:	0000c8f5 0000c6ed 0000c809 0000c847     ............G...
   22e64:	0000c6ed                                ....

00022e68 <attcFcnIf>:
   22e68:	0000c78d 0000c501 0000ca35 0000c979     ........5...y...

00022e78 <attcProcRspTbl>:
   22e78:	0000cb31 0000cc25 0000cb5d 0000cf19     1...%...].......
   22e88:	0000cb5d 0000cc1d 0000cf8b 0000cc1d     ]...............
   22e98:	0000cb5d 0000cc1f 00000000 0000d13f     ]...........?...
   22ea8:	0000cc1f                                ....

00022eac <attsIndFcnIf>:
   22eac:	0000c505 0000d481 0000d49b 0000d641     ............A...

00022ebc <attsMinPduLen>:
   22ebc:	07050300 05050305 05030305 01000002     ................
   22ecc:	0000000f                                ....

00022ed0 <attsFcnIf>:
   22ed0:	0000d7a3 0000d735 0000d741 0000d831     ....5...A...1...
   22ee0:	00002801                                .(..

00022ee4 <dmAdvAct>:
   22ee4:	0000ee2d 0000ee4d 0000ee6d 0000ee91     -...M...m.......
   22ef4:	0000ed8d 0000ef61 0000eeb5              ....a.......

00022f00 <dmAdvFcnIf>:
   22f00:	0000eded 0000eeb9 0000ed8f              ............

00022f0c <dmConnSpecDefaults>:
   22f0c:	00280018 07d00000 00000000              ..(.........

00022f18 <dmConnFcnIf>:
   22f18:	0000f015 0000f24d 0000f2e5              ....M.......

00022f24 <dmConn2FcnIf>:
   22f24:	0000faed 0000f121 0000f2fd              ....!.......

00022f30 <dmConnActSetMain>:
   22f30:	0000eff9 0000f00d 0000f391 0000f3fd     ................
   22f40:	0000f40b 0000effb                       ........

00022f48 <dmConnActSetSlave>:
   22f48:	0000f915 0000f933 0000f831 0000f949     ....3...1...I...
   22f58:	0000f95f 0000f88d                       _.......

00022f60 <dmConnStateTbl>:
   22f60:	00001001 00002002 00000000 00000000     ..... ..........
   22f70:	00002303 00000000 00010000 00011104     .#..............
   22f80:	00010001 00010001 02030300 00010300     ................
   22f90:	00010001 21000002 00020002 00020002     .......!........
   22fa0:	24000002 24002303 00020002 00030002     ...$.#.$........
   22fb0:	00030104 22031203 25031303 00030003     ......."...%....
   22fc0:	05030400 05030003 00040004 00040004     ................
   22fd0:	00040004 04000004 04000104 00040004     ................
   22fe0:	00000004                                ....

00022fe4 <dmDevFcnIf>:
   22fe4:	0000faed 0000f9c9 0000fa2d              ........-...

00022ff0 <dmHciToIdTbl>:
   22ff0:	03030307 04020303 04040404 05050505     ................
   23000:	07070705 06060607 05060606 07040405     ................
   23010:	04070407 04050504 09090904 00000202     ................
   23020:	070b0b0b 00020002 0000000a              ............

0002302c <dmFcnDefault>:
   2302c:	0000faed 0000faef 0000faef              ............

00023038 <dmEvtCbackLen>:
   23038:	00040004 000c0004 00040004 0024001c     ..............$.
   23048:	000e000a 00040006 00040006 00220006     ..............".
   23058:	00080010 00240006 00140064 00040006     ......$.d.......
   23068:	0006000a 00060006 000c000c 000e0006     ................
   23078:	0008000e 000a0006 000a0006 000a0006     ................
   23088:	0004000c 00200004 00060006 00060016     ...... .........
   23098:	00100010 00440004 00040046              ......D.F...

000230a4 <dmPrivAct>:
   230a4:	0000fcc7 0000fc41 0000fc79 0000fca1     ....A...y.......
   230b4:	0000fcb9 0000fd29 0000fcbd              ....).......

000230c0 <dmPrivFcnIf>:
   230c0:	0000fc2d 0000fd3d 0000fc19              -...=.......

000230cc <dmSecFcnIf>:
   230cc:	0000faed 00010029 0000ff51 d4f6493f     ....)...Q...?I..
   230dc:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   230ec:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   230fc:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   2310c:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   2311c:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   2312c:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00023138 <dmSecLescFcnIf>:
   23138:	0000faed 0000faef 000101a1              ............

00023144 <smpPktLenTbl>:
   23144:	11070700 0b110211 02110811 00021141     ............A...

00023154 <CSWTCH.23>:
   23154:	00025c80 00025fe4 00025c8d 00025c9c     .\..._...\...\..
   23164:	00025ca9 00025cba 00025cc2 00025cd5     .\...\...\...\..
   23174:	00025ce5 00025cf7 00025d05 00025d12     .\...\...]...]..
   23184:	00025d24 00025d35 00025d46 00025d52     $]..5]..F]..R]..
   23194:	00025d5b 00025d66 00025d70 00025d7c     []..f]..p]..|]..
   231a4:	00025d84 00025d95 00025da7 00025db9     .]...]...]...]..
   231b4:	00025dc6 00025dd2 00025dde 00025dec     .]...]...]...]..
   231c4:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

000231d4 <smpScF5Key>:
   231d4:	656c7462                                btle

000231d8 <smpiScSmIf>:
   231d8:	00023278 00023440 0002342f              x2..@4../4..

000231e4 <CSWTCH.2>:
   231e4:	00025e07 00025fe6 00025e0e 00025e1c     .^..._...^...^..
   231f4:	00025e27 00025e31 00025e3f 00025e4f     '^..1^..?^..O^..
   23204:	00025e5b 00025e6a 00025e79 00025e8a     [^..j^..y^...^..
   23214:	00025e98 00025ea2 00025eab 00025eb5     .^...^...^...^..
   23224:	00025ec0 00025ecc 00025edc 00025dfd     .^...^...^...]..
   23234:	00025eec 00025efb 00025f0c 00025f1a     .^...^..._..._..
   23244:	00025f27 00025f34 00025f46 00025f53     '_..4_..F_..S_..
   23254:	00025f60 00025f6d 00025f78 00025f84     `_..m_..x_..._..
   23264:	00025f95 00025fa6 00025fb1 00025fbb     ._..._..._..._..
   23274:	00025fc6                                ._..

00023278 <smpiScStateTbl>:
   23278:	0002341a 00023414 0002340b 00023405     .4...4...4...4..
   23288:	000233ff 000233f3 000233ed 000233e7     .3...3...3...3..
   23298:	000233e1 000233db 000233d5 000233c9     .3...3...3...3..
   232a8:	000233c3 000233bd 000233b7 000233b1     .3...3...3...3..
   232b8:	000233a8 000233a2 0002339c 00023396     .3...3...3...3..
   232c8:	00023390 0002338a 00023384 0002337e     .3...3...3..~3..
   232d8:	00023378 00023372 0002336c 00023366     x3..r3..l3..f3..
   232e8:	00023360 0002335a 00023354 0002334e     `3..Z3..T3..N3..
   232f8:	00023348 0002333f 00023330 00023321     H3..?3..03..!3..
   23308:	0002330c                                .3..

0002330c <smpiScStateTblAttempts>:
   2330c:	060b000f 01010a24 01000a0d 07010003     ....$...........
   2331c:	00000024 15230600                                $....

00023321 <smpiScStateTblKeyDist>:
   23321:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

00023330 <smpiScStateTblEncrypt>:
   23330:	09142308 22030200 03001c00 0b000000              .#.....".......

0002333f <smpiScStateTblStkCalc>:
   2333f:	0d13220b 00000924 12210b00                       ."..$....

00023348 <smpiScStateTblCnfVerCalc2>:
   23348:	0012210b 200b0000                                .!....

0002334e <smpiScStateTblCnfVerCalc1>:
   2334e:	0008200b 1f060000                                . ....

00023354 <smpiScStateTblPairRand>:
   23354:	00071f06 1e060000                                ......

0002335a <smpiScStateTblPairCnf>:
   2335a:	00111e06 1d0b0000                                ......

00023360 <smpiScStateTblCnfCalc2>:
   23360:	00061d0b 1c0b0000                                ......

00023366 <smpiScStateTblCnfCalc1>:
   23366:	00051c0b 1b040000                                ......

0002336c <smpiScStateTblLegacyPin>:
   2336c:	00041b04 22060000                                ......

00023372 <smpiScStateTblVerifyDHCheck>:
   23372:	00302206 191b0000                                ."0...

00023378 <smpiScStateTblDhCalcF6Eb>:
   23378:	002f191b 181b0000                                ../...

0002337e <smpiScStateTblDhCalcF6Ea>:
   2337e:	002e181b 171b0000                                ......

00023384 <smpiScStateTblCalcF5LTK>:
   23384:	002d171b 161b0000                                ..-...

0002338a <smpiScStateTblCalcF5MacKey>:
   2338a:	002c161b 151b0000                                ..,...

00023390 <smpiScStateTblCalcF5TKey>:
   23390:	002b151b 14180000                                ..+...

00023396 <smpiScStateTblCalcDHKey>:
   23396:	002a1418 13060000                                ..*...

0002339c <smpiScStateTblOobWaitRand>:
   2339c:	00281306 121b0000                                ..(...

000233a2 <smpiScStateTblOobSendRand>:
   233a2:	0027121b 0c190000                                ..'...

000233a8 <smpiScStateTblPasskeyRepeat>:
   233a8:	1a210c19 00002913 25101b00                       ..!..)...

000233b1 <smpiScStateTblPasskeyCheck>:
   233b1:	0025101b 0f060000                                ..%...

000233b7 <smpiScStateTblPasskeyRand>:
   233b7:	00220f06 0e060000                                .."...

000233bd <smpiScStateTblPasskeyCnf>:
   233bd:	00240e06 0d1b0000                                ..$...

000233c3 <smpiScStateTblPasskeyCalc>:
   233c3:	00230d1b 0b060000                                ..#...

000233c9 <smprScStateTblPasskeyKeypress>:
   233c9:	161f0b06 0c04200b 00000021              ..... ..!...

000233d5 <smpiScStateTblJwNcWaitUser>:
   233d5:	00291315 0a1b0000                                ..)...

000233db <smpiScStateTblJwNcCheck2>:
   233db:	001d0a1b 091b0000                                ......

000233e1 <smpiScStateTblJwNcCheck1>:
   233e1:	001c091b 08060000                                ......

000233e7 <smpiScStateTblJwNcRand>:
   233e7:	001b0806 07060000                                ......

000233ed <smpiScStateTblJwNcWaitCnf>:
   233ed:	001a0706 06120000                                ......

000233f3 <smpiScStateTblAuthSelect>:
   233f3:	13190612 11141e0b 00000026              ........&...

000233ff <smpiScStateTblPubKey>:
   233ff:	00180506 04040000                                ......

00023405 <smpiScStateTblLescPin>:
   23405:	00170404 03100000                                ......

0002340b <smpiScStateTblModeSelect>:
   2340b:	11000310 0000001a 10020600                       .........

00023414 <smpiScStateTblPairRsp>:
   23414:	00100206 01010000                                ......

0002341a <smpiScStateTblIdle>:
   2341a:	0a0d0101 00030100 0f00060e 0f000007     ................
   2342a:	00000000 02000a00                                .....

0002342f <smpiScStateTblCommon>:
   2342f:	0702000a 00030200 02000f03 00000000     ................
	...

00023440 <smpiScActionTbl>:
   23440:	00011999 00011397 000113a9 000113bf     ................
   23450:	00011a5b 00011a7d 00011a85 00011acf     [...}...........
   23460:	00011af3 00011d2d 00011d51 00011d59     ....-...Q...Y...
   23470:	00011d7b 00011f4d 00011fbd 00011fd1     {...M...........
   23480:	00011ffb 00012061 000120b7 00012119     ....a ... ...!..
   23490:	0001215d 000121e1 0001220f 00012239     ]!...!..."..9"..
   234a0:	00012235 00012243 00012279 000122a5     5"..C"..y"..."..
   234b0:	000122c7 00011517 00011439 0001155b     ."......9...[...
   234c0:	00011591 00012303 0001237d 000123bd     .....#..}#...#..
   234d0:	000123c3 000123c7 00012417 00012479     .#...#...$..y$..
   234e0:	000124cf 000115d1 00011645 000116a5     .$......E.......
   234f0:	00011715 00011785 000117f3 000124f1     .............$..
   23500:	0001251b                                .%..

00023504 <smprScSmIf>:
   23504:	000235a4 0002377c 0002376a              .5..|7..j7..

00023510 <CSWTCH.2>:
   23510:	00025fdb 00025fe2 00025ff1 00025fff     ._..._..._..._..
   23520:	00025fd1 00026009 00026017 00026024     ._...`...`..$`..
   23530:	00026035 00026044 00026055 00025fd1     5`..D`..U`..._..
   23540:	00026063 00026071 0002607b 00026085     c`..q`..{`...`..
   23550:	00026090 0002609c 000260ac 000260bc     .`...`...`...`..
   23560:	00025fd1 000260cc 000260db 000260ec     ._...`...`...`..
   23570:	000260fa 00026107 00026114 00026121     .`...a...a..!a..
   23580:	0002612e 0002613b 00026148 00026154     .a..;a..Ha..Ta..
   23590:	00026165 00026176 00026181 0002618b     ea..va...a...a..
   235a0:	00026196                                .a..

000235a4 <smprScStateTbl>:
   235a4:	0002374f 00023749 00023740 00023734     O7..I7..@7..47..
   235b4:	0002373a 00023728 00023722 0002371c     :7..(7.."7...7..
   235c4:	00023716 00023710 00023701 000236fb     .7...7...7...6..
   235d4:	000236f5 000236ef 000236e9 000236e3     .6...6...6...6..
   235e4:	000236da 000236ce 000236d4 000236c8     .6...6...6...6..
   235f4:	000236c2 000236bc 000236b6 000236b0     .6...6...6...6..
   23604:	000236aa 000236a4 0002369b 00023692     .6...6...6...6..
   23614:	0002368c 00023686 00023680 0002367a     .6...6...6..z6..
   23624:	00023674 0002366b 0002365c 0002364d     t6..k6..\6..M6..
   23634:	00023638                                86..

00023638 <smprScStateTblAttempts>:
   23638:	060e000f 00050f24 01000a10 07010003     ....$...........
   23648:	00000024 33230600                                $....

0002364d <smprScStateTblKeyDist>:
   2364d:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

0002365c <smprScStateTblEncrypt>:
   2365c:	09322308 22030200 03001c00 0b000000              .#2....".......

0002366b <smprScStateTblStkCalc>:
   2366b:	0d31220b 00000c24 30210b00                       ."1.$....

00023674 <smprStateTblCnfVerCalc2>:
   23674:	0030210b 200b0000                                .!0...

0002367a <smprStateTblCnfVerCalc1>:
   2367a:	000b200b 1f060000                                . ....

00023680 <smprStateTblPairRand>:
   23680:	000a1f06 1e0b0000                                ......

00023686 <smprStateTblCnfCalc2>:
   23686:	00091e0b 1d0b0000                                ......

0002368c <smprStateTblCnfCalc1>:
   2368c:	00081d0b 1c040000                                ......

00023692 <smprStateTblPinPair2>:
   23692:	06071c04 00002f1c 051b0400                       ...../...

0002369b <smprStateTblPinPair1>:
   2369b:	06051b04 0000151b 2e221b00                       .........

000236a4 <smprScStateTblDhCalcF6Eb>:
   236a4:	002e221b 191b0000                                ."....

000236aa <smprScStateTblDhCalcF6Ea>:
   236aa:	002d191b 181b0000                                ..-...

000236b0 <smprScStateTblCalcF5LTK>:
   236b0:	002c181b 171b0000                                ..,...

000236b6 <smprScStateTblCalcF5MacKey>:
   236b6:	002b171b 161b0000                                ..+...

000236bc <smprScStateTblCalcF5TKey>:
   236bc:	002a161b 15180000                                ..*...

000236c2 <smprScStateTblCalcDHKey>:
   236c2:	00291518 14060000                                ..)...

000236c8 <smprScStateTblWaitDhCheck>:
   236c8:	00281406 131b0000                                ..(...

000236ce <smprScStateTblOobSendRand>:
   236ce:	0026131b 11060000                                ..&...

000236d4 <smprScStateTblOobWaitRand>:
   236d4:	00251106 0c190000                                ..%...

000236da <smprScStateTblPasskeyRepeat>:
   236da:	1a000c19 00002713 23101b00                       .....'...

000236e3 <smprScStateTblPasskeyCheck>:
   236e3:	0023101b 0f060000                                ..#...

000236e9 <smprScStateTblPasskeyRand>:
   236e9:	00220f06 0e1b0000                                .."...

000236ef <smprScStateTblPasskeyCalc>:
   236ef:	00210e1b 0d060000                                ..!...

000236f5 <smprScStateTblPasskeyWaitCnf>:
   236f5:	001e0d06 0d040000                                ......

000236fb <smprScStateTblPassWaitAuthRsp>:
   236fb:	001f0d04 0a060000                                ......

00023701 <smprScStateTblPassKeyKeypress>:
   23701:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

00023710 <smprScStateTblJwNcWaitUser>:
   23710:	00271315 091b0000                                ..'...

00023716 <smprScStateTblJwNcCalcG2>:
   23716:	0019091b 08060000                                ......

0002371c <smprScStateTblJwNcWaitRand>:
   2371c:	00180806 071b0000                                ......

00023722 <smprScStateTblJwNcSetup>:
   23722:	0017071b 06120000                                ......

00023728 <smprScStateTblAuthSelect>:
   23728:	13160612 12141a0a 00000024              ........$...

00023734 <smprScStateTblPubKey>:
   23734:	00040506 03040000                                ......

0002373a <smprScStateTblLescPin>:
   2373a:	00060304 04100000                                ......

00023740 <smprScStateTblModeSelect>:
   23740:	11000410 0000001a 14020200                       .........

00023749 <smprScStateTblApiPairRsp>:
   23749:	00140202 00050000                                ......

0002374f <smprScStateTblIdle>:
   2374f:	0a100005 00080100 12000912 07130106     ................
   2375f:	00031100 00000f01 0a000000                       ...........

0002376a <smprScStateTblCommon>:
   2376a:	0702000a 00030200 02000f03 00000000     ................
	...

0002377c <smprScActionTbl>:
   2377c:	00011999 00011397 000113a9 000113bf     ................
   2378c:	000128e5 00011a33 00012895 00011a5b     .(..3....(..[...
   2379c:	00011a7d 00011a85 00011acf 00011af3     }...............
   237ac:	00011d2d 00011d7b 00011d59 00011d51     -...{...Y...Q...
   237bc:	00012581 000125ab 000125b7 000125bf     .%...%...%...%..
   237cc:	00012631 000126c1 000128fb 0001293d     1&...&...(..=)..
   237dc:	00012943 00011517 00011439 0001155b     C)......9...[...
   237ec:	00011591 00012963 000129b5 000129cb     ....c)...)...)..
   237fc:	00012973 000129e1 000129e5 00012a21     s)...)...)..!*..
   2380c:	00012a8b 00012a93 00012b01 00012b59     .*...*...+..Y+..
   2381c:	00012b71 00011645 000116a5 00011715     q+..E...........
   2382c:	00011785 000117f3 00012b93 000126e3     .........+...&..
   2383c:	00012705 00012761 00012829 0001286b     .'..a'..)(..k(..
   2384c:	000127c1                                .'..

00023850 <smprSmIf>:
   23850:	0002385c 0002392c 0002391a              \8..,9...9..

0002385c <smprStateTbl>:
   2385c:	000238ff 000238f9 000238f0 000238e7     .8...8...8...8..
   2386c:	000238e1 000238db 000238d5 000238cf     .8...8...8...8..
   2387c:	000238c9 000238c0 000238b4 000238a5     .8...8...8...8..
   2388c:	00023890                                .8..

00023890 <smprStateTblAttempts>:
   23890:	060c000f 00050b0c 01000a0e 07010003     ................
   238a0:	0000000c 180b0c00                                .....

000238a5 <smprStateTblKeyDist>:
   238a5:	06180b0c 000e190b 000b030d 08000000              ...............

000238b4 <smprStateTblEncrypt>:
   238b4:	09170b08 0a030200 00000000              ............

000238c0 <smprStateTblStkCalc>:
   238c0:	0d160a0b 00000a0c 15090b00                       .........

000238c9 <smprStateTblCnfVerCalc2>:
   238c9:	0015090b 080b0000                                ......

000238cf <smprStateTblCnfVerCalc1>:
   238cf:	0009080b 07060000                                ......

000238d5 <smprStateTblPairRand>:
   238d5:	00080706 060b0000                                ......

000238db <smprStateTblCnfCalc2>:
   238db:	0007060b 050b0000                                ......

000238e1 <smprStateTblCnfCalc1>:
   238e1:	0006050b 04040000                                ......

000238e7 <smprStateTblPinPair2>:
   238e7:	06050404 00001404 04030400                       .........

000238f0 <smprStateTblPinPair1>:
   238f0:	06040304 00001303 12020200                       .........

000238f9 <smprStateTblApiPairRsp>:
   238f9:	00120202 00050000                                ......

000238ff <smprStateTblIdle>:
   238ff:	0a0e0005 00080100 10000910 07110106     ................
   2390f:	00030f00 00000f01 0a000000                       ...........

0002391a <smprStateTblCommon>:
   2391a:	0702000a 00030200 02000f03 00000000     ................
	...

0002392c <smprActionTbl>:
   2392c:	00011999 000119cd 000119f3 00011a1b     ................
   2393c:	00011a33 00011a5b 00011a7d 00011a85     3...[...}.......
   2394c:	00011acf 00011af3 00011d2d 00011d51     ........-...Q...
   2395c:	00011d59 00011d7b 00012581 000125ab     Y...{....%...%..
   2396c:	000125b7 000125bf 00012631 000126c1     .%...%..1&...&..
   2397c:	000126e3 00012705 00012761 00012829     .&...'..a'..)(..
   2398c:	000127c1 0001286b                       .'..k(..

00023994 <calc128Zeros>:
	...

000239a4 <hciEventMask>:
   239a4:	02008890 20008000                       ....... 

000239ac <hciLeEventMask>:
   239ac:	000fffff 00000000                       ........

000239b4 <hciEventMaskPage2>:
   239b4:	00800000 00000000                       ........

000239bc <hciEvtParseFcnTbl>:
   239bc:	00000000 00015659 0001575d 00015869     ....YV..]W..iX..
   239cc:	000158cb 00015981 00000000 000159af     .X...Y.......Y..
   239dc:	00015a13 00015a73 00015ac7 00015b69     .Z..sZ...Z..i[..
   239ec:	00015bc9 00015c1f 00015c75 00015ccb     .[...\..u\...\..
   239fc:	00015d2d 00015d9f 00015dd9 00015e31     -]...]...]..1^..
   23a0c:	00015e55 00015eeb 00015f19 00015f47     U^...^..._..G_..
   23a1c:	00015f75 00015fb1 00015fed 00015e7b     u_..._..._..{^..
   23a2c:	00015eb3 0001601b 00016071 000160c7     .^...`..q`...`..
   23a3c:	00016135 00016163 000161b9 00016267     5a..ca...a..gb..
   23a4c:	00016329 000163eb 00016423 0001645b     )c...c..#d..[d..
   23a5c:	000164b1 000164f3 00016561 0001658f     .d...d..ae...e..
   23a6c:	00000000 0001689d 000168b7 00016925     .....h...h..%i..
   23a7c:	00016965 00000000 00016b0b 00000000     ei.......k......
   23a8c:	00016ae5 00016ae5 00016ae5 00016ae5     .j...j...j...j..
   23a9c:	00016ae5                                .j..

00023aa0 <hciEvtCbackLen>:
   23aa0:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   23ab0:	44460610 06060606 16060c0c 0a08080e     ..FD............
   23ac0:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   23ad0:	04061016 04040404 00000004              ............

00023adc <fitAdvCfg>:
   23adc:	00000000 03200000 00000000              ...... .....

00023ae8 <fitSlaveCfg>:
   23ae8:	00000001                                ....

00023aec <fitSecCfg>:
   23aec:	00010009 00000000                       ........

00023af4 <fitUpdateCfg>:
   23af4:	00000bb8 003c0030 02580004 00000005     ....0.<...X.....

00023b04 <fitHrpsCfg>:
   23b04:	00000064                                d...

00023b08 <fitBasCfg>:
   23b08:	0000001e 00640001                       ......d.

00023b10 <fitSmpCfg>:
   23b10:	07030bb8 00000310                       ........

00023b18 <fitAdvDataDisc>:
   23b18:	02060102 0309000a 1814180d 180f180a     ................

00023b28 <fitScanDataDisc>:
   23b28:	69460904 00000074                       ..Fit...

00023b30 <fitCccSet>:
   23b30:	00020013 00230000 00000001 00010063     ......#.....c...
   23b40:	04a50000 00000001                       ........

00023b48 <attCfg>:
   23b48:	0000000f 041e01e0                       ........

00023b50 <smpCfg>:
   23b50:	07030bb8 00000310                       ........

00023b58 <battValSvc>:
   23b58:	0002180f                                         ..

00023b5a <battLenSvc>:
   23b5a:	62120002                                         ..

00023b5c <battValLvlCh>:
   23b5c:	19006212 0005002a                                .b..*.

00023b62 <battLenLvlCh>:
   23b62:	00010005                                         ..

00023b64 <battLenLvl>:
   23b64:	00020001                                         ..

00023b66 <battLenLvlChCcc>:
   23b66:	2e060002                                         ..

00023b68 <battList>:
   23b68:	00022e06 00023b58 00023b5a 01000002     ....X;..Z;......
   23b78:	00022e00 00023b5c 00023b62 01000005     ....\;..b;......
   23b88:	00022dba 10005224 00023b64 01040001     .-..$R..d;......
   23b98:	00022dfa 10005228 00023b66 11200002     .-..(R..f;.... .

00023ba8 <gapValSvc>:
   23ba8:	00021800                                         ..

00023baa <gapLenSvc>:
   23baa:	05020002                                         ..

00023bac <gapValApCh>:
   23bac:	01000502 0005002a                                ....*.

00023bb2 <gapLenApCh>:
   23bb2:	00020005                                         ..

00023bb4 <gapLenAp>:
   23bb4:	00000002                                ....

00023bb8 <gapValCarCh>:
   23bb8:	a6000702 0005002a                                ....*.

00023bbe <gapLenCarCh>:
   23bbe:	00010005                                         ..

00023bc0 <gapLenCar>:
   23bc0:	00000001                                ....

00023bc4 <gapValRpaoCh>:
   23bc4:	c9000902 0005002a                                ....*.

00023bca <gapLenRpaoCh>:
   23bca:	00010005                                         ..

00023bcc <gapLenRpao>:
   23bcc:	00000001                                ....

00023bd0 <gapList>:
   23bd0:	00022e06 00023ba8 00023baa 01000002     .....;...;......
   23be0:	00022e00 00023bac 00023bb2 01000005     .....;...;......
   23bf0:	00022dea 1000522c 00023bb4 01000002     .-..,R...;......
   23c00:	00022e00 00023bb8 00023bbe 01000005     .....;...;......
   23c10:	00022d46 10005230 00023bc0 01000001     F-..0R...;......
   23c20:	00022e00 00023bc4 00023bca 01000005     .....;...;......
   23c30:	00022d30 10005234 00023bcc 01000001     0-..4R...;......

00023c40 <gattValSvc>:
   23c40:	00021801                                         ..

00023c42 <gattLenSvc>:
   23c42:	12200002                                         ..

00023c44 <gattValScCh>:
   23c44:	05001220 0005002a                                 ...*.

00023c4a <gattLenScCh>:
   23c4a:	00010005                                         ..

00023c4c <gattValSc>:
   23c4c:	ffff0001                                ....

00023c50 <gattLenSc>:
   23c50:	00020004                                         ..

00023c52 <gattLenScChCcc>:
   23c52:	2e060002                                         ..

00023c54 <gattList>:
   23c54:	00022e06 00023c40 00023c42 01000002     ....@<..B<......
   23c64:	00022e00 00023c44 00023c4a 01000005     ....D<..J<......
   23c74:	00022de2 00023c4c 00023c50 00000004     .-..L<..P<......
   23c84:	00022dfa 10005238 00023c52 11200002     .-..8R..R<.... .

00023c94 <disValSvc>:
   23c94:	0002180a                                         ..

00023c96 <disLenSvc>:
   23c96:	32020002                                         ..

00023c98 <disValMfrCh>:
   23c98:	29003202 0005002a                                .2.)*.

00023c9e <disLenMfrCh>:
   23c9e:	2a290005                                         ..

00023ca0 <disUuMfr>:
   23ca0:	00002a29                                )*..

00023ca4 <disValSidCh>:
   23ca4:	23003402 0005002a                                .4.#*.

00023caa <disLenSidCh>:
   23caa:	2a230005                                         ..

00023cac <disUuSid>:
   23cac:	00082a23                                         #*

00023cae <disLenSid>:
   23cae:	36020008                                         ..

00023cb0 <disValMnCh>:
   23cb0:	24003602 0005002a                                .6.$*.

00023cb6 <disLenMnCh>:
   23cb6:	2a240005                                         ..

00023cb8 <disUuMn>:
   23cb8:	00002a24                                $*..

00023cbc <disValSnCh>:
   23cbc:	25003802 0005002a                                .8.%*.

00023cc2 <disLenSnCh>:
   23cc2:	2a250005                                         ..

00023cc4 <disUuSn>:
   23cc4:	00002a25                                %*..

00023cc8 <disValFwrCh>:
   23cc8:	26003a02 0005002a                                .:.&*.

00023cce <disLenFwrCh>:
   23cce:	2a260005                                         ..

00023cd0 <disUuFwr>:
   23cd0:	00002a26                                &*..

00023cd4 <disValHwrCh>:
   23cd4:	27003c02 0005002a                                .<.'*.

00023cda <disLenHwrCh>:
   23cda:	2a270005                                         ..

00023cdc <disUuHwr>:
   23cdc:	00002a27                                '*..

00023ce0 <disValSwrCh>:
   23ce0:	28003e02 0005002a                                .>.(*.

00023ce6 <disLenSwrCh>:
   23ce6:	2a280005                                         ..

00023ce8 <disUuSwr>:
   23ce8:	00002a28                                (*..

00023cec <disValRcdCh>:
   23cec:	2a004002 0005002a                                .@.**.

00023cf2 <disLenRcdCh>:
   23cf2:	2a2a0005                                         ..

00023cf4 <disUuRcd>:
   23cf4:	00062a2a                                         **

00023cf6 <disLenRcd>:
   23cf6:	2e060006                                         ..

00023cf8 <disList>:
   23cf8:	00022e06 00023c94 00023c96 01000002     .....<...<......
   23d08:	00022e00 00023c98 00023c9e 01000005     .....<...<......
   23d18:	00023ca0 10002bf8 10002c0c 01080014     .<...+...,......
   23d28:	00022e00 00023ca4 00023caa 01000005     .....<...<......
   23d38:	00023cac 10002c10 00023cae 01000008     .<...,...<......
   23d48:	00022e00 00023cb0 00023cb6 01000005     .....<...<......
   23d58:	00023cb8 10002c18 10002c2c 01080014     .<...,..,,......
   23d68:	00022e00 00023cbc 00023cc2 01000005     .....<...<......
   23d78:	00023cc4 10002c30 10002c44 01080014     .<..0,..D,......
   23d88:	00022e00 00023cc8 00023cce 01000005     .....<...<......
   23d98:	00023cd0 10002c48 10002c58 01080010     .<..H,..X,......
   23da8:	00022e00 00023cd4 00023cda 01000005     .....<...<......
   23db8:	00023cdc 10002c5c 10002c6c 01080010     .<..\,..l,......
   23dc8:	00022e00 00023ce0 00023ce6 01000005     .....<...<......
   23dd8:	00023ce8 10002c70 10002c80 01080010     .<..p,...,......
   23de8:	00022e00 00023cec 00023cf2 01000005     .....<...<......
   23df8:	00023cf4 1000523c 00023cf6 01000006     .<..<R...<......

00023e08 <svcHrmUuid>:
   23e08:	00002a37                                7*..

00023e0c <svcSlUuid>:
   23e0c:	00002a38                                8*..

00023e10 <svcCpUuid>:
   23e10:	00002a39                                9*..

00023e14 <hrsValSvc>:
   23e14:	0002180d                                         ..

00023e16 <hrsLenSvc>:
   23e16:	22100002                                         ..

00023e18 <hrsValHrmCh>:
   23e18:	37002210 0005002a                                .".7*.

00023e1e <hrsLenHrmCh>:
   23e1e:	00000005                                         ..

00023e20 <hrsValHrm>:
	...

00023e22 <hrsLenHrm>:
   23e22:	00020001                                         ..

00023e24 <hrsLenHrmChCcc>:
   23e24:	00000002                                ....

00023e28 <hrsValSlCh>:
   23e28:	38002502 0005002a                                .%.8*.

00023e2e <hrsLenSlCh>:
   23e2e:	00010005                                         ..

00023e30 <hrsLenSl>:
   23e30:	00000001                                ....

00023e34 <hrsValCpCh>:
   23e34:	39002708 0005002a                                .'.9*.

00023e3a <hrsLenCpCh>:
   23e3a:	00000005                                         ..

00023e3c <hrsValCp>:
	...

00023e3e <hrsLenCp>:
   23e3e:	2e060001                                         ..

00023e40 <hrsList>:
   23e40:	00022e06 00023e14 00023e16 01000002     .....>...>......
   23e50:	00022e00 00023e18 00023e1e 01000005     .....>...>......
   23e60:	00023e08 00023e20 00023e22 00000001     .>.. >..">......
   23e70:	00022dfa 10005244 00023e24 11200002     .-..DR..$>.... .
   23e80:	00022e00 00023e28 00023e2e 01000005     ....(>...>......
   23e90:	00023e0c 10002c98 00023e30 01000001     .>...,..0>......
   23ea0:	00022e00 00023e34 00023e3a 01000005     ....4>..:>......
   23eb0:	00023e10 00023e3c 00023e3e 10020001     .>..<>..>>......

00023ec0 <rscsValSvc>:
   23ec0:	00021814                                         ..

00023ec2 <rscsLenSvc>:
   23ec2:	a2020002                                         ..

00023ec4 <rscsValFeatureCh>:
   23ec4:	5404a202 0005002a                                ...T*.

00023eca <rscsLenFeatureCh>:
   23eca:	00020005                                         ..

00023ecc <rscsLenFeature>:
   23ecc:	00000002                                ....

00023ed0 <rscsValMeasurementCh>:
   23ed0:	5304a410 0005002a                                ...S*.

00023ed6 <rscsLenMeasurementCh>:
   23ed6:	00000005                                         ..

00023ed8 <rscsValMeasurement>:
	...

00023eda <rscsLenMeasurement>:
   23eda:	0002000a                                         ..

00023edc <rscsLenMeasurementChCcc>:
   23edc:	00000002                                ....

00023ee0 <rscsValLocationCh>:
   23ee0:	5d04a702 0005002a                                ...]*.

00023ee6 <rscsLenLocationCh>:
   23ee6:	00010005                                         ..

00023ee8 <rscsLenLocation>:
   23ee8:	00000001                                ....

00023eec <rscsList>:
   23eec:	00022e06 00023ec0 00023ec2 01000002     .....>...>......
   23efc:	00022e00 00023ec4 00023eca 01000005     .....>...>......
   23f0c:	00022d44 10002cb0 00023ecc 09000002     D-...,...>......
   23f1c:	00022e00 00023ed0 00023ed6 01000005     .....>...>......
   23f2c:	00022d42 00023ed8 00023eda 00000001     B-...>...>......
   23f3c:	00022dfa 10005248 00023edc 91200002     .-..HR...>.... .
   23f4c:	00022e00 00023ee0 00023ee6 01000005     .....>...>......
   23f5c:	00022d38 1000524c 00023ee8 09000001     8-..LR...>......

00023f6c <appReqActCfg>:
   23f6c:	00000000                                ....

00023f70 <curve_secp256r1>:
   23f70:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   23f8c:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   23f9c:	a7179e84 bce6faad ffffffff ffffffff     ................
   23fac:	00000000 ffffffff d898c296 f4a13945     ............E9..
   23fbc:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   23fcc:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   23fdc:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   23fec:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   23ffc:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   2400c:	aa3a93e7 5ac635d8 000201b1 0001f9d1     ..:..5.Z........
   2401c:	0001fb81                                ....

00024020 <ccitt_table>:
   24020:	80050000 000a800f 001e801b 80110014     ................
   24030:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   24040:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   24050:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   24060:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   24070:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   24080:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   24090:	00968093 8099009c 808d0088 00828087     ................
   240a0:	01868183 8189018c 819d0198 01928197     ................
   240b0:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   240c0:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   240d0:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   240e0:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   240f0:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   24100:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   24110:	81150110 011a811f 010e810b 81010104     ................
   24120:	03068303 8309030c 831d0318 03128317     ................
   24130:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   24140:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   24150:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   24160:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   24170:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   24180:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   24190:	83950390 039a839f 038e838b 83810384     ................
   241a0:	82850280 028a828f 029e829b 82910294     ................
   241b0:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   241c0:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   241d0:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   241e0:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   241f0:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   24200:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   24210:	02168213 8219021c 820d0208 02028207     ................

00024220 <am_ble_buffer_patch_data>:
   24220:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   24230:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   24240:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   24250:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   24260:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   2429c:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   242ac:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   242bc:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   242cc:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   242dc:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   242ec:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   242fc:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   2430c:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   2431c:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   2432c:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   2433c:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   2434c:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   2435c:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   2436c:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   2437c:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   2438c:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   2439c:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   243ac:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   243bc:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   243cc:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   243dc:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   243ec:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   243fc:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   2440c:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   2441c:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   2442c:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   2443c:	8f809011 9812900e 900d3008 30309812     .........0....00
   2444c:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   2445c:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   2446c:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   2447c:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   2448c:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   2449c:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   244ac:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   244bc:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   244cc:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   244dc:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   244ec:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   244fc:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   2450c:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   2452c:	00000021 00000000 00000001 00000000     !...............
   2453c:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   2454c:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   2455c:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   2456c:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   2457c:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   2458c:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   2459c:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   245ac:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   245bc:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   245cc:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   245dc:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   245ec:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   245fc:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   2460c:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   2461c:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   2462c:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   2463c:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   2464c:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   2465c:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   2466c:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   2467c:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   2468c:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   2469c:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   246ac:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   246bc:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   246cc:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   246dc:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   246ec:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   246fc:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   2470c:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   2471c:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   2472c:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   2473c:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   2474c:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   2475c:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   2476c:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   2477c:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   2478c:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   2479c:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   247ac:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   247bc:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   247cc:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   247dc:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   247ec:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   247fc:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   2480c:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   2481c:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   2482c:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   2483c:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   2484c:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   2485c:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   2486c:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   2487c:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   2488c:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   2489c:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   248ac:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   248bc:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   248cc:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   248dc:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   248ec:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   248fc:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   2490c:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   2491c:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   2492c:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   2493c:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   2494c:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   2495c:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   2496c:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   2497c:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   2498c:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   2499c:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   249ac:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   249bc:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   249cc:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   249dc:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   249ec:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   249fc:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   24a0c:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   24a1c:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   24a2c:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   24a3c:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   24a4c:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   24a5c:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   24a6c:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   24a7c:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   24a8c:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   24a9c:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   24aac:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   24abc:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   24acc:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   24adc:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   24aec:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   24afc:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   24b0c:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   24b1c:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   24b2c:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   24b3c:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   24b4c:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   24b5c:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   24b6c:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   24b7c:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   24b8c:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   24b9c:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   24bac:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   24bbc:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   24bcc:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   24bdc:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   24bec:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   24bfc:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   24c0c:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   24c1c:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   24c2c:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   24c3c:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   24c4c:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   24c5c:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   24c6c:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   24c7c:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   24c8c:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   24c9c:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   24cac:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   24cbc:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   24ccc:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   24cdc:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   24cec:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   24cfc:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   24d0c:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   24d1c:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   24d2c:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   24d3c:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   24d4c:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   24d5c:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   24d6c:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   24d7c:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   24d8c:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   24d9c:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   24dac:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   24dbc:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   24dcc:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   24ddc:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   24dec:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   24dfc:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   24e0c:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   24e1c:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   24e2c:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   24e3c:	00010341 50804000 000093a5 00000466     A....@.P....f...
   24e4c:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   24e5c:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   24e6c:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   24e7c:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   24e8c:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   24e9c:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   24eac:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   24ebc:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   24ecc:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   24edc:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   24eec:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   24efc:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   24f0c:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   24f1c:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   24f2c:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   24f3c:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   24f4c:	00004770 20006780 20006054              pG...g. T`. 

00024f58 <am_hal_ble_num_default_patches>:
   24f58:	00000003                                ....

00024f5c <am_ble_performance_copy_patch_data>:
   24f5c:	006e1100 00000400 00000000 01c50101     ..n.............
   24f6c:	00000039 00000000 00000000 00000000     9...............
   24f7c:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   24f8c:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   24f9c:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   24fac:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   24fbc:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   24fcc:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   24fdc:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   24fec:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   24ffc:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   2500c:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   2501c:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   2502c:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   2503c:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   2504c:	f000e00a e007fb94 b2c09801 fac7f000     ................
   2505c:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   2506c:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   2507c:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   2508c:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   2509c:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   250ac:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   250bc:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   250cc:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   250dc:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   250ec:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   250fc:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   2510c:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   2511c:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   2512c:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   2513c:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   2514c:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   2515c:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   2516c:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   2517c:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   2518c:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   2519c:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   251ac:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   251bc:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   251cc:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   251dc:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   251ec:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   251fc:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   2520c:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   2521c:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   2522c:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   2523c:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   2524c:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   2525c:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   2526c:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   2527c:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   2528c:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   2529c:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   252ac:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   252bc:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   252cc:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   252dc:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   252ec:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   252fc:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   2530c:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   2531c:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   2532c:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   2533c:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   2534c:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   2535c:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   2536c:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   2537c:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   2538c:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   2539c:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   253ac:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   253bc:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   253cc:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   253dc:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   253ec:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   253fc:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   2540c:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   2541c:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   2542c:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   2543c:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   2544c:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   2545c:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   2546c:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   2547c:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   2548c:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   2549c:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   254ac:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   254bc:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   254cc:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   254dc:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   254ec:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   254fc:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   2550c:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   2551c:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   2552c:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   2553c:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   2554c:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   2555c:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   2556c:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   2557c:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   2558c:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   2559c:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   255ac:	00400000 00804580 021e4580 00030000     ..@..E...E......
   255bc:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   255cc:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   255dc:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   255ec:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   255fc:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   2560c:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   2561c:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   2562c:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   2563c:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   2564c:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   2565c:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   2566c:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   2567c:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   2568c:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   2569c:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   256ac:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   256bc:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   256cc:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   256dc:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   256ec:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   256fc:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   2570c:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   2571c:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   2572c:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   2573c:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   2574c:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   2575c:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   2576c:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   2577c:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   2578c:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   2579c:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   257ac:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   257bc:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   257cc:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   257dc:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   257ec:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   257fc:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   2580c:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   2581c:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   2582c:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   2583c:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   2584c:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   2585c:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   2586c:	00000001                                ....

00025870 <am_hal_ble_num_default_patches_b0>:
   25870:	00000003                                ....

00025874 <am_hal_cachectrl_defaults>:
   25874:	00000308                                ....

00025878 <g_ui8Bit76Capabilities>:
   25878:	02800101 80010180 80800101 80808080     ................
   25888:	80808080 80808008 01800180 80808080     ................
   25898:	80808080 01800402 01010401 80808080     ................
   258a8:	00000101                                ....

000258ac <g_ui8NCEtable>:
   258ac:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   258bc:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   258cc:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   258dc:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   258ec:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   258fc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   2590c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   2591c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   2592c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   2593c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   2594c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   2595c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   2596c:	32221202 43231303                       .."2..#C

00025974 <g_ui8Inpen>:
   25974:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   25984:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   25994:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   259a4:	00003130                                01..

000259a8 <g_AM_HAL_GPIO_DISABLE>:
   259a8:	00000003                                ....

000259ac <g_ui8nCEpins>:
   259ac:	02070707 00080802 01020202 01010101     ................
   259bc:	01010101 01010101 01010101 01010101     ................
   259cc:	01010101 08010101 01010008 01010101     ................
   259dc:	00000101                                ....

000259e0 <g_am_hal_mcuctrl_flash_size>:
   259e0:	00004000 00008000 00010000 00020000     .@..............
   259f0:	00040000 00080000 00100000 00200000     .............. .
   25a00:	00180000 00000000 00000000 00000000     ................
	...

00025a20 <g_am_hal_mcuctrl_sram_size>:
   25a20:	00004000 00008000 00010000 00020000     .@..............
   25a30:	00040000 00080000 00100000 00060000     ................
   25a40:	000c0000 00000000 00000000 00000000     ................
	...

00025a60 <am_hal_pwrctrl_peripheral_control>:
	...
   25a6c:	00000001 00000004 00000004 00000002     ................
   25a7c:	00000008 00000008 00000004 00000008     ................
   25a8c:	00000008 00000008 00000008 00000008     ................
   25a9c:	00000010 00000010 00000010 00000020     ............ ...
   25aac:	00000010 00000010 00000040 00000010     ........@.......
   25abc:	00000010 00000080 00000004 00000004     ................
   25acc:	00000100 00000004 00000004 00000200     ................
   25adc:	00000020 00000020 00000400 00000004      ... ...........
   25aec:	00000004 00000800 00000040 00000040     ........@...@...
   25afc:	00001000 00000080 00000080 00002000     ............. ..
   25b0c:	00000100 00000100                       ........

00025b14 <am_hal_pwrctrl_memory_control>:
	...
   25b28:	00000001 00000001 00000001 00001fff     ................
   25b38:	00001fff 00000003 00000003 00000003     ................
   25b48:	00001fff 00001fff 00000007 00000007     ................
   25b58:	00000007 00001fff 00001fff 0000000f     ................
   25b68:	0000000f 0000000f 00001fff 00001fff     ................
   25b78:	0000001f 0000001f 0000001f 00001fff     ................
   25b88:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
   25b98:	00001fff 00001fff 0000007f 0000007f     ................
   25ba8:	0000007f 00001fff 00001fff 000000ff     ................
   25bb8:	000000ff 000000ff 00001fff 00001fff     ................
   25bc8:	000001ff 000001ff 000001ff 00001fff     ................
   25bd8:	00001fff 000003ff 000003ff 000003ff     ................
   25be8:	00001fff 00001fff 000007ff 000007ff     ................
   25bf8:	000007ff 00001fff 00001fff 00000fff     ................
   25c08:	00000fff 00000fff 00001fff 00001fff     ................
   25c18:	00001fff 00001fff 00001fff 00001fff     ................
   25c28:	00001fff 00002000 00002000 00002000     ..... ... ... ..
   25c38:	00006000 00006000 00006000 00006000     .`...`...`...`..
   25c48:	00006000 00006000 00006000 c0000000     .`...`...`......
   25c58:	00000000 c0000000 c0000000 00000000     ................
   25c68:	c0007fff 00007fff c0007fff c0007fff     ................
   25c78:	00007fff                                ....

00025c7c <g_AM_BSP_GPIO_ITM_SWO>:
   25c7c:	00000007 5f495041 52494150 5145525f     ....API_PAIR_REQ
   25c8c:	49504100 4e41435f 5f4c4543 00514552     .API_CANCEL_REQ.
   25c9c:	5f495041 48545541 5053525f 49504100     API_AUTH_RSP.API
   25cac:	4345535f 54495255 45525f59 4d430051     _SECURITY_REQ.CM
   25cbc:	4b505f44 4d430054 41505f44 4e495249     D_PKT.CMD_PAIRIN
   25ccc:	41465f47 44454c49 5f4d4400 52434e45     G_FAILED.DM_ENCR
   25cdc:	5f545059 4c504d43 5f4d4400 52434e45     YPT_CMPL.DM_ENCR
   25cec:	5f545059 4c494146 44004445 4f435f4d     YPT_FAILED.DM_CO
   25cfc:	435f4e4e 45534f4c 46535700 5345415f     NN_CLOSE.WSF_AES
   25d0c:	504d435f 4e49004c 45535f54 4e5f444e     _CMPL.INT_SEND_N
   25d1c:	5f545845 0059454b 5f544e49 5f58414d     EXT_KEY.INT_MAX_
   25d2c:	45545441 5354504d 544e4900 4941505f     ATTEMPTS.INT_PAI
   25d3c:	474e4952 504d435f 4e49004c 49545f54     RING_CMPL.INT_TI
   25d4c:	554f454d 4e490054 454c5f54 49004353     MEOUT.INT_LESC.I
   25d5c:	4c5f544e 43414745 4e490059 574a5f54     NT_LEGACY.INT_JW
   25d6c:	00434e5f 5f544e49 53534150 0059454b     _NC.INT_PASSKEY.
   25d7c:	5f544e49 00424f4f 5f495041 52455355     INT_OOB.API_USER
   25d8c:	4e4f435f 4d524946 49504100 4553555f     _CONFIRM.API_USE
   25d9c:	454b5f52 45525059 41005353 4b5f4950     R_KEYPRESS.API_K
   25dac:	52505945 5f535345 4c504d43 46535700     EYPRESS_CMPL.WSF
   25dbc:	4343455f 504d435f 4e49004c 4b505f54     _ECC_CMPL.INT_PK
   25dcc:	58454e5f 4e490054 4b505f54 504d435f     _NEXT.INT_PK_CMP
   25ddc:	5357004c 4d435f46 435f4341 004c504d     L.WSF_CMAC_CMPL.
   25dec:	435f4844 4b434548 4941465f 4552554c     DH_CHECK_FAILURE
   25dfc:	555f4900 6f6e6b6e 49006e77 4c44495f     .I_Unknown.I_IDL
   25e0c:	5f490045 45444f4d 4c45535f 00544345     E.I_MODE_SELECT.
   25e1c:	454c5f49 505f4353 49004e49 4255505f     I_LESC_PIN.I_PUB
   25e2c:	59454b5f 415f4900 5f485455 454c4553     _KEY.I_AUTH_SELE
   25e3c:	49005443 4e574a5f 41575f43 435f5449     CT.I_JWNC_WAIT_C
   25e4c:	4900464e 4e574a5f 41525f43 4900444e     NF.I_JWNC_RAND.I
   25e5c:	4e574a5f 48435f43 5f4b4345 5f490031     _JWNC_CHECK_1.I_
   25e6c:	434e574a 4548435f 325f4b43 4a5f4900     JWNC_CHECK_2.I_J
   25e7c:	5f434e57 54494157 4553555f 5f490052     WNC_WAIT_USER.I_
   25e8c:	4b5f4b50 52505945 00535345 4b505f49     PK_KEYPRESS.I_PK
   25e9c:	4c41435f 5f490043 435f4b50 4900464e     _CALC.I_PK_CNF.I
   25eac:	5f4b505f 444e4152 505f4900 48435f4b     _PK_RAND.I_PK_CH
   25ebc:	004b4345 4b505f49 5045525f 00544145     ECK.I_PK_REPEAT.
   25ecc:	4f4f5f49 45535f42 525f444e 00444e41     I_OOB_SEND_RAND.
   25edc:	4f4f5f49 41575f42 525f5449 00444e41     I_OOB_WAIT_RAND.
   25eec:	41435f49 465f434c 4b545f35 49005945     I_CALC_F5_TKEY.I
   25efc:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   25f0c:	41435f49 465f434c 544c5f35 5f49004b     I_CALC_F5_LTK.I_
   25f1c:	434c4143 5f36465f 49004145 4c41435f     CALC_F6_EA.I_CAL
   25f2c:	36465f43 0042455f 45565f49 59464952     C_F6_EB.I_VERIFY
   25f3c:	5f48445f 43454843 5f49004b 4147454c     _DH_CHECK.I_LEGA
   25f4c:	505f5943 49004e49 464e435f 4c41435f     CY_PIN.I_CNF_CAL
   25f5c:	00315f43 4e435f49 41435f46 325f434c     C_1.I_CNF_CALC_2
   25f6c:	505f4900 5f524941 00464e43 41505f49     .I_PAIR_CNF.I_PA
   25f7c:	525f5249 00444e41 4e435f49 45565f46     IR_RAND.I_CNF_VE
   25f8c:	41435f52 315f434c 435f4900 565f464e     R_CALC_1.I_CNF_V
   25f9c:	435f5245 5f434c41 5f490032 5f4b5453     ER_CALC_2.I_STK_
   25fac:	434c4143 455f4900 5952434e 49005450     CALC.I_ENCRYPT.I
   25fbc:	59454b5f 5349445f 5f490054 45545441     _KEY_DIST.I_ATTE
   25fcc:	5354504d 555f5200 6f6e6b6e 52006e77     MPTS.R_Unknown.R
   25fdc:	4c44495f 5f520045 5f495041 52494150     _IDLE.R_API_PAIR
   25fec:	5053525f 4d5f5200 5f45444f 454c4553     _RSP.R_MODE_SELE
   25ffc:	52005443 4255505f 59454b5f 415f5200     CT.R_PUB_KEY.R_A
   2600c:	5f485455 454c4553 52005443 4e574a5f     UTH_SELECT.R_JWN
   2601c:	45535f43 00505554 574a5f52 575f434e     C_SETUP.R_JWNC_W
   2602c:	5f544941 444e4152 4a5f5200 5f434e57     AIT_RAND.R_JWNC_
   2603c:	434c4143 0032475f 574a5f52 575f434e     CALC_G2.R_JWNC_W
   2604c:	5f544941 52455355 505f5200 454b5f4b     AIT_USER.R_PK_KE
   2605c:	45525059 52005353 5f4b505f 54494157     YPRESS.R_PK_WAIT
   2606c:	464e435f 505f5200 41435f4b 5200434c     _CNF.R_PK_CALC.R
   2607c:	5f4b505f 444e4152 505f5200 48435f4b     _PK_RAND.R_PK_CH
   2608c:	004b4345 4b505f52 5045525f 00544145     ECK.R_PK_REPEAT.
   2609c:	4f4f5f52 45535f42 525f444e 00444e41     R_OOB_SEND_RAND.
   260ac:	4f4f5f52 41575f42 525f5449 00444e41     R_OOB_WAIT_RAND.
   260bc:	41575f52 445f5449 48435f48 004b4345     R_WAIT_DH_CHECK.
   260cc:	41435f52 465f434c 4b545f35 52005945     R_CALC_F5_TKEY.R
   260dc:	4c41435f 35465f43 43414d5f 0059454b     _CALC_F5_MACKEY.
   260ec:	41435f52 465f434c 544c5f35 5f52004b     R_CALC_F5_LTK.R_
   260fc:	434c4143 5f36465f 52004145 4c41435f     CALC_F6_EA.R_CAL
   2610c:	36465f43 0042455f 49505f52 41505f4e     C_F6_EB.R_PIN_PA
   2611c:	315f5249 505f5200 505f4e49 5f524941     IR_1.R_PIN_PAIR_
   2612c:	5f520032 5f464e43 434c4143 5200315f     2.R_CNF_CALC_1.R
   2613c:	464e435f 4c41435f 00325f43 41505f52     _CNF_CALC_2.R_PA
   2614c:	525f5249 00444e41 4e435f52 45565f46     IR_RAND.R_CNF_VE
   2615c:	41435f52 315f434c 435f5200 565f464e     R_CALC_1.R_CNF_V
   2616c:	435f5245 5f434c41 5f520032 5f4b5453     ER_CALC_2.R_STK_
   2617c:	434c4143 455f5200 5952434e 52005450     CALC.R_ENCRYPT.R
   2618c:	59454b5f 5349445f 5f520054 45545441     _KEY_DIST.R_ATTE
   2619c:	5354504d 00000000                       MPTS....
