
bin/SparkFun_Edge_Project_Template.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 b5 cf 00 00 ad cf 00 00 51 c3 00 00     ............Q...
    c010:	51 c3 00 00 51 c3 00 00 51 c3 00 00 00 00 00 00     Q...Q...Q.......
	...
    c02c:	b1 cf 00 00 b1 cf 00 00 00 00 00 00 b1 cf 00 00     ................
    c03c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c04c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c05c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c06c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c07c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c08c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c09c:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c0ac:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c0bc:	b1 cf 00 00 b1 cf 00 00 b1 cf 00 00 b1 cf 00 00     ................
    c0cc:	b1 cf 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
{
    c1a4:	b093      	sub	sp, #76	; 0x4c
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	4608      	mov	r0, r1
    c1a8:	f001 f83c 	bl	d224 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	484b      	ldr	r0, [pc, #300]	; (c2dc <main+0x13c>)
    am_hal_iom_config_t iomaster_config = {
    c1ae:	4e4c      	ldr	r6, [pc, #304]	; (c2e0 <main+0x140>)
        am_util_stdio_printf("am_hal_iom_blocking_transfer returned: %d\n", retVal32);
    c1b0:	4c4c      	ldr	r4, [pc, #304]	; (c2e4 <main+0x144>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b2:	f001 f807 	bl	d1c4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b6:	f001 f82b 	bl	d210 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1ba:	f000 ffa3 	bl	d104 <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1be:	f000 ffd3 	bl	d168 <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1c2:	4b49      	ldr	r3, [pc, #292]	; (c2e8 <main+0x148>)
    c1c4:	681d      	ldr	r5, [r3, #0]
    c1c6:	202e      	movs	r0, #46	; 0x2e
    c1c8:	4629      	mov	r1, r5
    c1ca:	f001 f8ff 	bl	d3cc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1ce:	4629      	mov	r1, r5
    c1d0:	2025      	movs	r0, #37	; 0x25
    c1d2:	f001 f8fb 	bl	d3cc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1d6:	4629      	mov	r1, r5
    c1d8:	202c      	movs	r0, #44	; 0x2c
    c1da:	f001 f8f7 	bl	d3cc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1de:	4629      	mov	r1, r5
    c1e0:	202f      	movs	r0, #47	; 0x2f
    c1e2:	f001 f8f3 	bl	d3cc <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c1e6:	4b41      	ldr	r3, [pc, #260]	; (c2ec <main+0x14c>)
    c1e8:	200e      	movs	r0, #14
    c1ea:	6819      	ldr	r1, [r3, #0]
    c1ec:	f001 f8ee 	bl	d3cc <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1f0:	4b3f      	ldr	r3, [pc, #252]	; (c2f0 <main+0x150>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1fa:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1fc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    c200:	601d      	str	r5, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c202:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c204:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c206:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c208:	f000 feca 	bl	cfa0 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun BlackBoard Artemis SPI Testing\n");
    c20c:	4839      	ldr	r0, [pc, #228]	; (c2f4 <main+0x154>)
    c20e:	f000 feab 	bl	cf68 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c212:	4a39      	ldr	r2, [pc, #228]	; (c2f8 <main+0x158>)
    c214:	4939      	ldr	r1, [pc, #228]	; (c2fc <main+0x15c>)
    c216:	483a      	ldr	r0, [pc, #232]	; (c300 <main+0x160>)
    c218:	f000 fea6 	bl	cf68 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, World!\r\n");  // Sting_print has less overhead than printf (and less risky behavior since no varargs)
    c21c:	4839      	ldr	r0, [pc, #228]	; (c304 <main+0x164>)
    c21e:	f000 ff4d 	bl	d0bc <am_bsp_uart_string_print>
    am_hal_iom_config_t iomaster_config = {
    c222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c224:	ad03      	add	r5, sp, #12
    c226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    void*           iomaster_handle = NULL;
    c228:	2700      	movs	r7, #0
    am_hal_iom_config_t iomaster_config = {
    c22a:	6833      	ldr	r3, [r6, #0]
    c22c:	602b      	str	r3, [r5, #0]
    retVal32 = am_hal_iom_initialize(iomaster_instance, &iomaster_handle);
    c22e:	a901      	add	r1, sp, #4
    c230:	4638      	mov	r0, r7
    void*           iomaster_handle = NULL;
    c232:	9701      	str	r7, [sp, #4]
    retVal32 = am_hal_iom_initialize(iomaster_instance, &iomaster_handle);
    c234:	f001 fad0 	bl	d7d8 <am_hal_iom_initialize>
    am_util_stdio_printf("am_hal_iom_initialize returned: %d\n", retVal32);
    c238:	4601      	mov	r1, r0
    c23a:	4833      	ldr	r0, [pc, #204]	; (c308 <main+0x168>)
    c23c:	f000 fe94 	bl	cf68 <am_util_stdio_printf>
    retVal32 = am_hal_iom_power_ctrl(iomaster_handle, AM_HAL_SYSCTRL_WAKE, false);
    c240:	463a      	mov	r2, r7
    c242:	4639      	mov	r1, r7
    c244:	9801      	ldr	r0, [sp, #4]
    c246:	f001 fb5f 	bl	d908 <am_hal_iom_power_ctrl>
    am_util_stdio_printf("am_hal_iom_power_ctrl returned: %d\n", retVal32);
    c24a:	4601      	mov	r1, r0
    c24c:	482f      	ldr	r0, [pc, #188]	; (c30c <main+0x16c>)
    c24e:	f000 fe8b 	bl	cf68 <am_util_stdio_printf>
    retVal32 = am_hal_iom_configure(iomaster_handle, &iomaster_config);
    c252:	a903      	add	r1, sp, #12
    c254:	9801      	ldr	r0, [sp, #4]
    c256:	f001 fc67 	bl	db28 <am_hal_iom_configure>
    am_util_stdio_printf("am_hal_iom_configure returned: %d\n", retVal32);
    c25a:	4601      	mov	r1, r0
    c25c:	482c      	ldr	r0, [pc, #176]	; (c310 <main+0x170>)
    c25e:	f000 fe83 	bl	cf68 <am_util_stdio_printf>
    retVal32 = am_hal_iom_enable(iomaster_handle);
    c262:	9801      	ldr	r0, [sp, #4]
    c264:	f001 fae0 	bl	d828 <am_hal_iom_enable>
    am_util_stdio_printf("am_hal_iom_enable returned: %d\n", retVal32);
    c268:	4601      	mov	r1, r0
    c26a:	482a      	ldr	r0, [pc, #168]	; (c314 <main+0x174>)
    c26c:	f000 fe7c 	bl	cf68 <am_util_stdio_printf>
    iomaster_pin_config.uFuncSel = fncsel_SCLK;
    c270:	f240 7301 	movw	r3, #1793	; 0x701
    memset((void*)&iomaster_pin_config, 0x00, sizeof(am_hal_gpio_pincfg_t));
    c274:	9702      	str	r7, [sp, #8]
    iomaster_pin_config.uFuncSel = fncsel_SCLK;
    c276:	f8ad 3008 	strh.w	r3, [sp, #8]
    retVal32 = am_hal_gpio_pinconfig(pad_SCLK, iomaster_pin_config);
    c27a:	9902      	ldr	r1, [sp, #8]
    c27c:	2005      	movs	r0, #5
    c27e:	f001 f8a5 	bl	d3cc <am_hal_gpio_pinconfig>
    am_util_stdio_printf("am_hal_gpio_pinconfig (SCLK) returned: %d\n", retVal32);
    c282:	4601      	mov	r1, r0
    c284:	4824      	ldr	r0, [pc, #144]	; (c318 <main+0x178>)
    c286:	f000 fe6f 	bl	cf68 <am_util_stdio_printf>
    retVal32 = am_hal_gpio_pinconfig(pad_MOSI, iomaster_pin_config);
    c28a:	9902      	ldr	r1, [sp, #8]
    c28c:	2007      	movs	r0, #7
    c28e:	f001 f89d 	bl	d3cc <am_hal_gpio_pinconfig>
    am_util_stdio_printf("am_hal_gpio_pinconfig (MOSI) returned: %d\n", retVal32);
    c292:	4601      	mov	r1, r0
    c294:	4821      	ldr	r0, [pc, #132]	; (c31c <main+0x17c>)
    c296:	f000 fe67 	bl	cf68 <am_util_stdio_printf>
    retVal32 = am_hal_gpio_pinconfig(pad_MISO, iomaster_pin_config);
    c29a:	9902      	ldr	r1, [sp, #8]
    c29c:	2006      	movs	r0, #6
    c29e:	f001 f895 	bl	d3cc <am_hal_gpio_pinconfig>
    am_util_stdio_printf("am_hal_gpio_pinconfig (MISO) returned: %d\n", retVal32);
    c2a2:	4601      	mov	r1, r0
    c2a4:	481e      	ldr	r0, [pc, #120]	; (c320 <main+0x180>)
    c2a6:	f000 fe5f 	bl	cf68 <am_util_stdio_printf>
    am_hal_iom_transfer_t iomaster_transfer = {0};
    c2aa:	2228      	movs	r2, #40	; 0x28
    c2ac:	4639      	mov	r1, r7
    c2ae:	a808      	add	r0, sp, #32
    c2b0:	f000 feb4 	bl	d01c <memset>
    iomaster_transfer.ui8Priority = 1;
    c2b4:	2301      	movs	r3, #1
    iomaster_transfer.pui32TxBuffer = (uint32_t*)tx_buffer;
    c2b6:	4a1b      	ldr	r2, [pc, #108]	; (c324 <main+0x184>)
    iomaster_transfer.ui8Priority = 1;
    c2b8:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    iomaster_transfer.ui32NumBytes = TX_SIZE;
    c2bc:	2310      	movs	r3, #16
    iomaster_transfer.pui32TxBuffer = (uint32_t*)tx_buffer;
    c2be:	920d      	str	r2, [sp, #52]	; 0x34
    iomaster_transfer.ui32NumBytes = TX_SIZE;
    c2c0:	930b      	str	r3, [sp, #44]	; 0x2c
        retVal32 = am_hal_iom_blocking_transfer(iomaster_handle, &iomaster_transfer);
    c2c2:	a908      	add	r1, sp, #32
    c2c4:	9801      	ldr	r0, [sp, #4]
    c2c6:	f001 fd5d 	bl	dd84 <am_hal_iom_blocking_transfer>
        am_util_stdio_printf("am_hal_iom_blocking_transfer returned: %d\n", retVal32);
    c2ca:	4601      	mov	r1, r0
    c2cc:	4620      	mov	r0, r4
    c2ce:	f000 fe4b 	bl	cf68 <am_util_stdio_printf>
        am_util_delay_ms(250);
    c2d2:	20fa      	movs	r0, #250	; 0xfa
    c2d4:	f000 f828 	bl	c328 <am_util_delay_ms>
    c2d8:	e7f3      	b.n	c2c2 <main+0x122>
    c2da:	bf00      	nop
    c2dc:	0000f024 	.word	0x0000f024
    c2e0:	0000ee24 	.word	0x0000ee24
    c2e4:	0000efb4 	.word	0x0000efb4
    c2e8:	0000f198 	.word	0x0000f198
    c2ec:	0000f028 	.word	0x0000f028
    c2f0:	40010094 	.word	0x40010094
    c2f4:	0000ee38 	.word	0x0000ee38
    c2f8:	0000ee64 	.word	0x0000ee64
    c2fc:	0000ee70 	.word	0x0000ee70
    c300:	0000ee7c 	.word	0x0000ee7c
    c304:	0000ee94 	.word	0x0000ee94
    c308:	0000eea4 	.word	0x0000eea4
    c30c:	0000eec8 	.word	0x0000eec8
    c310:	0000eeec 	.word	0x0000eeec
    c314:	0000ef10 	.word	0x0000ef10
    c318:	0000ef30 	.word	0x0000ef30
    c31c:	0000ef5c 	.word	0x0000ef5c
    c320:	0000ef88 	.word	0x0000ef88
    c324:	10001390 	.word	0x10001390

0000c328 <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
    c328:	b510      	push	{r4, lr}
    c32a:	b084      	sub	sp, #16
    c32c:	4604      	mov	r4, r0
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
    c32e:	a801      	add	r0, sp, #4
    c330:	f000 ffe4 	bl	d2fc <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
    c334:	9801      	ldr	r0, [sp, #4]
    c336:	4b05      	ldr	r3, [pc, #20]	; (c34c <am_util_delay_ms+0x24>)
    c338:	fba3 3000 	umull	r3, r0, r3, r0
    c33c:	0980      	lsrs	r0, r0, #6

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
    c33e:	fb04 f000 	mul.w	r0, r4, r0
    c342:	f000 fff9 	bl	d338 <am_hal_flash_delay>
}
    c346:	b004      	add	sp, #16
    c348:	bd10      	pop	{r4, pc}
    c34a:	bf00      	nop
    c34c:	057619f1 	.word	0x057619f1

0000c350 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c350:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c352:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c356:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c358:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c35c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c360:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c364:	f000 f806 	bl	c374 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c368:	bd01      	pop	{r0, pc}
    c36a:	bf00      	nop

0000c36c <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c36c:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c36e:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c370:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c372:	4770      	bx	lr

0000c374 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c374:	b500      	push	{lr}
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c376:	2300      	movs	r3, #0
{
    c378:	b093      	sub	sp, #76	; 0x4c
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c37a:	e9cd 3300 	strd	r3, r3, [sp]
    c37e:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c382:	e9cd 3304 	strd	r3, r3, [sp, #16]
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c386:	4a27      	ldr	r2, [pc, #156]	; (c424 <am_util_faultisr_collect_data+0xb0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c388:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c38a:	6813      	ldr	r3, [r2, #0]
    c38c:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c38e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c390:	b2db      	uxtb	r3, r3
    c392:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c396:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c398:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c39c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3a2:	0c1b      	lsrs	r3, r3, #16
    c3a4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3a8:	6913      	ldr	r3, [r2, #16]
    c3aa:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3ac:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c3b0:	0792      	lsls	r2, r2, #30
{
    c3b2:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3b4:	d430      	bmi.n	c418 <am_util_faultisr_collect_data+0xa4>
    c3b6:	f04f 32ff 	mov.w	r2, #4294967295

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3ba:	4619      	mov	r1, r3
    c3bc:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3be:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3c0:	f7ff ffd4 	bl	c36c <getStackedReg>
    c3c4:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3c6:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3c8:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3ca:	f7ff ffcf 	bl	c36c <getStackedReg>
    c3ce:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3d0:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3d2:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3d4:	f7ff ffca 	bl	c36c <getStackedReg>
    c3d8:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3da:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3dc:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3de:	f7ff ffc5 	bl	c36c <getStackedReg>
    c3e2:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3e4:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c3e6:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3e8:	f7ff ffc0 	bl	c36c <getStackedReg>
    c3ec:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3ee:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c3f0:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3f2:	f7ff ffbb 	bl	c36c <getStackedReg>
    c3f6:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3f8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c3fa:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c3fc:	f7ff ffb6 	bl	c36c <getStackedReg>
    c400:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c402:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c404:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c406:	f7ff ffb1 	bl	c36c <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c40a:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c40c:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c40e:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c410:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c412:	f001 fec3 	bl	e19c <am_hal_mcuctrl_info_get>
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    {
    }
    c416:	e7fe      	b.n	c416 <am_util_faultisr_collect_data+0xa2>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c418:	4601      	mov	r1, r0
    c41a:	2006      	movs	r0, #6
    c41c:	f7ff ffa6 	bl	c36c <getStackedReg>
    c420:	4602      	mov	r2, r0
    c422:	e7ca      	b.n	c3ba <am_util_faultisr_collect_data+0x46>
    c424:	e000ed28 	.word	0xe000ed28

0000c428 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c428:	b470      	push	{r4, r5, r6}
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c42a:	460d      	mov	r5, r1
    c42c:	2600      	movs	r6, #0
    c42e:	ea55 0306 	orrs.w	r3, r5, r6
    c432:	d046      	beq.n	c4c2 <divu64_10+0x9a>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c434:	0842      	lsrs	r2, r0, #1
    c436:	0883      	lsrs	r3, r0, #2
    c438:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
    c43c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c440:	18d2      	adds	r2, r2, r3
    c442:	ea4f 0491 	mov.w	r4, r1, lsr #2
    c446:	ea4f 0351 	mov.w	r3, r1, lsr #1
    c44a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 4);
    c44e:	0914      	lsrs	r4, r2, #4
    c450:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    c454:	1912      	adds	r2, r2, r4
    c456:	ea4f 1413 	mov.w	r4, r3, lsr #4
    c45a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 8);
    c45e:	0a14      	lsrs	r4, r2, #8
    c460:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    c464:	1912      	adds	r2, r2, r4
    c466:	ea4f 2413 	mov.w	r4, r3, lsr #8
    c46a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 16);
    c46e:	0c14      	lsrs	r4, r2, #16
    c470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c474:	1912      	adds	r2, r2, r4
    c476:	ea4f 4413 	mov.w	r4, r3, lsr #16
    c47a:	eb44 0303 	adc.w	r3, r4, r3
        q64 += (q64 >> 32);
    c47e:	18d2      	adds	r2, r2, r3
    c480:	4634      	mov	r4, r6
    c482:	eb43 0404 	adc.w	r4, r3, r4
        q64 >>= 3;
    c486:	08d3      	lsrs	r3, r2, #3
    c488:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c48c:	08e2      	lsrs	r2, r4, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
    c48e:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c490:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c494:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c498:	4171      	adcs	r1, r6
        r64 = ui64Val - q64*10;
    c49a:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c49e:	18e4      	adds	r4, r4, r3
    c4a0:	eb42 0505 	adc.w	r5, r2, r5
    c4a4:	1924      	adds	r4, r4, r4
    c4a6:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c4a8:	1b00      	subs	r0, r0, r4
    c4aa:	eb61 0105 	sbc.w	r1, r1, r5
    c4ae:	0900      	lsrs	r0, r0, #4
    c4b0:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c4b4:	18c0      	adds	r0, r0, r3
    c4b6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    c4ba:	eb42 0101 	adc.w	r1, r2, r1
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
    c4be:	bc70      	pop	{r4, r5, r6}
    c4c0:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c4c2:	0883      	lsrs	r3, r0, #2
    c4c4:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c4c8:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c4cc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c4d0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c4d4:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4d6:	3006      	adds	r0, #6
        r32 = ui32Val - q32*10;
    c4d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c4dc:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
    c4e0:	eb03 1010 	add.w	r0, r3, r0, lsr #4
    c4e4:	2100      	movs	r1, #0
}
    c4e6:	bc70      	pop	{r4, r5, r6}
    c4e8:	4770      	bx	lr
    c4ea:	bf00      	nop

0000c4ec <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4f0:	b08b      	sub	sp, #44	; 0x2c
    c4f2:	f10d 080c 	add.w	r8, sp, #12
    c4f6:	9201      	str	r2, [sp, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c4f8:	f04f 0b00 	mov.w	fp, #0
    c4fc:	e049      	b.n	c592 <uint64_to_str+0xa6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c4fe:	eb12 020e 	adds.w	r2, r2, lr
    c502:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 4);
    c506:	ea4f 1e12 	mov.w	lr, r2, lsr #4
    c50a:	ea4e 7e04 	orr.w	lr, lr, r4, lsl #28
    c50e:	eb12 020e 	adds.w	r2, r2, lr
    c512:	ea4f 1a14 	mov.w	sl, r4, lsr #4
    c516:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 8);
    c51a:	0a13      	lsrs	r3, r2, #8
    c51c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    c520:	18d2      	adds	r2, r2, r3
    c522:	ea4f 2a14 	mov.w	sl, r4, lsr #8
    c526:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 16);
    c52a:	0c13      	lsrs	r3, r2, #16
    c52c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    c530:	18d2      	adds	r2, r2, r3
    c532:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    c536:	eb44 040a 	adc.w	r4, r4, sl
        q64 += (q64 >> 32);
    c53a:	1912      	adds	r2, r2, r4
    c53c:	463b      	mov	r3, r7
    c53e:	eb44 0303 	adc.w	r3, r4, r3
    c542:	461c      	mov	r4, r3
        q64 >>= 3;
    c544:	08d3      	lsrs	r3, r2, #3
    c546:	ea43 7344 	orr.w	r3, r3, r4, lsl #29
    c54a:	08e2      	lsrs	r2, r4, #3
        return q64 + ((r64 + 6) >> 4);
    c54c:	3006      	adds	r0, #6
        r64 = ui64Val - q64*10;
    c54e:	ea4f 0483 	mov.w	r4, r3, lsl #2
    c552:	ea4f 0582 	mov.w	r5, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
    c556:	4179      	adcs	r1, r7
        r64 = ui64Val - q64*10;
    c558:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
    c55c:	18e4      	adds	r4, r4, r3
    c55e:	eb42 0505 	adc.w	r5, r2, r5
    c562:	1924      	adds	r4, r4, r4
    c564:	416d      	adcs	r5, r5
        return q64 + ((r64 + 6) >> 4);
    c566:	1b00      	subs	r0, r0, r4
    c568:	eb61 0105 	sbc.w	r1, r1, r5
    c56c:	0900      	lsrs	r0, r0, #4
    c56e:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
    c572:	18c0      	adds	r0, r0, r3
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c574:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c578:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c57c:	ea4f 1111 	mov.w	r1, r1, lsr #4

        tbuf[ix++] = uMod + '0';
    c580:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
        return q64 + ((r64 + 6) >> 4);
    c584:	eb42 0101 	adc.w	r1, r2, r1
        tbuf[ix++] = uMod + '0';
    c588:	f888 c000 	strb.w	ip, [r8]
        ui64Val = u64Tmp;
    c58c:	f108 0801 	add.w	r8, r8, #1
{
    c590:	46cb      	mov	fp, r9
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c592:	0883      	lsrs	r3, r0, #2
    c594:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
    c598:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c59c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c5a0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c5a4:	08dd      	lsrs	r5, r3, #3
        r32 = ui32Val - q32*10;
    c5a6:	eb05 0685 	add.w	r6, r5, r5, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5aa:	1d83      	adds	r3, r0, #6
    c5ac:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
    c5b0:	eb05 1313 	add.w	r3, r5, r3, lsr #4
    if ( ui64Val >> 32 )
    c5b4:	2700      	movs	r7, #0
    c5b6:	460e      	mov	r6, r1
        uMod = ui64Val - (u64Tmp * 10);
    c5b8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5bc:	0842      	lsrs	r2, r0, #1
    c5be:	ea4f 0e90 	mov.w	lr, r0, lsr #2
        uMod = ui64Val - (u64Tmp * 10);
    c5c2:	eba0 0545 	sub.w	r5, r0, r5, lsl #1
    if ( ui64Val >> 32 )
    c5c6:	433e      	orrs	r6, r7
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c5c8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    c5cc:	ea4e 7e81 	orr.w	lr, lr, r1, lsl #30
    c5d0:	ea4f 0451 	mov.w	r4, r1, lsr #1
    c5d4:	ea4f 0a91 	mov.w	sl, r1, lsr #2
        q64 += (q64 >> 32);
    c5d8:	9700      	str	r7, [sp, #0]
    c5da:	f10b 0901 	add.w	r9, fp, #1
    c5de:	4684      	mov	ip, r0
        tbuf[ix++] = uMod + '0';
    c5e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
    if ( ui64Val >> 32 )
    c5e4:	d18b      	bne.n	c4fe <uint64_to_str+0x12>
        tbuf[ix++] = uMod + '0';
    c5e6:	f888 5000 	strb.w	r5, [r8]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c5ea:	4618      	mov	r0, r3
    c5ec:	2100      	movs	r1, #0
    } while ( ui64Val );
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d1cc      	bne.n	c58c <uint64_to_str+0xa0>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c5f2:	9a01      	ldr	r2, [sp, #4]
    c5f4:	b172      	cbz	r2, c614 <uint64_to_str+0x128>
    c5f6:	ab03      	add	r3, sp, #12
    c5f8:	444b      	add	r3, r9
    c5fa:	3a01      	subs	r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c5fc:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c600:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c604:	a903      	add	r1, sp, #12
    c606:	4299      	cmp	r1, r3
    c608:	d1f8      	bne.n	c5fc <uint64_to_str+0x110>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c60a:	9b01      	ldr	r3, [sp, #4]
    c60c:	445b      	add	r3, fp
    c60e:	461a      	mov	r2, r3
    c610:	2300      	movs	r3, #0
    c612:	7053      	strb	r3, [r2, #1]
    }

    return iNumDig;
}
    c614:	4648      	mov	r0, r9
    c616:	b00b      	add	sp, #44	; 0x2c
    c618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c61c <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c61c:	4b01      	ldr	r3, [pc, #4]	; (c624 <am_util_stdio_printf_init+0x8>)
    c61e:	6018      	str	r0, [r3, #0]
}
    c620:	4770      	bx	lr
    c622:	bf00      	nop
    c624:	100013a0 	.word	0x100013a0

0000c628 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c62c:	b089      	sub	sp, #36	; 0x24
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c62e:	780b      	ldrb	r3, [r1, #0]
{
    c630:	9200      	str	r2, [sp, #0]
    c632:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
    c634:	2b00      	cmp	r3, #0
    c636:	f000 8355 	beq.w	cce4 <am_util_stdio_vsprintf+0x6bc>
    c63a:	468a      	mov	sl, r1
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c63c:	f04f 0b00 	mov.w	fp, #0
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c640:	2b25      	cmp	r3, #37	; 0x25
    c642:	f10a 0701 	add.w	r7, sl, #1
    c646:	d018      	beq.n	c67a <am_util_stdio_vsprintf+0x52>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c648:	f10b 0201 	add.w	r2, fp, #1
    c64c:	2c00      	cmp	r4, #0
    c64e:	f000 8092 	beq.w	c776 <am_util_stdio_vsprintf+0x14e>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c652:	2b0a      	cmp	r3, #10
    c654:	f104 0101 	add.w	r1, r4, #1
    c658:	f000 808f 	beq.w	c77a <am_util_stdio_vsprintf+0x152>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c65c:	7023      	strb	r3, [r4, #0]
    c65e:	4693      	mov	fp, r2
    c660:	460c      	mov	r4, r1
            }

            ++pcFmt;
    c662:	46ba      	mov	sl, r7
    while ( *pcFmt != 0x0 )
    c664:	f89a 3000 	ldrb.w	r3, [sl]
    c668:	2b00      	cmp	r3, #0
    c66a:	d1e9      	bne.n	c640 <am_util_stdio_vsprintf+0x18>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c66c:	b10c      	cbz	r4, c672 <am_util_stdio_vsprintf+0x4a>
    {
        *pcBuf = 0x0;
    c66e:	2300      	movs	r3, #0
    c670:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
    c672:	4658      	mov	r0, fp
    c674:	b009      	add	sp, #36	; 0x24
    c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c67a:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c67e:	2a30      	cmp	r2, #48	; 0x30
            ++pcFmt;
    c680:	bf03      	ittte	eq
    c682:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
    c686:	f10a 0702 	addeq.w	r7, sl, #2
            ui8PadChar = '0';
    c68a:	2630      	moveq	r6, #48	; 0x30
        ui8PadChar = ' ';
    c68c:	2620      	movne	r6, #32
    if ( *pcStr == '-')
    c68e:	2a2d      	cmp	r2, #45	; 0x2d
    c690:	f000 8083 	beq.w	c79a <am_util_stdio_vsprintf+0x172>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c694:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    uint32_t ui32Val = 0, uCnt = 0;
    c698:	2500      	movs	r5, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c69a:	2909      	cmp	r1, #9
    bool bNeg = false;
    c69c:	46ac      	mov	ip, r5
    if ( *pcStr == '-')
    c69e:	463b      	mov	r3, r7
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6a0:	f200 8085 	bhi.w	c7ae <am_util_stdio_vsprintf+0x186>
    c6a4:	3501      	adds	r5, #1
    c6a6:	1aed      	subs	r5, r5, r3
    c6a8:	2100      	movs	r1, #0
        ui32Val *= 10;
    c6aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
    c6ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c6b2:	eb03 0e05 	add.w	lr, r3, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c6ba:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c6be:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c6c0:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c6c4:	d9f1      	bls.n	c6aa <am_util_stdio_vsprintf+0x82>
    c6c6:	f817 200e 	ldrb.w	r2, [r7, lr]
    c6ca:	eb07 030e 	add.w	r3, r7, lr
    return bNeg ? -ui32Val : ui32Val;
    c6ce:	f1bc 0f00 	cmp.w	ip, #0
    c6d2:	d000      	beq.n	c6d6 <am_util_stdio_vsprintf+0xae>
    c6d4:	4249      	negs	r1, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c6d6:	2a73      	cmp	r2, #115	; 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    c6d8:	460d      	mov	r5, r1
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c6da:	f103 0a01 	add.w	sl, r3, #1
    c6de:	f000 81ca 	beq.w	ca76 <am_util_stdio_vsprintf+0x44e>
    c6e2:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
        if (*pcFmt == '.')
    c6e6:	2a2e      	cmp	r2, #46	; 0x2e
    c6e8:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
    c6ec:	f000 815c 	beq.w	c9a8 <am_util_stdio_vsprintf+0x380>
        iPrecision = 6;             // printf() default precision for %f is 6
    c6f0:	2706      	movs	r7, #6
        if ( *pcFmt == 'l' )
    c6f2:	2a6c      	cmp	r2, #108	; 0x6c
    c6f4:	d105      	bne.n	c702 <am_util_stdio_vsprintf+0xda>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    c6f6:	785a      	ldrb	r2, [r3, #1]
    c6f8:	2a6c      	cmp	r2, #108	; 0x6c
    c6fa:	f000 820a 	beq.w	cb12 <am_util_stdio_vsprintf+0x4ea>
    c6fe:	f10a 0a01 	add.w	sl, sl, #1
        switch ( *pcFmt )
    c702:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    c706:	2b32      	cmp	r3, #50	; 0x32
    c708:	f200 8141 	bhi.w	c98e <am_util_stdio_vsprintf+0x366>
    c70c:	e8df f013 	tbh	[pc, r3, lsl #1]
    c710:	013f005b 	.word	0x013f005b
    c714:	013f013f 	.word	0x013f013f
    c718:	013f013f 	.word	0x013f013f
    c71c:	013f013f 	.word	0x013f013f
    c720:	013f013f 	.word	0x013f013f
    c724:	013f013f 	.word	0x013f013f
    c728:	013f013f 	.word	0x013f013f
    c72c:	013f013f 	.word	0x013f013f
    c730:	013f013f 	.word	0x013f013f
    c734:	013f00d6 	.word	0x013f00d6
    c738:	013f013f 	.word	0x013f013f
    c73c:	013f013f 	.word	0x013f013f
    c740:	013f013f 	.word	0x013f013f
    c744:	013f013f 	.word	0x013f013f
    c748:	0051013f 	.word	0x0051013f
    c74c:	013f00ed 	.word	0x013f00ed
    c750:	013f005b 	.word	0x013f005b
    c754:	00ed013f 	.word	0x00ed013f
    c758:	013f013f 	.word	0x013f013f
    c75c:	013f013f 	.word	0x013f013f
    c760:	013f013f 	.word	0x013f013f
    c764:	013f013f 	.word	0x013f013f
    c768:	01b3013f 	.word	0x01b3013f
    c76c:	00d9013f 	.word	0x00d9013f
    c770:	013f013f 	.word	0x013f013f
    c774:	00bc      	.short	0x00bc
    c776:	4693      	mov	fp, r2
    c778:	e773      	b.n	c662 <am_util_stdio_vsprintf+0x3a>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c77a:	48ce      	ldr	r0, [pc, #824]	; (cab4 <am_util_stdio_vsprintf+0x48c>)
    c77c:	7800      	ldrb	r0, [r0, #0]
    c77e:	2800      	cmp	r0, #0
    c780:	f43f af6c 	beq.w	c65c <am_util_stdio_vsprintf+0x34>
                    *pcBuf++ = '\r';
    c784:	4620      	mov	r0, r4
    c786:	230d      	movs	r3, #13
    c788:	f800 3b02 	strb.w	r3, [r0], #2
    c78c:	460c      	mov	r4, r1
    c78e:	f89a 3000 	ldrb.w	r3, [sl]
    c792:	f10b 0202 	add.w	r2, fp, #2
    c796:	4601      	mov	r1, r0
    c798:	e760      	b.n	c65c <am_util_stdio_vsprintf+0x34>
        pcStr++;
    c79a:	787a      	ldrb	r2, [r7, #1]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c79c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
        uCnt++;
    c7a0:	2501      	movs	r5, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7a2:	2909      	cmp	r1, #9
        bNeg = true;
    c7a4:	46ac      	mov	ip, r5
        pcStr++;
    c7a6:	eb07 0305 	add.w	r3, r7, r5
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c7aa:	f67f af7b 	bls.w	c6a4 <am_util_stdio_vsprintf+0x7c>
    c7ae:	2100      	movs	r1, #0
    c7b0:	e78d      	b.n	c6ce <am_util_stdio_vsprintf+0xa6>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7b2:	9a00      	ldr	r2, [sp, #0]
    c7b4:	1d13      	adds	r3, r2, #4
                if ( pcBuf )
    c7b6:	b114      	cbz	r4, c7be <am_util_stdio_vsprintf+0x196>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7b8:	6812      	ldr	r2, [r2, #0]
    c7ba:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c7be:	f10b 0b01 	add.w	fp, fp, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c7c2:	9300      	str	r3, [sp, #0]
                break;
    c7c4:	e74e      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
                if ( pcBuf )
    c7c6:	2c00      	cmp	r4, #0
    c7c8:	f43f af4c 	beq.w	c664 <am_util_stdio_vsprintf+0x3c>
                    float fValue = va_arg(pArgs, double);
    c7cc:	9b00      	ldr	r3, [sp, #0]
    c7ce:	3307      	adds	r3, #7
    c7d0:	f023 0307 	bic.w	r3, r3, #7
    c7d4:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    c7d8:	9300      	str	r3, [sp, #0]
    c7da:	f7ff fc91 	bl	c100 <__aeabi_d2f>
    c7de:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c7e2:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c7e6:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c7ec:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
    c7ee:	f000 8372 	beq.w	ced6 <am_util_stdio_vsprintf+0x8ae>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    c7f2:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    c7f6:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    unFloatValue.F = fValue;
    c7fa:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    c7fc:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    c7fe:	f3c0 0016 	ubfx	r0, r0, #0, #23
    c802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    c806:	f300 8387 	bgt.w	cf18 <am_util_stdio_vsprintf+0x8f0>
    else if (iExp2 < -23)
    c80a:	f112 0f17 	cmn.w	r2, #23
    c80e:	f2c0 8381 	blt.w	cf14 <am_util_stdio_vsprintf+0x8ec>
    else if (iExp2 >= 23)
    c812:	2a16      	cmp	r2, #22
    c814:	f104 0601 	add.w	r6, r4, #1
    c818:	f340 82a1 	ble.w	cd5e <am_util_stdio_vsprintf+0x736>
        i32IntPart = i32Significand << (iExp2 - 23);
    c81c:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    c81e:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    c820:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    c824:	f2c0 82e6 	blt.w	cdf4 <am_util_stdio_vsprintf+0x7cc>
    c828:	46a0      	mov	r8, r4
    i32FracPart = 0;
    c82a:	2500      	movs	r5, #0
    if (i32IntPart == 0)
    c82c:	2800      	cmp	r0, #0
    c82e:	f000 8350 	beq.w	ced2 <am_util_stdio_vsprintf+0x8aa>
        if (i32IntPart > 0)
    c832:	f300 82a3 	bgt.w	cd7c <am_util_stdio_vsprintf+0x754>
            uint64_to_str(-i32IntPart, pcBuf);
    c836:	4240      	negs	r0, r0
            *pcBuf++ = '-';
    c838:	232d      	movs	r3, #45	; 0x2d
    c83a:	f888 3000 	strb.w	r3, [r8]
            uint64_to_str(-i32IntPart, pcBuf);
    c83e:	4632      	mov	r2, r6
    c840:	17c1      	asrs	r1, r0, #31
    c842:	f7ff fe53 	bl	c4ec <uint64_to_str>
            *pcBuf++ = '-';
    c846:	46b0      	mov	r8, r6
            uint64_to_str(-i32IntPart, pcBuf);
    c848:	3601      	adds	r6, #1
        while (*pcBuf)    // Get to end of new string
    c84a:	f898 3000 	ldrb.w	r3, [r8]
    c84e:	b90b      	cbnz	r3, c854 <am_util_stdio_vsprintf+0x22c>
    c850:	e380      	b.n	cf54 <am_util_stdio_vsprintf+0x92c>
    c852:	46b0      	mov	r8, r6
    c854:	f898 3001 	ldrb.w	r3, [r8, #1]
            pcBuf++;
    c858:	f108 0601 	add.w	r6, r8, #1
        while (*pcBuf)    // Get to end of new string
    c85c:	2b00      	cmp	r3, #0
    c85e:	d1f8      	bne.n	c852 <am_util_stdio_vsprintf+0x22a>
    c860:	f108 0202 	add.w	r2, r8, #2
    *pcBuf++ = '.';
    c864:	232e      	movs	r3, #46	; 0x2e
    c866:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    c868:	2d00      	cmp	r5, #0
    c86a:	f040 82e5 	bne.w	ce38 <am_util_stdio_vsprintf+0x810>
        *pcBuf++ = '0';
    c86e:	1cb1      	adds	r1, r6, #2
    c870:	2330      	movs	r3, #48	; 0x30
    c872:	1b08      	subs	r0, r1, r4
    c874:	7073      	strb	r3, [r6, #1]
    *pcBuf = 0x00;
    c876:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    c878:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
    c87a:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
    c87c:	f2c0 8310 	blt.w	cea0 <am_util_stdio_vsprintf+0x878>
    c880:	4603      	mov	r3, r0
                    ui32CharCnt += iVal;
    c882:	449b      	add	fp, r3
                    pcBuf += iVal;
    c884:	441c      	add	r4, r3
    c886:	e6ed      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    c888:	f04f 0901 	mov.w	r9, #1
                                      va_arg(pArgs, uint32_t);
    c88c:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c88e:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c892:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c894:	2300      	movs	r3, #0
                if ( iWidth )
    c896:	2900      	cmp	r1, #0
    c898:	f040 81d5 	bne.w	cc46 <am_util_stdio_vsprintf+0x61e>
    if ( ui64Val == 0 )
    c89c:	ea52 0103 	orrs.w	r1, r2, r3
    c8a0:	f040 80ac 	bne.w	c9fc <am_util_stdio_vsprintf+0x3d4>
    if (pcBuf)
    c8a4:	2c00      	cmp	r4, #0
    c8a6:	d07b      	beq.n	c9a0 <am_util_stdio_vsprintf+0x378>
            *pcBuf++ = tbuf[ix];
    c8a8:	4623      	mov	r3, r4
    c8aa:	2230      	movs	r2, #48	; 0x30
    c8ac:	f803 2b01 	strb.w	r2, [r3], #1
    c8b0:	2001      	movs	r0, #1
    c8b2:	461c      	mov	r4, r3
        *pcBuf = 0;
    c8b4:	2200      	movs	r2, #0
    c8b6:	701a      	strb	r2, [r3, #0]
                ui32CharCnt += iVal;
    c8b8:	4483      	add	fp, r0
                break;
    c8ba:	e6d3      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
        bLower = bLongLong = false;
    c8bc:	f04f 0900 	mov.w	r9, #0
    c8c0:	e7e4      	b.n	c88c <am_util_stdio_vsprintf+0x264>
                                      va_arg(pArgs, uint32_t);
    c8c2:	9b00      	ldr	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8c4:	f853 2b04 	ldr.w	r2, [r3], #4
                                      va_arg(pArgs, uint32_t);
    c8c8:	9300      	str	r3, [sp, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c8ca:	4690      	mov	r8, r2
    c8cc:	f04f 0900 	mov.w	r9, #0
                if ( iWidth )
    c8d0:	2900      	cmp	r1, #0
    c8d2:	f040 8213 	bne.w	ccfc <am_util_stdio_vsprintf+0x6d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c8d6:	4640      	mov	r0, r8
    c8d8:	4649      	mov	r1, r9
    c8da:	4622      	mov	r2, r4
    c8dc:	f7ff fe06 	bl	c4ec <uint64_to_str>
                if ( pcBuf )
    c8e0:	2c00      	cmp	r4, #0
    c8e2:	d05e      	beq.n	c9a2 <am_util_stdio_vsprintf+0x37a>
                    pcBuf += iVal;
    c8e4:	4404      	add	r4, r0
                ui32CharCnt += iVal;
    c8e6:	4483      	add	fp, r0
                break;
    c8e8:	e6bc      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
                                     va_arg(pArgs, int32_t);
    c8ea:	9b00      	ldr	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c8ec:	f853 2b04 	ldr.w	r2, [r3], #4
                                     va_arg(pArgs, int32_t);
    c8f0:	9300      	str	r3, [sp, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c8f2:	4690      	mov	r8, r2
    c8f4:	ea4f 79e2 	mov.w	r9, r2, asr #31
                if ( i64Val < 0 )
    c8f8:	f1b8 0f00 	cmp.w	r8, #0
    c8fc:	f179 0300 	sbcs.w	r3, r9, #0
    c900:	f2c0 8178 	blt.w	cbf4 <am_util_stdio_vsprintf+0x5cc>
                if ( iWidth )
    c904:	2900      	cmp	r1, #0
    c906:	d039      	beq.n	c97c <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    c908:	ea58 0309 	orrs.w	r3, r8, r9
    c90c:	bf0c      	ite	eq
    c90e:	2701      	moveq	r7, #1
    c910:	2700      	movne	r7, #0
    while ( ui64Val )
    c912:	ea58 0309 	orrs.w	r3, r8, r9
    c916:	f000 8317 	beq.w	cf48 <am_util_stdio_vsprintf+0x920>
                    bNeg = false;
    c91a:	2300      	movs	r3, #0
    c91c:	9301      	str	r3, [sp, #4]
    c91e:	4640      	mov	r0, r8
    c920:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    c922:	f7ff fd81 	bl	c428 <divu64_10>
    while ( ui64Val )
    c926:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    c92a:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    c92e:	d1f8      	bne.n	c922 <am_util_stdio_vsprintf+0x2fa>
                    if ( bNeg )
    c930:	9b01      	ldr	r3, [sp, #4]
                    iWidth -= ndigits_in_i64(ui64Val);
    c932:	1bed      	subs	r5, r5, r7
                    if ( bNeg )
    c934:	b123      	cbz	r3, c940 <am_util_stdio_vsprintf+0x318>
                        if ( ui8PadChar == '0' )
    c936:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    c938:	f105 35ff 	add.w	r5, r5, #4294967295
                        if ( ui8PadChar == '0' )
    c93c:	f000 8253 	beq.w	cde6 <am_util_stdio_vsprintf+0x7be>
    if ( i32NumChars <= 0 )
    c940:	2d00      	cmp	r5, #0
    c942:	f340 82c4 	ble.w	cece <am_util_stdio_vsprintf+0x8a6>
    while ( i32NumChars-- )
    c946:	1e6b      	subs	r3, r5, #1
    c948:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    c94a:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    c94c:	463d      	mov	r5, r7
    c94e:	1e58      	subs	r0, r3, #1
    c950:	1c51      	adds	r1, r2, #1
        if ( pcBuf )
    c952:	2f00      	cmp	r7, #0
    c954:	f000 8168 	beq.w	cc28 <am_util_stdio_vsprintf+0x600>
            *pcBuf++ = cPadChar;
    c958:	f805 6b01 	strb.w	r6, [r5], #1
    c95c:	4684      	mov	ip, r0
    c95e:	462f      	mov	r7, r5
    c960:	4618      	mov	r0, r3
    c962:	460a      	mov	r2, r1
    c964:	4663      	mov	r3, ip
    while ( i32NumChars-- )
    c966:	2800      	cmp	r0, #0
    c968:	d1f0      	bne.n	c94c <am_util_stdio_vsprintf+0x324>
    c96a:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    c96c:	2c00      	cmp	r4, #0
    c96e:	f000 829f 	beq.w	ceb0 <am_util_stdio_vsprintf+0x888>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c972:	9b01      	ldr	r3, [sp, #4]
                    pcBuf += pcBuf ? iWidth : 0;
    c974:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c976:	2b00      	cmp	r3, #0
    c978:	f040 81b6 	bne.w	cce8 <am_util_stdio_vsprintf+0x6c0>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c97c:	4640      	mov	r0, r8
    c97e:	4649      	mov	r1, r9
    c980:	4622      	mov	r2, r4
    c982:	f7ff fdb3 	bl	c4ec <uint64_to_str>
                if ( pcBuf )
    c986:	2c00      	cmp	r4, #0
    c988:	d096      	beq.n	c8b8 <am_util_stdio_vsprintf+0x290>
                    pcBuf += iVal;
    c98a:	4404      	add	r4, r0
    c98c:	e7ab      	b.n	c8e6 <am_util_stdio_vsprintf+0x2be>
                if ( pcBuf )
    c98e:	b10c      	cbz	r4, c994 <am_util_stdio_vsprintf+0x36c>
                    *pcBuf++ = *pcFmt;
    c990:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
    c994:	f10b 0b01 	add.w	fp, fp, #1
                break;
    c998:	e664      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
    if ( ui64Val == 0 )
    c99a:	ea52 0103 	orrs.w	r1, r2, r3
    c99e:	d12d      	bne.n	c9fc <am_util_stdio_vsprintf+0x3d4>
    c9a0:	2001      	movs	r0, #1
                if ( pcBuf )
    c9a2:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
    c9a4:	4483      	add	fp, r0
                break;
    c9a6:	e65d      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
    if ( *pcStr == '-')
    c9a8:	785a      	ldrb	r2, [r3, #1]
    c9aa:	2a2d      	cmp	r2, #45	; 0x2d
    c9ac:	f000 818e 	beq.w	cccc <am_util_stdio_vsprintf+0x6a4>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c9b4:	2b09      	cmp	r3, #9
    c9b6:	f200 8298 	bhi.w	ceea <am_util_stdio_vsprintf+0x8c2>
    uint32_t ui32Val = 0, uCnt = 0;
    c9ba:	2000      	movs	r0, #0
    bool bNeg = false;
    c9bc:	4680      	mov	r8, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9be:	46d6      	mov	lr, sl
    c9c0:	4653      	mov	r3, sl
    c9c2:	3001      	adds	r0, #1
    c9c4:	eba0 0e0e 	sub.w	lr, r0, lr
    bool bNeg = false;
    c9c8:	2700      	movs	r7, #0
        ui32Val *= 10;
    c9ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
        ui32Val += (*pcStr - '0');
    c9ce:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    c9d2:	eb03 0c0e 	add.w	ip, r3, lr
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c9da:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    c9de:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
    c9e0:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9e4:	d9f1      	bls.n	c9ca <am_util_stdio_vsprintf+0x3a2>
    return bNeg ? -ui32Val : ui32Val;
    c9e6:	f1b8 0f00 	cmp.w	r8, #0
    c9ea:	d000      	beq.n	c9ee <am_util_stdio_vsprintf+0x3c6>
    c9ec:	427f      	negs	r7, r7
            pcFmt += ui32NumChars;
    c9ee:	eb0a 030c 	add.w	r3, sl, ip
    c9f2:	f81a 200c 	ldrb.w	r2, [sl, ip]
    c9f6:	f103 0a01 	add.w	sl, r3, #1
    c9fa:	e67a      	b.n	c6f2 <am_util_stdio_vsprintf+0xca>
    c9fc:	f1b9 0f00 	cmp.w	r9, #0
    ca00:	bf14      	ite	ne
    ca02:	2627      	movne	r6, #39	; 0x27
    ca04:	2607      	moveq	r6, #7
    if ( i32NumChars <= 0 )
    ca06:	f10d 0c0c 	add.w	ip, sp, #12
    int iNumDig, ix = 0;
    ca0a:	2700      	movs	r7, #0
    ca0c:	9401      	str	r4, [sp, #4]
        ui64Val >>= 4;
    ca0e:	0915      	lsrs	r5, r2, #4
        cCh = ui64Val & 0xf;
    ca10:	f002 020f 	and.w	r2, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    ca14:	18b0      	adds	r0, r6, r2
        if ( cCh > 9 )
    ca16:	2a09      	cmp	r2, #9
        ui64Val >>= 4;
    ca18:	ea4f 1913 	mov.w	r9, r3, lsr #4
    ca1c:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
        tbuf[ix++] = cCh + '0';
    ca20:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ca24:	f102 0e30 	add.w	lr, r2, #48	; 0x30
    ca28:	f107 0401 	add.w	r4, r7, #1
        if ( cCh > 9 )
    ca2c:	d908      	bls.n	ca40 <am_util_stdio_vsprintf+0x418>
        ui64Val >>= 4;
    ca2e:	462a      	mov	r2, r5
    ca30:	464b      	mov	r3, r9
    while ( ui64Val )
    ca32:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    ca36:	f80c 0b01 	strb.w	r0, [ip], #1
    while ( ui64Val )
    ca3a:	d00a      	beq.n	ca52 <am_util_stdio_vsprintf+0x42a>
    if ( i32NumChars <= 0 )
    ca3c:	4627      	mov	r7, r4
    ca3e:	e7e6      	b.n	ca0e <am_util_stdio_vsprintf+0x3e6>
        ui64Val >>= 4;
    ca40:	462a      	mov	r2, r5
    ca42:	464b      	mov	r3, r9
    while ( ui64Val )
    ca44:	ea52 0103 	orrs.w	r1, r2, r3
        tbuf[ix++] = cCh + '0';
    ca48:	f107 0401 	add.w	r4, r7, #1
    ca4c:	f80c eb01 	strb.w	lr, [ip], #1
    while ( ui64Val )
    ca50:	d1f4      	bne.n	ca3c <am_util_stdio_vsprintf+0x414>
    if (pcBuf)
    ca52:	4626      	mov	r6, r4
    ca54:	9c01      	ldr	r4, [sp, #4]
    ca56:	4630      	mov	r0, r6
    ca58:	2c00      	cmp	r4, #0
    ca5a:	d0a2      	beq.n	c9a2 <am_util_stdio_vsprintf+0x37a>
    ca5c:	ab03      	add	r3, sp, #12
    ca5e:	4433      	add	r3, r6
    ca60:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
    ca62:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    ca66:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    ca6a:	a903      	add	r1, sp, #12
    ca6c:	428b      	cmp	r3, r1
    ca6e:	d1f8      	bne.n	ca62 <am_util_stdio_vsprintf+0x43a>
    ca70:	4434      	add	r4, r6
    ca72:	4623      	mov	r3, r4
    ca74:	e71e      	b.n	c8b4 <am_util_stdio_vsprintf+0x28c>
                pcStr = va_arg(pArgs, char *);
    ca76:	f8dd c000 	ldr.w	ip, [sp]
    ca7a:	f85c 3b04 	ldr.w	r3, [ip], #4
    if ( !pcBuf )
    ca7e:	2b00      	cmp	r3, #0
    ca80:	f000 8181 	beq.w	cd86 <am_util_stdio_vsprintf+0x75e>
    while ( *pcBuf++ )
    ca84:	4618      	mov	r0, r3
    ca86:	f810 1b01 	ldrb.w	r1, [r0], #1
    ca8a:	2900      	cmp	r1, #0
    ca8c:	f000 8231 	beq.w	cef2 <am_util_stdio_vsprintf+0x8ca>
    uint32_t ui32RetVal = 0;
    ca90:	2700      	movs	r7, #0
    while ( *pcBuf++ )
    ca92:	f810 2b01 	ldrb.w	r2, [r0], #1
        ui32RetVal++;
    ca96:	3701      	adds	r7, #1
    while ( *pcBuf++ )
    ca98:	2a00      	cmp	r2, #0
    ca9a:	d1fa      	bne.n	ca92 <am_util_stdio_vsprintf+0x46a>
                if ( iWidth > 0 )
    ca9c:	2d00      	cmp	r5, #0
    ca9e:	dd02      	ble.n	caa6 <am_util_stdio_vsprintf+0x47e>
                    if ( ui32strlen < iWidth )
    caa0:	42bd      	cmp	r5, r7
    caa2:	f200 819c 	bhi.w	cdde <am_util_stdio_vsprintf+0x7b6>
    caa6:	f1c3 0801 	rsb	r8, r3, #1
    caaa:	eb08 000b 	add.w	r0, r8, fp
                while (*pcStr != 0x0)
    caae:	4622      	mov	r2, r4
    cab0:	e003      	b.n	caba <am_util_stdio_vsprintf+0x492>
    cab2:	bf00      	nop
    cab4:	10001020 	.word	0x10001020
                        *pcBuf++ = *pcStr;
    cab8:	4622      	mov	r2, r4
    caba:	eb00 0e03 	add.w	lr, r0, r3
                    if ( pcBuf )
    cabe:	2c00      	cmp	r4, #0
    cac0:	f000 80b8 	beq.w	cc34 <am_util_stdio_vsprintf+0x60c>
                        *pcBuf++ = *pcStr;
    cac4:	7011      	strb	r1, [r2, #0]
                while (*pcStr != 0x0)
    cac6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
                        *pcBuf++ = *pcStr;
    caca:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
    cacc:	2900      	cmp	r1, #0
    cace:	d1f3      	bne.n	cab8 <am_util_stdio_vsprintf+0x490>
                    ++ui32CharCnt;
    cad0:	46f3      	mov	fp, lr
                if ( iWidth )
    cad2:	b1dd      	cbz	r5, cb0c <am_util_stdio_vsprintf+0x4e4>
                    iWidth = -iWidth;
    cad4:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    cad6:	42bd      	cmp	r5, r7
    cad8:	d918      	bls.n	cb0c <am_util_stdio_vsprintf+0x4e4>
                        iWidth -= ui32strlen;
    cada:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cadc:	2d00      	cmp	r5, #0
    cade:	f340 8217 	ble.w	cf10 <am_util_stdio_vsprintf+0x8e8>
    while ( i32NumChars-- )
    cae2:	1e6b      	subs	r3, r5, #1
    cae4:	4627      	mov	r7, r4
    int32_t i32Cnt = 0;
    cae6:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cae8:	463d      	mov	r5, r7
    caea:	1c51      	adds	r1, r2, #1
    caec:	1e58      	subs	r0, r3, #1
        if ( pcBuf )
    caee:	2f00      	cmp	r7, #0
    caf0:	f000 80e3 	beq.w	ccba <am_util_stdio_vsprintf+0x692>
            *pcBuf++ = cPadChar;
    caf4:	f805 6b01 	strb.w	r6, [r5], #1
    caf8:	4686      	mov	lr, r0
    cafa:	4618      	mov	r0, r3
    cafc:	462f      	mov	r7, r5
    cafe:	460a      	mov	r2, r1
    cb00:	4673      	mov	r3, lr
    while ( i32NumChars-- )
    cb02:	2800      	cmp	r0, #0
    cb04:	d1f0      	bne.n	cae8 <am_util_stdio_vsprintf+0x4c0>
    cb06:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    cb08:	b104      	cbz	r4, cb0c <am_util_stdio_vsprintf+0x4e4>
    cb0a:	4414      	add	r4, r2
                pcStr = va_arg(pArgs, char *);
    cb0c:	f8cd c000 	str.w	ip, [sp]
        ++pcFmt;
    cb10:	e5a8      	b.n	c664 <am_util_stdio_vsprintf+0x3c>
        switch ( *pcFmt )
    cb12:	789a      	ldrb	r2, [r3, #2]
    cb14:	f1a2 0046 	sub.w	r0, r2, #70	; 0x46
    cb18:	f103 0a03 	add.w	sl, r3, #3
    cb1c:	2832      	cmp	r0, #50	; 0x32
    cb1e:	f63f af36 	bhi.w	c98e <am_util_stdio_vsprintf+0x366>
    cb22:	a301      	add	r3, pc, #4	; (adr r3, cb28 <am_util_stdio_vsprintf+0x500>)
    cb24:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    cb28:	0000c7c7 	.word	0x0000c7c7
    cb2c:	0000c98f 	.word	0x0000c98f
    cb30:	0000c98f 	.word	0x0000c98f
    cb34:	0000c98f 	.word	0x0000c98f
    cb38:	0000c98f 	.word	0x0000c98f
    cb3c:	0000c98f 	.word	0x0000c98f
    cb40:	0000c98f 	.word	0x0000c98f
    cb44:	0000c98f 	.word	0x0000c98f
    cb48:	0000c98f 	.word	0x0000c98f
    cb4c:	0000c98f 	.word	0x0000c98f
    cb50:	0000c98f 	.word	0x0000c98f
    cb54:	0000c98f 	.word	0x0000c98f
    cb58:	0000c98f 	.word	0x0000c98f
    cb5c:	0000c98f 	.word	0x0000c98f
    cb60:	0000c98f 	.word	0x0000c98f
    cb64:	0000c98f 	.word	0x0000c98f
    cb68:	0000c98f 	.word	0x0000c98f
    cb6c:	0000c98f 	.word	0x0000c98f
    cb70:	0000cdd9 	.word	0x0000cdd9
    cb74:	0000c98f 	.word	0x0000c98f
    cb78:	0000c98f 	.word	0x0000c98f
    cb7c:	0000c98f 	.word	0x0000c98f
    cb80:	0000c98f 	.word	0x0000c98f
    cb84:	0000c98f 	.word	0x0000c98f
    cb88:	0000c98f 	.word	0x0000c98f
    cb8c:	0000c98f 	.word	0x0000c98f
    cb90:	0000c98f 	.word	0x0000c98f
    cb94:	0000c98f 	.word	0x0000c98f
    cb98:	0000c98f 	.word	0x0000c98f
    cb9c:	0000c7b3 	.word	0x0000c7b3
    cba0:	0000cc19 	.word	0x0000cc19
    cba4:	0000c98f 	.word	0x0000c98f
    cba8:	0000c7c7 	.word	0x0000c7c7
    cbac:	0000c98f 	.word	0x0000c98f
    cbb0:	0000c98f 	.word	0x0000c98f
    cbb4:	0000cc19 	.word	0x0000cc19
    cbb8:	0000c98f 	.word	0x0000c98f
    cbbc:	0000c98f 	.word	0x0000c98f
    cbc0:	0000c98f 	.word	0x0000c98f
    cbc4:	0000c98f 	.word	0x0000c98f
    cbc8:	0000c98f 	.word	0x0000c98f
    cbcc:	0000c98f 	.word	0x0000c98f
    cbd0:	0000c98f 	.word	0x0000c98f
    cbd4:	0000c98f 	.word	0x0000c98f
    cbd8:	0000c98f 	.word	0x0000c98f
    cbdc:	0000ca77 	.word	0x0000ca77
    cbe0:	0000c98f 	.word	0x0000c98f
    cbe4:	0000cc09 	.word	0x0000cc09
    cbe8:	0000c98f 	.word	0x0000c98f
    cbec:	0000c98f 	.word	0x0000c98f
    cbf0:	0000cdc3 	.word	0x0000cdc3
                    ui64Val = -i64Val;          // Get absolute value
    cbf4:	f1d8 0800 	rsbs	r8, r8, #0
    cbf8:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
                if ( iWidth )
    cbfc:	2900      	cmp	r1, #0
    cbfe:	d076      	beq.n	ccee <am_util_stdio_vsprintf+0x6c6>
                    bNeg = true;
    cc00:	2301      	movs	r3, #1
    cc02:	9301      	str	r3, [sp, #4]
    int iNDigits = ui64Val ? 0 : 1;
    cc04:	2700      	movs	r7, #0
    cc06:	e68a      	b.n	c91e <am_util_stdio_vsprintf+0x2f6>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cc08:	9b00      	ldr	r3, [sp, #0]
    cc0a:	3307      	adds	r3, #7
    cc0c:	f023 0307 	bic.w	r3, r3, #7
    cc10:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cc14:	9300      	str	r3, [sp, #0]
    cc16:	e65b      	b.n	c8d0 <am_util_stdio_vsprintf+0x2a8>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cc18:	9b00      	ldr	r3, [sp, #0]
    cc1a:	3307      	adds	r3, #7
    cc1c:	f023 0307 	bic.w	r3, r3, #7
    cc20:	e8f3 8902 	ldrd	r8, r9, [r3], #8
    cc24:	9300      	str	r3, [sp, #0]
    cc26:	e667      	b.n	c8f8 <am_util_stdio_vsprintf+0x2d0>
    while ( i32NumChars-- )
    cc28:	2b00      	cmp	r3, #0
    cc2a:	f000 815b 	beq.w	cee4 <am_util_stdio_vsprintf+0x8bc>
    cc2e:	3b02      	subs	r3, #2
    cc30:	3202      	adds	r2, #2
    cc32:	e698      	b.n	c966 <am_util_stdio_vsprintf+0x33e>
    cc34:	eb08 020b 	add.w	r2, r8, fp
                    ++ui32CharCnt;
    cc38:	18d0      	adds	r0, r2, r3
                while (*pcStr != 0x0)
    cc3a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cc3e:	2900      	cmp	r1, #0
    cc40:	d1fa      	bne.n	cc38 <am_util_stdio_vsprintf+0x610>
                    ++ui32CharCnt;
    cc42:	4683      	mov	fp, r0
    cc44:	e745      	b.n	cad2 <am_util_stdio_vsprintf+0x4aa>
    int iDigits = ui64Val ? 0 : 1;
    cc46:	ea52 0103 	orrs.w	r1, r2, r3
    cc4a:	bf0c      	ite	eq
    cc4c:	f04f 0c01 	moveq.w	ip, #1
    cc50:	f04f 0c00 	movne.w	ip, #0
    while ( ui64Val )
    cc54:	ea52 0103 	orrs.w	r1, r2, r3
    cc58:	d00d      	beq.n	cc76 <am_util_stdio_vsprintf+0x64e>
    cc5a:	4610      	mov	r0, r2
    cc5c:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cc5e:	0907      	lsrs	r7, r0, #4
    cc60:	ea47 7701 	orr.w	r7, r7, r1, lsl #28
    cc64:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    cc68:	4638      	mov	r0, r7
    cc6a:	4671      	mov	r1, lr
    while ( ui64Val )
    cc6c:	ea50 0701 	orrs.w	r7, r0, r1
        ++iDigits;
    cc70:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
    cc74:	d1f3      	bne.n	cc5e <am_util_stdio_vsprintf+0x636>
                    iWidth -= ndigits_in_hex(ui64Val);
    cc76:	eba5 010c 	sub.w	r1, r5, ip
    if ( i32NumChars <= 0 )
    cc7a:	2900      	cmp	r1, #0
    cc7c:	f340 8125 	ble.w	ceca <am_util_stdio_vsprintf+0x8a2>
    while ( i32NumChars-- )
    cc80:	3901      	subs	r1, #1
    int32_t i32Cnt = 0;
    cc82:	2000      	movs	r0, #0
    cc84:	4625      	mov	r5, r4
            *pcBuf++ = cPadChar;
    cc86:	46ac      	mov	ip, r5
    cc88:	1e4f      	subs	r7, r1, #1
    cc8a:	f100 0e01 	add.w	lr, r0, #1
        if ( pcBuf )
    cc8e:	b175      	cbz	r5, ccae <am_util_stdio_vsprintf+0x686>
            *pcBuf++ = cPadChar;
    cc90:	f80c 6b01 	strb.w	r6, [ip], #1
    cc94:	46b8      	mov	r8, r7
    cc96:	4665      	mov	r5, ip
    cc98:	460f      	mov	r7, r1
    cc9a:	4670      	mov	r0, lr
    cc9c:	4641      	mov	r1, r8
    while ( i32NumChars-- )
    cc9e:	2f00      	cmp	r7, #0
    cca0:	d1f1      	bne.n	cc86 <am_util_stdio_vsprintf+0x65e>
    cca2:	4483      	add	fp, r0
                    pcBuf += pcBuf ? iWidth : 0;
    cca4:	2c00      	cmp	r4, #0
    cca6:	f43f ae78 	beq.w	c99a <am_util_stdio_vsprintf+0x372>
    ccaa:	4404      	add	r4, r0
                    iWidth = 0;
    ccac:	e5f6      	b.n	c89c <am_util_stdio_vsprintf+0x274>
    while ( i32NumChars-- )
    ccae:	2900      	cmp	r1, #0
    ccb0:	f000 8115 	beq.w	cede <am_util_stdio_vsprintf+0x8b6>
    ccb4:	3902      	subs	r1, #2
    ccb6:	3002      	adds	r0, #2
    ccb8:	e7f1      	b.n	cc9e <am_util_stdio_vsprintf+0x676>
    ccba:	2b00      	cmp	r3, #0
    ccbc:	f000 8136 	beq.w	cf2c <am_util_stdio_vsprintf+0x904>
    ccc0:	3b02      	subs	r3, #2
    ccc2:	3202      	adds	r2, #2
    ccc4:	2800      	cmp	r0, #0
    ccc6:	f47f af0f 	bne.w	cae8 <am_util_stdio_vsprintf+0x4c0>
    ccca:	e71c      	b.n	cb06 <am_util_stdio_vsprintf+0x4de>
        pcStr++;
    cccc:	789a      	ldrb	r2, [r3, #2]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccce:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    ccd2:	2809      	cmp	r0, #9
        pcStr++;
    ccd4:	f103 0302 	add.w	r3, r3, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ccd8:	f200 8124 	bhi.w	cf24 <am_util_stdio_vsprintf+0x8fc>
        uCnt++;
    ccdc:	2001      	movs	r0, #1
        bNeg = true;
    ccde:	4680      	mov	r8, r0
        pcStr++;
    cce0:	469e      	mov	lr, r3
    cce2:	e66e      	b.n	c9c2 <am_util_stdio_vsprintf+0x39a>
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cce4:	469b      	mov	fp, r3
    cce6:	e4c1      	b.n	c66c <am_util_stdio_vsprintf+0x44>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cce8:	2e20      	cmp	r6, #32
    ccea:	f47f ae47 	bne.w	c97c <am_util_stdio_vsprintf+0x354>
                        if ( pcBuf )
    ccee:	b114      	cbz	r4, ccf6 <am_util_stdio_vsprintf+0x6ce>
                            *pcBuf++ = '-';
    ccf0:	232d      	movs	r3, #45	; 0x2d
    ccf2:	f804 3b01 	strb.w	r3, [r4], #1
                        ++ui32CharCnt;
    ccf6:	f10b 0b01 	add.w	fp, fp, #1
    ccfa:	e63f      	b.n	c97c <am_util_stdio_vsprintf+0x354>
    int iNDigits = ui64Val ? 0 : 1;
    ccfc:	ea58 0309 	orrs.w	r3, r8, r9
    cd00:	bf0c      	ite	eq
    cd02:	2701      	moveq	r7, #1
    cd04:	2700      	movne	r7, #0
    while ( ui64Val )
    cd06:	ea58 0309 	orrs.w	r3, r8, r9
    cd0a:	d008      	beq.n	cd1e <am_util_stdio_vsprintf+0x6f6>
    cd0c:	4640      	mov	r0, r8
    cd0e:	4649      	mov	r1, r9
        ui64Val = divu64_10(ui64Val);
    cd10:	f7ff fb8a 	bl	c428 <divu64_10>
    while ( ui64Val )
    cd14:	ea50 0301 	orrs.w	r3, r0, r1
        ++iNDigits;
    cd18:	f107 0701 	add.w	r7, r7, #1
    while ( ui64Val )
    cd1c:	d1f8      	bne.n	cd10 <am_util_stdio_vsprintf+0x6e8>
                    iWidth -= ndigits_in_u64(ui64Val);
    cd1e:	1beb      	subs	r3, r5, r7
    if ( i32NumChars <= 0 )
    cd20:	2b00      	cmp	r3, #0
    cd22:	f340 80f3 	ble.w	cf0c <am_util_stdio_vsprintf+0x8e4>
    while ( i32NumChars-- )
    cd26:	3b01      	subs	r3, #1
    cd28:	4625      	mov	r5, r4
    int32_t i32Cnt = 0;
    cd2a:	2200      	movs	r2, #0
            *pcBuf++ = cPadChar;
    cd2c:	4628      	mov	r0, r5
    cd2e:	1c51      	adds	r1, r2, #1
    cd30:	1e5f      	subs	r7, r3, #1
        if ( pcBuf )
    cd32:	b16d      	cbz	r5, cd50 <am_util_stdio_vsprintf+0x728>
            *pcBuf++ = cPadChar;
    cd34:	f800 6b01 	strb.w	r6, [r0], #1
    cd38:	460a      	mov	r2, r1
    cd3a:	4605      	mov	r5, r0
    cd3c:	4619      	mov	r1, r3
    while ( i32NumChars-- )
    cd3e:	463b      	mov	r3, r7
    cd40:	2900      	cmp	r1, #0
    cd42:	d1f3      	bne.n	cd2c <am_util_stdio_vsprintf+0x704>
    cd44:	4493      	add	fp, r2
                    pcBuf += pcBuf ? iWidth : 0;
    cd46:	2c00      	cmp	r4, #0
    cd48:	f000 80da 	beq.w	cf00 <am_util_stdio_vsprintf+0x8d8>
    cd4c:	4414      	add	r4, r2
                    iWidth = 0;
    cd4e:	e5c2      	b.n	c8d6 <am_util_stdio_vsprintf+0x2ae>
    while ( i32NumChars-- )
    cd50:	2b00      	cmp	r3, #0
    cd52:	f000 80ee 	beq.w	cf32 <am_util_stdio_vsprintf+0x90a>
    cd56:	4639      	mov	r1, r7
    cd58:	3202      	adds	r2, #2
    cd5a:	1e9f      	subs	r7, r3, #2
    cd5c:	e7ef      	b.n	cd3e <am_util_stdio_vsprintf+0x716>
    else if (iExp2 >= 0)
    cd5e:	2a00      	cmp	r2, #0
    cd60:	db50      	blt.n	ce04 <am_util_stdio_vsprintf+0x7dc>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cd62:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    cd66:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    cd6a:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    cd6e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cd70:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    cd74:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    cd78:	db3d      	blt.n	cdf6 <am_util_stdio_vsprintf+0x7ce>
    cd7a:	46a0      	mov	r8, r4
            uint64_to_str(i32IntPart, pcBuf);
    cd7c:	4642      	mov	r2, r8
    cd7e:	17c1      	asrs	r1, r0, #31
    cd80:	f7ff fbb4 	bl	c4ec <uint64_to_str>
    cd84:	e561      	b.n	c84a <am_util_stdio_vsprintf+0x222>
                if ( iWidth > 0 )
    cd86:	2d00      	cmp	r5, #0
    cd88:	dd49      	ble.n	ce1e <am_util_stdio_vsprintf+0x7f6>
        return ui32RetVal;
    cd8a:	461f      	mov	r7, r3
    while ( i32NumChars-- )
    cd8c:	3d01      	subs	r5, #1
    int32_t i32Cnt = 0;
    cd8e:	2200      	movs	r2, #0
    cd90:	4621      	mov	r1, r4
            *pcBuf++ = cPadChar;
    cd92:	4608      	mov	r0, r1
    cd94:	f105 3eff 	add.w	lr, r5, #4294967295
    cd98:	f102 0801 	add.w	r8, r2, #1
        if ( pcBuf )
    cd9c:	2900      	cmp	r1, #0
    cd9e:	d044      	beq.n	ce2a <am_util_stdio_vsprintf+0x802>
            *pcBuf++ = cPadChar;
    cda0:	f800 6b01 	strb.w	r6, [r0], #1
    cda4:	4642      	mov	r2, r8
    cda6:	4601      	mov	r1, r0
    cda8:	4628      	mov	r0, r5
    while ( i32NumChars-- )
    cdaa:	4675      	mov	r5, lr
    cdac:	2800      	cmp	r0, #0
    cdae:	d1f0      	bne.n	cd92 <am_util_stdio_vsprintf+0x76a>
    cdb0:	7819      	ldrb	r1, [r3, #0]
    cdb2:	4493      	add	fp, r2
                        pcBuf += pcBuf ? iWidth : 0;
    cdb4:	b104      	cbz	r4, cdb8 <am_util_stdio_vsprintf+0x790>
    cdb6:	4414      	add	r4, r2
                        iWidth = 0;
    cdb8:	2500      	movs	r5, #0
                while (*pcStr != 0x0)
    cdba:	2900      	cmp	r1, #0
    cdbc:	f47f ae73 	bne.w	caa6 <am_util_stdio_vsprintf+0x47e>
    cdc0:	e6a4      	b.n	cb0c <am_util_stdio_vsprintf+0x4e4>
        switch ( *pcFmt )
    cdc2:	f04f 0901 	mov.w	r9, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cdc6:	9b00      	ldr	r3, [sp, #0]
    cdc8:	3307      	adds	r3, #7
    cdca:	f023 0307 	bic.w	r3, r3, #7
    cdce:	4618      	mov	r0, r3
    cdd0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    cdd4:	9000      	str	r0, [sp, #0]
    cdd6:	e55e      	b.n	c896 <am_util_stdio_vsprintf+0x26e>
        bLower = bLongLong = false;
    cdd8:	f04f 0900 	mov.w	r9, #0
    cddc:	e7f3      	b.n	cdc6 <am_util_stdio_vsprintf+0x79e>
    cdde:	1bed      	subs	r5, r5, r7
    if ( i32NumChars <= 0 )
    cde0:	2d00      	cmp	r5, #0
    cde2:	dde7      	ble.n	cdb4 <am_util_stdio_vsprintf+0x78c>
    cde4:	e7d2      	b.n	cd8c <am_util_stdio_vsprintf+0x764>
                            if ( pcBuf )
    cde6:	b114      	cbz	r4, cdee <am_util_stdio_vsprintf+0x7c6>
                                *pcBuf++ = '-';
    cde8:	232d      	movs	r3, #45	; 0x2d
    cdea:	f804 3b01 	strb.w	r3, [r4], #1
                            ++ui32CharCnt;
    cdee:	f10b 0b01 	add.w	fp, fp, #1
    cdf2:	e5a5      	b.n	c940 <am_util_stdio_vsprintf+0x318>
    i32FracPart = 0;
    cdf4:	2500      	movs	r5, #0
        *pcBuf++ = '-';
    cdf6:	4623      	mov	r3, r4
    cdf8:	222d      	movs	r2, #45	; 0x2d
    cdfa:	f803 2b02 	strb.w	r2, [r3], #2
    cdfe:	46b0      	mov	r8, r6
    ce00:	461e      	mov	r6, r3
    ce02:	e513      	b.n	c82c <am_util_stdio_vsprintf+0x204>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ce04:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    ce06:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    ce08:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    ce0c:	f104 0202 	add.w	r2, r4, #2
    ce10:	f2c0 8092 	blt.w	cf38 <am_util_stdio_vsprintf+0x910>
    ce14:	46a0      	mov	r8, r4
        *pcBuf++ = '0';
    ce16:	2330      	movs	r3, #48	; 0x30
    ce18:	f888 3000 	strb.w	r3, [r8]
    ce1c:	e522      	b.n	c864 <am_util_stdio_vsprintf+0x23c>
                while (*pcStr != 0x0)
    ce1e:	7819      	ldrb	r1, [r3, #0]
    ce20:	b909      	cbnz	r1, ce26 <am_util_stdio_vsprintf+0x7fe>
    ce22:	460f      	mov	r7, r1
    ce24:	e655      	b.n	cad2 <am_util_stdio_vsprintf+0x4aa>
    ce26:	461f      	mov	r7, r3
    ce28:	e63d      	b.n	caa6 <am_util_stdio_vsprintf+0x47e>
    while ( i32NumChars-- )
    ce2a:	2d00      	cmp	r5, #0
    ce2c:	d076      	beq.n	cf1c <am_util_stdio_vsprintf+0x8f4>
    ce2e:	4670      	mov	r0, lr
    ce30:	3202      	adds	r2, #2
    ce32:	f1a5 0e02 	sub.w	lr, r5, #2
    ce36:	e7b8      	b.n	cdaa <am_util_stdio_vsprintf+0x782>
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ce38:	1b10      	subs	r0, r2, r4
    ce3a:	f1c0 0313 	rsb	r3, r0, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    ce3e:	429f      	cmp	r7, r3
    ce40:	bfa8      	it	ge
    ce42:	461f      	movge	r7, r3
        for (jx = 0; jx < iMax; jx++)
    ce44:	2f00      	cmp	r7, #0
    ce46:	f340 8083 	ble.w	cf50 <am_util_stdio_vsprintf+0x928>
    ce4a:	19d1      	adds	r1, r2, r7
    *pcBuf++ = '.';
    ce4c:	4610      	mov	r0, r2
            i32FracPart *= 10;
    ce4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ce52:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    ce54:	162b      	asrs	r3, r5, #24
    ce56:	3330      	adds	r3, #48	; 0x30
    ce58:	f800 3b01 	strb.w	r3, [r0], #1
        for (jx = 0; jx < iMax; jx++)
    ce5c:	4281      	cmp	r1, r0
            i32FracPart &= 0x00FFFFFF;
    ce5e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    ce62:	d1f4      	bne.n	ce4e <am_util_stdio_vsprintf+0x826>
    ce64:	3f01      	subs	r7, #1
    ce66:	19d6      	adds	r6, r2, r7
    ce68:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    ce6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ce6e:	f345 52c7 	sbfx	r2, r5, #23, #8
    ce72:	2a04      	cmp	r2, #4
    ce74:	f77f acff 	ble.w	c876 <am_util_stdio_vsprintf+0x24e>
            while ( pcBuftmp >= pcBufInitial )
    ce78:	42a6      	cmp	r6, r4
    ce7a:	f4ff acfc 	bcc.w	c876 <am_util_stdio_vsprintf+0x24e>
    ce7e:	4633      	mov	r3, r6
                    *pcBuftmp = '0';
    ce80:	2630      	movs	r6, #48	; 0x30
    ce82:	e003      	b.n	ce8c <am_util_stdio_vsprintf+0x864>
    ce84:	705e      	strb	r6, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
    ce86:	429c      	cmp	r4, r3
    ce88:	f63f acf5 	bhi.w	c876 <am_util_stdio_vsprintf+0x24e>
                    *pcBuftmp = '0';
    ce8c:	461d      	mov	r5, r3
                if ( *pcBuftmp == '.' )
    ce8e:	f813 2901 	ldrb.w	r2, [r3], #-1
    ce92:	2a2e      	cmp	r2, #46	; 0x2e
    ce94:	d0f7      	beq.n	ce86 <am_util_stdio_vsprintf+0x85e>
                else if ( *pcBuftmp == '9' )
    ce96:	2a39      	cmp	r2, #57	; 0x39
    ce98:	d0f4      	beq.n	ce84 <am_util_stdio_vsprintf+0x85c>
                    *pcBuftmp += 1;
    ce9a:	3201      	adds	r2, #1
    ce9c:	702a      	strb	r2, [r5, #0]
                    break;
    ce9e:	e4ea      	b.n	c876 <am_util_stdio_vsprintf+0x24e>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    cea0:	1c43      	adds	r3, r0, #1
    cea2:	d037      	beq.n	cf14 <am_util_stdio_vsprintf+0x8ec>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    cea4:	3002      	adds	r0, #2
    cea6:	d037      	beq.n	cf18 <am_util_stdio_vsprintf+0x8f0>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    cea8:	4b2c      	ldr	r3, [pc, #176]	; (cf5c <am_util_stdio_vsprintf+0x934>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    ceaa:	6023      	str	r3, [r4, #0]
    ceac:	2303      	movs	r3, #3
    ceae:	e4e8      	b.n	c882 <am_util_stdio_vsprintf+0x25a>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    ceb0:	9b01      	ldr	r3, [sp, #4]
    ceb2:	b113      	cbz	r3, ceba <am_util_stdio_vsprintf+0x892>
    ceb4:	2e20      	cmp	r6, #32
    ceb6:	f43f af1e 	beq.w	ccf6 <am_util_stdio_vsprintf+0x6ce>
                iVal = uint64_to_str(ui64Val, pcBuf);
    ceba:	4640      	mov	r0, r8
    cebc:	4649      	mov	r1, r9
    cebe:	4622      	mov	r2, r4
    cec0:	f7ff fb14 	bl	c4ec <uint64_to_str>
                ui32CharCnt += iVal;
    cec4:	4483      	add	fp, r0
                break;
    cec6:	f7ff bbcd 	b.w	c664 <am_util_stdio_vsprintf+0x3c>
    if ( i32NumChars <= 0 )
    ceca:	2000      	movs	r0, #0
    cecc:	e6ea      	b.n	cca4 <am_util_stdio_vsprintf+0x67c>
    cece:	2200      	movs	r2, #0
    ced0:	e54c      	b.n	c96c <am_util_stdio_vsprintf+0x344>
    ced2:	1c72      	adds	r2, r6, #1
    ced4:	e79f      	b.n	ce16 <am_util_stdio_vsprintf+0x7ee>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    ced6:	4b22      	ldr	r3, [pc, #136]	; (cf60 <am_util_stdio_vsprintf+0x938>)
    ced8:	6023      	str	r3, [r4, #0]
    ceda:	2303      	movs	r3, #3
    cedc:	e4d1      	b.n	c882 <am_util_stdio_vsprintf+0x25a>
    cede:	4670      	mov	r0, lr
    cee0:	44f3      	add	fp, lr
    cee2:	e6df      	b.n	cca4 <am_util_stdio_vsprintf+0x67c>
    cee4:	460a      	mov	r2, r1
    cee6:	448b      	add	fp, r1
    cee8:	e540      	b.n	c96c <am_util_stdio_vsprintf+0x344>
    uint32_t ui32Val = 0, uCnt = 0;
    ceea:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ceee:	4667      	mov	r7, ip
    cef0:	e57d      	b.n	c9ee <am_util_stdio_vsprintf+0x3c6>
                if ( iWidth > 0 )
    cef2:	2d00      	cmp	r5, #0
    uint32_t ui32RetVal = 0;
    cef4:	bfc8      	it	gt
    cef6:	460f      	movgt	r7, r1
                if ( iWidth > 0 )
    cef8:	f73f af48 	bgt.w	cd8c <am_util_stdio_vsprintf+0x764>
                while (*pcStr != 0x0)
    cefc:	460f      	mov	r7, r1
    cefe:	e5e8      	b.n	cad2 <am_util_stdio_vsprintf+0x4aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cf00:	4622      	mov	r2, r4
    cf02:	4640      	mov	r0, r8
    cf04:	4649      	mov	r1, r9
    cf06:	f7ff faf1 	bl	c4ec <uint64_to_str>
                if ( pcBuf )
    cf0a:	e54a      	b.n	c9a2 <am_util_stdio_vsprintf+0x37a>
    if ( i32NumChars <= 0 )
    cf0c:	2200      	movs	r2, #0
    cf0e:	e71a      	b.n	cd46 <am_util_stdio_vsprintf+0x71e>
    cf10:	2200      	movs	r2, #0
    cf12:	e5f9      	b.n	cb08 <am_util_stdio_vsprintf+0x4e0>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cf14:	4b12      	ldr	r3, [pc, #72]	; (cf60 <am_util_stdio_vsprintf+0x938>)
    cf16:	e7c8      	b.n	ceaa <am_util_stdio_vsprintf+0x882>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cf18:	4b12      	ldr	r3, [pc, #72]	; (cf64 <am_util_stdio_vsprintf+0x93c>)
    cf1a:	e7c6      	b.n	ceaa <am_util_stdio_vsprintf+0x882>
    cf1c:	4642      	mov	r2, r8
    cf1e:	44c3      	add	fp, r8
    cf20:	7819      	ldrb	r1, [r3, #0]
    cf22:	e747      	b.n	cdb4 <am_util_stdio_vsprintf+0x78c>
        uCnt++;
    cf24:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf28:	2700      	movs	r7, #0
    cf2a:	e55f      	b.n	c9ec <am_util_stdio_vsprintf+0x3c4>
    cf2c:	460a      	mov	r2, r1
    cf2e:	448b      	add	fp, r1
    cf30:	e5ea      	b.n	cb08 <am_util_stdio_vsprintf+0x4e0>
    cf32:	460a      	mov	r2, r1
    cf34:	448b      	add	fp, r1
    cf36:	e706      	b.n	cd46 <am_util_stdio_vsprintf+0x71e>
        *pcBuf++ = '-';
    cf38:	4623      	mov	r3, r4
    cf3a:	212d      	movs	r1, #45	; 0x2d
    cf3c:	f803 1b03 	strb.w	r1, [r3], #3
    cf40:	46b0      	mov	r8, r6
    cf42:	4616      	mov	r6, r2
    cf44:	461a      	mov	r2, r3
    cf46:	e766      	b.n	ce16 <am_util_stdio_vsprintf+0x7ee>
                    bNeg = false;
    cf48:	2300      	movs	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
    cf4a:	1bed      	subs	r5, r5, r7
                    bNeg = false;
    cf4c:	9301      	str	r3, [sp, #4]
    cf4e:	e4f7      	b.n	c940 <am_util_stdio_vsprintf+0x318>
    *pcBuf++ = '.';
    cf50:	4611      	mov	r1, r2
    cf52:	e78a      	b.n	ce6a <am_util_stdio_vsprintf+0x842>
        while (*pcBuf)    // Get to end of new string
    cf54:	4632      	mov	r2, r6
    cf56:	4646      	mov	r6, r8
    cf58:	e484      	b.n	c864 <am_util_stdio_vsprintf+0x23c>
    cf5a:	bf00      	nop
    cf5c:	003f2e3f 	.word	0x003f2e3f
    cf60:	00302e30 	.word	0x00302e30
    cf64:	00232e23 	.word	0x00232e23

0000cf68 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    cf68:	b40f      	push	{r0, r1, r2, r3}
    cf6a:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    cf6c:	4d0a      	ldr	r5, [pc, #40]	; (cf98 <am_util_stdio_printf+0x30>)
    cf6e:	682c      	ldr	r4, [r5, #0]
{
    cf70:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    cf72:	b154      	cbz	r4, cf8a <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    cf74:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf76:	461a      	mov	r2, r3
    cf78:	9906      	ldr	r1, [sp, #24]
    cf7a:	4808      	ldr	r0, [pc, #32]	; (cf9c <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    cf7c:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf7e:	f7ff fb53 	bl	c628 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    cf82:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    cf84:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    cf86:	4805      	ldr	r0, [pc, #20]	; (cf9c <am_util_stdio_printf+0x34>)
    cf88:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    cf8a:	4620      	mov	r0, r4
    cf8c:	b003      	add	sp, #12
    cf8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    cf92:	b004      	add	sp, #16
    cf94:	4770      	bx	lr
    cf96:	bf00      	nop
    cf98:	100013a0 	.word	0x100013a0
    cf9c:	10001024 	.word	0x10001024

0000cfa0 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    cfa0:	4801      	ldr	r0, [pc, #4]	; (cfa8 <am_util_stdio_terminal_clear+0x8>)
    cfa2:	f7ff bfe1 	b.w	cf68 <am_util_stdio_printf>
    cfa6:	bf00      	nop
    cfa8:	0000efe0 	.word	0x0000efe0

0000cfac <NMI_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cfac:	e7fe      	b.n	cfac <NMI_Handler>
    cfae:	bf00      	nop

0000cfb0 <DebugMon_Handler>:
    //
    // Go into an infinite loop.
    //
    while(1)
    {
    }
    cfb0:	e7fe      	b.n	cfb0 <DebugMon_Handler>
    cfb2:	bf00      	nop

0000cfb4 <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    cfb4:	4811      	ldr	r0, [pc, #68]	; (cffc <zero_loop+0x12>)
    cfb6:	4912      	ldr	r1, [pc, #72]	; (d000 <zero_loop+0x16>)
    cfb8:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    cfba:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    cfbe:	4811      	ldr	r0, [pc, #68]	; (d004 <zero_loop+0x1a>)
    cfc0:	6801      	ldr	r1, [r0, #0]
    cfc2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cfc6:	6001      	str	r1, [r0, #0]
    cfc8:	f3bf 8f4f 	dsb	sy
    cfcc:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    cfd0:	480d      	ldr	r0, [pc, #52]	; (d008 <zero_loop+0x1e>)
    cfd2:	490e      	ldr	r1, [pc, #56]	; (d00c <zero_loop+0x22>)
    cfd4:	4a0e      	ldr	r2, [pc, #56]	; (d010 <zero_loop+0x26>)

0000cfd6 <copy_loop>:
    cfd6:	f850 3b04 	ldr.w	r3, [r0], #4
    cfda:	f841 3b04 	str.w	r3, [r1], #4
    cfde:	4291      	cmp	r1, r2
    cfe0:	dbf9      	blt.n	cfd6 <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    cfe2:	480c      	ldr	r0, [pc, #48]	; (d014 <zero_loop+0x2a>)
    cfe4:	490c      	ldr	r1, [pc, #48]	; (d018 <zero_loop+0x2e>)
    cfe6:	f04f 0200 	mov.w	r2, #0

0000cfea <zero_loop>:
    cfea:	4288      	cmp	r0, r1
    cfec:	bfb8      	it	lt
    cfee:	f840 2b04 	strlt.w	r2, [r0], #4
    cff2:	dbfa      	blt.n	cfea <zero_loop>
    main();
    cff4:	f7ff f8d4 	bl	c1a0 <main>
    __asm("    bkpt     ");
    cff8:	be00      	bkpt	0x0000
}
    cffa:	0000      	.short	0x0000
    cffc:	e000ed08 	.word	0xe000ed08
    d000:	0000c000 	.word	0x0000c000
    d004:	e000ed88 	.word	0xe000ed88
    d008:	0000f410 	.word	0x0000f410
    d00c:	10001000 	.word	0x10001000
    d010:	10001020 	.word	0x10001020
    d014:	10001020 	.word	0x10001020
    d018:	10004814 	.word	0x10004814

0000d01c <memset>:
    d01c:	b4f0      	push	{r4, r5, r6, r7}
    d01e:	0786      	lsls	r6, r0, #30
    d020:	d046      	beq.n	d0b0 <memset+0x94>
    d022:	1e54      	subs	r4, r2, #1
    d024:	2a00      	cmp	r2, #0
    d026:	d03c      	beq.n	d0a2 <memset+0x86>
    d028:	b2ca      	uxtb	r2, r1
    d02a:	4603      	mov	r3, r0
    d02c:	e002      	b.n	d034 <memset+0x18>
    d02e:	f114 34ff 	adds.w	r4, r4, #4294967295
    d032:	d336      	bcc.n	d0a2 <memset+0x86>
    d034:	f803 2b01 	strb.w	r2, [r3], #1
    d038:	079d      	lsls	r5, r3, #30
    d03a:	d1f8      	bne.n	d02e <memset+0x12>
    d03c:	2c03      	cmp	r4, #3
    d03e:	d929      	bls.n	d094 <memset+0x78>
    d040:	b2cd      	uxtb	r5, r1
    d042:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d046:	2c0f      	cmp	r4, #15
    d048:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d04c:	d933      	bls.n	d0b6 <memset+0x9a>
    d04e:	f1a4 0610 	sub.w	r6, r4, #16
    d052:	0936      	lsrs	r6, r6, #4
    d054:	f103 0720 	add.w	r7, r3, #32
    d058:	eb07 1706 	add.w	r7, r7, r6, lsl #4
    d05c:	f103 0210 	add.w	r2, r3, #16
    d060:	e942 5504 	strd	r5, r5, [r2, #-16]
    d064:	e942 5502 	strd	r5, r5, [r2, #-8]
    d068:	3210      	adds	r2, #16
    d06a:	42ba      	cmp	r2, r7
    d06c:	d1f8      	bne.n	d060 <memset+0x44>
    d06e:	1c72      	adds	r2, r6, #1
    d070:	f014 0f0c 	tst.w	r4, #12
    d074:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d078:	f004 060f 	and.w	r6, r4, #15
    d07c:	d013      	beq.n	d0a6 <memset+0x8a>
    d07e:	1f33      	subs	r3, r6, #4
    d080:	f023 0303 	bic.w	r3, r3, #3
    d084:	3304      	adds	r3, #4
    d086:	4413      	add	r3, r2
    d088:	f842 5b04 	str.w	r5, [r2], #4
    d08c:	4293      	cmp	r3, r2
    d08e:	d1fb      	bne.n	d088 <memset+0x6c>
    d090:	f006 0403 	and.w	r4, r6, #3
    d094:	b12c      	cbz	r4, d0a2 <memset+0x86>
    d096:	b2c9      	uxtb	r1, r1
    d098:	441c      	add	r4, r3
    d09a:	f803 1b01 	strb.w	r1, [r3], #1
    d09e:	429c      	cmp	r4, r3
    d0a0:	d1fb      	bne.n	d09a <memset+0x7e>
    d0a2:	bcf0      	pop	{r4, r5, r6, r7}
    d0a4:	4770      	bx	lr
    d0a6:	4634      	mov	r4, r6
    d0a8:	4613      	mov	r3, r2
    d0aa:	2c00      	cmp	r4, #0
    d0ac:	d1f3      	bne.n	d096 <memset+0x7a>
    d0ae:	e7f8      	b.n	d0a2 <memset+0x86>
    d0b0:	4614      	mov	r4, r2
    d0b2:	4603      	mov	r3, r0
    d0b4:	e7c2      	b.n	d03c <memset+0x20>
    d0b6:	461a      	mov	r2, r3
    d0b8:	4626      	mov	r6, r4
    d0ba:	e7e0      	b.n	d07e <memset+0x62>

0000d0bc <am_bsp_uart_string_print>:
    d0bc:	b510      	push	{r4, lr}
    d0be:	b086      	sub	sp, #24
    d0c0:	7804      	ldrb	r4, [r0, #0]
    d0c2:	2300      	movs	r3, #0
    d0c4:	9300      	str	r3, [sp, #0]
    d0c6:	b13c      	cbz	r4, d0d8 <am_bsp_uart_string_print+0x1c>
    d0c8:	4603      	mov	r3, r0
    d0ca:	f1c0 0201 	rsb	r2, r0, #1
    d0ce:	18d4      	adds	r4, r2, r3
    d0d0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d0d4:	2900      	cmp	r1, #0
    d0d6:	d1fa      	bne.n	d0ce <am_bsp_uart_string_print+0x12>
    d0d8:	4b09      	ldr	r3, [pc, #36]	; (d100 <am_bsp_uart_string_print+0x44>)
    d0da:	9002      	str	r0, [sp, #8]
    d0dc:	2200      	movs	r2, #0
    d0de:	6818      	ldr	r0, [r3, #0]
    d0e0:	9403      	str	r4, [sp, #12]
    d0e2:	f04f 33ff 	mov.w	r3, #4294967295
    d0e6:	a901      	add	r1, sp, #4
    d0e8:	9304      	str	r3, [sp, #16]
    d0ea:	9201      	str	r2, [sp, #4]
    d0ec:	f8cd d014 	str.w	sp, [sp, #20]
    d0f0:	f001 fb5e 	bl	e7b0 <am_hal_uart_transfer>
    d0f4:	9b00      	ldr	r3, [sp, #0]
    d0f6:	42a3      	cmp	r3, r4
    d0f8:	d000      	beq.n	d0fc <am_bsp_uart_string_print+0x40>
    d0fa:	e7fe      	b.n	d0fa <am_bsp_uart_string_print+0x3e>
    d0fc:	b006      	add	sp, #24
    d0fe:	bd10      	pop	{r4, pc}
    d100:	10001124 	.word	0x10001124

0000d104 <am_bsp_low_power_init>:
    d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d106:	f000 fff3 	bl	e0f0 <am_hal_itm_disable>
    d10a:	2000      	movs	r0, #0
    d10c:	f7ff fa86 	bl	c61c <am_util_stdio_printf_init>
    d110:	4b12      	ldr	r3, [pc, #72]	; (d15c <am_bsp_low_power_init+0x58>)
    d112:	4f13      	ldr	r7, [pc, #76]	; (d160 <am_bsp_low_power_init+0x5c>)
    d114:	6819      	ldr	r1, [r3, #0]
    d116:	2021      	movs	r0, #33	; 0x21
    d118:	f000 f958 	bl	d3cc <am_hal_gpio_pinconfig>
    d11c:	f001 f92a 	bl	e374 <am_hal_pwrctrl_low_power_init>
    d120:	2001      	movs	r0, #1
    d122:	f001 f971 	bl	e408 <am_hal_rtc_osc_select>
    d126:	2100      	movs	r1, #0
    d128:	2003      	movs	r0, #3
    d12a:	f000 f87b 	bl	d224 <am_hal_clkgen_control>
    d12e:	f001 f977 	bl	e420 <am_hal_rtc_osc_disable>
    d132:	4b0c      	ldr	r3, [pc, #48]	; (d164 <am_bsp_low_power_init+0x60>)
    d134:	681e      	ldr	r6, [r3, #0]
    d136:	2400      	movs	r4, #0
    d138:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d13c:	4631      	mov	r1, r6
    d13e:	4628      	mov	r0, r5
    d140:	f000 f944 	bl	d3cc <am_hal_gpio_pinconfig>
    d144:	2103      	movs	r1, #3
    d146:	4628      	mov	r0, r5
    d148:	f000 fa82 	bl	d650 <am_hal_gpio_state_write>
    d14c:	3401      	adds	r4, #1
    d14e:	4628      	mov	r0, r5
    d150:	2100      	movs	r1, #0
    d152:	f000 fa7d 	bl	d650 <am_hal_gpio_state_write>
    d156:	2c04      	cmp	r4, #4
    d158:	d1ee      	bne.n	d138 <am_bsp_low_power_init+0x34>
    d15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d15c:	0000f15c 	.word	0x0000f15c
    d160:	10001000 	.word	0x10001000
    d164:	0000f160 	.word	0x0000f160

0000d168 <am_bsp_uart_printf_enable>:
    d168:	b510      	push	{r4, lr}
    d16a:	4c10      	ldr	r4, [pc, #64]	; (d1ac <am_bsp_uart_printf_enable+0x44>)
    d16c:	4b10      	ldr	r3, [pc, #64]	; (d1b0 <am_bsp_uart_printf_enable+0x48>)
    d16e:	4621      	mov	r1, r4
    d170:	2202      	movs	r2, #2
    d172:	2000      	movs	r0, #0
    d174:	601a      	str	r2, [r3, #0]
    d176:	f001 f95d 	bl	e434 <am_hal_uart_initialize>
    d17a:	2200      	movs	r2, #0
    d17c:	4611      	mov	r1, r2
    d17e:	6820      	ldr	r0, [r4, #0]
    d180:	f001 f980 	bl	e484 <am_hal_uart_power_control>
    d184:	6820      	ldr	r0, [r4, #0]
    d186:	490b      	ldr	r1, [pc, #44]	; (d1b4 <am_bsp_uart_printf_enable+0x4c>)
    d188:	f001 f9ee 	bl	e568 <am_hal_uart_configure>
    d18c:	4b0a      	ldr	r3, [pc, #40]	; (d1b8 <am_bsp_uart_printf_enable+0x50>)
    d18e:	2030      	movs	r0, #48	; 0x30
    d190:	6819      	ldr	r1, [r3, #0]
    d192:	f000 f91b 	bl	d3cc <am_hal_gpio_pinconfig>
    d196:	4b09      	ldr	r3, [pc, #36]	; (d1bc <am_bsp_uart_printf_enable+0x54>)
    d198:	2031      	movs	r0, #49	; 0x31
    d19a:	6819      	ldr	r1, [r3, #0]
    d19c:	f000 f916 	bl	d3cc <am_hal_gpio_pinconfig>
    d1a0:	4807      	ldr	r0, [pc, #28]	; (d1c0 <am_bsp_uart_printf_enable+0x58>)
    d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1a6:	f7ff ba39 	b.w	c61c <am_util_stdio_printf_init>
    d1aa:	bf00      	nop
    d1ac:	10001124 	.word	0x10001124
    d1b0:	10001128 	.word	0x10001128
    d1b4:	0000eff4 	.word	0x0000eff4
    d1b8:	0000f020 	.word	0x0000f020
    d1bc:	0000f01c 	.word	0x0000f01c
    d1c0:	0000d0bd 	.word	0x0000d0bd

0000d1c4 <am_hal_cachectrl_config>:
    d1c4:	b530      	push	{r4, r5, lr}
    d1c6:	b083      	sub	sp, #12
    d1c8:	4605      	mov	r5, r0
    d1ca:	f000 fa85 	bl	d6d8 <am_hal_interrupt_master_disable>
    d1ce:	4c0f      	ldr	r4, [pc, #60]	; (d20c <am_hal_cachectrl_config+0x48>)
    d1d0:	9001      	str	r0, [sp, #4]
    d1d2:	6823      	ldr	r3, [r4, #0]
    d1d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d1d8:	6023      	str	r3, [r4, #0]
    d1da:	9801      	ldr	r0, [sp, #4]
    d1dc:	f000 fa80 	bl	d6e0 <am_hal_interrupt_master_set>
    d1e0:	78ab      	ldrb	r3, [r5, #2]
    d1e2:	782a      	ldrb	r2, [r5, #0]
    d1e4:	7869      	ldrb	r1, [r5, #1]
    d1e6:	005b      	lsls	r3, r3, #1
    d1e8:	0112      	lsls	r2, r2, #4
    d1ea:	b2d2      	uxtb	r2, r2
    d1ec:	f003 0302 	and.w	r3, r3, #2
    d1f0:	4313      	orrs	r3, r2
    d1f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d1f6:	020a      	lsls	r2, r1, #8
    d1f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d1fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d200:	4313      	orrs	r3, r2
    d202:	2000      	movs	r0, #0
    d204:	6023      	str	r3, [r4, #0]
    d206:	b003      	add	sp, #12
    d208:	bd30      	pop	{r4, r5, pc}
    d20a:	bf00      	nop
    d20c:	40018000 	.word	0x40018000

0000d210 <am_hal_cachectrl_enable>:
    d210:	4a03      	ldr	r2, [pc, #12]	; (d220 <am_hal_cachectrl_enable+0x10>)
    d212:	6813      	ldr	r3, [r2, #0]
    d214:	f043 0301 	orr.w	r3, r3, #1
    d218:	6013      	str	r3, [r2, #0]
    d21a:	2000      	movs	r0, #0
    d21c:	4770      	bx	lr
    d21e:	bf00      	nop
    d220:	40018000 	.word	0x40018000

0000d224 <am_hal_clkgen_control>:
    d224:	4b32      	ldr	r3, [pc, #200]	; (d2f0 <am_hal_clkgen_control+0xcc>)
    d226:	681a      	ldr	r2, [r3, #0]
    d228:	b912      	cbnz	r2, d230 <am_hal_clkgen_control+0xc>
    d22a:	4a32      	ldr	r2, [pc, #200]	; (d2f4 <am_hal_clkgen_control+0xd0>)
    d22c:	6812      	ldr	r2, [r2, #0]
    d22e:	601a      	str	r2, [r3, #0]
    d230:	2809      	cmp	r0, #9
    d232:	d85a      	bhi.n	d2ea <am_hal_clkgen_control+0xc6>
    d234:	e8df f000 	tbb	[pc, r0]
    d238:	261e160d 	.word	0x261e160d
    d23c:	4640362e 	.word	0x4640362e
    d240:	054e      	.short	0x054e
    d242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d246:	2000      	movs	r0, #0
    d248:	6a1a      	ldr	r2, [r3, #32]
    d24a:	f36f 0200 	bfc	r2, #0, #1
    d24e:	621a      	str	r2, [r3, #32]
    d250:	4770      	bx	lr
    d252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d256:	2200      	movs	r2, #0
    d258:	2147      	movs	r1, #71	; 0x47
    d25a:	6159      	str	r1, [r3, #20]
    d25c:	4610      	mov	r0, r2
    d25e:	619a      	str	r2, [r3, #24]
    d260:	615a      	str	r2, [r3, #20]
    d262:	4770      	bx	lr
    d264:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d268:	2000      	movs	r0, #0
    d26a:	68d3      	ldr	r3, [r2, #12]
    d26c:	f023 0301 	bic.w	r3, r3, #1
    d270:	60d3      	str	r3, [r2, #12]
    d272:	4770      	bx	lr
    d274:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d278:	2000      	movs	r0, #0
    d27a:	68d3      	ldr	r3, [r2, #12]
    d27c:	f023 0302 	bic.w	r3, r3, #2
    d280:	60d3      	str	r3, [r2, #12]
    d282:	4770      	bx	lr
    d284:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d288:	2000      	movs	r0, #0
    d28a:	68d3      	ldr	r3, [r2, #12]
    d28c:	f043 0301 	orr.w	r3, r3, #1
    d290:	60d3      	str	r3, [r2, #12]
    d292:	4770      	bx	lr
    d294:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d298:	2000      	movs	r0, #0
    d29a:	68d3      	ldr	r3, [r2, #12]
    d29c:	f043 0302 	orr.w	r3, r3, #2
    d2a0:	60d3      	str	r3, [r2, #12]
    d2a2:	4770      	bx	lr
    d2a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d2a8:	2200      	movs	r2, #0
    d2aa:	2047      	movs	r0, #71	; 0x47
    d2ac:	2101      	movs	r1, #1
    d2ae:	6158      	str	r0, [r3, #20]
    d2b0:	6199      	str	r1, [r3, #24]
    d2b2:	4610      	mov	r0, r2
    d2b4:	615a      	str	r2, [r3, #20]
    d2b6:	4770      	bx	lr
    d2b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d2bc:	2000      	movs	r0, #0
    d2be:	68da      	ldr	r2, [r3, #12]
    d2c0:	60da      	str	r2, [r3, #12]
    d2c2:	4770      	bx	lr
    d2c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d2c8:	2000      	movs	r0, #0
    d2ca:	68d3      	ldr	r3, [r2, #12]
    d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d2d0:	60d3      	str	r3, [r2, #12]
    d2d2:	4770      	bx	lr
    d2d4:	b139      	cbz	r1, d2e6 <am_hal_clkgen_control+0xc2>
    d2d6:	680b      	ldr	r3, [r1, #0]
    d2d8:	f043 0301 	orr.w	r3, r3, #1
    d2dc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d2e0:	2000      	movs	r0, #0
    d2e2:	6213      	str	r3, [r2, #32]
    d2e4:	4770      	bx	lr
    d2e6:	4b04      	ldr	r3, [pc, #16]	; (d2f8 <am_hal_clkgen_control+0xd4>)
    d2e8:	e7f8      	b.n	d2dc <am_hal_clkgen_control+0xb8>
    d2ea:	2006      	movs	r0, #6
    d2ec:	4770      	bx	lr
    d2ee:	bf00      	nop
    d2f0:	1000112c 	.word	0x1000112c
    d2f4:	4ffff000 	.word	0x4ffff000
    d2f8:	0025b801 	.word	0x0025b801

0000d2fc <am_hal_clkgen_status_get>:
    d2fc:	b1a8      	cbz	r0, d32a <am_hal_clkgen_status_get+0x2e>
    d2fe:	b410      	push	{r4}
    d300:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d304:	490a      	ldr	r1, [pc, #40]	; (d330 <am_hal_clkgen_status_get+0x34>)
    d306:	6994      	ldr	r4, [r2, #24]
    d308:	4b0a      	ldr	r3, [pc, #40]	; (d334 <am_hal_clkgen_status_get+0x38>)
    d30a:	f014 0f01 	tst.w	r4, #1
    d30e:	bf08      	it	eq
    d310:	460b      	moveq	r3, r1
    d312:	6003      	str	r3, [r0, #0]
    d314:	69d3      	ldr	r3, [r2, #28]
    d316:	f85d 4b04 	ldr.w	r4, [sp], #4
    d31a:	f003 0201 	and.w	r2, r3, #1
    d31e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d322:	6042      	str	r2, [r0, #4]
    d324:	7203      	strb	r3, [r0, #8]
    d326:	2000      	movs	r0, #0
    d328:	4770      	bx	lr
    d32a:	2006      	movs	r0, #6
    d32c:	4770      	bx	lr
    d32e:	bf00      	nop
    d330:	02dc6c00 	.word	0x02dc6c00
    d334:	016e3600 	.word	0x016e3600

0000d338 <am_hal_flash_delay>:
    d338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d33e:	075b      	lsls	r3, r3, #29
    d340:	bf46      	itte	mi
    d342:	0040      	lslmi	r0, r0, #1
    d344:	230e      	movmi	r3, #14
    d346:	230b      	movpl	r3, #11
    d348:	4298      	cmp	r0, r3
    d34a:	d800      	bhi.n	d34e <am_hal_flash_delay+0x16>
    d34c:	4770      	bx	lr
    d34e:	1ac0      	subs	r0, r0, r3
    d350:	4b00      	ldr	r3, [pc, #0]	; (d354 <am_hal_flash_delay+0x1c>)
    d352:	4718      	bx	r3
    d354:	0800009d 	.word	0x0800009d

0000d358 <am_hal_flash_delay_status_check>:
    d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d35c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    d360:	460d      	mov	r5, r1
    d362:	4616      	mov	r6, r2
    d364:	461f      	mov	r7, r3
    d366:	b1b4      	cbz	r4, d396 <am_hal_flash_delay_status_check+0x3e>
    d368:	4604      	mov	r4, r0
    d36a:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d36e:	f8df 8058 	ldr.w	r8, [pc, #88]	; d3c8 <am_hal_flash_delay_status_check+0x70>
    d372:	e009      	b.n	d388 <am_hal_flash_delay_status_check+0x30>
    d374:	b324      	cbz	r4, d3c0 <am_hal_flash_delay_status_check+0x68>
    d376:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d37a:	f013 0f04 	tst.w	r3, #4
    d37e:	bf14      	ite	ne
    d380:	2012      	movne	r0, #18
    d382:	2005      	moveq	r0, #5
    d384:	3c01      	subs	r4, #1
    d386:	47c0      	blx	r8
    d388:	682b      	ldr	r3, [r5, #0]
    d38a:	4033      	ands	r3, r6
    d38c:	429f      	cmp	r7, r3
    d38e:	d1f1      	bne.n	d374 <am_hal_flash_delay_status_check+0x1c>
    d390:	2000      	movs	r0, #0
    d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d396:	f8df 8030 	ldr.w	r8, [pc, #48]	; d3c8 <am_hal_flash_delay_status_check+0x70>
    d39a:	4604      	mov	r4, r0
    d39c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d3a0:	e009      	b.n	d3b6 <am_hal_flash_delay_status_check+0x5e>
    d3a2:	b16c      	cbz	r4, d3c0 <am_hal_flash_delay_status_check+0x68>
    d3a4:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d3a8:	f013 0f04 	tst.w	r3, #4
    d3ac:	bf14      	ite	ne
    d3ae:	2012      	movne	r0, #18
    d3b0:	2005      	moveq	r0, #5
    d3b2:	3c01      	subs	r4, #1
    d3b4:	47c0      	blx	r8
    d3b6:	682b      	ldr	r3, [r5, #0]
    d3b8:	4033      	ands	r3, r6
    d3ba:	429f      	cmp	r7, r3
    d3bc:	d0f1      	beq.n	d3a2 <am_hal_flash_delay_status_check+0x4a>
    d3be:	e7e7      	b.n	d390 <am_hal_flash_delay_status_check+0x38>
    d3c0:	2004      	movs	r0, #4
    d3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3c6:	bf00      	nop
    d3c8:	0800009d 	.word	0x0800009d

0000d3cc <am_hal_gpio_pinconfig>:
    d3cc:	2831      	cmp	r0, #49	; 0x31
    d3ce:	d901      	bls.n	d3d4 <am_hal_gpio_pinconfig+0x8>
    d3d0:	2006      	movs	r0, #6
    d3d2:	4770      	bx	lr
    d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3d8:	f001 0307 	and.w	r3, r1, #7
    d3dc:	f011 05e0 	ands.w	r5, r1, #224	; 0xe0
    d3e0:	b085      	sub	sp, #20
    d3e2:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    d3e6:	d014      	beq.n	d412 <am_hal_gpio_pinconfig+0x46>
    d3e8:	f3c1 1642 	ubfx	r6, r1, #5, #3
    d3ec:	1db4      	adds	r4, r6, #6
    d3ee:	f004 0407 	and.w	r4, r4, #7
    d3f2:	2c03      	cmp	r4, #3
    d3f4:	f042 0201 	orr.w	r2, r2, #1
    d3f8:	f200 80b0 	bhi.w	d55c <am_hal_gpio_pinconfig+0x190>
    d3fc:	4c86      	ldr	r4, [pc, #536]	; (d618 <am_hal_gpio_pinconfig+0x24c>)
    d3fe:	5c24      	ldrb	r4, [r4, r0]
    d400:	07e7      	lsls	r7, r4, #31
    d402:	d403      	bmi.n	d40c <am_hal_gpio_pinconfig+0x40>
    d404:	4885      	ldr	r0, [pc, #532]	; (d61c <am_hal_gpio_pinconfig+0x250>)
    d406:	b005      	add	sp, #20
    d408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d40c:	3e02      	subs	r6, #2
    d40e:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
    d412:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    d416:	2c00      	cmp	r4, #0
    d418:	f040 809a 	bne.w	d550 <am_hal_gpio_pinconfig+0x184>
    d41c:	4c80      	ldr	r4, [pc, #512]	; (d620 <am_hal_gpio_pinconfig+0x254>)
    d41e:	4d81      	ldr	r5, [pc, #516]	; (d624 <am_hal_gpio_pinconfig+0x258>)
    d420:	5c24      	ldrb	r4, [r4, r0]
    d422:	5c2d      	ldrb	r5, [r5, r0]
    d424:	411c      	asrs	r4, r3
    d426:	f014 0f01 	tst.w	r4, #1
    d42a:	bf0c      	ite	eq
    d42c:	2400      	moveq	r4, #0
    d42e:	2402      	movne	r4, #2
    d430:	42ab      	cmp	r3, r5
    d432:	ea42 0204 	orr.w	r2, r2, r4
    d436:	f000 809d 	beq.w	d574 <am_hal_gpio_pinconfig+0x1a8>
    d43a:	f3c1 3341 	ubfx	r3, r1, #13, #2
    d43e:	105d      	asrs	r5, r3, #1
    d440:	f3c1 2681 	ubfx	r6, r1, #10, #2
    d444:	00db      	lsls	r3, r3, #3
    d446:	f3c1 2707 	ubfx	r7, r1, #8, #8
    d44a:	f003 0408 	and.w	r4, r3, #8
    d44e:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    d452:	f007 060c 	and.w	r6, r7, #12
    d456:	f3c1 3500 	ubfx	r5, r1, #12, #1
    d45a:	2e04      	cmp	r6, #4
    d45c:	ea43 0304 	orr.w	r3, r3, r4
    d460:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    d464:	462c      	mov	r4, r5
    d466:	f000 8092 	beq.w	d58e <am_hal_gpio_pinconfig+0x1c2>
    d46a:	4c6f      	ldr	r4, [pc, #444]	; (d628 <am_hal_gpio_pinconfig+0x25c>)
    d46c:	6824      	ldr	r4, [r4, #0]
    d46e:	ebc4 0901 	rsb	r9, r4, r1
    d472:	fab9 f989 	clz	r9, r9
    d476:	ea4f 1959 	mov.w	r9, r9, lsr #5
    d47a:	f017 0f60 	tst.w	r7, #96	; 0x60
    d47e:	bf04      	itt	eq
    d480:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    d484:	f364 0300 	bfieq	r3, r4, #0, #1
    d488:	0084      	lsls	r4, r0, #2
    d48a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    d48e:	2902      	cmp	r1, #2
    d490:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    d494:	d07e      	beq.n	d594 <am_hal_gpio_pinconfig+0x1c8>
    d496:	f200 8084 	bhi.w	d5a2 <am_hal_gpio_pinconfig+0x1d6>
    d49a:	2901      	cmp	r1, #1
    d49c:	bf08      	it	eq
    d49e:	f042 0204 	orreq.w	r2, r2, #4
    d4a2:	f005 0518 	and.w	r5, r5, #24
    d4a6:	f04f 0800 	mov.w	r8, #0
    d4aa:	f004 041c 	and.w	r4, r4, #28
    d4ae:	0841      	lsrs	r1, r0, #1
    d4b0:	f020 0a03 	bic.w	sl, r0, #3
    d4b4:	270f      	movs	r7, #15
    d4b6:	f021 0103 	bic.w	r1, r1, #3
    d4ba:	40a7      	lsls	r7, r4
    d4bc:	26ff      	movs	r6, #255	; 0xff
    d4be:	fa03 f404 	lsl.w	r4, r3, r4
    d4c2:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    d4c6:	40ae      	lsls	r6, r5
    d4c8:	9101      	str	r1, [sp, #4]
    d4ca:	fa02 f505 	lsl.w	r5, r2, r5
    d4ce:	9300      	str	r3, [sp, #0]
    d4d0:	4683      	mov	fp, r0
    d4d2:	f000 f901 	bl	d6d8 <am_hal_interrupt_master_disable>
    d4d6:	9b00      	ldr	r3, [sp, #0]
    d4d8:	9003      	str	r0, [sp, #12]
    d4da:	43ff      	mvns	r7, r7
    d4dc:	43f6      	mvns	r6, r6
    d4de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    d4e2:	f8df e164 	ldr.w	lr, [pc, #356]	; d648 <am_hal_gpio_pinconfig+0x27c>
    d4e6:	4a51      	ldr	r2, [pc, #324]	; (d62c <am_hal_gpio_pinconfig+0x260>)
    d4e8:	9901      	ldr	r1, [sp, #4]
    d4ea:	f1b9 0f00 	cmp.w	r9, #0
    d4ee:	d00d      	beq.n	d50c <am_hal_gpio_pinconfig+0x140>
    d4f0:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    d4f4:	f00b 001f 	and.w	r0, fp, #31
    d4f8:	f00c 0c04 	and.w	ip, ip, #4
    d4fc:	f04f 0b01 	mov.w	fp, #1
    d500:	f8df 9148 	ldr.w	r9, [pc, #328]	; d64c <am_hal_gpio_pinconfig+0x280>
    d504:	fa0b f000 	lsl.w	r0, fp, r0
    d508:	f84c 0009 	str.w	r0, [ip, r9]
    d50c:	4848      	ldr	r0, [pc, #288]	; (d630 <am_hal_gpio_pinconfig+0x264>)
    d50e:	f04f 0c73 	mov.w	ip, #115	; 0x73
    d512:	f8c0 c060 	str.w	ip, [r0, #96]	; 0x60
    d516:	f8d3 c000 	ldr.w	ip, [r3]
    d51a:	ea06 0c0c 	and.w	ip, r6, ip
    d51e:	ea4c 0505 	orr.w	r5, ip, r5
    d522:	601d      	str	r5, [r3, #0]
    d524:	f851 300e 	ldr.w	r3, [r1, lr]
    d528:	403b      	ands	r3, r7
    d52a:	4323      	orrs	r3, r4
    d52c:	f841 300e 	str.w	r3, [r1, lr]
    d530:	f85a 3002 	ldr.w	r3, [sl, r2]
    d534:	401e      	ands	r6, r3
    d536:	2400      	movs	r4, #0
    d538:	ea46 0608 	orr.w	r6, r6, r8
    d53c:	f84a 6002 	str.w	r6, [sl, r2]
    d540:	6604      	str	r4, [r0, #96]	; 0x60
    d542:	9803      	ldr	r0, [sp, #12]
    d544:	f000 f8cc 	bl	d6e0 <am_hal_interrupt_master_set>
    d548:	4620      	mov	r0, r4
    d54a:	b005      	add	sp, #20
    d54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d550:	2c01      	cmp	r4, #1
    d552:	d015      	beq.n	d580 <am_hal_gpio_pinconfig+0x1b4>
    d554:	2c02      	cmp	r4, #2
    d556:	d032      	beq.n	d5be <am_hal_gpio_pinconfig+0x1f2>
    d558:	4836      	ldr	r0, [pc, #216]	; (d634 <am_hal_gpio_pinconfig+0x268>)
    d55a:	e754      	b.n	d406 <am_hal_gpio_pinconfig+0x3a>
    d55c:	2dc0      	cmp	r5, #192	; 0xc0
    d55e:	d029      	beq.n	d5b4 <am_hal_gpio_pinconfig+0x1e8>
    d560:	2d20      	cmp	r5, #32
    d562:	f47f af56 	bne.w	d412 <am_hal_gpio_pinconfig+0x46>
    d566:	4c2c      	ldr	r4, [pc, #176]	; (d618 <am_hal_gpio_pinconfig+0x24c>)
    d568:	5c24      	ldrb	r4, [r4, r0]
    d56a:	f014 0f09 	tst.w	r4, #9
    d56e:	f47f af49 	bne.w	d404 <am_hal_gpio_pinconfig+0x38>
    d572:	e74e      	b.n	d412 <am_hal_gpio_pinconfig+0x46>
    d574:	f3c1 4402 	ubfx	r4, r1, #16, #3
    d578:	2c07      	cmp	r4, #7
    d57a:	d127      	bne.n	d5cc <am_hal_gpio_pinconfig+0x200>
    d57c:	482e      	ldr	r0, [pc, #184]	; (d638 <am_hal_gpio_pinconfig+0x26c>)
    d57e:	e742      	b.n	d406 <am_hal_gpio_pinconfig+0x3a>
    d580:	4c25      	ldr	r4, [pc, #148]	; (d618 <am_hal_gpio_pinconfig+0x24c>)
    d582:	5c24      	ldrb	r4, [r4, r0]
    d584:	07a5      	lsls	r5, r4, #30
    d586:	d5e7      	bpl.n	d558 <am_hal_gpio_pinconfig+0x18c>
    d588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d58c:	e746      	b.n	d41c <am_hal_gpio_pinconfig+0x50>
    d58e:	f04f 0901 	mov.w	r9, #1
    d592:	e772      	b.n	d47a <am_hal_gpio_pinconfig+0xae>
    d594:	f005 0518 	and.w	r5, r5, #24
    d598:	f04f 0801 	mov.w	r8, #1
    d59c:	fa08 f805 	lsl.w	r8, r8, r5
    d5a0:	e783      	b.n	d4aa <am_hal_gpio_pinconfig+0xde>
    d5a2:	f005 0518 	and.w	r5, r5, #24
    d5a6:	f04f 0801 	mov.w	r8, #1
    d5aa:	f042 0204 	orr.w	r2, r2, #4
    d5ae:	fa08 f805 	lsl.w	r8, r8, r5
    d5b2:	e77a      	b.n	d4aa <am_hal_gpio_pinconfig+0xde>
    d5b4:	2814      	cmp	r0, #20
    d5b6:	f43f af2c 	beq.w	d412 <am_hal_gpio_pinconfig+0x46>
    d5ba:	4820      	ldr	r0, [pc, #128]	; (d63c <am_hal_gpio_pinconfig+0x270>)
    d5bc:	e723      	b.n	d406 <am_hal_gpio_pinconfig+0x3a>
    d5be:	4c16      	ldr	r4, [pc, #88]	; (d618 <am_hal_gpio_pinconfig+0x24c>)
    d5c0:	5c24      	ldrb	r4, [r4, r0]
    d5c2:	0764      	lsls	r4, r4, #29
    d5c4:	d5c8      	bpl.n	d558 <am_hal_gpio_pinconfig+0x18c>
    d5c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d5ca:	e727      	b.n	d41c <am_hal_gpio_pinconfig+0x50>
    d5cc:	4d1c      	ldr	r5, [pc, #112]	; (d640 <am_hal_gpio_pinconfig+0x274>)
    d5ce:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    d5d2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    d5d6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    d5da:	429e      	cmp	r6, r3
    d5dc:	d00c      	beq.n	d5f8 <am_hal_gpio_pinconfig+0x22c>
    d5de:	0084      	lsls	r4, r0, #2
    d5e0:	4425      	add	r5, r4
    d5e2:	786e      	ldrb	r6, [r5, #1]
    d5e4:	429e      	cmp	r6, r3
    d5e6:	d013      	beq.n	d610 <am_hal_gpio_pinconfig+0x244>
    d5e8:	78ae      	ldrb	r6, [r5, #2]
    d5ea:	429e      	cmp	r6, r3
    d5ec:	d00e      	beq.n	d60c <am_hal_gpio_pinconfig+0x240>
    d5ee:	78ed      	ldrb	r5, [r5, #3]
    d5f0:	429d      	cmp	r5, r3
    d5f2:	d00f      	beq.n	d614 <am_hal_gpio_pinconfig+0x248>
    d5f4:	4813      	ldr	r0, [pc, #76]	; (d644 <am_hal_gpio_pinconfig+0x278>)
    d5f6:	e706      	b.n	d406 <am_hal_gpio_pinconfig+0x3a>
    d5f8:	2300      	movs	r3, #0
    d5fa:	0084      	lsls	r4, r0, #2
    d5fc:	005b      	lsls	r3, r3, #1
    d5fe:	f3c1 5540 	ubfx	r5, r1, #21, #1
    d602:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    d606:	f04f 0900 	mov.w	r9, #0
    d60a:	e73e      	b.n	d48a <am_hal_gpio_pinconfig+0xbe>
    d60c:	2302      	movs	r3, #2
    d60e:	e7f5      	b.n	d5fc <am_hal_gpio_pinconfig+0x230>
    d610:	2301      	movs	r3, #1
    d612:	e7f3      	b.n	d5fc <am_hal_gpio_pinconfig+0x230>
    d614:	2303      	movs	r3, #3
    d616:	e7f1      	b.n	d5fc <am_hal_gpio_pinconfig+0x230>
    d618:	0000f02c 	.word	0x0000f02c
    d61c:	08000100 	.word	0x08000100
    d620:	0000f128 	.word	0x0000f128
    d624:	0000f164 	.word	0x0000f164
    d628:	0000f15c 	.word	0x0000f15c
    d62c:	400100e0 	.word	0x400100e0
    d630:	40010000 	.word	0x40010000
    d634:	08000102 	.word	0x08000102
    d638:	08000103 	.word	0x08000103
    d63c:	08000101 	.word	0x08000101
    d640:	0000f060 	.word	0x0000f060
    d644:	08000104 	.word	0x08000104
    d648:	40010040 	.word	0x40010040
    d64c:	400100b4 	.word	0x400100b4

0000d650 <am_hal_gpio_state_write>:
    d650:	2831      	cmp	r0, #49	; 0x31
    d652:	d901      	bls.n	d658 <am_hal_gpio_state_write+0x8>
    d654:	2005      	movs	r0, #5
    d656:	4770      	bx	lr
    d658:	2905      	cmp	r1, #5
    d65a:	d901      	bls.n	d660 <am_hal_gpio_state_write+0x10>
    d65c:	2006      	movs	r0, #6
    d65e:	4770      	bx	lr
    d660:	b570      	push	{r4, r5, r6, lr}
    d662:	f000 031f 	and.w	r3, r0, #31
    d666:	b082      	sub	sp, #8
    d668:	08c0      	lsrs	r0, r0, #3
    d66a:	2201      	movs	r2, #1
    d66c:	460d      	mov	r5, r1
    d66e:	f000 0404 	and.w	r4, r0, #4
    d672:	fa02 f603 	lsl.w	r6, r2, r3
    d676:	f000 f82f 	bl	d6d8 <am_hal_interrupt_master_disable>
    d67a:	1e69      	subs	r1, r5, #1
    d67c:	9001      	str	r0, [sp, #4]
    d67e:	2904      	cmp	r1, #4
    d680:	d817      	bhi.n	d6b2 <am_hal_gpio_state_write+0x62>
    d682:	e8df f001 	tbb	[pc, r1]
    d686:	0e13      	.short	0x0e13
    d688:	030b      	.short	0x030b
    d68a:	19          	.byte	0x19
    d68b:	00          	.byte	0x00
    d68c:	4b0d      	ldr	r3, [pc, #52]	; (d6c4 <am_hal_gpio_state_write+0x74>)
    d68e:	50e6      	str	r6, [r4, r3]
    d690:	9801      	ldr	r0, [sp, #4]
    d692:	f000 f825 	bl	d6e0 <am_hal_interrupt_master_set>
    d696:	2000      	movs	r0, #0
    d698:	b002      	add	sp, #8
    d69a:	bd70      	pop	{r4, r5, r6, pc}
    d69c:	4b0a      	ldr	r3, [pc, #40]	; (d6c8 <am_hal_gpio_state_write+0x78>)
    d69e:	50e6      	str	r6, [r4, r3]
    d6a0:	e7f6      	b.n	d690 <am_hal_gpio_state_write+0x40>
    d6a2:	4a0a      	ldr	r2, [pc, #40]	; (d6cc <am_hal_gpio_state_write+0x7c>)
    d6a4:	58a3      	ldr	r3, [r4, r2]
    d6a6:	4073      	eors	r3, r6
    d6a8:	50a3      	str	r3, [r4, r2]
    d6aa:	e7f1      	b.n	d690 <am_hal_gpio_state_write+0x40>
    d6ac:	4b08      	ldr	r3, [pc, #32]	; (d6d0 <am_hal_gpio_state_write+0x80>)
    d6ae:	50e6      	str	r6, [r4, r3]
    d6b0:	e7ee      	b.n	d690 <am_hal_gpio_state_write+0x40>
    d6b2:	4b08      	ldr	r3, [pc, #32]	; (d6d4 <am_hal_gpio_state_write+0x84>)
    d6b4:	50e6      	str	r6, [r4, r3]
    d6b6:	e7eb      	b.n	d690 <am_hal_gpio_state_write+0x40>
    d6b8:	4a03      	ldr	r2, [pc, #12]	; (d6c8 <am_hal_gpio_state_write+0x78>)
    d6ba:	58a3      	ldr	r3, [r4, r2]
    d6bc:	4073      	eors	r3, r6
    d6be:	50a3      	str	r3, [r4, r2]
    d6c0:	e7e6      	b.n	d690 <am_hal_gpio_state_write+0x40>
    d6c2:	bf00      	nop
    d6c4:	400100a8 	.word	0x400100a8
    d6c8:	400100b4 	.word	0x400100b4
    d6cc:	40010088 	.word	0x40010088
    d6d0:	40010090 	.word	0x40010090
    d6d4:	40010098 	.word	0x40010098

0000d6d8 <am_hal_interrupt_master_disable>:
    d6d8:	f3ef 8010 	mrs	r0, PRIMASK
    d6dc:	b672      	cpsid	i
    d6de:	4770      	bx	lr

0000d6e0 <am_hal_interrupt_master_set>:
    d6e0:	f380 8810 	msr	PRIMASK, r0
    d6e4:	4770      	bx	lr
    d6e6:	bf00      	nop

0000d6e8 <internal_iom_reset_on_error>:
    d6e8:	b570      	push	{r4, r5, r6, lr}
    d6ea:	6844      	ldr	r4, [r0, #4]
    d6ec:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    d6f0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    d6f4:	3404      	adds	r4, #4
    d6f6:	0324      	lsls	r4, r4, #12
    d6f8:	2300      	movs	r3, #0
    d6fa:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    d6fe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    d702:	050b      	lsls	r3, r1, #20
    d704:	d52a      	bpl.n	d75c <internal_iom_reset_on_error+0x74>
    d706:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    d70a:	079e      	lsls	r6, r3, #30
    d70c:	d450      	bmi.n	d7b0 <internal_iom_reset_on_error+0xc8>
    d70e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    d712:	079a      	lsls	r2, r3, #30
    d714:	d508      	bpl.n	d728 <internal_iom_reset_on_error+0x40>
    d716:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d71a:	f3c3 4307 	ubfx	r3, r3, #16, #8
    d71e:	2b03      	cmp	r3, #3
    d720:	d9f5      	bls.n	d70e <internal_iom_reset_on_error+0x26>
    d722:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d726:	e7f6      	b.n	d716 <internal_iom_reset_on_error+0x2e>
    d728:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    d72c:	f003 0306 	and.w	r3, r3, #6
    d730:	2b04      	cmp	r3, #4
    d732:	d1f9      	bne.n	d728 <internal_iom_reset_on_error+0x40>
    d734:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d738:	f3c3 4307 	ubfx	r3, r3, #16, #8
    d73c:	b173      	cbz	r3, d75c <internal_iom_reset_on_error+0x74>
    d73e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d742:	f3c3 4307 	ubfx	r3, r3, #16, #8
    d746:	2b03      	cmp	r3, #3
    d748:	d9f4      	bls.n	d734 <internal_iom_reset_on_error+0x4c>
    d74a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    d74e:	e7f6      	b.n	d73e <internal_iom_reset_on_error+0x56>
    d750:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    d754:	f003 0306 	and.w	r3, r3, #6
    d758:	2b04      	cmp	r3, #4
    d75a:	d1f9      	bne.n	d750 <internal_iom_reset_on_error+0x68>
    d75c:	06cb      	lsls	r3, r1, #27
    d75e:	d520      	bpl.n	d7a2 <internal_iom_reset_on_error+0xba>
    d760:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    d764:	f003 0306 	and.w	r3, r3, #6
    d768:	2b04      	cmp	r3, #4
    d76a:	d1f9      	bne.n	d760 <internal_iom_reset_on_error+0x78>
    d76c:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    d770:	f36f 1304 	bfc	r3, #4, #1
    d774:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    d778:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    d77c:	f36f 0341 	bfc	r3, #1, #1
    d780:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    d784:	0040      	lsls	r0, r0, #1
    d786:	f7ff fdd7 	bl	d338 <am_hal_flash_delay>
    d78a:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    d78e:	f043 0302 	orr.w	r3, r3, #2
    d792:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    d796:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    d79a:	f043 0310 	orr.w	r3, r3, #16
    d79e:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    d7a2:	f04f 33ff 	mov.w	r3, #4294967295
    d7a6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    d7aa:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    d7ae:	bd70      	pop	{r4, r5, r6, pc}
    d7b0:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    d7b4:	4e07      	ldr	r6, [pc, #28]	; (d7d4 <internal_iom_reset_on_error+0xec>)
    d7b6:	2a00      	cmp	r2, #0
    d7b8:	d0ca      	beq.n	d750 <internal_iom_reset_on_error+0x68>
    d7ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    d7be:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d7c2:	2b03      	cmp	r3, #3
    d7c4:	d9f9      	bls.n	d7ba <internal_iom_reset_on_error+0xd2>
    d7c6:	2a04      	cmp	r2, #4
    d7c8:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    d7cc:	d9c0      	bls.n	d750 <internal_iom_reset_on_error+0x68>
    d7ce:	3a04      	subs	r2, #4
    d7d0:	e7f1      	b.n	d7b6 <internal_iom_reset_on_error+0xce>
    d7d2:	bf00      	nop
    d7d4:	deadbeef 	.word	0xdeadbeef

0000d7d8 <am_hal_iom_initialize>:
    d7d8:	2805      	cmp	r0, #5
    d7da:	d901      	bls.n	d7e0 <am_hal_iom_initialize+0x8>
    d7dc:	2005      	movs	r0, #5
    d7de:	4770      	bx	lr
    d7e0:	b1e1      	cbz	r1, d81c <am_hal_iom_initialize+0x44>
    d7e2:	b4f0      	push	{r4, r5, r6, r7}
    d7e4:	f640 049c 	movw	r4, #2204	; 0x89c
    d7e8:	4e0d      	ldr	r6, [pc, #52]	; (d820 <am_hal_iom_initialize+0x48>)
    d7ea:	fb04 f400 	mul.w	r4, r4, r0
    d7ee:	1935      	adds	r5, r6, r4
    d7f0:	4602      	mov	r2, r0
    d7f2:	78e8      	ldrb	r0, [r5, #3]
    d7f4:	f010 0301 	ands.w	r3, r0, #1
    d7f8:	d002      	beq.n	d800 <am_hal_iom_initialize+0x28>
    d7fa:	2007      	movs	r0, #7
    d7fc:	bcf0      	pop	{r4, r5, r6, r7}
    d7fe:	4770      	bx	lr
    d800:	f040 0001 	orr.w	r0, r0, #1
    d804:	f363 0041 	bfi	r0, r3, #1, #1
    d808:	70e8      	strb	r0, [r5, #3]
    d80a:	5937      	ldr	r7, [r6, r4]
    d80c:	4805      	ldr	r0, [pc, #20]	; (d824 <am_hal_iom_initialize+0x4c>)
    d80e:	f360 0717 	bfi	r7, r0, #0, #24
    d812:	5137      	str	r7, [r6, r4]
    d814:	4618      	mov	r0, r3
    d816:	606a      	str	r2, [r5, #4]
    d818:	600d      	str	r5, [r1, #0]
    d81a:	e7ef      	b.n	d7fc <am_hal_iom_initialize+0x24>
    d81c:	2006      	movs	r0, #6
    d81e:	4770      	bx	lr
    d820:	100013a4 	.word	0x100013a4
    d824:	00123456 	.word	0x00123456

0000d828 <am_hal_iom_enable>:
    d828:	b128      	cbz	r0, d836 <am_hal_iom_enable+0xe>
    d82a:	6803      	ldr	r3, [r0, #0]
    d82c:	4a34      	ldr	r2, [pc, #208]	; (d900 <am_hal_iom_enable+0xd8>)
    d82e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d832:	4293      	cmp	r3, r2
    d834:	d001      	beq.n	d83a <am_hal_iom_enable+0x12>
    d836:	2002      	movs	r0, #2
    d838:	4770      	bx	lr
    d83a:	78c3      	ldrb	r3, [r0, #3]
    d83c:	079b      	lsls	r3, r3, #30
    d83e:	d45d      	bmi.n	d8fc <am_hal_iom_enable+0xd4>
    d840:	6843      	ldr	r3, [r0, #4]
    d842:	7a01      	ldrb	r1, [r0, #8]
    d844:	b570      	push	{r4, r5, r6, lr}
    d846:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    d84a:	3304      	adds	r3, #4
    d84c:	031b      	lsls	r3, r3, #12
    d84e:	3100      	adds	r1, #0
    d850:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    d854:	bf18      	it	ne
    d856:	2101      	movne	r1, #1
    d858:	f3c2 0242 	ubfx	r2, r2, #1, #3
    d85c:	4291      	cmp	r1, r2
    d85e:	bf0c      	ite	eq
    d860:	2201      	moveq	r2, #1
    d862:	2210      	movne	r2, #16
    d864:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    d868:	68c3      	ldr	r3, [r0, #12]
    d86a:	b084      	sub	sp, #16
    d86c:	4604      	mov	r4, r0
    d86e:	2b00      	cmp	r3, #0
    d870:	d039      	beq.n	d8e6 <am_hal_iom_enable+0xbe>
    d872:	6843      	ldr	r3, [r0, #4]
    d874:	4923      	ldr	r1, [pc, #140]	; (d904 <am_hal_iom_enable+0xdc>)
    d876:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    d87a:	3304      	adds	r3, #4
    d87c:	031a      	lsls	r2, r3, #12
    d87e:	2300      	movs	r3, #0
    d880:	6243      	str	r3, [r0, #36]	; 0x24
    d882:	61c3      	str	r3, [r0, #28]
    d884:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    d888:	6902      	ldr	r2, [r0, #16]
    d88a:	6840      	ldr	r0, [r0, #4]
    d88c:	68e6      	ldr	r6, [r4, #12]
    d88e:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    d892:	2501      	movs	r5, #1
    d894:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    d898:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    d89c:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    d8a0:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    d8a4:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    d8a8:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    d8ac:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    d8b0:	6223      	str	r3, [r4, #32]
    d8b2:	b2c0      	uxtb	r0, r0
    d8b4:	fa22 f305 	lsr.w	r3, r2, r5
    d8b8:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    d8bc:	f604 0228 	addw	r2, r4, #2088	; 0x828
    d8c0:	a901      	add	r1, sp, #4
    d8c2:	9301      	str	r3, [sp, #4]
    d8c4:	9602      	str	r6, [sp, #8]
    d8c6:	f88d 500c 	strb.w	r5, [sp, #12]
    d8ca:	f001 f9ab 	bl	ec24 <am_hal_cmdq_init>
    d8ce:	6863      	ldr	r3, [r4, #4]
    d8d0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    d8d4:	3304      	adds	r3, #4
    d8d6:	031b      	lsls	r3, r3, #12
    d8d8:	b960      	cbnz	r0, d8f4 <am_hal_iom_enable+0xcc>
    d8da:	f44f 7180 	mov.w	r1, #256	; 0x100
    d8de:	2202      	movs	r2, #2
    d8e0:	6221      	str	r1, [r4, #32]
    d8e2:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    d8e6:	78e3      	ldrb	r3, [r4, #3]
    d8e8:	f043 0302 	orr.w	r3, r3, #2
    d8ec:	70e3      	strb	r3, [r4, #3]
    d8ee:	2000      	movs	r0, #0
    d8f0:	b004      	add	sp, #16
    d8f2:	bd70      	pop	{r4, r5, r6, pc}
    d8f4:	2202      	movs	r2, #2
    d8f6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    d8fa:	e7f9      	b.n	d8f0 <am_hal_iom_enable+0xc8>
    d8fc:	2000      	movs	r0, #0
    d8fe:	4770      	bx	lr
    d900:	01123456 	.word	0x01123456
    d904:	00800040 	.word	0x00800040

0000d908 <am_hal_iom_power_ctrl>:
    d908:	b140      	cbz	r0, d91c <am_hal_iom_power_ctrl+0x14>
    d90a:	b538      	push	{r3, r4, r5, lr}
    d90c:	6803      	ldr	r3, [r0, #0]
    d90e:	4c85      	ldr	r4, [pc, #532]	; (db24 <am_hal_iom_power_ctrl+0x21c>)
    d910:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d914:	42a3      	cmp	r3, r4
    d916:	d003      	beq.n	d920 <am_hal_iom_power_ctrl+0x18>
    d918:	2002      	movs	r0, #2
    d91a:	bd38      	pop	{r3, r4, r5, pc}
    d91c:	2002      	movs	r0, #2
    d91e:	4770      	bx	lr
    d920:	4604      	mov	r4, r0
    d922:	4615      	mov	r5, r2
    d924:	b199      	cbz	r1, d94e <am_hal_iom_power_ctrl+0x46>
    d926:	2902      	cmp	r1, #2
    d928:	d80f      	bhi.n	d94a <am_hal_iom_power_ctrl+0x42>
    d92a:	78c3      	ldrb	r3, [r0, #3]
    d92c:	6840      	ldr	r0, [r0, #4]
    d92e:	079a      	lsls	r2, r3, #30
    d930:	d519      	bpl.n	d966 <am_hal_iom_power_ctrl+0x5e>
    d932:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    d936:	3304      	adds	r3, #4
    d938:	031b      	lsls	r3, r3, #12
    d93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    d93e:	f003 0306 	and.w	r3, r3, #6
    d942:	2b04      	cmp	r3, #4
    d944:	d00c      	beq.n	d960 <am_hal_iom_power_ctrl+0x58>
    d946:	2003      	movs	r0, #3
    d948:	bd38      	pop	{r3, r4, r5, pc}
    d94a:	2006      	movs	r0, #6
    d94c:	bd38      	pop	{r3, r4, r5, pc}
    d94e:	2a00      	cmp	r2, #0
    d950:	f000 80cf 	beq.w	daf2 <am_hal_iom_power_ctrl+0x1ea>
    d954:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    d958:	2b00      	cmp	r3, #0
    d95a:	d146      	bne.n	d9ea <am_hal_iom_power_ctrl+0xe2>
    d95c:	2007      	movs	r0, #7
    d95e:	bd38      	pop	{r3, r4, r5, pc}
    d960:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d962:	2b00      	cmp	r3, #0
    d964:	d1ef      	bne.n	d946 <am_hal_iom_power_ctrl+0x3e>
    d966:	b3d5      	cbz	r5, d9de <am_hal_iom_power_ctrl+0xd6>
    d968:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    d96c:	3304      	adds	r3, #4
    d96e:	031b      	lsls	r3, r3, #12
    d970:	2201      	movs	r2, #1
    d972:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    d976:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    d97a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    d97e:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    d982:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    d986:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    d98a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    d98e:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    d992:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    d996:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    d99a:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    d99e:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    d9a2:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    d9a6:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    d9aa:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    d9ae:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    d9b2:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    d9b6:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    d9ba:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    d9be:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    d9c2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    d9c6:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    d9ca:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    d9ce:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    d9d2:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    d9d6:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    d9da:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    d9de:	3002      	adds	r0, #2
    d9e0:	b2c0      	uxtb	r0, r0
    d9e2:	f000 fc9b 	bl	e31c <am_hal_pwrctrl_periph_disable>
    d9e6:	2000      	movs	r0, #0
    d9e8:	bd38      	pop	{r3, r4, r5, pc}
    d9ea:	6843      	ldr	r3, [r0, #4]
    d9ec:	1c98      	adds	r0, r3, #2
    d9ee:	b2c0      	uxtb	r0, r0
    d9f0:	f000 fc6a 	bl	e2c8 <am_hal_pwrctrl_periph_enable>
    d9f4:	6863      	ldr	r3, [r4, #4]
    d9f6:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    d9fa:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    d9fe:	3304      	adds	r3, #4
    da00:	031b      	lsls	r3, r3, #12
    da02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    da06:	6863      	ldr	r3, [r4, #4]
    da08:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    da0c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da10:	3304      	adds	r3, #4
    da12:	031b      	lsls	r3, r3, #12
    da14:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    da18:	6863      	ldr	r3, [r4, #4]
    da1a:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    da1e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da22:	3304      	adds	r3, #4
    da24:	031b      	lsls	r3, r3, #12
    da26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    da2a:	6863      	ldr	r3, [r4, #4]
    da2c:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    da30:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da34:	3304      	adds	r3, #4
    da36:	031b      	lsls	r3, r3, #12
    da38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    da3c:	6863      	ldr	r3, [r4, #4]
    da3e:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
    da42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da46:	3304      	adds	r3, #4
    da48:	031b      	lsls	r3, r3, #12
    da4a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
    da4e:	6863      	ldr	r3, [r4, #4]
    da50:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    da54:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da58:	3304      	adds	r3, #4
    da5a:	031b      	lsls	r3, r3, #12
    da5c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    da60:	6863      	ldr	r3, [r4, #4]
    da62:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    da66:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da6a:	3304      	adds	r3, #4
    da6c:	031b      	lsls	r3, r3, #12
    da6e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    da72:	6863      	ldr	r3, [r4, #4]
    da74:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    da78:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da7c:	3304      	adds	r3, #4
    da7e:	031b      	lsls	r3, r3, #12
    da80:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    da84:	6863      	ldr	r3, [r4, #4]
    da86:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    da8a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    da8e:	3304      	adds	r3, #4
    da90:	031b      	lsls	r3, r3, #12
    da92:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    da96:	6863      	ldr	r3, [r4, #4]
    da98:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    da9c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    daa0:	3304      	adds	r3, #4
    daa2:	031b      	lsls	r3, r3, #12
    daa4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    daa8:	6863      	ldr	r3, [r4, #4]
    daaa:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    daae:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dab2:	3304      	adds	r3, #4
    dab4:	031b      	lsls	r3, r3, #12
    dab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    daba:	6863      	ldr	r3, [r4, #4]
    dabc:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    dac0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dac4:	3304      	adds	r3, #4
    dac6:	031b      	lsls	r3, r3, #12
    dac8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    dacc:	6863      	ldr	r3, [r4, #4]
    dace:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    dad2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    dad6:	3304      	adds	r3, #4
    dad8:	031b      	lsls	r3, r3, #12
    dada:	f022 0201 	bic.w	r2, r2, #1
    dade:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    dae2:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    dae6:	07db      	lsls	r3, r3, #31
    dae8:	d40a      	bmi.n	db00 <am_hal_iom_power_ctrl+0x1f8>
    daea:	2000      	movs	r0, #0
    daec:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    daf0:	bd38      	pop	{r3, r4, r5, pc}
    daf2:	6840      	ldr	r0, [r0, #4]
    daf4:	3002      	adds	r0, #2
    daf6:	b2c0      	uxtb	r0, r0
    daf8:	f000 fbe6 	bl	e2c8 <am_hal_pwrctrl_periph_enable>
    dafc:	4628      	mov	r0, r5
    dafe:	bd38      	pop	{r3, r4, r5, pc}
    db00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    db02:	b953      	cbnz	r3, db1a <am_hal_iom_power_ctrl+0x212>
    db04:	6863      	ldr	r3, [r4, #4]
    db06:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    db0a:	3304      	adds	r3, #4
    db0c:	031b      	lsls	r3, r3, #12
    db0e:	f503 7226 	add.w	r2, r3, #664	; 0x298
    db12:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    db16:	e883 000c 	stmia.w	r3, {r2, r3}
    db1a:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    db1e:	f001 f8e5 	bl	ecec <am_hal_cmdq_enable>
    db22:	e7e2      	b.n	daea <am_hal_iom_power_ctrl+0x1e2>
    db24:	01123456 	.word	0x01123456

0000db28 <am_hal_iom_configure>:
    db28:	b128      	cbz	r0, db36 <am_hal_iom_configure+0xe>
    db2a:	6803      	ldr	r3, [r0, #0]
    db2c:	4a88      	ldr	r2, [pc, #544]	; (dd50 <am_hal_iom_configure+0x228>)
    db2e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db32:	4293      	cmp	r3, r2
    db34:	d001      	beq.n	db3a <am_hal_iom_configure+0x12>
    db36:	2002      	movs	r0, #2
    db38:	4770      	bx	lr
    db3a:	b111      	cbz	r1, db42 <am_hal_iom_configure+0x1a>
    db3c:	6843      	ldr	r3, [r0, #4]
    db3e:	2b05      	cmp	r3, #5
    db40:	d901      	bls.n	db46 <am_hal_iom_configure+0x1e>
    db42:	2006      	movs	r0, #6
    db44:	4770      	bx	lr
    db46:	78c2      	ldrb	r2, [r0, #3]
    db48:	0792      	lsls	r2, r2, #30
    db4a:	d501      	bpl.n	db50 <am_hal_iom_configure+0x28>
    db4c:	2007      	movs	r0, #7
    db4e:	4770      	bx	lr
    db50:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    db54:	3304      	adds	r3, #4
    db56:	780a      	ldrb	r2, [r1, #0]
    db58:	031b      	lsls	r3, r3, #12
    db5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db5e:	f241 0410 	movw	r4, #4112	; 0x1010
    db62:	7202      	strb	r2, [r0, #8]
    db64:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    db68:	b92a      	cbnz	r2, db76 <am_hal_iom_configure+0x4e>
    db6a:	7a0e      	ldrb	r6, [r1, #8]
    db6c:	2e03      	cmp	r6, #3
    db6e:	d907      	bls.n	db80 <am_hal_iom_configure+0x58>
    db70:	2006      	movs	r0, #6
    db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db76:	2a01      	cmp	r2, #1
    db78:	d06a      	beq.n	dc50 <am_hal_iom_configure+0x128>
    db7a:	2005      	movs	r0, #5
    db7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db80:	f8d1 a004 	ldr.w	sl, [r1, #4]
    db84:	4a73      	ldr	r2, [pc, #460]	; (dd54 <am_hal_iom_configure+0x22c>)
    db86:	4592      	cmp	sl, r2
    db88:	d8f2      	bhi.n	db70 <am_hal_iom_configure+0x48>
    db8a:	f1ba 0f00 	cmp.w	sl, #0
    db8e:	d03e      	beq.n	dc0e <am_hal_iom_configure+0xe6>
    db90:	fbb2 f2fa 	udiv	r2, r2, sl
    db94:	fb0a f402 	mul.w	r4, sl, r2
    db98:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    db9c:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    dba0:	2c00      	cmp	r4, #0
    dba2:	bf0c      	ite	eq
    dba4:	4614      	moveq	r4, r2
    dba6:	1c54      	addne	r4, r2, #1
    dba8:	4262      	negs	r2, r4
    dbaa:	4022      	ands	r2, r4
    dbac:	fab2 f282 	clz	r2, r2
    dbb0:	f1c2 021f 	rsb	r2, r2, #31
    dbb4:	2a06      	cmp	r2, #6
    dbb6:	bfa8      	it	ge
    dbb8:	2206      	movge	r2, #6
    dbba:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    dbbe:	f240 80c0 	bls.w	dd42 <am_hal_iom_configure+0x21a>
    dbc2:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    dbc6:	4f64      	ldr	r7, [pc, #400]	; (dd58 <am_hal_iom_configure+0x230>)
    dbc8:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    dbcc:	42bd      	cmp	r5, r7
    dbce:	bf8c      	ite	hi
    dbd0:	f04f 0800 	movhi.w	r8, #0
    dbd4:	f04f 0801 	movls.w	r8, #1
    dbd8:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    dbdc:	f10e 0e01 	add.w	lr, lr, #1
    dbe0:	fa0e f702 	lsl.w	r7, lr, r2
    dbe4:	fbb4 f5f7 	udiv	r5, r4, r7
    dbe8:	fb07 4715 	mls	r7, r7, r5, r4
    dbec:	2f00      	cmp	r7, #0
    dbee:	bf18      	it	ne
    dbf0:	3501      	addne	r5, #1
    dbf2:	fab5 f785 	clz	r7, r5
    dbf6:	f1c7 071f 	rsb	r7, r7, #31
    dbfa:	2f07      	cmp	r7, #7
    dbfc:	f240 809e 	bls.w	dd3c <am_hal_iom_configure+0x214>
    dc00:	3a07      	subs	r2, #7
    dc02:	443a      	add	r2, r7
    dc04:	f102 0901 	add.w	r9, r2, #1
    dc08:	f1b9 0f07 	cmp.w	r9, #7
    dc0c:	d934      	bls.n	dc78 <am_hal_iom_configure+0x150>
    dc0e:	2400      	movs	r4, #0
    dc10:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    dc14:	f044 0401 	orr.w	r4, r4, #1
    dc18:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    dc1c:	68cb      	ldr	r3, [r1, #12]
    dc1e:	684d      	ldr	r5, [r1, #4]
    dc20:	690c      	ldr	r4, [r1, #16]
    dc22:	60c3      	str	r3, [r0, #12]
    dc24:	2300      	movs	r3, #0
    dc26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dc2a:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    dc2e:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    dc32:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    dc36:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    dc3a:	6104      	str	r4, [r0, #16]
    dc3c:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    dc40:	4a44      	ldr	r2, [pc, #272]	; (dd54 <am_hal_iom_configure+0x22c>)
    dc42:	fbb2 f2f5 	udiv	r2, r2, r5
    dc46:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    dc4a:	4618      	mov	r0, r3
    dc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc50:	684a      	ldr	r2, [r1, #4]
    dc52:	4c42      	ldr	r4, [pc, #264]	; (dd5c <am_hal_iom_configure+0x234>)
    dc54:	42a2      	cmp	r2, r4
    dc56:	d06c      	beq.n	dd32 <am_hal_iom_configure+0x20a>
    dc58:	4c41      	ldr	r4, [pc, #260]	; (dd60 <am_hal_iom_configure+0x238>)
    dc5a:	42a2      	cmp	r2, r4
    dc5c:	d064      	beq.n	dd28 <am_hal_iom_configure+0x200>
    dc5e:	4c41      	ldr	r4, [pc, #260]	; (dd64 <am_hal_iom_configure+0x23c>)
    dc60:	42a2      	cmp	r2, r4
    dc62:	d185      	bne.n	db70 <am_hal_iom_configure+0x48>
    dc64:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    dc68:	4a3f      	ldr	r2, [pc, #252]	; (dd68 <am_hal_iom_configure+0x240>)
    dc6a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dc6e:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    dc72:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    dc76:	e7cd      	b.n	dc14 <am_hal_iom_configure+0xec>
    dc78:	3f07      	subs	r7, #7
    dc7a:	f04f 0c01 	mov.w	ip, #1
    dc7e:	fa0c fc07 	lsl.w	ip, ip, r7
    dc82:	f10c 3cff 	add.w	ip, ip, #4294967295
    dc86:	ea0c 0c05 	and.w	ip, ip, r5
    dc8a:	40fd      	lsrs	r5, r7
    dc8c:	f1bc 0f00 	cmp.w	ip, #0
    dc90:	bf18      	it	ne
    dc92:	3501      	addne	r5, #1
    dc94:	4f35      	ldr	r7, [pc, #212]	; (dd6c <am_hal_iom_configure+0x244>)
    dc96:	45ba      	cmp	sl, r7
    dc98:	d843      	bhi.n	dd22 <am_hal_iom_configure+0x1fa>
    dc9a:	f04f 0c01 	mov.w	ip, #1
    dc9e:	fa0c fc02 	lsl.w	ip, ip, r2
    dca2:	ebbc 0c04 	subs.w	ip, ip, r4
    dca6:	bf18      	it	ne
    dca8:	f04f 0c01 	movne.w	ip, #1
    dcac:	1074      	asrs	r4, r6, #1
    dcae:	2c01      	cmp	r4, #1
    dcb0:	d04a      	beq.n	dd48 <am_hal_iom_configure+0x220>
    dcb2:	3d01      	subs	r5, #1
    dcb4:	086f      	lsrs	r7, r5, #1
    dcb6:	fa0e f402 	lsl.w	r4, lr, r2
    dcba:	fb05 fe0c 	mul.w	lr, r5, ip
    dcbe:	fb0e 4404 	mla	r4, lr, r4, r4
    dcc2:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    dcc6:	f8df 908c 	ldr.w	r9, [pc, #140]	; dd54 <am_hal_iom_configure+0x22c>
    dcca:	fbb9 fbf4 	udiv	fp, r9, r4
    dcce:	fb04 fa0b 	mul.w	sl, r4, fp
    dcd2:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    dcd6:	0864      	lsrs	r4, r4, #1
    dcd8:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    dcdc:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    dce0:	4554      	cmp	r4, sl
    dce2:	bf2c      	ite	cs
    dce4:	46da      	movcs	sl, fp
    dce6:	f10b 0a01 	addcc.w	sl, fp, #1
    dcea:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    dcee:	f8df b090 	ldr.w	fp, [pc, #144]	; dd80 <am_hal_iom_configure+0x258>
    dcf2:	fbba f4fb 	udiv	r4, sl, fp
    dcf6:	043f      	lsls	r7, r7, #16
    dcf8:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    dcfc:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    dd00:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    dd04:	fb0b ab14 	mls	fp, fp, r4, sl
    dd08:	432f      	orrs	r7, r5
    dd0a:	f1bb 0f00 	cmp.w	fp, #0
    dd0e:	d105      	bne.n	dd1c <am_hal_iom_configure+0x1f4>
    dd10:	b124      	cbz	r4, dd1c <am_hal_iom_configure+0x1f4>
    dd12:	1e65      	subs	r5, r4, #1
    dd14:	4225      	tst	r5, r4
    dd16:	d101      	bne.n	dd1c <am_hal_iom_configure+0x1f4>
    dd18:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    dd1c:	2400      	movs	r4, #0
    dd1e:	433c      	orrs	r4, r7
    dd20:	e776      	b.n	dc10 <am_hal_iom_configure+0xe8>
    dd22:	f04f 0c00 	mov.w	ip, #0
    dd26:	e7c1      	b.n	dcac <am_hal_iom_configure+0x184>
    dd28:	4a11      	ldr	r2, [pc, #68]	; (dd70 <am_hal_iom_configure+0x248>)
    dd2a:	4c12      	ldr	r4, [pc, #72]	; (dd74 <am_hal_iom_configure+0x24c>)
    dd2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dd30:	e770      	b.n	dc14 <am_hal_iom_configure+0xec>
    dd32:	4a11      	ldr	r2, [pc, #68]	; (dd78 <am_hal_iom_configure+0x250>)
    dd34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dd38:	4c10      	ldr	r4, [pc, #64]	; (dd7c <am_hal_iom_configure+0x254>)
    dd3a:	e76b      	b.n	dc14 <am_hal_iom_configure+0xec>
    dd3c:	f102 0901 	add.w	r9, r2, #1
    dd40:	e7a8      	b.n	dc94 <am_hal_iom_configure+0x16c>
    dd42:	f04f 0801 	mov.w	r8, #1
    dd46:	e747      	b.n	dbd8 <am_hal_iom_configure+0xb0>
    dd48:	1eaf      	subs	r7, r5, #2
    dd4a:	087f      	lsrs	r7, r7, #1
    dd4c:	3d01      	subs	r5, #1
    dd4e:	e7b2      	b.n	dcb6 <am_hal_iom_configure+0x18e>
    dd50:	01123456 	.word	0x01123456
    dd54:	02dc6c00 	.word	0x02dc6c00
    dd58:	007a11ff 	.word	0x007a11ff
    dd5c:	00061a80 	.word	0x00061a80
    dd60:	000f4240 	.word	0x000f4240
    dd64:	000186a0 	.word	0x000186a0
    dd68:	0003f070 	.word	0x0003f070
    dd6c:	00b71aff 	.word	0x00b71aff
    dd70:	00213040 	.word	0x00213040
    dd74:	06031301 	.word	0x06031301
    dd78:	0003f270 	.word	0x0003f270
    dd7c:	1d0e1201 	.word	0x1d0e1201
    dd80:	0003d090 	.word	0x0003d090

0000dd84 <am_hal_iom_blocking_transfer>:
    dd84:	b128      	cbz	r0, dd92 <am_hal_iom_blocking_transfer+0xe>
    dd86:	6803      	ldr	r3, [r0, #0]
    dd88:	4ac4      	ldr	r2, [pc, #784]	; (e09c <am_hal_iom_blocking_transfer+0x318>)
    dd8a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dd8e:	4293      	cmp	r3, r2
    dd90:	d001      	beq.n	dd96 <am_hal_iom_blocking_transfer+0x12>
    dd92:	2002      	movs	r0, #2
    dd94:	4770      	bx	lr
    dd96:	b159      	cbz	r1, ddb0 <am_hal_iom_blocking_transfer+0x2c>
    dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd9c:	f891 8010 	ldrb.w	r8, [r1, #16]
    dda0:	f1b8 0f01 	cmp.w	r8, #1
    dda4:	b087      	sub	sp, #28
    dda6:	d905      	bls.n	ddb4 <am_hal_iom_blocking_transfer+0x30>
    dda8:	2007      	movs	r0, #7
    ddaa:	b007      	add	sp, #28
    ddac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddb0:	2006      	movs	r0, #6
    ddb2:	4770      	bx	lr
    ddb4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    ddb8:	f1ba 0f00 	cmp.w	sl, #0
    ddbc:	d102      	bne.n	ddc4 <am_hal_iom_blocking_transfer+0x40>
    ddbe:	f881 a010 	strb.w	sl, [r1, #16]
    ddc2:	46d0      	mov	r8, sl
    ddc4:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ddc8:	f1b9 0f03 	cmp.w	r9, #3
    ddcc:	d901      	bls.n	ddd2 <am_hal_iom_blocking_transfer+0x4e>
    ddce:	2006      	movs	r0, #6
    ddd0:	e7eb      	b.n	ddaa <am_hal_iom_blocking_transfer+0x26>
    ddd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    ddd6:	f04f 33ff 	mov.w	r3, #4294967295
    ddda:	f8d1 b008 	ldr.w	fp, [r1, #8]
    ddde:	4093      	lsls	r3, r2
    dde0:	ea13 0f0b 	tst.w	r3, fp
    dde4:	d1f3      	bne.n	ddce <am_hal_iom_blocking_transfer+0x4a>
    dde6:	f1ba 0f00 	cmp.w	sl, #0
    ddea:	f000 80c1 	beq.w	df70 <am_hal_iom_blocking_transfer+0x1ec>
    ddee:	f1b8 0f00 	cmp.w	r8, #0
    ddf2:	f000 80cd 	beq.w	df90 <am_hal_iom_blocking_transfer+0x20c>
    ddf6:	698b      	ldr	r3, [r1, #24]
    ddf8:	2b00      	cmp	r3, #0
    ddfa:	d0e8      	beq.n	ddce <am_hal_iom_blocking_transfer+0x4a>
    ddfc:	7a03      	ldrb	r3, [r0, #8]
    ddfe:	2b01      	cmp	r3, #1
    de00:	f040 80ba 	bne.w	df78 <am_hal_iom_blocking_transfer+0x1f4>
    de04:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    de08:	d8e1      	bhi.n	ddce <am_hal_iom_blocking_transfer+0x4a>
    de0a:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    de0e:	2b02      	cmp	r3, #2
    de10:	d0ca      	beq.n	dda8 <am_hal_iom_blocking_transfer+0x24>
    de12:	7f0b      	ldrb	r3, [r1, #28]
    de14:	694f      	ldr	r7, [r1, #20]
    de16:	f8d1 e018 	ldr.w	lr, [r1, #24]
    de1a:	9303      	str	r3, [sp, #12]
    de1c:	4604      	mov	r4, r0
    de1e:	2301      	movs	r3, #1
    de20:	460d      	mov	r5, r1
    de22:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    de26:	6866      	ldr	r6, [r4, #4]
    de28:	9300      	str	r3, [sp, #0]
    de2a:	f04f 32ff 	mov.w	r2, #4294967295
    de2e:	2300      	movs	r3, #0
    de30:	f104 0124 	add.w	r1, r4, #36	; 0x24
    de34:	4598      	cmp	r8, r3
    de36:	bf18      	it	ne
    de38:	4677      	movne	r7, lr
    de3a:	f7ff fa8d 	bl	d358 <am_hal_flash_delay_status_check>
    de3e:	2800      	cmp	r0, #0
    de40:	d1b3      	bne.n	ddaa <am_hal_iom_blocking_transfer+0x26>
    de42:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    de46:	3604      	adds	r6, #4
    de48:	2301      	movs	r3, #1
    de4a:	0336      	lsls	r6, r6, #12
    de4c:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    de50:	9300      	str	r3, [sp, #0]
    de52:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    de56:	9304      	str	r3, [sp, #16]
    de58:	4619      	mov	r1, r3
    de5a:	2206      	movs	r2, #6
    de5c:	2304      	movs	r3, #4
    de5e:	f7ff fa7b 	bl	d358 <am_hal_flash_delay_status_check>
    de62:	2800      	cmp	r0, #0
    de64:	d1a1      	bne.n	ddaa <am_hal_iom_blocking_transfer+0x26>
    de66:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    de6a:	9305      	str	r3, [sp, #20]
    de6c:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    de70:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    de74:	f04f 32ff 	mov.w	r2, #4294967295
    de78:	f360 0300 	bfi	r3, r0, #0, #1
    de7c:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    de80:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    de84:	682b      	ldr	r3, [r5, #0]
    de86:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    de8a:	682b      	ldr	r3, [r5, #0]
    de8c:	4423      	add	r3, r4
    de8e:	f893 3898 	ldrb.w	r3, [r3, #2200]	; 0x898
    de92:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    de96:	7a23      	ldrb	r3, [r4, #8]
    de98:	b903      	cbnz	r3, de9c <am_hal_iom_blocking_transfer+0x118>
    de9a:	6828      	ldr	r0, [r5, #0]
    de9c:	4a80      	ldr	r2, [pc, #512]	; (e0a0 <am_hal_iom_blocking_transfer+0x31c>)
    de9e:	0500      	lsls	r0, r0, #20
    dea0:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    dea4:	f400 1340 	and.w	r3, r0, #3145728	; 0x300000
    dea8:	ea0a 0202 	and.w	r2, sl, r2
    deac:	f1b8 0f01 	cmp.w	r8, #1
    deb0:	ea42 0203 	orr.w	r2, r2, r3
    deb4:	d074      	beq.n	dfa0 <am_hal_iom_blocking_transfer+0x21c>
    deb6:	f3cb 230f 	ubfx	r3, fp, #8, #16
    deba:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    debe:	ea4f 1149 	mov.w	r1, r9, lsl #5
    dec2:	ea4f 600b 	mov.w	r0, fp, lsl #24
    dec6:	f040 0001 	orr.w	r0, r0, #1
    deca:	f001 0160 	and.w	r1, r1, #96	; 0x60
    dece:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ded2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ded6:	4301      	orrs	r1, r0
    ded8:	9803      	ldr	r0, [sp, #12]
    deda:	f3c3 2307 	ubfx	r3, r3, #8, #8
    dede:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    dee2:	2b03      	cmp	r3, #3
    dee4:	ea42 0201 	orr.w	r2, r2, r1
    dee8:	f240 80b3 	bls.w	e052 <am_hal_iom_blocking_transfer+0x2ce>
    deec:	f1b8 0f00 	cmp.w	r8, #0
    def0:	d00a      	beq.n	df08 <am_hal_iom_blocking_transfer+0x184>
    def2:	4641      	mov	r1, r8
    def4:	f857 0b04 	ldr.w	r0, [r7], #4
    def8:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    defc:	2903      	cmp	r1, #3
    defe:	f1a3 0304 	sub.w	r3, r3, #4
    df02:	f1a1 0104 	sub.w	r1, r1, #4
    df06:	d82e      	bhi.n	df66 <am_hal_iom_blocking_transfer+0x1e2>
    df08:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    df0c:	f04f 0800 	mov.w	r8, #0
    df10:	2701      	movs	r7, #1
    df12:	9904      	ldr	r1, [sp, #16]
    df14:	9700      	str	r7, [sp, #0]
    df16:	2304      	movs	r3, #4
    df18:	2206      	movs	r2, #6
    df1a:	4862      	ldr	r0, [pc, #392]	; (e0a4 <am_hal_iom_blocking_transfer+0x320>)
    df1c:	f7ff fa1c 	bl	d358 <am_hal_flash_delay_status_check>
    df20:	4605      	mov	r5, r0
    df22:	b970      	cbnz	r0, df42 <am_hal_iom_blocking_transfer+0x1be>
    df24:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    df28:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    df2c:	d135      	bne.n	df9a <am_hal_iom_blocking_transfer+0x216>
    df2e:	0599      	lsls	r1, r3, #22
    df30:	f100 80cf 	bmi.w	e0d2 <am_hal_iom_blocking_transfer+0x34e>
    df34:	06da      	lsls	r2, r3, #27
    df36:	f100 80ce 	bmi.w	e0d6 <am_hal_iom_blocking_transfer+0x352>
    df3a:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    df3e:	d00e      	beq.n	df5e <am_hal_iom_blocking_transfer+0x1da>
    df40:	463d      	mov	r5, r7
    df42:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    df46:	4620      	mov	r0, r4
    df48:	f7ff fbce 	bl	d6e8 <internal_iom_reset_on_error>
    df4c:	f04f 33ff 	mov.w	r3, #4294967295
    df50:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    df54:	9b05      	ldr	r3, [sp, #20]
    df56:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    df5a:	4628      	mov	r0, r5
    df5c:	e725      	b.n	ddaa <am_hal_iom_blocking_transfer+0x26>
    df5e:	f1b8 0f00 	cmp.w	r8, #0
    df62:	d0f3      	beq.n	df4c <am_hal_iom_blocking_transfer+0x1c8>
    df64:	e7ec      	b.n	df40 <am_hal_iom_blocking_transfer+0x1bc>
    df66:	2b03      	cmp	r3, #3
    df68:	d972      	bls.n	e050 <am_hal_iom_blocking_transfer+0x2cc>
    df6a:	2900      	cmp	r1, #0
    df6c:	d1c2      	bne.n	def4 <am_hal_iom_blocking_transfer+0x170>
    df6e:	e7cb      	b.n	df08 <am_hal_iom_blocking_transfer+0x184>
    df70:	7a03      	ldrb	r3, [r0, #8]
    df72:	2b01      	cmp	r3, #1
    df74:	f43f af49 	beq.w	de0a <am_hal_iom_blocking_transfer+0x86>
    df78:	2b00      	cmp	r3, #0
    df7a:	f47f af46 	bne.w	de0a <am_hal_iom_blocking_transfer+0x86>
    df7e:	680b      	ldr	r3, [r1, #0]
    df80:	2b03      	cmp	r3, #3
    df82:	f63f af24 	bhi.w	ddce <am_hal_iom_blocking_transfer+0x4a>
    df86:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    df8a:	f4bf af20 	bcs.w	ddce <am_hal_iom_blocking_transfer+0x4a>
    df8e:	e73c      	b.n	de0a <am_hal_iom_blocking_transfer+0x86>
    df90:	694b      	ldr	r3, [r1, #20]
    df92:	2b00      	cmp	r3, #0
    df94:	f47f af32 	bne.w	ddfc <am_hal_iom_blocking_transfer+0x78>
    df98:	e719      	b.n	ddce <am_hal_iom_blocking_transfer+0x4a>
    df9a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    df9e:	e7d0      	b.n	df42 <am_hal_iom_blocking_transfer+0x1be>
    dfa0:	ea4f 1349 	mov.w	r3, r9, lsl #5
    dfa4:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    dfa8:	ea4f 610b 	mov.w	r1, fp, lsl #24
    dfac:	9b03      	ldr	r3, [sp, #12]
    dfae:	f041 0102 	orr.w	r1, r1, #2
    dfb2:	f3cb 200f 	ubfx	r0, fp, #8, #16
    dfb6:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    dfba:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    dfbe:	ea4e 0301 	orr.w	r3, lr, r1
    dfc2:	f8d5 800c 	ldr.w	r8, [r5, #12]
    dfc6:	431a      	orrs	r2, r3
    dfc8:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    dfcc:	2200      	movs	r2, #0
    dfce:	f1b8 0f00 	cmp.w	r8, #0
    dfd2:	d09b      	beq.n	df0c <am_hal_iom_blocking_transfer+0x188>
    dfd4:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    dfd8:	f3c3 4307 	ubfx	r3, r3, #16, #8
    dfdc:	2b03      	cmp	r3, #3
    dfde:	d81e      	bhi.n	e01e <am_hal_iom_blocking_transfer+0x29a>
    dfe0:	4d30      	ldr	r5, [pc, #192]	; (e0a4 <am_hal_iom_blocking_transfer+0x320>)
    dfe2:	e001      	b.n	dfe8 <am_hal_iom_blocking_transfer+0x264>
    dfe4:	3d01      	subs	r5, #1
    dfe6:	d093      	beq.n	df10 <am_hal_iom_blocking_transfer+0x18c>
    dfe8:	2010      	movs	r0, #16
    dfea:	b10a      	cbz	r2, dff0 <am_hal_iom_blocking_transfer+0x26c>
    dfec:	4598      	cmp	r8, r3
    dfee:	d88f      	bhi.n	df10 <am_hal_iom_blocking_transfer+0x18c>
    dff0:	f7ff f9a2 	bl	d338 <am_hal_flash_delay>
    dff4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    dff8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    dffc:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e000:	2b03      	cmp	r3, #3
    e002:	f002 0201 	and.w	r2, r2, #1
    e006:	d9ed      	bls.n	dfe4 <am_hal_iom_blocking_transfer+0x260>
    e008:	e009      	b.n	e01e <am_hal_iom_blocking_transfer+0x29a>
    e00a:	2b03      	cmp	r3, #3
    e00c:	6039      	str	r1, [r7, #0]
    e00e:	f1a8 0804 	sub.w	r8, r8, #4
    e012:	d962      	bls.n	e0da <am_hal_iom_blocking_transfer+0x356>
    e014:	f1b8 0f00 	cmp.w	r8, #0
    e018:	f43f af78 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e01c:	4607      	mov	r7, r0
    e01e:	f1b8 0f03 	cmp.w	r8, #3
    e022:	f1a3 0304 	sub.w	r3, r3, #4
    e026:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    e02a:	f107 0004 	add.w	r0, r7, #4
    e02e:	d8ec      	bhi.n	e00a <am_hal_iom_blocking_transfer+0x286>
    e030:	f1b8 0f01 	cmp.w	r8, #1
    e034:	7039      	strb	r1, [r7, #0]
    e036:	ea4f 2311 	mov.w	r3, r1, lsr #8
    e03a:	f43f af67 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e03e:	f1b8 0f02 	cmp.w	r8, #2
    e042:	707b      	strb	r3, [r7, #1]
    e044:	ea4f 4111 	mov.w	r1, r1, lsr #16
    e048:	f43f af60 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e04c:	70b9      	strb	r1, [r7, #2]
    e04e:	e75d      	b.n	df0c <am_hal_iom_blocking_transfer+0x188>
    e050:	4688      	mov	r8, r1
    e052:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    e056:	f1b8 0f00 	cmp.w	r8, #0
    e05a:	f43f af57 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e05e:	463b      	mov	r3, r7
    e060:	4647      	mov	r7, r8
    e062:	4698      	mov	r8, r3
    e064:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e068:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e06c:	2b03      	cmp	r3, #3
    e06e:	d81e      	bhi.n	e0ae <am_hal_iom_blocking_transfer+0x32a>
    e070:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e074:	07d8      	lsls	r0, r3, #31
    e076:	d42a      	bmi.n	e0ce <am_hal_iom_blocking_transfer+0x34a>
    e078:	4d0a      	ldr	r5, [pc, #40]	; (e0a4 <am_hal_iom_blocking_transfer+0x320>)
    e07a:	e005      	b.n	e088 <am_hal_iom_blocking_transfer+0x304>
    e07c:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    e080:	07db      	lsls	r3, r3, #31
    e082:	d424      	bmi.n	e0ce <am_hal_iom_blocking_transfer+0x34a>
    e084:	3d01      	subs	r5, #1
    e086:	d022      	beq.n	e0ce <am_hal_iom_blocking_transfer+0x34a>
    e088:	2010      	movs	r0, #16
    e08a:	f7ff f955 	bl	d338 <am_hal_flash_delay>
    e08e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    e092:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e096:	2b03      	cmp	r3, #3
    e098:	d9f0      	bls.n	e07c <am_hal_iom_blocking_transfer+0x2f8>
    e09a:	e008      	b.n	e0ae <am_hal_iom_blocking_transfer+0x32a>
    e09c:	01123456 	.word	0x01123456
    e0a0:	000fff00 	.word	0x000fff00
    e0a4:	0007a120 	.word	0x0007a120
    e0a8:	2f00      	cmp	r7, #0
    e0aa:	f43f af2f 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e0ae:	f858 2b04 	ldr.w	r2, [r8], #4
    e0b2:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    e0b6:	2f03      	cmp	r7, #3
    e0b8:	f1a3 0304 	sub.w	r3, r3, #4
    e0bc:	f1a7 0704 	sub.w	r7, r7, #4
    e0c0:	f67f af24 	bls.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e0c4:	2b03      	cmp	r3, #3
    e0c6:	d8ef      	bhi.n	e0a8 <am_hal_iom_blocking_transfer+0x324>
    e0c8:	2f00      	cmp	r7, #0
    e0ca:	d1cb      	bne.n	e064 <am_hal_iom_blocking_transfer+0x2e0>
    e0cc:	e71e      	b.n	df0c <am_hal_iom_blocking_transfer+0x188>
    e0ce:	46b8      	mov	r8, r7
    e0d0:	e71e      	b.n	df10 <am_hal_iom_blocking_transfer+0x18c>
    e0d2:	4d05      	ldr	r5, [pc, #20]	; (e0e8 <am_hal_iom_blocking_transfer+0x364>)
    e0d4:	e735      	b.n	df42 <am_hal_iom_blocking_transfer+0x1be>
    e0d6:	4d05      	ldr	r5, [pc, #20]	; (e0ec <am_hal_iom_blocking_transfer+0x368>)
    e0d8:	e733      	b.n	df42 <am_hal_iom_blocking_transfer+0x1be>
    e0da:	f1b8 0f00 	cmp.w	r8, #0
    e0de:	f43f af15 	beq.w	df0c <am_hal_iom_blocking_transfer+0x188>
    e0e2:	4607      	mov	r7, r0
    e0e4:	e776      	b.n	dfd4 <am_hal_iom_blocking_transfer+0x250>
    e0e6:	bf00      	nop
    e0e8:	08000001 	.word	0x08000001
    e0ec:	08000002 	.word	0x08000002

0000e0f0 <am_hal_itm_disable>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	4b25      	ldr	r3, [pc, #148]	; (e188 <am_hal_itm_disable+0x98>)
    e0f4:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e0f8:	b9b3      	cbnz	r3, e128 <am_hal_itm_disable+0x38>
    e0fa:	4b24      	ldr	r3, [pc, #144]	; (e18c <am_hal_itm_disable+0x9c>)
    e0fc:	68da      	ldr	r2, [r3, #12]
    e0fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e102:	60da      	str	r2, [r3, #12]
    e104:	68da      	ldr	r2, [r3, #12]
    e106:	01d2      	lsls	r2, r2, #7
    e108:	d5fc      	bpl.n	e104 <am_hal_itm_disable+0x14>
    e10a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    e10e:	4920      	ldr	r1, [pc, #128]	; (e190 <am_hal_itm_disable+0xa0>)
    e110:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    e114:	4a1f      	ldr	r2, [pc, #124]	; (e194 <am_hal_itm_disable+0xa4>)
    e116:	200f      	movs	r0, #15
    e118:	f04f 31ff 	mov.w	r1, #4294967295
    e11c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    e120:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    e124:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    e128:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    e12c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    e130:	021b      	lsls	r3, r3, #8
    e132:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    e136:	d4f9      	bmi.n	e12c <am_hal_itm_disable+0x3c>
    e138:	f44f 7048 	mov.w	r0, #800	; 0x320
    e13c:	f7ff f8fc 	bl	d338 <am_hal_flash_delay>
    e140:	4b13      	ldr	r3, [pc, #76]	; (e190 <am_hal_itm_disable+0xa0>)
    e142:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    e146:	4621      	mov	r1, r4
    e148:	2064      	movs	r0, #100	; 0x64
    e14a:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    e14e:	f023 0301 	bic.w	r3, r3, #1
    e152:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    e156:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    e15a:	4b0f      	ldr	r3, [pc, #60]	; (e198 <am_hal_itm_disable+0xa8>)
    e15c:	4013      	ands	r3, r2
    e15e:	2b00      	cmp	r3, #0
    e160:	d1f9      	bne.n	e156 <am_hal_itm_disable+0x66>
    e162:	3801      	subs	r0, #1
    e164:	d1f1      	bne.n	e14a <am_hal_itm_disable+0x5a>
    e166:	4a09      	ldr	r2, [pc, #36]	; (e18c <am_hal_itm_disable+0x9c>)
    e168:	68d3      	ldr	r3, [r2, #12]
    e16a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e16e:	60d3      	str	r3, [r2, #12]
    e170:	68d3      	ldr	r3, [r2, #12]
    e172:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    e176:	d1fb      	bne.n	e170 <am_hal_itm_disable+0x80>
    e178:	4a03      	ldr	r2, [pc, #12]	; (e188 <am_hal_itm_disable+0x98>)
    e17a:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    e17e:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    e182:	2b00      	cmp	r3, #0
    e184:	d1fb      	bne.n	e17e <am_hal_itm_disable+0x8e>
    e186:	bd10      	pop	{r4, pc}
    e188:	40020000 	.word	0x40020000
    e18c:	e000edf0 	.word	0xe000edf0
    e190:	c5acce55 	.word	0xc5acce55
    e194:	00150511 	.word	0x00150511
    e198:	00800001 	.word	0x00800001

0000e19c <am_hal_mcuctrl_info_get>:
    e19c:	b4f0      	push	{r4, r5, r6, r7}
    e19e:	b121      	cbz	r1, e1aa <am_hal_mcuctrl_info_get+0xe>
    e1a0:	2801      	cmp	r0, #1
    e1a2:	d038      	beq.n	e216 <am_hal_mcuctrl_info_get+0x7a>
    e1a4:	d320      	bcc.n	e1e8 <am_hal_mcuctrl_info_get+0x4c>
    e1a6:	2802      	cmp	r0, #2
    e1a8:	d002      	beq.n	e1b0 <am_hal_mcuctrl_info_get+0x14>
    e1aa:	2006      	movs	r0, #6
    e1ac:	bcf0      	pop	{r4, r5, r6, r7}
    e1ae:	4770      	bx	lr
    e1b0:	4a41      	ldr	r2, [pc, #260]	; (e2b8 <am_hal_mcuctrl_info_get+0x11c>)
    e1b2:	684d      	ldr	r5, [r1, #4]
    e1b4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    e1b8:	694c      	ldr	r4, [r1, #20]
    e1ba:	f003 0601 	and.w	r6, r3, #1
    e1be:	f3c3 0040 	ubfx	r0, r3, #1, #1
    e1c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e1c6:	700e      	strb	r6, [r1, #0]
    e1c8:	7208      	strb	r0, [r1, #8]
    e1ca:	740b      	strb	r3, [r1, #16]
    e1cc:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    e1d0:	60cb      	str	r3, [r1, #12]
    e1d2:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    e1d6:	4328      	orrs	r0, r5
    e1d8:	6048      	str	r0, [r1, #4]
    e1da:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    e1de:	4323      	orrs	r3, r4
    e1e0:	2000      	movs	r0, #0
    e1e2:	614b      	str	r3, [r1, #20]
    e1e4:	bcf0      	pop	{r4, r5, r6, r7}
    e1e6:	4770      	bx	lr
    e1e8:	4a33      	ldr	r2, [pc, #204]	; (e2b8 <am_hal_mcuctrl_info_get+0x11c>)
    e1ea:	6993      	ldr	r3, [r2, #24]
    e1ec:	f3c3 1080 	ubfx	r0, r3, #6, #1
    e1f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e1f4:	7008      	strb	r0, [r1, #0]
    e1f6:	704b      	strb	r3, [r1, #1]
    e1f8:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e1fc:	f3c3 6381 	ubfx	r3, r3, #26, #2
    e200:	710b      	strb	r3, [r1, #4]
    e202:	6953      	ldr	r3, [r2, #20]
    e204:	f3c3 0240 	ubfx	r2, r3, #1, #1
    e208:	f003 0301 	and.w	r3, r3, #1
    e20c:	2000      	movs	r0, #0
    e20e:	708a      	strb	r2, [r1, #2]
    e210:	70cb      	strb	r3, [r1, #3]
    e212:	bcf0      	pop	{r4, r5, r6, r7}
    e214:	4770      	bx	lr
    e216:	4b28      	ldr	r3, [pc, #160]	; (e2b8 <am_hal_mcuctrl_info_get+0x11c>)
    e218:	4c28      	ldr	r4, [pc, #160]	; (e2bc <am_hal_mcuctrl_info_get+0x120>)
    e21a:	681a      	ldr	r2, [r3, #0]
    e21c:	600a      	str	r2, [r1, #0]
    e21e:	6858      	ldr	r0, [r3, #4]
    e220:	6048      	str	r0, [r1, #4]
    e222:	6898      	ldr	r0, [r3, #8]
    e224:	6088      	str	r0, [r1, #8]
    e226:	68d8      	ldr	r0, [r3, #12]
    e228:	60c8      	str	r0, [r1, #12]
    e22a:	691d      	ldr	r5, [r3, #16]
    e22c:	4824      	ldr	r0, [pc, #144]	; (e2c0 <am_hal_mcuctrl_info_get+0x124>)
    e22e:	610d      	str	r5, [r1, #16]
    e230:	f3c2 5703 	ubfx	r7, r2, #20, #4
    e234:	f3c2 4603 	ubfx	r6, r2, #16, #4
    e238:	695d      	ldr	r5, [r3, #20]
    e23a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    e23e:	4b21      	ldr	r3, [pc, #132]	; (e2c4 <am_hal_mcuctrl_info_get+0x128>)
    e240:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    e244:	6208      	str	r0, [r1, #32]
    e246:	f002 0201 	and.w	r2, r2, #1
    e24a:	614d      	str	r5, [r1, #20]
    e24c:	61cc      	str	r4, [r1, #28]
    e24e:	618a      	str	r2, [r1, #24]
    e250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    e254:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    e258:	b2d0      	uxtb	r0, r2
    e25a:	f004 020f 	and.w	r2, r4, #15
    e25e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    e262:	624a      	str	r2, [r1, #36]	; 0x24
    e264:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    e268:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    e26c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    e270:	f004 020f 	and.w	r2, r4, #15
    e274:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    e278:	628a      	str	r2, [r1, #40]	; 0x28
    e27a:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    e27e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    e282:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    e286:	f3c2 1203 	ubfx	r2, r2, #4, #4
    e28a:	4302      	orrs	r2, r0
    e28c:	62ca      	str	r2, [r1, #44]	; 0x2c
    e28e:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    e292:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    e296:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    e29a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    e29e:	b2c0      	uxtb	r0, r0
    e2a0:	0400      	lsls	r0, r0, #16
    e2a2:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    e2a6:	b2d2      	uxtb	r2, r2
    e2a8:	431a      	orrs	r2, r3
    e2aa:	b2e3      	uxtb	r3, r4
    e2ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    e2b0:	630b      	str	r3, [r1, #48]	; 0x30
    e2b2:	2000      	movs	r0, #0
    e2b4:	bcf0      	pop	{r4, r5, r6, r7}
    e2b6:	4770      	bx	lr
    e2b8:	40020000 	.word	0x40020000
    e2bc:	0000f19c 	.word	0x0000f19c
    e2c0:	0000f1dc 	.word	0x0000f1dc
    e2c4:	f0000f00 	.word	0xf0000f00

0000e2c8 <am_hal_pwrctrl_periph_enable>:
    e2c8:	b570      	push	{r4, r5, r6, lr}
    e2ca:	b082      	sub	sp, #8
    e2cc:	4604      	mov	r4, r0
    e2ce:	f7ff fa03 	bl	d6d8 <am_hal_interrupt_master_disable>
    e2d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e2d6:	4d0f      	ldr	r5, [pc, #60]	; (e314 <am_hal_pwrctrl_periph_enable+0x4c>)
    e2d8:	4e0f      	ldr	r6, [pc, #60]	; (e318 <am_hal_pwrctrl_periph_enable+0x50>)
    e2da:	9001      	str	r0, [sp, #4]
    e2dc:	00a4      	lsls	r4, r4, #2
    e2de:	68aa      	ldr	r2, [r5, #8]
    e2e0:	5933      	ldr	r3, [r6, r4]
    e2e2:	4313      	orrs	r3, r2
    e2e4:	60ab      	str	r3, [r5, #8]
    e2e6:	9801      	ldr	r0, [sp, #4]
    e2e8:	4434      	add	r4, r6
    e2ea:	f7ff f9f9 	bl	d6e0 <am_hal_interrupt_master_set>
    e2ee:	20a0      	movs	r0, #160	; 0xa0
    e2f0:	f7ff f822 	bl	d338 <am_hal_flash_delay>
    e2f4:	69ab      	ldr	r3, [r5, #24]
    e2f6:	6864      	ldr	r4, [r4, #4]
    e2f8:	4223      	tst	r3, r4
    e2fa:	d103      	bne.n	e304 <am_hal_pwrctrl_periph_enable+0x3c>
    e2fc:	20a0      	movs	r0, #160	; 0xa0
    e2fe:	f7ff f81b 	bl	d338 <am_hal_flash_delay>
    e302:	69ab      	ldr	r3, [r5, #24]
    e304:	4b03      	ldr	r3, [pc, #12]	; (e314 <am_hal_pwrctrl_periph_enable+0x4c>)
    e306:	699b      	ldr	r3, [r3, #24]
    e308:	4223      	tst	r3, r4
    e30a:	bf0c      	ite	eq
    e30c:	2001      	moveq	r0, #1
    e30e:	2000      	movne	r0, #0
    e310:	b002      	add	sp, #8
    e312:	bd70      	pop	{r4, r5, r6, pc}
    e314:	40021000 	.word	0x40021000
    e318:	0000f21c 	.word	0x0000f21c

0000e31c <am_hal_pwrctrl_periph_disable>:
    e31c:	b570      	push	{r4, r5, r6, lr}
    e31e:	b082      	sub	sp, #8
    e320:	4604      	mov	r4, r0
    e322:	f7ff f9d9 	bl	d6d8 <am_hal_interrupt_master_disable>
    e326:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    e32a:	4d10      	ldr	r5, [pc, #64]	; (e36c <am_hal_pwrctrl_periph_disable+0x50>)
    e32c:	4e10      	ldr	r6, [pc, #64]	; (e370 <am_hal_pwrctrl_periph_disable+0x54>)
    e32e:	9001      	str	r0, [sp, #4]
    e330:	00a4      	lsls	r4, r4, #2
    e332:	68ab      	ldr	r3, [r5, #8]
    e334:	5932      	ldr	r2, [r6, r4]
    e336:	ea23 0302 	bic.w	r3, r3, r2
    e33a:	60ab      	str	r3, [r5, #8]
    e33c:	9801      	ldr	r0, [sp, #4]
    e33e:	4434      	add	r4, r6
    e340:	f7ff f9ce 	bl	d6e0 <am_hal_interrupt_master_set>
    e344:	20a0      	movs	r0, #160	; 0xa0
    e346:	f7fe fff7 	bl	d338 <am_hal_flash_delay>
    e34a:	69ab      	ldr	r3, [r5, #24]
    e34c:	6864      	ldr	r4, [r4, #4]
    e34e:	4223      	tst	r3, r4
    e350:	d003      	beq.n	e35a <am_hal_pwrctrl_periph_disable+0x3e>
    e352:	20a0      	movs	r0, #160	; 0xa0
    e354:	f7fe fff0 	bl	d338 <am_hal_flash_delay>
    e358:	69ab      	ldr	r3, [r5, #24]
    e35a:	4b04      	ldr	r3, [pc, #16]	; (e36c <am_hal_pwrctrl_periph_disable+0x50>)
    e35c:	699b      	ldr	r3, [r3, #24]
    e35e:	4223      	tst	r3, r4
    e360:	bf14      	ite	ne
    e362:	2001      	movne	r0, #1
    e364:	2000      	moveq	r0, #0
    e366:	b002      	add	sp, #8
    e368:	bd70      	pop	{r4, r5, r6, pc}
    e36a:	bf00      	nop
    e36c:	40021000 	.word	0x40021000
    e370:	0000f21c 	.word	0x0000f21c

0000e374 <am_hal_pwrctrl_low_power_init>:
    e374:	b530      	push	{r4, r5, lr}
    e376:	4b1f      	ldr	r3, [pc, #124]	; (e3f4 <am_hal_pwrctrl_low_power_init+0x80>)
    e378:	681a      	ldr	r2, [r3, #0]
    e37a:	b083      	sub	sp, #12
    e37c:	b912      	cbnz	r2, e384 <am_hal_pwrctrl_low_power_init+0x10>
    e37e:	4a1e      	ldr	r2, [pc, #120]	; (e3f8 <am_hal_pwrctrl_low_power_init+0x84>)
    e380:	6812      	ldr	r2, [r2, #0]
    e382:	601a      	str	r2, [r3, #0]
    e384:	4c1d      	ldr	r4, [pc, #116]	; (e3fc <am_hal_pwrctrl_low_power_init+0x88>)
    e386:	69a3      	ldr	r3, [r4, #24]
    e388:	05db      	lsls	r3, r3, #23
    e38a:	d502      	bpl.n	e392 <am_hal_pwrctrl_low_power_init+0x1e>
    e38c:	2000      	movs	r0, #0
    e38e:	b003      	add	sp, #12
    e390:	bd30      	pop	{r4, r5, pc}
    e392:	4d1b      	ldr	r5, [pc, #108]	; (e400 <am_hal_pwrctrl_low_power_init+0x8c>)
    e394:	491b      	ldr	r1, [pc, #108]	; (e404 <am_hal_pwrctrl_low_power_init+0x90>)
    e396:	7e2a      	ldrb	r2, [r5, #24]
    e398:	2001      	movs	r0, #1
    e39a:	4302      	orrs	r2, r0
    e39c:	2307      	movs	r3, #7
    e39e:	762a      	strb	r2, [r5, #24]
    e3a0:	9000      	str	r0, [sp, #0]
    e3a2:	461a      	mov	r2, r3
    e3a4:	f242 7010 	movw	r0, #10000	; 0x2710
    e3a8:	f7fe ffd6 	bl	d358 <am_hal_flash_delay_status_check>
    e3ac:	b110      	cbz	r0, e3b4 <am_hal_pwrctrl_low_power_init+0x40>
    e3ae:	2004      	movs	r0, #4
    e3b0:	b003      	add	sp, #12
    e3b2:	bd30      	pop	{r4, r5, pc}
    e3b4:	6823      	ldr	r3, [r4, #0]
    e3b6:	f043 0301 	orr.w	r3, r3, #1
    e3ba:	6023      	str	r3, [r4, #0]
    e3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e3c2:	6263      	str	r3, [r4, #36]	; 0x24
    e3c4:	68eb      	ldr	r3, [r5, #12]
    e3c6:	b2db      	uxtb	r3, r3
    e3c8:	2b11      	cmp	r3, #17
    e3ca:	d1df      	bne.n	e38c <am_hal_pwrctrl_low_power_init+0x18>
    e3cc:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e3d0:	f360 5356 	bfi	r3, r0, #21, #2
    e3d4:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e3d8:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e3dc:	220f      	movs	r2, #15
    e3de:	f362 138b 	bfi	r3, r2, #6, #6
    e3e2:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e3e6:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e3ea:	f362 0305 	bfi	r3, r2, #0, #6
    e3ee:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e3f2:	e7cc      	b.n	e38e <am_hal_pwrctrl_low_power_init+0x1a>
    e3f4:	1000112c 	.word	0x1000112c
    e3f8:	4ffff000 	.word	0x4ffff000
    e3fc:	40021000 	.word	0x40021000
    e400:	40020000 	.word	0x40020000
    e404:	40020018 	.word	0x40020018

0000e408 <am_hal_rtc_osc_select>:
    e408:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e40c:	2801      	cmp	r0, #1
    e40e:	68d3      	ldr	r3, [r2, #12]
    e410:	bf0c      	ite	eq
    e412:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    e416:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
    e41a:	60d3      	str	r3, [r2, #12]
    e41c:	4770      	bx	lr
    e41e:	bf00      	nop

0000e420 <am_hal_rtc_osc_disable>:
    e420:	4a03      	ldr	r2, [pc, #12]	; (e430 <am_hal_rtc_osc_disable+0x10>)
    e422:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e426:	f043 0310 	orr.w	r3, r3, #16
    e42a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e42e:	4770      	bx	lr
    e430:	40004200 	.word	0x40004200

0000e434 <am_hal_uart_initialize>:
    e434:	2801      	cmp	r0, #1
    e436:	d901      	bls.n	e43c <am_hal_uart_initialize+0x8>
    e438:	2005      	movs	r0, #5
    e43a:	4770      	bx	lr
    e43c:	b169      	cbz	r1, e45a <am_hal_uart_initialize+0x26>
    e43e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e440:	2264      	movs	r2, #100	; 0x64
    e442:	4e0e      	ldr	r6, [pc, #56]	; (e47c <am_hal_uart_initialize+0x48>)
    e444:	fb02 f200 	mul.w	r2, r2, r0
    e448:	18b4      	adds	r4, r6, r2
    e44a:	4603      	mov	r3, r0
    e44c:	78e0      	ldrb	r0, [r4, #3]
    e44e:	f3c0 0700 	ubfx	r7, r0, #0, #1
    e452:	b2fd      	uxtb	r5, r7
    e454:	b11d      	cbz	r5, e45e <am_hal_uart_initialize+0x2a>
    e456:	2007      	movs	r0, #7
    e458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e45a:	2006      	movs	r0, #6
    e45c:	4770      	bx	lr
    e45e:	f040 0001 	orr.w	r0, r0, #1
    e462:	70e0      	strb	r0, [r4, #3]
    e464:	58b0      	ldr	r0, [r6, r2]
    e466:	f8df e018 	ldr.w	lr, [pc, #24]	; e480 <am_hal_uart_initialize+0x4c>
    e46a:	f36e 0017 	bfi	r0, lr, #0, #24
    e46e:	50b0      	str	r0, [r6, r2]
    e470:	6263      	str	r3, [r4, #36]	; 0x24
    e472:	7127      	strb	r7, [r4, #4]
    e474:	6625      	str	r5, [r4, #96]	; 0x60
    e476:	4628      	mov	r0, r5
    e478:	600c      	str	r4, [r1, #0]
    e47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e47c:	1000474c 	.word	0x1000474c
    e480:	00ea9e06 	.word	0x00ea9e06

0000e484 <am_hal_uart_power_control>:
    e484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e488:	6804      	ldr	r4, [r0, #0]
    e48a:	4b36      	ldr	r3, [pc, #216]	; (e564 <am_hal_uart_power_control+0xe0>)
    e48c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e490:	429c      	cmp	r4, r3
    e492:	b083      	sub	sp, #12
    e494:	d003      	beq.n	e49e <am_hal_uart_power_control+0x1a>
    e496:	2002      	movs	r0, #2
    e498:	b003      	add	sp, #12
    e49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e49e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e4a0:	4605      	mov	r5, r0
    e4a2:	f107 0008 	add.w	r0, r7, #8
    e4a6:	4691      	mov	r9, r2
    e4a8:	460e      	mov	r6, r1
    e4aa:	fa5f f880 	uxtb.w	r8, r0
    e4ae:	b181      	cbz	r1, e4d2 <am_hal_uart_power_control+0x4e>
    e4b0:	2902      	cmp	r1, #2
    e4b2:	d80c      	bhi.n	e4ce <am_hal_uart_power_control+0x4a>
    e4b4:	b992      	cbnz	r2, e4dc <am_hal_uart_power_control+0x58>
    e4b6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e4ba:	371c      	adds	r7, #28
    e4bc:	033f      	lsls	r7, r7, #12
    e4be:	f04f 33ff 	mov.w	r3, #4294967295
    e4c2:	647b      	str	r3, [r7, #68]	; 0x44
    e4c4:	4640      	mov	r0, r8
    e4c6:	f7ff ff29 	bl	e31c <am_hal_pwrctrl_periph_disable>
    e4ca:	2000      	movs	r0, #0
    e4cc:	e7e4      	b.n	e498 <am_hal_uart_power_control+0x14>
    e4ce:	2006      	movs	r0, #6
    e4d0:	e7e2      	b.n	e498 <am_hal_uart_power_control+0x14>
    e4d2:	b322      	cbz	r2, e51e <am_hal_uart_power_control+0x9a>
    e4d4:	792b      	ldrb	r3, [r5, #4]
    e4d6:	bb3b      	cbnz	r3, e528 <am_hal_uart_power_control+0xa4>
    e4d8:	2007      	movs	r0, #7
    e4da:	e7dd      	b.n	e498 <am_hal_uart_power_control+0x14>
    e4dc:	f7ff f8fc 	bl	d6d8 <am_hal_interrupt_master_disable>
    e4e0:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e4e4:	331c      	adds	r3, #28
    e4e6:	031b      	lsls	r3, r3, #12
    e4e8:	9001      	str	r0, [sp, #4]
    e4ea:	6a1a      	ldr	r2, [r3, #32]
    e4ec:	60aa      	str	r2, [r5, #8]
    e4ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e4f0:	60ea      	str	r2, [r5, #12]
    e4f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e4f4:	612a      	str	r2, [r5, #16]
    e4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e4f8:	616a      	str	r2, [r5, #20]
    e4fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e4fc:	61aa      	str	r2, [r5, #24]
    e4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e500:	61ea      	str	r2, [r5, #28]
    e502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e504:	622b      	str	r3, [r5, #32]
    e506:	2301      	movs	r3, #1
    e508:	712b      	strb	r3, [r5, #4]
    e50a:	9801      	ldr	r0, [sp, #4]
    e50c:	f7ff f8e8 	bl	d6e0 <am_hal_interrupt_master_set>
    e510:	682b      	ldr	r3, [r5, #0]
    e512:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e516:	42a3      	cmp	r3, r4
    e518:	d1d4      	bne.n	e4c4 <am_hal_uart_power_control+0x40>
    e51a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e51c:	e7cb      	b.n	e4b6 <am_hal_uart_power_control+0x32>
    e51e:	4640      	mov	r0, r8
    e520:	f7ff fed2 	bl	e2c8 <am_hal_pwrctrl_periph_enable>
    e524:	4648      	mov	r0, r9
    e526:	e7b7      	b.n	e498 <am_hal_uart_power_control+0x14>
    e528:	4640      	mov	r0, r8
    e52a:	f7ff fecd 	bl	e2c8 <am_hal_pwrctrl_periph_enable>
    e52e:	f7ff f8d3 	bl	d6d8 <am_hal_interrupt_master_disable>
    e532:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e536:	331c      	adds	r3, #28
    e538:	031b      	lsls	r3, r3, #12
    e53a:	68aa      	ldr	r2, [r5, #8]
    e53c:	9000      	str	r0, [sp, #0]
    e53e:	621a      	str	r2, [r3, #32]
    e540:	68ea      	ldr	r2, [r5, #12]
    e542:	625a      	str	r2, [r3, #36]	; 0x24
    e544:	692a      	ldr	r2, [r5, #16]
    e546:	629a      	str	r2, [r3, #40]	; 0x28
    e548:	696a      	ldr	r2, [r5, #20]
    e54a:	62da      	str	r2, [r3, #44]	; 0x2c
    e54c:	69aa      	ldr	r2, [r5, #24]
    e54e:	631a      	str	r2, [r3, #48]	; 0x30
    e550:	69ea      	ldr	r2, [r5, #28]
    e552:	635a      	str	r2, [r3, #52]	; 0x34
    e554:	6a2a      	ldr	r2, [r5, #32]
    e556:	639a      	str	r2, [r3, #56]	; 0x38
    e558:	9800      	ldr	r0, [sp, #0]
    e55a:	712e      	strb	r6, [r5, #4]
    e55c:	f7ff f8c0 	bl	d6e0 <am_hal_interrupt_master_set>
    e560:	4630      	mov	r0, r6
    e562:	e799      	b.n	e498 <am_hal_uart_power_control+0x14>
    e564:	01ea9e06 	.word	0x01ea9e06

0000e568 <am_hal_uart_configure>:
    e568:	6803      	ldr	r3, [r0, #0]
    e56a:	4a84      	ldr	r2, [pc, #528]	; (e77c <am_hal_uart_configure+0x214>)
    e56c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e570:	4293      	cmp	r3, r2
    e572:	d001      	beq.n	e578 <am_hal_uart_configure+0x10>
    e574:	2002      	movs	r0, #2
    e576:	4770      	bx	lr
    e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e57c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e57e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e582:	351c      	adds	r5, #28
    e584:	032d      	lsls	r5, r5, #12
    e586:	2700      	movs	r7, #0
    e588:	b084      	sub	sp, #16
    e58a:	632f      	str	r7, [r5, #48]	; 0x30
    e58c:	460e      	mov	r6, r1
    e58e:	4604      	mov	r4, r0
    e590:	f7ff f8a2 	bl	d6d8 <am_hal_interrupt_master_disable>
    e594:	9001      	str	r0, [sp, #4]
    e596:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e598:	f043 0308 	orr.w	r3, r3, #8
    e59c:	862b      	strh	r3, [r5, #48]	; 0x30
    e59e:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e5a0:	2201      	movs	r2, #1
    e5a2:	f362 1306 	bfi	r3, r2, #4, #3
    e5a6:	862b      	strh	r3, [r5, #48]	; 0x30
    e5a8:	9801      	ldr	r0, [sp, #4]
    e5aa:	f7ff f899 	bl	d6e0 <am_hal_interrupt_master_set>
    e5ae:	f7ff f893 	bl	d6d8 <am_hal_interrupt_master_disable>
    e5b2:	9002      	str	r0, [sp, #8]
    e5b4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e5b6:	f367 0300 	bfi	r3, r7, #0, #1
    e5ba:	862b      	strh	r3, [r5, #48]	; 0x30
    e5bc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e5be:	f367 2349 	bfi	r3, r7, #9, #1
    e5c2:	862b      	strh	r3, [r5, #48]	; 0x30
    e5c4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e5c6:	f367 2308 	bfi	r3, r7, #8, #1
    e5ca:	862b      	strh	r3, [r5, #48]	; 0x30
    e5cc:	9802      	ldr	r0, [sp, #8]
    e5ce:	f7ff f887 	bl	d6e0 <am_hal_interrupt_master_set>
    e5d2:	4a6b      	ldr	r2, [pc, #428]	; (e780 <am_hal_uart_configure+0x218>)
    e5d4:	6833      	ldr	r3, [r6, #0]
    e5d6:	68d2      	ldr	r2, [r2, #12]
    e5d8:	b2d2      	uxtb	r2, r2
    e5da:	2a12      	cmp	r2, #18
    e5dc:	d00b      	beq.n	e5f6 <am_hal_uart_configure+0x8e>
    e5de:	4a68      	ldr	r2, [pc, #416]	; (e780 <am_hal_uart_configure+0x218>)
    e5e0:	68d2      	ldr	r2, [r2, #12]
    e5e2:	b2d2      	uxtb	r2, r2
    e5e4:	2a20      	cmp	r2, #32
    e5e6:	d90a      	bls.n	e5fe <am_hal_uart_configure+0x96>
    e5e8:	4a66      	ldr	r2, [pc, #408]	; (e784 <am_hal_uart_configure+0x21c>)
    e5ea:	4293      	cmp	r3, r2
    e5ec:	d907      	bls.n	e5fe <am_hal_uart_configure+0x96>
    e5ee:	4866      	ldr	r0, [pc, #408]	; (e788 <am_hal_uart_configure+0x220>)
    e5f0:	b004      	add	sp, #16
    e5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5f6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    e5fa:	d8f8      	bhi.n	e5ee <am_hal_uart_configure+0x86>
    e5fc:	e7ef      	b.n	e5de <am_hal_uart_configure+0x76>
    e5fe:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e600:	f3c2 1202 	ubfx	r2, r2, #4, #3
    e604:	3a01      	subs	r2, #1
    e606:	2a03      	cmp	r2, #3
    e608:	d852      	bhi.n	e6b0 <am_hal_uart_configure+0x148>
    e60a:	e8df f002 	tbb	[pc, r2]
    e60e:	020f      	.short	0x020f
    e610:	1215      	.short	0x1215
    e612:	4a5e      	ldr	r2, [pc, #376]	; (e78c <am_hal_uart_configure+0x224>)
    e614:	495e      	ldr	r1, [pc, #376]	; (e790 <am_hal_uart_configure+0x228>)
    e616:	011b      	lsls	r3, r3, #4
    e618:	fbb2 f2f3 	udiv	r2, r2, r3
    e61c:	fbb1 f3f3 	udiv	r3, r1, r3
    e620:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    e624:	b95b      	cbnz	r3, e63e <am_hal_uart_configure+0xd6>
    e626:	6623      	str	r3, [r4, #96]	; 0x60
    e628:	4857      	ldr	r0, [pc, #348]	; (e788 <am_hal_uart_configure+0x220>)
    e62a:	e7e1      	b.n	e5f0 <am_hal_uart_configure+0x88>
    e62c:	4a59      	ldr	r2, [pc, #356]	; (e794 <am_hal_uart_configure+0x22c>)
    e62e:	495a      	ldr	r1, [pc, #360]	; (e798 <am_hal_uart_configure+0x230>)
    e630:	e7f1      	b.n	e616 <am_hal_uart_configure+0xae>
    e632:	4a5a      	ldr	r2, [pc, #360]	; (e79c <am_hal_uart_configure+0x234>)
    e634:	495a      	ldr	r1, [pc, #360]	; (e7a0 <am_hal_uart_configure+0x238>)
    e636:	e7ee      	b.n	e616 <am_hal_uart_configure+0xae>
    e638:	4a5a      	ldr	r2, [pc, #360]	; (e7a4 <am_hal_uart_configure+0x23c>)
    e63a:	495b      	ldr	r1, [pc, #364]	; (e7a8 <am_hal_uart_configure+0x240>)
    e63c:	e7eb      	b.n	e616 <am_hal_uart_configure+0xae>
    e63e:	0890      	lsrs	r0, r2, #2
    e640:	626b      	str	r3, [r5, #36]	; 0x24
    e642:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    e646:	626b      	str	r3, [r5, #36]	; 0x24
    e648:	fbb1 f1f0 	udiv	r1, r1, r0
    e64c:	62aa      	str	r2, [r5, #40]	; 0x28
    e64e:	6621      	str	r1, [r4, #96]	; 0x60
    e650:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e652:	f36f 338e 	bfc	r3, #14, #1
    e656:	862b      	strh	r3, [r5, #48]	; 0x30
    e658:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e65a:	f36f 33cf 	bfc	r3, #15, #1
    e65e:	862b      	strh	r3, [r5, #48]	; 0x30
    e660:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    e662:	6933      	ldr	r3, [r6, #16]
    e664:	4313      	orrs	r3, r2
    e666:	632b      	str	r3, [r5, #48]	; 0x30
    e668:	6973      	ldr	r3, [r6, #20]
    e66a:	636b      	str	r3, [r5, #52]	; 0x34
    e66c:	6871      	ldr	r1, [r6, #4]
    e66e:	68b3      	ldr	r3, [r6, #8]
    e670:	68f2      	ldr	r2, [r6, #12]
    e672:	430b      	orrs	r3, r1
    e674:	f043 0310 	orr.w	r3, r3, #16
    e678:	4313      	orrs	r3, r2
    e67a:	62eb      	str	r3, [r5, #44]	; 0x2c
    e67c:	f7ff f82c 	bl	d6d8 <am_hal_interrupt_master_disable>
    e680:	9003      	str	r0, [sp, #12]
    e682:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e684:	f043 0301 	orr.w	r3, r3, #1
    e688:	862b      	strh	r3, [r5, #48]	; 0x30
    e68a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e68c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e690:	862b      	strh	r3, [r5, #48]	; 0x30
    e692:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    e694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e698:	862b      	strh	r3, [r5, #48]	; 0x30
    e69a:	9803      	ldr	r0, [sp, #12]
    e69c:	f7ff f820 	bl	d6e0 <am_hal_interrupt_master_set>
    e6a0:	6825      	ldr	r5, [r4, #0]
    e6a2:	4b36      	ldr	r3, [pc, #216]	; (e77c <am_hal_uart_configure+0x214>)
    e6a4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    e6a8:	429d      	cmp	r5, r3
    e6aa:	d005      	beq.n	e6b8 <am_hal_uart_configure+0x150>
    e6ac:	2000      	movs	r0, #0
    e6ae:	e79f      	b.n	e5f0 <am_hal_uart_configure+0x88>
    e6b0:	2300      	movs	r3, #0
    e6b2:	6623      	str	r3, [r4, #96]	; 0x60
    e6b4:	483d      	ldr	r0, [pc, #244]	; (e7ac <am_hal_uart_configure+0x244>)
    e6b6:	e79b      	b.n	e5f0 <am_hal_uart_configure+0x88>
    e6b8:	69b1      	ldr	r1, [r6, #24]
    e6ba:	6a37      	ldr	r7, [r6, #32]
    e6bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    e6c0:	b109      	cbz	r1, e6c6 <am_hal_uart_configure+0x15e>
    e6c2:	69f3      	ldr	r3, [r6, #28]
    e6c4:	bb3b      	cbnz	r3, e716 <am_hal_uart_configure+0x1ae>
    e6c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6c8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e6cc:	f103 021c 	add.w	r2, r3, #28
    e6d0:	0312      	lsls	r2, r2, #12
    e6d2:	2100      	movs	r1, #0
    e6d4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    e6d8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    e6da:	f021 0120 	bic.w	r1, r1, #32
    e6de:	6391      	str	r1, [r2, #56]	; 0x38
    e6e0:	b1b7      	cbz	r7, e710 <am_hal_uart_configure+0x1a8>
    e6e2:	f1b8 0f00 	cmp.w	r8, #0
    e6e6:	d12e      	bne.n	e746 <am_hal_uart_configure+0x1de>
    e6e8:	6823      	ldr	r3, [r4, #0]
    e6ea:	4a24      	ldr	r2, [pc, #144]	; (e77c <am_hal_uart_configure+0x214>)
    e6ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e6f0:	2100      	movs	r1, #0
    e6f2:	4293      	cmp	r3, r2
    e6f4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    e6f8:	d1d8      	bne.n	e6ac <am_hal_uart_configure+0x144>
    e6fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e6fc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e700:	331c      	adds	r3, #28
    e702:	031b      	lsls	r3, r3, #12
    e704:	2000      	movs	r0, #0
    e706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e708:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    e70c:	639a      	str	r2, [r3, #56]	; 0x38
    e70e:	e76f      	b.n	e5f0 <am_hal_uart_configure+0x88>
    e710:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    e714:	e7f4      	b.n	e700 <am_hal_uart_configure+0x198>
    e716:	2201      	movs	r2, #1
    e718:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    e71c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e720:	f000 fb04 	bl	ed2c <am_hal_queue_init>
    e724:	6823      	ldr	r3, [r4, #0]
    e726:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e72a:	42ab      	cmp	r3, r5
    e72c:	d1be      	bne.n	e6ac <am_hal_uart_configure+0x144>
    e72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e730:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e734:	331c      	adds	r3, #28
    e736:	031b      	lsls	r3, r3, #12
    e738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e73a:	f042 0220 	orr.w	r2, r2, #32
    e73e:	639a      	str	r2, [r3, #56]	; 0x38
    e740:	2f00      	cmp	r7, #0
    e742:	d1ce      	bne.n	e6e2 <am_hal_uart_configure+0x17a>
    e744:	e7d0      	b.n	e6e8 <am_hal_uart_configure+0x180>
    e746:	2201      	movs	r2, #1
    e748:	4643      	mov	r3, r8
    e74a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    e74e:	4639      	mov	r1, r7
    e750:	f104 0048 	add.w	r0, r4, #72	; 0x48
    e754:	f000 faea 	bl	ed2c <am_hal_queue_init>
    e758:	6823      	ldr	r3, [r4, #0]
    e75a:	4a08      	ldr	r2, [pc, #32]	; (e77c <am_hal_uart_configure+0x214>)
    e75c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e760:	4293      	cmp	r3, r2
    e762:	d1a3      	bne.n	e6ac <am_hal_uart_configure+0x144>
    e764:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e766:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e76a:	331c      	adds	r3, #28
    e76c:	031b      	lsls	r3, r3, #12
    e76e:	2000      	movs	r0, #0
    e770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    e772:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    e776:	639a      	str	r2, [r3, #56]	; 0x38
    e778:	e73a      	b.n	e5f0 <am_hal_uart_configure+0x88>
    e77a:	bf00      	nop
    e77c:	01ea9e06 	.word	0x01ea9e06
    e780:	40020000 	.word	0x40020000
    e784:	0016e360 	.word	0x0016e360
    e788:	08000003 	.word	0x08000003
    e78c:	2dc6c000 	.word	0x2dc6c000
    e790:	00b71b00 	.word	0x00b71b00
    e794:	5b8d8000 	.word	0x5b8d8000
    e798:	016e3600 	.word	0x016e3600
    e79c:	0b71b000 	.word	0x0b71b000
    e7a0:	002dc6c0 	.word	0x002dc6c0
    e7a4:	16e36000 	.word	0x16e36000
    e7a8:	005b8d80 	.word	0x005b8d80
    e7ac:	08000002 	.word	0x08000002

0000e7b0 <am_hal_uart_transfer>:
    e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7b4:	680f      	ldr	r7, [r1, #0]
    e7b6:	b091      	sub	sp, #68	; 0x44
    e7b8:	4605      	mov	r5, r0
    e7ba:	b13f      	cbz	r7, e7cc <am_hal_uart_transfer+0x1c>
    e7bc:	2f01      	cmp	r7, #1
    e7be:	bf18      	it	ne
    e7c0:	2707      	movne	r7, #7
    e7c2:	d024      	beq.n	e80e <am_hal_uart_transfer+0x5e>
    e7c4:	4638      	mov	r0, r7
    e7c6:	b011      	add	sp, #68	; 0x44
    e7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7cc:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e7d0:	690b      	ldr	r3, [r1, #16]
    e7d2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    e7d6:	688e      	ldr	r6, [r1, #8]
    e7d8:	9300      	str	r3, [sp, #0]
    e7da:	f1b9 0f00 	cmp.w	r9, #0
    e7de:	d031      	beq.n	e844 <am_hal_uart_transfer+0x94>
    e7e0:	2e00      	cmp	r6, #0
    e7e2:	f000 819c 	beq.w	eb1e <am_hal_uart_transfer+0x36e>
    e7e6:	2800      	cmp	r0, #0
    e7e8:	f000 8097 	beq.w	e91a <am_hal_uart_transfer+0x16a>
    e7ec:	6803      	ldr	r3, [r0, #0]
    e7ee:	4aa9      	ldr	r2, [pc, #676]	; (ea94 <am_hal_uart_transfer+0x2e4>)
    e7f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e7f4:	4293      	cmp	r3, r2
    e7f6:	f000 8092 	beq.w	e91e <am_hal_uart_transfer+0x16e>
    e7fa:	46b8      	mov	r8, r7
    e7fc:	9b00      	ldr	r3, [sp, #0]
    e7fe:	b10b      	cbz	r3, e804 <am_hal_uart_transfer+0x54>
    e800:	f8c3 8000 	str.w	r8, [r3]
    e804:	2702      	movs	r7, #2
    e806:	4638      	mov	r0, r7
    e808:	b011      	add	sp, #68	; 0x44
    e80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e80e:	1d0b      	adds	r3, r1, #4
    e810:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    e814:	f1b9 0f00 	cmp.w	r9, #0
    e818:	d043      	beq.n	e8a2 <am_hal_uart_transfer+0xf2>
    e81a:	2f00      	cmp	r7, #0
    e81c:	f000 8185 	beq.w	eb2a <am_hal_uart_transfer+0x37a>
    e820:	2800      	cmp	r0, #0
    e822:	f000 80eb 	beq.w	e9fc <am_hal_uart_transfer+0x24c>
    e826:	6802      	ldr	r2, [r0, #0]
    e828:	499a      	ldr	r1, [pc, #616]	; (ea94 <am_hal_uart_transfer+0x2e4>)
    e82a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e82e:	428a      	cmp	r2, r1
    e830:	f000 80e7 	beq.w	ea02 <am_hal_uart_transfer+0x252>
    e834:	2600      	movs	r6, #0
    e836:	2702      	movs	r7, #2
    e838:	f1bb 0f00 	cmp.w	fp, #0
    e83c:	d0c2      	beq.n	e7c4 <am_hal_uart_transfer+0x14>
    e83e:	f8cb 6000 	str.w	r6, [fp]
    e842:	e7bf      	b.n	e7c4 <am_hal_uart_transfer+0x14>
    e844:	2800      	cmp	r0, #0
    e846:	d0dd      	beq.n	e804 <am_hal_uart_transfer+0x54>
    e848:	6803      	ldr	r3, [r0, #0]
    e84a:	4a92      	ldr	r2, [pc, #584]	; (ea94 <am_hal_uart_transfer+0x2e4>)
    e84c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e850:	4293      	cmp	r3, r2
    e852:	d1d7      	bne.n	e804 <am_hal_uart_transfer+0x54>
    e854:	9b00      	ldr	r3, [sp, #0]
    e856:	b10b      	cbz	r3, e85c <am_hal_uart_transfer+0xac>
    e858:	f8c3 9000 	str.w	r9, [r3]
    e85c:	b1fe      	cbz	r6, e89e <am_hal_uart_transfer+0xee>
    e85e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e862:	2b00      	cmp	r3, #0
    e864:	f040 8165 	bne.w	eb32 <am_hal_uart_transfer+0x382>
    e868:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e86a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    e86e:	311c      	adds	r1, #28
    e870:	0309      	lsls	r1, r1, #12
    e872:	698a      	ldr	r2, [r1, #24]
    e874:	f3c2 1240 	ubfx	r2, r2, #5, #1
    e878:	2a00      	cmp	r2, #0
    e87a:	f040 818d 	bne.w	eb98 <am_hal_uart_transfer+0x3e8>
    e87e:	f10a 33ff 	add.w	r3, sl, #4294967295
    e882:	e003      	b.n	e88c <am_hal_uart_transfer+0xdc>
    e884:	6988      	ldr	r0, [r1, #24]
    e886:	0680      	lsls	r0, r0, #26
    e888:	f100 8151 	bmi.w	eb2e <am_hal_uart_transfer+0x37e>
    e88c:	3201      	adds	r2, #1
    e88e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    e892:	6008      	str	r0, [r1, #0]
    e894:	4296      	cmp	r6, r2
    e896:	d1f5      	bne.n	e884 <am_hal_uart_transfer+0xd4>
    e898:	9b00      	ldr	r3, [sp, #0]
    e89a:	b103      	cbz	r3, e89e <am_hal_uart_transfer+0xee>
    e89c:	601e      	str	r6, [r3, #0]
    e89e:	2700      	movs	r7, #0
    e8a0:	e790      	b.n	e7c4 <am_hal_uart_transfer+0x14>
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d0ae      	beq.n	e804 <am_hal_uart_transfer+0x54>
    e8a6:	6802      	ldr	r2, [r0, #0]
    e8a8:	497a      	ldr	r1, [pc, #488]	; (ea94 <am_hal_uart_transfer+0x2e4>)
    e8aa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e8ae:	428a      	cmp	r2, r1
    e8b0:	d1a8      	bne.n	e804 <am_hal_uart_transfer+0x54>
    e8b2:	f1bb 0f00 	cmp.w	fp, #0
    e8b6:	d001      	beq.n	e8bc <am_hal_uart_transfer+0x10c>
    e8b8:	f8cb 9000 	str.w	r9, [fp]
    e8bc:	2f00      	cmp	r7, #0
    e8be:	d0ee      	beq.n	e89e <am_hal_uart_transfer+0xee>
    e8c0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    e8c4:	2c00      	cmp	r4, #0
    e8c6:	f040 816c 	bne.w	eba2 <am_hal_uart_transfer+0x3f2>
    e8ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e8cc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e8d0:	321c      	adds	r2, #28
    e8d2:	0312      	lsls	r2, r2, #12
    e8d4:	6990      	ldr	r0, [r2, #24]
    e8d6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e8da:	2800      	cmp	r0, #0
    e8dc:	f040 819d 	bne.w	ec1a <am_hal_uart_transfer+0x46a>
    e8e0:	6811      	ldr	r1, [r2, #0]
    e8e2:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    e8e6:	bf08      	it	eq
    e8e8:	f103 33ff 	addeq.w	r3, r3, #4294967295
    e8ec:	d008      	beq.n	e900 <am_hal_uart_transfer+0x150>
    e8ee:	e190      	b.n	ec12 <am_hal_uart_transfer+0x462>
    e8f0:	6991      	ldr	r1, [r2, #24]
    e8f2:	06c8      	lsls	r0, r1, #27
    e8f4:	d409      	bmi.n	e90a <am_hal_uart_transfer+0x15a>
    e8f6:	6811      	ldr	r1, [r2, #0]
    e8f8:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    e8fc:	f040 814e 	bne.w	eb9c <am_hal_uart_transfer+0x3ec>
    e900:	3401      	adds	r4, #1
    e902:	42a7      	cmp	r7, r4
    e904:	f803 1f01 	strb.w	r1, [r3, #1]!
    e908:	d1f2      	bne.n	e8f0 <am_hal_uart_transfer+0x140>
    e90a:	2700      	movs	r7, #0
    e90c:	f1bb 0f00 	cmp.w	fp, #0
    e910:	f43f af58 	beq.w	e7c4 <am_hal_uart_transfer+0x14>
    e914:	f8cb 4000 	str.w	r4, [fp]
    e918:	e754      	b.n	e7c4 <am_hal_uart_transfer+0x14>
    e91a:	4680      	mov	r8, r0
    e91c:	e76e      	b.n	e7fc <am_hal_uart_transfer+0x4c>
    e91e:	9301      	str	r3, [sp, #4]
    e920:	4651      	mov	r1, sl
    e922:	46bb      	mov	fp, r7
    e924:	46b8      	mov	r8, r7
    e926:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    e92a:	b9f2      	cbnz	r2, e96a <am_hal_uart_transfer+0x1ba>
    e92c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e92e:	b19e      	cbz	r6, e958 <am_hal_uart_transfer+0x1a8>
    e930:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    e934:	321c      	adds	r2, #28
    e936:	0312      	lsls	r2, r2, #12
    e938:	3901      	subs	r1, #1
    e93a:	6994      	ldr	r4, [r2, #24]
    e93c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    e940:	b11c      	cbz	r4, e94a <am_hal_uart_transfer+0x19a>
    e942:	e047      	b.n	e9d4 <am_hal_uart_transfer+0x224>
    e944:	6993      	ldr	r3, [r2, #24]
    e946:	069b      	lsls	r3, r3, #26
    e948:	d441      	bmi.n	e9ce <am_hal_uart_transfer+0x21e>
    e94a:	3401      	adds	r4, #1
    e94c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    e950:	6013      	str	r3, [r2, #0]
    e952:	42b4      	cmp	r4, r6
    e954:	d1f6      	bne.n	e944 <am_hal_uart_transfer+0x194>
    e956:	44a0      	add	r8, r4
    e958:	9b00      	ldr	r3, [sp, #0]
    e95a:	2b00      	cmp	r3, #0
    e95c:	d09f      	beq.n	e89e <am_hal_uart_transfer+0xee>
    e95e:	4638      	mov	r0, r7
    e960:	f8c3 8000 	str.w	r8, [r3]
    e964:	b011      	add	sp, #68	; 0x44
    e966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e96a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    e96c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    e96e:	1b14      	subs	r4, r2, r4
    e970:	42b4      	cmp	r4, r6
    e972:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    e976:	bf28      	it	cs
    e978:	4634      	movcs	r4, r6
    e97a:	4622      	mov	r2, r4
    e97c:	4618      	mov	r0, r3
    e97e:	9302      	str	r3, [sp, #8]
    e980:	f000 f9e0 	bl	ed44 <am_hal_queue_item_add>
    e984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e986:	9303      	str	r3, [sp, #12]
    e988:	f7fe fea6 	bl	d6d8 <am_hal_interrupt_master_disable>
    e98c:	9b03      	ldr	r3, [sp, #12]
    e98e:	9008      	str	r0, [sp, #32]
    e990:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e994:	331c      	adds	r3, #28
    e996:	031b      	lsls	r3, r3, #12
    e998:	9303      	str	r3, [sp, #12]
    e99a:	e00d      	b.n	e9b8 <am_hal_uart_transfer+0x208>
    e99c:	f000 fa0a 	bl	edb4 <am_hal_queue_item_get>
    e9a0:	b190      	cbz	r0, e9c8 <am_hal_uart_transfer+0x218>
    e9a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e9a4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    e9a8:	331c      	adds	r3, #28
    e9aa:	031b      	lsls	r3, r3, #12
    e9ac:	699a      	ldr	r2, [r3, #24]
    e9ae:	0692      	lsls	r2, r2, #26
    e9b0:	bf5c      	itt	pl
    e9b2:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    e9b6:	601a      	strpl	r2, [r3, #0]
    e9b8:	9b03      	ldr	r3, [sp, #12]
    e9ba:	9802      	ldr	r0, [sp, #8]
    e9bc:	699b      	ldr	r3, [r3, #24]
    e9be:	069b      	lsls	r3, r3, #26
    e9c0:	f04f 0201 	mov.w	r2, #1
    e9c4:	a907      	add	r1, sp, #28
    e9c6:	d5e9      	bpl.n	e99c <am_hal_uart_transfer+0x1ec>
    e9c8:	9808      	ldr	r0, [sp, #32]
    e9ca:	f7fe fe89 	bl	d6e0 <am_hal_interrupt_master_set>
    e9ce:	1b36      	subs	r6, r6, r4
    e9d0:	44a0      	add	r8, r4
    e9d2:	d0c1      	beq.n	e958 <am_hal_uart_transfer+0x1a8>
    e9d4:	2010      	movs	r0, #16
    e9d6:	f7fe fcaf 	bl	d338 <am_hal_flash_delay>
    e9da:	f1b9 3fff 	cmp.w	r9, #4294967295
    e9de:	d001      	beq.n	e9e4 <am_hal_uart_transfer+0x234>
    e9e0:	f10b 0b01 	add.w	fp, fp, #1
    e9e4:	45d9      	cmp	r9, fp
    e9e6:	d9b7      	bls.n	e958 <am_hal_uart_transfer+0x1a8>
    e9e8:	682a      	ldr	r2, [r5, #0]
    e9ea:	9b01      	ldr	r3, [sp, #4]
    e9ec:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    e9f0:	429a      	cmp	r2, r3
    e9f2:	eb0a 0108 	add.w	r1, sl, r8
    e9f6:	f47f af01 	bne.w	e7fc <am_hal_uart_transfer+0x4c>
    e9fa:	e794      	b.n	e926 <am_hal_uart_transfer+0x176>
    e9fc:	4606      	mov	r6, r0
    e9fe:	2702      	movs	r7, #2
    ea00:	e71a      	b.n	e838 <am_hal_uart_transfer+0x88>
    ea02:	9200      	str	r2, [sp, #0]
    ea04:	f100 0248 	add.w	r2, r0, #72	; 0x48
    ea08:	f04f 0a00 	mov.w	sl, #0
    ea0c:	9202      	str	r2, [sp, #8]
    ea0e:	465a      	mov	r2, fp
    ea10:	4698      	mov	r8, r3
    ea12:	469b      	mov	fp, r3
    ea14:	4656      	mov	r6, sl
    ea16:	4613      	mov	r3, r2
    ea18:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    ea1c:	2a00      	cmp	r2, #0
    ea1e:	d152      	bne.n	eac6 <am_hal_uart_transfer+0x316>
    ea20:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ea22:	b3a7      	cbz	r7, ea8e <am_hal_uart_transfer+0x2de>
    ea24:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    ea28:	311c      	adds	r1, #28
    ea2a:	0309      	lsls	r1, r1, #12
    ea2c:	698a      	ldr	r2, [r1, #24]
    ea2e:	06d0      	lsls	r0, r2, #27
    ea30:	d432      	bmi.n	ea98 <am_hal_uart_transfer+0x2e8>
    ea32:	680a      	ldr	r2, [r1, #0]
    ea34:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    ea38:	f040 80aa 	bne.w	eb90 <am_hal_uart_transfer+0x3e0>
    ea3c:	f108 38ff 	add.w	r8, r8, #4294967295
    ea40:	e006      	b.n	ea50 <am_hal_uart_transfer+0x2a0>
    ea42:	698a      	ldr	r2, [r1, #24]
    ea44:	06d2      	lsls	r2, r2, #27
    ea46:	d41f      	bmi.n	ea88 <am_hal_uart_transfer+0x2d8>
    ea48:	680a      	ldr	r2, [r1, #0]
    ea4a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    ea4e:	d161      	bne.n	eb14 <am_hal_uart_transfer+0x364>
    ea50:	3401      	adds	r4, #1
    ea52:	42bc      	cmp	r4, r7
    ea54:	f808 2f01 	strb.w	r2, [r8, #1]!
    ea58:	d1f3      	bne.n	ea42 <am_hal_uart_transfer+0x292>
    ea5a:	469b      	mov	fp, r3
    ea5c:	4426      	add	r6, r4
    ea5e:	f1bb 0f00 	cmp.w	fp, #0
    ea62:	f43f af1c 	beq.w	e89e <am_hal_uart_transfer+0xee>
    ea66:	f8cb 6000 	str.w	r6, [fp]
    ea6a:	2700      	movs	r7, #0
    ea6c:	e6aa      	b.n	e7c4 <am_hal_uart_transfer+0x14>
    ea6e:	9807      	ldr	r0, [sp, #28]
    ea70:	f7fe fe36 	bl	d6e0 <am_hal_interrupt_master_set>
    ea74:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ea76:	9802      	ldr	r0, [sp, #8]
    ea78:	42bc      	cmp	r4, r7
    ea7a:	bf28      	it	cs
    ea7c:	463c      	movcs	r4, r7
    ea7e:	4641      	mov	r1, r8
    ea80:	4622      	mov	r2, r4
    ea82:	f000 f997 	bl	edb4 <am_hal_queue_item_get>
    ea86:	9b01      	ldr	r3, [sp, #4]
    ea88:	1b3f      	subs	r7, r7, r4
    ea8a:	4426      	add	r6, r4
    ea8c:	d104      	bne.n	ea98 <am_hal_uart_transfer+0x2e8>
    ea8e:	469b      	mov	fp, r3
    ea90:	e7e5      	b.n	ea5e <am_hal_uart_transfer+0x2ae>
    ea92:	bf00      	nop
    ea94:	01ea9e06 	.word	0x01ea9e06
    ea98:	2010      	movs	r0, #16
    ea9a:	9301      	str	r3, [sp, #4]
    ea9c:	f7fe fc4c 	bl	d338 <am_hal_flash_delay>
    eaa0:	f1b9 3fff 	cmp.w	r9, #4294967295
    eaa4:	9b01      	ldr	r3, [sp, #4]
    eaa6:	d001      	beq.n	eaac <am_hal_uart_transfer+0x2fc>
    eaa8:	f10a 0a01 	add.w	sl, sl, #1
    eaac:	45d1      	cmp	r9, sl
    eaae:	d9ee      	bls.n	ea8e <am_hal_uart_transfer+0x2de>
    eab0:	682a      	ldr	r2, [r5, #0]
    eab2:	9900      	ldr	r1, [sp, #0]
    eab4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    eab8:	428a      	cmp	r2, r1
    eaba:	eb0b 0806 	add.w	r8, fp, r6
    eabe:	d0ab      	beq.n	ea18 <am_hal_uart_transfer+0x268>
    eac0:	469b      	mov	fp, r3
    eac2:	2702      	movs	r7, #2
    eac4:	e6b8      	b.n	e838 <am_hal_uart_transfer+0x88>
    eac6:	9301      	str	r3, [sp, #4]
    eac8:	f7fe fe06 	bl	d6d8 <am_hal_interrupt_master_disable>
    eacc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eace:	9007      	str	r0, [sp, #28]
    ead0:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    ead4:	301c      	adds	r0, #28
    ead6:	9b01      	ldr	r3, [sp, #4]
    ead8:	0300      	lsls	r0, r0, #12
    eada:	ac08      	add	r4, sp, #32
    eadc:	2200      	movs	r2, #0
    eade:	6981      	ldr	r1, [r0, #24]
    eae0:	06c9      	lsls	r1, r1, #27
    eae2:	d409      	bmi.n	eaf8 <am_hal_uart_transfer+0x348>
    eae4:	6801      	ldr	r1, [r0, #0]
    eae6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    eaea:	f102 0201 	add.w	r2, r2, #1
    eaee:	d118      	bne.n	eb22 <am_hal_uart_transfer+0x372>
    eaf0:	2a20      	cmp	r2, #32
    eaf2:	f804 1b01 	strb.w	r1, [r4], #1
    eaf6:	d1f2      	bne.n	eade <am_hal_uart_transfer+0x32e>
    eaf8:	a908      	add	r1, sp, #32
    eafa:	9802      	ldr	r0, [sp, #8]
    eafc:	9301      	str	r3, [sp, #4]
    eafe:	f000 f921 	bl	ed44 <am_hal_queue_item_add>
    eb02:	9b01      	ldr	r3, [sp, #4]
    eb04:	2800      	cmp	r0, #0
    eb06:	d1b2      	bne.n	ea6e <am_hal_uart_transfer+0x2be>
    eb08:	4f45      	ldr	r7, [pc, #276]	; (ec20 <am_hal_uart_transfer+0x470>)
    eb0a:	469b      	mov	fp, r3
    eb0c:	9807      	ldr	r0, [sp, #28]
    eb0e:	f7fe fde7 	bl	d6e0 <am_hal_interrupt_master_set>
    eb12:	e691      	b.n	e838 <am_hal_uart_transfer+0x88>
    eb14:	469b      	mov	fp, r3
    eb16:	4426      	add	r6, r4
    eb18:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb1c:	e68c      	b.n	e838 <am_hal_uart_transfer+0x88>
    eb1e:	46b8      	mov	r8, r7
    eb20:	e71a      	b.n	e958 <am_hal_uart_transfer+0x1a8>
    eb22:	469b      	mov	fp, r3
    eb24:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb28:	e7f0      	b.n	eb0c <am_hal_uart_transfer+0x35c>
    eb2a:	463e      	mov	r6, r7
    eb2c:	e797      	b.n	ea5e <am_hal_uart_transfer+0x2ae>
    eb2e:	4616      	mov	r6, r2
    eb30:	e6b2      	b.n	e898 <am_hal_uart_transfer+0xe8>
    eb32:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    eb34:	6bab      	ldr	r3, [r5, #56]	; 0x38
    eb36:	1a9b      	subs	r3, r3, r2
    eb38:	429e      	cmp	r6, r3
    eb3a:	bf28      	it	cs
    eb3c:	461e      	movcs	r6, r3
    eb3e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    eb42:	4651      	mov	r1, sl
    eb44:	4632      	mov	r2, r6
    eb46:	4620      	mov	r0, r4
    eb48:	f000 f8fc 	bl	ed44 <am_hal_queue_item_add>
    eb4c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    eb4e:	f7fe fdc3 	bl	d6d8 <am_hal_interrupt_master_disable>
    eb52:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    eb56:	371c      	adds	r7, #28
    eb58:	033f      	lsls	r7, r7, #12
    eb5a:	9005      	str	r0, [sp, #20]
    eb5c:	e00d      	b.n	eb7a <am_hal_uart_transfer+0x3ca>
    eb5e:	f000 f929 	bl	edb4 <am_hal_queue_item_get>
    eb62:	b188      	cbz	r0, eb88 <am_hal_uart_transfer+0x3d8>
    eb64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eb66:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    eb6a:	331c      	adds	r3, #28
    eb6c:	031b      	lsls	r3, r3, #12
    eb6e:	699a      	ldr	r2, [r3, #24]
    eb70:	0692      	lsls	r2, r2, #26
    eb72:	bf5c      	itt	pl
    eb74:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    eb78:	601a      	strpl	r2, [r3, #0]
    eb7a:	69bb      	ldr	r3, [r7, #24]
    eb7c:	069b      	lsls	r3, r3, #26
    eb7e:	f04f 0201 	mov.w	r2, #1
    eb82:	a908      	add	r1, sp, #32
    eb84:	4620      	mov	r0, r4
    eb86:	d5ea      	bpl.n	eb5e <am_hal_uart_transfer+0x3ae>
    eb88:	9805      	ldr	r0, [sp, #20]
    eb8a:	f7fe fda9 	bl	d6e0 <am_hal_interrupt_master_set>
    eb8e:	e683      	b.n	e898 <am_hal_uart_transfer+0xe8>
    eb90:	469b      	mov	fp, r3
    eb92:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eb96:	e64f      	b.n	e838 <am_hal_uart_transfer+0x88>
    eb98:	461e      	mov	r6, r3
    eb9a:	e67d      	b.n	e898 <am_hal_uart_transfer+0xe8>
    eb9c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    eba0:	e6b4      	b.n	e90c <am_hal_uart_transfer+0x15c>
    eba2:	9300      	str	r3, [sp, #0]
    eba4:	f7fe fd98 	bl	d6d8 <am_hal_interrupt_master_disable>
    eba8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ebaa:	9006      	str	r0, [sp, #24]
    ebac:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ebb0:	321c      	adds	r2, #28
    ebb2:	0311      	lsls	r1, r2, #12
    ebb4:	a808      	add	r0, sp, #32
    ebb6:	2200      	movs	r2, #0
    ebb8:	9b00      	ldr	r3, [sp, #0]
    ebba:	e009      	b.n	ebd0 <am_hal_uart_transfer+0x420>
    ebbc:	680c      	ldr	r4, [r1, #0]
    ebbe:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    ebc2:	f102 0201 	add.w	r2, r2, #1
    ebc6:	d121      	bne.n	ec0c <am_hal_uart_transfer+0x45c>
    ebc8:	2a20      	cmp	r2, #32
    ebca:	f800 4b01 	strb.w	r4, [r0], #1
    ebce:	d002      	beq.n	ebd6 <am_hal_uart_transfer+0x426>
    ebd0:	698c      	ldr	r4, [r1, #24]
    ebd2:	06e4      	lsls	r4, r4, #27
    ebd4:	d5f2      	bpl.n	ebbc <am_hal_uart_transfer+0x40c>
    ebd6:	f105 0648 	add.w	r6, r5, #72	; 0x48
    ebda:	a908      	add	r1, sp, #32
    ebdc:	4630      	mov	r0, r6
    ebde:	9300      	str	r3, [sp, #0]
    ebe0:	f000 f8b0 	bl	ed44 <am_hal_queue_item_add>
    ebe4:	b920      	cbnz	r0, ebf0 <am_hal_uart_transfer+0x440>
    ebe6:	4f0e      	ldr	r7, [pc, #56]	; (ec20 <am_hal_uart_transfer+0x470>)
    ebe8:	9806      	ldr	r0, [sp, #24]
    ebea:	f7fe fd79 	bl	d6e0 <am_hal_interrupt_master_set>
    ebee:	e5e9      	b.n	e7c4 <am_hal_uart_transfer+0x14>
    ebf0:	9806      	ldr	r0, [sp, #24]
    ebf2:	f7fe fd75 	bl	d6e0 <am_hal_interrupt_master_set>
    ebf6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    ebf8:	9b00      	ldr	r3, [sp, #0]
    ebfa:	42bc      	cmp	r4, r7
    ebfc:	bf28      	it	cs
    ebfe:	463c      	movcs	r4, r7
    ec00:	4619      	mov	r1, r3
    ec02:	4630      	mov	r0, r6
    ec04:	4622      	mov	r2, r4
    ec06:	f000 f8d5 	bl	edb4 <am_hal_queue_item_get>
    ec0a:	e67e      	b.n	e90a <am_hal_uart_transfer+0x15a>
    ec0c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ec10:	e7ea      	b.n	ebe8 <am_hal_uart_transfer+0x438>
    ec12:	4604      	mov	r4, r0
    ec14:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    ec18:	e678      	b.n	e90c <am_hal_uart_transfer+0x15c>
    ec1a:	4627      	mov	r7, r4
    ec1c:	e676      	b.n	e90c <am_hal_uart_transfer+0x15c>
    ec1e:	bf00      	nop
    ec20:	08000001 	.word	0x08000001

0000ec24 <am_hal_cmdq_init>:
    ec24:	2807      	cmp	r0, #7
    ec26:	d901      	bls.n	ec2c <am_hal_cmdq_init+0x8>
    ec28:	2005      	movs	r0, #5
    ec2a:	4770      	bx	lr
    ec2c:	b1c9      	cbz	r1, ec62 <am_hal_cmdq_init+0x3e>
    ec2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec32:	684c      	ldr	r4, [r1, #4]
    ec34:	b194      	cbz	r4, ec5c <am_hal_cmdq_init+0x38>
    ec36:	b18a      	cbz	r2, ec5c <am_hal_cmdq_init+0x38>
    ec38:	680e      	ldr	r6, [r1, #0]
    ec3a:	2e01      	cmp	r6, #1
    ec3c:	d90e      	bls.n	ec5c <am_hal_cmdq_init+0x38>
    ec3e:	272c      	movs	r7, #44	; 0x2c
    ec40:	f8df c09c 	ldr.w	ip, [pc, #156]	; ece0 <am_hal_cmdq_init+0xbc>
    ec44:	fb07 f700 	mul.w	r7, r7, r0
    ec48:	eb0c 0507 	add.w	r5, ip, r7
    ec4c:	f895 e003 	ldrb.w	lr, [r5, #3]
    ec50:	f01e 0301 	ands.w	r3, lr, #1
    ec54:	d007      	beq.n	ec66 <am_hal_cmdq_init+0x42>
    ec56:	2007      	movs	r0, #7
    ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec5c:	2006      	movs	r0, #6
    ec5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec62:	2006      	movs	r0, #6
    ec64:	4770      	bx	lr
    ec66:	f04e 0e01 	orr.w	lr, lr, #1
    ec6a:	00f6      	lsls	r6, r6, #3
    ec6c:	f363 0e41 	bfi	lr, r3, #1, #1
    ec70:	f885 e003 	strb.w	lr, [r5, #3]
    ec74:	eb06 0804 	add.w	r8, r6, r4
    ec78:	f8df e068 	ldr.w	lr, [pc, #104]	; ece4 <am_hal_cmdq_init+0xc0>
    ec7c:	f8c5 8008 	str.w	r8, [r5, #8]
    ec80:	606c      	str	r4, [r5, #4]
    ec82:	60ec      	str	r4, [r5, #12]
    ec84:	616c      	str	r4, [r5, #20]
    ec86:	612c      	str	r4, [r5, #16]
    ec88:	61ae      	str	r6, [r5, #24]
    ec8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ec8e:	f85c 6007 	ldr.w	r6, [ip, r7]
    ec92:	f8df 8054 	ldr.w	r8, [pc, #84]	; ece8 <am_hal_cmdq_init+0xc4>
    ec96:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    ec9a:	f368 0617 	bfi	r6, r8, #0, #24
    ec9e:	f8d0 e008 	ldr.w	lr, [r0, #8]
    eca2:	f84c 6007 	str.w	r6, [ip, r7]
    eca6:	6268      	str	r0, [r5, #36]	; 0x24
    eca8:	61eb      	str	r3, [r5, #28]
    ecaa:	622b      	str	r3, [r5, #32]
    ecac:	f8ce 3000 	str.w	r3, [lr]
    ecb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ecb2:	7a09      	ldrb	r1, [r1, #8]
    ecb4:	68c0      	ldr	r0, [r0, #12]
    ecb6:	6003      	str	r3, [r0, #0]
    ecb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ecba:	6906      	ldr	r6, [r0, #16]
    ecbc:	6940      	ldr	r0, [r0, #20]
    ecbe:	6837      	ldr	r7, [r6, #0]
    ecc0:	4338      	orrs	r0, r7
    ecc2:	6030      	str	r0, [r6, #0]
    ecc4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ecc6:	6840      	ldr	r0, [r0, #4]
    ecc8:	6004      	str	r4, [r0, #0]
    ecca:	6a68      	ldr	r0, [r5, #36]	; 0x24
    eccc:	0049      	lsls	r1, r1, #1
    ecce:	6804      	ldr	r4, [r0, #0]
    ecd0:	f001 0102 	and.w	r1, r1, #2
    ecd4:	6021      	str	r1, [r4, #0]
    ecd6:	4618      	mov	r0, r3
    ecd8:	6015      	str	r5, [r2, #0]
    ecda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ecde:	bf00      	nop
    ece0:	10001130 	.word	0x10001130
    ece4:	0000f2d0 	.word	0x0000f2d0
    ece8:	00cdcdcd 	.word	0x00cdcdcd

0000ecec <am_hal_cmdq_enable>:
    ecec:	4603      	mov	r3, r0
    ecee:	b128      	cbz	r0, ecfc <am_hal_cmdq_enable+0x10>
    ecf0:	6802      	ldr	r2, [r0, #0]
    ecf2:	490d      	ldr	r1, [pc, #52]	; (ed28 <am_hal_cmdq_enable+0x3c>)
    ecf4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ecf8:	428a      	cmp	r2, r1
    ecfa:	d001      	beq.n	ed00 <am_hal_cmdq_enable+0x14>
    ecfc:	2002      	movs	r0, #2
    ecfe:	4770      	bx	lr
    ed00:	78c2      	ldrb	r2, [r0, #3]
    ed02:	f002 0202 	and.w	r2, r2, #2
    ed06:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    ed0a:	b952      	cbnz	r2, ed22 <am_hal_cmdq_enable+0x36>
    ed0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ed0e:	6811      	ldr	r1, [r2, #0]
    ed10:	680a      	ldr	r2, [r1, #0]
    ed12:	f042 0201 	orr.w	r2, r2, #1
    ed16:	600a      	str	r2, [r1, #0]
    ed18:	78da      	ldrb	r2, [r3, #3]
    ed1a:	f042 0202 	orr.w	r2, r2, #2
    ed1e:	70da      	strb	r2, [r3, #3]
    ed20:	4770      	bx	lr
    ed22:	2000      	movs	r0, #0
    ed24:	4770      	bx	lr
    ed26:	bf00      	nop
    ed28:	01cdcdcd 	.word	0x01cdcdcd

0000ed2c <am_hal_queue_init>:
    ed2c:	b410      	push	{r4}
    ed2e:	2400      	movs	r4, #0
    ed30:	6004      	str	r4, [r0, #0]
    ed32:	6044      	str	r4, [r0, #4]
    ed34:	6084      	str	r4, [r0, #8]
    ed36:	60c3      	str	r3, [r0, #12]
    ed38:	6102      	str	r2, [r0, #16]
    ed3a:	6141      	str	r1, [r0, #20]
    ed3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed40:	4770      	bx	lr
    ed42:	bf00      	nop

0000ed44 <am_hal_queue_item_add>:
    ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed46:	4604      	mov	r4, r0
    ed48:	6906      	ldr	r6, [r0, #16]
    ed4a:	b083      	sub	sp, #12
    ed4c:	fb06 f602 	mul.w	r6, r6, r2
    ed50:	460d      	mov	r5, r1
    ed52:	f7fe fcc1 	bl	d6d8 <am_hal_interrupt_master_disable>
    ed56:	68e7      	ldr	r7, [r4, #12]
    ed58:	68a2      	ldr	r2, [r4, #8]
    ed5a:	9001      	str	r0, [sp, #4]
    ed5c:	1abb      	subs	r3, r7, r2
    ed5e:	429e      	cmp	r6, r3
    ed60:	d826      	bhi.n	edb0 <am_hal_queue_item_add+0x6c>
    ed62:	b196      	cbz	r6, ed8a <am_hal_queue_item_add+0x46>
    ed64:	6823      	ldr	r3, [r4, #0]
    ed66:	4629      	mov	r1, r5
    ed68:	b1c5      	cbz	r5, ed9c <am_hal_queue_item_add+0x58>
    ed6a:	19af      	adds	r7, r5, r6
    ed6c:	6962      	ldr	r2, [r4, #20]
    ed6e:	f811 0b01 	ldrb.w	r0, [r1], #1
    ed72:	54d0      	strb	r0, [r2, r3]
    ed74:	6823      	ldr	r3, [r4, #0]
    ed76:	68e5      	ldr	r5, [r4, #12]
    ed78:	3301      	adds	r3, #1
    ed7a:	42b9      	cmp	r1, r7
    ed7c:	fbb3 f0f5 	udiv	r0, r3, r5
    ed80:	fb05 3310 	mls	r3, r5, r0, r3
    ed84:	6023      	str	r3, [r4, #0]
    ed86:	d1f1      	bne.n	ed6c <am_hal_queue_item_add+0x28>
    ed88:	68a2      	ldr	r2, [r4, #8]
    ed8a:	4432      	add	r2, r6
    ed8c:	60a2      	str	r2, [r4, #8]
    ed8e:	2401      	movs	r4, #1
    ed90:	9801      	ldr	r0, [sp, #4]
    ed92:	f7fe fca5 	bl	d6e0 <am_hal_interrupt_master_set>
    ed96:	4620      	mov	r0, r4
    ed98:	b003      	add	sp, #12
    ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed9c:	3101      	adds	r1, #1
    ed9e:	3301      	adds	r3, #1
    eda0:	428e      	cmp	r6, r1
    eda2:	fbb3 f0f7 	udiv	r0, r3, r7
    eda6:	fb07 3310 	mls	r3, r7, r0, r3
    edaa:	d1f7      	bne.n	ed9c <am_hal_queue_item_add+0x58>
    edac:	6023      	str	r3, [r4, #0]
    edae:	e7ec      	b.n	ed8a <am_hal_queue_item_add+0x46>
    edb0:	2400      	movs	r4, #0
    edb2:	e7ed      	b.n	ed90 <am_hal_queue_item_add+0x4c>

0000edb4 <am_hal_queue_item_get>:
    edb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    edb6:	4604      	mov	r4, r0
    edb8:	6906      	ldr	r6, [r0, #16]
    edba:	b083      	sub	sp, #12
    edbc:	fb06 f602 	mul.w	r6, r6, r2
    edc0:	460d      	mov	r5, r1
    edc2:	f7fe fc89 	bl	d6d8 <am_hal_interrupt_master_disable>
    edc6:	68a2      	ldr	r2, [r4, #8]
    edc8:	9001      	str	r0, [sp, #4]
    edca:	4296      	cmp	r6, r2
    edcc:	d81c      	bhi.n	ee08 <am_hal_queue_item_get+0x54>
    edce:	b196      	cbz	r6, edf6 <am_hal_queue_item_get+0x42>
    edd0:	6863      	ldr	r3, [r4, #4]
    edd2:	b1dd      	cbz	r5, ee0c <am_hal_queue_item_get+0x58>
    edd4:	4629      	mov	r1, r5
    edd6:	19af      	adds	r7, r5, r6
    edd8:	6962      	ldr	r2, [r4, #20]
    edda:	5cd3      	ldrb	r3, [r2, r3]
    eddc:	f801 3b01 	strb.w	r3, [r1], #1
    ede0:	6863      	ldr	r3, [r4, #4]
    ede2:	68e5      	ldr	r5, [r4, #12]
    ede4:	3301      	adds	r3, #1
    ede6:	428f      	cmp	r7, r1
    ede8:	fbb3 f0f5 	udiv	r0, r3, r5
    edec:	fb05 3310 	mls	r3, r5, r0, r3
    edf0:	6063      	str	r3, [r4, #4]
    edf2:	d1f1      	bne.n	edd8 <am_hal_queue_item_get+0x24>
    edf4:	68a2      	ldr	r2, [r4, #8]
    edf6:	1b92      	subs	r2, r2, r6
    edf8:	60a2      	str	r2, [r4, #8]
    edfa:	2401      	movs	r4, #1
    edfc:	9801      	ldr	r0, [sp, #4]
    edfe:	f7fe fc6f 	bl	d6e0 <am_hal_interrupt_master_set>
    ee02:	4620      	mov	r0, r4
    ee04:	b003      	add	sp, #12
    ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee08:	2400      	movs	r4, #0
    ee0a:	e7f7      	b.n	edfc <am_hal_queue_item_get+0x48>
    ee0c:	68e0      	ldr	r0, [r4, #12]
    ee0e:	4629      	mov	r1, r5
    ee10:	3101      	adds	r1, #1
    ee12:	3301      	adds	r3, #1
    ee14:	428e      	cmp	r6, r1
    ee16:	fbb3 f5f0 	udiv	r5, r3, r0
    ee1a:	fb00 3315 	mls	r3, r0, r5, r3
    ee1e:	d1f7      	bne.n	ee10 <am_hal_queue_item_get+0x5c>
    ee20:	6063      	str	r3, [r4, #4]
    ee22:	e7e8      	b.n	edf6 <am_hal_queue_item_get+0x42>
    ee24:	00000000 	.word	0x00000000
    ee28:	001e8480 	.word	0x001e8480
    ee2c:	00000003 	.word	0x00000003
	...
    ee38:	72617053 	.word	0x72617053
    ee3c:	6e75466b 	.word	0x6e75466b
    ee40:	616c4220 	.word	0x616c4220
    ee44:	6f426b63 	.word	0x6f426b63
    ee48:	20647261 	.word	0x20647261
    ee4c:	65747241 	.word	0x65747241
    ee50:	2073696d 	.word	0x2073696d
    ee54:	20495053 	.word	0x20495053
    ee58:	74736554 	.word	0x74736554
    ee5c:	0a676e69 	.word	0x0a676e69
    ee60:	00000000 	.word	0x00000000
    ee64:	343a3131 	.word	0x343a3131
    ee68:	33333a38 	.word	0x33333a38
    ee6c:	00000000 	.word	0x00000000
    ee70:	2079614d 	.word	0x2079614d
    ee74:	32203032 	.word	0x32203032
    ee78:	00393130 	.word	0x00393130
    ee7c:	706d6f43 	.word	0x706d6f43
    ee80:	64656c69 	.word	0x64656c69
    ee84:	206e6f20 	.word	0x206e6f20
    ee88:	202c7325 	.word	0x202c7325
    ee8c:	0a0a7325 	.word	0x0a0a7325
    ee90:	00000000 	.word	0x00000000
    ee94:	6c6c6548 	.word	0x6c6c6548
    ee98:	57202c6f 	.word	0x57202c6f
    ee9c:	646c726f 	.word	0x646c726f
    eea0:	000a0d21 	.word	0x000a0d21
    eea4:	685f6d61 	.word	0x685f6d61
    eea8:	695f6c61 	.word	0x695f6c61
    eeac:	695f6d6f 	.word	0x695f6d6f
    eeb0:	6974696e 	.word	0x6974696e
    eeb4:	7a696c61 	.word	0x7a696c61
    eeb8:	65722065 	.word	0x65722065
    eebc:	6e727574 	.word	0x6e727574
    eec0:	203a6465 	.word	0x203a6465
    eec4:	000a6425 	.word	0x000a6425
    eec8:	685f6d61 	.word	0x685f6d61
    eecc:	695f6c61 	.word	0x695f6c61
    eed0:	705f6d6f 	.word	0x705f6d6f
    eed4:	7265776f 	.word	0x7265776f
    eed8:	7274635f 	.word	0x7274635f
    eedc:	6572206c 	.word	0x6572206c
    eee0:	6e727574 	.word	0x6e727574
    eee4:	203a6465 	.word	0x203a6465
    eee8:	000a6425 	.word	0x000a6425
    eeec:	685f6d61 	.word	0x685f6d61
    eef0:	695f6c61 	.word	0x695f6c61
    eef4:	635f6d6f 	.word	0x635f6d6f
    eef8:	69666e6f 	.word	0x69666e6f
    eefc:	65727567 	.word	0x65727567
    ef00:	74657220 	.word	0x74657220
    ef04:	656e7275 	.word	0x656e7275
    ef08:	25203a64 	.word	0x25203a64
    ef0c:	00000a64 	.word	0x00000a64
    ef10:	685f6d61 	.word	0x685f6d61
    ef14:	695f6c61 	.word	0x695f6c61
    ef18:	655f6d6f 	.word	0x655f6d6f
    ef1c:	6c62616e 	.word	0x6c62616e
    ef20:	65722065 	.word	0x65722065
    ef24:	6e727574 	.word	0x6e727574
    ef28:	203a6465 	.word	0x203a6465
    ef2c:	000a6425 	.word	0x000a6425
    ef30:	685f6d61 	.word	0x685f6d61
    ef34:	675f6c61 	.word	0x675f6c61
    ef38:	5f6f6970 	.word	0x5f6f6970
    ef3c:	636e6970 	.word	0x636e6970
    ef40:	69666e6f 	.word	0x69666e6f
    ef44:	53282067 	.word	0x53282067
    ef48:	294b4c43 	.word	0x294b4c43
    ef4c:	74657220 	.word	0x74657220
    ef50:	656e7275 	.word	0x656e7275
    ef54:	25203a64 	.word	0x25203a64
    ef58:	00000a64 	.word	0x00000a64
    ef5c:	685f6d61 	.word	0x685f6d61
    ef60:	675f6c61 	.word	0x675f6c61
    ef64:	5f6f6970 	.word	0x5f6f6970
    ef68:	636e6970 	.word	0x636e6970
    ef6c:	69666e6f 	.word	0x69666e6f
    ef70:	4d282067 	.word	0x4d282067
    ef74:	2949534f 	.word	0x2949534f
    ef78:	74657220 	.word	0x74657220
    ef7c:	656e7275 	.word	0x656e7275
    ef80:	25203a64 	.word	0x25203a64
    ef84:	00000a64 	.word	0x00000a64
    ef88:	685f6d61 	.word	0x685f6d61
    ef8c:	675f6c61 	.word	0x675f6c61
    ef90:	5f6f6970 	.word	0x5f6f6970
    ef94:	636e6970 	.word	0x636e6970
    ef98:	69666e6f 	.word	0x69666e6f
    ef9c:	4d282067 	.word	0x4d282067
    efa0:	294f5349 	.word	0x294f5349
    efa4:	74657220 	.word	0x74657220
    efa8:	656e7275 	.word	0x656e7275
    efac:	25203a64 	.word	0x25203a64
    efb0:	00000a64 	.word	0x00000a64
    efb4:	685f6d61 	.word	0x685f6d61
    efb8:	695f6c61 	.word	0x695f6c61
    efbc:	625f6d6f 	.word	0x625f6d6f
    efc0:	6b636f6c 	.word	0x6b636f6c
    efc4:	5f676e69 	.word	0x5f676e69
    efc8:	6e617274 	.word	0x6e617274
    efcc:	72656673 	.word	0x72656673
    efd0:	74657220 	.word	0x74657220
    efd4:	656e7275 	.word	0x656e7275
    efd8:	25203a64 	.word	0x25203a64
    efdc:	00000a64 	.word	0x00000a64
    efe0:	0a0a0a0a 	.word	0x0a0a0a0a
    efe4:	0a0a0a0a 	.word	0x0a0a0a0a
    efe8:	0a0a0a0a 	.word	0x0a0a0a0a
    efec:	0a0a0a0a 	.word	0x0a0a0a0a
    eff0:	00000a0a 	.word	0x00000a0a

0000eff4 <g_sBspUartConfig>:
    eff4:	0001c200 00000060 00000000 00000000     ....`...........
    f004:	00000000 00000012 00000000 00000000     ................
	...

0000f01c <g_AM_BSP_GPIO_COM_UART_RX>:
    f01c:	00000000                                ....

0000f020 <g_AM_BSP_GPIO_COM_UART_TX>:
    f020:	00000000                                ....

0000f024 <am_hal_cachectrl_defaults>:
    f024:	00000308                                ....

0000f028 <g_AM_HAL_GPIO_INPUT>:
    f028:	00001003                                ....

0000f02c <g_ui8Bit76Capabilities>:
    f02c:	02800101 80010180 80800101 80808080     ................
    f03c:	80808080 80808008 01800180 80808080     ................
    f04c:	80808080 01800402 01010401 80808080     ................
    f05c:	00000101                                ....

0000f060 <g_ui8NCEtable>:
    f060:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    f070:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    f080:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    f090:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    f0a0:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    f0b0:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    f0c0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    f0d0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    f0e0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    f0f0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    f100:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    f110:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    f120:	32221202 43231303                       .."2..#C

0000f128 <g_ui8Inpen>:
    f128:	e2242323 100723a1 e1004303 3561a151     ##$..#...C..Q.a5
    f138:	4181c525 d160b001 31a13130 1100f101     %..A..`.01.1....
    f148:	01d121b1 300511e5 31301037 40006100     .!.....07.01.a.@
    f158:	00003130                                01..

0000f15c <g_AM_HAL_GPIO_DISABLE>:
    f15c:	00000003                                ....

0000f160 <g_AM_HAL_GPIO_OUTPUT>:
    f160:	00000403                                ....

0000f164 <g_ui8nCEpins>:
    f164:	02070707 00080802 01020202 01010101     ................
    f174:	01010101 01010101 01010101 01010101     ................
    f184:	01010101 08010101 01010008 01010101     ................
    f194:	00000101                                ....

0000f198 <g_AM_HAL_GPIO_OUTPUT_12>:
    f198:	00000703                                ....

0000f19c <g_am_hal_mcuctrl_flash_size>:
    f19c:	00004000 00008000 00010000 00020000     .@..............
    f1ac:	00040000 00080000 00100000 00200000     .............. .
	...

0000f1dc <g_am_hal_mcuctrl_sram_size>:
    f1dc:	00004000 00008000 00010000 00020000     .@..............
    f1ec:	00040000 00080000 00100000 00060000     ................
	...

0000f21c <am_hal_pwrctrl_peripheral_control>:
	...
    f228:	00000001 00000004 00000004 00000002     ................
    f238:	00000008 00000008 00000004 00000008     ................
    f248:	00000008 00000008 00000008 00000008     ................
    f258:	00000010 00000010 00000010 00000020     ............ ...
    f268:	00000010 00000010 00000040 00000010     ........@.......
    f278:	00000010 00000080 00000004 00000004     ................
    f288:	00000100 00000004 00000004 00000200     ................
    f298:	00000020 00000020 00000400 00000004      ... ...........
    f2a8:	00000004 00000800 00000040 00000040     ........@...@...
    f2b8:	00001000 00000080 00000080 00002000     ............. ..
    f2c8:	00000100 00000100                       ........

0000f2d0 <gAmHalCmdQReg>:
    f2d0:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
    f2e0:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
    f2f0:	00000004 00000002 50005294 50005298     .........R.P.R.P
    f300:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
    f310:	5000529c 00000001 00000004 00000002     .R.P............
    f320:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
    f330:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
    f340:	00000004 00000002 50007294 50007298     .........r.P.r.P
    f350:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
    f360:	5000729c 00000001 00000004 00000002     .r.P............
    f370:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
    f380:	500082a8 00008000 5000829c 00000001     ...P.......P....
    f390:	00000004 00000002 50009294 50009298     ...........P...P
    f3a0:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
    f3b0:	5000929c 00000001 00000004 00000002     ...P............
    f3c0:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
    f3d0:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
    f3e0:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
    f3f0:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
    f400:	5000c250 00000001 00000004 00000002     P..P............
