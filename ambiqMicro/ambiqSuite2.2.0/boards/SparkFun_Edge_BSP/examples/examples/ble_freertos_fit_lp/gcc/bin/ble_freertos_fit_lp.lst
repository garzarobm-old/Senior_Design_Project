
bin/ble_freertos_fit_lp.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 23 00 10 85 e3 01 00 ed e3 01 00 c5 c9 01 00     .#..............
    c010:	f3 e3 01 00 f3 e3 01 00 f3 e3 01 00 00 00 00 00     ................
	...
    c02c:	51 97 01 00 f9 e3 01 00 00 00 00 00 31 99 01 00     Q...........1...
    c03c:	99 99 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c04c:	f9 e3 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c05c:	f9 e3 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c06c:	f9 e3 01 00 39 2e 01 00 f9 e3 01 00 c5 2e 01 00     ....9...........
    c07c:	11 2e 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c08c:	f9 e3 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c09c:	e9 9b 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c0ac:	f9 e3 01 00 f9 e3 01 00 f9 e3 01 00 f9 e3 01 00     ................
    c0bc:	f9 e3 01 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <memcmp>:
    c100:	2a03      	cmp	r2, #3
    c102:	b470      	push	{r4, r5, r6}
    c104:	d922      	bls.n	c14c <memcmp+0x4c>
    c106:	ea40 0301 	orr.w	r3, r0, r1
    c10a:	079b      	lsls	r3, r3, #30
    c10c:	d011      	beq.n	c132 <memcmp+0x32>
    c10e:	7803      	ldrb	r3, [r0, #0]
    c110:	780c      	ldrb	r4, [r1, #0]
    c112:	42a3      	cmp	r3, r4
    c114:	d11d      	bne.n	c152 <memcmp+0x52>
    c116:	440a      	add	r2, r1
    c118:	3101      	adds	r1, #1
    c11a:	e005      	b.n	c128 <memcmp+0x28>
    c11c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c120:	f811 4b01 	ldrb.w	r4, [r1], #1
    c124:	42a3      	cmp	r3, r4
    c126:	d114      	bne.n	c152 <memcmp+0x52>
    c128:	4291      	cmp	r1, r2
    c12a:	d1f7      	bne.n	c11c <memcmp+0x1c>
    c12c:	2000      	movs	r0, #0
    c12e:	bc70      	pop	{r4, r5, r6}
    c130:	4770      	bx	lr
    c132:	680d      	ldr	r5, [r1, #0]
    c134:	6806      	ldr	r6, [r0, #0]
    c136:	42ae      	cmp	r6, r5
    c138:	460c      	mov	r4, r1
    c13a:	4603      	mov	r3, r0
    c13c:	f101 0104 	add.w	r1, r1, #4
    c140:	f100 0004 	add.w	r0, r0, #4
    c144:	d108      	bne.n	c158 <memcmp+0x58>
    c146:	3a04      	subs	r2, #4
    c148:	2a03      	cmp	r2, #3
    c14a:	d8f2      	bhi.n	c132 <memcmp+0x32>
    c14c:	2a00      	cmp	r2, #0
    c14e:	d1de      	bne.n	c10e <memcmp+0xe>
    c150:	e7ec      	b.n	c12c <memcmp+0x2c>
    c152:	1b18      	subs	r0, r3, r4
    c154:	bc70      	pop	{r4, r5, r6}
    c156:	4770      	bx	lr
    c158:	4621      	mov	r1, r4
    c15a:	4618      	mov	r0, r3
    c15c:	e7d7      	b.n	c10e <memcmp+0xe>
    c15e:	bf00      	nop

0000c160 <memcpy>:
    c160:	4684      	mov	ip, r0
    c162:	ea41 0300 	orr.w	r3, r1, r0
    c166:	f013 0303 	ands.w	r3, r3, #3
    c16a:	d16d      	bne.n	c248 <memcpy+0xe8>
    c16c:	3a40      	subs	r2, #64	; 0x40
    c16e:	d341      	bcc.n	c1f4 <memcpy+0x94>
    c170:	f851 3b04 	ldr.w	r3, [r1], #4
    c174:	f840 3b04 	str.w	r3, [r0], #4
    c178:	f851 3b04 	ldr.w	r3, [r1], #4
    c17c:	f840 3b04 	str.w	r3, [r0], #4
    c180:	f851 3b04 	ldr.w	r3, [r1], #4
    c184:	f840 3b04 	str.w	r3, [r0], #4
    c188:	f851 3b04 	ldr.w	r3, [r1], #4
    c18c:	f840 3b04 	str.w	r3, [r0], #4
    c190:	f851 3b04 	ldr.w	r3, [r1], #4
    c194:	f840 3b04 	str.w	r3, [r0], #4
    c198:	f851 3b04 	ldr.w	r3, [r1], #4
    c19c:	f840 3b04 	str.w	r3, [r0], #4
    c1a0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a4:	f840 3b04 	str.w	r3, [r0], #4
    c1a8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ac:	f840 3b04 	str.w	r3, [r0], #4
    c1b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1b4:	f840 3b04 	str.w	r3, [r0], #4
    c1b8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1bc:	f840 3b04 	str.w	r3, [r0], #4
    c1c0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1c4:	f840 3b04 	str.w	r3, [r0], #4
    c1c8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1cc:	f840 3b04 	str.w	r3, [r0], #4
    c1d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1d4:	f840 3b04 	str.w	r3, [r0], #4
    c1d8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1dc:	f840 3b04 	str.w	r3, [r0], #4
    c1e0:	f851 3b04 	ldr.w	r3, [r1], #4
    c1e4:	f840 3b04 	str.w	r3, [r0], #4
    c1e8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1ec:	f840 3b04 	str.w	r3, [r0], #4
    c1f0:	3a40      	subs	r2, #64	; 0x40
    c1f2:	d2bd      	bcs.n	c170 <memcpy+0x10>
    c1f4:	3230      	adds	r2, #48	; 0x30
    c1f6:	d311      	bcc.n	c21c <memcpy+0xbc>
    c1f8:	f851 3b04 	ldr.w	r3, [r1], #4
    c1fc:	f840 3b04 	str.w	r3, [r0], #4
    c200:	f851 3b04 	ldr.w	r3, [r1], #4
    c204:	f840 3b04 	str.w	r3, [r0], #4
    c208:	f851 3b04 	ldr.w	r3, [r1], #4
    c20c:	f840 3b04 	str.w	r3, [r0], #4
    c210:	f851 3b04 	ldr.w	r3, [r1], #4
    c214:	f840 3b04 	str.w	r3, [r0], #4
    c218:	3a10      	subs	r2, #16
    c21a:	d2ed      	bcs.n	c1f8 <memcpy+0x98>
    c21c:	320c      	adds	r2, #12
    c21e:	d305      	bcc.n	c22c <memcpy+0xcc>
    c220:	f851 3b04 	ldr.w	r3, [r1], #4
    c224:	f840 3b04 	str.w	r3, [r0], #4
    c228:	3a04      	subs	r2, #4
    c22a:	d2f9      	bcs.n	c220 <memcpy+0xc0>
    c22c:	3204      	adds	r2, #4
    c22e:	d008      	beq.n	c242 <memcpy+0xe2>
    c230:	07d2      	lsls	r2, r2, #31
    c232:	bf1c      	itt	ne
    c234:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c238:	f800 3b01 	strbne.w	r3, [r0], #1
    c23c:	d301      	bcc.n	c242 <memcpy+0xe2>
    c23e:	880b      	ldrh	r3, [r1, #0]
    c240:	8003      	strh	r3, [r0, #0]
    c242:	4660      	mov	r0, ip
    c244:	4770      	bx	lr
    c246:	bf00      	nop
    c248:	2a08      	cmp	r2, #8
    c24a:	d313      	bcc.n	c274 <memcpy+0x114>
    c24c:	078b      	lsls	r3, r1, #30
    c24e:	d08d      	beq.n	c16c <memcpy+0xc>
    c250:	f010 0303 	ands.w	r3, r0, #3
    c254:	d08a      	beq.n	c16c <memcpy+0xc>
    c256:	f1c3 0304 	rsb	r3, r3, #4
    c25a:	1ad2      	subs	r2, r2, r3
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	bf1c      	itt	ne
    c260:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c264:	f800 3b01 	strbne.w	r3, [r0], #1
    c268:	d380      	bcc.n	c16c <memcpy+0xc>
    c26a:	f831 3b02 	ldrh.w	r3, [r1], #2
    c26e:	f820 3b02 	strh.w	r3, [r0], #2
    c272:	e77b      	b.n	c16c <memcpy+0xc>
    c274:	3a04      	subs	r2, #4
    c276:	d3d9      	bcc.n	c22c <memcpy+0xcc>
    c278:	3a01      	subs	r2, #1
    c27a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c27e:	f800 3b01 	strb.w	r3, [r0], #1
    c282:	d2f9      	bcs.n	c278 <memcpy+0x118>
    c284:	780b      	ldrb	r3, [r1, #0]
    c286:	7003      	strb	r3, [r0, #0]
    c288:	784b      	ldrb	r3, [r1, #1]
    c28a:	7043      	strb	r3, [r0, #1]
    c28c:	788b      	ldrb	r3, [r1, #2]
    c28e:	7083      	strb	r3, [r0, #2]
    c290:	4660      	mov	r0, ip
    c292:	4770      	bx	lr

0000c294 <memmove>:
    c294:	4288      	cmp	r0, r1
    c296:	b5f0      	push	{r4, r5, r6, r7, lr}
    c298:	d90d      	bls.n	c2b6 <memmove+0x22>
    c29a:	188b      	adds	r3, r1, r2
    c29c:	4298      	cmp	r0, r3
    c29e:	d20a      	bcs.n	c2b6 <memmove+0x22>
    c2a0:	1884      	adds	r4, r0, r2
    c2a2:	2a00      	cmp	r2, #0
    c2a4:	d051      	beq.n	c34a <memmove+0xb6>
    c2a6:	4622      	mov	r2, r4
    c2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c2ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
    c2b0:	4299      	cmp	r1, r3
    c2b2:	d1f9      	bne.n	c2a8 <memmove+0x14>
    c2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c2b6:	2a0f      	cmp	r2, #15
    c2b8:	d948      	bls.n	c34c <memmove+0xb8>
    c2ba:	ea41 0300 	orr.w	r3, r1, r0
    c2be:	079b      	lsls	r3, r3, #30
    c2c0:	d146      	bne.n	c350 <memmove+0xbc>
    c2c2:	f100 0410 	add.w	r4, r0, #16
    c2c6:	f101 0310 	add.w	r3, r1, #16
    c2ca:	4615      	mov	r5, r2
    c2cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
    c2d0:	f844 6c10 	str.w	r6, [r4, #-16]
    c2d4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    c2d8:	f844 6c0c 	str.w	r6, [r4, #-12]
    c2dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
    c2e0:	f844 6c08 	str.w	r6, [r4, #-8]
    c2e4:	3d10      	subs	r5, #16
    c2e6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    c2ea:	f844 6c04 	str.w	r6, [r4, #-4]
    c2ee:	2d0f      	cmp	r5, #15
    c2f0:	f103 0310 	add.w	r3, r3, #16
    c2f4:	f104 0410 	add.w	r4, r4, #16
    c2f8:	d8e8      	bhi.n	c2cc <memmove+0x38>
    c2fa:	f1a2 0310 	sub.w	r3, r2, #16
    c2fe:	f023 030f 	bic.w	r3, r3, #15
    c302:	f002 0e0f 	and.w	lr, r2, #15
    c306:	3310      	adds	r3, #16
    c308:	f1be 0f03 	cmp.w	lr, #3
    c30c:	4419      	add	r1, r3
    c30e:	4403      	add	r3, r0
    c310:	d921      	bls.n	c356 <memmove+0xc2>
    c312:	1f1e      	subs	r6, r3, #4
    c314:	460d      	mov	r5, r1
    c316:	4674      	mov	r4, lr
    c318:	3c04      	subs	r4, #4
    c31a:	f855 7b04 	ldr.w	r7, [r5], #4
    c31e:	f846 7f04 	str.w	r7, [r6, #4]!
    c322:	2c03      	cmp	r4, #3
    c324:	d8f8      	bhi.n	c318 <memmove+0x84>
    c326:	f1ae 0404 	sub.w	r4, lr, #4
    c32a:	f024 0403 	bic.w	r4, r4, #3
    c32e:	3404      	adds	r4, #4
    c330:	4421      	add	r1, r4
    c332:	4423      	add	r3, r4
    c334:	f002 0203 	and.w	r2, r2, #3
    c338:	b162      	cbz	r2, c354 <memmove+0xc0>
    c33a:	3b01      	subs	r3, #1
    c33c:	440a      	add	r2, r1
    c33e:	f811 4b01 	ldrb.w	r4, [r1], #1
    c342:	f803 4f01 	strb.w	r4, [r3, #1]!
    c346:	428a      	cmp	r2, r1
    c348:	d1f9      	bne.n	c33e <memmove+0xaa>
    c34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34c:	4603      	mov	r3, r0
    c34e:	e7f3      	b.n	c338 <memmove+0xa4>
    c350:	4603      	mov	r3, r0
    c352:	e7f2      	b.n	c33a <memmove+0xa6>
    c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c356:	4672      	mov	r2, lr
    c358:	e7ee      	b.n	c338 <memmove+0xa4>
    c35a:	bf00      	nop

0000c35c <memset>:
    c35c:	b470      	push	{r4, r5, r6}
    c35e:	0786      	lsls	r6, r0, #30
    c360:	d046      	beq.n	c3f0 <memset+0x94>
    c362:	1e54      	subs	r4, r2, #1
    c364:	2a00      	cmp	r2, #0
    c366:	d041      	beq.n	c3ec <memset+0x90>
    c368:	b2ca      	uxtb	r2, r1
    c36a:	4603      	mov	r3, r0
    c36c:	e002      	b.n	c374 <memset+0x18>
    c36e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    c372:	d33b      	bcc.n	c3ec <memset+0x90>
    c374:	f803 2b01 	strb.w	r2, [r3], #1
    c378:	079d      	lsls	r5, r3, #30
    c37a:	d1f8      	bne.n	c36e <memset+0x12>
    c37c:	2c03      	cmp	r4, #3
    c37e:	d92e      	bls.n	c3de <memset+0x82>
    c380:	b2cd      	uxtb	r5, r1
    c382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    c386:	2c0f      	cmp	r4, #15
    c388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    c38c:	d919      	bls.n	c3c2 <memset+0x66>
    c38e:	f103 0210 	add.w	r2, r3, #16
    c392:	4626      	mov	r6, r4
    c394:	3e10      	subs	r6, #16
    c396:	2e0f      	cmp	r6, #15
    c398:	f842 5c10 	str.w	r5, [r2, #-16]
    c39c:	f842 5c0c 	str.w	r5, [r2, #-12]
    c3a0:	f842 5c08 	str.w	r5, [r2, #-8]
    c3a4:	f842 5c04 	str.w	r5, [r2, #-4]
    c3a8:	f102 0210 	add.w	r2, r2, #16
    c3ac:	d8f2      	bhi.n	c394 <memset+0x38>
    c3ae:	f1a4 0210 	sub.w	r2, r4, #16
    c3b2:	f022 020f 	bic.w	r2, r2, #15
    c3b6:	f004 040f 	and.w	r4, r4, #15
    c3ba:	3210      	adds	r2, #16
    c3bc:	2c03      	cmp	r4, #3
    c3be:	4413      	add	r3, r2
    c3c0:	d90d      	bls.n	c3de <memset+0x82>
    c3c2:	461e      	mov	r6, r3
    c3c4:	4622      	mov	r2, r4
    c3c6:	3a04      	subs	r2, #4
    c3c8:	2a03      	cmp	r2, #3
    c3ca:	f846 5b04 	str.w	r5, [r6], #4
    c3ce:	d8fa      	bhi.n	c3c6 <memset+0x6a>
    c3d0:	1f22      	subs	r2, r4, #4
    c3d2:	f022 0203 	bic.w	r2, r2, #3
    c3d6:	3204      	adds	r2, #4
    c3d8:	4413      	add	r3, r2
    c3da:	f004 0403 	and.w	r4, r4, #3
    c3de:	b12c      	cbz	r4, c3ec <memset+0x90>
    c3e0:	b2c9      	uxtb	r1, r1
    c3e2:	441c      	add	r4, r3
    c3e4:	f803 1b01 	strb.w	r1, [r3], #1
    c3e8:	429c      	cmp	r4, r3
    c3ea:	d1fb      	bne.n	c3e4 <memset+0x88>
    c3ec:	bc70      	pop	{r4, r5, r6}
    c3ee:	4770      	bx	lr
    c3f0:	4614      	mov	r4, r2
    c3f2:	4603      	mov	r3, r0
    c3f4:	e7c2      	b.n	c37c <memset+0x20>
    c3f6:	bf00      	nop

0000c3f8 <attDmConnCback>:
    c3f8:	7803      	ldrb	r3, [r0, #0]
    c3fa:	7882      	ldrb	r2, [r0, #2]
    c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c400:	1e5f      	subs	r7, r3, #1
    c402:	4e16      	ldr	r6, [pc, #88]	; (c45c <attDmConnCback+0x64>)
    c404:	017f      	lsls	r7, r7, #5
    c406:	2a27      	cmp	r2, #39	; 0x27
    c408:	4605      	mov	r5, r0
    c40a:	eb06 0407 	add.w	r4, r6, r7
    c40e:	d108      	bne.n	c422 <attDmConnCback+0x2a>
    c410:	88c2      	ldrh	r2, [r0, #6]
    c412:	8322      	strh	r2, [r4, #24]
    c414:	7723      	strb	r3, [r4, #28]
    c416:	2217      	movs	r2, #23
    c418:	2300      	movs	r3, #0
    c41a:	8362      	strh	r2, [r4, #26]
    c41c:	7763      	strb	r3, [r4, #29]
    c41e:	77a3      	strb	r3, [r4, #30]
    c420:	77e3      	strb	r3, [r4, #31]
    c422:	4437      	add	r7, r6
    c424:	7f3b      	ldrb	r3, [r7, #28]
    c426:	b183      	cbz	r3, c44a <attDmConnCback+0x52>
    c428:	f8d6 3104 	ldr.w	r3, [r6, #260]	; 0x104
    c42c:	4629      	mov	r1, r5
    c42e:	68db      	ldr	r3, [r3, #12]
    c430:	4620      	mov	r0, r4
    c432:	4798      	blx	r3
    c434:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    c438:	4629      	mov	r1, r5
    c43a:	68db      	ldr	r3, [r3, #12]
    c43c:	4620      	mov	r0, r4
    c43e:	4798      	blx	r3
    c440:	78ab      	ldrb	r3, [r5, #2]
    c442:	2b28      	cmp	r3, #40	; 0x28
    c444:	bf04      	itt	eq
    c446:	2300      	moveq	r3, #0
    c448:	773b      	strbeq	r3, [r7, #28]
    c44a:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
    c44e:	b11b      	cbz	r3, c458 <attDmConnCback+0x60>
    c450:	4628      	mov	r0, r5
    c452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c456:	4718      	bx	r3
    c458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c45c:	10002fd8 	.word	0x10002fd8

0000c460 <attEmptyHandler>:
    c460:	4770      	bx	lr

0000c462 <attEmptyConnCback>:
    c462:	4770      	bx	lr

0000c464 <attEmptyDataCback>:
    c464:	4770      	bx	lr

0000c466 <attL2cDataCback>:
    c466:	7a13      	ldrb	r3, [r2, #8]
    c468:	f013 0f01 	tst.w	r3, #1
    c46c:	4b03      	ldr	r3, [pc, #12]	; (c47c <attL2cDataCback+0x16>)
    c46e:	bf14      	ite	ne
    c470:	f8d3 3100 	ldrne.w	r3, [r3, #256]	; 0x100
    c474:	f8d3 3104 	ldreq.w	r3, [r3, #260]	; 0x104
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	4718      	bx	r3
    c47c:	10002fd8 	.word	0x10002fd8

0000c480 <attL2cCtrlCback>:
    c480:	b570      	push	{r4, r5, r6, lr}
    c482:	7804      	ldrb	r4, [r0, #0]
    c484:	4d0e      	ldr	r5, [pc, #56]	; (c4c0 <attL2cCtrlCback+0x40>)
    c486:	3c01      	subs	r4, #1
    c488:	0164      	lsls	r4, r4, #5
    c48a:	192b      	adds	r3, r5, r4
    c48c:	4606      	mov	r6, r0
    c48e:	7f1a      	ldrb	r2, [r3, #28]
    c490:	b1a2      	cbz	r2, c4bc <attL2cCtrlCback+0x3c>
    c492:	7882      	ldrb	r2, [r0, #2]
    c494:	2a01      	cmp	r2, #1
    c496:	bf0c      	ite	eq
    c498:	2201      	moveq	r2, #1
    c49a:	2200      	movne	r2, #0
    c49c:	779a      	strb	r2, [r3, #30]
    c49e:	d003      	beq.n	c4a8 <attL2cCtrlCback+0x28>
    c4a0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    c4a4:	685b      	ldr	r3, [r3, #4]
    c4a6:	4798      	blx	r3
    c4a8:	442c      	add	r4, r5
    c4aa:	7fa3      	ldrb	r3, [r4, #30]
    c4ac:	b933      	cbnz	r3, c4bc <attL2cCtrlCback+0x3c>
    c4ae:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    c4b2:	4630      	mov	r0, r6
    c4b4:	685b      	ldr	r3, [r3, #4]
    c4b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c4ba:	4718      	bx	r3
    c4bc:	bd70      	pop	{r4, r5, r6, pc}
    c4be:	bf00      	nop
    c4c0:	10002fd8 	.word	0x10002fd8

0000c4c4 <attCcbByHandle>:
    c4c4:	b508      	push	{r3, lr}
    c4c6:	f003 f8cd 	bl	f664 <DmConnIdByHandle>
    c4ca:	b118      	cbz	r0, c4d4 <attCcbByHandle+0x10>
    c4cc:	4b02      	ldr	r3, [pc, #8]	; (c4d8 <attCcbByHandle+0x14>)
    c4ce:	3801      	subs	r0, #1
    c4d0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c4d4:	bd08      	pop	{r3, pc}
    c4d6:	bf00      	nop
    c4d8:	10002fd8 	.word	0x10002fd8

0000c4dc <attCcbByConnId>:
    c4dc:	4b02      	ldr	r3, [pc, #8]	; (c4e8 <attCcbByConnId+0xc>)
    c4de:	3801      	subs	r0, #1
    c4e0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c4e4:	4770      	bx	lr
    c4e6:	bf00      	nop
    c4e8:	10002fd8 	.word	0x10002fd8

0000c4ec <attUuidCmp16to128>:
    c4ec:	b508      	push	{r3, lr}
    c4ee:	4b06      	ldr	r3, [pc, #24]	; (c508 <attUuidCmp16to128+0x1c>)
    c4f0:	7802      	ldrb	r2, [r0, #0]
    c4f2:	731a      	strb	r2, [r3, #12]
    c4f4:	7842      	ldrb	r2, [r0, #1]
    c4f6:	735a      	strb	r2, [r3, #13]
    c4f8:	4618      	mov	r0, r3
    c4fa:	2210      	movs	r2, #16
    c4fc:	f7ff fe00 	bl	c100 <memcmp>
    c500:	fab0 f080 	clz	r0, r0
    c504:	0940      	lsrs	r0, r0, #5
    c506:	bd08      	pop	{r3, pc}
    c508:	10002300 	.word	0x10002300

0000c50c <attExecCallback>:
    c50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    c50e:	f88d 3003 	strb.w	r3, [sp, #3]
    c512:	2300      	movs	r3, #0
    c514:	f8ad 3008 	strh.w	r3, [sp, #8]
    c518:	f88d 300c 	strb.w	r3, [sp, #12]
    c51c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    c520:	f8ad 300e 	strh.w	r3, [sp, #14]
    c524:	4b06      	ldr	r3, [pc, #24]	; (c540 <attExecCallback+0x34>)
    c526:	f8ad 0000 	strh.w	r0, [sp]
    c52a:	f88d 1002 	strb.w	r1, [sp, #2]
    c52e:	f8ad 200a 	strh.w	r2, [sp, #10]
    c532:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    c536:	4668      	mov	r0, sp
    c538:	4798      	blx	r3
    c53a:	b005      	add	sp, #20
    c53c:	f85d fb04 	ldr.w	pc, [sp], #4
    c540:	10002fd8 	.word	0x10002fd8

0000c544 <attSetMtu>:
    c544:	428a      	cmp	r2, r1
    c546:	8b43      	ldrh	r3, [r0, #26]
    c548:	b507      	push	{r0, r1, r2, lr}
    c54a:	bf28      	it	cs
    c54c:	460a      	movcs	r2, r1
    c54e:	4293      	cmp	r3, r2
    c550:	d007      	beq.n	c562 <attSetMtu+0x1e>
    c552:	2300      	movs	r3, #0
    c554:	8342      	strh	r2, [r0, #26]
    c556:	2111      	movs	r1, #17
    c558:	7f00      	ldrb	r0, [r0, #28]
    c55a:	9200      	str	r2, [sp, #0]
    c55c:	461a      	mov	r2, r3
    c55e:	f7ff ffd5 	bl	c50c <attExecCallback>
    c562:	b003      	add	sp, #12
    c564:	f85d fb04 	ldr.w	pc, [sp], #4

0000c568 <attMsgAlloc>:
    c568:	2100      	movs	r1, #0
    c56a:	f00b ba65 	b.w	17a38 <WsfMsgDataAlloc>

0000c56e <AttHandlerInit>:
    c56e:	b508      	push	{r3, lr}
    c570:	4b09      	ldr	r3, [pc, #36]	; (c598 <AttHandlerInit+0x2a>)
    c572:	4a0a      	ldr	r2, [pc, #40]	; (c59c <AttHandlerInit+0x2e>)
    c574:	f883 0110 	strb.w	r0, [r3, #272]	; 0x110
    c578:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c57c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c580:	4907      	ldr	r1, [pc, #28]	; (c5a0 <AttHandlerInit+0x32>)
    c582:	4a08      	ldr	r2, [pc, #32]	; (c5a4 <AttHandlerInit+0x36>)
    c584:	2004      	movs	r0, #4
    c586:	f003 ffb7 	bl	104f8 <L2cRegister>
    c58a:	4907      	ldr	r1, [pc, #28]	; (c5a8 <AttHandlerInit+0x3a>)
    c58c:	2000      	movs	r0, #0
    c58e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c592:	f002 bf51 	b.w	f438 <DmConnRegister>
    c596:	bf00      	nop
    c598:	10002fd8 	.word	0x10002fd8
    c59c:	00021d20 	.word	0x00021d20
    c5a0:	0000c467 	.word	0x0000c467
    c5a4:	0000c481 	.word	0x0000c481
    c5a8:	0000c3f9 	.word	0x0000c3f9

0000c5ac <AttHandler>:
    c5ac:	4608      	mov	r0, r1
    c5ae:	b149      	cbz	r1, c5c4 <AttHandler+0x18>
    c5b0:	788b      	ldrb	r3, [r1, #2]
    c5b2:	2b1f      	cmp	r3, #31
    c5b4:	4b04      	ldr	r3, [pc, #16]	; (c5c8 <AttHandler+0x1c>)
    c5b6:	bf8c      	ite	hi
    c5b8:	f8d3 3104 	ldrhi.w	r3, [r3, #260]	; 0x104
    c5bc:	f8d3 3100 	ldrls.w	r3, [r3, #256]	; 0x100
    c5c0:	689b      	ldr	r3, [r3, #8]
    c5c2:	4718      	bx	r3
    c5c4:	4770      	bx	lr
    c5c6:	bf00      	nop
    c5c8:	10002fd8 	.word	0x10002fd8

0000c5cc <AttRegister>:
    c5cc:	4b0a      	ldr	r3, [pc, #40]	; (c5f8 <AttRegister+0x2c>)
    c5ce:	b507      	push	{r0, r1, r2, lr}
    c5d0:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    c5d4:	f008 ff88 	bl	154e8 <HciGetMaxRxAclLen>
    c5d8:	4b08      	ldr	r3, [pc, #32]	; (c5fc <AttRegister+0x30>)
    c5da:	681b      	ldr	r3, [r3, #0]
    c5dc:	889b      	ldrh	r3, [r3, #4]
    c5de:	3803      	subs	r0, #3
    c5e0:	4298      	cmp	r0, r3
    c5e2:	dc06      	bgt.n	c5f2 <AttRegister+0x26>
    c5e4:	2200      	movs	r2, #0
    c5e6:	9200      	str	r2, [sp, #0]
    c5e8:	2302      	movs	r3, #2
    c5ea:	2152      	movs	r1, #82	; 0x52
    c5ec:	4610      	mov	r0, r2
    c5ee:	f7ff ff8d 	bl	c50c <attExecCallback>
    c5f2:	b003      	add	sp, #12
    c5f4:	f85d fb04 	ldr.w	pc, [sp], #4
    c5f8:	10002fd8 	.word	0x10002fd8
    c5fc:	1000239c 	.word	0x1000239c

0000c600 <AttConnRegister>:
    c600:	4b01      	ldr	r3, [pc, #4]	; (c608 <AttConnRegister+0x8>)
    c602:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    c606:	4770      	bx	lr
    c608:	10002fd8 	.word	0x10002fd8

0000c60c <AttGetMtu>:
    c60c:	4b02      	ldr	r3, [pc, #8]	; (c618 <AttGetMtu+0xc>)
    c60e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    c612:	f830 0c06 	ldrh.w	r0, [r0, #-6]
    c616:	4770      	bx	lr
    c618:	10002fd8 	.word	0x10002fd8

0000c61c <AttMsgAlloc>:
    c61c:	291b      	cmp	r1, #27
    c61e:	b508      	push	{r3, lr}
    c620:	d001      	beq.n	c626 <AttMsgAlloc+0xa>
    c622:	291d      	cmp	r1, #29
    c624:	d106      	bne.n	c634 <AttMsgAlloc+0x18>
    c626:	300b      	adds	r0, #11
    c628:	b280      	uxth	r0, r0
    c62a:	f7ff ff9d 	bl	c568 <attMsgAlloc>
    c62e:	b100      	cbz	r0, c632 <AttMsgAlloc+0x16>
    c630:	300b      	adds	r0, #11
    c632:	bd08      	pop	{r3, pc}
    c634:	2000      	movs	r0, #0
    c636:	e7fc      	b.n	c632 <AttMsgAlloc+0x16>

0000c638 <AttMsgFree>:
    c638:	291b      	cmp	r1, #27
    c63a:	d005      	beq.n	c648 <AttMsgFree+0x10>
    c63c:	291d      	cmp	r1, #29
    c63e:	d003      	beq.n	c648 <AttMsgFree+0x10>
    c640:	2300      	movs	r3, #0
    c642:	1ac0      	subs	r0, r0, r3
    c644:	f00b ba24 	b.w	17a90 <WsfMsgFree>
    c648:	230b      	movs	r3, #11
    c64a:	e7fa      	b.n	c642 <AttMsgFree+0xa>

0000c64c <attcSendSimpleReq>:
    c64c:	b570      	push	{r4, r5, r6, lr}
    c64e:	2300      	movs	r3, #0
    c650:	6945      	ldr	r5, [r0, #20]
    c652:	6143      	str	r3, [r0, #20]
    c654:	7c83      	ldrb	r3, [r0, #18]
    c656:	2b0a      	cmp	r3, #10
    c658:	4604      	mov	r4, r0
    c65a:	d008      	beq.n	c66e <attcSendSimpleReq+0x22>
    c65c:	2310      	movs	r3, #16
    c65e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    c662:	4b07      	ldr	r3, [pc, #28]	; (c680 <attcSendSimpleReq+0x34>)
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	3024      	adds	r0, #36	; 0x24
    c668:	7999      	ldrb	r1, [r3, #6]
    c66a:	f00b fbb3 	bl	17dd4 <WsfTimerStartSec>
    c66e:	6821      	ldr	r1, [r4, #0]
    c670:	882a      	ldrh	r2, [r5, #0]
    c672:	8b09      	ldrh	r1, [r1, #24]
    c674:	462b      	mov	r3, r5
    c676:	2004      	movs	r0, #4
    c678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c67c:	f003 bf46 	b.w	1050c <L2cDataReq>
    c680:	1000239c 	.word	0x1000239c

0000c684 <attcSendReq>:
    c684:	7c82      	ldrb	r2, [r0, #18]
    c686:	4b02      	ldr	r3, [pc, #8]	; (c690 <attcSendReq+0xc>)
    c688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c68c:	4718      	bx	r3
    c68e:	bf00      	nop
    c690:	00021e40 	.word	0x00021e40

0000c694 <attcSetupReq>:
    c694:	b430      	push	{r4, r5}
    c696:	460b      	mov	r3, r1
    c698:	4604      	mov	r4, r0
    c69a:	f100 0510 	add.w	r5, r0, #16
    c69e:	c907      	ldmia	r1, {r0, r1, r2}
    c6a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    c6a4:	685a      	ldr	r2, [r3, #4]
    c6a6:	e892 0003 	ldmia.w	r2, {r0, r1}
    c6aa:	f104 031c 	add.w	r3, r4, #28
    c6ae:	e883 0003 	stmia.w	r3, {r0, r1}
    c6b2:	4620      	mov	r0, r4
    c6b4:	bc30      	pop	{r4, r5}
    c6b6:	f7ff bfe5 	b.w	c684 <attcSendReq>

0000c6ba <attcCcbByConnId>:
    c6ba:	b510      	push	{r4, lr}
    c6bc:	4604      	mov	r4, r0
    c6be:	f002 ffe5 	bl	f68c <DmConnInUse>
    c6c2:	b120      	cbz	r0, c6ce <attcCcbByConnId+0x14>
    c6c4:	4b02      	ldr	r3, [pc, #8]	; (c6d0 <attcCcbByConnId+0x16>)
    c6c6:	3c01      	subs	r4, #1
    c6c8:	2038      	movs	r0, #56	; 0x38
    c6ca:	fb00 3004 	mla	r0, r0, r4, r3
    c6ce:	bd10      	pop	{r4, pc}
    c6d0:	100030ec 	.word	0x100030ec

0000c6d4 <attcCcbByHandle>:
    c6d4:	b508      	push	{r3, lr}
    c6d6:	f002 ffc5 	bl	f664 <DmConnIdByHandle>
    c6da:	b120      	cbz	r0, c6e6 <attcCcbByHandle+0x12>
    c6dc:	4b02      	ldr	r3, [pc, #8]	; (c6e8 <attcCcbByHandle+0x14>)
    c6de:	3801      	subs	r0, #1
    c6e0:	2238      	movs	r2, #56	; 0x38
    c6e2:	fb02 3000 	mla	r0, r2, r0, r3
    c6e6:	bd08      	pop	{r3, pc}
    c6e8:	100030ec 	.word	0x100030ec

0000c6ec <attcDataCback>:
    c6ec:	b570      	push	{r4, r5, r6, lr}
    c6ee:	460d      	mov	r5, r1
    c6f0:	4614      	mov	r4, r2
    c6f2:	f7ff ffef 	bl	c6d4 <attcCcbByHandle>
    c6f6:	4606      	mov	r6, r0
    c6f8:	b198      	cbz	r0, c722 <attcDataCback+0x36>
    c6fa:	7a23      	ldrb	r3, [r4, #8]
    c6fc:	2b19      	cmp	r3, #25
    c6fe:	d805      	bhi.n	c70c <attcDataCback+0x20>
    c700:	4622      	mov	r2, r4
    c702:	4629      	mov	r1, r5
    c704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c708:	f000 ba5e 	b.w	cbc8 <attcProcRsp>
    c70c:	2b1b      	cmp	r3, #27
    c70e:	d001      	beq.n	c714 <attcDataCback+0x28>
    c710:	2b1d      	cmp	r3, #29
    c712:	d106      	bne.n	c722 <attcDataCback+0x36>
    c714:	4622      	mov	r2, r4
    c716:	4629      	mov	r1, r5
    c718:	4630      	mov	r0, r6
    c71a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c71e:	f000 baaf 	b.w	cc80 <attcProcInd>
    c722:	bd70      	pop	{r4, r5, r6, pc}

0000c724 <attcFreePkt>:
    c724:	b510      	push	{r4, lr}
    c726:	4604      	mov	r4, r0
    c728:	6840      	ldr	r0, [r0, #4]
    c72a:	b118      	cbz	r0, c734 <attcFreePkt+0x10>
    c72c:	f00b f9b0 	bl	17a90 <WsfMsgFree>
    c730:	2300      	movs	r3, #0
    c732:	6063      	str	r3, [r4, #4]
    c734:	bd10      	pop	{r4, pc}

0000c736 <attcSendMtuReq>:
    c736:	b510      	push	{r4, lr}
    c738:	6803      	ldr	r3, [r0, #0]
    c73a:	7f5a      	ldrb	r2, [r3, #29]
    c73c:	4604      	mov	r4, r0
    c73e:	b12a      	cbz	r2, c74c <attcSendMtuReq+0x16>
    c740:	3010      	adds	r0, #16
    c742:	f7ff ffef 	bl	c724 <attcFreePkt>
    c746:	2300      	movs	r3, #0
    c748:	74a3      	strb	r3, [r4, #18]
    c74a:	bd10      	pop	{r4, pc}
    c74c:	2201      	movs	r2, #1
    c74e:	775a      	strb	r2, [r3, #29]
    c750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c754:	e77a      	b.n	c64c <attcSendSimpleReq>

0000c756 <attcExecCallback>:
    c756:	2901      	cmp	r1, #1
    c758:	b513      	push	{r0, r1, r4, lr}
    c75a:	d003      	beq.n	c764 <attcExecCallback+0xe>
    c75c:	2400      	movs	r4, #0
    c75e:	9400      	str	r4, [sp, #0]
    c760:	f7ff fed4 	bl	c50c <attExecCallback>
    c764:	b002      	add	sp, #8
    c766:	bd10      	pop	{r4, pc}

0000c768 <attcSendWriteCmd>:
    c768:	b510      	push	{r4, lr}
    c76a:	4604      	mov	r4, r0
    c76c:	f7ff ff6e 	bl	c64c <attcSendSimpleReq>
    c770:	6820      	ldr	r0, [r4, #0]
    c772:	8b22      	ldrh	r2, [r4, #24]
    c774:	7f00      	ldrb	r0, [r0, #28]
    c776:	2300      	movs	r3, #0
    c778:	210a      	movs	r1, #10
    c77a:	f7ff ffec 	bl	c756 <attcExecCallback>
    c77e:	2300      	movs	r3, #0
    c780:	74a3      	strb	r3, [r4, #18]
    c782:	bd10      	pop	{r4, pc}

0000c784 <attcReqClear>:
    c784:	b570      	push	{r4, r5, r6, lr}
    c786:	4606      	mov	r6, r0
    c788:	4608      	mov	r0, r1
    c78a:	460c      	mov	r4, r1
    c78c:	4615      	mov	r5, r2
    c78e:	f7ff ffc9 	bl	c724 <attcFreePkt>
    c792:	6830      	ldr	r0, [r6, #0]
    c794:	8922      	ldrh	r2, [r4, #8]
    c796:	78a1      	ldrb	r1, [r4, #2]
    c798:	7f00      	ldrb	r0, [r0, #28]
    c79a:	462b      	mov	r3, r5
    c79c:	f7ff ffdb 	bl	c756 <attcExecCallback>
    c7a0:	2300      	movs	r3, #0
    c7a2:	70a3      	strb	r3, [r4, #2]
    c7a4:	bd70      	pop	{r4, r5, r6, pc}

0000c7a6 <attcSendPrepWriteReq>:
    c7a6:	b570      	push	{r4, r5, r6, lr}
    c7a8:	7cc3      	ldrb	r3, [r0, #19]
    c7aa:	8b85      	ldrh	r5, [r0, #28]
    c7ac:	2b01      	cmp	r3, #1
    c7ae:	4604      	mov	r4, r0
    c7b0:	d149      	bne.n	c846 <attcSendPrepWriteReq+0xa0>
    c7b2:	6803      	ldr	r3, [r0, #0]
    c7b4:	8b5b      	ldrh	r3, [r3, #26]
    c7b6:	3b05      	subs	r3, #5
    c7b8:	429d      	cmp	r5, r3
    c7ba:	bfa8      	it	ge
    c7bc:	b29d      	uxthge	r5, r3
    c7be:	f105 000d 	add.w	r0, r5, #13
    c7c2:	b280      	uxth	r0, r0
    c7c4:	f7ff fed0 	bl	c568 <attMsgAlloc>
    c7c8:	4606      	mov	r6, r0
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d033      	beq.n	c836 <attcSendPrepWriteReq+0x90>
    c7ce:	6963      	ldr	r3, [r4, #20]
    c7d0:	4602      	mov	r2, r0
    c7d2:	f103 010c 	add.w	r1, r3, #12
    c7d6:	f853 0b04 	ldr.w	r0, [r3], #4
    c7da:	f842 0b04 	str.w	r0, [r2], #4
    c7de:	428b      	cmp	r3, r1
    c7e0:	d1f9      	bne.n	c7d6 <attcSendPrepWriteReq+0x30>
    c7e2:	781b      	ldrb	r3, [r3, #0]
    c7e4:	7013      	strb	r3, [r2, #0]
    c7e6:	6a21      	ldr	r1, [r4, #32]
    c7e8:	462a      	mov	r2, r5
    c7ea:	f106 000d 	add.w	r0, r6, #13
    c7ee:	f7ff fcb7 	bl	c160 <memcpy>
    c7f2:	6a23      	ldr	r3, [r4, #32]
    c7f4:	442b      	add	r3, r5
    c7f6:	6223      	str	r3, [r4, #32]
    c7f8:	8ba3      	ldrh	r3, [r4, #28]
    c7fa:	1b5b      	subs	r3, r3, r5
    c7fc:	83a3      	strh	r3, [r4, #28]
    c7fe:	8be3      	ldrh	r3, [r4, #30]
    c800:	72f3      	strb	r3, [r6, #11]
    c802:	8be3      	ldrh	r3, [r4, #30]
    c804:	0a1b      	lsrs	r3, r3, #8
    c806:	7333      	strb	r3, [r6, #12]
    c808:	8be3      	ldrh	r3, [r4, #30]
    c80a:	442b      	add	r3, r5
    c80c:	83e3      	strh	r3, [r4, #30]
    c80e:	2310      	movs	r3, #16
    c810:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    c814:	4b0e      	ldr	r3, [pc, #56]	; (c850 <attcSendPrepWriteReq+0xaa>)
    c816:	681b      	ldr	r3, [r3, #0]
    c818:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c81c:	7999      	ldrb	r1, [r3, #6]
    c81e:	f00b fad9 	bl	17dd4 <WsfTimerStartSec>
    c822:	6821      	ldr	r1, [r4, #0]
    c824:	1d6a      	adds	r2, r5, #5
    c826:	4633      	mov	r3, r6
    c828:	b292      	uxth	r2, r2
    c82a:	8b09      	ldrh	r1, [r1, #24]
    c82c:	2004      	movs	r0, #4
    c82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c832:	f003 be6b 	b.w	1050c <L2cDataReq>
    c836:	f104 0110 	add.w	r1, r4, #16
    c83a:	4620      	mov	r0, r4
    c83c:	2270      	movs	r2, #112	; 0x70
    c83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c842:	f7ff bf9f 	b.w	c784 <attcReqClear>
    c846:	2300      	movs	r3, #0
    c848:	6946      	ldr	r6, [r0, #20]
    c84a:	6143      	str	r3, [r0, #20]
    c84c:	e7d7      	b.n	c7fe <attcSendPrepWriteReq+0x58>
    c84e:	bf00      	nop
    c850:	1000239c 	.word	0x1000239c

0000c854 <attcSendContinuingReq>:
    c854:	b570      	push	{r4, r5, r6, lr}
    c856:	7cc3      	ldrb	r3, [r0, #19]
    c858:	6945      	ldr	r5, [r0, #20]
    c85a:	2b01      	cmp	r3, #1
    c85c:	4604      	mov	r4, r0
    c85e:	d12e      	bne.n	c8be <attcSendContinuingReq+0x6a>
    c860:	8828      	ldrh	r0, [r5, #0]
    c862:	3008      	adds	r0, #8
    c864:	b280      	uxth	r0, r0
    c866:	f7ff fe7f 	bl	c568 <attMsgAlloc>
    c86a:	4605      	mov	r5, r0
    c86c:	b1f8      	cbz	r0, c8ae <attcSendContinuingReq+0x5a>
    c86e:	6961      	ldr	r1, [r4, #20]
    c870:	880a      	ldrh	r2, [r1, #0]
    c872:	3208      	adds	r2, #8
    c874:	f7ff fc74 	bl	c160 <memcpy>
    c878:	7ca2      	ldrb	r2, [r4, #18]
    c87a:	7fa3      	ldrb	r3, [r4, #30]
    c87c:	2a06      	cmp	r2, #6
    c87e:	d121      	bne.n	c8c4 <attcSendContinuingReq+0x70>
    c880:	72eb      	strb	r3, [r5, #11]
    c882:	8be3      	ldrh	r3, [r4, #30]
    c884:	0a1b      	lsrs	r3, r3, #8
    c886:	732b      	strb	r3, [r5, #12]
    c888:	2310      	movs	r3, #16
    c88a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    c88e:	4b11      	ldr	r3, [pc, #68]	; (c8d4 <attcSendContinuingReq+0x80>)
    c890:	681b      	ldr	r3, [r3, #0]
    c892:	f104 0024 	add.w	r0, r4, #36	; 0x24
    c896:	7999      	ldrb	r1, [r3, #6]
    c898:	f00b fa9c 	bl	17dd4 <WsfTimerStartSec>
    c89c:	6821      	ldr	r1, [r4, #0]
    c89e:	882a      	ldrh	r2, [r5, #0]
    c8a0:	8b09      	ldrh	r1, [r1, #24]
    c8a2:	462b      	mov	r3, r5
    c8a4:	2004      	movs	r0, #4
    c8a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c8aa:	f003 be2f 	b.w	1050c <L2cDataReq>
    c8ae:	f104 0110 	add.w	r1, r4, #16
    c8b2:	4620      	mov	r0, r4
    c8b4:	2270      	movs	r2, #112	; 0x70
    c8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c8ba:	f7ff bf63 	b.w	c784 <attcReqClear>
    c8be:	2300      	movs	r3, #0
    c8c0:	6143      	str	r3, [r0, #20]
    c8c2:	e7d9      	b.n	c878 <attcSendContinuingReq+0x24>
    c8c4:	726b      	strb	r3, [r5, #9]
    c8c6:	8be3      	ldrh	r3, [r4, #30]
    c8c8:	0a1b      	lsrs	r3, r3, #8
    c8ca:	72ab      	strb	r3, [r5, #10]
    c8cc:	8c23      	ldrh	r3, [r4, #32]
    c8ce:	72eb      	strb	r3, [r5, #11]
    c8d0:	8c23      	ldrh	r3, [r4, #32]
    c8d2:	e7d7      	b.n	c884 <attcSendContinuingReq+0x30>
    c8d4:	1000239c 	.word	0x1000239c

0000c8d8 <attcConnCback>:
    c8d8:	788b      	ldrb	r3, [r1, #2]
    c8da:	2b27      	cmp	r3, #39	; 0x27
    c8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8e0:	4605      	mov	r5, r0
    c8e2:	d11a      	bne.n	c91a <attcConnCback+0x42>
    c8e4:	7f00      	ldrb	r0, [r0, #28]
    c8e6:	f002 ff49 	bl	f77c <DmConnRole>
    c8ea:	2800      	cmp	r0, #0
    c8ec:	d14c      	bne.n	c988 <attcConnCback+0xb0>
    c8ee:	4c27      	ldr	r4, [pc, #156]	; (c98c <attcConnCback+0xb4>)
    c8f0:	6823      	ldr	r3, [r4, #0]
    c8f2:	889e      	ldrh	r6, [r3, #4]
    c8f4:	f008 fdf8 	bl	154e8 <HciGetMaxRxAclLen>
    c8f8:	3804      	subs	r0, #4
    c8fa:	4286      	cmp	r6, r0
    c8fc:	da08      	bge.n	c910 <attcConnCback+0x38>
    c8fe:	6823      	ldr	r3, [r4, #0]
    c900:	8899      	ldrh	r1, [r3, #4]
    c902:	2917      	cmp	r1, #23
    c904:	d040      	beq.n	c988 <attcConnCback+0xb0>
    c906:	7f28      	ldrb	r0, [r5, #28]
    c908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c90c:	f000 ba9c 	b.w	ce48 <AttcMtuReq>
    c910:	f008 fdea 	bl	154e8 <HciGetMaxRxAclLen>
    c914:	1f01      	subs	r1, r0, #4
    c916:	b289      	uxth	r1, r1
    c918:	e7f3      	b.n	c902 <attcConnCback+0x2a>
    c91a:	2b28      	cmp	r3, #40	; 0x28
    c91c:	d134      	bne.n	c988 <attcConnCback+0xb0>
    c91e:	78cc      	ldrb	r4, [r1, #3]
    c920:	b904      	cbnz	r4, c924 <attcConnCback+0x4c>
    c922:	7a0c      	ldrb	r4, [r1, #8]
    c924:	7f2e      	ldrb	r6, [r5, #28]
    c926:	4d1a      	ldr	r5, [pc, #104]	; (c990 <attcConnCback+0xb8>)
    c928:	3e01      	subs	r6, #1
    c92a:	2738      	movs	r7, #56	; 0x38
    c92c:	4377      	muls	r7, r6
    c92e:	eb05 0807 	add.w	r8, r5, r7
    c932:	3420      	adds	r4, #32
    c934:	f898 3012 	ldrb.w	r3, [r8, #18]
    c938:	b2e4      	uxtb	r4, r4
    c93a:	b15b      	cbz	r3, c954 <attcConnCback+0x7c>
    c93c:	f107 0024 	add.w	r0, r7, #36	; 0x24
    c940:	4428      	add	r0, r5
    c942:	f00b fa6d 	bl	17e20 <WsfTimerStop>
    c946:	f107 0110 	add.w	r1, r7, #16
    c94a:	4622      	mov	r2, r4
    c94c:	4429      	add	r1, r5
    c94e:	4640      	mov	r0, r8
    c950:	f7ff ff18 	bl	c784 <attcReqClear>
    c954:	2338      	movs	r3, #56	; 0x38
    c956:	fb03 5306 	mla	r3, r3, r6, r5
    c95a:	799b      	ldrb	r3, [r3, #6]
    c95c:	b12b      	cbz	r3, c96a <attcConnCback+0x92>
    c95e:	1d39      	adds	r1, r7, #4
    c960:	4622      	mov	r2, r4
    c962:	4429      	add	r1, r5
    c964:	4640      	mov	r0, r8
    c966:	f7ff ff0d 	bl	c784 <attcReqClear>
    c96a:	2338      	movs	r3, #56	; 0x38
    c96c:	fb03 5606 	mla	r6, r3, r6, r5
    c970:	3630      	adds	r6, #48	; 0x30
    c972:	2300      	movs	r3, #0
    c974:	80b3      	strh	r3, [r6, #4]
    c976:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
    c97a:	b12b      	cbz	r3, c988 <attcConnCback+0xb0>
    c97c:	4621      	mov	r1, r4
    c97e:	4640      	mov	r0, r8
    c980:	685b      	ldr	r3, [r3, #4]
    c982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c986:	4718      	bx	r3
    c988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c98c:	1000239c 	.word	0x1000239c
    c990:	100030ec 	.word	0x100030ec

0000c994 <attcMsgCback>:
    c994:	b570      	push	{r4, r5, r6, lr}
    c996:	4605      	mov	r5, r0
    c998:	7800      	ldrb	r0, [r0, #0]
    c99a:	f7ff fe8e 	bl	c6ba <attcCcbByConnId>
    c99e:	78ab      	ldrb	r3, [r5, #2]
    c9a0:	4604      	mov	r4, r0
    c9a2:	b938      	cbnz	r0, c9b4 <attcMsgCback+0x20>
    c9a4:	3b01      	subs	r3, #1
    c9a6:	2b0c      	cmp	r3, #12
    c9a8:	d81b      	bhi.n	c9e2 <attcMsgCback+0x4e>
    c9aa:	4628      	mov	r0, r5
    c9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9b0:	f7ff beb8 	b.w	c724 <attcFreePkt>
    c9b4:	2b0c      	cmp	r3, #12
    c9b6:	d81a      	bhi.n	c9ee <attcMsgCback+0x5a>
    c9b8:	7983      	ldrb	r3, [r0, #6]
    c9ba:	b913      	cbnz	r3, c9c2 <attcMsgCback+0x2e>
    c9bc:	7c83      	ldrb	r3, [r0, #18]
    c9be:	2b01      	cmp	r3, #1
    c9c0:	d906      	bls.n	c9d0 <attcMsgCback+0x3c>
    c9c2:	2272      	movs	r2, #114	; 0x72
    c9c4:	4629      	mov	r1, r5
    c9c6:	4620      	mov	r0, r4
    c9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9cc:	f7ff beda 	b.w	c784 <attcReqClear>
    c9d0:	d002      	beq.n	c9d8 <attcMsgCback+0x44>
    c9d2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
    c9d6:	b12b      	cbz	r3, c9e4 <attcMsgCback+0x50>
    c9d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    c9dc:	3404      	adds	r4, #4
    c9de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    c9e2:	bd70      	pop	{r4, r5, r6, pc}
    c9e4:	4629      	mov	r1, r5
    c9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9ea:	f7ff be53 	b.w	c694 <attcSetupReq>
    c9ee:	f1a3 020d 	sub.w	r2, r3, #13
    c9f2:	2a01      	cmp	r2, #1
    c9f4:	d809      	bhi.n	ca0a <attcMsgCback+0x76>
    c9f6:	4b15      	ldr	r3, [pc, #84]	; (ca4c <attcMsgCback+0xb8>)
    c9f8:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
    c9fc:	2b00      	cmp	r3, #0
    c9fe:	d0f0      	beq.n	c9e2 <attcMsgCback+0x4e>
    ca00:	4629      	mov	r1, r5
    ca02:	681b      	ldr	r3, [r3, #0]
    ca04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca08:	4718      	bx	r3
    ca0a:	2b0f      	cmp	r3, #15
    ca0c:	d10f      	bne.n	ca2e <attcMsgCback+0x9a>
    ca0e:	7c83      	ldrb	r3, [r0, #18]
    ca10:	2b01      	cmp	r3, #1
    ca12:	d906      	bls.n	ca22 <attcMsgCback+0x8e>
    ca14:	3024      	adds	r0, #36	; 0x24
    ca16:	f00b fa03 	bl	17e20 <WsfTimerStop>
    ca1a:	2274      	movs	r2, #116	; 0x74
    ca1c:	f104 0110 	add.w	r1, r4, #16
    ca20:	e7d1      	b.n	c9c6 <attcMsgCback+0x32>
    ca22:	7983      	ldrb	r3, [r0, #6]
    ca24:	2b00      	cmp	r3, #0
    ca26:	d0dc      	beq.n	c9e2 <attcMsgCback+0x4e>
    ca28:	2274      	movs	r2, #116	; 0x74
    ca2a:	1d01      	adds	r1, r0, #4
    ca2c:	e7cc      	b.n	c9c8 <attcMsgCback+0x34>
    ca2e:	2b10      	cmp	r3, #16
    ca30:	d1d7      	bne.n	c9e2 <attcMsgCback+0x4e>
    ca32:	7c83      	ldrb	r3, [r0, #18]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d0d4      	beq.n	c9e2 <attcMsgCback+0x4e>
    ca38:	2271      	movs	r2, #113	; 0x71
    ca3a:	f100 0110 	add.w	r1, r0, #16
    ca3e:	f7ff fea1 	bl	c784 <attcReqClear>
    ca42:	6823      	ldr	r3, [r4, #0]
    ca44:	2201      	movs	r2, #1
    ca46:	77da      	strb	r2, [r3, #31]
    ca48:	e7cb      	b.n	c9e2 <attcMsgCback+0x4e>
    ca4a:	bf00      	nop
    ca4c:	100030ec 	.word	0x100030ec

0000ca50 <AttcInit>:
    ca50:	b510      	push	{r4, lr}
    ca52:	490c      	ldr	r1, [pc, #48]	; (ca84 <AttcInit+0x34>)
    ca54:	4a0c      	ldr	r2, [pc, #48]	; (ca88 <AttcInit+0x38>)
    ca56:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    ca5a:	2300      	movs	r3, #0
    ca5c:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
    ca60:	3238      	adds	r2, #56	; 0x38
    ca62:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    ca66:	3301      	adds	r3, #1
    ca68:	2b08      	cmp	r3, #8
    ca6a:	f842 4c38 	str.w	r4, [r2, #-56]
    ca6e:	f802 0c0c 	strb.w	r0, [r2, #-12]
    ca72:	f822 3c0a 	strh.w	r3, [r2, #-10]
    ca76:	f102 0238 	add.w	r2, r2, #56	; 0x38
    ca7a:	d1f2      	bne.n	ca62 <AttcInit+0x12>
    ca7c:	4b03      	ldr	r3, [pc, #12]	; (ca8c <AttcInit+0x3c>)
    ca7e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    ca82:	bd10      	pop	{r4, pc}
    ca84:	10002fd8 	.word	0x10002fd8
    ca88:	100030ec 	.word	0x100030ec
    ca8c:	00021e74 	.word	0x00021e74

0000ca90 <attcProcErrRsp>:
    ca90:	7c81      	ldrb	r1, [r0, #18]
    ca92:	7099      	strb	r1, [r3, #2]
    ca94:	1f48      	subs	r0, r1, #5
    ca96:	2801      	cmp	r0, #1
    ca98:	d908      	bls.n	caac <attcProcErrRsp+0x1c>
    ca9a:	f001 01fd 	and.w	r1, r1, #253	; 0xfd
    ca9e:	2909      	cmp	r1, #9
    caa0:	bf1f      	itttt	ne
    caa2:	7ad0      	ldrbne	r0, [r2, #11]
    caa4:	7a91      	ldrbne	r1, [r2, #10]
    caa6:	eb01 2100 	addne.w	r1, r1, r0, lsl #8
    caaa:	8159      	strhne	r1, [r3, #10]
    caac:	7b12      	ldrb	r2, [r2, #12]
    caae:	b11a      	cbz	r2, cab8 <attcProcErrRsp+0x28>
    cab0:	70da      	strb	r2, [r3, #3]
    cab2:	2200      	movs	r2, #0
    cab4:	811a      	strh	r2, [r3, #8]
    cab6:	4770      	bx	lr
    cab8:	2275      	movs	r2, #117	; 0x75
    caba:	e7f9      	b.n	cab0 <attcProcErrRsp+0x20>

0000cabc <attcProcFindOrReadRsp>:
    cabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cac0:	7c87      	ldrb	r7, [r0, #18]
    cac2:	7a55      	ldrb	r5, [r2, #9]
    cac4:	3108      	adds	r1, #8
    cac6:	2f02      	cmp	r7, #2
    cac8:	4411      	add	r1, r2
    caca:	f102 020a 	add.w	r2, r2, #10
    cace:	d12a      	bne.n	cb26 <attcProcFindOrReadRsp+0x6a>
    cad0:	2d01      	cmp	r5, #1
    cad2:	bf14      	ite	ne
    cad4:	2510      	movne	r5, #16
    cad6:	2502      	moveq	r5, #2
    cad8:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    cadc:	f64f 7eff 	movw	lr, #65535	; 0xffff
    cae0:	428a      	cmp	r2, r1
    cae2:	d210      	bcs.n	cb06 <attcProcFindOrReadRsp+0x4a>
    cae4:	7854      	ldrb	r4, [r2, #1]
    cae6:	7816      	ldrb	r6, [r2, #0]
    cae8:	eb06 2604 	add.w	r6, r6, r4, lsl #8
    caec:	b2b6      	uxth	r6, r6
    caee:	b146      	cbz	r6, cb02 <attcProcFindOrReadRsp+0x46>
    caf0:	f1bc 0f00 	cmp.w	ip, #0
    caf4:	d005      	beq.n	cb02 <attcProcFindOrReadRsp+0x46>
    caf6:	45b4      	cmp	ip, r6
    caf8:	d803      	bhi.n	cb02 <attcProcFindOrReadRsp+0x46>
    cafa:	f8b0 8020 	ldrh.w	r8, [r0, #32]
    cafe:	45b0      	cmp	r8, r6
    cb00:	d217      	bcs.n	cb32 <attcProcFindOrReadRsp+0x76>
    cb02:	2273      	movs	r2, #115	; 0x73
    cb04:	70da      	strb	r2, [r3, #3]
    cb06:	78db      	ldrb	r3, [r3, #3]
    cb08:	b95b      	cbnz	r3, cb22 <attcProcFindOrReadRsp+0x66>
    cb0a:	7cc3      	ldrb	r3, [r0, #19]
    cb0c:	2b01      	cmp	r3, #1
    cb0e:	d108      	bne.n	cb22 <attcProcFindOrReadRsp+0x66>
    cb10:	f1bc 0f00 	cmp.w	ip, #0
    cb14:	d003      	beq.n	cb1e <attcProcFindOrReadRsp+0x62>
    cb16:	8c03      	ldrh	r3, [r0, #32]
    cb18:	3301      	adds	r3, #1
    cb1a:	459c      	cmp	ip, r3
    cb1c:	d129      	bne.n	cb72 <attcProcFindOrReadRsp+0xb6>
    cb1e:	2300      	movs	r3, #0
    cb20:	74c3      	strb	r3, [r0, #19]
    cb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cb26:	2f04      	cmp	r7, #4
    cb28:	bf0c      	ite	eq
    cb2a:	3d02      	subeq	r5, #2
    cb2c:	3d04      	subne	r5, #4
    cb2e:	b2ed      	uxtb	r5, r5
    cb30:	e7d2      	b.n	cad8 <attcProcFindOrReadRsp+0x1c>
    cb32:	2f08      	cmp	r7, #8
    cb34:	d11a      	bne.n	cb6c <attcProcFindOrReadRsp+0xb0>
    cb36:	f892 9003 	ldrb.w	r9, [r2, #3]
    cb3a:	7894      	ldrb	r4, [r2, #2]
    cb3c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
    cb40:	b2a4      	uxth	r4, r4
    cb42:	3204      	adds	r2, #4
    cb44:	2c00      	cmp	r4, #0
    cb46:	d0dc      	beq.n	cb02 <attcProcFindOrReadRsp+0x46>
    cb48:	42a6      	cmp	r6, r4
    cb4a:	d8da      	bhi.n	cb02 <attcProcFindOrReadRsp+0x46>
    cb4c:	45a4      	cmp	ip, r4
    cb4e:	d8d8      	bhi.n	cb02 <attcProcFindOrReadRsp+0x46>
    cb50:	45a0      	cmp	r8, r4
    cb52:	d3d6      	bcc.n	cb02 <attcProcFindOrReadRsp+0x46>
    cb54:	4574      	cmp	r4, lr
    cb56:	bf18      	it	ne
    cb58:	3401      	addne	r4, #1
    cb5a:	442a      	add	r2, r5
    cb5c:	bf14      	ite	ne
    cb5e:	fa1f fc84 	uxthne.w	ip, r4
    cb62:	f04f 0c00 	moveq.w	ip, #0
    cb66:	4291      	cmp	r1, r2
    cb68:	d2ba      	bcs.n	cae0 <attcProcFindOrReadRsp+0x24>
    cb6a:	e7ca      	b.n	cb02 <attcProcFindOrReadRsp+0x46>
    cb6c:	3202      	adds	r2, #2
    cb6e:	4634      	mov	r4, r6
    cb70:	e7f0      	b.n	cb54 <attcProcFindOrReadRsp+0x98>
    cb72:	f8a0 c01e 	strh.w	ip, [r0, #30]
    cb76:	f8a0 c018 	strh.w	ip, [r0, #24]
    cb7a:	e7d2      	b.n	cb22 <attcProcFindOrReadRsp+0x66>

0000cb7c <attcProcReadRsp>:
    cb7c:	4770      	bx	lr

0000cb7e <attcProcWriteRsp>:
    cb7e:	2200      	movs	r2, #0
    cb80:	811a      	strh	r2, [r3, #8]
    cb82:	4770      	bx	lr

0000cb84 <attcProcMtuRsp>:
    cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb86:	7a93      	ldrb	r3, [r2, #10]
    cb88:	7a54      	ldrb	r4, [r2, #9]
    cb8a:	4d0e      	ldr	r5, [pc, #56]	; (cbc4 <attcProcMtuRsp+0x40>)
    cb8c:	6806      	ldr	r6, [r0, #0]
    cb8e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    cb92:	b2a4      	uxth	r4, r4
    cb94:	682b      	ldr	r3, [r5, #0]
    cb96:	2c17      	cmp	r4, #23
    cb98:	bf38      	it	cc
    cb9a:	2417      	movcc	r4, #23
    cb9c:	889f      	ldrh	r7, [r3, #4]
    cb9e:	f008 fca3 	bl	154e8 <HciGetMaxRxAclLen>
    cba2:	3804      	subs	r0, #4
    cba4:	4287      	cmp	r7, r0
    cba6:	da07      	bge.n	cbb8 <attcProcMtuRsp+0x34>
    cba8:	682b      	ldr	r3, [r5, #0]
    cbaa:	889a      	ldrh	r2, [r3, #4]
    cbac:	4621      	mov	r1, r4
    cbae:	4630      	mov	r0, r6
    cbb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cbb4:	f7ff bcc6 	b.w	c544 <attSetMtu>
    cbb8:	f008 fc96 	bl	154e8 <HciGetMaxRxAclLen>
    cbbc:	1f02      	subs	r2, r0, #4
    cbbe:	b292      	uxth	r2, r2
    cbc0:	e7f4      	b.n	cbac <attcProcMtuRsp+0x28>
    cbc2:	bf00      	nop
    cbc4:	1000239c 	.word	0x1000239c

0000cbc8 <attcProcRsp>:
    cbc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cbcc:	460f      	mov	r7, r1
    cbce:	7c81      	ldrb	r1, [r0, #18]
    cbd0:	4604      	mov	r4, r0
    cbd2:	4616      	mov	r6, r2
    cbd4:	2900      	cmp	r1, #0
    cbd6:	d042      	beq.n	cc5e <attcProcRsp+0x96>
    cbd8:	7a13      	ldrb	r3, [r2, #8]
    cbda:	105b      	asrs	r3, r3, #1
    cbdc:	b2da      	uxtb	r2, r3
    cbde:	f88d 2002 	strb.w	r2, [sp, #2]
    cbe2:	b10b      	cbz	r3, cbe8 <attcProcRsp+0x20>
    cbe4:	4291      	cmp	r1, r2
    cbe6:	d13a      	bne.n	cc5e <attcProcRsp+0x96>
    cbe8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    cbec:	f00b f918 	bl	17e20 <WsfTimerStop>
    cbf0:	f106 0309 	add.w	r3, r6, #9
    cbf4:	9301      	str	r3, [sp, #4]
    cbf6:	1e7b      	subs	r3, r7, #1
    cbf8:	f8ad 3008 	strh.w	r3, [sp, #8]
    cbfc:	8b23      	ldrh	r3, [r4, #24]
    cbfe:	f89d 2002 	ldrb.w	r2, [sp, #2]
    cc02:	f8ad 300a 	strh.w	r3, [sp, #10]
    cc06:	4b1c      	ldr	r3, [pc, #112]	; (cc78 <attcProcRsp+0xb0>)
    cc08:	2500      	movs	r5, #0
    cc0a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    cc0e:	f88d 5003 	strb.w	r5, [sp, #3]
    cc12:	466b      	mov	r3, sp
    cc14:	4632      	mov	r2, r6
    cc16:	4639      	mov	r1, r7
    cc18:	4620      	mov	r0, r4
    cc1a:	47c0      	blx	r8
    cc1c:	7ce3      	ldrb	r3, [r4, #19]
    cc1e:	b113      	cbz	r3, cc26 <attcProcRsp+0x5e>
    cc20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cc24:	b123      	cbz	r3, cc30 <attcProcRsp+0x68>
    cc26:	74a5      	strb	r5, [r4, #18]
    cc28:	f104 0010 	add.w	r0, r4, #16
    cc2c:	f7ff fd7a 	bl	c724 <attcFreePkt>
    cc30:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cc34:	2b01      	cmp	r3, #1
    cc36:	d00a      	beq.n	cc4e <attcProcRsp+0x86>
    cc38:	7ce3      	ldrb	r3, [r4, #19]
    cc3a:	f88d 300c 	strb.w	r3, [sp, #12]
    cc3e:	8a23      	ldrh	r3, [r4, #16]
    cc40:	f8ad 3000 	strh.w	r3, [sp]
    cc44:	4b0d      	ldr	r3, [pc, #52]	; (cc7c <attcProcRsp+0xb4>)
    cc46:	4668      	mov	r0, sp
    cc48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    cc4c:	4798      	blx	r3
    cc4e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    cc52:	b923      	cbnz	r3, cc5e <attcProcRsp+0x96>
    cc54:	6965      	ldr	r5, [r4, #20]
    cc56:	b12d      	cbz	r5, cc64 <attcProcRsp+0x9c>
    cc58:	4620      	mov	r0, r4
    cc5a:	f7ff fd13 	bl	c684 <attcSendReq>
    cc5e:	b004      	add	sp, #16
    cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc64:	79a3      	ldrb	r3, [r4, #6]
    cc66:	2b00      	cmp	r3, #0
    cc68:	d0f9      	beq.n	cc5e <attcProcRsp+0x96>
    cc6a:	1d21      	adds	r1, r4, #4
    cc6c:	4620      	mov	r0, r4
    cc6e:	f7ff fd11 	bl	c694 <attcSetupReq>
    cc72:	71a5      	strb	r5, [r4, #6]
    cc74:	e7f3      	b.n	cc5e <attcProcRsp+0x96>
    cc76:	bf00      	nop
    cc78:	00021e84 	.word	0x00021e84
    cc7c:	10002fd8 	.word	0x10002fd8

0000cc80 <attcProcInd>:
    cc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cc82:	7a13      	ldrb	r3, [r2, #8]
    cc84:	4604      	mov	r4, r0
    cc86:	105b      	asrs	r3, r3, #1
    cc88:	7a90      	ldrb	r0, [r2, #10]
    cc8a:	f88d 3002 	strb.w	r3, [sp, #2]
    cc8e:	320b      	adds	r2, #11
    cc90:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    cc94:	9201      	str	r2, [sp, #4]
    cc96:	6822      	ldr	r2, [r4, #0]
    cc98:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    cc9c:	7f12      	ldrb	r2, [r2, #28]
    cc9e:	f8ad 2000 	strh.w	r2, [sp]
    cca2:	b29b      	uxth	r3, r3
    cca4:	2200      	movs	r2, #0
    cca6:	3903      	subs	r1, #3
    cca8:	f8ad 300a 	strh.w	r3, [sp, #10]
    ccac:	f8ad 1008 	strh.w	r1, [sp, #8]
    ccb0:	f88d 2003 	strb.w	r2, [sp, #3]
    ccb4:	f88d 200c 	strb.w	r2, [sp, #12]
    ccb8:	b123      	cbz	r3, ccc4 <attcProcInd+0x44>
    ccba:	4b0f      	ldr	r3, [pc, #60]	; (ccf8 <attcProcInd+0x78>)
    ccbc:	4668      	mov	r0, sp
    ccbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    ccc2:	4798      	blx	r3
    ccc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ccc8:	2b0e      	cmp	r3, #14
    ccca:	d10f      	bne.n	ccec <attcProcInd+0x6c>
    cccc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    ccd0:	b973      	cbnz	r3, ccf0 <attcProcInd+0x70>
    ccd2:	2009      	movs	r0, #9
    ccd4:	f7ff fc48 	bl	c568 <attMsgAlloc>
    ccd8:	4603      	mov	r3, r0
    ccda:	b138      	cbz	r0, ccec <attcProcInd+0x6c>
    ccdc:	221e      	movs	r2, #30
    ccde:	7202      	strb	r2, [r0, #8]
    cce0:	6821      	ldr	r1, [r4, #0]
    cce2:	2201      	movs	r2, #1
    cce4:	8b09      	ldrh	r1, [r1, #24]
    cce6:	2004      	movs	r0, #4
    cce8:	f003 fc10 	bl	1050c <L2cDataReq>
    ccec:	b004      	add	sp, #16
    ccee:	bd10      	pop	{r4, pc}
    ccf0:	2301      	movs	r3, #1
    ccf2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    ccf6:	e7f9      	b.n	ccec <attcProcInd+0x6c>
    ccf8:	10002fd8 	.word	0x10002fd8

0000ccfc <attcSendMsg>:
    ccfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd00:	4605      	mov	r5, r0
    cd02:	460f      	mov	r7, r1
    cd04:	4616      	mov	r6, r2
    cd06:	461c      	mov	r4, r3
    cd08:	f89d 8020 	ldrb.w	r8, [sp, #32]
    cd0c:	f00d fb6c 	bl	1a3e8 <WsfTaskLock>
    cd10:	4628      	mov	r0, r5
    cd12:	f7ff fcd2 	bl	c6ba <attcCcbByConnId>
    cd16:	b920      	cbnz	r0, cd22 <attcSendMsg+0x26>
    cd18:	f00d fb6c 	bl	1a3f4 <WsfTaskUnlock>
    cd1c:	bb7c      	cbnz	r4, cd7e <attcSendMsg+0x82>
    cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd22:	6803      	ldr	r3, [r0, #0]
    cd24:	f8b3 901a 	ldrh.w	r9, [r3, #26]
    cd28:	f00d fb64 	bl	1a3f4 <WsfTaskUnlock>
    cd2c:	f1b9 0f00 	cmp.w	r9, #0
    cd30:	d0f4      	beq.n	cd1c <attcSendMsg+0x20>
    cd32:	b124      	cbz	r4, cd3e <attcSendMsg+0x42>
    cd34:	2e0b      	cmp	r6, #11
    cd36:	d015      	beq.n	cd64 <attcSendMsg+0x68>
    cd38:	8823      	ldrh	r3, [r4, #0]
    cd3a:	454b      	cmp	r3, r9
    cd3c:	d819      	bhi.n	cd72 <attcSendMsg+0x76>
    cd3e:	200c      	movs	r0, #12
    cd40:	f00a fe8f 	bl	17a62 <WsfMsgAlloc>
    cd44:	4601      	mov	r1, r0
    cd46:	2800      	cmp	r0, #0
    cd48:	d0e8      	beq.n	cd1c <attcSendMsg+0x20>
    cd4a:	4b0f      	ldr	r3, [pc, #60]	; (cd88 <attcSendMsg+0x8c>)
    cd4c:	8005      	strh	r5, [r0, #0]
    cd4e:	f880 8003 	strb.w	r8, [r0, #3]
    cd52:	7086      	strb	r6, [r0, #2]
    cd54:	6044      	str	r4, [r0, #4]
    cd56:	8107      	strh	r7, [r0, #8]
    cd58:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    cd5c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd60:	f00a bea3 	b.w	17aaa <WsfMsgSend>
    cd64:	f1b8 0f00 	cmp.w	r8, #0
    cd68:	d1e9      	bne.n	cd3e <attcSendMsg+0x42>
    cd6a:	8823      	ldrh	r3, [r4, #0]
    cd6c:	3305      	adds	r3, #5
    cd6e:	b29b      	uxth	r3, r3
    cd70:	e7e3      	b.n	cd3a <attcSendMsg+0x3e>
    cd72:	2377      	movs	r3, #119	; 0x77
    cd74:	463a      	mov	r2, r7
    cd76:	4631      	mov	r1, r6
    cd78:	4628      	mov	r0, r5
    cd7a:	f7ff fcec 	bl	c756 <attcExecCallback>
    cd7e:	4620      	mov	r0, r4
    cd80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd84:	f00a be84 	b.w	17a90 <WsfMsgFree>
    cd88:	10002fd8 	.word	0x10002fd8

0000cd8c <AttcFindInfoReq>:
    cd8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cd8e:	4605      	mov	r5, r0
    cd90:	200d      	movs	r0, #13
    cd92:	460c      	mov	r4, r1
    cd94:	4617      	mov	r7, r2
    cd96:	461e      	mov	r6, r3
    cd98:	f7ff fbe6 	bl	c568 <attMsgAlloc>
    cd9c:	b160      	cbz	r0, cdb8 <AttcFindInfoReq+0x2c>
    cd9e:	2305      	movs	r3, #5
    cda0:	8003      	strh	r3, [r0, #0]
    cda2:	2304      	movs	r3, #4
    cda4:	7203      	strb	r3, [r0, #8]
    cda6:	8044      	strh	r4, [r0, #2]
    cda8:	8087      	strh	r7, [r0, #4]
    cdaa:	4603      	mov	r3, r0
    cdac:	9600      	str	r6, [sp, #0]
    cdae:	2202      	movs	r2, #2
    cdb0:	4621      	mov	r1, r4
    cdb2:	4628      	mov	r0, r5
    cdb4:	f7ff ffa2 	bl	ccfc <attcSendMsg>
    cdb8:	b003      	add	sp, #12
    cdba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cdbc <AttcReadReq>:
    cdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cdbe:	4605      	mov	r5, r0
    cdc0:	200b      	movs	r0, #11
    cdc2:	460c      	mov	r4, r1
    cdc4:	f7ff fbd0 	bl	c568 <attMsgAlloc>
    cdc8:	4603      	mov	r3, r0
    cdca:	b168      	cbz	r0, cde8 <AttcReadReq+0x2c>
    cdcc:	2203      	movs	r2, #3
    cdce:	8002      	strh	r2, [r0, #0]
    cdd0:	220a      	movs	r2, #10
    cdd2:	7202      	strb	r2, [r0, #8]
    cdd4:	0a22      	lsrs	r2, r4, #8
    cdd6:	7282      	strb	r2, [r0, #10]
    cdd8:	2200      	movs	r2, #0
    cdda:	7244      	strb	r4, [r0, #9]
    cddc:	4621      	mov	r1, r4
    cdde:	9200      	str	r2, [sp, #0]
    cde0:	4628      	mov	r0, r5
    cde2:	2205      	movs	r2, #5
    cde4:	f7ff ff8a 	bl	ccfc <attcSendMsg>
    cde8:	b003      	add	sp, #12
    cdea:	bd30      	pop	{r4, r5, pc}

0000cdec <AttcWriteReq>:
    cdec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cdf0:	4607      	mov	r7, r0
    cdf2:	f102 000b 	add.w	r0, r2, #11
    cdf6:	b280      	uxth	r0, r0
    cdf8:	460d      	mov	r5, r1
    cdfa:	4616      	mov	r6, r2
    cdfc:	4698      	mov	r8, r3
    cdfe:	f7ff fbb3 	bl	c568 <attMsgAlloc>
    ce02:	4604      	mov	r4, r0
    ce04:	b198      	cbz	r0, ce2e <AttcWriteReq+0x42>
    ce06:	1cf3      	adds	r3, r6, #3
    ce08:	8003      	strh	r3, [r0, #0]
    ce0a:	2312      	movs	r3, #18
    ce0c:	7203      	strb	r3, [r0, #8]
    ce0e:	0a2b      	lsrs	r3, r5, #8
    ce10:	7283      	strb	r3, [r0, #10]
    ce12:	7245      	strb	r5, [r0, #9]
    ce14:	4632      	mov	r2, r6
    ce16:	4641      	mov	r1, r8
    ce18:	300b      	adds	r0, #11
    ce1a:	f7ff f9a1 	bl	c160 <memcpy>
    ce1e:	2300      	movs	r3, #0
    ce20:	9300      	str	r3, [sp, #0]
    ce22:	2209      	movs	r2, #9
    ce24:	4623      	mov	r3, r4
    ce26:	4629      	mov	r1, r5
    ce28:	4638      	mov	r0, r7
    ce2a:	f7ff ff67 	bl	ccfc <attcSendMsg>
    ce2e:	b002      	add	sp, #8
    ce30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ce34 <AttcCancelReq>:
    ce34:	b507      	push	{r0, r1, r2, lr}
    ce36:	2300      	movs	r3, #0
    ce38:	9300      	str	r3, [sp, #0]
    ce3a:	220f      	movs	r2, #15
    ce3c:	4619      	mov	r1, r3
    ce3e:	f7ff ff5d 	bl	ccfc <attcSendMsg>
    ce42:	b003      	add	sp, #12
    ce44:	f85d fb04 	ldr.w	pc, [sp], #4

0000ce48 <AttcMtuReq>:
    ce48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce4a:	4605      	mov	r5, r0
    ce4c:	200b      	movs	r0, #11
    ce4e:	460c      	mov	r4, r1
    ce50:	f7ff fb8a 	bl	c568 <attMsgAlloc>
    ce54:	4603      	mov	r3, r0
    ce56:	b160      	cbz	r0, ce72 <AttcMtuReq+0x2a>
    ce58:	2203      	movs	r2, #3
    ce5a:	8002      	strh	r2, [r0, #0]
    ce5c:	7244      	strb	r4, [r0, #9]
    ce5e:	2202      	movs	r2, #2
    ce60:	0a24      	lsrs	r4, r4, #8
    ce62:	2100      	movs	r1, #0
    ce64:	7202      	strb	r2, [r0, #8]
    ce66:	7284      	strb	r4, [r0, #10]
    ce68:	2201      	movs	r2, #1
    ce6a:	9100      	str	r1, [sp, #0]
    ce6c:	4628      	mov	r0, r5
    ce6e:	f7ff ff45 	bl	ccfc <attcSendMsg>
    ce72:	b003      	add	sp, #12
    ce74:	bd30      	pop	{r4, r5, pc}
    ce76:	bf00      	nop

0000ce78 <attcProcFindByTypeRsp>:
    ce78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce7a:	3108      	adds	r1, #8
    ce7c:	8bc5      	ldrh	r5, [r0, #30]
    ce7e:	f102 0609 	add.w	r6, r2, #9
    ce82:	440a      	add	r2, r1
    ce84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ce88:	4296      	cmp	r6, r2
    ce8a:	d217      	bcs.n	cebc <attcProcFindByTypeRsp+0x44>
    ce8c:	7874      	ldrb	r4, [r6, #1]
    ce8e:	7837      	ldrb	r7, [r6, #0]
    ce90:	f896 c003 	ldrb.w	ip, [r6, #3]
    ce94:	eb07 2704 	add.w	r7, r7, r4, lsl #8
    ce98:	78b4      	ldrb	r4, [r6, #2]
    ce9a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    ce9e:	b2bf      	uxth	r7, r7
    cea0:	b2a4      	uxth	r4, r4
    cea2:	42a7      	cmp	r7, r4
    cea4:	f106 0604 	add.w	r6, r6, #4
    cea8:	d806      	bhi.n	ceb8 <attcProcFindByTypeRsp+0x40>
    ceaa:	42bd      	cmp	r5, r7
    ceac:	d804      	bhi.n	ceb8 <attcProcFindByTypeRsp+0x40>
    ceae:	f8b0 c020 	ldrh.w	ip, [r0, #32]
    ceb2:	45bc      	cmp	ip, r7
    ceb4:	d300      	bcc.n	ceb8 <attcProcFindByTypeRsp+0x40>
    ceb6:	b96d      	cbnz	r5, ced4 <attcProcFindByTypeRsp+0x5c>
    ceb8:	2273      	movs	r2, #115	; 0x73
    ceba:	70da      	strb	r2, [r3, #3]
    cebc:	78db      	ldrb	r3, [r3, #3]
    cebe:	b943      	cbnz	r3, ced2 <attcProcFindByTypeRsp+0x5a>
    cec0:	7cc3      	ldrb	r3, [r0, #19]
    cec2:	2b01      	cmp	r3, #1
    cec4:	d105      	bne.n	ced2 <attcProcFindByTypeRsp+0x5a>
    cec6:	b115      	cbz	r5, cece <attcProcFindByTypeRsp+0x56>
    cec8:	8c03      	ldrh	r3, [r0, #32]
    ceca:	42ab      	cmp	r3, r5
    cecc:	d20a      	bcs.n	cee4 <attcProcFindByTypeRsp+0x6c>
    cece:	2300      	movs	r3, #0
    ced0:	74c3      	strb	r3, [r0, #19]
    ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ced4:	428c      	cmp	r4, r1
    ced6:	bf1a      	itte	ne
    ced8:	3401      	addne	r4, #1
    ceda:	b2a5      	uxthne	r5, r4
    cedc:	2500      	moveq	r5, #0
    cede:	42b2      	cmp	r2, r6
    cee0:	d2d2      	bcs.n	ce88 <attcProcFindByTypeRsp+0x10>
    cee2:	e7e9      	b.n	ceb8 <attcProcFindByTypeRsp+0x40>
    cee4:	83c5      	strh	r5, [r0, #30]
    cee6:	8305      	strh	r5, [r0, #24]
    cee8:	e7f3      	b.n	ced2 <attcProcFindByTypeRsp+0x5a>

0000ceea <attcProcReadLongRsp>:
    ceea:	7cc2      	ldrb	r2, [r0, #19]
    ceec:	2a01      	cmp	r2, #1
    ceee:	d10a      	bne.n	cf06 <attcProcReadLongRsp+0x1c>
    cef0:	6802      	ldr	r2, [r0, #0]
    cef2:	8b52      	ldrh	r2, [r2, #26]
    cef4:	428a      	cmp	r2, r1
    cef6:	d902      	bls.n	cefe <attcProcReadLongRsp+0x14>
    cef8:	2300      	movs	r3, #0
    cefa:	74c3      	strb	r3, [r0, #19]
    cefc:	4770      	bx	lr
    cefe:	8bc2      	ldrh	r2, [r0, #30]
    cf00:	891b      	ldrh	r3, [r3, #8]
    cf02:	4413      	add	r3, r2
    cf04:	83c3      	strh	r3, [r0, #30]
    cf06:	4770      	bx	lr

0000cf08 <AttcFindByTypeValueReq>:
    cf08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf0c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    cf10:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    cf14:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    cf18:	4680      	mov	r8, r0
    cf1a:	f106 000f 	add.w	r0, r6, #15
    cf1e:	b280      	uxth	r0, r0
    cf20:	460f      	mov	r7, r1
    cf22:	4693      	mov	fp, r2
    cf24:	461d      	mov	r5, r3
    cf26:	f7ff fb1f 	bl	c568 <attMsgAlloc>
    cf2a:	4604      	mov	r4, r0
    cf2c:	b1c8      	cbz	r0, cf62 <AttcFindByTypeValueReq+0x5a>
    cf2e:	1df3      	adds	r3, r6, #7
    cf30:	8003      	strh	r3, [r0, #0]
    cf32:	7345      	strb	r5, [r0, #13]
    cf34:	2306      	movs	r3, #6
    cf36:	0a2d      	lsrs	r5, r5, #8
    cf38:	8047      	strh	r7, [r0, #2]
    cf3a:	f8a0 b004 	strh.w	fp, [r0, #4]
    cf3e:	7203      	strb	r3, [r0, #8]
    cf40:	7385      	strb	r5, [r0, #14]
    cf42:	4632      	mov	r2, r6
    cf44:	4651      	mov	r1, sl
    cf46:	300f      	adds	r0, #15
    cf48:	f7ff f90a 	bl	c160 <memcpy>
    cf4c:	4623      	mov	r3, r4
    cf4e:	2203      	movs	r2, #3
    cf50:	4639      	mov	r1, r7
    cf52:	4640      	mov	r0, r8
    cf54:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    cf58:	b001      	add	sp, #4
    cf5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf5e:	f7ff becd 	b.w	ccfc <attcSendMsg>
    cf62:	b001      	add	sp, #4
    cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cf68 <AttcReadByTypeReq>:
    cf68:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf6c:	b29d      	uxth	r5, r3
    cf6e:	4680      	mov	r8, r0
    cf70:	f105 000d 	add.w	r0, r5, #13
    cf74:	460e      	mov	r6, r1
    cf76:	4693      	mov	fp, r2
    cf78:	461f      	mov	r7, r3
    cf7a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    cf7e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    cf82:	f7ff faf1 	bl	c568 <attMsgAlloc>
    cf86:	4604      	mov	r4, r0
    cf88:	b1b0      	cbz	r0, cfb8 <AttcReadByTypeReq+0x50>
    cf8a:	2308      	movs	r3, #8
    cf8c:	3505      	adds	r5, #5
    cf8e:	8005      	strh	r5, [r0, #0]
    cf90:	8046      	strh	r6, [r0, #2]
    cf92:	f8a0 b004 	strh.w	fp, [r0, #4]
    cf96:	7203      	strb	r3, [r0, #8]
    cf98:	463a      	mov	r2, r7
    cf9a:	4651      	mov	r1, sl
    cf9c:	300d      	adds	r0, #13
    cf9e:	f7ff f8df 	bl	c160 <memcpy>
    cfa2:	4623      	mov	r3, r4
    cfa4:	2204      	movs	r2, #4
    cfa6:	4631      	mov	r1, r6
    cfa8:	4640      	mov	r0, r8
    cfaa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    cfae:	b001      	add	sp, #4
    cfb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfb4:	f7ff bea2 	b.w	ccfc <attcSendMsg>
    cfb8:	b001      	add	sp, #4
    cfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cfbe <AttcReadLongReq>:
    cfbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cfc0:	4605      	mov	r5, r0
    cfc2:	200d      	movs	r0, #13
    cfc4:	460c      	mov	r4, r1
    cfc6:	4617      	mov	r7, r2
    cfc8:	461e      	mov	r6, r3
    cfca:	f7ff facd 	bl	c568 <attMsgAlloc>
    cfce:	b170      	cbz	r0, cfee <AttcReadLongReq+0x30>
    cfd0:	2305      	movs	r3, #5
    cfd2:	8003      	strh	r3, [r0, #0]
    cfd4:	230c      	movs	r3, #12
    cfd6:	7203      	strb	r3, [r0, #8]
    cfd8:	0a23      	lsrs	r3, r4, #8
    cfda:	7283      	strb	r3, [r0, #10]
    cfdc:	8047      	strh	r7, [r0, #2]
    cfde:	7244      	strb	r4, [r0, #9]
    cfe0:	4603      	mov	r3, r0
    cfe2:	9600      	str	r6, [sp, #0]
    cfe4:	2206      	movs	r2, #6
    cfe6:	4621      	mov	r1, r4
    cfe8:	4628      	mov	r0, r5
    cfea:	f7ff fe87 	bl	ccfc <attcSendMsg>
    cfee:	b003      	add	sp, #12
    cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cff2 <AttcReadMultipleReq>:
    cff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cff4:	004e      	lsls	r6, r1, #1
    cff6:	4607      	mov	r7, r0
    cff8:	f106 0009 	add.w	r0, r6, #9
    cffc:	460d      	mov	r5, r1
    cffe:	4614      	mov	r4, r2
    d000:	f7ff fab2 	bl	c568 <attMsgAlloc>
    d004:	4603      	mov	r3, r0
    d006:	b1a0      	cbz	r0, d032 <AttcReadMultipleReq+0x40>
    d008:	3601      	adds	r6, #1
    d00a:	4622      	mov	r2, r4
    d00c:	8006      	strh	r6, [r0, #0]
    d00e:	200e      	movs	r0, #14
    d010:	f832 1902 	ldrh.w	r1, [r2], #-2
    d014:	7218      	strb	r0, [r3, #8]
    d016:	f103 0009 	add.w	r0, r3, #9
    d01a:	3d01      	subs	r5, #1
    d01c:	b2ed      	uxtb	r5, r5
    d01e:	2dff      	cmp	r5, #255	; 0xff
    d020:	f100 0002 	add.w	r0, r0, #2
    d024:	d107      	bne.n	d036 <AttcReadMultipleReq+0x44>
    d026:	2200      	movs	r2, #0
    d028:	9200      	str	r2, [sp, #0]
    d02a:	4638      	mov	r0, r7
    d02c:	2207      	movs	r2, #7
    d02e:	f7ff fe65 	bl	ccfc <attcSendMsg>
    d032:	b003      	add	sp, #12
    d034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d036:	f832 4f02 	ldrh.w	r4, [r2, #2]!
    d03a:	f800 4c02 	strb.w	r4, [r0, #-2]
    d03e:	8814      	ldrh	r4, [r2, #0]
    d040:	0a24      	lsrs	r4, r4, #8
    d042:	f800 4c01 	strb.w	r4, [r0, #-1]
    d046:	e7e8      	b.n	d01a <AttcReadMultipleReq+0x28>

0000d048 <AttcReadByGroupTypeReq>:
    d048:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d04c:	b29d      	uxth	r5, r3
    d04e:	4680      	mov	r8, r0
    d050:	f105 000d 	add.w	r0, r5, #13
    d054:	460e      	mov	r6, r1
    d056:	4693      	mov	fp, r2
    d058:	461f      	mov	r7, r3
    d05a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    d05e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    d062:	f7ff fa81 	bl	c568 <attMsgAlloc>
    d066:	4604      	mov	r4, r0
    d068:	b1b0      	cbz	r0, d098 <AttcReadByGroupTypeReq+0x50>
    d06a:	2310      	movs	r3, #16
    d06c:	3505      	adds	r5, #5
    d06e:	8005      	strh	r5, [r0, #0]
    d070:	8046      	strh	r6, [r0, #2]
    d072:	f8a0 b004 	strh.w	fp, [r0, #4]
    d076:	7203      	strb	r3, [r0, #8]
    d078:	463a      	mov	r2, r7
    d07a:	4651      	mov	r1, sl
    d07c:	300d      	adds	r0, #13
    d07e:	f7ff f86f 	bl	c160 <memcpy>
    d082:	4623      	mov	r3, r4
    d084:	2208      	movs	r2, #8
    d086:	4631      	mov	r1, r6
    d088:	4640      	mov	r0, r8
    d08a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d08e:	b001      	add	sp, #4
    d090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d094:	f7ff be32 	b.w	ccfc <attcSendMsg>
    d098:	b001      	add	sp, #4
    d09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d09e <attcProcPrepWriteRsp>:
    d09e:	7cc2      	ldrb	r2, [r0, #19]
    d0a0:	2a01      	cmp	r2, #1
    d0a2:	d102      	bne.n	d0aa <attcProcPrepWriteRsp+0xc>
    d0a4:	8b82      	ldrh	r2, [r0, #28]
    d0a6:	b902      	cbnz	r2, d0aa <attcProcPrepWriteRsp+0xc>
    d0a8:	74c2      	strb	r2, [r0, #19]
    d0aa:	2200      	movs	r2, #0
    d0ac:	811a      	strh	r2, [r3, #8]
    d0ae:	4770      	bx	lr

0000d0b0 <AttcWriteCmd>:
    d0b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d0b4:	4607      	mov	r7, r0
    d0b6:	f102 000b 	add.w	r0, r2, #11
    d0ba:	b280      	uxth	r0, r0
    d0bc:	460d      	mov	r5, r1
    d0be:	4616      	mov	r6, r2
    d0c0:	4698      	mov	r8, r3
    d0c2:	f7ff fa51 	bl	c568 <attMsgAlloc>
    d0c6:	4604      	mov	r4, r0
    d0c8:	b198      	cbz	r0, d0f2 <AttcWriteCmd+0x42>
    d0ca:	1cf3      	adds	r3, r6, #3
    d0cc:	8003      	strh	r3, [r0, #0]
    d0ce:	2352      	movs	r3, #82	; 0x52
    d0d0:	7203      	strb	r3, [r0, #8]
    d0d2:	0a2b      	lsrs	r3, r5, #8
    d0d4:	7283      	strb	r3, [r0, #10]
    d0d6:	7245      	strb	r5, [r0, #9]
    d0d8:	4632      	mov	r2, r6
    d0da:	4641      	mov	r1, r8
    d0dc:	300b      	adds	r0, #11
    d0de:	f7ff f83f 	bl	c160 <memcpy>
    d0e2:	2300      	movs	r3, #0
    d0e4:	9300      	str	r3, [sp, #0]
    d0e6:	220a      	movs	r2, #10
    d0e8:	4623      	mov	r3, r4
    d0ea:	4629      	mov	r1, r5
    d0ec:	4638      	mov	r0, r7
    d0ee:	f7ff fe05 	bl	ccfc <attcSendMsg>
    d0f2:	b002      	add	sp, #8
    d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d0f8 <AttcPrepareWriteReq>:
    d0f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0fc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    d100:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    d104:	f89d a02c 	ldrb.w	sl, [sp, #44]	; 0x2c
    d108:	4607      	mov	r7, r0
    d10a:	460d      	mov	r5, r1
    d10c:	4693      	mov	fp, r2
    d10e:	4698      	mov	r8, r3
    d110:	b116      	cbz	r6, d118 <AttcPrepareWriteReq+0x20>
    d112:	f1ba 0f00 	cmp.w	sl, #0
    d116:	d11f      	bne.n	d158 <AttcPrepareWriteReq+0x60>
    d118:	f108 000d 	add.w	r0, r8, #13
    d11c:	b280      	uxth	r0, r0
    d11e:	f7ff fa23 	bl	c568 <attMsgAlloc>
    d122:	4604      	mov	r4, r0
    d124:	b310      	cbz	r0, d16c <AttcPrepareWriteReq+0x74>
    d126:	2316      	movs	r3, #22
    d128:	7203      	strb	r3, [r0, #8]
    d12a:	0a2b      	lsrs	r3, r5, #8
    d12c:	f8a0 8000 	strh.w	r8, [r0]
    d130:	f8a0 b002 	strh.w	fp, [r0, #2]
    d134:	7245      	strb	r5, [r0, #9]
    d136:	7283      	strb	r3, [r0, #10]
    d138:	b186      	cbz	r6, d15c <AttcPrepareWriteReq+0x64>
    d13a:	f1ba 0f00 	cmp.w	sl, #0
    d13e:	d00d      	beq.n	d15c <AttcPrepareWriteReq+0x64>
    d140:	f8c0 9004 	str.w	r9, [r0, #4]
    d144:	4623      	mov	r3, r4
    d146:	220b      	movs	r2, #11
    d148:	4629      	mov	r1, r5
    d14a:	4638      	mov	r0, r7
    d14c:	960a      	str	r6, [sp, #40]	; 0x28
    d14e:	b001      	add	sp, #4
    d150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d154:	f7ff bdd2 	b.w	ccfc <attcSendMsg>
    d158:	200d      	movs	r0, #13
    d15a:	e7e0      	b.n	d11e <AttcPrepareWriteReq+0x26>
    d15c:	f104 000d 	add.w	r0, r4, #13
    d160:	4642      	mov	r2, r8
    d162:	4649      	mov	r1, r9
    d164:	f7fe fffc 	bl	c160 <memcpy>
    d168:	6060      	str	r0, [r4, #4]
    d16a:	e7eb      	b.n	d144 <AttcPrepareWriteReq+0x4c>
    d16c:	b001      	add	sp, #4
    d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d172 <AttcExecuteWriteReq>:
    d172:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d174:	4604      	mov	r4, r0
    d176:	200a      	movs	r0, #10
    d178:	460d      	mov	r5, r1
    d17a:	f7ff f9f5 	bl	c568 <attMsgAlloc>
    d17e:	4603      	mov	r3, r0
    d180:	b150      	cbz	r0, d198 <AttcExecuteWriteReq+0x26>
    d182:	2202      	movs	r2, #2
    d184:	8002      	strh	r2, [r0, #0]
    d186:	2100      	movs	r1, #0
    d188:	2218      	movs	r2, #24
    d18a:	7202      	strb	r2, [r0, #8]
    d18c:	7245      	strb	r5, [r0, #9]
    d18e:	220c      	movs	r2, #12
    d190:	9100      	str	r1, [sp, #0]
    d192:	4620      	mov	r0, r4
    d194:	f7ff fdb2 	bl	ccfc <attcSendMsg>
    d198:	b003      	add	sp, #12
    d19a:	bd30      	pop	{r4, r5, pc}

0000d19c <attsCccMainCback>:
    d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d19e:	4d2e      	ldr	r5, [pc, #184]	; (d258 <attsCccMainCback+0xbc>)
    d1a0:	2905      	cmp	r1, #5
    d1a2:	b085      	sub	sp, #20
    d1a4:	6a2e      	ldr	r6, [r5, #32]
    d1a6:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
    d1aa:	f04f 0100 	mov.w	r1, #0
    d1ae:	d041      	beq.n	d234 <attsCccMainCback+0x98>
    d1b0:	b2cf      	uxtb	r7, r1
    d1b2:	4567      	cmp	r7, ip
    d1b4:	d340      	bcc.n	d238 <attsCccMainCback+0x9c>
    d1b6:	d048      	beq.n	d24a <attsCccMainCback+0xae>
    d1b8:	785c      	ldrb	r4, [r3, #1]
    d1ba:	781b      	ldrb	r3, [r3, #0]
    d1bc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    d1c0:	b29b      	uxth	r3, r3
    d1c2:	2b02      	cmp	r3, #2
    d1c4:	d844      	bhi.n	d250 <attsCccMainCback+0xb4>
    d1c6:	b113      	cbz	r3, d1ce <attsCccMainCback+0x32>
    d1c8:	8874      	ldrh	r4, [r6, #2]
    d1ca:	4223      	tst	r3, r4
    d1cc:	d040      	beq.n	d250 <attsCccMainCback+0xb4>
    d1ce:	1e44      	subs	r4, r0, #1
    d1d0:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    d1d4:	2c00      	cmp	r4, #0
    d1d6:	d03d      	beq.n	d254 <attsCccMainCback+0xb8>
    d1d8:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
    d1dc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
    d1e0:	42b3      	cmp	r3, r6
    d1e2:	d025      	beq.n	d230 <attsCccMainCback+0x94>
    d1e4:	2110      	movs	r1, #16
    d1e6:	f8ad 0004 	strh.w	r0, [sp, #4]
    d1ea:	f8ad 300a 	strh.w	r3, [sp, #10]
    d1ee:	f88d 1006 	strb.w	r1, [sp, #6]
    d1f2:	f88d 700c 	strb.w	r7, [sp, #12]
    d1f6:	f8ad 2008 	strh.w	r2, [sp, #8]
    d1fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d1fc:	a801      	add	r0, sp, #4
    d1fe:	4798      	blx	r3
    d200:	e016      	b.n	d230 <attsCccMainCback+0x94>
    d202:	1c4c      	adds	r4, r1, #1
    d204:	fb07 6e04 	mla	lr, r7, r4, r6
    d208:	f83e ec06 	ldrh.w	lr, [lr, #-6]
    d20c:	4596      	cmp	lr, r2
    d20e:	d004      	beq.n	d21a <attsCccMainCback+0x7e>
    d210:	4621      	mov	r1, r4
    d212:	b2cc      	uxtb	r4, r1
    d214:	4564      	cmp	r4, ip
    d216:	d3f4      	bcc.n	d202 <attsCccMainCback+0x66>
    d218:	d017      	beq.n	d24a <attsCccMainCback+0xae>
    d21a:	3801      	subs	r0, #1
    d21c:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
    d220:	b1c2      	cbz	r2, d254 <attsCccMainCback+0xb8>
    d222:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    d226:	7018      	strb	r0, [r3, #0]
    d228:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    d22c:	0a12      	lsrs	r2, r2, #8
    d22e:	705a      	strb	r2, [r3, #1]
    d230:	2000      	movs	r0, #0
    d232:	e00b      	b.n	d24c <attsCccMainCback+0xb0>
    d234:	2706      	movs	r7, #6
    d236:	e7ec      	b.n	d212 <attsCccMainCback+0x76>
    d238:	f8b6 e000 	ldrh.w	lr, [r6]
    d23c:	4596      	cmp	lr, r2
    d23e:	f101 0401 	add.w	r4, r1, #1
    d242:	d0b9      	beq.n	d1b8 <attsCccMainCback+0x1c>
    d244:	3606      	adds	r6, #6
    d246:	4621      	mov	r1, r4
    d248:	e7b2      	b.n	d1b0 <attsCccMainCback+0x14>
    d24a:	200a      	movs	r0, #10
    d24c:	b005      	add	sp, #20
    d24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d250:	2080      	movs	r0, #128	; 0x80
    d252:	e7fb      	b.n	d24c <attsCccMainCback+0xb0>
    d254:	2011      	movs	r0, #17
    d256:	e7f9      	b.n	d24c <attsCccMainCback+0xb0>
    d258:	100032b0 	.word	0x100032b0

0000d25c <AttsCccRegister>:
    d25c:	4b04      	ldr	r3, [pc, #16]	; (d270 <AttsCccRegister+0x14>)
    d25e:	e9c3 1208 	strd	r1, r2, [r3, #32]
    d262:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    d266:	4b03      	ldr	r3, [pc, #12]	; (d274 <AttsCccRegister+0x18>)
    d268:	4a03      	ldr	r2, [pc, #12]	; (d278 <AttsCccRegister+0x1c>)
    d26a:	615a      	str	r2, [r3, #20]
    d26c:	4770      	bx	lr
    d26e:	bf00      	nop
    d270:	100032b0 	.word	0x100032b0
    d274:	1000343c 	.word	0x1000343c
    d278:	0000d19d 	.word	0x0000d19d

0000d27c <AttsCccInitTable>:
    d27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d280:	1e45      	subs	r5, r0, #1
    d282:	4c1e      	ldr	r4, [pc, #120]	; (d2fc <AttsCccInitTable+0x80>)
    d284:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    d288:	4607      	mov	r7, r0
    d28a:	460e      	mov	r6, r1
    d28c:	b933      	cbnz	r3, d29c <AttsCccInitTable+0x20>
    d28e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d292:	0040      	lsls	r0, r0, #1
    d294:	f00a fb5c 	bl	17950 <WsfBufAlloc>
    d298:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    d29c:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
    d2a0:	f1b8 0f00 	cmp.w	r8, #0
    d2a4:	d022      	beq.n	d2ec <AttsCccInitTable+0x70>
    d2a6:	bb26      	cbnz	r6, d2f2 <AttsCccInitTable+0x76>
    d2a8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d2ac:	4631      	mov	r1, r6
    d2ae:	0052      	lsls	r2, r2, #1
    d2b0:	4640      	mov	r0, r8
    d2b2:	f7ff f853 	bl	c35c <memset>
    d2b6:	e019      	b.n	d2ec <AttsCccInitTable+0x70>
    d2b8:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d2bc:	f828 2015 	strh.w	r2, [r8, r5, lsl #1]
    d2c0:	f836 2015 	ldrh.w	r2, [r6, r5, lsl #1]
    d2c4:	b162      	cbz	r2, d2e0 <AttsCccInitTable+0x64>
    d2c6:	f88d 300c 	strb.w	r3, [sp, #12]
    d2ca:	f88d 9006 	strb.w	r9, [sp, #6]
    d2ce:	f8ad 7004 	strh.w	r7, [sp, #4]
    d2d2:	f8ad a008 	strh.w	sl, [sp, #8]
    d2d6:	f8ad 200a 	strh.w	r2, [sp, #10]
    d2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d2dc:	a801      	add	r0, sp, #4
    d2de:	4798      	blx	r3
    d2e0:	3501      	adds	r5, #1
    d2e2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d2e6:	b2eb      	uxtb	r3, r5
    d2e8:	429a      	cmp	r2, r3
    d2ea:	d8e5      	bhi.n	d2b8 <AttsCccInitTable+0x3c>
    d2ec:	b004      	add	sp, #16
    d2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2f2:	2500      	movs	r5, #0
    d2f4:	f04f 0910 	mov.w	r9, #16
    d2f8:	46aa      	mov	sl, r5
    d2fa:	e7f2      	b.n	d2e2 <AttsCccInitTable+0x66>
    d2fc:	100032b0 	.word	0x100032b0

0000d300 <AttsCccClearTable>:
    d300:	b538      	push	{r3, r4, r5, lr}
    d302:	1e45      	subs	r5, r0, #1
    d304:	4c04      	ldr	r4, [pc, #16]	; (d318 <AttsCccClearTable+0x18>)
    d306:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    d30a:	b120      	cbz	r0, d316 <AttsCccClearTable+0x16>
    d30c:	f00a fb5a 	bl	179c4 <WsfBufFree>
    d310:	2300      	movs	r3, #0
    d312:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
    d316:	bd38      	pop	{r3, r4, r5, pc}
    d318:	100032b0 	.word	0x100032b0

0000d31c <AttsCccGet>:
    d31c:	3801      	subs	r0, #1
    d31e:	4b03      	ldr	r3, [pc, #12]	; (d32c <AttsCccGet+0x10>)
    d320:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    d324:	b108      	cbz	r0, d32a <AttsCccGet+0xe>
    d326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
    d32a:	4770      	bx	lr
    d32c:	100032b0 	.word	0x100032b0

0000d330 <AttsCccSet>:
    d330:	3801      	subs	r0, #1
    d332:	4b03      	ldr	r3, [pc, #12]	; (d340 <AttsCccSet+0x10>)
    d334:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    d338:	b10b      	cbz	r3, d33e <AttsCccSet+0xe>
    d33a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    d33e:	4770      	bx	lr
    d340:	100032b0 	.word	0x100032b0

0000d344 <AttsCccEnabled>:
    d344:	b538      	push	{r3, r4, r5, lr}
    d346:	460c      	mov	r4, r1
    d348:	4605      	mov	r5, r0
    d34a:	f002 f9e3 	bl	f714 <DmConnSecLevel>
    d34e:	4b08      	ldr	r3, [pc, #32]	; (d370 <AttsCccEnabled+0x2c>)
    d350:	6a1b      	ldr	r3, [r3, #32]
    d352:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d356:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d35a:	791b      	ldrb	r3, [r3, #4]
    d35c:	4283      	cmp	r3, r0
    d35e:	d805      	bhi.n	d36c <AttsCccEnabled+0x28>
    d360:	4621      	mov	r1, r4
    d362:	4628      	mov	r0, r5
    d364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d368:	f7ff bfd8 	b.w	d31c <AttsCccGet>
    d36c:	2000      	movs	r0, #0
    d36e:	bd38      	pop	{r3, r4, r5, pc}
    d370:	100032b0 	.word	0x100032b0

0000d374 <attsIndCcbByConnId>:
    d374:	b510      	push	{r4, lr}
    d376:	4604      	mov	r4, r0
    d378:	f002 f988 	bl	f68c <DmConnInUse>
    d37c:	b120      	cbz	r0, d388 <attsIndCcbByConnId+0x14>
    d37e:	4b03      	ldr	r3, [pc, #12]	; (d38c <attsIndCcbByConnId+0x18>)
    d380:	3c01      	subs	r4, #1
    d382:	202c      	movs	r0, #44	; 0x2c
    d384:	fb00 3004 	mla	r0, r0, r4, r3
    d388:	bd10      	pop	{r4, pc}
    d38a:	bf00      	nop
    d38c:	100032dc 	.word	0x100032dc

0000d390 <attsExecCallback>:
    d390:	b507      	push	{r0, r1, r2, lr}
    d392:	2300      	movs	r3, #0
    d394:	9300      	str	r3, [sp, #0]
    d396:	4613      	mov	r3, r2
    d398:	460a      	mov	r2, r1
    d39a:	210f      	movs	r1, #15
    d39c:	f7ff f8b6 	bl	c50c <attExecCallback>
    d3a0:	b003      	add	sp, #12
    d3a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000d3a6 <attsIndNtfCallback>:
    d3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3aa:	460c      	mov	r4, r1
    d3ac:	8ac9      	ldrh	r1, [r1, #22]
    d3ae:	4606      	mov	r6, r0
    d3b0:	4617      	mov	r7, r2
    d3b2:	b119      	cbz	r1, d3bc <attsIndNtfCallback+0x16>
    d3b4:	f7ff ffec 	bl	d390 <attsExecCallback>
    d3b8:	2300      	movs	r3, #0
    d3ba:	82e3      	strh	r3, [r4, #22]
    d3bc:	f104 0518 	add.w	r5, r4, #24
    d3c0:	f04f 0800 	mov.w	r8, #0
    d3c4:	342c      	adds	r4, #44	; 0x2c
    d3c6:	f835 1b02 	ldrh.w	r1, [r5], #2
    d3ca:	b129      	cbz	r1, d3d8 <attsIndNtfCallback+0x32>
    d3cc:	463a      	mov	r2, r7
    d3ce:	4630      	mov	r0, r6
    d3d0:	f7ff ffde 	bl	d390 <attsExecCallback>
    d3d4:	f825 8c02 	strh.w	r8, [r5, #-2]
    d3d8:	42ac      	cmp	r4, r5
    d3da:	d1f4      	bne.n	d3c6 <attsIndNtfCallback+0x20>
    d3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3e0 <attsIndCtrlCback>:
    d3e0:	b510      	push	{r4, lr}
    d3e2:	4604      	mov	r4, r0
    d3e4:	7800      	ldrb	r0, [r0, #0]
    d3e6:	f7ff ffc5 	bl	d374 <attsIndCcbByConnId>
    d3ea:	4601      	mov	r1, r0
    d3ec:	b120      	cbz	r0, d3f8 <attsIndCtrlCback+0x18>
    d3ee:	7820      	ldrb	r0, [r4, #0]
    d3f0:	2200      	movs	r2, #0
    d3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d3f6:	e7d6      	b.n	d3a6 <attsIndNtfCallback>
    d3f8:	bd10      	pop	{r4, pc}

0000d3fa <attsIndMsgCback>:
    d3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3fc:	4605      	mov	r5, r0
    d3fe:	7800      	ldrb	r0, [r0, #0]
    d400:	f7ff ffb8 	bl	d374 <attsIndCcbByConnId>
    d404:	78ab      	ldrb	r3, [r5, #2]
    d406:	4604      	mov	r4, r0
    d408:	b930      	cbnz	r0, d418 <attsIndMsgCback+0x1e>
    d40a:	2b21      	cmp	r3, #33	; 0x21
    d40c:	d13d      	bne.n	d48a <attsIndMsgCback+0x90>
    d40e:	6868      	ldr	r0, [r5, #4]
    d410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d414:	f00a bb3c 	b.w	17a90 <WsfMsgFree>
    d418:	2b21      	cmp	r3, #33	; 0x21
    d41a:	d13b      	bne.n	d494 <attsIndMsgCback+0x9a>
    d41c:	686b      	ldr	r3, [r5, #4]
    d41e:	7a1a      	ldrb	r2, [r3, #8]
    d420:	885e      	ldrh	r6, [r3, #2]
    d422:	2a1d      	cmp	r2, #29
    d424:	d113      	bne.n	d44e <attsIndMsgCback+0x54>
    d426:	8ac2      	ldrh	r2, [r0, #22]
    d428:	bb12      	cbnz	r2, d470 <attsIndMsgCback+0x76>
    d42a:	6901      	ldr	r1, [r0, #16]
    d42c:	881a      	ldrh	r2, [r3, #0]
    d42e:	8b09      	ldrh	r1, [r1, #24]
    d430:	2004      	movs	r0, #4
    d432:	f003 f86b 	bl	1050c <L2cDataReq>
    d436:	2322      	movs	r3, #34	; 0x22
    d438:	7323      	strb	r3, [r4, #12]
    d43a:	4b27      	ldr	r3, [pc, #156]	; (d4d8 <attsIndMsgCback+0xde>)
    d43c:	82e6      	strh	r6, [r4, #22]
    d43e:	681b      	ldr	r3, [r3, #0]
    d440:	82a6      	strh	r6, [r4, #20]
    d442:	7999      	ldrb	r1, [r3, #6]
    d444:	4620      	mov	r0, r4
    d446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d44a:	f00a bcc3 	b.w	17dd4 <WsfTimerStartSec>
    d44e:	f100 0118 	add.w	r1, r0, #24
    d452:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
    d456:	2200      	movs	r2, #0
    d458:	460f      	mov	r7, r1
    d45a:	f831 0b02 	ldrh.w	r0, [r1], #2
    d45e:	b118      	cbz	r0, d468 <attsIndMsgCback+0x6e>
    d460:	4286      	cmp	r6, r0
    d462:	d005      	beq.n	d470 <attsIndMsgCback+0x76>
    d464:	3201      	adds	r2, #1
    d466:	b2d2      	uxtb	r2, r2
    d468:	458c      	cmp	ip, r1
    d46a:	d1f6      	bne.n	d45a <attsIndMsgCback+0x60>
    d46c:	2a09      	cmp	r2, #9
    d46e:	d922      	bls.n	d4b6 <attsIndMsgCback+0xbc>
    d470:	2272      	movs	r2, #114	; 0x72
    d472:	4631      	mov	r1, r6
    d474:	7828      	ldrb	r0, [r5, #0]
    d476:	f7ff ff8b 	bl	d390 <attsExecCallback>
    d47a:	e7c8      	b.n	d40e <attsIndMsgCback+0x14>
    d47c:	2300      	movs	r3, #0
    d47e:	f837 2b02 	ldrh.w	r2, [r7], #2
    d482:	b91a      	cbnz	r2, d48c <attsIndMsgCback+0x92>
    d484:	330c      	adds	r3, #12
    d486:	f824 6013 	strh.w	r6, [r4, r3, lsl #1]
    d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d48c:	3301      	adds	r3, #1
    d48e:	2b0a      	cmp	r3, #10
    d490:	d1f5      	bne.n	d47e <attsIndMsgCback+0x84>
    d492:	e7fa      	b.n	d48a <attsIndMsgCback+0x90>
    d494:	2b22      	cmp	r3, #34	; 0x22
    d496:	d1f8      	bne.n	d48a <attsIndMsgCback+0x90>
    d498:	8a83      	ldrh	r3, [r0, #20]
    d49a:	2b00      	cmp	r3, #0
    d49c:	d0f5      	beq.n	d48a <attsIndMsgCback+0x90>
    d49e:	2600      	movs	r6, #0
    d4a0:	8286      	strh	r6, [r0, #20]
    d4a2:	2271      	movs	r2, #113	; 0x71
    d4a4:	8ac1      	ldrh	r1, [r0, #22]
    d4a6:	7828      	ldrb	r0, [r5, #0]
    d4a8:	f7ff ff72 	bl	d390 <attsExecCallback>
    d4ac:	6923      	ldr	r3, [r4, #16]
    d4ae:	82e6      	strh	r6, [r4, #22]
    d4b0:	2201      	movs	r2, #1
    d4b2:	77da      	strb	r2, [r3, #31]
    d4b4:	e7e9      	b.n	d48a <attsIndMsgCback+0x90>
    d4b6:	6921      	ldr	r1, [r4, #16]
    d4b8:	881a      	ldrh	r2, [r3, #0]
    d4ba:	8b09      	ldrh	r1, [r1, #24]
    d4bc:	882d      	ldrh	r5, [r5, #0]
    d4be:	2004      	movs	r0, #4
    d4c0:	f003 f824 	bl	1050c <L2cDataReq>
    d4c4:	6923      	ldr	r3, [r4, #16]
    d4c6:	7f9a      	ldrb	r2, [r3, #30]
    d4c8:	2a00      	cmp	r2, #0
    d4ca:	d1d7      	bne.n	d47c <attsIndMsgCback+0x82>
    d4cc:	4631      	mov	r1, r6
    d4ce:	b2e8      	uxtb	r0, r5
    d4d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4d4:	e75c      	b.n	d390 <attsExecCallback>
    d4d6:	bf00      	nop
    d4d8:	1000239c 	.word	0x1000239c

0000d4dc <attsHandleValueIndNtf>:
    d4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4e0:	4606      	mov	r6, r0
    d4e2:	460c      	mov	r4, r1
    d4e4:	4617      	mov	r7, r2
    d4e6:	4698      	mov	r8, r3
    d4e8:	f89d a020 	ldrb.w	sl, [sp, #32]
    d4ec:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
    d4f0:	f00c ff7a 	bl	1a3e8 <WsfTaskLock>
    d4f4:	4630      	mov	r0, r6
    d4f6:	f7ff ff3d 	bl	d374 <attsIndCcbByConnId>
    d4fa:	b950      	cbnz	r0, d512 <attsHandleValueIndNtf+0x36>
    d4fc:	f00c ff7a 	bl	1a3f4 <WsfTaskUnlock>
    d500:	f1b9 0f00 	cmp.w	r9, #0
    d504:	d048      	beq.n	d598 <attsHandleValueIndNtf+0xbc>
    d506:	4651      	mov	r1, sl
    d508:	4640      	mov	r0, r8
    d50a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d50e:	f7ff b893 	b.w	c638 <AttMsgFree>
    d512:	6903      	ldr	r3, [r0, #16]
    d514:	8b5d      	ldrh	r5, [r3, #26]
    d516:	f00c ff6d 	bl	1a3f4 <WsfTaskUnlock>
    d51a:	2d00      	cmp	r5, #0
    d51c:	d0f0      	beq.n	d500 <attsHandleValueIndNtf+0x24>
    d51e:	1cbb      	adds	r3, r7, #2
    d520:	42ab      	cmp	r3, r5
    d522:	da37      	bge.n	d594 <attsHandleValueIndNtf+0xb8>
    d524:	2008      	movs	r0, #8
    d526:	f00a fa9c 	bl	17a62 <WsfMsgAlloc>
    d52a:	4605      	mov	r5, r0
    d52c:	b360      	cbz	r0, d588 <attsHandleValueIndNtf+0xac>
    d52e:	2321      	movs	r3, #33	; 0x21
    d530:	8006      	strh	r6, [r0, #0]
    d532:	7083      	strb	r3, [r0, #2]
    d534:	f1b9 0f00 	cmp.w	r9, #0
    d538:	d01c      	beq.n	d574 <attsHandleValueIndNtf+0x98>
    d53a:	f1a8 030b 	sub.w	r3, r8, #11
    d53e:	6043      	str	r3, [r0, #4]
    d540:	6868      	ldr	r0, [r5, #4]
    d542:	b1f0      	cbz	r0, d582 <attsHandleValueIndNtf+0xa6>
    d544:	1cfb      	adds	r3, r7, #3
    d546:	8044      	strh	r4, [r0, #2]
    d548:	7244      	strb	r4, [r0, #9]
    d54a:	0a24      	lsrs	r4, r4, #8
    d54c:	8003      	strh	r3, [r0, #0]
    d54e:	f880 a008 	strb.w	sl, [r0, #8]
    d552:	7284      	strb	r4, [r0, #10]
    d554:	f1b9 0f00 	cmp.w	r9, #0
    d558:	d104      	bne.n	d564 <attsHandleValueIndNtf+0x88>
    d55a:	463a      	mov	r2, r7
    d55c:	4641      	mov	r1, r8
    d55e:	300b      	adds	r0, #11
    d560:	f7fe fdfe 	bl	c160 <memcpy>
    d564:	4b0d      	ldr	r3, [pc, #52]	; (d59c <attsHandleValueIndNtf+0xc0>)
    d566:	4629      	mov	r1, r5
    d568:	f893 0110 	ldrb.w	r0, [r3, #272]	; 0x110
    d56c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d570:	f00a ba9b 	b.w	17aaa <WsfMsgSend>
    d574:	f107 000b 	add.w	r0, r7, #11
    d578:	b280      	uxth	r0, r0
    d57a:	f7fe fff5 	bl	c568 <attMsgAlloc>
    d57e:	6068      	str	r0, [r5, #4]
    d580:	e7de      	b.n	d540 <attsHandleValueIndNtf+0x64>
    d582:	4628      	mov	r0, r5
    d584:	f00a fa84 	bl	17a90 <WsfMsgFree>
    d588:	2270      	movs	r2, #112	; 0x70
    d58a:	4621      	mov	r1, r4
    d58c:	4630      	mov	r0, r6
    d58e:	f7ff feff 	bl	d390 <attsExecCallback>
    d592:	e7b5      	b.n	d500 <attsHandleValueIndNtf+0x24>
    d594:	2277      	movs	r2, #119	; 0x77
    d596:	e7f8      	b.n	d58a <attsHandleValueIndNtf+0xae>
    d598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d59c:	10002fd8 	.word	0x10002fd8

0000d5a0 <attsIndConnCback>:
    d5a0:	788b      	ldrb	r3, [r1, #2]
    d5a2:	2b28      	cmp	r3, #40	; 0x28
    d5a4:	b570      	push	{r4, r5, r6, lr}
    d5a6:	4606      	mov	r6, r0
    d5a8:	d117      	bne.n	d5da <attsIndConnCback+0x3a>
    d5aa:	78cc      	ldrb	r4, [r1, #3]
    d5ac:	b904      	cbnz	r4, d5b0 <attsIndConnCback+0x10>
    d5ae:	7a0c      	ldrb	r4, [r1, #8]
    d5b0:	7f35      	ldrb	r5, [r6, #28]
    d5b2:	490a      	ldr	r1, [pc, #40]	; (d5dc <attsIndConnCback+0x3c>)
    d5b4:	232c      	movs	r3, #44	; 0x2c
    d5b6:	3d01      	subs	r5, #1
    d5b8:	fb03 1505 	mla	r5, r3, r5, r1
    d5bc:	3420      	adds	r4, #32
    d5be:	8aab      	ldrh	r3, [r5, #20]
    d5c0:	b2e4      	uxtb	r4, r4
    d5c2:	b123      	cbz	r3, d5ce <attsIndConnCback+0x2e>
    d5c4:	4628      	mov	r0, r5
    d5c6:	f00a fc2b 	bl	17e20 <WsfTimerStop>
    d5ca:	2300      	movs	r3, #0
    d5cc:	82ab      	strh	r3, [r5, #20]
    d5ce:	4622      	mov	r2, r4
    d5d0:	4629      	mov	r1, r5
    d5d2:	7f30      	ldrb	r0, [r6, #28]
    d5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d5d8:	e6e5      	b.n	d3a6 <attsIndNtfCallback>
    d5da:	bd70      	pop	{r4, r5, r6, pc}
    d5dc:	100032dc 	.word	0x100032dc

0000d5e0 <attsProcValueCnf>:
    d5e0:	b570      	push	{r4, r5, r6, lr}
    d5e2:	4606      	mov	r6, r0
    d5e4:	7f00      	ldrb	r0, [r0, #28]
    d5e6:	f7ff fec5 	bl	d374 <attsIndCcbByConnId>
    d5ea:	4604      	mov	r4, r0
    d5ec:	b168      	cbz	r0, d60a <attsProcValueCnf+0x2a>
    d5ee:	8a83      	ldrh	r3, [r0, #20]
    d5f0:	b15b      	cbz	r3, d60a <attsProcValueCnf+0x2a>
    d5f2:	2300      	movs	r3, #0
    d5f4:	8283      	strh	r3, [r0, #20]
    d5f6:	f00a fc13 	bl	17e20 <WsfTimerStop>
    d5fa:	7fb5      	ldrb	r5, [r6, #30]
    d5fc:	b92d      	cbnz	r5, d60a <attsProcValueCnf+0x2a>
    d5fe:	462a      	mov	r2, r5
    d600:	8ae1      	ldrh	r1, [r4, #22]
    d602:	7f30      	ldrb	r0, [r6, #28]
    d604:	f7ff fec4 	bl	d390 <attsExecCallback>
    d608:	82e5      	strh	r5, [r4, #22]
    d60a:	bd70      	pop	{r4, r5, r6, pc}

0000d60c <AttsIndInit>:
    d60c:	b510      	push	{r4, lr}
    d60e:	4909      	ldr	r1, [pc, #36]	; (d634 <AttsIndInit+0x28>)
    d610:	4a09      	ldr	r2, [pc, #36]	; (d638 <AttsIndInit+0x2c>)
    d612:	f891 0110 	ldrb.w	r0, [r1, #272]	; 0x110
    d616:	2300      	movs	r3, #0
    d618:	eb01 1443 	add.w	r4, r1, r3, lsl #5
    d61c:	3301      	adds	r3, #1
    d61e:	2b08      	cmp	r3, #8
    d620:	6114      	str	r4, [r2, #16]
    d622:	7210      	strb	r0, [r2, #8]
    d624:	8153      	strh	r3, [r2, #10]
    d626:	f102 022c 	add.w	r2, r2, #44	; 0x2c
    d62a:	d1f5      	bne.n	d618 <AttsIndInit+0xc>
    d62c:	4b03      	ldr	r3, [pc, #12]	; (d63c <AttsIndInit+0x30>)
    d62e:	4a04      	ldr	r2, [pc, #16]	; (d640 <AttsIndInit+0x34>)
    d630:	609a      	str	r2, [r3, #8]
    d632:	bd10      	pop	{r4, pc}
    d634:	10002fd8 	.word	0x10002fd8
    d638:	100032dc 	.word	0x100032dc
    d63c:	1000343c 	.word	0x1000343c
    d640:	00021eb8 	.word	0x00021eb8

0000d644 <AttsHandleValueInd>:
    d644:	b513      	push	{r0, r1, r4, lr}
    d646:	f04f 0c00 	mov.w	ip, #0
    d64a:	241d      	movs	r4, #29
    d64c:	e9cd 4c00 	strd	r4, ip, [sp]
    d650:	f7ff ff44 	bl	d4dc <attsHandleValueIndNtf>
    d654:	b002      	add	sp, #8
    d656:	bd10      	pop	{r4, pc}

0000d658 <AttsHandleValueNtf>:
    d658:	b513      	push	{r0, r1, r4, lr}
    d65a:	f04f 0c00 	mov.w	ip, #0
    d65e:	241b      	movs	r4, #27
    d660:	e9cd 4c00 	strd	r4, ip, [sp]
    d664:	f7ff ff3a 	bl	d4dc <attsHandleValueIndNtf>
    d668:	b002      	add	sp, #8
    d66a:	bd10      	pop	{r4, pc}

0000d66c <AttsHandleValueIndZeroCpy>:
    d66c:	b513      	push	{r0, r1, r4, lr}
    d66e:	f04f 0c01 	mov.w	ip, #1
    d672:	241d      	movs	r4, #29
    d674:	e9cd 4c00 	strd	r4, ip, [sp]
    d678:	f7ff ff30 	bl	d4dc <attsHandleValueIndNtf>
    d67c:	b002      	add	sp, #8
    d67e:	bd10      	pop	{r4, pc}

0000d680 <AttsHandleValueNtfZeroCpy>:
    d680:	b513      	push	{r0, r1, r4, lr}
    d682:	f04f 0c01 	mov.w	ip, #1
    d686:	241b      	movs	r4, #27
    d688:	e9cd 4c00 	strd	r4, ip, [sp]
    d68c:	f7ff ff26 	bl	d4dc <attsHandleValueIndNtf>
    d690:	b002      	add	sp, #8
    d692:	bd10      	pop	{r4, pc}

0000d694 <attsL2cCtrlCback>:
    d694:	4b01      	ldr	r3, [pc, #4]	; (d69c <attsL2cCtrlCback+0x8>)
    d696:	689b      	ldr	r3, [r3, #8]
    d698:	685b      	ldr	r3, [r3, #4]
    d69a:	4718      	bx	r3
    d69c:	1000343c 	.word	0x1000343c

0000d6a0 <attsMsgCback>:
    d6a0:	b410      	push	{r4}
    d6a2:	7883      	ldrb	r3, [r0, #2]
    d6a4:	2b20      	cmp	r3, #32
    d6a6:	d106      	bne.n	d6b6 <attsMsgCback+0x16>
    d6a8:	2200      	movs	r2, #0
    d6aa:	2104      	movs	r1, #4
    d6ac:	7800      	ldrb	r0, [r0, #0]
    d6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6b2:	f002 b839 	b.w	f728 <DmConnSetIdle>
    d6b6:	2b22      	cmp	r3, #34	; 0x22
    d6b8:	4b03      	ldr	r3, [pc, #12]	; (d6c8 <attsMsgCback+0x28>)
    d6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    d6be:	bf96      	itet	ls
    d6c0:	689b      	ldrls	r3, [r3, #8]
    d6c2:	68db      	ldrhi	r3, [r3, #12]
    d6c4:	689b      	ldrls	r3, [r3, #8]
    d6c6:	4718      	bx	r3
    d6c8:	1000343c 	.word	0x1000343c

0000d6cc <attsErrRsp>:
    d6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6d0:	4605      	mov	r5, r0
    d6d2:	200d      	movs	r0, #13
    d6d4:	460f      	mov	r7, r1
    d6d6:	4614      	mov	r4, r2
    d6d8:	461e      	mov	r6, r3
    d6da:	f7fe ff45 	bl	c568 <attMsgAlloc>
    d6de:	b170      	cbz	r0, d6fe <attsErrRsp+0x32>
    d6e0:	7284      	strb	r4, [r0, #10]
    d6e2:	2301      	movs	r3, #1
    d6e4:	0a24      	lsrs	r4, r4, #8
    d6e6:	7203      	strb	r3, [r0, #8]
    d6e8:	7247      	strb	r7, [r0, #9]
    d6ea:	72c4      	strb	r4, [r0, #11]
    d6ec:	7306      	strb	r6, [r0, #12]
    d6ee:	4603      	mov	r3, r0
    d6f0:	4629      	mov	r1, r5
    d6f2:	2205      	movs	r2, #5
    d6f4:	2004      	movs	r0, #4
    d6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d6fa:	f002 bf07 	b.w	1050c <L2cDataReq>
    d6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d702 <attsDataCback>:
    d702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d706:	4680      	mov	r8, r0
    d708:	460e      	mov	r6, r1
    d70a:	4617      	mov	r7, r2
    d70c:	f7fe feda 	bl	c4c4 <attCcbByHandle>
    d710:	b368      	cbz	r0, d76e <attsDataCback+0x6c>
    d712:	7a39      	ldrb	r1, [r7, #8]
    d714:	2912      	cmp	r1, #18
    d716:	d903      	bls.n	d720 <attsDataCback+0x1e>
    d718:	f1a1 0316 	sub.w	r3, r1, #22
    d71c:	2b08      	cmp	r3, #8
    d71e:	d80e      	bhi.n	d73e <attsDataCback+0x3c>
    d720:	084b      	lsrs	r3, r1, #1
    d722:	4a14      	ldr	r2, [pc, #80]	; (d774 <attsDataCback+0x72>)
    d724:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    d728:	b195      	cbz	r5, d750 <attsDataCback+0x4e>
    d72a:	4a13      	ldr	r2, [pc, #76]	; (d778 <attsDataCback+0x76>)
    d72c:	5cd3      	ldrb	r3, [r2, r3]
    d72e:	42b3      	cmp	r3, r6
    d730:	d81b      	bhi.n	d76a <attsDataCback+0x68>
    d732:	463a      	mov	r2, r7
    d734:	4631      	mov	r1, r6
    d736:	462b      	mov	r3, r5
    d738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d73c:	4718      	bx	r3
    d73e:	2952      	cmp	r1, #82	; 0x52
    d740:	d004      	beq.n	d74c <attsDataCback+0x4a>
    d742:	29d2      	cmp	r1, #210	; 0xd2
    d744:	bf0c      	ite	eq
    d746:	2310      	moveq	r3, #16
    d748:	2300      	movne	r3, #0
    d74a:	e7ea      	b.n	d722 <attsDataCback+0x20>
    d74c:	230a      	movs	r3, #10
    d74e:	e7e8      	b.n	d722 <attsDataCback+0x20>
    d750:	2306      	movs	r3, #6
    d752:	2902      	cmp	r1, #2
    d754:	d00b      	beq.n	d76e <attsDataCback+0x6c>
    d756:	291e      	cmp	r1, #30
    d758:	d009      	beq.n	d76e <attsDataCback+0x6c>
    d75a:	f011 0240 	ands.w	r2, r1, #64	; 0x40
    d75e:	d106      	bne.n	d76e <attsDataCback+0x6c>
    d760:	4640      	mov	r0, r8
    d762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d766:	f7ff bfb1 	b.w	d6cc <attsErrRsp>
    d76a:	2304      	movs	r3, #4
    d76c:	e7f1      	b.n	d752 <attsDataCback+0x50>
    d76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d772:	bf00      	nop
    d774:	10002310 	.word	0x10002310
    d778:	00021ec8 	.word	0x00021ec8

0000d77c <attsClearPrepWrites>:
    d77c:	b510      	push	{r4, lr}
    d77e:	4604      	mov	r4, r0
    d780:	4620      	mov	r0, r4
    d782:	f00a f9f9 	bl	17b78 <WsfQueueDeq>
    d786:	b900      	cbnz	r0, d78a <attsClearPrepWrites+0xe>
    d788:	bd10      	pop	{r4, pc}
    d78a:	f00a f91b 	bl	179c4 <WsfBufFree>
    d78e:	e7f7      	b.n	d780 <attsClearPrepWrites+0x4>

0000d790 <attsConnCback>:
    d790:	788b      	ldrb	r3, [r1, #2]
    d792:	2b28      	cmp	r3, #40	; 0x28
    d794:	b570      	push	{r4, r5, r6, lr}
    d796:	4604      	mov	r4, r0
    d798:	460d      	mov	r5, r1
    d79a:	d10a      	bne.n	d7b2 <attsConnCback+0x22>
    d79c:	f7ff ffee 	bl	d77c <attsClearPrepWrites>
    d7a0:	7f20      	ldrb	r0, [r4, #28]
    d7a2:	f001 ffdb 	bl	f75c <DmConnCheckIdle>
    d7a6:	0743      	lsls	r3, r0, #29
    d7a8:	d503      	bpl.n	d7b2 <attsConnCback+0x22>
    d7aa:	f104 0008 	add.w	r0, r4, #8
    d7ae:	f00a fb37 	bl	17e20 <WsfTimerStop>
    d7b2:	4b04      	ldr	r3, [pc, #16]	; (d7c4 <attsConnCback+0x34>)
    d7b4:	689b      	ldr	r3, [r3, #8]
    d7b6:	4629      	mov	r1, r5
    d7b8:	4620      	mov	r0, r4
    d7ba:	68db      	ldr	r3, [r3, #12]
    d7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d7c0:	4718      	bx	r3
    d7c2:	bf00      	nop
    d7c4:	1000343c 	.word	0x1000343c

0000d7c8 <attsDiscBusy>:
    d7c8:	b538      	push	{r3, r4, r5, lr}
    d7ca:	4d0d      	ldr	r5, [pc, #52]	; (d800 <attsDiscBusy+0x38>)
    d7cc:	682b      	ldr	r3, [r5, #0]
    d7ce:	681b      	ldr	r3, [r3, #0]
    d7d0:	4604      	mov	r4, r0
    d7d2:	b1a3      	cbz	r3, d7fe <attsDiscBusy+0x36>
    d7d4:	2104      	movs	r1, #4
    d7d6:	7f00      	ldrb	r0, [r0, #28]
    d7d8:	2201      	movs	r2, #1
    d7da:	f001 ffa5 	bl	f728 <DmConnSetIdle>
    d7de:	4b09      	ldr	r3, [pc, #36]	; (d804 <attsDiscBusy+0x3c>)
    d7e0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    d7e4:	7423      	strb	r3, [r4, #16]
    d7e6:	2320      	movs	r3, #32
    d7e8:	7523      	strb	r3, [r4, #20]
    d7ea:	7f23      	ldrb	r3, [r4, #28]
    d7ec:	8263      	strh	r3, [r4, #18]
    d7ee:	682b      	ldr	r3, [r5, #0]
    d7f0:	f104 0008 	add.w	r0, r4, #8
    d7f4:	6819      	ldr	r1, [r3, #0]
    d7f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d7fa:	f00a baeb 	b.w	17dd4 <WsfTimerStartSec>
    d7fe:	bd38      	pop	{r3, r4, r5, pc}
    d800:	1000239c 	.word	0x1000239c
    d804:	10002fd8 	.word	0x10002fd8

0000d808 <AttsInit>:
    d808:	4b06      	ldr	r3, [pc, #24]	; (d824 <AttsInit+0x1c>)
    d80a:	2200      	movs	r2, #0
    d80c:	e9c3 2200 	strd	r2, r2, [r3]
    d810:	4a05      	ldr	r2, [pc, #20]	; (d828 <AttsInit+0x20>)
    d812:	609a      	str	r2, [r3, #8]
    d814:	4a05      	ldr	r2, [pc, #20]	; (d82c <AttsInit+0x24>)
    d816:	60da      	str	r2, [r3, #12]
    d818:	4b05      	ldr	r3, [pc, #20]	; (d830 <AttsInit+0x28>)
    d81a:	4a06      	ldr	r2, [pc, #24]	; (d834 <AttsInit+0x2c>)
    d81c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    d820:	4770      	bx	lr
    d822:	bf00      	nop
    d824:	1000343c 	.word	0x1000343c
    d828:	00021d20 	.word	0x00021d20
    d82c:	0000c461 	.word	0x0000c461
    d830:	10002fd8 	.word	0x10002fd8
    d834:	00021edc 	.word	0x00021edc

0000d838 <AttsAuthorRegister>:
    d838:	4b01      	ldr	r3, [pc, #4]	; (d840 <AttsAuthorRegister+0x8>)
    d83a:	6118      	str	r0, [r3, #16]
    d83c:	4770      	bx	lr
    d83e:	bf00      	nop
    d840:	1000343c 	.word	0x1000343c

0000d844 <AttsAddGroup>:
    d844:	b510      	push	{r4, lr}
    d846:	4604      	mov	r4, r0
    d848:	f00c fdce 	bl	1a3e8 <WsfTaskLock>
    d84c:	4b09      	ldr	r3, [pc, #36]	; (d874 <AttsAddGroup+0x30>)
    d84e:	681b      	ldr	r3, [r3, #0]
    d850:	2200      	movs	r2, #0
    d852:	b11b      	cbz	r3, d85c <AttsAddGroup+0x18>
    d854:	8a20      	ldrh	r0, [r4, #16]
    d856:	8a19      	ldrh	r1, [r3, #16]
    d858:	4288      	cmp	r0, r1
    d85a:	d207      	bcs.n	d86c <AttsAddGroup+0x28>
    d85c:	4621      	mov	r1, r4
    d85e:	4805      	ldr	r0, [pc, #20]	; (d874 <AttsAddGroup+0x30>)
    d860:	f00a f9c3 	bl	17bea <WsfQueueInsert>
    d864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d868:	f00c bdc4 	b.w	1a3f4 <WsfTaskUnlock>
    d86c:	461a      	mov	r2, r3
    d86e:	681b      	ldr	r3, [r3, #0]
    d870:	e7ef      	b.n	d852 <AttsAddGroup+0xe>
    d872:	bf00      	nop
    d874:	1000343c 	.word	0x1000343c

0000d878 <AttsRemoveGroup>:
    d878:	b510      	push	{r4, lr}
    d87a:	4604      	mov	r4, r0
    d87c:	f00c fdb4 	bl	1a3e8 <WsfTaskLock>
    d880:	4b08      	ldr	r3, [pc, #32]	; (d8a4 <AttsRemoveGroup+0x2c>)
    d882:	6819      	ldr	r1, [r3, #0]
    d884:	2200      	movs	r2, #0
    d886:	b919      	cbnz	r1, d890 <AttsRemoveGroup+0x18>
    d888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d88c:	f00c bdb2 	b.w	1a3f4 <WsfTaskUnlock>
    d890:	8a0b      	ldrh	r3, [r1, #16]
    d892:	42a3      	cmp	r3, r4
    d894:	d002      	beq.n	d89c <AttsRemoveGroup+0x24>
    d896:	460a      	mov	r2, r1
    d898:	6809      	ldr	r1, [r1, #0]
    d89a:	e7f4      	b.n	d886 <AttsRemoveGroup+0xe>
    d89c:	4801      	ldr	r0, [pc, #4]	; (d8a4 <AttsRemoveGroup+0x2c>)
    d89e:	f00a f9cf 	bl	17c40 <WsfQueueRemove>
    d8a2:	e7f1      	b.n	d888 <AttsRemoveGroup+0x10>
    d8a4:	1000343c 	.word	0x1000343c

0000d8a8 <AttsSetAttr>:
    d8a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d8aa:	4605      	mov	r5, r0
    d8ac:	460e      	mov	r6, r1
    d8ae:	4614      	mov	r4, r2
    d8b0:	f00c fd9a 	bl	1a3e8 <WsfTaskLock>
    d8b4:	4628      	mov	r0, r5
    d8b6:	a901      	add	r1, sp, #4
    d8b8:	f000 f862 	bl	d980 <attsFindByHandle>
    d8bc:	4605      	mov	r5, r0
    d8be:	b198      	cbz	r0, d8e8 <AttsSetAttr+0x40>
    d8c0:	8983      	ldrh	r3, [r0, #12]
    d8c2:	42b3      	cmp	r3, r6
    d8c4:	d312      	bcc.n	d8ec <AttsSetAttr+0x44>
    d8c6:	4621      	mov	r1, r4
    d8c8:	4632      	mov	r2, r6
    d8ca:	6840      	ldr	r0, [r0, #4]
    d8cc:	f7fe fc48 	bl	c160 <memcpy>
    d8d0:	7bac      	ldrb	r4, [r5, #14]
    d8d2:	f014 0408 	ands.w	r4, r4, #8
    d8d6:	d002      	beq.n	d8de <AttsSetAttr+0x36>
    d8d8:	68ab      	ldr	r3, [r5, #8]
    d8da:	2400      	movs	r4, #0
    d8dc:	801e      	strh	r6, [r3, #0]
    d8de:	f00c fd89 	bl	1a3f4 <WsfTaskUnlock>
    d8e2:	4620      	mov	r0, r4
    d8e4:	b002      	add	sp, #8
    d8e6:	bd70      	pop	{r4, r5, r6, pc}
    d8e8:	240a      	movs	r4, #10
    d8ea:	e7f8      	b.n	d8de <AttsSetAttr+0x36>
    d8ec:	240d      	movs	r4, #13
    d8ee:	e7f6      	b.n	d8de <AttsSetAttr+0x36>

0000d8f0 <AttsGetAttr>:
    d8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d8f2:	460d      	mov	r5, r1
    d8f4:	a901      	add	r1, sp, #4
    d8f6:	4614      	mov	r4, r2
    d8f8:	f000 f842 	bl	d980 <attsFindByHandle>
    d8fc:	b138      	cbz	r0, d90e <AttsGetAttr+0x1e>
    d8fe:	6883      	ldr	r3, [r0, #8]
    d900:	881b      	ldrh	r3, [r3, #0]
    d902:	802b      	strh	r3, [r5, #0]
    d904:	6843      	ldr	r3, [r0, #4]
    d906:	6023      	str	r3, [r4, #0]
    d908:	2000      	movs	r0, #0
    d90a:	b003      	add	sp, #12
    d90c:	bd30      	pop	{r4, r5, pc}
    d90e:	200a      	movs	r0, #10
    d910:	e7fb      	b.n	d90a <AttsGetAttr+0x1a>

0000d912 <AttsErrorTest>:
    d912:	4b02      	ldr	r3, [pc, #8]	; (d91c <AttsErrorTest+0xa>)
    d914:	f883 0111 	strb.w	r0, [r3, #273]	; 0x111
    d918:	4770      	bx	lr
    d91a:	bf00      	nop
    d91c:	10002fd8 	.word	0x10002fd8

0000d920 <attsUuidCmp>:
    d920:	b510      	push	{r4, lr}
    d922:	4604      	mov	r4, r0
    d924:	4613      	mov	r3, r2
    d926:	7ba2      	ldrb	r2, [r4, #14]
    d928:	6800      	ldr	r0, [r0, #0]
    d92a:	07d2      	lsls	r2, r2, #31
    d92c:	d409      	bmi.n	d942 <attsUuidCmp+0x22>
    d92e:	2902      	cmp	r1, #2
    d930:	d10c      	bne.n	d94c <attsUuidCmp+0x2c>
    d932:	460a      	mov	r2, r1
    d934:	4619      	mov	r1, r3
    d936:	f7fe fbe3 	bl	c100 <memcmp>
    d93a:	fab0 f080 	clz	r0, r0
    d93e:	0940      	lsrs	r0, r0, #5
    d940:	bd10      	pop	{r4, pc}
    d942:	2910      	cmp	r1, #16
    d944:	d0f5      	beq.n	d932 <attsUuidCmp+0x12>
    d946:	4601      	mov	r1, r0
    d948:	4618      	mov	r0, r3
    d94a:	e002      	b.n	d952 <attsUuidCmp+0x32>
    d94c:	2910      	cmp	r1, #16
    d94e:	d1fa      	bne.n	d946 <attsUuidCmp+0x26>
    d950:	4619      	mov	r1, r3
    d952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d956:	f7fe bdc9 	b.w	c4ec <attUuidCmp16to128>

0000d95a <attsUuid16Cmp>:
    d95a:	2902      	cmp	r1, #2
    d95c:	4603      	mov	r3, r0
    d95e:	d10c      	bne.n	d97a <attsUuid16Cmp+0x20>
    d960:	7800      	ldrb	r0, [r0, #0]
    d962:	7811      	ldrb	r1, [r2, #0]
    d964:	4288      	cmp	r0, r1
    d966:	d106      	bne.n	d976 <attsUuid16Cmp+0x1c>
    d968:	7858      	ldrb	r0, [r3, #1]
    d96a:	7853      	ldrb	r3, [r2, #1]
    d96c:	1ac3      	subs	r3, r0, r3
    d96e:	4258      	negs	r0, r3
    d970:	4158      	adcs	r0, r3
    d972:	b2c0      	uxtb	r0, r0
    d974:	4770      	bx	lr
    d976:	2000      	movs	r0, #0
    d978:	e7fb      	b.n	d972 <attsUuid16Cmp+0x18>
    d97a:	4611      	mov	r1, r2
    d97c:	f7fe bdb6 	b.w	c4ec <attUuidCmp16to128>

0000d980 <attsFindByHandle>:
    d980:	b510      	push	{r4, lr}
    d982:	4b08      	ldr	r3, [pc, #32]	; (d9a4 <attsFindByHandle+0x24>)
    d984:	681b      	ldr	r3, [r3, #0]
    d986:	b90b      	cbnz	r3, d98c <attsFindByHandle+0xc>
    d988:	4618      	mov	r0, r3
    d98a:	e00a      	b.n	d9a2 <attsFindByHandle+0x22>
    d98c:	8a1a      	ldrh	r2, [r3, #16]
    d98e:	4282      	cmp	r2, r0
    d990:	d8f8      	bhi.n	d984 <attsFindByHandle+0x4>
    d992:	8a5c      	ldrh	r4, [r3, #18]
    d994:	4284      	cmp	r4, r0
    d996:	d3f5      	bcc.n	d984 <attsFindByHandle+0x4>
    d998:	600b      	str	r3, [r1, #0]
    d99a:	685b      	ldr	r3, [r3, #4]
    d99c:	1a80      	subs	r0, r0, r2
    d99e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d9a2:	bd10      	pop	{r4, pc}
    d9a4:	1000343c 	.word	0x1000343c

0000d9a8 <attsFindInRange>:
    d9a8:	b530      	push	{r4, r5, lr}
    d9aa:	4b0a      	ldr	r3, [pc, #40]	; (d9d4 <attsFindInRange+0x2c>)
    d9ac:	681b      	ldr	r3, [r3, #0]
    d9ae:	b90b      	cbnz	r3, d9b4 <attsFindInRange+0xc>
    d9b0:	4618      	mov	r0, r3
    d9b2:	e00d      	b.n	d9d0 <attsFindInRange+0x28>
    d9b4:	8a1c      	ldrh	r4, [r3, #16]
    d9b6:	4284      	cmp	r4, r0
    d9b8:	d902      	bls.n	d9c0 <attsFindInRange+0x18>
    d9ba:	428c      	cmp	r4, r1
    d9bc:	d8f6      	bhi.n	d9ac <attsFindInRange+0x4>
    d9be:	4620      	mov	r0, r4
    d9c0:	8a5d      	ldrh	r5, [r3, #18]
    d9c2:	4285      	cmp	r5, r0
    d9c4:	d3f2      	bcc.n	d9ac <attsFindInRange+0x4>
    d9c6:	685b      	ldr	r3, [r3, #4]
    d9c8:	1b04      	subs	r4, r0, r4
    d9ca:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    d9ce:	6014      	str	r4, [r2, #0]
    d9d0:	bd30      	pop	{r4, r5, pc}
    d9d2:	bf00      	nop
    d9d4:	1000343c 	.word	0x1000343c

0000d9d8 <attsPermissions>:
    d9d8:	420b      	tst	r3, r1
    d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9de:	4606      	mov	r6, r0
    d9e0:	460d      	mov	r5, r1
    d9e2:	4617      	mov	r7, r2
    d9e4:	461c      	mov	r4, r3
    d9e6:	d105      	bne.n	d9f4 <attsPermissions+0x1c>
    d9e8:	2901      	cmp	r1, #1
    d9ea:	bf0c      	ite	eq
    d9ec:	2002      	moveq	r0, #2
    d9ee:	2003      	movne	r0, #3
    d9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9f4:	2910      	cmp	r1, #16
    d9f6:	bf08      	it	eq
    d9f8:	091c      	lsreq	r4, r3, #4
    d9fa:	f014 0f0e 	tst.w	r4, #14
    d9fe:	d101      	bne.n	da04 <attsPermissions+0x2c>
    da00:	2000      	movs	r0, #0
    da02:	e7f5      	b.n	d9f0 <attsPermissions+0x18>
    da04:	f001 fe86 	bl	f714 <DmConnSecLevel>
    da08:	0722      	lsls	r2, r4, #28
    da0a:	d500      	bpl.n	da0e <attsPermissions+0x36>
    da0c:	b180      	cbz	r0, da30 <attsPermissions+0x58>
    da0e:	f004 030a 	and.w	r3, r4, #10
    da12:	2b0a      	cmp	r3, #10
    da14:	d101      	bne.n	da1a <attsPermissions+0x42>
    da16:	2801      	cmp	r0, #1
    da18:	d90a      	bls.n	da30 <attsPermissions+0x58>
    da1a:	0763      	lsls	r3, r4, #29
    da1c:	d5f0      	bpl.n	da00 <attsPermissions+0x28>
    da1e:	4b06      	ldr	r3, [pc, #24]	; (da38 <attsPermissions+0x60>)
    da20:	691b      	ldr	r3, [r3, #16]
    da22:	b13b      	cbz	r3, da34 <attsPermissions+0x5c>
    da24:	463a      	mov	r2, r7
    da26:	4629      	mov	r1, r5
    da28:	4630      	mov	r0, r6
    da2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da2e:	4718      	bx	r3
    da30:	2005      	movs	r0, #5
    da32:	e7dd      	b.n	d9f0 <attsPermissions+0x18>
    da34:	2008      	movs	r0, #8
    da36:	e7db      	b.n	d9f0 <attsPermissions+0x18>
    da38:	1000343c 	.word	0x1000343c

0000da3c <attsProcMtuReq>:
    da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da3e:	7a93      	ldrb	r3, [r2, #10]
    da40:	7a54      	ldrb	r4, [r2, #9]
    da42:	4d17      	ldr	r5, [pc, #92]	; (daa0 <attsProcMtuReq+0x64>)
    da44:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    da48:	b2a4      	uxth	r4, r4
    da4a:	682b      	ldr	r3, [r5, #0]
    da4c:	2c17      	cmp	r4, #23
    da4e:	bf38      	it	cc
    da50:	2417      	movcc	r4, #23
    da52:	889f      	ldrh	r7, [r3, #4]
    da54:	4606      	mov	r6, r0
    da56:	f007 fd47 	bl	154e8 <HciGetMaxRxAclLen>
    da5a:	3804      	subs	r0, #4
    da5c:	4287      	cmp	r7, r0
    da5e:	da1a      	bge.n	da96 <attsProcMtuReq+0x5a>
    da60:	682b      	ldr	r3, [r5, #0]
    da62:	889d      	ldrh	r5, [r3, #4]
    da64:	42a5      	cmp	r5, r4
    da66:	f04f 000b 	mov.w	r0, #11
    da6a:	bf28      	it	cs
    da6c:	4625      	movcs	r5, r4
    da6e:	f7fe fd7b 	bl	c568 <attMsgAlloc>
    da72:	4603      	mov	r3, r0
    da74:	b140      	cbz	r0, da88 <attsProcMtuReq+0x4c>
    da76:	0a29      	lsrs	r1, r5, #8
    da78:	2203      	movs	r2, #3
    da7a:	7202      	strb	r2, [r0, #8]
    da7c:	7245      	strb	r5, [r0, #9]
    da7e:	7281      	strb	r1, [r0, #10]
    da80:	8b31      	ldrh	r1, [r6, #24]
    da82:	2004      	movs	r0, #4
    da84:	f002 fd42 	bl	1050c <L2cDataReq>
    da88:	462a      	mov	r2, r5
    da8a:	4621      	mov	r1, r4
    da8c:	4630      	mov	r0, r6
    da8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    da92:	f7fe bd57 	b.w	c544 <attSetMtu>
    da96:	f007 fd27 	bl	154e8 <HciGetMaxRxAclLen>
    da9a:	1f05      	subs	r5, r0, #4
    da9c:	b2ad      	uxth	r5, r5
    da9e:	e7e1      	b.n	da64 <attsProcMtuReq+0x28>
    daa0:	1000239c 	.word	0x1000239c

0000daa4 <attsProcFindInfoReq>:
    daa4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    daa8:	7a93      	ldrb	r3, [r2, #10]
    daaa:	7a57      	ldrb	r7, [r2, #9]
    daac:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    dab0:	b2bf      	uxth	r7, r7
    dab2:	4680      	mov	r8, r0
    dab4:	2f00      	cmp	r7, #0
    dab6:	d076      	beq.n	dba6 <attsProcFindInfoReq+0x102>
    dab8:	7b13      	ldrb	r3, [r2, #12]
    daba:	f892 900b 	ldrb.w	r9, [r2, #11]
    dabe:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    dac2:	fa1f f989 	uxth.w	r9, r9
    dac6:	454f      	cmp	r7, r9
    dac8:	d86d      	bhi.n	dba6 <attsProcFindInfoReq+0x102>
    daca:	8b40      	ldrh	r0, [r0, #26]
    dacc:	3008      	adds	r0, #8
    dace:	b280      	uxth	r0, r0
    dad0:	f7fe fd4a 	bl	c568 <attMsgAlloc>
    dad4:	4606      	mov	r6, r0
    dad6:	2800      	cmp	r0, #0
    dad8:	d067      	beq.n	dbaa <attsProcFindInfoReq+0x106>
    dada:	2305      	movs	r3, #5
    dadc:	7203      	strb	r3, [r0, #8]
    dade:	2301      	movs	r3, #1
    dae0:	7243      	strb	r3, [r0, #9]
    dae2:	f100 040e 	add.w	r4, r0, #14
    dae6:	f64f 7aff 	movw	sl, #65535	; 0xffff
    daea:	4638      	mov	r0, r7
    daec:	aa01      	add	r2, sp, #4
    daee:	4649      	mov	r1, r9
    daf0:	1f25      	subs	r5, r4, #4
    daf2:	f7ff ff59 	bl	d9a8 <attsFindInRange>
    daf6:	b1d0      	cbz	r0, db2e <attsProcFindInfoReq+0x8a>
    daf8:	9b01      	ldr	r3, [sp, #4]
    dafa:	7b9b      	ldrb	r3, [r3, #14]
    dafc:	07db      	lsls	r3, r3, #31
    dafe:	d530      	bpl.n	db62 <attsProcFindInfoReq+0xbe>
    db00:	f106 030a 	add.w	r3, r6, #10
    db04:	429d      	cmp	r5, r3
    db06:	d112      	bne.n	db2e <attsProcFindInfoReq+0x8a>
    db08:	7028      	strb	r0, [r5, #0]
    db0a:	2302      	movs	r3, #2
    db0c:	0a00      	lsrs	r0, r0, #8
    db0e:	f805 3c01 	strb.w	r3, [r5, #-1]
    db12:	7068      	strb	r0, [r5, #1]
    db14:	9b01      	ldr	r3, [sp, #4]
    db16:	681b      	ldr	r3, [r3, #0]
    db18:	f106 020c 	add.w	r2, r6, #12
    db1c:	f103 0110 	add.w	r1, r3, #16
    db20:	f853 0b04 	ldr.w	r0, [r3], #4
    db24:	f842 0b04 	str.w	r0, [r2], #4
    db28:	428b      	cmp	r3, r1
    db2a:	d1f9      	bne.n	db20 <attsProcFindInfoReq+0x7c>
    db2c:	3512      	adds	r5, #18
    db2e:	f106 030a 	add.w	r3, r6, #10
    db32:	429d      	cmp	r5, r3
    db34:	d13b      	bne.n	dbae <attsProcFindInfoReq+0x10a>
    db36:	4630      	mov	r0, r6
    db38:	f009 ffaa 	bl	17a90 <WsfMsgFree>
    db3c:	240a      	movs	r4, #10
    db3e:	4640      	mov	r0, r8
    db40:	f7ff fe42 	bl	d7c8 <attsDiscBusy>
    db44:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    db48:	bb9c      	cbnz	r4, dbb2 <attsProcFindInfoReq+0x10e>
    db4a:	f106 0208 	add.w	r2, r6, #8
    db4e:	1aaa      	subs	r2, r5, r2
    db50:	4601      	mov	r1, r0
    db52:	4633      	mov	r3, r6
    db54:	b292      	uxth	r2, r2
    db56:	2004      	movs	r0, #4
    db58:	f002 fcd8 	bl	1050c <L2cDataReq>
    db5c:	b002      	add	sp, #8
    db5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db62:	f8b8 301a 	ldrh.w	r3, [r8, #26]
    db66:	3308      	adds	r3, #8
    db68:	4433      	add	r3, r6
    db6a:	429c      	cmp	r4, r3
    db6c:	4622      	mov	r2, r4
    db6e:	d8de      	bhi.n	db2e <attsProcFindInfoReq+0x8a>
    db70:	0a03      	lsrs	r3, r0, #8
    db72:	f804 0c04 	strb.w	r0, [r4, #-4]
    db76:	f804 3c03 	strb.w	r3, [r4, #-3]
    db7a:	9b01      	ldr	r3, [sp, #4]
    db7c:	681b      	ldr	r3, [r3, #0]
    db7e:	781b      	ldrb	r3, [r3, #0]
    db80:	f804 3c02 	strb.w	r3, [r4, #-2]
    db84:	9b01      	ldr	r3, [sp, #4]
    db86:	681b      	ldr	r3, [r3, #0]
    db88:	4550      	cmp	r0, sl
    db8a:	785b      	ldrb	r3, [r3, #1]
    db8c:	f804 3c01 	strb.w	r3, [r4, #-1]
    db90:	d007      	beq.n	dba2 <attsProcFindInfoReq+0xfe>
    db92:	3001      	adds	r0, #1
    db94:	b280      	uxth	r0, r0
    db96:	4581      	cmp	r9, r0
    db98:	f104 0404 	add.w	r4, r4, #4
    db9c:	d2a6      	bcs.n	daec <attsProcFindInfoReq+0x48>
    db9e:	4615      	mov	r5, r2
    dba0:	e7c5      	b.n	db2e <attsProcFindInfoReq+0x8a>
    dba2:	4625      	mov	r5, r4
    dba4:	e7c3      	b.n	db2e <attsProcFindInfoReq+0x8a>
    dba6:	2401      	movs	r4, #1
    dba8:	e7c9      	b.n	db3e <attsProcFindInfoReq+0x9a>
    dbaa:	2411      	movs	r4, #17
    dbac:	e7c7      	b.n	db3e <attsProcFindInfoReq+0x9a>
    dbae:	2400      	movs	r4, #0
    dbb0:	e7c5      	b.n	db3e <attsProcFindInfoReq+0x9a>
    dbb2:	4623      	mov	r3, r4
    dbb4:	463a      	mov	r2, r7
    dbb6:	2104      	movs	r1, #4
    dbb8:	f7ff fd88 	bl	d6cc <attsErrRsp>
    dbbc:	e7ce      	b.n	db5c <attsProcFindInfoReq+0xb8>

0000dbbe <attsProcReadReq>:
    dbbe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    dbc2:	7a93      	ldrb	r3, [r2, #10]
    dbc4:	7a54      	ldrb	r4, [r2, #9]
    dbc6:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dbca:	b2a4      	uxth	r4, r4
    dbcc:	4606      	mov	r6, r0
    dbce:	a903      	add	r1, sp, #12
    dbd0:	4620      	mov	r0, r4
    dbd2:	f7ff fed5 	bl	d980 <attsFindByHandle>
    dbd6:	4605      	mov	r5, r0
    dbd8:	2800      	cmp	r0, #0
    dbda:	d047      	beq.n	dc6c <attsProcReadReq+0xae>
    dbdc:	7bc3      	ldrb	r3, [r0, #15]
    dbde:	7f30      	ldrb	r0, [r6, #28]
    dbe0:	4622      	mov	r2, r4
    dbe2:	2101      	movs	r1, #1
    dbe4:	f7ff fef8 	bl	d9d8 <attsPermissions>
    dbe8:	4603      	mov	r3, r0
    dbea:	b960      	cbnz	r0, dc06 <attsProcReadReq+0x48>
    dbec:	7baa      	ldrb	r2, [r5, #14]
    dbee:	0751      	lsls	r1, r2, #29
    dbf0:	d50f      	bpl.n	dc12 <attsProcReadReq+0x54>
    dbf2:	9903      	ldr	r1, [sp, #12]
    dbf4:	688f      	ldr	r7, [r1, #8]
    dbf6:	b167      	cbz	r7, dc12 <attsProcReadReq+0x54>
    dbf8:	7f30      	ldrb	r0, [r6, #28]
    dbfa:	9500      	str	r5, [sp, #0]
    dbfc:	220a      	movs	r2, #10
    dbfe:	4621      	mov	r1, r4
    dc00:	47b8      	blx	r7
    dc02:	4603      	mov	r3, r0
    dc04:	b138      	cbz	r0, dc16 <attsProcReadReq+0x58>
    dc06:	4622      	mov	r2, r4
    dc08:	210a      	movs	r1, #10
    dc0a:	8b30      	ldrh	r0, [r6, #24]
    dc0c:	f7ff fd5e 	bl	d6cc <attsErrRsp>
    dc10:	e010      	b.n	dc34 <attsProcReadReq+0x76>
    dc12:	0693      	lsls	r3, r2, #26
    dc14:	d411      	bmi.n	dc3a <attsProcReadReq+0x7c>
    dc16:	68ab      	ldr	r3, [r5, #8]
    dc18:	8b74      	ldrh	r4, [r6, #26]
    dc1a:	881a      	ldrh	r2, [r3, #0]
    dc1c:	3c01      	subs	r4, #1
    dc1e:	4294      	cmp	r4, r2
    dc20:	bfa8      	it	ge
    dc22:	4614      	movge	r4, r2
    dc24:	b2a7      	uxth	r7, r4
    dc26:	f107 0009 	add.w	r0, r7, #9
    dc2a:	b280      	uxth	r0, r0
    dc2c:	f7fe fc9c 	bl	c568 <attMsgAlloc>
    dc30:	4680      	mov	r8, r0
    dc32:	b960      	cbnz	r0, dc4e <attsProcReadReq+0x90>
    dc34:	b004      	add	sp, #16
    dc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc3a:	4b0d      	ldr	r3, [pc, #52]	; (dc70 <attsProcReadReq+0xb2>)
    dc3c:	695f      	ldr	r7, [r3, #20]
    dc3e:	2f00      	cmp	r7, #0
    dc40:	d0e9      	beq.n	dc16 <attsProcReadReq+0x58>
    dc42:	686b      	ldr	r3, [r5, #4]
    dc44:	7f30      	ldrb	r0, [r6, #28]
    dc46:	4622      	mov	r2, r4
    dc48:	2105      	movs	r1, #5
    dc4a:	47b8      	blx	r7
    dc4c:	e7d9      	b.n	dc02 <attsProcReadReq+0x44>
    dc4e:	230b      	movs	r3, #11
    dc50:	7203      	strb	r3, [r0, #8]
    dc52:	b2a2      	uxth	r2, r4
    dc54:	6869      	ldr	r1, [r5, #4]
    dc56:	3009      	adds	r0, #9
    dc58:	f7fe fa82 	bl	c160 <memcpy>
    dc5c:	1c7a      	adds	r2, r7, #1
    dc5e:	4643      	mov	r3, r8
    dc60:	b292      	uxth	r2, r2
    dc62:	8b31      	ldrh	r1, [r6, #24]
    dc64:	2004      	movs	r0, #4
    dc66:	f002 fc51 	bl	1050c <L2cDataReq>
    dc6a:	e7e3      	b.n	dc34 <attsProcReadReq+0x76>
    dc6c:	2301      	movs	r3, #1
    dc6e:	e7ca      	b.n	dc06 <attsProcReadReq+0x48>
    dc70:	1000343c 	.word	0x1000343c

0000dc74 <attsFindUuidInRange>:
    dc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dc78:	4699      	mov	r9, r3
    dc7a:	4b1a      	ldr	r3, [pc, #104]	; (dce4 <attsFindUuidInRange+0x70>)
    dc7c:	9e08      	ldr	r6, [sp, #32]
    dc7e:	681d      	ldr	r5, [r3, #0]
    dc80:	460f      	mov	r7, r1
    dc82:	4690      	mov	r8, r2
    dc84:	4604      	mov	r4, r0
    dc86:	f64f 7aff 	movw	sl, #65535	; 0xffff
    dc8a:	b90d      	cbnz	r5, dc90 <attsFindUuidInRange+0x1c>
    dc8c:	462c      	mov	r4, r5
    dc8e:	e025      	b.n	dcdc <attsFindUuidInRange+0x68>
    dc90:	8a2a      	ldrh	r2, [r5, #16]
    dc92:	42a2      	cmp	r2, r4
    dc94:	d90c      	bls.n	dcb0 <attsFindUuidInRange+0x3c>
    dc96:	42ba      	cmp	r2, r7
    dc98:	d909      	bls.n	dcae <attsFindUuidInRange+0x3a>
    dc9a:	682d      	ldr	r5, [r5, #0]
    dc9c:	e7f5      	b.n	dc8a <attsFindUuidInRange+0x16>
    dc9e:	4554      	cmp	r4, sl
    dca0:	d0fb      	beq.n	dc9a <attsFindUuidInRange+0x26>
    dca2:	6833      	ldr	r3, [r6, #0]
    dca4:	3401      	adds	r4, #1
    dca6:	3310      	adds	r3, #16
    dca8:	b2a4      	uxth	r4, r4
    dcaa:	6033      	str	r3, [r6, #0]
    dcac:	e008      	b.n	dcc0 <attsFindUuidInRange+0x4c>
    dcae:	4614      	mov	r4, r2
    dcb0:	8a6b      	ldrh	r3, [r5, #18]
    dcb2:	42a3      	cmp	r3, r4
    dcb4:	d3f1      	bcc.n	dc9a <attsFindUuidInRange+0x26>
    dcb6:	686b      	ldr	r3, [r5, #4]
    dcb8:	1aa2      	subs	r2, r4, r2
    dcba:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    dcbe:	6032      	str	r2, [r6, #0]
    dcc0:	8a6b      	ldrh	r3, [r5, #18]
    dcc2:	42a3      	cmp	r3, r4
    dcc4:	d3e9      	bcc.n	dc9a <attsFindUuidInRange+0x26>
    dcc6:	42bc      	cmp	r4, r7
    dcc8:	d8e7      	bhi.n	dc9a <attsFindUuidInRange+0x26>
    dcca:	464a      	mov	r2, r9
    dccc:	4641      	mov	r1, r8
    dcce:	6830      	ldr	r0, [r6, #0]
    dcd0:	f7ff fe26 	bl	d920 <attsUuidCmp>
    dcd4:	2800      	cmp	r0, #0
    dcd6:	d0e2      	beq.n	dc9e <attsFindUuidInRange+0x2a>
    dcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcda:	601d      	str	r5, [r3, #0]
    dcdc:	4620      	mov	r0, r4
    dcde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dce2:	bf00      	nop
    dce4:	1000343c 	.word	0x1000343c

0000dce8 <attsFindServiceGroupEnd>:
    dce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dcea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    dcee:	f8ad 3000 	strh.w	r3, [sp]
    dcf2:	4b1d      	ldr	r3, [pc, #116]	; (dd68 <attsFindServiceGroupEnd+0x80>)
    dcf4:	881b      	ldrh	r3, [r3, #0]
    dcf6:	f8ad 3004 	strh.w	r3, [sp, #4]
    dcfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dcfe:	4298      	cmp	r0, r3
    dd00:	d104      	bne.n	dd0c <attsFindServiceGroupEnd+0x24>
    dd02:	f64f 75ff 	movw	r5, #65535	; 0xffff
    dd06:	4628      	mov	r0, r5
    dd08:	b003      	add	sp, #12
    dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd0c:	4b17      	ldr	r3, [pc, #92]	; (dd6c <attsFindServiceGroupEnd+0x84>)
    dd0e:	1c44      	adds	r4, r0, #1
    dd10:	681f      	ldr	r7, [r3, #0]
    dd12:	b2a4      	uxth	r4, r4
    dd14:	4605      	mov	r5, r0
    dd16:	2f00      	cmp	r7, #0
    dd18:	d0f3      	beq.n	dd02 <attsFindServiceGroupEnd+0x1a>
    dd1a:	8a3e      	ldrh	r6, [r7, #16]
    dd1c:	8a7b      	ldrh	r3, [r7, #18]
    dd1e:	42b4      	cmp	r4, r6
    dd20:	bf38      	it	cc
    dd22:	4634      	movcc	r4, r6
    dd24:	42a3      	cmp	r3, r4
    dd26:	d306      	bcc.n	dd36 <attsFindServiceGroupEnd+0x4e>
    dd28:	1ba3      	subs	r3, r4, r6
    dd2a:	687e      	ldr	r6, [r7, #4]
    dd2c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    dd30:	8a7b      	ldrh	r3, [r7, #18]
    dd32:	42a3      	cmp	r3, r4
    dd34:	d201      	bcs.n	dd3a <attsFindServiceGroupEnd+0x52>
    dd36:	683f      	ldr	r7, [r7, #0]
    dd38:	e7ed      	b.n	dd16 <attsFindServiceGroupEnd+0x2e>
    dd3a:	466a      	mov	r2, sp
    dd3c:	2102      	movs	r1, #2
    dd3e:	4630      	mov	r0, r6
    dd40:	f7ff fdee 	bl	d920 <attsUuidCmp>
    dd44:	2800      	cmp	r0, #0
    dd46:	d1de      	bne.n	dd06 <attsFindServiceGroupEnd+0x1e>
    dd48:	aa01      	add	r2, sp, #4
    dd4a:	2102      	movs	r1, #2
    dd4c:	4630      	mov	r0, r6
    dd4e:	f7ff fde7 	bl	d920 <attsUuidCmp>
    dd52:	2800      	cmp	r0, #0
    dd54:	d1d7      	bne.n	dd06 <attsFindServiceGroupEnd+0x1e>
    dd56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd5a:	429c      	cmp	r4, r3
    dd5c:	d0d1      	beq.n	dd02 <attsFindServiceGroupEnd+0x1a>
    dd5e:	1c63      	adds	r3, r4, #1
    dd60:	4625      	mov	r5, r4
    dd62:	3610      	adds	r6, #16
    dd64:	b29c      	uxth	r4, r3
    dd66:	e7e3      	b.n	dd30 <attsFindServiceGroupEnd+0x48>
    dd68:	00021eec 	.word	0x00021eec
    dd6c:	1000343c 	.word	0x1000343c

0000dd70 <attsProcReadBlobReq>:
    dd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd74:	7a93      	ldrb	r3, [r2, #10]
    dd76:	7a54      	ldrb	r4, [r2, #9]
    dd78:	7ad5      	ldrb	r5, [r2, #11]
    dd7a:	f892 800c 	ldrb.w	r8, [r2, #12]
    dd7e:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    dd82:	b085      	sub	sp, #20
    dd84:	b2a4      	uxth	r4, r4
    dd86:	4607      	mov	r7, r0
    dd88:	a903      	add	r1, sp, #12
    dd8a:	4620      	mov	r0, r4
    dd8c:	f7ff fdf8 	bl	d980 <attsFindByHandle>
    dd90:	4606      	mov	r6, r0
    dd92:	2800      	cmp	r0, #0
    dd94:	d057      	beq.n	de46 <attsProcReadBlobReq+0xd6>
    dd96:	7bc3      	ldrb	r3, [r0, #15]
    dd98:	7f38      	ldrb	r0, [r7, #28]
    dd9a:	4622      	mov	r2, r4
    dd9c:	2101      	movs	r1, #1
    dd9e:	f7ff fe1b 	bl	d9d8 <attsPermissions>
    dda2:	b9b0      	cbnz	r0, ddd2 <attsProcReadBlobReq+0x62>
    dda4:	68b3      	ldr	r3, [r6, #8]
    dda6:	eb05 2508 	add.w	r5, r5, r8, lsl #8
    ddaa:	881b      	ldrh	r3, [r3, #0]
    ddac:	b2ad      	uxth	r5, r5
    ddae:	42ab      	cmp	r3, r5
    ddb0:	d34b      	bcc.n	de4a <attsProcReadBlobReq+0xda>
    ddb2:	7bb3      	ldrb	r3, [r6, #14]
    ddb4:	075a      	lsls	r2, r3, #29
    ddb6:	d513      	bpl.n	dde0 <attsProcReadBlobReq+0x70>
    ddb8:	9a03      	ldr	r2, [sp, #12]
    ddba:	f8d2 8008 	ldr.w	r8, [r2, #8]
    ddbe:	f1b8 0f00 	cmp.w	r8, #0
    ddc2:	d00d      	beq.n	dde0 <attsProcReadBlobReq+0x70>
    ddc4:	7f38      	ldrb	r0, [r7, #28]
    ddc6:	9600      	str	r6, [sp, #0]
    ddc8:	462b      	mov	r3, r5
    ddca:	220c      	movs	r2, #12
    ddcc:	4621      	mov	r1, r4
    ddce:	47c0      	blx	r8
    ddd0:	b140      	cbz	r0, dde4 <attsProcReadBlobReq+0x74>
    ddd2:	4603      	mov	r3, r0
    ddd4:	4622      	mov	r2, r4
    ddd6:	210c      	movs	r1, #12
    ddd8:	8b38      	ldrh	r0, [r7, #24]
    ddda:	f7ff fc77 	bl	d6cc <attsErrRsp>
    ddde:	e012      	b.n	de06 <attsProcReadBlobReq+0x96>
    dde0:	069b      	lsls	r3, r3, #26
    dde2:	d413      	bmi.n	de0c <attsProcReadBlobReq+0x9c>
    dde4:	68b3      	ldr	r3, [r6, #8]
    dde6:	8b7a      	ldrh	r2, [r7, #26]
    dde8:	881c      	ldrh	r4, [r3, #0]
    ddea:	3a01      	subs	r2, #1
    ddec:	1b64      	subs	r4, r4, r5
    ddee:	4294      	cmp	r4, r2
    ddf0:	bfa8      	it	ge
    ddf2:	4614      	movge	r4, r2
    ddf4:	fa1f f884 	uxth.w	r8, r4
    ddf8:	f108 0009 	add.w	r0, r8, #9
    ddfc:	b280      	uxth	r0, r0
    ddfe:	f7fe fbb3 	bl	c568 <attMsgAlloc>
    de02:	4681      	mov	r9, r0
    de04:	b970      	cbnz	r0, de24 <attsProcReadBlobReq+0xb4>
    de06:	b005      	add	sp, #20
    de08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de0c:	4b10      	ldr	r3, [pc, #64]	; (de50 <attsProcReadBlobReq+0xe0>)
    de0e:	f8d3 8014 	ldr.w	r8, [r3, #20]
    de12:	f1b8 0f00 	cmp.w	r8, #0
    de16:	d0e5      	beq.n	dde4 <attsProcReadBlobReq+0x74>
    de18:	6873      	ldr	r3, [r6, #4]
    de1a:	7f38      	ldrb	r0, [r7, #28]
    de1c:	4622      	mov	r2, r4
    de1e:	2105      	movs	r1, #5
    de20:	47c0      	blx	r8
    de22:	e7d5      	b.n	ddd0 <attsProcReadBlobReq+0x60>
    de24:	230d      	movs	r3, #13
    de26:	7203      	strb	r3, [r0, #8]
    de28:	6871      	ldr	r1, [r6, #4]
    de2a:	b2a2      	uxth	r2, r4
    de2c:	4429      	add	r1, r5
    de2e:	3009      	adds	r0, #9
    de30:	f7fe f996 	bl	c160 <memcpy>
    de34:	f108 0201 	add.w	r2, r8, #1
    de38:	464b      	mov	r3, r9
    de3a:	b292      	uxth	r2, r2
    de3c:	8b39      	ldrh	r1, [r7, #24]
    de3e:	2004      	movs	r0, #4
    de40:	f002 fb64 	bl	1050c <L2cDataReq>
    de44:	e7df      	b.n	de06 <attsProcReadBlobReq+0x96>
    de46:	2001      	movs	r0, #1
    de48:	e7c3      	b.n	ddd2 <attsProcReadBlobReq+0x62>
    de4a:	2007      	movs	r0, #7
    de4c:	e7c1      	b.n	ddd2 <attsProcReadBlobReq+0x62>
    de4e:	bf00      	nop
    de50:	1000343c 	.word	0x1000343c

0000de54 <attsProcFindTypeReq>:
    de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de58:	7a93      	ldrb	r3, [r2, #10]
    de5a:	7a55      	ldrb	r5, [r2, #9]
    de5c:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    de60:	b2ad      	uxth	r5, r5
    de62:	b087      	sub	sp, #28
    de64:	4682      	mov	sl, r0
    de66:	4689      	mov	r9, r1
    de68:	4616      	mov	r6, r2
    de6a:	2d00      	cmp	r5, #0
    de6c:	d075      	beq.n	df5a <attsProcFindTypeReq+0x106>
    de6e:	7b13      	ldrb	r3, [r2, #12]
    de70:	f892 800b 	ldrb.w	r8, [r2, #11]
    de74:	eb08 2803 	add.w	r8, r8, r3, lsl #8
    de78:	fa1f f888 	uxth.w	r8, r8
    de7c:	4545      	cmp	r5, r8
    de7e:	d86c      	bhi.n	df5a <attsProcFindTypeReq+0x106>
    de80:	8b40      	ldrh	r0, [r0, #26]
    de82:	3008      	adds	r0, #8
    de84:	b280      	uxth	r0, r0
    de86:	f7fe fb6f 	bl	c568 <attMsgAlloc>
    de8a:	4607      	mov	r7, r0
    de8c:	2800      	cmp	r0, #0
    de8e:	d066      	beq.n	df5e <attsProcFindTypeReq+0x10a>
    de90:	2307      	movs	r3, #7
    de92:	f100 0409 	add.w	r4, r0, #9
    de96:	7203      	strb	r3, [r0, #8]
    de98:	f1a9 0907 	sub.w	r9, r9, #7
    de9c:	f106 030d 	add.w	r3, r6, #13
    dea0:	fa1f f989 	uxth.w	r9, r9
    dea4:	4628      	mov	r0, r5
    dea6:	9403      	str	r4, [sp, #12]
    dea8:	9302      	str	r3, [sp, #8]
    deaa:	ab05      	add	r3, sp, #20
    deac:	9301      	str	r3, [sp, #4]
    deae:	ab04      	add	r3, sp, #16
    deb0:	9300      	str	r3, [sp, #0]
    deb2:	2202      	movs	r2, #2
    deb4:	9b02      	ldr	r3, [sp, #8]
    deb6:	4641      	mov	r1, r8
    deb8:	f7ff fedc 	bl	dc74 <attsFindUuidInRange>
    debc:	4683      	mov	fp, r0
    debe:	b9c8      	cbnz	r0, def4 <attsProcFindTypeReq+0xa0>
    dec0:	9b03      	ldr	r3, [sp, #12]
    dec2:	429c      	cmp	r4, r3
    dec4:	d14d      	bne.n	df62 <attsProcFindTypeReq+0x10e>
    dec6:	4638      	mov	r0, r7
    dec8:	f009 fde2 	bl	17a90 <WsfMsgFree>
    decc:	260a      	movs	r6, #10
    dece:	4650      	mov	r0, sl
    ded0:	f7ff fc7a 	bl	d7c8 <attsDiscBusy>
    ded4:	f8ba 0018 	ldrh.w	r0, [sl, #24]
    ded8:	2e00      	cmp	r6, #0
    deda:	d144      	bne.n	df66 <attsProcFindTypeReq+0x112>
    dedc:	f107 0208 	add.w	r2, r7, #8
    dee0:	1aa2      	subs	r2, r4, r2
    dee2:	4601      	mov	r1, r0
    dee4:	463b      	mov	r3, r7
    dee6:	b292      	uxth	r2, r2
    dee8:	2004      	movs	r0, #4
    deea:	f002 fb0f 	bl	1050c <L2cDataReq>
    deee:	b007      	add	sp, #28
    def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    def4:	9904      	ldr	r1, [sp, #16]
    def6:	7bca      	ldrb	r2, [r1, #15]
    def8:	07d3      	lsls	r3, r2, #31
    defa:	d526      	bpl.n	df4a <attsProcFindTypeReq+0xf6>
    defc:	f1b9 0f00 	cmp.w	r9, #0
    df00:	d00a      	beq.n	df18 <attsProcFindTypeReq+0xc4>
    df02:	688a      	ldr	r2, [r1, #8]
    df04:	8812      	ldrh	r2, [r2, #0]
    df06:	454a      	cmp	r2, r9
    df08:	d11f      	bne.n	df4a <attsProcFindTypeReq+0xf6>
    df0a:	464a      	mov	r2, r9
    df0c:	6849      	ldr	r1, [r1, #4]
    df0e:	f106 000f 	add.w	r0, r6, #15
    df12:	f7fe f8f5 	bl	c100 <memcmp>
    df16:	b9c0      	cbnz	r0, df4a <attsProcFindTypeReq+0xf6>
    df18:	7b72      	ldrb	r2, [r6, #13]
    df1a:	b9e2      	cbnz	r2, df56 <attsProcFindTypeReq+0x102>
    df1c:	7bb2      	ldrb	r2, [r6, #14]
    df1e:	2a28      	cmp	r2, #40	; 0x28
    df20:	4658      	mov	r0, fp
    df22:	d101      	bne.n	df28 <attsProcFindTypeReq+0xd4>
    df24:	f7ff fee0 	bl	dce8 <attsFindServiceGroupEnd>
    df28:	f8ba 201a 	ldrh.w	r2, [sl, #26]
    df2c:	3208      	adds	r2, #8
    df2e:	1d21      	adds	r1, r4, #4
    df30:	443a      	add	r2, r7
    df32:	4291      	cmp	r1, r2
    df34:	d8c4      	bhi.n	dec0 <attsProcFindTypeReq+0x6c>
    df36:	ea4f 231b 	mov.w	r3, fp, lsr #8
    df3a:	7063      	strb	r3, [r4, #1]
    df3c:	0a03      	lsrs	r3, r0, #8
    df3e:	f884 b000 	strb.w	fp, [r4]
    df42:	70a0      	strb	r0, [r4, #2]
    df44:	70e3      	strb	r3, [r4, #3]
    df46:	4683      	mov	fp, r0
    df48:	460c      	mov	r4, r1
    df4a:	45c3      	cmp	fp, r8
    df4c:	d2b8      	bcs.n	dec0 <attsProcFindTypeReq+0x6c>
    df4e:	f10b 0001 	add.w	r0, fp, #1
    df52:	b280      	uxth	r0, r0
    df54:	e7a9      	b.n	deaa <attsProcFindTypeReq+0x56>
    df56:	4658      	mov	r0, fp
    df58:	e7e6      	b.n	df28 <attsProcFindTypeReq+0xd4>
    df5a:	2601      	movs	r6, #1
    df5c:	e7b7      	b.n	dece <attsProcFindTypeReq+0x7a>
    df5e:	2611      	movs	r6, #17
    df60:	e7b5      	b.n	dece <attsProcFindTypeReq+0x7a>
    df62:	2600      	movs	r6, #0
    df64:	e7b3      	b.n	dece <attsProcFindTypeReq+0x7a>
    df66:	4633      	mov	r3, r6
    df68:	462a      	mov	r2, r5
    df6a:	2106      	movs	r1, #6
    df6c:	f7ff fbae 	bl	d6cc <attsErrRsp>
    df70:	e7bd      	b.n	deee <attsProcFindTypeReq+0x9a>

0000df72 <attsProcReadTypeReq>:
    df72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df76:	3905      	subs	r1, #5
    df78:	4606      	mov	r6, r0
    df7a:	7a54      	ldrb	r4, [r2, #9]
    df7c:	7a90      	ldrb	r0, [r2, #10]
    df7e:	fa5f fa81 	uxtb.w	sl, r1
    df82:	eb04 2400 	add.w	r4, r4, r0, lsl #8
    df86:	f1ba 0f02 	cmp.w	sl, #2
    df8a:	b089      	sub	sp, #36	; 0x24
    df8c:	b2a4      	uxth	r4, r4
    df8e:	d003      	beq.n	df98 <attsProcReadTypeReq+0x26>
    df90:	f1ba 0f10 	cmp.w	sl, #16
    df94:	f040 80d4 	bne.w	e140 <attsProcReadTypeReq+0x1ce>
    df98:	2c00      	cmp	r4, #0
    df9a:	f000 80d3 	beq.w	e144 <attsProcReadTypeReq+0x1d2>
    df9e:	7b13      	ldrb	r3, [r2, #12]
    dfa0:	f892 900b 	ldrb.w	r9, [r2, #11]
    dfa4:	eb09 2903 	add.w	r9, r9, r3, lsl #8
    dfa8:	fa1f f989 	uxth.w	r9, r9
    dfac:	454c      	cmp	r4, r9
    dfae:	f200 80c9 	bhi.w	e144 <attsProcReadTypeReq+0x1d2>
    dfb2:	f102 030d 	add.w	r3, r2, #13
    dfb6:	9304      	str	r3, [sp, #16]
    dfb8:	ab07      	add	r3, sp, #28
    dfba:	9301      	str	r3, [sp, #4]
    dfbc:	ab06      	add	r3, sp, #24
    dfbe:	9300      	str	r3, [sp, #0]
    dfc0:	4620      	mov	r0, r4
    dfc2:	9b04      	ldr	r3, [sp, #16]
    dfc4:	4652      	mov	r2, sl
    dfc6:	4649      	mov	r1, r9
    dfc8:	f7ff fe54 	bl	dc74 <attsFindUuidInRange>
    dfcc:	4604      	mov	r4, r0
    dfce:	2800      	cmp	r0, #0
    dfd0:	f000 80ba 	beq.w	e148 <attsProcReadTypeReq+0x1d6>
    dfd4:	9b06      	ldr	r3, [sp, #24]
    dfd6:	4602      	mov	r2, r0
    dfd8:	7bdb      	ldrb	r3, [r3, #15]
    dfda:	7f30      	ldrb	r0, [r6, #28]
    dfdc:	2101      	movs	r1, #1
    dfde:	f7ff fcfb 	bl	d9d8 <attsPermissions>
    dfe2:	4603      	mov	r3, r0
    dfe4:	b9c0      	cbnz	r0, e018 <attsProcReadTypeReq+0xa6>
    dfe6:	9a06      	ldr	r2, [sp, #24]
    dfe8:	7b91      	ldrb	r1, [r2, #14]
    dfea:	074d      	lsls	r5, r1, #29
    dfec:	d50a      	bpl.n	e004 <attsProcReadTypeReq+0x92>
    dfee:	9807      	ldr	r0, [sp, #28]
    dff0:	6885      	ldr	r5, [r0, #8]
    dff2:	b13d      	cbz	r5, e004 <attsProcReadTypeReq+0x92>
    dff4:	9200      	str	r2, [sp, #0]
    dff6:	7f30      	ldrb	r0, [r6, #28]
    dff8:	2208      	movs	r2, #8
    dffa:	4621      	mov	r1, r4
    dffc:	47a8      	blx	r5
    dffe:	4603      	mov	r3, r0
    e000:	b950      	cbnz	r0, e018 <attsProcReadTypeReq+0xa6>
    e002:	e001      	b.n	e008 <attsProcReadTypeReq+0x96>
    e004:	0688      	lsls	r0, r1, #26
    e006:	d40d      	bmi.n	e024 <attsProcReadTypeReq+0xb2>
    e008:	8b70      	ldrh	r0, [r6, #26]
    e00a:	3008      	adds	r0, #8
    e00c:	b280      	uxth	r0, r0
    e00e:	f7fe faab 	bl	c568 <attMsgAlloc>
    e012:	4680      	mov	r8, r0
    e014:	b980      	cbnz	r0, e038 <attsProcReadTypeReq+0xc6>
    e016:	2311      	movs	r3, #17
    e018:	4622      	mov	r2, r4
    e01a:	2108      	movs	r1, #8
    e01c:	8b30      	ldrh	r0, [r6, #24]
    e01e:	f7ff fb55 	bl	d6cc <attsErrRsp>
    e022:	e057      	b.n	e0d4 <attsProcReadTypeReq+0x162>
    e024:	4b49      	ldr	r3, [pc, #292]	; (e14c <attsProcReadTypeReq+0x1da>)
    e026:	695d      	ldr	r5, [r3, #20]
    e028:	2d00      	cmp	r5, #0
    e02a:	d0ed      	beq.n	e008 <attsProcReadTypeReq+0x96>
    e02c:	6853      	ldr	r3, [r2, #4]
    e02e:	7f30      	ldrb	r0, [r6, #28]
    e030:	4622      	mov	r2, r4
    e032:	2105      	movs	r1, #5
    e034:	47a8      	blx	r5
    e036:	e7e2      	b.n	dffe <attsProcReadTypeReq+0x8c>
    e038:	2309      	movs	r3, #9
    e03a:	7203      	strb	r3, [r0, #8]
    e03c:	9b06      	ldr	r3, [sp, #24]
    e03e:	8b77      	ldrh	r7, [r6, #26]
    e040:	689a      	ldr	r2, [r3, #8]
    e042:	8812      	ldrh	r2, [r2, #0]
    e044:	7284      	strb	r4, [r0, #10]
    e046:	3f04      	subs	r7, #4
    e048:	4297      	cmp	r7, r2
    e04a:	bf28      	it	cs
    e04c:	4617      	movcs	r7, r2
    e04e:	b2ff      	uxtb	r7, r7
    e050:	1cba      	adds	r2, r7, #2
    e052:	9205      	str	r2, [sp, #20]
    e054:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e058:	7242      	strb	r2, [r0, #9]
    e05a:	0a22      	lsrs	r2, r4, #8
    e05c:	72c2      	strb	r2, [r0, #11]
    e05e:	f100 050c 	add.w	r5, r0, #12
    e062:	6859      	ldr	r1, [r3, #4]
    e064:	4628      	mov	r0, r5
    e066:	463a      	mov	r2, r7
    e068:	f7fe f87a 	bl	c160 <memcpy>
    e06c:	3401      	adds	r4, #1
    e06e:	1cbb      	adds	r3, r7, #2
    e070:	b2a0      	uxth	r0, r4
    e072:	441d      	add	r5, r3
    e074:	1eab      	subs	r3, r5, #2
    e076:	9303      	str	r3, [sp, #12]
    e078:	ab07      	add	r3, sp, #28
    e07a:	9301      	str	r3, [sp, #4]
    e07c:	ab06      	add	r3, sp, #24
    e07e:	9300      	str	r3, [sp, #0]
    e080:	4652      	mov	r2, sl
    e082:	9b04      	ldr	r3, [sp, #16]
    e084:	4649      	mov	r1, r9
    e086:	f7ff fdf5 	bl	dc74 <attsFindUuidInRange>
    e08a:	4604      	mov	r4, r0
    e08c:	b1c0      	cbz	r0, e0c0 <attsProcReadTypeReq+0x14e>
    e08e:	9b06      	ldr	r3, [sp, #24]
    e090:	7b9a      	ldrb	r2, [r3, #14]
    e092:	0751      	lsls	r1, r2, #29
    e094:	d50d      	bpl.n	e0b2 <attsProcReadTypeReq+0x140>
    e096:	9907      	ldr	r1, [sp, #28]
    e098:	f8d1 b008 	ldr.w	fp, [r1, #8]
    e09c:	f1bb 0f00 	cmp.w	fp, #0
    e0a0:	d007      	beq.n	e0b2 <attsProcReadTypeReq+0x140>
    e0a2:	9300      	str	r3, [sp, #0]
    e0a4:	7f30      	ldrb	r0, [r6, #28]
    e0a6:	2300      	movs	r3, #0
    e0a8:	2208      	movs	r2, #8
    e0aa:	4621      	mov	r1, r4
    e0ac:	47d8      	blx	fp
    e0ae:	b110      	cbz	r0, e0b6 <attsProcReadTypeReq+0x144>
    e0b0:	e006      	b.n	e0c0 <attsProcReadTypeReq+0x14e>
    e0b2:	0692      	lsls	r2, r2, #26
    e0b4:	d411      	bmi.n	e0da <attsProcReadTypeReq+0x168>
    e0b6:	9b06      	ldr	r3, [sp, #24]
    e0b8:	689a      	ldr	r2, [r3, #8]
    e0ba:	8812      	ldrh	r2, [r2, #0]
    e0bc:	42ba      	cmp	r2, r7
    e0be:	d018      	beq.n	e0f2 <attsProcReadTypeReq+0x180>
    e0c0:	9b03      	ldr	r3, [sp, #12]
    e0c2:	8b31      	ldrh	r1, [r6, #24]
    e0c4:	f108 0208 	add.w	r2, r8, #8
    e0c8:	1a9a      	subs	r2, r3, r2
    e0ca:	b292      	uxth	r2, r2
    e0cc:	4643      	mov	r3, r8
    e0ce:	2004      	movs	r0, #4
    e0d0:	f002 fa1c 	bl	1050c <L2cDataReq>
    e0d4:	b009      	add	sp, #36	; 0x24
    e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0da:	4a1c      	ldr	r2, [pc, #112]	; (e14c <attsProcReadTypeReq+0x1da>)
    e0dc:	f8d2 b014 	ldr.w	fp, [r2, #20]
    e0e0:	f1bb 0f00 	cmp.w	fp, #0
    e0e4:	d0e7      	beq.n	e0b6 <attsProcReadTypeReq+0x144>
    e0e6:	685b      	ldr	r3, [r3, #4]
    e0e8:	7f30      	ldrb	r0, [r6, #28]
    e0ea:	4622      	mov	r2, r4
    e0ec:	2105      	movs	r1, #5
    e0ee:	47d8      	blx	fp
    e0f0:	e7dd      	b.n	e0ae <attsProcReadTypeReq+0x13c>
    e0f2:	7bdb      	ldrb	r3, [r3, #15]
    e0f4:	7f30      	ldrb	r0, [r6, #28]
    e0f6:	4622      	mov	r2, r4
    e0f8:	2101      	movs	r1, #1
    e0fa:	f7ff fc6d 	bl	d9d8 <attsPermissions>
    e0fe:	2800      	cmp	r0, #0
    e100:	d1de      	bne.n	e0c0 <attsProcReadTypeReq+0x14e>
    e102:	8b73      	ldrh	r3, [r6, #26]
    e104:	3308      	adds	r3, #8
    e106:	eb07 0b05 	add.w	fp, r7, r5
    e10a:	4443      	add	r3, r8
    e10c:	459b      	cmp	fp, r3
    e10e:	d8d7      	bhi.n	e0c0 <attsProcReadTypeReq+0x14e>
    e110:	0a23      	lsrs	r3, r4, #8
    e112:	f805 4c02 	strb.w	r4, [r5, #-2]
    e116:	f805 3c01 	strb.w	r3, [r5, #-1]
    e11a:	9b06      	ldr	r3, [sp, #24]
    e11c:	463a      	mov	r2, r7
    e11e:	6859      	ldr	r1, [r3, #4]
    e120:	4628      	mov	r0, r5
    e122:	f7fe f81d 	bl	c160 <memcpy>
    e126:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e12a:	429c      	cmp	r4, r3
    e12c:	d005      	beq.n	e13a <attsProcReadTypeReq+0x1c8>
    e12e:	3401      	adds	r4, #1
    e130:	b2a0      	uxth	r0, r4
    e132:	9b05      	ldr	r3, [sp, #20]
    e134:	4581      	cmp	r9, r0
    e136:	441d      	add	r5, r3
    e138:	d29c      	bcs.n	e074 <attsProcReadTypeReq+0x102>
    e13a:	f8cd b00c 	str.w	fp, [sp, #12]
    e13e:	e7bf      	b.n	e0c0 <attsProcReadTypeReq+0x14e>
    e140:	2304      	movs	r3, #4
    e142:	e769      	b.n	e018 <attsProcReadTypeReq+0xa6>
    e144:	2301      	movs	r3, #1
    e146:	e767      	b.n	e018 <attsProcReadTypeReq+0xa6>
    e148:	230a      	movs	r3, #10
    e14a:	e765      	b.n	e018 <attsProcReadTypeReq+0xa6>
    e14c:	1000343c 	.word	0x1000343c

0000e150 <attsProcReadMultReq>:
    e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e154:	4607      	mov	r7, r0
    e156:	8b40      	ldrh	r0, [r0, #26]
    e158:	3008      	adds	r0, #8
    e15a:	b087      	sub	sp, #28
    e15c:	b280      	uxth	r0, r0
    e15e:	460c      	mov	r4, r1
    e160:	4693      	mov	fp, r2
    e162:	f7fe fa01 	bl	c568 <attMsgAlloc>
    e166:	4605      	mov	r5, r0
    e168:	2800      	cmp	r0, #0
    e16a:	d060      	beq.n	e22e <attsProcReadMultReq+0xde>
    e16c:	230f      	movs	r3, #15
    e16e:	3408      	adds	r4, #8
    e170:	f10b 0909 	add.w	r9, fp, #9
    e174:	f100 0609 	add.w	r6, r0, #9
    e178:	7203      	strb	r3, [r0, #8]
    e17a:	44a3      	add	fp, r4
    e17c:	45d9      	cmp	r9, fp
    e17e:	d309      	bcc.n	e194 <attsProcReadMultReq+0x44>
    e180:	f105 0208 	add.w	r2, r5, #8
    e184:	1ab2      	subs	r2, r6, r2
    e186:	462b      	mov	r3, r5
    e188:	b292      	uxth	r2, r2
    e18a:	8b39      	ldrh	r1, [r7, #24]
    e18c:	2004      	movs	r0, #4
    e18e:	f002 f9bd 	bl	1050c <L2cDataReq>
    e192:	e053      	b.n	e23c <attsProcReadMultReq+0xec>
    e194:	f899 3001 	ldrb.w	r3, [r9, #1]
    e198:	f819 4b02 	ldrb.w	r4, [r9], #2
    e19c:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e1a0:	b2a4      	uxth	r4, r4
    e1a2:	a905      	add	r1, sp, #20
    e1a4:	4620      	mov	r0, r4
    e1a6:	f7ff fbeb 	bl	d980 <attsFindByHandle>
    e1aa:	4680      	mov	r8, r0
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d048      	beq.n	e242 <attsProcReadMultReq+0xf2>
    e1b0:	7bc3      	ldrb	r3, [r0, #15]
    e1b2:	7f38      	ldrb	r0, [r7, #28]
    e1b4:	4622      	mov	r2, r4
    e1b6:	2101      	movs	r1, #1
    e1b8:	f7ff fc0e 	bl	d9d8 <attsPermissions>
    e1bc:	4603      	mov	r3, r0
    e1be:	2800      	cmp	r0, #0
    e1c0:	d140      	bne.n	e244 <attsProcReadMultReq+0xf4>
    e1c2:	f898 200e 	ldrb.w	r2, [r8, #14]
    e1c6:	0751      	lsls	r1, r2, #29
    e1c8:	d522      	bpl.n	e210 <attsProcReadMultReq+0xc0>
    e1ca:	9905      	ldr	r1, [sp, #20]
    e1cc:	f8d1 a008 	ldr.w	sl, [r1, #8]
    e1d0:	f1ba 0f00 	cmp.w	sl, #0
    e1d4:	d01c      	beq.n	e210 <attsProcReadMultReq+0xc0>
    e1d6:	7f38      	ldrb	r0, [r7, #28]
    e1d8:	f8cd 8000 	str.w	r8, [sp]
    e1dc:	220e      	movs	r2, #14
    e1de:	4621      	mov	r1, r4
    e1e0:	47d0      	blx	sl
    e1e2:	4603      	mov	r3, r0
    e1e4:	bb70      	cbnz	r0, e244 <attsProcReadMultReq+0xf4>
    e1e6:	8b7a      	ldrh	r2, [r7, #26]
    e1e8:	3208      	adds	r2, #8
    e1ea:	442a      	add	r2, r5
    e1ec:	42b2      	cmp	r2, r6
    e1ee:	d9c5      	bls.n	e17c <attsProcReadMultReq+0x2c>
    e1f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
    e1f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e1f8:	881c      	ldrh	r4, [r3, #0]
    e1fa:	1b92      	subs	r2, r2, r6
    e1fc:	b292      	uxth	r2, r2
    e1fe:	4294      	cmp	r4, r2
    e200:	bf28      	it	cs
    e202:	4614      	movcs	r4, r2
    e204:	4630      	mov	r0, r6
    e206:	4622      	mov	r2, r4
    e208:	f7fd ffaa 	bl	c160 <memcpy>
    e20c:	4426      	add	r6, r4
    e20e:	e7b5      	b.n	e17c <attsProcReadMultReq+0x2c>
    e210:	0693      	lsls	r3, r2, #26
    e212:	d5e8      	bpl.n	e1e6 <attsProcReadMultReq+0x96>
    e214:	4b0e      	ldr	r3, [pc, #56]	; (e250 <attsProcReadMultReq+0x100>)
    e216:	f8d3 a014 	ldr.w	sl, [r3, #20]
    e21a:	f1ba 0f00 	cmp.w	sl, #0
    e21e:	d0e2      	beq.n	e1e6 <attsProcReadMultReq+0x96>
    e220:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e224:	7f38      	ldrb	r0, [r7, #28]
    e226:	4622      	mov	r2, r4
    e228:	2105      	movs	r1, #5
    e22a:	47d0      	blx	sl
    e22c:	e7d9      	b.n	e1e2 <attsProcReadMultReq+0x92>
    e22e:	2311      	movs	r3, #17
    e230:	4604      	mov	r4, r0
    e232:	4622      	mov	r2, r4
    e234:	210e      	movs	r1, #14
    e236:	8b38      	ldrh	r0, [r7, #24]
    e238:	f7ff fa48 	bl	d6cc <attsErrRsp>
    e23c:	b007      	add	sp, #28
    e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e242:	2301      	movs	r3, #1
    e244:	4628      	mov	r0, r5
    e246:	9303      	str	r3, [sp, #12]
    e248:	f009 fc22 	bl	17a90 <WsfMsgFree>
    e24c:	9b03      	ldr	r3, [sp, #12]
    e24e:	e7f0      	b.n	e232 <attsProcReadMultReq+0xe2>
    e250:	1000343c 	.word	0x1000343c

0000e254 <attsProcReadGroupTypeReq>:
    e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e258:	b08f      	sub	sp, #60	; 0x3c
    e25a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e25e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    e262:	7a57      	ldrb	r7, [r2, #9]
    e264:	7a93      	ldrb	r3, [r2, #10]
    e266:	3905      	subs	r1, #5
    e268:	fa5f fa81 	uxtb.w	sl, r1
    e26c:	eb07 2703 	add.w	r7, r7, r3, lsl #8
    e270:	f1ba 0f02 	cmp.w	sl, #2
    e274:	4681      	mov	r9, r0
    e276:	b2bf      	uxth	r7, r7
    e278:	d003      	beq.n	e282 <attsProcReadGroupTypeReq+0x2e>
    e27a:	f1ba 0f10 	cmp.w	sl, #16
    e27e:	f040 80b6 	bne.w	e3ee <attsProcReadGroupTypeReq+0x19a>
    e282:	2f00      	cmp	r7, #0
    e284:	f000 80b8 	beq.w	e3f8 <attsProcReadGroupTypeReq+0x1a4>
    e288:	7b11      	ldrb	r1, [r2, #12]
    e28a:	7ad3      	ldrb	r3, [r2, #11]
    e28c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    e290:	b29b      	uxth	r3, r3
    e292:	429f      	cmp	r7, r3
    e294:	9303      	str	r3, [sp, #12]
    e296:	f200 80c7 	bhi.w	e428 <attsProcReadGroupTypeReq+0x1d4>
    e29a:	f102 030d 	add.w	r3, r2, #13
    e29e:	461a      	mov	r2, r3
    e2a0:	4651      	mov	r1, sl
    e2a2:	a80b      	add	r0, sp, #44	; 0x2c
    e2a4:	9308      	str	r3, [sp, #32]
    e2a6:	f7ff fb58 	bl	d95a <attsUuid16Cmp>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	f000 80bf 	beq.w	e42e <attsProcReadGroupTypeReq+0x1da>
    e2b0:	ab0d      	add	r3, sp, #52	; 0x34
    e2b2:	9301      	str	r3, [sp, #4]
    e2b4:	ab0c      	add	r3, sp, #48	; 0x30
    e2b6:	9300      	str	r3, [sp, #0]
    e2b8:	4652      	mov	r2, sl
    e2ba:	9b08      	ldr	r3, [sp, #32]
    e2bc:	9903      	ldr	r1, [sp, #12]
    e2be:	4638      	mov	r0, r7
    e2c0:	f7ff fcd8 	bl	dc74 <attsFindUuidInRange>
    e2c4:	4604      	mov	r4, r0
    e2c6:	2800      	cmp	r0, #0
    e2c8:	f000 80b4 	beq.w	e434 <attsProcReadGroupTypeReq+0x1e0>
    e2cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2ce:	4602      	mov	r2, r0
    e2d0:	7bdb      	ldrb	r3, [r3, #15]
    e2d2:	f899 001c 	ldrb.w	r0, [r9, #28]
    e2d6:	2101      	movs	r1, #1
    e2d8:	f7ff fb7e 	bl	d9d8 <attsPermissions>
    e2dc:	4680      	mov	r8, r0
    e2de:	2800      	cmp	r0, #0
    e2e0:	f040 80ab 	bne.w	e43a <attsProcReadGroupTypeReq+0x1e6>
    e2e4:	f8b9 001a 	ldrh.w	r0, [r9, #26]
    e2e8:	3008      	adds	r0, #8
    e2ea:	b280      	uxth	r0, r0
    e2ec:	f7fe f93c 	bl	c568 <attMsgAlloc>
    e2f0:	2311      	movs	r3, #17
    e2f2:	4605      	mov	r5, r0
    e2f4:	2800      	cmp	r0, #0
    e2f6:	f000 80a2 	beq.w	e43e <attsProcReadGroupTypeReq+0x1ea>
    e2fa:	f8b9 601a 	ldrh.w	r6, [r9, #26]
    e2fe:	7203      	strb	r3, [r0, #8]
    e300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e302:	f8b9 201a 	ldrh.w	r2, [r9, #26]
    e306:	689b      	ldr	r3, [r3, #8]
    e308:	881b      	ldrh	r3, [r3, #0]
    e30a:	7284      	strb	r4, [r0, #10]
    e30c:	3a06      	subs	r2, #6
    e30e:	4293      	cmp	r3, r2
    e310:	bf28      	it	cs
    e312:	4613      	movcs	r3, r2
    e314:	b2db      	uxtb	r3, r3
    e316:	9304      	str	r3, [sp, #16]
    e318:	3304      	adds	r3, #4
    e31a:	9305      	str	r3, [sp, #20]
    e31c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e320:	7243      	strb	r3, [r0, #9]
    e322:	0a23      	lsrs	r3, r4, #8
    e324:	72c3      	strb	r3, [r0, #11]
    e326:	4620      	mov	r0, r4
    e328:	f7ff fcde 	bl	dce8 <attsFindServiceGroupEnd>
    e32c:	990c      	ldr	r1, [sp, #48]	; 0x30
    e32e:	7328      	strb	r0, [r5, #12]
    e330:	0a02      	lsrs	r2, r0, #8
    e332:	f105 030e 	add.w	r3, r5, #14
    e336:	736a      	strb	r2, [r5, #13]
    e338:	4683      	mov	fp, r0
    e33a:	9a04      	ldr	r2, [sp, #16]
    e33c:	6849      	ldr	r1, [r1, #4]
    e33e:	4618      	mov	r0, r3
    e340:	f7fd ff0e 	bl	c160 <memcpy>
    e344:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e348:	9206      	str	r2, [sp, #24]
    e34a:	3e06      	subs	r6, #6
    e34c:	1ab6      	subs	r6, r6, r2
    e34e:	9b06      	ldr	r3, [sp, #24]
    e350:	b2b2      	uxth	r2, r6
    e352:	9207      	str	r2, [sp, #28]
    e354:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
    e358:	9a05      	ldr	r2, [sp, #20]
    e35a:	33fc      	adds	r3, #252	; 0xfc
    e35c:	1886      	adds	r6, r0, r2
    e35e:	9309      	str	r3, [sp, #36]	; 0x24
    e360:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e364:	459b      	cmp	fp, r3
    e366:	f1a6 0404 	sub.w	r4, r6, #4
    e36a:	d049      	beq.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e36c:	f10b 0001 	add.w	r0, fp, #1
    e370:	9b03      	ldr	r3, [sp, #12]
    e372:	b280      	uxth	r0, r0
    e374:	4283      	cmp	r3, r0
    e376:	d343      	bcc.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e378:	ab0d      	add	r3, sp, #52	; 0x34
    e37a:	9301      	str	r3, [sp, #4]
    e37c:	ab0c      	add	r3, sp, #48	; 0x30
    e37e:	9300      	str	r3, [sp, #0]
    e380:	4652      	mov	r2, sl
    e382:	9b08      	ldr	r3, [sp, #32]
    e384:	9903      	ldr	r1, [sp, #12]
    e386:	f7ff fc75 	bl	dc74 <attsFindUuidInRange>
    e38a:	4683      	mov	fp, r0
    e38c:	2800      	cmp	r0, #0
    e38e:	d037      	beq.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e392:	9906      	ldr	r1, [sp, #24]
    e394:	689a      	ldr	r2, [r3, #8]
    e396:	8812      	ldrh	r2, [r2, #0]
    e398:	428a      	cmp	r2, r1
    e39a:	d131      	bne.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e39c:	4602      	mov	r2, r0
    e39e:	7bdb      	ldrb	r3, [r3, #15]
    e3a0:	f899 001c 	ldrb.w	r0, [r9, #28]
    e3a4:	2101      	movs	r1, #1
    e3a6:	f7ff fb17 	bl	d9d8 <attsPermissions>
    e3aa:	bb48      	cbnz	r0, e400 <attsProcReadGroupTypeReq+0x1ac>
    e3ac:	9b07      	ldr	r3, [sp, #28]
    e3ae:	9a05      	ldr	r2, [sp, #20]
    e3b0:	4293      	cmp	r3, r2
    e3b2:	d347      	bcc.n	e444 <attsProcReadGroupTypeReq+0x1f0>
    e3b4:	ea4f 231b 	mov.w	r3, fp, lsr #8
    e3b8:	f806 bc04 	strb.w	fp, [r6, #-4]
    e3bc:	f806 3c03 	strb.w	r3, [r6, #-3]
    e3c0:	4658      	mov	r0, fp
    e3c2:	f7ff fc91 	bl	dce8 <attsFindServiceGroupEnd>
    e3c6:	0a03      	lsrs	r3, r0, #8
    e3c8:	f806 0c02 	strb.w	r0, [r6, #-2]
    e3cc:	f806 3c01 	strb.w	r3, [r6, #-1]
    e3d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3d2:	9a04      	ldr	r2, [sp, #16]
    e3d4:	6859      	ldr	r1, [r3, #4]
    e3d6:	4683      	mov	fp, r0
    e3d8:	4630      	mov	r0, r6
    e3da:	f7fd fec1 	bl	c160 <memcpy>
    e3de:	9b07      	ldr	r3, [sp, #28]
    e3e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e3e2:	4413      	add	r3, r2
    e3e4:	b29b      	uxth	r3, r3
    e3e6:	9307      	str	r3, [sp, #28]
    e3e8:	9b05      	ldr	r3, [sp, #20]
    e3ea:	441e      	add	r6, r3
    e3ec:	e7b8      	b.n	e360 <attsProcReadGroupTypeReq+0x10c>
    e3ee:	f04f 0804 	mov.w	r8, #4
    e3f2:	2400      	movs	r4, #0
    e3f4:	4625      	mov	r5, r4
    e3f6:	e003      	b.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e3f8:	f04f 0801 	mov.w	r8, #1
    e3fc:	463c      	mov	r4, r7
    e3fe:	463d      	mov	r5, r7
    e400:	4648      	mov	r0, r9
    e402:	f7ff f9e1 	bl	d7c8 <attsDiscBusy>
    e406:	f8b9 0018 	ldrh.w	r0, [r9, #24]
    e40a:	f1b8 0f00 	cmp.w	r8, #0
    e40e:	d11b      	bne.n	e448 <attsProcReadGroupTypeReq+0x1f4>
    e410:	f105 0208 	add.w	r2, r5, #8
    e414:	1aa2      	subs	r2, r4, r2
    e416:	4601      	mov	r1, r0
    e418:	462b      	mov	r3, r5
    e41a:	b292      	uxth	r2, r2
    e41c:	2004      	movs	r0, #4
    e41e:	f002 f875 	bl	1050c <L2cDataReq>
    e422:	b00f      	add	sp, #60	; 0x3c
    e424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e428:	f04f 0801 	mov.w	r8, #1
    e42c:	e7e1      	b.n	e3f2 <attsProcReadGroupTypeReq+0x19e>
    e42e:	f04f 0810 	mov.w	r8, #16
    e432:	e7de      	b.n	e3f2 <attsProcReadGroupTypeReq+0x19e>
    e434:	f04f 080a 	mov.w	r8, #10
    e438:	e7dc      	b.n	e3f4 <attsProcReadGroupTypeReq+0x1a0>
    e43a:	4627      	mov	r7, r4
    e43c:	e7d9      	b.n	e3f2 <attsProcReadGroupTypeReq+0x19e>
    e43e:	4604      	mov	r4, r0
    e440:	4698      	mov	r8, r3
    e442:	e7dd      	b.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e444:	4680      	mov	r8, r0
    e446:	e7db      	b.n	e400 <attsProcReadGroupTypeReq+0x1ac>
    e448:	4643      	mov	r3, r8
    e44a:	463a      	mov	r2, r7
    e44c:	2110      	movs	r1, #16
    e44e:	f7ff f93d 	bl	d6cc <attsErrRsp>
    e452:	e7e6      	b.n	e422 <attsProcReadGroupTypeReq+0x1ce>

0000e454 <attsSignedWriteStart>:
    e454:	6843      	ldr	r3, [r0, #4]
    e456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e458:	4606      	mov	r6, r0
    e45a:	460d      	mov	r5, r1
    e45c:	b1eb      	cbz	r3, e49a <attsSignedWriteStart+0x46>
    e45e:	894c      	ldrh	r4, [r1, #10]
    e460:	3404      	adds	r4, #4
    e462:	b2a4      	uxth	r4, r4
    e464:	4620      	mov	r0, r4
    e466:	f009 fa73 	bl	17950 <WsfBufAlloc>
    e46a:	60b5      	str	r5, [r6, #8]
    e46c:	4607      	mov	r7, r0
    e46e:	b1a0      	cbz	r0, e49a <attsSignedWriteStart+0x46>
    e470:	4622      	mov	r2, r4
    e472:	f105 0110 	add.w	r1, r5, #16
    e476:	f00a fa3d 	bl	188f4 <WStrReverseCpy>
    e47a:	4b0c      	ldr	r3, [pc, #48]	; (e4ac <attsSignedWriteStart+0x58>)
    e47c:	6870      	ldr	r0, [r6, #4]
    e47e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
    e482:	2223      	movs	r2, #35	; 0x23
    e484:	9201      	str	r2, [sp, #4]
    e486:	7b2a      	ldrb	r2, [r5, #12]
    e488:	9200      	str	r2, [sp, #0]
    e48a:	4639      	mov	r1, r7
    e48c:	b2e2      	uxtb	r2, r4
    e48e:	f00a fc83 	bl	18d98 <SecCmac>
    e492:	b940      	cbnz	r0, e4a6 <attsSignedWriteStart+0x52>
    e494:	4638      	mov	r0, r7
    e496:	f009 fa95 	bl	179c4 <WsfBufFree>
    e49a:	4628      	mov	r0, r5
    e49c:	b003      	add	sp, #12
    e49e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e4a2:	f009 ba8f 	b.w	179c4 <WsfBufFree>
    e4a6:	b003      	add	sp, #12
    e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4aa:	bf00      	nop
    e4ac:	10002fd8 	.word	0x10002fd8

0000e4b0 <attsProcSignedWrite>:
    e4b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e4b4:	7a93      	ldrb	r3, [r2, #10]
    e4b6:	7a55      	ldrb	r5, [r2, #9]
    e4b8:	eb05 2503 	add.w	r5, r5, r3, lsl #8
    e4bc:	b2ad      	uxth	r5, r5
    e4be:	4607      	mov	r7, r0
    e4c0:	4689      	mov	r9, r1
    e4c2:	4628      	mov	r0, r5
    e4c4:	a901      	add	r1, sp, #4
    e4c6:	4690      	mov	r8, r2
    e4c8:	f7ff fa5a 	bl	d980 <attsFindByHandle>
    e4cc:	4604      	mov	r4, r0
    e4ce:	2800      	cmp	r0, #0
    e4d0:	d033      	beq.n	e53a <attsProcSignedWrite+0x8a>
    e4d2:	7bc3      	ldrb	r3, [r0, #15]
    e4d4:	7f38      	ldrb	r0, [r7, #28]
    e4d6:	462a      	mov	r2, r5
    e4d8:	2110      	movs	r1, #16
    e4da:	f7ff fa7d 	bl	d9d8 <attsPermissions>
    e4de:	bb60      	cbnz	r0, e53a <attsProcSignedWrite+0x8a>
    e4e0:	7ba2      	ldrb	r2, [r4, #14]
    e4e2:	0651      	lsls	r1, r2, #25
    e4e4:	d529      	bpl.n	e53a <attsProcSignedWrite+0x8a>
    e4e6:	f1a9 060f 	sub.w	r6, r9, #15
    e4ea:	0712      	lsls	r2, r2, #28
    e4ec:	b2b6      	uxth	r6, r6
    e4ee:	89a3      	ldrh	r3, [r4, #12]
    e4f0:	d421      	bmi.n	e536 <attsProcSignedWrite+0x86>
    e4f2:	429e      	cmp	r6, r3
    e4f4:	d121      	bne.n	e53a <attsProcSignedWrite+0x8a>
    e4f6:	f109 000f 	add.w	r0, r9, #15
    e4fa:	b280      	uxth	r0, r0
    e4fc:	f009 fa28 	bl	17950 <WsfBufAlloc>
    e500:	4604      	mov	r4, r0
    e502:	b1d0      	cbz	r0, e53a <attsProcSignedWrite+0x8a>
    e504:	6047      	str	r7, [r0, #4]
    e506:	8105      	strh	r5, [r0, #8]
    e508:	8146      	strh	r6, [r0, #10]
    e50a:	7f3b      	ldrb	r3, [r7, #28]
    e50c:	7303      	strb	r3, [r0, #12]
    e50e:	464a      	mov	r2, r9
    e510:	f108 0108 	add.w	r1, r8, #8
    e514:	300d      	adds	r0, #13
    e516:	f7fd fe23 	bl	c160 <memcpy>
    e51a:	7f38      	ldrb	r0, [r7, #28]
    e51c:	4a0a      	ldr	r2, [pc, #40]	; (e548 <attsProcSignedWrite+0x98>)
    e51e:	1e43      	subs	r3, r0, #1
    e520:	200c      	movs	r0, #12
    e522:	fb00 2003 	mla	r0, r0, r3, r2
    e526:	4621      	mov	r1, r4
    e528:	6883      	ldr	r3, [r0, #8]
    e52a:	b14b      	cbz	r3, e540 <attsProcSignedWrite+0x90>
    e52c:	f102 0060 	add.w	r0, r2, #96	; 0x60
    e530:	f009 fb00 	bl	17b34 <WsfQueueEnq>
    e534:	e001      	b.n	e53a <attsProcSignedWrite+0x8a>
    e536:	429e      	cmp	r6, r3
    e538:	d9dd      	bls.n	e4f6 <attsProcSignedWrite+0x46>
    e53a:	b003      	add	sp, #12
    e53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e540:	f7ff ff88 	bl	e454 <attsSignedWriteStart>
    e544:	e7f9      	b.n	e53a <attsProcSignedWrite+0x8a>
    e546:	bf00      	nop
    e548:	10003454 	.word	0x10003454

0000e54c <attsSignMsgCback>:
    e54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e550:	7883      	ldrb	r3, [r0, #2]
    e552:	2b23      	cmp	r3, #35	; 0x23
    e554:	b088      	sub	sp, #32
    e556:	d152      	bne.n	e5fe <attsSignMsgCback+0xb2>
    e558:	7806      	ldrb	r6, [r0, #0]
    e55a:	4d39      	ldr	r5, [pc, #228]	; (e640 <attsSignMsgCback+0xf4>)
    e55c:	6841      	ldr	r1, [r0, #4]
    e55e:	3e01      	subs	r6, #1
    e560:	270c      	movs	r7, #12
    e562:	4377      	muls	r7, r6
    e564:	19eb      	adds	r3, r5, r7
    e566:	2208      	movs	r2, #8
    e568:	689c      	ldr	r4, [r3, #8]
    e56a:	a806      	add	r0, sp, #24
    e56c:	f00a f9c2 	bl	188f4 <WStrReverseCpy>
    e570:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
    e574:	f104 090d 	add.w	r9, r4, #13
    e578:	f10a 0107 	add.w	r1, sl, #7
    e57c:	2208      	movs	r2, #8
    e57e:	4449      	add	r1, r9
    e580:	a806      	add	r0, sp, #24
    e582:	f7fd fdbd 	bl	c100 <memcmp>
    e586:	4680      	mov	r8, r0
    e588:	bb50      	cbnz	r0, e5e0 <attsSignMsgCback+0x94>
    e58a:	eb09 030a 	add.w	r3, r9, sl
    e58e:	795a      	ldrb	r2, [r3, #5]
    e590:	7919      	ldrb	r1, [r3, #4]
    e592:	0412      	lsls	r2, r2, #16
    e594:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e598:	78d9      	ldrb	r1, [r3, #3]
    e59a:	799b      	ldrb	r3, [r3, #6]
    e59c:	440a      	add	r2, r1
    e59e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
    e5a2:	59eb      	ldr	r3, [r5, r7]
    e5a4:	429a      	cmp	r2, r3
    e5a6:	d31b      	bcc.n	e5e0 <attsSignMsgCback+0x94>
    e5a8:	3201      	adds	r2, #1
    e5aa:	51ea      	str	r2, [r5, r7]
    e5ac:	a905      	add	r1, sp, #20
    e5ae:	8920      	ldrh	r0, [r4, #8]
    e5b0:	f7ff f9e6 	bl	d980 <attsFindByHandle>
    e5b4:	4607      	mov	r7, r0
    e5b6:	b198      	cbz	r0, e5e0 <attsSignMsgCback+0x94>
    e5b8:	7b82      	ldrb	r2, [r0, #14]
    e5ba:	0791      	lsls	r1, r2, #30
    e5bc:	f104 0310 	add.w	r3, r4, #16
    e5c0:	d520      	bpl.n	e604 <attsSignMsgCback+0xb8>
    e5c2:	9905      	ldr	r1, [sp, #20]
    e5c4:	f8d1 900c 	ldr.w	r9, [r1, #12]
    e5c8:	f1b9 0f00 	cmp.w	r9, #0
    e5cc:	d01a      	beq.n	e604 <attsSignMsgCback+0xb8>
    e5ce:	8921      	ldrh	r1, [r4, #8]
    e5d0:	7b20      	ldrb	r0, [r4, #12]
    e5d2:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e5d6:	8963      	ldrh	r3, [r4, #10]
    e5d8:	9300      	str	r3, [sp, #0]
    e5da:	22d2      	movs	r2, #210	; 0xd2
    e5dc:	4643      	mov	r3, r8
    e5de:	47c8      	blx	r9
    e5e0:	4620      	mov	r0, r4
    e5e2:	f009 f9ef 	bl	179c4 <WsfBufFree>
    e5e6:	4817      	ldr	r0, [pc, #92]	; (e644 <attsSignMsgCback+0xf8>)
    e5e8:	f009 fac6 	bl	17b78 <WsfQueueDeq>
    e5ec:	4601      	mov	r1, r0
    e5ee:	200c      	movs	r0, #12
    e5f0:	b309      	cbz	r1, e636 <attsSignMsgCback+0xea>
    e5f2:	7b0b      	ldrb	r3, [r1, #12]
    e5f4:	3b01      	subs	r3, #1
    e5f6:	fb00 5003 	mla	r0, r0, r3, r5
    e5fa:	f7ff ff2b 	bl	e454 <attsSignedWriteStart>
    e5fe:	b008      	add	sp, #32
    e600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e604:	0692      	lsls	r2, r2, #26
    e606:	d50a      	bpl.n	e61e <attsSignMsgCback+0xd2>
    e608:	4a0f      	ldr	r2, [pc, #60]	; (e648 <attsSignMsgCback+0xfc>)
    e60a:	f8d2 8014 	ldr.w	r8, [r2, #20]
    e60e:	f1b8 0f00 	cmp.w	r8, #0
    e612:	d004      	beq.n	e61e <attsSignMsgCback+0xd2>
    e614:	8922      	ldrh	r2, [r4, #8]
    e616:	7b20      	ldrb	r0, [r4, #12]
    e618:	2109      	movs	r1, #9
    e61a:	47c0      	blx	r8
    e61c:	e7e0      	b.n	e5e0 <attsSignMsgCback+0x94>
    e61e:	8962      	ldrh	r2, [r4, #10]
    e620:	6878      	ldr	r0, [r7, #4]
    e622:	4619      	mov	r1, r3
    e624:	f7fd fd9c 	bl	c160 <memcpy>
    e628:	7bbb      	ldrb	r3, [r7, #14]
    e62a:	071b      	lsls	r3, r3, #28
    e62c:	bf42      	ittt	mi
    e62e:	68bb      	ldrmi	r3, [r7, #8]
    e630:	8962      	ldrhmi	r2, [r4, #10]
    e632:	801a      	strhmi	r2, [r3, #0]
    e634:	e7d4      	b.n	e5e0 <attsSignMsgCback+0x94>
    e636:	fb00 5506 	mla	r5, r0, r6, r5
    e63a:	60a9      	str	r1, [r5, #8]
    e63c:	e7df      	b.n	e5fe <attsSignMsgCback+0xb2>
    e63e:	bf00      	nop
    e640:	10003454 	.word	0x10003454
    e644:	100034b4 	.word	0x100034b4
    e648:	1000343c 	.word	0x1000343c

0000e64c <AttsSignInit>:
    e64c:	4b05      	ldr	r3, [pc, #20]	; (e664 <AttsSignInit+0x18>)
    e64e:	2200      	movs	r2, #0
    e650:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
    e654:	4b04      	ldr	r3, [pc, #16]	; (e668 <AttsSignInit+0x1c>)
    e656:	4a05      	ldr	r2, [pc, #20]	; (e66c <AttsSignInit+0x20>)
    e658:	60da      	str	r2, [r3, #12]
    e65a:	4b05      	ldr	r3, [pc, #20]	; (e670 <AttsSignInit+0x24>)
    e65c:	4a05      	ldr	r2, [pc, #20]	; (e674 <AttsSignInit+0x28>)
    e65e:	641a      	str	r2, [r3, #64]	; 0x40
    e660:	4770      	bx	lr
    e662:	bf00      	nop
    e664:	10003454 	.word	0x10003454
    e668:	1000343c 	.word	0x1000343c
    e66c:	0000e54d 	.word	0x0000e54d
    e670:	10002310 	.word	0x10002310
    e674:	0000e4b1 	.word	0x0000e4b1

0000e678 <AttsSetCsrk>:
    e678:	4b03      	ldr	r3, [pc, #12]	; (e688 <AttsSetCsrk+0x10>)
    e67a:	3801      	subs	r0, #1
    e67c:	220c      	movs	r2, #12
    e67e:	fb02 3000 	mla	r0, r2, r0, r3
    e682:	6041      	str	r1, [r0, #4]
    e684:	4770      	bx	lr
    e686:	bf00      	nop
    e688:	10003454 	.word	0x10003454

0000e68c <AttsSetSignCounter>:
    e68c:	230c      	movs	r3, #12
    e68e:	3801      	subs	r0, #1
    e690:	4358      	muls	r0, r3
    e692:	4b01      	ldr	r3, [pc, #4]	; (e698 <AttsSetSignCounter+0xc>)
    e694:	5019      	str	r1, [r3, r0]
    e696:	4770      	bx	lr
    e698:	10003454 	.word	0x10003454

0000e69c <AttsGetSignCounter>:
    e69c:	230c      	movs	r3, #12
    e69e:	3801      	subs	r0, #1
    e6a0:	4358      	muls	r0, r3
    e6a2:	4b01      	ldr	r3, [pc, #4]	; (e6a8 <AttsGetSignCounter+0xc>)
    e6a4:	5818      	ldr	r0, [r3, r0]
    e6a6:	4770      	bx	lr
    e6a8:	10003454 	.word	0x10003454

0000e6ac <attsProcWrite>:
    e6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e6b0:	7a93      	ldrb	r3, [r2, #10]
    e6b2:	7a54      	ldrb	r4, [r2, #9]
    e6b4:	f892 9008 	ldrb.w	r9, [r2, #8]
    e6b8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e6bc:	b087      	sub	sp, #28
    e6be:	b2a4      	uxth	r4, r4
    e6c0:	4680      	mov	r8, r0
    e6c2:	460d      	mov	r5, r1
    e6c4:	4620      	mov	r0, r4
    e6c6:	a905      	add	r1, sp, #20
    e6c8:	4617      	mov	r7, r2
    e6ca:	f7ff f959 	bl	d980 <attsFindByHandle>
    e6ce:	4606      	mov	r6, r0
    e6d0:	2800      	cmp	r0, #0
    e6d2:	d057      	beq.n	e784 <attsProcWrite+0xd8>
    e6d4:	7bc3      	ldrb	r3, [r0, #15]
    e6d6:	f898 001c 	ldrb.w	r0, [r8, #28]
    e6da:	4622      	mov	r2, r4
    e6dc:	2110      	movs	r1, #16
    e6de:	f7ff f97b 	bl	d9d8 <attsPermissions>
    e6e2:	b9c0      	cbnz	r0, e716 <attsProcWrite+0x6a>
    e6e4:	7bb2      	ldrb	r2, [r6, #14]
    e6e6:	89b3      	ldrh	r3, [r6, #12]
    e6e8:	3d03      	subs	r5, #3
    e6ea:	0710      	lsls	r0, r2, #28
    e6ec:	b2ad      	uxth	r5, r5
    e6ee:	d41d      	bmi.n	e72c <attsProcWrite+0x80>
    e6f0:	429d      	cmp	r5, r3
    e6f2:	d11d      	bne.n	e730 <attsProcWrite+0x84>
    e6f4:	0791      	lsls	r1, r2, #30
    e6f6:	f107 030b 	add.w	r3, r7, #11
    e6fa:	d51b      	bpl.n	e734 <attsProcWrite+0x88>
    e6fc:	9905      	ldr	r1, [sp, #20]
    e6fe:	68cf      	ldr	r7, [r1, #12]
    e700:	b1c7      	cbz	r7, e734 <attsProcWrite+0x88>
    e702:	e9cd 3601 	strd	r3, r6, [sp, #4]
    e706:	f898 001c 	ldrb.w	r0, [r8, #28]
    e70a:	9500      	str	r5, [sp, #0]
    e70c:	2300      	movs	r3, #0
    e70e:	464a      	mov	r2, r9
    e710:	4621      	mov	r1, r4
    e712:	47b8      	blx	r7
    e714:	b318      	cbz	r0, e75e <attsProcWrite+0xb2>
    e716:	f1b9 0f12 	cmp.w	r9, #18
    e71a:	d130      	bne.n	e77e <attsProcWrite+0xd2>
    e71c:	4603      	mov	r3, r0
    e71e:	4622      	mov	r2, r4
    e720:	4649      	mov	r1, r9
    e722:	f8b8 0018 	ldrh.w	r0, [r8, #24]
    e726:	f7fe ffd1 	bl	d6cc <attsErrRsp>
    e72a:	e028      	b.n	e77e <attsProcWrite+0xd2>
    e72c:	429d      	cmp	r5, r3
    e72e:	d9e1      	bls.n	e6f4 <attsProcWrite+0x48>
    e730:	200d      	movs	r0, #13
    e732:	e7f0      	b.n	e716 <attsProcWrite+0x6a>
    e734:	0692      	lsls	r2, r2, #26
    e736:	d508      	bpl.n	e74a <attsProcWrite+0x9e>
    e738:	4a13      	ldr	r2, [pc, #76]	; (e788 <attsProcWrite+0xdc>)
    e73a:	6957      	ldr	r7, [r2, #20]
    e73c:	b12f      	cbz	r7, e74a <attsProcWrite+0x9e>
    e73e:	4622      	mov	r2, r4
    e740:	2109      	movs	r1, #9
    e742:	f898 001c 	ldrb.w	r0, [r8, #28]
    e746:	47b8      	blx	r7
    e748:	e7e4      	b.n	e714 <attsProcWrite+0x68>
    e74a:	4619      	mov	r1, r3
    e74c:	462a      	mov	r2, r5
    e74e:	6870      	ldr	r0, [r6, #4]
    e750:	f7fd fd06 	bl	c160 <memcpy>
    e754:	7bb3      	ldrb	r3, [r6, #14]
    e756:	071b      	lsls	r3, r3, #28
    e758:	d501      	bpl.n	e75e <attsProcWrite+0xb2>
    e75a:	68b3      	ldr	r3, [r6, #8]
    e75c:	801d      	strh	r5, [r3, #0]
    e75e:	f1b9 0f12 	cmp.w	r9, #18
    e762:	d10c      	bne.n	e77e <attsProcWrite+0xd2>
    e764:	2009      	movs	r0, #9
    e766:	f7fd feff 	bl	c568 <attMsgAlloc>
    e76a:	4603      	mov	r3, r0
    e76c:	b138      	cbz	r0, e77e <attsProcWrite+0xd2>
    e76e:	2213      	movs	r2, #19
    e770:	7202      	strb	r2, [r0, #8]
    e772:	f8b8 1018 	ldrh.w	r1, [r8, #24]
    e776:	2201      	movs	r2, #1
    e778:	2004      	movs	r0, #4
    e77a:	f001 fec7 	bl	1050c <L2cDataReq>
    e77e:	b007      	add	sp, #28
    e780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e784:	2001      	movs	r0, #1
    e786:	e7c6      	b.n	e716 <attsProcWrite+0x6a>
    e788:	1000343c 	.word	0x1000343c

0000e78c <attsProcPrepWriteReq>:
    e78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e790:	7a93      	ldrb	r3, [r2, #10]
    e792:	7a54      	ldrb	r4, [r2, #9]
    e794:	7ad5      	ldrb	r5, [r2, #11]
    e796:	7b16      	ldrb	r6, [r2, #12]
    e798:	eb04 2403 	add.w	r4, r4, r3, lsl #8
    e79c:	b089      	sub	sp, #36	; 0x24
    e79e:	b2a4      	uxth	r4, r4
    e7a0:	4607      	mov	r7, r0
    e7a2:	468a      	mov	sl, r1
    e7a4:	4620      	mov	r0, r4
    e7a6:	a907      	add	r1, sp, #28
    e7a8:	4693      	mov	fp, r2
    e7aa:	f7ff f8e9 	bl	d980 <attsFindByHandle>
    e7ae:	4680      	mov	r8, r0
    e7b0:	2800      	cmp	r0, #0
    e7b2:	d079      	beq.n	e8a8 <attsProcPrepWriteReq+0x11c>
    e7b4:	7bc3      	ldrb	r3, [r0, #15]
    e7b6:	7f38      	ldrb	r0, [r7, #28]
    e7b8:	4622      	mov	r2, r4
    e7ba:	2110      	movs	r1, #16
    e7bc:	f7ff f90c 	bl	d9d8 <attsPermissions>
    e7c0:	2800      	cmp	r0, #0
    e7c2:	d153      	bne.n	e86c <attsProcPrepWriteReq+0xe0>
    e7c4:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    e7c8:	b2ab      	uxth	r3, r5
    e7ca:	9305      	str	r3, [sp, #20]
    e7cc:	9a05      	ldr	r2, [sp, #20]
    e7ce:	f898 300e 	ldrb.w	r3, [r8, #14]
    e7d2:	b10a      	cbz	r2, e7d8 <attsProcPrepWriteReq+0x4c>
    e7d4:	06d9      	lsls	r1, r3, #27
    e7d6:	d569      	bpl.n	e8ac <attsProcPrepWriteReq+0x120>
    e7d8:	f1aa 0605 	sub.w	r6, sl, #5
    e7dc:	071a      	lsls	r2, r3, #28
    e7de:	b2b6      	uxth	r6, r6
    e7e0:	d403      	bmi.n	e7ea <attsProcPrepWriteReq+0x5e>
    e7e2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    e7e6:	42b3      	cmp	r3, r6
    e7e8:	d162      	bne.n	e8b0 <attsProcPrepWriteReq+0x124>
    e7ea:	4638      	mov	r0, r7
    e7ec:	f009 fa4f 	bl	17c8e <WsfQueueCount>
    e7f0:	4b32      	ldr	r3, [pc, #200]	; (e8bc <attsProcPrepWriteReq+0x130>)
    e7f2:	681b      	ldr	r3, [r3, #0]
    e7f4:	79db      	ldrb	r3, [r3, #7]
    e7f6:	4283      	cmp	r3, r0
    e7f8:	d95c      	bls.n	e8b4 <attsProcPrepWriteReq+0x128>
    e7fa:	f10a 0006 	add.w	r0, sl, #6
    e7fe:	b280      	uxth	r0, r0
    e800:	f009 f8a6 	bl	17950 <WsfBufAlloc>
    e804:	4681      	mov	r9, r0
    e806:	2800      	cmp	r0, #0
    e808:	d056      	beq.n	e8b8 <attsProcPrepWriteReq+0x12c>
    e80a:	f898 300e 	ldrb.w	r3, [r8, #14]
    e80e:	079b      	lsls	r3, r3, #30
    e810:	f10b 0b0d 	add.w	fp, fp, #13
    e814:	d41b      	bmi.n	e84e <attsProcPrepWriteReq+0xc2>
    e816:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e81a:	f8a9 3008 	strh.w	r3, [r9, #8]
    e81e:	4632      	mov	r2, r6
    e820:	4659      	mov	r1, fp
    e822:	f8a9 6004 	strh.w	r6, [r9, #4]
    e826:	f8a9 4006 	strh.w	r4, [r9, #6]
    e82a:	f109 000a 	add.w	r0, r9, #10
    e82e:	f7fd fc97 	bl	c160 <memcpy>
    e832:	4649      	mov	r1, r9
    e834:	4638      	mov	r0, r7
    e836:	f009 f97d 	bl	17b34 <WsfQueueEnq>
    e83a:	f10a 0008 	add.w	r0, sl, #8
    e83e:	b280      	uxth	r0, r0
    e840:	f7fd fe92 	bl	c568 <attMsgAlloc>
    e844:	4680      	mov	r8, r0
    e846:	b9c0      	cbnz	r0, e87a <attsProcPrepWriteReq+0xee>
    e848:	b009      	add	sp, #36	; 0x24
    e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e84e:	9b07      	ldr	r3, [sp, #28]
    e850:	68db      	ldr	r3, [r3, #12]
    e852:	461d      	mov	r5, r3
    e854:	2b00      	cmp	r3, #0
    e856:	d0de      	beq.n	e816 <attsProcPrepWriteReq+0x8a>
    e858:	7f38      	ldrb	r0, [r7, #28]
    e85a:	9600      	str	r6, [sp, #0]
    e85c:	e9cd b801 	strd	fp, r8, [sp, #4]
    e860:	2300      	movs	r3, #0
    e862:	2216      	movs	r2, #22
    e864:	4621      	mov	r1, r4
    e866:	47a8      	blx	r5
    e868:	2800      	cmp	r0, #0
    e86a:	d0d4      	beq.n	e816 <attsProcPrepWriteReq+0x8a>
    e86c:	4603      	mov	r3, r0
    e86e:	4622      	mov	r2, r4
    e870:	2116      	movs	r1, #22
    e872:	8b38      	ldrh	r0, [r7, #24]
    e874:	f7fe ff2a 	bl	d6cc <attsErrRsp>
    e878:	e7e6      	b.n	e848 <attsProcPrepWriteReq+0xbc>
    e87a:	2317      	movs	r3, #23
    e87c:	7203      	strb	r3, [r0, #8]
    e87e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e882:	72c3      	strb	r3, [r0, #11]
    e884:	9b05      	ldr	r3, [sp, #20]
    e886:	7244      	strb	r4, [r0, #9]
    e888:	0a1d      	lsrs	r5, r3, #8
    e88a:	0a24      	lsrs	r4, r4, #8
    e88c:	7284      	strb	r4, [r0, #10]
    e88e:	7305      	strb	r5, [r0, #12]
    e890:	4632      	mov	r2, r6
    e892:	4659      	mov	r1, fp
    e894:	300d      	adds	r0, #13
    e896:	f7fd fc63 	bl	c160 <memcpy>
    e89a:	4643      	mov	r3, r8
    e89c:	4652      	mov	r2, sl
    e89e:	8b39      	ldrh	r1, [r7, #24]
    e8a0:	2004      	movs	r0, #4
    e8a2:	f001 fe33 	bl	1050c <L2cDataReq>
    e8a6:	e7cf      	b.n	e848 <attsProcPrepWriteReq+0xbc>
    e8a8:	2001      	movs	r0, #1
    e8aa:	e7df      	b.n	e86c <attsProcPrepWriteReq+0xe0>
    e8ac:	200b      	movs	r0, #11
    e8ae:	e7dd      	b.n	e86c <attsProcPrepWriteReq+0xe0>
    e8b0:	200d      	movs	r0, #13
    e8b2:	e7db      	b.n	e86c <attsProcPrepWriteReq+0xe0>
    e8b4:	2009      	movs	r0, #9
    e8b6:	e7d9      	b.n	e86c <attsProcPrepWriteReq+0xe0>
    e8b8:	2011      	movs	r0, #17
    e8ba:	e7d7      	b.n	e86c <attsProcPrepWriteReq+0xe0>
    e8bc:	1000239c 	.word	0x1000239c

0000e8c0 <attsProcExecWriteReq>:
    e8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8c4:	7a53      	ldrb	r3, [r2, #9]
    e8c6:	b086      	sub	sp, #24
    e8c8:	4606      	mov	r6, r0
    e8ca:	b973      	cbnz	r3, e8ea <attsProcExecWriteReq+0x2a>
    e8cc:	f7fe ff56 	bl	d77c <attsClearPrepWrites>
    e8d0:	2009      	movs	r0, #9
    e8d2:	f7fd fe49 	bl	c568 <attMsgAlloc>
    e8d6:	4603      	mov	r3, r0
    e8d8:	b360      	cbz	r0, e934 <attsProcExecWriteReq+0x74>
    e8da:	2219      	movs	r2, #25
    e8dc:	7202      	strb	r2, [r0, #8]
    e8de:	8b31      	ldrh	r1, [r6, #24]
    e8e0:	2201      	movs	r2, #1
    e8e2:	2004      	movs	r0, #4
    e8e4:	f001 fe12 	bl	1050c <L2cDataReq>
    e8e8:	e024      	b.n	e934 <attsProcExecWriteReq+0x74>
    e8ea:	2b01      	cmp	r3, #1
    e8ec:	d16e      	bne.n	e9cc <attsProcExecWriteReq+0x10c>
    e8ee:	6804      	ldr	r4, [r0, #0]
    e8f0:	b94c      	cbnz	r4, e906 <attsProcExecWriteReq+0x46>
    e8f2:	f8df 80dc 	ldr.w	r8, [pc, #220]	; e9d0 <attsProcExecWriteReq+0x110>
    e8f6:	4630      	mov	r0, r6
    e8f8:	f009 f93e 	bl	17b78 <WsfQueueDeq>
    e8fc:	4605      	mov	r5, r0
    e8fe:	bb00      	cbnz	r0, e942 <attsProcExecWriteReq+0x82>
    e900:	2c00      	cmp	r4, #0
    e902:	d0e5      	beq.n	e8d0 <attsProcExecWriteReq+0x10>
    e904:	e010      	b.n	e928 <attsProcExecWriteReq+0x68>
    e906:	a904      	add	r1, sp, #16
    e908:	88e0      	ldrh	r0, [r4, #6]
    e90a:	f7ff f839 	bl	d980 <attsFindByHandle>
    e90e:	b1b0      	cbz	r0, e93e <attsProcExecWriteReq+0x7e>
    e910:	8921      	ldrh	r1, [r4, #8]
    e912:	8982      	ldrh	r2, [r0, #12]
    e914:	4291      	cmp	r1, r2
    e916:	d810      	bhi.n	e93a <attsProcExecWriteReq+0x7a>
    e918:	88a3      	ldrh	r3, [r4, #4]
    e91a:	440b      	add	r3, r1
    e91c:	4293      	cmp	r3, r2
    e91e:	dd0e      	ble.n	e93e <attsProcExecWriteReq+0x7e>
    e920:	240d      	movs	r4, #13
    e922:	4630      	mov	r0, r6
    e924:	f7fe ff2a 	bl	d77c <attsClearPrepWrites>
    e928:	4623      	mov	r3, r4
    e92a:	2200      	movs	r2, #0
    e92c:	2118      	movs	r1, #24
    e92e:	8b30      	ldrh	r0, [r6, #24]
    e930:	f7fe fecc 	bl	d6cc <attsErrRsp>
    e934:	b006      	add	sp, #24
    e936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e93a:	2407      	movs	r4, #7
    e93c:	e7f1      	b.n	e922 <attsProcExecWriteReq+0x62>
    e93e:	6824      	ldr	r4, [r4, #0]
    e940:	e7d6      	b.n	e8f0 <attsProcExecWriteReq+0x30>
    e942:	a905      	add	r1, sp, #20
    e944:	88e8      	ldrh	r0, [r5, #6]
    e946:	f7ff f81b 	bl	d980 <attsFindByHandle>
    e94a:	4607      	mov	r7, r0
    e94c:	b920      	cbnz	r0, e958 <attsProcExecWriteReq+0x98>
    e94e:	240e      	movs	r4, #14
    e950:	4630      	mov	r0, r6
    e952:	f7fe ff13 	bl	d77c <attsClearPrepWrites>
    e956:	e017      	b.n	e988 <attsProcExecWriteReq+0xc8>
    e958:	7bc3      	ldrb	r3, [r0, #15]
    e95a:	06d8      	lsls	r0, r3, #27
    e95c:	d534      	bpl.n	e9c8 <attsProcExecWriteReq+0x108>
    e95e:	7bba      	ldrb	r2, [r7, #14]
    e960:	0791      	lsls	r1, r2, #30
    e962:	f105 030a 	add.w	r3, r5, #10
    e966:	d513      	bpl.n	e990 <attsProcExecWriteReq+0xd0>
    e968:	9905      	ldr	r1, [sp, #20]
    e96a:	68cc      	ldr	r4, [r1, #12]
    e96c:	b184      	cbz	r4, e990 <attsProcExecWriteReq+0xd0>
    e96e:	892a      	ldrh	r2, [r5, #8]
    e970:	88e9      	ldrh	r1, [r5, #6]
    e972:	7f30      	ldrb	r0, [r6, #28]
    e974:	e9cd 3701 	strd	r3, r7, [sp, #4]
    e978:	88ab      	ldrh	r3, [r5, #4]
    e97a:	9300      	str	r3, [sp, #0]
    e97c:	4613      	mov	r3, r2
    e97e:	2218      	movs	r2, #24
    e980:	47a0      	blx	r4
    e982:	4604      	mov	r4, r0
    e984:	2800      	cmp	r0, #0
    e986:	d1e3      	bne.n	e950 <attsProcExecWriteReq+0x90>
    e988:	4628      	mov	r0, r5
    e98a:	f009 f81b 	bl	179c4 <WsfBufFree>
    e98e:	e7b2      	b.n	e8f6 <attsProcExecWriteReq+0x36>
    e990:	0692      	lsls	r2, r2, #26
    e992:	d507      	bpl.n	e9a4 <attsProcExecWriteReq+0xe4>
    e994:	f8d8 4014 	ldr.w	r4, [r8, #20]
    e998:	b124      	cbz	r4, e9a4 <attsProcExecWriteReq+0xe4>
    e99a:	88ea      	ldrh	r2, [r5, #6]
    e99c:	7f30      	ldrb	r0, [r6, #28]
    e99e:	2109      	movs	r1, #9
    e9a0:	47a0      	blx	r4
    e9a2:	e7ee      	b.n	e982 <attsProcExecWriteReq+0xc2>
    e9a4:	892c      	ldrh	r4, [r5, #8]
    e9a6:	6878      	ldr	r0, [r7, #4]
    e9a8:	88aa      	ldrh	r2, [r5, #4]
    e9aa:	4420      	add	r0, r4
    e9ac:	4619      	mov	r1, r3
    e9ae:	f7fd fbd7 	bl	c160 <memcpy>
    e9b2:	7bbc      	ldrb	r4, [r7, #14]
    e9b4:	f014 0408 	ands.w	r4, r4, #8
    e9b8:	d0e6      	beq.n	e988 <attsProcExecWriteReq+0xc8>
    e9ba:	88ab      	ldrh	r3, [r5, #4]
    e9bc:	8929      	ldrh	r1, [r5, #8]
    e9be:	68ba      	ldr	r2, [r7, #8]
    e9c0:	440b      	add	r3, r1
    e9c2:	8013      	strh	r3, [r2, #0]
    e9c4:	2400      	movs	r4, #0
    e9c6:	e7df      	b.n	e988 <attsProcExecWriteReq+0xc8>
    e9c8:	2403      	movs	r4, #3
    e9ca:	e7c1      	b.n	e950 <attsProcExecWriteReq+0x90>
    e9cc:	2404      	movs	r4, #4
    e9ce:	e7ab      	b.n	e928 <attsProcExecWriteReq+0x68>
    e9d0:	1000343c 	.word	0x1000343c

0000e9d4 <dmAdvCbInit>:
    e9d4:	4b0b      	ldr	r3, [pc, #44]	; (ea04 <dmAdvCbInit+0x30>)
    e9d6:	181a      	adds	r2, r3, r0
    e9d8:	21ff      	movs	r1, #255	; 0xff
    e9da:	b510      	push	{r4, lr}
    e9dc:	7511      	strb	r1, [r2, #20]
    e9de:	f100 0108 	add.w	r1, r0, #8
    e9e2:	f44f 64c8 	mov.w	r4, #1600	; 0x640
    e9e6:	f823 4011 	strh.w	r4, [r3, r1, lsl #1]
    e9ea:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    e9ee:	f44f 61f0 	mov.w	r1, #1920	; 0x780
    e9f2:	8059      	strh	r1, [r3, #2]
    e9f4:	2307      	movs	r3, #7
    e9f6:	7553      	strb	r3, [r2, #21]
    e9f8:	4b03      	ldr	r3, [pc, #12]	; (ea08 <dmAdvCbInit+0x34>)
    e9fa:	4418      	add	r0, r3
    e9fc:	2300      	movs	r3, #0
    e9fe:	7443      	strb	r3, [r0, #17]
    ea00:	75d3      	strb	r3, [r2, #23]
    ea02:	bd10      	pop	{r4, pc}
    ea04:	100034bc 	.word	0x100034bc
    ea08:	1000366c 	.word	0x1000366c

0000ea0c <dmAdvInit>:
    ea0c:	b508      	push	{r3, lr}
    ea0e:	2000      	movs	r0, #0
    ea10:	f7ff ffe0 	bl	e9d4 <dmAdvCbInit>
    ea14:	4b03      	ldr	r3, [pc, #12]	; (ea24 <dmAdvInit+0x18>)
    ea16:	4a04      	ldr	r2, [pc, #16]	; (ea28 <dmAdvInit+0x1c>)
    ea18:	7b19      	ldrb	r1, [r3, #12]
    ea1a:	7211      	strb	r1, [r2, #8]
    ea1c:	2200      	movs	r2, #0
    ea1e:	739a      	strb	r2, [r3, #14]
    ea20:	bd08      	pop	{r3, pc}
    ea22:	bf00      	nop
    ea24:	1000366c 	.word	0x1000366c
    ea28:	100034bc 	.word	0x100034bc

0000ea2c <DmAdvConfig>:
    ea2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea30:	4607      	mov	r7, r0
    ea32:	200e      	movs	r0, #14
    ea34:	4688      	mov	r8, r1
    ea36:	4616      	mov	r6, r2
    ea38:	461d      	mov	r5, r3
    ea3a:	f009 f812 	bl	17a62 <WsfMsgAlloc>
    ea3e:	4604      	mov	r4, r0
    ea40:	b180      	cbz	r0, ea64 <DmAdvConfig+0x38>
    ea42:	2300      	movs	r3, #0
    ea44:	7083      	strb	r3, [r0, #2]
    ea46:	f880 8005 	strb.w	r8, [r0, #5]
    ea4a:	7107      	strb	r7, [r0, #4]
    ea4c:	7186      	strb	r6, [r0, #6]
    ea4e:	4629      	mov	r1, r5
    ea50:	3007      	adds	r0, #7
    ea52:	f009 fec9 	bl	187e8 <BdaCpy>
    ea56:	4b04      	ldr	r3, [pc, #16]	; (ea68 <DmAdvConfig+0x3c>)
    ea58:	4621      	mov	r1, r4
    ea5a:	7b18      	ldrb	r0, [r3, #12]
    ea5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea60:	f009 b823 	b.w	17aaa <WsfMsgSend>
    ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea68:	1000366c 	.word	0x1000366c

0000ea6c <DmAdvSetData>:
    ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea70:	4680      	mov	r8, r0
    ea72:	200c      	movs	r0, #12
    ea74:	460f      	mov	r7, r1
    ea76:	4616      	mov	r6, r2
    ea78:	461d      	mov	r5, r3
    ea7a:	9c06      	ldr	r4, [sp, #24]
    ea7c:	f008 fff1 	bl	17a62 <WsfMsgAlloc>
    ea80:	b170      	cbz	r0, eaa0 <DmAdvSetData+0x34>
    ea82:	2301      	movs	r3, #1
    ea84:	7083      	strb	r3, [r0, #2]
    ea86:	4b07      	ldr	r3, [pc, #28]	; (eaa4 <DmAdvSetData+0x38>)
    ea88:	f880 8004 	strb.w	r8, [r0, #4]
    ea8c:	7147      	strb	r7, [r0, #5]
    ea8e:	7186      	strb	r6, [r0, #6]
    ea90:	71c5      	strb	r5, [r0, #7]
    ea92:	6084      	str	r4, [r0, #8]
    ea94:	4601      	mov	r1, r0
    ea96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea9a:	7b18      	ldrb	r0, [r3, #12]
    ea9c:	f009 b805 	b.w	17aaa <WsfMsgSend>
    eaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaa4:	1000366c 	.word	0x1000366c

0000eaa8 <DmAdvStart>:
    eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaaa:	4604      	mov	r4, r0
    eaac:	200a      	movs	r0, #10
    eaae:	460f      	mov	r7, r1
    eab0:	4616      	mov	r6, r2
    eab2:	461d      	mov	r5, r3
    eab4:	f008 ffd5 	bl	17a62 <WsfMsgAlloc>
    eab8:	b180      	cbz	r0, eadc <DmAdvStart+0x34>
    eaba:	2302      	movs	r3, #2
    eabc:	7083      	strb	r3, [r0, #2]
    eabe:	7104      	strb	r4, [r0, #4]
    eac0:	b12c      	cbz	r4, eace <DmAdvStart+0x26>
    eac2:	783b      	ldrb	r3, [r7, #0]
    eac4:	7143      	strb	r3, [r0, #5]
    eac6:	8833      	ldrh	r3, [r6, #0]
    eac8:	80c3      	strh	r3, [r0, #6]
    eaca:	782b      	ldrb	r3, [r5, #0]
    eacc:	7203      	strb	r3, [r0, #8]
    eace:	4b04      	ldr	r3, [pc, #16]	; (eae0 <DmAdvStart+0x38>)
    ead0:	4601      	mov	r1, r0
    ead2:	7b18      	ldrb	r0, [r3, #12]
    ead4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ead8:	f008 bfe7 	b.w	17aaa <WsfMsgSend>
    eadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eade:	bf00      	nop
    eae0:	1000366c 	.word	0x1000366c

0000eae4 <DmAdvStop>:
    eae4:	b538      	push	{r3, r4, r5, lr}
    eae6:	4604      	mov	r4, r0
    eae8:	2006      	movs	r0, #6
    eaea:	460d      	mov	r5, r1
    eaec:	f008 ffb9 	bl	17a62 <WsfMsgAlloc>
    eaf0:	b1a0      	cbz	r0, eb1c <DmAdvStop+0x38>
    eaf2:	2303      	movs	r3, #3
    eaf4:	7104      	strb	r4, [r0, #4]
    eaf6:	3405      	adds	r4, #5
    eaf8:	7083      	strb	r3, [r0, #2]
    eafa:	1e69      	subs	r1, r5, #1
    eafc:	1d43      	adds	r3, r0, #5
    eafe:	4404      	add	r4, r0
    eb00:	42a3      	cmp	r3, r4
    eb02:	d106      	bne.n	eb12 <DmAdvStop+0x2e>
    eb04:	4b06      	ldr	r3, [pc, #24]	; (eb20 <DmAdvStop+0x3c>)
    eb06:	4601      	mov	r1, r0
    eb08:	7b18      	ldrb	r0, [r3, #12]
    eb0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    eb0e:	f008 bfcc 	b.w	17aaa <WsfMsgSend>
    eb12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    eb16:	f803 2b01 	strb.w	r2, [r3], #1
    eb1a:	e7f1      	b.n	eb00 <DmAdvStop+0x1c>
    eb1c:	bd38      	pop	{r3, r4, r5, pc}
    eb1e:	bf00      	nop
    eb20:	1000366c 	.word	0x1000366c

0000eb24 <DmAdvRemoveAdvSet>:
    eb24:	b510      	push	{r4, lr}
    eb26:	4604      	mov	r4, r0
    eb28:	2006      	movs	r0, #6
    eb2a:	f008 ff9a 	bl	17a62 <WsfMsgAlloc>
    eb2e:	4601      	mov	r1, r0
    eb30:	b140      	cbz	r0, eb44 <DmAdvRemoveAdvSet+0x20>
    eb32:	2304      	movs	r3, #4
    eb34:	7083      	strb	r3, [r0, #2]
    eb36:	4b04      	ldr	r3, [pc, #16]	; (eb48 <DmAdvRemoveAdvSet+0x24>)
    eb38:	7104      	strb	r4, [r0, #4]
    eb3a:	7b18      	ldrb	r0, [r3, #12]
    eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb40:	f008 bfb3 	b.w	17aaa <WsfMsgSend>
    eb44:	bd10      	pop	{r4, pc}
    eb46:	bf00      	nop
    eb48:	1000366c 	.word	0x1000366c

0000eb4c <DmAdvClearAdvSets>:
    eb4c:	b508      	push	{r3, lr}
    eb4e:	2004      	movs	r0, #4
    eb50:	f008 ff87 	bl	17a62 <WsfMsgAlloc>
    eb54:	4601      	mov	r1, r0
    eb56:	b138      	cbz	r0, eb68 <DmAdvClearAdvSets+0x1c>
    eb58:	2305      	movs	r3, #5
    eb5a:	7083      	strb	r3, [r0, #2]
    eb5c:	4b03      	ldr	r3, [pc, #12]	; (eb6c <DmAdvClearAdvSets+0x20>)
    eb5e:	7b18      	ldrb	r0, [r3, #12]
    eb60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    eb64:	f008 bfa1 	b.w	17aaa <WsfMsgSend>
    eb68:	bd08      	pop	{r3, pc}
    eb6a:	bf00      	nop
    eb6c:	1000366c 	.word	0x1000366c

0000eb70 <DmAdvSetInterval>:
    eb70:	b570      	push	{r4, r5, r6, lr}
    eb72:	4604      	mov	r4, r0
    eb74:	460e      	mov	r6, r1
    eb76:	4615      	mov	r5, r2
    eb78:	f00b fc36 	bl	1a3e8 <WsfTaskLock>
    eb7c:	f104 0008 	add.w	r0, r4, #8
    eb80:	4b04      	ldr	r3, [pc, #16]	; (eb94 <DmAdvSetInterval+0x24>)
    eb82:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    eb86:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    eb8a:	805d      	strh	r5, [r3, #2]
    eb8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eb90:	f00b bc30 	b.w	1a3f4 <WsfTaskUnlock>
    eb94:	100034bc 	.word	0x100034bc

0000eb98 <DmAdvSetChannelMap>:
    eb98:	b538      	push	{r3, r4, r5, lr}
    eb9a:	4605      	mov	r5, r0
    eb9c:	460c      	mov	r4, r1
    eb9e:	f00b fc23 	bl	1a3e8 <WsfTaskLock>
    eba2:	4803      	ldr	r0, [pc, #12]	; (ebb0 <DmAdvSetChannelMap+0x18>)
    eba4:	4428      	add	r0, r5
    eba6:	7544      	strb	r4, [r0, #21]
    eba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebac:	f00b bc22 	b.w	1a3f4 <WsfTaskUnlock>
    ebb0:	100034bc 	.word	0x100034bc

0000ebb4 <DmAdvSetAddrType>:
    ebb4:	b510      	push	{r4, lr}
    ebb6:	4604      	mov	r4, r0
    ebb8:	f00b fc16 	bl	1a3e8 <WsfTaskLock>
    ebbc:	4b02      	ldr	r3, [pc, #8]	; (ebc8 <DmAdvSetAddrType+0x14>)
    ebbe:	739c      	strb	r4, [r3, #14]
    ebc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc4:	f00b bc16 	b.w	1a3f4 <WsfTaskUnlock>
    ebc8:	1000366c 	.word	0x1000366c

0000ebcc <DmAdvSetAdValue>:
    ebcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebd0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ebd4:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
    ebd8:	460c      	mov	r4, r1
    ebda:	4691      	mov	r9, r2
    ebdc:	8819      	ldrh	r1, [r3, #0]
    ebde:	4642      	mov	r2, r8
    ebe0:	4683      	mov	fp, r0
    ebe2:	461f      	mov	r7, r3
    ebe4:	f000 ff50 	bl	fa88 <DmFindAdType>
    ebe8:	b1f8      	cbz	r0, ec2a <DmAdvSetAdValue+0x5e>
    ebea:	7805      	ldrb	r5, [r0, #0]
    ebec:	1c66      	adds	r6, r4, #1
    ebee:	42ae      	cmp	r6, r5
    ebf0:	d107      	bne.n	ec02 <DmAdvSetAdValue+0x36>
    ebf2:	4622      	mov	r2, r4
    ebf4:	4649      	mov	r1, r9
    ebf6:	3002      	adds	r0, #2
    ebf8:	f7fd fab2 	bl	c160 <memcpy>
    ebfc:	2001      	movs	r0, #1
    ebfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec02:	f8b7 c000 	ldrh.w	ip, [r7]
    ec06:	b2ad      	uxth	r5, r5
    ec08:	4466      	add	r6, ip
    ec0a:	1b76      	subs	r6, r6, r5
    ec0c:	b2b6      	uxth	r6, r6
    ec0e:	4556      	cmp	r6, sl
    ec10:	d80b      	bhi.n	ec2a <DmAdvSetAdValue+0x5e>
    ec12:	3501      	adds	r5, #1
    ec14:	1941      	adds	r1, r0, r5
    ec16:	eba1 0208 	sub.w	r2, r1, r8
    ec1a:	b2d2      	uxtb	r2, r2
    ec1c:	ebac 0202 	sub.w	r2, ip, r2
    ec20:	f7fd fb38 	bl	c294 <memmove>
    ec24:	883b      	ldrh	r3, [r7, #0]
    ec26:	1b5d      	subs	r5, r3, r5
    ec28:	803d      	strh	r5, [r7, #0]
    ec2a:	883b      	ldrh	r3, [r7, #0]
    ec2c:	191a      	adds	r2, r3, r4
    ec2e:	3201      	adds	r2, #1
    ec30:	4552      	cmp	r2, sl
    ec32:	da10      	bge.n	ec56 <DmAdvSetAdValue+0x8a>
    ec34:	eb08 0003 	add.w	r0, r8, r3
    ec38:	1c62      	adds	r2, r4, #1
    ec3a:	f808 2003 	strb.w	r2, [r8, r3]
    ec3e:	4649      	mov	r1, r9
    ec40:	f880 b001 	strb.w	fp, [r0, #1]
    ec44:	4622      	mov	r2, r4
    ec46:	3002      	adds	r0, #2
    ec48:	f7fd fa8a 	bl	c160 <memcpy>
    ec4c:	883b      	ldrh	r3, [r7, #0]
    ec4e:	3402      	adds	r4, #2
    ec50:	441c      	add	r4, r3
    ec52:	803c      	strh	r4, [r7, #0]
    ec54:	e7d2      	b.n	ebfc <DmAdvSetAdValue+0x30>
    ec56:	2000      	movs	r0, #0
    ec58:	e7d1      	b.n	ebfe <DmAdvSetAdValue+0x32>

0000ec5a <DmAdvSetName>:
    ec5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ec5e:	4614      	mov	r4, r2
    ec60:	4606      	mov	r6, r0
    ec62:	460f      	mov	r7, r1
    ec64:	461a      	mov	r2, r3
    ec66:	8821      	ldrh	r1, [r4, #0]
    ec68:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    ec6c:	2009      	movs	r0, #9
    ec6e:	4698      	mov	r8, r3
    ec70:	f000 ff0a 	bl	fa88 <DmFindAdType>
    ec74:	b928      	cbnz	r0, ec82 <DmAdvSetName+0x28>
    ec76:	4642      	mov	r2, r8
    ec78:	8821      	ldrh	r1, [r4, #0]
    ec7a:	2008      	movs	r0, #8
    ec7c:	f000 ff04 	bl	fa88 <DmFindAdType>
    ec80:	b188      	cbz	r0, eca6 <DmAdvSetName+0x4c>
    ec82:	f890 9000 	ldrb.w	r9, [r0]
    ec86:	8822      	ldrh	r2, [r4, #0]
    ec88:	f109 0901 	add.w	r9, r9, #1
    ec8c:	eb00 0109 	add.w	r1, r0, r9
    ec90:	eba1 0308 	sub.w	r3, r1, r8
    ec94:	b2db      	uxtb	r3, r3
    ec96:	1ad2      	subs	r2, r2, r3
    ec98:	f7fd fafc 	bl	c294 <memmove>
    ec9c:	8823      	ldrh	r3, [r4, #0]
    ec9e:	eba3 0909 	sub.w	r9, r3, r9
    eca2:	f8a4 9000 	strh.w	r9, [r4]
    eca6:	8822      	ldrh	r2, [r4, #0]
    eca8:	1e6b      	subs	r3, r5, #1
    ecaa:	4293      	cmp	r3, r2
    ecac:	dd1c      	ble.n	ece8 <DmAdvSetName+0x8e>
    ecae:	18b3      	adds	r3, r6, r2
    ecb0:	3301      	adds	r3, #1
    ecb2:	429d      	cmp	r5, r3
    ecb4:	bfde      	ittt	le
    ecb6:	3d02      	suble	r5, #2
    ecb8:	1aad      	suble	r5, r5, r2
    ecba:	b2ee      	uxtble	r6, r5
    ecbc:	eb08 0002 	add.w	r0, r8, r2
    ecc0:	bfd4      	ite	le
    ecc2:	2308      	movle	r3, #8
    ecc4:	2309      	movgt	r3, #9
    ecc6:	1c71      	adds	r1, r6, #1
    ecc8:	f808 1002 	strb.w	r1, [r8, r2]
    eccc:	3002      	adds	r0, #2
    ecce:	f800 3c01 	strb.w	r3, [r0, #-1]
    ecd2:	4632      	mov	r2, r6
    ecd4:	4639      	mov	r1, r7
    ecd6:	f7fd fa43 	bl	c160 <memcpy>
    ecda:	8825      	ldrh	r5, [r4, #0]
    ecdc:	3502      	adds	r5, #2
    ecde:	4435      	add	r5, r6
    ece0:	8025      	strh	r5, [r4, #0]
    ece2:	2001      	movs	r0, #1
    ece4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ece8:	2000      	movs	r0, #0
    ecea:	e7fb      	b.n	ece4 <DmAdvSetName+0x8a>

0000ecec <dmAdvActRemoveSet>:
    ecec:	4770      	bx	lr

0000ecee <dmAdvMsgHandler>:
    ecee:	7883      	ldrb	r3, [r0, #2]
    ecf0:	4a02      	ldr	r2, [pc, #8]	; (ecfc <dmAdvMsgHandler+0xe>)
    ecf2:	f003 030f 	and.w	r3, r3, #15
    ecf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecfa:	4718      	bx	r3
    ecfc:	00021ef0 	.word	0x00021ef0

0000ed00 <dmAdvConfig>:
    ed00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ed04:	4e0e      	ldr	r6, [pc, #56]	; (ed40 <dmAdvConfig+0x40>)
    ed06:	4c0f      	ldr	r4, [pc, #60]	; (ed44 <dmAdvConfig+0x44>)
    ed08:	4605      	mov	r5, r0
    ed0a:	7bb0      	ldrb	r0, [r6, #14]
    ed0c:	8a27      	ldrh	r7, [r4, #16]
    ed0e:	f8b4 8012 	ldrh.w	r8, [r4, #18]
    ed12:	4689      	mov	r9, r1
    ed14:	4692      	mov	sl, r2
    ed16:	f000 fef1 	bl	fafc <DmLlAddrType>
    ed1a:	7c73      	ldrb	r3, [r6, #17]
    ed1c:	9303      	str	r3, [sp, #12]
    ed1e:	7d63      	ldrb	r3, [r4, #21]
    ed20:	f8cd 9000 	str.w	r9, [sp]
    ed24:	e9cd a301 	strd	sl, r3, [sp, #4]
    ed28:	462a      	mov	r2, r5
    ed2a:	4603      	mov	r3, r0
    ed2c:	4641      	mov	r1, r8
    ed2e:	4638      	mov	r0, r7
    ed30:	f005 fb94 	bl	1445c <HciLeSetAdvParamCmd>
    ed34:	4b04      	ldr	r3, [pc, #16]	; (ed48 <dmAdvConfig+0x48>)
    ed36:	701d      	strb	r5, [r3, #0]
    ed38:	b004      	add	sp, #16
    ed3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ed3e:	bf00      	nop
    ed40:	1000366c 	.word	0x1000366c
    ed44:	100034bc 	.word	0x100034bc
    ed48:	100034d8 	.word	0x100034d8

0000ed4c <dmAdvReset>:
    ed4c:	b507      	push	{r0, r1, r2, lr}
    ed4e:	4b0d      	ldr	r3, [pc, #52]	; (ed84 <dmAdvReset+0x38>)
    ed50:	7dda      	ldrb	r2, [r3, #23]
    ed52:	2a05      	cmp	r2, #5
    ed54:	d006      	beq.n	ed64 <dmAdvReset+0x18>
    ed56:	2a01      	cmp	r2, #1
    ed58:	d10e      	bne.n	ed78 <dmAdvReset+0x2c>
    ed5a:	7d1b      	ldrb	r3, [r3, #20]
    ed5c:	2b01      	cmp	r3, #1
    ed5e:	d00b      	beq.n	ed78 <dmAdvReset+0x2c>
    ed60:	2b04      	cmp	r3, #4
    ed62:	d009      	beq.n	ed78 <dmAdvReset+0x2c>
    ed64:	4807      	ldr	r0, [pc, #28]	; (ed84 <dmAdvReset+0x38>)
    ed66:	f009 f85b 	bl	17e20 <WsfTimerStop>
    ed6a:	2322      	movs	r3, #34	; 0x22
    ed6c:	f8ad 3006 	strh.w	r3, [sp, #6]
    ed70:	4b05      	ldr	r3, [pc, #20]	; (ed88 <dmAdvReset+0x3c>)
    ed72:	a801      	add	r0, sp, #4
    ed74:	689b      	ldr	r3, [r3, #8]
    ed76:	4798      	blx	r3
    ed78:	f7ff fe48 	bl	ea0c <dmAdvInit>
    ed7c:	b003      	add	sp, #12
    ed7e:	f85d fb04 	ldr.w	pc, [sp], #4
    ed82:	bf00      	nop
    ed84:	100034bc 	.word	0x100034bc
    ed88:	1000366c 	.word	0x1000366c

0000ed8c <dmAdvActConfig>:
    ed8c:	4b06      	ldr	r3, [pc, #24]	; (eda8 <dmAdvActConfig+0x1c>)
    ed8e:	7dda      	ldrb	r2, [r3, #23]
    ed90:	b942      	cbnz	r2, eda4 <dmAdvActConfig+0x18>
    ed92:	7d1b      	ldrb	r3, [r3, #20]
    ed94:	2b01      	cmp	r3, #1
    ed96:	d005      	beq.n	eda4 <dmAdvActConfig+0x18>
    ed98:	2b04      	cmp	r3, #4
    ed9a:	d003      	beq.n	eda4 <dmAdvActConfig+0x18>
    ed9c:	1dc2      	adds	r2, r0, #7
    ed9e:	7981      	ldrb	r1, [r0, #6]
    eda0:	7940      	ldrb	r0, [r0, #5]
    eda2:	e7ad      	b.n	ed00 <dmAdvConfig>
    eda4:	4770      	bx	lr
    eda6:	bf00      	nop
    eda8:	100034bc 	.word	0x100034bc

0000edac <dmAdvActSetData>:
    edac:	4a06      	ldr	r2, [pc, #24]	; (edc8 <dmAdvActSetData+0x1c>)
    edae:	7dd2      	ldrb	r2, [r2, #23]
    edb0:	4603      	mov	r3, r0
    edb2:	b93a      	cbnz	r2, edc4 <dmAdvActSetData+0x18>
    edb4:	6899      	ldr	r1, [r3, #8]
    edb6:	799b      	ldrb	r3, [r3, #6]
    edb8:	79c0      	ldrb	r0, [r0, #7]
    edba:	b90b      	cbnz	r3, edc0 <dmAdvActSetData+0x14>
    edbc:	f005 bb1e 	b.w	143fc <HciLeSetAdvDataCmd>
    edc0:	f005 bbef 	b.w	145a2 <HciLeSetScanRespDataCmd>
    edc4:	4770      	bx	lr
    edc6:	bf00      	nop
    edc8:	100034bc 	.word	0x100034bc

0000edcc <dmAdvActStart>:
    edcc:	4b07      	ldr	r3, [pc, #28]	; (edec <dmAdvActStart+0x20>)
    edce:	7dda      	ldrb	r2, [r3, #23]
    edd0:	b95a      	cbnz	r2, edea <dmAdvActStart+0x1e>
    edd2:	7d1a      	ldrb	r2, [r3, #20]
    edd4:	2a01      	cmp	r2, #1
    edd6:	d008      	beq.n	edea <dmAdvActStart+0x1e>
    edd8:	2a04      	cmp	r2, #4
    edda:	d006      	beq.n	edea <dmAdvActStart+0x1e>
    eddc:	2203      	movs	r2, #3
    edde:	75da      	strb	r2, [r3, #23]
    ede0:	88c2      	ldrh	r2, [r0, #6]
    ede2:	831a      	strh	r2, [r3, #24]
    ede4:	2001      	movs	r0, #1
    ede6:	f005 baec 	b.w	143c2 <HciLeSetAdvEnableCmd>
    edea:	4770      	bx	lr
    edec:	100034bc 	.word	0x100034bc

0000edf0 <dmAdvActStop>:
    edf0:	4b07      	ldr	r3, [pc, #28]	; (ee10 <dmAdvActStop+0x20>)
    edf2:	7dda      	ldrb	r2, [r3, #23]
    edf4:	2a01      	cmp	r2, #1
    edf6:	d109      	bne.n	ee0c <dmAdvActStop+0x1c>
    edf8:	7d1a      	ldrb	r2, [r3, #20]
    edfa:	2a01      	cmp	r2, #1
    edfc:	d006      	beq.n	ee0c <dmAdvActStop+0x1c>
    edfe:	2a04      	cmp	r2, #4
    ee00:	d004      	beq.n	ee0c <dmAdvActStop+0x1c>
    ee02:	2205      	movs	r2, #5
    ee04:	2000      	movs	r0, #0
    ee06:	75da      	strb	r2, [r3, #23]
    ee08:	f005 badb 	b.w	143c2 <HciLeSetAdvEnableCmd>
    ee0c:	4770      	bx	lr
    ee0e:	bf00      	nop
    ee10:	100034bc 	.word	0x100034bc

0000ee14 <dmAdvActTimeout>:
    ee14:	f7ff bfec 	b.w	edf0 <dmAdvActStop>

0000ee18 <dmAdvHciHandler>:
    ee18:	7883      	ldrb	r3, [r0, #2]
    ee1a:	2b35      	cmp	r3, #53	; 0x35
    ee1c:	b570      	push	{r4, r5, r6, lr}
    ee1e:	4605      	mov	r5, r0
    ee20:	d144      	bne.n	eeac <dmAdvHciHandler+0x94>
    ee22:	4c23      	ldr	r4, [pc, #140]	; (eeb0 <dmAdvHciHandler+0x98>)
    ee24:	7de3      	ldrb	r3, [r4, #23]
    ee26:	2b03      	cmp	r3, #3
    ee28:	d01d      	beq.n	ee66 <dmAdvHciHandler+0x4e>
    ee2a:	2b05      	cmp	r3, #5
    ee2c:	d138      	bne.n	eea0 <dmAdvHciHandler+0x88>
    ee2e:	2622      	movs	r6, #34	; 0x22
    ee30:	78ea      	ldrb	r2, [r5, #3]
    ee32:	2a00      	cmp	r2, #0
    ee34:	d12e      	bne.n	ee94 <dmAdvHciHandler+0x7c>
    ee36:	2b05      	cmp	r3, #5
    ee38:	d109      	bne.n	ee4e <dmAdvHciHandler+0x36>
    ee3a:	481d      	ldr	r0, [pc, #116]	; (eeb0 <dmAdvHciHandler+0x98>)
    ee3c:	f008 fff0 	bl	17e20 <WsfTimerStop>
    ee40:	2315      	movs	r3, #21
    ee42:	70ab      	strb	r3, [r5, #2]
    ee44:	4b1b      	ldr	r3, [pc, #108]	; (eeb4 <dmAdvHciHandler+0x9c>)
    ee46:	685b      	ldr	r3, [r3, #4]
    ee48:	4628      	mov	r0, r5
    ee4a:	689b      	ldr	r3, [r3, #8]
    ee4c:	4798      	blx	r3
    ee4e:	23ff      	movs	r3, #255	; 0xff
    ee50:	7523      	strb	r3, [r4, #20]
    ee52:	2300      	movs	r3, #0
    ee54:	75e3      	strb	r3, [r4, #23]
    ee56:	b34e      	cbz	r6, eeac <dmAdvHciHandler+0x94>
    ee58:	4b17      	ldr	r3, [pc, #92]	; (eeb8 <dmAdvHciHandler+0xa0>)
    ee5a:	70ae      	strb	r6, [r5, #2]
    ee5c:	4628      	mov	r0, r5
    ee5e:	689b      	ldr	r3, [r3, #8]
    ee60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ee64:	4718      	bx	r3
    ee66:	2621      	movs	r6, #33	; 0x21
    ee68:	78ea      	ldrb	r2, [r5, #3]
    ee6a:	2a00      	cmp	r2, #0
    ee6c:	d1f1      	bne.n	ee52 <dmAdvHciHandler+0x3a>
    ee6e:	2b03      	cmp	r3, #3
    ee70:	d10d      	bne.n	ee8e <dmAdvHciHandler+0x76>
    ee72:	8b21      	ldrh	r1, [r4, #24]
    ee74:	b121      	cbz	r1, ee80 <dmAdvHciHandler+0x68>
    ee76:	2306      	movs	r3, #6
    ee78:	480d      	ldr	r0, [pc, #52]	; (eeb0 <dmAdvHciHandler+0x98>)
    ee7a:	7323      	strb	r3, [r4, #12]
    ee7c:	f008 ffbc 	bl	17df8 <WsfTimerStartMs>
    ee80:	2314      	movs	r3, #20
    ee82:	70ab      	strb	r3, [r5, #2]
    ee84:	4b0b      	ldr	r3, [pc, #44]	; (eeb4 <dmAdvHciHandler+0x9c>)
    ee86:	685b      	ldr	r3, [r3, #4]
    ee88:	4628      	mov	r0, r5
    ee8a:	689b      	ldr	r3, [r3, #8]
    ee8c:	4798      	blx	r3
    ee8e:	4b0b      	ldr	r3, [pc, #44]	; (eebc <dmAdvHciHandler+0xa4>)
    ee90:	781b      	ldrb	r3, [r3, #0]
    ee92:	7523      	strb	r3, [r4, #20]
    ee94:	2301      	movs	r3, #1
    ee96:	e7dd      	b.n	ee54 <dmAdvHciHandler+0x3c>
    ee98:	2600      	movs	r6, #0
    ee9a:	e7e5      	b.n	ee68 <dmAdvHciHandler+0x50>
    ee9c:	2600      	movs	r6, #0
    ee9e:	e7c7      	b.n	ee30 <dmAdvHciHandler+0x18>
    eea0:	2b02      	cmp	r3, #2
    eea2:	d303      	bcc.n	eeac <dmAdvHciHandler+0x94>
    eea4:	2b03      	cmp	r3, #3
    eea6:	d9f7      	bls.n	ee98 <dmAdvHciHandler+0x80>
    eea8:	2b04      	cmp	r3, #4
    eeaa:	d0f7      	beq.n	ee9c <dmAdvHciHandler+0x84>
    eeac:	bd70      	pop	{r4, r5, r6, pc}
    eeae:	bf00      	nop
    eeb0:	100034bc 	.word	0x100034bc
    eeb4:	10002354 	.word	0x10002354
    eeb8:	1000366c 	.word	0x1000366c
    eebc:	100034d8 	.word	0x100034d8

0000eec0 <dmAdvActClearSets>:
    eec0:	4770      	bx	lr

0000eec2 <dmAdvStartDirected>:
    eec2:	b510      	push	{r4, lr}
    eec4:	4c08      	ldr	r4, [pc, #32]	; (eee8 <dmAdvStartDirected+0x26>)
    eec6:	9a03      	ldr	r2, [sp, #12]
    eec8:	7de3      	ldrb	r3, [r4, #23]
    eeca:	4608      	mov	r0, r1
    eecc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    eed0:	b943      	cbnz	r3, eee4 <dmAdvStartDirected+0x22>
    eed2:	f7ff ff15 	bl	ed00 <dmAdvConfig>
    eed6:	2302      	movs	r3, #2
    eed8:	75e3      	strb	r3, [r4, #23]
    eeda:	2001      	movs	r0, #1
    eedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eee0:	f005 ba6f 	b.w	143c2 <HciLeSetAdvEnableCmd>
    eee4:	bd10      	pop	{r4, pc}
    eee6:	bf00      	nop
    eee8:	100034bc 	.word	0x100034bc

0000eeec <dmAdvStopDirected>:
    eeec:	4b04      	ldr	r3, [pc, #16]	; (ef00 <dmAdvStopDirected+0x14>)
    eeee:	7dda      	ldrb	r2, [r3, #23]
    eef0:	2a01      	cmp	r2, #1
    eef2:	d104      	bne.n	eefe <dmAdvStopDirected+0x12>
    eef4:	2204      	movs	r2, #4
    eef6:	2000      	movs	r0, #0
    eef8:	75da      	strb	r2, [r3, #23]
    eefa:	f005 ba62 	b.w	143c2 <HciLeSetAdvEnableCmd>
    eefe:	4770      	bx	lr
    ef00:	100034bc 	.word	0x100034bc

0000ef04 <dmAdvConnected>:
    ef04:	b510      	push	{r4, lr}
    ef06:	4c04      	ldr	r4, [pc, #16]	; (ef18 <dmAdvConnected+0x14>)
    ef08:	4620      	mov	r0, r4
    ef0a:	f008 ff89 	bl	17e20 <WsfTimerStop>
    ef0e:	23ff      	movs	r3, #255	; 0xff
    ef10:	7523      	strb	r3, [r4, #20]
    ef12:	2300      	movs	r3, #0
    ef14:	75e3      	strb	r3, [r4, #23]
    ef16:	bd10      	pop	{r4, pc}
    ef18:	100034bc 	.word	0x100034bc

0000ef1c <dmAdvConnectFailed>:
    ef1c:	f7ff bff2 	b.w	ef04 <dmAdvConnected>

0000ef20 <DmAdvInit>:
    ef20:	b508      	push	{r3, lr}
    ef22:	f00b fa61 	bl	1a3e8 <WsfTaskLock>
    ef26:	4b04      	ldr	r3, [pc, #16]	; (ef38 <DmAdvInit+0x18>)
    ef28:	4a04      	ldr	r2, [pc, #16]	; (ef3c <DmAdvInit+0x1c>)
    ef2a:	601a      	str	r2, [r3, #0]
    ef2c:	f7ff fd6e 	bl	ea0c <dmAdvInit>
    ef30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ef34:	f00b ba5e 	b.w	1a3f4 <WsfTaskUnlock>
    ef38:	10002354 	.word	0x10002354
    ef3c:	00021f0c 	.word	0x00021f0c

0000ef40 <DmAdvModeLeg>:
    ef40:	4b03      	ldr	r3, [pc, #12]	; (ef50 <DmAdvModeLeg+0x10>)
    ef42:	6818      	ldr	r0, [r3, #0]
    ef44:	4b03      	ldr	r3, [pc, #12]	; (ef54 <DmAdvModeLeg+0x14>)
    ef46:	1ac3      	subs	r3, r0, r3
    ef48:	4258      	negs	r0, r3
    ef4a:	4158      	adcs	r0, r3
    ef4c:	4770      	bx	lr
    ef4e:	bf00      	nop
    ef50:	10002354 	.word	0x10002354
    ef54:	00021f0c 	.word	0x00021f0c

0000ef58 <dmConnSmActNone>:
    ef58:	4770      	bx	lr

0000ef5a <dmConnSmActHciUpdated>:
    ef5a:	2329      	movs	r3, #41	; 0x29
    ef5c:	708b      	strb	r3, [r1, #2]
    ef5e:	4b02      	ldr	r3, [pc, #8]	; (ef68 <dmConnSmActHciUpdated+0xe>)
    ef60:	4608      	mov	r0, r1
    ef62:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    ef66:	4718      	bx	r3
    ef68:	100034dc 	.word	0x100034dc

0000ef6c <dmConnSmActClose>:
    ef6c:	7909      	ldrb	r1, [r1, #4]
    ef6e:	8980      	ldrh	r0, [r0, #12]
    ef70:	f004 bea0 	b.w	13cb4 <HciDisconnectCmd>

0000ef74 <dmConnReset>:
    ef74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ef76:	2339      	movs	r3, #57	; 0x39
    ef78:	4d14      	ldr	r5, [pc, #80]	; (efcc <dmConnReset+0x58>)
    ef7a:	f8ad 3006 	strh.w	r3, [sp, #6]
    ef7e:	2400      	movs	r4, #0
    ef80:	2316      	movs	r3, #22
    ef82:	f88d 4008 	strb.w	r4, [sp, #8]
    ef86:	f88d 300c 	strb.w	r3, [sp, #12]
    ef8a:	462e      	mov	r6, r5
    ef8c:	1928      	adds	r0, r5, r4
    ef8e:	7d83      	ldrb	r3, [r0, #22]
    ef90:	b13b      	cbz	r3, efa2 <dmConnReset+0x2e>
    ef92:	7c03      	ldrb	r3, [r0, #16]
    ef94:	f8ad 300a 	strh.w	r3, [sp, #10]
    ef98:	a901      	add	r1, sp, #4
    ef9a:	f8ad 3004 	strh.w	r3, [sp, #4]
    ef9e:	f000 fca1 	bl	f8e4 <dmConnSmExecute>
    efa2:	342c      	adds	r4, #44	; 0x2c
    efa4:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    efa8:	d1f0      	bne.n	ef8c <dmConnReset+0x18>
    efaa:	4a09      	ldr	r2, [pc, #36]	; (efd0 <dmConnReset+0x5c>)
    efac:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
    efb0:	f8c6 3180 	str.w	r3, [r6, #384]	; 0x180
    efb4:	6810      	ldr	r0, [r2, #0]
    efb6:	6851      	ldr	r1, [r2, #4]
    efb8:	4b06      	ldr	r3, [pc, #24]	; (efd4 <dmConnReset+0x60>)
    efba:	c303      	stmia	r3!, {r0, r1}
    efbc:	6890      	ldr	r0, [r2, #8]
    efbe:	6018      	str	r0, [r3, #0]
    efc0:	4b05      	ldr	r3, [pc, #20]	; (efd8 <dmConnReset+0x64>)
    efc2:	2200      	movs	r2, #0
    efc4:	74da      	strb	r2, [r3, #19]
    efc6:	735a      	strb	r2, [r3, #13]
    efc8:	b004      	add	sp, #16
    efca:	bd70      	pop	{r4, r5, r6, pc}
    efcc:	100034dc 	.word	0x100034dc
    efd0:	00021f18 	.word	0x00021f18
    efd4:	10003650 	.word	0x10003650
    efd8:	1000366c 	.word	0x1000366c

0000efdc <dmConnSetConnSpec>:
    efdc:	b538      	push	{r3, r4, r5, lr}
    efde:	4605      	mov	r5, r0
    efe0:	460c      	mov	r4, r1
    efe2:	f00b fa01 	bl	1a3e8 <WsfTaskLock>
    efe6:	4628      	mov	r0, r5
    efe8:	f000 fdc4 	bl	fb74 <DmInitPhyToIdx>
    efec:	4a07      	ldr	r2, [pc, #28]	; (f00c <dmConnSetConnSpec+0x30>)
    efee:	6861      	ldr	r1, [r4, #4]
    eff0:	230c      	movs	r3, #12
    eff2:	fb03 2300 	mla	r3, r3, r0, r2
    eff6:	6820      	ldr	r0, [r4, #0]
    eff8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
    effc:	c303      	stmia	r3!, {r0, r1}
    effe:	68a0      	ldr	r0, [r4, #8]
    f000:	6018      	str	r0, [r3, #0]
    f002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f006:	f00b b9f5 	b.w	1a3f4 <WsfTaskUnlock>
    f00a:	bf00      	nop
    f00c:	100034dc 	.word	0x100034dc

0000f010 <dmConnCcbAlloc>:
    f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f012:	4c0f      	ldr	r4, [pc, #60]	; (f050 <dmConnCcbAlloc+0x40>)
    f014:	4607      	mov	r7, r0
    f016:	2500      	movs	r5, #0
    f018:	7da6      	ldrb	r6, [r4, #22]
    f01a:	3501      	adds	r5, #1
    f01c:	b2ed      	uxtb	r5, r5
    f01e:	b98e      	cbnz	r6, f044 <dmConnCcbAlloc+0x34>
    f020:	222c      	movs	r2, #44	; 0x2c
    f022:	4631      	mov	r1, r6
    f024:	4620      	mov	r0, r4
    f026:	f7fd f999 	bl	c35c <memset>
    f02a:	4639      	mov	r1, r7
    f02c:	4620      	mov	r0, r4
    f02e:	f009 fbdb 	bl	187e8 <BdaCpy>
    f032:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f036:	81a3      	strh	r3, [r4, #12]
    f038:	2301      	movs	r3, #1
    f03a:	7425      	strb	r5, [r4, #16]
    f03c:	7466      	strb	r6, [r4, #17]
    f03e:	75a3      	strb	r3, [r4, #22]
    f040:	4620      	mov	r0, r4
    f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f044:	2d08      	cmp	r5, #8
    f046:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    f04a:	d1e5      	bne.n	f018 <dmConnCcbAlloc+0x8>
    f04c:	2400      	movs	r4, #0
    f04e:	e7f7      	b.n	f040 <dmConnCcbAlloc+0x30>
    f050:	100034dc 	.word	0x100034dc

0000f054 <dmConnCcbDealloc>:
    f054:	2300      	movs	r3, #0
    f056:	7583      	strb	r3, [r0, #22]
    f058:	4770      	bx	lr

0000f05a <dmConnCcbByHandle>:
    f05a:	b510      	push	{r4, lr}
    f05c:	4907      	ldr	r1, [pc, #28]	; (f07c <dmConnCcbByHandle+0x22>)
    f05e:	2200      	movs	r2, #0
    f060:	188b      	adds	r3, r1, r2
    f062:	7d9c      	ldrb	r4, [r3, #22]
    f064:	b114      	cbz	r4, f06c <dmConnCcbByHandle+0x12>
    f066:	899c      	ldrh	r4, [r3, #12]
    f068:	4284      	cmp	r4, r0
    f06a:	d004      	beq.n	f076 <dmConnCcbByHandle+0x1c>
    f06c:	322c      	adds	r2, #44	; 0x2c
    f06e:	f5b2 7fb0 	cmp.w	r2, #352	; 0x160
    f072:	d1f5      	bne.n	f060 <dmConnCcbByHandle+0x6>
    f074:	2300      	movs	r3, #0
    f076:	4618      	mov	r0, r3
    f078:	bd10      	pop	{r4, pc}
    f07a:	bf00      	nop
    f07c:	100034dc 	.word	0x100034dc

0000f080 <dmConn2HciHandler>:
    f080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f082:	4604      	mov	r4, r0
    f084:	8800      	ldrh	r0, [r0, #0]
    f086:	f7ff ffe8 	bl	f05a <dmConnCcbByHandle>
    f08a:	b138      	cbz	r0, f09c <dmConn2HciHandler+0x1c>
    f08c:	78a3      	ldrb	r3, [r4, #2]
    f08e:	2b23      	cmp	r3, #35	; 0x23
    f090:	d02a      	beq.n	f0e8 <dmConn2HciHandler+0x68>
    f092:	d805      	bhi.n	f0a0 <dmConn2HciHandler+0x20>
    f094:	2b07      	cmp	r3, #7
    f096:	d00f      	beq.n	f0b8 <dmConn2HciHandler+0x38>
    f098:	2b0b      	cmp	r3, #11
    f09a:	d052      	beq.n	f142 <dmConn2HciHandler+0xc2>
    f09c:	b004      	add	sp, #16
    f09e:	bd10      	pop	{r4, pc}
    f0a0:	2b27      	cmp	r3, #39	; 0x27
    f0a2:	d037      	beq.n	f114 <dmConn2HciHandler+0x94>
    f0a4:	2b28      	cmp	r3, #40	; 0x28
    f0a6:	d042      	beq.n	f12e <dmConn2HciHandler+0xae>
    f0a8:	2b24      	cmp	r3, #36	; 0x24
    f0aa:	d1f7      	bne.n	f09c <dmConn2HciHandler+0x1c>
    f0ac:	7c02      	ldrb	r2, [r0, #16]
    f0ae:	8983      	ldrh	r3, [r0, #12]
    f0b0:	f8ad 2000 	strh.w	r2, [sp]
    f0b4:	2240      	movs	r2, #64	; 0x40
    f0b6:	e01c      	b.n	f0f2 <dmConn2HciHandler+0x72>
    f0b8:	8981      	ldrh	r1, [r0, #12]
    f0ba:	7923      	ldrb	r3, [r4, #4]
    f0bc:	7c00      	ldrb	r0, [r0, #16]
    f0be:	f994 2008 	ldrsb.w	r2, [r4, #8]
    f0c2:	f8ad 0000 	strh.w	r0, [sp]
    f0c6:	2438      	movs	r4, #56	; 0x38
    f0c8:	f88d 4002 	strb.w	r4, [sp, #2]
    f0cc:	f88d 3003 	strb.w	r3, [sp, #3]
    f0d0:	f88d 3004 	strb.w	r3, [sp, #4]
    f0d4:	f8ad 1006 	strh.w	r1, [sp, #6]
    f0d8:	f88d 2008 	strb.w	r2, [sp, #8]
    f0dc:	4b26      	ldr	r3, [pc, #152]	; (f178 <dmConn2HciHandler+0xf8>)
    f0de:	4668      	mov	r0, sp
    f0e0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f0e4:	4798      	blx	r3
    f0e6:	e7d9      	b.n	f09c <dmConn2HciHandler+0x1c>
    f0e8:	7c02      	ldrb	r2, [r0, #16]
    f0ea:	8983      	ldrh	r3, [r0, #12]
    f0ec:	f8ad 2000 	strh.w	r2, [sp]
    f0f0:	223f      	movs	r2, #63	; 0x3f
    f0f2:	f8ad 2002 	strh.w	r2, [sp, #2]
    f0f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    f0fa:	88e3      	ldrh	r3, [r4, #6]
    f0fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    f100:	8923      	ldrh	r3, [r4, #8]
    f102:	f8ad 3008 	strh.w	r3, [sp, #8]
    f106:	8963      	ldrh	r3, [r4, #10]
    f108:	f8ad 300a 	strh.w	r3, [sp, #10]
    f10c:	89a3      	ldrh	r3, [r4, #12]
    f10e:	f8ad 300c 	strh.w	r3, [sp, #12]
    f112:	e7e3      	b.n	f0dc <dmConn2HciHandler+0x5c>
    f114:	7c01      	ldrb	r1, [r0, #16]
    f116:	7923      	ldrb	r3, [r4, #4]
    f118:	88e2      	ldrh	r2, [r4, #6]
    f11a:	f8ad 1000 	strh.w	r1, [sp]
    f11e:	2141      	movs	r1, #65	; 0x41
    f120:	f8ad 1002 	strh.w	r1, [sp, #2]
    f124:	f8ad 2006 	strh.w	r2, [sp, #6]
    f128:	f88d 3004 	strb.w	r3, [sp, #4]
    f12c:	e7d6      	b.n	f0dc <dmConn2HciHandler+0x5c>
    f12e:	7c02      	ldrb	r2, [r0, #16]
    f130:	88a3      	ldrh	r3, [r4, #4]
    f132:	f8ad 2000 	strh.w	r2, [sp]
    f136:	2242      	movs	r2, #66	; 0x42
    f138:	f8ad 2002 	strh.w	r2, [sp, #2]
    f13c:	f8ad 3004 	strh.w	r3, [sp, #4]
    f140:	e7cc      	b.n	f0dc <dmConn2HciHandler+0x5c>
    f142:	7a62      	ldrb	r2, [r4, #9]
    f144:	7a23      	ldrb	r3, [r4, #8]
    f146:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    f14a:	7aa2      	ldrb	r2, [r4, #10]
    f14c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    f150:	6283      	str	r3, [r0, #40]	; 0x28
    f152:	7c03      	ldrb	r3, [r0, #16]
    f154:	f8ad 3000 	strh.w	r3, [sp]
    f158:	2351      	movs	r3, #81	; 0x51
    f15a:	f8ad 3002 	strh.w	r3, [sp, #2]
    f15e:	7923      	ldrb	r3, [r4, #4]
    f160:	f88d 3004 	strb.w	r3, [sp, #4]
    f164:	88e3      	ldrh	r3, [r4, #6]
    f166:	f854 0f08 	ldr.w	r0, [r4, #8]!
    f16a:	f8ad 3006 	strh.w	r3, [sp, #6]
    f16e:	6861      	ldr	r1, [r4, #4]
    f170:	ab02      	add	r3, sp, #8
    f172:	c303      	stmia	r3!, {r0, r1}
    f174:	e7b2      	b.n	f0dc <dmConn2HciHandler+0x5c>
    f176:	bf00      	nop
    f178:	100034dc 	.word	0x100034dc

0000f17c <dmConnCcbByBdAddr>:
    f17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f17e:	4f0a      	ldr	r7, [pc, #40]	; (f1a8 <dmConnCcbByBdAddr+0x2c>)
    f180:	4606      	mov	r6, r0
    f182:	2500      	movs	r5, #0
    f184:	197c      	adds	r4, r7, r5
    f186:	7da3      	ldrb	r3, [r4, #22]
    f188:	b933      	cbnz	r3, f198 <dmConnCcbByBdAddr+0x1c>
    f18a:	352c      	adds	r5, #44	; 0x2c
    f18c:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
    f190:	d1f8      	bne.n	f184 <dmConnCcbByBdAddr+0x8>
    f192:	2400      	movs	r4, #0
    f194:	4620      	mov	r0, r4
    f196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f198:	4631      	mov	r1, r6
    f19a:	4620      	mov	r0, r4
    f19c:	f009 fb32 	bl	18804 <BdaCmp>
    f1a0:	2800      	cmp	r0, #0
    f1a2:	d0f2      	beq.n	f18a <dmConnCcbByBdAddr+0xe>
    f1a4:	e7f6      	b.n	f194 <dmConnCcbByBdAddr+0x18>
    f1a6:	bf00      	nop
    f1a8:	100034dc 	.word	0x100034dc

0000f1ac <dmConnHciHandler>:
    f1ac:	b538      	push	{r3, r4, r5, lr}
    f1ae:	7884      	ldrb	r4, [r0, #2]
    f1b0:	1e63      	subs	r3, r4, #1
    f1b2:	2b01      	cmp	r3, #1
    f1b4:	4605      	mov	r5, r0
    f1b6:	d82d      	bhi.n	f214 <dmConnHciHandler+0x68>
    f1b8:	f100 040a 	add.w	r4, r0, #10
    f1bc:	4620      	mov	r0, r4
    f1be:	f7ff ffdd 	bl	f17c <dmConnCcbByBdAddr>
    f1c2:	b9c8      	cbnz	r0, f1f8 <dmConnHciHandler+0x4c>
    f1c4:	4817      	ldr	r0, [pc, #92]	; (f224 <dmConnHciHandler+0x78>)
    f1c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f1ca:	f500 72b0 	add.w	r2, r0, #352	; 0x160
    f1ce:	7d83      	ldrb	r3, [r0, #22]
    f1d0:	b13b      	cbz	r3, f1e2 <dmConnHciHandler+0x36>
    f1d2:	7d43      	ldrb	r3, [r0, #21]
    f1d4:	2b02      	cmp	r3, #2
    f1d6:	d00f      	beq.n	f1f8 <dmConnHciHandler+0x4c>
    f1d8:	2b04      	cmp	r3, #4
    f1da:	d102      	bne.n	f1e2 <dmConnHciHandler+0x36>
    f1dc:	8983      	ldrh	r3, [r0, #12]
    f1de:	428b      	cmp	r3, r1
    f1e0:	d00a      	beq.n	f1f8 <dmConnHciHandler+0x4c>
    f1e2:	302c      	adds	r0, #44	; 0x2c
    f1e4:	4290      	cmp	r0, r2
    f1e6:	d1f2      	bne.n	f1ce <dmConnHciHandler+0x22>
    f1e8:	7a2b      	ldrb	r3, [r5, #8]
    f1ea:	2b01      	cmp	r3, #1
    f1ec:	d001      	beq.n	f1f2 <dmConnHciHandler+0x46>
    f1ee:	2000      	movs	r0, #0
    f1f0:	e002      	b.n	f1f8 <dmConnHciHandler+0x4c>
    f1f2:	4620      	mov	r0, r4
    f1f4:	f7ff ff0c 	bl	f010 <dmConnCcbAlloc>
    f1f8:	78eb      	ldrb	r3, [r5, #3]
    f1fa:	b94b      	cbnz	r3, f210 <dmConnHciHandler+0x64>
    f1fc:	2338      	movs	r3, #56	; 0x38
    f1fe:	70ab      	strb	r3, [r5, #2]
    f200:	b170      	cbz	r0, f220 <dmConnHciHandler+0x74>
    f202:	7c03      	ldrb	r3, [r0, #16]
    f204:	802b      	strh	r3, [r5, #0]
    f206:	4629      	mov	r1, r5
    f208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f20c:	f000 bb6a 	b.w	f8e4 <dmConnSmExecute>
    f210:	2337      	movs	r3, #55	; 0x37
    f212:	e7f4      	b.n	f1fe <dmConnHciHandler+0x52>
    f214:	8800      	ldrh	r0, [r0, #0]
    f216:	3436      	adds	r4, #54	; 0x36
    f218:	f7ff ff1f 	bl	f05a <dmConnCcbByHandle>
    f21c:	70ac      	strb	r4, [r5, #2]
    f21e:	e7ef      	b.n	f200 <dmConnHciHandler+0x54>
    f220:	bd38      	pop	{r3, r4, r5, pc}
    f222:	bf00      	nop
    f224:	100034dc 	.word	0x100034dc

0000f228 <dmConnCcbById>:
    f228:	3801      	subs	r0, #1
    f22a:	4a05      	ldr	r2, [pc, #20]	; (f240 <dmConnCcbById+0x18>)
    f22c:	b2c3      	uxtb	r3, r0
    f22e:	212c      	movs	r1, #44	; 0x2c
    f230:	fb01 2003 	mla	r0, r1, r3, r2
    f234:	7d80      	ldrb	r0, [r0, #22]
    f236:	b108      	cbz	r0, f23c <dmConnCcbById+0x14>
    f238:	fb03 2001 	mla	r0, r3, r1, r2
    f23c:	4770      	bx	lr
    f23e:	bf00      	nop
    f240:	100034dc 	.word	0x100034dc

0000f244 <dmConnMsgHandler>:
    f244:	b510      	push	{r4, lr}
    f246:	4604      	mov	r4, r0
    f248:	7800      	ldrb	r0, [r0, #0]
    f24a:	f7ff ffed 	bl	f228 <dmConnCcbById>
    f24e:	b120      	cbz	r0, f25a <dmConnMsgHandler+0x16>
    f250:	4621      	mov	r1, r4
    f252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f256:	f000 bb45 	b.w	f8e4 <dmConnSmExecute>
    f25a:	bd10      	pop	{r4, pc}

0000f25c <dmConn2MsgHandler>:
    f25c:	b530      	push	{r4, r5, lr}
    f25e:	4604      	mov	r4, r0
    f260:	b085      	sub	sp, #20
    f262:	7800      	ldrb	r0, [r0, #0]
    f264:	f7ff ffe0 	bl	f228 <dmConnCcbById>
    f268:	b1d0      	cbz	r0, f2a0 <dmConn2MsgHandler+0x44>
    f26a:	78a3      	ldrb	r3, [r4, #2]
    f26c:	3b41      	subs	r3, #65	; 0x41
    f26e:	2b04      	cmp	r3, #4
    f270:	d816      	bhi.n	f2a0 <dmConn2MsgHandler+0x44>
    f272:	e8df f003 	tbb	[pc, r3]
    f276:	0903      	.short	0x0903
    f278:	1e17      	.short	0x1e17
    f27a:	26          	.byte	0x26
    f27b:	00          	.byte	0x00
    f27c:	8980      	ldrh	r0, [r0, #12]
    f27e:	b005      	add	sp, #20
    f280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f284:	f005 ba28 	b.w	146d8 <HciReadRssiCmd>
    f288:	89e5      	ldrh	r5, [r4, #14]
    f28a:	8923      	ldrh	r3, [r4, #8]
    f28c:	88e2      	ldrh	r2, [r4, #6]
    f28e:	88a1      	ldrh	r1, [r4, #4]
    f290:	8980      	ldrh	r0, [r0, #12]
    f292:	9502      	str	r5, [sp, #8]
    f294:	89a5      	ldrh	r5, [r4, #12]
    f296:	9501      	str	r5, [sp, #4]
    f298:	8964      	ldrh	r4, [r4, #10]
    f29a:	9400      	str	r4, [sp, #0]
    f29c:	f004 fdf7 	bl	13e8e <HciLeRemoteConnParamReqReply>
    f2a0:	b005      	add	sp, #20
    f2a2:	bd30      	pop	{r4, r5, pc}
    f2a4:	7921      	ldrb	r1, [r4, #4]
    f2a6:	8980      	ldrh	r0, [r0, #12]
    f2a8:	b005      	add	sp, #20
    f2aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f2ae:	f004 be72 	b.w	13f96 <HciLeRemoteConnParamReqNegReply>
    f2b2:	88e2      	ldrh	r2, [r4, #6]
    f2b4:	88a1      	ldrh	r1, [r4, #4]
    f2b6:	8980      	ldrh	r0, [r0, #12]
    f2b8:	b005      	add	sp, #20
    f2ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f2be:	f004 be98 	b.w	13ff2 <HciLeSetDataLen>
    f2c2:	88a1      	ldrh	r1, [r4, #4]
    f2c4:	8980      	ldrh	r0, [r0, #12]
    f2c6:	b005      	add	sp, #20
    f2c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f2cc:	f005 ba94 	b.w	147f8 <HciWriteAuthPayloadTimeout>

0000f2d0 <dmConnExecCback>:
    f2d0:	b570      	push	{r4, r5, r6, lr}
    f2d2:	4e06      	ldr	r6, [pc, #24]	; (f2ec <dmConnExecCback+0x1c>)
    f2d4:	4605      	mov	r5, r0
    f2d6:	2400      	movs	r4, #0
    f2d8:	1933      	adds	r3, r6, r4
    f2da:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    f2de:	b10b      	cbz	r3, f2e4 <dmConnExecCback+0x14>
    f2e0:	4628      	mov	r0, r5
    f2e2:	4798      	blx	r3
    f2e4:	3404      	adds	r4, #4
    f2e6:	2c14      	cmp	r4, #20
    f2e8:	d1f6      	bne.n	f2d8 <dmConnExecCback+0x8>
    f2ea:	bd70      	pop	{r4, r5, r6, pc}
    f2ec:	100034dc 	.word	0x100034dc

0000f2f0 <dmConnSmActConnOpened>:
    f2f0:	b570      	push	{r4, r5, r6, lr}
    f2f2:	460d      	mov	r5, r1
    f2f4:	4604      	mov	r4, r0
    f2f6:	310a      	adds	r1, #10
    f2f8:	f009 fa76 	bl	187e8 <BdaCpy>
    f2fc:	88eb      	ldrh	r3, [r5, #6]
    f2fe:	81a3      	strh	r3, [r4, #12]
    f300:	7a68      	ldrb	r0, [r5, #9]
    f302:	f000 fc07 	bl	fb14 <DmHostAddrType>
    f306:	74e0      	strb	r0, [r4, #19]
    f308:	7a2a      	ldrb	r2, [r5, #8]
    f30a:	7662      	strb	r2, [r4, #25]
    f30c:	4b12      	ldr	r3, [pc, #72]	; (f358 <dmConnSmActConnOpened+0x68>)
    f30e:	b9fa      	cbnz	r2, f350 <dmConnSmActConnOpened+0x60>
    f310:	7b5b      	ldrb	r3, [r3, #13]
    f312:	7523      	strb	r3, [r4, #20]
    f314:	7d23      	ldrb	r3, [r4, #20]
    f316:	1da6      	adds	r6, r4, #6
    f318:	b9e3      	cbnz	r3, f354 <dmConnSmActConnOpened+0x64>
    f31a:	f006 f8bf 	bl	1549c <HciGetBdAddr>
    f31e:	4601      	mov	r1, r0
    f320:	4630      	mov	r0, r6
    f322:	f009 fa61 	bl	187e8 <BdaCpy>
    f326:	f105 0117 	add.w	r1, r5, #23
    f32a:	f104 001a 	add.w	r0, r4, #26
    f32e:	f009 fa5b 	bl	187e8 <BdaCpy>
    f332:	f104 0020 	add.w	r0, r4, #32
    f336:	f105 011d 	add.w	r1, r5, #29
    f33a:	f009 fa55 	bl	187e8 <BdaCpy>
    f33e:	2300      	movs	r3, #0
    f340:	81e3      	strh	r3, [r4, #14]
    f342:	2327      	movs	r3, #39	; 0x27
    f344:	70ab      	strb	r3, [r5, #2]
    f346:	4628      	mov	r0, r5
    f348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f34c:	f7ff bfc0 	b.w	f2d0 <dmConnExecCback>
    f350:	7b9b      	ldrb	r3, [r3, #14]
    f352:	e7de      	b.n	f312 <dmConnSmActConnOpened+0x22>
    f354:	4900      	ldr	r1, [pc, #0]	; (f358 <dmConnSmActConnOpened+0x68>)
    f356:	e7e3      	b.n	f320 <dmConnSmActConnOpened+0x30>
    f358:	1000366c 	.word	0x1000366c

0000f35c <dmConnSmActConnFailed>:
    f35c:	2300      	movs	r3, #0
    f35e:	7583      	strb	r3, [r0, #22]
    f360:	2328      	movs	r3, #40	; 0x28
    f362:	708b      	strb	r3, [r1, #2]
    f364:	4608      	mov	r0, r1
    f366:	f7ff bfb3 	b.w	f2d0 <dmConnExecCback>

0000f36a <dmConnSmActConnClosed>:
    f36a:	2300      	movs	r3, #0
    f36c:	7583      	strb	r3, [r0, #22]
    f36e:	2328      	movs	r3, #40	; 0x28
    f370:	708b      	strb	r3, [r1, #2]
    f372:	4608      	mov	r0, r1
    f374:	f7ff bfac 	b.w	f2d0 <dmConnExecCback>

0000f378 <dmConnOpenAccept>:
    f378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f37c:	4607      	mov	r7, r0
    f37e:	468a      	mov	sl, r1
    f380:	4691      	mov	r9, r2
    f382:	4698      	mov	r8, r3
    f384:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    f388:	f00b f82e 	bl	1a3e8 <WsfTaskLock>
    f38c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f38e:	f7ff fef5 	bl	f17c <dmConnCcbByBdAddr>
    f392:	4605      	mov	r5, r0
    f394:	b918      	cbnz	r0, f39e <dmConnOpenAccept+0x26>
    f396:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f398:	f7ff fe3a 	bl	f010 <dmConnCcbAlloc>
    f39c:	4605      	mov	r5, r0
    f39e:	f00b f829 	bl	1a3f4 <WsfTaskUnlock>
    f3a2:	b39d      	cbz	r5, f40c <dmConnOpenAccept+0x94>
    f3a4:	2014      	movs	r0, #20
    f3a6:	f008 fb5c 	bl	17a62 <WsfMsgAlloc>
    f3aa:	4604      	mov	r4, r0
    f3ac:	b338      	cbz	r0, f3fe <dmConnOpenAccept+0x86>
    f3ae:	7c2b      	ldrb	r3, [r5, #16]
    f3b0:	8003      	strh	r3, [r0, #0]
    f3b2:	2e00      	cmp	r6, #0
    f3b4:	bf0c      	ite	eq
    f3b6:	2330      	moveq	r3, #48	; 0x30
    f3b8:	2332      	movne	r3, #50	; 0x32
    f3ba:	7083      	strb	r3, [r0, #2]
    f3bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    f3c0:	8103      	strh	r3, [r0, #8]
    f3c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f3c6:	7283      	strb	r3, [r0, #10]
    f3c8:	f880 a004 	strb.w	sl, [r0, #4]
    f3cc:	f880 9005 	strb.w	r9, [r0, #5]
    f3d0:	f880 8006 	strb.w	r8, [r0, #6]
    f3d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f3d6:	300b      	adds	r0, #11
    f3d8:	f009 fa06 	bl	187e8 <BdaCpy>
    f3dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f3e0:	7463      	strb	r3, [r4, #17]
    f3e2:	4b0b      	ldr	r3, [pc, #44]	; (f410 <dmConnOpenAccept+0x98>)
    f3e4:	74a7      	strb	r7, [r4, #18]
    f3e6:	7b18      	ldrb	r0, [r3, #12]
    f3e8:	4621      	mov	r1, r4
    f3ea:	f008 fb5e 	bl	17aaa <WsfMsgSend>
    f3ee:	f00a fffb 	bl	1a3e8 <WsfTaskLock>
    f3f2:	766e      	strb	r6, [r5, #25]
    f3f4:	f00a fffe 	bl	1a3f4 <WsfTaskUnlock>
    f3f8:	7c28      	ldrb	r0, [r5, #16]
    f3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f3fe:	f00a fff3 	bl	1a3e8 <WsfTaskLock>
    f402:	75ac      	strb	r4, [r5, #22]
    f404:	f00a fff6 	bl	1a3f4 <WsfTaskUnlock>
    f408:	4620      	mov	r0, r4
    f40a:	e7f6      	b.n	f3fa <dmConnOpenAccept+0x82>
    f40c:	4628      	mov	r0, r5
    f40e:	e7f4      	b.n	f3fa <dmConnOpenAccept+0x82>
    f410:	1000366c 	.word	0x1000366c

0000f414 <DmConnInit>:
    f414:	4b05      	ldr	r3, [pc, #20]	; (f42c <DmConnInit+0x18>)
    f416:	4a06      	ldr	r2, [pc, #24]	; (f430 <DmConnInit+0x1c>)
    f418:	f103 010c 	add.w	r1, r3, #12
    f41c:	60d1      	str	r1, [r2, #12]
    f41e:	f103 0118 	add.w	r1, r3, #24
    f422:	6111      	str	r1, [r2, #16]
    f424:	4a03      	ldr	r2, [pc, #12]	; (f434 <DmConnInit+0x20>)
    f426:	3324      	adds	r3, #36	; 0x24
    f428:	6013      	str	r3, [r2, #0]
    f42a:	4770      	bx	lr
    f42c:	00021f18 	.word	0x00021f18
    f430:	10002354 	.word	0x10002354
    f434:	10003660 	.word	0x10003660

0000f438 <DmConnRegister>:
    f438:	b538      	push	{r3, r4, r5, lr}
    f43a:	4604      	mov	r4, r0
    f43c:	460d      	mov	r5, r1
    f43e:	3458      	adds	r4, #88	; 0x58
    f440:	f00a ffd2 	bl	1a3e8 <WsfTaskLock>
    f444:	4b03      	ldr	r3, [pc, #12]	; (f454 <DmConnRegister+0x1c>)
    f446:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
    f44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f44e:	f00a bfd1 	b.w	1a3f4 <WsfTaskUnlock>
    f452:	bf00      	nop
    f454:	100034dc 	.word	0x100034dc

0000f458 <DmConnClose>:
    f458:	b570      	push	{r4, r5, r6, lr}
    f45a:	4604      	mov	r4, r0
    f45c:	2006      	movs	r0, #6
    f45e:	460e      	mov	r6, r1
    f460:	4615      	mov	r5, r2
    f462:	f008 fafe 	bl	17a62 <WsfMsgAlloc>
    f466:	b158      	cbz	r0, f480 <DmConnClose+0x28>
    f468:	2331      	movs	r3, #49	; 0x31
    f46a:	7083      	strb	r3, [r0, #2]
    f46c:	4b05      	ldr	r3, [pc, #20]	; (f484 <DmConnClose+0x2c>)
    f46e:	8006      	strh	r6, [r0, #0]
    f470:	7105      	strb	r5, [r0, #4]
    f472:	7144      	strb	r4, [r0, #5]
    f474:	4601      	mov	r1, r0
    f476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f47a:	7b18      	ldrb	r0, [r3, #12]
    f47c:	f008 bb15 	b.w	17aaa <WsfMsgSend>
    f480:	bd70      	pop	{r4, r5, r6, pc}
    f482:	bf00      	nop
    f484:	1000366c 	.word	0x1000366c

0000f488 <DmReadRemoteFeatures>:
    f488:	b508      	push	{r3, lr}
    f48a:	f7ff fecd 	bl	f228 <dmConnCcbById>
    f48e:	b120      	cbz	r0, f49a <DmReadRemoteFeatures+0x12>
    f490:	8980      	ldrh	r0, [r0, #12]
    f492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f496:	f004 bf23 	b.w	142e0 <HciLeReadRemoteFeatCmd>
    f49a:	bd08      	pop	{r3, pc}

0000f49c <DmConnUpdate>:
    f49c:	b538      	push	{r3, r4, r5, lr}
    f49e:	4605      	mov	r5, r0
    f4a0:	2010      	movs	r0, #16
    f4a2:	460c      	mov	r4, r1
    f4a4:	f008 fadd 	bl	17a62 <WsfMsgAlloc>
    f4a8:	b1d0      	cbz	r0, f4e0 <DmConnUpdate+0x44>
    f4aa:	4a0e      	ldr	r2, [pc, #56]	; (f4e4 <DmConnUpdate+0x48>)
    f4ac:	1e6b      	subs	r3, r5, #1
    f4ae:	212c      	movs	r1, #44	; 0x2c
    f4b0:	fb01 2303 	mla	r3, r1, r3, r2
    f4b4:	4602      	mov	r2, r0
    f4b6:	7e5b      	ldrb	r3, [r3, #25]
    f4b8:	2b00      	cmp	r3, #0
    f4ba:	bf0c      	ite	eq
    f4bc:	2333      	moveq	r3, #51	; 0x33
    f4be:	2334      	movne	r3, #52	; 0x34
    f4c0:	7083      	strb	r3, [r0, #2]
    f4c2:	f822 5b04 	strh.w	r5, [r2], #4
    f4c6:	6823      	ldr	r3, [r4, #0]
    f4c8:	6043      	str	r3, [r0, #4]
    f4ca:	6863      	ldr	r3, [r4, #4]
    f4cc:	6053      	str	r3, [r2, #4]
    f4ce:	68a3      	ldr	r3, [r4, #8]
    f4d0:	6093      	str	r3, [r2, #8]
    f4d2:	4b05      	ldr	r3, [pc, #20]	; (f4e8 <DmConnUpdate+0x4c>)
    f4d4:	4601      	mov	r1, r0
    f4d6:	7b18      	ldrb	r0, [r3, #12]
    f4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f4dc:	f008 bae5 	b.w	17aaa <WsfMsgSend>
    f4e0:	bd38      	pop	{r3, r4, r5, pc}
    f4e2:	bf00      	nop
    f4e4:	100034dc 	.word	0x100034dc
    f4e8:	1000366c 	.word	0x1000366c

0000f4ec <DmConnSetScanInterval>:
    f4ec:	b538      	push	{r3, r4, r5, lr}
    f4ee:	4605      	mov	r5, r0
    f4f0:	460c      	mov	r4, r1
    f4f2:	f00a ff79 	bl	1a3e8 <WsfTaskLock>
    f4f6:	2001      	movs	r0, #1
    f4f8:	f000 fb3c 	bl	fb74 <DmInitPhyToIdx>
    f4fc:	4b05      	ldr	r3, [pc, #20]	; (f514 <DmConnSetScanInterval+0x28>)
    f4fe:	30c0      	adds	r0, #192	; 0xc0
    f500:	f823 5010 	strh.w	r5, [r3, r0, lsl #1]
    f504:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f508:	805c      	strh	r4, [r3, #2]
    f50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f50e:	f00a bf71 	b.w	1a3f4 <WsfTaskUnlock>
    f512:	bf00      	nop
    f514:	100034dc 	.word	0x100034dc

0000f518 <DmExtConnSetScanInterval>:
    f518:	b570      	push	{r4, r5, r6, lr}
    f51a:	2400      	movs	r4, #0
    f51c:	fa40 f304 	asr.w	r3, r0, r4
    f520:	07db      	lsls	r3, r3, #31
    f522:	d515      	bpl.n	f550 <DmExtConnSetScanInterval+0x38>
    f524:	880e      	ldrh	r6, [r1, #0]
    f526:	8815      	ldrh	r5, [r2, #0]
    f528:	f00a ff5e 	bl	1a3e8 <WsfTaskLock>
    f52c:	2001      	movs	r0, #1
    f52e:	40a0      	lsls	r0, r4
    f530:	b2c0      	uxtb	r0, r0
    f532:	f000 fb1f 	bl	fb74 <DmInitPhyToIdx>
    f536:	4b08      	ldr	r3, [pc, #32]	; (f558 <DmExtConnSetScanInterval+0x40>)
    f538:	30c0      	adds	r0, #192	; 0xc0
    f53a:	f823 6010 	strh.w	r6, [r3, r0, lsl #1]
    f53e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f542:	805d      	strh	r5, [r3, #2]
    f544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f548:	f00a bf54 	b.w	1a3f4 <WsfTaskUnlock>
    f54c:	3401      	adds	r4, #1
    f54e:	e7e5      	b.n	f51c <DmExtConnSetScanInterval+0x4>
    f550:	2c07      	cmp	r4, #7
    f552:	d1fb      	bne.n	f54c <DmExtConnSetScanInterval+0x34>
    f554:	bd70      	pop	{r4, r5, r6, pc}
    f556:	bf00      	nop
    f558:	100034dc 	.word	0x100034dc

0000f55c <DmConnSetConnSpec>:
    f55c:	4601      	mov	r1, r0
    f55e:	2001      	movs	r0, #1
    f560:	e53c      	b.n	efdc <dmConnSetConnSpec>

0000f562 <DmExtConnSetConnSpec>:
    f562:	2300      	movs	r3, #0
    f564:	fa40 f203 	asr.w	r2, r0, r3
    f568:	07d2      	lsls	r2, r2, #31
    f56a:	d505      	bpl.n	f578 <DmExtConnSetConnSpec+0x16>
    f56c:	2001      	movs	r0, #1
    f56e:	4098      	lsls	r0, r3
    f570:	b2c0      	uxtb	r0, r0
    f572:	e533      	b.n	efdc <dmConnSetConnSpec>
    f574:	3301      	adds	r3, #1
    f576:	e7f5      	b.n	f564 <DmExtConnSetConnSpec+0x2>
    f578:	2b07      	cmp	r3, #7
    f57a:	d1fb      	bne.n	f574 <DmExtConnSetConnSpec+0x12>
    f57c:	4770      	bx	lr

0000f57e <DmConnReadRssi>:
    f57e:	b510      	push	{r4, lr}
    f580:	4604      	mov	r4, r0
    f582:	2004      	movs	r0, #4
    f584:	f008 fa6d 	bl	17a62 <WsfMsgAlloc>
    f588:	4601      	mov	r1, r0
    f58a:	b140      	cbz	r0, f59e <DmConnReadRssi+0x20>
    f58c:	2341      	movs	r3, #65	; 0x41
    f58e:	7083      	strb	r3, [r0, #2]
    f590:	4b03      	ldr	r3, [pc, #12]	; (f5a0 <DmConnReadRssi+0x22>)
    f592:	8004      	strh	r4, [r0, #0]
    f594:	7b18      	ldrb	r0, [r3, #12]
    f596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f59a:	f008 ba86 	b.w	17aaa <WsfMsgSend>
    f59e:	bd10      	pop	{r4, pc}
    f5a0:	1000366c 	.word	0x1000366c

0000f5a4 <DmRemoteConnParamReqReply>:
    f5a4:	b538      	push	{r3, r4, r5, lr}
    f5a6:	4605      	mov	r5, r0
    f5a8:	2010      	movs	r0, #16
    f5aa:	460c      	mov	r4, r1
    f5ac:	f008 fa59 	bl	17a62 <WsfMsgAlloc>
    f5b0:	b188      	cbz	r0, f5d6 <DmRemoteConnParamReqReply+0x32>
    f5b2:	4602      	mov	r2, r0
    f5b4:	2342      	movs	r3, #66	; 0x42
    f5b6:	7083      	strb	r3, [r0, #2]
    f5b8:	f822 5b04 	strh.w	r5, [r2], #4
    f5bc:	6823      	ldr	r3, [r4, #0]
    f5be:	6043      	str	r3, [r0, #4]
    f5c0:	6863      	ldr	r3, [r4, #4]
    f5c2:	6053      	str	r3, [r2, #4]
    f5c4:	68a3      	ldr	r3, [r4, #8]
    f5c6:	6093      	str	r3, [r2, #8]
    f5c8:	4b03      	ldr	r3, [pc, #12]	; (f5d8 <DmRemoteConnParamReqReply+0x34>)
    f5ca:	4601      	mov	r1, r0
    f5cc:	7b18      	ldrb	r0, [r3, #12]
    f5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f5d2:	f008 ba6a 	b.w	17aaa <WsfMsgSend>
    f5d6:	bd38      	pop	{r3, r4, r5, pc}
    f5d8:	1000366c 	.word	0x1000366c

0000f5dc <DmRemoteConnParamReqNegReply>:
    f5dc:	b538      	push	{r3, r4, r5, lr}
    f5de:	4605      	mov	r5, r0
    f5e0:	2006      	movs	r0, #6
    f5e2:	460c      	mov	r4, r1
    f5e4:	f008 fa3d 	bl	17a62 <WsfMsgAlloc>
    f5e8:	b150      	cbz	r0, f600 <DmRemoteConnParamReqNegReply+0x24>
    f5ea:	2343      	movs	r3, #67	; 0x43
    f5ec:	7083      	strb	r3, [r0, #2]
    f5ee:	4b05      	ldr	r3, [pc, #20]	; (f604 <DmRemoteConnParamReqNegReply+0x28>)
    f5f0:	8005      	strh	r5, [r0, #0]
    f5f2:	7104      	strb	r4, [r0, #4]
    f5f4:	4601      	mov	r1, r0
    f5f6:	7b18      	ldrb	r0, [r3, #12]
    f5f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f5fc:	f008 ba55 	b.w	17aaa <WsfMsgSend>
    f600:	bd38      	pop	{r3, r4, r5, pc}
    f602:	bf00      	nop
    f604:	1000366c 	.word	0x1000366c

0000f608 <DmConnSetDataLen>:
    f608:	b570      	push	{r4, r5, r6, lr}
    f60a:	4606      	mov	r6, r0
    f60c:	2008      	movs	r0, #8
    f60e:	460d      	mov	r5, r1
    f610:	4614      	mov	r4, r2
    f612:	f008 fa26 	bl	17a62 <WsfMsgAlloc>
    f616:	b158      	cbz	r0, f630 <DmConnSetDataLen+0x28>
    f618:	2344      	movs	r3, #68	; 0x44
    f61a:	7083      	strb	r3, [r0, #2]
    f61c:	4b05      	ldr	r3, [pc, #20]	; (f634 <DmConnSetDataLen+0x2c>)
    f61e:	8006      	strh	r6, [r0, #0]
    f620:	8085      	strh	r5, [r0, #4]
    f622:	80c4      	strh	r4, [r0, #6]
    f624:	4601      	mov	r1, r0
    f626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f62a:	7b18      	ldrb	r0, [r3, #12]
    f62c:	f008 ba3d 	b.w	17aaa <WsfMsgSend>
    f630:	bd70      	pop	{r4, r5, r6, pc}
    f632:	bf00      	nop
    f634:	1000366c 	.word	0x1000366c

0000f638 <DmWriteAuthPayloadTimeout>:
    f638:	b538      	push	{r3, r4, r5, lr}
    f63a:	4605      	mov	r5, r0
    f63c:	2006      	movs	r0, #6
    f63e:	460c      	mov	r4, r1
    f640:	f008 fa0f 	bl	17a62 <WsfMsgAlloc>
    f644:	b150      	cbz	r0, f65c <DmWriteAuthPayloadTimeout+0x24>
    f646:	2345      	movs	r3, #69	; 0x45
    f648:	7083      	strb	r3, [r0, #2]
    f64a:	4b05      	ldr	r3, [pc, #20]	; (f660 <DmWriteAuthPayloadTimeout+0x28>)
    f64c:	8005      	strh	r5, [r0, #0]
    f64e:	8084      	strh	r4, [r0, #4]
    f650:	4601      	mov	r1, r0
    f652:	7b18      	ldrb	r0, [r3, #12]
    f654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f658:	f008 ba27 	b.w	17aaa <WsfMsgSend>
    f65c:	bd38      	pop	{r3, r4, r5, pc}
    f65e:	bf00      	nop
    f660:	1000366c 	.word	0x1000366c

0000f664 <DmConnIdByHandle>:
    f664:	b510      	push	{r4, lr}
    f666:	4908      	ldr	r1, [pc, #32]	; (f688 <DmConnIdByHandle+0x24>)
    f668:	2300      	movs	r3, #0
    f66a:	18ca      	adds	r2, r1, r3
    f66c:	7d94      	ldrb	r4, [r2, #22]
    f66e:	b124      	cbz	r4, f67a <DmConnIdByHandle+0x16>
    f670:	8994      	ldrh	r4, [r2, #12]
    f672:	4284      	cmp	r4, r0
    f674:	d101      	bne.n	f67a <DmConnIdByHandle+0x16>
    f676:	7c10      	ldrb	r0, [r2, #16]
    f678:	bd10      	pop	{r4, pc}
    f67a:	332c      	adds	r3, #44	; 0x2c
    f67c:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    f680:	d1f3      	bne.n	f66a <DmConnIdByHandle+0x6>
    f682:	2000      	movs	r0, #0
    f684:	e7f8      	b.n	f678 <DmConnIdByHandle+0x14>
    f686:	bf00      	nop
    f688:	100034dc 	.word	0x100034dc

0000f68c <DmConnInUse>:
    f68c:	4b03      	ldr	r3, [pc, #12]	; (f69c <DmConnInUse+0x10>)
    f68e:	222c      	movs	r2, #44	; 0x2c
    f690:	3801      	subs	r0, #1
    f692:	fb02 3000 	mla	r0, r2, r0, r3
    f696:	7d80      	ldrb	r0, [r0, #22]
    f698:	4770      	bx	lr
    f69a:	bf00      	nop
    f69c:	100034dc 	.word	0x100034dc

0000f6a0 <DmConnPeerAddrType>:
    f6a0:	4b03      	ldr	r3, [pc, #12]	; (f6b0 <DmConnPeerAddrType+0x10>)
    f6a2:	222c      	movs	r2, #44	; 0x2c
    f6a4:	3801      	subs	r0, #1
    f6a6:	fb02 3000 	mla	r0, r2, r0, r3
    f6aa:	7cc0      	ldrb	r0, [r0, #19]
    f6ac:	4770      	bx	lr
    f6ae:	bf00      	nop
    f6b0:	100034dc 	.word	0x100034dc

0000f6b4 <DmConnPeerAddr>:
    f6b4:	4b02      	ldr	r3, [pc, #8]	; (f6c0 <DmConnPeerAddr+0xc>)
    f6b6:	222c      	movs	r2, #44	; 0x2c
    f6b8:	3801      	subs	r0, #1
    f6ba:	fb02 3000 	mla	r0, r2, r0, r3
    f6be:	4770      	bx	lr
    f6c0:	100034dc 	.word	0x100034dc

0000f6c4 <DmConnLocalAddrType>:
    f6c4:	4b03      	ldr	r3, [pc, #12]	; (f6d4 <DmConnLocalAddrType+0x10>)
    f6c6:	222c      	movs	r2, #44	; 0x2c
    f6c8:	3801      	subs	r0, #1
    f6ca:	fb02 3000 	mla	r0, r2, r0, r3
    f6ce:	7d00      	ldrb	r0, [r0, #20]
    f6d0:	4770      	bx	lr
    f6d2:	bf00      	nop
    f6d4:	100034dc 	.word	0x100034dc

0000f6d8 <DmConnLocalAddr>:
    f6d8:	4b03      	ldr	r3, [pc, #12]	; (f6e8 <DmConnLocalAddr+0x10>)
    f6da:	222c      	movs	r2, #44	; 0x2c
    f6dc:	3801      	subs	r0, #1
    f6de:	fb02 3000 	mla	r0, r2, r0, r3
    f6e2:	3006      	adds	r0, #6
    f6e4:	4770      	bx	lr
    f6e6:	bf00      	nop
    f6e8:	100034dc 	.word	0x100034dc

0000f6ec <DmConnPeerRpa>:
    f6ec:	4b03      	ldr	r3, [pc, #12]	; (f6fc <DmConnPeerRpa+0x10>)
    f6ee:	222c      	movs	r2, #44	; 0x2c
    f6f0:	3801      	subs	r0, #1
    f6f2:	fb02 3000 	mla	r0, r2, r0, r3
    f6f6:	3020      	adds	r0, #32
    f6f8:	4770      	bx	lr
    f6fa:	bf00      	nop
    f6fc:	100034dc 	.word	0x100034dc

0000f700 <DmConnLocalRpa>:
    f700:	4b03      	ldr	r3, [pc, #12]	; (f710 <DmConnLocalRpa+0x10>)
    f702:	222c      	movs	r2, #44	; 0x2c
    f704:	3801      	subs	r0, #1
    f706:	fb02 3000 	mla	r0, r2, r0, r3
    f70a:	301a      	adds	r0, #26
    f70c:	4770      	bx	lr
    f70e:	bf00      	nop
    f710:	100034dc 	.word	0x100034dc

0000f714 <DmConnSecLevel>:
    f714:	4b03      	ldr	r3, [pc, #12]	; (f724 <DmConnSecLevel+0x10>)
    f716:	222c      	movs	r2, #44	; 0x2c
    f718:	3801      	subs	r0, #1
    f71a:	fb02 3000 	mla	r0, r2, r0, r3
    f71e:	7dc0      	ldrb	r0, [r0, #23]
    f720:	4770      	bx	lr
    f722:	bf00      	nop
    f724:	100034dc 	.word	0x100034dc

0000f728 <DmConnSetIdle>:
    f728:	b570      	push	{r4, r5, r6, lr}
    f72a:	4604      	mov	r4, r0
    f72c:	4616      	mov	r6, r2
    f72e:	460d      	mov	r5, r1
    f730:	f00a fe5a 	bl	1a3e8 <WsfTaskLock>
    f734:	4b08      	ldr	r3, [pc, #32]	; (f758 <DmConnSetIdle+0x30>)
    f736:	1e60      	subs	r0, r4, #1
    f738:	222c      	movs	r2, #44	; 0x2c
    f73a:	fb02 3000 	mla	r0, r2, r0, r3
    f73e:	7d83      	ldrb	r3, [r0, #22]
    f740:	b123      	cbz	r3, f74c <DmConnSetIdle+0x24>
    f742:	89c1      	ldrh	r1, [r0, #14]
    f744:	b936      	cbnz	r6, f754 <DmConnSetIdle+0x2c>
    f746:	ea21 0505 	bic.w	r5, r1, r5
    f74a:	81c5      	strh	r5, [r0, #14]
    f74c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f750:	f00a be50 	b.w	1a3f4 <WsfTaskUnlock>
    f754:	430d      	orrs	r5, r1
    f756:	e7f8      	b.n	f74a <DmConnSetIdle+0x22>
    f758:	100034dc 	.word	0x100034dc

0000f75c <DmConnCheckIdle>:
    f75c:	b510      	push	{r4, lr}
    f75e:	4604      	mov	r4, r0
    f760:	f00a fe42 	bl	1a3e8 <WsfTaskLock>
    f764:	4804      	ldr	r0, [pc, #16]	; (f778 <DmConnCheckIdle+0x1c>)
    f766:	232c      	movs	r3, #44	; 0x2c
    f768:	3c01      	subs	r4, #1
    f76a:	fb03 0404 	mla	r4, r3, r4, r0
    f76e:	89e4      	ldrh	r4, [r4, #14]
    f770:	f00a fe40 	bl	1a3f4 <WsfTaskUnlock>
    f774:	4620      	mov	r0, r4
    f776:	bd10      	pop	{r4, pc}
    f778:	100034dc 	.word	0x100034dc

0000f77c <DmConnRole>:
    f77c:	4b03      	ldr	r3, [pc, #12]	; (f78c <DmConnRole+0x10>)
    f77e:	222c      	movs	r2, #44	; 0x2c
    f780:	3801      	subs	r0, #1
    f782:	fb02 3000 	mla	r0, r2, r0, r3
    f786:	7e40      	ldrb	r0, [r0, #25]
    f788:	4770      	bx	lr
    f78a:	bf00      	nop
    f78c:	100034dc 	.word	0x100034dc

0000f790 <dmConnSmActUpdateSlave>:
    f790:	b530      	push	{r4, r5, lr}
    f792:	6a83      	ldr	r3, [r0, #40]	; 0x28
    f794:	079a      	lsls	r2, r3, #30
    f796:	b085      	sub	sp, #20
    f798:	4604      	mov	r4, r0
    f79a:	460d      	mov	r5, r1
    f79c:	d509      	bpl.n	f7b2 <dmConnSmActUpdateSlave+0x22>
    f79e:	f005 fe93 	bl	154c8 <HciGetLeSupFeat>
    f7a2:	0783      	lsls	r3, r0, #30
    f7a4:	d505      	bpl.n	f7b2 <dmConnSmActUpdateSlave+0x22>
    f7a6:	1d29      	adds	r1, r5, #4
    f7a8:	89a0      	ldrh	r0, [r4, #12]
    f7aa:	f004 fae9 	bl	13d80 <HciLeConnUpdateCmd>
    f7ae:	b005      	add	sp, #20
    f7b0:	bd30      	pop	{r4, r5, pc}
    f7b2:	7c63      	ldrb	r3, [r4, #17]
    f7b4:	89a0      	ldrh	r0, [r4, #12]
    f7b6:	b92b      	cbnz	r3, f7c4 <dmConnSmActUpdateSlave+0x34>
    f7b8:	2301      	movs	r3, #1
    f7ba:	7463      	strb	r3, [r4, #17]
    f7bc:	1d29      	adds	r1, r5, #4
    f7be:	f000 ff09 	bl	105d4 <L2cDmConnUpdateReq>
    f7c2:	e7f4      	b.n	f7ae <dmConnSmActUpdateSlave+0x1e>
    f7c4:	7c23      	ldrb	r3, [r4, #16]
    f7c6:	f8ad 3000 	strh.w	r3, [sp]
    f7ca:	f640 4329 	movw	r3, #3113	; 0xc29
    f7ce:	f8ad 3002 	strh.w	r3, [sp, #2]
    f7d2:	230c      	movs	r3, #12
    f7d4:	f88d 3004 	strb.w	r3, [sp, #4]
    f7d8:	4b03      	ldr	r3, [pc, #12]	; (f7e8 <dmConnSmActUpdateSlave+0x58>)
    f7da:	f8ad 0006 	strh.w	r0, [sp, #6]
    f7de:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f7e2:	4668      	mov	r0, sp
    f7e4:	4798      	blx	r3
    f7e6:	e7e2      	b.n	f7ae <dmConnSmActUpdateSlave+0x1e>
    f7e8:	100034dc 	.word	0x100034dc

0000f7ec <dmConnSmActL2cUpdateCnf>:
    f7ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f7ee:	7c43      	ldrb	r3, [r0, #17]
    f7f0:	b1b3      	cbz	r3, f820 <dmConnSmActL2cUpdateCnf+0x34>
    f7f2:	2300      	movs	r3, #0
    f7f4:	7443      	strb	r3, [r0, #17]
    f7f6:	888b      	ldrh	r3, [r1, #4]
    f7f8:	b193      	cbz	r3, f820 <dmConnSmActL2cUpdateCnf+0x34>
    f7fa:	b2db      	uxtb	r3, r3
    f7fc:	f88d 3003 	strb.w	r3, [sp, #3]
    f800:	f88d 3004 	strb.w	r3, [sp, #4]
    f804:	4b08      	ldr	r3, [pc, #32]	; (f828 <dmConnSmActL2cUpdateCnf+0x3c>)
    f806:	8982      	ldrh	r2, [r0, #12]
    f808:	7c01      	ldrb	r1, [r0, #16]
    f80a:	f8ad 1000 	strh.w	r1, [sp]
    f80e:	2029      	movs	r0, #41	; 0x29
    f810:	f88d 0002 	strb.w	r0, [sp, #2]
    f814:	f8ad 2006 	strh.w	r2, [sp, #6]
    f818:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    f81c:	4668      	mov	r0, sp
    f81e:	4798      	blx	r3
    f820:	b005      	add	sp, #20
    f822:	f85d fb04 	ldr.w	pc, [sp], #4
    f826:	bf00      	nop
    f828:	100034dc 	.word	0x100034dc

0000f82c <DmL2cConnUpdateCnf>:
    f82c:	b513      	push	{r0, r1, r4, lr}
    f82e:	460c      	mov	r4, r1
    f830:	f7ff fc13 	bl	f05a <dmConnCcbByHandle>
    f834:	b138      	cbz	r0, f846 <DmL2cConnUpdateCnf+0x1a>
    f836:	2336      	movs	r3, #54	; 0x36
    f838:	4669      	mov	r1, sp
    f83a:	f88d 3002 	strb.w	r3, [sp, #2]
    f83e:	f8ad 4004 	strh.w	r4, [sp, #4]
    f842:	f000 f84f 	bl	f8e4 <dmConnSmExecute>
    f846:	b002      	add	sp, #8
    f848:	bd10      	pop	{r4, pc}

0000f84a <DmConnAccept>:
    f84a:	b510      	push	{r4, lr}
    f84c:	b086      	sub	sp, #24
    f84e:	2401      	movs	r4, #1
    f850:	9404      	str	r4, [sp, #16]
    f852:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f854:	9403      	str	r4, [sp, #12]
    f856:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    f85a:	9402      	str	r4, [sp, #8]
    f85c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    f860:	e9cd 3400 	strd	r3, r4, [sp]
    f864:	4613      	mov	r3, r2
    f866:	460a      	mov	r2, r1
    f868:	2100      	movs	r1, #0
    f86a:	f7ff fd85 	bl	f378 <dmConnOpenAccept>
    f86e:	b006      	add	sp, #24
    f870:	bd10      	pop	{r4, pc}
    f872:	bf00      	nop

0000f874 <dmConnSmActAccept>:
    f874:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f876:	f101 050b 	add.w	r5, r1, #11
    f87a:	798c      	ldrb	r4, [r1, #6]
    f87c:	7a8b      	ldrb	r3, [r1, #10]
    f87e:	890a      	ldrh	r2, [r1, #8]
    f880:	7948      	ldrb	r0, [r1, #5]
    f882:	9501      	str	r5, [sp, #4]
    f884:	7c49      	ldrb	r1, [r1, #17]
    f886:	9100      	str	r1, [sp, #0]
    f888:	4621      	mov	r1, r4
    f88a:	f7ff fb1a 	bl	eec2 <dmAdvStartDirected>
    f88e:	b003      	add	sp, #12
    f890:	bd30      	pop	{r4, r5, pc}

0000f892 <dmConnSmActCancelAccept>:
    f892:	b538      	push	{r3, r4, r5, lr}
    f894:	4604      	mov	r4, r0
    f896:	460d      	mov	r5, r1
    f898:	f7ff fb28 	bl	eeec <dmAdvStopDirected>
    f89c:	4629      	mov	r1, r5
    f89e:	4620      	mov	r0, r4
    f8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f8a4:	f7ff bd5a 	b.w	f35c <dmConnSmActConnFailed>

0000f8a8 <dmConnSmActConnAccepted>:
    f8a8:	b538      	push	{r3, r4, r5, lr}
    f8aa:	4604      	mov	r4, r0
    f8ac:	460d      	mov	r5, r1
    f8ae:	f7ff fb29 	bl	ef04 <dmAdvConnected>
    f8b2:	4629      	mov	r1, r5
    f8b4:	4620      	mov	r0, r4
    f8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f8ba:	f7ff bd19 	b.w	f2f0 <dmConnSmActConnOpened>

0000f8be <dmConnSmActAcceptFailed>:
    f8be:	b538      	push	{r3, r4, r5, lr}
    f8c0:	4604      	mov	r4, r0
    f8c2:	460d      	mov	r5, r1
    f8c4:	f7ff fb2a 	bl	ef1c <dmAdvConnectFailed>
    f8c8:	4629      	mov	r1, r5
    f8ca:	4620      	mov	r0, r4
    f8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f8d0:	f7ff bd44 	b.w	f35c <dmConnSmActConnFailed>

0000f8d4 <DmConnSlaveInit>:
    f8d4:	4b01      	ldr	r3, [pc, #4]	; (f8dc <DmConnSlaveInit+0x8>)
    f8d6:	4a02      	ldr	r2, [pc, #8]	; (f8e0 <DmConnSlaveInit+0xc>)
    f8d8:	609a      	str	r2, [r3, #8]
    f8da:	4770      	bx	lr
    f8dc:	10003660 	.word	0x10003660
    f8e0:	00021f54 	.word	0x00021f54

0000f8e4 <dmConnSmExecute>:
    f8e4:	788b      	ldrb	r3, [r1, #2]
    f8e6:	7d42      	ldrb	r2, [r0, #21]
    f8e8:	b470      	push	{r4, r5, r6}
    f8ea:	f003 030f 	and.w	r3, r3, #15
    f8ee:	4d0c      	ldr	r5, [pc, #48]	; (f920 <dmConnSmExecute+0x3c>)
    f8f0:	260d      	movs	r6, #13
    f8f2:	fb06 3202 	mla	r2, r6, r2, r3
    f8f6:	eb05 0342 	add.w	r3, r5, r2, lsl #1
    f8fa:	f815 2012 	ldrb.w	r2, [r5, r2, lsl #1]
    f8fe:	785b      	ldrb	r3, [r3, #1]
    f900:	7542      	strb	r2, [r0, #21]
    f902:	091c      	lsrs	r4, r3, #4
    f904:	4a07      	ldr	r2, [pc, #28]	; (f924 <dmConnSmExecute+0x40>)
    f906:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    f90a:	b12a      	cbz	r2, f918 <dmConnSmExecute+0x34>
    f90c:	f003 030f 	and.w	r3, r3, #15
    f910:	bc70      	pop	{r4, r5, r6}
    f912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f916:	4718      	bx	r3
    f918:	bc70      	pop	{r4, r5, r6}
    f91a:	f7ff bb1d 	b.w	ef58 <dmConnSmActNone>
    f91e:	bf00      	nop
    f920:	00021f6c 	.word	0x00021f6c
    f924:	10003660 	.word	0x10003660

0000f928 <dmDevHciHandler>:
    f928:	7882      	ldrb	r2, [r0, #2]
    f92a:	4603      	mov	r3, r0
    f92c:	b92a      	cbnz	r2, f93a <dmDevHciHandler+0x12>
    f92e:	490b      	ldr	r1, [pc, #44]	; (f95c <dmDevHciHandler+0x34>)
    f930:	740a      	strb	r2, [r1, #16]
    f932:	688b      	ldr	r3, [r1, #8]
    f934:	2220      	movs	r2, #32
    f936:	7082      	strb	r2, [r0, #2]
    f938:	4718      	bx	r3
    f93a:	2a13      	cmp	r2, #19
    f93c:	d104      	bne.n	f948 <dmDevHciHandler+0x20>
    f93e:	2253      	movs	r2, #83	; 0x53
    f940:	709a      	strb	r2, [r3, #2]
    f942:	4b06      	ldr	r3, [pc, #24]	; (f95c <dmDevHciHandler+0x34>)
    f944:	689b      	ldr	r3, [r3, #8]
    f946:	e7f7      	b.n	f938 <dmDevHciHandler+0x10>
    f948:	2a14      	cmp	r2, #20
    f94a:	d101      	bne.n	f950 <dmDevHciHandler+0x28>
    f94c:	2255      	movs	r2, #85	; 0x55
    f94e:	e7f7      	b.n	f940 <dmDevHciHandler+0x18>
    f950:	2a12      	cmp	r2, #18
    f952:	d101      	bne.n	f958 <dmDevHciHandler+0x30>
    f954:	2254      	movs	r2, #84	; 0x54
    f956:	e7f3      	b.n	f940 <dmDevHciHandler+0x18>
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	1000366c 	.word	0x1000366c

0000f960 <dmDevActReset>:
    f960:	b538      	push	{r3, r4, r5, lr}
    f962:	4b08      	ldr	r3, [pc, #32]	; (f984 <dmDevActReset+0x24>)
    f964:	4d08      	ldr	r5, [pc, #32]	; (f988 <dmDevActReset+0x28>)
    f966:	2201      	movs	r2, #1
    f968:	741a      	strb	r2, [r3, #16]
    f96a:	2400      	movs	r4, #0
    f96c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    f970:	3401      	adds	r4, #1
    f972:	681b      	ldr	r3, [r3, #0]
    f974:	4798      	blx	r3
    f976:	2c0c      	cmp	r4, #12
    f978:	d1f8      	bne.n	f96c <dmDevActReset+0xc>
    f97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f97e:	f005 bbf3 	b.w	15168 <HciResetSequence>
    f982:	bf00      	nop
    f984:	1000366c 	.word	0x1000366c
    f988:	10002354 	.word	0x10002354

0000f98c <dmDevMsgHandler>:
    f98c:	f7ff bfe8 	b.w	f960 <dmDevActReset>

0000f990 <DmDevReset>:
    f990:	b508      	push	{r3, lr}
    f992:	2004      	movs	r0, #4
    f994:	f008 f865 	bl	17a62 <WsfMsgAlloc>
    f998:	4601      	mov	r1, r0
    f99a:	b138      	cbz	r0, f9ac <DmDevReset+0x1c>
    f99c:	2370      	movs	r3, #112	; 0x70
    f99e:	7083      	strb	r3, [r0, #2]
    f9a0:	4b03      	ldr	r3, [pc, #12]	; (f9b0 <DmDevReset+0x20>)
    f9a2:	7b18      	ldrb	r0, [r3, #12]
    f9a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f9a8:	f008 b87f 	b.w	17aaa <WsfMsgSend>
    f9ac:	bd08      	pop	{r3, pc}
    f9ae:	bf00      	nop
    f9b0:	1000366c 	.word	0x1000366c

0000f9b4 <DmDevSetRandAddr>:
    f9b4:	b510      	push	{r4, lr}
    f9b6:	4601      	mov	r1, r0
    f9b8:	4604      	mov	r4, r0
    f9ba:	4804      	ldr	r0, [pc, #16]	; (f9cc <DmDevSetRandAddr+0x18>)
    f9bc:	f008 ff14 	bl	187e8 <BdaCpy>
    f9c0:	4620      	mov	r0, r4
    f9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9c6:	f004 bdce 	b.w	14566 <HciLeSetRandAddrCmd>
    f9ca:	bf00      	nop
    f9cc:	1000366c 	.word	0x1000366c

0000f9d0 <DmDevWhiteListAdd>:
    f9d0:	f004 b99e 	b.w	13d10 <HciLeAddDevWhiteListCmd>

0000f9d4 <DmDevWhiteListRemove>:
    f9d4:	f004 bcd0 	b.w	14378 <HciLeRemoveDevWhiteListCmd>

0000f9d8 <DmDevWhiteListClear>:
    f9d8:	f004 b9bf 	b.w	13d5a <HciLeClearWhiteListCmd>

0000f9dc <dmDevSetFilterPolicy>:
    f9dc:	2901      	cmp	r1, #1
    f9de:	d00b      	beq.n	f9f8 <dmDevSetFilterPolicy+0x1c>
    f9e0:	d303      	bcc.n	f9ea <dmDevSetFilterPolicy+0xe>
    f9e2:	2902      	cmp	r1, #2
    f9e4:	d00d      	beq.n	fa02 <dmDevSetFilterPolicy+0x26>
    f9e6:	2000      	movs	r0, #0
    f9e8:	4770      	bx	lr
    f9ea:	2a03      	cmp	r2, #3
    f9ec:	d8fb      	bhi.n	f9e6 <dmDevSetFilterPolicy+0xa>
    f9ee:	4b07      	ldr	r3, [pc, #28]	; (fa0c <dmDevSetFilterPolicy+0x30>)
    f9f0:	4418      	add	r0, r3
    f9f2:	7442      	strb	r2, [r0, #17]
    f9f4:	2001      	movs	r0, #1
    f9f6:	4770      	bx	lr
    f9f8:	2a03      	cmp	r2, #3
    f9fa:	d8f4      	bhi.n	f9e6 <dmDevSetFilterPolicy+0xa>
    f9fc:	4b03      	ldr	r3, [pc, #12]	; (fa0c <dmDevSetFilterPolicy+0x30>)
    f9fe:	749a      	strb	r2, [r3, #18]
    fa00:	e7f8      	b.n	f9f4 <dmDevSetFilterPolicy+0x18>
    fa02:	2a01      	cmp	r2, #1
    fa04:	d8ef      	bhi.n	f9e6 <dmDevSetFilterPolicy+0xa>
    fa06:	4b01      	ldr	r3, [pc, #4]	; (fa0c <dmDevSetFilterPolicy+0x30>)
    fa08:	74da      	strb	r2, [r3, #19]
    fa0a:	e7f3      	b.n	f9f4 <dmDevSetFilterPolicy+0x18>
    fa0c:	1000366c 	.word	0x1000366c

0000fa10 <DmDevSetFilterPolicy>:
    fa10:	460a      	mov	r2, r1
    fa12:	4601      	mov	r1, r0
    fa14:	2000      	movs	r0, #0
    fa16:	f7ff bfe1 	b.w	f9dc <dmDevSetFilterPolicy>

0000fa1a <DmDevSetExtFilterPolicy>:
    fa1a:	f7ff bfdf 	b.w	f9dc <dmDevSetFilterPolicy>

0000fa1e <DmDevVsInit>:
    fa1e:	f007 be88 	b.w	17732 <HciVsInit>
    fa22:	bf00      	nop

0000fa24 <dmHciEvtCback>:
    fa24:	4a06      	ldr	r2, [pc, #24]	; (fa40 <dmHciEvtCback+0x1c>)
    fa26:	7883      	ldrb	r3, [r0, #2]
    fa28:	7c12      	ldrb	r2, [r2, #16]
    fa2a:	b102      	cbz	r2, fa2e <dmHciEvtCback+0xa>
    fa2c:	b933      	cbnz	r3, fa3c <dmHciEvtCback+0x18>
    fa2e:	4a05      	ldr	r2, [pc, #20]	; (fa44 <dmHciEvtCback+0x20>)
    fa30:	5cd2      	ldrb	r2, [r2, r3]
    fa32:	4b05      	ldr	r3, [pc, #20]	; (fa48 <dmHciEvtCback+0x24>)
    fa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fa38:	685b      	ldr	r3, [r3, #4]
    fa3a:	4718      	bx	r3
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop
    fa40:	1000366c 	.word	0x1000366c
    fa44:	00021ffc 	.word	0x00021ffc
    fa48:	10002354 	.word	0x10002354

0000fa4c <dmEmptyReset>:
    fa4c:	4770      	bx	lr

0000fa4e <dmEmptyHandler>:
    fa4e:	4770      	bx	lr

0000fa50 <DmRegister>:
    fa50:	b510      	push	{r4, lr}
    fa52:	4b0a      	ldr	r3, [pc, #40]	; (fa7c <DmRegister+0x2c>)
    fa54:	4c0a      	ldr	r4, [pc, #40]	; (fa80 <DmRegister+0x30>)
    fa56:	6a1a      	ldr	r2, [r3, #32]
    fa58:	4b0a      	ldr	r3, [pc, #40]	; (fa84 <DmRegister+0x34>)
    fa5a:	60a0      	str	r0, [r4, #8]
    fa5c:	429a      	cmp	r2, r3
    fa5e:	b09a      	sub	sp, #104	; 0x68
    fa60:	d00a      	beq.n	fa78 <DmRegister+0x28>
    fa62:	f005 fd41 	bl	154e8 <HciGetMaxRxAclLen>
    fa66:	2844      	cmp	r0, #68	; 0x44
    fa68:	d806      	bhi.n	fa78 <DmRegister+0x28>
    fa6a:	a81a      	add	r0, sp, #104	; 0x68
    fa6c:	f04f 73a9 	mov.w	r3, #22151168	; 0x1520000
    fa70:	f840 3d64 	str.w	r3, [r0, #-100]!
    fa74:	68a3      	ldr	r3, [r4, #8]
    fa76:	4798      	blx	r3
    fa78:	b01a      	add	sp, #104	; 0x68
    fa7a:	bd10      	pop	{r4, pc}
    fa7c:	10002354 	.word	0x10002354
    fa80:	1000366c 	.word	0x1000366c
    fa84:	00022038 	.word	0x00022038

0000fa88 <DmFindAdType>:
    fa88:	b530      	push	{r4, r5, lr}
    fa8a:	b121      	cbz	r1, fa96 <DmFindAdType+0xe>
    fa8c:	7813      	ldrb	r3, [r2, #0]
    fa8e:	b173      	cbz	r3, faae <DmFindAdType+0x26>
    fa90:	b29c      	uxth	r4, r3
    fa92:	428c      	cmp	r4, r1
    fa94:	d302      	bcc.n	fa9c <DmFindAdType+0x14>
    fa96:	2200      	movs	r2, #0
    fa98:	4610      	mov	r0, r2
    fa9a:	bd30      	pop	{r4, r5, pc}
    fa9c:	7855      	ldrb	r5, [r2, #1]
    fa9e:	4285      	cmp	r5, r0
    faa0:	d0fa      	beq.n	fa98 <DmFindAdType+0x10>
    faa2:	43e4      	mvns	r4, r4
    faa4:	4421      	add	r1, r4
    faa6:	3301      	adds	r3, #1
    faa8:	b289      	uxth	r1, r1
    faaa:	441a      	add	r2, r3
    faac:	e7ed      	b.n	fa8a <DmFindAdType+0x2>
    faae:	461a      	mov	r2, r3
    fab0:	e7f2      	b.n	fa98 <DmFindAdType+0x10>

0000fab2 <DmHandlerInit>:
    fab2:	4b04      	ldr	r3, [pc, #16]	; (fac4 <DmHandlerInit+0x12>)
    fab4:	2200      	movs	r2, #0
    fab6:	7318      	strb	r0, [r3, #12]
    fab8:	4803      	ldr	r0, [pc, #12]	; (fac8 <DmHandlerInit+0x16>)
    faba:	751a      	strb	r2, [r3, #20]
    fabc:	741a      	strb	r2, [r3, #16]
    fabe:	f007 be43 	b.w	17748 <HciEvtRegister>
    fac2:	bf00      	nop
    fac4:	1000366c 	.word	0x1000366c
    fac8:	0000fa25 	.word	0x0000fa25

0000facc <DmHandler>:
    facc:	b151      	cbz	r1, fae4 <DmHandler+0x18>
    face:	4b06      	ldr	r3, [pc, #24]	; (fae8 <DmHandler+0x1c>)
    fad0:	7c1b      	ldrb	r3, [r3, #16]
    fad2:	b93b      	cbnz	r3, fae4 <DmHandler+0x18>
    fad4:	788b      	ldrb	r3, [r1, #2]
    fad6:	4a05      	ldr	r2, [pc, #20]	; (faec <DmHandler+0x20>)
    fad8:	091b      	lsrs	r3, r3, #4
    fada:	4608      	mov	r0, r1
    fadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fae0:	689b      	ldr	r3, [r3, #8]
    fae2:	4718      	bx	r3
    fae4:	4770      	bx	lr
    fae6:	bf00      	nop
    fae8:	1000366c 	.word	0x1000366c
    faec:	10002354 	.word	0x10002354

0000faf0 <DmLlPrivEnabled>:
    faf0:	4b01      	ldr	r3, [pc, #4]	; (faf8 <DmLlPrivEnabled+0x8>)
    faf2:	7d18      	ldrb	r0, [r3, #20]
    faf4:	4770      	bx	lr
    faf6:	bf00      	nop
    faf8:	1000366c 	.word	0x1000366c

0000fafc <DmLlAddrType>:
    fafc:	4b04      	ldr	r3, [pc, #16]	; (fb10 <DmLlAddrType+0x14>)
    fafe:	7d1b      	ldrb	r3, [r3, #20]
    fb00:	b12b      	cbz	r3, fb0e <DmLlAddrType+0x12>
    fb02:	b118      	cbz	r0, fb0c <DmLlAddrType+0x10>
    fb04:	2801      	cmp	r0, #1
    fb06:	bf08      	it	eq
    fb08:	2003      	moveq	r0, #3
    fb0a:	4770      	bx	lr
    fb0c:	2002      	movs	r0, #2
    fb0e:	4770      	bx	lr
    fb10:	1000366c 	.word	0x1000366c

0000fb14 <DmHostAddrType>:
    fb14:	4b05      	ldr	r3, [pc, #20]	; (fb2c <DmHostAddrType+0x18>)
    fb16:	7d1b      	ldrb	r3, [r3, #20]
    fb18:	b133      	cbz	r3, fb28 <DmHostAddrType+0x14>
    fb1a:	2802      	cmp	r0, #2
    fb1c:	d003      	beq.n	fb26 <DmHostAddrType+0x12>
    fb1e:	2803      	cmp	r0, #3
    fb20:	bf08      	it	eq
    fb22:	2001      	moveq	r0, #1
    fb24:	4770      	bx	lr
    fb26:	2000      	movs	r0, #0
    fb28:	4770      	bx	lr
    fb2a:	bf00      	nop
    fb2c:	1000366c 	.word	0x1000366c

0000fb30 <DmSizeOfEvt>:
    fb30:	7883      	ldrb	r3, [r0, #2]
    fb32:	3b20      	subs	r3, #32
    fb34:	b2da      	uxtb	r2, r3
    fb36:	2a35      	cmp	r2, #53	; 0x35
    fb38:	bf9d      	ittte	ls
    fb3a:	4a03      	ldrls	r2, [pc, #12]	; (fb48 <DmSizeOfEvt+0x18>)
    fb3c:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
    fb40:	f8b3 0048 	ldrhls.w	r0, [r3, #72]	; 0x48
    fb44:	2004      	movhi	r0, #4
    fb46:	4770      	bx	lr
    fb48:	00021ffc 	.word	0x00021ffc

0000fb4c <DmScanPhyToIdx>:
    fb4c:	2000      	movs	r0, #0
    fb4e:	4770      	bx	lr

0000fb50 <dmInitPhyToIdx>:
    fb50:	2801      	cmp	r0, #1
    fb52:	d00d      	beq.n	fb70 <dmInitPhyToIdx+0x20>
    fb54:	2802      	cmp	r0, #2
    fb56:	d104      	bne.n	fb62 <dmInitPhyToIdx+0x12>
    fb58:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    fb5c:	bf18      	it	ne
    fb5e:	2001      	movne	r0, #1
    fb60:	4770      	bx	lr
    fb62:	2901      	cmp	r1, #1
    fb64:	d004      	beq.n	fb70 <dmInitPhyToIdx+0x20>
    fb66:	2902      	cmp	r1, #2
    fb68:	bf0c      	ite	eq
    fb6a:	2001      	moveq	r0, #1
    fb6c:	2002      	movne	r0, #2
    fb6e:	4770      	bx	lr
    fb70:	2000      	movs	r0, #0
    fb72:	4770      	bx	lr

0000fb74 <DmInitPhyToIdx>:
    fb74:	2000      	movs	r0, #0
    fb76:	4770      	bx	lr

0000fb78 <dmPrivMsgHandler>:
    fb78:	7883      	ldrb	r3, [r0, #2]
    fb7a:	4a03      	ldr	r2, [pc, #12]	; (fb88 <dmPrivMsgHandler+0x10>)
    fb7c:	f003 030f 	and.w	r3, r3, #15
    fb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb84:	4718      	bx	r3
    fb86:	bf00      	nop
    fb88:	000220b0 	.word	0x000220b0

0000fb8c <dmPrivReset>:
    fb8c:	4a02      	ldr	r2, [pc, #8]	; (fb98 <dmPrivReset+0xc>)
    fb8e:	2300      	movs	r3, #0
    fb90:	70d3      	strb	r3, [r2, #3]
    fb92:	4a02      	ldr	r2, [pc, #8]	; (fb9c <dmPrivReset+0x10>)
    fb94:	7513      	strb	r3, [r2, #20]
    fb96:	4770      	bx	lr
    fb98:	10003684 	.word	0x10003684
    fb9c:	1000366c 	.word	0x1000366c

0000fba0 <dmPrivActAesCmpl>:
    fba0:	b510      	push	{r4, lr}
    fba2:	6841      	ldr	r1, [r0, #4]
    fba4:	4604      	mov	r4, r0
    fba6:	2203      	movs	r2, #3
    fba8:	4809      	ldr	r0, [pc, #36]	; (fbd0 <dmPrivActAesCmpl+0x30>)
    fbaa:	f7fc faa9 	bl	c100 <memcmp>
    fbae:	b958      	cbnz	r0, fbc8 <dmPrivActAesCmpl+0x28>
    fbb0:	70e0      	strb	r0, [r4, #3]
    fbb2:	4b07      	ldr	r3, [pc, #28]	; (fbd0 <dmPrivActAesCmpl+0x30>)
    fbb4:	2200      	movs	r2, #0
    fbb6:	70da      	strb	r2, [r3, #3]
    fbb8:	2337      	movs	r3, #55	; 0x37
    fbba:	70a3      	strb	r3, [r4, #2]
    fbbc:	4b05      	ldr	r3, [pc, #20]	; (fbd4 <dmPrivActAesCmpl+0x34>)
    fbbe:	4620      	mov	r0, r4
    fbc0:	689b      	ldr	r3, [r3, #8]
    fbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbc6:	4718      	bx	r3
    fbc8:	2305      	movs	r3, #5
    fbca:	70e3      	strb	r3, [r4, #3]
    fbcc:	e7f1      	b.n	fbb2 <dmPrivActAesCmpl+0x12>
    fbce:	bf00      	nop
    fbd0:	10003684 	.word	0x10003684
    fbd4:	1000366c 	.word	0x1000366c

0000fbd8 <dmPrivActAddDevToResList>:
    fbd8:	b510      	push	{r4, lr}
    fbda:	f100 031b 	add.w	r3, r0, #27
    fbde:	4604      	mov	r4, r0
    fbe0:	f100 020b 	add.w	r2, r0, #11
    fbe4:	1d41      	adds	r1, r0, #5
    fbe6:	7900      	ldrb	r0, [r0, #4]
    fbe8:	f004 fe3d 	bl	14866 <HciLeAddDeviceToResolvingListCmd>
    fbec:	4b03      	ldr	r3, [pc, #12]	; (fbfc <dmPrivActAddDevToResList+0x24>)
    fbee:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
    fbf2:	721a      	strb	r2, [r3, #8]
    fbf4:	8822      	ldrh	r2, [r4, #0]
    fbf6:	809a      	strh	r2, [r3, #4]
    fbf8:	bd10      	pop	{r4, pc}
    fbfa:	bf00      	nop
    fbfc:	10003684 	.word	0x10003684

0000fc00 <dmPrivActRemDevFromResList>:
    fc00:	b510      	push	{r4, lr}
    fc02:	1d41      	adds	r1, r0, #5
    fc04:	4604      	mov	r4, r0
    fc06:	7900      	ldrb	r0, [r0, #4]
    fc08:	f004 fe61 	bl	148ce <HciLeRemoveDeviceFromResolvingList>
    fc0c:	4b01      	ldr	r3, [pc, #4]	; (fc14 <dmPrivActRemDevFromResList+0x14>)
    fc0e:	8822      	ldrh	r2, [r4, #0]
    fc10:	80da      	strh	r2, [r3, #6]
    fc12:	bd10      	pop	{r4, pc}
    fc14:	10003684 	.word	0x10003684

0000fc18 <dmPrivActClearResList>:
    fc18:	f004 be7e 	b.w	14918 <HciLeClearResolvingList>

0000fc1c <dmPrivActSetPrivacyMode>:
    fc1c:	7ac2      	ldrb	r2, [r0, #11]
    fc1e:	1d41      	adds	r1, r0, #5
    fc20:	7900      	ldrb	r0, [r0, #4]
    fc22:	f004 bf2c 	b.w	14a7e <HciLeSetPrivacyModeCmd>

0000fc26 <dmPrivActResolveAddr>:
    fc26:	b570      	push	{r4, r5, r6, lr}
    fc28:	4d15      	ldr	r5, [pc, #84]	; (fc80 <dmPrivActResolveAddr+0x5a>)
    fc2a:	4e16      	ldr	r6, [pc, #88]	; (fc84 <dmPrivActResolveAddr+0x5e>)
    fc2c:	78e9      	ldrb	r1, [r5, #3]
    fc2e:	b086      	sub	sp, #24
    fc30:	4604      	mov	r4, r0
    fc32:	b9f9      	cbnz	r1, fc74 <dmPrivActResolveAddr+0x4e>
    fc34:	4603      	mov	r3, r0
    fc36:	f833 2f14 	ldrh.w	r2, [r3, #20]!
    fc3a:	802a      	strh	r2, [r5, #0]
    fc3c:	789b      	ldrb	r3, [r3, #2]
    fc3e:	70ab      	strb	r3, [r5, #2]
    fc40:	4603      	mov	r3, r0
    fc42:	f10d 000b 	add.w	r0, sp, #11
    fc46:	f833 2f17 	ldrh.w	r2, [r3, #23]!
    fc4a:	f8ad 2008 	strh.w	r2, [sp, #8]
    fc4e:	789b      	ldrb	r3, [r3, #2]
    fc50:	f88d 300a 	strb.w	r3, [sp, #10]
    fc54:	220d      	movs	r2, #13
    fc56:	f7fc fb81 	bl	c35c <memset>
    fc5a:	2301      	movs	r3, #1
    fc5c:	4620      	mov	r0, r4
    fc5e:	2161      	movs	r1, #97	; 0x61
    fc60:	70eb      	strb	r3, [r5, #3]
    fc62:	f830 3b04 	ldrh.w	r3, [r0], #4
    fc66:	7b32      	ldrb	r2, [r6, #12]
    fc68:	9100      	str	r1, [sp, #0]
    fc6a:	a902      	add	r1, sp, #8
    fc6c:	f008 febe 	bl	189ec <SecAes>
    fc70:	b006      	add	sp, #24
    fc72:	bd70      	pop	{r4, r5, r6, pc}
    fc74:	f240 7337 	movw	r3, #1847	; 0x737
    fc78:	8043      	strh	r3, [r0, #2]
    fc7a:	68b3      	ldr	r3, [r6, #8]
    fc7c:	4798      	blx	r3
    fc7e:	e7f7      	b.n	fc70 <dmPrivActResolveAddr+0x4a>
    fc80:	10003684 	.word	0x10003684
    fc84:	1000366c 	.word	0x1000366c

0000fc88 <dmPrivActSetAddrResEnable>:
    fc88:	b510      	push	{r4, lr}
    fc8a:	7904      	ldrb	r4, [r0, #4]
    fc8c:	4620      	mov	r0, r4
    fc8e:	f004 feb3 	bl	149f8 <HciLeSetAddrResolutionEnable>
    fc92:	4b01      	ldr	r3, [pc, #4]	; (fc98 <dmPrivActSetAddrResEnable+0x10>)
    fc94:	725c      	strb	r4, [r3, #9]
    fc96:	bd10      	pop	{r4, pc}
    fc98:	10003684 	.word	0x10003684

0000fc9c <dmPrivHciHandler>:
    fc9c:	7883      	ldrb	r3, [r0, #2]
    fc9e:	3b15      	subs	r3, #21
    fca0:	b570      	push	{r4, r5, r6, lr}
    fca2:	4604      	mov	r4, r0
    fca4:	2b05      	cmp	r3, #5
    fca6:	d83f      	bhi.n	fd28 <dmPrivHciHandler+0x8c>
    fca8:	e8df f003 	tbb	[pc, r3]
    fcac:	2f201a03 	.word	0x2f201a03
    fcb0:	3432      	.short	0x3432
    fcb2:	4d1e      	ldr	r5, [pc, #120]	; (fd2c <dmPrivHciHandler+0x90>)
    fcb4:	2339      	movs	r3, #57	; 0x39
    fcb6:	7083      	strb	r3, [r0, #2]
    fcb8:	88ab      	ldrh	r3, [r5, #4]
    fcba:	8003      	strh	r3, [r0, #0]
    fcbc:	78c3      	ldrb	r3, [r0, #3]
    fcbe:	b94b      	cbnz	r3, fcd4 <dmPrivHciHandler+0x38>
    fcc0:	7a2b      	ldrb	r3, [r5, #8]
    fcc2:	b13b      	cbz	r3, fcd4 <dmPrivHciHandler+0x38>
    fcc4:	4b1a      	ldr	r3, [pc, #104]	; (fd30 <dmPrivHciHandler+0x94>)
    fcc6:	7d1b      	ldrb	r3, [r3, #20]
    fcc8:	b923      	cbnz	r3, fcd4 <dmPrivHciHandler+0x38>
    fcca:	2001      	movs	r0, #1
    fccc:	f004 fe94 	bl	149f8 <HciLeSetAddrResolutionEnable>
    fcd0:	2301      	movs	r3, #1
    fcd2:	726b      	strb	r3, [r5, #9]
    fcd4:	4b16      	ldr	r3, [pc, #88]	; (fd30 <dmPrivHciHandler+0x94>)
    fcd6:	4620      	mov	r0, r4
    fcd8:	689b      	ldr	r3, [r3, #8]
    fcda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fcde:	4718      	bx	r3
    fce0:	233a      	movs	r3, #58	; 0x3a
    fce2:	7083      	strb	r3, [r0, #2]
    fce4:	4b11      	ldr	r3, [pc, #68]	; (fd2c <dmPrivHciHandler+0x90>)
    fce6:	88db      	ldrh	r3, [r3, #6]
    fce8:	8003      	strh	r3, [r0, #0]
    fcea:	e7f3      	b.n	fcd4 <dmPrivHciHandler+0x38>
    fcec:	78c5      	ldrb	r5, [r0, #3]
    fcee:	233b      	movs	r3, #59	; 0x3b
    fcf0:	7083      	strb	r3, [r0, #2]
    fcf2:	2d00      	cmp	r5, #0
    fcf4:	d1ee      	bne.n	fcd4 <dmPrivHciHandler+0x38>
    fcf6:	4b0e      	ldr	r3, [pc, #56]	; (fd30 <dmPrivHciHandler+0x94>)
    fcf8:	7d1b      	ldrb	r3, [r3, #20]
    fcfa:	2b00      	cmp	r3, #0
    fcfc:	d0ea      	beq.n	fcd4 <dmPrivHciHandler+0x38>
    fcfe:	4628      	mov	r0, r5
    fd00:	f004 fe7a 	bl	149f8 <HciLeSetAddrResolutionEnable>
    fd04:	4b09      	ldr	r3, [pc, #36]	; (fd2c <dmPrivHciHandler+0x90>)
    fd06:	725d      	strb	r5, [r3, #9]
    fd08:	e7e4      	b.n	fcd4 <dmPrivHciHandler+0x38>
    fd0a:	233c      	movs	r3, #60	; 0x3c
    fd0c:	70a3      	strb	r3, [r4, #2]
    fd0e:	e7e1      	b.n	fcd4 <dmPrivHciHandler+0x38>
    fd10:	233d      	movs	r3, #61	; 0x3d
    fd12:	e7fb      	b.n	fd0c <dmPrivHciHandler+0x70>
    fd14:	233e      	movs	r3, #62	; 0x3e
    fd16:	7083      	strb	r3, [r0, #2]
    fd18:	78c3      	ldrb	r3, [r0, #3]
    fd1a:	2b00      	cmp	r3, #0
    fd1c:	d1da      	bne.n	fcd4 <dmPrivHciHandler+0x38>
    fd1e:	4b03      	ldr	r3, [pc, #12]	; (fd2c <dmPrivHciHandler+0x90>)
    fd20:	7a5a      	ldrb	r2, [r3, #9]
    fd22:	4b03      	ldr	r3, [pc, #12]	; (fd30 <dmPrivHciHandler+0x94>)
    fd24:	751a      	strb	r2, [r3, #20]
    fd26:	e7d5      	b.n	fcd4 <dmPrivHciHandler+0x38>
    fd28:	bd70      	pop	{r4, r5, r6, pc}
    fd2a:	bf00      	nop
    fd2c:	10003684 	.word	0x10003684
    fd30:	1000366c 	.word	0x1000366c

0000fd34 <DmPrivInit>:
    fd34:	4b01      	ldr	r3, [pc, #4]	; (fd3c <DmPrivInit+0x8>)
    fd36:	4a02      	ldr	r2, [pc, #8]	; (fd40 <DmPrivInit+0xc>)
    fd38:	619a      	str	r2, [r3, #24]
    fd3a:	4770      	bx	lr
    fd3c:	10002354 	.word	0x10002354
    fd40:	000220cc 	.word	0x000220cc

0000fd44 <DmPrivResolveAddr>:
    fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd46:	4605      	mov	r5, r0
    fd48:	201a      	movs	r0, #26
    fd4a:	460e      	mov	r6, r1
    fd4c:	4617      	mov	r7, r2
    fd4e:	f007 fe88 	bl	17a62 <WsfMsgAlloc>
    fd52:	4604      	mov	r4, r0
    fd54:	b190      	cbz	r0, fd7c <DmPrivResolveAddr+0x38>
    fd56:	2360      	movs	r3, #96	; 0x60
    fd58:	7083      	strb	r3, [r0, #2]
    fd5a:	4631      	mov	r1, r6
    fd5c:	f820 7b04 	strh.w	r7, [r0], #4
    fd60:	f008 fd8d 	bl	1887e <Calc128Cpy>
    fd64:	4629      	mov	r1, r5
    fd66:	f104 0014 	add.w	r0, r4, #20
    fd6a:	f008 fd3d 	bl	187e8 <BdaCpy>
    fd6e:	4b04      	ldr	r3, [pc, #16]	; (fd80 <DmPrivResolveAddr+0x3c>)
    fd70:	4621      	mov	r1, r4
    fd72:	7b18      	ldrb	r0, [r3, #12]
    fd74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fd78:	f007 be97 	b.w	17aaa <WsfMsgSend>
    fd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd7e:	bf00      	nop
    fd80:	1000366c 	.word	0x1000366c

0000fd84 <DmPrivAddDevToResList>:
    fd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd88:	4681      	mov	r9, r0
    fd8a:	202c      	movs	r0, #44	; 0x2c
    fd8c:	4688      	mov	r8, r1
    fd8e:	4617      	mov	r7, r2
    fd90:	461e      	mov	r6, r3
    fd92:	f89d 5020 	ldrb.w	r5, [sp, #32]
    fd96:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
    fd9a:	f007 fe62 	bl	17a62 <WsfMsgAlloc>
    fd9e:	4604      	mov	r4, r0
    fda0:	b1e0      	cbz	r0, fddc <DmPrivAddDevToResList+0x58>
    fda2:	2362      	movs	r3, #98	; 0x62
    fda4:	7083      	strb	r3, [r0, #2]
    fda6:	f8a0 a000 	strh.w	sl, [r0]
    fdaa:	f880 9004 	strb.w	r9, [r0, #4]
    fdae:	4641      	mov	r1, r8
    fdb0:	3005      	adds	r0, #5
    fdb2:	f008 fd19 	bl	187e8 <BdaCpy>
    fdb6:	4639      	mov	r1, r7
    fdb8:	f104 000b 	add.w	r0, r4, #11
    fdbc:	f008 fd5f 	bl	1887e <Calc128Cpy>
    fdc0:	4631      	mov	r1, r6
    fdc2:	f104 001b 	add.w	r0, r4, #27
    fdc6:	f008 fd5a 	bl	1887e <Calc128Cpy>
    fdca:	4b05      	ldr	r3, [pc, #20]	; (fde0 <DmPrivAddDevToResList+0x5c>)
    fdcc:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
    fdd0:	4621      	mov	r1, r4
    fdd2:	7b18      	ldrb	r0, [r3, #12]
    fdd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fdd8:	f007 be67 	b.w	17aaa <WsfMsgSend>
    fddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fde0:	1000366c 	.word	0x1000366c

0000fde4 <DmPrivRemDevFromResList>:
    fde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fde6:	4606      	mov	r6, r0
    fde8:	200c      	movs	r0, #12
    fdea:	460d      	mov	r5, r1
    fdec:	4617      	mov	r7, r2
    fdee:	f007 fe38 	bl	17a62 <WsfMsgAlloc>
    fdf2:	4604      	mov	r4, r0
    fdf4:	b170      	cbz	r0, fe14 <DmPrivRemDevFromResList+0x30>
    fdf6:	2363      	movs	r3, #99	; 0x63
    fdf8:	7083      	strb	r3, [r0, #2]
    fdfa:	8007      	strh	r7, [r0, #0]
    fdfc:	7106      	strb	r6, [r0, #4]
    fdfe:	4629      	mov	r1, r5
    fe00:	3005      	adds	r0, #5
    fe02:	f008 fcf1 	bl	187e8 <BdaCpy>
    fe06:	4b04      	ldr	r3, [pc, #16]	; (fe18 <DmPrivRemDevFromResList+0x34>)
    fe08:	4621      	mov	r1, r4
    fe0a:	7b18      	ldrb	r0, [r3, #12]
    fe0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fe10:	f007 be4b 	b.w	17aaa <WsfMsgSend>
    fe14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe16:	bf00      	nop
    fe18:	1000366c 	.word	0x1000366c

0000fe1c <DmPrivClearResList>:
    fe1c:	b508      	push	{r3, lr}
    fe1e:	202c      	movs	r0, #44	; 0x2c
    fe20:	f007 fe1f 	bl	17a62 <WsfMsgAlloc>
    fe24:	4601      	mov	r1, r0
    fe26:	b138      	cbz	r0, fe38 <DmPrivClearResList+0x1c>
    fe28:	2364      	movs	r3, #100	; 0x64
    fe2a:	7083      	strb	r3, [r0, #2]
    fe2c:	4b03      	ldr	r3, [pc, #12]	; (fe3c <DmPrivClearResList+0x20>)
    fe2e:	7b18      	ldrb	r0, [r3, #12]
    fe30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fe34:	f007 be39 	b.w	17aaa <WsfMsgSend>
    fe38:	bd08      	pop	{r3, pc}
    fe3a:	bf00      	nop
    fe3c:	1000366c 	.word	0x1000366c

0000fe40 <DmPrivReadPeerResolvableAddr>:
    fe40:	f004 bd90 	b.w	14964 <HciLeReadPeerResolvableAddr>

0000fe44 <DmPrivReadLocalResolvableAddr>:
    fe44:	f004 bdb3 	b.w	149ae <HciLeReadLocalResolvableAddr>

0000fe48 <DmPrivSetAddrResEnable>:
    fe48:	b510      	push	{r4, lr}
    fe4a:	4604      	mov	r4, r0
    fe4c:	202c      	movs	r0, #44	; 0x2c
    fe4e:	f007 fe08 	bl	17a62 <WsfMsgAlloc>
    fe52:	4601      	mov	r1, r0
    fe54:	b150      	cbz	r0, fe6c <DmPrivSetAddrResEnable+0x24>
    fe56:	2365      	movs	r3, #101	; 0x65
    fe58:	7083      	strb	r3, [r0, #2]
    fe5a:	2300      	movs	r3, #0
    fe5c:	8003      	strh	r3, [r0, #0]
    fe5e:	4b04      	ldr	r3, [pc, #16]	; (fe70 <DmPrivSetAddrResEnable+0x28>)
    fe60:	7104      	strb	r4, [r0, #4]
    fe62:	7b18      	ldrb	r0, [r3, #12]
    fe64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe68:	f007 be1f 	b.w	17aaa <WsfMsgSend>
    fe6c:	bd10      	pop	{r4, pc}
    fe6e:	bf00      	nop
    fe70:	1000366c 	.word	0x1000366c

0000fe74 <DmPrivSetResolvablePrivateAddrTimeout>:
    fe74:	f004 bddd 	b.w	14a32 <HciLeSetResolvablePrivateAddrTimeout>

0000fe78 <DmPrivSetPrivacyMode>:
    fe78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7a:	4607      	mov	r7, r0
    fe7c:	200c      	movs	r0, #12
    fe7e:	460e      	mov	r6, r1
    fe80:	4615      	mov	r5, r2
    fe82:	f007 fdee 	bl	17a62 <WsfMsgAlloc>
    fe86:	4604      	mov	r4, r0
    fe88:	b170      	cbz	r0, fea8 <DmPrivSetPrivacyMode+0x30>
    fe8a:	2366      	movs	r3, #102	; 0x66
    fe8c:	7083      	strb	r3, [r0, #2]
    fe8e:	7107      	strb	r7, [r0, #4]
    fe90:	4631      	mov	r1, r6
    fe92:	3005      	adds	r0, #5
    fe94:	f008 fca8 	bl	187e8 <BdaCpy>
    fe98:	4b04      	ldr	r3, [pc, #16]	; (feac <DmPrivSetPrivacyMode+0x34>)
    fe9a:	72e5      	strb	r5, [r4, #11]
    fe9c:	4621      	mov	r1, r4
    fe9e:	7b18      	ldrb	r0, [r3, #12]
    fea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fea4:	f007 be01 	b.w	17aaa <WsfMsgSend>
    fea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    feaa:	bf00      	nop
    feac:	1000366c 	.word	0x1000366c

0000feb0 <dmSecMsgHandler>:
    feb0:	b570      	push	{r4, r5, r6, lr}
    feb2:	4605      	mov	r5, r0
    feb4:	7800      	ldrb	r0, [r0, #0]
    feb6:	f7ff f9b7 	bl	f228 <dmConnCcbById>
    feba:	4604      	mov	r4, r0
    febc:	b120      	cbz	r0, fec8 <dmSecMsgHandler+0x18>
    febe:	78ab      	ldrb	r3, [r5, #2]
    fec0:	2b50      	cmp	r3, #80	; 0x50
    fec2:	d002      	beq.n	feca <dmSecMsgHandler+0x1a>
    fec4:	2b51      	cmp	r3, #81	; 0x51
    fec6:	d012      	beq.n	feee <dmSecMsgHandler+0x3e>
    fec8:	bd70      	pop	{r4, r5, r6, pc}
    feca:	2201      	movs	r2, #1
    fecc:	2102      	movs	r1, #2
    fece:	7c00      	ldrb	r0, [r0, #16]
    fed0:	f7ff fc2a 	bl	f728 <DmConnSetIdle>
    fed4:	7fab      	ldrb	r3, [r5, #30]
    fed6:	7623      	strb	r3, [r4, #24]
    fed8:	2301      	movs	r3, #1
    feda:	74a3      	strb	r3, [r4, #18]
    fedc:	8baa      	ldrh	r2, [r5, #28]
    fede:	89a0      	ldrh	r0, [r4, #12]
    fee0:	1d2b      	adds	r3, r5, #4
    fee2:	f105 0114 	add.w	r1, r5, #20
    fee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    feea:	f004 bb8a 	b.w	14602 <HciLeStartEncryptionCmd>
    feee:	7d2a      	ldrb	r2, [r5, #20]
    fef0:	b13a      	cbz	r2, ff02 <dmSecMsgHandler+0x52>
    fef2:	7d6b      	ldrb	r3, [r5, #21]
    fef4:	7603      	strb	r3, [r0, #24]
    fef6:	1d29      	adds	r1, r5, #4
    fef8:	8980      	ldrh	r0, [r0, #12]
    fefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fefe:	f004 b98a 	b.w	14216 <HciLeLtkReqReplCmd>
    ff02:	7c00      	ldrb	r0, [r0, #16]
    ff04:	2102      	movs	r1, #2
    ff06:	f7ff fc0f 	bl	f728 <DmConnSetIdle>
    ff0a:	89a0      	ldrh	r0, [r4, #12]
    ff0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff10:	f004 b95b 	b.w	141ca <HciLeLtkReqNegReplCmd>

0000ff14 <dmSecApiLtkMsg>:
    ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ff16:	4606      	mov	r6, r0
    ff18:	2020      	movs	r0, #32
    ff1a:	460d      	mov	r5, r1
    ff1c:	4614      	mov	r4, r2
    ff1e:	461f      	mov	r7, r3
    ff20:	f007 fd9f 	bl	17a62 <WsfMsgAlloc>
    ff24:	b1a8      	cbz	r0, ff52 <dmSecApiLtkMsg+0x3e>
    ff26:	7087      	strb	r7, [r0, #2]
    ff28:	8006      	strh	r6, [r0, #0]
    ff2a:	70c5      	strb	r5, [r0, #3]
    ff2c:	4622      	mov	r2, r4
    ff2e:	1d03      	adds	r3, r0, #4
    ff30:	f104 0118 	add.w	r1, r4, #24
    ff34:	f852 4b04 	ldr.w	r4, [r2], #4
    ff38:	f843 4b04 	str.w	r4, [r3], #4
    ff3c:	428a      	cmp	r2, r1
    ff3e:	d1f9      	bne.n	ff34 <dmSecApiLtkMsg+0x20>
    ff40:	8812      	ldrh	r2, [r2, #0]
    ff42:	801a      	strh	r2, [r3, #0]
    ff44:	4b03      	ldr	r3, [pc, #12]	; (ff54 <dmSecApiLtkMsg+0x40>)
    ff46:	4601      	mov	r1, r0
    ff48:	7b18      	ldrb	r0, [r3, #12]
    ff4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ff4e:	f007 bdac 	b.w	17aaa <WsfMsgSend>
    ff52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff54:	1000366c 	.word	0x1000366c

0000ff58 <DmSmpCbackExec>:
    ff58:	7883      	ldrb	r3, [r0, #2]
    ff5a:	2b2a      	cmp	r3, #42	; 0x2a
    ff5c:	b510      	push	{r4, lr}
    ff5e:	4604      	mov	r4, r0
    ff60:	d001      	beq.n	ff66 <DmSmpCbackExec+0xe>
    ff62:	2b2c      	cmp	r3, #44	; 0x2c
    ff64:	d105      	bne.n	ff72 <DmSmpCbackExec+0x1a>
    ff66:	4b06      	ldr	r3, [pc, #24]	; (ff80 <DmSmpCbackExec+0x28>)
    ff68:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
    ff6c:	b10b      	cbz	r3, ff72 <DmSmpCbackExec+0x1a>
    ff6e:	4620      	mov	r0, r4
    ff70:	4798      	blx	r3
    ff72:	4b04      	ldr	r3, [pc, #16]	; (ff84 <DmSmpCbackExec+0x2c>)
    ff74:	4620      	mov	r0, r4
    ff76:	689b      	ldr	r3, [r3, #8]
    ff78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff7c:	4718      	bx	r3
    ff7e:	bf00      	nop
    ff80:	100034dc 	.word	0x100034dc
    ff84:	1000366c 	.word	0x1000366c

0000ff88 <dmSecHciHandler>:
    ff88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ff8a:	4605      	mov	r5, r0
    ff8c:	8800      	ldrh	r0, [r0, #0]
    ff8e:	f7ff f864 	bl	f05a <dmConnCcbByHandle>
    ff92:	4604      	mov	r4, r0
    ff94:	b1c0      	cbz	r0, ffc8 <dmSecHciHandler+0x40>
    ff96:	78ab      	ldrb	r3, [r5, #2]
    ff98:	2b10      	cmp	r3, #16
    ff9a:	d127      	bne.n	ffec <dmSecHciHandler+0x64>
    ff9c:	89eb      	ldrh	r3, [r5, #14]
    ff9e:	b9ab      	cbnz	r3, ffcc <dmSecHciHandler+0x44>
    ffa0:	2208      	movs	r2, #8
    ffa2:	4926      	ldr	r1, [pc, #152]	; (1003c <dmSecHciHandler+0xb4>)
    ffa4:	1da8      	adds	r0, r5, #6
    ffa6:	f7fc f8ab 	bl	c100 <memcmp>
    ffaa:	4606      	mov	r6, r0
    ffac:	b970      	cbnz	r0, ffcc <dmSecHciHandler+0x44>
    ffae:	4669      	mov	r1, sp
    ffb0:	7c20      	ldrb	r0, [r4, #16]
    ffb2:	f000 fda3 	bl	10afc <SmpDmGetStk>
    ffb6:	4601      	mov	r1, r0
    ffb8:	b140      	cbz	r0, ffcc <dmSecHciHandler+0x44>
    ffba:	f89d 3000 	ldrb.w	r3, [sp]
    ffbe:	7623      	strb	r3, [r4, #24]
    ffc0:	74a6      	strb	r6, [r4, #18]
    ffc2:	8828      	ldrh	r0, [r5, #0]
    ffc4:	f004 f927 	bl	14216 <HciLeLtkReqReplCmd>
    ffc8:	b002      	add	sp, #8
    ffca:	bd70      	pop	{r4, r5, r6, pc}
    ffcc:	7c20      	ldrb	r0, [r4, #16]
    ffce:	2201      	movs	r2, #1
    ffd0:	2102      	movs	r1, #2
    ffd2:	f7ff fba9 	bl	f728 <DmConnSetIdle>
    ffd6:	2301      	movs	r3, #1
    ffd8:	74a3      	strb	r3, [r4, #18]
    ffda:	7c23      	ldrb	r3, [r4, #16]
    ffdc:	802b      	strh	r3, [r5, #0]
    ffde:	2330      	movs	r3, #48	; 0x30
    ffe0:	70ab      	strb	r3, [r5, #2]
    ffe2:	4b17      	ldr	r3, [pc, #92]	; (10040 <dmSecHciHandler+0xb8>)
    ffe4:	4628      	mov	r0, r5
    ffe6:	689b      	ldr	r3, [r3, #8]
    ffe8:	4798      	blx	r3
    ffea:	e7ed      	b.n	ffc8 <dmSecHciHandler+0x40>
    ffec:	3b0e      	subs	r3, #14
    ffee:	2b01      	cmp	r3, #1
    fff0:	d8ea      	bhi.n	ffc8 <dmSecHciHandler+0x40>
    fff2:	2200      	movs	r2, #0
    fff4:	2102      	movs	r1, #2
    fff6:	7c00      	ldrb	r0, [r0, #16]
    fff8:	f7ff fb96 	bl	f728 <DmConnSetIdle>
    fffc:	7c23      	ldrb	r3, [r4, #16]
    fffe:	f8ad 3000 	strh.w	r3, [sp]
   10002:	78eb      	ldrb	r3, [r5, #3]
   10004:	f88d 3003 	strb.w	r3, [sp, #3]
   10008:	b9a3      	cbnz	r3, 10034 <dmSecHciHandler+0xac>
   1000a:	232c      	movs	r3, #44	; 0x2c
   1000c:	f88d 3002 	strb.w	r3, [sp, #2]
   10010:	7e23      	ldrb	r3, [r4, #24]
   10012:	75e3      	strb	r3, [r4, #23]
   10014:	7ca3      	ldrb	r3, [r4, #18]
   10016:	f88d 3004 	strb.w	r3, [sp, #4]
   1001a:	4668      	mov	r0, sp
   1001c:	f7ff ff9c 	bl	ff58 <DmSmpCbackExec>
   10020:	7c23      	ldrb	r3, [r4, #16]
   10022:	f8ad 3000 	strh.w	r3, [sp]
   10026:	4668      	mov	r0, sp
   10028:	78eb      	ldrb	r3, [r5, #3]
   1002a:	f88d 3003 	strb.w	r3, [sp, #3]
   1002e:	f000 fddf 	bl	10bf0 <SmpDmEncryptInd>
   10032:	e7c9      	b.n	ffc8 <dmSecHciHandler+0x40>
   10034:	232d      	movs	r3, #45	; 0x2d
   10036:	f88d 3002 	strb.w	r3, [sp, #2]
   1003a:	e7ee      	b.n	1001a <dmSecHciHandler+0x92>
   1003c:	00022b54 	.word	0x00022b54
   10040:	1000366c 	.word	0x1000366c

00010044 <DmSecCancelReq>:
   10044:	b538      	push	{r3, r4, r5, lr}
   10046:	4605      	mov	r5, r0
   10048:	2004      	movs	r0, #4
   1004a:	460c      	mov	r4, r1
   1004c:	f007 fd09 	bl	17a62 <WsfMsgAlloc>
   10050:	b138      	cbz	r0, 10062 <DmSecCancelReq+0x1e>
   10052:	2203      	movs	r2, #3
   10054:	7082      	strb	r2, [r0, #2]
   10056:	70c4      	strb	r4, [r0, #3]
   10058:	8005      	strh	r5, [r0, #0]
   1005a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1005e:	f000 bd44 	b.w	10aea <SmpDmMsgSend>
   10062:	bd38      	pop	{r3, r4, r5, pc}

00010064 <DmSecAuthRsp>:
   10064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10066:	4607      	mov	r7, r0
   10068:	2016      	movs	r0, #22
   1006a:	460e      	mov	r6, r1
   1006c:	4615      	mov	r5, r2
   1006e:	f007 fcf8 	bl	17a62 <WsfMsgAlloc>
   10072:	4604      	mov	r4, r0
   10074:	b170      	cbz	r0, 10094 <DmSecAuthRsp+0x30>
   10076:	2304      	movs	r3, #4
   10078:	7083      	strb	r3, [r0, #2]
   1007a:	8007      	strh	r7, [r0, #0]
   1007c:	7506      	strb	r6, [r0, #20]
   1007e:	b125      	cbz	r5, 1008a <DmSecAuthRsp+0x26>
   10080:	4632      	mov	r2, r6
   10082:	4629      	mov	r1, r5
   10084:	4418      	add	r0, r3
   10086:	f7fc f86b 	bl	c160 <memcpy>
   1008a:	4620      	mov	r0, r4
   1008c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10090:	f000 bd2b 	b.w	10aea <SmpDmMsgSend>
   10094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010096 <DmSecInit>:
   10096:	4b04      	ldr	r3, [pc, #16]	; (100a8 <DmSecInit+0x12>)
   10098:	4a04      	ldr	r2, [pc, #16]	; (100ac <DmSecInit+0x16>)
   1009a:	615a      	str	r2, [r3, #20]
   1009c:	4b04      	ldr	r3, [pc, #16]	; (100b0 <DmSecInit+0x1a>)
   1009e:	4a05      	ldr	r2, [pc, #20]	; (100b4 <DmSecInit+0x1e>)
   100a0:	e9c3 2200 	strd	r2, r2, [r3]
   100a4:	4770      	bx	lr
   100a6:	bf00      	nop
   100a8:	10002354 	.word	0x10002354
   100ac:	000220d8 	.word	0x000220d8
   100b0:	10003690 	.word	0x10003690
   100b4:	00022b54 	.word	0x00022b54

000100b8 <DmSecSetLocalCsrk>:
   100b8:	b510      	push	{r4, lr}
   100ba:	4604      	mov	r4, r0
   100bc:	f00a f994 	bl	1a3e8 <WsfTaskLock>
   100c0:	4b02      	ldr	r3, [pc, #8]	; (100cc <DmSecSetLocalCsrk+0x14>)
   100c2:	605c      	str	r4, [r3, #4]
   100c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100c8:	f00a b994 	b.w	1a3f4 <WsfTaskUnlock>
   100cc:	10003690 	.word	0x10003690

000100d0 <DmSecSetLocalIrk>:
   100d0:	b510      	push	{r4, lr}
   100d2:	4604      	mov	r4, r0
   100d4:	f00a f988 	bl	1a3e8 <WsfTaskLock>
   100d8:	4b02      	ldr	r3, [pc, #8]	; (100e4 <DmSecSetLocalIrk+0x14>)
   100da:	601c      	str	r4, [r3, #0]
   100dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100e0:	f00a b988 	b.w	1a3f4 <WsfTaskUnlock>
   100e4:	10003690 	.word	0x10003690

000100e8 <DmSecGetLocalCsrk>:
   100e8:	4b01      	ldr	r3, [pc, #4]	; (100f0 <DmSecGetLocalCsrk+0x8>)
   100ea:	6858      	ldr	r0, [r3, #4]
   100ec:	4770      	bx	lr
   100ee:	bf00      	nop
   100f0:	10003690 	.word	0x10003690

000100f4 <DmSecGetLocalIrk>:
   100f4:	4b01      	ldr	r3, [pc, #4]	; (100fc <DmSecGetLocalIrk+0x8>)
   100f6:	6818      	ldr	r0, [r3, #0]
   100f8:	4770      	bx	lr
   100fa:	bf00      	nop
   100fc:	10003690 	.word	0x10003690

00010100 <dmSecLescMsgHandler>:
   10100:	7883      	ldrb	r3, [r0, #2]
   10102:	2b81      	cmp	r3, #129	; 0x81
   10104:	b570      	push	{r4, r5, r6, lr}
   10106:	4604      	mov	r4, r0
   10108:	d106      	bne.n	10118 <dmSecLescMsgHandler+0x18>
   1010a:	2334      	movs	r3, #52	; 0x34
   1010c:	7083      	strb	r3, [r0, #2]
   1010e:	4b0d      	ldr	r3, [pc, #52]	; (10144 <dmSecLescMsgHandler+0x44>)
   10110:	689b      	ldr	r3, [r3, #8]
   10112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10116:	4718      	bx	r3
   10118:	2b80      	cmp	r3, #128	; 0x80
   1011a:	d112      	bne.n	10142 <dmSecLescMsgHandler+0x42>
   1011c:	2333      	movs	r3, #51	; 0x33
   1011e:	4d0a      	ldr	r5, [pc, #40]	; (10148 <dmSecLescMsgHandler+0x48>)
   10120:	7083      	strb	r3, [r0, #2]
   10122:	6841      	ldr	r1, [r0, #4]
   10124:	3004      	adds	r0, #4
   10126:	f008 fbaa 	bl	1887e <Calc128Cpy>
   1012a:	6829      	ldr	r1, [r5, #0]
   1012c:	f104 0014 	add.w	r0, r4, #20
   10130:	f008 fba5 	bl	1887e <Calc128Cpy>
   10134:	6828      	ldr	r0, [r5, #0]
   10136:	f007 fc45 	bl	179c4 <WsfBufFree>
   1013a:	4b02      	ldr	r3, [pc, #8]	; (10144 <dmSecLescMsgHandler+0x44>)
   1013c:	4620      	mov	r0, r4
   1013e:	689b      	ldr	r3, [r3, #8]
   10140:	e7e7      	b.n	10112 <dmSecLescMsgHandler+0x12>
   10142:	bd70      	pop	{r4, r5, r6, pc}
   10144:	1000366c 	.word	0x1000366c
   10148:	10003698 	.word	0x10003698

0001014c <DmSecKeypressReq>:
   1014c:	b538      	push	{r3, r4, r5, lr}
   1014e:	4604      	mov	r4, r0
   10150:	2006      	movs	r0, #6
   10152:	460d      	mov	r5, r1
   10154:	f007 fc85 	bl	17a62 <WsfMsgAlloc>
   10158:	b138      	cbz	r0, 1016a <DmSecKeypressReq+0x1e>
   1015a:	2216      	movs	r2, #22
   1015c:	7105      	strb	r5, [r0, #4]
   1015e:	7082      	strb	r2, [r0, #2]
   10160:	8004      	strh	r4, [r0, #0]
   10162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10166:	f000 bcc0 	b.w	10aea <SmpDmMsgSend>
   1016a:	bd38      	pop	{r3, r4, r5, pc}

0001016c <DmSecSetOob>:
   1016c:	f000 bef9 	b.w	10f62 <SmpScSetOobCfg>

00010170 <DmSecCalcOobReq>:
   10170:	b5f0      	push	{r4, r5, r6, r7, lr}
   10172:	4605      	mov	r5, r0
   10174:	b08d      	sub	sp, #52	; 0x34
   10176:	2010      	movs	r0, #16
   10178:	460e      	mov	r6, r1
   1017a:	f007 fbe9 	bl	17950 <WsfBufAlloc>
   1017e:	4c1a      	ldr	r4, [pc, #104]	; (101e8 <DmSecCalcOobReq+0x78>)
   10180:	4f1a      	ldr	r7, [pc, #104]	; (101ec <DmSecCalcOobReq+0x7c>)
   10182:	6020      	str	r0, [r4, #0]
   10184:	b308      	cbz	r0, 101ca <DmSecCalcOobReq+0x5a>
   10186:	4629      	mov	r1, r5
   10188:	f008 fb79 	bl	1887e <Calc128Cpy>
   1018c:	2041      	movs	r0, #65	; 0x41
   1018e:	f007 fbdf 	bl	17950 <WsfBufAlloc>
   10192:	4605      	mov	r5, r0
   10194:	b1b0      	cbz	r0, 101c4 <DmSecCalcOobReq+0x54>
   10196:	2220      	movs	r2, #32
   10198:	4631      	mov	r1, r6
   1019a:	f000 fdff 	bl	10d9c <SmpScCat>
   1019e:	2220      	movs	r2, #32
   101a0:	4631      	mov	r1, r6
   101a2:	f000 fdfb 	bl	10d9c <SmpScCat>
   101a6:	2200      	movs	r2, #0
   101a8:	7002      	strb	r2, [r0, #0]
   101aa:	2180      	movs	r1, #128	; 0x80
   101ac:	7b3b      	ldrb	r3, [r7, #12]
   101ae:	6820      	ldr	r0, [r4, #0]
   101b0:	e9cd 2100 	strd	r2, r1, [sp]
   101b4:	2241      	movs	r2, #65	; 0x41
   101b6:	4629      	mov	r1, r5
   101b8:	f008 fdee 	bl	18d98 <SecCmac>
   101bc:	b988      	cbnz	r0, 101e2 <DmSecCalcOobReq+0x72>
   101be:	4628      	mov	r0, r5
   101c0:	f007 fc00 	bl	179c4 <WsfBufFree>
   101c4:	6820      	ldr	r0, [r4, #0]
   101c6:	f007 fbfd 	bl	179c4 <WsfBufFree>
   101ca:	2224      	movs	r2, #36	; 0x24
   101cc:	2100      	movs	r1, #0
   101ce:	a803      	add	r0, sp, #12
   101d0:	f7fc f8c4 	bl	c35c <memset>
   101d4:	f240 7333 	movw	r3, #1843	; 0x733
   101d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   101dc:	a803      	add	r0, sp, #12
   101de:	68bb      	ldr	r3, [r7, #8]
   101e0:	4798      	blx	r3
   101e2:	b00d      	add	sp, #52	; 0x34
   101e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101e6:	bf00      	nop
   101e8:	10003698 	.word	0x10003698
   101ec:	1000366c 	.word	0x1000366c

000101f0 <DmSecGenerateEccKeyReq>:
   101f0:	4b02      	ldr	r3, [pc, #8]	; (101fc <DmSecGenerateEccKeyReq+0xc>)
   101f2:	2281      	movs	r2, #129	; 0x81
   101f4:	2100      	movs	r1, #0
   101f6:	7b18      	ldrb	r0, [r3, #12]
   101f8:	f008 be80 	b.w	18efc <SecEccGenKey>
   101fc:	1000366c 	.word	0x1000366c

00010200 <DmSecSetDebugEccKey>:
   10200:	b5f0      	push	{r4, r5, r6, r7, lr}
   10202:	4b24      	ldr	r3, [pc, #144]	; (10294 <DmSecSetDebugEccKey+0x94>)
   10204:	b099      	sub	sp, #100	; 0x64
   10206:	466a      	mov	r2, sp
   10208:	f103 0620 	add.w	r6, r3, #32
   1020c:	4615      	mov	r5, r2
   1020e:	6818      	ldr	r0, [r3, #0]
   10210:	6859      	ldr	r1, [r3, #4]
   10212:	4614      	mov	r4, r2
   10214:	c403      	stmia	r4!, {r0, r1}
   10216:	3308      	adds	r3, #8
   10218:	42b3      	cmp	r3, r6
   1021a:	4622      	mov	r2, r4
   1021c:	d1f7      	bne.n	1020e <DmSecSetDebugEccKey+0xe>
   1021e:	4b1e      	ldr	r3, [pc, #120]	; (10298 <DmSecSetDebugEccKey+0x98>)
   10220:	ac08      	add	r4, sp, #32
   10222:	f103 0720 	add.w	r7, r3, #32
   10226:	4622      	mov	r2, r4
   10228:	6818      	ldr	r0, [r3, #0]
   1022a:	6859      	ldr	r1, [r3, #4]
   1022c:	4626      	mov	r6, r4
   1022e:	c603      	stmia	r6!, {r0, r1}
   10230:	3308      	adds	r3, #8
   10232:	42bb      	cmp	r3, r7
   10234:	4634      	mov	r4, r6
   10236:	d1f7      	bne.n	10228 <DmSecSetDebugEccKey+0x28>
   10238:	4c18      	ldr	r4, [pc, #96]	; (1029c <DmSecSetDebugEccKey+0x9c>)
   1023a:	ae10      	add	r6, sp, #64	; 0x40
   1023c:	f104 0c20 	add.w	ip, r4, #32
   10240:	4633      	mov	r3, r6
   10242:	6820      	ldr	r0, [r4, #0]
   10244:	6861      	ldr	r1, [r4, #4]
   10246:	4637      	mov	r7, r6
   10248:	c703      	stmia	r7!, {r0, r1}
   1024a:	3408      	adds	r4, #8
   1024c:	4564      	cmp	r4, ip
   1024e:	463e      	mov	r6, r7
   10250:	d1f7      	bne.n	10242 <DmSecSetDebugEccKey+0x42>
   10252:	4e13      	ldr	r6, [pc, #76]	; (102a0 <DmSecSetDebugEccKey+0xa0>)
   10254:	462c      	mov	r4, r5
   10256:	cc03      	ldmia	r4!, {r0, r1}
   10258:	4294      	cmp	r4, r2
   1025a:	6030      	str	r0, [r6, #0]
   1025c:	6071      	str	r1, [r6, #4]
   1025e:	4625      	mov	r5, r4
   10260:	f106 0608 	add.w	r6, r6, #8
   10264:	d1f6      	bne.n	10254 <DmSecSetDebugEccKey+0x54>
   10266:	4d0f      	ldr	r5, [pc, #60]	; (102a4 <DmSecSetDebugEccKey+0xa4>)
   10268:	4614      	mov	r4, r2
   1026a:	cc03      	ldmia	r4!, {r0, r1}
   1026c:	429c      	cmp	r4, r3
   1026e:	6028      	str	r0, [r5, #0]
   10270:	6069      	str	r1, [r5, #4]
   10272:	4622      	mov	r2, r4
   10274:	f105 0508 	add.w	r5, r5, #8
   10278:	d1f6      	bne.n	10268 <DmSecSetDebugEccKey+0x68>
   1027a:	4c0b      	ldr	r4, [pc, #44]	; (102a8 <DmSecSetDebugEccKey+0xa8>)
   1027c:	ad18      	add	r5, sp, #96	; 0x60
   1027e:	461a      	mov	r2, r3
   10280:	ca03      	ldmia	r2!, {r0, r1}
   10282:	42aa      	cmp	r2, r5
   10284:	6020      	str	r0, [r4, #0]
   10286:	6061      	str	r1, [r4, #4]
   10288:	4613      	mov	r3, r2
   1028a:	f104 0408 	add.w	r4, r4, #8
   1028e:	d1f6      	bne.n	1027e <DmSecSetDebugEccKey+0x7e>
   10290:	b019      	add	sp, #100	; 0x64
   10292:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10294:	000220e4 	.word	0x000220e4
   10298:	00022104 	.word	0x00022104
   1029c:	00022124 	.word	0x00022124
   102a0:	100036dc 	.word	0x100036dc
   102a4:	1000369c 	.word	0x1000369c
   102a8:	100036bc 	.word	0x100036bc

000102ac <DmSecSetEccKey>:
   102ac:	b508      	push	{r3, lr}
   102ae:	4601      	mov	r1, r0
   102b0:	2260      	movs	r2, #96	; 0x60
   102b2:	4802      	ldr	r0, [pc, #8]	; (102bc <DmSecSetEccKey+0x10>)
   102b4:	f7fb ff54 	bl	c160 <memcpy>
   102b8:	bd08      	pop	{r3, pc}
   102ba:	bf00      	nop
   102bc:	1000369c 	.word	0x1000369c

000102c0 <DmSecGetEccKey>:
   102c0:	4800      	ldr	r0, [pc, #0]	; (102c4 <DmSecGetEccKey+0x4>)
   102c2:	4770      	bx	lr
   102c4:	1000369c 	.word	0x1000369c

000102c8 <DmSecCompareRsp>:
   102c8:	b538      	push	{r3, r4, r5, lr}
   102ca:	4605      	mov	r5, r0
   102cc:	2016      	movs	r0, #22
   102ce:	460c      	mov	r4, r1
   102d0:	f007 fbc7 	bl	17a62 <WsfMsgAlloc>
   102d4:	b158      	cbz	r0, 102ee <DmSecCompareRsp+0x26>
   102d6:	8005      	strh	r5, [r0, #0]
   102d8:	b12c      	cbz	r4, 102e6 <DmSecCompareRsp+0x1e>
   102da:	2315      	movs	r3, #21
   102dc:	7083      	strb	r3, [r0, #2]
   102de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   102e2:	f000 bc02 	b.w	10aea <SmpDmMsgSend>
   102e6:	f240 4303 	movw	r3, #1027	; 0x403
   102ea:	8043      	strh	r3, [r0, #2]
   102ec:	e7f7      	b.n	102de <DmSecCompareRsp+0x16>
   102ee:	bd38      	pop	{r3, r4, r5, pc}

000102f0 <DmSecGetCompareValue>:
   102f0:	7b43      	ldrb	r3, [r0, #13]
   102f2:	7b82      	ldrb	r2, [r0, #14]
   102f4:	041b      	lsls	r3, r3, #16
   102f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   102fa:	7bc2      	ldrb	r2, [r0, #15]
   102fc:	7b00      	ldrb	r0, [r0, #12]
   102fe:	4413      	add	r3, r2
   10300:	4a03      	ldr	r2, [pc, #12]	; (10310 <DmSecGetCompareValue+0x20>)
   10302:	eb03 6300 	add.w	r3, r3, r0, lsl #24
   10306:	fbb3 f0f2 	udiv	r0, r3, r2
   1030a:	fb02 3010 	mls	r0, r2, r0, r3
   1030e:	4770      	bx	lr
   10310:	000f4240 	.word	0x000f4240

00010314 <DmSecLescInit>:
   10314:	4b01      	ldr	r3, [pc, #4]	; (1031c <DmSecLescInit+0x8>)
   10316:	4a02      	ldr	r2, [pc, #8]	; (10320 <DmSecLescInit+0xc>)
   10318:	621a      	str	r2, [r3, #32]
   1031a:	4770      	bx	lr
   1031c:	10002354 	.word	0x10002354
   10320:	00022144 	.word	0x00022144

00010324 <DmSecPairRsp>:
   10324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10328:	4681      	mov	r9, r0
   1032a:	2008      	movs	r0, #8
   1032c:	4688      	mov	r8, r1
   1032e:	4617      	mov	r7, r2
   10330:	461e      	mov	r6, r3
   10332:	f89d 5020 	ldrb.w	r5, [sp, #32]
   10336:	f007 fb94 	bl	17a62 <WsfMsgAlloc>
   1033a:	b180      	cbz	r0, 1035e <DmSecPairRsp+0x3a>
   1033c:	2302      	movs	r3, #2
   1033e:	f006 0607 	and.w	r6, r6, #7
   10342:	f005 0507 	and.w	r5, r5, #7
   10346:	7083      	strb	r3, [r0, #2]
   10348:	f880 8004 	strb.w	r8, [r0, #4]
   1034c:	7147      	strb	r7, [r0, #5]
   1034e:	7186      	strb	r6, [r0, #6]
   10350:	71c5      	strb	r5, [r0, #7]
   10352:	f8a0 9000 	strh.w	r9, [r0]
   10356:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1035a:	f000 bbc6 	b.w	10aea <SmpDmMsgSend>
   1035e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010362 <DmSecSlaveReq>:
   10362:	b538      	push	{r3, r4, r5, lr}
   10364:	4605      	mov	r5, r0
   10366:	2006      	movs	r0, #6
   10368:	460c      	mov	r4, r1
   1036a:	f007 fb7a 	bl	17a62 <WsfMsgAlloc>
   1036e:	b138      	cbz	r0, 10380 <DmSecSlaveReq+0x1e>
   10370:	2205      	movs	r2, #5
   10372:	7082      	strb	r2, [r0, #2]
   10374:	7104      	strb	r4, [r0, #4]
   10376:	8005      	strh	r5, [r0, #0]
   10378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1037c:	f000 bbb5 	b.w	10aea <SmpDmMsgSend>
   10380:	bd38      	pop	{r3, r4, r5, pc}

00010382 <DmSecLtkRsp>:
   10382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10386:	4680      	mov	r8, r0
   10388:	2016      	movs	r0, #22
   1038a:	460d      	mov	r5, r1
   1038c:	4617      	mov	r7, r2
   1038e:	461e      	mov	r6, r3
   10390:	f007 fb67 	bl	17a62 <WsfMsgAlloc>
   10394:	4604      	mov	r4, r0
   10396:	b188      	cbz	r0, 103bc <DmSecLtkRsp+0x3a>
   10398:	2351      	movs	r3, #81	; 0x51
   1039a:	7083      	strb	r3, [r0, #2]
   1039c:	f8a0 8000 	strh.w	r8, [r0]
   103a0:	7505      	strb	r5, [r0, #20]
   103a2:	7547      	strb	r7, [r0, #21]
   103a4:	b11d      	cbz	r5, 103ae <DmSecLtkRsp+0x2c>
   103a6:	4631      	mov	r1, r6
   103a8:	3004      	adds	r0, #4
   103aa:	f008 fa68 	bl	1887e <Calc128Cpy>
   103ae:	4b04      	ldr	r3, [pc, #16]	; (103c0 <DmSecLtkRsp+0x3e>)
   103b0:	4621      	mov	r1, r4
   103b2:	7b18      	ldrb	r0, [r3, #12]
   103b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   103b8:	f007 bb77 	b.w	17aaa <WsfMsgSend>
   103bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103c0:	1000366c 	.word	0x1000366c

000103c4 <l2cDefaultDataCback>:
   103c4:	4770      	bx	lr

000103c6 <l2cDefaultDataCidCback>:
   103c6:	4770      	bx	lr

000103c8 <l2cDefaultCtrlCback>:
   103c8:	4770      	bx	lr

000103ca <l2cHciFlowCback>:
   103ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   103cc:	460d      	mov	r5, r1
   103ce:	f7ff f949 	bl	f664 <DmConnIdByHandle>
   103d2:	b280      	uxth	r0, r0
   103d4:	f8ad 0004 	strh.w	r0, [sp, #4]
   103d8:	b178      	cbz	r0, 103fa <l2cHciFlowCback+0x30>
   103da:	4c09      	ldr	r4, [pc, #36]	; (10400 <l2cHciFlowCback+0x36>)
   103dc:	f88d 5006 	strb.w	r5, [sp, #6]
   103e0:	68e3      	ldr	r3, [r4, #12]
   103e2:	a801      	add	r0, sp, #4
   103e4:	4798      	blx	r3
   103e6:	6923      	ldr	r3, [r4, #16]
   103e8:	f88d 5006 	strb.w	r5, [sp, #6]
   103ec:	a801      	add	r0, sp, #4
   103ee:	4798      	blx	r3
   103f0:	f88d 5006 	strb.w	r5, [sp, #6]
   103f4:	6963      	ldr	r3, [r4, #20]
   103f6:	a801      	add	r0, sp, #4
   103f8:	4798      	blx	r3
   103fa:	b003      	add	sp, #12
   103fc:	bd30      	pop	{r4, r5, pc}
   103fe:	bf00      	nop
   10400:	100036fc 	.word	0x100036fc

00010404 <l2cHciAclCback>:
   10404:	b570      	push	{r4, r5, r6, lr}
   10406:	78c2      	ldrb	r2, [r0, #3]
   10408:	7883      	ldrb	r3, [r0, #2]
   1040a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1040e:	b29b      	uxth	r3, r3
   10410:	2b03      	cmp	r3, #3
   10412:	bf83      	ittte	hi
   10414:	7942      	ldrbhi	r2, [r0, #5]
   10416:	7901      	ldrbhi	r1, [r0, #4]
   10418:	eb01 2102 	addhi.w	r1, r1, r2, lsl #8
   1041c:	2100      	movls	r1, #0
   1041e:	bf8a      	itet	hi
   10420:	b289      	uxthhi	r1, r1
   10422:	1d02      	addls	r2, r0, #4
   10424:	1d82      	addhi	r2, r0, #6
   10426:	4604      	mov	r4, r0
   10428:	1d08      	adds	r0, r1, #4
   1042a:	4283      	cmp	r3, r0
   1042c:	d116      	bne.n	1045c <l2cHciAclCback+0x58>
   1042e:	7863      	ldrb	r3, [r4, #1]
   10430:	7820      	ldrb	r0, [r4, #0]
   10432:	7815      	ldrb	r5, [r2, #0]
   10434:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   10438:	7853      	ldrb	r3, [r2, #1]
   1043a:	eb05 2503 	add.w	r5, r5, r3, lsl #8
   1043e:	b2ad      	uxth	r5, r5
   10440:	2d05      	cmp	r5, #5
   10442:	f3c0 000b 	ubfx	r0, r0, #0, #12
   10446:	4b0c      	ldr	r3, [pc, #48]	; (10478 <l2cHciAclCback+0x74>)
   10448:	d005      	beq.n	10456 <l2cHciAclCback+0x52>
   1044a:	2d06      	cmp	r5, #6
   1044c:	d00b      	beq.n	10466 <l2cHciAclCback+0x62>
   1044e:	2d04      	cmp	r5, #4
   10450:	d10b      	bne.n	1046a <l2cHciAclCback+0x66>
   10452:	681b      	ldr	r3, [r3, #0]
   10454:	e000      	b.n	10458 <l2cHciAclCback+0x54>
   10456:	689b      	ldr	r3, [r3, #8]
   10458:	4622      	mov	r2, r4
   1045a:	4798      	blx	r3
   1045c:	4620      	mov	r0, r4
   1045e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10462:	f007 bb15 	b.w	17a90 <WsfMsgFree>
   10466:	685b      	ldr	r3, [r3, #4]
   10468:	e7f6      	b.n	10458 <l2cHciAclCback+0x54>
   1046a:	6a1e      	ldr	r6, [r3, #32]
   1046c:	460a      	mov	r2, r1
   1046e:	4623      	mov	r3, r4
   10470:	4629      	mov	r1, r5
   10472:	47b0      	blx	r6
   10474:	e7f2      	b.n	1045c <l2cHciAclCback+0x58>
   10476:	bf00      	nop
   10478:	100036fc 	.word	0x100036fc

0001047c <l2cRxSignalingPkt>:
   1047c:	b570      	push	{r4, r5, r6, lr}
   1047e:	460d      	mov	r5, r1
   10480:	4616      	mov	r6, r2
   10482:	4604      	mov	r4, r0
   10484:	f7ff f8ee 	bl	f664 <DmConnIdByHandle>
   10488:	f7ff f978 	bl	f77c <DmConnRole>
   1048c:	b940      	cbnz	r0, 104a0 <l2cRxSignalingPkt+0x24>
   1048e:	4b07      	ldr	r3, [pc, #28]	; (104ac <l2cRxSignalingPkt+0x30>)
   10490:	699b      	ldr	r3, [r3, #24]
   10492:	b153      	cbz	r3, 104aa <l2cRxSignalingPkt+0x2e>
   10494:	4632      	mov	r2, r6
   10496:	4629      	mov	r1, r5
   10498:	4620      	mov	r0, r4
   1049a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1049e:	4718      	bx	r3
   104a0:	2801      	cmp	r0, #1
   104a2:	d102      	bne.n	104aa <l2cRxSignalingPkt+0x2e>
   104a4:	4b01      	ldr	r3, [pc, #4]	; (104ac <l2cRxSignalingPkt+0x30>)
   104a6:	69db      	ldr	r3, [r3, #28]
   104a8:	e7f3      	b.n	10492 <l2cRxSignalingPkt+0x16>
   104aa:	bd70      	pop	{r4, r5, r6, pc}
   104ac:	100036fc 	.word	0x100036fc

000104b0 <l2cMsgAlloc>:
   104b0:	2100      	movs	r1, #0
   104b2:	f007 bac1 	b.w	17a38 <WsfMsgDataAlloc>

000104b6 <L2cInit>:
   104b6:	4b09      	ldr	r3, [pc, #36]	; (104dc <L2cInit+0x26>)
   104b8:	4a09      	ldr	r2, [pc, #36]	; (104e0 <L2cInit+0x2a>)
   104ba:	490a      	ldr	r1, [pc, #40]	; (104e4 <L2cInit+0x2e>)
   104bc:	480a      	ldr	r0, [pc, #40]	; (104e8 <L2cInit+0x32>)
   104be:	e9c3 2200 	strd	r2, r2, [r3]
   104c2:	4a0a      	ldr	r2, [pc, #40]	; (104ec <L2cInit+0x36>)
   104c4:	609a      	str	r2, [r3, #8]
   104c6:	4a0a      	ldr	r2, [pc, #40]	; (104f0 <L2cInit+0x3a>)
   104c8:	615a      	str	r2, [r3, #20]
   104ca:	e9c3 2203 	strd	r2, r2, [r3, #12]
   104ce:	4a09      	ldr	r2, [pc, #36]	; (104f4 <L2cInit+0x3e>)
   104d0:	621a      	str	r2, [r3, #32]
   104d2:	2201      	movs	r2, #1
   104d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   104d8:	f007 b956 	b.w	17788 <HciAclRegister>
   104dc:	100036fc 	.word	0x100036fc
   104e0:	000103c5 	.word	0x000103c5
   104e4:	000103cb 	.word	0x000103cb
   104e8:	00010405 	.word	0x00010405
   104ec:	0001047d 	.word	0x0001047d
   104f0:	000103c9 	.word	0x000103c9
   104f4:	000103c7 	.word	0x000103c7

000104f8 <L2cRegister>:
   104f8:	4b03      	ldr	r3, [pc, #12]	; (10508 <L2cRegister+0x10>)
   104fa:	2804      	cmp	r0, #4
   104fc:	bf07      	ittee	eq
   104fe:	6019      	streq	r1, [r3, #0]
   10500:	60da      	streq	r2, [r3, #12]
   10502:	6059      	strne	r1, [r3, #4]
   10504:	611a      	strne	r2, [r3, #16]
   10506:	4770      	bx	lr
   10508:	100036fc 	.word	0x100036fc

0001050c <L2cDataReq>:
   1050c:	b410      	push	{r4}
   1050e:	7019      	strb	r1, [r3, #0]
   10510:	b2d4      	uxtb	r4, r2
   10512:	0a09      	lsrs	r1, r1, #8
   10514:	7059      	strb	r1, [r3, #1]
   10516:	1d21      	adds	r1, r4, #4
   10518:	7099      	strb	r1, [r3, #2]
   1051a:	1d11      	adds	r1, r2, #4
   1051c:	1209      	asrs	r1, r1, #8
   1051e:	0a12      	lsrs	r2, r2, #8
   10520:	7198      	strb	r0, [r3, #6]
   10522:	0a00      	lsrs	r0, r0, #8
   10524:	711c      	strb	r4, [r3, #4]
   10526:	71d8      	strb	r0, [r3, #7]
   10528:	70d9      	strb	r1, [r3, #3]
   1052a:	715a      	strb	r2, [r3, #5]
   1052c:	4618      	mov	r0, r3
   1052e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10532:	f004 be7b 	b.w	1522c <HciSendAclData>

00010536 <l2cSendCmdReject>:
   10536:	b570      	push	{r4, r5, r6, lr}
   10538:	4605      	mov	r5, r0
   1053a:	200e      	movs	r0, #14
   1053c:	460e      	mov	r6, r1
   1053e:	4614      	mov	r4, r2
   10540:	f7ff ffb6 	bl	104b0 <l2cMsgAlloc>
   10544:	4603      	mov	r3, r0
   10546:	b180      	cbz	r0, 1056a <l2cSendCmdReject+0x34>
   10548:	2201      	movs	r2, #1
   1054a:	7202      	strb	r2, [r0, #8]
   1054c:	2202      	movs	r2, #2
   1054e:	7282      	strb	r2, [r0, #10]
   10550:	7304      	strb	r4, [r0, #12]
   10552:	2200      	movs	r2, #0
   10554:	0a24      	lsrs	r4, r4, #8
   10556:	72c2      	strb	r2, [r0, #11]
   10558:	7246      	strb	r6, [r0, #9]
   1055a:	7344      	strb	r4, [r0, #13]
   1055c:	4629      	mov	r1, r5
   1055e:	2206      	movs	r2, #6
   10560:	2005      	movs	r0, #5
   10562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10566:	f7ff bfd1 	b.w	1050c <L2cDataReq>
   1056a:	bd70      	pop	{r4, r5, r6, pc}

0001056c <l2cSlaveRxSignalingPkt>:
   1056c:	b538      	push	{r3, r4, r5, lr}
   1056e:	4605      	mov	r5, r0
   10570:	4613      	mov	r3, r2
   10572:	7ad0      	ldrb	r0, [r2, #11]
   10574:	7a92      	ldrb	r2, [r2, #10]
   10576:	eb02 2200 	add.w	r2, r2, r0, lsl #8
   1057a:	b292      	uxth	r2, r2
   1057c:	1d10      	adds	r0, r2, #4
   1057e:	4281      	cmp	r1, r0
   10580:	d116      	bne.n	105b0 <l2cSlaveRxSignalingPkt+0x44>
   10582:	7a19      	ldrb	r1, [r3, #8]
   10584:	2913      	cmp	r1, #19
   10586:	d10f      	bne.n	105a8 <l2cSlaveRxSignalingPkt+0x3c>
   10588:	2a02      	cmp	r2, #2
   1058a:	d111      	bne.n	105b0 <l2cSlaveRxSignalingPkt+0x44>
   1058c:	7b5c      	ldrb	r4, [r3, #13]
   1058e:	7b19      	ldrb	r1, [r3, #12]
   10590:	eb01 2104 	add.w	r1, r1, r4, lsl #8
   10594:	b28c      	uxth	r4, r1
   10596:	480a      	ldr	r0, [pc, #40]	; (105c0 <l2cSlaveRxSignalingPkt+0x54>)
   10598:	f007 fc42 	bl	17e20 <WsfTimerStop>
   1059c:	4621      	mov	r1, r4
   1059e:	4628      	mov	r0, r5
   105a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   105a4:	f7ff b942 	b.w	f82c <DmL2cConnUpdateCnf>
   105a8:	2901      	cmp	r1, #1
   105aa:	d101      	bne.n	105b0 <l2cSlaveRxSignalingPkt+0x44>
   105ac:	460c      	mov	r4, r1
   105ae:	e7f2      	b.n	10596 <l2cSlaveRxSignalingPkt+0x2a>
   105b0:	7a59      	ldrb	r1, [r3, #9]
   105b2:	4628      	mov	r0, r5
   105b4:	2200      	movs	r2, #0
   105b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   105ba:	f7ff bfbc 	b.w	10536 <l2cSendCmdReject>
   105be:	bf00      	nop
   105c0:	10003724 	.word	0x10003724

000105c4 <L2cSlaveInit>:
   105c4:	4b01      	ldr	r3, [pc, #4]	; (105cc <L2cSlaveInit+0x8>)
   105c6:	4a02      	ldr	r2, [pc, #8]	; (105d0 <L2cSlaveInit+0xc>)
   105c8:	61da      	str	r2, [r3, #28]
   105ca:	4770      	bx	lr
   105cc:	100036fc 	.word	0x100036fc
   105d0:	0001056d 	.word	0x0001056d

000105d4 <L2cDmConnUpdateReq>:
   105d4:	b570      	push	{r4, r5, r6, lr}
   105d6:	4e1e      	ldr	r6, [pc, #120]	; (10650 <L2cDmConnUpdateReq+0x7c>)
   105d8:	4605      	mov	r5, r0
   105da:	460c      	mov	r4, r1
   105dc:	4630      	mov	r0, r6
   105de:	211e      	movs	r1, #30
   105e0:	f007 fbf8 	bl	17dd4 <WsfTimerStartSec>
   105e4:	2014      	movs	r0, #20
   105e6:	8175      	strh	r5, [r6, #10]
   105e8:	f7ff ff62 	bl	104b0 <l2cMsgAlloc>
   105ec:	4603      	mov	r3, r0
   105ee:	b368      	cbz	r0, 1064c <L2cDmConnUpdateReq+0x78>
   105f0:	4918      	ldr	r1, [pc, #96]	; (10654 <L2cDmConnUpdateReq+0x80>)
   105f2:	2212      	movs	r2, #18
   105f4:	7202      	strb	r2, [r0, #8]
   105f6:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   105fa:	7242      	strb	r2, [r0, #9]
   105fc:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
   10600:	2aff      	cmp	r2, #255	; 0xff
   10602:	bf1a      	itte	ne
   10604:	3201      	addne	r2, #1
   10606:	b2d2      	uxtbne	r2, r2
   10608:	2201      	moveq	r2, #1
   1060a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
   1060e:	2208      	movs	r2, #8
   10610:	7282      	strb	r2, [r0, #10]
   10612:	2200      	movs	r2, #0
   10614:	72c2      	strb	r2, [r0, #11]
   10616:	8822      	ldrh	r2, [r4, #0]
   10618:	7302      	strb	r2, [r0, #12]
   1061a:	8822      	ldrh	r2, [r4, #0]
   1061c:	0a12      	lsrs	r2, r2, #8
   1061e:	7342      	strb	r2, [r0, #13]
   10620:	8862      	ldrh	r2, [r4, #2]
   10622:	7382      	strb	r2, [r0, #14]
   10624:	8862      	ldrh	r2, [r4, #2]
   10626:	0a12      	lsrs	r2, r2, #8
   10628:	73c2      	strb	r2, [r0, #15]
   1062a:	88a2      	ldrh	r2, [r4, #4]
   1062c:	7402      	strb	r2, [r0, #16]
   1062e:	88a2      	ldrh	r2, [r4, #4]
   10630:	0a12      	lsrs	r2, r2, #8
   10632:	7442      	strb	r2, [r0, #17]
   10634:	88e2      	ldrh	r2, [r4, #6]
   10636:	7482      	strb	r2, [r0, #18]
   10638:	88e2      	ldrh	r2, [r4, #6]
   1063a:	0a12      	lsrs	r2, r2, #8
   1063c:	74c2      	strb	r2, [r0, #19]
   1063e:	4629      	mov	r1, r5
   10640:	220c      	movs	r2, #12
   10642:	2005      	movs	r0, #5
   10644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10648:	f7ff bf60 	b.w	1050c <L2cDataReq>
   1064c:	bd70      	pop	{r4, r5, r6, pc}
   1064e:	bf00      	nop
   10650:	10003724 	.word	0x10003724
   10654:	100036fc 	.word	0x100036fc

00010658 <L2cSlaveHandlerInit>:
   10658:	4b02      	ldr	r3, [pc, #8]	; (10664 <L2cSlaveHandlerInit+0xc>)
   1065a:	2201      	movs	r2, #1
   1065c:	731a      	strb	r2, [r3, #12]
   1065e:	7218      	strb	r0, [r3, #8]
   10660:	7418      	strb	r0, [r3, #16]
   10662:	4770      	bx	lr
   10664:	10003724 	.word	0x10003724

00010668 <L2cSlaveHandler>:
   10668:	460b      	mov	r3, r1
   1066a:	b129      	cbz	r1, 10678 <L2cSlaveHandler+0x10>
   1066c:	7889      	ldrb	r1, [r1, #2]
   1066e:	2901      	cmp	r1, #1
   10670:	d102      	bne.n	10678 <L2cSlaveHandler+0x10>
   10672:	8818      	ldrh	r0, [r3, #0]
   10674:	f7ff b8da 	b.w	f82c <DmL2cConnUpdateCnf>
   10678:	4770      	bx	lr
   1067a:	bf00      	nop

0001067c <smpDmConnCback>:
   1067c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1067e:	4605      	mov	r5, r0
   10680:	8803      	ldrh	r3, [r0, #0]
   10682:	78aa      	ldrb	r2, [r5, #2]
   10684:	4e23      	ldr	r6, [pc, #140]	; (10714 <smpDmConnCback+0x98>)
   10686:	b2d8      	uxtb	r0, r3
   10688:	2a27      	cmp	r2, #39	; 0x27
   1068a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   1068e:	d120      	bne.n	106d2 <smpDmConnCback+0x56>
   10690:	f7ff f874 	bl	f77c <DmConnRole>
   10694:	2338      	movs	r3, #56	; 0x38
   10696:	fb03 6304 	mla	r3, r3, r4, r6
   1069a:	b9a8      	cbnz	r0, 106c8 <smpDmConnCback+0x4c>
   1069c:	2201      	movs	r2, #1
   1069e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   106a2:	220b      	movs	r2, #11
   106a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   106a8:	2338      	movs	r3, #56	; 0x38
   106aa:	fb03 6404 	mla	r4, r3, r4, r6
   106ae:	88eb      	ldrh	r3, [r5, #6]
   106b0:	8523      	strh	r3, [r4, #40]	; 0x28
   106b2:	882b      	ldrh	r3, [r5, #0]
   106b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   106b8:	2300      	movs	r3, #0
   106ba:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   106be:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   106c2:	8663      	strh	r3, [r4, #50]	; 0x32
   106c4:	b002      	add	sp, #8
   106c6:	bd70      	pop	{r4, r5, r6, pc}
   106c8:	2200      	movs	r2, #0
   106ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
   106ce:	2201      	movs	r2, #1
   106d0:	e7e8      	b.n	106a4 <smpDmConnCback+0x28>
   106d2:	2138      	movs	r1, #56	; 0x38
   106d4:	fb01 6404 	mla	r4, r1, r4, r6
   106d8:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   106dc:	2900      	cmp	r1, #0
   106de:	d0f1      	beq.n	106c4 <smpDmConnCback+0x48>
   106e0:	2a28      	cmp	r2, #40	; 0x28
   106e2:	d1ef      	bne.n	106c4 <smpDmConnCback+0x48>
   106e4:	f8ad 3004 	strh.w	r3, [sp, #4]
   106e8:	230a      	movs	r3, #10
   106ea:	f88d 3006 	strb.w	r3, [sp, #6]
   106ee:	7a2b      	ldrb	r3, [r5, #8]
   106f0:	4620      	mov	r0, r4
   106f2:	3320      	adds	r3, #32
   106f4:	a901      	add	r1, sp, #4
   106f6:	f88d 3007 	strb.w	r3, [sp, #7]
   106fa:	f001 fb0a 	bl	11d12 <smpSmExecute>
   106fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10700:	2500      	movs	r5, #0
   10702:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
   10706:	2800      	cmp	r0, #0
   10708:	d0dc      	beq.n	106c4 <smpDmConnCback+0x48>
   1070a:	f007 f9c1 	bl	17a90 <WsfMsgFree>
   1070e:	6265      	str	r5, [r4, #36]	; 0x24
   10710:	e7d8      	b.n	106c4 <smpDmConnCback+0x48>
   10712:	bf00      	nop
   10714:	10003738 	.word	0x10003738

00010718 <smpCcbByHandle>:
   10718:	b508      	push	{r3, lr}
   1071a:	f7fe ffa3 	bl	f664 <DmConnIdByHandle>
   1071e:	b120      	cbz	r0, 1072a <smpCcbByHandle+0x12>
   10720:	4b02      	ldr	r3, [pc, #8]	; (1072c <smpCcbByHandle+0x14>)
   10722:	3801      	subs	r0, #1
   10724:	2238      	movs	r2, #56	; 0x38
   10726:	fb02 3000 	mla	r0, r2, r0, r3
   1072a:	bd08      	pop	{r3, pc}
   1072c:	10003738 	.word	0x10003738

00010730 <smpL2cDataCback>:
   10730:	b530      	push	{r4, r5, lr}
   10732:	b087      	sub	sp, #28
   10734:	460d      	mov	r5, r1
   10736:	4614      	mov	r4, r2
   10738:	f7ff ffee 	bl	10718 <smpCcbByHandle>
   1073c:	b1d8      	cbz	r0, 10776 <smpL2cDataCback+0x46>
   1073e:	7a23      	ldrb	r3, [r4, #8]
   10740:	1e5a      	subs	r2, r3, #1
   10742:	2a0d      	cmp	r2, #13
   10744:	d817      	bhi.n	10776 <smpL2cDataCback+0x46>
   10746:	4a10      	ldr	r2, [pc, #64]	; (10788 <smpL2cDataCback+0x58>)
   10748:	5cd2      	ldrb	r2, [r2, r3]
   1074a:	42aa      	cmp	r2, r5
   1074c:	d113      	bne.n	10776 <smpL2cDataCback+0x46>
   1074e:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
   10752:	429a      	cmp	r2, r3
   10754:	d011      	beq.n	1077a <smpL2cDataCback+0x4a>
   10756:	2b05      	cmp	r3, #5
   10758:	d10d      	bne.n	10776 <smpL2cDataCback+0x46>
   1075a:	2307      	movs	r3, #7
   1075c:	f88d 3002 	strb.w	r3, [sp, #2]
   10760:	7a63      	ldrb	r3, [r4, #9]
   10762:	f88d 3003 	strb.w	r3, [sp, #3]
   10766:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1076a:	f8ad 3000 	strh.w	r3, [sp]
   1076e:	4669      	mov	r1, sp
   10770:	9401      	str	r4, [sp, #4]
   10772:	f001 face 	bl	11d12 <smpSmExecute>
   10776:	b007      	add	sp, #28
   10778:	bd30      	pop	{r4, r5, pc}
   1077a:	2a05      	cmp	r2, #5
   1077c:	d0ed      	beq.n	1075a <smpL2cDataCback+0x2a>
   1077e:	2306      	movs	r3, #6
   10780:	f88d 3002 	strb.w	r3, [sp, #2]
   10784:	e7ef      	b.n	10766 <smpL2cDataCback+0x36>
   10786:	bf00      	nop
   10788:	00022150 	.word	0x00022150

0001078c <smpCcbByConnId>:
   1078c:	4b02      	ldr	r3, [pc, #8]	; (10798 <smpCcbByConnId+0xc>)
   1078e:	2238      	movs	r2, #56	; 0x38
   10790:	3801      	subs	r0, #1
   10792:	fb02 3000 	mla	r0, r2, r0, r3
   10796:	4770      	bx	lr
   10798:	10003738 	.word	0x10003738

0001079c <smpCalcC1Part1>:
   1079c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1079e:	4604      	mov	r4, r0
   107a0:	b089      	sub	sp, #36	; 0x24
   107a2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   107a6:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   107aa:	460f      	mov	r7, r1
   107ac:	4615      	mov	r5, r2
   107ae:	2b00      	cmp	r3, #0
   107b0:	d05a      	beq.n	10868 <smpCalcC1Part1+0xcc>
   107b2:	f7fe ffa5 	bl	f700 <DmConnLocalRpa>
   107b6:	f008 f848 	bl	1884a <BdaIsZeros>
   107ba:	2800      	cmp	r0, #0
   107bc:	d052      	beq.n	10864 <smpCalcC1Part1+0xc8>
   107be:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   107c2:	f7fe ff7f 	bl	f6c4 <DmConnLocalAddrType>
   107c6:	4606      	mov	r6, r0
   107c8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   107cc:	f7fe ff8e 	bl	f6ec <DmConnPeerRpa>
   107d0:	f008 f83b 	bl	1884a <BdaIsZeros>
   107d4:	2800      	cmp	r0, #0
   107d6:	d05f      	beq.n	10898 <smpCalcC1Part1+0xfc>
   107d8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   107dc:	f7fe ff60 	bl	f6a0 <DmConnPeerAddrType>
   107e0:	462b      	mov	r3, r5
   107e2:	f10d 0112 	add.w	r1, sp, #18
   107e6:	f813 2b02 	ldrb.w	r2, [r3], #2
   107ea:	4056      	eors	r6, r2
   107ec:	786a      	ldrb	r2, [r5, #1]
   107ee:	f88d 6010 	strb.w	r6, [sp, #16]
   107f2:	4050      	eors	r0, r2
   107f4:	f88d 0011 	strb.w	r0, [sp, #17]
   107f8:	f105 0609 	add.w	r6, r5, #9
   107fc:	f104 0010 	add.w	r0, r4, #16
   10800:	f813 cb01 	ldrb.w	ip, [r3], #1
   10804:	f810 2b01 	ldrb.w	r2, [r0], #1
   10808:	42b3      	cmp	r3, r6
   1080a:	ea82 020c 	eor.w	r2, r2, ip
   1080e:	f801 2b01 	strb.w	r2, [r1], #1
   10812:	d1f5      	bne.n	10800 <smpCalcC1Part1+0x64>
   10814:	f104 0017 	add.w	r0, r4, #23
   10818:	3510      	adds	r5, #16
   1081a:	f10d 0119 	add.w	r1, sp, #25
   1081e:	f813 6b01 	ldrb.w	r6, [r3], #1
   10822:	f810 2b01 	ldrb.w	r2, [r0], #1
   10826:	42ab      	cmp	r3, r5
   10828:	ea82 0206 	eor.w	r2, r2, r6
   1082c:	f801 2b01 	strb.w	r2, [r1], #1
   10830:	d1f5      	bne.n	1081e <smpCalcC1Part1+0x82>
   10832:	4a1a      	ldr	r2, [pc, #104]	; (1089c <smpCalcC1Part1+0x100>)
   10834:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10838:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   1083c:	210b      	movs	r1, #11
   1083e:	9100      	str	r1, [sp, #0]
   10840:	4638      	mov	r0, r7
   10842:	a904      	add	r1, sp, #16
   10844:	f008 f8d2 	bl	189ec <SecAes>
   10848:	28ff      	cmp	r0, #255	; 0xff
   1084a:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   1084e:	d107      	bne.n	10860 <smpCalcC1Part1+0xc4>
   10850:	f640 0303 	movw	r3, #2051	; 0x803
   10854:	a903      	add	r1, sp, #12
   10856:	4620      	mov	r0, r4
   10858:	f8ad 300e 	strh.w	r3, [sp, #14]
   1085c:	f001 fa59 	bl	11d12 <smpSmExecute>
   10860:	b009      	add	sp, #36	; 0x24
   10862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10864:	2601      	movs	r6, #1
   10866:	e7af      	b.n	107c8 <smpCalcC1Part1+0x2c>
   10868:	f7fe ff40 	bl	f6ec <DmConnPeerRpa>
   1086c:	f007 ffed 	bl	1884a <BdaIsZeros>
   10870:	b180      	cbz	r0, 10894 <smpCalcC1Part1+0xf8>
   10872:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10876:	f7fe ff13 	bl	f6a0 <DmConnPeerAddrType>
   1087a:	4606      	mov	r6, r0
   1087c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10880:	f7fe ff3e 	bl	f700 <DmConnLocalRpa>
   10884:	f007 ffe1 	bl	1884a <BdaIsZeros>
   10888:	b130      	cbz	r0, 10898 <smpCalcC1Part1+0xfc>
   1088a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1088e:	f7fe ff19 	bl	f6c4 <DmConnLocalAddrType>
   10892:	e7a5      	b.n	107e0 <smpCalcC1Part1+0x44>
   10894:	2601      	movs	r6, #1
   10896:	e7f1      	b.n	1087c <smpCalcC1Part1+0xe0>
   10898:	2001      	movs	r0, #1
   1089a:	e7a1      	b.n	107e0 <smpCalcC1Part1+0x44>
   1089c:	10003738 	.word	0x10003738

000108a0 <smpCalcC1Part2>:
   108a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108a4:	4604      	mov	r4, r0
   108a6:	b088      	sub	sp, #32
   108a8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   108ac:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   108b0:	4688      	mov	r8, r1
   108b2:	4615      	mov	r5, r2
   108b4:	2b00      	cmp	r3, #0
   108b6:	d058      	beq.n	1096a <smpCalcC1Part2+0xca>
   108b8:	f7fe ff22 	bl	f700 <DmConnLocalRpa>
   108bc:	4606      	mov	r6, r0
   108be:	f007 ffc4 	bl	1884a <BdaIsZeros>
   108c2:	b120      	cbz	r0, 108ce <smpCalcC1Part2+0x2e>
   108c4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   108c8:	f7fe ff06 	bl	f6d8 <DmConnLocalAddr>
   108cc:	4606      	mov	r6, r0
   108ce:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   108d2:	f7fe ff0b 	bl	f6ec <DmConnPeerRpa>
   108d6:	4607      	mov	r7, r0
   108d8:	f007 ffb7 	bl	1884a <BdaIsZeros>
   108dc:	b120      	cbz	r0, 108e8 <smpCalcC1Part2+0x48>
   108de:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   108e2:	f7fe fee7 	bl	f6b4 <DmConnPeerAddr>
   108e6:	4607      	mov	r7, r0
   108e8:	4628      	mov	r0, r5
   108ea:	2300      	movs	r3, #0
   108ec:	a904      	add	r1, sp, #16
   108ee:	f817 2b01 	ldrb.w	r2, [r7], #1
   108f2:	f810 cb01 	ldrb.w	ip, [r0], #1
   108f6:	ea82 020c 	eor.w	r2, r2, ip
   108fa:	545a      	strb	r2, [r3, r1]
   108fc:	3301      	adds	r3, #1
   108fe:	2b06      	cmp	r3, #6
   10900:	d1f5      	bne.n	108ee <smpCalcC1Part2+0x4e>
   10902:	1dab      	adds	r3, r5, #6
   10904:	f105 070c 	add.w	r7, r5, #12
   10908:	f10d 0016 	add.w	r0, sp, #22
   1090c:	f816 2b01 	ldrb.w	r2, [r6], #1
   10910:	f813 cb01 	ldrb.w	ip, [r3], #1
   10914:	ea82 020c 	eor.w	r2, r2, ip
   10918:	42bb      	cmp	r3, r7
   1091a:	f800 2b01 	strb.w	r2, [r0], #1
   1091e:	d1f5      	bne.n	1090c <smpCalcC1Part2+0x6c>
   10920:	7b2b      	ldrb	r3, [r5, #12]
   10922:	f88d 301c 	strb.w	r3, [sp, #28]
   10926:	7b6b      	ldrb	r3, [r5, #13]
   10928:	f88d 301d 	strb.w	r3, [sp, #29]
   1092c:	4a1b      	ldr	r2, [pc, #108]	; (1099c <smpCalcC1Part2+0xfc>)
   1092e:	7bab      	ldrb	r3, [r5, #14]
   10930:	f88d 301e 	strb.w	r3, [sp, #30]
   10934:	200b      	movs	r0, #11
   10936:	7beb      	ldrb	r3, [r5, #15]
   10938:	f88d 301f 	strb.w	r3, [sp, #31]
   1093c:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   10940:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   10944:	9000      	str	r0, [sp, #0]
   10946:	4640      	mov	r0, r8
   10948:	f008 f850 	bl	189ec <SecAes>
   1094c:	28ff      	cmp	r0, #255	; 0xff
   1094e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   10952:	d107      	bne.n	10964 <smpCalcC1Part2+0xc4>
   10954:	f640 0303 	movw	r3, #2051	; 0x803
   10958:	a903      	add	r1, sp, #12
   1095a:	4620      	mov	r0, r4
   1095c:	f8ad 300e 	strh.w	r3, [sp, #14]
   10960:	f001 f9d7 	bl	11d12 <smpSmExecute>
   10964:	b008      	add	sp, #32
   10966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1096a:	f7fe febf 	bl	f6ec <DmConnPeerRpa>
   1096e:	4606      	mov	r6, r0
   10970:	f007 ff6b 	bl	1884a <BdaIsZeros>
   10974:	b120      	cbz	r0, 10980 <smpCalcC1Part2+0xe0>
   10976:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1097a:	f7fe fe9b 	bl	f6b4 <DmConnPeerAddr>
   1097e:	4606      	mov	r6, r0
   10980:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10984:	f7fe febc 	bl	f700 <DmConnLocalRpa>
   10988:	4607      	mov	r7, r0
   1098a:	f007 ff5e 	bl	1884a <BdaIsZeros>
   1098e:	2800      	cmp	r0, #0
   10990:	d0aa      	beq.n	108e8 <smpCalcC1Part2+0x48>
   10992:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   10996:	f7fe fe9f 	bl	f6d8 <DmConnLocalAddr>
   1099a:	e7a4      	b.n	108e6 <smpCalcC1Part2+0x46>
   1099c:	10003738 	.word	0x10003738

000109a0 <smpCalcS1>:
   109a0:	b570      	push	{r4, r5, r6, lr}
   109a2:	b088      	sub	sp, #32
   109a4:	4616      	mov	r6, r2
   109a6:	4604      	mov	r4, r0
   109a8:	460d      	mov	r5, r1
   109aa:	a804      	add	r0, sp, #16
   109ac:	4619      	mov	r1, r3
   109ae:	f007 ff74 	bl	1889a <Calc128Cpy64>
   109b2:	4631      	mov	r1, r6
   109b4:	a806      	add	r0, sp, #24
   109b6:	f007 ff70 	bl	1889a <Calc128Cpy64>
   109ba:	4a0c      	ldr	r2, [pc, #48]	; (109ec <smpCalcS1+0x4c>)
   109bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   109c0:	f892 21c8 	ldrb.w	r2, [r2, #456]	; 0x1c8
   109c4:	210b      	movs	r1, #11
   109c6:	9100      	str	r1, [sp, #0]
   109c8:	4628      	mov	r0, r5
   109ca:	a904      	add	r1, sp, #16
   109cc:	f008 f80e 	bl	189ec <SecAes>
   109d0:	28ff      	cmp	r0, #255	; 0xff
   109d2:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
   109d6:	d107      	bne.n	109e8 <smpCalcS1+0x48>
   109d8:	f640 0303 	movw	r3, #2051	; 0x803
   109dc:	a903      	add	r1, sp, #12
   109de:	4620      	mov	r0, r4
   109e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   109e4:	f001 f995 	bl	11d12 <smpSmExecute>
   109e8:	b008      	add	sp, #32
   109ea:	bd70      	pop	{r4, r5, r6, pc}
   109ec:	10003738 	.word	0x10003738

000109f0 <smpGenerateLtk>:
   109f0:	b570      	push	{r4, r5, r6, lr}
   109f2:	6a04      	ldr	r4, [r0, #32]
   109f4:	1d26      	adds	r6, r4, #4
   109f6:	4605      	mov	r5, r0
   109f8:	f894 1020 	ldrb.w	r1, [r4, #32]
   109fc:	4630      	mov	r0, r6
   109fe:	f008 fbbb 	bl	19178 <SecRand>
   10a02:	f894 0020 	ldrb.w	r0, [r4, #32]
   10a06:	2100      	movs	r1, #0
   10a08:	f1c0 0210 	rsb	r2, r0, #16
   10a0c:	4430      	add	r0, r6
   10a0e:	f7fb fca5 	bl	c35c <memset>
   10a12:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
   10a16:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   10a1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   10a1e:	4622      	mov	r2, r4
   10a20:	83a3      	strh	r3, [r4, #28]
   10a22:	f852 3f32 	ldr.w	r3, [r2, #50]!
   10a26:	6163      	str	r3, [r4, #20]
   10a28:	6853      	ldr	r3, [r2, #4]
   10a2a:	61a3      	str	r3, [r4, #24]
   10a2c:	2301      	movs	r3, #1
   10a2e:	77a3      	strb	r3, [r4, #30]
   10a30:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   10a34:	f013 0f04 	tst.w	r3, #4
   10a38:	bf14      	ite	ne
   10a3a:	2302      	movne	r3, #2
   10a3c:	2301      	moveq	r3, #1
   10a3e:	77e3      	strb	r3, [r4, #31]
   10a40:	232f      	movs	r3, #47	; 0x2f
   10a42:	70a3      	strb	r3, [r4, #2]
   10a44:	4620      	mov	r0, r4
   10a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10a4a:	f7ff ba85 	b.w	ff58 <DmSmpCbackExec>

00010a4e <smpSendPkt>:
   10a4e:	b570      	push	{r4, r5, r6, lr}
   10a50:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   10a54:	4604      	mov	r4, r0
   10a56:	460d      	mov	r5, r1
   10a58:	b12b      	cbz	r3, 10a66 <smpSendPkt+0x18>
   10a5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10a5c:	b108      	cbz	r0, 10a62 <smpSendPkt+0x14>
   10a5e:	f007 f817 	bl	17a90 <WsfMsgFree>
   10a62:	6265      	str	r5, [r4, #36]	; 0x24
   10a64:	bd70      	pop	{r4, r5, r6, pc}
   10a66:	7a0a      	ldrb	r2, [r1, #8]
   10a68:	460b      	mov	r3, r1
   10a6a:	4904      	ldr	r1, [pc, #16]	; (10a7c <smpSendPkt+0x2e>)
   10a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10a70:	5c8a      	ldrb	r2, [r1, r2]
   10a72:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   10a74:	2006      	movs	r0, #6
   10a76:	f7ff bd49 	b.w	1050c <L2cDataReq>
   10a7a:	bf00      	nop
   10a7c:	00022150 	.word	0x00022150

00010a80 <smpL2cCtrlCback>:
   10a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a82:	7805      	ldrb	r5, [r0, #0]
   10a84:	4f13      	ldr	r7, [pc, #76]	; (10ad4 <smpL2cCtrlCback+0x54>)
   10a86:	3d01      	subs	r5, #1
   10a88:	2438      	movs	r4, #56	; 0x38
   10a8a:	fb04 7405 	mla	r4, r4, r5, r7
   10a8e:	4606      	mov	r6, r0
   10a90:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   10a94:	b1e2      	cbz	r2, 10ad0 <smpL2cCtrlCback+0x50>
   10a96:	7883      	ldrb	r3, [r0, #2]
   10a98:	2b01      	cmp	r3, #1
   10a9a:	bf0c      	ite	eq
   10a9c:	2301      	moveq	r3, #1
   10a9e:	2300      	movne	r3, #0
   10aa0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   10aa4:	d014      	beq.n	10ad0 <smpL2cCtrlCback+0x50>
   10aa6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10aa8:	b121      	cbz	r1, 10ab4 <smpL2cCtrlCback+0x34>
   10aaa:	2300      	movs	r3, #0
   10aac:	6263      	str	r3, [r4, #36]	; 0x24
   10aae:	4620      	mov	r0, r4
   10ab0:	f7ff ffcd 	bl	10a4e <smpSendPkt>
   10ab4:	2338      	movs	r3, #56	; 0x38
   10ab6:	fb03 7505 	mla	r5, r3, r5, r7
   10aba:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   10abe:	b13b      	cbz	r3, 10ad0 <smpL2cCtrlCback+0x50>
   10ac0:	230c      	movs	r3, #12
   10ac2:	70b3      	strb	r3, [r6, #2]
   10ac4:	4631      	mov	r1, r6
   10ac6:	4620      	mov	r0, r4
   10ac8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10acc:	f001 b921 	b.w	11d12 <smpSmExecute>
   10ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ad2:	bf00      	nop
   10ad4:	10003738 	.word	0x10003738

00010ad8 <smpStateIdle>:
   10ad8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   10adc:	fab0 f080 	clz	r0, r0
   10ae0:	0940      	lsrs	r0, r0, #5
   10ae2:	4770      	bx	lr

00010ae4 <smpMsgAlloc>:
   10ae4:	2100      	movs	r1, #0
   10ae6:	f006 bfa7 	b.w	17a38 <WsfMsgDataAlloc>

00010aea <SmpDmMsgSend>:
   10aea:	4b03      	ldr	r3, [pc, #12]	; (10af8 <SmpDmMsgSend+0xe>)
   10aec:	4601      	mov	r1, r0
   10aee:	f893 01c8 	ldrb.w	r0, [r3, #456]	; 0x1c8
   10af2:	f006 bfda 	b.w	17aaa <WsfMsgSend>
   10af6:	bf00      	nop
   10af8:	10003738 	.word	0x10003738

00010afc <SmpDmGetStk>:
   10afc:	b530      	push	{r4, r5, lr}
   10afe:	4c12      	ldr	r4, [pc, #72]	; (10b48 <SmpDmGetStk+0x4c>)
   10b00:	f894 21d4 	ldrb.w	r2, [r4, #468]	; 0x1d4
   10b04:	3801      	subs	r0, #1
   10b06:	4623      	mov	r3, r4
   10b08:	b16a      	cbz	r2, 10b26 <SmpDmGetStk+0x2a>
   10b0a:	2238      	movs	r2, #56	; 0x38
   10b0c:	fb02 4200 	mla	r2, r2, r0, r4
   10b10:	6b54      	ldr	r4, [r2, #52]	; 0x34
   10b12:	7825      	ldrb	r5, [r4, #0]
   10b14:	b13d      	cbz	r5, 10b26 <SmpDmGetStk+0x2a>
   10b16:	6924      	ldr	r4, [r4, #16]
   10b18:	b12c      	cbz	r4, 10b26 <SmpDmGetStk+0x2a>
   10b1a:	2303      	movs	r3, #3
   10b1c:	700b      	strb	r3, [r1, #0]
   10b1e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   10b20:	6918      	ldr	r0, [r3, #16]
   10b22:	3010      	adds	r0, #16
   10b24:	bd30      	pop	{r4, r5, pc}
   10b26:	2238      	movs	r2, #56	; 0x38
   10b28:	fb02 3300 	mla	r3, r2, r0, r3
   10b2c:	6a18      	ldr	r0, [r3, #32]
   10b2e:	2800      	cmp	r0, #0
   10b30:	d0f8      	beq.n	10b24 <SmpDmGetStk+0x28>
   10b32:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
   10b36:	f012 0f04 	tst.w	r2, #4
   10b3a:	bf14      	ite	ne
   10b3c:	2202      	movne	r2, #2
   10b3e:	2201      	moveq	r2, #1
   10b40:	700a      	strb	r2, [r1, #0]
   10b42:	6a18      	ldr	r0, [r3, #32]
   10b44:	3020      	adds	r0, #32
   10b46:	e7ed      	b.n	10b24 <SmpDmGetStk+0x28>
   10b48:	10003738 	.word	0x10003738

00010b4c <SmpDmGetLtk>:
   10b4c:	4a05      	ldr	r2, [pc, #20]	; (10b64 <SmpDmGetLtk+0x18>)
   10b4e:	1e43      	subs	r3, r0, #1
   10b50:	f892 01d4 	ldrb.w	r0, [r2, #468]	; 0x1d4
   10b54:	b128      	cbz	r0, 10b62 <SmpDmGetLtk+0x16>
   10b56:	2038      	movs	r0, #56	; 0x38
   10b58:	fb00 2003 	mla	r0, r0, r3, r2
   10b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10b5e:	6918      	ldr	r0, [r3, #16]
   10b60:	3010      	adds	r0, #16
   10b62:	4770      	bx	lr
   10b64:	10003738 	.word	0x10003738

00010b68 <SmpHandlerInit>:
   10b68:	b508      	push	{r3, lr}
   10b6a:	4b0d      	ldr	r3, [pc, #52]	; (10ba0 <SmpHandlerInit+0x38>)
   10b6c:	2201      	movs	r2, #1
   10b6e:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
   10b72:	3338      	adds	r3, #56	; 0x38
   10b74:	f823 2c2e 	strh.w	r2, [r3, #-46]
   10b78:	3201      	adds	r2, #1
   10b7a:	b292      	uxth	r2, r2
   10b7c:	2a09      	cmp	r2, #9
   10b7e:	f803 0c30 	strb.w	r0, [r3, #-48]
   10b82:	f103 0338 	add.w	r3, r3, #56	; 0x38
   10b86:	d1f5      	bne.n	10b74 <SmpHandlerInit+0xc>
   10b88:	4906      	ldr	r1, [pc, #24]	; (10ba4 <SmpHandlerInit+0x3c>)
   10b8a:	4a07      	ldr	r2, [pc, #28]	; (10ba8 <SmpHandlerInit+0x40>)
   10b8c:	2006      	movs	r0, #6
   10b8e:	f7ff fcb3 	bl	104f8 <L2cRegister>
   10b92:	4906      	ldr	r1, [pc, #24]	; (10bac <SmpHandlerInit+0x44>)
   10b94:	2001      	movs	r0, #1
   10b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10b9a:	f7fe bc4d 	b.w	f438 <DmConnRegister>
   10b9e:	bf00      	nop
   10ba0:	10003738 	.word	0x10003738
   10ba4:	00010731 	.word	0x00010731
   10ba8:	00010a81 	.word	0x00010a81
   10bac:	0001067d 	.word	0x0001067d

00010bb0 <SmpHandler>:
   10bb0:	b410      	push	{r4}
   10bb2:	b1b9      	cbz	r1, 10be4 <SmpHandler+0x34>
   10bb4:	780b      	ldrb	r3, [r1, #0]
   10bb6:	480d      	ldr	r0, [pc, #52]	; (10bec <SmpHandler+0x3c>)
   10bb8:	3b01      	subs	r3, #1
   10bba:	2238      	movs	r2, #56	; 0x38
   10bbc:	fb02 0203 	mla	r2, r2, r3, r0
   10bc0:	f892 402d 	ldrb.w	r4, [r2, #45]	; 0x2d
   10bc4:	b174      	cbz	r4, 10be4 <SmpHandler+0x34>
   10bc6:	788c      	ldrb	r4, [r1, #2]
   10bc8:	2c0b      	cmp	r4, #11
   10bca:	d104      	bne.n	10bd6 <SmpHandler+0x26>
   10bcc:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
   10bd0:	78ca      	ldrb	r2, [r1, #3]
   10bd2:	4294      	cmp	r4, r2
   10bd4:	d106      	bne.n	10be4 <SmpHandler+0x34>
   10bd6:	2238      	movs	r2, #56	; 0x38
   10bd8:	fb02 0003 	mla	r0, r2, r3, r0
   10bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
   10be0:	f001 b897 	b.w	11d12 <smpSmExecute>
   10be4:	f85d 4b04 	ldr.w	r4, [sp], #4
   10be8:	4770      	bx	lr
   10bea:	bf00      	nop
   10bec:	10003738 	.word	0x10003738

00010bf0 <SmpDmEncryptInd>:
   10bf0:	78c3      	ldrb	r3, [r0, #3]
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	bf0c      	ite	eq
   10bf6:	2308      	moveq	r3, #8
   10bf8:	2309      	movne	r3, #9
   10bfa:	4601      	mov	r1, r0
   10bfc:	7083      	strb	r3, [r0, #2]
   10bfe:	2000      	movs	r0, #0
   10c00:	f7ff bfd6 	b.w	10bb0 <SmpHandler>

00010c04 <SmpScAllocScratchBuffers>:
   10c04:	b538      	push	{r3, r4, r5, lr}
   10c06:	6b45      	ldr	r5, [r0, #52]	; 0x34
   10c08:	68eb      	ldr	r3, [r5, #12]
   10c0a:	4604      	mov	r4, r0
   10c0c:	b91b      	cbnz	r3, 10c16 <SmpScAllocScratchBuffers+0x12>
   10c0e:	2060      	movs	r0, #96	; 0x60
   10c10:	f006 fe9e 	bl	17950 <WsfBufAlloc>
   10c14:	60e8      	str	r0, [r5, #12]
   10c16:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10c18:	68ab      	ldr	r3, [r5, #8]
   10c1a:	b91b      	cbnz	r3, 10c24 <SmpScAllocScratchBuffers+0x20>
   10c1c:	2040      	movs	r0, #64	; 0x40
   10c1e:	f006 fe97 	bl	17950 <WsfBufAlloc>
   10c22:	60a8      	str	r0, [r5, #8]
   10c24:	6b65      	ldr	r5, [r4, #52]	; 0x34
   10c26:	692b      	ldr	r3, [r5, #16]
   10c28:	b91b      	cbnz	r3, 10c32 <SmpScAllocScratchBuffers+0x2e>
   10c2a:	2020      	movs	r0, #32
   10c2c:	f006 fe90 	bl	17950 <WsfBufAlloc>
   10c30:	6128      	str	r0, [r5, #16]
   10c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c34:	68d8      	ldr	r0, [r3, #12]
   10c36:	b128      	cbz	r0, 10c44 <SmpScAllocScratchBuffers+0x40>
   10c38:	6898      	ldr	r0, [r3, #8]
   10c3a:	b118      	cbz	r0, 10c44 <SmpScAllocScratchBuffers+0x40>
   10c3c:	6918      	ldr	r0, [r3, #16]
   10c3e:	3000      	adds	r0, #0
   10c40:	bf18      	it	ne
   10c42:	2001      	movne	r0, #1
   10c44:	bd38      	pop	{r3, r4, r5, pc}

00010c46 <SmpScFreeScratchBuffers>:
   10c46:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10c48:	b510      	push	{r4, lr}
   10c4a:	4604      	mov	r4, r0
   10c4c:	68d8      	ldr	r0, [r3, #12]
   10c4e:	b120      	cbz	r0, 10c5a <SmpScFreeScratchBuffers+0x14>
   10c50:	f006 feb8 	bl	179c4 <WsfBufFree>
   10c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c56:	2200      	movs	r2, #0
   10c58:	60da      	str	r2, [r3, #12]
   10c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c5c:	6898      	ldr	r0, [r3, #8]
   10c5e:	b120      	cbz	r0, 10c6a <SmpScFreeScratchBuffers+0x24>
   10c60:	f006 feb0 	bl	179c4 <WsfBufFree>
   10c64:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c66:	2200      	movs	r2, #0
   10c68:	609a      	str	r2, [r3, #8]
   10c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c6c:	6918      	ldr	r0, [r3, #16]
   10c6e:	b120      	cbz	r0, 10c7a <SmpScFreeScratchBuffers+0x34>
   10c70:	f006 fea8 	bl	179c4 <WsfBufFree>
   10c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10c76:	2200      	movs	r2, #0
   10c78:	611a      	str	r2, [r3, #16]
   10c7a:	bd10      	pop	{r4, pc}

00010c7c <SmpScCmac>:
   10c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10c7e:	461c      	mov	r4, r3
   10c80:	4b0b      	ldr	r3, [pc, #44]	; (10cb0 <SmpScCmac+0x34>)
   10c82:	9d06      	ldr	r5, [sp, #24]
   10c84:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
   10c88:	261b      	movs	r6, #27
   10c8a:	9601      	str	r6, [sp, #4]
   10c8c:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
   10c90:	9600      	str	r6, [sp, #0]
   10c92:	f008 f881 	bl	18d98 <SecCmac>
   10c96:	b948      	cbnz	r0, 10cac <SmpScCmac+0x30>
   10c98:	f640 0303 	movw	r3, #2051	; 0x803
   10c9c:	4629      	mov	r1, r5
   10c9e:	4620      	mov	r0, r4
   10ca0:	806b      	strh	r3, [r5, #2]
   10ca2:	b002      	add	sp, #8
   10ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10ca8:	f001 b833 	b.w	11d12 <smpSmExecute>
   10cac:	b002      	add	sp, #8
   10cae:	bd70      	pop	{r4, r5, r6, pc}
   10cb0:	10003738 	.word	0x10003738

00010cb4 <SmpScAlloc>:
   10cb4:	b570      	push	{r4, r5, r6, lr}
   10cb6:	460e      	mov	r6, r1
   10cb8:	4615      	mov	r5, r2
   10cba:	f006 fe49 	bl	17950 <WsfBufAlloc>
   10cbe:	4604      	mov	r4, r0
   10cc0:	b930      	cbnz	r0, 10cd0 <SmpScAlloc+0x1c>
   10cc2:	f640 0303 	movw	r3, #2051	; 0x803
   10cc6:	806b      	strh	r3, [r5, #2]
   10cc8:	4629      	mov	r1, r5
   10cca:	4630      	mov	r0, r6
   10ccc:	f001 f821 	bl	11d12 <smpSmExecute>
   10cd0:	4620      	mov	r0, r4
   10cd2:	bd70      	pop	{r4, r5, r6, pc}

00010cd4 <SmpScFree>:
   10cd4:	f006 be76 	b.w	179c4 <WsfBufFree>

00010cd8 <SmpScCalcF4>:
   10cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cdc:	4606      	mov	r6, r0
   10cde:	460f      	mov	r7, r1
   10ce0:	4615      	mov	r5, r2
   10ce2:	460a      	mov	r2, r1
   10ce4:	4601      	mov	r1, r0
   10ce6:	2041      	movs	r0, #65	; 0x41
   10ce8:	461c      	mov	r4, r3
   10cea:	f89d 9020 	ldrb.w	r9, [sp, #32]
   10cee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   10cf2:	f7ff ffdf 	bl	10cb4 <SmpScAlloc>
   10cf6:	4601      	mov	r1, r0
   10cf8:	b1f0      	cbz	r0, 10d38 <SmpScCalcF4+0x60>
   10cfa:	4603      	mov	r3, r0
   10cfc:	462a      	mov	r2, r5
   10cfe:	f105 0020 	add.w	r0, r5, #32
   10d02:	f852 5b04 	ldr.w	r5, [r2], #4
   10d06:	f843 5b04 	str.w	r5, [r3], #4
   10d0a:	4282      	cmp	r2, r0
   10d0c:	d1f9      	bne.n	10d02 <SmpScCalcF4+0x2a>
   10d0e:	4623      	mov	r3, r4
   10d10:	f101 0220 	add.w	r2, r1, #32
   10d14:	f104 0020 	add.w	r0, r4, #32
   10d18:	f853 4b04 	ldr.w	r4, [r3], #4
   10d1c:	f842 4b04 	str.w	r4, [r2], #4
   10d20:	4283      	cmp	r3, r0
   10d22:	d1f9      	bne.n	10d18 <SmpScCalcF4+0x40>
   10d24:	f881 9040 	strb.w	r9, [r1, #64]	; 0x40
   10d28:	4633      	mov	r3, r6
   10d2a:	9708      	str	r7, [sp, #32]
   10d2c:	4640      	mov	r0, r8
   10d2e:	2241      	movs	r2, #65	; 0x41
   10d30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d34:	f7ff bfa2 	b.w	10c7c <SmpScCmac>
   10d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010d3c <SmpScInit>:
   10d3c:	4a13      	ldr	r2, [pc, #76]	; (10d8c <SmpScInit+0x50>)
   10d3e:	4b14      	ldr	r3, [pc, #80]	; (10d90 <SmpScInit+0x54>)
   10d40:	f102 0114 	add.w	r1, r2, #20
   10d44:	66d9      	str	r1, [r3, #108]	; 0x6c
   10d46:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10d4a:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
   10d4e:	f102 013c 	add.w	r1, r2, #60	; 0x3c
   10d52:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
   10d56:	f102 0150 	add.w	r1, r2, #80	; 0x50
   10d5a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
   10d5e:	f102 0164 	add.w	r1, r2, #100	; 0x64
   10d62:	635a      	str	r2, [r3, #52]	; 0x34
   10d64:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
   10d68:	f102 0178 	add.w	r1, r2, #120	; 0x78
   10d6c:	328c      	adds	r2, #140	; 0x8c
   10d6e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
   10d72:	4a08      	ldr	r2, [pc, #32]	; (10d94 <SmpScInit+0x58>)
   10d74:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   10d78:	4a07      	ldr	r2, [pc, #28]	; (10d98 <SmpScInit+0x5c>)
   10d7a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   10d7e:	2201      	movs	r2, #1
   10d80:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
   10d84:	f883 21d4 	strb.w	r2, [r3, #468]	; 0x1d4
   10d88:	4770      	bx	lr
   10d8a:	bf00      	nop
   10d8c:	10003910 	.word	0x10003910
   10d90:	10003738 	.word	0x10003738
   10d94:	000110c5 	.word	0x000110c5
   10d98:	0001129d 	.word	0x0001129d

00010d9c <SmpScCat>:
   10d9c:	b510      	push	{r4, lr}
   10d9e:	4614      	mov	r4, r2
   10da0:	f7fb f9de 	bl	c160 <memcpy>
   10da4:	4420      	add	r0, r4
   10da6:	bd10      	pop	{r4, pc}

00010da8 <SmpScCat128>:
   10da8:	b510      	push	{r4, lr}
   10daa:	4604      	mov	r4, r0
   10dac:	f007 fd67 	bl	1887e <Calc128Cpy>
   10db0:	f104 0010 	add.w	r0, r4, #16
   10db4:	bd10      	pop	{r4, pc}

00010db6 <smpScSendPubKey>:
   10db6:	b570      	push	{r4, r5, r6, lr}
   10db8:	2201      	movs	r2, #1
   10dba:	4605      	mov	r5, r0
   10dbc:	460e      	mov	r6, r1
   10dbe:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10dc2:	4611      	mov	r1, r2
   10dc4:	f7fe fcb0 	bl	f728 <DmConnSetIdle>
   10dc8:	4628      	mov	r0, r5
   10dca:	f000 fd8f 	bl	118ec <smpStartRspTimer>
   10dce:	2049      	movs	r0, #73	; 0x49
   10dd0:	f7ff fe88 	bl	10ae4 <smpMsgAlloc>
   10dd4:	4604      	mov	r4, r0
   10dd6:	b1b8      	cbz	r0, 10e08 <smpScSendPubKey+0x52>
   10dd8:	230c      	movs	r3, #12
   10dda:	7203      	strb	r3, [r0, #8]
   10ddc:	f7ff fa70 	bl	102c0 <DmSecGetEccKey>
   10de0:	2220      	movs	r2, #32
   10de2:	4601      	mov	r1, r0
   10de4:	f104 0009 	add.w	r0, r4, #9
   10de8:	f007 fd84 	bl	188f4 <WStrReverseCpy>
   10dec:	f7ff fa68 	bl	102c0 <DmSecGetEccKey>
   10df0:	2220      	movs	r2, #32
   10df2:	1881      	adds	r1, r0, r2
   10df4:	f104 0029 	add.w	r0, r4, #41	; 0x29
   10df8:	f007 fd7c 	bl	188f4 <WStrReverseCpy>
   10dfc:	4621      	mov	r1, r4
   10dfe:	4628      	mov	r0, r5
   10e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e04:	f7ff be23 	b.w	10a4e <smpSendPkt>
   10e08:	f640 0303 	movw	r3, #2051	; 0x803
   10e0c:	8073      	strh	r3, [r6, #2]
   10e0e:	4631      	mov	r1, r6
   10e10:	4628      	mov	r0, r5
   10e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e16:	f000 bf7c 	b.w	11d12 <smpSmExecute>

00010e1a <smpScSendDHKeyCheck>:
   10e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e1c:	4617      	mov	r7, r2
   10e1e:	2201      	movs	r2, #1
   10e20:	4604      	mov	r4, r0
   10e22:	460e      	mov	r6, r1
   10e24:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10e28:	4611      	mov	r1, r2
   10e2a:	f7fe fc7d 	bl	f728 <DmConnSetIdle>
   10e2e:	4620      	mov	r0, r4
   10e30:	f000 fd5c 	bl	118ec <smpStartRspTimer>
   10e34:	2019      	movs	r0, #25
   10e36:	f7ff fe55 	bl	10ae4 <smpMsgAlloc>
   10e3a:	4605      	mov	r5, r0
   10e3c:	b160      	cbz	r0, 10e58 <smpScSendDHKeyCheck+0x3e>
   10e3e:	230d      	movs	r3, #13
   10e40:	7203      	strb	r3, [r0, #8]
   10e42:	4639      	mov	r1, r7
   10e44:	3009      	adds	r0, #9
   10e46:	2210      	movs	r2, #16
   10e48:	f007 fd54 	bl	188f4 <WStrReverseCpy>
   10e4c:	4629      	mov	r1, r5
   10e4e:	4620      	mov	r0, r4
   10e50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10e54:	f7ff bdfb 	b.w	10a4e <smpSendPkt>
   10e58:	f640 0303 	movw	r3, #2051	; 0x803
   10e5c:	8073      	strh	r3, [r6, #2]
   10e5e:	4631      	mov	r1, r6
   10e60:	4620      	mov	r0, r4
   10e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10e66:	f000 bf54 	b.w	11d12 <smpSmExecute>

00010e6a <smpScSendRand>:
   10e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e6c:	4617      	mov	r7, r2
   10e6e:	2201      	movs	r2, #1
   10e70:	4604      	mov	r4, r0
   10e72:	460e      	mov	r6, r1
   10e74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10e78:	4611      	mov	r1, r2
   10e7a:	f7fe fc55 	bl	f728 <DmConnSetIdle>
   10e7e:	4620      	mov	r0, r4
   10e80:	f000 fd34 	bl	118ec <smpStartRspTimer>
   10e84:	2019      	movs	r0, #25
   10e86:	f7ff fe2d 	bl	10ae4 <smpMsgAlloc>
   10e8a:	4605      	mov	r5, r0
   10e8c:	b160      	cbz	r0, 10ea8 <smpScSendRand+0x3e>
   10e8e:	2304      	movs	r3, #4
   10e90:	7203      	strb	r3, [r0, #8]
   10e92:	4639      	mov	r1, r7
   10e94:	3009      	adds	r0, #9
   10e96:	2210      	movs	r2, #16
   10e98:	f007 fd2c 	bl	188f4 <WStrReverseCpy>
   10e9c:	4629      	mov	r1, r5
   10e9e:	4620      	mov	r0, r4
   10ea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10ea4:	f7ff bdd3 	b.w	10a4e <smpSendPkt>
   10ea8:	f640 0303 	movw	r3, #2051	; 0x803
   10eac:	8073      	strh	r3, [r6, #2]
   10eae:	4631      	mov	r1, r6
   10eb0:	4620      	mov	r0, r4
   10eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10eb6:	f000 bf2c 	b.w	11d12 <smpSmExecute>

00010eba <smpScSendPairCnf>:
   10eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ebc:	4617      	mov	r7, r2
   10ebe:	2201      	movs	r2, #1
   10ec0:	4604      	mov	r4, r0
   10ec2:	460e      	mov	r6, r1
   10ec4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   10ec8:	4611      	mov	r1, r2
   10eca:	f7fe fc2d 	bl	f728 <DmConnSetIdle>
   10ece:	4620      	mov	r0, r4
   10ed0:	f000 fd0c 	bl	118ec <smpStartRspTimer>
   10ed4:	2019      	movs	r0, #25
   10ed6:	f7ff fe05 	bl	10ae4 <smpMsgAlloc>
   10eda:	4605      	mov	r5, r0
   10edc:	b160      	cbz	r0, 10ef8 <smpScSendPairCnf+0x3e>
   10ede:	2303      	movs	r3, #3
   10ee0:	7203      	strb	r3, [r0, #8]
   10ee2:	4639      	mov	r1, r7
   10ee4:	3009      	adds	r0, #9
   10ee6:	2210      	movs	r2, #16
   10ee8:	f007 fd04 	bl	188f4 <WStrReverseCpy>
   10eec:	4629      	mov	r1, r5
   10eee:	4620      	mov	r0, r4
   10ef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10ef4:	f7ff bdab 	b.w	10a4e <smpSendPkt>
   10ef8:	f640 0303 	movw	r3, #2051	; 0x803
   10efc:	8073      	strh	r3, [r6, #2]
   10efe:	4631      	mov	r1, r6
   10f00:	4620      	mov	r0, r4
   10f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10f06:	f000 bf04 	b.w	11d12 <smpSmExecute>

00010f0a <smpGetPkBit>:
   10f0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10f0c:	78da      	ldrb	r2, [r3, #3]
   10f0e:	68d9      	ldr	r1, [r3, #12]
   10f10:	08d3      	lsrs	r3, r2, #3
   10f12:	f1c3 030f 	rsb	r3, r3, #15
   10f16:	fa51 f383 	uxtab	r3, r1, r3
   10f1a:	f002 0207 	and.w	r2, r2, #7
   10f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
   10f22:	fa43 f202 	asr.w	r2, r3, r2
   10f26:	f012 0f01 	tst.w	r2, #1
   10f2a:	bf14      	ite	ne
   10f2c:	2081      	movne	r0, #129	; 0x81
   10f2e:	2080      	moveq	r0, #128	; 0x80
   10f30:	4770      	bx	lr

00010f32 <smpGetPeerPublicKey>:
   10f32:	b508      	push	{r3, lr}
   10f34:	f7ff fc2a 	bl	1078c <smpCcbByConnId>
   10f38:	6b40      	ldr	r0, [r0, #52]	; 0x34
   10f3a:	b100      	cbz	r0, 10f3e <smpGetPeerPublicKey+0xc>
   10f3c:	6880      	ldr	r0, [r0, #8]
   10f3e:	bd08      	pop	{r3, pc}

00010f40 <smpSetPeerPublicKey>:
   10f40:	b510      	push	{r4, lr}
   10f42:	460c      	mov	r4, r1
   10f44:	f7ff fc22 	bl	1078c <smpCcbByConnId>
   10f48:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10f4a:	b14b      	cbz	r3, 10f60 <smpSetPeerPublicKey+0x20>
   10f4c:	689b      	ldr	r3, [r3, #8]
   10f4e:	4621      	mov	r1, r4
   10f50:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10f54:	f851 0b04 	ldr.w	r0, [r1], #4
   10f58:	f843 0b04 	str.w	r0, [r3], #4
   10f5c:	4291      	cmp	r1, r2
   10f5e:	d1f9      	bne.n	10f54 <smpSetPeerPublicKey+0x14>
   10f60:	bd10      	pop	{r4, pc}

00010f62 <SmpScSetOobCfg>:
   10f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f64:	460d      	mov	r5, r1
   10f66:	f7ff fc11 	bl	1078c <smpCcbByConnId>
   10f6a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   10f6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10f70:	4604      	mov	r4, r0
   10f72:	f105 0110 	add.w	r1, r5, #16
   10f76:	f105 0730 	add.w	r7, r5, #48	; 0x30
   10f7a:	f105 0620 	add.w	r6, r5, #32
   10f7e:	68d8      	ldr	r0, [r3, #12]
   10f80:	b1b2      	cbz	r2, 10fb0 <SmpScSetOobCfg+0x4e>
   10f82:	3050      	adds	r0, #80	; 0x50
   10f84:	f007 fc7b 	bl	1887e <Calc128Cpy>
   10f88:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10f8a:	68d8      	ldr	r0, [r3, #12]
   10f8c:	4629      	mov	r1, r5
   10f8e:	3020      	adds	r0, #32
   10f90:	f007 fc75 	bl	1887e <Calc128Cpy>
   10f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10f96:	68d8      	ldr	r0, [r3, #12]
   10f98:	4639      	mov	r1, r7
   10f9a:	3040      	adds	r0, #64	; 0x40
   10f9c:	f007 fc6f 	bl	1887e <Calc128Cpy>
   10fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10fa2:	68d8      	ldr	r0, [r3, #12]
   10fa4:	4631      	mov	r1, r6
   10fa6:	3030      	adds	r0, #48	; 0x30
   10fa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10fac:	f007 bc67 	b.w	1887e <Calc128Cpy>
   10fb0:	3040      	adds	r0, #64	; 0x40
   10fb2:	f007 fc64 	bl	1887e <Calc128Cpy>
   10fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10fb8:	68d8      	ldr	r0, [r3, #12]
   10fba:	4629      	mov	r1, r5
   10fbc:	3030      	adds	r0, #48	; 0x30
   10fbe:	f007 fc5e 	bl	1887e <Calc128Cpy>
   10fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10fc4:	68d8      	ldr	r0, [r3, #12]
   10fc6:	4639      	mov	r1, r7
   10fc8:	3050      	adds	r0, #80	; 0x50
   10fca:	f007 fc58 	bl	1887e <Calc128Cpy>
   10fce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10fd0:	68d8      	ldr	r0, [r3, #12]
   10fd2:	4631      	mov	r1, r6
   10fd4:	3020      	adds	r0, #32
   10fd6:	e7e7      	b.n	10fa8 <SmpScSetOobCfg+0x46>

00010fd8 <smpEventStr>:
   10fd8:	3801      	subs	r0, #1
   10fda:	b2c0      	uxtb	r0, r0
   10fdc:	281b      	cmp	r0, #27
   10fde:	bf9a      	itte	ls
   10fe0:	4b02      	ldrls	r3, [pc, #8]	; (10fec <smpEventStr+0x14>)
   10fe2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   10fe6:	4802      	ldrhi	r0, [pc, #8]	; (10ff0 <smpEventStr+0x18>)
   10fe8:	4770      	bx	lr
   10fea:	bf00      	nop
   10fec:	00022160 	.word	0x00022160
   10ff0:	000230f8 	.word	0x000230f8

00010ff4 <smpStateStr>:
   10ff4:	4b03      	ldr	r3, [pc, #12]	; (11004 <smpStateStr+0x10>)
   10ff6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   10ffa:	b10b      	cbz	r3, 11000 <smpStateStr+0xc>
   10ffc:	f000 bbea 	b.w	117d4 <smpiStateStr>
   11000:	f000 bbfe 	b.w	11800 <smprStateStr>
   11004:	10003738 	.word	0x10003738

00011008 <smpLogByteArray>:
   11008:	4770      	bx	lr
   1100a:	bf00      	nop

0001100c <smpScCatInitiatorBdAddr>:
   1100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1100e:	4607      	mov	r7, r0
   11010:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11014:	460c      	mov	r4, r1
   11016:	f7fe f907 	bl	f228 <dmConnCcbById>
   1101a:	4605      	mov	r5, r0
   1101c:	b1b0      	cbz	r0, 1104c <smpScCatInitiatorBdAddr+0x40>
   1101e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   11022:	1c66      	adds	r6, r4, #1
   11024:	b1a3      	cbz	r3, 11050 <smpScCatInitiatorBdAddr+0x44>
   11026:	f100 071a 	add.w	r7, r0, #26
   1102a:	4638      	mov	r0, r7
   1102c:	f007 fc0d 	bl	1884a <BdaIsZeros>
   11030:	b920      	cbnz	r0, 1103c <smpScCatInitiatorBdAddr+0x30>
   11032:	2301      	movs	r3, #1
   11034:	7023      	strb	r3, [r4, #0]
   11036:	2206      	movs	r2, #6
   11038:	4639      	mov	r1, r7
   1103a:	e003      	b.n	11044 <smpScCatInitiatorBdAddr+0x38>
   1103c:	7d2b      	ldrb	r3, [r5, #20]
   1103e:	7023      	strb	r3, [r4, #0]
   11040:	2206      	movs	r2, #6
   11042:	18a9      	adds	r1, r5, r2
   11044:	4630      	mov	r0, r6
   11046:	f007 fc55 	bl	188f4 <WStrReverseCpy>
   1104a:	3407      	adds	r4, #7
   1104c:	4620      	mov	r0, r4
   1104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11050:	f100 0720 	add.w	r7, r0, #32
   11054:	4638      	mov	r0, r7
   11056:	f007 fbf8 	bl	1884a <BdaIsZeros>
   1105a:	2800      	cmp	r0, #0
   1105c:	d0e9      	beq.n	11032 <smpScCatInitiatorBdAddr+0x26>
   1105e:	7ceb      	ldrb	r3, [r5, #19]
   11060:	7023      	strb	r3, [r4, #0]
   11062:	2206      	movs	r2, #6
   11064:	4629      	mov	r1, r5
   11066:	e7ed      	b.n	11044 <smpScCatInitiatorBdAddr+0x38>

00011068 <smpScCatResponderBdAddr>:
   11068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1106a:	4607      	mov	r7, r0
   1106c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11070:	460c      	mov	r4, r1
   11072:	f7fe f8d9 	bl	f228 <dmConnCcbById>
   11076:	4605      	mov	r5, r0
   11078:	b1b0      	cbz	r0, 110a8 <smpScCatResponderBdAddr+0x40>
   1107a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
   1107e:	1c66      	adds	r6, r4, #1
   11080:	b1a3      	cbz	r3, 110ac <smpScCatResponderBdAddr+0x44>
   11082:	f100 0720 	add.w	r7, r0, #32
   11086:	4638      	mov	r0, r7
   11088:	f007 fbdf 	bl	1884a <BdaIsZeros>
   1108c:	b920      	cbnz	r0, 11098 <smpScCatResponderBdAddr+0x30>
   1108e:	2301      	movs	r3, #1
   11090:	7023      	strb	r3, [r4, #0]
   11092:	2206      	movs	r2, #6
   11094:	4639      	mov	r1, r7
   11096:	e003      	b.n	110a0 <smpScCatResponderBdAddr+0x38>
   11098:	7ceb      	ldrb	r3, [r5, #19]
   1109a:	7023      	strb	r3, [r4, #0]
   1109c:	2206      	movs	r2, #6
   1109e:	4629      	mov	r1, r5
   110a0:	4630      	mov	r0, r6
   110a2:	f007 fc27 	bl	188f4 <WStrReverseCpy>
   110a6:	3407      	adds	r4, #7
   110a8:	4620      	mov	r0, r4
   110aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110ac:	f100 071a 	add.w	r7, r0, #26
   110b0:	4638      	mov	r0, r7
   110b2:	f007 fbca 	bl	1884a <BdaIsZeros>
   110b6:	2800      	cmp	r0, #0
   110b8:	d0e9      	beq.n	1108e <smpScCatResponderBdAddr+0x26>
   110ba:	7d2b      	ldrb	r3, [r5, #20]
   110bc:	7023      	strb	r3, [r4, #0]
   110be:	2206      	movs	r2, #6
   110c0:	18a9      	adds	r1, r5, r2
   110c2:	e7ed      	b.n	110a0 <smpScCatResponderBdAddr+0x38>

000110c4 <smpScProcPairing>:
   110c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   110c6:	2300      	movs	r3, #0
   110c8:	7013      	strb	r3, [r2, #0]
   110ca:	700b      	strb	r3, [r1, #0]
   110cc:	7cc3      	ldrb	r3, [r0, #19]
   110ce:	7c85      	ldrb	r5, [r0, #18]
   110d0:	f013 0f08 	tst.w	r3, #8
   110d4:	4604      	mov	r4, r0
   110d6:	d039      	beq.n	1114c <smpScProcPairing+0x88>
   110d8:	7e83      	ldrb	r3, [r0, #26]
   110da:	071e      	lsls	r6, r3, #28
   110dc:	d536      	bpl.n	1114c <smpScProcPairing+0x88>
   110de:	2d01      	cmp	r5, #1
   110e0:	d002      	beq.n	110e8 <smpScProcPairing+0x24>
   110e2:	7e43      	ldrb	r3, [r0, #25]
   110e4:	2b01      	cmp	r3, #1
   110e6:	d137      	bne.n	11158 <smpScProcPairing+0x94>
   110e8:	2301      	movs	r3, #1
   110ea:	700b      	strb	r3, [r1, #0]
   110ec:	2500      	movs	r5, #0
   110ee:	780b      	ldrb	r3, [r1, #0]
   110f0:	b97b      	cbnz	r3, 11112 <smpScProcPairing+0x4e>
   110f2:	7ce3      	ldrb	r3, [r4, #19]
   110f4:	0758      	lsls	r0, r3, #29
   110f6:	d402      	bmi.n	110fe <smpScProcPairing+0x3a>
   110f8:	7ea3      	ldrb	r3, [r4, #26]
   110fa:	075b      	lsls	r3, r3, #29
   110fc:	d509      	bpl.n	11112 <smpScProcPairing+0x4e>
   110fe:	7c60      	ldrb	r0, [r4, #17]
   11100:	2803      	cmp	r0, #3
   11102:	d006      	beq.n	11112 <smpScProcPairing+0x4e>
   11104:	7e23      	ldrb	r3, [r4, #24]
   11106:	2b03      	cmp	r3, #3
   11108:	d003      	beq.n	11112 <smpScProcPairing+0x4e>
   1110a:	2801      	cmp	r0, #1
   1110c:	d826      	bhi.n	1115c <smpScProcPairing+0x98>
   1110e:	2b01      	cmp	r3, #1
   11110:	d83d      	bhi.n	1118e <smpScProcPairing+0xca>
   11112:	f894 c013 	ldrb.w	ip, [r4, #19]
   11116:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1111a:	f01c 0f08 	tst.w	ip, #8
   1111e:	f000 808e 	beq.w	1123e <smpScProcPairing+0x17a>
   11122:	7ea7      	ldrb	r7, [r4, #26]
   11124:	073e      	lsls	r6, r7, #28
   11126:	f140 808a 	bpl.w	1123e <smpScProcPairing+0x17a>
   1112a:	4b5a      	ldr	r3, [pc, #360]	; (11294 <smpScProcPairing+0x1d0>)
   1112c:	f893 61d4 	ldrb.w	r6, [r3, #468]	; 0x1d4
   11130:	bb7e      	cbnz	r6, 11192 <smpScProcPairing+0xce>
   11132:	f8ad 0004 	strh.w	r0, [sp, #4]
   11136:	f240 3303 	movw	r3, #771	; 0x303
   1113a:	a901      	add	r1, sp, #4
   1113c:	4620      	mov	r0, r4
   1113e:	f8ad 3006 	strh.w	r3, [sp, #6]
   11142:	f000 fde6 	bl	11d12 <smpSmExecute>
   11146:	4630      	mov	r0, r6
   11148:	b003      	add	sp, #12
   1114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1114c:	2d01      	cmp	r5, #1
   1114e:	d103      	bne.n	11158 <smpScProcPairing+0x94>
   11150:	7e63      	ldrb	r3, [r4, #25]
   11152:	2b01      	cmp	r3, #1
   11154:	d1cb      	bne.n	110ee <smpScProcPairing+0x2a>
   11156:	e7c7      	b.n	110e8 <smpScProcPairing+0x24>
   11158:	2501      	movs	r5, #1
   1115a:	e7c8      	b.n	110ee <smpScProcPairing+0x2a>
   1115c:	2804      	cmp	r0, #4
   1115e:	d114      	bne.n	1118a <smpScProcPairing+0xc6>
   11160:	2b02      	cmp	r3, #2
   11162:	d014      	beq.n	1118e <smpScProcPairing+0xca>
   11164:	1f1f      	subs	r7, r3, #4
   11166:	427b      	negs	r3, r7
   11168:	417b      	adcs	r3, r7
   1116a:	7013      	strb	r3, [r2, #0]
   1116c:	7e20      	ldrb	r0, [r4, #24]
   1116e:	2802      	cmp	r0, #2
   11170:	d102      	bne.n	11178 <smpScProcPairing+0xb4>
   11172:	7c60      	ldrb	r0, [r4, #17]
   11174:	2802      	cmp	r0, #2
   11176:	d006      	beq.n	11186 <smpScProcPairing+0xc2>
   11178:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
   1117c:	2800      	cmp	r0, #0
   1117e:	bf08      	it	eq
   11180:	f083 0301 	eoreq.w	r3, r3, #1
   11184:	7013      	strb	r3, [r2, #0]
   11186:	2500      	movs	r5, #0
   11188:	e7c3      	b.n	11112 <smpScProcPairing+0x4e>
   1118a:	2300      	movs	r3, #0
   1118c:	e7ed      	b.n	1116a <smpScProcPairing+0xa6>
   1118e:	2301      	movs	r3, #1
   11190:	e7eb      	b.n	1116a <smpScProcPairing+0xa6>
   11192:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11194:	f240 1601 	movw	r6, #257	; 0x101
   11198:	801e      	strh	r6, [r3, #0]
   1119a:	7812      	ldrb	r2, [r2, #0]
   1119c:	711a      	strb	r2, [r3, #4]
   1119e:	780a      	ldrb	r2, [r1, #0]
   111a0:	b112      	cbz	r2, 111a8 <smpScProcPairing+0xe4>
   111a2:	2202      	movs	r2, #2
   111a4:	705a      	strb	r2, [r3, #1]
   111a6:	e017      	b.n	111d8 <smpScProcPairing+0x114>
   111a8:	7e22      	ldrb	r2, [r4, #24]
   111aa:	b9fd      	cbnz	r5, 111ec <smpScProcPairing+0x128>
   111ac:	2103      	movs	r1, #3
   111ae:	2a04      	cmp	r2, #4
   111b0:	7059      	strb	r1, [r3, #1]
   111b2:	d106      	bne.n	111c2 <smpScProcPairing+0xfe>
   111b4:	7c62      	ldrb	r2, [r4, #17]
   111b6:	2a01      	cmp	r2, #1
   111b8:	d001      	beq.n	111be <smpScProcPairing+0xfa>
   111ba:	2a04      	cmp	r2, #4
   111bc:	d105      	bne.n	111ca <smpScProcPairing+0x106>
   111be:	2204      	movs	r2, #4
   111c0:	e7f0      	b.n	111a4 <smpScProcPairing+0xe0>
   111c2:	2a01      	cmp	r2, #1
   111c4:	d101      	bne.n	111ca <smpScProcPairing+0x106>
   111c6:	7c62      	ldrb	r2, [r4, #17]
   111c8:	e7f7      	b.n	111ba <smpScProcPairing+0xf6>
   111ca:	f01c 0f10 	tst.w	ip, #16
   111ce:	d003      	beq.n	111d8 <smpScProcPairing+0x114>
   111d0:	06fa      	lsls	r2, r7, #27
   111d2:	d501      	bpl.n	111d8 <smpScProcPairing+0x114>
   111d4:	2201      	movs	r2, #1
   111d6:	709a      	strb	r2, [r3, #2]
   111d8:	f8ad 0004 	strh.w	r0, [sp, #4]
   111dc:	4620      	mov	r0, r4
   111de:	f7ff fd11 	bl	10c04 <SmpScAllocScratchBuffers>
   111e2:	b148      	cbz	r0, 111f8 <smpScProcPairing+0x134>
   111e4:	2310      	movs	r3, #16
   111e6:	f88d 3006 	strb.w	r3, [sp, #6]
   111ea:	e009      	b.n	11200 <smpScProcPairing+0x13c>
   111ec:	2a01      	cmp	r2, #1
   111ee:	d1f3      	bne.n	111d8 <smpScProcPairing+0x114>
   111f0:	7c62      	ldrb	r2, [r4, #17]
   111f2:	2a01      	cmp	r2, #1
   111f4:	d1f0      	bne.n	111d8 <smpScProcPairing+0x114>
   111f6:	e7e2      	b.n	111be <smpScProcPairing+0xfa>
   111f8:	f640 0303 	movw	r3, #2051	; 0x803
   111fc:	f8ad 3006 	strh.w	r3, [sp, #6]
   11200:	a901      	add	r1, sp, #4
   11202:	4620      	mov	r0, r4
   11204:	f000 fd85 	bl	11d12 <smpSmExecute>
   11208:	7ce2      	ldrb	r2, [r4, #19]
   1120a:	7ea1      	ldrb	r1, [r4, #26]
   1120c:	ea01 0302 	and.w	r3, r1, r2
   11210:	bb6d      	cbnz	r5, 1126e <smpScProcPairing+0x1aa>
   11212:	f043 0304 	orr.w	r3, r3, #4
   11216:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   1121a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1121e:	2b00      	cmp	r3, #0
   11220:	bf08      	it	eq
   11222:	460a      	moveq	r2, r1
   11224:	4b1c      	ldr	r3, [pc, #112]	; (11298 <smpScProcPairing+0x1d4>)
   11226:	6819      	ldr	r1, [r3, #0]
   11228:	b325      	cbz	r5, 11274 <smpScProcPairing+0x1b0>
   1122a:	798b      	ldrb	r3, [r1, #6]
   1122c:	f003 0304 	and.w	r3, r3, #4
   11230:	421a      	tst	r2, r3
   11232:	d01f      	beq.n	11274 <smpScProcPairing+0x1b0>
   11234:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11238:	f8ad 3004 	strh.w	r3, [sp, #4]
   1123c:	e007      	b.n	1124e <smpScProcPairing+0x18a>
   1123e:	4b16      	ldr	r3, [pc, #88]	; (11298 <smpScProcPairing+0x1d4>)
   11240:	681b      	ldr	r3, [r3, #0]
   11242:	799b      	ldrb	r3, [r3, #6]
   11244:	f013 0308 	ands.w	r3, r3, #8
   11248:	d00b      	beq.n	11262 <smpScProcPairing+0x19e>
   1124a:	f8ad 0004 	strh.w	r0, [sp, #4]
   1124e:	f240 3303 	movw	r3, #771	; 0x303
   11252:	a901      	add	r1, sp, #4
   11254:	4620      	mov	r0, r4
   11256:	f8ad 3006 	strh.w	r3, [sp, #6]
   1125a:	2600      	movs	r6, #0
   1125c:	f000 fd59 	bl	11d12 <smpSmExecute>
   11260:	e771      	b.n	11146 <smpScProcPairing+0x82>
   11262:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11264:	7013      	strb	r3, [r2, #0]
   11266:	f8ad 0004 	strh.w	r0, [sp, #4]
   1126a:	2311      	movs	r3, #17
   1126c:	e7bb      	b.n	111e6 <smpScProcPairing+0x122>
   1126e:	f023 0304 	bic.w	r3, r3, #4
   11272:	e7d0      	b.n	11216 <smpScProcPairing+0x152>
   11274:	78cb      	ldrb	r3, [r1, #3]
   11276:	7d22      	ldrb	r2, [r4, #20]
   11278:	429a      	cmp	r2, r3
   1127a:	d302      	bcc.n	11282 <smpScProcPairing+0x1be>
   1127c:	7ee2      	ldrb	r2, [r4, #27]
   1127e:	429a      	cmp	r2, r3
   11280:	d206      	bcs.n	11290 <smpScProcPairing+0x1cc>
   11282:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11286:	f8ad 3004 	strh.w	r3, [sp, #4]
   1128a:	f240 6303 	movw	r3, #1539	; 0x603
   1128e:	e7e0      	b.n	11252 <smpScProcPairing+0x18e>
   11290:	2601      	movs	r6, #1
   11292:	e758      	b.n	11146 <smpScProcPairing+0x82>
   11294:	10003738 	.word	0x10003738
   11298:	100023a0 	.word	0x100023a0

0001129c <smpScAuthReq>:
   1129c:	b530      	push	{r4, r5, lr}
   1129e:	6b44      	ldr	r4, [r0, #52]	; 0x34
   112a0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   112a4:	7825      	ldrb	r5, [r4, #0]
   112a6:	b087      	sub	sp, #28
   112a8:	b98d      	cbnz	r5, 112ce <smpScAuthReq+0x32>
   112aa:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
   112ae:	0764      	lsls	r4, r4, #29
   112b0:	d510      	bpl.n	112d4 <smpScAuthReq+0x38>
   112b2:	f8ad 3000 	strh.w	r3, [sp]
   112b6:	4668      	mov	r0, sp
   112b8:	232e      	movs	r3, #46	; 0x2e
   112ba:	f88d 3002 	strb.w	r3, [sp, #2]
   112be:	f88d 1004 	strb.w	r1, [sp, #4]
   112c2:	f88d 2005 	strb.w	r2, [sp, #5]
   112c6:	f7fe fe47 	bl	ff58 <DmSmpCbackExec>
   112ca:	b007      	add	sp, #28
   112cc:	bd30      	pop	{r4, r5, pc}
   112ce:	7864      	ldrb	r4, [r4, #1]
   112d0:	2c02      	cmp	r4, #2
   112d2:	d0ee      	beq.n	112b2 <smpScAuthReq+0x16>
   112d4:	f8ad 3000 	strh.w	r3, [sp]
   112d8:	2304      	movs	r3, #4
   112da:	f88d 3002 	strb.w	r3, [sp, #2]
   112de:	2300      	movs	r3, #0
   112e0:	f8ad 3004 	strh.w	r3, [sp, #4]
   112e4:	f88d 3006 	strb.w	r3, [sp, #6]
   112e8:	4669      	mov	r1, sp
   112ea:	2303      	movs	r3, #3
   112ec:	f88d 3014 	strb.w	r3, [sp, #20]
   112f0:	f000 fd0f 	bl	11d12 <smpSmExecute>
   112f4:	e7e9      	b.n	112ca <smpScAuthReq+0x2e>

000112f6 <smpScActCleanup>:
   112f6:	b510      	push	{r4, lr}
   112f8:	4604      	mov	r4, r0
   112fa:	f000 fb17 	bl	1192c <smpActCleanup>
   112fe:	4620      	mov	r0, r4
   11300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11304:	f7ff bc9f 	b.w	10c46 <SmpScFreeScratchBuffers>

00011308 <smpScActPairingFailed>:
   11308:	b538      	push	{r3, r4, r5, lr}
   1130a:	4604      	mov	r4, r0
   1130c:	460d      	mov	r5, r1
   1130e:	f7ff fff2 	bl	112f6 <smpScActCleanup>
   11312:	4629      	mov	r1, r5
   11314:	4620      	mov	r0, r4
   11316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1131a:	f000 bb1a 	b.w	11952 <smpActPairingFailed>

0001131e <smpScActPairingCancel>:
   1131e:	b538      	push	{r3, r4, r5, lr}
   11320:	4605      	mov	r5, r0
   11322:	460c      	mov	r4, r1
   11324:	78c9      	ldrb	r1, [r1, #3]
   11326:	f000 fb03 	bl	11930 <smpSendPairingFailed>
   1132a:	4621      	mov	r1, r4
   1132c:	4628      	mov	r0, r5
   1132e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11332:	f7ff bfe9 	b.w	11308 <smpScActPairingFailed>

00011336 <smpScActAuthSelect>:
   11336:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11338:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1133a:	684d      	ldr	r5, [r1, #4]
   1133c:	4604      	mov	r4, r0
   1133e:	2220      	movs	r2, #32
   11340:	6898      	ldr	r0, [r3, #8]
   11342:	f105 0109 	add.w	r1, r5, #9
   11346:	f007 fad5 	bl	188f4 <WStrReverseCpy>
   1134a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1134c:	6898      	ldr	r0, [r3, #8]
   1134e:	2220      	movs	r2, #32
   11350:	f105 0129 	add.w	r1, r5, #41	; 0x29
   11354:	4410      	add	r0, r2
   11356:	f007 facd 	bl	188f4 <WStrReverseCpy>
   1135a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1135e:	f8ad 3004 	strh.w	r3, [sp, #4]
   11362:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11364:	785b      	ldrb	r3, [r3, #1]
   11366:	3b01      	subs	r3, #1
   11368:	2b03      	cmp	r3, #3
   1136a:	d810      	bhi.n	1138e <smpScActAuthSelect+0x58>
   1136c:	e8df f003 	tbb	[pc, r3]
   11370:	020d0b02 	.word	0x020d0b02
   11374:	2312      	movs	r3, #18
   11376:	f88d 3006 	strb.w	r3, [sp, #6]
   1137a:	a901      	add	r1, sp, #4
   1137c:	4620      	mov	r0, r4
   1137e:	f000 fcc8 	bl	11d12 <smpSmExecute>
   11382:	b003      	add	sp, #12
   11384:	bd30      	pop	{r4, r5, pc}
   11386:	2314      	movs	r3, #20
   11388:	e7f5      	b.n	11376 <smpScActAuthSelect+0x40>
   1138a:	2313      	movs	r3, #19
   1138c:	e7f3      	b.n	11376 <smpScActAuthSelect+0x40>
   1138e:	f640 0303 	movw	r3, #2051	; 0x803
   11392:	f8ad 3006 	strh.w	r3, [sp, #6]
   11396:	e7f0      	b.n	1137a <smpScActAuthSelect+0x44>

00011398 <smpScActPkSetup>:
   11398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1139a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1139c:	2200      	movs	r2, #0
   1139e:	70da      	strb	r2, [r3, #3]
   113a0:	2103      	movs	r1, #3
   113a2:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
   113a6:	f88d 2004 	strb.w	r2, [sp, #4]
   113aa:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
   113ae:	f8ad 1000 	strh.w	r1, [sp]
   113b2:	791b      	ldrb	r3, [r3, #4]
   113b4:	f88d 3005 	strb.w	r3, [sp, #5]
   113b8:	212e      	movs	r1, #46	; 0x2e
   113ba:	4668      	mov	r0, sp
   113bc:	f88d 1002 	strb.w	r1, [sp, #2]
   113c0:	f7fe fdca 	bl	ff58 <DmSmpCbackExec>
   113c4:	b007      	add	sp, #28
   113c6:	f85d fb04 	ldr.w	pc, [sp], #4

000113ca <smpScActJwncCalcF4>:
   113ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113cc:	f890 602a 	ldrb.w	r6, [r0, #42]	; 0x2a
   113d0:	4604      	mov	r4, r0
   113d2:	460d      	mov	r5, r1
   113d4:	b18e      	cbz	r6, 113fa <smpScActJwncCalcF4+0x30>
   113d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   113d8:	689e      	ldr	r6, [r3, #8]
   113da:	f7fe ff71 	bl	102c0 <DmSecGetEccKey>
   113de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   113e0:	68db      	ldr	r3, [r3, #12]
   113e2:	3310      	adds	r3, #16
   113e4:	9301      	str	r3, [sp, #4]
   113e6:	2300      	movs	r3, #0
   113e8:	9300      	str	r3, [sp, #0]
   113ea:	4632      	mov	r2, r6
   113ec:	4603      	mov	r3, r0
   113ee:	4629      	mov	r1, r5
   113f0:	4620      	mov	r0, r4
   113f2:	f7ff fc71 	bl	10cd8 <SmpScCalcF4>
   113f6:	b002      	add	sp, #8
   113f8:	bd70      	pop	{r4, r5, r6, pc}
   113fa:	f7fe ff61 	bl	102c0 <DmSecGetEccKey>
   113fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11400:	68d3      	ldr	r3, [r2, #12]
   11402:	3310      	adds	r3, #16
   11404:	e9cd 6300 	strd	r6, r3, [sp]
   11408:	6893      	ldr	r3, [r2, #8]
   1140a:	4602      	mov	r2, r0
   1140c:	e7ef      	b.n	113ee <smpScActJwncCalcF4+0x24>

0001140e <smpScActJwncCalcG2>:
   1140e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11410:	460a      	mov	r2, r1
   11412:	4604      	mov	r4, r0
   11414:	460e      	mov	r6, r1
   11416:	4601      	mov	r1, r0
   11418:	2050      	movs	r0, #80	; 0x50
   1141a:	f7ff fc4b 	bl	10cb4 <SmpScAlloc>
   1141e:	4605      	mov	r5, r0
   11420:	b1d8      	cbz	r0, 1145a <smpScActJwncCalcG2+0x4c>
   11422:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11426:	b1d3      	cbz	r3, 1145e <smpScActJwncCalcG2+0x50>
   11428:	f7fe ff4a 	bl	102c0 <DmSecGetEccKey>
   1142c:	2220      	movs	r2, #32
   1142e:	4601      	mov	r1, r0
   11430:	4628      	mov	r0, r5
   11432:	f7ff fcb3 	bl	10d9c <SmpScCat>
   11436:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11438:	6899      	ldr	r1, [r3, #8]
   1143a:	2220      	movs	r2, #32
   1143c:	f7ff fcae 	bl	10d9c <SmpScCat>
   11440:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11442:	68d9      	ldr	r1, [r3, #12]
   11444:	3110      	adds	r1, #16
   11446:	f7ff fcaf 	bl	10da8 <SmpScCat128>
   1144a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1144c:	9600      	str	r6, [sp, #0]
   1144e:	4623      	mov	r3, r4
   11450:	2250      	movs	r2, #80	; 0x50
   11452:	4629      	mov	r1, r5
   11454:	68c0      	ldr	r0, [r0, #12]
   11456:	f7ff fc11 	bl	10c7c <SmpScCmac>
   1145a:	b003      	add	sp, #12
   1145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1145e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11460:	2220      	movs	r2, #32
   11462:	6899      	ldr	r1, [r3, #8]
   11464:	f7ff fc9a 	bl	10d9c <SmpScCat>
   11468:	4607      	mov	r7, r0
   1146a:	f7fe ff29 	bl	102c0 <DmSecGetEccKey>
   1146e:	2220      	movs	r2, #32
   11470:	4601      	mov	r1, r0
   11472:	4638      	mov	r0, r7
   11474:	e7e2      	b.n	1143c <smpScActJwncCalcG2+0x2e>

00011476 <smpScActJwncDisplay>:
   11476:	b510      	push	{r4, lr}
   11478:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1147a:	785b      	ldrb	r3, [r3, #1]
   1147c:	2b04      	cmp	r3, #4
   1147e:	b086      	sub	sp, #24
   11480:	4604      	mov	r4, r0
   11482:	d10f      	bne.n	114a4 <smpScActJwncDisplay+0x2e>
   11484:	a802      	add	r0, sp, #8
   11486:	6849      	ldr	r1, [r1, #4]
   11488:	f007 f9f9 	bl	1887e <Calc128Cpy>
   1148c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11490:	f8ad 3004 	strh.w	r3, [sp, #4]
   11494:	a801      	add	r0, sp, #4
   11496:	2335      	movs	r3, #53	; 0x35
   11498:	f88d 3006 	strb.w	r3, [sp, #6]
   1149c:	f7fe fd5c 	bl	ff58 <DmSmpCbackExec>
   114a0:	b006      	add	sp, #24
   114a2:	bd10      	pop	{r4, pc}
   114a4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   114a8:	f8ad 3004 	strh.w	r3, [sp, #4]
   114ac:	a901      	add	r1, sp, #4
   114ae:	2315      	movs	r3, #21
   114b0:	f88d 3006 	strb.w	r3, [sp, #6]
   114b4:	f000 fc2d 	bl	11d12 <smpSmExecute>
   114b8:	e7f2      	b.n	114a0 <smpScActJwncDisplay+0x2a>

000114ba <smpScActPkKeypress>:
   114ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   114bc:	684c      	ldr	r4, [r1, #4]
   114be:	7a22      	ldrb	r2, [r4, #8]
   114c0:	2a0e      	cmp	r2, #14
   114c2:	d10e      	bne.n	114e2 <smpScActPkKeypress+0x28>
   114c4:	7a63      	ldrb	r3, [r4, #9]
   114c6:	f88d 3004 	strb.w	r3, [sp, #4]
   114ca:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   114ce:	f8ad 3000 	strh.w	r3, [sp]
   114d2:	4668      	mov	r0, sp
   114d4:	2336      	movs	r3, #54	; 0x36
   114d6:	f88d 3002 	strb.w	r3, [sp, #2]
   114da:	f7fe fd3d 	bl	ff58 <DmSmpCbackExec>
   114de:	b003      	add	sp, #12
   114e0:	bd30      	pop	{r4, r5, pc}
   114e2:	2a03      	cmp	r2, #3
   114e4:	d1fb      	bne.n	114de <smpScActPkKeypress+0x24>
   114e6:	221d      	movs	r2, #29
   114e8:	708a      	strb	r2, [r1, #2]
   114ea:	f000 fc12 	bl	11d12 <smpSmExecute>
   114ee:	e7f6      	b.n	114de <smpScActPkKeypress+0x24>

000114f0 <smpScActPkSendKeypress>:
   114f0:	b538      	push	{r3, r4, r5, lr}
   114f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   114f4:	789b      	ldrb	r3, [r3, #2]
   114f6:	4604      	mov	r4, r0
   114f8:	460d      	mov	r5, r1
   114fa:	b1c3      	cbz	r3, 1152e <smpScActPkSendKeypress+0x3e>
   114fc:	f000 f9f6 	bl	118ec <smpStartRspTimer>
   11500:	200a      	movs	r0, #10
   11502:	f7ff faef 	bl	10ae4 <smpMsgAlloc>
   11506:	b148      	cbz	r0, 1151c <smpScActPkSendKeypress+0x2c>
   11508:	230e      	movs	r3, #14
   1150a:	7203      	strb	r3, [r0, #8]
   1150c:	792b      	ldrb	r3, [r5, #4]
   1150e:	7243      	strb	r3, [r0, #9]
   11510:	4601      	mov	r1, r0
   11512:	4620      	mov	r0, r4
   11514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11518:	f7ff ba99 	b.w	10a4e <smpSendPkt>
   1151c:	f640 0303 	movw	r3, #2051	; 0x803
   11520:	806b      	strh	r3, [r5, #2]
   11522:	4629      	mov	r1, r5
   11524:	4620      	mov	r0, r4
   11526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1152a:	f000 bbf2 	b.w	11d12 <smpSmExecute>
   1152e:	bd38      	pop	{r3, r4, r5, pc}

00011530 <smpScActCalcSharedSecret>:
   11530:	b5f0      	push	{r4, r5, r6, r7, lr}
   11532:	b099      	sub	sp, #100	; 0x64
   11534:	4605      	mov	r5, r0
   11536:	f7fe fec3 	bl	102c0 <DmSecGetEccKey>
   1153a:	ae10      	add	r6, sp, #64	; 0x40
   1153c:	f100 0340 	add.w	r3, r0, #64	; 0x40
   11540:	f100 0260 	add.w	r2, r0, #96	; 0x60
   11544:	6818      	ldr	r0, [r3, #0]
   11546:	6859      	ldr	r1, [r3, #4]
   11548:	4634      	mov	r4, r6
   1154a:	c403      	stmia	r4!, {r0, r1}
   1154c:	3308      	adds	r3, #8
   1154e:	4293      	cmp	r3, r2
   11550:	4626      	mov	r6, r4
   11552:	d1f7      	bne.n	11544 <smpScActCalcSharedSecret+0x14>
   11554:	6b6e      	ldr	r6, [r5, #52]	; 0x34
   11556:	68b3      	ldr	r3, [r6, #8]
   11558:	466a      	mov	r2, sp
   1155a:	f103 0c20 	add.w	ip, r3, #32
   1155e:	4617      	mov	r7, r2
   11560:	6818      	ldr	r0, [r3, #0]
   11562:	6859      	ldr	r1, [r3, #4]
   11564:	4614      	mov	r4, r2
   11566:	c403      	stmia	r4!, {r0, r1}
   11568:	3308      	adds	r3, #8
   1156a:	4563      	cmp	r3, ip
   1156c:	4622      	mov	r2, r4
   1156e:	d1f7      	bne.n	11560 <smpScActCalcSharedSecret+0x30>
   11570:	68b3      	ldr	r3, [r6, #8]
   11572:	ac08      	add	r4, sp, #32
   11574:	f103 0640 	add.w	r6, r3, #64	; 0x40
   11578:	3320      	adds	r3, #32
   1157a:	6818      	ldr	r0, [r3, #0]
   1157c:	6859      	ldr	r1, [r3, #4]
   1157e:	4622      	mov	r2, r4
   11580:	c203      	stmia	r2!, {r0, r1}
   11582:	3308      	adds	r3, #8
   11584:	42b3      	cmp	r3, r6
   11586:	4614      	mov	r4, r2
   11588:	d1f7      	bne.n	1157a <smpScActCalcSharedSecret+0x4a>
   1158a:	4905      	ldr	r1, [pc, #20]	; (115a0 <smpScActCalcSharedSecret+0x70>)
   1158c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   11590:	f891 11c8 	ldrb.w	r1, [r1, #456]	; 0x1c8
   11594:	2318      	movs	r3, #24
   11596:	4638      	mov	r0, r7
   11598:	f007 fcde 	bl	18f58 <SecEccGenSharedSecret>
   1159c:	b019      	add	sp, #100	; 0x64
   1159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115a0:	10003738 	.word	0x10003738

000115a4 <smpScActCalcF5TKey>:
   115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115a8:	460a      	mov	r2, r1
   115aa:	b086      	sub	sp, #24
   115ac:	4680      	mov	r8, r0
   115ae:	460c      	mov	r4, r1
   115b0:	4601      	mov	r1, r0
   115b2:	2020      	movs	r0, #32
   115b4:	f7ff fb7e 	bl	10cb4 <SmpScAlloc>
   115b8:	4607      	mov	r7, r0
   115ba:	b1e8      	cbz	r0, 115f8 <smpScActCalcF5TKey+0x54>
   115bc:	4a10      	ldr	r2, [pc, #64]	; (11600 <smpScActCalcF5TKey+0x5c>)
   115be:	ad02      	add	r5, sp, #8
   115c0:	f102 0310 	add.w	r3, r2, #16
   115c4:	46ac      	mov	ip, r5
   115c6:	6810      	ldr	r0, [r2, #0]
   115c8:	6851      	ldr	r1, [r2, #4]
   115ca:	462e      	mov	r6, r5
   115cc:	c603      	stmia	r6!, {r0, r1}
   115ce:	3208      	adds	r2, #8
   115d0:	429a      	cmp	r2, r3
   115d2:	4635      	mov	r5, r6
   115d4:	d1f7      	bne.n	115c6 <smpScActCalcF5TKey+0x22>
   115d6:	1d22      	adds	r2, r4, #4
   115d8:	463b      	mov	r3, r7
   115da:	f104 0124 	add.w	r1, r4, #36	; 0x24
   115de:	f852 0b04 	ldr.w	r0, [r2], #4
   115e2:	f843 0b04 	str.w	r0, [r3], #4
   115e6:	428a      	cmp	r2, r1
   115e8:	d1f9      	bne.n	115de <smpScActCalcF5TKey+0x3a>
   115ea:	9400      	str	r4, [sp, #0]
   115ec:	4643      	mov	r3, r8
   115ee:	2220      	movs	r2, #32
   115f0:	4639      	mov	r1, r7
   115f2:	4660      	mov	r0, ip
   115f4:	f7ff fb42 	bl	10c7c <SmpScCmac>
   115f8:	b006      	add	sp, #24
   115fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115fe:	bf00      	nop
   11600:	000221d0 	.word	0x000221d0

00011604 <smpScActCalcF5MacKey>:
   11604:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11608:	4604      	mov	r4, r0
   1160a:	6918      	ldr	r0, [r3, #16]
   1160c:	460e      	mov	r6, r1
   1160e:	3010      	adds	r0, #16
   11610:	6849      	ldr	r1, [r1, #4]
   11612:	f007 f934 	bl	1887e <Calc128Cpy>
   11616:	4632      	mov	r2, r6
   11618:	4621      	mov	r1, r4
   1161a:	2035      	movs	r0, #53	; 0x35
   1161c:	f7ff fb4a 	bl	10cb4 <SmpScAlloc>
   11620:	4605      	mov	r5, r0
   11622:	b318      	cbz	r0, 1166c <smpScActCalcF5MacKey+0x68>
   11624:	2700      	movs	r7, #0
   11626:	2204      	movs	r2, #4
   11628:	7007      	strb	r7, [r0, #0]
   1162a:	4911      	ldr	r1, [pc, #68]	; (11670 <smpScActCalcF5MacKey+0x6c>)
   1162c:	3001      	adds	r0, #1
   1162e:	f7ff fbb5 	bl	10d9c <SmpScCat>
   11632:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11634:	68d9      	ldr	r1, [r3, #12]
   11636:	f7ff fbb7 	bl	10da8 <SmpScCat128>
   1163a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1163c:	68d9      	ldr	r1, [r3, #12]
   1163e:	3110      	adds	r1, #16
   11640:	f7ff fbb2 	bl	10da8 <SmpScCat128>
   11644:	4601      	mov	r1, r0
   11646:	4620      	mov	r0, r4
   11648:	f7ff fce0 	bl	1100c <smpScCatInitiatorBdAddr>
   1164c:	4601      	mov	r1, r0
   1164e:	4620      	mov	r0, r4
   11650:	f7ff fd0a 	bl	11068 <smpScCatResponderBdAddr>
   11654:	2301      	movs	r3, #1
   11656:	7003      	strb	r3, [r0, #0]
   11658:	7047      	strb	r7, [r0, #1]
   1165a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1165c:	6918      	ldr	r0, [r3, #16]
   1165e:	9600      	str	r6, [sp, #0]
   11660:	4623      	mov	r3, r4
   11662:	2235      	movs	r2, #53	; 0x35
   11664:	4629      	mov	r1, r5
   11666:	3010      	adds	r0, #16
   11668:	f7ff fb08 	bl	10c7c <SmpScCmac>
   1166c:	b003      	add	sp, #12
   1166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11670:	000221e0 	.word	0x000221e0

00011674 <smpScActCalcF5Ltk>:
   11674:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11678:	4604      	mov	r4, r0
   1167a:	460e      	mov	r6, r1
   1167c:	6918      	ldr	r0, [r3, #16]
   1167e:	6849      	ldr	r1, [r1, #4]
   11680:	f007 f8fd 	bl	1887e <Calc128Cpy>
   11684:	4632      	mov	r2, r6
   11686:	4621      	mov	r1, r4
   11688:	2035      	movs	r0, #53	; 0x35
   1168a:	f7ff fb13 	bl	10cb4 <SmpScAlloc>
   1168e:	4605      	mov	r5, r0
   11690:	b318      	cbz	r0, 116da <smpScActCalcF5Ltk+0x66>
   11692:	2701      	movs	r7, #1
   11694:	2204      	movs	r2, #4
   11696:	7007      	strb	r7, [r0, #0]
   11698:	4911      	ldr	r1, [pc, #68]	; (116e0 <smpScActCalcF5Ltk+0x6c>)
   1169a:	4438      	add	r0, r7
   1169c:	f7ff fb7e 	bl	10d9c <SmpScCat>
   116a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116a2:	68d9      	ldr	r1, [r3, #12]
   116a4:	f7ff fb80 	bl	10da8 <SmpScCat128>
   116a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116aa:	68d9      	ldr	r1, [r3, #12]
   116ac:	3110      	adds	r1, #16
   116ae:	f7ff fb7b 	bl	10da8 <SmpScCat128>
   116b2:	4601      	mov	r1, r0
   116b4:	4620      	mov	r0, r4
   116b6:	f7ff fca9 	bl	1100c <smpScCatInitiatorBdAddr>
   116ba:	4601      	mov	r1, r0
   116bc:	4620      	mov	r0, r4
   116be:	f7ff fcd3 	bl	11068 <smpScCatResponderBdAddr>
   116c2:	2300      	movs	r3, #0
   116c4:	7007      	strb	r7, [r0, #0]
   116c6:	7043      	strb	r3, [r0, #1]
   116c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   116ca:	6918      	ldr	r0, [r3, #16]
   116cc:	9600      	str	r6, [sp, #0]
   116ce:	4623      	mov	r3, r4
   116d0:	2235      	movs	r2, #53	; 0x35
   116d2:	4629      	mov	r1, r5
   116d4:	3010      	adds	r0, #16
   116d6:	f7ff fad1 	bl	10c7c <SmpScCmac>
   116da:	b003      	add	sp, #12
   116dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116de:	bf00      	nop
   116e0:	000221e0 	.word	0x000221e0

000116e4 <smpScActDHKeyCalcF6Ea>:
   116e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   116e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   116e8:	4604      	mov	r4, r0
   116ea:	6918      	ldr	r0, [r3, #16]
   116ec:	2210      	movs	r2, #16
   116ee:	4410      	add	r0, r2
   116f0:	460d      	mov	r5, r1
   116f2:	6849      	ldr	r1, [r1, #4]
   116f4:	f007 f8fe 	bl	188f4 <WStrReverseCpy>
   116f8:	462a      	mov	r2, r5
   116fa:	4621      	mov	r1, r4
   116fc:	2041      	movs	r0, #65	; 0x41
   116fe:	f7ff fad9 	bl	10cb4 <SmpScAlloc>
   11702:	4606      	mov	r6, r0
   11704:	b318      	cbz	r0, 1174e <smpScActDHKeyCalcF6Ea+0x6a>
   11706:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11708:	68d9      	ldr	r1, [r3, #12]
   1170a:	f7ff fb4d 	bl	10da8 <SmpScCat128>
   1170e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11710:	68d9      	ldr	r1, [r3, #12]
   11712:	3110      	adds	r1, #16
   11714:	f7ff fb48 	bl	10da8 <SmpScCat128>
   11718:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1171a:	68d9      	ldr	r1, [r3, #12]
   1171c:	3130      	adds	r1, #48	; 0x30
   1171e:	f7ff fb43 	bl	10da8 <SmpScCat128>
   11722:	7ce3      	ldrb	r3, [r4, #19]
   11724:	7003      	strb	r3, [r0, #0]
   11726:	7ca3      	ldrb	r3, [r4, #18]
   11728:	7043      	strb	r3, [r0, #1]
   1172a:	7c63      	ldrb	r3, [r4, #17]
   1172c:	7083      	strb	r3, [r0, #2]
   1172e:	1cc1      	adds	r1, r0, #3
   11730:	4620      	mov	r0, r4
   11732:	f7ff fc6b 	bl	1100c <smpScCatInitiatorBdAddr>
   11736:	4601      	mov	r1, r0
   11738:	4620      	mov	r0, r4
   1173a:	f7ff fc95 	bl	11068 <smpScCatResponderBdAddr>
   1173e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   11740:	9500      	str	r5, [sp, #0]
   11742:	4623      	mov	r3, r4
   11744:	2241      	movs	r2, #65	; 0x41
   11746:	4631      	mov	r1, r6
   11748:	6900      	ldr	r0, [r0, #16]
   1174a:	f7ff fa97 	bl	10c7c <SmpScCmac>
   1174e:	b002      	add	sp, #8
   11750:	bd70      	pop	{r4, r5, r6, pc}

00011752 <smpScActDHKeyCalcF6Eb>:
   11752:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11754:	460a      	mov	r2, r1
   11756:	4604      	mov	r4, r0
   11758:	460d      	mov	r5, r1
   1175a:	4601      	mov	r1, r0
   1175c:	2041      	movs	r0, #65	; 0x41
   1175e:	f7ff faa9 	bl	10cb4 <SmpScAlloc>
   11762:	4606      	mov	r6, r0
   11764:	b318      	cbz	r0, 117ae <smpScActDHKeyCalcF6Eb+0x5c>
   11766:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11768:	68d9      	ldr	r1, [r3, #12]
   1176a:	3110      	adds	r1, #16
   1176c:	f7ff fb1c 	bl	10da8 <SmpScCat128>
   11770:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11772:	68d9      	ldr	r1, [r3, #12]
   11774:	f7ff fb18 	bl	10da8 <SmpScCat128>
   11778:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1177a:	68d9      	ldr	r1, [r3, #12]
   1177c:	3120      	adds	r1, #32
   1177e:	f7ff fb13 	bl	10da8 <SmpScCat128>
   11782:	7ea3      	ldrb	r3, [r4, #26]
   11784:	7003      	strb	r3, [r0, #0]
   11786:	7e63      	ldrb	r3, [r4, #25]
   11788:	7043      	strb	r3, [r0, #1]
   1178a:	7e23      	ldrb	r3, [r4, #24]
   1178c:	7083      	strb	r3, [r0, #2]
   1178e:	1cc1      	adds	r1, r0, #3
   11790:	4620      	mov	r0, r4
   11792:	f7ff fc69 	bl	11068 <smpScCatResponderBdAddr>
   11796:	4601      	mov	r1, r0
   11798:	4620      	mov	r0, r4
   1179a:	f7ff fc37 	bl	1100c <smpScCatInitiatorBdAddr>
   1179e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   117a0:	9500      	str	r5, [sp, #0]
   117a2:	4623      	mov	r3, r4
   117a4:	2241      	movs	r2, #65	; 0x41
   117a6:	4631      	mov	r1, r6
   117a8:	6900      	ldr	r0, [r0, #16]
   117aa:	f7ff fa67 	bl	10c7c <SmpScCmac>
   117ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117b0:	6869      	ldr	r1, [r5, #4]
   117b2:	68d8      	ldr	r0, [r3, #12]
   117b4:	b002      	add	sp, #8
   117b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117ba:	f007 b860 	b.w	1887e <Calc128Cpy>
   117be:	bf00      	nop

000117c0 <SmpiScInit>:
   117c0:	4b02      	ldr	r3, [pc, #8]	; (117cc <SmpiScInit+0xc>)
   117c2:	4a03      	ldr	r2, [pc, #12]	; (117d0 <SmpiScInit+0x10>)
   117c4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   117c8:	f7ff bab8 	b.w	10d3c <SmpScInit>
   117cc:	10003738 	.word	0x10003738
   117d0:	000221e4 	.word	0x000221e4

000117d4 <smpiStateStr>:
   117d4:	2824      	cmp	r0, #36	; 0x24
   117d6:	bf9d      	ittte	ls
   117d8:	4b02      	ldrls	r3, [pc, #8]	; (117e4 <smpiStateStr+0x10>)
   117da:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   117de:	68c0      	ldrls	r0, [r0, #12]
   117e0:	4801      	ldrhi	r0, [pc, #4]	; (117e8 <smpiStateStr+0x14>)
   117e2:	4770      	bx	lr
   117e4:	000221e4 	.word	0x000221e4
   117e8:	000230f6 	.word	0x000230f6

000117ec <SmprScInit>:
   117ec:	4b02      	ldr	r3, [pc, #8]	; (117f8 <SmprScInit+0xc>)
   117ee:	4a03      	ldr	r2, [pc, #12]	; (117fc <SmprScInit+0x10>)
   117f0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   117f4:	f7ff baa2 	b.w	10d3c <SmpScInit>
   117f8:	10003738 	.word	0x10003738
   117fc:	00022510 	.word	0x00022510

00011800 <smprStateStr>:
   11800:	2824      	cmp	r0, #36	; 0x24
   11802:	bf9d      	ittte	ls
   11804:	4b02      	ldrls	r3, [pc, #8]	; (11810 <smprStateStr+0x10>)
   11806:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   1180a:	68c0      	ldrls	r0, [r0, #12]
   1180c:	4801      	ldrhi	r0, [pc, #4]	; (11814 <smprStateStr+0x14>)
   1180e:	4770      	bx	lr
   11810:	00022510 	.word	0x00022510
   11814:	000232ca 	.word	0x000232ca

00011818 <SmprInit>:
   11818:	4b05      	ldr	r3, [pc, #20]	; (11830 <SmprInit+0x18>)
   1181a:	4a06      	ldr	r2, [pc, #24]	; (11834 <SmprInit+0x1c>)
   1181c:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
   11820:	4a05      	ldr	r2, [pc, #20]	; (11838 <SmprInit+0x20>)
   11822:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
   11826:	4a05      	ldr	r2, [pc, #20]	; (1183c <SmprInit+0x24>)
   11828:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
   1182c:	4770      	bx	lr
   1182e:	bf00      	nop
   11830:	10003738 	.word	0x10003738
   11834:	0002285c 	.word	0x0002285c
   11838:	00011d75 	.word	0x00011d75
   1183c:	00011e61 	.word	0x00011e61

00011840 <DmSmpEncryptReq>:
   11840:	b570      	push	{r4, r5, r6, lr}
   11842:	460d      	mov	r5, r1
   11844:	4614      	mov	r4, r2
   11846:	f7fd fcef 	bl	f228 <dmConnCcbById>
   1184a:	b148      	cbz	r0, 11860 <DmSmpEncryptReq+0x20>
   1184c:	2200      	movs	r2, #0
   1184e:	7605      	strb	r5, [r0, #24]
   11850:	7482      	strb	r2, [r0, #18]
   11852:	4623      	mov	r3, r4
   11854:	4903      	ldr	r1, [pc, #12]	; (11864 <DmSmpEncryptReq+0x24>)
   11856:	8980      	ldrh	r0, [r0, #12]
   11858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1185c:	f002 bed1 	b.w	14602 <HciLeStartEncryptionCmd>
   11860:	bd70      	pop	{r4, r5, r6, pc}
   11862:	bf00      	nop
   11864:	00022b54 	.word	0x00022b54

00011868 <DmSecPairReq>:
   11868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1186c:	4681      	mov	r9, r0
   1186e:	2008      	movs	r0, #8
   11870:	4688      	mov	r8, r1
   11872:	4617      	mov	r7, r2
   11874:	461e      	mov	r6, r3
   11876:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1187a:	f006 f8f2 	bl	17a62 <WsfMsgAlloc>
   1187e:	b180      	cbz	r0, 118a2 <DmSecPairReq+0x3a>
   11880:	2301      	movs	r3, #1
   11882:	f006 0607 	and.w	r6, r6, #7
   11886:	f005 0507 	and.w	r5, r5, #7
   1188a:	7083      	strb	r3, [r0, #2]
   1188c:	f880 8004 	strb.w	r8, [r0, #4]
   11890:	7147      	strb	r7, [r0, #5]
   11892:	7186      	strb	r6, [r0, #6]
   11894:	71c5      	strb	r5, [r0, #7]
   11896:	f8a0 9000 	strh.w	r9, [r0]
   1189a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1189e:	f7ff b924 	b.w	10aea <SmpDmMsgSend>
   118a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000118a6 <DmSecEncryptReq>:
   118a6:	b570      	push	{r4, r5, r6, lr}
   118a8:	4606      	mov	r6, r0
   118aa:	2020      	movs	r0, #32
   118ac:	460d      	mov	r5, r1
   118ae:	4614      	mov	r4, r2
   118b0:	f006 f8d7 	bl	17a62 <WsfMsgAlloc>
   118b4:	b1b8      	cbz	r0, 118e6 <DmSecEncryptReq+0x40>
   118b6:	2350      	movs	r3, #80	; 0x50
   118b8:	7083      	strb	r3, [r0, #2]
   118ba:	4603      	mov	r3, r0
   118bc:	4622      	mov	r2, r4
   118be:	f823 6b04 	strh.w	r6, [r3], #4
   118c2:	f104 0118 	add.w	r1, r4, #24
   118c6:	f852 4b04 	ldr.w	r4, [r2], #4
   118ca:	f843 4b04 	str.w	r4, [r3], #4
   118ce:	428a      	cmp	r2, r1
   118d0:	d1f9      	bne.n	118c6 <DmSecEncryptReq+0x20>
   118d2:	8812      	ldrh	r2, [r2, #0]
   118d4:	801a      	strh	r2, [r3, #0]
   118d6:	4b04      	ldr	r3, [pc, #16]	; (118e8 <DmSecEncryptReq+0x42>)
   118d8:	7785      	strb	r5, [r0, #30]
   118da:	4601      	mov	r1, r0
   118dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   118e0:	7b18      	ldrb	r0, [r3, #12]
   118e2:	f006 b8e2 	b.w	17aaa <WsfMsgSend>
   118e6:	bd70      	pop	{r4, r5, r6, pc}
   118e8:	1000366c 	.word	0x1000366c

000118ec <smpStartRspTimer>:
   118ec:	f24e 130f 	movw	r3, #57615	; 0xe10f
   118f0:	8183      	strh	r3, [r0, #12]
   118f2:	211e      	movs	r1, #30
   118f4:	f006 ba6e 	b.w	17dd4 <WsfTimerStartSec>

000118f8 <smpActNone>:
   118f8:	4770      	bx	lr

000118fa <smpCleanup>:
   118fa:	b510      	push	{r4, lr}
   118fc:	4604      	mov	r4, r0
   118fe:	6a00      	ldr	r0, [r0, #32]
   11900:	b118      	cbz	r0, 1190a <smpCleanup+0x10>
   11902:	f006 f85f 	bl	179c4 <WsfBufFree>
   11906:	2300      	movs	r3, #0
   11908:	6223      	str	r3, [r4, #32]
   1190a:	4620      	mov	r0, r4
   1190c:	f006 fa88 	bl	17e20 <WsfTimerStop>
   11910:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   11914:	2300      	movs	r3, #0
   11916:	429a      	cmp	r2, r3
   11918:	bf14      	ite	ne
   1191a:	220b      	movne	r2, #11
   1191c:	2201      	moveq	r2, #1
   1191e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
   11922:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
   11926:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   1192a:	bd10      	pop	{r4, pc}

0001192c <smpActCleanup>:
   1192c:	f7ff bfe5 	b.w	118fa <smpCleanup>

00011930 <smpSendPairingFailed>:
   11930:	b538      	push	{r3, r4, r5, lr}
   11932:	4604      	mov	r4, r0
   11934:	200a      	movs	r0, #10
   11936:	460d      	mov	r5, r1
   11938:	f7ff f8d4 	bl	10ae4 <smpMsgAlloc>
   1193c:	b140      	cbz	r0, 11950 <smpSendPairingFailed+0x20>
   1193e:	2305      	movs	r3, #5
   11940:	7203      	strb	r3, [r0, #8]
   11942:	7245      	strb	r5, [r0, #9]
   11944:	4601      	mov	r1, r0
   11946:	4620      	mov	r0, r4
   11948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1194c:	f7ff b87f 	b.w	10a4e <smpSendPkt>
   11950:	bd38      	pop	{r3, r4, r5, pc}

00011952 <smpActPairingFailed>:
   11952:	b538      	push	{r3, r4, r5, lr}
   11954:	4605      	mov	r5, r0
   11956:	460c      	mov	r4, r1
   11958:	f7ff ffcf 	bl	118fa <smpCleanup>
   1195c:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   11960:	2200      	movs	r2, #0
   11962:	2101      	movs	r1, #1
   11964:	f7fd fee0 	bl	f728 <DmConnSetIdle>
   11968:	232b      	movs	r3, #43	; 0x2b
   1196a:	70a3      	strb	r3, [r4, #2]
   1196c:	4620      	mov	r0, r4
   1196e:	f7fe faf3 	bl	ff58 <DmSmpCbackExec>
   11972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11976:	f7fe bca3 	b.w	102c0 <DmSecGetEccKey>

0001197a <smpActPairingCancel>:
   1197a:	b538      	push	{r3, r4, r5, lr}
   1197c:	4605      	mov	r5, r0
   1197e:	460c      	mov	r4, r1
   11980:	78c9      	ldrb	r1, [r1, #3]
   11982:	f7ff ffd5 	bl	11930 <smpSendPairingFailed>
   11986:	4621      	mov	r1, r4
   11988:	4628      	mov	r0, r5
   1198a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1198e:	f7ff bfe0 	b.w	11952 <smpActPairingFailed>

00011992 <smpActStorePin>:
   11992:	b538      	push	{r3, r4, r5, lr}
   11994:	460c      	mov	r4, r1
   11996:	7d0a      	ldrb	r2, [r1, #20]
   11998:	4605      	mov	r5, r0
   1199a:	3104      	adds	r1, #4
   1199c:	6a00      	ldr	r0, [r0, #32]
   1199e:	f7fa fbdf 	bl	c160 <memcpy>
   119a2:	7d23      	ldrb	r3, [r4, #20]
   119a4:	2b03      	cmp	r3, #3
   119a6:	d107      	bne.n	119b8 <smpActStorePin+0x26>
   119a8:	6a28      	ldr	r0, [r5, #32]
   119aa:	220d      	movs	r2, #13
   119ac:	2100      	movs	r1, #0
   119ae:	3003      	adds	r0, #3
   119b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   119b4:	f7fa bcd2 	b.w	c35c <memset>
   119b8:	bd38      	pop	{r3, r4, r5, pc}

000119ba <smpActPairCnfCalc1>:
   119ba:	b510      	push	{r4, lr}
   119bc:	4604      	mov	r4, r0
   119be:	f7ff ffe8 	bl	11992 <smpActStorePin>
   119c2:	6a20      	ldr	r0, [r4, #32]
   119c4:	2110      	movs	r1, #16
   119c6:	3030      	adds	r0, #48	; 0x30
   119c8:	f007 fbd6 	bl	19178 <SecRand>
   119cc:	6a21      	ldr	r1, [r4, #32]
   119ce:	4620      	mov	r0, r4
   119d0:	f101 0230 	add.w	r2, r1, #48	; 0x30
   119d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   119d8:	f7fe bee0 	b.w	1079c <smpCalcC1Part1>

000119dc <smpActPairCnfCalc2>:
   119dc:	684a      	ldr	r2, [r1, #4]
   119de:	6a01      	ldr	r1, [r0, #32]
   119e0:	f7fe bf5e 	b.w	108a0 <smpCalcC1Part2>

000119e4 <smpActSendPairCnf>:
   119e4:	b538      	push	{r3, r4, r5, lr}
   119e6:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   119ea:	2b00      	cmp	r3, #0
   119ec:	bf14      	ite	ne
   119ee:	2303      	movne	r3, #3
   119f0:	2304      	moveq	r3, #4
   119f2:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   119f6:	4604      	mov	r4, r0
   119f8:	460d      	mov	r5, r1
   119fa:	f7ff ff77 	bl	118ec <smpStartRspTimer>
   119fe:	2019      	movs	r0, #25
   11a00:	f7ff f870 	bl	10ae4 <smpMsgAlloc>
   11a04:	b190      	cbz	r0, 11a2c <smpActSendPairCnf+0x48>
   11a06:	2303      	movs	r3, #3
   11a08:	7203      	strb	r3, [r0, #8]
   11a0a:	686b      	ldr	r3, [r5, #4]
   11a0c:	f100 0209 	add.w	r2, r0, #9
   11a10:	f103 0110 	add.w	r1, r3, #16
   11a14:	f853 5b04 	ldr.w	r5, [r3], #4
   11a18:	f842 5b04 	str.w	r5, [r2], #4
   11a1c:	428b      	cmp	r3, r1
   11a1e:	d1f9      	bne.n	11a14 <smpActSendPairCnf+0x30>
   11a20:	4601      	mov	r1, r0
   11a22:	4620      	mov	r0, r4
   11a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11a28:	f7ff b811 	b.w	10a4e <smpSendPkt>
   11a2c:	bd38      	pop	{r3, r4, r5, pc}

00011a2e <smpActPairCnfVerCalc1>:
   11a2e:	684b      	ldr	r3, [r1, #4]
   11a30:	6a01      	ldr	r1, [r0, #32]
   11a32:	f103 0209 	add.w	r2, r3, #9
   11a36:	b430      	push	{r4, r5}
   11a38:	3110      	adds	r1, #16
   11a3a:	4614      	mov	r4, r2
   11a3c:	3319      	adds	r3, #25
   11a3e:	f854 5b04 	ldr.w	r5, [r4], #4
   11a42:	f841 5b04 	str.w	r5, [r1], #4
   11a46:	429c      	cmp	r4, r3
   11a48:	d1f9      	bne.n	11a3e <smpActPairCnfVerCalc1+0x10>
   11a4a:	6a01      	ldr	r1, [r0, #32]
   11a4c:	bc30      	pop	{r4, r5}
   11a4e:	f7fe bea5 	b.w	1079c <smpCalcC1Part1>

00011a52 <smpActPairCnfVerCalc2>:
   11a52:	f7ff bfc3 	b.w	119dc <smpActPairCnfCalc2>

00011a56 <smpSendKey>:
   11a56:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a58:	4f5d      	ldr	r7, [pc, #372]	; (11bd0 <smpSendKey+0x17a>)
   11a5a:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
   11a5e:	b08b      	sub	sp, #44	; 0x2c
   11a60:	4604      	mov	r4, r0
   11a62:	460e      	mov	r6, r1
   11a64:	b343      	cbz	r3, 11ab8 <smpSendKey+0x62>
   11a66:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11a68:	781b      	ldrb	r3, [r3, #0]
   11a6a:	b32b      	cbz	r3, 11ab8 <smpSendKey+0x62>
   11a6c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
   11a70:	bb13      	cbnz	r3, 11ab8 <smpSendKey+0x62>
   11a72:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11a76:	f7fd fe81 	bl	f77c <DmConnRole>
   11a7a:	bb48      	cbnz	r0, 11ad0 <smpSendKey+0x7a>
   11a7c:	2302      	movs	r3, #2
   11a7e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   11a82:	232f      	movs	r3, #47	; 0x2f
   11a84:	f88d 3006 	strb.w	r3, [sp, #6]
   11a88:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11a8c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11a90:	2303      	movs	r3, #3
   11a92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   11a96:	2300      	movs	r3, #0
   11a98:	e9cd 3306 	strd	r3, r3, [sp, #24]
   11a9c:	f8ad 3020 	strh.w	r3, [sp, #32]
   11aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11aa2:	6919      	ldr	r1, [r3, #16]
   11aa4:	a802      	add	r0, sp, #8
   11aa6:	3110      	adds	r1, #16
   11aa8:	f006 fee9 	bl	1887e <Calc128Cpy>
   11aac:	a801      	add	r0, sp, #4
   11aae:	f7fe fa53 	bl	ff58 <DmSmpCbackExec>
   11ab2:	2307      	movs	r3, #7
   11ab4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11ab8:	2e00      	cmp	r6, #0
   11aba:	f000 8086 	beq.w	11bca <smpSendKey+0x174>
   11abe:	2e01      	cmp	r6, #1
   11ac0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11ac4:	d106      	bne.n	11ad4 <smpSendKey+0x7e>
   11ac6:	2b07      	cmp	r3, #7
   11ac8:	d106      	bne.n	11ad8 <smpSendKey+0x82>
   11aca:	4630      	mov	r0, r6
   11acc:	b00b      	add	sp, #44	; 0x2c
   11ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ad0:	2301      	movs	r3, #1
   11ad2:	e7d4      	b.n	11a7e <smpSendKey+0x28>
   11ad4:	2e03      	cmp	r6, #3
   11ad6:	d801      	bhi.n	11adc <smpSendKey+0x86>
   11ad8:	2b09      	cmp	r3, #9
   11ada:	d076      	beq.n	11bca <smpSendKey+0x174>
   11adc:	2b0a      	cmp	r3, #10
   11ade:	d074      	beq.n	11bca <smpSendKey+0x174>
   11ae0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   11ae4:	b10b      	cbz	r3, 11aea <smpSendKey+0x94>
   11ae6:	2600      	movs	r6, #0
   11ae8:	e7ef      	b.n	11aca <smpSendKey+0x74>
   11aea:	2019      	movs	r0, #25
   11aec:	f7fe fffa 	bl	10ae4 <smpMsgAlloc>
   11af0:	4605      	mov	r5, r0
   11af2:	2800      	cmp	r0, #0
   11af4:	d0f7      	beq.n	11ae6 <smpSendKey+0x90>
   11af6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11afa:	b96b      	cbnz	r3, 11b18 <smpSendKey+0xc2>
   11afc:	07f0      	lsls	r0, r6, #31
   11afe:	d539      	bpl.n	11b74 <smpSendKey+0x11e>
   11b00:	4620      	mov	r0, r4
   11b02:	f7fe ff75 	bl	109f0 <smpGenerateLtk>
   11b06:	2306      	movs	r3, #6
   11b08:	722b      	strb	r3, [r5, #8]
   11b0a:	6a21      	ldr	r1, [r4, #32]
   11b0c:	3104      	adds	r1, #4
   11b0e:	f105 0009 	add.w	r0, r5, #9
   11b12:	f006 feb4 	bl	1887e <Calc128Cpy>
   11b16:	e012      	b.n	11b3e <smpSendKey+0xe8>
   11b18:	2b06      	cmp	r3, #6
   11b1a:	d12b      	bne.n	11b74 <smpSendKey+0x11e>
   11b1c:	2307      	movs	r3, #7
   11b1e:	7203      	strb	r3, [r0, #8]
   11b20:	6a23      	ldr	r3, [r4, #32]
   11b22:	8b9b      	ldrh	r3, [r3, #28]
   11b24:	7243      	strb	r3, [r0, #9]
   11b26:	6a23      	ldr	r3, [r4, #32]
   11b28:	8b9b      	ldrh	r3, [r3, #28]
   11b2a:	0a1b      	lsrs	r3, r3, #8
   11b2c:	7283      	strb	r3, [r0, #10]
   11b2e:	6a22      	ldr	r2, [r4, #32]
   11b30:	f852 3f14 	ldr.w	r3, [r2, #20]!
   11b34:	f8c0 300b 	str.w	r3, [r0, #11]
   11b38:	6853      	ldr	r3, [r2, #4]
   11b3a:	f8c0 300f 	str.w	r3, [r0, #15]
   11b3e:	7a2b      	ldrb	r3, [r5, #8]
   11b40:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   11b44:	4629      	mov	r1, r5
   11b46:	4620      	mov	r0, r4
   11b48:	f7fe ff81 	bl	10a4e <smpSendPkt>
   11b4c:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
   11b50:	2e00      	cmp	r6, #0
   11b52:	d1c8      	bne.n	11ae6 <smpSendKey+0x90>
   11b54:	2004      	movs	r0, #4
   11b56:	f005 ff84 	bl	17a62 <WsfMsgAlloc>
   11b5a:	4601      	mov	r1, r0
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d0c2      	beq.n	11ae6 <smpSendKey+0x90>
   11b60:	230c      	movs	r3, #12
   11b62:	7083      	strb	r3, [r0, #2]
   11b64:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11b68:	8003      	strh	r3, [r0, #0]
   11b6a:	f897 01c8 	ldrb.w	r0, [r7, #456]	; 0x1c8
   11b6e:	f005 ff9c 	bl	17aaa <WsfMsgSend>
   11b72:	e7aa      	b.n	11aca <smpSendKey+0x74>
   11b74:	07b1      	lsls	r1, r6, #30
   11b76:	d508      	bpl.n	11b8a <smpSendKey+0x134>
   11b78:	b10b      	cbz	r3, 11b7e <smpSendKey+0x128>
   11b7a:	2b07      	cmp	r3, #7
   11b7c:	d105      	bne.n	11b8a <smpSendKey+0x134>
   11b7e:	2308      	movs	r3, #8
   11b80:	722b      	strb	r3, [r5, #8]
   11b82:	f7fe fab7 	bl	100f4 <DmSecGetLocalIrk>
   11b86:	4601      	mov	r1, r0
   11b88:	e7c1      	b.n	11b0e <smpSendKey+0xb8>
   11b8a:	2b08      	cmp	r3, #8
   11b8c:	d10b      	bne.n	11ba6 <smpSendKey+0x150>
   11b8e:	2309      	movs	r3, #9
   11b90:	722b      	strb	r3, [r5, #8]
   11b92:	2300      	movs	r3, #0
   11b94:	726b      	strb	r3, [r5, #9]
   11b96:	f003 fc81 	bl	1549c <HciGetBdAddr>
   11b9a:	4601      	mov	r1, r0
   11b9c:	f105 000a 	add.w	r0, r5, #10
   11ba0:	f006 fe22 	bl	187e8 <BdaCpy>
   11ba4:	e7cb      	b.n	11b3e <smpSendKey+0xe8>
   11ba6:	0772      	lsls	r2, r6, #29
   11ba8:	d50c      	bpl.n	11bc4 <smpSendKey+0x16e>
   11baa:	2b09      	cmp	r3, #9
   11bac:	d80a      	bhi.n	11bc4 <smpSendKey+0x16e>
   11bae:	f240 2281 	movw	r2, #641	; 0x281
   11bb2:	fa22 f303 	lsr.w	r3, r2, r3
   11bb6:	07db      	lsls	r3, r3, #31
   11bb8:	d504      	bpl.n	11bc4 <smpSendKey+0x16e>
   11bba:	230a      	movs	r3, #10
   11bbc:	722b      	strb	r3, [r5, #8]
   11bbe:	f7fe fa93 	bl	100e8 <DmSecGetLocalCsrk>
   11bc2:	e7e0      	b.n	11b86 <smpSendKey+0x130>
   11bc4:	4628      	mov	r0, r5
   11bc6:	f005 ff63 	bl	17a90 <WsfMsgFree>
   11bca:	2601      	movs	r6, #1
   11bcc:	e77d      	b.n	11aca <smpSendKey+0x74>
   11bce:	bf00      	nop
   11bd0:	10003738 	.word	0x10003738

00011bd4 <smpProcRcvKey>:
   11bd4:	b570      	push	{r4, r5, r6, lr}
   11bd6:	461e      	mov	r6, r3
   11bd8:	7a13      	ldrb	r3, [r2, #8]
   11bda:	2b06      	cmp	r3, #6
   11bdc:	460c      	mov	r4, r1
   11bde:	4605      	mov	r5, r0
   11be0:	f102 0109 	add.w	r1, r2, #9
   11be4:	d104      	bne.n	11bf0 <smpProcRcvKey+0x1c>
   11be6:	1d20      	adds	r0, r4, #4
   11be8:	f006 fe49 	bl	1887e <Calc128Cpy>
   11bec:	2200      	movs	r2, #0
   11bee:	e016      	b.n	11c1e <smpProcRcvKey+0x4a>
   11bf0:	2b07      	cmp	r3, #7
   11bf2:	d126      	bne.n	11c42 <smpProcRcvKey+0x6e>
   11bf4:	7a91      	ldrb	r1, [r2, #10]
   11bf6:	7a53      	ldrb	r3, [r2, #9]
   11bf8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   11bfc:	83a3      	strh	r3, [r4, #28]
   11bfe:	f852 3f0b 	ldr.w	r3, [r2, #11]!
   11c02:	6163      	str	r3, [r4, #20]
   11c04:	6853      	ldr	r3, [r2, #4]
   11c06:	61a3      	str	r3, [r4, #24]
   11c08:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11c0c:	f013 0f04 	tst.w	r3, #4
   11c10:	bf14      	ite	ne
   11c12:	2302      	movne	r3, #2
   11c14:	2301      	moveq	r3, #1
   11c16:	77e3      	strb	r3, [r4, #31]
   11c18:	2302      	movs	r3, #2
   11c1a:	77a3      	strb	r3, [r4, #30]
   11c1c:	2201      	movs	r2, #1
   11c1e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   11c22:	2b06      	cmp	r3, #6
   11c24:	d001      	beq.n	11c2a <smpProcRcvKey+0x56>
   11c26:	2b08      	cmp	r3, #8
   11c28:	d120      	bne.n	11c6c <smpProcRcvKey+0x98>
   11c2a:	3301      	adds	r3, #1
   11c2c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   11c30:	2500      	movs	r5, #0
   11c32:	b122      	cbz	r2, 11c3e <smpProcRcvKey+0x6a>
   11c34:	232f      	movs	r3, #47	; 0x2f
   11c36:	70a3      	strb	r3, [r4, #2]
   11c38:	4620      	mov	r0, r4
   11c3a:	f7fe f98d 	bl	ff58 <DmSmpCbackExec>
   11c3e:	4628      	mov	r0, r5
   11c40:	bd70      	pop	{r4, r5, r6, pc}
   11c42:	2b08      	cmp	r3, #8
   11c44:	d0cf      	beq.n	11be6 <smpProcRcvKey+0x12>
   11c46:	2b09      	cmp	r3, #9
   11c48:	d109      	bne.n	11c5e <smpProcRcvKey+0x8a>
   11c4a:	7a53      	ldrb	r3, [r2, #9]
   11c4c:	76a3      	strb	r3, [r4, #26]
   11c4e:	f102 010a 	add.w	r1, r2, #10
   11c52:	f104 0014 	add.w	r0, r4, #20
   11c56:	f006 fdc7 	bl	187e8 <BdaCpy>
   11c5a:	2304      	movs	r3, #4
   11c5c:	e7dd      	b.n	11c1a <smpProcRcvKey+0x46>
   11c5e:	2b0a      	cmp	r3, #10
   11c60:	d1c4      	bne.n	11bec <smpProcRcvKey+0x18>
   11c62:	1d20      	adds	r0, r4, #4
   11c64:	f006 fe0b 	bl	1887e <Calc128Cpy>
   11c68:	2308      	movs	r3, #8
   11c6a:	e7d6      	b.n	11c1a <smpProcRcvKey+0x46>
   11c6c:	07b0      	lsls	r0, r6, #30
   11c6e:	d503      	bpl.n	11c78 <smpProcRcvKey+0xa4>
   11c70:	2b07      	cmp	r3, #7
   11c72:	d101      	bne.n	11c78 <smpProcRcvKey+0xa4>
   11c74:	2308      	movs	r3, #8
   11c76:	e7d9      	b.n	11c2c <smpProcRcvKey+0x58>
   11c78:	0771      	lsls	r1, r6, #29
   11c7a:	d505      	bpl.n	11c88 <smpProcRcvKey+0xb4>
   11c7c:	2b07      	cmp	r3, #7
   11c7e:	d001      	beq.n	11c84 <smpProcRcvKey+0xb0>
   11c80:	2b09      	cmp	r3, #9
   11c82:	d101      	bne.n	11c88 <smpProcRcvKey+0xb4>
   11c84:	230a      	movs	r3, #10
   11c86:	e7d1      	b.n	11c2c <smpProcRcvKey+0x58>
   11c88:	2501      	movs	r5, #1
   11c8a:	e7d2      	b.n	11c32 <smpProcRcvKey+0x5e>

00011c8c <smpActMaxAttempts>:
   11c8c:	b510      	push	{r4, lr}
   11c8e:	4604      	mov	r4, r0
   11c90:	f7ff fe73 	bl	1197a <smpActPairingCancel>
   11c94:	230f      	movs	r3, #15
   11c96:	7323      	strb	r3, [r4, #12]
   11c98:	4b04      	ldr	r3, [pc, #16]	; (11cac <smpActMaxAttempts+0x20>)
   11c9a:	681b      	ldr	r3, [r3, #0]
   11c9c:	4620      	mov	r0, r4
   11c9e:	8819      	ldrh	r1, [r3, #0]
   11ca0:	f006 f8aa 	bl	17df8 <WsfTimerStartMs>
   11ca4:	2300      	movs	r3, #0
   11ca6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   11caa:	bd10      	pop	{r4, pc}
   11cac:	100023a0 	.word	0x100023a0

00011cb0 <smpActAttemptRcvd>:
   11cb0:	2301      	movs	r3, #1
   11cb2:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11cb6:	4770      	bx	lr

00011cb8 <smpActCheckAttempts>:
   11cb8:	b510      	push	{r4, lr}
   11cba:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   11cbe:	4604      	mov	r4, r0
   11cc0:	b153      	cbz	r3, 11cd8 <smpActCheckAttempts+0x20>
   11cc2:	2300      	movs	r3, #0
   11cc4:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   11cc8:	2109      	movs	r1, #9
   11cca:	f7ff fe31 	bl	11930 <smpSendPairingFailed>
   11cce:	4620      	mov	r0, r4
   11cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cd4:	f7ff be11 	b.w	118fa <smpCleanup>
   11cd8:	bd10      	pop	{r4, pc}

00011cda <smpActPairingCmpl>:
   11cda:	b513      	push	{r0, r1, r4, lr}
   11cdc:	4604      	mov	r4, r0
   11cde:	f7ff fe0c 	bl	118fa <smpCleanup>
   11ce2:	2200      	movs	r2, #0
   11ce4:	2101      	movs	r1, #1
   11ce6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   11cea:	f7fd fd1d 	bl	f728 <DmConnSetIdle>
   11cee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   11cf2:	f88d 3004 	strb.w	r3, [sp, #4]
   11cf6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   11cfa:	f8ad 3000 	strh.w	r3, [sp]
   11cfe:	4668      	mov	r0, sp
   11d00:	232a      	movs	r3, #42	; 0x2a
   11d02:	f88d 3002 	strb.w	r3, [sp, #2]
   11d06:	f7fe f927 	bl	ff58 <DmSmpCbackExec>
   11d0a:	f7fe fad9 	bl	102c0 <DmSecGetEccKey>
   11d0e:	b002      	add	sp, #8
   11d10:	bd10      	pop	{r4, pc}

00011d12 <smpSmExecute>:
   11d12:	b570      	push	{r4, r5, r6, lr}
   11d14:	4604      	mov	r4, r0
   11d16:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11d1a:	460d      	mov	r5, r1
   11d1c:	f7fd fd2e 	bl	f77c <DmConnRole>
   11d20:	4b13      	ldr	r3, [pc, #76]	; (11d70 <smpSmExecute+0x5e>)
   11d22:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
   11d26:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
   11d2a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
   11d2e:	78ae      	ldrb	r6, [r5, #2]
   11d30:	2801      	cmp	r0, #1
   11d32:	bf18      	it	ne
   11d34:	461a      	movne	r2, r3
   11d36:	6813      	ldr	r3, [r2, #0]
   11d38:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   11d3c:	4603      	mov	r3, r0
   11d3e:	7819      	ldrb	r1, [r3, #0]
   11d40:	42b1      	cmp	r1, r6
   11d42:	d10b      	bne.n	11d5c <smpSmExecute+0x4a>
   11d44:	7859      	ldrb	r1, [r3, #1]
   11d46:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
   11d4a:	7899      	ldrb	r1, [r3, #2]
   11d4c:	6853      	ldr	r3, [r2, #4]
   11d4e:	4620      	mov	r0, r4
   11d50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   11d54:	4629      	mov	r1, r5
   11d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11d5a:	4718      	bx	r3
   11d5c:	f813 1f03 	ldrb.w	r1, [r3, #3]!
   11d60:	2900      	cmp	r1, #0
   11d62:	d1ec      	bne.n	11d3e <smpSmExecute+0x2c>
   11d64:	6890      	ldr	r0, [r2, #8]
   11d66:	f100 010c 	add.w	r1, r0, #12
   11d6a:	4299      	cmp	r1, r3
   11d6c:	d1e6      	bne.n	11d3c <smpSmExecute+0x2a>
   11d6e:	bd70      	pop	{r4, r5, r6, pc}
   11d70:	10003738 	.word	0x10003738

00011d74 <smpProcPairing>:
   11d74:	b513      	push	{r0, r1, r4, lr}
   11d76:	2300      	movs	r3, #0
   11d78:	7013      	strb	r3, [r2, #0]
   11d7a:	700b      	strb	r3, [r1, #0]
   11d7c:	7c83      	ldrb	r3, [r0, #18]
   11d7e:	2b01      	cmp	r3, #1
   11d80:	d127      	bne.n	11dd2 <smpProcPairing+0x5e>
   11d82:	7e43      	ldrb	r3, [r0, #25]
   11d84:	2b01      	cmp	r3, #1
   11d86:	d124      	bne.n	11dd2 <smpProcPairing+0x5e>
   11d88:	700b      	strb	r3, [r1, #0]
   11d8a:	7cc3      	ldrb	r3, [r0, #19]
   11d8c:	7e82      	ldrb	r2, [r0, #26]
   11d8e:	4013      	ands	r3, r2
   11d90:	f043 0304 	orr.w	r3, r3, #4
   11d94:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
   11d98:	2300      	movs	r3, #0
   11d9a:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   11d9e:	2a00      	cmp	r2, #0
   11da0:	d049      	beq.n	11e36 <smpProcPairing+0xc2>
   11da2:	7cc1      	ldrb	r1, [r0, #19]
   11da4:	4a2d      	ldr	r2, [pc, #180]	; (11e5c <smpProcPairing+0xe8>)
   11da6:	6812      	ldr	r2, [r2, #0]
   11da8:	2b00      	cmp	r3, #0
   11daa:	d046      	beq.n	11e3a <smpProcPairing+0xc6>
   11dac:	7993      	ldrb	r3, [r2, #6]
   11dae:	f003 0304 	and.w	r3, r3, #4
   11db2:	4219      	tst	r1, r3
   11db4:	d041      	beq.n	11e3a <smpProcPairing+0xc6>
   11db6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11dba:	f8ad 3004 	strh.w	r3, [sp, #4]
   11dbe:	f240 3303 	movw	r3, #771	; 0x303
   11dc2:	a901      	add	r1, sp, #4
   11dc4:	f8ad 3006 	strh.w	r3, [sp, #6]
   11dc8:	f7ff ffa3 	bl	11d12 <smpSmExecute>
   11dcc:	2000      	movs	r0, #0
   11dce:	b002      	add	sp, #8
   11dd0:	bd10      	pop	{r4, pc}
   11dd2:	7cc1      	ldrb	r1, [r0, #19]
   11dd4:	074b      	lsls	r3, r1, #29
   11dd6:	d402      	bmi.n	11dde <smpProcPairing+0x6a>
   11dd8:	7e83      	ldrb	r3, [r0, #26]
   11dda:	075c      	lsls	r4, r3, #29
   11ddc:	d509      	bpl.n	11df2 <smpProcPairing+0x7e>
   11dde:	7c44      	ldrb	r4, [r0, #17]
   11de0:	2c03      	cmp	r4, #3
   11de2:	d006      	beq.n	11df2 <smpProcPairing+0x7e>
   11de4:	7e03      	ldrb	r3, [r0, #24]
   11de6:	2b03      	cmp	r3, #3
   11de8:	d003      	beq.n	11df2 <smpProcPairing+0x7e>
   11dea:	2c01      	cmp	r4, #1
   11dec:	d809      	bhi.n	11e02 <smpProcPairing+0x8e>
   11dee:	2b01      	cmp	r3, #1
   11df0:	d81f      	bhi.n	11e32 <smpProcPairing+0xbe>
   11df2:	7e83      	ldrb	r3, [r0, #26]
   11df4:	4019      	ands	r1, r3
   11df6:	f021 0104 	bic.w	r1, r1, #4
   11dfa:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
   11dfe:	2301      	movs	r3, #1
   11e00:	e7cb      	b.n	11d9a <smpProcPairing+0x26>
   11e02:	2c04      	cmp	r4, #4
   11e04:	d113      	bne.n	11e2e <smpProcPairing+0xba>
   11e06:	2b02      	cmp	r3, #2
   11e08:	d013      	beq.n	11e32 <smpProcPairing+0xbe>
   11e0a:	1f19      	subs	r1, r3, #4
   11e0c:	424b      	negs	r3, r1
   11e0e:	414b      	adcs	r3, r1
   11e10:	7013      	strb	r3, [r2, #0]
   11e12:	7e01      	ldrb	r1, [r0, #24]
   11e14:	2902      	cmp	r1, #2
   11e16:	d102      	bne.n	11e1e <smpProcPairing+0xaa>
   11e18:	7c41      	ldrb	r1, [r0, #17]
   11e1a:	2902      	cmp	r1, #2
   11e1c:	d0b5      	beq.n	11d8a <smpProcPairing+0x16>
   11e1e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   11e22:	2900      	cmp	r1, #0
   11e24:	bf08      	it	eq
   11e26:	f083 0301 	eoreq.w	r3, r3, #1
   11e2a:	7013      	strb	r3, [r2, #0]
   11e2c:	e7ad      	b.n	11d8a <smpProcPairing+0x16>
   11e2e:	2300      	movs	r3, #0
   11e30:	e7ee      	b.n	11e10 <smpProcPairing+0x9c>
   11e32:	2301      	movs	r3, #1
   11e34:	e7ec      	b.n	11e10 <smpProcPairing+0x9c>
   11e36:	7e81      	ldrb	r1, [r0, #26]
   11e38:	e7b4      	b.n	11da4 <smpProcPairing+0x30>
   11e3a:	78d3      	ldrb	r3, [r2, #3]
   11e3c:	7d02      	ldrb	r2, [r0, #20]
   11e3e:	429a      	cmp	r2, r3
   11e40:	d302      	bcc.n	11e48 <smpProcPairing+0xd4>
   11e42:	7ec2      	ldrb	r2, [r0, #27]
   11e44:	429a      	cmp	r2, r3
   11e46:	d206      	bcs.n	11e56 <smpProcPairing+0xe2>
   11e48:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11e4c:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e50:	f240 6303 	movw	r3, #1539	; 0x603
   11e54:	e7b5      	b.n	11dc2 <smpProcPairing+0x4e>
   11e56:	2001      	movs	r0, #1
   11e58:	e7b9      	b.n	11dce <smpProcPairing+0x5a>
   11e5a:	bf00      	nop
   11e5c:	100023a0 	.word	0x100023a0

00011e60 <smpAuthReq>:
   11e60:	b510      	push	{r4, lr}
   11e62:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11e66:	f890 402d 	ldrb.w	r4, [r0, #45]	; 0x2d
   11e6a:	b086      	sub	sp, #24
   11e6c:	f013 0304 	ands.w	r3, r3, #4
   11e70:	f8ad 4000 	strh.w	r4, [sp]
   11e74:	d00b      	beq.n	11e8e <smpAuthReq+0x2e>
   11e76:	232e      	movs	r3, #46	; 0x2e
   11e78:	4668      	mov	r0, sp
   11e7a:	f88d 3002 	strb.w	r3, [sp, #2]
   11e7e:	f88d 1004 	strb.w	r1, [sp, #4]
   11e82:	f88d 2005 	strb.w	r2, [sp, #5]
   11e86:	f7fe f867 	bl	ff58 <DmSmpCbackExec>
   11e8a:	b006      	add	sp, #24
   11e8c:	bd10      	pop	{r4, pc}
   11e8e:	2204      	movs	r2, #4
   11e90:	f8ad 3004 	strh.w	r3, [sp, #4]
   11e94:	f88d 3006 	strb.w	r3, [sp, #6]
   11e98:	4669      	mov	r1, sp
   11e9a:	2303      	movs	r3, #3
   11e9c:	f88d 2002 	strb.w	r2, [sp, #2]
   11ea0:	f88d 3014 	strb.w	r3, [sp, #20]
   11ea4:	f7ff ff35 	bl	11d12 <smpSmExecute>
   11ea8:	e7ef      	b.n	11e8a <smpAuthReq+0x2a>
   11eaa:	bf00      	nop

00011eac <smpiActPairReq>:
   11eac:	b538      	push	{r3, r4, r5, lr}
   11eae:	2201      	movs	r2, #1
   11eb0:	4604      	mov	r4, r0
   11eb2:	460d      	mov	r5, r1
   11eb4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
   11eb8:	4611      	mov	r1, r2
   11eba:	f7fd fc35 	bl	f728 <DmConnSetIdle>
   11ebe:	2302      	movs	r3, #2
   11ec0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   11ec4:	4620      	mov	r0, r4
   11ec6:	f7ff fd11 	bl	118ec <smpStartRspTimer>
   11eca:	2040      	movs	r0, #64	; 0x40
   11ecc:	f005 fd40 	bl	17950 <WsfBufAlloc>
   11ed0:	6220      	str	r0, [r4, #32]
   11ed2:	200f      	movs	r0, #15
   11ed4:	f7fe fe06 	bl	10ae4 <smpMsgAlloc>
   11ed8:	4601      	mov	r1, r0
   11eda:	b1e0      	cbz	r0, 11f16 <smpiActPairReq+0x6a>
   11edc:	2301      	movs	r3, #1
   11ede:	7203      	strb	r3, [r0, #8]
   11ee0:	4b0d      	ldr	r3, [pc, #52]	; (11f18 <smpiActPairReq+0x6c>)
   11ee2:	681b      	ldr	r3, [r3, #0]
   11ee4:	789a      	ldrb	r2, [r3, #2]
   11ee6:	7242      	strb	r2, [r0, #9]
   11ee8:	792a      	ldrb	r2, [r5, #4]
   11eea:	7282      	strb	r2, [r0, #10]
   11eec:	796a      	ldrb	r2, [r5, #5]
   11eee:	72c2      	strb	r2, [r0, #11]
   11ef0:	791b      	ldrb	r3, [r3, #4]
   11ef2:	7303      	strb	r3, [r0, #12]
   11ef4:	79ab      	ldrb	r3, [r5, #6]
   11ef6:	7343      	strb	r3, [r0, #13]
   11ef8:	79eb      	ldrb	r3, [r5, #7]
   11efa:	7383      	strb	r3, [r0, #14]
   11efc:	4603      	mov	r3, r0
   11efe:	f853 0f08 	ldr.w	r0, [r3, #8]!
   11f02:	6120      	str	r0, [r4, #16]
   11f04:	8898      	ldrh	r0, [r3, #4]
   11f06:	82a0      	strh	r0, [r4, #20]
   11f08:	799b      	ldrb	r3, [r3, #6]
   11f0a:	75a3      	strb	r3, [r4, #22]
   11f0c:	4620      	mov	r0, r4
   11f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11f12:	f7fe bd9c 	b.w	10a4e <smpSendPkt>
   11f16:	bd38      	pop	{r3, r4, r5, pc}
   11f18:	100023a0 	.word	0x100023a0

00011f1c <smpiActCheckSecurityReq>:
   11f1c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   11f20:	b12a      	cbz	r2, 11f2e <smpiActCheckSecurityReq+0x12>
   11f22:	2200      	movs	r2, #0
   11f24:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
   11f28:	78c9      	ldrb	r1, [r1, #3]
   11f2a:	f7ff bd01 	b.w	11930 <smpSendPairingFailed>
   11f2e:	4770      	bx	lr

00011f30 <smpiActProcSecurityReq>:
   11f30:	b507      	push	{r0, r1, r2, lr}
   11f32:	2301      	movs	r3, #1
   11f34:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   11f38:	684b      	ldr	r3, [r1, #4]
   11f3a:	7a5b      	ldrb	r3, [r3, #9]
   11f3c:	f88d 3004 	strb.w	r3, [sp, #4]
   11f40:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   11f44:	f8ad 3000 	strh.w	r3, [sp]
   11f48:	4668      	mov	r0, sp
   11f4a:	2332      	movs	r3, #50	; 0x32
   11f4c:	f88d 3002 	strb.w	r3, [sp, #2]
   11f50:	f7fe f802 	bl	ff58 <DmSmpCbackExec>
   11f54:	b003      	add	sp, #12
   11f56:	f85d fb04 	ldr.w	pc, [sp], #4

00011f5a <smpiActProcPairRsp>:
   11f5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11f5c:	684a      	ldr	r2, [r1, #4]
   11f5e:	7d45      	ldrb	r5, [r0, #21]
   11f60:	4613      	mov	r3, r2
   11f62:	4604      	mov	r4, r0
   11f64:	f853 6f08 	ldr.w	r6, [r3, #8]!
   11f68:	f8c0 6017 	str.w	r6, [r0, #23]
   11f6c:	889e      	ldrh	r6, [r3, #4]
   11f6e:	f8a0 601b 	strh.w	r6, [r0, #27]
   11f72:	799b      	ldrb	r3, [r3, #6]
   11f74:	7743      	strb	r3, [r0, #29]
   11f76:	7b53      	ldrb	r3, [r2, #13]
   11f78:	43ab      	bics	r3, r5
   11f7a:	d103      	bne.n	11f84 <smpiActProcPairRsp+0x2a>
   11f7c:	7d85      	ldrb	r5, [r0, #22]
   11f7e:	7b93      	ldrb	r3, [r2, #14]
   11f80:	43ab      	bics	r3, r5
   11f82:	d007      	beq.n	11f94 <smpiActProcPairRsp+0x3a>
   11f84:	f640 2303 	movw	r3, #2563	; 0xa03
   11f88:	804b      	strh	r3, [r1, #2]
   11f8a:	4620      	mov	r0, r4
   11f8c:	f7ff fec1 	bl	11d12 <smpSmExecute>
   11f90:	b002      	add	sp, #8
   11f92:	bd70      	pop	{r4, r5, r6, pc}
   11f94:	4d09      	ldr	r5, [pc, #36]	; (11fbc <smpiActProcPairRsp+0x62>)
   11f96:	f10d 0207 	add.w	r2, sp, #7
   11f9a:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   11f9e:	f10d 0106 	add.w	r1, sp, #6
   11fa2:	4798      	blx	r3
   11fa4:	2800      	cmp	r0, #0
   11fa6:	d0f3      	beq.n	11f90 <smpiActProcPairRsp+0x36>
   11fa8:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
   11fac:	f89d 2007 	ldrb.w	r2, [sp, #7]
   11fb0:	f89d 1006 	ldrb.w	r1, [sp, #6]
   11fb4:	4620      	mov	r0, r4
   11fb6:	4798      	blx	r3
   11fb8:	e7ea      	b.n	11f90 <smpiActProcPairRsp+0x36>
   11fba:	bf00      	nop
   11fbc:	10003738 	.word	0x10003738

00011fc0 <smpiActProcPairCnf>:
   11fc0:	b538      	push	{r3, r4, r5, lr}
   11fc2:	6a02      	ldr	r2, [r0, #32]
   11fc4:	684b      	ldr	r3, [r1, #4]
   11fc6:	4604      	mov	r4, r0
   11fc8:	f103 0109 	add.w	r1, r3, #9
   11fcc:	3220      	adds	r2, #32
   11fce:	3319      	adds	r3, #25
   11fd0:	f851 0b04 	ldr.w	r0, [r1], #4
   11fd4:	f842 0b04 	str.w	r0, [r2], #4
   11fd8:	4299      	cmp	r1, r3
   11fda:	d1f9      	bne.n	11fd0 <smpiActProcPairCnf+0x10>
   11fdc:	2504      	movs	r5, #4
   11fde:	4620      	mov	r0, r4
   11fe0:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
   11fe4:	f7ff fc82 	bl	118ec <smpStartRspTimer>
   11fe8:	2019      	movs	r0, #25
   11fea:	f7fe fd7b 	bl	10ae4 <smpMsgAlloc>
   11fee:	4601      	mov	r1, r0
   11ff0:	b180      	cbz	r0, 12014 <smpiActProcPairCnf+0x54>
   11ff2:	7205      	strb	r5, [r0, #8]
   11ff4:	6a23      	ldr	r3, [r4, #32]
   11ff6:	3009      	adds	r0, #9
   11ff8:	f103 0230 	add.w	r2, r3, #48	; 0x30
   11ffc:	3340      	adds	r3, #64	; 0x40
   11ffe:	f852 5b04 	ldr.w	r5, [r2], #4
   12002:	f840 5b04 	str.w	r5, [r0], #4
   12006:	429a      	cmp	r2, r3
   12008:	d1f9      	bne.n	11ffe <smpiActProcPairCnf+0x3e>
   1200a:	4620      	mov	r0, r4
   1200c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12010:	f7fe bd1d 	b.w	10a4e <smpSendPkt>
   12014:	bd38      	pop	{r3, r4, r5, pc}

00012016 <smpiActCnfVerify>:
   12016:	b570      	push	{r4, r5, r6, lr}
   12018:	460e      	mov	r6, r1
   1201a:	6a05      	ldr	r5, [r0, #32]
   1201c:	4604      	mov	r4, r0
   1201e:	2210      	movs	r2, #16
   12020:	f105 0120 	add.w	r1, r5, #32
   12024:	6870      	ldr	r0, [r6, #4]
   12026:	f7fa f86b 	bl	c100 <memcmp>
   1202a:	b1c8      	cbz	r0, 12060 <smpiActCnfVerify+0x4a>
   1202c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   12030:	b19b      	cbz	r3, 1205a <smpiActCnfVerify+0x44>
   12032:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   12036:	4a0f      	ldr	r2, [pc, #60]	; (12074 <smpiActCnfVerify+0x5e>)
   12038:	3301      	adds	r3, #1
   1203a:	b2db      	uxtb	r3, r3
   1203c:	6812      	ldr	r2, [r2, #0]
   1203e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   12042:	7952      	ldrb	r2, [r2, #5]
   12044:	429a      	cmp	r2, r3
   12046:	d108      	bne.n	1205a <smpiActCnfVerify+0x44>
   12048:	f640 130d 	movw	r3, #2317	; 0x90d
   1204c:	8073      	strh	r3, [r6, #2]
   1204e:	4631      	mov	r1, r6
   12050:	4620      	mov	r0, r4
   12052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12056:	f7ff be5c 	b.w	11d12 <smpSmExecute>
   1205a:	f240 4303 	movw	r3, #1027	; 0x403
   1205e:	e7f5      	b.n	1204c <smpiActCnfVerify+0x36>
   12060:	f105 0330 	add.w	r3, r5, #48	; 0x30
   12064:	f105 0210 	add.w	r2, r5, #16
   12068:	4629      	mov	r1, r5
   1206a:	4620      	mov	r0, r4
   1206c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12070:	f7fe bc96 	b.w	109a0 <smpCalcS1>
   12074:	100023a0 	.word	0x100023a0

00012078 <smpiActStkEncrypt>:
   12078:	b530      	push	{r4, r5, lr}
   1207a:	7ec4      	ldrb	r4, [r0, #27]
   1207c:	7d03      	ldrb	r3, [r0, #20]
   1207e:	6849      	ldr	r1, [r1, #4]
   12080:	429c      	cmp	r4, r3
   12082:	b085      	sub	sp, #20
   12084:	bf28      	it	cs
   12086:	461c      	movcs	r4, r3
   12088:	4605      	mov	r5, r0
   1208a:	4622      	mov	r2, r4
   1208c:	4668      	mov	r0, sp
   1208e:	f7fa f867 	bl	c160 <memcpy>
   12092:	2100      	movs	r1, #0
   12094:	f1c4 0210 	rsb	r2, r4, #16
   12098:	eb0d 0004 	add.w	r0, sp, r4
   1209c:	f7fa f95e 	bl	c35c <memset>
   120a0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   120a4:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
   120a8:	f013 0f04 	tst.w	r3, #4
   120ac:	466a      	mov	r2, sp
   120ae:	bf14      	ite	ne
   120b0:	2102      	movne	r1, #2
   120b2:	2101      	moveq	r1, #1
   120b4:	f7ff fbc4 	bl	11840 <DmSmpEncryptReq>
   120b8:	b005      	add	sp, #20
   120ba:	bd30      	pop	{r4, r5, pc}

000120bc <smpiActSetupKeyDist>:
   120bc:	b538      	push	{r3, r4, r5, lr}
   120be:	4604      	mov	r4, r0
   120c0:	460d      	mov	r5, r1
   120c2:	f7ff fc13 	bl	118ec <smpStartRspTimer>
   120c6:	6a23      	ldr	r3, [r4, #32]
   120c8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   120cc:	801a      	strh	r2, [r3, #0]
   120ce:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   120d2:	f012 0f04 	tst.w	r2, #4
   120d6:	bf14      	ite	ne
   120d8:	2202      	movne	r2, #2
   120da:	2201      	moveq	r2, #1
   120dc:	77da      	strb	r2, [r3, #31]
   120de:	7ee2      	ldrb	r2, [r4, #27]
   120e0:	7d21      	ldrb	r1, [r4, #20]
   120e2:	428a      	cmp	r2, r1
   120e4:	bf28      	it	cs
   120e6:	460a      	movcs	r2, r1
   120e8:	f883 2020 	strb.w	r2, [r3, #32]
   120ec:	2300      	movs	r3, #0
   120ee:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   120f2:	7f62      	ldrb	r2, [r4, #29]
   120f4:	7da3      	ldrb	r3, [r4, #22]
   120f6:	4013      	ands	r3, r2
   120f8:	07d8      	lsls	r0, r3, #31
   120fa:	d518      	bpl.n	1212e <smpiActSetupKeyDist+0x72>
   120fc:	4a0f      	ldr	r2, [pc, #60]	; (1213c <smpiActSetupKeyDist+0x80>)
   120fe:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12102:	b192      	cbz	r2, 1212a <smpiActSetupKeyDist+0x6e>
   12104:	6b62      	ldr	r2, [r4, #52]	; 0x34
   12106:	7812      	ldrb	r2, [r2, #0]
   12108:	b17a      	cbz	r2, 1212a <smpiActSetupKeyDist+0x6e>
   1210a:	0799      	lsls	r1, r3, #30
   1210c:	d502      	bpl.n	12114 <smpiActSetupKeyDist+0x58>
   1210e:	2308      	movs	r3, #8
   12110:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12114:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   12118:	b97b      	cbnz	r3, 1213a <smpiActSetupKeyDist+0x7e>
   1211a:	230c      	movs	r3, #12
   1211c:	70ab      	strb	r3, [r5, #2]
   1211e:	4629      	mov	r1, r5
   12120:	4620      	mov	r0, r4
   12122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12126:	f7ff bdf4 	b.w	11d12 <smpSmExecute>
   1212a:	2306      	movs	r3, #6
   1212c:	e7f0      	b.n	12110 <smpiActSetupKeyDist+0x54>
   1212e:	079a      	lsls	r2, r3, #30
   12130:	d4ed      	bmi.n	1210e <smpiActSetupKeyDist+0x52>
   12132:	075b      	lsls	r3, r3, #29
   12134:	d5ee      	bpl.n	12114 <smpiActSetupKeyDist+0x58>
   12136:	230a      	movs	r3, #10
   12138:	e7ea      	b.n	12110 <smpiActSetupKeyDist+0x54>
   1213a:	bd38      	pop	{r3, r4, r5, pc}
   1213c:	10003738 	.word	0x10003738

00012140 <smpiActRcvKey>:
   12140:	b538      	push	{r3, r4, r5, lr}
   12142:	7d82      	ldrb	r2, [r0, #22]
   12144:	7f43      	ldrb	r3, [r0, #29]
   12146:	460d      	mov	r5, r1
   12148:	4013      	ands	r3, r2
   1214a:	684a      	ldr	r2, [r1, #4]
   1214c:	6a01      	ldr	r1, [r0, #32]
   1214e:	4604      	mov	r4, r0
   12150:	f7ff fd40 	bl	11bd4 <smpProcRcvKey>
   12154:	b150      	cbz	r0, 1216c <smpiActRcvKey+0x2c>
   12156:	2300      	movs	r3, #0
   12158:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1215c:	230c      	movs	r3, #12
   1215e:	70ab      	strb	r3, [r5, #2]
   12160:	4629      	mov	r1, r5
   12162:	4620      	mov	r0, r4
   12164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12168:	f7ff bdd3 	b.w	11d12 <smpSmExecute>
   1216c:	bd38      	pop	{r3, r4, r5, pc}

0001216e <smpiActSendKey>:
   1216e:	b538      	push	{r3, r4, r5, lr}
   12170:	460d      	mov	r5, r1
   12172:	7f03      	ldrb	r3, [r0, #28]
   12174:	7d41      	ldrb	r1, [r0, #21]
   12176:	4019      	ands	r1, r3
   12178:	4604      	mov	r4, r0
   1217a:	f7ff fc6c 	bl	11a56 <smpSendKey>
   1217e:	b138      	cbz	r0, 12190 <smpiActSendKey+0x22>
   12180:	230e      	movs	r3, #14
   12182:	70ab      	strb	r3, [r5, #2]
   12184:	4629      	mov	r1, r5
   12186:	4620      	mov	r0, r4
   12188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1218c:	f7ff bdc1 	b.w	11d12 <smpSmExecute>
   12190:	bd38      	pop	{r3, r4, r5, pc}
   12192:	bf00      	nop

00012194 <smpiScActAuthSelect>:
   12194:	f7ff b8cf 	b.w	11336 <smpScActAuthSelect>

00012198 <smpiScActSendPubKey>:
   12198:	230c      	movs	r3, #12
   1219a:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   1219e:	f7fe be0a 	b.w	10db6 <smpScSendPubKey>

000121a2 <smpiScActJwncSetup>:
   121a2:	b538      	push	{r3, r4, r5, lr}
   121a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   121a6:	4d0b      	ldr	r5, [pc, #44]	; (121d4 <smpiScActJwncSetup+0x32>)
   121a8:	4604      	mov	r4, r0
   121aa:	2110      	movs	r1, #16
   121ac:	68d8      	ldr	r0, [r3, #12]
   121ae:	f006 ffe3 	bl	19178 <SecRand>
   121b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   121b4:	68d8      	ldr	r0, [r3, #12]
   121b6:	4629      	mov	r1, r5
   121b8:	3020      	adds	r0, #32
   121ba:	f006 fb60 	bl	1887e <Calc128Cpy>
   121be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   121c0:	68d8      	ldr	r0, [r3, #12]
   121c2:	4629      	mov	r1, r5
   121c4:	3030      	adds	r0, #48	; 0x30
   121c6:	f006 fb5a 	bl	1887e <Calc128Cpy>
   121ca:	2303      	movs	r3, #3
   121cc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   121d0:	bd38      	pop	{r3, r4, r5, pc}
   121d2:	bf00      	nop
   121d4:	00022b54 	.word	0x00022b54

000121d8 <smpiScActJwncSendRand>:
   121d8:	b538      	push	{r3, r4, r5, lr}
   121da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   121dc:	4604      	mov	r4, r0
   121de:	460d      	mov	r5, r1
   121e0:	68d8      	ldr	r0, [r3, #12]
   121e2:	6849      	ldr	r1, [r1, #4]
   121e4:	2210      	movs	r2, #16
   121e6:	3109      	adds	r1, #9
   121e8:	3040      	adds	r0, #64	; 0x40
   121ea:	f006 fb83 	bl	188f4 <WStrReverseCpy>
   121ee:	2304      	movs	r3, #4
   121f0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   121f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   121f6:	4629      	mov	r1, r5
   121f8:	68da      	ldr	r2, [r3, #12]
   121fa:	4620      	mov	r0, r4
   121fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12200:	f7fe be33 	b.w	10e6a <smpScSendRand>

00012204 <smpiScActJwncCalcF4>:
   12204:	b538      	push	{r3, r4, r5, lr}
   12206:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12208:	4604      	mov	r4, r0
   1220a:	460d      	mov	r5, r1
   1220c:	68d8      	ldr	r0, [r3, #12]
   1220e:	6849      	ldr	r1, [r1, #4]
   12210:	2210      	movs	r2, #16
   12212:	3109      	adds	r1, #9
   12214:	4410      	add	r0, r2
   12216:	f006 fb6d 	bl	188f4 <WStrReverseCpy>
   1221a:	4629      	mov	r1, r5
   1221c:	4620      	mov	r0, r4
   1221e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12222:	f7ff b8d2 	b.w	113ca <smpScActJwncCalcF4>

00012226 <smpiScActJwncCalcG2>:
   12226:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12228:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1222a:	4604      	mov	r4, r0
   1222c:	68d8      	ldr	r0, [r3, #12]
   1222e:	460d      	mov	r5, r1
   12230:	2210      	movs	r2, #16
   12232:	6849      	ldr	r1, [r1, #4]
   12234:	3040      	adds	r0, #64	; 0x40
   12236:	f7f9 ff63 	bl	c100 <memcmp>
   1223a:	b168      	cbz	r0, 12258 <smpiScActJwncCalcG2+0x32>
   1223c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12240:	f8ad 3004 	strh.w	r3, [sp, #4]
   12244:	a901      	add	r1, sp, #4
   12246:	f240 4303 	movw	r3, #1027	; 0x403
   1224a:	4620      	mov	r0, r4
   1224c:	f8ad 3006 	strh.w	r3, [sp, #6]
   12250:	f7ff fd5f 	bl	11d12 <smpSmExecute>
   12254:	b003      	add	sp, #12
   12256:	bd30      	pop	{r4, r5, pc}
   12258:	4629      	mov	r1, r5
   1225a:	4620      	mov	r0, r4
   1225c:	f7ff f8d7 	bl	1140e <smpScActJwncCalcG2>
   12260:	e7f8      	b.n	12254 <smpiScActJwncCalcG2+0x2e>

00012262 <smpiScActPkCalcCa>:
   12262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12264:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12266:	78da      	ldrb	r2, [r3, #3]
   12268:	4604      	mov	r4, r0
   1226a:	460d      	mov	r5, r1
   1226c:	b9da      	cbnz	r2, 122a6 <smpiScActPkCalcCa+0x44>
   1226e:	68d8      	ldr	r0, [r3, #12]
   12270:	4919      	ldr	r1, [pc, #100]	; (122d8 <smpiScActPkCalcCa+0x76>)
   12272:	3020      	adds	r0, #32
   12274:	f006 fb03 	bl	1887e <Calc128Cpy>
   12278:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1227a:	4917      	ldr	r1, [pc, #92]	; (122d8 <smpiScActPkCalcCa+0x76>)
   1227c:	68d8      	ldr	r0, [r3, #12]
   1227e:	3030      	adds	r0, #48	; 0x30
   12280:	f006 fafd 	bl	1887e <Calc128Cpy>
   12284:	7d2a      	ldrb	r2, [r5, #20]
   12286:	2a03      	cmp	r2, #3
   12288:	d80d      	bhi.n	122a6 <smpiScActPkCalcCa+0x44>
   1228a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1228c:	68d8      	ldr	r0, [r3, #12]
   1228e:	1d2e      	adds	r6, r5, #4
   12290:	4631      	mov	r1, r6
   12292:	302d      	adds	r0, #45	; 0x2d
   12294:	f006 fb2e 	bl	188f4 <WStrReverseCpy>
   12298:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1229a:	7d2a      	ldrb	r2, [r5, #20]
   1229c:	68d8      	ldr	r0, [r3, #12]
   1229e:	4631      	mov	r1, r6
   122a0:	303d      	adds	r0, #61	; 0x3d
   122a2:	f006 fb27 	bl	188f4 <WStrReverseCpy>
   122a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   122a8:	2110      	movs	r1, #16
   122aa:	68d8      	ldr	r0, [r3, #12]
   122ac:	f006 ff64 	bl	19178 <SecRand>
   122b0:	f7fe f806 	bl	102c0 <DmSecGetEccKey>
   122b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   122b6:	4606      	mov	r6, r0
   122b8:	4620      	mov	r0, r4
   122ba:	689f      	ldr	r7, [r3, #8]
   122bc:	f7fe fe25 	bl	10f0a <smpGetPkBit>
   122c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   122c2:	68db      	ldr	r3, [r3, #12]
   122c4:	4632      	mov	r2, r6
   122c6:	e9cd 0300 	strd	r0, r3, [sp]
   122ca:	4629      	mov	r1, r5
   122cc:	463b      	mov	r3, r7
   122ce:	4620      	mov	r0, r4
   122d0:	f7fe fd02 	bl	10cd8 <SmpScCalcF4>
   122d4:	b003      	add	sp, #12
   122d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122d8:	00022b54 	.word	0x00022b54

000122dc <smpiScActPkCalcCb>:
   122dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   122de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122e0:	4604      	mov	r4, r0
   122e2:	460d      	mov	r5, r1
   122e4:	68d8      	ldr	r0, [r3, #12]
   122e6:	6849      	ldr	r1, [r1, #4]
   122e8:	2210      	movs	r2, #16
   122ea:	3109      	adds	r1, #9
   122ec:	4410      	add	r0, r2
   122ee:	f006 fb01 	bl	188f4 <WStrReverseCpy>
   122f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   122f4:	689e      	ldr	r6, [r3, #8]
   122f6:	f7fd ffe3 	bl	102c0 <DmSecGetEccKey>
   122fa:	4607      	mov	r7, r0
   122fc:	4620      	mov	r0, r4
   122fe:	f7fe fe04 	bl	10f0a <smpGetPkBit>
   12302:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12304:	68d9      	ldr	r1, [r3, #12]
   12306:	3110      	adds	r1, #16
   12308:	e9cd 0100 	strd	r0, r1, [sp]
   1230c:	463b      	mov	r3, r7
   1230e:	4632      	mov	r2, r6
   12310:	4629      	mov	r1, r5
   12312:	4620      	mov	r0, r4
   12314:	f7fe fce0 	bl	10cd8 <SmpScCalcF4>
   12318:	b003      	add	sp, #12
   1231a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001231c <smpiScActPkSendCnf>:
   1231c:	684a      	ldr	r2, [r1, #4]
   1231e:	f7fe bdcc 	b.w	10eba <smpScSendPairCnf>

00012322 <smpiScActPkSendRand>:
   12322:	f7ff bf59 	b.w	121d8 <smpiScActJwncSendRand>

00012326 <smpiScActPkCheck>:
   12326:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12328:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1232a:	6849      	ldr	r1, [r1, #4]
   1232c:	4604      	mov	r4, r0
   1232e:	68e8      	ldr	r0, [r5, #12]
   12330:	2210      	movs	r2, #16
   12332:	3040      	adds	r0, #64	; 0x40
   12334:	f7f9 fee4 	bl	c100 <memcmp>
   12338:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1233c:	b158      	cbz	r0, 12356 <smpiScActPkCheck+0x30>
   1233e:	f240 4303 	movw	r3, #1027	; 0x403
   12342:	f8ad 2004 	strh.w	r2, [sp, #4]
   12346:	f8ad 3006 	strh.w	r3, [sp, #6]
   1234a:	a901      	add	r1, sp, #4
   1234c:	4620      	mov	r0, r4
   1234e:	f7ff fce0 	bl	11d12 <smpSmExecute>
   12352:	b003      	add	sp, #12
   12354:	bd30      	pop	{r4, r5, pc}
   12356:	78eb      	ldrb	r3, [r5, #3]
   12358:	3301      	adds	r3, #1
   1235a:	b2db      	uxtb	r3, r3
   1235c:	2b13      	cmp	r3, #19
   1235e:	70eb      	strb	r3, [r5, #3]
   12360:	bf97      	itett	ls
   12362:	2303      	movls	r3, #3
   12364:	231a      	movhi	r3, #26
   12366:	f884 302f 	strbls.w	r3, [r4, #47]	; 0x2f
   1236a:	2319      	movls	r3, #25
   1236c:	f88d 3006 	strb.w	r3, [sp, #6]
   12370:	f8ad 2004 	strh.w	r2, [sp, #4]
   12374:	e7e9      	b.n	1234a <smpiScActPkCheck+0x24>

00012376 <smpiScActOobCalcCb>:
   12376:	b530      	push	{r4, r5, lr}
   12378:	7c83      	ldrb	r3, [r0, #18]
   1237a:	2b01      	cmp	r3, #1
   1237c:	b085      	sub	sp, #20
   1237e:	4604      	mov	r4, r0
   12380:	460d      	mov	r5, r1
   12382:	d005      	beq.n	12390 <smpiScActOobCalcCb+0x1a>
   12384:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12386:	4913      	ldr	r1, [pc, #76]	; (123d4 <smpiScActOobCalcCb+0x5e>)
   12388:	68d8      	ldr	r0, [r3, #12]
   1238a:	3020      	adds	r0, #32
   1238c:	f006 fa77 	bl	1887e <Calc128Cpy>
   12390:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12392:	7e62      	ldrb	r2, [r4, #25]
   12394:	68d8      	ldr	r0, [r3, #12]
   12396:	2a01      	cmp	r2, #1
   12398:	f100 0030 	add.w	r0, r0, #48	; 0x30
   1239c:	d10a      	bne.n	123b4 <smpiScActOobCalcCb+0x3e>
   1239e:	689b      	ldr	r3, [r3, #8]
   123a0:	9001      	str	r0, [sp, #4]
   123a2:	2200      	movs	r2, #0
   123a4:	9200      	str	r2, [sp, #0]
   123a6:	4629      	mov	r1, r5
   123a8:	461a      	mov	r2, r3
   123aa:	4620      	mov	r0, r4
   123ac:	f7fe fc94 	bl	10cd8 <SmpScCalcF4>
   123b0:	b005      	add	sp, #20
   123b2:	bd30      	pop	{r4, r5, pc}
   123b4:	4907      	ldr	r1, [pc, #28]	; (123d4 <smpiScActOobCalcCb+0x5e>)
   123b6:	f006 fa62 	bl	1887e <Calc128Cpy>
   123ba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   123be:	f8ad 300c 	strh.w	r3, [sp, #12]
   123c2:	a903      	add	r1, sp, #12
   123c4:	231b      	movs	r3, #27
   123c6:	4620      	mov	r0, r4
   123c8:	f88d 300e 	strb.w	r3, [sp, #14]
   123cc:	f7ff fca1 	bl	11d12 <smpSmExecute>
   123d0:	e7ee      	b.n	123b0 <smpiScActOobCalcCb+0x3a>
   123d2:	bf00      	nop
   123d4:	00022b54 	.word	0x00022b54

000123d8 <smpiScActOobSendRand>:
   123d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   123da:	6b43      	ldr	r3, [r0, #52]	; 0x34
   123dc:	68de      	ldr	r6, [r3, #12]
   123de:	7e43      	ldrb	r3, [r0, #25]
   123e0:	2b01      	cmp	r3, #1
   123e2:	4604      	mov	r4, r0
   123e4:	460d      	mov	r5, r1
   123e6:	d114      	bne.n	12412 <smpiScActOobSendRand+0x3a>
   123e8:	2210      	movs	r2, #16
   123ea:	6849      	ldr	r1, [r1, #4]
   123ec:	f106 0040 	add.w	r0, r6, #64	; 0x40
   123f0:	f7f9 fe86 	bl	c100 <memcmp>
   123f4:	b168      	cbz	r0, 12412 <smpiScActOobSendRand+0x3a>
   123f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   123fa:	f8ad 3004 	strh.w	r3, [sp, #4]
   123fe:	a901      	add	r1, sp, #4
   12400:	f240 4303 	movw	r3, #1027	; 0x403
   12404:	4620      	mov	r0, r4
   12406:	f8ad 3006 	strh.w	r3, [sp, #6]
   1240a:	f7ff fc82 	bl	11d12 <smpSmExecute>
   1240e:	b002      	add	sp, #8
   12410:	bd70      	pop	{r4, r5, r6, pc}
   12412:	2304      	movs	r3, #4
   12414:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12418:	4630      	mov	r0, r6
   1241a:	2110      	movs	r1, #16
   1241c:	f006 feac 	bl	19178 <SecRand>
   12420:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12422:	4629      	mov	r1, r5
   12424:	68da      	ldr	r2, [r3, #12]
   12426:	4620      	mov	r0, r4
   12428:	f7fe fd1f 	bl	10e6a <smpScSendRand>
   1242c:	e7ef      	b.n	1240e <smpiScActOobSendRand+0x36>

0001242e <smpiScActOobProcRand>:
   1242e:	b538      	push	{r3, r4, r5, lr}
   12430:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12432:	4604      	mov	r4, r0
   12434:	460d      	mov	r5, r1
   12436:	68d8      	ldr	r0, [r3, #12]
   12438:	6849      	ldr	r1, [r1, #4]
   1243a:	2210      	movs	r2, #16
   1243c:	3109      	adds	r1, #9
   1243e:	4410      	add	r0, r2
   12440:	f006 fa58 	bl	188f4 <WStrReverseCpy>
   12444:	4629      	mov	r1, r5
   12446:	4620      	mov	r0, r4
   12448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1244c:	f7ff b870 	b.w	11530 <smpScActCalcSharedSecret>

00012450 <smpiScActDHKeyCheckSend>:
   12450:	b538      	push	{r3, r4, r5, lr}
   12452:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12454:	4604      	mov	r4, r0
   12456:	68d8      	ldr	r0, [r3, #12]
   12458:	2210      	movs	r2, #16
   1245a:	460d      	mov	r5, r1
   1245c:	4410      	add	r0, r2
   1245e:	6849      	ldr	r1, [r1, #4]
   12460:	f006 fa48 	bl	188f4 <WStrReverseCpy>
   12464:	230d      	movs	r3, #13
   12466:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1246a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1246c:	4629      	mov	r1, r5
   1246e:	68da      	ldr	r2, [r3, #12]
   12470:	4620      	mov	r0, r4
   12472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12476:	f7fe bcd0 	b.w	10e1a <smpScSendDHKeyCheck>

0001247a <smpiScActDHKeyCheckVerify>:
   1247a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1247c:	6b47      	ldr	r7, [r0, #52]	; 0x34
   1247e:	4604      	mov	r4, r0
   12480:	68fb      	ldr	r3, [r7, #12]
   12482:	6848      	ldr	r0, [r1, #4]
   12484:	2210      	movs	r2, #16
   12486:	b085      	sub	sp, #20
   12488:	1899      	adds	r1, r3, r2
   1248a:	3009      	adds	r0, #9
   1248c:	f7f9 fe38 	bl	c100 <memcmp>
   12490:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
   12494:	4606      	mov	r6, r0
   12496:	b9c0      	cbnz	r0, 124ca <smpiScActDHKeyCheckVerify+0x50>
   12498:	7ee3      	ldrb	r3, [r4, #27]
   1249a:	7d24      	ldrb	r4, [r4, #20]
   1249c:	6939      	ldr	r1, [r7, #16]
   1249e:	429c      	cmp	r4, r3
   124a0:	bf28      	it	cs
   124a2:	461c      	movcs	r4, r3
   124a4:	4622      	mov	r2, r4
   124a6:	3110      	adds	r1, #16
   124a8:	4668      	mov	r0, sp
   124aa:	f7f9 fe59 	bl	c160 <memcpy>
   124ae:	f1c4 0210 	rsb	r2, r4, #16
   124b2:	4631      	mov	r1, r6
   124b4:	eb0d 0004 	add.w	r0, sp, r4
   124b8:	f7f9 ff50 	bl	c35c <memset>
   124bc:	466a      	mov	r2, sp
   124be:	2103      	movs	r1, #3
   124c0:	4628      	mov	r0, r5
   124c2:	f7ff f9bd 	bl	11840 <DmSmpEncryptReq>
   124c6:	b005      	add	sp, #20
   124c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124ca:	f640 331c 	movw	r3, #2844	; 0xb1c
   124ce:	4669      	mov	r1, sp
   124d0:	4620      	mov	r0, r4
   124d2:	f8ad 5000 	strh.w	r5, [sp]
   124d6:	f8ad 3002 	strh.w	r3, [sp, #2]
   124da:	f7ff fc1a 	bl	11d12 <smpSmExecute>
   124de:	e7f2      	b.n	124c6 <smpiScActDHKeyCheckVerify+0x4c>

000124e0 <smprActSendSecurityReq>:
   124e0:	b538      	push	{r3, r4, r5, lr}
   124e2:	2301      	movs	r3, #1
   124e4:	4604      	mov	r4, r0
   124e6:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   124ea:	200a      	movs	r0, #10
   124ec:	460d      	mov	r5, r1
   124ee:	f7fe faf9 	bl	10ae4 <smpMsgAlloc>
   124f2:	b148      	cbz	r0, 12508 <smprActSendSecurityReq+0x28>
   124f4:	230b      	movs	r3, #11
   124f6:	7203      	strb	r3, [r0, #8]
   124f8:	792b      	ldrb	r3, [r5, #4]
   124fa:	7243      	strb	r3, [r0, #9]
   124fc:	4601      	mov	r1, r0
   124fe:	4620      	mov	r0, r4
   12500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12504:	f7fe baa3 	b.w	10a4e <smpSendPkt>
   12508:	bd38      	pop	{r3, r4, r5, pc}

0001250a <smprActCheckSecurityReq>:
   1250a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   1250e:	b10b      	cbz	r3, 12514 <smprActCheckSecurityReq+0xa>
   12510:	f7ff ba1f 	b.w	11952 <smpActPairingFailed>
   12514:	4770      	bx	lr

00012516 <smprActClearSecurityReq>:
   12516:	2300      	movs	r3, #0
   12518:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
   1251c:	4770      	bx	lr

0001251e <smprActProcPairReq>:
   1251e:	6a03      	ldr	r3, [r0, #32]
   12520:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12522:	4604      	mov	r4, r0
   12524:	460d      	mov	r5, r1
   12526:	b96b      	cbnz	r3, 12544 <smprActProcPairReq+0x26>
   12528:	2040      	movs	r0, #64	; 0x40
   1252a:	f005 fa11 	bl	17950 <WsfBufAlloc>
   1252e:	6220      	str	r0, [r4, #32]
   12530:	b940      	cbnz	r0, 12544 <smprActProcPairReq+0x26>
   12532:	f640 0303 	movw	r3, #2051	; 0x803
   12536:	806b      	strh	r3, [r5, #2]
   12538:	4629      	mov	r1, r5
   1253a:	4620      	mov	r0, r4
   1253c:	f7ff fbe9 	bl	11d12 <smpSmExecute>
   12540:	b003      	add	sp, #12
   12542:	bd30      	pop	{r4, r5, pc}
   12544:	2201      	movs	r2, #1
   12546:	4611      	mov	r1, r2
   12548:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1254c:	f7fd f8ec 	bl	f728 <DmConnSetIdle>
   12550:	686b      	ldr	r3, [r5, #4]
   12552:	461a      	mov	r2, r3
   12554:	f852 0f08 	ldr.w	r0, [r2, #8]!
   12558:	6120      	str	r0, [r4, #16]
   1255a:	8890      	ldrh	r0, [r2, #4]
   1255c:	82a0      	strh	r0, [r4, #20]
   1255e:	7992      	ldrb	r2, [r2, #6]
   12560:	75a2      	strb	r2, [r4, #22]
   12562:	7a9a      	ldrb	r2, [r3, #10]
   12564:	f88d 2005 	strb.w	r2, [sp, #5]
   12568:	7ada      	ldrb	r2, [r3, #11]
   1256a:	f88d 2004 	strb.w	r2, [sp, #4]
   1256e:	7b5a      	ldrb	r2, [r3, #13]
   12570:	7b9b      	ldrb	r3, [r3, #14]
   12572:	f88d 3007 	strb.w	r3, [sp, #7]
   12576:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1257a:	f8ad 3000 	strh.w	r3, [sp]
   1257e:	4668      	mov	r0, sp
   12580:	2331      	movs	r3, #49	; 0x31
   12582:	f88d 2006 	strb.w	r2, [sp, #6]
   12586:	f88d 3002 	strb.w	r3, [sp, #2]
   1258a:	f7fd fce5 	bl	ff58 <DmSmpCbackExec>
   1258e:	e7d7      	b.n	12540 <smprActProcPairReq+0x22>

00012590 <smprActSendPairRsp>:
   12590:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12592:	2302      	movs	r3, #2
   12594:	75c3      	strb	r3, [r0, #23]
   12596:	4b20      	ldr	r3, [pc, #128]	; (12618 <smprActSendPairRsp+0x88>)
   12598:	4e20      	ldr	r6, [pc, #128]	; (1261c <smprActSendPairRsp+0x8c>)
   1259a:	681b      	ldr	r3, [r3, #0]
   1259c:	789a      	ldrb	r2, [r3, #2]
   1259e:	7602      	strb	r2, [r0, #24]
   125a0:	790a      	ldrb	r2, [r1, #4]
   125a2:	7642      	strb	r2, [r0, #25]
   125a4:	794a      	ldrb	r2, [r1, #5]
   125a6:	7682      	strb	r2, [r0, #26]
   125a8:	791b      	ldrb	r3, [r3, #4]
   125aa:	76c3      	strb	r3, [r0, #27]
   125ac:	798b      	ldrb	r3, [r1, #6]
   125ae:	7703      	strb	r3, [r0, #28]
   125b0:	79cb      	ldrb	r3, [r1, #7]
   125b2:	7743      	strb	r3, [r0, #29]
   125b4:	460d      	mov	r5, r1
   125b6:	f8d6 31cc 	ldr.w	r3, [r6, #460]	; 0x1cc
   125ba:	f10d 0207 	add.w	r2, sp, #7
   125be:	f10d 0106 	add.w	r1, sp, #6
   125c2:	4604      	mov	r4, r0
   125c4:	4798      	blx	r3
   125c6:	b320      	cbz	r0, 12612 <smprActSendPairRsp+0x82>
   125c8:	796b      	ldrb	r3, [r5, #5]
   125ca:	7ce2      	ldrb	r2, [r4, #19]
   125cc:	f003 0308 	and.w	r3, r3, #8
   125d0:	4213      	tst	r3, r2
   125d2:	bf14      	ite	ne
   125d4:	230c      	movne	r3, #12
   125d6:	2303      	moveq	r3, #3
   125d8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   125dc:	4620      	mov	r0, r4
   125de:	f7ff f985 	bl	118ec <smpStartRspTimer>
   125e2:	200f      	movs	r0, #15
   125e4:	f7fe fa7e 	bl	10ae4 <smpMsgAlloc>
   125e8:	4601      	mov	r1, r0
   125ea:	b150      	cbz	r0, 12602 <smprActSendPairRsp+0x72>
   125ec:	4623      	mov	r3, r4
   125ee:	f853 0f17 	ldr.w	r0, [r3, #23]!
   125f2:	6088      	str	r0, [r1, #8]
   125f4:	8898      	ldrh	r0, [r3, #4]
   125f6:	8188      	strh	r0, [r1, #12]
   125f8:	799b      	ldrb	r3, [r3, #6]
   125fa:	738b      	strb	r3, [r1, #14]
   125fc:	4620      	mov	r0, r4
   125fe:	f7fe fa26 	bl	10a4e <smpSendPkt>
   12602:	f8d6 31d0 	ldr.w	r3, [r6, #464]	; 0x1d0
   12606:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1260a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1260e:	4620      	mov	r0, r4
   12610:	4798      	blx	r3
   12612:	b002      	add	sp, #8
   12614:	bd70      	pop	{r4, r5, r6, pc}
   12616:	bf00      	nop
   12618:	100023a0 	.word	0x100023a0
   1261c:	10003738 	.word	0x10003738

00012620 <smprActProcPairCnf>:
   12620:	b510      	push	{r4, lr}
   12622:	684b      	ldr	r3, [r1, #4]
   12624:	6a02      	ldr	r2, [r0, #32]
   12626:	f103 0109 	add.w	r1, r3, #9
   1262a:	3220      	adds	r2, #32
   1262c:	3319      	adds	r3, #25
   1262e:	f851 4b04 	ldr.w	r4, [r1], #4
   12632:	f842 4b04 	str.w	r4, [r2], #4
   12636:	4299      	cmp	r1, r3
   12638:	d1f9      	bne.n	1262e <smprActProcPairCnf+0xe>
   1263a:	2300      	movs	r3, #0
   1263c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12640:	bd10      	pop	{r4, pc}

00012642 <smprActProcPairCnfCalc1>:
   12642:	b510      	push	{r4, lr}
   12644:	4604      	mov	r4, r0
   12646:	f7ff ffeb 	bl	12620 <smprActProcPairCnf>
   1264a:	6a00      	ldr	r0, [r0, #32]
   1264c:	2110      	movs	r1, #16
   1264e:	3030      	adds	r0, #48	; 0x30
   12650:	f006 fd92 	bl	19178 <SecRand>
   12654:	6a21      	ldr	r1, [r4, #32]
   12656:	4620      	mov	r0, r4
   12658:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12660:	f7fe b89c 	b.w	1079c <smpCalcC1Part1>

00012664 <smprActCnfVerify>:
   12664:	b570      	push	{r4, r5, r6, lr}
   12666:	460e      	mov	r6, r1
   12668:	6a05      	ldr	r5, [r0, #32]
   1266a:	4604      	mov	r4, r0
   1266c:	2210      	movs	r2, #16
   1266e:	f105 0120 	add.w	r1, r5, #32
   12672:	6870      	ldr	r0, [r6, #4]
   12674:	f7f9 fd44 	bl	c100 <memcmp>
   12678:	b1a8      	cbz	r0, 126a6 <smprActCnfVerify+0x42>
   1267a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1267e:	4a0f      	ldr	r2, [pc, #60]	; (126bc <smprActCnfVerify+0x58>)
   12680:	3301      	adds	r3, #1
   12682:	b2db      	uxtb	r3, r3
   12684:	6812      	ldr	r2, [r2, #0]
   12686:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   1268a:	7952      	ldrb	r2, [r2, #5]
   1268c:	429a      	cmp	r2, r3
   1268e:	bf0c      	ite	eq
   12690:	f240 430d 	movweq	r3, #1037	; 0x40d
   12694:	f240 4303 	movwne	r3, #1027	; 0x403
   12698:	8073      	strh	r3, [r6, #2]
   1269a:	4631      	mov	r1, r6
   1269c:	4620      	mov	r0, r4
   1269e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   126a2:	f7ff bb36 	b.w	11d12 <smpSmExecute>
   126a6:	f105 0310 	add.w	r3, r5, #16
   126aa:	f105 0230 	add.w	r2, r5, #48	; 0x30
   126ae:	4629      	mov	r1, r5
   126b0:	4620      	mov	r0, r4
   126b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   126b6:	f7fe b973 	b.w	109a0 <smpCalcS1>
   126ba:	bf00      	nop
   126bc:	100023a0 	.word	0x100023a0

000126c0 <smprActSendPairRandom>:
   126c0:	b538      	push	{r3, r4, r5, lr}
   126c2:	7ec5      	ldrb	r5, [r0, #27]
   126c4:	7d03      	ldrb	r3, [r0, #20]
   126c6:	6849      	ldr	r1, [r1, #4]
   126c8:	429d      	cmp	r5, r3
   126ca:	4604      	mov	r4, r0
   126cc:	6a00      	ldr	r0, [r0, #32]
   126ce:	bf28      	it	cs
   126d0:	461d      	movcs	r5, r3
   126d2:	462a      	mov	r2, r5
   126d4:	3020      	adds	r0, #32
   126d6:	f7f9 fd43 	bl	c160 <memcpy>
   126da:	6a20      	ldr	r0, [r4, #32]
   126dc:	3020      	adds	r0, #32
   126de:	2100      	movs	r1, #0
   126e0:	f1c5 0210 	rsb	r2, r5, #16
   126e4:	4428      	add	r0, r5
   126e6:	f7f9 fe39 	bl	c35c <memset>
   126ea:	4620      	mov	r0, r4
   126ec:	f7ff f8fe 	bl	118ec <smpStartRspTimer>
   126f0:	2019      	movs	r0, #25
   126f2:	f7fe f9f7 	bl	10ae4 <smpMsgAlloc>
   126f6:	4601      	mov	r1, r0
   126f8:	b188      	cbz	r0, 1271e <smprActSendPairRandom+0x5e>
   126fa:	2304      	movs	r3, #4
   126fc:	7203      	strb	r3, [r0, #8]
   126fe:	6a23      	ldr	r3, [r4, #32]
   12700:	3009      	adds	r0, #9
   12702:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12706:	3340      	adds	r3, #64	; 0x40
   12708:	f852 5b04 	ldr.w	r5, [r2], #4
   1270c:	f840 5b04 	str.w	r5, [r0], #4
   12710:	429a      	cmp	r2, r3
   12712:	d1f9      	bne.n	12708 <smprActSendPairRandom+0x48>
   12714:	4620      	mov	r0, r4
   12716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1271a:	f7fe b998 	b.w	10a4e <smpSendPkt>
   1271e:	bd38      	pop	{r3, r4, r5, pc}

00012720 <smprActSendKey>:
   12720:	b538      	push	{r3, r4, r5, lr}
   12722:	460d      	mov	r5, r1
   12724:	7f43      	ldrb	r3, [r0, #29]
   12726:	7d81      	ldrb	r1, [r0, #22]
   12728:	4019      	ands	r1, r3
   1272a:	4604      	mov	r4, r0
   1272c:	f7ff f993 	bl	11a56 <smpSendKey>
   12730:	b330      	cbz	r0, 12780 <smprActSendKey+0x60>
   12732:	2300      	movs	r3, #0
   12734:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12738:	7f22      	ldrb	r2, [r4, #28]
   1273a:	7d63      	ldrb	r3, [r4, #21]
   1273c:	4013      	ands	r3, r2
   1273e:	07d8      	lsls	r0, r3, #31
   12740:	d518      	bpl.n	12774 <smprActSendKey+0x54>
   12742:	4a10      	ldr	r2, [pc, #64]	; (12784 <smprActSendKey+0x64>)
   12744:	f892 21d4 	ldrb.w	r2, [r2, #468]	; 0x1d4
   12748:	b192      	cbz	r2, 12770 <smprActSendKey+0x50>
   1274a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1274c:	7812      	ldrb	r2, [r2, #0]
   1274e:	b17a      	cbz	r2, 12770 <smprActSendKey+0x50>
   12750:	0799      	lsls	r1, r3, #30
   12752:	d502      	bpl.n	1275a <smprActSendKey+0x3a>
   12754:	2308      	movs	r3, #8
   12756:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1275a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   1275e:	b97b      	cbnz	r3, 12780 <smprActSendKey+0x60>
   12760:	230e      	movs	r3, #14
   12762:	70ab      	strb	r3, [r5, #2]
   12764:	4629      	mov	r1, r5
   12766:	4620      	mov	r0, r4
   12768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1276c:	f7ff bad1 	b.w	11d12 <smpSmExecute>
   12770:	2306      	movs	r3, #6
   12772:	e7f0      	b.n	12756 <smprActSendKey+0x36>
   12774:	079a      	lsls	r2, r3, #30
   12776:	d4ed      	bmi.n	12754 <smprActSendKey+0x34>
   12778:	075b      	lsls	r3, r3, #29
   1277a:	d5ee      	bpl.n	1275a <smprActSendKey+0x3a>
   1277c:	230a      	movs	r3, #10
   1277e:	e7ea      	b.n	12756 <smprActSendKey+0x36>
   12780:	bd38      	pop	{r3, r4, r5, pc}
   12782:	bf00      	nop
   12784:	10003738 	.word	0x10003738

00012788 <smprActSetupKeyDist>:
   12788:	b538      	push	{r3, r4, r5, lr}
   1278a:	4604      	mov	r4, r0
   1278c:	2300      	movs	r3, #0
   1278e:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   12792:	460d      	mov	r5, r1
   12794:	f7ff f8aa 	bl	118ec <smpStartRspTimer>
   12798:	6a23      	ldr	r3, [r4, #32]
   1279a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1279e:	801a      	strh	r2, [r3, #0]
   127a0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   127a4:	f012 0f04 	tst.w	r2, #4
   127a8:	bf14      	ite	ne
   127aa:	2202      	movne	r2, #2
   127ac:	2201      	moveq	r2, #1
   127ae:	77da      	strb	r2, [r3, #31]
   127b0:	7d21      	ldrb	r1, [r4, #20]
   127b2:	7ee2      	ldrb	r2, [r4, #27]
   127b4:	428a      	cmp	r2, r1
   127b6:	bf28      	it	cs
   127b8:	460a      	movcs	r2, r1
   127ba:	f883 2020 	strb.w	r2, [r3, #32]
   127be:	4629      	mov	r1, r5
   127c0:	4620      	mov	r0, r4
   127c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127c6:	f7ff bfab 	b.w	12720 <smprActSendKey>

000127ca <smprActRcvKey>:
   127ca:	b538      	push	{r3, r4, r5, lr}
   127cc:	7d42      	ldrb	r2, [r0, #21]
   127ce:	7f03      	ldrb	r3, [r0, #28]
   127d0:	460d      	mov	r5, r1
   127d2:	4013      	ands	r3, r2
   127d4:	684a      	ldr	r2, [r1, #4]
   127d6:	6a01      	ldr	r1, [r0, #32]
   127d8:	4604      	mov	r4, r0
   127da:	f7ff f9fb 	bl	11bd4 <smpProcRcvKey>
   127de:	b138      	cbz	r0, 127f0 <smprActRcvKey+0x26>
   127e0:	230e      	movs	r3, #14
   127e2:	70ab      	strb	r3, [r5, #2]
   127e4:	4629      	mov	r1, r5
   127e6:	4620      	mov	r0, r4
   127e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   127ec:	f7ff ba91 	b.w	11d12 <smpSmExecute>
   127f0:	bd38      	pop	{r3, r4, r5, pc}
   127f2:	bf00      	nop

000127f4 <smprScActStoreLescPin>:
   127f4:	b570      	push	{r4, r5, r6, lr}
   127f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   127f8:	785a      	ldrb	r2, [r3, #1]
   127fa:	2a03      	cmp	r2, #3
   127fc:	4604      	mov	r4, r0
   127fe:	460d      	mov	r5, r1
   12800:	d11d      	bne.n	1283e <smprScActStoreLescPin+0x4a>
   12802:	68d8      	ldr	r0, [r3, #12]
   12804:	490e      	ldr	r1, [pc, #56]	; (12840 <smprScActStoreLescPin+0x4c>)
   12806:	3020      	adds	r0, #32
   12808:	f006 f839 	bl	1887e <Calc128Cpy>
   1280c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1280e:	490c      	ldr	r1, [pc, #48]	; (12840 <smprScActStoreLescPin+0x4c>)
   12810:	68d8      	ldr	r0, [r3, #12]
   12812:	3030      	adds	r0, #48	; 0x30
   12814:	f006 f833 	bl	1887e <Calc128Cpy>
   12818:	7d2a      	ldrb	r2, [r5, #20]
   1281a:	2a03      	cmp	r2, #3
   1281c:	d80f      	bhi.n	1283e <smprScActStoreLescPin+0x4a>
   1281e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12820:	68d8      	ldr	r0, [r3, #12]
   12822:	1d2e      	adds	r6, r5, #4
   12824:	4631      	mov	r1, r6
   12826:	302d      	adds	r0, #45	; 0x2d
   12828:	f006 f864 	bl	188f4 <WStrReverseCpy>
   1282c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1282e:	7d2a      	ldrb	r2, [r5, #20]
   12830:	68d8      	ldr	r0, [r3, #12]
   12832:	4631      	mov	r1, r6
   12834:	303d      	adds	r0, #61	; 0x3d
   12836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1283a:	f006 b85b 	b.w	188f4 <WStrReverseCpy>
   1283e:	bd70      	pop	{r4, r5, r6, pc}
   12840:	00022b54 	.word	0x00022b54

00012844 <smprScActSendPubKey>:
   12844:	b538      	push	{r3, r4, r5, lr}
   12846:	4604      	mov	r4, r0
   12848:	460d      	mov	r5, r1
   1284a:	f7fe fd74 	bl	11336 <smpScActAuthSelect>
   1284e:	4629      	mov	r1, r5
   12850:	4620      	mov	r0, r4
   12852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12856:	f7fe baae 	b.w	10db6 <smpScSendPubKey>

0001285a <smprScActJwncSetup>:
   1285a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1285c:	b570      	push	{r4, r5, r6, lr}
   1285e:	4604      	mov	r4, r0
   12860:	68d8      	ldr	r0, [r3, #12]
   12862:	4d0d      	ldr	r5, [pc, #52]	; (12898 <smprScActJwncSetup+0x3e>)
   12864:	460e      	mov	r6, r1
   12866:	2110      	movs	r1, #16
   12868:	4408      	add	r0, r1
   1286a:	f006 fc85 	bl	19178 <SecRand>
   1286e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12870:	68d8      	ldr	r0, [r3, #12]
   12872:	4629      	mov	r1, r5
   12874:	3020      	adds	r0, #32
   12876:	f006 f802 	bl	1887e <Calc128Cpy>
   1287a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1287c:	68d8      	ldr	r0, [r3, #12]
   1287e:	4629      	mov	r1, r5
   12880:	3030      	adds	r0, #48	; 0x30
   12882:	f005 fffc 	bl	1887e <Calc128Cpy>
   12886:	2304      	movs	r3, #4
   12888:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   1288c:	4631      	mov	r1, r6
   1288e:	4620      	mov	r0, r4
   12890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12894:	f7fe bd99 	b.w	113ca <smpScActJwncCalcF4>
   12898:	00022b54 	.word	0x00022b54

0001289c <smprScActJwncSendCnf>:
   1289c:	684a      	ldr	r2, [r1, #4]
   1289e:	f7fe bb0c 	b.w	10eba <smpScSendPairCnf>

000128a2 <smprScActJwncCalcG2>:
   128a2:	b538      	push	{r3, r4, r5, lr}
   128a4:	460d      	mov	r5, r1
   128a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   128a8:	6849      	ldr	r1, [r1, #4]
   128aa:	4604      	mov	r4, r0
   128ac:	3109      	adds	r1, #9
   128ae:	68d8      	ldr	r0, [r3, #12]
   128b0:	2210      	movs	r2, #16
   128b2:	f006 f81f 	bl	188f4 <WStrReverseCpy>
   128b6:	4629      	mov	r1, r5
   128b8:	4620      	mov	r0, r4
   128ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   128be:	f7fe bda6 	b.w	1140e <smpScActJwncCalcG2>

000128c2 <smprScActPkStoreCnf>:
   128c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   128c4:	6849      	ldr	r1, [r1, #4]
   128c6:	68d8      	ldr	r0, [r3, #12]
   128c8:	2210      	movs	r2, #16
   128ca:	3109      	adds	r1, #9
   128cc:	3050      	adds	r0, #80	; 0x50
   128ce:	f006 b811 	b.w	188f4 <WStrReverseCpy>

000128d2 <smprScActPkCalcCb>:
   128d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   128d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128d6:	4604      	mov	r4, r0
   128d8:	68d8      	ldr	r0, [r3, #12]
   128da:	460d      	mov	r5, r1
   128dc:	2110      	movs	r1, #16
   128de:	4408      	add	r0, r1
   128e0:	f006 fc4a 	bl	19178 <SecRand>
   128e4:	2304      	movs	r3, #4
   128e6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   128ea:	f7fd fce9 	bl	102c0 <DmSecGetEccKey>
   128ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
   128f0:	4606      	mov	r6, r0
   128f2:	4620      	mov	r0, r4
   128f4:	689f      	ldr	r7, [r3, #8]
   128f6:	f7fe fb08 	bl	10f0a <smpGetPkBit>
   128fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   128fc:	68d9      	ldr	r1, [r3, #12]
   128fe:	3110      	adds	r1, #16
   12900:	e9cd 0100 	strd	r0, r1, [sp]
   12904:	463b      	mov	r3, r7
   12906:	4632      	mov	r2, r6
   12908:	4629      	mov	r1, r5
   1290a:	4620      	mov	r0, r4
   1290c:	f7fe f9e4 	bl	10cd8 <SmpScCalcF4>
   12910:	b003      	add	sp, #12
   12912:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012914 <smprScActPkStoreCnfAndCalcCb>:
   12914:	b538      	push	{r3, r4, r5, lr}
   12916:	4604      	mov	r4, r0
   12918:	460d      	mov	r5, r1
   1291a:	f7ff ffd2 	bl	128c2 <smprScActPkStoreCnf>
   1291e:	4629      	mov	r1, r5
   12920:	4620      	mov	r0, r4
   12922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12926:	f7ff bfd4 	b.w	128d2 <smprScActPkCalcCb>

0001292a <smprScActPkStorePinAndCalcCb>:
   1292a:	b538      	push	{r3, r4, r5, lr}
   1292c:	4604      	mov	r4, r0
   1292e:	460d      	mov	r5, r1
   12930:	f7ff ff60 	bl	127f4 <smprScActStoreLescPin>
   12934:	4629      	mov	r1, r5
   12936:	4620      	mov	r0, r4
   12938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1293c:	f7ff bfc9 	b.w	128d2 <smprScActPkCalcCb>

00012940 <smprScActPkSendCnf>:
   12940:	f7ff bfac 	b.w	1289c <smprScActJwncSendCnf>

00012944 <smprScActPkCalcCa>:
   12944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12946:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12948:	460d      	mov	r5, r1
   1294a:	6849      	ldr	r1, [r1, #4]
   1294c:	4604      	mov	r4, r0
   1294e:	2210      	movs	r2, #16
   12950:	3109      	adds	r1, #9
   12952:	68d8      	ldr	r0, [r3, #12]
   12954:	f005 ffce 	bl	188f4 <WStrReverseCpy>
   12958:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1295a:	689e      	ldr	r6, [r3, #8]
   1295c:	f7fd fcb0 	bl	102c0 <DmSecGetEccKey>
   12960:	4607      	mov	r7, r0
   12962:	4620      	mov	r0, r4
   12964:	f7fe fad1 	bl	10f0a <smpGetPkBit>
   12968:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1296a:	68db      	ldr	r3, [r3, #12]
   1296c:	4632      	mov	r2, r6
   1296e:	e9cd 0300 	strd	r0, r3, [sp]
   12972:	4629      	mov	r1, r5
   12974:	463b      	mov	r3, r7
   12976:	4620      	mov	r0, r4
   12978:	f7fe f9ae 	bl	10cd8 <SmpScCalcF4>
   1297c:	b003      	add	sp, #12
   1297e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012980 <smprScActPkSendRand>:
   12980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12982:	6b45      	ldr	r5, [r0, #52]	; 0x34
   12984:	68ef      	ldr	r7, [r5, #12]
   12986:	4604      	mov	r4, r0
   12988:	460e      	mov	r6, r1
   1298a:	2210      	movs	r2, #16
   1298c:	6849      	ldr	r1, [r1, #4]
   1298e:	f107 0050 	add.w	r0, r7, #80	; 0x50
   12992:	f7f9 fbb5 	bl	c100 <memcmp>
   12996:	b168      	cbz	r0, 129b4 <smprScActPkSendRand+0x34>
   12998:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1299c:	f8ad 3004 	strh.w	r3, [sp, #4]
   129a0:	f240 4303 	movw	r3, #1027	; 0x403
   129a4:	f8ad 3006 	strh.w	r3, [sp, #6]
   129a8:	a901      	add	r1, sp, #4
   129aa:	4620      	mov	r0, r4
   129ac:	f7ff f9b1 	bl	11d12 <smpSmExecute>
   129b0:	b003      	add	sp, #12
   129b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129b4:	78eb      	ldrb	r3, [r5, #3]
   129b6:	3301      	adds	r3, #1
   129b8:	b2db      	uxtb	r3, r3
   129ba:	2b13      	cmp	r3, #19
   129bc:	70eb      	strb	r3, [r5, #3]
   129be:	d907      	bls.n	129d0 <smprScActPkSendRand+0x50>
   129c0:	231a      	movs	r3, #26
   129c2:	f88d 3006 	strb.w	r3, [sp, #6]
   129c6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   129ca:	f8ad 3004 	strh.w	r3, [sp, #4]
   129ce:	e7eb      	b.n	129a8 <smprScActPkSendRand+0x28>
   129d0:	2303      	movs	r3, #3
   129d2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   129d6:	f107 0210 	add.w	r2, r7, #16
   129da:	2319      	movs	r3, #25
   129dc:	4631      	mov	r1, r6
   129de:	4620      	mov	r0, r4
   129e0:	f88d 3006 	strb.w	r3, [sp, #6]
   129e4:	f7fe fa41 	bl	10e6a <smpScSendRand>
   129e8:	e7ed      	b.n	129c6 <smprScActPkSendRand+0x46>

000129ea <smprScActOobSetup>:
   129ea:	2304      	movs	r3, #4
   129ec:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
   129f0:	4770      	bx	lr

000129f2 <smprScActOobCalcCa>:
   129f2:	b530      	push	{r4, r5, lr}
   129f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   129f6:	460d      	mov	r5, r1
   129f8:	6849      	ldr	r1, [r1, #4]
   129fa:	4604      	mov	r4, r0
   129fc:	b085      	sub	sp, #20
   129fe:	68d8      	ldr	r0, [r3, #12]
   12a00:	2210      	movs	r2, #16
   12a02:	3109      	adds	r1, #9
   12a04:	f005 ff76 	bl	188f4 <WStrReverseCpy>
   12a08:	7e63      	ldrb	r3, [r4, #25]
   12a0a:	2b01      	cmp	r3, #1
   12a0c:	d005      	beq.n	12a1a <smprScActOobCalcCa+0x28>
   12a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a10:	4912      	ldr	r1, [pc, #72]	; (12a5c <smprScActOobCalcCa+0x6a>)
   12a12:	68d8      	ldr	r0, [r3, #12]
   12a14:	3030      	adds	r0, #48	; 0x30
   12a16:	f005 ff32 	bl	1887e <Calc128Cpy>
   12a1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12a1c:	7ca2      	ldrb	r2, [r4, #18]
   12a1e:	68d8      	ldr	r0, [r3, #12]
   12a20:	2a01      	cmp	r2, #1
   12a22:	f100 0020 	add.w	r0, r0, #32
   12a26:	d10a      	bne.n	12a3e <smprScActOobCalcCa+0x4c>
   12a28:	689b      	ldr	r3, [r3, #8]
   12a2a:	9001      	str	r0, [sp, #4]
   12a2c:	2200      	movs	r2, #0
   12a2e:	9200      	str	r2, [sp, #0]
   12a30:	4629      	mov	r1, r5
   12a32:	461a      	mov	r2, r3
   12a34:	4620      	mov	r0, r4
   12a36:	f7fe f94f 	bl	10cd8 <SmpScCalcF4>
   12a3a:	b005      	add	sp, #20
   12a3c:	bd30      	pop	{r4, r5, pc}
   12a3e:	4907      	ldr	r1, [pc, #28]	; (12a5c <smprScActOobCalcCa+0x6a>)
   12a40:	f005 ff1d 	bl	1887e <Calc128Cpy>
   12a44:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12a48:	f8ad 300c 	strh.w	r3, [sp, #12]
   12a4c:	a903      	add	r1, sp, #12
   12a4e:	231b      	movs	r3, #27
   12a50:	4620      	mov	r0, r4
   12a52:	f88d 300e 	strb.w	r3, [sp, #14]
   12a56:	f7ff f95c 	bl	11d12 <smpSmExecute>
   12a5a:	e7ee      	b.n	12a3a <smprScActOobCalcCa+0x48>
   12a5c:	00022b54 	.word	0x00022b54

00012a60 <smprScActOobSendRand>:
   12a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12a62:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12a64:	68de      	ldr	r6, [r3, #12]
   12a66:	7c83      	ldrb	r3, [r0, #18]
   12a68:	2b01      	cmp	r3, #1
   12a6a:	4604      	mov	r4, r0
   12a6c:	460d      	mov	r5, r1
   12a6e:	d114      	bne.n	12a9a <smprScActOobSendRand+0x3a>
   12a70:	2210      	movs	r2, #16
   12a72:	6849      	ldr	r1, [r1, #4]
   12a74:	f106 0050 	add.w	r0, r6, #80	; 0x50
   12a78:	f7f9 fb42 	bl	c100 <memcmp>
   12a7c:	b168      	cbz	r0, 12a9a <smprScActOobSendRand+0x3a>
   12a7e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12a82:	f8ad 3004 	strh.w	r3, [sp, #4]
   12a86:	a901      	add	r1, sp, #4
   12a88:	f240 4303 	movw	r3, #1027	; 0x403
   12a8c:	4620      	mov	r0, r4
   12a8e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12a92:	f7ff f93e 	bl	11d12 <smpSmExecute>
   12a96:	b002      	add	sp, #8
   12a98:	bd70      	pop	{r4, r5, r6, pc}
   12a9a:	230d      	movs	r3, #13
   12a9c:	2110      	movs	r1, #16
   12a9e:	1870      	adds	r0, r6, r1
   12aa0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
   12aa4:	f006 fb68 	bl	19178 <SecRand>
   12aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12aaa:	68da      	ldr	r2, [r3, #12]
   12aac:	4629      	mov	r1, r5
   12aae:	3210      	adds	r2, #16
   12ab0:	4620      	mov	r0, r4
   12ab2:	f7fe f9da 	bl	10e6a <smpScSendRand>
   12ab6:	e7ee      	b.n	12a96 <smprScActOobSendRand+0x36>

00012ab8 <smprScActWaitDhCheck>:
   12ab8:	220d      	movs	r2, #13
   12aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12abc:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
   12ac0:	785a      	ldrb	r2, [r3, #1]
   12ac2:	2a02      	cmp	r2, #2
   12ac4:	d003      	beq.n	12ace <smprScActWaitDhCheck+0x16>
   12ac6:	68da      	ldr	r2, [r3, #12]
   12ac8:	3210      	adds	r2, #16
   12aca:	f7fe b9ce 	b.w	10e6a <smpScSendRand>
   12ace:	4770      	bx	lr

00012ad0 <smprScActCalcDHKey>:
   12ad0:	b538      	push	{r3, r4, r5, lr}
   12ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12ad4:	4604      	mov	r4, r0
   12ad6:	460d      	mov	r5, r1
   12ad8:	68d8      	ldr	r0, [r3, #12]
   12ada:	6849      	ldr	r1, [r1, #4]
   12adc:	3050      	adds	r0, #80	; 0x50
   12ade:	3109      	adds	r1, #9
   12ae0:	2210      	movs	r2, #16
   12ae2:	f005 ff07 	bl	188f4 <WStrReverseCpy>
   12ae6:	4629      	mov	r1, r5
   12ae8:	4620      	mov	r0, r4
   12aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12aee:	f7fe bd1f 	b.w	11530 <smpScActCalcSharedSecret>

00012af2 <smprScActDHKeyCheckSend>:
   12af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12af4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12af6:	4604      	mov	r4, r0
   12af8:	68d8      	ldr	r0, [r3, #12]
   12afa:	460e      	mov	r6, r1
   12afc:	3010      	adds	r0, #16
   12afe:	6849      	ldr	r1, [r1, #4]
   12b00:	f005 febd 	bl	1887e <Calc128Cpy>
   12b04:	6b65      	ldr	r5, [r4, #52]	; 0x34
   12b06:	68e9      	ldr	r1, [r5, #12]
   12b08:	2210      	movs	r2, #16
   12b0a:	f101 0050 	add.w	r0, r1, #80	; 0x50
   12b0e:	f7f9 faf7 	bl	c100 <memcmp>
   12b12:	4601      	mov	r1, r0
   12b14:	b9a0      	cbnz	r0, 12b40 <smprScActDHKeyCheckSend+0x4e>
   12b16:	7d20      	ldrb	r0, [r4, #20]
   12b18:	7ee3      	ldrb	r3, [r4, #27]
   12b1a:	692d      	ldr	r5, [r5, #16]
   12b1c:	4298      	cmp	r0, r3
   12b1e:	bf28      	it	cs
   12b20:	4618      	movcs	r0, r3
   12b22:	3510      	adds	r5, #16
   12b24:	f1c0 0210 	rsb	r2, r0, #16
   12b28:	4428      	add	r0, r5
   12b2a:	f7f9 fc17 	bl	c35c <memset>
   12b2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12b30:	68da      	ldr	r2, [r3, #12]
   12b32:	4631      	mov	r1, r6
   12b34:	3210      	adds	r2, #16
   12b36:	4620      	mov	r0, r4
   12b38:	f7fe f96f 	bl	10e1a <smpScSendDHKeyCheck>
   12b3c:	b002      	add	sp, #8
   12b3e:	bd70      	pop	{r4, r5, r6, pc}
   12b40:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   12b44:	f8ad 3004 	strh.w	r3, [sp, #4]
   12b48:	a901      	add	r1, sp, #4
   12b4a:	f640 331c 	movw	r3, #2844	; 0xb1c
   12b4e:	4620      	mov	r0, r4
   12b50:	f8ad 3006 	strh.w	r3, [sp, #6]
   12b54:	f7ff f8dd 	bl	11d12 <smpSmExecute>
   12b58:	e7f0      	b.n	12b3c <smprScActDHKeyCheckSend+0x4a>
   12b5a:	bf00      	nop

00012b5c <enable_print_interface>:
// Enable printing to the console.
//
//*****************************************************************************
void
enable_print_interface(void)
{
   12b5c:	b580      	push	{r7, lr}
   12b5e:	af00      	add	r7, sp, #0
    //
    // Initialize a debug printing interface.
    //
    am_bsp_itm_printf_enable();
   12b60:	f00d ff68 	bl	20a34 <am_bsp_itm_printf_enable>
}
   12b64:	bf00      	nop
   12b66:	bd80      	pop	{r7, pc}

00012b68 <main>:
// Main Function
//
//*****************************************************************************
int
main(void)
{
   12b68:	b580      	push	{r7, lr}
   12b6a:	af00      	add	r7, sp, #0
    //
    // Set the clock frequency
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
   12b6c:	2100      	movs	r1, #0
   12b6e:	2000      	movs	r0, #0
   12b70:	f00d f96c 	bl	1fe4c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   12b74:	480b      	ldr	r0, [pc, #44]	; (12ba4 <main+0x3c>)
   12b76:	f00c ffc7 	bl	1fb08 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   12b7a:	f00c ffeb 	bl	1fb54 <am_hal_cachectrl_enable>
#ifndef NOFPU
    //
    // Enable the floating point module, and configure the core for lazy
    // stacking.
    //
    am_hal_sysctrl_fpu_enable();
   12b7e:	f00d ff05 	bl	2098c <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
   12b82:	2001      	movs	r0, #1
   12b84:	f00d ff0a 	bl	2099c <am_hal_sysctrl_fpu_stacking_enable>
#endif

    //
    // Configure the board for low power.
    //
    am_bsp_low_power_init();
   12b88:	f00d ff22 	bl	209d0 <am_bsp_low_power_init>

    // Turn off unused Flash & SRAM
#if 1
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_SRAM_32K_DTCM);
   12b8c:	2002      	movs	r0, #2
   12b8e:	f00d fd0f 	bl	205b0 <am_hal_pwrctrl_memory_enable>
    am_hal_pwrctrl_memory_enable(AM_HAL_PWRCTRL_MEM_FLASH_512K);
   12b92:	200e      	movs	r0, #14
   12b94:	f00d fd0c 	bl	205b0 <am_hal_pwrctrl_memory_enable>

    //
    // Enable printing to the console.
    //
#ifdef AM_DEBUG_PRINTF
    enable_print_interface();
   12b98:	f7ff ffe0 	bl	12b5c <enable_print_interface>
    am_util_debug_printf("FreeRTOS Fit Example\n");

    //
    // Run the application.
    //
    run_tasks();
   12b9c:	f000 f9e0 	bl	12f60 <run_tasks>

    //
    // We shouldn't ever get here.
    //
    while (1)
   12ba0:	e7fe      	b.n	12ba0 <main+0x38>
   12ba2:	bf00      	nop
   12ba4:	00024cf0 	.word	0x00024cf0

00012ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   12ba8:	b480      	push	{r7}
   12baa:	b083      	sub	sp, #12
   12bac:	af00      	add	r7, sp, #0
   12bae:	4603      	mov	r3, r0
   12bb0:	6039      	str	r1, [r7, #0]
   12bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   12bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12bb8:	2b00      	cmp	r3, #0
   12bba:	db0a      	blt.n	12bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12bbc:	490d      	ldr	r1, [pc, #52]	; (12bf4 <__NVIC_SetPriority+0x4c>)
   12bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   12bc2:	683a      	ldr	r2, [r7, #0]
   12bc4:	b2d2      	uxtb	r2, r2
   12bc6:	0152      	lsls	r2, r2, #5
   12bc8:	b2d2      	uxtb	r2, r2
   12bca:	440b      	add	r3, r1
   12bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   12bd0:	e00a      	b.n	12be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12bd2:	4909      	ldr	r1, [pc, #36]	; (12bf8 <__NVIC_SetPriority+0x50>)
   12bd4:	79fb      	ldrb	r3, [r7, #7]
   12bd6:	f003 030f 	and.w	r3, r3, #15
   12bda:	3b04      	subs	r3, #4
   12bdc:	683a      	ldr	r2, [r7, #0]
   12bde:	b2d2      	uxtb	r2, r2
   12be0:	0152      	lsls	r2, r2, #5
   12be2:	b2d2      	uxtb	r2, r2
   12be4:	440b      	add	r3, r1
   12be6:	761a      	strb	r2, [r3, #24]
}
   12be8:	bf00      	nop
   12bea:	370c      	adds	r7, #12
   12bec:	46bd      	mov	sp, r7
   12bee:	f85d 7b04 	ldr.w	r7, [sp], #4
   12bf2:	4770      	bx	lr
   12bf4:	e000e100 	.word	0xe000e100
   12bf8:	e000ed00 	.word	0xe000ed00

00012bfc <wsf_timer_handler>:
// Callback handler for the FreeRTOS Timer
//
//*****************************************************************************
void
wsf_timer_handler(TimerHandle_t xTimer)
{
   12bfc:	b580      	push	{r7, lr}
   12bfe:	b082      	sub	sp, #8
   12c00:	af00      	add	r7, sp, #0
   12c02:	6078      	str	r0, [r7, #4]
    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   12c04:	2100      	movs	r1, #0
   12c06:	2000      	movs	r0, #0
   12c08:	f007 fc76 	bl	1a4f8 <WsfTaskSetReady>
}
   12c0c:	bf00      	nop
   12c0e:	3708      	adds	r7, #8
   12c10:	46bd      	mov	sp, r7
   12c12:	bd80      	pop	{r7, pc}

00012c14 <scheduler_timer_init>:
// Reuse FreeRTOS TIMER to handle the WSF scheduler.
//
//*****************************************************************************
void
scheduler_timer_init(void)
{
   12c14:	b580      	push	{r7, lr}
   12c16:	b082      	sub	sp, #8
   12c18:	af02      	add	r7, sp, #8
    // Create a FreeRTOS Timer
    xWsfTimer = xTimerCreate("WSF Timer", pdMS_TO_TICKS(WSF_MS_PER_TICK),
   12c1a:	4b09      	ldr	r3, [pc, #36]	; (12c40 <scheduler_timer_init+0x2c>)
   12c1c:	9300      	str	r3, [sp, #0]
   12c1e:	2300      	movs	r3, #0
   12c20:	2200      	movs	r2, #0
   12c22:	210a      	movs	r1, #10
   12c24:	4807      	ldr	r0, [pc, #28]	; (12c44 <scheduler_timer_init+0x30>)
   12c26:	f009 fbb7 	bl	1c398 <xTimerCreate>
   12c2a:	4602      	mov	r2, r0
   12c2c:	4b06      	ldr	r3, [pc, #24]	; (12c48 <scheduler_timer_init+0x34>)
   12c2e:	601a      	str	r2, [r3, #0]
            pdFALSE, NULL, wsf_timer_handler);
    configASSERT(xWsfTimer);
   12c30:	4b05      	ldr	r3, [pc, #20]	; (12c48 <scheduler_timer_init+0x34>)
   12c32:	681b      	ldr	r3, [r3, #0]
   12c34:	2b00      	cmp	r3, #0
   12c36:	d100      	bne.n	12c3a <scheduler_timer_init+0x26>
   12c38:	e7fe      	b.n	12c38 <scheduler_timer_init+0x24>
}
   12c3a:	bf00      	nop
   12c3c:	46bd      	mov	sp, r7
   12c3e:	bd80      	pop	{r7, pc}
   12c40:	00012bfd 	.word	0x00012bfd
   12c44:	00021cd4 	.word	0x00021cd4
   12c48:	100063e4 	.word	0x100063e4

00012c4c <update_scheduler_timers>:
// Calculate the elapsed time, and update the WSF software timers.
//
//*****************************************************************************
void
update_scheduler_timers(void)
{
   12c4c:	b580      	push	{r7, lr}
   12c4e:	b082      	sub	sp, #8
   12c50:	af00      	add	r7, sp, #0
    uint32_t ui32CurrentTime, ui32ElapsedTime;

    //
    // Read the continuous timer.
    //
    ui32CurrentTime = xTaskGetTickCount();
   12c52:	f008 ff65 	bl	1bb20 <xTaskGetTickCount>
   12c56:	6078      	str	r0, [r7, #4]
    //
    // Figure out how long it has been since the last time we've read the
    // continuous timer. We should be reading often enough that we'll never
    // have more than one overflow.
    //
    ui32ElapsedTime = ui32CurrentTime - g_ui32LastTime;
   12c58:	4b0b      	ldr	r3, [pc, #44]	; (12c88 <update_scheduler_timers+0x3c>)
   12c5a:	681b      	ldr	r3, [r3, #0]
   12c5c:	687a      	ldr	r2, [r7, #4]
   12c5e:	1ad3      	subs	r3, r2, r3
   12c60:	603b      	str	r3, [r7, #0]

    //
    // Check to see if any WSF ticks need to happen.
    //
    if ( (ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS) > 0 )
   12c62:	683b      	ldr	r3, [r7, #0]
   12c64:	2b09      	cmp	r3, #9
   12c66:	d90a      	bls.n	12c7e <update_scheduler_timers+0x32>
    {
        //
        // Update the WSF timers and save the current time as our "last
        // update".
        //
        WsfTimerUpdate(ui32ElapsedTime / CLK_TICKS_PER_WSF_TICKS);
   12c68:	683b      	ldr	r3, [r7, #0]
   12c6a:	4a08      	ldr	r2, [pc, #32]	; (12c8c <update_scheduler_timers+0x40>)
   12c6c:	fba2 2303 	umull	r2, r3, r2, r3
   12c70:	08db      	lsrs	r3, r3, #3
   12c72:	4618      	mov	r0, r3
   12c74:	f005 f8e4 	bl	17e40 <WsfTimerUpdate>

        g_ui32LastTime = ui32CurrentTime;
   12c78:	4a03      	ldr	r2, [pc, #12]	; (12c88 <update_scheduler_timers+0x3c>)
   12c7a:	687b      	ldr	r3, [r7, #4]
   12c7c:	6013      	str	r3, [r2, #0]
    }
}
   12c7e:	bf00      	nop
   12c80:	3708      	adds	r7, #8
   12c82:	46bd      	mov	sp, r7
   12c84:	bd80      	pop	{r7, pc}
   12c86:	bf00      	nop
   12c88:	10004300 	.word	0x10004300
   12c8c:	cccccccd 	.word	0xcccccccd

00012c90 <set_next_wakeup>:
// Set a timer interrupt for the next upcoming scheduler event.
//
//*****************************************************************************
void
set_next_wakeup(void)
{
   12c90:	b580      	push	{r7, lr}
   12c92:	b084      	sub	sp, #16
   12c94:	af02      	add	r7, sp, #8
    wsfTimerTicks_t xNextExpiration;

    //
    // Check to see when the next timer expiration should happen.
    //
    xNextExpiration = WsfTimerNextExpiration(&bTimerRunning);
   12c96:	1cfb      	adds	r3, r7, #3
   12c98:	4618      	mov	r0, r3
   12c9a:	f005 f8ff 	bl	17e9c <WsfTimerNextExpiration>
   12c9e:	6078      	str	r0, [r7, #4]

    //
    // If there's a pending WSF timer event, set an interrupt to wake us up in
    // time to service it.
    //
    if ( xNextExpiration )
   12ca0:	687b      	ldr	r3, [r7, #4]
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d014      	beq.n	12cd0 <set_next_wakeup+0x40>
    {
        configASSERT(pdPASS == xTimerChangePeriod( xWsfTimer,
   12ca6:	4b0c      	ldr	r3, [pc, #48]	; (12cd8 <set_next_wakeup+0x48>)
   12ca8:	6818      	ldr	r0, [r3, #0]
   12caa:	687b      	ldr	r3, [r7, #4]
   12cac:	f242 7210 	movw	r2, #10000	; 0x2710
   12cb0:	fb02 f303 	mul.w	r3, r2, r3
   12cb4:	4a09      	ldr	r2, [pc, #36]	; (12cdc <set_next_wakeup+0x4c>)
   12cb6:	fba2 2303 	umull	r2, r3, r2, r3
   12cba:	099a      	lsrs	r2, r3, #6
   12cbc:	2364      	movs	r3, #100	; 0x64
   12cbe:	9300      	str	r3, [sp, #0]
   12cc0:	2300      	movs	r3, #0
   12cc2:	2104      	movs	r1, #4
   12cc4:	f009 fbae 	bl	1c424 <xTimerGenericCommand>
   12cc8:	4603      	mov	r3, r0
   12cca:	2b01      	cmp	r3, #1
   12ccc:	d000      	beq.n	12cd0 <set_next_wakeup+0x40>
   12cce:	e7fe      	b.n	12cce <set_next_wakeup+0x3e>
                pdMS_TO_TICKS(xNextExpiration*CLK_TICKS_PER_WSF_TICKS), 100)) ;
    }
}
   12cd0:	bf00      	nop
   12cd2:	3708      	adds	r7, #8
   12cd4:	46bd      	mov	sp, r7
   12cd6:	bd80      	pop	{r7, pc}
   12cd8:	100063e4 	.word	0x100063e4
   12cdc:	10624dd3 	.word	0x10624dd3

00012ce0 <exactle_stack_init>:
// Initialization for the ExactLE stack.
//
//*****************************************************************************
void
exactle_stack_init(void)
{
   12ce0:	b580      	push	{r7, lr}
   12ce2:	b082      	sub	sp, #8
   12ce4:	af00      	add	r7, sp, #0
    wsfHandlerId_t handlerId;
    uint16_t       wsfBufMemLen;
    //
    // Set up timers for the WSF scheduler.
    //
    scheduler_timer_init();
   12ce6:	f7ff ff95 	bl	12c14 <scheduler_timer_init>
    WsfTimerInit();
   12cea:	f005 f863 	bl	17db4 <WsfTimerInit>

    //
    // Initialize a buffer pool for WSF dynamic memory needs.
    //
    wsfBufMemLen = WsfBufInit(sizeof(g_pui32BufMem), (uint8_t *)g_pui32BufMem, WSF_BUF_POOLS,
   12cee:	4b3e      	ldr	r3, [pc, #248]	; (12de8 <exactle_stack_init+0x108>)
   12cf0:	2204      	movs	r2, #4
   12cf2:	493e      	ldr	r1, [pc, #248]	; (12dec <exactle_stack_init+0x10c>)
   12cf4:	f44f 6015 	mov.w	r0, #2384	; 0x950
   12cf8:	f004 fd80 	bl	177fc <WsfBufInit>
   12cfc:	4603      	mov	r3, r0
   12cfe:	80fb      	strh	r3, [r7, #6]
    }

    //
    // Initialize the WSF security service.
    //
    SecInit();
   12d00:	f006 fa24 	bl	1914c <SecInit>
    SecAesInit();
   12d04:	f005 feca 	bl	18a9c <SecAesInit>
    SecCmacInit();
   12d08:	f006 f89c 	bl	18e44 <SecCmacInit>
    SecEccInit();
   12d0c:	f006 f9a8 	bl	19060 <SecEccInit>

    //
    // Set up callback functions for the various layers of the ExactLE stack.
    //
    handlerId = WsfOsSetNextHandler(HciHandler);
   12d10:	4837      	ldr	r0, [pc, #220]	; (12df0 <exactle_stack_init+0x110>)
   12d12:	f007 fc1d 	bl	1a550 <WsfOsSetNextHandler>
   12d16:	4603      	mov	r3, r0
   12d18:	717b      	strb	r3, [r7, #5]
    HciHandlerInit(handlerId);
   12d1a:	797b      	ldrb	r3, [r7, #5]
   12d1c:	4618      	mov	r0, r3
   12d1e:	f004 fd47 	bl	177b0 <HciHandlerInit>

    handlerId = WsfOsSetNextHandler(DmHandler);
   12d22:	4834      	ldr	r0, [pc, #208]	; (12df4 <exactle_stack_init+0x114>)
   12d24:	f007 fc14 	bl	1a550 <WsfOsSetNextHandler>
   12d28:	4603      	mov	r3, r0
   12d2a:	717b      	strb	r3, [r7, #5]
    DmDevVsInit(0);
   12d2c:	2000      	movs	r0, #0
   12d2e:	f7fc fe76 	bl	fa1e <DmDevVsInit>
    DmAdvInit();
   12d32:	f7fc f8f5 	bl	ef20 <DmAdvInit>
    DmConnInit();
   12d36:	f7fc fb6d 	bl	f414 <DmConnInit>
    DmConnSlaveInit();
   12d3a:	f7fc fdcb 	bl	f8d4 <DmConnSlaveInit>
    DmSecInit();
   12d3e:	f7fd f9aa 	bl	10096 <DmSecInit>
    DmSecLescInit();
   12d42:	f7fd fae7 	bl	10314 <DmSecLescInit>
    DmPrivInit();
   12d46:	f7fc fff5 	bl	fd34 <DmPrivInit>
    DmHandlerInit(handlerId);
   12d4a:	797b      	ldrb	r3, [r7, #5]
   12d4c:	4618      	mov	r0, r3
   12d4e:	f7fc feb0 	bl	fab2 <DmHandlerInit>

    handlerId = WsfOsSetNextHandler(L2cSlaveHandler);
   12d52:	4829      	ldr	r0, [pc, #164]	; (12df8 <exactle_stack_init+0x118>)
   12d54:	f007 fbfc 	bl	1a550 <WsfOsSetNextHandler>
   12d58:	4603      	mov	r3, r0
   12d5a:	717b      	strb	r3, [r7, #5]
    L2cSlaveHandlerInit(handlerId);
   12d5c:	797b      	ldrb	r3, [r7, #5]
   12d5e:	4618      	mov	r0, r3
   12d60:	f7fd fc7a 	bl	10658 <L2cSlaveHandlerInit>
    L2cInit();
   12d64:	f7fd fba7 	bl	104b6 <L2cInit>
    L2cSlaveInit();
   12d68:	f7fd fc2c 	bl	105c4 <L2cSlaveInit>

    handlerId = WsfOsSetNextHandler(AttHandler);
   12d6c:	4823      	ldr	r0, [pc, #140]	; (12dfc <exactle_stack_init+0x11c>)
   12d6e:	f007 fbef 	bl	1a550 <WsfOsSetNextHandler>
   12d72:	4603      	mov	r3, r0
   12d74:	717b      	strb	r3, [r7, #5]
    AttHandlerInit(handlerId);
   12d76:	797b      	ldrb	r3, [r7, #5]
   12d78:	4618      	mov	r0, r3
   12d7a:	f7f9 fbf8 	bl	c56e <AttHandlerInit>
    AttsInit();
   12d7e:	f7fa fd43 	bl	d808 <AttsInit>
    AttsIndInit();
   12d82:	f7fa fc43 	bl	d60c <AttsIndInit>
    AttcInit();
   12d86:	f7f9 fe63 	bl	ca50 <AttcInit>

    handlerId = WsfOsSetNextHandler(SmpHandler);
   12d8a:	481d      	ldr	r0, [pc, #116]	; (12e00 <exactle_stack_init+0x120>)
   12d8c:	f007 fbe0 	bl	1a550 <WsfOsSetNextHandler>
   12d90:	4603      	mov	r3, r0
   12d92:	717b      	strb	r3, [r7, #5]
    SmpHandlerInit(handlerId);
   12d94:	797b      	ldrb	r3, [r7, #5]
   12d96:	4618      	mov	r0, r3
   12d98:	f7fd fee6 	bl	10b68 <SmpHandlerInit>
    SmprInit();
   12d9c:	f7fe fd3c 	bl	11818 <SmprInit>
    SmprScInit();
   12da0:	f7fe fd24 	bl	117ec <SmprScInit>
    HciSetMaxRxAclLen(251);
   12da4:	20fb      	movs	r0, #251	; 0xfb
   12da6:	f002 fa2f 	bl	15208 <HciSetMaxRxAclLen>

    handlerId = WsfOsSetNextHandler(AppHandler);
   12daa:	4816      	ldr	r0, [pc, #88]	; (12e04 <exactle_stack_init+0x124>)
   12dac:	f007 fbd0 	bl	1a550 <WsfOsSetNextHandler>
   12db0:	4603      	mov	r3, r0
   12db2:	717b      	strb	r3, [r7, #5]
    AppHandlerInit(handlerId);
   12db4:	797b      	ldrb	r3, [r7, #5]
   12db6:	4618      	mov	r0, r3
   12db8:	f009 ff08 	bl	1cbcc <AppHandlerInit>

    handlerId = WsfOsSetNextHandler(FitHandler);
   12dbc:	4812      	ldr	r0, [pc, #72]	; (12e08 <exactle_stack_init+0x128>)
   12dbe:	f007 fbc7 	bl	1a550 <WsfOsSetNextHandler>
   12dc2:	4603      	mov	r3, r0
   12dc4:	717b      	strb	r3, [r7, #5]
    FitHandlerInit(handlerId);
   12dc6:	797b      	ldrb	r3, [r7, #5]
   12dc8:	4618      	mov	r0, r3
   12dca:	f000 fc41 	bl	13650 <FitHandlerInit>

    handlerId = WsfOsSetNextHandler(HciDrvHandler);
   12dce:	480f      	ldr	r0, [pc, #60]	; (12e0c <exactle_stack_init+0x12c>)
   12dd0:	f007 fbbe 	bl	1a550 <WsfOsSetNextHandler>
   12dd4:	4603      	mov	r3, r0
   12dd6:	717b      	strb	r3, [r7, #5]
    HciDrvHandlerInit(handlerId);
   12dd8:	797b      	ldrb	r3, [r7, #5]
   12dda:	4618      	mov	r0, r3
   12ddc:	f005 fa76 	bl	182cc <HciDrvHandlerInit>
}
   12de0:	bf00      	nop
   12de2:	3708      	adds	r7, #8
   12de4:	46bd      	mov	sp, r7
   12de6:	bd80      	pop	{r7, pc}
   12de8:	10002384 	.word	0x10002384
   12dec:	100039b0 	.word	0x100039b0
   12df0:	000177dd 	.word	0x000177dd
   12df4:	0000facd 	.word	0x0000facd
   12df8:	00010669 	.word	0x00010669
   12dfc:	0000c5ad 	.word	0x0000c5ad
   12e00:	00010bb1 	.word	0x00010bb1
   12e04:	0001cbed 	.word	0x0001cbed
   12e08:	000136d9 	.word	0x000136d9
   12e0c:	00018359 	.word	0x00018359

00012e10 <am_uart_isr>:
// UART interrupt handler.
//
//*****************************************************************************
void
am_uart_isr(void)
{
   12e10:	b580      	push	{r7, lr}
   12e12:	b082      	sub	sp, #8
   12e14:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Read and save the interrupt status, but clear out the status register.
    //
    ui32Status = UARTn(0)->MIS;
   12e16:	4b07      	ldr	r3, [pc, #28]	; (12e34 <am_uart_isr+0x24>)
   12e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   12e1a:	607b      	str	r3, [r7, #4]
    UARTn(0)->IEC = ui32Status;
   12e1c:	4a05      	ldr	r2, [pc, #20]	; (12e34 <am_uart_isr+0x24>)
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	6453      	str	r3, [r2, #68]	; 0x44
    //
    //HciDrvUartISR(ui32Status);

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   12e22:	2100      	movs	r1, #0
   12e24:	2000      	movs	r0, #0
   12e26:	f007 fb67 	bl	1a4f8 <WsfTaskSetReady>
}
   12e2a:	bf00      	nop
   12e2c:	3708      	adds	r7, #8
   12e2e:	46bd      	mov	sp, r7
   12e30:	bd80      	pop	{r7, pc}
   12e32:	bf00      	nop
   12e34:	4001c000 	.word	0x4001c000

00012e38 <am_ble_isr>:
// Interrupt handler for BLE
//
//*****************************************************************************
void
am_ble_isr(void)
{
   12e38:	b580      	push	{r7, lr}
   12e3a:	af00      	add	r7, sp, #0

    HciDrvIntService();
   12e3c:	f005 fa66 	bl	1830c <HciDrvIntService>

    // Signal radio task to run

    WsfTaskSetReady(0, 0);
   12e40:	2100      	movs	r1, #0
   12e42:	2000      	movs	r0, #0
   12e44:	f007 fb58 	bl	1a4f8 <WsfTaskSetReady>
}
   12e48:	bf00      	nop
   12e4a:	bd80      	pop	{r7, pc}

00012e4c <RadioTaskSetup>:
// Perform initial setup for the radio task.
//
//*****************************************************************************
void
RadioTaskSetup(void)
{
   12e4c:	b580      	push	{r7, lr}
   12e4e:	af00      	add	r7, sp, #0
    am_util_debug_printf("RadioTask: setup\r\n");

    //
    // Create an event handle for our wake-up events.
    //
    xRadioEventHandle = xEventGroupCreate();
   12e50:	f007 fda4 	bl	1a99c <xEventGroupCreate>
   12e54:	4602      	mov	r2, r0
   12e56:	4b0a      	ldr	r3, [pc, #40]	; (12e80 <RadioTaskSetup+0x34>)
   12e58:	601a      	str	r2, [r3, #0]

    //
    // Make sure we actually allocated space for the events we need.
    //
    while ( xRadioEventHandle == NULL );
   12e5a:	bf00      	nop
   12e5c:	4b08      	ldr	r3, [pc, #32]	; (12e80 <RadioTaskSetup+0x34>)
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d0fb      	beq.n	12e5c <RadioTaskSetup+0x10>

    // Pass event object to WSF scheduler
    wsfOsSetEventObject((void*)xRadioEventHandle);
   12e64:	4b06      	ldr	r3, [pc, #24]	; (12e80 <RadioTaskSetup+0x34>)
   12e66:	681b      	ldr	r3, [r3, #0]
   12e68:	4618      	mov	r0, r3
   12e6a:	f007 fc23 	bl	1a6b4 <wsfOsSetEventObject>

    NVIC_SetPriority(BLE_IRQn, NVIC_configMAX_SYSCALL_INTERRUPT_PRIORITY);
   12e6e:	2104      	movs	r1, #4
   12e70:	200c      	movs	r0, #12
   12e72:	f7ff fe99 	bl	12ba8 <__NVIC_SetPriority>

    //
    // Boot the radio.
    //
    HciDrvRadioBoot(1);
   12e76:	2001      	movs	r0, #1
   12e78:	f005 f8b4 	bl	17fe4 <HciDrvRadioBoot>
}
   12e7c:	bf00      	nop
   12e7e:	bd80      	pop	{r7, pc}
   12e80:	100063ec 	.word	0x100063ec

00012e84 <RadioTask>:
// Short Description.
//
//*****************************************************************************
void
RadioTask(void *pvParameters)
{
   12e84:	b580      	push	{r7, lr}
   12e86:	b084      	sub	sp, #16
   12e88:	af02      	add	r7, sp, #8
   12e8a:	6078      	str	r0, [r7, #4]
#endif

    //
    // Initialize the main ExactLE stack.
    //
    exactle_stack_init();
   12e8c:	f7ff ff28 	bl	12ce0 <exactle_stack_init>

    //
    // Start the "Fit" profile.
    //
    FitStart();
   12e90:	f000 fc40 	bl	13714 <FitStart>
    {
        //
        // Calculate the elapsed time from our free-running timer, and update
        // the software timers in the WSF scheduler.
        //
        update_scheduler_timers();
   12e94:	f7ff feda 	bl	12c4c <update_scheduler_timers>
        wsfOsDispatcher();
   12e98:	f007 fb88 	bl	1a5ac <wsfOsDispatcher>

        //
        // Enable an interrupt to wake us up next time we have a scheduled
        // event.
        //
        set_next_wakeup();
   12e9c:	f7ff fef8 	bl	12c90 <set_next_wakeup>

        //
        // Check to see if the WSF routines are ready to go to sleep.
        //
        if ( wsfOsReadyToSleep() )
   12ea0:	f007 fb72 	bl	1a588 <wsfOsReadyToSleep>
   12ea4:	4603      	mov	r3, r0
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d0f4      	beq.n	12e94 <RadioTask+0x10>
            //

            //
            // Wait for an event to be posted to the Radio Event Handle.
            //
            xEventGroupWaitBits(xRadioEventHandle, 1, pdTRUE,
   12eaa:	4b05      	ldr	r3, [pc, #20]	; (12ec0 <RadioTask+0x3c>)
   12eac:	6818      	ldr	r0, [r3, #0]
   12eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12eb2:	9300      	str	r3, [sp, #0]
   12eb4:	2300      	movs	r3, #0
   12eb6:	2201      	movs	r2, #1
   12eb8:	2101      	movs	r1, #1
   12eba:	f007 fd87 	bl	1a9cc <xEventGroupWaitBits>
        update_scheduler_timers();
   12ebe:	e7e9      	b.n	12e94 <RadioTask+0x10>
   12ec0:	100063ec 	.word	0x100063ec

00012ec4 <am_ctimer_isr>:
// Interrupt handler for the CTIMER module.
//
//*****************************************************************************
void
am_ctimer_isr(void)
{
   12ec4:	b580      	push	{r7, lr}
   12ec6:	b082      	sub	sp, #8
   12ec8:	af00      	add	r7, sp, #0
    uint32_t ui32Status;

    //
    // Check the timer interrupt status.
    //
    ui32Status = am_hal_ctimer_int_status_get(false);
   12eca:	2000      	movs	r0, #0
   12ecc:	f00d f890 	bl	1fff0 <am_hal_ctimer_int_status_get>
   12ed0:	6078      	str	r0, [r7, #4]
    am_hal_ctimer_int_clear(ui32Status);
   12ed2:	6878      	ldr	r0, [r7, #4]
   12ed4:	f00d f87c 	bl	1ffd0 <am_hal_ctimer_int_clear>

    //
    // Run handlers for the various possible timer events.
    //
    am_hal_ctimer_int_service(ui32Status);
   12ed8:	6878      	ldr	r0, [r7, #4]
   12eda:	f00d f861 	bl	1ffa0 <am_hal_ctimer_int_service>
}
   12ede:	bf00      	nop
   12ee0:	3708      	adds	r7, #8
   12ee2:	46bd      	mov	sp, r7
   12ee4:	bd80      	pop	{r7, pc}

00012ee6 <am_freertos_sleep>:
// Return 0 if this function also incorporates the WFI, else return value same
// as idleTime
//
//*****************************************************************************
uint32_t am_freertos_sleep(uint32_t idleTime)
{
   12ee6:	b580      	push	{r7, lr}
   12ee8:	b082      	sub	sp, #8
   12eea:	af00      	add	r7, sp, #0
   12eec:	6078      	str	r0, [r7, #4]
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   12eee:	2001      	movs	r0, #1
   12ef0:	f00d fd14 	bl	2091c <am_hal_sysctrl_sleep>
    return 0;
   12ef4:	2300      	movs	r3, #0
}
   12ef6:	4618      	mov	r0, r3
   12ef8:	3708      	adds	r7, #8
   12efa:	46bd      	mov	sp, r7
   12efc:	bd80      	pop	{r7, pc}

00012efe <am_freertos_wakeup>:
// Recovery function called from FreeRTOS IDLE task, after waking up from Sleep
// Do necessary 'wakeup' operations here, e.g. to power up/enable peripherals etc.
//
//*****************************************************************************
void am_freertos_wakeup(uint32_t idleTime)
{
   12efe:	b480      	push	{r7}
   12f00:	b083      	sub	sp, #12
   12f02:	af00      	add	r7, sp, #0
   12f04:	6078      	str	r0, [r7, #4]
    return;
   12f06:	bf00      	nop
}
   12f08:	370c      	adds	r7, #12
   12f0a:	46bd      	mov	sp, r7
   12f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12f10:	4770      	bx	lr

00012f12 <vApplicationMallocFailedHook>:
// FreeRTOS debugging functions.
//
//*****************************************************************************
void
vApplicationMallocFailedHook(void)
{
   12f12:	b480      	push	{r7}
   12f14:	af00      	add	r7, sp, #0
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1);
   12f16:	e7fe      	b.n	12f16 <vApplicationMallocFailedHook+0x4>

00012f18 <vApplicationStackOverflowHook>:
}

void
vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   12f18:	b480      	push	{r7}
   12f1a:	b083      	sub	sp, #12
   12f1c:	af00      	add	r7, sp, #0
   12f1e:	6078      	str	r0, [r7, #4]
   12f20:	6039      	str	r1, [r7, #0]
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1)
    {
        __asm("BKPT #0\n") ; // Break into the debugger
   12f22:	be00      	bkpt	0x0000
   12f24:	e7fd      	b.n	12f22 <vApplicationStackOverflowHook+0xa>
	...

00012f28 <setup_task>:
// features.
//
//*****************************************************************************
void
setup_task(void *pvParameters)
{
   12f28:	b580      	push	{r7, lr}
   12f2a:	b084      	sub	sp, #16
   12f2c:	af02      	add	r7, sp, #8
   12f2e:	6078      	str	r0, [r7, #4]
    am_util_debug_printf("Running setup tasks...\r\n");

    //
    // Run setup functions.
    //
    RadioTaskSetup();
   12f30:	f7ff ff8c 	bl	12e4c <RadioTaskSetup>

    //
    // Create the functional tasks
    //
    xTaskCreate(RadioTask, "RadioTask", 512, 0, 3, &radio_task_handle);
   12f34:	4b07      	ldr	r3, [pc, #28]	; (12f54 <setup_task+0x2c>)
   12f36:	9301      	str	r3, [sp, #4]
   12f38:	2303      	movs	r3, #3
   12f3a:	9300      	str	r3, [sp, #0]
   12f3c:	2300      	movs	r3, #0
   12f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   12f42:	4905      	ldr	r1, [pc, #20]	; (12f58 <setup_task+0x30>)
   12f44:	4805      	ldr	r0, [pc, #20]	; (12f5c <setup_task+0x34>)
   12f46:	f008 fb39 	bl	1b5bc <xTaskCreate>
    //
    // The setup operations are complete, so suspend the setup task now.
    //
    vTaskSuspend(NULL);
   12f4a:	2000      	movs	r0, #0
   12f4c:	f008 fc5e 	bl	1b80c <vTaskSuspend>

    while (1);
   12f50:	e7fe      	b.n	12f50 <setup_task+0x28>
   12f52:	bf00      	nop
   12f54:	100063e8 	.word	0x100063e8
   12f58:	00021ce0 	.word	0x00021ce0
   12f5c:	00012e85 	.word	0x00012e85

00012f60 <run_tasks>:
// Initializes all tasks
//
//*****************************************************************************
void
run_tasks(void)
{
   12f60:	b580      	push	{r7, lr}
   12f62:	b082      	sub	sp, #8
   12f64:	af02      	add	r7, sp, #8
    //

    //
    // Create essential tasks.
    //
    xTaskCreate(setup_task, "Setup", 512, 0, 3, &xSetupTask);
   12f66:	4b08      	ldr	r3, [pc, #32]	; (12f88 <run_tasks+0x28>)
   12f68:	9301      	str	r3, [sp, #4]
   12f6a:	2303      	movs	r3, #3
   12f6c:	9300      	str	r3, [sp, #0]
   12f6e:	2300      	movs	r3, #0
   12f70:	f44f 7200 	mov.w	r2, #512	; 0x200
   12f74:	4905      	ldr	r1, [pc, #20]	; (12f8c <run_tasks+0x2c>)
   12f76:	4806      	ldr	r0, [pc, #24]	; (12f90 <run_tasks+0x30>)
   12f78:	f008 fb20 	bl	1b5bc <xTaskCreate>


    //
    // Start the scheduler.
    //
    vTaskStartScheduler();
   12f7c:	f008 fcb2 	bl	1b8e4 <vTaskStartScheduler>
}
   12f80:	bf00      	nop
   12f82:	46bd      	mov	sp, r7
   12f84:	bd80      	pop	{r7, pc}
   12f86:	bf00      	nop
   12f88:	100063f0 	.word	0x100063f0
   12f8c:	00021cec 	.word	0x00021cec
   12f90:	00012f29 	.word	0x00012f29

00012f94 <fitDmCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitDmCback(dmEvt_t *pDmEvt)
{
   12f94:	b580      	push	{r7, lr}
   12f96:	b084      	sub	sp, #16
   12f98:	af00      	add	r7, sp, #0
   12f9a:	6078      	str	r0, [r7, #4]
  dmEvt_t *pMsg;
  uint16_t len;

  len = DmSizeOfEvt(pDmEvt);
   12f9c:	6878      	ldr	r0, [r7, #4]
   12f9e:	f7fc fdc7 	bl	fb30 <DmSizeOfEvt>
   12fa2:	4603      	mov	r3, r0
   12fa4:	81fb      	strh	r3, [r7, #14]

  if ((pMsg = WsfMsgAlloc(len)) != NULL)
   12fa6:	89fb      	ldrh	r3, [r7, #14]
   12fa8:	4618      	mov	r0, r3
   12faa:	f004 fd5a 	bl	17a62 <WsfMsgAlloc>
   12fae:	60b8      	str	r0, [r7, #8]
   12fb0:	68bb      	ldr	r3, [r7, #8]
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d00b      	beq.n	12fce <fitDmCback+0x3a>
  {
    memcpy(pMsg, pDmEvt, len);
   12fb6:	89fb      	ldrh	r3, [r7, #14]
   12fb8:	461a      	mov	r2, r3
   12fba:	6879      	ldr	r1, [r7, #4]
   12fbc:	68b8      	ldr	r0, [r7, #8]
   12fbe:	f7f9 f8cf 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   12fc2:	4b05      	ldr	r3, [pc, #20]	; (12fd8 <fitDmCback+0x44>)
   12fc4:	781b      	ldrb	r3, [r3, #0]
   12fc6:	68b9      	ldr	r1, [r7, #8]
   12fc8:	4618      	mov	r0, r3
   12fca:	f004 fd6e 	bl	17aaa <WsfMsgSend>
  }
}
   12fce:	bf00      	nop
   12fd0:	3710      	adds	r7, #16
   12fd2:	46bd      	mov	sp, r7
   12fd4:	bd80      	pop	{r7, pc}
   12fd6:	bf00      	nop
   12fd8:	10006404 	.word	0x10006404

00012fdc <fitAttCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitAttCback(attEvt_t *pEvt)
{
   12fdc:	b580      	push	{r7, lr}
   12fde:	b084      	sub	sp, #16
   12fe0:	af00      	add	r7, sp, #0
   12fe2:	6078      	str	r0, [r7, #4]
  attEvt_t *pMsg;

  if ((pMsg = WsfMsgAlloc(sizeof(attEvt_t) + pEvt->valueLen)) != NULL)
   12fe4:	687b      	ldr	r3, [r7, #4]
   12fe6:	891b      	ldrh	r3, [r3, #8]
   12fe8:	3310      	adds	r3, #16
   12fea:	b29b      	uxth	r3, r3
   12fec:	4618      	mov	r0, r3
   12fee:	f004 fd38 	bl	17a62 <WsfMsgAlloc>
   12ff2:	60f8      	str	r0, [r7, #12]
   12ff4:	68fb      	ldr	r3, [r7, #12]
   12ff6:	2b00      	cmp	r3, #0
   12ff8:	d018      	beq.n	1302c <fitAttCback+0x50>
  {
    memcpy(pMsg, pEvt, sizeof(attEvt_t));
   12ffa:	2210      	movs	r2, #16
   12ffc:	6879      	ldr	r1, [r7, #4]
   12ffe:	68f8      	ldr	r0, [r7, #12]
   13000:	f7f9 f8ae 	bl	c160 <memcpy>
    pMsg->pValue = (uint8_t *) (pMsg + 1);
   13004:	68fb      	ldr	r3, [r7, #12]
   13006:	f103 0210 	add.w	r2, r3, #16
   1300a:	68fb      	ldr	r3, [r7, #12]
   1300c:	605a      	str	r2, [r3, #4]
    memcpy(pMsg->pValue, pEvt->pValue, pEvt->valueLen);
   1300e:	68fb      	ldr	r3, [r7, #12]
   13010:	6858      	ldr	r0, [r3, #4]
   13012:	687b      	ldr	r3, [r7, #4]
   13014:	6859      	ldr	r1, [r3, #4]
   13016:	687b      	ldr	r3, [r7, #4]
   13018:	891b      	ldrh	r3, [r3, #8]
   1301a:	461a      	mov	r2, r3
   1301c:	f7f9 f8a0 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   13020:	4b04      	ldr	r3, [pc, #16]	; (13034 <fitAttCback+0x58>)
   13022:	781b      	ldrb	r3, [r3, #0]
   13024:	68f9      	ldr	r1, [r7, #12]
   13026:	4618      	mov	r0, r3
   13028:	f004 fd3f 	bl	17aaa <WsfMsgSend>
  }
}
   1302c:	bf00      	nop
   1302e:	3710      	adds	r7, #16
   13030:	46bd      	mov	sp, r7
   13032:	bd80      	pop	{r7, pc}
   13034:	10006404 	.word	0x10006404

00013038 <fitCccCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitCccCback(attsCccEvt_t *pEvt)
{
   13038:	b580      	push	{r7, lr}
   1303a:	b084      	sub	sp, #16
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
  attsCccEvt_t  *pMsg;
  appDbHdl_t    dbHdl;

  /* if CCC not set from initialization and there's a device record */
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	889b      	ldrh	r3, [r3, #4]
   13044:	2b00      	cmp	r3, #0
   13046:	d012      	beq.n	1306e <fitCccCback+0x36>
      ((dbHdl = AppDbGetHdl((dmConnId_t) pEvt->hdr.param)) != APP_DB_HDL_NONE))
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	881b      	ldrh	r3, [r3, #0]
   1304c:	b2db      	uxtb	r3, r3
  if ((pEvt->handle != ATT_HANDLE_NONE) &&
   1304e:	4618      	mov	r0, r3
   13050:	f009 fe7e 	bl	1cd50 <AppDbGetHdl>
   13054:	60f8      	str	r0, [r7, #12]
   13056:	68fb      	ldr	r3, [r7, #12]
   13058:	2b00      	cmp	r3, #0
   1305a:	d008      	beq.n	1306e <fitCccCback+0x36>
  {
    /* store value in device database */
    AppDbSetCccTblValue(dbHdl, pEvt->idx, pEvt->value);
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	7a1b      	ldrb	r3, [r3, #8]
   13060:	b299      	uxth	r1, r3
   13062:	687b      	ldr	r3, [r7, #4]
   13064:	88db      	ldrh	r3, [r3, #6]
   13066:	461a      	mov	r2, r3
   13068:	68f8      	ldr	r0, [r7, #12]
   1306a:	f007 f877 	bl	1a15c <AppDbSetCccTblValue>
  }

  if ((pMsg = WsfMsgAlloc(sizeof(attsCccEvt_t))) != NULL)
   1306e:	200a      	movs	r0, #10
   13070:	f004 fcf7 	bl	17a62 <WsfMsgAlloc>
   13074:	60b8      	str	r0, [r7, #8]
   13076:	68bb      	ldr	r3, [r7, #8]
   13078:	2b00      	cmp	r3, #0
   1307a:	d00a      	beq.n	13092 <fitCccCback+0x5a>
  {
    memcpy(pMsg, pEvt, sizeof(attsCccEvt_t));
   1307c:	220a      	movs	r2, #10
   1307e:	6879      	ldr	r1, [r7, #4]
   13080:	68b8      	ldr	r0, [r7, #8]
   13082:	f7f9 f86d 	bl	c160 <memcpy>
    WsfMsgSend(fitHandlerId, pMsg);
   13086:	4b05      	ldr	r3, [pc, #20]	; (1309c <fitCccCback+0x64>)
   13088:	781b      	ldrb	r3, [r3, #0]
   1308a:	68b9      	ldr	r1, [r7, #8]
   1308c:	4618      	mov	r0, r3
   1308e:	f004 fd0c 	bl	17aaa <WsfMsgSend>
  }
}
   13092:	bf00      	nop
   13094:	3710      	adds	r7, #16
   13096:	46bd      	mov	sp, r7
   13098:	bd80      	pop	{r7, pc}
   1309a:	bf00      	nop
   1309c:	10006404 	.word	0x10006404

000130a0 <fitSendRunningSpeedMeasurement>:
*
*  \return None.
*/
/*************************************************************************************************/
static void fitSendRunningSpeedMeasurement(dmConnId_t connId)
{
   130a0:	b580      	push	{r7, lr}
   130a2:	b082      	sub	sp, #8
   130a4:	af00      	add	r7, sp, #0
   130a6:	4603      	mov	r3, r0
   130a8:	71fb      	strb	r3, [r7, #7]
  if (AttsCccEnabled(connId, FIT_RSCS_SM_CCC_IDX))
   130aa:	79fb      	ldrb	r3, [r7, #7]
   130ac:	2103      	movs	r1, #3
   130ae:	4618      	mov	r0, r3
   130b0:	f7fa f948 	bl	d344 <AttsCccEnabled>
   130b4:	4603      	mov	r3, r0
   130b6:	2b00      	cmp	r3, #0
   130b8:	d023      	beq.n	13102 <fitSendRunningSpeedMeasurement+0x62>
  {
    static uint8_t walk_run = 1;

    /* TODO: Set Running Speed and Cadence Measurement Parameters */

    RscpsSetParameter(RSCP_SM_PARAM_SPEED, 100);
   130ba:	2164      	movs	r1, #100	; 0x64
   130bc:	2000      	movs	r0, #0
   130be:	f005 fab3 	bl	18628 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_CADENCE, 100);
   130c2:	2164      	movs	r1, #100	; 0x64
   130c4:	2001      	movs	r0, #1
   130c6:	f005 faaf 	bl	18628 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_STRIDE_LENGTH, 100);
   130ca:	2164      	movs	r1, #100	; 0x64
   130cc:	2002      	movs	r0, #2
   130ce:	f005 faab 	bl	18628 <RscpsSetParameter>
    RscpsSetParameter(RSCP_SM_PARAM_TOTAL_DISTANCE, 100);
   130d2:	2164      	movs	r1, #100	; 0x64
   130d4:	2003      	movs	r0, #3
   130d6:	f005 faa7 	bl	18628 <RscpsSetParameter>
    
    /* Toggle running/walking */
    walk_run = walk_run? 0 : 1;
   130da:	4b16      	ldr	r3, [pc, #88]	; (13134 <fitSendRunningSpeedMeasurement+0x94>)
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	bf0c      	ite	eq
   130e2:	2301      	moveq	r3, #1
   130e4:	2300      	movne	r3, #0
   130e6:	b2db      	uxtb	r3, r3
   130e8:	461a      	mov	r2, r3
   130ea:	4b12      	ldr	r3, [pc, #72]	; (13134 <fitSendRunningSpeedMeasurement+0x94>)
   130ec:	701a      	strb	r2, [r3, #0]
    RscpsSetParameter(RSCP_SM_PARAM_STATUS, walk_run);
   130ee:	4b11      	ldr	r3, [pc, #68]	; (13134 <fitSendRunningSpeedMeasurement+0x94>)
   130f0:	781b      	ldrb	r3, [r3, #0]
   130f2:	4619      	mov	r1, r3
   130f4:	2004      	movs	r0, #4
   130f6:	f005 fa97 	bl	18628 <RscpsSetParameter>

    RscpsSendSpeedMeasurement(connId);
   130fa:	79fb      	ldrb	r3, [r7, #7]
   130fc:	4618      	mov	r0, r3
   130fe:	f005 fae7 	bl	186d0 <RscpsSendSpeedMeasurement>
  }

  /* Configure and start timer to send the next measurement */
  fitRscmTimer.msg.event = FIT_RUNNING_TIMER_IND;
   13102:	4b0d      	ldr	r3, [pc, #52]	; (13138 <fitSendRunningSpeedMeasurement+0x98>)
   13104:	22a2      	movs	r2, #162	; 0xa2
   13106:	731a      	strb	r2, [r3, #12]
  fitRscmTimer.msg.status = FIT_RSCS_SM_CCC_IDX;
   13108:	4b0b      	ldr	r3, [pc, #44]	; (13138 <fitSendRunningSpeedMeasurement+0x98>)
   1310a:	2203      	movs	r2, #3
   1310c:	735a      	strb	r2, [r3, #13]
  fitRscmTimer.handlerId = fitHandlerId;
   1310e:	4b0b      	ldr	r3, [pc, #44]	; (1313c <fitSendRunningSpeedMeasurement+0x9c>)
   13110:	781a      	ldrb	r2, [r3, #0]
   13112:	4b09      	ldr	r3, [pc, #36]	; (13138 <fitSendRunningSpeedMeasurement+0x98>)
   13114:	721a      	strb	r2, [r3, #8]
  fitRscmTimer.msg.param = connId;
   13116:	79fb      	ldrb	r3, [r7, #7]
   13118:	b29a      	uxth	r2, r3
   1311a:	4b07      	ldr	r3, [pc, #28]	; (13138 <fitSendRunningSpeedMeasurement+0x98>)
   1311c:	815a      	strh	r2, [r3, #10]

  WsfTimerStartSec(&fitRscmTimer, fitRscmPeriod);
   1311e:	4b08      	ldr	r3, [pc, #32]	; (13140 <fitSendRunningSpeedMeasurement+0xa0>)
   13120:	881b      	ldrh	r3, [r3, #0]
   13122:	4619      	mov	r1, r3
   13124:	4804      	ldr	r0, [pc, #16]	; (13138 <fitSendRunningSpeedMeasurement+0x98>)
   13126:	f004 fe55 	bl	17dd4 <WsfTimerStartSec>
}
   1312a:	bf00      	nop
   1312c:	3708      	adds	r7, #8
   1312e:	46bd      	mov	sp, r7
   13130:	bd80      	pop	{r7, pc}
   13132:	bf00      	nop
   13134:	10002396 	.word	0x10002396
   13138:	100063f4 	.word	0x100063f4
   1313c:	10006404 	.word	0x10006404
   13140:	10002394 	.word	0x10002394

00013144 <fitProcCccState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcCccState(fitMsg_t *pMsg)
{
   13144:	b580      	push	{r7, lr}
   13146:	b082      	sub	sp, #8
   13148:	af00      	add	r7, sp, #0
   1314a:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO3("ccc state ind value:%d handle:%d idx:%d", pMsg->ccc.value, pMsg->ccc.handle, pMsg->ccc.idx);

  /* handle heart rate measurement CCC */
  if (pMsg->ccc.idx == FIT_HRS_HRM_CCC_IDX)
   1314c:	687b      	ldr	r3, [r7, #4]
   1314e:	7a1b      	ldrb	r3, [r3, #8]
   13150:	2b01      	cmp	r3, #1
   13152:	d113      	bne.n	1317c <fitProcCccState+0x38>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   13154:	687b      	ldr	r3, [r7, #4]
   13156:	88db      	ldrh	r3, [r3, #6]
   13158:	2b01      	cmp	r3, #1
   1315a:	d108      	bne.n	1316e <fitProcCccState+0x2a>
    {
      HrpsMeasStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_HR_TIMER_IND, FIT_HRS_HRM_CCC_IDX);
   1315c:	687b      	ldr	r3, [r7, #4]
   1315e:	881b      	ldrh	r3, [r3, #0]
   13160:	b2db      	uxtb	r3, r3
   13162:	2201      	movs	r2, #1
   13164:	21a0      	movs	r1, #160	; 0xa0
   13166:	4618      	mov	r0, r3
   13168:	f006 f9b2 	bl	194d0 <HrpsMeasStart>
    }
    else
    {
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   1316c:	e031      	b.n	131d2 <fitProcCccState+0x8e>
      HrpsMeasStop((dmConnId_t) pMsg->ccc.hdr.param);
   1316e:	687b      	ldr	r3, [r7, #4]
   13170:	881b      	ldrh	r3, [r3, #0]
   13172:	b2db      	uxtb	r3, r3
   13174:	4618      	mov	r0, r3
   13176:	f006 f9d3 	bl	19520 <HrpsMeasStop>
    return;
   1317a:	e02a      	b.n	131d2 <fitProcCccState+0x8e>
  }

  /* handle running speed and cadence measurement CCC */
  if (pMsg->ccc.idx == FIT_RSCS_SM_CCC_IDX)
   1317c:	687b      	ldr	r3, [r7, #4]
   1317e:	7a1b      	ldrb	r3, [r3, #8]
   13180:	2b03      	cmp	r3, #3
   13182:	d10e      	bne.n	131a2 <fitProcCccState+0x5e>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   13184:	687b      	ldr	r3, [r7, #4]
   13186:	88db      	ldrh	r3, [r3, #6]
   13188:	2b01      	cmp	r3, #1
   1318a:	d106      	bne.n	1319a <fitProcCccState+0x56>
    {
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   1318c:	687b      	ldr	r3, [r7, #4]
   1318e:	881b      	ldrh	r3, [r3, #0]
   13190:	b2db      	uxtb	r3, r3
   13192:	4618      	mov	r0, r3
   13194:	f7ff ff84 	bl	130a0 <fitSendRunningSpeedMeasurement>
    }
    else
    {
      WsfTimerStop(&fitRscmTimer);
    }
    return;
   13198:	e01b      	b.n	131d2 <fitProcCccState+0x8e>
      WsfTimerStop(&fitRscmTimer);
   1319a:	480f      	ldr	r0, [pc, #60]	; (131d8 <fitProcCccState+0x94>)
   1319c:	f004 fe40 	bl	17e20 <WsfTimerStop>
    return;
   131a0:	e017      	b.n	131d2 <fitProcCccState+0x8e>
  }

  /* handle battery level CCC */
  if (pMsg->ccc.idx == FIT_BATT_LVL_CCC_IDX)
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	7a1b      	ldrb	r3, [r3, #8]
   131a6:	2b02      	cmp	r3, #2
   131a8:	d113      	bne.n	131d2 <fitProcCccState+0x8e>
  {
    if (pMsg->ccc.value == ATT_CLIENT_CFG_NOTIFY)
   131aa:	687b      	ldr	r3, [r7, #4]
   131ac:	88db      	ldrh	r3, [r3, #6]
   131ae:	2b01      	cmp	r3, #1
   131b0:	d108      	bne.n	131c4 <fitProcCccState+0x80>
    {
      BasMeasBattStart((dmConnId_t) pMsg->ccc.hdr.param, FIT_BATT_TIMER_IND, FIT_BATT_LVL_CCC_IDX);
   131b2:	687b      	ldr	r3, [r7, #4]
   131b4:	881b      	ldrh	r3, [r3, #0]
   131b6:	b2db      	uxtb	r3, r3
   131b8:	2202      	movs	r2, #2
   131ba:	21a1      	movs	r1, #161	; 0xa1
   131bc:	4618      	mov	r0, r3
   131be:	f000 fc0d 	bl	139dc <BasMeasBattStart>
    }
    else
    {
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
    }
    return;
   131c2:	e006      	b.n	131d2 <fitProcCccState+0x8e>
      BasMeasBattStop((dmConnId_t) pMsg->ccc.hdr.param);
   131c4:	687b      	ldr	r3, [r7, #4]
   131c6:	881b      	ldrh	r3, [r3, #0]
   131c8:	b2db      	uxtb	r3, r3
   131ca:	4618      	mov	r0, r3
   131cc:	f000 fc46 	bl	13a5c <BasMeasBattStop>
    return;
   131d0:	bf00      	nop
  }
}
   131d2:	3708      	adds	r7, #8
   131d4:	46bd      	mov	sp, r7
   131d6:	bd80      	pop	{r7, pc}
   131d8:	100063f4 	.word	0x100063f4

000131dc <fitClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitClose(fitMsg_t *pMsg)
{
   131dc:	b580      	push	{r7, lr}
   131de:	b082      	sub	sp, #8
   131e0:	af00      	add	r7, sp, #0
   131e2:	6078      	str	r0, [r7, #4]
  /* stop heart rate measurement */
  HrpsMeasStop((dmConnId_t) pMsg->hdr.param);
   131e4:	687b      	ldr	r3, [r7, #4]
   131e6:	881b      	ldrh	r3, [r3, #0]
   131e8:	b2db      	uxtb	r3, r3
   131ea:	4618      	mov	r0, r3
   131ec:	f006 f998 	bl	19520 <HrpsMeasStop>

  /* stop battery measurement */
  BasMeasBattStop((dmConnId_t) pMsg->hdr.param);
   131f0:	687b      	ldr	r3, [r7, #4]
   131f2:	881b      	ldrh	r3, [r3, #0]
   131f4:	b2db      	uxtb	r3, r3
   131f6:	4618      	mov	r0, r3
   131f8:	f000 fc30 	bl	13a5c <BasMeasBattStop>

  /* Stop running speed and cadence timer */
  WsfTimerStop(&fitRscmTimer);
   131fc:	4803      	ldr	r0, [pc, #12]	; (1320c <fitClose+0x30>)
   131fe:	f004 fe0f 	bl	17e20 <WsfTimerStop>
}
   13202:	bf00      	nop
   13204:	3708      	adds	r7, #8
   13206:	46bd      	mov	sp, r7
   13208:	bd80      	pop	{r7, pc}
   1320a:	bf00      	nop
   1320c:	100063f4 	.word	0x100063f4

00013210 <fitSetup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitSetup(fitMsg_t *pMsg)
{
   13210:	b580      	push	{r7, lr}
   13212:	b082      	sub	sp, #8
   13214:	af00      	add	r7, sp, #0
   13216:	6078      	str	r0, [r7, #4]
  /* set advertising and scan response data for discoverable mode */
  AppAdvSetData(APP_ADV_DATA_DISCOVERABLE, sizeof(fitAdvDataDisc), (uint8_t *) fitAdvDataDisc);
   13218:	4a0d      	ldr	r2, [pc, #52]	; (13250 <fitSetup+0x40>)
   1321a:	2110      	movs	r1, #16
   1321c:	2002      	movs	r0, #2
   1321e:	f00b f861 	bl	1e2e4 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_DISCOVERABLE, sizeof(fitScanDataDisc), (uint8_t *) fitScanDataDisc);
   13222:	4a0c      	ldr	r2, [pc, #48]	; (13254 <fitSetup+0x44>)
   13224:	2105      	movs	r1, #5
   13226:	2003      	movs	r0, #3
   13228:	f00b f85c 	bl	1e2e4 <AppAdvSetData>

  /* set advertising and scan response data for connectable mode */
  AppAdvSetData(APP_ADV_DATA_CONNECTABLE, sizeof(fitAdvDataDisc), (uint8_t *) fitAdvDataDisc);
   1322c:	4a08      	ldr	r2, [pc, #32]	; (13250 <fitSetup+0x40>)
   1322e:	2110      	movs	r1, #16
   13230:	2000      	movs	r0, #0
   13232:	f00b f857 	bl	1e2e4 <AppAdvSetData>
  AppAdvSetData(APP_SCAN_DATA_CONNECTABLE, sizeof(fitScanDataDisc), (uint8_t *) fitScanDataDisc);
   13236:	4a07      	ldr	r2, [pc, #28]	; (13254 <fitSetup+0x44>)
   13238:	2105      	movs	r1, #5
   1323a:	2001      	movs	r0, #1
   1323c:	f00b f852 	bl	1e2e4 <AppAdvSetData>

  /* start advertising; automatically set connectable/discoverable mode and bondable mode */
  AppAdvStart(APP_MODE_AUTO_INIT);
   13240:	2002      	movs	r0, #2
   13242:	f00b f871 	bl	1e328 <AppAdvStart>
}
   13246:	bf00      	nop
   13248:	3708      	adds	r7, #8
   1324a:	46bd      	mov	sp, r7
   1324c:	bd80      	pop	{r7, pc}
   1324e:	bf00      	nop
   13250:	000229dc 	.word	0x000229dc
   13254:	000229ec 	.word	0x000229ec

00013258 <fitBtnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitBtnCback(uint8_t btn)
{
   13258:	b580      	push	{r7, lr}
   1325a:	b084      	sub	sp, #16
   1325c:	af00      	add	r7, sp, #0
   1325e:	4603      	mov	r3, r0
   13260:	71fb      	strb	r3, [r7, #7]
  dmConnId_t      connId;
  static uint8_t  heartRate = 78;    /* for testing/demonstration */

  /* button actions when connected */
  if ((connId = AppConnIsOpen()) != DM_CONN_ID_NONE)
   13262:	f009 fd53 	bl	1cd0c <AppConnIsOpen>
   13266:	4603      	mov	r3, r0
   13268:	73fb      	strb	r3, [r7, #15]
   1326a:	7bfb      	ldrb	r3, [r7, #15]
   1326c:	2b00      	cmp	r3, #0
   1326e:	d030      	beq.n	132d2 <fitBtnCback+0x7a>
  {
    switch (btn)
   13270:	79fb      	ldrb	r3, [r7, #7]
   13272:	3b02      	subs	r3, #2
   13274:	2b05      	cmp	r3, #5
   13276:	d845      	bhi.n	13304 <fitBtnCback+0xac>
   13278:	a201      	add	r2, pc, #4	; (adr r2, 13280 <fitBtnCback+0x28>)
   1327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1327e:	bf00      	nop
   13280:	00013299 	.word	0x00013299
   13284:	00013305 	.word	0x00013305
   13288:	000132b1 	.word	0x000132b1
   1328c:	00013305 	.word	0x00013305
   13290:	00013305 	.word	0x00013305
   13294:	000132bb 	.word	0x000132bb
    {
      case APP_UI_BTN_1_SHORT:
        /* increment the heart rate */
        AppHwHrmTest(++heartRate);
   13298:	4b1d      	ldr	r3, [pc, #116]	; (13310 <fitBtnCback+0xb8>)
   1329a:	781b      	ldrb	r3, [r3, #0]
   1329c:	3301      	adds	r3, #1
   1329e:	b2da      	uxtb	r2, r3
   132a0:	4b1b      	ldr	r3, [pc, #108]	; (13310 <fitBtnCback+0xb8>)
   132a2:	701a      	strb	r2, [r3, #0]
   132a4:	4b1a      	ldr	r3, [pc, #104]	; (13310 <fitBtnCback+0xb8>)
   132a6:	781b      	ldrb	r3, [r3, #0]
   132a8:	4618      	mov	r0, r3
   132aa:	f006 ffef 	bl	1a28c <AppHwHrmTest>
        break;
   132ae:	e02a      	b.n	13306 <fitBtnCback+0xae>

      case APP_UI_BTN_1_MED:
        break;

      case APP_UI_BTN_1_LONG:
        AppConnClose(connId);
   132b0:	7bfb      	ldrb	r3, [r7, #15]
   132b2:	4618      	mov	r0, r3
   132b4:	f009 fd1a 	bl	1ccec <AppConnClose>
        break;
   132b8:	e025      	b.n	13306 <fitBtnCback+0xae>

      case APP_UI_BTN_2_SHORT:
        /* decrement the heart rate */
        AppHwHrmTest(--heartRate);
   132ba:	4b15      	ldr	r3, [pc, #84]	; (13310 <fitBtnCback+0xb8>)
   132bc:	781b      	ldrb	r3, [r3, #0]
   132be:	3b01      	subs	r3, #1
   132c0:	b2da      	uxtb	r2, r3
   132c2:	4b13      	ldr	r3, [pc, #76]	; (13310 <fitBtnCback+0xb8>)
   132c4:	701a      	strb	r2, [r3, #0]
   132c6:	4b12      	ldr	r3, [pc, #72]	; (13310 <fitBtnCback+0xb8>)
   132c8:	781b      	ldrb	r3, [r3, #0]
   132ca:	4618      	mov	r0, r3
   132cc:	f006 ffde 	bl	1a28c <AppHwHrmTest>
        break;
   132d0:	e019      	b.n	13306 <fitBtnCback+0xae>
    }
  }
  /* button actions when not connected */
  else
  {
    switch (btn)
   132d2:	79fb      	ldrb	r3, [r7, #7]
   132d4:	2b03      	cmp	r3, #3
   132d6:	d008      	beq.n	132ea <fitBtnCback+0x92>
   132d8:	2b04      	cmp	r3, #4
   132da:	d00d      	beq.n	132f8 <fitBtnCback+0xa0>
   132dc:	2b02      	cmp	r3, #2
   132de:	d000      	beq.n	132e2 <fitBtnCback+0x8a>
        AppDbDeleteAllRecords();
        AppAdvStart(APP_MODE_AUTO_INIT);
        break;

      default:
        break;
   132e0:	e011      	b.n	13306 <fitBtnCback+0xae>
        AppAdvStart(APP_MODE_AUTO_INIT);
   132e2:	2002      	movs	r0, #2
   132e4:	f00b f820 	bl	1e328 <AppAdvStart>
        break;
   132e8:	e00d      	b.n	13306 <fitBtnCback+0xae>
        AppSetBondable(TRUE);
   132ea:	2001      	movs	r0, #1
   132ec:	f00a ff12 	bl	1e114 <AppSetBondable>
        AppAdvStart(APP_MODE_DISCOVERABLE);
   132f0:	2001      	movs	r0, #1
   132f2:	f00b f819 	bl	1e328 <AppAdvStart>
        break;
   132f6:	e006      	b.n	13306 <fitBtnCback+0xae>
        AppDbDeleteAllRecords();
   132f8:	f006 fdd8 	bl	19eac <AppDbDeleteAllRecords>
        AppAdvStart(APP_MODE_AUTO_INIT);
   132fc:	2002      	movs	r0, #2
   132fe:	f00b f813 	bl	1e328 <AppAdvStart>
        break;
   13302:	e000      	b.n	13306 <fitBtnCback+0xae>
        break;
   13304:	bf00      	nop
    }
  }
}
   13306:	bf00      	nop
   13308:	3710      	adds	r7, #16
   1330a:	46bd      	mov	sp, r7
   1330c:	bd80      	pop	{r7, pc}
   1330e:	bf00      	nop
   13310:	10002397 	.word	0x10002397

00013314 <fitProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void fitProcMsg(fitMsg_t *pMsg)
{
   13314:	b580      	push	{r7, lr}
   13316:	b084      	sub	sp, #16
   13318:	af00      	add	r7, sp, #0
   1331a:	6078      	str	r0, [r7, #4]
  uint8_t uiEvent = APP_UI_NONE;
   1331c:	2300      	movs	r3, #0
   1331e:	73fb      	strb	r3, [r7, #15]

  switch(pMsg->hdr.event)
   13320:	687b      	ldr	r3, [r7, #4]
   13322:	789b      	ldrb	r3, [r3, #2]
   13324:	3b0f      	subs	r3, #15
   13326:	2b93      	cmp	r3, #147	; 0x93
   13328:	f200 8185 	bhi.w	13636 <fitProcMsg+0x322>
   1332c:	a201      	add	r2, pc, #4	; (adr r2, 13334 <fitProcMsg+0x20>)
   1332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13332:	bf00      	nop
   13334:	000135a7 	.word	0x000135a7
   13338:	000135b9 	.word	0x000135b9
   1333c:	00013637 	.word	0x00013637
   13340:	00013637 	.word	0x00013637
   13344:	00013637 	.word	0x00013637
   13348:	00013637 	.word	0x00013637
   1334c:	00013637 	.word	0x00013637
   13350:	00013637 	.word	0x00013637
   13354:	00013637 	.word	0x00013637
   13358:	00013637 	.word	0x00013637
   1335c:	00013637 	.word	0x00013637
   13360:	00013637 	.word	0x00013637
   13364:	00013637 	.word	0x00013637
   13368:	00013637 	.word	0x00013637
   1336c:	00013637 	.word	0x00013637
   13370:	00013637 	.word	0x00013637
   13374:	00013637 	.word	0x00013637
   13378:	000135c1 	.word	0x000135c1
   1337c:	000135cb 	.word	0x000135cb
   13380:	000135d1 	.word	0x000135d1
   13384:	00013637 	.word	0x00013637
   13388:	00013637 	.word	0x00013637
   1338c:	00013637 	.word	0x00013637
   13390:	00013637 	.word	0x00013637
   13394:	000135d7 	.word	0x000135d7
   13398:	000135ed 	.word	0x000135ed
   1339c:	00013637 	.word	0x00013637
   133a0:	000135f9 	.word	0x000135f9
   133a4:	000135ff 	.word	0x000135ff
   133a8:	00013605 	.word	0x00013605
   133ac:	0001360b 	.word	0x0001360b
   133b0:	00013611 	.word	0x00013611
   133b4:	00013637 	.word	0x00013637
   133b8:	00013637 	.word	0x00013637
   133bc:	00013637 	.word	0x00013637
   133c0:	00013637 	.word	0x00013637
   133c4:	00013637 	.word	0x00013637
   133c8:	0001361b 	.word	0x0001361b
   133cc:	0001362d 	.word	0x0001362d
   133d0:	00013637 	.word	0x00013637
   133d4:	00013637 	.word	0x00013637
   133d8:	00013637 	.word	0x00013637
   133dc:	00013637 	.word	0x00013637
   133e0:	00013637 	.word	0x00013637
   133e4:	00013637 	.word	0x00013637
   133e8:	00013637 	.word	0x00013637
   133ec:	00013637 	.word	0x00013637
   133f0:	00013637 	.word	0x00013637
   133f4:	00013637 	.word	0x00013637
   133f8:	00013637 	.word	0x00013637
   133fc:	00013637 	.word	0x00013637
   13400:	00013637 	.word	0x00013637
   13404:	00013637 	.word	0x00013637
   13408:	00013637 	.word	0x00013637
   1340c:	00013637 	.word	0x00013637
   13410:	00013637 	.word	0x00013637
   13414:	00013637 	.word	0x00013637
   13418:	00013637 	.word	0x00013637
   1341c:	00013637 	.word	0x00013637
   13420:	00013637 	.word	0x00013637
   13424:	00013637 	.word	0x00013637
   13428:	00013637 	.word	0x00013637
   1342c:	00013637 	.word	0x00013637
   13430:	00013637 	.word	0x00013637
   13434:	00013637 	.word	0x00013637
   13438:	00013637 	.word	0x00013637
   1343c:	00013637 	.word	0x00013637
   13440:	00013637 	.word	0x00013637
   13444:	00013637 	.word	0x00013637
   13448:	00013637 	.word	0x00013637
   1344c:	00013637 	.word	0x00013637
   13450:	00013637 	.word	0x00013637
   13454:	00013637 	.word	0x00013637
   13458:	00013637 	.word	0x00013637
   1345c:	00013637 	.word	0x00013637
   13460:	00013637 	.word	0x00013637
   13464:	00013637 	.word	0x00013637
   13468:	00013637 	.word	0x00013637
   1346c:	00013637 	.word	0x00013637
   13470:	00013637 	.word	0x00013637
   13474:	00013637 	.word	0x00013637
   13478:	00013637 	.word	0x00013637
   1347c:	00013637 	.word	0x00013637
   13480:	00013637 	.word	0x00013637
   13484:	00013637 	.word	0x00013637
   13488:	00013637 	.word	0x00013637
   1348c:	00013637 	.word	0x00013637
   13490:	00013637 	.word	0x00013637
   13494:	00013637 	.word	0x00013637
   13498:	00013637 	.word	0x00013637
   1349c:	00013637 	.word	0x00013637
   134a0:	00013637 	.word	0x00013637
   134a4:	00013637 	.word	0x00013637
   134a8:	00013637 	.word	0x00013637
   134ac:	00013637 	.word	0x00013637
   134b0:	00013637 	.word	0x00013637
   134b4:	00013637 	.word	0x00013637
   134b8:	00013637 	.word	0x00013637
   134bc:	00013637 	.word	0x00013637
   134c0:	00013637 	.word	0x00013637
   134c4:	00013637 	.word	0x00013637
   134c8:	00013637 	.word	0x00013637
   134cc:	00013637 	.word	0x00013637
   134d0:	00013637 	.word	0x00013637
   134d4:	00013637 	.word	0x00013637
   134d8:	00013637 	.word	0x00013637
   134dc:	00013637 	.word	0x00013637
   134e0:	00013637 	.word	0x00013637
   134e4:	00013637 	.word	0x00013637
   134e8:	00013637 	.word	0x00013637
   134ec:	00013637 	.word	0x00013637
   134f0:	00013637 	.word	0x00013637
   134f4:	00013637 	.word	0x00013637
   134f8:	00013637 	.word	0x00013637
   134fc:	00013637 	.word	0x00013637
   13500:	00013637 	.word	0x00013637
   13504:	00013637 	.word	0x00013637
   13508:	00013637 	.word	0x00013637
   1350c:	00013637 	.word	0x00013637
   13510:	00013637 	.word	0x00013637
   13514:	00013637 	.word	0x00013637
   13518:	00013637 	.word	0x00013637
   1351c:	00013637 	.word	0x00013637
   13520:	00013637 	.word	0x00013637
   13524:	00013637 	.word	0x00013637
   13528:	00013637 	.word	0x00013637
   1352c:	00013637 	.word	0x00013637
   13530:	00013637 	.word	0x00013637
   13534:	00013637 	.word	0x00013637
   13538:	00013637 	.word	0x00013637
   1353c:	00013637 	.word	0x00013637
   13540:	00013637 	.word	0x00013637
   13544:	00013637 	.word	0x00013637
   13548:	00013637 	.word	0x00013637
   1354c:	00013637 	.word	0x00013637
   13550:	00013637 	.word	0x00013637
   13554:	00013637 	.word	0x00013637
   13558:	00013637 	.word	0x00013637
   1355c:	00013637 	.word	0x00013637
   13560:	00013637 	.word	0x00013637
   13564:	00013637 	.word	0x00013637
   13568:	00013637 	.word	0x00013637
   1356c:	00013637 	.word	0x00013637
   13570:	00013637 	.word	0x00013637
   13574:	00013637 	.word	0x00013637
   13578:	00013593 	.word	0x00013593
   1357c:	0001359d 	.word	0x0001359d
   13580:	00013585 	.word	0x00013585
  {
    case FIT_RUNNING_TIMER_IND:
      fitSendRunningSpeedMeasurement((dmConnId_t)pMsg->ccc.hdr.param);
   13584:	687b      	ldr	r3, [r7, #4]
   13586:	881b      	ldrh	r3, [r3, #0]
   13588:	b2db      	uxtb	r3, r3
   1358a:	4618      	mov	r0, r3
   1358c:	f7ff fd88 	bl	130a0 <fitSendRunningSpeedMeasurement>
      break;
   13590:	e052      	b.n	13638 <fitProcMsg+0x324>

    case FIT_HR_TIMER_IND:
      HrpsProcMsg(&pMsg->hdr);
   13592:	687b      	ldr	r3, [r7, #4]
   13594:	4618      	mov	r0, r3
   13596:	f005 ffe5 	bl	19564 <HrpsProcMsg>
      break;
   1359a:	e04d      	b.n	13638 <fitProcMsg+0x324>

    case FIT_BATT_TIMER_IND:
      BasProcMsg(&pMsg->hdr);
   1359c:	687b      	ldr	r3, [r7, #4]
   1359e:	4618      	mov	r0, r3
   135a0:	f000 fa84 	bl	13aac <BasProcMsg>
      break;
   135a4:	e048      	b.n	13638 <fitProcMsg+0x324>

    case ATTS_HANDLE_VALUE_CNF:
      HrpsProcMsg(&pMsg->hdr);
   135a6:	687b      	ldr	r3, [r7, #4]
   135a8:	4618      	mov	r0, r3
   135aa:	f005 ffdb 	bl	19564 <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   135ae:	687b      	ldr	r3, [r7, #4]
   135b0:	4618      	mov	r0, r3
   135b2:	f000 fa7b 	bl	13aac <BasProcMsg>
      break;
   135b6:	e03f      	b.n	13638 <fitProcMsg+0x324>

    case ATTS_CCC_STATE_IND:
      fitProcCccState(pMsg);
   135b8:	6878      	ldr	r0, [r7, #4]
   135ba:	f7ff fdc3 	bl	13144 <fitProcCccState>
      break;
   135be:	e03b      	b.n	13638 <fitProcMsg+0x324>
    case ATT_MTU_UPDATE_IND:
      APP_TRACE_INFO1("Negotiated MTU %d", ((attEvt_t *)pMsg)->mtu);
      break;

    case DM_RESET_CMPL_IND:
      DmSecGenerateEccKeyReq();
   135c0:	f7fc fe16 	bl	101f0 <DmSecGenerateEccKeyReq>
      uiEvent = APP_UI_RESET_CMPL;
   135c4:	2301      	movs	r3, #1
   135c6:	73fb      	strb	r3, [r7, #15]
      break;
   135c8:	e036      	b.n	13638 <fitProcMsg+0x324>

    case DM_ADV_START_IND:
      uiEvent = APP_UI_ADV_START;
   135ca:	2303      	movs	r3, #3
   135cc:	73fb      	strb	r3, [r7, #15]
      break;
   135ce:	e033      	b.n	13638 <fitProcMsg+0x324>

    case DM_ADV_STOP_IND:
      uiEvent = APP_UI_ADV_STOP;
   135d0:	2304      	movs	r3, #4
   135d2:	73fb      	strb	r3, [r7, #15]
      break;
   135d4:	e030      	b.n	13638 <fitProcMsg+0x324>

    case DM_CONN_OPEN_IND:
      HrpsProcMsg(&pMsg->hdr);
   135d6:	687b      	ldr	r3, [r7, #4]
   135d8:	4618      	mov	r0, r3
   135da:	f005 ffc3 	bl	19564 <HrpsProcMsg>
      BasProcMsg(&pMsg->hdr);
   135de:	687b      	ldr	r3, [r7, #4]
   135e0:	4618      	mov	r0, r3
   135e2:	f000 fa63 	bl	13aac <BasProcMsg>
      // AppSlaveSecurityReq(1);
      uiEvent = APP_UI_CONN_OPEN;
   135e6:	2308      	movs	r3, #8
   135e8:	73fb      	strb	r3, [r7, #15]
      break;
   135ea:	e025      	b.n	13638 <fitProcMsg+0x324>

    case DM_CONN_CLOSE_IND:
      fitClose(pMsg);
   135ec:	6878      	ldr	r0, [r7, #4]
   135ee:	f7ff fdf5 	bl	131dc <fitClose>
      uiEvent = APP_UI_CONN_CLOSE;
   135f2:	2309      	movs	r3, #9
   135f4:	73fb      	strb	r3, [r7, #15]
      break;
   135f6:	e01f      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_PAIR_CMPL_IND:
      uiEvent = APP_UI_SEC_PAIR_CMPL;
   135f8:	230a      	movs	r3, #10
   135fa:	73fb      	strb	r3, [r7, #15]
      break;
   135fc:	e01c      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_PAIR_FAIL_IND:
      uiEvent = APP_UI_SEC_PAIR_FAIL;
   135fe:	230b      	movs	r3, #11
   13600:	73fb      	strb	r3, [r7, #15]
      break;
   13602:	e019      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_ENCRYPT_IND:
      uiEvent = APP_UI_SEC_ENCRYPT;
   13604:	230c      	movs	r3, #12
   13606:	73fb      	strb	r3, [r7, #15]
      break;
   13608:	e016      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_ENCRYPT_FAIL_IND:
      uiEvent = APP_UI_SEC_ENCRYPT_FAIL;
   1360a:	230d      	movs	r3, #13
   1360c:	73fb      	strb	r3, [r7, #15]
      break;
   1360e:	e013      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_AUTH_REQ_IND:
      AppHandlePasskey(&pMsg->dm.authReq);
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	4618      	mov	r0, r3
   13614:	f009 fb16 	bl	1cc44 <AppHandlePasskey>
      break;
   13618:	e00e      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_ECC_KEY_IND:
      fitSetup(pMsg);
   1361a:	6878      	ldr	r0, [r7, #4]
   1361c:	f7ff fdf8 	bl	13210 <fitSetup>
      DmSecSetEccKey(&pMsg->dm.eccMsg.data.key);
   13620:	687b      	ldr	r3, [r7, #4]
   13622:	3304      	adds	r3, #4
   13624:	4618      	mov	r0, r3
   13626:	f7fc fe41 	bl	102ac <DmSecSetEccKey>
      break;
   1362a:	e005      	b.n	13638 <fitProcMsg+0x324>

    case DM_SEC_COMPARE_IND:
      AppHandleNumericComparison(&pMsg->dm.cnfInd);
   1362c:	687b      	ldr	r3, [r7, #4]
   1362e:	4618      	mov	r0, r3
   13630:	f009 fb44 	bl	1ccbc <AppHandleNumericComparison>
      break;
   13634:	e000      	b.n	13638 <fitProcMsg+0x324>
        #endif
      }
      break;
      
    default:
      break;
   13636:	bf00      	nop
  }

  if (uiEvent != APP_UI_NONE)
   13638:	7bfb      	ldrb	r3, [r7, #15]
   1363a:	2b00      	cmp	r3, #0
   1363c:	d003      	beq.n	13646 <fitProcMsg+0x332>
  {
    AppUiAction(uiEvent);
   1363e:	7bfb      	ldrb	r3, [r7, #15]
   13640:	4618      	mov	r0, r3
   13642:	f006 fe33 	bl	1a2ac <AppUiAction>
  }
}
   13646:	bf00      	nop
   13648:	3710      	adds	r7, #16
   1364a:	46bd      	mov	sp, r7
   1364c:	bd80      	pop	{r7, pc}
   1364e:	bf00      	nop

00013650 <FitHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandlerInit(wsfHandlerId_t handlerId)
{
   13650:	b580      	push	{r7, lr}
   13652:	b082      	sub	sp, #8
   13654:	af00      	add	r7, sp, #0
   13656:	4603      	mov	r3, r0
   13658:	71fb      	strb	r3, [r7, #7]
  APP_TRACE_INFO0("FitHandlerInit");

  /* store handler ID */
  fitHandlerId = handlerId;
   1365a:	4a12      	ldr	r2, [pc, #72]	; (136a4 <FitHandlerInit+0x54>)
   1365c:	79fb      	ldrb	r3, [r7, #7]
   1365e:	7013      	strb	r3, [r2, #0]

  /* Set configuration pointers */
  pAppAdvCfg = (appAdvCfg_t *) &fitAdvCfg;
   13660:	4b11      	ldr	r3, [pc, #68]	; (136a8 <FitHandlerInit+0x58>)
   13662:	4a12      	ldr	r2, [pc, #72]	; (136ac <FitHandlerInit+0x5c>)
   13664:	601a      	str	r2, [r3, #0]
  pAppSlaveCfg = (appSlaveCfg_t *) &fitSlaveCfg;
   13666:	4b12      	ldr	r3, [pc, #72]	; (136b0 <FitHandlerInit+0x60>)
   13668:	4a12      	ldr	r2, [pc, #72]	; (136b4 <FitHandlerInit+0x64>)
   1366a:	601a      	str	r2, [r3, #0]
  pAppSecCfg = (appSecCfg_t *) &fitSecCfg;
   1366c:	4b12      	ldr	r3, [pc, #72]	; (136b8 <FitHandlerInit+0x68>)
   1366e:	4a13      	ldr	r2, [pc, #76]	; (136bc <FitHandlerInit+0x6c>)
   13670:	601a      	str	r2, [r3, #0]
  pAppUpdateCfg = (appUpdateCfg_t *) &fitUpdateCfg;
   13672:	4b13      	ldr	r3, [pc, #76]	; (136c0 <FitHandlerInit+0x70>)
   13674:	4a13      	ldr	r2, [pc, #76]	; (136c4 <FitHandlerInit+0x74>)
   13676:	601a      	str	r2, [r3, #0]

  /* Initialize application framework */
  AppSlaveInit();
   13678:	f00a fa86 	bl	1db88 <AppSlaveInit>

  /* Set stack configuration pointers */
  pSmpCfg = (smpCfg_t *) &fitSmpCfg;
   1367c:	4b12      	ldr	r3, [pc, #72]	; (136c8 <FitHandlerInit+0x78>)
   1367e:	4a13      	ldr	r2, [pc, #76]	; (136cc <FitHandlerInit+0x7c>)
   13680:	601a      	str	r2, [r3, #0]

  /* initialize heart rate profile sensor */
  HrpsInit(handlerId, (hrpsCfg_t *) &fitHrpsCfg);
   13682:	79fb      	ldrb	r3, [r7, #7]
   13684:	4912      	ldr	r1, [pc, #72]	; (136d0 <FitHandlerInit+0x80>)
   13686:	4618      	mov	r0, r3
   13688:	f005 ff0c 	bl	194a4 <HrpsInit>
  HrpsSetFlags(CH_HRM_FLAGS_VALUE_8BIT | CH_HRM_FLAGS_ENERGY_EXP);
   1368c:	2008      	movs	r0, #8
   1368e:	f005 ffad 	bl	195ec <HrpsSetFlags>

  /* initialize battery service server */
  BasInit(handlerId, (basCfg_t *) &fitBasCfg);
   13692:	79fb      	ldrb	r3, [r7, #7]
   13694:	490f      	ldr	r1, [pc, #60]	; (136d4 <FitHandlerInit+0x84>)
   13696:	4618      	mov	r0, r3
   13698:	f000 f986 	bl	139a8 <BasInit>
}
   1369c:	bf00      	nop
   1369e:	3708      	adds	r7, #8
   136a0:	46bd      	mov	sp, r7
   136a2:	bd80      	pop	{r7, pc}
   136a4:	10006404 	.word	0x10006404
   136a8:	10006f6c 	.word	0x10006f6c
   136ac:	000229a0 	.word	0x000229a0
   136b0:	10006f48 	.word	0x10006f48
   136b4:	000229ac 	.word	0x000229ac
   136b8:	10006f60 	.word	0x10006f60
   136bc:	000229b0 	.word	0x000229b0
   136c0:	10006f44 	.word	0x10006f44
   136c4:	000229b8 	.word	0x000229b8
   136c8:	100023a0 	.word	0x100023a0
   136cc:	000229d4 	.word	0x000229d4
   136d0:	000229c8 	.word	0x000229c8
   136d4:	000229cc 	.word	0x000229cc

000136d8 <FitHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   136d8:	b580      	push	{r7, lr}
   136da:	b082      	sub	sp, #8
   136dc:	af00      	add	r7, sp, #0
   136de:	4603      	mov	r3, r0
   136e0:	6039      	str	r1, [r7, #0]
   136e2:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   136e4:	683b      	ldr	r3, [r7, #0]
   136e6:	2b00      	cmp	r3, #0
   136e8:	d010      	beq.n	1370c <FitHandler+0x34>
  {
    APP_TRACE_INFO1("Fit got evt %d", pMsg->event);

    if (pMsg->event >= DM_CBACK_START && pMsg->event <= DM_CBACK_END)
   136ea:	683b      	ldr	r3, [r7, #0]
   136ec:	789b      	ldrb	r3, [r3, #2]
   136ee:	2b1f      	cmp	r3, #31
   136f0:	d909      	bls.n	13706 <FitHandler+0x2e>
   136f2:	683b      	ldr	r3, [r7, #0]
   136f4:	789b      	ldrb	r3, [r3, #2]
   136f6:	2b55      	cmp	r3, #85	; 0x55
   136f8:	d805      	bhi.n	13706 <FitHandler+0x2e>
    {
      /* process advertising and connection-related messages */
      AppSlaveProcDmMsg((dmEvt_t *) pMsg);
   136fa:	6838      	ldr	r0, [r7, #0]
   136fc:	f00a fa84 	bl	1dc08 <AppSlaveProcDmMsg>

      /* process security-related messages */
      AppSlaveSecProcDmMsg((dmEvt_t *) pMsg);
   13700:	6838      	ldr	r0, [r7, #0]
   13702:	f00a fc85 	bl	1e010 <AppSlaveSecProcDmMsg>
    }

    /* perform profile and user interface-related operations */
    fitProcMsg((fitMsg_t *) pMsg);
   13706:	6838      	ldr	r0, [r7, #0]
   13708:	f7ff fe04 	bl	13314 <fitProcMsg>
  }
}
   1370c:	bf00      	nop
   1370e:	3708      	adds	r7, #8
   13710:	46bd      	mov	sp, r7
   13712:	bd80      	pop	{r7, pc}

00013714 <FitStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void FitStart(void)
{
   13714:	b580      	push	{r7, lr}
   13716:	af00      	add	r7, sp, #0
  /* Register for stack callbacks */
  DmRegister(fitDmCback);
   13718:	4816      	ldr	r0, [pc, #88]	; (13774 <FitStart+0x60>)
   1371a:	f7fc f999 	bl	fa50 <DmRegister>
  DmConnRegister(DM_CLIENT_ID_APP, fitDmCback);
   1371e:	4915      	ldr	r1, [pc, #84]	; (13774 <FitStart+0x60>)
   13720:	2003      	movs	r0, #3
   13722:	f7fb fe89 	bl	f438 <DmConnRegister>
  AttRegister(fitAttCback);
   13726:	4814      	ldr	r0, [pc, #80]	; (13778 <FitStart+0x64>)
   13728:	f7f8 ff50 	bl	c5cc <AttRegister>
  AttConnRegister(AppServerConnCback);
   1372c:	4813      	ldr	r0, [pc, #76]	; (1377c <FitStart+0x68>)
   1372e:	f7f8 ff67 	bl	c600 <AttConnRegister>
  AttsCccRegister(FIT_NUM_CCC_IDX, (attsCccSet_t *) fitCccSet, fitCccCback);
   13732:	4a13      	ldr	r2, [pc, #76]	; (13780 <FitStart+0x6c>)
   13734:	4913      	ldr	r1, [pc, #76]	; (13784 <FitStart+0x70>)
   13736:	2004      	movs	r0, #4
   13738:	f7f9 fd90 	bl	d25c <AttsCccRegister>

  /* Register for app framework callbacks */
  AppUiBtnRegister(fitBtnCback);
   1373c:	4812      	ldr	r0, [pc, #72]	; (13788 <FitStart+0x74>)
   1373e:	f006 fe13 	bl	1a368 <AppUiBtnRegister>

  /* Initialize attribute server database */
  SvcCoreAddGroup();
   13742:	f006 ffe5 	bl	1a710 <SvcCoreAddGroup>
  SvcHrsCbackRegister(NULL, HrpsWriteCback);
   13746:	4911      	ldr	r1, [pc, #68]	; (1378c <FitStart+0x78>)
   13748:	2000      	movs	r0, #0
   1374a:	f007 f813 	bl	1a774 <SvcHrsCbackRegister>
  SvcHrsAddGroup();
   1374e:	f007 f807 	bl	1a760 <SvcHrsAddGroup>
  SvcDisAddGroup();
   13752:	f006 fffb 	bl	1a74c <SvcDisAddGroup>
  SvcBattCbackRegister(BasReadCback, NULL);
   13756:	2100      	movs	r1, #0
   13758:	480d      	ldr	r0, [pc, #52]	; (13790 <FitStart+0x7c>)
   1375a:	f006 ffc5 	bl	1a6e8 <SvcBattCbackRegister>
  SvcBattAddGroup();
   1375e:	f006 ffb9 	bl	1a6d4 <SvcBattAddGroup>
  SvcRscsAddGroup();
   13762:	f007 f81b 	bl	1a79c <SvcRscsAddGroup>

  /* Set running speed and cadence features */
  RscpsSetFeatures(RSCS_ALL_FEATURES);
   13766:	2007      	movs	r0, #7
   13768:	f004 ff44 	bl	185f4 <RscpsSetFeatures>

  /* Reset the device */
  DmDevReset();
   1376c:	f7fc f910 	bl	f990 <DmDevReset>
}
   13770:	bf00      	nop
   13772:	bd80      	pop	{r7, pc}
   13774:	00012f95 	.word	0x00012f95
   13778:	00012fdd 	.word	0x00012fdd
   1377c:	0001ce8f 	.word	0x0001ce8f
   13780:	00013039 	.word	0x00013039
   13784:	000229f4 	.word	0x000229f4
   13788:	00013259 	.word	0x00013259
   1378c:	000195ad 	.word	0x000195ad
   13790:	00013b2d 	.word	0x00013b2d

00013794 <basNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t basNoConnActive(void)
{
   13794:	b480      	push	{r7}
   13796:	b083      	sub	sp, #12
   13798:	af00      	add	r7, sp, #0
  basConn_t     *pConn = basCb.conn;
   1379a:	4b0d      	ldr	r3, [pc, #52]	; (137d0 <basNoConnActive+0x3c>)
   1379c:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1379e:	2300      	movs	r3, #0
   137a0:	70fb      	strb	r3, [r7, #3]
   137a2:	e00b      	b.n	137bc <basNoConnActive+0x28>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   137a4:	687b      	ldr	r3, [r7, #4]
   137a6:	781b      	ldrb	r3, [r3, #0]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d001      	beq.n	137b0 <basNoConnActive+0x1c>
    {      
      return FALSE;
   137ac:	2300      	movs	r3, #0
   137ae:	e009      	b.n	137c4 <basNoConnActive+0x30>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   137b0:	78fb      	ldrb	r3, [r7, #3]
   137b2:	3301      	adds	r3, #1
   137b4:	70fb      	strb	r3, [r7, #3]
   137b6:	687b      	ldr	r3, [r7, #4]
   137b8:	3303      	adds	r3, #3
   137ba:	607b      	str	r3, [r7, #4]
   137bc:	78fb      	ldrb	r3, [r7, #3]
   137be:	2b07      	cmp	r3, #7
   137c0:	d9f0      	bls.n	137a4 <basNoConnActive+0x10>
    }
  }
  return TRUE;
   137c2:	2301      	movs	r3, #1
}
   137c4:	4618      	mov	r0, r3
   137c6:	370c      	adds	r7, #12
   137c8:	46bd      	mov	sp, r7
   137ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   137ce:	4770      	bx	lr
   137d0:	10004304 	.word	0x10004304

000137d4 <basSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSetupToSend(void)
{
   137d4:	b480      	push	{r7}
   137d6:	b083      	sub	sp, #12
   137d8:	af00      	add	r7, sp, #0
  basConn_t     *pConn = basCb.conn;
   137da:	4b0d      	ldr	r3, [pc, #52]	; (13810 <basSetupToSend+0x3c>)
   137dc:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   137de:	2300      	movs	r3, #0
   137e0:	70fb      	strb	r3, [r7, #3]
   137e2:	e00c      	b.n	137fe <basSetupToSend+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   137e4:	687b      	ldr	r3, [r7, #4]
   137e6:	781b      	ldrb	r3, [r3, #0]
   137e8:	2b00      	cmp	r3, #0
   137ea:	d002      	beq.n	137f2 <basSetupToSend+0x1e>
    {      
      pConn->battToSend = TRUE;
   137ec:	687b      	ldr	r3, [r7, #4]
   137ee:	2201      	movs	r2, #1
   137f0:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   137f2:	78fb      	ldrb	r3, [r7, #3]
   137f4:	3301      	adds	r3, #1
   137f6:	70fb      	strb	r3, [r7, #3]
   137f8:	687b      	ldr	r3, [r7, #4]
   137fa:	3303      	adds	r3, #3
   137fc:	607b      	str	r3, [r7, #4]
   137fe:	78fb      	ldrb	r3, [r7, #3]
   13800:	2b07      	cmp	r3, #7
   13802:	d9ef      	bls.n	137e4 <basSetupToSend+0x10>
    }
  }
}
   13804:	bf00      	nop
   13806:	370c      	adds	r7, #12
   13808:	46bd      	mov	sp, r7
   1380a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1380e:	4770      	bx	lr
   13810:	10004304 	.word	0x10004304

00013814 <basFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static basConn_t *basFindNextToSend(uint8_t cccIdx)
{
   13814:	b580      	push	{r7, lr}
   13816:	b084      	sub	sp, #16
   13818:	af00      	add	r7, sp, #0
   1381a:	4603      	mov	r3, r0
   1381c:	71fb      	strb	r3, [r7, #7]
  basConn_t    *pConn = basCb.conn;
   1381e:	4b17      	ldr	r3, [pc, #92]	; (1387c <basFindNextToSend+0x68>)
   13820:	60fb      	str	r3, [r7, #12]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   13822:	2300      	movs	r3, #0
   13824:	72fb      	strb	r3, [r7, #11]
   13826:	e020      	b.n	1386a <basFindNextToSend+0x56>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   13828:	68fb      	ldr	r3, [r7, #12]
   1382a:	781b      	ldrb	r3, [r3, #0]
   1382c:	2b00      	cmp	r3, #0
   1382e:	d016      	beq.n	1385e <basFindNextToSend+0x4a>
   13830:	68fb      	ldr	r3, [r7, #12]
   13832:	785b      	ldrb	r3, [r3, #1]
   13834:	2b00      	cmp	r3, #0
   13836:	d012      	beq.n	1385e <basFindNextToSend+0x4a>
        pConn->sentBattLevel != basCb.measBattLevel)
   13838:	68fb      	ldr	r3, [r7, #12]
   1383a:	789a      	ldrb	r2, [r3, #2]
   1383c:	4b0f      	ldr	r3, [pc, #60]	; (1387c <basFindNextToSend+0x68>)
   1383e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    if (pConn->connId != DM_CONN_ID_NONE && pConn->battToSend &&
   13842:	429a      	cmp	r2, r3
   13844:	d00b      	beq.n	1385e <basFindNextToSend+0x4a>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   13846:	68fb      	ldr	r3, [r7, #12]
   13848:	781b      	ldrb	r3, [r3, #0]
   1384a:	79fa      	ldrb	r2, [r7, #7]
   1384c:	4611      	mov	r1, r2
   1384e:	4618      	mov	r0, r3
   13850:	f7f9 fd78 	bl	d344 <AttsCccEnabled>
   13854:	4603      	mov	r3, r0
   13856:	2b00      	cmp	r3, #0
   13858:	d001      	beq.n	1385e <basFindNextToSend+0x4a>
      {
        return pConn;
   1385a:	68fb      	ldr	r3, [r7, #12]
   1385c:	e009      	b.n	13872 <basFindNextToSend+0x5e>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1385e:	7afb      	ldrb	r3, [r7, #11]
   13860:	3301      	adds	r3, #1
   13862:	72fb      	strb	r3, [r7, #11]
   13864:	68fb      	ldr	r3, [r7, #12]
   13866:	3303      	adds	r3, #3
   13868:	60fb      	str	r3, [r7, #12]
   1386a:	7afb      	ldrb	r3, [r7, #11]
   1386c:	2b07      	cmp	r3, #7
   1386e:	d9db      	bls.n	13828 <basFindNextToSend+0x14>
      }
    }
  }
  return NULL;
   13870:	2300      	movs	r3, #0
}
   13872:	4618      	mov	r0, r3
   13874:	3710      	adds	r7, #16
   13876:	46bd      	mov	sp, r7
   13878:	bd80      	pop	{r7, pc}
   1387a:	bf00      	nop
   1387c:	10004304 	.word	0x10004304

00013880 <basSendPeriodicBattlevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basSendPeriodicBattlevel(basConn_t *pConn)
{
   13880:	b580      	push	{r7, lr}
   13882:	b082      	sub	sp, #8
   13884:	af00      	add	r7, sp, #0
   13886:	6078      	str	r0, [r7, #4]
  BasSendBattLevel(pConn->connId, basCb.measTimer.msg.status, basCb.measBattLevel);
   13888:	687b      	ldr	r3, [r7, #4]
   1388a:	7818      	ldrb	r0, [r3, #0]
   1388c:	4b0c      	ldr	r3, [pc, #48]	; (138c0 <basSendPeriodicBattlevel+0x40>)
   1388e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   13892:	4b0b      	ldr	r3, [pc, #44]	; (138c0 <basSendPeriodicBattlevel+0x40>)
   13894:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
   13898:	461a      	mov	r2, r3
   1389a:	f000 f92b 	bl	13af4 <BasSendBattLevel>
  pConn->sentBattLevel = basCb.measBattLevel;
   1389e:	4b08      	ldr	r3, [pc, #32]	; (138c0 <basSendPeriodicBattlevel+0x40>)
   138a0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	709a      	strb	r2, [r3, #2]
  pConn->battToSend = FALSE;
   138a8:	687b      	ldr	r3, [r7, #4]
   138aa:	2200      	movs	r2, #0
   138ac:	705a      	strb	r2, [r3, #1]
  basCb.txReady = FALSE;
   138ae:	4b04      	ldr	r3, [pc, #16]	; (138c0 <basSendPeriodicBattlevel+0x40>)
   138b0:	2200      	movs	r2, #0
   138b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   138b6:	bf00      	nop
   138b8:	3708      	adds	r7, #8
   138ba:	46bd      	mov	sp, r7
   138bc:	bd80      	pop	{r7, pc}
   138be:	bf00      	nop
   138c0:	10004304 	.word	0x10004304

000138c4 <basConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basConnOpen(dmEvt_t *pMsg)
{
   138c4:	b480      	push	{r7}
   138c6:	b083      	sub	sp, #12
   138c8:	af00      	add	r7, sp, #0
   138ca:	6078      	str	r0, [r7, #4]
  basCb.txReady = TRUE;
   138cc:	4b04      	ldr	r3, [pc, #16]	; (138e0 <basConnOpen+0x1c>)
   138ce:	2201      	movs	r2, #1
   138d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   138d4:	bf00      	nop
   138d6:	370c      	adds	r7, #12
   138d8:	46bd      	mov	sp, r7
   138da:	f85d 7b04 	ldr.w	r7, [sp], #4
   138de:	4770      	bx	lr
   138e0:	10004304 	.word	0x10004304

000138e4 <basHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void basHandleValueCnf(attEvt_t *pMsg)
{
   138e4:	b580      	push	{r7, lr}
   138e6:	b084      	sub	sp, #16
   138e8:	af00      	add	r7, sp, #0
   138ea:	6078      	str	r0, [r7, #4]
  basConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == BATT_LVL_HDL)
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	78db      	ldrb	r3, [r3, #3]
   138f0:	2b00      	cmp	r3, #0
   138f2:	d114      	bne.n	1391e <basHandleValueCnf+0x3a>
   138f4:	687b      	ldr	r3, [r7, #4]
   138f6:	895b      	ldrh	r3, [r3, #10]
   138f8:	2b62      	cmp	r3, #98	; 0x62
   138fa:	d110      	bne.n	1391e <basHandleValueCnf+0x3a>
  {
    basCb.txReady = TRUE;
   138fc:	4b0a      	ldr	r3, [pc, #40]	; (13928 <basHandleValueCnf+0x44>)
   138fe:	2201      	movs	r2, #1
   13900:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = basFindNextToSend(basCb.measTimer.msg.status)) != NULL)
   13904:	4b08      	ldr	r3, [pc, #32]	; (13928 <basHandleValueCnf+0x44>)
   13906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1390a:	4618      	mov	r0, r3
   1390c:	f7ff ff82 	bl	13814 <basFindNextToSend>
   13910:	60f8      	str	r0, [r7, #12]
   13912:	68fb      	ldr	r3, [r7, #12]
   13914:	2b00      	cmp	r3, #0
   13916:	d002      	beq.n	1391e <basHandleValueCnf+0x3a>
    {
      basSendPeriodicBattlevel(pConn);
   13918:	68f8      	ldr	r0, [r7, #12]
   1391a:	f7ff ffb1 	bl	13880 <basSendPeriodicBattlevel>
    }
  }
}
   1391e:	bf00      	nop
   13920:	3710      	adds	r7, #16
   13922:	46bd      	mov	sp, r7
   13924:	bd80      	pop	{r7, pc}
   13926:	bf00      	nop
   13928:	10004304 	.word	0x10004304

0001392c <basMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void basMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   1392c:	b580      	push	{r7, lr}
   1392e:	b084      	sub	sp, #16
   13930:	af00      	add	r7, sp, #0
   13932:	6078      	str	r0, [r7, #4]
  basConn_t  *pConn;

  /* if there are active connections */
  if (basNoConnActive() == FALSE)
   13934:	f7ff ff2e 	bl	13794 <basNoConnActive>
   13938:	4603      	mov	r3, r0
   1393a:	2b00      	cmp	r3, #0
   1393c:	d129      	bne.n	13992 <basMeasTimerExp+0x66>
  {
    if (--basCb.currCount == 0)
   1393e:	4b17      	ldr	r3, [pc, #92]	; (1399c <basMeasTimerExp+0x70>)
   13940:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13942:	3b01      	subs	r3, #1
   13944:	b29a      	uxth	r2, r3
   13946:	4b15      	ldr	r3, [pc, #84]	; (1399c <basMeasTimerExp+0x70>)
   13948:	861a      	strh	r2, [r3, #48]	; 0x30
   1394a:	4b14      	ldr	r3, [pc, #80]	; (1399c <basMeasTimerExp+0x70>)
   1394c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1394e:	2b00      	cmp	r3, #0
   13950:	d119      	bne.n	13986 <basMeasTimerExp+0x5a>
    {
      /* reset count */
      basCb.currCount = basCb.cfg.count;
   13952:	4b12      	ldr	r3, [pc, #72]	; (1399c <basMeasTimerExp+0x70>)
   13954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   13956:	4b11      	ldr	r3, [pc, #68]	; (1399c <basMeasTimerExp+0x70>)
   13958:	861a      	strh	r2, [r3, #48]	; 0x30
      
      /* set up battery measurement to be sent on all connections */
      basSetupToSend();
   1395a:	f7ff ff3b 	bl	137d4 <basSetupToSend>

      /* read battery measurement sensor data */
      AppHwBattRead(&basCb.measBattLevel);
   1395e:	4810      	ldr	r0, [pc, #64]	; (139a0 <basMeasTimerExp+0x74>)
   13960:	f006 fc58 	bl	1a214 <AppHwBattRead>
    
      /* if ready to send measurements */
      if (basCb.txReady)
   13964:	4b0d      	ldr	r3, [pc, #52]	; (1399c <basMeasTimerExp+0x70>)
   13966:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   1396a:	2b00      	cmp	r3, #0
   1396c:	d00b      	beq.n	13986 <basMeasTimerExp+0x5a>
      {
        /* find next connection to send (note ccc idx is stored in timer status) */
        if ((pConn = basFindNextToSend(pMsg->status)) != NULL)
   1396e:	687b      	ldr	r3, [r7, #4]
   13970:	78db      	ldrb	r3, [r3, #3]
   13972:	4618      	mov	r0, r3
   13974:	f7ff ff4e 	bl	13814 <basFindNextToSend>
   13978:	60f8      	str	r0, [r7, #12]
   1397a:	68fb      	ldr	r3, [r7, #12]
   1397c:	2b00      	cmp	r3, #0
   1397e:	d002      	beq.n	13986 <basMeasTimerExp+0x5a>
        {
          basSendPeriodicBattlevel(pConn);
   13980:	68f8      	ldr	r0, [r7, #12]
   13982:	f7ff ff7d 	bl	13880 <basSendPeriodicBattlevel>
        }
      }
    }
        
    /* restart timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);    
   13986:	4b05      	ldr	r3, [pc, #20]	; (1399c <basMeasTimerExp+0x70>)
   13988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1398a:	4619      	mov	r1, r3
   1398c:	4805      	ldr	r0, [pc, #20]	; (139a4 <basMeasTimerExp+0x78>)
   1398e:	f004 fa21 	bl	17dd4 <WsfTimerStartSec>
  }
}
   13992:	bf00      	nop
   13994:	3710      	adds	r7, #16
   13996:	46bd      	mov	sp, r7
   13998:	bd80      	pop	{r7, pc}
   1399a:	bf00      	nop
   1399c:	10004304 	.word	0x10004304
   139a0:	10004337 	.word	0x10004337
   139a4:	1000431c 	.word	0x1000431c

000139a8 <BasInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasInit(wsfHandlerId_t handlerId, basCfg_t *pCfg)
{
   139a8:	b480      	push	{r7}
   139aa:	b083      	sub	sp, #12
   139ac:	af00      	add	r7, sp, #0
   139ae:	4603      	mov	r3, r0
   139b0:	6039      	str	r1, [r7, #0]
   139b2:	71fb      	strb	r3, [r7, #7]
  basCb.measTimer.handlerId = handlerId;
   139b4:	4a08      	ldr	r2, [pc, #32]	; (139d8 <BasInit+0x30>)
   139b6:	79fb      	ldrb	r3, [r7, #7]
   139b8:	f882 3020 	strb.w	r3, [r2, #32]
  basCb.cfg = *pCfg;
   139bc:	4b06      	ldr	r3, [pc, #24]	; (139d8 <BasInit+0x30>)
   139be:	683a      	ldr	r2, [r7, #0]
   139c0:	3328      	adds	r3, #40	; 0x28
   139c2:	e892 0003 	ldmia.w	r2, {r0, r1}
   139c6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   139ca:	bf00      	nop
   139cc:	370c      	adds	r7, #12
   139ce:	46bd      	mov	sp, r7
   139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   139d4:	4770      	bx	lr
   139d6:	bf00      	nop
   139d8:	10004304 	.word	0x10004304

000139dc <BasMeasBattStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStart(dmConnId_t connId, uint8_t timerEvt, uint8_t battCccIdx)
{
   139dc:	b580      	push	{r7, lr}
   139de:	b082      	sub	sp, #8
   139e0:	af00      	add	r7, sp, #0
   139e2:	4603      	mov	r3, r0
   139e4:	71fb      	strb	r3, [r7, #7]
   139e6:	460b      	mov	r3, r1
   139e8:	71bb      	strb	r3, [r7, #6]
   139ea:	4613      	mov	r3, r2
   139ec:	717b      	strb	r3, [r7, #5]
  /* if this is first connection */
  if (basNoConnActive())
   139ee:	f7ff fed1 	bl	13794 <basNoConnActive>
   139f2:	4603      	mov	r3, r0
   139f4:	2b00      	cmp	r3, #0
   139f6:	d015      	beq.n	13a24 <BasMeasBattStart+0x48>
  {   
    /* initialize control block */
    basCb.measTimer.msg.event = timerEvt;
   139f8:	4a16      	ldr	r2, [pc, #88]	; (13a54 <BasMeasBattStart+0x78>)
   139fa:	79bb      	ldrb	r3, [r7, #6]
   139fc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    basCb.measTimer.msg.status = battCccIdx;  
   13a00:	4a14      	ldr	r2, [pc, #80]	; (13a54 <BasMeasBattStart+0x78>)
   13a02:	797b      	ldrb	r3, [r7, #5]
   13a04:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
    basCb.measBattLevel = BAS_BATT_LEVEL_INIT;
   13a08:	4b12      	ldr	r3, [pc, #72]	; (13a54 <BasMeasBattStart+0x78>)
   13a0a:	22ff      	movs	r2, #255	; 0xff
   13a0c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    basCb.currCount = basCb.cfg.count;
   13a10:	4b10      	ldr	r3, [pc, #64]	; (13a54 <BasMeasBattStart+0x78>)
   13a12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
   13a14:	4b0f      	ldr	r3, [pc, #60]	; (13a54 <BasMeasBattStart+0x78>)
   13a16:	861a      	strh	r2, [r3, #48]	; 0x30
    
    /* start timer */
    WsfTimerStartSec(&basCb.measTimer, basCb.cfg.period);
   13a18:	4b0e      	ldr	r3, [pc, #56]	; (13a54 <BasMeasBattStart+0x78>)
   13a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13a1c:	4619      	mov	r1, r3
   13a1e:	480e      	ldr	r0, [pc, #56]	; (13a58 <BasMeasBattStart+0x7c>)
   13a20:	f004 f9d8 	bl	17dd4 <WsfTimerStartSec>
  }
  
  /* set conn id and last sent battery level */
  basCb.conn[connId - 1].connId = connId;  
   13a24:	79fb      	ldrb	r3, [r7, #7]
   13a26:	1e5a      	subs	r2, r3, #1
   13a28:	490a      	ldr	r1, [pc, #40]	; (13a54 <BasMeasBattStart+0x78>)
   13a2a:	4613      	mov	r3, r2
   13a2c:	005b      	lsls	r3, r3, #1
   13a2e:	4413      	add	r3, r2
   13a30:	440b      	add	r3, r1
   13a32:	79fa      	ldrb	r2, [r7, #7]
   13a34:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].sentBattLevel = BAS_BATT_LEVEL_INIT;
   13a36:	79fb      	ldrb	r3, [r7, #7]
   13a38:	1e5a      	subs	r2, r3, #1
   13a3a:	4906      	ldr	r1, [pc, #24]	; (13a54 <BasMeasBattStart+0x78>)
   13a3c:	4613      	mov	r3, r2
   13a3e:	005b      	lsls	r3, r3, #1
   13a40:	4413      	add	r3, r2
   13a42:	440b      	add	r3, r1
   13a44:	3302      	adds	r3, #2
   13a46:	22ff      	movs	r2, #255	; 0xff
   13a48:	701a      	strb	r2, [r3, #0]
}
   13a4a:	bf00      	nop
   13a4c:	3708      	adds	r7, #8
   13a4e:	46bd      	mov	sp, r7
   13a50:	bd80      	pop	{r7, pc}
   13a52:	bf00      	nop
   13a54:	10004304 	.word	0x10004304
   13a58:	1000431c 	.word	0x1000431c

00013a5c <BasMeasBattStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasMeasBattStop(dmConnId_t connId)
{
   13a5c:	b580      	push	{r7, lr}
   13a5e:	b082      	sub	sp, #8
   13a60:	af00      	add	r7, sp, #0
   13a62:	4603      	mov	r3, r0
   13a64:	71fb      	strb	r3, [r7, #7]
  /* clear connection */
  basCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   13a66:	79fb      	ldrb	r3, [r7, #7]
   13a68:	1e5a      	subs	r2, r3, #1
   13a6a:	490e      	ldr	r1, [pc, #56]	; (13aa4 <BasMeasBattStop+0x48>)
   13a6c:	4613      	mov	r3, r2
   13a6e:	005b      	lsls	r3, r3, #1
   13a70:	4413      	add	r3, r2
   13a72:	440b      	add	r3, r1
   13a74:	2200      	movs	r2, #0
   13a76:	701a      	strb	r2, [r3, #0]
  basCb.conn[connId - 1].battToSend = FALSE;
   13a78:	79fb      	ldrb	r3, [r7, #7]
   13a7a:	1e5a      	subs	r2, r3, #1
   13a7c:	4909      	ldr	r1, [pc, #36]	; (13aa4 <BasMeasBattStop+0x48>)
   13a7e:	4613      	mov	r3, r2
   13a80:	005b      	lsls	r3, r3, #1
   13a82:	4413      	add	r3, r2
   13a84:	440b      	add	r3, r1
   13a86:	3301      	adds	r3, #1
   13a88:	2200      	movs	r2, #0
   13a8a:	701a      	strb	r2, [r3, #0]
  
  /* if no remaining connections */
  if (basNoConnActive())
   13a8c:	f7ff fe82 	bl	13794 <basNoConnActive>
   13a90:	4603      	mov	r3, r0
   13a92:	2b00      	cmp	r3, #0
   13a94:	d002      	beq.n	13a9c <BasMeasBattStop+0x40>
  {
    /* stop timer */
    WsfTimerStop(&basCb.measTimer);
   13a96:	4804      	ldr	r0, [pc, #16]	; (13aa8 <BasMeasBattStop+0x4c>)
   13a98:	f004 f9c2 	bl	17e20 <WsfTimerStop>
  }
}
   13a9c:	bf00      	nop
   13a9e:	3708      	adds	r7, #8
   13aa0:	46bd      	mov	sp, r7
   13aa2:	bd80      	pop	{r7, pc}
   13aa4:	10004304 	.word	0x10004304
   13aa8:	1000431c 	.word	0x1000431c

00013aac <BasProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasProcMsg(wsfMsgHdr_t *pMsg)
{
   13aac:	b580      	push	{r7, lr}
   13aae:	b082      	sub	sp, #8
   13ab0:	af00      	add	r7, sp, #0
   13ab2:	6078      	str	r0, [r7, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   13ab4:	687b      	ldr	r3, [r7, #4]
   13ab6:	789b      	ldrb	r3, [r3, #2]
   13ab8:	2b27      	cmp	r3, #39	; 0x27
   13aba:	d103      	bne.n	13ac4 <BasProcMsg+0x18>
  {
    basConnOpen((dmEvt_t *) pMsg);
   13abc:	6878      	ldr	r0, [r7, #4]
   13abe:	f7ff ff01 	bl	138c4 <basConnOpen>
  }
  else if (pMsg->event == basCb.measTimer.msg.event)
  {
    basMeasTimerExp(pMsg);
  }
}
   13ac2:	e011      	b.n	13ae8 <BasProcMsg+0x3c>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   13ac4:	687b      	ldr	r3, [r7, #4]
   13ac6:	789b      	ldrb	r3, [r3, #2]
   13ac8:	2b0f      	cmp	r3, #15
   13aca:	d103      	bne.n	13ad4 <BasProcMsg+0x28>
    basHandleValueCnf((attEvt_t *) pMsg);
   13acc:	6878      	ldr	r0, [r7, #4]
   13ace:	f7ff ff09 	bl	138e4 <basHandleValueCnf>
}
   13ad2:	e009      	b.n	13ae8 <BasProcMsg+0x3c>
  else if (pMsg->event == basCb.measTimer.msg.event)
   13ad4:	687b      	ldr	r3, [r7, #4]
   13ad6:	789a      	ldrb	r2, [r3, #2]
   13ad8:	4b05      	ldr	r3, [pc, #20]	; (13af0 <BasProcMsg+0x44>)
   13ada:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   13ade:	429a      	cmp	r2, r3
   13ae0:	d102      	bne.n	13ae8 <BasProcMsg+0x3c>
    basMeasTimerExp(pMsg);
   13ae2:	6878      	ldr	r0, [r7, #4]
   13ae4:	f7ff ff22 	bl	1392c <basMeasTimerExp>
}
   13ae8:	bf00      	nop
   13aea:	3708      	adds	r7, #8
   13aec:	46bd      	mov	sp, r7
   13aee:	bd80      	pop	{r7, pc}
   13af0:	10004304 	.word	0x10004304

00013af4 <BasSendBattLevel>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BasSendBattLevel(dmConnId_t connId, uint8_t idx, uint8_t level)
{
   13af4:	b580      	push	{r7, lr}
   13af6:	b082      	sub	sp, #8
   13af8:	af00      	add	r7, sp, #0
   13afa:	4603      	mov	r3, r0
   13afc:	71fb      	strb	r3, [r7, #7]
   13afe:	460b      	mov	r3, r1
   13b00:	71bb      	strb	r3, [r7, #6]
   13b02:	4613      	mov	r3, r2
   13b04:	717b      	strb	r3, [r7, #5]
  if (AttsCccEnabled(connId, idx))
   13b06:	79ba      	ldrb	r2, [r7, #6]
   13b08:	79fb      	ldrb	r3, [r7, #7]
   13b0a:	4611      	mov	r1, r2
   13b0c:	4618      	mov	r0, r3
   13b0e:	f7f9 fc19 	bl	d344 <AttsCccEnabled>
   13b12:	4603      	mov	r3, r0
   13b14:	2b00      	cmp	r3, #0
   13b16:	d005      	beq.n	13b24 <BasSendBattLevel+0x30>
  {
    AttsHandleValueNtf(connId, BATT_LVL_HDL, CH_BATT_LEVEL_LEN, &level);
   13b18:	1d7b      	adds	r3, r7, #5
   13b1a:	79f8      	ldrb	r0, [r7, #7]
   13b1c:	2201      	movs	r2, #1
   13b1e:	2162      	movs	r1, #98	; 0x62
   13b20:	f7f9 fd9a 	bl	d658 <AttsHandleValueNtf>
  }
}
   13b24:	bf00      	nop
   13b26:	3708      	adds	r7, #8
   13b28:	46bd      	mov	sp, r7
   13b2a:	bd80      	pop	{r7, pc}

00013b2c <BasReadCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t BasReadCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                     uint16_t offset, attsAttr_t *pAttr)
{
   13b2c:	b590      	push	{r4, r7, lr}
   13b2e:	b083      	sub	sp, #12
   13b30:	af00      	add	r7, sp, #0
   13b32:	4604      	mov	r4, r0
   13b34:	4608      	mov	r0, r1
   13b36:	4611      	mov	r1, r2
   13b38:	461a      	mov	r2, r3
   13b3a:	4623      	mov	r3, r4
   13b3c:	71fb      	strb	r3, [r7, #7]
   13b3e:	4603      	mov	r3, r0
   13b40:	80bb      	strh	r3, [r7, #4]
   13b42:	460b      	mov	r3, r1
   13b44:	71bb      	strb	r3, [r7, #6]
   13b46:	4613      	mov	r3, r2
   13b48:	807b      	strh	r3, [r7, #2]
  /* read the battery level and set attribute value */
  AppHwBattRead(pAttr->pValue);
   13b4a:	69bb      	ldr	r3, [r7, #24]
   13b4c:	685b      	ldr	r3, [r3, #4]
   13b4e:	4618      	mov	r0, r3
   13b50:	f006 fb60 	bl	1a214 <AppHwBattRead>
  
  return ATT_SUCCESS;
   13b54:	2300      	movs	r3, #0
}
   13b56:	4618      	mov	r0, r3
   13b58:	370c      	adds	r7, #12
   13b5a:	46bd      	mov	sp, r7
   13b5c:	bd90      	pop	{r4, r7, pc}

00013b5e <hciCmdAlloc>:
 *
 *  \return Pointer to WSF msg buffer.
 */
/*************************************************************************************************/
uint8_t *hciCmdAlloc(uint16_t opcode, uint16_t len)
{
   13b5e:	b580      	push	{r7, lr}
   13b60:	b084      	sub	sp, #16
   13b62:	af00      	add	r7, sp, #0
   13b64:	4603      	mov	r3, r0
   13b66:	460a      	mov	r2, r1
   13b68:	80fb      	strh	r3, [r7, #6]
   13b6a:	4613      	mov	r3, r2
   13b6c:	80bb      	strh	r3, [r7, #4]
  uint8_t   *p;

  /* allocate buffer */
  if ((p = WsfMsgAlloc(len + HCI_CMD_HDR_LEN)) != NULL)
   13b6e:	88bb      	ldrh	r3, [r7, #4]
   13b70:	3303      	adds	r3, #3
   13b72:	b29b      	uxth	r3, r3
   13b74:	4618      	mov	r0, r3
   13b76:	f003 ff74 	bl	17a62 <WsfMsgAlloc>
   13b7a:	60f8      	str	r0, [r7, #12]
   13b7c:	68fb      	ldr	r3, [r7, #12]
   13b7e:	2b00      	cmp	r3, #0
   13b80:	d016      	beq.n	13bb0 <hciCmdAlloc+0x52>
  {
    /* set HCI command header */
    UINT16_TO_BSTREAM(p, opcode);
   13b82:	68fb      	ldr	r3, [r7, #12]
   13b84:	1c5a      	adds	r2, r3, #1
   13b86:	60fa      	str	r2, [r7, #12]
   13b88:	88fa      	ldrh	r2, [r7, #6]
   13b8a:	b2d2      	uxtb	r2, r2
   13b8c:	701a      	strb	r2, [r3, #0]
   13b8e:	68fb      	ldr	r3, [r7, #12]
   13b90:	1c5a      	adds	r2, r3, #1
   13b92:	60fa      	str	r2, [r7, #12]
   13b94:	88fa      	ldrh	r2, [r7, #6]
   13b96:	0a12      	lsrs	r2, r2, #8
   13b98:	b292      	uxth	r2, r2
   13b9a:	b2d2      	uxtb	r2, r2
   13b9c:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, len);
   13b9e:	68fb      	ldr	r3, [r7, #12]
   13ba0:	1c5a      	adds	r2, r3, #1
   13ba2:	60fa      	str	r2, [r7, #12]
   13ba4:	88ba      	ldrh	r2, [r7, #4]
   13ba6:	b2d2      	uxtb	r2, r2
   13ba8:	701a      	strb	r2, [r3, #0]
    p -= HCI_CMD_HDR_LEN;
   13baa:	68fb      	ldr	r3, [r7, #12]
   13bac:	3b03      	subs	r3, #3
   13bae:	60fb      	str	r3, [r7, #12]
  }

  return p;
   13bb0:	68fb      	ldr	r3, [r7, #12]
}
   13bb2:	4618      	mov	r0, r3
   13bb4:	3710      	adds	r7, #16
   13bb6:	46bd      	mov	sp, r7
   13bb8:	bd80      	pop	{r7, pc}
	...

00013bbc <hciCmdSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdSend(uint8_t *pData)
{
   13bbc:	b580      	push	{r7, lr}
   13bbe:	b084      	sub	sp, #16
   13bc0:	af00      	add	r7, sp, #0
   13bc2:	6078      	str	r0, [r7, #4]
  uint8_t         *p;
  wsfHandlerId_t  handlerId;

  /* queue command if present */
  if (pData != NULL)
   13bc4:	687b      	ldr	r3, [r7, #4]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d004      	beq.n	13bd4 <hciCmdSend+0x18>
  {
    /* queue data - message handler ID 'handerId' not used */
    WsfMsgEnq(&hciCmdCb.cmdQueue, 0, pData);
   13bca:	687a      	ldr	r2, [r7, #4]
   13bcc:	2100      	movs	r1, #0
   13bce:	4817      	ldr	r0, [pc, #92]	; (13c2c <hciCmdSend+0x70>)
   13bd0:	f003 ff83 	bl	17ada <WsfMsgEnq>
  }

  /* service the HCI command queue; first check if controller can accept any commands */
  if (hciCmdCb.numCmdPkts > 0)
   13bd4:	4b16      	ldr	r3, [pc, #88]	; (13c30 <hciCmdSend+0x74>)
   13bd6:	7e9b      	ldrb	r3, [r3, #26]
   13bd8:	2b00      	cmp	r3, #0
   13bda:	d023      	beq.n	13c24 <hciCmdSend+0x68>
  {
    /* if queue not empty */
    if ((p = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   13bdc:	f107 030b 	add.w	r3, r7, #11
   13be0:	4619      	mov	r1, r3
   13be2:	4812      	ldr	r0, [pc, #72]	; (13c2c <hciCmdSend+0x70>)
   13be4:	f003 ff8e 	bl	17b04 <WsfMsgDeq>
   13be8:	60f8      	str	r0, [r7, #12]
   13bea:	68fb      	ldr	r3, [r7, #12]
   13bec:	2b00      	cmp	r3, #0
   13bee:	d019      	beq.n	13c24 <hciCmdSend+0x68>
    {
      /* decrement controller command packet count */
      hciCmdCb.numCmdPkts--;
   13bf0:	4b0f      	ldr	r3, [pc, #60]	; (13c30 <hciCmdSend+0x74>)
   13bf2:	7e9b      	ldrb	r3, [r3, #26]
   13bf4:	3b01      	subs	r3, #1
   13bf6:	b2da      	uxtb	r2, r3
   13bf8:	4b0d      	ldr	r3, [pc, #52]	; (13c30 <hciCmdSend+0x74>)
   13bfa:	769a      	strb	r2, [r3, #26]

      /* store opcode of command we're sending */
      BYTES_TO_UINT16(hciCmdCb.cmdOpcode, p);
   13bfc:	68fb      	ldr	r3, [r7, #12]
   13bfe:	781b      	ldrb	r3, [r3, #0]
   13c00:	b29a      	uxth	r2, r3
   13c02:	68fb      	ldr	r3, [r7, #12]
   13c04:	3301      	adds	r3, #1
   13c06:	781b      	ldrb	r3, [r3, #0]
   13c08:	b29b      	uxth	r3, r3
   13c0a:	021b      	lsls	r3, r3, #8
   13c0c:	b29b      	uxth	r3, r3
   13c0e:	4413      	add	r3, r2
   13c10:	b29a      	uxth	r2, r3
   13c12:	4b07      	ldr	r3, [pc, #28]	; (13c30 <hciCmdSend+0x74>)
   13c14:	831a      	strh	r2, [r3, #24]

      /* start command timeout */
      WsfTimerStartSec(&hciCmdCb.cmdTimer, HCI_CMD_TIMEOUT);
   13c16:	210a      	movs	r1, #10
   13c18:	4805      	ldr	r0, [pc, #20]	; (13c30 <hciCmdSend+0x74>)
   13c1a:	f004 f8db 	bl	17dd4 <WsfTimerStartSec>

      /* send command to transport */
      hciTrSendCmd(p);
   13c1e:	68f8      	ldr	r0, [r7, #12]
   13c20:	f003 faab 	bl	1717a <hciTrSendCmd>
    }
  }
}
   13c24:	bf00      	nop
   13c26:	3710      	adds	r7, #16
   13c28:	46bd      	mov	sp, r7
   13c2a:	bd80      	pop	{r7, pc}
   13c2c:	10006418 	.word	0x10006418
   13c30:	10006408 	.word	0x10006408

00013c34 <hciCmdInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdInit(void)
{
   13c34:	b480      	push	{r7}
   13c36:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&hciCmdCb.cmdQueue);
   13c38:	4b0a      	ldr	r3, [pc, #40]	; (13c64 <hciCmdInit+0x30>)
   13c3a:	2200      	movs	r2, #0
   13c3c:	611a      	str	r2, [r3, #16]
   13c3e:	4b09      	ldr	r3, [pc, #36]	; (13c64 <hciCmdInit+0x30>)
   13c40:	2200      	movs	r2, #0
   13c42:	615a      	str	r2, [r3, #20]

  /* initialize numCmdPkts for special case of first command */
  hciCmdCb.numCmdPkts = 1;
   13c44:	4b07      	ldr	r3, [pc, #28]	; (13c64 <hciCmdInit+0x30>)
   13c46:	2201      	movs	r2, #1
   13c48:	769a      	strb	r2, [r3, #26]

  /* initialize timer */
  hciCmdCb.cmdTimer.msg.event = HCI_MSG_CMD_TIMEOUT;
   13c4a:	4b06      	ldr	r3, [pc, #24]	; (13c64 <hciCmdInit+0x30>)
   13c4c:	2201      	movs	r2, #1
   13c4e:	731a      	strb	r2, [r3, #12]
  hciCmdCb.cmdTimer.handlerId = hciCb.handlerId;
   13c50:	4b05      	ldr	r3, [pc, #20]	; (13c68 <hciCmdInit+0x34>)
   13c52:	7e1a      	ldrb	r2, [r3, #24]
   13c54:	4b03      	ldr	r3, [pc, #12]	; (13c64 <hciCmdInit+0x30>)
   13c56:	721a      	strb	r2, [r3, #8]
}
   13c58:	bf00      	nop
   13c5a:	46bd      	mov	sp, r7
   13c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   13c60:	4770      	bx	lr
   13c62:	bf00      	nop
   13c64:	10006408 	.word	0x10006408
   13c68:	10006538 	.word	0x10006538

00013c6c <hciCmdTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdTimeout(wsfMsgHdr_t *pMsg)
{
   13c6c:	b580      	push	{r7, lr}
   13c6e:	b082      	sub	sp, #8
   13c70:	af00      	add	r7, sp, #0
   13c72:	6078      	str	r0, [r7, #4]
  HCI_TRACE_INFO0("hciCmdTimeout");
  // When it times out, pretty much we have to
  // reset/reboot controller and initialize HCI
  // layer and SPI transport layer again.

  HciDrvRadioShutdown();
   13c74:	f004 fa92 	bl	1819c <HciDrvRadioShutdown>
  HciDrvRadioBoot(0);
   13c78:	2000      	movs	r0, #0
   13c7a:	f004 f9b3 	bl	17fe4 <HciDrvRadioBoot>
  DmDevReset();
   13c7e:	f7fb fe87 	bl	f990 <DmDevReset>
}
   13c82:	bf00      	nop
   13c84:	3708      	adds	r7, #8
   13c86:	46bd      	mov	sp, r7
   13c88:	bd80      	pop	{r7, pc}
	...

00013c8c <hciCmdRecvCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCmdRecvCmpl(uint8_t numCmdPkts)
{
   13c8c:	b580      	push	{r7, lr}
   13c8e:	b082      	sub	sp, #8
   13c90:	af00      	add	r7, sp, #0
   13c92:	4603      	mov	r3, r0
   13c94:	71fb      	strb	r3, [r7, #7]
  /* stop the command timeout timer */
  WsfTimerStop(&hciCmdCb.cmdTimer);
   13c96:	4806      	ldr	r0, [pc, #24]	; (13cb0 <hciCmdRecvCmpl+0x24>)
   13c98:	f004 f8c2 	bl	17e20 <WsfTimerStop>
  /*
   * Set the number of commands that can be sent to the controller.  Setting this
   * to 1 rather than incrementing by numCmdPkts allows only one command at a time to
   * be sent to the controller and simplifies the code.
   */
  hciCmdCb.numCmdPkts = 1;
   13c9c:	4b04      	ldr	r3, [pc, #16]	; (13cb0 <hciCmdRecvCmpl+0x24>)
   13c9e:	2201      	movs	r2, #1
   13ca0:	769a      	strb	r2, [r3, #26]

  /* send the next queued command */
  hciCmdSend(NULL);
   13ca2:	2000      	movs	r0, #0
   13ca4:	f7ff ff8a 	bl	13bbc <hciCmdSend>
}
   13ca8:	bf00      	nop
   13caa:	3708      	adds	r7, #8
   13cac:	46bd      	mov	sp, r7
   13cae:	bd80      	pop	{r7, pc}
   13cb0:	10006408 	.word	0x10006408

00013cb4 <HciDisconnectCmd>:
 *
 *  \brief  HCI disconnect command.
 */
/*************************************************************************************************/
void HciDisconnectCmd(uint16_t handle, uint8_t reason)
{
   13cb4:	b580      	push	{r7, lr}
   13cb6:	b084      	sub	sp, #16
   13cb8:	af00      	add	r7, sp, #0
   13cba:	4603      	mov	r3, r0
   13cbc:	460a      	mov	r2, r1
   13cbe:	80fb      	strh	r3, [r7, #6]
   13cc0:	4613      	mov	r3, r2
   13cc2:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_DISCONNECT, HCI_LEN_DISCONNECT)) != NULL)
   13cc4:	2103      	movs	r1, #3
   13cc6:	f240 4006 	movw	r0, #1030	; 0x406
   13cca:	f7ff ff48 	bl	13b5e <hciCmdAlloc>
   13cce:	60f8      	str	r0, [r7, #12]
   13cd0:	68fb      	ldr	r3, [r7, #12]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	d018      	beq.n	13d08 <HciDisconnectCmd+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13cd6:	68fb      	ldr	r3, [r7, #12]
   13cd8:	3303      	adds	r3, #3
   13cda:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13cdc:	68bb      	ldr	r3, [r7, #8]
   13cde:	1c5a      	adds	r2, r3, #1
   13ce0:	60ba      	str	r2, [r7, #8]
   13ce2:	88fa      	ldrh	r2, [r7, #6]
   13ce4:	b2d2      	uxtb	r2, r2
   13ce6:	701a      	strb	r2, [r3, #0]
   13ce8:	68bb      	ldr	r3, [r7, #8]
   13cea:	1c5a      	adds	r2, r3, #1
   13cec:	60ba      	str	r2, [r7, #8]
   13cee:	88fa      	ldrh	r2, [r7, #6]
   13cf0:	0a12      	lsrs	r2, r2, #8
   13cf2:	b292      	uxth	r2, r2
   13cf4:	b2d2      	uxtb	r2, r2
   13cf6:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   13cf8:	68bb      	ldr	r3, [r7, #8]
   13cfa:	1c5a      	adds	r2, r3, #1
   13cfc:	60ba      	str	r2, [r7, #8]
   13cfe:	797a      	ldrb	r2, [r7, #5]
   13d00:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13d02:	68f8      	ldr	r0, [r7, #12]
   13d04:	f7ff ff5a 	bl	13bbc <hciCmdSend>
  }
}
   13d08:	bf00      	nop
   13d0a:	3710      	adds	r7, #16
   13d0c:	46bd      	mov	sp, r7
   13d0e:	bd80      	pop	{r7, pc}

00013d10 <HciLeAddDevWhiteListCmd>:
 *
 *  \brief  HCI LE add device white list command.
 */
/*************************************************************************************************/
void HciLeAddDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   13d10:	b580      	push	{r7, lr}
   13d12:	b084      	sub	sp, #16
   13d14:	af00      	add	r7, sp, #0
   13d16:	4603      	mov	r3, r0
   13d18:	6039      	str	r1, [r7, #0]
   13d1a:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_WHITE_LIST, HCI_LEN_LE_ADD_DEV_WHITE_LIST)) != NULL)
   13d1c:	2107      	movs	r1, #7
   13d1e:	f242 0011 	movw	r0, #8209	; 0x2011
   13d22:	f7ff ff1c 	bl	13b5e <hciCmdAlloc>
   13d26:	60f8      	str	r0, [r7, #12]
   13d28:	68fb      	ldr	r3, [r7, #12]
   13d2a:	2b00      	cmp	r3, #0
   13d2c:	d011      	beq.n	13d52 <HciLeAddDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13d2e:	68fb      	ldr	r3, [r7, #12]
   13d30:	3303      	adds	r3, #3
   13d32:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   13d34:	68bb      	ldr	r3, [r7, #8]
   13d36:	1c5a      	adds	r2, r3, #1
   13d38:	60ba      	str	r2, [r7, #8]
   13d3a:	79fa      	ldrb	r2, [r7, #7]
   13d3c:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   13d3e:	6839      	ldr	r1, [r7, #0]
   13d40:	68b8      	ldr	r0, [r7, #8]
   13d42:	f004 fd51 	bl	187e8 <BdaCpy>
   13d46:	68bb      	ldr	r3, [r7, #8]
   13d48:	3306      	adds	r3, #6
   13d4a:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   13d4c:	68f8      	ldr	r0, [r7, #12]
   13d4e:	f7ff ff35 	bl	13bbc <hciCmdSend>
  }
}
   13d52:	bf00      	nop
   13d54:	3710      	adds	r7, #16
   13d56:	46bd      	mov	sp, r7
   13d58:	bd80      	pop	{r7, pc}

00013d5a <HciLeClearWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearWhiteListCmd(void)
{
   13d5a:	b580      	push	{r7, lr}
   13d5c:	b082      	sub	sp, #8
   13d5e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_WHITE_LIST, HCI_LEN_LE_CLEAR_WHITE_LIST)) != NULL)
   13d60:	2100      	movs	r1, #0
   13d62:	f242 0010 	movw	r0, #8208	; 0x2010
   13d66:	f7ff fefa 	bl	13b5e <hciCmdAlloc>
   13d6a:	6078      	str	r0, [r7, #4]
   13d6c:	687b      	ldr	r3, [r7, #4]
   13d6e:	2b00      	cmp	r3, #0
   13d70:	d002      	beq.n	13d78 <HciLeClearWhiteListCmd+0x1e>
  {
    hciCmdSend(pBuf);
   13d72:	6878      	ldr	r0, [r7, #4]
   13d74:	f7ff ff22 	bl	13bbc <hciCmdSend>
  }
}
   13d78:	bf00      	nop
   13d7a:	3708      	adds	r7, #8
   13d7c:	46bd      	mov	sp, r7
   13d7e:	bd80      	pop	{r7, pc}

00013d80 <HciLeConnUpdateCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeConnUpdateCmd(uint16_t handle, hciConnSpec_t *pConnSpec)
{
   13d80:	b580      	push	{r7, lr}
   13d82:	b084      	sub	sp, #16
   13d84:	af00      	add	r7, sp, #0
   13d86:	4603      	mov	r3, r0
   13d88:	6039      	str	r1, [r7, #0]
   13d8a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CONN_UPDATE, HCI_LEN_LE_CONN_UPDATE)) != NULL)
   13d8c:	210e      	movs	r1, #14
   13d8e:	f242 0013 	movw	r0, #8211	; 0x2013
   13d92:	f7ff fee4 	bl	13b5e <hciCmdAlloc>
   13d96:	60f8      	str	r0, [r7, #12]
   13d98:	68fb      	ldr	r3, [r7, #12]
   13d9a:	2b00      	cmp	r3, #0
   13d9c:	d073      	beq.n	13e86 <HciLeConnUpdateCmd+0x106>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13d9e:	68fb      	ldr	r3, [r7, #12]
   13da0:	3303      	adds	r3, #3
   13da2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13da4:	68bb      	ldr	r3, [r7, #8]
   13da6:	1c5a      	adds	r2, r3, #1
   13da8:	60ba      	str	r2, [r7, #8]
   13daa:	88fa      	ldrh	r2, [r7, #6]
   13dac:	b2d2      	uxtb	r2, r2
   13dae:	701a      	strb	r2, [r3, #0]
   13db0:	68bb      	ldr	r3, [r7, #8]
   13db2:	1c5a      	adds	r2, r3, #1
   13db4:	60ba      	str	r2, [r7, #8]
   13db6:	88fa      	ldrh	r2, [r7, #6]
   13db8:	0a12      	lsrs	r2, r2, #8
   13dba:	b292      	uxth	r2, r2
   13dbc:	b2d2      	uxtb	r2, r2
   13dbe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMin);
   13dc0:	68bb      	ldr	r3, [r7, #8]
   13dc2:	1c5a      	adds	r2, r3, #1
   13dc4:	60ba      	str	r2, [r7, #8]
   13dc6:	683a      	ldr	r2, [r7, #0]
   13dc8:	8812      	ldrh	r2, [r2, #0]
   13dca:	b2d2      	uxtb	r2, r2
   13dcc:	701a      	strb	r2, [r3, #0]
   13dce:	68bb      	ldr	r3, [r7, #8]
   13dd0:	1c5a      	adds	r2, r3, #1
   13dd2:	60ba      	str	r2, [r7, #8]
   13dd4:	683a      	ldr	r2, [r7, #0]
   13dd6:	8812      	ldrh	r2, [r2, #0]
   13dd8:	0a12      	lsrs	r2, r2, #8
   13dda:	b292      	uxth	r2, r2
   13ddc:	b2d2      	uxtb	r2, r2
   13dde:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connIntervalMax);
   13de0:	68bb      	ldr	r3, [r7, #8]
   13de2:	1c5a      	adds	r2, r3, #1
   13de4:	60ba      	str	r2, [r7, #8]
   13de6:	683a      	ldr	r2, [r7, #0]
   13de8:	8852      	ldrh	r2, [r2, #2]
   13dea:	b2d2      	uxtb	r2, r2
   13dec:	701a      	strb	r2, [r3, #0]
   13dee:	68bb      	ldr	r3, [r7, #8]
   13df0:	1c5a      	adds	r2, r3, #1
   13df2:	60ba      	str	r2, [r7, #8]
   13df4:	683a      	ldr	r2, [r7, #0]
   13df6:	8852      	ldrh	r2, [r2, #2]
   13df8:	0a12      	lsrs	r2, r2, #8
   13dfa:	b292      	uxth	r2, r2
   13dfc:	b2d2      	uxtb	r2, r2
   13dfe:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->connLatency);
   13e00:	68bb      	ldr	r3, [r7, #8]
   13e02:	1c5a      	adds	r2, r3, #1
   13e04:	60ba      	str	r2, [r7, #8]
   13e06:	683a      	ldr	r2, [r7, #0]
   13e08:	8892      	ldrh	r2, [r2, #4]
   13e0a:	b2d2      	uxtb	r2, r2
   13e0c:	701a      	strb	r2, [r3, #0]
   13e0e:	68bb      	ldr	r3, [r7, #8]
   13e10:	1c5a      	adds	r2, r3, #1
   13e12:	60ba      	str	r2, [r7, #8]
   13e14:	683a      	ldr	r2, [r7, #0]
   13e16:	8892      	ldrh	r2, [r2, #4]
   13e18:	0a12      	lsrs	r2, r2, #8
   13e1a:	b292      	uxth	r2, r2
   13e1c:	b2d2      	uxtb	r2, r2
   13e1e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->supTimeout);
   13e20:	68bb      	ldr	r3, [r7, #8]
   13e22:	1c5a      	adds	r2, r3, #1
   13e24:	60ba      	str	r2, [r7, #8]
   13e26:	683a      	ldr	r2, [r7, #0]
   13e28:	88d2      	ldrh	r2, [r2, #6]
   13e2a:	b2d2      	uxtb	r2, r2
   13e2c:	701a      	strb	r2, [r3, #0]
   13e2e:	68bb      	ldr	r3, [r7, #8]
   13e30:	1c5a      	adds	r2, r3, #1
   13e32:	60ba      	str	r2, [r7, #8]
   13e34:	683a      	ldr	r2, [r7, #0]
   13e36:	88d2      	ldrh	r2, [r2, #6]
   13e38:	0a12      	lsrs	r2, r2, #8
   13e3a:	b292      	uxth	r2, r2
   13e3c:	b2d2      	uxtb	r2, r2
   13e3e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->minCeLen);
   13e40:	68bb      	ldr	r3, [r7, #8]
   13e42:	1c5a      	adds	r2, r3, #1
   13e44:	60ba      	str	r2, [r7, #8]
   13e46:	683a      	ldr	r2, [r7, #0]
   13e48:	8912      	ldrh	r2, [r2, #8]
   13e4a:	b2d2      	uxtb	r2, r2
   13e4c:	701a      	strb	r2, [r3, #0]
   13e4e:	68bb      	ldr	r3, [r7, #8]
   13e50:	1c5a      	adds	r2, r3, #1
   13e52:	60ba      	str	r2, [r7, #8]
   13e54:	683a      	ldr	r2, [r7, #0]
   13e56:	8912      	ldrh	r2, [r2, #8]
   13e58:	0a12      	lsrs	r2, r2, #8
   13e5a:	b292      	uxth	r2, r2
   13e5c:	b2d2      	uxtb	r2, r2
   13e5e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, pConnSpec->maxCeLen);
   13e60:	68bb      	ldr	r3, [r7, #8]
   13e62:	1c5a      	adds	r2, r3, #1
   13e64:	60ba      	str	r2, [r7, #8]
   13e66:	683a      	ldr	r2, [r7, #0]
   13e68:	8952      	ldrh	r2, [r2, #10]
   13e6a:	b2d2      	uxtb	r2, r2
   13e6c:	701a      	strb	r2, [r3, #0]
   13e6e:	68bb      	ldr	r3, [r7, #8]
   13e70:	1c5a      	adds	r2, r3, #1
   13e72:	60ba      	str	r2, [r7, #8]
   13e74:	683a      	ldr	r2, [r7, #0]
   13e76:	8952      	ldrh	r2, [r2, #10]
   13e78:	0a12      	lsrs	r2, r2, #8
   13e7a:	b292      	uxth	r2, r2
   13e7c:	b2d2      	uxtb	r2, r2
   13e7e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13e80:	68f8      	ldr	r0, [r7, #12]
   13e82:	f7ff fe9b 	bl	13bbc <hciCmdSend>
  }
}
   13e86:	bf00      	nop
   13e88:	3710      	adds	r7, #16
   13e8a:	46bd      	mov	sp, r7
   13e8c:	bd80      	pop	{r7, pc}

00013e8e <HciLeRemoteConnParamReqReply>:
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqReply(uint16_t handle, uint16_t intervalMin, uint16_t intervalMax, uint16_t latency,
                                  uint16_t timeout, uint16_t minCeLen, uint16_t maxCeLen)
{
   13e8e:	b590      	push	{r4, r7, lr}
   13e90:	b085      	sub	sp, #20
   13e92:	af00      	add	r7, sp, #0
   13e94:	4604      	mov	r4, r0
   13e96:	4608      	mov	r0, r1
   13e98:	4611      	mov	r1, r2
   13e9a:	461a      	mov	r2, r3
   13e9c:	4623      	mov	r3, r4
   13e9e:	80fb      	strh	r3, [r7, #6]
   13ea0:	4603      	mov	r3, r0
   13ea2:	80bb      	strh	r3, [r7, #4]
   13ea4:	460b      	mov	r3, r1
   13ea6:	807b      	strh	r3, [r7, #2]
   13ea8:	4613      	mov	r3, r2
   13eaa:	803b      	strh	r3, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_REP, HCI_LEN_LE_REM_CONN_PARAM_REP)) != NULL)
   13eac:	210e      	movs	r1, #14
   13eae:	f242 0020 	movw	r0, #8224	; 0x2020
   13eb2:	f7ff fe54 	bl	13b5e <hciCmdAlloc>
   13eb6:	60f8      	str	r0, [r7, #12]
   13eb8:	68fb      	ldr	r3, [r7, #12]
   13eba:	2b00      	cmp	r3, #0
   13ebc:	d067      	beq.n	13f8e <HciLeRemoteConnParamReqReply+0x100>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13ebe:	68fb      	ldr	r3, [r7, #12]
   13ec0:	3303      	adds	r3, #3
   13ec2:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13ec4:	68bb      	ldr	r3, [r7, #8]
   13ec6:	1c5a      	adds	r2, r3, #1
   13ec8:	60ba      	str	r2, [r7, #8]
   13eca:	88fa      	ldrh	r2, [r7, #6]
   13ecc:	b2d2      	uxtb	r2, r2
   13ece:	701a      	strb	r2, [r3, #0]
   13ed0:	68bb      	ldr	r3, [r7, #8]
   13ed2:	1c5a      	adds	r2, r3, #1
   13ed4:	60ba      	str	r2, [r7, #8]
   13ed6:	88fa      	ldrh	r2, [r7, #6]
   13ed8:	0a12      	lsrs	r2, r2, #8
   13eda:	b292      	uxth	r2, r2
   13edc:	b2d2      	uxtb	r2, r2
   13ede:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMin);
   13ee0:	68bb      	ldr	r3, [r7, #8]
   13ee2:	1c5a      	adds	r2, r3, #1
   13ee4:	60ba      	str	r2, [r7, #8]
   13ee6:	88ba      	ldrh	r2, [r7, #4]
   13ee8:	b2d2      	uxtb	r2, r2
   13eea:	701a      	strb	r2, [r3, #0]
   13eec:	68bb      	ldr	r3, [r7, #8]
   13eee:	1c5a      	adds	r2, r3, #1
   13ef0:	60ba      	str	r2, [r7, #8]
   13ef2:	88ba      	ldrh	r2, [r7, #4]
   13ef4:	0a12      	lsrs	r2, r2, #8
   13ef6:	b292      	uxth	r2, r2
   13ef8:	b2d2      	uxtb	r2, r2
   13efa:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, intervalMax);
   13efc:	68bb      	ldr	r3, [r7, #8]
   13efe:	1c5a      	adds	r2, r3, #1
   13f00:	60ba      	str	r2, [r7, #8]
   13f02:	887a      	ldrh	r2, [r7, #2]
   13f04:	b2d2      	uxtb	r2, r2
   13f06:	701a      	strb	r2, [r3, #0]
   13f08:	68bb      	ldr	r3, [r7, #8]
   13f0a:	1c5a      	adds	r2, r3, #1
   13f0c:	60ba      	str	r2, [r7, #8]
   13f0e:	887a      	ldrh	r2, [r7, #2]
   13f10:	0a12      	lsrs	r2, r2, #8
   13f12:	b292      	uxth	r2, r2
   13f14:	b2d2      	uxtb	r2, r2
   13f16:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, latency);
   13f18:	68bb      	ldr	r3, [r7, #8]
   13f1a:	1c5a      	adds	r2, r3, #1
   13f1c:	60ba      	str	r2, [r7, #8]
   13f1e:	883a      	ldrh	r2, [r7, #0]
   13f20:	b2d2      	uxtb	r2, r2
   13f22:	701a      	strb	r2, [r3, #0]
   13f24:	68bb      	ldr	r3, [r7, #8]
   13f26:	1c5a      	adds	r2, r3, #1
   13f28:	60ba      	str	r2, [r7, #8]
   13f2a:	883a      	ldrh	r2, [r7, #0]
   13f2c:	0a12      	lsrs	r2, r2, #8
   13f2e:	b292      	uxth	r2, r2
   13f30:	b2d2      	uxtb	r2, r2
   13f32:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   13f34:	68bb      	ldr	r3, [r7, #8]
   13f36:	1c5a      	adds	r2, r3, #1
   13f38:	60ba      	str	r2, [r7, #8]
   13f3a:	8c3a      	ldrh	r2, [r7, #32]
   13f3c:	b2d2      	uxtb	r2, r2
   13f3e:	701a      	strb	r2, [r3, #0]
   13f40:	68bb      	ldr	r3, [r7, #8]
   13f42:	1c5a      	adds	r2, r3, #1
   13f44:	60ba      	str	r2, [r7, #8]
   13f46:	8c3a      	ldrh	r2, [r7, #32]
   13f48:	0a12      	lsrs	r2, r2, #8
   13f4a:	b292      	uxth	r2, r2
   13f4c:	b2d2      	uxtb	r2, r2
   13f4e:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, minCeLen);
   13f50:	68bb      	ldr	r3, [r7, #8]
   13f52:	1c5a      	adds	r2, r3, #1
   13f54:	60ba      	str	r2, [r7, #8]
   13f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   13f58:	b2d2      	uxtb	r2, r2
   13f5a:	701a      	strb	r2, [r3, #0]
   13f5c:	68bb      	ldr	r3, [r7, #8]
   13f5e:	1c5a      	adds	r2, r3, #1
   13f60:	60ba      	str	r2, [r7, #8]
   13f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   13f64:	0a12      	lsrs	r2, r2, #8
   13f66:	b292      	uxth	r2, r2
   13f68:	b2d2      	uxtb	r2, r2
   13f6a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, maxCeLen);
   13f6c:	68bb      	ldr	r3, [r7, #8]
   13f6e:	1c5a      	adds	r2, r3, #1
   13f70:	60ba      	str	r2, [r7, #8]
   13f72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   13f74:	b2d2      	uxtb	r2, r2
   13f76:	701a      	strb	r2, [r3, #0]
   13f78:	68bb      	ldr	r3, [r7, #8]
   13f7a:	1c5a      	adds	r2, r3, #1
   13f7c:	60ba      	str	r2, [r7, #8]
   13f7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   13f80:	0a12      	lsrs	r2, r2, #8
   13f82:	b292      	uxth	r2, r2
   13f84:	b2d2      	uxtb	r2, r2
   13f86:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13f88:	68f8      	ldr	r0, [r7, #12]
   13f8a:	f7ff fe17 	bl	13bbc <hciCmdSend>
  }
}
   13f8e:	bf00      	nop
   13f90:	3714      	adds	r7, #20
   13f92:	46bd      	mov	sp, r7
   13f94:	bd90      	pop	{r4, r7, pc}

00013f96 <HciLeRemoteConnParamReqNegReply>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeRemoteConnParamReqNegReply(uint16_t handle, uint8_t reason)
{
   13f96:	b580      	push	{r7, lr}
   13f98:	b084      	sub	sp, #16
   13f9a:	af00      	add	r7, sp, #0
   13f9c:	4603      	mov	r3, r0
   13f9e:	460a      	mov	r2, r1
   13fa0:	80fb      	strh	r3, [r7, #6]
   13fa2:	4613      	mov	r3, r2
   13fa4:	717b      	strb	r3, [r7, #5]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP, HCI_LEN_LE_REM_CONN_PARAM_NEG_REP)) != NULL)
   13fa6:	2103      	movs	r1, #3
   13fa8:	f242 0021 	movw	r0, #8225	; 0x2021
   13fac:	f7ff fdd7 	bl	13b5e <hciCmdAlloc>
   13fb0:	60f8      	str	r0, [r7, #12]
   13fb2:	68fb      	ldr	r3, [r7, #12]
   13fb4:	2b00      	cmp	r3, #0
   13fb6:	d018      	beq.n	13fea <HciLeRemoteConnParamReqNegReply+0x54>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   13fb8:	68fb      	ldr	r3, [r7, #12]
   13fba:	3303      	adds	r3, #3
   13fbc:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   13fbe:	68bb      	ldr	r3, [r7, #8]
   13fc0:	1c5a      	adds	r2, r3, #1
   13fc2:	60ba      	str	r2, [r7, #8]
   13fc4:	88fa      	ldrh	r2, [r7, #6]
   13fc6:	b2d2      	uxtb	r2, r2
   13fc8:	701a      	strb	r2, [r3, #0]
   13fca:	68bb      	ldr	r3, [r7, #8]
   13fcc:	1c5a      	adds	r2, r3, #1
   13fce:	60ba      	str	r2, [r7, #8]
   13fd0:	88fa      	ldrh	r2, [r7, #6]
   13fd2:	0a12      	lsrs	r2, r2, #8
   13fd4:	b292      	uxth	r2, r2
   13fd6:	b2d2      	uxtb	r2, r2
   13fd8:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, reason);
   13fda:	68bb      	ldr	r3, [r7, #8]
   13fdc:	1c5a      	adds	r2, r3, #1
   13fde:	60ba      	str	r2, [r7, #8]
   13fe0:	797a      	ldrb	r2, [r7, #5]
   13fe2:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   13fe4:	68f8      	ldr	r0, [r7, #12]
   13fe6:	f7ff fde9 	bl	13bbc <hciCmdSend>
  }
}
   13fea:	bf00      	nop
   13fec:	3710      	adds	r7, #16
   13fee:	46bd      	mov	sp, r7
   13ff0:	bd80      	pop	{r7, pc}

00013ff2 <HciLeSetDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeSetDataLen(uint16_t handle, uint16_t txOctets, uint16_t txTime)
{
   13ff2:	b580      	push	{r7, lr}
   13ff4:	b084      	sub	sp, #16
   13ff6:	af00      	add	r7, sp, #0
   13ff8:	4603      	mov	r3, r0
   13ffa:	80fb      	strh	r3, [r7, #6]
   13ffc:	460b      	mov	r3, r1
   13ffe:	80bb      	strh	r3, [r7, #4]
   14000:	4613      	mov	r3, r2
   14002:	807b      	strh	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_DATA_LEN, HCI_LEN_LE_SET_DATA_LEN)) != NULL)
   14004:	2106      	movs	r1, #6
   14006:	f242 0022 	movw	r0, #8226	; 0x2022
   1400a:	f7ff fda8 	bl	13b5e <hciCmdAlloc>
   1400e:	60f8      	str	r0, [r7, #12]
   14010:	68fb      	ldr	r3, [r7, #12]
   14012:	2b00      	cmp	r3, #0
   14014:	d02f      	beq.n	14076 <HciLeSetDataLen+0x84>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14016:	68fb      	ldr	r3, [r7, #12]
   14018:	3303      	adds	r3, #3
   1401a:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1401c:	68bb      	ldr	r3, [r7, #8]
   1401e:	1c5a      	adds	r2, r3, #1
   14020:	60ba      	str	r2, [r7, #8]
   14022:	88fa      	ldrh	r2, [r7, #6]
   14024:	b2d2      	uxtb	r2, r2
   14026:	701a      	strb	r2, [r3, #0]
   14028:	68bb      	ldr	r3, [r7, #8]
   1402a:	1c5a      	adds	r2, r3, #1
   1402c:	60ba      	str	r2, [r7, #8]
   1402e:	88fa      	ldrh	r2, [r7, #6]
   14030:	0a12      	lsrs	r2, r2, #8
   14032:	b292      	uxth	r2, r2
   14034:	b2d2      	uxtb	r2, r2
   14036:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txOctets);
   14038:	68bb      	ldr	r3, [r7, #8]
   1403a:	1c5a      	adds	r2, r3, #1
   1403c:	60ba      	str	r2, [r7, #8]
   1403e:	88ba      	ldrh	r2, [r7, #4]
   14040:	b2d2      	uxtb	r2, r2
   14042:	701a      	strb	r2, [r3, #0]
   14044:	68bb      	ldr	r3, [r7, #8]
   14046:	1c5a      	adds	r2, r3, #1
   14048:	60ba      	str	r2, [r7, #8]
   1404a:	88ba      	ldrh	r2, [r7, #4]
   1404c:	0a12      	lsrs	r2, r2, #8
   1404e:	b292      	uxth	r2, r2
   14050:	b2d2      	uxtb	r2, r2
   14052:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, txTime);
   14054:	68bb      	ldr	r3, [r7, #8]
   14056:	1c5a      	adds	r2, r3, #1
   14058:	60ba      	str	r2, [r7, #8]
   1405a:	887a      	ldrh	r2, [r7, #2]
   1405c:	b2d2      	uxtb	r2, r2
   1405e:	701a      	strb	r2, [r3, #0]
   14060:	68bb      	ldr	r3, [r7, #8]
   14062:	1c5a      	adds	r2, r3, #1
   14064:	60ba      	str	r2, [r7, #8]
   14066:	887a      	ldrh	r2, [r7, #2]
   14068:	0a12      	lsrs	r2, r2, #8
   1406a:	b292      	uxth	r2, r2
   1406c:	b2d2      	uxtb	r2, r2
   1406e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14070:	68f8      	ldr	r0, [r7, #12]
   14072:	f7ff fda3 	bl	13bbc <hciCmdSend>
  }
}
   14076:	bf00      	nop
   14078:	3710      	adds	r7, #16
   1407a:	46bd      	mov	sp, r7
   1407c:	bd80      	pop	{r7, pc}

0001407e <HciLeWriteDefDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeWriteDefDataLen(uint16_t suggestedMaxTxOctets, uint16_t suggestedMaxTxTime)
{
   1407e:	b580      	push	{r7, lr}
   14080:	b084      	sub	sp, #16
   14082:	af00      	add	r7, sp, #0
   14084:	4603      	mov	r3, r0
   14086:	460a      	mov	r2, r1
   14088:	80fb      	strh	r3, [r7, #6]
   1408a:	4613      	mov	r3, r2
   1408c:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_WRITE_DEF_DATA_LEN, HCI_LEN_LE_WRITE_DEF_DATA_LEN)) != NULL)
   1408e:	2104      	movs	r1, #4
   14090:	f242 0024 	movw	r0, #8228	; 0x2024
   14094:	f7ff fd63 	bl	13b5e <hciCmdAlloc>
   14098:	60f8      	str	r0, [r7, #12]
   1409a:	68fb      	ldr	r3, [r7, #12]
   1409c:	2b00      	cmp	r3, #0
   1409e:	d021      	beq.n	140e4 <HciLeWriteDefDataLen+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   140a0:	68fb      	ldr	r3, [r7, #12]
   140a2:	3303      	adds	r3, #3
   140a4:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, suggestedMaxTxOctets);
   140a6:	68bb      	ldr	r3, [r7, #8]
   140a8:	1c5a      	adds	r2, r3, #1
   140aa:	60ba      	str	r2, [r7, #8]
   140ac:	88fa      	ldrh	r2, [r7, #6]
   140ae:	b2d2      	uxtb	r2, r2
   140b0:	701a      	strb	r2, [r3, #0]
   140b2:	68bb      	ldr	r3, [r7, #8]
   140b4:	1c5a      	adds	r2, r3, #1
   140b6:	60ba      	str	r2, [r7, #8]
   140b8:	88fa      	ldrh	r2, [r7, #6]
   140ba:	0a12      	lsrs	r2, r2, #8
   140bc:	b292      	uxth	r2, r2
   140be:	b2d2      	uxtb	r2, r2
   140c0:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, suggestedMaxTxTime);
   140c2:	68bb      	ldr	r3, [r7, #8]
   140c4:	1c5a      	adds	r2, r3, #1
   140c6:	60ba      	str	r2, [r7, #8]
   140c8:	88ba      	ldrh	r2, [r7, #4]
   140ca:	b2d2      	uxtb	r2, r2
   140cc:	701a      	strb	r2, [r3, #0]
   140ce:	68bb      	ldr	r3, [r7, #8]
   140d0:	1c5a      	adds	r2, r3, #1
   140d2:	60ba      	str	r2, [r7, #8]
   140d4:	88ba      	ldrh	r2, [r7, #4]
   140d6:	0a12      	lsrs	r2, r2, #8
   140d8:	b292      	uxth	r2, r2
   140da:	b2d2      	uxtb	r2, r2
   140dc:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   140de:	68f8      	ldr	r0, [r7, #12]
   140e0:	f7ff fd6c 	bl	13bbc <hciCmdSend>
  }
}
   140e4:	bf00      	nop
   140e6:	3710      	adds	r7, #16
   140e8:	46bd      	mov	sp, r7
   140ea:	bd80      	pop	{r7, pc}

000140ec <HciLeReadLocalP256PubKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadLocalP256PubKey(void)
{
   140ec:	b580      	push	{r7, lr}
   140ee:	b082      	sub	sp, #8
   140f0:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_P256_PUB_KEY, HCI_LEN_LE_READ_LOCAL_P256_PUB_KEY)) != NULL)
   140f2:	2100      	movs	r1, #0
   140f4:	f242 0025 	movw	r0, #8229	; 0x2025
   140f8:	f7ff fd31 	bl	13b5e <hciCmdAlloc>
   140fc:	6078      	str	r0, [r7, #4]
   140fe:	687b      	ldr	r3, [r7, #4]
   14100:	2b00      	cmp	r3, #0
   14102:	d002      	beq.n	1410a <HciLeReadLocalP256PubKey+0x1e>
  {
    hciCmdSend(pBuf);
   14104:	6878      	ldr	r0, [r7, #4]
   14106:	f7ff fd59 	bl	13bbc <hciCmdSend>
  }
}
   1410a:	bf00      	nop
   1410c:	3708      	adds	r7, #8
   1410e:	46bd      	mov	sp, r7
   14110:	bd80      	pop	{r7, pc}

00014112 <HciLeGenerateDHKey>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeGenerateDHKey(uint8_t *pPubKeyX, uint8_t *pPubKeyY)
{
   14112:	b580      	push	{r7, lr}
   14114:	b084      	sub	sp, #16
   14116:	af00      	add	r7, sp, #0
   14118:	6078      	str	r0, [r7, #4]
   1411a:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_GENERATE_DHKEY, HCI_LEN_LE_GENERATE_DHKEY)) != NULL)
   1411c:	2140      	movs	r1, #64	; 0x40
   1411e:	f242 0026 	movw	r0, #8230	; 0x2026
   14122:	f7ff fd1c 	bl	13b5e <hciCmdAlloc>
   14126:	60f8      	str	r0, [r7, #12]
   14128:	68fb      	ldr	r3, [r7, #12]
   1412a:	2b00      	cmp	r3, #0
   1412c:	d011      	beq.n	14152 <HciLeGenerateDHKey+0x40>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1412e:	68fb      	ldr	r3, [r7, #12]
   14130:	3303      	adds	r3, #3
   14132:	60bb      	str	r3, [r7, #8]
    memcpy(p, pPubKeyX, HCI_DH_KEY_LEN);
   14134:	2220      	movs	r2, #32
   14136:	6879      	ldr	r1, [r7, #4]
   14138:	68b8      	ldr	r0, [r7, #8]
   1413a:	f7f8 f811 	bl	c160 <memcpy>
    memcpy(p + HCI_DH_KEY_LEN, pPubKeyY, HCI_DH_KEY_LEN);
   1413e:	68bb      	ldr	r3, [r7, #8]
   14140:	3320      	adds	r3, #32
   14142:	2220      	movs	r2, #32
   14144:	6839      	ldr	r1, [r7, #0]
   14146:	4618      	mov	r0, r3
   14148:	f7f8 f80a 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1414c:	68f8      	ldr	r0, [r7, #12]
   1414e:	f7ff fd35 	bl	13bbc <hciCmdSend>
  }
}
   14152:	bf00      	nop
   14154:	3710      	adds	r7, #16
   14156:	46bd      	mov	sp, r7
   14158:	bd80      	pop	{r7, pc}

0001415a <HciLeReadMaxDataLen>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciLeReadMaxDataLen(void)
{
   1415a:	b580      	push	{r7, lr}
   1415c:	b082      	sub	sp, #8
   1415e:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_MAX_DATA_LEN, HCI_LEN_LE_READ_MAX_DATA_LEN)) != NULL)
   14160:	2100      	movs	r1, #0
   14162:	f242 002f 	movw	r0, #8239	; 0x202f
   14166:	f7ff fcfa 	bl	13b5e <hciCmdAlloc>
   1416a:	6078      	str	r0, [r7, #4]
   1416c:	687b      	ldr	r3, [r7, #4]
   1416e:	2b00      	cmp	r3, #0
   14170:	d002      	beq.n	14178 <HciLeReadMaxDataLen+0x1e>
  {
    hciCmdSend(pBuf);
   14172:	6878      	ldr	r0, [r7, #4]
   14174:	f7ff fd22 	bl	13bbc <hciCmdSend>
  }
}
   14178:	bf00      	nop
   1417a:	3708      	adds	r7, #8
   1417c:	46bd      	mov	sp, r7
   1417e:	bd80      	pop	{r7, pc}

00014180 <HciLeEncryptCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeEncryptCmd(uint8_t *pKey, uint8_t *pData)
{
   14180:	b580      	push	{r7, lr}
   14182:	b084      	sub	sp, #16
   14184:	af00      	add	r7, sp, #0
   14186:	6078      	str	r0, [r7, #4]
   14188:	6039      	str	r1, [r7, #0]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ENCRYPT, HCI_LEN_LE_ENCRYPT)) != NULL)
   1418a:	2120      	movs	r1, #32
   1418c:	f242 0017 	movw	r0, #8215	; 0x2017
   14190:	f7ff fce5 	bl	13b5e <hciCmdAlloc>
   14194:	60f8      	str	r0, [r7, #12]
   14196:	68fb      	ldr	r3, [r7, #12]
   14198:	2b00      	cmp	r3, #0
   1419a:	d012      	beq.n	141c2 <HciLeEncryptCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1419c:	68fb      	ldr	r3, [r7, #12]
   1419e:	3303      	adds	r3, #3
   141a0:	60bb      	str	r3, [r7, #8]
    memcpy(p, pKey, HCI_KEY_LEN);
   141a2:	2210      	movs	r2, #16
   141a4:	6879      	ldr	r1, [r7, #4]
   141a6:	68b8      	ldr	r0, [r7, #8]
   141a8:	f7f7 ffda 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   141ac:	68bb      	ldr	r3, [r7, #8]
   141ae:	3310      	adds	r3, #16
   141b0:	60bb      	str	r3, [r7, #8]
    memcpy(p, pData, HCI_ENCRYPT_DATA_LEN);
   141b2:	2210      	movs	r2, #16
   141b4:	6839      	ldr	r1, [r7, #0]
   141b6:	68b8      	ldr	r0, [r7, #8]
   141b8:	f7f7 ffd2 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   141bc:	68f8      	ldr	r0, [r7, #12]
   141be:	f7ff fcfd 	bl	13bbc <hciCmdSend>
  }
}
   141c2:	bf00      	nop
   141c4:	3710      	adds	r7, #16
   141c6:	46bd      	mov	sp, r7
   141c8:	bd80      	pop	{r7, pc}

000141ca <HciLeLtkReqNegReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqNegReplCmd(uint16_t handle)
{
   141ca:	b580      	push	{r7, lr}
   141cc:	b084      	sub	sp, #16
   141ce:	af00      	add	r7, sp, #0
   141d0:	4603      	mov	r3, r0
   141d2:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_NEG_REPL, HCI_LEN_LE_LTK_REQ_NEG_REPL)) != NULL)
   141d4:	2102      	movs	r1, #2
   141d6:	f242 001b 	movw	r0, #8219	; 0x201b
   141da:	f7ff fcc0 	bl	13b5e <hciCmdAlloc>
   141de:	60f8      	str	r0, [r7, #12]
   141e0:	68fb      	ldr	r3, [r7, #12]
   141e2:	2b00      	cmp	r3, #0
   141e4:	d013      	beq.n	1420e <HciLeLtkReqNegReplCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   141e6:	68fb      	ldr	r3, [r7, #12]
   141e8:	3303      	adds	r3, #3
   141ea:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   141ec:	68bb      	ldr	r3, [r7, #8]
   141ee:	1c5a      	adds	r2, r3, #1
   141f0:	60ba      	str	r2, [r7, #8]
   141f2:	88fa      	ldrh	r2, [r7, #6]
   141f4:	b2d2      	uxtb	r2, r2
   141f6:	701a      	strb	r2, [r3, #0]
   141f8:	68bb      	ldr	r3, [r7, #8]
   141fa:	1c5a      	adds	r2, r3, #1
   141fc:	60ba      	str	r2, [r7, #8]
   141fe:	88fa      	ldrh	r2, [r7, #6]
   14200:	0a12      	lsrs	r2, r2, #8
   14202:	b292      	uxth	r2, r2
   14204:	b2d2      	uxtb	r2, r2
   14206:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14208:	68f8      	ldr	r0, [r7, #12]
   1420a:	f7ff fcd7 	bl	13bbc <hciCmdSend>
  }
}
   1420e:	bf00      	nop
   14210:	3710      	adds	r7, #16
   14212:	46bd      	mov	sp, r7
   14214:	bd80      	pop	{r7, pc}

00014216 <HciLeLtkReqReplCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeLtkReqReplCmd(uint16_t handle, uint8_t *pKey)
{
   14216:	b580      	push	{r7, lr}
   14218:	b084      	sub	sp, #16
   1421a:	af00      	add	r7, sp, #0
   1421c:	4603      	mov	r3, r0
   1421e:	6039      	str	r1, [r7, #0]
   14220:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_LTK_REQ_REPL, HCI_LEN_LE_LTK_REQ_REPL)) != NULL)
   14222:	2112      	movs	r1, #18
   14224:	f242 001a 	movw	r0, #8218	; 0x201a
   14228:	f7ff fc99 	bl	13b5e <hciCmdAlloc>
   1422c:	60f8      	str	r0, [r7, #12]
   1422e:	68fb      	ldr	r3, [r7, #12]
   14230:	2b00      	cmp	r3, #0
   14232:	d018      	beq.n	14266 <HciLeLtkReqReplCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14234:	68fb      	ldr	r3, [r7, #12]
   14236:	3303      	adds	r3, #3
   14238:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   1423a:	68bb      	ldr	r3, [r7, #8]
   1423c:	1c5a      	adds	r2, r3, #1
   1423e:	60ba      	str	r2, [r7, #8]
   14240:	88fa      	ldrh	r2, [r7, #6]
   14242:	b2d2      	uxtb	r2, r2
   14244:	701a      	strb	r2, [r3, #0]
   14246:	68bb      	ldr	r3, [r7, #8]
   14248:	1c5a      	adds	r2, r3, #1
   1424a:	60ba      	str	r2, [r7, #8]
   1424c:	88fa      	ldrh	r2, [r7, #6]
   1424e:	0a12      	lsrs	r2, r2, #8
   14250:	b292      	uxth	r2, r2
   14252:	b2d2      	uxtb	r2, r2
   14254:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14256:	2210      	movs	r2, #16
   14258:	6839      	ldr	r1, [r7, #0]
   1425a:	68b8      	ldr	r0, [r7, #8]
   1425c:	f7f7 ff80 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14260:	68f8      	ldr	r0, [r7, #12]
   14262:	f7ff fcab 	bl	13bbc <hciCmdSend>
  }
}
   14266:	bf00      	nop
   14268:	3710      	adds	r7, #16
   1426a:	46bd      	mov	sp, r7
   1426c:	bd80      	pop	{r7, pc}

0001426e <HciLeRandCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRandCmd(void)
{
   1426e:	b580      	push	{r7, lr}
   14270:	b082      	sub	sp, #8
   14272:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_RAND, HCI_LEN_LE_RAND)) != NULL)
   14274:	2100      	movs	r1, #0
   14276:	f242 0018 	movw	r0, #8216	; 0x2018
   1427a:	f7ff fc70 	bl	13b5e <hciCmdAlloc>
   1427e:	6078      	str	r0, [r7, #4]
   14280:	687b      	ldr	r3, [r7, #4]
   14282:	2b00      	cmp	r3, #0
   14284:	d002      	beq.n	1428c <HciLeRandCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14286:	6878      	ldr	r0, [r7, #4]
   14288:	f7ff fc98 	bl	13bbc <hciCmdSend>
  }
}
   1428c:	bf00      	nop
   1428e:	3708      	adds	r7, #8
   14290:	46bd      	mov	sp, r7
   14292:	bd80      	pop	{r7, pc}

00014294 <HciLeReadBufSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadBufSizeCmd(void)
{
   14294:	b580      	push	{r7, lr}
   14296:	b082      	sub	sp, #8
   14298:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_BUF_SIZE, HCI_LEN_LE_READ_BUF_SIZE)) != NULL)
   1429a:	2100      	movs	r1, #0
   1429c:	f242 0002 	movw	r0, #8194	; 0x2002
   142a0:	f7ff fc5d 	bl	13b5e <hciCmdAlloc>
   142a4:	6078      	str	r0, [r7, #4]
   142a6:	687b      	ldr	r3, [r7, #4]
   142a8:	2b00      	cmp	r3, #0
   142aa:	d002      	beq.n	142b2 <HciLeReadBufSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   142ac:	6878      	ldr	r0, [r7, #4]
   142ae:	f7ff fc85 	bl	13bbc <hciCmdSend>
  }
}
   142b2:	bf00      	nop
   142b4:	3708      	adds	r7, #8
   142b6:	46bd      	mov	sp, r7
   142b8:	bd80      	pop	{r7, pc}

000142ba <HciLeReadLocalSupFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalSupFeatCmd(void)
{
   142ba:	b580      	push	{r7, lr}
   142bc:	b082      	sub	sp, #8
   142be:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_SUP_FEAT, HCI_LEN_LE_READ_LOCAL_SUP_FEAT)) != NULL)
   142c0:	2100      	movs	r1, #0
   142c2:	f242 0003 	movw	r0, #8195	; 0x2003
   142c6:	f7ff fc4a 	bl	13b5e <hciCmdAlloc>
   142ca:	6078      	str	r0, [r7, #4]
   142cc:	687b      	ldr	r3, [r7, #4]
   142ce:	2b00      	cmp	r3, #0
   142d0:	d002      	beq.n	142d8 <HciLeReadLocalSupFeatCmd+0x1e>
  {
    hciCmdSend(pBuf);
   142d2:	6878      	ldr	r0, [r7, #4]
   142d4:	f7ff fc72 	bl	13bbc <hciCmdSend>
  }
}
   142d8:	bf00      	nop
   142da:	3708      	adds	r7, #8
   142dc:	46bd      	mov	sp, r7
   142de:	bd80      	pop	{r7, pc}

000142e0 <HciLeReadRemoteFeatCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadRemoteFeatCmd(uint16_t handle)
{
   142e0:	b580      	push	{r7, lr}
   142e2:	b084      	sub	sp, #16
   142e4:	af00      	add	r7, sp, #0
   142e6:	4603      	mov	r3, r0
   142e8:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_REMOTE_FEAT, HCI_LEN_LE_READ_REMOTE_FEAT)) != NULL)
   142ea:	2102      	movs	r1, #2
   142ec:	f242 0016 	movw	r0, #8214	; 0x2016
   142f0:	f7ff fc35 	bl	13b5e <hciCmdAlloc>
   142f4:	60f8      	str	r0, [r7, #12]
   142f6:	68fb      	ldr	r3, [r7, #12]
   142f8:	2b00      	cmp	r3, #0
   142fa:	d013      	beq.n	14324 <HciLeReadRemoteFeatCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   142fc:	68fb      	ldr	r3, [r7, #12]
   142fe:	3303      	adds	r3, #3
   14300:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14302:	68bb      	ldr	r3, [r7, #8]
   14304:	1c5a      	adds	r2, r3, #1
   14306:	60ba      	str	r2, [r7, #8]
   14308:	88fa      	ldrh	r2, [r7, #6]
   1430a:	b2d2      	uxtb	r2, r2
   1430c:	701a      	strb	r2, [r3, #0]
   1430e:	68bb      	ldr	r3, [r7, #8]
   14310:	1c5a      	adds	r2, r3, #1
   14312:	60ba      	str	r2, [r7, #8]
   14314:	88fa      	ldrh	r2, [r7, #6]
   14316:	0a12      	lsrs	r2, r2, #8
   14318:	b292      	uxth	r2, r2
   1431a:	b2d2      	uxtb	r2, r2
   1431c:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   1431e:	68f8      	ldr	r0, [r7, #12]
   14320:	f7ff fc4c 	bl	13bbc <hciCmdSend>
  }
}
   14324:	bf00      	nop
   14326:	3710      	adds	r7, #16
   14328:	46bd      	mov	sp, r7
   1432a:	bd80      	pop	{r7, pc}

0001432c <HciLeReadSupStatesCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadSupStatesCmd(void)
{
   1432c:	b580      	push	{r7, lr}
   1432e:	b082      	sub	sp, #8
   14330:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_SUP_STATES, HCI_LEN_LE_READ_SUP_STATES)) != NULL)
   14332:	2100      	movs	r1, #0
   14334:	f242 001c 	movw	r0, #8220	; 0x201c
   14338:	f7ff fc11 	bl	13b5e <hciCmdAlloc>
   1433c:	6078      	str	r0, [r7, #4]
   1433e:	687b      	ldr	r3, [r7, #4]
   14340:	2b00      	cmp	r3, #0
   14342:	d002      	beq.n	1434a <HciLeReadSupStatesCmd+0x1e>
  {
    hciCmdSend(pBuf);
   14344:	6878      	ldr	r0, [r7, #4]
   14346:	f7ff fc39 	bl	13bbc <hciCmdSend>
  }
}
   1434a:	bf00      	nop
   1434c:	3708      	adds	r7, #8
   1434e:	46bd      	mov	sp, r7
   14350:	bd80      	pop	{r7, pc}

00014352 <HciLeReadWhiteListSizeCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadWhiteListSizeCmd(void)
{
   14352:	b580      	push	{r7, lr}
   14354:	b082      	sub	sp, #8
   14356:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_WHITE_LIST_SIZE, HCI_LEN_LE_READ_WHITE_LIST_SIZE)) != NULL)
   14358:	2100      	movs	r1, #0
   1435a:	f242 000f 	movw	r0, #8207	; 0x200f
   1435e:	f7ff fbfe 	bl	13b5e <hciCmdAlloc>
   14362:	6078      	str	r0, [r7, #4]
   14364:	687b      	ldr	r3, [r7, #4]
   14366:	2b00      	cmp	r3, #0
   14368:	d002      	beq.n	14370 <HciLeReadWhiteListSizeCmd+0x1e>
  {
    hciCmdSend(pBuf);
   1436a:	6878      	ldr	r0, [r7, #4]
   1436c:	f7ff fc26 	bl	13bbc <hciCmdSend>
  }
}
   14370:	bf00      	nop
   14372:	3708      	adds	r7, #8
   14374:	46bd      	mov	sp, r7
   14376:	bd80      	pop	{r7, pc}

00014378 <HciLeRemoveDevWhiteListCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDevWhiteListCmd(uint8_t addrType, uint8_t *pAddr)
{
   14378:	b580      	push	{r7, lr}
   1437a:	b084      	sub	sp, #16
   1437c:	af00      	add	r7, sp, #0
   1437e:	4603      	mov	r3, r0
   14380:	6039      	str	r1, [r7, #0]
   14382:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_WHITE_LIST, HCI_LEN_LE_REMOVE_DEV_WHITE_LIST)) != NULL)
   14384:	2107      	movs	r1, #7
   14386:	f242 0012 	movw	r0, #8210	; 0x2012
   1438a:	f7ff fbe8 	bl	13b5e <hciCmdAlloc>
   1438e:	60f8      	str	r0, [r7, #12]
   14390:	68fb      	ldr	r3, [r7, #12]
   14392:	2b00      	cmp	r3, #0
   14394:	d011      	beq.n	143ba <HciLeRemoveDevWhiteListCmd+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14396:	68fb      	ldr	r3, [r7, #12]
   14398:	3303      	adds	r3, #3
   1439a:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   1439c:	68bb      	ldr	r3, [r7, #8]
   1439e:	1c5a      	adds	r2, r3, #1
   143a0:	60ba      	str	r2, [r7, #8]
   143a2:	79fa      	ldrb	r2, [r7, #7]
   143a4:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   143a6:	6839      	ldr	r1, [r7, #0]
   143a8:	68b8      	ldr	r0, [r7, #8]
   143aa:	f004 fa1d 	bl	187e8 <BdaCpy>
   143ae:	68bb      	ldr	r3, [r7, #8]
   143b0:	3306      	adds	r3, #6
   143b2:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   143b4:	68f8      	ldr	r0, [r7, #12]
   143b6:	f7ff fc01 	bl	13bbc <hciCmdSend>
  }
}
   143ba:	bf00      	nop
   143bc:	3710      	adds	r7, #16
   143be:	46bd      	mov	sp, r7
   143c0:	bd80      	pop	{r7, pc}

000143c2 <HciLeSetAdvEnableCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvEnableCmd(uint8_t enable)
{
   143c2:	b580      	push	{r7, lr}
   143c4:	b084      	sub	sp, #16
   143c6:	af00      	add	r7, sp, #0
   143c8:	4603      	mov	r3, r0
   143ca:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_ENABLE, HCI_LEN_LE_SET_ADV_ENABLE)) != NULL)
   143cc:	2101      	movs	r1, #1
   143ce:	f242 000a 	movw	r0, #8202	; 0x200a
   143d2:	f7ff fbc4 	bl	13b5e <hciCmdAlloc>
   143d6:	60f8      	str	r0, [r7, #12]
   143d8:	68fb      	ldr	r3, [r7, #12]
   143da:	2b00      	cmp	r3, #0
   143dc:	d00a      	beq.n	143f4 <HciLeSetAdvEnableCmd+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   143de:	68fb      	ldr	r3, [r7, #12]
   143e0:	3303      	adds	r3, #3
   143e2:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   143e4:	68bb      	ldr	r3, [r7, #8]
   143e6:	1c5a      	adds	r2, r3, #1
   143e8:	60ba      	str	r2, [r7, #8]
   143ea:	79fa      	ldrb	r2, [r7, #7]
   143ec:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   143ee:	68f8      	ldr	r0, [r7, #12]
   143f0:	f7ff fbe4 	bl	13bbc <hciCmdSend>
  }
}
   143f4:	bf00      	nop
   143f6:	3710      	adds	r7, #16
   143f8:	46bd      	mov	sp, r7
   143fa:	bd80      	pop	{r7, pc}

000143fc <HciLeSetAdvDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAdvDataCmd(uint8_t len, uint8_t *pData)
{
   143fc:	b580      	push	{r7, lr}
   143fe:	b084      	sub	sp, #16
   14400:	af00      	add	r7, sp, #0
   14402:	4603      	mov	r3, r0
   14404:	6039      	str	r1, [r7, #0]
   14406:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_DATA, HCI_LEN_LE_SET_ADV_DATA)) != NULL)
   14408:	2120      	movs	r1, #32
   1440a:	f242 0008 	movw	r0, #8200	; 0x2008
   1440e:	f7ff fba6 	bl	13b5e <hciCmdAlloc>
   14412:	60f8      	str	r0, [r7, #12]
   14414:	68fb      	ldr	r3, [r7, #12]
   14416:	2b00      	cmp	r3, #0
   14418:	d01c      	beq.n	14454 <HciLeSetAdvDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1441a:	68fb      	ldr	r3, [r7, #12]
   1441c:	3303      	adds	r3, #3
   1441e:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   14420:	68bb      	ldr	r3, [r7, #8]
   14422:	1c5a      	adds	r2, r3, #1
   14424:	60ba      	str	r2, [r7, #8]
   14426:	79fa      	ldrb	r2, [r7, #7]
   14428:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   1442a:	79fb      	ldrb	r3, [r7, #7]
   1442c:	461a      	mov	r2, r3
   1442e:	6839      	ldr	r1, [r7, #0]
   14430:	68b8      	ldr	r0, [r7, #8]
   14432:	f7f7 fe95 	bl	c160 <memcpy>
    p += len;
   14436:	79fb      	ldrb	r3, [r7, #7]
   14438:	68ba      	ldr	r2, [r7, #8]
   1443a:	4413      	add	r3, r2
   1443c:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_ADV_DATA_LEN - len));
   1443e:	79fb      	ldrb	r3, [r7, #7]
   14440:	f1c3 031f 	rsb	r3, r3, #31
   14444:	461a      	mov	r2, r3
   14446:	2100      	movs	r1, #0
   14448:	68b8      	ldr	r0, [r7, #8]
   1444a:	f7f7 ff87 	bl	c35c <memset>
    hciCmdSend(pBuf);
   1444e:	68f8      	ldr	r0, [r7, #12]
   14450:	f7ff fbb4 	bl	13bbc <hciCmdSend>
  }
}
   14454:	bf00      	nop
   14456:	3710      	adds	r7, #16
   14458:	46bd      	mov	sp, r7
   1445a:	bd80      	pop	{r7, pc}

0001445c <HciLeSetAdvParamCmd>:
 */
/*************************************************************************************************/
void HciLeSetAdvParamCmd(uint16_t advIntervalMin, uint16_t advIntervalMax, uint8_t advType,
                         uint8_t ownAddrType, uint8_t peerAddrType, uint8_t *pPeerAddr,
                         uint8_t advChanMap, uint8_t advFiltPolicy)
{
   1445c:	b590      	push	{r4, r7, lr}
   1445e:	b085      	sub	sp, #20
   14460:	af00      	add	r7, sp, #0
   14462:	4604      	mov	r4, r0
   14464:	4608      	mov	r0, r1
   14466:	4611      	mov	r1, r2
   14468:	461a      	mov	r2, r3
   1446a:	4623      	mov	r3, r4
   1446c:	80fb      	strh	r3, [r7, #6]
   1446e:	4603      	mov	r3, r0
   14470:	80bb      	strh	r3, [r7, #4]
   14472:	460b      	mov	r3, r1
   14474:	70fb      	strb	r3, [r7, #3]
   14476:	4613      	mov	r3, r2
   14478:	70bb      	strb	r3, [r7, #2]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADV_PARAM, HCI_LEN_LE_SET_ADV_PARAM)) != NULL)
   1447a:	210f      	movs	r1, #15
   1447c:	f242 0006 	movw	r0, #8198	; 0x2006
   14480:	f7ff fb6d 	bl	13b5e <hciCmdAlloc>
   14484:	60b8      	str	r0, [r7, #8]
   14486:	68bb      	ldr	r3, [r7, #8]
   14488:	2b00      	cmp	r3, #0
   1448a:	d04c      	beq.n	14526 <HciLeSetAdvParamCmd+0xca>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1448c:	68bb      	ldr	r3, [r7, #8]
   1448e:	3303      	adds	r3, #3
   14490:	60fb      	str	r3, [r7, #12]
    UINT16_TO_BSTREAM(p, advIntervalMin);
   14492:	68fb      	ldr	r3, [r7, #12]
   14494:	1c5a      	adds	r2, r3, #1
   14496:	60fa      	str	r2, [r7, #12]
   14498:	88fa      	ldrh	r2, [r7, #6]
   1449a:	b2d2      	uxtb	r2, r2
   1449c:	701a      	strb	r2, [r3, #0]
   1449e:	68fb      	ldr	r3, [r7, #12]
   144a0:	1c5a      	adds	r2, r3, #1
   144a2:	60fa      	str	r2, [r7, #12]
   144a4:	88fa      	ldrh	r2, [r7, #6]
   144a6:	0a12      	lsrs	r2, r2, #8
   144a8:	b292      	uxth	r2, r2
   144aa:	b2d2      	uxtb	r2, r2
   144ac:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, advIntervalMax);
   144ae:	68fb      	ldr	r3, [r7, #12]
   144b0:	1c5a      	adds	r2, r3, #1
   144b2:	60fa      	str	r2, [r7, #12]
   144b4:	88ba      	ldrh	r2, [r7, #4]
   144b6:	b2d2      	uxtb	r2, r2
   144b8:	701a      	strb	r2, [r3, #0]
   144ba:	68fb      	ldr	r3, [r7, #12]
   144bc:	1c5a      	adds	r2, r3, #1
   144be:	60fa      	str	r2, [r7, #12]
   144c0:	88ba      	ldrh	r2, [r7, #4]
   144c2:	0a12      	lsrs	r2, r2, #8
   144c4:	b292      	uxth	r2, r2
   144c6:	b2d2      	uxtb	r2, r2
   144c8:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advType);
   144ca:	68fb      	ldr	r3, [r7, #12]
   144cc:	1c5a      	adds	r2, r3, #1
   144ce:	60fa      	str	r2, [r7, #12]
   144d0:	78fa      	ldrb	r2, [r7, #3]
   144d2:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, ownAddrType);
   144d4:	68fb      	ldr	r3, [r7, #12]
   144d6:	1c5a      	adds	r2, r3, #1
   144d8:	60fa      	str	r2, [r7, #12]
   144da:	78ba      	ldrb	r2, [r7, #2]
   144dc:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, peerAddrType);
   144de:	68fb      	ldr	r3, [r7, #12]
   144e0:	1c5a      	adds	r2, r3, #1
   144e2:	60fa      	str	r2, [r7, #12]
   144e4:	f897 2020 	ldrb.w	r2, [r7, #32]
   144e8:	701a      	strb	r2, [r3, #0]
    if (pPeerAddr != NULL)
   144ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   144ec:	2b00      	cmp	r3, #0
   144ee:	d007      	beq.n	14500 <HciLeSetAdvParamCmd+0xa4>
    {
      BDA_TO_BSTREAM(p, pPeerAddr);
   144f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   144f2:	68f8      	ldr	r0, [r7, #12]
   144f4:	f004 f978 	bl	187e8 <BdaCpy>
   144f8:	68fb      	ldr	r3, [r7, #12]
   144fa:	3306      	adds	r3, #6
   144fc:	60fb      	str	r3, [r7, #12]
   144fe:	e003      	b.n	14508 <HciLeSetAdvParamCmd+0xac>
    }
    else
    {
      p = BdaClr(p);
   14500:	68f8      	ldr	r0, [r7, #12]
   14502:	f004 f993 	bl	1882c <BdaClr>
   14506:	60f8      	str	r0, [r7, #12]
    }
    UINT8_TO_BSTREAM(p, advChanMap);
   14508:	68fb      	ldr	r3, [r7, #12]
   1450a:	1c5a      	adds	r2, r3, #1
   1450c:	60fa      	str	r2, [r7, #12]
   1450e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
   14512:	701a      	strb	r2, [r3, #0]
    UINT8_TO_BSTREAM(p, advFiltPolicy);
   14514:	68fb      	ldr	r3, [r7, #12]
   14516:	1c5a      	adds	r2, r3, #1
   14518:	60fa      	str	r2, [r7, #12]
   1451a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   1451e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14520:	68b8      	ldr	r0, [r7, #8]
   14522:	f7ff fb4b 	bl	13bbc <hciCmdSend>
  }
}
   14526:	bf00      	nop
   14528:	3714      	adds	r7, #20
   1452a:	46bd      	mov	sp, r7
   1452c:	bd90      	pop	{r4, r7, pc}

0001452e <HciLeSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetEventMaskCmd(uint8_t *pLeEventMask)
{
   1452e:	b580      	push	{r7, lr}
   14530:	b084      	sub	sp, #16
   14532:	af00      	add	r7, sp, #0
   14534:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_EVENT_MASK, HCI_LEN_LE_SET_EVENT_MASK)) != NULL)
   14536:	2108      	movs	r1, #8
   14538:	f242 0001 	movw	r0, #8193	; 0x2001
   1453c:	f7ff fb0f 	bl	13b5e <hciCmdAlloc>
   14540:	60f8      	str	r0, [r7, #12]
   14542:	68fb      	ldr	r3, [r7, #12]
   14544:	2b00      	cmp	r3, #0
   14546:	d00a      	beq.n	1455e <HciLeSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14548:	68fb      	ldr	r3, [r7, #12]
   1454a:	3303      	adds	r3, #3
   1454c:	60bb      	str	r3, [r7, #8]
    memcpy(p, pLeEventMask, HCI_LE_EVT_MASK_LEN);
   1454e:	2208      	movs	r2, #8
   14550:	6879      	ldr	r1, [r7, #4]
   14552:	68b8      	ldr	r0, [r7, #8]
   14554:	f7f7 fe04 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   14558:	68f8      	ldr	r0, [r7, #12]
   1455a:	f7ff fb2f 	bl	13bbc <hciCmdSend>
  }
}
   1455e:	bf00      	nop
   14560:	3710      	adds	r7, #16
   14562:	46bd      	mov	sp, r7
   14564:	bd80      	pop	{r7, pc}

00014566 <HciLeSetRandAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetRandAddrCmd(uint8_t *pAddr)
{
   14566:	b580      	push	{r7, lr}
   14568:	b084      	sub	sp, #16
   1456a:	af00      	add	r7, sp, #0
   1456c:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RAND_ADDR, HCI_LEN_LE_SET_RAND_ADDR)) != NULL)
   1456e:	2106      	movs	r1, #6
   14570:	f242 0005 	movw	r0, #8197	; 0x2005
   14574:	f7ff faf3 	bl	13b5e <hciCmdAlloc>
   14578:	60f8      	str	r0, [r7, #12]
   1457a:	68fb      	ldr	r3, [r7, #12]
   1457c:	2b00      	cmp	r3, #0
   1457e:	d00c      	beq.n	1459a <HciLeSetRandAddrCmd+0x34>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	3303      	adds	r3, #3
   14584:	60bb      	str	r3, [r7, #8]
    BDA_TO_BSTREAM(p, pAddr);
   14586:	6879      	ldr	r1, [r7, #4]
   14588:	68b8      	ldr	r0, [r7, #8]
   1458a:	f004 f92d 	bl	187e8 <BdaCpy>
   1458e:	68bb      	ldr	r3, [r7, #8]
   14590:	3306      	adds	r3, #6
   14592:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   14594:	68f8      	ldr	r0, [r7, #12]
   14596:	f7ff fb11 	bl	13bbc <hciCmdSend>
  }
}
   1459a:	bf00      	nop
   1459c:	3710      	adds	r7, #16
   1459e:	46bd      	mov	sp, r7
   145a0:	bd80      	pop	{r7, pc}

000145a2 <HciLeSetScanRespDataCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetScanRespDataCmd(uint8_t len, uint8_t *pData)
{
   145a2:	b580      	push	{r7, lr}
   145a4:	b084      	sub	sp, #16
   145a6:	af00      	add	r7, sp, #0
   145a8:	4603      	mov	r3, r0
   145aa:	6039      	str	r1, [r7, #0]
   145ac:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_SCAN_RESP_DATA, HCI_LEN_LE_SET_SCAN_RESP_DATA)) != NULL)
   145ae:	2120      	movs	r1, #32
   145b0:	f242 0009 	movw	r0, #8201	; 0x2009
   145b4:	f7ff fad3 	bl	13b5e <hciCmdAlloc>
   145b8:	60f8      	str	r0, [r7, #12]
   145ba:	68fb      	ldr	r3, [r7, #12]
   145bc:	2b00      	cmp	r3, #0
   145be:	d01c      	beq.n	145fa <HciLeSetScanRespDataCmd+0x58>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   145c0:	68fb      	ldr	r3, [r7, #12]
   145c2:	3303      	adds	r3, #3
   145c4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, len);
   145c6:	68bb      	ldr	r3, [r7, #8]
   145c8:	1c5a      	adds	r2, r3, #1
   145ca:	60ba      	str	r2, [r7, #8]
   145cc:	79fa      	ldrb	r2, [r7, #7]
   145ce:	701a      	strb	r2, [r3, #0]
    memcpy(p, pData, len);
   145d0:	79fb      	ldrb	r3, [r7, #7]
   145d2:	461a      	mov	r2, r3
   145d4:	6839      	ldr	r1, [r7, #0]
   145d6:	68b8      	ldr	r0, [r7, #8]
   145d8:	f7f7 fdc2 	bl	c160 <memcpy>
    p += len;
   145dc:	79fb      	ldrb	r3, [r7, #7]
   145de:	68ba      	ldr	r2, [r7, #8]
   145e0:	4413      	add	r3, r2
   145e2:	60bb      	str	r3, [r7, #8]
    memset(p, 0, (HCI_SCAN_DATA_LEN - len));
   145e4:	79fb      	ldrb	r3, [r7, #7]
   145e6:	f1c3 031f 	rsb	r3, r3, #31
   145ea:	461a      	mov	r2, r3
   145ec:	2100      	movs	r1, #0
   145ee:	68b8      	ldr	r0, [r7, #8]
   145f0:	f7f7 feb4 	bl	c35c <memset>
    hciCmdSend(pBuf);
   145f4:	68f8      	ldr	r0, [r7, #12]
   145f6:	f7ff fae1 	bl	13bbc <hciCmdSend>
  }
}
   145fa:	bf00      	nop
   145fc:	3710      	adds	r7, #16
   145fe:	46bd      	mov	sp, r7
   14600:	bd80      	pop	{r7, pc}

00014602 <HciLeStartEncryptionCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeStartEncryptionCmd(uint16_t handle, uint8_t *pRand, uint16_t diversifier, uint8_t *pKey)
{
   14602:	b580      	push	{r7, lr}
   14604:	b086      	sub	sp, #24
   14606:	af00      	add	r7, sp, #0
   14608:	60b9      	str	r1, [r7, #8]
   1460a:	607b      	str	r3, [r7, #4]
   1460c:	4603      	mov	r3, r0
   1460e:	81fb      	strh	r3, [r7, #14]
   14610:	4613      	mov	r3, r2
   14612:	81bb      	strh	r3, [r7, #12]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_START_ENCRYPTION, HCI_LEN_LE_START_ENCRYPTION)) != NULL)
   14614:	211c      	movs	r1, #28
   14616:	f242 0019 	movw	r0, #8217	; 0x2019
   1461a:	f7ff faa0 	bl	13b5e <hciCmdAlloc>
   1461e:	6178      	str	r0, [r7, #20]
   14620:	697b      	ldr	r3, [r7, #20]
   14622:	2b00      	cmp	r3, #0
   14624:	d02e      	beq.n	14684 <HciLeStartEncryptionCmd+0x82>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14626:	697b      	ldr	r3, [r7, #20]
   14628:	3303      	adds	r3, #3
   1462a:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, handle);
   1462c:	693b      	ldr	r3, [r7, #16]
   1462e:	1c5a      	adds	r2, r3, #1
   14630:	613a      	str	r2, [r7, #16]
   14632:	89fa      	ldrh	r2, [r7, #14]
   14634:	b2d2      	uxtb	r2, r2
   14636:	701a      	strb	r2, [r3, #0]
   14638:	693b      	ldr	r3, [r7, #16]
   1463a:	1c5a      	adds	r2, r3, #1
   1463c:	613a      	str	r2, [r7, #16]
   1463e:	89fa      	ldrh	r2, [r7, #14]
   14640:	0a12      	lsrs	r2, r2, #8
   14642:	b292      	uxth	r2, r2
   14644:	b2d2      	uxtb	r2, r2
   14646:	701a      	strb	r2, [r3, #0]
    memcpy(p, pRand, HCI_RAND_LEN);
   14648:	2208      	movs	r2, #8
   1464a:	68b9      	ldr	r1, [r7, #8]
   1464c:	6938      	ldr	r0, [r7, #16]
   1464e:	f7f7 fd87 	bl	c160 <memcpy>
    p += HCI_RAND_LEN;
   14652:	693b      	ldr	r3, [r7, #16]
   14654:	3308      	adds	r3, #8
   14656:	613b      	str	r3, [r7, #16]
    UINT16_TO_BSTREAM(p, diversifier);
   14658:	693b      	ldr	r3, [r7, #16]
   1465a:	1c5a      	adds	r2, r3, #1
   1465c:	613a      	str	r2, [r7, #16]
   1465e:	89ba      	ldrh	r2, [r7, #12]
   14660:	b2d2      	uxtb	r2, r2
   14662:	701a      	strb	r2, [r3, #0]
   14664:	693b      	ldr	r3, [r7, #16]
   14666:	1c5a      	adds	r2, r3, #1
   14668:	613a      	str	r2, [r7, #16]
   1466a:	89ba      	ldrh	r2, [r7, #12]
   1466c:	0a12      	lsrs	r2, r2, #8
   1466e:	b292      	uxth	r2, r2
   14670:	b2d2      	uxtb	r2, r2
   14672:	701a      	strb	r2, [r3, #0]
    memcpy(p, pKey, HCI_KEY_LEN);
   14674:	2210      	movs	r2, #16
   14676:	6879      	ldr	r1, [r7, #4]
   14678:	6938      	ldr	r0, [r7, #16]
   1467a:	f7f7 fd71 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   1467e:	6978      	ldr	r0, [r7, #20]
   14680:	f7ff fa9c 	bl	13bbc <hciCmdSend>
  }
}
   14684:	bf00      	nop
   14686:	3718      	adds	r7, #24
   14688:	46bd      	mov	sp, r7
   1468a:	bd80      	pop	{r7, pc}

0001468c <HciReadBdAddrCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadBdAddrCmd(void)
{
   1468c:	b580      	push	{r7, lr}
   1468e:	b082      	sub	sp, #8
   14690:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_BD_ADDR, HCI_LEN_READ_BD_ADDR)) != NULL)
   14692:	2100      	movs	r1, #0
   14694:	f241 0009 	movw	r0, #4105	; 0x1009
   14698:	f7ff fa61 	bl	13b5e <hciCmdAlloc>
   1469c:	6078      	str	r0, [r7, #4]
   1469e:	687b      	ldr	r3, [r7, #4]
   146a0:	2b00      	cmp	r3, #0
   146a2:	d002      	beq.n	146aa <HciReadBdAddrCmd+0x1e>
  {
    hciCmdSend(pBuf);
   146a4:	6878      	ldr	r0, [r7, #4]
   146a6:	f7ff fa89 	bl	13bbc <hciCmdSend>
  }
}
   146aa:	bf00      	nop
   146ac:	3708      	adds	r7, #8
   146ae:	46bd      	mov	sp, r7
   146b0:	bd80      	pop	{r7, pc}

000146b2 <HciReadLocalVerInfoCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadLocalVerInfoCmd(void)
{
   146b2:	b580      	push	{r7, lr}
   146b4:	b082      	sub	sp, #8
   146b6:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_LOCAL_VER_INFO, HCI_LEN_READ_LOCAL_VER_INFO)) != NULL)
   146b8:	2100      	movs	r1, #0
   146ba:	f241 0001 	movw	r0, #4097	; 0x1001
   146be:	f7ff fa4e 	bl	13b5e <hciCmdAlloc>
   146c2:	6078      	str	r0, [r7, #4]
   146c4:	687b      	ldr	r3, [r7, #4]
   146c6:	2b00      	cmp	r3, #0
   146c8:	d002      	beq.n	146d0 <HciReadLocalVerInfoCmd+0x1e>
  {
    hciCmdSend(pBuf);
   146ca:	6878      	ldr	r0, [r7, #4]
   146cc:	f7ff fa76 	bl	13bbc <hciCmdSend>
  }
}
   146d0:	bf00      	nop
   146d2:	3708      	adds	r7, #8
   146d4:	46bd      	mov	sp, r7
   146d6:	bd80      	pop	{r7, pc}

000146d8 <HciReadRssiCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciReadRssiCmd(uint16_t handle)
{
   146d8:	b580      	push	{r7, lr}
   146da:	b084      	sub	sp, #16
   146dc:	af00      	add	r7, sp, #0
   146de:	4603      	mov	r3, r0
   146e0:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_READ_RSSI, HCI_LEN_READ_RSSI)) != NULL)
   146e2:	2102      	movs	r1, #2
   146e4:	f241 4005 	movw	r0, #5125	; 0x1405
   146e8:	f7ff fa39 	bl	13b5e <hciCmdAlloc>
   146ec:	60f8      	str	r0, [r7, #12]
   146ee:	68fb      	ldr	r3, [r7, #12]
   146f0:	2b00      	cmp	r3, #0
   146f2:	d013      	beq.n	1471c <HciReadRssiCmd+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   146f4:	68fb      	ldr	r3, [r7, #12]
   146f6:	3303      	adds	r3, #3
   146f8:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   146fa:	68bb      	ldr	r3, [r7, #8]
   146fc:	1c5a      	adds	r2, r3, #1
   146fe:	60ba      	str	r2, [r7, #8]
   14700:	88fa      	ldrh	r2, [r7, #6]
   14702:	b2d2      	uxtb	r2, r2
   14704:	701a      	strb	r2, [r3, #0]
   14706:	68bb      	ldr	r3, [r7, #8]
   14708:	1c5a      	adds	r2, r3, #1
   1470a:	60ba      	str	r2, [r7, #8]
   1470c:	88fa      	ldrh	r2, [r7, #6]
   1470e:	0a12      	lsrs	r2, r2, #8
   14710:	b292      	uxth	r2, r2
   14712:	b2d2      	uxtb	r2, r2
   14714:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14716:	68f8      	ldr	r0, [r7, #12]
   14718:	f7ff fa50 	bl	13bbc <hciCmdSend>
  }
}
   1471c:	bf00      	nop
   1471e:	3710      	adds	r7, #16
   14720:	46bd      	mov	sp, r7
   14722:	bd80      	pop	{r7, pc}

00014724 <HciResetCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetCmd(void)
{
   14724:	b580      	push	{r7, lr}
   14726:	b084      	sub	sp, #16
   14728:	af00      	add	r7, sp, #0
  uint8_t *pBuf;
  wsfHandlerId_t  handlerId;
  hciHwErrorEvt_t evt;

  // let security module to clean up pending request/command
  evt.hdr.event = HCI_HW_ERROR_CBACK_EVT;
   1472a:	2314      	movs	r3, #20
   1472c:	71bb      	strb	r3, [r7, #6]

  hciCb.secCback((hciEvt_t *)&evt);
   1472e:	4b13      	ldr	r3, [pc, #76]	; (1477c <HciResetCmd+0x58>)
   14730:	68db      	ldr	r3, [r3, #12]
   14732:	1d3a      	adds	r2, r7, #4
   14734:	4610      	mov	r0, r2
   14736:	4798      	blx	r3

  // Free up any unsent HCI commandss
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   14738:	e002      	b.n	14740 <HciResetCmd+0x1c>
  {
    WsfMsgFree(pBuf);
   1473a:	68f8      	ldr	r0, [r7, #12]
   1473c:	f003 f9a8 	bl	17a90 <WsfMsgFree>
  while((pBuf = WsfMsgDeq(&hciCmdCb.cmdQueue, &handlerId)) != NULL)
   14740:	f107 030b 	add.w	r3, r7, #11
   14744:	4619      	mov	r1, r3
   14746:	480e      	ldr	r0, [pc, #56]	; (14780 <HciResetCmd+0x5c>)
   14748:	f003 f9dc 	bl	17b04 <WsfMsgDeq>
   1474c:	60f8      	str	r0, [r7, #12]
   1474e:	68fb      	ldr	r3, [r7, #12]
   14750:	2b00      	cmp	r3, #0
   14752:	d1f2      	bne.n	1473a <HciResetCmd+0x16>
  }

  /* initialize numCmdPkts for special case of reset command */
  hciCmdCb.numCmdPkts = 1;
   14754:	4b0b      	ldr	r3, [pc, #44]	; (14784 <HciResetCmd+0x60>)
   14756:	2201      	movs	r2, #1
   14758:	769a      	strb	r2, [r3, #26]

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_RESET, HCI_LEN_RESET)) != NULL)
   1475a:	2100      	movs	r1, #0
   1475c:	f640 4003 	movw	r0, #3075	; 0xc03
   14760:	f7ff f9fd 	bl	13b5e <hciCmdAlloc>
   14764:	60f8      	str	r0, [r7, #12]
   14766:	68fb      	ldr	r3, [r7, #12]
   14768:	2b00      	cmp	r3, #0
   1476a:	d002      	beq.n	14772 <HciResetCmd+0x4e>
  {
    hciCmdSend(pBuf);
   1476c:	68f8      	ldr	r0, [r7, #12]
   1476e:	f7ff fa25 	bl	13bbc <hciCmdSend>
  }
}
   14772:	bf00      	nop
   14774:	3710      	adds	r7, #16
   14776:	46bd      	mov	sp, r7
   14778:	bd80      	pop	{r7, pc}
   1477a:	bf00      	nop
   1477c:	10006538 	.word	0x10006538
   14780:	10006418 	.word	0x10006418
   14784:	10006408 	.word	0x10006408

00014788 <HciSetEventMaskCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetEventMaskCmd(uint8_t *pEventMask)
{
   14788:	b580      	push	{r7, lr}
   1478a:	b084      	sub	sp, #16
   1478c:	af00      	add	r7, sp, #0
   1478e:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK, HCI_LEN_SET_EVENT_MASK)) != NULL)
   14790:	2108      	movs	r1, #8
   14792:	f640 4001 	movw	r0, #3073	; 0xc01
   14796:	f7ff f9e2 	bl	13b5e <hciCmdAlloc>
   1479a:	60f8      	str	r0, [r7, #12]
   1479c:	68fb      	ldr	r3, [r7, #12]
   1479e:	2b00      	cmp	r3, #0
   147a0:	d00a      	beq.n	147b8 <HciSetEventMaskCmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   147a2:	68fb      	ldr	r3, [r7, #12]
   147a4:	3303      	adds	r3, #3
   147a6:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_LEN);
   147a8:	2208      	movs	r2, #8
   147aa:	6879      	ldr	r1, [r7, #4]
   147ac:	68b8      	ldr	r0, [r7, #8]
   147ae:	f7f7 fcd7 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   147b2:	68f8      	ldr	r0, [r7, #12]
   147b4:	f7ff fa02 	bl	13bbc <hciCmdSend>
  }
}
   147b8:	bf00      	nop
   147ba:	3710      	adds	r7, #16
   147bc:	46bd      	mov	sp, r7
   147be:	bd80      	pop	{r7, pc}

000147c0 <HciSetEventMaskPage2Cmd>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciSetEventMaskPage2Cmd(uint8_t *pEventMask)
{
   147c0:	b580      	push	{r7, lr}
   147c2:	b084      	sub	sp, #16
   147c4:	af00      	add	r7, sp, #0
   147c6:	6078      	str	r0, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_SET_EVENT_MASK_PAGE2, HCI_LEN_SET_EVENT_MASK_PAGE2)) != NULL)
   147c8:	2108      	movs	r1, #8
   147ca:	f640 4063 	movw	r0, #3171	; 0xc63
   147ce:	f7ff f9c6 	bl	13b5e <hciCmdAlloc>
   147d2:	60f8      	str	r0, [r7, #12]
   147d4:	68fb      	ldr	r3, [r7, #12]
   147d6:	2b00      	cmp	r3, #0
   147d8:	d00a      	beq.n	147f0 <HciSetEventMaskPage2Cmd+0x30>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   147da:	68fb      	ldr	r3, [r7, #12]
   147dc:	3303      	adds	r3, #3
   147de:	60bb      	str	r3, [r7, #8]
    memcpy(p, pEventMask, HCI_EVT_MASK_PAGE_2_LEN);
   147e0:	2208      	movs	r2, #8
   147e2:	6879      	ldr	r1, [r7, #4]
   147e4:	68b8      	ldr	r0, [r7, #8]
   147e6:	f7f7 fcbb 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   147ea:	68f8      	ldr	r0, [r7, #12]
   147ec:	f7ff f9e6 	bl	13bbc <hciCmdSend>
  }
}
   147f0:	bf00      	nop
   147f2:	3710      	adds	r7, #16
   147f4:	46bd      	mov	sp, r7
   147f6:	bd80      	pop	{r7, pc}

000147f8 <HciWriteAuthPayloadTimeout>:
*
*  \return None.
*/
/*************************************************************************************************/
void HciWriteAuthPayloadTimeout(uint16_t handle, uint16_t timeout)
{
   147f8:	b580      	push	{r7, lr}
   147fa:	b084      	sub	sp, #16
   147fc:	af00      	add	r7, sp, #0
   147fe:	4603      	mov	r3, r0
   14800:	460a      	mov	r2, r1
   14802:	80fb      	strh	r3, [r7, #6]
   14804:	4613      	mov	r3, r2
   14806:	80bb      	strh	r3, [r7, #4]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO, HCI_LEN_WRITE_AUTH_PAYLOAD_TO)) != NULL)
   14808:	2104      	movs	r1, #4
   1480a:	f640 407c 	movw	r0, #3196	; 0xc7c
   1480e:	f7ff f9a6 	bl	13b5e <hciCmdAlloc>
   14812:	60f8      	str	r0, [r7, #12]
   14814:	68fb      	ldr	r3, [r7, #12]
   14816:	2b00      	cmp	r3, #0
   14818:	d021      	beq.n	1485e <HciWriteAuthPayloadTimeout+0x66>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   1481a:	68fb      	ldr	r3, [r7, #12]
   1481c:	3303      	adds	r3, #3
   1481e:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, handle);
   14820:	68bb      	ldr	r3, [r7, #8]
   14822:	1c5a      	adds	r2, r3, #1
   14824:	60ba      	str	r2, [r7, #8]
   14826:	88fa      	ldrh	r2, [r7, #6]
   14828:	b2d2      	uxtb	r2, r2
   1482a:	701a      	strb	r2, [r3, #0]
   1482c:	68bb      	ldr	r3, [r7, #8]
   1482e:	1c5a      	adds	r2, r3, #1
   14830:	60ba      	str	r2, [r7, #8]
   14832:	88fa      	ldrh	r2, [r7, #6]
   14834:	0a12      	lsrs	r2, r2, #8
   14836:	b292      	uxth	r2, r2
   14838:	b2d2      	uxtb	r2, r2
   1483a:	701a      	strb	r2, [r3, #0]
    UINT16_TO_BSTREAM(p, timeout);
   1483c:	68bb      	ldr	r3, [r7, #8]
   1483e:	1c5a      	adds	r2, r3, #1
   14840:	60ba      	str	r2, [r7, #8]
   14842:	88ba      	ldrh	r2, [r7, #4]
   14844:	b2d2      	uxtb	r2, r2
   14846:	701a      	strb	r2, [r3, #0]
   14848:	68bb      	ldr	r3, [r7, #8]
   1484a:	1c5a      	adds	r2, r3, #1
   1484c:	60ba      	str	r2, [r7, #8]
   1484e:	88ba      	ldrh	r2, [r7, #4]
   14850:	0a12      	lsrs	r2, r2, #8
   14852:	b292      	uxth	r2, r2
   14854:	b2d2      	uxtb	r2, r2
   14856:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14858:	68f8      	ldr	r0, [r7, #12]
   1485a:	f7ff f9af 	bl	13bbc <hciCmdSend>
  }
}
   1485e:	bf00      	nop
   14860:	3710      	adds	r7, #16
   14862:	46bd      	mov	sp, r7
   14864:	bd80      	pop	{r7, pc}

00014866 <HciLeAddDeviceToResolvingListCmd>:
 *  \return None.
 */
/*************************************************************************************************/
void HciLeAddDeviceToResolvingListCmd(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr,
                                      const uint8_t *pPeerIrk, const uint8_t *pLocalIrk)
{
   14866:	b580      	push	{r7, lr}
   14868:	b086      	sub	sp, #24
   1486a:	af00      	add	r7, sp, #0
   1486c:	60b9      	str	r1, [r7, #8]
   1486e:	607a      	str	r2, [r7, #4]
   14870:	603b      	str	r3, [r7, #0]
   14872:	4603      	mov	r3, r0
   14874:	73fb      	strb	r3, [r7, #15]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_ADD_DEV_RES_LIST, HCI_LEN_LE_ADD_DEV_RES_LIST)) != NULL)
   14876:	2127      	movs	r1, #39	; 0x27
   14878:	f242 0027 	movw	r0, #8231	; 0x2027
   1487c:	f7ff f96f 	bl	13b5e <hciCmdAlloc>
   14880:	6178      	str	r0, [r7, #20]
   14882:	697b      	ldr	r3, [r7, #20]
   14884:	2b00      	cmp	r3, #0
   14886:	d01e      	beq.n	148c6 <HciLeAddDeviceToResolvingListCmd+0x60>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14888:	697b      	ldr	r3, [r7, #20]
   1488a:	3303      	adds	r3, #3
   1488c:	613b      	str	r3, [r7, #16]
    UINT8_TO_BSTREAM(p, peerAddrType);
   1488e:	693b      	ldr	r3, [r7, #16]
   14890:	1c5a      	adds	r2, r3, #1
   14892:	613a      	str	r2, [r7, #16]
   14894:	7bfa      	ldrb	r2, [r7, #15]
   14896:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   14898:	68b9      	ldr	r1, [r7, #8]
   1489a:	6938      	ldr	r0, [r7, #16]
   1489c:	f003 ffa4 	bl	187e8 <BdaCpy>
   148a0:	693b      	ldr	r3, [r7, #16]
   148a2:	3306      	adds	r3, #6
   148a4:	613b      	str	r3, [r7, #16]
    memcpy(p, pPeerIrk, HCI_KEY_LEN);
   148a6:	2210      	movs	r2, #16
   148a8:	6879      	ldr	r1, [r7, #4]
   148aa:	6938      	ldr	r0, [r7, #16]
   148ac:	f7f7 fc58 	bl	c160 <memcpy>
    p += HCI_KEY_LEN;
   148b0:	693b      	ldr	r3, [r7, #16]
   148b2:	3310      	adds	r3, #16
   148b4:	613b      	str	r3, [r7, #16]
    memcpy(p, pLocalIrk, HCI_KEY_LEN);
   148b6:	2210      	movs	r2, #16
   148b8:	6839      	ldr	r1, [r7, #0]
   148ba:	6938      	ldr	r0, [r7, #16]
   148bc:	f7f7 fc50 	bl	c160 <memcpy>
    hciCmdSend(pBuf);
   148c0:	6978      	ldr	r0, [r7, #20]
   148c2:	f7ff f97b 	bl	13bbc <hciCmdSend>
  }
}
   148c6:	bf00      	nop
   148c8:	3718      	adds	r7, #24
   148ca:	46bd      	mov	sp, r7
   148cc:	bd80      	pop	{r7, pc}

000148ce <HciLeRemoveDeviceFromResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeRemoveDeviceFromResolvingList(uint8_t peerAddrType, const uint8_t *pPeerIdentityAddr)
{
   148ce:	b580      	push	{r7, lr}
   148d0:	b084      	sub	sp, #16
   148d2:	af00      	add	r7, sp, #0
   148d4:	4603      	mov	r3, r0
   148d6:	6039      	str	r1, [r7, #0]
   148d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_REMOVE_DEV_RES_LIST, HCI_LEN_LE_REMOVE_DEV_RES_LIST)) != NULL)
   148da:	2107      	movs	r1, #7
   148dc:	f242 0028 	movw	r0, #8232	; 0x2028
   148e0:	f7ff f93d 	bl	13b5e <hciCmdAlloc>
   148e4:	60f8      	str	r0, [r7, #12]
   148e6:	68fb      	ldr	r3, [r7, #12]
   148e8:	2b00      	cmp	r3, #0
   148ea:	d011      	beq.n	14910 <HciLeRemoveDeviceFromResolvingList+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   148ec:	68fb      	ldr	r3, [r7, #12]
   148ee:	3303      	adds	r3, #3
   148f0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, peerAddrType);
   148f2:	68bb      	ldr	r3, [r7, #8]
   148f4:	1c5a      	adds	r2, r3, #1
   148f6:	60ba      	str	r2, [r7, #8]
   148f8:	79fa      	ldrb	r2, [r7, #7]
   148fa:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pPeerIdentityAddr);
   148fc:	6839      	ldr	r1, [r7, #0]
   148fe:	68b8      	ldr	r0, [r7, #8]
   14900:	f003 ff72 	bl	187e8 <BdaCpy>
   14904:	68bb      	ldr	r3, [r7, #8]
   14906:	3306      	adds	r3, #6
   14908:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   1490a:	68f8      	ldr	r0, [r7, #12]
   1490c:	f7ff f956 	bl	13bbc <hciCmdSend>
  }
}
   14910:	bf00      	nop
   14912:	3710      	adds	r7, #16
   14914:	46bd      	mov	sp, r7
   14916:	bd80      	pop	{r7, pc}

00014918 <HciLeClearResolvingList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeClearResolvingList(void)
{
   14918:	b580      	push	{r7, lr}
   1491a:	b082      	sub	sp, #8
   1491c:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_CLEAR_RES_LIST, HCI_LEN_LE_CLEAR_RES_LIST)) != NULL)
   1491e:	2100      	movs	r1, #0
   14920:	f242 0029 	movw	r0, #8233	; 0x2029
   14924:	f7ff f91b 	bl	13b5e <hciCmdAlloc>
   14928:	6078      	str	r0, [r7, #4]
   1492a:	687b      	ldr	r3, [r7, #4]
   1492c:	2b00      	cmp	r3, #0
   1492e:	d002      	beq.n	14936 <HciLeClearResolvingList+0x1e>
  {
    hciCmdSend(pBuf);
   14930:	6878      	ldr	r0, [r7, #4]
   14932:	f7ff f943 	bl	13bbc <hciCmdSend>
  }
}
   14936:	bf00      	nop
   14938:	3708      	adds	r7, #8
   1493a:	46bd      	mov	sp, r7
   1493c:	bd80      	pop	{r7, pc}

0001493e <HciLeReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadResolvingListSize(void)
{
   1493e:	b580      	push	{r7, lr}
   14940:	b082      	sub	sp, #8
   14942:	af00      	add	r7, sp, #0
  uint8_t *pBuf;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_RES_LIST_SIZE, HCI_LEN_LE_READ_RES_LIST_SIZE)) != NULL)
   14944:	2100      	movs	r1, #0
   14946:	f242 002a 	movw	r0, #8234	; 0x202a
   1494a:	f7ff f908 	bl	13b5e <hciCmdAlloc>
   1494e:	6078      	str	r0, [r7, #4]
   14950:	687b      	ldr	r3, [r7, #4]
   14952:	2b00      	cmp	r3, #0
   14954:	d002      	beq.n	1495c <HciLeReadResolvingListSize+0x1e>
  {
    hciCmdSend(pBuf);
   14956:	6878      	ldr	r0, [r7, #4]
   14958:	f7ff f930 	bl	13bbc <hciCmdSend>
  }
}
   1495c:	bf00      	nop
   1495e:	3708      	adds	r7, #8
   14960:	46bd      	mov	sp, r7
   14962:	bd80      	pop	{r7, pc}

00014964 <HciLeReadPeerResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadPeerResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   14964:	b580      	push	{r7, lr}
   14966:	b084      	sub	sp, #16
   14968:	af00      	add	r7, sp, #0
   1496a:	4603      	mov	r3, r0
   1496c:	6039      	str	r1, [r7, #0]
   1496e:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_PEER_RES_ADDR, HCI_LEN_LE_READ_PEER_RES_ADDR)) != NULL)
   14970:	2107      	movs	r1, #7
   14972:	f242 002b 	movw	r0, #8235	; 0x202b
   14976:	f7ff f8f2 	bl	13b5e <hciCmdAlloc>
   1497a:	60f8      	str	r0, [r7, #12]
   1497c:	68fb      	ldr	r3, [r7, #12]
   1497e:	2b00      	cmp	r3, #0
   14980:	d011      	beq.n	149a6 <HciLeReadPeerResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14982:	68fb      	ldr	r3, [r7, #12]
   14984:	3303      	adds	r3, #3
   14986:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14988:	68bb      	ldr	r3, [r7, #8]
   1498a:	1c5a      	adds	r2, r3, #1
   1498c:	60ba      	str	r2, [r7, #8]
   1498e:	79fa      	ldrb	r2, [r7, #7]
   14990:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   14992:	6839      	ldr	r1, [r7, #0]
   14994:	68b8      	ldr	r0, [r7, #8]
   14996:	f003 ff27 	bl	187e8 <BdaCpy>
   1499a:	68bb      	ldr	r3, [r7, #8]
   1499c:	3306      	adds	r3, #6
   1499e:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   149a0:	68f8      	ldr	r0, [r7, #12]
   149a2:	f7ff f90b 	bl	13bbc <hciCmdSend>
  }
}
   149a6:	bf00      	nop
   149a8:	3710      	adds	r7, #16
   149aa:	46bd      	mov	sp, r7
   149ac:	bd80      	pop	{r7, pc}

000149ae <HciLeReadLocalResolvableAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeReadLocalResolvableAddr(uint8_t addrType, const uint8_t *pIdentityAddr)
{
   149ae:	b580      	push	{r7, lr}
   149b0:	b084      	sub	sp, #16
   149b2:	af00      	add	r7, sp, #0
   149b4:	4603      	mov	r3, r0
   149b6:	6039      	str	r1, [r7, #0]
   149b8:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_READ_LOCAL_RES_ADDR, HCI_LEN_LE_READ_LOCAL_RES_ADDR)) != NULL)
   149ba:	2107      	movs	r1, #7
   149bc:	f242 002c 	movw	r0, #8236	; 0x202c
   149c0:	f7ff f8cd 	bl	13b5e <hciCmdAlloc>
   149c4:	60f8      	str	r0, [r7, #12]
   149c6:	68fb      	ldr	r3, [r7, #12]
   149c8:	2b00      	cmp	r3, #0
   149ca:	d011      	beq.n	149f0 <HciLeReadLocalResolvableAddr+0x42>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   149cc:	68fb      	ldr	r3, [r7, #12]
   149ce:	3303      	adds	r3, #3
   149d0:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   149d2:	68bb      	ldr	r3, [r7, #8]
   149d4:	1c5a      	adds	r2, r3, #1
   149d6:	60ba      	str	r2, [r7, #8]
   149d8:	79fa      	ldrb	r2, [r7, #7]
   149da:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pIdentityAddr);
   149dc:	6839      	ldr	r1, [r7, #0]
   149de:	68b8      	ldr	r0, [r7, #8]
   149e0:	f003 ff02 	bl	187e8 <BdaCpy>
   149e4:	68bb      	ldr	r3, [r7, #8]
   149e6:	3306      	adds	r3, #6
   149e8:	60bb      	str	r3, [r7, #8]
    hciCmdSend(pBuf);
   149ea:	68f8      	ldr	r0, [r7, #12]
   149ec:	f7ff f8e6 	bl	13bbc <hciCmdSend>
  }
}
   149f0:	bf00      	nop
   149f2:	3710      	adds	r7, #16
   149f4:	46bd      	mov	sp, r7
   149f6:	bd80      	pop	{r7, pc}

000149f8 <HciLeSetAddrResolutionEnable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetAddrResolutionEnable(uint8_t enable)
{
   149f8:	b580      	push	{r7, lr}
   149fa:	b084      	sub	sp, #16
   149fc:	af00      	add	r7, sp, #0
   149fe:	4603      	mov	r3, r0
   14a00:	71fb      	strb	r3, [r7, #7]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_ADDR_RES_ENABLE, HCI_LEN_LE_SET_ADDR_RES_ENABLE)) != NULL)
   14a02:	2101      	movs	r1, #1
   14a04:	f242 002d 	movw	r0, #8237	; 0x202d
   14a08:	f7ff f8a9 	bl	13b5e <hciCmdAlloc>
   14a0c:	60f8      	str	r0, [r7, #12]
   14a0e:	68fb      	ldr	r3, [r7, #12]
   14a10:	2b00      	cmp	r3, #0
   14a12:	d00a      	beq.n	14a2a <HciLeSetAddrResolutionEnable+0x32>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14a14:	68fb      	ldr	r3, [r7, #12]
   14a16:	3303      	adds	r3, #3
   14a18:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, enable);
   14a1a:	68bb      	ldr	r3, [r7, #8]
   14a1c:	1c5a      	adds	r2, r3, #1
   14a1e:	60ba      	str	r2, [r7, #8]
   14a20:	79fa      	ldrb	r2, [r7, #7]
   14a22:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14a24:	68f8      	ldr	r0, [r7, #12]
   14a26:	f7ff f8c9 	bl	13bbc <hciCmdSend>
  }
}
   14a2a:	bf00      	nop
   14a2c:	3710      	adds	r7, #16
   14a2e:	46bd      	mov	sp, r7
   14a30:	bd80      	pop	{r7, pc}

00014a32 <HciLeSetResolvablePrivateAddrTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciLeSetResolvablePrivateAddrTimeout(uint16_t rpaTimeout)
{
   14a32:	b580      	push	{r7, lr}
   14a34:	b084      	sub	sp, #16
   14a36:	af00      	add	r7, sp, #0
   14a38:	4603      	mov	r3, r0
   14a3a:	80fb      	strh	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_RES_PRIV_ADDR_TO, HCI_LEN_LE_SET_RES_PRIV_ADDR_TO)) != NULL)
   14a3c:	2102      	movs	r1, #2
   14a3e:	f242 002e 	movw	r0, #8238	; 0x202e
   14a42:	f7ff f88c 	bl	13b5e <hciCmdAlloc>
   14a46:	60f8      	str	r0, [r7, #12]
   14a48:	68fb      	ldr	r3, [r7, #12]
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	d013      	beq.n	14a76 <HciLeSetResolvablePrivateAddrTimeout+0x44>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14a4e:	68fb      	ldr	r3, [r7, #12]
   14a50:	3303      	adds	r3, #3
   14a52:	60bb      	str	r3, [r7, #8]
    UINT16_TO_BSTREAM(p, rpaTimeout);
   14a54:	68bb      	ldr	r3, [r7, #8]
   14a56:	1c5a      	adds	r2, r3, #1
   14a58:	60ba      	str	r2, [r7, #8]
   14a5a:	88fa      	ldrh	r2, [r7, #6]
   14a5c:	b2d2      	uxtb	r2, r2
   14a5e:	701a      	strb	r2, [r3, #0]
   14a60:	68bb      	ldr	r3, [r7, #8]
   14a62:	1c5a      	adds	r2, r3, #1
   14a64:	60ba      	str	r2, [r7, #8]
   14a66:	88fa      	ldrh	r2, [r7, #6]
   14a68:	0a12      	lsrs	r2, r2, #8
   14a6a:	b292      	uxth	r2, r2
   14a6c:	b2d2      	uxtb	r2, r2
   14a6e:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14a70:	68f8      	ldr	r0, [r7, #12]
   14a72:	f7ff f8a3 	bl	13bbc <hciCmdSend>
  }
}
   14a76:	bf00      	nop
   14a78:	3710      	adds	r7, #16
   14a7a:	46bd      	mov	sp, r7
   14a7c:	bd80      	pop	{r7, pc}

00014a7e <HciLeSetPrivacyModeCmd>:
 *
 *  \return     None.
 */
/*************************************************************************************************/
void HciLeSetPrivacyModeCmd(uint8_t addrType, uint8_t *pAddr, uint8_t mode)
{
   14a7e:	b580      	push	{r7, lr}
   14a80:	b084      	sub	sp, #16
   14a82:	af00      	add	r7, sp, #0
   14a84:	4603      	mov	r3, r0
   14a86:	6039      	str	r1, [r7, #0]
   14a88:	71fb      	strb	r3, [r7, #7]
   14a8a:	4613      	mov	r3, r2
   14a8c:	71bb      	strb	r3, [r7, #6]
  uint8_t *pBuf;
  uint8_t *p;

  if ((pBuf = hciCmdAlloc(HCI_OPCODE_LE_SET_PRIVACY_MODE, HCI_LEN_LE_SET_PRIVACY_MODE)) != NULL)
   14a8e:	2108      	movs	r1, #8
   14a90:	f242 004e 	movw	r0, #8270	; 0x204e
   14a94:	f7ff f863 	bl	13b5e <hciCmdAlloc>
   14a98:	60f8      	str	r0, [r7, #12]
   14a9a:	68fb      	ldr	r3, [r7, #12]
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d016      	beq.n	14ace <HciLeSetPrivacyModeCmd+0x50>
  {
    p = pBuf + HCI_CMD_HDR_LEN;
   14aa0:	68fb      	ldr	r3, [r7, #12]
   14aa2:	3303      	adds	r3, #3
   14aa4:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, addrType);
   14aa6:	68bb      	ldr	r3, [r7, #8]
   14aa8:	1c5a      	adds	r2, r3, #1
   14aaa:	60ba      	str	r2, [r7, #8]
   14aac:	79fa      	ldrb	r2, [r7, #7]
   14aae:	701a      	strb	r2, [r3, #0]
    BDA_TO_BSTREAM(p, pAddr);
   14ab0:	6839      	ldr	r1, [r7, #0]
   14ab2:	68b8      	ldr	r0, [r7, #8]
   14ab4:	f003 fe98 	bl	187e8 <BdaCpy>
   14ab8:	68bb      	ldr	r3, [r7, #8]
   14aba:	3306      	adds	r3, #6
   14abc:	60bb      	str	r3, [r7, #8]
    UINT8_TO_BSTREAM(p, mode);
   14abe:	68bb      	ldr	r3, [r7, #8]
   14ac0:	1c5a      	adds	r2, r3, #1
   14ac2:	60ba      	str	r2, [r7, #8]
   14ac4:	79ba      	ldrb	r2, [r7, #6]
   14ac6:	701a      	strb	r2, [r3, #0]
    hciCmdSend(pBuf);
   14ac8:	68f8      	ldr	r0, [r7, #12]
   14aca:	f7ff f877 	bl	13bbc <hciCmdSend>
  }
}
   14ace:	bf00      	nop
   14ad0:	3710      	adds	r7, #16
   14ad2:	46bd      	mov	sp, r7
   14ad4:	bd80      	pop	{r7, pc}
	...

00014ad8 <hciCoreConnAlloc>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnAlloc(uint16_t handle)
{
   14ad8:	b480      	push	{r7}
   14ada:	b085      	sub	sp, #20
   14adc:	af00      	add	r7, sp, #0
   14ade:	4603      	mov	r3, r0
   14ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14ae2:	4b13      	ldr	r3, [pc, #76]	; (14b30 <hciCoreConnAlloc+0x58>)
   14ae4:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14ae6:	2308      	movs	r3, #8
   14ae8:	73fb      	strb	r3, [r7, #15]
   14aea:	e018      	b.n	14b1e <hciCoreConnAlloc+0x46>
  {
    if (pConn->handle == HCI_HANDLE_NONE)
   14aec:	68bb      	ldr	r3, [r7, #8]
   14aee:	8a1b      	ldrh	r3, [r3, #16]
   14af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14af4:	4293      	cmp	r3, r2
   14af6:	d10c      	bne.n	14b12 <hciCoreConnAlloc+0x3a>
    {
      /* allocate and initialize */
      pConn->handle = handle;
   14af8:	68bb      	ldr	r3, [r7, #8]
   14afa:	88fa      	ldrh	r2, [r7, #6]
   14afc:	821a      	strh	r2, [r3, #16]
      pConn->flowDisabled = FALSE;
   14afe:	68bb      	ldr	r3, [r7, #8]
   14b00:	2200      	movs	r2, #0
   14b02:	75da      	strb	r2, [r3, #23]
      pConn->outBufs = 0;
   14b04:	68bb      	ldr	r3, [r7, #8]
   14b06:	2200      	movs	r2, #0
   14b08:	765a      	strb	r2, [r3, #25]
      pConn->queuedBufs = 0;
   14b0a:	68bb      	ldr	r3, [r7, #8]
   14b0c:	2200      	movs	r2, #0
   14b0e:	761a      	strb	r2, [r3, #24]

      return;
   14b10:	e008      	b.n	14b24 <hciCoreConnAlloc+0x4c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14b12:	7bfb      	ldrb	r3, [r7, #15]
   14b14:	3b01      	subs	r3, #1
   14b16:	73fb      	strb	r3, [r7, #15]
   14b18:	68bb      	ldr	r3, [r7, #8]
   14b1a:	331c      	adds	r3, #28
   14b1c:	60bb      	str	r3, [r7, #8]
   14b1e:	7bfb      	ldrb	r3, [r7, #15]
   14b20:	2b00      	cmp	r3, #0
   14b22:	d1e3      	bne.n	14aec <hciCoreConnAlloc+0x14>
    }
  }

  HCI_TRACE_WARN0("HCI conn struct alloc failure");
}
   14b24:	3714      	adds	r7, #20
   14b26:	46bd      	mov	sp, r7
   14b28:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b2c:	4770      	bx	lr
   14b2e:	bf00      	nop
   14b30:	10006424 	.word	0x10006424

00014b34 <hciCoreConnFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreConnFree(uint16_t handle)
{
   14b34:	b580      	push	{r7, lr}
   14b36:	b084      	sub	sp, #16
   14b38:	af00      	add	r7, sp, #0
   14b3a:	4603      	mov	r3, r0
   14b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14b3e:	4b1d      	ldr	r3, [pc, #116]	; (14bb4 <hciCoreConnFree+0x80>)
   14b40:	60bb      	str	r3, [r7, #8]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14b42:	2308      	movs	r3, #8
   14b44:	73fb      	strb	r3, [r7, #15]
   14b46:	e02f      	b.n	14ba8 <hciCoreConnFree+0x74>
  {
    if (pConn->handle == handle)
   14b48:	68bb      	ldr	r3, [r7, #8]
   14b4a:	8a1b      	ldrh	r3, [r3, #16]
   14b4c:	88fa      	ldrh	r2, [r7, #6]
   14b4e:	429a      	cmp	r2, r3
   14b50:	d124      	bne.n	14b9c <hciCoreConnFree+0x68>
    {
      /* free any fragmenting ACL packet */
      if (pConn->pTxAclPkt != NULL)
   14b52:	68bb      	ldr	r3, [r7, #8]
   14b54:	681b      	ldr	r3, [r3, #0]
   14b56:	2b00      	cmp	r3, #0
   14b58:	d007      	beq.n	14b6a <hciCoreConnFree+0x36>
      {
        WsfMsgFree(pConn->pTxAclPkt);
   14b5a:	68bb      	ldr	r3, [r7, #8]
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	4618      	mov	r0, r3
   14b60:	f002 ff96 	bl	17a90 <WsfMsgFree>
        pConn->pTxAclPkt = NULL;
   14b64:	68bb      	ldr	r3, [r7, #8]
   14b66:	2200      	movs	r2, #0
   14b68:	601a      	str	r2, [r3, #0]
      }
      pConn->fragmenting = FALSE;
   14b6a:	68bb      	ldr	r3, [r7, #8]
   14b6c:	2200      	movs	r2, #0
   14b6e:	759a      	strb	r2, [r3, #22]

      if (pConn->pRxAclPkt != NULL)
   14b70:	68bb      	ldr	r3, [r7, #8]
   14b72:	689b      	ldr	r3, [r3, #8]
   14b74:	2b00      	cmp	r3, #0
   14b76:	d007      	beq.n	14b88 <hciCoreConnFree+0x54>
      {
        WsfMsgFree(pConn->pRxAclPkt);
   14b78:	68bb      	ldr	r3, [r7, #8]
   14b7a:	689b      	ldr	r3, [r3, #8]
   14b7c:	4618      	mov	r0, r3
   14b7e:	f002 ff87 	bl	17a90 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   14b82:	68bb      	ldr	r3, [r7, #8]
   14b84:	2200      	movs	r2, #0
   14b86:	609a      	str	r2, [r3, #8]
      }

      /* free structure */
      pConn->handle = HCI_HANDLE_NONE;
   14b88:	68bb      	ldr	r3, [r7, #8]
   14b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14b8e:	821a      	strh	r2, [r3, #16]

      /* optional: iterate through tx ACL queue and free any buffers with this handle */

      /* outstanding buffers are now available; service TX data path */
      hciCoreTxReady(pConn->outBufs);
   14b90:	68bb      	ldr	r3, [r7, #8]
   14b92:	7e5b      	ldrb	r3, [r3, #25]
   14b94:	4618      	mov	r0, r3
   14b96:	f000 f895 	bl	14cc4 <hciCoreTxReady>

      return;
   14b9a:	e008      	b.n	14bae <hciCoreConnFree+0x7a>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14b9c:	7bfb      	ldrb	r3, [r7, #15]
   14b9e:	3b01      	subs	r3, #1
   14ba0:	73fb      	strb	r3, [r7, #15]
   14ba2:	68bb      	ldr	r3, [r7, #8]
   14ba4:	331c      	adds	r3, #28
   14ba6:	60bb      	str	r3, [r7, #8]
   14ba8:	7bfb      	ldrb	r3, [r7, #15]
   14baa:	2b00      	cmp	r3, #0
   14bac:	d1cc      	bne.n	14b48 <hciCoreConnFree+0x14>
    }
  }

  HCI_TRACE_WARN1("hciCoreConnFree handle not found:%u", handle);
}
   14bae:	3710      	adds	r7, #16
   14bb0:	46bd      	mov	sp, r7
   14bb2:	bd80      	pop	{r7, pc}
   14bb4:	10006424 	.word	0x10006424

00014bb8 <hciCoreConnByHandle>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
hciCoreConn_t *hciCoreConnByHandle(uint16_t handle)
{
   14bb8:	b480      	push	{r7}
   14bba:	b085      	sub	sp, #20
   14bbc:	af00      	add	r7, sp, #0
   14bbe:	4603      	mov	r3, r0
   14bc0:	80fb      	strh	r3, [r7, #6]
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14bc2:	4b0e      	ldr	r3, [pc, #56]	; (14bfc <hciCoreConnByHandle+0x44>)
   14bc4:	60bb      	str	r3, [r7, #8]

  /* find available connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14bc6:	2308      	movs	r3, #8
   14bc8:	73fb      	strb	r3, [r7, #15]
   14bca:	e00c      	b.n	14be6 <hciCoreConnByHandle+0x2e>
  {
    if (pConn->handle == handle)
   14bcc:	68bb      	ldr	r3, [r7, #8]
   14bce:	8a1b      	ldrh	r3, [r3, #16]
   14bd0:	88fa      	ldrh	r2, [r7, #6]
   14bd2:	429a      	cmp	r2, r3
   14bd4:	d101      	bne.n	14bda <hciCoreConnByHandle+0x22>
    {
      return pConn;
   14bd6:	68bb      	ldr	r3, [r7, #8]
   14bd8:	e009      	b.n	14bee <hciCoreConnByHandle+0x36>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14bda:	7bfb      	ldrb	r3, [r7, #15]
   14bdc:	3b01      	subs	r3, #1
   14bde:	73fb      	strb	r3, [r7, #15]
   14be0:	68bb      	ldr	r3, [r7, #8]
   14be2:	331c      	adds	r3, #28
   14be4:	60bb      	str	r3, [r7, #8]
   14be6:	7bfb      	ldrb	r3, [r7, #15]
   14be8:	2b00      	cmp	r3, #0
   14bea:	d1ef      	bne.n	14bcc <hciCoreConnByHandle+0x14>
    }
  }

  return NULL;
   14bec:	2300      	movs	r3, #0
}
   14bee:	4618      	mov	r0, r3
   14bf0:	3714      	adds	r7, #20
   14bf2:	46bd      	mov	sp, r7
   14bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
   14bf8:	4770      	bx	lr
   14bfa:	bf00      	nop
   14bfc:	10006424 	.word	0x10006424

00014c00 <hciCoreNextConnFragment>:
 *
 *  \return Pointer to connection structure or NULL if not found.
 */
/*************************************************************************************************/
static hciCoreConn_t *hciCoreNextConnFragment(void)
{
   14c00:	b480      	push	{r7}
   14c02:	b083      	sub	sp, #12
   14c04:	af00      	add	r7, sp, #0
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   14c06:	4b10      	ldr	r3, [pc, #64]	; (14c48 <hciCoreNextConnFragment+0x48>)
   14c08:	603b      	str	r3, [r7, #0]

  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14c0a:	2308      	movs	r3, #8
   14c0c:	71fb      	strb	r3, [r7, #7]
   14c0e:	e011      	b.n	14c34 <hciCoreNextConnFragment+0x34>
  {
    if (pConn->handle != HCI_HANDLE_NONE && pConn->fragmenting)
   14c10:	683b      	ldr	r3, [r7, #0]
   14c12:	8a1b      	ldrh	r3, [r3, #16]
   14c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14c18:	4293      	cmp	r3, r2
   14c1a:	d005      	beq.n	14c28 <hciCoreNextConnFragment+0x28>
   14c1c:	683b      	ldr	r3, [r7, #0]
   14c1e:	7d9b      	ldrb	r3, [r3, #22]
   14c20:	2b00      	cmp	r3, #0
   14c22:	d001      	beq.n	14c28 <hciCoreNextConnFragment+0x28>
    {
      return pConn;
   14c24:	683b      	ldr	r3, [r7, #0]
   14c26:	e009      	b.n	14c3c <hciCoreNextConnFragment+0x3c>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   14c28:	79fb      	ldrb	r3, [r7, #7]
   14c2a:	3b01      	subs	r3, #1
   14c2c:	71fb      	strb	r3, [r7, #7]
   14c2e:	683b      	ldr	r3, [r7, #0]
   14c30:	331c      	adds	r3, #28
   14c32:	603b      	str	r3, [r7, #0]
   14c34:	79fb      	ldrb	r3, [r7, #7]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d1ea      	bne.n	14c10 <hciCoreNextConnFragment+0x10>
    }
  }

  return NULL;
   14c3a:	2300      	movs	r3, #0
}
   14c3c:	4618      	mov	r0, r3
   14c3e:	370c      	adds	r7, #12
   14c40:	46bd      	mov	sp, r7
   14c42:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c46:	4770      	bx	lr
   14c48:	10006424 	.word	0x10006424

00014c4c <hciCoreConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnOpen(uint16_t handle)
{
   14c4c:	b580      	push	{r7, lr}
   14c4e:	b082      	sub	sp, #8
   14c50:	af00      	add	r7, sp, #0
   14c52:	4603      	mov	r3, r0
   14c54:	80fb      	strh	r3, [r7, #6]
  /* allocate connection structure */
  hciCoreConnAlloc(handle);
   14c56:	88fb      	ldrh	r3, [r7, #6]
   14c58:	4618      	mov	r0, r3
   14c5a:	f7ff ff3d 	bl	14ad8 <hciCoreConnAlloc>
}
   14c5e:	bf00      	nop
   14c60:	3708      	adds	r7, #8
   14c62:	46bd      	mov	sp, r7
   14c64:	bd80      	pop	{r7, pc}

00014c66 <hciCoreConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreConnClose(uint16_t handle)
{
   14c66:	b580      	push	{r7, lr}
   14c68:	b082      	sub	sp, #8
   14c6a:	af00      	add	r7, sp, #0
   14c6c:	4603      	mov	r3, r0
   14c6e:	80fb      	strh	r3, [r7, #6]
  /* free connection structure */
  hciCoreConnFree(handle);
   14c70:	88fb      	ldrh	r3, [r7, #6]
   14c72:	4618      	mov	r0, r3
   14c74:	f7ff ff5e 	bl	14b34 <hciCoreConnFree>
}
   14c78:	bf00      	nop
   14c7a:	3708      	adds	r7, #8
   14c7c:	46bd      	mov	sp, r7
   14c7e:	bd80      	pop	{r7, pc}

00014c80 <hciCoreSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreSendAclData(hciCoreConn_t *pConn, uint8_t *pData)
{
   14c80:	b580      	push	{r7, lr}
   14c82:	b082      	sub	sp, #8
   14c84:	af00      	add	r7, sp, #0
   14c86:	6078      	str	r0, [r7, #4]
   14c88:	6039      	str	r1, [r7, #0]
  /* increment outstanding buf count for handle */
  pConn->outBufs++;
   14c8a:	687b      	ldr	r3, [r7, #4]
   14c8c:	7e5b      	ldrb	r3, [r3, #25]
   14c8e:	3301      	adds	r3, #1
   14c90:	b2da      	uxtb	r2, r3
   14c92:	687b      	ldr	r3, [r7, #4]
   14c94:	765a      	strb	r2, [r3, #25]

  /* send to transport */
  hciTrSendAclData(pConn, pData);
   14c96:	6839      	ldr	r1, [r7, #0]
   14c98:	6878      	ldr	r0, [r7, #4]
   14c9a:	f002 fa47 	bl	1712c <hciTrSendAclData>

  /* decrement available buffer count */
  if (hciCoreCb.availBufs > 0)
   14c9e:	4b08      	ldr	r3, [pc, #32]	; (14cc0 <hciCoreSendAclData+0x40>)
   14ca0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	d007      	beq.n	14cb8 <hciCoreSendAclData+0x38>
  {
    hciCoreCb.availBufs--;
   14ca8:	4b05      	ldr	r3, [pc, #20]	; (14cc0 <hciCoreSendAclData+0x40>)
   14caa:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14cae:	3b01      	subs	r3, #1
   14cb0:	b2da      	uxtb	r2, r3
   14cb2:	4b03      	ldr	r3, [pc, #12]	; (14cc0 <hciCoreSendAclData+0x40>)
   14cb4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
  }
  else
  {
    HCI_TRACE_WARN0("hciCoreSendAclData availBufs=0");
  }
}
   14cb8:	bf00      	nop
   14cba:	3708      	adds	r7, #8
   14cbc:	46bd      	mov	sp, r7
   14cbe:	bd80      	pop	{r7, pc}
   14cc0:	10006424 	.word	0x10006424

00014cc4 <hciCoreTxReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxReady(uint8_t bufs)
{
   14cc4:	b580      	push	{r7, lr}
   14cc6:	b086      	sub	sp, #24
   14cc8:	af00      	add	r7, sp, #0
   14cca:	4603      	mov	r3, r0
   14ccc:	71fb      	strb	r3, [r7, #7]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* increment available buffers, with ceiling */
  if (bufs > 0)
   14cce:	79fb      	ldrb	r3, [r7, #7]
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d050      	beq.n	14d76 <hciCoreTxReady+0xb2>
  {
    hciCoreCb.availBufs += bufs;
   14cd4:	4b2d      	ldr	r3, [pc, #180]	; (14d8c <hciCoreTxReady+0xc8>)
   14cd6:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   14cda:	79fb      	ldrb	r3, [r7, #7]
   14cdc:	4413      	add	r3, r2
   14cde:	b2da      	uxtb	r2, r3
   14ce0:	4b2a      	ldr	r3, [pc, #168]	; (14d8c <hciCoreTxReady+0xc8>)
   14ce2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    if (hciCoreCb.availBufs > hciCoreCb.numBufs)
   14ce6:	4b29      	ldr	r3, [pc, #164]	; (14d8c <hciCoreTxReady+0xc8>)
   14ce8:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
   14cec:	4b27      	ldr	r3, [pc, #156]	; (14d8c <hciCoreTxReady+0xc8>)
   14cee:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   14cf2:	429a      	cmp	r2, r3
   14cf4:	d93f      	bls.n	14d76 <hciCoreTxReady+0xb2>
    {
      hciCoreCb.availBufs = hciCoreCb.numBufs;
   14cf6:	4b25      	ldr	r3, [pc, #148]	; (14d8c <hciCoreTxReady+0xc8>)
   14cf8:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   14cfc:	4b23      	ldr	r3, [pc, #140]	; (14d8c <hciCoreTxReady+0xc8>)
   14cfe:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
  }

  /* service ACL data queue and send as many buffers as we can */
  while (hciCoreCb.availBufs > 0)
   14d02:	e038      	b.n	14d76 <hciCoreTxReady+0xb2>
  {
    /* send continuation of any fragments first */
    if (hciCoreTxAclContinue(NULL) == FALSE)
   14d04:	2000      	movs	r0, #0
   14d06:	f000 f88d 	bl	14e24 <hciCoreTxAclContinue>
   14d0a:	4603      	mov	r3, r0
   14d0c:	2b00      	cmp	r3, #0
   14d0e:	d132      	bne.n	14d76 <hciCoreTxReady+0xb2>
    {
      /* if no fragments then check for any queued ACL data */
      if ((pData = WsfMsgDeq(&hciCoreCb.aclQueue, &handlerId)) != NULL)
   14d10:	f107 030b 	add.w	r3, r7, #11
   14d14:	4619      	mov	r1, r3
   14d16:	481e      	ldr	r0, [pc, #120]	; (14d90 <hciCoreTxReady+0xcc>)
   14d18:	f002 fef4 	bl	17b04 <WsfMsgDeq>
   14d1c:	6178      	str	r0, [r7, #20]
   14d1e:	697b      	ldr	r3, [r7, #20]
   14d20:	2b00      	cmp	r3, #0
   14d22:	d02e      	beq.n	14d82 <hciCoreTxReady+0xbe>
      {
        /* parse handle and length */
        BYTES_TO_UINT16(handle, pData);
   14d24:	697b      	ldr	r3, [r7, #20]
   14d26:	781b      	ldrb	r3, [r3, #0]
   14d28:	b29a      	uxth	r2, r3
   14d2a:	697b      	ldr	r3, [r7, #20]
   14d2c:	3301      	adds	r3, #1
   14d2e:	781b      	ldrb	r3, [r3, #0]
   14d30:	b29b      	uxth	r3, r3
   14d32:	021b      	lsls	r3, r3, #8
   14d34:	b29b      	uxth	r3, r3
   14d36:	4413      	add	r3, r2
   14d38:	827b      	strh	r3, [r7, #18]
        BYTES_TO_UINT16(len, &pData[2]);
   14d3a:	697b      	ldr	r3, [r7, #20]
   14d3c:	3302      	adds	r3, #2
   14d3e:	781b      	ldrb	r3, [r3, #0]
   14d40:	b29a      	uxth	r2, r3
   14d42:	697b      	ldr	r3, [r7, #20]
   14d44:	3303      	adds	r3, #3
   14d46:	781b      	ldrb	r3, [r3, #0]
   14d48:	b29b      	uxth	r3, r3
   14d4a:	021b      	lsls	r3, r3, #8
   14d4c:	b29b      	uxth	r3, r3
   14d4e:	4413      	add	r3, r2
   14d50:	823b      	strh	r3, [r7, #16]

        /* look up conn structure and send data */
        if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   14d52:	8a7b      	ldrh	r3, [r7, #18]
   14d54:	4618      	mov	r0, r3
   14d56:	f7ff ff2f 	bl	14bb8 <hciCoreConnByHandle>
   14d5a:	60f8      	str	r0, [r7, #12]
   14d5c:	68fb      	ldr	r3, [r7, #12]
   14d5e:	2b00      	cmp	r3, #0
   14d60:	d006      	beq.n	14d70 <hciCoreTxReady+0xac>
        {
          hciCoreTxAclStart(pConn, len, pData);
   14d62:	8a3b      	ldrh	r3, [r7, #16]
   14d64:	697a      	ldr	r2, [r7, #20]
   14d66:	4619      	mov	r1, r3
   14d68:	68f8      	ldr	r0, [r7, #12]
   14d6a:	f000 f813 	bl	14d94 <hciCoreTxAclStart>
   14d6e:	e002      	b.n	14d76 <hciCoreTxReady+0xb2>
        }
        /* handle not found, connection must be closed */
        else
        {
          /* discard buffer */
          WsfMsgFree(pData);
   14d70:	6978      	ldr	r0, [r7, #20]
   14d72:	f002 fe8d 	bl	17a90 <WsfMsgFree>
  while (hciCoreCb.availBufs > 0)
   14d76:	4b05      	ldr	r3, [pc, #20]	; (14d8c <hciCoreTxReady+0xc8>)
   14d78:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	d1c1      	bne.n	14d04 <hciCoreTxReady+0x40>
        /* no fragments or queued data to send; we're done */
        break;
      }
    }
  }
}
   14d80:	e000      	b.n	14d84 <hciCoreTxReady+0xc0>
        break;
   14d82:	bf00      	nop
}
   14d84:	bf00      	nop
   14d86:	3718      	adds	r7, #24
   14d88:	46bd      	mov	sp, r7
   14d8a:	bd80      	pop	{r7, pc}
   14d8c:	10006424 	.word	0x10006424
   14d90:	10006514 	.word	0x10006514

00014d94 <hciCoreTxAclStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclStart(hciCoreConn_t *pConn, uint16_t len, uint8_t *pData)
{
   14d94:	b580      	push	{r7, lr}
   14d96:	b086      	sub	sp, #24
   14d98:	af00      	add	r7, sp, #0
   14d9a:	60f8      	str	r0, [r7, #12]
   14d9c:	460b      	mov	r3, r1
   14d9e:	607a      	str	r2, [r7, #4]
   14da0:	817b      	strh	r3, [r7, #10]
  uint16_t hciLen;

  /* make sure not already fragmenting on this connection */
  WSF_ASSERT(pConn->fragmenting == FALSE);

  hciLen = HciGetBufSize();
   14da2:	f000 fb85 	bl	154b0 <HciGetBufSize>
   14da6:	4603      	mov	r3, r0
   14da8:	82fb      	strh	r3, [r7, #22]

  HCI_TRACE_INFO1("hciCoreTxAclStart len=%u", len);

  /* if acl len > controller acl buf len */
  if (len > hciLen)
   14daa:	897a      	ldrh	r2, [r7, #10]
   14dac:	8afb      	ldrh	r3, [r7, #22]
   14dae:	429a      	cmp	r2, r3
   14db0:	d92d      	bls.n	14e0e <hciCoreTxAclStart+0x7a>
  {
    /* store remaining acl len = acl len - hci acl buf len */
    pConn->txAclRemLen = len - hciLen;
   14db2:	897a      	ldrh	r2, [r7, #10]
   14db4:	8afb      	ldrh	r3, [r7, #22]
   14db6:	1ad3      	subs	r3, r2, r3
   14db8:	b29a      	uxth	r2, r3
   14dba:	68fb      	ldr	r3, [r7, #12]
   14dbc:	825a      	strh	r2, [r3, #18]

    /* store position for next fragment */
    pConn->pNextTxFrag = pData + hciLen;
   14dbe:	8afb      	ldrh	r3, [r7, #22]
   14dc0:	687a      	ldr	r2, [r7, #4]
   14dc2:	441a      	add	r2, r3
   14dc4:	68fb      	ldr	r3, [r7, #12]
   14dc6:	605a      	str	r2, [r3, #4]

    /* store information required for fragmentation */
    pConn->pTxAclPkt = pData;
   14dc8:	68fb      	ldr	r3, [r7, #12]
   14dca:	687a      	ldr	r2, [r7, #4]
   14dcc:	601a      	str	r2, [r3, #0]
    pConn->fragmenting = TRUE;
   14dce:	68fb      	ldr	r3, [r7, #12]
   14dd0:	2201      	movs	r2, #1
   14dd2:	759a      	strb	r2, [r3, #22]

    /* set acl len in packet to hci acl buf len */
    UINT16_TO_BUF(&pData[2], hciLen);
   14dd4:	687b      	ldr	r3, [r7, #4]
   14dd6:	3302      	adds	r3, #2
   14dd8:	8afa      	ldrh	r2, [r7, #22]
   14dda:	b2d2      	uxtb	r2, r2
   14ddc:	701a      	strb	r2, [r3, #0]
   14dde:	687b      	ldr	r3, [r7, #4]
   14de0:	3303      	adds	r3, #3
   14de2:	8afa      	ldrh	r2, [r7, #22]
   14de4:	0a12      	lsrs	r2, r2, #8
   14de6:	b292      	uxth	r2, r2
   14de8:	b2d2      	uxtb	r2, r2
   14dea:	701a      	strb	r2, [r3, #0]

    /* send the packet */
    hciCoreSendAclData(pConn, pData);
   14dec:	6879      	ldr	r1, [r7, #4]
   14dee:	68f8      	ldr	r0, [r7, #12]
   14df0:	f7ff ff46 	bl	14c80 <hciCoreSendAclData>

    /* send additional fragments while there are HCI buffers available */
    while ((hciCoreCb.availBufs > 0) && hciCoreTxAclContinue(pConn));
   14df4:	bf00      	nop
   14df6:	4b0a      	ldr	r3, [pc, #40]	; (14e20 <hciCoreTxAclStart+0x8c>)
   14df8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   14dfc:	2b00      	cmp	r3, #0
   14dfe:	d00a      	beq.n	14e16 <hciCoreTxAclStart+0x82>
   14e00:	68f8      	ldr	r0, [r7, #12]
   14e02:	f000 f80f 	bl	14e24 <hciCoreTxAclContinue>
   14e06:	4603      	mov	r3, r0
   14e08:	2b00      	cmp	r3, #0
   14e0a:	d1f4      	bne.n	14df6 <hciCoreTxAclStart+0x62>
  else
  {
    /* no fragmentation, just send the packet */
    hciCoreSendAclData(pConn, pData);
  }
}
   14e0c:	e003      	b.n	14e16 <hciCoreTxAclStart+0x82>
    hciCoreSendAclData(pConn, pData);
   14e0e:	6879      	ldr	r1, [r7, #4]
   14e10:	68f8      	ldr	r0, [r7, #12]
   14e12:	f7ff ff35 	bl	14c80 <hciCoreSendAclData>
}
   14e16:	bf00      	nop
   14e18:	3718      	adds	r7, #24
   14e1a:	46bd      	mov	sp, r7
   14e1c:	bd80      	pop	{r7, pc}
   14e1e:	bf00      	nop
   14e20:	10006424 	.word	0x10006424

00014e24 <hciCoreTxAclContinue>:
 *
 *  \return TRUE if packet sent, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t hciCoreTxAclContinue(hciCoreConn_t *pConn)
{
   14e24:	b590      	push	{r4, r7, lr}
   14e26:	b085      	sub	sp, #20
   14e28:	af00      	add	r7, sp, #0
   14e2a:	6078      	str	r0, [r7, #4]
  uint16_t aclLen;

  if (pConn == NULL)
   14e2c:	687b      	ldr	r3, [r7, #4]
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d102      	bne.n	14e38 <hciCoreTxAclContinue+0x14>
  {
    pConn = hciCoreNextConnFragment();
   14e32:	f7ff fee5 	bl	14c00 <hciCoreNextConnFragment>
   14e36:	6078      	str	r0, [r7, #4]
  }

  if (pConn != NULL)
   14e38:	687b      	ldr	r3, [r7, #4]
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	d049      	beq.n	14ed2 <hciCoreTxAclContinue+0xae>
  {
    /* get next fragment length */
    aclLen = (pConn->txAclRemLen < HciGetBufSize()) ? pConn->txAclRemLen : HciGetBufSize();
   14e3e:	687b      	ldr	r3, [r7, #4]
   14e40:	8a5c      	ldrh	r4, [r3, #18]
   14e42:	f000 fb35 	bl	154b0 <HciGetBufSize>
   14e46:	4603      	mov	r3, r0
   14e48:	429c      	cmp	r4, r3
   14e4a:	d202      	bcs.n	14e52 <hciCoreTxAclContinue+0x2e>
   14e4c:	687b      	ldr	r3, [r7, #4]
   14e4e:	8a5b      	ldrh	r3, [r3, #18]
   14e50:	e002      	b.n	14e58 <hciCoreTxAclContinue+0x34>
   14e52:	f000 fb2d 	bl	154b0 <HciGetBufSize>
   14e56:	4603      	mov	r3, r0
   14e58:	81fb      	strh	r3, [r7, #14]

    if (aclLen > 0)
   14e5a:	89fb      	ldrh	r3, [r7, #14]
   14e5c:	2b00      	cmp	r3, #0
   14e5e:	d038      	beq.n	14ed2 <hciCoreTxAclContinue+0xae>
    {
      /* decrement remaining length */
      pConn->txAclRemLen -= aclLen;
   14e60:	687b      	ldr	r3, [r7, #4]
   14e62:	8a5a      	ldrh	r2, [r3, #18]
   14e64:	89fb      	ldrh	r3, [r7, #14]
   14e66:	1ad3      	subs	r3, r2, r3
   14e68:	b29a      	uxth	r2, r3
   14e6a:	687b      	ldr	r3, [r7, #4]
   14e6c:	825a      	strh	r2, [r3, #18]

      /* set handle in packet with continuation bit set */
      UINT16_TO_BUF(pConn->pNextTxFrag, (pConn->handle | HCI_PB_CONTINUE));
   14e6e:	687b      	ldr	r3, [r7, #4]
   14e70:	685b      	ldr	r3, [r3, #4]
   14e72:	687a      	ldr	r2, [r7, #4]
   14e74:	8a12      	ldrh	r2, [r2, #16]
   14e76:	b2d2      	uxtb	r2, r2
   14e78:	701a      	strb	r2, [r3, #0]
   14e7a:	687b      	ldr	r3, [r7, #4]
   14e7c:	685b      	ldr	r3, [r3, #4]
   14e7e:	3301      	adds	r3, #1
   14e80:	687a      	ldr	r2, [r7, #4]
   14e82:	8a12      	ldrh	r2, [r2, #16]
   14e84:	0a12      	lsrs	r2, r2, #8
   14e86:	b292      	uxth	r2, r2
   14e88:	f042 0210 	orr.w	r2, r2, #16
   14e8c:	b292      	uxth	r2, r2
   14e8e:	b2d2      	uxtb	r2, r2
   14e90:	701a      	strb	r2, [r3, #0]

      /* set acl len in packet */
      UINT16_TO_BUF(&(pConn->pNextTxFrag[2]), aclLen);
   14e92:	687b      	ldr	r3, [r7, #4]
   14e94:	685b      	ldr	r3, [r3, #4]
   14e96:	3302      	adds	r3, #2
   14e98:	89fa      	ldrh	r2, [r7, #14]
   14e9a:	b2d2      	uxtb	r2, r2
   14e9c:	701a      	strb	r2, [r3, #0]
   14e9e:	687b      	ldr	r3, [r7, #4]
   14ea0:	685b      	ldr	r3, [r3, #4]
   14ea2:	3303      	adds	r3, #3
   14ea4:	89fa      	ldrh	r2, [r7, #14]
   14ea6:	0a12      	lsrs	r2, r2, #8
   14ea8:	b292      	uxth	r2, r2
   14eaa:	b2d2      	uxtb	r2, r2
   14eac:	701a      	strb	r2, [r3, #0]

      HCI_TRACE_INFO2("hciCoreTxAclContinue aclLen=%u remLen=%u", aclLen, pConn->txAclRemLen);

      /* send the packet */
      hciCoreSendAclData(pConn, pConn->pNextTxFrag);
   14eae:	687b      	ldr	r3, [r7, #4]
   14eb0:	685b      	ldr	r3, [r3, #4]
   14eb2:	4619      	mov	r1, r3
   14eb4:	6878      	ldr	r0, [r7, #4]
   14eb6:	f7ff fee3 	bl	14c80 <hciCoreSendAclData>

      /* set up pointer to next fragment */
      if (pConn->txAclRemLen > 0)
   14eba:	687b      	ldr	r3, [r7, #4]
   14ebc:	8a5b      	ldrh	r3, [r3, #18]
   14ebe:	2b00      	cmp	r3, #0
   14ec0:	d005      	beq.n	14ece <hciCoreTxAclContinue+0xaa>
      {
        pConn->pNextTxFrag += aclLen;
   14ec2:	687b      	ldr	r3, [r7, #4]
   14ec4:	685a      	ldr	r2, [r3, #4]
   14ec6:	89fb      	ldrh	r3, [r7, #14]
   14ec8:	441a      	add	r2, r3
   14eca:	687b      	ldr	r3, [r7, #4]
   14ecc:	605a      	str	r2, [r3, #4]
      }

      return TRUE;
   14ece:	2301      	movs	r3, #1
   14ed0:	e000      	b.n	14ed4 <hciCoreTxAclContinue+0xb0>
    }
  }

  return FALSE;
   14ed2:	2300      	movs	r3, #0
}
   14ed4:	4618      	mov	r0, r3
   14ed6:	3714      	adds	r7, #20
   14ed8:	46bd      	mov	sp, r7
   14eda:	bd90      	pop	{r4, r7, pc}

00014edc <hciCoreTxAclComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreTxAclComplete(hciCoreConn_t *pConn, uint8_t *pData)
{
   14edc:	b580      	push	{r7, lr}
   14ede:	b082      	sub	sp, #8
   14ee0:	af00      	add	r7, sp, #0
   14ee2:	6078      	str	r0, [r7, #4]
   14ee4:	6039      	str	r1, [r7, #0]
  /* if fragmenting */
  if (pConn->fragmenting)
   14ee6:	687b      	ldr	r3, [r7, #4]
   14ee8:	7d9b      	ldrb	r3, [r3, #22]
   14eea:	2b00      	cmp	r3, #0
   14eec:	d00f      	beq.n	14f0e <hciCoreTxAclComplete+0x32>
  {
    /* check if all fragments sent */
    if (pConn->txAclRemLen == 0)
   14eee:	687b      	ldr	r3, [r7, #4]
   14ef0:	8a5b      	ldrh	r3, [r3, #18]
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	d111      	bne.n	14f1a <hciCoreTxAclComplete+0x3e>
    {
      /* free original buffer */
      WsfMsgFree(pConn->pTxAclPkt);
   14ef6:	687b      	ldr	r3, [r7, #4]
   14ef8:	681b      	ldr	r3, [r3, #0]
   14efa:	4618      	mov	r0, r3
   14efc:	f002 fdc8 	bl	17a90 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   14f00:	687b      	ldr	r3, [r7, #4]
   14f02:	2200      	movs	r2, #0
   14f04:	601a      	str	r2, [r3, #0]
      pConn->fragmenting = FALSE;
   14f06:	687b      	ldr	r3, [r7, #4]
   14f08:	2200      	movs	r2, #0
   14f0a:	759a      	strb	r2, [r3, #22]
  }
  else if (pData != NULL)
  {
    WsfMsgFree(pData);
  }
}
   14f0c:	e005      	b.n	14f1a <hciCoreTxAclComplete+0x3e>
  else if (pData != NULL)
   14f0e:	683b      	ldr	r3, [r7, #0]
   14f10:	2b00      	cmp	r3, #0
   14f12:	d002      	beq.n	14f1a <hciCoreTxAclComplete+0x3e>
    WsfMsgFree(pData);
   14f14:	6838      	ldr	r0, [r7, #0]
   14f16:	f002 fdbb 	bl	17a90 <WsfMsgFree>
}
   14f1a:	bf00      	nop
   14f1c:	3708      	adds	r7, #8
   14f1e:	46bd      	mov	sp, r7
   14f20:	bd80      	pop	{r7, pc}
	...

00014f24 <hciCoreAclReassembly>:
 *
 *  \return pointer to ACL packet to send, or NULL if no packet to send.
 */
/*************************************************************************************************/
uint8_t *hciCoreAclReassembly(uint8_t *pData)
{
   14f24:	b580      	push	{r7, lr}
   14f26:	b088      	sub	sp, #32
   14f28:	af00      	add	r7, sp, #0
   14f2a:	6078      	str	r0, [r7, #4]
  hciCoreConn_t *pConn;
  uint8_t       *pDataRtn = NULL;
   14f2c:	2300      	movs	r3, #0
   14f2e:	61fb      	str	r3, [r7, #28]
  uint16_t      handle;
  uint16_t      aclLen;
  uint16_t      l2cLen;
  uint16_t      pbf;
  bool_t        freeData = TRUE;
   14f30:	2301      	movs	r3, #1
   14f32:	76fb      	strb	r3, [r7, #27]

  BYTES_TO_UINT16(handle, pData);
   14f34:	687b      	ldr	r3, [r7, #4]
   14f36:	781b      	ldrb	r3, [r3, #0]
   14f38:	b29a      	uxth	r2, r3
   14f3a:	687b      	ldr	r3, [r7, #4]
   14f3c:	3301      	adds	r3, #1
   14f3e:	781b      	ldrb	r3, [r3, #0]
   14f40:	b29b      	uxth	r3, r3
   14f42:	021b      	lsls	r3, r3, #8
   14f44:	b29b      	uxth	r3, r3
   14f46:	4413      	add	r3, r2
   14f48:	833b      	strh	r3, [r7, #24]
  pbf = handle & HCI_PB_FLAG_MASK;
   14f4a:	8b3b      	ldrh	r3, [r7, #24]
   14f4c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   14f50:	82fb      	strh	r3, [r7, #22]
  handle &= HCI_HANDLE_MASK;
   14f52:	8b3b      	ldrh	r3, [r7, #24]
   14f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
   14f58:	833b      	strh	r3, [r7, #24]
  BYTES_TO_UINT16(aclLen, &pData[2]);
   14f5a:	687b      	ldr	r3, [r7, #4]
   14f5c:	3302      	adds	r3, #2
   14f5e:	781b      	ldrb	r3, [r3, #0]
   14f60:	b29a      	uxth	r2, r3
   14f62:	687b      	ldr	r3, [r7, #4]
   14f64:	3303      	adds	r3, #3
   14f66:	781b      	ldrb	r3, [r3, #0]
   14f68:	b29b      	uxth	r3, r3
   14f6a:	021b      	lsls	r3, r3, #8
   14f6c:	b29b      	uxth	r3, r3
   14f6e:	4413      	add	r3, r2
   14f70:	82bb      	strh	r3, [r7, #20]

  /* look up connection */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   14f72:	8b3b      	ldrh	r3, [r7, #24]
   14f74:	4618      	mov	r0, r3
   14f76:	f7ff fe1f 	bl	14bb8 <hciCoreConnByHandle>
   14f7a:	6138      	str	r0, [r7, #16]
   14f7c:	693b      	ldr	r3, [r7, #16]
   14f7e:	2b00      	cmp	r3, #0
   14f80:	f000 80ad 	beq.w	150de <hciCoreAclReassembly+0x1ba>
  {
    /* if this is a start packet */
    if (pbf == HCI_PB_START_C2H)
   14f84:	8afb      	ldrh	r3, [r7, #22]
   14f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   14f8a:	d17c      	bne.n	15086 <hciCoreAclReassembly+0x162>
    {
      /* if currently reassembled packet not complete */
      if (pConn->pRxAclPkt != NULL)
   14f8c:	693b      	ldr	r3, [r7, #16]
   14f8e:	689b      	ldr	r3, [r3, #8]
   14f90:	2b00      	cmp	r3, #0
   14f92:	d007      	beq.n	14fa4 <hciCoreAclReassembly+0x80>
      {
        /* discard currently reassembled packet */
        WsfMsgFree(pConn->pRxAclPkt);
   14f94:	693b      	ldr	r3, [r7, #16]
   14f96:	689b      	ldr	r3, [r3, #8]
   14f98:	4618      	mov	r0, r3
   14f9a:	f002 fd79 	bl	17a90 <WsfMsgFree>
        pConn->pRxAclPkt = NULL;
   14f9e:	693b      	ldr	r3, [r7, #16]
   14fa0:	2200      	movs	r2, #0
   14fa2:	609a      	str	r2, [r3, #8]
        HCI_TRACE_WARN1("disarded hci rx pkt handle=0x%04x", handle);
      }

      /* read l2cap length */
      if (aclLen >= L2C_HDR_LEN)
   14fa4:	8abb      	ldrh	r3, [r7, #20]
   14fa6:	2b03      	cmp	r3, #3
   14fa8:	f240 8099 	bls.w	150de <hciCoreAclReassembly+0x1ba>
      {
        BYTES_TO_UINT16(l2cLen, &pData[4]);
   14fac:	687b      	ldr	r3, [r7, #4]
   14fae:	3304      	adds	r3, #4
   14fb0:	781b      	ldrb	r3, [r3, #0]
   14fb2:	b29a      	uxth	r2, r3
   14fb4:	687b      	ldr	r3, [r7, #4]
   14fb6:	3305      	adds	r3, #5
   14fb8:	781b      	ldrb	r3, [r3, #0]
   14fba:	b29b      	uxth	r3, r3
   14fbc:	021b      	lsls	r3, r3, #8
   14fbe:	b29b      	uxth	r3, r3
   14fc0:	4413      	add	r3, r2
   14fc2:	81fb      	strh	r3, [r7, #14]

        /* check length vs. configured maximum */
        if ((l2cLen + L2C_HDR_LEN) > hciCoreCb.maxRxAclLen)
   14fc4:	89fb      	ldrh	r3, [r7, #14]
   14fc6:	3304      	adds	r3, #4
   14fc8:	4a4a      	ldr	r2, [pc, #296]	; (150f4 <hciCoreAclReassembly+0x1d0>)
   14fca:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
   14fce:	4293      	cmp	r3, r2
   14fd0:	f300 8085 	bgt.w	150de <hciCoreAclReassembly+0x1ba>
        {
          HCI_TRACE_WARN1("l2c len=0x%04x to large for reassembly", l2cLen);
        }
        /* if reassembly required */
        else if ((l2cLen + L2C_HDR_LEN) > aclLen)
   14fd4:	89fb      	ldrh	r3, [r7, #14]
   14fd6:	1d1a      	adds	r2, r3, #4
   14fd8:	8abb      	ldrh	r3, [r7, #20]
   14fda:	429a      	cmp	r2, r3
   14fdc:	dd4e      	ble.n	1507c <hciCoreAclReassembly+0x158>
        {
          /* allocate buffer to store complete l2cap packet */
          if ((pConn->pRxAclPkt = WsfMsgDataAlloc(l2cLen + L2C_HDR_LEN + HCI_ACL_HDR_LEN, 0)) != NULL)
   14fde:	89fb      	ldrh	r3, [r7, #14]
   14fe0:	3308      	adds	r3, #8
   14fe2:	b29b      	uxth	r3, r3
   14fe4:	2100      	movs	r1, #0
   14fe6:	4618      	mov	r0, r3
   14fe8:	f002 fd26 	bl	17a38 <WsfMsgDataAlloc>
   14fec:	4602      	mov	r2, r0
   14fee:	693b      	ldr	r3, [r7, #16]
   14ff0:	609a      	str	r2, [r3, #8]
   14ff2:	693b      	ldr	r3, [r7, #16]
   14ff4:	689b      	ldr	r3, [r3, #8]
   14ff6:	2b00      	cmp	r3, #0
   14ff8:	d071      	beq.n	150de <hciCoreAclReassembly+0x1ba>
          {
            /* store buffer for reassembly */
            pConn->pNextRxFrag = pConn->pRxAclPkt;
   14ffa:	693b      	ldr	r3, [r7, #16]
   14ffc:	689a      	ldr	r2, [r3, #8]
   14ffe:	693b      	ldr	r3, [r7, #16]
   15000:	60da      	str	r2, [r3, #12]

            /* build acl header and copy data */
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, handle);
   15002:	693b      	ldr	r3, [r7, #16]
   15004:	68db      	ldr	r3, [r3, #12]
   15006:	1c59      	adds	r1, r3, #1
   15008:	693a      	ldr	r2, [r7, #16]
   1500a:	60d1      	str	r1, [r2, #12]
   1500c:	8b3a      	ldrh	r2, [r7, #24]
   1500e:	b2d2      	uxtb	r2, r2
   15010:	701a      	strb	r2, [r3, #0]
   15012:	693b      	ldr	r3, [r7, #16]
   15014:	68db      	ldr	r3, [r3, #12]
   15016:	1c59      	adds	r1, r3, #1
   15018:	693a      	ldr	r2, [r7, #16]
   1501a:	60d1      	str	r1, [r2, #12]
   1501c:	8b3a      	ldrh	r2, [r7, #24]
   1501e:	0a12      	lsrs	r2, r2, #8
   15020:	b292      	uxth	r2, r2
   15022:	b2d2      	uxtb	r2, r2
   15024:	701a      	strb	r2, [r3, #0]
            UINT16_TO_BSTREAM(pConn->pNextRxFrag, l2cLen + L2C_HDR_LEN);
   15026:	693b      	ldr	r3, [r7, #16]
   15028:	68db      	ldr	r3, [r3, #12]
   1502a:	1c59      	adds	r1, r3, #1
   1502c:	693a      	ldr	r2, [r7, #16]
   1502e:	60d1      	str	r1, [r2, #12]
   15030:	89fa      	ldrh	r2, [r7, #14]
   15032:	b2d2      	uxtb	r2, r2
   15034:	3204      	adds	r2, #4
   15036:	b2d2      	uxtb	r2, r2
   15038:	701a      	strb	r2, [r3, #0]
   1503a:	693b      	ldr	r3, [r7, #16]
   1503c:	68db      	ldr	r3, [r3, #12]
   1503e:	1c59      	adds	r1, r3, #1
   15040:	693a      	ldr	r2, [r7, #16]
   15042:	60d1      	str	r1, [r2, #12]
   15044:	89fa      	ldrh	r2, [r7, #14]
   15046:	3204      	adds	r2, #4
   15048:	1212      	asrs	r2, r2, #8
   1504a:	b2d2      	uxtb	r2, r2
   1504c:	701a      	strb	r2, [r3, #0]
            memcpy(pConn->pNextRxFrag, &pData[4], aclLen);
   1504e:	693b      	ldr	r3, [r7, #16]
   15050:	68d8      	ldr	r0, [r3, #12]
   15052:	687b      	ldr	r3, [r7, #4]
   15054:	3304      	adds	r3, #4
   15056:	8aba      	ldrh	r2, [r7, #20]
   15058:	4619      	mov	r1, r3
   1505a:	f7f7 f881 	bl	c160 <memcpy>
            pConn->pNextRxFrag += aclLen;
   1505e:	693b      	ldr	r3, [r7, #16]
   15060:	68da      	ldr	r2, [r3, #12]
   15062:	8abb      	ldrh	r3, [r7, #20]
   15064:	441a      	add	r2, r3
   15066:	693b      	ldr	r3, [r7, #16]
   15068:	60da      	str	r2, [r3, #12]

            /* store remaining length */
            pConn->rxAclRemLen = l2cLen + L2C_HDR_LEN - aclLen;
   1506a:	89fa      	ldrh	r2, [r7, #14]
   1506c:	8abb      	ldrh	r3, [r7, #20]
   1506e:	1ad3      	subs	r3, r2, r3
   15070:	b29b      	uxth	r3, r3
   15072:	3304      	adds	r3, #4
   15074:	b29a      	uxth	r2, r3
   15076:	693b      	ldr	r3, [r7, #16]
   15078:	829a      	strh	r2, [r3, #20]
   1507a:	e030      	b.n	150de <hciCoreAclReassembly+0x1ba>
          }
        }
        else
        {
          /* no reassembly required, pData is ready to go */
          pDataRtn = pData;
   1507c:	687b      	ldr	r3, [r7, #4]
   1507e:	61fb      	str	r3, [r7, #28]
          freeData = FALSE;
   15080:	2300      	movs	r3, #0
   15082:	76fb      	strb	r3, [r7, #27]
   15084:	e02b      	b.n	150de <hciCoreAclReassembly+0x1ba>
        /* invalid l2cap packet; discard */
        HCI_TRACE_WARN1("invalid l2c pkt aclLen=%u", aclLen);
      }
    }
    /* else if this is a continuation packet */
    else if (pbf == HCI_PB_CONTINUE)
   15086:	8afb      	ldrh	r3, [r7, #22]
   15088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1508c:	d127      	bne.n	150de <hciCoreAclReassembly+0x1ba>
    {
      /* if expecting a continuation */
      if (pConn->pRxAclPkt != NULL)
   1508e:	693b      	ldr	r3, [r7, #16]
   15090:	689b      	ldr	r3, [r3, #8]
   15092:	2b00      	cmp	r3, #0
   15094:	d023      	beq.n	150de <hciCoreAclReassembly+0x1ba>
      {
        if (aclLen <= pConn->rxAclRemLen)
   15096:	693b      	ldr	r3, [r7, #16]
   15098:	8a9b      	ldrh	r3, [r3, #20]
   1509a:	8aba      	ldrh	r2, [r7, #20]
   1509c:	429a      	cmp	r2, r3
   1509e:	d81e      	bhi.n	150de <hciCoreAclReassembly+0x1ba>
        {
          /* copy data to start of next fragment */
          memcpy(pConn->pNextRxFrag, &pData[HCI_ACL_HDR_LEN], aclLen);
   150a0:	693b      	ldr	r3, [r7, #16]
   150a2:	68d8      	ldr	r0, [r3, #12]
   150a4:	687b      	ldr	r3, [r7, #4]
   150a6:	3304      	adds	r3, #4
   150a8:	8aba      	ldrh	r2, [r7, #20]
   150aa:	4619      	mov	r1, r3
   150ac:	f7f7 f858 	bl	c160 <memcpy>
          pConn->pNextRxFrag += aclLen;
   150b0:	693b      	ldr	r3, [r7, #16]
   150b2:	68da      	ldr	r2, [r3, #12]
   150b4:	8abb      	ldrh	r3, [r7, #20]
   150b6:	441a      	add	r2, r3
   150b8:	693b      	ldr	r3, [r7, #16]
   150ba:	60da      	str	r2, [r3, #12]

          /* update remaining length */
          pConn->rxAclRemLen -= aclLen;
   150bc:	693b      	ldr	r3, [r7, #16]
   150be:	8a9a      	ldrh	r2, [r3, #20]
   150c0:	8abb      	ldrh	r3, [r7, #20]
   150c2:	1ad3      	subs	r3, r2, r3
   150c4:	b29a      	uxth	r2, r3
   150c6:	693b      	ldr	r3, [r7, #16]
   150c8:	829a      	strh	r2, [r3, #20]

          /* if reassembly complete return reassembled packet */
          if (pConn->rxAclRemLen == 0)
   150ca:	693b      	ldr	r3, [r7, #16]
   150cc:	8a9b      	ldrh	r3, [r3, #20]
   150ce:	2b00      	cmp	r3, #0
   150d0:	d105      	bne.n	150de <hciCoreAclReassembly+0x1ba>
          {
            pDataRtn = pConn->pRxAclPkt;
   150d2:	693b      	ldr	r3, [r7, #16]
   150d4:	689b      	ldr	r3, [r3, #8]
   150d6:	61fb      	str	r3, [r7, #28]
            pConn->pRxAclPkt = NULL;
   150d8:	693b      	ldr	r3, [r7, #16]
   150da:	2200      	movs	r2, #0
   150dc:	609a      	str	r2, [r3, #8]
  {
    /* connection not found */
    HCI_TRACE_WARN1("pkt rcvd on unknown handle=0x%04x", (handle & HCI_HANDLE_MASK));
  }

  if (freeData)
   150de:	7efb      	ldrb	r3, [r7, #27]
   150e0:	2b00      	cmp	r3, #0
   150e2:	d002      	beq.n	150ea <hciCoreAclReassembly+0x1c6>
  {
    WsfMsgFree(pData);
   150e4:	6878      	ldr	r0, [r7, #4]
   150e6:	f002 fcd3 	bl	17a90 <WsfMsgFree>
  }

  return pDataRtn;
   150ea:	69fb      	ldr	r3, [r7, #28]
}
   150ec:	4618      	mov	r0, r3
   150ee:	3720      	adds	r7, #32
   150f0:	46bd      	mov	sp, r7
   150f2:	bd80      	pop	{r7, pc}
   150f4:	10006424 	.word	0x10006424

000150f8 <HciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreInit(void)
{
   150f8:	b580      	push	{r7, lr}
   150fa:	b082      	sub	sp, #8
   150fc:	af00      	add	r7, sp, #0
  uint8_t   i;

  WSF_QUEUE_INIT(&hciCoreCb.aclQueue);
   150fe:	4b19      	ldr	r3, [pc, #100]	; (15164 <HciCoreInit+0x6c>)
   15100:	2200      	movs	r2, #0
   15102:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   15106:	4b17      	ldr	r3, [pc, #92]	; (15164 <HciCoreInit+0x6c>)
   15108:	2200      	movs	r2, #0
   1510a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  for (i = 0; i < DM_CONN_MAX; i++)
   1510e:	2300      	movs	r3, #0
   15110:	71fb      	strb	r3, [r7, #7]
   15112:	e00d      	b.n	15130 <HciCoreInit+0x38>
  {
    hciCoreCb.conn[i].handle = HCI_HANDLE_NONE;
   15114:	79fa      	ldrb	r2, [r7, #7]
   15116:	4913      	ldr	r1, [pc, #76]	; (15164 <HciCoreInit+0x6c>)
   15118:	4613      	mov	r3, r2
   1511a:	00db      	lsls	r3, r3, #3
   1511c:	1a9b      	subs	r3, r3, r2
   1511e:	009b      	lsls	r3, r3, #2
   15120:	440b      	add	r3, r1
   15122:	3310      	adds	r3, #16
   15124:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15128:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < DM_CONN_MAX; i++)
   1512a:	79fb      	ldrb	r3, [r7, #7]
   1512c:	3301      	adds	r3, #1
   1512e:	71fb      	strb	r3, [r7, #7]
   15130:	79fb      	ldrb	r3, [r7, #7]
   15132:	2b07      	cmp	r3, #7
   15134:	d9ee      	bls.n	15114 <HciCoreInit+0x1c>
  }

  hciCoreCb.maxRxAclLen = HCI_MAX_RX_ACL_LEN;
   15136:	4b0b      	ldr	r3, [pc, #44]	; (15164 <HciCoreInit+0x6c>)
   15138:	221b      	movs	r2, #27
   1513a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
  hciCoreCb.aclQueueHi = HCI_ACL_QUEUE_HI;
   1513e:	4b09      	ldr	r3, [pc, #36]	; (15164 <HciCoreInit+0x6c>)
   15140:	2205      	movs	r2, #5
   15142:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  hciCoreCb.aclQueueLo = HCI_ACL_QUEUE_LO;
   15146:	4b07      	ldr	r3, [pc, #28]	; (15164 <HciCoreInit+0x6c>)
   15148:	2203      	movs	r2, #3
   1514a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
  hciCoreCb.extResetSeq = NULL;
   1514e:	4b05      	ldr	r3, [pc, #20]	; (15164 <HciCoreInit+0x6c>)
   15150:	2200      	movs	r2, #0
   15152:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  hciCoreInit();
   15156:	f000 f8d5 	bl	15304 <hciCoreInit>
}
   1515a:	bf00      	nop
   1515c:	3708      	adds	r7, #8
   1515e:	46bd      	mov	sp, r7
   15160:	bd80      	pop	{r7, pc}
   15162:	bf00      	nop
   15164:	10006424 	.word	0x10006424

00015168 <HciResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciResetSequence(void)
{
   15168:	b580      	push	{r7, lr}
   1516a:	b084      	sub	sp, #16
   1516c:	af00      	add	r7, sp, #0
  uint8_t         *pBuf;
  wsfHandlerId_t    handlerId;
  
  uint8_t         i;
  hciCoreConn_t   *pConn = hciCoreCb.conn;
   1516e:	4b24      	ldr	r3, [pc, #144]	; (15200 <HciResetSequence+0x98>)
   15170:	60bb      	str	r3, [r7, #8]

  // free any pending incoming packets
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15172:	e002      	b.n	1517a <HciResetSequence+0x12>
  {
    /* Free buffer */
    WsfMsgFree(pBuf);
   15174:	6878      	ldr	r0, [r7, #4]
   15176:	f002 fc8b 	bl	17a90 <WsfMsgFree>
  while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1517a:	1cfb      	adds	r3, r7, #3
   1517c:	4619      	mov	r1, r3
   1517e:	4821      	ldr	r0, [pc, #132]	; (15204 <HciResetSequence+0x9c>)
   15180:	f002 fcc0 	bl	17b04 <WsfMsgDeq>
   15184:	6078      	str	r0, [r7, #4]
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	2b00      	cmp	r3, #0
   1518a:	d1f3      	bne.n	15174 <HciResetSequence+0xc>
  }
  
  HCI_TRACE_INFO0("reset sequence");
  // free any pending tx packets
  /* find connection struct */
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   1518c:	2308      	movs	r3, #8
   1518e:	73fb      	strb	r3, [r7, #15]
   15190:	e029      	b.n	151e6 <HciResetSequence+0x7e>
  {
    /* free any fragmenting ACL packet */
    if (pConn->pTxAclPkt != NULL)
   15192:	68bb      	ldr	r3, [r7, #8]
   15194:	681b      	ldr	r3, [r3, #0]
   15196:	2b00      	cmp	r3, #0
   15198:	d007      	beq.n	151aa <HciResetSequence+0x42>
    {
      WsfMsgFree(pConn->pTxAclPkt);
   1519a:	68bb      	ldr	r3, [r7, #8]
   1519c:	681b      	ldr	r3, [r3, #0]
   1519e:	4618      	mov	r0, r3
   151a0:	f002 fc76 	bl	17a90 <WsfMsgFree>
      pConn->pTxAclPkt = NULL;
   151a4:	68bb      	ldr	r3, [r7, #8]
   151a6:	2200      	movs	r2, #0
   151a8:	601a      	str	r2, [r3, #0]
    }
    pConn->fragmenting = FALSE;
   151aa:	68bb      	ldr	r3, [r7, #8]
   151ac:	2200      	movs	r2, #0
   151ae:	759a      	strb	r2, [r3, #22]

    if (pConn->pRxAclPkt != NULL)
   151b0:	68bb      	ldr	r3, [r7, #8]
   151b2:	689b      	ldr	r3, [r3, #8]
   151b4:	2b00      	cmp	r3, #0
   151b6:	d007      	beq.n	151c8 <HciResetSequence+0x60>
    {
      WsfMsgFree(pConn->pRxAclPkt);
   151b8:	68bb      	ldr	r3, [r7, #8]
   151ba:	689b      	ldr	r3, [r3, #8]
   151bc:	4618      	mov	r0, r3
   151be:	f002 fc67 	bl	17a90 <WsfMsgFree>
      pConn->pRxAclPkt = NULL;
   151c2:	68bb      	ldr	r3, [r7, #8]
   151c4:	2200      	movs	r2, #0
   151c6:	609a      	str	r2, [r3, #8]
    }

    /* free structure */
    pConn->handle = HCI_HANDLE_NONE;
   151c8:	68bb      	ldr	r3, [r7, #8]
   151ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   151ce:	821a      	strh	r2, [r3, #16]

    /* optional: iterate through tx ACL queue and free any buffers with this handle */

    /* outstanding buffers are now available; service TX data path */
    hciCoreTxReady(pConn->outBufs);
   151d0:	68bb      	ldr	r3, [r7, #8]
   151d2:	7e5b      	ldrb	r3, [r3, #25]
   151d4:	4618      	mov	r0, r3
   151d6:	f7ff fd75 	bl	14cc4 <hciCoreTxReady>
  for (i = DM_CONN_MAX; i > 0; i--, pConn++)
   151da:	7bfb      	ldrb	r3, [r7, #15]
   151dc:	3b01      	subs	r3, #1
   151de:	73fb      	strb	r3, [r7, #15]
   151e0:	68bb      	ldr	r3, [r7, #8]
   151e2:	331c      	adds	r3, #28
   151e4:	60bb      	str	r3, [r7, #8]
   151e6:	7bfb      	ldrb	r3, [r7, #15]
   151e8:	2b00      	cmp	r3, #0
   151ea:	d1d2      	bne.n	15192 <HciResetSequence+0x2a>

  }

  /* set resetting state */
  hciCb.resetting = TRUE;
   151ec:	4b05      	ldr	r3, [pc, #20]	; (15204 <HciResetSequence+0x9c>)
   151ee:	2201      	movs	r2, #1
   151f0:	765a      	strb	r2, [r3, #25]

  /* start the reset sequence */
  hciCoreResetStart();
   151f2:	f002 f923 	bl	1743c <hciCoreResetStart>
}
   151f6:	bf00      	nop
   151f8:	3710      	adds	r7, #16
   151fa:	46bd      	mov	sp, r7
   151fc:	bd80      	pop	{r7, pc}
   151fe:	bf00      	nop
   15200:	10006424 	.word	0x10006424
   15204:	10006538 	.word	0x10006538

00015208 <HciSetMaxRxAclLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSetMaxRxAclLen(uint16_t len)
{
   15208:	b480      	push	{r7}
   1520a:	b083      	sub	sp, #12
   1520c:	af00      	add	r7, sp, #0
   1520e:	4603      	mov	r3, r0
   15210:	80fb      	strh	r3, [r7, #6]
  hciCoreCb.maxRxAclLen = len;
   15212:	4a05      	ldr	r2, [pc, #20]	; (15228 <HciSetMaxRxAclLen+0x20>)
   15214:	88fb      	ldrh	r3, [r7, #6]
   15216:	f8a2 30fc 	strh.w	r3, [r2, #252]	; 0xfc
}
   1521a:	bf00      	nop
   1521c:	370c      	adds	r7, #12
   1521e:	46bd      	mov	sp, r7
   15220:	f85d 7b04 	ldr.w	r7, [sp], #4
   15224:	4770      	bx	lr
   15226:	bf00      	nop
   15228:	10006424 	.word	0x10006424

0001522c <HciSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSendAclData(uint8_t *pData)
{
   1522c:	b590      	push	{r4, r7, lr}
   1522e:	b085      	sub	sp, #20
   15230:	af00      	add	r7, sp, #0
   15232:	6078      	str	r0, [r7, #4]
  uint16_t        handle;
  uint16_t        len;
  hciCoreConn_t   *pConn;

  /* parse handle and length */
  BYTES_TO_UINT16(handle, pData);
   15234:	687b      	ldr	r3, [r7, #4]
   15236:	781b      	ldrb	r3, [r3, #0]
   15238:	b29a      	uxth	r2, r3
   1523a:	687b      	ldr	r3, [r7, #4]
   1523c:	3301      	adds	r3, #1
   1523e:	781b      	ldrb	r3, [r3, #0]
   15240:	b29b      	uxth	r3, r3
   15242:	021b      	lsls	r3, r3, #8
   15244:	b29b      	uxth	r3, r3
   15246:	4413      	add	r3, r2
   15248:	81fb      	strh	r3, [r7, #14]
  BYTES_TO_UINT16(len, &pData[2]);
   1524a:	687b      	ldr	r3, [r7, #4]
   1524c:	3302      	adds	r3, #2
   1524e:	781b      	ldrb	r3, [r3, #0]
   15250:	b29a      	uxth	r2, r3
   15252:	687b      	ldr	r3, [r7, #4]
   15254:	3303      	adds	r3, #3
   15256:	781b      	ldrb	r3, [r3, #0]
   15258:	b29b      	uxth	r3, r3
   1525a:	021b      	lsls	r3, r3, #8
   1525c:	b29b      	uxth	r3, r3
   1525e:	4413      	add	r3, r2
   15260:	81bb      	strh	r3, [r7, #12]

  /* look up connection structure */
  if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15262:	89fb      	ldrh	r3, [r7, #14]
   15264:	4618      	mov	r0, r3
   15266:	f7ff fca7 	bl	14bb8 <hciCoreConnByHandle>
   1526a:	60b8      	str	r0, [r7, #8]
   1526c:	68bb      	ldr	r3, [r7, #8]
   1526e:	2b00      	cmp	r3, #0
   15270:	d03a      	beq.n	152e8 <HciSendAclData+0xbc>
  {
    /* if queue empty and buffers available */
    if (WsfQueueEmpty(&hciCoreCb.aclQueue) && hciCoreCb.availBufs > 0)
   15272:	4821      	ldr	r0, [pc, #132]	; (152f8 <HciSendAclData+0xcc>)
   15274:	f002 fd27 	bl	17cc6 <WsfQueueEmpty>
   15278:	4603      	mov	r3, r0
   1527a:	2b00      	cmp	r3, #0
   1527c:	d00b      	beq.n	15296 <HciSendAclData+0x6a>
   1527e:	4b1f      	ldr	r3, [pc, #124]	; (152fc <HciSendAclData+0xd0>)
   15280:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   15284:	2b00      	cmp	r3, #0
   15286:	d006      	beq.n	15296 <HciSendAclData+0x6a>
    {
      /* send data */
      hciCoreTxAclStart(pConn, len, pData);
   15288:	89bb      	ldrh	r3, [r7, #12]
   1528a:	687a      	ldr	r2, [r7, #4]
   1528c:	4619      	mov	r1, r3
   1528e:	68b8      	ldr	r0, [r7, #8]
   15290:	f7ff fd80 	bl	14d94 <hciCoreTxAclStart>
   15294:	e004      	b.n	152a0 <HciSendAclData+0x74>
    }
    else
    {
      /* queue data - message handler ID 'handerId' not used */
      WsfMsgEnq(&hciCoreCb.aclQueue, 0, pData);
   15296:	687a      	ldr	r2, [r7, #4]
   15298:	2100      	movs	r1, #0
   1529a:	4817      	ldr	r0, [pc, #92]	; (152f8 <HciSendAclData+0xcc>)
   1529c:	f002 fc1d 	bl	17ada <WsfMsgEnq>
    }

    /* increment buffer queue count for this connection with consideration for HCI fragmentation */
    pConn->queuedBufs += ((len - 1) / HciGetBufSize()) + 1;
   152a0:	89bb      	ldrh	r3, [r7, #12]
   152a2:	1e5c      	subs	r4, r3, #1
   152a4:	f000 f904 	bl	154b0 <HciGetBufSize>
   152a8:	4603      	mov	r3, r0
   152aa:	fb94 f3f3 	sdiv	r3, r4, r3
   152ae:	1c59      	adds	r1, r3, #1
   152b0:	68bb      	ldr	r3, [r7, #8]
   152b2:	7e1a      	ldrb	r2, [r3, #24]
   152b4:	b2cb      	uxtb	r3, r1
   152b6:	4413      	add	r3, r2
   152b8:	b2da      	uxtb	r2, r3
   152ba:	68bb      	ldr	r3, [r7, #8]
   152bc:	761a      	strb	r2, [r3, #24]

    /* manage flow control to stack */
    if (pConn->queuedBufs >= hciCoreCb.aclQueueHi && pConn->flowDisabled == FALSE)
   152be:	68bb      	ldr	r3, [r7, #8]
   152c0:	7e1a      	ldrb	r2, [r3, #24]
   152c2:	4b0e      	ldr	r3, [pc, #56]	; (152fc <HciSendAclData+0xd0>)
   152c4:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
   152c8:	429a      	cmp	r2, r3
   152ca:	d310      	bcc.n	152ee <HciSendAclData+0xc2>
   152cc:	68bb      	ldr	r3, [r7, #8]
   152ce:	7ddb      	ldrb	r3, [r3, #23]
   152d0:	2b00      	cmp	r3, #0
   152d2:	d10c      	bne.n	152ee <HciSendAclData+0xc2>
    {
      pConn->flowDisabled = TRUE;
   152d4:	68bb      	ldr	r3, [r7, #8]
   152d6:	2201      	movs	r2, #1
   152d8:	75da      	strb	r2, [r3, #23]
      (*hciCb.flowCback)(handle, TRUE);
   152da:	4b09      	ldr	r3, [pc, #36]	; (15300 <HciSendAclData+0xd4>)
   152dc:	695b      	ldr	r3, [r3, #20]
   152de:	89fa      	ldrh	r2, [r7, #14]
   152e0:	2101      	movs	r1, #1
   152e2:	4610      	mov	r0, r2
   152e4:	4798      	blx	r3
    /* discard buffer */
    WsfMsgFree(pData);

    HCI_TRACE_WARN1("HciSendAclData discarding buffer, handle=%u", handle);
  }
}
   152e6:	e002      	b.n	152ee <HciSendAclData+0xc2>
    WsfMsgFree(pData);
   152e8:	6878      	ldr	r0, [r7, #4]
   152ea:	f002 fbd1 	bl	17a90 <WsfMsgFree>
}
   152ee:	bf00      	nop
   152f0:	3714      	adds	r7, #20
   152f2:	46bd      	mov	sp, r7
   152f4:	bd90      	pop	{r4, r7, pc}
   152f6:	bf00      	nop
   152f8:	10006514 	.word	0x10006514
   152fc:	10006424 	.word	0x10006424
   15300:	10006538 	.word	0x10006538

00015304 <hciCoreInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreInit(void)
{
   15304:	b580      	push	{r7, lr}
   15306:	af00      	add	r7, sp, #0
  hciCmdInit();
   15308:	f7fe fc94 	bl	13c34 <hciCmdInit>
}
   1530c:	bf00      	nop
   1530e:	bd80      	pop	{r7, pc}

00015310 <hciCoreNumCmplPkts>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreNumCmplPkts(uint8_t *pMsg)
{
   15310:	b580      	push	{r7, lr}
   15312:	b086      	sub	sp, #24
   15314:	af00      	add	r7, sp, #0
   15316:	6078      	str	r0, [r7, #4]
  uint8_t         numHandles;
  uint16_t        bufs;
  uint16_t        handle;
  uint8_t         availBufs = 0;
   15318:	2300      	movs	r3, #0
   1531a:	75bb      	strb	r3, [r7, #22]
  hciCoreConn_t   *pConn;

  /* parse number of handles */
  BSTREAM_TO_UINT8(numHandles, pMsg);
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	1c5a      	adds	r2, r3, #1
   15320:	607a      	str	r2, [r7, #4]
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	75fb      	strb	r3, [r7, #23]

  /* for each handle in event */
  while (numHandles-- > 0)
   15326:	e04c      	b.n	153c2 <hciCoreNumCmplPkts+0xb2>
  {
    /* parse handle and number of buffers */
    BSTREAM_TO_UINT16(handle, pMsg);
   15328:	687b      	ldr	r3, [r7, #4]
   1532a:	781b      	ldrb	r3, [r3, #0]
   1532c:	b29a      	uxth	r2, r3
   1532e:	687b      	ldr	r3, [r7, #4]
   15330:	3301      	adds	r3, #1
   15332:	781b      	ldrb	r3, [r3, #0]
   15334:	b29b      	uxth	r3, r3
   15336:	021b      	lsls	r3, r3, #8
   15338:	b29b      	uxth	r3, r3
   1533a:	4413      	add	r3, r2
   1533c:	82bb      	strh	r3, [r7, #20]
   1533e:	687b      	ldr	r3, [r7, #4]
   15340:	3302      	adds	r3, #2
   15342:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(bufs, pMsg);
   15344:	687b      	ldr	r3, [r7, #4]
   15346:	781b      	ldrb	r3, [r3, #0]
   15348:	b29a      	uxth	r2, r3
   1534a:	687b      	ldr	r3, [r7, #4]
   1534c:	3301      	adds	r3, #1
   1534e:	781b      	ldrb	r3, [r3, #0]
   15350:	b29b      	uxth	r3, r3
   15352:	021b      	lsls	r3, r3, #8
   15354:	b29b      	uxth	r3, r3
   15356:	4413      	add	r3, r2
   15358:	827b      	strh	r3, [r7, #18]
   1535a:	687b      	ldr	r3, [r7, #4]
   1535c:	3302      	adds	r3, #2
   1535e:	607b      	str	r3, [r7, #4]

    if ((pConn = hciCoreConnByHandle(handle)) != NULL)
   15360:	8abb      	ldrh	r3, [r7, #20]
   15362:	4618      	mov	r0, r3
   15364:	f7ff fc28 	bl	14bb8 <hciCoreConnByHandle>
   15368:	60f8      	str	r0, [r7, #12]
   1536a:	68fb      	ldr	r3, [r7, #12]
   1536c:	2b00      	cmp	r3, #0
   1536e:	d028      	beq.n	153c2 <hciCoreNumCmplPkts+0xb2>
    {
      /* decrement outstanding buffer count to controller */
      pConn->outBufs -= (uint8_t) bufs;
   15370:	68fb      	ldr	r3, [r7, #12]
   15372:	7e5a      	ldrb	r2, [r3, #25]
   15374:	8a7b      	ldrh	r3, [r7, #18]
   15376:	b2db      	uxtb	r3, r3
   15378:	1ad3      	subs	r3, r2, r3
   1537a:	b2da      	uxtb	r2, r3
   1537c:	68fb      	ldr	r3, [r7, #12]
   1537e:	765a      	strb	r2, [r3, #25]

      /* decrement queued buffer count for this connection */
      pConn->queuedBufs -= (uint8_t) bufs;
   15380:	68fb      	ldr	r3, [r7, #12]
   15382:	7e1a      	ldrb	r2, [r3, #24]
   15384:	8a7b      	ldrh	r3, [r7, #18]
   15386:	b2db      	uxtb	r3, r3
   15388:	1ad3      	subs	r3, r2, r3
   1538a:	b2da      	uxtb	r2, r3
   1538c:	68fb      	ldr	r3, [r7, #12]
   1538e:	761a      	strb	r2, [r3, #24]

      /* increment available buffer count */
      availBufs += (uint8_t) bufs;
   15390:	8a7b      	ldrh	r3, [r7, #18]
   15392:	b2da      	uxtb	r2, r3
   15394:	7dbb      	ldrb	r3, [r7, #22]
   15396:	4413      	add	r3, r2
   15398:	75bb      	strb	r3, [r7, #22]

      /* call flow control callback */
      if (pConn->flowDisabled && pConn->queuedBufs <= hciCoreCb.aclQueueLo)
   1539a:	68fb      	ldr	r3, [r7, #12]
   1539c:	7ddb      	ldrb	r3, [r3, #23]
   1539e:	2b00      	cmp	r3, #0
   153a0:	d00f      	beq.n	153c2 <hciCoreNumCmplPkts+0xb2>
   153a2:	68fb      	ldr	r3, [r7, #12]
   153a4:	7e1a      	ldrb	r2, [r3, #24]
   153a6:	4b0d      	ldr	r3, [pc, #52]	; (153dc <hciCoreNumCmplPkts+0xcc>)
   153a8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
   153ac:	429a      	cmp	r2, r3
   153ae:	d808      	bhi.n	153c2 <hciCoreNumCmplPkts+0xb2>
      {
        pConn->flowDisabled = FALSE;
   153b0:	68fb      	ldr	r3, [r7, #12]
   153b2:	2200      	movs	r2, #0
   153b4:	75da      	strb	r2, [r3, #23]
        (*hciCb.flowCback)(handle, FALSE);
   153b6:	4b0a      	ldr	r3, [pc, #40]	; (153e0 <hciCoreNumCmplPkts+0xd0>)
   153b8:	695b      	ldr	r3, [r3, #20]
   153ba:	8aba      	ldrh	r2, [r7, #20]
   153bc:	2100      	movs	r1, #0
   153be:	4610      	mov	r0, r2
   153c0:	4798      	blx	r3
  while (numHandles-- > 0)
   153c2:	7dfb      	ldrb	r3, [r7, #23]
   153c4:	1e5a      	subs	r2, r3, #1
   153c6:	75fa      	strb	r2, [r7, #23]
   153c8:	2b00      	cmp	r3, #0
   153ca:	d1ad      	bne.n	15328 <hciCoreNumCmplPkts+0x18>
      }
    }
  }

  /* service TX data path */
  hciCoreTxReady(availBufs);
   153cc:	7dbb      	ldrb	r3, [r7, #22]
   153ce:	4618      	mov	r0, r3
   153d0:	f7ff fc78 	bl	14cc4 <hciCoreTxReady>
}
   153d4:	bf00      	nop
   153d6:	3718      	adds	r7, #24
   153d8:	46bd      	mov	sp, r7
   153da:	bd80      	pop	{r7, pc}
   153dc:	10006424 	.word	0x10006424
   153e0:	10006538 	.word	0x10006538

000153e4 <hciCoreRecv>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreRecv(uint8_t msgType, uint8_t *pCoreRecvMsg)
{
   153e4:	b580      	push	{r7, lr}
   153e6:	b082      	sub	sp, #8
   153e8:	af00      	add	r7, sp, #0
   153ea:	4603      	mov	r3, r0
   153ec:	6039      	str	r1, [r7, #0]
   153ee:	71fb      	strb	r3, [r7, #7]
  {
    HCI_PDUMP_RX_ACL(*(pCoreRecvMsg + 2) + HCI_ACL_HDR_LEN, pCoreRecvMsg);
  }

  /* queue buffer */
  WsfMsgEnq(&hciCb.rxQueue, (wsfHandlerId_t) msgType, pCoreRecvMsg);
   153f0:	79fb      	ldrb	r3, [r7, #7]
   153f2:	683a      	ldr	r2, [r7, #0]
   153f4:	4619      	mov	r1, r3
   153f6:	4806      	ldr	r0, [pc, #24]	; (15410 <hciCoreRecv+0x2c>)
   153f8:	f002 fb6f 	bl	17ada <WsfMsgEnq>

  /* set event */
  WsfSetEvent(hciCb.handlerId, HCI_EVT_RX);
   153fc:	4b04      	ldr	r3, [pc, #16]	; (15410 <hciCoreRecv+0x2c>)
   153fe:	7e1b      	ldrb	r3, [r3, #24]
   15400:	2101      	movs	r1, #1
   15402:	4618      	mov	r0, r3
   15404:	f005 f848 	bl	1a498 <WsfSetEvent>
}
   15408:	bf00      	nop
   1540a:	3708      	adds	r7, #8
   1540c:	46bd      	mov	sp, r7
   1540e:	bd80      	pop	{r7, pc}
   15410:	10006538 	.word	0x10006538

00015414 <HciCoreHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciCoreHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   15414:	b580      	push	{r7, lr}
   15416:	b084      	sub	sp, #16
   15418:	af00      	add	r7, sp, #0
   1541a:	4603      	mov	r3, r0
   1541c:	6039      	str	r1, [r7, #0]
   1541e:	71fb      	strb	r3, [r7, #7]
  uint8_t         *pBuf;
  wsfHandlerId_t  handlerId;
  
  /* Handle message */
  if (pMsg != NULL)
   15420:	683b      	ldr	r3, [r7, #0]
   15422:	2b00      	cmp	r3, #0
   15424:	d007      	beq.n	15436 <HciCoreHandler+0x22>
  {
    /* Handle HCI command timeout */
    if (pMsg->event == HCI_MSG_CMD_TIMEOUT)
   15426:	683b      	ldr	r3, [r7, #0]
   15428:	789b      	ldrb	r3, [r3, #2]
   1542a:	2b01      	cmp	r3, #1
   1542c:	d12f      	bne.n	1548e <HciCoreHandler+0x7a>
    {
      hciCmdTimeout(pMsg);
   1542e:	6838      	ldr	r0, [r7, #0]
   15430:	f7fe fc1c 	bl	13c6c <hciCmdTimeout>
          hciCb.aclCback(pBuf);
        }
      }
    }
  }
}
   15434:	e02b      	b.n	1548e <HciCoreHandler+0x7a>
  else if (event & HCI_EVT_RX)
   15436:	79fb      	ldrb	r3, [r7, #7]
   15438:	f003 0301 	and.w	r3, r3, #1
   1543c:	2b00      	cmp	r3, #0
   1543e:	d026      	beq.n	1548e <HciCoreHandler+0x7a>
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   15440:	e01b      	b.n	1547a <HciCoreHandler+0x66>
      if (handlerId == HCI_EVT_TYPE)
   15442:	7afb      	ldrb	r3, [r7, #11]
   15444:	2b04      	cmp	r3, #4
   15446:	d10d      	bne.n	15464 <HciCoreHandler+0x50>
        hciEvtProcessMsg(pBuf);
   15448:	68f8      	ldr	r0, [r7, #12]
   1544a:	f001 fcd5 	bl	16df8 <hciEvtProcessMsg>
        if (hciCb.resetting)
   1544e:	4b12      	ldr	r3, [pc, #72]	; (15498 <HciCoreHandler+0x84>)
   15450:	7e5b      	ldrb	r3, [r3, #25]
   15452:	2b00      	cmp	r3, #0
   15454:	d002      	beq.n	1545c <HciCoreHandler+0x48>
          hciCoreResetSequence(pBuf);
   15456:	68f8      	ldr	r0, [r7, #12]
   15458:	f001 fff6 	bl	17448 <hciCoreResetSequence>
        WsfMsgFree(pBuf);
   1545c:	68f8      	ldr	r0, [r7, #12]
   1545e:	f002 fb17 	bl	17a90 <WsfMsgFree>
   15462:	e00a      	b.n	1547a <HciCoreHandler+0x66>
        if ((pBuf = hciCoreAclReassembly(pBuf)) != NULL)
   15464:	68f8      	ldr	r0, [r7, #12]
   15466:	f7ff fd5d 	bl	14f24 <hciCoreAclReassembly>
   1546a:	60f8      	str	r0, [r7, #12]
   1546c:	68fb      	ldr	r3, [r7, #12]
   1546e:	2b00      	cmp	r3, #0
   15470:	d003      	beq.n	1547a <HciCoreHandler+0x66>
          hciCb.aclCback(pBuf);
   15472:	4b09      	ldr	r3, [pc, #36]	; (15498 <HciCoreHandler+0x84>)
   15474:	691b      	ldr	r3, [r3, #16]
   15476:	68f8      	ldr	r0, [r7, #12]
   15478:	4798      	blx	r3
    while ((pBuf = WsfMsgDeq(&hciCb.rxQueue, &handlerId)) != NULL)
   1547a:	f107 030b 	add.w	r3, r7, #11
   1547e:	4619      	mov	r1, r3
   15480:	4805      	ldr	r0, [pc, #20]	; (15498 <HciCoreHandler+0x84>)
   15482:	f002 fb3f 	bl	17b04 <WsfMsgDeq>
   15486:	60f8      	str	r0, [r7, #12]
   15488:	68fb      	ldr	r3, [r7, #12]
   1548a:	2b00      	cmp	r3, #0
   1548c:	d1d9      	bne.n	15442 <HciCoreHandler+0x2e>
}
   1548e:	bf00      	nop
   15490:	3710      	adds	r7, #16
   15492:	46bd      	mov	sp, r7
   15494:	bd80      	pop	{r7, pc}
   15496:	bf00      	nop
   15498:	10006538 	.word	0x10006538

0001549c <HciGetBdAddr>:
 *
 *  \return Pointer to the BD address.
 */
/*************************************************************************************************/
uint8_t *HciGetBdAddr(void)
{
   1549c:	b480      	push	{r7}
   1549e:	af00      	add	r7, sp, #0
  return hciCoreCb.bdAddr;
   154a0:	4b02      	ldr	r3, [pc, #8]	; (154ac <HciGetBdAddr+0x10>)
}
   154a2:	4618      	mov	r0, r3
   154a4:	46bd      	mov	sp, r7
   154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   154aa:	4770      	bx	lr
   154ac:	1000650c 	.word	0x1000650c

000154b0 <HciGetBufSize>:
 *
 *  \return ACL buffer size.
 */
/*************************************************************************************************/
uint16_t HciGetBufSize(void)
{
   154b0:	b480      	push	{r7}
   154b2:	af00      	add	r7, sp, #0
  return hciCoreCb.bufSize;
   154b4:	4b03      	ldr	r3, [pc, #12]	; (154c4 <HciGetBufSize+0x14>)
   154b6:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
}
   154ba:	4618      	mov	r0, r3
   154bc:	46bd      	mov	sp, r7
   154be:	f85d 7b04 	ldr.w	r7, [sp], #4
   154c2:	4770      	bx	lr
   154c4:	10006424 	.word	0x10006424

000154c8 <HciGetLeSupFeat>:
 *
 *  \return Supported features.
 */
/*************************************************************************************************/
uint16_t HciGetLeSupFeat(void)
{
   154c8:	b480      	push	{r7}
   154ca:	af00      	add	r7, sp, #0
  // disable LL connection parameter update feature for a better
  // interoperability with Android phones (especially older Android OS).
  return hciCoreCb.leSupFeat & ~HCI_LE_SUP_FEAT_CONN_PARAM_REQ_PROC;
   154cc:	4b05      	ldr	r3, [pc, #20]	; (154e4 <HciGetLeSupFeat+0x1c>)
   154ce:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   154d2:	f023 0302 	bic.w	r3, r3, #2
   154d6:	b29b      	uxth	r3, r3
}
   154d8:	4618      	mov	r0, r3
   154da:	46bd      	mov	sp, r7
   154dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   154e0:	4770      	bx	lr
   154e2:	bf00      	nop
   154e4:	10006424 	.word	0x10006424

000154e8 <HciGetMaxRxAclLen>:
 *
 *  \return ACL packet length.
 */
/*************************************************************************************************/
uint16_t HciGetMaxRxAclLen(void)
{
   154e8:	b480      	push	{r7}
   154ea:	af00      	add	r7, sp, #0
  return hciCoreCb.maxRxAclLen;
   154ec:	4b03      	ldr	r3, [pc, #12]	; (154fc <HciGetMaxRxAclLen+0x14>)
   154ee:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
}
   154f2:	4618      	mov	r0, r3
   154f4:	46bd      	mov	sp, r7
   154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   154fa:	4770      	bx	lr
   154fc:	10006424 	.word	0x10006424

00015500 <HciLlPrivacySupported>:
 *
 *  \return TRUE if LL Privacy is supported. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t HciLlPrivacySupported(void)
{
   15500:	b480      	push	{r7}
   15502:	af00      	add	r7, sp, #0
  return (hciCoreCb.resListSize > 0) ? TRUE : FALSE;
   15504:	4b06      	ldr	r3, [pc, #24]	; (15520 <HciLlPrivacySupported+0x20>)
   15506:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
   1550a:	2b00      	cmp	r3, #0
   1550c:	bf14      	ite	ne
   1550e:	2301      	movne	r3, #1
   15510:	2300      	moveq	r3, #0
   15512:	b2db      	uxtb	r3, r3
}
   15514:	4618      	mov	r0, r3
   15516:	46bd      	mov	sp, r7
   15518:	f85d 7b04 	ldr.w	r7, [sp], #4
   1551c:	4770      	bx	lr
   1551e:	bf00      	nop
   15520:	10006424 	.word	0x10006424

00015524 <hciEvtParseLeConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15524:	b580      	push	{r7, lr}
   15526:	b084      	sub	sp, #16
   15528:	af00      	add	r7, sp, #0
   1552a:	60f8      	str	r0, [r7, #12]
   1552c:	60b9      	str	r1, [r7, #8]
   1552e:	4613      	mov	r3, r2
   15530:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   15532:	68bb      	ldr	r3, [r7, #8]
   15534:	1c5a      	adds	r2, r3, #1
   15536:	60ba      	str	r2, [r7, #8]
   15538:	781a      	ldrb	r2, [r3, #0]
   1553a:	68fb      	ldr	r3, [r7, #12]
   1553c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   1553e:	68bb      	ldr	r3, [r7, #8]
   15540:	781b      	ldrb	r3, [r3, #0]
   15542:	b29a      	uxth	r2, r3
   15544:	68bb      	ldr	r3, [r7, #8]
   15546:	3301      	adds	r3, #1
   15548:	781b      	ldrb	r3, [r3, #0]
   1554a:	b29b      	uxth	r3, r3
   1554c:	021b      	lsls	r3, r3, #8
   1554e:	b29b      	uxth	r3, r3
   15550:	4413      	add	r3, r2
   15552:	b29a      	uxth	r2, r3
   15554:	68fb      	ldr	r3, [r7, #12]
   15556:	80da      	strh	r2, [r3, #6]
   15558:	68bb      	ldr	r3, [r7, #8]
   1555a:	3302      	adds	r3, #2
   1555c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   1555e:	68bb      	ldr	r3, [r7, #8]
   15560:	1c5a      	adds	r2, r3, #1
   15562:	60ba      	str	r2, [r7, #8]
   15564:	781a      	ldrb	r2, [r3, #0]
   15566:	68fb      	ldr	r3, [r7, #12]
   15568:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1556a:	68bb      	ldr	r3, [r7, #8]
   1556c:	1c5a      	adds	r2, r3, #1
   1556e:	60ba      	str	r2, [r7, #8]
   15570:	781a      	ldrb	r2, [r3, #0]
   15572:	68fb      	ldr	r3, [r7, #12]
   15574:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   15576:	68fb      	ldr	r3, [r7, #12]
   15578:	330a      	adds	r3, #10
   1557a:	68b9      	ldr	r1, [r7, #8]
   1557c:	4618      	mov	r0, r3
   1557e:	f003 f933 	bl	187e8 <BdaCpy>
   15582:	68bb      	ldr	r3, [r7, #8]
   15584:	3306      	adds	r3, #6
   15586:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   15588:	68bb      	ldr	r3, [r7, #8]
   1558a:	781b      	ldrb	r3, [r3, #0]
   1558c:	b29a      	uxth	r2, r3
   1558e:	68bb      	ldr	r3, [r7, #8]
   15590:	3301      	adds	r3, #1
   15592:	781b      	ldrb	r3, [r3, #0]
   15594:	b29b      	uxth	r3, r3
   15596:	021b      	lsls	r3, r3, #8
   15598:	b29b      	uxth	r3, r3
   1559a:	4413      	add	r3, r2
   1559c:	b29a      	uxth	r2, r3
   1559e:	68fb      	ldr	r3, [r7, #12]
   155a0:	821a      	strh	r2, [r3, #16]
   155a2:	68bb      	ldr	r3, [r7, #8]
   155a4:	3302      	adds	r3, #2
   155a6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   155a8:	68bb      	ldr	r3, [r7, #8]
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	b29a      	uxth	r2, r3
   155ae:	68bb      	ldr	r3, [r7, #8]
   155b0:	3301      	adds	r3, #1
   155b2:	781b      	ldrb	r3, [r3, #0]
   155b4:	b29b      	uxth	r3, r3
   155b6:	021b      	lsls	r3, r3, #8
   155b8:	b29b      	uxth	r3, r3
   155ba:	4413      	add	r3, r2
   155bc:	b29a      	uxth	r2, r3
   155be:	68fb      	ldr	r3, [r7, #12]
   155c0:	825a      	strh	r2, [r3, #18]
   155c2:	68bb      	ldr	r3, [r7, #8]
   155c4:	3302      	adds	r3, #2
   155c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   155c8:	68bb      	ldr	r3, [r7, #8]
   155ca:	781b      	ldrb	r3, [r3, #0]
   155cc:	b29a      	uxth	r2, r3
   155ce:	68bb      	ldr	r3, [r7, #8]
   155d0:	3301      	adds	r3, #1
   155d2:	781b      	ldrb	r3, [r3, #0]
   155d4:	b29b      	uxth	r3, r3
   155d6:	021b      	lsls	r3, r3, #8
   155d8:	b29b      	uxth	r3, r3
   155da:	4413      	add	r3, r2
   155dc:	b29a      	uxth	r2, r3
   155de:	68fb      	ldr	r3, [r7, #12]
   155e0:	829a      	strh	r2, [r3, #20]
   155e2:	68bb      	ldr	r3, [r7, #8]
   155e4:	3302      	adds	r3, #2
   155e6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   155e8:	68bb      	ldr	r3, [r7, #8]
   155ea:	1c5a      	adds	r2, r3, #1
   155ec:	60ba      	str	r2, [r7, #8]
   155ee:	781a      	ldrb	r2, [r3, #0]
   155f0:	68fb      	ldr	r3, [r7, #12]
   155f2:	759a      	strb	r2, [r3, #22]

  /* zero out unused fields */
  memset(pMsg->leConnCmpl.localRpa, 0, BDA_ADDR_LEN);
   155f4:	68fb      	ldr	r3, [r7, #12]
   155f6:	3317      	adds	r3, #23
   155f8:	2206      	movs	r2, #6
   155fa:	2100      	movs	r1, #0
   155fc:	4618      	mov	r0, r3
   155fe:	f7f6 fead 	bl	c35c <memset>
  memset(pMsg->leConnCmpl.peerRpa, 0, BDA_ADDR_LEN);
   15602:	68fb      	ldr	r3, [r7, #12]
   15604:	331d      	adds	r3, #29
   15606:	2206      	movs	r2, #6
   15608:	2100      	movs	r1, #0
   1560a:	4618      	mov	r0, r3
   1560c:	f7f6 fea6 	bl	c35c <memset>

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   15610:	68fb      	ldr	r3, [r7, #12]
   15612:	88da      	ldrh	r2, [r3, #6]
   15614:	68fb      	ldr	r3, [r7, #12]
   15616:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   15618:	68fb      	ldr	r3, [r7, #12]
   1561a:	791a      	ldrb	r2, [r3, #4]
   1561c:	68fb      	ldr	r3, [r7, #12]
   1561e:	70da      	strb	r2, [r3, #3]
}
   15620:	bf00      	nop
   15622:	3710      	adds	r7, #16
   15624:	46bd      	mov	sp, r7
   15626:	bd80      	pop	{r7, pc}

00015628 <hciEvtParseLeEnhancedConnCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEnhancedConnCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15628:	b580      	push	{r7, lr}
   1562a:	b084      	sub	sp, #16
   1562c:	af00      	add	r7, sp, #0
   1562e:	60f8      	str	r0, [r7, #12]
   15630:	60b9      	str	r1, [r7, #8]
   15632:	4613      	mov	r3, r2
   15634:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.status, p);
   15636:	68bb      	ldr	r3, [r7, #8]
   15638:	1c5a      	adds	r2, r3, #1
   1563a:	60ba      	str	r2, [r7, #8]
   1563c:	781a      	ldrb	r2, [r3, #0]
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.handle, p);
   15642:	68bb      	ldr	r3, [r7, #8]
   15644:	781b      	ldrb	r3, [r3, #0]
   15646:	b29a      	uxth	r2, r3
   15648:	68bb      	ldr	r3, [r7, #8]
   1564a:	3301      	adds	r3, #1
   1564c:	781b      	ldrb	r3, [r3, #0]
   1564e:	b29b      	uxth	r3, r3
   15650:	021b      	lsls	r3, r3, #8
   15652:	b29b      	uxth	r3, r3
   15654:	4413      	add	r3, r2
   15656:	b29a      	uxth	r2, r3
   15658:	68fb      	ldr	r3, [r7, #12]
   1565a:	80da      	strh	r2, [r3, #6]
   1565c:	68bb      	ldr	r3, [r7, #8]
   1565e:	3302      	adds	r3, #2
   15660:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.role, p);
   15662:	68bb      	ldr	r3, [r7, #8]
   15664:	1c5a      	adds	r2, r3, #1
   15666:	60ba      	str	r2, [r7, #8]
   15668:	781a      	ldrb	r2, [r3, #0]
   1566a:	68fb      	ldr	r3, [r7, #12]
   1566c:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.addrType, p);
   1566e:	68bb      	ldr	r3, [r7, #8]
   15670:	1c5a      	adds	r2, r3, #1
   15672:	60ba      	str	r2, [r7, #8]
   15674:	781a      	ldrb	r2, [r3, #0]
   15676:	68fb      	ldr	r3, [r7, #12]
   15678:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerAddr, p);
   1567a:	68fb      	ldr	r3, [r7, #12]
   1567c:	330a      	adds	r3, #10
   1567e:	68b9      	ldr	r1, [r7, #8]
   15680:	4618      	mov	r0, r3
   15682:	f003 f8b1 	bl	187e8 <BdaCpy>
   15686:	68bb      	ldr	r3, [r7, #8]
   15688:	3306      	adds	r3, #6
   1568a:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.localRpa, p);
   1568c:	68fb      	ldr	r3, [r7, #12]
   1568e:	3317      	adds	r3, #23
   15690:	68b9      	ldr	r1, [r7, #8]
   15692:	4618      	mov	r0, r3
   15694:	f003 f8a8 	bl	187e8 <BdaCpy>
   15698:	68bb      	ldr	r3, [r7, #8]
   1569a:	3306      	adds	r3, #6
   1569c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_BDA(pMsg->leConnCmpl.peerRpa, p);
   1569e:	68fb      	ldr	r3, [r7, #12]
   156a0:	331d      	adds	r3, #29
   156a2:	68b9      	ldr	r1, [r7, #8]
   156a4:	4618      	mov	r0, r3
   156a6:	f003 f89f 	bl	187e8 <BdaCpy>
   156aa:	68bb      	ldr	r3, [r7, #8]
   156ac:	3306      	adds	r3, #6
   156ae:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connInterval, p);
   156b0:	68bb      	ldr	r3, [r7, #8]
   156b2:	781b      	ldrb	r3, [r3, #0]
   156b4:	b29a      	uxth	r2, r3
   156b6:	68bb      	ldr	r3, [r7, #8]
   156b8:	3301      	adds	r3, #1
   156ba:	781b      	ldrb	r3, [r3, #0]
   156bc:	b29b      	uxth	r3, r3
   156be:	021b      	lsls	r3, r3, #8
   156c0:	b29b      	uxth	r3, r3
   156c2:	4413      	add	r3, r2
   156c4:	b29a      	uxth	r2, r3
   156c6:	68fb      	ldr	r3, [r7, #12]
   156c8:	821a      	strh	r2, [r3, #16]
   156ca:	68bb      	ldr	r3, [r7, #8]
   156cc:	3302      	adds	r3, #2
   156ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.connLatency, p);
   156d0:	68bb      	ldr	r3, [r7, #8]
   156d2:	781b      	ldrb	r3, [r3, #0]
   156d4:	b29a      	uxth	r2, r3
   156d6:	68bb      	ldr	r3, [r7, #8]
   156d8:	3301      	adds	r3, #1
   156da:	781b      	ldrb	r3, [r3, #0]
   156dc:	b29b      	uxth	r3, r3
   156de:	021b      	lsls	r3, r3, #8
   156e0:	b29b      	uxth	r3, r3
   156e2:	4413      	add	r3, r2
   156e4:	b29a      	uxth	r2, r3
   156e6:	68fb      	ldr	r3, [r7, #12]
   156e8:	825a      	strh	r2, [r3, #18]
   156ea:	68bb      	ldr	r3, [r7, #8]
   156ec:	3302      	adds	r3, #2
   156ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnCmpl.supTimeout, p);
   156f0:	68bb      	ldr	r3, [r7, #8]
   156f2:	781b      	ldrb	r3, [r3, #0]
   156f4:	b29a      	uxth	r2, r3
   156f6:	68bb      	ldr	r3, [r7, #8]
   156f8:	3301      	adds	r3, #1
   156fa:	781b      	ldrb	r3, [r3, #0]
   156fc:	b29b      	uxth	r3, r3
   156fe:	021b      	lsls	r3, r3, #8
   15700:	b29b      	uxth	r3, r3
   15702:	4413      	add	r3, r2
   15704:	b29a      	uxth	r2, r3
   15706:	68fb      	ldr	r3, [r7, #12]
   15708:	829a      	strh	r2, [r3, #20]
   1570a:	68bb      	ldr	r3, [r7, #8]
   1570c:	3302      	adds	r3, #2
   1570e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leConnCmpl.clockAccuracy, p);
   15710:	68bb      	ldr	r3, [r7, #8]
   15712:	1c5a      	adds	r2, r3, #1
   15714:	60ba      	str	r2, [r7, #8]
   15716:	781a      	ldrb	r2, [r3, #0]
   15718:	68fb      	ldr	r3, [r7, #12]
   1571a:	759a      	strb	r2, [r3, #22]

  pMsg->hdr.param = pMsg->leConnCmpl.handle;
   1571c:	68fb      	ldr	r3, [r7, #12]
   1571e:	88da      	ldrh	r2, [r3, #6]
   15720:	68fb      	ldr	r3, [r7, #12]
   15722:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnCmpl.status;
   15724:	68fb      	ldr	r3, [r7, #12]
   15726:	791a      	ldrb	r2, [r3, #4]
   15728:	68fb      	ldr	r3, [r7, #12]
   1572a:	70da      	strb	r2, [r3, #3]
}
   1572c:	bf00      	nop
   1572e:	3710      	adds	r7, #16
   15730:	46bd      	mov	sp, r7
   15732:	bd80      	pop	{r7, pc}

00015734 <hciEvtParseDisconnectCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDisconnectCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15734:	b480      	push	{r7}
   15736:	b085      	sub	sp, #20
   15738:	af00      	add	r7, sp, #0
   1573a:	60f8      	str	r0, [r7, #12]
   1573c:	60b9      	str	r1, [r7, #8]
   1573e:	4613      	mov	r3, r2
   15740:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.status, p);
   15742:	68bb      	ldr	r3, [r7, #8]
   15744:	1c5a      	adds	r2, r3, #1
   15746:	60ba      	str	r2, [r7, #8]
   15748:	781a      	ldrb	r2, [r3, #0]
   1574a:	68fb      	ldr	r3, [r7, #12]
   1574c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->disconnectCmpl.handle, p);
   1574e:	68bb      	ldr	r3, [r7, #8]
   15750:	781b      	ldrb	r3, [r3, #0]
   15752:	b29a      	uxth	r2, r3
   15754:	68bb      	ldr	r3, [r7, #8]
   15756:	3301      	adds	r3, #1
   15758:	781b      	ldrb	r3, [r3, #0]
   1575a:	b29b      	uxth	r3, r3
   1575c:	021b      	lsls	r3, r3, #8
   1575e:	b29b      	uxth	r3, r3
   15760:	4413      	add	r3, r2
   15762:	b29a      	uxth	r2, r3
   15764:	68fb      	ldr	r3, [r7, #12]
   15766:	80da      	strh	r2, [r3, #6]
   15768:	68bb      	ldr	r3, [r7, #8]
   1576a:	3302      	adds	r3, #2
   1576c:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->disconnectCmpl.reason, p);
   1576e:	68bb      	ldr	r3, [r7, #8]
   15770:	1c5a      	adds	r2, r3, #1
   15772:	60ba      	str	r2, [r7, #8]
   15774:	781a      	ldrb	r2, [r3, #0]
   15776:	68fb      	ldr	r3, [r7, #12]
   15778:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->disconnectCmpl.handle;
   1577a:	68fb      	ldr	r3, [r7, #12]
   1577c:	88da      	ldrh	r2, [r3, #6]
   1577e:	68fb      	ldr	r3, [r7, #12]
   15780:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->disconnectCmpl.status;
   15782:	68fb      	ldr	r3, [r7, #12]
   15784:	791a      	ldrb	r2, [r3, #4]
   15786:	68fb      	ldr	r3, [r7, #12]
   15788:	70da      	strb	r2, [r3, #3]
}
   1578a:	bf00      	nop
   1578c:	3714      	adds	r7, #20
   1578e:	46bd      	mov	sp, r7
   15790:	f85d 7b04 	ldr.w	r7, [sp], #4
   15794:	4770      	bx	lr

00015796 <hciEvtParseLeConnUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeConnUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15796:	b480      	push	{r7}
   15798:	b085      	sub	sp, #20
   1579a:	af00      	add	r7, sp, #0
   1579c:	60f8      	str	r0, [r7, #12]
   1579e:	60b9      	str	r1, [r7, #8]
   157a0:	4613      	mov	r3, r2
   157a2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leConnUpdateCmpl.status, p);
   157a4:	68bb      	ldr	r3, [r7, #8]
   157a6:	1c5a      	adds	r2, r3, #1
   157a8:	60ba      	str	r2, [r7, #8]
   157aa:	781a      	ldrb	r2, [r3, #0]
   157ac:	68fb      	ldr	r3, [r7, #12]
   157ae:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.handle, p);
   157b0:	68bb      	ldr	r3, [r7, #8]
   157b2:	781b      	ldrb	r3, [r3, #0]
   157b4:	b29a      	uxth	r2, r3
   157b6:	68bb      	ldr	r3, [r7, #8]
   157b8:	3301      	adds	r3, #1
   157ba:	781b      	ldrb	r3, [r3, #0]
   157bc:	b29b      	uxth	r3, r3
   157be:	021b      	lsls	r3, r3, #8
   157c0:	b29b      	uxth	r3, r3
   157c2:	4413      	add	r3, r2
   157c4:	b29a      	uxth	r2, r3
   157c6:	68fb      	ldr	r3, [r7, #12]
   157c8:	80da      	strh	r2, [r3, #6]
   157ca:	68bb      	ldr	r3, [r7, #8]
   157cc:	3302      	adds	r3, #2
   157ce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connInterval, p);
   157d0:	68bb      	ldr	r3, [r7, #8]
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	b29a      	uxth	r2, r3
   157d6:	68bb      	ldr	r3, [r7, #8]
   157d8:	3301      	adds	r3, #1
   157da:	781b      	ldrb	r3, [r3, #0]
   157dc:	b29b      	uxth	r3, r3
   157de:	021b      	lsls	r3, r3, #8
   157e0:	b29b      	uxth	r3, r3
   157e2:	4413      	add	r3, r2
   157e4:	b29a      	uxth	r2, r3
   157e6:	68fb      	ldr	r3, [r7, #12]
   157e8:	811a      	strh	r2, [r3, #8]
   157ea:	68bb      	ldr	r3, [r7, #8]
   157ec:	3302      	adds	r3, #2
   157ee:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.connLatency, p);
   157f0:	68bb      	ldr	r3, [r7, #8]
   157f2:	781b      	ldrb	r3, [r3, #0]
   157f4:	b29a      	uxth	r2, r3
   157f6:	68bb      	ldr	r3, [r7, #8]
   157f8:	3301      	adds	r3, #1
   157fa:	781b      	ldrb	r3, [r3, #0]
   157fc:	b29b      	uxth	r3, r3
   157fe:	021b      	lsls	r3, r3, #8
   15800:	b29b      	uxth	r3, r3
   15802:	4413      	add	r3, r2
   15804:	b29a      	uxth	r2, r3
   15806:	68fb      	ldr	r3, [r7, #12]
   15808:	815a      	strh	r2, [r3, #10]
   1580a:	68bb      	ldr	r3, [r7, #8]
   1580c:	3302      	adds	r3, #2
   1580e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leConnUpdateCmpl.supTimeout, p);
   15810:	68bb      	ldr	r3, [r7, #8]
   15812:	781b      	ldrb	r3, [r3, #0]
   15814:	b29a      	uxth	r2, r3
   15816:	68bb      	ldr	r3, [r7, #8]
   15818:	3301      	adds	r3, #1
   1581a:	781b      	ldrb	r3, [r3, #0]
   1581c:	b29b      	uxth	r3, r3
   1581e:	021b      	lsls	r3, r3, #8
   15820:	b29b      	uxth	r3, r3
   15822:	4413      	add	r3, r2
   15824:	b29a      	uxth	r2, r3
   15826:	68fb      	ldr	r3, [r7, #12]
   15828:	819a      	strh	r2, [r3, #12]
   1582a:	68bb      	ldr	r3, [r7, #8]
   1582c:	3302      	adds	r3, #2
   1582e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leConnUpdateCmpl.handle;
   15830:	68fb      	ldr	r3, [r7, #12]
   15832:	88da      	ldrh	r2, [r3, #6]
   15834:	68fb      	ldr	r3, [r7, #12]
   15836:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leConnUpdateCmpl.status;
   15838:	68fb      	ldr	r3, [r7, #12]
   1583a:	791a      	ldrb	r2, [r3, #4]
   1583c:	68fb      	ldr	r3, [r7, #12]
   1583e:	70da      	strb	r2, [r3, #3]
}
   15840:	bf00      	nop
   15842:	3714      	adds	r7, #20
   15844:	46bd      	mov	sp, r7
   15846:	f85d 7b04 	ldr.w	r7, [sp], #4
   1584a:	4770      	bx	lr

0001584c <hciEvtParseLeCreateConnCancelCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCreateConnCancelCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1584c:	b480      	push	{r7}
   1584e:	b085      	sub	sp, #20
   15850:	af00      	add	r7, sp, #0
   15852:	60f8      	str	r0, [r7, #12]
   15854:	60b9      	str	r1, [r7, #8]
   15856:	4613      	mov	r3, r2
   15858:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leCreateConnCancelCmdCmpl.status, p);
   1585a:	68bb      	ldr	r3, [r7, #8]
   1585c:	1c5a      	adds	r2, r3, #1
   1585e:	60ba      	str	r2, [r7, #8]
   15860:	781a      	ldrb	r2, [r3, #0]
   15862:	68fb      	ldr	r3, [r7, #12]
   15864:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leCreateConnCancelCmdCmpl.status;
   15866:	68fb      	ldr	r3, [r7, #12]
   15868:	791a      	ldrb	r2, [r3, #4]
   1586a:	68fb      	ldr	r3, [r7, #12]
   1586c:	70da      	strb	r2, [r3, #3]
}
   1586e:	bf00      	nop
   15870:	3714      	adds	r7, #20
   15872:	46bd      	mov	sp, r7
   15874:	f85d 7b04 	ldr.w	r7, [sp], #4
   15878:	4770      	bx	lr

0001587a <hciEvtParseReadRssiCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRssiCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1587a:	b480      	push	{r7}
   1587c:	b085      	sub	sp, #20
   1587e:	af00      	add	r7, sp, #0
   15880:	60f8      	str	r0, [r7, #12]
   15882:	60b9      	str	r1, [r7, #8]
   15884:	4613      	mov	r3, r2
   15886:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.status, p);
   15888:	68bb      	ldr	r3, [r7, #8]
   1588a:	1c5a      	adds	r2, r3, #1
   1588c:	60ba      	str	r2, [r7, #8]
   1588e:	781a      	ldrb	r2, [r3, #0]
   15890:	68fb      	ldr	r3, [r7, #12]
   15892:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRssiCmdCmpl.handle, p);
   15894:	68bb      	ldr	r3, [r7, #8]
   15896:	781b      	ldrb	r3, [r3, #0]
   15898:	b29a      	uxth	r2, r3
   1589a:	68bb      	ldr	r3, [r7, #8]
   1589c:	3301      	adds	r3, #1
   1589e:	781b      	ldrb	r3, [r3, #0]
   158a0:	b29b      	uxth	r3, r3
   158a2:	021b      	lsls	r3, r3, #8
   158a4:	b29b      	uxth	r3, r3
   158a6:	4413      	add	r3, r2
   158a8:	b29a      	uxth	r2, r3
   158aa:	68fb      	ldr	r3, [r7, #12]
   158ac:	80da      	strh	r2, [r3, #6]
   158ae:	68bb      	ldr	r3, [r7, #8]
   158b0:	3302      	adds	r3, #2
   158b2:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRssiCmdCmpl.rssi, p);
   158b4:	68bb      	ldr	r3, [r7, #8]
   158b6:	1c5a      	adds	r2, r3, #1
   158b8:	60ba      	str	r2, [r7, #8]
   158ba:	781b      	ldrb	r3, [r3, #0]
   158bc:	b25a      	sxtb	r2, r3
   158be:	68fb      	ldr	r3, [r7, #12]
   158c0:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->readRssiCmdCmpl.handle;
   158c2:	68fb      	ldr	r3, [r7, #12]
   158c4:	88da      	ldrh	r2, [r3, #6]
   158c6:	68fb      	ldr	r3, [r7, #12]
   158c8:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRssiCmdCmpl.status;
   158ca:	68fb      	ldr	r3, [r7, #12]
   158cc:	791a      	ldrb	r2, [r3, #4]
   158ce:	68fb      	ldr	r3, [r7, #12]
   158d0:	70da      	strb	r2, [r3, #3]
}
   158d2:	bf00      	nop
   158d4:	3714      	adds	r7, #20
   158d6:	46bd      	mov	sp, r7
   158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   158dc:	4770      	bx	lr

000158de <hciEvtParseReadChanMapCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadChanMapCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   158de:	b580      	push	{r7, lr}
   158e0:	b084      	sub	sp, #16
   158e2:	af00      	add	r7, sp, #0
   158e4:	60f8      	str	r0, [r7, #12]
   158e6:	60b9      	str	r1, [r7, #8]
   158e8:	4613      	mov	r3, r2
   158ea:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readChanMapCmdCmpl.status, p);
   158ec:	68bb      	ldr	r3, [r7, #8]
   158ee:	1c5a      	adds	r2, r3, #1
   158f0:	60ba      	str	r2, [r7, #8]
   158f2:	781a      	ldrb	r2, [r3, #0]
   158f4:	68fb      	ldr	r3, [r7, #12]
   158f6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readChanMapCmdCmpl.handle, p);
   158f8:	68bb      	ldr	r3, [r7, #8]
   158fa:	781b      	ldrb	r3, [r3, #0]
   158fc:	b29a      	uxth	r2, r3
   158fe:	68bb      	ldr	r3, [r7, #8]
   15900:	3301      	adds	r3, #1
   15902:	781b      	ldrb	r3, [r3, #0]
   15904:	b29b      	uxth	r3, r3
   15906:	021b      	lsls	r3, r3, #8
   15908:	b29b      	uxth	r3, r3
   1590a:	4413      	add	r3, r2
   1590c:	b29a      	uxth	r2, r3
   1590e:	68fb      	ldr	r3, [r7, #12]
   15910:	80da      	strh	r2, [r3, #6]
   15912:	68bb      	ldr	r3, [r7, #8]
   15914:	3302      	adds	r3, #2
   15916:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->readChanMapCmdCmpl.chanMap, p, HCI_CHAN_MAP_LEN);
   15918:	68fb      	ldr	r3, [r7, #12]
   1591a:	3308      	adds	r3, #8
   1591c:	2205      	movs	r2, #5
   1591e:	68b9      	ldr	r1, [r7, #8]
   15920:	4618      	mov	r0, r3
   15922:	f7f6 fc1d 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->readChanMapCmdCmpl.handle;
   15926:	68fb      	ldr	r3, [r7, #12]
   15928:	88da      	ldrh	r2, [r3, #6]
   1592a:	68fb      	ldr	r3, [r7, #12]
   1592c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readChanMapCmdCmpl.status;
   1592e:	68fb      	ldr	r3, [r7, #12]
   15930:	791a      	ldrb	r2, [r3, #4]
   15932:	68fb      	ldr	r3, [r7, #12]
   15934:	70da      	strb	r2, [r3, #3]
}
   15936:	bf00      	nop
   15938:	3710      	adds	r7, #16
   1593a:	46bd      	mov	sp, r7
   1593c:	bd80      	pop	{r7, pc}

0001593e <hciEvtParseReadTxPwrLvlCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadTxPwrLvlCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1593e:	b480      	push	{r7}
   15940:	b085      	sub	sp, #20
   15942:	af00      	add	r7, sp, #0
   15944:	60f8      	str	r0, [r7, #12]
   15946:	60b9      	str	r1, [r7, #8]
   15948:	4613      	mov	r3, r2
   1594a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readTxPwrLvlCmdCmpl.status, p);
   1594c:	68bb      	ldr	r3, [r7, #8]
   1594e:	1c5a      	adds	r2, r3, #1
   15950:	60ba      	str	r2, [r7, #8]
   15952:	781a      	ldrb	r2, [r3, #0]
   15954:	68fb      	ldr	r3, [r7, #12]
   15956:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readTxPwrLvlCmdCmpl.handle, p);
   15958:	68bb      	ldr	r3, [r7, #8]
   1595a:	781a      	ldrb	r2, [r3, #0]
   1595c:	68fb      	ldr	r3, [r7, #12]
   1595e:	715a      	strb	r2, [r3, #5]
   15960:	68bb      	ldr	r3, [r7, #8]
   15962:	3302      	adds	r3, #2
   15964:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_INT8(pMsg->readTxPwrLvlCmdCmpl.pwrLvl, p);
   15966:	68bb      	ldr	r3, [r7, #8]
   15968:	1c5a      	adds	r2, r3, #1
   1596a:	60ba      	str	r2, [r7, #8]
   1596c:	781b      	ldrb	r3, [r3, #0]
   1596e:	b25a      	sxtb	r2, r3
   15970:	68fb      	ldr	r3, [r7, #12]
   15972:	719a      	strb	r2, [r3, #6]

  pMsg->hdr.param = pMsg->readTxPwrLvlCmdCmpl.handle;
   15974:	68fb      	ldr	r3, [r7, #12]
   15976:	795b      	ldrb	r3, [r3, #5]
   15978:	b29a      	uxth	r2, r3
   1597a:	68fb      	ldr	r3, [r7, #12]
   1597c:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readTxPwrLvlCmdCmpl.status;
   1597e:	68fb      	ldr	r3, [r7, #12]
   15980:	791a      	ldrb	r2, [r3, #4]
   15982:	68fb      	ldr	r3, [r7, #12]
   15984:	70da      	strb	r2, [r3, #3]
}
   15986:	bf00      	nop
   15988:	3714      	adds	r7, #20
   1598a:	46bd      	mov	sp, r7
   1598c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15990:	4770      	bx	lr

00015992 <hciEvtParseReadRemoteVerInfoCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadRemoteVerInfoCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15992:	b480      	push	{r7}
   15994:	b085      	sub	sp, #20
   15996:	af00      	add	r7, sp, #0
   15998:	60f8      	str	r0, [r7, #12]
   1599a:	60b9      	str	r1, [r7, #8]
   1599c:	4613      	mov	r3, r2
   1599e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.status, p);
   159a0:	68bb      	ldr	r3, [r7, #8]
   159a2:	1c5a      	adds	r2, r3, #1
   159a4:	60ba      	str	r2, [r7, #8]
   159a6:	781a      	ldrb	r2, [r3, #0]
   159a8:	68fb      	ldr	r3, [r7, #12]
   159aa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.handle, p);
   159ac:	68bb      	ldr	r3, [r7, #8]
   159ae:	781b      	ldrb	r3, [r3, #0]
   159b0:	b29a      	uxth	r2, r3
   159b2:	68bb      	ldr	r3, [r7, #8]
   159b4:	3301      	adds	r3, #1
   159b6:	781b      	ldrb	r3, [r3, #0]
   159b8:	b29b      	uxth	r3, r3
   159ba:	021b      	lsls	r3, r3, #8
   159bc:	b29b      	uxth	r3, r3
   159be:	4413      	add	r3, r2
   159c0:	b29a      	uxth	r2, r3
   159c2:	68fb      	ldr	r3, [r7, #12]
   159c4:	80da      	strh	r2, [r3, #6]
   159c6:	68bb      	ldr	r3, [r7, #8]
   159c8:	3302      	adds	r3, #2
   159ca:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->readRemoteVerInfoCmpl.version, p);
   159cc:	68bb      	ldr	r3, [r7, #8]
   159ce:	1c5a      	adds	r2, r3, #1
   159d0:	60ba      	str	r2, [r7, #8]
   159d2:	781a      	ldrb	r2, [r3, #0]
   159d4:	68fb      	ldr	r3, [r7, #12]
   159d6:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.mfrName, p);
   159d8:	68bb      	ldr	r3, [r7, #8]
   159da:	781b      	ldrb	r3, [r3, #0]
   159dc:	b29a      	uxth	r2, r3
   159de:	68bb      	ldr	r3, [r7, #8]
   159e0:	3301      	adds	r3, #1
   159e2:	781b      	ldrb	r3, [r3, #0]
   159e4:	b29b      	uxth	r3, r3
   159e6:	021b      	lsls	r3, r3, #8
   159e8:	b29b      	uxth	r3, r3
   159ea:	4413      	add	r3, r2
   159ec:	b29a      	uxth	r2, r3
   159ee:	68fb      	ldr	r3, [r7, #12]
   159f0:	815a      	strh	r2, [r3, #10]
   159f2:	68bb      	ldr	r3, [r7, #8]
   159f4:	3302      	adds	r3, #2
   159f6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->readRemoteVerInfoCmpl.subversion, p);
   159f8:	68bb      	ldr	r3, [r7, #8]
   159fa:	781b      	ldrb	r3, [r3, #0]
   159fc:	b29a      	uxth	r2, r3
   159fe:	68bb      	ldr	r3, [r7, #8]
   15a00:	3301      	adds	r3, #1
   15a02:	781b      	ldrb	r3, [r3, #0]
   15a04:	b29b      	uxth	r3, r3
   15a06:	021b      	lsls	r3, r3, #8
   15a08:	b29b      	uxth	r3, r3
   15a0a:	4413      	add	r3, r2
   15a0c:	b29a      	uxth	r2, r3
   15a0e:	68fb      	ldr	r3, [r7, #12]
   15a10:	819a      	strh	r2, [r3, #12]
   15a12:	68bb      	ldr	r3, [r7, #8]
   15a14:	3302      	adds	r3, #2
   15a16:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->readRemoteVerInfoCmpl.handle;
   15a18:	68fb      	ldr	r3, [r7, #12]
   15a1a:	88da      	ldrh	r2, [r3, #6]
   15a1c:	68fb      	ldr	r3, [r7, #12]
   15a1e:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->readRemoteVerInfoCmpl.status;
   15a20:	68fb      	ldr	r3, [r7, #12]
   15a22:	791a      	ldrb	r2, [r3, #4]
   15a24:	68fb      	ldr	r3, [r7, #12]
   15a26:	70da      	strb	r2, [r3, #3]
}
   15a28:	bf00      	nop
   15a2a:	3714      	adds	r7, #20
   15a2c:	46bd      	mov	sp, r7
   15a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15a32:	4770      	bx	lr

00015a34 <hciEvtParseReadLeRemoteFeatCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadLeRemoteFeatCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15a34:	b580      	push	{r7, lr}
   15a36:	b084      	sub	sp, #16
   15a38:	af00      	add	r7, sp, #0
   15a3a:	60f8      	str	r0, [r7, #12]
   15a3c:	60b9      	str	r1, [r7, #8]
   15a3e:	4613      	mov	r3, r2
   15a40:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadRemoteFeatCmpl.status, p);
   15a42:	68bb      	ldr	r3, [r7, #8]
   15a44:	1c5a      	adds	r2, r3, #1
   15a46:	60ba      	str	r2, [r7, #8]
   15a48:	781a      	ldrb	r2, [r3, #0]
   15a4a:	68fb      	ldr	r3, [r7, #12]
   15a4c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadRemoteFeatCmpl.handle, p);
   15a4e:	68bb      	ldr	r3, [r7, #8]
   15a50:	781b      	ldrb	r3, [r3, #0]
   15a52:	b29a      	uxth	r2, r3
   15a54:	68bb      	ldr	r3, [r7, #8]
   15a56:	3301      	adds	r3, #1
   15a58:	781b      	ldrb	r3, [r3, #0]
   15a5a:	b29b      	uxth	r3, r3
   15a5c:	021b      	lsls	r3, r3, #8
   15a5e:	b29b      	uxth	r3, r3
   15a60:	4413      	add	r3, r2
   15a62:	b29a      	uxth	r2, r3
   15a64:	68fb      	ldr	r3, [r7, #12]
   15a66:	80da      	strh	r2, [r3, #6]
   15a68:	68bb      	ldr	r3, [r7, #8]
   15a6a:	3302      	adds	r3, #2
   15a6c:	60bb      	str	r3, [r7, #8]
  memcpy(&pMsg->leReadRemoteFeatCmpl.features, p, HCI_FEAT_LEN);
   15a6e:	68fb      	ldr	r3, [r7, #12]
   15a70:	3308      	adds	r3, #8
   15a72:	2208      	movs	r2, #8
   15a74:	68b9      	ldr	r1, [r7, #8]
   15a76:	4618      	mov	r0, r3
   15a78:	f7f6 fb72 	bl	c160 <memcpy>

  pMsg->hdr.param = pMsg->leReadRemoteFeatCmpl.handle;
   15a7c:	68fb      	ldr	r3, [r7, #12]
   15a7e:	88da      	ldrh	r2, [r3, #6]
   15a80:	68fb      	ldr	r3, [r7, #12]
   15a82:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leReadRemoteFeatCmpl.status;
   15a84:	68fb      	ldr	r3, [r7, #12]
   15a86:	791a      	ldrb	r2, [r3, #4]
   15a88:	68fb      	ldr	r3, [r7, #12]
   15a8a:	70da      	strb	r2, [r3, #3]
}
   15a8c:	bf00      	nop
   15a8e:	3710      	adds	r7, #16
   15a90:	46bd      	mov	sp, r7
   15a92:	bd80      	pop	{r7, pc}

00015a94 <hciEvtParseLeLtkReqReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15a94:	b480      	push	{r7}
   15a96:	b085      	sub	sp, #20
   15a98:	af00      	add	r7, sp, #0
   15a9a:	60f8      	str	r0, [r7, #12]
   15a9c:	60b9      	str	r1, [r7, #8]
   15a9e:	4613      	mov	r3, r2
   15aa0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqReplCmdCmpl.status, p);
   15aa2:	68bb      	ldr	r3, [r7, #8]
   15aa4:	1c5a      	adds	r2, r3, #1
   15aa6:	60ba      	str	r2, [r7, #8]
   15aa8:	781a      	ldrb	r2, [r3, #0]
   15aaa:	68fb      	ldr	r3, [r7, #12]
   15aac:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqReplCmdCmpl.handle, p);
   15aae:	68bb      	ldr	r3, [r7, #8]
   15ab0:	781b      	ldrb	r3, [r3, #0]
   15ab2:	b29a      	uxth	r2, r3
   15ab4:	68bb      	ldr	r3, [r7, #8]
   15ab6:	3301      	adds	r3, #1
   15ab8:	781b      	ldrb	r3, [r3, #0]
   15aba:	b29b      	uxth	r3, r3
   15abc:	021b      	lsls	r3, r3, #8
   15abe:	b29b      	uxth	r3, r3
   15ac0:	4413      	add	r3, r2
   15ac2:	b29a      	uxth	r2, r3
   15ac4:	68fb      	ldr	r3, [r7, #12]
   15ac6:	80da      	strh	r2, [r3, #6]
   15ac8:	68bb      	ldr	r3, [r7, #8]
   15aca:	3302      	adds	r3, #2
   15acc:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqReplCmdCmpl.handle;
   15ace:	68fb      	ldr	r3, [r7, #12]
   15ad0:	88da      	ldrh	r2, [r3, #6]
   15ad2:	68fb      	ldr	r3, [r7, #12]
   15ad4:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqReplCmdCmpl.status;
   15ad6:	68fb      	ldr	r3, [r7, #12]
   15ad8:	791a      	ldrb	r2, [r3, #4]
   15ada:	68fb      	ldr	r3, [r7, #12]
   15adc:	70da      	strb	r2, [r3, #3]
}
   15ade:	bf00      	nop
   15ae0:	3714      	adds	r7, #20
   15ae2:	46bd      	mov	sp, r7
   15ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ae8:	4770      	bx	lr

00015aea <hciEvtParseLeLtkReqNegReplCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReqNegReplCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15aea:	b480      	push	{r7}
   15aec:	b085      	sub	sp, #20
   15aee:	af00      	add	r7, sp, #0
   15af0:	60f8      	str	r0, [r7, #12]
   15af2:	60b9      	str	r1, [r7, #8]
   15af4:	4613      	mov	r3, r2
   15af6:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leLtkReqNegReplCmdCmpl.status, p);
   15af8:	68bb      	ldr	r3, [r7, #8]
   15afa:	1c5a      	adds	r2, r3, #1
   15afc:	60ba      	str	r2, [r7, #8]
   15afe:	781a      	ldrb	r2, [r3, #0]
   15b00:	68fb      	ldr	r3, [r7, #12]
   15b02:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leLtkReqNegReplCmdCmpl.handle, p);
   15b04:	68bb      	ldr	r3, [r7, #8]
   15b06:	781b      	ldrb	r3, [r3, #0]
   15b08:	b29a      	uxth	r2, r3
   15b0a:	68bb      	ldr	r3, [r7, #8]
   15b0c:	3301      	adds	r3, #1
   15b0e:	781b      	ldrb	r3, [r3, #0]
   15b10:	b29b      	uxth	r3, r3
   15b12:	021b      	lsls	r3, r3, #8
   15b14:	b29b      	uxth	r3, r3
   15b16:	4413      	add	r3, r2
   15b18:	b29a      	uxth	r2, r3
   15b1a:	68fb      	ldr	r3, [r7, #12]
   15b1c:	80da      	strh	r2, [r3, #6]
   15b1e:	68bb      	ldr	r3, [r7, #8]
   15b20:	3302      	adds	r3, #2
   15b22:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReqNegReplCmdCmpl.handle;
   15b24:	68fb      	ldr	r3, [r7, #12]
   15b26:	88da      	ldrh	r2, [r3, #6]
   15b28:	68fb      	ldr	r3, [r7, #12]
   15b2a:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->leLtkReqNegReplCmdCmpl.status;
   15b2c:	68fb      	ldr	r3, [r7, #12]
   15b2e:	791a      	ldrb	r2, [r3, #4]
   15b30:	68fb      	ldr	r3, [r7, #12]
   15b32:	70da      	strb	r2, [r3, #3]
}
   15b34:	bf00      	nop
   15b36:	3714      	adds	r7, #20
   15b38:	46bd      	mov	sp, r7
   15b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b3e:	4770      	bx	lr

00015b40 <hciEvtParseEncKeyRefreshCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncKeyRefreshCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15b40:	b480      	push	{r7}
   15b42:	b085      	sub	sp, #20
   15b44:	af00      	add	r7, sp, #0
   15b46:	60f8      	str	r0, [r7, #12]
   15b48:	60b9      	str	r1, [r7, #8]
   15b4a:	4613      	mov	r3, r2
   15b4c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encKeyRefreshCmpl.status, p);
   15b4e:	68bb      	ldr	r3, [r7, #8]
   15b50:	1c5a      	adds	r2, r3, #1
   15b52:	60ba      	str	r2, [r7, #8]
   15b54:	781a      	ldrb	r2, [r3, #0]
   15b56:	68fb      	ldr	r3, [r7, #12]
   15b58:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encKeyRefreshCmpl.handle, p);
   15b5a:	68bb      	ldr	r3, [r7, #8]
   15b5c:	781b      	ldrb	r3, [r3, #0]
   15b5e:	b29a      	uxth	r2, r3
   15b60:	68bb      	ldr	r3, [r7, #8]
   15b62:	3301      	adds	r3, #1
   15b64:	781b      	ldrb	r3, [r3, #0]
   15b66:	b29b      	uxth	r3, r3
   15b68:	021b      	lsls	r3, r3, #8
   15b6a:	b29b      	uxth	r3, r3
   15b6c:	4413      	add	r3, r2
   15b6e:	b29a      	uxth	r2, r3
   15b70:	68fb      	ldr	r3, [r7, #12]
   15b72:	80da      	strh	r2, [r3, #6]
   15b74:	68bb      	ldr	r3, [r7, #8]
   15b76:	3302      	adds	r3, #2
   15b78:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->encKeyRefreshCmpl.handle;
   15b7a:	68fb      	ldr	r3, [r7, #12]
   15b7c:	88da      	ldrh	r2, [r3, #6]
   15b7e:	68fb      	ldr	r3, [r7, #12]
   15b80:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encKeyRefreshCmpl.status;
   15b82:	68fb      	ldr	r3, [r7, #12]
   15b84:	791a      	ldrb	r2, [r3, #4]
   15b86:	68fb      	ldr	r3, [r7, #12]
   15b88:	70da      	strb	r2, [r3, #3]
}
   15b8a:	bf00      	nop
   15b8c:	3714      	adds	r7, #20
   15b8e:	46bd      	mov	sp, r7
   15b90:	f85d 7b04 	ldr.w	r7, [sp], #4
   15b94:	4770      	bx	lr

00015b96 <hciEvtParseEncChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseEncChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15b96:	b480      	push	{r7}
   15b98:	b085      	sub	sp, #20
   15b9a:	af00      	add	r7, sp, #0
   15b9c:	60f8      	str	r0, [r7, #12]
   15b9e:	60b9      	str	r1, [r7, #8]
   15ba0:	4613      	mov	r3, r2
   15ba2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->encChange.status, p);
   15ba4:	68bb      	ldr	r3, [r7, #8]
   15ba6:	1c5a      	adds	r2, r3, #1
   15ba8:	60ba      	str	r2, [r7, #8]
   15baa:	781a      	ldrb	r2, [r3, #0]
   15bac:	68fb      	ldr	r3, [r7, #12]
   15bae:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->encChange.handle, p);
   15bb0:	68bb      	ldr	r3, [r7, #8]
   15bb2:	781b      	ldrb	r3, [r3, #0]
   15bb4:	b29a      	uxth	r2, r3
   15bb6:	68bb      	ldr	r3, [r7, #8]
   15bb8:	3301      	adds	r3, #1
   15bba:	781b      	ldrb	r3, [r3, #0]
   15bbc:	b29b      	uxth	r3, r3
   15bbe:	021b      	lsls	r3, r3, #8
   15bc0:	b29b      	uxth	r3, r3
   15bc2:	4413      	add	r3, r2
   15bc4:	b29a      	uxth	r2, r3
   15bc6:	68fb      	ldr	r3, [r7, #12]
   15bc8:	80da      	strh	r2, [r3, #6]
   15bca:	68bb      	ldr	r3, [r7, #8]
   15bcc:	3302      	adds	r3, #2
   15bce:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->encChange.enabled, p);
   15bd0:	68bb      	ldr	r3, [r7, #8]
   15bd2:	1c5a      	adds	r2, r3, #1
   15bd4:	60ba      	str	r2, [r7, #8]
   15bd6:	781a      	ldrb	r2, [r3, #0]
   15bd8:	68fb      	ldr	r3, [r7, #12]
   15bda:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.param = pMsg->encChange.handle;
   15bdc:	68fb      	ldr	r3, [r7, #12]
   15bde:	88da      	ldrh	r2, [r3, #6]
   15be0:	68fb      	ldr	r3, [r7, #12]
   15be2:	801a      	strh	r2, [r3, #0]
  pMsg->hdr.status = pMsg->encChange.status;
   15be4:	68fb      	ldr	r3, [r7, #12]
   15be6:	791a      	ldrb	r2, [r3, #4]
   15be8:	68fb      	ldr	r3, [r7, #12]
   15bea:	70da      	strb	r2, [r3, #3]
}
   15bec:	bf00      	nop
   15bee:	3714      	adds	r7, #20
   15bf0:	46bd      	mov	sp, r7
   15bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15bf6:	4770      	bx	lr

00015bf8 <hciEvtParseLeLtkReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeLtkReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15bf8:	b580      	push	{r7, lr}
   15bfa:	b084      	sub	sp, #16
   15bfc:	af00      	add	r7, sp, #0
   15bfe:	60f8      	str	r0, [r7, #12]
   15c00:	60b9      	str	r1, [r7, #8]
   15c02:	4613      	mov	r3, r2
   15c04:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leLtkReq.handle, p);
   15c06:	68bb      	ldr	r3, [r7, #8]
   15c08:	781b      	ldrb	r3, [r3, #0]
   15c0a:	b29a      	uxth	r2, r3
   15c0c:	68bb      	ldr	r3, [r7, #8]
   15c0e:	3301      	adds	r3, #1
   15c10:	781b      	ldrb	r3, [r3, #0]
   15c12:	b29b      	uxth	r3, r3
   15c14:	021b      	lsls	r3, r3, #8
   15c16:	b29b      	uxth	r3, r3
   15c18:	4413      	add	r3, r2
   15c1a:	b29a      	uxth	r2, r3
   15c1c:	68fb      	ldr	r3, [r7, #12]
   15c1e:	809a      	strh	r2, [r3, #4]
   15c20:	68bb      	ldr	r3, [r7, #8]
   15c22:	3302      	adds	r3, #2
   15c24:	60bb      	str	r3, [r7, #8]

  memcpy(pMsg->leLtkReq.randNum, p, HCI_RAND_LEN);
   15c26:	68fb      	ldr	r3, [r7, #12]
   15c28:	3306      	adds	r3, #6
   15c2a:	2208      	movs	r2, #8
   15c2c:	68b9      	ldr	r1, [r7, #8]
   15c2e:	4618      	mov	r0, r3
   15c30:	f7f6 fa96 	bl	c160 <memcpy>
  p += HCI_RAND_LEN;
   15c34:	68bb      	ldr	r3, [r7, #8]
   15c36:	3308      	adds	r3, #8
   15c38:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->leLtkReq.encDiversifier, p);
   15c3a:	68bb      	ldr	r3, [r7, #8]
   15c3c:	781b      	ldrb	r3, [r3, #0]
   15c3e:	b29a      	uxth	r2, r3
   15c40:	68bb      	ldr	r3, [r7, #8]
   15c42:	3301      	adds	r3, #1
   15c44:	781b      	ldrb	r3, [r3, #0]
   15c46:	b29b      	uxth	r3, r3
   15c48:	021b      	lsls	r3, r3, #8
   15c4a:	b29b      	uxth	r3, r3
   15c4c:	4413      	add	r3, r2
   15c4e:	b29a      	uxth	r2, r3
   15c50:	68fb      	ldr	r3, [r7, #12]
   15c52:	81da      	strh	r2, [r3, #14]
   15c54:	68bb      	ldr	r3, [r7, #8]
   15c56:	3302      	adds	r3, #2
   15c58:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leLtkReq.handle;
   15c5a:	68fb      	ldr	r3, [r7, #12]
   15c5c:	889a      	ldrh	r2, [r3, #4]
   15c5e:	68fb      	ldr	r3, [r7, #12]
   15c60:	801a      	strh	r2, [r3, #0]
}
   15c62:	bf00      	nop
   15c64:	3710      	adds	r7, #16
   15c66:	46bd      	mov	sp, r7
   15c68:	bd80      	pop	{r7, pc}

00015c6a <hciEvtParseVendorSpecCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdStatus(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15c6a:	b480      	push	{r7}
   15c6c:	b085      	sub	sp, #20
   15c6e:	af00      	add	r7, sp, #0
   15c70:	60f8      	str	r0, [r7, #12]
   15c72:	60b9      	str	r1, [r7, #8]
   15c74:	4613      	mov	r3, r2
   15c76:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdStatus.opcode, p);
   15c78:	68bb      	ldr	r3, [r7, #8]
   15c7a:	781b      	ldrb	r3, [r3, #0]
   15c7c:	b29a      	uxth	r2, r3
   15c7e:	68bb      	ldr	r3, [r7, #8]
   15c80:	3301      	adds	r3, #1
   15c82:	781b      	ldrb	r3, [r3, #0]
   15c84:	b29b      	uxth	r3, r3
   15c86:	021b      	lsls	r3, r3, #8
   15c88:	b29b      	uxth	r3, r3
   15c8a:	4413      	add	r3, r2
   15c8c:	b29a      	uxth	r2, r3
   15c8e:	68fb      	ldr	r3, [r7, #12]
   15c90:	809a      	strh	r2, [r3, #4]
   15c92:	68bb      	ldr	r3, [r7, #8]
   15c94:	3302      	adds	r3, #2
   15c96:	60bb      	str	r3, [r7, #8]
}
   15c98:	bf00      	nop
   15c9a:	3714      	adds	r7, #20
   15c9c:	46bd      	mov	sp, r7
   15c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ca2:	4770      	bx	lr

00015ca4 <hciEvtParseVendorSpecCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpecCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15ca4:	b580      	push	{r7, lr}
   15ca6:	b084      	sub	sp, #16
   15ca8:	af00      	add	r7, sp, #0
   15caa:	60f8      	str	r0, [r7, #12]
   15cac:	60b9      	str	r1, [r7, #8]
   15cae:	4613      	mov	r3, r2
   15cb0:	71fb      	strb	r3, [r7, #7]
  /* roll pointer back to opcode */
  p -= 2;
   15cb2:	68bb      	ldr	r3, [r7, #8]
   15cb4:	3b02      	subs	r3, #2
   15cb6:	60bb      	str	r3, [r7, #8]

  BSTREAM_TO_UINT16(pMsg->vendorSpecCmdCmpl.opcode, p);
   15cb8:	68bb      	ldr	r3, [r7, #8]
   15cba:	781b      	ldrb	r3, [r3, #0]
   15cbc:	b29a      	uxth	r2, r3
   15cbe:	68bb      	ldr	r3, [r7, #8]
   15cc0:	3301      	adds	r3, #1
   15cc2:	781b      	ldrb	r3, [r3, #0]
   15cc4:	b29b      	uxth	r3, r3
   15cc6:	021b      	lsls	r3, r3, #8
   15cc8:	b29b      	uxth	r3, r3
   15cca:	4413      	add	r3, r2
   15ccc:	b29a      	uxth	r2, r3
   15cce:	68fb      	ldr	r3, [r7, #12]
   15cd0:	809a      	strh	r2, [r3, #4]
   15cd2:	68bb      	ldr	r3, [r7, #8]
   15cd4:	3302      	adds	r3, #2
   15cd6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   15cd8:	68bb      	ldr	r3, [r7, #8]
   15cda:	1c5a      	adds	r2, r3, #1
   15cdc:	60ba      	str	r2, [r7, #8]
   15cde:	781a      	ldrb	r2, [r3, #0]
   15ce0:	68fb      	ldr	r3, [r7, #12]
   15ce2:	70da      	strb	r2, [r3, #3]
  memcpy(&pMsg->vendorSpecCmdCmpl.param[0], p, len - 4);
   15ce4:	68fb      	ldr	r3, [r7, #12]
   15ce6:	1d98      	adds	r0, r3, #6
   15ce8:	79fb      	ldrb	r3, [r7, #7]
   15cea:	3b04      	subs	r3, #4
   15cec:	461a      	mov	r2, r3
   15cee:	68b9      	ldr	r1, [r7, #8]
   15cf0:	f7f6 fa36 	bl	c160 <memcpy>
}
   15cf4:	bf00      	nop
   15cf6:	3710      	adds	r7, #16
   15cf8:	46bd      	mov	sp, r7
   15cfa:	bd80      	pop	{r7, pc}

00015cfc <hciEvtParseVendorSpec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseVendorSpec(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15cfc:	b580      	push	{r7, lr}
   15cfe:	b084      	sub	sp, #16
   15d00:	af00      	add	r7, sp, #0
   15d02:	60f8      	str	r0, [r7, #12]
   15d04:	60b9      	str	r1, [r7, #8]
   15d06:	4613      	mov	r3, r2
   15d08:	71fb      	strb	r3, [r7, #7]
  memcpy(pMsg->vendorSpec.param, p, len);
   15d0a:	68fb      	ldr	r3, [r7, #12]
   15d0c:	3304      	adds	r3, #4
   15d0e:	79fa      	ldrb	r2, [r7, #7]
   15d10:	68b9      	ldr	r1, [r7, #8]
   15d12:	4618      	mov	r0, r3
   15d14:	f7f6 fa24 	bl	c160 <memcpy>
}
   15d18:	bf00      	nop
   15d1a:	3710      	adds	r7, #16
   15d1c:	46bd      	mov	sp, r7
   15d1e:	bd80      	pop	{r7, pc}

00015d20 <hciEvtParseHwError>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseHwError(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15d20:	b480      	push	{r7}
   15d22:	b085      	sub	sp, #20
   15d24:	af00      	add	r7, sp, #0
   15d26:	60f8      	str	r0, [r7, #12]
   15d28:	60b9      	str	r1, [r7, #8]
   15d2a:	4613      	mov	r3, r2
   15d2c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hwError.code, p);
   15d2e:	68bb      	ldr	r3, [r7, #8]
   15d30:	1c5a      	adds	r2, r3, #1
   15d32:	60ba      	str	r2, [r7, #8]
   15d34:	781a      	ldrb	r2, [r3, #0]
   15d36:	68fb      	ldr	r3, [r7, #12]
   15d38:	711a      	strb	r2, [r3, #4]
}
   15d3a:	bf00      	nop
   15d3c:	3714      	adds	r7, #20
   15d3e:	46bd      	mov	sp, r7
   15d40:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d44:	4770      	bx	lr

00015d46 <hciEvtParseLeEncryptCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeEncryptCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15d46:	b580      	push	{r7, lr}
   15d48:	b084      	sub	sp, #16
   15d4a:	af00      	add	r7, sp, #0
   15d4c:	60f8      	str	r0, [r7, #12]
   15d4e:	60b9      	str	r1, [r7, #8]
   15d50:	4613      	mov	r3, r2
   15d52:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leEncryptCmdCmpl.status, p);
   15d54:	68bb      	ldr	r3, [r7, #8]
   15d56:	1c5a      	adds	r2, r3, #1
   15d58:	60ba      	str	r2, [r7, #8]
   15d5a:	781a      	ldrb	r2, [r3, #0]
   15d5c:	68fb      	ldr	r3, [r7, #12]
   15d5e:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leEncryptCmdCmpl.data, p, HCI_ENCRYPT_DATA_LEN);
   15d60:	68fb      	ldr	r3, [r7, #12]
   15d62:	3305      	adds	r3, #5
   15d64:	2210      	movs	r2, #16
   15d66:	68b9      	ldr	r1, [r7, #8]
   15d68:	4618      	mov	r0, r3
   15d6a:	f7f6 f9f9 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leEncryptCmdCmpl.status;
   15d6e:	68fb      	ldr	r3, [r7, #12]
   15d70:	791a      	ldrb	r2, [r3, #4]
   15d72:	68fb      	ldr	r3, [r7, #12]
   15d74:	70da      	strb	r2, [r3, #3]
}
   15d76:	bf00      	nop
   15d78:	3710      	adds	r7, #16
   15d7a:	46bd      	mov	sp, r7
   15d7c:	bd80      	pop	{r7, pc}

00015d7e <hciEvtParseLeRandCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRandCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15d7e:	b580      	push	{r7, lr}
   15d80:	b084      	sub	sp, #16
   15d82:	af00      	add	r7, sp, #0
   15d84:	60f8      	str	r0, [r7, #12]
   15d86:	60b9      	str	r1, [r7, #8]
   15d88:	4613      	mov	r3, r2
   15d8a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRandCmdCmpl.status, p);
   15d8c:	68bb      	ldr	r3, [r7, #8]
   15d8e:	1c5a      	adds	r2, r3, #1
   15d90:	60ba      	str	r2, [r7, #8]
   15d92:	781a      	ldrb	r2, [r3, #0]
   15d94:	68fb      	ldr	r3, [r7, #12]
   15d96:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leRandCmdCmpl.randNum, p, HCI_RAND_LEN);
   15d98:	68fb      	ldr	r3, [r7, #12]
   15d9a:	3305      	adds	r3, #5
   15d9c:	2208      	movs	r2, #8
   15d9e:	68b9      	ldr	r1, [r7, #8]
   15da0:	4618      	mov	r0, r3
   15da2:	f7f6 f9dd 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leRandCmdCmpl.status;
   15da6:	68fb      	ldr	r3, [r7, #12]
   15da8:	791a      	ldrb	r2, [r3, #4]
   15daa:	68fb      	ldr	r3, [r7, #12]
   15dac:	70da      	strb	r2, [r3, #3]
}
   15dae:	bf00      	nop
   15db0:	3710      	adds	r7, #16
   15db2:	46bd      	mov	sp, r7
   15db4:	bd80      	pop	{r7, pc}

00015db6 <hciEvtParseLeAddDevToResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAddDevToResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15db6:	b480      	push	{r7}
   15db8:	b085      	sub	sp, #20
   15dba:	af00      	add	r7, sp, #0
   15dbc:	60f8      	str	r0, [r7, #12]
   15dbe:	60b9      	str	r1, [r7, #8]
   15dc0:	4613      	mov	r3, r2
   15dc2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAddDevToResListCmdCmpl.status, p);
   15dc4:	68bb      	ldr	r3, [r7, #8]
   15dc6:	1c5a      	adds	r2, r3, #1
   15dc8:	60ba      	str	r2, [r7, #8]
   15dca:	781a      	ldrb	r2, [r3, #0]
   15dcc:	68fb      	ldr	r3, [r7, #12]
   15dce:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leAddDevToResListCmdCmpl.status;
   15dd0:	68fb      	ldr	r3, [r7, #12]
   15dd2:	791a      	ldrb	r2, [r3, #4]
   15dd4:	68fb      	ldr	r3, [r7, #12]
   15dd6:	70da      	strb	r2, [r3, #3]
}
   15dd8:	bf00      	nop
   15dda:	3714      	adds	r7, #20
   15ddc:	46bd      	mov	sp, r7
   15dde:	f85d 7b04 	ldr.w	r7, [sp], #4
   15de2:	4770      	bx	lr

00015de4 <hciEvtParseLeRemDevFromResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeRemDevFromResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15de4:	b480      	push	{r7}
   15de6:	b085      	sub	sp, #20
   15de8:	af00      	add	r7, sp, #0
   15dea:	60f8      	str	r0, [r7, #12]
   15dec:	60b9      	str	r1, [r7, #8]
   15dee:	4613      	mov	r3, r2
   15df0:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemDevFromResListCmdCmpl.status, p);
   15df2:	68bb      	ldr	r3, [r7, #8]
   15df4:	1c5a      	adds	r2, r3, #1
   15df6:	60ba      	str	r2, [r7, #8]
   15df8:	781a      	ldrb	r2, [r3, #0]
   15dfa:	68fb      	ldr	r3, [r7, #12]
   15dfc:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leRemDevFromResListCmdCmpl.status;
   15dfe:	68fb      	ldr	r3, [r7, #12]
   15e00:	791a      	ldrb	r2, [r3, #4]
   15e02:	68fb      	ldr	r3, [r7, #12]
   15e04:	70da      	strb	r2, [r3, #3]
}
   15e06:	bf00      	nop
   15e08:	3714      	adds	r7, #20
   15e0a:	46bd      	mov	sp, r7
   15e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e10:	4770      	bx	lr

00015e12 <hciEvtParseLeClearResListCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeClearResListCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e12:	b480      	push	{r7}
   15e14:	b085      	sub	sp, #20
   15e16:	af00      	add	r7, sp, #0
   15e18:	60f8      	str	r0, [r7, #12]
   15e1a:	60b9      	str	r1, [r7, #8]
   15e1c:	4613      	mov	r3, r2
   15e1e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leClearResListCmdCmpl.status, p);
   15e20:	68bb      	ldr	r3, [r7, #8]
   15e22:	1c5a      	adds	r2, r3, #1
   15e24:	60ba      	str	r2, [r7, #8]
   15e26:	781a      	ldrb	r2, [r3, #0]
   15e28:	68fb      	ldr	r3, [r7, #12]
   15e2a:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leClearResListCmdCmpl.status;
   15e2c:	68fb      	ldr	r3, [r7, #12]
   15e2e:	791a      	ldrb	r2, [r3, #4]
   15e30:	68fb      	ldr	r3, [r7, #12]
   15e32:	70da      	strb	r2, [r3, #3]
}
   15e34:	bf00      	nop
   15e36:	3714      	adds	r7, #20
   15e38:	46bd      	mov	sp, r7
   15e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e3e:	4770      	bx	lr

00015e40 <hciEvtParseLeReadPeerResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadPeerResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e40:	b580      	push	{r7, lr}
   15e42:	b084      	sub	sp, #16
   15e44:	af00      	add	r7, sp, #0
   15e46:	60f8      	str	r0, [r7, #12]
   15e48:	60b9      	str	r1, [r7, #8]
   15e4a:	4613      	mov	r3, r2
   15e4c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPeerResAddrCmdCmpl.status, p);
   15e4e:	68bb      	ldr	r3, [r7, #8]
   15e50:	1c5a      	adds	r2, r3, #1
   15e52:	60ba      	str	r2, [r7, #8]
   15e54:	781a      	ldrb	r2, [r3, #0]
   15e56:	68fb      	ldr	r3, [r7, #12]
   15e58:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadPeerResAddrCmdCmpl.peerRpa, p);
   15e5a:	68fb      	ldr	r3, [r7, #12]
   15e5c:	3305      	adds	r3, #5
   15e5e:	68b9      	ldr	r1, [r7, #8]
   15e60:	4618      	mov	r0, r3
   15e62:	f002 fcc1 	bl	187e8 <BdaCpy>
   15e66:	68bb      	ldr	r3, [r7, #8]
   15e68:	3306      	adds	r3, #6
   15e6a:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadPeerResAddrCmdCmpl.status;
   15e6c:	68fb      	ldr	r3, [r7, #12]
   15e6e:	791a      	ldrb	r2, [r3, #4]
   15e70:	68fb      	ldr	r3, [r7, #12]
   15e72:	70da      	strb	r2, [r3, #3]
}
   15e74:	bf00      	nop
   15e76:	3710      	adds	r7, #16
   15e78:	46bd      	mov	sp, r7
   15e7a:	bd80      	pop	{r7, pc}

00015e7c <hciEvtParseLeReadLocalResAddrCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeReadLocalResAddrCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15e7c:	b580      	push	{r7, lr}
   15e7e:	b084      	sub	sp, #16
   15e80:	af00      	add	r7, sp, #0
   15e82:	60f8      	str	r0, [r7, #12]
   15e84:	60b9      	str	r1, [r7, #8]
   15e86:	4613      	mov	r3, r2
   15e88:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadLocalResAddrCmdCmpl.status, p);
   15e8a:	68bb      	ldr	r3, [r7, #8]
   15e8c:	1c5a      	adds	r2, r3, #1
   15e8e:	60ba      	str	r2, [r7, #8]
   15e90:	781a      	ldrb	r2, [r3, #0]
   15e92:	68fb      	ldr	r3, [r7, #12]
   15e94:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_BDA(pMsg->leReadLocalResAddrCmdCmpl.localRpa, p);
   15e96:	68fb      	ldr	r3, [r7, #12]
   15e98:	3305      	adds	r3, #5
   15e9a:	68b9      	ldr	r1, [r7, #8]
   15e9c:	4618      	mov	r0, r3
   15e9e:	f002 fca3 	bl	187e8 <BdaCpy>
   15ea2:	68bb      	ldr	r3, [r7, #8]
   15ea4:	3306      	adds	r3, #6
   15ea6:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadLocalResAddrCmdCmpl.status;
   15ea8:	68fb      	ldr	r3, [r7, #12]
   15eaa:	791a      	ldrb	r2, [r3, #4]
   15eac:	68fb      	ldr	r3, [r7, #12]
   15eae:	70da      	strb	r2, [r3, #3]
}
   15eb0:	bf00      	nop
   15eb2:	3710      	adds	r7, #16
   15eb4:	46bd      	mov	sp, r7
   15eb6:	bd80      	pop	{r7, pc}

00015eb8 <hciEvtParseLeSetAddrResEnableCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeSetAddrResEnableCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15eb8:	b480      	push	{r7}
   15eba:	b085      	sub	sp, #20
   15ebc:	af00      	add	r7, sp, #0
   15ebe:	60f8      	str	r0, [r7, #12]
   15ec0:	60b9      	str	r1, [r7, #8]
   15ec2:	4613      	mov	r3, r2
   15ec4:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetAddrResEnableCmdCmpl.status, p);
   15ec6:	68bb      	ldr	r3, [r7, #8]
   15ec8:	1c5a      	adds	r2, r3, #1
   15eca:	60ba      	str	r2, [r7, #8]
   15ecc:	781a      	ldrb	r2, [r3, #0]
   15ece:	68fb      	ldr	r3, [r7, #12]
   15ed0:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetAddrResEnableCmdCmpl.status;
   15ed2:	68fb      	ldr	r3, [r7, #12]
   15ed4:	791a      	ldrb	r2, [r3, #4]
   15ed6:	68fb      	ldr	r3, [r7, #12]
   15ed8:	70da      	strb	r2, [r3, #3]
}
   15eda:	bf00      	nop
   15edc:	3714      	adds	r7, #20
   15ede:	46bd      	mov	sp, r7
   15ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ee4:	4770      	bx	lr

00015ee6 <hciEvtParseRemConnParamRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15ee6:	b480      	push	{r7}
   15ee8:	b085      	sub	sp, #20
   15eea:	af00      	add	r7, sp, #0
   15eec:	60f8      	str	r0, [r7, #12]
   15eee:	60b9      	str	r1, [r7, #8]
   15ef0:	4613      	mov	r3, r2
   15ef2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamRepCmdCmpl.status, p);
   15ef4:	68bb      	ldr	r3, [r7, #8]
   15ef6:	1c5a      	adds	r2, r3, #1
   15ef8:	60ba      	str	r2, [r7, #8]
   15efa:	781a      	ldrb	r2, [r3, #0]
   15efc:	68fb      	ldr	r3, [r7, #12]
   15efe:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamRepCmdCmpl.handle, p);
   15f00:	68bb      	ldr	r3, [r7, #8]
   15f02:	781b      	ldrb	r3, [r3, #0]
   15f04:	b29a      	uxth	r2, r3
   15f06:	68bb      	ldr	r3, [r7, #8]
   15f08:	3301      	adds	r3, #1
   15f0a:	781b      	ldrb	r3, [r3, #0]
   15f0c:	b29b      	uxth	r3, r3
   15f0e:	021b      	lsls	r3, r3, #8
   15f10:	b29b      	uxth	r3, r3
   15f12:	4413      	add	r3, r2
   15f14:	b29a      	uxth	r2, r3
   15f16:	68fb      	ldr	r3, [r7, #12]
   15f18:	80da      	strh	r2, [r3, #6]
   15f1a:	68bb      	ldr	r3, [r7, #8]
   15f1c:	3302      	adds	r3, #2
   15f1e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamRepCmdCmpl.status;
   15f20:	68fb      	ldr	r3, [r7, #12]
   15f22:	791a      	ldrb	r2, [r3, #4]
   15f24:	68fb      	ldr	r3, [r7, #12]
   15f26:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamRepCmdCmpl.handle;
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	88da      	ldrh	r2, [r3, #6]
   15f2c:	68fb      	ldr	r3, [r7, #12]
   15f2e:	801a      	strh	r2, [r3, #0]
}
   15f30:	bf00      	nop
   15f32:	3714      	adds	r7, #20
   15f34:	46bd      	mov	sp, r7
   15f36:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f3a:	4770      	bx	lr

00015f3c <hciEvtParseRemConnParamNegRepCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamNegRepCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f3c:	b480      	push	{r7}
   15f3e:	b085      	sub	sp, #20
   15f40:	af00      	add	r7, sp, #0
   15f42:	60f8      	str	r0, [r7, #12]
   15f44:	60b9      	str	r1, [r7, #8]
   15f46:	4613      	mov	r3, r2
   15f48:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leRemConnParamNegRepCmdCmpl.status, p);
   15f4a:	68bb      	ldr	r3, [r7, #8]
   15f4c:	1c5a      	adds	r2, r3, #1
   15f4e:	60ba      	str	r2, [r7, #8]
   15f50:	781a      	ldrb	r2, [r3, #0]
   15f52:	68fb      	ldr	r3, [r7, #12]
   15f54:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamNegRepCmdCmpl.handle, p);
   15f56:	68bb      	ldr	r3, [r7, #8]
   15f58:	781b      	ldrb	r3, [r3, #0]
   15f5a:	b29a      	uxth	r2, r3
   15f5c:	68bb      	ldr	r3, [r7, #8]
   15f5e:	3301      	adds	r3, #1
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	b29b      	uxth	r3, r3
   15f64:	021b      	lsls	r3, r3, #8
   15f66:	b29b      	uxth	r3, r3
   15f68:	4413      	add	r3, r2
   15f6a:	b29a      	uxth	r2, r3
   15f6c:	68fb      	ldr	r3, [r7, #12]
   15f6e:	80da      	strh	r2, [r3, #6]
   15f70:	68bb      	ldr	r3, [r7, #8]
   15f72:	3302      	adds	r3, #2
   15f74:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leRemConnParamNegRepCmdCmpl.status;
   15f76:	68fb      	ldr	r3, [r7, #12]
   15f78:	791a      	ldrb	r2, [r3, #4]
   15f7a:	68fb      	ldr	r3, [r7, #12]
   15f7c:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leRemConnParamNegRepCmdCmpl.handle;
   15f7e:	68fb      	ldr	r3, [r7, #12]
   15f80:	88da      	ldrh	r2, [r3, #6]
   15f82:	68fb      	ldr	r3, [r7, #12]
   15f84:	801a      	strh	r2, [r3, #0]
}
   15f86:	bf00      	nop
   15f88:	3714      	adds	r7, #20
   15f8a:	46bd      	mov	sp, r7
   15f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f90:	4770      	bx	lr

00015f92 <hciEvtParseReadDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   15f92:	b480      	push	{r7}
   15f94:	b085      	sub	sp, #20
   15f96:	af00      	add	r7, sp, #0
   15f98:	60f8      	str	r0, [r7, #12]
   15f9a:	60b9      	str	r1, [r7, #8]
   15f9c:	4613      	mov	r3, r2
   15f9e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadDefDataLenCmdCmpl.status, p);
   15fa0:	68bb      	ldr	r3, [r7, #8]
   15fa2:	1c5a      	adds	r2, r3, #1
   15fa4:	60ba      	str	r2, [r7, #8]
   15fa6:	781a      	ldrb	r2, [r3, #0]
   15fa8:	68fb      	ldr	r3, [r7, #12]
   15faa:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxOctets, p);
   15fac:	68bb      	ldr	r3, [r7, #8]
   15fae:	781b      	ldrb	r3, [r3, #0]
   15fb0:	b29a      	uxth	r2, r3
   15fb2:	68bb      	ldr	r3, [r7, #8]
   15fb4:	3301      	adds	r3, #1
   15fb6:	781b      	ldrb	r3, [r3, #0]
   15fb8:	b29b      	uxth	r3, r3
   15fba:	021b      	lsls	r3, r3, #8
   15fbc:	b29b      	uxth	r3, r3
   15fbe:	4413      	add	r3, r2
   15fc0:	b29a      	uxth	r2, r3
   15fc2:	68fb      	ldr	r3, [r7, #12]
   15fc4:	80da      	strh	r2, [r3, #6]
   15fc6:	68bb      	ldr	r3, [r7, #8]
   15fc8:	3302      	adds	r3, #2
   15fca:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadDefDataLenCmdCmpl.suggestedMaxTxTime, p);
   15fcc:	68bb      	ldr	r3, [r7, #8]
   15fce:	781b      	ldrb	r3, [r3, #0]
   15fd0:	b29a      	uxth	r2, r3
   15fd2:	68bb      	ldr	r3, [r7, #8]
   15fd4:	3301      	adds	r3, #1
   15fd6:	781b      	ldrb	r3, [r3, #0]
   15fd8:	b29b      	uxth	r3, r3
   15fda:	021b      	lsls	r3, r3, #8
   15fdc:	b29b      	uxth	r3, r3
   15fde:	4413      	add	r3, r2
   15fe0:	b29a      	uxth	r2, r3
   15fe2:	68fb      	ldr	r3, [r7, #12]
   15fe4:	811a      	strh	r2, [r3, #8]
   15fe6:	68bb      	ldr	r3, [r7, #8]
   15fe8:	3302      	adds	r3, #2
   15fea:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadDefDataLenCmdCmpl.status;
   15fec:	68fb      	ldr	r3, [r7, #12]
   15fee:	791a      	ldrb	r2, [r3, #4]
   15ff0:	68fb      	ldr	r3, [r7, #12]
   15ff2:	70da      	strb	r2, [r3, #3]
}
   15ff4:	bf00      	nop
   15ff6:	3714      	adds	r7, #20
   15ff8:	46bd      	mov	sp, r7
   15ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ffe:	4770      	bx	lr

00016000 <hciEvtParseWriteDefDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseWriteDefDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16000:	b480      	push	{r7}
   16002:	b085      	sub	sp, #20
   16004:	af00      	add	r7, sp, #0
   16006:	60f8      	str	r0, [r7, #12]
   16008:	60b9      	str	r1, [r7, #8]
   1600a:	4613      	mov	r3, r2
   1600c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leWriteDefDataLenCmdCmpl.status, p);
   1600e:	68bb      	ldr	r3, [r7, #8]
   16010:	1c5a      	adds	r2, r3, #1
   16012:	60ba      	str	r2, [r7, #8]
   16014:	781a      	ldrb	r2, [r3, #0]
   16016:	68fb      	ldr	r3, [r7, #12]
   16018:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leWriteDefDataLenCmdCmpl.status;
   1601a:	68fb      	ldr	r3, [r7, #12]
   1601c:	791a      	ldrb	r2, [r3, #4]
   1601e:	68fb      	ldr	r3, [r7, #12]
   16020:	70da      	strb	r2, [r3, #3]
}
   16022:	bf00      	nop
   16024:	3714      	adds	r7, #20
   16026:	46bd      	mov	sp, r7
   16028:	f85d 7b04 	ldr.w	r7, [sp], #4
   1602c:	4770      	bx	lr

0001602e <hciEvtParseSetDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1602e:	b480      	push	{r7}
   16030:	b085      	sub	sp, #20
   16032:	af00      	add	r7, sp, #0
   16034:	60f8      	str	r0, [r7, #12]
   16036:	60b9      	str	r1, [r7, #8]
   16038:	4613      	mov	r3, r2
   1603a:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDataLenCmdCmpl.status, p);
   1603c:	68bb      	ldr	r3, [r7, #8]
   1603e:	1c5a      	adds	r2, r3, #1
   16040:	60ba      	str	r2, [r7, #8]
   16042:	781a      	ldrb	r2, [r3, #0]
   16044:	68fb      	ldr	r3, [r7, #12]
   16046:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leSetDataLenCmdCmpl.handle, p);
   16048:	68bb      	ldr	r3, [r7, #8]
   1604a:	781b      	ldrb	r3, [r3, #0]
   1604c:	b29a      	uxth	r2, r3
   1604e:	68bb      	ldr	r3, [r7, #8]
   16050:	3301      	adds	r3, #1
   16052:	781b      	ldrb	r3, [r3, #0]
   16054:	b29b      	uxth	r3, r3
   16056:	021b      	lsls	r3, r3, #8
   16058:	b29b      	uxth	r3, r3
   1605a:	4413      	add	r3, r2
   1605c:	b29a      	uxth	r2, r3
   1605e:	68fb      	ldr	r3, [r7, #12]
   16060:	80da      	strh	r2, [r3, #6]
   16062:	68bb      	ldr	r3, [r7, #8]
   16064:	3302      	adds	r3, #2
   16066:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leSetDataLenCmdCmpl.status;
   16068:	68fb      	ldr	r3, [r7, #12]
   1606a:	791a      	ldrb	r2, [r3, #4]
   1606c:	68fb      	ldr	r3, [r7, #12]
   1606e:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leSetDataLenCmdCmpl.handle;
   16070:	68fb      	ldr	r3, [r7, #12]
   16072:	88da      	ldrh	r2, [r3, #6]
   16074:	68fb      	ldr	r3, [r7, #12]
   16076:	801a      	strh	r2, [r3, #0]
}
   16078:	bf00      	nop
   1607a:	3714      	adds	r7, #20
   1607c:	46bd      	mov	sp, r7
   1607e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16082:	4770      	bx	lr

00016084 <hciEvtParseReadMaxDataLenCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadMaxDataLenCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16084:	b480      	push	{r7}
   16086:	b085      	sub	sp, #20
   16088:	af00      	add	r7, sp, #0
   1608a:	60f8      	str	r0, [r7, #12]
   1608c:	60b9      	str	r1, [r7, #8]
   1608e:	4613      	mov	r3, r2
   16090:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadMaxDataLenCmdCmpl.status, p);
   16092:	68bb      	ldr	r3, [r7, #8]
   16094:	1c5a      	adds	r2, r3, #1
   16096:	60ba      	str	r2, [r7, #8]
   16098:	781a      	ldrb	r2, [r3, #0]
   1609a:	68fb      	ldr	r3, [r7, #12]
   1609c:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxOctets, p);
   1609e:	68bb      	ldr	r3, [r7, #8]
   160a0:	781b      	ldrb	r3, [r3, #0]
   160a2:	b29a      	uxth	r2, r3
   160a4:	68bb      	ldr	r3, [r7, #8]
   160a6:	3301      	adds	r3, #1
   160a8:	781b      	ldrb	r3, [r3, #0]
   160aa:	b29b      	uxth	r3, r3
   160ac:	021b      	lsls	r3, r3, #8
   160ae:	b29b      	uxth	r3, r3
   160b0:	4413      	add	r3, r2
   160b2:	b29a      	uxth	r2, r3
   160b4:	68fb      	ldr	r3, [r7, #12]
   160b6:	80da      	strh	r2, [r3, #6]
   160b8:	68bb      	ldr	r3, [r7, #8]
   160ba:	3302      	adds	r3, #2
   160bc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxTxTime, p);
   160be:	68bb      	ldr	r3, [r7, #8]
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	b29a      	uxth	r2, r3
   160c4:	68bb      	ldr	r3, [r7, #8]
   160c6:	3301      	adds	r3, #1
   160c8:	781b      	ldrb	r3, [r3, #0]
   160ca:	b29b      	uxth	r3, r3
   160cc:	021b      	lsls	r3, r3, #8
   160ce:	b29b      	uxth	r3, r3
   160d0:	4413      	add	r3, r2
   160d2:	b29a      	uxth	r2, r3
   160d4:	68fb      	ldr	r3, [r7, #12]
   160d6:	811a      	strh	r2, [r3, #8]
   160d8:	68bb      	ldr	r3, [r7, #8]
   160da:	3302      	adds	r3, #2
   160dc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxOctets, p);
   160de:	68bb      	ldr	r3, [r7, #8]
   160e0:	781b      	ldrb	r3, [r3, #0]
   160e2:	b29a      	uxth	r2, r3
   160e4:	68bb      	ldr	r3, [r7, #8]
   160e6:	3301      	adds	r3, #1
   160e8:	781b      	ldrb	r3, [r3, #0]
   160ea:	b29b      	uxth	r3, r3
   160ec:	021b      	lsls	r3, r3, #8
   160ee:	b29b      	uxth	r3, r3
   160f0:	4413      	add	r3, r2
   160f2:	b29a      	uxth	r2, r3
   160f4:	68fb      	ldr	r3, [r7, #12]
   160f6:	815a      	strh	r2, [r3, #10]
   160f8:	68bb      	ldr	r3, [r7, #8]
   160fa:	3302      	adds	r3, #2
   160fc:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leReadMaxDataLenCmdCmpl.supportedMaxRxTime, p);
   160fe:	68bb      	ldr	r3, [r7, #8]
   16100:	781b      	ldrb	r3, [r3, #0]
   16102:	b29a      	uxth	r2, r3
   16104:	68bb      	ldr	r3, [r7, #8]
   16106:	3301      	adds	r3, #1
   16108:	781b      	ldrb	r3, [r3, #0]
   1610a:	b29b      	uxth	r3, r3
   1610c:	021b      	lsls	r3, r3, #8
   1610e:	b29b      	uxth	r3, r3
   16110:	4413      	add	r3, r2
   16112:	b29a      	uxth	r2, r3
   16114:	68fb      	ldr	r3, [r7, #12]
   16116:	819a      	strh	r2, [r3, #12]
   16118:	68bb      	ldr	r3, [r7, #8]
   1611a:	3302      	adds	r3, #2
   1611c:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->leReadMaxDataLenCmdCmpl.status;
   1611e:	68fb      	ldr	r3, [r7, #12]
   16120:	791a      	ldrb	r2, [r3, #4]
   16122:	68fb      	ldr	r3, [r7, #12]
   16124:	70da      	strb	r2, [r3, #3]
}
   16126:	bf00      	nop
   16128:	3714      	adds	r7, #20
   1612a:	46bd      	mov	sp, r7
   1612c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16130:	4770      	bx	lr

00016132 <hciEvtParseRemConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseRemConnParamReq(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16132:	b480      	push	{r7}
   16134:	b085      	sub	sp, #20
   16136:	af00      	add	r7, sp, #0
   16138:	60f8      	str	r0, [r7, #12]
   1613a:	60b9      	str	r1, [r7, #8]
   1613c:	4613      	mov	r3, r2
   1613e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.handle, p);
   16140:	68bb      	ldr	r3, [r7, #8]
   16142:	781b      	ldrb	r3, [r3, #0]
   16144:	b29a      	uxth	r2, r3
   16146:	68bb      	ldr	r3, [r7, #8]
   16148:	3301      	adds	r3, #1
   1614a:	781b      	ldrb	r3, [r3, #0]
   1614c:	b29b      	uxth	r3, r3
   1614e:	021b      	lsls	r3, r3, #8
   16150:	b29b      	uxth	r3, r3
   16152:	4413      	add	r3, r2
   16154:	b29a      	uxth	r2, r3
   16156:	68fb      	ldr	r3, [r7, #12]
   16158:	809a      	strh	r2, [r3, #4]
   1615a:	68bb      	ldr	r3, [r7, #8]
   1615c:	3302      	adds	r3, #2
   1615e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMin, p);
   16160:	68bb      	ldr	r3, [r7, #8]
   16162:	781b      	ldrb	r3, [r3, #0]
   16164:	b29a      	uxth	r2, r3
   16166:	68bb      	ldr	r3, [r7, #8]
   16168:	3301      	adds	r3, #1
   1616a:	781b      	ldrb	r3, [r3, #0]
   1616c:	b29b      	uxth	r3, r3
   1616e:	021b      	lsls	r3, r3, #8
   16170:	b29b      	uxth	r3, r3
   16172:	4413      	add	r3, r2
   16174:	b29a      	uxth	r2, r3
   16176:	68fb      	ldr	r3, [r7, #12]
   16178:	80da      	strh	r2, [r3, #6]
   1617a:	68bb      	ldr	r3, [r7, #8]
   1617c:	3302      	adds	r3, #2
   1617e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.intervalMax, p);
   16180:	68bb      	ldr	r3, [r7, #8]
   16182:	781b      	ldrb	r3, [r3, #0]
   16184:	b29a      	uxth	r2, r3
   16186:	68bb      	ldr	r3, [r7, #8]
   16188:	3301      	adds	r3, #1
   1618a:	781b      	ldrb	r3, [r3, #0]
   1618c:	b29b      	uxth	r3, r3
   1618e:	021b      	lsls	r3, r3, #8
   16190:	b29b      	uxth	r3, r3
   16192:	4413      	add	r3, r2
   16194:	b29a      	uxth	r2, r3
   16196:	68fb      	ldr	r3, [r7, #12]
   16198:	811a      	strh	r2, [r3, #8]
   1619a:	68bb      	ldr	r3, [r7, #8]
   1619c:	3302      	adds	r3, #2
   1619e:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.latency, p);
   161a0:	68bb      	ldr	r3, [r7, #8]
   161a2:	781b      	ldrb	r3, [r3, #0]
   161a4:	b29a      	uxth	r2, r3
   161a6:	68bb      	ldr	r3, [r7, #8]
   161a8:	3301      	adds	r3, #1
   161aa:	781b      	ldrb	r3, [r3, #0]
   161ac:	b29b      	uxth	r3, r3
   161ae:	021b      	lsls	r3, r3, #8
   161b0:	b29b      	uxth	r3, r3
   161b2:	4413      	add	r3, r2
   161b4:	b29a      	uxth	r2, r3
   161b6:	68fb      	ldr	r3, [r7, #12]
   161b8:	815a      	strh	r2, [r3, #10]
   161ba:	68bb      	ldr	r3, [r7, #8]
   161bc:	3302      	adds	r3, #2
   161be:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leRemConnParamReq.timeout, p);
   161c0:	68bb      	ldr	r3, [r7, #8]
   161c2:	781b      	ldrb	r3, [r3, #0]
   161c4:	b29a      	uxth	r2, r3
   161c6:	68bb      	ldr	r3, [r7, #8]
   161c8:	3301      	adds	r3, #1
   161ca:	781b      	ldrb	r3, [r3, #0]
   161cc:	b29b      	uxth	r3, r3
   161ce:	021b      	lsls	r3, r3, #8
   161d0:	b29b      	uxth	r3, r3
   161d2:	4413      	add	r3, r2
   161d4:	b29a      	uxth	r2, r3
   161d6:	68fb      	ldr	r3, [r7, #12]
   161d8:	819a      	strh	r2, [r3, #12]
   161da:	68bb      	ldr	r3, [r7, #8]
   161dc:	3302      	adds	r3, #2
   161de:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leRemConnParamReq.handle;
   161e0:	68fb      	ldr	r3, [r7, #12]
   161e2:	889a      	ldrh	r2, [r3, #4]
   161e4:	68fb      	ldr	r3, [r7, #12]
   161e6:	801a      	strh	r2, [r3, #0]
}
   161e8:	bf00      	nop
   161ea:	3714      	adds	r7, #20
   161ec:	46bd      	mov	sp, r7
   161ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   161f2:	4770      	bx	lr

000161f4 <hciEvtParseDataLenChange>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseDataLenChange(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   161f4:	b480      	push	{r7}
   161f6:	b085      	sub	sp, #20
   161f8:	af00      	add	r7, sp, #0
   161fa:	60f8      	str	r0, [r7, #12]
   161fc:	60b9      	str	r1, [r7, #8]
   161fe:	4613      	mov	r3, r2
   16200:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.handle, p);
   16202:	68bb      	ldr	r3, [r7, #8]
   16204:	781b      	ldrb	r3, [r3, #0]
   16206:	b29a      	uxth	r2, r3
   16208:	68bb      	ldr	r3, [r7, #8]
   1620a:	3301      	adds	r3, #1
   1620c:	781b      	ldrb	r3, [r3, #0]
   1620e:	b29b      	uxth	r3, r3
   16210:	021b      	lsls	r3, r3, #8
   16212:	b29b      	uxth	r3, r3
   16214:	4413      	add	r3, r2
   16216:	b29a      	uxth	r2, r3
   16218:	68fb      	ldr	r3, [r7, #12]
   1621a:	809a      	strh	r2, [r3, #4]
   1621c:	68bb      	ldr	r3, [r7, #8]
   1621e:	3302      	adds	r3, #2
   16220:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxOctets, p);
   16222:	68bb      	ldr	r3, [r7, #8]
   16224:	781b      	ldrb	r3, [r3, #0]
   16226:	b29a      	uxth	r2, r3
   16228:	68bb      	ldr	r3, [r7, #8]
   1622a:	3301      	adds	r3, #1
   1622c:	781b      	ldrb	r3, [r3, #0]
   1622e:	b29b      	uxth	r3, r3
   16230:	021b      	lsls	r3, r3, #8
   16232:	b29b      	uxth	r3, r3
   16234:	4413      	add	r3, r2
   16236:	b29a      	uxth	r2, r3
   16238:	68fb      	ldr	r3, [r7, #12]
   1623a:	80da      	strh	r2, [r3, #6]
   1623c:	68bb      	ldr	r3, [r7, #8]
   1623e:	3302      	adds	r3, #2
   16240:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxTxTime, p);
   16242:	68bb      	ldr	r3, [r7, #8]
   16244:	781b      	ldrb	r3, [r3, #0]
   16246:	b29a      	uxth	r2, r3
   16248:	68bb      	ldr	r3, [r7, #8]
   1624a:	3301      	adds	r3, #1
   1624c:	781b      	ldrb	r3, [r3, #0]
   1624e:	b29b      	uxth	r3, r3
   16250:	021b      	lsls	r3, r3, #8
   16252:	b29b      	uxth	r3, r3
   16254:	4413      	add	r3, r2
   16256:	b29a      	uxth	r2, r3
   16258:	68fb      	ldr	r3, [r7, #12]
   1625a:	811a      	strh	r2, [r3, #8]
   1625c:	68bb      	ldr	r3, [r7, #8]
   1625e:	3302      	adds	r3, #2
   16260:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxOctets, p);
   16262:	68bb      	ldr	r3, [r7, #8]
   16264:	781b      	ldrb	r3, [r3, #0]
   16266:	b29a      	uxth	r2, r3
   16268:	68bb      	ldr	r3, [r7, #8]
   1626a:	3301      	adds	r3, #1
   1626c:	781b      	ldrb	r3, [r3, #0]
   1626e:	b29b      	uxth	r3, r3
   16270:	021b      	lsls	r3, r3, #8
   16272:	b29b      	uxth	r3, r3
   16274:	4413      	add	r3, r2
   16276:	b29a      	uxth	r2, r3
   16278:	68fb      	ldr	r3, [r7, #12]
   1627a:	815a      	strh	r2, [r3, #10]
   1627c:	68bb      	ldr	r3, [r7, #8]
   1627e:	3302      	adds	r3, #2
   16280:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT16(pMsg->leDataLenChange.maxRxTime, p);
   16282:	68bb      	ldr	r3, [r7, #8]
   16284:	781b      	ldrb	r3, [r3, #0]
   16286:	b29a      	uxth	r2, r3
   16288:	68bb      	ldr	r3, [r7, #8]
   1628a:	3301      	adds	r3, #1
   1628c:	781b      	ldrb	r3, [r3, #0]
   1628e:	b29b      	uxth	r3, r3
   16290:	021b      	lsls	r3, r3, #8
   16292:	b29b      	uxth	r3, r3
   16294:	4413      	add	r3, r2
   16296:	b29a      	uxth	r2, r3
   16298:	68fb      	ldr	r3, [r7, #12]
   1629a:	819a      	strh	r2, [r3, #12]
   1629c:	68bb      	ldr	r3, [r7, #8]
   1629e:	3302      	adds	r3, #2
   162a0:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->leDataLenChange.handle;
   162a2:	68fb      	ldr	r3, [r7, #12]
   162a4:	889a      	ldrh	r2, [r3, #4]
   162a6:	68fb      	ldr	r3, [r7, #12]
   162a8:	801a      	strh	r2, [r3, #0]
}
   162aa:	bf00      	nop
   162ac:	3714      	adds	r7, #20
   162ae:	46bd      	mov	sp, r7
   162b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   162b4:	4770      	bx	lr

000162b6 <hciEvtParseReadPubKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPubKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   162b6:	b580      	push	{r7, lr}
   162b8:	b084      	sub	sp, #16
   162ba:	af00      	add	r7, sp, #0
   162bc:	60f8      	str	r0, [r7, #12]
   162be:	60b9      	str	r1, [r7, #8]
   162c0:	4613      	mov	r3, r2
   162c2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leP256.status, p);
   162c4:	68bb      	ldr	r3, [r7, #8]
   162c6:	1c5a      	adds	r2, r3, #1
   162c8:	60ba      	str	r2, [r7, #8]
   162ca:	781a      	ldrb	r2, [r3, #0]
   162cc:	68fb      	ldr	r3, [r7, #12]
   162ce:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leP256.key, p, HCI_P256_KEY_LEN);
   162d0:	68fb      	ldr	r3, [r7, #12]
   162d2:	3305      	adds	r3, #5
   162d4:	2240      	movs	r2, #64	; 0x40
   162d6:	68b9      	ldr	r1, [r7, #8]
   162d8:	4618      	mov	r0, r3
   162da:	f7f5 ff41 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leP256.status;
   162de:	68fb      	ldr	r3, [r7, #12]
   162e0:	791a      	ldrb	r2, [r3, #4]
   162e2:	68fb      	ldr	r3, [r7, #12]
   162e4:	70da      	strb	r2, [r3, #3]
}
   162e6:	bf00      	nop
   162e8:	3710      	adds	r7, #16
   162ea:	46bd      	mov	sp, r7
   162ec:	bd80      	pop	{r7, pc}

000162ee <hciEvtParseGenDhKeyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseGenDhKeyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   162ee:	b580      	push	{r7, lr}
   162f0:	b084      	sub	sp, #16
   162f2:	af00      	add	r7, sp, #0
   162f4:	60f8      	str	r0, [r7, #12]
   162f6:	60b9      	str	r1, [r7, #8]
   162f8:	4613      	mov	r3, r2
   162fa:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leGenDHKey.status, p);
   162fc:	68bb      	ldr	r3, [r7, #8]
   162fe:	1c5a      	adds	r2, r3, #1
   16300:	60ba      	str	r2, [r7, #8]
   16302:	781a      	ldrb	r2, [r3, #0]
   16304:	68fb      	ldr	r3, [r7, #12]
   16306:	711a      	strb	r2, [r3, #4]
  memcpy(pMsg->leGenDHKey.key, p, HCI_DH_KEY_LEN);
   16308:	68fb      	ldr	r3, [r7, #12]
   1630a:	3305      	adds	r3, #5
   1630c:	2220      	movs	r2, #32
   1630e:	68b9      	ldr	r1, [r7, #8]
   16310:	4618      	mov	r0, r3
   16312:	f7f5 ff25 	bl	c160 <memcpy>

  pMsg->hdr.status = pMsg->leGenDHKey.status;
   16316:	68fb      	ldr	r3, [r7, #12]
   16318:	791a      	ldrb	r2, [r3, #4]
   1631a:	68fb      	ldr	r3, [r7, #12]
   1631c:	70da      	strb	r2, [r3, #3]
}
   1631e:	bf00      	nop
   16320:	3710      	adds	r7, #16
   16322:	46bd      	mov	sp, r7
   16324:	bd80      	pop	{r7, pc}

00016326 <hciEvtParseWriteAuthTimeoutCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseWriteAuthTimeoutCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16326:	b480      	push	{r7}
   16328:	b085      	sub	sp, #20
   1632a:	af00      	add	r7, sp, #0
   1632c:	60f8      	str	r0, [r7, #12]
   1632e:	60b9      	str	r1, [r7, #8]
   16330:	4613      	mov	r3, r2
   16332:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->writeAuthPayloadToCmdCmpl.status, p);
   16334:	68bb      	ldr	r3, [r7, #8]
   16336:	1c5a      	adds	r2, r3, #1
   16338:	60ba      	str	r2, [r7, #8]
   1633a:	781a      	ldrb	r2, [r3, #0]
   1633c:	68fb      	ldr	r3, [r7, #12]
   1633e:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->writeAuthPayloadToCmdCmpl.handle, p);
   16340:	68bb      	ldr	r3, [r7, #8]
   16342:	781b      	ldrb	r3, [r3, #0]
   16344:	b29a      	uxth	r2, r3
   16346:	68bb      	ldr	r3, [r7, #8]
   16348:	3301      	adds	r3, #1
   1634a:	781b      	ldrb	r3, [r3, #0]
   1634c:	b29b      	uxth	r3, r3
   1634e:	021b      	lsls	r3, r3, #8
   16350:	b29b      	uxth	r3, r3
   16352:	4413      	add	r3, r2
   16354:	b29a      	uxth	r2, r3
   16356:	68fb      	ldr	r3, [r7, #12]
   16358:	80da      	strh	r2, [r3, #6]
   1635a:	68bb      	ldr	r3, [r7, #8]
   1635c:	3302      	adds	r3, #2
   1635e:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.status = pMsg->writeAuthPayloadToCmdCmpl.status;
   16360:	68fb      	ldr	r3, [r7, #12]
   16362:	791a      	ldrb	r2, [r3, #4]
   16364:	68fb      	ldr	r3, [r7, #12]
   16366:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->writeAuthPayloadToCmdCmpl.handle;
   16368:	68fb      	ldr	r3, [r7, #12]
   1636a:	88da      	ldrh	r2, [r3, #6]
   1636c:	68fb      	ldr	r3, [r7, #12]
   1636e:	801a      	strh	r2, [r3, #0]
}
   16370:	bf00      	nop
   16372:	3714      	adds	r7, #20
   16374:	46bd      	mov	sp, r7
   16376:	f85d 7b04 	ldr.w	r7, [sp], #4
   1637a:	4770      	bx	lr

0001637c <hciEvtParseAuthTimeoutExpiredEvt>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtParseAuthTimeoutExpiredEvt(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1637c:	b480      	push	{r7}
   1637e:	b085      	sub	sp, #20
   16380:	af00      	add	r7, sp, #0
   16382:	60f8      	str	r0, [r7, #12]
   16384:	60b9      	str	r1, [r7, #8]
   16386:	4613      	mov	r3, r2
   16388:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->authPayloadToExpired.handle, p);
   1638a:	68bb      	ldr	r3, [r7, #8]
   1638c:	781b      	ldrb	r3, [r3, #0]
   1638e:	b29a      	uxth	r2, r3
   16390:	68bb      	ldr	r3, [r7, #8]
   16392:	3301      	adds	r3, #1
   16394:	781b      	ldrb	r3, [r3, #0]
   16396:	b29b      	uxth	r3, r3
   16398:	021b      	lsls	r3, r3, #8
   1639a:	b29b      	uxth	r3, r3
   1639c:	4413      	add	r3, r2
   1639e:	b29a      	uxth	r2, r3
   163a0:	68fb      	ldr	r3, [r7, #12]
   163a2:	809a      	strh	r2, [r3, #4]
   163a4:	68bb      	ldr	r3, [r7, #8]
   163a6:	3302      	adds	r3, #2
   163a8:	60bb      	str	r3, [r7, #8]

  pMsg->hdr.param = pMsg->authPayloadToExpired.handle;
   163aa:	68fb      	ldr	r3, [r7, #12]
   163ac:	889a      	ldrh	r2, [r3, #4]
   163ae:	68fb      	ldr	r3, [r7, #12]
   163b0:	801a      	strh	r2, [r3, #0]
}
   163b2:	bf00      	nop
   163b4:	3714      	adds	r7, #20
   163b6:	46bd      	mov	sp, r7
   163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   163bc:	4770      	bx	lr

000163be <hciEvtParseReadPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseReadPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   163be:	b480      	push	{r7}
   163c0:	b085      	sub	sp, #20
   163c2:	af00      	add	r7, sp, #0
   163c4:	60f8      	str	r0, [r7, #12]
   163c6:	60b9      	str	r1, [r7, #8]
   163c8:	4613      	mov	r3, r2
   163ca:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.status, p);
   163cc:	68bb      	ldr	r3, [r7, #8]
   163ce:	1c5a      	adds	r2, r3, #1
   163d0:	60ba      	str	r2, [r7, #8]
   163d2:	781a      	ldrb	r2, [r3, #0]
   163d4:	68fb      	ldr	r3, [r7, #12]
   163d6:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->leReadPhyCmdCmpl.handle, p);
   163d8:	68bb      	ldr	r3, [r7, #8]
   163da:	781b      	ldrb	r3, [r3, #0]
   163dc:	b29a      	uxth	r2, r3
   163de:	68bb      	ldr	r3, [r7, #8]
   163e0:	3301      	adds	r3, #1
   163e2:	781b      	ldrb	r3, [r3, #0]
   163e4:	b29b      	uxth	r3, r3
   163e6:	021b      	lsls	r3, r3, #8
   163e8:	b29b      	uxth	r3, r3
   163ea:	4413      	add	r3, r2
   163ec:	b29a      	uxth	r2, r3
   163ee:	68fb      	ldr	r3, [r7, #12]
   163f0:	80da      	strh	r2, [r3, #6]
   163f2:	68bb      	ldr	r3, [r7, #8]
   163f4:	3302      	adds	r3, #2
   163f6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.txPhy, p);
   163f8:	68bb      	ldr	r3, [r7, #8]
   163fa:	1c5a      	adds	r2, r3, #1
   163fc:	60ba      	str	r2, [r7, #8]
   163fe:	781a      	ldrb	r2, [r3, #0]
   16400:	68fb      	ldr	r3, [r7, #12]
   16402:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->leReadPhyCmdCmpl.rxPhy, p);
   16404:	68bb      	ldr	r3, [r7, #8]
   16406:	1c5a      	adds	r2, r3, #1
   16408:	60ba      	str	r2, [r7, #8]
   1640a:	781a      	ldrb	r2, [r3, #0]
   1640c:	68fb      	ldr	r3, [r7, #12]
   1640e:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->leReadPhyCmdCmpl.status;
   16410:	68fb      	ldr	r3, [r7, #12]
   16412:	791a      	ldrb	r2, [r3, #4]
   16414:	68fb      	ldr	r3, [r7, #12]
   16416:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leReadPhyCmdCmpl.handle;
   16418:	68fb      	ldr	r3, [r7, #12]
   1641a:	88da      	ldrh	r2, [r3, #6]
   1641c:	68fb      	ldr	r3, [r7, #12]
   1641e:	801a      	strh	r2, [r3, #0]
}
   16420:	bf00      	nop
   16422:	3714      	adds	r7, #20
   16424:	46bd      	mov	sp, r7
   16426:	f85d 7b04 	ldr.w	r7, [sp], #4
   1642a:	4770      	bx	lr

0001642c <hciEvtParseSetDefPhyCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseSetDefPhyCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1642c:	b480      	push	{r7}
   1642e:	b085      	sub	sp, #20
   16430:	af00      	add	r7, sp, #0
   16432:	60f8      	str	r0, [r7, #12]
   16434:	60b9      	str	r1, [r7, #8]
   16436:	4613      	mov	r3, r2
   16438:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leSetDefPhyCmdCmpl.status, p);
   1643a:	68bb      	ldr	r3, [r7, #8]
   1643c:	1c5a      	adds	r2, r3, #1
   1643e:	60ba      	str	r2, [r7, #8]
   16440:	781a      	ldrb	r2, [r3, #0]
   16442:	68fb      	ldr	r3, [r7, #12]
   16444:	711a      	strb	r2, [r3, #4]

  pMsg->hdr.status = pMsg->leSetDefPhyCmdCmpl.status;
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	791a      	ldrb	r2, [r3, #4]
   1644a:	68fb      	ldr	r3, [r7, #12]
   1644c:	70da      	strb	r2, [r3, #3]
}
   1644e:	bf00      	nop
   16450:	3714      	adds	r7, #20
   16452:	46bd      	mov	sp, r7
   16454:	f85d 7b04 	ldr.w	r7, [sp], #4
   16458:	4770      	bx	lr

0001645a <hciEvtParsePhyUpdateCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParsePhyUpdateCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   1645a:	b480      	push	{r7}
   1645c:	b085      	sub	sp, #20
   1645e:	af00      	add	r7, sp, #0
   16460:	60f8      	str	r0, [r7, #12]
   16462:	60b9      	str	r1, [r7, #8]
   16464:	4613      	mov	r3, r2
   16466:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.status, p);
   16468:	68bb      	ldr	r3, [r7, #8]
   1646a:	1c5a      	adds	r2, r3, #1
   1646c:	60ba      	str	r2, [r7, #8]
   1646e:	781a      	ldrb	r2, [r3, #0]
   16470:	68fb      	ldr	r3, [r7, #12]
   16472:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePhyUpdate.handle, p);
   16474:	68bb      	ldr	r3, [r7, #8]
   16476:	781b      	ldrb	r3, [r3, #0]
   16478:	b29a      	uxth	r2, r3
   1647a:	68bb      	ldr	r3, [r7, #8]
   1647c:	3301      	adds	r3, #1
   1647e:	781b      	ldrb	r3, [r3, #0]
   16480:	b29b      	uxth	r3, r3
   16482:	021b      	lsls	r3, r3, #8
   16484:	b29b      	uxth	r3, r3
   16486:	4413      	add	r3, r2
   16488:	b29a      	uxth	r2, r3
   1648a:	68fb      	ldr	r3, [r7, #12]
   1648c:	80da      	strh	r2, [r3, #6]
   1648e:	68bb      	ldr	r3, [r7, #8]
   16490:	3302      	adds	r3, #2
   16492:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.txPhy, p);
   16494:	68bb      	ldr	r3, [r7, #8]
   16496:	1c5a      	adds	r2, r3, #1
   16498:	60ba      	str	r2, [r7, #8]
   1649a:	781a      	ldrb	r2, [r3, #0]
   1649c:	68fb      	ldr	r3, [r7, #12]
   1649e:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePhyUpdate.rxPhy, p);
   164a0:	68bb      	ldr	r3, [r7, #8]
   164a2:	1c5a      	adds	r2, r3, #1
   164a4:	60ba      	str	r2, [r7, #8]
   164a6:	781a      	ldrb	r2, [r3, #0]
   164a8:	68fb      	ldr	r3, [r7, #12]
   164aa:	725a      	strb	r2, [r3, #9]

  pMsg->hdr.status = pMsg->lePhyUpdate.status;
   164ac:	68fb      	ldr	r3, [r7, #12]
   164ae:	791a      	ldrb	r2, [r3, #4]
   164b0:	68fb      	ldr	r3, [r7, #12]
   164b2:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->lePhyUpdate.handle;
   164b4:	68fb      	ldr	r3, [r7, #12]
   164b6:	88da      	ldrh	r2, [r3, #6]
   164b8:	68fb      	ldr	r3, [r7, #12]
   164ba:	801a      	strh	r2, [r3, #0]
}
   164bc:	bf00      	nop
   164be:	3714      	adds	r7, #20
   164c0:	46bd      	mov	sp, r7
   164c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   164c6:	4770      	bx	lr

000164c8 <hciEvtProcessLeAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeAdvReport(uint8_t *p, uint8_t len)
{
   164c8:	b580      	push	{r7, lr}
   164ca:	b084      	sub	sp, #16
   164cc:	af00      	add	r7, sp, #0
   164ce:	6078      	str	r0, [r7, #4]
   164d0:	460b      	mov	r3, r1
   164d2:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   164d4:	687b      	ldr	r3, [r7, #4]
   164d6:	1c5a      	adds	r2, r3, #1
   164d8:	607a      	str	r2, [r7, #4]
   164da:	781b      	ldrb	r3, [r3, #0]
   164dc:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   164de:	7bfb      	ldrb	r3, [r7, #15]
   164e0:	2b0f      	cmp	r3, #15
   164e2:	d862      	bhi.n	165aa <hciEvtProcessLeAdvReport+0xe2>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t) + HCI_ADV_DATA_LEN)) != NULL)
   164e4:	203b      	movs	r0, #59	; 0x3b
   164e6:	f001 fa33 	bl	17950 <WsfBufAlloc>
   164ea:	60b8      	str	r0, [r7, #8]
   164ec:	68bb      	ldr	r3, [r7, #8]
   164ee:	2b00      	cmp	r3, #0
   164f0:	d05c      	beq.n	165ac <hciEvtProcessLeAdvReport+0xe4>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   164f2:	e04f      	b.n	16594 <hciEvtProcessLeAdvReport+0xcc>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   164f4:	687b      	ldr	r3, [r7, #4]
   164f6:	1c5a      	adds	r2, r3, #1
   164f8:	607a      	str	r2, [r7, #4]
   164fa:	781a      	ldrb	r2, [r3, #0]
   164fc:	68bb      	ldr	r3, [r7, #8]
   164fe:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16500:	687b      	ldr	r3, [r7, #4]
   16502:	1c5a      	adds	r2, r3, #1
   16504:	607a      	str	r2, [r7, #4]
   16506:	781a      	ldrb	r2, [r3, #0]
   16508:	68bb      	ldr	r3, [r7, #8]
   1650a:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1650c:	68bb      	ldr	r3, [r7, #8]
   1650e:	330c      	adds	r3, #12
   16510:	6879      	ldr	r1, [r7, #4]
   16512:	4618      	mov	r0, r3
   16514:	f002 f968 	bl	187e8 <BdaCpy>
   16518:	687b      	ldr	r3, [r7, #4]
   1651a:	3306      	adds	r3, #6
   1651c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   1651e:	687b      	ldr	r3, [r7, #4]
   16520:	1c5a      	adds	r2, r3, #1
   16522:	607a      	str	r2, [r7, #4]
   16524:	781a      	ldrb	r2, [r3, #0]
   16526:	68bb      	ldr	r3, [r7, #8]
   16528:	721a      	strb	r2, [r3, #8]

      HCI_TRACE_INFO1("HCI Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_ADV_DATA_LEN)
   1652a:	68bb      	ldr	r3, [r7, #8]
   1652c:	7a1b      	ldrb	r3, [r3, #8]
   1652e:	2b1f      	cmp	r3, #31
   16530:	d836      	bhi.n	165a0 <hciEvtProcessLeAdvReport+0xd8>
        HCI_TRACE_WARN0("Invalid adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *) (pMsg + 1);
   16532:	68bb      	ldr	r3, [r7, #8]
   16534:	f103 021c 	add.w	r2, r3, #28
   16538:	68bb      	ldr	r3, [r7, #8]
   1653a:	605a      	str	r2, [r3, #4]
      memcpy(pMsg->pData, p, pMsg->len);
   1653c:	68bb      	ldr	r3, [r7, #8]
   1653e:	6858      	ldr	r0, [r3, #4]
   16540:	68bb      	ldr	r3, [r7, #8]
   16542:	7a1b      	ldrb	r3, [r3, #8]
   16544:	461a      	mov	r2, r3
   16546:	6879      	ldr	r1, [r7, #4]
   16548:	f7f5 fe0a 	bl	c160 <memcpy>
      p += pMsg->len;
   1654c:	68bb      	ldr	r3, [r7, #8]
   1654e:	7a1b      	ldrb	r3, [r3, #8]
   16550:	461a      	mov	r2, r3
   16552:	687b      	ldr	r3, [r7, #4]
   16554:	4413      	add	r3, r2
   16556:	607b      	str	r3, [r7, #4]

      BSTREAM_TO_UINT8(pMsg->rssi, p);
   16558:	687b      	ldr	r3, [r7, #4]
   1655a:	1c5a      	adds	r2, r3, #1
   1655c:	607a      	str	r2, [r7, #4]
   1655e:	781b      	ldrb	r3, [r3, #0]
   16560:	b25a      	sxtb	r2, r3
   16562:	68bb      	ldr	r3, [r7, #8]
   16564:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->directAddrType = 0;
   16566:	68bb      	ldr	r3, [r7, #8]
   16568:	2200      	movs	r2, #0
   1656a:	749a      	strb	r2, [r3, #18]
      memset(pMsg->directAddr, 0, BDA_ADDR_LEN);
   1656c:	68bb      	ldr	r3, [r7, #8]
   1656e:	3313      	adds	r3, #19
   16570:	2206      	movs	r2, #6
   16572:	2100      	movs	r1, #0
   16574:	4618      	mov	r0, r3
   16576:	f7f5 fef1 	bl	c35c <memset>

      /* initialize message header */
      pMsg->hdr.param = 0;
   1657a:	68bb      	ldr	r3, [r7, #8]
   1657c:	2200      	movs	r2, #0
   1657e:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   16580:	68bb      	ldr	r3, [r7, #8]
   16582:	2206      	movs	r2, #6
   16584:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16586:	68bb      	ldr	r3, [r7, #8]
   16588:	2200      	movs	r2, #0
   1658a:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   1658c:	4b09      	ldr	r3, [pc, #36]	; (165b4 <hciEvtProcessLeAdvReport+0xec>)
   1658e:	689b      	ldr	r3, [r3, #8]
   16590:	68b8      	ldr	r0, [r7, #8]
   16592:	4798      	blx	r3
    while (i-- > 0)
   16594:	7bfb      	ldrb	r3, [r7, #15]
   16596:	1e5a      	subs	r2, r3, #1
   16598:	73fa      	strb	r2, [r7, #15]
   1659a:	2b00      	cmp	r3, #0
   1659c:	d1aa      	bne.n	164f4 <hciEvtProcessLeAdvReport+0x2c>
   1659e:	e000      	b.n	165a2 <hciEvtProcessLeAdvReport+0xda>
        break;
   165a0:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   165a2:	68b8      	ldr	r0, [r7, #8]
   165a4:	f001 fa0e 	bl	179c4 <WsfBufFree>
   165a8:	e000      	b.n	165ac <hciEvtProcessLeAdvReport+0xe4>
    return;
   165aa:	bf00      	nop
  }
}
   165ac:	3710      	adds	r7, #16
   165ae:	46bd      	mov	sp, r7
   165b0:	bd80      	pop	{r7, pc}
   165b2:	bf00      	nop
   165b4:	10006538 	.word	0x10006538

000165b8 <hciEvtProcessLeExtAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeExtAdvReport(uint8_t *p, uint8_t len)
{
   165b8:	b580      	push	{r7, lr}
   165ba:	b086      	sub	sp, #24
   165bc:	af00      	add	r7, sp, #0
   165be:	6078      	str	r0, [r7, #4]
   165c0:	460b      	mov	r3, r1
   165c2:	70fb      	strb	r3, [r7, #3]
  uint8_t                *ptr;
  uint8_t                maxLen;
  uint8_t                dataLen;

  /* get number of reports without advancing pointer */
  i = *p;
   165c4:	687b      	ldr	r3, [r7, #4]
   165c6:	781b      	ldrb	r3, [r3, #0]
   165c8:	75fb      	strb	r3, [r7, #23]

  HCI_TRACE_INFO1("HCI Ext Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   165ca:	7dfb      	ldrb	r3, [r7, #23]
   165cc:	2b0f      	cmp	r3, #15
   165ce:	f200 80c4 	bhi.w	1675a <hciEvtProcessLeExtAdvReport+0x1a2>
  {
    return;
  }

  ptr = p + 1;
   165d2:	687b      	ldr	r3, [r7, #4]
   165d4:	3301      	adds	r3, #1
   165d6:	613b      	str	r3, [r7, #16]
  maxLen = 0;
   165d8:	2300      	movs	r3, #0
   165da:	73fb      	strb	r3, [r7, #15]

  /* find out max length ext adv/scan rsp data */
  while (i-- > 0)
   165dc:	e011      	b.n	16602 <hciEvtProcessLeExtAdvReport+0x4a>
  {
    ptr += HCI_EXT_ADV_RPT_DATA_LEN_OFFSET;
   165de:	693b      	ldr	r3, [r7, #16]
   165e0:	3317      	adds	r3, #23
   165e2:	613b      	str	r3, [r7, #16]
    BSTREAM_TO_UINT8(dataLen, ptr);
   165e4:	693b      	ldr	r3, [r7, #16]
   165e6:	1c5a      	adds	r2, r3, #1
   165e8:	613a      	str	r2, [r7, #16]
   165ea:	781b      	ldrb	r3, [r3, #0]
   165ec:	73bb      	strb	r3, [r7, #14]
    ptr += dataLen;
   165ee:	7bbb      	ldrb	r3, [r7, #14]
   165f0:	693a      	ldr	r2, [r7, #16]
   165f2:	4413      	add	r3, r2
   165f4:	613b      	str	r3, [r7, #16]

    /* if len greater than max len seen so far */
    if (dataLen > maxLen)
   165f6:	7bba      	ldrb	r2, [r7, #14]
   165f8:	7bfb      	ldrb	r3, [r7, #15]
   165fa:	429a      	cmp	r2, r3
   165fc:	d901      	bls.n	16602 <hciEvtProcessLeExtAdvReport+0x4a>
    {
      /* update max len */
      maxLen = dataLen;
   165fe:	7bbb      	ldrb	r3, [r7, #14]
   16600:	73fb      	strb	r3, [r7, #15]
  while (i-- > 0)
   16602:	7dfb      	ldrb	r3, [r7, #23]
   16604:	1e5a      	subs	r2, r3, #1
   16606:	75fa      	strb	r2, [r7, #23]
   16608:	2b00      	cmp	r3, #0
   1660a:	d1e8      	bne.n	165de <hciEvtProcessLeExtAdvReport+0x26>
    }
  }

  /* allocate temp buffer that can hold max length ext adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeExtAdvReportEvt_t) + maxLen)) != NULL)
   1660c:	7bfb      	ldrb	r3, [r7, #15]
   1660e:	b29b      	uxth	r3, r3
   16610:	3320      	adds	r3, #32
   16612:	b29b      	uxth	r3, r3
   16614:	4618      	mov	r0, r3
   16616:	f001 f99b 	bl	17950 <WsfBufAlloc>
   1661a:	60b8      	str	r0, [r7, #8]
   1661c:	68bb      	ldr	r3, [r7, #8]
   1661e:	2b00      	cmp	r3, #0
   16620:	f000 809c 	beq.w	1675c <hciEvtProcessLeExtAdvReport+0x1a4>
  {
    /* get number of reports */
    BSTREAM_TO_UINT8(i, p);
   16624:	687b      	ldr	r3, [r7, #4]
   16626:	1c5a      	adds	r2, r3, #1
   16628:	607a      	str	r2, [r7, #4]
   1662a:	781b      	ldrb	r3, [r3, #0]
   1662c:	75fb      	strb	r3, [r7, #23]

    /* parse each report and execute callback */
    while (i-- > 0)
   1662e:	e088      	b.n	16742 <hciEvtProcessLeExtAdvReport+0x18a>
    {
      BSTREAM_TO_UINT16(pMsg->eventType, p);
   16630:	687b      	ldr	r3, [r7, #4]
   16632:	781b      	ldrb	r3, [r3, #0]
   16634:	b29a      	uxth	r2, r3
   16636:	687b      	ldr	r3, [r7, #4]
   16638:	3301      	adds	r3, #1
   1663a:	781b      	ldrb	r3, [r3, #0]
   1663c:	b29b      	uxth	r3, r3
   1663e:	021b      	lsls	r3, r3, #8
   16640:	b29b      	uxth	r3, r3
   16642:	4413      	add	r3, r2
   16644:	b29a      	uxth	r2, r3
   16646:	68bb      	ldr	r3, [r7, #8]
   16648:	809a      	strh	r2, [r3, #4]
   1664a:	687b      	ldr	r3, [r7, #4]
   1664c:	3302      	adds	r3, #2
   1664e:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16650:	687b      	ldr	r3, [r7, #4]
   16652:	1c5a      	adds	r2, r3, #1
   16654:	607a      	str	r2, [r7, #4]
   16656:	781a      	ldrb	r2, [r3, #0]
   16658:	68bb      	ldr	r3, [r7, #8]
   1665a:	719a      	strb	r2, [r3, #6]
      BSTREAM_TO_BDA(pMsg->addr, p);
   1665c:	68bb      	ldr	r3, [r7, #8]
   1665e:	3307      	adds	r3, #7
   16660:	6879      	ldr	r1, [r7, #4]
   16662:	4618      	mov	r0, r3
   16664:	f002 f8c0 	bl	187e8 <BdaCpy>
   16668:	687b      	ldr	r3, [r7, #4]
   1666a:	3306      	adds	r3, #6
   1666c:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->priPhy, p);
   1666e:	687b      	ldr	r3, [r7, #4]
   16670:	1c5a      	adds	r2, r3, #1
   16672:	607a      	str	r2, [r7, #4]
   16674:	781a      	ldrb	r2, [r3, #0]
   16676:	68bb      	ldr	r3, [r7, #8]
   16678:	735a      	strb	r2, [r3, #13]
      BSTREAM_TO_UINT8(pMsg->secPhy, p);
   1667a:	687b      	ldr	r3, [r7, #4]
   1667c:	1c5a      	adds	r2, r3, #1
   1667e:	607a      	str	r2, [r7, #4]
   16680:	781a      	ldrb	r2, [r3, #0]
   16682:	68bb      	ldr	r3, [r7, #8]
   16684:	739a      	strb	r2, [r3, #14]
      BSTREAM_TO_UINT8(pMsg->advSid, p);
   16686:	687b      	ldr	r3, [r7, #4]
   16688:	1c5a      	adds	r2, r3, #1
   1668a:	607a      	str	r2, [r7, #4]
   1668c:	781a      	ldrb	r2, [r3, #0]
   1668e:	68bb      	ldr	r3, [r7, #8]
   16690:	73da      	strb	r2, [r3, #15]
      BSTREAM_TO_INT8(pMsg->txPower, p);
   16692:	687b      	ldr	r3, [r7, #4]
   16694:	1c5a      	adds	r2, r3, #1
   16696:	607a      	str	r2, [r7, #4]
   16698:	781b      	ldrb	r3, [r3, #0]
   1669a:	b25a      	sxtb	r2, r3
   1669c:	68bb      	ldr	r3, [r7, #8]
   1669e:	741a      	strb	r2, [r3, #16]
      BSTREAM_TO_INT8(pMsg->rssi, p);
   166a0:	687b      	ldr	r3, [r7, #4]
   166a2:	1c5a      	adds	r2, r3, #1
   166a4:	607a      	str	r2, [r7, #4]
   166a6:	781b      	ldrb	r3, [r3, #0]
   166a8:	b25a      	sxtb	r2, r3
   166aa:	68bb      	ldr	r3, [r7, #8]
   166ac:	745a      	strb	r2, [r3, #17]
      BSTREAM_TO_UINT16(pMsg->perAdvInter, p);
   166ae:	687b      	ldr	r3, [r7, #4]
   166b0:	781b      	ldrb	r3, [r3, #0]
   166b2:	b29a      	uxth	r2, r3
   166b4:	687b      	ldr	r3, [r7, #4]
   166b6:	3301      	adds	r3, #1
   166b8:	781b      	ldrb	r3, [r3, #0]
   166ba:	b29b      	uxth	r3, r3
   166bc:	021b      	lsls	r3, r3, #8
   166be:	b29b      	uxth	r3, r3
   166c0:	4413      	add	r3, r2
   166c2:	b29b      	uxth	r3, r3
   166c4:	b21a      	sxth	r2, r3
   166c6:	68bb      	ldr	r3, [r7, #8]
   166c8:	825a      	strh	r2, [r3, #18]
   166ca:	687b      	ldr	r3, [r7, #4]
   166cc:	3302      	adds	r3, #2
   166ce:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   166d0:	687b      	ldr	r3, [r7, #4]
   166d2:	1c5a      	adds	r2, r3, #1
   166d4:	607a      	str	r2, [r7, #4]
   166d6:	781a      	ldrb	r2, [r3, #0]
   166d8:	68bb      	ldr	r3, [r7, #8]
   166da:	751a      	strb	r2, [r3, #20]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   166dc:	68bb      	ldr	r3, [r7, #8]
   166de:	3315      	adds	r3, #21
   166e0:	6879      	ldr	r1, [r7, #4]
   166e2:	4618      	mov	r0, r3
   166e4:	f002 f880 	bl	187e8 <BdaCpy>
   166e8:	687b      	ldr	r3, [r7, #4]
   166ea:	3306      	adds	r3, #6
   166ec:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->len, p);
   166ee:	687b      	ldr	r3, [r7, #4]
   166f0:	1c5a      	adds	r2, r3, #1
   166f2:	607a      	str	r2, [r7, #4]
   166f4:	781a      	ldrb	r2, [r3, #0]
   166f6:	68bb      	ldr	r3, [r7, #8]
   166f8:	76da      	strb	r2, [r3, #27]

      HCI_TRACE_INFO1("HCI Ext Adv report, data len: %d", pMsg->len);

      /* sanity check on report length; quit if invalid */
      if (pMsg->len > HCI_EXT_ADV_RPT_DATA_LEN)
   166fa:	68bb      	ldr	r3, [r7, #8]
   166fc:	7edb      	ldrb	r3, [r3, #27]
   166fe:	2be5      	cmp	r3, #229	; 0xe5
   16700:	d826      	bhi.n	16750 <hciEvtProcessLeExtAdvReport+0x198>
        HCI_TRACE_WARN0("Invalid ext adv report data len");
        break;
      }

      /* Copy data to space after end of report struct */
      pMsg->pData = (uint8_t *)(pMsg + 1);
   16702:	68bb      	ldr	r3, [r7, #8]
   16704:	f103 0220 	add.w	r2, r3, #32
   16708:	68bb      	ldr	r3, [r7, #8]
   1670a:	61da      	str	r2, [r3, #28]
      memcpy(pMsg->pData, p, pMsg->len);
   1670c:	68bb      	ldr	r3, [r7, #8]
   1670e:	69d8      	ldr	r0, [r3, #28]
   16710:	68bb      	ldr	r3, [r7, #8]
   16712:	7edb      	ldrb	r3, [r3, #27]
   16714:	461a      	mov	r2, r3
   16716:	6879      	ldr	r1, [r7, #4]
   16718:	f7f5 fd22 	bl	c160 <memcpy>
      p += pMsg->len;
   1671c:	68bb      	ldr	r3, [r7, #8]
   1671e:	7edb      	ldrb	r3, [r3, #27]
   16720:	461a      	mov	r2, r3
   16722:	687b      	ldr	r3, [r7, #4]
   16724:	4413      	add	r3, r2
   16726:	607b      	str	r3, [r7, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   16728:	68bb      	ldr	r3, [r7, #8]
   1672a:	2200      	movs	r2, #0
   1672c:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_EXT_ADV_REPORT_CBACK_EVT;
   1672e:	68bb      	ldr	r3, [r7, #8]
   16730:	222c      	movs	r2, #44	; 0x2c
   16732:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16734:	68bb      	ldr	r3, [r7, #8]
   16736:	2200      	movs	r2, #0
   16738:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *)pMsg);
   1673a:	4b0a      	ldr	r3, [pc, #40]	; (16764 <hciEvtProcessLeExtAdvReport+0x1ac>)
   1673c:	689b      	ldr	r3, [r3, #8]
   1673e:	68b8      	ldr	r0, [r7, #8]
   16740:	4798      	blx	r3
    while (i-- > 0)
   16742:	7dfb      	ldrb	r3, [r7, #23]
   16744:	1e5a      	subs	r2, r3, #1
   16746:	75fa      	strb	r2, [r7, #23]
   16748:	2b00      	cmp	r3, #0
   1674a:	f47f af71 	bne.w	16630 <hciEvtProcessLeExtAdvReport+0x78>
   1674e:	e000      	b.n	16752 <hciEvtProcessLeExtAdvReport+0x19a>
        break;
   16750:	bf00      	nop
    }

    /* free buffer */
    WsfBufFree(pMsg);
   16752:	68b8      	ldr	r0, [r7, #8]
   16754:	f001 f936 	bl	179c4 <WsfBufFree>
   16758:	e000      	b.n	1675c <hciEvtProcessLeExtAdvReport+0x1a4>
    return;
   1675a:	bf00      	nop
  }
}
   1675c:	3718      	adds	r7, #24
   1675e:	46bd      	mov	sp, r7
   16760:	bd80      	pop	{r7, pc}
   16762:	bf00      	nop
   16764:	10006538 	.word	0x10006538

00016768 <hciEvtParseLeScanTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanTimeout(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16768:	b480      	push	{r7}
   1676a:	b085      	sub	sp, #20
   1676c:	af00      	add	r7, sp, #0
   1676e:	60f8      	str	r0, [r7, #12]
   16770:	60b9      	str	r1, [r7, #8]
   16772:	4613      	mov	r3, r2
   16774:	71fb      	strb	r3, [r7, #7]
  /* empty */
}
   16776:	bf00      	nop
   16778:	3714      	adds	r7, #20
   1677a:	46bd      	mov	sp, r7
   1677c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16780:	4770      	bx	lr

00016782 <hciEvtParseLeAdvSetTerm>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeAdvSetTerm(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16782:	b480      	push	{r7}
   16784:	b085      	sub	sp, #20
   16786:	af00      	add	r7, sp, #0
   16788:	60f8      	str	r0, [r7, #12]
   1678a:	60b9      	str	r1, [r7, #8]
   1678c:	4613      	mov	r3, r2
   1678e:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.status, p);
   16790:	68bb      	ldr	r3, [r7, #8]
   16792:	1c5a      	adds	r2, r3, #1
   16794:	60ba      	str	r2, [r7, #8]
   16796:	781a      	ldrb	r2, [r3, #0]
   16798:	68fb      	ldr	r3, [r7, #12]
   1679a:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.advHandle, p);
   1679c:	68bb      	ldr	r3, [r7, #8]
   1679e:	1c5a      	adds	r2, r3, #1
   167a0:	60ba      	str	r2, [r7, #8]
   167a2:	781a      	ldrb	r2, [r3, #0]
   167a4:	68fb      	ldr	r3, [r7, #12]
   167a6:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_UINT16(pMsg->leAdvSetTerm.handle, p);
   167a8:	68bb      	ldr	r3, [r7, #8]
   167aa:	781b      	ldrb	r3, [r3, #0]
   167ac:	b29a      	uxth	r2, r3
   167ae:	68bb      	ldr	r3, [r7, #8]
   167b0:	3301      	adds	r3, #1
   167b2:	781b      	ldrb	r3, [r3, #0]
   167b4:	b29b      	uxth	r3, r3
   167b6:	021b      	lsls	r3, r3, #8
   167b8:	b29b      	uxth	r3, r3
   167ba:	4413      	add	r3, r2
   167bc:	b29a      	uxth	r2, r3
   167be:	68fb      	ldr	r3, [r7, #12]
   167c0:	80da      	strh	r2, [r3, #6]
   167c2:	68bb      	ldr	r3, [r7, #8]
   167c4:	3302      	adds	r3, #2
   167c6:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->leAdvSetTerm.numComplEvts, p);
   167c8:	68bb      	ldr	r3, [r7, #8]
   167ca:	1c5a      	adds	r2, r3, #1
   167cc:	60ba      	str	r2, [r7, #8]
   167ce:	781a      	ldrb	r2, [r3, #0]
   167d0:	68fb      	ldr	r3, [r7, #12]
   167d2:	721a      	strb	r2, [r3, #8]

  pMsg->hdr.status = pMsg->leAdvSetTerm.status;
   167d4:	68fb      	ldr	r3, [r7, #12]
   167d6:	791a      	ldrb	r2, [r3, #4]
   167d8:	68fb      	ldr	r3, [r7, #12]
   167da:	70da      	strb	r2, [r3, #3]
  pMsg->hdr.param = pMsg->leAdvSetTerm.handle;
   167dc:	68fb      	ldr	r3, [r7, #12]
   167de:	88da      	ldrh	r2, [r3, #6]
   167e0:	68fb      	ldr	r3, [r7, #12]
   167e2:	801a      	strh	r2, [r3, #0]
}
   167e4:	bf00      	nop
   167e6:	3714      	adds	r7, #20
   167e8:	46bd      	mov	sp, r7
   167ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   167ee:	4770      	bx	lr

000167f0 <hciEvtParseLeScanReqRcvd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeScanReqRcvd(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   167f0:	b580      	push	{r7, lr}
   167f2:	b084      	sub	sp, #16
   167f4:	af00      	add	r7, sp, #0
   167f6:	60f8      	str	r0, [r7, #12]
   167f8:	60b9      	str	r1, [r7, #8]
   167fa:	4613      	mov	r3, r2
   167fc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.advHandle, p);
   167fe:	68bb      	ldr	r3, [r7, #8]
   16800:	1c5a      	adds	r2, r3, #1
   16802:	60ba      	str	r2, [r7, #8]
   16804:	781a      	ldrb	r2, [r3, #0]
   16806:	68fb      	ldr	r3, [r7, #12]
   16808:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT8(pMsg->leScanReqRcvd.scanAddrType, p);
   1680a:	68bb      	ldr	r3, [r7, #8]
   1680c:	1c5a      	adds	r2, r3, #1
   1680e:	60ba      	str	r2, [r7, #8]
   16810:	781a      	ldrb	r2, [r3, #0]
   16812:	68fb      	ldr	r3, [r7, #12]
   16814:	715a      	strb	r2, [r3, #5]
  BSTREAM_TO_BDA(pMsg->leScanReqRcvd.scanAddr, p);
   16816:	68fb      	ldr	r3, [r7, #12]
   16818:	3306      	adds	r3, #6
   1681a:	68b9      	ldr	r1, [r7, #8]
   1681c:	4618      	mov	r0, r3
   1681e:	f001 ffe3 	bl	187e8 <BdaCpy>
   16822:	68bb      	ldr	r3, [r7, #8]
   16824:	3306      	adds	r3, #6
   16826:	60bb      	str	r3, [r7, #8]
}
   16828:	bf00      	nop
   1682a:	3710      	adds	r7, #16
   1682c:	46bd      	mov	sp, r7
   1682e:	bd80      	pop	{r7, pc}

00016830 <hciEvtParseLePerAdvSyncEst>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncEst(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   16830:	b580      	push	{r7, lr}
   16832:	b084      	sub	sp, #16
   16834:	af00      	add	r7, sp, #0
   16836:	60f8      	str	r0, [r7, #12]
   16838:	60b9      	str	r1, [r7, #8]
   1683a:	4613      	mov	r3, r2
   1683c:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.status, p);
   1683e:	68bb      	ldr	r3, [r7, #8]
   16840:	1c5a      	adds	r2, r3, #1
   16842:	60ba      	str	r2, [r7, #8]
   16844:	781a      	ldrb	r2, [r3, #0]
   16846:	68fb      	ldr	r3, [r7, #12]
   16848:	711a      	strb	r2, [r3, #4]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.syncHandle, p);
   1684a:	68bb      	ldr	r3, [r7, #8]
   1684c:	781b      	ldrb	r3, [r3, #0]
   1684e:	b29a      	uxth	r2, r3
   16850:	68bb      	ldr	r3, [r7, #8]
   16852:	3301      	adds	r3, #1
   16854:	781b      	ldrb	r3, [r3, #0]
   16856:	b29b      	uxth	r3, r3
   16858:	021b      	lsls	r3, r3, #8
   1685a:	b29b      	uxth	r3, r3
   1685c:	4413      	add	r3, r2
   1685e:	b29a      	uxth	r2, r3
   16860:	68fb      	ldr	r3, [r7, #12]
   16862:	80da      	strh	r2, [r3, #6]
   16864:	68bb      	ldr	r3, [r7, #8]
   16866:	3302      	adds	r3, #2
   16868:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advSid, p);
   1686a:	68bb      	ldr	r3, [r7, #8]
   1686c:	1c5a      	adds	r2, r3, #1
   1686e:	60ba      	str	r2, [r7, #8]
   16870:	781a      	ldrb	r2, [r3, #0]
   16872:	68fb      	ldr	r3, [r7, #12]
   16874:	721a      	strb	r2, [r3, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advAddrType, p);
   16876:	68bb      	ldr	r3, [r7, #8]
   16878:	1c5a      	adds	r2, r3, #1
   1687a:	60ba      	str	r2, [r7, #8]
   1687c:	781a      	ldrb	r2, [r3, #0]
   1687e:	68fb      	ldr	r3, [r7, #12]
   16880:	725a      	strb	r2, [r3, #9]
  BSTREAM_TO_BDA(pMsg->lePerAdvSyncEst.advAddr, p);
   16882:	68fb      	ldr	r3, [r7, #12]
   16884:	330a      	adds	r3, #10
   16886:	68b9      	ldr	r1, [r7, #8]
   16888:	4618      	mov	r0, r3
   1688a:	f001 ffad 	bl	187e8 <BdaCpy>
   1688e:	68bb      	ldr	r3, [r7, #8]
   16890:	3306      	adds	r3, #6
   16892:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.advPhy, p);
   16894:	68bb      	ldr	r3, [r7, #8]
   16896:	1c5a      	adds	r2, r3, #1
   16898:	60ba      	str	r2, [r7, #8]
   1689a:	781a      	ldrb	r2, [r3, #0]
   1689c:	68fb      	ldr	r3, [r7, #12]
   1689e:	741a      	strb	r2, [r3, #16]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncEst.perAdvInterval, p);
   168a0:	68bb      	ldr	r3, [r7, #8]
   168a2:	781b      	ldrb	r3, [r3, #0]
   168a4:	b29a      	uxth	r2, r3
   168a6:	68bb      	ldr	r3, [r7, #8]
   168a8:	3301      	adds	r3, #1
   168aa:	781b      	ldrb	r3, [r3, #0]
   168ac:	b29b      	uxth	r3, r3
   168ae:	021b      	lsls	r3, r3, #8
   168b0:	b29b      	uxth	r3, r3
   168b2:	4413      	add	r3, r2
   168b4:	b29a      	uxth	r2, r3
   168b6:	68fb      	ldr	r3, [r7, #12]
   168b8:	825a      	strh	r2, [r3, #18]
   168ba:	68bb      	ldr	r3, [r7, #8]
   168bc:	3302      	adds	r3, #2
   168be:	60bb      	str	r3, [r7, #8]
  BSTREAM_TO_UINT8(pMsg->lePerAdvSyncEst.clockAccuracy, p);
   168c0:	68bb      	ldr	r3, [r7, #8]
   168c2:	1c5a      	adds	r2, r3, #1
   168c4:	60ba      	str	r2, [r7, #8]
   168c6:	781a      	ldrb	r2, [r3, #0]
   168c8:	68fb      	ldr	r3, [r7, #12]
   168ca:	751a      	strb	r2, [r3, #20]

  pMsg->hdr.status = pMsg->lePerAdvSyncEst.status;
   168cc:	68fb      	ldr	r3, [r7, #12]
   168ce:	791a      	ldrb	r2, [r3, #4]
   168d0:	68fb      	ldr	r3, [r7, #12]
   168d2:	70da      	strb	r2, [r3, #3]
}
   168d4:	bf00      	nop
   168d6:	3710      	adds	r7, #16
   168d8:	46bd      	mov	sp, r7
   168da:	bd80      	pop	{r7, pc}

000168dc <hciEvtProcessLePerAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLePerAdvReport(uint8_t *p, uint8_t len)
{
   168dc:	b580      	push	{r7, lr}
   168de:	b084      	sub	sp, #16
   168e0:	af00      	add	r7, sp, #0
   168e2:	6078      	str	r0, [r7, #4]
   168e4:	460b      	mov	r3, r1
   168e6:	70fb      	strb	r3, [r7, #3]
  uint8_t                dataLen;

  HCI_TRACE_INFO0("HCI Per Adv report");

  /* get report data length */
  dataLen = p[HCI_PER_ADV_RPT_DATA_LEN_OFFSET];
   168e8:	687b      	ldr	r3, [r7, #4]
   168ea:	795b      	ldrb	r3, [r3, #5]
   168ec:	73fb      	strb	r3, [r7, #15]

  /* sanity check on report length; quit if invalid */
  if (dataLen > HCI_PER_ADV_RPT_DATA_LEN)
   168ee:	7bfb      	ldrb	r3, [r7, #15]
   168f0:	2bf8      	cmp	r3, #248	; 0xf8
   168f2:	d857      	bhi.n	169a4 <hciEvtProcessLePerAdvReport+0xc8>
    HCI_TRACE_WARN1("Invalid per adv report data len: %d", dataLen);
    return;
  }

  /* allocate temp buffer that can hold max length periodic adv report data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLePerAdvReportEvt_t) + dataLen)) != NULL)
   168f4:	7bfb      	ldrb	r3, [r7, #15]
   168f6:	b29b      	uxth	r3, r3
   168f8:	3310      	adds	r3, #16
   168fa:	b29b      	uxth	r3, r3
   168fc:	4618      	mov	r0, r3
   168fe:	f001 f827 	bl	17950 <WsfBufAlloc>
   16902:	60b8      	str	r0, [r7, #8]
   16904:	68bb      	ldr	r3, [r7, #8]
   16906:	2b00      	cmp	r3, #0
   16908:	d04d      	beq.n	169a6 <hciEvtProcessLePerAdvReport+0xca>
  {
    /* parse report and execute callback */
    BSTREAM_TO_UINT16(pMsg->syncHandle, p);
   1690a:	687b      	ldr	r3, [r7, #4]
   1690c:	781b      	ldrb	r3, [r3, #0]
   1690e:	b29a      	uxth	r2, r3
   16910:	687b      	ldr	r3, [r7, #4]
   16912:	3301      	adds	r3, #1
   16914:	781b      	ldrb	r3, [r3, #0]
   16916:	b29b      	uxth	r3, r3
   16918:	021b      	lsls	r3, r3, #8
   1691a:	b29b      	uxth	r3, r3
   1691c:	4413      	add	r3, r2
   1691e:	b29a      	uxth	r2, r3
   16920:	68bb      	ldr	r3, [r7, #8]
   16922:	809a      	strh	r2, [r3, #4]
   16924:	687b      	ldr	r3, [r7, #4]
   16926:	3302      	adds	r3, #2
   16928:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT8(pMsg->txPower, p);
   1692a:	687b      	ldr	r3, [r7, #4]
   1692c:	1c5a      	adds	r2, r3, #1
   1692e:	607a      	str	r2, [r7, #4]
   16930:	781a      	ldrb	r2, [r3, #0]
   16932:	68bb      	ldr	r3, [r7, #8]
   16934:	719a      	strb	r2, [r3, #6]
    BSTREAM_TO_UINT8(pMsg->rssi, p);
   16936:	687b      	ldr	r3, [r7, #4]
   16938:	1c5a      	adds	r2, r3, #1
   1693a:	607a      	str	r2, [r7, #4]
   1693c:	781a      	ldrb	r2, [r3, #0]
   1693e:	68bb      	ldr	r3, [r7, #8]
   16940:	71da      	strb	r2, [r3, #7]
    BSTREAM_TO_UINT8(pMsg->unused, p);
   16942:	687b      	ldr	r3, [r7, #4]
   16944:	1c5a      	adds	r2, r3, #1
   16946:	607a      	str	r2, [r7, #4]
   16948:	781a      	ldrb	r2, [r3, #0]
   1694a:	68bb      	ldr	r3, [r7, #8]
   1694c:	721a      	strb	r2, [r3, #8]
    BSTREAM_TO_UINT8(pMsg->status, p);
   1694e:	687b      	ldr	r3, [r7, #4]
   16950:	1c5a      	adds	r2, r3, #1
   16952:	607a      	str	r2, [r7, #4]
   16954:	781a      	ldrb	r2, [r3, #0]
   16956:	68bb      	ldr	r3, [r7, #8]
   16958:	725a      	strb	r2, [r3, #9]
    BSTREAM_TO_UINT8(pMsg->len, p);
   1695a:	687b      	ldr	r3, [r7, #4]
   1695c:	1c5a      	adds	r2, r3, #1
   1695e:	607a      	str	r2, [r7, #4]
   16960:	781a      	ldrb	r2, [r3, #0]
   16962:	68bb      	ldr	r3, [r7, #8]
   16964:	729a      	strb	r2, [r3, #10]

    HCI_TRACE_INFO1("HCI Per Adv report, data len: %d", pMsg->len);

    /* Copy data to space after end of report struct */
    pMsg->pData = (uint8_t *)(pMsg + 1);
   16966:	68bb      	ldr	r3, [r7, #8]
   16968:	f103 0210 	add.w	r2, r3, #16
   1696c:	68bb      	ldr	r3, [r7, #8]
   1696e:	60da      	str	r2, [r3, #12]
    memcpy(pMsg->pData, p, pMsg->len);
   16970:	68bb      	ldr	r3, [r7, #8]
   16972:	68d8      	ldr	r0, [r3, #12]
   16974:	68bb      	ldr	r3, [r7, #8]
   16976:	7a9b      	ldrb	r3, [r3, #10]
   16978:	461a      	mov	r2, r3
   1697a:	6879      	ldr	r1, [r7, #4]
   1697c:	f7f5 fbf0 	bl	c160 <memcpy>

    /* initialize message header */
    pMsg->hdr.param = 0;
   16980:	68bb      	ldr	r3, [r7, #8]
   16982:	2200      	movs	r2, #0
   16984:	801a      	strh	r2, [r3, #0]
    pMsg->hdr.event = HCI_LE_PER_ADV_REPORT_CBACK_EVT;
   16986:	68bb      	ldr	r3, [r7, #8]
   16988:	2231      	movs	r2, #49	; 0x31
   1698a:	709a      	strb	r2, [r3, #2]
    pMsg->hdr.status = pMsg->status;
   1698c:	68bb      	ldr	r3, [r7, #8]
   1698e:	7a5a      	ldrb	r2, [r3, #9]
   16990:	68bb      	ldr	r3, [r7, #8]
   16992:	70da      	strb	r2, [r3, #3]

    /* execute callback */
    (*hciCb.evtCback)((hciEvt_t *)pMsg);
   16994:	4b05      	ldr	r3, [pc, #20]	; (169ac <hciEvtProcessLePerAdvReport+0xd0>)
   16996:	689b      	ldr	r3, [r3, #8]
   16998:	68b8      	ldr	r0, [r7, #8]
   1699a:	4798      	blx	r3

    /* free buffer */
    WsfBufFree(pMsg);
   1699c:	68b8      	ldr	r0, [r7, #8]
   1699e:	f001 f811 	bl	179c4 <WsfBufFree>
   169a2:	e000      	b.n	169a6 <hciEvtProcessLePerAdvReport+0xca>
    return;
   169a4:	bf00      	nop
  }
}
   169a6:	3710      	adds	r7, #16
   169a8:	46bd      	mov	sp, r7
   169aa:	bd80      	pop	{r7, pc}
   169ac:	10006538 	.word	0x10006538

000169b0 <hciEvtParseLeCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLeCmdCmpl(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   169b0:	b480      	push	{r7}
   169b2:	b085      	sub	sp, #20
   169b4:	af00      	add	r7, sp, #0
   169b6:	60f8      	str	r0, [r7, #12]
   169b8:	60b9      	str	r1, [r7, #8]
   169ba:	4613      	mov	r3, r2
   169bc:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT8(pMsg->hdr.status, p);
   169be:	68bb      	ldr	r3, [r7, #8]
   169c0:	1c5a      	adds	r2, r3, #1
   169c2:	60ba      	str	r2, [r7, #8]
   169c4:	781a      	ldrb	r2, [r3, #0]
   169c6:	68fb      	ldr	r3, [r7, #12]
   169c8:	70da      	strb	r2, [r3, #3]
}
   169ca:	bf00      	nop
   169cc:	3714      	adds	r7, #20
   169ce:	46bd      	mov	sp, r7
   169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   169d4:	4770      	bx	lr

000169d6 <hciEvtParseLePerAdvSyncLost>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtParseLePerAdvSyncLost(hciEvt_t *pMsg, uint8_t *p, uint8_t len)
{
   169d6:	b480      	push	{r7}
   169d8:	b085      	sub	sp, #20
   169da:	af00      	add	r7, sp, #0
   169dc:	60f8      	str	r0, [r7, #12]
   169de:	60b9      	str	r1, [r7, #8]
   169e0:	4613      	mov	r3, r2
   169e2:	71fb      	strb	r3, [r7, #7]
  BSTREAM_TO_UINT16(pMsg->lePerAdvSyncLost.syncHandle, p);
   169e4:	68bb      	ldr	r3, [r7, #8]
   169e6:	781b      	ldrb	r3, [r3, #0]
   169e8:	b29a      	uxth	r2, r3
   169ea:	68bb      	ldr	r3, [r7, #8]
   169ec:	3301      	adds	r3, #1
   169ee:	781b      	ldrb	r3, [r3, #0]
   169f0:	b29b      	uxth	r3, r3
   169f2:	021b      	lsls	r3, r3, #8
   169f4:	b29b      	uxth	r3, r3
   169f6:	4413      	add	r3, r2
   169f8:	b29a      	uxth	r2, r3
   169fa:	68fb      	ldr	r3, [r7, #12]
   169fc:	809a      	strh	r2, [r3, #4]
   169fe:	68bb      	ldr	r3, [r7, #8]
   16a00:	3302      	adds	r3, #2
   16a02:	60bb      	str	r3, [r7, #8]
}
   16a04:	bf00      	nop
   16a06:	3714      	adds	r7, #20
   16a08:	46bd      	mov	sp, r7
   16a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a0e:	4770      	bx	lr

00016a10 <hciEvtProcessLeDirectAdvReport>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciEvtProcessLeDirectAdvReport(uint8_t *p, uint8_t len)
{
   16a10:	b580      	push	{r7, lr}
   16a12:	b084      	sub	sp, #16
   16a14:	af00      	add	r7, sp, #0
   16a16:	6078      	str	r0, [r7, #4]
   16a18:	460b      	mov	r3, r1
   16a1a:	70fb      	strb	r3, [r7, #3]
  hciLeAdvReportEvt_t *pMsg;
  uint8_t             i;

  /* get number of reports */
  BSTREAM_TO_UINT8(i, p);
   16a1c:	687b      	ldr	r3, [r7, #4]
   16a1e:	1c5a      	adds	r2, r3, #1
   16a20:	607a      	str	r2, [r7, #4]
   16a22:	781b      	ldrb	r3, [r3, #0]
   16a24:	73fb      	strb	r3, [r7, #15]

  HCI_TRACE_INFO1("HCI Adv report, num reports: %d", i);

  /* sanity check num reports */
  if (i > HCI_MAX_REPORTS)
   16a26:	7bfb      	ldrb	r3, [r7, #15]
   16a28:	2b0f      	cmp	r3, #15
   16a2a:	d84e      	bhi.n	16aca <hciEvtProcessLeDirectAdvReport+0xba>
  {
    return;
  }

  /* allocate temp buffer that can hold max length adv/scan rsp data */
  if ((pMsg = WsfBufAlloc(sizeof(hciLeAdvReportEvt_t))) != NULL)
   16a2c:	201c      	movs	r0, #28
   16a2e:	f000 ff8f 	bl	17950 <WsfBufAlloc>
   16a32:	60b8      	str	r0, [r7, #8]
   16a34:	68bb      	ldr	r3, [r7, #8]
   16a36:	2b00      	cmp	r3, #0
   16a38:	d048      	beq.n	16acc <hciEvtProcessLeDirectAdvReport+0xbc>
  {
    /* parse each report and execute callback */
    while (i-- > 0)
   16a3a:	e03d      	b.n	16ab8 <hciEvtProcessLeDirectAdvReport+0xa8>
    {
      BSTREAM_TO_UINT8(pMsg->eventType, p);
   16a3c:	687b      	ldr	r3, [r7, #4]
   16a3e:	1c5a      	adds	r2, r3, #1
   16a40:	607a      	str	r2, [r7, #4]
   16a42:	781a      	ldrb	r2, [r3, #0]
   16a44:	68bb      	ldr	r3, [r7, #8]
   16a46:	729a      	strb	r2, [r3, #10]
      BSTREAM_TO_UINT8(pMsg->addrType, p);
   16a48:	687b      	ldr	r3, [r7, #4]
   16a4a:	1c5a      	adds	r2, r3, #1
   16a4c:	607a      	str	r2, [r7, #4]
   16a4e:	781a      	ldrb	r2, [r3, #0]
   16a50:	68bb      	ldr	r3, [r7, #8]
   16a52:	72da      	strb	r2, [r3, #11]
      BSTREAM_TO_BDA(pMsg->addr, p);
   16a54:	68bb      	ldr	r3, [r7, #8]
   16a56:	330c      	adds	r3, #12
   16a58:	6879      	ldr	r1, [r7, #4]
   16a5a:	4618      	mov	r0, r3
   16a5c:	f001 fec4 	bl	187e8 <BdaCpy>
   16a60:	687b      	ldr	r3, [r7, #4]
   16a62:	3306      	adds	r3, #6
   16a64:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->directAddrType, p);
   16a66:	687b      	ldr	r3, [r7, #4]
   16a68:	1c5a      	adds	r2, r3, #1
   16a6a:	607a      	str	r2, [r7, #4]
   16a6c:	781a      	ldrb	r2, [r3, #0]
   16a6e:	68bb      	ldr	r3, [r7, #8]
   16a70:	749a      	strb	r2, [r3, #18]
      BSTREAM_TO_BDA(pMsg->directAddr, p);
   16a72:	68bb      	ldr	r3, [r7, #8]
   16a74:	3313      	adds	r3, #19
   16a76:	6879      	ldr	r1, [r7, #4]
   16a78:	4618      	mov	r0, r3
   16a7a:	f001 feb5 	bl	187e8 <BdaCpy>
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	3306      	adds	r3, #6
   16a82:	607b      	str	r3, [r7, #4]
      BSTREAM_TO_UINT8(pMsg->rssi, p);
   16a84:	687b      	ldr	r3, [r7, #4]
   16a86:	1c5a      	adds	r2, r3, #1
   16a88:	607a      	str	r2, [r7, #4]
   16a8a:	781b      	ldrb	r3, [r3, #0]
   16a8c:	b25a      	sxtb	r2, r3
   16a8e:	68bb      	ldr	r3, [r7, #8]
   16a90:	725a      	strb	r2, [r3, #9]

      /* zero out unused fields */
      pMsg->len = 0;
   16a92:	68bb      	ldr	r3, [r7, #8]
   16a94:	2200      	movs	r2, #0
   16a96:	721a      	strb	r2, [r3, #8]
      pMsg->pData = NULL;
   16a98:	68bb      	ldr	r3, [r7, #8]
   16a9a:	2200      	movs	r2, #0
   16a9c:	605a      	str	r2, [r3, #4]

      /* initialize message header */
      pMsg->hdr.param = 0;
   16a9e:	68bb      	ldr	r3, [r7, #8]
   16aa0:	2200      	movs	r2, #0
   16aa2:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = HCI_LE_ADV_REPORT_CBACK_EVT;
   16aa4:	68bb      	ldr	r3, [r7, #8]
   16aa6:	2206      	movs	r2, #6
   16aa8:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16aaa:	68bb      	ldr	r3, [r7, #8]
   16aac:	2200      	movs	r2, #0
   16aae:	70da      	strb	r2, [r3, #3]

      /* execute callback */
      (*hciCb.evtCback)((hciEvt_t *) pMsg);
   16ab0:	4b08      	ldr	r3, [pc, #32]	; (16ad4 <hciEvtProcessLeDirectAdvReport+0xc4>)
   16ab2:	689b      	ldr	r3, [r3, #8]
   16ab4:	68b8      	ldr	r0, [r7, #8]
   16ab6:	4798      	blx	r3
    while (i-- > 0)
   16ab8:	7bfb      	ldrb	r3, [r7, #15]
   16aba:	1e5a      	subs	r2, r3, #1
   16abc:	73fa      	strb	r2, [r7, #15]
   16abe:	2b00      	cmp	r3, #0
   16ac0:	d1bc      	bne.n	16a3c <hciEvtProcessLeDirectAdvReport+0x2c>
    }

    /* free buffer */
    WsfBufFree(pMsg);
   16ac2:	68b8      	ldr	r0, [r7, #8]
   16ac4:	f000 ff7e 	bl	179c4 <WsfBufFree>
   16ac8:	e000      	b.n	16acc <hciEvtProcessLeDirectAdvReport+0xbc>
    return;
   16aca:	bf00      	nop
  }
}
   16acc:	3710      	adds	r7, #16
   16ace:	46bd      	mov	sp, r7
   16ad0:	bd80      	pop	{r7, pc}
   16ad2:	bf00      	nop
   16ad4:	10006538 	.word	0x10006538

00016ad8 <hciEvtCmdStatusFailure>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtCmdStatusFailure(uint8_t status, uint16_t opcode)
{
   16ad8:	b480      	push	{r7}
   16ada:	b083      	sub	sp, #12
   16adc:	af00      	add	r7, sp, #0
   16ade:	4603      	mov	r3, r0
   16ae0:	460a      	mov	r2, r1
   16ae2:	71fb      	strb	r3, [r7, #7]
   16ae4:	4613      	mov	r3, r2
   16ae6:	80bb      	strh	r3, [r7, #4]
  HCI_OPCODE_LE_CONN_UPDATE
  HCI_OPCODE_LE_READ_REMOTE_FEAT
  HCI_OPCODE_LE_START_ENCRYPTION
  HCI_OPCODE_READ_REMOTE_VER_INFO
#endif
}
   16ae8:	bf00      	nop
   16aea:	370c      	adds	r7, #12
   16aec:	46bd      	mov	sp, r7
   16aee:	f85d 7b04 	ldr.w	r7, [sp], #4
   16af2:	4770      	bx	lr

00016af4 <hciEvtProcessCmdStatus>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdStatus(uint8_t *p)
{
   16af4:	b580      	push	{r7, lr}
   16af6:	b084      	sub	sp, #16
   16af8:	af00      	add	r7, sp, #0
   16afa:	6078      	str	r0, [r7, #4]
  uint8_t   status;
  uint8_t   numPkts;
  uint16_t  opcode;

  BSTREAM_TO_UINT8(status, p);
   16afc:	687b      	ldr	r3, [r7, #4]
   16afe:	1c5a      	adds	r2, r3, #1
   16b00:	607a      	str	r2, [r7, #4]
   16b02:	781b      	ldrb	r3, [r3, #0]
   16b04:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT8(numPkts, p);
   16b06:	687b      	ldr	r3, [r7, #4]
   16b08:	1c5a      	adds	r2, r3, #1
   16b0a:	607a      	str	r2, [r7, #4]
   16b0c:	781b      	ldrb	r3, [r3, #0]
   16b0e:	73bb      	strb	r3, [r7, #14]
  BSTREAM_TO_UINT16(opcode, p);
   16b10:	687b      	ldr	r3, [r7, #4]
   16b12:	781b      	ldrb	r3, [r3, #0]
   16b14:	b29a      	uxth	r2, r3
   16b16:	687b      	ldr	r3, [r7, #4]
   16b18:	3301      	adds	r3, #1
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	b29b      	uxth	r3, r3
   16b1e:	021b      	lsls	r3, r3, #8
   16b20:	b29b      	uxth	r3, r3
   16b22:	4413      	add	r3, r2
   16b24:	81bb      	strh	r3, [r7, #12]
   16b26:	687b      	ldr	r3, [r7, #4]
   16b28:	3302      	adds	r3, #2
   16b2a:	607b      	str	r3, [r7, #4]

  if (status != HCI_SUCCESS)  /* optional: or vendor specific */
   16b2c:	7bfb      	ldrb	r3, [r7, #15]
   16b2e:	2b00      	cmp	r3, #0
   16b30:	d005      	beq.n	16b3e <hciEvtProcessCmdStatus+0x4a>
  {
    hciEvtCmdStatusFailure(status, opcode);
   16b32:	89ba      	ldrh	r2, [r7, #12]
   16b34:	7bfb      	ldrb	r3, [r7, #15]
   16b36:	4611      	mov	r1, r2
   16b38:	4618      	mov	r0, r3
   16b3a:	f7ff ffcd 	bl	16ad8 <hciEvtCmdStatusFailure>
  }

  /* optional:  handle vendor-specific command status event */

  hciCmdRecvCmpl(numPkts);
   16b3e:	7bbb      	ldrb	r3, [r7, #14]
   16b40:	4618      	mov	r0, r3
   16b42:	f7fd f8a3 	bl	13c8c <hciCmdRecvCmpl>
}
   16b46:	bf00      	nop
   16b48:	3710      	adds	r7, #16
   16b4a:	46bd      	mov	sp, r7
   16b4c:	bd80      	pop	{r7, pc}
	...

00016b50 <hciEvtProcessCmdCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessCmdCmpl(uint8_t *p, uint8_t len)
{
   16b50:	b580      	push	{r7, lr}
   16b52:	b086      	sub	sp, #24
   16b54:	af00      	add	r7, sp, #0
   16b56:	6078      	str	r0, [r7, #4]
   16b58:	460b      	mov	r3, r1
   16b5a:	70fb      	strb	r3, [r7, #3]
  uint8_t       numPkts;
  uint16_t      opcode;
  hciEvt_t      *pMsg;
  uint8_t       cbackEvt = 0;
   16b5c:	2300      	movs	r3, #0
   16b5e:	75fb      	strb	r3, [r7, #23]
  hciEvtCback_t cback = hciCb.evtCback;
   16b60:	4ba2      	ldr	r3, [pc, #648]	; (16dec <hciEvtProcessCmdCmpl+0x29c>)
   16b62:	689b      	ldr	r3, [r3, #8]
   16b64:	613b      	str	r3, [r7, #16]

  BSTREAM_TO_UINT8(numPkts, p);
   16b66:	687b      	ldr	r3, [r7, #4]
   16b68:	1c5a      	adds	r2, r3, #1
   16b6a:	607a      	str	r2, [r7, #4]
   16b6c:	781b      	ldrb	r3, [r3, #0]
   16b6e:	73fb      	strb	r3, [r7, #15]
  BSTREAM_TO_UINT16(opcode, p);
   16b70:	687b      	ldr	r3, [r7, #4]
   16b72:	781b      	ldrb	r3, [r3, #0]
   16b74:	b29a      	uxth	r2, r3
   16b76:	687b      	ldr	r3, [r7, #4]
   16b78:	3301      	adds	r3, #1
   16b7a:	781b      	ldrb	r3, [r3, #0]
   16b7c:	b29b      	uxth	r3, r3
   16b7e:	021b      	lsls	r3, r3, #8
   16b80:	b29b      	uxth	r3, r3
   16b82:	4413      	add	r3, r2
   16b84:	81bb      	strh	r3, [r7, #12]
   16b86:	687b      	ldr	r3, [r7, #4]
   16b88:	3302      	adds	r3, #2
   16b8a:	607b      	str	r3, [r7, #4]

  /* convert opcode to internal event code and perform special handling */
  switch (opcode)
   16b8c:	89bb      	ldrh	r3, [r7, #12]
   16b8e:	f242 0222 	movw	r2, #8226	; 0x2022
   16b92:	4293      	cmp	r3, r2
   16b94:	f000 80aa 	beq.w	16cec <hciEvtProcessCmdCmpl+0x19c>
   16b98:	f242 0222 	movw	r2, #8226	; 0x2022
   16b9c:	4293      	cmp	r3, r2
   16b9e:	dc49      	bgt.n	16c34 <hciEvtProcessCmdCmpl+0xe4>
   16ba0:	f242 0215 	movw	r2, #8213	; 0x2015
   16ba4:	4293      	cmp	r3, r2
   16ba6:	f000 80b3 	beq.w	16d10 <hciEvtProcessCmdCmpl+0x1c0>
   16baa:	f242 0215 	movw	r2, #8213	; 0x2015
   16bae:	4293      	cmp	r3, r2
   16bb0:	dc22      	bgt.n	16bf8 <hciEvtProcessCmdCmpl+0xa8>
   16bb2:	f241 4205 	movw	r2, #5125	; 0x1405
   16bb6:	4293      	cmp	r3, r2
   16bb8:	f000 80ad 	beq.w	16d16 <hciEvtProcessCmdCmpl+0x1c6>
   16bbc:	f241 4205 	movw	r2, #5125	; 0x1405
   16bc0:	4293      	cmp	r3, r2
   16bc2:	dc0a      	bgt.n	16bda <hciEvtProcessCmdCmpl+0x8a>
   16bc4:	f640 422d 	movw	r2, #3117	; 0xc2d
   16bc8:	4293      	cmp	r3, r2
   16bca:	f000 80a7 	beq.w	16d1c <hciEvtProcessCmdCmpl+0x1cc>
   16bce:	f640 427c 	movw	r2, #3196	; 0xc7c
   16bd2:	4293      	cmp	r3, r2
   16bd4:	f000 80b7 	beq.w	16d46 <hciEvtProcessCmdCmpl+0x1f6>
   16bd8:	e0cd      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16bda:	f242 020c 	movw	r2, #8204	; 0x200c
   16bde:	4293      	cmp	r3, r2
   16be0:	f000 80ba 	beq.w	16d58 <hciEvtProcessCmdCmpl+0x208>
   16be4:	f242 020e 	movw	r2, #8206	; 0x200e
   16be8:	4293      	cmp	r3, r2
   16bea:	d06a      	beq.n	16cc2 <hciEvtProcessCmdCmpl+0x172>
   16bec:	f242 020a 	movw	r2, #8202	; 0x200a
   16bf0:	4293      	cmp	r3, r2
   16bf2:	f000 80b4 	beq.w	16d5e <hciEvtProcessCmdCmpl+0x20e>
   16bf6:	e0be      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16bf8:	f242 021a 	movw	r2, #8218	; 0x201a
   16bfc:	4293      	cmp	r3, r2
   16bfe:	d07b      	beq.n	16cf8 <hciEvtProcessCmdCmpl+0x1a8>
   16c00:	f242 021a 	movw	r2, #8218	; 0x201a
   16c04:	4293      	cmp	r3, r2
   16c06:	dc08      	bgt.n	16c1a <hciEvtProcessCmdCmpl+0xca>
   16c08:	f242 0217 	movw	r2, #8215	; 0x2017
   16c0c:	4293      	cmp	r3, r2
   16c0e:	d05b      	beq.n	16cc8 <hciEvtProcessCmdCmpl+0x178>
   16c10:	f242 0218 	movw	r2, #8216	; 0x2018
   16c14:	4293      	cmp	r3, r2
   16c16:	d075      	beq.n	16d04 <hciEvtProcessCmdCmpl+0x1b4>
   16c18:	e0ad      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16c1a:	f242 0220 	movw	r2, #8224	; 0x2020
   16c1e:	4293      	cmp	r3, r2
   16c20:	d058      	beq.n	16cd4 <hciEvtProcessCmdCmpl+0x184>
   16c22:	f242 0220 	movw	r2, #8224	; 0x2020
   16c26:	4293      	cmp	r3, r2
   16c28:	dc57      	bgt.n	16cda <hciEvtProcessCmdCmpl+0x18a>
   16c2a:	f242 021b 	movw	r2, #8219	; 0x201b
   16c2e:	4293      	cmp	r3, r2
   16c30:	d065      	beq.n	16cfe <hciEvtProcessCmdCmpl+0x1ae>
   16c32:	e0a0      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16c34:	f242 022c 	movw	r2, #8236	; 0x202c
   16c38:	4293      	cmp	r3, r2
   16c3a:	d07e      	beq.n	16d3a <hciEvtProcessCmdCmpl+0x1ea>
   16c3c:	f242 022c 	movw	r2, #8236	; 0x202c
   16c40:	4293      	cmp	r3, r2
   16c42:	dc1d      	bgt.n	16c80 <hciEvtProcessCmdCmpl+0x130>
   16c44:	f242 0227 	movw	r2, #8231	; 0x2027
   16c48:	4293      	cmp	r3, r2
   16c4a:	d06a      	beq.n	16d22 <hciEvtProcessCmdCmpl+0x1d2>
   16c4c:	f242 0227 	movw	r2, #8231	; 0x2027
   16c50:	4293      	cmp	r3, r2
   16c52:	dc08      	bgt.n	16c66 <hciEvtProcessCmdCmpl+0x116>
   16c54:	f242 0223 	movw	r2, #8227	; 0x2023
   16c58:	4293      	cmp	r3, r2
   16c5a:	d041      	beq.n	16ce0 <hciEvtProcessCmdCmpl+0x190>
   16c5c:	f242 0224 	movw	r2, #8228	; 0x2024
   16c60:	4293      	cmp	r3, r2
   16c62:	d040      	beq.n	16ce6 <hciEvtProcessCmdCmpl+0x196>
   16c64:	e087      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16c66:	f242 0229 	movw	r2, #8233	; 0x2029
   16c6a:	4293      	cmp	r3, r2
   16c6c:	d05f      	beq.n	16d2e <hciEvtProcessCmdCmpl+0x1de>
   16c6e:	f242 0229 	movw	r2, #8233	; 0x2029
   16c72:	4293      	cmp	r3, r2
   16c74:	db58      	blt.n	16d28 <hciEvtProcessCmdCmpl+0x1d8>
   16c76:	f242 022b 	movw	r2, #8235	; 0x202b
   16c7a:	4293      	cmp	r3, r2
   16c7c:	d05a      	beq.n	16d34 <hciEvtProcessCmdCmpl+0x1e4>
   16c7e:	e07a      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16c80:	f242 0231 	movw	r2, #8241	; 0x2031
   16c84:	4293      	cmp	r3, r2
   16c86:	d064      	beq.n	16d52 <hciEvtProcessCmdCmpl+0x202>
   16c88:	f242 0231 	movw	r2, #8241	; 0x2031
   16c8c:	4293      	cmp	r3, r2
   16c8e:	dc0c      	bgt.n	16caa <hciEvtProcessCmdCmpl+0x15a>
   16c90:	f242 022f 	movw	r2, #8239	; 0x202f
   16c94:	4293      	cmp	r3, r2
   16c96:	d02c      	beq.n	16cf2 <hciEvtProcessCmdCmpl+0x1a2>
   16c98:	f242 022f 	movw	r2, #8239	; 0x202f
   16c9c:	4293      	cmp	r3, r2
   16c9e:	dc55      	bgt.n	16d4c <hciEvtProcessCmdCmpl+0x1fc>
   16ca0:	f242 022d 	movw	r2, #8237	; 0x202d
   16ca4:	4293      	cmp	r3, r2
   16ca6:	d04b      	beq.n	16d40 <hciEvtProcessCmdCmpl+0x1f0>
   16ca8:	e065      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
   16caa:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
   16cae:	d05f      	beq.n	16d70 <hciEvtProcessCmdCmpl+0x220>
   16cb0:	f242 0242 	movw	r2, #8258	; 0x2042
   16cb4:	4293      	cmp	r3, r2
   16cb6:	d055      	beq.n	16d64 <hciEvtProcessCmdCmpl+0x214>
   16cb8:	f242 0239 	movw	r2, #8249	; 0x2039
   16cbc:	4293      	cmp	r3, r2
   16cbe:	d054      	beq.n	16d6a <hciEvtProcessCmdCmpl+0x21a>
   16cc0:	e059      	b.n	16d76 <hciEvtProcessCmdCmpl+0x226>
  {
  case HCI_OPCODE_LE_CREATE_CONN_CANCEL:
    cbackEvt = HCI_LE_CREATE_CONN_CANCEL_CMD_CMPL_CBACK_EVT;
   16cc2:	2305      	movs	r3, #5
   16cc4:	75fb      	strb	r3, [r7, #23]
    break;
   16cc6:	e064      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ENCRYPT:
    cbackEvt = HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT;
   16cc8:	231b      	movs	r3, #27
   16cca:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   16ccc:	4b47      	ldr	r3, [pc, #284]	; (16dec <hciEvtProcessCmdCmpl+0x29c>)
   16cce:	68db      	ldr	r3, [r3, #12]
   16cd0:	613b      	str	r3, [r7, #16]
    break;
   16cd2:	e05e      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_REP_CMD_CMPL_CBACK_EVT;
   16cd4:	231d      	movs	r3, #29
   16cd6:	75fb      	strb	r3, [r7, #23]
    break;
   16cd8:	e05b      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REM_CONN_PARAM_NEG_REP:
    cbackEvt = HCI_LE_REM_CONN_PARAM_NEG_REP_CMD_CMPL_CBACK_EVT;
   16cda:	231e      	movs	r3, #30
   16cdc:	75fb      	strb	r3, [r7, #23]
    break;
   16cde:	e058      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_DEF_DATA_LEN:
    cbackEvt = HCI_LE_READ_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16ce0:	231f      	movs	r3, #31
   16ce2:	75fb      	strb	r3, [r7, #23]
    break;
   16ce4:	e055      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_WRITE_DEF_DATA_LEN:
    cbackEvt = HCI_LE_WRITE_DEF_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16ce6:	2320      	movs	r3, #32
   16ce8:	75fb      	strb	r3, [r7, #23]
    break;
   16cea:	e052      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DATA_LEN:
    cbackEvt = HCI_LE_SET_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16cec:	2321      	movs	r3, #33	; 0x21
   16cee:	75fb      	strb	r3, [r7, #23]
    break;
   16cf0:	e04f      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_MAX_DATA_LEN:
    cbackEvt = HCI_LE_READ_MAX_DATA_LEN_CMD_CMPL_CBACK_EVT;
   16cf2:	2322      	movs	r3, #34	; 0x22
   16cf4:	75fb      	strb	r3, [r7, #23]
    break;
   16cf6:	e04c      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_REPL:
    cbackEvt = HCI_LE_LTK_REQ_REPL_CMD_CMPL_CBACK_EVT;
   16cf8:	230c      	movs	r3, #12
   16cfa:	75fb      	strb	r3, [r7, #23]
    break;
   16cfc:	e049      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_LTK_REQ_NEG_REPL:
    cbackEvt = HCI_LE_LTK_REQ_NEG_REPL_CMD_CMPL_CBACK_EVT;
   16cfe:	230d      	movs	r3, #13
   16d00:	75fb      	strb	r3, [r7, #23]
    break;
   16d02:	e046      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_RAND:
    cbackEvt = HCI_LE_RAND_CMD_CMPL_CBACK_EVT;
   16d04:	231c      	movs	r3, #28
   16d06:	75fb      	strb	r3, [r7, #23]
    cback = hciCb.secCback;
   16d08:	4b38      	ldr	r3, [pc, #224]	; (16dec <hciEvtProcessCmdCmpl+0x29c>)
   16d0a:	68db      	ldr	r3, [r3, #12]
   16d0c:	613b      	str	r3, [r7, #16]
    break;
   16d0e:	e040      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_CHAN_MAP:
    cbackEvt = HCI_LE_READ_CHAN_MAP_CMD_CMPL_CBACK_EVT;
   16d10:	2308      	movs	r3, #8
   16d12:	75fb      	strb	r3, [r7, #23]
    break;
   16d14:	e03d      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_RSSI:
    cbackEvt = HCI_READ_RSSI_CMD_CMPL_CBACK_EVT;
   16d16:	2307      	movs	r3, #7
   16d18:	75fb      	strb	r3, [r7, #23]
    break;
   16d1a:	e03a      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_READ_TX_PWR_LVL:
    cbackEvt = HCI_READ_TX_PWR_LVL_CMD_CMPL_CBACK_EVT;
   16d1c:	2309      	movs	r3, #9
   16d1e:	75fb      	strb	r3, [r7, #23]
    break;
   16d20:	e037      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_ADD_DEV_RES_LIST:
    cbackEvt = HCI_LE_ADD_DEV_TO_RES_LIST_CMD_CMPL_CBACK_EVT;
   16d22:	2315      	movs	r3, #21
   16d24:	75fb      	strb	r3, [r7, #23]
    break;
   16d26:	e034      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_REMOVE_DEV_RES_LIST:
    cbackEvt = HCI_LE_REM_DEV_FROM_RES_LIST_CMD_CMPL_CBACK_EVT;
   16d28:	2316      	movs	r3, #22
   16d2a:	75fb      	strb	r3, [r7, #23]
    break;
   16d2c:	e031      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_CLEAR_RES_LIST:
    cbackEvt = HCI_LE_CLEAR_RES_LIST_CMD_CMPL_CBACK_EVT;
   16d2e:	2317      	movs	r3, #23
   16d30:	75fb      	strb	r3, [r7, #23]
    break;
   16d32:	e02e      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PEER_RES_ADDR:
    cbackEvt = HCI_LE_READ_PEER_RES_ADDR_CMD_CMPL_CBACK_EVT;
   16d34:	2318      	movs	r3, #24
   16d36:	75fb      	strb	r3, [r7, #23]
    break;
   16d38:	e02b      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_LOCAL_RES_ADDR:
    cbackEvt = HCI_LE_READ_LOCAL_RES_ADDR_CMD_CMPL_CBACK_EVT;
   16d3a:	2319      	movs	r3, #25
   16d3c:	75fb      	strb	r3, [r7, #23]
    break;
   16d3e:	e028      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADDR_RES_ENABLE:
    cbackEvt = HCI_LE_SET_ADDR_RES_ENABLE_CMD_CMPL_CBACK_EVT;
   16d40:	231a      	movs	r3, #26
   16d42:	75fb      	strb	r3, [r7, #23]
    break;
   16d44:	e025      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_WRITE_AUTH_PAYLOAD_TO:
    cbackEvt = HCI_WRITE_AUTH_PAYLOAD_TO_CMD_CMPL_CBACK_EVT;
   16d46:	2327      	movs	r3, #39	; 0x27
   16d48:	75fb      	strb	r3, [r7, #23]
    break;
   16d4a:	e022      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_READ_PHY:
    cbackEvt = HCI_LE_READ_PHY_CMD_CMPL_CBACK_EVT;
   16d4c:	2329      	movs	r3, #41	; 0x29
   16d4e:	75fb      	strb	r3, [r7, #23]
    break;
   16d50:	e01f      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_DEF_PHY:
    cbackEvt = HCI_LE_SET_DEF_PHY_CMD_CMPL_CBACK_EVT;
   16d52:	232a      	movs	r3, #42	; 0x2a
   16d54:	75fb      	strb	r3, [r7, #23]
    break;
   16d56:	e01c      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_SCAN_ENABLE:
    cbackEvt = HCI_LE_SCAN_ENABLE_CMPL_CBACK_EVT;
   16d58:	2334      	movs	r3, #52	; 0x34
   16d5a:	75fb      	strb	r3, [r7, #23]
    break;
   16d5c:	e019      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_ADV_ENABLE:
    cbackEvt = HCI_LE_ADV_ENABLE_CMPL_CBACK_EVT;
   16d5e:	2335      	movs	r3, #53	; 0x35
   16d60:	75fb      	strb	r3, [r7, #23]
    break;
   16d62:	e016      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_SCAN_ENABLE:
    cbackEvt = HCI_LE_EXT_SCAN_ENABLE_CMPL_CBACK_EVT;
   16d64:	2336      	movs	r3, #54	; 0x36
   16d66:	75fb      	strb	r3, [r7, #23]
    break;
   16d68:	e013      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  case HCI_OPCODE_LE_SET_EXT_ADV_ENABLE:
    cbackEvt = HCI_LE_EXT_ADV_ENABLE_CMPL_CBACK_EVT;
   16d6a:	2337      	movs	r3, #55	; 0x37
   16d6c:	75fb      	strb	r3, [r7, #23]
    break;
   16d6e:	e010      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>
  
  case HCI_OPCODE_LE_SET_PER_ADV_ENABLE:
    cbackEvt = HCI_LE_PER_ADV_ENABLE_CMPL_CBACK_EVT;
   16d70:	2338      	movs	r3, #56	; 0x38
   16d72:	75fb      	strb	r3, [r7, #23]
    break;
   16d74:	e00d      	b.n	16d92 <hciEvtProcessCmdCmpl+0x242>

  default:
    /* test for vendor specific command completion OGF. */
    if (HCI_OGF(opcode) == HCI_OGF_VENDOR_SPEC)
   16d76:	89bb      	ldrh	r3, [r7, #12]
   16d78:	0a9b      	lsrs	r3, r3, #10
   16d7a:	b29b      	uxth	r3, r3
   16d7c:	2b3f      	cmp	r3, #63	; 0x3f
   16d7e:	d107      	bne.n	16d90 <hciEvtProcessCmdCmpl+0x240>
    {
      cbackEvt = hciCoreVsCmdCmplRcvd(opcode, p, len);
   16d80:	78fa      	ldrb	r2, [r7, #3]
   16d82:	89bb      	ldrh	r3, [r7, #12]
   16d84:	6879      	ldr	r1, [r7, #4]
   16d86:	4618      	mov	r0, r3
   16d88:	f000 fcc4 	bl	17714 <hciCoreVsCmdCmplRcvd>
   16d8c:	4603      	mov	r3, r0
   16d8e:	75fb      	strb	r3, [r7, #23]
    }
    break;
   16d90:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   16d92:	7dfb      	ldrb	r3, [r7, #23]
   16d94:	2b00      	cmp	r3, #0
   16d96:	d021      	beq.n	16ddc <hciEvtProcessCmdCmpl+0x28c>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   16d98:	7dfb      	ldrb	r3, [r7, #23]
   16d9a:	4a15      	ldr	r2, [pc, #84]	; (16df0 <hciEvtProcessCmdCmpl+0x2a0>)
   16d9c:	5cd3      	ldrb	r3, [r2, r3]
   16d9e:	b29b      	uxth	r3, r3
   16da0:	4618      	mov	r0, r3
   16da2:	f000 fdd5 	bl	17950 <WsfBufAlloc>
   16da6:	60b8      	str	r0, [r7, #8]
   16da8:	68bb      	ldr	r3, [r7, #8]
   16daa:	2b00      	cmp	r3, #0
   16dac:	d016      	beq.n	16ddc <hciEvtProcessCmdCmpl+0x28c>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   16dae:	68bb      	ldr	r3, [r7, #8]
   16db0:	2200      	movs	r2, #0
   16db2:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   16db4:	68bb      	ldr	r3, [r7, #8]
   16db6:	7dfa      	ldrb	r2, [r7, #23]
   16db8:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   16dba:	68bb      	ldr	r3, [r7, #8]
   16dbc:	2200      	movs	r2, #0
   16dbe:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, p, len);
   16dc0:	7dfb      	ldrb	r3, [r7, #23]
   16dc2:	4a0c      	ldr	r2, [pc, #48]	; (16df4 <hciEvtProcessCmdCmpl+0x2a4>)
   16dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dc8:	78fa      	ldrb	r2, [r7, #3]
   16dca:	6879      	ldr	r1, [r7, #4]
   16dcc:	68b8      	ldr	r0, [r7, #8]
   16dce:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   16dd0:	693b      	ldr	r3, [r7, #16]
   16dd2:	68b8      	ldr	r0, [r7, #8]
   16dd4:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   16dd6:	68b8      	ldr	r0, [r7, #8]
   16dd8:	f000 fdf4 	bl	179c4 <WsfBufFree>
    }
  }

  hciCmdRecvCmpl(numPkts);
   16ddc:	7bfb      	ldrb	r3, [r7, #15]
   16dde:	4618      	mov	r0, r3
   16de0:	f7fc ff54 	bl	13c8c <hciCmdRecvCmpl>
}
   16de4:	bf00      	nop
   16de6:	3718      	adds	r7, #24
   16de8:	46bd      	mov	sp, r7
   16dea:	bd80      	pop	{r7, pc}
   16dec:	10006538 	.word	0x10006538
   16df0:	00022b08 	.word	0x00022b08
   16df4:	00022a24 	.word	0x00022a24

00016df8 <hciEvtProcessMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciEvtProcessMsg(uint8_t *pEvt)
{
   16df8:	b580      	push	{r7, lr}
   16dfa:	b088      	sub	sp, #32
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	6078      	str	r0, [r7, #4]
  uint8_t   evt;
  uint8_t   subEvt;
  uint8_t   len;
  uint8_t   cbackEvt = 0;
   16e00:	2300      	movs	r3, #0
   16e02:	77fb      	strb	r3, [r7, #31]
  hciEvt_t  *pMsg;
  uint16_t  handle;
  hciEvtCback_t cback = hciCb.evtCback;
   16e04:	4ba1      	ldr	r3, [pc, #644]	; (1708c <hciEvtProcessMsg+0x294>)
   16e06:	689b      	ldr	r3, [r3, #8]
   16e08:	61bb      	str	r3, [r7, #24]

  /* parse HCI event header */
  BSTREAM_TO_UINT8(evt, pEvt);
   16e0a:	687b      	ldr	r3, [r7, #4]
   16e0c:	1c5a      	adds	r2, r3, #1
   16e0e:	607a      	str	r2, [r7, #4]
   16e10:	781b      	ldrb	r3, [r3, #0]
   16e12:	75fb      	strb	r3, [r7, #23]
  BSTREAM_TO_UINT8(len, pEvt);
   16e14:	687b      	ldr	r3, [r7, #4]
   16e16:	1c5a      	adds	r2, r3, #1
   16e18:	607a      	str	r2, [r7, #4]
   16e1a:	781b      	ldrb	r3, [r3, #0]
   16e1c:	75bb      	strb	r3, [r7, #22]

  /* convert hci event code to internal event code and perform special handling */
  switch (evt)
   16e1e:	7dfb      	ldrb	r3, [r7, #23]
   16e20:	2b10      	cmp	r3, #16
   16e22:	f000 8121 	beq.w	17068 <hciEvtProcessMsg+0x270>
   16e26:	2b10      	cmp	r3, #16
   16e28:	dc10      	bgt.n	16e4c <hciEvtProcessMsg+0x54>
   16e2a:	2b0c      	cmp	r3, #12
   16e2c:	f000 8103 	beq.w	17036 <hciEvtProcessMsg+0x23e>
   16e30:	2b0c      	cmp	r3, #12
   16e32:	dc06      	bgt.n	16e42 <hciEvtProcessMsg+0x4a>
   16e34:	2b05      	cmp	r3, #5
   16e36:	f000 80ec 	beq.w	17012 <hciEvtProcessMsg+0x21a>
   16e3a:	2b08      	cmp	r3, #8
   16e3c:	f000 80f2 	beq.w	17024 <hciEvtProcessMsg+0x22c>
      hciEvtStats.numVendorSpecEvt++;
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
      break;

    default:
      break;
   16e40:	e131      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16e42:	2b0e      	cmp	r3, #14
   16e44:	d020      	beq.n	16e88 <hciEvtProcessMsg+0x90>
   16e46:	2b0f      	cmp	r3, #15
   16e48:	d014      	beq.n	16e74 <hciEvtProcessMsg+0x7c>
      break;
   16e4a:	e12c      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16e4c:	2b30      	cmp	r3, #48	; 0x30
   16e4e:	f000 80fb 	beq.w	17048 <hciEvtProcessMsg+0x250>
   16e52:	2b30      	cmp	r3, #48	; 0x30
   16e54:	dc05      	bgt.n	16e62 <hciEvtProcessMsg+0x6a>
   16e56:	2b13      	cmp	r3, #19
   16e58:	d022      	beq.n	16ea0 <hciEvtProcessMsg+0xa8>
   16e5a:	2b1a      	cmp	r3, #26
   16e5c:	f000 80fd 	beq.w	1705a <hciEvtProcessMsg+0x262>
      break;
   16e60:	e121      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
  switch (evt)
   16e62:	2b57      	cmp	r3, #87	; 0x57
   16e64:	f000 8109 	beq.w	1707a <hciEvtProcessMsg+0x282>
   16e68:	2bff      	cmp	r3, #255	; 0xff
   16e6a:	f000 8113 	beq.w	17094 <hciEvtProcessMsg+0x29c>
   16e6e:	2b3e      	cmp	r3, #62	; 0x3e
   16e70:	d020      	beq.n	16eb4 <hciEvtProcessMsg+0xbc>
      break;
   16e72:	e118      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdStatusEvt++;
   16e74:	4b86      	ldr	r3, [pc, #536]	; (17090 <hciEvtProcessMsg+0x298>)
   16e76:	891b      	ldrh	r3, [r3, #8]
   16e78:	3301      	adds	r3, #1
   16e7a:	b29a      	uxth	r2, r3
   16e7c:	4b84      	ldr	r3, [pc, #528]	; (17090 <hciEvtProcessMsg+0x298>)
   16e7e:	811a      	strh	r2, [r3, #8]
      hciEvtProcessCmdStatus(pEvt);
   16e80:	6878      	ldr	r0, [r7, #4]
   16e82:	f7ff fe37 	bl	16af4 <hciEvtProcessCmdStatus>
      break;
   16e86:	e10e      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numCmdCmplEvt++;
   16e88:	4b81      	ldr	r3, [pc, #516]	; (17090 <hciEvtProcessMsg+0x298>)
   16e8a:	88db      	ldrh	r3, [r3, #6]
   16e8c:	3301      	adds	r3, #1
   16e8e:	b29a      	uxth	r2, r3
   16e90:	4b7f      	ldr	r3, [pc, #508]	; (17090 <hciEvtProcessMsg+0x298>)
   16e92:	80da      	strh	r2, [r3, #6]
      hciEvtProcessCmdCmpl(pEvt, len);
   16e94:	7dbb      	ldrb	r3, [r7, #22]
   16e96:	4619      	mov	r1, r3
   16e98:	6878      	ldr	r0, [r7, #4]
   16e9a:	f7ff fe59 	bl	16b50 <hciEvtProcessCmdCmpl>
      break;
   16e9e:	e102      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciCoreNumCmplPkts(pEvt);
   16ea0:	6878      	ldr	r0, [r7, #4]
   16ea2:	f7fe fa35 	bl	15310 <hciCoreNumCmplPkts>
      hciEvtStats.numCmplPktsEvt++;
   16ea6:	4b7a      	ldr	r3, [pc, #488]	; (17090 <hciEvtProcessMsg+0x298>)
   16ea8:	899b      	ldrh	r3, [r3, #12]
   16eaa:	3301      	adds	r3, #1
   16eac:	b29a      	uxth	r2, r3
   16eae:	4b78      	ldr	r3, [pc, #480]	; (17090 <hciEvtProcessMsg+0x298>)
   16eb0:	819a      	strh	r2, [r3, #12]
      break;
   16eb2:	e0f8      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      BSTREAM_TO_UINT8(subEvt, pEvt);
   16eb4:	687b      	ldr	r3, [r7, #4]
   16eb6:	1c5a      	adds	r2, r3, #1
   16eb8:	607a      	str	r2, [r7, #4]
   16eba:	781b      	ldrb	r3, [r3, #0]
   16ebc:	757b      	strb	r3, [r7, #21]
      hciEvtStats.numLeMetaEvt++;
   16ebe:	4b74      	ldr	r3, [pc, #464]	; (17090 <hciEvtProcessMsg+0x298>)
   16ec0:	8a5b      	ldrh	r3, [r3, #18]
   16ec2:	3301      	adds	r3, #1
   16ec4:	b29a      	uxth	r2, r3
   16ec6:	4b72      	ldr	r3, [pc, #456]	; (17090 <hciEvtProcessMsg+0x298>)
   16ec8:	825a      	strh	r2, [r3, #18]
      switch (subEvt)
   16eca:	7d7b      	ldrb	r3, [r7, #21]
   16ecc:	3b01      	subs	r3, #1
   16ece:	2b12      	cmp	r3, #18
   16ed0:	f200 809d 	bhi.w	1700e <hciEvtProcessMsg+0x216>
   16ed4:	a201      	add	r2, pc, #4	; (adr r2, 16edc <hciEvtProcessMsg+0xe4>)
   16ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16eda:	bf00      	nop
   16edc:	00016f29 	.word	0x00016f29
   16ee0:	00016f57 	.word	0x00016f57
   16ee4:	00016f63 	.word	0x00016f63
   16ee8:	00016f69 	.word	0x00016f69
   16eec:	00016f6f 	.word	0x00016f6f
   16ef0:	00016faf 	.word	0x00016faf
   16ef4:	00016fb5 	.word	0x00016fb5
   16ef8:	00016fbb 	.word	0x00016fbb
   16efc:	00016fc7 	.word	0x00016fc7
   16f00:	00016f75 	.word	0x00016f75
   16f04:	00016fa3 	.word	0x00016fa3
   16f08:	00016fd3 	.word	0x00016fd3
   16f0c:	00016fd9 	.word	0x00016fd9
   16f10:	00016ff7 	.word	0x00016ff7
   16f14:	00016ffd 	.word	0x00016ffd
   16f18:	00017009 	.word	0x00017009
   16f1c:	00016fe5 	.word	0x00016fe5
   16f20:	00016feb 	.word	0x00016feb
   16f24:	00016ff1 	.word	0x00016ff1
          if (*pEvt == HCI_SUCCESS)
   16f28:	687b      	ldr	r3, [r7, #4]
   16f2a:	781b      	ldrb	r3, [r3, #0]
   16f2c:	2b00      	cmp	r3, #0
   16f2e:	d10f      	bne.n	16f50 <hciEvtProcessMsg+0x158>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   16f30:	687b      	ldr	r3, [r7, #4]
   16f32:	3301      	adds	r3, #1
   16f34:	781b      	ldrb	r3, [r3, #0]
   16f36:	b29a      	uxth	r2, r3
   16f38:	687b      	ldr	r3, [r7, #4]
   16f3a:	3302      	adds	r3, #2
   16f3c:	781b      	ldrb	r3, [r3, #0]
   16f3e:	b29b      	uxth	r3, r3
   16f40:	021b      	lsls	r3, r3, #8
   16f42:	b29b      	uxth	r3, r3
   16f44:	4413      	add	r3, r2
   16f46:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   16f48:	8a7b      	ldrh	r3, [r7, #18]
   16f4a:	4618      	mov	r0, r3
   16f4c:	f7fd fe7e 	bl	14c4c <hciCoreConnOpen>
          cbackEvt = HCI_LE_CONN_CMPL_CBACK_EVT;
   16f50:	2301      	movs	r3, #1
   16f52:	77fb      	strb	r3, [r7, #31]
          break;
   16f54:	e05c      	b.n	17010 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeAdvReport(pEvt, len);
   16f56:	7dbb      	ldrb	r3, [r7, #22]
   16f58:	4619      	mov	r1, r3
   16f5a:	6878      	ldr	r0, [r7, #4]
   16f5c:	f7ff fab4 	bl	164c8 <hciEvtProcessLeAdvReport>
          break;
   16f60:	e056      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_CONN_UPDATE_CMPL_CBACK_EVT;
   16f62:	2304      	movs	r3, #4
   16f64:	77fb      	strb	r3, [r7, #31]
          break;
   16f66:	e053      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_READ_REMOTE_FEAT_CMPL_CBACK_EVT;
   16f68:	230b      	movs	r3, #11
   16f6a:	77fb      	strb	r3, [r7, #31]
          break;
   16f6c:	e050      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_LTK_REQ_CBACK_EVT;
   16f6e:	2310      	movs	r3, #16
   16f70:	77fb      	strb	r3, [r7, #31]
          break;
   16f72:	e04d      	b.n	17010 <hciEvtProcessMsg+0x218>
          if (*pEvt == HCI_SUCCESS)
   16f74:	687b      	ldr	r3, [r7, #4]
   16f76:	781b      	ldrb	r3, [r3, #0]
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d10f      	bne.n	16f9c <hciEvtProcessMsg+0x1a4>
            BYTES_TO_UINT16(handle, (pEvt + 1));
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	3301      	adds	r3, #1
   16f80:	781b      	ldrb	r3, [r3, #0]
   16f82:	b29a      	uxth	r2, r3
   16f84:	687b      	ldr	r3, [r7, #4]
   16f86:	3302      	adds	r3, #2
   16f88:	781b      	ldrb	r3, [r3, #0]
   16f8a:	b29b      	uxth	r3, r3
   16f8c:	021b      	lsls	r3, r3, #8
   16f8e:	b29b      	uxth	r3, r3
   16f90:	4413      	add	r3, r2
   16f92:	827b      	strh	r3, [r7, #18]
            hciCoreConnOpen(handle);
   16f94:	8a7b      	ldrh	r3, [r7, #18]
   16f96:	4618      	mov	r0, r3
   16f98:	f7fd fe58 	bl	14c4c <hciCoreConnOpen>
          cbackEvt = HCI_LE_ENHANCED_CONN_CMPL_CBACK_EVT;
   16f9c:	2302      	movs	r3, #2
   16f9e:	77fb      	strb	r3, [r7, #31]
          break;
   16fa0:	e036      	b.n	17010 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeDirectAdvReport(pEvt, len);
   16fa2:	7dbb      	ldrb	r3, [r7, #22]
   16fa4:	4619      	mov	r1, r3
   16fa6:	6878      	ldr	r0, [r7, #4]
   16fa8:	f7ff fd32 	bl	16a10 <hciEvtProcessLeDirectAdvReport>
          break;
   16fac:	e030      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_REM_CONN_PARAM_REQ_CBACK_EVT;
   16fae:	2323      	movs	r3, #35	; 0x23
   16fb0:	77fb      	strb	r3, [r7, #31]
          break;
   16fb2:	e02d      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_DATA_LEN_CHANGE_CBACK_EVT;
   16fb4:	2324      	movs	r3, #36	; 0x24
   16fb6:	77fb      	strb	r3, [r7, #31]
          break;
   16fb8:	e02a      	b.n	17010 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   16fba:	4b34      	ldr	r3, [pc, #208]	; (1708c <hciEvtProcessMsg+0x294>)
   16fbc:	68db      	ldr	r3, [r3, #12]
   16fbe:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT;
   16fc0:	2325      	movs	r3, #37	; 0x25
   16fc2:	77fb      	strb	r3, [r7, #31]
          break;
   16fc4:	e024      	b.n	17010 <hciEvtProcessMsg+0x218>
          cback = hciCb.secCback;
   16fc6:	4b31      	ldr	r3, [pc, #196]	; (1708c <hciEvtProcessMsg+0x294>)
   16fc8:	68db      	ldr	r3, [r3, #12]
   16fca:	61bb      	str	r3, [r7, #24]
          cbackEvt = HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT;
   16fcc:	2326      	movs	r3, #38	; 0x26
   16fce:	77fb      	strb	r3, [r7, #31]
          break;
   16fd0:	e01e      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PHY_UPDATE_CMPL_CBACK_EVT;
   16fd2:	232b      	movs	r3, #43	; 0x2b
   16fd4:	77fb      	strb	r3, [r7, #31]
          break;
   16fd6:	e01b      	b.n	17010 <hciEvtProcessMsg+0x218>
          hciEvtProcessLeExtAdvReport(pEvt, len);
   16fd8:	7dbb      	ldrb	r3, [r7, #22]
   16fda:	4619      	mov	r1, r3
   16fdc:	6878      	ldr	r0, [r7, #4]
   16fde:	f7ff faeb 	bl	165b8 <hciEvtProcessLeExtAdvReport>
          break;
   16fe2:	e015      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_TIMEOUT_CBACK_EVT;
   16fe4:	232d      	movs	r3, #45	; 0x2d
   16fe6:	77fb      	strb	r3, [r7, #31]
          break;
   16fe8:	e012      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_ADV_SET_TERM_CBACK_EVT;
   16fea:	232e      	movs	r3, #46	; 0x2e
   16fec:	77fb      	strb	r3, [r7, #31]
          break;
   16fee:	e00f      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_SCAN_REQ_RCVD_CBACK_EVT;
   16ff0:	232f      	movs	r3, #47	; 0x2f
   16ff2:	77fb      	strb	r3, [r7, #31]
          break;
   16ff4:	e00c      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_EST_CBACK_EVT;
   16ff6:	2330      	movs	r3, #48	; 0x30
   16ff8:	77fb      	strb	r3, [r7, #31]
          break;
   16ffa:	e009      	b.n	17010 <hciEvtProcessMsg+0x218>
          hciEvtProcessLePerAdvReport(pEvt, len);
   16ffc:	7dbb      	ldrb	r3, [r7, #22]
   16ffe:	4619      	mov	r1, r3
   17000:	6878      	ldr	r0, [r7, #4]
   17002:	f7ff fc6b 	bl	168dc <hciEvtProcessLePerAdvReport>
          break;
   17006:	e003      	b.n	17010 <hciEvtProcessMsg+0x218>
          cbackEvt = HCI_LE_PER_ADV_SYNC_LOST_CBACK_EVT;
   17008:	2332      	movs	r3, #50	; 0x32
   1700a:	77fb      	strb	r3, [r7, #31]
          break;
   1700c:	e000      	b.n	17010 <hciEvtProcessMsg+0x218>
          break;
   1700e:	bf00      	nop
      break;
   17010:	e049      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDiscCmplEvt++;
   17012:	4b1f      	ldr	r3, [pc, #124]	; (17090 <hciEvtProcessMsg+0x298>)
   17014:	881b      	ldrh	r3, [r3, #0]
   17016:	3301      	adds	r3, #1
   17018:	b29a      	uxth	r2, r3
   1701a:	4b1d      	ldr	r3, [pc, #116]	; (17090 <hciEvtProcessMsg+0x298>)
   1701c:	801a      	strh	r2, [r3, #0]
      cbackEvt = HCI_DISCONNECT_CMPL_CBACK_EVT;
   1701e:	2303      	movs	r3, #3
   17020:	77fb      	strb	r3, [r7, #31]
      break;
   17022:	e040      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncChangeEvt++;
   17024:	4b1a      	ldr	r3, [pc, #104]	; (17090 <hciEvtProcessMsg+0x298>)
   17026:	885b      	ldrh	r3, [r3, #2]
   17028:	3301      	adds	r3, #1
   1702a:	b29a      	uxth	r2, r3
   1702c:	4b18      	ldr	r3, [pc, #96]	; (17090 <hciEvtProcessMsg+0x298>)
   1702e:	805a      	strh	r2, [r3, #2]
      cbackEvt = HCI_ENC_CHANGE_CBACK_EVT;
   17030:	230f      	movs	r3, #15
   17032:	77fb      	strb	r3, [r7, #31]
      break;
   17034:	e037      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numReadRemoteVerInfoCmpEvt++;
   17036:	4b16      	ldr	r3, [pc, #88]	; (17090 <hciEvtProcessMsg+0x298>)
   17038:	889b      	ldrh	r3, [r3, #4]
   1703a:	3301      	adds	r3, #1
   1703c:	b29a      	uxth	r2, r3
   1703e:	4b14      	ldr	r3, [pc, #80]	; (17090 <hciEvtProcessMsg+0x298>)
   17040:	809a      	strh	r2, [r3, #4]
      cbackEvt = HCI_READ_REMOTE_VER_INFO_CMPL_CBACK_EVT;
   17042:	230a      	movs	r3, #10
   17044:	77fb      	strb	r3, [r7, #31]
      break;
   17046:	e02e      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numEncKeyRefreshCmplEvt++;
   17048:	4b11      	ldr	r3, [pc, #68]	; (17090 <hciEvtProcessMsg+0x298>)
   1704a:	8a1b      	ldrh	r3, [r3, #16]
   1704c:	3301      	adds	r3, #1
   1704e:	b29a      	uxth	r2, r3
   17050:	4b0f      	ldr	r3, [pc, #60]	; (17090 <hciEvtProcessMsg+0x298>)
   17052:	821a      	strh	r2, [r3, #16]
      cbackEvt = HCI_ENC_KEY_REFRESH_CMPL_CBACK_EVT;
   17054:	230e      	movs	r3, #14
   17056:	77fb      	strb	r3, [r7, #31]
      break;
   17058:	e025      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numDataBufOverflowEvt++;
   1705a:	4b0d      	ldr	r3, [pc, #52]	; (17090 <hciEvtProcessMsg+0x298>)
   1705c:	89db      	ldrh	r3, [r3, #14]
   1705e:	3301      	adds	r3, #1
   17060:	b29a      	uxth	r2, r3
   17062:	4b0b      	ldr	r3, [pc, #44]	; (17090 <hciEvtProcessMsg+0x298>)
   17064:	81da      	strh	r2, [r3, #14]
      break;
   17066:	e01e      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numHwErrorEvt++;
   17068:	4b09      	ldr	r3, [pc, #36]	; (17090 <hciEvtProcessMsg+0x298>)
   1706a:	895b      	ldrh	r3, [r3, #10]
   1706c:	3301      	adds	r3, #1
   1706e:	b29a      	uxth	r2, r3
   17070:	4b07      	ldr	r3, [pc, #28]	; (17090 <hciEvtProcessMsg+0x298>)
   17072:	815a      	strh	r2, [r3, #10]
      cbackEvt = HCI_HW_ERROR_CBACK_EVT;
   17074:	2314      	movs	r3, #20
   17076:	77fb      	strb	r3, [r7, #31]
      break;
   17078:	e015      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
      hciEvtStats.numAuthToEvt++;
   1707a:	4b05      	ldr	r3, [pc, #20]	; (17090 <hciEvtProcessMsg+0x298>)
   1707c:	8adb      	ldrh	r3, [r3, #22]
   1707e:	3301      	adds	r3, #1
   17080:	b29a      	uxth	r2, r3
   17082:	4b03      	ldr	r3, [pc, #12]	; (17090 <hciEvtProcessMsg+0x298>)
   17084:	82da      	strh	r2, [r3, #22]
      cbackEvt = HCI_AUTH_PAYLOAD_TO_EXPIRED_CBACK_EVT;
   17086:	2328      	movs	r3, #40	; 0x28
   17088:	77fb      	strb	r3, [r7, #31]
      break;
   1708a:	e00c      	b.n	170a6 <hciEvtProcessMsg+0x2ae>
   1708c:	10006538 	.word	0x10006538
   17090:	10004338 	.word	0x10004338
      hciEvtStats.numVendorSpecEvt++;
   17094:	4b22      	ldr	r3, [pc, #136]	; (17120 <hciEvtProcessMsg+0x328>)
   17096:	8a9b      	ldrh	r3, [r3, #20]
   17098:	3301      	adds	r3, #1
   1709a:	b29a      	uxth	r2, r3
   1709c:	4b20      	ldr	r3, [pc, #128]	; (17120 <hciEvtProcessMsg+0x328>)
   1709e:	829a      	strh	r2, [r3, #20]
      cbackEvt = HCI_VENDOR_SPEC_CBACK_EVT;
   170a0:	2313      	movs	r3, #19
   170a2:	77fb      	strb	r3, [r7, #31]
      break;
   170a4:	bf00      	nop
  }

  /* if callback is executed for this event */
  if (cbackEvt != 0)
   170a6:	7ffb      	ldrb	r3, [r7, #31]
   170a8:	2b00      	cmp	r3, #0
   170aa:	d034      	beq.n	17116 <hciEvtProcessMsg+0x31e>
  {
    /* allocate temp buffer */
    if ((pMsg = WsfBufAlloc(hciEvtCbackLen[cbackEvt])) != NULL)
   170ac:	7ffb      	ldrb	r3, [r7, #31]
   170ae:	4a1d      	ldr	r2, [pc, #116]	; (17124 <hciEvtProcessMsg+0x32c>)
   170b0:	5cd3      	ldrb	r3, [r2, r3]
   170b2:	b29b      	uxth	r3, r3
   170b4:	4618      	mov	r0, r3
   170b6:	f000 fc4b 	bl	17950 <WsfBufAlloc>
   170ba:	60f8      	str	r0, [r7, #12]
   170bc:	68fb      	ldr	r3, [r7, #12]
   170be:	2b00      	cmp	r3, #0
   170c0:	d016      	beq.n	170f0 <hciEvtProcessMsg+0x2f8>
    {
      /* initialize message header */
      pMsg->hdr.param = 0;
   170c2:	68fb      	ldr	r3, [r7, #12]
   170c4:	2200      	movs	r2, #0
   170c6:	801a      	strh	r2, [r3, #0]
      pMsg->hdr.event = cbackEvt;
   170c8:	68fb      	ldr	r3, [r7, #12]
   170ca:	7ffa      	ldrb	r2, [r7, #31]
   170cc:	709a      	strb	r2, [r3, #2]
      pMsg->hdr.status = 0;
   170ce:	68fb      	ldr	r3, [r7, #12]
   170d0:	2200      	movs	r2, #0
   170d2:	70da      	strb	r2, [r3, #3]

      /* execute parsing function for the event */
      (*hciEvtParseFcnTbl[cbackEvt])(pMsg, pEvt, len);
   170d4:	7ffb      	ldrb	r3, [r7, #31]
   170d6:	4a14      	ldr	r2, [pc, #80]	; (17128 <hciEvtProcessMsg+0x330>)
   170d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170dc:	7dba      	ldrb	r2, [r7, #22]
   170de:	6879      	ldr	r1, [r7, #4]
   170e0:	68f8      	ldr	r0, [r7, #12]
   170e2:	4798      	blx	r3

      /* execute callback */
      (*cback)(pMsg);
   170e4:	69bb      	ldr	r3, [r7, #24]
   170e6:	68f8      	ldr	r0, [r7, #12]
   170e8:	4798      	blx	r3

      /* free buffer */
      WsfBufFree(pMsg);
   170ea:	68f8      	ldr	r0, [r7, #12]
   170ec:	f000 fc6a 	bl	179c4 <WsfBufFree>
    }

    /* execute core procedure for connection close after callback */
    if (cbackEvt == HCI_DISCONNECT_CMPL_CBACK_EVT)
   170f0:	7ffb      	ldrb	r3, [r7, #31]
   170f2:	2b03      	cmp	r3, #3
   170f4:	d10f      	bne.n	17116 <hciEvtProcessMsg+0x31e>
    {
      BYTES_TO_UINT16(handle, (pEvt + 1));
   170f6:	687b      	ldr	r3, [r7, #4]
   170f8:	3301      	adds	r3, #1
   170fa:	781b      	ldrb	r3, [r3, #0]
   170fc:	b29a      	uxth	r2, r3
   170fe:	687b      	ldr	r3, [r7, #4]
   17100:	3302      	adds	r3, #2
   17102:	781b      	ldrb	r3, [r3, #0]
   17104:	b29b      	uxth	r3, r3
   17106:	021b      	lsls	r3, r3, #8
   17108:	b29b      	uxth	r3, r3
   1710a:	4413      	add	r3, r2
   1710c:	827b      	strh	r3, [r7, #18]
      hciCoreConnClose(handle);
   1710e:	8a7b      	ldrh	r3, [r7, #18]
   17110:	4618      	mov	r0, r3
   17112:	f7fd fda8 	bl	14c66 <hciCoreConnClose>
    }
  }
}
   17116:	bf00      	nop
   17118:	3720      	adds	r7, #32
   1711a:	46bd      	mov	sp, r7
   1711c:	bd80      	pop	{r7, pc}
   1711e:	bf00      	nop
   17120:	10004338 	.word	0x10004338
   17124:	00022b08 	.word	0x00022b08
   17128:	00022a24 	.word	0x00022a24

0001712c <hciTrSendAclData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendAclData(void *pContext, uint8_t *pData)
{
   1712c:	b580      	push	{r7, lr}
   1712e:	b084      	sub	sp, #16
   17130:	af00      	add	r7, sp, #0
   17132:	6078      	str	r0, [r7, #4]
   17134:	6039      	str	r1, [r7, #0]
  uint16_t   len;

  /* get 16-bit length */
  BYTES_TO_UINT16(len, &pData[2]);
   17136:	683b      	ldr	r3, [r7, #0]
   17138:	3302      	adds	r3, #2
   1713a:	781b      	ldrb	r3, [r3, #0]
   1713c:	b29a      	uxth	r2, r3
   1713e:	683b      	ldr	r3, [r7, #0]
   17140:	3303      	adds	r3, #3
   17142:	781b      	ldrb	r3, [r3, #0]
   17144:	b29b      	uxth	r3, r3
   17146:	021b      	lsls	r3, r3, #8
   17148:	b29b      	uxth	r3, r3
   1714a:	4413      	add	r3, r2
   1714c:	81fb      	strh	r3, [r7, #14]
  len += HCI_ACL_HDR_LEN;
   1714e:	89fb      	ldrh	r3, [r7, #14]
   17150:	3304      	adds	r3, #4
   17152:	81fb      	strh	r3, [r7, #14]

  /* dump event for protocol analysis */
  HCI_PDUMP_TX_ACL(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_ACL_TYPE, len, pData) == len)
   17154:	89fb      	ldrh	r3, [r7, #14]
   17156:	683a      	ldr	r2, [r7, #0]
   17158:	4619      	mov	r1, r3
   1715a:	2002      	movs	r0, #2
   1715c:	f001 f85e 	bl	1821c <hciDrvWrite>
   17160:	4603      	mov	r3, r0
   17162:	461a      	mov	r2, r3
   17164:	89fb      	ldrh	r3, [r7, #14]
   17166:	4293      	cmp	r3, r2
   17168:	d103      	bne.n	17172 <hciTrSendAclData+0x46>
  {
    /* free buffer */
    hciCoreTxAclComplete(pContext, pData);
   1716a:	6839      	ldr	r1, [r7, #0]
   1716c:	6878      	ldr	r0, [r7, #4]
   1716e:	f7fd feb5 	bl	14edc <hciCoreTxAclComplete>
  }
}
   17172:	bf00      	nop
   17174:	3710      	adds	r7, #16
   17176:	46bd      	mov	sp, r7
   17178:	bd80      	pop	{r7, pc}

0001717a <hciTrSendCmd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciTrSendCmd(uint8_t *pData)
{
   1717a:	b580      	push	{r7, lr}
   1717c:	b084      	sub	sp, #16
   1717e:	af00      	add	r7, sp, #0
   17180:	6078      	str	r0, [r7, #4]
  uint8_t   len;

  /* get length */
  len = pData[2] + HCI_CMD_HDR_LEN;
   17182:	687b      	ldr	r3, [r7, #4]
   17184:	3302      	adds	r3, #2
   17186:	781b      	ldrb	r3, [r3, #0]
   17188:	3303      	adds	r3, #3
   1718a:	73fb      	strb	r3, [r7, #15]

  /* dump event for protocol analysis */
  HCI_PDUMP_CMD(len, pData);

  /* transmit ACL header and data */
  if (hciDrvWrite(HCI_CMD_TYPE, len, pData) == len)
   1718c:	7bfb      	ldrb	r3, [r7, #15]
   1718e:	b29b      	uxth	r3, r3
   17190:	687a      	ldr	r2, [r7, #4]
   17192:	4619      	mov	r1, r3
   17194:	2001      	movs	r0, #1
   17196:	f001 f841 	bl	1821c <hciDrvWrite>
   1719a:	4603      	mov	r3, r0
   1719c:	461a      	mov	r2, r3
   1719e:	7bfb      	ldrb	r3, [r7, #15]
   171a0:	b29b      	uxth	r3, r3
   171a2:	429a      	cmp	r2, r3
   171a4:	d102      	bne.n	171ac <hciTrSendCmd+0x32>
  {
    /* free buffer */
    WsfMsgFree(pData);
   171a6:	6878      	ldr	r0, [r7, #4]
   171a8:	f000 fc72 	bl	17a90 <WsfMsgFree>
  }
}
   171ac:	bf00      	nop
   171ae:	3710      	adds	r7, #16
   171b0:	46bd      	mov	sp, r7
   171b2:	bd80      	pop	{r7, pc}

000171b4 <hciTrSerialRxIncoming>:
 *
 *  \return The number of bytes consumed.
 */
/*************************************************************************************************/
uint16_t hciTrSerialRxIncoming(uint8_t *pBuf, uint16_t len)
{
   171b4:	b580      	push	{r7, lr}
   171b6:	b084      	sub	sp, #16
   171b8:	af00      	add	r7, sp, #0
   171ba:	6078      	str	r0, [r7, #4]
   171bc:	460b      	mov	r3, r1
   171be:	807b      	strh	r3, [r7, #2]
  static uint8_t    *pDataRx;

  uint8_t   dataByte;
  uint16_t  consumed_bytes;

  consumed_bytes = 0;
   171c0:	2300      	movs	r3, #0
   171c2:	81fb      	strh	r3, [r7, #14]
  /* loop until all bytes of incoming buffer are handled */
  while (len)
   171c4:	e0e9      	b.n	1739a <hciTrSerialRxIncoming+0x1e6>
  {
    /* read single byte from incoming buffer and advance to next byte */
    dataByte = *pBuf;
   171c6:	687b      	ldr	r3, [r7, #4]
   171c8:	781b      	ldrb	r3, [r3, #0]
   171ca:	723b      	strb	r3, [r7, #8]
 
    /* --- Idle State --- */
    if (stateRx == HCI_RX_STATE_IDLE)
   171cc:	4b77      	ldr	r3, [pc, #476]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   171ce:	781b      	ldrb	r3, [r3, #0]
   171d0:	2b00      	cmp	r3, #0
   171d2:	d115      	bne.n	17200 <hciTrSerialRxIncoming+0x4c>
    {
      /* save the packet type */
      pktIndRx = dataByte;
   171d4:	4a76      	ldr	r2, [pc, #472]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   171d6:	7a3b      	ldrb	r3, [r7, #8]
   171d8:	7013      	strb	r3, [r2, #0]
      iRx      = 0;
   171da:	4b76      	ldr	r3, [pc, #472]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   171dc:	2200      	movs	r2, #0
   171de:	801a      	strh	r2, [r3, #0]
      stateRx  = HCI_RX_STATE_HEADER;
   171e0:	4b72      	ldr	r3, [pc, #456]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   171e2:	2201      	movs	r2, #1
   171e4:	701a      	strb	r2, [r3, #0]
      g_bHCIReceivingPacket = TRUE;
   171e6:	4b74      	ldr	r3, [pc, #464]	; (173b8 <hciTrSerialRxIncoming+0x204>)
   171e8:	2201      	movs	r2, #1
   171ea:	701a      	strb	r2, [r3, #0]
      pBuf++;
   171ec:	687b      	ldr	r3, [r7, #4]
   171ee:	3301      	adds	r3, #1
   171f0:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   171f2:	89fb      	ldrh	r3, [r7, #14]
   171f4:	3301      	adds	r3, #1
   171f6:	81fb      	strh	r3, [r7, #14]
      len--;
   171f8:	887b      	ldrh	r3, [r7, #2]
   171fa:	3b01      	subs	r3, #1
   171fc:	807b      	strh	r3, [r7, #2]
   171fe:	e0b6      	b.n	1736e <hciTrSerialRxIncoming+0x1ba>
    }

    /* --- Header State --- */
    else if (stateRx == HCI_RX_STATE_HEADER)
   17200:	4b6a      	ldr	r3, [pc, #424]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   17202:	781b      	ldrb	r3, [r3, #0]
   17204:	2b01      	cmp	r3, #1
   17206:	f040 8091 	bne.w	1732c <hciTrSerialRxIncoming+0x178>
    {
      uint8_t  hdrLen = 0;
   1720a:	2300      	movs	r3, #0
   1720c:	737b      	strb	r3, [r7, #13]
      uint16_t dataLen = 0;
   1720e:	2300      	movs	r3, #0
   17210:	817b      	strh	r3, [r7, #10]

      /* determine header length based on packet type */
      if (pktIndRx == HCI_EVT_TYPE)
   17212:	4b67      	ldr	r3, [pc, #412]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   17214:	781b      	ldrb	r3, [r3, #0]
   17216:	2b04      	cmp	r3, #4
   17218:	d102      	bne.n	17220 <hciTrSerialRxIncoming+0x6c>
      {
        hdrLen = HCI_EVT_HDR_LEN;
   1721a:	2302      	movs	r3, #2
   1721c:	737b      	strb	r3, [r7, #13]
   1721e:	e008      	b.n	17232 <hciTrSerialRxIncoming+0x7e>
      }
      else if (pktIndRx == HCI_ACL_TYPE)
   17220:	4b63      	ldr	r3, [pc, #396]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   17222:	781b      	ldrb	r3, [r3, #0]
   17224:	2b02      	cmp	r3, #2
   17226:	d102      	bne.n	1722e <hciTrSerialRxIncoming+0x7a>
      {
        hdrLen = HCI_ACL_HDR_LEN;
   17228:	2304      	movs	r3, #4
   1722a:	737b      	strb	r3, [r7, #13]
   1722c:	e001      	b.n	17232 <hciTrSerialRxIncoming+0x7e>
      }
      else
      {
        /* invalid packet type */
        WSF_ASSERT(0);
        return consumed_bytes;
   1722e:	89fb      	ldrh	r3, [r7, #14]
   17230:	e0b8      	b.n	173a4 <hciTrSerialRxIncoming+0x1f0>
      }

      if (iRx != hdrLen) {
   17232:	7b7b      	ldrb	r3, [r7, #13]
   17234:	b29a      	uxth	r2, r3
   17236:	4b5f      	ldr	r3, [pc, #380]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17238:	881b      	ldrh	r3, [r3, #0]
   1723a:	429a      	cmp	r2, r3
   1723c:	d012      	beq.n	17264 <hciTrSerialRxIncoming+0xb0>
        /* copy current byte into the temp header buffer */
        hdrRx[iRx++] = dataByte;
   1723e:	4b5d      	ldr	r3, [pc, #372]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17240:	881b      	ldrh	r3, [r3, #0]
   17242:	1c5a      	adds	r2, r3, #1
   17244:	b291      	uxth	r1, r2
   17246:	4a5b      	ldr	r2, [pc, #364]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17248:	8011      	strh	r1, [r2, #0]
   1724a:	4619      	mov	r1, r3
   1724c:	4a5b      	ldr	r2, [pc, #364]	; (173bc <hciTrSerialRxIncoming+0x208>)
   1724e:	7a3b      	ldrb	r3, [r7, #8]
   17250:	5453      	strb	r3, [r2, r1]
        pBuf++;
   17252:	687b      	ldr	r3, [r7, #4]
   17254:	3301      	adds	r3, #1
   17256:	607b      	str	r3, [r7, #4]
        consumed_bytes++;
   17258:	89fb      	ldrh	r3, [r7, #14]
   1725a:	3301      	adds	r3, #1
   1725c:	81fb      	strh	r3, [r7, #14]
        len--;
   1725e:	887b      	ldrh	r3, [r7, #2]
   17260:	3b01      	subs	r3, #1
   17262:	807b      	strh	r3, [r7, #2]
      }

      /* see if entire header has been read */
      if (iRx == hdrLen)
   17264:	7b7b      	ldrb	r3, [r7, #13]
   17266:	b29a      	uxth	r2, r3
   17268:	4b52      	ldr	r3, [pc, #328]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   1726a:	881b      	ldrh	r3, [r3, #0]
   1726c:	429a      	cmp	r2, r3
   1726e:	d17e      	bne.n	1736e <hciTrSerialRxIncoming+0x1ba>
      {
        /* extract data length from header */
        if (pktIndRx == HCI_EVT_TYPE)
   17270:	4b4f      	ldr	r3, [pc, #316]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   17272:	781b      	ldrb	r3, [r3, #0]
   17274:	2b04      	cmp	r3, #4
   17276:	d103      	bne.n	17280 <hciTrSerialRxIncoming+0xcc>
        {
          dataLen = hdrRx[1];
   17278:	4b50      	ldr	r3, [pc, #320]	; (173bc <hciTrSerialRxIncoming+0x208>)
   1727a:	785b      	ldrb	r3, [r3, #1]
   1727c:	817b      	strh	r3, [r7, #10]
   1727e:	e00d      	b.n	1729c <hciTrSerialRxIncoming+0xe8>
        }
        else if (pktIndRx == HCI_ACL_TYPE)
   17280:	4b4b      	ldr	r3, [pc, #300]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   17282:	781b      	ldrb	r3, [r3, #0]
   17284:	2b02      	cmp	r3, #2
   17286:	d109      	bne.n	1729c <hciTrSerialRxIncoming+0xe8>
        {
          BYTES_TO_UINT16(dataLen, &hdrRx[2]);
   17288:	4b4c      	ldr	r3, [pc, #304]	; (173bc <hciTrSerialRxIncoming+0x208>)
   1728a:	789b      	ldrb	r3, [r3, #2]
   1728c:	b29a      	uxth	r2, r3
   1728e:	4b4c      	ldr	r3, [pc, #304]	; (173c0 <hciTrSerialRxIncoming+0x20c>)
   17290:	781b      	ldrb	r3, [r3, #0]
   17292:	b29b      	uxth	r3, r3
   17294:	021b      	lsls	r3, r3, #8
   17296:	b29b      	uxth	r3, r3
   17298:	4413      	add	r3, r2
   1729a:	817b      	strh	r3, [r7, #10]
        }

        /* allocate data buffer to hold entire packet */
        if (pktIndRx == HCI_ACL_TYPE)
   1729c:	4b44      	ldr	r3, [pc, #272]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   1729e:	781b      	ldrb	r3, [r3, #0]
   172a0:	2b02      	cmp	r3, #2
   172a2:	d10c      	bne.n	172be <hciTrSerialRxIncoming+0x10a>
        {
          pPktRx = (uint8_t*)WsfMsgDataAlloc(hdrLen + dataLen, 0);
   172a4:	7b7b      	ldrb	r3, [r7, #13]
   172a6:	b29a      	uxth	r2, r3
   172a8:	897b      	ldrh	r3, [r7, #10]
   172aa:	4413      	add	r3, r2
   172ac:	b29b      	uxth	r3, r3
   172ae:	2100      	movs	r1, #0
   172b0:	4618      	mov	r0, r3
   172b2:	f000 fbc1 	bl	17a38 <WsfMsgDataAlloc>
   172b6:	4602      	mov	r2, r0
   172b8:	4b42      	ldr	r3, [pc, #264]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   172ba:	601a      	str	r2, [r3, #0]
   172bc:	e00a      	b.n	172d4 <hciTrSerialRxIncoming+0x120>
        }
        else
        {
          pPktRx = (uint8_t*)WsfMsgAlloc(hdrLen + dataLen);
   172be:	7b7b      	ldrb	r3, [r7, #13]
   172c0:	b29a      	uxth	r2, r3
   172c2:	897b      	ldrh	r3, [r7, #10]
   172c4:	4413      	add	r3, r2
   172c6:	b29b      	uxth	r3, r3
   172c8:	4618      	mov	r0, r3
   172ca:	f000 fbca 	bl	17a62 <WsfMsgAlloc>
   172ce:	4602      	mov	r2, r0
   172d0:	4b3c      	ldr	r3, [pc, #240]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   172d2:	601a      	str	r2, [r3, #0]
        }

        if (pPktRx != NULL)
   172d4:	4b3b      	ldr	r3, [pc, #236]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   172d6:	681b      	ldr	r3, [r3, #0]
   172d8:	2b00      	cmp	r3, #0
   172da:	d025      	beq.n	17328 <hciTrSerialRxIncoming+0x174>
        {
          pDataRx = pPktRx;
   172dc:	4b39      	ldr	r3, [pc, #228]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   172de:	681b      	ldr	r3, [r3, #0]
   172e0:	4a39      	ldr	r2, [pc, #228]	; (173c8 <hciTrSerialRxIncoming+0x214>)
   172e2:	6013      	str	r3, [r2, #0]

          /* copy header into data packet (note: memcpy is not so portable) */
          {
            uint8_t  i;
            for (i = 0; i < hdrLen; i++)
   172e4:	2300      	movs	r3, #0
   172e6:	727b      	strb	r3, [r7, #9]
   172e8:	e00b      	b.n	17302 <hciTrSerialRxIncoming+0x14e>
            {
              *pDataRx++ = hdrRx[i];
   172ea:	4b37      	ldr	r3, [pc, #220]	; (173c8 <hciTrSerialRxIncoming+0x214>)
   172ec:	681b      	ldr	r3, [r3, #0]
   172ee:	1c5a      	adds	r2, r3, #1
   172f0:	4935      	ldr	r1, [pc, #212]	; (173c8 <hciTrSerialRxIncoming+0x214>)
   172f2:	600a      	str	r2, [r1, #0]
   172f4:	7a7a      	ldrb	r2, [r7, #9]
   172f6:	4931      	ldr	r1, [pc, #196]	; (173bc <hciTrSerialRxIncoming+0x208>)
   172f8:	5c8a      	ldrb	r2, [r1, r2]
   172fa:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < hdrLen; i++)
   172fc:	7a7b      	ldrb	r3, [r7, #9]
   172fe:	3301      	adds	r3, #1
   17300:	727b      	strb	r3, [r7, #9]
   17302:	7a7a      	ldrb	r2, [r7, #9]
   17304:	7b7b      	ldrb	r3, [r7, #13]
   17306:	429a      	cmp	r2, r3
   17308:	d3ef      	bcc.n	172ea <hciTrSerialRxIncoming+0x136>
            }
          }

          /* save number of bytes left to read */
          iRx = dataLen;
   1730a:	4a2a      	ldr	r2, [pc, #168]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   1730c:	897b      	ldrh	r3, [r7, #10]
   1730e:	8013      	strh	r3, [r2, #0]
          if (iRx == 0)
   17310:	4b28      	ldr	r3, [pc, #160]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17312:	881b      	ldrh	r3, [r3, #0]
   17314:	2b00      	cmp	r3, #0
   17316:	d103      	bne.n	17320 <hciTrSerialRxIncoming+0x16c>
          {
            stateRx = HCI_RX_STATE_COMPLETE;
   17318:	4b24      	ldr	r3, [pc, #144]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   1731a:	2203      	movs	r2, #3
   1731c:	701a      	strb	r2, [r3, #0]
   1731e:	e026      	b.n	1736e <hciTrSerialRxIncoming+0x1ba>
          }
          else
          {
            stateRx = HCI_RX_STATE_DATA;
   17320:	4b22      	ldr	r3, [pc, #136]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   17322:	2202      	movs	r2, #2
   17324:	701a      	strb	r2, [r3, #0]
   17326:	e022      	b.n	1736e <hciTrSerialRxIncoming+0x1ba>
          }
        }
        else
        {
          WSF_ASSERT(0); /* allocate falied */
          return consumed_bytes;
   17328:	89fb      	ldrh	r3, [r7, #14]
   1732a:	e03b      	b.n	173a4 <hciTrSerialRxIncoming+0x1f0>

      }
    }

    /* --- Data State --- */
    else if (stateRx == HCI_RX_STATE_DATA)
   1732c:	4b1f      	ldr	r3, [pc, #124]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   1732e:	781b      	ldrb	r3, [r3, #0]
   17330:	2b02      	cmp	r3, #2
   17332:	d11c      	bne.n	1736e <hciTrSerialRxIncoming+0x1ba>
    {
      /* write incoming byte to allocated buffer */
      *pDataRx++ = dataByte;
   17334:	4b24      	ldr	r3, [pc, #144]	; (173c8 <hciTrSerialRxIncoming+0x214>)
   17336:	681b      	ldr	r3, [r3, #0]
   17338:	1c5a      	adds	r2, r3, #1
   1733a:	4923      	ldr	r1, [pc, #140]	; (173c8 <hciTrSerialRxIncoming+0x214>)
   1733c:	600a      	str	r2, [r1, #0]
   1733e:	7a3a      	ldrb	r2, [r7, #8]
   17340:	701a      	strb	r2, [r3, #0]

      /* determine if entire packet has been read */
      iRx--;
   17342:	4b1c      	ldr	r3, [pc, #112]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17344:	881b      	ldrh	r3, [r3, #0]
   17346:	3b01      	subs	r3, #1
   17348:	b29a      	uxth	r2, r3
   1734a:	4b1a      	ldr	r3, [pc, #104]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   1734c:	801a      	strh	r2, [r3, #0]
      if (iRx == 0)
   1734e:	4b19      	ldr	r3, [pc, #100]	; (173b4 <hciTrSerialRxIncoming+0x200>)
   17350:	881b      	ldrh	r3, [r3, #0]
   17352:	2b00      	cmp	r3, #0
   17354:	d102      	bne.n	1735c <hciTrSerialRxIncoming+0x1a8>
      {
        stateRx = HCI_RX_STATE_COMPLETE;
   17356:	4b15      	ldr	r3, [pc, #84]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   17358:	2203      	movs	r2, #3
   1735a:	701a      	strb	r2, [r3, #0]
      }
      pBuf++;
   1735c:	687b      	ldr	r3, [r7, #4]
   1735e:	3301      	adds	r3, #1
   17360:	607b      	str	r3, [r7, #4]
      consumed_bytes++;
   17362:	89fb      	ldrh	r3, [r7, #14]
   17364:	3301      	adds	r3, #1
   17366:	81fb      	strh	r3, [r7, #14]
      len--;
   17368:	887b      	ldrh	r3, [r7, #2]
   1736a:	3b01      	subs	r3, #1
   1736c:	807b      	strh	r3, [r7, #2]
    }

    /* --- Complete State --- */
    /* ( Note Well!  There is no else-if construct by design. ) */
    if (stateRx == HCI_RX_STATE_COMPLETE)
   1736e:	4b0f      	ldr	r3, [pc, #60]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   17370:	781b      	ldrb	r3, [r3, #0]
   17372:	2b03      	cmp	r3, #3
   17374:	d111      	bne.n	1739a <hciTrSerialRxIncoming+0x1e6>
    {
      g_bHCIReceivingPacket = FALSE;
   17376:	4b10      	ldr	r3, [pc, #64]	; (173b8 <hciTrSerialRxIncoming+0x204>)
   17378:	2200      	movs	r2, #0
   1737a:	701a      	strb	r2, [r3, #0]

      /* deliver data */
      if (pPktRx != NULL)
   1737c:	4b11      	ldr	r3, [pc, #68]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   1737e:	681b      	ldr	r3, [r3, #0]
   17380:	2b00      	cmp	r3, #0
   17382:	d007      	beq.n	17394 <hciTrSerialRxIncoming+0x1e0>
      {
        //am_hal_gpio_out_bit_set(13);
        hciCoreRecv(pktIndRx, pPktRx);
   17384:	4b0a      	ldr	r3, [pc, #40]	; (173b0 <hciTrSerialRxIncoming+0x1fc>)
   17386:	781a      	ldrb	r2, [r3, #0]
   17388:	4b0e      	ldr	r3, [pc, #56]	; (173c4 <hciTrSerialRxIncoming+0x210>)
   1738a:	681b      	ldr	r3, [r3, #0]
   1738c:	4619      	mov	r1, r3
   1738e:	4610      	mov	r0, r2
   17390:	f7fe f828 	bl	153e4 <hciCoreRecv>
        //am_hal_gpio_out_bit_clear(13);
      }

      /* reset state machine */
      stateRx = HCI_RX_STATE_IDLE;
   17394:	4b05      	ldr	r3, [pc, #20]	; (173ac <hciTrSerialRxIncoming+0x1f8>)
   17396:	2200      	movs	r2, #0
   17398:	701a      	strb	r2, [r3, #0]
  while (len)
   1739a:	887b      	ldrh	r3, [r7, #2]
   1739c:	2b00      	cmp	r3, #0
   1739e:	f47f af12 	bne.w	171c6 <hciTrSerialRxIncoming+0x12>
    }
  }
  return consumed_bytes;
   173a2:	89fb      	ldrh	r3, [r7, #14]
}
   173a4:	4618      	mov	r0, r3
   173a6:	3710      	adds	r7, #16
   173a8:	46bd      	mov	sp, r7
   173aa:	bd80      	pop	{r7, pc}
   173ac:	10004351 	.word	0x10004351
   173b0:	10004352 	.word	0x10004352
   173b4:	10004354 	.word	0x10004354
   173b8:	10004350 	.word	0x10004350
   173bc:	10004358 	.word	0x10004358
   173c0:	1000435b 	.word	0x1000435b
   173c4:	1000435c 	.word	0x1000435c
   173c8:	10004360 	.word	0x10004360

000173cc <hciCoreReadResolvingListSize>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadResolvingListSize(void)
{
   173cc:	b580      	push	{r7, lr}
   173ce:	af00      	add	r7, sp, #0
  /* if LL Privacy is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   173d0:	4b0b      	ldr	r3, [pc, #44]	; (17400 <hciCoreReadResolvingListSize+0x34>)
   173d2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   173d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
   173da:	2b00      	cmp	r3, #0
   173dc:	d008      	beq.n	173f0 <hciCoreReadResolvingListSize+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_PRIVACY))
   173de:	4b09      	ldr	r3, [pc, #36]	; (17404 <hciCoreReadResolvingListSize+0x38>)
   173e0:	881b      	ldrh	r3, [r3, #0]
   173e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_PRIVACY) &&
   173e6:	2b00      	cmp	r3, #0
   173e8:	d002      	beq.n	173f0 <hciCoreReadResolvingListSize+0x24>
  {
    /* send next command in sequence */
    HciLeReadResolvingListSize();
   173ea:	f7fd faa8 	bl	1493e <HciLeReadResolvingListSize>
   173ee:	e005      	b.n	173fc <hciCoreReadResolvingListSize+0x30>
  }
  else
  {
    hciCoreCb.resListSize = 0;
   173f0:	4b03      	ldr	r3, [pc, #12]	; (17400 <hciCoreReadResolvingListSize+0x34>)
   173f2:	2200      	movs	r2, #0
   173f4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109

    /* send next command in sequence */
    hciCoreReadMaxDataLen();
   173f8:	f000 f806 	bl	17408 <hciCoreReadMaxDataLen>
  }
}
   173fc:	bf00      	nop
   173fe:	bd80      	pop	{r7, pc}
   17400:	10006424 	.word	0x10006424
   17404:	10002398 	.word	0x10002398

00017408 <hciCoreReadMaxDataLen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hciCoreReadMaxDataLen(void)
{
   17408:	b580      	push	{r7, lr}
   1740a:	af00      	add	r7, sp, #0
  /* if LE Data Packet Length Extensions is supported by Controller and included */
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   1740c:	4b09      	ldr	r3, [pc, #36]	; (17434 <hciCoreReadMaxDataLen+0x2c>)
   1740e:	f8b3 3106 	ldrh.w	r3, [r3, #262]	; 0x106
   17412:	f003 0320 	and.w	r3, r3, #32
   17416:	2b00      	cmp	r3, #0
   17418:	d008      	beq.n	1742c <hciCoreReadMaxDataLen+0x24>
      (hciLeSupFeatCfg & HCI_LE_SUP_FEAT_DATA_LEN_EXT))
   1741a:	4b07      	ldr	r3, [pc, #28]	; (17438 <hciCoreReadMaxDataLen+0x30>)
   1741c:	881b      	ldrh	r3, [r3, #0]
   1741e:	f003 0320 	and.w	r3, r3, #32
  if ((hciCoreCb.leSupFeat & HCI_LE_SUP_FEAT_DATA_LEN_EXT) &&
   17422:	2b00      	cmp	r3, #0
   17424:	d002      	beq.n	1742c <hciCoreReadMaxDataLen+0x24>
  {
    /* send next command in sequence */
    HciLeReadMaxDataLen();
   17426:	f7fc fe98 	bl	1415a <HciLeReadMaxDataLen>
   1742a:	e001      	b.n	17430 <hciCoreReadMaxDataLen+0x28>
  }
  else
  {
    /* send next command in sequence */
    HciLeRandCmd();
   1742c:	f7fc ff1f 	bl	1426e <HciLeRandCmd>
  }
}
   17430:	bf00      	nop
   17432:	bd80      	pop	{r7, pc}
   17434:	10006424 	.word	0x10006424
   17438:	10002398 	.word	0x10002398

0001743c <hciCoreResetStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetStart(void)
{
   1743c:	b580      	push	{r7, lr}
   1743e:	af00      	add	r7, sp, #0
  /* send an HCI Reset command to start the sequence */
  HciResetCmd();
   17440:	f7fd f970 	bl	14724 <HciResetCmd>
}
   17444:	bf00      	nop
   17446:	bd80      	pop	{r7, pc}

00017448 <hciCoreResetSequence>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hciCoreResetSequence(uint8_t *pMsg)
{
   17448:	b580      	push	{r7, lr}
   1744a:	b086      	sub	sp, #24
   1744c:	af00      	add	r7, sp, #0
   1744e:	6078      	str	r0, [r7, #4]
  uint16_t       opcode;
  wsfMsgHdr_t    hdr;
  static uint8_t randCnt;

  /* if event is a command complete event */
  if (*pMsg == HCI_CMD_CMPL_EVT)
   17450:	687b      	ldr	r3, [r7, #4]
   17452:	781b      	ldrb	r3, [r3, #0]
   17454:	2b0e      	cmp	r3, #14
   17456:	f040 814b 	bne.w	176f0 <hciCoreResetSequence+0x2a8>
  {
    /* parse parameters */
    pMsg += HCI_EVT_HDR_LEN;
   1745a:	687b      	ldr	r3, [r7, #4]
   1745c:	3302      	adds	r3, #2
   1745e:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip num packets */
   17460:	687b      	ldr	r3, [r7, #4]
   17462:	3301      	adds	r3, #1
   17464:	607b      	str	r3, [r7, #4]
    BSTREAM_TO_UINT16(opcode, pMsg);
   17466:	687b      	ldr	r3, [r7, #4]
   17468:	781b      	ldrb	r3, [r3, #0]
   1746a:	b29a      	uxth	r2, r3
   1746c:	687b      	ldr	r3, [r7, #4]
   1746e:	3301      	adds	r3, #1
   17470:	781b      	ldrb	r3, [r3, #0]
   17472:	b29b      	uxth	r3, r3
   17474:	021b      	lsls	r3, r3, #8
   17476:	b29b      	uxth	r3, r3
   17478:	4413      	add	r3, r2
   1747a:	82fb      	strh	r3, [r7, #22]
   1747c:	687b      	ldr	r3, [r7, #4]
   1747e:	3302      	adds	r3, #2
   17480:	607b      	str	r3, [r7, #4]
    pMsg++;                   /* skip status */
   17482:	687b      	ldr	r3, [r7, #4]
   17484:	3301      	adds	r3, #1
   17486:	607b      	str	r3, [r7, #4]

    /* decode opcode */
    switch (opcode)
   17488:	8afb      	ldrh	r3, [r7, #22]
   1748a:	f242 020f 	movw	r2, #8207	; 0x200f
   1748e:	4293      	cmp	r3, r2
   17490:	f000 809e 	beq.w	175d0 <hciCoreResetSequence+0x188>
   17494:	f242 020f 	movw	r2, #8207	; 0x200f
   17498:	4293      	cmp	r3, r2
   1749a:	dc22      	bgt.n	174e2 <hciCoreResetSequence+0x9a>
   1749c:	f241 0209 	movw	r2, #4105	; 0x1009
   174a0:	4293      	cmp	r3, r2
   174a2:	d05c      	beq.n	1755e <hciCoreResetSequence+0x116>
   174a4:	f241 0209 	movw	r2, #4105	; 0x1009
   174a8:	4293      	cmp	r3, r2
   174aa:	dc0c      	bgt.n	174c6 <hciCoreResetSequence+0x7e>
   174ac:	f640 4203 	movw	r2, #3075	; 0xc03
   174b0:	4293      	cmp	r3, r2
   174b2:	d042      	beq.n	1753a <hciCoreResetSequence+0xf2>
   174b4:	f640 4263 	movw	r2, #3171	; 0xc63
   174b8:	4293      	cmp	r3, r2
   174ba:	d04d      	beq.n	17558 <hciCoreResetSequence+0x110>
   174bc:	f640 4201 	movw	r2, #3073	; 0xc01
   174c0:	4293      	cmp	r3, r2
   174c2:	d041      	beq.n	17548 <hciCoreResetSequence+0x100>
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
        }
        break;

      default:
        break;
   174c4:	e114      	b.n	176f0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   174c6:	f242 0202 	movw	r2, #8194	; 0x2002
   174ca:	4293      	cmp	r3, r2
   174cc:	d04e      	beq.n	1756c <hciCoreResetSequence+0x124>
   174ce:	f242 0203 	movw	r2, #8195	; 0x2003
   174d2:	4293      	cmp	r3, r2
   174d4:	f000 8086 	beq.w	175e4 <hciCoreResetSequence+0x19c>
   174d8:	f242 0201 	movw	r2, #8193	; 0x2001
   174dc:	4293      	cmp	r3, r2
   174de:	d037      	beq.n	17550 <hciCoreResetSequence+0x108>
        break;
   174e0:	e106      	b.n	176f0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   174e2:	f242 022a 	movw	r2, #8234	; 0x202a
   174e6:	4293      	cmp	r3, r2
   174e8:	f000 8090 	beq.w	1760c <hciCoreResetSequence+0x1c4>
   174ec:	f242 022a 	movw	r2, #8234	; 0x202a
   174f0:	4293      	cmp	r3, r2
   174f2:	dc0e      	bgt.n	17512 <hciCoreResetSequence+0xca>
   174f4:	f242 021c 	movw	r2, #8220	; 0x201c
   174f8:	4293      	cmp	r3, r2
   174fa:	d060      	beq.n	175be <hciCoreResetSequence+0x176>
   174fc:	f242 0224 	movw	r2, #8228	; 0x2024
   17500:	4293      	cmp	r3, r2
   17502:	f000 80b0 	beq.w	17666 <hciCoreResetSequence+0x21e>
   17506:	f242 0218 	movw	r2, #8216	; 0x2018
   1750a:	4293      	cmp	r3, r2
   1750c:	f000 80d4 	beq.w	176b8 <hciCoreResetSequence+0x270>
        break;
   17510:	e0ee      	b.n	176f0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   17512:	f242 023b 	movw	r2, #8251	; 0x203b
   17516:	4293      	cmp	r3, r2
   17518:	dc09      	bgt.n	1752e <hciCoreResetSequence+0xe6>
   1751a:	f242 023a 	movw	r2, #8250	; 0x203a
   1751e:	4293      	cmp	r3, r2
   17520:	f280 80bd 	bge.w	1769e <hciCoreResetSequence+0x256>
   17524:	f242 022f 	movw	r2, #8239	; 0x202f
   17528:	4293      	cmp	r3, r2
   1752a:	d079      	beq.n	17620 <hciCoreResetSequence+0x1d8>
        break;
   1752c:	e0e0      	b.n	176f0 <hciCoreResetSequence+0x2a8>
    switch (opcode)
   1752e:	f242 024a 	movw	r2, #8266	; 0x204a
   17532:	4293      	cmp	r3, r2
   17534:	f000 80b3 	beq.w	1769e <hciCoreResetSequence+0x256>
        break;
   17538:	e0da      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        randCnt = 0;
   1753a:	4b6f      	ldr	r3, [pc, #444]	; (176f8 <hciCoreResetSequence+0x2b0>)
   1753c:	2200      	movs	r2, #0
   1753e:	701a      	strb	r2, [r3, #0]
        HciSetEventMaskCmd((uint8_t *) hciEventMask);
   17540:	486e      	ldr	r0, [pc, #440]	; (176fc <hciCoreResetSequence+0x2b4>)
   17542:	f7fd f921 	bl	14788 <HciSetEventMaskCmd>
        break;
   17546:	e0d3      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        HciLeSetEventMaskCmd((uint8_t *) hciLeEventMask);
   17548:	486d      	ldr	r0, [pc, #436]	; (17700 <hciCoreResetSequence+0x2b8>)
   1754a:	f7fc fff0 	bl	1452e <HciLeSetEventMaskCmd>
        break;
   1754e:	e0cf      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        HciSetEventMaskPage2Cmd((uint8_t *) hciEventMaskPage2);
   17550:	486c      	ldr	r0, [pc, #432]	; (17704 <hciCoreResetSequence+0x2bc>)
   17552:	f7fd f935 	bl	147c0 <HciSetEventMaskPage2Cmd>
        break;
   17556:	e0cb      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        HciReadBdAddrCmd();
   17558:	f7fd f898 	bl	1468c <HciReadBdAddrCmd>
        break;
   1755c:	e0c8      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        BdaCpy(hciCoreCb.bdAddr, pMsg);
   1755e:	6879      	ldr	r1, [r7, #4]
   17560:	4869      	ldr	r0, [pc, #420]	; (17708 <hciCoreResetSequence+0x2c0>)
   17562:	f001 f941 	bl	187e8 <BdaCpy>
        HciLeReadBufSizeCmd();
   17566:	f7fc fe95 	bl	14294 <HciLeReadBufSizeCmd>
        break;
   1756a:	e0c1      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.bufSize, pMsg);
   1756c:	687b      	ldr	r3, [r7, #4]
   1756e:	781b      	ldrb	r3, [r3, #0]
   17570:	b29a      	uxth	r2, r3
   17572:	687b      	ldr	r3, [r7, #4]
   17574:	3301      	adds	r3, #1
   17576:	781b      	ldrb	r3, [r3, #0]
   17578:	b29b      	uxth	r3, r3
   1757a:	021b      	lsls	r3, r3, #8
   1757c:	b29b      	uxth	r3, r3
   1757e:	4413      	add	r3, r2
   17580:	b29a      	uxth	r2, r3
   17582:	4b62      	ldr	r3, [pc, #392]	; (1770c <hciCoreResetSequence+0x2c4>)
   17584:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
   17588:	687b      	ldr	r3, [r7, #4]
   1758a:	3302      	adds	r3, #2
   1758c:	607b      	str	r3, [r7, #4]
        BSTREAM_TO_UINT8(hciCoreCb.numBufs, pMsg);
   1758e:	687b      	ldr	r3, [r7, #4]
   17590:	1c5a      	adds	r2, r3, #1
   17592:	607a      	str	r2, [r7, #4]
   17594:	781a      	ldrb	r2, [r3, #0]
   17596:	4b5d      	ldr	r3, [pc, #372]	; (1770c <hciCoreResetSequence+0x2c4>)
   17598:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.numBufs--;
   1759c:	4b5b      	ldr	r3, [pc, #364]	; (1770c <hciCoreResetSequence+0x2c4>)
   1759e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
   175a2:	3b01      	subs	r3, #1
   175a4:	b2da      	uxtb	r2, r3
   175a6:	4b59      	ldr	r3, [pc, #356]	; (1770c <hciCoreResetSequence+0x2c4>)
   175a8:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
        hciCoreCb.availBufs = hciCoreCb.numBufs;
   175ac:	4b57      	ldr	r3, [pc, #348]	; (1770c <hciCoreResetSequence+0x2c4>)
   175ae:	f893 2103 	ldrb.w	r2, [r3, #259]	; 0x103
   175b2:	4b56      	ldr	r3, [pc, #344]	; (1770c <hciCoreResetSequence+0x2c4>)
   175b4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
        HciLeReadSupStatesCmd();
   175b8:	f7fc feb8 	bl	1432c <HciLeReadSupStatesCmd>
        break;
   175bc:	e098      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        memcpy(hciCoreCb.leStates, pMsg, HCI_LE_STATES_LEN);
   175be:	4b53      	ldr	r3, [pc, #332]	; (1770c <hciCoreResetSequence+0x2c4>)
   175c0:	687a      	ldr	r2, [r7, #4]
   175c2:	33e0      	adds	r3, #224	; 0xe0
   175c4:	6810      	ldr	r0, [r2, #0]
   175c6:	6851      	ldr	r1, [r2, #4]
   175c8:	c303      	stmia	r3!, {r0, r1}
        HciLeReadWhiteListSizeCmd();
   175ca:	f7fc fec2 	bl	14352 <HciLeReadWhiteListSizeCmd>
        break;
   175ce:	e08f      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.whiteListSize, pMsg);
   175d0:	687b      	ldr	r3, [r7, #4]
   175d2:	1c5a      	adds	r2, r3, #1
   175d4:	607a      	str	r2, [r7, #4]
   175d6:	781a      	ldrb	r2, [r3, #0]
   175d8:	4b4c      	ldr	r3, [pc, #304]	; (1770c <hciCoreResetSequence+0x2c4>)
   175da:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
        HciLeReadLocalSupFeatCmd();
   175de:	f7fc fe6c 	bl	142ba <HciLeReadLocalSupFeatCmd>
        break;
   175e2:	e085      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT16(hciCoreCb.leSupFeat, pMsg);
   175e4:	687b      	ldr	r3, [r7, #4]
   175e6:	781b      	ldrb	r3, [r3, #0]
   175e8:	b29a      	uxth	r2, r3
   175ea:	687b      	ldr	r3, [r7, #4]
   175ec:	3301      	adds	r3, #1
   175ee:	781b      	ldrb	r3, [r3, #0]
   175f0:	b29b      	uxth	r3, r3
   175f2:	021b      	lsls	r3, r3, #8
   175f4:	b29b      	uxth	r3, r3
   175f6:	4413      	add	r3, r2
   175f8:	b29a      	uxth	r2, r3
   175fa:	4b44      	ldr	r3, [pc, #272]	; (1770c <hciCoreResetSequence+0x2c4>)
   175fc:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
   17600:	687b      	ldr	r3, [r7, #4]
   17602:	3302      	adds	r3, #2
   17604:	607b      	str	r3, [r7, #4]
        hciCoreReadResolvingListSize();
   17606:	f7ff fee1 	bl	173cc <hciCoreReadResolvingListSize>
        break;
   1760a:	e071      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        BSTREAM_TO_UINT8(hciCoreCb.resListSize, pMsg);
   1760c:	687b      	ldr	r3, [r7, #4]
   1760e:	1c5a      	adds	r2, r3, #1
   17610:	607a      	str	r2, [r7, #4]
   17612:	781a      	ldrb	r2, [r3, #0]
   17614:	4b3d      	ldr	r3, [pc, #244]	; (1770c <hciCoreResetSequence+0x2c4>)
   17616:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        hciCoreReadMaxDataLen();
   1761a:	f7ff fef5 	bl	17408 <hciCoreReadMaxDataLen>
        break;
   1761e:	e067      	b.n	176f0 <hciCoreResetSequence+0x2a8>
          BSTREAM_TO_UINT16(maxTxOctets, pMsg);
   17620:	687b      	ldr	r3, [r7, #4]
   17622:	781b      	ldrb	r3, [r3, #0]
   17624:	b29a      	uxth	r2, r3
   17626:	687b      	ldr	r3, [r7, #4]
   17628:	3301      	adds	r3, #1
   1762a:	781b      	ldrb	r3, [r3, #0]
   1762c:	b29b      	uxth	r3, r3
   1762e:	021b      	lsls	r3, r3, #8
   17630:	b29b      	uxth	r3, r3
   17632:	4413      	add	r3, r2
   17634:	82bb      	strh	r3, [r7, #20]
   17636:	687b      	ldr	r3, [r7, #4]
   17638:	3302      	adds	r3, #2
   1763a:	607b      	str	r3, [r7, #4]
          BSTREAM_TO_UINT16(maxTxTime, pMsg);
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	781b      	ldrb	r3, [r3, #0]
   17640:	b29a      	uxth	r2, r3
   17642:	687b      	ldr	r3, [r7, #4]
   17644:	3301      	adds	r3, #1
   17646:	781b      	ldrb	r3, [r3, #0]
   17648:	b29b      	uxth	r3, r3
   1764a:	021b      	lsls	r3, r3, #8
   1764c:	b29b      	uxth	r3, r3
   1764e:	4413      	add	r3, r2
   17650:	827b      	strh	r3, [r7, #18]
   17652:	687b      	ldr	r3, [r7, #4]
   17654:	3302      	adds	r3, #2
   17656:	607b      	str	r3, [r7, #4]
          HciLeWriteDefDataLen(maxTxOctets, maxTxTime);
   17658:	8a7a      	ldrh	r2, [r7, #18]
   1765a:	8abb      	ldrh	r3, [r7, #20]
   1765c:	4611      	mov	r1, r2
   1765e:	4618      	mov	r0, r3
   17660:	f7fc fd0d 	bl	1407e <HciLeWriteDefDataLen>
        break;
   17664:	e044      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   17666:	4b29      	ldr	r3, [pc, #164]	; (1770c <hciCoreResetSequence+0x2c4>)
   17668:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1766c:	2b00      	cmp	r3, #0
   1766e:	d007      	beq.n	17680 <hciCoreResetSequence+0x238>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   17670:	4b26      	ldr	r3, [pc, #152]	; (1770c <hciCoreResetSequence+0x2c4>)
   17672:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   17676:	8afa      	ldrh	r2, [r7, #22]
   17678:	4611      	mov	r1, r2
   1767a:	6878      	ldr	r0, [r7, #4]
   1767c:	4798      	blx	r3
        break;
   1767e:	e037      	b.n	176f0 <hciCoreResetSequence+0x2a8>
          hciCoreCb.maxAdvDataLen = 0;
   17680:	4b22      	ldr	r3, [pc, #136]	; (1770c <hciCoreResetSequence+0x2c4>)
   17682:	2200      	movs	r2, #0
   17684:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
          hciCoreCb.numSupAdvSets = 0;
   17688:	4b20      	ldr	r3, [pc, #128]	; (1770c <hciCoreResetSequence+0x2c4>)
   1768a:	2200      	movs	r2, #0
   1768c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
          hciCoreCb.perAdvListSize = 0;
   17690:	4b1e      	ldr	r3, [pc, #120]	; (1770c <hciCoreResetSequence+0x2c4>)
   17692:	2200      	movs	r2, #0
   17694:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
          HciLeRandCmd();
   17698:	f7fc fde9 	bl	1426e <HciLeRandCmd>
        break;
   1769c:	e028      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        if (hciCoreCb.extResetSeq)
   1769e:	4b1b      	ldr	r3, [pc, #108]	; (1770c <hciCoreResetSequence+0x2c4>)
   176a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   176a4:	2b00      	cmp	r3, #0
   176a6:	d022      	beq.n	176ee <hciCoreResetSequence+0x2a6>
          (*hciCoreCb.extResetSeq)(pMsg, opcode);
   176a8:	4b18      	ldr	r3, [pc, #96]	; (1770c <hciCoreResetSequence+0x2c4>)
   176aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   176ae:	8afa      	ldrh	r2, [r7, #22]
   176b0:	4611      	mov	r1, r2
   176b2:	6878      	ldr	r0, [r7, #4]
   176b4:	4798      	blx	r3
        break;
   176b6:	e01a      	b.n	176ee <hciCoreResetSequence+0x2a6>
        if (randCnt < (HCI_RESET_RAND_CNT-1))
   176b8:	4b0f      	ldr	r3, [pc, #60]	; (176f8 <hciCoreResetSequence+0x2b0>)
   176ba:	781b      	ldrb	r3, [r3, #0]
   176bc:	2b02      	cmp	r3, #2
   176be:	d808      	bhi.n	176d2 <hciCoreResetSequence+0x28a>
          randCnt++;
   176c0:	4b0d      	ldr	r3, [pc, #52]	; (176f8 <hciCoreResetSequence+0x2b0>)
   176c2:	781b      	ldrb	r3, [r3, #0]
   176c4:	3301      	adds	r3, #1
   176c6:	b2da      	uxtb	r2, r3
   176c8:	4b0b      	ldr	r3, [pc, #44]	; (176f8 <hciCoreResetSequence+0x2b0>)
   176ca:	701a      	strb	r2, [r3, #0]
          HciLeRandCmd();
   176cc:	f7fc fdcf 	bl	1426e <HciLeRandCmd>
        break;
   176d0:	e00e      	b.n	176f0 <hciCoreResetSequence+0x2a8>
          hciCb.resetting = FALSE;
   176d2:	4b0f      	ldr	r3, [pc, #60]	; (17710 <hciCoreResetSequence+0x2c8>)
   176d4:	2200      	movs	r2, #0
   176d6:	765a      	strb	r2, [r3, #25]
          hdr.param = 0;
   176d8:	2300      	movs	r3, #0
   176da:	81bb      	strh	r3, [r7, #12]
          hdr.event = HCI_RESET_SEQ_CMPL_CBACK_EVT;
   176dc:	2300      	movs	r3, #0
   176de:	73bb      	strb	r3, [r7, #14]
          (*hciCb.evtCback)((hciEvt_t *) &hdr);
   176e0:	4b0b      	ldr	r3, [pc, #44]	; (17710 <hciCoreResetSequence+0x2c8>)
   176e2:	689b      	ldr	r3, [r3, #8]
   176e4:	f107 020c 	add.w	r2, r7, #12
   176e8:	4610      	mov	r0, r2
   176ea:	4798      	blx	r3
        break;
   176ec:	e000      	b.n	176f0 <hciCoreResetSequence+0x2a8>
        break;
   176ee:	bf00      	nop
    }
  }
}
   176f0:	bf00      	nop
   176f2:	3718      	adds	r7, #24
   176f4:	46bd      	mov	sp, r7
   176f6:	bd80      	pop	{r7, pc}
   176f8:	10004364 	.word	0x10004364
   176fc:	00022a0c 	.word	0x00022a0c
   17700:	00022a14 	.word	0x00022a14
   17704:	00022a1c 	.word	0x00022a1c
   17708:	1000650c 	.word	0x1000650c
   1770c:	10006424 	.word	0x10006424
   17710:	10006538 	.word	0x10006538

00017714 <hciCoreVsCmdCmplRcvd>:
 *
 *  \return HCI callback event code or zero.
 */
/*************************************************************************************************/
uint8_t hciCoreVsCmdCmplRcvd(uint16_t opcode, uint8_t *pMsg, uint8_t len)
{
   17714:	b480      	push	{r7}
   17716:	b083      	sub	sp, #12
   17718:	af00      	add	r7, sp, #0
   1771a:	4603      	mov	r3, r0
   1771c:	6039      	str	r1, [r7, #0]
   1771e:	80fb      	strh	r3, [r7, #6]
   17720:	4613      	mov	r3, r2
   17722:	717b      	strb	r3, [r7, #5]
  return HCI_VENDOR_SPEC_CMD_CMPL_CBACK_EVT;
   17724:	2312      	movs	r3, #18
}
   17726:	4618      	mov	r0, r3
   17728:	370c      	adds	r7, #12
   1772a:	46bd      	mov	sp, r7
   1772c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17730:	4770      	bx	lr

00017732 <HciVsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciVsInit(uint8_t param)
{
   17732:	b480      	push	{r7}
   17734:	b083      	sub	sp, #12
   17736:	af00      	add	r7, sp, #0
   17738:	4603      	mov	r3, r0
   1773a:	71fb      	strb	r3, [r7, #7]

}
   1773c:	bf00      	nop
   1773e:	370c      	adds	r7, #12
   17740:	46bd      	mov	sp, r7
   17742:	f85d 7b04 	ldr.w	r7, [sp], #4
   17746:	4770      	bx	lr

00017748 <HciEvtRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciEvtRegister(hciEvtCback_t evtCback)
{
   17748:	b480      	push	{r7}
   1774a:	b083      	sub	sp, #12
   1774c:	af00      	add	r7, sp, #0
   1774e:	6078      	str	r0, [r7, #4]
  hciCb.evtCback = evtCback;
   17750:	4a04      	ldr	r2, [pc, #16]	; (17764 <HciEvtRegister+0x1c>)
   17752:	687b      	ldr	r3, [r7, #4]
   17754:	6093      	str	r3, [r2, #8]
}
   17756:	bf00      	nop
   17758:	370c      	adds	r7, #12
   1775a:	46bd      	mov	sp, r7
   1775c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17760:	4770      	bx	lr
   17762:	bf00      	nop
   17764:	10006538 	.word	0x10006538

00017768 <HciSecRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciSecRegister(hciSecCback_t secCback)
{
   17768:	b480      	push	{r7}
   1776a:	b083      	sub	sp, #12
   1776c:	af00      	add	r7, sp, #0
   1776e:	6078      	str	r0, [r7, #4]
  hciCb.secCback = secCback;
   17770:	4a04      	ldr	r2, [pc, #16]	; (17784 <HciSecRegister+0x1c>)
   17772:	687b      	ldr	r3, [r7, #4]
   17774:	60d3      	str	r3, [r2, #12]
}
   17776:	bf00      	nop
   17778:	370c      	adds	r7, #12
   1777a:	46bd      	mov	sp, r7
   1777c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17780:	4770      	bx	lr
   17782:	bf00      	nop
   17784:	10006538 	.word	0x10006538

00017788 <HciAclRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciAclRegister(hciAclCback_t aclCback, hciFlowCback_t flowCback)
{
   17788:	b480      	push	{r7}
   1778a:	b083      	sub	sp, #12
   1778c:	af00      	add	r7, sp, #0
   1778e:	6078      	str	r0, [r7, #4]
   17790:	6039      	str	r1, [r7, #0]
  hciCb.aclCback = aclCback;
   17792:	4a06      	ldr	r2, [pc, #24]	; (177ac <HciAclRegister+0x24>)
   17794:	687b      	ldr	r3, [r7, #4]
   17796:	6113      	str	r3, [r2, #16]
  hciCb.flowCback = flowCback;
   17798:	4a04      	ldr	r2, [pc, #16]	; (177ac <HciAclRegister+0x24>)
   1779a:	683b      	ldr	r3, [r7, #0]
   1779c:	6153      	str	r3, [r2, #20]
}
   1779e:	bf00      	nop
   177a0:	370c      	adds	r7, #12
   177a2:	46bd      	mov	sp, r7
   177a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   177a8:	4770      	bx	lr
   177aa:	bf00      	nop
   177ac:	10006538 	.word	0x10006538

000177b0 <HciHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandlerInit(wsfHandlerId_t handlerId)
{
   177b0:	b580      	push	{r7, lr}
   177b2:	b082      	sub	sp, #8
   177b4:	af00      	add	r7, sp, #0
   177b6:	4603      	mov	r3, r0
   177b8:	71fb      	strb	r3, [r7, #7]
  /* store handler ID */
  hciCb.handlerId = handlerId;
   177ba:	4a07      	ldr	r2, [pc, #28]	; (177d8 <HciHandlerInit+0x28>)
   177bc:	79fb      	ldrb	r3, [r7, #7]
   177be:	7613      	strb	r3, [r2, #24]

  /* init rx queue */
  WSF_QUEUE_INIT(&hciCb.rxQueue);
   177c0:	4b05      	ldr	r3, [pc, #20]	; (177d8 <HciHandlerInit+0x28>)
   177c2:	2200      	movs	r2, #0
   177c4:	601a      	str	r2, [r3, #0]
   177c6:	4b04      	ldr	r3, [pc, #16]	; (177d8 <HciHandlerInit+0x28>)
   177c8:	2200      	movs	r2, #0
   177ca:	605a      	str	r2, [r3, #4]
    
  /* perform other hci initialization */
  HciCoreInit();
   177cc:	f7fd fc94 	bl	150f8 <HciCoreInit>
}
   177d0:	bf00      	nop
   177d2:	3708      	adds	r7, #8
   177d4:	46bd      	mov	sp, r7
   177d6:	bd80      	pop	{r7, pc}
   177d8:	10006538 	.word	0x10006538

000177dc <HciHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HciHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   177dc:	b580      	push	{r7, lr}
   177de:	b082      	sub	sp, #8
   177e0:	af00      	add	r7, sp, #0
   177e2:	4603      	mov	r3, r0
   177e4:	6039      	str	r1, [r7, #0]
   177e6:	71fb      	strb	r3, [r7, #7]
  HciCoreHandler(event, pMsg);
   177e8:	79fb      	ldrb	r3, [r7, #7]
   177ea:	6839      	ldr	r1, [r7, #0]
   177ec:	4618      	mov	r0, r3
   177ee:	f7fd fe11 	bl	15414 <HciCoreHandler>
}
   177f2:	bf00      	nop
   177f4:	3708      	adds	r7, #8
   177f6:	46bd      	mov	sp, r7
   177f8:	bd80      	pop	{r7, pc}
	...

000177fc <WsfBufInit>:
 *
 *  \return Amount of pBufMem used or 0 for failures.
 */
/*************************************************************************************************/
uint16_t WsfBufInit(uint16_t bufMemLen, uint8_t *pBufMem, uint8_t numPools, wsfBufPoolDesc_t *pDesc)
{
   177fc:	b480      	push	{r7}
   177fe:	b089      	sub	sp, #36	; 0x24
   17800:	af00      	add	r7, sp, #0
   17802:	60b9      	str	r1, [r7, #8]
   17804:	607b      	str	r3, [r7, #4]
   17806:	4603      	mov	r3, r0
   17808:	81fb      	strh	r3, [r7, #14]
   1780a:	4613      	mov	r3, r2
   1780c:	737b      	strb	r3, [r7, #13]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *pStart;
  uint16_t      len;
  uint8_t       i;

  wsfBufMem = (wsfBufMem_t *) pBufMem;
   1780e:	4a4d      	ldr	r2, [pc, #308]	; (17944 <WsfBufInit+0x148>)
   17810:	68bb      	ldr	r3, [r7, #8]
   17812:	6013      	str	r3, [r2, #0]
  pPool = (wsfBufPool_t *) wsfBufMem;
   17814:	4b4b      	ldr	r3, [pc, #300]	; (17944 <WsfBufInit+0x148>)
   17816:	681b      	ldr	r3, [r3, #0]
   17818:	61fb      	str	r3, [r7, #28]

  /* buffer storage starts after the pool structs */
  pStart = (wsfBufMem_t *) (pPool + numPools);
   1781a:	7b7a      	ldrb	r2, [r7, #13]
   1781c:	4613      	mov	r3, r2
   1781e:	005b      	lsls	r3, r3, #1
   17820:	4413      	add	r3, r2
   17822:	009b      	lsls	r3, r3, #2
   17824:	461a      	mov	r2, r3
   17826:	69fb      	ldr	r3, [r7, #28]
   17828:	4413      	add	r3, r2
   1782a:	61bb      	str	r3, [r7, #24]

  wsfBufNumPools = numPools;
   1782c:	4a46      	ldr	r2, [pc, #280]	; (17948 <WsfBufInit+0x14c>)
   1782e:	7b7b      	ldrb	r3, [r7, #13]
   17830:	7013      	strb	r3, [r2, #0]

  /* create each pool; see loop exit condition below */
  while (TRUE)
  {
    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17832:	4b44      	ldr	r3, [pc, #272]	; (17944 <WsfBufInit+0x148>)
   17834:	681a      	ldr	r2, [r3, #0]
   17836:	89fb      	ldrh	r3, [r7, #14]
   17838:	08db      	lsrs	r3, r3, #3
   1783a:	b29b      	uxth	r3, r3
   1783c:	00db      	lsls	r3, r3, #3
   1783e:	441a      	add	r2, r3
   17840:	69bb      	ldr	r3, [r7, #24]
   17842:	429a      	cmp	r2, r3
   17844:	d201      	bcs.n	1784a <WsfBufInit+0x4e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   17846:	2300      	movs	r3, #0
   17848:	e075      	b.n	17936 <WsfBufInit+0x13a>
    }

    /* exit loop after verification check */
    if (numPools-- == 0)
   1784a:	7b7b      	ldrb	r3, [r7, #13]
   1784c:	1e5a      	subs	r2, r3, #1
   1784e:	737a      	strb	r2, [r7, #13]
   17850:	2b00      	cmp	r3, #0
   17852:	d066      	beq.n	17922 <WsfBufInit+0x126>
    {
      break;
    }

    /* adjust pool lengths for minimum size and alignment */
    if (pDesc->len < sizeof(wsfBufMem_t))
   17854:	687b      	ldr	r3, [r7, #4]
   17856:	881b      	ldrh	r3, [r3, #0]
   17858:	2b07      	cmp	r3, #7
   1785a:	d803      	bhi.n	17864 <WsfBufInit+0x68>
    {
      pPool->desc.len = sizeof(wsfBufMem_t);
   1785c:	69fb      	ldr	r3, [r7, #28]
   1785e:	2208      	movs	r2, #8
   17860:	801a      	strh	r2, [r3, #0]
   17862:	e014      	b.n	1788e <WsfBufInit+0x92>
    }
    else if ((pDesc->len % sizeof(wsfBufMem_t)) != 0)
   17864:	687b      	ldr	r3, [r7, #4]
   17866:	881b      	ldrh	r3, [r3, #0]
   17868:	f003 0307 	and.w	r3, r3, #7
   1786c:	b29b      	uxth	r3, r3
   1786e:	2b00      	cmp	r3, #0
   17870:	d009      	beq.n	17886 <WsfBufInit+0x8a>
    {
      pPool->desc.len = pDesc->len + sizeof(wsfBufMem_t) - (pDesc->len % sizeof(wsfBufMem_t));
   17872:	687b      	ldr	r3, [r7, #4]
   17874:	881b      	ldrh	r3, [r3, #0]
   17876:	f023 0307 	bic.w	r3, r3, #7
   1787a:	b29b      	uxth	r3, r3
   1787c:	3308      	adds	r3, #8
   1787e:	b29a      	uxth	r2, r3
   17880:	69fb      	ldr	r3, [r7, #28]
   17882:	801a      	strh	r2, [r3, #0]
   17884:	e003      	b.n	1788e <WsfBufInit+0x92>
    }
    else
    {
      pPool->desc.len = pDesc->len;
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	881a      	ldrh	r2, [r3, #0]
   1788a:	69fb      	ldr	r3, [r7, #28]
   1788c:	801a      	strh	r2, [r3, #0]
    }

    pPool->desc.num = pDesc->num;
   1788e:	687b      	ldr	r3, [r7, #4]
   17890:	789a      	ldrb	r2, [r3, #2]
   17892:	69fb      	ldr	r3, [r7, #28]
   17894:	709a      	strb	r2, [r3, #2]
    pDesc++;
   17896:	687b      	ldr	r3, [r7, #4]
   17898:	3304      	adds	r3, #4
   1789a:	607b      	str	r3, [r7, #4]

    pPool->pStart = pStart;
   1789c:	69fb      	ldr	r3, [r7, #28]
   1789e:	69ba      	ldr	r2, [r7, #24]
   178a0:	605a      	str	r2, [r3, #4]
    pPool->pFree = pStart;
   178a2:	69fb      	ldr	r3, [r7, #28]
   178a4:	69ba      	ldr	r2, [r7, #24]
   178a6:	609a      	str	r2, [r3, #8]

    WSF_TRACE_INFO2("Creating pool len=%u num=%u", pPool->desc.len, pPool->desc.num);
    WSF_TRACE_INFO1("              pStart=0x%x", (uint32_t)pPool->pStart);

    /* initialize free list */
    len = pPool->desc.len / sizeof(wsfBufMem_t);
   178a8:	69fb      	ldr	r3, [r7, #28]
   178aa:	881b      	ldrh	r3, [r3, #0]
   178ac:	08db      	lsrs	r3, r3, #3
   178ae:	82bb      	strh	r3, [r7, #20]
    for (i = pPool->desc.num; i > 1; i--)
   178b0:	69fb      	ldr	r3, [r7, #28]
   178b2:	789b      	ldrb	r3, [r3, #2]
   178b4:	75fb      	strb	r3, [r7, #23]
   178b6:	e019      	b.n	178ec <WsfBufInit+0xf0>
    {
      /* verify we didn't overrun memory; if we did, abort */
      if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   178b8:	4b22      	ldr	r3, [pc, #136]	; (17944 <WsfBufInit+0x148>)
   178ba:	681a      	ldr	r2, [r3, #0]
   178bc:	89fb      	ldrh	r3, [r7, #14]
   178be:	08db      	lsrs	r3, r3, #3
   178c0:	b29b      	uxth	r3, r3
   178c2:	00db      	lsls	r3, r3, #3
   178c4:	441a      	add	r2, r3
   178c6:	69bb      	ldr	r3, [r7, #24]
   178c8:	429a      	cmp	r2, r3
   178ca:	d201      	bcs.n	178d0 <WsfBufInit+0xd4>
      {
        WSF_ASSERT(FALSE);
        return 0;
   178cc:	2300      	movs	r3, #0
   178ce:	e032      	b.n	17936 <WsfBufInit+0x13a>
      }
      /* pointer to the next free buffer is stored in the buffer itself */
      pStart->pNext = pStart + len;
   178d0:	8abb      	ldrh	r3, [r7, #20]
   178d2:	00db      	lsls	r3, r3, #3
   178d4:	69ba      	ldr	r2, [r7, #24]
   178d6:	441a      	add	r2, r3
   178d8:	69bb      	ldr	r3, [r7, #24]
   178da:	601a      	str	r2, [r3, #0]
      pStart += len;
   178dc:	8abb      	ldrh	r3, [r7, #20]
   178de:	00db      	lsls	r3, r3, #3
   178e0:	69ba      	ldr	r2, [r7, #24]
   178e2:	4413      	add	r3, r2
   178e4:	61bb      	str	r3, [r7, #24]
    for (i = pPool->desc.num; i > 1; i--)
   178e6:	7dfb      	ldrb	r3, [r7, #23]
   178e8:	3b01      	subs	r3, #1
   178ea:	75fb      	strb	r3, [r7, #23]
   178ec:	7dfb      	ldrb	r3, [r7, #23]
   178ee:	2b01      	cmp	r3, #1
   178f0:	d8e2      	bhi.n	178b8 <WsfBufInit+0xbc>
    }

    /* verify we didn't overrun memory; if we did, abort */
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   178f2:	4b14      	ldr	r3, [pc, #80]	; (17944 <WsfBufInit+0x148>)
   178f4:	681a      	ldr	r2, [r3, #0]
   178f6:	89fb      	ldrh	r3, [r7, #14]
   178f8:	08db      	lsrs	r3, r3, #3
   178fa:	b29b      	uxth	r3, r3
   178fc:	00db      	lsls	r3, r3, #3
   178fe:	441a      	add	r2, r3
   17900:	69bb      	ldr	r3, [r7, #24]
   17902:	429a      	cmp	r2, r3
   17904:	d201      	bcs.n	1790a <WsfBufInit+0x10e>
    {
      WSF_ASSERT(FALSE);
      return 0;
   17906:	2300      	movs	r3, #0
   17908:	e015      	b.n	17936 <WsfBufInit+0x13a>
    }
    /* last one in list points to NULL */
    pStart->pNext = NULL;
   1790a:	69bb      	ldr	r3, [r7, #24]
   1790c:	2200      	movs	r2, #0
   1790e:	601a      	str	r2, [r3, #0]
    pStart += len;
   17910:	8abb      	ldrh	r3, [r7, #20]
   17912:	00db      	lsls	r3, r3, #3
   17914:	69ba      	ldr	r2, [r7, #24]
   17916:	4413      	add	r3, r2
   17918:	61bb      	str	r3, [r7, #24]

    /* next pool */
    pPool++;
   1791a:	69fb      	ldr	r3, [r7, #28]
   1791c:	330c      	adds	r3, #12
   1791e:	61fb      	str	r3, [r7, #28]
    if (pStart > &wsfBufMem[bufMemLen / sizeof(wsfBufMem_t)])
   17920:	e787      	b.n	17832 <WsfBufInit+0x36>
      break;
   17922:	bf00      	nop
  }

  wsfBufMemLen = (uint8_t *) pStart - (uint8_t *) wsfBufMem;
   17924:	69bb      	ldr	r3, [r7, #24]
   17926:	4a07      	ldr	r2, [pc, #28]	; (17944 <WsfBufInit+0x148>)
   17928:	6812      	ldr	r2, [r2, #0]
   1792a:	1a9b      	subs	r3, r3, r2
   1792c:	b29a      	uxth	r2, r3
   1792e:	4b07      	ldr	r3, [pc, #28]	; (1794c <WsfBufInit+0x150>)
   17930:	801a      	strh	r2, [r3, #0]
  WSF_TRACE_INFO1("Created buffer pools; using %u bytes", wsfBufMemLen);

  return wsfBufMemLen;
   17932:	4b06      	ldr	r3, [pc, #24]	; (1794c <WsfBufInit+0x150>)
   17934:	881b      	ldrh	r3, [r3, #0]
}
   17936:	4618      	mov	r0, r3
   17938:	3724      	adds	r7, #36	; 0x24
   1793a:	46bd      	mov	sp, r7
   1793c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17940:	4770      	bx	lr
   17942:	bf00      	nop
   17944:	10004368 	.word	0x10004368
   17948:	10006556 	.word	0x10006556
   1794c:	10006554 	.word	0x10006554

00017950 <WsfBufAlloc>:
 *
 *  \return Pointer to allocated buffer or NULL if allocation fails.
 */
/*************************************************************************************************/
void *WsfBufAlloc(uint16_t len)
{
   17950:	b580      	push	{r7, lr}
   17952:	b086      	sub	sp, #24
   17954:	af00      	add	r7, sp, #0
   17956:	4603      	mov	r3, r0
   17958:	80fb      	strh	r3, [r7, #6]

  WSF_CS_INIT(cs);

  WSF_ASSERT(len > 0);

  pPool = (wsfBufPool_t *) wsfBufMem;
   1795a:	4b18      	ldr	r3, [pc, #96]	; (179bc <WsfBufAlloc+0x6c>)
   1795c:	681b      	ldr	r3, [r3, #0]
   1795e:	617b      	str	r3, [r7, #20]

  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   17960:	4b17      	ldr	r3, [pc, #92]	; (179c0 <WsfBufAlloc+0x70>)
   17962:	781b      	ldrb	r3, [r3, #0]
   17964:	74fb      	strb	r3, [r7, #19]
   17966:	e020      	b.n	179aa <WsfBufAlloc+0x5a>
  {
    /* if buffer is big enough */
    if (len <= pPool->desc.len)
   17968:	697b      	ldr	r3, [r7, #20]
   1796a:	881b      	ldrh	r3, [r3, #0]
   1796c:	88fa      	ldrh	r2, [r7, #6]
   1796e:	429a      	cmp	r2, r3
   17970:	d815      	bhi.n	1799e <WsfBufAlloc+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   17972:	f002 fd11 	bl	1a398 <WsfCsEnter>

      /* if buffers available */
      if (pPool->pFree != NULL)
   17976:	697b      	ldr	r3, [r7, #20]
   17978:	689b      	ldr	r3, [r3, #8]
   1797a:	2b00      	cmp	r3, #0
   1797c:	d00d      	beq.n	1799a <WsfBufAlloc+0x4a>
      {
        /* allocation succeeded */
        pBuf = pPool->pFree;
   1797e:	697b      	ldr	r3, [r7, #20]
   17980:	689b      	ldr	r3, [r3, #8]
   17982:	60fb      	str	r3, [r7, #12]

        /* next free buffer is stored inside current free buffer */
        pPool->pFree = pBuf->pNext;
   17984:	68fb      	ldr	r3, [r7, #12]
   17986:	681a      	ldr	r2, [r3, #0]
   17988:	697b      	ldr	r3, [r7, #20]
   1798a:	609a      	str	r2, [r3, #8]

#if WSF_BUF_FREE_CHECK == TRUE
        pBuf->free = 0;
   1798c:	68fb      	ldr	r3, [r7, #12]
   1798e:	2200      	movs	r2, #0
   17990:	605a      	str	r2, [r3, #4]
          pPool->maxAlloc = pPool->numAlloc;
        }
        pPool->maxReqLen = WSF_MAX(pPool->maxReqLen, len);
#endif
        /* exit critical section */
        WSF_CS_EXIT(cs);
   17992:	f002 fd15 	bl	1a3c0 <WsfCsExit>

        WSF_TRACE_ALLOC2("WsfBufAlloc len:%u pBuf:%08x", pPool->desc.len, pBuf);

        return pBuf;
   17996:	68fb      	ldr	r3, [r7, #12]
   17998:	e00b      	b.n	179b2 <WsfBufAlloc+0x62>
      }

      /* exit critical section */
      WSF_CS_EXIT(cs);
   1799a:	f002 fd11 	bl	1a3c0 <WsfCsExit>
  for (i = wsfBufNumPools; i > 0; i--, pPool++)
   1799e:	7cfb      	ldrb	r3, [r7, #19]
   179a0:	3b01      	subs	r3, #1
   179a2:	74fb      	strb	r3, [r7, #19]
   179a4:	697b      	ldr	r3, [r7, #20]
   179a6:	330c      	adds	r3, #12
   179a8:	617b      	str	r3, [r7, #20]
   179aa:	7cfb      	ldrb	r3, [r7, #19]
   179ac:	2b00      	cmp	r3, #0
   179ae:	d1db      	bne.n	17968 <WsfBufAlloc+0x18>

#if WSF_BUF_ALLOC_FAIL_ASSERT == TRUE
  WSF_ASSERT(FALSE);
#endif

  return NULL;
   179b0:	2300      	movs	r3, #0
}
   179b2:	4618      	mov	r0, r3
   179b4:	3718      	adds	r7, #24
   179b6:	46bd      	mov	sp, r7
   179b8:	bd80      	pop	{r7, pc}
   179ba:	bf00      	nop
   179bc:	10004368 	.word	0x10004368
   179c0:	10006556 	.word	0x10006556

000179c4 <WsfBufFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfBufFree(void *pBuf)
{
   179c4:	b580      	push	{r7, lr}
   179c6:	b084      	sub	sp, #16
   179c8:	af00      	add	r7, sp, #0
   179ca:	6078      	str	r0, [r7, #4]
  wsfBufPool_t  *pPool;
  wsfBufMem_t   *p = pBuf;
   179cc:	687b      	ldr	r3, [r7, #4]
   179ce:	60bb      	str	r3, [r7, #8]
  WSF_ASSERT(p >= ((wsfBufPool_t *) wsfBufMem)->pStart);
  WSF_ASSERT(p < (wsfBufMem_t *)(((uint8_t *) wsfBufMem) + wsfBufMemLen));
#endif

  /* iterate over pools starting from last pool */
  pPool = (wsfBufPool_t *) wsfBufMem + (wsfBufNumPools - 1);
   179d0:	4b16      	ldr	r3, [pc, #88]	; (17a2c <WsfBufFree+0x68>)
   179d2:	681a      	ldr	r2, [r3, #0]
   179d4:	4b16      	ldr	r3, [pc, #88]	; (17a30 <WsfBufFree+0x6c>)
   179d6:	781b      	ldrb	r3, [r3, #0]
   179d8:	4619      	mov	r1, r3
   179da:	460b      	mov	r3, r1
   179dc:	005b      	lsls	r3, r3, #1
   179de:	440b      	add	r3, r1
   179e0:	009b      	lsls	r3, r3, #2
   179e2:	3b0c      	subs	r3, #12
   179e4:	4413      	add	r3, r2
   179e6:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   179e8:	e016      	b.n	17a18 <WsfBufFree+0x54>
  {
    /* if the buffer memory is located inside this pool */
    if (p >= pPool->pStart)
   179ea:	68fb      	ldr	r3, [r7, #12]
   179ec:	685a      	ldr	r2, [r3, #4]
   179ee:	68bb      	ldr	r3, [r7, #8]
   179f0:	429a      	cmp	r2, r3
   179f2:	d80e      	bhi.n	17a12 <WsfBufFree+0x4e>
    {
      /* enter critical section */
      WSF_CS_ENTER(cs);
   179f4:	f002 fcd0 	bl	1a398 <WsfCsEnter>

#if WSF_BUF_FREE_CHECK == TRUE
      WSF_ASSERT(p->free != WSF_BUF_FREE_NUM);
      p->free = WSF_BUF_FREE_NUM;
   179f8:	68bb      	ldr	r3, [r7, #8]
   179fa:	4a0e      	ldr	r2, [pc, #56]	; (17a34 <WsfBufFree+0x70>)
   179fc:	605a      	str	r2, [r3, #4]
#if WSF_BUF_STATS == TRUE
      pPool->numAlloc--;
#endif

      /* pool found; put buffer back in free list */
      p->pNext = pPool->pFree;
   179fe:	68fb      	ldr	r3, [r7, #12]
   17a00:	689a      	ldr	r2, [r3, #8]
   17a02:	68bb      	ldr	r3, [r7, #8]
   17a04:	601a      	str	r2, [r3, #0]
      pPool->pFree = p;
   17a06:	68fb      	ldr	r3, [r7, #12]
   17a08:	68ba      	ldr	r2, [r7, #8]
   17a0a:	609a      	str	r2, [r3, #8]

      /* exit critical section */
      WSF_CS_EXIT(cs);
   17a0c:	f002 fcd8 	bl	1a3c0 <WsfCsExit>

      WSF_TRACE_FREE2("WsfBufFree len:%u pBuf:%08x", pPool->desc.len, pBuf);

      return;
   17a10:	e008      	b.n	17a24 <WsfBufFree+0x60>
    }

    /* next pool */
    pPool--;
   17a12:	68fb      	ldr	r3, [r7, #12]
   17a14:	3b0c      	subs	r3, #12
   17a16:	60fb      	str	r3, [r7, #12]
  while (pPool >= (wsfBufPool_t *) wsfBufMem)
   17a18:	4b04      	ldr	r3, [pc, #16]	; (17a2c <WsfBufFree+0x68>)
   17a1a:	681b      	ldr	r3, [r3, #0]
   17a1c:	68fa      	ldr	r2, [r7, #12]
   17a1e:	429a      	cmp	r2, r3
   17a20:	d2e3      	bcs.n	179ea <WsfBufFree+0x26>
  }

  /* should never get here */
  WSF_ASSERT(FALSE);

  return;
   17a22:	bf00      	nop
}
   17a24:	3710      	adds	r7, #16
   17a26:	46bd      	mov	sp, r7
   17a28:	bd80      	pop	{r7, pc}
   17a2a:	bf00      	nop
   17a2c:	10004368 	.word	0x10004368
   17a30:	10006556 	.word	0x10006556
   17a34:	faabd00d 	.word	0xfaabd00d

00017a38 <WsfMsgDataAlloc>:
 *
 *  \return Pointer to data message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgDataAlloc(uint16_t len, uint8_t tailroom)
{
   17a38:	b580      	push	{r7, lr}
   17a3a:	b082      	sub	sp, #8
   17a3c:	af00      	add	r7, sp, #0
   17a3e:	4603      	mov	r3, r0
   17a40:	460a      	mov	r2, r1
   17a42:	80fb      	strh	r3, [r7, #6]
   17a44:	4613      	mov	r3, r2
   17a46:	717b      	strb	r3, [r7, #5]
  return WsfMsgAlloc(len + tailroom);
   17a48:	797b      	ldrb	r3, [r7, #5]
   17a4a:	b29a      	uxth	r2, r3
   17a4c:	88fb      	ldrh	r3, [r7, #6]
   17a4e:	4413      	add	r3, r2
   17a50:	b29b      	uxth	r3, r3
   17a52:	4618      	mov	r0, r3
   17a54:	f000 f805 	bl	17a62 <WsfMsgAlloc>
   17a58:	4603      	mov	r3, r0
}
   17a5a:	4618      	mov	r0, r3
   17a5c:	3708      	adds	r7, #8
   17a5e:	46bd      	mov	sp, r7
   17a60:	bd80      	pop	{r7, pc}

00017a62 <WsfMsgAlloc>:
 *
 *  \return Pointer to message buffer or NULL if allocation failed.
 */
/*************************************************************************************************/
void *WsfMsgAlloc(uint16_t len)
{
   17a62:	b580      	push	{r7, lr}
   17a64:	b084      	sub	sp, #16
   17a66:	af00      	add	r7, sp, #0
   17a68:	4603      	mov	r3, r0
   17a6a:	80fb      	strh	r3, [r7, #6]
  wsfMsg_t  *pMsg;

  pMsg = WsfBufAlloc(len + sizeof(wsfMsg_t));
   17a6c:	88fb      	ldrh	r3, [r7, #6]
   17a6e:	3308      	adds	r3, #8
   17a70:	b29b      	uxth	r3, r3
   17a72:	4618      	mov	r0, r3
   17a74:	f7ff ff6c 	bl	17950 <WsfBufAlloc>
   17a78:	60f8      	str	r0, [r7, #12]

  /* hide header */
  if (pMsg != NULL)
   17a7a:	68fb      	ldr	r3, [r7, #12]
   17a7c:	2b00      	cmp	r3, #0
   17a7e:	d002      	beq.n	17a86 <WsfMsgAlloc+0x24>
  {
    pMsg++;
   17a80:	68fb      	ldr	r3, [r7, #12]
   17a82:	3308      	adds	r3, #8
   17a84:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   17a86:	68fb      	ldr	r3, [r7, #12]
}
   17a88:	4618      	mov	r0, r3
   17a8a:	3710      	adds	r7, #16
   17a8c:	46bd      	mov	sp, r7
   17a8e:	bd80      	pop	{r7, pc}

00017a90 <WsfMsgFree>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgFree(void *pMsg)
{
   17a90:	b580      	push	{r7, lr}
   17a92:	b082      	sub	sp, #8
   17a94:	af00      	add	r7, sp, #0
   17a96:	6078      	str	r0, [r7, #4]
  WsfBufFree(((wsfMsg_t *) pMsg) - 1);
   17a98:	687b      	ldr	r3, [r7, #4]
   17a9a:	3b08      	subs	r3, #8
   17a9c:	4618      	mov	r0, r3
   17a9e:	f7ff ff91 	bl	179c4 <WsfBufFree>
}
   17aa2:	bf00      	nop
   17aa4:	3708      	adds	r7, #8
   17aa6:	46bd      	mov	sp, r7
   17aa8:	bd80      	pop	{r7, pc}

00017aaa <WsfMsgSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgSend(wsfHandlerId_t handlerId, void *pMsg)
{
   17aaa:	b580      	push	{r7, lr}
   17aac:	b082      	sub	sp, #8
   17aae:	af00      	add	r7, sp, #0
   17ab0:	4603      	mov	r3, r0
   17ab2:	6039      	str	r1, [r7, #0]
   17ab4:	71fb      	strb	r3, [r7, #7]
  WSF_TRACE_MSG1("WsfMsgSend handlerId:%u", handlerId);

  /* get queue for this handler and enqueue message */
  WsfMsgEnq(WsfTaskMsgQueue(handlerId), handlerId, pMsg);
   17ab6:	79fb      	ldrb	r3, [r7, #7]
   17ab8:	4618      	mov	r0, r3
   17aba:	f002 fd3b 	bl	1a534 <WsfTaskMsgQueue>
   17abe:	79fb      	ldrb	r3, [r7, #7]
   17ac0:	683a      	ldr	r2, [r7, #0]
   17ac2:	4619      	mov	r1, r3
   17ac4:	f000 f809 	bl	17ada <WsfMsgEnq>

  /* set task for this handler as ready to run */
  WsfTaskSetReady(handlerId, WSF_MSG_QUEUE_EVENT);
   17ac8:	79fb      	ldrb	r3, [r7, #7]
   17aca:	2101      	movs	r1, #1
   17acc:	4618      	mov	r0, r3
   17ace:	f002 fd13 	bl	1a4f8 <WsfTaskSetReady>
}
   17ad2:	bf00      	nop
   17ad4:	3708      	adds	r7, #8
   17ad6:	46bd      	mov	sp, r7
   17ad8:	bd80      	pop	{r7, pc}

00017ada <WsfMsgEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfMsgEnq(wsfQueue_t *pQueue, wsfHandlerId_t handlerId, void *pMsg)
{
   17ada:	b580      	push	{r7, lr}
   17adc:	b086      	sub	sp, #24
   17ade:	af00      	add	r7, sp, #0
   17ae0:	60f8      	str	r0, [r7, #12]
   17ae2:	460b      	mov	r3, r1
   17ae4:	607a      	str	r2, [r7, #4]
   17ae6:	72fb      	strb	r3, [r7, #11]
  wsfMsg_t    *p;

  WSF_ASSERT(pMsg != NULL);

  /* get message header */
  p = ((wsfMsg_t *) pMsg) - 1;
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	3b08      	subs	r3, #8
   17aec:	617b      	str	r3, [r7, #20]

  /* set handler ID */
  p->handlerId = handlerId;
   17aee:	697b      	ldr	r3, [r7, #20]
   17af0:	7afa      	ldrb	r2, [r7, #11]
   17af2:	711a      	strb	r2, [r3, #4]

  WsfQueueEnq(pQueue, p);
   17af4:	6979      	ldr	r1, [r7, #20]
   17af6:	68f8      	ldr	r0, [r7, #12]
   17af8:	f000 f81c 	bl	17b34 <WsfQueueEnq>
}
   17afc:	bf00      	nop
   17afe:	3718      	adds	r7, #24
   17b00:	46bd      	mov	sp, r7
   17b02:	bd80      	pop	{r7, pc}

00017b04 <WsfMsgDeq>:
 *
 *  \return Pointer to message that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfMsgDeq(wsfQueue_t *pQueue, wsfHandlerId_t *pHandlerId)
{
   17b04:	b580      	push	{r7, lr}
   17b06:	b084      	sub	sp, #16
   17b08:	af00      	add	r7, sp, #0
   17b0a:	6078      	str	r0, [r7, #4]
   17b0c:	6039      	str	r1, [r7, #0]
  wsfMsg_t *pMsg;

  if ((pMsg = WsfQueueDeq(pQueue)) != NULL)
   17b0e:	6878      	ldr	r0, [r7, #4]
   17b10:	f000 f832 	bl	17b78 <WsfQueueDeq>
   17b14:	60f8      	str	r0, [r7, #12]
   17b16:	68fb      	ldr	r3, [r7, #12]
   17b18:	2b00      	cmp	r3, #0
   17b1a:	d006      	beq.n	17b2a <WsfMsgDeq+0x26>
  {
    *pHandlerId = pMsg->handlerId;
   17b1c:	68fb      	ldr	r3, [r7, #12]
   17b1e:	791a      	ldrb	r2, [r3, #4]
   17b20:	683b      	ldr	r3, [r7, #0]
   17b22:	701a      	strb	r2, [r3, #0]

    /* hide header */
    pMsg++;
   17b24:	68fb      	ldr	r3, [r7, #12]
   17b26:	3308      	adds	r3, #8
   17b28:	60fb      	str	r3, [r7, #12]
  }

  return pMsg;
   17b2a:	68fb      	ldr	r3, [r7, #12]
}
   17b2c:	4618      	mov	r0, r3
   17b2e:	3710      	adds	r7, #16
   17b30:	46bd      	mov	sp, r7
   17b32:	bd80      	pop	{r7, pc}

00017b34 <WsfQueueEnq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueEnq(wsfQueue_t *pQueue, void *pElem)
{
   17b34:	b580      	push	{r7, lr}
   17b36:	b082      	sub	sp, #8
   17b38:	af00      	add	r7, sp, #0
   17b3a:	6078      	str	r0, [r7, #4]
   17b3c:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* initialize next pointer */
  WSF_QUEUE_NEXT(pElem) = NULL;
   17b3e:	683b      	ldr	r3, [r7, #0]
   17b40:	2200      	movs	r2, #0
   17b42:	601a      	str	r2, [r3, #0]

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17b44:	f002 fc28 	bl	1a398 <WsfCsEnter>

  /* if queue empty */
  if (pQueue->pHead == NULL)
   17b48:	687b      	ldr	r3, [r7, #4]
   17b4a:	681b      	ldr	r3, [r3, #0]
   17b4c:	2b00      	cmp	r3, #0
   17b4e:	d106      	bne.n	17b5e <WsfQueueEnq+0x2a>
  {
    pQueue->pHead = pElem;
   17b50:	687b      	ldr	r3, [r7, #4]
   17b52:	683a      	ldr	r2, [r7, #0]
   17b54:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   17b56:	687b      	ldr	r3, [r7, #4]
   17b58:	683a      	ldr	r2, [r7, #0]
   17b5a:	605a      	str	r2, [r3, #4]
   17b5c:	e006      	b.n	17b6c <WsfQueueEnq+0x38>
  }
  /* else enqueue element to the tail of queue */
  else
  {
    WSF_QUEUE_NEXT(pQueue->pTail) = pElem;
   17b5e:	687b      	ldr	r3, [r7, #4]
   17b60:	685b      	ldr	r3, [r3, #4]
   17b62:	683a      	ldr	r2, [r7, #0]
   17b64:	601a      	str	r2, [r3, #0]
    pQueue->pTail = pElem;
   17b66:	687b      	ldr	r3, [r7, #4]
   17b68:	683a      	ldr	r2, [r7, #0]
   17b6a:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17b6c:	f002 fc28 	bl	1a3c0 <WsfCsExit>
}
   17b70:	bf00      	nop
   17b72:	3708      	adds	r7, #8
   17b74:	46bd      	mov	sp, r7
   17b76:	bd80      	pop	{r7, pc}

00017b78 <WsfQueueDeq>:
 *
 *  \return Pointer to element that has been dequeued or NULL if queue is empty.
 */
/*************************************************************************************************/
void *WsfQueueDeq(wsfQueue_t *pQueue)
{
   17b78:	b580      	push	{r7, lr}
   17b7a:	b084      	sub	sp, #16
   17b7c:	af00      	add	r7, sp, #0
   17b7e:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17b80:	f002 fc0a 	bl	1a398 <WsfCsEnter>

  pElem = pQueue->pHead;
   17b84:	687b      	ldr	r3, [r7, #4]
   17b86:	681b      	ldr	r3, [r3, #0]
   17b88:	60fb      	str	r3, [r7, #12]

  /* if queue is not empty */
  if (pElem != NULL)
   17b8a:	68fb      	ldr	r3, [r7, #12]
   17b8c:	2b00      	cmp	r3, #0
   17b8e:	d00a      	beq.n	17ba6 <WsfQueueDeq+0x2e>
  {
    /* set head to next element in queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   17b90:	68fb      	ldr	r3, [r7, #12]
   17b92:	681a      	ldr	r2, [r3, #0]
   17b94:	687b      	ldr	r3, [r7, #4]
   17b96:	601a      	str	r2, [r3, #0]

    /* check for empty queue */
    if (pQueue->pHead == NULL)
   17b98:	687b      	ldr	r3, [r7, #4]
   17b9a:	681b      	ldr	r3, [r3, #0]
   17b9c:	2b00      	cmp	r3, #0
   17b9e:	d102      	bne.n	17ba6 <WsfQueueDeq+0x2e>
    {
      pQueue->pTail = NULL;
   17ba0:	687b      	ldr	r3, [r7, #4]
   17ba2:	2200      	movs	r2, #0
   17ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17ba6:	f002 fc0b 	bl	1a3c0 <WsfCsExit>

  return pElem;
   17baa:	68fb      	ldr	r3, [r7, #12]
}
   17bac:	4618      	mov	r0, r3
   17bae:	3710      	adds	r7, #16
   17bb0:	46bd      	mov	sp, r7
   17bb2:	bd80      	pop	{r7, pc}

00017bb4 <WsfQueuePush>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueuePush(wsfQueue_t *pQueue, void *pElem)
{
   17bb4:	b580      	push	{r7, lr}
   17bb6:	b082      	sub	sp, #8
   17bb8:	af00      	add	r7, sp, #0
   17bba:	6078      	str	r0, [r7, #4]
   17bbc:	6039      	str	r1, [r7, #0]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17bbe:	f002 fbeb 	bl	1a398 <WsfCsEnter>

  /* else push element to head of queue */
  WSF_QUEUE_NEXT(pElem) = pQueue->pHead;
   17bc2:	687b      	ldr	r3, [r7, #4]
   17bc4:	681a      	ldr	r2, [r3, #0]
   17bc6:	683b      	ldr	r3, [r7, #0]
   17bc8:	601a      	str	r2, [r3, #0]

  /* if queue was empty set tail */
  if (pQueue->pHead == NULL)
   17bca:	687b      	ldr	r3, [r7, #4]
   17bcc:	681b      	ldr	r3, [r3, #0]
   17bce:	2b00      	cmp	r3, #0
   17bd0:	d102      	bne.n	17bd8 <WsfQueuePush+0x24>
  {
    pQueue->pTail = pElem;
   17bd2:	687b      	ldr	r3, [r7, #4]
   17bd4:	683a      	ldr	r2, [r7, #0]
   17bd6:	605a      	str	r2, [r3, #4]
  }

  /* set head */
  pQueue->pHead = pElem;
   17bd8:	687b      	ldr	r3, [r7, #4]
   17bda:	683a      	ldr	r2, [r7, #0]
   17bdc:	601a      	str	r2, [r3, #0]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17bde:	f002 fbef 	bl	1a3c0 <WsfCsExit>
}
   17be2:	bf00      	nop
   17be4:	3708      	adds	r7, #8
   17be6:	46bd      	mov	sp, r7
   17be8:	bd80      	pop	{r7, pc}

00017bea <WsfQueueInsert>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueInsert(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   17bea:	b580      	push	{r7, lr}
   17bec:	b084      	sub	sp, #16
   17bee:	af00      	add	r7, sp, #0
   17bf0:	60f8      	str	r0, [r7, #12]
   17bf2:	60b9      	str	r1, [r7, #8]
   17bf4:	607a      	str	r2, [r7, #4]

  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17bf6:	f002 fbcf 	bl	1a398 <WsfCsEnter>

  /* if queue empty or inserting at tail */
  if (pQueue->pHead == NULL || pPrev == pQueue->pTail)
   17bfa:	68fb      	ldr	r3, [r7, #12]
   17bfc:	681b      	ldr	r3, [r3, #0]
   17bfe:	2b00      	cmp	r3, #0
   17c00:	d004      	beq.n	17c0c <WsfQueueInsert+0x22>
   17c02:	68fb      	ldr	r3, [r7, #12]
   17c04:	685a      	ldr	r2, [r3, #4]
   17c06:	687b      	ldr	r3, [r7, #4]
   17c08:	429a      	cmp	r2, r3
   17c0a:	d104      	bne.n	17c16 <WsfQueueInsert+0x2c>
  {
    /* queue as normal */
    WsfQueueEnq(pQueue, pElem);
   17c0c:	68b9      	ldr	r1, [r7, #8]
   17c0e:	68f8      	ldr	r0, [r7, #12]
   17c10:	f7ff ff90 	bl	17b34 <WsfQueueEnq>
   17c14:	e00e      	b.n	17c34 <WsfQueueInsert+0x4a>
  }
  /* else if inserting at head */
  else if (pPrev == NULL)
   17c16:	687b      	ldr	r3, [r7, #4]
   17c18:	2b00      	cmp	r3, #0
   17c1a:	d104      	bne.n	17c26 <WsfQueueInsert+0x3c>
  {
    /* push to head */
    WsfQueuePush(pQueue, pElem);
   17c1c:	68b9      	ldr	r1, [r7, #8]
   17c1e:	68f8      	ldr	r0, [r7, #12]
   17c20:	f7ff ffc8 	bl	17bb4 <WsfQueuePush>
   17c24:	e006      	b.n	17c34 <WsfQueueInsert+0x4a>
  }
  else
  {
    /* insert in middle of queue */
    WSF_QUEUE_NEXT(pElem) = WSF_QUEUE_NEXT(pPrev);
   17c26:	687b      	ldr	r3, [r7, #4]
   17c28:	681a      	ldr	r2, [r3, #0]
   17c2a:	68bb      	ldr	r3, [r7, #8]
   17c2c:	601a      	str	r2, [r3, #0]
    WSF_QUEUE_NEXT(pPrev) = pElem;
   17c2e:	687b      	ldr	r3, [r7, #4]
   17c30:	68ba      	ldr	r2, [r7, #8]
   17c32:	601a      	str	r2, [r3, #0]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17c34:	f002 fbc4 	bl	1a3c0 <WsfCsExit>
}
   17c38:	bf00      	nop
   17c3a:	3710      	adds	r7, #16
   17c3c:	46bd      	mov	sp, r7
   17c3e:	bd80      	pop	{r7, pc}

00017c40 <WsfQueueRemove>:
 *                    Note:  set pPrev to NULL if pElem is first element in queue.
 *  \return None.
 */
/*************************************************************************************************/
void WsfQueueRemove(wsfQueue_t *pQueue, void *pElem, void *pPrev)
{
   17c40:	b580      	push	{r7, lr}
   17c42:	b084      	sub	sp, #16
   17c44:	af00      	add	r7, sp, #0
   17c46:	60f8      	str	r0, [r7, #12]
   17c48:	60b9      	str	r1, [r7, #8]
   17c4a:	607a      	str	r2, [r7, #4]
  WSF_ASSERT(pQueue != NULL);
  WSF_ASSERT(pQueue->pHead != NULL);
  WSF_ASSERT(pElem != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17c4c:	f002 fba4 	bl	1a398 <WsfCsEnter>

  /* if first element */
  if (pElem == pQueue->pHead)
   17c50:	68fb      	ldr	r3, [r7, #12]
   17c52:	681a      	ldr	r2, [r3, #0]
   17c54:	68bb      	ldr	r3, [r7, #8]
   17c56:	429a      	cmp	r2, r3
   17c58:	d104      	bne.n	17c64 <WsfQueueRemove+0x24>
  {
    /* remove from head of queue */
    pQueue->pHead = WSF_QUEUE_NEXT(pElem);
   17c5a:	68bb      	ldr	r3, [r7, #8]
   17c5c:	681a      	ldr	r2, [r3, #0]
   17c5e:	68fb      	ldr	r3, [r7, #12]
   17c60:	601a      	str	r2, [r3, #0]
   17c62:	e006      	b.n	17c72 <WsfQueueRemove+0x32>
  }
  else if (pPrev)
   17c64:	687b      	ldr	r3, [r7, #4]
   17c66:	2b00      	cmp	r3, #0
   17c68:	d003      	beq.n	17c72 <WsfQueueRemove+0x32>
  {
    /* remove from middle of queue, pPrev will never be null */
    WSF_QUEUE_NEXT(pPrev) = WSF_QUEUE_NEXT(pElem);
   17c6a:	68bb      	ldr	r3, [r7, #8]
   17c6c:	681a      	ldr	r2, [r3, #0]
   17c6e:	687b      	ldr	r3, [r7, #4]
   17c70:	601a      	str	r2, [r3, #0]
  }

  /* if last element */
  if (pElem == pQueue->pTail)
   17c72:	68fb      	ldr	r3, [r7, #12]
   17c74:	685a      	ldr	r2, [r3, #4]
   17c76:	68bb      	ldr	r3, [r7, #8]
   17c78:	429a      	cmp	r2, r3
   17c7a:	d102      	bne.n	17c82 <WsfQueueRemove+0x42>
  {
    /* update tail */
    pQueue->pTail = pPrev;
   17c7c:	68fb      	ldr	r3, [r7, #12]
   17c7e:	687a      	ldr	r2, [r7, #4]
   17c80:	605a      	str	r2, [r3, #4]
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17c82:	f002 fb9d 	bl	1a3c0 <WsfCsExit>
}
   17c86:	bf00      	nop
   17c88:	3710      	adds	r7, #16
   17c8a:	46bd      	mov	sp, r7
   17c8c:	bd80      	pop	{r7, pc}

00017c8e <WsfQueueCount>:
 *
 *  \return Number of elements in queue.
 */
/*************************************************************************************************/
uint16_t WsfQueueCount(wsfQueue_t *pQueue)
{
   17c8e:	b580      	push	{r7, lr}
   17c90:	b084      	sub	sp, #16
   17c92:	af00      	add	r7, sp, #0
   17c94:	6078      	str	r0, [r7, #4]
  wsfQueueElem_t  *pElem;
  uint16_t        count = 0;
   17c96:	2300      	movs	r3, #0
   17c98:	817b      	strh	r3, [r7, #10]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17c9a:	f002 fb7d 	bl	1a398 <WsfCsEnter>

  pElem = pQueue->pHead;
   17c9e:	687b      	ldr	r3, [r7, #4]
   17ca0:	681b      	ldr	r3, [r3, #0]
   17ca2:	60fb      	str	r3, [r7, #12]

  /* iterate over queue */
  while (pElem != NULL)
   17ca4:	e005      	b.n	17cb2 <WsfQueueCount+0x24>
  {
    count++;
   17ca6:	897b      	ldrh	r3, [r7, #10]
   17ca8:	3301      	adds	r3, #1
   17caa:	817b      	strh	r3, [r7, #10]
    pElem = pElem->pNext;
   17cac:	68fb      	ldr	r3, [r7, #12]
   17cae:	681b      	ldr	r3, [r3, #0]
   17cb0:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   17cb2:	68fb      	ldr	r3, [r7, #12]
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	d1f6      	bne.n	17ca6 <WsfQueueCount+0x18>
  }

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17cb8:	f002 fb82 	bl	1a3c0 <WsfCsExit>

  return count;
   17cbc:	897b      	ldrh	r3, [r7, #10]
}
   17cbe:	4618      	mov	r0, r3
   17cc0:	3710      	adds	r7, #16
   17cc2:	46bd      	mov	sp, r7
   17cc4:	bd80      	pop	{r7, pc}

00017cc6 <WsfQueueEmpty>:
 *
 *  \return TRUE if queue is empty, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t WsfQueueEmpty(wsfQueue_t *pQueue)
{
   17cc6:	b580      	push	{r7, lr}
   17cc8:	b084      	sub	sp, #16
   17cca:	af00      	add	r7, sp, #0
   17ccc:	6078      	str	r0, [r7, #4]
  WSF_CS_INIT(cs);

  WSF_ASSERT(pQueue != NULL);

  /* enter critical section */
  WSF_CS_ENTER(cs);
   17cce:	f002 fb63 	bl	1a398 <WsfCsEnter>

  empty = (pQueue->pHead == NULL);
   17cd2:	687b      	ldr	r3, [r7, #4]
   17cd4:	681b      	ldr	r3, [r3, #0]
   17cd6:	2b00      	cmp	r3, #0
   17cd8:	bf0c      	ite	eq
   17cda:	2301      	moveq	r3, #1
   17cdc:	2300      	movne	r3, #0
   17cde:	b2db      	uxtb	r3, r3
   17ce0:	73fb      	strb	r3, [r7, #15]

  /* exit critical section */
  WSF_CS_EXIT(cs);
   17ce2:	f002 fb6d 	bl	1a3c0 <WsfCsExit>

  return empty;
   17ce6:	7bfb      	ldrb	r3, [r7, #15]
}
   17ce8:	4618      	mov	r0, r3
   17cea:	3710      	adds	r7, #16
   17cec:	46bd      	mov	sp, r7
   17cee:	bd80      	pop	{r7, pc}

00017cf0 <wsfTimerRemove>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerRemove(wsfTimer_t *pTimer)
{
   17cf0:	b580      	push	{r7, lr}
   17cf2:	b084      	sub	sp, #16
   17cf4:	af00      	add	r7, sp, #0
   17cf6:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   17cf8:	2300      	movs	r3, #0
   17cfa:	60bb      	str	r3, [r7, #8]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   17cfc:	4b10      	ldr	r3, [pc, #64]	; (17d40 <wsfTimerRemove+0x50>)
   17cfe:	681b      	ldr	r3, [r3, #0]
   17d00:	60fb      	str	r3, [r7, #12]

  /* find timer in queue */
  while (pElem != NULL)
   17d02:	e008      	b.n	17d16 <wsfTimerRemove+0x26>
  {
    if (pElem == pTimer)
   17d04:	68fa      	ldr	r2, [r7, #12]
   17d06:	687b      	ldr	r3, [r7, #4]
   17d08:	429a      	cmp	r2, r3
   17d0a:	d008      	beq.n	17d1e <wsfTimerRemove+0x2e>
    {
      break;
    }
    pPrev = pElem;
   17d0c:	68fb      	ldr	r3, [r7, #12]
   17d0e:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   17d10:	68fb      	ldr	r3, [r7, #12]
   17d12:	681b      	ldr	r3, [r3, #0]
   17d14:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   17d16:	68fb      	ldr	r3, [r7, #12]
   17d18:	2b00      	cmp	r3, #0
   17d1a:	d1f3      	bne.n	17d04 <wsfTimerRemove+0x14>
   17d1c:	e000      	b.n	17d20 <wsfTimerRemove+0x30>
      break;
   17d1e:	bf00      	nop
  }

  /* if timer found remove from queue */
  if (pElem != NULL)
   17d20:	68fb      	ldr	r3, [r7, #12]
   17d22:	2b00      	cmp	r3, #0
   17d24:	d007      	beq.n	17d36 <wsfTimerRemove+0x46>
  {
    WsfQueueRemove(&wsfTimerTimerQueue, pTimer, pPrev);
   17d26:	68ba      	ldr	r2, [r7, #8]
   17d28:	6879      	ldr	r1, [r7, #4]
   17d2a:	4805      	ldr	r0, [pc, #20]	; (17d40 <wsfTimerRemove+0x50>)
   17d2c:	f7ff ff88 	bl	17c40 <WsfQueueRemove>

    pTimer->isStarted = FALSE;
   17d30:	687b      	ldr	r3, [r7, #4]
   17d32:	2200      	movs	r2, #0
   17d34:	725a      	strb	r2, [r3, #9]
  }
}
   17d36:	bf00      	nop
   17d38:	3710      	adds	r7, #16
   17d3a:	46bd      	mov	sp, r7
   17d3c:	bd80      	pop	{r7, pc}
   17d3e:	bf00      	nop
   17d40:	10006558 	.word	0x10006558

00017d44 <wsfTimerInsert>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void wsfTimerInsert(wsfTimer_t *pTimer, wsfTimerTicks_t ticks)
{
   17d44:	b580      	push	{r7, lr}
   17d46:	b084      	sub	sp, #16
   17d48:	af00      	add	r7, sp, #0
   17d4a:	6078      	str	r0, [r7, #4]
   17d4c:	6039      	str	r1, [r7, #0]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   17d4e:	2300      	movs	r3, #0
   17d50:	60bb      	str	r3, [r7, #8]

  /* task schedule lock */
  WsfTaskLock();
   17d52:	f002 fb49 	bl	1a3e8 <WsfTaskLock>

  /* if timer is already running stop it first */
  if (pTimer->isStarted)
   17d56:	687b      	ldr	r3, [r7, #4]
   17d58:	7a5b      	ldrb	r3, [r3, #9]
   17d5a:	2b00      	cmp	r3, #0
   17d5c:	d002      	beq.n	17d64 <wsfTimerInsert+0x20>
  {
    wsfTimerRemove(pTimer);
   17d5e:	6878      	ldr	r0, [r7, #4]
   17d60:	f7ff ffc6 	bl	17cf0 <wsfTimerRemove>
  }

  pTimer->isStarted = TRUE;
   17d64:	687b      	ldr	r3, [r7, #4]
   17d66:	2201      	movs	r2, #1
   17d68:	725a      	strb	r2, [r3, #9]
  pTimer->ticks = ticks;
   17d6a:	687b      	ldr	r3, [r7, #4]
   17d6c:	683a      	ldr	r2, [r7, #0]
   17d6e:	605a      	str	r2, [r3, #4]

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   17d70:	4b0f      	ldr	r3, [pc, #60]	; (17db0 <wsfTimerInsert+0x6c>)
   17d72:	681b      	ldr	r3, [r3, #0]
   17d74:	60fb      	str	r3, [r7, #12]

  /* find insertion point in queue */
  while (pElem != NULL)
   17d76:	e00a      	b.n	17d8e <wsfTimerInsert+0x4a>
  {
    if (pTimer->ticks < pElem->ticks)
   17d78:	687b      	ldr	r3, [r7, #4]
   17d7a:	685a      	ldr	r2, [r3, #4]
   17d7c:	68fb      	ldr	r3, [r7, #12]
   17d7e:	685b      	ldr	r3, [r3, #4]
   17d80:	429a      	cmp	r2, r3
   17d82:	d308      	bcc.n	17d96 <wsfTimerInsert+0x52>
    {
      break;
    }
    pPrev = pElem;
   17d84:	68fb      	ldr	r3, [r7, #12]
   17d86:	60bb      	str	r3, [r7, #8]
    pElem = pElem->pNext;
   17d88:	68fb      	ldr	r3, [r7, #12]
   17d8a:	681b      	ldr	r3, [r3, #0]
   17d8c:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   17d8e:	68fb      	ldr	r3, [r7, #12]
   17d90:	2b00      	cmp	r3, #0
   17d92:	d1f1      	bne.n	17d78 <wsfTimerInsert+0x34>
   17d94:	e000      	b.n	17d98 <wsfTimerInsert+0x54>
      break;
   17d96:	bf00      	nop
  }

  /* insert timer into queue */
  WsfQueueInsert(&wsfTimerTimerQueue, pTimer, pPrev);
   17d98:	68ba      	ldr	r2, [r7, #8]
   17d9a:	6879      	ldr	r1, [r7, #4]
   17d9c:	4804      	ldr	r0, [pc, #16]	; (17db0 <wsfTimerInsert+0x6c>)
   17d9e:	f7ff ff24 	bl	17bea <WsfQueueInsert>

  /* task schedule unlock */
  WsfTaskUnlock();
   17da2:	f002 fb27 	bl	1a3f4 <WsfTaskUnlock>
}
   17da6:	bf00      	nop
   17da8:	3710      	adds	r7, #16
   17daa:	46bd      	mov	sp, r7
   17dac:	bd80      	pop	{r7, pc}
   17dae:	bf00      	nop
   17db0:	10006558 	.word	0x10006558

00017db4 <WsfTimerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerInit(void)
{
   17db4:	b480      	push	{r7}
   17db6:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&wsfTimerTimerQueue);
   17db8:	4b05      	ldr	r3, [pc, #20]	; (17dd0 <WsfTimerInit+0x1c>)
   17dba:	2200      	movs	r2, #0
   17dbc:	601a      	str	r2, [r3, #0]
   17dbe:	4b04      	ldr	r3, [pc, #16]	; (17dd0 <WsfTimerInit+0x1c>)
   17dc0:	2200      	movs	r2, #0
   17dc2:	605a      	str	r2, [r3, #4]
}
   17dc4:	bf00      	nop
   17dc6:	46bd      	mov	sp, r7
   17dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   17dcc:	4770      	bx	lr
   17dce:	bf00      	nop
   17dd0:	10006558 	.word	0x10006558

00017dd4 <WsfTimerStartSec>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartSec(wsfTimer_t *pTimer, wsfTimerTicks_t sec)
{
   17dd4:	b580      	push	{r7, lr}
   17dd6:	b082      	sub	sp, #8
   17dd8:	af00      	add	r7, sp, #0
   17dda:	6078      	str	r0, [r7, #4]
   17ddc:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartSec pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_SEC_TO_TICKS(sec));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_SEC_TO_TICKS(sec));
   17dde:	683b      	ldr	r3, [r7, #0]
   17de0:	2264      	movs	r2, #100	; 0x64
   17de2:	fb02 f303 	mul.w	r3, r2, r3
   17de6:	4619      	mov	r1, r3
   17de8:	6878      	ldr	r0, [r7, #4]
   17dea:	f7ff ffab 	bl	17d44 <wsfTimerInsert>
}
   17dee:	bf00      	nop
   17df0:	3708      	adds	r7, #8
   17df2:	46bd      	mov	sp, r7
   17df4:	bd80      	pop	{r7, pc}
	...

00017df8 <WsfTimerStartMs>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStartMs(wsfTimer_t *pTimer, wsfTimerTicks_t ms)
{
   17df8:	b580      	push	{r7, lr}
   17dfa:	b082      	sub	sp, #8
   17dfc:	af00      	add	r7, sp, #0
   17dfe:	6078      	str	r0, [r7, #4]
   17e00:	6039      	str	r1, [r7, #0]
  WSF_TRACE_INFO2("WsfTimerStartMs pTimer:0x%x ticks:%u", (uint32_t)pTimer, WSF_TIMER_MS_TO_TICKS(ms));

  /* insert timer into queue */
  wsfTimerInsert(pTimer, WSF_TIMER_MS_TO_TICKS(ms));
   17e02:	683b      	ldr	r3, [r7, #0]
   17e04:	4a05      	ldr	r2, [pc, #20]	; (17e1c <WsfTimerStartMs+0x24>)
   17e06:	fba2 2303 	umull	r2, r3, r2, r3
   17e0a:	08db      	lsrs	r3, r3, #3
   17e0c:	4619      	mov	r1, r3
   17e0e:	6878      	ldr	r0, [r7, #4]
   17e10:	f7ff ff98 	bl	17d44 <wsfTimerInsert>
}
   17e14:	bf00      	nop
   17e16:	3708      	adds	r7, #8
   17e18:	46bd      	mov	sp, r7
   17e1a:	bd80      	pop	{r7, pc}
   17e1c:	cccccccd 	.word	0xcccccccd

00017e20 <WsfTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerStop(wsfTimer_t *pTimer)
{
   17e20:	b580      	push	{r7, lr}
   17e22:	b082      	sub	sp, #8
   17e24:	af00      	add	r7, sp, #0
   17e26:	6078      	str	r0, [r7, #4]
  WSF_TRACE_INFO1("WsfTimerStop pTimer:0x%x", pTimer);

  /* task schedule lock */
  WsfTaskLock();
   17e28:	f002 fade 	bl	1a3e8 <WsfTaskLock>

  wsfTimerRemove(pTimer);
   17e2c:	6878      	ldr	r0, [r7, #4]
   17e2e:	f7ff ff5f 	bl	17cf0 <wsfTimerRemove>

  /* task schedule unlock */
  WsfTaskUnlock();
   17e32:	f002 fadf 	bl	1a3f4 <WsfTaskUnlock>
}
   17e36:	bf00      	nop
   17e38:	3708      	adds	r7, #8
   17e3a:	46bd      	mov	sp, r7
   17e3c:	bd80      	pop	{r7, pc}
	...

00017e40 <WsfTimerUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTimerUpdate(wsfTimerTicks_t ticks)
{
   17e40:	b580      	push	{r7, lr}
   17e42:	b084      	sub	sp, #16
   17e44:	af00      	add	r7, sp, #0
   17e46:	6078      	str	r0, [r7, #4]
  wsfTimer_t  *pElem;

  /* task schedule lock */
  WsfTaskLock();
   17e48:	f002 face 	bl	1a3e8 <WsfTaskLock>

  pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead;
   17e4c:	4b12      	ldr	r3, [pc, #72]	; (17e98 <WsfTimerUpdate+0x58>)
   17e4e:	681b      	ldr	r3, [r3, #0]
   17e50:	60fb      	str	r3, [r7, #12]

  /* iterate over timer queue */
  while (pElem != NULL)
   17e52:	e017      	b.n	17e84 <WsfTimerUpdate+0x44>
  {
    /* decrement ticks while preventing underflow */
    if (pElem->ticks > ticks)
   17e54:	68fb      	ldr	r3, [r7, #12]
   17e56:	685a      	ldr	r2, [r3, #4]
   17e58:	687b      	ldr	r3, [r7, #4]
   17e5a:	429a      	cmp	r2, r3
   17e5c:	d906      	bls.n	17e6c <WsfTimerUpdate+0x2c>
    {
      pElem->ticks -= ticks;
   17e5e:	68fb      	ldr	r3, [r7, #12]
   17e60:	685a      	ldr	r2, [r3, #4]
   17e62:	687b      	ldr	r3, [r7, #4]
   17e64:	1ad2      	subs	r2, r2, r3
   17e66:	68fb      	ldr	r3, [r7, #12]
   17e68:	605a      	str	r2, [r3, #4]
   17e6a:	e008      	b.n	17e7e <WsfTimerUpdate+0x3e>
    }
    else
    {
      pElem->ticks = 0;
   17e6c:	68fb      	ldr	r3, [r7, #12]
   17e6e:	2200      	movs	r2, #0
   17e70:	605a      	str	r2, [r3, #4]

      /* timer expired; set task for this timer as ready */
      WsfTaskSetReady(pElem->handlerId, WSF_TIMER_EVENT);
   17e72:	68fb      	ldr	r3, [r7, #12]
   17e74:	7a1b      	ldrb	r3, [r3, #8]
   17e76:	2102      	movs	r1, #2
   17e78:	4618      	mov	r0, r3
   17e7a:	f002 fb3d 	bl	1a4f8 <WsfTaskSetReady>
    }

    pElem = pElem->pNext;
   17e7e:	68fb      	ldr	r3, [r7, #12]
   17e80:	681b      	ldr	r3, [r3, #0]
   17e82:	60fb      	str	r3, [r7, #12]
  while (pElem != NULL)
   17e84:	68fb      	ldr	r3, [r7, #12]
   17e86:	2b00      	cmp	r3, #0
   17e88:	d1e4      	bne.n	17e54 <WsfTimerUpdate+0x14>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   17e8a:	f002 fab3 	bl	1a3f4 <WsfTaskUnlock>
}
   17e8e:	bf00      	nop
   17e90:	3710      	adds	r7, #16
   17e92:	46bd      	mov	sp, r7
   17e94:	bd80      	pop	{r7, pc}
   17e96:	bf00      	nop
   17e98:	10006558 	.word	0x10006558

00017e9c <WsfTimerNextExpiration>:
 *
 *  \return The number of ticks until the next timer expiration.
 */
/*************************************************************************************************/
wsfTimerTicks_t WsfTimerNextExpiration(bool_t *pTimerRunning)
{
   17e9c:	b580      	push	{r7, lr}
   17e9e:	b084      	sub	sp, #16
   17ea0:	af00      	add	r7, sp, #0
   17ea2:	6078      	str	r0, [r7, #4]
  wsfTimerTicks_t ticks;

  /* task schedule lock */
  WsfTaskLock();
   17ea4:	f002 faa0 	bl	1a3e8 <WsfTaskLock>

  if (wsfTimerTimerQueue.pHead == NULL)
   17ea8:	4b0b      	ldr	r3, [pc, #44]	; (17ed8 <WsfTimerNextExpiration+0x3c>)
   17eaa:	681b      	ldr	r3, [r3, #0]
   17eac:	2b00      	cmp	r3, #0
   17eae:	d105      	bne.n	17ebc <WsfTimerNextExpiration+0x20>
  {
    *pTimerRunning = FALSE;
   17eb0:	687b      	ldr	r3, [r7, #4]
   17eb2:	2200      	movs	r2, #0
   17eb4:	701a      	strb	r2, [r3, #0]
    ticks = 0;
   17eb6:	2300      	movs	r3, #0
   17eb8:	60fb      	str	r3, [r7, #12]
   17eba:	e006      	b.n	17eca <WsfTimerNextExpiration+0x2e>
  }
  else
  {
    *pTimerRunning = TRUE;
   17ebc:	687b      	ldr	r3, [r7, #4]
   17ebe:	2201      	movs	r2, #1
   17ec0:	701a      	strb	r2, [r3, #0]
    ticks = ((wsfTimer_t *) wsfTimerTimerQueue.pHead)->ticks;
   17ec2:	4b05      	ldr	r3, [pc, #20]	; (17ed8 <WsfTimerNextExpiration+0x3c>)
   17ec4:	681b      	ldr	r3, [r3, #0]
   17ec6:	685b      	ldr	r3, [r3, #4]
   17ec8:	60fb      	str	r3, [r7, #12]
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   17eca:	f002 fa93 	bl	1a3f4 <WsfTaskUnlock>

  return ticks;
   17ece:	68fb      	ldr	r3, [r7, #12]
}
   17ed0:	4618      	mov	r0, r3
   17ed2:	3710      	adds	r7, #16
   17ed4:	46bd      	mov	sp, r7
   17ed6:	bd80      	pop	{r7, pc}
   17ed8:	10006558 	.word	0x10006558

00017edc <WsfTimerServiceExpired>:
 *
 *  \return Pointer to timer or NULL.
 */
/*************************************************************************************************/
wsfTimer_t *WsfTimerServiceExpired(wsfTaskId_t taskId)
{
   17edc:	b580      	push	{r7, lr}
   17ede:	b084      	sub	sp, #16
   17ee0:	af00      	add	r7, sp, #0
   17ee2:	4603      	mov	r3, r0
   17ee4:	71fb      	strb	r3, [r7, #7]
  wsfTimer_t  *pElem;
  wsfTimer_t  *pPrev = NULL;
   17ee6:	2300      	movs	r3, #0
   17ee8:	60fb      	str	r3, [r7, #12]

  /* task schedule lock */
  WsfTaskLock();
   17eea:	f002 fa7d 	bl	1a3e8 <WsfTaskLock>

  /* find expired timers in queue */
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   17eee:	4b0e      	ldr	r3, [pc, #56]	; (17f28 <WsfTimerServiceExpired+0x4c>)
   17ef0:	681b      	ldr	r3, [r3, #0]
   17ef2:	60bb      	str	r3, [r7, #8]
   17ef4:	68bb      	ldr	r3, [r7, #8]
   17ef6:	2b00      	cmp	r3, #0
   17ef8:	d00f      	beq.n	17f1a <WsfTimerServiceExpired+0x3e>
      (pElem->ticks == 0))
   17efa:	68bb      	ldr	r3, [r7, #8]
   17efc:	685b      	ldr	r3, [r3, #4]
  if (((pElem = (wsfTimer_t *) wsfTimerTimerQueue.pHead) != NULL) &&
   17efe:	2b00      	cmp	r3, #0
   17f00:	d10b      	bne.n	17f1a <WsfTimerServiceExpired+0x3e>
  {
    /* remove timer from queue */
    WsfQueueRemove(&wsfTimerTimerQueue, pElem, pPrev);
   17f02:	68fa      	ldr	r2, [r7, #12]
   17f04:	68b9      	ldr	r1, [r7, #8]
   17f06:	4808      	ldr	r0, [pc, #32]	; (17f28 <WsfTimerServiceExpired+0x4c>)
   17f08:	f7ff fe9a 	bl	17c40 <WsfQueueRemove>

    pElem->isStarted = FALSE;
   17f0c:	68bb      	ldr	r3, [r7, #8]
   17f0e:	2200      	movs	r2, #0
   17f10:	725a      	strb	r2, [r3, #9]

    /* task schedule unlock */
    WsfTaskUnlock();
   17f12:	f002 fa6f 	bl	1a3f4 <WsfTaskUnlock>

    WSF_TRACE_INFO1("Timer expired pTimer:0x%x", pElem);

    /* return timer */
    return pElem;
   17f16:	68bb      	ldr	r3, [r7, #8]
   17f18:	e002      	b.n	17f20 <WsfTimerServiceExpired+0x44>
  }

  /* task schedule unlock */
  WsfTaskUnlock();
   17f1a:	f002 fa6b 	bl	1a3f4 <WsfTaskUnlock>

  return NULL;
   17f1e:	2300      	movs	r3, #0
}
   17f20:	4618      	mov	r0, r3
   17f22:	3710      	adds	r7, #16
   17f24:	46bd      	mov	sp, r7
   17f26:	bd80      	pop	{r7, pc}
   17f28:	10006558 	.word	0x10006558

00017f2c <__NVIC_EnableIRQ>:
{
   17f2c:	b480      	push	{r7}
   17f2e:	b083      	sub	sp, #12
   17f30:	af00      	add	r7, sp, #0
   17f32:	4603      	mov	r3, r0
   17f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   17f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17f3a:	2b00      	cmp	r3, #0
   17f3c:	db0b      	blt.n	17f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17f3e:	4909      	ldr	r1, [pc, #36]	; (17f64 <__NVIC_EnableIRQ+0x38>)
   17f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17f44:	095b      	lsrs	r3, r3, #5
   17f46:	79fa      	ldrb	r2, [r7, #7]
   17f48:	f002 021f 	and.w	r2, r2, #31
   17f4c:	2001      	movs	r0, #1
   17f4e:	fa00 f202 	lsl.w	r2, r0, r2
   17f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17f56:	bf00      	nop
   17f58:	370c      	adds	r7, #12
   17f5a:	46bd      	mov	sp, r7
   17f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17f60:	4770      	bx	lr
   17f62:	bf00      	nop
   17f64:	e000e100 	.word	0xe000e100

00017f68 <__NVIC_DisableIRQ>:
{
   17f68:	b480      	push	{r7}
   17f6a:	b083      	sub	sp, #12
   17f6c:	af00      	add	r7, sp, #0
   17f6e:	4603      	mov	r3, r0
   17f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   17f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17f76:	2b00      	cmp	r3, #0
   17f78:	db10      	blt.n	17f9c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17f7a:	490b      	ldr	r1, [pc, #44]	; (17fa8 <__NVIC_DisableIRQ+0x40>)
   17f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17f80:	095b      	lsrs	r3, r3, #5
   17f82:	79fa      	ldrb	r2, [r7, #7]
   17f84:	f002 021f 	and.w	r2, r2, #31
   17f88:	2001      	movs	r0, #1
   17f8a:	fa00 f202 	lsl.w	r2, r0, r2
   17f8e:	3320      	adds	r3, #32
   17f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   17f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17f98:	f3bf 8f6f 	isb	sy
}
   17f9c:	bf00      	nop
   17f9e:	370c      	adds	r7, #12
   17fa0:	46bd      	mov	sp, r7
   17fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   17fa6:	4770      	bx	lr
   17fa8:	e000e100 	.word	0xe000e100

00017fac <error_check>:
// they will be sent there intead.
//
//*****************************************************************************
static void
error_check(uint32_t ui32Status)
{
   17fac:	b580      	push	{r7, lr}
   17fae:	b082      	sub	sp, #8
   17fb0:	af00      	add	r7, sp, #0
   17fb2:	6078      	str	r0, [r7, #4]
    //
    // Don't do anything unless there's an error.
    //
    if (ui32Status)
   17fb4:	687b      	ldr	r3, [r7, #4]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	d00c      	beq.n	17fd4 <error_check+0x28>
    {
        //
        // Set the global error status. If there's an error handler function,
        // call it. Otherwise, just print the error status and wait.
        //
        g_ui32FailingStatus = ui32Status;
   17fba:	4a08      	ldr	r2, [pc, #32]	; (17fdc <error_check+0x30>)
   17fbc:	687b      	ldr	r3, [r7, #4]
   17fbe:	6013      	str	r3, [r2, #0]

        if (g_hciDrvErrorHandler)
   17fc0:	4b07      	ldr	r3, [pc, #28]	; (17fe0 <error_check+0x34>)
   17fc2:	681b      	ldr	r3, [r3, #0]
   17fc4:	2b00      	cmp	r3, #0
   17fc6:	d005      	beq.n	17fd4 <error_check+0x28>
        {
            g_hciDrvErrorHandler(g_ui32FailingStatus);
   17fc8:	4b05      	ldr	r3, [pc, #20]	; (17fe0 <error_check+0x34>)
   17fca:	681b      	ldr	r3, [r3, #0]
   17fcc:	4a03      	ldr	r2, [pc, #12]	; (17fdc <error_check+0x30>)
   17fce:	6812      	ldr	r2, [r2, #0]
   17fd0:	4610      	mov	r0, r2
   17fd2:	4798      	blx	r3
        {
            CRITICAL_PRINT("Error detected: 0x%08x\n", g_ui32FailingStatus);
            CRITICAL_PRINT("BSTATUS: 0x%08x\n", BLEIF->BSTATUS);
        }
    }
}
   17fd4:	bf00      	nop
   17fd6:	3708      	adds	r7, #8
   17fd8:	46bd      	mov	sp, r7
   17fda:	bd80      	pop	{r7, pc}
   17fdc:	10004380 	.word	0x10004380
   17fe0:	1000437c 	.word	0x1000437c

00017fe4 <HciDrvRadioBoot>:
// Boot the radio.
//
//*****************************************************************************
void
HciDrvRadioBoot(bool bColdBoot)
{
   17fe4:	b5b0      	push	{r4, r5, r7, lr}
   17fe6:	b092      	sub	sp, #72	; 0x48
   17fe8:	af00      	add	r7, sp, #0
   17fea:	4603      	mov	r3, r0
   17fec:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32NumXtalRetries = 0;
   17fee:	2300      	movs	r3, #0
   17ff0:	647b      	str	r3, [r7, #68]	; 0x44


    g_ui32NumBytes     = 0;
   17ff2:	4b62      	ldr	r3, [pc, #392]	; (1817c <HciDrvRadioBoot+0x198>)
   17ff4:	2200      	movs	r2, #0
   17ff6:	601a      	str	r2, [r3, #0]
    g_consumed_bytes   = 0;
   17ff8:	4b61      	ldr	r3, [pc, #388]	; (18180 <HciDrvRadioBoot+0x19c>)
   17ffa:	2200      	movs	r2, #0
   17ffc:	601a      	str	r2, [r3, #0]


    //
    // Configure and enable the BLE interface.
    //
    uint32_t ui32Status = AM_HAL_STATUS_FAIL;
   17ffe:	2301      	movs	r3, #1
   18000:	643b      	str	r3, [r7, #64]	; 0x40
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   18002:	e08c      	b.n	1811e <HciDrvRadioBoot+0x13a>
    {
        ERROR_CHECK_VOID(am_hal_ble_initialize(0, &BLE));
   18004:	495f      	ldr	r1, [pc, #380]	; (18184 <HciDrvRadioBoot+0x1a0>)
   18006:	2000      	movs	r0, #0
   18008:	f006 fc80 	bl	1e90c <am_hal_ble_initialize>
   1800c:	63f8      	str	r0, [r7, #60]	; 0x3c
   1800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18010:	2b00      	cmp	r3, #0
   18012:	d003      	beq.n	1801c <HciDrvRadioBoot+0x38>
   18014:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   18016:	f7ff ffc9 	bl	17fac <error_check>
   1801a:	e0ab      	b.n	18174 <HciDrvRadioBoot+0x190>
        ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_ACTIVE));
   1801c:	4b59      	ldr	r3, [pc, #356]	; (18184 <HciDrvRadioBoot+0x1a0>)
   1801e:	681b      	ldr	r3, [r3, #0]
   18020:	2100      	movs	r1, #0
   18022:	4618      	mov	r0, r3
   18024:	f006 fd62 	bl	1eaec <am_hal_ble_power_control>
   18028:	63b8      	str	r0, [r7, #56]	; 0x38
   1802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1802c:	2b00      	cmp	r3, #0
   1802e:	d003      	beq.n	18038 <HciDrvRadioBoot+0x54>
   18030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   18032:	f7ff ffbb 	bl	17fac <error_check>
   18036:	e09d      	b.n	18174 <HciDrvRadioBoot+0x190>

        am_hal_ble_config_t sBleConfig =
   18038:	4b53      	ldr	r3, [pc, #332]	; (18188 <HciDrvRadioBoot+0x1a4>)
   1803a:	f107 0408 	add.w	r4, r7, #8
   1803e:	461d      	mov	r5, r3
   18040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   18044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   18048:	e884 0007 	stmia.w	r4, {r0, r1, r2}

            // Apply the default patches when am_hal_ble_boot() is called.
            .bUseDefaultPatches = true,
        };

        ERROR_CHECK_VOID(am_hal_ble_config(BLE, &sBleConfig));
   1804c:	4b4d      	ldr	r3, [pc, #308]	; (18184 <HciDrvRadioBoot+0x1a0>)
   1804e:	681b      	ldr	r3, [r3, #0]
   18050:	f107 0208 	add.w	r2, r7, #8
   18054:	4611      	mov	r1, r2
   18056:	4618      	mov	r0, r3
   18058:	f006 fcc0 	bl	1e9dc <am_hal_ble_config>
   1805c:	6378      	str	r0, [r7, #52]	; 0x34
   1805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18060:	2b00      	cmp	r3, #0
   18062:	d003      	beq.n	1806c <HciDrvRadioBoot+0x88>
   18064:	6b78      	ldr	r0, [r7, #52]	; 0x34
   18066:	f7ff ffa1 	bl	17fac <error_check>
   1806a:	e083      	b.n	18174 <HciDrvRadioBoot+0x190>
        //
        // Delay 1s for 32768Hz clock stability. This isn't required unless this is
        // our first run immediately after a power-up.
        //
        if ( bColdBoot )
   1806c:	79fb      	ldrb	r3, [r7, #7]
   1806e:	2b00      	cmp	r3, #0
   18070:	d003      	beq.n	1807a <HciDrvRadioBoot+0x96>
        {
            am_util_delay_ms(1000);
   18072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18076:	f004 fc69 	bl	1c94c <am_util_delay_ms>
        }
        //
        // Attempt to boot the radio.
        //
        ui32Status = am_hal_ble_boot(BLE);
   1807a:	4b42      	ldr	r3, [pc, #264]	; (18184 <HciDrvRadioBoot+0x1a0>)
   1807c:	681b      	ldr	r3, [r3, #0]
   1807e:	4618      	mov	r0, r3
   18080:	f007 fc2a 	bl	1f8d8 <am_hal_ble_boot>
   18084:	6438      	str	r0, [r7, #64]	; 0x40

        //
        // Check our status.
        //
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   18086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18088:	2b00      	cmp	r3, #0
   1808a:	d04d      	beq.n	18128 <HciDrvRadioBoot+0x144>
            //
            // If the radio is running, we can exit this loop.
            //
            break;
        }
        else if (ui32Status == AM_HAL_BLE_32K_CLOCK_UNSTABLE)
   1808c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1808e:	4a3f      	ldr	r2, [pc, #252]	; (1818c <HciDrvRadioBoot+0x1a8>)
   18090:	4293      	cmp	r3, r2
   18092:	d124      	bne.n	180de <HciDrvRadioBoot+0xfa>
        {
            //
            // If the radio is running, but the clock looks bad, we can try to
            // restart.
            //
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   18094:	4b3b      	ldr	r3, [pc, #236]	; (18184 <HciDrvRadioBoot+0x1a0>)
   18096:	681b      	ldr	r3, [r3, #0]
   18098:	2101      	movs	r1, #1
   1809a:	4618      	mov	r0, r3
   1809c:	f006 fd26 	bl	1eaec <am_hal_ble_power_control>
   180a0:	6338      	str	r0, [r7, #48]	; 0x30
   180a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   180a4:	2b00      	cmp	r3, #0
   180a6:	d003      	beq.n	180b0 <HciDrvRadioBoot+0xcc>
   180a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   180aa:	f7ff ff7f 	bl	17fac <error_check>
   180ae:	e061      	b.n	18174 <HciDrvRadioBoot+0x190>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   180b0:	4b34      	ldr	r3, [pc, #208]	; (18184 <HciDrvRadioBoot+0x1a0>)
   180b2:	681b      	ldr	r3, [r3, #0]
   180b4:	4618      	mov	r0, r3
   180b6:	f006 fc65 	bl	1e984 <am_hal_ble_deinitialize>
   180ba:	62f8      	str	r0, [r7, #44]	; 0x2c
   180bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   180be:	2b00      	cmp	r3, #0
   180c0:	d003      	beq.n	180ca <HciDrvRadioBoot+0xe6>
   180c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   180c4:	f7ff ff72 	bl	17fac <error_check>
   180c8:	e054      	b.n	18174 <HciDrvRadioBoot+0x190>

            //
            // We won't restart forever. After we hit the maximum number of
            // retries, we'll just return with failure.
            //
            if (ui32NumXtalRetries++ < HCI_DRV_MAX_XTAL_RETRIES)
   180ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   180cc:	1c5a      	adds	r2, r3, #1
   180ce:	647a      	str	r2, [r7, #68]	; 0x44
   180d0:	2b09      	cmp	r3, #9
   180d2:	d84e      	bhi.n	18172 <HciDrvRadioBoot+0x18e>
            {
                am_util_delay_ms(1000);
   180d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   180d8:	f004 fc38 	bl	1c94c <am_util_delay_ms>
   180dc:	e01f      	b.n	1811e <HciDrvRadioBoot+0x13a>
                return;
            }
        }
        else
        {
            ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   180de:	4b29      	ldr	r3, [pc, #164]	; (18184 <HciDrvRadioBoot+0x1a0>)
   180e0:	681b      	ldr	r3, [r3, #0]
   180e2:	2101      	movs	r1, #1
   180e4:	4618      	mov	r0, r3
   180e6:	f006 fd01 	bl	1eaec <am_hal_ble_power_control>
   180ea:	62b8      	str	r0, [r7, #40]	; 0x28
   180ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   180ee:	2b00      	cmp	r3, #0
   180f0:	d003      	beq.n	180fa <HciDrvRadioBoot+0x116>
   180f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   180f4:	f7ff ff5a 	bl	17fac <error_check>
   180f8:	e03c      	b.n	18174 <HciDrvRadioBoot+0x190>
            ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   180fa:	4b22      	ldr	r3, [pc, #136]	; (18184 <HciDrvRadioBoot+0x1a0>)
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	4618      	mov	r0, r3
   18100:	f006 fc40 	bl	1e984 <am_hal_ble_deinitialize>
   18104:	6278      	str	r0, [r7, #36]	; 0x24
   18106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18108:	2b00      	cmp	r3, #0
   1810a:	d003      	beq.n	18114 <HciDrvRadioBoot+0x130>
   1810c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1810e:	f7ff ff4d 	bl	17fac <error_check>
   18112:	e02f      	b.n	18174 <HciDrvRadioBoot+0x190>
            //
            // If the radio failed for some reason other than 32K Clock
            // instability, we should just report the failure and return.
            //
            error_check(ui32Status);
   18114:	6c38      	ldr	r0, [r7, #64]	; 0x40
   18116:	f7ff ff49 	bl	17fac <error_check>
            return;
   1811a:	bf00      	nop
   1811c:	e02a      	b.n	18174 <HciDrvRadioBoot+0x190>
    while (ui32Status != AM_HAL_STATUS_SUCCESS)
   1811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18120:	2b00      	cmp	r3, #0
   18122:	f47f af6f 	bne.w	18004 <HciDrvRadioBoot+0x20>
   18126:	e000      	b.n	1812a <HciDrvRadioBoot+0x146>
            break;
   18128:	bf00      	nop
    }

    //
    // Set the BLE TX Output power to 0dBm.
    //
    am_hal_ble_tx_power_set(BLE, 0x8);
   1812a:	4b16      	ldr	r3, [pc, #88]	; (18184 <HciDrvRadioBoot+0x1a0>)
   1812c:	681b      	ldr	r3, [r3, #0]
   1812e:	2108      	movs	r1, #8
   18130:	4618      	mov	r0, r3
   18132:	f007 fca5 	bl	1fa80 <am_hal_ble_tx_power_set>
    }
#endif

#else

    am_hal_ble_int_clear(BLE, (AM_HAL_BLE_INT_CMDCMP |
   18136:	4b13      	ldr	r3, [pc, #76]	; (18184 <HciDrvRadioBoot+0x1a0>)
   18138:	681b      	ldr	r3, [r3, #0]
   1813a:	f240 2181 	movw	r1, #641	; 0x281
   1813e:	4618      	mov	r0, r3
   18140:	f007 f8ae 	bl	1f2a0 <am_hal_ble_int_clear>
                               AM_HAL_BLE_INT_DCMP |
                               AM_HAL_BLE_INT_BLECIRQ));

    am_hal_ble_int_enable(BLE, (AM_HAL_BLE_INT_CMDCMP |
   18144:	4b0f      	ldr	r3, [pc, #60]	; (18184 <HciDrvRadioBoot+0x1a0>)
   18146:	681b      	ldr	r3, [r3, #0]
   18148:	f240 2181 	movw	r1, #641	; 0x281
   1814c:	4618      	mov	r0, r3
   1814e:	f007 f879 	bl	1f244 <am_hal_ble_int_enable>
#endif

    CRITICAL_PRINT("INTEN:  %d\n", BLEIF->INTEN_b.BLECSSTAT);
    CRITICAL_PRINT("INTENREG:  %d\n", BLEIF->INTEN);

    NVIC_EnableIRQ(BLE_IRQn);
   18152:	200c      	movs	r0, #12
   18154:	f7ff feea 	bl	17f2c <__NVIC_EnableIRQ>

    //
    // Initialize a queue to help us keep track of HCI write buffers.
    //
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   18158:	f44f 6302 	mov.w	r3, #2080	; 0x820
   1815c:	f44f 7282 	mov.w	r2, #260	; 0x104
   18160:	490b      	ldr	r1, [pc, #44]	; (18190 <HciDrvRadioBoot+0x1ac>)
   18162:	480c      	ldr	r0, [pc, #48]	; (18194 <HciDrvRadioBoot+0x1b0>)
   18164:	f008 fade 	bl	20724 <am_hal_queue_init>

    //
    // Reset the RX interrupt counter.
    //
    g_ui32InterruptsSeen = 0;
   18168:	4b0b      	ldr	r3, [pc, #44]	; (18198 <HciDrvRadioBoot+0x1b4>)
   1816a:	2200      	movs	r2, #0
   1816c:	601a      	str	r2, [r3, #0]

    return;
   1816e:	bf00      	nop
   18170:	e000      	b.n	18174 <HciDrvRadioBoot+0x190>
                return;
   18172:	bf00      	nop
}
   18174:	3748      	adds	r7, #72	; 0x48
   18176:	46bd      	mov	sp, r7
   18178:	bdb0      	pop	{r4, r5, r7, pc}
   1817a:	bf00      	nop
   1817c:	10004370 	.word	0x10004370
   18180:	10004374 	.word	0x10004374
   18184:	10006ea8 	.word	0x10006ea8
   18188:	00021cf4 	.word	0x00021cf4
   1818c:	0800000b 	.word	0x0800000b
   18190:	10006688 	.word	0x10006688
   18194:	10006560 	.word	0x10006560
   18198:	10004378 	.word	0x10004378

0001819c <HciDrvRadioShutdown>:
// Shut down the BLE core.
//
//*****************************************************************************
void
HciDrvRadioShutdown(void)
{
   1819c:	b580      	push	{r7, lr}
   1819e:	b082      	sub	sp, #8
   181a0:	af00      	add	r7, sp, #0
    BLE_HEARTBEAT_STOP();
   181a2:	4819      	ldr	r0, [pc, #100]	; (18208 <HciDrvRadioShutdown+0x6c>)
   181a4:	f7ff fe3c 	bl	17e20 <WsfTimerStop>

    NVIC_DisableIRQ(BLE_IRQn);
   181a8:	200c      	movs	r0, #12
   181aa:	f7ff fedd 	bl	17f68 <__NVIC_DisableIRQ>

    ERROR_CHECK_VOID(am_hal_ble_power_control(BLE, AM_HAL_BLE_POWER_OFF));
   181ae:	4b17      	ldr	r3, [pc, #92]	; (1820c <HciDrvRadioShutdown+0x70>)
   181b0:	681b      	ldr	r3, [r3, #0]
   181b2:	2101      	movs	r1, #1
   181b4:	4618      	mov	r0, r3
   181b6:	f006 fc99 	bl	1eaec <am_hal_ble_power_control>
   181ba:	6078      	str	r0, [r7, #4]
   181bc:	687b      	ldr	r3, [r7, #4]
   181be:	2b00      	cmp	r3, #0
   181c0:	d003      	beq.n	181ca <HciDrvRadioShutdown+0x2e>
   181c2:	6878      	ldr	r0, [r7, #4]
   181c4:	f7ff fef2 	bl	17fac <error_check>
   181c8:	e01a      	b.n	18200 <HciDrvRadioShutdown+0x64>

    while ( PWRCTRL->DEVPWREN_b.PWRBLEL );
   181ca:	bf00      	nop
   181cc:	4b10      	ldr	r3, [pc, #64]	; (18210 <HciDrvRadioShutdown+0x74>)
   181ce:	689b      	ldr	r3, [r3, #8]
   181d0:	f3c3 3340 	ubfx	r3, r3, #13, #1
   181d4:	b2db      	uxtb	r3, r3
   181d6:	2b00      	cmp	r3, #0
   181d8:	d1f8      	bne.n	181cc <HciDrvRadioShutdown+0x30>

    ERROR_CHECK_VOID(am_hal_ble_deinitialize(BLE));
   181da:	4b0c      	ldr	r3, [pc, #48]	; (1820c <HciDrvRadioShutdown+0x70>)
   181dc:	681b      	ldr	r3, [r3, #0]
   181de:	4618      	mov	r0, r3
   181e0:	f006 fbd0 	bl	1e984 <am_hal_ble_deinitialize>
   181e4:	6038      	str	r0, [r7, #0]
   181e6:	683b      	ldr	r3, [r7, #0]
   181e8:	2b00      	cmp	r3, #0
   181ea:	d003      	beq.n	181f4 <HciDrvRadioShutdown+0x58>
   181ec:	6838      	ldr	r0, [r7, #0]
   181ee:	f7ff fedd 	bl	17fac <error_check>
   181f2:	e005      	b.n	18200 <HciDrvRadioShutdown+0x64>

    g_ui32NumBytes   = 0;
   181f4:	4b07      	ldr	r3, [pc, #28]	; (18214 <HciDrvRadioShutdown+0x78>)
   181f6:	2200      	movs	r2, #0
   181f8:	601a      	str	r2, [r3, #0]
    g_consumed_bytes = 0;
   181fa:	4b07      	ldr	r3, [pc, #28]	; (18218 <HciDrvRadioShutdown+0x7c>)
   181fc:	2200      	movs	r2, #0
   181fe:	601a      	str	r2, [r3, #0]
}
   18200:	3708      	adds	r7, #8
   18202:	46bd      	mov	sp, r7
   18204:	bd80      	pop	{r7, pc}
   18206:	bf00      	nop
   18208:	10006578 	.word	0x10006578
   1820c:	10006ea8 	.word	0x10006ea8
   18210:	40021000 	.word	0x40021000
   18214:	10004370 	.word	0x10004370
   18218:	10004374 	.word	0x10004374

0001821c <hciDrvWrite>:
// Internally, the Cordio BLE stack will allocate memory for an HCI message,
//
//*****************************************************************************
uint16_t
hciDrvWrite(uint8_t type, uint16_t len, uint8_t *pData)
{
   1821c:	b580      	push	{r7, lr}
   1821e:	b086      	sub	sp, #24
   18220:	af00      	add	r7, sp, #0
   18222:	4603      	mov	r3, r0
   18224:	603a      	str	r2, [r7, #0]
   18226:	71fb      	strb	r3, [r7, #7]
   18228:	460b      	mov	r3, r1
   1822a:	80bb      	strh	r3, [r7, #4]


    //
    // Check to see if we still have buffer space.
    //
    if (am_hal_queue_full(&g_sWriteQueue))
   1822c:	4b24      	ldr	r3, [pc, #144]	; (182c0 <hciDrvWrite+0xa4>)
   1822e:	689a      	ldr	r2, [r3, #8]
   18230:	4b23      	ldr	r3, [pc, #140]	; (182c0 <hciDrvWrite+0xa4>)
   18232:	68db      	ldr	r3, [r3, #12]
   18234:	429a      	cmp	r2, r3
   18236:	d105      	bne.n	18244 <hciDrvWrite+0x28>
    {
        CRITICAL_PRINT("ERROR: Ran out of HCI transmit queue slots.\n");
        ERROR_RETURN(HCI_DRV_TRANSMIT_QUEUE_FULL, len);
   18238:	f04f 6010 	mov.w	r0, #150994944	; 0x9000000
   1823c:	f7ff feb6 	bl	17fac <error_check>
   18240:	88bb      	ldrh	r3, [r7, #4]
   18242:	e038      	b.n	182b6 <hciDrvWrite+0x9a>
    }

    if (len > (HCI_DRV_MAX_TX_PACKET-1))  // comparison compensates for the type byte at index 0.
   18244:	88bb      	ldrh	r3, [r7, #4]
   18246:	2bff      	cmp	r3, #255	; 0xff
   18248:	d904      	bls.n	18254 <hciDrvWrite+0x38>
    {
        CRITICAL_PRINT("ERROR: Trying to send an HCI packet larger than the hci driver buffer size (needs %d bytes of space).\n",
                       len);

        ERROR_RETURN(HCI_DRV_TX_PACKET_TOO_LARGE, len);
   1824a:	481e      	ldr	r0, [pc, #120]	; (182c4 <hciDrvWrite+0xa8>)
   1824c:	f7ff feae 	bl	17fac <error_check>
   18250:	88bb      	ldrh	r3, [r7, #4]
   18252:	e030      	b.n	182b6 <hciDrvWrite+0x9a>
    }

    //
    // Get a pointer to the next item in the queue.
    //
    psWriteBuffer = am_hal_queue_next_slot(&g_sWriteQueue);
   18254:	4b1a      	ldr	r3, [pc, #104]	; (182c0 <hciDrvWrite+0xa4>)
   18256:	695a      	ldr	r2, [r3, #20]
   18258:	4b19      	ldr	r3, [pc, #100]	; (182c0 <hciDrvWrite+0xa4>)
   1825a:	681b      	ldr	r3, [r3, #0]
   1825c:	4413      	add	r3, r2
   1825e:	613b      	str	r3, [r7, #16]

    //
    // Set all of the fields in the hci write structure.
    //
    psWriteBuffer->ui32Length = len + 1;
   18260:	88bb      	ldrh	r3, [r7, #4]
   18262:	3301      	adds	r3, #1
   18264:	461a      	mov	r2, r3
   18266:	693b      	ldr	r3, [r7, #16]
   18268:	601a      	str	r2, [r3, #0]

    pui8Wptr = (uint8_t *) psWriteBuffer->pui32Data;
   1826a:	693b      	ldr	r3, [r7, #16]
   1826c:	3304      	adds	r3, #4
   1826e:	60fb      	str	r3, [r7, #12]

    *pui8Wptr++ = type;
   18270:	68fb      	ldr	r3, [r7, #12]
   18272:	1c5a      	adds	r2, r3, #1
   18274:	60fa      	str	r2, [r7, #12]
   18276:	79fa      	ldrb	r2, [r7, #7]
   18278:	701a      	strb	r2, [r3, #0]

    for (uint32_t i = 0; i < len; i++)
   1827a:	2300      	movs	r3, #0
   1827c:	617b      	str	r3, [r7, #20]
   1827e:	e00a      	b.n	18296 <hciDrvWrite+0x7a>
    {
        pui8Wptr[i] = pData[i];
   18280:	68fa      	ldr	r2, [r7, #12]
   18282:	697b      	ldr	r3, [r7, #20]
   18284:	4413      	add	r3, r2
   18286:	6839      	ldr	r1, [r7, #0]
   18288:	697a      	ldr	r2, [r7, #20]
   1828a:	440a      	add	r2, r1
   1828c:	7812      	ldrb	r2, [r2, #0]
   1828e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < len; i++)
   18290:	697b      	ldr	r3, [r7, #20]
   18292:	3301      	adds	r3, #1
   18294:	617b      	str	r3, [r7, #20]
   18296:	88ba      	ldrh	r2, [r7, #4]
   18298:	697b      	ldr	r3, [r7, #20]
   1829a:	429a      	cmp	r2, r3
   1829c:	d8f0      	bhi.n	18280 <hciDrvWrite+0x64>
    }

    //
    // Advance the queue.
    //
    am_hal_queue_item_add(&g_sWriteQueue, 0, 1);
   1829e:	2201      	movs	r2, #1
   182a0:	2100      	movs	r1, #0
   182a2:	4807      	ldr	r0, [pc, #28]	; (182c0 <hciDrvWrite+0xa4>)
   182a4:	f008 fa4a 	bl	2073c <am_hal_queue_item_add>

#else
    //
    // Send an event to the BLE transfer handler function.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   182a8:	4b07      	ldr	r3, [pc, #28]	; (182c8 <hciDrvWrite+0xac>)
   182aa:	781b      	ldrb	r3, [r3, #0]
   182ac:	2101      	movs	r1, #1
   182ae:	4618      	mov	r0, r3
   182b0:	f002 f8f2 	bl	1a498 <WsfSetEvent>
            HciVendorSpecificCmd(0xFC32, 6, g_BLEMacAddress);
        }
    }
#endif

    return len;
   182b4:	88bb      	ldrh	r3, [r7, #4]
}
   182b6:	4618      	mov	r0, r3
   182b8:	3718      	adds	r7, #24
   182ba:	46bd      	mov	sp, r7
   182bc:	bd80      	pop	{r7, pc}
   182be:	bf00      	nop
   182c0:	10006560 	.word	0x10006560
   182c4:	09000001 	.word	0x09000001
   182c8:	1000436c 	.word	0x1000436c

000182cc <HciDrvHandlerInit>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvHandlerInit(wsfHandlerId_t handlerId)
{
   182cc:	b480      	push	{r7}
   182ce:	b083      	sub	sp, #12
   182d0:	af00      	add	r7, sp, #0
   182d2:	4603      	mov	r3, r0
   182d4:	71fb      	strb	r3, [r7, #7]
    g_HciDrvHandleID = handlerId;
   182d6:	4a0a      	ldr	r2, [pc, #40]	; (18300 <HciDrvHandlerInit+0x34>)
   182d8:	79fb      	ldrb	r3, [r7, #7]
   182da:	7013      	strb	r3, [r2, #0]

    g_HeartBeatTimer.handlerId = handlerId;
   182dc:	4a09      	ldr	r2, [pc, #36]	; (18304 <HciDrvHandlerInit+0x38>)
   182de:	79fb      	ldrb	r3, [r7, #7]
   182e0:	7213      	strb	r3, [r2, #8]
    g_HeartBeatTimer.msg.event = BLE_HEARTBEAT_EVENT;
   182e2:	4b08      	ldr	r3, [pc, #32]	; (18304 <HciDrvHandlerInit+0x38>)
   182e4:	2202      	movs	r2, #2
   182e6:	731a      	strb	r2, [r3, #12]

    g_WakeTimer.handlerId = handlerId;
   182e8:	4a07      	ldr	r2, [pc, #28]	; (18308 <HciDrvHandlerInit+0x3c>)
   182ea:	79fb      	ldrb	r3, [r7, #7]
   182ec:	7213      	strb	r3, [r2, #8]
    g_WakeTimer.msg.event = BLE_SET_WAKEUP;
   182ee:	4b06      	ldr	r3, [pc, #24]	; (18308 <HciDrvHandlerInit+0x3c>)
   182f0:	2203      	movs	r2, #3
   182f2:	731a      	strb	r2, [r3, #12]
}
   182f4:	bf00      	nop
   182f6:	370c      	adds	r7, #12
   182f8:	46bd      	mov	sp, r7
   182fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   182fe:	4770      	bx	lr
   18300:	1000436c 	.word	0x1000436c
   18304:	10006578 	.word	0x10006578
   18308:	10006eac 	.word	0x10006eac

0001830c <HciDrvIntService>:
//     HciDrvHandler(handlerId);
//
//*****************************************************************************
void
HciDrvIntService(void)
{
   1830c:	b580      	push	{r7, lr}
   1830e:	b082      	sub	sp, #8
   18310:	af00      	add	r7, sp, #0
#endif

    //
    // Read and clear the interrupt status.
    //
    uint32_t ui32Status = am_hal_ble_int_status(BLE, true);
   18312:	4b0e      	ldr	r3, [pc, #56]	; (1834c <HciDrvIntService+0x40>)
   18314:	681b      	ldr	r3, [r3, #0]
   18316:	2101      	movs	r1, #1
   18318:	4618      	mov	r0, r3
   1831a:	f006 ffb3 	bl	1f284 <am_hal_ble_int_status>
   1831e:	6078      	str	r0, [r7, #4]
    am_hal_ble_int_clear(BLE, ui32Status);
   18320:	4b0a      	ldr	r3, [pc, #40]	; (1834c <HciDrvIntService+0x40>)
   18322:	681b      	ldr	r3, [r3, #0]
   18324:	6879      	ldr	r1, [r7, #4]
   18326:	4618      	mov	r0, r3
   18328:	f006 ffba 	bl	1f2a0 <am_hal_ble_int_clear>
#else
    //
    // Advance an event counter to make sure we're keeping track of edges
    // correctly.
    //
    g_ui32InterruptsSeen++;
   1832c:	4b08      	ldr	r3, [pc, #32]	; (18350 <HciDrvIntService+0x44>)
   1832e:	681b      	ldr	r3, [r3, #0]
   18330:	3301      	adds	r3, #1
   18332:	4a07      	ldr	r2, [pc, #28]	; (18350 <HciDrvIntService+0x44>)
   18334:	6013      	str	r3, [r2, #0]

    //
    // Send an event to get processed in the HCI handler.
    //
    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   18336:	4b07      	ldr	r3, [pc, #28]	; (18354 <HciDrvIntService+0x48>)
   18338:	781b      	ldrb	r3, [r3, #0]
   1833a:	2101      	movs	r1, #1
   1833c:	4618      	mov	r0, r3
   1833e:	f002 f8ab 	bl	1a498 <WsfSetEvent>

#if AM_DEBUG_BLE_TIMING
    am_hal_gpio_state_write(11, AM_HAL_GPIO_OUTPUT_CLEAR);
#endif

}
   18342:	bf00      	nop
   18344:	3708      	adds	r7, #8
   18346:	46bd      	mov	sp, r7
   18348:	bd80      	pop	{r7, pc}
   1834a:	bf00      	nop
   1834c:	10006ea8 	.word	0x10006ea8
   18350:	10004378 	.word	0x10004378
   18354:	1000436c 	.word	0x1000436c

00018358 <HciDrvHandler>:
// correct order.
//
//*****************************************************************************
void
HciDrvHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   18358:	b580      	push	{r7, lr}
   1835a:	b08a      	sub	sp, #40	; 0x28
   1835c:	af00      	add	r7, sp, #0
   1835e:	4603      	mov	r3, r0
   18360:	6039      	str	r1, [r7, #0]
   18362:	71fb      	strb	r3, [r7, #7]
    uint32_t ui32ErrorStatus, ui32TxRetries = 0;
   18364:	2300      	movs	r3, #0
   18366:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t ui32NumHciTransactions = 0;
   18368:	2300      	movs	r3, #0
   1836a:	623b      	str	r3, [r7, #32]
    uint32_t read_hci_packet_count = 0;
   1836c:	2300      	movs	r3, #0
   1836e:	61fb      	str	r3, [r7, #28]
    // handle this command without issue. If it doesn't acknowledge the
    // command, we will eventually get an HCI command timeout error, which will
    // alert us to the fact that the BLE core has become unresponsive in
    // general.
    //
    if (pMsg->event == BLE_HEARTBEAT_EVENT)
   18370:	683b      	ldr	r3, [r7, #0]
   18372:	789b      	ldrb	r3, [r3, #2]
   18374:	2b02      	cmp	r3, #2
   18376:	d107      	bne.n	18388 <HciDrvHandler+0x30>
    {
        HciReadLocalVerInfoCmd();
   18378:	f7fc f99b 	bl	146b2 <HciReadLocalVerInfoCmd>
        BLE_HEARTBEAT_START();
   1837c:	f242 7110 	movw	r1, #10000	; 0x2710
   18380:	4888      	ldr	r0, [pc, #544]	; (185a4 <HciDrvHandler+0x24c>)
   18382:	f7ff fd39 	bl	17df8 <WsfTimerStartMs>
        return;
   18386:	e109      	b.n	1859c <HciDrvHandler+0x244>

    //
    // Check to see if we read any bytes over the HCI interface that we haven't
    // already sent to the BLE stack.
    //
    if (g_ui32NumBytes > g_consumed_bytes)
   18388:	4b87      	ldr	r3, [pc, #540]	; (185a8 <HciDrvHandler+0x250>)
   1838a:	681a      	ldr	r2, [r3, #0]
   1838c:	4b87      	ldr	r3, [pc, #540]	; (185ac <HciDrvHandler+0x254>)
   1838e:	681b      	ldr	r3, [r3, #0]
   18390:	429a      	cmp	r2, r3
   18392:	f240 80e7 	bls.w	18564 <HciDrvHandler+0x20c>
    {
        //
        // If we have any bytes saved, we should send them to the BLE stack
        // now.
        //
        g_consumed_bytes += hciTrSerialRxIncoming(g_pui8ReadBuffer + g_consumed_bytes,
   18396:	4b86      	ldr	r3, [pc, #536]	; (185b0 <HciDrvHandler+0x258>)
   18398:	681a      	ldr	r2, [r3, #0]
   1839a:	4b84      	ldr	r3, [pc, #528]	; (185ac <HciDrvHandler+0x254>)
   1839c:	681b      	ldr	r3, [r3, #0]
   1839e:	18d0      	adds	r0, r2, r3
   183a0:	4b81      	ldr	r3, [pc, #516]	; (185a8 <HciDrvHandler+0x250>)
   183a2:	681b      	ldr	r3, [r3, #0]
   183a4:	b29a      	uxth	r2, r3
   183a6:	4b81      	ldr	r3, [pc, #516]	; (185ac <HciDrvHandler+0x254>)
   183a8:	681b      	ldr	r3, [r3, #0]
   183aa:	b29b      	uxth	r3, r3
   183ac:	1ad3      	subs	r3, r2, r3
   183ae:	b29b      	uxth	r3, r3
   183b0:	4619      	mov	r1, r3
   183b2:	f7fe feff 	bl	171b4 <hciTrSerialRxIncoming>
   183b6:	4603      	mov	r3, r0
   183b8:	461a      	mov	r2, r3
   183ba:	4b7c      	ldr	r3, [pc, #496]	; (185ac <HciDrvHandler+0x254>)
   183bc:	681b      	ldr	r3, [r3, #0]
   183be:	4413      	add	r3, r2
   183c0:	4a7a      	ldr	r2, [pc, #488]	; (185ac <HciDrvHandler+0x254>)
   183c2:	6013      	str	r3, [r2, #0]
                                                  g_ui32NumBytes - g_consumed_bytes);

        //
        // If the stack doesn't accept all of the bytes we had,
        //
        if (g_consumed_bytes != g_ui32NumBytes)
   183c4:	4b79      	ldr	r3, [pc, #484]	; (185ac <HciDrvHandler+0x254>)
   183c6:	681a      	ldr	r2, [r3, #0]
   183c8:	4b77      	ldr	r3, [pc, #476]	; (185a8 <HciDrvHandler+0x250>)
   183ca:	681b      	ldr	r3, [r3, #0]
   183cc:	429a      	cmp	r2, r3
   183ce:	d006      	beq.n	183de <HciDrvHandler+0x86>
        {
            WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   183d0:	4b78      	ldr	r3, [pc, #480]	; (185b4 <HciDrvHandler+0x25c>)
   183d2:	781b      	ldrb	r3, [r3, #0]
   183d4:	2101      	movs	r1, #1
   183d6:	4618      	mov	r0, r3
   183d8:	f002 f85e 	bl	1a498 <WsfSetEvent>
            return;
   183dc:	e0de      	b.n	1859c <HciDrvHandler+0x244>
        }
        else
        {
            g_ui32NumBytes   = 0;
   183de:	4b72      	ldr	r3, [pc, #456]	; (185a8 <HciDrvHandler+0x250>)
   183e0:	2200      	movs	r2, #0
   183e2:	601a      	str	r2, [r3, #0]
            g_consumed_bytes = 0;
   183e4:	4b71      	ldr	r3, [pc, #452]	; (185ac <HciDrvHandler+0x254>)
   183e6:	2200      	movs	r2, #0
   183e8:	601a      	str	r2, [r3, #0]

    //
    // Loop indefinitely, checking to see if there are still tranfsers we need
    // to complete.
    //
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   183ea:	e0bb      	b.n	18564 <HciDrvHandler+0x20c>
    {
        //
        // Figure out what kind of transfer the BLE core will accept.
        //
        if ( BLE_IRQ_CHECK() )
   183ec:	4b72      	ldr	r3, [pc, #456]	; (185b8 <HciDrvHandler+0x260>)
   183ee:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   183f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   183f6:	b2db      	uxtb	r3, r3
   183f8:	2b00      	cmp	r3, #0
   183fa:	d07b      	beq.n	184f4 <HciDrvHandler+0x19c>
        {
            uint32_t ui32OldInterruptsSeen = g_ui32InterruptsSeen;
   183fc:	4b6f      	ldr	r3, [pc, #444]	; (185bc <HciDrvHandler+0x264>)
   183fe:	681b      	ldr	r3, [r3, #0]
   18400:	60fb      	str	r3, [r7, #12]

            am_hal_debug_gpio_set(BLE_DEBUG_TRACE_02);

            BLE_HEARTBEAT_RESTART();
   18402:	4868      	ldr	r0, [pc, #416]	; (185a4 <HciDrvHandler+0x24c>)
   18404:	f7ff fd0c 	bl	17e20 <WsfTimerStop>
   18408:	f242 7110 	movw	r1, #10000	; 0x2710
   1840c:	4865      	ldr	r0, [pc, #404]	; (185a4 <HciDrvHandler+0x24c>)
   1840e:	f7ff fcf3 	bl	17df8 <WsfTimerStartMs>

            //
            // Is the BLE core asking for a read? If so, do that now.
            //
            g_ui32NumBytes = 0;
   18412:	4b65      	ldr	r3, [pc, #404]	; (185a8 <HciDrvHandler+0x250>)
   18414:	2200      	movs	r2, #0
   18416:	601a      	str	r2, [r3, #0]
            ui32ErrorStatus = am_hal_ble_blocking_hci_read(BLE, (uint32_t*)g_pui32ReadBuffer, &g_ui32NumBytes);
   18418:	4b69      	ldr	r3, [pc, #420]	; (185c0 <HciDrvHandler+0x268>)
   1841a:	681b      	ldr	r3, [r3, #0]
   1841c:	4a62      	ldr	r2, [pc, #392]	; (185a8 <HciDrvHandler+0x250>)
   1841e:	4969      	ldr	r1, [pc, #420]	; (185c4 <HciDrvHandler+0x26c>)
   18420:	4618      	mov	r0, r3
   18422:	f006 fceb 	bl	1edfc <am_hal_ble_blocking_hci_read>
   18426:	6138      	str	r0, [r7, #16]

            if (g_ui32NumBytes > HCI_DRV_MAX_RX_PACKET)
   18428:	4b5f      	ldr	r3, [pc, #380]	; (185a8 <HciDrvHandler+0x250>)
   1842a:	681b      	ldr	r3, [r3, #0]
   1842c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   18430:	d905      	bls.n	1843e <HciDrvHandler+0xe6>
            {
                CRITICAL_PRINT("ERROR: Trying to receive an HCI packet larger than the hci driver buffer size (needs %d bytes of space).",
                               g_ui32NumBytes);

                ERROR_CHECK_VOID(HCI_DRV_RX_PACKET_TOO_LARGE);
   18432:	4b65      	ldr	r3, [pc, #404]	; (185c8 <HciDrvHandler+0x270>)
   18434:	60bb      	str	r3, [r7, #8]
   18436:	68b8      	ldr	r0, [r7, #8]
   18438:	f7ff fdb8 	bl	17fac <error_check>
   1843c:	e0ae      	b.n	1859c <HciDrvHandler+0x244>
            }

            if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1843e:	693b      	ldr	r3, [r7, #16]
   18440:	2b00      	cmp	r3, #0
   18442:	d13d      	bne.n	184c0 <HciDrvHandler+0x168>
                // If the read succeeded, we need to wait for the IRQ signal to
                // go back down. If we don't we might inadvertently try to read
                // the same packet twice.
                //
                uint32_t ui32IRQRetries;
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   18444:	2300      	movs	r3, #0
   18446:	61bb      	str	r3, [r7, #24]
   18448:	e012      	b.n	18470 <HciDrvHandler+0x118>
                {
                    if (BLE_IRQ_CHECK() == 0 || g_ui32InterruptsSeen != ui32OldInterruptsSeen)
   1844a:	4b5b      	ldr	r3, [pc, #364]	; (185b8 <HciDrvHandler+0x260>)
   1844c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   18450:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   18454:	b2db      	uxtb	r3, r3
   18456:	2b00      	cmp	r3, #0
   18458:	d00e      	beq.n	18478 <HciDrvHandler+0x120>
   1845a:	4b58      	ldr	r3, [pc, #352]	; (185bc <HciDrvHandler+0x264>)
   1845c:	681a      	ldr	r2, [r3, #0]
   1845e:	68fb      	ldr	r3, [r7, #12]
   18460:	429a      	cmp	r2, r3
   18462:	d109      	bne.n	18478 <HciDrvHandler+0x120>
                    {
                        break;
                    }

                    am_util_delay_us(1);
   18464:	2001      	movs	r0, #1
   18466:	f004 fa8f 	bl	1c988 <am_util_delay_us>
                for (ui32IRQRetries = 0; ui32IRQRetries < HCI_DRV_MAX_IRQ_TIMEOUT; ui32IRQRetries++)
   1846a:	69bb      	ldr	r3, [r7, #24]
   1846c:	3301      	adds	r3, #1
   1846e:	61bb      	str	r3, [r7, #24]
   18470:	69bb      	ldr	r3, [r7, #24]
   18472:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   18476:	d3e8      	bcc.n	1844a <HciDrvHandler+0xf2>
                //
                // Pass the data along to the stack. The stack should be able
                // to read as much data as we send it.  If it can't, we need to
                // know that.
                //
                g_consumed_bytes = hciTrSerialRxIncoming(g_pui8ReadBuffer, g_ui32NumBytes);
   18478:	4b4d      	ldr	r3, [pc, #308]	; (185b0 <HciDrvHandler+0x258>)
   1847a:	681a      	ldr	r2, [r3, #0]
   1847c:	4b4a      	ldr	r3, [pc, #296]	; (185a8 <HciDrvHandler+0x250>)
   1847e:	681b      	ldr	r3, [r3, #0]
   18480:	b29b      	uxth	r3, r3
   18482:	4619      	mov	r1, r3
   18484:	4610      	mov	r0, r2
   18486:	f7fe fe95 	bl	171b4 <hciTrSerialRxIncoming>
   1848a:	4603      	mov	r3, r0
   1848c:	461a      	mov	r2, r3
   1848e:	4b47      	ldr	r3, [pc, #284]	; (185ac <HciDrvHandler+0x254>)
   18490:	601a      	str	r2, [r3, #0]

                if (g_consumed_bytes != g_ui32NumBytes)
   18492:	4b46      	ldr	r3, [pc, #280]	; (185ac <HciDrvHandler+0x254>)
   18494:	681a      	ldr	r2, [r3, #0]
   18496:	4b44      	ldr	r3, [pc, #272]	; (185a8 <HciDrvHandler+0x250>)
   18498:	681b      	ldr	r3, [r3, #0]
   1849a:	429a      	cmp	r2, r3
   1849c:	d006      	beq.n	184ac <HciDrvHandler+0x154>
                {

                    // need to come back again
                    WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   1849e:	4b45      	ldr	r3, [pc, #276]	; (185b4 <HciDrvHandler+0x25c>)
   184a0:	781b      	ldrb	r3, [r3, #0]
   184a2:	2101      	movs	r1, #1
   184a4:	4618      	mov	r0, r3
   184a6:	f001 fff7 	bl	1a498 <WsfSetEvent>
                    // take a break now

                    // worst case disable BLE_IRQ
                    break;
   184aa:	e065      	b.n	18578 <HciDrvHandler+0x220>
                }

                g_ui32NumBytes   = 0;
   184ac:	4b3e      	ldr	r3, [pc, #248]	; (185a8 <HciDrvHandler+0x250>)
   184ae:	2200      	movs	r2, #0
   184b0:	601a      	str	r2, [r3, #0]
                g_consumed_bytes = 0;
   184b2:	4b3e      	ldr	r3, [pc, #248]	; (185ac <HciDrvHandler+0x254>)
   184b4:	2200      	movs	r2, #0
   184b6:	601a      	str	r2, [r3, #0]

                read_hci_packet_count++;
   184b8:	69fb      	ldr	r3, [r7, #28]
   184ba:	3301      	adds	r3, #1
   184bc:	61fb      	str	r3, [r7, #28]
   184be:	e00f      	b.n	184e0 <HciDrvHandler+0x188>
                // fail.
                //
                CRITICAL_PRINT("HCI READ failed with status %d. Try recording with a logic analyzer to catch the error.\n",
                               ui32ErrorStatus);

                ERROR_RECOVER(ui32ErrorStatus);
   184c0:	693b      	ldr	r3, [r7, #16]
   184c2:	2b00      	cmp	r3, #0
   184c4:	d00c      	beq.n	184e0 <HciDrvHandler+0x188>
   184c6:	6938      	ldr	r0, [r7, #16]
   184c8:	f7ff fd70 	bl	17fac <error_check>
   184cc:	f7ff fe66 	bl	1819c <HciDrvRadioShutdown>
   184d0:	2000      	movs	r0, #0
   184d2:	f7ff fd87 	bl	17fe4 <HciDrvRadioBoot>
   184d6:	f000 f87d 	bl	185d4 <HciDrvEmptyWriteQueue>
   184da:	f7f7 fa59 	bl	f990 <DmDevReset>
   184de:	e05d      	b.n	1859c <HciDrvHandler+0x244>
            }

            am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_02);

            if (read_hci_packet_count >= HCI_DRV_MAX_READ_PACKET)
   184e0:	69fb      	ldr	r3, [r7, #28]
   184e2:	2b03      	cmp	r3, #3
   184e4:	d93e      	bls.n	18564 <HciDrvHandler+0x20c>
            {
                // It looks like there's time that we won't get interrupt even though
                // there's packet waiting for host to grab.
                WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   184e6:	4b33      	ldr	r3, [pc, #204]	; (185b4 <HciDrvHandler+0x25c>)
   184e8:	781b      	ldrb	r3, [r3, #0]
   184ea:	2101      	movs	r1, #1
   184ec:	4618      	mov	r0, r3
   184ee:	f001 ffd3 	bl	1a498 <WsfSetEvent>

                break;
   184f2:	e041      	b.n	18578 <HciDrvHandler+0x220>
        {
            //
            // If we don't have anything to read, we can start checking to see
            // if we have things to write.
            //
            if (am_hal_queue_empty(&g_sWriteQueue))
   184f4:	4b35      	ldr	r3, [pc, #212]	; (185cc <HciDrvHandler+0x274>)
   184f6:	689b      	ldr	r3, [r3, #8]
   184f8:	2b00      	cmp	r3, #0
   184fa:	d03c      	beq.n	18576 <HciDrvHandler+0x21e>
                //
                // If we do have something to write, just pop a single item
                // from the queue and send it.
                //
                am_hal_debug_gpio_set(BLE_DEBUG_TRACE_07);
                hci_drv_write_t *psWriteBuffer = am_hal_queue_peek(&g_sWriteQueue);
   184fc:	4b33      	ldr	r3, [pc, #204]	; (185cc <HciDrvHandler+0x274>)
   184fe:	695a      	ldr	r2, [r3, #20]
   18500:	4b32      	ldr	r3, [pc, #200]	; (185cc <HciDrvHandler+0x274>)
   18502:	685b      	ldr	r3, [r3, #4]
   18504:	4413      	add	r3, r2
   18506:	617b      	str	r3, [r7, #20]

                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   18508:	4b2d      	ldr	r3, [pc, #180]	; (185c0 <HciDrvHandler+0x268>)
   1850a:	6818      	ldr	r0, [r3, #0]
                                                                AM_HAL_BLE_RAW,
                                                                psWriteBuffer->pui32Data,
   1850c:	697b      	ldr	r3, [r7, #20]
   1850e:	1d1a      	adds	r2, r3, #4
                ui32ErrorStatus = am_hal_ble_blocking_hci_write(BLE,
   18510:	697b      	ldr	r3, [r7, #20]
   18512:	681b      	ldr	r3, [r3, #0]
   18514:	2100      	movs	r1, #0
   18516:	f006 fc41 	bl	1ed9c <am_hal_ble_blocking_hci_write>
   1851a:	6138      	str	r0, [r7, #16]

                //
                // If we managed to actually send a packet, we can go ahead and
                // advance the queue.
                //
                if (ui32ErrorStatus == AM_HAL_STATUS_SUCCESS)
   1851c:	693b      	ldr	r3, [r7, #16]
   1851e:	2b00      	cmp	r3, #0
   18520:	d111      	bne.n	18546 <HciDrvHandler+0x1ee>
                {
                    //
                    // Restart the heartbeat timer.
                    //
                    BLE_HEARTBEAT_RESTART();
   18522:	4820      	ldr	r0, [pc, #128]	; (185a4 <HciDrvHandler+0x24c>)
   18524:	f7ff fc7c 	bl	17e20 <WsfTimerStop>
   18528:	f242 7110 	movw	r1, #10000	; 0x2710
   1852c:	481d      	ldr	r0, [pc, #116]	; (185a4 <HciDrvHandler+0x24c>)
   1852e:	f7ff fc63 	bl	17df8 <WsfTimerStartMs>

                    am_hal_queue_item_get(&g_sWriteQueue, 0, 1);
   18532:	2201      	movs	r2, #1
   18534:	2100      	movs	r1, #0
   18536:	4825      	ldr	r0, [pc, #148]	; (185cc <HciDrvHandler+0x274>)
   18538:	f008 f938 	bl	207ac <am_hal_queue_item_get>

                    ui32TxRetries = 0;
   1853c:	2300      	movs	r3, #0
   1853e:	627b      	str	r3, [r7, #36]	; 0x24
                    // Resetting the cumulative count
                    ui32NumHciTransactions = 0;
   18540:	2300      	movs	r3, #0
   18542:	623b      	str	r3, [r7, #32]
   18544:	e00e      	b.n	18564 <HciDrvHandler+0x20c>
                {
                    //
                    // If we fail too many times in a row, we should throw an
                    // error to avoid a lock-up.
                    //
                    ui32TxRetries++;
   18546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18548:	3301      	adds	r3, #1
   1854a:	627b      	str	r3, [r7, #36]	; 0x24

                    if (ui32TxRetries > HCI_DRV_MAX_TX_RETRIES)
   1854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1854e:	f242 7210 	movw	r2, #10000	; 0x2710
   18552:	4293      	cmp	r3, r2
   18554:	d906      	bls.n	18564 <HciDrvHandler+0x20c>
                    {
                        // we need to come back again later.
                        WsfSetEvent(g_HciDrvHandleID, BLE_TRANSFER_NEEDED_EVENT);
   18556:	4b17      	ldr	r3, [pc, #92]	; (185b4 <HciDrvHandler+0x25c>)
   18558:	781b      	ldrb	r3, [r3, #0]
   1855a:	2101      	movs	r1, #1
   1855c:	4618      	mov	r0, r3
   1855e:	f001 ff9b 	bl	1a498 <WsfSetEvent>
                        break;
   18562:	e009      	b.n	18578 <HciDrvHandler+0x220>
    while (ui32NumHciTransactions++ < HCI_DRV_MAX_HCI_TRANSACTIONS)
   18564:	6a3b      	ldr	r3, [r7, #32]
   18566:	1c5a      	adds	r2, r3, #1
   18568:	623a      	str	r2, [r7, #32]
   1856a:	f242 720f 	movw	r2, #9999	; 0x270f
   1856e:	4293      	cmp	r3, r2
   18570:	f67f af3c 	bls.w	183ec <HciDrvHandler+0x94>
   18574:	e000      	b.n	18578 <HciDrvHandler+0x220>
                break;
   18576:	bf00      	nop

            }
        }
    }

    if (ui32NumHciTransactions == HCI_DRV_MAX_HCI_TRANSACTIONS)
   18578:	6a3b      	ldr	r3, [r7, #32]
   1857a:	f242 7210 	movw	r2, #10000	; 0x2710
   1857e:	4293      	cmp	r3, r2
   18580:	d10c      	bne.n	1859c <HciDrvHandler+0x244>
    {
        CRITICAL_PRINT("ERROR: Maximum number of successive HCI transactions exceeded.\n");
        ERROR_RECOVER(HCI_DRV_TOO_MANY_PACKETS);
   18582:	4813      	ldr	r0, [pc, #76]	; (185d0 <HciDrvHandler+0x278>)
   18584:	f7ff fd12 	bl	17fac <error_check>
   18588:	f7ff fe08 	bl	1819c <HciDrvRadioShutdown>
   1858c:	2000      	movs	r0, #0
   1858e:	f7ff fd29 	bl	17fe4 <HciDrvRadioBoot>
   18592:	f000 f81f 	bl	185d4 <HciDrvEmptyWriteQueue>
   18596:	f7f7 f9fb 	bl	f990 <DmDevReset>
   1859a:	bf00      	nop
    }

    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_01);
}
   1859c:	3728      	adds	r7, #40	; 0x28
   1859e:	46bd      	mov	sp, r7
   185a0:	bd80      	pop	{r7, pc}
   185a2:	bf00      	nop
   185a4:	10006578 	.word	0x10006578
   185a8:	10004370 	.word	0x10004370
   185ac:	10004374 	.word	0x10004374
   185b0:	100023a4 	.word	0x100023a4
   185b4:	1000436c 	.word	0x1000436c
   185b8:	5000c000 	.word	0x5000c000
   185bc:	10004378 	.word	0x10004378
   185c0:	10006ea8 	.word	0x10006ea8
   185c4:	10006588 	.word	0x10006588
   185c8:	09000002 	.word	0x09000002
   185cc:	10006560 	.word	0x10006560
   185d0:	09000006 	.word	0x09000006

000185d4 <HciDrvEmptyWriteQueue>:
// Clear the HCI write queue
//
//*****************************************************************************
void
HciDrvEmptyWriteQueue(void)
{
   185d4:	b580      	push	{r7, lr}
   185d6:	af00      	add	r7, sp, #0
    am_hal_queue_from_array(&g_sWriteQueue, g_psWriteBuffers);
   185d8:	f44f 6302 	mov.w	r3, #2080	; 0x820
   185dc:	f44f 7282 	mov.w	r2, #260	; 0x104
   185e0:	4902      	ldr	r1, [pc, #8]	; (185ec <HciDrvEmptyWriteQueue+0x18>)
   185e2:	4803      	ldr	r0, [pc, #12]	; (185f0 <HciDrvEmptyWriteQueue+0x1c>)
   185e4:	f008 f89e 	bl	20724 <am_hal_queue_init>
}
   185e8:	bf00      	nop
   185ea:	bd80      	pop	{r7, pc}
   185ec:	10006688 	.word	0x10006688
   185f0:	10006560 	.word	0x10006560

000185f4 <RscpsSetFeatures>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetFeatures(uint16_t features)
{
   185f4:	b580      	push	{r7, lr}
   185f6:	b084      	sub	sp, #16
   185f8:	af00      	add	r7, sp, #0
   185fa:	4603      	mov	r3, r0
   185fc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempData[2] = {UINT16_TO_BYTES(features)};
   185fe:	88fb      	ldrh	r3, [r7, #6]
   18600:	b2db      	uxtb	r3, r3
   18602:	733b      	strb	r3, [r7, #12]
   18604:	88fb      	ldrh	r3, [r7, #6]
   18606:	0a1b      	lsrs	r3, r3, #8
   18608:	b29b      	uxth	r3, r3
   1860a:	b2db      	uxtb	r3, r3
   1860c:	737b      	strb	r3, [r7, #13]
  AttsSetAttr(RSCS_RSF_HDL, sizeof(tempData), tempData);
   1860e:	f107 030c 	add.w	r3, r7, #12
   18612:	461a      	mov	r2, r3
   18614:	2102      	movs	r1, #2
   18616:	f240 40a2 	movw	r0, #1186	; 0x4a2
   1861a:	f7f5 f945 	bl	d8a8 <AttsSetAttr>
}
   1861e:	bf00      	nop
   18620:	3710      	adds	r7, #16
   18622:	46bd      	mov	sp, r7
   18624:	bd80      	pop	{r7, pc}
	...

00018628 <RscpsSetParameter>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSetParameter(uint8_t type, uint32_t value)
{
   18628:	b480      	push	{r7}
   1862a:	b083      	sub	sp, #12
   1862c:	af00      	add	r7, sp, #0
   1862e:	4603      	mov	r3, r0
   18630:	6039      	str	r1, [r7, #0]
   18632:	71fb      	strb	r3, [r7, #7]
  switch (type)
   18634:	79fb      	ldrb	r3, [r7, #7]
   18636:	2b04      	cmp	r3, #4
   18638:	d840      	bhi.n	186bc <RscpsSetParameter+0x94>
   1863a:	a201      	add	r2, pc, #4	; (adr r2, 18640 <RscpsSetParameter+0x18>)
   1863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18640:	00018655 	.word	0x00018655
   18644:	0001865f 	.word	0x0001865f
   18648:	00018669 	.word	0x00018669
   1864c:	00018681 	.word	0x00018681
   18650:	00018697 	.word	0x00018697
  {
  case RSCP_SM_PARAM_SPEED:
    rscpSmData.speed = (uint16_t) value;
   18654:	683b      	ldr	r3, [r7, #0]
   18656:	b29a      	uxth	r2, r3
   18658:	4b1c      	ldr	r3, [pc, #112]	; (186cc <RscpsSetParameter+0xa4>)
   1865a:	805a      	strh	r2, [r3, #2]
    break;
   1865c:	e02f      	b.n	186be <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_CADENCE:
    rscpSmData.cadence = (uint8_t) value;
   1865e:	683b      	ldr	r3, [r7, #0]
   18660:	b2da      	uxtb	r2, r3
   18662:	4b1a      	ldr	r3, [pc, #104]	; (186cc <RscpsSetParameter+0xa4>)
   18664:	711a      	strb	r2, [r3, #4]
    break;
   18666:	e02a      	b.n	186be <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STRIDE_LENGTH:
    rscpSmData.flags |= (1 << RSCPS_ISLP_FLAG_INDEX);
   18668:	4b18      	ldr	r3, [pc, #96]	; (186cc <RscpsSetParameter+0xa4>)
   1866a:	781b      	ldrb	r3, [r3, #0]
   1866c:	f043 0301 	orr.w	r3, r3, #1
   18670:	b2da      	uxtb	r2, r3
   18672:	4b16      	ldr	r3, [pc, #88]	; (186cc <RscpsSetParameter+0xa4>)
   18674:	701a      	strb	r2, [r3, #0]
    rscpSmData.stride = (uint16_t) value;
   18676:	683b      	ldr	r3, [r7, #0]
   18678:	b29a      	uxth	r2, r3
   1867a:	4b14      	ldr	r3, [pc, #80]	; (186cc <RscpsSetParameter+0xa4>)
   1867c:	80da      	strh	r2, [r3, #6]
    break;
   1867e:	e01e      	b.n	186be <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_TOTAL_DISTANCE:
    rscpSmData.flags |= (1 << RSCPS_TDP_FLAG_INDEX);
   18680:	4b12      	ldr	r3, [pc, #72]	; (186cc <RscpsSetParameter+0xa4>)
   18682:	781b      	ldrb	r3, [r3, #0]
   18684:	f043 0302 	orr.w	r3, r3, #2
   18688:	b2da      	uxtb	r2, r3
   1868a:	4b10      	ldr	r3, [pc, #64]	; (186cc <RscpsSetParameter+0xa4>)
   1868c:	701a      	strb	r2, [r3, #0]
    rscpSmData.distance = value;
   1868e:	4a0f      	ldr	r2, [pc, #60]	; (186cc <RscpsSetParameter+0xa4>)
   18690:	683b      	ldr	r3, [r7, #0]
   18692:	6093      	str	r3, [r2, #8]
    break;
   18694:	e013      	b.n	186be <RscpsSetParameter+0x96>

  case RSCP_SM_PARAM_STATUS:
    if (value)
   18696:	683b      	ldr	r3, [r7, #0]
   18698:	2b00      	cmp	r3, #0
   1869a:	d007      	beq.n	186ac <RscpsSetParameter+0x84>
    {
      rscpSmData.flags |= (1 << RSCPS_WRS_FLAG_INDEX);
   1869c:	4b0b      	ldr	r3, [pc, #44]	; (186cc <RscpsSetParameter+0xa4>)
   1869e:	781b      	ldrb	r3, [r3, #0]
   186a0:	f043 0304 	orr.w	r3, r3, #4
   186a4:	b2da      	uxtb	r2, r3
   186a6:	4b09      	ldr	r3, [pc, #36]	; (186cc <RscpsSetParameter+0xa4>)
   186a8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
    }
    break;
   186aa:	e008      	b.n	186be <RscpsSetParameter+0x96>
      rscpSmData.flags &= ~(1 << RSCPS_WRS_FLAG_INDEX);
   186ac:	4b07      	ldr	r3, [pc, #28]	; (186cc <RscpsSetParameter+0xa4>)
   186ae:	781b      	ldrb	r3, [r3, #0]
   186b0:	f023 0304 	bic.w	r3, r3, #4
   186b4:	b2da      	uxtb	r2, r3
   186b6:	4b05      	ldr	r3, [pc, #20]	; (186cc <RscpsSetParameter+0xa4>)
   186b8:	701a      	strb	r2, [r3, #0]
    break;
   186ba:	e000      	b.n	186be <RscpsSetParameter+0x96>

  default:
    break;
   186bc:	bf00      	nop
  }
}
   186be:	bf00      	nop
   186c0:	370c      	adds	r7, #12
   186c2:	46bd      	mov	sp, r7
   186c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   186c8:	4770      	bx	lr
   186ca:	bf00      	nop
   186cc:	10006ebc 	.word	0x10006ebc

000186d0 <RscpsSendSpeedMeasurement>:
*
*  \return none
*/
/*************************************************************************************************/
void RscpsSendSpeedMeasurement(dmConnId_t connId)
{
   186d0:	b580      	push	{r7, lr}
   186d2:	b088      	sub	sp, #32
   186d4:	af00      	add	r7, sp, #0
   186d6:	4603      	mov	r3, r0
   186d8:	71fb      	strb	r3, [r7, #7]
  int8_t i;
  uint16_t len;
  uint8_t msg[RSCPS_PM_MAX_LEN];
  uint8_t *p = msg;
   186da:	f107 030c 	add.w	r3, r7, #12
   186de:	61bb      	str	r3, [r7, #24]

  /* Add manditory parameters */
  UINT8_TO_BSTREAM(p, rscpSmData.flags);
   186e0:	69bb      	ldr	r3, [r7, #24]
   186e2:	1c5a      	adds	r2, r3, #1
   186e4:	61ba      	str	r2, [r7, #24]
   186e6:	4a3f      	ldr	r2, [pc, #252]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   186e8:	7812      	ldrb	r2, [r2, #0]
   186ea:	701a      	strb	r2, [r3, #0]
  UINT16_TO_BSTREAM(p, rscpSmData.speed);
   186ec:	69bb      	ldr	r3, [r7, #24]
   186ee:	1c5a      	adds	r2, r3, #1
   186f0:	61ba      	str	r2, [r7, #24]
   186f2:	4a3c      	ldr	r2, [pc, #240]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   186f4:	8852      	ldrh	r2, [r2, #2]
   186f6:	b2d2      	uxtb	r2, r2
   186f8:	701a      	strb	r2, [r3, #0]
   186fa:	69bb      	ldr	r3, [r7, #24]
   186fc:	1c5a      	adds	r2, r3, #1
   186fe:	61ba      	str	r2, [r7, #24]
   18700:	4a38      	ldr	r2, [pc, #224]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   18702:	8852      	ldrh	r2, [r2, #2]
   18704:	0a12      	lsrs	r2, r2, #8
   18706:	b292      	uxth	r2, r2
   18708:	b2d2      	uxtb	r2, r2
   1870a:	701a      	strb	r2, [r3, #0]
  UINT8_TO_BSTREAM(p, rscpSmData.cadence);
   1870c:	69bb      	ldr	r3, [r7, #24]
   1870e:	1c5a      	adds	r2, r3, #1
   18710:	61ba      	str	r2, [r7, #24]
   18712:	4a34      	ldr	r2, [pc, #208]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   18714:	7912      	ldrb	r2, [r2, #4]
   18716:	701a      	strb	r2, [r3, #0]

  /* Add optional parameters */
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   18718:	2300      	movs	r3, #0
   1871a:	77fb      	strb	r3, [r7, #31]
   1871c:	e048      	b.n	187b0 <RscpsSendSpeedMeasurement+0xe0>
  {
    if (rscpSmData.flags & (1 << i))
   1871e:	4b31      	ldr	r3, [pc, #196]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   18720:	781b      	ldrb	r3, [r3, #0]
   18722:	461a      	mov	r2, r3
   18724:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18728:	fa42 f303 	asr.w	r3, r2, r3
   1872c:	f003 0301 	and.w	r3, r3, #1
   18730:	2b00      	cmp	r3, #0
   18732:	d037      	beq.n	187a4 <RscpsSendSpeedMeasurement+0xd4>
    {
      switch (i)
   18734:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18738:	2b00      	cmp	r3, #0
   1873a:	d002      	beq.n	18742 <RscpsSendSpeedMeasurement+0x72>
   1873c:	2b01      	cmp	r3, #1
   1873e:	d011      	beq.n	18764 <RscpsSendSpeedMeasurement+0x94>
      case RSCPS_TDP_FLAG_INDEX:
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
        break;

      default:
        break;
   18740:	e030      	b.n	187a4 <RscpsSendSpeedMeasurement+0xd4>
        UINT16_TO_BSTREAM(p, rscpSmData.stride);
   18742:	69bb      	ldr	r3, [r7, #24]
   18744:	1c5a      	adds	r2, r3, #1
   18746:	61ba      	str	r2, [r7, #24]
   18748:	4a26      	ldr	r2, [pc, #152]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   1874a:	88d2      	ldrh	r2, [r2, #6]
   1874c:	b2d2      	uxtb	r2, r2
   1874e:	701a      	strb	r2, [r3, #0]
   18750:	69bb      	ldr	r3, [r7, #24]
   18752:	1c5a      	adds	r2, r3, #1
   18754:	61ba      	str	r2, [r7, #24]
   18756:	4a23      	ldr	r2, [pc, #140]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   18758:	88d2      	ldrh	r2, [r2, #6]
   1875a:	0a12      	lsrs	r2, r2, #8
   1875c:	b292      	uxth	r2, r2
   1875e:	b2d2      	uxtb	r2, r2
   18760:	701a      	strb	r2, [r3, #0]
        break;
   18762:	e01f      	b.n	187a4 <RscpsSendSpeedMeasurement+0xd4>
        UINT32_TO_BSTREAM(p, rscpSmData.distance);
   18764:	69bb      	ldr	r3, [r7, #24]
   18766:	1c5a      	adds	r2, r3, #1
   18768:	61ba      	str	r2, [r7, #24]
   1876a:	4a1e      	ldr	r2, [pc, #120]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   1876c:	6892      	ldr	r2, [r2, #8]
   1876e:	b2d2      	uxtb	r2, r2
   18770:	701a      	strb	r2, [r3, #0]
   18772:	69bb      	ldr	r3, [r7, #24]
   18774:	1c5a      	adds	r2, r3, #1
   18776:	61ba      	str	r2, [r7, #24]
   18778:	4a1a      	ldr	r2, [pc, #104]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   1877a:	6892      	ldr	r2, [r2, #8]
   1877c:	0a12      	lsrs	r2, r2, #8
   1877e:	b2d2      	uxtb	r2, r2
   18780:	701a      	strb	r2, [r3, #0]
   18782:	69bb      	ldr	r3, [r7, #24]
   18784:	1c5a      	adds	r2, r3, #1
   18786:	61ba      	str	r2, [r7, #24]
   18788:	4a16      	ldr	r2, [pc, #88]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   1878a:	6892      	ldr	r2, [r2, #8]
   1878c:	0c12      	lsrs	r2, r2, #16
   1878e:	b2d2      	uxtb	r2, r2
   18790:	701a      	strb	r2, [r3, #0]
   18792:	69bb      	ldr	r3, [r7, #24]
   18794:	1c5a      	adds	r2, r3, #1
   18796:	61ba      	str	r2, [r7, #24]
   18798:	4a12      	ldr	r2, [pc, #72]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   1879a:	6892      	ldr	r2, [r2, #8]
   1879c:	0e12      	lsrs	r2, r2, #24
   1879e:	b2d2      	uxtb	r2, r2
   187a0:	701a      	strb	r2, [r3, #0]
        break;
   187a2:	bf00      	nop
  for (i = 0; i < RSCPS_NUM_FLAGS; i++)
   187a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
   187a8:	b2db      	uxtb	r3, r3
   187aa:	3301      	adds	r3, #1
   187ac:	b2db      	uxtb	r3, r3
   187ae:	77fb      	strb	r3, [r7, #31]
   187b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
   187b4:	2b02      	cmp	r3, #2
   187b6:	ddb2      	ble.n	1871e <RscpsSendSpeedMeasurement+0x4e>
      }
    }
  }

  /* Calculate message length */
  len = (uint16_t) (p - msg);
   187b8:	69ba      	ldr	r2, [r7, #24]
   187ba:	f107 030c 	add.w	r3, r7, #12
   187be:	1ad3      	subs	r3, r2, r3
   187c0:	82fb      	strh	r3, [r7, #22]

  /* Transmit notification */
  AttsHandleValueNtf(connId, RSCS_RSM_HDL, len, msg);
   187c2:	f107 030c 	add.w	r3, r7, #12
   187c6:	8afa      	ldrh	r2, [r7, #22]
   187c8:	79f8      	ldrb	r0, [r7, #7]
   187ca:	f240 41a4 	movw	r1, #1188	; 0x4a4
   187ce:	f7f4 ff43 	bl	d658 <AttsHandleValueNtf>

  /* Clear the measurement data */
  memset(&rscpSmData, 0, sizeof(rscpSmData));
   187d2:	220c      	movs	r2, #12
   187d4:	2100      	movs	r1, #0
   187d6:	4803      	ldr	r0, [pc, #12]	; (187e4 <RscpsSendSpeedMeasurement+0x114>)
   187d8:	f7f3 fdc0 	bl	c35c <memset>
}
   187dc:	bf00      	nop
   187de:	3720      	adds	r7, #32
   187e0:	46bd      	mov	sp, r7
   187e2:	bd80      	pop	{r7, pc}
   187e4:	10006ebc 	.word	0x10006ebc

000187e8 <BdaCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void BdaCpy(uint8_t *pDst, const uint8_t *pSrc)
{
   187e8:	b580      	push	{r7, lr}
   187ea:	b082      	sub	sp, #8
   187ec:	af00      	add	r7, sp, #0
   187ee:	6078      	str	r0, [r7, #4]
   187f0:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, BDA_ADDR_LEN);
   187f2:	2206      	movs	r2, #6
   187f4:	6839      	ldr	r1, [r7, #0]
   187f6:	6878      	ldr	r0, [r7, #4]
   187f8:	f7f3 fcb2 	bl	c160 <memcpy>
}
   187fc:	bf00      	nop
   187fe:	3708      	adds	r7, #8
   18800:	46bd      	mov	sp, r7
   18802:	bd80      	pop	{r7, pc}

00018804 <BdaCmp>:
 *
 *  \return TRUE if addresses match, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t BdaCmp(const uint8_t *pAddr1, const uint8_t *pAddr2)
{
   18804:	b580      	push	{r7, lr}
   18806:	b082      	sub	sp, #8
   18808:	af00      	add	r7, sp, #0
   1880a:	6078      	str	r0, [r7, #4]
   1880c:	6039      	str	r1, [r7, #0]
  return (memcmp(pAddr1, pAddr2, BDA_ADDR_LEN) == 0);
   1880e:	2206      	movs	r2, #6
   18810:	6839      	ldr	r1, [r7, #0]
   18812:	6878      	ldr	r0, [r7, #4]
   18814:	f7f3 fc74 	bl	c100 <memcmp>
   18818:	4603      	mov	r3, r0
   1881a:	2b00      	cmp	r3, #0
   1881c:	bf0c      	ite	eq
   1881e:	2301      	moveq	r3, #1
   18820:	2300      	movne	r3, #0
   18822:	b2db      	uxtb	r3, r3
}
   18824:	4618      	mov	r0, r3
   18826:	3708      	adds	r7, #8
   18828:	46bd      	mov	sp, r7
   1882a:	bd80      	pop	{r7, pc}

0001882c <BdaClr>:
 *
 *  \return pDst + BDA_ADDR_LEN
 */
/*************************************************************************************************/
uint8_t *BdaClr(uint8_t *pDst)
{
   1882c:	b580      	push	{r7, lr}
   1882e:	b082      	sub	sp, #8
   18830:	af00      	add	r7, sp, #0
   18832:	6078      	str	r0, [r7, #4]
  memset(pDst, 0, BDA_ADDR_LEN);
   18834:	2206      	movs	r2, #6
   18836:	2100      	movs	r1, #0
   18838:	6878      	ldr	r0, [r7, #4]
   1883a:	f7f3 fd8f 	bl	c35c <memset>

  return (pDst + BDA_ADDR_LEN);
   1883e:	687b      	ldr	r3, [r7, #4]
   18840:	3306      	adds	r3, #6
}
   18842:	4618      	mov	r0, r3
   18844:	3708      	adds	r7, #8
   18846:	46bd      	mov	sp, r7
   18848:	bd80      	pop	{r7, pc}

0001884a <BdaIsZeros>:
*
*  \return TRUE if address is all zeros, FALSE otherwise.
*/
/*************************************************************************************************/
bool_t BdaIsZeros(const uint8_t *pAddr)
{
   1884a:	b580      	push	{r7, lr}
   1884c:	b084      	sub	sp, #16
   1884e:	af00      	add	r7, sp, #0
   18850:	6078      	str	r0, [r7, #4]
  uint8_t addrZeros[BDA_ADDR_LEN] = { 0 };
   18852:	f107 0308 	add.w	r3, r7, #8
   18856:	2200      	movs	r2, #0
   18858:	601a      	str	r2, [r3, #0]
   1885a:	809a      	strh	r2, [r3, #4]

  return (memcmp(pAddr, addrZeros, BDA_ADDR_LEN) == 0);
   1885c:	f107 0308 	add.w	r3, r7, #8
   18860:	2206      	movs	r2, #6
   18862:	4619      	mov	r1, r3
   18864:	6878      	ldr	r0, [r7, #4]
   18866:	f7f3 fc4b 	bl	c100 <memcmp>
   1886a:	4603      	mov	r3, r0
   1886c:	2b00      	cmp	r3, #0
   1886e:	bf0c      	ite	eq
   18870:	2301      	moveq	r3, #1
   18872:	2300      	movne	r3, #0
   18874:	b2db      	uxtb	r3, r3
}
   18876:	4618      	mov	r0, r3
   18878:	3710      	adds	r7, #16
   1887a:	46bd      	mov	sp, r7
   1887c:	bd80      	pop	{r7, pc}

0001887e <Calc128Cpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy(uint8_t *pDst, uint8_t *pSrc)
{
   1887e:	b580      	push	{r7, lr}
   18880:	b082      	sub	sp, #8
   18882:	af00      	add	r7, sp, #0
   18884:	6078      	str	r0, [r7, #4]
   18886:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN);
   18888:	2210      	movs	r2, #16
   1888a:	6839      	ldr	r1, [r7, #0]
   1888c:	6878      	ldr	r0, [r7, #4]
   1888e:	f7f3 fc67 	bl	c160 <memcpy>
}
   18892:	bf00      	nop
   18894:	3708      	adds	r7, #8
   18896:	46bd      	mov	sp, r7
   18898:	bd80      	pop	{r7, pc}

0001889a <Calc128Cpy64>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Cpy64(uint8_t *pDst, uint8_t *pSrc)
{
   1889a:	b580      	push	{r7, lr}
   1889c:	b082      	sub	sp, #8
   1889e:	af00      	add	r7, sp, #0
   188a0:	6078      	str	r0, [r7, #4]
   188a2:	6039      	str	r1, [r7, #0]
  memcpy(pDst, pSrc, CALC128_LEN/2);
   188a4:	2208      	movs	r2, #8
   188a6:	6839      	ldr	r1, [r7, #0]
   188a8:	6878      	ldr	r0, [r7, #4]
   188aa:	f7f3 fc59 	bl	c160 <memcpy>
}
   188ae:	bf00      	nop
   188b0:	3708      	adds	r7, #8
   188b2:	46bd      	mov	sp, r7
   188b4:	bd80      	pop	{r7, pc}

000188b6 <Calc128Xor>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void Calc128Xor(uint8_t *pDst, uint8_t *pSrc)
{
   188b6:	b480      	push	{r7}
   188b8:	b085      	sub	sp, #20
   188ba:	af00      	add	r7, sp, #0
   188bc:	6078      	str	r0, [r7, #4]
   188be:	6039      	str	r1, [r7, #0]
  uint8_t i;
  
  for (i = CALC128_LEN; i > 0; i--)
   188c0:	2310      	movs	r3, #16
   188c2:	73fb      	strb	r3, [r7, #15]
   188c4:	e00d      	b.n	188e2 <Calc128Xor+0x2c>
  {
    *pDst++ ^= *pSrc++;
   188c6:	683b      	ldr	r3, [r7, #0]
   188c8:	1c5a      	adds	r2, r3, #1
   188ca:	603a      	str	r2, [r7, #0]
   188cc:	781a      	ldrb	r2, [r3, #0]
   188ce:	687b      	ldr	r3, [r7, #4]
   188d0:	1c59      	adds	r1, r3, #1
   188d2:	6079      	str	r1, [r7, #4]
   188d4:	7819      	ldrb	r1, [r3, #0]
   188d6:	404a      	eors	r2, r1
   188d8:	b2d2      	uxtb	r2, r2
   188da:	701a      	strb	r2, [r3, #0]
  for (i = CALC128_LEN; i > 0; i--)
   188dc:	7bfb      	ldrb	r3, [r7, #15]
   188de:	3b01      	subs	r3, #1
   188e0:	73fb      	strb	r3, [r7, #15]
   188e2:	7bfb      	ldrb	r3, [r7, #15]
   188e4:	2b00      	cmp	r3, #0
   188e6:	d1ee      	bne.n	188c6 <Calc128Xor+0x10>
  }
}
   188e8:	bf00      	nop
   188ea:	3714      	adds	r7, #20
   188ec:	46bd      	mov	sp, r7
   188ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   188f2:	4770      	bx	lr

000188f4 <WStrReverseCpy>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverseCpy(uint8_t *pBuf1, const uint8_t *pBuf2, uint16_t len)
{
   188f4:	b480      	push	{r7}
   188f6:	b087      	sub	sp, #28
   188f8:	af00      	add	r7, sp, #0
   188fa:	60f8      	str	r0, [r7, #12]
   188fc:	60b9      	str	r1, [r7, #8]
   188fe:	4613      	mov	r3, r2
   18900:	80fb      	strh	r3, [r7, #6]
  int16_t i;

  for (i=0; i<len; i++)
   18902:	2300      	movs	r3, #0
   18904:	82fb      	strh	r3, [r7, #22]
   18906:	e013      	b.n	18930 <WStrReverseCpy+0x3c>
  {
    pBuf1[len-1-i] = pBuf2[i];
   18908:	88fb      	ldrh	r3, [r7, #6]
   1890a:	1e5a      	subs	r2, r3, #1
   1890c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   18910:	1ad3      	subs	r3, r2, r3
   18912:	461a      	mov	r2, r3
   18914:	68fb      	ldr	r3, [r7, #12]
   18916:	4413      	add	r3, r2
   18918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   1891c:	68b9      	ldr	r1, [r7, #8]
   1891e:	440a      	add	r2, r1
   18920:	7812      	ldrb	r2, [r2, #0]
   18922:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len; i++)
   18924:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   18928:	b29b      	uxth	r3, r3
   1892a:	3301      	adds	r3, #1
   1892c:	b29b      	uxth	r3, r3
   1892e:	82fb      	strh	r3, [r7, #22]
   18930:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
   18934:	88fb      	ldrh	r3, [r7, #6]
   18936:	429a      	cmp	r2, r3
   18938:	dbe6      	blt.n	18908 <WStrReverseCpy+0x14>
  }
}
   1893a:	bf00      	nop
   1893c:	371c      	adds	r7, #28
   1893e:	46bd      	mov	sp, r7
   18940:	f85d 7b04 	ldr.w	r7, [sp], #4
   18944:	4770      	bx	lr

00018946 <WStrReverse>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WStrReverse(uint8_t *pBuf, uint8_t len)
{
   18946:	b480      	push	{r7}
   18948:	b085      	sub	sp, #20
   1894a:	af00      	add	r7, sp, #0
   1894c:	6078      	str	r0, [r7, #4]
   1894e:	460b      	mov	r3, r1
   18950:	70fb      	strb	r3, [r7, #3]
  uint8_t i, temp;

  for (i=0; i<len/2; i++)
   18952:	2300      	movs	r3, #0
   18954:	73fb      	strb	r3, [r7, #15]
   18956:	e01a      	b.n	1898e <WStrReverse+0x48>
  {
    temp = pBuf[len-i-1];
   18958:	78fa      	ldrb	r2, [r7, #3]
   1895a:	7bfb      	ldrb	r3, [r7, #15]
   1895c:	1ad3      	subs	r3, r2, r3
   1895e:	3b01      	subs	r3, #1
   18960:	687a      	ldr	r2, [r7, #4]
   18962:	4413      	add	r3, r2
   18964:	781b      	ldrb	r3, [r3, #0]
   18966:	73bb      	strb	r3, [r7, #14]
    pBuf[len-i-1] = pBuf[i];
   18968:	78fa      	ldrb	r2, [r7, #3]
   1896a:	7bfb      	ldrb	r3, [r7, #15]
   1896c:	1ad3      	subs	r3, r2, r3
   1896e:	3b01      	subs	r3, #1
   18970:	687a      	ldr	r2, [r7, #4]
   18972:	4413      	add	r3, r2
   18974:	7bfa      	ldrb	r2, [r7, #15]
   18976:	6879      	ldr	r1, [r7, #4]
   18978:	440a      	add	r2, r1
   1897a:	7812      	ldrb	r2, [r2, #0]
   1897c:	701a      	strb	r2, [r3, #0]
    pBuf[i] = temp;
   1897e:	7bfb      	ldrb	r3, [r7, #15]
   18980:	687a      	ldr	r2, [r7, #4]
   18982:	4413      	add	r3, r2
   18984:	7bba      	ldrb	r2, [r7, #14]
   18986:	701a      	strb	r2, [r3, #0]
  for (i=0; i<len/2; i++)
   18988:	7bfb      	ldrb	r3, [r7, #15]
   1898a:	3301      	adds	r3, #1
   1898c:	73fb      	strb	r3, [r7, #15]
   1898e:	78fb      	ldrb	r3, [r7, #3]
   18990:	085b      	lsrs	r3, r3, #1
   18992:	b2db      	uxtb	r3, r3
   18994:	7bfa      	ldrb	r2, [r7, #15]
   18996:	429a      	cmp	r2, r3
   18998:	d3de      	bcc.n	18958 <WStrReverse+0x12>
  }
}
   1899a:	bf00      	nop
   1899c:	3714      	adds	r7, #20
   1899e:	46bd      	mov	sp, r7
   189a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   189a4:	4770      	bx	lr
	...

000189a8 <getNextToken>:
 *
 *  \return Token value.
 */
/*************************************************************************************************/
static uint8_t getNextToken()
{
   189a8:	b480      	push	{r7}
   189aa:	b083      	sub	sp, #12
   189ac:	af00      	add	r7, sp, #0
  uint8_t token = secCb.token++;
   189ae:	4b0e      	ldr	r3, [pc, #56]	; (189e8 <getNextToken+0x40>)
   189b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   189b4:	1c5a      	adds	r2, r3, #1
   189b6:	b2d1      	uxtb	r1, r2
   189b8:	4a0b      	ldr	r2, [pc, #44]	; (189e8 <getNextToken+0x40>)
   189ba:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   189be:	71fb      	strb	r3, [r7, #7]

  if (token == SEC_TOKEN_INVALID)
   189c0:	79fb      	ldrb	r3, [r7, #7]
   189c2:	2bff      	cmp	r3, #255	; 0xff
   189c4:	d108      	bne.n	189d8 <getNextToken+0x30>
  {
    token = secCb.token++;
   189c6:	4b08      	ldr	r3, [pc, #32]	; (189e8 <getNextToken+0x40>)
   189c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   189cc:	1c5a      	adds	r2, r3, #1
   189ce:	b2d1      	uxtb	r1, r2
   189d0:	4a05      	ldr	r2, [pc, #20]	; (189e8 <getNextToken+0x40>)
   189d2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   189d6:	71fb      	strb	r3, [r7, #7]
  }

  return token;
   189d8:	79fb      	ldrb	r3, [r7, #7]
}
   189da:	4618      	mov	r0, r3
   189dc:	370c      	adds	r7, #12
   189de:	46bd      	mov	sp, r7
   189e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   189e4:	4770      	bx	lr
   189e6:	bf00      	nop
   189e8:	10006ec8 	.word	0x10006ec8

000189ec <SecAes>:
 *  \return Token value.
 */
/*************************************************************************************************/
uint8_t SecAes(uint8_t *pKey, uint8_t *pPlaintext, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   189ec:	b580      	push	{r7, lr}
   189ee:	b086      	sub	sp, #24
   189f0:	af00      	add	r7, sp, #0
   189f2:	60f8      	str	r0, [r7, #12]
   189f4:	60b9      	str	r1, [r7, #8]
   189f6:	4611      	mov	r1, r2
   189f8:	461a      	mov	r2, r3
   189fa:	460b      	mov	r3, r1
   189fc:	71fb      	strb	r3, [r7, #7]
   189fe:	4613      	mov	r3, r2
   18a00:	80bb      	strh	r3, [r7, #4]
  secQueueBuf_t  *pBuf;
  
  /* allocate a buffer */
  if ((pBuf = WsfMsgAlloc(sizeof(secQueueBuf_t))) != NULL)
   18a02:	2030      	movs	r0, #48	; 0x30
   18a04:	f7ff f82d 	bl	17a62 <WsfMsgAlloc>
   18a08:	6178      	str	r0, [r7, #20]
   18a0a:	697b      	ldr	r3, [r7, #20]
   18a0c:	2b00      	cmp	r3, #0
   18a0e:	d01d      	beq.n	18a4c <SecAes+0x60>
  {
    pBuf->msg.hdr.status = getNextToken();
   18a10:	f7ff ffca 	bl	189a8 <getNextToken>
   18a14:	4603      	mov	r3, r0
   18a16:	461a      	mov	r2, r3
   18a18:	697b      	ldr	r3, [r7, #20]
   18a1a:	70da      	strb	r2, [r3, #3]
    pBuf->msg.hdr.param = param;
   18a1c:	697b      	ldr	r3, [r7, #20]
   18a1e:	88ba      	ldrh	r2, [r7, #4]
   18a20:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18a22:	697b      	ldr	r3, [r7, #20]
   18a24:	f897 2020 	ldrb.w	r2, [r7, #32]
   18a28:	709a      	strb	r2, [r3, #2]
   
    pBuf->type = SEC_TYPE_AES;
   18a2a:	697b      	ldr	r3, [r7, #20]
   18a2c:	2200      	movs	r2, #0
   18a2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18a32:	79fb      	ldrb	r3, [r7, #7]
   18a34:	697a      	ldr	r2, [r7, #20]
   18a36:	4619      	mov	r1, r3
   18a38:	4807      	ldr	r0, [pc, #28]	; (18a58 <SecAes+0x6c>)
   18a3a:	f7ff f84e 	bl	17ada <WsfMsgEnq>
    
    /* call HCI encrypt function */
    HciLeEncryptCmd(pKey, pPlaintext);
   18a3e:	68b9      	ldr	r1, [r7, #8]
   18a40:	68f8      	ldr	r0, [r7, #12]
   18a42:	f7fb fb9d 	bl	14180 <HciLeEncryptCmd>

    return pBuf->msg.hdr.status;
   18a46:	697b      	ldr	r3, [r7, #20]
   18a48:	78db      	ldrb	r3, [r3, #3]
   18a4a:	e000      	b.n	18a4e <SecAes+0x62>
  }
  
  return SEC_TOKEN_INVALID;
   18a4c:	23ff      	movs	r3, #255	; 0xff
}
   18a4e:	4618      	mov	r0, r3
   18a50:	3718      	adds	r7, #24
   18a52:	46bd      	mov	sp, r7
   18a54:	bd80      	pop	{r7, pc}
   18a56:	bf00      	nop
   18a58:	10006ee8 	.word	0x10006ee8

00018a5c <SecAesHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18a5c:	b580      	push	{r7, lr}
   18a5e:	b086      	sub	sp, #24
   18a60:	af00      	add	r7, sp, #0
   18a62:	60f8      	str	r0, [r7, #12]
   18a64:	60b9      	str	r1, [r7, #8]
   18a66:	4613      	mov	r3, r2
   18a68:	71fb      	strb	r3, [r7, #7]
  secAes_t *pAes = (secAes_t *) &pBuf->msg;
   18a6a:	68fb      	ldr	r3, [r7, #12]
   18a6c:	617b      	str	r3, [r7, #20]
  
  /* set encrypted data pointer and copy */
  pAes->pCiphertext = pBuf->ciphertext;
   18a6e:	68fb      	ldr	r3, [r7, #12]
   18a70:	f103 0208 	add.w	r2, r3, #8
   18a74:	697b      	ldr	r3, [r7, #20]
   18a76:	605a      	str	r2, [r3, #4]
  Calc128Cpy(pAes->pCiphertext, pEvent->leEncryptCmdCmpl.data);
   18a78:	697b      	ldr	r3, [r7, #20]
   18a7a:	685a      	ldr	r2, [r3, #4]
   18a7c:	68bb      	ldr	r3, [r7, #8]
   18a7e:	3305      	adds	r3, #5
   18a80:	4619      	mov	r1, r3
   18a82:	4610      	mov	r0, r2
   18a84:	f7ff fefb 	bl	1887e <Calc128Cpy>

  /* send message */
  WsfMsgSend(handlerId, pAes);
   18a88:	79fb      	ldrb	r3, [r7, #7]
   18a8a:	6979      	ldr	r1, [r7, #20]
   18a8c:	4618      	mov	r0, r3
   18a8e:	f7ff f80c 	bl	17aaa <WsfMsgSend>
}
   18a92:	bf00      	nop
   18a94:	3718      	adds	r7, #24
   18a96:	46bd      	mov	sp, r7
   18a98:	bd80      	pop	{r7, pc}
	...

00018a9c <SecAesInit>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecAesInit()
{
   18a9c:	b480      	push	{r7}
   18a9e:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_AES] = SecAesHciCback;
   18aa0:	4b03      	ldr	r3, [pc, #12]	; (18ab0 <SecAesInit+0x14>)
   18aa2:	4a04      	ldr	r2, [pc, #16]	; (18ab4 <SecAesInit+0x18>)
   18aa4:	62da      	str	r2, [r3, #44]	; 0x2c
}
   18aa6:	bf00      	nop
   18aa8:	46bd      	mov	sp, r7
   18aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
   18aae:	4770      	bx	lr
   18ab0:	10006ec8 	.word	0x10006ec8
   18ab4:	00018a5d 	.word	0x00018a5d

00018ab8 <secCmacProcessBlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacProcessBlock(secQueueBuf_t *pBuf)
{
   18ab8:	b580      	push	{r7, lr}
   18aba:	b08a      	sub	sp, #40	; 0x28
   18abc:	af00      	add	r7, sp, #0
   18abe:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   18ac0:	687b      	ldr	r3, [r7, #4]
   18ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t buf[SEC_BLOCK_LEN];
  uint8_t *pMn = pCmac->pPlainText + pCmac->position;
   18ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ac8:	681b      	ldr	r3, [r3, #0]
   18aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18acc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
   18ace:	4413      	add	r3, r2
   18ad0:	623b      	str	r3, [r7, #32]
  int8_t remaining = (int16_t) pCmac->len - pCmac->position;
   18ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   18ad6:	b2da      	uxtb	r2, r3
   18ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18ada:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18adc:	b2db      	uxtb	r3, r3
   18ade:	1ad3      	subs	r3, r2, r3
   18ae0:	b2db      	uxtb	r3, r3
   18ae2:	77fb      	strb	r3, [r7, #31]

  /* Check for Last Block */
  if (remaining <= SEC_BLOCK_LEN)
   18ae4:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18ae8:	2b10      	cmp	r3, #16
   18aea:	dc2d      	bgt.n	18b48 <secCmacProcessBlock+0x90>
  {
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   18aec:	f107 030c 	add.w	r3, r7, #12
   18af0:	2210      	movs	r2, #16
   18af2:	6a39      	ldr	r1, [r7, #32]
   18af4:	4618      	mov	r0, r3
   18af6:	f7ff fefd 	bl	188f4 <WStrReverseCpy>

    /* Pad the message if necessary */
    if (remaining != SEC_BLOCK_LEN)
   18afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18afe:	2b10      	cmp	r3, #16
   18b00:	d014      	beq.n	18b2c <secCmacProcessBlock+0x74>
    {
      memset(buf, 0, SEC_BLOCK_LEN - remaining);
   18b02:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18b06:	f1c3 0310 	rsb	r3, r3, #16
   18b0a:	461a      	mov	r2, r3
   18b0c:	f107 030c 	add.w	r3, r7, #12
   18b10:	2100      	movs	r1, #0
   18b12:	4618      	mov	r0, r3
   18b14:	f7f3 fc22 	bl	c35c <memset>
      buf[SEC_BLOCK_LEN-remaining-1] = 0x80;
   18b18:	f997 301f 	ldrsb.w	r3, [r7, #31]
   18b1c:	f1c3 030f 	rsb	r3, r3, #15
   18b20:	f107 0228 	add.w	r2, r7, #40	; 0x28
   18b24:	4413      	add	r3, r2
   18b26:	2280      	movs	r2, #128	; 0x80
   18b28:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }

    /* XOr the subkey */
    Calc128Xor(buf, pCmac->subkey);
   18b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b2e:	f103 0214 	add.w	r2, r3, #20
   18b32:	f107 030c 	add.w	r3, r7, #12
   18b36:	4611      	mov	r1, r2
   18b38:	4618      	mov	r0, r3
   18b3a:	f7ff febc 	bl	188b6 <Calc128Xor>
    pCmac->state = SEC_CMAC_STATE_COMPLETE;
   18b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b40:	2202      	movs	r2, #2
   18b42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
   18b46:	e006      	b.n	18b56 <secCmacProcessBlock+0x9e>
  }
  else
  {
    /* Copy the block to the buffer */
    WStrReverseCpy(buf, pMn, SEC_BLOCK_LEN);
   18b48:	f107 030c 	add.w	r3, r7, #12
   18b4c:	2210      	movs	r2, #16
   18b4e:	6a39      	ldr	r1, [r7, #32]
   18b50:	4618      	mov	r0, r3
   18b52:	f7ff fecf 	bl	188f4 <WStrReverseCpy>
  }

  if (pCmac->position != 0)
   18b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	d008      	beq.n	18b70 <secCmacProcessBlock+0xb8>
  {
    /* Except for first block, XOr the previous AES calculation */
    Calc128Xor(buf, pBuf->ciphertext);
   18b5e:	687b      	ldr	r3, [r7, #4]
   18b60:	f103 0208 	add.w	r2, r3, #8
   18b64:	f107 030c 	add.w	r3, r7, #12
   18b68:	4611      	mov	r1, r2
   18b6a:	4618      	mov	r0, r3
   18b6c:	f7ff fea3 	bl	188b6 <Calc128Xor>
  }

  pCmac->position += SEC_BLOCK_LEN;
   18b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   18b74:	3310      	adds	r3, #16
   18b76:	b29a      	uxth	r2, r3
   18b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b7a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Enqueue and perform AES operation */
  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   18b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18b82:	687a      	ldr	r2, [r7, #4]
   18b84:	4619      	mov	r1, r3
   18b86:	4807      	ldr	r0, [pc, #28]	; (18ba4 <secCmacProcessBlock+0xec>)
   18b88:	f7fe ffa7 	bl	17ada <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   18b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b8e:	3304      	adds	r3, #4
   18b90:	f107 020c 	add.w	r2, r7, #12
   18b94:	4611      	mov	r1, r2
   18b96:	4618      	mov	r0, r3
   18b98:	f7fb faf2 	bl	14180 <HciLeEncryptCmd>
}
   18b9c:	bf00      	nop
   18b9e:	3728      	adds	r7, #40	; 0x28
   18ba0:	46bd      	mov	sp, r7
   18ba2:	bd80      	pop	{r7, pc}
   18ba4:	10006ee8 	.word	0x10006ee8

00018ba8 <secCmacGenSubkey1>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey1(secQueueBuf_t *pBuf)
{
   18ba8:	b580      	push	{r7, lr}
   18baa:	b088      	sub	sp, #32
   18bac:	af00      	add	r7, sp, #0
   18bae:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   18bb0:	687b      	ldr	r3, [r7, #4]
   18bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18bb4:	61fb      	str	r3, [r7, #28]
  uint8_t buf[SEC_BLOCK_LEN];

  /* Perform aes on the key with a constant zero */
  memset(buf, 0, SEC_BLOCK_LEN);
   18bb6:	f107 030c 	add.w	r3, r7, #12
   18bba:	2210      	movs	r2, #16
   18bbc:	2100      	movs	r1, #0
   18bbe:	4618      	mov	r0, r3
   18bc0:	f7f3 fbcc 	bl	c35c <memset>

  WsfMsgEnq(&secCb.queue, pCmac->handlerId, pBuf);
   18bc4:	69fb      	ldr	r3, [r7, #28]
   18bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18bca:	687a      	ldr	r2, [r7, #4]
   18bcc:	4619      	mov	r1, r3
   18bce:	4807      	ldr	r0, [pc, #28]	; (18bec <secCmacGenSubkey1+0x44>)
   18bd0:	f7fe ff83 	bl	17ada <WsfMsgEnq>
  HciLeEncryptCmd(pCmac->key, buf);
   18bd4:	69fb      	ldr	r3, [r7, #28]
   18bd6:	3304      	adds	r3, #4
   18bd8:	f107 020c 	add.w	r2, r7, #12
   18bdc:	4611      	mov	r1, r2
   18bde:	4618      	mov	r0, r3
   18be0:	f7fb face 	bl	14180 <HciLeEncryptCmd>
}
   18be4:	bf00      	nop
   18be6:	3720      	adds	r7, #32
   18be8:	46bd      	mov	sp, r7
   18bea:	bd80      	pop	{r7, pc}
   18bec:	10006ee8 	.word	0x10006ee8

00018bf0 <secCmacKeyShift>:
 *
 *  \return The overflow of the operaiton.
 */
/*************************************************************************************************/
static uint8_t secCmacKeyShift(uint8_t *pBuf, uint8_t shift)
{
   18bf0:	b480      	push	{r7}
   18bf2:	b085      	sub	sp, #20
   18bf4:	af00      	add	r7, sp, #0
   18bf6:	6078      	str	r0, [r7, #4]
   18bf8:	460b      	mov	r3, r1
   18bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t bits, i, prevBits = 0;
   18bfc:	2300      	movs	r3, #0
   18bfe:	73bb      	strb	r3, [r7, #14]

  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18c00:	2300      	movs	r3, #0
   18c02:	73fb      	strb	r3, [r7, #15]
   18c04:	e021      	b.n	18c4a <secCmacKeyShift+0x5a>
  {
    /* store shifted bits for next byte */
    bits = pBuf[i] >> (8 - shift);
   18c06:	7bfb      	ldrb	r3, [r7, #15]
   18c08:	687a      	ldr	r2, [r7, #4]
   18c0a:	4413      	add	r3, r2
   18c0c:	781b      	ldrb	r3, [r3, #0]
   18c0e:	461a      	mov	r2, r3
   18c10:	78fb      	ldrb	r3, [r7, #3]
   18c12:	f1c3 0308 	rsb	r3, r3, #8
   18c16:	fa42 f303 	asr.w	r3, r2, r3
   18c1a:	737b      	strb	r3, [r7, #13]

    /* shift byte and OR in shifted bits from previous byte */
    pBuf[i] = (pBuf[i] << shift) | prevBits;
   18c1c:	7bfb      	ldrb	r3, [r7, #15]
   18c1e:	687a      	ldr	r2, [r7, #4]
   18c20:	4413      	add	r3, r2
   18c22:	7bfa      	ldrb	r2, [r7, #15]
   18c24:	6879      	ldr	r1, [r7, #4]
   18c26:	440a      	add	r2, r1
   18c28:	7812      	ldrb	r2, [r2, #0]
   18c2a:	4611      	mov	r1, r2
   18c2c:	78fa      	ldrb	r2, [r7, #3]
   18c2e:	fa01 f202 	lsl.w	r2, r1, r2
   18c32:	b251      	sxtb	r1, r2
   18c34:	f997 200e 	ldrsb.w	r2, [r7, #14]
   18c38:	430a      	orrs	r2, r1
   18c3a:	b252      	sxtb	r2, r2
   18c3c:	b2d2      	uxtb	r2, r2
   18c3e:	701a      	strb	r2, [r3, #0]

    prevBits = bits;
   18c40:	7b7b      	ldrb	r3, [r7, #13]
   18c42:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < SEC_CMAC_KEY_LEN; i++)
   18c44:	7bfb      	ldrb	r3, [r7, #15]
   18c46:	3301      	adds	r3, #1
   18c48:	73fb      	strb	r3, [r7, #15]
   18c4a:	7bfb      	ldrb	r3, [r7, #15]
   18c4c:	2b0f      	cmp	r3, #15
   18c4e:	d9da      	bls.n	18c06 <secCmacKeyShift+0x16>
  }

  return prevBits;
   18c50:	7bbb      	ldrb	r3, [r7, #14]
}
   18c52:	4618      	mov	r0, r3
   18c54:	3714      	adds	r7, #20
   18c56:	46bd      	mov	sp, r7
   18c58:	f85d 7b04 	ldr.w	r7, [sp], #4
   18c5c:	4770      	bx	lr

00018c5e <secCmacGenSubkey2>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacGenSubkey2(secQueueBuf_t *pBuf)
{
   18c5e:	b580      	push	{r7, lr}
   18c60:	b084      	sub	sp, #16
   18c62:	af00      	add	r7, sp, #0
   18c64:	6078      	str	r0, [r7, #4]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   18c66:	687b      	ldr	r3, [r7, #4]
   18c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18c6a:	60fb      	str	r3, [r7, #12]
  uint8_t overflow;

  /* Copy the result of the AES oepration */
  Calc128Cpy(pCmac->subkey, pBuf->ciphertext);
   18c6c:	68fb      	ldr	r3, [r7, #12]
   18c6e:	f103 0214 	add.w	r2, r3, #20
   18c72:	687b      	ldr	r3, [r7, #4]
   18c74:	3308      	adds	r3, #8
   18c76:	4619      	mov	r1, r3
   18c78:	4610      	mov	r0, r2
   18c7a:	f7ff fe00 	bl	1887e <Calc128Cpy>

  /* Calculate the K1 subkey */
  overflow = secCmacKeyShift(pCmac->subkey, 1);
   18c7e:	68fb      	ldr	r3, [r7, #12]
   18c80:	3314      	adds	r3, #20
   18c82:	2101      	movs	r1, #1
   18c84:	4618      	mov	r0, r3
   18c86:	f7ff ffb3 	bl	18bf0 <secCmacKeyShift>
   18c8a:	4603      	mov	r3, r0
   18c8c:	72fb      	strb	r3, [r7, #11]

  if (overflow)
   18c8e:	7afb      	ldrb	r3, [r7, #11]
   18c90:	2b00      	cmp	r3, #0
   18c92:	d007      	beq.n	18ca4 <secCmacGenSubkey2+0x46>
  {
    pCmac->subkey[0] ^= SEC_CMAC_RB;
   18c94:	68fb      	ldr	r3, [r7, #12]
   18c96:	7d1b      	ldrb	r3, [r3, #20]
   18c98:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   18c9c:	43db      	mvns	r3, r3
   18c9e:	b2da      	uxtb	r2, r3
   18ca0:	68fb      	ldr	r3, [r7, #12]
   18ca2:	751a      	strb	r2, [r3, #20]
  }

  if (pCmac->len % SEC_BLOCK_LEN != 0)
   18ca4:	68fb      	ldr	r3, [r7, #12]
   18ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   18ca8:	f003 030f 	and.w	r3, r3, #15
   18cac:	b29b      	uxth	r3, r3
   18cae:	2b00      	cmp	r3, #0
   18cb0:	d012      	beq.n	18cd8 <secCmacGenSubkey2+0x7a>
  {
    /* If the message len is not a multiple of SEC_BLOCK_LEN */
    /* Continue with generation of the K2 subkey based on the K1 key */
    overflow = secCmacKeyShift(pCmac->subkey, 1);
   18cb2:	68fb      	ldr	r3, [r7, #12]
   18cb4:	3314      	adds	r3, #20
   18cb6:	2101      	movs	r1, #1
   18cb8:	4618      	mov	r0, r3
   18cba:	f7ff ff99 	bl	18bf0 <secCmacKeyShift>
   18cbe:	4603      	mov	r3, r0
   18cc0:	72fb      	strb	r3, [r7, #11]

    if (overflow)
   18cc2:	7afb      	ldrb	r3, [r7, #11]
   18cc4:	2b00      	cmp	r3, #0
   18cc6:	d007      	beq.n	18cd8 <secCmacGenSubkey2+0x7a>
    {
      pCmac->subkey[0] ^= SEC_CMAC_RB;
   18cc8:	68fb      	ldr	r3, [r7, #12]
   18cca:	7d1b      	ldrb	r3, [r3, #20]
   18ccc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
   18cd0:	43db      	mvns	r3, r3
   18cd2:	b2da      	uxtb	r2, r3
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	751a      	strb	r2, [r3, #20]
    }
  }

  /* Begin CMAC calculation */
  pCmac->state = SEC_CMAC_STATE_BLOCK;
   18cd8:	68fb      	ldr	r3, [r7, #12]
   18cda:	2201      	movs	r2, #1
   18cdc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  secCmacProcessBlock(pBuf);
   18ce0:	6878      	ldr	r0, [r7, #4]
   18ce2:	f7ff fee9 	bl	18ab8 <secCmacProcessBlock>
}
   18ce6:	bf00      	nop
   18ce8:	3710      	adds	r7, #16
   18cea:	46bd      	mov	sp, r7
   18cec:	bd80      	pop	{r7, pc}

00018cee <secCmacComplete>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secCmacComplete(secQueueBuf_t *pBuf)
{
   18cee:	b580      	push	{r7, lr}
   18cf0:	b084      	sub	sp, #16
   18cf2:	af00      	add	r7, sp, #0
   18cf4:	6078      	str	r0, [r7, #4]
  /* CMAC is complete, copy and send result to handler */
  secCmacMsg_t *pMsg = (secCmacMsg_t *) &pBuf->msg;
   18cf6:	687b      	ldr	r3, [r7, #4]
   18cf8:	60fb      	str	r3, [r7, #12]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t*) pBuf->pCb;
   18cfa:	687b      	ldr	r3, [r7, #4]
   18cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18cfe:	60bb      	str	r3, [r7, #8]

  WStrReverse(pBuf->ciphertext, SEC_CMAC_KEY_LEN);
   18d00:	687b      	ldr	r3, [r7, #4]
   18d02:	3308      	adds	r3, #8
   18d04:	2110      	movs	r1, #16
   18d06:	4618      	mov	r0, r3
   18d08:	f7ff fe1d 	bl	18946 <WStrReverse>
  pMsg->pCiphertext = pBuf->ciphertext;
   18d0c:	687b      	ldr	r3, [r7, #4]
   18d0e:	f103 0208 	add.w	r2, r3, #8
   18d12:	68fb      	ldr	r3, [r7, #12]
   18d14:	605a      	str	r2, [r3, #4]
  WsfBufFree(pCmac->pPlainText);
   18d16:	68bb      	ldr	r3, [r7, #8]
   18d18:	681b      	ldr	r3, [r3, #0]
   18d1a:	4618      	mov	r0, r3
   18d1c:	f7fe fe52 	bl	179c4 <WsfBufFree>

  WsfMsgSend(pCmac->handlerId, pMsg);
   18d20:	68bb      	ldr	r3, [r7, #8]
   18d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18d26:	68f9      	ldr	r1, [r7, #12]
   18d28:	4618      	mov	r0, r3
   18d2a:	f7fe febe 	bl	17aaa <WsfMsgSend>
}
   18d2e:	bf00      	nop
   18d30:	3710      	adds	r7, #16
   18d32:	46bd      	mov	sp, r7
   18d34:	bd80      	pop	{r7, pc}

00018d36 <SecCmacHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecCmacHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18d36:	b580      	push	{r7, lr}
   18d38:	b086      	sub	sp, #24
   18d3a:	af00      	add	r7, sp, #0
   18d3c:	60f8      	str	r0, [r7, #12]
   18d3e:	60b9      	str	r1, [r7, #8]
   18d40:	4613      	mov	r3, r2
   18d42:	71fb      	strb	r3, [r7, #7]
  secCmacSecCb_t *pCmac = (secCmacSecCb_t *) pBuf->pCb;
   18d44:	68fb      	ldr	r3, [r7, #12]
   18d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18d48:	617b      	str	r3, [r7, #20]

  if (pCmac)
   18d4a:	697b      	ldr	r3, [r7, #20]
   18d4c:	2b00      	cmp	r3, #0
   18d4e:	d01e      	beq.n	18d8e <SecCmacHciCback+0x58>
  {
    Calc128Cpy(pBuf->ciphertext, pEvent->leEncryptCmdCmpl.data);
   18d50:	68fb      	ldr	r3, [r7, #12]
   18d52:	f103 0208 	add.w	r2, r3, #8
   18d56:	68bb      	ldr	r3, [r7, #8]
   18d58:	3305      	adds	r3, #5
   18d5a:	4619      	mov	r1, r3
   18d5c:	4610      	mov	r0, r2
   18d5e:	f7ff fd8e 	bl	1887e <Calc128Cpy>

    switch (pCmac->state)
   18d62:	697b      	ldr	r3, [r7, #20]
   18d64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   18d68:	2b01      	cmp	r3, #1
   18d6a:	d008      	beq.n	18d7e <SecCmacHciCback+0x48>
   18d6c:	2b02      	cmp	r3, #2
   18d6e:	d00a      	beq.n	18d86 <SecCmacHciCback+0x50>
   18d70:	2b00      	cmp	r3, #0
   18d72:	d000      	beq.n	18d76 <SecCmacHciCback+0x40>
    case SEC_CMAC_STATE_COMPLETE:
      secCmacComplete(pBuf);
      break;
    }
  }
}
   18d74:	e00b      	b.n	18d8e <SecCmacHciCback+0x58>
      secCmacGenSubkey2(pBuf);
   18d76:	68f8      	ldr	r0, [r7, #12]
   18d78:	f7ff ff71 	bl	18c5e <secCmacGenSubkey2>
      break;
   18d7c:	e007      	b.n	18d8e <SecCmacHciCback+0x58>
      secCmacProcessBlock(pBuf);
   18d7e:	68f8      	ldr	r0, [r7, #12]
   18d80:	f7ff fe9a 	bl	18ab8 <secCmacProcessBlock>
      break;
   18d84:	e003      	b.n	18d8e <SecCmacHciCback+0x58>
      secCmacComplete(pBuf);
   18d86:	68f8      	ldr	r0, [r7, #12]
   18d88:	f7ff ffb1 	bl	18cee <secCmacComplete>
      break;
   18d8c:	bf00      	nop
}
   18d8e:	bf00      	nop
   18d90:	3718      	adds	r7, #24
   18d92:	46bd      	mov	sp, r7
   18d94:	bd80      	pop	{r7, pc}
	...

00018d98 <SecCmac>:
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecCmac(const uint8_t *pKey, uint8_t *pPlainText, uint8_t textLen, wsfHandlerId_t handlerId,
               uint16_t param, uint8_t event)
{
   18d98:	b580      	push	{r7, lr}
   18d9a:	b088      	sub	sp, #32
   18d9c:	af00      	add	r7, sp, #0
   18d9e:	60f8      	str	r0, [r7, #12]
   18da0:	60b9      	str	r1, [r7, #8]
   18da2:	4611      	mov	r1, r2
   18da4:	461a      	mov	r2, r3
   18da6:	460b      	mov	r3, r1
   18da8:	71fb      	strb	r3, [r7, #7]
   18daa:	4613      	mov	r3, r2
   18dac:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secCmacSecCb_t);
   18dae:	235c      	movs	r3, #92	; 0x5c
   18db0:	83fb      	strh	r3, [r7, #30]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18db2:	8bfb      	ldrh	r3, [r7, #30]
   18db4:	4618      	mov	r0, r3
   18db6:	f7fe fe54 	bl	17a62 <WsfMsgAlloc>
   18dba:	61b8      	str	r0, [r7, #24]
   18dbc:	69bb      	ldr	r3, [r7, #24]
   18dbe:	2b00      	cmp	r3, #0
   18dc0:	d038      	beq.n	18e34 <SecCmac+0x9c>
  {
    secCmacSecCb_t *pCmacCb = (secCmacSecCb_t *) (pBuf + 1);
   18dc2:	69bb      	ldr	r3, [r7, #24]
   18dc4:	3330      	adds	r3, #48	; 0x30
   18dc6:	617b      	str	r3, [r7, #20]

    /* Setup queue buffer */
    pBuf->pCb = pCmacCb;
   18dc8:	69bb      	ldr	r3, [r7, #24]
   18dca:	697a      	ldr	r2, [r7, #20]
   18dcc:	629a      	str	r2, [r3, #40]	; 0x28
    pBuf->type = SEC_TYPE_CMAC;
   18dce:	69bb      	ldr	r3, [r7, #24]
   18dd0:	2201      	movs	r2, #1
   18dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    pBuf->msg.hdr.status = secCb.token++;
   18dd6:	4b1a      	ldr	r3, [pc, #104]	; (18e40 <SecCmac+0xa8>)
   18dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   18ddc:	1c5a      	adds	r2, r3, #1
   18dde:	b2d1      	uxtb	r1, r2
   18de0:	4a17      	ldr	r2, [pc, #92]	; (18e40 <SecCmac+0xa8>)
   18de2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   18de6:	69ba      	ldr	r2, [r7, #24]
   18de8:	70d3      	strb	r3, [r2, #3]
    pBuf->msg.hdr.param = param;
   18dea:	69bb      	ldr	r3, [r7, #24]
   18dec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   18dee:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18df0:	69bb      	ldr	r3, [r7, #24]
   18df2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   18df6:	709a      	strb	r2, [r3, #2]

    pCmacCb->pPlainText = pPlainText;
   18df8:	697b      	ldr	r3, [r7, #20]
   18dfa:	68ba      	ldr	r2, [r7, #8]
   18dfc:	601a      	str	r2, [r3, #0]

    pCmacCb->len = textLen;
   18dfe:	79fb      	ldrb	r3, [r7, #7]
   18e00:	b29a      	uxth	r2, r3
   18e02:	697b      	ldr	r3, [r7, #20]
   18e04:	84da      	strh	r2, [r3, #38]	; 0x26
    pCmacCb->position = 0;
   18e06:	697b      	ldr	r3, [r7, #20]
   18e08:	2200      	movs	r2, #0
   18e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    pCmacCb->handlerId = handlerId;
   18e0c:	697b      	ldr	r3, [r7, #20]
   18e0e:	79ba      	ldrb	r2, [r7, #6]
   18e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pCmacCb->state = SEC_CMAC_STATE_SUBKEY;
   18e14:	697b      	ldr	r3, [r7, #20]
   18e16:	2200      	movs	r2, #0
   18e18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Copy key */
    WStrReverseCpy(pCmacCb->key, pKey, SEC_CMAC_KEY_LEN);
   18e1c:	697b      	ldr	r3, [r7, #20]
   18e1e:	3304      	adds	r3, #4
   18e20:	2210      	movs	r2, #16
   18e22:	68f9      	ldr	r1, [r7, #12]
   18e24:	4618      	mov	r0, r3
   18e26:	f7ff fd65 	bl	188f4 <WStrReverseCpy>

    /* Start the CMAC process by calculating the subkey */
    secCmacGenSubkey1(pBuf);
   18e2a:	69b8      	ldr	r0, [r7, #24]
   18e2c:	f7ff febc 	bl	18ba8 <secCmacGenSubkey1>

    return TRUE;
   18e30:	2301      	movs	r3, #1
   18e32:	e000      	b.n	18e36 <SecCmac+0x9e>
  }

  return FALSE;
   18e34:	2300      	movs	r3, #0
}
   18e36:	4618      	mov	r0, r3
   18e38:	3720      	adds	r7, #32
   18e3a:	46bd      	mov	sp, r7
   18e3c:	bd80      	pop	{r7, pc}
   18e3e:	bf00      	nop
   18e40:	10006ec8 	.word	0x10006ec8

00018e44 <SecCmacInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecCmacInit()
{
   18e44:	b480      	push	{r7}
   18e46:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_CMAC] = SecCmacHciCback;
   18e48:	4b03      	ldr	r3, [pc, #12]	; (18e58 <SecCmacInit+0x14>)
   18e4a:	4a04      	ldr	r2, [pc, #16]	; (18e5c <SecCmacInit+0x18>)
   18e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
   18e4e:	bf00      	nop
   18e50:	46bd      	mov	sp, r7
   18e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   18e56:	4770      	bx	lr
   18e58:	10006ec8 	.word	0x10006ec8
   18e5c:	00018d37 	.word	0x00018d37

00018e60 <SecEccHciCback>:
 *
 *  \return none.
 */
/*************************************************************************************************/
void SecEccHciCback(secQueueBuf_t *pBuf, hciEvt_t *pEvent, wsfHandlerId_t handlerId)
{
   18e60:	b580      	push	{r7, lr}
   18e62:	b086      	sub	sp, #24
   18e64:	af00      	add	r7, sp, #0
   18e66:	60f8      	str	r0, [r7, #12]
   18e68:	60b9      	str	r1, [r7, #8]
   18e6a:	4613      	mov	r3, r2
   18e6c:	71fb      	strb	r3, [r7, #7]
  secEccMsg_t *pMsg = (secEccMsg_t *) &pBuf->msg;
   18e6e:	68fb      	ldr	r3, [r7, #12]
   18e70:	617b      	str	r3, [r7, #20]

  if (pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT)
   18e72:	68bb      	ldr	r3, [r7, #8]
   18e74:	789b      	ldrb	r3, [r3, #2]
   18e76:	2b25      	cmp	r3, #37	; 0x25
   18e78:	d11b      	bne.n	18eb2 <SecEccHciCback+0x52>
  {
    /* Reverse copy the public key (to big endian) */
    WStrReverseCpy(pMsg->data.key.pubKey_x, pEvent->leP256.key, SEC_ECC_KEY_LEN);
   18e7a:	697b      	ldr	r3, [r7, #20]
   18e7c:	1d18      	adds	r0, r3, #4
   18e7e:	68bb      	ldr	r3, [r7, #8]
   18e80:	3305      	adds	r3, #5
   18e82:	2220      	movs	r2, #32
   18e84:	4619      	mov	r1, r3
   18e86:	f7ff fd35 	bl	188f4 <WStrReverseCpy>
    WStrReverseCpy(pMsg->data.key.pubKey_y, pEvent->leP256.key + SEC_ECC_KEY_LEN, SEC_ECC_KEY_LEN);
   18e8a:	697b      	ldr	r3, [r7, #20]
   18e8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
   18e90:	68bb      	ldr	r3, [r7, #8]
   18e92:	3305      	adds	r3, #5
   18e94:	3320      	adds	r3, #32
   18e96:	2220      	movs	r2, #32
   18e98:	4619      	mov	r1, r3
   18e9a:	f7ff fd2b 	bl	188f4 <WStrReverseCpy>

    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leP256.status;
   18e9e:	68bb      	ldr	r3, [r7, #8]
   18ea0:	791a      	ldrb	r2, [r3, #4]
   18ea2:	697b      	ldr	r3, [r7, #20]
   18ea4:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   18ea6:	79fb      	ldrb	r3, [r7, #7]
   18ea8:	6979      	ldr	r1, [r7, #20]
   18eaa:	4618      	mov	r0, r3
   18eac:	f7fe fdfd 	bl	17aaa <WsfMsgSend>
    }
    /* Send shared secret to handler */
    pMsg->hdr.status = pEvent->leGenDHKey.status;
    WsfMsgSend(handlerId, pMsg);
  }
}
   18eb0:	e01f      	b.n	18ef2 <SecEccHciCback+0x92>
  else if (pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   18eb2:	68bb      	ldr	r3, [r7, #8]
   18eb4:	789b      	ldrb	r3, [r3, #2]
   18eb6:	2b26      	cmp	r3, #38	; 0x26
   18eb8:	d11b      	bne.n	18ef2 <SecEccHciCback+0x92>
    WStrReverseCpy(pMsg->data.sharedSecret.secret, pEvent->leGenDHKey.key, SEC_ECC_KEY_LEN);
   18eba:	697b      	ldr	r3, [r7, #20]
   18ebc:	1d18      	adds	r0, r3, #4
   18ebe:	68bb      	ldr	r3, [r7, #8]
   18ec0:	3305      	adds	r3, #5
   18ec2:	2220      	movs	r2, #32
   18ec4:	4619      	mov	r1, r3
   18ec6:	f7ff fd15 	bl	188f4 <WStrReverseCpy>
    if(pEvent->leGenDHKey.status != HCI_SUCCESS) {
   18eca:	68bb      	ldr	r3, [r7, #8]
   18ecc:	791b      	ldrb	r3, [r3, #4]
   18ece:	2b00      	cmp	r3, #0
   18ed0:	d006      	beq.n	18ee0 <SecEccHciCback+0x80>
      memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   18ed2:	697b      	ldr	r3, [r7, #20]
   18ed4:	3304      	adds	r3, #4
   18ed6:	2220      	movs	r2, #32
   18ed8:	21ff      	movs	r1, #255	; 0xff
   18eda:	4618      	mov	r0, r3
   18edc:	f7f3 fa3e 	bl	c35c <memset>
    pMsg->hdr.status = pEvent->leGenDHKey.status;
   18ee0:	68bb      	ldr	r3, [r7, #8]
   18ee2:	791a      	ldrb	r2, [r3, #4]
   18ee4:	697b      	ldr	r3, [r7, #20]
   18ee6:	70da      	strb	r2, [r3, #3]
    WsfMsgSend(handlerId, pMsg);
   18ee8:	79fb      	ldrb	r3, [r7, #7]
   18eea:	6979      	ldr	r1, [r7, #20]
   18eec:	4618      	mov	r0, r3
   18eee:	f7fe fddc 	bl	17aaa <WsfMsgSend>
}
   18ef2:	bf00      	nop
   18ef4:	3718      	adds	r7, #24
   18ef6:	46bd      	mov	sp, r7
   18ef8:	bd80      	pop	{r7, pc}
	...

00018efc <SecEccGenKey>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenKey(wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   18efc:	b580      	push	{r7, lr}
   18efe:	b084      	sub	sp, #16
   18f00:	af00      	add	r7, sp, #0
   18f02:	4603      	mov	r3, r0
   18f04:	71fb      	strb	r3, [r7, #7]
   18f06:	460b      	mov	r3, r1
   18f08:	80bb      	strh	r3, [r7, #4]
   18f0a:	4613      	mov	r3, r2
   18f0c:	71bb      	strb	r3, [r7, #6]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   18f0e:	2394      	movs	r3, #148	; 0x94
   18f10:	81fb      	strh	r3, [r7, #14]

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18f12:	89fb      	ldrh	r3, [r7, #14]
   18f14:	4618      	mov	r0, r3
   18f16:	f7fe fda4 	bl	17a62 <WsfMsgAlloc>
   18f1a:	60b8      	str	r0, [r7, #8]
   18f1c:	68bb      	ldr	r3, [r7, #8]
   18f1e:	2b00      	cmp	r3, #0
   18f20:	d013      	beq.n	18f4a <SecEccGenKey+0x4e>
  {
    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   18f22:	68bb      	ldr	r3, [r7, #8]
   18f24:	88ba      	ldrh	r2, [r7, #4]
   18f26:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   18f28:	68bb      	ldr	r3, [r7, #8]
   18f2a:	79ba      	ldrb	r2, [r7, #6]
   18f2c:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   18f2e:	68bb      	ldr	r3, [r7, #8]
   18f30:	2202      	movs	r2, #2
   18f32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   18f36:	79fb      	ldrb	r3, [r7, #7]
   18f38:	68ba      	ldr	r2, [r7, #8]
   18f3a:	4619      	mov	r1, r3
   18f3c:	4805      	ldr	r0, [pc, #20]	; (18f54 <SecEccGenKey+0x58>)
   18f3e:	f7fe fdcc 	bl	17ada <WsfMsgEnq>

    /* Request the local public key via HCI */
    HciLeReadLocalP256PubKey();
   18f42:	f7fb f8d3 	bl	140ec <HciLeReadLocalP256PubKey>

    return TRUE;
   18f46:	2301      	movs	r3, #1
   18f48:	e000      	b.n	18f4c <SecEccGenKey+0x50>
  }

  return FALSE;
   18f4a:	2300      	movs	r3, #0
}
   18f4c:	4618      	mov	r0, r3
   18f4e:	3710      	adds	r7, #16
   18f50:	46bd      	mov	sp, r7
   18f52:	bd80      	pop	{r7, pc}
   18f54:	10006ee8 	.word	0x10006ee8

00018f58 <SecEccGenSharedSecret>:
 *
 *  \return TRUE if successful, else FALSE.
 */
/*************************************************************************************************/
bool_t SecEccGenSharedSecret(secEccKey_t *pKey, wsfHandlerId_t handlerId, uint16_t param, uint8_t event)
{
   18f58:	b580      	push	{r7, lr}
   18f5a:	b09e      	sub	sp, #120	; 0x78
   18f5c:	af00      	add	r7, sp, #0
   18f5e:	6078      	str	r0, [r7, #4]
   18f60:	4608      	mov	r0, r1
   18f62:	4611      	mov	r1, r2
   18f64:	461a      	mov	r2, r3
   18f66:	4603      	mov	r3, r0
   18f68:	70fb      	strb	r3, [r7, #3]
   18f6a:	460b      	mov	r3, r1
   18f6c:	803b      	strh	r3, [r7, #0]
   18f6e:	4613      	mov	r3, r2
   18f70:	70bb      	strb	r3, [r7, #2]
  secQueueBuf_t *pBuf;
  uint16_t bufSize = sizeof(secQueueBuf_t) + sizeof(secEccMsg_t);
   18f72:	2394      	movs	r3, #148	; 0x94
   18f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

  if ((pBuf = WsfMsgAlloc(bufSize)) != NULL)
   18f78:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
   18f7c:	4618      	mov	r0, r3
   18f7e:	f7fe fd70 	bl	17a62 <WsfMsgAlloc>
   18f82:	6738      	str	r0, [r7, #112]	; 0x70
   18f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18f86:	2b00      	cmp	r3, #0
   18f88:	d060      	beq.n	1904c <SecEccGenSharedSecret+0xf4>
  {
	  secEccKey_t           temp_ecc_key;

    /* Reverse keys (to little endian) */
    WStrReverseCpy(temp_ecc_key.pubKey_x, pKey->pubKey_x, SEC_ECC_KEY_LEN);
   18f8a:	6879      	ldr	r1, [r7, #4]
   18f8c:	f107 030c 	add.w	r3, r7, #12
   18f90:	2220      	movs	r2, #32
   18f92:	4618      	mov	r0, r3
   18f94:	f7ff fcae 	bl	188f4 <WStrReverseCpy>
    WStrReverseCpy(temp_ecc_key.pubKey_y, pKey->pubKey_y, SEC_ECC_KEY_LEN);
   18f98:	687b      	ldr	r3, [r7, #4]
   18f9a:	f103 0120 	add.w	r1, r3, #32
   18f9e:	f107 030c 	add.w	r3, r7, #12
   18fa2:	3320      	adds	r3, #32
   18fa4:	2220      	movs	r2, #32
   18fa6:	4618      	mov	r0, r3
   18fa8:	f7ff fca4 	bl	188f4 <WStrReverseCpy>
	
    #if defined(AM_PART_APOLLO) || defined(AM_PART_APOLLO2)
    {
    #else
    if(!APOLLO3_B0) 
   18fac:	4b2a      	ldr	r3, [pc, #168]	; (19058 <SecEccGenSharedSecret+0x100>)
   18fae:	68db      	ldr	r3, [r3, #12]
   18fb0:	b2db      	uxtb	r3, r3
   18fb2:	2b21      	cmp	r3, #33	; 0x21
   18fb4:	d02e      	beq.n	19014 <SecEccGenSharedSecret+0xbc>
    {
    #endif
      // at this time only B0 has fix for the security vulnerability.
      if(!uECC_valid_public_key(temp_ecc_key.pubKey_x, uECC_secp256r1()))
   18fb6:	f008 fd23 	bl	21a00 <uECC_secp256r1>
   18fba:	4602      	mov	r2, r0
   18fbc:	f107 030c 	add.w	r3, r7, #12
   18fc0:	4611      	mov	r1, r2
   18fc2:	4618      	mov	r0, r3
   18fc4:	f008 fd96 	bl	21af4 <uECC_valid_public_key>
   18fc8:	4603      	mov	r3, r0
   18fca:	2b00      	cmp	r3, #0
   18fcc:	d122      	bne.n	19014 <SecEccGenSharedSecret+0xbc>
      {

        WsfMsgFree(pBuf);
   18fce:	6f38      	ldr	r0, [r7, #112]	; 0x70
   18fd0:	f7fe fd5e 	bl	17a90 <WsfMsgFree>

        secEccMsg_t *pMsg = WsfMsgAlloc(sizeof(secEccMsg_t));
   18fd4:	2064      	movs	r0, #100	; 0x64
   18fd6:	f7fe fd44 	bl	17a62 <WsfMsgAlloc>
   18fda:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (pMsg)
   18fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18fde:	2b00      	cmp	r3, #0
   18fe0:	d016      	beq.n	19010 <SecEccGenSharedSecret+0xb8>
        {
          // set invalid shared key as suggested by the security errata
          memset(pMsg->data.sharedSecret.secret, 0xFF, SEC_ECC_KEY_LEN);
   18fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18fe4:	3304      	adds	r3, #4
   18fe6:	2220      	movs	r2, #32
   18fe8:	21ff      	movs	r1, #255	; 0xff
   18fea:	4618      	mov	r0, r3
   18fec:	f7f3 f9b6 	bl	c35c <memset>
          /* Send shared secret to handler */  
          pMsg->hdr.event = event;
   18ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18ff2:	78ba      	ldrb	r2, [r7, #2]
   18ff4:	709a      	strb	r2, [r3, #2]
          pMsg->hdr.param = param;
   18ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18ff8:	883a      	ldrh	r2, [r7, #0]
   18ffa:	801a      	strh	r2, [r3, #0]
          pMsg->hdr.status = HCI_SUCCESS;
   18ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   18ffe:	2200      	movs	r2, #0
   19000:	70da      	strb	r2, [r3, #3]
          WsfMsgSend(handlerId, pMsg);
   19002:	78fb      	ldrb	r3, [r7, #3]
   19004:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
   19006:	4618      	mov	r0, r3
   19008:	f7fe fd4f 	bl	17aaa <WsfMsgSend>
          return TRUE;
   1900c:	2301      	movs	r3, #1
   1900e:	e01e      	b.n	1904e <SecEccGenSharedSecret+0xf6>
        }
        else {
          return FALSE;
   19010:	2300      	movs	r3, #0
   19012:	e01c      	b.n	1904e <SecEccGenSharedSecret+0xf6>
    // At this point either remote public key is valid or controller has
    // the fix for the security vulnerability.
    // 

    /* Record the event and parameter for use in the HCI response */
    pBuf->msg.hdr.param = param;
   19014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   19016:	883a      	ldrh	r2, [r7, #0]
   19018:	801a      	strh	r2, [r3, #0]
    pBuf->msg.hdr.event = event;
   1901a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1901c:	78ba      	ldrb	r2, [r7, #2]
   1901e:	709a      	strb	r2, [r3, #2]
    pBuf->type = SEC_TYPE_DH;
   19020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   19022:	2202      	movs	r2, #2
   19024:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* queue buffer */
    WsfMsgEnq(&secCb.queue, handlerId, pBuf);
   19028:	78fb      	ldrb	r3, [r7, #3]
   1902a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   1902c:	4619      	mov	r1, r3
   1902e:	480b      	ldr	r0, [pc, #44]	; (1905c <SecEccGenSharedSecret+0x104>)
   19030:	f7fe fd53 	bl	17ada <WsfMsgEnq>

    /* Request the DH Key via HCI */
    HciLeGenerateDHKey(temp_ecc_key.pubKey_x, temp_ecc_key.pubKey_y);
   19034:	f107 030c 	add.w	r3, r7, #12
   19038:	f103 0220 	add.w	r2, r3, #32
   1903c:	f107 030c 	add.w	r3, r7, #12
   19040:	4611      	mov	r1, r2
   19042:	4618      	mov	r0, r3
   19044:	f7fb f865 	bl	14112 <HciLeGenerateDHKey>

    return TRUE;
   19048:	2301      	movs	r3, #1
   1904a:	e000      	b.n	1904e <SecEccGenSharedSecret+0xf6>
  }

  return FALSE;
   1904c:	2300      	movs	r3, #0
}
   1904e:	4618      	mov	r0, r3
   19050:	3778      	adds	r7, #120	; 0x78
   19052:	46bd      	mov	sp, r7
   19054:	bd80      	pop	{r7, pc}
   19056:	bf00      	nop
   19058:	40020000 	.word	0x40020000
   1905c:	10006ee8 	.word	0x10006ee8

00019060 <SecEccInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecEccInit()
{
   19060:	b480      	push	{r7}
   19062:	af00      	add	r7, sp, #0
  secCb.hciCbackTbl[SEC_TYPE_DH] = SecEccHciCback;
   19064:	4b03      	ldr	r3, [pc, #12]	; (19074 <SecEccInit+0x14>)
   19066:	4a04      	ldr	r2, [pc, #16]	; (19078 <SecEccInit+0x18>)
   19068:	635a      	str	r2, [r3, #52]	; 0x34
}
   1906a:	bf00      	nop
   1906c:	46bd      	mov	sp, r7
   1906e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19072:	4770      	bx	lr
   19074:	10006ec8 	.word	0x10006ec8
   19078:	00018e61 	.word	0x00018e61

0001907c <secHciCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void secHciCback(hciEvt_t *pEvent)
{
   1907c:	b580      	push	{r7, lr}
   1907e:	b084      	sub	sp, #16
   19080:	af00      	add	r7, sp, #0
   19082:	6078      	str	r0, [r7, #4]
  secQueueBuf_t  *pBuf  = NULL;
   19084:	2300      	movs	r3, #0
   19086:	60fb      	str	r3, [r7, #12]
  wsfHandlerId_t    handlerId = 0;
   19088:	2300      	movs	r3, #0
   1908a:	72fb      	strb	r3, [r7, #11]
  
  /* handle random number event */
  if (pEvent->hdr.event == HCI_LE_RAND_CMD_CMPL_CBACK_EVT)
   1908c:	687b      	ldr	r3, [r7, #4]
   1908e:	789b      	ldrb	r3, [r3, #2]
   19090:	2b1c      	cmp	r3, #28
   19092:	d10c      	bne.n	190ae <secHciCback+0x32>
  {
    /* move up data by eight bytes */    
    memmove(&secCb.rand[HCI_RAND_LEN], secCb.rand, HCI_RAND_LEN * (SEC_HCI_RAND_MULT-1));
   19094:	2218      	movs	r2, #24
   19096:	492a      	ldr	r1, [pc, #168]	; (19140 <secHciCback+0xc4>)
   19098:	482a      	ldr	r0, [pc, #168]	; (19144 <secHciCback+0xc8>)
   1909a:	f7f3 f8fb 	bl	c294 <memmove>
    
    /* copy new data to random data buffer */
    memcpy(secCb.rand, pEvent->leRandCmdCmpl.randNum, HCI_RAND_LEN);
   1909e:	687b      	ldr	r3, [r7, #4]
   190a0:	3305      	adds	r3, #5
   190a2:	2208      	movs	r2, #8
   190a4:	4619      	mov	r1, r3
   190a6:	4826      	ldr	r0, [pc, #152]	; (19140 <secHciCback+0xc4>)
   190a8:	f7f3 f85a 	bl	c160 <memcpy>
      WsfMsgFree(pBuf);
    }  
    
    secCb.token = 0;
  }
}
   190ac:	e044      	b.n	19138 <secHciCback+0xbc>
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   190ae:	687b      	ldr	r3, [r7, #4]
   190b0:	789b      	ldrb	r3, [r3, #2]
   190b2:	2b1b      	cmp	r3, #27
   190b4:	d007      	beq.n	190c6 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   190b6:	687b      	ldr	r3, [r7, #4]
   190b8:	789b      	ldrb	r3, [r3, #2]
  else if (pEvent->hdr.event == HCI_LE_ENCRYPT_CMD_CMPL_CBACK_EVT ||
   190ba:	2b25      	cmp	r3, #37	; 0x25
   190bc:	d003      	beq.n	190c6 <secHciCback+0x4a>
           pEvent->hdr.event == HCI_LE_GENERATE_DHKEY_CMPL_CBACK_EVT)
   190be:	687b      	ldr	r3, [r7, #4]
   190c0:	789b      	ldrb	r3, [r3, #2]
           pEvent->hdr.event == HCI_LE_READ_LOCAL_P256_PUB_KEY_CMPL_CBACK_EVT ||
   190c2:	2b26      	cmp	r3, #38	; 0x26
   190c4:	d120      	bne.n	19108 <secHciCback+0x8c>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   190c6:	f107 030b 	add.w	r3, r7, #11
   190ca:	4619      	mov	r1, r3
   190cc:	481e      	ldr	r0, [pc, #120]	; (19148 <secHciCback+0xcc>)
   190ce:	f7fe fd19 	bl	17b04 <WsfMsgDeq>
   190d2:	60f8      	str	r0, [r7, #12]
   190d4:	68fb      	ldr	r3, [r7, #12]
   190d6:	2b00      	cmp	r3, #0
   190d8:	d02d      	beq.n	19136 <secHciCback+0xba>
      if (secCb.hciCbackTbl[pBuf->type])
   190da:	68fb      	ldr	r3, [r7, #12]
   190dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   190e0:	4a17      	ldr	r2, [pc, #92]	; (19140 <secHciCback+0xc4>)
   190e2:	330a      	adds	r3, #10
   190e4:	009b      	lsls	r3, r3, #2
   190e6:	4413      	add	r3, r2
   190e8:	685b      	ldr	r3, [r3, #4]
   190ea:	2b00      	cmp	r3, #0
   190ec:	d023      	beq.n	19136 <secHciCback+0xba>
        secCb.hciCbackTbl[pBuf->type](pBuf, pEvent, handlerId);
   190ee:	68fb      	ldr	r3, [r7, #12]
   190f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   190f4:	4a12      	ldr	r2, [pc, #72]	; (19140 <secHciCback+0xc4>)
   190f6:	330a      	adds	r3, #10
   190f8:	009b      	lsls	r3, r3, #2
   190fa:	4413      	add	r3, r2
   190fc:	685b      	ldr	r3, [r3, #4]
   190fe:	7afa      	ldrb	r2, [r7, #11]
   19100:	6879      	ldr	r1, [r7, #4]
   19102:	68f8      	ldr	r0, [r7, #12]
   19104:	4798      	blx	r3
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   19106:	e016      	b.n	19136 <secHciCback+0xba>
  else if (pEvent->hdr.event == HCI_HW_ERROR_CBACK_EVT)
   19108:	687b      	ldr	r3, [r7, #4]
   1910a:	789b      	ldrb	r3, [r3, #2]
   1910c:	2b14      	cmp	r3, #20
   1910e:	d113      	bne.n	19138 <secHciCback+0xbc>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   19110:	e002      	b.n	19118 <secHciCback+0x9c>
      WsfMsgFree(pBuf);
   19112:	68f8      	ldr	r0, [r7, #12]
   19114:	f7fe fcbc 	bl	17a90 <WsfMsgFree>
    while((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   19118:	f107 030b 	add.w	r3, r7, #11
   1911c:	4619      	mov	r1, r3
   1911e:	480a      	ldr	r0, [pc, #40]	; (19148 <secHciCback+0xcc>)
   19120:	f7fe fcf0 	bl	17b04 <WsfMsgDeq>
   19124:	60f8      	str	r0, [r7, #12]
   19126:	68fb      	ldr	r3, [r7, #12]
   19128:	2b00      	cmp	r3, #0
   1912a:	d1f2      	bne.n	19112 <secHciCback+0x96>
    secCb.token = 0;
   1912c:	4b04      	ldr	r3, [pc, #16]	; (19140 <secHciCback+0xc4>)
   1912e:	2200      	movs	r2, #0
   19130:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
   19134:	e000      	b.n	19138 <secHciCback+0xbc>
    if ((pBuf = WsfMsgDeq(&secCb.queue, &handlerId)) != NULL)
   19136:	bf00      	nop
}
   19138:	bf00      	nop
   1913a:	3710      	adds	r7, #16
   1913c:	46bd      	mov	sp, r7
   1913e:	bd80      	pop	{r7, pc}
   19140:	10006ec8 	.word	0x10006ec8
   19144:	10006ed0 	.word	0x10006ed0
   19148:	10006ee8 	.word	0x10006ee8

0001914c <SecInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecInit(void)
{
   1914c:	b580      	push	{r7, lr}
   1914e:	af00      	add	r7, sp, #0
  WSF_QUEUE_INIT(&secCb.queue);
   19150:	4b07      	ldr	r3, [pc, #28]	; (19170 <SecInit+0x24>)
   19152:	2200      	movs	r2, #0
   19154:	621a      	str	r2, [r3, #32]
   19156:	4b06      	ldr	r3, [pc, #24]	; (19170 <SecInit+0x24>)
   19158:	2200      	movs	r2, #0
   1915a:	625a      	str	r2, [r3, #36]	; 0x24
  secCb.token = 0;
   1915c:	4b04      	ldr	r3, [pc, #16]	; (19170 <SecInit+0x24>)
   1915e:	2200      	movs	r2, #0
   19160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Register callback with HCI */
  HciSecRegister(secHciCback);
   19164:	4803      	ldr	r0, [pc, #12]	; (19174 <SecInit+0x28>)
   19166:	f7fe faff 	bl	17768 <HciSecRegister>
}
   1916a:	bf00      	nop
   1916c:	bd80      	pop	{r7, pc}
   1916e:	bf00      	nop
   19170:	10006ec8 	.word	0x10006ec8
   19174:	0001907d 	.word	0x0001907d

00019178 <SecRand>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SecRand(uint8_t *pRand, uint8_t randLen)
{
   19178:	b580      	push	{r7, lr}
   1917a:	b084      	sub	sp, #16
   1917c:	af00      	add	r7, sp, #0
   1917e:	6078      	str	r0, [r7, #4]
   19180:	460b      	mov	r3, r1
   19182:	70fb      	strb	r3, [r7, #3]
  int8_t count = (randLen + HCI_RAND_LEN - 1) / HCI_RAND_LEN;
   19184:	78fb      	ldrb	r3, [r7, #3]
   19186:	3307      	adds	r3, #7
   19188:	2b00      	cmp	r3, #0
   1918a:	da00      	bge.n	1918e <SecRand+0x16>
   1918c:	3307      	adds	r3, #7
   1918e:	10db      	asrs	r3, r3, #3
   19190:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(randLen <= HCI_RAND_LEN * SEC_HCI_RAND_MULT);

  /* copy data */
  memcpy(pRand, secCb.rand, randLen);
   19192:	78fb      	ldrb	r3, [r7, #3]
   19194:	461a      	mov	r2, r3
   19196:	4909      	ldr	r1, [pc, #36]	; (191bc <SecRand+0x44>)
   19198:	6878      	ldr	r0, [r7, #4]
   1919a:	f7f2 ffe1 	bl	c160 <memcpy>
  
  /* get new random numbers */
  while (count--)
   1919e:	e001      	b.n	191a4 <SecRand+0x2c>
  {
    HciLeRandCmd();
   191a0:	f7fb f865 	bl	1426e <HciLeRandCmd>
  while (count--)
   191a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
   191a8:	b2da      	uxtb	r2, r3
   191aa:	3a01      	subs	r2, #1
   191ac:	b2d2      	uxtb	r2, r2
   191ae:	73fa      	strb	r2, [r7, #15]
   191b0:	2b00      	cmp	r3, #0
   191b2:	d1f5      	bne.n	191a0 <SecRand+0x28>
  }
}
   191b4:	bf00      	nop
   191b6:	3710      	adds	r7, #16
   191b8:	46bd      	mov	sp, r7
   191ba:	bd80      	pop	{r7, pc}
   191bc:	10006ec8 	.word	0x10006ec8

000191c0 <hrpsNoConnActive>:
 *
 *  \return TRUE if no connections active.
 */
/*************************************************************************************************/
static bool_t hrpsNoConnActive(void)
{
   191c0:	b480      	push	{r7}
   191c2:	b083      	sub	sp, #12
   191c4:	af00      	add	r7, sp, #0
  hrpsConn_t    *pConn = hrpsCb.conn;
   191c6:	4b0d      	ldr	r3, [pc, #52]	; (191fc <hrpsNoConnActive+0x3c>)
   191c8:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   191ca:	2300      	movs	r3, #0
   191cc:	70fb      	strb	r3, [r7, #3]
   191ce:	e00b      	b.n	191e8 <hrpsNoConnActive+0x28>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   191d0:	687b      	ldr	r3, [r7, #4]
   191d2:	781b      	ldrb	r3, [r3, #0]
   191d4:	2b00      	cmp	r3, #0
   191d6:	d001      	beq.n	191dc <hrpsNoConnActive+0x1c>
    {      
      return FALSE;
   191d8:	2300      	movs	r3, #0
   191da:	e009      	b.n	191f0 <hrpsNoConnActive+0x30>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   191dc:	78fb      	ldrb	r3, [r7, #3]
   191de:	3301      	adds	r3, #1
   191e0:	70fb      	strb	r3, [r7, #3]
   191e2:	687b      	ldr	r3, [r7, #4]
   191e4:	3302      	adds	r3, #2
   191e6:	607b      	str	r3, [r7, #4]
   191e8:	78fb      	ldrb	r3, [r7, #3]
   191ea:	2b07      	cmp	r3, #7
   191ec:	d9f0      	bls.n	191d0 <hrpsNoConnActive+0x10>
    }
  }
  return TRUE;
   191ee:	2301      	movs	r3, #1
}
   191f0:	4618      	mov	r0, r3
   191f2:	370c      	adds	r7, #12
   191f4:	46bd      	mov	sp, r7
   191f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   191fa:	4770      	bx	lr
   191fc:	10004384 	.word	0x10004384

00019200 <hrpsSetupToSend>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSetupToSend(void)
{
   19200:	b480      	push	{r7}
   19202:	b083      	sub	sp, #12
   19204:	af00      	add	r7, sp, #0
  hrpsConn_t    *pConn = hrpsCb.conn;
   19206:	4b0d      	ldr	r3, [pc, #52]	; (1923c <hrpsSetupToSend+0x3c>)
   19208:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1920a:	2300      	movs	r3, #0
   1920c:	70fb      	strb	r3, [r7, #3]
   1920e:	e00c      	b.n	1922a <hrpsSetupToSend+0x2a>
  {
    if (pConn->connId != DM_CONN_ID_NONE)
   19210:	687b      	ldr	r3, [r7, #4]
   19212:	781b      	ldrb	r3, [r3, #0]
   19214:	2b00      	cmp	r3, #0
   19216:	d002      	beq.n	1921e <hrpsSetupToSend+0x1e>
    {      
      pConn->hrmToSend = TRUE;
   19218:	687b      	ldr	r3, [r7, #4]
   1921a:	2201      	movs	r2, #1
   1921c:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1921e:	78fb      	ldrb	r3, [r7, #3]
   19220:	3301      	adds	r3, #1
   19222:	70fb      	strb	r3, [r7, #3]
   19224:	687b      	ldr	r3, [r7, #4]
   19226:	3302      	adds	r3, #2
   19228:	607b      	str	r3, [r7, #4]
   1922a:	78fb      	ldrb	r3, [r7, #3]
   1922c:	2b07      	cmp	r3, #7
   1922e:	d9ef      	bls.n	19210 <hrpsSetupToSend+0x10>
    }
  }
}
   19230:	bf00      	nop
   19232:	370c      	adds	r7, #12
   19234:	46bd      	mov	sp, r7
   19236:	f85d 7b04 	ldr.w	r7, [sp], #4
   1923a:	4770      	bx	lr
   1923c:	10004384 	.word	0x10004384

00019240 <hrpsFindNextToSend>:
 *
 *  \return Connection control block.
 */
/*************************************************************************************************/
static hrpsConn_t *hrpsFindNextToSend(uint8_t cccIdx)
{
   19240:	b580      	push	{r7, lr}
   19242:	b084      	sub	sp, #16
   19244:	af00      	add	r7, sp, #0
   19246:	4603      	mov	r3, r0
   19248:	71fb      	strb	r3, [r7, #7]
  hrpsConn_t    *pConn = hrpsCb.conn;
   1924a:	4b13      	ldr	r3, [pc, #76]	; (19298 <hrpsFindNextToSend+0x58>)
   1924c:	60fb      	str	r3, [r7, #12]
  uint8_t       i;
  
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1924e:	2300      	movs	r3, #0
   19250:	72fb      	strb	r3, [r7, #11]
   19252:	e019      	b.n	19288 <hrpsFindNextToSend+0x48>
  {
    if (pConn->connId != DM_CONN_ID_NONE && pConn->hrmToSend)
   19254:	68fb      	ldr	r3, [r7, #12]
   19256:	781b      	ldrb	r3, [r3, #0]
   19258:	2b00      	cmp	r3, #0
   1925a:	d00f      	beq.n	1927c <hrpsFindNextToSend+0x3c>
   1925c:	68fb      	ldr	r3, [r7, #12]
   1925e:	785b      	ldrb	r3, [r3, #1]
   19260:	2b00      	cmp	r3, #0
   19262:	d00b      	beq.n	1927c <hrpsFindNextToSend+0x3c>
    {
      if (AttsCccEnabled(pConn->connId, cccIdx))
   19264:	68fb      	ldr	r3, [r7, #12]
   19266:	781b      	ldrb	r3, [r3, #0]
   19268:	79fa      	ldrb	r2, [r7, #7]
   1926a:	4611      	mov	r1, r2
   1926c:	4618      	mov	r0, r3
   1926e:	f7f4 f869 	bl	d344 <AttsCccEnabled>
   19272:	4603      	mov	r3, r0
   19274:	2b00      	cmp	r3, #0
   19276:	d001      	beq.n	1927c <hrpsFindNextToSend+0x3c>
      {
        return pConn;
   19278:	68fb      	ldr	r3, [r7, #12]
   1927a:	e009      	b.n	19290 <hrpsFindNextToSend+0x50>
  for (i = 0; i < DM_CONN_MAX; i++, pConn++)
   1927c:	7afb      	ldrb	r3, [r7, #11]
   1927e:	3301      	adds	r3, #1
   19280:	72fb      	strb	r3, [r7, #11]
   19282:	68fb      	ldr	r3, [r7, #12]
   19284:	3302      	adds	r3, #2
   19286:	60fb      	str	r3, [r7, #12]
   19288:	7afb      	ldrb	r3, [r7, #11]
   1928a:	2b07      	cmp	r3, #7
   1928c:	d9e2      	bls.n	19254 <hrpsFindNextToSend+0x14>
      }
    }
  }
  return NULL;
   1928e:	2300      	movs	r3, #0
}
   19290:	4618      	mov	r0, r3
   19292:	3710      	adds	r7, #16
   19294:	46bd      	mov	sp, r7
   19296:	bd80      	pop	{r7, pc}
   19298:	10004384 	.word	0x10004384

0001929c <hrpsBuildHrm>:
 *
 *  \return Length of pBuf in bytes.
 */
/*************************************************************************************************/
static uint8_t hrpsBuildHrm(uint8_t *pBuf, appHrm_t *pHrm)
{
   1929c:	b480      	push	{r7}
   1929e:	b087      	sub	sp, #28
   192a0:	af00      	add	r7, sp, #0
   192a2:	6078      	str	r0, [r7, #4]
   192a4:	6039      	str	r1, [r7, #0]
  uint8_t   *p = pBuf;
   192a6:	687b      	ldr	r3, [r7, #4]
   192a8:	617b      	str	r3, [r7, #20]
  uint8_t   flags = pHrm->flags;
   192aa:	683b      	ldr	r3, [r7, #0]
   192ac:	7a5b      	ldrb	r3, [r3, #9]
   192ae:	72fb      	strb	r3, [r7, #11]
  uint8_t   i;
  uint16_t  *pInterval;
  
  /* flags */
  UINT8_TO_BSTREAM(p, flags);
   192b0:	697b      	ldr	r3, [r7, #20]
   192b2:	1c5a      	adds	r2, r3, #1
   192b4:	617a      	str	r2, [r7, #20]
   192b6:	7afa      	ldrb	r2, [r7, #11]
   192b8:	701a      	strb	r2, [r3, #0]
  
  /* heart rate measurement */
  if (flags & CH_HRM_FLAGS_VALUE_16BIT)
   192ba:	7afb      	ldrb	r3, [r7, #11]
   192bc:	f003 0301 	and.w	r3, r3, #1
   192c0:	2b00      	cmp	r3, #0
   192c2:	d00e      	beq.n	192e2 <hrpsBuildHrm+0x46>
  {
    UINT16_TO_BSTREAM(p, (uint16_t) pHrm->heartRate);
   192c4:	697b      	ldr	r3, [r7, #20]
   192c6:	1c5a      	adds	r2, r3, #1
   192c8:	617a      	str	r2, [r7, #20]
   192ca:	683a      	ldr	r2, [r7, #0]
   192cc:	7a12      	ldrb	r2, [r2, #8]
   192ce:	701a      	strb	r2, [r3, #0]
   192d0:	697b      	ldr	r3, [r7, #20]
   192d2:	1c5a      	adds	r2, r3, #1
   192d4:	617a      	str	r2, [r7, #20]
   192d6:	683a      	ldr	r2, [r7, #0]
   192d8:	7a12      	ldrb	r2, [r2, #8]
   192da:	1212      	asrs	r2, r2, #8
   192dc:	b2d2      	uxtb	r2, r2
   192de:	701a      	strb	r2, [r3, #0]
   192e0:	e005      	b.n	192ee <hrpsBuildHrm+0x52>
  }
  else
  {
    UINT8_TO_BSTREAM(p, pHrm->heartRate);
   192e2:	697b      	ldr	r3, [r7, #20]
   192e4:	1c5a      	adds	r2, r3, #1
   192e6:	617a      	str	r2, [r7, #20]
   192e8:	683a      	ldr	r2, [r7, #0]
   192ea:	7a12      	ldrb	r2, [r2, #8]
   192ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* energy expended */
  if (flags & CH_HRM_FLAGS_ENERGY_EXP)
   192ee:	7afb      	ldrb	r3, [r7, #11]
   192f0:	f003 0308 	and.w	r3, r3, #8
   192f4:	2b00      	cmp	r3, #0
   192f6:	d00f      	beq.n	19318 <hrpsBuildHrm+0x7c>
  {
    UINT16_TO_BSTREAM(p, pHrm->energyExp);
   192f8:	697b      	ldr	r3, [r7, #20]
   192fa:	1c5a      	adds	r2, r3, #1
   192fc:	617a      	str	r2, [r7, #20]
   192fe:	683a      	ldr	r2, [r7, #0]
   19300:	88d2      	ldrh	r2, [r2, #6]
   19302:	b2d2      	uxtb	r2, r2
   19304:	701a      	strb	r2, [r3, #0]
   19306:	697b      	ldr	r3, [r7, #20]
   19308:	1c5a      	adds	r2, r3, #1
   1930a:	617a      	str	r2, [r7, #20]
   1930c:	683a      	ldr	r2, [r7, #0]
   1930e:	88d2      	ldrh	r2, [r2, #6]
   19310:	0a12      	lsrs	r2, r2, #8
   19312:	b292      	uxth	r2, r2
   19314:	b2d2      	uxtb	r2, r2
   19316:	701a      	strb	r2, [r3, #0]
  }
  
  /* rr interval */
  if (flags & CH_HRM_FLAGS_RR_INTERVAL)
   19318:	7afb      	ldrb	r3, [r7, #11]
   1931a:	f003 0310 	and.w	r3, r3, #16
   1931e:	2b00      	cmp	r3, #0
   19320:	d01f      	beq.n	19362 <hrpsBuildHrm+0xc6>
  {
    pInterval = pHrm->pRrInterval;
   19322:	683b      	ldr	r3, [r7, #0]
   19324:	681b      	ldr	r3, [r3, #0]
   19326:	60fb      	str	r3, [r7, #12]
    for (i = pHrm->numIntervals; i > 0; i--, pInterval++)
   19328:	683b      	ldr	r3, [r7, #0]
   1932a:	791b      	ldrb	r3, [r3, #4]
   1932c:	74fb      	strb	r3, [r7, #19]
   1932e:	e015      	b.n	1935c <hrpsBuildHrm+0xc0>
    {
      UINT16_TO_BSTREAM(p, *pInterval);
   19330:	697b      	ldr	r3, [r7, #20]
   19332:	1c5a      	adds	r2, r3, #1
   19334:	617a      	str	r2, [r7, #20]
   19336:	68fa      	ldr	r2, [r7, #12]
   19338:	8812      	ldrh	r2, [r2, #0]
   1933a:	b2d2      	uxtb	r2, r2
   1933c:	701a      	strb	r2, [r3, #0]
   1933e:	697b      	ldr	r3, [r7, #20]
   19340:	1c5a      	adds	r2, r3, #1
   19342:	617a      	str	r2, [r7, #20]
   19344:	68fa      	ldr	r2, [r7, #12]
   19346:	8812      	ldrh	r2, [r2, #0]
   19348:	0a12      	lsrs	r2, r2, #8
   1934a:	b292      	uxth	r2, r2
   1934c:	b2d2      	uxtb	r2, r2
   1934e:	701a      	strb	r2, [r3, #0]
    for (i = pHrm->numIntervals; i > 0; i--, pInterval++)
   19350:	7cfb      	ldrb	r3, [r7, #19]
   19352:	3b01      	subs	r3, #1
   19354:	74fb      	strb	r3, [r7, #19]
   19356:	68fb      	ldr	r3, [r7, #12]
   19358:	3302      	adds	r3, #2
   1935a:	60fb      	str	r3, [r7, #12]
   1935c:	7cfb      	ldrb	r3, [r7, #19]
   1935e:	2b00      	cmp	r3, #0
   19360:	d1e6      	bne.n	19330 <hrpsBuildHrm+0x94>
    }
  }

  /* return length */
  return (uint8_t) (p - pBuf);
   19362:	697a      	ldr	r2, [r7, #20]
   19364:	687b      	ldr	r3, [r7, #4]
   19366:	1ad3      	subs	r3, r2, r3
   19368:	b2db      	uxtb	r3, r3
}
   1936a:	4618      	mov	r0, r3
   1936c:	371c      	adds	r7, #28
   1936e:	46bd      	mov	sp, r7
   19370:	f85d 7b04 	ldr.w	r7, [sp], #4
   19374:	4770      	bx	lr
	...

00019378 <hrpsSendHrmNtf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsSendHrmNtf(dmConnId_t connId)
{
   19378:	b580      	push	{r7, lr}
   1937a:	b088      	sub	sp, #32
   1937c:	af00      	add	r7, sp, #0
   1937e:	4603      	mov	r3, r0
   19380:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[ATT_DEFAULT_PAYLOAD_LEN];
  uint8_t len;
  
  /* build heart rate measurement characteristic */
  len = hrpsBuildHrm(buf, &hrpsCb.hrm);
   19382:	f107 0308 	add.w	r3, r7, #8
   19386:	4909      	ldr	r1, [pc, #36]	; (193ac <hrpsSendHrmNtf+0x34>)
   19388:	4618      	mov	r0, r3
   1938a:	f7ff ff87 	bl	1929c <hrpsBuildHrm>
   1938e:	4603      	mov	r3, r0
   19390:	77fb      	strb	r3, [r7, #31]

  /* send notification */
  AttsHandleValueNtf(connId, HRS_HRM_HDL, len, buf);
   19392:	7ffb      	ldrb	r3, [r7, #31]
   19394:	b29a      	uxth	r2, r3
   19396:	f107 0308 	add.w	r3, r7, #8
   1939a:	79f8      	ldrb	r0, [r7, #7]
   1939c:	2122      	movs	r1, #34	; 0x22
   1939e:	f7f4 f95b 	bl	d658 <AttsHandleValueNtf>
}
   193a2:	bf00      	nop
   193a4:	3720      	adds	r7, #32
   193a6:	46bd      	mov	sp, r7
   193a8:	bd80      	pop	{r7, pc}
   193aa:	bf00      	nop
   193ac:	100043a4 	.word	0x100043a4

000193b0 <hrpsConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsConnOpen(dmEvt_t *pMsg)
{
   193b0:	b480      	push	{r7}
   193b2:	b083      	sub	sp, #12
   193b4:	af00      	add	r7, sp, #0
   193b6:	6078      	str	r0, [r7, #4]
  hrpsCb.txReady = TRUE;
   193b8:	4b04      	ldr	r3, [pc, #16]	; (193cc <hrpsConnOpen+0x1c>)
   193ba:	2201      	movs	r2, #1
   193bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   193c0:	bf00      	nop
   193c2:	370c      	adds	r7, #12
   193c4:	46bd      	mov	sp, r7
   193c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   193ca:	4770      	bx	lr
   193cc:	10004384 	.word	0x10004384

000193d0 <hrpsHandleValueCnf>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void hrpsHandleValueCnf(attEvt_t *pMsg)
{
   193d0:	b580      	push	{r7, lr}
   193d2:	b084      	sub	sp, #16
   193d4:	af00      	add	r7, sp, #0
   193d6:	6078      	str	r0, [r7, #4]
  hrpsConn_t  *pConn;

  if (pMsg->hdr.status == ATT_SUCCESS && pMsg->handle == HRS_HRM_HDL)
   193d8:	687b      	ldr	r3, [r7, #4]
   193da:	78db      	ldrb	r3, [r3, #3]
   193dc:	2b00      	cmp	r3, #0
   193de:	d11c      	bne.n	1941a <hrpsHandleValueCnf+0x4a>
   193e0:	687b      	ldr	r3, [r7, #4]
   193e2:	895b      	ldrh	r3, [r3, #10]
   193e4:	2b22      	cmp	r3, #34	; 0x22
   193e6:	d118      	bne.n	1941a <hrpsHandleValueCnf+0x4a>
  {
    hrpsCb.txReady = TRUE;
   193e8:	4b0e      	ldr	r3, [pc, #56]	; (19424 <hrpsHandleValueCnf+0x54>)
   193ea:	2201      	movs	r2, #1
   193ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
    /* find next connection to send (note ccc idx is stored in timer status) */
    if ((pConn = hrpsFindNextToSend(hrpsCb.measTimer.msg.status)) != NULL)
   193f0:	4b0c      	ldr	r3, [pc, #48]	; (19424 <hrpsHandleValueCnf+0x54>)
   193f2:	7f5b      	ldrb	r3, [r3, #29]
   193f4:	4618      	mov	r0, r3
   193f6:	f7ff ff23 	bl	19240 <hrpsFindNextToSend>
   193fa:	60f8      	str	r0, [r7, #12]
   193fc:	68fb      	ldr	r3, [r7, #12]
   193fe:	2b00      	cmp	r3, #0
   19400:	d00b      	beq.n	1941a <hrpsHandleValueCnf+0x4a>
    {
      hrpsSendHrmNtf(pConn->connId);
   19402:	68fb      	ldr	r3, [r7, #12]
   19404:	781b      	ldrb	r3, [r3, #0]
   19406:	4618      	mov	r0, r3
   19408:	f7ff ffb6 	bl	19378 <hrpsSendHrmNtf>
      hrpsCb.txReady = FALSE;
   1940c:	4b05      	ldr	r3, [pc, #20]	; (19424 <hrpsHandleValueCnf+0x54>)
   1940e:	2200      	movs	r2, #0
   19410:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
      pConn->hrmToSend = FALSE;
   19414:	68fb      	ldr	r3, [r7, #12]
   19416:	2200      	movs	r2, #0
   19418:	705a      	strb	r2, [r3, #1]
    }
  }
}
   1941a:	bf00      	nop
   1941c:	3710      	adds	r7, #16
   1941e:	46bd      	mov	sp, r7
   19420:	bd80      	pop	{r7, pc}
   19422:	bf00      	nop
   19424:	10004384 	.word	0x10004384

00019428 <hrpsMeasTimerExp>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void hrpsMeasTimerExp(wsfMsgHdr_t *pMsg)
{
   19428:	b580      	push	{r7, lr}
   1942a:	b084      	sub	sp, #16
   1942c:	af00      	add	r7, sp, #0
   1942e:	6078      	str	r0, [r7, #4]
  hrpsConn_t  *pConn;

  /* if there are active connections */
  if (hrpsNoConnActive() == FALSE)
   19430:	f7ff fec6 	bl	191c0 <hrpsNoConnActive>
   19434:	4603      	mov	r3, r0
   19436:	2b00      	cmp	r3, #0
   19438:	d12a      	bne.n	19490 <hrpsMeasTimerExp+0x68>
  {
  
    /* set up heart rate measurement to be sent on all connections */
    hrpsSetupToSend();
   1943a:	f7ff fee1 	bl	19200 <hrpsSetupToSend>

    /* read heart rate measurement sensor data */
    AppHwHrmRead(&hrpsCb.hrm);
   1943e:	4816      	ldr	r0, [pc, #88]	; (19498 <hrpsMeasTimerExp+0x70>)
   19440:	f000 fef8 	bl	1a234 <AppHwHrmRead>
  
    /* if ready to send measurements */
    if (hrpsCb.txReady)
   19444:	4b15      	ldr	r3, [pc, #84]	; (1949c <hrpsMeasTimerExp+0x74>)
   19446:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   1944a:	2b00      	cmp	r3, #0
   1944c:	d014      	beq.n	19478 <hrpsMeasTimerExp+0x50>
    {
      /* find next connection to send (note ccc idx is stored in timer status) */
      if ((pConn = hrpsFindNextToSend(pMsg->status)) != NULL)
   1944e:	687b      	ldr	r3, [r7, #4]
   19450:	78db      	ldrb	r3, [r3, #3]
   19452:	4618      	mov	r0, r3
   19454:	f7ff fef4 	bl	19240 <hrpsFindNextToSend>
   19458:	60f8      	str	r0, [r7, #12]
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	2b00      	cmp	r3, #0
   1945e:	d00b      	beq.n	19478 <hrpsMeasTimerExp+0x50>
      {
        hrpsSendHrmNtf(pConn->connId);
   19460:	68fb      	ldr	r3, [r7, #12]
   19462:	781b      	ldrb	r3, [r3, #0]
   19464:	4618      	mov	r0, r3
   19466:	f7ff ff87 	bl	19378 <hrpsSendHrmNtf>
        hrpsCb.txReady = FALSE;
   1946a:	4b0c      	ldr	r3, [pc, #48]	; (1949c <hrpsMeasTimerExp+0x74>)
   1946c:	2200      	movs	r2, #0
   1946e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pConn->hrmToSend = FALSE;
   19472:	68fb      	ldr	r3, [r7, #12]
   19474:	2200      	movs	r2, #0
   19476:	705a      	strb	r2, [r3, #1]
      }
    }
    
    /* restart timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   19478:	4b08      	ldr	r3, [pc, #32]	; (1949c <hrpsMeasTimerExp+0x74>)
   1947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1947c:	4619      	mov	r1, r3
   1947e:	4808      	ldr	r0, [pc, #32]	; (194a0 <hrpsMeasTimerExp+0x78>)
   19480:	f7fe fcba 	bl	17df8 <WsfTimerStartMs>
    
    /* increment energy expended for test/demonstration purposes */
    hrpsCb.hrm.energyExp++;
   19484:	4b05      	ldr	r3, [pc, #20]	; (1949c <hrpsMeasTimerExp+0x74>)
   19486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   19488:	3301      	adds	r3, #1
   1948a:	b29a      	uxth	r2, r3
   1948c:	4b03      	ldr	r3, [pc, #12]	; (1949c <hrpsMeasTimerExp+0x74>)
   1948e:	84da      	strh	r2, [r3, #38]	; 0x26
  }
}
   19490:	bf00      	nop
   19492:	3710      	adds	r7, #16
   19494:	46bd      	mov	sp, r7
   19496:	bd80      	pop	{r7, pc}
   19498:	100043a4 	.word	0x100043a4
   1949c:	10004384 	.word	0x10004384
   194a0:	10004394 	.word	0x10004394

000194a4 <HrpsInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsInit(wsfHandlerId_t handlerId, hrpsCfg_t *pCfg)
{
   194a4:	b480      	push	{r7}
   194a6:	b083      	sub	sp, #12
   194a8:	af00      	add	r7, sp, #0
   194aa:	4603      	mov	r3, r0
   194ac:	6039      	str	r1, [r7, #0]
   194ae:	71fb      	strb	r3, [r7, #7]
  hrpsCb.measTimer.handlerId = handlerId;
   194b0:	4a06      	ldr	r2, [pc, #24]	; (194cc <HrpsInit+0x28>)
   194b2:	79fb      	ldrb	r3, [r7, #7]
   194b4:	7613      	strb	r3, [r2, #24]
  hrpsCb.cfg = *pCfg;
   194b6:	4a05      	ldr	r2, [pc, #20]	; (194cc <HrpsInit+0x28>)
   194b8:	683b      	ldr	r3, [r7, #0]
   194ba:	681b      	ldr	r3, [r3, #0]
   194bc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
   194be:	bf00      	nop
   194c0:	370c      	adds	r7, #12
   194c2:	46bd      	mov	sp, r7
   194c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   194c8:	4770      	bx	lr
   194ca:	bf00      	nop
   194cc:	10004384 	.word	0x10004384

000194d0 <HrpsMeasStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStart(dmConnId_t connId, uint8_t timerEvt, uint8_t hrmCccIdx)
{
   194d0:	b580      	push	{r7, lr}
   194d2:	b082      	sub	sp, #8
   194d4:	af00      	add	r7, sp, #0
   194d6:	4603      	mov	r3, r0
   194d8:	71fb      	strb	r3, [r7, #7]
   194da:	460b      	mov	r3, r1
   194dc:	71bb      	strb	r3, [r7, #6]
   194de:	4613      	mov	r3, r2
   194e0:	717b      	strb	r3, [r7, #5]
  /* if this is first connection */
  if (hrpsNoConnActive())
   194e2:	f7ff fe6d 	bl	191c0 <hrpsNoConnActive>
   194e6:	4603      	mov	r3, r0
   194e8:	2b00      	cmp	r3, #0
   194ea:	d00b      	beq.n	19504 <HrpsMeasStart+0x34>
  {
    /* initialize control block */
    hrpsCb.measTimer.msg.event = timerEvt;
   194ec:	4a0a      	ldr	r2, [pc, #40]	; (19518 <HrpsMeasStart+0x48>)
   194ee:	79bb      	ldrb	r3, [r7, #6]
   194f0:	7713      	strb	r3, [r2, #28]
    hrpsCb.measTimer.msg.status = hrmCccIdx;  
   194f2:	4a09      	ldr	r2, [pc, #36]	; (19518 <HrpsMeasStart+0x48>)
   194f4:	797b      	ldrb	r3, [r7, #5]
   194f6:	7753      	strb	r3, [r2, #29]
    
    /* start timer */
    WsfTimerStartMs(&hrpsCb.measTimer, hrpsCb.cfg.period);
   194f8:	4b07      	ldr	r3, [pc, #28]	; (19518 <HrpsMeasStart+0x48>)
   194fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   194fc:	4619      	mov	r1, r3
   194fe:	4807      	ldr	r0, [pc, #28]	; (1951c <HrpsMeasStart+0x4c>)
   19500:	f7fe fc7a 	bl	17df8 <WsfTimerStartMs>
  }
  
  /* set conn id */
  hrpsCb.conn[connId - 1].connId = connId;
   19504:	79fb      	ldrb	r3, [r7, #7]
   19506:	3b01      	subs	r3, #1
   19508:	4903      	ldr	r1, [pc, #12]	; (19518 <HrpsMeasStart+0x48>)
   1950a:	79fa      	ldrb	r2, [r7, #7]
   1950c:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
   19510:	bf00      	nop
   19512:	3708      	adds	r7, #8
   19514:	46bd      	mov	sp, r7
   19516:	bd80      	pop	{r7, pc}
   19518:	10004384 	.word	0x10004384
   1951c:	10004394 	.word	0x10004394

00019520 <HrpsMeasStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsMeasStop(dmConnId_t connId)
{
   19520:	b580      	push	{r7, lr}
   19522:	b082      	sub	sp, #8
   19524:	af00      	add	r7, sp, #0
   19526:	4603      	mov	r3, r0
   19528:	71fb      	strb	r3, [r7, #7]
  /* clear connection */
  hrpsCb.conn[connId - 1].connId = DM_CONN_ID_NONE;
   1952a:	79fb      	ldrb	r3, [r7, #7]
   1952c:	3b01      	subs	r3, #1
   1952e:	4a0b      	ldr	r2, [pc, #44]	; (1955c <HrpsMeasStop+0x3c>)
   19530:	2100      	movs	r1, #0
   19532:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
  hrpsCb.conn[connId - 1].hrmToSend = FALSE;
   19536:	79fb      	ldrb	r3, [r7, #7]
   19538:	3b01      	subs	r3, #1
   1953a:	4a08      	ldr	r2, [pc, #32]	; (1955c <HrpsMeasStop+0x3c>)
   1953c:	005b      	lsls	r3, r3, #1
   1953e:	4413      	add	r3, r2
   19540:	2200      	movs	r2, #0
   19542:	705a      	strb	r2, [r3, #1]
  
  /* if no remaining connections */
  if (hrpsNoConnActive())
   19544:	f7ff fe3c 	bl	191c0 <hrpsNoConnActive>
   19548:	4603      	mov	r3, r0
   1954a:	2b00      	cmp	r3, #0
   1954c:	d002      	beq.n	19554 <HrpsMeasStop+0x34>
  {  
    /* stop timer */
    WsfTimerStop(&hrpsCb.measTimer);
   1954e:	4804      	ldr	r0, [pc, #16]	; (19560 <HrpsMeasStop+0x40>)
   19550:	f7fe fc66 	bl	17e20 <WsfTimerStop>
  }
}
   19554:	bf00      	nop
   19556:	3708      	adds	r7, #8
   19558:	46bd      	mov	sp, r7
   1955a:	bd80      	pop	{r7, pc}
   1955c:	10004384 	.word	0x10004384
   19560:	10004394 	.word	0x10004394

00019564 <HrpsProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsProcMsg(wsfMsgHdr_t *pMsg)
{
   19564:	b580      	push	{r7, lr}
   19566:	b082      	sub	sp, #8
   19568:	af00      	add	r7, sp, #0
   1956a:	6078      	str	r0, [r7, #4]
  if (pMsg->event == DM_CONN_OPEN_IND)
   1956c:	687b      	ldr	r3, [r7, #4]
   1956e:	789b      	ldrb	r3, [r3, #2]
   19570:	2b27      	cmp	r3, #39	; 0x27
   19572:	d103      	bne.n	1957c <HrpsProcMsg+0x18>
  {
    hrpsConnOpen((dmEvt_t *) pMsg);
   19574:	6878      	ldr	r0, [r7, #4]
   19576:	f7ff ff1b 	bl	193b0 <hrpsConnOpen>
  }
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
  {
    hrpsMeasTimerExp(pMsg);
  }
}
   1957a:	e010      	b.n	1959e <HrpsProcMsg+0x3a>
  else if (pMsg->event == ATTS_HANDLE_VALUE_CNF)
   1957c:	687b      	ldr	r3, [r7, #4]
   1957e:	789b      	ldrb	r3, [r3, #2]
   19580:	2b0f      	cmp	r3, #15
   19582:	d103      	bne.n	1958c <HrpsProcMsg+0x28>
    hrpsHandleValueCnf((attEvt_t *) pMsg);
   19584:	6878      	ldr	r0, [r7, #4]
   19586:	f7ff ff23 	bl	193d0 <hrpsHandleValueCnf>
}
   1958a:	e008      	b.n	1959e <HrpsProcMsg+0x3a>
  else if (pMsg->event == hrpsCb.measTimer.msg.event)
   1958c:	687b      	ldr	r3, [r7, #4]
   1958e:	789a      	ldrb	r2, [r3, #2]
   19590:	4b05      	ldr	r3, [pc, #20]	; (195a8 <HrpsProcMsg+0x44>)
   19592:	7f1b      	ldrb	r3, [r3, #28]
   19594:	429a      	cmp	r2, r3
   19596:	d102      	bne.n	1959e <HrpsProcMsg+0x3a>
    hrpsMeasTimerExp(pMsg);
   19598:	6878      	ldr	r0, [r7, #4]
   1959a:	f7ff ff45 	bl	19428 <hrpsMeasTimerExp>
}
   1959e:	bf00      	nop
   195a0:	3708      	adds	r7, #8
   195a2:	46bd      	mov	sp, r7
   195a4:	bd80      	pop	{r7, pc}
   195a6:	bf00      	nop
   195a8:	10004384 	.word	0x10004384

000195ac <HrpsWriteCback>:
 *  \return ATT status.
 */
/*************************************************************************************************/
uint8_t HrpsWriteCback(dmConnId_t connId, uint16_t handle, uint8_t operation,
                       uint16_t offset, uint16_t len, uint8_t *pValue, attsAttr_t *pAttr)
{ 
   195ac:	b490      	push	{r4, r7}
   195ae:	b082      	sub	sp, #8
   195b0:	af00      	add	r7, sp, #0
   195b2:	4604      	mov	r4, r0
   195b4:	4608      	mov	r0, r1
   195b6:	4611      	mov	r1, r2
   195b8:	461a      	mov	r2, r3
   195ba:	4623      	mov	r3, r4
   195bc:	71fb      	strb	r3, [r7, #7]
   195be:	4603      	mov	r3, r0
   195c0:	80bb      	strh	r3, [r7, #4]
   195c2:	460b      	mov	r3, r1
   195c4:	71bb      	strb	r3, [r7, #6]
   195c6:	4613      	mov	r3, r2
   195c8:	807b      	strh	r3, [r7, #2]
  if (*pValue == CH_HRCP_RESET_ENERGY_EXP)
   195ca:	697b      	ldr	r3, [r7, #20]
   195cc:	781b      	ldrb	r3, [r3, #0]
   195ce:	2b01      	cmp	r3, #1
   195d0:	d104      	bne.n	195dc <HrpsWriteCback+0x30>
  {
    /* reset energy expended */
    hrpsCb.hrm.energyExp = 0;
   195d2:	4b05      	ldr	r3, [pc, #20]	; (195e8 <HrpsWriteCback+0x3c>)
   195d4:	2200      	movs	r2, #0
   195d6:	84da      	strh	r2, [r3, #38]	; 0x26
    return ATT_SUCCESS;
   195d8:	2300      	movs	r3, #0
   195da:	e000      	b.n	195de <HrpsWriteCback+0x32>
  }
  else
  {
    /* else unknown control point command */
    return HRS_ERR_CP_NOT_SUP;
   195dc:	2380      	movs	r3, #128	; 0x80
  }
}
   195de:	4618      	mov	r0, r3
   195e0:	3708      	adds	r7, #8
   195e2:	46bd      	mov	sp, r7
   195e4:	bc90      	pop	{r4, r7}
   195e6:	4770      	bx	lr
   195e8:	10004384 	.word	0x10004384

000195ec <HrpsSetFlags>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void HrpsSetFlags(uint8_t flags)
{
   195ec:	b480      	push	{r7}
   195ee:	b083      	sub	sp, #12
   195f0:	af00      	add	r7, sp, #0
   195f2:	4603      	mov	r3, r0
   195f4:	71fb      	strb	r3, [r7, #7]
  hrpsCb.hrm.flags = flags;
   195f6:	4a05      	ldr	r2, [pc, #20]	; (1960c <HrpsSetFlags+0x20>)
   195f8:	79fb      	ldrb	r3, [r7, #7]
   195fa:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
}
   195fe:	bf00      	nop
   19600:	370c      	adds	r7, #12
   19602:	46bd      	mov	sp, r7
   19604:	f85d 7b04 	ldr.w	r7, [sp], #4
   19608:	4770      	bx	lr
   1960a:	bf00      	nop
   1960c:	10004384 	.word	0x10004384

00019610 <__NVIC_EnableIRQ>:
{
   19610:	b480      	push	{r7}
   19612:	b083      	sub	sp, #12
   19614:	af00      	add	r7, sp, #0
   19616:	4603      	mov	r3, r0
   19618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1961a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1961e:	2b00      	cmp	r3, #0
   19620:	db0b      	blt.n	1963a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19622:	4909      	ldr	r1, [pc, #36]	; (19648 <__NVIC_EnableIRQ+0x38>)
   19624:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19628:	095b      	lsrs	r3, r3, #5
   1962a:	79fa      	ldrb	r2, [r7, #7]
   1962c:	f002 021f 	and.w	r2, r2, #31
   19630:	2001      	movs	r0, #1
   19632:	fa00 f202 	lsl.w	r2, r0, r2
   19636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1963a:	bf00      	nop
   1963c:	370c      	adds	r7, #12
   1963e:	46bd      	mov	sp, r7
   19640:	f85d 7b04 	ldr.w	r7, [sp], #4
   19644:	4770      	bx	lr
   19646:	bf00      	nop
   19648:	e000e100 	.word	0xe000e100

0001964c <__NVIC_SetPriority>:
{
   1964c:	b480      	push	{r7}
   1964e:	b083      	sub	sp, #12
   19650:	af00      	add	r7, sp, #0
   19652:	4603      	mov	r3, r0
   19654:	6039      	str	r1, [r7, #0]
   19656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   19658:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1965c:	2b00      	cmp	r3, #0
   1965e:	db0a      	blt.n	19676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19660:	490d      	ldr	r1, [pc, #52]	; (19698 <__NVIC_SetPriority+0x4c>)
   19662:	f997 3007 	ldrsb.w	r3, [r7, #7]
   19666:	683a      	ldr	r2, [r7, #0]
   19668:	b2d2      	uxtb	r2, r2
   1966a:	0152      	lsls	r2, r2, #5
   1966c:	b2d2      	uxtb	r2, r2
   1966e:	440b      	add	r3, r1
   19670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   19674:	e00a      	b.n	1968c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19676:	4909      	ldr	r1, [pc, #36]	; (1969c <__NVIC_SetPriority+0x50>)
   19678:	79fb      	ldrb	r3, [r7, #7]
   1967a:	f003 030f 	and.w	r3, r3, #15
   1967e:	3b04      	subs	r3, #4
   19680:	683a      	ldr	r2, [r7, #0]
   19682:	b2d2      	uxtb	r2, r2
   19684:	0152      	lsls	r2, r2, #5
   19686:	b2d2      	uxtb	r2, r2
   19688:	440b      	add	r3, r1
   1968a:	761a      	strb	r2, [r3, #24]
}
   1968c:	bf00      	nop
   1968e:	370c      	adds	r7, #12
   19690:	46bd      	mov	sp, r7
   19692:	f85d 7b04 	ldr.w	r7, [sp], #4
   19696:	4770      	bx	lr
   19698:	e000e100 	.word	0xe000e100
   1969c:	e000ed00 	.word	0xe000ed00

000196a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   196a0:	b480      	push	{r7}
   196a2:	b085      	sub	sp, #20
   196a4:	af00      	add	r7, sp, #0
   196a6:	60f8      	str	r0, [r7, #12]
   196a8:	60b9      	str	r1, [r7, #8]
   196aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
   196ac:	68fb      	ldr	r3, [r7, #12]
   196ae:	3b04      	subs	r3, #4
   196b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   196b2:	68fb      	ldr	r3, [r7, #12]
   196b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   196b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   196ba:	68fb      	ldr	r3, [r7, #12]
   196bc:	3b04      	subs	r3, #4
   196be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
   196c0:	68bb      	ldr	r3, [r7, #8]
   196c2:	f023 0201 	bic.w	r2, r3, #1
   196c6:	68fb      	ldr	r3, [r7, #12]
   196c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   196ca:	68fb      	ldr	r3, [r7, #12]
   196cc:	3b04      	subs	r3, #4
   196ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   196d0:	4a0c      	ldr	r2, [pc, #48]	; (19704 <pxPortInitialiseStack+0x64>)
   196d2:	68fb      	ldr	r3, [r7, #12]
   196d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   196d6:	68fb      	ldr	r3, [r7, #12]
   196d8:	3b14      	subs	r3, #20
   196da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   196dc:	687a      	ldr	r2, [r7, #4]
   196de:	68fb      	ldr	r3, [r7, #12]
   196e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
   196e2:	68fb      	ldr	r3, [r7, #12]
   196e4:	3b04      	subs	r3, #4
   196e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
   196e8:	68fb      	ldr	r3, [r7, #12]
   196ea:	f06f 0202 	mvn.w	r2, #2
   196ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   196f0:	68fb      	ldr	r3, [r7, #12]
   196f2:	3b20      	subs	r3, #32
   196f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   196f6:	68fb      	ldr	r3, [r7, #12]
}
   196f8:	4618      	mov	r0, r3
   196fa:	3714      	adds	r7, #20
   196fc:	46bd      	mov	sp, r7
   196fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   19702:	4770      	bx	lr
   19704:	00019709 	.word	0x00019709

00019708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19708:	b480      	push	{r7}
   1970a:	b083      	sub	sp, #12
   1970c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
   1970e:	2300      	movs	r3, #0
   19710:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19712:	4b0c      	ldr	r3, [pc, #48]	; (19744 <prvTaskExitError+0x3c>)
   19714:	681b      	ldr	r3, [r3, #0]
   19716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1971a:	d000      	beq.n	1971e <prvTaskExitError+0x16>
   1971c:	e7fe      	b.n	1971c <prvTaskExitError+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   1971e:	f04f 0380 	mov.w	r3, #128	; 0x80
   19722:	f383 8811 	msr	BASEPRI, r3
   19726:	f3bf 8f6f 	isb	sy
   1972a:	f3bf 8f4f 	dsb	sy
   1972e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
   19730:	bf00      	nop
   19732:	683b      	ldr	r3, [r7, #0]
   19734:	2b00      	cmp	r3, #0
   19736:	d0fc      	beq.n	19732 <prvTaskExitError+0x2a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19738:	bf00      	nop
   1973a:	370c      	adds	r7, #12
   1973c:	46bd      	mov	sp, r7
   1973e:	f85d 7b04 	ldr.w	r7, [sp], #4
   19742:	4770      	bx	lr
   19744:	100023a8 	.word	0x100023a8
	...

00019750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   19750:	4b07      	ldr	r3, [pc, #28]	; (19770 <pxCurrentTCBConst2>)
   19752:	6819      	ldr	r1, [r3, #0]
   19754:	6808      	ldr	r0, [r1, #0]
   19756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1975a:	f380 8809 	msr	PSP, r0
   1975e:	f3bf 8f6f 	isb	sy
   19762:	f04f 0000 	mov.w	r0, #0
   19766:	f380 8811 	msr	BASEPRI, r0
   1976a:	4770      	bx	lr
   1976c:	f3af 8000 	nop.w

00019770 <pxCurrentTCBConst2>:
   19770:	10006244 	.word	0x10006244
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
   19774:	bf00      	nop
   19776:	bf00      	nop

00019778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
   19778:	4808      	ldr	r0, [pc, #32]	; (1979c <prvPortStartFirstTask+0x24>)
   1977a:	6800      	ldr	r0, [r0, #0]
   1977c:	6800      	ldr	r0, [r0, #0]
   1977e:	f380 8808 	msr	MSP, r0
   19782:	f04f 0000 	mov.w	r0, #0
   19786:	f380 8814 	msr	CONTROL, r0
   1978a:	b662      	cpsie	i
   1978c:	b661      	cpsie	f
   1978e:	f3bf 8f4f 	dsb	sy
   19792:	f3bf 8f6f 	isb	sy
   19796:	df00      	svc	0
   19798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
   1979a:	bf00      	nop
   1979c:	e000ed08 	.word	0xe000ed08

000197a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   197a0:	b580      	push	{r7, lr}
   197a2:	b084      	sub	sp, #16
   197a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
   197a6:	4b37      	ldr	r3, [pc, #220]	; (19884 <xPortStartScheduler+0xe4>)
   197a8:	681b      	ldr	r3, [r3, #0]
   197aa:	4a37      	ldr	r2, [pc, #220]	; (19888 <xPortStartScheduler+0xe8>)
   197ac:	4293      	cmp	r3, r2
   197ae:	d100      	bne.n	197b2 <xPortStartScheduler+0x12>
   197b0:	e7fe      	b.n	197b0 <xPortStartScheduler+0x10>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
   197b2:	4b34      	ldr	r3, [pc, #208]	; (19884 <xPortStartScheduler+0xe4>)
   197b4:	681b      	ldr	r3, [r3, #0]
   197b6:	4a35      	ldr	r2, [pc, #212]	; (1988c <xPortStartScheduler+0xec>)
   197b8:	4293      	cmp	r3, r2
   197ba:	d100      	bne.n	197be <xPortStartScheduler+0x1e>
   197bc:	e7fe      	b.n	197bc <xPortStartScheduler+0x1c>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   197be:	4b34      	ldr	r3, [pc, #208]	; (19890 <xPortStartScheduler+0xf0>)
   197c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   197c2:	68fb      	ldr	r3, [r7, #12]
   197c4:	781b      	ldrb	r3, [r3, #0]
   197c6:	b2db      	uxtb	r3, r3
   197c8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   197ca:	68fb      	ldr	r3, [r7, #12]
   197cc:	22ff      	movs	r2, #255	; 0xff
   197ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   197d0:	68fb      	ldr	r3, [r7, #12]
   197d2:	781b      	ldrb	r3, [r3, #0]
   197d4:	b2db      	uxtb	r3, r3
   197d6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   197d8:	79fb      	ldrb	r3, [r7, #7]
   197da:	b2db      	uxtb	r3, r3
   197dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   197e0:	b2da      	uxtb	r2, r3
   197e2:	4b2c      	ldr	r3, [pc, #176]	; (19894 <xPortStartScheduler+0xf4>)
   197e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   197e6:	4b2c      	ldr	r3, [pc, #176]	; (19898 <xPortStartScheduler+0xf8>)
   197e8:	2207      	movs	r2, #7
   197ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   197ec:	e009      	b.n	19802 <xPortStartScheduler+0x62>
		{
			ulMaxPRIGROUPValue--;
   197ee:	4b2a      	ldr	r3, [pc, #168]	; (19898 <xPortStartScheduler+0xf8>)
   197f0:	681b      	ldr	r3, [r3, #0]
   197f2:	3b01      	subs	r3, #1
   197f4:	4a28      	ldr	r2, [pc, #160]	; (19898 <xPortStartScheduler+0xf8>)
   197f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   197f8:	79fb      	ldrb	r3, [r7, #7]
   197fa:	b2db      	uxtb	r3, r3
   197fc:	005b      	lsls	r3, r3, #1
   197fe:	b2db      	uxtb	r3, r3
   19800:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   19802:	79fb      	ldrb	r3, [r7, #7]
   19804:	b2db      	uxtb	r3, r3
   19806:	f003 0380 	and.w	r3, r3, #128	; 0x80
   1980a:	2b80      	cmp	r3, #128	; 0x80
   1980c:	d0ef      	beq.n	197ee <xPortStartScheduler+0x4e>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
   1980e:	4b22      	ldr	r3, [pc, #136]	; (19898 <xPortStartScheduler+0xf8>)
   19810:	681b      	ldr	r3, [r3, #0]
   19812:	f1c3 0307 	rsb	r3, r3, #7
   19816:	2b03      	cmp	r3, #3
   19818:	d000      	beq.n	1981c <xPortStartScheduler+0x7c>
   1981a:	e7fe      	b.n	1981a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   1981c:	4b1e      	ldr	r3, [pc, #120]	; (19898 <xPortStartScheduler+0xf8>)
   1981e:	681b      	ldr	r3, [r3, #0]
   19820:	021b      	lsls	r3, r3, #8
   19822:	4a1d      	ldr	r2, [pc, #116]	; (19898 <xPortStartScheduler+0xf8>)
   19824:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   19826:	4b1c      	ldr	r3, [pc, #112]	; (19898 <xPortStartScheduler+0xf8>)
   19828:	681b      	ldr	r3, [r3, #0]
   1982a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1982e:	4a1a      	ldr	r2, [pc, #104]	; (19898 <xPortStartScheduler+0xf8>)
   19830:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   19832:	68bb      	ldr	r3, [r7, #8]
   19834:	b2da      	uxtb	r2, r3
   19836:	68fb      	ldr	r3, [r7, #12]
   19838:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   1983a:	4a18      	ldr	r2, [pc, #96]	; (1989c <xPortStartScheduler+0xfc>)
   1983c:	4b17      	ldr	r3, [pc, #92]	; (1989c <xPortStartScheduler+0xfc>)
   1983e:	681b      	ldr	r3, [r3, #0]
   19840:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
   19844:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   19846:	4a15      	ldr	r2, [pc, #84]	; (1989c <xPortStartScheduler+0xfc>)
   19848:	4b14      	ldr	r3, [pc, #80]	; (1989c <xPortStartScheduler+0xfc>)
   1984a:	681b      	ldr	r3, [r3, #0]
   1984c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
   19850:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   19852:	f000 f9df 	bl	19c14 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19856:	4b12      	ldr	r3, [pc, #72]	; (198a0 <xPortStartScheduler+0x100>)
   19858:	2200      	movs	r2, #0
   1985a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
   1985c:	f000 f8bc 	bl	199d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
   19860:	4a10      	ldr	r2, [pc, #64]	; (198a4 <xPortStartScheduler+0x104>)
   19862:	4b10      	ldr	r3, [pc, #64]	; (198a4 <xPortStartScheduler+0x104>)
   19864:	681b      	ldr	r3, [r3, #0]
   19866:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
   1986a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   1986c:	f7ff ff84 	bl	19778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19870:	f002 fa24 	bl	1bcbc <vTaskSwitchContext>
	prvTaskExitError();
   19874:	f7ff ff48 	bl	19708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
   19878:	2300      	movs	r3, #0
}
   1987a:	4618      	mov	r0, r3
   1987c:	3710      	adds	r7, #16
   1987e:	46bd      	mov	sp, r7
   19880:	bd80      	pop	{r7, pc}
   19882:	bf00      	nop
   19884:	e000ed00 	.word	0xe000ed00
   19888:	410fc271 	.word	0x410fc271
   1988c:	410fc270 	.word	0x410fc270
   19890:	e000e400 	.word	0xe000e400
   19894:	100043bc 	.word	0x100043bc
   19898:	100043c0 	.word	0x100043c0
   1989c:	e000ed20 	.word	0xe000ed20
   198a0:	100023a8 	.word	0x100023a8
   198a4:	e000ef34 	.word	0xe000ef34

000198a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   198a8:	b480      	push	{r7}
   198aa:	b083      	sub	sp, #12
   198ac:	af00      	add	r7, sp, #0
   198ae:	f04f 0380 	mov.w	r3, #128	; 0x80
   198b2:	f383 8811 	msr	BASEPRI, r3
   198b6:	f3bf 8f6f 	isb	sy
   198ba:	f3bf 8f4f 	dsb	sy
   198be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   198c0:	4b0a      	ldr	r3, [pc, #40]	; (198ec <vPortEnterCritical+0x44>)
   198c2:	681b      	ldr	r3, [r3, #0]
   198c4:	3301      	adds	r3, #1
   198c6:	4a09      	ldr	r2, [pc, #36]	; (198ec <vPortEnterCritical+0x44>)
   198c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   198ca:	4b08      	ldr	r3, [pc, #32]	; (198ec <vPortEnterCritical+0x44>)
   198cc:	681b      	ldr	r3, [r3, #0]
   198ce:	2b01      	cmp	r3, #1
   198d0:	d105      	bne.n	198de <vPortEnterCritical+0x36>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   198d2:	4b07      	ldr	r3, [pc, #28]	; (198f0 <vPortEnterCritical+0x48>)
   198d4:	681b      	ldr	r3, [r3, #0]
   198d6:	b2db      	uxtb	r3, r3
   198d8:	2b00      	cmp	r3, #0
   198da:	d000      	beq.n	198de <vPortEnterCritical+0x36>
   198dc:	e7fe      	b.n	198dc <vPortEnterCritical+0x34>
	}
}
   198de:	bf00      	nop
   198e0:	370c      	adds	r7, #12
   198e2:	46bd      	mov	sp, r7
   198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   198e8:	4770      	bx	lr
   198ea:	bf00      	nop
   198ec:	100023a8 	.word	0x100023a8
   198f0:	e000ed04 	.word	0xe000ed04

000198f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   198f4:	b480      	push	{r7}
   198f6:	b083      	sub	sp, #12
   198f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   198fa:	4b0c      	ldr	r3, [pc, #48]	; (1992c <vPortExitCritical+0x38>)
   198fc:	681b      	ldr	r3, [r3, #0]
   198fe:	2b00      	cmp	r3, #0
   19900:	d100      	bne.n	19904 <vPortExitCritical+0x10>
   19902:	e7fe      	b.n	19902 <vPortExitCritical+0xe>
	uxCriticalNesting--;
   19904:	4b09      	ldr	r3, [pc, #36]	; (1992c <vPortExitCritical+0x38>)
   19906:	681b      	ldr	r3, [r3, #0]
   19908:	3b01      	subs	r3, #1
   1990a:	4a08      	ldr	r2, [pc, #32]	; (1992c <vPortExitCritical+0x38>)
   1990c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   1990e:	4b07      	ldr	r3, [pc, #28]	; (1992c <vPortExitCritical+0x38>)
   19910:	681b      	ldr	r3, [r3, #0]
   19912:	2b00      	cmp	r3, #0
   19914:	d104      	bne.n	19920 <vPortExitCritical+0x2c>
   19916:	2300      	movs	r3, #0
   19918:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   1991a:	687b      	ldr	r3, [r7, #4]
   1991c:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   19920:	bf00      	nop
   19922:	370c      	adds	r7, #12
   19924:	46bd      	mov	sp, r7
   19926:	f85d 7b04 	ldr.w	r7, [sp], #4
   1992a:	4770      	bx	lr
   1992c:	100023a8 	.word	0x100023a8

00019930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19930:	f3ef 8009 	mrs	r0, PSP
   19934:	f3bf 8f6f 	isb	sy
   19938:	4b15      	ldr	r3, [pc, #84]	; (19990 <pxCurrentTCBConst>)
   1993a:	681a      	ldr	r2, [r3, #0]
   1993c:	f01e 0f10 	tst.w	lr, #16
   19940:	bf08      	it	eq
   19942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   19946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1994a:	6010      	str	r0, [r2, #0]
   1994c:	e92d 0009 	stmdb	sp!, {r0, r3}
   19950:	f04f 0080 	mov.w	r0, #128	; 0x80
   19954:	f380 8811 	msr	BASEPRI, r0
   19958:	f3bf 8f4f 	dsb	sy
   1995c:	f3bf 8f6f 	isb	sy
   19960:	f002 f9ac 	bl	1bcbc <vTaskSwitchContext>
   19964:	f04f 0000 	mov.w	r0, #0
   19968:	f380 8811 	msr	BASEPRI, r0
   1996c:	bc09      	pop	{r0, r3}
   1996e:	6819      	ldr	r1, [r3, #0]
   19970:	6808      	ldr	r0, [r1, #0]
   19972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19976:	f01e 0f10 	tst.w	lr, #16
   1997a:	bf08      	it	eq
   1997c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   19980:	f380 8809 	msr	PSP, r0
   19984:	f3bf 8f6f 	isb	sy
   19988:	4770      	bx	lr
   1998a:	bf00      	nop
   1998c:	f3af 8000 	nop.w

00019990 <pxCurrentTCBConst>:
   19990:	10006244 	.word	0x10006244
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
   19994:	bf00      	nop
   19996:	bf00      	nop

00019998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19998:	b580      	push	{r7, lr}
   1999a:	b082      	sub	sp, #8
   1999c:	af00      	add	r7, sp, #0
	__asm volatile
   1999e:	f04f 0380 	mov.w	r3, #128	; 0x80
   199a2:	f383 8811 	msr	BASEPRI, r3
   199a6:	f3bf 8f6f 	isb	sy
   199aa:	f3bf 8f4f 	dsb	sy
   199ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   199b0:	f002 f8e4 	bl	1bb7c <xTaskIncrementTick>
   199b4:	4603      	mov	r3, r0
   199b6:	2b00      	cmp	r3, #0
   199b8:	d003      	beq.n	199c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   199ba:	4b06      	ldr	r3, [pc, #24]	; (199d4 <SysTick_Handler+0x3c>)
   199bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   199c0:	601a      	str	r2, [r3, #0]
   199c2:	2300      	movs	r3, #0
   199c4:	603b      	str	r3, [r7, #0]
	__asm volatile
   199c6:	683b      	ldr	r3, [r7, #0]
   199c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   199cc:	bf00      	nop
   199ce:	3708      	adds	r7, #8
   199d0:	46bd      	mov	sp, r7
   199d2:	bd80      	pop	{r7, pc}
   199d4:	e000ed04 	.word	0xe000ed04

000199d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
   199d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 199e8 <vPortEnableVFP+0x10>
   199dc:	6801      	ldr	r1, [r0, #0]
   199de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   199e2:	6001      	str	r1, [r0, #0]
   199e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
   199e6:	bf00      	nop
   199e8:	e000ed88 	.word	0xe000ed88

000199ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   199ec:	b480      	push	{r7}
   199ee:	b083      	sub	sp, #12
   199f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   199f2:	f3ef 8305 	mrs	r3, IPSR
   199f6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   199f8:	687b      	ldr	r3, [r7, #4]
   199fa:	2b0f      	cmp	r3, #15
   199fc:	d90a      	bls.n	19a14 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   199fe:	4a0d      	ldr	r2, [pc, #52]	; (19a34 <vPortValidateInterruptPriority+0x48>)
   19a00:	687b      	ldr	r3, [r7, #4]
   19a02:	4413      	add	r3, r2
   19a04:	781b      	ldrb	r3, [r3, #0]
   19a06:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   19a08:	4b0b      	ldr	r3, [pc, #44]	; (19a38 <vPortValidateInterruptPriority+0x4c>)
   19a0a:	781b      	ldrb	r3, [r3, #0]
   19a0c:	78fa      	ldrb	r2, [r7, #3]
   19a0e:	429a      	cmp	r2, r3
   19a10:	d200      	bcs.n	19a14 <vPortValidateInterruptPriority+0x28>
   19a12:	e7fe      	b.n	19a12 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   19a14:	4b09      	ldr	r3, [pc, #36]	; (19a3c <vPortValidateInterruptPriority+0x50>)
   19a16:	681b      	ldr	r3, [r3, #0]
   19a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   19a1c:	4b08      	ldr	r3, [pc, #32]	; (19a40 <vPortValidateInterruptPriority+0x54>)
   19a1e:	681b      	ldr	r3, [r3, #0]
   19a20:	429a      	cmp	r2, r3
   19a22:	d900      	bls.n	19a26 <vPortValidateInterruptPriority+0x3a>
   19a24:	e7fe      	b.n	19a24 <vPortValidateInterruptPriority+0x38>
	}
   19a26:	bf00      	nop
   19a28:	370c      	adds	r7, #12
   19a2a:	46bd      	mov	sp, r7
   19a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19a30:	4770      	bx	lr
   19a32:	bf00      	nop
   19a34:	e000e3f0 	.word	0xe000e3f0
   19a38:	100043bc 	.word	0x100043bc
   19a3c:	e000ed0c 	.word	0xe000ed0c
   19a40:	100043c0 	.word	0x100043c0

00019a44 <vPortSuppressTicksAndSleep>:
 * resolution of the Tick timer.
 */
	static uint32_t xMaximumPossibleSuppressedTicks = 0;

void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
   19a44:	b580      	push	{r7, lr}
   19a46:	b088      	sub	sp, #32
   19a48:	af00      	add	r7, sp, #0
   19a4a:	6078      	str	r0, [r7, #4]
    uint32_t New_Timer, Delta_Sleep;
	TickType_t xModifiableIdleTime;
    uint32_t elapsed_time;

	/* Make sure the SysTick reload value does not overflow the counter. */
	if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
   19a4c:	4b36      	ldr	r3, [pc, #216]	; (19b28 <vPortSuppressTicksAndSleep+0xe4>)
   19a4e:	681b      	ldr	r3, [r3, #0]
   19a50:	687a      	ldr	r2, [r7, #4]
   19a52:	429a      	cmp	r2, r3
   19a54:	d902      	bls.n	19a5c <vPortSuppressTicksAndSleep+0x18>
	{
		xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
   19a56:	4b34      	ldr	r3, [pc, #208]	; (19b28 <vPortSuppressTicksAndSleep+0xe4>)
   19a58:	681b      	ldr	r3, [r3, #0]
   19a5a:	607b      	str	r3, [r7, #4]


	/* Calculate the reload value required to wait xExpectedIdleTime
	tick periods.  -1 is used because this code will execute part way
	through one of the tick periods. */
	ulReloadValue =  ulTimerCountsForOneTick * ( xExpectedIdleTime - 1 );
   19a5c:	687b      	ldr	r3, [r7, #4]
   19a5e:	3b01      	subs	r3, #1
   19a60:	4a32      	ldr	r2, [pc, #200]	; (19b2c <vPortSuppressTicksAndSleep+0xe8>)
   19a62:	6812      	ldr	r2, [r2, #0]
   19a64:	fb02 f303 	mul.w	r3, r2, r3
   19a68:	61fb      	str	r3, [r7, #28]

	/* Enter a critical section but don't use the taskENTER_CRITICAL()
	method as that will mask interrupts that should exit sleep mode. */
	__asm volatile( "cpsid i" );
   19a6a:	b672      	cpsid	i
	__asm volatile( "dsb" );
   19a6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19a70:	f3bf 8f6f 	isb	sy
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    // Adjust for the time already elapsed
    elapsed_time = am_hal_stimer_counter_get() - g_lastSTimerVal;
   19a74:	f006 fedc 	bl	20830 <am_hal_stimer_counter_get>
   19a78:	4602      	mov	r2, r0
   19a7a:	4b2d      	ldr	r3, [pc, #180]	; (19b30 <vPortSuppressTicksAndSleep+0xec>)
   19a7c:	681b      	ldr	r3, [r3, #0]
   19a7e:	1ad3      	subs	r3, r2, r3
   19a80:	61bb      	str	r3, [r7, #24]


	/* If a context switch is pending or a task is waiting for the scheduler
	to be unsuspended then abandon the low power entry. */
    /* Abandon low power entry if the sleep time is too short */
	if( (eTaskConfirmSleepModeStatus() == eAbortSleep) || ((elapsed_time + ulTimerCountsForOneTick) > ulReloadValue) )
   19a82:	f002 fb47 	bl	1c114 <eTaskConfirmSleepModeStatus>
   19a86:	4603      	mov	r3, r0
   19a88:	2b00      	cmp	r3, #0
   19a8a:	d006      	beq.n	19a9a <vPortSuppressTicksAndSleep+0x56>
   19a8c:	4b27      	ldr	r3, [pc, #156]	; (19b2c <vPortSuppressTicksAndSleep+0xe8>)
   19a8e:	681a      	ldr	r2, [r3, #0]
   19a90:	69bb      	ldr	r3, [r7, #24]
   19a92:	441a      	add	r2, r3
   19a94:	69fb      	ldr	r3, [r7, #28]
   19a96:	429a      	cmp	r2, r3
   19a98:	d901      	bls.n	19a9e <vPortSuppressTicksAndSleep+0x5a>
#ifndef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19a9a:	b662      	cpsie	i
   19a9c:	e03f      	b.n	19b1e <vPortSuppressTicksAndSleep+0xda>
	}
	else
	{
        // Adjust for the time already elapsed
        ulReloadValue -= elapsed_time;
   19a9e:	69fa      	ldr	r2, [r7, #28]
   19aa0:	69bb      	ldr	r3, [r7, #24]
   19aa2:	1ad3      	subs	r3, r2, r3
   19aa4:	61fb      	str	r3, [r7, #28]
        // Initialize new timeout value
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        am_hal_stimer_compare_delta_set(0, ulReloadValue);
   19aa6:	69f9      	ldr	r1, [r7, #28]
   19aa8:	2000      	movs	r0, #0
   19aaa:	f006 fec7 	bl	2083c <am_hal_stimer_compare_delta_set>
		/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
		set its parameter to 0 to indicate that its implementation contains
		its own wait for interrupt or wait for event instruction, and so wfi
		should not be executed again.  However, the original expected idle
		time variable must remain unmodified, so a copy is taken. */
		xModifiableIdleTime = xExpectedIdleTime;
   19aae:	687b      	ldr	r3, [r7, #4]
   19ab0:	617b      	str	r3, [r7, #20]

		configPRE_SLEEP_PROCESSING( xModifiableIdleTime );       // Turn OFF all Periphials in this function
   19ab2:	6978      	ldr	r0, [r7, #20]
   19ab4:	f7f9 fa17 	bl	12ee6 <am_freertos_sleep>
   19ab8:	6178      	str	r0, [r7, #20]

		if( xModifiableIdleTime > 0 )
   19aba:	697b      	ldr	r3, [r7, #20]
   19abc:	2b00      	cmp	r3, #0
   19abe:	d004      	beq.n	19aca <vPortSuppressTicksAndSleep+0x86>
		{
			__asm volatile( "dsb" );
   19ac0:	f3bf 8f4f 	dsb	sy
			__asm volatile( "wfi" );
   19ac4:	bf30      	wfi
			__asm volatile( "isb" );
   19ac6:	f3bf 8f6f 	isb	sy
		}

		configPOST_SLEEP_PROCESSING( xExpectedIdleTime );       // Turn ON all Periphials in this function
   19aca:	6878      	ldr	r0, [r7, #4]
   19acc:	f7f9 fa17 	bl	12efe <am_freertos_wakeup>
        // Before renable interrupts, check how many ticks the processor has been in SLEEP
        // Adjust xTickCount via vTaskStepTick( Delta_Sleep )
        // to keep xTickCount up to date, as if ticks have been running all along

#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
        New_Timer = am_hal_stimer_counter_get();
   19ad0:	f006 feae 	bl	20830 <am_hal_stimer_counter_get>
   19ad4:	6138      	str	r0, [r7, #16]
        Delta_Sleep = (signed long) New_Timer - (signed long) g_lastSTimerVal;
   19ad6:	693b      	ldr	r3, [r7, #16]
   19ad8:	4a15      	ldr	r2, [pc, #84]	; (19b30 <vPortSuppressTicksAndSleep+0xec>)
   19ada:	6812      	ldr	r2, [r2, #0]
   19adc:	1a9b      	subs	r3, r3, r2
   19ade:	60fb      	str	r3, [r7, #12]
        g_lastSTimerVal = New_Timer - Delta_Sleep%ulTimerCountsForOneTick;
   19ae0:	4b12      	ldr	r3, [pc, #72]	; (19b2c <vPortSuppressTicksAndSleep+0xe8>)
   19ae2:	681a      	ldr	r2, [r3, #0]
   19ae4:	68fb      	ldr	r3, [r7, #12]
   19ae6:	fbb3 f1f2 	udiv	r1, r3, r2
   19aea:	fb02 f201 	mul.w	r2, r2, r1
   19aee:	1a9b      	subs	r3, r3, r2
   19af0:	693a      	ldr	r2, [r7, #16]
   19af2:	1ad3      	subs	r3, r2, r3
   19af4:	4a0e      	ldr	r2, [pc, #56]	; (19b30 <vPortSuppressTicksAndSleep+0xec>)
   19af6:	6013      	str	r3, [r2, #0]
        {
            Delta_Sleep = New_Timer; // Indicates the time elapsed since we slept
        }
#endif

        Delta_Sleep /= ulTimerCountsForOneTick;
   19af8:	4b0c      	ldr	r3, [pc, #48]	; (19b2c <vPortSuppressTicksAndSleep+0xe8>)
   19afa:	681b      	ldr	r3, [r3, #0]
   19afc:	68fa      	ldr	r2, [r7, #12]
   19afe:	fbb2 f3f3 	udiv	r3, r2, r3
   19b02:	60fb      	str	r3, [r7, #12]

        // Correct System Tick after Sleep
        vTaskStepTick( Delta_Sleep );
   19b04:	68f8      	ldr	r0, [r7, #12]
   19b06:	f002 f81b 	bl	1bb40 <vTaskStepTick>

		/* Restart System Tick */
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK

        // Clear the interrupt - to avoid extra tick counting in ISR
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   19b0a:	2001      	movs	r0, #1
   19b0c:	f006 fef4 	bl	208f8 <am_hal_stimer_int_clear>
        am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19b10:	4b06      	ldr	r3, [pc, #24]	; (19b2c <vPortSuppressTicksAndSleep+0xe8>)
   19b12:	681b      	ldr	r3, [r3, #0]
   19b14:	4619      	mov	r1, r3
   19b16:	2000      	movs	r0, #0
   19b18:	f006 fe90 	bl	2083c <am_hal_stimer_compare_delta_set>

        am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);
#endif
		/* Re-enable interrupts - see comments above the cpsid instruction()
		above. */
		__asm volatile( "cpsie i" );
   19b1c:	b662      	cpsie	i

	}
}
   19b1e:	bf00      	nop
   19b20:	3720      	adds	r7, #32
   19b22:	46bd      	mov	sp, r7
   19b24:	bd80      	pop	{r7, pc}
   19b26:	bf00      	nop
   19b28:	100043c8 	.word	0x100043c8
   19b2c:	100043c4 	.word	0x100043c4
   19b30:	100043b8 	.word	0x100043b8

00019b34 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(void)
{
   19b34:	b580      	push	{r7, lr}
   19b36:	b088      	sub	sp, #32
   19b38:	af00      	add	r7, sp, #0
    uint32_t remainder = 0;
   19b3a:	2300      	movs	r3, #0
   19b3c:	617b      	str	r3, [r7, #20]
    uint32_t curSTimer;
    uint32_t timerCounts;
    uint32_t numTicksElapsed;
    BaseType_t ctxtSwitchReqd = pdFALSE;
   19b3e:	2300      	movs	r3, #0
   19b40:	61bb      	str	r3, [r7, #24]

    curSTimer = am_hal_stimer_counter_get();
   19b42:	f006 fe75 	bl	20830 <am_hal_stimer_counter_get>
   19b46:	6138      	str	r0, [r7, #16]
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19b48:	4b24      	ldr	r3, [pc, #144]	; (19bdc <xPortStimerTickHandler+0xa8>)
   19b4a:	681b      	ldr	r3, [r3, #0]
   19b4c:	4619      	mov	r1, r3
   19b4e:	2000      	movs	r0, #0
   19b50:	f006 fe74 	bl	2083c <am_hal_stimer_compare_delta_set>

    timerCounts = curSTimer - g_lastSTimerVal;
   19b54:	4b22      	ldr	r3, [pc, #136]	; (19be0 <xPortStimerTickHandler+0xac>)
   19b56:	681b      	ldr	r3, [r3, #0]
   19b58:	693a      	ldr	r2, [r7, #16]
   19b5a:	1ad3      	subs	r3, r2, r3
   19b5c:	60fb      	str	r3, [r7, #12]
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   19b5e:	4b1f      	ldr	r3, [pc, #124]	; (19bdc <xPortStimerTickHandler+0xa8>)
   19b60:	681b      	ldr	r3, [r3, #0]
   19b62:	68fa      	ldr	r2, [r7, #12]
   19b64:	fbb2 f3f3 	udiv	r3, r2, r3
   19b68:	61fb      	str	r3, [r7, #28]
    remainder = timerCounts % ulTimerCountsForOneTick;
   19b6a:	4b1c      	ldr	r3, [pc, #112]	; (19bdc <xPortStimerTickHandler+0xa8>)
   19b6c:	681a      	ldr	r2, [r3, #0]
   19b6e:	68fb      	ldr	r3, [r7, #12]
   19b70:	fbb3 f1f2 	udiv	r1, r3, r2
   19b74:	fb02 f201 	mul.w	r2, r2, r1
   19b78:	1a9b      	subs	r3, r3, r2
   19b7a:	617b      	str	r3, [r7, #20]
    g_lastSTimerVal = curSTimer - remainder;
   19b7c:	693a      	ldr	r2, [r7, #16]
   19b7e:	697b      	ldr	r3, [r7, #20]
   19b80:	1ad3      	subs	r3, r2, r3
   19b82:	4a17      	ldr	r2, [pc, #92]	; (19be0 <xPortStimerTickHandler+0xac>)
   19b84:	6013      	str	r3, [r2, #0]
	__asm volatile
   19b86:	f3ef 8211 	mrs	r2, BASEPRI
   19b8a:	f04f 0380 	mov.w	r3, #128	; 0x80
   19b8e:	f383 8811 	msr	BASEPRI, r3
   19b92:	f3bf 8f6f 	isb	sy
   19b96:	f3bf 8f4f 	dsb	sy
   19b9a:	60ba      	str	r2, [r7, #8]
   19b9c:	607b      	str	r3, [r7, #4]
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   19b9e:	e008      	b.n	19bb2 <xPortStimerTickHandler+0x7e>
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   19ba0:	f001 ffec 	bl	1bb7c <xTaskIncrementTick>
   19ba4:	4603      	mov	r3, r0
   19ba6:	2b00      	cmp	r3, #0
   19ba8:	d101      	bne.n	19bae <xPortStimerTickHandler+0x7a>
   19baa:	69bb      	ldr	r3, [r7, #24]
   19bac:	e000      	b.n	19bb0 <xPortStimerTickHandler+0x7c>
   19bae:	2301      	movs	r3, #1
   19bb0:	61bb      	str	r3, [r7, #24]
        while (numTicksElapsed--)
   19bb2:	69fb      	ldr	r3, [r7, #28]
   19bb4:	1e5a      	subs	r2, r3, #1
   19bb6:	61fa      	str	r2, [r7, #28]
   19bb8:	2b00      	cmp	r3, #0
   19bba:	d1f1      	bne.n	19ba0 <xPortStimerTickHandler+0x6c>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   19bbc:	69bb      	ldr	r3, [r7, #24]
   19bbe:	2b00      	cmp	r3, #0
   19bc0:	d003      	beq.n	19bca <xPortStimerTickHandler+0x96>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   19bc2:	4b08      	ldr	r3, [pc, #32]	; (19be4 <xPortStimerTickHandler+0xb0>)
   19bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19bc8:	601a      	str	r2, [r3, #0]
   19bca:	2300      	movs	r3, #0
   19bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
   19bce:	683b      	ldr	r3, [r7, #0]
   19bd0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   19bd4:	bf00      	nop
   19bd6:	3720      	adds	r7, #32
   19bd8:	46bd      	mov	sp, r7
   19bda:	bd80      	pop	{r7, pc}
   19bdc:	100043c4 	.word	0x100043c4
   19be0:	100043b8 	.word	0x100043b8
   19be4:	e000ed04 	.word	0xe000ed04

00019be8 <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   19be8:	b580      	push	{r7, lr}
   19bea:	b082      	sub	sp, #8
   19bec:	af00      	add	r7, sp, #0

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   19bee:	2000      	movs	r0, #0
   19bf0:	f006 fe88 	bl	20904 <am_hal_stimer_int_status_get>
   19bf4:	6078      	str	r0, [r7, #4]
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   19bf6:	687b      	ldr	r3, [r7, #4]
   19bf8:	f003 0301 	and.w	r3, r3, #1
   19bfc:	2b00      	cmp	r3, #0
   19bfe:	d004      	beq.n	19c0a <am_stimer_cmpr0_isr+0x22>
    {
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   19c00:	2001      	movs	r0, #1
   19c02:	f006 fe79 	bl	208f8 <am_hal_stimer_int_clear>

        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler();
   19c06:	f7ff ff95 	bl	19b34 <xPortStimerTickHandler>
    }
}
   19c0a:	bf00      	nop
   19c0c:	3708      	adds	r7, #8
   19c0e:	46bd      	mov	sp, r7
   19c10:	bd80      	pop	{r7, pc}
	...

00019c14 <vPortSetupTimerInterrupt>:

#endif // AM_FREERTOS_USE_STIMER_FOR_TICK


void vPortSetupTimerInterrupt( void )
{
   19c14:	b580      	push	{r7, lr}
   19c16:	b082      	sub	sp, #8
   19c18:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS_USE_STIMER_FOR_TICK
    uint32_t oldCfg;
    /* Calculate the constants required to configure the tick interrupt. */
    #if configUSE_TICKLESS_IDLE == 2
    {
        ulTimerCountsForOneTick = (configSTIMER_CLOCK_HZ /configTICK_RATE_HZ) ; //( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
   19c1a:	4b19      	ldr	r3, [pc, #100]	; (19c80 <vPortSetupTimerInterrupt+0x6c>)
   19c1c:	2220      	movs	r2, #32
   19c1e:	601a      	str	r2, [r3, #0]
        xMaximumPossibleSuppressedTicks = portMAX_32_BIT_NUMBER / ulTimerCountsForOneTick;
   19c20:	4b17      	ldr	r3, [pc, #92]	; (19c80 <vPortSetupTimerInterrupt+0x6c>)
   19c22:	681b      	ldr	r3, [r3, #0]
   19c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19c28:	fbb2 f3f3 	udiv	r3, r2, r3
   19c2c:	4a15      	ldr	r2, [pc, #84]	; (19c84 <vPortSetupTimerInterrupt+0x70>)
   19c2e:	6013      	str	r3, [r2, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */
    //
    //
    //
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   19c30:	2001      	movs	r0, #1
   19c32:	f006 fe57 	bl	208e4 <am_hal_stimer_int_enable>
    //
    // Enable the timer interrupt in the NVIC, making sure to use the
    // appropriate priority level.
    //
#if AM_CMSIS_REGS
    NVIC_SetPriority(STIMER_CMPR0_IRQn, NVIC_configKERNEL_INTERRUPT_PRIORITY);
   19c36:	2107      	movs	r1, #7
   19c38:	2017      	movs	r0, #23
   19c3a:	f7ff fd07 	bl	1964c <__NVIC_SetPriority>
    NVIC_EnableIRQ(STIMER_CMPR0_IRQn);
   19c3e:	2017      	movs	r0, #23
   19c40:	f7ff fce6 	bl	19610 <__NVIC_EnableIRQ>
#endif // AM_CMSIS_REGS

    //
    // Configure the STIMER
    //
    oldCfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   19c44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   19c48:	f006 fde8 	bl	2081c <am_hal_stimer_config>
   19c4c:	6078      	str	r0, [r7, #4]
    g_lastSTimerVal = am_hal_stimer_counter_get();
   19c4e:	f006 fdef 	bl	20830 <am_hal_stimer_counter_get>
   19c52:	4602      	mov	r2, r0
   19c54:	4b0c      	ldr	r3, [pc, #48]	; (19c88 <vPortSetupTimerInterrupt+0x74>)
   19c56:	601a      	str	r2, [r3, #0]
    am_hal_stimer_compare_delta_set(0, ulTimerCountsForOneTick);
   19c58:	4b09      	ldr	r3, [pc, #36]	; (19c80 <vPortSetupTimerInterrupt+0x6c>)
   19c5a:	681b      	ldr	r3, [r3, #0]
   19c5c:	4619      	mov	r1, r3
   19c5e:	2000      	movs	r0, #0
   19c60:	f006 fdec 	bl	2083c <am_hal_stimer_compare_delta_set>
#if AM_CMSIS_REGS
    am_hal_stimer_config((oldCfg & ~(AM_HAL_STIMER_CFG_FREEZE|CTIMER_STCFG_CLKSEL_Msk)) | configSTIMER_CLOCK | AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
   19c64:	687a      	ldr	r2, [r7, #4]
   19c66:	4b09      	ldr	r3, [pc, #36]	; (19c8c <vPortSetupTimerInterrupt+0x78>)
   19c68:	4013      	ands	r3, r2
   19c6a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   19c6e:	f043 0301 	orr.w	r3, r3, #1
   19c72:	4618      	mov	r0, r3
   19c74:	f006 fdd2 	bl	2081c <am_hal_stimer_config>
    //
    am_hal_ctimer_start(configCTIMER_NUM, AM_HAL_CTIMER_BOTH);


#endif // AM_FREERTOS_USE_STIMER_FOR_TICK
}
   19c78:	bf00      	nop
   19c7a:	3708      	adds	r7, #8
   19c7c:	46bd      	mov	sp, r7
   19c7e:	bd80      	pop	{r7, pc}
   19c80:	100043c4 	.word	0x100043c4
   19c84:	100043c8 	.word	0x100043c8
   19c88:	100043b8 	.word	0x100043b8
   19c8c:	7ffffef0 	.word	0x7ffffef0

00019c90 <AppDbInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbInit(void)
{
   19c90:	b480      	push	{r7}
   19c92:	af00      	add	r7, sp, #0
#ifdef AM_BLE_USE_NVM
    AppCopyRecListInNvm(pAppDbNewRec);
#endif
    return;
   19c94:	bf00      	nop
}
   19c96:	46bd      	mov	sp, r7
   19c98:	f85d 7b04 	ldr.w	r7, [sp], #4
   19c9c:	4770      	bx	lr
	...

00019ca0 <AppDbNewRecord>:
 *
 *  \return Database record handle.
 */
/*************************************************************************************************/
appDbHdl_t AppDbNewRecord(uint8_t addrType, uint8_t *pAddr)
{
   19ca0:	b580      	push	{r7, lr}
   19ca2:	b084      	sub	sp, #16
   19ca4:	af00      	add	r7, sp, #0
   19ca6:	4603      	mov	r3, r0
   19ca8:	6039      	str	r1, [r7, #0]
   19caa:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19cac:	4b22      	ldr	r3, [pc, #136]	; (19d38 <AppDbNewRecord+0x98>)
   19cae:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find a free record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19cb0:	2303      	movs	r3, #3
   19cb2:	72fb      	strb	r3, [r7, #11]
   19cb4:	e00a      	b.n	19ccc <AppDbNewRecord+0x2c>
  {
    if (!pRec->inUse)
   19cb6:	68fb      	ldr	r3, [r7, #12]
   19cb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19cbc:	2b00      	cmp	r3, #0
   19cbe:	d009      	beq.n	19cd4 <AppDbNewRecord+0x34>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19cc0:	7afb      	ldrb	r3, [r7, #11]
   19cc2:	3b01      	subs	r3, #1
   19cc4:	72fb      	strb	r3, [r7, #11]
   19cc6:	68fb      	ldr	r3, [r7, #12]
   19cc8:	33b0      	adds	r3, #176	; 0xb0
   19cca:	60fb      	str	r3, [r7, #12]
   19ccc:	7afb      	ldrb	r3, [r7, #11]
   19cce:	2b00      	cmp	r3, #0
   19cd0:	d1f1      	bne.n	19cb6 <AppDbNewRecord+0x16>
   19cd2:	e000      	b.n	19cd6 <AppDbNewRecord+0x36>
    {
      break;
   19cd4:	bf00      	nop
    }
  }
  
  /* if all records were allocated */
  if (i == 0)
   19cd6:	7afb      	ldrb	r3, [r7, #11]
   19cd8:	2b00      	cmp	r3, #0
   19cda:	d10f      	bne.n	19cfc <AppDbNewRecord+0x5c>
  {
    /* overwrite a record */
    pRec = pAppDbNewRec;
   19cdc:	4b17      	ldr	r3, [pc, #92]	; (19d3c <AppDbNewRecord+0x9c>)
   19cde:	681b      	ldr	r3, [r3, #0]
   19ce0:	60fb      	str	r3, [r7, #12]
    
    /* get next record to overwrite */
    pAppDbNewRec++;
   19ce2:	4b16      	ldr	r3, [pc, #88]	; (19d3c <AppDbNewRecord+0x9c>)
   19ce4:	681b      	ldr	r3, [r3, #0]
   19ce6:	33b0      	adds	r3, #176	; 0xb0
   19ce8:	4a14      	ldr	r2, [pc, #80]	; (19d3c <AppDbNewRecord+0x9c>)
   19cea:	6013      	str	r3, [r2, #0]
    if (pAppDbNewRec == &appDb.rec[APP_DB_NUM_RECS])
   19cec:	4b13      	ldr	r3, [pc, #76]	; (19d3c <AppDbNewRecord+0x9c>)
   19cee:	681b      	ldr	r3, [r3, #0]
   19cf0:	4a13      	ldr	r2, [pc, #76]	; (19d40 <AppDbNewRecord+0xa0>)
   19cf2:	4293      	cmp	r3, r2
   19cf4:	d102      	bne.n	19cfc <AppDbNewRecord+0x5c>
    {
      pAppDbNewRec = appDb.rec;
   19cf6:	4b11      	ldr	r3, [pc, #68]	; (19d3c <AppDbNewRecord+0x9c>)
   19cf8:	4a0f      	ldr	r2, [pc, #60]	; (19d38 <AppDbNewRecord+0x98>)
   19cfa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* initialize record */
  memset(pRec, 0, sizeof(appDbRec_t));
   19cfc:	22b0      	movs	r2, #176	; 0xb0
   19cfe:	2100      	movs	r1, #0
   19d00:	68f8      	ldr	r0, [r7, #12]
   19d02:	f7f2 fb2b 	bl	c35c <memset>
  pRec->inUse = TRUE;
   19d06:	68fb      	ldr	r3, [r7, #12]
   19d08:	2201      	movs	r2, #1
   19d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  pRec->addrType = addrType;
   19d0e:	68fb      	ldr	r3, [r7, #12]
   19d10:	79fa      	ldrb	r2, [r7, #7]
   19d12:	719a      	strb	r2, [r3, #6]
  BdaCpy(pRec->peerAddr, pAddr);
   19d14:	68fb      	ldr	r3, [r7, #12]
   19d16:	6839      	ldr	r1, [r7, #0]
   19d18:	4618      	mov	r0, r3
   19d1a:	f7fe fd65 	bl	187e8 <BdaCpy>
  pRec->peerAddedToRl = FALSE;
   19d1e:	68fb      	ldr	r3, [r7, #12]
   19d20:	2200      	movs	r2, #0
   19d22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pRec->peerRpao = FALSE;
   19d26:	68fb      	ldr	r3, [r7, #12]
   19d28:	2200      	movs	r2, #0
   19d2a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return (appDbHdl_t) pRec;
   19d2e:	68fb      	ldr	r3, [r7, #12]
}
   19d30:	4618      	mov	r0, r3
   19d32:	3710      	adds	r7, #16
   19d34:	46bd      	mov	sp, r7
   19d36:	bd80      	pop	{r7, pc}
   19d38:	100043cc 	.word	0x100043cc
   19d3c:	100023ac 	.word	0x100023ac
   19d40:	100045dc 	.word	0x100045dc

00019d44 <AppDbGetNextRecord>:
*
*  \return Next record handle found. APP_DB_HDL_NONE, otherwise.
*/
/*************************************************************************************************/
appDbHdl_t AppDbGetNextRecord(appDbHdl_t hdl)
{
   19d44:	b580      	push	{r7, lr}
   19d46:	b084      	sub	sp, #16
   19d48:	af00      	add	r7, sp, #0
   19d4a:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec;

  /* if first record is requested */
  if (hdl == APP_DB_HDL_NONE)
   19d4c:	687b      	ldr	r3, [r7, #4]
   19d4e:	2b00      	cmp	r3, #0
   19d50:	d102      	bne.n	19d58 <AppDbGetNextRecord+0x14>
  {
    pRec = appDb.rec;
   19d52:	4b14      	ldr	r3, [pc, #80]	; (19da4 <AppDbGetNextRecord+0x60>)
   19d54:	60fb      	str	r3, [r7, #12]
   19d56:	e01c      	b.n	19d92 <AppDbGetNextRecord+0x4e>
  }
  /* if valid record passed in */
  else if (AppDbRecordInUse(hdl))
   19d58:	6878      	ldr	r0, [r7, #4]
   19d5a:	f000 f859 	bl	19e10 <AppDbRecordInUse>
   19d5e:	4603      	mov	r3, r0
   19d60:	2b00      	cmp	r3, #0
   19d62:	d005      	beq.n	19d70 <AppDbGetNextRecord+0x2c>
  {
    pRec = (appDbRec_t *)hdl;
   19d64:	687b      	ldr	r3, [r7, #4]
   19d66:	60fb      	str	r3, [r7, #12]
    pRec++;
   19d68:	68fb      	ldr	r3, [r7, #12]
   19d6a:	33b0      	adds	r3, #176	; 0xb0
   19d6c:	60fb      	str	r3, [r7, #12]
   19d6e:	e010      	b.n	19d92 <AppDbGetNextRecord+0x4e>
  }
  /* invalid record passed in */
  else
  {
    return APP_DB_HDL_NONE;
   19d70:	2300      	movs	r3, #0
   19d72:	e013      	b.n	19d9c <AppDbGetNextRecord+0x58>

  /* look for next valid record */
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
  {
    /* if record is in use */
    if (pRec->inUse && pRec->valid)
   19d74:	68fb      	ldr	r3, [r7, #12]
   19d76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19d7a:	2b00      	cmp	r3, #0
   19d7c:	d006      	beq.n	19d8c <AppDbGetNextRecord+0x48>
   19d7e:	68fb      	ldr	r3, [r7, #12]
   19d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19d84:	2b00      	cmp	r3, #0
   19d86:	d001      	beq.n	19d8c <AppDbGetNextRecord+0x48>
    {
      /* record found */
      return (appDbHdl_t)pRec;
   19d88:	68fb      	ldr	r3, [r7, #12]
   19d8a:	e007      	b.n	19d9c <AppDbGetNextRecord+0x58>
    }

    /* look for next record */
    pRec++;
   19d8c:	68fb      	ldr	r3, [r7, #12]
   19d8e:	33b0      	adds	r3, #176	; 0xb0
   19d90:	60fb      	str	r3, [r7, #12]
  while (pRec < &appDb.rec[APP_DB_NUM_RECS])
   19d92:	68fb      	ldr	r3, [r7, #12]
   19d94:	4a04      	ldr	r2, [pc, #16]	; (19da8 <AppDbGetNextRecord+0x64>)
   19d96:	4293      	cmp	r3, r2
   19d98:	d3ec      	bcc.n	19d74 <AppDbGetNextRecord+0x30>
  }

  /* end of records */
  return APP_DB_HDL_NONE;
   19d9a:	2300      	movs	r3, #0
}
   19d9c:	4618      	mov	r0, r3
   19d9e:	3710      	adds	r7, #16
   19da0:	46bd      	mov	sp, r7
   19da2:	bd80      	pop	{r7, pc}
   19da4:	100043cc 	.word	0x100043cc
   19da8:	100045dc 	.word	0x100045dc

00019dac <AppDbDeleteRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteRecord(appDbHdl_t hdl)
{
   19dac:	b480      	push	{r7}
   19dae:	b083      	sub	sp, #12
   19db0:	af00      	add	r7, sp, #0
   19db2:	6078      	str	r0, [r7, #4]
  ((appDbRec_t *) hdl)->inUse = FALSE;
   19db4:	687b      	ldr	r3, [r7, #4]
   19db6:	2200      	movs	r2, #0
   19db8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
   19dbc:	bf00      	nop
   19dbe:	370c      	adds	r7, #12
   19dc0:	46bd      	mov	sp, r7
   19dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   19dc6:	4770      	bx	lr

00019dc8 <AppDbValidateRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbValidateRecord(appDbHdl_t hdl, uint8_t keyMask)
{
   19dc8:	b480      	push	{r7}
   19dca:	b083      	sub	sp, #12
   19dcc:	af00      	add	r7, sp, #0
   19dce:	6078      	str	r0, [r7, #4]
   19dd0:	460b      	mov	r3, r1
   19dd2:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *) hdl)->valid = TRUE;
   19dd4:	687b      	ldr	r3, [r7, #4]
   19dd6:	2201      	movs	r2, #1
   19dd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ((appDbRec_t *) hdl)->keyValidMask = keyMask;
   19ddc:	687b      	ldr	r3, [r7, #4]
   19dde:	78fa      	ldrb	r2, [r7, #3]
   19de0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

#ifdef AM_BLE_USE_NVM
  AppStorePairingInfoInNVM(hdl);
#endif
}
   19de4:	bf00      	nop
   19de6:	370c      	adds	r7, #12
   19de8:	46bd      	mov	sp, r7
   19dea:	f85d 7b04 	ldr.w	r7, [sp], #4
   19dee:	4770      	bx	lr

00019df0 <AppDbCheckValidRecord>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbCheckValidRecord(appDbHdl_t hdl)
{
   19df0:	b580      	push	{r7, lr}
   19df2:	b082      	sub	sp, #8
   19df4:	af00      	add	r7, sp, #0
   19df6:	6078      	str	r0, [r7, #4]
  if (((appDbRec_t *) hdl)->valid == FALSE)
   19df8:	687b      	ldr	r3, [r7, #4]
   19dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19dfe:	2b00      	cmp	r3, #0
   19e00:	d102      	bne.n	19e08 <AppDbCheckValidRecord+0x18>
  {
    AppDbDeleteRecord(hdl);
   19e02:	6878      	ldr	r0, [r7, #4]
   19e04:	f7ff ffd2 	bl	19dac <AppDbDeleteRecord>
  }
}
   19e08:	bf00      	nop
   19e0a:	3708      	adds	r7, #8
   19e0c:	46bd      	mov	sp, r7
   19e0e:	bd80      	pop	{r7, pc}

00019e10 <AppDbRecordInUse>:
*
*  \return TURE if record in use. FALSE, otherwise.
*/
/*************************************************************************************************/
bool_t AppDbRecordInUse(appDbHdl_t hdl)
{
   19e10:	b480      	push	{r7}
   19e12:	b085      	sub	sp, #20
   19e14:	af00      	add	r7, sp, #0
   19e16:	6078      	str	r0, [r7, #4]
  appDbRec_t  *pRec = appDb.rec;
   19e18:	4b12      	ldr	r3, [pc, #72]	; (19e64 <AppDbRecordInUse+0x54>)
   19e1a:	60fb      	str	r3, [r7, #12]
  uint8_t     i;

  /* see if record is in database record list */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19e1c:	2303      	movs	r3, #3
   19e1e:	72fb      	strb	r3, [r7, #11]
   19e20:	e015      	b.n	19e4e <AppDbRecordInUse+0x3e>
  {
    if (pRec->inUse && pRec->valid && (pRec == ((appDbRec_t *)hdl)))
   19e22:	68fb      	ldr	r3, [r7, #12]
   19e24:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19e28:	2b00      	cmp	r3, #0
   19e2a:	d00a      	beq.n	19e42 <AppDbRecordInUse+0x32>
   19e2c:	68fb      	ldr	r3, [r7, #12]
   19e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   19e32:	2b00      	cmp	r3, #0
   19e34:	d005      	beq.n	19e42 <AppDbRecordInUse+0x32>
   19e36:	68fa      	ldr	r2, [r7, #12]
   19e38:	687b      	ldr	r3, [r7, #4]
   19e3a:	429a      	cmp	r2, r3
   19e3c:	d101      	bne.n	19e42 <AppDbRecordInUse+0x32>
    {
      return TRUE;
   19e3e:	2301      	movs	r3, #1
   19e40:	e009      	b.n	19e56 <AppDbRecordInUse+0x46>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19e42:	7afb      	ldrb	r3, [r7, #11]
   19e44:	3b01      	subs	r3, #1
   19e46:	72fb      	strb	r3, [r7, #11]
   19e48:	68fb      	ldr	r3, [r7, #12]
   19e4a:	33b0      	adds	r3, #176	; 0xb0
   19e4c:	60fb      	str	r3, [r7, #12]
   19e4e:	7afb      	ldrb	r3, [r7, #11]
   19e50:	2b00      	cmp	r3, #0
   19e52:	d1e6      	bne.n	19e22 <AppDbRecordInUse+0x12>
    }
  }

  return FALSE;
   19e54:	2300      	movs	r3, #0
}
   19e56:	4618      	mov	r0, r3
   19e58:	3714      	adds	r7, #20
   19e5a:	46bd      	mov	sp, r7
   19e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   19e60:	4770      	bx	lr
   19e62:	bf00      	nop
   19e64:	100043cc 	.word	0x100043cc

00019e68 <AppDbCheckBonded>:
 *
 *  \return TRUE if a bonded device is found, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t AppDbCheckBonded(void)
{
   19e68:	b480      	push	{r7}
   19e6a:	b083      	sub	sp, #12
   19e6c:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19e6e:	4b0e      	ldr	r3, [pc, #56]	; (19ea8 <AppDbCheckBonded+0x40>)
   19e70:	607b      	str	r3, [r7, #4]
  uint8_t     i;
  
  /* find a record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19e72:	2303      	movs	r3, #3
   19e74:	70fb      	strb	r3, [r7, #3]
   19e76:	e00c      	b.n	19e92 <AppDbCheckBonded+0x2a>
  {
    if (pRec->inUse)
   19e78:	687b      	ldr	r3, [r7, #4]
   19e7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19e7e:	2b00      	cmp	r3, #0
   19e80:	d001      	beq.n	19e86 <AppDbCheckBonded+0x1e>
    {
      return TRUE;
   19e82:	2301      	movs	r3, #1
   19e84:	e009      	b.n	19e9a <AppDbCheckBonded+0x32>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19e86:	78fb      	ldrb	r3, [r7, #3]
   19e88:	3b01      	subs	r3, #1
   19e8a:	70fb      	strb	r3, [r7, #3]
   19e8c:	687b      	ldr	r3, [r7, #4]
   19e8e:	33b0      	adds	r3, #176	; 0xb0
   19e90:	607b      	str	r3, [r7, #4]
   19e92:	78fb      	ldrb	r3, [r7, #3]
   19e94:	2b00      	cmp	r3, #0
   19e96:	d1ef      	bne.n	19e78 <AppDbCheckBonded+0x10>
    }
  }
  
  return FALSE;
   19e98:	2300      	movs	r3, #0
}
   19e9a:	4618      	mov	r0, r3
   19e9c:	370c      	adds	r7, #12
   19e9e:	46bd      	mov	sp, r7
   19ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ea4:	4770      	bx	lr
   19ea6:	bf00      	nop
   19ea8:	100043cc 	.word	0x100043cc

00019eac <AppDbDeleteAllRecords>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbDeleteAllRecords(void)
{
   19eac:	b480      	push	{r7}
   19eae:	b083      	sub	sp, #12
   19eb0:	af00      	add	r7, sp, #0
  appDbRec_t  *pRec = appDb.rec;
   19eb2:	4b0c      	ldr	r3, [pc, #48]	; (19ee4 <AppDbDeleteAllRecords+0x38>)
   19eb4:	607b      	str	r3, [r7, #4]
  uint8_t     i;

  /* set in use to false for all records */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19eb6:	2303      	movs	r3, #3
   19eb8:	70fb      	strb	r3, [r7, #3]
   19eba:	e009      	b.n	19ed0 <AppDbDeleteAllRecords+0x24>
  {
    pRec->inUse = FALSE;
   19ebc:	687b      	ldr	r3, [r7, #4]
   19ebe:	2200      	movs	r2, #0
   19ec0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19ec4:	78fb      	ldrb	r3, [r7, #3]
   19ec6:	3b01      	subs	r3, #1
   19ec8:	70fb      	strb	r3, [r7, #3]
   19eca:	687b      	ldr	r3, [r7, #4]
   19ecc:	33b0      	adds	r3, #176	; 0xb0
   19ece:	607b      	str	r3, [r7, #4]
   19ed0:	78fb      	ldrb	r3, [r7, #3]
   19ed2:	2b00      	cmp	r3, #0
   19ed4:	d1f2      	bne.n	19ebc <AppDbDeleteAllRecords+0x10>
  }  
}
   19ed6:	bf00      	nop
   19ed8:	370c      	adds	r7, #12
   19eda:	46bd      	mov	sp, r7
   19edc:	f85d 7b04 	ldr.w	r7, [sp], #4
   19ee0:	4770      	bx	lr
   19ee2:	bf00      	nop
   19ee4:	100043cc 	.word	0x100043cc

00019ee8 <AppDbFindByAddr>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByAddr(uint8_t addrType, uint8_t *pAddr)
{
   19ee8:	b580      	push	{r7, lr}
   19eea:	b084      	sub	sp, #16
   19eec:	af00      	add	r7, sp, #0
   19eee:	4603      	mov	r3, r0
   19ef0:	6039      	str	r1, [r7, #0]
   19ef2:	71fb      	strb	r3, [r7, #7]
  appDbRec_t  *pRec = appDb.rec;
   19ef4:	4b16      	ldr	r3, [pc, #88]	; (19f50 <AppDbFindByAddr+0x68>)
   19ef6:	60fb      	str	r3, [r7, #12]
  uint8_t     peerAddrType = DmHostAddrType(addrType);
   19ef8:	79fb      	ldrb	r3, [r7, #7]
   19efa:	4618      	mov	r0, r3
   19efc:	f7f5 fe0a 	bl	fb14 <DmHostAddrType>
   19f00:	4603      	mov	r3, r0
   19f02:	72bb      	strb	r3, [r7, #10]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19f04:	2303      	movs	r3, #3
   19f06:	72fb      	strb	r3, [r7, #11]
   19f08:	e019      	b.n	19f3e <AppDbFindByAddr+0x56>
  {
    if (pRec->inUse && (pRec->addrType == peerAddrType) && BdaCmp(pRec->peerAddr, pAddr))
   19f0a:	68fb      	ldr	r3, [r7, #12]
   19f0c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19f10:	2b00      	cmp	r3, #0
   19f12:	d00e      	beq.n	19f32 <AppDbFindByAddr+0x4a>
   19f14:	68fb      	ldr	r3, [r7, #12]
   19f16:	799b      	ldrb	r3, [r3, #6]
   19f18:	7aba      	ldrb	r2, [r7, #10]
   19f1a:	429a      	cmp	r2, r3
   19f1c:	d109      	bne.n	19f32 <AppDbFindByAddr+0x4a>
   19f1e:	68fb      	ldr	r3, [r7, #12]
   19f20:	6839      	ldr	r1, [r7, #0]
   19f22:	4618      	mov	r0, r3
   19f24:	f7fe fc6e 	bl	18804 <BdaCmp>
   19f28:	4603      	mov	r3, r0
   19f2a:	2b00      	cmp	r3, #0
   19f2c:	d001      	beq.n	19f32 <AppDbFindByAddr+0x4a>
    {
      return (appDbHdl_t) pRec;
   19f2e:	68fb      	ldr	r3, [r7, #12]
   19f30:	e009      	b.n	19f46 <AppDbFindByAddr+0x5e>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19f32:	7afb      	ldrb	r3, [r7, #11]
   19f34:	3b01      	subs	r3, #1
   19f36:	72fb      	strb	r3, [r7, #11]
   19f38:	68fb      	ldr	r3, [r7, #12]
   19f3a:	33b0      	adds	r3, #176	; 0xb0
   19f3c:	60fb      	str	r3, [r7, #12]
   19f3e:	7afb      	ldrb	r3, [r7, #11]
   19f40:	2b00      	cmp	r3, #0
   19f42:	d1e2      	bne.n	19f0a <AppDbFindByAddr+0x22>
    }
  }
  
  return APP_DB_HDL_NONE;
   19f44:	2300      	movs	r3, #0
}
   19f46:	4618      	mov	r0, r3
   19f48:	3710      	adds	r7, #16
   19f4a:	46bd      	mov	sp, r7
   19f4c:	bd80      	pop	{r7, pc}
   19f4e:	bf00      	nop
   19f50:	100043cc 	.word	0x100043cc

00019f54 <AppDbFindByLtkReq>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE if not found.
 */
/*************************************************************************************************/
appDbHdl_t AppDbFindByLtkReq(uint16_t encDiversifier, uint8_t *pRandNum)
{
   19f54:	b580      	push	{r7, lr}
   19f56:	b084      	sub	sp, #16
   19f58:	af00      	add	r7, sp, #0
   19f5a:	4603      	mov	r3, r0
   19f5c:	6039      	str	r1, [r7, #0]
   19f5e:	80fb      	strh	r3, [r7, #6]
  appDbRec_t  *pRec = appDb.rec;
   19f60:	4b14      	ldr	r3, [pc, #80]	; (19fb4 <AppDbFindByLtkReq+0x60>)
   19f62:	60fb      	str	r3, [r7, #12]
  uint8_t     i;
  
  /* find matching record */
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19f64:	2303      	movs	r3, #3
   19f66:	72fb      	strb	r3, [r7, #11]
   19f68:	e01c      	b.n	19fa4 <AppDbFindByLtkReq+0x50>
  {
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   19f6a:	68fb      	ldr	r3, [r7, #12]
   19f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   19f70:	2b00      	cmp	r3, #0
   19f72:	d011      	beq.n	19f98 <AppDbFindByLtkReq+0x44>
   19f74:	68fb      	ldr	r3, [r7, #12]
   19f76:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   19f7a:	88fa      	ldrh	r2, [r7, #6]
   19f7c:	429a      	cmp	r2, r3
   19f7e:	d10b      	bne.n	19f98 <AppDbFindByLtkReq+0x44>
        (memcmp(pRec->localLtk.rand, pRandNum, SMP_RAND8_LEN) == 0))
   19f80:	68fb      	ldr	r3, [r7, #12]
   19f82:	3344      	adds	r3, #68	; 0x44
   19f84:	2208      	movs	r2, #8
   19f86:	6839      	ldr	r1, [r7, #0]
   19f88:	4618      	mov	r0, r3
   19f8a:	f7f2 f8b9 	bl	c100 <memcmp>
   19f8e:	4603      	mov	r3, r0
    if (pRec->inUse && (pRec->localLtk.ediv == encDiversifier) &&
   19f90:	2b00      	cmp	r3, #0
   19f92:	d101      	bne.n	19f98 <AppDbFindByLtkReq+0x44>
    {
      return (appDbHdl_t) pRec;
   19f94:	68fb      	ldr	r3, [r7, #12]
   19f96:	e009      	b.n	19fac <AppDbFindByLtkReq+0x58>
  for (i = APP_DB_NUM_RECS; i > 0; i--, pRec++)
   19f98:	7afb      	ldrb	r3, [r7, #11]
   19f9a:	3b01      	subs	r3, #1
   19f9c:	72fb      	strb	r3, [r7, #11]
   19f9e:	68fb      	ldr	r3, [r7, #12]
   19fa0:	33b0      	adds	r3, #176	; 0xb0
   19fa2:	60fb      	str	r3, [r7, #12]
   19fa4:	7afb      	ldrb	r3, [r7, #11]
   19fa6:	2b00      	cmp	r3, #0
   19fa8:	d1df      	bne.n	19f6a <AppDbFindByLtkReq+0x16>
    }
  }
  
  return APP_DB_HDL_NONE;
   19faa:	2300      	movs	r3, #0
}
   19fac:	4618      	mov	r0, r3
   19fae:	3710      	adds	r7, #16
   19fb0:	46bd      	mov	sp, r7
   19fb2:	bd80      	pop	{r7, pc}
   19fb4:	100043cc 	.word	0x100043cc

00019fb8 <AppDbGetKey>:
 *
 *  \return Pointer to key if key is valid or NULL if not valid.
 */
/*************************************************************************************************/
dmSecKey_t *AppDbGetKey(appDbHdl_t hdl, uint8_t type, uint8_t *pSecLevel)
{
   19fb8:	b480      	push	{r7}
   19fba:	b087      	sub	sp, #28
   19fbc:	af00      	add	r7, sp, #0
   19fbe:	60f8      	str	r0, [r7, #12]
   19fc0:	460b      	mov	r3, r1
   19fc2:	607a      	str	r2, [r7, #4]
   19fc4:	72fb      	strb	r3, [r7, #11]
  dmSecKey_t *pKey = NULL;
   19fc6:	2300      	movs	r3, #0
   19fc8:	617b      	str	r3, [r7, #20]
  
  /* if key valid */
  if ((type & ((appDbRec_t *) hdl)->keyValidMask) != 0)
   19fca:	68fb      	ldr	r3, [r7, #12]
   19fcc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   19fd0:	7afb      	ldrb	r3, [r7, #11]
   19fd2:	4013      	ands	r3, r2
   19fd4:	b2db      	uxtb	r3, r3
   19fd6:	2b00      	cmp	r3, #0
   19fd8:	d031      	beq.n	1a03e <AppDbGetKey+0x86>
  {
    switch(type)
   19fda:	7afb      	ldrb	r3, [r7, #11]
   19fdc:	3b01      	subs	r3, #1
   19fde:	2b07      	cmp	r3, #7
   19fe0:	d82c      	bhi.n	1a03c <AppDbGetKey+0x84>
   19fe2:	a201      	add	r2, pc, #4	; (adr r2, 19fe8 <AppDbGetKey+0x30>)
   19fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19fe8:	0001a009 	.word	0x0001a009
   19fec:	0001a01b 	.word	0x0001a01b
   19ff0:	0001a03d 	.word	0x0001a03d
   19ff4:	0001a02d 	.word	0x0001a02d
   19ff8:	0001a03d 	.word	0x0001a03d
   19ffc:	0001a03d 	.word	0x0001a03d
   1a000:	0001a03d 	.word	0x0001a03d
   1a004:	0001a035 	.word	0x0001a035
    {
      case DM_KEY_LOCAL_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->localLtkSecLevel;
   1a008:	68fb      	ldr	r3, [r7, #12]
   1a00a:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
   1a00e:	687b      	ldr	r3, [r7, #4]
   1a010:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->localLtk;
   1a012:	68fb      	ldr	r3, [r7, #12]
   1a014:	3334      	adds	r3, #52	; 0x34
   1a016:	617b      	str	r3, [r7, #20]
        break;
   1a018:	e011      	b.n	1a03e <AppDbGetKey+0x86>

      case DM_KEY_PEER_LTK:
        *pSecLevel = ((appDbRec_t *) hdl)->peerLtkSecLevel;
   1a01a:	68fb      	ldr	r3, [r7, #12]
   1a01c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1a020:	687b      	ldr	r3, [r7, #4]
   1a022:	701a      	strb	r2, [r3, #0]
        pKey = (dmSecKey_t *) &((appDbRec_t *) hdl)->peerLtk;
   1a024:	68fb      	ldr	r3, [r7, #12]
   1a026:	3350      	adds	r3, #80	; 0x50
   1a028:	617b      	str	r3, [r7, #20]
        break;
   1a02a:	e008      	b.n	1a03e <AppDbGetKey+0x86>

      case DM_KEY_IRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerIrk;
   1a02c:	68fb      	ldr	r3, [r7, #12]
   1a02e:	3307      	adds	r3, #7
   1a030:	617b      	str	r3, [r7, #20]
        break;
   1a032:	e004      	b.n	1a03e <AppDbGetKey+0x86>

      case DM_KEY_CSRK:
        pKey = (dmSecKey_t *)&((appDbRec_t *)hdl)->peerCsrk;
   1a034:	68fb      	ldr	r3, [r7, #12]
   1a036:	331e      	adds	r3, #30
   1a038:	617b      	str	r3, [r7, #20]
        break;
   1a03a:	e000      	b.n	1a03e <AppDbGetKey+0x86>
        
      default:
        break;
   1a03c:	bf00      	nop
    }
  }
  
  return pKey;
   1a03e:	697b      	ldr	r3, [r7, #20]
}
   1a040:	4618      	mov	r0, r3
   1a042:	371c      	adds	r7, #28
   1a044:	46bd      	mov	sp, r7
   1a046:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a04a:	4770      	bx	lr

0001a04c <AppDbSetKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetKey(appDbHdl_t hdl, dmSecKeyIndEvt_t *pKey)
{
   1a04c:	b5b0      	push	{r4, r5, r7, lr}
   1a04e:	b082      	sub	sp, #8
   1a050:	af00      	add	r7, sp, #0
   1a052:	6078      	str	r0, [r7, #4]
   1a054:	6039      	str	r1, [r7, #0]
  switch(pKey->type)
   1a056:	683b      	ldr	r3, [r7, #0]
   1a058:	7f9b      	ldrb	r3, [r3, #30]
   1a05a:	3b01      	subs	r3, #1
   1a05c:	2b07      	cmp	r3, #7
   1a05e:	d86c      	bhi.n	1a13a <AppDbSetKey+0xee>
   1a060:	a201      	add	r2, pc, #4	; (adr r2, 1a068 <AppDbSetKey+0x1c>)
   1a062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a066:	bf00      	nop
   1a068:	0001a089 	.word	0x0001a089
   1a06c:	0001a0b3 	.word	0x0001a0b3
   1a070:	0001a13b 	.word	0x0001a13b
   1a074:	0001a0dd 	.word	0x0001a0dd
   1a078:	0001a13b 	.word	0x0001a13b
   1a07c:	0001a13b 	.word	0x0001a13b
   1a080:	0001a13b 	.word	0x0001a13b
   1a084:	0001a119 	.word	0x0001a119
  {
    case DM_KEY_LOCAL_LTK:
      ((appDbRec_t *) hdl)->localLtkSecLevel = pKey->secLevel;
   1a088:	683b      	ldr	r3, [r7, #0]
   1a08a:	7fda      	ldrb	r2, [r3, #31]
   1a08c:	687b      	ldr	r3, [r7, #4]
   1a08e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      ((appDbRec_t *) hdl)->localLtk = pKey->keyData.ltk;
   1a092:	687a      	ldr	r2, [r7, #4]
   1a094:	683b      	ldr	r3, [r7, #0]
   1a096:	f102 0434 	add.w	r4, r2, #52	; 0x34
   1a09a:	1d1d      	adds	r5, r3, #4
   1a09c:	6828      	ldr	r0, [r5, #0]
   1a09e:	6869      	ldr	r1, [r5, #4]
   1a0a0:	68aa      	ldr	r2, [r5, #8]
   1a0a2:	68eb      	ldr	r3, [r5, #12]
   1a0a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a0a6:	6928      	ldr	r0, [r5, #16]
   1a0a8:	6969      	ldr	r1, [r5, #20]
   1a0aa:	c403      	stmia	r4!, {r0, r1}
   1a0ac:	8b2b      	ldrh	r3, [r5, #24]
   1a0ae:	8023      	strh	r3, [r4, #0]
      break;
   1a0b0:	e044      	b.n	1a13c <AppDbSetKey+0xf0>

    case DM_KEY_PEER_LTK:
      ((appDbRec_t *) hdl)->peerLtkSecLevel = pKey->secLevel;
   1a0b2:	683b      	ldr	r3, [r7, #0]
   1a0b4:	7fda      	ldrb	r2, [r3, #31]
   1a0b6:	687b      	ldr	r3, [r7, #4]
   1a0b8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      ((appDbRec_t *) hdl)->peerLtk = pKey->keyData.ltk;
   1a0bc:	687a      	ldr	r2, [r7, #4]
   1a0be:	683b      	ldr	r3, [r7, #0]
   1a0c0:	f102 0450 	add.w	r4, r2, #80	; 0x50
   1a0c4:	1d1d      	adds	r5, r3, #4
   1a0c6:	6828      	ldr	r0, [r5, #0]
   1a0c8:	6869      	ldr	r1, [r5, #4]
   1a0ca:	68aa      	ldr	r2, [r5, #8]
   1a0cc:	68eb      	ldr	r3, [r5, #12]
   1a0ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a0d0:	6928      	ldr	r0, [r5, #16]
   1a0d2:	6969      	ldr	r1, [r5, #20]
   1a0d4:	c403      	stmia	r4!, {r0, r1}
   1a0d6:	8b2b      	ldrh	r3, [r5, #24]
   1a0d8:	8023      	strh	r3, [r4, #0]
      break;
   1a0da:	e02f      	b.n	1a13c <AppDbSetKey+0xf0>

    case DM_KEY_IRK:
      ((appDbRec_t *)hdl)->peerIrk = pKey->keyData.irk;
   1a0dc:	687b      	ldr	r3, [r7, #4]
   1a0de:	683a      	ldr	r2, [r7, #0]
   1a0e0:	3307      	adds	r3, #7
   1a0e2:	3204      	adds	r2, #4
   1a0e4:	6811      	ldr	r1, [r2, #0]
   1a0e6:	6855      	ldr	r5, [r2, #4]
   1a0e8:	6894      	ldr	r4, [r2, #8]
   1a0ea:	68d0      	ldr	r0, [r2, #12]
   1a0ec:	6019      	str	r1, [r3, #0]
   1a0ee:	605d      	str	r5, [r3, #4]
   1a0f0:	609c      	str	r4, [r3, #8]
   1a0f2:	60d8      	str	r0, [r3, #12]
   1a0f4:	6911      	ldr	r1, [r2, #16]
   1a0f6:	6119      	str	r1, [r3, #16]
   1a0f8:	8a91      	ldrh	r1, [r2, #20]
   1a0fa:	7d92      	ldrb	r2, [r2, #22]
   1a0fc:	8299      	strh	r1, [r3, #20]
   1a0fe:	759a      	strb	r2, [r3, #22]

      /* make sure peer record is stored using its identity address */
      ((appDbRec_t *)hdl)->addrType = pKey->keyData.irk.addrType;
   1a100:	683b      	ldr	r3, [r7, #0]
   1a102:	7e9a      	ldrb	r2, [r3, #26]
   1a104:	687b      	ldr	r3, [r7, #4]
   1a106:	719a      	strb	r2, [r3, #6]
      BdaCpy(((appDbRec_t *)hdl)->peerAddr, pKey->keyData.irk.bdAddr);
   1a108:	687a      	ldr	r2, [r7, #4]
   1a10a:	683b      	ldr	r3, [r7, #0]
   1a10c:	3314      	adds	r3, #20
   1a10e:	4619      	mov	r1, r3
   1a110:	4610      	mov	r0, r2
   1a112:	f7fe fb69 	bl	187e8 <BdaCpy>
      break;
   1a116:	e011      	b.n	1a13c <AppDbSetKey+0xf0>

    case DM_KEY_CSRK:
      ((appDbRec_t *)hdl)->peerCsrk = pKey->keyData.csrk;
   1a118:	687b      	ldr	r3, [r7, #4]
   1a11a:	683a      	ldr	r2, [r7, #0]
   1a11c:	331e      	adds	r3, #30
   1a11e:	3204      	adds	r2, #4
   1a120:	6814      	ldr	r4, [r2, #0]
   1a122:	6850      	ldr	r0, [r2, #4]
   1a124:	6891      	ldr	r1, [r2, #8]
   1a126:	68d2      	ldr	r2, [r2, #12]
   1a128:	601c      	str	r4, [r3, #0]
   1a12a:	6058      	str	r0, [r3, #4]
   1a12c:	6099      	str	r1, [r3, #8]
   1a12e:	60da      	str	r2, [r3, #12]

      /* sign counter must be initialized to zero when CSRK is generated */
      ((appDbRec_t *)hdl)->peerSignCounter = 0;
   1a130:	687b      	ldr	r3, [r7, #4]
   1a132:	2200      	movs	r2, #0
   1a134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
   1a138:	e000      	b.n	1a13c <AppDbSetKey+0xf0>
      
    default:
      break;
   1a13a:	bf00      	nop
  }
}
   1a13c:	bf00      	nop
   1a13e:	3708      	adds	r7, #8
   1a140:	46bd      	mov	sp, r7
   1a142:	bdb0      	pop	{r4, r5, r7, pc}

0001a144 <AppDbGetCccTbl>:
 *
 *  \return Pointer to client characteristic configuration descriptor table.
 */
/*************************************************************************************************/
uint16_t *AppDbGetCccTbl(appDbHdl_t hdl)
{
   1a144:	b480      	push	{r7}
   1a146:	b083      	sub	sp, #12
   1a148:	af00      	add	r7, sp, #0
   1a14a:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *) hdl)->cccTbl;
   1a14c:	687b      	ldr	r3, [r7, #4]
   1a14e:	336c      	adds	r3, #108	; 0x6c
}
   1a150:	4618      	mov	r0, r3
   1a152:	370c      	adds	r7, #12
   1a154:	46bd      	mov	sp, r7
   1a156:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a15a:	4770      	bx	lr

0001a15c <AppDbSetCccTblValue>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetCccTblValue(appDbHdl_t hdl, uint16_t idx, uint16_t value)
{
   1a15c:	b480      	push	{r7}
   1a15e:	b083      	sub	sp, #12
   1a160:	af00      	add	r7, sp, #0
   1a162:	6078      	str	r0, [r7, #4]
   1a164:	460b      	mov	r3, r1
   1a166:	807b      	strh	r3, [r7, #2]
   1a168:	4613      	mov	r3, r2
   1a16a:	803b      	strh	r3, [r7, #0]
  WSF_ASSERT(idx < APP_DB_NUM_CCCD);
  
  ((appDbRec_t *) hdl)->cccTbl[idx] = value;
   1a16c:	887b      	ldrh	r3, [r7, #2]
   1a16e:	687a      	ldr	r2, [r7, #4]
   1a170:	3334      	adds	r3, #52	; 0x34
   1a172:	005b      	lsls	r3, r3, #1
   1a174:	4413      	add	r3, r2
   1a176:	883a      	ldrh	r2, [r7, #0]
   1a178:	809a      	strh	r2, [r3, #4]
}
   1a17a:	bf00      	nop
   1a17c:	370c      	adds	r7, #12
   1a17e:	46bd      	mov	sp, r7
   1a180:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a184:	4770      	bx	lr

0001a186 <AppDbGetPeerSignCounter>:
 *
 *  \return Sign counter for peer device.
 */
/*************************************************************************************************/
uint32_t AppDbGetPeerSignCounter(appDbHdl_t hdl)
{
   1a186:	b480      	push	{r7}
   1a188:	b083      	sub	sp, #12
   1a18a:	af00      	add	r7, sp, #0
   1a18c:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerSignCounter;
   1a18e:	687b      	ldr	r3, [r7, #4]
   1a190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   1a194:	4618      	mov	r0, r3
   1a196:	370c      	adds	r7, #12
   1a198:	46bd      	mov	sp, r7
   1a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a19e:	4770      	bx	lr

0001a1a0 <AppDbSetPeerSignCounter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerSignCounter(appDbHdl_t hdl, uint32_t signCounter)
{
   1a1a0:	b480      	push	{r7}
   1a1a2:	b083      	sub	sp, #12
   1a1a4:	af00      	add	r7, sp, #0
   1a1a6:	6078      	str	r0, [r7, #4]
   1a1a8:	6039      	str	r1, [r7, #0]
  ((appDbRec_t *)hdl)->peerSignCounter = signCounter;
   1a1aa:	687b      	ldr	r3, [r7, #4]
   1a1ac:	683a      	ldr	r2, [r7, #0]
   1a1ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
   1a1b2:	bf00      	nop
   1a1b4:	370c      	adds	r7, #12
   1a1b6:	46bd      	mov	sp, r7
   1a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a1bc:	4770      	bx	lr

0001a1be <AppDbGetPeerAddedToRl>:
 *
 *  \return TRUE if peer device's been added to resolving list. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerAddedToRl(appDbHdl_t hdl)
{
   1a1be:	b480      	push	{r7}
   1a1c0:	b083      	sub	sp, #12
   1a1c2:	af00      	add	r7, sp, #0
   1a1c4:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerAddedToRl;
   1a1c6:	687b      	ldr	r3, [r7, #4]
   1a1c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
   1a1cc:	4618      	mov	r0, r3
   1a1ce:	370c      	adds	r7, #12
   1a1d0:	46bd      	mov	sp, r7
   1a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a1d6:	4770      	bx	lr

0001a1d8 <AppDbSetPeerAddedToRl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppDbSetPeerAddedToRl(appDbHdl_t hdl, bool_t peerAddedToRl)
{
   1a1d8:	b480      	push	{r7}
   1a1da:	b083      	sub	sp, #12
   1a1dc:	af00      	add	r7, sp, #0
   1a1de:	6078      	str	r0, [r7, #4]
   1a1e0:	460b      	mov	r3, r1
   1a1e2:	70fb      	strb	r3, [r7, #3]
  ((appDbRec_t *)hdl)->peerAddedToRl = peerAddedToRl;
   1a1e4:	687b      	ldr	r3, [r7, #4]
   1a1e6:	78fa      	ldrb	r2, [r7, #3]
   1a1e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
   1a1ec:	bf00      	nop
   1a1ee:	370c      	adds	r7, #12
   1a1f0:	46bd      	mov	sp, r7
   1a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a1f6:	4770      	bx	lr

0001a1f8 <AppDbGetPeerRpao>:
 *
 *  \return TRUE if RPA Only attribute is present on peer device. FALSE, otherwise.
 */
/*************************************************************************************************/
bool_t AppDbGetPeerRpao(appDbHdl_t hdl)
{
   1a1f8:	b480      	push	{r7}
   1a1fa:	b083      	sub	sp, #12
   1a1fc:	af00      	add	r7, sp, #0
   1a1fe:	6078      	str	r0, [r7, #4]
  return ((appDbRec_t *)hdl)->peerRpao;
   1a200:	687b      	ldr	r3, [r7, #4]
   1a202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
   1a206:	4618      	mov	r0, r3
   1a208:	370c      	adds	r7, #12
   1a20a:	46bd      	mov	sp, r7
   1a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a210:	4770      	bx	lr
	...

0001a214 <AppHwBattRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwBattRead(uint8_t *pLevel)
{
   1a214:	b480      	push	{r7}
   1a216:	b083      	sub	sp, #12
   1a218:	af00      	add	r7, sp, #0
   1a21a:	6078      	str	r0, [r7, #4]
 *pLevel = appHwBattLevel;
   1a21c:	4b04      	ldr	r3, [pc, #16]	; (1a230 <AppHwBattRead+0x1c>)
   1a21e:	781a      	ldrb	r2, [r3, #0]
   1a220:	687b      	ldr	r3, [r7, #4]
   1a222:	701a      	strb	r2, [r3, #0]
}
   1a224:	bf00      	nop
   1a226:	370c      	adds	r7, #12
   1a228:	46bd      	mov	sp, r7
   1a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a22e:	4770      	bx	lr
   1a230:	100023b0 	.word	0x100023b0

0001a234 <AppHwHrmRead>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmRead(appHrm_t *pHrm)
{
   1a234:	b480      	push	{r7}
   1a236:	b083      	sub	sp, #12
   1a238:	af00      	add	r7, sp, #0
   1a23a:	6078      	str	r0, [r7, #4]
  pHrm->heartRate = appHwHeartRate;
   1a23c:	4b11      	ldr	r3, [pc, #68]	; (1a284 <AppHwHrmRead+0x50>)
   1a23e:	781a      	ldrb	r2, [r3, #0]
   1a240:	687b      	ldr	r3, [r7, #4]
   1a242:	721a      	strb	r2, [r3, #8]

  /* calculate simulated RR intervals from heart rate */
  appHwRrInterval[0] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
   1a244:	4b0f      	ldr	r3, [pc, #60]	; (1a284 <AppHwHrmRead+0x50>)
   1a246:	781b      	ldrb	r3, [r3, #0]
   1a248:	461a      	mov	r2, r3
   1a24a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   1a24e:	fb93 f3f2 	sdiv	r3, r3, r2
   1a252:	b29a      	uxth	r2, r3
   1a254:	4b0c      	ldr	r3, [pc, #48]	; (1a288 <AppHwHrmRead+0x54>)
   1a256:	801a      	strh	r2, [r3, #0]
  appHwRrInterval[1] = APP_HR_MEAS_SIM_RR(appHwHeartRate);
   1a258:	4b0a      	ldr	r3, [pc, #40]	; (1a284 <AppHwHrmRead+0x50>)
   1a25a:	781b      	ldrb	r3, [r3, #0]
   1a25c:	461a      	mov	r2, r3
   1a25e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   1a262:	fb93 f3f2 	sdiv	r3, r3, r2
   1a266:	b29a      	uxth	r2, r3
   1a268:	4b07      	ldr	r3, [pc, #28]	; (1a288 <AppHwHrmRead+0x54>)
   1a26a:	805a      	strh	r2, [r3, #2]
  
  pHrm->pRrInterval = appHwRrInterval;
   1a26c:	687b      	ldr	r3, [r7, #4]
   1a26e:	4a06      	ldr	r2, [pc, #24]	; (1a288 <AppHwHrmRead+0x54>)
   1a270:	601a      	str	r2, [r3, #0]
  pHrm->numIntervals = 2;
   1a272:	687b      	ldr	r3, [r7, #4]
   1a274:	2202      	movs	r2, #2
   1a276:	711a      	strb	r2, [r3, #4]
}
   1a278:	bf00      	nop
   1a27a:	370c      	adds	r7, #12
   1a27c:	46bd      	mov	sp, r7
   1a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a282:	4770      	bx	lr
   1a284:	100023b1 	.word	0x100023b1
   1a288:	100045f4 	.word	0x100045f4

0001a28c <AppHwHrmTest>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHwHrmTest(uint8_t heartRate)
{
   1a28c:	b480      	push	{r7}
   1a28e:	b083      	sub	sp, #12
   1a290:	af00      	add	r7, sp, #0
   1a292:	4603      	mov	r3, r0
   1a294:	71fb      	strb	r3, [r7, #7]
  appHwHeartRate = heartRate;
   1a296:	4a04      	ldr	r2, [pc, #16]	; (1a2a8 <AppHwHrmTest+0x1c>)
   1a298:	79fb      	ldrb	r3, [r7, #7]
   1a29a:	7013      	strb	r3, [r2, #0]
}
   1a29c:	bf00      	nop
   1a29e:	370c      	adds	r7, #12
   1a2a0:	46bd      	mov	sp, r7
   1a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a2a6:	4770      	bx	lr
   1a2a8:	100023b1 	.word	0x100023b1

0001a2ac <AppUiAction>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiAction(uint8_t event)
{
   1a2ac:	b480      	push	{r7}
   1a2ae:	b083      	sub	sp, #12
   1a2b0:	af00      	add	r7, sp, #0
   1a2b2:	4603      	mov	r3, r0
   1a2b4:	71fb      	strb	r3, [r7, #7]
  switch (event)
   1a2b6:	79fb      	ldrb	r3, [r7, #7]
   1a2b8:	2b11      	cmp	r3, #17
   1a2ba:	d828      	bhi.n	1a30e <AppUiAction+0x62>
   1a2bc:	a201      	add	r2, pc, #4	; (adr r2, 1a2c4 <AppUiAction+0x18>)
   1a2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a2c2:	bf00      	nop
   1a2c4:	0001a30d 	.word	0x0001a30d
   1a2c8:	0001a30d 	.word	0x0001a30d
   1a2cc:	0001a30f 	.word	0x0001a30f
   1a2d0:	0001a30d 	.word	0x0001a30d
   1a2d4:	0001a30d 	.word	0x0001a30d
   1a2d8:	0001a30d 	.word	0x0001a30d
   1a2dc:	0001a30d 	.word	0x0001a30d
   1a2e0:	0001a30d 	.word	0x0001a30d
   1a2e4:	0001a30d 	.word	0x0001a30d
   1a2e8:	0001a30d 	.word	0x0001a30d
   1a2ec:	0001a30d 	.word	0x0001a30d
   1a2f0:	0001a30d 	.word	0x0001a30d
   1a2f4:	0001a30d 	.word	0x0001a30d
   1a2f8:	0001a30d 	.word	0x0001a30d
   1a2fc:	0001a30d 	.word	0x0001a30d
   1a300:	0001a30d 	.word	0x0001a30d
   1a304:	0001a30d 	.word	0x0001a30d
   1a308:	0001a30d 	.word	0x0001a30d
  {
    case APP_UI_NONE:
      /* no action */
      break;
   1a30c:	bf00      	nop

    case APP_UI_ALERT_HIGH:
      APP_TRACE_INFO0(">>> High alert <<<");
      break;
  }
}
   1a30e:	bf00      	nop
   1a310:	370c      	adds	r7, #12
   1a312:	46bd      	mov	sp, r7
   1a314:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a318:	4770      	bx	lr
   1a31a:	bf00      	nop

0001a31c <AppUiDisplayPasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiDisplayPasskey(uint32_t passkey)
{
   1a31c:	b480      	push	{r7}
   1a31e:	b083      	sub	sp, #12
   1a320:	af00      	add	r7, sp, #0
   1a322:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Passkey: %d <<<", passkey);
}
   1a324:	bf00      	nop
   1a326:	370c      	adds	r7, #12
   1a328:	46bd      	mov	sp, r7
   1a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a32e:	4770      	bx	lr

0001a330 <AppUiDisplayConfirmValue>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppUiDisplayConfirmValue(uint32_t confirm)
{
   1a330:	b480      	push	{r7}
   1a332:	b083      	sub	sp, #12
   1a334:	af00      	add	r7, sp, #0
   1a336:	6078      	str	r0, [r7, #4]
  APP_TRACE_INFO1(">>> Confirm Value: %d <<<", confirm);
}
   1a338:	bf00      	nop
   1a33a:	370c      	adds	r7, #12
   1a33c:	46bd      	mov	sp, r7
   1a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a342:	4770      	bx	lr

0001a344 <appUiTimerExpired>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiTimerExpired(wsfMsgHdr_t *pMsg)
{
   1a344:	b480      	push	{r7}
   1a346:	b083      	sub	sp, #12
   1a348:	af00      	add	r7, sp, #0
   1a34a:	6078      	str	r0, [r7, #4]

}
   1a34c:	bf00      	nop
   1a34e:	370c      	adds	r7, #12
   1a350:	46bd      	mov	sp, r7
   1a352:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a356:	4770      	bx	lr

0001a358 <appUiBtnPoll>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appUiBtnPoll(void)
{
   1a358:	b480      	push	{r7}
   1a35a:	af00      	add	r7, sp, #0

}
   1a35c:	bf00      	nop
   1a35e:	46bd      	mov	sp, r7
   1a360:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a364:	4770      	bx	lr
	...

0001a368 <AppUiBtnRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnRegister(appUiBtnCback_t cback)
{
   1a368:	b480      	push	{r7}
   1a36a:	b083      	sub	sp, #12
   1a36c:	af00      	add	r7, sp, #0
   1a36e:	6078      	str	r0, [r7, #4]
  appUiBtn.cback = cback;
   1a370:	4a04      	ldr	r2, [pc, #16]	; (1a384 <AppUiBtnRegister+0x1c>)
   1a372:	687b      	ldr	r3, [r7, #4]
   1a374:	6013      	str	r3, [r2, #0]
}
   1a376:	bf00      	nop
   1a378:	370c      	adds	r7, #12
   1a37a:	46bd      	mov	sp, r7
   1a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a380:	4770      	bx	lr
   1a382:	bf00      	nop
   1a384:	100045f8 	.word	0x100045f8

0001a388 <AppUiBtnPressed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUiBtnPressed(void)
{
   1a388:	b480      	push	{r7}
   1a38a:	af00      	add	r7, sp, #0

}
   1a38c:	bf00      	nop
   1a38e:	46bd      	mov	sp, r7
   1a390:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a394:	4770      	bx	lr
	...

0001a398 <WsfCsEnter>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsEnter(void)
{
   1a398:	b480      	push	{r7}
   1a39a:	af00      	add	r7, sp, #0
  if (csNesting == 0)
   1a39c:	4b07      	ldr	r3, [pc, #28]	; (1a3bc <WsfCsEnter+0x24>)
   1a39e:	781b      	ldrb	r3, [r3, #0]
   1a3a0:	2b00      	cmp	r3, #0
   1a3a2:	d100      	bne.n	1a3a6 <WsfCsEnter+0xe>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __disable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsid i");
   1a3a4:	b672      	cpsid	i
#ifdef __CC_ARM
  __disable_irq();
#endif

  }
  csNesting++;
   1a3a6:	4b05      	ldr	r3, [pc, #20]	; (1a3bc <WsfCsEnter+0x24>)
   1a3a8:	781b      	ldrb	r3, [r3, #0]
   1a3aa:	3301      	adds	r3, #1
   1a3ac:	b2da      	uxtb	r2, r3
   1a3ae:	4b03      	ldr	r3, [pc, #12]	; (1a3bc <WsfCsEnter+0x24>)
   1a3b0:	701a      	strb	r2, [r3, #0]
}
   1a3b2:	bf00      	nop
   1a3b4:	46bd      	mov	sp, r7
   1a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a3ba:	4770      	bx	lr
   1a3bc:	100045fc 	.word	0x100045fc

0001a3c0 <WsfCsExit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfCsExit(void)
{
   1a3c0:	b480      	push	{r7}
   1a3c2:	af00      	add	r7, sp, #0
  WSF_ASSERT(csNesting != 0);

  csNesting--;
   1a3c4:	4b07      	ldr	r3, [pc, #28]	; (1a3e4 <WsfCsExit+0x24>)
   1a3c6:	781b      	ldrb	r3, [r3, #0]
   1a3c8:	3b01      	subs	r3, #1
   1a3ca:	b2da      	uxtb	r2, r3
   1a3cc:	4b05      	ldr	r3, [pc, #20]	; (1a3e4 <WsfCsExit+0x24>)
   1a3ce:	701a      	strb	r2, [r3, #0]
  if (csNesting == 0)
   1a3d0:	4b04      	ldr	r3, [pc, #16]	; (1a3e4 <WsfCsExit+0x24>)
   1a3d2:	781b      	ldrb	r3, [r3, #0]
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	d100      	bne.n	1a3da <WsfCsExit+0x1a>
  {
#ifdef __IAR_SYSTEMS_ICC__
    __enable_interrupt();
#endif
#ifdef __GNUC__
    __asm volatile ("cpsie i");
   1a3d8:	b662      	cpsie	i
#ifdef __CC_ARM
      __enable_irq();
#endif

  }
}
   1a3da:	bf00      	nop
   1a3dc:	46bd      	mov	sp, r7
   1a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a3e2:	4770      	bx	lr
   1a3e4:	100045fc 	.word	0x100045fc

0001a3e8 <WsfTaskLock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskLock(void)
{
   1a3e8:	b580      	push	{r7, lr}
   1a3ea:	af00      	add	r7, sp, #0
  WsfCsEnter();
   1a3ec:	f7ff ffd4 	bl	1a398 <WsfCsEnter>
}
   1a3f0:	bf00      	nop
   1a3f2:	bd80      	pop	{r7, pc}

0001a3f4 <WsfTaskUnlock>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskUnlock(void)
{
   1a3f4:	b580      	push	{r7, lr}
   1a3f6:	af00      	add	r7, sp, #0
  WsfCsExit();
   1a3f8:	f7ff ffe2 	bl	1a3c0 <WsfCsExit>
}
   1a3fc:	bf00      	nop
   1a3fe:	bd80      	pop	{r7, pc}

0001a400 <WsfSetOsSpecificEvent>:

void WsfSetOsSpecificEvent(void)
{
   1a400:	b580      	push	{r7, lr}
   1a402:	b084      	sub	sp, #16
   1a404:	af00      	add	r7, sp, #0
#ifdef AM_FREERTOS
  if(xRadioTaskEventObject != NULL) 
   1a406:	4b21      	ldr	r3, [pc, #132]	; (1a48c <WsfSetOsSpecificEvent+0x8c>)
   1a408:	681b      	ldr	r3, [r3, #0]
   1a40a:	2b00      	cmp	r3, #0
   1a40c:	d039      	beq.n	1a482 <WsfSetOsSpecificEvent+0x82>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
   1a40e:	f3ef 8305 	mrs	r3, IPSR
   1a412:	60bb      	str	r3, [r7, #8]
	if( ulCurrentInterrupt == 0 )
   1a414:	68bb      	ldr	r3, [r7, #8]
   1a416:	2b00      	cmp	r3, #0
   1a418:	d102      	bne.n	1a420 <WsfSetOsSpecificEvent+0x20>
		xReturn = pdFALSE;
   1a41a:	2300      	movs	r3, #0
   1a41c:	607b      	str	r3, [r7, #4]
   1a41e:	e001      	b.n	1a424 <WsfSetOsSpecificEvent+0x24>
		xReturn = pdTRUE;
   1a420:	2301      	movs	r3, #1
   1a422:	607b      	str	r3, [r7, #4]
	return xReturn;
   1a424:	687b      	ldr	r3, [r7, #4]
  {

      BaseType_t xHigherPriorityTaskWoken, xResult;

      if(xPortIsInsideInterrupt() == pdTRUE) {
   1a426:	2b01      	cmp	r3, #1
   1a428:	d118      	bne.n	1a45c <WsfSetOsSpecificEvent+0x5c>

          //
          // Send an event to the main radio task
          //
          xHigherPriorityTaskWoken = pdFALSE;
   1a42a:	2300      	movs	r3, #0
   1a42c:	603b      	str	r3, [r7, #0]

          xResult = xEventGroupSetBitsFromISR(xRadioTaskEventObject, 1,
   1a42e:	4b17      	ldr	r3, [pc, #92]	; (1a48c <WsfSetOsSpecificEvent+0x8c>)
   1a430:	6819      	ldr	r1, [r3, #0]
   1a432:	463b      	mov	r3, r7
   1a434:	2201      	movs	r2, #1
   1a436:	4816      	ldr	r0, [pc, #88]	; (1a490 <WsfSetOsSpecificEvent+0x90>)
   1a438:	f002 fa68 	bl	1c90c <xTimerPendFunctionCallFromISR>
   1a43c:	60f8      	str	r0, [r7, #12]

          //
          // If the radio task is higher-priority than the context we're currently
          // running from, we should yield now and run the radio task.
          //
          if ( xResult != pdFAIL )
   1a43e:	68fb      	ldr	r3, [r7, #12]
   1a440:	2b00      	cmp	r3, #0
   1a442:	d01e      	beq.n	1a482 <WsfSetOsSpecificEvent+0x82>
          {
              portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1a444:	683b      	ldr	r3, [r7, #0]
   1a446:	2b00      	cmp	r3, #0
   1a448:	d01b      	beq.n	1a482 <WsfSetOsSpecificEvent+0x82>
   1a44a:	4b12      	ldr	r3, [pc, #72]	; (1a494 <WsfSetOsSpecificEvent+0x94>)
   1a44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a450:	601a      	str	r2, [r3, #0]
   1a452:	f3bf 8f4f 	dsb	sy
   1a456:	f3bf 8f6f 	isb	sy
          }
      }

  }    
#endif
}
   1a45a:	e012      	b.n	1a482 <WsfSetOsSpecificEvent+0x82>
          xResult = xEventGroupSetBits(xRadioTaskEventObject, 1);
   1a45c:	4b0b      	ldr	r3, [pc, #44]	; (1a48c <WsfSetOsSpecificEvent+0x8c>)
   1a45e:	681b      	ldr	r3, [r3, #0]
   1a460:	2101      	movs	r1, #1
   1a462:	4618      	mov	r0, r3
   1a464:	f000 fb58 	bl	1ab18 <xEventGroupSetBits>
   1a468:	4603      	mov	r3, r0
   1a46a:	60fb      	str	r3, [r7, #12]
          if ( xResult != pdFAIL )
   1a46c:	68fb      	ldr	r3, [r7, #12]
   1a46e:	2b00      	cmp	r3, #0
   1a470:	d007      	beq.n	1a482 <WsfSetOsSpecificEvent+0x82>
              portYIELD();
   1a472:	4b08      	ldr	r3, [pc, #32]	; (1a494 <WsfSetOsSpecificEvent+0x94>)
   1a474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a478:	601a      	str	r2, [r3, #0]
   1a47a:	f3bf 8f4f 	dsb	sy
   1a47e:	f3bf 8f6f 	isb	sy
}
   1a482:	bf00      	nop
   1a484:	3710      	adds	r7, #16
   1a486:	46bd      	mov	sp, r7
   1a488:	bd80      	pop	{r7, pc}
   1a48a:	bf00      	nop
   1a48c:	10004600 	.word	0x10004600
   1a490:	0001ac07 	.word	0x0001ac07
   1a494:	e000ed04 	.word	0xe000ed04

0001a498 <WsfSetEvent>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfSetEvent(wsfHandlerId_t handlerId, wsfEventMask_t event)
{
   1a498:	b580      	push	{r7, lr}
   1a49a:	b082      	sub	sp, #8
   1a49c:	af00      	add	r7, sp, #0
   1a49e:	4603      	mov	r3, r0
   1a4a0:	460a      	mov	r2, r1
   1a4a2:	71fb      	strb	r3, [r7, #7]
   1a4a4:	4613      	mov	r3, r2
   1a4a6:	71bb      	strb	r3, [r7, #6]

  WSF_ASSERT(WSF_HANDLER_FROM_ID(handlerId) < WSF_MAX_HANDLERS);

  WSF_TRACE_INFO2("WsfSetEvent handlerId:%u event:%u", handlerId, event);

  WSF_CS_ENTER(cs);
   1a4a8:	f7ff ff76 	bl	1a398 <WsfCsEnter>
  wsfOs.task.handlerEventMask[WSF_HANDLER_FROM_ID(handlerId)] |= event;
   1a4ac:	79fb      	ldrb	r3, [r7, #7]
   1a4ae:	f003 030f 	and.w	r3, r3, #15
   1a4b2:	79fa      	ldrb	r2, [r7, #7]
   1a4b4:	f002 020f 	and.w	r2, r2, #15
   1a4b8:	490e      	ldr	r1, [pc, #56]	; (1a4f4 <WsfSetEvent+0x5c>)
   1a4ba:	440a      	add	r2, r1
   1a4bc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1a4c0:	79ba      	ldrb	r2, [r7, #6]
   1a4c2:	430a      	orrs	r2, r1
   1a4c4:	b2d1      	uxtb	r1, r2
   1a4c6:	4a0b      	ldr	r2, [pc, #44]	; (1a4f4 <WsfSetEvent+0x5c>)
   1a4c8:	4413      	add	r3, r2
   1a4ca:	460a      	mov	r2, r1
   1a4cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  wsfOs.task.taskEventMask |= WSF_HANDLER_EVENT;
   1a4d0:	4b08      	ldr	r3, [pc, #32]	; (1a4f4 <WsfSetEvent+0x5c>)
   1a4d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1a4d6:	f043 0304 	orr.w	r3, r3, #4
   1a4da:	b2da      	uxtb	r2, r3
   1a4dc:	4b05      	ldr	r3, [pc, #20]	; (1a4f4 <WsfSetEvent+0x5c>)
   1a4de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1a4e2:	f7ff ff6d 	bl	1a3c0 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1a4e6:	f7ff ff8b 	bl	1a400 <WsfSetOsSpecificEvent>
}
   1a4ea:	bf00      	nop
   1a4ec:	3708      	adds	r7, #8
   1a4ee:	46bd      	mov	sp, r7
   1a4f0:	bd80      	pop	{r7, pc}
   1a4f2:	bf00      	nop
   1a4f4:	10006f00 	.word	0x10006f00

0001a4f8 <WsfTaskSetReady>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void WsfTaskSetReady(wsfHandlerId_t handlerId, wsfTaskEvent_t event)
{
   1a4f8:	b580      	push	{r7, lr}
   1a4fa:	b082      	sub	sp, #8
   1a4fc:	af00      	add	r7, sp, #0
   1a4fe:	4603      	mov	r3, r0
   1a500:	460a      	mov	r2, r1
   1a502:	71fb      	strb	r3, [r7, #7]
   1a504:	4613      	mov	r3, r2
   1a506:	71bb      	strb	r3, [r7, #6]
  WSF_CS_INIT(cs);

  WSF_CS_ENTER(cs);
   1a508:	f7ff ff46 	bl	1a398 <WsfCsEnter>
  wsfOs.task.taskEventMask |= event;
   1a50c:	4b08      	ldr	r3, [pc, #32]	; (1a530 <WsfTaskSetReady+0x38>)
   1a50e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1a512:	79bb      	ldrb	r3, [r7, #6]
   1a514:	4313      	orrs	r3, r2
   1a516:	b2da      	uxtb	r2, r3
   1a518:	4b05      	ldr	r3, [pc, #20]	; (1a530 <WsfTaskSetReady+0x38>)
   1a51a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  WSF_CS_EXIT(cs);
   1a51e:	f7ff ff4f 	bl	1a3c0 <WsfCsExit>

  /* set event in OS */

  WsfSetOsSpecificEvent();
   1a522:	f7ff ff6d 	bl	1a400 <WsfSetOsSpecificEvent>
}
   1a526:	bf00      	nop
   1a528:	3708      	adds	r7, #8
   1a52a:	46bd      	mov	sp, r7
   1a52c:	bd80      	pop	{r7, pc}
   1a52e:	bf00      	nop
   1a530:	10006f00 	.word	0x10006f00

0001a534 <WsfTaskMsgQueue>:
 *
 *  \return Task message queue.
 */
/*************************************************************************************************/
wsfQueue_t *WsfTaskMsgQueue(wsfHandlerId_t handlerId)
{
   1a534:	b480      	push	{r7}
   1a536:	b083      	sub	sp, #12
   1a538:	af00      	add	r7, sp, #0
   1a53a:	4603      	mov	r3, r0
   1a53c:	71fb      	strb	r3, [r7, #7]
  return &(wsfOs.task.msgQueue);
   1a53e:	4b03      	ldr	r3, [pc, #12]	; (1a54c <WsfTaskMsgQueue+0x18>)
}
   1a540:	4618      	mov	r0, r3
   1a542:	370c      	adds	r7, #12
   1a544:	46bd      	mov	sp, r7
   1a546:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a54a:	4770      	bx	lr
   1a54c:	10006f30 	.word	0x10006f30

0001a550 <WsfOsSetNextHandler>:
 *
 *  \return WSF handler ID for this handler.
 */
/*************************************************************************************************/
wsfHandlerId_t WsfOsSetNextHandler(wsfEventHandler_t handler)
{
   1a550:	b480      	push	{r7}
   1a552:	b085      	sub	sp, #20
   1a554:	af00      	add	r7, sp, #0
   1a556:	6078      	str	r0, [r7, #4]
  wsfHandlerId_t handlerId = wsfOs.task.numHandler++;
   1a558:	4b0a      	ldr	r3, [pc, #40]	; (1a584 <WsfOsSetNextHandler+0x34>)
   1a55a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   1a55e:	1c5a      	adds	r2, r3, #1
   1a560:	b2d1      	uxtb	r1, r2
   1a562:	4a08      	ldr	r2, [pc, #32]	; (1a584 <WsfOsSetNextHandler+0x34>)
   1a564:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
   1a568:	73fb      	strb	r3, [r7, #15]

  WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);

  wsfOs.task.handler[handlerId] = handler;
   1a56a:	7bfb      	ldrb	r3, [r7, #15]
   1a56c:	4905      	ldr	r1, [pc, #20]	; (1a584 <WsfOsSetNextHandler+0x34>)
   1a56e:	687a      	ldr	r2, [r7, #4]
   1a570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return handlerId;
   1a574:	7bfb      	ldrb	r3, [r7, #15]
}
   1a576:	4618      	mov	r0, r3
   1a578:	3714      	adds	r7, #20
   1a57a:	46bd      	mov	sp, r7
   1a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a580:	4770      	bx	lr
   1a582:	bf00      	nop
   1a584:	10006f00 	.word	0x10006f00

0001a588 <wsfOsReadyToSleep>:
 *
 *  \return Return TRUE if there are no pending WSF task events set, FALSE otherwise.
 */
/*************************************************************************************************/
bool_t wsfOsReadyToSleep(void)
{
   1a588:	b480      	push	{r7}
   1a58a:	af00      	add	r7, sp, #0
  return (wsfOs.task.taskEventMask == 0);
   1a58c:	4b06      	ldr	r3, [pc, #24]	; (1a5a8 <wsfOsReadyToSleep+0x20>)
   1a58e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1a592:	2b00      	cmp	r3, #0
   1a594:	bf0c      	ite	eq
   1a596:	2301      	moveq	r3, #1
   1a598:	2300      	movne	r3, #0
   1a59a:	b2db      	uxtb	r3, r3
}
   1a59c:	4618      	mov	r0, r3
   1a59e:	46bd      	mov	sp, r7
   1a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a5a4:	4770      	bx	lr
   1a5a6:	bf00      	nop
   1a5a8:	10006f00 	.word	0x10006f00

0001a5ac <wsfOsDispatcher>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void wsfOsDispatcher(void)
{
   1a5ac:	b580      	push	{r7, lr}
   1a5ae:	b086      	sub	sp, #24
   1a5b0:	af00      	add	r7, sp, #0
  wsfHandlerId_t    handlerId;
  uint8_t           i;

  WSF_CS_INIT(cs);

  pTask = &wsfOs.task;
   1a5b2:	4b3f      	ldr	r3, [pc, #252]	; (1a6b0 <wsfOsDispatcher+0x104>)
   1a5b4:	613b      	str	r3, [r7, #16]

  while (pTask->taskEventMask)
   1a5b6:	e072      	b.n	1a69e <wsfOsDispatcher+0xf2>
  {
    /* get and then clear task event mask */
    WSF_CS_ENTER(cs);
   1a5b8:	f7ff feee 	bl	1a398 <WsfCsEnter>
    taskEventMask = pTask->taskEventMask;
   1a5bc:	693b      	ldr	r3, [r7, #16]
   1a5be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1a5c2:	73fb      	strb	r3, [r7, #15]
    pTask->taskEventMask = 0;
   1a5c4:	693b      	ldr	r3, [r7, #16]
   1a5c6:	2200      	movs	r2, #0
   1a5c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    WSF_CS_EXIT(cs);
   1a5cc:	f7ff fef8 	bl	1a3c0 <WsfCsExit>

    if (taskEventMask & WSF_MSG_QUEUE_EVENT)
   1a5d0:	7bfb      	ldrb	r3, [r7, #15]
   1a5d2:	f003 0301 	and.w	r3, r3, #1
   1a5d6:	2b00      	cmp	r3, #0
   1a5d8:	d016      	beq.n	1a608 <wsfOsDispatcher+0x5c>
    {
      /* handle msg queue */
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1a5da:	e00a      	b.n	1a5f2 <wsfOsDispatcher+0x46>
      {
        WSF_ASSERT(handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[handlerId])(0, pMsg);
   1a5dc:	78bb      	ldrb	r3, [r7, #2]
   1a5de:	461a      	mov	r2, r3
   1a5e0:	693b      	ldr	r3, [r7, #16]
   1a5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a5e6:	68b9      	ldr	r1, [r7, #8]
   1a5e8:	2000      	movs	r0, #0
   1a5ea:	4798      	blx	r3
        WsfMsgFree(pMsg);
   1a5ec:	68b8      	ldr	r0, [r7, #8]
   1a5ee:	f7fd fa4f 	bl	17a90 <WsfMsgFree>
      while ((pMsg = WsfMsgDeq(&pTask->msgQueue, &handlerId)) != NULL)
   1a5f2:	693b      	ldr	r3, [r7, #16]
   1a5f4:	3330      	adds	r3, #48	; 0x30
   1a5f6:	1cba      	adds	r2, r7, #2
   1a5f8:	4611      	mov	r1, r2
   1a5fa:	4618      	mov	r0, r3
   1a5fc:	f7fd fa82 	bl	17b04 <WsfMsgDeq>
   1a600:	60b8      	str	r0, [r7, #8]
   1a602:	68bb      	ldr	r3, [r7, #8]
   1a604:	2b00      	cmp	r3, #0
   1a606:	d1e9      	bne.n	1a5dc <wsfOsDispatcher+0x30>
      }
    }

    if (taskEventMask & WSF_TIMER_EVENT)
   1a608:	7bfb      	ldrb	r3, [r7, #15]
   1a60a:	f003 0302 	and.w	r3, r3, #2
   1a60e:	2b00      	cmp	r3, #0
   1a610:	d012      	beq.n	1a638 <wsfOsDispatcher+0x8c>
    {
      /* service timers */
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1a612:	e00a      	b.n	1a62a <wsfOsDispatcher+0x7e>
      {
        WSF_ASSERT(pTimer->handlerId < WSF_MAX_HANDLERS);
        (*pTask->handler[pTimer->handlerId])(0, &pTimer->msg);
   1a614:	687b      	ldr	r3, [r7, #4]
   1a616:	7a1b      	ldrb	r3, [r3, #8]
   1a618:	461a      	mov	r2, r3
   1a61a:	693b      	ldr	r3, [r7, #16]
   1a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a620:	687a      	ldr	r2, [r7, #4]
   1a622:	320a      	adds	r2, #10
   1a624:	4611      	mov	r1, r2
   1a626:	2000      	movs	r0, #0
   1a628:	4798      	blx	r3
      while ((pTimer = WsfTimerServiceExpired(0)) != NULL)
   1a62a:	2000      	movs	r0, #0
   1a62c:	f7fd fc56 	bl	17edc <WsfTimerServiceExpired>
   1a630:	6078      	str	r0, [r7, #4]
   1a632:	687b      	ldr	r3, [r7, #4]
   1a634:	2b00      	cmp	r3, #0
   1a636:	d1ed      	bne.n	1a614 <wsfOsDispatcher+0x68>
      }
    }

    if (taskEventMask & WSF_HANDLER_EVENT)
   1a638:	7bfb      	ldrb	r3, [r7, #15]
   1a63a:	f003 0304 	and.w	r3, r3, #4
   1a63e:	2b00      	cmp	r3, #0
   1a640:	d02d      	beq.n	1a69e <wsfOsDispatcher+0xf2>
    {
      /* service handlers */
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1a642:	2300      	movs	r3, #0
   1a644:	75fb      	strb	r3, [r7, #23]
   1a646:	e027      	b.n	1a698 <wsfOsDispatcher+0xec>
      {
        if ((pTask->handlerEventMask[i] != 0) && (pTask->handler[i] != NULL))
   1a648:	7dfb      	ldrb	r3, [r7, #23]
   1a64a:	693a      	ldr	r2, [r7, #16]
   1a64c:	4413      	add	r3, r2
   1a64e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a652:	2b00      	cmp	r3, #0
   1a654:	d01d      	beq.n	1a692 <wsfOsDispatcher+0xe6>
   1a656:	7dfa      	ldrb	r2, [r7, #23]
   1a658:	693b      	ldr	r3, [r7, #16]
   1a65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a65e:	2b00      	cmp	r3, #0
   1a660:	d017      	beq.n	1a692 <wsfOsDispatcher+0xe6>
        {
          WSF_CS_ENTER(cs);
   1a662:	f7ff fe99 	bl	1a398 <WsfCsEnter>
          eventMask = pTask->handlerEventMask[i];
   1a666:	7dfb      	ldrb	r3, [r7, #23]
   1a668:	693a      	ldr	r2, [r7, #16]
   1a66a:	4413      	add	r3, r2
   1a66c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a670:	70fb      	strb	r3, [r7, #3]
          pTask->handlerEventMask[i] = 0;
   1a672:	7dfb      	ldrb	r3, [r7, #23]
   1a674:	693a      	ldr	r2, [r7, #16]
   1a676:	4413      	add	r3, r2
   1a678:	2200      	movs	r2, #0
   1a67a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          WSF_CS_EXIT(cs);
   1a67e:	f7ff fe9f 	bl	1a3c0 <WsfCsExit>

          (*pTask->handler[i])(eventMask, NULL);
   1a682:	7dfa      	ldrb	r2, [r7, #23]
   1a684:	693b      	ldr	r3, [r7, #16]
   1a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a68a:	78fa      	ldrb	r2, [r7, #3]
   1a68c:	2100      	movs	r1, #0
   1a68e:	4610      	mov	r0, r2
   1a690:	4798      	blx	r3
      for (i = 0; i < WSF_MAX_HANDLERS; i++)
   1a692:	7dfb      	ldrb	r3, [r7, #23]
   1a694:	3301      	adds	r3, #1
   1a696:	75fb      	strb	r3, [r7, #23]
   1a698:	7dfb      	ldrb	r3, [r7, #23]
   1a69a:	2b08      	cmp	r3, #8
   1a69c:	d9d4      	bls.n	1a648 <wsfOsDispatcher+0x9c>
  while (pTask->taskEventMask)
   1a69e:	693b      	ldr	r3, [r7, #16]
   1a6a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1a6a4:	2b00      	cmp	r3, #0
   1a6a6:	d187      	bne.n	1a5b8 <wsfOsDispatcher+0xc>
        }
      }
    }
  }
}
   1a6a8:	bf00      	nop
   1a6aa:	3718      	adds	r7, #24
   1a6ac:	46bd      	mov	sp, r7
   1a6ae:	bd80      	pop	{r7, pc}
   1a6b0:	10006f00 	.word	0x10006f00

0001a6b4 <wsfOsSetEventObject>:


void wsfOsSetEventObject(void *event_object)
{
   1a6b4:	b480      	push	{r7}
   1a6b6:	b083      	sub	sp, #12
   1a6b8:	af00      	add	r7, sp, #0
   1a6ba:	6078      	str	r0, [r7, #4]
  #ifdef AM_FREERTOS
  xRadioTaskEventObject = (EventGroupHandle_t)event_object;
   1a6bc:	4a04      	ldr	r2, [pc, #16]	; (1a6d0 <wsfOsSetEventObject+0x1c>)
   1a6be:	687b      	ldr	r3, [r7, #4]
   1a6c0:	6013      	str	r3, [r2, #0]
  #endif
}
   1a6c2:	bf00      	nop
   1a6c4:	370c      	adds	r7, #12
   1a6c6:	46bd      	mov	sp, r7
   1a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a6cc:	4770      	bx	lr
   1a6ce:	bf00      	nop
   1a6d0:	10004600 	.word	0x10004600

0001a6d4 <SvcBattAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattAddGroup(void)
{
   1a6d4:	b580      	push	{r7, lr}
   1a6d6:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcBattGroup);
   1a6d8:	4802      	ldr	r0, [pc, #8]	; (1a6e4 <SvcBattAddGroup+0x10>)
   1a6da:	f7f3 f8b3 	bl	d844 <AttsAddGroup>
}
   1a6de:	bf00      	nop
   1a6e0:	bd80      	pop	{r7, pc}
   1a6e2:	bf00      	nop
   1a6e4:	100023b4 	.word	0x100023b4

0001a6e8 <SvcBattCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcBattCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1a6e8:	b480      	push	{r7}
   1a6ea:	b083      	sub	sp, #12
   1a6ec:	af00      	add	r7, sp, #0
   1a6ee:	6078      	str	r0, [r7, #4]
   1a6f0:	6039      	str	r1, [r7, #0]
  svcBattGroup.readCback = readCback;
   1a6f2:	4a06      	ldr	r2, [pc, #24]	; (1a70c <SvcBattCbackRegister+0x24>)
   1a6f4:	687b      	ldr	r3, [r7, #4]
   1a6f6:	6093      	str	r3, [r2, #8]
  svcBattGroup.writeCback = writeCback;
   1a6f8:	4a04      	ldr	r2, [pc, #16]	; (1a70c <SvcBattCbackRegister+0x24>)
   1a6fa:	683b      	ldr	r3, [r7, #0]
   1a6fc:	60d3      	str	r3, [r2, #12]
}
   1a6fe:	bf00      	nop
   1a700:	370c      	adds	r7, #12
   1a702:	46bd      	mov	sp, r7
   1a704:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a708:	4770      	bx	lr
   1a70a:	bf00      	nop
   1a70c:	100023b4 	.word	0x100023b4

0001a710 <SvcCoreAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreAddGroup(void)
{
   1a710:	b580      	push	{r7, lr}
   1a712:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcGapGroup);
   1a714:	4803      	ldr	r0, [pc, #12]	; (1a724 <SvcCoreAddGroup+0x14>)
   1a716:	f7f3 f895 	bl	d844 <AttsAddGroup>
  AttsAddGroup(&svcGattGroup);
   1a71a:	4803      	ldr	r0, [pc, #12]	; (1a728 <SvcCoreAddGroup+0x18>)
   1a71c:	f7f3 f892 	bl	d844 <AttsAddGroup>
}
   1a720:	bf00      	nop
   1a722:	bd80      	pop	{r7, pc}
   1a724:	100023c8 	.word	0x100023c8
   1a728:	100023dc 	.word	0x100023dc

0001a72c <SvcCoreGapCentAddrResUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcCoreGapCentAddrResUpdate(bool_t value)
{
   1a72c:	b480      	push	{r7}
   1a72e:	b083      	sub	sp, #12
   1a730:	af00      	add	r7, sp, #0
   1a732:	4603      	mov	r3, r0
   1a734:	71fb      	strb	r3, [r7, #7]
  gapValCar[0] = value;
   1a736:	4a04      	ldr	r2, [pc, #16]	; (1a748 <SvcCoreGapCentAddrResUpdate+0x1c>)
   1a738:	79fb      	ldrb	r3, [r7, #7]
   1a73a:	7013      	strb	r3, [r2, #0]
}
   1a73c:	bf00      	nop
   1a73e:	370c      	adds	r7, #12
   1a740:	46bd      	mov	sp, r7
   1a742:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a746:	4770      	bx	lr
   1a748:	10004610 	.word	0x10004610

0001a74c <SvcDisAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcDisAddGroup(void)
{
   1a74c:	b580      	push	{r7, lr}
   1a74e:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcDisGroup);
   1a750:	4802      	ldr	r0, [pc, #8]	; (1a75c <SvcDisAddGroup+0x10>)
   1a752:	f7f3 f877 	bl	d844 <AttsAddGroup>
}
   1a756:	bf00      	nop
   1a758:	bd80      	pop	{r7, pc}
   1a75a:	bf00      	nop
   1a75c:	1000247c 	.word	0x1000247c

0001a760 <SvcHrsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsAddGroup(void)
{
   1a760:	b580      	push	{r7, lr}
   1a762:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcHrsGroup);
   1a764:	4802      	ldr	r0, [pc, #8]	; (1a770 <SvcHrsAddGroup+0x10>)
   1a766:	f7f3 f86d 	bl	d844 <AttsAddGroup>
}
   1a76a:	bf00      	nop
   1a76c:	bd80      	pop	{r7, pc}
   1a76e:	bf00      	nop
   1a770:	10002494 	.word	0x10002494

0001a774 <SvcHrsCbackRegister>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcHrsCbackRegister(attsReadCback_t readCback, attsWriteCback_t writeCback)
{
   1a774:	b480      	push	{r7}
   1a776:	b083      	sub	sp, #12
   1a778:	af00      	add	r7, sp, #0
   1a77a:	6078      	str	r0, [r7, #4]
   1a77c:	6039      	str	r1, [r7, #0]
  svcHrsGroup.readCback = readCback;
   1a77e:	4a06      	ldr	r2, [pc, #24]	; (1a798 <SvcHrsCbackRegister+0x24>)
   1a780:	687b      	ldr	r3, [r7, #4]
   1a782:	6093      	str	r3, [r2, #8]
  svcHrsGroup.writeCback = writeCback;
   1a784:	4a04      	ldr	r2, [pc, #16]	; (1a798 <SvcHrsCbackRegister+0x24>)
   1a786:	683b      	ldr	r3, [r7, #0]
   1a788:	60d3      	str	r3, [r2, #12]
}
   1a78a:	bf00      	nop
   1a78c:	370c      	adds	r7, #12
   1a78e:	46bd      	mov	sp, r7
   1a790:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a794:	4770      	bx	lr
   1a796:	bf00      	nop
   1a798:	10002494 	.word	0x10002494

0001a79c <SvcRscsAddGroup>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void SvcRscsAddGroup(void)
{
   1a79c:	b580      	push	{r7, lr}
   1a79e:	af00      	add	r7, sp, #0
  AttsAddGroup(&svcRscsGroup);
   1a7a0:	4802      	ldr	r0, [pc, #8]	; (1a7ac <SvcRscsAddGroup+0x10>)
   1a7a2:	f7f3 f84f 	bl	d844 <AttsAddGroup>
}
   1a7a6:	bf00      	nop
   1a7a8:	bd80      	pop	{r7, pc}
   1a7aa:	bf00      	nop
   1a7ac:	100024ac 	.word	0x100024ac

0001a7b0 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a7b0:	b580      	push	{r7, lr}
   1a7b2:	b088      	sub	sp, #32
   1a7b4:	af00      	add	r7, sp, #0
   1a7b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
   1a7b8:	2300      	movs	r3, #0
   1a7ba:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
   1a7bc:	f001 f8d6 	bl	1b96c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   1a7c0:	4b40      	ldr	r3, [pc, #256]	; (1a8c4 <pvPortMalloc+0x114>)
   1a7c2:	681b      	ldr	r3, [r3, #0]
   1a7c4:	2b00      	cmp	r3, #0
   1a7c6:	d104      	bne.n	1a7d2 <pvPortMalloc+0x22>
		{
			prvHeapInit();
   1a7c8:	f000 f8be 	bl	1a948 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
   1a7cc:	4b3d      	ldr	r3, [pc, #244]	; (1a8c4 <pvPortMalloc+0x114>)
   1a7ce:	2201      	movs	r2, #1
   1a7d0:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   1a7d2:	687b      	ldr	r3, [r7, #4]
   1a7d4:	2b00      	cmp	r3, #0
   1a7d6:	d00e      	beq.n	1a7f6 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
   1a7d8:	2308      	movs	r3, #8
   1a7da:	461a      	mov	r2, r3
   1a7dc:	687b      	ldr	r3, [r7, #4]
   1a7de:	4413      	add	r3, r2
   1a7e0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
   1a7e2:	687b      	ldr	r3, [r7, #4]
   1a7e4:	f003 0307 	and.w	r3, r3, #7
   1a7e8:	2b00      	cmp	r3, #0
   1a7ea:	d004      	beq.n	1a7f6 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a7ec:	687b      	ldr	r3, [r7, #4]
   1a7ee:	f023 0307 	bic.w	r3, r3, #7
   1a7f2:	3308      	adds	r3, #8
   1a7f4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
   1a7f6:	687b      	ldr	r3, [r7, #4]
   1a7f8:	2b00      	cmp	r3, #0
   1a7fa:	d057      	beq.n	1a8ac <pvPortMalloc+0xfc>
   1a7fc:	687b      	ldr	r3, [r7, #4]
   1a7fe:	f641 32f7 	movw	r2, #7159	; 0x1bf7
   1a802:	4293      	cmp	r3, r2
   1a804:	d852      	bhi.n	1a8ac <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
   1a806:	4b30      	ldr	r3, [pc, #192]	; (1a8c8 <pvPortMalloc+0x118>)
   1a808:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
   1a80a:	4b2f      	ldr	r3, [pc, #188]	; (1a8c8 <pvPortMalloc+0x118>)
   1a80c:	681b      	ldr	r3, [r3, #0]
   1a80e:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1a810:	e004      	b.n	1a81c <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
   1a812:	69fb      	ldr	r3, [r7, #28]
   1a814:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
   1a816:	69fb      	ldr	r3, [r7, #28]
   1a818:	681b      	ldr	r3, [r3, #0]
   1a81a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   1a81c:	69fb      	ldr	r3, [r7, #28]
   1a81e:	685a      	ldr	r2, [r3, #4]
   1a820:	687b      	ldr	r3, [r7, #4]
   1a822:	429a      	cmp	r2, r3
   1a824:	d203      	bcs.n	1a82e <pvPortMalloc+0x7e>
   1a826:	69fb      	ldr	r3, [r7, #28]
   1a828:	681b      	ldr	r3, [r3, #0]
   1a82a:	2b00      	cmp	r3, #0
   1a82c:	d1f1      	bne.n	1a812 <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
   1a82e:	69fb      	ldr	r3, [r7, #28]
   1a830:	4a26      	ldr	r2, [pc, #152]	; (1a8cc <pvPortMalloc+0x11c>)
   1a832:	4293      	cmp	r3, r2
   1a834:	d03a      	beq.n	1a8ac <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   1a836:	69bb      	ldr	r3, [r7, #24]
   1a838:	681b      	ldr	r3, [r3, #0]
   1a83a:	2208      	movs	r2, #8
   1a83c:	4413      	add	r3, r2
   1a83e:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   1a840:	69fb      	ldr	r3, [r7, #28]
   1a842:	681a      	ldr	r2, [r3, #0]
   1a844:	69bb      	ldr	r3, [r7, #24]
   1a846:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   1a848:	69fb      	ldr	r3, [r7, #28]
   1a84a:	685a      	ldr	r2, [r3, #4]
   1a84c:	687b      	ldr	r3, [r7, #4]
   1a84e:	1ad3      	subs	r3, r2, r3
   1a850:	2208      	movs	r2, #8
   1a852:	0052      	lsls	r2, r2, #1
   1a854:	4293      	cmp	r3, r2
   1a856:	d922      	bls.n	1a89e <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   1a858:	69fa      	ldr	r2, [r7, #28]
   1a85a:	687b      	ldr	r3, [r7, #4]
   1a85c:	4413      	add	r3, r2
   1a85e:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   1a860:	69fb      	ldr	r3, [r7, #28]
   1a862:	685a      	ldr	r2, [r3, #4]
   1a864:	687b      	ldr	r3, [r7, #4]
   1a866:	1ad2      	subs	r2, r2, r3
   1a868:	68fb      	ldr	r3, [r7, #12]
   1a86a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   1a86c:	69fb      	ldr	r3, [r7, #28]
   1a86e:	687a      	ldr	r2, [r7, #4]
   1a870:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   1a872:	68fb      	ldr	r3, [r7, #12]
   1a874:	685b      	ldr	r3, [r3, #4]
   1a876:	60bb      	str	r3, [r7, #8]
   1a878:	4b13      	ldr	r3, [pc, #76]	; (1a8c8 <pvPortMalloc+0x118>)
   1a87a:	613b      	str	r3, [r7, #16]
   1a87c:	e002      	b.n	1a884 <pvPortMalloc+0xd4>
   1a87e:	693b      	ldr	r3, [r7, #16]
   1a880:	681b      	ldr	r3, [r3, #0]
   1a882:	613b      	str	r3, [r7, #16]
   1a884:	693b      	ldr	r3, [r7, #16]
   1a886:	681b      	ldr	r3, [r3, #0]
   1a888:	685a      	ldr	r2, [r3, #4]
   1a88a:	68bb      	ldr	r3, [r7, #8]
   1a88c:	429a      	cmp	r2, r3
   1a88e:	d3f6      	bcc.n	1a87e <pvPortMalloc+0xce>
   1a890:	693b      	ldr	r3, [r7, #16]
   1a892:	681a      	ldr	r2, [r3, #0]
   1a894:	68fb      	ldr	r3, [r7, #12]
   1a896:	601a      	str	r2, [r3, #0]
   1a898:	693b      	ldr	r3, [r7, #16]
   1a89a:	68fa      	ldr	r2, [r7, #12]
   1a89c:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   1a89e:	4b0c      	ldr	r3, [pc, #48]	; (1a8d0 <pvPortMalloc+0x120>)
   1a8a0:	681a      	ldr	r2, [r3, #0]
   1a8a2:	69fb      	ldr	r3, [r7, #28]
   1a8a4:	685b      	ldr	r3, [r3, #4]
   1a8a6:	1ad3      	subs	r3, r2, r3
   1a8a8:	4a09      	ldr	r2, [pc, #36]	; (1a8d0 <pvPortMalloc+0x120>)
   1a8aa:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1a8ac:	f001 f8a4 	bl	1b9f8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a8b0:	697b      	ldr	r3, [r7, #20]
   1a8b2:	2b00      	cmp	r3, #0
   1a8b4:	d101      	bne.n	1a8ba <pvPortMalloc+0x10a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a8b6:	f7f8 fb2c 	bl	12f12 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
   1a8ba:	697b      	ldr	r3, [r7, #20]
}
   1a8bc:	4618      	mov	r0, r3
   1a8be:	3720      	adds	r7, #32
   1a8c0:	46bd      	mov	sp, r7
   1a8c2:	bd80      	pop	{r7, pc}
   1a8c4:	10006240 	.word	0x10006240
   1a8c8:	10006230 	.word	0x10006230
   1a8cc:	10006238 	.word	0x10006238
   1a8d0:	100024c0 	.word	0x100024c0

0001a8d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a8d4:	b580      	push	{r7, lr}
   1a8d6:	b086      	sub	sp, #24
   1a8d8:	af00      	add	r7, sp, #0
   1a8da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   1a8dc:	687b      	ldr	r3, [r7, #4]
   1a8de:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
   1a8e0:	687b      	ldr	r3, [r7, #4]
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	d027      	beq.n	1a936 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   1a8e6:	2308      	movs	r3, #8
   1a8e8:	425b      	negs	r3, r3
   1a8ea:	693a      	ldr	r2, [r7, #16]
   1a8ec:	4413      	add	r3, r2
   1a8ee:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
   1a8f0:	693b      	ldr	r3, [r7, #16]
   1a8f2:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
   1a8f4:	f001 f83a 	bl	1b96c <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   1a8f8:	68fb      	ldr	r3, [r7, #12]
   1a8fa:	685b      	ldr	r3, [r3, #4]
   1a8fc:	60bb      	str	r3, [r7, #8]
   1a8fe:	4b10      	ldr	r3, [pc, #64]	; (1a940 <vPortFree+0x6c>)
   1a900:	617b      	str	r3, [r7, #20]
   1a902:	e002      	b.n	1a90a <vPortFree+0x36>
   1a904:	697b      	ldr	r3, [r7, #20]
   1a906:	681b      	ldr	r3, [r3, #0]
   1a908:	617b      	str	r3, [r7, #20]
   1a90a:	697b      	ldr	r3, [r7, #20]
   1a90c:	681b      	ldr	r3, [r3, #0]
   1a90e:	685a      	ldr	r2, [r3, #4]
   1a910:	68bb      	ldr	r3, [r7, #8]
   1a912:	429a      	cmp	r2, r3
   1a914:	d3f6      	bcc.n	1a904 <vPortFree+0x30>
   1a916:	697b      	ldr	r3, [r7, #20]
   1a918:	681a      	ldr	r2, [r3, #0]
   1a91a:	68fb      	ldr	r3, [r7, #12]
   1a91c:	601a      	str	r2, [r3, #0]
   1a91e:	697b      	ldr	r3, [r7, #20]
   1a920:	68fa      	ldr	r2, [r7, #12]
   1a922:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
   1a924:	68fb      	ldr	r3, [r7, #12]
   1a926:	685a      	ldr	r2, [r3, #4]
   1a928:	4b06      	ldr	r3, [pc, #24]	; (1a944 <vPortFree+0x70>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	4413      	add	r3, r2
   1a92e:	4a05      	ldr	r2, [pc, #20]	; (1a944 <vPortFree+0x70>)
   1a930:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
   1a932:	f001 f861 	bl	1b9f8 <xTaskResumeAll>
	}
}
   1a936:	bf00      	nop
   1a938:	3718      	adds	r7, #24
   1a93a:	46bd      	mov	sp, r7
   1a93c:	bd80      	pop	{r7, pc}
   1a93e:	bf00      	nop
   1a940:	10006230 	.word	0x10006230
   1a944:	100024c0 	.word	0x100024c0

0001a948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   1a948:	b480      	push	{r7}
   1a94a:	b083      	sub	sp, #12
   1a94c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a94e:	4b10      	ldr	r3, [pc, #64]	; (1a990 <prvHeapInit+0x48>)
   1a950:	f023 0307 	bic.w	r3, r3, #7
   1a954:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   1a956:	4a0f      	ldr	r2, [pc, #60]	; (1a994 <prvHeapInit+0x4c>)
   1a958:	687b      	ldr	r3, [r7, #4]
   1a95a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   1a95c:	4b0d      	ldr	r3, [pc, #52]	; (1a994 <prvHeapInit+0x4c>)
   1a95e:	2200      	movs	r2, #0
   1a960:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
   1a962:	4b0d      	ldr	r3, [pc, #52]	; (1a998 <prvHeapInit+0x50>)
   1a964:	f641 32f8 	movw	r2, #7160	; 0x1bf8
   1a968:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
   1a96a:	4b0b      	ldr	r3, [pc, #44]	; (1a998 <prvHeapInit+0x50>)
   1a96c:	2200      	movs	r2, #0
   1a96e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   1a970:	687b      	ldr	r3, [r7, #4]
   1a972:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
   1a974:	683b      	ldr	r3, [r7, #0]
   1a976:	f641 32f8 	movw	r2, #7160	; 0x1bf8
   1a97a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
   1a97c:	683b      	ldr	r3, [r7, #0]
   1a97e:	4a06      	ldr	r2, [pc, #24]	; (1a998 <prvHeapInit+0x50>)
   1a980:	601a      	str	r2, [r3, #0]
}
   1a982:	bf00      	nop
   1a984:	370c      	adds	r7, #12
   1a986:	46bd      	mov	sp, r7
   1a988:	f85d 7b04 	ldr.w	r7, [sp], #4
   1a98c:	4770      	bx	lr
   1a98e:	bf00      	nop
   1a990:	10004638 	.word	0x10004638
   1a994:	10006230 	.word	0x10006230
   1a998:	10006238 	.word	0x10006238

0001a99c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
   1a99c:	b580      	push	{r7, lr}
   1a99e:	b082      	sub	sp, #8
   1a9a0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
   1a9a2:	2018      	movs	r0, #24
   1a9a4:	f7ff ff04 	bl	1a7b0 <pvPortMalloc>
   1a9a8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
   1a9aa:	687b      	ldr	r3, [r7, #4]
   1a9ac:	2b00      	cmp	r3, #0
   1a9ae:	d007      	beq.n	1a9c0 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
   1a9b0:	687b      	ldr	r3, [r7, #4]
   1a9b2:	2200      	movs	r2, #0
   1a9b4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
   1a9b6:	687b      	ldr	r3, [r7, #4]
   1a9b8:	3304      	adds	r3, #4
   1a9ba:	4618      	mov	r0, r3
   1a9bc:	f000 f952 	bl	1ac64 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
   1a9c0:	687b      	ldr	r3, [r7, #4]
	}
   1a9c2:	4618      	mov	r0, r3
   1a9c4:	3708      	adds	r7, #8
   1a9c6:	46bd      	mov	sp, r7
   1a9c8:	bd80      	pop	{r7, pc}
	...

0001a9cc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
   1a9cc:	b580      	push	{r7, lr}
   1a9ce:	b08c      	sub	sp, #48	; 0x30
   1a9d0:	af00      	add	r7, sp, #0
   1a9d2:	60f8      	str	r0, [r7, #12]
   1a9d4:	60b9      	str	r1, [r7, #8]
   1a9d6:	607a      	str	r2, [r7, #4]
   1a9d8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
   1a9da:	68fb      	ldr	r3, [r7, #12]
   1a9dc:	627b      	str	r3, [r7, #36]	; 0x24
EventBits_t uxReturn, uxControlBits = 0;
   1a9de:	2300      	movs	r3, #0
   1a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
   1a9e2:	2300      	movs	r3, #0
   1a9e4:	623b      	str	r3, [r7, #32]

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
   1a9e6:	68fb      	ldr	r3, [r7, #12]
   1a9e8:	2b00      	cmp	r3, #0
   1a9ea:	d100      	bne.n	1a9ee <xEventGroupWaitBits+0x22>
   1a9ec:	e7fe      	b.n	1a9ec <xEventGroupWaitBits+0x20>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1a9ee:	68bb      	ldr	r3, [r7, #8]
   1a9f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1a9f4:	2b00      	cmp	r3, #0
   1a9f6:	d000      	beq.n	1a9fa <xEventGroupWaitBits+0x2e>
   1a9f8:	e7fe      	b.n	1a9f8 <xEventGroupWaitBits+0x2c>
	configASSERT( uxBitsToWaitFor != 0 );
   1a9fa:	68bb      	ldr	r3, [r7, #8]
   1a9fc:	2b00      	cmp	r3, #0
   1a9fe:	d100      	bne.n	1aa02 <xEventGroupWaitBits+0x36>
   1aa00:	e7fe      	b.n	1aa00 <xEventGroupWaitBits+0x34>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1aa02:	f001 fc17 	bl	1c234 <xTaskGetSchedulerState>
   1aa06:	4603      	mov	r3, r0
   1aa08:	2b00      	cmp	r3, #0
   1aa0a:	d102      	bne.n	1aa12 <xEventGroupWaitBits+0x46>
   1aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa0e:	2b00      	cmp	r3, #0
   1aa10:	d101      	bne.n	1aa16 <xEventGroupWaitBits+0x4a>
   1aa12:	2301      	movs	r3, #1
   1aa14:	e000      	b.n	1aa18 <xEventGroupWaitBits+0x4c>
   1aa16:	2300      	movs	r3, #0
   1aa18:	2b00      	cmp	r3, #0
   1aa1a:	d100      	bne.n	1aa1e <xEventGroupWaitBits+0x52>
   1aa1c:	e7fe      	b.n	1aa1c <xEventGroupWaitBits+0x50>
	}
	#endif

	vTaskSuspendAll();
   1aa1e:	f000 ffa5 	bl	1b96c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
   1aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa24:	681b      	ldr	r3, [r3, #0]
   1aa26:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
   1aa28:	683a      	ldr	r2, [r7, #0]
   1aa2a:	68b9      	ldr	r1, [r7, #8]
   1aa2c:	69f8      	ldr	r0, [r7, #28]
   1aa2e:	f000 f8f7 	bl	1ac20 <prvTestWaitCondition>
   1aa32:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
   1aa34:	69bb      	ldr	r3, [r7, #24]
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d00e      	beq.n	1aa58 <xEventGroupWaitBits+0x8c>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
   1aa3a:	69fb      	ldr	r3, [r7, #28]
   1aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
   1aa3e:	2300      	movs	r3, #0
   1aa40:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
   1aa42:	687b      	ldr	r3, [r7, #4]
   1aa44:	2b00      	cmp	r3, #0
   1aa46:	d028      	beq.n	1aa9a <xEventGroupWaitBits+0xce>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa4a:	681a      	ldr	r2, [r3, #0]
   1aa4c:	68bb      	ldr	r3, [r7, #8]
   1aa4e:	43db      	mvns	r3, r3
   1aa50:	401a      	ands	r2, r3
   1aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa54:	601a      	str	r2, [r3, #0]
   1aa56:	e020      	b.n	1aa9a <xEventGroupWaitBits+0xce>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
   1aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d104      	bne.n	1aa68 <xEventGroupWaitBits+0x9c>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
   1aa5e:	69fb      	ldr	r3, [r7, #28]
   1aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTimeoutOccurred = pdTRUE;
   1aa62:	2301      	movs	r3, #1
   1aa64:	623b      	str	r3, [r7, #32]
   1aa66:	e018      	b.n	1aa9a <xEventGroupWaitBits+0xce>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
   1aa68:	687b      	ldr	r3, [r7, #4]
   1aa6a:	2b00      	cmp	r3, #0
   1aa6c:	d003      	beq.n	1aa76 <xEventGroupWaitBits+0xaa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
   1aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1aa74:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
   1aa76:	683b      	ldr	r3, [r7, #0]
   1aa78:	2b00      	cmp	r3, #0
   1aa7a:	d003      	beq.n	1aa84 <xEventGroupWaitBits+0xb8>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
   1aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1aa82:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
   1aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aa86:	1d18      	adds	r0, r3, #4
   1aa88:	68ba      	ldr	r2, [r7, #8]
   1aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1aa8c:	4313      	orrs	r3, r2
   1aa8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1aa90:	4619      	mov	r1, r3
   1aa92:	f001 f9a5 	bl	1bde0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
   1aa96:	2300      	movs	r3, #0
   1aa98:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
   1aa9a:	f000 ffad 	bl	1b9f8 <xTaskResumeAll>
   1aa9e:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
   1aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1aaa2:	2b00      	cmp	r3, #0
   1aaa4:	d031      	beq.n	1ab0a <xEventGroupWaitBits+0x13e>
	{
		if( xAlreadyYielded == pdFALSE )
   1aaa6:	697b      	ldr	r3, [r7, #20]
   1aaa8:	2b00      	cmp	r3, #0
   1aaaa:	d107      	bne.n	1aabc <xEventGroupWaitBits+0xf0>
		{
			portYIELD_WITHIN_API();
   1aaac:	4b19      	ldr	r3, [pc, #100]	; (1ab14 <xEventGroupWaitBits+0x148>)
   1aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1aab2:	601a      	str	r2, [r3, #0]
   1aab4:	f3bf 8f4f 	dsb	sy
   1aab8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
   1aabc:	f001 fbd8 	bl	1c270 <uxTaskResetEventItemValue>
   1aac0:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
   1aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1aac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   1aac8:	2b00      	cmp	r3, #0
   1aaca:	d11a      	bne.n	1ab02 <xEventGroupWaitBits+0x136>
		{
			taskENTER_CRITICAL();
   1aacc:	f7fe feec 	bl	198a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
   1aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aad2:	681b      	ldr	r3, [r3, #0]
   1aad4:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
   1aad6:	683a      	ldr	r2, [r7, #0]
   1aad8:	68b9      	ldr	r1, [r7, #8]
   1aada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1aadc:	f000 f8a0 	bl	1ac20 <prvTestWaitCondition>
   1aae0:	4603      	mov	r3, r0
   1aae2:	2b00      	cmp	r3, #0
   1aae4:	d009      	beq.n	1aafa <xEventGroupWaitBits+0x12e>
				{
					if( xClearOnExit != pdFALSE )
   1aae6:	687b      	ldr	r3, [r7, #4]
   1aae8:	2b00      	cmp	r3, #0
   1aaea:	d006      	beq.n	1aafa <xEventGroupWaitBits+0x12e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
   1aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aaee:	681a      	ldr	r2, [r3, #0]
   1aaf0:	68bb      	ldr	r3, [r7, #8]
   1aaf2:	43db      	mvns	r3, r3
   1aaf4:	401a      	ands	r2, r3
   1aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1aaf8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
   1aafa:	2301      	movs	r3, #1
   1aafc:	623b      	str	r3, [r7, #32]
			}
			taskEXIT_CRITICAL();
   1aafe:	f7fe fef9 	bl	198f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
   1ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
   1ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1ab0c:	4618      	mov	r0, r3
   1ab0e:	3730      	adds	r7, #48	; 0x30
   1ab10:	46bd      	mov	sp, r7
   1ab12:	bd80      	pop	{r7, pc}
   1ab14:	e000ed04 	.word	0xe000ed04

0001ab18 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
   1ab18:	b580      	push	{r7, lr}
   1ab1a:	b08c      	sub	sp, #48	; 0x30
   1ab1c:	af00      	add	r7, sp, #0
   1ab1e:	6078      	str	r0, [r7, #4]
   1ab20:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
   1ab22:	2300      	movs	r3, #0
   1ab24:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = xEventGroup;
   1ab26:	687b      	ldr	r3, [r7, #4]
   1ab28:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
   1ab2e:	687b      	ldr	r3, [r7, #4]
   1ab30:	2b00      	cmp	r3, #0
   1ab32:	d100      	bne.n	1ab36 <xEventGroupSetBits+0x1e>
   1ab34:	e7fe      	b.n	1ab34 <xEventGroupSetBits+0x1c>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
   1ab36:	683b      	ldr	r3, [r7, #0]
   1ab38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1ab3c:	2b00      	cmp	r3, #0
   1ab3e:	d000      	beq.n	1ab42 <xEventGroupSetBits+0x2a>
   1ab40:	e7fe      	b.n	1ab40 <xEventGroupSetBits+0x28>

	pxList = &( pxEventBits->xTasksWaitingForBits );
   1ab42:	6a3b      	ldr	r3, [r7, #32]
   1ab44:	3304      	adds	r3, #4
   1ab46:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ab48:	69fb      	ldr	r3, [r7, #28]
   1ab4a:	3308      	adds	r3, #8
   1ab4c:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
   1ab4e:	f000 ff0d 	bl	1b96c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
   1ab52:	69fb      	ldr	r3, [r7, #28]
   1ab54:	68db      	ldr	r3, [r3, #12]
   1ab56:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
   1ab58:	6a3b      	ldr	r3, [r7, #32]
   1ab5a:	681a      	ldr	r2, [r3, #0]
   1ab5c:	683b      	ldr	r3, [r7, #0]
   1ab5e:	431a      	orrs	r2, r3
   1ab60:	6a3b      	ldr	r3, [r7, #32]
   1ab62:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
   1ab64:	e03c      	b.n	1abe0 <xEventGroupSetBits+0xc8>
		{
			pxNext = listGET_NEXT( pxListItem );
   1ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab68:	685b      	ldr	r3, [r3, #4]
   1ab6a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
   1ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ab6e:	681b      	ldr	r3, [r3, #0]
   1ab70:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
   1ab72:	2300      	movs	r3, #0
   1ab74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
   1ab76:	693b      	ldr	r3, [r7, #16]
   1ab78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   1ab7c:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
   1ab7e:	693b      	ldr	r3, [r7, #16]
   1ab80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1ab84:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
   1ab86:	68fb      	ldr	r3, [r7, #12]
   1ab88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   1ab8c:	2b00      	cmp	r3, #0
   1ab8e:	d108      	bne.n	1aba2 <xEventGroupSetBits+0x8a>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
   1ab90:	6a3b      	ldr	r3, [r7, #32]
   1ab92:	681a      	ldr	r2, [r3, #0]
   1ab94:	693b      	ldr	r3, [r7, #16]
   1ab96:	4013      	ands	r3, r2
   1ab98:	2b00      	cmp	r3, #0
   1ab9a:	d00b      	beq.n	1abb4 <xEventGroupSetBits+0x9c>
				{
					xMatchFound = pdTRUE;
   1ab9c:	2301      	movs	r3, #1
   1ab9e:	627b      	str	r3, [r7, #36]	; 0x24
   1aba0:	e008      	b.n	1abb4 <xEventGroupSetBits+0x9c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
   1aba2:	6a3b      	ldr	r3, [r7, #32]
   1aba4:	681a      	ldr	r2, [r3, #0]
   1aba6:	693b      	ldr	r3, [r7, #16]
   1aba8:	401a      	ands	r2, r3
   1abaa:	693b      	ldr	r3, [r7, #16]
   1abac:	429a      	cmp	r2, r3
   1abae:	d101      	bne.n	1abb4 <xEventGroupSetBits+0x9c>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
   1abb0:	2301      	movs	r3, #1
   1abb2:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
   1abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1abb6:	2b00      	cmp	r3, #0
   1abb8:	d010      	beq.n	1abdc <xEventGroupSetBits+0xc4>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
   1abba:	68fb      	ldr	r3, [r7, #12]
   1abbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d003      	beq.n	1abcc <xEventGroupSetBits+0xb4>
				{
					uxBitsToClear |= uxBitsWaitedFor;
   1abc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1abc6:	693b      	ldr	r3, [r7, #16]
   1abc8:	4313      	orrs	r3, r2
   1abca:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
   1abcc:	6a3b      	ldr	r3, [r7, #32]
   1abce:	681b      	ldr	r3, [r3, #0]
   1abd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1abd4:	4619      	mov	r1, r3
   1abd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1abd8:	f001 f9a8 	bl	1bf2c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
   1abdc:	697b      	ldr	r3, [r7, #20]
   1abde:	62fb      	str	r3, [r7, #44]	; 0x2c
		while( pxListItem != pxListEnd )
   1abe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1abe2:	69bb      	ldr	r3, [r7, #24]
   1abe4:	429a      	cmp	r2, r3
   1abe6:	d1be      	bne.n	1ab66 <xEventGroupSetBits+0x4e>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
   1abe8:	6a3b      	ldr	r3, [r7, #32]
   1abea:	681a      	ldr	r2, [r3, #0]
   1abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1abee:	43db      	mvns	r3, r3
   1abf0:	401a      	ands	r2, r3
   1abf2:	6a3b      	ldr	r3, [r7, #32]
   1abf4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
   1abf6:	f000 feff 	bl	1b9f8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
   1abfa:	6a3b      	ldr	r3, [r7, #32]
   1abfc:	681b      	ldr	r3, [r3, #0]
}
   1abfe:	4618      	mov	r0, r3
   1ac00:	3730      	adds	r7, #48	; 0x30
   1ac02:	46bd      	mov	sp, r7
   1ac04:	bd80      	pop	{r7, pc}

0001ac06 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
   1ac06:	b580      	push	{r7, lr}
   1ac08:	b082      	sub	sp, #8
   1ac0a:	af00      	add	r7, sp, #0
   1ac0c:	6078      	str	r0, [r7, #4]
   1ac0e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
   1ac10:	6839      	ldr	r1, [r7, #0]
   1ac12:	6878      	ldr	r0, [r7, #4]
   1ac14:	f7ff ff80 	bl	1ab18 <xEventGroupSetBits>
}
   1ac18:	bf00      	nop
   1ac1a:	3708      	adds	r7, #8
   1ac1c:	46bd      	mov	sp, r7
   1ac1e:	bd80      	pop	{r7, pc}

0001ac20 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
   1ac20:	b480      	push	{r7}
   1ac22:	b087      	sub	sp, #28
   1ac24:	af00      	add	r7, sp, #0
   1ac26:	60f8      	str	r0, [r7, #12]
   1ac28:	60b9      	str	r1, [r7, #8]
   1ac2a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
   1ac2c:	2300      	movs	r3, #0
   1ac2e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
   1ac30:	687b      	ldr	r3, [r7, #4]
   1ac32:	2b00      	cmp	r3, #0
   1ac34:	d107      	bne.n	1ac46 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
   1ac36:	68fa      	ldr	r2, [r7, #12]
   1ac38:	68bb      	ldr	r3, [r7, #8]
   1ac3a:	4013      	ands	r3, r2
   1ac3c:	2b00      	cmp	r3, #0
   1ac3e:	d00a      	beq.n	1ac56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1ac40:	2301      	movs	r3, #1
   1ac42:	617b      	str	r3, [r7, #20]
   1ac44:	e007      	b.n	1ac56 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
   1ac46:	68fa      	ldr	r2, [r7, #12]
   1ac48:	68bb      	ldr	r3, [r7, #8]
   1ac4a:	401a      	ands	r2, r3
   1ac4c:	68bb      	ldr	r3, [r7, #8]
   1ac4e:	429a      	cmp	r2, r3
   1ac50:	d101      	bne.n	1ac56 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
   1ac52:	2301      	movs	r3, #1
   1ac54:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
   1ac56:	697b      	ldr	r3, [r7, #20]
}
   1ac58:	4618      	mov	r0, r3
   1ac5a:	371c      	adds	r7, #28
   1ac5c:	46bd      	mov	sp, r7
   1ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ac62:	4770      	bx	lr

0001ac64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ac64:	b480      	push	{r7}
   1ac66:	b083      	sub	sp, #12
   1ac68:	af00      	add	r7, sp, #0
   1ac6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ac6c:	687b      	ldr	r3, [r7, #4]
   1ac6e:	f103 0208 	add.w	r2, r3, #8
   1ac72:	687b      	ldr	r3, [r7, #4]
   1ac74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ac76:	687b      	ldr	r3, [r7, #4]
   1ac78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ac7e:	687b      	ldr	r3, [r7, #4]
   1ac80:	f103 0208 	add.w	r2, r3, #8
   1ac84:	687b      	ldr	r3, [r7, #4]
   1ac86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ac88:	687b      	ldr	r3, [r7, #4]
   1ac8a:	f103 0208 	add.w	r2, r3, #8
   1ac8e:	687b      	ldr	r3, [r7, #4]
   1ac90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ac92:	687b      	ldr	r3, [r7, #4]
   1ac94:	2200      	movs	r2, #0
   1ac96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ac98:	bf00      	nop
   1ac9a:	370c      	adds	r7, #12
   1ac9c:	46bd      	mov	sp, r7
   1ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1aca2:	4770      	bx	lr

0001aca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1aca4:	b480      	push	{r7}
   1aca6:	b083      	sub	sp, #12
   1aca8:	af00      	add	r7, sp, #0
   1acaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
   1acac:	687b      	ldr	r3, [r7, #4]
   1acae:	2200      	movs	r2, #0
   1acb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1acb2:	bf00      	nop
   1acb4:	370c      	adds	r7, #12
   1acb6:	46bd      	mov	sp, r7
   1acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1acbc:	4770      	bx	lr

0001acbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1acbe:	b480      	push	{r7}
   1acc0:	b085      	sub	sp, #20
   1acc2:	af00      	add	r7, sp, #0
   1acc4:	6078      	str	r0, [r7, #4]
   1acc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1acc8:	687b      	ldr	r3, [r7, #4]
   1acca:	685b      	ldr	r3, [r3, #4]
   1accc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1acce:	683b      	ldr	r3, [r7, #0]
   1acd0:	68fa      	ldr	r2, [r7, #12]
   1acd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1acd4:	68fb      	ldr	r3, [r7, #12]
   1acd6:	689a      	ldr	r2, [r3, #8]
   1acd8:	683b      	ldr	r3, [r7, #0]
   1acda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1acdc:	68fb      	ldr	r3, [r7, #12]
   1acde:	689b      	ldr	r3, [r3, #8]
   1ace0:	683a      	ldr	r2, [r7, #0]
   1ace2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ace4:	68fb      	ldr	r3, [r7, #12]
   1ace6:	683a      	ldr	r2, [r7, #0]
   1ace8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
   1acea:	683b      	ldr	r3, [r7, #0]
   1acec:	687a      	ldr	r2, [r7, #4]
   1acee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1acf0:	687b      	ldr	r3, [r7, #4]
   1acf2:	681b      	ldr	r3, [r3, #0]
   1acf4:	1c5a      	adds	r2, r3, #1
   1acf6:	687b      	ldr	r3, [r7, #4]
   1acf8:	601a      	str	r2, [r3, #0]
}
   1acfa:	bf00      	nop
   1acfc:	3714      	adds	r7, #20
   1acfe:	46bd      	mov	sp, r7
   1ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad04:	4770      	bx	lr

0001ad06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ad06:	b480      	push	{r7}
   1ad08:	b085      	sub	sp, #20
   1ad0a:	af00      	add	r7, sp, #0
   1ad0c:	6078      	str	r0, [r7, #4]
   1ad0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ad10:	683b      	ldr	r3, [r7, #0]
   1ad12:	681b      	ldr	r3, [r3, #0]
   1ad14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ad16:	68bb      	ldr	r3, [r7, #8]
   1ad18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ad1c:	d103      	bne.n	1ad26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	691b      	ldr	r3, [r3, #16]
   1ad22:	60fb      	str	r3, [r7, #12]
   1ad24:	e00c      	b.n	1ad40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
   1ad26:	687b      	ldr	r3, [r7, #4]
   1ad28:	3308      	adds	r3, #8
   1ad2a:	60fb      	str	r3, [r7, #12]
   1ad2c:	e002      	b.n	1ad34 <vListInsert+0x2e>
   1ad2e:	68fb      	ldr	r3, [r7, #12]
   1ad30:	685b      	ldr	r3, [r3, #4]
   1ad32:	60fb      	str	r3, [r7, #12]
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	685b      	ldr	r3, [r3, #4]
   1ad38:	681a      	ldr	r2, [r3, #0]
   1ad3a:	68bb      	ldr	r3, [r7, #8]
   1ad3c:	429a      	cmp	r2, r3
   1ad3e:	d9f6      	bls.n	1ad2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1ad40:	68fb      	ldr	r3, [r7, #12]
   1ad42:	685a      	ldr	r2, [r3, #4]
   1ad44:	683b      	ldr	r3, [r7, #0]
   1ad46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ad48:	683b      	ldr	r3, [r7, #0]
   1ad4a:	685b      	ldr	r3, [r3, #4]
   1ad4c:	683a      	ldr	r2, [r7, #0]
   1ad4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ad50:	683b      	ldr	r3, [r7, #0]
   1ad52:	68fa      	ldr	r2, [r7, #12]
   1ad54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ad56:	68fb      	ldr	r3, [r7, #12]
   1ad58:	683a      	ldr	r2, [r7, #0]
   1ad5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
   1ad5c:	683b      	ldr	r3, [r7, #0]
   1ad5e:	687a      	ldr	r2, [r7, #4]
   1ad60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ad62:	687b      	ldr	r3, [r7, #4]
   1ad64:	681b      	ldr	r3, [r3, #0]
   1ad66:	1c5a      	adds	r2, r3, #1
   1ad68:	687b      	ldr	r3, [r7, #4]
   1ad6a:	601a      	str	r2, [r3, #0]
}
   1ad6c:	bf00      	nop
   1ad6e:	3714      	adds	r7, #20
   1ad70:	46bd      	mov	sp, r7
   1ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
   1ad76:	4770      	bx	lr

0001ad78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ad78:	b480      	push	{r7}
   1ad7a:	b085      	sub	sp, #20
   1ad7c:	af00      	add	r7, sp, #0
   1ad7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
   1ad80:	687b      	ldr	r3, [r7, #4]
   1ad82:	691b      	ldr	r3, [r3, #16]
   1ad84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ad86:	687b      	ldr	r3, [r7, #4]
   1ad88:	685b      	ldr	r3, [r3, #4]
   1ad8a:	687a      	ldr	r2, [r7, #4]
   1ad8c:	6892      	ldr	r2, [r2, #8]
   1ad8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ad90:	687b      	ldr	r3, [r7, #4]
   1ad92:	689b      	ldr	r3, [r3, #8]
   1ad94:	687a      	ldr	r2, [r7, #4]
   1ad96:	6852      	ldr	r2, [r2, #4]
   1ad98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ad9a:	68fb      	ldr	r3, [r7, #12]
   1ad9c:	685a      	ldr	r2, [r3, #4]
   1ad9e:	687b      	ldr	r3, [r7, #4]
   1ada0:	429a      	cmp	r2, r3
   1ada2:	d103      	bne.n	1adac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ada4:	687b      	ldr	r3, [r7, #4]
   1ada6:	689a      	ldr	r2, [r3, #8]
   1ada8:	68fb      	ldr	r3, [r7, #12]
   1adaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
   1adac:	687b      	ldr	r3, [r7, #4]
   1adae:	2200      	movs	r2, #0
   1adb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1adb2:	68fb      	ldr	r3, [r7, #12]
   1adb4:	681b      	ldr	r3, [r3, #0]
   1adb6:	1e5a      	subs	r2, r3, #1
   1adb8:	68fb      	ldr	r3, [r7, #12]
   1adba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1adbc:	68fb      	ldr	r3, [r7, #12]
   1adbe:	681b      	ldr	r3, [r3, #0]
}
   1adc0:	4618      	mov	r0, r3
   1adc2:	3714      	adds	r7, #20
   1adc4:	46bd      	mov	sp, r7
   1adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1adca:	4770      	bx	lr

0001adcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1adcc:	b580      	push	{r7, lr}
   1adce:	b084      	sub	sp, #16
   1add0:	af00      	add	r7, sp, #0
   1add2:	6078      	str	r0, [r7, #4]
   1add4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
   1add6:	687b      	ldr	r3, [r7, #4]
   1add8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1adda:	68fb      	ldr	r3, [r7, #12]
   1addc:	2b00      	cmp	r3, #0
   1adde:	d100      	bne.n	1ade2 <xQueueGenericReset+0x16>
   1ade0:	e7fe      	b.n	1ade0 <xQueueGenericReset+0x14>

	taskENTER_CRITICAL();
   1ade2:	f7fe fd61 	bl	198a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1ade6:	68fb      	ldr	r3, [r7, #12]
   1ade8:	681a      	ldr	r2, [r3, #0]
   1adea:	68fb      	ldr	r3, [r7, #12]
   1adec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1adee:	68f9      	ldr	r1, [r7, #12]
   1adf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1adf2:	fb01 f303 	mul.w	r3, r1, r3
   1adf6:	441a      	add	r2, r3
   1adf8:	68fb      	ldr	r3, [r7, #12]
   1adfa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1adfc:	68fb      	ldr	r3, [r7, #12]
   1adfe:	2200      	movs	r2, #0
   1ae00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1ae02:	68fb      	ldr	r3, [r7, #12]
   1ae04:	681a      	ldr	r2, [r3, #0]
   1ae06:	68fb      	ldr	r3, [r7, #12]
   1ae08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1ae0a:	68fb      	ldr	r3, [r7, #12]
   1ae0c:	681a      	ldr	r2, [r3, #0]
   1ae0e:	68fb      	ldr	r3, [r7, #12]
   1ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ae12:	3b01      	subs	r3, #1
   1ae14:	68f9      	ldr	r1, [r7, #12]
   1ae16:	6c09      	ldr	r1, [r1, #64]	; 0x40
   1ae18:	fb01 f303 	mul.w	r3, r1, r3
   1ae1c:	441a      	add	r2, r3
   1ae1e:	68fb      	ldr	r3, [r7, #12]
   1ae20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1ae22:	68fb      	ldr	r3, [r7, #12]
   1ae24:	22ff      	movs	r2, #255	; 0xff
   1ae26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
   1ae2a:	68fb      	ldr	r3, [r7, #12]
   1ae2c:	22ff      	movs	r2, #255	; 0xff
   1ae2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
   1ae32:	683b      	ldr	r3, [r7, #0]
   1ae34:	2b00      	cmp	r3, #0
   1ae36:	d114      	bne.n	1ae62 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ae38:	68fb      	ldr	r3, [r7, #12]
   1ae3a:	691b      	ldr	r3, [r3, #16]
   1ae3c:	2b00      	cmp	r3, #0
   1ae3e:	d01a      	beq.n	1ae76 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ae40:	68fb      	ldr	r3, [r7, #12]
   1ae42:	3310      	adds	r3, #16
   1ae44:	4618      	mov	r0, r3
   1ae46:	f001 f815 	bl	1be74 <xTaskRemoveFromEventList>
   1ae4a:	4603      	mov	r3, r0
   1ae4c:	2b00      	cmp	r3, #0
   1ae4e:	d012      	beq.n	1ae76 <xQueueGenericReset+0xaa>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1ae50:	4b0c      	ldr	r3, [pc, #48]	; (1ae84 <xQueueGenericReset+0xb8>)
   1ae52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ae56:	601a      	str	r2, [r3, #0]
   1ae58:	f3bf 8f4f 	dsb	sy
   1ae5c:	f3bf 8f6f 	isb	sy
   1ae60:	e009      	b.n	1ae76 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1ae62:	68fb      	ldr	r3, [r7, #12]
   1ae64:	3310      	adds	r3, #16
   1ae66:	4618      	mov	r0, r3
   1ae68:	f7ff fefc 	bl	1ac64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1ae6c:	68fb      	ldr	r3, [r7, #12]
   1ae6e:	3324      	adds	r3, #36	; 0x24
   1ae70:	4618      	mov	r0, r3
   1ae72:	f7ff fef7 	bl	1ac64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   1ae76:	f7fe fd3d 	bl	198f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1ae7a:	2301      	movs	r3, #1
}
   1ae7c:	4618      	mov	r0, r3
   1ae7e:	3710      	adds	r7, #16
   1ae80:	46bd      	mov	sp, r7
   1ae82:	bd80      	pop	{r7, pc}
   1ae84:	e000ed04 	.word	0xe000ed04

0001ae88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1ae88:	b580      	push	{r7, lr}
   1ae8a:	b08a      	sub	sp, #40	; 0x28
   1ae8c:	af02      	add	r7, sp, #8
   1ae8e:	60f8      	str	r0, [r7, #12]
   1ae90:	60b9      	str	r1, [r7, #8]
   1ae92:	4613      	mov	r3, r2
   1ae94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1ae96:	68fb      	ldr	r3, [r7, #12]
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d100      	bne.n	1ae9e <xQueueGenericCreate+0x16>
   1ae9c:	e7fe      	b.n	1ae9c <xQueueGenericCreate+0x14>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1ae9e:	68bb      	ldr	r3, [r7, #8]
   1aea0:	2b00      	cmp	r3, #0
   1aea2:	d102      	bne.n	1aeaa <xQueueGenericCreate+0x22>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1aea4:	2300      	movs	r3, #0
   1aea6:	61fb      	str	r3, [r7, #28]
   1aea8:	e004      	b.n	1aeb4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1aeaa:	68fb      	ldr	r3, [r7, #12]
   1aeac:	68ba      	ldr	r2, [r7, #8]
   1aeae:	fb02 f303 	mul.w	r3, r2, r3
   1aeb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
   1aeb4:	69fb      	ldr	r3, [r7, #28]
   1aeb6:	3348      	adds	r3, #72	; 0x48
   1aeb8:	4618      	mov	r0, r3
   1aeba:	f7ff fc79 	bl	1a7b0 <pvPortMalloc>
   1aebe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
   1aec0:	69bb      	ldr	r3, [r7, #24]
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	d00d      	beq.n	1aee2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
   1aec6:	69bb      	ldr	r3, [r7, #24]
   1aec8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
   1aeca:	697b      	ldr	r3, [r7, #20]
   1aecc:	3348      	adds	r3, #72	; 0x48
   1aece:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1aed0:	79fa      	ldrb	r2, [r7, #7]
   1aed2:	69bb      	ldr	r3, [r7, #24]
   1aed4:	9300      	str	r3, [sp, #0]
   1aed6:	4613      	mov	r3, r2
   1aed8:	697a      	ldr	r2, [r7, #20]
   1aeda:	68b9      	ldr	r1, [r7, #8]
   1aedc:	68f8      	ldr	r0, [r7, #12]
   1aede:	f000 f805 	bl	1aeec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
   1aee2:	69bb      	ldr	r3, [r7, #24]
	}
   1aee4:	4618      	mov	r0, r3
   1aee6:	3720      	adds	r7, #32
   1aee8:	46bd      	mov	sp, r7
   1aeea:	bd80      	pop	{r7, pc}

0001aeec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1aeec:	b580      	push	{r7, lr}
   1aeee:	b084      	sub	sp, #16
   1aef0:	af00      	add	r7, sp, #0
   1aef2:	60f8      	str	r0, [r7, #12]
   1aef4:	60b9      	str	r1, [r7, #8]
   1aef6:	607a      	str	r2, [r7, #4]
   1aef8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1aefa:	68bb      	ldr	r3, [r7, #8]
   1aefc:	2b00      	cmp	r3, #0
   1aefe:	d103      	bne.n	1af08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1af00:	69bb      	ldr	r3, [r7, #24]
   1af02:	69ba      	ldr	r2, [r7, #24]
   1af04:	601a      	str	r2, [r3, #0]
   1af06:	e002      	b.n	1af0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1af08:	69bb      	ldr	r3, [r7, #24]
   1af0a:	687a      	ldr	r2, [r7, #4]
   1af0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1af0e:	69bb      	ldr	r3, [r7, #24]
   1af10:	68fa      	ldr	r2, [r7, #12]
   1af12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1af14:	69bb      	ldr	r3, [r7, #24]
   1af16:	68ba      	ldr	r2, [r7, #8]
   1af18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1af1a:	2101      	movs	r1, #1
   1af1c:	69b8      	ldr	r0, [r7, #24]
   1af1e:	f7ff ff55 	bl	1adcc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   1af22:	bf00      	nop
   1af24:	3710      	adds	r7, #16
   1af26:	46bd      	mov	sp, r7
   1af28:	bd80      	pop	{r7, pc}
	...

0001af2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1af2c:	b580      	push	{r7, lr}
   1af2e:	b08a      	sub	sp, #40	; 0x28
   1af30:	af00      	add	r7, sp, #0
   1af32:	60f8      	str	r0, [r7, #12]
   1af34:	60b9      	str	r1, [r7, #8]
   1af36:	607a      	str	r2, [r7, #4]
   1af38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1af3a:	2300      	movs	r3, #0
   1af3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1af3e:	68fb      	ldr	r3, [r7, #12]
   1af40:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1af42:	6a3b      	ldr	r3, [r7, #32]
   1af44:	2b00      	cmp	r3, #0
   1af46:	d100      	bne.n	1af4a <xQueueGenericSend+0x1e>
   1af48:	e7fe      	b.n	1af48 <xQueueGenericSend+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1af4a:	68bb      	ldr	r3, [r7, #8]
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d103      	bne.n	1af58 <xQueueGenericSend+0x2c>
   1af50:	6a3b      	ldr	r3, [r7, #32]
   1af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1af54:	2b00      	cmp	r3, #0
   1af56:	d101      	bne.n	1af5c <xQueueGenericSend+0x30>
   1af58:	2301      	movs	r3, #1
   1af5a:	e000      	b.n	1af5e <xQueueGenericSend+0x32>
   1af5c:	2300      	movs	r3, #0
   1af5e:	2b00      	cmp	r3, #0
   1af60:	d100      	bne.n	1af64 <xQueueGenericSend+0x38>
   1af62:	e7fe      	b.n	1af62 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1af64:	683b      	ldr	r3, [r7, #0]
   1af66:	2b02      	cmp	r3, #2
   1af68:	d103      	bne.n	1af72 <xQueueGenericSend+0x46>
   1af6a:	6a3b      	ldr	r3, [r7, #32]
   1af6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1af6e:	2b01      	cmp	r3, #1
   1af70:	d101      	bne.n	1af76 <xQueueGenericSend+0x4a>
   1af72:	2301      	movs	r3, #1
   1af74:	e000      	b.n	1af78 <xQueueGenericSend+0x4c>
   1af76:	2300      	movs	r3, #0
   1af78:	2b00      	cmp	r3, #0
   1af7a:	d100      	bne.n	1af7e <xQueueGenericSend+0x52>
   1af7c:	e7fe      	b.n	1af7c <xQueueGenericSend+0x50>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1af7e:	f001 f959 	bl	1c234 <xTaskGetSchedulerState>
   1af82:	4603      	mov	r3, r0
   1af84:	2b00      	cmp	r3, #0
   1af86:	d102      	bne.n	1af8e <xQueueGenericSend+0x62>
   1af88:	687b      	ldr	r3, [r7, #4]
   1af8a:	2b00      	cmp	r3, #0
   1af8c:	d101      	bne.n	1af92 <xQueueGenericSend+0x66>
   1af8e:	2301      	movs	r3, #1
   1af90:	e000      	b.n	1af94 <xQueueGenericSend+0x68>
   1af92:	2300      	movs	r3, #0
   1af94:	2b00      	cmp	r3, #0
   1af96:	d100      	bne.n	1af9a <xQueueGenericSend+0x6e>
   1af98:	e7fe      	b.n	1af98 <xQueueGenericSend+0x6c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1af9a:	f7fe fc85 	bl	198a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1af9e:	6a3b      	ldr	r3, [r7, #32]
   1afa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1afa2:	6a3b      	ldr	r3, [r7, #32]
   1afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1afa6:	429a      	cmp	r2, r3
   1afa8:	d302      	bcc.n	1afb0 <xQueueGenericSend+0x84>
   1afaa:	683b      	ldr	r3, [r7, #0]
   1afac:	2b02      	cmp	r3, #2
   1afae:	d129      	bne.n	1b004 <xQueueGenericSend+0xd8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1afb0:	683a      	ldr	r2, [r7, #0]
   1afb2:	68b9      	ldr	r1, [r7, #8]
   1afb4:	6a38      	ldr	r0, [r7, #32]
   1afb6:	f000 f9cb 	bl	1b350 <prvCopyDataToQueue>
   1afba:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1afbc:	6a3b      	ldr	r3, [r7, #32]
   1afbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1afc0:	2b00      	cmp	r3, #0
   1afc2:	d010      	beq.n	1afe6 <xQueueGenericSend+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1afc4:	6a3b      	ldr	r3, [r7, #32]
   1afc6:	3324      	adds	r3, #36	; 0x24
   1afc8:	4618      	mov	r0, r3
   1afca:	f000 ff53 	bl	1be74 <xTaskRemoveFromEventList>
   1afce:	4603      	mov	r3, r0
   1afd0:	2b00      	cmp	r3, #0
   1afd2:	d013      	beq.n	1affc <xQueueGenericSend+0xd0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   1afd4:	4b3f      	ldr	r3, [pc, #252]	; (1b0d4 <xQueueGenericSend+0x1a8>)
   1afd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1afda:	601a      	str	r2, [r3, #0]
   1afdc:	f3bf 8f4f 	dsb	sy
   1afe0:	f3bf 8f6f 	isb	sy
   1afe4:	e00a      	b.n	1affc <xQueueGenericSend+0xd0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   1afe6:	69fb      	ldr	r3, [r7, #28]
   1afe8:	2b00      	cmp	r3, #0
   1afea:	d007      	beq.n	1affc <xQueueGenericSend+0xd0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   1afec:	4b39      	ldr	r3, [pc, #228]	; (1b0d4 <xQueueGenericSend+0x1a8>)
   1afee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1aff2:	601a      	str	r2, [r3, #0]
   1aff4:	f3bf 8f4f 	dsb	sy
   1aff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1affc:	f7fe fc7a 	bl	198f4 <vPortExitCritical>
				return pdPASS;
   1b000:	2301      	movs	r3, #1
   1b002:	e063      	b.n	1b0cc <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b004:	687b      	ldr	r3, [r7, #4]
   1b006:	2b00      	cmp	r3, #0
   1b008:	d103      	bne.n	1b012 <xQueueGenericSend+0xe6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b00a:	f7fe fc73 	bl	198f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   1b00e:	2300      	movs	r3, #0
   1b010:	e05c      	b.n	1b0cc <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b014:	2b00      	cmp	r3, #0
   1b016:	d106      	bne.n	1b026 <xQueueGenericSend+0xfa>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b018:	f107 0314 	add.w	r3, r7, #20
   1b01c:	4618      	mov	r0, r3
   1b01e:	f000 ffd3 	bl	1bfc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1b022:	2301      	movs	r3, #1
   1b024:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b026:	f7fe fc65 	bl	198f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b02a:	f000 fc9f 	bl	1b96c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1b02e:	f7fe fc3b 	bl	198a8 <vPortEnterCritical>
   1b032:	6a3b      	ldr	r3, [r7, #32]
   1b034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1b038:	b25b      	sxtb	r3, r3
   1b03a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b03e:	d103      	bne.n	1b048 <xQueueGenericSend+0x11c>
   1b040:	6a3b      	ldr	r3, [r7, #32]
   1b042:	2200      	movs	r2, #0
   1b044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1b048:	6a3b      	ldr	r3, [r7, #32]
   1b04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1b04e:	b25b      	sxtb	r3, r3
   1b050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b054:	d103      	bne.n	1b05e <xQueueGenericSend+0x132>
   1b056:	6a3b      	ldr	r3, [r7, #32]
   1b058:	2200      	movs	r2, #0
   1b05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1b05e:	f7fe fc49 	bl	198f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b062:	1d3a      	adds	r2, r7, #4
   1b064:	f107 0314 	add.w	r3, r7, #20
   1b068:	4611      	mov	r1, r2
   1b06a:	4618      	mov	r0, r3
   1b06c:	f000 ffc2 	bl	1bff4 <xTaskCheckForTimeOut>
   1b070:	4603      	mov	r3, r0
   1b072:	2b00      	cmp	r3, #0
   1b074:	d124      	bne.n	1b0c0 <xQueueGenericSend+0x194>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b076:	6a38      	ldr	r0, [r7, #32]
   1b078:	f000 fa54 	bl	1b524 <prvIsQueueFull>
   1b07c:	4603      	mov	r3, r0
   1b07e:	2b00      	cmp	r3, #0
   1b080:	d018      	beq.n	1b0b4 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b082:	6a3b      	ldr	r3, [r7, #32]
   1b084:	3310      	adds	r3, #16
   1b086:	687a      	ldr	r2, [r7, #4]
   1b088:	4611      	mov	r1, r2
   1b08a:	4618      	mov	r0, r3
   1b08c:	f000 fe8e 	bl	1bdac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b090:	6a38      	ldr	r0, [r7, #32]
   1b092:	f000 f9df 	bl	1b454 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b096:	f000 fcaf 	bl	1b9f8 <xTaskResumeAll>
   1b09a:	4603      	mov	r3, r0
   1b09c:	2b00      	cmp	r3, #0
   1b09e:	f47f af7c 	bne.w	1af9a <xQueueGenericSend+0x6e>
				{
					portYIELD_WITHIN_API();
   1b0a2:	4b0c      	ldr	r3, [pc, #48]	; (1b0d4 <xQueueGenericSend+0x1a8>)
   1b0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b0a8:	601a      	str	r2, [r3, #0]
   1b0aa:	f3bf 8f4f 	dsb	sy
   1b0ae:	f3bf 8f6f 	isb	sy
   1b0b2:	e772      	b.n	1af9a <xQueueGenericSend+0x6e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b0b4:	6a38      	ldr	r0, [r7, #32]
   1b0b6:	f000 f9cd 	bl	1b454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1b0ba:	f000 fc9d 	bl	1b9f8 <xTaskResumeAll>
   1b0be:	e76c      	b.n	1af9a <xQueueGenericSend+0x6e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b0c0:	6a38      	ldr	r0, [r7, #32]
   1b0c2:	f000 f9c7 	bl	1b454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1b0c6:	f000 fc97 	bl	1b9f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   1b0ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
   1b0cc:	4618      	mov	r0, r3
   1b0ce:	3728      	adds	r7, #40	; 0x28
   1b0d0:	46bd      	mov	sp, r7
   1b0d2:	bd80      	pop	{r7, pc}
   1b0d4:	e000ed04 	.word	0xe000ed04

0001b0d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b0d8:	b580      	push	{r7, lr}
   1b0da:	b08c      	sub	sp, #48	; 0x30
   1b0dc:	af00      	add	r7, sp, #0
   1b0de:	60f8      	str	r0, [r7, #12]
   1b0e0:	60b9      	str	r1, [r7, #8]
   1b0e2:	607a      	str	r2, [r7, #4]
   1b0e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
   1b0e6:	68fb      	ldr	r3, [r7, #12]
   1b0e8:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
   1b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0ec:	2b00      	cmp	r3, #0
   1b0ee:	d100      	bne.n	1b0f2 <xQueueGenericSendFromISR+0x1a>
   1b0f0:	e7fe      	b.n	1b0f0 <xQueueGenericSendFromISR+0x18>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b0f2:	68bb      	ldr	r3, [r7, #8]
   1b0f4:	2b00      	cmp	r3, #0
   1b0f6:	d103      	bne.n	1b100 <xQueueGenericSendFromISR+0x28>
   1b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b0fc:	2b00      	cmp	r3, #0
   1b0fe:	d101      	bne.n	1b104 <xQueueGenericSendFromISR+0x2c>
   1b100:	2301      	movs	r3, #1
   1b102:	e000      	b.n	1b106 <xQueueGenericSendFromISR+0x2e>
   1b104:	2300      	movs	r3, #0
   1b106:	2b00      	cmp	r3, #0
   1b108:	d100      	bne.n	1b10c <xQueueGenericSendFromISR+0x34>
   1b10a:	e7fe      	b.n	1b10a <xQueueGenericSendFromISR+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b10c:	683b      	ldr	r3, [r7, #0]
   1b10e:	2b02      	cmp	r3, #2
   1b110:	d103      	bne.n	1b11a <xQueueGenericSendFromISR+0x42>
   1b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b116:	2b01      	cmp	r3, #1
   1b118:	d101      	bne.n	1b11e <xQueueGenericSendFromISR+0x46>
   1b11a:	2301      	movs	r3, #1
   1b11c:	e000      	b.n	1b120 <xQueueGenericSendFromISR+0x48>
   1b11e:	2300      	movs	r3, #0
   1b120:	2b00      	cmp	r3, #0
   1b122:	d100      	bne.n	1b126 <xQueueGenericSendFromISR+0x4e>
   1b124:	e7fe      	b.n	1b124 <xQueueGenericSendFromISR+0x4c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   1b126:	f7fe fc61 	bl	199ec <vPortValidateInterruptPriority>
	__asm volatile
   1b12a:	f3ef 8211 	mrs	r2, BASEPRI
   1b12e:	f04f 0380 	mov.w	r3, #128	; 0x80
   1b132:	f383 8811 	msr	BASEPRI, r3
   1b136:	f3bf 8f6f 	isb	sy
   1b13a:	f3bf 8f4f 	dsb	sy
   1b13e:	61fa      	str	r2, [r7, #28]
   1b140:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
   1b142:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b144:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b14e:	429a      	cmp	r2, r3
   1b150:	d302      	bcc.n	1b158 <xQueueGenericSendFromISR+0x80>
   1b152:	683b      	ldr	r3, [r7, #0]
   1b154:	2b02      	cmp	r3, #2
   1b156:	d12c      	bne.n	1b1b2 <xQueueGenericSendFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b15a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1b15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b162:	683a      	ldr	r2, [r7, #0]
   1b164:	68b9      	ldr	r1, [r7, #8]
   1b166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1b168:	f000 f8f2 	bl	1b350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b16c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
   1b170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b174:	d112      	bne.n	1b19c <xQueueGenericSendFromISR+0xc4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	d016      	beq.n	1b1ac <xQueueGenericSendFromISR+0xd4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b180:	3324      	adds	r3, #36	; 0x24
   1b182:	4618      	mov	r0, r3
   1b184:	f000 fe76 	bl	1be74 <xTaskRemoveFromEventList>
   1b188:	4603      	mov	r3, r0
   1b18a:	2b00      	cmp	r3, #0
   1b18c:	d00e      	beq.n	1b1ac <xQueueGenericSendFromISR+0xd4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b18e:	687b      	ldr	r3, [r7, #4]
   1b190:	2b00      	cmp	r3, #0
   1b192:	d00b      	beq.n	1b1ac <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b194:	687b      	ldr	r3, [r7, #4]
   1b196:	2201      	movs	r2, #1
   1b198:	601a      	str	r2, [r3, #0]
   1b19a:	e007      	b.n	1b1ac <xQueueGenericSendFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b19c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1b1a0:	3301      	adds	r3, #1
   1b1a2:	b2db      	uxtb	r3, r3
   1b1a4:	b25a      	sxtb	r2, r3
   1b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b1a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
   1b1ac:	2301      	movs	r3, #1
   1b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
   1b1b0:	e001      	b.n	1b1b6 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   1b1b2:	2300      	movs	r3, #0
   1b1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b1b8:	617b      	str	r3, [r7, #20]
	__asm volatile
   1b1ba:	697b      	ldr	r3, [r7, #20]
   1b1bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   1b1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1b1c2:	4618      	mov	r0, r3
   1b1c4:	3730      	adds	r7, #48	; 0x30
   1b1c6:	46bd      	mov	sp, r7
   1b1c8:	bd80      	pop	{r7, pc}
	...

0001b1cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b1cc:	b580      	push	{r7, lr}
   1b1ce:	b08a      	sub	sp, #40	; 0x28
   1b1d0:	af00      	add	r7, sp, #0
   1b1d2:	60f8      	str	r0, [r7, #12]
   1b1d4:	60b9      	str	r1, [r7, #8]
   1b1d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b1d8:	2300      	movs	r3, #0
   1b1da:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
   1b1dc:	68fb      	ldr	r3, [r7, #12]
   1b1de:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b1e0:	6a3b      	ldr	r3, [r7, #32]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d100      	bne.n	1b1e8 <xQueueReceive+0x1c>
   1b1e6:	e7fe      	b.n	1b1e6 <xQueueReceive+0x1a>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b1e8:	68bb      	ldr	r3, [r7, #8]
   1b1ea:	2b00      	cmp	r3, #0
   1b1ec:	d103      	bne.n	1b1f6 <xQueueReceive+0x2a>
   1b1ee:	6a3b      	ldr	r3, [r7, #32]
   1b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1f2:	2b00      	cmp	r3, #0
   1b1f4:	d101      	bne.n	1b1fa <xQueueReceive+0x2e>
   1b1f6:	2301      	movs	r3, #1
   1b1f8:	e000      	b.n	1b1fc <xQueueReceive+0x30>
   1b1fa:	2300      	movs	r3, #0
   1b1fc:	2b00      	cmp	r3, #0
   1b1fe:	d100      	bne.n	1b202 <xQueueReceive+0x36>
   1b200:	e7fe      	b.n	1b200 <xQueueReceive+0x34>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b202:	f001 f817 	bl	1c234 <xTaskGetSchedulerState>
   1b206:	4603      	mov	r3, r0
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d102      	bne.n	1b212 <xQueueReceive+0x46>
   1b20c:	687b      	ldr	r3, [r7, #4]
   1b20e:	2b00      	cmp	r3, #0
   1b210:	d101      	bne.n	1b216 <xQueueReceive+0x4a>
   1b212:	2301      	movs	r3, #1
   1b214:	e000      	b.n	1b218 <xQueueReceive+0x4c>
   1b216:	2300      	movs	r3, #0
   1b218:	2b00      	cmp	r3, #0
   1b21a:	d100      	bne.n	1b21e <xQueueReceive+0x52>
   1b21c:	e7fe      	b.n	1b21c <xQueueReceive+0x50>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b21e:	f7fe fb43 	bl	198a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b222:	6a3b      	ldr	r3, [r7, #32]
   1b224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b226:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b228:	69fb      	ldr	r3, [r7, #28]
   1b22a:	2b00      	cmp	r3, #0
   1b22c:	d01f      	beq.n	1b26e <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b22e:	68b9      	ldr	r1, [r7, #8]
   1b230:	6a38      	ldr	r0, [r7, #32]
   1b232:	f000 f8e9 	bl	1b408 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b236:	69fb      	ldr	r3, [r7, #28]
   1b238:	1e5a      	subs	r2, r3, #1
   1b23a:	6a3b      	ldr	r3, [r7, #32]
   1b23c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b23e:	6a3b      	ldr	r3, [r7, #32]
   1b240:	691b      	ldr	r3, [r3, #16]
   1b242:	2b00      	cmp	r3, #0
   1b244:	d00f      	beq.n	1b266 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b246:	6a3b      	ldr	r3, [r7, #32]
   1b248:	3310      	adds	r3, #16
   1b24a:	4618      	mov	r0, r3
   1b24c:	f000 fe12 	bl	1be74 <xTaskRemoveFromEventList>
   1b250:	4603      	mov	r3, r0
   1b252:	2b00      	cmp	r3, #0
   1b254:	d007      	beq.n	1b266 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b256:	4b3d      	ldr	r3, [pc, #244]	; (1b34c <xQueueReceive+0x180>)
   1b258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b25c:	601a      	str	r2, [r3, #0]
   1b25e:	f3bf 8f4f 	dsb	sy
   1b262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b266:	f7fe fb45 	bl	198f4 <vPortExitCritical>
				return pdPASS;
   1b26a:	2301      	movs	r3, #1
   1b26c:	e069      	b.n	1b342 <xQueueReceive+0x176>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b26e:	687b      	ldr	r3, [r7, #4]
   1b270:	2b00      	cmp	r3, #0
   1b272:	d103      	bne.n	1b27c <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b274:	f7fe fb3e 	bl	198f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   1b278:	2300      	movs	r3, #0
   1b27a:	e062      	b.n	1b342 <xQueueReceive+0x176>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b27e:	2b00      	cmp	r3, #0
   1b280:	d106      	bne.n	1b290 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b282:	f107 0314 	add.w	r3, r7, #20
   1b286:	4618      	mov	r0, r3
   1b288:	f000 fe9e 	bl	1bfc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   1b28c:	2301      	movs	r3, #1
   1b28e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b290:	f7fe fb30 	bl	198f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b294:	f000 fb6a 	bl	1b96c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   1b298:	f7fe fb06 	bl	198a8 <vPortEnterCritical>
   1b29c:	6a3b      	ldr	r3, [r7, #32]
   1b29e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1b2a2:	b25b      	sxtb	r3, r3
   1b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b2a8:	d103      	bne.n	1b2b2 <xQueueReceive+0xe6>
   1b2aa:	6a3b      	ldr	r3, [r7, #32]
   1b2ac:	2200      	movs	r2, #0
   1b2ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1b2b8:	b25b      	sxtb	r3, r3
   1b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b2be:	d103      	bne.n	1b2c8 <xQueueReceive+0xfc>
   1b2c0:	6a3b      	ldr	r3, [r7, #32]
   1b2c2:	2200      	movs	r2, #0
   1b2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1b2c8:	f7fe fb14 	bl	198f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b2cc:	1d3a      	adds	r2, r7, #4
   1b2ce:	f107 0314 	add.w	r3, r7, #20
   1b2d2:	4611      	mov	r1, r2
   1b2d4:	4618      	mov	r0, r3
   1b2d6:	f000 fe8d 	bl	1bff4 <xTaskCheckForTimeOut>
   1b2da:	4603      	mov	r3, r0
   1b2dc:	2b00      	cmp	r3, #0
   1b2de:	d123      	bne.n	1b328 <xQueueReceive+0x15c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b2e0:	6a38      	ldr	r0, [r7, #32]
   1b2e2:	f000 f909 	bl	1b4f8 <prvIsQueueEmpty>
   1b2e6:	4603      	mov	r3, r0
   1b2e8:	2b00      	cmp	r3, #0
   1b2ea:	d017      	beq.n	1b31c <xQueueReceive+0x150>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b2ec:	6a3b      	ldr	r3, [r7, #32]
   1b2ee:	3324      	adds	r3, #36	; 0x24
   1b2f0:	687a      	ldr	r2, [r7, #4]
   1b2f2:	4611      	mov	r1, r2
   1b2f4:	4618      	mov	r0, r3
   1b2f6:	f000 fd59 	bl	1bdac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   1b2fa:	6a38      	ldr	r0, [r7, #32]
   1b2fc:	f000 f8aa 	bl	1b454 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   1b300:	f000 fb7a 	bl	1b9f8 <xTaskResumeAll>
   1b304:	4603      	mov	r3, r0
   1b306:	2b00      	cmp	r3, #0
   1b308:	d189      	bne.n	1b21e <xQueueReceive+0x52>
				{
					portYIELD_WITHIN_API();
   1b30a:	4b10      	ldr	r3, [pc, #64]	; (1b34c <xQueueReceive+0x180>)
   1b30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b310:	601a      	str	r2, [r3, #0]
   1b312:	f3bf 8f4f 	dsb	sy
   1b316:	f3bf 8f6f 	isb	sy
   1b31a:	e780      	b.n	1b21e <xQueueReceive+0x52>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b31c:	6a38      	ldr	r0, [r7, #32]
   1b31e:	f000 f899 	bl	1b454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   1b322:	f000 fb69 	bl	1b9f8 <xTaskResumeAll>
   1b326:	e77a      	b.n	1b21e <xQueueReceive+0x52>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b328:	6a38      	ldr	r0, [r7, #32]
   1b32a:	f000 f893 	bl	1b454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   1b32e:	f000 fb63 	bl	1b9f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b332:	6a38      	ldr	r0, [r7, #32]
   1b334:	f000 f8e0 	bl	1b4f8 <prvIsQueueEmpty>
   1b338:	4603      	mov	r3, r0
   1b33a:	2b00      	cmp	r3, #0
   1b33c:	f43f af6f 	beq.w	1b21e <xQueueReceive+0x52>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   1b340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
   1b342:	4618      	mov	r0, r3
   1b344:	3728      	adds	r7, #40	; 0x28
   1b346:	46bd      	mov	sp, r7
   1b348:	bd80      	pop	{r7, pc}
   1b34a:	bf00      	nop
   1b34c:	e000ed04 	.word	0xe000ed04

0001b350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b350:	b580      	push	{r7, lr}
   1b352:	b086      	sub	sp, #24
   1b354:	af00      	add	r7, sp, #0
   1b356:	60f8      	str	r0, [r7, #12]
   1b358:	60b9      	str	r1, [r7, #8]
   1b35a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b35c:	2300      	movs	r3, #0
   1b35e:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b360:	68fb      	ldr	r3, [r7, #12]
   1b362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b364:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b366:	68fb      	ldr	r3, [r7, #12]
   1b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d043      	beq.n	1b3f6 <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b36e:	687b      	ldr	r3, [r7, #4]
   1b370:	2b00      	cmp	r3, #0
   1b372:	d119      	bne.n	1b3a8 <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1b374:	68fb      	ldr	r3, [r7, #12]
   1b376:	6858      	ldr	r0, [r3, #4]
   1b378:	68fb      	ldr	r3, [r7, #12]
   1b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b37c:	461a      	mov	r2, r3
   1b37e:	68b9      	ldr	r1, [r7, #8]
   1b380:	f7f0 feee 	bl	c160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1b384:	68fb      	ldr	r3, [r7, #12]
   1b386:	685a      	ldr	r2, [r3, #4]
   1b388:	68fb      	ldr	r3, [r7, #12]
   1b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b38c:	441a      	add	r2, r3
   1b38e:	68fb      	ldr	r3, [r7, #12]
   1b390:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b392:	68fb      	ldr	r3, [r7, #12]
   1b394:	685a      	ldr	r2, [r3, #4]
   1b396:	68fb      	ldr	r3, [r7, #12]
   1b398:	689b      	ldr	r3, [r3, #8]
   1b39a:	429a      	cmp	r2, r3
   1b39c:	d32b      	bcc.n	1b3f6 <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b39e:	68fb      	ldr	r3, [r7, #12]
   1b3a0:	681a      	ldr	r2, [r3, #0]
   1b3a2:	68fb      	ldr	r3, [r7, #12]
   1b3a4:	605a      	str	r2, [r3, #4]
   1b3a6:	e026      	b.n	1b3f6 <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
   1b3a8:	68fb      	ldr	r3, [r7, #12]
   1b3aa:	68d8      	ldr	r0, [r3, #12]
   1b3ac:	68fb      	ldr	r3, [r7, #12]
   1b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3b0:	461a      	mov	r2, r3
   1b3b2:	68b9      	ldr	r1, [r7, #8]
   1b3b4:	f7f0 fed4 	bl	c160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
   1b3b8:	68fb      	ldr	r3, [r7, #12]
   1b3ba:	68da      	ldr	r2, [r3, #12]
   1b3bc:	68fb      	ldr	r3, [r7, #12]
   1b3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3c0:	425b      	negs	r3, r3
   1b3c2:	441a      	add	r2, r3
   1b3c4:	68fb      	ldr	r3, [r7, #12]
   1b3c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b3c8:	68fb      	ldr	r3, [r7, #12]
   1b3ca:	68da      	ldr	r2, [r3, #12]
   1b3cc:	68fb      	ldr	r3, [r7, #12]
   1b3ce:	681b      	ldr	r3, [r3, #0]
   1b3d0:	429a      	cmp	r2, r3
   1b3d2:	d207      	bcs.n	1b3e4 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
   1b3d4:	68fb      	ldr	r3, [r7, #12]
   1b3d6:	689a      	ldr	r2, [r3, #8]
   1b3d8:	68fb      	ldr	r3, [r7, #12]
   1b3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3dc:	425b      	negs	r3, r3
   1b3de:	441a      	add	r2, r3
   1b3e0:	68fb      	ldr	r3, [r7, #12]
   1b3e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b3e4:	687b      	ldr	r3, [r7, #4]
   1b3e6:	2b02      	cmp	r3, #2
   1b3e8:	d105      	bne.n	1b3f6 <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b3ea:	697b      	ldr	r3, [r7, #20]
   1b3ec:	2b00      	cmp	r3, #0
   1b3ee:	d002      	beq.n	1b3f6 <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b3f0:	697b      	ldr	r3, [r7, #20]
   1b3f2:	3b01      	subs	r3, #1
   1b3f4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b3f6:	697b      	ldr	r3, [r7, #20]
   1b3f8:	1c5a      	adds	r2, r3, #1
   1b3fa:	68fb      	ldr	r3, [r7, #12]
   1b3fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b3fe:	693b      	ldr	r3, [r7, #16]
}
   1b400:	4618      	mov	r0, r3
   1b402:	3718      	adds	r7, #24
   1b404:	46bd      	mov	sp, r7
   1b406:	bd80      	pop	{r7, pc}

0001b408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b408:	b580      	push	{r7, lr}
   1b40a:	b082      	sub	sp, #8
   1b40c:	af00      	add	r7, sp, #0
   1b40e:	6078      	str	r0, [r7, #4]
   1b410:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b412:	687b      	ldr	r3, [r7, #4]
   1b414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b416:	2b00      	cmp	r3, #0
   1b418:	d018      	beq.n	1b44c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
   1b41a:	687b      	ldr	r3, [r7, #4]
   1b41c:	68da      	ldr	r2, [r3, #12]
   1b41e:	687b      	ldr	r3, [r7, #4]
   1b420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b422:	441a      	add	r2, r3
   1b424:	687b      	ldr	r3, [r7, #4]
   1b426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b428:	687b      	ldr	r3, [r7, #4]
   1b42a:	68da      	ldr	r2, [r3, #12]
   1b42c:	687b      	ldr	r3, [r7, #4]
   1b42e:	689b      	ldr	r3, [r3, #8]
   1b430:	429a      	cmp	r2, r3
   1b432:	d303      	bcc.n	1b43c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
   1b434:	687b      	ldr	r3, [r7, #4]
   1b436:	681a      	ldr	r2, [r3, #0]
   1b438:	687b      	ldr	r3, [r7, #4]
   1b43a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
   1b43c:	687b      	ldr	r3, [r7, #4]
   1b43e:	68d9      	ldr	r1, [r3, #12]
   1b440:	687b      	ldr	r3, [r7, #4]
   1b442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b444:	461a      	mov	r2, r3
   1b446:	6838      	ldr	r0, [r7, #0]
   1b448:	f7f0 fe8a 	bl	c160 <memcpy>
	}
}
   1b44c:	bf00      	nop
   1b44e:	3708      	adds	r7, #8
   1b450:	46bd      	mov	sp, r7
   1b452:	bd80      	pop	{r7, pc}

0001b454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b454:	b580      	push	{r7, lr}
   1b456:	b084      	sub	sp, #16
   1b458:	af00      	add	r7, sp, #0
   1b45a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b45c:	f7fe fa24 	bl	198a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b460:	687b      	ldr	r3, [r7, #4]
   1b462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1b466:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b468:	e011      	b.n	1b48e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b46a:	687b      	ldr	r3, [r7, #4]
   1b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b46e:	2b00      	cmp	r3, #0
   1b470:	d012      	beq.n	1b498 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b472:	687b      	ldr	r3, [r7, #4]
   1b474:	3324      	adds	r3, #36	; 0x24
   1b476:	4618      	mov	r0, r3
   1b478:	f000 fcfc 	bl	1be74 <xTaskRemoveFromEventList>
   1b47c:	4603      	mov	r3, r0
   1b47e:	2b00      	cmp	r3, #0
   1b480:	d001      	beq.n	1b486 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
   1b482:	f000 fe05 	bl	1c090 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b486:	7bfb      	ldrb	r3, [r7, #15]
   1b488:	3b01      	subs	r3, #1
   1b48a:	b2db      	uxtb	r3, r3
   1b48c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
   1b492:	2b00      	cmp	r3, #0
   1b494:	dce9      	bgt.n	1b46a <prvUnlockQueue+0x16>
   1b496:	e000      	b.n	1b49a <prvUnlockQueue+0x46>
					break;
   1b498:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b49a:	687b      	ldr	r3, [r7, #4]
   1b49c:	22ff      	movs	r2, #255	; 0xff
   1b49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
   1b4a2:	f7fe fa27 	bl	198f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b4a6:	f7fe f9ff 	bl	198a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b4aa:	687b      	ldr	r3, [r7, #4]
   1b4ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1b4b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b4b2:	e011      	b.n	1b4d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b4b4:	687b      	ldr	r3, [r7, #4]
   1b4b6:	691b      	ldr	r3, [r3, #16]
   1b4b8:	2b00      	cmp	r3, #0
   1b4ba:	d012      	beq.n	1b4e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b4bc:	687b      	ldr	r3, [r7, #4]
   1b4be:	3310      	adds	r3, #16
   1b4c0:	4618      	mov	r0, r3
   1b4c2:	f000 fcd7 	bl	1be74 <xTaskRemoveFromEventList>
   1b4c6:	4603      	mov	r3, r0
   1b4c8:	2b00      	cmp	r3, #0
   1b4ca:	d001      	beq.n	1b4d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
   1b4cc:	f000 fde0 	bl	1c090 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b4d0:	7bbb      	ldrb	r3, [r7, #14]
   1b4d2:	3b01      	subs	r3, #1
   1b4d4:	b2db      	uxtb	r3, r3
   1b4d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b4d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
   1b4dc:	2b00      	cmp	r3, #0
   1b4de:	dce9      	bgt.n	1b4b4 <prvUnlockQueue+0x60>
   1b4e0:	e000      	b.n	1b4e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
   1b4e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b4e4:	687b      	ldr	r3, [r7, #4]
   1b4e6:	22ff      	movs	r2, #255	; 0xff
   1b4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   1b4ec:	f7fe fa02 	bl	198f4 <vPortExitCritical>
}
   1b4f0:	bf00      	nop
   1b4f2:	3710      	adds	r7, #16
   1b4f4:	46bd      	mov	sp, r7
   1b4f6:	bd80      	pop	{r7, pc}

0001b4f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b4f8:	b580      	push	{r7, lr}
   1b4fa:	b084      	sub	sp, #16
   1b4fc:	af00      	add	r7, sp, #0
   1b4fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b500:	f7fe f9d2 	bl	198a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b504:	687b      	ldr	r3, [r7, #4]
   1b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b508:	2b00      	cmp	r3, #0
   1b50a:	d102      	bne.n	1b512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b50c:	2301      	movs	r3, #1
   1b50e:	60fb      	str	r3, [r7, #12]
   1b510:	e001      	b.n	1b516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b512:	2300      	movs	r3, #0
   1b514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b516:	f7fe f9ed 	bl	198f4 <vPortExitCritical>

	return xReturn;
   1b51a:	68fb      	ldr	r3, [r7, #12]
}
   1b51c:	4618      	mov	r0, r3
   1b51e:	3710      	adds	r7, #16
   1b520:	46bd      	mov	sp, r7
   1b522:	bd80      	pop	{r7, pc}

0001b524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b524:	b580      	push	{r7, lr}
   1b526:	b084      	sub	sp, #16
   1b528:	af00      	add	r7, sp, #0
   1b52a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b52c:	f7fe f9bc 	bl	198a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b530:	687b      	ldr	r3, [r7, #4]
   1b532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b534:	687b      	ldr	r3, [r7, #4]
   1b536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b538:	429a      	cmp	r2, r3
   1b53a:	d102      	bne.n	1b542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b53c:	2301      	movs	r3, #1
   1b53e:	60fb      	str	r3, [r7, #12]
   1b540:	e001      	b.n	1b546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b542:	2300      	movs	r3, #0
   1b544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b546:	f7fe f9d5 	bl	198f4 <vPortExitCritical>

	return xReturn;
   1b54a:	68fb      	ldr	r3, [r7, #12]
}
   1b54c:	4618      	mov	r0, r3
   1b54e:	3710      	adds	r7, #16
   1b550:	46bd      	mov	sp, r7
   1b552:	bd80      	pop	{r7, pc}

0001b554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b554:	b580      	push	{r7, lr}
   1b556:	b086      	sub	sp, #24
   1b558:	af00      	add	r7, sp, #0
   1b55a:	60f8      	str	r0, [r7, #12]
   1b55c:	60b9      	str	r1, [r7, #8]
   1b55e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
   1b560:	68fb      	ldr	r3, [r7, #12]
   1b562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b564:	f7fe f9a0 	bl	198a8 <vPortEnterCritical>
   1b568:	697b      	ldr	r3, [r7, #20]
   1b56a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1b56e:	b25b      	sxtb	r3, r3
   1b570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b574:	d103      	bne.n	1b57e <vQueueWaitForMessageRestricted+0x2a>
   1b576:	697b      	ldr	r3, [r7, #20]
   1b578:	2200      	movs	r2, #0
   1b57a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1b57e:	697b      	ldr	r3, [r7, #20]
   1b580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   1b584:	b25b      	sxtb	r3, r3
   1b586:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b58a:	d103      	bne.n	1b594 <vQueueWaitForMessageRestricted+0x40>
   1b58c:	697b      	ldr	r3, [r7, #20]
   1b58e:	2200      	movs	r2, #0
   1b590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1b594:	f7fe f9ae 	bl	198f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b598:	697b      	ldr	r3, [r7, #20]
   1b59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b59c:	2b00      	cmp	r3, #0
   1b59e:	d106      	bne.n	1b5ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b5a0:	697b      	ldr	r3, [r7, #20]
   1b5a2:	3324      	adds	r3, #36	; 0x24
   1b5a4:	687a      	ldr	r2, [r7, #4]
   1b5a6:	68b9      	ldr	r1, [r7, #8]
   1b5a8:	4618      	mov	r0, r3
   1b5aa:	f000 fc41 	bl	1be30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b5ae:	6978      	ldr	r0, [r7, #20]
   1b5b0:	f7ff ff50 	bl	1b454 <prvUnlockQueue>
	}
   1b5b4:	bf00      	nop
   1b5b6:	3718      	adds	r7, #24
   1b5b8:	46bd      	mov	sp, r7
   1b5ba:	bd80      	pop	{r7, pc}

0001b5bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b5bc:	b580      	push	{r7, lr}
   1b5be:	b08c      	sub	sp, #48	; 0x30
   1b5c0:	af04      	add	r7, sp, #16
   1b5c2:	60f8      	str	r0, [r7, #12]
   1b5c4:	60b9      	str	r1, [r7, #8]
   1b5c6:	603b      	str	r3, [r7, #0]
   1b5c8:	4613      	mov	r3, r2
   1b5ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
   1b5cc:	88fb      	ldrh	r3, [r7, #6]
   1b5ce:	009b      	lsls	r3, r3, #2
   1b5d0:	4618      	mov	r0, r3
   1b5d2:	f7ff f8ed 	bl	1a7b0 <pvPortMalloc>
   1b5d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
   1b5d8:	697b      	ldr	r3, [r7, #20]
   1b5da:	2b00      	cmp	r3, #0
   1b5dc:	d00e      	beq.n	1b5fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
   1b5de:	204c      	movs	r0, #76	; 0x4c
   1b5e0:	f7ff f8e6 	bl	1a7b0 <pvPortMalloc>
   1b5e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
   1b5e6:	69fb      	ldr	r3, [r7, #28]
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d003      	beq.n	1b5f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1b5ec:	69fb      	ldr	r3, [r7, #28]
   1b5ee:	697a      	ldr	r2, [r7, #20]
   1b5f0:	631a      	str	r2, [r3, #48]	; 0x30
   1b5f2:	e005      	b.n	1b600 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1b5f4:	6978      	ldr	r0, [r7, #20]
   1b5f6:	f7ff f96d 	bl	1a8d4 <vPortFree>
   1b5fa:	e001      	b.n	1b600 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1b600:	69fb      	ldr	r3, [r7, #28]
   1b602:	2b00      	cmp	r3, #0
   1b604:	d013      	beq.n	1b62e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1b606:	88fa      	ldrh	r2, [r7, #6]
   1b608:	2300      	movs	r3, #0
   1b60a:	9303      	str	r3, [sp, #12]
   1b60c:	69fb      	ldr	r3, [r7, #28]
   1b60e:	9302      	str	r3, [sp, #8]
   1b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1b612:	9301      	str	r3, [sp, #4]
   1b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b616:	9300      	str	r3, [sp, #0]
   1b618:	683b      	ldr	r3, [r7, #0]
   1b61a:	68b9      	ldr	r1, [r7, #8]
   1b61c:	68f8      	ldr	r0, [r7, #12]
   1b61e:	f000 f80e 	bl	1b63e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
   1b622:	69f8      	ldr	r0, [r7, #28]
   1b624:	f000 f886 	bl	1b734 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
   1b628:	2301      	movs	r3, #1
   1b62a:	61bb      	str	r3, [r7, #24]
   1b62c:	e002      	b.n	1b634 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1b62e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b632:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1b634:	69bb      	ldr	r3, [r7, #24]
	}
   1b636:	4618      	mov	r0, r3
   1b638:	3720      	adds	r7, #32
   1b63a:	46bd      	mov	sp, r7
   1b63c:	bd80      	pop	{r7, pc}

0001b63e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1b63e:	b580      	push	{r7, lr}
   1b640:	b086      	sub	sp, #24
   1b642:	af00      	add	r7, sp, #0
   1b644:	60f8      	str	r0, [r7, #12]
   1b646:	60b9      	str	r1, [r7, #8]
   1b648:	607a      	str	r2, [r7, #4]
   1b64a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
   1b64c:	68bb      	ldr	r3, [r7, #8]
   1b64e:	2b00      	cmp	r3, #0
   1b650:	d100      	bne.n	1b654 <prvInitialiseNewTask+0x16>
   1b652:	e7fe      	b.n	1b652 <prvInitialiseNewTask+0x14>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b656:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b658:	687b      	ldr	r3, [r7, #4]
   1b65a:	009b      	lsls	r3, r3, #2
   1b65c:	461a      	mov	r2, r3
   1b65e:	21a5      	movs	r1, #165	; 0xa5
   1b660:	f7f0 fe7c 	bl	c35c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
   1b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b668:	687b      	ldr	r3, [r7, #4]
   1b66a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b66e:	3b01      	subs	r3, #1
   1b670:	009b      	lsls	r3, r3, #2
   1b672:	4413      	add	r3, r2
   1b674:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
   1b676:	693b      	ldr	r3, [r7, #16]
   1b678:	f023 0307 	bic.w	r3, r3, #7
   1b67c:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1b67e:	693b      	ldr	r3, [r7, #16]
   1b680:	f003 0307 	and.w	r3, r3, #7
   1b684:	2b00      	cmp	r3, #0
   1b686:	d000      	beq.n	1b68a <prvInitialiseNewTask+0x4c>
   1b688:	e7fe      	b.n	1b688 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b68a:	2300      	movs	r3, #0
   1b68c:	617b      	str	r3, [r7, #20]
   1b68e:	e012      	b.n	1b6b6 <prvInitialiseNewTask+0x78>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1b690:	68ba      	ldr	r2, [r7, #8]
   1b692:	697b      	ldr	r3, [r7, #20]
   1b694:	4413      	add	r3, r2
   1b696:	7819      	ldrb	r1, [r3, #0]
   1b698:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b69a:	697b      	ldr	r3, [r7, #20]
   1b69c:	4413      	add	r3, r2
   1b69e:	3334      	adds	r3, #52	; 0x34
   1b6a0:	460a      	mov	r2, r1
   1b6a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
   1b6a4:	68ba      	ldr	r2, [r7, #8]
   1b6a6:	697b      	ldr	r3, [r7, #20]
   1b6a8:	4413      	add	r3, r2
   1b6aa:	781b      	ldrb	r3, [r3, #0]
   1b6ac:	2b00      	cmp	r3, #0
   1b6ae:	d006      	beq.n	1b6be <prvInitialiseNewTask+0x80>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b6b0:	697b      	ldr	r3, [r7, #20]
   1b6b2:	3301      	adds	r3, #1
   1b6b4:	617b      	str	r3, [r7, #20]
   1b6b6:	697b      	ldr	r3, [r7, #20]
   1b6b8:	2b0f      	cmp	r3, #15
   1b6ba:	d9e9      	bls.n	1b690 <prvInitialiseNewTask+0x52>
   1b6bc:	e000      	b.n	1b6c0 <prvInitialiseNewTask+0x82>
		{
			break;
   1b6be:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6c2:	2200      	movs	r2, #0
   1b6c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1b6c8:	6a3b      	ldr	r3, [r7, #32]
   1b6ca:	2b03      	cmp	r3, #3
   1b6cc:	d901      	bls.n	1b6d2 <prvInitialiseNewTask+0x94>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1b6ce:	2303      	movs	r3, #3
   1b6d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6d4:	6a3a      	ldr	r2, [r7, #32]
   1b6d6:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6da:	3304      	adds	r3, #4
   1b6dc:	4618      	mov	r0, r3
   1b6de:	f7ff fae1 	bl	1aca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6e4:	3318      	adds	r3, #24
   1b6e6:	4618      	mov	r0, r3
   1b6e8:	f7ff fadc 	bl	1aca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b6f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b6f2:	6a3b      	ldr	r3, [r7, #32]
   1b6f4:	f1c3 0204 	rsb	r2, r3, #4
   1b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b6fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b700:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b704:	2200      	movs	r2, #0
   1b706:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b70a:	2200      	movs	r2, #0
   1b70c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1b710:	683a      	ldr	r2, [r7, #0]
   1b712:	68f9      	ldr	r1, [r7, #12]
   1b714:	6938      	ldr	r0, [r7, #16]
   1b716:	f7fd ffc3 	bl	196a0 <pxPortInitialiseStack>
   1b71a:	4602      	mov	r2, r0
   1b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b71e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
   1b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b722:	2b00      	cmp	r3, #0
   1b724:	d002      	beq.n	1b72c <prvInitialiseNewTask+0xee>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b728:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b72a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b72c:	bf00      	nop
   1b72e:	3718      	adds	r7, #24
   1b730:	46bd      	mov	sp, r7
   1b732:	bd80      	pop	{r7, pc}

0001b734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1b734:	b580      	push	{r7, lr}
   1b736:	b082      	sub	sp, #8
   1b738:	af00      	add	r7, sp, #0
   1b73a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1b73c:	f7fe f8b4 	bl	198a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
   1b740:	4b2b      	ldr	r3, [pc, #172]	; (1b7f0 <prvAddNewTaskToReadyList+0xbc>)
   1b742:	681b      	ldr	r3, [r3, #0]
   1b744:	3301      	adds	r3, #1
   1b746:	4a2a      	ldr	r2, [pc, #168]	; (1b7f0 <prvAddNewTaskToReadyList+0xbc>)
   1b748:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
   1b74a:	4b2a      	ldr	r3, [pc, #168]	; (1b7f4 <prvAddNewTaskToReadyList+0xc0>)
   1b74c:	681b      	ldr	r3, [r3, #0]
   1b74e:	2b00      	cmp	r3, #0
   1b750:	d109      	bne.n	1b766 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b752:	4a28      	ldr	r2, [pc, #160]	; (1b7f4 <prvAddNewTaskToReadyList+0xc0>)
   1b754:	687b      	ldr	r3, [r7, #4]
   1b756:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b758:	4b25      	ldr	r3, [pc, #148]	; (1b7f0 <prvAddNewTaskToReadyList+0xbc>)
   1b75a:	681b      	ldr	r3, [r3, #0]
   1b75c:	2b01      	cmp	r3, #1
   1b75e:	d110      	bne.n	1b782 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b760:	f000 fd06 	bl	1c170 <prvInitialiseTaskLists>
   1b764:	e00d      	b.n	1b782 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b766:	4b24      	ldr	r3, [pc, #144]	; (1b7f8 <prvAddNewTaskToReadyList+0xc4>)
   1b768:	681b      	ldr	r3, [r3, #0]
   1b76a:	2b00      	cmp	r3, #0
   1b76c:	d109      	bne.n	1b782 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b76e:	4b21      	ldr	r3, [pc, #132]	; (1b7f4 <prvAddNewTaskToReadyList+0xc0>)
   1b770:	681b      	ldr	r3, [r3, #0]
   1b772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b774:	687b      	ldr	r3, [r7, #4]
   1b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b778:	429a      	cmp	r2, r3
   1b77a:	d802      	bhi.n	1b782 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b77c:	4a1d      	ldr	r2, [pc, #116]	; (1b7f4 <prvAddNewTaskToReadyList+0xc0>)
   1b77e:	687b      	ldr	r3, [r7, #4]
   1b780:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b782:	4b1e      	ldr	r3, [pc, #120]	; (1b7fc <prvAddNewTaskToReadyList+0xc8>)
   1b784:	681b      	ldr	r3, [r3, #0]
   1b786:	3301      	adds	r3, #1
   1b788:	4a1c      	ldr	r2, [pc, #112]	; (1b7fc <prvAddNewTaskToReadyList+0xc8>)
   1b78a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   1b78c:	687b      	ldr	r3, [r7, #4]
   1b78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b790:	4b1b      	ldr	r3, [pc, #108]	; (1b800 <prvAddNewTaskToReadyList+0xcc>)
   1b792:	681b      	ldr	r3, [r3, #0]
   1b794:	429a      	cmp	r2, r3
   1b796:	d903      	bls.n	1b7a0 <prvAddNewTaskToReadyList+0x6c>
   1b798:	687b      	ldr	r3, [r7, #4]
   1b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b79c:	4a18      	ldr	r2, [pc, #96]	; (1b800 <prvAddNewTaskToReadyList+0xcc>)
   1b79e:	6013      	str	r3, [r2, #0]
   1b7a0:	687b      	ldr	r3, [r7, #4]
   1b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7a4:	4613      	mov	r3, r2
   1b7a6:	009b      	lsls	r3, r3, #2
   1b7a8:	4413      	add	r3, r2
   1b7aa:	009b      	lsls	r3, r3, #2
   1b7ac:	4a15      	ldr	r2, [pc, #84]	; (1b804 <prvAddNewTaskToReadyList+0xd0>)
   1b7ae:	441a      	add	r2, r3
   1b7b0:	687b      	ldr	r3, [r7, #4]
   1b7b2:	3304      	adds	r3, #4
   1b7b4:	4619      	mov	r1, r3
   1b7b6:	4610      	mov	r0, r2
   1b7b8:	f7ff fa81 	bl	1acbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b7bc:	f7fe f89a 	bl	198f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
   1b7c0:	4b0d      	ldr	r3, [pc, #52]	; (1b7f8 <prvAddNewTaskToReadyList+0xc4>)
   1b7c2:	681b      	ldr	r3, [r3, #0]
   1b7c4:	2b00      	cmp	r3, #0
   1b7c6:	d00e      	beq.n	1b7e6 <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b7c8:	4b0a      	ldr	r3, [pc, #40]	; (1b7f4 <prvAddNewTaskToReadyList+0xc0>)
   1b7ca:	681b      	ldr	r3, [r3, #0]
   1b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7ce:	687b      	ldr	r3, [r7, #4]
   1b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b7d2:	429a      	cmp	r2, r3
   1b7d4:	d207      	bcs.n	1b7e6 <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b7d6:	4b0c      	ldr	r3, [pc, #48]	; (1b808 <prvAddNewTaskToReadyList+0xd4>)
   1b7d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b7dc:	601a      	str	r2, [r3, #0]
   1b7de:	f3bf 8f4f 	dsb	sy
   1b7e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b7e6:	bf00      	nop
   1b7e8:	3708      	adds	r7, #8
   1b7ea:	46bd      	mov	sp, r7
   1b7ec:	bd80      	pop	{r7, pc}
   1b7ee:	bf00      	nop
   1b7f0:	100062f0 	.word	0x100062f0
   1b7f4:	10006244 	.word	0x10006244
   1b7f8:	100062fc 	.word	0x100062fc
   1b7fc:	1000630c 	.word	0x1000630c
   1b800:	100062f8 	.word	0x100062f8
   1b804:	10006248 	.word	0x10006248
   1b808:	e000ed04 	.word	0xe000ed04

0001b80c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b80c:	b580      	push	{r7, lr}
   1b80e:	b084      	sub	sp, #16
   1b810:	af00      	add	r7, sp, #0
   1b812:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b814:	f7fe f848 	bl	198a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b818:	687b      	ldr	r3, [r7, #4]
   1b81a:	2b00      	cmp	r3, #0
   1b81c:	d102      	bne.n	1b824 <vTaskSuspend+0x18>
   1b81e:	4b2b      	ldr	r3, [pc, #172]	; (1b8cc <vTaskSuspend+0xc0>)
   1b820:	681b      	ldr	r3, [r3, #0]
   1b822:	e000      	b.n	1b826 <vTaskSuspend+0x1a>
   1b824:	687b      	ldr	r3, [r7, #4]
   1b826:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b828:	68fb      	ldr	r3, [r7, #12]
   1b82a:	3304      	adds	r3, #4
   1b82c:	4618      	mov	r0, r3
   1b82e:	f7ff faa3 	bl	1ad78 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b832:	68fb      	ldr	r3, [r7, #12]
   1b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b836:	2b00      	cmp	r3, #0
   1b838:	d004      	beq.n	1b844 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b83a:	68fb      	ldr	r3, [r7, #12]
   1b83c:	3318      	adds	r3, #24
   1b83e:	4618      	mov	r0, r3
   1b840:	f7ff fa9a 	bl	1ad78 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b844:	68fb      	ldr	r3, [r7, #12]
   1b846:	3304      	adds	r3, #4
   1b848:	4619      	mov	r1, r3
   1b84a:	4821      	ldr	r0, [pc, #132]	; (1b8d0 <vTaskSuspend+0xc4>)
   1b84c:	f7ff fa37 	bl	1acbe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b850:	68fb      	ldr	r3, [r7, #12]
   1b852:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
   1b856:	b2db      	uxtb	r3, r3
   1b858:	2b01      	cmp	r3, #1
   1b85a:	d103      	bne.n	1b864 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b85c:	68fb      	ldr	r3, [r7, #12]
   1b85e:	2200      	movs	r2, #0
   1b860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b864:	f7fe f846 	bl	198f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
   1b868:	4b1a      	ldr	r3, [pc, #104]	; (1b8d4 <vTaskSuspend+0xc8>)
   1b86a:	681b      	ldr	r3, [r3, #0]
   1b86c:	2b00      	cmp	r3, #0
   1b86e:	d005      	beq.n	1b87c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b870:	f7fe f81a 	bl	198a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
   1b874:	f000 fcbe 	bl	1c1f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
   1b878:	f7fe f83c 	bl	198f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b87c:	4b13      	ldr	r3, [pc, #76]	; (1b8cc <vTaskSuspend+0xc0>)
   1b87e:	681b      	ldr	r3, [r3, #0]
   1b880:	68fa      	ldr	r2, [r7, #12]
   1b882:	429a      	cmp	r2, r3
   1b884:	d11d      	bne.n	1b8c2 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
   1b886:	4b13      	ldr	r3, [pc, #76]	; (1b8d4 <vTaskSuspend+0xc8>)
   1b888:	681b      	ldr	r3, [r3, #0]
   1b88a:	2b00      	cmp	r3, #0
   1b88c:	d00d      	beq.n	1b8aa <vTaskSuspend+0x9e>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b88e:	4b12      	ldr	r3, [pc, #72]	; (1b8d8 <vTaskSuspend+0xcc>)
   1b890:	681b      	ldr	r3, [r3, #0]
   1b892:	2b00      	cmp	r3, #0
   1b894:	d000      	beq.n	1b898 <vTaskSuspend+0x8c>
   1b896:	e7fe      	b.n	1b896 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
   1b898:	4b10      	ldr	r3, [pc, #64]	; (1b8dc <vTaskSuspend+0xd0>)
   1b89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1b89e:	601a      	str	r2, [r3, #0]
   1b8a0:	f3bf 8f4f 	dsb	sy
   1b8a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b8a8:	e00b      	b.n	1b8c2 <vTaskSuspend+0xb6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
   1b8aa:	4b09      	ldr	r3, [pc, #36]	; (1b8d0 <vTaskSuspend+0xc4>)
   1b8ac:	681a      	ldr	r2, [r3, #0]
   1b8ae:	4b0c      	ldr	r3, [pc, #48]	; (1b8e0 <vTaskSuspend+0xd4>)
   1b8b0:	681b      	ldr	r3, [r3, #0]
   1b8b2:	429a      	cmp	r2, r3
   1b8b4:	d103      	bne.n	1b8be <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
   1b8b6:	4b05      	ldr	r3, [pc, #20]	; (1b8cc <vTaskSuspend+0xc0>)
   1b8b8:	2200      	movs	r2, #0
   1b8ba:	601a      	str	r2, [r3, #0]
	}
   1b8bc:	e001      	b.n	1b8c2 <vTaskSuspend+0xb6>
					vTaskSwitchContext();
   1b8be:	f000 f9fd 	bl	1bcbc <vTaskSwitchContext>
	}
   1b8c2:	bf00      	nop
   1b8c4:	3710      	adds	r7, #16
   1b8c6:	46bd      	mov	sp, r7
   1b8c8:	bd80      	pop	{r7, pc}
   1b8ca:	bf00      	nop
   1b8cc:	10006244 	.word	0x10006244
   1b8d0:	100062dc 	.word	0x100062dc
   1b8d4:	100062fc 	.word	0x100062fc
   1b8d8:	10006318 	.word	0x10006318
   1b8dc:	e000ed04 	.word	0xe000ed04
   1b8e0:	100062f0 	.word	0x100062f0

0001b8e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b8e4:	b580      	push	{r7, lr}
   1b8e6:	b084      	sub	sp, #16
   1b8e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b8ea:	4b1a      	ldr	r3, [pc, #104]	; (1b954 <vTaskStartScheduler+0x70>)
   1b8ec:	9301      	str	r3, [sp, #4]
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	9300      	str	r3, [sp, #0]
   1b8f2:	2300      	movs	r3, #0
   1b8f4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b8f8:	4917      	ldr	r1, [pc, #92]	; (1b958 <vTaskStartScheduler+0x74>)
   1b8fa:	4818      	ldr	r0, [pc, #96]	; (1b95c <vTaskStartScheduler+0x78>)
   1b8fc:	f7ff fe5e 	bl	1b5bc <xTaskCreate>
   1b900:	6078      	str	r0, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b902:	687b      	ldr	r3, [r7, #4]
   1b904:	2b01      	cmp	r3, #1
   1b906:	d102      	bne.n	1b90e <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
   1b908:	f000 fd1e 	bl	1c348 <xTimerCreateTimerTask>
   1b90c:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b90e:	687b      	ldr	r3, [r7, #4]
   1b910:	2b01      	cmp	r3, #1
   1b912:	d115      	bne.n	1b940 <vTaskStartScheduler+0x5c>
	__asm volatile
   1b914:	f04f 0380 	mov.w	r3, #128	; 0x80
   1b918:	f383 8811 	msr	BASEPRI, r3
   1b91c:	f3bf 8f6f 	isb	sy
   1b920:	f3bf 8f4f 	dsb	sy
   1b924:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b926:	4b0e      	ldr	r3, [pc, #56]	; (1b960 <vTaskStartScheduler+0x7c>)
   1b928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b92c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b92e:	4b0d      	ldr	r3, [pc, #52]	; (1b964 <vTaskStartScheduler+0x80>)
   1b930:	2201      	movs	r2, #1
   1b932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
   1b934:	4b0c      	ldr	r3, [pc, #48]	; (1b968 <vTaskStartScheduler+0x84>)
   1b936:	2200      	movs	r2, #0
   1b938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b93a:	f7fd ff31 	bl	197a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b93e:	e004      	b.n	1b94a <vTaskStartScheduler+0x66>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b940:	687b      	ldr	r3, [r7, #4]
   1b942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b946:	d100      	bne.n	1b94a <vTaskStartScheduler+0x66>
   1b948:	e7fe      	b.n	1b948 <vTaskStartScheduler+0x64>
}
   1b94a:	bf00      	nop
   1b94c:	3708      	adds	r7, #8
   1b94e:	46bd      	mov	sp, r7
   1b950:	bd80      	pop	{r7, pc}
   1b952:	bf00      	nop
   1b954:	10006314 	.word	0x10006314
   1b958:	00021d10 	.word	0x00021d10
   1b95c:	0001c0a9 	.word	0x0001c0a9
   1b960:	10006310 	.word	0x10006310
   1b964:	100062fc 	.word	0x100062fc
   1b968:	100062f4 	.word	0x100062f4

0001b96c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b96c:	b480      	push	{r7}
   1b96e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b970:	4b04      	ldr	r3, [pc, #16]	; (1b984 <vTaskSuspendAll+0x18>)
   1b972:	681b      	ldr	r3, [r3, #0]
   1b974:	3301      	adds	r3, #1
   1b976:	4a03      	ldr	r2, [pc, #12]	; (1b984 <vTaskSuspendAll+0x18>)
   1b978:	6013      	str	r3, [r2, #0]
}
   1b97a:	bf00      	nop
   1b97c:	46bd      	mov	sp, r7
   1b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b982:	4770      	bx	lr
   1b984:	10006318 	.word	0x10006318

0001b988 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
   1b988:	b480      	push	{r7}
   1b98a:	b083      	sub	sp, #12
   1b98c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
   1b98e:	2300      	movs	r3, #0
   1b990:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
   1b992:	4b14      	ldr	r3, [pc, #80]	; (1b9e4 <prvGetExpectedIdleTime+0x5c>)
   1b994:	681b      	ldr	r3, [r3, #0]
   1b996:	2b00      	cmp	r3, #0
   1b998:	d001      	beq.n	1b99e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
   1b99a:	2301      	movs	r3, #1
   1b99c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
   1b99e:	4b12      	ldr	r3, [pc, #72]	; (1b9e8 <prvGetExpectedIdleTime+0x60>)
   1b9a0:	681b      	ldr	r3, [r3, #0]
   1b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d002      	beq.n	1b9ae <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
   1b9a8:	2300      	movs	r3, #0
   1b9aa:	607b      	str	r3, [r7, #4]
   1b9ac:	e012      	b.n	1b9d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
   1b9ae:	4b0f      	ldr	r3, [pc, #60]	; (1b9ec <prvGetExpectedIdleTime+0x64>)
   1b9b0:	681b      	ldr	r3, [r3, #0]
   1b9b2:	2b01      	cmp	r3, #1
   1b9b4:	d902      	bls.n	1b9bc <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
   1b9b6:	2300      	movs	r3, #0
   1b9b8:	607b      	str	r3, [r7, #4]
   1b9ba:	e00b      	b.n	1b9d4 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
   1b9bc:	683b      	ldr	r3, [r7, #0]
   1b9be:	2b00      	cmp	r3, #0
   1b9c0:	d002      	beq.n	1b9c8 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
   1b9c2:	2300      	movs	r3, #0
   1b9c4:	607b      	str	r3, [r7, #4]
   1b9c6:	e005      	b.n	1b9d4 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
   1b9c8:	4b09      	ldr	r3, [pc, #36]	; (1b9f0 <prvGetExpectedIdleTime+0x68>)
   1b9ca:	681a      	ldr	r2, [r3, #0]
   1b9cc:	4b09      	ldr	r3, [pc, #36]	; (1b9f4 <prvGetExpectedIdleTime+0x6c>)
   1b9ce:	681b      	ldr	r3, [r3, #0]
   1b9d0:	1ad3      	subs	r3, r2, r3
   1b9d2:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
   1b9d4:	687b      	ldr	r3, [r7, #4]
	}
   1b9d6:	4618      	mov	r0, r3
   1b9d8:	370c      	adds	r7, #12
   1b9da:	46bd      	mov	sp, r7
   1b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   1b9e0:	4770      	bx	lr
   1b9e2:	bf00      	nop
   1b9e4:	100062f8 	.word	0x100062f8
   1b9e8:	10006244 	.word	0x10006244
   1b9ec:	10006248 	.word	0x10006248
   1b9f0:	10006310 	.word	0x10006310
   1b9f4:	100062f4 	.word	0x100062f4

0001b9f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b9f8:	b580      	push	{r7, lr}
   1b9fa:	b084      	sub	sp, #16
   1b9fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b9fe:	2300      	movs	r3, #0
   1ba00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1ba02:	2300      	movs	r3, #0
   1ba04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1ba06:	4b3d      	ldr	r3, [pc, #244]	; (1bafc <xTaskResumeAll+0x104>)
   1ba08:	681b      	ldr	r3, [r3, #0]
   1ba0a:	2b00      	cmp	r3, #0
   1ba0c:	d100      	bne.n	1ba10 <xTaskResumeAll+0x18>
   1ba0e:	e7fe      	b.n	1ba0e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ba10:	f7fd ff4a 	bl	198a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   1ba14:	4b39      	ldr	r3, [pc, #228]	; (1bafc <xTaskResumeAll+0x104>)
   1ba16:	681b      	ldr	r3, [r3, #0]
   1ba18:	3b01      	subs	r3, #1
   1ba1a:	4a38      	ldr	r2, [pc, #224]	; (1bafc <xTaskResumeAll+0x104>)
   1ba1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ba1e:	4b37      	ldr	r3, [pc, #220]	; (1bafc <xTaskResumeAll+0x104>)
   1ba20:	681b      	ldr	r3, [r3, #0]
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d162      	bne.n	1baec <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ba26:	4b36      	ldr	r3, [pc, #216]	; (1bb00 <xTaskResumeAll+0x108>)
   1ba28:	681b      	ldr	r3, [r3, #0]
   1ba2a:	2b00      	cmp	r3, #0
   1ba2c:	d05e      	beq.n	1baec <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ba2e:	e02f      	b.n	1ba90 <xTaskResumeAll+0x98>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1ba30:	4b34      	ldr	r3, [pc, #208]	; (1bb04 <xTaskResumeAll+0x10c>)
   1ba32:	68db      	ldr	r3, [r3, #12]
   1ba34:	68db      	ldr	r3, [r3, #12]
   1ba36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ba38:	68fb      	ldr	r3, [r7, #12]
   1ba3a:	3318      	adds	r3, #24
   1ba3c:	4618      	mov	r0, r3
   1ba3e:	f7ff f99b 	bl	1ad78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ba42:	68fb      	ldr	r3, [r7, #12]
   1ba44:	3304      	adds	r3, #4
   1ba46:	4618      	mov	r0, r3
   1ba48:	f7ff f996 	bl	1ad78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
   1ba4c:	68fb      	ldr	r3, [r7, #12]
   1ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba50:	4b2d      	ldr	r3, [pc, #180]	; (1bb08 <xTaskResumeAll+0x110>)
   1ba52:	681b      	ldr	r3, [r3, #0]
   1ba54:	429a      	cmp	r2, r3
   1ba56:	d903      	bls.n	1ba60 <xTaskResumeAll+0x68>
   1ba58:	68fb      	ldr	r3, [r7, #12]
   1ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ba5c:	4a2a      	ldr	r2, [pc, #168]	; (1bb08 <xTaskResumeAll+0x110>)
   1ba5e:	6013      	str	r3, [r2, #0]
   1ba60:	68fb      	ldr	r3, [r7, #12]
   1ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba64:	4613      	mov	r3, r2
   1ba66:	009b      	lsls	r3, r3, #2
   1ba68:	4413      	add	r3, r2
   1ba6a:	009b      	lsls	r3, r3, #2
   1ba6c:	4a27      	ldr	r2, [pc, #156]	; (1bb0c <xTaskResumeAll+0x114>)
   1ba6e:	441a      	add	r2, r3
   1ba70:	68fb      	ldr	r3, [r7, #12]
   1ba72:	3304      	adds	r3, #4
   1ba74:	4619      	mov	r1, r3
   1ba76:	4610      	mov	r0, r2
   1ba78:	f7ff f921 	bl	1acbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1ba7c:	68fb      	ldr	r3, [r7, #12]
   1ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba80:	4b23      	ldr	r3, [pc, #140]	; (1bb10 <xTaskResumeAll+0x118>)
   1ba82:	681b      	ldr	r3, [r3, #0]
   1ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ba86:	429a      	cmp	r2, r3
   1ba88:	d302      	bcc.n	1ba90 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
   1ba8a:	4b22      	ldr	r3, [pc, #136]	; (1bb14 <xTaskResumeAll+0x11c>)
   1ba8c:	2201      	movs	r2, #1
   1ba8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ba90:	4b1c      	ldr	r3, [pc, #112]	; (1bb04 <xTaskResumeAll+0x10c>)
   1ba92:	681b      	ldr	r3, [r3, #0]
   1ba94:	2b00      	cmp	r3, #0
   1ba96:	d1cb      	bne.n	1ba30 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ba98:	68fb      	ldr	r3, [r7, #12]
   1ba9a:	2b00      	cmp	r3, #0
   1ba9c:	d001      	beq.n	1baa2 <xTaskResumeAll+0xaa>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1ba9e:	f000 fba9 	bl	1c1f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1baa2:	4b1d      	ldr	r3, [pc, #116]	; (1bb18 <xTaskResumeAll+0x120>)
   1baa4:	681b      	ldr	r3, [r3, #0]
   1baa6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1baa8:	687b      	ldr	r3, [r7, #4]
   1baaa:	2b00      	cmp	r3, #0
   1baac:	d010      	beq.n	1bad0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1baae:	f000 f865 	bl	1bb7c <xTaskIncrementTick>
   1bab2:	4603      	mov	r3, r0
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d002      	beq.n	1babe <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1bab8:	4b16      	ldr	r3, [pc, #88]	; (1bb14 <xTaskResumeAll+0x11c>)
   1baba:	2201      	movs	r2, #1
   1babc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1babe:	687b      	ldr	r3, [r7, #4]
   1bac0:	3b01      	subs	r3, #1
   1bac2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1bac4:	687b      	ldr	r3, [r7, #4]
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d1f1      	bne.n	1baae <xTaskResumeAll+0xb6>

						uxPendedTicks = 0;
   1baca:	4b13      	ldr	r3, [pc, #76]	; (1bb18 <xTaskResumeAll+0x120>)
   1bacc:	2200      	movs	r2, #0
   1bace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1bad0:	4b10      	ldr	r3, [pc, #64]	; (1bb14 <xTaskResumeAll+0x11c>)
   1bad2:	681b      	ldr	r3, [r3, #0]
   1bad4:	2b00      	cmp	r3, #0
   1bad6:	d009      	beq.n	1baec <xTaskResumeAll+0xf4>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1bad8:	2301      	movs	r3, #1
   1bada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1badc:	4b0f      	ldr	r3, [pc, #60]	; (1bb1c <xTaskResumeAll+0x124>)
   1bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bae2:	601a      	str	r2, [r3, #0]
   1bae4:	f3bf 8f4f 	dsb	sy
   1bae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1baec:	f7fd ff02 	bl	198f4 <vPortExitCritical>

	return xAlreadyYielded;
   1baf0:	68bb      	ldr	r3, [r7, #8]
}
   1baf2:	4618      	mov	r0, r3
   1baf4:	3710      	adds	r7, #16
   1baf6:	46bd      	mov	sp, r7
   1baf8:	bd80      	pop	{r7, pc}
   1bafa:	bf00      	nop
   1bafc:	10006318 	.word	0x10006318
   1bb00:	100062f0 	.word	0x100062f0
   1bb04:	100062c8 	.word	0x100062c8
   1bb08:	100062f8 	.word	0x100062f8
   1bb0c:	10006248 	.word	0x10006248
   1bb10:	10006244 	.word	0x10006244
   1bb14:	10006304 	.word	0x10006304
   1bb18:	10006300 	.word	0x10006300
   1bb1c:	e000ed04 	.word	0xe000ed04

0001bb20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1bb20:	b480      	push	{r7}
   1bb22:	b083      	sub	sp, #12
   1bb24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1bb26:	4b05      	ldr	r3, [pc, #20]	; (1bb3c <xTaskGetTickCount+0x1c>)
   1bb28:	681b      	ldr	r3, [r3, #0]
   1bb2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1bb2c:	687b      	ldr	r3, [r7, #4]
}
   1bb2e:	4618      	mov	r0, r3
   1bb30:	370c      	adds	r7, #12
   1bb32:	46bd      	mov	sp, r7
   1bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb38:	4770      	bx	lr
   1bb3a:	bf00      	nop
   1bb3c:	100062f4 	.word	0x100062f4

0001bb40 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
   1bb40:	b480      	push	{r7}
   1bb42:	b083      	sub	sp, #12
   1bb44:	af00      	add	r7, sp, #0
   1bb46:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
   1bb48:	4b0a      	ldr	r3, [pc, #40]	; (1bb74 <vTaskStepTick+0x34>)
   1bb4a:	681a      	ldr	r2, [r3, #0]
   1bb4c:	687b      	ldr	r3, [r7, #4]
   1bb4e:	441a      	add	r2, r3
   1bb50:	4b09      	ldr	r3, [pc, #36]	; (1bb78 <vTaskStepTick+0x38>)
   1bb52:	681b      	ldr	r3, [r3, #0]
   1bb54:	429a      	cmp	r2, r3
   1bb56:	d900      	bls.n	1bb5a <vTaskStepTick+0x1a>
   1bb58:	e7fe      	b.n	1bb58 <vTaskStepTick+0x18>
		xTickCount += xTicksToJump;
   1bb5a:	4b06      	ldr	r3, [pc, #24]	; (1bb74 <vTaskStepTick+0x34>)
   1bb5c:	681a      	ldr	r2, [r3, #0]
   1bb5e:	687b      	ldr	r3, [r7, #4]
   1bb60:	4413      	add	r3, r2
   1bb62:	4a04      	ldr	r2, [pc, #16]	; (1bb74 <vTaskStepTick+0x34>)
   1bb64:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
   1bb66:	bf00      	nop
   1bb68:	370c      	adds	r7, #12
   1bb6a:	46bd      	mov	sp, r7
   1bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bb70:	4770      	bx	lr
   1bb72:	bf00      	nop
   1bb74:	100062f4 	.word	0x100062f4
   1bb78:	10006310 	.word	0x10006310

0001bb7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1bb7c:	b580      	push	{r7, lr}
   1bb7e:	b086      	sub	sp, #24
   1bb80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1bb82:	2300      	movs	r3, #0
   1bb84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1bb86:	4b42      	ldr	r3, [pc, #264]	; (1bc90 <xTaskIncrementTick+0x114>)
   1bb88:	681b      	ldr	r3, [r3, #0]
   1bb8a:	2b00      	cmp	r3, #0
   1bb8c:	d16f      	bne.n	1bc6e <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1bb8e:	4b41      	ldr	r3, [pc, #260]	; (1bc94 <xTaskIncrementTick+0x118>)
   1bb90:	681b      	ldr	r3, [r3, #0]
   1bb92:	3301      	adds	r3, #1
   1bb94:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1bb96:	4a3f      	ldr	r2, [pc, #252]	; (1bc94 <xTaskIncrementTick+0x118>)
   1bb98:	693b      	ldr	r3, [r7, #16]
   1bb9a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1bb9c:	693b      	ldr	r3, [r7, #16]
   1bb9e:	2b00      	cmp	r3, #0
   1bba0:	d116      	bne.n	1bbd0 <xTaskIncrementTick+0x54>
		{
			taskSWITCH_DELAYED_LISTS();
   1bba2:	4b3d      	ldr	r3, [pc, #244]	; (1bc98 <xTaskIncrementTick+0x11c>)
   1bba4:	681b      	ldr	r3, [r3, #0]
   1bba6:	681b      	ldr	r3, [r3, #0]
   1bba8:	2b00      	cmp	r3, #0
   1bbaa:	d000      	beq.n	1bbae <xTaskIncrementTick+0x32>
   1bbac:	e7fe      	b.n	1bbac <xTaskIncrementTick+0x30>
   1bbae:	4b3a      	ldr	r3, [pc, #232]	; (1bc98 <xTaskIncrementTick+0x11c>)
   1bbb0:	681b      	ldr	r3, [r3, #0]
   1bbb2:	60fb      	str	r3, [r7, #12]
   1bbb4:	4b39      	ldr	r3, [pc, #228]	; (1bc9c <xTaskIncrementTick+0x120>)
   1bbb6:	681b      	ldr	r3, [r3, #0]
   1bbb8:	4a37      	ldr	r2, [pc, #220]	; (1bc98 <xTaskIncrementTick+0x11c>)
   1bbba:	6013      	str	r3, [r2, #0]
   1bbbc:	4a37      	ldr	r2, [pc, #220]	; (1bc9c <xTaskIncrementTick+0x120>)
   1bbbe:	68fb      	ldr	r3, [r7, #12]
   1bbc0:	6013      	str	r3, [r2, #0]
   1bbc2:	4b37      	ldr	r3, [pc, #220]	; (1bca0 <xTaskIncrementTick+0x124>)
   1bbc4:	681b      	ldr	r3, [r3, #0]
   1bbc6:	3301      	adds	r3, #1
   1bbc8:	4a35      	ldr	r2, [pc, #212]	; (1bca0 <xTaskIncrementTick+0x124>)
   1bbca:	6013      	str	r3, [r2, #0]
   1bbcc:	f000 fb12 	bl	1c1f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1bbd0:	4b34      	ldr	r3, [pc, #208]	; (1bca4 <xTaskIncrementTick+0x128>)
   1bbd2:	681b      	ldr	r3, [r3, #0]
   1bbd4:	693a      	ldr	r2, [r7, #16]
   1bbd6:	429a      	cmp	r2, r3
   1bbd8:	d34e      	bcc.n	1bc78 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bbda:	4b2f      	ldr	r3, [pc, #188]	; (1bc98 <xTaskIncrementTick+0x11c>)
   1bbdc:	681b      	ldr	r3, [r3, #0]
   1bbde:	681b      	ldr	r3, [r3, #0]
   1bbe0:	2b00      	cmp	r3, #0
   1bbe2:	d104      	bne.n	1bbee <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bbe4:	4b2f      	ldr	r3, [pc, #188]	; (1bca4 <xTaskIncrementTick+0x128>)
   1bbe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bbea:	601a      	str	r2, [r3, #0]
					break;
   1bbec:	e044      	b.n	1bc78 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1bbee:	4b2a      	ldr	r3, [pc, #168]	; (1bc98 <xTaskIncrementTick+0x11c>)
   1bbf0:	681b      	ldr	r3, [r3, #0]
   1bbf2:	68db      	ldr	r3, [r3, #12]
   1bbf4:	68db      	ldr	r3, [r3, #12]
   1bbf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1bbf8:	68bb      	ldr	r3, [r7, #8]
   1bbfa:	685b      	ldr	r3, [r3, #4]
   1bbfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1bbfe:	693a      	ldr	r2, [r7, #16]
   1bc00:	687b      	ldr	r3, [r7, #4]
   1bc02:	429a      	cmp	r2, r3
   1bc04:	d203      	bcs.n	1bc0e <xTaskIncrementTick+0x92>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1bc06:	4a27      	ldr	r2, [pc, #156]	; (1bca4 <xTaskIncrementTick+0x128>)
   1bc08:	687b      	ldr	r3, [r7, #4]
   1bc0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
   1bc0c:	e034      	b.n	1bc78 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1bc0e:	68bb      	ldr	r3, [r7, #8]
   1bc10:	3304      	adds	r3, #4
   1bc12:	4618      	mov	r0, r3
   1bc14:	f7ff f8b0 	bl	1ad78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1bc18:	68bb      	ldr	r3, [r7, #8]
   1bc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc1c:	2b00      	cmp	r3, #0
   1bc1e:	d004      	beq.n	1bc2a <xTaskIncrementTick+0xae>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1bc20:	68bb      	ldr	r3, [r7, #8]
   1bc22:	3318      	adds	r3, #24
   1bc24:	4618      	mov	r0, r3
   1bc26:	f7ff f8a7 	bl	1ad78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1bc2a:	68bb      	ldr	r3, [r7, #8]
   1bc2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bc2e:	4b1e      	ldr	r3, [pc, #120]	; (1bca8 <xTaskIncrementTick+0x12c>)
   1bc30:	681b      	ldr	r3, [r3, #0]
   1bc32:	429a      	cmp	r2, r3
   1bc34:	d903      	bls.n	1bc3e <xTaskIncrementTick+0xc2>
   1bc36:	68bb      	ldr	r3, [r7, #8]
   1bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc3a:	4a1b      	ldr	r2, [pc, #108]	; (1bca8 <xTaskIncrementTick+0x12c>)
   1bc3c:	6013      	str	r3, [r2, #0]
   1bc3e:	68bb      	ldr	r3, [r7, #8]
   1bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bc42:	4613      	mov	r3, r2
   1bc44:	009b      	lsls	r3, r3, #2
   1bc46:	4413      	add	r3, r2
   1bc48:	009b      	lsls	r3, r3, #2
   1bc4a:	4a18      	ldr	r2, [pc, #96]	; (1bcac <xTaskIncrementTick+0x130>)
   1bc4c:	441a      	add	r2, r3
   1bc4e:	68bb      	ldr	r3, [r7, #8]
   1bc50:	3304      	adds	r3, #4
   1bc52:	4619      	mov	r1, r3
   1bc54:	4610      	mov	r0, r2
   1bc56:	f7ff f832 	bl	1acbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1bc5a:	68bb      	ldr	r3, [r7, #8]
   1bc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bc5e:	4b14      	ldr	r3, [pc, #80]	; (1bcb0 <xTaskIncrementTick+0x134>)
   1bc60:	681b      	ldr	r3, [r3, #0]
   1bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc64:	429a      	cmp	r2, r3
   1bc66:	d3b8      	bcc.n	1bbda <xTaskIncrementTick+0x5e>
						{
							xSwitchRequired = pdTRUE;
   1bc68:	2301      	movs	r3, #1
   1bc6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bc6c:	e7b5      	b.n	1bbda <xTaskIncrementTick+0x5e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1bc6e:	4b11      	ldr	r3, [pc, #68]	; (1bcb4 <xTaskIncrementTick+0x138>)
   1bc70:	681b      	ldr	r3, [r3, #0]
   1bc72:	3301      	adds	r3, #1
   1bc74:	4a0f      	ldr	r2, [pc, #60]	; (1bcb4 <xTaskIncrementTick+0x138>)
   1bc76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1bc78:	4b0f      	ldr	r3, [pc, #60]	; (1bcb8 <xTaskIncrementTick+0x13c>)
   1bc7a:	681b      	ldr	r3, [r3, #0]
   1bc7c:	2b00      	cmp	r3, #0
   1bc7e:	d001      	beq.n	1bc84 <xTaskIncrementTick+0x108>
		{
			xSwitchRequired = pdTRUE;
   1bc80:	2301      	movs	r3, #1
   1bc82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1bc84:	697b      	ldr	r3, [r7, #20]
}
   1bc86:	4618      	mov	r0, r3
   1bc88:	3718      	adds	r7, #24
   1bc8a:	46bd      	mov	sp, r7
   1bc8c:	bd80      	pop	{r7, pc}
   1bc8e:	bf00      	nop
   1bc90:	10006318 	.word	0x10006318
   1bc94:	100062f4 	.word	0x100062f4
   1bc98:	100062c0 	.word	0x100062c0
   1bc9c:	100062c4 	.word	0x100062c4
   1bca0:	10006308 	.word	0x10006308
   1bca4:	10006310 	.word	0x10006310
   1bca8:	100062f8 	.word	0x100062f8
   1bcac:	10006248 	.word	0x10006248
   1bcb0:	10006244 	.word	0x10006244
   1bcb4:	10006300 	.word	0x10006300
   1bcb8:	10006304 	.word	0x10006304

0001bcbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1bcbc:	b580      	push	{r7, lr}
   1bcbe:	b084      	sub	sp, #16
   1bcc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1bcc2:	4b35      	ldr	r3, [pc, #212]	; (1bd98 <vTaskSwitchContext+0xdc>)
   1bcc4:	681b      	ldr	r3, [r3, #0]
   1bcc6:	2b00      	cmp	r3, #0
   1bcc8:	d003      	beq.n	1bcd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1bcca:	4b34      	ldr	r3, [pc, #208]	; (1bd9c <vTaskSwitchContext+0xe0>)
   1bccc:	2201      	movs	r2, #1
   1bcce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1bcd0:	e05e      	b.n	1bd90 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
   1bcd2:	4b32      	ldr	r3, [pc, #200]	; (1bd9c <vTaskSwitchContext+0xe0>)
   1bcd4:	2200      	movs	r2, #0
   1bcd6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1bcd8:	4b31      	ldr	r3, [pc, #196]	; (1bda0 <vTaskSwitchContext+0xe4>)
   1bcda:	681b      	ldr	r3, [r3, #0]
   1bcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bcde:	60bb      	str	r3, [r7, #8]
   1bce0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
   1bce4:	607b      	str	r3, [r7, #4]
   1bce6:	68bb      	ldr	r3, [r7, #8]
   1bce8:	681a      	ldr	r2, [r3, #0]
   1bcea:	687b      	ldr	r3, [r7, #4]
   1bcec:	429a      	cmp	r2, r3
   1bcee:	d111      	bne.n	1bd14 <vTaskSwitchContext+0x58>
   1bcf0:	68bb      	ldr	r3, [r7, #8]
   1bcf2:	3304      	adds	r3, #4
   1bcf4:	681a      	ldr	r2, [r3, #0]
   1bcf6:	687b      	ldr	r3, [r7, #4]
   1bcf8:	429a      	cmp	r2, r3
   1bcfa:	d10b      	bne.n	1bd14 <vTaskSwitchContext+0x58>
   1bcfc:	68bb      	ldr	r3, [r7, #8]
   1bcfe:	3308      	adds	r3, #8
   1bd00:	681a      	ldr	r2, [r3, #0]
   1bd02:	687b      	ldr	r3, [r7, #4]
   1bd04:	429a      	cmp	r2, r3
   1bd06:	d105      	bne.n	1bd14 <vTaskSwitchContext+0x58>
   1bd08:	68bb      	ldr	r3, [r7, #8]
   1bd0a:	330c      	adds	r3, #12
   1bd0c:	681a      	ldr	r2, [r3, #0]
   1bd0e:	687b      	ldr	r3, [r7, #4]
   1bd10:	429a      	cmp	r2, r3
   1bd12:	d008      	beq.n	1bd26 <vTaskSwitchContext+0x6a>
   1bd14:	4b22      	ldr	r3, [pc, #136]	; (1bda0 <vTaskSwitchContext+0xe4>)
   1bd16:	681a      	ldr	r2, [r3, #0]
   1bd18:	4b21      	ldr	r3, [pc, #132]	; (1bda0 <vTaskSwitchContext+0xe4>)
   1bd1a:	681b      	ldr	r3, [r3, #0]
   1bd1c:	3334      	adds	r3, #52	; 0x34
   1bd1e:	4619      	mov	r1, r3
   1bd20:	4610      	mov	r0, r2
   1bd22:	f7f7 f8f9 	bl	12f18 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1bd26:	4b1f      	ldr	r3, [pc, #124]	; (1bda4 <vTaskSwitchContext+0xe8>)
   1bd28:	681b      	ldr	r3, [r3, #0]
   1bd2a:	60fb      	str	r3, [r7, #12]
   1bd2c:	e006      	b.n	1bd3c <vTaskSwitchContext+0x80>
   1bd2e:	68fb      	ldr	r3, [r7, #12]
   1bd30:	2b00      	cmp	r3, #0
   1bd32:	d100      	bne.n	1bd36 <vTaskSwitchContext+0x7a>
   1bd34:	e7fe      	b.n	1bd34 <vTaskSwitchContext+0x78>
   1bd36:	68fb      	ldr	r3, [r7, #12]
   1bd38:	3b01      	subs	r3, #1
   1bd3a:	60fb      	str	r3, [r7, #12]
   1bd3c:	491a      	ldr	r1, [pc, #104]	; (1bda8 <vTaskSwitchContext+0xec>)
   1bd3e:	68fa      	ldr	r2, [r7, #12]
   1bd40:	4613      	mov	r3, r2
   1bd42:	009b      	lsls	r3, r3, #2
   1bd44:	4413      	add	r3, r2
   1bd46:	009b      	lsls	r3, r3, #2
   1bd48:	440b      	add	r3, r1
   1bd4a:	681b      	ldr	r3, [r3, #0]
   1bd4c:	2b00      	cmp	r3, #0
   1bd4e:	d0ee      	beq.n	1bd2e <vTaskSwitchContext+0x72>
   1bd50:	68fa      	ldr	r2, [r7, #12]
   1bd52:	4613      	mov	r3, r2
   1bd54:	009b      	lsls	r3, r3, #2
   1bd56:	4413      	add	r3, r2
   1bd58:	009b      	lsls	r3, r3, #2
   1bd5a:	4a13      	ldr	r2, [pc, #76]	; (1bda8 <vTaskSwitchContext+0xec>)
   1bd5c:	4413      	add	r3, r2
   1bd5e:	603b      	str	r3, [r7, #0]
   1bd60:	683b      	ldr	r3, [r7, #0]
   1bd62:	685b      	ldr	r3, [r3, #4]
   1bd64:	685a      	ldr	r2, [r3, #4]
   1bd66:	683b      	ldr	r3, [r7, #0]
   1bd68:	605a      	str	r2, [r3, #4]
   1bd6a:	683b      	ldr	r3, [r7, #0]
   1bd6c:	685a      	ldr	r2, [r3, #4]
   1bd6e:	683b      	ldr	r3, [r7, #0]
   1bd70:	3308      	adds	r3, #8
   1bd72:	429a      	cmp	r2, r3
   1bd74:	d104      	bne.n	1bd80 <vTaskSwitchContext+0xc4>
   1bd76:	683b      	ldr	r3, [r7, #0]
   1bd78:	685b      	ldr	r3, [r3, #4]
   1bd7a:	685a      	ldr	r2, [r3, #4]
   1bd7c:	683b      	ldr	r3, [r7, #0]
   1bd7e:	605a      	str	r2, [r3, #4]
   1bd80:	683b      	ldr	r3, [r7, #0]
   1bd82:	685b      	ldr	r3, [r3, #4]
   1bd84:	68db      	ldr	r3, [r3, #12]
   1bd86:	4a06      	ldr	r2, [pc, #24]	; (1bda0 <vTaskSwitchContext+0xe4>)
   1bd88:	6013      	str	r3, [r2, #0]
   1bd8a:	4a06      	ldr	r2, [pc, #24]	; (1bda4 <vTaskSwitchContext+0xe8>)
   1bd8c:	68fb      	ldr	r3, [r7, #12]
   1bd8e:	6013      	str	r3, [r2, #0]
}
   1bd90:	bf00      	nop
   1bd92:	3710      	adds	r7, #16
   1bd94:	46bd      	mov	sp, r7
   1bd96:	bd80      	pop	{r7, pc}
   1bd98:	10006318 	.word	0x10006318
   1bd9c:	10006304 	.word	0x10006304
   1bda0:	10006244 	.word	0x10006244
   1bda4:	100062f8 	.word	0x100062f8
   1bda8:	10006248 	.word	0x10006248

0001bdac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1bdac:	b580      	push	{r7, lr}
   1bdae:	b082      	sub	sp, #8
   1bdb0:	af00      	add	r7, sp, #0
   1bdb2:	6078      	str	r0, [r7, #4]
   1bdb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1bdb6:	687b      	ldr	r3, [r7, #4]
   1bdb8:	2b00      	cmp	r3, #0
   1bdba:	d100      	bne.n	1bdbe <vTaskPlaceOnEventList+0x12>
   1bdbc:	e7fe      	b.n	1bdbc <vTaskPlaceOnEventList+0x10>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1bdbe:	4b07      	ldr	r3, [pc, #28]	; (1bddc <vTaskPlaceOnEventList+0x30>)
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	3318      	adds	r3, #24
   1bdc4:	4619      	mov	r1, r3
   1bdc6:	6878      	ldr	r0, [r7, #4]
   1bdc8:	f7fe ff9d 	bl	1ad06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1bdcc:	2101      	movs	r1, #1
   1bdce:	6838      	ldr	r0, [r7, #0]
   1bdd0:	f000 fa66 	bl	1c2a0 <prvAddCurrentTaskToDelayedList>
}
   1bdd4:	bf00      	nop
   1bdd6:	3708      	adds	r7, #8
   1bdd8:	46bd      	mov	sp, r7
   1bdda:	bd80      	pop	{r7, pc}
   1bddc:	10006244 	.word	0x10006244

0001bde0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
   1bde0:	b580      	push	{r7, lr}
   1bde2:	b084      	sub	sp, #16
   1bde4:	af00      	add	r7, sp, #0
   1bde6:	60f8      	str	r0, [r7, #12]
   1bde8:	60b9      	str	r1, [r7, #8]
   1bdea:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
   1bdec:	68fb      	ldr	r3, [r7, #12]
   1bdee:	2b00      	cmp	r3, #0
   1bdf0:	d100      	bne.n	1bdf4 <vTaskPlaceOnUnorderedEventList+0x14>
   1bdf2:	e7fe      	b.n	1bdf2 <vTaskPlaceOnUnorderedEventList+0x12>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
   1bdf4:	4b0c      	ldr	r3, [pc, #48]	; (1be28 <vTaskPlaceOnUnorderedEventList+0x48>)
   1bdf6:	681b      	ldr	r3, [r3, #0]
   1bdf8:	2b00      	cmp	r3, #0
   1bdfa:	d100      	bne.n	1bdfe <vTaskPlaceOnUnorderedEventList+0x1e>
   1bdfc:	e7fe      	b.n	1bdfc <vTaskPlaceOnUnorderedEventList+0x1c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1bdfe:	4b0b      	ldr	r3, [pc, #44]	; (1be2c <vTaskPlaceOnUnorderedEventList+0x4c>)
   1be00:	681b      	ldr	r3, [r3, #0]
   1be02:	68ba      	ldr	r2, [r7, #8]
   1be04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   1be08:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1be0a:	4b08      	ldr	r3, [pc, #32]	; (1be2c <vTaskPlaceOnUnorderedEventList+0x4c>)
   1be0c:	681b      	ldr	r3, [r3, #0]
   1be0e:	3318      	adds	r3, #24
   1be10:	4619      	mov	r1, r3
   1be12:	68f8      	ldr	r0, [r7, #12]
   1be14:	f7fe ff53 	bl	1acbe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1be18:	2101      	movs	r1, #1
   1be1a:	6878      	ldr	r0, [r7, #4]
   1be1c:	f000 fa40 	bl	1c2a0 <prvAddCurrentTaskToDelayedList>
}
   1be20:	bf00      	nop
   1be22:	3710      	adds	r7, #16
   1be24:	46bd      	mov	sp, r7
   1be26:	bd80      	pop	{r7, pc}
   1be28:	10006318 	.word	0x10006318
   1be2c:	10006244 	.word	0x10006244

0001be30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1be30:	b580      	push	{r7, lr}
   1be32:	b084      	sub	sp, #16
   1be34:	af00      	add	r7, sp, #0
   1be36:	60f8      	str	r0, [r7, #12]
   1be38:	60b9      	str	r1, [r7, #8]
   1be3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1be3c:	68fb      	ldr	r3, [r7, #12]
   1be3e:	2b00      	cmp	r3, #0
   1be40:	d100      	bne.n	1be44 <vTaskPlaceOnEventListRestricted+0x14>
   1be42:	e7fe      	b.n	1be42 <vTaskPlaceOnEventListRestricted+0x12>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1be44:	4b0a      	ldr	r3, [pc, #40]	; (1be70 <vTaskPlaceOnEventListRestricted+0x40>)
   1be46:	681b      	ldr	r3, [r3, #0]
   1be48:	3318      	adds	r3, #24
   1be4a:	4619      	mov	r1, r3
   1be4c:	68f8      	ldr	r0, [r7, #12]
   1be4e:	f7fe ff36 	bl	1acbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1be52:	687b      	ldr	r3, [r7, #4]
   1be54:	2b00      	cmp	r3, #0
   1be56:	d002      	beq.n	1be5e <vTaskPlaceOnEventListRestricted+0x2e>
		{
			xTicksToWait = portMAX_DELAY;
   1be58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be5c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1be5e:	6879      	ldr	r1, [r7, #4]
   1be60:	68b8      	ldr	r0, [r7, #8]
   1be62:	f000 fa1d 	bl	1c2a0 <prvAddCurrentTaskToDelayedList>
	}
   1be66:	bf00      	nop
   1be68:	3710      	adds	r7, #16
   1be6a:	46bd      	mov	sp, r7
   1be6c:	bd80      	pop	{r7, pc}
   1be6e:	bf00      	nop
   1be70:	10006244 	.word	0x10006244

0001be74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1be74:	b580      	push	{r7, lr}
   1be76:	b084      	sub	sp, #16
   1be78:	af00      	add	r7, sp, #0
   1be7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1be7c:	687b      	ldr	r3, [r7, #4]
   1be7e:	68db      	ldr	r3, [r3, #12]
   1be80:	68db      	ldr	r3, [r3, #12]
   1be82:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1be84:	68bb      	ldr	r3, [r7, #8]
   1be86:	2b00      	cmp	r3, #0
   1be88:	d100      	bne.n	1be8c <xTaskRemoveFromEventList+0x18>
   1be8a:	e7fe      	b.n	1be8a <xTaskRemoveFromEventList+0x16>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1be8c:	68bb      	ldr	r3, [r7, #8]
   1be8e:	3318      	adds	r3, #24
   1be90:	4618      	mov	r0, r3
   1be92:	f7fe ff71 	bl	1ad78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1be96:	4b1f      	ldr	r3, [pc, #124]	; (1bf14 <xTaskRemoveFromEventList+0xa0>)
   1be98:	681b      	ldr	r3, [r3, #0]
   1be9a:	2b00      	cmp	r3, #0
   1be9c:	d11d      	bne.n	1beda <xTaskRemoveFromEventList+0x66>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1be9e:	68bb      	ldr	r3, [r7, #8]
   1bea0:	3304      	adds	r3, #4
   1bea2:	4618      	mov	r0, r3
   1bea4:	f7fe ff68 	bl	1ad78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
   1bea8:	68bb      	ldr	r3, [r7, #8]
   1beaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1beac:	4b1a      	ldr	r3, [pc, #104]	; (1bf18 <xTaskRemoveFromEventList+0xa4>)
   1beae:	681b      	ldr	r3, [r3, #0]
   1beb0:	429a      	cmp	r2, r3
   1beb2:	d903      	bls.n	1bebc <xTaskRemoveFromEventList+0x48>
   1beb4:	68bb      	ldr	r3, [r7, #8]
   1beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1beb8:	4a17      	ldr	r2, [pc, #92]	; (1bf18 <xTaskRemoveFromEventList+0xa4>)
   1beba:	6013      	str	r3, [r2, #0]
   1bebc:	68bb      	ldr	r3, [r7, #8]
   1bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bec0:	4613      	mov	r3, r2
   1bec2:	009b      	lsls	r3, r3, #2
   1bec4:	4413      	add	r3, r2
   1bec6:	009b      	lsls	r3, r3, #2
   1bec8:	4a14      	ldr	r2, [pc, #80]	; (1bf1c <xTaskRemoveFromEventList+0xa8>)
   1beca:	441a      	add	r2, r3
   1becc:	68bb      	ldr	r3, [r7, #8]
   1bece:	3304      	adds	r3, #4
   1bed0:	4619      	mov	r1, r3
   1bed2:	4610      	mov	r0, r2
   1bed4:	f7fe fef3 	bl	1acbe <vListInsertEnd>
   1bed8:	e005      	b.n	1bee6 <xTaskRemoveFromEventList+0x72>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1beda:	68bb      	ldr	r3, [r7, #8]
   1bedc:	3318      	adds	r3, #24
   1bede:	4619      	mov	r1, r3
   1bee0:	480f      	ldr	r0, [pc, #60]	; (1bf20 <xTaskRemoveFromEventList+0xac>)
   1bee2:	f7fe feec 	bl	1acbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1bee6:	68bb      	ldr	r3, [r7, #8]
   1bee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1beea:	4b0e      	ldr	r3, [pc, #56]	; (1bf24 <xTaskRemoveFromEventList+0xb0>)
   1beec:	681b      	ldr	r3, [r3, #0]
   1beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bef0:	429a      	cmp	r2, r3
   1bef2:	d905      	bls.n	1bf00 <xTaskRemoveFromEventList+0x8c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1bef4:	2301      	movs	r3, #1
   1bef6:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1bef8:	4b0b      	ldr	r3, [pc, #44]	; (1bf28 <xTaskRemoveFromEventList+0xb4>)
   1befa:	2201      	movs	r2, #1
   1befc:	601a      	str	r2, [r3, #0]
   1befe:	e001      	b.n	1bf04 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
   1bf00:	2300      	movs	r3, #0
   1bf02:	60fb      	str	r3, [r7, #12]
		normally left unchanged, because it is automatically reset to a new
		value when the tick count equals xNextTaskUnblockTime.  However if
		tickless idling is used it might be more important to enter sleep mode
		at the earliest possible time - so reset xNextTaskUnblockTime here to
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
   1bf04:	f000 f976 	bl	1c1f4 <prvResetNextTaskUnblockTime>
	}
	#endif

	return xReturn;
   1bf08:	68fb      	ldr	r3, [r7, #12]
}
   1bf0a:	4618      	mov	r0, r3
   1bf0c:	3710      	adds	r7, #16
   1bf0e:	46bd      	mov	sp, r7
   1bf10:	bd80      	pop	{r7, pc}
   1bf12:	bf00      	nop
   1bf14:	10006318 	.word	0x10006318
   1bf18:	100062f8 	.word	0x100062f8
   1bf1c:	10006248 	.word	0x10006248
   1bf20:	100062c8 	.word	0x100062c8
   1bf24:	10006244 	.word	0x10006244
   1bf28:	10006304 	.word	0x10006304

0001bf2c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
   1bf2c:	b580      	push	{r7, lr}
   1bf2e:	b084      	sub	sp, #16
   1bf30:	af00      	add	r7, sp, #0
   1bf32:	6078      	str	r0, [r7, #4]
   1bf34:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
   1bf36:	4b1f      	ldr	r3, [pc, #124]	; (1bfb4 <vTaskRemoveFromUnorderedEventList+0x88>)
   1bf38:	681b      	ldr	r3, [r3, #0]
   1bf3a:	2b00      	cmp	r3, #0
   1bf3c:	d100      	bne.n	1bf40 <vTaskRemoveFromUnorderedEventList+0x14>
   1bf3e:	e7fe      	b.n	1bf3e <vTaskRemoveFromUnorderedEventList+0x12>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
   1bf40:	683b      	ldr	r3, [r7, #0]
   1bf42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
   1bf46:	687b      	ldr	r3, [r7, #4]
   1bf48:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1bf4a:	687b      	ldr	r3, [r7, #4]
   1bf4c:	68db      	ldr	r3, [r3, #12]
   1bf4e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
   1bf50:	68fb      	ldr	r3, [r7, #12]
   1bf52:	2b00      	cmp	r3, #0
   1bf54:	d100      	bne.n	1bf58 <vTaskRemoveFromUnorderedEventList+0x2c>
   1bf56:	e7fe      	b.n	1bf56 <vTaskRemoveFromUnorderedEventList+0x2a>
	( void ) uxListRemove( pxEventListItem );
   1bf58:	6878      	ldr	r0, [r7, #4]
   1bf5a:	f7fe ff0d 	bl	1ad78 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1bf5e:	68fb      	ldr	r3, [r7, #12]
   1bf60:	3304      	adds	r3, #4
   1bf62:	4618      	mov	r0, r3
   1bf64:	f7fe ff08 	bl	1ad78 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
   1bf68:	68fb      	ldr	r3, [r7, #12]
   1bf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf6c:	4b12      	ldr	r3, [pc, #72]	; (1bfb8 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1bf6e:	681b      	ldr	r3, [r3, #0]
   1bf70:	429a      	cmp	r2, r3
   1bf72:	d903      	bls.n	1bf7c <vTaskRemoveFromUnorderedEventList+0x50>
   1bf74:	68fb      	ldr	r3, [r7, #12]
   1bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf78:	4a0f      	ldr	r2, [pc, #60]	; (1bfb8 <vTaskRemoveFromUnorderedEventList+0x8c>)
   1bf7a:	6013      	str	r3, [r2, #0]
   1bf7c:	68fb      	ldr	r3, [r7, #12]
   1bf7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf80:	4613      	mov	r3, r2
   1bf82:	009b      	lsls	r3, r3, #2
   1bf84:	4413      	add	r3, r2
   1bf86:	009b      	lsls	r3, r3, #2
   1bf88:	4a0c      	ldr	r2, [pc, #48]	; (1bfbc <vTaskRemoveFromUnorderedEventList+0x90>)
   1bf8a:	441a      	add	r2, r3
   1bf8c:	68fb      	ldr	r3, [r7, #12]
   1bf8e:	3304      	adds	r3, #4
   1bf90:	4619      	mov	r1, r3
   1bf92:	4610      	mov	r0, r2
   1bf94:	f7fe fe93 	bl	1acbe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1bf98:	68fb      	ldr	r3, [r7, #12]
   1bf9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bf9c:	4b08      	ldr	r3, [pc, #32]	; (1bfc0 <vTaskRemoveFromUnorderedEventList+0x94>)
   1bf9e:	681b      	ldr	r3, [r3, #0]
   1bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bfa2:	429a      	cmp	r2, r3
   1bfa4:	d902      	bls.n	1bfac <vTaskRemoveFromUnorderedEventList+0x80>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
   1bfa6:	4b07      	ldr	r3, [pc, #28]	; (1bfc4 <vTaskRemoveFromUnorderedEventList+0x98>)
   1bfa8:	2201      	movs	r2, #1
   1bfaa:	601a      	str	r2, [r3, #0]
	}
}
   1bfac:	bf00      	nop
   1bfae:	3710      	adds	r7, #16
   1bfb0:	46bd      	mov	sp, r7
   1bfb2:	bd80      	pop	{r7, pc}
   1bfb4:	10006318 	.word	0x10006318
   1bfb8:	100062f8 	.word	0x100062f8
   1bfbc:	10006248 	.word	0x10006248
   1bfc0:	10006244 	.word	0x10006244
   1bfc4:	10006304 	.word	0x10006304

0001bfc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bfc8:	b480      	push	{r7}
   1bfca:	b083      	sub	sp, #12
   1bfcc:	af00      	add	r7, sp, #0
   1bfce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bfd0:	4b06      	ldr	r3, [pc, #24]	; (1bfec <vTaskInternalSetTimeOutState+0x24>)
   1bfd2:	681a      	ldr	r2, [r3, #0]
   1bfd4:	687b      	ldr	r3, [r7, #4]
   1bfd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bfd8:	4b05      	ldr	r3, [pc, #20]	; (1bff0 <vTaskInternalSetTimeOutState+0x28>)
   1bfda:	681a      	ldr	r2, [r3, #0]
   1bfdc:	687b      	ldr	r3, [r7, #4]
   1bfde:	605a      	str	r2, [r3, #4]
}
   1bfe0:	bf00      	nop
   1bfe2:	370c      	adds	r7, #12
   1bfe4:	46bd      	mov	sp, r7
   1bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
   1bfea:	4770      	bx	lr
   1bfec:	10006308 	.word	0x10006308
   1bff0:	100062f4 	.word	0x100062f4

0001bff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bff4:	b580      	push	{r7, lr}
   1bff6:	b086      	sub	sp, #24
   1bff8:	af00      	add	r7, sp, #0
   1bffa:	6078      	str	r0, [r7, #4]
   1bffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1bffe:	687b      	ldr	r3, [r7, #4]
   1c000:	2b00      	cmp	r3, #0
   1c002:	d100      	bne.n	1c006 <xTaskCheckForTimeOut+0x12>
   1c004:	e7fe      	b.n	1c004 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTicksToWait );
   1c006:	683b      	ldr	r3, [r7, #0]
   1c008:	2b00      	cmp	r3, #0
   1c00a:	d100      	bne.n	1c00e <xTaskCheckForTimeOut+0x1a>
   1c00c:	e7fe      	b.n	1c00c <xTaskCheckForTimeOut+0x18>

	taskENTER_CRITICAL();
   1c00e:	f7fd fc4b 	bl	198a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c012:	4b1d      	ldr	r3, [pc, #116]	; (1c088 <xTaskCheckForTimeOut+0x94>)
   1c014:	681b      	ldr	r3, [r3, #0]
   1c016:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c018:	687b      	ldr	r3, [r7, #4]
   1c01a:	685b      	ldr	r3, [r3, #4]
   1c01c:	693a      	ldr	r2, [r7, #16]
   1c01e:	1ad3      	subs	r3, r2, r3
   1c020:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c022:	683b      	ldr	r3, [r7, #0]
   1c024:	681b      	ldr	r3, [r3, #0]
   1c026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c02a:	d102      	bne.n	1c032 <xTaskCheckForTimeOut+0x3e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c02c:	2300      	movs	r3, #0
   1c02e:	617b      	str	r3, [r7, #20]
   1c030:	e023      	b.n	1c07a <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c032:	687b      	ldr	r3, [r7, #4]
   1c034:	681a      	ldr	r2, [r3, #0]
   1c036:	4b15      	ldr	r3, [pc, #84]	; (1c08c <xTaskCheckForTimeOut+0x98>)
   1c038:	681b      	ldr	r3, [r3, #0]
   1c03a:	429a      	cmp	r2, r3
   1c03c:	d007      	beq.n	1c04e <xTaskCheckForTimeOut+0x5a>
   1c03e:	687b      	ldr	r3, [r7, #4]
   1c040:	685a      	ldr	r2, [r3, #4]
   1c042:	693b      	ldr	r3, [r7, #16]
   1c044:	429a      	cmp	r2, r3
   1c046:	d802      	bhi.n	1c04e <xTaskCheckForTimeOut+0x5a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c048:	2301      	movs	r3, #1
   1c04a:	617b      	str	r3, [r7, #20]
   1c04c:	e015      	b.n	1c07a <xTaskCheckForTimeOut+0x86>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c04e:	683b      	ldr	r3, [r7, #0]
   1c050:	681a      	ldr	r2, [r3, #0]
   1c052:	68fb      	ldr	r3, [r7, #12]
   1c054:	429a      	cmp	r2, r3
   1c056:	d90b      	bls.n	1c070 <xTaskCheckForTimeOut+0x7c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c058:	683b      	ldr	r3, [r7, #0]
   1c05a:	681a      	ldr	r2, [r3, #0]
   1c05c:	68fb      	ldr	r3, [r7, #12]
   1c05e:	1ad2      	subs	r2, r2, r3
   1c060:	683b      	ldr	r3, [r7, #0]
   1c062:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c064:	6878      	ldr	r0, [r7, #4]
   1c066:	f7ff ffaf 	bl	1bfc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
   1c06a:	2300      	movs	r3, #0
   1c06c:	617b      	str	r3, [r7, #20]
   1c06e:	e004      	b.n	1c07a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			*pxTicksToWait = 0;
   1c070:	683b      	ldr	r3, [r7, #0]
   1c072:	2200      	movs	r2, #0
   1c074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c076:	2301      	movs	r3, #1
   1c078:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c07a:	f7fd fc3b 	bl	198f4 <vPortExitCritical>

	return xReturn;
   1c07e:	697b      	ldr	r3, [r7, #20]
}
   1c080:	4618      	mov	r0, r3
   1c082:	3718      	adds	r7, #24
   1c084:	46bd      	mov	sp, r7
   1c086:	bd80      	pop	{r7, pc}
   1c088:	100062f4 	.word	0x100062f4
   1c08c:	10006308 	.word	0x10006308

0001c090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c090:	b480      	push	{r7}
   1c092:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c094:	4b03      	ldr	r3, [pc, #12]	; (1c0a4 <vTaskMissedYield+0x14>)
   1c096:	2201      	movs	r2, #1
   1c098:	601a      	str	r2, [r3, #0]
}
   1c09a:	bf00      	nop
   1c09c:	46bd      	mov	sp, r7
   1c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c0a2:	4770      	bx	lr
   1c0a4:	10006304 	.word	0x10006304

0001c0a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c0a8:	b580      	push	{r7, lr}
   1c0aa:	b084      	sub	sp, #16
   1c0ac:	af00      	add	r7, sp, #0
   1c0ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c0b0:	f000 f898 	bl	1c1e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c0b4:	4b13      	ldr	r3, [pc, #76]	; (1c104 <prvIdleTask+0x5c>)
   1c0b6:	681b      	ldr	r3, [r3, #0]
   1c0b8:	2b01      	cmp	r3, #1
   1c0ba:	d907      	bls.n	1c0cc <prvIdleTask+0x24>
			{
				taskYIELD();
   1c0bc:	4b12      	ldr	r3, [pc, #72]	; (1c108 <prvIdleTask+0x60>)
   1c0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c0c2:	601a      	str	r2, [r3, #0]
   1c0c4:	f3bf 8f4f 	dsb	sy
   1c0c8:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
   1c0cc:	f7ff fc5c 	bl	1b988 <prvGetExpectedIdleTime>
   1c0d0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1c0d2:	68fb      	ldr	r3, [r7, #12]
   1c0d4:	2b01      	cmp	r3, #1
   1c0d6:	d9eb      	bls.n	1c0b0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
   1c0d8:	f7ff fc48 	bl	1b96c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
   1c0dc:	4b0b      	ldr	r3, [pc, #44]	; (1c10c <prvIdleTask+0x64>)
   1c0de:	681a      	ldr	r2, [r3, #0]
   1c0e0:	4b0b      	ldr	r3, [pc, #44]	; (1c110 <prvIdleTask+0x68>)
   1c0e2:	681b      	ldr	r3, [r3, #0]
   1c0e4:	429a      	cmp	r2, r3
   1c0e6:	d200      	bcs.n	1c0ea <prvIdleTask+0x42>
   1c0e8:	e7fe      	b.n	1c0e8 <prvIdleTask+0x40>
					xExpectedIdleTime = prvGetExpectedIdleTime();
   1c0ea:	f7ff fc4d 	bl	1b988 <prvGetExpectedIdleTime>
   1c0ee:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
   1c0f0:	68fb      	ldr	r3, [r7, #12]
   1c0f2:	2b01      	cmp	r3, #1
   1c0f4:	d902      	bls.n	1c0fc <prvIdleTask+0x54>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
   1c0f6:	68f8      	ldr	r0, [r7, #12]
   1c0f8:	f7fd fca4 	bl	19a44 <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
   1c0fc:	f7ff fc7c 	bl	1b9f8 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
   1c100:	e7d6      	b.n	1c0b0 <prvIdleTask+0x8>
   1c102:	bf00      	nop
   1c104:	10006248 	.word	0x10006248
   1c108:	e000ed04 	.word	0xe000ed04
   1c10c:	10006310 	.word	0x10006310
   1c110:	100062f4 	.word	0x100062f4

0001c114 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
   1c114:	b480      	push	{r7}
   1c116:	b083      	sub	sp, #12
   1c118:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
   1c11a:	2301      	movs	r3, #1
   1c11c:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
   1c11e:	2301      	movs	r3, #1
   1c120:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
   1c122:	4b0f      	ldr	r3, [pc, #60]	; (1c160 <eTaskConfirmSleepModeStatus+0x4c>)
   1c124:	681b      	ldr	r3, [r3, #0]
   1c126:	2b00      	cmp	r3, #0
   1c128:	d002      	beq.n	1c130 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1c12a:	2300      	movs	r3, #0
   1c12c:	71fb      	strb	r3, [r7, #7]
   1c12e:	e010      	b.n	1c152 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
   1c130:	4b0c      	ldr	r3, [pc, #48]	; (1c164 <eTaskConfirmSleepModeStatus+0x50>)
   1c132:	681b      	ldr	r3, [r3, #0]
   1c134:	2b00      	cmp	r3, #0
   1c136:	d002      	beq.n	1c13e <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
   1c138:	2300      	movs	r3, #0
   1c13a:	71fb      	strb	r3, [r7, #7]
   1c13c:	e009      	b.n	1c152 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
   1c13e:	4b0a      	ldr	r3, [pc, #40]	; (1c168 <eTaskConfirmSleepModeStatus+0x54>)
   1c140:	681a      	ldr	r2, [r3, #0]
   1c142:	4b0a      	ldr	r3, [pc, #40]	; (1c16c <eTaskConfirmSleepModeStatus+0x58>)
   1c144:	6819      	ldr	r1, [r3, #0]
   1c146:	683b      	ldr	r3, [r7, #0]
   1c148:	1acb      	subs	r3, r1, r3
   1c14a:	429a      	cmp	r2, r3
   1c14c:	d101      	bne.n	1c152 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
   1c14e:	2302      	movs	r3, #2
   1c150:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
   1c152:	79fb      	ldrb	r3, [r7, #7]
	}
   1c154:	4618      	mov	r0, r3
   1c156:	370c      	adds	r7, #12
   1c158:	46bd      	mov	sp, r7
   1c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c15e:	4770      	bx	lr
   1c160:	100062c8 	.word	0x100062c8
   1c164:	10006304 	.word	0x10006304
   1c168:	100062dc 	.word	0x100062dc
   1c16c:	100062f0 	.word	0x100062f0

0001c170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c170:	b580      	push	{r7, lr}
   1c172:	b082      	sub	sp, #8
   1c174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c176:	2300      	movs	r3, #0
   1c178:	607b      	str	r3, [r7, #4]
   1c17a:	e00c      	b.n	1c196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c17c:	687a      	ldr	r2, [r7, #4]
   1c17e:	4613      	mov	r3, r2
   1c180:	009b      	lsls	r3, r3, #2
   1c182:	4413      	add	r3, r2
   1c184:	009b      	lsls	r3, r3, #2
   1c186:	4a10      	ldr	r2, [pc, #64]	; (1c1c8 <prvInitialiseTaskLists+0x58>)
   1c188:	4413      	add	r3, r2
   1c18a:	4618      	mov	r0, r3
   1c18c:	f7fe fd6a 	bl	1ac64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c190:	687b      	ldr	r3, [r7, #4]
   1c192:	3301      	adds	r3, #1
   1c194:	607b      	str	r3, [r7, #4]
   1c196:	687b      	ldr	r3, [r7, #4]
   1c198:	2b03      	cmp	r3, #3
   1c19a:	d9ef      	bls.n	1c17c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c19c:	480b      	ldr	r0, [pc, #44]	; (1c1cc <prvInitialiseTaskLists+0x5c>)
   1c19e:	f7fe fd61 	bl	1ac64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
   1c1a2:	480b      	ldr	r0, [pc, #44]	; (1c1d0 <prvInitialiseTaskLists+0x60>)
   1c1a4:	f7fe fd5e 	bl	1ac64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
   1c1a8:	480a      	ldr	r0, [pc, #40]	; (1c1d4 <prvInitialiseTaskLists+0x64>)
   1c1aa:	f7fe fd5b 	bl	1ac64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c1ae:	480a      	ldr	r0, [pc, #40]	; (1c1d8 <prvInitialiseTaskLists+0x68>)
   1c1b0:	f7fe fd58 	bl	1ac64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c1b4:	4b09      	ldr	r3, [pc, #36]	; (1c1dc <prvInitialiseTaskLists+0x6c>)
   1c1b6:	4a05      	ldr	r2, [pc, #20]	; (1c1cc <prvInitialiseTaskLists+0x5c>)
   1c1b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c1ba:	4b09      	ldr	r3, [pc, #36]	; (1c1e0 <prvInitialiseTaskLists+0x70>)
   1c1bc:	4a04      	ldr	r2, [pc, #16]	; (1c1d0 <prvInitialiseTaskLists+0x60>)
   1c1be:	601a      	str	r2, [r3, #0]
}
   1c1c0:	bf00      	nop
   1c1c2:	3708      	adds	r7, #8
   1c1c4:	46bd      	mov	sp, r7
   1c1c6:	bd80      	pop	{r7, pc}
   1c1c8:	10006248 	.word	0x10006248
   1c1cc:	10006298 	.word	0x10006298
   1c1d0:	100062ac 	.word	0x100062ac
   1c1d4:	100062c8 	.word	0x100062c8
   1c1d8:	100062dc 	.word	0x100062dc
   1c1dc:	100062c0 	.word	0x100062c0
   1c1e0:	100062c4 	.word	0x100062c4

0001c1e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c1e4:	b480      	push	{r7}
   1c1e6:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c1e8:	bf00      	nop
   1c1ea:	46bd      	mov	sp, r7
   1c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c1f0:	4770      	bx	lr
	...

0001c1f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1c1f4:	b480      	push	{r7}
   1c1f6:	b083      	sub	sp, #12
   1c1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c1fa:	4b0c      	ldr	r3, [pc, #48]	; (1c22c <prvResetNextTaskUnblockTime+0x38>)
   1c1fc:	681b      	ldr	r3, [r3, #0]
   1c1fe:	681b      	ldr	r3, [r3, #0]
   1c200:	2b00      	cmp	r3, #0
   1c202:	d104      	bne.n	1c20e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1c204:	4b0a      	ldr	r3, [pc, #40]	; (1c230 <prvResetNextTaskUnblockTime+0x3c>)
   1c206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c20a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1c20c:	e008      	b.n	1c220 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1c20e:	4b07      	ldr	r3, [pc, #28]	; (1c22c <prvResetNextTaskUnblockTime+0x38>)
   1c210:	681b      	ldr	r3, [r3, #0]
   1c212:	68db      	ldr	r3, [r3, #12]
   1c214:	68db      	ldr	r3, [r3, #12]
   1c216:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1c218:	687b      	ldr	r3, [r7, #4]
   1c21a:	685b      	ldr	r3, [r3, #4]
   1c21c:	4a04      	ldr	r2, [pc, #16]	; (1c230 <prvResetNextTaskUnblockTime+0x3c>)
   1c21e:	6013      	str	r3, [r2, #0]
}
   1c220:	bf00      	nop
   1c222:	370c      	adds	r7, #12
   1c224:	46bd      	mov	sp, r7
   1c226:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c22a:	4770      	bx	lr
   1c22c:	100062c0 	.word	0x100062c0
   1c230:	10006310 	.word	0x10006310

0001c234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1c234:	b480      	push	{r7}
   1c236:	b083      	sub	sp, #12
   1c238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1c23a:	4b0b      	ldr	r3, [pc, #44]	; (1c268 <xTaskGetSchedulerState+0x34>)
   1c23c:	681b      	ldr	r3, [r3, #0]
   1c23e:	2b00      	cmp	r3, #0
   1c240:	d102      	bne.n	1c248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1c242:	2301      	movs	r3, #1
   1c244:	607b      	str	r3, [r7, #4]
   1c246:	e008      	b.n	1c25a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c248:	4b08      	ldr	r3, [pc, #32]	; (1c26c <xTaskGetSchedulerState+0x38>)
   1c24a:	681b      	ldr	r3, [r3, #0]
   1c24c:	2b00      	cmp	r3, #0
   1c24e:	d102      	bne.n	1c256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1c250:	2302      	movs	r3, #2
   1c252:	607b      	str	r3, [r7, #4]
   1c254:	e001      	b.n	1c25a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1c256:	2300      	movs	r3, #0
   1c258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1c25a:	687b      	ldr	r3, [r7, #4]
	}
   1c25c:	4618      	mov	r0, r3
   1c25e:	370c      	adds	r7, #12
   1c260:	46bd      	mov	sp, r7
   1c262:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c266:	4770      	bx	lr
   1c268:	100062fc 	.word	0x100062fc
   1c26c:	10006318 	.word	0x10006318

0001c270 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
   1c270:	b480      	push	{r7}
   1c272:	b083      	sub	sp, #12
   1c274:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
   1c276:	4b09      	ldr	r3, [pc, #36]	; (1c29c <uxTaskResetEventItemValue+0x2c>)
   1c278:	681b      	ldr	r3, [r3, #0]
   1c27a:	699b      	ldr	r3, [r3, #24]
   1c27c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c27e:	4b07      	ldr	r3, [pc, #28]	; (1c29c <uxTaskResetEventItemValue+0x2c>)
   1c280:	681b      	ldr	r3, [r3, #0]
   1c282:	4a06      	ldr	r2, [pc, #24]	; (1c29c <uxTaskResetEventItemValue+0x2c>)
   1c284:	6812      	ldr	r2, [r2, #0]
   1c286:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c288:	f1c2 0204 	rsb	r2, r2, #4
   1c28c:	619a      	str	r2, [r3, #24]

	return uxReturn;
   1c28e:	687b      	ldr	r3, [r7, #4]
}
   1c290:	4618      	mov	r0, r3
   1c292:	370c      	adds	r7, #12
   1c294:	46bd      	mov	sp, r7
   1c296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c29a:	4770      	bx	lr
   1c29c:	10006244 	.word	0x10006244

0001c2a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c2a0:	b580      	push	{r7, lr}
   1c2a2:	b084      	sub	sp, #16
   1c2a4:	af00      	add	r7, sp, #0
   1c2a6:	6078      	str	r0, [r7, #4]
   1c2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c2aa:	4b21      	ldr	r3, [pc, #132]	; (1c330 <prvAddCurrentTaskToDelayedList+0x90>)
   1c2ac:	681b      	ldr	r3, [r3, #0]
   1c2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c2b0:	4b20      	ldr	r3, [pc, #128]	; (1c334 <prvAddCurrentTaskToDelayedList+0x94>)
   1c2b2:	681b      	ldr	r3, [r3, #0]
   1c2b4:	3304      	adds	r3, #4
   1c2b6:	4618      	mov	r0, r3
   1c2b8:	f7fe fd5e 	bl	1ad78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c2bc:	687b      	ldr	r3, [r7, #4]
   1c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c2c2:	d10a      	bne.n	1c2da <prvAddCurrentTaskToDelayedList+0x3a>
   1c2c4:	683b      	ldr	r3, [r7, #0]
   1c2c6:	2b00      	cmp	r3, #0
   1c2c8:	d007      	beq.n	1c2da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c2ca:	4b1a      	ldr	r3, [pc, #104]	; (1c334 <prvAddCurrentTaskToDelayedList+0x94>)
   1c2cc:	681b      	ldr	r3, [r3, #0]
   1c2ce:	3304      	adds	r3, #4
   1c2d0:	4619      	mov	r1, r3
   1c2d2:	4819      	ldr	r0, [pc, #100]	; (1c338 <prvAddCurrentTaskToDelayedList+0x98>)
   1c2d4:	f7fe fcf3 	bl	1acbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c2d8:	e026      	b.n	1c328 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c2da:	68fa      	ldr	r2, [r7, #12]
   1c2dc:	687b      	ldr	r3, [r7, #4]
   1c2de:	4413      	add	r3, r2
   1c2e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c2e2:	4b14      	ldr	r3, [pc, #80]	; (1c334 <prvAddCurrentTaskToDelayedList+0x94>)
   1c2e4:	681b      	ldr	r3, [r3, #0]
   1c2e6:	68ba      	ldr	r2, [r7, #8]
   1c2e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c2ea:	68ba      	ldr	r2, [r7, #8]
   1c2ec:	68fb      	ldr	r3, [r7, #12]
   1c2ee:	429a      	cmp	r2, r3
   1c2f0:	d209      	bcs.n	1c306 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c2f2:	4b12      	ldr	r3, [pc, #72]	; (1c33c <prvAddCurrentTaskToDelayedList+0x9c>)
   1c2f4:	681a      	ldr	r2, [r3, #0]
   1c2f6:	4b0f      	ldr	r3, [pc, #60]	; (1c334 <prvAddCurrentTaskToDelayedList+0x94>)
   1c2f8:	681b      	ldr	r3, [r3, #0]
   1c2fa:	3304      	adds	r3, #4
   1c2fc:	4619      	mov	r1, r3
   1c2fe:	4610      	mov	r0, r2
   1c300:	f7fe fd01 	bl	1ad06 <vListInsert>
}
   1c304:	e010      	b.n	1c328 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c306:	4b0e      	ldr	r3, [pc, #56]	; (1c340 <prvAddCurrentTaskToDelayedList+0xa0>)
   1c308:	681a      	ldr	r2, [r3, #0]
   1c30a:	4b0a      	ldr	r3, [pc, #40]	; (1c334 <prvAddCurrentTaskToDelayedList+0x94>)
   1c30c:	681b      	ldr	r3, [r3, #0]
   1c30e:	3304      	adds	r3, #4
   1c310:	4619      	mov	r1, r3
   1c312:	4610      	mov	r0, r2
   1c314:	f7fe fcf7 	bl	1ad06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
   1c318:	4b0a      	ldr	r3, [pc, #40]	; (1c344 <prvAddCurrentTaskToDelayedList+0xa4>)
   1c31a:	681b      	ldr	r3, [r3, #0]
   1c31c:	68ba      	ldr	r2, [r7, #8]
   1c31e:	429a      	cmp	r2, r3
   1c320:	d202      	bcs.n	1c328 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c322:	4a08      	ldr	r2, [pc, #32]	; (1c344 <prvAddCurrentTaskToDelayedList+0xa4>)
   1c324:	68bb      	ldr	r3, [r7, #8]
   1c326:	6013      	str	r3, [r2, #0]
}
   1c328:	bf00      	nop
   1c32a:	3710      	adds	r7, #16
   1c32c:	46bd      	mov	sp, r7
   1c32e:	bd80      	pop	{r7, pc}
   1c330:	100062f4 	.word	0x100062f4
   1c334:	10006244 	.word	0x10006244
   1c338:	100062dc 	.word	0x100062dc
   1c33c:	100062c4 	.word	0x100062c4
   1c340:	100062c0 	.word	0x100062c0
   1c344:	10006310 	.word	0x10006310

0001c348 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c348:	b580      	push	{r7, lr}
   1c34a:	b084      	sub	sp, #16
   1c34c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c34e:	2300      	movs	r3, #0
   1c350:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c352:	f000 fab1 	bl	1c8b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
   1c356:	4b0c      	ldr	r3, [pc, #48]	; (1c388 <xTimerCreateTimerTask+0x40>)
   1c358:	681b      	ldr	r3, [r3, #0]
   1c35a:	2b00      	cmp	r3, #0
   1c35c:	d00b      	beq.n	1c376 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c35e:	4b0b      	ldr	r3, [pc, #44]	; (1c38c <xTimerCreateTimerTask+0x44>)
   1c360:	9301      	str	r3, [sp, #4]
   1c362:	2303      	movs	r3, #3
   1c364:	9300      	str	r3, [sp, #0]
   1c366:	2300      	movs	r3, #0
   1c368:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c36c:	4908      	ldr	r1, [pc, #32]	; (1c390 <xTimerCreateTimerTask+0x48>)
   1c36e:	4809      	ldr	r0, [pc, #36]	; (1c394 <xTimerCreateTimerTask+0x4c>)
   1c370:	f7ff f924 	bl	1b5bc <xTaskCreate>
   1c374:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c376:	687b      	ldr	r3, [r7, #4]
   1c378:	2b00      	cmp	r3, #0
   1c37a:	d100      	bne.n	1c37e <xTimerCreateTimerTask+0x36>
   1c37c:	e7fe      	b.n	1c37c <xTimerCreateTimerTask+0x34>
	return xReturn;
   1c37e:	687b      	ldr	r3, [r7, #4]
}
   1c380:	4618      	mov	r0, r3
   1c382:	3708      	adds	r7, #8
   1c384:	46bd      	mov	sp, r7
   1c386:	bd80      	pop	{r7, pc}
   1c388:	1000634c 	.word	0x1000634c
   1c38c:	10006350 	.word	0x10006350
   1c390:	00021d18 	.word	0x00021d18
   1c394:	0001c519 	.word	0x0001c519

0001c398 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
   1c398:	b580      	push	{r7, lr}
   1c39a:	b088      	sub	sp, #32
   1c39c:	af02      	add	r7, sp, #8
   1c39e:	60f8      	str	r0, [r7, #12]
   1c3a0:	60b9      	str	r1, [r7, #8]
   1c3a2:	607a      	str	r2, [r7, #4]
   1c3a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
   1c3a6:	2028      	movs	r0, #40	; 0x28
   1c3a8:	f7fe fa02 	bl	1a7b0 <pvPortMalloc>
   1c3ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
   1c3ae:	697b      	ldr	r3, [r7, #20]
   1c3b0:	2b00      	cmp	r3, #0
   1c3b2:	d009      	beq.n	1c3c8 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
   1c3b4:	697b      	ldr	r3, [r7, #20]
   1c3b6:	9301      	str	r3, [sp, #4]
   1c3b8:	6a3b      	ldr	r3, [r7, #32]
   1c3ba:	9300      	str	r3, [sp, #0]
   1c3bc:	683b      	ldr	r3, [r7, #0]
   1c3be:	687a      	ldr	r2, [r7, #4]
   1c3c0:	68b9      	ldr	r1, [r7, #8]
   1c3c2:	68f8      	ldr	r0, [r7, #12]
   1c3c4:	f000 f805 	bl	1c3d2 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
   1c3c8:	697b      	ldr	r3, [r7, #20]
	}
   1c3ca:	4618      	mov	r0, r3
   1c3cc:	3718      	adds	r7, #24
   1c3ce:	46bd      	mov	sp, r7
   1c3d0:	bd80      	pop	{r7, pc}

0001c3d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
   1c3d2:	b580      	push	{r7, lr}
   1c3d4:	b084      	sub	sp, #16
   1c3d6:	af00      	add	r7, sp, #0
   1c3d8:	60f8      	str	r0, [r7, #12]
   1c3da:	60b9      	str	r1, [r7, #8]
   1c3dc:	607a      	str	r2, [r7, #4]
   1c3de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   1c3e0:	68bb      	ldr	r3, [r7, #8]
   1c3e2:	2b00      	cmp	r3, #0
   1c3e4:	d100      	bne.n	1c3e8 <prvInitialiseNewTimer+0x16>
   1c3e6:	e7fe      	b.n	1c3e6 <prvInitialiseNewTimer+0x14>

	if( pxNewTimer != NULL )
   1c3e8:	69fb      	ldr	r3, [r7, #28]
   1c3ea:	2b00      	cmp	r3, #0
   1c3ec:	d015      	beq.n	1c41a <prvInitialiseNewTimer+0x48>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
   1c3ee:	f000 fa63 	bl	1c8b8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
   1c3f2:	69fb      	ldr	r3, [r7, #28]
   1c3f4:	68fa      	ldr	r2, [r7, #12]
   1c3f6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   1c3f8:	69fb      	ldr	r3, [r7, #28]
   1c3fa:	68ba      	ldr	r2, [r7, #8]
   1c3fc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
   1c3fe:	69fb      	ldr	r3, [r7, #28]
   1c400:	687a      	ldr	r2, [r7, #4]
   1c402:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
   1c404:	69fb      	ldr	r3, [r7, #28]
   1c406:	683a      	ldr	r2, [r7, #0]
   1c408:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   1c40a:	69fb      	ldr	r3, [r7, #28]
   1c40c:	69ba      	ldr	r2, [r7, #24]
   1c40e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   1c410:	69fb      	ldr	r3, [r7, #28]
   1c412:	3304      	adds	r3, #4
   1c414:	4618      	mov	r0, r3
   1c416:	f7fe fc45 	bl	1aca4 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
   1c41a:	bf00      	nop
   1c41c:	3710      	adds	r7, #16
   1c41e:	46bd      	mov	sp, r7
   1c420:	bd80      	pop	{r7, pc}
	...

0001c424 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c424:	b580      	push	{r7, lr}
   1c426:	b08a      	sub	sp, #40	; 0x28
   1c428:	af00      	add	r7, sp, #0
   1c42a:	60f8      	str	r0, [r7, #12]
   1c42c:	60b9      	str	r1, [r7, #8]
   1c42e:	607a      	str	r2, [r7, #4]
   1c430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c432:	2300      	movs	r3, #0
   1c434:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c436:	68fb      	ldr	r3, [r7, #12]
   1c438:	2b00      	cmp	r3, #0
   1c43a:	d100      	bne.n	1c43e <xTimerGenericCommand+0x1a>
   1c43c:	e7fe      	b.n	1c43c <xTimerGenericCommand+0x18>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c43e:	4b1a      	ldr	r3, [pc, #104]	; (1c4a8 <xTimerGenericCommand+0x84>)
   1c440:	681b      	ldr	r3, [r3, #0]
   1c442:	2b00      	cmp	r3, #0
   1c444:	d02a      	beq.n	1c49c <xTimerGenericCommand+0x78>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c446:	68bb      	ldr	r3, [r7, #8]
   1c448:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c44a:	687b      	ldr	r3, [r7, #4]
   1c44c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
   1c44e:	68fb      	ldr	r3, [r7, #12]
   1c450:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c452:	68bb      	ldr	r3, [r7, #8]
   1c454:	2b05      	cmp	r3, #5
   1c456:	dc18      	bgt.n	1c48a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c458:	f7ff feec 	bl	1c234 <xTaskGetSchedulerState>
   1c45c:	4603      	mov	r3, r0
   1c45e:	2b02      	cmp	r3, #2
   1c460:	d109      	bne.n	1c476 <xTimerGenericCommand+0x52>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c462:	4b11      	ldr	r3, [pc, #68]	; (1c4a8 <xTimerGenericCommand+0x84>)
   1c464:	6818      	ldr	r0, [r3, #0]
   1c466:	f107 0114 	add.w	r1, r7, #20
   1c46a:	2300      	movs	r3, #0
   1c46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c46e:	f7fe fd5d 	bl	1af2c <xQueueGenericSend>
   1c472:	6278      	str	r0, [r7, #36]	; 0x24
   1c474:	e012      	b.n	1c49c <xTimerGenericCommand+0x78>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c476:	4b0c      	ldr	r3, [pc, #48]	; (1c4a8 <xTimerGenericCommand+0x84>)
   1c478:	6818      	ldr	r0, [r3, #0]
   1c47a:	f107 0114 	add.w	r1, r7, #20
   1c47e:	2300      	movs	r3, #0
   1c480:	2200      	movs	r2, #0
   1c482:	f7fe fd53 	bl	1af2c <xQueueGenericSend>
   1c486:	6278      	str	r0, [r7, #36]	; 0x24
   1c488:	e008      	b.n	1c49c <xTimerGenericCommand+0x78>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c48a:	4b07      	ldr	r3, [pc, #28]	; (1c4a8 <xTimerGenericCommand+0x84>)
   1c48c:	6818      	ldr	r0, [r3, #0]
   1c48e:	f107 0114 	add.w	r1, r7, #20
   1c492:	2300      	movs	r3, #0
   1c494:	683a      	ldr	r2, [r7, #0]
   1c496:	f7fe fe1f 	bl	1b0d8 <xQueueGenericSendFromISR>
   1c49a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1c49e:	4618      	mov	r0, r3
   1c4a0:	3728      	adds	r7, #40	; 0x28
   1c4a2:	46bd      	mov	sp, r7
   1c4a4:	bd80      	pop	{r7, pc}
   1c4a6:	bf00      	nop
   1c4a8:	1000634c 	.word	0x1000634c

0001c4ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c4ac:	b580      	push	{r7, lr}
   1c4ae:	b086      	sub	sp, #24
   1c4b0:	af02      	add	r7, sp, #8
   1c4b2:	6078      	str	r0, [r7, #4]
   1c4b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1c4b6:	4b17      	ldr	r3, [pc, #92]	; (1c514 <prvProcessExpiredTimer+0x68>)
   1c4b8:	681b      	ldr	r3, [r3, #0]
   1c4ba:	68db      	ldr	r3, [r3, #12]
   1c4bc:	68db      	ldr	r3, [r3, #12]
   1c4be:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c4c0:	68fb      	ldr	r3, [r7, #12]
   1c4c2:	3304      	adds	r3, #4
   1c4c4:	4618      	mov	r0, r3
   1c4c6:	f7fe fc57 	bl	1ad78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c4ca:	68fb      	ldr	r3, [r7, #12]
   1c4cc:	69db      	ldr	r3, [r3, #28]
   1c4ce:	2b01      	cmp	r3, #1
   1c4d0:	d118      	bne.n	1c504 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c4d2:	68fb      	ldr	r3, [r7, #12]
   1c4d4:	699a      	ldr	r2, [r3, #24]
   1c4d6:	687b      	ldr	r3, [r7, #4]
   1c4d8:	18d1      	adds	r1, r2, r3
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	683a      	ldr	r2, [r7, #0]
   1c4de:	68f8      	ldr	r0, [r7, #12]
   1c4e0:	f000 f8be 	bl	1c660 <prvInsertTimerInActiveList>
   1c4e4:	4603      	mov	r3, r0
   1c4e6:	2b00      	cmp	r3, #0
   1c4e8:	d00c      	beq.n	1c504 <prvProcessExpiredTimer+0x58>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	9300      	str	r3, [sp, #0]
   1c4ee:	2300      	movs	r3, #0
   1c4f0:	687a      	ldr	r2, [r7, #4]
   1c4f2:	2100      	movs	r1, #0
   1c4f4:	68f8      	ldr	r0, [r7, #12]
   1c4f6:	f7ff ff95 	bl	1c424 <xTimerGenericCommand>
   1c4fa:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   1c4fc:	68bb      	ldr	r3, [r7, #8]
   1c4fe:	2b00      	cmp	r3, #0
   1c500:	d100      	bne.n	1c504 <prvProcessExpiredTimer+0x58>
   1c502:	e7fe      	b.n	1c502 <prvProcessExpiredTimer+0x56>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c504:	68fb      	ldr	r3, [r7, #12]
   1c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c508:	68f8      	ldr	r0, [r7, #12]
   1c50a:	4798      	blx	r3
}
   1c50c:	bf00      	nop
   1c50e:	3710      	adds	r7, #16
   1c510:	46bd      	mov	sp, r7
   1c512:	bd80      	pop	{r7, pc}
   1c514:	10006344 	.word	0x10006344

0001c518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c518:	b580      	push	{r7, lr}
   1c51a:	b084      	sub	sp, #16
   1c51c:	af00      	add	r7, sp, #0
   1c51e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c520:	f107 0308 	add.w	r3, r7, #8
   1c524:	4618      	mov	r0, r3
   1c526:	f000 f857 	bl	1c5d8 <prvGetNextExpireTime>
   1c52a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c52c:	68bb      	ldr	r3, [r7, #8]
   1c52e:	4619      	mov	r1, r3
   1c530:	68f8      	ldr	r0, [r7, #12]
   1c532:	f000 f803 	bl	1c53c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c536:	f000 f8d5 	bl	1c6e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c53a:	e7f1      	b.n	1c520 <prvTimerTask+0x8>

0001c53c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c53c:	b580      	push	{r7, lr}
   1c53e:	b084      	sub	sp, #16
   1c540:	af00      	add	r7, sp, #0
   1c542:	6078      	str	r0, [r7, #4]
   1c544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c546:	f7ff fa11 	bl	1b96c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c54a:	f107 0308 	add.w	r3, r7, #8
   1c54e:	4618      	mov	r0, r3
   1c550:	f000 f866 	bl	1c620 <prvSampleTimeNow>
   1c554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c556:	68bb      	ldr	r3, [r7, #8]
   1c558:	2b00      	cmp	r3, #0
   1c55a:	d130      	bne.n	1c5be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c55c:	683b      	ldr	r3, [r7, #0]
   1c55e:	2b00      	cmp	r3, #0
   1c560:	d10a      	bne.n	1c578 <prvProcessTimerOrBlockTask+0x3c>
   1c562:	687a      	ldr	r2, [r7, #4]
   1c564:	68fb      	ldr	r3, [r7, #12]
   1c566:	429a      	cmp	r2, r3
   1c568:	d806      	bhi.n	1c578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   1c56a:	f7ff fa45 	bl	1b9f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1c56e:	68f9      	ldr	r1, [r7, #12]
   1c570:	6878      	ldr	r0, [r7, #4]
   1c572:	f7ff ff9b 	bl	1c4ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1c576:	e024      	b.n	1c5c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
   1c578:	683b      	ldr	r3, [r7, #0]
   1c57a:	2b00      	cmp	r3, #0
   1c57c:	d008      	beq.n	1c590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1c57e:	4b13      	ldr	r3, [pc, #76]	; (1c5cc <prvProcessTimerOrBlockTask+0x90>)
   1c580:	681b      	ldr	r3, [r3, #0]
   1c582:	681b      	ldr	r3, [r3, #0]
   1c584:	2b00      	cmp	r3, #0
   1c586:	d101      	bne.n	1c58c <prvProcessTimerOrBlockTask+0x50>
   1c588:	2301      	movs	r3, #1
   1c58a:	e000      	b.n	1c58e <prvProcessTimerOrBlockTask+0x52>
   1c58c:	2300      	movs	r3, #0
   1c58e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1c590:	4b0f      	ldr	r3, [pc, #60]	; (1c5d0 <prvProcessTimerOrBlockTask+0x94>)
   1c592:	6818      	ldr	r0, [r3, #0]
   1c594:	687a      	ldr	r2, [r7, #4]
   1c596:	68fb      	ldr	r3, [r7, #12]
   1c598:	1ad3      	subs	r3, r2, r3
   1c59a:	683a      	ldr	r2, [r7, #0]
   1c59c:	4619      	mov	r1, r3
   1c59e:	f7fe ffd9 	bl	1b554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
   1c5a2:	f7ff fa29 	bl	1b9f8 <xTaskResumeAll>
   1c5a6:	4603      	mov	r3, r0
   1c5a8:	2b00      	cmp	r3, #0
   1c5aa:	d10a      	bne.n	1c5c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
   1c5ac:	4b09      	ldr	r3, [pc, #36]	; (1c5d4 <prvProcessTimerOrBlockTask+0x98>)
   1c5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c5b2:	601a      	str	r2, [r3, #0]
   1c5b4:	f3bf 8f4f 	dsb	sy
   1c5b8:	f3bf 8f6f 	isb	sy
}
   1c5bc:	e001      	b.n	1c5c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
   1c5be:	f7ff fa1b 	bl	1b9f8 <xTaskResumeAll>
}
   1c5c2:	bf00      	nop
   1c5c4:	3710      	adds	r7, #16
   1c5c6:	46bd      	mov	sp, r7
   1c5c8:	bd80      	pop	{r7, pc}
   1c5ca:	bf00      	nop
   1c5cc:	10006348 	.word	0x10006348
   1c5d0:	1000634c 	.word	0x1000634c
   1c5d4:	e000ed04 	.word	0xe000ed04

0001c5d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1c5d8:	b480      	push	{r7}
   1c5da:	b085      	sub	sp, #20
   1c5dc:	af00      	add	r7, sp, #0
   1c5de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1c5e0:	4b0e      	ldr	r3, [pc, #56]	; (1c61c <prvGetNextExpireTime+0x44>)
   1c5e2:	681b      	ldr	r3, [r3, #0]
   1c5e4:	681b      	ldr	r3, [r3, #0]
   1c5e6:	2b00      	cmp	r3, #0
   1c5e8:	d101      	bne.n	1c5ee <prvGetNextExpireTime+0x16>
   1c5ea:	2201      	movs	r2, #1
   1c5ec:	e000      	b.n	1c5f0 <prvGetNextExpireTime+0x18>
   1c5ee:	2200      	movs	r2, #0
   1c5f0:	687b      	ldr	r3, [r7, #4]
   1c5f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1c5f4:	687b      	ldr	r3, [r7, #4]
   1c5f6:	681b      	ldr	r3, [r3, #0]
   1c5f8:	2b00      	cmp	r3, #0
   1c5fa:	d105      	bne.n	1c608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c5fc:	4b07      	ldr	r3, [pc, #28]	; (1c61c <prvGetNextExpireTime+0x44>)
   1c5fe:	681b      	ldr	r3, [r3, #0]
   1c600:	68db      	ldr	r3, [r3, #12]
   1c602:	681b      	ldr	r3, [r3, #0]
   1c604:	60fb      	str	r3, [r7, #12]
   1c606:	e001      	b.n	1c60c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1c608:	2300      	movs	r3, #0
   1c60a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1c60c:	68fb      	ldr	r3, [r7, #12]
}
   1c60e:	4618      	mov	r0, r3
   1c610:	3714      	adds	r7, #20
   1c612:	46bd      	mov	sp, r7
   1c614:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c618:	4770      	bx	lr
   1c61a:	bf00      	nop
   1c61c:	10006344 	.word	0x10006344

0001c620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1c620:	b580      	push	{r7, lr}
   1c622:	b084      	sub	sp, #16
   1c624:	af00      	add	r7, sp, #0
   1c626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1c628:	f7ff fa7a 	bl	1bb20 <xTaskGetTickCount>
   1c62c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   1c62e:	4b0b      	ldr	r3, [pc, #44]	; (1c65c <prvSampleTimeNow+0x3c>)
   1c630:	681b      	ldr	r3, [r3, #0]
   1c632:	68fa      	ldr	r2, [r7, #12]
   1c634:	429a      	cmp	r2, r3
   1c636:	d205      	bcs.n	1c644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   1c638:	f000 f8e6 	bl	1c808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
   1c63c:	687b      	ldr	r3, [r7, #4]
   1c63e:	2201      	movs	r2, #1
   1c640:	601a      	str	r2, [r3, #0]
   1c642:	e002      	b.n	1c64a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1c644:	687b      	ldr	r3, [r7, #4]
   1c646:	2200      	movs	r2, #0
   1c648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1c64a:	4a04      	ldr	r2, [pc, #16]	; (1c65c <prvSampleTimeNow+0x3c>)
   1c64c:	68fb      	ldr	r3, [r7, #12]
   1c64e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
   1c650:	68fb      	ldr	r3, [r7, #12]
}
   1c652:	4618      	mov	r0, r3
   1c654:	3710      	adds	r7, #16
   1c656:	46bd      	mov	sp, r7
   1c658:	bd80      	pop	{r7, pc}
   1c65a:	bf00      	nop
   1c65c:	10006354 	.word	0x10006354

0001c660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1c660:	b580      	push	{r7, lr}
   1c662:	b086      	sub	sp, #24
   1c664:	af00      	add	r7, sp, #0
   1c666:	60f8      	str	r0, [r7, #12]
   1c668:	60b9      	str	r1, [r7, #8]
   1c66a:	607a      	str	r2, [r7, #4]
   1c66c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1c66e:	2300      	movs	r3, #0
   1c670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1c672:	68fb      	ldr	r3, [r7, #12]
   1c674:	68ba      	ldr	r2, [r7, #8]
   1c676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c678:	68fb      	ldr	r3, [r7, #12]
   1c67a:	68fa      	ldr	r2, [r7, #12]
   1c67c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1c67e:	68ba      	ldr	r2, [r7, #8]
   1c680:	687b      	ldr	r3, [r7, #4]
   1c682:	429a      	cmp	r2, r3
   1c684:	d812      	bhi.n	1c6ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c686:	687a      	ldr	r2, [r7, #4]
   1c688:	683b      	ldr	r3, [r7, #0]
   1c68a:	1ad2      	subs	r2, r2, r3
   1c68c:	68fb      	ldr	r3, [r7, #12]
   1c68e:	699b      	ldr	r3, [r3, #24]
   1c690:	429a      	cmp	r2, r3
   1c692:	d302      	bcc.n	1c69a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1c694:	2301      	movs	r3, #1
   1c696:	617b      	str	r3, [r7, #20]
   1c698:	e01b      	b.n	1c6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1c69a:	4b10      	ldr	r3, [pc, #64]	; (1c6dc <prvInsertTimerInActiveList+0x7c>)
   1c69c:	681a      	ldr	r2, [r3, #0]
   1c69e:	68fb      	ldr	r3, [r7, #12]
   1c6a0:	3304      	adds	r3, #4
   1c6a2:	4619      	mov	r1, r3
   1c6a4:	4610      	mov	r0, r2
   1c6a6:	f7fe fb2e 	bl	1ad06 <vListInsert>
   1c6aa:	e012      	b.n	1c6d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1c6ac:	687a      	ldr	r2, [r7, #4]
   1c6ae:	683b      	ldr	r3, [r7, #0]
   1c6b0:	429a      	cmp	r2, r3
   1c6b2:	d206      	bcs.n	1c6c2 <prvInsertTimerInActiveList+0x62>
   1c6b4:	68ba      	ldr	r2, [r7, #8]
   1c6b6:	683b      	ldr	r3, [r7, #0]
   1c6b8:	429a      	cmp	r2, r3
   1c6ba:	d302      	bcc.n	1c6c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1c6bc:	2301      	movs	r3, #1
   1c6be:	617b      	str	r3, [r7, #20]
   1c6c0:	e007      	b.n	1c6d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c6c2:	4b07      	ldr	r3, [pc, #28]	; (1c6e0 <prvInsertTimerInActiveList+0x80>)
   1c6c4:	681a      	ldr	r2, [r3, #0]
   1c6c6:	68fb      	ldr	r3, [r7, #12]
   1c6c8:	3304      	adds	r3, #4
   1c6ca:	4619      	mov	r1, r3
   1c6cc:	4610      	mov	r0, r2
   1c6ce:	f7fe fb1a 	bl	1ad06 <vListInsert>
		}
	}

	return xProcessTimerNow;
   1c6d2:	697b      	ldr	r3, [r7, #20]
}
   1c6d4:	4618      	mov	r0, r3
   1c6d6:	3718      	adds	r7, #24
   1c6d8:	46bd      	mov	sp, r7
   1c6da:	bd80      	pop	{r7, pc}
   1c6dc:	10006348 	.word	0x10006348
   1c6e0:	10006344 	.word	0x10006344

0001c6e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b08c      	sub	sp, #48	; 0x30
   1c6e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c6ea:	e07a      	b.n	1c7e2 <prvProcessReceivedCommands+0xfe>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
   1c6ec:	68bb      	ldr	r3, [r7, #8]
   1c6ee:	2b00      	cmp	r3, #0
   1c6f0:	da0f      	bge.n	1c712 <prvProcessReceivedCommands+0x2e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
   1c6f2:	f107 0308 	add.w	r3, r7, #8
   1c6f6:	3304      	adds	r3, #4
   1c6f8:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
   1c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c6fc:	2b00      	cmp	r3, #0
   1c6fe:	d100      	bne.n	1c702 <prvProcessReceivedCommands+0x1e>
   1c700:	e7fe      	b.n	1c700 <prvProcessReceivedCommands+0x1c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
   1c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c704:	681b      	ldr	r3, [r3, #0]
   1c706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c708:	6850      	ldr	r0, [r2, #4]
   1c70a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1c70c:	6892      	ldr	r2, [r2, #8]
   1c70e:	4611      	mov	r1, r2
   1c710:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1c712:	68bb      	ldr	r3, [r7, #8]
   1c714:	2b00      	cmp	r3, #0
   1c716:	db64      	blt.n	1c7e2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1c718:	693b      	ldr	r3, [r7, #16]
   1c71a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1c71c:	6a3b      	ldr	r3, [r7, #32]
   1c71e:	695b      	ldr	r3, [r3, #20]
   1c720:	2b00      	cmp	r3, #0
   1c722:	d004      	beq.n	1c72e <prvProcessReceivedCommands+0x4a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c724:	6a3b      	ldr	r3, [r7, #32]
   1c726:	3304      	adds	r3, #4
   1c728:	4618      	mov	r0, r3
   1c72a:	f7fe fb25 	bl	1ad78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c72e:	1d3b      	adds	r3, r7, #4
   1c730:	4618      	mov	r0, r3
   1c732:	f7ff ff75 	bl	1c620 <prvSampleTimeNow>
   1c736:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
   1c738:	68bb      	ldr	r3, [r7, #8]
   1c73a:	2b09      	cmp	r3, #9
   1c73c:	d850      	bhi.n	1c7e0 <prvProcessReceivedCommands+0xfc>
   1c73e:	a201      	add	r2, pc, #4	; (adr r2, 1c744 <prvProcessReceivedCommands+0x60>)
   1c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c744:	0001c76d 	.word	0x0001c76d
   1c748:	0001c76d 	.word	0x0001c76d
   1c74c:	0001c76d 	.word	0x0001c76d
   1c750:	0001c7e3 	.word	0x0001c7e3
   1c754:	0001c7b5 	.word	0x0001c7b5
   1c758:	0001c7d9 	.word	0x0001c7d9
   1c75c:	0001c76d 	.word	0x0001c76d
   1c760:	0001c76d 	.word	0x0001c76d
   1c764:	0001c7e3 	.word	0x0001c7e3
   1c768:	0001c7b5 	.word	0x0001c7b5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1c76c:	68fa      	ldr	r2, [r7, #12]
   1c76e:	6a3b      	ldr	r3, [r7, #32]
   1c770:	699b      	ldr	r3, [r3, #24]
   1c772:	18d1      	adds	r1, r2, r3
   1c774:	68fb      	ldr	r3, [r7, #12]
   1c776:	69fa      	ldr	r2, [r7, #28]
   1c778:	6a38      	ldr	r0, [r7, #32]
   1c77a:	f7ff ff71 	bl	1c660 <prvInsertTimerInActiveList>
   1c77e:	4603      	mov	r3, r0
   1c780:	2b00      	cmp	r3, #0
   1c782:	d02e      	beq.n	1c7e2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c784:	6a3b      	ldr	r3, [r7, #32]
   1c786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c788:	6a38      	ldr	r0, [r7, #32]
   1c78a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c78c:	6a3b      	ldr	r3, [r7, #32]
   1c78e:	69db      	ldr	r3, [r3, #28]
   1c790:	2b01      	cmp	r3, #1
   1c792:	d126      	bne.n	1c7e2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1c794:	68fa      	ldr	r2, [r7, #12]
   1c796:	6a3b      	ldr	r3, [r7, #32]
   1c798:	699b      	ldr	r3, [r3, #24]
   1c79a:	441a      	add	r2, r3
   1c79c:	2300      	movs	r3, #0
   1c79e:	9300      	str	r3, [sp, #0]
   1c7a0:	2300      	movs	r3, #0
   1c7a2:	2100      	movs	r1, #0
   1c7a4:	6a38      	ldr	r0, [r7, #32]
   1c7a6:	f7ff fe3d 	bl	1c424 <xTimerGenericCommand>
   1c7aa:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
   1c7ac:	69bb      	ldr	r3, [r7, #24]
   1c7ae:	2b00      	cmp	r3, #0
   1c7b0:	d117      	bne.n	1c7e2 <prvProcessReceivedCommands+0xfe>
   1c7b2:	e7fe      	b.n	1c7b2 <prvProcessReceivedCommands+0xce>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1c7b4:	68fa      	ldr	r2, [r7, #12]
   1c7b6:	6a3b      	ldr	r3, [r7, #32]
   1c7b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1c7ba:	6a3b      	ldr	r3, [r7, #32]
   1c7bc:	699b      	ldr	r3, [r3, #24]
   1c7be:	2b00      	cmp	r3, #0
   1c7c0:	d100      	bne.n	1c7c4 <prvProcessReceivedCommands+0xe0>
   1c7c2:	e7fe      	b.n	1c7c2 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1c7c4:	6a3b      	ldr	r3, [r7, #32]
   1c7c6:	699a      	ldr	r2, [r3, #24]
   1c7c8:	69fb      	ldr	r3, [r7, #28]
   1c7ca:	18d1      	adds	r1, r2, r3
   1c7cc:	69fb      	ldr	r3, [r7, #28]
   1c7ce:	69fa      	ldr	r2, [r7, #28]
   1c7d0:	6a38      	ldr	r0, [r7, #32]
   1c7d2:	f7ff ff45 	bl	1c660 <prvInsertTimerInActiveList>
					break;
   1c7d6:	e004      	b.n	1c7e2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1c7d8:	6a38      	ldr	r0, [r7, #32]
   1c7da:	f7fe f87b 	bl	1a8d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1c7de:	e000      	b.n	1c7e2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
   1c7e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c7e2:	4b08      	ldr	r3, [pc, #32]	; (1c804 <prvProcessReceivedCommands+0x120>)
   1c7e4:	681b      	ldr	r3, [r3, #0]
   1c7e6:	f107 0108 	add.w	r1, r7, #8
   1c7ea:	2200      	movs	r2, #0
   1c7ec:	4618      	mov	r0, r3
   1c7ee:	f7fe fced 	bl	1b1cc <xQueueReceive>
   1c7f2:	4603      	mov	r3, r0
   1c7f4:	2b00      	cmp	r3, #0
   1c7f6:	f47f af79 	bne.w	1c6ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1c7fa:	bf00      	nop
   1c7fc:	3728      	adds	r7, #40	; 0x28
   1c7fe:	46bd      	mov	sp, r7
   1c800:	bd80      	pop	{r7, pc}
   1c802:	bf00      	nop
   1c804:	1000634c 	.word	0x1000634c

0001c808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c808:	b580      	push	{r7, lr}
   1c80a:	b088      	sub	sp, #32
   1c80c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c80e:	e03b      	b.n	1c888 <prvSwitchTimerLists+0x80>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c810:	4b27      	ldr	r3, [pc, #156]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c812:	681b      	ldr	r3, [r3, #0]
   1c814:	68db      	ldr	r3, [r3, #12]
   1c816:	681b      	ldr	r3, [r3, #0]
   1c818:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   1c81a:	4b25      	ldr	r3, [pc, #148]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c81c:	681b      	ldr	r3, [r3, #0]
   1c81e:	68db      	ldr	r3, [r3, #12]
   1c820:	68db      	ldr	r3, [r3, #12]
   1c822:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c824:	693b      	ldr	r3, [r7, #16]
   1c826:	3304      	adds	r3, #4
   1c828:	4618      	mov	r0, r3
   1c82a:	f7fe faa5 	bl	1ad78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c82e:	693b      	ldr	r3, [r7, #16]
   1c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c832:	6938      	ldr	r0, [r7, #16]
   1c834:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c836:	693b      	ldr	r3, [r7, #16]
   1c838:	69db      	ldr	r3, [r3, #28]
   1c83a:	2b01      	cmp	r3, #1
   1c83c:	d124      	bne.n	1c888 <prvSwitchTimerLists+0x80>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c83e:	693b      	ldr	r3, [r7, #16]
   1c840:	699a      	ldr	r2, [r3, #24]
   1c842:	697b      	ldr	r3, [r7, #20]
   1c844:	4413      	add	r3, r2
   1c846:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c848:	68fa      	ldr	r2, [r7, #12]
   1c84a:	697b      	ldr	r3, [r7, #20]
   1c84c:	429a      	cmp	r2, r3
   1c84e:	d90e      	bls.n	1c86e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c850:	693b      	ldr	r3, [r7, #16]
   1c852:	68fa      	ldr	r2, [r7, #12]
   1c854:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c856:	693b      	ldr	r3, [r7, #16]
   1c858:	693a      	ldr	r2, [r7, #16]
   1c85a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c85c:	4b14      	ldr	r3, [pc, #80]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c85e:	681a      	ldr	r2, [r3, #0]
   1c860:	693b      	ldr	r3, [r7, #16]
   1c862:	3304      	adds	r3, #4
   1c864:	4619      	mov	r1, r3
   1c866:	4610      	mov	r0, r2
   1c868:	f7fe fa4d 	bl	1ad06 <vListInsert>
   1c86c:	e00c      	b.n	1c888 <prvSwitchTimerLists+0x80>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c86e:	2300      	movs	r3, #0
   1c870:	9300      	str	r3, [sp, #0]
   1c872:	2300      	movs	r3, #0
   1c874:	697a      	ldr	r2, [r7, #20]
   1c876:	2100      	movs	r1, #0
   1c878:	6938      	ldr	r0, [r7, #16]
   1c87a:	f7ff fdd3 	bl	1c424 <xTimerGenericCommand>
   1c87e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   1c880:	68bb      	ldr	r3, [r7, #8]
   1c882:	2b00      	cmp	r3, #0
   1c884:	d100      	bne.n	1c888 <prvSwitchTimerLists+0x80>
   1c886:	e7fe      	b.n	1c886 <prvSwitchTimerLists+0x7e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c888:	4b09      	ldr	r3, [pc, #36]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c88a:	681b      	ldr	r3, [r3, #0]
   1c88c:	681b      	ldr	r3, [r3, #0]
   1c88e:	2b00      	cmp	r3, #0
   1c890:	d1be      	bne.n	1c810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c892:	4b07      	ldr	r3, [pc, #28]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c894:	681b      	ldr	r3, [r3, #0]
   1c896:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c898:	4b06      	ldr	r3, [pc, #24]	; (1c8b4 <prvSwitchTimerLists+0xac>)
   1c89a:	681b      	ldr	r3, [r3, #0]
   1c89c:	4a04      	ldr	r2, [pc, #16]	; (1c8b0 <prvSwitchTimerLists+0xa8>)
   1c89e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
   1c8a0:	4a04      	ldr	r2, [pc, #16]	; (1c8b4 <prvSwitchTimerLists+0xac>)
   1c8a2:	687b      	ldr	r3, [r7, #4]
   1c8a4:	6013      	str	r3, [r2, #0]
}
   1c8a6:	bf00      	nop
   1c8a8:	3718      	adds	r7, #24
   1c8aa:	46bd      	mov	sp, r7
   1c8ac:	bd80      	pop	{r7, pc}
   1c8ae:	bf00      	nop
   1c8b0:	10006344 	.word	0x10006344
   1c8b4:	10006348 	.word	0x10006348

0001c8b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c8b8:	b580      	push	{r7, lr}
   1c8ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c8bc:	f7fc fff4 	bl	198a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
   1c8c0:	4b0d      	ldr	r3, [pc, #52]	; (1c8f8 <prvCheckForValidListAndQueue+0x40>)
   1c8c2:	681b      	ldr	r3, [r3, #0]
   1c8c4:	2b00      	cmp	r3, #0
   1c8c6:	d113      	bne.n	1c8f0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
   1c8c8:	480c      	ldr	r0, [pc, #48]	; (1c8fc <prvCheckForValidListAndQueue+0x44>)
   1c8ca:	f7fe f9cb 	bl	1ac64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
   1c8ce:	480c      	ldr	r0, [pc, #48]	; (1c900 <prvCheckForValidListAndQueue+0x48>)
   1c8d0:	f7fe f9c8 	bl	1ac64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
   1c8d4:	4b0b      	ldr	r3, [pc, #44]	; (1c904 <prvCheckForValidListAndQueue+0x4c>)
   1c8d6:	4a09      	ldr	r2, [pc, #36]	; (1c8fc <prvCheckForValidListAndQueue+0x44>)
   1c8d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1c8da:	4b0b      	ldr	r3, [pc, #44]	; (1c908 <prvCheckForValidListAndQueue+0x50>)
   1c8dc:	4a08      	ldr	r2, [pc, #32]	; (1c900 <prvCheckForValidListAndQueue+0x48>)
   1c8de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1c8e0:	2200      	movs	r2, #0
   1c8e2:	2110      	movs	r1, #16
   1c8e4:	2005      	movs	r0, #5
   1c8e6:	f7fe facf 	bl	1ae88 <xQueueGenericCreate>
   1c8ea:	4602      	mov	r2, r0
   1c8ec:	4b02      	ldr	r3, [pc, #8]	; (1c8f8 <prvCheckForValidListAndQueue+0x40>)
   1c8ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c8f0:	f7fd f800 	bl	198f4 <vPortExitCritical>
}
   1c8f4:	bf00      	nop
   1c8f6:	bd80      	pop	{r7, pc}
   1c8f8:	1000634c 	.word	0x1000634c
   1c8fc:	1000631c 	.word	0x1000631c
   1c900:	10006330 	.word	0x10006330
   1c904:	10006344 	.word	0x10006344
   1c908:	10006348 	.word	0x10006348

0001c90c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
   1c90c:	b580      	push	{r7, lr}
   1c90e:	b08a      	sub	sp, #40	; 0x28
   1c910:	af00      	add	r7, sp, #0
   1c912:	60f8      	str	r0, [r7, #12]
   1c914:	60b9      	str	r1, [r7, #8]
   1c916:	607a      	str	r2, [r7, #4]
   1c918:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
   1c91a:	f06f 0301 	mvn.w	r3, #1
   1c91e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
   1c920:	68fb      	ldr	r3, [r7, #12]
   1c922:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
   1c924:	68bb      	ldr	r3, [r7, #8]
   1c926:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
   1c928:	687b      	ldr	r3, [r7, #4]
   1c92a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c92c:	4b06      	ldr	r3, [pc, #24]	; (1c948 <xTimerPendFunctionCallFromISR+0x3c>)
   1c92e:	6818      	ldr	r0, [r3, #0]
   1c930:	f107 0114 	add.w	r1, r7, #20
   1c934:	2300      	movs	r3, #0
   1c936:	683a      	ldr	r2, [r7, #0]
   1c938:	f7fe fbce 	bl	1b0d8 <xQueueGenericSendFromISR>
   1c93c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
   1c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
   1c940:	4618      	mov	r0, r3
   1c942:	3728      	adds	r7, #40	; 0x28
   1c944:	46bd      	mov	sp, r7
   1c946:	bd80      	pop	{r7, pc}
   1c948:	1000634c 	.word	0x1000634c

0001c94c <am_util_delay_ms>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
   1c94c:	b580      	push	{r7, lr}
   1c94e:	b088      	sub	sp, #32
   1c950:	af00      	add	r7, sp, #0
   1c952:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1c954:	f107 030c 	add.w	r3, r7, #12
   1c958:	4618      	mov	r0, r3
   1c95a:	f003 fb03 	bl	1ff64 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1c95e:	68fb      	ldr	r3, [r7, #12]
   1c960:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MilliSeconds * (ui32HFRC / 3000);
   1c962:	69fb      	ldr	r3, [r7, #28]
   1c964:	4a07      	ldr	r2, [pc, #28]	; (1c984 <am_util_delay_ms+0x38>)
   1c966:	fba2 2303 	umull	r2, r3, r2, r3
   1c96a:	099b      	lsrs	r3, r3, #6
   1c96c:	687a      	ldr	r2, [r7, #4]
   1c96e:	fb02 f303 	mul.w	r3, r2, r3
   1c972:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1c974:	69b8      	ldr	r0, [r7, #24]
   1c976:	f003 fb53 	bl	20020 <am_hal_flash_delay>
}
   1c97a:	bf00      	nop
   1c97c:	3720      	adds	r7, #32
   1c97e:	46bd      	mov	sp, r7
   1c980:	bd80      	pop	{r7, pc}
   1c982:	bf00      	nop
   1c984:	057619f1 	.word	0x057619f1

0001c988 <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1c988:	b580      	push	{r7, lr}
   1c98a:	b088      	sub	sp, #32
   1c98c:	af00      	add	r7, sp, #0
   1c98e:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   1c990:	f107 030c 	add.w	r3, r7, #12
   1c994:	4618      	mov	r0, r3
   1c996:	f003 fae5 	bl	1ff64 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1c99a:	68fb      	ldr	r3, [r7, #12]
   1c99c:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   1c99e:	69fb      	ldr	r3, [r7, #28]
   1c9a0:	4a07      	ldr	r2, [pc, #28]	; (1c9c0 <am_util_delay_us+0x38>)
   1c9a2:	fba2 2303 	umull	r2, r3, r2, r3
   1c9a6:	0c9b      	lsrs	r3, r3, #18
   1c9a8:	687a      	ldr	r2, [r7, #4]
   1c9aa:	fb02 f303 	mul.w	r3, r2, r3
   1c9ae:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   1c9b0:	69b8      	ldr	r0, [r7, #24]
   1c9b2:	f003 fb35 	bl	20020 <am_hal_flash_delay>
}
   1c9b6:	bf00      	nop
   1c9b8:	3720      	adds	r7, #32
   1c9ba:	46bd      	mov	sp, r7
   1c9bc:	bd80      	pop	{r7, pc}
   1c9be:	bf00      	nop
   1c9c0:	165e9f81 	.word	0x165e9f81

0001c9c4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   1c9c4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1c9c6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1c9ca:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   1c9cc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   1c9d0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   1c9d4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1c9d8:	f000 f80a 	bl	1c9f0 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   1c9dc:	bd01      	pop	{r0, pc}
}
   1c9de:	bf00      	nop
   1c9e0:	4618      	mov	r0, r3

0001c9e2 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   1c9e2:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   1c9e4:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1c9e6:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1c9e8:	4770      	bx	lr
}
   1c9ea:	bf00      	nop
   1c9ec:	4618      	mov	r0, r3
	...

0001c9f0 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   1c9f0:	b580      	push	{r7, lr}
   1c9f2:	b096      	sub	sp, #88	; 0x58
   1c9f4:	af00      	add	r7, sp, #0
   1c9f6:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1c9f8:	f107 030c 	add.w	r3, r7, #12
   1c9fc:	2200      	movs	r2, #0
   1c9fe:	601a      	str	r2, [r3, #0]
   1ca00:	605a      	str	r2, [r3, #4]
   1ca02:	609a      	str	r2, [r3, #8]
   1ca04:	60da      	str	r2, [r3, #12]
   1ca06:	611a      	str	r2, [r3, #16]
   1ca08:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   1ca0a:	2300      	movs	r3, #0
   1ca0c:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   1ca0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1ca10:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   1ca12:	4b2e      	ldr	r3, [pc, #184]	; (1cacc <am_util_faultisr_collect_data+0xdc>)
   1ca14:	681b      	ldr	r3, [r3, #0]
   1ca16:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1ca18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ca1a:	b2db      	uxtb	r3, r3
   1ca1c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   1ca20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ca22:	0a1b      	lsrs	r3, r3, #8
   1ca24:	b2db      	uxtb	r3, r3
   1ca26:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   1ca2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1ca2c:	0c1b      	lsrs	r3, r3, #16
   1ca2e:	b29b      	uxth	r3, r3
   1ca30:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   1ca34:	4b26      	ldr	r3, [pc, #152]	; (1cad0 <am_util_faultisr_collect_data+0xe0>)
   1ca36:	681b      	ldr	r3, [r3, #0]
   1ca38:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   1ca3a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   1ca3e:	b2db      	uxtb	r3, r3
   1ca40:	f003 0302 	and.w	r3, r3, #2
   1ca44:	2b00      	cmp	r3, #0
   1ca46:	d005      	beq.n	1ca54 <am_util_faultisr_collect_data+0x64>
   1ca48:	6879      	ldr	r1, [r7, #4]
   1ca4a:	2006      	movs	r0, #6
   1ca4c:	f7ff ffc9 	bl	1c9e2 <getStackedReg>
   1ca50:	4603      	mov	r3, r0
   1ca52:	e001      	b.n	1ca58 <am_util_faultisr_collect_data+0x68>
   1ca54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ca58:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   1ca5a:	6879      	ldr	r1, [r7, #4]
   1ca5c:	2000      	movs	r0, #0
   1ca5e:	f7ff ffc0 	bl	1c9e2 <getStackedReg>
   1ca62:	4603      	mov	r3, r0
   1ca64:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   1ca66:	6879      	ldr	r1, [r7, #4]
   1ca68:	2001      	movs	r0, #1
   1ca6a:	f7ff ffba 	bl	1c9e2 <getStackedReg>
   1ca6e:	4603      	mov	r3, r0
   1ca70:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   1ca72:	6879      	ldr	r1, [r7, #4]
   1ca74:	2002      	movs	r0, #2
   1ca76:	f7ff ffb4 	bl	1c9e2 <getStackedReg>
   1ca7a:	4603      	mov	r3, r0
   1ca7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   1ca7e:	6879      	ldr	r1, [r7, #4]
   1ca80:	2003      	movs	r0, #3
   1ca82:	f7ff ffae 	bl	1c9e2 <getStackedReg>
   1ca86:	4603      	mov	r3, r0
   1ca88:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1ca8a:	6879      	ldr	r1, [r7, #4]
   1ca8c:	2004      	movs	r0, #4
   1ca8e:	f7ff ffa8 	bl	1c9e2 <getStackedReg>
   1ca92:	4603      	mov	r3, r0
   1ca94:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1ca96:	6879      	ldr	r1, [r7, #4]
   1ca98:	2005      	movs	r0, #5
   1ca9a:	f7ff ffa2 	bl	1c9e2 <getStackedReg>
   1ca9e:	4603      	mov	r3, r0
   1caa0:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   1caa2:	6879      	ldr	r1, [r7, #4]
   1caa4:	2006      	movs	r0, #6
   1caa6:	f7ff ff9c 	bl	1c9e2 <getStackedReg>
   1caaa:	4603      	mov	r3, r0
   1caac:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   1caae:	6879      	ldr	r1, [r7, #4]
   1cab0:	2007      	movs	r0, #7
   1cab2:	f7ff ff96 	bl	1c9e2 <getStackedReg>
   1cab6:	4603      	mov	r3, r0
   1cab8:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1caba:	f107 030c 	add.w	r3, r7, #12
   1cabe:	4619      	mov	r1, r3
   1cac0:	2002      	movs	r0, #2
   1cac2:	f003 fc89 	bl	203d8 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
   1cac6:	2300      	movs	r3, #0
   1cac8:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1caca:	e7fe      	b.n	1caca <am_util_faultisr_collect_data+0xda>
   1cacc:	e000ed28 	.word	0xe000ed28
   1cad0:	e000ed38 	.word	0xe000ed38

0001cad4 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   1cad4:	b480      	push	{r7}
   1cad6:	b083      	sub	sp, #12
   1cad8:	af00      	add	r7, sp, #0
   1cada:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   1cadc:	4a04      	ldr	r2, [pc, #16]	; (1caf0 <am_util_stdio_printf_init+0x1c>)
   1cade:	687b      	ldr	r3, [r7, #4]
   1cae0:	6013      	str	r3, [r2, #0]
}
   1cae2:	bf00      	nop
   1cae4:	370c      	adds	r7, #12
   1cae6:	46bd      	mov	sp, r7
   1cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
   1caec:	4770      	bx	lr
   1caee:	bf00      	nop
   1caf0:	10006f3c 	.word	0x10006f3c

0001caf4 <appProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appProcMsg(wsfMsgHdr_t *pMsg)
{
   1caf4:	b580      	push	{r7, lr}
   1caf6:	b082      	sub	sp, #8
   1caf8:	af00      	add	r7, sp, #0
   1cafa:	6078      	str	r0, [r7, #4]
  switch(pMsg->event)
   1cafc:	687b      	ldr	r3, [r7, #4]
   1cafe:	789b      	ldrb	r3, [r3, #2]
   1cb00:	2b00      	cmp	r3, #0
   1cb02:	d002      	beq.n	1cb0a <appProcMsg+0x16>
   1cb04:	2b01      	cmp	r3, #1
   1cb06:	d003      	beq.n	1cb10 <appProcMsg+0x1c>
    case APP_UI_TIMER_IND:
      appUiTimerExpired(pMsg);
      break;
            
    default:
      break;
   1cb08:	e006      	b.n	1cb18 <appProcMsg+0x24>
      appUiBtnPoll();
   1cb0a:	f7fd fc25 	bl	1a358 <appUiBtnPoll>
      break;
   1cb0e:	e003      	b.n	1cb18 <appProcMsg+0x24>
      appUiTimerExpired(pMsg);
   1cb10:	6878      	ldr	r0, [r7, #4]
   1cb12:	f7fd fc17 	bl	1a344 <appUiTimerExpired>
      break;
   1cb16:	bf00      	nop
  }
}
   1cb18:	bf00      	nop
   1cb1a:	3708      	adds	r7, #8
   1cb1c:	46bd      	mov	sp, r7
   1cb1e:	bd80      	pop	{r7, pc}

0001cb20 <appCheckBonded>:
 *
 *  \return Bonded state.
 */
/*************************************************************************************************/
bool_t appCheckBonded(dmConnId_t connId)
{
   1cb20:	b480      	push	{r7}
   1cb22:	b083      	sub	sp, #12
   1cb24:	af00      	add	r7, sp, #0
   1cb26:	4603      	mov	r3, r0
   1cb28:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bonded;
   1cb2a:	79fb      	ldrb	r3, [r7, #7]
   1cb2c:	3b01      	subs	r3, #1
   1cb2e:	4a05      	ldr	r2, [pc, #20]	; (1cb44 <appCheckBonded+0x24>)
   1cb30:	015b      	lsls	r3, r3, #5
   1cb32:	4413      	add	r3, r2
   1cb34:	3305      	adds	r3, #5
   1cb36:	781b      	ldrb	r3, [r3, #0]
}
   1cb38:	4618      	mov	r0, r3
   1cb3a:	370c      	adds	r7, #12
   1cb3c:	46bd      	mov	sp, r7
   1cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cb42:	4770      	bx	lr
   1cb44:	10006f70 	.word	0x10006f70

0001cb48 <appCheckBondByLtk>:
 *
 *  \return Bond-by-LTK state.
 */
/*************************************************************************************************/
bool_t appCheckBondByLtk(dmConnId_t connId)
{
   1cb48:	b480      	push	{r7}
   1cb4a:	b083      	sub	sp, #12
   1cb4c:	af00      	add	r7, sp, #0
   1cb4e:	4603      	mov	r3, r0
   1cb50:	71fb      	strb	r3, [r7, #7]
  WSF_ASSERT((connId > 0) && (connId <= DM_CONN_MAX));
  
  return appConnCb[connId - 1].bondByLtk;
   1cb52:	79fb      	ldrb	r3, [r7, #7]
   1cb54:	3b01      	subs	r3, #1
   1cb56:	4a05      	ldr	r2, [pc, #20]	; (1cb6c <appCheckBondByLtk+0x24>)
   1cb58:	015b      	lsls	r3, r3, #5
   1cb5a:	4413      	add	r3, r2
   1cb5c:	3306      	adds	r3, #6
   1cb5e:	781b      	ldrb	r3, [r3, #0]
}
   1cb60:	4618      	mov	r0, r3
   1cb62:	370c      	adds	r7, #12
   1cb64:	46bd      	mov	sp, r7
   1cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cb6a:	4770      	bx	lr
   1cb6c:	10006f70 	.word	0x10006f70

0001cb70 <appNumConns>:
 *
 *  \return Number of connections.
 */
/*************************************************************************************************/
uint8_t appNumConns(uint8_t role)
{
   1cb70:	b580      	push	{r7, lr}
   1cb72:	b084      	sub	sp, #16
   1cb74:	af00      	add	r7, sp, #0
   1cb76:	4603      	mov	r3, r0
   1cb78:	71fb      	strb	r3, [r7, #7]
  appConnCb_t   *pCcb = appConnCb;
   1cb7a:	4b13      	ldr	r3, [pc, #76]	; (1cbc8 <appNumConns+0x58>)
   1cb7c:	60fb      	str	r3, [r7, #12]
  uint8_t       i, j;
  
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1cb7e:	2308      	movs	r3, #8
   1cb80:	72fb      	strb	r3, [r7, #11]
   1cb82:	2300      	movs	r3, #0
   1cb84:	72bb      	strb	r3, [r7, #10]
   1cb86:	e016      	b.n	1cbb6 <appNumConns+0x46>
  {
    if ((pCcb->connId != DM_CONN_ID_NONE) && (DmConnRole(pCcb->connId) == role))
   1cb88:	68fb      	ldr	r3, [r7, #12]
   1cb8a:	791b      	ldrb	r3, [r3, #4]
   1cb8c:	2b00      	cmp	r3, #0
   1cb8e:	d00c      	beq.n	1cbaa <appNumConns+0x3a>
   1cb90:	68fb      	ldr	r3, [r7, #12]
   1cb92:	791b      	ldrb	r3, [r3, #4]
   1cb94:	4618      	mov	r0, r3
   1cb96:	f7f2 fdf1 	bl	f77c <DmConnRole>
   1cb9a:	4603      	mov	r3, r0
   1cb9c:	461a      	mov	r2, r3
   1cb9e:	79fb      	ldrb	r3, [r7, #7]
   1cba0:	4293      	cmp	r3, r2
   1cba2:	d102      	bne.n	1cbaa <appNumConns+0x3a>
    {      
      j++;
   1cba4:	7abb      	ldrb	r3, [r7, #10]
   1cba6:	3301      	adds	r3, #1
   1cba8:	72bb      	strb	r3, [r7, #10]
  for (i = DM_CONN_MAX, j = 0; i > 0; i--, pCcb++)
   1cbaa:	7afb      	ldrb	r3, [r7, #11]
   1cbac:	3b01      	subs	r3, #1
   1cbae:	72fb      	strb	r3, [r7, #11]
   1cbb0:	68fb      	ldr	r3, [r7, #12]
   1cbb2:	3320      	adds	r3, #32
   1cbb4:	60fb      	str	r3, [r7, #12]
   1cbb6:	7afb      	ldrb	r3, [r7, #11]
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d1e5      	bne.n	1cb88 <appNumConns+0x18>
    }
  }

  return j;
   1cbbc:	7abb      	ldrb	r3, [r7, #10]
}
   1cbbe:	4618      	mov	r0, r3
   1cbc0:	3710      	adds	r7, #16
   1cbc2:	46bd      	mov	sp, r7
   1cbc4:	bd80      	pop	{r7, pc}
   1cbc6:	bf00      	nop
   1cbc8:	10006f70 	.word	0x10006f70

0001cbcc <AppHandlerInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlerInit(wsfHandlerId_t handlerId)
{
   1cbcc:	b580      	push	{r7, lr}
   1cbce:	b082      	sub	sp, #8
   1cbd0:	af00      	add	r7, sp, #0
   1cbd2:	4603      	mov	r3, r0
   1cbd4:	71fb      	strb	r3, [r7, #7]
  appHandlerId = handlerId;
   1cbd6:	4a04      	ldr	r2, [pc, #16]	; (1cbe8 <AppHandlerInit+0x1c>)
   1cbd8:	79fb      	ldrb	r3, [r7, #7]
   1cbda:	7013      	strb	r3, [r2, #0]
  
  AppDbInit();
   1cbdc:	f7fd f858 	bl	19c90 <AppDbInit>
}
   1cbe0:	bf00      	nop
   1cbe2:	3708      	adds	r7, #8
   1cbe4:	46bd      	mov	sp, r7
   1cbe6:	bd80      	pop	{r7, pc}
   1cbe8:	10006f5c 	.word	0x10006f5c

0001cbec <AppHandler>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandler(wsfEventMask_t event, wsfMsgHdr_t *pMsg)
{
   1cbec:	b580      	push	{r7, lr}
   1cbee:	b082      	sub	sp, #8
   1cbf0:	af00      	add	r7, sp, #0
   1cbf2:	4603      	mov	r3, r0
   1cbf4:	6039      	str	r1, [r7, #0]
   1cbf6:	71fb      	strb	r3, [r7, #7]
  if (pMsg != NULL)
   1cbf8:	683b      	ldr	r3, [r7, #0]
   1cbfa:	2b00      	cmp	r3, #0
   1cbfc:	d015      	beq.n	1cc2a <AppHandler+0x3e>
  {
    // APP_TRACE_INFO1("App got evt %d", pMsg->event);
    
    if (pMsg->event >= APP_MASTER_MSG_START)
   1cbfe:	683b      	ldr	r3, [r7, #0]
   1cc00:	789b      	ldrb	r3, [r3, #2]
   1cc02:	2b1f      	cmp	r3, #31
   1cc04:	d904      	bls.n	1cc10 <AppHandler+0x24>
    {
      /* pass event to master handler */
      (*appCb.masterCback)(pMsg);    
   1cc06:	4b0e      	ldr	r3, [pc, #56]	; (1cc40 <AppHandler+0x54>)
   1cc08:	685b      	ldr	r3, [r3, #4]
   1cc0a:	6838      	ldr	r0, [r7, #0]
   1cc0c:	4798      	blx	r3
    if (event & APP_BTN_DOWN_EVT)
    {
      AppUiBtnPressed();
    }
  }
}
   1cc0e:	e013      	b.n	1cc38 <AppHandler+0x4c>
    else if (pMsg->event >= APP_SLAVE_MSG_START)
   1cc10:	683b      	ldr	r3, [r7, #0]
   1cc12:	789b      	ldrb	r3, [r3, #2]
   1cc14:	2b0f      	cmp	r3, #15
   1cc16:	d904      	bls.n	1cc22 <AppHandler+0x36>
      (*appCb.slaveCback)(pMsg);    
   1cc18:	4b09      	ldr	r3, [pc, #36]	; (1cc40 <AppHandler+0x54>)
   1cc1a:	681b      	ldr	r3, [r3, #0]
   1cc1c:	6838      	ldr	r0, [r7, #0]
   1cc1e:	4798      	blx	r3
}
   1cc20:	e00a      	b.n	1cc38 <AppHandler+0x4c>
      appProcMsg(pMsg);
   1cc22:	6838      	ldr	r0, [r7, #0]
   1cc24:	f7ff ff66 	bl	1caf4 <appProcMsg>
}
   1cc28:	e006      	b.n	1cc38 <AppHandler+0x4c>
    if (event & APP_BTN_DOWN_EVT)
   1cc2a:	79fb      	ldrb	r3, [r7, #7]
   1cc2c:	f003 0310 	and.w	r3, r3, #16
   1cc30:	2b00      	cmp	r3, #0
   1cc32:	d001      	beq.n	1cc38 <AppHandler+0x4c>
      AppUiBtnPressed();
   1cc34:	f7fd fba8 	bl	1a388 <AppUiBtnPressed>
}
   1cc38:	bf00      	nop
   1cc3a:	3708      	adds	r7, #8
   1cc3c:	46bd      	mov	sp, r7
   1cc3e:	bd80      	pop	{r7, pc}
   1cc40:	10006f4c 	.word	0x10006f4c

0001cc44 <AppHandlePasskey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppHandlePasskey(dmSecAuthReqIndEvt_t *pAuthReq)
{
   1cc44:	b580      	push	{r7, lr}
   1cc46:	b084      	sub	sp, #16
   1cc48:	af00      	add	r7, sp, #0
   1cc4a:	6078      	str	r0, [r7, #4]
  uint32_t passkey;
  uint8_t  buf[SMP_PIN_LEN];
  
  if (pAuthReq->display)
   1cc4c:	687b      	ldr	r3, [r7, #4]
   1cc4e:	795b      	ldrb	r3, [r3, #5]
   1cc50:	2b00      	cmp	r3, #0
   1cc52:	d028      	beq.n	1cca6 <AppHandlePasskey+0x62>
  {
    /* generate random passkey, limit to 6 digit max */
    SecRand((uint8_t *) &passkey, sizeof(uint32_t));
   1cc54:	f107 030c 	add.w	r3, r7, #12
   1cc58:	2104      	movs	r1, #4
   1cc5a:	4618      	mov	r0, r3
   1cc5c:	f7fc fa8c 	bl	19178 <SecRand>
    passkey %= 1000000;
   1cc60:	68fa      	ldr	r2, [r7, #12]
   1cc62:	4b14      	ldr	r3, [pc, #80]	; (1ccb4 <AppHandlePasskey+0x70>)
   1cc64:	fba3 1302 	umull	r1, r3, r3, r2
   1cc68:	0c9b      	lsrs	r3, r3, #18
   1cc6a:	4913      	ldr	r1, [pc, #76]	; (1ccb8 <AppHandlePasskey+0x74>)
   1cc6c:	fb01 f303 	mul.w	r3, r1, r3
   1cc70:	1ad3      	subs	r3, r2, r3
   1cc72:	60fb      	str	r3, [r7, #12]
    
    /* convert to byte buffer */
    buf[0] = UINT32_TO_BYTE0(passkey);
   1cc74:	68fb      	ldr	r3, [r7, #12]
   1cc76:	b2db      	uxtb	r3, r3
   1cc78:	723b      	strb	r3, [r7, #8]
    buf[1] = UINT32_TO_BYTE1(passkey);
   1cc7a:	68fb      	ldr	r3, [r7, #12]
   1cc7c:	0a1b      	lsrs	r3, r3, #8
   1cc7e:	b2db      	uxtb	r3, r3
   1cc80:	727b      	strb	r3, [r7, #9]
    buf[2] = UINT32_TO_BYTE2(passkey);
   1cc82:	68fb      	ldr	r3, [r7, #12]
   1cc84:	0c1b      	lsrs	r3, r3, #16
   1cc86:	b2db      	uxtb	r3, r3
   1cc88:	72bb      	strb	r3, [r7, #10]
    
    /* send authentication response to DM */
    DmSecAuthRsp((dmConnId_t) pAuthReq->hdr.param, SMP_PIN_LEN, buf);
   1cc8a:	687b      	ldr	r3, [r7, #4]
   1cc8c:	881b      	ldrh	r3, [r3, #0]
   1cc8e:	b2db      	uxtb	r3, r3
   1cc90:	f107 0208 	add.w	r2, r7, #8
   1cc94:	2103      	movs	r1, #3
   1cc96:	4618      	mov	r0, r3
   1cc98:	f7f3 f9e4 	bl	10064 <DmSecAuthRsp>
    
    /* display passkey */
    AppUiDisplayPasskey(passkey);
   1cc9c:	68fb      	ldr	r3, [r7, #12]
   1cc9e:	4618      	mov	r0, r3
   1cca0:	f7fd fb3c 	bl	1a31c <AppUiDisplayPasskey>
  else
  {
    /* prompt user to enter passkey */
    AppUiAction(APP_UI_PASSKEY_PROMPT);
  } 
}
   1cca4:	e002      	b.n	1ccac <AppHandlePasskey+0x68>
    AppUiAction(APP_UI_PASSKEY_PROMPT);
   1cca6:	200e      	movs	r0, #14
   1cca8:	f7fd fb00 	bl	1a2ac <AppUiAction>
}
   1ccac:	bf00      	nop
   1ccae:	3710      	adds	r7, #16
   1ccb0:	46bd      	mov	sp, r7
   1ccb2:	bd80      	pop	{r7, pc}
   1ccb4:	431bde83 	.word	0x431bde83
   1ccb8:	000f4240 	.word	0x000f4240

0001ccbc <AppHandleNumericComparison>:
*
*  \return None.
*/
/*************************************************************************************************/
void AppHandleNumericComparison(dmSecCnfIndEvt_t *pCnfInd)
{
   1ccbc:	b580      	push	{r7, lr}
   1ccbe:	b084      	sub	sp, #16
   1ccc0:	af00      	add	r7, sp, #0
   1ccc2:	6078      	str	r0, [r7, #4]
  uint32_t confirm = DmSecGetCompareValue(pCnfInd->confirm);
   1ccc4:	687b      	ldr	r3, [r7, #4]
   1ccc6:	3304      	adds	r3, #4
   1ccc8:	4618      	mov	r0, r3
   1ccca:	f7f3 fb11 	bl	102f0 <DmSecGetCompareValue>
   1ccce:	60f8      	str	r0, [r7, #12]

  /* display confirmation value */
  AppUiDisplayConfirmValue(confirm);
   1ccd0:	68f8      	ldr	r0, [r7, #12]
   1ccd2:	f7fd fb2d 	bl	1a330 <AppUiDisplayConfirmValue>

  /* TODO: Verify that local and peer confirmation values match */
  DmSecCompareRsp((dmConnId_t)pCnfInd->hdr.param, TRUE);
   1ccd6:	687b      	ldr	r3, [r7, #4]
   1ccd8:	881b      	ldrh	r3, [r3, #0]
   1ccda:	b2db      	uxtb	r3, r3
   1ccdc:	2101      	movs	r1, #1
   1ccde:	4618      	mov	r0, r3
   1cce0:	f7f3 faf2 	bl	102c8 <DmSecCompareRsp>
}
   1cce4:	bf00      	nop
   1cce6:	3710      	adds	r7, #16
   1cce8:	46bd      	mov	sp, r7
   1ccea:	bd80      	pop	{r7, pc}

0001ccec <AppConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppConnClose(dmConnId_t connId)
{
   1ccec:	b580      	push	{r7, lr}
   1ccee:	b082      	sub	sp, #8
   1ccf0:	af00      	add	r7, sp, #0
   1ccf2:	4603      	mov	r3, r0
   1ccf4:	71fb      	strb	r3, [r7, #7]
  DmConnClose(DM_CLIENT_ID_APP, connId, HCI_ERR_REMOTE_TERMINATED);
   1ccf6:	79fb      	ldrb	r3, [r7, #7]
   1ccf8:	2213      	movs	r2, #19
   1ccfa:	4619      	mov	r1, r3
   1ccfc:	2003      	movs	r0, #3
   1ccfe:	f7f2 fbab 	bl	f458 <DmConnClose>
}
   1cd02:	bf00      	nop
   1cd04:	3708      	adds	r7, #8
   1cd06:	46bd      	mov	sp, r7
   1cd08:	bd80      	pop	{r7, pc}
	...

0001cd0c <AppConnIsOpen>:
 *
 *  \return Connection ID of open connection or DM_CONN_ID_NONE if no open connections.
 */
/*************************************************************************************************/
dmConnId_t AppConnIsOpen(void)
{
   1cd0c:	b480      	push	{r7}
   1cd0e:	b083      	sub	sp, #12
   1cd10:	af00      	add	r7, sp, #0
  appConnCb_t   *pCcb = appConnCb;
   1cd12:	4b0e      	ldr	r3, [pc, #56]	; (1cd4c <AppConnIsOpen+0x40>)
   1cd14:	607b      	str	r3, [r7, #4]
  uint8_t       i;
  
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1cd16:	2308      	movs	r3, #8
   1cd18:	70fb      	strb	r3, [r7, #3]
   1cd1a:	e00c      	b.n	1cd36 <AppConnIsOpen+0x2a>
  {
    if (pCcb->connId != DM_CONN_ID_NONE)
   1cd1c:	687b      	ldr	r3, [r7, #4]
   1cd1e:	791b      	ldrb	r3, [r3, #4]
   1cd20:	2b00      	cmp	r3, #0
   1cd22:	d002      	beq.n	1cd2a <AppConnIsOpen+0x1e>
    {      
      return pCcb->connId;
   1cd24:	687b      	ldr	r3, [r7, #4]
   1cd26:	791b      	ldrb	r3, [r3, #4]
   1cd28:	e009      	b.n	1cd3e <AppConnIsOpen+0x32>
  for (i = DM_CONN_MAX; i > 0; i--, pCcb++)
   1cd2a:	78fb      	ldrb	r3, [r7, #3]
   1cd2c:	3b01      	subs	r3, #1
   1cd2e:	70fb      	strb	r3, [r7, #3]
   1cd30:	687b      	ldr	r3, [r7, #4]
   1cd32:	3320      	adds	r3, #32
   1cd34:	607b      	str	r3, [r7, #4]
   1cd36:	78fb      	ldrb	r3, [r7, #3]
   1cd38:	2b00      	cmp	r3, #0
   1cd3a:	d1ef      	bne.n	1cd1c <AppConnIsOpen+0x10>
    }
  }
  
  return DM_CONN_ID_NONE;
   1cd3c:	2300      	movs	r3, #0
}
   1cd3e:	4618      	mov	r0, r3
   1cd40:	370c      	adds	r7, #12
   1cd42:	46bd      	mov	sp, r7
   1cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd48:	4770      	bx	lr
   1cd4a:	bf00      	nop
   1cd4c:	10006f70 	.word	0x10006f70

0001cd50 <AppDbGetHdl>:
 *
 *  \return Database record handle or APP_DB_HDL_NONE.
 */
/*************************************************************************************************/
appDbHdl_t AppDbGetHdl(dmConnId_t connId)
{
   1cd50:	b480      	push	{r7}
   1cd52:	b083      	sub	sp, #12
   1cd54:	af00      	add	r7, sp, #0
   1cd56:	4603      	mov	r3, r0
   1cd58:	71fb      	strb	r3, [r7, #7]
  return appConnCb[connId-1].dbHdl;
   1cd5a:	79fb      	ldrb	r3, [r7, #7]
   1cd5c:	3b01      	subs	r3, #1
   1cd5e:	4a05      	ldr	r2, [pc, #20]	; (1cd74 <AppDbGetHdl+0x24>)
   1cd60:	015b      	lsls	r3, r3, #5
   1cd62:	4413      	add	r3, r2
   1cd64:	681b      	ldr	r3, [r3, #0]
}
   1cd66:	4618      	mov	r0, r3
   1cd68:	370c      	adds	r7, #12
   1cd6a:	46bd      	mov	sp, r7
   1cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cd70:	4770      	bx	lr
   1cd72:	bf00      	nop
   1cd74:	10006f70 	.word	0x10006f70

0001cd78 <AppAddDevToResList>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAddDevToResList(dmEvt_t *pMsg, dmConnId_t connId)
{
   1cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd7a:	b087      	sub	sp, #28
   1cd7c:	af02      	add	r7, sp, #8
   1cd7e:	6078      	str	r0, [r7, #4]
   1cd80:	460b      	mov	r3, r1
   1cd82:	70fb      	strb	r3, [r7, #3]
  dmSecKey_t *pPeerKey;
  appDbHdl_t hdl = appConnCb[connId - 1].dbHdl;
   1cd84:	78fb      	ldrb	r3, [r7, #3]
   1cd86:	3b01      	subs	r3, #1
   1cd88:	4a15      	ldr	r2, [pc, #84]	; (1cde0 <AppAddDevToResList+0x68>)
   1cd8a:	015b      	lsls	r3, r3, #5
   1cd8c:	4413      	add	r3, r2
   1cd8e:	681b      	ldr	r3, [r3, #0]
   1cd90:	60fb      	str	r3, [r7, #12]

  /* if LL Privacy is supported and the peer device has distributed its IRK */
  if (HciLlPrivacySupported() && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL))!= NULL))
   1cd92:	f7f8 fbb5 	bl	15500 <HciLlPrivacySupported>
   1cd96:	4603      	mov	r3, r0
   1cd98:	2b00      	cmp	r3, #0
   1cd9a:	d01c      	beq.n	1cdd6 <AppAddDevToResList+0x5e>
   1cd9c:	2200      	movs	r2, #0
   1cd9e:	2104      	movs	r1, #4
   1cda0:	68f8      	ldr	r0, [r7, #12]
   1cda2:	f7fd f909 	bl	19fb8 <AppDbGetKey>
   1cda6:	60b8      	str	r0, [r7, #8]
   1cda8:	68bb      	ldr	r3, [r7, #8]
   1cdaa:	2b00      	cmp	r3, #0
   1cdac:	d013      	beq.n	1cdd6 <AppAddDevToResList+0x5e>
  {
    /* add peer device to resolving list. If all-zero local or peer IRK is used then
       LL will only use or accept local or peer identity address respectively. */
    DmPrivAddDevToResList(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, pPeerKey->irk.key,
   1cdae:	68bb      	ldr	r3, [r7, #8]
   1cdb0:	7d9c      	ldrb	r4, [r3, #22]
   1cdb2:	68bb      	ldr	r3, [r7, #8]
   1cdb4:	f103 0510 	add.w	r5, r3, #16
   1cdb8:	68be      	ldr	r6, [r7, #8]
   1cdba:	f7f3 f99b 	bl	100f4 <DmSecGetLocalIrk>
   1cdbe:	4602      	mov	r2, r0
   1cdc0:	687b      	ldr	r3, [r7, #4]
   1cdc2:	881b      	ldrh	r3, [r3, #0]
   1cdc4:	9301      	str	r3, [sp, #4]
   1cdc6:	2301      	movs	r3, #1
   1cdc8:	9300      	str	r3, [sp, #0]
   1cdca:	4613      	mov	r3, r2
   1cdcc:	4632      	mov	r2, r6
   1cdce:	4629      	mov	r1, r5
   1cdd0:	4620      	mov	r0, r4
   1cdd2:	f7f2 ffd7 	bl	fd84 <DmPrivAddDevToResList>
                          DmSecGetLocalIrk(), TRUE, pMsg->hdr.param);
  }
}
   1cdd6:	bf00      	nop
   1cdd8:	3714      	adds	r7, #20
   1cdda:	46bd      	mov	sp, r7
   1cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cdde:	bf00      	nop
   1cde0:	10006f70 	.word	0x10006f70

0001cde4 <AppUpdatePrivacyMode>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppUpdatePrivacyMode(appDbHdl_t hdl)
{
   1cde4:	b580      	push	{r7, lr}
   1cde6:	b084      	sub	sp, #16
   1cde8:	af00      	add	r7, sp, #0
   1cdea:	6078      	str	r0, [r7, #4]
  /* if peer device's been added to resolving list but RPA Only attribute not found on peer device */
  if ((hdl != APP_DB_HDL_NONE) && AppDbGetPeerAddedToRl(hdl) && !AppDbGetPeerRpao(hdl))
   1cdec:	687b      	ldr	r3, [r7, #4]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d020      	beq.n	1ce34 <AppUpdatePrivacyMode+0x50>
   1cdf2:	6878      	ldr	r0, [r7, #4]
   1cdf4:	f7fd f9e3 	bl	1a1be <AppDbGetPeerAddedToRl>
   1cdf8:	4603      	mov	r3, r0
   1cdfa:	2b00      	cmp	r3, #0
   1cdfc:	d01a      	beq.n	1ce34 <AppUpdatePrivacyMode+0x50>
   1cdfe:	6878      	ldr	r0, [r7, #4]
   1ce00:	f7fd f9fa 	bl	1a1f8 <AppDbGetPeerRpao>
   1ce04:	4603      	mov	r3, r0
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d114      	bne.n	1ce34 <AppUpdatePrivacyMode+0x50>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL);
   1ce0a:	2200      	movs	r2, #0
   1ce0c:	2104      	movs	r1, #4
   1ce0e:	6878      	ldr	r0, [r7, #4]
   1ce10:	f7fd f8d2 	bl	19fb8 <AppDbGetKey>
   1ce14:	60f8      	str	r0, [r7, #12]
    if (pPeerKey != NULL)
   1ce16:	68fb      	ldr	r3, [r7, #12]
   1ce18:	2b00      	cmp	r3, #0
   1ce1a:	d00b      	beq.n	1ce34 <AppUpdatePrivacyMode+0x50>
    {
      /* set device privacy mode for this peer device */
      DmPrivSetPrivacyMode(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr, DM_PRIV_MODE_DEVICE);
   1ce1c:	68fb      	ldr	r3, [r7, #12]
   1ce1e:	7d98      	ldrb	r0, [r3, #22]
   1ce20:	68fb      	ldr	r3, [r7, #12]
   1ce22:	3310      	adds	r3, #16
   1ce24:	2201      	movs	r2, #1
   1ce26:	4619      	mov	r1, r3
   1ce28:	f7f3 f826 	bl	fe78 <DmPrivSetPrivacyMode>

      /* make sure resolving list flag cleared */
      AppDbSetPeerAddedToRl(hdl, FALSE);
   1ce2c:	2100      	movs	r1, #0
   1ce2e:	6878      	ldr	r0, [r7, #4]
   1ce30:	f7fd f9d2 	bl	1a1d8 <AppDbSetPeerAddedToRl>
    }
  }
}
   1ce34:	bf00      	nop
   1ce36:	3710      	adds	r7, #16
   1ce38:	46bd      	mov	sp, r7
   1ce3a:	bd80      	pop	{r7, pc}

0001ce3c <appServerSetSigningInfo>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appServerSetSigningInfo(dmConnId_t connId)
{
   1ce3c:	b580      	push	{r7, lr}
   1ce3e:	b084      	sub	sp, #16
   1ce40:	af00      	add	r7, sp, #0
   1ce42:	4603      	mov	r3, r0
   1ce44:	71fb      	strb	r3, [r7, #7]
  appDbHdl_t  dbHdl;
  dmSecKey_t  *pPeerKey;

  /* if peer's CSRK is available */
  if (((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE) &&
   1ce46:	79fb      	ldrb	r3, [r7, #7]
   1ce48:	4618      	mov	r0, r3
   1ce4a:	f7ff ff81 	bl	1cd50 <AppDbGetHdl>
   1ce4e:	60f8      	str	r0, [r7, #12]
   1ce50:	68fb      	ldr	r3, [r7, #12]
   1ce52:	2b00      	cmp	r3, #0
   1ce54:	d017      	beq.n	1ce86 <appServerSetSigningInfo+0x4a>
   1ce56:	2200      	movs	r2, #0
   1ce58:	2108      	movs	r1, #8
   1ce5a:	68f8      	ldr	r0, [r7, #12]
   1ce5c:	f7fd f8ac 	bl	19fb8 <AppDbGetKey>
   1ce60:	60b8      	str	r0, [r7, #8]
   1ce62:	68bb      	ldr	r3, [r7, #8]
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	d00e      	beq.n	1ce86 <appServerSetSigningInfo+0x4a>
      ((pPeerKey = AppDbGetKey(dbHdl, DM_KEY_CSRK, NULL)) != NULL))
  {
    /* set peer's CSRK and sign counter on this connection */
    AttsSetCsrk(connId, pPeerKey->csrk.key);
   1ce68:	68ba      	ldr	r2, [r7, #8]
   1ce6a:	79fb      	ldrb	r3, [r7, #7]
   1ce6c:	4611      	mov	r1, r2
   1ce6e:	4618      	mov	r0, r3
   1ce70:	f7f1 fc02 	bl	e678 <AttsSetCsrk>
    AttsSetSignCounter(connId, AppDbGetPeerSignCounter(dbHdl));
   1ce74:	68f8      	ldr	r0, [r7, #12]
   1ce76:	f7fd f986 	bl	1a186 <AppDbGetPeerSignCounter>
   1ce7a:	4602      	mov	r2, r0
   1ce7c:	79fb      	ldrb	r3, [r7, #7]
   1ce7e:	4611      	mov	r1, r2
   1ce80:	4618      	mov	r0, r3
   1ce82:	f7f1 fc03 	bl	e68c <AttsSetSignCounter>
  }
}
   1ce86:	bf00      	nop
   1ce88:	3710      	adds	r7, #16
   1ce8a:	46bd      	mov	sp, r7
   1ce8c:	bd80      	pop	{r7, pc}

0001ce8e <AppServerConnCback>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppServerConnCback(dmEvt_t *pDmEvt)
{
   1ce8e:	b580      	push	{r7, lr}
   1ce90:	b084      	sub	sp, #16
   1ce92:	af00      	add	r7, sp, #0
   1ce94:	6078      	str	r0, [r7, #4]
  bool_t      bonded;
  appDbHdl_t  dbHdl;
  dmConnId_t  connId = (dmConnId_t) pDmEvt->hdr.param;
   1ce96:	687b      	ldr	r3, [r7, #4]
   1ce98:	881b      	ldrh	r3, [r3, #0]
   1ce9a:	73fb      	strb	r3, [r7, #15]
  
  if (pDmEvt->hdr.event == DM_CONN_OPEN_IND)
   1ce9c:	687b      	ldr	r3, [r7, #4]
   1ce9e:	789b      	ldrb	r3, [r3, #2]
   1cea0:	2b27      	cmp	r3, #39	; 0x27
   1cea2:	d109      	bne.n	1ceb8 <AppServerConnCback+0x2a>
  {
    /* set up CCC table with uninitialized (all zero) values */
    AttsCccInitTable(connId, NULL);
   1cea4:	7bfb      	ldrb	r3, [r7, #15]
   1cea6:	2100      	movs	r1, #0
   1cea8:	4618      	mov	r0, r3
   1ceaa:	f7f0 f9e7 	bl	d27c <AttsCccInitTable>

    /* set peer's data signing info */
    appServerSetSigningInfo(connId);
   1ceae:	7bfb      	ldrb	r3, [r7, #15]
   1ceb0:	4618      	mov	r0, r3
   1ceb2:	f7ff ffc3 	bl	1ce3c <appServerSetSigningInfo>
    {
      /* remember peer's sign counter */
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
    }
  }
}
   1ceb6:	e067      	b.n	1cf88 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_PAIR_CMPL_IND)
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	789b      	ldrb	r3, [r3, #2]
   1cebc:	2b2a      	cmp	r3, #42	; 0x2a
   1cebe:	d129      	bne.n	1cf14 <AppServerConnCback+0x86>
    bonded = ((pDmEvt->pairCmpl.auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG);
   1cec0:	687b      	ldr	r3, [r7, #4]
   1cec2:	791b      	ldrb	r3, [r3, #4]
   1cec4:	f003 0301 	and.w	r3, r3, #1
   1cec8:	2b00      	cmp	r3, #0
   1ceca:	bf14      	ite	ne
   1cecc:	2301      	movne	r3, #1
   1cece:	2300      	moveq	r3, #0
   1ced0:	b2db      	uxtb	r3, r3
   1ced2:	73bb      	strb	r3, [r7, #14]
    if (bonded && (appCheckBonded(connId) == FALSE))
   1ced4:	7bbb      	ldrb	r3, [r7, #14]
   1ced6:	2b00      	cmp	r3, #0
   1ced8:	d017      	beq.n	1cf0a <AppServerConnCback+0x7c>
   1ceda:	7bfb      	ldrb	r3, [r7, #15]
   1cedc:	4618      	mov	r0, r3
   1cede:	f7ff fe1f 	bl	1cb20 <appCheckBonded>
   1cee2:	4603      	mov	r3, r0
   1cee4:	2b00      	cmp	r3, #0
   1cee6:	d110      	bne.n	1cf0a <AppServerConnCback+0x7c>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1cee8:	7bfb      	ldrb	r3, [r7, #15]
   1ceea:	4618      	mov	r0, r3
   1ceec:	f7ff ff30 	bl	1cd50 <AppDbGetHdl>
   1cef0:	60b8      	str	r0, [r7, #8]
   1cef2:	68bb      	ldr	r3, [r7, #8]
   1cef4:	2b00      	cmp	r3, #0
   1cef6:	d008      	beq.n	1cf0a <AppServerConnCback+0x7c>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1cef8:	68b8      	ldr	r0, [r7, #8]
   1cefa:	f7fd f923 	bl	1a144 <AppDbGetCccTbl>
   1cefe:	4602      	mov	r2, r0
   1cf00:	7bfb      	ldrb	r3, [r7, #15]
   1cf02:	4611      	mov	r1, r2
   1cf04:	4618      	mov	r0, r3
   1cf06:	f7f0 f9b9 	bl	d27c <AttsCccInitTable>
    appServerSetSigningInfo(connId);
   1cf0a:	7bfb      	ldrb	r3, [r7, #15]
   1cf0c:	4618      	mov	r0, r3
   1cf0e:	f7ff ff95 	bl	1ce3c <appServerSetSigningInfo>
}
   1cf12:	e039      	b.n	1cf88 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_SEC_ENCRYPT_IND)
   1cf14:	687b      	ldr	r3, [r7, #4]
   1cf16:	789b      	ldrb	r3, [r3, #2]
   1cf18:	2b2c      	cmp	r3, #44	; 0x2c
   1cf1a:	d11c      	bne.n	1cf56 <AppServerConnCback+0xc8>
    if (pDmEvt->encryptInd.usingLtk && appCheckBondByLtk(connId))
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	791b      	ldrb	r3, [r3, #4]
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	d031      	beq.n	1cf88 <AppServerConnCback+0xfa>
   1cf24:	7bfb      	ldrb	r3, [r7, #15]
   1cf26:	4618      	mov	r0, r3
   1cf28:	f7ff fe0e 	bl	1cb48 <appCheckBondByLtk>
   1cf2c:	4603      	mov	r3, r0
   1cf2e:	2b00      	cmp	r3, #0
   1cf30:	d02a      	beq.n	1cf88 <AppServerConnCback+0xfa>
      if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1cf32:	7bfb      	ldrb	r3, [r7, #15]
   1cf34:	4618      	mov	r0, r3
   1cf36:	f7ff ff0b 	bl	1cd50 <AppDbGetHdl>
   1cf3a:	60b8      	str	r0, [r7, #8]
   1cf3c:	68bb      	ldr	r3, [r7, #8]
   1cf3e:	2b00      	cmp	r3, #0
   1cf40:	d022      	beq.n	1cf88 <AppServerConnCback+0xfa>
        AttsCccInitTable(connId, AppDbGetCccTbl(dbHdl));
   1cf42:	68b8      	ldr	r0, [r7, #8]
   1cf44:	f7fd f8fe 	bl	1a144 <AppDbGetCccTbl>
   1cf48:	4602      	mov	r2, r0
   1cf4a:	7bfb      	ldrb	r3, [r7, #15]
   1cf4c:	4611      	mov	r1, r2
   1cf4e:	4618      	mov	r0, r3
   1cf50:	f7f0 f994 	bl	d27c <AttsCccInitTable>
}
   1cf54:	e018      	b.n	1cf88 <AppServerConnCback+0xfa>
  else if (pDmEvt->hdr.event == DM_CONN_CLOSE_IND)
   1cf56:	687b      	ldr	r3, [r7, #4]
   1cf58:	789b      	ldrb	r3, [r3, #2]
   1cf5a:	2b28      	cmp	r3, #40	; 0x28
   1cf5c:	d114      	bne.n	1cf88 <AppServerConnCback+0xfa>
    AttsCccClearTable(connId);
   1cf5e:	7bfb      	ldrb	r3, [r7, #15]
   1cf60:	4618      	mov	r0, r3
   1cf62:	f7f0 f9cd 	bl	d300 <AttsCccClearTable>
    if ((dbHdl = AppDbGetHdl(connId)) != APP_DB_HDL_NONE)
   1cf66:	7bfb      	ldrb	r3, [r7, #15]
   1cf68:	4618      	mov	r0, r3
   1cf6a:	f7ff fef1 	bl	1cd50 <AppDbGetHdl>
   1cf6e:	60b8      	str	r0, [r7, #8]
   1cf70:	68bb      	ldr	r3, [r7, #8]
   1cf72:	2b00      	cmp	r3, #0
   1cf74:	d008      	beq.n	1cf88 <AppServerConnCback+0xfa>
      AppDbSetPeerSignCounter(dbHdl, AttsGetSignCounter(connId));
   1cf76:	7bfb      	ldrb	r3, [r7, #15]
   1cf78:	4618      	mov	r0, r3
   1cf7a:	f7f1 fb8f 	bl	e69c <AttsGetSignCounter>
   1cf7e:	4603      	mov	r3, r0
   1cf80:	4619      	mov	r1, r3
   1cf82:	68b8      	ldr	r0, [r7, #8]
   1cf84:	f7fd f90c 	bl	1a1a0 <AppDbSetPeerSignCounter>
}
   1cf88:	bf00      	nop
   1cf8a:	3710      	adds	r7, #16
   1cf8c:	46bd      	mov	sp, r7
   1cf8e:	bd80      	pop	{r7, pc}

0001cf90 <appSlaveAdvModeInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveAdvModeInit(void)
{
   1cf90:	b480      	push	{r7}
   1cf92:	af00      	add	r7, sp, #0
  /* initialize advertising callbacks */
  appSlaveCb.advStopCback = NULL;
   1cf94:	4b05      	ldr	r3, [pc, #20]	; (1cfac <appSlaveAdvModeInit+0x1c>)
   1cf96:	2200      	movs	r2, #0
   1cf98:	641a      	str	r2, [r3, #64]	; 0x40
  appSlaveCb.advRestartCback = NULL;
   1cf9a:	4b04      	ldr	r3, [pc, #16]	; (1cfac <appSlaveAdvModeInit+0x1c>)
   1cf9c:	2200      	movs	r2, #0
   1cf9e:	645a      	str	r2, [r3, #68]	; 0x44
}
   1cfa0:	bf00      	nop
   1cfa2:	46bd      	mov	sp, r7
   1cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
   1cfa8:	4770      	bx	lr
   1cfaa:	bf00      	nop
   1cfac:	10007070 	.word	0x10007070

0001cfb0 <appSlaveConnectableAdv>:
 *
 *  \return TRUE if connectable advertising enabled. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveConnectableAdv(uint8_t numSets, uint8_t *pAdvHandles)
{
   1cfb0:	b480      	push	{r7}
   1cfb2:	b085      	sub	sp, #20
   1cfb4:	af00      	add	r7, sp, #0
   1cfb6:	4603      	mov	r3, r0
   1cfb8:	6039      	str	r1, [r7, #0]
   1cfba:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;

  /* for each advertising set in advHandle */
  for (i = 0; i < numSets; i++)
   1cfbc:	2300      	movs	r3, #0
   1cfbe:	73fb      	strb	r3, [r7, #15]
   1cfc0:	e022      	b.n	1d008 <appSlaveConnectableAdv+0x58>
  {
    /* for each advertising set */
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1cfc2:	2300      	movs	r3, #0
   1cfc4:	73bb      	strb	r3, [r7, #14]
   1cfc6:	e019      	b.n	1cffc <appSlaveConnectableAdv+0x4c>
    {
      /* if connectable advertising */
      if ((pAdvHandles[i] == j)                            &&
   1cfc8:	7bfb      	ldrb	r3, [r7, #15]
   1cfca:	683a      	ldr	r2, [r7, #0]
   1cfcc:	4413      	add	r3, r2
   1cfce:	781b      	ldrb	r3, [r3, #0]
   1cfd0:	7bba      	ldrb	r2, [r7, #14]
   1cfd2:	429a      	cmp	r2, r3
   1cfd4:	d10f      	bne.n	1cff6 <appSlaveConnectableAdv+0x46>
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1cfd6:	7bbb      	ldrb	r3, [r7, #14]
   1cfd8:	4a11      	ldr	r2, [pc, #68]	; (1d020 <appSlaveConnectableAdv+0x70>)
   1cfda:	4413      	add	r3, r2
   1cfdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
      if ((pAdvHandles[i] == j)                            &&
   1cfe0:	2b00      	cmp	r3, #0
   1cfe2:	d006      	beq.n	1cff2 <appSlaveConnectableAdv+0x42>
           (appSlaveCb.advType[j] == DM_EXT_ADV_CONN_UNDIRECT)))
   1cfe4:	7bbb      	ldrb	r3, [r7, #14]
   1cfe6:	4a0e      	ldr	r2, [pc, #56]	; (1d020 <appSlaveConnectableAdv+0x70>)
   1cfe8:	4413      	add	r3, r2
   1cfea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
          ((appSlaveCb.advType[j] == DM_ADV_CONN_UNDIRECT) ||
   1cfee:	2b05      	cmp	r3, #5
   1cff0:	d101      	bne.n	1cff6 <appSlaveConnectableAdv+0x46>
      {
        return TRUE;
   1cff2:	2301      	movs	r3, #1
   1cff4:	e00d      	b.n	1d012 <appSlaveConnectableAdv+0x62>
    for (j = 0; j < DM_NUM_ADV_SETS; j++)
   1cff6:	7bbb      	ldrb	r3, [r7, #14]
   1cff8:	3301      	adds	r3, #1
   1cffa:	73bb      	strb	r3, [r7, #14]
   1cffc:	7bbb      	ldrb	r3, [r7, #14]
   1cffe:	2b00      	cmp	r3, #0
   1d000:	d0e2      	beq.n	1cfc8 <appSlaveConnectableAdv+0x18>
  for (i = 0; i < numSets; i++)
   1d002:	7bfb      	ldrb	r3, [r7, #15]
   1d004:	3301      	adds	r3, #1
   1d006:	73fb      	strb	r3, [r7, #15]
   1d008:	7bfa      	ldrb	r2, [r7, #15]
   1d00a:	79fb      	ldrb	r3, [r7, #7]
   1d00c:	429a      	cmp	r2, r3
   1d00e:	d3d8      	bcc.n	1cfc2 <appSlaveConnectableAdv+0x12>
      }
    }
  }

  return FALSE;
   1d010:	2300      	movs	r3, #0
}
   1d012:	4618      	mov	r0, r3
   1d014:	3714      	adds	r7, #20
   1d016:	46bd      	mov	sp, r7
   1d018:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d01c:	4770      	bx	lr
   1d01e:	bf00      	nop
   1d020:	10007070 	.word	0x10007070

0001d024 <appSlaveForceAdvDataSync>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveForceAdvDataSync(uint8_t advHandle, uint8_t mode)
{
   1d024:	b480      	push	{r7}
   1d026:	b085      	sub	sp, #20
   1d028:	af00      	add	r7, sp, #0
   1d02a:	4603      	mov	r3, r0
   1d02c:	460a      	mov	r2, r1
   1d02e:	71fb      	strb	r3, [r7, #7]
   1d030:	4613      	mov	r3, r2
   1d032:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1d034:	79bb      	ldrb	r3, [r7, #6]
   1d036:	005b      	lsls	r3, r3, #1
   1d038:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1d03a:	79bb      	ldrb	r3, [r7, #6]
   1d03c:	005b      	lsls	r3, r3, #1
   1d03e:	b2db      	uxtb	r3, r3
   1d040:	3301      	adds	r3, #1
   1d042:	73bb      	strb	r3, [r7, #14]

  /* force update of advertising data */
  appSlaveCb.advDataOffset[advHandle][advLoc] = 0;
   1d044:	79fa      	ldrb	r2, [r7, #7]
   1d046:	7bfb      	ldrb	r3, [r7, #15]
   1d048:	490d      	ldr	r1, [pc, #52]	; (1d080 <appSlaveForceAdvDataSync+0x5c>)
   1d04a:	0092      	lsls	r2, r2, #2
   1d04c:	4413      	add	r3, r2
   1d04e:	3310      	adds	r3, #16
   1d050:	2200      	movs	r2, #0
   1d052:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataOffset[advHandle][scanLoc] = 0;
   1d056:	79fa      	ldrb	r2, [r7, #7]
   1d058:	7bbb      	ldrb	r3, [r7, #14]
   1d05a:	4909      	ldr	r1, [pc, #36]	; (1d080 <appSlaveForceAdvDataSync+0x5c>)
   1d05c:	0092      	lsls	r2, r2, #2
   1d05e:	4413      	add	r3, r2
   1d060:	3310      	adds	r3, #16
   1d062:	2200      	movs	r2, #0
   1d064:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  appSlaveCb.advDataSynced[advHandle] = FALSE;
   1d068:	79fb      	ldrb	r3, [r7, #7]
   1d06a:	4a05      	ldr	r2, [pc, #20]	; (1d080 <appSlaveForceAdvDataSync+0x5c>)
   1d06c:	4413      	add	r3, r2
   1d06e:	2200      	movs	r2, #0
   1d070:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   1d074:	bf00      	nop
   1d076:	3714      	adds	r7, #20
   1d078:	46bd      	mov	sp, r7
   1d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d07e:	4770      	bx	lr
   1d080:	10007070 	.word	0x10007070

0001d084 <appSetAdvScanDataFrag>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanDataFrag(uint8_t advHandle, uint8_t location)
{
   1d084:	b5b0      	push	{r4, r5, r7, lr}
   1d086:	b088      	sub	sp, #32
   1d088:	af02      	add	r7, sp, #8
   1d08a:	4603      	mov	r3, r0
   1d08c:	460a      	mov	r2, r1
   1d08e:	71fb      	strb	r3, [r7, #7]
   1d090:	4613      	mov	r3, r2
   1d092:	71bb      	strb	r3, [r7, #6]
  uint8_t  op;
  uint16_t fragLen;
  uint16_t remainLen;
  uint8_t  *pAdvData;
  bool_t   firstFrag = TRUE;
   1d094:	2301      	movs	r3, #1
   1d096:	747b      	strb	r3, [r7, #17]

  /* get data pointer and remaining data length */
  pAdvData = appSlaveCb.pAdvData[advHandle][location];
   1d098:	79fa      	ldrb	r2, [r7, #7]
   1d09a:	79bb      	ldrb	r3, [r7, #6]
   1d09c:	493a      	ldr	r1, [pc, #232]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d09e:	0092      	lsls	r2, r2, #2
   1d0a0:	4413      	add	r3, r2
   1d0a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1d0a6:	60fb      	str	r3, [r7, #12]
  remainLen = appSlaveCb.advDataLen[advHandle][location] - appSlaveCb.advDataOffset[advHandle][location];
   1d0a8:	79fa      	ldrb	r2, [r7, #7]
   1d0aa:	79bb      	ldrb	r3, [r7, #6]
   1d0ac:	4936      	ldr	r1, [pc, #216]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d0ae:	0092      	lsls	r2, r2, #2
   1d0b0:	4413      	add	r3, r2
   1d0b2:	3308      	adds	r3, #8
   1d0b4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1d0b8:	79f9      	ldrb	r1, [r7, #7]
   1d0ba:	79bb      	ldrb	r3, [r7, #6]
   1d0bc:	4832      	ldr	r0, [pc, #200]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d0be:	0089      	lsls	r1, r1, #2
   1d0c0:	440b      	add	r3, r1
   1d0c2:	3310      	adds	r3, #16
   1d0c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1d0c8:	1ad3      	subs	r3, r2, r3
   1d0ca:	827b      	strh	r3, [r7, #18]

  /* if remaing data length > max adv data length supported by Controller */
  if (remainLen > appSlaveCb.maxAdvDataLen[advHandle])
   1d0cc:	79fb      	ldrb	r3, [r7, #7]
   1d0ce:	4a2e      	ldr	r2, [pc, #184]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d0d0:	3314      	adds	r3, #20
   1d0d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1d0d6:	8a7a      	ldrh	r2, [r7, #18]
   1d0d8:	429a      	cmp	r2, r3
   1d0da:	d94e      	bls.n	1d17a <appSetAdvScanDataFrag+0xf6>
  {
    remainLen = appSlaveCb.maxAdvDataLen[advHandle];
   1d0dc:	79fb      	ldrb	r3, [r7, #7]
   1d0de:	4a2a      	ldr	r2, [pc, #168]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d0e0:	3314      	adds	r3, #20
   1d0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1d0e6:	827b      	strh	r3, [r7, #18]
  }

  /* while there remains data to be sent */
  while (remainLen > 0)
   1d0e8:	e047      	b.n	1d17a <appSetAdvScanDataFrag+0xf6>
  {
    /* if remaing data length > max length of extended advertising data (per set adv data command) */
    if (remainLen > HCI_EXT_ADV_DATA_LEN)
   1d0ea:	8a7b      	ldrh	r3, [r7, #18]
   1d0ec:	2bfb      	cmp	r3, #251	; 0xfb
   1d0ee:	d909      	bls.n	1d104 <appSetAdvScanDataFrag+0x80>
    {
      /* data needs to be fragmented */
      fragLen = HCI_EXT_ADV_DATA_LEN;
   1d0f0:	23fb      	movs	r3, #251	; 0xfb
   1d0f2:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_FRAG_FIRST : HCI_ADV_DATA_OP_FRAG_INTER;
   1d0f4:	7c7b      	ldrb	r3, [r7, #17]
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	bf14      	ite	ne
   1d0fa:	2301      	movne	r3, #1
   1d0fc:	2300      	moveq	r3, #0
   1d0fe:	b2db      	uxtb	r3, r3
   1d100:	75fb      	strb	r3, [r7, #23]
   1d102:	e008      	b.n	1d116 <appSetAdvScanDataFrag+0x92>
      
    }
    else
    {
      /* no fragmentation needed */
      fragLen = remainLen;
   1d104:	8a7b      	ldrh	r3, [r7, #18]
   1d106:	82bb      	strh	r3, [r7, #20]
      op = firstFrag ? HCI_ADV_DATA_OP_COMP_FRAG : HCI_ADV_DATA_OP_FRAG_LAST;
   1d108:	7c7b      	ldrb	r3, [r7, #17]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	d001      	beq.n	1d112 <appSetAdvScanDataFrag+0x8e>
   1d10e:	2303      	movs	r3, #3
   1d110:	e000      	b.n	1d114 <appSetAdvScanDataFrag+0x90>
   1d112:	2302      	movs	r3, #2
   1d114:	75fb      	strb	r3, [r7, #23]
    }

    /* send adv data */
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1d116:	79bb      	ldrb	r3, [r7, #6]
   1d118:	f003 0301 	and.w	r3, r3, #1
   1d11c:	b2dc      	uxtb	r4, r3
   1d11e:	8abb      	ldrh	r3, [r7, #20]
   1d120:	b2dd      	uxtb	r5, r3
                 &(pAdvData[appSlaveCb.advDataOffset[advHandle][location]]));
   1d122:	79fa      	ldrb	r2, [r7, #7]
   1d124:	79bb      	ldrb	r3, [r7, #6]
   1d126:	4918      	ldr	r1, [pc, #96]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d128:	0092      	lsls	r2, r2, #2
   1d12a:	4413      	add	r3, r2
   1d12c:	3310      	adds	r3, #16
   1d12e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1d132:	461a      	mov	r2, r3
    DmAdvSetData(advHandle, op, APP_LOC_2_DM_LOC(location), (uint8_t)fragLen,
   1d134:	68fb      	ldr	r3, [r7, #12]
   1d136:	4413      	add	r3, r2
   1d138:	7df9      	ldrb	r1, [r7, #23]
   1d13a:	79f8      	ldrb	r0, [r7, #7]
   1d13c:	9300      	str	r3, [sp, #0]
   1d13e:	462b      	mov	r3, r5
   1d140:	4622      	mov	r2, r4
   1d142:	f7f1 fc93 	bl	ea6c <DmAdvSetData>

    /* store adv data offset */
    appSlaveCb.advDataOffset[advHandle][location] += fragLen;
   1d146:	79fa      	ldrb	r2, [r7, #7]
   1d148:	79bb      	ldrb	r3, [r7, #6]
   1d14a:	79f8      	ldrb	r0, [r7, #7]
   1d14c:	79b9      	ldrb	r1, [r7, #6]
   1d14e:	4c0e      	ldr	r4, [pc, #56]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d150:	0080      	lsls	r0, r0, #2
   1d152:	4401      	add	r1, r0
   1d154:	3110      	adds	r1, #16
   1d156:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
   1d15a:	8ab9      	ldrh	r1, [r7, #20]
   1d15c:	4401      	add	r1, r0
   1d15e:	b288      	uxth	r0, r1
   1d160:	4909      	ldr	r1, [pc, #36]	; (1d188 <appSetAdvScanDataFrag+0x104>)
   1d162:	0092      	lsls	r2, r2, #2
   1d164:	4413      	add	r3, r2
   1d166:	3310      	adds	r3, #16
   1d168:	4602      	mov	r2, r0
   1d16a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    /* update remaining data length */
    remainLen -= fragLen;
   1d16e:	8a7a      	ldrh	r2, [r7, #18]
   1d170:	8abb      	ldrh	r3, [r7, #20]
   1d172:	1ad3      	subs	r3, r2, r3
   1d174:	827b      	strh	r3, [r7, #18]
    firstFrag = FALSE;
   1d176:	2300      	movs	r3, #0
   1d178:	747b      	strb	r3, [r7, #17]
  while (remainLen > 0)
   1d17a:	8a7b      	ldrh	r3, [r7, #18]
   1d17c:	2b00      	cmp	r3, #0
   1d17e:	d1b4      	bne.n	1d0ea <appSetAdvScanDataFrag+0x66>
  }
}
   1d180:	bf00      	nop
   1d182:	3718      	adds	r7, #24
   1d184:	46bd      	mov	sp, r7
   1d186:	bdb0      	pop	{r4, r5, r7, pc}
   1d188:	10007070 	.word	0x10007070

0001d18c <appSetAdvScanData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSetAdvScanData(uint8_t advHandle, uint8_t mode)
{
   1d18c:	b580      	push	{r7, lr}
   1d18e:	b084      	sub	sp, #16
   1d190:	af00      	add	r7, sp, #0
   1d192:	4603      	mov	r3, r0
   1d194:	460a      	mov	r2, r1
   1d196:	71fb      	strb	r3, [r7, #7]
   1d198:	4613      	mov	r3, r2
   1d19a:	71bb      	strb	r3, [r7, #6]
  uint8_t advLoc;
  uint8_t scanLoc;

  /* get advertising/scan data location based on mode */
  advLoc = APP_MODE_2_ADV_LOC(mode);
   1d19c:	79bb      	ldrb	r3, [r7, #6]
   1d19e:	005b      	lsls	r3, r3, #1
   1d1a0:	73fb      	strb	r3, [r7, #15]
  scanLoc = APP_MODE_2_SCAN_LOC(mode);
   1d1a2:	79bb      	ldrb	r3, [r7, #6]
   1d1a4:	005b      	lsls	r3, r3, #1
   1d1a6:	b2db      	uxtb	r3, r3
   1d1a8:	3301      	adds	r3, #1
   1d1aa:	73bb      	strb	r3, [r7, #14]

  /* set advertising data */
  if (appSlaveCb.advDataOffset[advHandle][advLoc] < appSlaveCb.advDataLen[advHandle][advLoc])
   1d1ac:	79fa      	ldrb	r2, [r7, #7]
   1d1ae:	7bfb      	ldrb	r3, [r7, #15]
   1d1b0:	492d      	ldr	r1, [pc, #180]	; (1d268 <appSetAdvScanData+0xdc>)
   1d1b2:	0092      	lsls	r2, r2, #2
   1d1b4:	4413      	add	r3, r2
   1d1b6:	3310      	adds	r3, #16
   1d1b8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1d1bc:	79f9      	ldrb	r1, [r7, #7]
   1d1be:	7bfb      	ldrb	r3, [r7, #15]
   1d1c0:	4829      	ldr	r0, [pc, #164]	; (1d268 <appSetAdvScanData+0xdc>)
   1d1c2:	0089      	lsls	r1, r1, #2
   1d1c4:	440b      	add	r3, r1
   1d1c6:	3308      	adds	r3, #8
   1d1c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1d1cc:	429a      	cmp	r2, r3
   1d1ce:	d205      	bcs.n	1d1dc <appSetAdvScanData+0x50>
  {
    appSetAdvScanDataFrag(advHandle, advLoc);
   1d1d0:	7bfa      	ldrb	r2, [r7, #15]
   1d1d2:	79fb      	ldrb	r3, [r7, #7]
   1d1d4:	4611      	mov	r1, r2
   1d1d6:	4618      	mov	r0, r3
   1d1d8:	f7ff ff54 	bl	1d084 <appSetAdvScanDataFrag>
  }

  /* set scan data */
  if (appSlaveCb.advDataOffset[advHandle][scanLoc] < appSlaveCb.advDataLen[advHandle][scanLoc])
   1d1dc:	79fa      	ldrb	r2, [r7, #7]
   1d1de:	7bbb      	ldrb	r3, [r7, #14]
   1d1e0:	4921      	ldr	r1, [pc, #132]	; (1d268 <appSetAdvScanData+0xdc>)
   1d1e2:	0092      	lsls	r2, r2, #2
   1d1e4:	4413      	add	r3, r2
   1d1e6:	3310      	adds	r3, #16
   1d1e8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1d1ec:	79f9      	ldrb	r1, [r7, #7]
   1d1ee:	7bbb      	ldrb	r3, [r7, #14]
   1d1f0:	481d      	ldr	r0, [pc, #116]	; (1d268 <appSetAdvScanData+0xdc>)
   1d1f2:	0089      	lsls	r1, r1, #2
   1d1f4:	440b      	add	r3, r1
   1d1f6:	3308      	adds	r3, #8
   1d1f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1d1fc:	429a      	cmp	r2, r3
   1d1fe:	d205      	bcs.n	1d20c <appSetAdvScanData+0x80>
  {
    appSetAdvScanDataFrag(advHandle, scanLoc);
   1d200:	7bba      	ldrb	r2, [r7, #14]
   1d202:	79fb      	ldrb	r3, [r7, #7]
   1d204:	4611      	mov	r1, r2
   1d206:	4618      	mov	r0, r3
   1d208:	f7ff ff3c 	bl	1d084 <appSetAdvScanDataFrag>
  }

  /* if all advertising/scan data have been sent */
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1d20c:	79fa      	ldrb	r2, [r7, #7]
   1d20e:	7bfb      	ldrb	r3, [r7, #15]
   1d210:	4915      	ldr	r1, [pc, #84]	; (1d268 <appSetAdvScanData+0xdc>)
   1d212:	0092      	lsls	r2, r2, #2
   1d214:	4413      	add	r3, r2
   1d216:	3310      	adds	r3, #16
   1d218:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1d21c:	79f9      	ldrb	r1, [r7, #7]
   1d21e:	7bfb      	ldrb	r3, [r7, #15]
   1d220:	4811      	ldr	r0, [pc, #68]	; (1d268 <appSetAdvScanData+0xdc>)
   1d222:	0089      	lsls	r1, r1, #2
   1d224:	440b      	add	r3, r1
   1d226:	3308      	adds	r3, #8
   1d228:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
   1d22c:	429a      	cmp	r2, r3
   1d22e:	d317      	bcc.n	1d260 <appSetAdvScanData+0xd4>
      (appSlaveCb.advDataOffset[advHandle][scanLoc] >= appSlaveCb.advDataLen[advHandle][scanLoc]))
   1d230:	79fa      	ldrb	r2, [r7, #7]
   1d232:	7bbb      	ldrb	r3, [r7, #14]
   1d234:	490c      	ldr	r1, [pc, #48]	; (1d268 <appSetAdvScanData+0xdc>)
   1d236:	0092      	lsls	r2, r2, #2
   1d238:	4413      	add	r3, r2
   1d23a:	3310      	adds	r3, #16
   1d23c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1d240:	79f9      	ldrb	r1, [r7, #7]
   1d242:	7bbb      	ldrb	r3, [r7, #14]
   1d244:	4808      	ldr	r0, [pc, #32]	; (1d268 <appSetAdvScanData+0xdc>)
   1d246:	0089      	lsls	r1, r1, #2
   1d248:	440b      	add	r3, r1
   1d24a:	3308      	adds	r3, #8
   1d24c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  if ((appSlaveCb.advDataOffset[advHandle][advLoc] >= appSlaveCb.advDataLen[advHandle][advLoc]) &&
   1d250:	429a      	cmp	r2, r3
   1d252:	d305      	bcc.n	1d260 <appSetAdvScanData+0xd4>
  {
    appSlaveCb.advDataSynced[advHandle] = TRUE;
   1d254:	79fb      	ldrb	r3, [r7, #7]
   1d256:	4a04      	ldr	r2, [pc, #16]	; (1d268 <appSetAdvScanData+0xdc>)
   1d258:	4413      	add	r3, r2
   1d25a:	2201      	movs	r2, #1
   1d25c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1d260:	bf00      	nop
   1d262:	3710      	adds	r7, #16
   1d264:	46bd      	mov	sp, r7
   1d266:	bd80      	pop	{r7, pc}
   1d268:	10007070 	.word	0x10007070

0001d26c <appConnUpdateTimerStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appConnUpdateTimerStart(dmConnId_t connId)
{
   1d26c:	b580      	push	{r7, lr}
   1d26e:	b084      	sub	sp, #16
   1d270:	af00      	add	r7, sp, #0
   1d272:	4603      	mov	r3, r0
   1d274:	71fb      	strb	r3, [r7, #7]
  /* look up app connection control block from DM connection ID */
  appConnCb_t *pCb = &appConnCb[connId - 1];
   1d276:	79fb      	ldrb	r3, [r7, #7]
   1d278:	3b01      	subs	r3, #1
   1d27a:	015b      	lsls	r3, r3, #5
   1d27c:	4a0d      	ldr	r2, [pc, #52]	; (1d2b4 <appConnUpdateTimerStart+0x48>)
   1d27e:	4413      	add	r3, r2
   1d280:	60fb      	str	r3, [r7, #12]

  pCb->updateTimer.handlerId = appHandlerId;
   1d282:	4b0d      	ldr	r3, [pc, #52]	; (1d2b8 <appConnUpdateTimerStart+0x4c>)
   1d284:	781a      	ldrb	r2, [r3, #0]
   1d286:	68fb      	ldr	r3, [r7, #12]
   1d288:	761a      	strb	r2, [r3, #24]
  pCb->updateTimer.msg.event = APP_CONN_UPDATE_TIMEOUT_IND;
   1d28a:	68fb      	ldr	r3, [r7, #12]
   1d28c:	2210      	movs	r2, #16
   1d28e:	771a      	strb	r2, [r3, #28]
  pCb->updateTimer.msg.param = connId;
   1d290:	79fb      	ldrb	r3, [r7, #7]
   1d292:	b29a      	uxth	r2, r3
   1d294:	68fb      	ldr	r3, [r7, #12]
   1d296:	835a      	strh	r2, [r3, #26]
  WsfTimerStartMs(&pCb->updateTimer, pAppUpdateCfg->idlePeriod);
   1d298:	68fb      	ldr	r3, [r7, #12]
   1d29a:	f103 0210 	add.w	r2, r3, #16
   1d29e:	4b07      	ldr	r3, [pc, #28]	; (1d2bc <appConnUpdateTimerStart+0x50>)
   1d2a0:	681b      	ldr	r3, [r3, #0]
   1d2a2:	681b      	ldr	r3, [r3, #0]
   1d2a4:	4619      	mov	r1, r3
   1d2a6:	4610      	mov	r0, r2
   1d2a8:	f7fa fda6 	bl	17df8 <WsfTimerStartMs>
}
   1d2ac:	bf00      	nop
   1d2ae:	3710      	adds	r7, #16
   1d2b0:	46bd      	mov	sp, r7
   1d2b2:	bd80      	pop	{r7, pc}
   1d2b4:	10006f70 	.word	0x10006f70
   1d2b8:	10006f5c 	.word	0x10006f5c
   1d2bc:	10006f44 	.word	0x10006f44

0001d2c0 <appConnUpdateTimerStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appConnUpdateTimerStop(appConnCb_t *pCb)
{
   1d2c0:	b580      	push	{r7, lr}
   1d2c2:	b082      	sub	sp, #8
   1d2c4:	af00      	add	r7, sp, #0
   1d2c6:	6078      	str	r0, [r7, #4]
  /* stop connection update timer */
  if (pAppUpdateCfg->idlePeriod != 0)
   1d2c8:	4b06      	ldr	r3, [pc, #24]	; (1d2e4 <appConnUpdateTimerStop+0x24>)
   1d2ca:	681b      	ldr	r3, [r3, #0]
   1d2cc:	681b      	ldr	r3, [r3, #0]
   1d2ce:	2b00      	cmp	r3, #0
   1d2d0:	d004      	beq.n	1d2dc <appConnUpdateTimerStop+0x1c>
  {
    WsfTimerStop(&pCb->updateTimer);
   1d2d2:	687b      	ldr	r3, [r7, #4]
   1d2d4:	3310      	adds	r3, #16
   1d2d6:	4618      	mov	r0, r3
   1d2d8:	f7fa fda2 	bl	17e20 <WsfTimerStop>
  }  
}
   1d2dc:	bf00      	nop
   1d2de:	3708      	adds	r7, #8
   1d2e0:	46bd      	mov	sp, r7
   1d2e2:	bd80      	pop	{r7, pc}
   1d2e4:	10006f44 	.word	0x10006f44

0001d2e8 <appSlaveResolveAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolveAddr(dmEvt_t *pMsg)
{
   1d2e8:	b580      	push	{r7, lr}
   1d2ea:	b084      	sub	sp, #16
   1d2ec:	af00      	add	r7, sp, #0
   1d2ee:	6078      	str	r0, [r7, #4]
  appDbHdl_t hdl;
  dmSecKey_t *pPeerKey;

  /* if address resolution's in progress */
  if (appSlaveCb.inProgress)
   1d2f0:	4b16      	ldr	r3, [pc, #88]	; (1d34c <appSlaveResolveAddr+0x64>)
   1d2f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1d2f6:	2b00      	cmp	r3, #0
   1d2f8:	d124      	bne.n	1d344 <appSlaveResolveAddr+0x5c>
  {
    return;
  }

  /* get the first database record */
  hdl = AppDbGetNextRecord(APP_DB_HDL_NONE);
   1d2fa:	2000      	movs	r0, #0
   1d2fc:	f7fc fd22 	bl	19d44 <AppDbGetNextRecord>
   1d300:	60f8      	str	r0, [r7, #12]

  /* if we have any bond records */
  if ((hdl != APP_DB_HDL_NONE) && ((pPeerKey = AppDbGetKey(hdl, DM_KEY_IRK, NULL)) != NULL))
   1d302:	68fb      	ldr	r3, [r7, #12]
   1d304:	2b00      	cmp	r3, #0
   1d306:	d01e      	beq.n	1d346 <appSlaveResolveAddr+0x5e>
   1d308:	2200      	movs	r2, #0
   1d30a:	2104      	movs	r1, #4
   1d30c:	68f8      	ldr	r0, [r7, #12]
   1d30e:	f7fc fe53 	bl	19fb8 <AppDbGetKey>
   1d312:	60b8      	str	r0, [r7, #8]
   1d314:	68bb      	ldr	r3, [r7, #8]
   1d316:	2b00      	cmp	r3, #0
   1d318:	d015      	beq.n	1d346 <appSlaveResolveAddr+0x5e>
  {
    /* reslove advertiser's RPA to see if we already have a bond with this device */
    DmPrivResolveAddr(pMsg->connOpen.peerAddr, pPeerKey->irk.key, pMsg->hdr.param);
   1d31a:	687b      	ldr	r3, [r7, #4]
   1d31c:	f103 000a 	add.w	r0, r3, #10
   1d320:	68b9      	ldr	r1, [r7, #8]
   1d322:	687b      	ldr	r3, [r7, #4]
   1d324:	881b      	ldrh	r3, [r3, #0]
   1d326:	461a      	mov	r2, r3
   1d328:	f7f2 fd0c 	bl	fd44 <DmPrivResolveAddr>

    /* store database record handle for later */
    appSlaveCb.dbHdl = hdl;
   1d32c:	4a07      	ldr	r2, [pc, #28]	; (1d34c <appSlaveResolveAddr+0x64>)
   1d32e:	68fb      	ldr	r3, [r7, #12]
   1d330:	6393      	str	r3, [r2, #56]	; 0x38
    appSlaveCb.inProgress = TRUE;
   1d332:	4b06      	ldr	r3, [pc, #24]	; (1d34c <appSlaveResolveAddr+0x64>)
   1d334:	2201      	movs	r2, #1
   1d336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    appSlaveCb.findLtk = FALSE;
   1d33a:	4b04      	ldr	r3, [pc, #16]	; (1d34c <appSlaveResolveAddr+0x64>)
   1d33c:	2200      	movs	r2, #0
   1d33e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1d342:	e000      	b.n	1d346 <appSlaveResolveAddr+0x5e>
    return;
   1d344:	bf00      	nop
  }
}
   1d346:	3710      	adds	r7, #16
   1d348:	46bd      	mov	sp, r7
   1d34a:	bd80      	pop	{r7, pc}
   1d34c:	10007070 	.word	0x10007070

0001d350 <appSecRspLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecRspLtk(appConnCb_t *pCb)
{
   1d350:	b580      	push	{r7, lr}
   1d352:	b084      	sub	sp, #16
   1d354:	af00      	add	r7, sp, #0
   1d356:	6078      	str	r0, [r7, #4]
  dmSecKey_t  *pKey = NULL;
   1d358:	2300      	movs	r3, #0
   1d35a:	60fb      	str	r3, [r7, #12]
  uint8_t     secLevel;

  /* if there is a record */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d35c:	687b      	ldr	r3, [r7, #4]
   1d35e:	681b      	ldr	r3, [r3, #0]
   1d360:	2b00      	cmp	r3, #0
   1d362:	d008      	beq.n	1d376 <appSecRspLtk+0x26>
  {
    /* get ltk */
    pKey = AppDbGetKey(pCb->dbHdl, DM_KEY_LOCAL_LTK, &secLevel);
   1d364:	687b      	ldr	r3, [r7, #4]
   1d366:	681b      	ldr	r3, [r3, #0]
   1d368:	f107 020b 	add.w	r2, r7, #11
   1d36c:	2101      	movs	r1, #1
   1d36e:	4618      	mov	r0, r3
   1d370:	f7fc fe22 	bl	19fb8 <AppDbGetKey>
   1d374:	60f8      	str	r0, [r7, #12]
  }

  if (pKey != NULL)
   1d376:	68fb      	ldr	r3, [r7, #12]
   1d378:	2b00      	cmp	r3, #0
   1d37a:	d011      	beq.n	1d3a0 <appSecRspLtk+0x50>
  {
    /* if not bonded we need to update bonding state when encrypted */
    pCb->bondByLtk = !pCb->bonded;
   1d37c:	687b      	ldr	r3, [r7, #4]
   1d37e:	795b      	ldrb	r3, [r3, #5]
   1d380:	2b00      	cmp	r3, #0
   1d382:	bf0c      	ite	eq
   1d384:	2301      	moveq	r3, #1
   1d386:	2300      	movne	r3, #0
   1d388:	b2db      	uxtb	r3, r3
   1d38a:	461a      	mov	r2, r3
   1d38c:	687b      	ldr	r3, [r7, #4]
   1d38e:	719a      	strb	r2, [r3, #6]

    /* we found the key */
    DmSecLtkRsp(pCb->connId, TRUE, secLevel, pKey->ltk.key);
   1d390:	687b      	ldr	r3, [r7, #4]
   1d392:	7918      	ldrb	r0, [r3, #4]
   1d394:	7afa      	ldrb	r2, [r7, #11]
   1d396:	68fb      	ldr	r3, [r7, #12]
   1d398:	2101      	movs	r1, #1
   1d39a:	f7f2 fff2 	bl	10382 <DmSecLtkRsp>
    pCb->bondByLtk = FALSE;

    /* key not found */
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
  }
}
   1d39e:	e009      	b.n	1d3b4 <appSecRspLtk+0x64>
    pCb->bondByLtk = FALSE;
   1d3a0:	687b      	ldr	r3, [r7, #4]
   1d3a2:	2200      	movs	r2, #0
   1d3a4:	719a      	strb	r2, [r3, #6]
    DmSecLtkRsp(pCb->connId, FALSE, 0, NULL);
   1d3a6:	687b      	ldr	r3, [r7, #4]
   1d3a8:	7918      	ldrb	r0, [r3, #4]
   1d3aa:	2300      	movs	r3, #0
   1d3ac:	2200      	movs	r2, #0
   1d3ae:	2100      	movs	r1, #0
   1d3b0:	f7f2 ffe7 	bl	10382 <DmSecLtkRsp>
}
   1d3b4:	bf00      	nop
   1d3b6:	3710      	adds	r7, #16
   1d3b8:	46bd      	mov	sp, r7
   1d3ba:	bd80      	pop	{r7, pc}

0001d3bc <appSlaveConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d3bc:	b580      	push	{r7, lr}
   1d3be:	b082      	sub	sp, #8
   1d3c0:	af00      	add	r7, sp, #0
   1d3c2:	6078      	str	r0, [r7, #4]
   1d3c4:	6039      	str	r1, [r7, #0]
  /* process connection open event */
  appSlaveProcConnOpen(pMsg, pCb);
   1d3c6:	6839      	ldr	r1, [r7, #0]
   1d3c8:	6878      	ldr	r0, [r7, #4]
   1d3ca:	f000 f83f 	bl	1d44c <appSlaveProcConnOpen>

  if (appSlaveCb.advRestartCback != NULL)
   1d3ce:	4b06      	ldr	r3, [pc, #24]	; (1d3e8 <appSlaveConnOpen+0x2c>)
   1d3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d3d2:	2b00      	cmp	r3, #0
   1d3d4:	d003      	beq.n	1d3de <appSlaveConnOpen+0x22>
  {
    /* restart advertising */
    (*appSlaveCb.advRestartCback)(pMsg);
   1d3d6:	4b04      	ldr	r3, [pc, #16]	; (1d3e8 <appSlaveConnOpen+0x2c>)
   1d3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d3da:	6878      	ldr	r0, [r7, #4]
   1d3dc:	4798      	blx	r3
  }
}
   1d3de:	bf00      	nop
   1d3e0:	3708      	adds	r7, #8
   1d3e2:	46bd      	mov	sp, r7
   1d3e4:	bd80      	pop	{r7, pc}
   1d3e6:	bf00      	nop
   1d3e8:	10007070 	.word	0x10007070

0001d3ec <appSlaveConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d3ec:	b580      	push	{r7, lr}
   1d3ee:	b084      	sub	sp, #16
   1d3f0:	af00      	add	r7, sp, #0
   1d3f2:	6078      	str	r0, [r7, #4]
   1d3f4:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* update privacy mode for peer device */
  AppUpdatePrivacyMode(pCb->dbHdl);
   1d3f6:	683b      	ldr	r3, [r7, #0]
   1d3f8:	681b      	ldr	r3, [r3, #0]
   1d3fa:	4618      	mov	r0, r3
   1d3fc:	f7ff fcf2 	bl	1cde4 <AppUpdatePrivacyMode>

  /* if actually advertising has timed out (for high duty cycle connectable directed advertising) */
  if (pMsg->hdr.status == HCI_ERR_ADV_TIMEOUT)
   1d400:	687b      	ldr	r3, [r7, #4]
   1d402:	78db      	ldrb	r3, [r3, #3]
   1d404:	2b3c      	cmp	r3, #60	; 0x3c
   1d406:	d10f      	bne.n	1d428 <appSlaveConnClose+0x3c>
  {
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d408:	2300      	movs	r3, #0
   1d40a:	73fb      	strb	r3, [r7, #15]
   1d40c:	e008      	b.n	1d420 <appSlaveConnClose+0x34>
    {
      /* done advertising */
      appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1d40e:	7bfb      	ldrb	r3, [r7, #15]
   1d410:	4a0d      	ldr	r2, [pc, #52]	; (1d448 <appSlaveConnClose+0x5c>)
   1d412:	4413      	add	r3, r2
   1d414:	2203      	movs	r2, #3
   1d416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d41a:	7bfb      	ldrb	r3, [r7, #15]
   1d41c:	3301      	adds	r3, #1
   1d41e:	73fb      	strb	r3, [r7, #15]
   1d420:	7bfb      	ldrb	r3, [r7, #15]
   1d422:	2b00      	cmp	r3, #0
   1d424:	d0f3      	beq.n	1d40e <appSlaveConnClose+0x22>
    {
      /* restart advertising */
      (*appSlaveCb.advRestartCback)(pMsg);
    }
  }
}
   1d426:	e00b      	b.n	1d440 <appSlaveConnClose+0x54>
    appSlaveProcConnClose(pMsg, pCb);
   1d428:	6839      	ldr	r1, [r7, #0]
   1d42a:	6878      	ldr	r0, [r7, #4]
   1d42c:	f000 f84a 	bl	1d4c4 <appSlaveProcConnClose>
    if (appSlaveCb.advRestartCback != NULL)
   1d430:	4b05      	ldr	r3, [pc, #20]	; (1d448 <appSlaveConnClose+0x5c>)
   1d432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d434:	2b00      	cmp	r3, #0
   1d436:	d003      	beq.n	1d440 <appSlaveConnClose+0x54>
      (*appSlaveCb.advRestartCback)(pMsg);
   1d438:	4b03      	ldr	r3, [pc, #12]	; (1d448 <appSlaveConnClose+0x5c>)
   1d43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d43c:	6878      	ldr	r0, [r7, #4]
   1d43e:	4798      	blx	r3
}
   1d440:	bf00      	nop
   1d442:	3710      	adds	r7, #16
   1d444:	46bd      	mov	sp, r7
   1d446:	bd80      	pop	{r7, pc}
   1d448:	10007070 	.word	0x10007070

0001d44c <appSlaveProcConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{ 
   1d44c:	b580      	push	{r7, lr}
   1d44e:	b082      	sub	sp, #8
   1d450:	af00      	add	r7, sp, #0
   1d452:	6078      	str	r0, [r7, #4]
   1d454:	6039      	str	r1, [r7, #0]
  /* store connection ID */
  pCb->connId = (dmConnId_t) pMsg->hdr.param;
   1d456:	687b      	ldr	r3, [r7, #4]
   1d458:	881b      	ldrh	r3, [r3, #0]
   1d45a:	b2da      	uxtb	r2, r3
   1d45c:	683b      	ldr	r3, [r7, #0]
   1d45e:	711a      	strb	r2, [r3, #4]
  
  /* check if we should do connection parameter update */
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1d460:	4b17      	ldr	r3, [pc, #92]	; (1d4c0 <appSlaveProcConnOpen+0x74>)
   1d462:	681b      	ldr	r3, [r3, #0]
   1d464:	681b      	ldr	r3, [r3, #0]
   1d466:	2b00      	cmp	r3, #0
   1d468:	d026      	beq.n	1d4b8 <appSlaveProcConnOpen+0x6c>
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1d46a:	687b      	ldr	r3, [r7, #4]
   1d46c:	8a1a      	ldrh	r2, [r3, #16]
   1d46e:	4b14      	ldr	r3, [pc, #80]	; (1d4c0 <appSlaveProcConnOpen+0x74>)
   1d470:	681b      	ldr	r3, [r3, #0]
   1d472:	889b      	ldrh	r3, [r3, #4]
  if ((pAppUpdateCfg->idlePeriod != 0) &&
   1d474:	429a      	cmp	r2, r3
   1d476:	d314      	bcc.n	1d4a2 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1d478:	687b      	ldr	r3, [r7, #4]
   1d47a:	8a1a      	ldrh	r2, [r3, #16]
   1d47c:	4b10      	ldr	r3, [pc, #64]	; (1d4c0 <appSlaveProcConnOpen+0x74>)
   1d47e:	681b      	ldr	r3, [r3, #0]
   1d480:	88db      	ldrh	r3, [r3, #6]
      ((pMsg->connOpen.connInterval < pAppUpdateCfg->connIntervalMin) ||
   1d482:	429a      	cmp	r2, r3
   1d484:	d80d      	bhi.n	1d4a2 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1d486:	687b      	ldr	r3, [r7, #4]
   1d488:	8a5a      	ldrh	r2, [r3, #18]
   1d48a:	4b0d      	ldr	r3, [pc, #52]	; (1d4c0 <appSlaveProcConnOpen+0x74>)
   1d48c:	681b      	ldr	r3, [r3, #0]
   1d48e:	891b      	ldrh	r3, [r3, #8]
       (pMsg->connOpen.connInterval > pAppUpdateCfg->connIntervalMax) ||
   1d490:	429a      	cmp	r2, r3
   1d492:	d106      	bne.n	1d4a2 <appSlaveProcConnOpen+0x56>
       (pMsg->connOpen.supTimeout != pAppUpdateCfg->supTimeout)))
   1d494:	687b      	ldr	r3, [r7, #4]
   1d496:	8a9a      	ldrh	r2, [r3, #20]
   1d498:	4b09      	ldr	r3, [pc, #36]	; (1d4c0 <appSlaveProcConnOpen+0x74>)
   1d49a:	681b      	ldr	r3, [r3, #0]
   1d49c:	895b      	ldrh	r3, [r3, #10]
       (pMsg->connOpen.connLatency != pAppUpdateCfg->connLatency) ||
   1d49e:	429a      	cmp	r2, r3
   1d4a0:	d00a      	beq.n	1d4b8 <appSlaveProcConnOpen+0x6c>
  {
    pCb->connWasIdle = FALSE;
   1d4a2:	683b      	ldr	r3, [r7, #0]
   1d4a4:	2200      	movs	r2, #0
   1d4a6:	729a      	strb	r2, [r3, #10]
    pCb->attempts = 0;
   1d4a8:	683b      	ldr	r3, [r7, #0]
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	731a      	strb	r2, [r3, #12]
    appConnUpdateTimerStart(pCb->connId);
   1d4ae:	683b      	ldr	r3, [r7, #0]
   1d4b0:	791b      	ldrb	r3, [r3, #4]
   1d4b2:	4618      	mov	r0, r3
   1d4b4:	f7ff feda 	bl	1d26c <appConnUpdateTimerStart>
  }
}
   1d4b8:	bf00      	nop
   1d4ba:	3708      	adds	r7, #8
   1d4bc:	46bd      	mov	sp, r7
   1d4be:	bd80      	pop	{r7, pc}
   1d4c0:	10006f44 	.word	0x10006f44

0001d4c4 <appSlaveProcConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveProcConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d4c4:	b580      	push	{r7, lr}
   1d4c6:	b084      	sub	sp, #16
   1d4c8:	af00      	add	r7, sp, #0
   1d4ca:	6078      	str	r0, [r7, #4]
   1d4cc:	6039      	str	r1, [r7, #0]
  uint8_t i;

  /* stop connection update timer */
  appConnUpdateTimerStop(pCb);
   1d4ce:	6838      	ldr	r0, [r7, #0]
   1d4d0:	f7ff fef6 	bl	1d2c0 <appConnUpdateTimerStop>
  
  /* clear connection ID */
  pCb->connId = DM_CONN_ID_NONE;
   1d4d4:	683b      	ldr	r3, [r7, #0]
   1d4d6:	2200      	movs	r2, #0
   1d4d8:	711a      	strb	r2, [r3, #4]

  /* clear update state */
  pCb->updateState = APP_CU_STATE_NONE;
   1d4da:	683b      	ldr	r3, [r7, #0]
   1d4dc:	2200      	movs	r2, #0
   1d4de:	735a      	strb	r2, [r3, #13]

  /* cancel any address resolution in progress */
  appSlaveCb.inProgress = FALSE;
   1d4e0:	4b10      	ldr	r3, [pc, #64]	; (1d524 <appSlaveProcConnClose+0x60>)
   1d4e2:	2200      	movs	r2, #0
   1d4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if switching to connectable mode then set it up */
  if (pCb->setConnectable)
   1d4e8:	683b      	ldr	r3, [r7, #0]
   1d4ea:	7a5b      	ldrb	r3, [r3, #9]
   1d4ec:	2b00      	cmp	r3, #0
   1d4ee:	d014      	beq.n	1d51a <appSlaveProcConnClose+0x56>
  {
    pCb->setConnectable = FALSE;
   1d4f0:	683b      	ldr	r3, [r7, #0]
   1d4f2:	2200      	movs	r2, #0
   1d4f4:	725a      	strb	r2, [r3, #9]
    appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1d4f6:	4b0b      	ldr	r3, [pc, #44]	; (1d524 <appSlaveProcConnClose+0x60>)
   1d4f8:	2200      	movs	r2, #0
   1d4fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    
    /* for each advertising set */
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d4fe:	2300      	movs	r3, #0
   1d500:	73fb      	strb	r3, [r7, #15]
   1d502:	e007      	b.n	1d514 <appSlaveProcConnClose+0x50>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(i, APP_MODE_CONNECTABLE);
   1d504:	7bfb      	ldrb	r3, [r7, #15]
   1d506:	2100      	movs	r1, #0
   1d508:	4618      	mov	r0, r3
   1d50a:	f7ff fd8b 	bl	1d024 <appSlaveForceAdvDataSync>
    for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1d50e:	7bfb      	ldrb	r3, [r7, #15]
   1d510:	3301      	adds	r3, #1
   1d512:	73fb      	strb	r3, [r7, #15]
   1d514:	7bfb      	ldrb	r3, [r7, #15]
   1d516:	2b00      	cmp	r3, #0
   1d518:	d0f4      	beq.n	1d504 <appSlaveProcConnClose+0x40>
    }
  }
}
   1d51a:	bf00      	nop
   1d51c:	3710      	adds	r7, #16
   1d51e:	46bd      	mov	sp, r7
   1d520:	bd80      	pop	{r7, pc}
   1d522:	bf00      	nop
   1d524:	10007070 	.word	0x10007070

0001d528 <appSlaveConnUpdate>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdate(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d528:	b580      	push	{r7, lr}
   1d52a:	b082      	sub	sp, #8
   1d52c:	af00      	add	r7, sp, #0
   1d52e:	6078      	str	r0, [r7, #4]
   1d530:	6039      	str	r1, [r7, #0]
  if (pAppUpdateCfg->idlePeriod != 0)
   1d532:	4b1a      	ldr	r3, [pc, #104]	; (1d59c <appSlaveConnUpdate+0x74>)
   1d534:	681b      	ldr	r3, [r3, #0]
   1d536:	681b      	ldr	r3, [r3, #0]
   1d538:	2b00      	cmp	r3, #0
   1d53a:	d02b      	beq.n	1d594 <appSlaveConnUpdate+0x6c>
  {
    /* if successful */
    if (pMsg->hdr.status == HCI_SUCCESS)
   1d53c:	687b      	ldr	r3, [r7, #4]
   1d53e:	78db      	ldrb	r3, [r3, #3]
   1d540:	2b00      	cmp	r3, #0
   1d542:	d117      	bne.n	1d574 <appSlaveConnUpdate+0x4c>
      // so here we need to check if the connection parameter
      // meets slave's requirement, if not, we should not stop
      // the timer.

      // only check connection interval for now
      if ((pAppUpdateCfg->connIntervalMin <= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval)
   1d544:	4b15      	ldr	r3, [pc, #84]	; (1d59c <appSlaveConnUpdate+0x74>)
   1d546:	681b      	ldr	r3, [r3, #0]
   1d548:	889a      	ldrh	r2, [r3, #4]
   1d54a:	687b      	ldr	r3, [r7, #4]
   1d54c:	891b      	ldrh	r3, [r3, #8]
   1d54e:	429a      	cmp	r2, r3
   1d550:	d80a      	bhi.n	1d568 <appSlaveConnUpdate+0x40>
        &&(pAppUpdateCfg->connIntervalMax >= ((hciLeConnUpdateCmplEvt_t*)pMsg)->connInterval))
   1d552:	4b12      	ldr	r3, [pc, #72]	; (1d59c <appSlaveConnUpdate+0x74>)
   1d554:	681b      	ldr	r3, [r3, #0]
   1d556:	88da      	ldrh	r2, [r3, #6]
   1d558:	687b      	ldr	r3, [r7, #4]
   1d55a:	891b      	ldrh	r3, [r3, #8]
   1d55c:	429a      	cmp	r2, r3
   1d55e:	d303      	bcc.n	1d568 <appSlaveConnUpdate+0x40>
      {
        appConnUpdateTimerStop(pCb);
   1d560:	6838      	ldr	r0, [r7, #0]
   1d562:	f7ff fead 	bl	1d2c0 <appConnUpdateTimerStop>
    {
      /* start timer and try again */
      appConnUpdateTimerStart(pCb->connId);
    }
  }
}
   1d566:	e015      	b.n	1d594 <appSlaveConnUpdate+0x6c>
        appConnUpdateTimerStart(pCb->connId);
   1d568:	683b      	ldr	r3, [r7, #0]
   1d56a:	791b      	ldrb	r3, [r3, #4]
   1d56c:	4618      	mov	r0, r3
   1d56e:	f7ff fe7d 	bl	1d26c <appConnUpdateTimerStart>
}
   1d572:	e00f      	b.n	1d594 <appSlaveConnUpdate+0x6c>
    else if ((pMsg->hdr.status != HCI_ERR_CMD_DISALLOWED) && (pCb->attempts < pAppUpdateCfg->maxAttempts))
   1d574:	687b      	ldr	r3, [r7, #4]
   1d576:	78db      	ldrb	r3, [r3, #3]
   1d578:	2b0c      	cmp	r3, #12
   1d57a:	d00b      	beq.n	1d594 <appSlaveConnUpdate+0x6c>
   1d57c:	683b      	ldr	r3, [r7, #0]
   1d57e:	7b1a      	ldrb	r2, [r3, #12]
   1d580:	4b06      	ldr	r3, [pc, #24]	; (1d59c <appSlaveConnUpdate+0x74>)
   1d582:	681b      	ldr	r3, [r3, #0]
   1d584:	7b1b      	ldrb	r3, [r3, #12]
   1d586:	429a      	cmp	r2, r3
   1d588:	d204      	bcs.n	1d594 <appSlaveConnUpdate+0x6c>
      appConnUpdateTimerStart(pCb->connId);
   1d58a:	683b      	ldr	r3, [r7, #0]
   1d58c:	791b      	ldrb	r3, [r3, #4]
   1d58e:	4618      	mov	r0, r3
   1d590:	f7ff fe6c 	bl	1d26c <appConnUpdateTimerStart>
}
   1d594:	bf00      	nop
   1d596:	3708      	adds	r7, #8
   1d598:	46bd      	mov	sp, r7
   1d59a:	bd80      	pop	{r7, pc}
   1d59c:	10006f44 	.word	0x10006f44

0001d5a0 <appSlaveResolvedAddrInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveResolvedAddrInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d5a0:	b580      	push	{r7, lr}
   1d5a2:	b084      	sub	sp, #16
   1d5a4:	af00      	add	r7, sp, #0
   1d5a6:	6078      	str	r0, [r7, #4]
   1d5a8:	6039      	str	r1, [r7, #0]
  dmSecKey_t *pPeerKey;

  /* if address resolution is not in progress */
  if (!appSlaveCb.inProgress)
   1d5aa:	4b27      	ldr	r3, [pc, #156]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	d044      	beq.n	1d63e <appSlaveResolvedAddrInd+0x9e>
  {
    return;
  }

  /* if RPA resolved */
  if (pMsg->hdr.status == HCI_SUCCESS)
   1d5b4:	687b      	ldr	r3, [r7, #4]
   1d5b6:	78db      	ldrb	r3, [r3, #3]
   1d5b8:	2b00      	cmp	r3, #0
   1d5ba:	d110      	bne.n	1d5de <appSlaveResolvedAddrInd+0x3e>
  {
    /* record found */
    pCb->dbHdl = appSlaveCb.dbHdl;
   1d5bc:	4b22      	ldr	r3, [pc, #136]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d5c0:	683b      	ldr	r3, [r7, #0]
   1d5c2:	601a      	str	r2, [r3, #0]

    /* if LTK was requested while resolving master's address */
    if (appSlaveCb.findLtk)
   1d5c4:	4b20      	ldr	r3, [pc, #128]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
   1d5ca:	2b00      	cmp	r3, #0
   1d5cc:	d032      	beq.n	1d634 <appSlaveResolvedAddrInd+0x94>
    {
      /* respond to LTK request */
      appSecRspLtk(pCb);
   1d5ce:	6838      	ldr	r0, [r7, #0]
   1d5d0:	f7ff febe 	bl	1d350 <appSecRspLtk>

      appSlaveCb.findLtk = FALSE;
   1d5d4:	4b1c      	ldr	r3, [pc, #112]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5d6:	2200      	movs	r2, #0
   1d5d8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   1d5dc:	e02a      	b.n	1d634 <appSlaveResolvedAddrInd+0x94>
    }
  }
  /* if RPA did not resolve and there're more bonded records to go through */
  else if ((pMsg->hdr.status == HCI_ERR_AUTH_FAILURE) && (appSlaveCb.dbHdl != APP_DB_HDL_NONE))
   1d5de:	687b      	ldr	r3, [r7, #4]
   1d5e0:	78db      	ldrb	r3, [r3, #3]
   1d5e2:	2b05      	cmp	r3, #5
   1d5e4:	d126      	bne.n	1d634 <appSlaveResolvedAddrInd+0x94>
   1d5e6:	4b18      	ldr	r3, [pc, #96]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d5ea:	2b00      	cmp	r3, #0
   1d5ec:	d022      	beq.n	1d634 <appSlaveResolvedAddrInd+0x94>
  {
    /* get the next database record */
    appSlaveCb.dbHdl = AppDbGetNextRecord(appSlaveCb.dbHdl);
   1d5ee:	4b16      	ldr	r3, [pc, #88]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d5f2:	4618      	mov	r0, r3
   1d5f4:	f7fc fba6 	bl	19d44 <AppDbGetNextRecord>
   1d5f8:	4602      	mov	r2, r0
   1d5fa:	4b13      	ldr	r3, [pc, #76]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d5fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* if there's another bond record */
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1d5fe:	4b12      	ldr	r3, [pc, #72]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d602:	2b00      	cmp	r3, #0
   1d604:	d016      	beq.n	1d634 <appSlaveResolvedAddrInd+0x94>
        ((pPeerKey = AppDbGetKey(appSlaveCb.dbHdl, DM_KEY_IRK, NULL)) != NULL))
   1d606:	4b10      	ldr	r3, [pc, #64]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if ((appSlaveCb.dbHdl != APP_DB_HDL_NONE) &&
   1d60a:	2200      	movs	r2, #0
   1d60c:	2104      	movs	r1, #4
   1d60e:	4618      	mov	r0, r3
   1d610:	f7fc fcd2 	bl	19fb8 <AppDbGetKey>
   1d614:	60f8      	str	r0, [r7, #12]
   1d616:	68fb      	ldr	r3, [r7, #12]
   1d618:	2b00      	cmp	r3, #0
   1d61a:	d00b      	beq.n	1d634 <appSlaveResolvedAddrInd+0x94>
    {
      /* reslove RPA using the next stored IRK */
      DmPrivResolveAddr(DmConnPeerAddr(pCb->connId), pPeerKey->irk.key, pMsg->hdr.param);
   1d61c:	683b      	ldr	r3, [r7, #0]
   1d61e:	791b      	ldrb	r3, [r3, #4]
   1d620:	4618      	mov	r0, r3
   1d622:	f7f2 f847 	bl	f6b4 <DmConnPeerAddr>
   1d626:	68f9      	ldr	r1, [r7, #12]
   1d628:	687b      	ldr	r3, [r7, #4]
   1d62a:	881b      	ldrh	r3, [r3, #0]
   1d62c:	461a      	mov	r2, r3
   1d62e:	f7f2 fb89 	bl	fd44 <DmPrivResolveAddr>

      /* not done yet */
      return;
   1d632:	e005      	b.n	1d640 <appSlaveResolvedAddrInd+0xa0>
    }
  }

  /* done with this address resolution */
  appSlaveCb.inProgress = FALSE;
   1d634:	4b04      	ldr	r3, [pc, #16]	; (1d648 <appSlaveResolvedAddrInd+0xa8>)
   1d636:	2200      	movs	r2, #0
   1d638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   1d63c:	e000      	b.n	1d640 <appSlaveResolvedAddrInd+0xa0>
    return;
   1d63e:	bf00      	nop
}
   1d640:	3710      	adds	r7, #16
   1d642:	46bd      	mov	sp, r7
   1d644:	bd80      	pop	{r7, pc}
   1d646:	bf00      	nop
   1d648:	10007070 	.word	0x10007070

0001d64c <appSlaveRemoteConnParamReq>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveRemoteConnParamReq(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d64c:	b580      	push	{r7, lr}
   1d64e:	b086      	sub	sp, #24
   1d650:	af00      	add	r7, sp, #0
   1d652:	6078      	str	r0, [r7, #4]
   1d654:	6039      	str	r1, [r7, #0]
  /* if configured to accept the remote connection parameter request */
  if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_ACCEPT)
   1d656:	4b16      	ldr	r3, [pc, #88]	; (1d6b0 <appSlaveRemoteConnParamReq+0x64>)
   1d658:	681b      	ldr	r3, [r3, #0]
   1d65a:	781b      	ldrb	r3, [r3, #0]
   1d65c:	2b00      	cmp	r3, #0
   1d65e:	d118      	bne.n	1d692 <appSlaveRemoteConnParamReq+0x46>
  {
    hciConnSpec_t connSpec;

    connSpec.connIntervalMin = pMsg->remConnParamReq.intervalMin;
   1d660:	687b      	ldr	r3, [r7, #4]
   1d662:	88db      	ldrh	r3, [r3, #6]
   1d664:	81bb      	strh	r3, [r7, #12]
    connSpec.connIntervalMax = pMsg->remConnParamReq.intervalMax;
   1d666:	687b      	ldr	r3, [r7, #4]
   1d668:	891b      	ldrh	r3, [r3, #8]
   1d66a:	81fb      	strh	r3, [r7, #14]
    connSpec.connLatency = pMsg->remConnParamReq.latency;
   1d66c:	687b      	ldr	r3, [r7, #4]
   1d66e:	895b      	ldrh	r3, [r3, #10]
   1d670:	823b      	strh	r3, [r7, #16]
    connSpec.supTimeout = pMsg->remConnParamReq.timeout;
   1d672:	687b      	ldr	r3, [r7, #4]
   1d674:	899b      	ldrh	r3, [r3, #12]
   1d676:	827b      	strh	r3, [r7, #18]
    connSpec.minCeLen = connSpec.maxCeLen = 0;
   1d678:	2300      	movs	r3, #0
   1d67a:	82fb      	strh	r3, [r7, #22]
   1d67c:	8afb      	ldrh	r3, [r7, #22]
   1d67e:	82bb      	strh	r3, [r7, #20]

    /* accept the remote device's request to change connection parameters */
    DmRemoteConnParamReqReply(pCb->connId, &connSpec);
   1d680:	683b      	ldr	r3, [r7, #0]
   1d682:	791b      	ldrb	r3, [r3, #4]
   1d684:	f107 020c 	add.w	r2, r7, #12
   1d688:	4611      	mov	r1, r2
   1d68a:	4618      	mov	r0, r3
   1d68c:	f7f1 ff8a 	bl	f5a4 <DmRemoteConnParamReqReply>
  {
    /* reject the remote device's request to change connection parameters */
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
  }
  /* else - app will handle the remote connection parameter request */
}
   1d690:	e00a      	b.n	1d6a8 <appSlaveRemoteConnParamReq+0x5c>
  else if (pAppSlaveReqActCfg->remConnParamReqAct == APP_ACT_REJECT)
   1d692:	4b07      	ldr	r3, [pc, #28]	; (1d6b0 <appSlaveRemoteConnParamReq+0x64>)
   1d694:	681b      	ldr	r3, [r3, #0]
   1d696:	781b      	ldrb	r3, [r3, #0]
   1d698:	2b01      	cmp	r3, #1
   1d69a:	d105      	bne.n	1d6a8 <appSlaveRemoteConnParamReq+0x5c>
    DmRemoteConnParamReqNegReply(pCb->connId, HCI_ERR_UNSUP_FEAT);
   1d69c:	683b      	ldr	r3, [r7, #0]
   1d69e:	791b      	ldrb	r3, [r3, #4]
   1d6a0:	2111      	movs	r1, #17
   1d6a2:	4618      	mov	r0, r3
   1d6a4:	f7f1 ff9a 	bl	f5dc <DmRemoteConnParamReqNegReply>
}
   1d6a8:	bf00      	nop
   1d6aa:	3718      	adds	r7, #24
   1d6ac:	46bd      	mov	sp, r7
   1d6ae:	bd80      	pop	{r7, pc}
   1d6b0:	100024c4 	.word	0x100024c4

0001d6b4 <appSlaveSecConnOpen>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveSecConnOpen(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d6b4:	b580      	push	{r7, lr}
   1d6b6:	b082      	sub	sp, #8
   1d6b8:	af00      	add	r7, sp, #0
   1d6ba:	6078      	str	r0, [r7, #4]
   1d6bc:	6039      	str	r1, [r7, #0]
  /* initialize state variables */
  // don't reset bonded flag.
  // pCb->bonded = FALSE;
  pCb->bondByLtk = FALSE;
   1d6be:	683b      	ldr	r3, [r7, #0]
   1d6c0:	2200      	movs	r2, #0
   1d6c2:	719a      	strb	r2, [r3, #6]
  pCb->bondByPairing = FALSE;
   1d6c4:	683b      	ldr	r3, [r7, #0]
   1d6c6:	2200      	movs	r2, #0
   1d6c8:	71da      	strb	r2, [r3, #7]
    
  /* find record for peer device */
  pCb->dbHdl = AppDbFindByAddr(pMsg->connOpen.addrType, pMsg->connOpen.peerAddr);
   1d6ca:	687b      	ldr	r3, [r7, #4]
   1d6cc:	7a5a      	ldrb	r2, [r3, #9]
   1d6ce:	687b      	ldr	r3, [r7, #4]
   1d6d0:	330a      	adds	r3, #10
   1d6d2:	4619      	mov	r1, r3
   1d6d4:	4610      	mov	r0, r2
   1d6d6:	f7fc fc07 	bl	19ee8 <AppDbFindByAddr>
   1d6da:	4602      	mov	r2, r0
   1d6dc:	683b      	ldr	r3, [r7, #0]
   1d6de:	601a      	str	r2, [r3, #0]

  /* if record not found and the peer device uses an RPA */
  if ((pCb->dbHdl == NULL) && DM_RAND_ADDR_RPA(pMsg->connOpen.peerAddr, pMsg->connOpen.addrType))
   1d6e0:	683b      	ldr	r3, [r7, #0]
   1d6e2:	681b      	ldr	r3, [r3, #0]
   1d6e4:	2b00      	cmp	r3, #0
   1d6e6:	d10c      	bne.n	1d702 <appSlaveSecConnOpen+0x4e>
   1d6e8:	687b      	ldr	r3, [r7, #4]
   1d6ea:	7a5b      	ldrb	r3, [r3, #9]
   1d6ec:	2b01      	cmp	r3, #1
   1d6ee:	d108      	bne.n	1d702 <appSlaveSecConnOpen+0x4e>
   1d6f0:	687b      	ldr	r3, [r7, #4]
   1d6f2:	7bdb      	ldrb	r3, [r3, #15]
   1d6f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1d6f8:	2b40      	cmp	r3, #64	; 0x40
   1d6fa:	d102      	bne.n	1d702 <appSlaveSecConnOpen+0x4e>
  {
    /* reslove master's RPA to see if we already have a bond with this device */
    appSlaveResolveAddr(pMsg);
   1d6fc:	6878      	ldr	r0, [r7, #4]
   1d6fe:	f7ff fdf3 	bl	1d2e8 <appSlaveResolveAddr>
  }

  /* send slave security request if configured to do so */
  if (pAppSecCfg->initiateSec && AppDbCheckBonded())
   1d702:	4b0c      	ldr	r3, [pc, #48]	; (1d734 <appSlaveSecConnOpen+0x80>)
   1d704:	681b      	ldr	r3, [r3, #0]
   1d706:	791b      	ldrb	r3, [r3, #4]
   1d708:	2b00      	cmp	r3, #0
   1d70a:	d00e      	beq.n	1d72a <appSlaveSecConnOpen+0x76>
   1d70c:	f7fc fbac 	bl	19e68 <AppDbCheckBonded>
   1d710:	4603      	mov	r3, r0
   1d712:	2b00      	cmp	r3, #0
   1d714:	d009      	beq.n	1d72a <appSlaveSecConnOpen+0x76>
  {
    DmSecSlaveReq((dmConnId_t) pMsg->hdr.param, pAppSecCfg->auth);
   1d716:	687b      	ldr	r3, [r7, #4]
   1d718:	881b      	ldrh	r3, [r3, #0]
   1d71a:	b2da      	uxtb	r2, r3
   1d71c:	4b05      	ldr	r3, [pc, #20]	; (1d734 <appSlaveSecConnOpen+0x80>)
   1d71e:	681b      	ldr	r3, [r3, #0]
   1d720:	781b      	ldrb	r3, [r3, #0]
   1d722:	4619      	mov	r1, r3
   1d724:	4610      	mov	r0, r2
   1d726:	f7f2 fe1c 	bl	10362 <DmSecSlaveReq>
  }
}
   1d72a:	bf00      	nop
   1d72c:	3708      	adds	r7, #8
   1d72e:	46bd      	mov	sp, r7
   1d730:	bd80      	pop	{r7, pc}
   1d732:	bf00      	nop
   1d734:	10006f60 	.word	0x10006f60

0001d738 <appSecConnClose>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSecConnClose(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d738:	b580      	push	{r7, lr}
   1d73a:	b082      	sub	sp, #8
   1d73c:	af00      	add	r7, sp, #0
   1d73e:	6078      	str	r0, [r7, #4]
   1d740:	6039      	str	r1, [r7, #0]
  /* if a device record was created check if it is valid */
  if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d742:	683b      	ldr	r3, [r7, #0]
   1d744:	681b      	ldr	r3, [r3, #0]
   1d746:	2b00      	cmp	r3, #0
   1d748:	d004      	beq.n	1d754 <appSecConnClose+0x1c>
  {
    AppDbCheckValidRecord(pCb->dbHdl);
   1d74a:	683b      	ldr	r3, [r7, #0]
   1d74c:	681b      	ldr	r3, [r3, #0]
   1d74e:	4618      	mov	r0, r3
   1d750:	f7fc fb4e 	bl	19df0 <AppDbCheckValidRecord>
  }
}
   1d754:	bf00      	nop
   1d756:	3708      	adds	r7, #8
   1d758:	46bd      	mov	sp, r7
   1d75a:	bd80      	pop	{r7, pc}

0001d75c <appSecPairInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d75c:	b590      	push	{r4, r7, lr}
   1d75e:	b087      	sub	sp, #28
   1d760:	af02      	add	r7, sp, #8
   1d762:	6078      	str	r0, [r7, #4]
   1d764:	6039      	str	r1, [r7, #0]
  uint8_t rKeyDist;
  
  /* if in bondable mode or if peer is not requesting bonding
   * or if already bonded with this device and link is encrypted
   */
  if (appSlaveCb.bondable ||
   1d766:	4b3f      	ldr	r3, [pc, #252]	; (1d864 <appSecPairInd+0x108>)
   1d768:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
   1d76c:	2b00      	cmp	r3, #0
   1d76e:	d111      	bne.n	1d794 <appSecPairInd+0x38>
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1d770:	687b      	ldr	r3, [r7, #4]
   1d772:	791b      	ldrb	r3, [r3, #4]
   1d774:	f003 0301 	and.w	r3, r3, #1
  if (appSlaveCb.bondable ||
   1d778:	2b00      	cmp	r3, #0
   1d77a:	d00b      	beq.n	1d794 <appSecPairInd+0x38>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1d77c:	683b      	ldr	r3, [r7, #0]
   1d77e:	795b      	ldrb	r3, [r3, #5]
      ((pMsg->pairInd.auth & DM_AUTH_BOND_FLAG) != DM_AUTH_BOND_FLAG) ||
   1d780:	2b00      	cmp	r3, #0
   1d782:	d064      	beq.n	1d84e <appSecPairInd+0xf2>
      (pCb->bonded && (DmConnSecLevel(pCb->connId) == DM_SEC_LEVEL_NONE)))
   1d784:	683b      	ldr	r3, [r7, #0]
   1d786:	791b      	ldrb	r3, [r3, #4]
   1d788:	4618      	mov	r0, r3
   1d78a:	f7f1 ffc3 	bl	f714 <DmConnSecLevel>
   1d78e:	4603      	mov	r3, r0
   1d790:	2b00      	cmp	r3, #0
   1d792:	d15c      	bne.n	1d84e <appSecPairInd+0xf2>
  {
    /* store bonding state:  if peer is requesting bonding and we want bonding */
    pCb->bondByPairing = (pMsg->pairInd.auth & pAppSecCfg->auth & DM_AUTH_BOND_FLAG) == DM_AUTH_BOND_FLAG;
   1d794:	687b      	ldr	r3, [r7, #4]
   1d796:	791a      	ldrb	r2, [r3, #4]
   1d798:	4b33      	ldr	r3, [pc, #204]	; (1d868 <appSecPairInd+0x10c>)
   1d79a:	681b      	ldr	r3, [r3, #0]
   1d79c:	781b      	ldrb	r3, [r3, #0]
   1d79e:	4013      	ands	r3, r2
   1d7a0:	b2db      	uxtb	r3, r3
   1d7a2:	f003 0301 	and.w	r3, r3, #1
   1d7a6:	2b00      	cmp	r3, #0
   1d7a8:	bf14      	ite	ne
   1d7aa:	2301      	movne	r3, #1
   1d7ac:	2300      	moveq	r3, #0
   1d7ae:	b2db      	uxtb	r3, r3
   1d7b0:	461a      	mov	r2, r3
   1d7b2:	683b      	ldr	r3, [r7, #0]
   1d7b4:	71da      	strb	r2, [r3, #7]
    
    /* if bonding and no device record */
    if (pCb->bondByPairing && pCb->dbHdl == APP_DB_HDL_NONE)
   1d7b6:	683b      	ldr	r3, [r7, #0]
   1d7b8:	79db      	ldrb	r3, [r3, #7]
   1d7ba:	2b00      	cmp	r3, #0
   1d7bc:	d017      	beq.n	1d7ee <appSecPairInd+0x92>
   1d7be:	683b      	ldr	r3, [r7, #0]
   1d7c0:	681b      	ldr	r3, [r3, #0]
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	d113      	bne.n	1d7ee <appSecPairInd+0x92>
    {
      /* create a device record if none exists */
      pCb->dbHdl = AppDbNewRecord(DmConnPeerAddrType(pCb->connId), DmConnPeerAddr(pCb->connId));
   1d7c6:	683b      	ldr	r3, [r7, #0]
   1d7c8:	791b      	ldrb	r3, [r3, #4]
   1d7ca:	4618      	mov	r0, r3
   1d7cc:	f7f1 ff68 	bl	f6a0 <DmConnPeerAddrType>
   1d7d0:	4603      	mov	r3, r0
   1d7d2:	461c      	mov	r4, r3
   1d7d4:	683b      	ldr	r3, [r7, #0]
   1d7d6:	791b      	ldrb	r3, [r3, #4]
   1d7d8:	4618      	mov	r0, r3
   1d7da:	f7f1 ff6b 	bl	f6b4 <DmConnPeerAddr>
   1d7de:	4603      	mov	r3, r0
   1d7e0:	4619      	mov	r1, r3
   1d7e2:	4620      	mov	r0, r4
   1d7e4:	f7fc fa5c 	bl	19ca0 <AppDbNewRecord>
   1d7e8:	4602      	mov	r2, r0
   1d7ea:	683b      	ldr	r3, [r7, #0]
   1d7ec:	601a      	str	r2, [r3, #0]
    }

    /* initialize stored keys */
    pCb->rcvdKeys = 0;
   1d7ee:	683b      	ldr	r3, [r7, #0]
   1d7f0:	2200      	movs	r2, #0
   1d7f2:	72da      	strb	r2, [r3, #11]

    /* initialize key distribution */
    rKeyDist = pAppSecCfg->rKeyDist;
   1d7f4:	4b1c      	ldr	r3, [pc, #112]	; (1d868 <appSecPairInd+0x10c>)
   1d7f6:	681b      	ldr	r3, [r3, #0]
   1d7f8:	789b      	ldrb	r3, [r3, #2]
   1d7fa:	73bb      	strb	r3, [r7, #14]
    iKeyDist = pAppSecCfg->iKeyDist;
   1d7fc:	4b1a      	ldr	r3, [pc, #104]	; (1d868 <appSecPairInd+0x10c>)
   1d7fe:	681b      	ldr	r3, [r3, #0]
   1d800:	785b      	ldrb	r3, [r3, #1]
   1d802:	73fb      	strb	r3, [r7, #15]
    
    /* if peer is using random address request IRK */
    if (DmConnPeerAddrType(pCb->connId) == DM_ADDR_RANDOM)
   1d804:	683b      	ldr	r3, [r7, #0]
   1d806:	791b      	ldrb	r3, [r3, #4]
   1d808:	4618      	mov	r0, r3
   1d80a:	f7f1 ff49 	bl	f6a0 <DmConnPeerAddrType>
   1d80e:	4603      	mov	r3, r0
   1d810:	2b01      	cmp	r3, #1
   1d812:	d103      	bne.n	1d81c <appSecPairInd+0xc0>
    {
      iKeyDist |= DM_KEY_DIST_IRK;
   1d814:	7bfb      	ldrb	r3, [r7, #15]
   1d816:	f043 0302 	orr.w	r3, r3, #2
   1d81a:	73fb      	strb	r3, [r7, #15]
    }
    
    /* only distribute keys both sides have agreed to */
    rKeyDist &= pMsg->pairInd.rKeyDist;
   1d81c:	687b      	ldr	r3, [r7, #4]
   1d81e:	79da      	ldrb	r2, [r3, #7]
   1d820:	7bbb      	ldrb	r3, [r7, #14]
   1d822:	4013      	ands	r3, r2
   1d824:	73bb      	strb	r3, [r7, #14]
    iKeyDist &= pMsg->pairInd.iKeyDist;
   1d826:	687b      	ldr	r3, [r7, #4]
   1d828:	799a      	ldrb	r2, [r3, #6]
   1d82a:	7bfb      	ldrb	r3, [r7, #15]
   1d82c:	4013      	ands	r3, r2
   1d82e:	73fb      	strb	r3, [r7, #15]
    
    /* accept pairing request */
    DmSecPairRsp(pCb->connId, pAppSecCfg->oob, pAppSecCfg->auth, iKeyDist, rKeyDist);
   1d830:	683b      	ldr	r3, [r7, #0]
   1d832:	7918      	ldrb	r0, [r3, #4]
   1d834:	4b0c      	ldr	r3, [pc, #48]	; (1d868 <appSecPairInd+0x10c>)
   1d836:	681b      	ldr	r3, [r3, #0]
   1d838:	78d9      	ldrb	r1, [r3, #3]
   1d83a:	4b0b      	ldr	r3, [pc, #44]	; (1d868 <appSecPairInd+0x10c>)
   1d83c:	681b      	ldr	r3, [r3, #0]
   1d83e:	781a      	ldrb	r2, [r3, #0]
   1d840:	7bfc      	ldrb	r4, [r7, #15]
   1d842:	7bbb      	ldrb	r3, [r7, #14]
   1d844:	9300      	str	r3, [sp, #0]
   1d846:	4623      	mov	r3, r4
   1d848:	f7f2 fd6c 	bl	10324 <DmSecPairRsp>
   1d84c:	e005      	b.n	1d85a <appSecPairInd+0xfe>
  }
  /* otherwise reject pairing request */
  else
  {
    DmSecCancelReq(pCb->connId, SMP_ERR_PAIRING_NOT_SUP);
   1d84e:	683b      	ldr	r3, [r7, #0]
   1d850:	791b      	ldrb	r3, [r3, #4]
   1d852:	2105      	movs	r1, #5
   1d854:	4618      	mov	r0, r3
   1d856:	f7f2 fbf5 	bl	10044 <DmSecCancelReq>
  }
}
   1d85a:	bf00      	nop
   1d85c:	3714      	adds	r7, #20
   1d85e:	46bd      	mov	sp, r7
   1d860:	bd90      	pop	{r4, r7, pc}
   1d862:	bf00      	nop
   1d864:	10007070 	.word	0x10007070
   1d868:	10006f60 	.word	0x10006f60

0001d86c <appSecStoreKey>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecStoreKey(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d86c:	b580      	push	{r7, lr}
   1d86e:	b082      	sub	sp, #8
   1d870:	af00      	add	r7, sp, #0
   1d872:	6078      	str	r0, [r7, #4]
   1d874:	6039      	str	r1, [r7, #0]
  if (pCb->bondByPairing && pCb->dbHdl != APP_DB_HDL_NONE)
   1d876:	683b      	ldr	r3, [r7, #0]
   1d878:	79db      	ldrb	r3, [r3, #7]
   1d87a:	2b00      	cmp	r3, #0
   1d87c:	d012      	beq.n	1d8a4 <appSecStoreKey+0x38>
   1d87e:	683b      	ldr	r3, [r7, #0]
   1d880:	681b      	ldr	r3, [r3, #0]
   1d882:	2b00      	cmp	r3, #0
   1d884:	d00e      	beq.n	1d8a4 <appSecStoreKey+0x38>
  {
    /* key was received */
    pCb->rcvdKeys |= pMsg->keyInd.type;
   1d886:	683b      	ldr	r3, [r7, #0]
   1d888:	7ada      	ldrb	r2, [r3, #11]
   1d88a:	687b      	ldr	r3, [r7, #4]
   1d88c:	7f9b      	ldrb	r3, [r3, #30]
   1d88e:	4313      	orrs	r3, r2
   1d890:	b2da      	uxtb	r2, r3
   1d892:	683b      	ldr	r3, [r7, #0]
   1d894:	72da      	strb	r2, [r3, #11]
    
    /* store key in record */
    AppDbSetKey(pCb->dbHdl, &pMsg->keyInd);
   1d896:	683b      	ldr	r3, [r7, #0]
   1d898:	681b      	ldr	r3, [r3, #0]
   1d89a:	687a      	ldr	r2, [r7, #4]
   1d89c:	4611      	mov	r1, r2
   1d89e:	4618      	mov	r0, r3
   1d8a0:	f7fc fbd4 	bl	1a04c <AppDbSetKey>
  }
}
   1d8a4:	bf00      	nop
   1d8a6:	3708      	adds	r7, #8
   1d8a8:	46bd      	mov	sp, r7
   1d8aa:	bd80      	pop	{r7, pc}

0001d8ac <appSecPairCmpl>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairCmpl(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d8ac:	b580      	push	{r7, lr}
   1d8ae:	b082      	sub	sp, #8
   1d8b0:	af00      	add	r7, sp, #0
   1d8b2:	6078      	str	r0, [r7, #4]
   1d8b4:	6039      	str	r1, [r7, #0]
  /* if bonding */
  if (pCb->bondByPairing)
   1d8b6:	683b      	ldr	r3, [r7, #0]
   1d8b8:	79db      	ldrb	r3, [r3, #7]
   1d8ba:	2b00      	cmp	r3, #0
   1d8bc:	d024      	beq.n	1d908 <appSecPairCmpl+0x5c>
  {
    /* set bonded state */
    pCb->bonded = TRUE;
   1d8be:	683b      	ldr	r3, [r7, #0]
   1d8c0:	2201      	movs	r2, #1
   1d8c2:	715a      	strb	r2, [r3, #5]

    /* validate record and received keys */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d8c4:	683b      	ldr	r3, [r7, #0]
   1d8c6:	681b      	ldr	r3, [r3, #0]
   1d8c8:	2b00      	cmp	r3, #0
   1d8ca:	d007      	beq.n	1d8dc <appSecPairCmpl+0x30>
    {
      AppDbValidateRecord(pCb->dbHdl, pCb->rcvdKeys);
   1d8cc:	683b      	ldr	r3, [r7, #0]
   1d8ce:	681a      	ldr	r2, [r3, #0]
   1d8d0:	683b      	ldr	r3, [r7, #0]
   1d8d2:	7adb      	ldrb	r3, [r3, #11]
   1d8d4:	4619      	mov	r1, r3
   1d8d6:	4610      	mov	r0, r2
   1d8d8:	f7fc fa76 	bl	19dc8 <AppDbValidateRecord>
    }    

    /* if bonded clear bondable mode */
    appSlaveCb.bondable = FALSE;
   1d8dc:	4b0c      	ldr	r3, [pc, #48]	; (1d910 <appSecPairCmpl+0x64>)
   1d8de:	2200      	movs	r2, #0
   1d8e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    
    /* if discoverable switch to connectable mode when connection closes */
    if (appSlaveCb.discMode == APP_MODE_DISCOVERABLE)
   1d8e4:	4b0a      	ldr	r3, [pc, #40]	; (1d910 <appSecPairCmpl+0x64>)
   1d8e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1d8ea:	2b01      	cmp	r3, #1
   1d8ec:	d102      	bne.n	1d8f4 <appSecPairCmpl+0x48>
    {
      pCb->setConnectable = TRUE;
   1d8ee:	683b      	ldr	r3, [r7, #0]
   1d8f0:	2201      	movs	r2, #1
   1d8f2:	725a      	strb	r2, [r3, #9]
    }

    /*  if bonded and device is using static or public address add device to white list */

    /* if bonded, add device to resolving list */
    if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d8f4:	683b      	ldr	r3, [r7, #0]
   1d8f6:	681b      	ldr	r3, [r3, #0]
   1d8f8:	2b00      	cmp	r3, #0
   1d8fa:	d005      	beq.n	1d908 <appSecPairCmpl+0x5c>
    {
      AppAddDevToResList(pMsg, pCb->connId);
   1d8fc:	683b      	ldr	r3, [r7, #0]
   1d8fe:	791b      	ldrb	r3, [r3, #4]
   1d900:	4619      	mov	r1, r3
   1d902:	6878      	ldr	r0, [r7, #4]
   1d904:	f7ff fa38 	bl	1cd78 <AppAddDevToResList>
    }
  }
}
   1d908:	bf00      	nop
   1d90a:	3708      	adds	r7, #8
   1d90c:	46bd      	mov	sp, r7
   1d90e:	bd80      	pop	{r7, pc}
   1d910:	10007070 	.word	0x10007070

0001d914 <appSecPairFailed>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecPairFailed(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d914:	b480      	push	{r7}
   1d916:	b083      	sub	sp, #12
   1d918:	af00      	add	r7, sp, #0
   1d91a:	6078      	str	r0, [r7, #4]
   1d91c:	6039      	str	r1, [r7, #0]
  return;
   1d91e:	bf00      	nop
}
   1d920:	370c      	adds	r7, #12
   1d922:	46bd      	mov	sp, r7
   1d924:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d928:	4770      	bx	lr

0001d92a <appSecEncryptInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecEncryptInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d92a:	b480      	push	{r7}
   1d92c:	b083      	sub	sp, #12
   1d92e:	af00      	add	r7, sp, #0
   1d930:	6078      	str	r0, [r7, #4]
   1d932:	6039      	str	r1, [r7, #0]
  /* check if bonding state should be set */
  if (pCb->bondByLtk && pMsg->encryptInd.usingLtk)
   1d934:	683b      	ldr	r3, [r7, #0]
   1d936:	799b      	ldrb	r3, [r3, #6]
   1d938:	2b00      	cmp	r3, #0
   1d93a:	d009      	beq.n	1d950 <appSecEncryptInd+0x26>
   1d93c:	687b      	ldr	r3, [r7, #4]
   1d93e:	791b      	ldrb	r3, [r3, #4]
   1d940:	2b00      	cmp	r3, #0
   1d942:	d005      	beq.n	1d950 <appSecEncryptInd+0x26>
  {
    pCb->bonded = TRUE;
   1d944:	683b      	ldr	r3, [r7, #0]
   1d946:	2201      	movs	r2, #1
   1d948:	715a      	strb	r2, [r3, #5]
    pCb->bondByLtk = FALSE;
   1d94a:	683b      	ldr	r3, [r7, #0]
   1d94c:	2200      	movs	r2, #0
   1d94e:	719a      	strb	r2, [r3, #6]
  }
}
   1d950:	bf00      	nop
   1d952:	370c      	adds	r7, #12
   1d954:	46bd      	mov	sp, r7
   1d956:	f85d 7b04 	ldr.w	r7, [sp], #4
   1d95a:	4770      	bx	lr

0001d95c <appSecFindLtk>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSecFindLtk(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1d95c:	b580      	push	{r7, lr}
   1d95e:	b082      	sub	sp, #8
   1d960:	af00      	add	r7, sp, #0
   1d962:	6078      	str	r0, [r7, #4]
   1d964:	6039      	str	r1, [r7, #0]
  /* if device record is not in place */
  if (pCb->dbHdl == APP_DB_HDL_NONE)
   1d966:	683b      	ldr	r3, [r7, #0]
   1d968:	681b      	ldr	r3, [r3, #0]
   1d96a:	2b00      	cmp	r3, #0
   1d96c:	d12b      	bne.n	1d9c6 <appSecFindLtk+0x6a>
  {
    /* if ediv or rand is not zero */
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1d96e:	687b      	ldr	r3, [r7, #4]
   1d970:	89db      	ldrh	r3, [r3, #14]
   1d972:	2b00      	cmp	r3, #0
   1d974:	d109      	bne.n	1d98a <appSecFindLtk+0x2e>
        (memcmp(pMsg->ltkReqInd.randNum, calc128Zeros, SMP_RAND8_LEN) != 0))
   1d976:	687b      	ldr	r3, [r7, #4]
   1d978:	3306      	adds	r3, #6
   1d97a:	2208      	movs	r2, #8
   1d97c:	4915      	ldr	r1, [pc, #84]	; (1d9d4 <appSecFindLtk+0x78>)
   1d97e:	4618      	mov	r0, r3
   1d980:	f7ee fbbe 	bl	c100 <memcmp>
   1d984:	4603      	mov	r3, r0
    if ((pMsg->ltkReqInd.encDiversifier != 0) ||
   1d986:	2b00      	cmp	r3, #0
   1d988:	d013      	beq.n	1d9b2 <appSecFindLtk+0x56>
    {
      /* find record */
      pCb->dbHdl = AppDbFindByLtkReq(pMsg->ltkReqInd.encDiversifier, pMsg->ltkReqInd.randNum);
   1d98a:	687b      	ldr	r3, [r7, #4]
   1d98c:	89da      	ldrh	r2, [r3, #14]
   1d98e:	687b      	ldr	r3, [r7, #4]
   1d990:	3306      	adds	r3, #6
   1d992:	4619      	mov	r1, r3
   1d994:	4610      	mov	r0, r2
   1d996:	f7fc fadd 	bl	19f54 <AppDbFindByLtkReq>
   1d99a:	4602      	mov	r2, r0
   1d99c:	683b      	ldr	r3, [r7, #0]
   1d99e:	601a      	str	r2, [r3, #0]
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d9a0:	683b      	ldr	r3, [r7, #0]
   1d9a2:	681b      	ldr	r3, [r3, #0]
   1d9a4:	2b00      	cmp	r3, #0
   1d9a6:	d00e      	beq.n	1d9c6 <appSecFindLtk+0x6a>
      {
        /* record found, cancel any address resolution in progress */
        appSlaveCb.inProgress = FALSE;
   1d9a8:	4b0b      	ldr	r3, [pc, #44]	; (1d9d8 <appSecFindLtk+0x7c>)
   1d9aa:	2200      	movs	r2, #0
   1d9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      if (pCb->dbHdl != APP_DB_HDL_NONE)
   1d9b0:	e009      	b.n	1d9c6 <appSecFindLtk+0x6a>
      }
    }
    /* if address resolution in progress */
    else if (appSlaveCb.inProgress)
   1d9b2:	4b09      	ldr	r3, [pc, #36]	; (1d9d8 <appSecFindLtk+0x7c>)
   1d9b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1d9b8:	2b00      	cmp	r3, #0
   1d9ba:	d004      	beq.n	1d9c6 <appSecFindLtk+0x6a>
    {
      /* postpone LTK look up till address resolution is completed */
      appSlaveCb.findLtk = TRUE;
   1d9bc:	4b06      	ldr	r3, [pc, #24]	; (1d9d8 <appSecFindLtk+0x7c>)
   1d9be:	2201      	movs	r2, #1
   1d9c0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      return;
   1d9c4:	e002      	b.n	1d9cc <appSecFindLtk+0x70>
    }
  }

  /* respond to LTK request */
  appSecRspLtk(pCb);
   1d9c6:	6838      	ldr	r0, [r7, #0]
   1d9c8:	f7ff fcc2 	bl	1d350 <appSecRspLtk>
}
   1d9cc:	3708      	adds	r7, #8
   1d9ce:	46bd      	mov	sp, r7
   1d9d0:	bd80      	pop	{r7, pc}
   1d9d2:	bf00      	nop
   1d9d4:	00022b54 	.word	0x00022b54
   1d9d8:	10007070 	.word	0x10007070

0001d9dc <appPrivSetAddrResEnableInd>:
*
*  \return None.
*/
/*************************************************************************************************/
static void appPrivSetAddrResEnableInd(dmEvt_t *pMsg)
{
   1d9dc:	b580      	push	{r7, lr}
   1d9de:	b082      	sub	sp, #8
   1d9e0:	af00      	add	r7, sp, #0
   1d9e2:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.status == HCI_SUCCESS)
   1d9e4:	687b      	ldr	r3, [r7, #4]
   1d9e6:	78db      	ldrb	r3, [r3, #3]
   1d9e8:	2b00      	cmp	r3, #0
   1d9ea:	d105      	bne.n	1d9f8 <appPrivSetAddrResEnableInd+0x1c>
  {
    SvcCoreGapCentAddrResUpdate(DmLlPrivEnabled());
   1d9ec:	f7f2 f880 	bl	faf0 <DmLlPrivEnabled>
   1d9f0:	4603      	mov	r3, r0
   1d9f2:	4618      	mov	r0, r3
   1d9f4:	f7fc fe9a 	bl	1a72c <SvcCoreGapCentAddrResUpdate>
  }
}
   1d9f8:	bf00      	nop
   1d9fa:	3708      	adds	r7, #8
   1d9fc:	46bd      	mov	sp, r7
   1d9fe:	bd80      	pop	{r7, pc}

0001da00 <appPrivAddDevToResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivAddDevToResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1da00:	b580      	push	{r7, lr}
   1da02:	b084      	sub	sp, #16
   1da04:	af00      	add	r7, sp, #0
   1da06:	6078      	str	r0, [r7, #4]
   1da08:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1da0a:	687b      	ldr	r3, [r7, #4]
   1da0c:	78db      	ldrb	r3, [r3, #3]
   1da0e:	2b00      	cmp	r3, #0
   1da10:	d11c      	bne.n	1da4c <appPrivAddDevToResListInd+0x4c>
   1da12:	683b      	ldr	r3, [r7, #0]
   1da14:	681b      	ldr	r3, [r3, #0]
   1da16:	2b00      	cmp	r3, #0
   1da18:	d018      	beq.n	1da4c <appPrivAddDevToResListInd+0x4c>
  {
    dmSecKey_t *pPeerKey = AppDbGetKey(pCb->dbHdl, DM_KEY_IRK, NULL);
   1da1a:	683b      	ldr	r3, [r7, #0]
   1da1c:	681b      	ldr	r3, [r3, #0]
   1da1e:	2200      	movs	r2, #0
   1da20:	2104      	movs	r1, #4
   1da22:	4618      	mov	r0, r3
   1da24:	f7fc fac8 	bl	19fb8 <AppDbGetKey>
   1da28:	60f8      	str	r0, [r7, #12]

    /* if peer IRK present */
    if (pPeerKey != NULL)
   1da2a:	68fb      	ldr	r3, [r7, #12]
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	d007      	beq.n	1da40 <appPrivAddDevToResListInd+0x40>
    {
      /* set advertising peer address */
      AppSetAdvPeerAddr(pPeerKey->irk.addrType, pPeerKey->irk.bdAddr);
   1da30:	68fb      	ldr	r3, [r7, #12]
   1da32:	7d9a      	ldrb	r2, [r3, #22]
   1da34:	68fb      	ldr	r3, [r7, #12]
   1da36:	3310      	adds	r3, #16
   1da38:	4619      	mov	r1, r3
   1da3a:	4610      	mov	r0, r2
   1da3c:	f000 fb7c 	bl	1e138 <AppSetAdvPeerAddr>
    }

    /* peer device's been added to resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, TRUE);
   1da40:	683b      	ldr	r3, [r7, #0]
   1da42:	681b      	ldr	r3, [r3, #0]
   1da44:	2101      	movs	r1, #1
   1da46:	4618      	mov	r0, r3
   1da48:	f7fc fbc6 	bl	1a1d8 <AppDbSetPeerAddedToRl>
  }
}
   1da4c:	bf00      	nop
   1da4e:	3710      	adds	r7, #16
   1da50:	46bd      	mov	sp, r7
   1da52:	bd80      	pop	{r7, pc}

0001da54 <appPrivRemDevFromResListInd>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appPrivRemDevFromResListInd(dmEvt_t *pMsg, appConnCb_t *pCb)
{
   1da54:	b580      	push	{r7, lr}
   1da56:	b082      	sub	sp, #8
   1da58:	af00      	add	r7, sp, #0
   1da5a:	6078      	str	r0, [r7, #4]
   1da5c:	6039      	str	r1, [r7, #0]
  if ((pMsg->hdr.status == HCI_SUCCESS) && (pCb->dbHdl != APP_DB_HDL_NONE))
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	78db      	ldrb	r3, [r3, #3]
   1da62:	2b00      	cmp	r3, #0
   1da64:	d112      	bne.n	1da8c <appPrivRemDevFromResListInd+0x38>
   1da66:	683b      	ldr	r3, [r7, #0]
   1da68:	681b      	ldr	r3, [r3, #0]
   1da6a:	2b00      	cmp	r3, #0
   1da6c:	d00e      	beq.n	1da8c <appPrivRemDevFromResListInd+0x38>
  {
    /* clear advertising peer address and its type */
    appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1da6e:	4b09      	ldr	r3, [pc, #36]	; (1da94 <appPrivRemDevFromResListInd+0x40>)
   1da70:	2200      	movs	r2, #0
   1da72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1da76:	2206      	movs	r2, #6
   1da78:	2100      	movs	r1, #0
   1da7a:	4807      	ldr	r0, [pc, #28]	; (1da98 <appPrivRemDevFromResListInd+0x44>)
   1da7c:	f7ee fc6e 	bl	c35c <memset>

    /* peer device's been removed from resolving list */
    AppDbSetPeerAddedToRl(pCb->dbHdl, FALSE);
   1da80:	683b      	ldr	r3, [r7, #0]
   1da82:	681b      	ldr	r3, [r3, #0]
   1da84:	2100      	movs	r1, #0
   1da86:	4618      	mov	r0, r3
   1da88:	f7fc fba6 	bl	1a1d8 <AppDbSetPeerAddedToRl>
  }
}
   1da8c:	bf00      	nop
   1da8e:	3708      	adds	r7, #8
   1da90:	46bd      	mov	sp, r7
   1da92:	bd80      	pop	{r7, pc}
   1da94:	10007070 	.word	0x10007070
   1da98:	100070a0 	.word	0x100070a0

0001da9c <appSlaveConnUpdateTimeout>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveConnUpdateTimeout(wsfMsgHdr_t *pMsg, appConnCb_t *pCb)
{
   1da9c:	b580      	push	{r7, lr}
   1da9e:	b086      	sub	sp, #24
   1daa0:	af00      	add	r7, sp, #0
   1daa2:	6078      	str	r0, [r7, #4]
   1daa4:	6039      	str	r1, [r7, #0]
  hciConnSpec_t connSpec;
  bool_t        idle;
  
  /* Change state to updating */
  pCb->updateState = APP_CU_STATE_UPDATING;
   1daa6:	683b      	ldr	r3, [r7, #0]
   1daa8:	2202      	movs	r2, #2
   1daaa:	735a      	strb	r2, [r3, #13]

  /* check if connection is idle */
  idle = (DmConnCheckIdle(pCb->connId) == 0);
   1daac:	683b      	ldr	r3, [r7, #0]
   1daae:	791b      	ldrb	r3, [r3, #4]
   1dab0:	4618      	mov	r0, r3
   1dab2:	f7f1 fe53 	bl	f75c <DmConnCheckIdle>
   1dab6:	4603      	mov	r3, r0
   1dab8:	2b00      	cmp	r3, #0
   1daba:	bf0c      	ite	eq
   1dabc:	2301      	moveq	r3, #1
   1dabe:	2300      	movne	r3, #0
   1dac0:	b2db      	uxtb	r3, r3
   1dac2:	75fb      	strb	r3, [r7, #23]
  
  /* if connection is idle and was also idle on last check */
  if (idle && pCb->connWasIdle)
   1dac4:	7dfb      	ldrb	r3, [r7, #23]
   1dac6:	2b00      	cmp	r3, #0
   1dac8:	d027      	beq.n	1db1a <appSlaveConnUpdateTimeout+0x7e>
   1daca:	683b      	ldr	r3, [r7, #0]
   1dacc:	7a9b      	ldrb	r3, [r3, #10]
   1dace:	2b00      	cmp	r3, #0
   1dad0:	d023      	beq.n	1db1a <appSlaveConnUpdateTimeout+0x7e>
  {
    /* do update */
    pCb->attempts++;
   1dad2:	683b      	ldr	r3, [r7, #0]
   1dad4:	7b1b      	ldrb	r3, [r3, #12]
   1dad6:	3301      	adds	r3, #1
   1dad8:	b2da      	uxtb	r2, r3
   1dada:	683b      	ldr	r3, [r7, #0]
   1dadc:	731a      	strb	r2, [r3, #12]
    connSpec.connIntervalMin = pAppUpdateCfg->connIntervalMin;
   1dade:	4b15      	ldr	r3, [pc, #84]	; (1db34 <appSlaveConnUpdateTimeout+0x98>)
   1dae0:	681b      	ldr	r3, [r3, #0]
   1dae2:	889b      	ldrh	r3, [r3, #4]
   1dae4:	813b      	strh	r3, [r7, #8]
    connSpec.connIntervalMax = pAppUpdateCfg->connIntervalMax;
   1dae6:	4b13      	ldr	r3, [pc, #76]	; (1db34 <appSlaveConnUpdateTimeout+0x98>)
   1dae8:	681b      	ldr	r3, [r3, #0]
   1daea:	88db      	ldrh	r3, [r3, #6]
   1daec:	817b      	strh	r3, [r7, #10]
    connSpec.connLatency = pAppUpdateCfg->connLatency;
   1daee:	4b11      	ldr	r3, [pc, #68]	; (1db34 <appSlaveConnUpdateTimeout+0x98>)
   1daf0:	681b      	ldr	r3, [r3, #0]
   1daf2:	891b      	ldrh	r3, [r3, #8]
   1daf4:	81bb      	strh	r3, [r7, #12]
    connSpec.supTimeout = pAppUpdateCfg->supTimeout;
   1daf6:	4b0f      	ldr	r3, [pc, #60]	; (1db34 <appSlaveConnUpdateTimeout+0x98>)
   1daf8:	681b      	ldr	r3, [r3, #0]
   1dafa:	895b      	ldrh	r3, [r3, #10]
   1dafc:	81fb      	strh	r3, [r7, #14]
    connSpec.minCeLen = 0;
   1dafe:	2300      	movs	r3, #0
   1db00:	823b      	strh	r3, [r7, #16]
    connSpec.maxCeLen = 0xffff;
   1db02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1db06:	827b      	strh	r3, [r7, #18]

    DmConnUpdate(pCb->connId, &connSpec);
   1db08:	683b      	ldr	r3, [r7, #0]
   1db0a:	791b      	ldrb	r3, [r3, #4]
   1db0c:	f107 0208 	add.w	r2, r7, #8
   1db10:	4611      	mov	r1, r2
   1db12:	4618      	mov	r0, r3
   1db14:	f7f1 fcc2 	bl	f49c <DmConnUpdate>
   1db18:	e007      	b.n	1db2a <appSlaveConnUpdateTimeout+0x8e>
  }
  else
  {
    pCb->connWasIdle = idle;
   1db1a:	683b      	ldr	r3, [r7, #0]
   1db1c:	7dfa      	ldrb	r2, [r7, #23]
   1db1e:	729a      	strb	r2, [r3, #10]
    appConnUpdateTimerStart(pCb->connId);
   1db20:	683b      	ldr	r3, [r7, #0]
   1db22:	791b      	ldrb	r3, [r3, #4]
   1db24:	4618      	mov	r0, r3
   1db26:	f7ff fba1 	bl	1d26c <appConnUpdateTimerStart>
  }
}
   1db2a:	bf00      	nop
   1db2c:	3718      	adds	r7, #24
   1db2e:	46bd      	mov	sp, r7
   1db30:	bd80      	pop	{r7, pc}
   1db32:	bf00      	nop
   1db34:	10006f44 	.word	0x10006f44

0001db38 <appSlaveProcMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveProcMsg(wsfMsgHdr_t *pMsg)
{
   1db38:	b580      	push	{r7, lr}
   1db3a:	b084      	sub	sp, #16
   1db3c:	af00      	add	r7, sp, #0
   1db3e:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->param - 1];
   1db40:	687b      	ldr	r3, [r7, #4]
   1db42:	881b      	ldrh	r3, [r3, #0]
   1db44:	3b01      	subs	r3, #1
   1db46:	015b      	lsls	r3, r3, #5
   1db48:	4a0e      	ldr	r2, [pc, #56]	; (1db84 <appSlaveProcMsg+0x4c>)
   1db4a:	4413      	add	r3, r2
   1db4c:	60fb      	str	r3, [r7, #12]

  switch(pMsg->event)
   1db4e:	687b      	ldr	r3, [r7, #4]
   1db50:	789b      	ldrb	r3, [r3, #2]
   1db52:	2b10      	cmp	r3, #16
   1db54:	d000      	beq.n	1db58 <appSlaveProcMsg+0x20>
        DmReadRemoteFeatures(pCb->connId);
      }
      break;

    default:
      break;
   1db56:	e011      	b.n	1db7c <appSlaveProcMsg+0x44>
      if (pCb->updateState == APP_CU_STATE_UPDATING)
   1db58:	68fb      	ldr	r3, [r7, #12]
   1db5a:	7b5b      	ldrb	r3, [r3, #13]
   1db5c:	2b02      	cmp	r3, #2
   1db5e:	d104      	bne.n	1db6a <appSlaveProcMsg+0x32>
        appSlaveConnUpdateTimeout(pMsg, pCb);
   1db60:	68f9      	ldr	r1, [r7, #12]
   1db62:	6878      	ldr	r0, [r7, #4]
   1db64:	f7ff ff9a 	bl	1da9c <appSlaveConnUpdateTimeout>
      break;
   1db68:	e007      	b.n	1db7a <appSlaveProcMsg+0x42>
        pCb->updateState = APP_CU_STATE_WAIT_FEATURES;
   1db6a:	68fb      	ldr	r3, [r7, #12]
   1db6c:	2201      	movs	r2, #1
   1db6e:	735a      	strb	r2, [r3, #13]
        DmReadRemoteFeatures(pCb->connId);
   1db70:	68fb      	ldr	r3, [r7, #12]
   1db72:	791b      	ldrb	r3, [r3, #4]
   1db74:	4618      	mov	r0, r3
   1db76:	f7f1 fc87 	bl	f488 <DmReadRemoteFeatures>
      break;
   1db7a:	bf00      	nop
  }
}
   1db7c:	bf00      	nop
   1db7e:	3710      	adds	r7, #16
   1db80:	46bd      	mov	sp, r7
   1db82:	bd80      	pop	{r7, pc}
   1db84:	10006f70 	.word	0x10006f70

0001db88 <AppSlaveInit>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveInit(void)
{
   1db88:	b580      	push	{r7, lr}
   1db8a:	b082      	sub	sp, #8
   1db8c:	af00      	add	r7, sp, #0
  uint8_t i;
   
  // for each advertising set
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1db8e:	2300      	movs	r3, #0
   1db90:	71fb      	strb	r3, [r7, #7]
   1db92:	e014      	b.n	1dbbe <AppSlaveInit+0x36>
  {
    /* initialize advertising state */
    appSlaveCb.advState[i] = APP_ADV_STOPPED;
   1db94:	79fb      	ldrb	r3, [r7, #7]
   1db96:	4a18      	ldr	r2, [pc, #96]	; (1dbf8 <AppSlaveInit+0x70>)
   1db98:	4413      	add	r3, r2
   1db9a:	2203      	movs	r2, #3
   1db9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* initialize advertising type */
    appSlaveCb.advType[i] = DM_ADV_CONN_UNDIRECT;
   1dba0:	79fb      	ldrb	r3, [r7, #7]
   1dba2:	4a15      	ldr	r2, [pc, #84]	; (1dbf8 <AppSlaveInit+0x70>)
   1dba4:	4413      	add	r3, r2
   1dba6:	2200      	movs	r2, #0
   1dba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* initialize advertising type changed flag */
    appSlaveCb.advTypeChanged[i] = FALSE;
   1dbac:	79fb      	ldrb	r3, [r7, #7]
   1dbae:	4a12      	ldr	r2, [pc, #72]	; (1dbf8 <AppSlaveInit+0x70>)
   1dbb0:	4413      	add	r3, r2
   1dbb2:	2200      	movs	r2, #0
   1dbb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  for (i = 0; i < DM_NUM_ADV_SETS; i++)
   1dbb8:	79fb      	ldrb	r3, [r7, #7]
   1dbba:	3301      	adds	r3, #1
   1dbbc:	71fb      	strb	r3, [r7, #7]
   1dbbe:	79fb      	ldrb	r3, [r7, #7]
   1dbc0:	2b00      	cmp	r3, #0
   1dbc2:	d0e7      	beq.n	1db94 <AppSlaveInit+0xc>
  }

  /* initialize discovery mode */
  appSlaveCb.discMode = APP_MODE_NONE;
   1dbc4:	4b0c      	ldr	r3, [pc, #48]	; (1dbf8 <AppSlaveInit+0x70>)
   1dbc6:	22ff      	movs	r2, #255	; 0xff
   1dbc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* initialize advertising mode */
  appSlaveAdvModeInit();
   1dbcc:	f7ff f9e0 	bl	1cf90 <appSlaveAdvModeInit>

  /* initialize address resolution */
  appSlaveCb.inProgress = FALSE;
   1dbd0:	4b09      	ldr	r3, [pc, #36]	; (1dbf8 <AppSlaveInit+0x70>)
   1dbd2:	2200      	movs	r2, #0
   1dbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* set up callback from main */
  appCb.slaveCback = appSlaveProcMsg;
   1dbd8:	4b08      	ldr	r3, [pc, #32]	; (1dbfc <AppSlaveInit+0x74>)
   1dbda:	4a09      	ldr	r2, [pc, #36]	; (1dc00 <AppSlaveInit+0x78>)
   1dbdc:	601a      	str	r2, [r3, #0]

  appSlaveCb.peerAddrType = HCI_ADDR_TYPE_PUBLIC;
   1dbde:	4b06      	ldr	r3, [pc, #24]	; (1dbf8 <AppSlaveInit+0x70>)
   1dbe0:	2200      	movs	r2, #0
   1dbe2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  memset(appSlaveCb.peerAddr, 0, BDA_ADDR_LEN);
   1dbe6:	2206      	movs	r2, #6
   1dbe8:	2100      	movs	r1, #0
   1dbea:	4806      	ldr	r0, [pc, #24]	; (1dc04 <AppSlaveInit+0x7c>)
   1dbec:	f7ee fbb6 	bl	c35c <memset>
}
   1dbf0:	bf00      	nop
   1dbf2:	3708      	adds	r7, #8
   1dbf4:	46bd      	mov	sp, r7
   1dbf6:	bd80      	pop	{r7, pc}
   1dbf8:	10007070 	.word	0x10007070
   1dbfc:	10006f4c 	.word	0x10006f4c
   1dc00:	0001db39 	.word	0x0001db39
   1dc04:	100070a0 	.word	0x100070a0

0001dc08 <AppSlaveProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveProcDmMsg(dmEvt_t *pMsg)
{
   1dc08:	b580      	push	{r7, lr}
   1dc0a:	b084      	sub	sp, #16
   1dc0c:	af00      	add	r7, sp, #0
   1dc0e:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb = NULL;
   1dc10:	2300      	movs	r3, #0
   1dc12:	60fb      	str	r3, [r7, #12]

  /* look up app connection control block from DM connection ID */
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1dc14:	687b      	ldr	r3, [r7, #4]
   1dc16:	789b      	ldrb	r3, [r3, #2]
   1dc18:	2b22      	cmp	r3, #34	; 0x22
   1dc1a:	d00a      	beq.n	1dc32 <AppSlaveProcDmMsg+0x2a>
    (pMsg->hdr.event != DM_ADV_SET_STOP_IND))
   1dc1c:	687b      	ldr	r3, [r7, #4]
   1dc1e:	789b      	ldrb	r3, [r3, #2]
  if ((pMsg->hdr.event != DM_ADV_STOP_IND) &&
   1dc20:	2b47      	cmp	r3, #71	; 0x47
   1dc22:	d006      	beq.n	1dc32 <AppSlaveProcDmMsg+0x2a>
  {
    pCb = &appConnCb[pMsg->hdr.param - 1];
   1dc24:	687b      	ldr	r3, [r7, #4]
   1dc26:	881b      	ldrh	r3, [r3, #0]
   1dc28:	3b01      	subs	r3, #1
   1dc2a:	015b      	lsls	r3, r3, #5
   1dc2c:	4a5a      	ldr	r2, [pc, #360]	; (1dd98 <AppSlaveProcDmMsg+0x190>)
   1dc2e:	4413      	add	r3, r2
   1dc30:	60fb      	str	r3, [r7, #12]
  }

  switch (pMsg->hdr.event)
   1dc32:	687b      	ldr	r3, [r7, #4]
   1dc34:	789b      	ldrb	r3, [r3, #2]
   1dc36:	3b20      	subs	r3, #32
   1dc38:	2b35      	cmp	r3, #53	; 0x35
   1dc3a:	f200 80a3 	bhi.w	1dd84 <AppSlaveProcDmMsg+0x17c>
   1dc3e:	a201      	add	r2, pc, #4	; (adr r2, 1dc44 <AppSlaveProcDmMsg+0x3c>)
   1dc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dc44:	0001dd1d 	.word	0x0001dd1d
   1dc48:	0001dd85 	.word	0x0001dd85
   1dc4c:	0001dd23 	.word	0x0001dd23
   1dc50:	0001dd85 	.word	0x0001dd85
   1dc54:	0001dd85 	.word	0x0001dd85
   1dc58:	0001dd85 	.word	0x0001dd85
   1dc5c:	0001dd85 	.word	0x0001dd85
   1dc60:	0001dd35 	.word	0x0001dd35
   1dc64:	0001dd3f 	.word	0x0001dd3f
   1dc68:	0001dd49 	.word	0x0001dd49
   1dc6c:	0001dd85 	.word	0x0001dd85
   1dc70:	0001dd85 	.word	0x0001dd85
   1dc74:	0001dd85 	.word	0x0001dd85
   1dc78:	0001dd85 	.word	0x0001dd85
   1dc7c:	0001dd85 	.word	0x0001dd85
   1dc80:	0001dd85 	.word	0x0001dd85
   1dc84:	0001dd85 	.word	0x0001dd85
   1dc88:	0001dd85 	.word	0x0001dd85
   1dc8c:	0001dd85 	.word	0x0001dd85
   1dc90:	0001dd85 	.word	0x0001dd85
   1dc94:	0001dd85 	.word	0x0001dd85
   1dc98:	0001dd85 	.word	0x0001dd85
   1dc9c:	0001dd85 	.word	0x0001dd85
   1dca0:	0001dd53 	.word	0x0001dd53
   1dca4:	0001dd85 	.word	0x0001dd85
   1dca8:	0001dd85 	.word	0x0001dd85
   1dcac:	0001dd85 	.word	0x0001dd85
   1dcb0:	0001dd85 	.word	0x0001dd85
   1dcb4:	0001dd85 	.word	0x0001dd85
   1dcb8:	0001dd85 	.word	0x0001dd85
   1dcbc:	0001dd85 	.word	0x0001dd85
   1dcc0:	0001dd5d 	.word	0x0001dd5d
   1dcc4:	0001dd85 	.word	0x0001dd85
   1dcc8:	0001dd85 	.word	0x0001dd85
   1dccc:	0001dd85 	.word	0x0001dd85
   1dcd0:	0001dd85 	.word	0x0001dd85
   1dcd4:	0001dd85 	.word	0x0001dd85
   1dcd8:	0001dd85 	.word	0x0001dd85
   1dcdc:	0001dd85 	.word	0x0001dd85
   1dce0:	0001dd23 	.word	0x0001dd23
   1dce4:	0001dd85 	.word	0x0001dd85
   1dce8:	0001dd85 	.word	0x0001dd85
   1dcec:	0001dd85 	.word	0x0001dd85
   1dcf0:	0001dd85 	.word	0x0001dd85
   1dcf4:	0001dd85 	.word	0x0001dd85
   1dcf8:	0001dd85 	.word	0x0001dd85
   1dcfc:	0001dd85 	.word	0x0001dd85
   1dd00:	0001dd85 	.word	0x0001dd85
   1dd04:	0001dd85 	.word	0x0001dd85
   1dd08:	0001dd67 	.word	0x0001dd67
   1dd0c:	0001dd85 	.word	0x0001dd85
   1dd10:	0001dd85 	.word	0x0001dd85
   1dd14:	0001dd85 	.word	0x0001dd85
   1dd18:	0001dd79 	.word	0x0001dd79
  {
    case DM_RESET_CMPL_IND:
      appSlaveAdvModeInit();
   1dd1c:	f7ff f938 	bl	1cf90 <appSlaveAdvModeInit>
      break;
   1dd20:	e035      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    case DM_ADV_SET_STOP_IND:
    case DM_ADV_STOP_IND:
      if (appSlaveCb.advStopCback != NULL)
   1dd22:	4b1e      	ldr	r3, [pc, #120]	; (1dd9c <AppSlaveProcDmMsg+0x194>)
   1dd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dd26:	2b00      	cmp	r3, #0
   1dd28:	d02e      	beq.n	1dd88 <AppSlaveProcDmMsg+0x180>
      {
        (*appSlaveCb.advStopCback)(pMsg);
   1dd2a:	4b1c      	ldr	r3, [pc, #112]	; (1dd9c <AppSlaveProcDmMsg+0x194>)
   1dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dd2e:	6878      	ldr	r0, [r7, #4]
   1dd30:	4798      	blx	r3
      }
      break;
   1dd32:	e029      	b.n	1dd88 <AppSlaveProcDmMsg+0x180>

    case DM_CONN_OPEN_IND:
      appSlaveConnOpen(pMsg, pCb);
   1dd34:	68f9      	ldr	r1, [r7, #12]
   1dd36:	6878      	ldr	r0, [r7, #4]
   1dd38:	f7ff fb40 	bl	1d3bc <appSlaveConnOpen>
      break;
   1dd3c:	e027      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    case DM_CONN_CLOSE_IND:
      appSlaveConnClose(pMsg, pCb);
   1dd3e:	68f9      	ldr	r1, [r7, #12]
   1dd40:	6878      	ldr	r0, [r7, #4]
   1dd42:	f7ff fb53 	bl	1d3ec <appSlaveConnClose>
      break;
   1dd46:	e022      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    case DM_CONN_UPDATE_IND:
      appSlaveConnUpdate(pMsg, pCb);
   1dd48:	68f9      	ldr	r1, [r7, #12]
   1dd4a:	6878      	ldr	r0, [r7, #4]
   1dd4c:	f7ff fbec 	bl	1d528 <appSlaveConnUpdate>
      break;
   1dd50:	e01d      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    case DM_PRIV_RESOLVED_ADDR_IND:
      appSlaveResolvedAddrInd(pMsg, pCb);
   1dd52:	68f9      	ldr	r1, [r7, #12]
   1dd54:	6878      	ldr	r0, [r7, #4]
   1dd56:	f7ff fc23 	bl	1d5a0 <appSlaveResolvedAddrInd>
      break;
   1dd5a:	e018      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    case DM_REM_CONN_PARAM_REQ_IND:
      appSlaveRemoteConnParamReq(pMsg, pCb);
   1dd5c:	68f9      	ldr	r1, [r7, #12]
   1dd5e:	6878      	ldr	r0, [r7, #4]
   1dd60:	f7ff fc74 	bl	1d64c <appSlaveRemoteConnParamReq>
      break;
   1dd64:	e013      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>
    
    case DM_REMOTE_FEATURES_IND:
      /* If conn update is waiting for features, perform the conn update timeout action */
      if (pCb->updateState == APP_CU_STATE_WAIT_FEATURES)
   1dd66:	68fb      	ldr	r3, [r7, #12]
   1dd68:	7b5b      	ldrb	r3, [r3, #13]
   1dd6a:	2b01      	cmp	r3, #1
   1dd6c:	d10e      	bne.n	1dd8c <AppSlaveProcDmMsg+0x184>
      {
        appSlaveConnUpdateTimeout((wsfMsgHdr_t*) pMsg, pCb);
   1dd6e:	68f9      	ldr	r1, [r7, #12]
   1dd70:	6878      	ldr	r0, [r7, #4]
   1dd72:	f7ff fe93 	bl	1da9c <appSlaveConnUpdateTimeout>
      }
      break;
   1dd76:	e009      	b.n	1dd8c <AppSlaveProcDmMsg+0x184>
    
    case DM_HW_ERROR_IND:
      HciDrvRadioBoot(0);
   1dd78:	2000      	movs	r0, #0
   1dd7a:	f7fa f933 	bl	17fe4 <HciDrvRadioBoot>
      DmDevReset();
   1dd7e:	f7f1 fe07 	bl	f990 <DmDevReset>
      break;
   1dd82:	e004      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>

    default:
      break;
   1dd84:	bf00      	nop
   1dd86:	e002      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>
      break;
   1dd88:	bf00      	nop
   1dd8a:	e000      	b.n	1dd8e <AppSlaveProcDmMsg+0x186>
      break;
   1dd8c:	bf00      	nop
  }
}
   1dd8e:	bf00      	nop
   1dd90:	3710      	adds	r7, #16
   1dd92:	46bd      	mov	sp, r7
   1dd94:	bd80      	pop	{r7, pc}
   1dd96:	bf00      	nop
   1dd98:	10006f70 	.word	0x10006f70
   1dd9c:	10007070 	.word	0x10007070

0001dda0 <appAdvSetData>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvSetData(uint8_t advHandle, uint8_t location, uint16_t len, uint8_t *pData, uint16_t bufLen,
                   uint16_t maxLen)
{
   1dda0:	b580      	push	{r7, lr}
   1dda2:	b082      	sub	sp, #8
   1dda4:	af00      	add	r7, sp, #0
   1dda6:	603b      	str	r3, [r7, #0]
   1dda8:	4603      	mov	r3, r0
   1ddaa:	71fb      	strb	r3, [r7, #7]
   1ddac:	460b      	mov	r3, r1
   1ddae:	71bb      	strb	r3, [r7, #6]
   1ddb0:	4613      	mov	r3, r2
   1ddb2:	80bb      	strh	r3, [r7, #4]
  /* store data for location */
  appSlaveCb.pAdvData[advHandle][location] = pData;
   1ddb4:	79fa      	ldrb	r2, [r7, #7]
   1ddb6:	79bb      	ldrb	r3, [r7, #6]
   1ddb8:	4926      	ldr	r1, [pc, #152]	; (1de54 <appAdvSetData+0xb4>)
   1ddba:	0092      	lsls	r2, r2, #2
   1ddbc:	4413      	add	r3, r2
   1ddbe:	683a      	ldr	r2, [r7, #0]
   1ddc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  appSlaveCb.advDataLen[advHandle][location] = len;
   1ddc4:	79fa      	ldrb	r2, [r7, #7]
   1ddc6:	79bb      	ldrb	r3, [r7, #6]
   1ddc8:	4922      	ldr	r1, [pc, #136]	; (1de54 <appAdvSetData+0xb4>)
   1ddca:	0092      	lsls	r2, r2, #2
   1ddcc:	4413      	add	r3, r2
   1ddce:	3308      	adds	r3, #8
   1ddd0:	88ba      	ldrh	r2, [r7, #4]
   1ddd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set length of advertising data buffer maintained by Application */
  appSlaveCb.advDataBufLen[advHandle][location] = bufLen;
   1ddd6:	79fa      	ldrb	r2, [r7, #7]
   1ddd8:	79bb      	ldrb	r3, [r7, #6]
   1ddda:	491e      	ldr	r1, [pc, #120]	; (1de54 <appAdvSetData+0xb4>)
   1dddc:	0092      	lsls	r2, r2, #2
   1ddde:	4413      	add	r3, r2
   1dde0:	330c      	adds	r3, #12
   1dde2:	8a3a      	ldrh	r2, [r7, #16]
   1dde4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* set maximum advertising data length supported by Controller */
  appSlaveCb.maxAdvDataLen[advHandle] = maxLen;
   1dde8:	79fb      	ldrb	r3, [r7, #7]
   1ddea:	491a      	ldr	r1, [pc, #104]	; (1de54 <appAdvSetData+0xb4>)
   1ddec:	3314      	adds	r3, #20
   1ddee:	8aba      	ldrh	r2, [r7, #20]
   1ddf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* reset data offset */
  appSlaveCb.advDataOffset[advHandle][location] = 0;
   1ddf4:	79fa      	ldrb	r2, [r7, #7]
   1ddf6:	79bb      	ldrb	r3, [r7, #6]
   1ddf8:	4916      	ldr	r1, [pc, #88]	; (1de54 <appAdvSetData+0xb4>)
   1ddfa:	0092      	lsls	r2, r2, #2
   1ddfc:	4413      	add	r3, r2
   1ddfe:	3310      	adds	r3, #16
   1de00:	2200      	movs	r2, #0
   1de02:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

  /* Set the data now if we are in the right mode and the data is complete (no fragmentation's required) */
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1de06:	79fb      	ldrb	r3, [r7, #7]
   1de08:	4a12      	ldr	r2, [pc, #72]	; (1de54 <appAdvSetData+0xb4>)
   1de0a:	4413      	add	r3, r2
   1de0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1de10:	2b03      	cmp	r3, #3
   1de12:	d015      	beq.n	1de40 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1de14:	79bb      	ldrb	r3, [r7, #6]
   1de16:	085b      	lsrs	r3, r3, #1
   1de18:	b2da      	uxtb	r2, r3
   1de1a:	4b0e      	ldr	r3, [pc, #56]	; (1de54 <appAdvSetData+0xb4>)
   1de1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
  if ((appSlaveCb.advState[advHandle] != APP_ADV_STOPPED) &&
   1de20:	429a      	cmp	r2, r3
   1de22:	d10d      	bne.n	1de40 <appAdvSetData+0xa0>
      (APP_LOC_2_MODE(location) == appSlaveCb.discMode)   &&
   1de24:	88bb      	ldrh	r3, [r7, #4]
   1de26:	2bfb      	cmp	r3, #251	; 0xfb
   1de28:	d80a      	bhi.n	1de40 <appAdvSetData+0xa0>
      (len <= HCI_EXT_ADV_DATA_LEN)                       &&
   1de2a:	88ba      	ldrh	r2, [r7, #4]
   1de2c:	8abb      	ldrh	r3, [r7, #20]
   1de2e:	429a      	cmp	r2, r3
   1de30:	d806      	bhi.n	1de40 <appAdvSetData+0xa0>
      (len <= maxLen))
  {
    appSetAdvScanDataFrag(advHandle, location);
   1de32:	79ba      	ldrb	r2, [r7, #6]
   1de34:	79fb      	ldrb	r3, [r7, #7]
   1de36:	4611      	mov	r1, r2
   1de38:	4618      	mov	r0, r3
   1de3a:	f7ff f923 	bl	1d084 <appSetAdvScanDataFrag>
   1de3e:	e005      	b.n	1de4c <appAdvSetData+0xac>
  }
  /* Otherwise set it when advertising is started or mode changes */
  else
  {
    appSlaveCb.advDataSynced[advHandle] = FALSE;
   1de40:	79fb      	ldrb	r3, [r7, #7]
   1de42:	4a04      	ldr	r2, [pc, #16]	; (1de54 <appAdvSetData+0xb4>)
   1de44:	4413      	add	r3, r2
   1de46:	2200      	movs	r2, #0
   1de48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
}
   1de4c:	bf00      	nop
   1de4e:	3708      	adds	r7, #8
   1de50:	46bd      	mov	sp, r7
   1de52:	bd80      	pop	{r7, pc}
   1de54:	10007070 	.word	0x10007070

0001de58 <appAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                 uint8_t *pMaxEaEvents, bool_t cfgAdvParam)
{
   1de58:	b580      	push	{r7, lr}
   1de5a:	b086      	sub	sp, #24
   1de5c:	af00      	add	r7, sp, #0
   1de5e:	60b9      	str	r1, [r7, #8]
   1de60:	607a      	str	r2, [r7, #4]
   1de62:	603b      	str	r3, [r7, #0]
   1de64:	4603      	mov	r3, r0
   1de66:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* start advertising if not connectable advertising or multiple connections supported */
  if (!appSlaveConnectableAdv(numSets, pAdvHandles) || (appNumConns(DM_ROLE_SLAVE) < pAppSlaveCfg->connMax))
   1de68:	7bfb      	ldrb	r3, [r7, #15]
   1de6a:	68b9      	ldr	r1, [r7, #8]
   1de6c:	4618      	mov	r0, r3
   1de6e:	f7ff f89f 	bl	1cfb0 <appSlaveConnectableAdv>
   1de72:	4603      	mov	r3, r0
   1de74:	2b00      	cmp	r3, #0
   1de76:	d009      	beq.n	1de8c <appAdvStart+0x34>
   1de78:	2001      	movs	r0, #1
   1de7a:	f7fe fe79 	bl	1cb70 <appNumConns>
   1de7e:	4603      	mov	r3, r0
   1de80:	461a      	mov	r2, r3
   1de82:	4b35      	ldr	r3, [pc, #212]	; (1df58 <appAdvStart+0x100>)
   1de84:	681b      	ldr	r3, [r3, #0]
   1de86:	781b      	ldrb	r3, [r3, #0]
   1de88:	429a      	cmp	r2, r3
   1de8a:	d24e      	bcs.n	1df2a <appAdvStart+0xd2>
  {
    /* for each advertising set */
    for (i = 0; i < numSets; i++)
   1de8c:	2300      	movs	r3, #0
   1de8e:	75fb      	strb	r3, [r7, #23]
   1de90:	e040      	b.n	1df14 <appAdvStart+0xbc>
    {
      /* if advertising parameters to be configured */
      if (cfgAdvParam)
   1de92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1de96:	2b00      	cmp	r3, #0
   1de98:	d023      	beq.n	1dee2 <appAdvStart+0x8a>
      {
        /* set min and max interval */
        DmAdvSetInterval(pAdvHandles[i], pInterval[i], pInterval[i]);
   1de9a:	7dfb      	ldrb	r3, [r7, #23]
   1de9c:	68ba      	ldr	r2, [r7, #8]
   1de9e:	4413      	add	r3, r2
   1dea0:	7818      	ldrb	r0, [r3, #0]
   1dea2:	7dfb      	ldrb	r3, [r7, #23]
   1dea4:	005b      	lsls	r3, r3, #1
   1dea6:	687a      	ldr	r2, [r7, #4]
   1dea8:	4413      	add	r3, r2
   1deaa:	8819      	ldrh	r1, [r3, #0]
   1deac:	7dfb      	ldrb	r3, [r7, #23]
   1deae:	005b      	lsls	r3, r3, #1
   1deb0:	687a      	ldr	r2, [r7, #4]
   1deb2:	4413      	add	r3, r2
   1deb4:	881b      	ldrh	r3, [r3, #0]
   1deb6:	461a      	mov	r2, r3
   1deb8:	f7f0 fe5a 	bl	eb70 <DmAdvSetInterval>

        /* set advertising parameters */
        DmAdvConfig(pAdvHandles[i], appSlaveCb.advType[pAdvHandles[i]], appSlaveCb.peerAddrType,
   1debc:	7dfb      	ldrb	r3, [r7, #23]
   1debe:	68ba      	ldr	r2, [r7, #8]
   1dec0:	4413      	add	r3, r2
   1dec2:	7818      	ldrb	r0, [r3, #0]
   1dec4:	7dfb      	ldrb	r3, [r7, #23]
   1dec6:	68ba      	ldr	r2, [r7, #8]
   1dec8:	4413      	add	r3, r2
   1deca:	781b      	ldrb	r3, [r3, #0]
   1decc:	461a      	mov	r2, r3
   1dece:	4b23      	ldr	r3, [pc, #140]	; (1df5c <appAdvStart+0x104>)
   1ded0:	4413      	add	r3, r2
   1ded2:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
   1ded6:	4b21      	ldr	r3, [pc, #132]	; (1df5c <appAdvStart+0x104>)
   1ded8:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   1dedc:	4b20      	ldr	r3, [pc, #128]	; (1df60 <appAdvStart+0x108>)
   1dede:	f7f0 fda5 	bl	ea2c <DmAdvConfig>
                    appSlaveCb.peerAddr);
      }

      /* if adv data to be synced */
      if (!appSlaveCb.advDataSynced[pAdvHandles[i]])
   1dee2:	7dfb      	ldrb	r3, [r7, #23]
   1dee4:	68ba      	ldr	r2, [r7, #8]
   1dee6:	4413      	add	r3, r2
   1dee8:	781b      	ldrb	r3, [r3, #0]
   1deea:	461a      	mov	r2, r3
   1deec:	4b1b      	ldr	r3, [pc, #108]	; (1df5c <appAdvStart+0x104>)
   1deee:	4413      	add	r3, r2
   1def0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   1def4:	2b00      	cmp	r3, #0
   1def6:	d10a      	bne.n	1df0e <appAdvStart+0xb6>
      {
        /* set advertising or scan response data */
        appSetAdvScanData(pAdvHandles[i], appSlaveCb.discMode);
   1def8:	7dfb      	ldrb	r3, [r7, #23]
   1defa:	68ba      	ldr	r2, [r7, #8]
   1defc:	4413      	add	r3, r2
   1defe:	781a      	ldrb	r2, [r3, #0]
   1df00:	4b16      	ldr	r3, [pc, #88]	; (1df5c <appAdvStart+0x104>)
   1df02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1df06:	4619      	mov	r1, r3
   1df08:	4610      	mov	r0, r2
   1df0a:	f7ff f93f 	bl	1d18c <appSetAdvScanData>
    for (i = 0; i < numSets; i++)
   1df0e:	7dfb      	ldrb	r3, [r7, #23]
   1df10:	3301      	adds	r3, #1
   1df12:	75fb      	strb	r3, [r7, #23]
   1df14:	7dfa      	ldrb	r2, [r7, #23]
   1df16:	7bfb      	ldrb	r3, [r7, #15]
   1df18:	429a      	cmp	r2, r3
   1df1a:	d3ba      	bcc.n	1de92 <appAdvStart+0x3a>
      }
    }

    /* start advertising */
    DmAdvStart(numSets, pAdvHandles, pDuration, pMaxEaEvents);
   1df1c:	7bf8      	ldrb	r0, [r7, #15]
   1df1e:	6a3b      	ldr	r3, [r7, #32]
   1df20:	683a      	ldr	r2, [r7, #0]
   1df22:	68b9      	ldr	r1, [r7, #8]
   1df24:	f7f0 fdc0 	bl	eaa8 <DmAdvStart>

    return;
   1df28:	e013      	b.n	1df52 <appAdvStart+0xfa>
  }

  /* done with all advertising states */
  for (i = 0; i < numSets; i++)
   1df2a:	2300      	movs	r3, #0
   1df2c:	75fb      	strb	r3, [r7, #23]
   1df2e:	e00c      	b.n	1df4a <appAdvStart+0xf2>
  {
    appSlaveCb.advState[pAdvHandles[i]] = APP_ADV_STOPPED;
   1df30:	7dfb      	ldrb	r3, [r7, #23]
   1df32:	68ba      	ldr	r2, [r7, #8]
   1df34:	4413      	add	r3, r2
   1df36:	781b      	ldrb	r3, [r3, #0]
   1df38:	461a      	mov	r2, r3
   1df3a:	4b08      	ldr	r3, [pc, #32]	; (1df5c <appAdvStart+0x104>)
   1df3c:	4413      	add	r3, r2
   1df3e:	2203      	movs	r2, #3
   1df40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < numSets; i++)
   1df44:	7dfb      	ldrb	r3, [r7, #23]
   1df46:	3301      	adds	r3, #1
   1df48:	75fb      	strb	r3, [r7, #23]
   1df4a:	7dfa      	ldrb	r2, [r7, #23]
   1df4c:	7bfb      	ldrb	r3, [r7, #15]
   1df4e:	429a      	cmp	r2, r3
   1df50:	d3ee      	bcc.n	1df30 <appAdvStart+0xd8>
  }
}
   1df52:	3718      	adds	r7, #24
   1df54:	46bd      	mov	sp, r7
   1df56:	bd80      	pop	{r7, pc}
   1df58:	10006f48 	.word	0x10006f48
   1df5c:	10007070 	.word	0x10007070
   1df60:	100070a0 	.word	0x100070a0

0001df64 <appSlaveAdvStart>:
 *  \return None.
 */
/*************************************************************************************************/
void appSlaveAdvStart(uint8_t numSets, uint8_t *pAdvHandles, uint16_t *pInterval, uint16_t *pDuration,
                      uint8_t *pMaxEaEvents, bool_t cfgAdvParam, uint8_t mode)
{
   1df64:	b580      	push	{r7, lr}
   1df66:	b088      	sub	sp, #32
   1df68:	af02      	add	r7, sp, #8
   1df6a:	60b9      	str	r1, [r7, #8]
   1df6c:	607a      	str	r2, [r7, #4]
   1df6e:	603b      	str	r3, [r7, #0]
   1df70:	4603      	mov	r3, r0
   1df72:	73fb      	strb	r3, [r7, #15]
  uint8_t i;
  uint8_t prevMode = appSlaveCb.discMode;
   1df74:	4b25      	ldr	r3, [pc, #148]	; (1e00c <appSlaveAdvStart+0xa8>)
   1df76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1df7a:	75bb      	strb	r3, [r7, #22]

  /* handle auto init mode */
  if (mode == APP_MODE_AUTO_INIT)
   1df7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1df80:	2b02      	cmp	r3, #2
   1df82:	d114      	bne.n	1dfae <appSlaveAdvStart+0x4a>
  {
    if (AppDbCheckBonded() == FALSE)
   1df84:	f7fb ff70 	bl	19e68 <AppDbCheckBonded>
   1df88:	4603      	mov	r3, r0
   1df8a:	2b00      	cmp	r3, #0
   1df8c:	d107      	bne.n	1df9e <appSlaveAdvStart+0x3a>
    {
      AppSetBondable(TRUE);
   1df8e:	2001      	movs	r0, #1
   1df90:	f000 f8c0 	bl	1e114 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_DISCOVERABLE;
   1df94:	4b1d      	ldr	r3, [pc, #116]	; (1e00c <appSlaveAdvStart+0xa8>)
   1df96:	2201      	movs	r2, #1
   1df98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1df9c:	e00c      	b.n	1dfb8 <appSlaveAdvStart+0x54>
    }
    else
    {
      AppSetBondable(FALSE);
   1df9e:	2000      	movs	r0, #0
   1dfa0:	f000 f8b8 	bl	1e114 <AppSetBondable>
      appSlaveCb.discMode = APP_MODE_CONNECTABLE;
   1dfa4:	4b19      	ldr	r3, [pc, #100]	; (1e00c <appSlaveAdvStart+0xa8>)
   1dfa6:	2200      	movs	r2, #0
   1dfa8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   1dfac:	e004      	b.n	1dfb8 <appSlaveAdvStart+0x54>
      /* init white list with bonded device addresses */
    }
  }
  else
  {
    appSlaveCb.discMode = mode;
   1dfae:	4a17      	ldr	r2, [pc, #92]	; (1e00c <appSlaveAdvStart+0xa8>)
   1dfb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   1dfb4:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
  }

  /* if mode changed force update of advertising data */
  if (prevMode != appSlaveCb.discMode)
   1dfb8:	4b14      	ldr	r3, [pc, #80]	; (1e00c <appSlaveAdvStart+0xa8>)
   1dfba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1dfbe:	7dba      	ldrb	r2, [r7, #22]
   1dfc0:	429a      	cmp	r2, r3
   1dfc2:	d014      	beq.n	1dfee <appSlaveAdvStart+0x8a>
  {
    for (i = 0; i < numSets; i++)
   1dfc4:	2300      	movs	r3, #0
   1dfc6:	75fb      	strb	r3, [r7, #23]
   1dfc8:	e00d      	b.n	1dfe6 <appSlaveAdvStart+0x82>
    {
      /* force update of advertising data */
      appSlaveForceAdvDataSync(pAdvHandles[i], appSlaveCb.discMode);
   1dfca:	7dfb      	ldrb	r3, [r7, #23]
   1dfcc:	68ba      	ldr	r2, [r7, #8]
   1dfce:	4413      	add	r3, r2
   1dfd0:	781a      	ldrb	r2, [r3, #0]
   1dfd2:	4b0e      	ldr	r3, [pc, #56]	; (1e00c <appSlaveAdvStart+0xa8>)
   1dfd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
   1dfd8:	4619      	mov	r1, r3
   1dfda:	4610      	mov	r0, r2
   1dfdc:	f7ff f822 	bl	1d024 <appSlaveForceAdvDataSync>
    for (i = 0; i < numSets; i++)
   1dfe0:	7dfb      	ldrb	r3, [r7, #23]
   1dfe2:	3301      	adds	r3, #1
   1dfe4:	75fb      	strb	r3, [r7, #23]
   1dfe6:	7dfa      	ldrb	r2, [r7, #23]
   1dfe8:	7bfb      	ldrb	r3, [r7, #15]
   1dfea:	429a      	cmp	r2, r3
   1dfec:	d3ed      	bcc.n	1dfca <appSlaveAdvStart+0x66>
    }
  }

  /* start advertising */
  appAdvStart(numSets, pAdvHandles, pInterval, pDuration, pMaxEaEvents, TRUE);
   1dfee:	7bf8      	ldrb	r0, [r7, #15]
   1dff0:	2301      	movs	r3, #1
   1dff2:	9301      	str	r3, [sp, #4]
   1dff4:	6a3b      	ldr	r3, [r7, #32]
   1dff6:	9300      	str	r3, [sp, #0]
   1dff8:	683b      	ldr	r3, [r7, #0]
   1dffa:	687a      	ldr	r2, [r7, #4]
   1dffc:	68b9      	ldr	r1, [r7, #8]
   1dffe:	f7ff ff2b 	bl	1de58 <appAdvStart>
}
   1e002:	bf00      	nop
   1e004:	3718      	adds	r7, #24
   1e006:	46bd      	mov	sp, r7
   1e008:	bd80      	pop	{r7, pc}
   1e00a:	bf00      	nop
   1e00c:	10007070 	.word	0x10007070

0001e010 <AppSlaveSecProcDmMsg>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSlaveSecProcDmMsg(dmEvt_t *pMsg)
{
   1e010:	b580      	push	{r7, lr}
   1e012:	b084      	sub	sp, #16
   1e014:	af00      	add	r7, sp, #0
   1e016:	6078      	str	r0, [r7, #4]
  appConnCb_t *pCb;
  
  /* look up app connection control block from DM connection ID */
  pCb = &appConnCb[pMsg->hdr.param - 1];
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	881b      	ldrh	r3, [r3, #0]
   1e01c:	3b01      	subs	r3, #1
   1e01e:	015b      	lsls	r3, r3, #5
   1e020:	4a3b      	ldr	r2, [pc, #236]	; (1e110 <AppSlaveSecProcDmMsg+0x100>)
   1e022:	4413      	add	r3, r2
   1e024:	60fb      	str	r3, [r7, #12]

  switch(pMsg->hdr.event)
   1e026:	687b      	ldr	r3, [r7, #4]
   1e028:	789b      	ldrb	r3, [r3, #2]
   1e02a:	3b27      	subs	r3, #39	; 0x27
   1e02c:	2b17      	cmp	r3, #23
   1e02e:	d869      	bhi.n	1e104 <AppSlaveSecProcDmMsg+0xf4>
   1e030:	a201      	add	r2, pc, #4	; (adr r2, 1e038 <AppSlaveSecProcDmMsg+0x28>)
   1e032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e036:	bf00      	nop
   1e038:	0001e099 	.word	0x0001e099
   1e03c:	0001e0a3 	.word	0x0001e0a3
   1e040:	0001e105 	.word	0x0001e105
   1e044:	0001e0ad 	.word	0x0001e0ad
   1e048:	0001e0b7 	.word	0x0001e0b7
   1e04c:	0001e0c1 	.word	0x0001e0c1
   1e050:	0001e105 	.word	0x0001e105
   1e054:	0001e105 	.word	0x0001e105
   1e058:	0001e0cb 	.word	0x0001e0cb
   1e05c:	0001e0df 	.word	0x0001e0df
   1e060:	0001e0d5 	.word	0x0001e0d5
   1e064:	0001e105 	.word	0x0001e105
   1e068:	0001e105 	.word	0x0001e105
   1e06c:	0001e105 	.word	0x0001e105
   1e070:	0001e105 	.word	0x0001e105
   1e074:	0001e105 	.word	0x0001e105
   1e078:	0001e105 	.word	0x0001e105
   1e07c:	0001e105 	.word	0x0001e105
   1e080:	0001e0f1 	.word	0x0001e0f1
   1e084:	0001e0fb 	.word	0x0001e0fb
   1e088:	0001e105 	.word	0x0001e105
   1e08c:	0001e105 	.word	0x0001e105
   1e090:	0001e105 	.word	0x0001e105
   1e094:	0001e0e9 	.word	0x0001e0e9
  {
    case DM_CONN_OPEN_IND:
      appSlaveSecConnOpen(pMsg, pCb);
   1e098:	68f9      	ldr	r1, [r7, #12]
   1e09a:	6878      	ldr	r0, [r7, #4]
   1e09c:	f7ff fb0a 	bl	1d6b4 <appSlaveSecConnOpen>
      break;
   1e0a0:	e031      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_CONN_CLOSE_IND:
      appSecConnClose(pMsg, pCb);
   1e0a2:	68f9      	ldr	r1, [r7, #12]
   1e0a4:	6878      	ldr	r0, [r7, #4]
   1e0a6:	f7ff fb47 	bl	1d738 <appSecConnClose>
      break;
   1e0aa:	e02c      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_CMPL_IND:
      appSecPairCmpl(pMsg, pCb);
   1e0ac:	68f9      	ldr	r1, [r7, #12]
   1e0ae:	6878      	ldr	r0, [r7, #4]
   1e0b0:	f7ff fbfc 	bl	1d8ac <appSecPairCmpl>
      break;
   1e0b4:	e027      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_PAIR_FAIL_IND:
      appSecPairFailed(pMsg, pCb);
   1e0b6:	68f9      	ldr	r1, [r7, #12]
   1e0b8:	6878      	ldr	r0, [r7, #4]
   1e0ba:	f7ff fc2b 	bl	1d914 <appSecPairFailed>
      break;
   1e0be:	e022      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_ENCRYPT_IND:
      appSecEncryptInd(pMsg, pCb);
   1e0c0:	68f9      	ldr	r1, [r7, #12]
   1e0c2:	6878      	ldr	r0, [r7, #4]
   1e0c4:	f7ff fc31 	bl	1d92a <appSecEncryptInd>
      break;
   1e0c8:	e01d      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_ENCRYPT_FAIL_IND:
      break;

    case DM_SEC_KEY_IND:
      appSecStoreKey(pMsg, pCb);
   1e0ca:	68f9      	ldr	r1, [r7, #12]
   1e0cc:	6878      	ldr	r0, [r7, #4]
   1e0ce:	f7ff fbcd 	bl	1d86c <appSecStoreKey>
      break;
   1e0d2:	e018      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_SEC_PAIR_IND:
      appSecPairInd(pMsg, pCb);
   1e0d4:	68f9      	ldr	r1, [r7, #12]
   1e0d6:	6878      	ldr	r0, [r7, #4]
   1e0d8:	f7ff fb40 	bl	1d75c <appSecPairInd>
      break;
   1e0dc:	e013      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_SEC_LTK_REQ_IND:
      appSecFindLtk(pMsg, pCb);
   1e0de:	68f9      	ldr	r1, [r7, #12]
   1e0e0:	6878      	ldr	r0, [r7, #4]
   1e0e2:	f7ff fc3b 	bl	1d95c <appSecFindLtk>
      break;
   1e0e6:	e00e      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>
      
    case DM_PRIV_SET_ADDR_RES_ENABLE_IND:
      appPrivSetAddrResEnableInd(pMsg);
   1e0e8:	6878      	ldr	r0, [r7, #4]
   1e0ea:	f7ff fc77 	bl	1d9dc <appPrivSetAddrResEnableInd>
      break;
   1e0ee:	e00a      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_ADD_DEV_TO_RES_LIST_IND:
      appPrivAddDevToResListInd(pMsg, pCb);
   1e0f0:	68f9      	ldr	r1, [r7, #12]
   1e0f2:	6878      	ldr	r0, [r7, #4]
   1e0f4:	f7ff fc84 	bl	1da00 <appPrivAddDevToResListInd>
      break;
   1e0f8:	e005      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    case DM_PRIV_REM_DEV_FROM_RES_LIST_IND:
      appPrivRemDevFromResListInd(pMsg, pCb);
   1e0fa:	68f9      	ldr	r1, [r7, #12]
   1e0fc:	6878      	ldr	r0, [r7, #4]
   1e0fe:	f7ff fca9 	bl	1da54 <appPrivRemDevFromResListInd>
      break;
   1e102:	e000      	b.n	1e106 <AppSlaveSecProcDmMsg+0xf6>

    default:
      break;
   1e104:	bf00      	nop
  }
}
   1e106:	bf00      	nop
   1e108:	3710      	adds	r7, #16
   1e10a:	46bd      	mov	sp, r7
   1e10c:	bd80      	pop	{r7, pc}
   1e10e:	bf00      	nop
   1e110:	10006f70 	.word	0x10006f70

0001e114 <AppSetBondable>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetBondable(bool_t bondable)
{
   1e114:	b480      	push	{r7}
   1e116:	b083      	sub	sp, #12
   1e118:	af00      	add	r7, sp, #0
   1e11a:	4603      	mov	r3, r0
   1e11c:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.bondable = bondable;
   1e11e:	4a05      	ldr	r2, [pc, #20]	; (1e134 <AppSetBondable+0x20>)
   1e120:	79fb      	ldrb	r3, [r7, #7]
   1e122:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
}
   1e126:	bf00      	nop
   1e128:	370c      	adds	r7, #12
   1e12a:	46bd      	mov	sp, r7
   1e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e130:	4770      	bx	lr
   1e132:	bf00      	nop
   1e134:	10007070 	.word	0x10007070

0001e138 <AppSetAdvPeerAddr>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppSetAdvPeerAddr(uint8_t peerAddrType, uint8_t *pPeerAddr)
{
   1e138:	b580      	push	{r7, lr}
   1e13a:	b082      	sub	sp, #8
   1e13c:	af00      	add	r7, sp, #0
   1e13e:	4603      	mov	r3, r0
   1e140:	6039      	str	r1, [r7, #0]
   1e142:	71fb      	strb	r3, [r7, #7]
  appSlaveCb.peerAddrType = peerAddrType;
   1e144:	4a05      	ldr	r2, [pc, #20]	; (1e15c <AppSetAdvPeerAddr+0x24>)
   1e146:	79fb      	ldrb	r3, [r7, #7]
   1e148:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  BdaCpy(appSlaveCb.peerAddr, pPeerAddr);
   1e14c:	6839      	ldr	r1, [r7, #0]
   1e14e:	4804      	ldr	r0, [pc, #16]	; (1e160 <AppSetAdvPeerAddr+0x28>)
   1e150:	f7fa fb4a 	bl	187e8 <BdaCpy>
}
   1e154:	bf00      	nop
   1e156:	3708      	adds	r7, #8
   1e158:	46bd      	mov	sp, r7
   1e15a:	bd80      	pop	{r7, pc}
   1e15c:	10007070 	.word	0x10007070
   1e160:	100070a0 	.word	0x100070a0

0001e164 <appSlaveLegAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStart(void)
{
   1e164:	b580      	push	{r7, lr}
   1e166:	b084      	sub	sp, #16
   1e168:	af02      	add	r7, sp, #8
  uint8_t  advHandle;
  uint8_t  maxEaEvents;
  uint16_t interval;

  interval = pAppAdvCfg->advInterval[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]];
   1e16a:	4b15      	ldr	r3, [pc, #84]	; (1e1c0 <appSlaveLegAdvStart+0x5c>)
   1e16c:	681a      	ldr	r2, [r3, #0]
   1e16e:	4b15      	ldr	r3, [pc, #84]	; (1e1c4 <appSlaveLegAdvStart+0x60>)
   1e170:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1e174:	005b      	lsls	r3, r3, #1
   1e176:	4413      	add	r3, r2
   1e178:	88db      	ldrh	r3, [r3, #6]
   1e17a:	80bb      	strh	r3, [r7, #4]

  /* if this advertising state is being used */
  if (interval > 0)
   1e17c:	88bb      	ldrh	r3, [r7, #4]
   1e17e:	2b00      	cmp	r3, #0
   1e180:	d015      	beq.n	1e1ae <appSlaveLegAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1e182:	2300      	movs	r3, #0
   1e184:	71fb      	strb	r3, [r7, #7]
    maxEaEvents = 0;
   1e186:	2300      	movs	r3, #0
   1e188:	71bb      	strb	r3, [r7, #6]

    appAdvStart(1, &advHandle, &interval,
                &(pAppAdvCfg->advDuration[appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]]),
   1e18a:	4b0d      	ldr	r3, [pc, #52]	; (1e1c0 <appSlaveLegAdvStart+0x5c>)
   1e18c:	681a      	ldr	r2, [r3, #0]
   1e18e:	4b0d      	ldr	r3, [pc, #52]	; (1e1c4 <appSlaveLegAdvStart+0x60>)
   1e190:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    appAdvStart(1, &advHandle, &interval,
   1e194:	005b      	lsls	r3, r3, #1
   1e196:	18d0      	adds	r0, r2, r3
   1e198:	1d3a      	adds	r2, r7, #4
   1e19a:	1df9      	adds	r1, r7, #7
   1e19c:	2301      	movs	r3, #1
   1e19e:	9301      	str	r3, [sp, #4]
   1e1a0:	1dbb      	adds	r3, r7, #6
   1e1a2:	9300      	str	r3, [sp, #0]
   1e1a4:	4603      	mov	r3, r0
   1e1a6:	2001      	movs	r0, #1
   1e1a8:	f7ff fe56 	bl	1de58 <appAdvStart>
  else
  {
    /* done with all advertising states */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
  }
}
   1e1ac:	e003      	b.n	1e1b6 <appSlaveLegAdvStart+0x52>
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1e1ae:	4b05      	ldr	r3, [pc, #20]	; (1e1c4 <appSlaveLegAdvStart+0x60>)
   1e1b0:	2203      	movs	r2, #3
   1e1b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   1e1b6:	bf00      	nop
   1e1b8:	3708      	adds	r7, #8
   1e1ba:	46bd      	mov	sp, r7
   1e1bc:	bd80      	pop	{r7, pc}
   1e1be:	bf00      	nop
   1e1c0:	10006f6c 	.word	0x10006f6c
   1e1c4:	10007070 	.word	0x10007070

0001e1c8 <appSlaveLegAdvTypeChanged>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvTypeChanged(dmEvt_t *pMsg)
{
   1e1c8:	b580      	push	{r7, lr}
   1e1ca:	b082      	sub	sp, #8
   1e1cc:	af00      	add	r7, sp, #0
   1e1ce:	6078      	str	r0, [r7, #4]
  /* clear advertising type changed flag */
  appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT] = FALSE;
   1e1d0:	4b06      	ldr	r3, [pc, #24]	; (1e1ec <appSlaveLegAdvTypeChanged+0x24>)
   1e1d2:	2200      	movs	r2, #0
   1e1d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* set advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1e1d8:	4b04      	ldr	r3, [pc, #16]	; (1e1ec <appSlaveLegAdvTypeChanged+0x24>)
   1e1da:	2200      	movs	r2, #0
   1e1dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* start advertising */
  appSlaveLegAdvStart();
   1e1e0:	f7ff ffc0 	bl	1e164 <appSlaveLegAdvStart>
}
   1e1e4:	bf00      	nop
   1e1e6:	3708      	adds	r7, #8
   1e1e8:	46bd      	mov	sp, r7
   1e1ea:	bd80      	pop	{r7, pc}
   1e1ec:	10007070 	.word	0x10007070

0001e1f0 <appSlaveNextLegAdvState>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveNextLegAdvState(dmEvt_t *pMsg)
{
   1e1f0:	b580      	push	{r7, lr}
   1e1f2:	b082      	sub	sp, #8
   1e1f4:	af00      	add	r7, sp, #0
   1e1f6:	6078      	str	r0, [r7, #4]
  /* go to next advertising state */
  appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT]++;
   1e1f8:	4b09      	ldr	r3, [pc, #36]	; (1e220 <appSlaveNextLegAdvState+0x30>)
   1e1fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1e1fe:	3301      	adds	r3, #1
   1e200:	b2da      	uxtb	r2, r3
   1e202:	4b07      	ldr	r3, [pc, #28]	; (1e220 <appSlaveNextLegAdvState+0x30>)
   1e204:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* if haven't reached stopped state then start advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] < APP_ADV_STOPPED)
   1e208:	4b05      	ldr	r3, [pc, #20]	; (1e220 <appSlaveNextLegAdvState+0x30>)
   1e20a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1e20e:	2b02      	cmp	r3, #2
   1e210:	d801      	bhi.n	1e216 <appSlaveNextLegAdvState+0x26>
  {
    appSlaveLegAdvStart();
   1e212:	f7ff ffa7 	bl	1e164 <appSlaveLegAdvStart>
  }
}
   1e216:	bf00      	nop
   1e218:	3708      	adds	r7, #8
   1e21a:	46bd      	mov	sp, r7
   1e21c:	bd80      	pop	{r7, pc}
   1e21e:	bf00      	nop
   1e220:	10007070 	.word	0x10007070

0001e224 <appSlaveLegAdvStop>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvStop(dmEvt_t *pMsg)
{
   1e224:	b580      	push	{r7, lr}
   1e226:	b082      	sub	sp, #8
   1e228:	af00      	add	r7, sp, #0
   1e22a:	6078      	str	r0, [r7, #4]
  /* if legacy advertising PDUs are used with advertising extensions feature */
  if (pMsg->hdr.event == DM_ADV_SET_STOP_IND)
   1e22c:	687b      	ldr	r3, [r7, #4]
   1e22e:	789b      	ldrb	r3, [r3, #2]
   1e230:	2b47      	cmp	r3, #71	; 0x47
   1e232:	d103      	bne.n	1e23c <appSlaveLegAdvStop+0x18>
  {
    /* if advertising successfully ended with connection being created */
    if (pMsg->advSetStop.status == HCI_SUCCESS)
   1e234:	687b      	ldr	r3, [r7, #4]
   1e236:	791b      	ldrb	r3, [r3, #4]
   1e238:	2b00      	cmp	r3, #0
   1e23a:	d00c      	beq.n	1e256 <appSlaveLegAdvStop+0x32>
      return;
    }
  }

  /* if advertising was stopped for change to advertising type */
  if (appSlaveCb.advTypeChanged[DM_ADV_HANDLE_DEFAULT])
   1e23c:	4b08      	ldr	r3, [pc, #32]	; (1e260 <appSlaveLegAdvStop+0x3c>)
   1e23e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   1e242:	2b00      	cmp	r3, #0
   1e244:	d003      	beq.n	1e24e <appSlaveLegAdvStop+0x2a>
  {
    appSlaveLegAdvTypeChanged(pMsg);
   1e246:	6878      	ldr	r0, [r7, #4]
   1e248:	f7ff ffbe 	bl	1e1c8 <appSlaveLegAdvTypeChanged>
   1e24c:	e004      	b.n	1e258 <appSlaveLegAdvStop+0x34>
  }
  /* else advertising ended for another reason */
  else
  {
    appSlaveNextLegAdvState(pMsg);
   1e24e:	6878      	ldr	r0, [r7, #4]
   1e250:	f7ff ffce 	bl	1e1f0 <appSlaveNextLegAdvState>
   1e254:	e000      	b.n	1e258 <appSlaveLegAdvStop+0x34>
      return;
   1e256:	bf00      	nop
  }
}
   1e258:	3708      	adds	r7, #8
   1e25a:	46bd      	mov	sp, r7
   1e25c:	bd80      	pop	{r7, pc}
   1e25e:	bf00      	nop
   1e260:	10007070 	.word	0x10007070

0001e264 <appSlaveLegAdvRestart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
static void appSlaveLegAdvRestart(dmEvt_t *pMsg)
{
   1e264:	b580      	push	{r7, lr}
   1e266:	b082      	sub	sp, #8
   1e268:	af00      	add	r7, sp, #0
   1e26a:	6078      	str	r0, [r7, #4]
  if (pMsg->hdr.event == DM_CONN_OPEN_IND)
   1e26c:	687b      	ldr	r3, [r7, #4]
   1e26e:	789b      	ldrb	r3, [r3, #2]
   1e270:	2b27      	cmp	r3, #39	; 0x27
   1e272:	d103      	bne.n	1e27c <appSlaveLegAdvRestart+0x18>
  {
    /* advertising is stopped once a connection is opened */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STOPPED;
   1e274:	4b09      	ldr	r3, [pc, #36]	; (1e29c <appSlaveLegAdvRestart+0x38>)
   1e276:	2203      	movs	r2, #3
   1e278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }

  /* if advertising stopped restart advertising */
  if (appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] == APP_ADV_STOPPED)
   1e27c:	4b07      	ldr	r3, [pc, #28]	; (1e29c <appSlaveLegAdvRestart+0x38>)
   1e27e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   1e282:	2b03      	cmp	r3, #3
   1e284:	d105      	bne.n	1e292 <appSlaveLegAdvRestart+0x2e>
  {
    /* set advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1e286:	4b05      	ldr	r3, [pc, #20]	; (1e29c <appSlaveLegAdvRestart+0x38>)
   1e288:	2200      	movs	r2, #0
   1e28a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* start advertising */
    appSlaveLegAdvStart();
   1e28e:	f7ff ff69 	bl	1e164 <appSlaveLegAdvStart>
  }
}
   1e292:	bf00      	nop
   1e294:	3708      	adds	r7, #8
   1e296:	46bd      	mov	sp, r7
   1e298:	bd80      	pop	{r7, pc}
   1e29a:	bf00      	nop
   1e29c:	10007070 	.word	0x10007070

0001e2a0 <appSlaveAdvMode>:
 *
 *  \return TRUE if legacy advertising mode. FALSE, otherwise.
 */
/*************************************************************************************************/
static bool_t appSlaveAdvMode(void)
{
   1e2a0:	b480      	push	{r7}
   1e2a2:	af00      	add	r7, sp, #0
  /* legacy app slave works with both DM legacy and extended advertising */

  /* if first time since last power-on or reset */
  if (appSlaveCb.advStopCback == NULL)
   1e2a4:	4b0c      	ldr	r3, [pc, #48]	; (1e2d8 <appSlaveAdvMode+0x38>)
   1e2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e2a8:	2b00      	cmp	r3, #0
   1e2aa:	d107      	bne.n	1e2bc <appSlaveAdvMode+0x1c>
  {
    appSlaveCb.advStopCback = appSlaveLegAdvStop;
   1e2ac:	4b0a      	ldr	r3, [pc, #40]	; (1e2d8 <appSlaveAdvMode+0x38>)
   1e2ae:	4a0b      	ldr	r2, [pc, #44]	; (1e2dc <appSlaveAdvMode+0x3c>)
   1e2b0:	641a      	str	r2, [r3, #64]	; 0x40
    appSlaveCb.advRestartCback = appSlaveLegAdvRestart;
   1e2b2:	4b09      	ldr	r3, [pc, #36]	; (1e2d8 <appSlaveAdvMode+0x38>)
   1e2b4:	4a0a      	ldr	r2, [pc, #40]	; (1e2e0 <appSlaveAdvMode+0x40>)
   1e2b6:	645a      	str	r2, [r3, #68]	; 0x44

    return TRUE;
   1e2b8:	2301      	movs	r3, #1
   1e2ba:	e007      	b.n	1e2cc <appSlaveAdvMode+0x2c>
  }

  if (appSlaveCb.advStopCback == appSlaveLegAdvStop)
   1e2bc:	4b06      	ldr	r3, [pc, #24]	; (1e2d8 <appSlaveAdvMode+0x38>)
   1e2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e2c0:	4a06      	ldr	r2, [pc, #24]	; (1e2dc <appSlaveAdvMode+0x3c>)
   1e2c2:	4293      	cmp	r3, r2
   1e2c4:	d101      	bne.n	1e2ca <appSlaveAdvMode+0x2a>
  {
    return TRUE;
   1e2c6:	2301      	movs	r3, #1
   1e2c8:	e000      	b.n	1e2cc <appSlaveAdvMode+0x2c>
  }

  APP_TRACE_WARN0("Invalid DM advertising mode; mode configured as extended");

  return FALSE;
   1e2ca:	2300      	movs	r3, #0
}
   1e2cc:	4618      	mov	r0, r3
   1e2ce:	46bd      	mov	sp, r7
   1e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   1e2d4:	4770      	bx	lr
   1e2d6:	bf00      	nop
   1e2d8:	10007070 	.word	0x10007070
   1e2dc:	0001e225 	.word	0x0001e225
   1e2e0:	0001e265 	.word	0x0001e265

0001e2e4 <AppAdvSetData>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvSetData(uint8_t location, uint8_t len, uint8_t *pData)
{
   1e2e4:	b580      	push	{r7, lr}
   1e2e6:	b084      	sub	sp, #16
   1e2e8:	af02      	add	r7, sp, #8
   1e2ea:	4603      	mov	r3, r0
   1e2ec:	603a      	str	r2, [r7, #0]
   1e2ee:	71fb      	strb	r3, [r7, #7]
   1e2f0:	460b      	mov	r3, r1
   1e2f2:	71bb      	strb	r3, [r7, #6]
  if (appSlaveAdvMode())
   1e2f4:	f7ff ffd4 	bl	1e2a0 <appSlaveAdvMode>
   1e2f8:	4603      	mov	r3, r0
   1e2fa:	2b00      	cmp	r3, #0
   1e2fc:	d00f      	beq.n	1e31e <AppAdvSetData+0x3a>
  {
    /* legacy advertising data length cannot exceed 31 bytes */
    if (len > HCI_ADV_DATA_LEN)
   1e2fe:	79bb      	ldrb	r3, [r7, #6]
   1e300:	2b1f      	cmp	r3, #31
   1e302:	d901      	bls.n	1e308 <AppAdvSetData+0x24>
    {
      len = HCI_ADV_DATA_LEN;
   1e304:	231f      	movs	r3, #31
   1e306:	71bb      	strb	r3, [r7, #6]
    }

    /* maximum advertising data length supported by Controller is 31 bytes */
    appAdvSetData(DM_ADV_HANDLE_DEFAULT, location, len, pData, HCI_ADV_DATA_LEN, HCI_ADV_DATA_LEN);
   1e308:	79bb      	ldrb	r3, [r7, #6]
   1e30a:	b29a      	uxth	r2, r3
   1e30c:	79f9      	ldrb	r1, [r7, #7]
   1e30e:	231f      	movs	r3, #31
   1e310:	9301      	str	r3, [sp, #4]
   1e312:	231f      	movs	r3, #31
   1e314:	9300      	str	r3, [sp, #0]
   1e316:	683b      	ldr	r3, [r7, #0]
   1e318:	2000      	movs	r0, #0
   1e31a:	f7ff fd41 	bl	1dda0 <appAdvSetData>
  }
}
   1e31e:	bf00      	nop
   1e320:	3708      	adds	r7, #8
   1e322:	46bd      	mov	sp, r7
   1e324:	bd80      	pop	{r7, pc}
	...

0001e328 <AppAdvStart>:
 *
 *  \return None.
 */
/*************************************************************************************************/
void AppAdvStart(uint8_t mode)
{
   1e328:	b580      	push	{r7, lr}
   1e32a:	b088      	sub	sp, #32
   1e32c:	af04      	add	r7, sp, #16
   1e32e:	4603      	mov	r3, r0
   1e330:	71fb      	strb	r3, [r7, #7]
  uint8_t advHandle;
  uint8_t maxEaEvents;

  if (appSlaveAdvMode())
   1e332:	f7ff ffb5 	bl	1e2a0 <appSlaveAdvMode>
   1e336:	4603      	mov	r3, r0
   1e338:	2b00      	cmp	r3, #0
   1e33a:	d01a      	beq.n	1e372 <AppAdvStart+0x4a>
  {
    advHandle = DM_ADV_HANDLE_DEFAULT;
   1e33c:	2300      	movs	r3, #0
   1e33e:	73fb      	strb	r3, [r7, #15]
    maxEaEvents = 0;
   1e340:	2300      	movs	r3, #0
   1e342:	73bb      	strb	r3, [r7, #14]

    /* initialize advertising state */
    appSlaveCb.advState[DM_ADV_HANDLE_DEFAULT] = APP_ADV_STATE1;
   1e344:	4b0d      	ldr	r3, [pc, #52]	; (1e37c <AppAdvStart+0x54>)
   1e346:	2200      	movs	r2, #0
   1e348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1e34c:	4b0c      	ldr	r3, [pc, #48]	; (1e380 <AppAdvStart+0x58>)
   1e34e:	681b      	ldr	r3, [r3, #0]
   1e350:	1d9a      	adds	r2, r3, #6
                     &(pAppAdvCfg->advDuration[APP_ADV_STATE1]), &maxEaEvents, TRUE, mode);
   1e352:	4b0b      	ldr	r3, [pc, #44]	; (1e380 <AppAdvStart+0x58>)
   1e354:	681b      	ldr	r3, [r3, #0]
    appSlaveAdvStart(1, &advHandle, &(pAppAdvCfg->advInterval[APP_ADV_STATE1]),
   1e356:	4618      	mov	r0, r3
   1e358:	f107 010f 	add.w	r1, r7, #15
   1e35c:	79fb      	ldrb	r3, [r7, #7]
   1e35e:	9302      	str	r3, [sp, #8]
   1e360:	2301      	movs	r3, #1
   1e362:	9301      	str	r3, [sp, #4]
   1e364:	f107 030e 	add.w	r3, r7, #14
   1e368:	9300      	str	r3, [sp, #0]
   1e36a:	4603      	mov	r3, r0
   1e36c:	2001      	movs	r0, #1
   1e36e:	f7ff fdf9 	bl	1df64 <appSlaveAdvStart>
  }
}
   1e372:	bf00      	nop
   1e374:	3710      	adds	r7, #16
   1e376:	46bd      	mov	sp, r7
   1e378:	bd80      	pop	{r7, pc}
   1e37a:	bf00      	nop
   1e37c:	10007070 	.word	0x10007070
   1e380:	10006f6c 	.word	0x10006f6c

0001e384 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   1e384:	4811      	ldr	r0, [pc, #68]	; (1e3cc <zero_loop+0x12>)
   1e386:	4912      	ldr	r1, [pc, #72]	; (1e3d0 <zero_loop+0x16>)
   1e388:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   1e38a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   1e38e:	4811      	ldr	r0, [pc, #68]	; (1e3d4 <zero_loop+0x1a>)
   1e390:	6801      	ldr	r1, [r0, #0]
   1e392:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1e396:	6001      	str	r1, [r0, #0]
   1e398:	f3bf 8f4f 	dsb	sy
   1e39c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   1e3a0:	480d      	ldr	r0, [pc, #52]	; (1e3d8 <zero_loop+0x1e>)
   1e3a2:	490e      	ldr	r1, [pc, #56]	; (1e3dc <zero_loop+0x22>)
   1e3a4:	4a0e      	ldr	r2, [pc, #56]	; (1e3e0 <zero_loop+0x26>)

0001e3a6 <copy_loop>:
   1e3a6:	f850 3b04 	ldr.w	r3, [r0], #4
   1e3aa:	f841 3b04 	str.w	r3, [r1], #4
   1e3ae:	4291      	cmp	r1, r2
   1e3b0:	dbf9      	blt.n	1e3a6 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   1e3b2:	480c      	ldr	r0, [pc, #48]	; (1e3e4 <zero_loop+0x2a>)
   1e3b4:	490c      	ldr	r1, [pc, #48]	; (1e3e8 <zero_loop+0x2e>)
   1e3b6:	f04f 0200 	mov.w	r2, #0

0001e3ba <zero_loop>:
   1e3ba:	4288      	cmp	r0, r1
   1e3bc:	bfb8      	it	lt
   1e3be:	f840 2b04 	strlt.w	r2, [r0], #4
   1e3c2:	dbfa      	blt.n	1e3ba <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
   1e3c4:	f7f4 fbd0 	bl	12b68 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   1e3c8:	be00      	bkpt	0x0000
}
   1e3ca:	bf00      	nop
   1e3cc:	e000ed08 	.word	0xe000ed08
   1e3d0:	0000c000 	.word	0x0000c000
   1e3d4:	e000ed88 	.word	0xe000ed88
   1e3d8:	000251b0 	.word	0x000251b0
   1e3dc:	10002300 	.word	0x10002300
   1e3e0:	10002fd8 	.word	0x10002fd8
   1e3e4:	10002fd8 	.word	0x10002fd8
   1e3e8:	10007184 	.word	0x10007184

0001e3ec <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   1e3ec:	b480      	push	{r7}
   1e3ee:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1e3f0:	e7fe      	b.n	1e3f0 <NMI_Handler+0x4>

0001e3f2 <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   1e3f2:	b480      	push	{r7}
   1e3f4:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1e3f6:	e7fe      	b.n	1e3f6 <BusFault_Handler+0x4>

0001e3f8 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   1e3f8:	b480      	push	{r7}
   1e3fa:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   1e3fc:	e7fe      	b.n	1e3fc <DebugMon_Handler+0x4>
	...

0001e400 <am_hal_ble_blocking_transfer.part.7>:
   1e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e404:	4dcb      	ldr	r5, [pc, #812]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e406:	f8d5 8220 	ldr.w	r8, [r5, #544]	; 0x220
   1e40a:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1e40e:	f36f 13c7 	bfc	r3, #7, #1
   1e412:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1e416:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1e41a:	f36f 2308 	bfc	r3, #8, #1
   1e41e:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1e422:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1e426:	f36f 0300 	bfc	r3, #0, #1
   1e42a:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1e42e:	f8d5 3220 	ldr.w	r3, [r5, #544]	; 0x220
   1e432:	f36f 0341 	bfc	r3, #1, #1
   1e436:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220
   1e43a:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1e43e:	f043 0301 	orr.w	r3, r3, #1
   1e442:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1e446:	f8d5 3228 	ldr.w	r3, [r5, #552]	; 0x228
   1e44a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e44e:	f8c5 3228 	str.w	r3, [r5, #552]	; 0x228
   1e452:	7a8b      	ldrb	r3, [r1, #10]
   1e454:	2b01      	cmp	r3, #1
   1e456:	b085      	sub	sp, #20
   1e458:	460e      	mov	r6, r1
   1e45a:	4604      	mov	r4, r0
   1e45c:	d00a      	beq.n	1e474 <am_hal_ble_blocking_transfer.part.7+0x74>
   1e45e:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1e462:	061f      	lsls	r7, r3, #24
   1e464:	f100 8123 	bmi.w	1e6ae <am_hal_ble_blocking_transfer.part.7+0x2ae>
   1e468:	48b3      	ldr	r0, [pc, #716]	; (1e738 <am_hal_ble_blocking_transfer.part.7+0x338>)
   1e46a:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1e46e:	b005      	add	sp, #20
   1e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e474:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   1e478:	2b00      	cmp	r3, #0
   1e47a:	f000 80e6 	beq.w	1e64a <am_hal_ble_blocking_transfer.part.7+0x24a>
   1e47e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1e482:	2b00      	cmp	r3, #0
   1e484:	f000 81f2 	beq.w	1e86c <am_hal_ble_blocking_transfer.part.7+0x46c>
   1e488:	2200      	movs	r2, #0
   1e48a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   1e48e:	b1a3      	cbz	r3, 1e4ba <am_hal_ble_blocking_transfer.part.7+0xba>
   1e490:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 1e734 <am_hal_ble_blocking_transfer.part.7+0x334>
   1e494:	f240 152d 	movw	r5, #301	; 0x12d
   1e498:	2700      	movs	r7, #0
   1e49a:	e006      	b.n	1e4aa <am_hal_ble_blocking_transfer.part.7+0xaa>
   1e49c:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
   1e4a0:	20a0      	movs	r0, #160	; 0xa0
   1e4a2:	f001 fdbd 	bl	20020 <am_hal_flash_delay>
   1e4a6:	3d01      	subs	r5, #1
   1e4a8:	d007      	beq.n	1e4ba <am_hal_ble_blocking_transfer.part.7+0xba>
   1e4aa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1e4ae:	2b00      	cmp	r3, #0
   1e4b0:	d1f4      	bne.n	1e49c <am_hal_ble_blocking_transfer.part.7+0x9c>
   1e4b2:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1e4b6:	0718      	lsls	r0, r3, #28
   1e4b8:	d4f2      	bmi.n	1e4a0 <am_hal_ble_blocking_transfer.part.7+0xa0>
   1e4ba:	4a9e      	ldr	r2, [pc, #632]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e4bc:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   1e4c0:	f043 0302 	orr.w	r3, r3, #2
   1e4c4:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
   1e4c8:	2050      	movs	r0, #80	; 0x50
   1e4ca:	f001 fda9 	bl	20020 <am_hal_flash_delay>
   1e4ce:	6823      	ldr	r3, [r4, #0]
   1e4d0:	4a9a      	ldr	r2, [pc, #616]	; (1e73c <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1e4d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e4d6:	4293      	cmp	r3, r2
   1e4d8:	f000 81d5 	beq.w	1e886 <am_hal_ble_blocking_transfer.part.7+0x486>
   1e4dc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1e4e0:	f8df 9250 	ldr.w	r9, [pc, #592]	; 1e734 <am_hal_ble_blocking_transfer.part.7+0x334>
   1e4e4:	2500      	movs	r5, #0
   1e4e6:	46aa      	mov	sl, r5
   1e4e8:	2b00      	cmp	r3, #0
   1e4ea:	f040 80c6 	bne.w	1e67a <am_hal_ble_blocking_transfer.part.7+0x27a>
   1e4ee:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1e4f2:	2b00      	cmp	r3, #0
   1e4f4:	f040 80ac 	bne.w	1e650 <am_hal_ble_blocking_transfer.part.7+0x250>
   1e4f8:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1e4fc:	0719      	lsls	r1, r3, #28
   1e4fe:	f140 80ac 	bpl.w	1e65a <am_hal_ble_blocking_transfer.part.7+0x25a>
   1e502:	f001 ff61 	bl	203c8 <am_hal_interrupt_master_disable>
   1e506:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
   1e50a:	9002      	str	r0, [sp, #8]
   1e50c:	9802      	ldr	r0, [sp, #8]
   1e50e:	2f00      	cmp	r7, #0
   1e510:	f040 80b6 	bne.w	1e680 <am_hal_ble_blocking_transfer.part.7+0x280>
   1e514:	2301      	movs	r3, #1
   1e516:	6463      	str	r3, [r4, #68]	; 0x44
   1e518:	f001 ff5a 	bl	203d0 <am_hal_interrupt_master_set>
   1e51c:	4b85      	ldr	r3, [pc, #532]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e51e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1e522:	f367 0241 	bfi	r2, r7, #1, #1
   1e526:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1e52a:	7b33      	ldrb	r3, [r6, #12]
   1e52c:	2b00      	cmp	r3, #0
   1e52e:	f000 80cb 	beq.w	1e6c8 <am_hal_ble_blocking_transfer.part.7+0x2c8>
   1e532:	2301      	movs	r3, #1
   1e534:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
   1e538:	f104 070c 	add.w	r7, r4, #12
   1e53c:	6833      	ldr	r3, [r6, #0]
   1e53e:	6872      	ldr	r2, [r6, #4]
   1e540:	68b0      	ldr	r0, [r6, #8]
   1e542:	68f1      	ldr	r1, [r6, #12]
   1e544:	60e3      	str	r3, [r4, #12]
   1e546:	607a      	str	r2, [r7, #4]
   1e548:	60b8      	str	r0, [r7, #8]
   1e54a:	60f9      	str	r1, [r7, #12]
   1e54c:	6933      	ldr	r3, [r6, #16]
   1e54e:	6972      	ldr	r2, [r6, #20]
   1e550:	617a      	str	r2, [r7, #20]
   1e552:	613b      	str	r3, [r7, #16]
   1e554:	f001 ff38 	bl	203c8 <am_hal_interrupt_master_disable>
   1e558:	9001      	str	r0, [sp, #4]
   1e55a:	6823      	ldr	r3, [r4, #0]
   1e55c:	4a77      	ldr	r2, [pc, #476]	; (1e73c <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1e55e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e562:	4293      	cmp	r3, r2
   1e564:	f000 8197 	beq.w	1e896 <am_hal_ble_blocking_transfer.part.7+0x496>
   1e568:	7ab3      	ldrb	r3, [r6, #10]
   1e56a:	2b01      	cmp	r3, #1
   1e56c:	f000 8185 	beq.w	1e87a <am_hal_ble_blocking_transfer.part.7+0x47a>
   1e570:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   1e572:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1e576:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 1e73c <am_hal_ble_blocking_transfer.part.7+0x33c>
   1e57a:	496e      	ldr	r1, [pc, #440]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e57c:	f04f 0e00 	mov.w	lr, #0
   1e580:	45a9      	cmp	r9, r5
   1e582:	d926      	bls.n	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e584:	6823      	ldr	r3, [r4, #0]
   1e586:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e58a:	4563      	cmp	r3, ip
   1e58c:	d1f8      	bne.n	1e580 <am_hal_ble_blocking_transfer.part.7+0x180>
   1e58e:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
   1e592:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1e596:	2803      	cmp	r0, #3
   1e598:	d9f2      	bls.n	1e580 <am_hal_ble_blocking_transfer.part.7+0x180>
   1e59a:	4581      	cmp	r9, r0
   1e59c:	bf94      	ite	ls
   1e59e:	ebc5 0009 	rsbls	r0, r5, r9
   1e5a2:	f020 0003 	bichi.w	r0, r0, #3
   1e5a6:	68e2      	ldr	r2, [r4, #12]
   1e5a8:	f025 0303 	bic.w	r3, r5, #3
   1e5ac:	b168      	cbz	r0, 1e5ca <am_hal_ble_blocking_transfer.part.7+0x1ca>
   1e5ae:	441a      	add	r2, r3
   1e5b0:	2300      	movs	r3, #0
   1e5b2:	3304      	adds	r3, #4
   1e5b4:	f8d1 5108 	ldr.w	r5, [r1, #264]	; 0x108
   1e5b8:	f842 5b04 	str.w	r5, [r2], #4
   1e5bc:	4283      	cmp	r3, r0
   1e5be:	f8c1 e108 	str.w	lr, [r1, #264]	; 0x108
   1e5c2:	d3f6      	bcc.n	1e5b2 <am_hal_ble_blocking_transfer.part.7+0x1b2>
   1e5c4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
   1e5c6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
   1e5ca:	4405      	add	r5, r0
   1e5cc:	45a9      	cmp	r9, r5
   1e5ce:	63e5      	str	r5, [r4, #60]	; 0x3c
   1e5d0:	d8d8      	bhi.n	1e584 <am_hal_ble_blocking_transfer.part.7+0x184>
   1e5d2:	9801      	ldr	r0, [sp, #4]
   1e5d4:	f001 fefc 	bl	203d0 <am_hal_interrupt_master_set>
   1e5d8:	4b56      	ldr	r3, [pc, #344]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e5da:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
   1e5de:	07d2      	lsls	r2, r2, #31
   1e5e0:	d40d      	bmi.n	1e5fe <am_hal_ble_blocking_transfer.part.7+0x1fe>
   1e5e2:	4699      	mov	r9, r3
   1e5e4:	f242 7510 	movw	r5, #10000	; 0x2710
   1e5e8:	e002      	b.n	1e5f0 <am_hal_ble_blocking_transfer.part.7+0x1f0>
   1e5ea:	3d01      	subs	r5, #1
   1e5ec:	f000 8149 	beq.w	1e882 <am_hal_ble_blocking_transfer.part.7+0x482>
   1e5f0:	2010      	movs	r0, #16
   1e5f2:	f001 fd15 	bl	20020 <am_hal_flash_delay>
   1e5f6:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1e5fa:	07db      	lsls	r3, r3, #31
   1e5fc:	d5f5      	bpl.n	1e5ea <am_hal_ble_blocking_transfer.part.7+0x1ea>
   1e5fe:	4a4d      	ldr	r2, [pc, #308]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e600:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
   1e604:	f043 0301 	orr.w	r3, r3, #1
   1e608:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
   1e60c:	f8d2 1228 	ldr.w	r1, [r2, #552]	; 0x228
   1e610:	2300      	movs	r3, #0
   1e612:	f041 0102 	orr.w	r1, r1, #2
   1e616:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
   1e61a:	603b      	str	r3, [r7, #0]
   1e61c:	607b      	str	r3, [r7, #4]
   1e61e:	60bb      	str	r3, [r7, #8]
   1e620:	60fb      	str	r3, [r7, #12]
   1e622:	613b      	str	r3, [r7, #16]
   1e624:	617b      	str	r3, [r7, #20]
   1e626:	63e3      	str	r3, [r4, #60]	; 0x3c
   1e628:	7ab3      	ldrb	r3, [r6, #10]
   1e62a:	2b01      	cmp	r3, #1
   1e62c:	f000 8113 	beq.w	1e856 <am_hal_ble_blocking_transfer.part.7+0x456>
   1e630:	2b02      	cmp	r3, #2
   1e632:	f000 8107 	beq.w	1e844 <am_hal_ble_blocking_transfer.part.7+0x444>
   1e636:	2300      	movs	r3, #0
   1e638:	4a3e      	ldr	r2, [pc, #248]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e63a:	4618      	mov	r0, r3
   1e63c:	f8c2 8220 	str.w	r8, [r2, #544]	; 0x220
   1e640:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   1e644:	b005      	add	sp, #20
   1e646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e64a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1e64e:	e71e      	b.n	1e48e <am_hal_ble_blocking_transfer.part.7+0x8e>
   1e650:	f8d9 3224 	ldr.w	r3, [r9, #548]	; 0x224
   1e654:	05da      	lsls	r2, r3, #23
   1e656:	f53f af54 	bmi.w	1e502 <am_hal_ble_blocking_transfer.part.7+0x102>
   1e65a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
   1e65e:	d012      	beq.n	1e686 <am_hal_ble_blocking_transfer.part.7+0x286>
   1e660:	f8d9 330c 	ldr.w	r3, [r9, #780]	; 0x30c
   1e664:	061b      	lsls	r3, r3, #24
   1e666:	d40e      	bmi.n	1e686 <am_hal_ble_blocking_transfer.part.7+0x286>
   1e668:	20a0      	movs	r0, #160	; 0xa0
   1e66a:	f001 fcd9 	bl	20020 <am_hal_flash_delay>
   1e66e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1e672:	3501      	adds	r5, #1
   1e674:	2b00      	cmp	r3, #0
   1e676:	f43f af3a 	beq.w	1e4ee <am_hal_ble_blocking_transfer.part.7+0xee>
   1e67a:	f884 a041 	strb.w	sl, [r4, #65]	; 0x41
   1e67e:	e740      	b.n	1e502 <am_hal_ble_blocking_transfer.part.7+0x102>
   1e680:	f001 fea6 	bl	203d0 <am_hal_interrupt_master_set>
   1e684:	e7f0      	b.n	1e668 <am_hal_ble_blocking_transfer.part.7+0x268>
   1e686:	6823      	ldr	r3, [r4, #0]
   1e688:	4a2c      	ldr	r2, [pc, #176]	; (1e73c <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1e68a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e68e:	4293      	cmp	r3, r2
   1e690:	f000 811e 	beq.w	1e8d0 <am_hal_ble_blocking_transfer.part.7+0x4d0>
   1e694:	4b27      	ldr	r3, [pc, #156]	; (1e734 <am_hal_ble_blocking_transfer.part.7+0x334>)
   1e696:	482a      	ldr	r0, [pc, #168]	; (1e740 <am_hal_ble_blocking_transfer.part.7+0x340>)
   1e698:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1e69c:	f36f 0241 	bfc	r2, #1, #1
   1e6a0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1e6a4:	f8c3 8220 	str.w	r8, [r3, #544]	; 0x220
   1e6a8:	b005      	add	sp, #20
   1e6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6ae:	f001 fe8b 	bl	203c8 <am_hal_interrupt_master_disable>
   1e6b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1e6b6:	9003      	str	r0, [sp, #12]
   1e6b8:	9803      	ldr	r0, [sp, #12]
   1e6ba:	2b00      	cmp	r3, #0
   1e6bc:	d157      	bne.n	1e76e <am_hal_ble_blocking_transfer.part.7+0x36e>
   1e6be:	2301      	movs	r3, #1
   1e6c0:	6463      	str	r3, [r4, #68]	; 0x44
   1e6c2:	f001 fe85 	bl	203d0 <am_hal_interrupt_master_set>
   1e6c6:	e730      	b.n	1e52a <am_hal_ble_blocking_transfer.part.7+0x12a>
   1e6c8:	f104 070c 	add.w	r7, r4, #12
   1e6cc:	6833      	ldr	r3, [r6, #0]
   1e6ce:	6872      	ldr	r2, [r6, #4]
   1e6d0:	68b0      	ldr	r0, [r6, #8]
   1e6d2:	68f1      	ldr	r1, [r6, #12]
   1e6d4:	60e3      	str	r3, [r4, #12]
   1e6d6:	607a      	str	r2, [r7, #4]
   1e6d8:	60b8      	str	r0, [r7, #8]
   1e6da:	60f9      	str	r1, [r7, #12]
   1e6dc:	6933      	ldr	r3, [r6, #16]
   1e6de:	6972      	ldr	r2, [r6, #20]
   1e6e0:	617a      	str	r2, [r7, #20]
   1e6e2:	613b      	str	r3, [r7, #16]
   1e6e4:	f001 fe70 	bl	203c8 <am_hal_interrupt_master_disable>
   1e6e8:	9001      	str	r0, [sp, #4]
   1e6ea:	2c00      	cmp	r4, #0
   1e6ec:	f47f af35 	bne.w	1e55a <am_hal_ble_blocking_transfer.part.7+0x15a>
   1e6f0:	7ab3      	ldrb	r3, [r6, #10]
   1e6f2:	2b01      	cmp	r3, #1
   1e6f4:	f47f af3c 	bne.w	1e570 <am_hal_ble_blocking_transfer.part.7+0x170>
   1e6f8:	6823      	ldr	r3, [r4, #0]
   1e6fa:	4a10      	ldr	r2, [pc, #64]	; (1e73c <am_hal_ble_blocking_transfer.part.7+0x33c>)
   1e6fc:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1e700:	68e5      	ldr	r5, [r4, #12]
   1e702:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e706:	4293      	cmp	r3, r2
   1e708:	d06b      	beq.n	1e7e2 <am_hal_ble_blocking_transfer.part.7+0x3e2>
   1e70a:	f1bb 0f00 	cmp.w	fp, #0
   1e70e:	f43f af60 	beq.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e712:	f8df a020 	ldr.w	sl, [pc, #32]	; 1e734 <am_hal_ble_blocking_transfer.part.7+0x334>
   1e716:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1e71a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e71e:	2b03      	cmp	r3, #3
   1e720:	d833      	bhi.n	1e78a <am_hal_ble_blocking_transfer.part.7+0x38a>
   1e722:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   1e726:	07d9      	lsls	r1, r3, #31
   1e728:	f53f af53 	bmi.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e72c:	f8df 9014 	ldr.w	r9, [pc, #20]	; 1e744 <am_hal_ble_blocking_transfer.part.7+0x344>
   1e730:	e013      	b.n	1e75a <am_hal_ble_blocking_transfer.part.7+0x35a>
   1e732:	bf00      	nop
   1e734:	5000c000 	.word	0x5000c000
   1e738:	08000001 	.word	0x08000001
   1e73c:	01775230 	.word	0x01775230
   1e740:	08000002 	.word	0x08000002
   1e744:	0007a120 	.word	0x0007a120
   1e748:	f8da 3224 	ldr.w	r3, [sl, #548]	; 0x224
   1e74c:	07d8      	lsls	r0, r3, #31
   1e74e:	f53f af40 	bmi.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e752:	f1b9 0901 	subs.w	r9, r9, #1
   1e756:	f43f af3c 	beq.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e75a:	2010      	movs	r0, #16
   1e75c:	f001 fc60 	bl	20020 <am_hal_flash_delay>
   1e760:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1e764:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e768:	2b03      	cmp	r3, #3
   1e76a:	d9ed      	bls.n	1e748 <am_hal_ble_blocking_transfer.part.7+0x348>
   1e76c:	e00d      	b.n	1e78a <am_hal_ble_blocking_transfer.part.7+0x38a>
   1e76e:	f001 fe2f 	bl	203d0 <am_hal_interrupt_master_set>
   1e772:	f8c5 8220 	str.w	r8, [r5, #544]	; 0x220
   1e776:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1e77a:	e678      	b.n	1e46e <am_hal_ble_blocking_transfer.part.7+0x6e>
   1e77c:	2b03      	cmp	r3, #3
   1e77e:	f240 80b8 	bls.w	1e8f2 <am_hal_ble_blocking_transfer.part.7+0x4f2>
   1e782:	f1bb 0f00 	cmp.w	fp, #0
   1e786:	f43f af24 	beq.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e78a:	f855 2b04 	ldr.w	r2, [r5], #4
   1e78e:	f8ca 210c 	str.w	r2, [sl, #268]	; 0x10c
   1e792:	f1bb 0f03 	cmp.w	fp, #3
   1e796:	f1a3 0304 	sub.w	r3, r3, #4
   1e79a:	f1ab 0b04 	sub.w	fp, fp, #4
   1e79e:	f67f af18 	bls.w	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e7a2:	e7eb      	b.n	1e77c <am_hal_ble_blocking_transfer.part.7+0x37c>
   1e7a4:	2000      	movs	r0, #0
   1e7a6:	4602      	mov	r2, r0
   1e7a8:	f896 c00c 	ldrb.w	ip, [r6, #12]
   1e7ac:	f896 e00a 	ldrb.w	lr, [r6, #10]
   1e7b0:	8935      	ldrh	r5, [r6, #8]
   1e7b2:	4952      	ldr	r1, [pc, #328]	; (1e8fc <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   1e7b4:	015b      	lsls	r3, r3, #5
   1e7b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1e7ba:	ea4e 1ecc 	orr.w	lr, lr, ip, lsl #7
   1e7be:	022d      	lsls	r5, r5, #8
   1e7c0:	4029      	ands	r1, r5
   1e7c2:	ea4e 0303 	orr.w	r3, lr, r3
   1e7c6:	430b      	orrs	r3, r1
   1e7c8:	494d      	ldr	r1, [pc, #308]	; (1e900 <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e7ca:	4313      	orrs	r3, r2
   1e7cc:	f8c1 0214 	str.w	r0, [r1, #532]	; 0x214
   1e7d0:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
   1e7d4:	7ab3      	ldrb	r3, [r6, #10]
   1e7d6:	2b01      	cmp	r3, #1
   1e7d8:	f47f aeca 	bne.w	1e570 <am_hal_ble_blocking_transfer.part.7+0x170>
   1e7dc:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1e7e0:	68e5      	ldr	r5, [r4, #12]
   1e7e2:	79f2      	ldrb	r2, [r6, #7]
   1e7e4:	2a03      	cmp	r2, #3
   1e7e6:	d890      	bhi.n	1e70a <am_hal_ble_blocking_transfer.part.7+0x30a>
   1e7e8:	e8df f002 	tbb	[pc, r2]
   1e7ec:	1e242802 	.word	0x1e242802
   1e7f0:	2100      	movs	r1, #0
   1e7f2:	460b      	mov	r3, r1
   1e7f4:	f896 e00c 	ldrb.w	lr, [r6, #12]
   1e7f8:	f8b6 c008 	ldrh.w	ip, [r6, #8]
   1e7fc:	483f      	ldr	r0, [pc, #252]	; (1e8fc <am_hal_ble_blocking_transfer.part.7+0x4fc>)
   1e7fe:	0152      	lsls	r2, r2, #5
   1e800:	ea4f 1ece 	mov.w	lr, lr, lsl #7
   1e804:	f002 0260 	and.w	r2, r2, #96	; 0x60
   1e808:	f04e 0e01 	orr.w	lr, lr, #1
   1e80c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
   1e810:	ea0c 0000 	and.w	r0, ip, r0
   1e814:	ea4e 0202 	orr.w	r2, lr, r2
   1e818:	4302      	orrs	r2, r0
   1e81a:	4839      	ldr	r0, [pc, #228]	; (1e900 <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e81c:	4313      	orrs	r3, r2
   1e81e:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
   1e822:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
   1e826:	e770      	b.n	1e70a <am_hal_ble_blocking_transfer.part.7+0x30a>
   1e828:	88b1      	ldrh	r1, [r6, #4]
   1e82a:	79b3      	ldrb	r3, [r6, #6]
   1e82c:	ba49      	rev16	r1, r1
   1e82e:	b289      	uxth	r1, r1
   1e830:	061b      	lsls	r3, r3, #24
   1e832:	e7df      	b.n	1e7f4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1e834:	7973      	ldrb	r3, [r6, #5]
   1e836:	7931      	ldrb	r1, [r6, #4]
   1e838:	061b      	lsls	r3, r3, #24
   1e83a:	e7db      	b.n	1e7f4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1e83c:	7933      	ldrb	r3, [r6, #4]
   1e83e:	2100      	movs	r1, #0
   1e840:	061b      	lsls	r3, r3, #24
   1e842:	e7d7      	b.n	1e7f4 <am_hal_ble_blocking_transfer.part.7+0x3f4>
   1e844:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1e848:	2b00      	cmp	r3, #0
   1e84a:	f43f aef4 	beq.w	1e636 <am_hal_ble_blocking_transfer.part.7+0x236>
   1e84e:	2300      	movs	r3, #0
   1e850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1e854:	e6ef      	b.n	1e636 <am_hal_ble_blocking_transfer.part.7+0x236>
   1e856:	6823      	ldr	r3, [r4, #0]
   1e858:	492a      	ldr	r1, [pc, #168]	; (1e904 <am_hal_ble_blocking_transfer.part.7+0x504>)
   1e85a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e85e:	428b      	cmp	r3, r1
   1e860:	d03f      	beq.n	1e8e2 <am_hal_ble_blocking_transfer.part.7+0x4e2>
   1e862:	2301      	movs	r3, #1
   1e864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1e868:	7ab3      	ldrb	r3, [r6, #10]
   1e86a:	e6e1      	b.n	1e630 <am_hal_ble_blocking_transfer.part.7+0x230>
   1e86c:	f64b 3080 	movw	r0, #48000	; 0xbb80
   1e870:	f001 fbd6 	bl	20020 <am_hal_flash_delay>
   1e874:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   1e878:	e606      	b.n	1e488 <am_hal_ble_blocking_transfer.part.7+0x88>
   1e87a:	f8b4 b014 	ldrh.w	fp, [r4, #20]
   1e87e:	68e5      	ldr	r5, [r4, #12]
   1e880:	e743      	b.n	1e70a <am_hal_ble_blocking_transfer.part.7+0x30a>
   1e882:	4821      	ldr	r0, [pc, #132]	; (1e908 <am_hal_ble_blocking_transfer.part.7+0x508>)
   1e884:	e5f3      	b.n	1e46e <am_hal_ble_blocking_transfer.part.7+0x6e>
   1e886:	4a1e      	ldr	r2, [pc, #120]	; (1e900 <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e888:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   1e88c:	f043 030c 	orr.w	r3, r3, #12
   1e890:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   1e894:	e622      	b.n	1e4dc <am_hal_ble_blocking_transfer.part.7+0xdc>
   1e896:	79f3      	ldrb	r3, [r6, #7]
   1e898:	2b03      	cmp	r3, #3
   1e89a:	f63f af29 	bhi.w	1e6f0 <am_hal_ble_blocking_transfer.part.7+0x2f0>
   1e89e:	a201      	add	r2, pc, #4	; (adr r2, 1e8a4 <am_hal_ble_blocking_transfer.part.7+0x4a4>)
   1e8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e8a4:	0001e7a5 	.word	0x0001e7a5
   1e8a8:	0001e8c9 	.word	0x0001e8c9
   1e8ac:	0001e8c1 	.word	0x0001e8c1
   1e8b0:	0001e8b5 	.word	0x0001e8b5
   1e8b4:	88b0      	ldrh	r0, [r6, #4]
   1e8b6:	79b2      	ldrb	r2, [r6, #6]
   1e8b8:	ba40      	rev16	r0, r0
   1e8ba:	b280      	uxth	r0, r0
   1e8bc:	0612      	lsls	r2, r2, #24
   1e8be:	e773      	b.n	1e7a8 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e8c0:	7972      	ldrb	r2, [r6, #5]
   1e8c2:	7930      	ldrb	r0, [r6, #4]
   1e8c4:	0612      	lsls	r2, r2, #24
   1e8c6:	e76f      	b.n	1e7a8 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e8c8:	7932      	ldrb	r2, [r6, #4]
   1e8ca:	2000      	movs	r0, #0
   1e8cc:	0612      	lsls	r2, r2, #24
   1e8ce:	e76b      	b.n	1e7a8 <am_hal_ble_blocking_transfer.part.7+0x3a8>
   1e8d0:	4b0b      	ldr	r3, [pc, #44]	; (1e900 <am_hal_ble_blocking_transfer.part.7+0x500>)
   1e8d2:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1e8d6:	2102      	movs	r1, #2
   1e8d8:	f361 0283 	bfi	r2, r1, #2, #2
   1e8dc:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1e8e0:	e6d8      	b.n	1e694 <am_hal_ble_blocking_transfer.part.7+0x294>
   1e8e2:	f8b2 3304 	ldrh.w	r3, [r2, #772]	; 0x304
   1e8e6:	2102      	movs	r1, #2
   1e8e8:	f361 0383 	bfi	r3, r1, #2, #2
   1e8ec:	f8a2 3304 	strh.w	r3, [r2, #772]	; 0x304
   1e8f0:	e7b7      	b.n	1e862 <am_hal_ble_blocking_transfer.part.7+0x462>
   1e8f2:	f1bb 0f00 	cmp.w	fp, #0
   1e8f6:	f47f af0e 	bne.w	1e716 <am_hal_ble_blocking_transfer.part.7+0x316>
   1e8fa:	e66a      	b.n	1e5d2 <am_hal_ble_blocking_transfer.part.7+0x1d2>
   1e8fc:	000fff00 	.word	0x000fff00
   1e900:	5000c000 	.word	0x5000c000
   1e904:	01775230 	.word	0x01775230
   1e908:	08000009 	.word	0x08000009

0001e90c <am_hal_ble_initialize>:
   1e90c:	b108      	cbz	r0, 1e912 <am_hal_ble_initialize+0x6>
   1e90e:	2005      	movs	r0, #5
   1e910:	4770      	bx	lr
   1e912:	b149      	cbz	r1, 1e928 <am_hal_ble_initialize+0x1c>
   1e914:	b4f0      	push	{r4, r5, r6, r7}
   1e916:	4b19      	ldr	r3, [pc, #100]	; (1e97c <am_hal_ble_initialize+0x70>)
   1e918:	78dc      	ldrb	r4, [r3, #3]
   1e91a:	f3c4 0200 	ubfx	r2, r4, #0, #1
   1e91e:	b2d0      	uxtb	r0, r2
   1e920:	b120      	cbz	r0, 1e92c <am_hal_ble_initialize+0x20>
   1e922:	2007      	movs	r0, #7
   1e924:	bcf0      	pop	{r4, r5, r6, r7}
   1e926:	4770      	bx	lr
   1e928:	2006      	movs	r0, #6
   1e92a:	4770      	bx	lr
   1e92c:	f044 0401 	orr.w	r4, r4, #1
   1e930:	70dc      	strb	r4, [r3, #3]
   1e932:	681e      	ldr	r6, [r3, #0]
   1e934:	4f12      	ldr	r7, [pc, #72]	; (1e980 <am_hal_ble_initialize+0x74>)
   1e936:	60d8      	str	r0, [r3, #12]
   1e938:	f367 0617 	bfi	r6, r7, #0, #24
   1e93c:	6258      	str	r0, [r3, #36]	; 0x24
   1e93e:	6058      	str	r0, [r3, #4]
   1e940:	63d8      	str	r0, [r3, #60]	; 0x3c
   1e942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   1e946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   1e94a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
   1e94e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
   1e952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
   1e956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
   1e95a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
   1e95e:	721a      	strb	r2, [r3, #8]
   1e960:	601e      	str	r6, [r3, #0]
   1e962:	6118      	str	r0, [r3, #16]
   1e964:	6158      	str	r0, [r3, #20]
   1e966:	6198      	str	r0, [r3, #24]
   1e968:	61d8      	str	r0, [r3, #28]
   1e96a:	6218      	str	r0, [r3, #32]
   1e96c:	6298      	str	r0, [r3, #40]	; 0x28
   1e96e:	62d8      	str	r0, [r3, #44]	; 0x2c
   1e970:	6318      	str	r0, [r3, #48]	; 0x30
   1e972:	6358      	str	r0, [r3, #52]	; 0x34
   1e974:	6398      	str	r0, [r3, #56]	; 0x38
   1e976:	600b      	str	r3, [r1, #0]
   1e978:	e7d4      	b.n	1e924 <am_hal_ble_initialize+0x18>
   1e97a:	bf00      	nop
   1e97c:	100070b8 	.word	0x100070b8
   1e980:	00775230 	.word	0x00775230

0001e984 <am_hal_ble_deinitialize>:
   1e984:	b128      	cbz	r0, 1e992 <am_hal_ble_deinitialize+0xe>
   1e986:	6803      	ldr	r3, [r0, #0]
   1e988:	4a13      	ldr	r2, [pc, #76]	; (1e9d8 <am_hal_ble_deinitialize+0x54>)
   1e98a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e98e:	4293      	cmp	r3, r2
   1e990:	d001      	beq.n	1e996 <am_hal_ble_deinitialize+0x12>
   1e992:	2002      	movs	r0, #2
   1e994:	4770      	bx	lr
   1e996:	78c2      	ldrb	r2, [r0, #3]
   1e998:	2300      	movs	r3, #0
   1e99a:	f363 0200 	bfi	r2, r3, #0, #1
   1e99e:	70c2      	strb	r2, [r0, #3]
   1e9a0:	6802      	ldr	r2, [r0, #0]
   1e9a2:	60c3      	str	r3, [r0, #12]
   1e9a4:	f363 0217 	bfi	r2, r3, #0, #24
   1e9a8:	6103      	str	r3, [r0, #16]
   1e9aa:	6143      	str	r3, [r0, #20]
   1e9ac:	6183      	str	r3, [r0, #24]
   1e9ae:	61c3      	str	r3, [r0, #28]
   1e9b0:	6203      	str	r3, [r0, #32]
   1e9b2:	6043      	str	r3, [r0, #4]
   1e9b4:	63c3      	str	r3, [r0, #60]	; 0x3c
   1e9b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1e9ba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
   1e9be:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
   1e9c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
   1e9c6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
   1e9ca:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
   1e9ce:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
   1e9d2:	6002      	str	r2, [r0, #0]
   1e9d4:	4618      	mov	r0, r3
   1e9d6:	4770      	bx	lr
   1e9d8:	01775230 	.word	0x01775230

0001e9dc <am_hal_ble_config>:
   1e9dc:	b128      	cbz	r0, 1e9ea <am_hal_ble_config+0xe>
   1e9de:	6803      	ldr	r3, [r0, #0]
   1e9e0:	4a3c      	ldr	r2, [pc, #240]	; (1ead4 <am_hal_ble_config+0xf8>)
   1e9e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1e9e6:	4293      	cmp	r3, r2
   1e9e8:	d001      	beq.n	1e9ee <am_hal_ble_config+0x12>
   1e9ea:	2002      	movs	r0, #2
   1e9ec:	4770      	bx	lr
   1e9ee:	b4f0      	push	{r4, r5, r6, r7}
   1e9f0:	4b39      	ldr	r3, [pc, #228]	; (1ead8 <am_hal_ble_config+0xfc>)
   1e9f2:	6844      	ldr	r4, [r0, #4]
   1e9f4:	4d38      	ldr	r5, [pc, #224]	; (1ead8 <am_hal_ble_config+0xfc>)
   1e9f6:	2203      	movs	r2, #3
   1e9f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1e9fc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1ea00:	f36f 4251 	bfc	r2, #17, #1
   1ea04:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1ea08:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1ea0c:	f36f 4210 	bfc	r2, #16, #1
   1ea10:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1ea14:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1ea18:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   1ea1c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
   1ea20:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1ea24:	6888      	ldr	r0, [r1, #8]
   1ea26:	f360 220d 	bfi	r2, r0, #8, #6
   1ea2a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1ea2e:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   1ea32:	6848      	ldr	r0, [r1, #4]
   1ea34:	f360 0205 	bfi	r2, r0, #0, #6
   1ea38:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
   1ea3c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1ea40:	f042 0201 	orr.w	r2, r2, #1
   1ea44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1ea48:	680b      	ldr	r3, [r1, #0]
   1ea4a:	68c8      	ldr	r0, [r1, #12]
   1ea4c:	4a23      	ldr	r2, [pc, #140]	; (1eadc <am_hal_ble_config+0x100>)
   1ea4e:	021b      	lsls	r3, r3, #8
   1ea50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   1ea54:	2802      	cmp	r0, #2
   1ea56:	bf08      	it	eq
   1ea58:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
   1ea5c:	f043 0301 	orr.w	r3, r3, #1
   1ea60:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
   1ea64:	68d3      	ldr	r3, [r2, #12]
   1ea66:	b2db      	uxtb	r3, r3
   1ea68:	2b12      	cmp	r3, #18
   1ea6a:	d009      	beq.n	1ea80 <am_hal_ble_config+0xa4>
   1ea6c:	4b1c      	ldr	r3, [pc, #112]	; (1eae0 <am_hal_ble_config+0x104>)
   1ea6e:	7e8a      	ldrb	r2, [r1, #26]
   1ea70:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1ea74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ea78:	2000      	movs	r0, #0
   1ea7a:	7222      	strb	r2, [r4, #8]
   1ea7c:	bcf0      	pop	{r4, r5, r6, r7}
   1ea7e:	4770      	bx	lr
   1ea80:	4f18      	ldr	r7, [pc, #96]	; (1eae4 <am_hal_ble_config+0x108>)
   1ea82:	68fa      	ldr	r2, [r7, #12]
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
   1ea8a:	6908      	ldr	r0, [r1, #16]
   1ea8c:	f882 0021 	strb.w	r0, [r2, #33]	; 0x21
   1ea90:	6908      	ldr	r0, [r1, #16]
   1ea92:	0a00      	lsrs	r0, r0, #8
   1ea94:	f882 0022 	strb.w	r0, [r2, #34]	; 0x22
   1ea98:	6948      	ldr	r0, [r1, #20]
   1ea9a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
   1ea9e:	6948      	ldr	r0, [r1, #20]
   1eaa0:	0a00      	lsrs	r0, r0, #8
   1eaa2:	f882 0027 	strb.w	r0, [r2, #39]	; 0x27
   1eaa6:	7e48      	ldrb	r0, [r1, #25]
   1eaa8:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
   1eaac:	7e08      	ldrb	r0, [r1, #24]
   1eaae:	f882 0080 	strb.w	r0, [r2, #128]	; 0x80
   1eab2:	b16b      	cbz	r3, 1ead0 <am_hal_ble_config+0xf4>
   1eab4:	4e0c      	ldr	r6, [pc, #48]	; (1eae8 <am_hal_ble_config+0x10c>)
   1eab6:	18d5      	adds	r5, r2, r3
   1eab8:	2300      	movs	r3, #0
   1eaba:	f812 0b01 	ldrb.w	r0, [r2], #1
   1eabe:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   1eac2:	4295      	cmp	r5, r2
   1eac4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
   1eac8:	ea80 2303 	eor.w	r3, r0, r3, lsl #8
   1eacc:	b29b      	uxth	r3, r3
   1eace:	d1f4      	bne.n	1eaba <am_hal_ble_config+0xde>
   1ead0:	60bb      	str	r3, [r7, #8]
   1ead2:	e7cb      	b.n	1ea6c <am_hal_ble_config+0x90>
   1ead4:	01775230 	.word	0x01775230
   1ead8:	5000c000 	.word	0x5000c000
   1eadc:	40020000 	.word	0x40020000
   1eae0:	100070b8 	.word	0x100070b8
   1eae4:	100024dc 	.word	0x100024dc
   1eae8:	0002349c 	.word	0x0002349c

0001eaec <am_hal_ble_power_control>:
   1eaec:	b538      	push	{r3, r4, r5, lr}
   1eaee:	4b52      	ldr	r3, [pc, #328]	; (1ec38 <am_hal_ble_power_control+0x14c>)
   1eaf0:	68db      	ldr	r3, [r3, #12]
   1eaf2:	b2db      	uxtb	r3, r3
   1eaf4:	2b11      	cmp	r3, #17
   1eaf6:	d903      	bls.n	1eb00 <am_hal_ble_power_control+0x14>
   1eaf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1eafc:	4a4f      	ldr	r2, [pc, #316]	; (1ec3c <am_hal_ble_power_control+0x150>)
   1eafe:	63da      	str	r2, [r3, #60]	; 0x3c
   1eb00:	b128      	cbz	r0, 1eb0e <am_hal_ble_power_control+0x22>
   1eb02:	6803      	ldr	r3, [r0, #0]
   1eb04:	4a4e      	ldr	r2, [pc, #312]	; (1ec40 <am_hal_ble_power_control+0x154>)
   1eb06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1eb0a:	4293      	cmp	r3, r2
   1eb0c:	d002      	beq.n	1eb14 <am_hal_ble_power_control+0x28>
   1eb0e:	2402      	movs	r4, #2
   1eb10:	4620      	mov	r0, r4
   1eb12:	bd38      	pop	{r3, r4, r5, pc}
   1eb14:	b9f9      	cbnz	r1, 1eb56 <am_hal_ble_power_control+0x6a>
   1eb16:	4b4b      	ldr	r3, [pc, #300]	; (1ec44 <am_hal_ble_power_control+0x158>)
   1eb18:	699b      	ldr	r3, [r3, #24]
   1eb1a:	05db      	lsls	r3, r3, #23
   1eb1c:	d454      	bmi.n	1ebc8 <am_hal_ble_power_control+0xdc>
   1eb1e:	4d46      	ldr	r5, [pc, #280]	; (1ec38 <am_hal_ble_power_control+0x14c>)
   1eb20:	69ab      	ldr	r3, [r5, #24]
   1eb22:	f043 0301 	orr.w	r3, r3, #1
   1eb26:	61ab      	str	r3, [r5, #24]
   1eb28:	69ab      	ldr	r3, [r5, #24]
   1eb2a:	f003 0307 	and.w	r3, r3, #7
   1eb2e:	2b07      	cmp	r3, #7
   1eb30:	d00b      	beq.n	1eb4a <am_hal_ble_power_control+0x5e>
   1eb32:	4c45      	ldr	r4, [pc, #276]	; (1ec48 <am_hal_ble_power_control+0x15c>)
   1eb34:	e001      	b.n	1eb3a <am_hal_ble_power_control+0x4e>
   1eb36:	3c01      	subs	r4, #1
   1eb38:	d06b      	beq.n	1ec12 <am_hal_ble_power_control+0x126>
   1eb3a:	2010      	movs	r0, #16
   1eb3c:	f001 fa70 	bl	20020 <am_hal_flash_delay>
   1eb40:	69ab      	ldr	r3, [r5, #24]
   1eb42:	f003 0307 	and.w	r3, r3, #7
   1eb46:	2b07      	cmp	r3, #7
   1eb48:	d1f5      	bne.n	1eb36 <am_hal_ble_power_control+0x4a>
   1eb4a:	200e      	movs	r0, #14
   1eb4c:	f001 fcda 	bl	20504 <am_hal_pwrctrl_periph_enable>
   1eb50:	b128      	cbz	r0, 1eb5e <am_hal_ble_power_control+0x72>
   1eb52:	4c3e      	ldr	r4, [pc, #248]	; (1ec4c <am_hal_ble_power_control+0x160>)
   1eb54:	e7dc      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1eb56:	2901      	cmp	r1, #1
   1eb58:	d038      	beq.n	1ebcc <am_hal_ble_power_control+0xe0>
   1eb5a:	2407      	movs	r4, #7
   1eb5c:	e7d8      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1eb5e:	4b3c      	ldr	r3, [pc, #240]	; (1ec50 <am_hal_ble_power_control+0x164>)
   1eb60:	4935      	ldr	r1, [pc, #212]	; (1ec38 <am_hal_ble_power_control+0x14c>)
   1eb62:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1eb66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1eb6a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   1eb6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   1eb72:	f360 02df 	bfi	r2, r0, #3, #29
   1eb76:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
   1eb7a:	68cb      	ldr	r3, [r1, #12]
   1eb7c:	b2db      	uxtb	r3, r3
   1eb7e:	2b11      	cmp	r3, #17
   1eb80:	d949      	bls.n	1ec16 <am_hal_ble_power_control+0x12a>
   1eb82:	f891 3198 	ldrb.w	r3, [r1, #408]	; 0x198
   1eb86:	f043 0320 	orr.w	r3, r3, #32
   1eb8a:	f881 3198 	strb.w	r3, [r1, #408]	; 0x198
   1eb8e:	4d30      	ldr	r5, [pc, #192]	; (1ec50 <am_hal_ble_power_control+0x164>)
   1eb90:	4830      	ldr	r0, [pc, #192]	; (1ec54 <am_hal_ble_power_control+0x168>)
   1eb92:	f001 fa45 	bl	20020 <am_hal_flash_delay>
   1eb96:	f8b5 3304 	ldrh.w	r3, [r5, #772]	; 0x304
   1eb9a:	f043 0301 	orr.w	r3, r3, #1
   1eb9e:	f8a5 3304 	strh.w	r3, [r5, #772]	; 0x304
   1eba2:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1eba6:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1ebaa:	2b03      	cmp	r3, #3
   1ebac:	d00c      	beq.n	1ebc8 <am_hal_ble_power_control+0xdc>
   1ebae:	4c2a      	ldr	r4, [pc, #168]	; (1ec58 <am_hal_ble_power_control+0x16c>)
   1ebb0:	e001      	b.n	1ebb6 <am_hal_ble_power_control+0xca>
   1ebb2:	3c01      	subs	r4, #1
   1ebb4:	d039      	beq.n	1ec2a <am_hal_ble_power_control+0x13e>
   1ebb6:	2010      	movs	r0, #16
   1ebb8:	f001 fa32 	bl	20020 <am_hal_flash_delay>
   1ebbc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1ebc0:	f3c3 2302 	ubfx	r3, r3, #8, #3
   1ebc4:	2b03      	cmp	r3, #3
   1ebc6:	d1f4      	bne.n	1ebb2 <am_hal_ble_power_control+0xc6>
   1ebc8:	2400      	movs	r4, #0
   1ebca:	e7a1      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1ebcc:	4b20      	ldr	r3, [pc, #128]	; (1ec50 <am_hal_ble_power_control+0x164>)
   1ebce:	481a      	ldr	r0, [pc, #104]	; (1ec38 <am_hal_ble_power_control+0x14c>)
   1ebd0:	2200      	movs	r2, #0
   1ebd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   1ebd6:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1ebda:	f362 01df 	bfi	r1, r2, #3, #29
   1ebde:	f8c3 1410 	str.w	r1, [r3, #1040]	; 0x410
   1ebe2:	68c3      	ldr	r3, [r0, #12]
   1ebe4:	b2db      	uxtb	r3, r3
   1ebe6:	2b11      	cmp	r3, #17
   1ebe8:	d919      	bls.n	1ec1e <am_hal_ble_power_control+0x132>
   1ebea:	f890 3198 	ldrb.w	r3, [r0, #408]	; 0x198
   1ebee:	f362 1345 	bfi	r3, r2, #5, #1
   1ebf2:	f880 3198 	strb.w	r3, [r0, #408]	; 0x198
   1ebf6:	4b16      	ldr	r3, [pc, #88]	; (1ec50 <am_hal_ble_power_control+0x164>)
   1ebf8:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1ebfc:	f36f 0200 	bfc	r2, #0, #1
   1ec00:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1ec04:	200e      	movs	r0, #14
   1ec06:	f001 fca7 	bl	20558 <am_hal_pwrctrl_periph_disable>
   1ec0a:	4604      	mov	r4, r0
   1ec0c:	b178      	cbz	r0, 1ec2e <am_hal_ble_power_control+0x142>
   1ec0e:	4c13      	ldr	r4, [pc, #76]	; (1ec5c <am_hal_ble_power_control+0x170>)
   1ec10:	e77e      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1ec12:	4c13      	ldr	r4, [pc, #76]	; (1ec60 <am_hal_ble_power_control+0x174>)
   1ec14:	e77c      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1ec16:	4b13      	ldr	r3, [pc, #76]	; (1ec64 <am_hal_ble_power_control+0x178>)
   1ec18:	2204      	movs	r2, #4
   1ec1a:	601a      	str	r2, [r3, #0]
   1ec1c:	e7b7      	b.n	1eb8e <am_hal_ble_power_control+0xa2>
   1ec1e:	4a11      	ldr	r2, [pc, #68]	; (1ec64 <am_hal_ble_power_control+0x178>)
   1ec20:	6813      	ldr	r3, [r2, #0]
   1ec22:	f023 0304 	bic.w	r3, r3, #4
   1ec26:	6013      	str	r3, [r2, #0]
   1ec28:	e7e5      	b.n	1ebf6 <am_hal_ble_power_control+0x10a>
   1ec2a:	4c0f      	ldr	r4, [pc, #60]	; (1ec68 <am_hal_ble_power_control+0x17c>)
   1ec2c:	e770      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1ec2e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   1ec32:	f001 f9f5 	bl	20020 <am_hal_flash_delay>
   1ec36:	e76b      	b.n	1eb10 <am_hal_ble_power_control+0x24>
   1ec38:	40020000 	.word	0x40020000
   1ec3c:	0fc0400f 	.word	0x0fc0400f
   1ec40:	01775230 	.word	0x01775230
   1ec44:	40021000 	.word	0x40021000
   1ec48:	000186a0 	.word	0x000186a0
   1ec4c:	08000007 	.word	0x08000007
   1ec50:	5000c000 	.word	0x5000c000
   1ec54:	00013880 	.word	0x00013880
   1ec58:	000f4240 	.word	0x000f4240
   1ec5c:	08000006 	.word	0x08000006
   1ec60:	08000005 	.word	0x08000005
   1ec64:	40020198 	.word	0x40020198
   1ec68:	08000008 	.word	0x08000008

0001ec6c <am_hal_ble_patch_copy_end_apply>:
   1ec6c:	b128      	cbz	r0, 1ec7a <am_hal_ble_patch_copy_end_apply+0xe>
   1ec6e:	6803      	ldr	r3, [r0, #0]
   1ec70:	4a46      	ldr	r2, [pc, #280]	; (1ed8c <am_hal_ble_patch_copy_end_apply+0x120>)
   1ec72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ec76:	4293      	cmp	r3, r2
   1ec78:	d001      	beq.n	1ec7e <am_hal_ble_patch_copy_end_apply+0x12>
   1ec7a:	2002      	movs	r0, #2
   1ec7c:	4770      	bx	lr
   1ec7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec82:	b092      	sub	sp, #72	; 0x48
   1ec84:	2501      	movs	r5, #1
   1ec86:	2400      	movs	r4, #0
   1ec88:	4606      	mov	r6, r0
   1ec8a:	21f1      	movs	r1, #241	; 0xf1
   1ec8c:	20ee      	movs	r0, #238	; 0xee
   1ec8e:	2202      	movs	r2, #2
   1ec90:	f88d 5000 	strb.w	r5, [sp]
   1ec94:	f88d 0001 	strb.w	r0, [sp, #1]
   1ec98:	f88d 1002 	strb.w	r1, [sp, #2]
   1ec9c:	f88d 2003 	strb.w	r2, [sp, #3]
   1eca0:	f88d 4004 	strb.w	r4, [sp, #4]
   1eca4:	f88d 4005 	strb.w	r4, [sp, #5]
   1eca8:	f241 3588 	movw	r5, #5000	; 0x1388
   1ecac:	f04f 0806 	mov.w	r8, #6
   1ecb0:	461f      	mov	r7, r3
   1ecb2:	2201      	movs	r2, #1
   1ecb4:	42bb      	cmp	r3, r7
   1ecb6:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   1ecba:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1ecbe:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
   1ecc2:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
   1ecc6:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
   1ecca:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
   1ecce:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   1ecd2:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   1ecd6:	940e      	str	r4, [sp, #56]	; 0x38
   1ecd8:	940f      	str	r4, [sp, #60]	; 0x3c
   1ecda:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   1ecde:	d029      	beq.n	1ed34 <am_hal_ble_patch_copy_end_apply+0xc8>
   1ece0:	4b2b      	ldr	r3, [pc, #172]	; (1ed90 <am_hal_ble_patch_copy_end_apply+0x124>)
   1ece2:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1ece6:	0612      	lsls	r2, r2, #24
   1ece8:	d40c      	bmi.n	1ed04 <am_hal_ble_patch_copy_end_apply+0x98>
   1ecea:	4d2a      	ldr	r5, [pc, #168]	; (1ed94 <am_hal_ble_patch_copy_end_apply+0x128>)
   1ecec:	461c      	mov	r4, r3
   1ecee:	2010      	movs	r0, #16
   1ecf0:	f001 f996 	bl	20020 <am_hal_flash_delay>
   1ecf4:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   1ecf8:	0619      	lsls	r1, r3, #24
   1ecfa:	d403      	bmi.n	1ed04 <am_hal_ble_patch_copy_end_apply+0x98>
   1ecfc:	3d01      	subs	r5, #1
   1ecfe:	d1f6      	bne.n	1ecee <am_hal_ble_patch_copy_end_apply+0x82>
   1ed00:	4825      	ldr	r0, [pc, #148]	; (1ed98 <am_hal_ble_patch_copy_end_apply+0x12c>)
   1ed02:	e014      	b.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed04:	6832      	ldr	r2, [r6, #0]
   1ed06:	4921      	ldr	r1, [pc, #132]	; (1ed8c <am_hal_ble_patch_copy_end_apply+0x120>)
   1ed08:	f8cd d010 	str.w	sp, [sp, #16]
   1ed0c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ed10:	2300      	movs	r3, #0
   1ed12:	2402      	movs	r4, #2
   1ed14:	2005      	movs	r0, #5
   1ed16:	428a      	cmp	r2, r1
   1ed18:	9306      	str	r3, [sp, #24]
   1ed1a:	9305      	str	r3, [sp, #20]
   1ed1c:	9307      	str	r3, [sp, #28]
   1ed1e:	9308      	str	r3, [sp, #32]
   1ed20:	9309      	str	r3, [sp, #36]	; 0x24
   1ed22:	f88d 401a 	strb.w	r4, [sp, #26]
   1ed26:	f8ad 0018 	strh.w	r0, [sp, #24]
   1ed2a:	d00f      	beq.n	1ed4c <am_hal_ble_patch_copy_end_apply+0xe0>
   1ed2c:	2002      	movs	r0, #2
   1ed2e:	b012      	add	sp, #72	; 0x48
   1ed30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed34:	a90a      	add	r1, sp, #40	; 0x28
   1ed36:	4630      	mov	r0, r6
   1ed38:	f7ff fb62 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1ed3c:	2800      	cmp	r0, #0
   1ed3e:	d0cf      	beq.n	1ece0 <am_hal_ble_patch_copy_end_apply+0x74>
   1ed40:	3d01      	subs	r5, #1
   1ed42:	d0f4      	beq.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed44:	6833      	ldr	r3, [r6, #0]
   1ed46:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1ed4a:	e7b2      	b.n	1ecb2 <am_hal_ble_patch_copy_end_apply+0x46>
   1ed4c:	a904      	add	r1, sp, #16
   1ed4e:	4630      	mov	r0, r6
   1ed50:	f7ff fb56 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1ed54:	2800      	cmp	r0, #0
   1ed56:	d1ea      	bne.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed58:	f89d 3000 	ldrb.w	r3, [sp]
   1ed5c:	2b04      	cmp	r3, #4
   1ed5e:	f04f 02f1 	mov.w	r2, #241	; 0xf1
   1ed62:	f04f 0001 	mov.w	r0, #1
   1ed66:	d1e2      	bne.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed68:	f89d 3001 	ldrb.w	r3, [sp, #1]
   1ed6c:	2bee      	cmp	r3, #238	; 0xee
   1ed6e:	d1de      	bne.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed70:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1ed74:	429a      	cmp	r2, r3
   1ed76:	d1da      	bne.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed78:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1ed7c:	4283      	cmp	r3, r0
   1ed7e:	d1d6      	bne.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed80:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1ed84:	3000      	adds	r0, #0
   1ed86:	bf18      	it	ne
   1ed88:	2001      	movne	r0, #1
   1ed8a:	e7d0      	b.n	1ed2e <am_hal_ble_patch_copy_end_apply+0xc2>
   1ed8c:	01775230 	.word	0x01775230
   1ed90:	5000c000 	.word	0x5000c000
   1ed94:	000f4240 	.word	0x000f4240
   1ed98:	08000004 	.word	0x08000004

0001ed9c <am_hal_ble_blocking_hci_write>:
   1ed9c:	b530      	push	{r4, r5, lr}
   1ed9e:	b087      	sub	sp, #28
   1eda0:	2400      	movs	r4, #0
   1eda2:	b29b      	uxth	r3, r3
   1eda4:	2501      	movs	r5, #1
   1eda6:	f88d 1004 	strb.w	r1, [sp, #4]
   1edaa:	f8ad 3008 	strh.w	r3, [sp, #8]
   1edae:	9200      	str	r2, [sp, #0]
   1edb0:	f88d 4005 	strb.w	r4, [sp, #5]
   1edb4:	f88d 4006 	strb.w	r4, [sp, #6]
   1edb8:	f88d 4007 	strb.w	r4, [sp, #7]
   1edbc:	f88d 400b 	strb.w	r4, [sp, #11]
   1edc0:	f88d 400c 	strb.w	r4, [sp, #12]
   1edc4:	9404      	str	r4, [sp, #16]
   1edc6:	9405      	str	r4, [sp, #20]
   1edc8:	f88d 500a 	strb.w	r5, [sp, #10]
   1edcc:	b128      	cbz	r0, 1edda <am_hal_ble_blocking_hci_write+0x3e>
   1edce:	6802      	ldr	r2, [r0, #0]
   1edd0:	4c09      	ldr	r4, [pc, #36]	; (1edf8 <am_hal_ble_blocking_hci_write+0x5c>)
   1edd2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1edd6:	42a2      	cmp	r2, r4
   1edd8:	d002      	beq.n	1ede0 <am_hal_ble_blocking_hci_write+0x44>
   1edda:	2000      	movs	r0, #0
   1eddc:	b007      	add	sp, #28
   1edde:	bd30      	pop	{r4, r5, pc}
   1ede0:	b939      	cbnz	r1, 1edf2 <am_hal_ble_blocking_hci_write+0x56>
   1ede2:	2b00      	cmp	r3, #0
   1ede4:	d0f9      	beq.n	1edda <am_hal_ble_blocking_hci_write+0x3e>
   1ede6:	4669      	mov	r1, sp
   1ede8:	f7ff fb0a 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1edec:	2800      	cmp	r0, #0
   1edee:	d0f4      	beq.n	1edda <am_hal_ble_blocking_hci_write+0x3e>
   1edf0:	e7f4      	b.n	1eddc <am_hal_ble_blocking_hci_write+0x40>
   1edf2:	f88d 5007 	strb.w	r5, [sp, #7]
   1edf6:	e7f4      	b.n	1ede2 <am_hal_ble_blocking_hci_write+0x46>
   1edf8:	01775230 	.word	0x01775230

0001edfc <am_hal_ble_blocking_hci_read>:
   1edfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee00:	b089      	sub	sp, #36	; 0x24
   1ee02:	2300      	movs	r3, #0
   1ee04:	2502      	movs	r5, #2
   1ee06:	ac01      	add	r4, sp, #4
   1ee08:	9402      	str	r4, [sp, #8]
   1ee0a:	f88d 300c 	strb.w	r3, [sp, #12]
   1ee0e:	f88d 300d 	strb.w	r3, [sp, #13]
   1ee12:	f88d 300e 	strb.w	r3, [sp, #14]
   1ee16:	f88d 300f 	strb.w	r3, [sp, #15]
   1ee1a:	f88d 3013 	strb.w	r3, [sp, #19]
   1ee1e:	f88d 3014 	strb.w	r3, [sp, #20]
   1ee22:	9306      	str	r3, [sp, #24]
   1ee24:	9307      	str	r3, [sp, #28]
   1ee26:	f8ad 5010 	strh.w	r5, [sp, #16]
   1ee2a:	f88d 5012 	strb.w	r5, [sp, #18]
   1ee2e:	b128      	cbz	r0, 1ee3c <am_hal_ble_blocking_hci_read+0x40>
   1ee30:	6804      	ldr	r4, [r0, #0]
   1ee32:	4e1f      	ldr	r6, [pc, #124]	; (1eeb0 <am_hal_ble_blocking_hci_read+0xb4>)
   1ee34:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1ee38:	42b4      	cmp	r4, r6
   1ee3a:	d003      	beq.n	1ee44 <am_hal_ble_blocking_hci_read+0x48>
   1ee3c:	2000      	movs	r0, #0
   1ee3e:	b009      	add	sp, #36	; 0x24
   1ee40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ee44:	460f      	mov	r7, r1
   1ee46:	491b      	ldr	r1, [pc, #108]	; (1eeb4 <am_hal_ble_blocking_hci_read+0xb8>)
   1ee48:	f8d1 630c 	ldr.w	r6, [r1, #780]	; 0x30c
   1ee4c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
   1ee50:	4681      	mov	r9, r0
   1ee52:	4690      	mov	r8, r2
   1ee54:	b92e      	cbnz	r6, 1ee62 <am_hal_ble_blocking_hci_read+0x66>
   1ee56:	f1b8 0f00 	cmp.w	r8, #0
   1ee5a:	d0ef      	beq.n	1ee3c <am_hal_ble_blocking_hci_read+0x40>
   1ee5c:	f8c8 6000 	str.w	r6, [r8]
   1ee60:	e7ec      	b.n	1ee3c <am_hal_ble_blocking_hci_read+0x40>
   1ee62:	a902      	add	r1, sp, #8
   1ee64:	f7ff facc 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1ee68:	2800      	cmp	r0, #0
   1ee6a:	d1e8      	bne.n	1ee3e <am_hal_ble_blocking_hci_read+0x42>
   1ee6c:	f89d 0005 	ldrb.w	r0, [sp, #5]
   1ee70:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1ee74:	9702      	str	r7, [sp, #8]
   1ee76:	eb01 2100 	add.w	r1, r1, r0, lsl #8
   1ee7a:	b289      	uxth	r1, r1
   1ee7c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1ee80:	f8ad 1010 	strh.w	r1, [sp, #16]
   1ee84:	d901      	bls.n	1ee8a <am_hal_ble_blocking_hci_read+0x8e>
   1ee86:	2005      	movs	r0, #5
   1ee88:	e7d9      	b.n	1ee3e <am_hal_ble_blocking_hci_read+0x42>
   1ee8a:	f8d9 0000 	ldr.w	r0, [r9]
   1ee8e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1ee92:	42a0      	cmp	r0, r4
   1ee94:	d001      	beq.n	1ee9a <am_hal_ble_blocking_hci_read+0x9e>
   1ee96:	4628      	mov	r0, r5
   1ee98:	e7d1      	b.n	1ee3e <am_hal_ble_blocking_hci_read+0x42>
   1ee9a:	b129      	cbz	r1, 1eea8 <am_hal_ble_blocking_hci_read+0xac>
   1ee9c:	a902      	add	r1, sp, #8
   1ee9e:	4648      	mov	r0, r9
   1eea0:	f7ff faae 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1eea4:	2800      	cmp	r0, #0
   1eea6:	d1ca      	bne.n	1ee3e <am_hal_ble_blocking_hci_read+0x42>
   1eea8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   1eeac:	e7d3      	b.n	1ee56 <am_hal_ble_blocking_hci_read+0x5a>
   1eeae:	bf00      	nop
   1eeb0:	01775230 	.word	0x01775230
   1eeb4:	5000c000 	.word	0x5000c000

0001eeb8 <am_hal_ble_blocking_transfer>:
   1eeb8:	b128      	cbz	r0, 1eec6 <am_hal_ble_blocking_transfer+0xe>
   1eeba:	6803      	ldr	r3, [r0, #0]
   1eebc:	4a08      	ldr	r2, [pc, #32]	; (1eee0 <am_hal_ble_blocking_transfer+0x28>)
   1eebe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1eec2:	4293      	cmp	r3, r2
   1eec4:	d001      	beq.n	1eeca <am_hal_ble_blocking_transfer+0x12>
   1eec6:	2002      	movs	r0, #2
   1eec8:	4770      	bx	lr
   1eeca:	890b      	ldrh	r3, [r1, #8]
   1eecc:	b410      	push	{r4}
   1eece:	b11b      	cbz	r3, 1eed8 <am_hal_ble_blocking_transfer+0x20>
   1eed0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eed4:	f7ff ba94 	b.w	1e400 <am_hal_ble_blocking_transfer.part.7>
   1eed8:	4618      	mov	r0, r3
   1eeda:	f85d 4b04 	ldr.w	r4, [sp], #4
   1eede:	4770      	bx	lr
   1eee0:	01775230 	.word	0x01775230

0001eee4 <am_hal_ble_patch_apply>:
   1eee4:	b128      	cbz	r0, 1eef2 <am_hal_ble_patch_apply+0xe>
   1eee6:	6803      	ldr	r3, [r0, #0]
   1eee8:	4aae      	ldr	r2, [pc, #696]	; (1f1a4 <am_hal_ble_patch_apply+0x2c0>)
   1eeea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1eeee:	4293      	cmp	r3, r2
   1eef0:	d002      	beq.n	1eef8 <am_hal_ble_patch_apply+0x14>
   1eef2:	2302      	movs	r3, #2
   1eef4:	4618      	mov	r0, r3
   1eef6:	4770      	bx	lr
   1eef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eefc:	684a      	ldr	r2, [r1, #4]
   1eefe:	680d      	ldr	r5, [r1, #0]
   1ef00:	b095      	sub	sp, #84	; 0x54
   1ef02:	2701      	movs	r7, #1
   1ef04:	4604      	mov	r4, r0
   1ef06:	460e      	mov	r6, r1
   1ef08:	f88d 200c 	strb.w	r2, [sp, #12]
   1ef0c:	20f1      	movs	r0, #241	; 0xf1
   1ef0e:	0a12      	lsrs	r2, r2, #8
   1ef10:	2102      	movs	r1, #2
   1ef12:	f88d 7008 	strb.w	r7, [sp, #8]
   1ef16:	f88d 5009 	strb.w	r5, [sp, #9]
   1ef1a:	f88d 200d 	strb.w	r2, [sp, #13]
   1ef1e:	f88d 000a 	strb.w	r0, [sp, #10]
   1ef22:	f88d 100b 	strb.w	r1, [sp, #11]
   1ef26:	f241 3788 	movw	r7, #5000	; 0x1388
   1ef2a:	2500      	movs	r5, #0
   1ef2c:	f04f 0906 	mov.w	r9, #6
   1ef30:	4698      	mov	r8, r3
   1ef32:	2201      	movs	r2, #1
   1ef34:	a902      	add	r1, sp, #8
   1ef36:	4543      	cmp	r3, r8
   1ef38:	910c      	str	r1, [sp, #48]	; 0x30
   1ef3a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1ef3e:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
   1ef42:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
   1ef46:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   1ef4a:	f8ad 9038 	strh.w	r9, [sp, #56]	; 0x38
   1ef4e:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
   1ef52:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
   1ef56:	9510      	str	r5, [sp, #64]	; 0x40
   1ef58:	9511      	str	r5, [sp, #68]	; 0x44
   1ef5a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1ef5e:	d02b      	beq.n	1efb8 <am_hal_ble_patch_apply+0xd4>
   1ef60:	4b91      	ldr	r3, [pc, #580]	; (1f1a8 <am_hal_ble_patch_apply+0x2c4>)
   1ef62:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   1ef66:	0612      	lsls	r2, r2, #24
   1ef68:	d40c      	bmi.n	1ef84 <am_hal_ble_patch_apply+0xa0>
   1ef6a:	4f90      	ldr	r7, [pc, #576]	; (1f1ac <am_hal_ble_patch_apply+0x2c8>)
   1ef6c:	461d      	mov	r5, r3
   1ef6e:	2010      	movs	r0, #16
   1ef70:	f001 f856 	bl	20020 <am_hal_flash_delay>
   1ef74:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1ef78:	061b      	lsls	r3, r3, #24
   1ef7a:	d403      	bmi.n	1ef84 <am_hal_ble_patch_apply+0xa0>
   1ef7c:	3f01      	subs	r7, #1
   1ef7e:	d1f6      	bne.n	1ef6e <am_hal_ble_patch_apply+0x8a>
   1ef80:	4b8b      	ldr	r3, [pc, #556]	; (1f1b0 <am_hal_ble_patch_apply+0x2cc>)
   1ef82:	e015      	b.n	1efb0 <am_hal_ble_patch_apply+0xcc>
   1ef84:	6825      	ldr	r5, [r4, #0]
   1ef86:	4a87      	ldr	r2, [pc, #540]	; (1f1a4 <am_hal_ble_patch_apply+0x2c0>)
   1ef88:	ab02      	add	r3, sp, #8
   1ef8a:	9306      	str	r3, [sp, #24]
   1ef8c:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
   1ef90:	2300      	movs	r3, #0
   1ef92:	9308      	str	r3, [sp, #32]
   1ef94:	2102      	movs	r1, #2
   1ef96:	9307      	str	r3, [sp, #28]
   1ef98:	9309      	str	r3, [sp, #36]	; 0x24
   1ef9a:	930a      	str	r3, [sp, #40]	; 0x28
   1ef9c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ef9e:	4295      	cmp	r5, r2
   1efa0:	f04f 0305 	mov.w	r3, #5
   1efa4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1efa8:	f8ad 3020 	strh.w	r3, [sp, #32]
   1efac:	d011      	beq.n	1efd2 <am_hal_ble_patch_apply+0xee>
   1efae:	2302      	movs	r3, #2
   1efb0:	4618      	mov	r0, r3
   1efb2:	b015      	add	sp, #84	; 0x54
   1efb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efb8:	a90c      	add	r1, sp, #48	; 0x30
   1efba:	4620      	mov	r0, r4
   1efbc:	f7ff fa20 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1efc0:	4603      	mov	r3, r0
   1efc2:	2800      	cmp	r0, #0
   1efc4:	d0cc      	beq.n	1ef60 <am_hal_ble_patch_apply+0x7c>
   1efc6:	3f01      	subs	r7, #1
   1efc8:	d0f2      	beq.n	1efb0 <am_hal_ble_patch_apply+0xcc>
   1efca:	6823      	ldr	r3, [r4, #0]
   1efcc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1efd0:	e7af      	b.n	1ef32 <am_hal_ble_patch_apply+0x4e>
   1efd2:	a906      	add	r1, sp, #24
   1efd4:	4620      	mov	r0, r4
   1efd6:	f7ff fa13 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1efda:	4603      	mov	r3, r0
   1efdc:	2800      	cmp	r0, #0
   1efde:	d1e7      	bne.n	1efb0 <am_hal_ble_patch_apply+0xcc>
   1efe0:	2304      	movs	r3, #4
   1efe2:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1efe6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1efea:	23f1      	movs	r3, #241	; 0xf1
   1efec:	7832      	ldrb	r2, [r6, #0]
   1efee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1eff2:	2904      	cmp	r1, #4
   1eff4:	f04f 0301 	mov.w	r3, #1
   1eff8:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   1effc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1f000:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1f004:	f040 811a 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f008:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1f00c:	b2d3      	uxtb	r3, r2
   1f00e:	4299      	cmp	r1, r3
   1f010:	f040 8114 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f014:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1f018:	2bf1      	cmp	r3, #241	; 0xf1
   1f01a:	f040 810f 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f01e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1f022:	2b01      	cmp	r3, #1
   1f024:	f040 810a 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f028:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f02c:	2b00      	cmp	r3, #0
   1f02e:	f040 8105 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f032:	f8d6 a004 	ldr.w	sl, [r6, #4]
   1f036:	f1ba 0f00 	cmp.w	sl, #0
   1f03a:	f000 8091 	beq.w	1f160 <am_hal_ble_patch_apply+0x27c>
   1f03e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1f1b8 <am_hal_ble_patch_apply+0x2d4>
   1f042:	4f59      	ldr	r7, [pc, #356]	; (1f1a8 <am_hal_ble_patch_apply+0x2c4>)
   1f044:	9501      	str	r5, [sp, #4]
   1f046:	469b      	mov	fp, r3
   1f048:	2201      	movs	r2, #1
   1f04a:	f889 2000 	strb.w	r2, [r9]
   1f04e:	6833      	ldr	r3, [r6, #0]
   1f050:	f889 3001 	strb.w	r3, [r9, #1]
   1f054:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   1f058:	46d0      	mov	r8, sl
   1f05a:	f04f 03f2 	mov.w	r3, #242	; 0xf2
   1f05e:	bf28      	it	cs
   1f060:	f04f 0880 	movcs.w	r8, #128	; 0x80
   1f064:	f889 3002 	strb.w	r3, [r9, #2]
   1f068:	f889 8003 	strb.w	r8, [r9, #3]
   1f06c:	68f1      	ldr	r1, [r6, #12]
   1f06e:	4851      	ldr	r0, [pc, #324]	; (1f1b4 <am_hal_ble_patch_apply+0x2d0>)
   1f070:	f8cd 9018 	str.w	r9, [sp, #24]
   1f074:	2300      	movs	r3, #0
   1f076:	f02b 0503 	bic.w	r5, fp, #3
   1f07a:	9308      	str	r3, [sp, #32]
   1f07c:	4429      	add	r1, r5
   1f07e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1f082:	f108 0504 	add.w	r5, r8, #4
   1f086:	4642      	mov	r2, r8
   1f088:	9307      	str	r3, [sp, #28]
   1f08a:	9309      	str	r3, [sp, #36]	; 0x24
   1f08c:	930a      	str	r3, [sp, #40]	; 0x28
   1f08e:	930b      	str	r3, [sp, #44]	; 0x2c
   1f090:	f8ad 5020 	strh.w	r5, [sp, #32]
   1f094:	f7ed f864 	bl	c160 <memcpy>
   1f098:	6823      	ldr	r3, [r4, #0]
   1f09a:	9a01      	ldr	r2, [sp, #4]
   1f09c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f0a0:	4293      	cmp	r3, r2
   1f0a2:	d184      	bne.n	1efae <am_hal_ble_patch_apply+0xca>
   1f0a4:	a906      	add	r1, sp, #24
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	f7ff f9aa 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f0ac:	4603      	mov	r3, r0
   1f0ae:	2800      	cmp	r0, #0
   1f0b0:	f47f af7e 	bne.w	1efb0 <am_hal_ble_patch_apply+0xcc>
   1f0b4:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1f0b8:	061d      	lsls	r5, r3, #24
   1f0ba:	d40b      	bmi.n	1f0d4 <am_hal_ble_patch_apply+0x1f0>
   1f0bc:	4d3b      	ldr	r5, [pc, #236]	; (1f1ac <am_hal_ble_patch_apply+0x2c8>)
   1f0be:	e002      	b.n	1f0c6 <am_hal_ble_patch_apply+0x1e2>
   1f0c0:	3d01      	subs	r5, #1
   1f0c2:	f43f af5d 	beq.w	1ef80 <am_hal_ble_patch_apply+0x9c>
   1f0c6:	2010      	movs	r0, #16
   1f0c8:	f000 ffaa 	bl	20020 <am_hal_flash_delay>
   1f0cc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
   1f0d0:	0618      	lsls	r0, r3, #24
   1f0d2:	d5f5      	bpl.n	1f0c0 <am_hal_ble_patch_apply+0x1dc>
   1f0d4:	ab02      	add	r3, sp, #8
   1f0d6:	9306      	str	r3, [sp, #24]
   1f0d8:	2300      	movs	r3, #0
   1f0da:	9308      	str	r3, [sp, #32]
   1f0dc:	6822      	ldr	r2, [r4, #0]
   1f0de:	9307      	str	r3, [sp, #28]
   1f0e0:	9309      	str	r3, [sp, #36]	; 0x24
   1f0e2:	930a      	str	r3, [sp, #40]	; 0x28
   1f0e4:	930b      	str	r3, [sp, #44]	; 0x2c
   1f0e6:	2305      	movs	r3, #5
   1f0e8:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f0ec:	9b01      	ldr	r3, [sp, #4]
   1f0ee:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1f0f2:	2102      	movs	r1, #2
   1f0f4:	429a      	cmp	r2, r3
   1f0f6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1f0fa:	f47f af58 	bne.w	1efae <am_hal_ble_patch_apply+0xca>
   1f0fe:	a906      	add	r1, sp, #24
   1f100:	4620      	mov	r0, r4
   1f102:	f7ff f97d 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f106:	4603      	mov	r3, r0
   1f108:	2800      	cmp	r0, #0
   1f10a:	f47f af51 	bne.w	1efb0 <am_hal_ble_patch_apply+0xcc>
   1f10e:	2304      	movs	r3, #4
   1f110:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1f114:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1f118:	23f2      	movs	r3, #242	; 0xf2
   1f11a:	7832      	ldrb	r2, [r6, #0]
   1f11c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1f120:	2904      	cmp	r1, #4
   1f122:	f04f 0301 	mov.w	r3, #1
   1f126:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
   1f12a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1f12e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1f132:	f040 8083 	bne.w	1f23c <am_hal_ble_patch_apply+0x358>
   1f136:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1f13a:	4293      	cmp	r3, r2
   1f13c:	d17e      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f13e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1f142:	2bf2      	cmp	r3, #242	; 0xf2
   1f144:	d17a      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f146:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1f14a:	2b01      	cmp	r3, #1
   1f14c:	d176      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f14e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f152:	2b00      	cmp	r3, #0
   1f154:	d172      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f156:	ebba 0a08 	subs.w	sl, sl, r8
   1f15a:	44c3      	add	fp, r8
   1f15c:	f47f af74 	bne.w	1f048 <am_hal_ble_patch_apply+0x164>
   1f160:	68b3      	ldr	r3, [r6, #8]
   1f162:	f88d 2009 	strb.w	r2, [sp, #9]
   1f166:	2101      	movs	r1, #1
   1f168:	0a1a      	lsrs	r2, r3, #8
   1f16a:	20f3      	movs	r0, #243	; 0xf3
   1f16c:	f88d 300c 	strb.w	r3, [sp, #12]
   1f170:	f88d 200d 	strb.w	r2, [sp, #13]
   1f174:	2306      	movs	r3, #6
   1f176:	f88d 1008 	strb.w	r1, [sp, #8]
   1f17a:	f88d 000a 	strb.w	r0, [sp, #10]
   1f17e:	2502      	movs	r5, #2
   1f180:	aa02      	add	r2, sp, #8
   1f182:	2100      	movs	r1, #0
   1f184:	4620      	mov	r0, r4
   1f186:	f88d 500b 	strb.w	r5, [sp, #11]
   1f18a:	f7ff fe07 	bl	1ed9c <am_hal_ble_blocking_hci_write>
   1f18e:	4603      	mov	r3, r0
   1f190:	2800      	cmp	r0, #0
   1f192:	d153      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f194:	4f04      	ldr	r7, [pc, #16]	; (1f1a8 <am_hal_ble_patch_apply+0x2c4>)
   1f196:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   1f19a:	0611      	lsls	r1, r2, #24
   1f19c:	d41b      	bmi.n	1f1d6 <am_hal_ble_patch_apply+0x2f2>
   1f19e:	4d03      	ldr	r5, [pc, #12]	; (1f1ac <am_hal_ble_patch_apply+0x2c8>)
   1f1a0:	e00f      	b.n	1f1c2 <am_hal_ble_patch_apply+0x2de>
   1f1a2:	bf00      	nop
   1f1a4:	01775230 	.word	0x01775230
   1f1a8:	5000c000 	.word	0x5000c000
   1f1ac:	000f4240 	.word	0x000f4240
   1f1b0:	08000004 	.word	0x08000004
   1f1b4:	10007104 	.word	0x10007104
   1f1b8:	10007100 	.word	0x10007100
   1f1bc:	3d01      	subs	r5, #1
   1f1be:	f43f aedf 	beq.w	1ef80 <am_hal_ble_patch_apply+0x9c>
   1f1c2:	2010      	movs	r0, #16
   1f1c4:	9301      	str	r3, [sp, #4]
   1f1c6:	f000 ff2b 	bl	20020 <am_hal_flash_delay>
   1f1ca:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
   1f1ce:	9b01      	ldr	r3, [sp, #4]
   1f1d0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f1d4:	d0f2      	beq.n	1f1bc <am_hal_ble_patch_apply+0x2d8>
   1f1d6:	2200      	movs	r2, #0
   1f1d8:	9301      	str	r3, [sp, #4]
   1f1da:	4620      	mov	r0, r4
   1f1dc:	ab02      	add	r3, sp, #8
   1f1de:	a906      	add	r1, sp, #24
   1f1e0:	2502      	movs	r5, #2
   1f1e2:	2405      	movs	r4, #5
   1f1e4:	9208      	str	r2, [sp, #32]
   1f1e6:	9306      	str	r3, [sp, #24]
   1f1e8:	9207      	str	r2, [sp, #28]
   1f1ea:	9209      	str	r2, [sp, #36]	; 0x24
   1f1ec:	920a      	str	r2, [sp, #40]	; 0x28
   1f1ee:	920b      	str	r2, [sp, #44]	; 0x2c
   1f1f0:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
   1f1f4:	f8ad 4020 	strh.w	r4, [sp, #32]
   1f1f8:	f7ff fe5e 	bl	1eeb8 <am_hal_ble_blocking_transfer>
   1f1fc:	9b01      	ldr	r3, [sp, #4]
   1f1fe:	b9f8      	cbnz	r0, 1f240 <am_hal_ble_patch_apply+0x35c>
   1f200:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1f204:	6831      	ldr	r1, [r6, #0]
   1f206:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   1f20a:	2a04      	cmp	r2, #4
   1f20c:	f04f 00f3 	mov.w	r0, #243	; 0xf3
   1f210:	f04f 0101 	mov.w	r1, #1
   1f214:	d112      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f216:	f89d 4031 	ldrb.w	r4, [sp, #49]	; 0x31
   1f21a:	f89d 2009 	ldrb.w	r2, [sp, #9]
   1f21e:	4294      	cmp	r4, r2
   1f220:	d10c      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f222:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1f226:	4290      	cmp	r0, r2
   1f228:	d108      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f22a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1f22e:	4291      	cmp	r1, r2
   1f230:	d104      	bne.n	1f23c <am_hal_ble_patch_apply+0x358>
   1f232:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1f236:	2a00      	cmp	r2, #0
   1f238:	f43f aeba 	beq.w	1efb0 <am_hal_ble_patch_apply+0xcc>
   1f23c:	2301      	movs	r3, #1
   1f23e:	e6b7      	b.n	1efb0 <am_hal_ble_patch_apply+0xcc>
   1f240:	4603      	mov	r3, r0
   1f242:	e6b5      	b.n	1efb0 <am_hal_ble_patch_apply+0xcc>

0001f244 <am_hal_ble_int_enable>:
   1f244:	b128      	cbz	r0, 1f252 <am_hal_ble_int_enable+0xe>
   1f246:	6803      	ldr	r3, [r0, #0]
   1f248:	4a0c      	ldr	r2, [pc, #48]	; (1f27c <am_hal_ble_int_enable+0x38>)
   1f24a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f24e:	4293      	cmp	r3, r2
   1f250:	d001      	beq.n	1f256 <am_hal_ble_int_enable+0x12>
   1f252:	2002      	movs	r0, #2
   1f254:	4770      	bx	lr
   1f256:	b510      	push	{r4, lr}
   1f258:	b082      	sub	sp, #8
   1f25a:	460c      	mov	r4, r1
   1f25c:	f001 f8b4 	bl	203c8 <am_hal_interrupt_master_disable>
   1f260:	4b07      	ldr	r3, [pc, #28]	; (1f280 <am_hal_ble_int_enable+0x3c>)
   1f262:	9001      	str	r0, [sp, #4]
   1f264:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   1f268:	4321      	orrs	r1, r4
   1f26a:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
   1f26e:	9801      	ldr	r0, [sp, #4]
   1f270:	f001 f8ae 	bl	203d0 <am_hal_interrupt_master_set>
   1f274:	2000      	movs	r0, #0
   1f276:	b002      	add	sp, #8
   1f278:	bd10      	pop	{r4, pc}
   1f27a:	bf00      	nop
   1f27c:	01775230 	.word	0x01775230
   1f280:	5000c000 	.word	0x5000c000

0001f284 <am_hal_ble_int_status>:
   1f284:	4b05      	ldr	r3, [pc, #20]	; (1f29c <am_hal_ble_int_status+0x18>)
   1f286:	b911      	cbnz	r1, 1f28e <am_hal_ble_int_status+0xa>
   1f288:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   1f28c:	4770      	bx	lr
   1f28e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   1f292:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   1f296:	4018      	ands	r0, r3
   1f298:	4770      	bx	lr
   1f29a:	bf00      	nop
   1f29c:	5000c000 	.word	0x5000c000

0001f2a0 <am_hal_ble_int_clear>:
   1f2a0:	b128      	cbz	r0, 1f2ae <am_hal_ble_int_clear+0xe>
   1f2a2:	6803      	ldr	r3, [r0, #0]
   1f2a4:	4a05      	ldr	r2, [pc, #20]	; (1f2bc <am_hal_ble_int_clear+0x1c>)
   1f2a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f2aa:	4293      	cmp	r3, r2
   1f2ac:	d001      	beq.n	1f2b2 <am_hal_ble_int_clear+0x12>
   1f2ae:	2002      	movs	r0, #2
   1f2b0:	4770      	bx	lr
   1f2b2:	4b03      	ldr	r3, [pc, #12]	; (1f2c0 <am_hal_ble_int_clear+0x20>)
   1f2b4:	2000      	movs	r0, #0
   1f2b6:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
   1f2ba:	4770      	bx	lr
   1f2bc:	01775230 	.word	0x01775230
   1f2c0:	5000c000 	.word	0x5000c000

0001f2c4 <am_hal_ble_plf_reg_read>:
   1f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2c8:	b092      	sub	sp, #72	; 0x48
   1f2ca:	0a0e      	lsrs	r6, r1, #8
   1f2cc:	0c0d      	lsrs	r5, r1, #16
   1f2ce:	2300      	movs	r3, #0
   1f2d0:	ea4f 6e11 	mov.w	lr, r1, lsr #24
   1f2d4:	f88d 100c 	strb.w	r1, [sp, #12]
   1f2d8:	f88d 600d 	strb.w	r6, [sp, #13]
   1f2dc:	f88d 500e 	strb.w	r5, [sp, #14]
   1f2e0:	2401      	movs	r4, #1
   1f2e2:	2702      	movs	r7, #2
   1f2e4:	26fd      	movs	r6, #253	; 0xfd
   1f2e6:	2504      	movs	r5, #4
   1f2e8:	4952      	ldr	r1, [pc, #328]	; (1f434 <am_hal_ble_plf_reg_read+0x170>)
   1f2ea:	f88d e00f 	strb.w	lr, [sp, #15]
   1f2ee:	f88d 7009 	strb.w	r7, [sp, #9]
   1f2f2:	f88d 500b 	strb.w	r5, [sp, #11]
   1f2f6:	930a      	str	r3, [sp, #40]	; 0x28
   1f2f8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f2fa:	930c      	str	r3, [sp, #48]	; 0x30
   1f2fc:	f88d 4008 	strb.w	r4, [sp, #8]
   1f300:	f88d 600a 	strb.w	r6, [sp, #10]
   1f304:	f10d 0e08 	add.w	lr, sp, #8
   1f308:	2508      	movs	r5, #8
   1f30a:	f8d1 6220 	ldr.w	r6, [r1, #544]	; 0x220
   1f30e:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
   1f312:	4617      	mov	r7, r2
   1f314:	f88d 3014 	strb.w	r3, [sp, #20]
   1f318:	f88d 3015 	strb.w	r3, [sp, #21]
   1f31c:	f88d 3016 	strb.w	r3, [sp, #22]
   1f320:	f88d 3017 	strb.w	r3, [sp, #23]
   1f324:	f88d 401a 	strb.w	r4, [sp, #26]
   1f328:	f88d 301b 	strb.w	r3, [sp, #27]
   1f32c:	f88d 301c 	strb.w	r3, [sp, #28]
   1f330:	9308      	str	r3, [sp, #32]
   1f332:	9309      	str	r3, [sp, #36]	; 0x24
   1f334:	f8cd e010 	str.w	lr, [sp, #16]
   1f338:	f8ad 5018 	strh.w	r5, [sp, #24]
   1f33c:	4680      	mov	r8, r0
   1f33e:	b128      	cbz	r0, 1f34c <am_hal_ble_plf_reg_read+0x88>
   1f340:	6803      	ldr	r3, [r0, #0]
   1f342:	4a3d      	ldr	r2, [pc, #244]	; (1f438 <am_hal_ble_plf_reg_read+0x174>)
   1f344:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f348:	4293      	cmp	r3, r2
   1f34a:	d06e      	beq.n	1f42a <am_hal_ble_plf_reg_read+0x166>
   1f34c:	4d39      	ldr	r5, [pc, #228]	; (1f434 <am_hal_ble_plf_reg_read+0x170>)
   1f34e:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1f352:	f043 0302 	orr.w	r3, r3, #2
   1f356:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1f35a:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1f35e:	0619      	lsls	r1, r3, #24
   1f360:	d40a      	bmi.n	1f378 <am_hal_ble_plf_reg_read+0xb4>
   1f362:	4c36      	ldr	r4, [pc, #216]	; (1f43c <am_hal_ble_plf_reg_read+0x178>)
   1f364:	e001      	b.n	1f36a <am_hal_ble_plf_reg_read+0xa6>
   1f366:	3c01      	subs	r4, #1
   1f368:	d05b      	beq.n	1f422 <am_hal_ble_plf_reg_read+0x15e>
   1f36a:	2010      	movs	r0, #16
   1f36c:	f000 fe58 	bl	20020 <am_hal_flash_delay>
   1f370:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1f374:	061a      	lsls	r2, r3, #24
   1f376:	d5f6      	bpl.n	1f366 <am_hal_ble_plf_reg_read+0xa2>
   1f378:	2300      	movs	r3, #0
   1f37a:	2202      	movs	r2, #2
   1f37c:	a901      	add	r1, sp, #4
   1f37e:	9104      	str	r1, [sp, #16]
   1f380:	f88d 3014 	strb.w	r3, [sp, #20]
   1f384:	f88d 3015 	strb.w	r3, [sp, #21]
   1f388:	f88d 3016 	strb.w	r3, [sp, #22]
   1f38c:	f88d 3017 	strb.w	r3, [sp, #23]
   1f390:	f88d 301b 	strb.w	r3, [sp, #27]
   1f394:	f88d 301c 	strb.w	r3, [sp, #28]
   1f398:	9308      	str	r3, [sp, #32]
   1f39a:	9309      	str	r3, [sp, #36]	; 0x24
   1f39c:	f8ad 2018 	strh.w	r2, [sp, #24]
   1f3a0:	f88d 201a 	strb.w	r2, [sp, #26]
   1f3a4:	f1b8 0f00 	cmp.w	r8, #0
   1f3a8:	d006      	beq.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f3aa:	f8d8 4000 	ldr.w	r4, [r8]
   1f3ae:	4b22      	ldr	r3, [pc, #136]	; (1f438 <am_hal_ble_plf_reg_read+0x174>)
   1f3b0:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1f3b4:	429c      	cmp	r4, r3
   1f3b6:	d00e      	beq.n	1f3d6 <am_hal_ble_plf_reg_read+0x112>
   1f3b8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1f3bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f3be:	4a1d      	ldr	r2, [pc, #116]	; (1f434 <am_hal_ble_plf_reg_read+0x170>)
   1f3c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1f3c4:	2000      	movs	r0, #0
   1f3c6:	603b      	str	r3, [r7, #0]
   1f3c8:	f8c2 6228 	str.w	r6, [r2, #552]	; 0x228
   1f3cc:	f8c2 6220 	str.w	r6, [r2, #544]	; 0x220
   1f3d0:	b012      	add	sp, #72	; 0x48
   1f3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f3d6:	4b17      	ldr	r3, [pc, #92]	; (1f434 <am_hal_ble_plf_reg_read+0x170>)
   1f3d8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1f3dc:	061b      	lsls	r3, r3, #24
   1f3de:	d5eb      	bpl.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f3e0:	a904      	add	r1, sp, #16
   1f3e2:	4640      	mov	r0, r8
   1f3e4:	f7ff f80c 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f3e8:	2800      	cmp	r0, #0
   1f3ea:	d1e5      	bne.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f3ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1f3f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1f3f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1f3f8:	b29b      	uxth	r3, r3
   1f3fa:	aa0a      	add	r2, sp, #40	; 0x28
   1f3fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1f400:	f8ad 3018 	strh.w	r3, [sp, #24]
   1f404:	9204      	str	r2, [sp, #16]
   1f406:	d8d7      	bhi.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f408:	f8d8 2000 	ldr.w	r2, [r8]
   1f40c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1f410:	42a2      	cmp	r2, r4
   1f412:	d1d1      	bne.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f414:	2b00      	cmp	r3, #0
   1f416:	d0cf      	beq.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f418:	a904      	add	r1, sp, #16
   1f41a:	4640      	mov	r0, r8
   1f41c:	f7fe fff0 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f420:	e7ca      	b.n	1f3b8 <am_hal_ble_plf_reg_read+0xf4>
   1f422:	4807      	ldr	r0, [pc, #28]	; (1f440 <am_hal_ble_plf_reg_read+0x17c>)
   1f424:	b012      	add	sp, #72	; 0x48
   1f426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f42a:	a904      	add	r1, sp, #16
   1f42c:	f7fe ffe8 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f430:	e78c      	b.n	1f34c <am_hal_ble_plf_reg_read+0x88>
   1f432:	bf00      	nop
   1f434:	5000c000 	.word	0x5000c000
   1f438:	01775230 	.word	0x01775230
   1f43c:	0007a120 	.word	0x0007a120
   1f440:	08000004 	.word	0x08000004

0001f444 <am_hal_ble_plf_reg_write>:
   1f444:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f446:	b091      	sub	sp, #68	; 0x44
   1f448:	0c0f      	lsrs	r7, r1, #16
   1f44a:	0e0e      	lsrs	r6, r1, #24
   1f44c:	0c14      	lsrs	r4, r2, #16
   1f44e:	0e13      	lsrs	r3, r2, #24
   1f450:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   1f454:	0a15      	lsrs	r5, r2, #8
   1f456:	f88d 2008 	strb.w	r2, [sp, #8]
   1f45a:	f88d 6007 	strb.w	r6, [sp, #7]
   1f45e:	f88d 400a 	strb.w	r4, [sp, #10]
   1f462:	f88d 300b 	strb.w	r3, [sp, #11]
   1f466:	f88d 1004 	strb.w	r1, [sp, #4]
   1f46a:	f88d e005 	strb.w	lr, [sp, #5]
   1f46e:	f88d 7006 	strb.w	r7, [sp, #6]
   1f472:	f88d 5009 	strb.w	r5, [sp, #9]
   1f476:	ab01      	add	r3, sp, #4
   1f478:	4606      	mov	r6, r0
   1f47a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1f47e:	ab04      	add	r3, sp, #16
   1f480:	e883 0003 	stmia.w	r3, {r0, r1}
   1f484:	4a47      	ldr	r2, [pc, #284]	; (1f5a4 <am_hal_ble_plf_reg_write+0x160>)
   1f486:	4b48      	ldr	r3, [pc, #288]	; (1f5a8 <am_hal_ble_plf_reg_write+0x164>)
   1f488:	9303      	str	r3, [sp, #12]
   1f48a:	ac03      	add	r4, sp, #12
   1f48c:	2300      	movs	r3, #0
   1f48e:	200c      	movs	r0, #12
   1f490:	2101      	movs	r1, #1
   1f492:	f8d2 7220 	ldr.w	r7, [r2, #544]	; 0x220
   1f496:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
   1f49a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1f49e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   1f4a2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   1f4a6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1f4aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1f4ae:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1f4b2:	930e      	str	r3, [sp, #56]	; 0x38
   1f4b4:	930f      	str	r3, [sp, #60]	; 0x3c
   1f4b6:	940a      	str	r4, [sp, #40]	; 0x28
   1f4b8:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
   1f4bc:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
   1f4c0:	b12e      	cbz	r6, 1f4ce <am_hal_ble_plf_reg_write+0x8a>
   1f4c2:	6833      	ldr	r3, [r6, #0]
   1f4c4:	4a39      	ldr	r2, [pc, #228]	; (1f5ac <am_hal_ble_plf_reg_write+0x168>)
   1f4c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f4ca:	4293      	cmp	r3, r2
   1f4cc:	d064      	beq.n	1f598 <am_hal_ble_plf_reg_write+0x154>
   1f4ce:	4d35      	ldr	r5, [pc, #212]	; (1f5a4 <am_hal_ble_plf_reg_write+0x160>)
   1f4d0:	f8d5 3410 	ldr.w	r3, [r5, #1040]	; 0x410
   1f4d4:	f043 0302 	orr.w	r3, r3, #2
   1f4d8:	f8c5 3410 	str.w	r3, [r5, #1040]	; 0x410
   1f4dc:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1f4e0:	0619      	lsls	r1, r3, #24
   1f4e2:	bf58      	it	pl
   1f4e4:	f24c 3450 	movwpl	r4, #50000	; 0xc350
   1f4e8:	d502      	bpl.n	1f4f0 <am_hal_ble_plf_reg_write+0xac>
   1f4ea:	e008      	b.n	1f4fe <am_hal_ble_plf_reg_write+0xba>
   1f4ec:	3c01      	subs	r4, #1
   1f4ee:	d050      	beq.n	1f592 <am_hal_ble_plf_reg_write+0x14e>
   1f4f0:	2010      	movs	r0, #16
   1f4f2:	f000 fd95 	bl	20020 <am_hal_flash_delay>
   1f4f6:	f8d5 330c 	ldr.w	r3, [r5, #780]	; 0x30c
   1f4fa:	061a      	lsls	r2, r3, #24
   1f4fc:	d5f6      	bpl.n	1f4ec <am_hal_ble_plf_reg_write+0xa8>
   1f4fe:	2300      	movs	r3, #0
   1f500:	2202      	movs	r2, #2
   1f502:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
   1f506:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1f50a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   1f50e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
   1f512:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   1f516:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   1f51a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1f51e:	930e      	str	r3, [sp, #56]	; 0x38
   1f520:	930f      	str	r3, [sp, #60]	; 0x3c
   1f522:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1f526:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   1f52a:	b12e      	cbz	r6, 1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f52c:	6834      	ldr	r4, [r6, #0]
   1f52e:	4b1f      	ldr	r3, [pc, #124]	; (1f5ac <am_hal_ble_plf_reg_write+0x168>)
   1f530:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
   1f534:	429c      	cmp	r4, r3
   1f536:	d007      	beq.n	1f548 <am_hal_ble_plf_reg_write+0x104>
   1f538:	4b1a      	ldr	r3, [pc, #104]	; (1f5a4 <am_hal_ble_plf_reg_write+0x160>)
   1f53a:	2000      	movs	r0, #0
   1f53c:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
   1f540:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
   1f544:	b011      	add	sp, #68	; 0x44
   1f546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f548:	4b16      	ldr	r3, [pc, #88]	; (1f5a4 <am_hal_ble_plf_reg_write+0x160>)
   1f54a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1f54e:	061b      	lsls	r3, r3, #24
   1f550:	d5f2      	bpl.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f552:	a90a      	add	r1, sp, #40	; 0x28
   1f554:	4630      	mov	r0, r6
   1f556:	f7fe ff53 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f55a:	2800      	cmp	r0, #0
   1f55c:	d1ec      	bne.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f55e:	f89d 2001 	ldrb.w	r2, [sp, #1]
   1f562:	f89d 3000 	ldrb.w	r3, [sp]
   1f566:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1f56a:	b29b      	uxth	r3, r3
   1f56c:	aa06      	add	r2, sp, #24
   1f56e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1f572:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1f576:	920a      	str	r2, [sp, #40]	; 0x28
   1f578:	d8de      	bhi.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f57a:	6832      	ldr	r2, [r6, #0]
   1f57c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1f580:	42a2      	cmp	r2, r4
   1f582:	d1d9      	bne.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f584:	2b00      	cmp	r3, #0
   1f586:	d0d7      	beq.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f588:	a90a      	add	r1, sp, #40	; 0x28
   1f58a:	4630      	mov	r0, r6
   1f58c:	f7fe ff38 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f590:	e7d2      	b.n	1f538 <am_hal_ble_plf_reg_write+0xf4>
   1f592:	4807      	ldr	r0, [pc, #28]	; (1f5b0 <am_hal_ble_plf_reg_write+0x16c>)
   1f594:	b011      	add	sp, #68	; 0x44
   1f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f598:	a90a      	add	r1, sp, #40	; 0x28
   1f59a:	4630      	mov	r0, r6
   1f59c:	f7fe ff30 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f5a0:	e795      	b.n	1f4ce <am_hal_ble_plf_reg_write+0x8a>
   1f5a2:	bf00      	nop
   1f5a4:	5000c000 	.word	0x5000c000
   1f5a8:	08fd0301 	.word	0x08fd0301
   1f5ac:	01775230 	.word	0x01775230
   1f5b0:	08000004 	.word	0x08000004

0001f5b4 <am_hal_ble_transmitter_modex_set>:
   1f5b4:	b530      	push	{r4, r5, lr}
   1f5b6:	b085      	sub	sp, #20
   1f5b8:	4604      	mov	r4, r0
   1f5ba:	2300      	movs	r3, #0
   1f5bc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
   1f5c0:	466a      	mov	r2, sp
   1f5c2:	4927      	ldr	r1, [pc, #156]	; (1f660 <am_hal_ble_transmitter_modex_set+0xac>)
   1f5c4:	9303      	str	r3, [sp, #12]
   1f5c6:	f7ff fe7d 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1f5ca:	4620      	mov	r0, r4
   1f5cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f5d0:	4923      	ldr	r1, [pc, #140]	; (1f660 <am_hal_ble_transmitter_modex_set+0xac>)
   1f5d2:	f7ff ff37 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f5d6:	aa03      	add	r2, sp, #12
   1f5d8:	4620      	mov	r0, r4
   1f5da:	4922      	ldr	r1, [pc, #136]	; (1f664 <am_hal_ble_transmitter_modex_set+0xb0>)
   1f5dc:	f7ff fe72 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1f5e0:	9b03      	ldr	r3, [sp, #12]
   1f5e2:	aa02      	add	r2, sp, #8
   1f5e4:	f043 0308 	orr.w	r3, r3, #8
   1f5e8:	4620      	mov	r0, r4
   1f5ea:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1f5ee:	9303      	str	r3, [sp, #12]
   1f5f0:	f7ff fe68 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1f5f4:	9b02      	ldr	r3, [sp, #8]
   1f5f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f5fa:	461a      	mov	r2, r3
   1f5fc:	4620      	mov	r0, r4
   1f5fe:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   1f602:	9302      	str	r3, [sp, #8]
   1f604:	f7ff ff1e 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f608:	aa01      	add	r2, sp, #4
   1f60a:	4620      	mov	r0, r4
   1f60c:	4916      	ldr	r1, [pc, #88]	; (1f668 <am_hal_ble_transmitter_modex_set+0xb4>)
   1f60e:	f7ff fe59 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1f612:	9a01      	ldr	r2, [sp, #4]
   1f614:	4914      	ldr	r1, [pc, #80]	; (1f668 <am_hal_ble_transmitter_modex_set+0xb4>)
   1f616:	4620      	mov	r0, r4
   1f618:	f042 0208 	orr.w	r2, r2, #8
   1f61c:	f7ff ff12 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f620:	006a      	lsls	r2, r5, #1
   1f622:	f042 0201 	orr.w	r2, r2, #1
   1f626:	4620      	mov	r0, r4
   1f628:	4910      	ldr	r1, [pc, #64]	; (1f66c <am_hal_ble_transmitter_modex_set+0xb8>)
   1f62a:	f7ff ff0b 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f62e:	490d      	ldr	r1, [pc, #52]	; (1f664 <am_hal_ble_transmitter_modex_set+0xb0>)
   1f630:	9a03      	ldr	r2, [sp, #12]
   1f632:	4620      	mov	r0, r4
   1f634:	f7ff ff06 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f638:	4b0d      	ldr	r3, [pc, #52]	; (1f670 <am_hal_ble_transmitter_modex_set+0xbc>)
   1f63a:	68db      	ldr	r3, [r3, #12]
   1f63c:	b2db      	uxtb	r3, r3
   1f63e:	2b21      	cmp	r3, #33	; 0x21
   1f640:	bf0c      	ite	eq
   1f642:	490c      	ldreq	r1, [pc, #48]	; (1f674 <am_hal_ble_transmitter_modex_set+0xc0>)
   1f644:	490c      	ldrne	r1, [pc, #48]	; (1f678 <am_hal_ble_transmitter_modex_set+0xc4>)
   1f646:	462a      	mov	r2, r5
   1f648:	4620      	mov	r0, r4
   1f64a:	f7ff fefb 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f64e:	4620      	mov	r0, r4
   1f650:	9a00      	ldr	r2, [sp, #0]
   1f652:	4903      	ldr	r1, [pc, #12]	; (1f660 <am_hal_ble_transmitter_modex_set+0xac>)
   1f654:	f7ff fef6 	bl	1f444 <am_hal_ble_plf_reg_write>
   1f658:	2000      	movs	r0, #0
   1f65a:	b005      	add	sp, #20
   1f65c:	bd30      	pop	{r4, r5, pc}
   1f65e:	bf00      	nop
   1f660:	43000004 	.word	0x43000004
   1f664:	52000008 	.word	0x52000008
   1f668:	45800070 	.word	0x45800070
   1f66c:	52000014 	.word	0x52000014
   1f670:	40020000 	.word	0x40020000
   1f674:	20006874 	.word	0x20006874
   1f678:	20006070 	.word	0x20006070

0001f67c <am_hal_ble_patch_complete.part.10>:
   1f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f680:	b08c      	sub	sp, #48	; 0x30
   1f682:	2300      	movs	r3, #0
   1f684:	9308      	str	r3, [sp, #32]
   1f686:	2201      	movs	r2, #1
   1f688:	2506      	movs	r5, #6
   1f68a:	24ee      	movs	r4, #238	; 0xee
   1f68c:	21f1      	movs	r1, #241	; 0xf1
   1f68e:	9307      	str	r3, [sp, #28]
   1f690:	9309      	str	r3, [sp, #36]	; 0x24
   1f692:	930a      	str	r3, [sp, #40]	; 0x28
   1f694:	930b      	str	r3, [sp, #44]	; 0x2c
   1f696:	f88d 3004 	strb.w	r3, [sp, #4]
   1f69a:	f88d 3005 	strb.w	r3, [sp, #5]
   1f69e:	2302      	movs	r3, #2
   1f6a0:	f8ad 5020 	strh.w	r5, [sp, #32]
   1f6a4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   1f6a8:	f88d 2000 	strb.w	r2, [sp]
   1f6ac:	f8cd d018 	str.w	sp, [sp, #24]
   1f6b0:	f88d 4001 	strb.w	r4, [sp, #1]
   1f6b4:	f88d 1002 	strb.w	r1, [sp, #2]
   1f6b8:	f88d 3003 	strb.w	r3, [sp, #3]
   1f6bc:	4605      	mov	r5, r0
   1f6be:	2800      	cmp	r0, #0
   1f6c0:	f000 80e4 	beq.w	1f88c <am_hal_ble_patch_complete.part.10+0x210>
   1f6c4:	4e7d      	ldr	r6, [pc, #500]	; (1f8bc <am_hal_ble_patch_complete.part.10+0x240>)
   1f6c6:	f241 3488 	movw	r4, #5000	; 0x1388
   1f6ca:	e001      	b.n	1f6d0 <am_hal_ble_patch_complete.part.10+0x54>
   1f6cc:	3c01      	subs	r4, #1
   1f6ce:	d00d      	beq.n	1f6ec <am_hal_ble_patch_complete.part.10+0x70>
   1f6d0:	682b      	ldr	r3, [r5, #0]
   1f6d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f6d6:	42b3      	cmp	r3, r6
   1f6d8:	d1f8      	bne.n	1f6cc <am_hal_ble_patch_complete.part.10+0x50>
   1f6da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1f6de:	a906      	add	r1, sp, #24
   1f6e0:	4628      	mov	r0, r5
   1f6e2:	b11b      	cbz	r3, 1f6ec <am_hal_ble_patch_complete.part.10+0x70>
   1f6e4:	f7fe fe8c 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f6e8:	2800      	cmp	r0, #0
   1f6ea:	d1ef      	bne.n	1f6cc <am_hal_ble_patch_complete.part.10+0x50>
   1f6ec:	4b74      	ldr	r3, [pc, #464]	; (1f8c0 <am_hal_ble_patch_complete.part.10+0x244>)
   1f6ee:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1f6f2:	061b      	lsls	r3, r3, #24
   1f6f4:	f100 80d1 	bmi.w	1f89a <am_hal_ble_patch_complete.part.10+0x21e>
   1f6f8:	4c72      	ldr	r4, [pc, #456]	; (1f8c4 <am_hal_ble_patch_complete.part.10+0x248>)
   1f6fa:	4e71      	ldr	r6, [pc, #452]	; (1f8c0 <am_hal_ble_patch_complete.part.10+0x244>)
   1f6fc:	e001      	b.n	1f702 <am_hal_ble_patch_complete.part.10+0x86>
   1f6fe:	3c01      	subs	r4, #1
   1f700:	d019      	beq.n	1f736 <am_hal_ble_patch_complete.part.10+0xba>
   1f702:	2010      	movs	r0, #16
   1f704:	f000 fc8c 	bl	20020 <am_hal_flash_delay>
   1f708:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1f70c:	061f      	lsls	r7, r3, #24
   1f70e:	d5f6      	bpl.n	1f6fe <am_hal_ble_patch_complete.part.10+0x82>
   1f710:	2302      	movs	r3, #2
   1f712:	af03      	add	r7, sp, #12
   1f714:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1f718:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f71c:	9706      	str	r7, [sp, #24]
   1f71e:	b12d      	cbz	r5, 1f72c <am_hal_ble_patch_complete.part.10+0xb0>
   1f720:	682e      	ldr	r6, [r5, #0]
   1f722:	4b66      	ldr	r3, [pc, #408]	; (1f8bc <am_hal_ble_patch_complete.part.10+0x240>)
   1f724:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1f728:	429e      	cmp	r6, r3
   1f72a:	d009      	beq.n	1f740 <am_hal_ble_patch_complete.part.10+0xc4>
   1f72c:	2402      	movs	r4, #2
   1f72e:	4620      	mov	r0, r4
   1f730:	b00c      	add	sp, #48	; 0x30
   1f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f736:	4c64      	ldr	r4, [pc, #400]	; (1f8c8 <am_hal_ble_patch_complete.part.10+0x24c>)
   1f738:	4620      	mov	r0, r4
   1f73a:	b00c      	add	sp, #48	; 0x30
   1f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f740:	a906      	add	r1, sp, #24
   1f742:	4628      	mov	r0, r5
   1f744:	f7fe fe5c 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f748:	4604      	mov	r4, r0
   1f74a:	2800      	cmp	r0, #0
   1f74c:	d1ef      	bne.n	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f74e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1f752:	29ee      	cmp	r1, #238	; 0xee
   1f754:	d01a      	beq.n	1f78c <am_hal_ble_patch_complete.part.10+0x110>
   1f756:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1f75a:	682a      	ldr	r2, [r5, #0]
   1f75c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   1f760:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1f764:	b29b      	uxth	r3, r3
   1f766:	42b2      	cmp	r2, r6
   1f768:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f76c:	d1de      	bne.n	1f72c <am_hal_ble_patch_complete.part.10+0xb0>
   1f76e:	b133      	cbz	r3, 1f77e <am_hal_ble_patch_complete.part.10+0x102>
   1f770:	a906      	add	r1, sp, #24
   1f772:	4628      	mov	r0, r5
   1f774:	f7fe fe44 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f778:	b108      	cbz	r0, 1f77e <am_hal_ble_patch_complete.part.10+0x102>
   1f77a:	4604      	mov	r4, r0
   1f77c:	e7d7      	b.n	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f77e:	2301      	movs	r3, #1
   1f780:	4620      	mov	r0, r4
   1f782:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   1f786:	b00c      	add	sp, #48	; 0x30
   1f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f78c:	682b      	ldr	r3, [r5, #0]
   1f78e:	f023 487e 	bic.w	r8, r3, #4261412864	; 0xfe000000
   1f792:	2203      	movs	r2, #3
   1f794:	45b0      	cmp	r8, r6
   1f796:	f8ad 2020 	strh.w	r2, [sp, #32]
   1f79a:	d1c7      	bne.n	1f72c <am_hal_ble_patch_complete.part.10+0xb0>
   1f79c:	a906      	add	r1, sp, #24
   1f79e:	4628      	mov	r0, r5
   1f7a0:	f7fe fe2e 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f7a4:	4604      	mov	r4, r0
   1f7a6:	2800      	cmp	r0, #0
   1f7a8:	d1c1      	bne.n	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f7aa:	2301      	movs	r3, #1
   1f7ac:	2005      	movs	r0, #5
   1f7ae:	2104      	movs	r1, #4
   1f7b0:	22fd      	movs	r2, #253	; 0xfd
   1f7b2:	9408      	str	r4, [sp, #32]
   1f7b4:	9407      	str	r4, [sp, #28]
   1f7b6:	9409      	str	r4, [sp, #36]	; 0x24
   1f7b8:	940a      	str	r4, [sp, #40]	; 0x28
   1f7ba:	940b      	str	r4, [sp, #44]	; 0x2c
   1f7bc:	f8cd d018 	str.w	sp, [sp, #24]
   1f7c0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1f7c4:	f88d 3000 	strb.w	r3, [sp]
   1f7c8:	f88d 3003 	strb.w	r3, [sp, #3]
   1f7cc:	f88d 3004 	strb.w	r3, [sp, #4]
   1f7d0:	f8ad 0020 	strh.w	r0, [sp, #32]
   1f7d4:	f88d 1001 	strb.w	r1, [sp, #1]
   1f7d8:	f88d 2002 	strb.w	r2, [sp, #2]
   1f7dc:	f241 3688 	movw	r6, #5000	; 0x1388
   1f7e0:	e002      	b.n	1f7e8 <am_hal_ble_patch_complete.part.10+0x16c>
   1f7e2:	2402      	movs	r4, #2
   1f7e4:	3e01      	subs	r6, #1
   1f7e6:	d0a2      	beq.n	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f7e8:	682b      	ldr	r3, [r5, #0]
   1f7ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f7ee:	4543      	cmp	r3, r8
   1f7f0:	d1f7      	bne.n	1f7e2 <am_hal_ble_patch_complete.part.10+0x166>
   1f7f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1f7f6:	a906      	add	r1, sp, #24
   1f7f8:	4628      	mov	r0, r5
   1f7fa:	b123      	cbz	r3, 1f806 <am_hal_ble_patch_complete.part.10+0x18a>
   1f7fc:	f7fe fe00 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f800:	4604      	mov	r4, r0
   1f802:	2800      	cmp	r0, #0
   1f804:	d1ee      	bne.n	1f7e4 <am_hal_ble_patch_complete.part.10+0x168>
   1f806:	4e2e      	ldr	r6, [pc, #184]	; (1f8c0 <am_hal_ble_patch_complete.part.10+0x244>)
   1f808:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1f80c:	0619      	lsls	r1, r3, #24
   1f80e:	d40a      	bmi.n	1f826 <am_hal_ble_patch_complete.part.10+0x1aa>
   1f810:	4c2c      	ldr	r4, [pc, #176]	; (1f8c4 <am_hal_ble_patch_complete.part.10+0x248>)
   1f812:	e001      	b.n	1f818 <am_hal_ble_patch_complete.part.10+0x19c>
   1f814:	3c01      	subs	r4, #1
   1f816:	d08e      	beq.n	1f736 <am_hal_ble_patch_complete.part.10+0xba>
   1f818:	2010      	movs	r0, #16
   1f81a:	f000 fc01 	bl	20020 <am_hal_flash_delay>
   1f81e:	f8d6 330c 	ldr.w	r3, [r6, #780]	; 0x30c
   1f822:	0618      	lsls	r0, r3, #24
   1f824:	d5f6      	bpl.n	1f814 <am_hal_ble_patch_complete.part.10+0x198>
   1f826:	682e      	ldr	r6, [r5, #0]
   1f828:	4b24      	ldr	r3, [pc, #144]	; (1f8bc <am_hal_ble_patch_complete.part.10+0x240>)
   1f82a:	9706      	str	r7, [sp, #24]
   1f82c:	f026 467e 	bic.w	r6, r6, #4261412864	; 0xfe000000
   1f830:	2702      	movs	r7, #2
   1f832:	2209      	movs	r2, #9
   1f834:	429e      	cmp	r6, r3
   1f836:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
   1f83a:	f8ad 2020 	strh.w	r2, [sp, #32]
   1f83e:	f47f af75 	bne.w	1f72c <am_hal_ble_patch_complete.part.10+0xb0>
   1f842:	a906      	add	r1, sp, #24
   1f844:	4628      	mov	r0, r5
   1f846:	f7fe fddb 	bl	1e400 <am_hal_ble_blocking_transfer.part.7>
   1f84a:	4604      	mov	r4, r0
   1f84c:	2800      	cmp	r0, #0
   1f84e:	f47f af6e 	bne.w	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f852:	682b      	ldr	r3, [r5, #0]
   1f854:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f858:	42b3      	cmp	r3, r6
   1f85a:	d026      	beq.n	1f8aa <am_hal_ble_patch_complete.part.10+0x22e>
   1f85c:	2301      	movs	r3, #1
   1f85e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
   1f862:	481a      	ldr	r0, [pc, #104]	; (1f8cc <am_hal_ble_patch_complete.part.10+0x250>)
   1f864:	f000 fbdc 	bl	20020 <am_hal_flash_delay>
   1f868:	4a19      	ldr	r2, [pc, #100]	; (1f8d0 <am_hal_ble_patch_complete.part.10+0x254>)
   1f86a:	4b1a      	ldr	r3, [pc, #104]	; (1f8d4 <am_hal_ble_patch_complete.part.10+0x258>)
   1f86c:	6811      	ldr	r1, [r2, #0]
   1f86e:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
   1f872:	429a      	cmp	r2, r3
   1f874:	f47f af5b 	bne.w	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f878:	b2c9      	uxtb	r1, r1
   1f87a:	f1a1 0320 	sub.w	r3, r1, #32
   1f87e:	2b20      	cmp	r3, #32
   1f880:	f63f af55 	bhi.w	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f884:	4628      	mov	r0, r5
   1f886:	f7ff fe95 	bl	1f5b4 <am_hal_ble_transmitter_modex_set>
   1f88a:	e750      	b.n	1f72e <am_hal_ble_patch_complete.part.10+0xb2>
   1f88c:	4b0c      	ldr	r3, [pc, #48]	; (1f8c0 <am_hal_ble_patch_complete.part.10+0x244>)
   1f88e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   1f892:	061a      	lsls	r2, r3, #24
   1f894:	f57f af30 	bpl.w	1f6f8 <am_hal_ble_patch_complete.part.10+0x7c>
   1f898:	e748      	b.n	1f72c <am_hal_ble_patch_complete.part.10+0xb0>
   1f89a:	2302      	movs	r3, #2
   1f89c:	af03      	add	r7, sp, #12
   1f89e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1f8a2:	f8ad 3020 	strh.w	r3, [sp, #32]
   1f8a6:	9706      	str	r7, [sp, #24]
   1f8a8:	e73a      	b.n	1f720 <am_hal_ble_patch_complete.part.10+0xa4>
   1f8aa:	4b05      	ldr	r3, [pc, #20]	; (1f8c0 <am_hal_ble_patch_complete.part.10+0x244>)
   1f8ac:	f8b3 2304 	ldrh.w	r2, [r3, #772]	; 0x304
   1f8b0:	f367 0283 	bfi	r2, r7, #2, #2
   1f8b4:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
   1f8b8:	e7d0      	b.n	1f85c <am_hal_ble_patch_complete.part.10+0x1e0>
   1f8ba:	bf00      	nop
   1f8bc:	01775230 	.word	0x01775230
   1f8c0:	5000c000 	.word	0x5000c000
   1f8c4:	000186a0 	.word	0x000186a0
   1f8c8:	08000004 	.word	0x08000004
   1f8cc:	007a1200 	.word	0x007a1200
   1f8d0:	50023808 	.word	0x50023808
   1f8d4:	18240600 	.word	0x18240600

0001f8d8 <am_hal_ble_boot>:
   1f8d8:	b128      	cbz	r0, 1f8e6 <am_hal_ble_boot+0xe>
   1f8da:	6803      	ldr	r3, [r0, #0]
   1f8dc:	4a59      	ldr	r2, [pc, #356]	; (1fa44 <am_hal_ble_boot+0x16c>)
   1f8de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f8e2:	4293      	cmp	r3, r2
   1f8e4:	d001      	beq.n	1f8ea <am_hal_ble_boot+0x12>
   1f8e6:	2002      	movs	r0, #2
   1f8e8:	4770      	bx	lr
   1f8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f8ee:	7a03      	ldrb	r3, [r0, #8]
   1f8f0:	b082      	sub	sp, #8
   1f8f2:	4604      	mov	r4, r0
   1f8f4:	2b00      	cmp	r3, #0
   1f8f6:	d065      	beq.n	1f9c4 <am_hal_ble_boot+0xec>
   1f8f8:	4a53      	ldr	r2, [pc, #332]	; (1fa48 <am_hal_ble_boot+0x170>)
   1f8fa:	68d3      	ldr	r3, [r2, #12]
   1f8fc:	b2db      	uxtb	r3, r3
   1f8fe:	2b11      	cmp	r3, #17
   1f900:	d076      	beq.n	1f9f0 <am_hal_ble_boot+0x118>
   1f902:	68d3      	ldr	r3, [r2, #12]
   1f904:	b2db      	uxtb	r3, r3
   1f906:	2b12      	cmp	r3, #18
   1f908:	d072      	beq.n	1f9f0 <am_hal_ble_boot+0x118>
   1f90a:	4b4f      	ldr	r3, [pc, #316]	; (1fa48 <am_hal_ble_boot+0x170>)
   1f90c:	68db      	ldr	r3, [r3, #12]
   1f90e:	b2db      	uxtb	r3, r3
   1f910:	2b21      	cmp	r3, #33	; 0x21
   1f912:	f000 808d 	beq.w	1fa30 <am_hal_ble_boot+0x158>
   1f916:	4b4d      	ldr	r3, [pc, #308]	; (1fa4c <am_hal_ble_boot+0x174>)
   1f918:	68da      	ldr	r2, [r3, #12]
   1f91a:	4b4d      	ldr	r3, [pc, #308]	; (1fa50 <am_hal_ble_boot+0x178>)
   1f91c:	681b      	ldr	r3, [r3, #0]
   1f91e:	ba1b      	rev	r3, r3
   1f920:	1c5d      	adds	r5, r3, #1
   1f922:	bf18      	it	ne
   1f924:	6093      	strne	r3, [r2, #8]
   1f926:	4b4b      	ldr	r3, [pc, #300]	; (1fa54 <am_hal_ble_boot+0x17c>)
   1f928:	681b      	ldr	r3, [r3, #0]
   1f92a:	1c58      	adds	r0, r3, #1
   1f92c:	d009      	beq.n	1f942 <am_hal_ble_boot+0x6a>
   1f92e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f932:	ba1b      	rev	r3, r3
   1f934:	1c59      	adds	r1, r3, #1
   1f936:	d004      	beq.n	1f942 <am_hal_ble_boot+0x6a>
   1f938:	68d1      	ldr	r1, [r2, #12]
   1f93a:	f421 71f8 	bic.w	r1, r1, #496	; 0x1f0
   1f93e:	430b      	orrs	r3, r1
   1f940:	60d3      	str	r3, [r2, #12]
   1f942:	4a41      	ldr	r2, [pc, #260]	; (1fa48 <am_hal_ble_boot+0x170>)
   1f944:	68d3      	ldr	r3, [r2, #12]
   1f946:	b2db      	uxtb	r3, r3
   1f948:	2b11      	cmp	r3, #17
   1f94a:	d031      	beq.n	1f9b0 <am_hal_ble_boot+0xd8>
   1f94c:	68d3      	ldr	r3, [r2, #12]
   1f94e:	b2db      	uxtb	r3, r3
   1f950:	2b12      	cmp	r3, #18
   1f952:	d02d      	beq.n	1f9b0 <am_hal_ble_boot+0xd8>
   1f954:	4a40      	ldr	r2, [pc, #256]	; (1fa58 <am_hal_ble_boot+0x180>)
   1f956:	4b41      	ldr	r3, [pc, #260]	; (1fa5c <am_hal_ble_boot+0x184>)
   1f958:	6816      	ldr	r6, [r2, #0]
   1f95a:	681b      	ldr	r3, [r3, #0]
   1f95c:	b1f6      	cbz	r6, 1f99c <am_hal_ble_boot+0xc4>
   1f95e:	4d40      	ldr	r5, [pc, #256]	; (1fa60 <am_hal_ble_boot+0x188>)
   1f960:	f1a3 0804 	sub.w	r8, r3, #4
   1f964:	2700      	movs	r7, #0
   1f966:	f858 1f04 	ldr.w	r1, [r8, #4]!
   1f96a:	684b      	ldr	r3, [r1, #4]
   1f96c:	68c8      	ldr	r0, [r1, #12]
   1f96e:	b16b      	cbz	r3, 1f98c <am_hal_ble_boot+0xb4>
   1f970:	eb00 0e03 	add.w	lr, r0, r3
   1f974:	2300      	movs	r3, #0
   1f976:	f810 2b01 	ldrb.w	r2, [r0], #1
   1f97a:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1f97e:	4570      	cmp	r0, lr
   1f980:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
   1f984:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1f988:	b29b      	uxth	r3, r3
   1f98a:	d1f4      	bne.n	1f976 <am_hal_ble_boot+0x9e>
   1f98c:	608b      	str	r3, [r1, #8]
   1f98e:	4620      	mov	r0, r4
   1f990:	f7ff faa8 	bl	1eee4 <am_hal_ble_patch_apply>
   1f994:	b948      	cbnz	r0, 1f9aa <am_hal_ble_boot+0xd2>
   1f996:	3701      	adds	r7, #1
   1f998:	42b7      	cmp	r7, r6
   1f99a:	d1e4      	bne.n	1f966 <am_hal_ble_boot+0x8e>
   1f99c:	6823      	ldr	r3, [r4, #0]
   1f99e:	4a29      	ldr	r2, [pc, #164]	; (1fa44 <am_hal_ble_boot+0x16c>)
   1f9a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1f9a4:	4293      	cmp	r3, r2
   1f9a6:	d008      	beq.n	1f9ba <am_hal_ble_boot+0xe2>
   1f9a8:	2002      	movs	r0, #2
   1f9aa:	b002      	add	sp, #8
   1f9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f9b0:	4a2c      	ldr	r2, [pc, #176]	; (1fa64 <am_hal_ble_boot+0x18c>)
   1f9b2:	4b2d      	ldr	r3, [pc, #180]	; (1fa68 <am_hal_ble_boot+0x190>)
   1f9b4:	6816      	ldr	r6, [r2, #0]
   1f9b6:	681b      	ldr	r3, [r3, #0]
   1f9b8:	e7d0      	b.n	1f95c <am_hal_ble_boot+0x84>
   1f9ba:	4620      	mov	r0, r4
   1f9bc:	f7ff fe5e 	bl	1f67c <am_hal_ble_patch_complete.part.10>
   1f9c0:	2800      	cmp	r0, #0
   1f9c2:	d1f2      	bne.n	1f9aa <am_hal_ble_boot+0xd2>
   1f9c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f9c8:	4b1f      	ldr	r3, [pc, #124]	; (1fa48 <am_hal_ble_boot+0x170>)
   1f9ca:	9201      	str	r2, [sp, #4]
   1f9cc:	68db      	ldr	r3, [r3, #12]
   1f9ce:	b2db      	uxtb	r3, r3
   1f9d0:	2b21      	cmp	r3, #33	; 0x21
   1f9d2:	d030      	beq.n	1fa36 <am_hal_ble_boot+0x15e>
   1f9d4:	4620      	mov	r0, r4
   1f9d6:	aa01      	add	r2, sp, #4
   1f9d8:	4924      	ldr	r1, [pc, #144]	; (1fa6c <am_hal_ble_boot+0x194>)
   1f9da:	f7ff fc73 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1f9de:	9b01      	ldr	r3, [sp, #4]
   1f9e0:	4823      	ldr	r0, [pc, #140]	; (1fa70 <am_hal_ble_boot+0x198>)
   1f9e2:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   1f9e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1f9ea:	bf98      	it	ls
   1f9ec:	2000      	movls	r0, #0
   1f9ee:	e7dc      	b.n	1f9aa <am_hal_ble_boot+0xd2>
   1f9f0:	4b20      	ldr	r3, [pc, #128]	; (1fa74 <am_hal_ble_boot+0x19c>)
   1f9f2:	681b      	ldr	r3, [r3, #0]
   1f9f4:	6819      	ldr	r1, [r3, #0]
   1f9f6:	684b      	ldr	r3, [r1, #4]
   1f9f8:	68c8      	ldr	r0, [r1, #12]
   1f9fa:	b16b      	cbz	r3, 1fa18 <am_hal_ble_boot+0x140>
   1f9fc:	4e18      	ldr	r6, [pc, #96]	; (1fa60 <am_hal_ble_boot+0x188>)
   1f9fe:	18c5      	adds	r5, r0, r3
   1fa00:	2300      	movs	r3, #0
   1fa02:	f810 2b01 	ldrb.w	r2, [r0], #1
   1fa06:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
   1fa0a:	4285      	cmp	r5, r0
   1fa0c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
   1fa10:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
   1fa14:	b29b      	uxth	r3, r3
   1fa16:	d1f4      	bne.n	1fa02 <am_hal_ble_boot+0x12a>
   1fa18:	608b      	str	r3, [r1, #8]
   1fa1a:	4620      	mov	r0, r4
   1fa1c:	f7ff fa62 	bl	1eee4 <am_hal_ble_patch_apply>
   1fa20:	2800      	cmp	r0, #0
   1fa22:	d1c2      	bne.n	1f9aa <am_hal_ble_boot+0xd2>
   1fa24:	4620      	mov	r0, r4
   1fa26:	f7ff f921 	bl	1ec6c <am_hal_ble_patch_copy_end_apply>
   1fa2a:	2800      	cmp	r0, #0
   1fa2c:	d1bd      	bne.n	1f9aa <am_hal_ble_boot+0xd2>
   1fa2e:	e76c      	b.n	1f90a <am_hal_ble_boot+0x32>
   1fa30:	4b11      	ldr	r3, [pc, #68]	; (1fa78 <am_hal_ble_boot+0x1a0>)
   1fa32:	68da      	ldr	r2, [r3, #12]
   1fa34:	e771      	b.n	1f91a <am_hal_ble_boot+0x42>
   1fa36:	4620      	mov	r0, r4
   1fa38:	aa01      	add	r2, sp, #4
   1fa3a:	4910      	ldr	r1, [pc, #64]	; (1fa7c <am_hal_ble_boot+0x1a4>)
   1fa3c:	f7ff fc42 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1fa40:	e7cd      	b.n	1f9de <am_hal_ble_boot+0x106>
   1fa42:	bf00      	nop
   1fa44:	01775230 	.word	0x01775230
   1fa48:	40020000 	.word	0x40020000
   1fa4c:	100024ec 	.word	0x100024ec
   1fa50:	50023800 	.word	0x50023800
   1fa54:	50023804 	.word	0x50023804
   1fa58:	00024cec 	.word	0x00024cec
   1fa5c:	10002f98 	.word	0x10002f98
   1fa60:	0002349c 	.word	0x0002349c
   1fa64:	000243d4 	.word	0x000243d4
   1fa68:	10002610 	.word	0x10002610
   1fa6c:	20006054 	.word	0x20006054
   1fa70:	0800000b 	.word	0x0800000b
   1fa74:	100024d8 	.word	0x100024d8
   1fa78:	10002f9c 	.word	0x10002f9c
   1fa7c:	20006858 	.word	0x20006858

0001fa80 <am_hal_ble_tx_power_set>:
   1fa80:	b570      	push	{r4, r5, r6, lr}
   1fa82:	b082      	sub	sp, #8
   1fa84:	4605      	mov	r5, r0
   1fa86:	2300      	movs	r3, #0
   1fa88:	460e      	mov	r6, r1
   1fa8a:	466a      	mov	r2, sp
   1fa8c:	040c      	lsls	r4, r1, #16
   1fa8e:	4919      	ldr	r1, [pc, #100]	; (1faf4 <am_hal_ble_tx_power_set+0x74>)
   1fa90:	9301      	str	r3, [sp, #4]
   1fa92:	f7ff fc17 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1fa96:	4917      	ldr	r1, [pc, #92]	; (1faf4 <am_hal_ble_tx_power_set+0x74>)
   1fa98:	4628      	mov	r0, r5
   1fa9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fa9e:	f7ff fcd1 	bl	1f444 <am_hal_ble_plf_reg_write>
   1faa2:	4b15      	ldr	r3, [pc, #84]	; (1faf8 <am_hal_ble_tx_power_set+0x78>)
   1faa4:	68db      	ldr	r3, [r3, #12]
   1faa6:	b2db      	uxtb	r3, r3
   1faa8:	2b21      	cmp	r3, #33	; 0x21
   1faaa:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   1faae:	bf0c      	ite	eq
   1fab0:	4912      	ldreq	r1, [pc, #72]	; (1fafc <am_hal_ble_tx_power_set+0x7c>)
   1fab2:	4913      	ldrne	r1, [pc, #76]	; (1fb00 <am_hal_ble_tx_power_set+0x80>)
   1fab4:	aa01      	add	r2, sp, #4
   1fab6:	f044 0408 	orr.w	r4, r4, #8
   1faba:	4628      	mov	r0, r5
   1fabc:	f7ff fc02 	bl	1f2c4 <am_hal_ble_plf_reg_read>
   1fac0:	4910      	ldr	r1, [pc, #64]	; (1fb04 <am_hal_ble_tx_power_set+0x84>)
   1fac2:	f88d 6004 	strb.w	r6, [sp, #4]
   1fac6:	4622      	mov	r2, r4
   1fac8:	4628      	mov	r0, r5
   1faca:	f7ff fcbb 	bl	1f444 <am_hal_ble_plf_reg_write>
   1face:	4b0a      	ldr	r3, [pc, #40]	; (1faf8 <am_hal_ble_tx_power_set+0x78>)
   1fad0:	9a01      	ldr	r2, [sp, #4]
   1fad2:	68db      	ldr	r3, [r3, #12]
   1fad4:	b2db      	uxtb	r3, r3
   1fad6:	2b21      	cmp	r3, #33	; 0x21
   1fad8:	bf0c      	ite	eq
   1fada:	4908      	ldreq	r1, [pc, #32]	; (1fafc <am_hal_ble_tx_power_set+0x7c>)
   1fadc:	4908      	ldrne	r1, [pc, #32]	; (1fb00 <am_hal_ble_tx_power_set+0x80>)
   1fade:	4628      	mov	r0, r5
   1fae0:	f7ff fcb0 	bl	1f444 <am_hal_ble_plf_reg_write>
   1fae4:	4628      	mov	r0, r5
   1fae6:	9a00      	ldr	r2, [sp, #0]
   1fae8:	4902      	ldr	r1, [pc, #8]	; (1faf4 <am_hal_ble_tx_power_set+0x74>)
   1faea:	f7ff fcab 	bl	1f444 <am_hal_ble_plf_reg_write>
   1faee:	2000      	movs	r0, #0
   1faf0:	b002      	add	sp, #8
   1faf2:	bd70      	pop	{r4, r5, r6, pc}
   1faf4:	43000004 	.word	0x43000004
   1faf8:	40020000 	.word	0x40020000
   1fafc:	20006838 	.word	0x20006838
   1fb00:	20006038 	.word	0x20006038
   1fb04:	52400018 	.word	0x52400018

0001fb08 <am_hal_cachectrl_config>:
   1fb08:	b530      	push	{r4, r5, lr}
   1fb0a:	b083      	sub	sp, #12
   1fb0c:	4605      	mov	r5, r0
   1fb0e:	f000 fc5b 	bl	203c8 <am_hal_interrupt_master_disable>
   1fb12:	4c0f      	ldr	r4, [pc, #60]	; (1fb50 <am_hal_cachectrl_config+0x48>)
   1fb14:	9001      	str	r0, [sp, #4]
   1fb16:	6823      	ldr	r3, [r4, #0]
   1fb18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   1fb1c:	6023      	str	r3, [r4, #0]
   1fb1e:	9801      	ldr	r0, [sp, #4]
   1fb20:	f000 fc56 	bl	203d0 <am_hal_interrupt_master_set>
   1fb24:	78ab      	ldrb	r3, [r5, #2]
   1fb26:	782a      	ldrb	r2, [r5, #0]
   1fb28:	7869      	ldrb	r1, [r5, #1]
   1fb2a:	005b      	lsls	r3, r3, #1
   1fb2c:	0112      	lsls	r2, r2, #4
   1fb2e:	b2d2      	uxtb	r2, r2
   1fb30:	f003 0302 	and.w	r3, r3, #2
   1fb34:	4313      	orrs	r3, r2
   1fb36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1fb3a:	020a      	lsls	r2, r1, #8
   1fb3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
   1fb40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1fb44:	4313      	orrs	r3, r2
   1fb46:	2000      	movs	r0, #0
   1fb48:	6023      	str	r3, [r4, #0]
   1fb4a:	b003      	add	sp, #12
   1fb4c:	bd30      	pop	{r4, r5, pc}
   1fb4e:	bf00      	nop
   1fb50:	40018000 	.word	0x40018000

0001fb54 <am_hal_cachectrl_enable>:
   1fb54:	4a03      	ldr	r2, [pc, #12]	; (1fb64 <am_hal_cachectrl_enable+0x10>)
   1fb56:	6813      	ldr	r3, [r2, #0]
   1fb58:	f043 0301 	orr.w	r3, r3, #1
   1fb5c:	6013      	str	r3, [r2, #0]
   1fb5e:	2000      	movs	r0, #0
   1fb60:	4770      	bx	lr
   1fb62:	bf00      	nop
   1fb64:	40018000 	.word	0x40018000

0001fb68 <am_hal_cachectrl_control>:
   1fb68:	b510      	push	{r4, lr}
   1fb6a:	3801      	subs	r0, #1
   1fb6c:	b08e      	sub	sp, #56	; 0x38
   1fb6e:	2810      	cmp	r0, #16
   1fb70:	f200 8143 	bhi.w	1fdfa <am_hal_cachectrl_control+0x292>
   1fb74:	e8df f010 	tbh	[pc, r0, lsl #1]
   1fb78:	01380136 	.word	0x01380136
   1fb7c:	0011013e 	.word	0x0011013e
   1fb80:	001a0018 	.word	0x001a0018
   1fb84:	001f001c 	.word	0x001f001c
   1fb88:	00300022 	.word	0x00300022
   1fb8c:	0074003c 	.word	0x0074003c
   1fb90:	00e400ac 	.word	0x00e400ac
   1fb94:	011a00ff 	.word	0x011a00ff
   1fb98:	0120      	.short	0x0120
   1fb9a:	f44f 7208 	mov.w	r2, #544	; 0x220
   1fb9e:	4ba8      	ldr	r3, [pc, #672]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fba0:	2000      	movs	r0, #0
   1fba2:	609a      	str	r2, [r3, #8]
   1fba4:	b00e      	add	sp, #56	; 0x38
   1fba6:	bd10      	pop	{r4, pc}
   1fba8:	2240      	movs	r2, #64	; 0x40
   1fbaa:	e7f8      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fbac:	2220      	movs	r2, #32
   1fbae:	e7f6      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fbb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1fbb4:	e7f3      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fbb6:	f44f 7200 	mov.w	r2, #512	; 0x200
   1fbba:	e7f0      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fbbc:	f000 fc04 	bl	203c8 <am_hal_interrupt_master_disable>
   1fbc0:	4a9f      	ldr	r2, [pc, #636]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fbc2:	9000      	str	r0, [sp, #0]
   1fbc4:	6813      	ldr	r3, [r2, #0]
   1fbc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1fbca:	6013      	str	r3, [r2, #0]
   1fbcc:	9800      	ldr	r0, [sp, #0]
   1fbce:	f000 fbff 	bl	203d0 <am_hal_interrupt_master_set>
   1fbd2:	2000      	movs	r0, #0
   1fbd4:	b00e      	add	sp, #56	; 0x38
   1fbd6:	bd10      	pop	{r4, pc}
   1fbd8:	f000 fbf6 	bl	203c8 <am_hal_interrupt_master_disable>
   1fbdc:	4a98      	ldr	r2, [pc, #608]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fbde:	9001      	str	r0, [sp, #4]
   1fbe0:	6813      	ldr	r3, [r2, #0]
   1fbe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1fbe6:	6013      	str	r3, [r2, #0]
   1fbe8:	9801      	ldr	r0, [sp, #4]
   1fbea:	f000 fbf1 	bl	203d0 <am_hal_interrupt_master_set>
   1fbee:	e7f0      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fbf0:	f000 fbea 	bl	203c8 <am_hal_interrupt_master_disable>
   1fbf4:	4603      	mov	r3, r0
   1fbf6:	4893      	ldr	r0, [pc, #588]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fbf8:	9302      	str	r3, [sp, #8]
   1fbfa:	f000 fa5b 	bl	200b4 <am_hal_flash_load_ui32>
   1fbfe:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1fc02:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1fc06:	488f      	ldr	r0, [pc, #572]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc08:	f000 fa58 	bl	200bc <am_hal_flash_store_ui32>
   1fc0c:	9802      	ldr	r0, [sp, #8]
   1fc0e:	f000 fbdf 	bl	203d0 <am_hal_interrupt_master_set>
   1fc12:	f000 fbd9 	bl	203c8 <am_hal_interrupt_master_disable>
   1fc16:	4603      	mov	r3, r0
   1fc18:	488a      	ldr	r0, [pc, #552]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc1a:	9303      	str	r3, [sp, #12]
   1fc1c:	f000 fa4a 	bl	200b4 <am_hal_flash_load_ui32>
   1fc20:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1fc24:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
   1fc28:	4886      	ldr	r0, [pc, #536]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc2a:	f000 fa47 	bl	200bc <am_hal_flash_store_ui32>
   1fc2e:	9803      	ldr	r0, [sp, #12]
   1fc30:	f000 fbce 	bl	203d0 <am_hal_interrupt_master_set>
   1fc34:	f000 fbc8 	bl	203c8 <am_hal_interrupt_master_disable>
   1fc38:	4603      	mov	r3, r0
   1fc3a:	4882      	ldr	r0, [pc, #520]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc3c:	9304      	str	r3, [sp, #16]
   1fc3e:	f000 fa39 	bl	200b4 <am_hal_flash_load_ui32>
   1fc42:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1fc46:	f021 010f 	bic.w	r1, r1, #15
   1fc4a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1fc4e:	f041 0103 	orr.w	r1, r1, #3
   1fc52:	487c      	ldr	r0, [pc, #496]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc54:	f000 fa32 	bl	200bc <am_hal_flash_store_ui32>
   1fc58:	9804      	ldr	r0, [sp, #16]
   1fc5a:	f000 fbb9 	bl	203d0 <am_hal_interrupt_master_set>
   1fc5e:	e7b8      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fc60:	f000 fbb2 	bl	203c8 <am_hal_interrupt_master_disable>
   1fc64:	4603      	mov	r3, r0
   1fc66:	4877      	ldr	r0, [pc, #476]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc68:	9305      	str	r3, [sp, #20]
   1fc6a:	f000 fa23 	bl	200b4 <am_hal_flash_load_ui32>
   1fc6e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1fc72:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   1fc76:	4873      	ldr	r0, [pc, #460]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc78:	f000 fa20 	bl	200bc <am_hal_flash_store_ui32>
   1fc7c:	9805      	ldr	r0, [sp, #20]
   1fc7e:	f000 fba7 	bl	203d0 <am_hal_interrupt_master_set>
   1fc82:	f000 fba1 	bl	203c8 <am_hal_interrupt_master_disable>
   1fc86:	4603      	mov	r3, r0
   1fc88:	486e      	ldr	r0, [pc, #440]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc8a:	9306      	str	r3, [sp, #24]
   1fc8c:	f000 fa12 	bl	200b4 <am_hal_flash_load_ui32>
   1fc90:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1fc94:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
   1fc98:	486a      	ldr	r0, [pc, #424]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fc9a:	f000 fa0f 	bl	200bc <am_hal_flash_store_ui32>
   1fc9e:	9806      	ldr	r0, [sp, #24]
   1fca0:	f000 fb96 	bl	203d0 <am_hal_interrupt_master_set>
   1fca4:	f000 fb90 	bl	203c8 <am_hal_interrupt_master_disable>
   1fca8:	4603      	mov	r3, r0
   1fcaa:	4866      	ldr	r0, [pc, #408]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fcac:	9307      	str	r3, [sp, #28]
   1fcae:	f000 fa01 	bl	200b4 <am_hal_flash_load_ui32>
   1fcb2:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1fcb6:	f021 010f 	bic.w	r1, r1, #15
   1fcba:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1fcbe:	f041 0101 	orr.w	r1, r1, #1
   1fcc2:	4860      	ldr	r0, [pc, #384]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fcc4:	f000 f9fa 	bl	200bc <am_hal_flash_store_ui32>
   1fcc8:	9807      	ldr	r0, [sp, #28]
   1fcca:	f000 fb81 	bl	203d0 <am_hal_interrupt_master_set>
   1fcce:	e780      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fcd0:	f000 fb7a 	bl	203c8 <am_hal_interrupt_master_disable>
   1fcd4:	4603      	mov	r3, r0
   1fcd6:	485b      	ldr	r0, [pc, #364]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fcd8:	9308      	str	r3, [sp, #32]
   1fcda:	f000 f9eb 	bl	200b4 <am_hal_flash_load_ui32>
   1fcde:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1fce2:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
   1fce6:	4857      	ldr	r0, [pc, #348]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fce8:	f000 f9e8 	bl	200bc <am_hal_flash_store_ui32>
   1fcec:	9808      	ldr	r0, [sp, #32]
   1fcee:	f000 fb6f 	bl	203d0 <am_hal_interrupt_master_set>
   1fcf2:	f000 fb69 	bl	203c8 <am_hal_interrupt_master_disable>
   1fcf6:	4603      	mov	r3, r0
   1fcf8:	4852      	ldr	r0, [pc, #328]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fcfa:	9309      	str	r3, [sp, #36]	; 0x24
   1fcfc:	f000 f9da 	bl	200b4 <am_hal_flash_load_ui32>
   1fd00:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1fd04:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
   1fd08:	484e      	ldr	r0, [pc, #312]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd0a:	f000 f9d7 	bl	200bc <am_hal_flash_store_ui32>
   1fd0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fd10:	f000 fb5e 	bl	203d0 <am_hal_interrupt_master_set>
   1fd14:	f000 fb58 	bl	203c8 <am_hal_interrupt_master_disable>
   1fd18:	4603      	mov	r3, r0
   1fd1a:	484a      	ldr	r0, [pc, #296]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd1c:	930a      	str	r3, [sp, #40]	; 0x28
   1fd1e:	f000 f9c9 	bl	200b4 <am_hal_flash_load_ui32>
   1fd22:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1fd26:	f021 010f 	bic.w	r1, r1, #15
   1fd2a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   1fd2e:	f041 0101 	orr.w	r1, r1, #1
   1fd32:	4844      	ldr	r0, [pc, #272]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd34:	f000 f9c2 	bl	200bc <am_hal_flash_store_ui32>
   1fd38:	980a      	ldr	r0, [sp, #40]	; 0x28
   1fd3a:	f000 fb49 	bl	203d0 <am_hal_interrupt_master_set>
   1fd3e:	e748      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fd40:	2900      	cmp	r1, #0
   1fd42:	d05a      	beq.n	1fdfa <am_hal_cachectrl_control+0x292>
   1fd44:	680c      	ldr	r4, [r1, #0]
   1fd46:	2c03      	cmp	r4, #3
   1fd48:	d834      	bhi.n	1fdb4 <am_hal_cachectrl_control+0x24c>
   1fd4a:	f000 fb3d 	bl	203c8 <am_hal_interrupt_master_disable>
   1fd4e:	4603      	mov	r3, r0
   1fd50:	483c      	ldr	r0, [pc, #240]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd52:	930b      	str	r3, [sp, #44]	; 0x2c
   1fd54:	f000 f9ae 	bl	200b4 <am_hal_flash_load_ui32>
   1fd58:	0323      	lsls	r3, r4, #12
   1fd5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   1fd5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   1fd62:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
   1fd66:	4319      	orrs	r1, r3
   1fd68:	4836      	ldr	r0, [pc, #216]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd6a:	f000 f9a7 	bl	200bc <am_hal_flash_store_ui32>
   1fd6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1fd70:	f000 fb2e 	bl	203d0 <am_hal_interrupt_master_set>
   1fd74:	e72d      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fd76:	2900      	cmp	r1, #0
   1fd78:	d03f      	beq.n	1fdfa <am_hal_cachectrl_control+0x292>
   1fd7a:	680c      	ldr	r4, [r1, #0]
   1fd7c:	2c07      	cmp	r4, #7
   1fd7e:	d819      	bhi.n	1fdb4 <am_hal_cachectrl_control+0x24c>
   1fd80:	f000 fb22 	bl	203c8 <am_hal_interrupt_master_disable>
   1fd84:	4603      	mov	r3, r0
   1fd86:	482f      	ldr	r0, [pc, #188]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fd88:	930c      	str	r3, [sp, #48]	; 0x30
   1fd8a:	f000 f993 	bl	200b4 <am_hal_flash_load_ui32>
   1fd8e:	0123      	lsls	r3, r4, #4
   1fd90:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1fd94:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
   1fd98:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
   1fd9c:	4319      	orrs	r1, r3
   1fd9e:	4829      	ldr	r0, [pc, #164]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fda0:	f000 f98c 	bl	200bc <am_hal_flash_store_ui32>
   1fda4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1fda6:	f000 fb13 	bl	203d0 <am_hal_interrupt_master_set>
   1fdaa:	e712      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fdac:	b329      	cbz	r1, 1fdfa <am_hal_cachectrl_control+0x292>
   1fdae:	680c      	ldr	r4, [r1, #0]
   1fdb0:	2c0f      	cmp	r4, #15
   1fdb2:	d926      	bls.n	1fe02 <am_hal_cachectrl_control+0x29a>
   1fdb4:	2001      	movs	r0, #1
   1fdb6:	e6f5      	b.n	1fba4 <am_hal_cachectrl_control+0x3c>
   1fdb8:	b1f9      	cbz	r1, 1fdfa <am_hal_cachectrl_control+0x292>
   1fdba:	684a      	ldr	r2, [r1, #4]
   1fdbc:	4b22      	ldr	r3, [pc, #136]	; (1fe48 <am_hal_cachectrl_control+0x2e0>)
   1fdbe:	4013      	ands	r3, r2
   1fdc0:	b9db      	cbnz	r3, 1fdfa <am_hal_cachectrl_control+0x292>
   1fdc2:	688b      	ldr	r3, [r1, #8]
   1fdc4:	4820      	ldr	r0, [pc, #128]	; (1fe48 <am_hal_cachectrl_control+0x2e0>)
   1fdc6:	4018      	ands	r0, r3
   1fdc8:	b9b8      	cbnz	r0, 1fdfa <am_hal_cachectrl_control+0x292>
   1fdca:	780c      	ldrb	r4, [r1, #0]
   1fdcc:	b374      	cbz	r4, 1fe2c <am_hal_cachectrl_control+0x2c4>
   1fdce:	2c01      	cmp	r4, #1
   1fdd0:	d113      	bne.n	1fdfa <am_hal_cachectrl_control+0x292>
   1fdd2:	4c1b      	ldr	r4, [pc, #108]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fdd4:	61a2      	str	r2, [r4, #24]
   1fdd6:	61e3      	str	r3, [r4, #28]
   1fdd8:	784a      	ldrb	r2, [r1, #1]
   1fdda:	6823      	ldr	r3, [r4, #0]
   1fddc:	f362 03c3 	bfi	r3, r2, #3, #1
   1fde0:	6023      	str	r3, [r4, #0]
   1fde2:	e6df      	b.n	1fba4 <am_hal_cachectrl_control+0x3c>
   1fde4:	2201      	movs	r2, #1
   1fde6:	e6da      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fde8:	4b15      	ldr	r3, [pc, #84]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fdea:	681b      	ldr	r3, [r3, #0]
   1fdec:	01db      	lsls	r3, r3, #7
   1fdee:	d406      	bmi.n	1fdfe <am_hal_cachectrl_control+0x296>
   1fdf0:	2007      	movs	r0, #7
   1fdf2:	e6d7      	b.n	1fba4 <am_hal_cachectrl_control+0x3c>
   1fdf4:	f44f 6288 	mov.w	r2, #1088	; 0x440
   1fdf8:	e6d1      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fdfa:	2006      	movs	r0, #6
   1fdfc:	e6d2      	b.n	1fba4 <am_hal_cachectrl_control+0x3c>
   1fdfe:	2202      	movs	r2, #2
   1fe00:	e6cd      	b.n	1fb9e <am_hal_cachectrl_control+0x36>
   1fe02:	f000 fae1 	bl	203c8 <am_hal_interrupt_master_disable>
   1fe06:	4603      	mov	r3, r0
   1fe08:	480e      	ldr	r0, [pc, #56]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fe0a:	930d      	str	r3, [sp, #52]	; 0x34
   1fe0c:	f000 f952 	bl	200b4 <am_hal_flash_load_ui32>
   1fe10:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   1fe14:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
   1fe18:	f021 010f 	bic.w	r1, r1, #15
   1fe1c:	4321      	orrs	r1, r4
   1fe1e:	4809      	ldr	r0, [pc, #36]	; (1fe44 <am_hal_cachectrl_control+0x2dc>)
   1fe20:	f000 f94c 	bl	200bc <am_hal_flash_store_ui32>
   1fe24:	980d      	ldr	r0, [sp, #52]	; 0x34
   1fe26:	f000 fad3 	bl	203d0 <am_hal_interrupt_master_set>
   1fe2a:	e6d2      	b.n	1fbd2 <am_hal_cachectrl_control+0x6a>
   1fe2c:	4c04      	ldr	r4, [pc, #16]	; (1fe40 <am_hal_cachectrl_control+0x2d8>)
   1fe2e:	6122      	str	r2, [r4, #16]
   1fe30:	6163      	str	r3, [r4, #20]
   1fe32:	784a      	ldrb	r2, [r1, #1]
   1fe34:	6823      	ldr	r3, [r4, #0]
   1fe36:	f362 0382 	bfi	r3, r2, #2, #1
   1fe3a:	6023      	str	r3, [r4, #0]
   1fe3c:	e6b2      	b.n	1fba4 <am_hal_cachectrl_control+0x3c>
   1fe3e:	bf00      	nop
   1fe40:	40018000 	.word	0x40018000
   1fe44:	40018004 	.word	0x40018004
   1fe48:	f800000f 	.word	0xf800000f

0001fe4c <am_hal_clkgen_control>:
   1fe4c:	4b41      	ldr	r3, [pc, #260]	; (1ff54 <am_hal_clkgen_control+0x108>)
   1fe4e:	681a      	ldr	r2, [r3, #0]
   1fe50:	b912      	cbnz	r2, 1fe58 <am_hal_clkgen_control+0xc>
   1fe52:	4a41      	ldr	r2, [pc, #260]	; (1ff58 <am_hal_clkgen_control+0x10c>)
   1fe54:	6812      	ldr	r2, [r2, #0]
   1fe56:	601a      	str	r2, [r3, #0]
   1fe58:	2809      	cmp	r0, #9
   1fe5a:	d878      	bhi.n	1ff4e <am_hal_clkgen_control+0x102>
   1fe5c:	e8df f000 	tbb	[pc, r0]
   1fe60:	261e160d 	.word	0x261e160d
   1fe64:	524c423a 	.word	0x524c423a
   1fe68:	055a      	.short	0x055a
   1fe6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1fe6e:	2000      	movs	r0, #0
   1fe70:	6a1a      	ldr	r2, [r3, #32]
   1fe72:	f36f 0200 	bfc	r2, #0, #1
   1fe76:	621a      	str	r2, [r3, #32]
   1fe78:	4770      	bx	lr
   1fe7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1fe7e:	2200      	movs	r2, #0
   1fe80:	2147      	movs	r1, #71	; 0x47
   1fe82:	6159      	str	r1, [r3, #20]
   1fe84:	4610      	mov	r0, r2
   1fe86:	619a      	str	r2, [r3, #24]
   1fe88:	615a      	str	r2, [r3, #20]
   1fe8a:	4770      	bx	lr
   1fe8c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1fe90:	2000      	movs	r0, #0
   1fe92:	68d3      	ldr	r3, [r2, #12]
   1fe94:	f023 0301 	bic.w	r3, r3, #1
   1fe98:	60d3      	str	r3, [r2, #12]
   1fe9a:	4770      	bx	lr
   1fe9c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1fea0:	2000      	movs	r0, #0
   1fea2:	68d3      	ldr	r3, [r2, #12]
   1fea4:	f023 0302 	bic.w	r3, r3, #2
   1fea8:	60d3      	str	r3, [r2, #12]
   1feaa:	4770      	bx	lr
   1feac:	4a2b      	ldr	r2, [pc, #172]	; (1ff5c <am_hal_clkgen_control+0x110>)
   1feae:	68d3      	ldr	r3, [r2, #12]
   1feb0:	b2db      	uxtb	r3, r3
   1feb2:	2b21      	cmp	r3, #33	; 0x21
   1feb4:	d106      	bne.n	1fec4 <am_hal_clkgen_control+0x78>
   1feb6:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1feba:	2101      	movs	r1, #1
   1febc:	f361 2309 	bfi	r3, r1, #8, #2
   1fec0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1fec4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1fec8:	2000      	movs	r0, #0
   1feca:	68d3      	ldr	r3, [r2, #12]
   1fecc:	f043 0301 	orr.w	r3, r3, #1
   1fed0:	60d3      	str	r3, [r2, #12]
   1fed2:	4770      	bx	lr
   1fed4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1fed8:	2000      	movs	r0, #0
   1feda:	68d3      	ldr	r3, [r2, #12]
   1fedc:	f043 0302 	orr.w	r3, r3, #2
   1fee0:	60d3      	str	r3, [r2, #12]
   1fee2:	4770      	bx	lr
   1fee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1fee8:	2200      	movs	r2, #0
   1feea:	2047      	movs	r0, #71	; 0x47
   1feec:	2101      	movs	r1, #1
   1feee:	6158      	str	r0, [r3, #20]
   1fef0:	6199      	str	r1, [r3, #24]
   1fef2:	4610      	mov	r0, r2
   1fef4:	615a      	str	r2, [r3, #20]
   1fef6:	4770      	bx	lr
   1fef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1fefc:	2000      	movs	r0, #0
   1fefe:	68da      	ldr	r2, [r3, #12]
   1ff00:	60da      	str	r2, [r3, #12]
   1ff02:	4770      	bx	lr
   1ff04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1ff08:	2000      	movs	r0, #0
   1ff0a:	68d3      	ldr	r3, [r2, #12]
   1ff0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ff10:	60d3      	str	r3, [r2, #12]
   1ff12:	4770      	bx	lr
   1ff14:	b510      	push	{r4, lr}
   1ff16:	4a11      	ldr	r2, [pc, #68]	; (1ff5c <am_hal_clkgen_control+0x110>)
   1ff18:	68d3      	ldr	r3, [r2, #12]
   1ff1a:	b2db      	uxtb	r3, r3
   1ff1c:	2b21      	cmp	r3, #33	; 0x21
   1ff1e:	460c      	mov	r4, r1
   1ff20:	d008      	beq.n	1ff34 <am_hal_clkgen_control+0xe8>
   1ff22:	b194      	cbz	r4, 1ff4a <am_hal_clkgen_control+0xfe>
   1ff24:	6823      	ldr	r3, [r4, #0]
   1ff26:	f043 0301 	orr.w	r3, r3, #1
   1ff2a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1ff2e:	2000      	movs	r0, #0
   1ff30:	6213      	str	r3, [r2, #32]
   1ff32:	bd10      	pop	{r4, pc}
   1ff34:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
   1ff38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1ff3c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
   1ff40:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
   1ff44:	f000 f86c 	bl	20020 <am_hal_flash_delay>
   1ff48:	e7eb      	b.n	1ff22 <am_hal_clkgen_control+0xd6>
   1ff4a:	4b05      	ldr	r3, [pc, #20]	; (1ff60 <am_hal_clkgen_control+0x114>)
   1ff4c:	e7ed      	b.n	1ff2a <am_hal_clkgen_control+0xde>
   1ff4e:	2006      	movs	r0, #6
   1ff50:	4770      	bx	lr
   1ff52:	bf00      	nop
   1ff54:	100063d8 	.word	0x100063d8
   1ff58:	4ffff000 	.word	0x4ffff000
   1ff5c:	40020000 	.word	0x40020000
   1ff60:	0025b801 	.word	0x0025b801

0001ff64 <am_hal_clkgen_status_get>:
   1ff64:	b1a8      	cbz	r0, 1ff92 <am_hal_clkgen_status_get+0x2e>
   1ff66:	b410      	push	{r4}
   1ff68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   1ff6c:	490a      	ldr	r1, [pc, #40]	; (1ff98 <am_hal_clkgen_status_get+0x34>)
   1ff6e:	6994      	ldr	r4, [r2, #24]
   1ff70:	4b0a      	ldr	r3, [pc, #40]	; (1ff9c <am_hal_clkgen_status_get+0x38>)
   1ff72:	f014 0f01 	tst.w	r4, #1
   1ff76:	bf08      	it	eq
   1ff78:	460b      	moveq	r3, r1
   1ff7a:	6003      	str	r3, [r0, #0]
   1ff7c:	69d3      	ldr	r3, [r2, #28]
   1ff7e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ff82:	f003 0201 	and.w	r2, r3, #1
   1ff86:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1ff8a:	6042      	str	r2, [r0, #4]
   1ff8c:	7203      	strb	r3, [r0, #8]
   1ff8e:	2000      	movs	r0, #0
   1ff90:	4770      	bx	lr
   1ff92:	2006      	movs	r0, #6
   1ff94:	4770      	bx	lr
   1ff96:	bf00      	nop
   1ff98:	02dc6c00 	.word	0x02dc6c00
   1ff9c:	016e3600 	.word	0x016e3600

0001ffa0 <am_hal_ctimer_int_service>:
   1ffa0:	b198      	cbz	r0, 1ffca <am_hal_ctimer_int_service+0x2a>
   1ffa2:	b570      	push	{r4, r5, r6, lr}
   1ffa4:	4e09      	ldr	r6, [pc, #36]	; (1ffcc <am_hal_ctimer_int_service+0x2c>)
   1ffa6:	4604      	mov	r4, r0
   1ffa8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   1ffac:	fab4 f384 	clz	r3, r4
   1ffb0:	f1c3 021f 	rsb	r2, r3, #31
   1ffb4:	fa25 f303 	lsr.w	r3, r5, r3
   1ffb8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
   1ffbc:	ea24 0403 	bic.w	r4, r4, r3
   1ffc0:	b102      	cbz	r2, 1ffc4 <am_hal_ctimer_int_service+0x24>
   1ffc2:	4790      	blx	r2
   1ffc4:	2c00      	cmp	r4, #0
   1ffc6:	d1f1      	bne.n	1ffac <am_hal_ctimer_int_service+0xc>
   1ffc8:	bd70      	pop	{r4, r5, r6, pc}
   1ffca:	4770      	bx	lr
   1ffcc:	10006358 	.word	0x10006358

0001ffd0 <am_hal_ctimer_int_clear>:
   1ffd0:	b510      	push	{r4, lr}
   1ffd2:	b082      	sub	sp, #8
   1ffd4:	4604      	mov	r4, r0
   1ffd6:	f000 f9f7 	bl	203c8 <am_hal_interrupt_master_disable>
   1ffda:	4b04      	ldr	r3, [pc, #16]	; (1ffec <am_hal_ctimer_int_clear+0x1c>)
   1ffdc:	9001      	str	r0, [sp, #4]
   1ffde:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
   1ffe2:	9801      	ldr	r0, [sp, #4]
   1ffe4:	f000 f9f4 	bl	203d0 <am_hal_interrupt_master_set>
   1ffe8:	b002      	add	sp, #8
   1ffea:	bd10      	pop	{r4, pc}
   1ffec:	40008000 	.word	0x40008000

0001fff0 <am_hal_ctimer_int_status_get>:
   1fff0:	b510      	push	{r4, lr}
   1fff2:	b082      	sub	sp, #8
   1fff4:	4604      	mov	r4, r0
   1fff6:	f000 f9e7 	bl	203c8 <am_hal_interrupt_master_disable>
   1fffa:	4b08      	ldr	r3, [pc, #32]	; (2001c <am_hal_ctimer_int_status_get+0x2c>)
   1fffc:	9001      	str	r0, [sp, #4]
   1fffe:	b93c      	cbnz	r4, 20010 <am_hal_ctimer_int_status_get+0x20>
   20000:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   20004:	9801      	ldr	r0, [sp, #4]
   20006:	f000 f9e3 	bl	203d0 <am_hal_interrupt_master_set>
   2000a:	4620      	mov	r0, r4
   2000c:	b002      	add	sp, #8
   2000e:	bd10      	pop	{r4, pc}
   20010:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   20014:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   20018:	401c      	ands	r4, r3
   2001a:	e7f3      	b.n	20004 <am_hal_ctimer_int_status_get+0x14>
   2001c:	40008000 	.word	0x40008000

00020020 <am_hal_flash_delay>:
   20020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   20024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   20026:	075b      	lsls	r3, r3, #29
   20028:	bf46      	itte	mi
   2002a:	0040      	lslmi	r0, r0, #1
   2002c:	230e      	movmi	r3, #14
   2002e:	230b      	movpl	r3, #11
   20030:	4298      	cmp	r0, r3
   20032:	d800      	bhi.n	20036 <am_hal_flash_delay+0x16>
   20034:	4770      	bx	lr
   20036:	1ac0      	subs	r0, r0, r3
   20038:	4b00      	ldr	r3, [pc, #0]	; (2003c <am_hal_flash_delay+0x1c>)
   2003a:	4718      	bx	r3
   2003c:	0800009d 	.word	0x0800009d

00020040 <am_hal_flash_delay_status_check>:
   20040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20044:	f89d 4020 	ldrb.w	r4, [sp, #32]
   20048:	460d      	mov	r5, r1
   2004a:	4616      	mov	r6, r2
   2004c:	461f      	mov	r7, r3
   2004e:	b1b4      	cbz	r4, 2007e <am_hal_flash_delay_status_check+0x3e>
   20050:	4604      	mov	r4, r0
   20052:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   20056:	f8df 8058 	ldr.w	r8, [pc, #88]	; 200b0 <am_hal_flash_delay_status_check+0x70>
   2005a:	e009      	b.n	20070 <am_hal_flash_delay_status_check+0x30>
   2005c:	b324      	cbz	r4, 200a8 <am_hal_flash_delay_status_check+0x68>
   2005e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   20062:	f013 0f04 	tst.w	r3, #4
   20066:	bf14      	ite	ne
   20068:	2012      	movne	r0, #18
   2006a:	2005      	moveq	r0, #5
   2006c:	3c01      	subs	r4, #1
   2006e:	47c0      	blx	r8
   20070:	682b      	ldr	r3, [r5, #0]
   20072:	4033      	ands	r3, r6
   20074:	429f      	cmp	r7, r3
   20076:	d1f1      	bne.n	2005c <am_hal_flash_delay_status_check+0x1c>
   20078:	2000      	movs	r0, #0
   2007a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2007e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 200b0 <am_hal_flash_delay_status_check+0x70>
   20082:	4604      	mov	r4, r0
   20084:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   20088:	e009      	b.n	2009e <am_hal_flash_delay_status_check+0x5e>
   2008a:	b16c      	cbz	r4, 200a8 <am_hal_flash_delay_status_check+0x68>
   2008c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   20090:	f013 0f04 	tst.w	r3, #4
   20094:	bf14      	ite	ne
   20096:	2012      	movne	r0, #18
   20098:	2005      	moveq	r0, #5
   2009a:	3c01      	subs	r4, #1
   2009c:	47c0      	blx	r8
   2009e:	682b      	ldr	r3, [r5, #0]
   200a0:	4033      	ands	r3, r6
   200a2:	429f      	cmp	r7, r3
   200a4:	d0f1      	beq.n	2008a <am_hal_flash_delay_status_check+0x4a>
   200a6:	e7e7      	b.n	20078 <am_hal_flash_delay_status_check+0x38>
   200a8:	2004      	movs	r0, #4
   200aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   200ae:	bf00      	nop
   200b0:	0800009d 	.word	0x0800009d

000200b4 <am_hal_flash_load_ui32>:
   200b4:	4b00      	ldr	r3, [pc, #0]	; (200b8 <am_hal_flash_load_ui32+0x4>)
   200b6:	4718      	bx	r3
   200b8:	08000075 	.word	0x08000075

000200bc <am_hal_flash_store_ui32>:
   200bc:	4b01      	ldr	r3, [pc, #4]	; (200c4 <am_hal_flash_store_ui32+0x8>)
   200be:	f043 0301 	orr.w	r3, r3, #1
   200c2:	4718      	bx	r3
   200c4:	10002fac 	.word	0x10002fac

000200c8 <am_hal_gpio_pinconfig>:
   200c8:	2831      	cmp	r0, #49	; 0x31
   200ca:	d901      	bls.n	200d0 <am_hal_gpio_pinconfig+0x8>
   200cc:	2006      	movs	r0, #6
   200ce:	4770      	bx	lr
   200d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200d4:	f001 0307 	and.w	r3, r1, #7
   200d8:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
   200dc:	b085      	sub	sp, #20
   200de:	ea4f 02c3 	mov.w	r2, r3, lsl #3
   200e2:	f3c1 04c1 	ubfx	r4, r1, #3, #2
   200e6:	d014      	beq.n	20112 <am_hal_gpio_pinconfig+0x4a>
   200e8:	f3c1 1742 	ubfx	r7, r1, #5, #3
   200ec:	1dbd      	adds	r5, r7, #6
   200ee:	f005 0507 	and.w	r5, r5, #7
   200f2:	2d03      	cmp	r5, #3
   200f4:	f042 0201 	orr.w	r2, r2, #1
   200f8:	f200 80a7 	bhi.w	2024a <am_hal_gpio_pinconfig+0x182>
   200fc:	4d82      	ldr	r5, [pc, #520]	; (20308 <am_hal_gpio_pinconfig+0x240>)
   200fe:	5c2d      	ldrb	r5, [r5, r0]
   20100:	07ee      	lsls	r6, r5, #31
   20102:	d403      	bmi.n	2010c <am_hal_gpio_pinconfig+0x44>
   20104:	4881      	ldr	r0, [pc, #516]	; (2030c <am_hal_gpio_pinconfig+0x244>)
   20106:	b005      	add	sp, #20
   20108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2010c:	3f02      	subs	r7, #2
   2010e:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
   20112:	2c00      	cmp	r4, #0
   20114:	f040 8091 	bne.w	2023a <am_hal_gpio_pinconfig+0x172>
   20118:	4c7d      	ldr	r4, [pc, #500]	; (20310 <am_hal_gpio_pinconfig+0x248>)
   2011a:	4d7e      	ldr	r5, [pc, #504]	; (20314 <am_hal_gpio_pinconfig+0x24c>)
   2011c:	5c24      	ldrb	r4, [r4, r0]
   2011e:	5c2d      	ldrb	r5, [r5, r0]
   20120:	411c      	asrs	r4, r3
   20122:	f014 0f01 	tst.w	r4, #1
   20126:	bf0c      	ite	eq
   20128:	2400      	moveq	r4, #0
   2012a:	2402      	movne	r4, #2
   2012c:	42ab      	cmp	r3, r5
   2012e:	ea42 0204 	orr.w	r2, r2, r4
   20132:	f000 8096 	beq.w	20262 <am_hal_gpio_pinconfig+0x19a>
   20136:	f3c1 3341 	ubfx	r3, r1, #13, #2
   2013a:	105d      	asrs	r5, r3, #1
   2013c:	f3c1 2681 	ubfx	r6, r1, #10, #2
   20140:	00db      	lsls	r3, r3, #3
   20142:	f3c1 2e07 	ubfx	lr, r1, #8, #8
   20146:	f003 0408 	and.w	r4, r3, #8
   2014a:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2014e:	f00e 060c 	and.w	r6, lr, #12
   20152:	f3c1 3500 	ubfx	r5, r1, #12, #1
   20156:	2e04      	cmp	r6, #4
   20158:	ea43 0304 	orr.w	r3, r3, r4
   2015c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
   20160:	462c      	mov	r4, r5
   20162:	f000 808b 	beq.w	2027c <am_hal_gpio_pinconfig+0x1b4>
   20166:	4c6c      	ldr	r4, [pc, #432]	; (20318 <am_hal_gpio_pinconfig+0x250>)
   20168:	6827      	ldr	r7, [r4, #0]
   2016a:	1bcf      	subs	r7, r1, r7
   2016c:	fab7 f787 	clz	r7, r7
   20170:	097f      	lsrs	r7, r7, #5
   20172:	f01e 0f60 	tst.w	lr, #96	; 0x60
   20176:	bf04      	itt	eq
   20178:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
   2017c:	f364 0300 	bfieq	r3, r4, #0, #1
   20180:	0084      	lsls	r4, r0, #2
   20182:	f3c1 2101 	ubfx	r1, r1, #8, #2
   20186:	2902      	cmp	r1, #2
   20188:	ea4f 05c0 	mov.w	r5, r0, lsl #3
   2018c:	d078      	beq.n	20280 <am_hal_gpio_pinconfig+0x1b8>
   2018e:	d87f      	bhi.n	20290 <am_hal_gpio_pinconfig+0x1c8>
   20190:	2901      	cmp	r1, #1
   20192:	f04f 0100 	mov.w	r1, #0
   20196:	bf08      	it	eq
   20198:	f042 0204 	orreq.w	r2, r2, #4
   2019c:	f005 0518 	and.w	r5, r5, #24
   201a0:	9101      	str	r1, [sp, #4]
   201a2:	f004 041c 	and.w	r4, r4, #28
   201a6:	f020 0a03 	bic.w	sl, r0, #3
   201aa:	f04f 090f 	mov.w	r9, #15
   201ae:	fa09 f904 	lsl.w	r9, r9, r4
   201b2:	0841      	lsrs	r1, r0, #1
   201b4:	26ff      	movs	r6, #255	; 0xff
   201b6:	fa03 f404 	lsl.w	r4, r3, r4
   201ba:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
   201be:	40ae      	lsls	r6, r5
   201c0:	9300      	str	r3, [sp, #0]
   201c2:	fa02 f505 	lsl.w	r5, r2, r5
   201c6:	4683      	mov	fp, r0
   201c8:	f021 0803 	bic.w	r8, r1, #3
   201cc:	f000 f8fc 	bl	203c8 <am_hal_interrupt_master_disable>
   201d0:	9b00      	ldr	r3, [sp, #0]
   201d2:	9003      	str	r0, [sp, #12]
   201d4:	ea6f 0909 	mvn.w	r9, r9
   201d8:	43f6      	mvns	r6, r6
   201da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   201de:	f8df e15c 	ldr.w	lr, [pc, #348]	; 2033c <am_hal_gpio_pinconfig+0x274>
   201e2:	4a4e      	ldr	r2, [pc, #312]	; (2031c <am_hal_gpio_pinconfig+0x254>)
   201e4:	b15f      	cbz	r7, 201fe <am_hal_gpio_pinconfig+0x136>
   201e6:	ea4f 07db 	mov.w	r7, fp, lsr #3
   201ea:	f00b 001f 	and.w	r0, fp, #31
   201ee:	f007 0704 	and.w	r7, r7, #4
   201f2:	f04f 0b01 	mov.w	fp, #1
   201f6:	494a      	ldr	r1, [pc, #296]	; (20320 <am_hal_gpio_pinconfig+0x258>)
   201f8:	fa0b f000 	lsl.w	r0, fp, r0
   201fc:	5078      	str	r0, [r7, r1]
   201fe:	4849      	ldr	r0, [pc, #292]	; (20324 <am_hal_gpio_pinconfig+0x25c>)
   20200:	2773      	movs	r7, #115	; 0x73
   20202:	6607      	str	r7, [r0, #96]	; 0x60
   20204:	681f      	ldr	r7, [r3, #0]
   20206:	4037      	ands	r7, r6
   20208:	433d      	orrs	r5, r7
   2020a:	601d      	str	r5, [r3, #0]
   2020c:	f858 300e 	ldr.w	r3, [r8, lr]
   20210:	ea09 0303 	and.w	r3, r9, r3
   20214:	4323      	orrs	r3, r4
   20216:	f848 300e 	str.w	r3, [r8, lr]
   2021a:	f85a 3002 	ldr.w	r3, [sl, r2]
   2021e:	401e      	ands	r6, r3
   20220:	9b01      	ldr	r3, [sp, #4]
   20222:	2400      	movs	r4, #0
   20224:	431e      	orrs	r6, r3
   20226:	f84a 6002 	str.w	r6, [sl, r2]
   2022a:	6604      	str	r4, [r0, #96]	; 0x60
   2022c:	9803      	ldr	r0, [sp, #12]
   2022e:	f000 f8cf 	bl	203d0 <am_hal_interrupt_master_set>
   20232:	4620      	mov	r0, r4
   20234:	b005      	add	sp, #20
   20236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2023a:	2c01      	cmp	r4, #1
   2023c:	d017      	beq.n	2026e <am_hal_gpio_pinconfig+0x1a6>
   2023e:	2c02      	cmp	r4, #2
   20240:	d035      	beq.n	202ae <am_hal_gpio_pinconfig+0x1e6>
   20242:	4839      	ldr	r0, [pc, #228]	; (20328 <am_hal_gpio_pinconfig+0x260>)
   20244:	b005      	add	sp, #20
   20246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2024a:	2ec0      	cmp	r6, #192	; 0xc0
   2024c:	d02a      	beq.n	202a4 <am_hal_gpio_pinconfig+0x1dc>
   2024e:	2e20      	cmp	r6, #32
   20250:	f47f af5f 	bne.w	20112 <am_hal_gpio_pinconfig+0x4a>
   20254:	2814      	cmp	r0, #20
   20256:	f43f af55 	beq.w	20104 <am_hal_gpio_pinconfig+0x3c>
   2025a:	2c00      	cmp	r4, #0
   2025c:	f43f af5c 	beq.w	20118 <am_hal_gpio_pinconfig+0x50>
   20260:	e7eb      	b.n	2023a <am_hal_gpio_pinconfig+0x172>
   20262:	f3c1 4402 	ubfx	r4, r1, #16, #3
   20266:	2c07      	cmp	r4, #7
   20268:	d128      	bne.n	202bc <am_hal_gpio_pinconfig+0x1f4>
   2026a:	4830      	ldr	r0, [pc, #192]	; (2032c <am_hal_gpio_pinconfig+0x264>)
   2026c:	e74b      	b.n	20106 <am_hal_gpio_pinconfig+0x3e>
   2026e:	4c26      	ldr	r4, [pc, #152]	; (20308 <am_hal_gpio_pinconfig+0x240>)
   20270:	5c24      	ldrb	r4, [r4, r0]
   20272:	07a5      	lsls	r5, r4, #30
   20274:	d5e5      	bpl.n	20242 <am_hal_gpio_pinconfig+0x17a>
   20276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2027a:	e74d      	b.n	20118 <am_hal_gpio_pinconfig+0x50>
   2027c:	2701      	movs	r7, #1
   2027e:	e778      	b.n	20172 <am_hal_gpio_pinconfig+0xaa>
   20280:	f005 0518 	and.w	r5, r5, #24
   20284:	f04f 0801 	mov.w	r8, #1
   20288:	fa08 f105 	lsl.w	r1, r8, r5
   2028c:	9101      	str	r1, [sp, #4]
   2028e:	e788      	b.n	201a2 <am_hal_gpio_pinconfig+0xda>
   20290:	f005 0518 	and.w	r5, r5, #24
   20294:	f04f 0801 	mov.w	r8, #1
   20298:	fa08 f105 	lsl.w	r1, r8, r5
   2029c:	f042 0204 	orr.w	r2, r2, #4
   202a0:	9101      	str	r1, [sp, #4]
   202a2:	e77e      	b.n	201a2 <am_hal_gpio_pinconfig+0xda>
   202a4:	2814      	cmp	r0, #20
   202a6:	f43f af34 	beq.w	20112 <am_hal_gpio_pinconfig+0x4a>
   202aa:	4821      	ldr	r0, [pc, #132]	; (20330 <am_hal_gpio_pinconfig+0x268>)
   202ac:	e72b      	b.n	20106 <am_hal_gpio_pinconfig+0x3e>
   202ae:	4c16      	ldr	r4, [pc, #88]	; (20308 <am_hal_gpio_pinconfig+0x240>)
   202b0:	5c24      	ldrb	r4, [r4, r0]
   202b2:	0764      	lsls	r4, r4, #29
   202b4:	d5c5      	bpl.n	20242 <am_hal_gpio_pinconfig+0x17a>
   202b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   202ba:	e72d      	b.n	20118 <am_hal_gpio_pinconfig+0x50>
   202bc:	4d1d      	ldr	r5, [pc, #116]	; (20334 <am_hal_gpio_pinconfig+0x26c>)
   202be:	f3c1 43c1 	ubfx	r3, r1, #19, #2
   202c2:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
   202c6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
   202ca:	429e      	cmp	r6, r3
   202cc:	d00c      	beq.n	202e8 <am_hal_gpio_pinconfig+0x220>
   202ce:	0084      	lsls	r4, r0, #2
   202d0:	4425      	add	r5, r4
   202d2:	786e      	ldrb	r6, [r5, #1]
   202d4:	429e      	cmp	r6, r3
   202d6:	d012      	beq.n	202fe <am_hal_gpio_pinconfig+0x236>
   202d8:	78ae      	ldrb	r6, [r5, #2]
   202da:	429e      	cmp	r6, r3
   202dc:	d00d      	beq.n	202fa <am_hal_gpio_pinconfig+0x232>
   202de:	78ed      	ldrb	r5, [r5, #3]
   202e0:	429d      	cmp	r5, r3
   202e2:	d00e      	beq.n	20302 <am_hal_gpio_pinconfig+0x23a>
   202e4:	4814      	ldr	r0, [pc, #80]	; (20338 <am_hal_gpio_pinconfig+0x270>)
   202e6:	e70e      	b.n	20106 <am_hal_gpio_pinconfig+0x3e>
   202e8:	2300      	movs	r3, #0
   202ea:	0084      	lsls	r4, r0, #2
   202ec:	005b      	lsls	r3, r3, #1
   202ee:	f3c1 5540 	ubfx	r5, r1, #21, #1
   202f2:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
   202f6:	2700      	movs	r7, #0
   202f8:	e743      	b.n	20182 <am_hal_gpio_pinconfig+0xba>
   202fa:	2302      	movs	r3, #2
   202fc:	e7f6      	b.n	202ec <am_hal_gpio_pinconfig+0x224>
   202fe:	2301      	movs	r3, #1
   20300:	e7f4      	b.n	202ec <am_hal_gpio_pinconfig+0x224>
   20302:	2303      	movs	r3, #3
   20304:	e7f2      	b.n	202ec <am_hal_gpio_pinconfig+0x224>
   20306:	bf00      	nop
   20308:	00024cf4 	.word	0x00024cf4
   2030c:	08000100 	.word	0x08000100
   20310:	00024df0 	.word	0x00024df0
   20314:	00024e2c 	.word	0x00024e2c
   20318:	00024e24 	.word	0x00024e24
   2031c:	400100e0 	.word	0x400100e0
   20320:	400100b4 	.word	0x400100b4
   20324:	40010000 	.word	0x40010000
   20328:	08000102 	.word	0x08000102
   2032c:	08000103 	.word	0x08000103
   20330:	08000101 	.word	0x08000101
   20334:	00024d28 	.word	0x00024d28
   20338:	08000104 	.word	0x08000104
   2033c:	40010040 	.word	0x40010040

00020340 <am_hal_gpio_state_write>:
   20340:	2831      	cmp	r0, #49	; 0x31
   20342:	d901      	bls.n	20348 <am_hal_gpio_state_write+0x8>
   20344:	2005      	movs	r0, #5
   20346:	4770      	bx	lr
   20348:	2905      	cmp	r1, #5
   2034a:	d901      	bls.n	20350 <am_hal_gpio_state_write+0x10>
   2034c:	2006      	movs	r0, #6
   2034e:	4770      	bx	lr
   20350:	b570      	push	{r4, r5, r6, lr}
   20352:	f000 031f 	and.w	r3, r0, #31
   20356:	b082      	sub	sp, #8
   20358:	08c0      	lsrs	r0, r0, #3
   2035a:	2201      	movs	r2, #1
   2035c:	460d      	mov	r5, r1
   2035e:	f000 0404 	and.w	r4, r0, #4
   20362:	fa02 f603 	lsl.w	r6, r2, r3
   20366:	f000 f82f 	bl	203c8 <am_hal_interrupt_master_disable>
   2036a:	1e69      	subs	r1, r5, #1
   2036c:	9001      	str	r0, [sp, #4]
   2036e:	2904      	cmp	r1, #4
   20370:	d817      	bhi.n	203a2 <am_hal_gpio_state_write+0x62>
   20372:	e8df f001 	tbb	[pc, r1]
   20376:	0e13      	.short	0x0e13
   20378:	030b      	.short	0x030b
   2037a:	19          	.byte	0x19
   2037b:	00          	.byte	0x00
   2037c:	4b0d      	ldr	r3, [pc, #52]	; (203b4 <am_hal_gpio_state_write+0x74>)
   2037e:	50e6      	str	r6, [r4, r3]
   20380:	9801      	ldr	r0, [sp, #4]
   20382:	f000 f825 	bl	203d0 <am_hal_interrupt_master_set>
   20386:	2000      	movs	r0, #0
   20388:	b002      	add	sp, #8
   2038a:	bd70      	pop	{r4, r5, r6, pc}
   2038c:	4b0a      	ldr	r3, [pc, #40]	; (203b8 <am_hal_gpio_state_write+0x78>)
   2038e:	50e6      	str	r6, [r4, r3]
   20390:	e7f6      	b.n	20380 <am_hal_gpio_state_write+0x40>
   20392:	4a0a      	ldr	r2, [pc, #40]	; (203bc <am_hal_gpio_state_write+0x7c>)
   20394:	58a3      	ldr	r3, [r4, r2]
   20396:	4073      	eors	r3, r6
   20398:	50a3      	str	r3, [r4, r2]
   2039a:	e7f1      	b.n	20380 <am_hal_gpio_state_write+0x40>
   2039c:	4b08      	ldr	r3, [pc, #32]	; (203c0 <am_hal_gpio_state_write+0x80>)
   2039e:	50e6      	str	r6, [r4, r3]
   203a0:	e7ee      	b.n	20380 <am_hal_gpio_state_write+0x40>
   203a2:	4b08      	ldr	r3, [pc, #32]	; (203c4 <am_hal_gpio_state_write+0x84>)
   203a4:	50e6      	str	r6, [r4, r3]
   203a6:	e7eb      	b.n	20380 <am_hal_gpio_state_write+0x40>
   203a8:	4a03      	ldr	r2, [pc, #12]	; (203b8 <am_hal_gpio_state_write+0x78>)
   203aa:	58a3      	ldr	r3, [r4, r2]
   203ac:	4073      	eors	r3, r6
   203ae:	50a3      	str	r3, [r4, r2]
   203b0:	e7e6      	b.n	20380 <am_hal_gpio_state_write+0x40>
   203b2:	bf00      	nop
   203b4:	400100a8 	.word	0x400100a8
   203b8:	400100b4 	.word	0x400100b4
   203bc:	40010088 	.word	0x40010088
   203c0:	40010090 	.word	0x40010090
   203c4:	40010098 	.word	0x40010098

000203c8 <am_hal_interrupt_master_disable>:
   203c8:	f3ef 8010 	mrs	r0, PRIMASK
   203cc:	b672      	cpsid	i
   203ce:	4770      	bx	lr

000203d0 <am_hal_interrupt_master_set>:
   203d0:	f380 8810 	msr	PRIMASK, r0
   203d4:	4770      	bx	lr
   203d6:	bf00      	nop

000203d8 <am_hal_mcuctrl_info_get>:
   203d8:	b4f0      	push	{r4, r5, r6, r7}
   203da:	b121      	cbz	r1, 203e6 <am_hal_mcuctrl_info_get+0xe>
   203dc:	2801      	cmp	r0, #1
   203de:	d038      	beq.n	20452 <am_hal_mcuctrl_info_get+0x7a>
   203e0:	d320      	bcc.n	20424 <am_hal_mcuctrl_info_get+0x4c>
   203e2:	2802      	cmp	r0, #2
   203e4:	d002      	beq.n	203ec <am_hal_mcuctrl_info_get+0x14>
   203e6:	2006      	movs	r0, #6
   203e8:	bcf0      	pop	{r4, r5, r6, r7}
   203ea:	4770      	bx	lr
   203ec:	4a41      	ldr	r2, [pc, #260]	; (204f4 <am_hal_mcuctrl_info_get+0x11c>)
   203ee:	684d      	ldr	r5, [r1, #4]
   203f0:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   203f4:	694c      	ldr	r4, [r1, #20]
   203f6:	f003 0601 	and.w	r6, r3, #1
   203fa:	f3c3 0040 	ubfx	r0, r3, #1, #1
   203fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20402:	700e      	strb	r6, [r1, #0]
   20404:	7208      	strb	r0, [r1, #8]
   20406:	740b      	strb	r3, [r1, #16]
   20408:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   2040c:	60cb      	str	r3, [r1, #12]
   2040e:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
   20412:	4328      	orrs	r0, r5
   20414:	6048      	str	r0, [r1, #4]
   20416:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
   2041a:	4323      	orrs	r3, r4
   2041c:	2000      	movs	r0, #0
   2041e:	614b      	str	r3, [r1, #20]
   20420:	bcf0      	pop	{r4, r5, r6, r7}
   20422:	4770      	bx	lr
   20424:	4a33      	ldr	r2, [pc, #204]	; (204f4 <am_hal_mcuctrl_info_get+0x11c>)
   20426:	6993      	ldr	r3, [r2, #24]
   20428:	f3c3 1080 	ubfx	r0, r3, #6, #1
   2042c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   20430:	7008      	strb	r0, [r1, #0]
   20432:	704b      	strb	r3, [r1, #1]
   20434:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
   20438:	f3c3 6381 	ubfx	r3, r3, #26, #2
   2043c:	710b      	strb	r3, [r1, #4]
   2043e:	6953      	ldr	r3, [r2, #20]
   20440:	f3c3 0240 	ubfx	r2, r3, #1, #1
   20444:	f003 0301 	and.w	r3, r3, #1
   20448:	2000      	movs	r0, #0
   2044a:	708a      	strb	r2, [r1, #2]
   2044c:	70cb      	strb	r3, [r1, #3]
   2044e:	bcf0      	pop	{r4, r5, r6, r7}
   20450:	4770      	bx	lr
   20452:	4b28      	ldr	r3, [pc, #160]	; (204f4 <am_hal_mcuctrl_info_get+0x11c>)
   20454:	4c28      	ldr	r4, [pc, #160]	; (204f8 <am_hal_mcuctrl_info_get+0x120>)
   20456:	681a      	ldr	r2, [r3, #0]
   20458:	600a      	str	r2, [r1, #0]
   2045a:	6858      	ldr	r0, [r3, #4]
   2045c:	6048      	str	r0, [r1, #4]
   2045e:	6898      	ldr	r0, [r3, #8]
   20460:	6088      	str	r0, [r1, #8]
   20462:	68d8      	ldr	r0, [r3, #12]
   20464:	60c8      	str	r0, [r1, #12]
   20466:	691d      	ldr	r5, [r3, #16]
   20468:	4824      	ldr	r0, [pc, #144]	; (204fc <am_hal_mcuctrl_info_get+0x124>)
   2046a:	610d      	str	r5, [r1, #16]
   2046c:	f3c2 5703 	ubfx	r7, r2, #20, #4
   20470:	f3c2 4603 	ubfx	r6, r2, #16, #4
   20474:	695d      	ldr	r5, [r3, #20]
   20476:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   2047a:	4b21      	ldr	r3, [pc, #132]	; (20500 <am_hal_mcuctrl_info_get+0x128>)
   2047c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   20480:	6208      	str	r0, [r1, #32]
   20482:	f002 0201 	and.w	r2, r2, #1
   20486:	614d      	str	r5, [r1, #20]
   20488:	61cc      	str	r4, [r1, #28]
   2048a:	618a      	str	r2, [r1, #24]
   2048c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   20490:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   20494:	b2d0      	uxtb	r0, r2
   20496:	f004 020f 	and.w	r2, r4, #15
   2049a:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
   2049e:	624a      	str	r2, [r1, #36]	; 0x24
   204a0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   204a4:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
   204a8:	f3c2 1003 	ubfx	r0, r2, #4, #4
   204ac:	f004 020f 	and.w	r2, r4, #15
   204b0:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   204b4:	628a      	str	r2, [r1, #40]	; 0x28
   204b6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
   204ba:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   204be:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
   204c2:	f3c2 1203 	ubfx	r2, r2, #4, #4
   204c6:	4302      	orrs	r2, r0
   204c8:	62ca      	str	r2, [r1, #44]	; 0x2c
   204ca:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
   204ce:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
   204d2:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
   204d6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   204da:	b2c0      	uxtb	r0, r0
   204dc:	0400      	lsls	r0, r0, #16
   204de:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
   204e2:	b2d2      	uxtb	r2, r2
   204e4:	431a      	orrs	r2, r3
   204e6:	b2e3      	uxtb	r3, r4
   204e8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   204ec:	630b      	str	r3, [r1, #48]	; 0x30
   204ee:	2000      	movs	r0, #0
   204f0:	bcf0      	pop	{r4, r5, r6, r7}
   204f2:	4770      	bx	lr
   204f4:	40020000 	.word	0x40020000
   204f8:	00024e60 	.word	0x00024e60
   204fc:	00024ea0 	.word	0x00024ea0
   20500:	f0000f00 	.word	0xf0000f00

00020504 <am_hal_pwrctrl_periph_enable>:
   20504:	b570      	push	{r4, r5, r6, lr}
   20506:	b082      	sub	sp, #8
   20508:	4604      	mov	r4, r0
   2050a:	f7ff ff5d 	bl	203c8 <am_hal_interrupt_master_disable>
   2050e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20512:	4d0f      	ldr	r5, [pc, #60]	; (20550 <am_hal_pwrctrl_periph_enable+0x4c>)
   20514:	4e0f      	ldr	r6, [pc, #60]	; (20554 <am_hal_pwrctrl_periph_enable+0x50>)
   20516:	9001      	str	r0, [sp, #4]
   20518:	00a4      	lsls	r4, r4, #2
   2051a:	68aa      	ldr	r2, [r5, #8]
   2051c:	5933      	ldr	r3, [r6, r4]
   2051e:	4313      	orrs	r3, r2
   20520:	60ab      	str	r3, [r5, #8]
   20522:	9801      	ldr	r0, [sp, #4]
   20524:	4434      	add	r4, r6
   20526:	f7ff ff53 	bl	203d0 <am_hal_interrupt_master_set>
   2052a:	20a0      	movs	r0, #160	; 0xa0
   2052c:	f7ff fd78 	bl	20020 <am_hal_flash_delay>
   20530:	69ab      	ldr	r3, [r5, #24]
   20532:	6864      	ldr	r4, [r4, #4]
   20534:	4223      	tst	r3, r4
   20536:	d103      	bne.n	20540 <am_hal_pwrctrl_periph_enable+0x3c>
   20538:	20a0      	movs	r0, #160	; 0xa0
   2053a:	f7ff fd71 	bl	20020 <am_hal_flash_delay>
   2053e:	69ab      	ldr	r3, [r5, #24]
   20540:	4b03      	ldr	r3, [pc, #12]	; (20550 <am_hal_pwrctrl_periph_enable+0x4c>)
   20542:	699b      	ldr	r3, [r3, #24]
   20544:	4223      	tst	r3, r4
   20546:	bf0c      	ite	eq
   20548:	2001      	moveq	r0, #1
   2054a:	2000      	movne	r0, #0
   2054c:	b002      	add	sp, #8
   2054e:	bd70      	pop	{r4, r5, r6, pc}
   20550:	40021000 	.word	0x40021000
   20554:	00024ee0 	.word	0x00024ee0

00020558 <am_hal_pwrctrl_periph_disable>:
   20558:	b570      	push	{r4, r5, r6, lr}
   2055a:	b082      	sub	sp, #8
   2055c:	4604      	mov	r4, r0
   2055e:	f7ff ff33 	bl	203c8 <am_hal_interrupt_master_disable>
   20562:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20566:	4d10      	ldr	r5, [pc, #64]	; (205a8 <am_hal_pwrctrl_periph_disable+0x50>)
   20568:	4e10      	ldr	r6, [pc, #64]	; (205ac <am_hal_pwrctrl_periph_disable+0x54>)
   2056a:	9001      	str	r0, [sp, #4]
   2056c:	00a4      	lsls	r4, r4, #2
   2056e:	68ab      	ldr	r3, [r5, #8]
   20570:	5932      	ldr	r2, [r6, r4]
   20572:	ea23 0302 	bic.w	r3, r3, r2
   20576:	60ab      	str	r3, [r5, #8]
   20578:	9801      	ldr	r0, [sp, #4]
   2057a:	4434      	add	r4, r6
   2057c:	f7ff ff28 	bl	203d0 <am_hal_interrupt_master_set>
   20580:	20a0      	movs	r0, #160	; 0xa0
   20582:	f7ff fd4d 	bl	20020 <am_hal_flash_delay>
   20586:	69ab      	ldr	r3, [r5, #24]
   20588:	6864      	ldr	r4, [r4, #4]
   2058a:	4223      	tst	r3, r4
   2058c:	d003      	beq.n	20596 <am_hal_pwrctrl_periph_disable+0x3e>
   2058e:	20a0      	movs	r0, #160	; 0xa0
   20590:	f7ff fd46 	bl	20020 <am_hal_flash_delay>
   20594:	69ab      	ldr	r3, [r5, #24]
   20596:	4b04      	ldr	r3, [pc, #16]	; (205a8 <am_hal_pwrctrl_periph_disable+0x50>)
   20598:	699b      	ldr	r3, [r3, #24]
   2059a:	4223      	tst	r3, r4
   2059c:	bf14      	ite	ne
   2059e:	2001      	movne	r0, #1
   205a0:	2000      	moveq	r0, #0
   205a2:	b002      	add	sp, #8
   205a4:	bd70      	pop	{r4, r5, r6, pc}
   205a6:	bf00      	nop
   205a8:	40021000 	.word	0x40021000
   205ac:	00024ee0 	.word	0x00024ee0

000205b0 <am_hal_pwrctrl_memory_enable>:
   205b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   205b4:	ea4f 0880 	mov.w	r8, r0, lsl #2
   205b8:	eb08 0300 	add.w	r3, r8, r0
   205bc:	009b      	lsls	r3, r3, #2
   205be:	4d1e      	ldr	r5, [pc, #120]	; (20638 <am_hal_pwrctrl_memory_enable+0x88>)
   205c0:	58ee      	ldr	r6, [r5, r3]
   205c2:	18ea      	adds	r2, r5, r3
   205c4:	43f1      	mvns	r1, r6
   205c6:	4604      	mov	r4, r0
   205c8:	6917      	ldr	r7, [r2, #16]
   205ca:	d126      	bne.n	2061a <am_hal_pwrctrl_memory_enable+0x6a>
   205cc:	b95e      	cbnz	r6, 205e6 <am_hal_pwrctrl_memory_enable+0x36>
   205ce:	4444      	add	r4, r8
   205d0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   205d4:	6868      	ldr	r0, [r5, #4]
   205d6:	4b19      	ldr	r3, [pc, #100]	; (2063c <am_hal_pwrctrl_memory_enable+0x8c>)
   205d8:	695b      	ldr	r3, [r3, #20]
   205da:	403b      	ands	r3, r7
   205dc:	1a18      	subs	r0, r3, r0
   205de:	bf18      	it	ne
   205e0:	2001      	movne	r0, #1
   205e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   205e6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2063c <am_hal_pwrctrl_memory_enable+0x8c>
   205ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
   205ee:	4444      	add	r4, r8
   205f0:	431e      	orrs	r6, r3
   205f2:	20a0      	movs	r0, #160	; 0xa0
   205f4:	f8c9 6010 	str.w	r6, [r9, #16]
   205f8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   205fc:	f7ff fd10 	bl	20020 <am_hal_flash_delay>
   20600:	f8d9 0014 	ldr.w	r0, [r9, #20]
   20604:	686c      	ldr	r4, [r5, #4]
   20606:	4038      	ands	r0, r7
   20608:	42a0      	cmp	r0, r4
   2060a:	d0e4      	beq.n	205d6 <am_hal_pwrctrl_memory_enable+0x26>
   2060c:	20a0      	movs	r0, #160	; 0xa0
   2060e:	f7ff fd07 	bl	20020 <am_hal_flash_delay>
   20612:	f8d9 3014 	ldr.w	r3, [r9, #20]
   20616:	4620      	mov	r0, r4
   20618:	e7dd      	b.n	205d6 <am_hal_pwrctrl_memory_enable+0x26>
   2061a:	68d3      	ldr	r3, [r2, #12]
   2061c:	4807      	ldr	r0, [pc, #28]	; (2063c <am_hal_pwrctrl_memory_enable+0x8c>)
   2061e:	400b      	ands	r3, r1
   20620:	43db      	mvns	r3, r3
   20622:	6902      	ldr	r2, [r0, #16]
   20624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   20628:	f043 0301 	orr.w	r3, r3, #1
   2062c:	4013      	ands	r3, r2
   2062e:	6103      	str	r3, [r0, #16]
   20630:	2010      	movs	r0, #16
   20632:	f7ff fcf5 	bl	20020 <am_hal_flash_delay>
   20636:	e7c9      	b.n	205cc <am_hal_pwrctrl_memory_enable+0x1c>
   20638:	00024f94 	.word	0x00024f94
   2063c:	40021000 	.word	0x40021000

00020640 <am_hal_pwrctrl_low_power_init>:
   20640:	b530      	push	{r4, r5, lr}
   20642:	4b33      	ldr	r3, [pc, #204]	; (20710 <am_hal_pwrctrl_low_power_init+0xd0>)
   20644:	681a      	ldr	r2, [r3, #0]
   20646:	b085      	sub	sp, #20
   20648:	b912      	cbnz	r2, 20650 <am_hal_pwrctrl_low_power_init+0x10>
   2064a:	4a32      	ldr	r2, [pc, #200]	; (20714 <am_hal_pwrctrl_low_power_init+0xd4>)
   2064c:	6812      	ldr	r2, [r2, #0]
   2064e:	601a      	str	r2, [r3, #0]
   20650:	4b31      	ldr	r3, [pc, #196]	; (20718 <am_hal_pwrctrl_low_power_init+0xd8>)
   20652:	68db      	ldr	r3, [r3, #12]
   20654:	b2db      	uxtb	r3, r3
   20656:	2b12      	cmp	r3, #18
   20658:	d00a      	beq.n	20670 <am_hal_pwrctrl_low_power_init+0x30>
   2065a:	4c30      	ldr	r4, [pc, #192]	; (2071c <am_hal_pwrctrl_low_power_init+0xdc>)
   2065c:	2100      	movs	r1, #0
   2065e:	200c      	movs	r0, #12
   20660:	f7ff fa82 	bl	1fb68 <am_hal_cachectrl_control>
   20664:	69a3      	ldr	r3, [r4, #24]
   20666:	05d8      	lsls	r0, r3, #23
   20668:	d520      	bpl.n	206ac <am_hal_pwrctrl_low_power_init+0x6c>
   2066a:	2000      	movs	r0, #0
   2066c:	b005      	add	sp, #20
   2066e:	bd30      	pop	{r4, r5, pc}
   20670:	4c2a      	ldr	r4, [pc, #168]	; (2071c <am_hal_pwrctrl_low_power_init+0xdc>)
   20672:	6863      	ldr	r3, [r4, #4]
   20674:	07d9      	lsls	r1, r3, #31
   20676:	d5f0      	bpl.n	2065a <am_hal_pwrctrl_low_power_init+0x1a>
   20678:	f7ff fea6 	bl	203c8 <am_hal_interrupt_master_disable>
   2067c:	9003      	str	r0, [sp, #12]
   2067e:	68a3      	ldr	r3, [r4, #8]
   20680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   20684:	60a3      	str	r3, [r4, #8]
   20686:	9803      	ldr	r0, [sp, #12]
   20688:	f7ff fea2 	bl	203d0 <am_hal_interrupt_master_set>
   2068c:	20a0      	movs	r0, #160	; 0xa0
   2068e:	f7ff fcc7 	bl	20020 <am_hal_flash_delay>
   20692:	69a3      	ldr	r3, [r4, #24]
   20694:	061a      	lsls	r2, r3, #24
   20696:	d403      	bmi.n	206a0 <am_hal_pwrctrl_low_power_init+0x60>
   20698:	20a0      	movs	r0, #160	; 0xa0
   2069a:	f7ff fcc1 	bl	20020 <am_hal_flash_delay>
   2069e:	69a3      	ldr	r3, [r4, #24]
   206a0:	4b1e      	ldr	r3, [pc, #120]	; (2071c <am_hal_pwrctrl_low_power_init+0xdc>)
   206a2:	699b      	ldr	r3, [r3, #24]
   206a4:	061b      	lsls	r3, r3, #24
   206a6:	d4d8      	bmi.n	2065a <am_hal_pwrctrl_low_power_init+0x1a>
   206a8:	2001      	movs	r0, #1
   206aa:	e7df      	b.n	2066c <am_hal_pwrctrl_low_power_init+0x2c>
   206ac:	4d1a      	ldr	r5, [pc, #104]	; (20718 <am_hal_pwrctrl_low_power_init+0xd8>)
   206ae:	491c      	ldr	r1, [pc, #112]	; (20720 <am_hal_pwrctrl_low_power_init+0xe0>)
   206b0:	7e2a      	ldrb	r2, [r5, #24]
   206b2:	2001      	movs	r0, #1
   206b4:	4302      	orrs	r2, r0
   206b6:	2307      	movs	r3, #7
   206b8:	762a      	strb	r2, [r5, #24]
   206ba:	9000      	str	r0, [sp, #0]
   206bc:	461a      	mov	r2, r3
   206be:	f242 7010 	movw	r0, #10000	; 0x2710
   206c2:	f7ff fcbd 	bl	20040 <am_hal_flash_delay_status_check>
   206c6:	b110      	cbz	r0, 206ce <am_hal_pwrctrl_low_power_init+0x8e>
   206c8:	2004      	movs	r0, #4
   206ca:	b005      	add	sp, #20
   206cc:	bd30      	pop	{r4, r5, pc}
   206ce:	6823      	ldr	r3, [r4, #0]
   206d0:	f043 0301 	orr.w	r3, r3, #1
   206d4:	6023      	str	r3, [r4, #0]
   206d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   206d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   206dc:	6263      	str	r3, [r4, #36]	; 0x24
   206de:	68eb      	ldr	r3, [r5, #12]
   206e0:	b2db      	uxtb	r3, r3
   206e2:	2b11      	cmp	r3, #17
   206e4:	d1c1      	bne.n	2066a <am_hal_pwrctrl_low_power_init+0x2a>
   206e6:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
   206ea:	f360 5356 	bfi	r3, r0, #21, #2
   206ee:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
   206f2:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   206f6:	220f      	movs	r2, #15
   206f8:	f362 138b 	bfi	r3, r2, #6, #6
   206fc:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   20700:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
   20704:	f362 0305 	bfi	r3, r2, #0, #6
   20708:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
   2070c:	e7ae      	b.n	2066c <am_hal_pwrctrl_low_power_init+0x2c>
   2070e:	bf00      	nop
   20710:	100063d8 	.word	0x100063d8
   20714:	4ffff000 	.word	0x4ffff000
   20718:	40020000 	.word	0x40020000
   2071c:	40021000 	.word	0x40021000
   20720:	40020018 	.word	0x40020018

00020724 <am_hal_queue_init>:
   20724:	b410      	push	{r4}
   20726:	2400      	movs	r4, #0
   20728:	6004      	str	r4, [r0, #0]
   2072a:	6044      	str	r4, [r0, #4]
   2072c:	6084      	str	r4, [r0, #8]
   2072e:	60c3      	str	r3, [r0, #12]
   20730:	6102      	str	r2, [r0, #16]
   20732:	6141      	str	r1, [r0, #20]
   20734:	f85d 4b04 	ldr.w	r4, [sp], #4
   20738:	4770      	bx	lr
   2073a:	bf00      	nop

0002073c <am_hal_queue_item_add>:
   2073c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2073e:	4604      	mov	r4, r0
   20740:	6906      	ldr	r6, [r0, #16]
   20742:	b083      	sub	sp, #12
   20744:	fb06 f602 	mul.w	r6, r6, r2
   20748:	460d      	mov	r5, r1
   2074a:	f7ff fe3d 	bl	203c8 <am_hal_interrupt_master_disable>
   2074e:	68e7      	ldr	r7, [r4, #12]
   20750:	68a2      	ldr	r2, [r4, #8]
   20752:	9001      	str	r0, [sp, #4]
   20754:	1abb      	subs	r3, r7, r2
   20756:	429e      	cmp	r6, r3
   20758:	d826      	bhi.n	207a8 <am_hal_queue_item_add+0x6c>
   2075a:	b196      	cbz	r6, 20782 <am_hal_queue_item_add+0x46>
   2075c:	6823      	ldr	r3, [r4, #0]
   2075e:	4629      	mov	r1, r5
   20760:	b1c5      	cbz	r5, 20794 <am_hal_queue_item_add+0x58>
   20762:	19af      	adds	r7, r5, r6
   20764:	6962      	ldr	r2, [r4, #20]
   20766:	f811 0b01 	ldrb.w	r0, [r1], #1
   2076a:	54d0      	strb	r0, [r2, r3]
   2076c:	6823      	ldr	r3, [r4, #0]
   2076e:	68e5      	ldr	r5, [r4, #12]
   20770:	3301      	adds	r3, #1
   20772:	42b9      	cmp	r1, r7
   20774:	fbb3 f0f5 	udiv	r0, r3, r5
   20778:	fb05 3310 	mls	r3, r5, r0, r3
   2077c:	6023      	str	r3, [r4, #0]
   2077e:	d1f1      	bne.n	20764 <am_hal_queue_item_add+0x28>
   20780:	68a2      	ldr	r2, [r4, #8]
   20782:	4432      	add	r2, r6
   20784:	60a2      	str	r2, [r4, #8]
   20786:	2401      	movs	r4, #1
   20788:	9801      	ldr	r0, [sp, #4]
   2078a:	f7ff fe21 	bl	203d0 <am_hal_interrupt_master_set>
   2078e:	4620      	mov	r0, r4
   20790:	b003      	add	sp, #12
   20792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20794:	3101      	adds	r1, #1
   20796:	3301      	adds	r3, #1
   20798:	428e      	cmp	r6, r1
   2079a:	fbb3 f0f7 	udiv	r0, r3, r7
   2079e:	fb07 3310 	mls	r3, r7, r0, r3
   207a2:	d1f7      	bne.n	20794 <am_hal_queue_item_add+0x58>
   207a4:	6023      	str	r3, [r4, #0]
   207a6:	e7ec      	b.n	20782 <am_hal_queue_item_add+0x46>
   207a8:	2400      	movs	r4, #0
   207aa:	e7ed      	b.n	20788 <am_hal_queue_item_add+0x4c>

000207ac <am_hal_queue_item_get>:
   207ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   207ae:	4604      	mov	r4, r0
   207b0:	6906      	ldr	r6, [r0, #16]
   207b2:	b083      	sub	sp, #12
   207b4:	fb06 f602 	mul.w	r6, r6, r2
   207b8:	460d      	mov	r5, r1
   207ba:	f7ff fe05 	bl	203c8 <am_hal_interrupt_master_disable>
   207be:	68a2      	ldr	r2, [r4, #8]
   207c0:	9001      	str	r0, [sp, #4]
   207c2:	4296      	cmp	r6, r2
   207c4:	d81c      	bhi.n	20800 <am_hal_queue_item_get+0x54>
   207c6:	b196      	cbz	r6, 207ee <am_hal_queue_item_get+0x42>
   207c8:	6863      	ldr	r3, [r4, #4]
   207ca:	b1dd      	cbz	r5, 20804 <am_hal_queue_item_get+0x58>
   207cc:	4629      	mov	r1, r5
   207ce:	19af      	adds	r7, r5, r6
   207d0:	6962      	ldr	r2, [r4, #20]
   207d2:	5cd3      	ldrb	r3, [r2, r3]
   207d4:	f801 3b01 	strb.w	r3, [r1], #1
   207d8:	6863      	ldr	r3, [r4, #4]
   207da:	68e5      	ldr	r5, [r4, #12]
   207dc:	3301      	adds	r3, #1
   207de:	428f      	cmp	r7, r1
   207e0:	fbb3 f0f5 	udiv	r0, r3, r5
   207e4:	fb05 3310 	mls	r3, r5, r0, r3
   207e8:	6063      	str	r3, [r4, #4]
   207ea:	d1f1      	bne.n	207d0 <am_hal_queue_item_get+0x24>
   207ec:	68a2      	ldr	r2, [r4, #8]
   207ee:	1b92      	subs	r2, r2, r6
   207f0:	60a2      	str	r2, [r4, #8]
   207f2:	2401      	movs	r4, #1
   207f4:	9801      	ldr	r0, [sp, #4]
   207f6:	f7ff fdeb 	bl	203d0 <am_hal_interrupt_master_set>
   207fa:	4620      	mov	r0, r4
   207fc:	b003      	add	sp, #12
   207fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20800:	2400      	movs	r4, #0
   20802:	e7f7      	b.n	207f4 <am_hal_queue_item_get+0x48>
   20804:	68e0      	ldr	r0, [r4, #12]
   20806:	4629      	mov	r1, r5
   20808:	3101      	adds	r1, #1
   2080a:	3301      	adds	r3, #1
   2080c:	428e      	cmp	r6, r1
   2080e:	fbb3 f5f0 	udiv	r5, r3, r0
   20812:	fb00 3315 	mls	r3, r0, r5, r3
   20816:	d1f7      	bne.n	20808 <am_hal_queue_item_get+0x5c>
   20818:	6063      	str	r3, [r4, #4]
   2081a:	e7e8      	b.n	207ee <am_hal_queue_item_get+0x42>

0002081c <am_hal_stimer_config>:
   2081c:	4b03      	ldr	r3, [pc, #12]	; (2082c <am_hal_stimer_config+0x10>)
   2081e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   20822:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
   20826:	4610      	mov	r0, r2
   20828:	4770      	bx	lr
   2082a:	bf00      	nop
   2082c:	40008000 	.word	0x40008000

00020830 <am_hal_stimer_counter_get>:
   20830:	4b01      	ldr	r3, [pc, #4]	; (20838 <am_hal_stimer_counter_get+0x8>)
   20832:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   20836:	4770      	bx	lr
   20838:	40008000 	.word	0x40008000

0002083c <am_hal_stimer_compare_delta_set>:
   2083c:	2807      	cmp	r0, #7
   2083e:	d900      	bls.n	20842 <am_hal_stimer_compare_delta_set+0x6>
   20840:	4770      	bx	lr
   20842:	b570      	push	{r4, r5, r6, lr}
   20844:	b082      	sub	sp, #8
   20846:	460c      	mov	r4, r1
   20848:	4605      	mov	r5, r0
   2084a:	f7ff fdbd 	bl	203c8 <am_hal_interrupt_master_disable>
   2084e:	4923      	ldr	r1, [pc, #140]	; (208dc <am_hal_stimer_compare_delta_set+0xa0>)
   20850:	9001      	str	r0, [sp, #4]
   20852:	4b23      	ldr	r3, [pc, #140]	; (208e0 <am_hal_stimer_compare_delta_set+0xa4>)
   20854:	f8d1 0140 	ldr.w	r0, [r1, #320]	; 0x140
   20858:	f8d1 6140 	ldr.w	r6, [r1, #320]	; 0x140
   2085c:	f44f 7280 	mov.w	r2, #256	; 0x100
   20860:	442b      	add	r3, r5
   20862:	40aa      	lsls	r2, r5
   20864:	ea26 0502 	bic.w	r5, r6, r2
   20868:	009b      	lsls	r3, r3, #2
   2086a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
   2086e:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   20872:	601c      	str	r4, [r3, #0]
   20874:	681d      	ldr	r5, [r3, #0]
   20876:	4421      	add	r1, r4
   20878:	1a6e      	subs	r6, r5, r1
   2087a:	2e00      	cmp	r6, #0
   2087c:	db03      	blt.n	20886 <am_hal_stimer_compare_delta_set+0x4a>
   2087e:	310a      	adds	r1, #10
   20880:	1a69      	subs	r1, r5, r1
   20882:	2900      	cmp	r1, #0
   20884:	dd1e      	ble.n	208c4 <am_hal_stimer_compare_delta_set+0x88>
   20886:	4915      	ldr	r1, [pc, #84]	; (208dc <am_hal_stimer_compare_delta_set+0xa0>)
   20888:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   2088c:	601c      	str	r4, [r3, #0]
   2088e:	681d      	ldr	r5, [r3, #0]
   20890:	4421      	add	r1, r4
   20892:	1a6e      	subs	r6, r5, r1
   20894:	2e00      	cmp	r6, #0
   20896:	db03      	blt.n	208a0 <am_hal_stimer_compare_delta_set+0x64>
   20898:	310a      	adds	r1, #10
   2089a:	1a69      	subs	r1, r5, r1
   2089c:	2900      	cmp	r1, #0
   2089e:	dd11      	ble.n	208c4 <am_hal_stimer_compare_delta_set+0x88>
   208a0:	490e      	ldr	r1, [pc, #56]	; (208dc <am_hal_stimer_compare_delta_set+0xa0>)
   208a2:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   208a6:	601c      	str	r4, [r3, #0]
   208a8:	681d      	ldr	r5, [r3, #0]
   208aa:	4421      	add	r1, r4
   208ac:	1a6e      	subs	r6, r5, r1
   208ae:	2e00      	cmp	r6, #0
   208b0:	db03      	blt.n	208ba <am_hal_stimer_compare_delta_set+0x7e>
   208b2:	310a      	adds	r1, #10
   208b4:	1a69      	subs	r1, r5, r1
   208b6:	2900      	cmp	r1, #0
   208b8:	dd04      	ble.n	208c4 <am_hal_stimer_compare_delta_set+0x88>
   208ba:	4908      	ldr	r1, [pc, #32]	; (208dc <am_hal_stimer_compare_delta_set+0xa0>)
   208bc:	f8d1 1144 	ldr.w	r1, [r1, #324]	; 0x144
   208c0:	601c      	str	r4, [r3, #0]
   208c2:	681b      	ldr	r3, [r3, #0]
   208c4:	4905      	ldr	r1, [pc, #20]	; (208dc <am_hal_stimer_compare_delta_set+0xa0>)
   208c6:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
   208ca:	4002      	ands	r2, r0
   208cc:	431a      	orrs	r2, r3
   208ce:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
   208d2:	9801      	ldr	r0, [sp, #4]
   208d4:	f7ff fd7c 	bl	203d0 <am_hal_interrupt_master_set>
   208d8:	b002      	add	sp, #8
   208da:	bd70      	pop	{r4, r5, r6, pc}
   208dc:	40008000 	.word	0x40008000
   208e0:	10002054 	.word	0x10002054

000208e4 <am_hal_stimer_int_enable>:
   208e4:	4a03      	ldr	r2, [pc, #12]	; (208f4 <am_hal_stimer_int_enable+0x10>)
   208e6:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   208ea:	4318      	orrs	r0, r3
   208ec:	f8c2 0300 	str.w	r0, [r2, #768]	; 0x300
   208f0:	4770      	bx	lr
   208f2:	bf00      	nop
   208f4:	40008000 	.word	0x40008000

000208f8 <am_hal_stimer_int_clear>:
   208f8:	4b01      	ldr	r3, [pc, #4]	; (20900 <am_hal_stimer_int_clear+0x8>)
   208fa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   208fe:	4770      	bx	lr
   20900:	40008000 	.word	0x40008000

00020904 <am_hal_stimer_int_status_get>:
   20904:	4a04      	ldr	r2, [pc, #16]	; (20918 <am_hal_stimer_int_status_get+0x14>)
   20906:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   2090a:	b110      	cbz	r0, 20912 <am_hal_stimer_int_status_get+0xe>
   2090c:	f8d2 2300 	ldr.w	r2, [r2, #768]	; 0x300
   20910:	4013      	ands	r3, r2
   20912:	4618      	mov	r0, r3
   20914:	4770      	bx	lr
   20916:	bf00      	nop
   20918:	40008000 	.word	0x40008000

0002091c <am_hal_sysctrl_sleep>:
   2091c:	b510      	push	{r4, lr}
   2091e:	b082      	sub	sp, #8
   20920:	4604      	mov	r4, r0
   20922:	f7ff fd51 	bl	203c8 <am_hal_interrupt_master_disable>
   20926:	9001      	str	r0, [sp, #4]
   20928:	b124      	cbz	r4, 20934 <am_hal_sysctrl_sleep+0x18>
   2092a:	4b12      	ldr	r3, [pc, #72]	; (20974 <am_hal_sysctrl_sleep+0x58>)
   2092c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   20930:	07db      	lsls	r3, r3, #31
   20932:	d512      	bpl.n	2095a <am_hal_sysctrl_sleep+0x3e>
   20934:	4a10      	ldr	r2, [pc, #64]	; (20978 <am_hal_sysctrl_sleep+0x5c>)
   20936:	6913      	ldr	r3, [r2, #16]
   20938:	f023 0304 	bic.w	r3, r3, #4
   2093c:	6113      	str	r3, [r2, #16]
   2093e:	f3bf 8f4f 	dsb	sy
   20942:	4a0e      	ldr	r2, [pc, #56]	; (2097c <am_hal_sysctrl_sleep+0x60>)
   20944:	4b0e      	ldr	r3, [pc, #56]	; (20980 <am_hal_sysctrl_sleep+0x64>)
   20946:	6812      	ldr	r2, [r2, #0]
   20948:	601a      	str	r2, [r3, #0]
   2094a:	bf30      	wfi
   2094c:	f3bf 8f6f 	isb	sy
   20950:	9801      	ldr	r0, [sp, #4]
   20952:	f7ff fd3d 	bl	203d0 <am_hal_interrupt_master_set>
   20956:	b002      	add	sp, #8
   20958:	bd10      	pop	{r4, pc}
   2095a:	4b0a      	ldr	r3, [pc, #40]	; (20984 <am_hal_sysctrl_sleep+0x68>)
   2095c:	681a      	ldr	r2, [r3, #0]
   2095e:	b912      	cbnz	r2, 20966 <am_hal_sysctrl_sleep+0x4a>
   20960:	4a09      	ldr	r2, [pc, #36]	; (20988 <am_hal_sysctrl_sleep+0x6c>)
   20962:	6812      	ldr	r2, [r2, #0]
   20964:	601a      	str	r2, [r3, #0]
   20966:	4a04      	ldr	r2, [pc, #16]	; (20978 <am_hal_sysctrl_sleep+0x5c>)
   20968:	6913      	ldr	r3, [r2, #16]
   2096a:	f043 0304 	orr.w	r3, r3, #4
   2096e:	6113      	str	r3, [r2, #16]
   20970:	e7e5      	b.n	2093e <am_hal_sysctrl_sleep+0x22>
   20972:	bf00      	nop
   20974:	40020000 	.word	0x40020000
   20978:	e000ed00 	.word	0xe000ed00
   2097c:	5fff0000 	.word	0x5fff0000
   20980:	100063dc 	.word	0x100063dc
   20984:	100063d8 	.word	0x100063d8
   20988:	4ffff000 	.word	0x4ffff000

0002098c <am_hal_sysctrl_fpu_enable>:
   2098c:	4b02      	ldr	r3, [pc, #8]	; (20998 <am_hal_sysctrl_fpu_enable+0xc>)
   2098e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   20992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   20996:	4770      	bx	lr
   20998:	e000ed00 	.word	0xe000ed00

0002099c <am_hal_sysctrl_fpu_stacking_enable>:
   2099c:	b510      	push	{r4, lr}
   2099e:	b082      	sub	sp, #8
   209a0:	4604      	mov	r4, r0
   209a2:	f7ff fd11 	bl	203c8 <am_hal_interrupt_master_disable>
   209a6:	4a09      	ldr	r2, [pc, #36]	; (209cc <am_hal_sysctrl_fpu_stacking_enable+0x30>)
   209a8:	9001      	str	r0, [sp, #4]
   209aa:	6853      	ldr	r3, [r2, #4]
   209ac:	2c00      	cmp	r4, #0
   209ae:	bf14      	ite	ne
   209b0:	f04f 4140 	movne.w	r1, #3221225472	; 0xc0000000
   209b4:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   209b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   209bc:	430b      	orrs	r3, r1
   209be:	6053      	str	r3, [r2, #4]
   209c0:	9801      	ldr	r0, [sp, #4]
   209c2:	f7ff fd05 	bl	203d0 <am_hal_interrupt_master_set>
   209c6:	b002      	add	sp, #8
   209c8:	bd10      	pop	{r4, pc}
   209ca:	bf00      	nop
   209cc:	e000ef30 	.word	0xe000ef30

000209d0 <am_bsp_low_power_init>:
   209d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209d2:	f001 f8af 	bl	21b34 <am_hal_itm_disable>
   209d6:	2000      	movs	r0, #0
   209d8:	f7fc f87c 	bl	1cad4 <am_util_stdio_printf_init>
   209dc:	4b12      	ldr	r3, [pc, #72]	; (20a28 <am_bsp_low_power_init+0x58>)
   209de:	4f13      	ldr	r7, [pc, #76]	; (20a2c <am_bsp_low_power_init+0x5c>)
   209e0:	6819      	ldr	r1, [r3, #0]
   209e2:	2021      	movs	r0, #33	; 0x21
   209e4:	f7ff fb70 	bl	200c8 <am_hal_gpio_pinconfig>
   209e8:	f7ff fe2a 	bl	20640 <am_hal_pwrctrl_low_power_init>
   209ec:	2001      	movs	r0, #1
   209ee:	f001 f90f 	bl	21c10 <am_hal_rtc_osc_select>
   209f2:	2100      	movs	r1, #0
   209f4:	2003      	movs	r0, #3
   209f6:	f7ff fa29 	bl	1fe4c <am_hal_clkgen_control>
   209fa:	f001 f911 	bl	21c20 <am_hal_rtc_osc_disable>
   209fe:	4b0c      	ldr	r3, [pc, #48]	; (20a30 <am_bsp_low_power_init+0x60>)
   20a00:	681e      	ldr	r6, [r3, #0]
   20a02:	2400      	movs	r4, #0
   20a04:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
   20a08:	4631      	mov	r1, r6
   20a0a:	4628      	mov	r0, r5
   20a0c:	f7ff fb5c 	bl	200c8 <am_hal_gpio_pinconfig>
   20a10:	2103      	movs	r1, #3
   20a12:	4628      	mov	r0, r5
   20a14:	f7ff fc94 	bl	20340 <am_hal_gpio_state_write>
   20a18:	3401      	adds	r4, #1
   20a1a:	4628      	mov	r0, r5
   20a1c:	2100      	movs	r1, #0
   20a1e:	f7ff fc8f 	bl	20340 <am_hal_gpio_state_write>
   20a22:	2c04      	cmp	r4, #4
   20a24:	d1ee      	bne.n	20a04 <am_bsp_low_power_init+0x34>
   20a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20a28:	00024e24 	.word	0x00024e24
   20a2c:	10002fb8 	.word	0x10002fb8
   20a30:	00024e28 	.word	0x00024e28

00020a34 <am_bsp_itm_printf_enable>:
   20a34:	b500      	push	{lr}
   20a36:	4b0b      	ldr	r3, [pc, #44]	; (20a64 <am_bsp_itm_printf_enable+0x30>)
   20a38:	b087      	sub	sp, #28
   20a3a:	2201      	movs	r2, #1
   20a3c:	601a      	str	r2, [r3, #0]
   20a3e:	f001 f85b 	bl	21af8 <am_hal_itm_enable>
   20a42:	4b09      	ldr	r3, [pc, #36]	; (20a68 <am_bsp_itm_printf_enable+0x34>)
   20a44:	9301      	str	r3, [sp, #4]
   20a46:	a801      	add	r0, sp, #4
   20a48:	f001 f8f4 	bl	21c34 <am_hal_tpiu_enable>
   20a4c:	4b07      	ldr	r3, [pc, #28]	; (20a6c <am_bsp_itm_printf_enable+0x38>)
   20a4e:	2021      	movs	r0, #33	; 0x21
   20a50:	6819      	ldr	r1, [r3, #0]
   20a52:	f7ff fb39 	bl	200c8 <am_hal_gpio_pinconfig>
   20a56:	4806      	ldr	r0, [pc, #24]	; (20a70 <am_bsp_itm_printf_enable+0x3c>)
   20a58:	f7fc f83c 	bl	1cad4 <am_util_stdio_printf_init>
   20a5c:	b007      	add	sp, #28
   20a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   20a62:	bf00      	nop
   20a64:	100063e0 	.word	0x100063e0
   20a68:	000f4240 	.word	0x000f4240
   20a6c:	000250fc 	.word	0x000250fc
   20a70:	00021be1 	.word	0x00021be1
	...

00020a80 <uECC_vli_sub>:
   20a80:	f1c3 0308 	rsb	r3, r3, #8
   20a84:	00db      	lsls	r3, r3, #3
   20a86:	b470      	push	{r4, r5, r6}
   20a88:	3301      	adds	r3, #1
   20a8a:	2400      	movs	r4, #0
   20a8c:	a503      	add	r5, pc, #12	; (adr r5, 20a9c <uECC_vli_sub+0x1c>)
   20a8e:	bf00      	nop
   20a90:	195b      	adds	r3, r3, r5
   20a92:	c920      	ldmia	r1!, {r5}
   20a94:	ca40      	ldmia	r2!, {r6}
   20a96:	1bad      	subs	r5, r5, r6
   20a98:	c020      	stmia	r0!, {r5}
   20a9a:	4718      	bx	r3
   20a9c:	c920      	ldmia	r1!, {r5}
   20a9e:	ca40      	ldmia	r2!, {r6}
   20aa0:	41b5      	sbcs	r5, r6
   20aa2:	c020      	stmia	r0!, {r5}
   20aa4:	c920      	ldmia	r1!, {r5}
   20aa6:	ca40      	ldmia	r2!, {r6}
   20aa8:	41b5      	sbcs	r5, r6
   20aaa:	c020      	stmia	r0!, {r5}
   20aac:	c920      	ldmia	r1!, {r5}
   20aae:	ca40      	ldmia	r2!, {r6}
   20ab0:	41b5      	sbcs	r5, r6
   20ab2:	c020      	stmia	r0!, {r5}
   20ab4:	c920      	ldmia	r1!, {r5}
   20ab6:	ca40      	ldmia	r2!, {r6}
   20ab8:	41b5      	sbcs	r5, r6
   20aba:	c020      	stmia	r0!, {r5}
   20abc:	c920      	ldmia	r1!, {r5}
   20abe:	ca40      	ldmia	r2!, {r6}
   20ac0:	41b5      	sbcs	r5, r6
   20ac2:	c020      	stmia	r0!, {r5}
   20ac4:	c920      	ldmia	r1!, {r5}
   20ac6:	ca40      	ldmia	r2!, {r6}
   20ac8:	41b5      	sbcs	r5, r6
   20aca:	c020      	stmia	r0!, {r5}
   20acc:	c920      	ldmia	r1!, {r5}
   20ace:	ca40      	ldmia	r2!, {r6}
   20ad0:	41b5      	sbcs	r5, r6
   20ad2:	c020      	stmia	r0!, {r5}
   20ad4:	4164      	adcs	r4, r4
   20ad6:	fab4 f084 	clz	r0, r4
   20ada:	0940      	lsrs	r0, r0, #5
   20adc:	bc70      	pop	{r4, r5, r6}
   20ade:	4770      	bx	lr

00020ae0 <uECC_vli_mult>:
   20ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ae4:	b408      	push	{r3}
   20ae6:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
   20ae8:	b404      	push	{r2}
   20aea:	f851 2b04 	ldr.w	r2, [r1], #4
   20aee:	fba3 8902 	umull	r8, r9, r3, r2
   20af2:	f840 8b04 	str.w	r8, [r0], #4
   20af6:	f04f 0a00 	mov.w	sl, #0
   20afa:	fbe4 9a62 	umaal	r9, sl, r4, r2
   20afe:	f04f 0b00 	mov.w	fp, #0
   20b02:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20b06:	f04f 0c00 	mov.w	ip, #0
   20b0a:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20b0e:	f04f 0e00 	mov.w	lr, #0
   20b12:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20b16:	f851 2b04 	ldr.w	r2, [r1], #4
   20b1a:	f04f 0800 	mov.w	r8, #0
   20b1e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20b22:	f840 8b04 	str.w	r8, [r0], #4
   20b26:	fbe4 9a62 	umaal	r9, sl, r4, r2
   20b2a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20b2e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20b32:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20b36:	f851 2b04 	ldr.w	r2, [r1], #4
   20b3a:	f04f 0800 	mov.w	r8, #0
   20b3e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20b42:	f840 8b04 	str.w	r8, [r0], #4
   20b46:	fbe4 9a62 	umaal	r9, sl, r4, r2
   20b4a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20b4e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20b52:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20b56:	f851 2b04 	ldr.w	r2, [r1], #4
   20b5a:	f04f 0800 	mov.w	r8, #0
   20b5e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20b62:	f840 8b04 	str.w	r8, [r0], #4
   20b66:	fbe4 9a62 	umaal	r9, sl, r4, r2
   20b6a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20b6e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20b72:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20b76:	f851 2b04 	ldr.w	r2, [r1], #4
   20b7a:	f04f 0800 	mov.w	r8, #0
   20b7e:	fbe3 8962 	umaal	r8, r9, r3, r2
   20b82:	f840 8b04 	str.w	r8, [r0], #4
   20b86:	fbe4 9a62 	umaal	r9, sl, r4, r2
   20b8a:	fbe5 ab62 	umaal	sl, fp, r5, r2
   20b8e:	fbe6 bc62 	umaal	fp, ip, r6, r2
   20b92:	fbe7 ce62 	umaal	ip, lr, r7, r2
   20b96:	f840 9b04 	str.w	r9, [r0], #4
   20b9a:	f840 ab04 	str.w	sl, [r0], #4
   20b9e:	f840 bb04 	str.w	fp, [r0], #4
   20ba2:	f840 cb04 	str.w	ip, [r0], #4
   20ba6:	f840 eb04 	str.w	lr, [r0], #4
   20baa:	bc0c      	pop	{r2, r3}
   20bac:	2b05      	cmp	r3, #5
   20bae:	f000 811e 	beq.w	20dee <uECC_vli_mult+0x30e>
   20bb2:	680c      	ldr	r4, [r1, #0]
   20bb4:	f1a0 0014 	sub.w	r0, r0, #20
   20bb8:	f1a1 0114 	sub.w	r1, r1, #20
   20bbc:	f1a2 0214 	sub.w	r2, r2, #20
   20bc0:	f852 eb04 	ldr.w	lr, [r2], #4
   20bc4:	f04f 0500 	mov.w	r5, #0
   20bc8:	f850 6b04 	ldr.w	r6, [r0], #4
   20bcc:	fbe4 566e 	umaal	r5, r6, r4, lr
   20bd0:	f852 eb04 	ldr.w	lr, [r2], #4
   20bd4:	f850 7b04 	ldr.w	r7, [r0], #4
   20bd8:	fbe4 676e 	umaal	r6, r7, r4, lr
   20bdc:	f852 eb04 	ldr.w	lr, [r2], #4
   20be0:	f850 8b04 	ldr.w	r8, [r0], #4
   20be4:	fbe4 786e 	umaal	r7, r8, r4, lr
   20be8:	f852 eb04 	ldr.w	lr, [r2], #4
   20bec:	f850 9b04 	ldr.w	r9, [r0], #4
   20bf0:	fbe4 896e 	umaal	r8, r9, r4, lr
   20bf4:	f852 eb04 	ldr.w	lr, [r2], #4
   20bf8:	f850 ab04 	ldr.w	sl, [r0], #4
   20bfc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20c00:	f1a0 0014 	sub.w	r0, r0, #20
   20c04:	f852 4b04 	ldr.w	r4, [r2], #4
   20c08:	f851 eb04 	ldr.w	lr, [r1], #4
   20c0c:	f04f 0c00 	mov.w	ip, #0
   20c10:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20c14:	f840 cb04 	str.w	ip, [r0], #4
   20c18:	f851 eb04 	ldr.w	lr, [r1], #4
   20c1c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20c20:	f840 5b04 	str.w	r5, [r0], #4
   20c24:	f851 eb04 	ldr.w	lr, [r1], #4
   20c28:	fbe4 676e 	umaal	r6, r7, r4, lr
   20c2c:	f840 6b04 	str.w	r6, [r0], #4
   20c30:	f851 eb04 	ldr.w	lr, [r1], #4
   20c34:	fbe4 786e 	umaal	r7, r8, r4, lr
   20c38:	f840 7b04 	str.w	r7, [r0], #4
   20c3c:	f851 eb04 	ldr.w	lr, [r1], #4
   20c40:	fbe4 896e 	umaal	r8, r9, r4, lr
   20c44:	f840 8b04 	str.w	r8, [r0], #4
   20c48:	f851 eb04 	ldr.w	lr, [r1], #4
   20c4c:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20c50:	e8a0 0600 	stmia.w	r0!, {r9, sl}
   20c54:	2b06      	cmp	r3, #6
   20c56:	f000 80ca 	beq.w	20dee <uECC_vli_mult+0x30e>
   20c5a:	680c      	ldr	r4, [r1, #0]
   20c5c:	f1a0 0018 	sub.w	r0, r0, #24
   20c60:	f1a1 0118 	sub.w	r1, r1, #24
   20c64:	f1a2 0218 	sub.w	r2, r2, #24
   20c68:	f852 eb04 	ldr.w	lr, [r2], #4
   20c6c:	f04f 0500 	mov.w	r5, #0
   20c70:	f850 6b04 	ldr.w	r6, [r0], #4
   20c74:	fbe4 566e 	umaal	r5, r6, r4, lr
   20c78:	f852 eb04 	ldr.w	lr, [r2], #4
   20c7c:	f850 7b04 	ldr.w	r7, [r0], #4
   20c80:	fbe4 676e 	umaal	r6, r7, r4, lr
   20c84:	f852 eb04 	ldr.w	lr, [r2], #4
   20c88:	f850 8b04 	ldr.w	r8, [r0], #4
   20c8c:	fbe4 786e 	umaal	r7, r8, r4, lr
   20c90:	f852 eb04 	ldr.w	lr, [r2], #4
   20c94:	f850 9b04 	ldr.w	r9, [r0], #4
   20c98:	fbe4 896e 	umaal	r8, r9, r4, lr
   20c9c:	f852 eb04 	ldr.w	lr, [r2], #4
   20ca0:	f850 ab04 	ldr.w	sl, [r0], #4
   20ca4:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20ca8:	f852 eb04 	ldr.w	lr, [r2], #4
   20cac:	f850 bb04 	ldr.w	fp, [r0], #4
   20cb0:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20cb4:	f1a0 0018 	sub.w	r0, r0, #24
   20cb8:	f852 4b04 	ldr.w	r4, [r2], #4
   20cbc:	f851 eb04 	ldr.w	lr, [r1], #4
   20cc0:	f04f 0c00 	mov.w	ip, #0
   20cc4:	fbe4 c56e 	umaal	ip, r5, r4, lr
   20cc8:	f840 cb04 	str.w	ip, [r0], #4
   20ccc:	f851 eb04 	ldr.w	lr, [r1], #4
   20cd0:	fbe4 566e 	umaal	r5, r6, r4, lr
   20cd4:	f840 5b04 	str.w	r5, [r0], #4
   20cd8:	f851 eb04 	ldr.w	lr, [r1], #4
   20cdc:	fbe4 676e 	umaal	r6, r7, r4, lr
   20ce0:	f840 6b04 	str.w	r6, [r0], #4
   20ce4:	f851 eb04 	ldr.w	lr, [r1], #4
   20ce8:	fbe4 786e 	umaal	r7, r8, r4, lr
   20cec:	f840 7b04 	str.w	r7, [r0], #4
   20cf0:	f851 eb04 	ldr.w	lr, [r1], #4
   20cf4:	fbe4 896e 	umaal	r8, r9, r4, lr
   20cf8:	f840 8b04 	str.w	r8, [r0], #4
   20cfc:	f851 eb04 	ldr.w	lr, [r1], #4
   20d00:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20d04:	f840 9b04 	str.w	r9, [r0], #4
   20d08:	f851 eb04 	ldr.w	lr, [r1], #4
   20d0c:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20d10:	e8a0 0c00 	stmia.w	r0!, {sl, fp}
   20d14:	2b07      	cmp	r3, #7
   20d16:	d06a      	beq.n	20dee <uECC_vli_mult+0x30e>
   20d18:	b408      	push	{r3}
   20d1a:	680c      	ldr	r4, [r1, #0]
   20d1c:	f1a0 001c 	sub.w	r0, r0, #28
   20d20:	f1a1 011c 	sub.w	r1, r1, #28
   20d24:	f1a2 021c 	sub.w	r2, r2, #28
   20d28:	f852 eb04 	ldr.w	lr, [r2], #4
   20d2c:	f04f 0500 	mov.w	r5, #0
   20d30:	f850 6b04 	ldr.w	r6, [r0], #4
   20d34:	fbe4 566e 	umaal	r5, r6, r4, lr
   20d38:	f852 eb04 	ldr.w	lr, [r2], #4
   20d3c:	f850 7b04 	ldr.w	r7, [r0], #4
   20d40:	fbe4 676e 	umaal	r6, r7, r4, lr
   20d44:	f852 eb04 	ldr.w	lr, [r2], #4
   20d48:	f850 8b04 	ldr.w	r8, [r0], #4
   20d4c:	fbe4 786e 	umaal	r7, r8, r4, lr
   20d50:	f852 eb04 	ldr.w	lr, [r2], #4
   20d54:	f850 9b04 	ldr.w	r9, [r0], #4
   20d58:	fbe4 896e 	umaal	r8, r9, r4, lr
   20d5c:	f852 eb04 	ldr.w	lr, [r2], #4
   20d60:	f850 ab04 	ldr.w	sl, [r0], #4
   20d64:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20d68:	f852 eb04 	ldr.w	lr, [r2], #4
   20d6c:	f850 bb04 	ldr.w	fp, [r0], #4
   20d70:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20d74:	f852 eb04 	ldr.w	lr, [r2], #4
   20d78:	f850 cb04 	ldr.w	ip, [r0], #4
   20d7c:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20d80:	f1a0 001c 	sub.w	r0, r0, #28
   20d84:	f852 4b04 	ldr.w	r4, [r2], #4
   20d88:	f851 eb04 	ldr.w	lr, [r1], #4
   20d8c:	f04f 0300 	mov.w	r3, #0
   20d90:	fbe4 356e 	umaal	r3, r5, r4, lr
   20d94:	f840 3b04 	str.w	r3, [r0], #4
   20d98:	f851 eb04 	ldr.w	lr, [r1], #4
   20d9c:	fbe4 566e 	umaal	r5, r6, r4, lr
   20da0:	f840 5b04 	str.w	r5, [r0], #4
   20da4:	f851 eb04 	ldr.w	lr, [r1], #4
   20da8:	fbe4 676e 	umaal	r6, r7, r4, lr
   20dac:	f840 6b04 	str.w	r6, [r0], #4
   20db0:	f851 eb04 	ldr.w	lr, [r1], #4
   20db4:	fbe4 786e 	umaal	r7, r8, r4, lr
   20db8:	f840 7b04 	str.w	r7, [r0], #4
   20dbc:	f851 eb04 	ldr.w	lr, [r1], #4
   20dc0:	fbe4 896e 	umaal	r8, r9, r4, lr
   20dc4:	f840 8b04 	str.w	r8, [r0], #4
   20dc8:	f851 eb04 	ldr.w	lr, [r1], #4
   20dcc:	fbe4 9a6e 	umaal	r9, sl, r4, lr
   20dd0:	f840 9b04 	str.w	r9, [r0], #4
   20dd4:	f851 eb04 	ldr.w	lr, [r1], #4
   20dd8:	fbe4 ab6e 	umaal	sl, fp, r4, lr
   20ddc:	f840 ab04 	str.w	sl, [r0], #4
   20de0:	f851 eb04 	ldr.w	lr, [r1], #4
   20de4:	fbe4 bc6e 	umaal	fp, ip, r4, lr
   20de8:	e8a0 1800 	stmia.w	r0!, {fp, ip}
   20dec:	bc08      	pop	{r3}
   20dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20df2:	bf00      	nop
	...

00020e00 <uECC_vli_modAdd>:
   20e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e02:	f99d c014 	ldrsb.w	ip, [sp, #20]
   20e06:	f1cc 0408 	rsb	r4, ip, #8
   20e0a:	00e4      	lsls	r4, r4, #3
   20e0c:	3401      	adds	r4, #1
   20e0e:	469e      	mov	lr, r3
   20e10:	4623      	mov	r3, r4
   20e12:	4604      	mov	r4, r0
   20e14:	2700      	movs	r7, #0
   20e16:	a505      	add	r5, pc, #20	; (adr r5, 20e2c <uECC_vli_modAdd+0x2c>)
   20e18:	f3af 8000 	nop.w
   20e1c:	f3af 8000 	nop.w
   20e20:	195b      	adds	r3, r3, r5
   20e22:	c920      	ldmia	r1!, {r5}
   20e24:	ca40      	ldmia	r2!, {r6}
   20e26:	19ad      	adds	r5, r5, r6
   20e28:	c420      	stmia	r4!, {r5}
   20e2a:	4718      	bx	r3
   20e2c:	c920      	ldmia	r1!, {r5}
   20e2e:	ca40      	ldmia	r2!, {r6}
   20e30:	4175      	adcs	r5, r6
   20e32:	c420      	stmia	r4!, {r5}
   20e34:	c920      	ldmia	r1!, {r5}
   20e36:	ca40      	ldmia	r2!, {r6}
   20e38:	4175      	adcs	r5, r6
   20e3a:	c420      	stmia	r4!, {r5}
   20e3c:	c920      	ldmia	r1!, {r5}
   20e3e:	ca40      	ldmia	r2!, {r6}
   20e40:	4175      	adcs	r5, r6
   20e42:	c420      	stmia	r4!, {r5}
   20e44:	c920      	ldmia	r1!, {r5}
   20e46:	ca40      	ldmia	r2!, {r6}
   20e48:	4175      	adcs	r5, r6
   20e4a:	c420      	stmia	r4!, {r5}
   20e4c:	c920      	ldmia	r1!, {r5}
   20e4e:	ca40      	ldmia	r2!, {r6}
   20e50:	4175      	adcs	r5, r6
   20e52:	c420      	stmia	r4!, {r5}
   20e54:	c920      	ldmia	r1!, {r5}
   20e56:	ca40      	ldmia	r2!, {r6}
   20e58:	4175      	adcs	r5, r6
   20e5a:	c420      	stmia	r4!, {r5}
   20e5c:	c920      	ldmia	r1!, {r5}
   20e5e:	ca40      	ldmia	r2!, {r6}
   20e60:	4175      	adcs	r5, r6
   20e62:	c420      	stmia	r4!, {r5}
   20e64:	417f      	adcs	r7, r7
   20e66:	b9c7      	cbnz	r7, 20e9a <uECC_vli_modAdd+0x9a>
   20e68:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   20e6c:	b25b      	sxtb	r3, r3
   20e6e:	2b00      	cmp	r3, #0
   20e70:	db13      	blt.n	20e9a <uECC_vli_modAdd+0x9a>
   20e72:	b21a      	sxth	r2, r3
   20e74:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20e78:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20e7c:	4291      	cmp	r1, r2
   20e7e:	d80b      	bhi.n	20e98 <uECC_vli_modAdd+0x98>
   20e80:	d30b      	bcc.n	20e9a <uECC_vli_modAdd+0x9a>
   20e82:	3b01      	subs	r3, #1
   20e84:	b25b      	sxtb	r3, r3
   20e86:	1c59      	adds	r1, r3, #1
   20e88:	b21a      	sxth	r2, r3
   20e8a:	d006      	beq.n	20e9a <uECC_vli_modAdd+0x9a>
   20e8c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
   20e90:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   20e94:	4291      	cmp	r1, r2
   20e96:	d9f3      	bls.n	20e80 <uECC_vli_modAdd+0x80>
   20e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20e9a:	4672      	mov	r2, lr
   20e9c:	4663      	mov	r3, ip
   20e9e:	4601      	mov	r1, r0
   20ea0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20ea4:	f7ff bdec 	b.w	20a80 <uECC_vli_sub>
	...

00020eb0 <uECC_vli_modSub>:
   20eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   20eb2:	f99d 4014 	ldrsb.w	r4, [sp, #20]
   20eb6:	f1c4 0408 	rsb	r4, r4, #8
   20eba:	00e4      	lsls	r4, r4, #3
   20ebc:	1c66      	adds	r6, r4, #1
   20ebe:	4686      	mov	lr, r0
   20ec0:	469c      	mov	ip, r3
   20ec2:	4635      	mov	r5, r6
   20ec4:	4604      	mov	r4, r0
   20ec6:	2700      	movs	r7, #0
   20ec8:	a304      	add	r3, pc, #16	; (adr r3, 20edc <uECC_vli_modSub+0x2c>)
   20eca:	bf00      	nop
   20ecc:	f3af 8000 	nop.w
   20ed0:	18ed      	adds	r5, r5, r3
   20ed2:	c908      	ldmia	r1!, {r3}
   20ed4:	ca01      	ldmia	r2!, {r0}
   20ed6:	1a1b      	subs	r3, r3, r0
   20ed8:	c408      	stmia	r4!, {r3}
   20eda:	4728      	bx	r5
   20edc:	c908      	ldmia	r1!, {r3}
   20ede:	ca01      	ldmia	r2!, {r0}
   20ee0:	4183      	sbcs	r3, r0
   20ee2:	c408      	stmia	r4!, {r3}
   20ee4:	c908      	ldmia	r1!, {r3}
   20ee6:	ca01      	ldmia	r2!, {r0}
   20ee8:	4183      	sbcs	r3, r0
   20eea:	c408      	stmia	r4!, {r3}
   20eec:	c908      	ldmia	r1!, {r3}
   20eee:	ca01      	ldmia	r2!, {r0}
   20ef0:	4183      	sbcs	r3, r0
   20ef2:	c408      	stmia	r4!, {r3}
   20ef4:	c908      	ldmia	r1!, {r3}
   20ef6:	ca01      	ldmia	r2!, {r0}
   20ef8:	4183      	sbcs	r3, r0
   20efa:	c408      	stmia	r4!, {r3}
   20efc:	c908      	ldmia	r1!, {r3}
   20efe:	ca01      	ldmia	r2!, {r0}
   20f00:	4183      	sbcs	r3, r0
   20f02:	c408      	stmia	r4!, {r3}
   20f04:	c908      	ldmia	r1!, {r3}
   20f06:	ca01      	ldmia	r2!, {r0}
   20f08:	4183      	sbcs	r3, r0
   20f0a:	c408      	stmia	r4!, {r3}
   20f0c:	c908      	ldmia	r1!, {r3}
   20f0e:	ca01      	ldmia	r2!, {r0}
   20f10:	4183      	sbcs	r3, r0
   20f12:	c408      	stmia	r4!, {r3}
   20f14:	417f      	adcs	r7, r7
   20f16:	2f00      	cmp	r7, #0
   20f18:	d12d      	bne.n	20f76 <uECC_vli_modSub+0xc6>
   20f1a:	4670      	mov	r0, lr
   20f1c:	4663      	mov	r3, ip
   20f1e:	4634      	mov	r4, r6
   20f20:	4672      	mov	r2, lr
   20f22:	2100      	movs	r1, #0
   20f24:	a505      	add	r5, pc, #20	; (adr r5, 20f3c <uECC_vli_modSub+0x8c>)
   20f26:	bf00      	nop
   20f28:	f3af 8000 	nop.w
   20f2c:	f3af 8000 	nop.w
   20f30:	1964      	adds	r4, r4, r5
   20f32:	ca20      	ldmia	r2!, {r5}
   20f34:	cb40      	ldmia	r3!, {r6}
   20f36:	19ad      	adds	r5, r5, r6
   20f38:	c020      	stmia	r0!, {r5}
   20f3a:	4720      	bx	r4
   20f3c:	ca20      	ldmia	r2!, {r5}
   20f3e:	cb40      	ldmia	r3!, {r6}
   20f40:	4175      	adcs	r5, r6
   20f42:	c020      	stmia	r0!, {r5}
   20f44:	ca20      	ldmia	r2!, {r5}
   20f46:	cb40      	ldmia	r3!, {r6}
   20f48:	4175      	adcs	r5, r6
   20f4a:	c020      	stmia	r0!, {r5}
   20f4c:	ca20      	ldmia	r2!, {r5}
   20f4e:	cb40      	ldmia	r3!, {r6}
   20f50:	4175      	adcs	r5, r6
   20f52:	c020      	stmia	r0!, {r5}
   20f54:	ca20      	ldmia	r2!, {r5}
   20f56:	cb40      	ldmia	r3!, {r6}
   20f58:	4175      	adcs	r5, r6
   20f5a:	c020      	stmia	r0!, {r5}
   20f5c:	ca20      	ldmia	r2!, {r5}
   20f5e:	cb40      	ldmia	r3!, {r6}
   20f60:	4175      	adcs	r5, r6
   20f62:	c020      	stmia	r0!, {r5}
   20f64:	ca20      	ldmia	r2!, {r5}
   20f66:	cb40      	ldmia	r3!, {r6}
   20f68:	4175      	adcs	r5, r6
   20f6a:	c020      	stmia	r0!, {r5}
   20f6c:	ca20      	ldmia	r2!, {r5}
   20f6e:	cb40      	ldmia	r3!, {r6}
   20f70:	4175      	adcs	r5, r6
   20f72:	c020      	stmia	r0!, {r5}
   20f74:	4149      	adcs	r1, r1
   20f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020f80 <x_side_default>:
   20f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f84:	4693      	mov	fp, r2
   20f86:	b09b      	sub	sp, #108	; 0x6c
   20f88:	4604      	mov	r4, r0
   20f8a:	4689      	mov	r9, r1
   20f8c:	a802      	add	r0, sp, #8
   20f8e:	2220      	movs	r2, #32
   20f90:	2100      	movs	r1, #0
   20f92:	f7eb f9e3 	bl	c35c <memset>
   20f96:	f99b 3000 	ldrsb.w	r3, [fp]
   20f9a:	9301      	str	r3, [sp, #4]
   20f9c:	464a      	mov	r2, r9
   20f9e:	4649      	mov	r1, r9
   20fa0:	a80a      	add	r0, sp, #40	; 0x28
   20fa2:	2503      	movs	r5, #3
   20fa4:	461e      	mov	r6, r3
   20fa6:	9502      	str	r5, [sp, #8]
   20fa8:	f7ff fd9a 	bl	20ae0 <uECC_vli_mult>
   20fac:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   20fb0:	a90a      	add	r1, sp, #40	; 0x28
   20fb2:	4620      	mov	r0, r4
   20fb4:	4798      	blx	r3
   20fb6:	f1c6 0108 	rsb	r1, r6, #8
   20fba:	40a9      	lsls	r1, r5
   20fbc:	f101 0801 	add.w	r8, r1, #1
   20fc0:	aa02      	add	r2, sp, #8
   20fc2:	4641      	mov	r1, r8
   20fc4:	f10b 0a04 	add.w	sl, fp, #4
   20fc8:	4623      	mov	r3, r4
   20fca:	4626      	mov	r6, r4
   20fcc:	2000      	movs	r0, #0
   20fce:	a703      	add	r7, pc, #12	; (adr r7, 20fdc <x_side_default+0x5c>)
   20fd0:	19c9      	adds	r1, r1, r7
   20fd2:	ce80      	ldmia	r6!, {r7}
   20fd4:	ca20      	ldmia	r2!, {r5}
   20fd6:	1b7f      	subs	r7, r7, r5
   20fd8:	c380      	stmia	r3!, {r7}
   20fda:	4708      	bx	r1
   20fdc:	ce80      	ldmia	r6!, {r7}
   20fde:	ca20      	ldmia	r2!, {r5}
   20fe0:	41af      	sbcs	r7, r5
   20fe2:	c380      	stmia	r3!, {r7}
   20fe4:	ce80      	ldmia	r6!, {r7}
   20fe6:	ca20      	ldmia	r2!, {r5}
   20fe8:	41af      	sbcs	r7, r5
   20fea:	c380      	stmia	r3!, {r7}
   20fec:	ce80      	ldmia	r6!, {r7}
   20fee:	ca20      	ldmia	r2!, {r5}
   20ff0:	41af      	sbcs	r7, r5
   20ff2:	c380      	stmia	r3!, {r7}
   20ff4:	ce80      	ldmia	r6!, {r7}
   20ff6:	ca20      	ldmia	r2!, {r5}
   20ff8:	41af      	sbcs	r7, r5
   20ffa:	c380      	stmia	r3!, {r7}
   20ffc:	ce80      	ldmia	r6!, {r7}
   20ffe:	ca20      	ldmia	r2!, {r5}
   21000:	41af      	sbcs	r7, r5
   21002:	c380      	stmia	r3!, {r7}
   21004:	ce80      	ldmia	r6!, {r7}
   21006:	ca20      	ldmia	r2!, {r5}
   21008:	41af      	sbcs	r7, r5
   2100a:	c380      	stmia	r3!, {r7}
   2100c:	ce80      	ldmia	r6!, {r7}
   2100e:	ca20      	ldmia	r2!, {r5}
   21010:	41af      	sbcs	r7, r5
   21012:	c380      	stmia	r3!, {r7}
   21014:	4140      	adcs	r0, r0
   21016:	2800      	cmp	r0, #0
   21018:	d12d      	bne.n	21076 <x_side_default+0xf6>
   2101a:	4623      	mov	r3, r4
   2101c:	4652      	mov	r2, sl
   2101e:	4641      	mov	r1, r8
   21020:	4620      	mov	r0, r4
   21022:	2500      	movs	r5, #0
   21024:	a605      	add	r6, pc, #20	; (adr r6, 2103c <x_side_default+0xbc>)
   21026:	bf00      	nop
   21028:	f3af 8000 	nop.w
   2102c:	f3af 8000 	nop.w
   21030:	1989      	adds	r1, r1, r6
   21032:	c840      	ldmia	r0!, {r6}
   21034:	ca80      	ldmia	r2!, {r7}
   21036:	19f6      	adds	r6, r6, r7
   21038:	c340      	stmia	r3!, {r6}
   2103a:	4708      	bx	r1
   2103c:	c840      	ldmia	r0!, {r6}
   2103e:	ca80      	ldmia	r2!, {r7}
   21040:	417e      	adcs	r6, r7
   21042:	c340      	stmia	r3!, {r6}
   21044:	c840      	ldmia	r0!, {r6}
   21046:	ca80      	ldmia	r2!, {r7}
   21048:	417e      	adcs	r6, r7
   2104a:	c340      	stmia	r3!, {r6}
   2104c:	c840      	ldmia	r0!, {r6}
   2104e:	ca80      	ldmia	r2!, {r7}
   21050:	417e      	adcs	r6, r7
   21052:	c340      	stmia	r3!, {r6}
   21054:	c840      	ldmia	r0!, {r6}
   21056:	ca80      	ldmia	r2!, {r7}
   21058:	417e      	adcs	r6, r7
   2105a:	c340      	stmia	r3!, {r6}
   2105c:	c840      	ldmia	r0!, {r6}
   2105e:	ca80      	ldmia	r2!, {r7}
   21060:	417e      	adcs	r6, r7
   21062:	c340      	stmia	r3!, {r6}
   21064:	c840      	ldmia	r0!, {r6}
   21066:	ca80      	ldmia	r2!, {r7}
   21068:	417e      	adcs	r6, r7
   2106a:	c340      	stmia	r3!, {r6}
   2106c:	c840      	ldmia	r0!, {r6}
   2106e:	ca80      	ldmia	r2!, {r7}
   21070:	417e      	adcs	r6, r7
   21072:	c340      	stmia	r3!, {r6}
   21074:	416d      	adcs	r5, r5
   21076:	464a      	mov	r2, r9
   21078:	f99b 3000 	ldrsb.w	r3, [fp]
   2107c:	4621      	mov	r1, r4
   2107e:	a80a      	add	r0, sp, #40	; 0x28
   21080:	f7ff fd2e 	bl	20ae0 <uECC_vli_mult>
   21084:	a90a      	add	r1, sp, #40	; 0x28
   21086:	f8db 30ac 	ldr.w	r3, [fp, #172]	; 0xac
   2108a:	4620      	mov	r0, r4
   2108c:	4798      	blx	r3
   2108e:	4626      	mov	r6, r4
   21090:	f10b 0384 	add.w	r3, fp, #132	; 0x84
   21094:	4641      	mov	r1, r8
   21096:	4622      	mov	r2, r4
   21098:	2000      	movs	r0, #0
   2109a:	a504      	add	r5, pc, #16	; (adr r5, 210ac <x_side_default+0x12c>)
   2109c:	f3af 8000 	nop.w
   210a0:	1949      	adds	r1, r1, r5
   210a2:	ce20      	ldmia	r6!, {r5}
   210a4:	cb80      	ldmia	r3!, {r7}
   210a6:	19ed      	adds	r5, r5, r7
   210a8:	c220      	stmia	r2!, {r5}
   210aa:	4708      	bx	r1
   210ac:	ce20      	ldmia	r6!, {r5}
   210ae:	cb80      	ldmia	r3!, {r7}
   210b0:	417d      	adcs	r5, r7
   210b2:	c220      	stmia	r2!, {r5}
   210b4:	ce20      	ldmia	r6!, {r5}
   210b6:	cb80      	ldmia	r3!, {r7}
   210b8:	417d      	adcs	r5, r7
   210ba:	c220      	stmia	r2!, {r5}
   210bc:	ce20      	ldmia	r6!, {r5}
   210be:	cb80      	ldmia	r3!, {r7}
   210c0:	417d      	adcs	r5, r7
   210c2:	c220      	stmia	r2!, {r5}
   210c4:	ce20      	ldmia	r6!, {r5}
   210c6:	cb80      	ldmia	r3!, {r7}
   210c8:	417d      	adcs	r5, r7
   210ca:	c220      	stmia	r2!, {r5}
   210cc:	ce20      	ldmia	r6!, {r5}
   210ce:	cb80      	ldmia	r3!, {r7}
   210d0:	417d      	adcs	r5, r7
   210d2:	c220      	stmia	r2!, {r5}
   210d4:	ce20      	ldmia	r6!, {r5}
   210d6:	cb80      	ldmia	r3!, {r7}
   210d8:	417d      	adcs	r5, r7
   210da:	c220      	stmia	r2!, {r5}
   210dc:	ce20      	ldmia	r6!, {r5}
   210de:	cb80      	ldmia	r3!, {r7}
   210e0:	417d      	adcs	r5, r7
   210e2:	c220      	stmia	r2!, {r5}
   210e4:	4140      	adcs	r0, r0
   210e6:	b9d0      	cbnz	r0, 2111e <x_side_default+0x19e>
   210e8:	9b01      	ldr	r3, [sp, #4]
   210ea:	3b01      	subs	r3, #1
   210ec:	b25b      	sxtb	r3, r3
   210ee:	2b00      	cmp	r3, #0
   210f0:	db15      	blt.n	2111e <x_side_default+0x19e>
   210f2:	b21a      	sxth	r2, r3
   210f4:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   210f8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   210fc:	4291      	cmp	r1, r2
   210fe:	d80b      	bhi.n	21118 <x_side_default+0x198>
   21100:	d30d      	bcc.n	2111e <x_side_default+0x19e>
   21102:	3b01      	subs	r3, #1
   21104:	b25b      	sxtb	r3, r3
   21106:	1c59      	adds	r1, r3, #1
   21108:	b21a      	sxth	r2, r3
   2110a:	d008      	beq.n	2111e <x_side_default+0x19e>
   2110c:	f85a 1022 	ldr.w	r1, [sl, r2, lsl #2]
   21110:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   21114:	4291      	cmp	r1, r2
   21116:	d9f3      	bls.n	21100 <x_side_default+0x180>
   21118:	b01b      	add	sp, #108	; 0x6c
   2111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2111e:	9b01      	ldr	r3, [sp, #4]
   21120:	4652      	mov	r2, sl
   21122:	4621      	mov	r1, r4
   21124:	4620      	mov	r0, r4
   21126:	f7ff fcab 	bl	20a80 <uECC_vli_sub>
   2112a:	b01b      	add	sp, #108	; 0x6c
   2112c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021130 <vli_mmod_fast_secp256r1>:
   21130:	680b      	ldr	r3, [r1, #0]
   21132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21136:	6003      	str	r3, [r0, #0]
   21138:	684b      	ldr	r3, [r1, #4]
   2113a:	6043      	str	r3, [r0, #4]
   2113c:	688b      	ldr	r3, [r1, #8]
   2113e:	6083      	str	r3, [r0, #8]
   21140:	68cb      	ldr	r3, [r1, #12]
   21142:	60c3      	str	r3, [r0, #12]
   21144:	690b      	ldr	r3, [r1, #16]
   21146:	6103      	str	r3, [r0, #16]
   21148:	694b      	ldr	r3, [r1, #20]
   2114a:	6143      	str	r3, [r0, #20]
   2114c:	698b      	ldr	r3, [r1, #24]
   2114e:	6183      	str	r3, [r0, #24]
   21150:	69cb      	ldr	r3, [r1, #28]
   21152:	61c3      	str	r3, [r0, #28]
   21154:	b08d      	sub	sp, #52	; 0x34
   21156:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   21158:	6b0f      	ldr	r7, [r1, #48]	; 0x30
   2115a:	6b4e      	ldr	r6, [r1, #52]	; 0x34
   2115c:	6b8d      	ldr	r5, [r1, #56]	; 0x38
   2115e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   21160:	940b      	str	r4, [sp, #44]	; 0x2c
   21162:	f04f 0a00 	mov.w	sl, #0
   21166:	ac04      	add	r4, sp, #16
   21168:	9708      	str	r7, [sp, #32]
   2116a:	9609      	str	r6, [sp, #36]	; 0x24
   2116c:	950a      	str	r5, [sp, #40]	; 0x28
   2116e:	4681      	mov	r9, r0
   21170:	9307      	str	r3, [sp, #28]
   21172:	f8cd a018 	str.w	sl, [sp, #24]
   21176:	f8cd a014 	str.w	sl, [sp, #20]
   2117a:	f8cd a010 	str.w	sl, [sp, #16]
   2117e:	2501      	movs	r5, #1
   21180:	4626      	mov	r6, r4
   21182:	4627      	mov	r7, r4
   21184:	2300      	movs	r3, #0
   21186:	a205      	add	r2, pc, #20	; (adr r2, 2119c <vli_mmod_fast_secp256r1+0x6c>)
   21188:	f3af 8000 	nop.w
   2118c:	f3af 8000 	nop.w
   21190:	18ad      	adds	r5, r5, r2
   21192:	ce04      	ldmia	r6!, {r2}
   21194:	cf01      	ldmia	r7!, {r0}
   21196:	1812      	adds	r2, r2, r0
   21198:	c404      	stmia	r4!, {r2}
   2119a:	4728      	bx	r5
   2119c:	ce04      	ldmia	r6!, {r2}
   2119e:	cf01      	ldmia	r7!, {r0}
   211a0:	4142      	adcs	r2, r0
   211a2:	c404      	stmia	r4!, {r2}
   211a4:	ce04      	ldmia	r6!, {r2}
   211a6:	cf01      	ldmia	r7!, {r0}
   211a8:	4142      	adcs	r2, r0
   211aa:	c404      	stmia	r4!, {r2}
   211ac:	ce04      	ldmia	r6!, {r2}
   211ae:	cf01      	ldmia	r7!, {r0}
   211b0:	4142      	adcs	r2, r0
   211b2:	c404      	stmia	r4!, {r2}
   211b4:	ce04      	ldmia	r6!, {r2}
   211b6:	cf01      	ldmia	r7!, {r0}
   211b8:	4142      	adcs	r2, r0
   211ba:	c404      	stmia	r4!, {r2}
   211bc:	ce04      	ldmia	r6!, {r2}
   211be:	cf01      	ldmia	r7!, {r0}
   211c0:	4142      	adcs	r2, r0
   211c2:	c404      	stmia	r4!, {r2}
   211c4:	ce04      	ldmia	r6!, {r2}
   211c6:	cf01      	ldmia	r7!, {r0}
   211c8:	4142      	adcs	r2, r0
   211ca:	c404      	stmia	r4!, {r2}
   211cc:	ce04      	ldmia	r6!, {r2}
   211ce:	cf01      	ldmia	r7!, {r0}
   211d0:	4142      	adcs	r2, r0
   211d2:	c404      	stmia	r4!, {r2}
   211d4:	415b      	adcs	r3, r3
   211d6:	2601      	movs	r6, #1
   211d8:	9300      	str	r3, [sp, #0]
   211da:	464c      	mov	r4, r9
   211dc:	ad04      	add	r5, sp, #16
   211de:	464f      	mov	r7, r9
   211e0:	2300      	movs	r3, #0
   211e2:	a206      	add	r2, pc, #24	; (adr r2, 211fc <vli_mmod_fast_secp256r1+0xcc>)
   211e4:	f3af 8000 	nop.w
   211e8:	f3af 8000 	nop.w
   211ec:	f3af 8000 	nop.w
   211f0:	18b6      	adds	r6, r6, r2
   211f2:	cf04      	ldmia	r7!, {r2}
   211f4:	cd01      	ldmia	r5!, {r0}
   211f6:	1812      	adds	r2, r2, r0
   211f8:	c404      	stmia	r4!, {r2}
   211fa:	4730      	bx	r6
   211fc:	cf04      	ldmia	r7!, {r2}
   211fe:	cd01      	ldmia	r5!, {r0}
   21200:	4142      	adcs	r2, r0
   21202:	c404      	stmia	r4!, {r2}
   21204:	cf04      	ldmia	r7!, {r2}
   21206:	cd01      	ldmia	r5!, {r0}
   21208:	4142      	adcs	r2, r0
   2120a:	c404      	stmia	r4!, {r2}
   2120c:	cf04      	ldmia	r7!, {r2}
   2120e:	cd01      	ldmia	r5!, {r0}
   21210:	4142      	adcs	r2, r0
   21212:	c404      	stmia	r4!, {r2}
   21214:	cf04      	ldmia	r7!, {r2}
   21216:	cd01      	ldmia	r5!, {r0}
   21218:	4142      	adcs	r2, r0
   2121a:	c404      	stmia	r4!, {r2}
   2121c:	cf04      	ldmia	r7!, {r2}
   2121e:	cd01      	ldmia	r5!, {r0}
   21220:	4142      	adcs	r2, r0
   21222:	c404      	stmia	r4!, {r2}
   21224:	cf04      	ldmia	r7!, {r2}
   21226:	cd01      	ldmia	r5!, {r0}
   21228:	4142      	adcs	r2, r0
   2122a:	c404      	stmia	r4!, {r2}
   2122c:	cf04      	ldmia	r7!, {r2}
   2122e:	cd01      	ldmia	r5!, {r0}
   21230:	4142      	adcs	r2, r0
   21232:	c404      	stmia	r4!, {r2}
   21234:	415b      	adcs	r3, r3
   21236:	f101 0434 	add.w	r4, r1, #52	; 0x34
   2123a:	ccd0      	ldmia	r4, {r4, r6, r7}
   2123c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
   2123e:	9408      	str	r4, [sp, #32]
   21240:	ac04      	add	r4, sp, #16
   21242:	9507      	str	r5, [sp, #28]
   21244:	9609      	str	r6, [sp, #36]	; 0x24
   21246:	970a      	str	r7, [sp, #40]	; 0x28
   21248:	4698      	mov	r8, r3
   2124a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   2124e:	2501      	movs	r5, #1
   21250:	4626      	mov	r6, r4
   21252:	4627      	mov	r7, r4
   21254:	2300      	movs	r3, #0
   21256:	a205      	add	r2, pc, #20	; (adr r2, 2126c <vli_mmod_fast_secp256r1+0x13c>)
   21258:	f3af 8000 	nop.w
   2125c:	f3af 8000 	nop.w
   21260:	18ad      	adds	r5, r5, r2
   21262:	ce04      	ldmia	r6!, {r2}
   21264:	cf01      	ldmia	r7!, {r0}
   21266:	1812      	adds	r2, r2, r0
   21268:	c404      	stmia	r4!, {r2}
   2126a:	4728      	bx	r5
   2126c:	ce04      	ldmia	r6!, {r2}
   2126e:	cf01      	ldmia	r7!, {r0}
   21270:	4142      	adcs	r2, r0
   21272:	c404      	stmia	r4!, {r2}
   21274:	ce04      	ldmia	r6!, {r2}
   21276:	cf01      	ldmia	r7!, {r0}
   21278:	4142      	adcs	r2, r0
   2127a:	c404      	stmia	r4!, {r2}
   2127c:	ce04      	ldmia	r6!, {r2}
   2127e:	cf01      	ldmia	r7!, {r0}
   21280:	4142      	adcs	r2, r0
   21282:	c404      	stmia	r4!, {r2}
   21284:	ce04      	ldmia	r6!, {r2}
   21286:	cf01      	ldmia	r7!, {r0}
   21288:	4142      	adcs	r2, r0
   2128a:	c404      	stmia	r4!, {r2}
   2128c:	ce04      	ldmia	r6!, {r2}
   2128e:	cf01      	ldmia	r7!, {r0}
   21290:	4142      	adcs	r2, r0
   21292:	c404      	stmia	r4!, {r2}
   21294:	ce04      	ldmia	r6!, {r2}
   21296:	cf01      	ldmia	r7!, {r0}
   21298:	4142      	adcs	r2, r0
   2129a:	c404      	stmia	r4!, {r2}
   2129c:	ce04      	ldmia	r6!, {r2}
   2129e:	cf01      	ldmia	r7!, {r0}
   212a0:	4142      	adcs	r2, r0
   212a2:	c404      	stmia	r4!, {r2}
   212a4:	415b      	adcs	r3, r3
   212a6:	2601      	movs	r6, #1
   212a8:	9301      	str	r3, [sp, #4]
   212aa:	464c      	mov	r4, r9
   212ac:	ad04      	add	r5, sp, #16
   212ae:	464f      	mov	r7, r9
   212b0:	2300      	movs	r3, #0
   212b2:	a206      	add	r2, pc, #24	; (adr r2, 212cc <vli_mmod_fast_secp256r1+0x19c>)
   212b4:	f3af 8000 	nop.w
   212b8:	f3af 8000 	nop.w
   212bc:	f3af 8000 	nop.w
   212c0:	18b6      	adds	r6, r6, r2
   212c2:	cf04      	ldmia	r7!, {r2}
   212c4:	cd01      	ldmia	r5!, {r0}
   212c6:	1812      	adds	r2, r2, r0
   212c8:	c404      	stmia	r4!, {r2}
   212ca:	4730      	bx	r6
   212cc:	cf04      	ldmia	r7!, {r2}
   212ce:	cd01      	ldmia	r5!, {r0}
   212d0:	4142      	adcs	r2, r0
   212d2:	c404      	stmia	r4!, {r2}
   212d4:	cf04      	ldmia	r7!, {r2}
   212d6:	cd01      	ldmia	r5!, {r0}
   212d8:	4142      	adcs	r2, r0
   212da:	c404      	stmia	r4!, {r2}
   212dc:	cf04      	ldmia	r7!, {r2}
   212de:	cd01      	ldmia	r5!, {r0}
   212e0:	4142      	adcs	r2, r0
   212e2:	c404      	stmia	r4!, {r2}
   212e4:	cf04      	ldmia	r7!, {r2}
   212e6:	cd01      	ldmia	r5!, {r0}
   212e8:	4142      	adcs	r2, r0
   212ea:	c404      	stmia	r4!, {r2}
   212ec:	cf04      	ldmia	r7!, {r2}
   212ee:	cd01      	ldmia	r5!, {r0}
   212f0:	4142      	adcs	r2, r0
   212f2:	c404      	stmia	r4!, {r2}
   212f4:	cf04      	ldmia	r7!, {r2}
   212f6:	cd01      	ldmia	r5!, {r0}
   212f8:	4142      	adcs	r2, r0
   212fa:	c404      	stmia	r4!, {r2}
   212fc:	cf04      	ldmia	r7!, {r2}
   212fe:	cd01      	ldmia	r5!, {r0}
   21300:	4142      	adcs	r2, r0
   21302:	c404      	stmia	r4!, {r2}
   21304:	415b      	adcs	r3, r3
   21306:	f101 0420 	add.w	r4, r1, #32
   2130a:	cc70      	ldmia	r4, {r4, r5, r6}
   2130c:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   2130e:	9404      	str	r4, [sp, #16]
   21310:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   21312:	9505      	str	r5, [sp, #20]
   21314:	9606      	str	r6, [sp, #24]
   21316:	970a      	str	r7, [sp, #40]	; 0x28
   21318:	940b      	str	r4, [sp, #44]	; 0x2c
   2131a:	9302      	str	r3, [sp, #8]
   2131c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   21320:	f8cd a020 	str.w	sl, [sp, #32]
   21324:	f8cd a01c 	str.w	sl, [sp, #28]
   21328:	464c      	mov	r4, r9
   2132a:	ad04      	add	r5, sp, #16
   2132c:	2601      	movs	r6, #1
   2132e:	464f      	mov	r7, r9
   21330:	2300      	movs	r3, #0
   21332:	a206      	add	r2, pc, #24	; (adr r2, 2134c <vli_mmod_fast_secp256r1+0x21c>)
   21334:	f3af 8000 	nop.w
   21338:	f3af 8000 	nop.w
   2133c:	f3af 8000 	nop.w
   21340:	18b6      	adds	r6, r6, r2
   21342:	cf04      	ldmia	r7!, {r2}
   21344:	cd01      	ldmia	r5!, {r0}
   21346:	1812      	adds	r2, r2, r0
   21348:	c404      	stmia	r4!, {r2}
   2134a:	4730      	bx	r6
   2134c:	cf04      	ldmia	r7!, {r2}
   2134e:	cd01      	ldmia	r5!, {r0}
   21350:	4142      	adcs	r2, r0
   21352:	c404      	stmia	r4!, {r2}
   21354:	cf04      	ldmia	r7!, {r2}
   21356:	cd01      	ldmia	r5!, {r0}
   21358:	4142      	adcs	r2, r0
   2135a:	c404      	stmia	r4!, {r2}
   2135c:	cf04      	ldmia	r7!, {r2}
   2135e:	cd01      	ldmia	r5!, {r0}
   21360:	4142      	adcs	r2, r0
   21362:	c404      	stmia	r4!, {r2}
   21364:	cf04      	ldmia	r7!, {r2}
   21366:	cd01      	ldmia	r5!, {r0}
   21368:	4142      	adcs	r2, r0
   2136a:	c404      	stmia	r4!, {r2}
   2136c:	cf04      	ldmia	r7!, {r2}
   2136e:	cd01      	ldmia	r5!, {r0}
   21370:	4142      	adcs	r2, r0
   21372:	c404      	stmia	r4!, {r2}
   21374:	cf04      	ldmia	r7!, {r2}
   21376:	cd01      	ldmia	r5!, {r0}
   21378:	4142      	adcs	r2, r0
   2137a:	c404      	stmia	r4!, {r2}
   2137c:	cf04      	ldmia	r7!, {r2}
   2137e:	cd01      	ldmia	r5!, {r0}
   21380:	4142      	adcs	r2, r0
   21382:	c404      	stmia	r4!, {r2}
   21384:	415b      	adcs	r3, r3
   21386:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   21388:	9505      	str	r5, [sp, #20]
   2138a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   2138c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   2138e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
   21390:	6b8f      	ldr	r7, [r1, #56]	; 0x38
   21392:	9303      	str	r3, [sp, #12]
   21394:	9509      	str	r5, [sp, #36]	; 0x24
   21396:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   21398:	6a0d      	ldr	r5, [r1, #32]
   2139a:	9606      	str	r6, [sp, #24]
   2139c:	9708      	str	r7, [sp, #32]
   2139e:	950b      	str	r5, [sp, #44]	; 0x2c
   213a0:	9407      	str	r4, [sp, #28]
   213a2:	940a      	str	r4, [sp, #40]	; 0x28
   213a4:	9304      	str	r3, [sp, #16]
   213a6:	464c      	mov	r4, r9
   213a8:	ad04      	add	r5, sp, #16
   213aa:	2601      	movs	r6, #1
   213ac:	464f      	mov	r7, r9
   213ae:	2300      	movs	r3, #0
   213b0:	a206      	add	r2, pc, #24	; (adr r2, 213cc <vli_mmod_fast_secp256r1+0x29c>)
   213b2:	bf00      	nop
   213b4:	f3af 8000 	nop.w
   213b8:	f3af 8000 	nop.w
   213bc:	f3af 8000 	nop.w
   213c0:	18b6      	adds	r6, r6, r2
   213c2:	cf04      	ldmia	r7!, {r2}
   213c4:	cd01      	ldmia	r5!, {r0}
   213c6:	1812      	adds	r2, r2, r0
   213c8:	c404      	stmia	r4!, {r2}
   213ca:	4730      	bx	r6
   213cc:	cf04      	ldmia	r7!, {r2}
   213ce:	cd01      	ldmia	r5!, {r0}
   213d0:	4142      	adcs	r2, r0
   213d2:	c404      	stmia	r4!, {r2}
   213d4:	cf04      	ldmia	r7!, {r2}
   213d6:	cd01      	ldmia	r5!, {r0}
   213d8:	4142      	adcs	r2, r0
   213da:	c404      	stmia	r4!, {r2}
   213dc:	cf04      	ldmia	r7!, {r2}
   213de:	cd01      	ldmia	r5!, {r0}
   213e0:	4142      	adcs	r2, r0
   213e2:	c404      	stmia	r4!, {r2}
   213e4:	cf04      	ldmia	r7!, {r2}
   213e6:	cd01      	ldmia	r5!, {r0}
   213e8:	4142      	adcs	r2, r0
   213ea:	c404      	stmia	r4!, {r2}
   213ec:	cf04      	ldmia	r7!, {r2}
   213ee:	cd01      	ldmia	r5!, {r0}
   213f0:	4142      	adcs	r2, r0
   213f2:	c404      	stmia	r4!, {r2}
   213f4:	cf04      	ldmia	r7!, {r2}
   213f6:	cd01      	ldmia	r5!, {r0}
   213f8:	4142      	adcs	r2, r0
   213fa:	c404      	stmia	r4!, {r2}
   213fc:	cf04      	ldmia	r7!, {r2}
   213fe:	cd01      	ldmia	r5!, {r0}
   21400:	4142      	adcs	r2, r0
   21402:	c404      	stmia	r4!, {r2}
   21404:	415b      	adcs	r3, r3
   21406:	f101 042c 	add.w	r4, r1, #44	; 0x2c
   2140a:	cc70      	ldmia	r4, {r4, r5, r6}
   2140c:	6a0f      	ldr	r7, [r1, #32]
   2140e:	9404      	str	r4, [sp, #16]
   21410:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   21412:	9505      	str	r5, [sp, #20]
   21414:	9606      	str	r6, [sp, #24]
   21416:	970a      	str	r7, [sp, #40]	; 0x28
   21418:	940b      	str	r4, [sp, #44]	; 0x2c
   2141a:	469b      	mov	fp, r3
   2141c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   21420:	f8cd a020 	str.w	sl, [sp, #32]
   21424:	f8cd a01c 	str.w	sl, [sp, #28]
   21428:	464c      	mov	r4, r9
   2142a:	ad04      	add	r5, sp, #16
   2142c:	2601      	movs	r6, #1
   2142e:	464f      	mov	r7, r9
   21430:	2300      	movs	r3, #0
   21432:	a206      	add	r2, pc, #24	; (adr r2, 2144c <vli_mmod_fast_secp256r1+0x31c>)
   21434:	f3af 8000 	nop.w
   21438:	f3af 8000 	nop.w
   2143c:	f3af 8000 	nop.w
   21440:	18b6      	adds	r6, r6, r2
   21442:	cf04      	ldmia	r7!, {r2}
   21444:	cd01      	ldmia	r5!, {r0}
   21446:	1a12      	subs	r2, r2, r0
   21448:	c404      	stmia	r4!, {r2}
   2144a:	4730      	bx	r6
   2144c:	cf04      	ldmia	r7!, {r2}
   2144e:	cd01      	ldmia	r5!, {r0}
   21450:	4182      	sbcs	r2, r0
   21452:	c404      	stmia	r4!, {r2}
   21454:	cf04      	ldmia	r7!, {r2}
   21456:	cd01      	ldmia	r5!, {r0}
   21458:	4182      	sbcs	r2, r0
   2145a:	c404      	stmia	r4!, {r2}
   2145c:	cf04      	ldmia	r7!, {r2}
   2145e:	cd01      	ldmia	r5!, {r0}
   21460:	4182      	sbcs	r2, r0
   21462:	c404      	stmia	r4!, {r2}
   21464:	cf04      	ldmia	r7!, {r2}
   21466:	cd01      	ldmia	r5!, {r0}
   21468:	4182      	sbcs	r2, r0
   2146a:	c404      	stmia	r4!, {r2}
   2146c:	cf04      	ldmia	r7!, {r2}
   2146e:	cd01      	ldmia	r5!, {r0}
   21470:	4182      	sbcs	r2, r0
   21472:	c404      	stmia	r4!, {r2}
   21474:	cf04      	ldmia	r7!, {r2}
   21476:	cd01      	ldmia	r5!, {r0}
   21478:	4182      	sbcs	r2, r0
   2147a:	c404      	stmia	r4!, {r2}
   2147c:	cf04      	ldmia	r7!, {r2}
   2147e:	cd01      	ldmia	r5!, {r0}
   21480:	4182      	sbcs	r2, r0
   21482:	c404      	stmia	r4!, {r2}
   21484:	415b      	adcs	r3, r3
   21486:	f101 0430 	add.w	r4, r1, #48	; 0x30
   2148a:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
   2148c:	9404      	str	r4, [sp, #16]
   2148e:	9505      	str	r5, [sp, #20]
   21490:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   21492:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   21494:	9606      	str	r6, [sp, #24]
   21496:	9707      	str	r7, [sp, #28]
   21498:	950a      	str	r5, [sp, #40]	; 0x28
   2149a:	940b      	str	r4, [sp, #44]	; 0x2c
   2149c:	469c      	mov	ip, r3
   2149e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   214a2:	f8cd a020 	str.w	sl, [sp, #32]
   214a6:	464c      	mov	r4, r9
   214a8:	ad04      	add	r5, sp, #16
   214aa:	2601      	movs	r6, #1
   214ac:	464f      	mov	r7, r9
   214ae:	2300      	movs	r3, #0
   214b0:	a206      	add	r2, pc, #24	; (adr r2, 214cc <vli_mmod_fast_secp256r1+0x39c>)
   214b2:	bf00      	nop
   214b4:	f3af 8000 	nop.w
   214b8:	f3af 8000 	nop.w
   214bc:	f3af 8000 	nop.w
   214c0:	18b6      	adds	r6, r6, r2
   214c2:	cf04      	ldmia	r7!, {r2}
   214c4:	cd01      	ldmia	r5!, {r0}
   214c6:	1a12      	subs	r2, r2, r0
   214c8:	c404      	stmia	r4!, {r2}
   214ca:	4730      	bx	r6
   214cc:	cf04      	ldmia	r7!, {r2}
   214ce:	cd01      	ldmia	r5!, {r0}
   214d0:	4182      	sbcs	r2, r0
   214d2:	c404      	stmia	r4!, {r2}
   214d4:	cf04      	ldmia	r7!, {r2}
   214d6:	cd01      	ldmia	r5!, {r0}
   214d8:	4182      	sbcs	r2, r0
   214da:	c404      	stmia	r4!, {r2}
   214dc:	cf04      	ldmia	r7!, {r2}
   214de:	cd01      	ldmia	r5!, {r0}
   214e0:	4182      	sbcs	r2, r0
   214e2:	c404      	stmia	r4!, {r2}
   214e4:	cf04      	ldmia	r7!, {r2}
   214e6:	cd01      	ldmia	r5!, {r0}
   214e8:	4182      	sbcs	r2, r0
   214ea:	c404      	stmia	r4!, {r2}
   214ec:	cf04      	ldmia	r7!, {r2}
   214ee:	cd01      	ldmia	r5!, {r0}
   214f0:	4182      	sbcs	r2, r0
   214f2:	c404      	stmia	r4!, {r2}
   214f4:	cf04      	ldmia	r7!, {r2}
   214f6:	cd01      	ldmia	r5!, {r0}
   214f8:	4182      	sbcs	r2, r0
   214fa:	c404      	stmia	r4!, {r2}
   214fc:	cf04      	ldmia	r7!, {r2}
   214fe:	cd01      	ldmia	r5!, {r0}
   21500:	4182      	sbcs	r2, r0
   21502:	c404      	stmia	r4!, {r2}
   21504:	415b      	adcs	r3, r3
   21506:	f101 0434 	add.w	r4, r1, #52	; 0x34
   2150a:	cc70      	ldmia	r4, {r4, r5, r6}
   2150c:	6a0f      	ldr	r7, [r1, #32]
   2150e:	9404      	str	r4, [sp, #16]
   21510:	9505      	str	r5, [sp, #20]
   21512:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   21514:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   21516:	9606      	str	r6, [sp, #24]
   21518:	6b0e      	ldr	r6, [r1, #48]	; 0x30
   2151a:	9408      	str	r4, [sp, #32]
   2151c:	469e      	mov	lr, r3
   2151e:	9509      	str	r5, [sp, #36]	; 0x24
   21520:	960b      	str	r6, [sp, #44]	; 0x2c
   21522:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   21526:	9707      	str	r7, [sp, #28]
   21528:	464c      	mov	r4, r9
   2152a:	ad04      	add	r5, sp, #16
   2152c:	2601      	movs	r6, #1
   2152e:	464b      	mov	r3, r9
   21530:	2700      	movs	r7, #0
   21532:	a206      	add	r2, pc, #24	; (adr r2, 2154c <vli_mmod_fast_secp256r1+0x41c>)
   21534:	f3af 8000 	nop.w
   21538:	f3af 8000 	nop.w
   2153c:	f3af 8000 	nop.w
   21540:	18b6      	adds	r6, r6, r2
   21542:	cb04      	ldmia	r3!, {r2}
   21544:	cd01      	ldmia	r5!, {r0}
   21546:	1a12      	subs	r2, r2, r0
   21548:	c404      	stmia	r4!, {r2}
   2154a:	4730      	bx	r6
   2154c:	cb04      	ldmia	r3!, {r2}
   2154e:	cd01      	ldmia	r5!, {r0}
   21550:	4182      	sbcs	r2, r0
   21552:	c404      	stmia	r4!, {r2}
   21554:	cb04      	ldmia	r3!, {r2}
   21556:	cd01      	ldmia	r5!, {r0}
   21558:	4182      	sbcs	r2, r0
   2155a:	c404      	stmia	r4!, {r2}
   2155c:	cb04      	ldmia	r3!, {r2}
   2155e:	cd01      	ldmia	r5!, {r0}
   21560:	4182      	sbcs	r2, r0
   21562:	c404      	stmia	r4!, {r2}
   21564:	cb04      	ldmia	r3!, {r2}
   21566:	cd01      	ldmia	r5!, {r0}
   21568:	4182      	sbcs	r2, r0
   2156a:	c404      	stmia	r4!, {r2}
   2156c:	cb04      	ldmia	r3!, {r2}
   2156e:	cd01      	ldmia	r5!, {r0}
   21570:	4182      	sbcs	r2, r0
   21572:	c404      	stmia	r4!, {r2}
   21574:	cb04      	ldmia	r3!, {r2}
   21576:	cd01      	ldmia	r5!, {r0}
   21578:	4182      	sbcs	r2, r0
   2157a:	c404      	stmia	r4!, {r2}
   2157c:	cb04      	ldmia	r3!, {r2}
   2157e:	cd01      	ldmia	r5!, {r0}
   21580:	4182      	sbcs	r2, r0
   21582:	c404      	stmia	r4!, {r2}
   21584:	417f      	adcs	r7, r7
   21586:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   21588:	6a4e      	ldr	r6, [r1, #36]	; 0x24
   2158a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   2158c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
   2158e:	9404      	str	r4, [sp, #16]
   21590:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   21592:	6b49      	ldr	r1, [r1, #52]	; 0x34
   21594:	9208      	str	r2, [sp, #32]
   21596:	9607      	str	r6, [sp, #28]
   21598:	9409      	str	r4, [sp, #36]	; 0x24
   2159a:	910b      	str	r1, [sp, #44]	; 0x2c
   2159c:	f8cd a018 	str.w	sl, [sp, #24]
   215a0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   215a4:	9505      	str	r5, [sp, #20]
   215a6:	aa04      	add	r2, sp, #16
   215a8:	4649      	mov	r1, r9
   215aa:	2401      	movs	r4, #1
   215ac:	464e      	mov	r6, r9
   215ae:	2500      	movs	r5, #0
   215b0:	a006      	add	r0, pc, #24	; (adr r0, 215cc <vli_mmod_fast_secp256r1+0x49c>)
   215b2:	bf00      	nop
   215b4:	f3af 8000 	nop.w
   215b8:	f3af 8000 	nop.w
   215bc:	f3af 8000 	nop.w
   215c0:	1824      	adds	r4, r4, r0
   215c2:	ce01      	ldmia	r6!, {r0}
   215c4:	ca08      	ldmia	r2!, {r3}
   215c6:	1ac0      	subs	r0, r0, r3
   215c8:	c101      	stmia	r1!, {r0}
   215ca:	4720      	bx	r4
   215cc:	ce01      	ldmia	r6!, {r0}
   215ce:	ca08      	ldmia	r2!, {r3}
   215d0:	4198      	sbcs	r0, r3
   215d2:	c101      	stmia	r1!, {r0}
   215d4:	ce01      	ldmia	r6!, {r0}
   215d6:	ca08      	ldmia	r2!, {r3}
   215d8:	4198      	sbcs	r0, r3
   215da:	c101      	stmia	r1!, {r0}
   215dc:	ce01      	ldmia	r6!, {r0}
   215de:	ca08      	ldmia	r2!, {r3}
   215e0:	4198      	sbcs	r0, r3
   215e2:	c101      	stmia	r1!, {r0}
   215e4:	ce01      	ldmia	r6!, {r0}
   215e6:	ca08      	ldmia	r2!, {r3}
   215e8:	4198      	sbcs	r0, r3
   215ea:	c101      	stmia	r1!, {r0}
   215ec:	ce01      	ldmia	r6!, {r0}
   215ee:	ca08      	ldmia	r2!, {r3}
   215f0:	4198      	sbcs	r0, r3
   215f2:	c101      	stmia	r1!, {r0}
   215f4:	ce01      	ldmia	r6!, {r0}
   215f6:	ca08      	ldmia	r2!, {r3}
   215f8:	4198      	sbcs	r0, r3
   215fa:	c101      	stmia	r1!, {r0}
   215fc:	ce01      	ldmia	r6!, {r0}
   215fe:	ca08      	ldmia	r2!, {r3}
   21600:	4198      	sbcs	r0, r3
   21602:	c101      	stmia	r1!, {r0}
   21604:	416d      	adcs	r5, r5
   21606:	9b00      	ldr	r3, [sp, #0]
   21608:	eb08 0203 	add.w	r2, r8, r3
   2160c:	9b01      	ldr	r3, [sp, #4]
   2160e:	441a      	add	r2, r3
   21610:	9b02      	ldr	r3, [sp, #8]
   21612:	441a      	add	r2, r3
   21614:	9b03      	ldr	r3, [sp, #12]
   21616:	441a      	add	r2, r3
   21618:	445a      	add	r2, fp
   2161a:	45d4      	cmp	ip, sl
   2161c:	bf14      	ite	ne
   2161e:	4694      	movne	ip, r2
   21620:	f1a2 0c01 	subeq.w	ip, r2, #1
   21624:	45d6      	cmp	lr, sl
   21626:	bf14      	ite	ne
   21628:	46e6      	movne	lr, ip
   2162a:	f1ac 0e01 	subeq.w	lr, ip, #1
   2162e:	4557      	cmp	r7, sl
   21630:	bf14      	ite	ne
   21632:	4677      	movne	r7, lr
   21634:	f1ae 0701 	subeq.w	r7, lr, #1
   21638:	4555      	cmp	r5, sl
   2163a:	bf14      	ite	ne
   2163c:	463d      	movne	r5, r7
   2163e:	1e7d      	subeq	r5, r7, #1
   21640:	4555      	cmp	r5, sl
   21642:	db4d      	blt.n	216e0 <vli_mmod_fast_secp256r1+0x5b0>
   21644:	f8df c108 	ldr.w	ip, [pc, #264]	; 21750 <vli_mmod_fast_secp256r1+0x620>
   21648:	f04f 0801 	mov.w	r8, #1
   2164c:	46ae      	mov	lr, r5
   2164e:	4648      	mov	r0, r9
   21650:	f1be 0f00 	cmp.w	lr, #0
   21654:	d116      	bne.n	21684 <vli_mmod_fast_secp256r1+0x554>
   21656:	69c2      	ldr	r2, [r0, #28]
   21658:	3201      	adds	r2, #1
   2165a:	d176      	bne.n	2174a <vli_mmod_fast_secp256r1+0x61a>
   2165c:	6982      	ldr	r2, [r0, #24]
   2165e:	2a00      	cmp	r2, #0
   21660:	d073      	beq.n	2174a <vli_mmod_fast_secp256r1+0x61a>
   21662:	2a01      	cmp	r2, #1
   21664:	d80e      	bhi.n	21684 <vli_mmod_fast_secp256r1+0x554>
   21666:	6942      	ldr	r2, [r0, #20]
   21668:	b962      	cbnz	r2, 21684 <vli_mmod_fast_secp256r1+0x554>
   2166a:	6902      	ldr	r2, [r0, #16]
   2166c:	b952      	cbnz	r2, 21684 <vli_mmod_fast_secp256r1+0x554>
   2166e:	68c2      	ldr	r2, [r0, #12]
   21670:	b942      	cbnz	r2, 21684 <vli_mmod_fast_secp256r1+0x554>
   21672:	6882      	ldr	r2, [r0, #8]
   21674:	3201      	adds	r2, #1
   21676:	d168      	bne.n	2174a <vli_mmod_fast_secp256r1+0x61a>
   21678:	6842      	ldr	r2, [r0, #4]
   2167a:	3201      	adds	r2, #1
   2167c:	d165      	bne.n	2174a <vli_mmod_fast_secp256r1+0x61a>
   2167e:	6802      	ldr	r2, [r0, #0]
   21680:	3201      	adds	r2, #1
   21682:	d162      	bne.n	2174a <vli_mmod_fast_secp256r1+0x61a>
   21684:	4602      	mov	r2, r0
   21686:	4661      	mov	r1, ip
   21688:	4644      	mov	r4, r8
   2168a:	4603      	mov	r3, r0
   2168c:	2600      	movs	r6, #0
   2168e:	a703      	add	r7, pc, #12	; (adr r7, 2169c <vli_mmod_fast_secp256r1+0x56c>)
   21690:	19e4      	adds	r4, r4, r7
   21692:	cb80      	ldmia	r3!, {r7}
   21694:	c920      	ldmia	r1!, {r5}
   21696:	1b7f      	subs	r7, r7, r5
   21698:	c280      	stmia	r2!, {r7}
   2169a:	4720      	bx	r4
   2169c:	cb80      	ldmia	r3!, {r7}
   2169e:	c920      	ldmia	r1!, {r5}
   216a0:	41af      	sbcs	r7, r5
   216a2:	c280      	stmia	r2!, {r7}
   216a4:	cb80      	ldmia	r3!, {r7}
   216a6:	c920      	ldmia	r1!, {r5}
   216a8:	41af      	sbcs	r7, r5
   216aa:	c280      	stmia	r2!, {r7}
   216ac:	cb80      	ldmia	r3!, {r7}
   216ae:	c920      	ldmia	r1!, {r5}
   216b0:	41af      	sbcs	r7, r5
   216b2:	c280      	stmia	r2!, {r7}
   216b4:	cb80      	ldmia	r3!, {r7}
   216b6:	c920      	ldmia	r1!, {r5}
   216b8:	41af      	sbcs	r7, r5
   216ba:	c280      	stmia	r2!, {r7}
   216bc:	cb80      	ldmia	r3!, {r7}
   216be:	c920      	ldmia	r1!, {r5}
   216c0:	41af      	sbcs	r7, r5
   216c2:	c280      	stmia	r2!, {r7}
   216c4:	cb80      	ldmia	r3!, {r7}
   216c6:	c920      	ldmia	r1!, {r5}
   216c8:	41af      	sbcs	r7, r5
   216ca:	c280      	stmia	r2!, {r7}
   216cc:	cb80      	ldmia	r3!, {r7}
   216ce:	c920      	ldmia	r1!, {r5}
   216d0:	41af      	sbcs	r7, r5
   216d2:	c280      	stmia	r2!, {r7}
   216d4:	4176      	adcs	r6, r6
   216d6:	2e00      	cmp	r6, #0
   216d8:	bf08      	it	eq
   216da:	f1ae 0e01 	subeq.w	lr, lr, #1
   216de:	e7b7      	b.n	21650 <vli_mmod_fast_secp256r1+0x520>
   216e0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 21750 <vli_mmod_fast_secp256r1+0x620>
   216e4:	f04f 0c01 	mov.w	ip, #1
   216e8:	46c8      	mov	r8, r9
   216ea:	4642      	mov	r2, r8
   216ec:	4671      	mov	r1, lr
   216ee:	4664      	mov	r4, ip
   216f0:	4643      	mov	r3, r8
   216f2:	2600      	movs	r6, #0
   216f4:	a705      	add	r7, pc, #20	; (adr r7, 2170c <vli_mmod_fast_secp256r1+0x5dc>)
   216f6:	bf00      	nop
   216f8:	f3af 8000 	nop.w
   216fc:	f3af 8000 	nop.w
   21700:	19e4      	adds	r4, r4, r7
   21702:	cb80      	ldmia	r3!, {r7}
   21704:	c901      	ldmia	r1!, {r0}
   21706:	183f      	adds	r7, r7, r0
   21708:	c280      	stmia	r2!, {r7}
   2170a:	4720      	bx	r4
   2170c:	cb80      	ldmia	r3!, {r7}
   2170e:	c901      	ldmia	r1!, {r0}
   21710:	4147      	adcs	r7, r0
   21712:	c280      	stmia	r2!, {r7}
   21714:	cb80      	ldmia	r3!, {r7}
   21716:	c901      	ldmia	r1!, {r0}
   21718:	4147      	adcs	r7, r0
   2171a:	c280      	stmia	r2!, {r7}
   2171c:	cb80      	ldmia	r3!, {r7}
   2171e:	c901      	ldmia	r1!, {r0}
   21720:	4147      	adcs	r7, r0
   21722:	c280      	stmia	r2!, {r7}
   21724:	cb80      	ldmia	r3!, {r7}
   21726:	c901      	ldmia	r1!, {r0}
   21728:	4147      	adcs	r7, r0
   2172a:	c280      	stmia	r2!, {r7}
   2172c:	cb80      	ldmia	r3!, {r7}
   2172e:	c901      	ldmia	r1!, {r0}
   21730:	4147      	adcs	r7, r0
   21732:	c280      	stmia	r2!, {r7}
   21734:	cb80      	ldmia	r3!, {r7}
   21736:	c901      	ldmia	r1!, {r0}
   21738:	4147      	adcs	r7, r0
   2173a:	c280      	stmia	r2!, {r7}
   2173c:	cb80      	ldmia	r3!, {r7}
   2173e:	c901      	ldmia	r1!, {r0}
   21740:	4147      	adcs	r7, r0
   21742:	c280      	stmia	r2!, {r7}
   21744:	4176      	adcs	r6, r6
   21746:	19ad      	adds	r5, r5, r6
   21748:	d4cf      	bmi.n	216ea <vli_mmod_fast_secp256r1+0x5ba>
   2174a:	b00d      	add	sp, #52	; 0x34
   2174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21750:	00025104 	.word	0x00025104
	...

00021760 <double_jacobian_default>:
   21760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21764:	f993 9000 	ldrsb.w	r9, [r3]
   21768:	f1b9 0f00 	cmp.w	r9, #0
   2176c:	b0a9      	sub	sp, #164	; 0xa4
   2176e:	dd15      	ble.n	2179c <double_jacobian_default+0x3c>
   21770:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   21774:	b2e4      	uxtb	r4, r4
   21776:	1f15      	subs	r5, r2, #4
   21778:	9405      	str	r4, [sp, #20]
   2177a:	00a4      	lsls	r4, r4, #2
   2177c:	462e      	mov	r6, r5
   2177e:	9406      	str	r4, [sp, #24]
   21780:	1914      	adds	r4, r2, r4
   21782:	4625      	mov	r5, r4
   21784:	46b6      	mov	lr, r6
   21786:	2400      	movs	r4, #0
   21788:	4637      	mov	r7, r6
   2178a:	f85e 6f04 	ldr.w	r6, [lr, #4]!
   2178e:	4575      	cmp	r5, lr
   21790:	ea44 0406 	orr.w	r4, r4, r6
   21794:	d1f9      	bne.n	2178a <double_jacobian_default+0x2a>
   21796:	9703      	str	r7, [sp, #12]
   21798:	9504      	str	r5, [sp, #16]
   2179a:	b914      	cbnz	r4, 217a2 <double_jacobian_default+0x42>
   2179c:	b029      	add	sp, #164	; 0xa4
   2179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217a2:	4698      	mov	r8, r3
   217a4:	4615      	mov	r5, r2
   217a6:	4604      	mov	r4, r0
   217a8:	9207      	str	r2, [sp, #28]
   217aa:	a818      	add	r0, sp, #96	; 0x60
   217ac:	460a      	mov	r2, r1
   217ae:	464b      	mov	r3, r9
   217b0:	468a      	mov	sl, r1
   217b2:	f7ff f995 	bl	20ae0 <uECC_vli_mult>
   217b6:	a918      	add	r1, sp, #96	; 0x60
   217b8:	a808      	add	r0, sp, #32
   217ba:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   217be:	4798      	blx	r3
   217c0:	aa08      	add	r2, sp, #32
   217c2:	a818      	add	r0, sp, #96	; 0x60
   217c4:	f998 3000 	ldrsb.w	r3, [r8]
   217c8:	4621      	mov	r1, r4
   217ca:	f7ff f989 	bl	20ae0 <uECC_vli_mult>
   217ce:	a918      	add	r1, sp, #96	; 0x60
   217d0:	a810      	add	r0, sp, #64	; 0x40
   217d2:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   217d6:	4798      	blx	r3
   217d8:	aa08      	add	r2, sp, #32
   217da:	4611      	mov	r1, r2
   217dc:	a818      	add	r0, sp, #96	; 0x60
   217de:	f998 3000 	ldrsb.w	r3, [r8]
   217e2:	f7ff f97d 	bl	20ae0 <uECC_vli_mult>
   217e6:	a918      	add	r1, sp, #96	; 0x60
   217e8:	a808      	add	r0, sp, #32
   217ea:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   217ee:	4798      	blx	r3
   217f0:	462a      	mov	r2, r5
   217f2:	a818      	add	r0, sp, #96	; 0x60
   217f4:	f998 3000 	ldrsb.w	r3, [r8]
   217f8:	4651      	mov	r1, sl
   217fa:	f7ff f971 	bl	20ae0 <uECC_vli_mult>
   217fe:	a918      	add	r1, sp, #96	; 0x60
   21800:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21804:	4650      	mov	r0, sl
   21806:	4798      	blx	r3
   21808:	462a      	mov	r2, r5
   2180a:	a818      	add	r0, sp, #96	; 0x60
   2180c:	f998 3000 	ldrsb.w	r3, [r8]
   21810:	4629      	mov	r1, r5
   21812:	f7ff f965 	bl	20ae0 <uECC_vli_mult>
   21816:	f108 0b04 	add.w	fp, r8, #4
   2181a:	a918      	add	r1, sp, #96	; 0x60
   2181c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21820:	4628      	mov	r0, r5
   21822:	4798      	blx	r3
   21824:	465b      	mov	r3, fp
   21826:	462a      	mov	r2, r5
   21828:	4621      	mov	r1, r4
   2182a:	4620      	mov	r0, r4
   2182c:	f8cd 9000 	str.w	r9, [sp]
   21830:	f7ff fae6 	bl	20e00 <uECC_vli_modAdd>
   21834:	465b      	mov	r3, fp
   21836:	462a      	mov	r2, r5
   21838:	4629      	mov	r1, r5
   2183a:	4628      	mov	r0, r5
   2183c:	f8cd 9000 	str.w	r9, [sp]
   21840:	f7ff fade 	bl	20e00 <uECC_vli_modAdd>
   21844:	465b      	mov	r3, fp
   21846:	462a      	mov	r2, r5
   21848:	4621      	mov	r1, r4
   2184a:	4628      	mov	r0, r5
   2184c:	f8cd 9000 	str.w	r9, [sp]
   21850:	f7ff fb2e 	bl	20eb0 <uECC_vli_modSub>
   21854:	462a      	mov	r2, r5
   21856:	a818      	add	r0, sp, #96	; 0x60
   21858:	f998 3000 	ldrsb.w	r3, [r8]
   2185c:	4621      	mov	r1, r4
   2185e:	f7ff f93f 	bl	20ae0 <uECC_vli_mult>
   21862:	a918      	add	r1, sp, #96	; 0x60
   21864:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21868:	4620      	mov	r0, r4
   2186a:	4798      	blx	r3
   2186c:	465b      	mov	r3, fp
   2186e:	4622      	mov	r2, r4
   21870:	4621      	mov	r1, r4
   21872:	4628      	mov	r0, r5
   21874:	f8cd 9000 	str.w	r9, [sp]
   21878:	f7ff fac2 	bl	20e00 <uECC_vli_modAdd>
   2187c:	465b      	mov	r3, fp
   2187e:	f8cd 9000 	str.w	r9, [sp]
   21882:	462a      	mov	r2, r5
   21884:	4621      	mov	r1, r4
   21886:	4620      	mov	r0, r4
   21888:	f7ff faba 	bl	20e00 <uECC_vli_modAdd>
   2188c:	6823      	ldr	r3, [r4, #0]
   2188e:	f013 0301 	ands.w	r3, r3, #1
   21892:	d16a      	bne.n	2196a <double_jacobian_default+0x20a>
   21894:	eb04 0289 	add.w	r2, r4, r9, lsl #2
   21898:	4294      	cmp	r4, r2
   2189a:	d20e      	bcs.n	218ba <double_jacobian_default+0x15a>
   2189c:	9f03      	ldr	r7, [sp, #12]
   2189e:	9d04      	ldr	r5, [sp, #16]
   218a0:	9e07      	ldr	r6, [sp, #28]
   218a2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   218a6:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
   218aa:	4294      	cmp	r4, r2
   218ac:	6013      	str	r3, [r2, #0]
   218ae:	ea4f 73c1 	mov.w	r3, r1, lsl #31
   218b2:	d3f6      	bcc.n	218a2 <double_jacobian_default+0x142>
   218b4:	9703      	str	r7, [sp, #12]
   218b6:	9504      	str	r5, [sp, #16]
   218b8:	9607      	str	r6, [sp, #28]
   218ba:	4622      	mov	r2, r4
   218bc:	4621      	mov	r1, r4
   218be:	f998 3000 	ldrsb.w	r3, [r8]
   218c2:	a818      	add	r0, sp, #96	; 0x60
   218c4:	f7ff f90c 	bl	20ae0 <uECC_vli_mult>
   218c8:	9d07      	ldr	r5, [sp, #28]
   218ca:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   218ce:	4628      	mov	r0, r5
   218d0:	a918      	add	r1, sp, #96	; 0x60
   218d2:	4798      	blx	r3
   218d4:	4629      	mov	r1, r5
   218d6:	4628      	mov	r0, r5
   218d8:	465b      	mov	r3, fp
   218da:	aa10      	add	r2, sp, #64	; 0x40
   218dc:	f8cd 9000 	str.w	r9, [sp]
   218e0:	f7ff fae6 	bl	20eb0 <uECC_vli_modSub>
   218e4:	4629      	mov	r1, r5
   218e6:	4628      	mov	r0, r5
   218e8:	465b      	mov	r3, fp
   218ea:	aa10      	add	r2, sp, #64	; 0x40
   218ec:	f8cd 9000 	str.w	r9, [sp]
   218f0:	f7ff fade 	bl	20eb0 <uECC_vli_modSub>
   218f4:	a910      	add	r1, sp, #64	; 0x40
   218f6:	462a      	mov	r2, r5
   218f8:	4608      	mov	r0, r1
   218fa:	465b      	mov	r3, fp
   218fc:	f8cd 9000 	str.w	r9, [sp]
   21900:	f7ff fad6 	bl	20eb0 <uECC_vli_modSub>
   21904:	aa10      	add	r2, sp, #64	; 0x40
   21906:	4621      	mov	r1, r4
   21908:	f998 3000 	ldrsb.w	r3, [r8]
   2190c:	a818      	add	r0, sp, #96	; 0x60
   2190e:	f7ff f8e7 	bl	20ae0 <uECC_vli_mult>
   21912:	4620      	mov	r0, r4
   21914:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
   21918:	a918      	add	r1, sp, #96	; 0x60
   2191a:	4798      	blx	r3
   2191c:	aa08      	add	r2, sp, #32
   2191e:	465b      	mov	r3, fp
   21920:	4621      	mov	r1, r4
   21922:	f8cd 9000 	str.w	r9, [sp]
   21926:	4610      	mov	r0, r2
   21928:	f7ff fac2 	bl	20eb0 <uECC_vli_modSub>
   2192c:	9f03      	ldr	r7, [sp, #12]
   2192e:	9d04      	ldr	r5, [sp, #16]
   21930:	3c04      	subs	r4, #4
   21932:	463b      	mov	r3, r7
   21934:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21938:	f844 2f04 	str.w	r2, [r4, #4]!
   2193c:	42ab      	cmp	r3, r5
   2193e:	d1f9      	bne.n	21934 <double_jacobian_default+0x1d4>
   21940:	9b06      	ldr	r3, [sp, #24]
   21942:	4453      	add	r3, sl
   21944:	4619      	mov	r1, r3
   21946:	f1aa 0304 	sub.w	r3, sl, #4
   2194a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2194e:	f847 2f04 	str.w	r2, [r7, #4]!
   21952:	428b      	cmp	r3, r1
   21954:	d1f9      	bne.n	2194a <double_jacobian_default+0x1ea>
   21956:	9a05      	ldr	r2, [sp, #20]
   21958:	3201      	adds	r2, #1
   2195a:	0092      	lsls	r2, r2, #2
   2195c:	a908      	add	r1, sp, #32
   2195e:	4650      	mov	r0, sl
   21960:	f7ea fbfe 	bl	c160 <memcpy>
   21964:	b029      	add	sp, #164	; 0xa4
   21966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2196a:	f1c9 0208 	rsb	r2, r9, #8
   2196e:	00d2      	lsls	r2, r2, #3
   21970:	3201      	adds	r2, #1
   21972:	4623      	mov	r3, r4
   21974:	4659      	mov	r1, fp
   21976:	4620      	mov	r0, r4
   21978:	2500      	movs	r5, #0
   2197a:	a704      	add	r7, pc, #16	; (adr r7, 2198c <double_jacobian_default+0x22c>)
   2197c:	f3af 8000 	nop.w
   21980:	19d2      	adds	r2, r2, r7
   21982:	c880      	ldmia	r0!, {r7}
   21984:	c940      	ldmia	r1!, {r6}
   21986:	19bf      	adds	r7, r7, r6
   21988:	c380      	stmia	r3!, {r7}
   2198a:	4710      	bx	r2
   2198c:	c880      	ldmia	r0!, {r7}
   2198e:	c940      	ldmia	r1!, {r6}
   21990:	4177      	adcs	r7, r6
   21992:	c380      	stmia	r3!, {r7}
   21994:	c880      	ldmia	r0!, {r7}
   21996:	c940      	ldmia	r1!, {r6}
   21998:	4177      	adcs	r7, r6
   2199a:	c380      	stmia	r3!, {r7}
   2199c:	c880      	ldmia	r0!, {r7}
   2199e:	c940      	ldmia	r1!, {r6}
   219a0:	4177      	adcs	r7, r6
   219a2:	c380      	stmia	r3!, {r7}
   219a4:	c880      	ldmia	r0!, {r7}
   219a6:	c940      	ldmia	r1!, {r6}
   219a8:	4177      	adcs	r7, r6
   219aa:	c380      	stmia	r3!, {r7}
   219ac:	c880      	ldmia	r0!, {r7}
   219ae:	c940      	ldmia	r1!, {r6}
   219b0:	4177      	adcs	r7, r6
   219b2:	c380      	stmia	r3!, {r7}
   219b4:	c880      	ldmia	r0!, {r7}
   219b6:	c940      	ldmia	r1!, {r6}
   219b8:	4177      	adcs	r7, r6
   219ba:	c380      	stmia	r3!, {r7}
   219bc:	c880      	ldmia	r0!, {r7}
   219be:	c940      	ldmia	r1!, {r6}
   219c0:	4177      	adcs	r7, r6
   219c2:	c380      	stmia	r3!, {r7}
   219c4:	416d      	adcs	r5, r5
   219c6:	ea4f 0189 	mov.w	r1, r9, lsl #2
   219ca:	1863      	adds	r3, r4, r1
   219cc:	429c      	cmp	r4, r3
   219ce:	46ae      	mov	lr, r5
   219d0:	d20f      	bcs.n	219f2 <double_jacobian_default+0x292>
   219d2:	9f03      	ldr	r7, [sp, #12]
   219d4:	9d04      	ldr	r5, [sp, #16]
   219d6:	9e07      	ldr	r6, [sp, #28]
   219d8:	2200      	movs	r2, #0
   219da:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   219de:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
   219e2:	429c      	cmp	r4, r3
   219e4:	601a      	str	r2, [r3, #0]
   219e6:	ea4f 72c0 	mov.w	r2, r0, lsl #31
   219ea:	d3f6      	bcc.n	219da <double_jacobian_default+0x27a>
   219ec:	9703      	str	r7, [sp, #12]
   219ee:	9504      	str	r5, [sp, #16]
   219f0:	9607      	str	r6, [sp, #28]
   219f2:	3904      	subs	r1, #4
   219f4:	5863      	ldr	r3, [r4, r1]
   219f6:	ea43 73ce 	orr.w	r3, r3, lr, lsl #31
   219fa:	5063      	str	r3, [r4, r1]
   219fc:	e75d      	b.n	218ba <double_jacobian_default+0x15a>
   219fe:	bf00      	nop

00021a00 <uECC_secp256r1>:
   21a00:	4800      	ldr	r0, [pc, #0]	; (21a04 <uECC_secp256r1+0x4>)
   21a02:	4770      	bx	lr
   21a04:	00025100 	.word	0x00025100

00021a08 <uECC_valid_point>:
   21a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a0a:	f991 3000 	ldrsb.w	r3, [r1]
   21a0e:	b2da      	uxtb	r2, r3
   21a10:	0057      	lsls	r7, r2, #1
   21a12:	b2ff      	uxtb	r7, r7
   21a14:	b27c      	sxtb	r4, r7
   21a16:	2c00      	cmp	r4, #0
   21a18:	b099      	sub	sp, #100	; 0x64
   21a1a:	dd28      	ble.n	21a6e <uECC_valid_point+0x66>
   21a1c:	3f01      	subs	r7, #1
   21a1e:	b2ff      	uxtb	r7, r7
   21a20:	eb00 0787 	add.w	r7, r0, r7, lsl #2
   21a24:	1f04      	subs	r4, r0, #4
   21a26:	2500      	movs	r5, #0
   21a28:	f854 6f04 	ldr.w	r6, [r4, #4]!
   21a2c:	42bc      	cmp	r4, r7
   21a2e:	ea45 0506 	orr.w	r5, r5, r6
   21a32:	d1f9      	bne.n	21a28 <uECC_valid_point+0x20>
   21a34:	b1f5      	cbz	r5, 21a74 <uECC_valid_point+0x6c>
   21a36:	1e55      	subs	r5, r2, #1
   21a38:	b26d      	sxtb	r5, r5
   21a3a:	2d00      	cmp	r5, #0
   21a3c:	f101 0e04 	add.w	lr, r1, #4
   21a40:	db15      	blt.n	21a6e <uECC_valid_point+0x66>
   21a42:	b22e      	sxth	r6, r5
   21a44:	f85e c026 	ldr.w	ip, [lr, r6, lsl #2]
   21a48:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
   21a4c:	4594      	cmp	ip, r2
   21a4e:	d814      	bhi.n	21a7a <uECC_valid_point+0x72>
   21a50:	d30d      	bcc.n	21a6e <uECC_valid_point+0x66>
   21a52:	462c      	mov	r4, r5
   21a54:	e006      	b.n	21a64 <uECC_valid_point+0x5c>
   21a56:	f85e 7022 	ldr.w	r7, [lr, r2, lsl #2]
   21a5a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   21a5e:	4297      	cmp	r7, r2
   21a60:	d80b      	bhi.n	21a7a <uECC_valid_point+0x72>
   21a62:	d304      	bcc.n	21a6e <uECC_valid_point+0x66>
   21a64:	3c01      	subs	r4, #1
   21a66:	b264      	sxtb	r4, r4
   21a68:	1c67      	adds	r7, r4, #1
   21a6a:	b222      	sxth	r2, r4
   21a6c:	d1f3      	bne.n	21a56 <uECC_valid_point+0x4e>
   21a6e:	2000      	movs	r0, #0
   21a70:	b019      	add	sp, #100	; 0x64
   21a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a74:	4628      	mov	r0, r5
   21a76:	b019      	add	sp, #100	; 0x64
   21a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a7a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   21a7e:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   21a82:	4564      	cmp	r4, ip
   21a84:	d310      	bcc.n	21aa8 <uECC_valid_point+0xa0>
   21a86:	d8f2      	bhi.n	21a6e <uECC_valid_point+0x66>
   21a88:	462c      	mov	r4, r5
   21a8a:	e006      	b.n	21a9a <uECC_valid_point+0x92>
   21a8c:	f85e c027 	ldr.w	ip, [lr, r7, lsl #2]
   21a90:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
   21a94:	45bc      	cmp	ip, r7
   21a96:	d807      	bhi.n	21aa8 <uECC_valid_point+0xa0>
   21a98:	d3e9      	bcc.n	21a6e <uECC_valid_point+0x66>
   21a9a:	3c01      	subs	r4, #1
   21a9c:	b264      	sxtb	r4, r4
   21a9e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   21aa2:	b227      	sxth	r7, r4
   21aa4:	d1f2      	bne.n	21a8c <uECC_valid_point+0x84>
   21aa6:	e7e2      	b.n	21a6e <uECC_valid_point+0x66>
   21aa8:	460f      	mov	r7, r1
   21aaa:	4604      	mov	r4, r0
   21aac:	4611      	mov	r1, r2
   21aae:	a808      	add	r0, sp, #32
   21ab0:	f7ff f816 	bl	20ae0 <uECC_vli_mult>
   21ab4:	a908      	add	r1, sp, #32
   21ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   21aba:	4668      	mov	r0, sp
   21abc:	4798      	blx	r3
   21abe:	a808      	add	r0, sp, #32
   21ac0:	4621      	mov	r1, r4
   21ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   21ac6:	463a      	mov	r2, r7
   21ac8:	4798      	blx	r3
   21aca:	2000      	movs	r0, #0
   21acc:	e000      	b.n	21ad0 <uECC_valid_point+0xc8>
   21ace:	b22e      	sxth	r6, r5
   21ad0:	ab18      	add	r3, sp, #96	; 0x60
   21ad2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   21ad6:	3d01      	subs	r5, #1
   21ad8:	f856 2c60 	ldr.w	r2, [r6, #-96]
   21adc:	f856 3c40 	ldr.w	r3, [r6, #-64]
   21ae0:	b26d      	sxtb	r5, r5
   21ae2:	4053      	eors	r3, r2
   21ae4:	4318      	orrs	r0, r3
   21ae6:	1c6b      	adds	r3, r5, #1
   21ae8:	d1f1      	bne.n	21ace <uECC_valid_point+0xc6>
   21aea:	fab0 f080 	clz	r0, r0
   21aee:	0940      	lsrs	r0, r0, #5
   21af0:	e7be      	b.n	21a70 <uECC_valid_point+0x68>
   21af2:	bf00      	nop

00021af4 <uECC_valid_public_key>:
   21af4:	f7ff bf88 	b.w	21a08 <uECC_valid_point>

00021af8 <am_hal_itm_enable>:
   21af8:	4a0b      	ldr	r2, [pc, #44]	; (21b28 <am_hal_itm_enable+0x30>)
   21afa:	68d3      	ldr	r3, [r2, #12]
   21afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   21b00:	60d3      	str	r3, [r2, #12]
   21b02:	68d3      	ldr	r3, [r2, #12]
   21b04:	01db      	lsls	r3, r3, #7
   21b06:	d5fc      	bpl.n	21b02 <am_hal_itm_enable+0xa>
   21b08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   21b0c:	4907      	ldr	r1, [pc, #28]	; (21b2c <am_hal_itm_enable+0x34>)
   21b0e:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   21b12:	4a07      	ldr	r2, [pc, #28]	; (21b30 <am_hal_itm_enable+0x38>)
   21b14:	200f      	movs	r0, #15
   21b16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21b1a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   21b1e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   21b22:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   21b26:	4770      	bx	lr
   21b28:	e000edf0 	.word	0xe000edf0
   21b2c:	c5acce55 	.word	0xc5acce55
   21b30:	00150511 	.word	0x00150511

00021b34 <am_hal_itm_disable>:
   21b34:	b510      	push	{r4, lr}
   21b36:	4b25      	ldr	r3, [pc, #148]	; (21bcc <am_hal_itm_disable+0x98>)
   21b38:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
   21b3c:	b9b3      	cbnz	r3, 21b6c <am_hal_itm_disable+0x38>
   21b3e:	4b24      	ldr	r3, [pc, #144]	; (21bd0 <am_hal_itm_disable+0x9c>)
   21b40:	68da      	ldr	r2, [r3, #12]
   21b42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   21b46:	60da      	str	r2, [r3, #12]
   21b48:	68da      	ldr	r2, [r3, #12]
   21b4a:	01d2      	lsls	r2, r2, #7
   21b4c:	d5fc      	bpl.n	21b48 <am_hal_itm_disable+0x14>
   21b4e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
   21b52:	4920      	ldr	r1, [pc, #128]	; (21bd4 <am_hal_itm_disable+0xa0>)
   21b54:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
   21b58:	4a1f      	ldr	r2, [pc, #124]	; (21bd8 <am_hal_itm_disable+0xa4>)
   21b5a:	200f      	movs	r0, #15
   21b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21b60:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
   21b64:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
   21b68:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
   21b6c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   21b70:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
   21b74:	021b      	lsls	r3, r3, #8
   21b76:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
   21b7a:	d4f9      	bmi.n	21b70 <am_hal_itm_disable+0x3c>
   21b7c:	f44f 7048 	mov.w	r0, #800	; 0x320
   21b80:	f7fe fa4e 	bl	20020 <am_hal_flash_delay>
   21b84:	4b13      	ldr	r3, [pc, #76]	; (21bd4 <am_hal_itm_disable+0xa0>)
   21b86:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
   21b8a:	4621      	mov	r1, r4
   21b8c:	2064      	movs	r0, #100	; 0x64
   21b8e:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
   21b92:	f023 0301 	bic.w	r3, r3, #1
   21b96:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
   21b9a:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
   21b9e:	4b0f      	ldr	r3, [pc, #60]	; (21bdc <am_hal_itm_disable+0xa8>)
   21ba0:	4013      	ands	r3, r2
   21ba2:	2b00      	cmp	r3, #0
   21ba4:	d1f9      	bne.n	21b9a <am_hal_itm_disable+0x66>
   21ba6:	3801      	subs	r0, #1
   21ba8:	d1f1      	bne.n	21b8e <am_hal_itm_disable+0x5a>
   21baa:	4a09      	ldr	r2, [pc, #36]	; (21bd0 <am_hal_itm_disable+0x9c>)
   21bac:	68d3      	ldr	r3, [r2, #12]
   21bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   21bb2:	60d3      	str	r3, [r2, #12]
   21bb4:	68d3      	ldr	r3, [r2, #12]
   21bb6:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
   21bba:	d1fb      	bne.n	21bb4 <am_hal_itm_disable+0x80>
   21bbc:	4a03      	ldr	r2, [pc, #12]	; (21bcc <am_hal_itm_disable+0x98>)
   21bbe:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
   21bc2:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	d1fb      	bne.n	21bc2 <am_hal_itm_disable+0x8e>
   21bca:	bd10      	pop	{r4, pc}
   21bcc:	40020000 	.word	0x40020000
   21bd0:	e000edf0 	.word	0xe000edf0
   21bd4:	c5acce55 	.word	0xc5acce55
   21bd8:	00150511 	.word	0x00150511
   21bdc:	00800001 	.word	0x00800001

00021be0 <am_hal_itm_print>:
   21be0:	7803      	ldrb	r3, [r0, #0]
   21be2:	b1a3      	cbz	r3, 21c0e <am_hal_itm_print+0x2e>
   21be4:	4602      	mov	r2, r0
   21be6:	2300      	movs	r3, #0
   21be8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   21bec:	3301      	adds	r3, #1
   21bee:	2900      	cmp	r1, #0
   21bf0:	d1fa      	bne.n	21be8 <am_hal_itm_print+0x8>
   21bf2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   21bf6:	b430      	push	{r4, r5}
   21bf8:	18c1      	adds	r1, r0, r3
   21bfa:	4615      	mov	r5, r2
   21bfc:	f810 4b01 	ldrb.w	r4, [r0], #1
   21c00:	6813      	ldr	r3, [r2, #0]
   21c02:	2b00      	cmp	r3, #0
   21c04:	d0fc      	beq.n	21c00 <am_hal_itm_print+0x20>
   21c06:	4288      	cmp	r0, r1
   21c08:	702c      	strb	r4, [r5, #0]
   21c0a:	d1f7      	bne.n	21bfc <am_hal_itm_print+0x1c>
   21c0c:	bc30      	pop	{r4, r5}
   21c0e:	4770      	bx	lr

00021c10 <am_hal_rtc_osc_select>:
   21c10:	b928      	cbnz	r0, 21c1e <am_hal_rtc_osc_select+0xe>
   21c12:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   21c16:	68d3      	ldr	r3, [r2, #12]
   21c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   21c1c:	60d3      	str	r3, [r2, #12]
   21c1e:	4770      	bx	lr

00021c20 <am_hal_rtc_osc_disable>:
   21c20:	4a03      	ldr	r2, [pc, #12]	; (21c30 <am_hal_rtc_osc_disable+0x10>)
   21c22:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   21c26:	f043 0310 	orr.w	r3, r3, #16
   21c2a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   21c2e:	4770      	bx	lr
   21c30:	40004200 	.word	0x40004200

00021c34 <am_hal_tpiu_enable>:
   21c34:	b530      	push	{r4, r5, lr}
   21c36:	4a23      	ldr	r2, [pc, #140]	; (21cc4 <am_hal_tpiu_enable+0x90>)
   21c38:	6804      	ldr	r4, [r0, #0]
   21c3a:	2300      	movs	r3, #0
   21c3c:	b085      	sub	sp, #20
   21c3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   21c42:	b334      	cbz	r4, 21c92 <am_hal_tpiu_enable+0x5e>
   21c44:	4b20      	ldr	r3, [pc, #128]	; (21cc8 <am_hal_tpiu_enable+0x94>)
   21c46:	4921      	ldr	r1, [pc, #132]	; (21ccc <am_hal_tpiu_enable+0x98>)
   21c48:	2001      	movs	r0, #1
   21c4a:	6050      	str	r0, [r2, #4]
   21c4c:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
   21c50:	a801      	add	r0, sp, #4
   21c52:	428a      	cmp	r2, r1
   21c54:	bf88      	it	hi
   21c56:	461c      	movhi	r4, r3
   21c58:	f7fe f984 	bl	1ff64 <am_hal_clkgen_status_get>
   21c5c:	9b01      	ldr	r3, [sp, #4]
   21c5e:	1c5a      	adds	r2, r3, #1
   21c60:	d02d      	beq.n	21cbe <am_hal_tpiu_enable+0x8a>
   21c62:	08db      	lsrs	r3, r3, #3
   21c64:	fbb3 f3f4 	udiv	r3, r3, r4
   21c68:	3b01      	subs	r3, #1
   21c6a:	b29b      	uxth	r3, r3
   21c6c:	4a15      	ldr	r2, [pc, #84]	; (21cc4 <am_hal_tpiu_enable+0x90>)
   21c6e:	4918      	ldr	r1, [pc, #96]	; (21cd0 <am_hal_tpiu_enable+0x9c>)
   21c70:	6113      	str	r3, [r2, #16]
   21c72:	2402      	movs	r4, #2
   21c74:	f240 2301 	movw	r3, #513	; 0x201
   21c78:	2000      	movs	r0, #0
   21c7a:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
   21c7e:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
   21c82:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
   21c86:	f44f 7048 	mov.w	r0, #800	; 0x320
   21c8a:	f7fe f9c9 	bl	20020 <am_hal_flash_delay>
   21c8e:	b005      	add	sp, #20
   21c90:	bd30      	pop	{r4, r5, pc}
   21c92:	6903      	ldr	r3, [r0, #16]
   21c94:	6113      	str	r3, [r2, #16]
   21c96:	6883      	ldr	r3, [r0, #8]
   21c98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
   21c9c:	68c3      	ldr	r3, [r0, #12]
   21c9e:	4d0c      	ldr	r5, [pc, #48]	; (21cd0 <am_hal_tpiu_enable+0x9c>)
   21ca0:	1e59      	subs	r1, r3, #1
   21ca2:	2301      	movs	r3, #1
   21ca4:	408b      	lsls	r3, r1
   21ca6:	6053      	str	r3, [r2, #4]
   21ca8:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
   21cac:	6843      	ldr	r3, [r0, #4]
   21cae:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
   21cb2:	f44f 7048 	mov.w	r0, #800	; 0x320
   21cb6:	f7fe f9b3 	bl	20020 <am_hal_flash_delay>
   21cba:	b005      	add	sp, #20
   21cbc:	bd30      	pop	{r4, r5, pc}
   21cbe:	2305      	movs	r3, #5
   21cc0:	e7d4      	b.n	21c6c <am_hal_tpiu_enable+0x38>
   21cc2:	bf00      	nop
   21cc4:	e0040000 	.word	0xe0040000
   21cc8:	000f4240 	.word	0x000f4240
   21ccc:	001da380 	.word	0x001da380
   21cd0:	40020000 	.word	0x40020000
   21cd4:	20465357 	.word	0x20465357
   21cd8:	656d6954 	.word	0x656d6954
   21cdc:	00000072 	.word	0x00000072
   21ce0:	69646152 	.word	0x69646152
   21ce4:	7361546f 	.word	0x7361546f
   21ce8:	0000006b 	.word	0x0000006b
   21cec:	75746553 	.word	0x75746553
   21cf0:	00000070 	.word	0x00000070
   21cf4:	00000004 	.word	0x00000004
   21cf8:	00000020 	.word	0x00000020
   21cfc:	00000020 	.word	0x00000020
   21d00:	00000002 	.word	0x00000002
   21d04:	00000000 	.word	0x00000000
   21d08:	00000032 	.word	0x00000032
   21d0c:	00010101 	.word	0x00010101
   21d10:	454c4449 	.word	0x454c4449
   21d14:	00000000 	.word	0x00000000
   21d18:	20726d54 	.word	0x20726d54
   21d1c:	00637653 	.word	0x00637653

00021d20 <attFcnDefault>:
   21d20:	0000c465 0000c461 0000c461 0000c463     e...a...a...c...

00021d30 <attWsfChUuid>:
   21d30:	2a9d2a9e                                         .*

00021d32 <attWmChUuid>:
   21d32:	181d2a9d                                         .*

00021d34 <attWssSvcUuid>:
   21d34:	2a9f181d                                         ..

00021d36 <attUcpChUuid>:
   21d36:	2a9a2a9f                                         .*

00021d38 <attUiChUuid>:
   21d38:	2a992a9a                                         .*

00021d3a <attDbciChUuid>:
   21d3a:	2ac92a99                                         .*

00021d3c <attRpaoChUuid>:
   21d3c:	2a5f2ac9                                         .*

00021d3e <attPlxcmChUuid>:
   21d3e:	2a5e2a5f                                         _*

00021d40 <attPlxscmChUuid>:
   21d40:	2a602a5e                                         ^*

00021d42 <attPlxfChUuid>:
   21d42:	2a5d2a60                                         `*

00021d44 <attSlChUuid>:
   21d44:	2a5b2a5d                                         ]*

00021d46 <attCsmChUuid>:
   21d46:	2a5c2a5b                                         [*

00021d48 <attCsfChUuid>:
   21d48:	2a632a5c                                         \*

00021d4a <attCpmChUuid>:
   21d4a:	2a652a63                                         c*

00021d4c <attCpfChUuid>:
   21d4c:	2a532a65                                         e*

00021d4e <attRsmChUuid>:
   21d4e:	2a542a53                                         S*

00021d50 <attRsfChUuid>:
   21d50:	2aa62a54                                         T*

00021d52 <attCarChUuid>:
   21d52:	2a522aa6                                         .*

00021d54 <attRacpChUuid>:
   21d54:	2a512a52                                         R*

00021d56 <attGlfChUuid>:
   21d56:	2a502a51                                         Q*

00021d58 <attPnpChUuid>:
   21d58:	2a4f2a50                                         P*

00021d5a <attSiwChUuid>:
   21d5a:	2a4e2a4f                                         O*

00021d5c <attHidPmChUuid>:
   21d5c:	2a4d2a4e                                         N*

00021d5e <attHidRepChUuid>:
   21d5e:	2a4c2a4d                                         M*

00021d60 <attHidcpChUuid>:
   21d60:	2a4b2a4c                                         L*

00021d62 <attHidRmChUuid>:
   21d62:	2a4a2a4b                                         K*

00021d64 <attHidiChUuid>:
   21d64:	2a322a4a                                         J*

00021d66 <attHidBkoChUuid>:
   21d66:	2a222a32                                         2*

00021d68 <attHidBkiChUuid>:
   21d68:	2a212a22                                         "*

00021d6a <attHidBmiChUuid>:
   21d6a:	2a492a21                                         !*

00021d6c <attBpfChUuid>:
   21d6c:	2a482a49                                         I*

00021d6e <attSuacChUuid>:
   21d6e:	2a472a48                                         H*

00021d70 <attSnacChUuid>:
   21d70:	2a462a47                                         G*

00021d72 <attNaChUuid>:
   21d72:	2a452a46                                         F*

00021d74 <attUasChUuid>:
   21d74:	2a442a45                                         E*

00021d76 <attAncpChUuid>:
   21d76:	2a432a44                                         D*

00021d78 <attAcChUuid>:
   21d78:	2a422a43                                         C*

00021d7a <attAcbmChUuid>:
   21d7a:	2a412a42                                         B*

00021d7c <attRsChUuid>:
   21d7c:	2a402a41                                         A*

00021d7e <attRcpChUuid>:
   21d7e:	2a3f2a40                                         @*

00021d80 <attAsChUuid>:
   21d80:	2a3e2a3f                                         ?*

00021d82 <attNwaChUuid>:
   21d82:	2a3d2a3e                                         >*

00021d84 <attStrChUuid>:
   21d84:	2a3c2a3d                                         =*

00021d86 <attStcChUuid>:
   21d86:	2a3b2a3c                                         <*

00021d88 <attSrChUuid>:
   21d88:	2a3a2a3b                                         ;*

00021d8a <attRemChUuid>:
   21d8a:	2a392a3a                                         :*

00021d8c <attHrcpChUuid>:
   21d8c:	2a382a39                                         9*

00021d8e <attBslChUuid>:
   21d8e:	2a372a38                                         8*

00021d90 <attHrmChUuid>:
   21d90:	2a362a37                                         7*

00021d92 <attIcpChUuid>:
   21d92:	2a352a36                                         6*

00021d94 <attBpmChUuid>:
   21d94:	2a342a35                                         5*

00021d96 <attGlmcChUuid>:
   21d96:	2a332a34                                         4*

00021d98 <attHbmiChUuid>:
   21d98:	2a312a33                                         3*

00021d9a <attVidChUuid>:
   21d9a:	2a302a31                                         1*

00021d9c <attP3dChUuid>:
   21d9c:	2a2f2a30                                         0*

00021d9e <attP2dChUuid>:
   21d9e:	2a2e2a2f                                         /*

00021da0 <attLongChUuid>:
   21da0:	2a2d2a2e                                         .*

00021da2 <attLatChUuid>:
   21da2:	2a2c2a2d                                         -*

00021da4 <attElChUuid>:
   21da4:	2a2b2a2c                                         ,*

00021da6 <attCtChUuid>:
   21da6:	2a2a2a2b                                         +*

00021da8 <attIeeeChUuid>:
   21da8:	2a292a2a                                         **

00021daa <attMfnsChUuid>:
   21daa:	2a282a29                                         )*

00021dac <attSrsChUuid>:
   21dac:	2a272a28                                         (*

00021dae <attHrsChUuid>:
   21dae:	2a262a27                                         '*

00021db0 <attFrsChUuid>:
   21db0:	2a252a26                                         &*

00021db2 <attSnsChUuid>:
   21db2:	2a242a25                                         %*

00021db4 <attMnsChUuid>:
   21db4:	2a232a24                                         $*

00021db6 <attSidChUuid>:
   21db6:	2a202a23                                         #*

00021db8 <attTfahChUuid>:
   21db8:	2a1f2a20                                          *

00021dba <attTcelChUuid>:
   21dba:	2a1e2a1f                                         .*

00021dbc <attItChUuid>:
   21dbc:	2a1d2a1e                                         .*

00021dbe <attTtChUuid>:
   21dbe:	2a1c2a1d                                         .*

00021dc0 <attTmChUuid>:
   21dc0:	2a1b2a1c                                         .*

00021dc2 <attBlsChUuid>:
   21dc2:	2a1a2a1b                                         .*

00021dc4 <attBpsChUuid>:
   21dc4:	2a192a1a                                         .*

00021dc6 <attBlChUuid>:
   21dc6:	2a182a19                                         .*

00021dc8 <attGlmChUuid>:
   21dc8:	2a172a18                                         .*

00021dca <attTusChUuid>:
   21dca:	2a162a17                                         .*

00021dcc <attTucpChUuid>:
   21dcc:	2a152a16                                         .*

00021dce <attTbChUuid>:
   21dce:	2a142a15                                         .*

00021dd0 <attRtiChUuid>:
   21dd0:	2a132a14                                         .*

00021dd2 <attTsChUuid>:
   21dd2:	2a122a13                                         .*

00021dd4 <attTaChUuid>:
   21dd4:	2a112a12                                         .*

00021dd6 <attTdstChUuid>:
   21dd6:	2a102a11                                         .*

00021dd8 <attStzChUuid>:
   21dd8:	2a0f2a10                                         .*

00021dda <attLtiChUuid>:
   21dda:	2a0e2a0f                                         .*

00021ddc <attTzChUuid>:
   21ddc:	2a0d2a0e                                         .*

00021dde <attDstoChUuid>:
   21dde:	2a0c2a0d                                         .*

00021de0 <attEt256ChUuid>:
   21de0:	2a0b2a0c                                         .*

00021de2 <attEt100ChUuid>:
   21de2:	2a0a2a0b                                         .*

00021de4 <attDdtChUuid>:
   21de4:	2a092a0a                                         .*

00021de6 <attDwChUuid>:
   21de6:	2a082a09                                         .*

00021de8 <attDtChUuid>:
   21de8:	2a072a08                                         .*

00021dea <attTxpChUuid>:
   21dea:	2a062a07                                         .*

00021dec <attAlChUuid>:
   21dec:	2a052a06                                         .*

00021dee <attScChUuid>:
   21dee:	2a042a05                                         .*

00021df0 <attPpcpChUuid>:
   21df0:	2a032a04                                         .*

00021df2 <attRaChUuid>:
   21df2:	2a022a03                                         .*

00021df4 <attPpfChUuid>:
   21df4:	2a012a02                                         .*

00021df6 <attApChUuid>:
   21df6:	2a002a01                                         .*

00021df8 <attDnChUuid>:
   21df8:	29082a00                                         .*

00021dfa <attHidRimUuid>:
   21dfa:	29072908                                         .)

00021dfc <attHidErmUuid>:
   21dfc:	29062907                                         .)

00021dfe <attValRangeUuid>:
   21dfe:	29052906                                         .)

00021e00 <attAggFmtUuid>:
   21e00:	29042905                                         .)

00021e02 <attChPresFmtUuid>:
   21e02:	29032904                                         .)

00021e04 <attSrvChCfgUuid>:
   21e04:	29022903                                         .)

00021e06 <attCliChCfgUuid>:
   21e06:	29012902                                         .)

00021e08 <attChUserDescUuid>:
   21e08:	29002901                                         .)

00021e0a <attChExtUuid>:
   21e0a:	28032900                                         .)

00021e0c <attChUuid>:
   21e0c:	28022803                                         .(

00021e0e <attIncUuid>:
   21e0e:	28012802                                         .(

00021e10 <attSecSvcUuid>:
   21e10:	28002801                                         .(

00021e12 <attPrimSvcUuid>:
   21e12:	181c2800                                         .(

00021e14 <attUdsSvcUuid>:
   21e14:	1822181c                                         ..

00021e16 <attPlxsSvcUuid>:
   21e16:	18131822                                         ".

00021e18 <attSpsSvcUuid>:
   21e18:	18121813                                         ..

00021e1a <attHidSvcUuid>:
   21e1a:	18111812                                         ..

00021e1c <attAnsSvcUuid>:
   21e1c:	18101811                                         ..

00021e1e <attBpsSvcUuid>:
   21e1e:	180f1810                                         ..

00021e20 <attBasSvcUuid>:
   21e20:	180e180f                                         ..

00021e22 <attPassSvcUuid>:
   21e22:	180d180e                                         ..

00021e24 <attHrsSvcUuid>:
   21e24:	180c180d                                         ..

00021e26 <attWdsSvcUuid>:
   21e26:	180b180c                                         ..

00021e28 <attNwaSvcUuid>:
   21e28:	180a180b                                         ..

00021e2a <attDisSvcUuid>:
   21e2a:	1809180a                                         ..

00021e2c <attHtsSvcUuid>:
   21e2c:	18081809                                         ..

00021e2e <attGlsSvcUuid>:
   21e2e:	18071808                                         ..

00021e30 <attNdcsSvcUuid>:
   21e30:	18061807                                         ..

00021e32 <attRtusSvcUuid>:
   21e32:	18051806                                         ..

00021e34 <attCtsSvcUuid>:
   21e34:	18041805                                         ..

00021e36 <attTpsSvcUuid>:
   21e36:	18031804                                         ..

00021e38 <attLlsSvcUuid>:
   21e38:	18021803                                         ..

00021e3a <attIasSvcUuid>:
   21e3a:	18011802                                         ..

00021e3c <attGattSvcUuid>:
   21e3c:	18001801                                         ..

00021e3e <attGapSvcUuid>:
   21e3e:	00001800                                         ..

00021e40 <attcSendReqTbl>:
   21e40:	00000000 0000c737 0000c855 0000c855     ....7...U...U...
   21e50:	0000c855 0000c64d 0000c855 0000c64d     U...M...U...M...
   21e60:	0000c855 0000c64d 0000c769 0000c7a7     U...M...i.......
   21e70:	0000c64d                                M...

00021e74 <attcFcnIf>:
   21e74:	0000c6ed 0000c461 0000c995 0000c8d9     ....a...........

00021e84 <attcProcRspTbl>:
   21e84:	0000ca91 0000cb85 0000cabd 0000ce79     ............y...
   21e94:	0000cabd 0000cb7d 0000ceeb 0000cb7d     ....}.......}...
   21ea4:	0000cabd 0000cb7f 00000000 0000d09f     ................
   21eb4:	0000cb7f                                ....

00021eb8 <attsIndFcnIf>:
   21eb8:	0000c465 0000d3e1 0000d3fb 0000d5a1     e...............

00021ec8 <attsMinPduLen>:
   21ec8:	07050300 05050305 05030305 01000002     ................
   21ed8:	0000000f                                ....

00021edc <attsFcnIf>:
   21edc:	0000d703 0000d695 0000d6a1 0000d791     ................
   21eec:	00002801                                .(..

00021ef0 <dmAdvAct>:
   21ef0:	0000ed8d 0000edad 0000edcd 0000edf1     ................
   21f00:	0000eced 0000eec1 0000ee15              ............

00021f0c <dmAdvFcnIf>:
   21f0c:	0000ed4d 0000ee19 0000ecef              M...........

00021f18 <dmConnSpecDefaults>:
   21f18:	00280018 07d00000 00000000              ..(.........

00021f24 <dmConnFcnIf>:
   21f24:	0000ef75 0000f1ad 0000f245              u.......E...

00021f30 <dmConn2FcnIf>:
   21f30:	0000fa4d 0000f081 0000f25d              M.......]...

00021f3c <dmConnActSetMain>:
   21f3c:	0000ef59 0000ef6d 0000f2f1 0000f35d     Y...m.......]...
   21f4c:	0000f36b 0000ef5b                       k...[...

00021f54 <dmConnActSetSlave>:
   21f54:	0000f875 0000f893 0000f791 0000f8a9     u...............
   21f64:	0000f8bf 0000f7ed                       ........

00021f6c <dmConnStateTbl>:
   21f6c:	00001001 00002002 00000000 00000000     ..... ..........
   21f7c:	00002303 00000000 00010000 00011104     .#..............
   21f8c:	00010001 00010001 02030300 00010300     ................
   21f9c:	00010001 21000002 00020002 00020002     .......!........
   21fac:	24000002 24002303 00020002 00030002     ...$.#.$........
   21fbc:	00030104 22031203 25031303 00030003     ......."...%....
   21fcc:	05030400 05030003 00040004 00040004     ................
   21fdc:	00040004 04000004 04000104 00040004     ................
   21fec:	00000004                                ....

00021ff0 <dmDevFcnIf>:
   21ff0:	0000fa4d 0000f929 0000f98d              M...).......

00021ffc <dmHciToIdTbl>:
   21ffc:	03030307 04020303 04040404 05050505     ................
   2200c:	07070705 06060607 05060606 07040405     ................
   2201c:	04070407 04050504 09090904 00000202     ................
   2202c:	070b0b0b 00020002 0000000a              ............

00022038 <dmFcnDefault>:
   22038:	0000fa4d 0000fa4f 0000fa4f              M...O...O...

00022044 <dmEvtCbackLen>:
   22044:	00040004 000c0004 00040004 0024001c     ..............$.
   22054:	000e000a 00040006 00040006 00220006     ..............".
   22064:	00080010 00240006 00140064 00040006     ......$.d.......
   22074:	0006000a 00060006 000c000c 000e0006     ................
   22084:	0008000e 000a0006 000a0006 000a0006     ................
   22094:	0004000c 00200004 00060006 00060016     ...... .........
   220a4:	00100010 00440004 00040046              ......D.F...

000220b0 <dmPrivAct>:
   220b0:	0000fc27 0000fba1 0000fbd9 0000fc01     '...............
   220c0:	0000fc19 0000fc89 0000fc1d              ............

000220cc <dmPrivFcnIf>:
   220cc:	0000fb8d 0000fc9d 0000fb79              ........y...

000220d8 <dmSecFcnIf>:
   220d8:	0000fa4d 0000ff89 0000feb1 d4f6493f     M...........?I..
   220e8:	385fc5a3 e3b3c974 503f10d2 7b60ff4a     .._8t.....?PJ.`{
   220f8:	99b740eb a6b89958 bd1a3ccd d203b020     .@..X....<.. ...
   22108:	2cbe97f2 a7832c5e b9a5f9e9 1191f4ef     ...,^,..........
   22118:	dbfdf4ac 480103cc e69d350e 499c80dc     .......H.5.....I
   22128:	6deb2a65 bf9a3263 5c15525a c2456376     e*.mc2..ZR.\vcE.
   22138:	2430ed8f d08e1c74 8bd28915              ..0$t.......

00022144 <dmSecLescFcnIf>:
   22144:	0000fa4d 0000fa4f 00010101              M...O.......

00022150 <smpPktLenTbl>:
   22150:	11070700 0b110211 02110811 00021141     ............A...

00022160 <CSWTCH.23>:
   22160:	00022f79 000232dd 00022f86 00022f95     y/...2.../.../..
   22170:	00022fa2 00022fb3 00022fbb 00022fce     ./.../.../.../..
   22180:	00022fde 00022ff0 00022ffe 0002300b     ./.../.../...0..
   22190:	0002301d 0002302e 0002303f 0002304b     .0...0..?0..K0..
   221a0:	00023054 0002305f 00023069 00023075     T0.._0..i0..u0..
   221b0:	0002307d 0002308e 000230a0 000230b2     }0...0...0...0..
   221c0:	000230bf 000230cb 000230d7 000230e5     .0...0...0...0..
   221d0:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

000221e0 <smpScF5Key>:
   221e0:	656c7462                                btle

000221e4 <smpiScSmIf>:
   221e4:	00022284 0002244c 0002243b              ."..L$..;$..

000221f0 <CSWTCH.2>:
   221f0:	00023100 000232df 00023107 00023115     .1...2...1...1..
   22200:	00023120 0002312a 00023138 00023148      1..*1..81..H1..
   22210:	00023154 00023163 00023172 00023183     T1..c1..r1...1..
   22220:	00023191 0002319b 000231a4 000231ae     .1...1...1...1..
   22230:	000231b9 000231c5 000231d5 000230f6     .1...1...1...0..
   22240:	000231e5 000231f4 00023205 00023213     .1...1...2...2..
   22250:	00023220 0002322d 0002323f 0002324c      2..-2..?2..L2..
   22260:	00023259 00023266 00023271 0002327d     Y2..f2..q2..}2..
   22270:	0002328e 0002329f 000232aa 000232b4     .2...2...2...2..
   22280:	000232bf                                .2..

00022284 <smpiScStateTbl>:
   22284:	00022426 00022420 00022417 00022411     &$.. $...$...$..
   22294:	0002240b 000223ff 000223f9 000223f3     .$...#...#...#..
   222a4:	000223ed 000223e7 000223e1 000223d5     .#...#...#...#..
   222b4:	000223cf 000223c9 000223c3 000223bd     .#...#...#...#..
   222c4:	000223b4 000223ae 000223a8 000223a2     .#...#...#...#..
   222d4:	0002239c 00022396 00022390 0002238a     .#...#...#...#..
   222e4:	00022384 0002237e 00022378 00022372     .#..~#..x#..r#..
   222f4:	0002236c 00022366 00022360 0002235a     l#..f#..`#..Z#..
   22304:	00022354 0002234b 0002233c 0002232d     T#..K#..<#..-#..
   22314:	00022318                                .#..

00022318 <smpiScStateTblAttempts>:
   22318:	060b000f 01010a24 01000a0d 07010003     ....$...........
   22328:	00000024 15230600                                $....

0002232d <smpiScStateTblKeyDist>:
   2232d:	0c152306 000e1623 0023030c 08000000              .#..#.....#....

0002233c <smpiScStateTblEncrypt>:
   2233c:	09142308 22030200 03001c00 0b000000              .#.....".......

0002234b <smpiScStateTblStkCalc>:
   2234b:	0d13220b 00000924 12210b00                       ."..$....

00022354 <smpiScStateTblCnfVerCalc2>:
   22354:	0012210b 200b0000                                .!....

0002235a <smpiScStateTblCnfVerCalc1>:
   2235a:	0008200b 1f060000                                . ....

00022360 <smpiScStateTblPairRand>:
   22360:	00071f06 1e060000                                ......

00022366 <smpiScStateTblPairCnf>:
   22366:	00111e06 1d0b0000                                ......

0002236c <smpiScStateTblCnfCalc2>:
   2236c:	00061d0b 1c0b0000                                ......

00022372 <smpiScStateTblCnfCalc1>:
   22372:	00051c0b 1b040000                                ......

00022378 <smpiScStateTblLegacyPin>:
   22378:	00041b04 22060000                                ......

0002237e <smpiScStateTblVerifyDHCheck>:
   2237e:	00302206 191b0000                                ."0...

00022384 <smpiScStateTblDhCalcF6Eb>:
   22384:	002f191b 181b0000                                ../...

0002238a <smpiScStateTblDhCalcF6Ea>:
   2238a:	002e181b 171b0000                                ......

00022390 <smpiScStateTblCalcF5LTK>:
   22390:	002d171b 161b0000                                ..-...

00022396 <smpiScStateTblCalcF5MacKey>:
   22396:	002c161b 151b0000                                ..,...

0002239c <smpiScStateTblCalcF5TKey>:
   2239c:	002b151b 14180000                                ..+...

000223a2 <smpiScStateTblCalcDHKey>:
   223a2:	002a1418 13060000                                ..*...

000223a8 <smpiScStateTblOobWaitRand>:
   223a8:	00281306 121b0000                                ..(...

000223ae <smpiScStateTblOobSendRand>:
   223ae:	0027121b 0c190000                                ..'...

000223b4 <smpiScStateTblPasskeyRepeat>:
   223b4:	1a210c19 00002913 25101b00                       ..!..)...

000223bd <smpiScStateTblPasskeyCheck>:
   223bd:	0025101b 0f060000                                ..%...

000223c3 <smpiScStateTblPasskeyRand>:
   223c3:	00220f06 0e060000                                .."...

000223c9 <smpiScStateTblPasskeyCnf>:
   223c9:	00240e06 0d1b0000                                ..$...

000223cf <smpiScStateTblPasskeyCalc>:
   223cf:	00230d1b 0b060000                                ..#...

000223d5 <smprScStateTblPasskeyKeypress>:
   223d5:	161f0b06 0c04200b 00000021              ..... ..!...

000223e1 <smpiScStateTblJwNcWaitUser>:
   223e1:	00291315 0a1b0000                                ..)...

000223e7 <smpiScStateTblJwNcCheck2>:
   223e7:	001d0a1b 091b0000                                ......

000223ed <smpiScStateTblJwNcCheck1>:
   223ed:	001c091b 08060000                                ......

000223f3 <smpiScStateTblJwNcRand>:
   223f3:	001b0806 07060000                                ......

000223f9 <smpiScStateTblJwNcWaitCnf>:
   223f9:	001a0706 06120000                                ......

000223ff <smpiScStateTblAuthSelect>:
   223ff:	13190612 11141e0b 00000026              ........&...

0002240b <smpiScStateTblPubKey>:
   2240b:	00180506 04040000                                ......

00022411 <smpiScStateTblLescPin>:
   22411:	00170404 03100000                                ......

00022417 <smpiScStateTblModeSelect>:
   22417:	11000310 0000001a 10020600                       .........

00022420 <smpiScStateTblPairRsp>:
   22420:	00100206 01010000                                ......

00022426 <smpiScStateTblIdle>:
   22426:	0a0d0101 00030100 0f00060e 0f000007     ................
   22436:	00000000 02000a00                                .....

0002243b <smpiScStateTblCommon>:
   2243b:	0702000a 00030200 02000f03 00000000     ................
	...

0002244c <smpiScActionTbl>:
   2244c:	000118f9 000112f7 00011309 0001131f     ................
   2245c:	000119bb 000119dd 000119e5 00011a2f     ............/...
   2246c:	00011a53 00011c8d 00011cb1 00011cb9     S...............
   2247c:	00011cdb 00011ead 00011f1d 00011f31     ............1...
   2248c:	00011f5b 00011fc1 00012017 00012079     [........ ..y ..
   2249c:	000120bd 00012141 0001216f 00012199     . ..A!..o!...!..
   224ac:	00012195 000121a3 000121d9 00012205     .!...!...!..."..
   224bc:	00012227 00011477 00011399 000114bb     '"..w...........
   224cc:	000114f1 00012263 000122dd 0001231d     ....c"..."...#..
   224dc:	00012323 00012327 00012377 000123d9     ##..'#..w#...#..
   224ec:	0001242f 00011531 000115a5 00011605     /$..1...........
   224fc:	00011675 000116e5 00011753 00012451     u.......S...Q$..
   2250c:	0001247b                                {$..

00022510 <smprScSmIf>:
   22510:	000225b0 00022788 00022776              .%...'..v'..

0002251c <CSWTCH.2>:
   2251c:	000232d4 000232db 000232ea 000232f8     .2...2...2...2..
   2252c:	000232ca 00023302 00023310 0002331d     .2...3...3...3..
   2253c:	0002332e 0002333d 0002334e 000232ca     .3..=3..N3...2..
   2254c:	0002335c 0002336a 00023374 0002337e     \3..j3..t3..~3..
   2255c:	00023389 00023395 000233a5 000233b5     .3...3...3...3..
   2256c:	000232ca 000233c5 000233d4 000233e5     .2...3...3...3..
   2257c:	000233f3 00023400 0002340d 0002341a     .3...4...4...4..
   2258c:	00023427 00023434 00023441 0002344d     '4..44..A4..M4..
   2259c:	0002345e 0002346f 0002347a 00023484     ^4..o4..z4...4..
   225ac:	0002348f                                .4..

000225b0 <smprScStateTbl>:
   225b0:	0002275b 00022755 0002274c 00022740     ['..U'..L'..@'..
   225c0:	00022746 00022734 0002272e 00022728     F'..4'...'..('..
   225d0:	00022722 0002271c 0002270d 00022707     "'...'...'...'..
   225e0:	00022701 000226fb 000226f5 000226ef     .'...&...&...&..
   225f0:	000226e6 000226da 000226e0 000226d4     .&...&...&...&..
   22600:	000226ce 000226c8 000226c2 000226bc     .&...&...&...&..
   22610:	000226b6 000226b0 000226a7 0002269e     .&...&...&...&..
   22620:	00022698 00022692 0002268c 00022686     .&...&...&...&..
   22630:	00022680 00022677 00022668 00022659     .&..w&..h&..Y&..
   22640:	00022644                                D&..

00022644 <smprScStateTblAttempts>:
   22644:	060e000f 00050f24 01000a10 07010003     ....$...........
   22654:	00000024 33230600                                $....

00022659 <smprScStateTblKeyDist>:
   22659:	0c332306 000e3423 0023030d 08000000              .#3.#4....#....

00022668 <smprScStateTblEncrypt>:
   22668:	09322308 22030200 03001c00 0b000000              .#2....".......

00022677 <smprScStateTblStkCalc>:
   22677:	0d31220b 00000c24 30210b00                       ."1.$....

00022680 <smprStateTblCnfVerCalc2>:
   22680:	0030210b 200b0000                                .!0...

00022686 <smprStateTblCnfVerCalc1>:
   22686:	000b200b 1f060000                                . ....

0002268c <smprStateTblPairRand>:
   2268c:	000a1f06 1e0b0000                                ......

00022692 <smprStateTblCnfCalc2>:
   22692:	00091e0b 1d0b0000                                ......

00022698 <smprStateTblCnfCalc1>:
   22698:	00081d0b 1c040000                                ......

0002269e <smprStateTblPinPair2>:
   2269e:	06071c04 00002f1c 051b0400                       ...../...

000226a7 <smprStateTblPinPair1>:
   226a7:	06051b04 0000151b 2e221b00                       .........

000226b0 <smprScStateTblDhCalcF6Eb>:
   226b0:	002e221b 191b0000                                ."....

000226b6 <smprScStateTblDhCalcF6Ea>:
   226b6:	002d191b 181b0000                                ..-...

000226bc <smprScStateTblCalcF5LTK>:
   226bc:	002c181b 171b0000                                ..,...

000226c2 <smprScStateTblCalcF5MacKey>:
   226c2:	002b171b 161b0000                                ..+...

000226c8 <smprScStateTblCalcF5TKey>:
   226c8:	002a161b 15180000                                ..*...

000226ce <smprScStateTblCalcDHKey>:
   226ce:	00291518 14060000                                ..)...

000226d4 <smprScStateTblWaitDhCheck>:
   226d4:	00281406 131b0000                                ..(...

000226da <smprScStateTblOobSendRand>:
   226da:	0026131b 11060000                                ..&...

000226e0 <smprScStateTblOobWaitRand>:
   226e0:	00251106 0c190000                                ..%...

000226e6 <smprScStateTblPasskeyRepeat>:
   226e6:	1a000c19 00002713 23101b00                       .....'...

000226ef <smprScStateTblPasskeyCheck>:
   226ef:	0023101b 0f060000                                ..#...

000226f5 <smprScStateTblPasskeyRand>:
   226f5:	00220f06 0e1b0000                                .."...

000226fb <smprScStateTblPasskeyCalc>:
   226fb:	00210e1b 0d060000                                ..!...

00022701 <smprScStateTblPasskeyWaitCnf>:
   22701:	001e0d06 0d040000                                ......

00022707 <smprScStateTblPassWaitAuthRsp>:
   22707:	001f0d04 0a060000                                ......

0002270d <smprScStateTblPassKeyKeypress>:
   2270d:	1d1b0a06 0a161d0b 060c041c 15000000              ...............

0002271c <smprScStateTblJwNcWaitUser>:
   2271c:	00271315 091b0000                                ..'...

00022722 <smprScStateTblJwNcCalcG2>:
   22722:	0019091b 08060000                                ......

00022728 <smprScStateTblJwNcWaitRand>:
   22728:	00180806 071b0000                                ......

0002272e <smprScStateTblJwNcSetup>:
   2272e:	0017071b 06120000                                ......

00022734 <smprScStateTblAuthSelect>:
   22734:	13160612 12141a0a 00000024              ........$...

00022740 <smprScStateTblPubKey>:
   22740:	00040506 03040000                                ......

00022746 <smprScStateTblLescPin>:
   22746:	00060304 04100000                                ......

0002274c <smprScStateTblModeSelect>:
   2274c:	11000410 0000001a 14020200                       .........

00022755 <smprScStateTblApiPairRsp>:
   22755:	00140202 00050000                                ......

0002275b <smprScStateTblIdle>:
   2275b:	0a100005 00080100 12000912 07130106     ................
   2276b:	00031100 00000f01 0a000000                       ...........

00022776 <smprScStateTblCommon>:
   22776:	0702000a 00030200 02000f03 00000000     ................
	...

00022788 <smprScActionTbl>:
   22788:	000118f9 000112f7 00011309 0001131f     ................
   22798:	00012845 00011993 000127f5 000119bb     E(.......'......
   227a8:	000119dd 000119e5 00011a2f 00011a53     ......../...S...
   227b8:	00011c8d 00011cdb 00011cb9 00011cb1     ................
   227c8:	000124e1 0001250b 00012517 0001251f     .$...%...%...%..
   227d8:	00012591 00012621 0001285b 0001289d     .%..!&..[(...(..
   227e8:	000128a3 00011477 00011399 000114bb     .(..w...........
   227f8:	000114f1 000128c3 00012915 0001292b     .....(...)..+)..
   22808:	000128d3 00012941 00012945 00012981     .(..A)..E)...)..
   22818:	000129eb 000129f3 00012a61 00012ab9     .)...)..a*...*..
   22828:	00012ad1 000115a5 00011605 00011675     .*..........u...
   22838:	000116e5 00011753 00012af3 00012643     ....S....*..C&..
   22848:	00012665 000126c1 00012789 000127cb     e&...&...'...'..
   22858:	00012721                                !'..

0002285c <smprSmIf>:
   2285c:	00022868 00022938 00022926              h(..8)..&)..

00022868 <smprStateTbl>:
   22868:	0002290b 00022905 000228fc 000228f3     .)...)...(...(..
   22878:	000228ed 000228e7 000228e1 000228db     .(...(...(...(..
   22888:	000228d5 000228cc 000228c0 000228b1     .(...(...(...(..
   22898:	0002289c                                .(..

0002289c <smprStateTblAttempts>:
   2289c:	060c000f 00050b0c 01000a0e 07010003     ................
   228ac:	0000000c 180b0c00                                .....

000228b1 <smprStateTblKeyDist>:
   228b1:	06180b0c 000e190b 000b030d 08000000              ...............

000228c0 <smprStateTblEncrypt>:
   228c0:	09170b08 0a030200 00000000              ............

000228cc <smprStateTblStkCalc>:
   228cc:	0d160a0b 00000a0c 15090b00                       .........

000228d5 <smprStateTblCnfVerCalc2>:
   228d5:	0015090b 080b0000                                ......

000228db <smprStateTblCnfVerCalc1>:
   228db:	0009080b 07060000                                ......

000228e1 <smprStateTblPairRand>:
   228e1:	00080706 060b0000                                ......

000228e7 <smprStateTblCnfCalc2>:
   228e7:	0007060b 050b0000                                ......

000228ed <smprStateTblCnfCalc1>:
   228ed:	0006050b 04040000                                ......

000228f3 <smprStateTblPinPair2>:
   228f3:	06050404 00001404 04030400                       .........

000228fc <smprStateTblPinPair1>:
   228fc:	06040304 00001303 12020200                       .........

00022905 <smprStateTblApiPairRsp>:
   22905:	00120202 00050000                                ......

0002290b <smprStateTblIdle>:
   2290b:	0a0e0005 00080100 10000910 07110106     ................
   2291b:	00030f00 00000f01 0a000000                       ...........

00022926 <smprStateTblCommon>:
   22926:	0702000a 00030200 02000f03 00000000     ................
	...

00022938 <smprActionTbl>:
   22938:	000118f9 0001192d 00011953 0001197b     ....-...S...{...
   22948:	00011993 000119bb 000119dd 000119e5     ................
   22958:	00011a2f 00011a53 00011c8d 00011cb1     /...S...........
   22968:	00011cb9 00011cdb 000124e1 0001250b     .........$...%..
   22978:	00012517 0001251f 00012591 00012621     .%...%...%..!&..
   22988:	00012643 00012665 000126c1 00012789     C&..e&...&...'..
   22998:	00012721 000127cb                       !'...'..

000229a0 <fitAdvCfg>:
   229a0:	00000000 03200000 00000000              ...... .....

000229ac <fitSlaveCfg>:
   229ac:	00000001                                ....

000229b0 <fitSecCfg>:
   229b0:	00010009 00000000                       ........

000229b8 <fitUpdateCfg>:
   229b8:	00000bb8 003c0030 02580004 00000005     ....0.<...X.....

000229c8 <fitHrpsCfg>:
   229c8:	00000064                                d...

000229cc <fitBasCfg>:
   229cc:	0000001e 00640001                       ......d.

000229d4 <fitSmpCfg>:
   229d4:	07030bb8 00000310                       ........

000229dc <fitAdvDataDisc>:
   229dc:	02060102 0309000a 1814180d 180f180a     ................

000229ec <fitScanDataDisc>:
   229ec:	69460904 00000074                       ..Fit...

000229f4 <fitCccSet>:
   229f4:	00020013 00230000 00000001 00010063     ......#.....c...
   22a04:	04a50000 00000001                       ........

00022a0c <hciEventMask>:
   22a0c:	02008890 20008000                       ....... 

00022a14 <hciLeEventMask>:
   22a14:	000fffff 00000000                       ........

00022a1c <hciEventMaskPage2>:
   22a1c:	00800000 00000000                       ........

00022a24 <hciEvtParseFcnTbl>:
   22a24:	00000000 00015525 00015629 00015735     ....%U..)V..5W..
   22a34:	00015797 0001584d 00000000 0001587b     .W..MX......{X..
   22a44:	000158df 0001593f 00015993 00015a35     .X..?Y...Y..5Z..
   22a54:	00015a95 00015aeb 00015b41 00015b97     .Z...Z..A[...[..
   22a64:	00015bf9 00015c6b 00015ca5 00015cfd     .[..k\...\...\..
   22a74:	00015d21 00015db7 00015de5 00015e13     !]...]...]...^..
   22a84:	00015e41 00015e7d 00015eb9 00015d47     A^..}^...^..G]..
   22a94:	00015d7f 00015ee7 00015f3d 00015f93     .]...^..=_..._..
   22aa4:	00016001 0001602f 00016085 00016133     .`../`...`..3a..
   22ab4:	000161f5 000162b7 000162ef 00016327     .a...b...b..'c..
   22ac4:	0001637d 000163bf 0001642d 0001645b     }c...c..-d..[d..
   22ad4:	00000000 00016769 00016783 000167f1     ....ig...g...g..
   22ae4:	00016831 00000000 000169d7 00000000     1h.......i......
   22af4:	000169b1 000169b1 000169b1 000169b1     .i...i...i...i..
   22b04:	000169b1                                .i..

00022b08 <hciEvtCbackLen>:
   22b08:	0a242404 0a1c060e 100e080e 0a080808     .$$.............
   22b18:	44460610 06060606 16060c0c 0a08080e     ..FD............
   22b28:	0e0e0806 0826460e 0a060a06 0c0a0420     .....F&..... ...
   22b38:	04061016 04040404 00000004              ............

00022b44 <attCfg>:
   22b44:	0000000f 041e01e0                       ........

00022b4c <smpCfg>:
   22b4c:	07030bb8 00000310                       ........

00022b54 <calc128Zeros>:
	...

00022b64 <battValSvc>:
   22b64:	0002180f                                         ..

00022b66 <battLenSvc>:
   22b66:	62120002                                         ..

00022b68 <battValLvlCh>:
   22b68:	19006212 0005002a                                .b..*.

00022b6e <battLenLvlCh>:
   22b6e:	00010005                                         ..

00022b70 <battLenLvl>:
   22b70:	00020001                                         ..

00022b72 <battLenLvlChCcc>:
   22b72:	1e120002                                         ..

00022b74 <battList>:
   22b74:	00021e12 00022b64 00022b66 01000002     ....d+..f+......
   22b84:	00021e0c 00022b68 00022b6e 01000005     ....h+..n+......
   22b94:	00021dc6 10004604 00022b70 01040001     .....F..p+......
   22ba4:	00021e06 10004608 00022b72 11200002     .....F..r+.... .

00022bb4 <gapValSvc>:
   22bb4:	00021800                                         ..

00022bb6 <gapLenSvc>:
   22bb6:	05020002                                         ..

00022bb8 <gapValApCh>:
   22bb8:	01000502 0005002a                                ....*.

00022bbe <gapLenApCh>:
   22bbe:	00020005                                         ..

00022bc0 <gapLenAp>:
   22bc0:	00000002                                ....

00022bc4 <gapValCarCh>:
   22bc4:	a6000702 0005002a                                ....*.

00022bca <gapLenCarCh>:
   22bca:	00010005                                         ..

00022bcc <gapLenCar>:
   22bcc:	00000001                                ....

00022bd0 <gapValRpaoCh>:
   22bd0:	c9000902 0005002a                                ....*.

00022bd6 <gapLenRpaoCh>:
   22bd6:	00010005                                         ..

00022bd8 <gapLenRpao>:
   22bd8:	00000001                                ....

00022bdc <gapList>:
   22bdc:	00021e12 00022bb4 00022bb6 01000002     .....+...+......
   22bec:	00021e0c 00022bb8 00022bbe 01000005     .....+...+......
   22bfc:	00021df6 1000460c 00022bc0 01000002     .....F...+......
   22c0c:	00021e0c 00022bc4 00022bca 01000005     .....+...+......
   22c1c:	00021d52 10004610 00022bcc 01000001     R....F...+......
   22c2c:	00021e0c 00022bd0 00022bd6 01000005     .....+...+......
   22c3c:	00021d3c 10004614 00022bd8 01000001     <....F...+......

00022c4c <gattValSvc>:
   22c4c:	00021801                                         ..

00022c4e <gattLenSvc>:
   22c4e:	12200002                                         ..

00022c50 <gattValScCh>:
   22c50:	05001220 0005002a                                 ...*.

00022c56 <gattLenScCh>:
   22c56:	00010005                                         ..

00022c58 <gattValSc>:
   22c58:	ffff0001                                ....

00022c5c <gattLenSc>:
   22c5c:	00020004                                         ..

00022c5e <gattLenScChCcc>:
   22c5e:	1e120002                                         ..

00022c60 <gattList>:
   22c60:	00021e12 00022c4c 00022c4e 01000002     ....L,..N,......
   22c70:	00021e0c 00022c50 00022c56 01000005     ....P,..V,......
   22c80:	00021dee 00022c58 00022c5c 00000004     ....X,..\,......
   22c90:	00021e06 10004618 00022c5e 11200002     .....F..^,.... .

00022ca0 <disValSvc>:
   22ca0:	0002180a                                         ..

00022ca2 <disLenSvc>:
   22ca2:	32020002                                         ..

00022ca4 <disValMfrCh>:
   22ca4:	29003202 0005002a                                .2.)*.

00022caa <disLenMfrCh>:
   22caa:	2a290005                                         ..

00022cac <disUuMfr>:
   22cac:	00002a29                                )*..

00022cb0 <disValSidCh>:
   22cb0:	23003402 0005002a                                .4.#*.

00022cb6 <disLenSidCh>:
   22cb6:	2a230005                                         ..

00022cb8 <disUuSid>:
   22cb8:	00082a23                                         #*

00022cba <disLenSid>:
   22cba:	36020008                                         ..

00022cbc <disValMnCh>:
   22cbc:	24003602 0005002a                                .6.$*.

00022cc2 <disLenMnCh>:
   22cc2:	2a240005                                         ..

00022cc4 <disUuMn>:
   22cc4:	00002a24                                $*..

00022cc8 <disValSnCh>:
   22cc8:	25003802 0005002a                                .8.%*.

00022cce <disLenSnCh>:
   22cce:	2a250005                                         ..

00022cd0 <disUuSn>:
   22cd0:	00002a25                                %*..

00022cd4 <disValFwrCh>:
   22cd4:	26003a02 0005002a                                .:.&*.

00022cda <disLenFwrCh>:
   22cda:	2a260005                                         ..

00022cdc <disUuFwr>:
   22cdc:	00002a26                                &*..

00022ce0 <disValHwrCh>:
   22ce0:	27003c02 0005002a                                .<.'*.

00022ce6 <disLenHwrCh>:
   22ce6:	2a270005                                         ..

00022ce8 <disUuHwr>:
   22ce8:	00002a27                                '*..

00022cec <disValSwrCh>:
   22cec:	28003e02 0005002a                                .>.(*.

00022cf2 <disLenSwrCh>:
   22cf2:	2a280005                                         ..

00022cf4 <disUuSwr>:
   22cf4:	00002a28                                (*..

00022cf8 <disValRcdCh>:
   22cf8:	2a004002 0005002a                                .@.**.

00022cfe <disLenRcdCh>:
   22cfe:	2a2a0005                                         ..

00022d00 <disUuRcd>:
   22d00:	00062a2a                                         **

00022d02 <disLenRcd>:
   22d02:	1e120006                                         ..

00022d04 <disList>:
   22d04:	00021e12 00022ca0 00022ca2 01000002     .....,...,......
   22d14:	00021e0c 00022ca4 00022caa 01000005     .....,...,......
   22d24:	00022cac 100023f0 10002404 01080014     .,...#...$......
   22d34:	00021e0c 00022cb0 00022cb6 01000005     .....,...,......
   22d44:	00022cb8 10002408 00022cba 01000008     .,...$...,......
   22d54:	00021e0c 00022cbc 00022cc2 01000005     .....,...,......
   22d64:	00022cc4 10002410 10002424 01080014     .,...$..$$......
   22d74:	00021e0c 00022cc8 00022cce 01000005     .....,...,......
   22d84:	00022cd0 10002428 1000243c 01080014     .,..($..<$......
   22d94:	00021e0c 00022cd4 00022cda 01000005     .....,...,......
   22da4:	00022cdc 10002440 10002450 01080010     .,..@$..P$......
   22db4:	00021e0c 00022ce0 00022ce6 01000005     .....,...,......
   22dc4:	00022ce8 10002454 10002464 01080010     .,..T$..d$......
   22dd4:	00021e0c 00022cec 00022cf2 01000005     .....,...,......
   22de4:	00022cf4 10002468 10002478 01080010     .,..h$..x$......
   22df4:	00021e0c 00022cf8 00022cfe 01000005     .....,...,......
   22e04:	00022d00 1000461c 00022d02 01000006     .-...F...-......

00022e14 <svcHrmUuid>:
   22e14:	00002a37                                7*..

00022e18 <svcSlUuid>:
   22e18:	00002a38                                8*..

00022e1c <svcCpUuid>:
   22e1c:	00002a39                                9*..

00022e20 <hrsValSvc>:
   22e20:	0002180d                                         ..

00022e22 <hrsLenSvc>:
   22e22:	22100002                                         ..

00022e24 <hrsValHrmCh>:
   22e24:	37002210 0005002a                                .".7*.

00022e2a <hrsLenHrmCh>:
   22e2a:	00000005                                         ..

00022e2c <hrsValHrm>:
	...

00022e2e <hrsLenHrm>:
   22e2e:	00020001                                         ..

00022e30 <hrsLenHrmChCcc>:
   22e30:	00000002                                ....

00022e34 <hrsValSlCh>:
   22e34:	38002502 0005002a                                .%.8*.

00022e3a <hrsLenSlCh>:
   22e3a:	00010005                                         ..

00022e3c <hrsLenSl>:
   22e3c:	00000001                                ....

00022e40 <hrsValCpCh>:
   22e40:	39002708 0005002a                                .'.9*.

00022e46 <hrsLenCpCh>:
   22e46:	00000005                                         ..

00022e48 <hrsValCp>:
	...

00022e4a <hrsLenCp>:
   22e4a:	1e120001                                         ..

00022e4c <hrsList>:
   22e4c:	00021e12 00022e20 00022e22 01000002     .... ...".......
   22e5c:	00021e0c 00022e24 00022e2a 01000005     ....$...*.......
   22e6c:	00022e14 00022e2c 00022e2e 00000001     ....,...........
   22e7c:	00021e06 10004624 00022e30 11200002     ....$F..0..... .
   22e8c:	00021e0c 00022e34 00022e3a 01000005     ....4...:.......
   22e9c:	00022e18 10002490 00022e3c 01000001     .....$..<.......
   22eac:	00021e0c 00022e40 00022e46 01000005     ....@...F.......
   22ebc:	00022e1c 00022e48 00022e4a 10020001     ....H...J.......

00022ecc <rscsValSvc>:
   22ecc:	00021814                                         ..

00022ece <rscsLenSvc>:
   22ece:	a2020002                                         ..

00022ed0 <rscsValFeatureCh>:
   22ed0:	5404a202 0005002a                                ...T*.

00022ed6 <rscsLenFeatureCh>:
   22ed6:	00020005                                         ..

00022ed8 <rscsLenFeature>:
   22ed8:	00000002                                ....

00022edc <rscsValMeasurementCh>:
   22edc:	5304a410 0005002a                                ...S*.

00022ee2 <rscsLenMeasurementCh>:
   22ee2:	00000005                                         ..

00022ee4 <rscsValMeasurement>:
	...

00022ee6 <rscsLenMeasurement>:
   22ee6:	0002000a                                         ..

00022ee8 <rscsLenMeasurementChCcc>:
   22ee8:	00000002                                ....

00022eec <rscsValLocationCh>:
   22eec:	5d04a702 0005002a                                ...]*.

00022ef2 <rscsLenLocationCh>:
   22ef2:	00010005                                         ..

00022ef4 <rscsLenLocation>:
   22ef4:	00000001                                ....

00022ef8 <rscsList>:
   22ef8:	00021e12 00022ecc 00022ece 01000002     ................
   22f08:	00021e0c 00022ed0 00022ed6 01000005     ................
   22f18:	00021d50 100024a8 00022ed8 09000002     P....$..........
   22f28:	00021e0c 00022edc 00022ee2 01000005     ................
   22f38:	00021d4e 00022ee4 00022ee6 00000001     N...............
   22f48:	00021e06 10004628 00022ee8 91200002     ....(F........ .
   22f58:	00021e0c 00022eec 00022ef2 01000005     ................
   22f68:	00021d44 1000462c 00022ef4 09000001     D...,F..........

00022f78 <appReqActCfg>:
   22f78:	49504100 4941505f 45525f52 50410051     .API_PAIR_REQ.AP
   22f88:	41435f49 4c45434e 5145525f 49504100     I_CANCEL_REQ.API
   22f98:	5455415f 53525f48 50410050 45535f49     _AUTH_RSP.API_SE
   22fa8:	49525543 525f5954 43005145 505f444d     CURITY_REQ.CMD_P
   22fb8:	4300544b 505f444d 49524941 465f474e     KT.CMD_PAIRING_F
   22fc8:	454c4941 4d440044 434e455f 54505952     AILED.DM_ENCRYPT
   22fd8:	504d435f 4d44004c 434e455f 54505952     _CMPL.DM_ENCRYPT
   22fe8:	4941465f 0044454c 435f4d44 5f4e4e4f     _FAILED.DM_CONN_
   22ff8:	534f4c43 53570045 45415f46 4d435f53     CLOSE.WSF_AES_CM
   23008:	49004c50 535f544e 5f444e45 5458454e     PL.INT_SEND_NEXT
   23018:	59454b5f 544e4900 58414d5f 5454415f     _KEY.INT_MAX_ATT
   23028:	54504d45 4e490053 41505f54 4e495249     EMPTS.INT_PAIRIN
   23038:	4d435f47 49004c50 545f544e 4f454d49     G_CMPL.INT_TIMEO
   23048:	49005455 4c5f544e 00435345 5f544e49     UT.INT_LESC.INT_
   23058:	4147454c 49005943 4a5f544e 434e5f57     LEGACY.INT_JW_NC
   23068:	544e4900 5341505f 59454b53 544e4900     .INT_PASSKEY.INT
   23078:	424f4f5f 49504100 4553555f 4f435f52     _OOB.API_USER_CO
   23088:	5249464e 5041004d 53555f49 4b5f5245     NFIRM.API_USER_K
   23098:	52505945 00535345 5f495041 5059454b     EYPRESS.API_KEYP
   230a8:	53534552 504d435f 5357004c 43455f46     RESS_CMPL.WSF_EC
   230b8:	4d435f43 49004c50 505f544e 454e5f4b     C_CMPL.INT_PK_NE
   230c8:	49005458 505f544e 4d435f4b 57004c50     XT.INT_PK_CMPL.W
   230d8:	435f4653 5f43414d 4c504d43 5f484400     SF_CMAC_CMPL.DH_
   230e8:	43454843 41465f4b 52554c49 5f490045     CHECK_FAILURE.I_
   230f8:	6e6b6e55 006e776f 44495f49 4900454c     Unknown.I_IDLE.I
   23108:	444f4d5f 45535f45 5443454c 4c5f4900     _MODE_SELECT.I_L
   23118:	5f435345 004e4950 55505f49 454b5f42     ESC_PIN.I_PUB_KE
   23128:	5f490059 48545541 4c45535f 00544345     Y.I_AUTH_SELECT.
   23138:	574a5f49 575f434e 5f544941 00464e43     I_JWNC_WAIT_CNF.
   23148:	574a5f49 525f434e 00444e41 574a5f49     I_JWNC_RAND.I_JW
   23158:	435f434e 4b434548 4900315f 4e574a5f     NC_CHECK_1.I_JWN
   23168:	48435f43 5f4b4345 5f490032 434e574a     C_CHECK_2.I_JWNC
   23178:	4941575f 53555f54 49005245 5f4b505f     _WAIT_USER.I_PK_
   23188:	5059454b 53534552 505f4900 41435f4b     KEYPRESS.I_PK_CA
   23198:	4900434c 5f4b505f 00464e43 4b505f49     LC.I_PK_CNF.I_PK
   231a8:	4e41525f 5f490044 435f4b50 4b434548     _RAND.I_PK_CHECK
   231b8:	505f4900 45525f4b 54414550 4f5f4900     .I_PK_REPEAT.I_O
   231c8:	535f424f 5f444e45 444e4152 4f5f4900     OB_SEND_RAND.I_O
   231d8:	575f424f 5f544941 444e4152 435f4900     OB_WAIT_RAND.I_C
   231e8:	5f434c41 545f3546 0059454b 41435f49     ALC_F5_TKEY.I_CA
   231f8:	465f434c 414d5f35 59454b43 435f4900     LC_F5_MACKEY.I_C
   23208:	5f434c41 4c5f3546 49004b54 4c41435f     ALC_F5_LTK.I_CAL
   23218:	36465f43 0041455f 41435f49 465f434c     C_F6_EA.I_CALC_F
   23228:	42455f36 565f4900 46495245 48445f59     6_EB.I_VERIFY_DH
   23238:	4548435f 49004b43 47454c5f 5f594341     _CHECK.I_LEGACY_
   23248:	004e4950 4e435f49 41435f46 315f434c     PIN.I_CNF_CALC_1
   23258:	435f4900 435f464e 5f434c41 5f490032     .I_CNF_CALC_2.I_
   23268:	52494150 464e435f 505f4900 5f524941     PAIR_CNF.I_PAIR_
   23278:	444e4152 435f4900 565f464e 435f5245     RAND.I_CNF_VER_C
   23288:	5f434c41 5f490031 5f464e43 5f524556     ALC_1.I_CNF_VER_
   23298:	434c4143 4900325f 4b54535f 4c41435f     CALC_2.I_STK_CAL
   232a8:	5f490043 52434e45 00545059 454b5f49     C.I_ENCRYPT.I_KE
   232b8:	49445f59 49005453 5454415f 54504d45     Y_DIST.I_ATTEMPT
   232c8:	5f520053 6e6b6e55 006e776f 44495f52     S.R_Unknown.R_ID
   232d8:	5200454c 4950415f 4941505f 53525f52     LE.R_API_PAIR_RS
   232e8:	5f520050 45444f4d 4c45535f 00544345     P.R_MODE_SELECT.
   232f8:	55505f52 454b5f42 5f520059 48545541     R_PUB_KEY.R_AUTH
   23308:	4c45535f 00544345 574a5f52 535f434e     _SELECT.R_JWNC_S
   23318:	50555445 4a5f5200 5f434e57 54494157     ETUP.R_JWNC_WAIT
   23328:	4e41525f 5f520044 434e574a 4c41435f     _RAND.R_JWNC_CAL
   23338:	32475f43 4a5f5200 5f434e57 54494157     C_G2.R_JWNC_WAIT
   23348:	4553555f 5f520052 4b5f4b50 52505945     _USER.R_PK_KEYPR
   23358:	00535345 4b505f52 4941575f 4e435f54     ESS.R_PK_WAIT_CN
   23368:	5f520046 435f4b50 00434c41 4b505f52     F.R_PK_CALC.R_PK
   23378:	4e41525f 5f520044 435f4b50 4b434548     _RAND.R_PK_CHECK
   23388:	505f5200 45525f4b 54414550 4f5f5200     .R_PK_REPEAT.R_O
   23398:	535f424f 5f444e45 444e4152 4f5f5200     OB_SEND_RAND.R_O
   233a8:	575f424f 5f544941 444e4152 575f5200     OB_WAIT_RAND.R_W
   233b8:	5f544941 435f4844 4b434548 435f5200     AIT_DH_CHECK.R_C
   233c8:	5f434c41 545f3546 0059454b 41435f52     ALC_F5_TKEY.R_CA
   233d8:	465f434c 414d5f35 59454b43 435f5200     LC_F5_MACKEY.R_C
   233e8:	5f434c41 4c5f3546 52004b54 4c41435f     ALC_F5_LTK.R_CAL
   233f8:	36465f43 0041455f 41435f52 465f434c     C_F6_EA.R_CALC_F
   23408:	42455f36 505f5200 505f4e49 5f524941     6_EB.R_PIN_PAIR_
   23418:	5f520031 5f4e4950 52494150 5200325f     1.R_PIN_PAIR_2.R
   23428:	464e435f 4c41435f 00315f43 4e435f52     _CNF_CALC_1.R_CN
   23438:	41435f46 325f434c 505f5200 5f524941     F_CALC_2.R_PAIR_
   23448:	444e4152 435f5200 565f464e 435f5245     RAND.R_CNF_VER_C
   23458:	5f434c41 5f520031 5f464e43 5f524556     ALC_1.R_CNF_VER_
   23468:	434c4143 5200325f 4b54535f 4c41435f     CALC_2.R_STK_CAL
   23478:	5f520043 52434e45 00545059 454b5f52     C.R_ENCRYPT.R_KE
   23488:	49445f59 52005453 5454415f 54504d45     Y_DIST.R_ATTEMPT
   23498:	00000053                                S...

0002349c <ccitt_table>:
   2349c:	80050000 000a800f 001e801b 80110014     ................
   234ac:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   234bc:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   234cc:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   234dc:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   234ec:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   234fc:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   2350c:	00968093 8099009c 808d0088 00828087     ................
   2351c:	01868183 8189018c 819d0198 01928197     ................
   2352c:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   2353c:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   2354c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   2355c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   2356c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   2357c:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   2358c:	81150110 011a811f 010e810b 81010104     ................
   2359c:	03068303 8309030c 831d0318 03128317     ................
   235ac:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   235bc:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   235cc:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   235dc:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   235ec:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   235fc:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   2360c:	83950390 039a839f 038e838b 83810384     ................
   2361c:	82850280 028a828f 029e829b 82910294     ................
   2362c:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   2363c:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   2364c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   2365c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   2366c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   2367c:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   2368c:	02168213 8219021c 820d0208 02028207     ................

0002369c <am_ble_buffer_patch_data>:
   2369c:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   236ac:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   236bc:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   236cc:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   236dc:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   23718:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   23728:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   23738:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   23748:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   23758:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   23768:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   23778:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   23788:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   23798:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   237a8:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   237b8:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   237c8:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   237d8:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   237e8:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   237f8:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   23808:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   23818:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   23828:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   23838:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   23848:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   23858:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   23868:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   23878:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   23888:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   23898:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   238a8:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   238b8:	8f809011 9812900e 900d3008 30309812     .........0....00
   238c8:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   238d8:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   238e8:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   238f8:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   23908:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   23918:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   23928:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   23938:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   23948:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   23958:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   23968:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   23978:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   23988:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   239a8:	00000021 00000000 00000001 00000000     !...............
   239b8:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   239c8:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   239d8:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   239e8:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   239f8:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   23a08:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   23a18:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   23a28:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   23a38:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   23a48:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   23a58:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   23a68:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   23a78:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   23a88:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   23a98:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   23aa8:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   23ab8:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   23ac8:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   23ad8:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   23ae8:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   23af8:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   23b08:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   23b18:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   23b28:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   23b38:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   23b48:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   23b58:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   23b68:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   23b78:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   23b88:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   23b98:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   23ba8:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   23bb8:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   23bc8:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   23bd8:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   23be8:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   23bf8:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   23c08:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   23c18:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   23c28:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   23c38:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   23c48:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   23c58:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   23c68:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   23c78:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   23c88:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   23c98:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   23ca8:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   23cb8:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   23cc8:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   23cd8:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   23ce8:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   23cf8:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   23d08:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   23d18:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   23d28:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   23d38:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   23d48:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   23d58:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   23d68:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   23d78:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   23d88:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   23d98:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   23da8:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   23db8:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   23dc8:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   23dd8:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   23de8:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   23df8:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   23e08:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   23e18:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   23e28:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   23e38:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   23e48:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   23e58:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   23e68:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   23e78:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   23e88:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   23e98:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   23ea8:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   23eb8:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   23ec8:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   23ed8:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   23ee8:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   23ef8:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   23f08:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   23f18:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   23f28:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   23f38:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   23f48:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   23f58:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   23f68:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   23f78:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   23f88:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   23f98:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   23fa8:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   23fb8:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   23fc8:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   23fd8:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   23fe8:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   23ff8:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   24008:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   24018:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   24028:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   24038:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   24048:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   24058:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   24068:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   24078:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   24088:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   24098:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   240a8:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   240b8:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   240c8:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   240d8:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   240e8:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   240f8:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   24108:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   24118:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   24128:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   24138:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   24148:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   24158:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   24168:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   24178:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   24188:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   24198:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   241a8:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   241b8:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   241c8:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   241d8:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   241e8:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   241f8:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   24208:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   24218:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   24228:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   24238:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   24248:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   24258:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   24268:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   24278:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   24288:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   24298:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   242a8:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   242b8:	00010341 50804000 000093a5 00000466     A....@.P....f...
   242c8:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   242d8:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   242e8:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   242f8:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   24308:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   24318:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   24328:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   24338:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   24348:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   24358:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   24368:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   24378:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   24388:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   24398:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   243a8:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   243b8:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   243c8:	00004770 20006780 20006054              pG...g. T`. 

000243d4 <am_hal_ble_num_default_patches>:
   243d4:	00000003                                ....

000243d8 <am_ble_performance_copy_patch_data>:
   243d8:	006e1100 00000400 00000000 01c50101     ..n.............
   243e8:	00000039 00000000 00000000 00000000     9...............
   243f8:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   24408:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   24418:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   24428:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   24438:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   24448:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   24458:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   24468:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   24478:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   24488:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   24498:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   244a8:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   244b8:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   244c8:	f000e00a e007fb94 b2c09801 fac7f000     ................
   244d8:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   244e8:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   244f8:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   24508:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   24518:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   24528:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   24538:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   24548:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   24558:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   24568:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   24578:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   24588:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   24598:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   245a8:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   245b8:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   245c8:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   245d8:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   245e8:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   245f8:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   24608:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   24618:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   24628:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   24638:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   24648:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   24658:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   24668:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   24678:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   24688:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   24698:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   246a8:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   246b8:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   246c8:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   246d8:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   246e8:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   246f8:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   24708:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   24718:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   24728:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   24738:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   24748:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   24758:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   24768:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   24778:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   24788:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   24798:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   247a8:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   247b8:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   247c8:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   247d8:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   247e8:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   247f8:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   24808:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   24818:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   24828:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   24838:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   24848:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   24858:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   24868:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   24878:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   24888:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   24898:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   248a8:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   248b8:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   248c8:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   248d8:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   248e8:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   248f8:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   24908:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   24918:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   24928:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   24938:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   24948:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   24958:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   24968:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   24978:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   24988:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   24998:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   249a8:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   249b8:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   249c8:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   249d8:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   249e8:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   249f8:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   24a08:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   24a18:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   24a28:	00400000 00804580 021e4580 00030000     ..@..E...E......
   24a38:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   24a48:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   24a58:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   24a68:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   24a78:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   24a88:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   24a98:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   24aa8:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   24ab8:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   24ac8:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   24ad8:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   24ae8:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   24af8:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   24b08:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   24b18:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   24b28:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   24b38:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   24b48:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   24b58:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   24b68:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   24b78:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   24b88:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   24b98:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   24ba8:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   24bb8:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   24bc8:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   24bd8:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   24be8:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   24bf8:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   24c08:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   24c18:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   24c28:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   24c38:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   24c48:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   24c58:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   24c68:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   24c78:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   24c88:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   24c98:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   24ca8:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   24cb8:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   24cc8:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   24cd8:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   24ce8:	00000001                                ....

00024cec <am_hal_ble_num_default_patches_b0>:
   24cec:	00000003                                ....

00024cf0 <am_hal_cachectrl_defaults>:
   24cf0:	00000308                                ....

00024cf4 <g_ui8Bit76Capabilities>:
   24cf4:	02800101 80010180 80800101 80808080     ................
   24d04:	80808080 80808008 01800180 80808080     ................
   24d14:	80808080 01800402 01010401 80808080     ................
   24d24:	00000101                                ....

00024d28 <g_ui8NCEtable>:
   24d28:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   24d38:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   24d48:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   24d58:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   24d68:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   24d78:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   24d88:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   24d98:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   24da8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   24db8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   24dc8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   24dd8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   24de8:	32221202 43231303                       .."2..#C

00024df0 <g_ui8Inpen>:
   24df0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   24e00:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   24e10:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   24e20:	00003130                                01..

00024e24 <g_AM_HAL_GPIO_DISABLE>:
   24e24:	00000003                                ....

00024e28 <g_AM_HAL_GPIO_OUTPUT>:
   24e28:	00000403                                ....

00024e2c <g_ui8nCEpins>:
   24e2c:	02070707 00080802 01020202 01010101     ................
   24e3c:	01010101 01010101 01010101 01010101     ................
   24e4c:	01010101 08010101 01010008 01010101     ................
   24e5c:	00000101                                ....

00024e60 <g_am_hal_mcuctrl_flash_size>:
   24e60:	00004000 00008000 00010000 00020000     .@..............
   24e70:	00040000 00080000 00100000 00200000     .............. .
   24e80:	00180000 00000000 00000000 00000000     ................
	...

00024ea0 <g_am_hal_mcuctrl_sram_size>:
   24ea0:	00004000 00008000 00010000 00020000     .@..............
   24eb0:	00040000 00080000 00100000 00060000     ................
   24ec0:	000c0000 00000000 00000000 00000000     ................
	...

00024ee0 <am_hal_pwrctrl_peripheral_control>:
	...
   24eec:	00000001 00000004 00000004 00000002     ................
   24efc:	00000008 00000008 00000004 00000008     ................
   24f0c:	00000008 00000008 00000008 00000008     ................
   24f1c:	00000010 00000010 00000010 00000020     ............ ...
   24f2c:	00000010 00000010 00000040 00000010     ........@.......
   24f3c:	00000010 00000080 00000004 00000004     ................
   24f4c:	00000100 00000004 00000004 00000200     ................
   24f5c:	00000020 00000020 00000400 00000004      ... ...........
   24f6c:	00000004 00000800 00000040 00000040     ........@...@...
   24f7c:	00001000 00000080 00000080 00002000     ............. ..
   24f8c:	00000100 00000100                       ........

00024f94 <am_hal_pwrctrl_memory_control>:
	...
   24fa8:	00000001 00000001 00000001 00001fff     ................
   24fb8:	00001fff 00000003 00000003 00000003     ................
   24fc8:	00001fff 00001fff 00000007 00000007     ................
   24fd8:	00000007 00001fff 00001fff 0000000f     ................
   24fe8:	0000000f 0000000f 00001fff 00001fff     ................
   24ff8:	0000001f 0000001f 0000001f 00001fff     ................
   25008:	00001fff 0000003f 0000003f 0000003f     ....?...?...?...
   25018:	00001fff 00001fff 0000007f 0000007f     ................
   25028:	0000007f 00001fff 00001fff 000000ff     ................
   25038:	000000ff 000000ff 00001fff 00001fff     ................
   25048:	000001ff 000001ff 000001ff 00001fff     ................
   25058:	00001fff 000003ff 000003ff 000003ff     ................
   25068:	00001fff 00001fff 000007ff 000007ff     ................
   25078:	000007ff 00001fff 00001fff 00000fff     ................
   25088:	00000fff 00000fff 00001fff 00001fff     ................
   25098:	00001fff 00001fff 00001fff 00001fff     ................
   250a8:	00001fff 00002000 00002000 00002000     ..... ... ... ..
   250b8:	00006000 00006000 00006000 00006000     .`...`...`...`..
   250c8:	00006000 00006000 00006000 c0000000     .`...`...`......
   250d8:	00000000 c0000000 c0000000 00000000     ................
   250e8:	c0007fff 00007fff c0007fff c0007fff     ................
   250f8:	00007fff                                ....

000250fc <g_AM_BSP_GPIO_ITM_SWO>:
   250fc:	00000007                                ....

00025100 <curve_secp256r1>:
   25100:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   2511c:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   2512c:	a7179e84 bce6faad ffffffff ffffffff     ................
   2513c:	00000000 ffffffff d898c296 f4a13945     ............E9..
   2514c:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   2515c:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   2516c:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   2517c:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   2518c:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   2519c:	aa3a93e7 5ac635d8 00021761 00020f81     ..:..5.Za.......
   251ac:	00021131                                1...
