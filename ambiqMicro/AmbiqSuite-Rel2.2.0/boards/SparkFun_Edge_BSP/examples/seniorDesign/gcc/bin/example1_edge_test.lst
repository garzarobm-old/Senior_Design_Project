
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 0d d1 00 00 05 d1 00 00 b5 c2 00 00     ................
    c010:	b5 c2 00 00 b5 c2 00 00 b5 c2 00 00 00 00 00 00     ................
	...
    c02c:	09 d1 00 00 09 d1 00 00 00 00 00 00 09 d1 00 00     ................
    c03c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c04c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c05c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c06c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 75 d1 00 00     ............u...
    c07c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 45 d2 00 00     ............E...
    c08c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c09c:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c0ac:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c0bc:	09 d1 00 00 09 d1 00 00 09 d1 00 00 09 d1 00 00     ................
    c0cc:	09 d1 00 00                                         ....

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c1a0:	b570      	push	{r4, r5, r6, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a2:	2100      	movs	r1, #0
{
    c1a4:	b082      	sub	sp, #8
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	4608      	mov	r0, r1
    c1a8:	f001 ff46 	bl	e038 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ac:	4834      	ldr	r0, [pc, #208]	; (c280 <main+0xe0>)
    	am_util_stdio_printf("MICHEAL SUCKS!!!\r\n");
    c1ae:	4e35      	ldr	r6, [pc, #212]	; (c284 <main+0xe4>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1b0:	f001 fda0 	bl	dcf4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b4:	f001 fdc4 	bl	dd40 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c1b8:	f001 fad8 	bl	d76c <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c1bc:	f001 fb3e 	bl	d83c <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c1c0:	4b31      	ldr	r3, [pc, #196]	; (c288 <main+0xe8>)
    c1c2:	681c      	ldr	r4, [r3, #0]
    c1c4:	202e      	movs	r0, #46	; 0x2e
    c1c6:	4621      	mov	r1, r4
    c1c8:	f002 f8fa 	bl	e3c0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c1cc:	4621      	mov	r1, r4
    c1ce:	2025      	movs	r0, #37	; 0x25
    c1d0:	f002 f8f6 	bl	e3c0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c1d4:	4621      	mov	r1, r4
    c1d6:	202c      	movs	r0, #44	; 0x2c
    c1d8:	f002 f8f2 	bl	e3c0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c1dc:	4621      	mov	r1, r4
    c1de:	202f      	movs	r0, #47	; 0x2f
    c1e0:	f002 f8ee 	bl	e3c0 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c1e4:	4b29      	ldr	r3, [pc, #164]	; (c28c <main+0xec>)
    c1e6:	200e      	movs	r0, #14
    c1e8:	6819      	ldr	r1, [r3, #0]
    c1ea:	f002 f8e9 	bl	e3c0 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1ee:	4b28      	ldr	r3, [pc, #160]	; (c290 <main+0xf0>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c1f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c1f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c1f8:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c1fa:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c1fe:	601c      	str	r4, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c200:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c202:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c204:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c206:	f000 ff77 	bl	d0f8 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c20a:	4822      	ldr	r0, [pc, #136]	; (c294 <main+0xf4>)
    c20c:	f000 ff58 	bl	d0c0 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c210:	4a21      	ldr	r2, [pc, #132]	; (c298 <main+0xf8>)
    c212:	4922      	ldr	r1, [pc, #136]	; (c29c <main+0xfc>)
    c214:	4822      	ldr	r0, [pc, #136]	; (c2a0 <main+0x100>)
    c216:	f000 ff53 	bl	d0c0 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c21a:	4822      	ldr	r0, [pc, #136]	; (c2a4 <main+0x104>)
    c21c:	f000 ff50 	bl	d0c0 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c220:	4821      	ldr	r0, [pc, #132]	; (c2a8 <main+0x108>)
    c222:	f001 fa7f 	bl	d724 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c226:	f001 f94f 	bl	d4c8 <initAccelerometer>
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c22a:	4601      	mov	r1, r0
    c22c:	481f      	ldr	r0, [pc, #124]	; (c2ac <main+0x10c>)
    c22e:	f000 ff47 	bl	d0c0 <am_util_stdio_printf>
        uint32_t pin14Val = 1; 
    c232:	2501      	movs	r5, #1
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c234:	f001 f860 	bl	d2f8 <initADC>
    enableAdcInterrupts();
    c238:	f001 f87e 	bl	d338 <enableAdcInterrupts>
    c23c:	e001      	b.n	c242 <main+0xa2>
    	am_util_stdio_printf("MICHEAL SUCKS!!!\r\n");
    c23e:	f000 ff3f 	bl	d0c0 <am_util_stdio_printf>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c242:	aa01      	add	r2, sp, #4
    c244:	2100      	movs	r1, #0
    c246:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c248:	9501      	str	r5, [sp, #4]
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c24a:	f002 f9f5 	bl	e638 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c24e:	9c01      	ldr	r4, [sp, #4]
    	am_util_stdio_printf("MICHEAL SUCKS!!!\r\n");
    c250:	4630      	mov	r0, r6
        if( pin14Val == 0 ){ break; }
    c252:	2c00      	cmp	r4, #0
    c254:	d1f3      	bne.n	c23e <main+0x9e>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c256:	4b16      	ldr	r3, [pc, #88]	; (c2b0 <main+0x110>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c25c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c260:	2020      	movs	r0, #32
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c262:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    c266:	601d      	str	r5, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c268:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c26a:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c26c:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c26e:	f001 faaf 	bl	d7d0 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c272:	2001      	movs	r0, #1
    c274:	f003 f932 	bl	f4dc <am_hal_sysctrl_sleep>
}
    c278:	4620      	mov	r0, r4
    c27a:	b002      	add	sp, #8
    c27c:	bd70      	pop	{r4, r5, r6, pc}
    c27e:	bf00      	nop
    c280:	00010304 	.word	0x00010304
    c284:	00010060 	.word	0x00010060
    c288:	00010478 	.word	0x00010478
    c28c:	00010308 	.word	0x00010308
    c290:	40010094 	.word	0x40010094
    c294:	0000ffb4 	.word	0x0000ffb4
    c298:	0000ffd0 	.word	0x0000ffd0
    c29c:	0000ffdc 	.word	0x0000ffdc
    c2a0:	0000ffe8 	.word	0x0000ffe8
    c2a4:	00010000 	.word	0x00010000
    c2a8:	0001002c 	.word	0x0001002c
    c2ac:	0001003c 	.word	0x0001003c
    c2b0:	4001009c 	.word	0x4001009c

0000c2b4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c2b4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c2b6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c2ba:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c2bc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c2c0:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c2c4:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c2c8:	f000 f806 	bl	c2d8 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c2cc:	bd01      	pop	{r0, pc}
    c2ce:	bf00      	nop

0000c2d0 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c2d0:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c2d2:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c2d4:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c2d6:	4770      	bx	lr

0000c2d8 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c2d8:	b500      	push	{lr}
    c2da:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2dc:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2de:	4a2e      	ldr	r2, [pc, #184]	; (c398 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c2e0:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c2e2:	9301      	str	r3, [sp, #4]
    c2e4:	9300      	str	r3, [sp, #0]
    c2e6:	9302      	str	r3, [sp, #8]
    c2e8:	9303      	str	r3, [sp, #12]
    c2ea:	9304      	str	r3, [sp, #16]
    c2ec:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c2ee:	6813      	ldr	r3, [r2, #0]
    c2f0:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2f4:	b2db      	uxtb	r3, r3
    c2f6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c2fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c2fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c300:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c304:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c306:	0c1b      	lsrs	r3, r3, #16
    c308:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c30c:	6913      	ldr	r3, [r2, #16]
    c30e:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c310:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c314:	0792      	lsls	r2, r2, #30
{
    c316:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c318:	d437      	bmi.n	c38a <am_util_faultisr_collect_data+0xb2>
    c31a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c31e:	4619      	mov	r1, r3
    c320:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c322:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c324:	f7ff ffd4 	bl	c2d0 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c328:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c32a:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c32c:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c32e:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c330:	f7ff ffce 	bl	c2d0 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c334:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c336:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c338:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c33a:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c33c:	f7ff ffc8 	bl	c2d0 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c340:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c342:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c344:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c346:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c348:	f7ff ffc2 	bl	c2d0 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c34c:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c34e:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c350:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c352:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c354:	f7ff ffbc 	bl	c2d0 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c358:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c35a:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c35c:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c35e:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c360:	f7ff ffb6 	bl	c2d0 <getStackedReg>
    c364:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c366:	4619      	mov	r1, r3
    c368:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c36a:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c36c:	f7ff ffb0 	bl	c2d0 <getStackedReg>
    c370:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c372:	4619      	mov	r1, r3
    c374:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c376:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c378:	f7ff ffaa 	bl	c2d0 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c37c:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c37e:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c380:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c382:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c384:	f002 ff3a 	bl	f1fc <am_hal_mcuctrl_info_get>
    c388:	e7fe      	b.n	c388 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c38a:	4601      	mov	r1, r0
    c38c:	2006      	movs	r0, #6
    c38e:	f7ff ff9f 	bl	c2d0 <getStackedReg>
    c392:	4602      	mov	r2, r0
    c394:	e7c3      	b.n	c31e <am_util_faultisr_collect_data+0x46>
    c396:	bf00      	nop
    c398:	e000ed28 	.word	0xe000ed28

0000c39c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3a0:	b095      	sub	sp, #84	; 0x54
    c3a2:	ae0d      	add	r6, sp, #52	; 0x34
    c3a4:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c3a6:	2001      	movs	r0, #1
{
    c3a8:	460d      	mov	r5, r1
    c3aa:	4696      	mov	lr, r2
    c3ac:	4637      	mov	r7, r6
    c3ae:	4684      	mov	ip, r0
    c3b0:	e008      	b.n	c3c4 <uint64_to_str+0x28>
        tbuf[ix++] = uMod + '0';
    c3b2:	703a      	strb	r2, [r7, #0]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c3b4:	461c      	mov	r4, r3
    c3b6:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	f000 8087 	beq.w	c4cc <uint64_to_str+0x130>
    c3be:	f10c 0c01 	add.w	ip, ip, #1
    c3c2:	3701      	adds	r7, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c3c4:	08a3      	lsrs	r3, r4, #2
    c3c6:	eb03 0354 	add.w	r3, r3, r4, lsr #1
        q32 += (q32 >> 4);
    c3ca:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c3ce:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c3d2:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c3d6:	08da      	lsrs	r2, r3, #3
        r32 = ui32Val - q32*10;
    c3d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c3dc:	1da3      	adds	r3, r4, #6
    c3de:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    c3e2:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
    c3e6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c3ea:	46aa      	mov	sl, r5
    c3ec:	f04f 0b00 	mov.w	fp, #0
        uMod = ui64Val - (u64Tmp * 10);
    c3f0:	eba4 0241 	sub.w	r2, r4, r1, lsl #1
    if ( ui64Val >> 32 )
    c3f4:	ea5a 010b 	orrs.w	r1, sl, fp
        tbuf[ix++] = uMod + '0';
    c3f8:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c3fc:	d0d9      	beq.n	c3b2 <uint64_to_str+0x16>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c3fe:	08a3      	lsrs	r3, r4, #2
    c400:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
    c404:	9306      	str	r3, [sp, #24]
    c406:	08ab      	lsrs	r3, r5, #2
    c408:	9307      	str	r3, [sp, #28]
    c40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c40e:	086b      	lsrs	r3, r5, #1
    c410:	ea4f 0234 	mov.w	r2, r4, rrx
    c414:	1880      	adds	r0, r0, r2
    c416:	4159      	adcs	r1, r3
    c418:	460b      	mov	r3, r1
        q64 += (q64 >> 4);
    c41a:	0901      	lsrs	r1, r0, #4
    c41c:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    c420:	9100      	str	r1, [sp, #0]
    c422:	0919      	lsrs	r1, r3, #4
    c424:	9101      	str	r1, [sp, #4]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c426:	4602      	mov	r2, r0
        q64 += (q64 >> 4);
    c428:	e9dd 0100 	ldrd	r0, r1, [sp]
    c42c:	1880      	adds	r0, r0, r2
    c42e:	4159      	adcs	r1, r3
    c430:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    c432:	0a01      	lsrs	r1, r0, #8
    c434:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c438:	9102      	str	r1, [sp, #8]
    c43a:	0a19      	lsrs	r1, r3, #8
    c43c:	9103      	str	r1, [sp, #12]
        q64 += (q64 >> 4);
    c43e:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    c440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c444:	1880      	adds	r0, r0, r2
    c446:	4159      	adcs	r1, r3
    c448:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c44a:	0c01      	lsrs	r1, r0, #16
    c44c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c450:	9104      	str	r1, [sp, #16]
    c452:	0c19      	lsrs	r1, r3, #16
    c454:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    c456:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c458:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c45c:	1880      	adds	r0, r0, r2
    c45e:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c460:	910a      	str	r1, [sp, #40]	; 0x28
    c462:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        q64 += (q64 >> 16);
    c466:	4602      	mov	r2, r0
    c468:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c46a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c46e:	1880      	adds	r0, r0, r2
    c470:	4159      	adcs	r1, r3
        q64 >>= 3;
    c472:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c476:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c47a:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        r64 = ui64Val - q64*10;
    c47e:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c482:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c486:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c48a:	eb12 0208 	adds.w	r2, r2, r8
    c48e:	eb43 0309 	adc.w	r3, r3, r9
    c492:	1892      	adds	r2, r2, r2
    c494:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    c496:	1da0      	adds	r0, r4, #6
    c498:	f145 0100 	adc.w	r1, r5, #0
    c49c:	1a82      	subs	r2, r0, r2
    c49e:	eb61 0303 	sbc.w	r3, r1, r3
    c4a2:	0911      	lsrs	r1, r2, #4
    c4a4:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    c4a8:	091b      	lsrs	r3, r3, #4
    c4aa:	9108      	str	r1, [sp, #32]
    c4ac:	9309      	str	r3, [sp, #36]	; 0x24
    c4ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    c4b2:	eb12 0208 	adds.w	r2, r2, r8
        uMod = ui64Val - (u64Tmp * 10);
    c4b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    c4ba:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c4be:	eb43 0309 	adc.w	r3, r3, r9
        tbuf[ix++] = uMod + '0';
    c4c2:	3130      	adds	r1, #48	; 0x30
    c4c4:	7039      	strb	r1, [r7, #0]
    c4c6:	4614      	mov	r4, r2
    c4c8:	461d      	mov	r5, r3
    c4ca:	e778      	b.n	c3be <uint64_to_str+0x22>
    c4cc:	4660      	mov	r0, ip
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c4ce:	f1be 0f00 	cmp.w	lr, #0
    c4d2:	d00b      	beq.n	c4ec <uint64_to_str+0x150>
    c4d4:	1833      	adds	r3, r6, r0
    c4d6:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c4da:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c4de:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c4e2:	429e      	cmp	r6, r3
    c4e4:	d1f9      	bne.n	c4da <uint64_to_str+0x13e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c4e6:	2300      	movs	r3, #0
    c4e8:	f80e 3000 	strb.w	r3, [lr, r0]
    }

    return iNumDig;
}
    c4ec:	b015      	add	sp, #84	; 0x54
    c4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4f2:	bf00      	nop

0000c4f4 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c4f4:	4b01      	ldr	r3, [pc, #4]	; (c4fc <am_util_stdio_printf_init+0x8>)
    c4f6:	6018      	str	r0, [r3, #0]
    c4f8:	4770      	bx	lr
    c4fa:	bf00      	nop
    c4fc:	100012f4 	.word	0x100012f4

0000c500 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c504:	b0b1      	sub	sp, #196	; 0xc4
    c506:	4683      	mov	fp, r0
    c508:	9211      	str	r2, [sp, #68]	; 0x44
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c50a:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c50e:	780b      	ldrb	r3, [r1, #0]
    c510:	b183      	cbz	r3, c534 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c512:	2b25      	cmp	r3, #37	; 0x25
    c514:	d017      	beq.n	c546 <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c516:	f1bb 0f00 	cmp.w	fp, #0
    c51a:	d005      	beq.n	c528 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c51c:	2b0a      	cmp	r3, #10
    c51e:	d037      	beq.n	c590 <am_util_stdio_vsprintf+0x90>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c520:	f88b 3000 	strb.w	r3, [fp]
    c524:	f10b 0b01 	add.w	fp, fp, #1
            }

            ++pcFmt;
    c528:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    c52a:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    c52c:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    c530:	2b00      	cmp	r3, #0
    c532:	d1ee      	bne.n	c512 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c534:	f1bb 0f00 	cmp.w	fp, #0
    c538:	d001      	beq.n	c53e <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    c53a:	f88b 3000 	strb.w	r3, [fp]
    }

    return (ui32CharCnt);
}
    c53e:	4648      	mov	r0, r9
    c540:	b031      	add	sp, #196	; 0xc4
    c542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c546:	784a      	ldrb	r2, [r1, #1]
    c548:	2a30      	cmp	r2, #48	; 0x30
    c54a:	d039      	beq.n	c5c0 <am_util_stdio_vsprintf+0xc0>
        ++pcFmt;
    c54c:	1c4c      	adds	r4, r1, #1
        ui8PadChar = ' ';
    c54e:	2620      	movs	r6, #32
    if ( *pcStr == '-')
    c550:	2a2d      	cmp	r2, #45	; 0x2d
    c552:	d02a      	beq.n	c5aa <am_util_stdio_vsprintf+0xaa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c554:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c558:	2b09      	cmp	r3, #9
    c55a:	d835      	bhi.n	c5c8 <am_util_stdio_vsprintf+0xc8>
    uint32_t ui32Val = 0, uCnt = 0;
    c55c:	2100      	movs	r1, #0
    bool bNeg = false;
    c55e:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c560:	4620      	mov	r0, r4
        bNeg = true;
    c562:	2300      	movs	r3, #0
        ui32Val *= 10;
    c564:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    c568:	eb02 0543 	add.w	r5, r2, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c56c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    c570:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    c574:	2f09      	cmp	r7, #9
        ++uCnt;
    c576:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    c57a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c57e:	d9f1      	bls.n	c564 <am_util_stdio_vsprintf+0x64>
    c580:	440c      	add	r4, r1
    return bNeg ? -ui32Val : ui32Val;
    c582:	f1be 0f00 	cmp.w	lr, #0
    c586:	f040 858d 	bne.w	d0a4 <am_util_stdio_vsprintf+0xba4>
    c58a:	461d      	mov	r5, r3
    c58c:	7822      	ldrb	r2, [r4, #0]
    c58e:	e01d      	b.n	c5cc <am_util_stdio_vsprintf+0xcc>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c590:	4a89      	ldr	r2, [pc, #548]	; (c7b8 <am_util_stdio_vsprintf+0x2b8>)
    c592:	7812      	ldrb	r2, [r2, #0]
    c594:	2a00      	cmp	r2, #0
    c596:	d0c3      	beq.n	c520 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    c598:	230d      	movs	r3, #13
    c59a:	f88b 3000 	strb.w	r3, [fp]
    c59e:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    c5a0:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    c5a4:	f10b 0b01 	add.w	fp, fp, #1
    c5a8:	e7ba      	b.n	c520 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5aa:	7862      	ldrb	r2, [r4, #1]
    c5ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c5b0:	2b09      	cmp	r3, #9
        pcStr++;
    c5b2:	f104 0001 	add.w	r0, r4, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5b6:	f200 8463 	bhi.w	ce80 <am_util_stdio_vsprintf+0x980>
        uCnt++;
    c5ba:	2101      	movs	r1, #1
        bNeg = true;
    c5bc:	468e      	mov	lr, r1
    c5be:	e7d0      	b.n	c562 <am_util_stdio_vsprintf+0x62>
    c5c0:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    c5c2:	1c8c      	adds	r4, r1, #2
            ui8PadChar = '0';
    c5c4:	2630      	movs	r6, #48	; 0x30
    c5c6:	e7c3      	b.n	c550 <am_util_stdio_vsprintf+0x50>
    c5c8:	7822      	ldrb	r2, [r4, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c5ca:	2500      	movs	r5, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    c5cc:	2a73      	cmp	r2, #115	; 0x73
    c5ce:	f000 82df 	beq.w	cb90 <am_util_stdio_vsprintf+0x690>
    c5d2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
        if (*pcFmt == '.')
    c5d6:	2a2e      	cmp	r2, #46	; 0x2e
    c5d8:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
    c5dc:	f000 8289 	beq.w	caf2 <am_util_stdio_vsprintf+0x5f2>
        iPrecision = 6;             // printf() default precision for %f is 6
    c5e0:	f04f 0806 	mov.w	r8, #6
        if ( *pcFmt == 'l' )
    c5e4:	2a6c      	cmp	r2, #108	; 0x6c
    c5e6:	f000 827e 	beq.w	cae6 <am_util_stdio_vsprintf+0x5e6>
        switch ( *pcFmt )
    c5ea:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    c5ee:	2b32      	cmp	r3, #50	; 0x32
    c5f0:	f200 826f 	bhi.w	cad2 <am_util_stdio_vsprintf+0x5d2>
    c5f4:	e8df f013 	tbh	[pc, r3, lsl #1]
    c5f8:	026d0088 	.word	0x026d0088
    c5fc:	026d026d 	.word	0x026d026d
    c600:	026d026d 	.word	0x026d026d
    c604:	026d026d 	.word	0x026d026d
    c608:	026d026d 	.word	0x026d026d
    c60c:	026d026d 	.word	0x026d026d
    c610:	026d026d 	.word	0x026d026d
    c614:	026d026d 	.word	0x026d026d
    c618:	026d026d 	.word	0x026d026d
    c61c:	026d0033 	.word	0x026d0033
    c620:	026d026d 	.word	0x026d026d
    c624:	026d026d 	.word	0x026d026d
    c628:	026d026d 	.word	0x026d026d
    c62c:	026d026d 	.word	0x026d026d
    c630:	00a8026d 	.word	0x00a8026d
    c634:	026d00b7 	.word	0x026d00b7
    c638:	026d0088 	.word	0x026d0088
    c63c:	00b7026d 	.word	0x00b7026d
    c640:	026d026d 	.word	0x026d026d
    c644:	026d026d 	.word	0x026d026d
    c648:	026d026d 	.word	0x026d026d
    c64c:	026d026d 	.word	0x026d026d
    c650:	02cb026d 	.word	0x02cb026d
    c654:	01a4026d 	.word	0x01a4026d
    c658:	026d026d 	.word	0x026d026d
    c65c:	01a1      	.short	0x01a1
        bLower = bLongLong = false;
    c65e:	f04f 0800 	mov.w	r8, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c662:	9911      	ldr	r1, [sp, #68]	; 0x44
    c664:	460b      	mov	r3, r1
                                      va_arg(pArgs, uint32_t);
    c666:	3304      	adds	r3, #4
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c668:	680a      	ldr	r2, [r1, #0]
                                      va_arg(pArgs, uint32_t);
    c66a:	9311      	str	r3, [sp, #68]	; 0x44
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c66c:	2300      	movs	r3, #0
                if ( iWidth )
    c66e:	b365      	cbz	r5, c6ca <am_util_stdio_vsprintf+0x1ca>
    int iDigits = ui64Val ? 0 : 1;
    c670:	ea52 0103 	orrs.w	r1, r2, r3
    c674:	bf0c      	ite	eq
    c676:	f04f 0e01 	moveq.w	lr, #1
    c67a:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    c67e:	ea52 0103 	orrs.w	r1, r2, r3
    c682:	d00d      	beq.n	c6a0 <am_util_stdio_vsprintf+0x1a0>
    c684:	4610      	mov	r0, r2
    c686:	4619      	mov	r1, r3
        ui64Val >>= 4;
    c688:	0905      	lsrs	r5, r0, #4
    c68a:	ea45 7501 	orr.w	r5, r5, r1, lsl #28
    c68e:	ea4f 1c11 	mov.w	ip, r1, lsr #4
    c692:	4628      	mov	r0, r5
    c694:	4661      	mov	r1, ip
    while ( ui64Val )
    c696:	ea50 0501 	orrs.w	r5, r0, r1
        ++iDigits;
    c69a:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c69e:	d1f3      	bne.n	c688 <am_util_stdio_vsprintf+0x188>
                    iWidth -= ndigits_in_hex(ui64Val);
    c6a0:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    c6a4:	2f00      	cmp	r7, #0
    c6a6:	f340 838e 	ble.w	cdc6 <am_util_stdio_vsprintf+0x8c6>
    while ( i32NumChars-- )
    c6aa:	1e79      	subs	r1, r7, #1
        if ( pcBuf )
    c6ac:	f1bb 0f00 	cmp.w	fp, #0
    c6b0:	f000 838a 	beq.w	cdc8 <am_util_stdio_vsprintf+0x8c8>
    c6b4:	4658      	mov	r0, fp
            *pcBuf++ = cPadChar;
    c6b6:	f800 6b01 	strb.w	r6, [r0], #1
    while ( i32NumChars-- )
    c6ba:	3901      	subs	r1, #1
    c6bc:	1c4f      	adds	r7, r1, #1
    c6be:	eba0 050b 	sub.w	r5, r0, fp
    c6c2:	d1f8      	bne.n	c6b6 <am_util_stdio_vsprintf+0x1b6>
    c6c4:	462f      	mov	r7, r5
                    pcBuf += pcBuf ? iWidth : 0;
    c6c6:	44ab      	add	fp, r5
                    ui32CharCnt += iWidth;
    c6c8:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    c6ca:	ea52 0103 	orrs.w	r1, r2, r3
    c6ce:	f040 8234 	bne.w	cb3a <am_util_stdio_vsprintf+0x63a>
        tbuf[ix++] = '0';   // Print a '0'
    c6d2:	f04f 0330 	mov.w	r3, #48	; 0x30
    c6d6:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if (pcBuf)
    c6da:	2501      	movs	r5, #1
    c6dc:	f1bb 0f00 	cmp.w	fp, #0
    c6e0:	f000 8251 	beq.w	cb86 <am_util_stdio_vsprintf+0x686>
    c6e4:	4629      	mov	r1, r5
        while (ix--)
    c6e6:	2600      	movs	r6, #0
    c6e8:	af2b      	add	r7, sp, #172	; 0xac
    c6ea:	187b      	adds	r3, r7, r1
    c6ec:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
            *pcBuf++ = tbuf[ix];
    c6f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c6f4:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    c6f8:	42bb      	cmp	r3, r7
    c6fa:	d1f9      	bne.n	c6f0 <am_util_stdio_vsprintf+0x1f0>
        *pcBuf = 0;
    c6fc:	445e      	add	r6, fp
    c6fe:	2300      	movs	r3, #0
                    pcBuf += iVal;
    c700:	44ab      	add	fp, r5
        *pcBuf = 0;
    c702:	7073      	strb	r3, [r6, #1]
                ui32CharCnt += iVal;
    c704:	44a9      	add	r9, r5
                break;
    c706:	e01d      	b.n	c744 <am_util_stdio_vsprintf+0x244>
                if ( pcBuf )
    c708:	f1bb 0f00 	cmp.w	fp, #0
    c70c:	d01a      	beq.n	c744 <am_util_stdio_vsprintf+0x244>
                    float fValue = va_arg(pArgs, double);
    c70e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c710:	3307      	adds	r3, #7
    c712:	f023 0307 	bic.w	r3, r3, #7
    c716:	e9d3 0100 	ldrd	r0, r1, [r3]
    c71a:	3308      	adds	r3, #8
    c71c:	9311      	str	r3, [sp, #68]	; 0x44
    c71e:	f7ff fcef 	bl	c100 <__aeabi_d2f>
    c722:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    c726:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    c72a:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    c72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    c730:	f8cb 3000 	str.w	r3, [fp]
    if (fValue == 0.0f)
    c734:	f040 8367 	bne.w	ce06 <am_util_stdio_vsprintf+0x906>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    c738:	4b20      	ldr	r3, [pc, #128]	; (c7bc <am_util_stdio_vsprintf+0x2bc>)
    c73a:	f8cb 3000 	str.w	r3, [fp]
    c73e:	2103      	movs	r1, #3
                    ui32CharCnt += iVal;
    c740:	4489      	add	r9, r1
                    pcBuf += iVal;
    c742:	448b      	add	fp, r1
        ++pcFmt;
    c744:	1c61      	adds	r1, r4, #1
    c746:	e6e2      	b.n	c50e <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c748:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c74a:	4613      	mov	r3, r2
    c74c:	3304      	adds	r3, #4
    c74e:	7812      	ldrb	r2, [r2, #0]
                if ( pcBuf )
    c750:	f1bb 0f00 	cmp.w	fp, #0
    c754:	d003      	beq.n	c75e <am_util_stdio_vsprintf+0x25e>
                    *pcBuf++ = ui8CharSpecifier;
    c756:	f88b 2000 	strb.w	r2, [fp]
    c75a:	f10b 0b01 	add.w	fp, fp, #1
                ++ui32CharCnt;
    c75e:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    c762:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    c764:	e7ee      	b.n	c744 <am_util_stdio_vsprintf+0x244>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c766:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c768:	4613      	mov	r3, r2
    c76a:	6810      	ldr	r0, [r2, #0]
                                     va_arg(pArgs, int32_t);
    c76c:	3304      	adds	r3, #4
    c76e:	9311      	str	r3, [sp, #68]	; 0x44
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    c770:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    c772:	2800      	cmp	r0, #0
    c774:	f171 0300 	sbcs.w	r3, r1, #0
    c778:	f2c0 8328 	blt.w	cdcc <am_util_stdio_vsprintf+0x8cc>
                    ui64Val = i64Val;
    c77c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
                if ( iWidth )
    c780:	2d00      	cmp	r5, #0
    c782:	f000 80ce 	beq.w	c922 <am_util_stdio_vsprintf+0x422>
    int iNDigits = ui64Val ? 0 : 1;
    c786:	4603      	mov	r3, r0
    c788:	430b      	orrs	r3, r1
    c78a:	bf0c      	ite	eq
    c78c:	2501      	moveq	r5, #1
    c78e:	2500      	movne	r5, #0
    return ndigits_in_u64((uint64_t) i64Val);
    c790:	460b      	mov	r3, r1
    while ( ui64Val )
    c792:	4301      	orrs	r1, r0
    return ndigits_in_u64((uint64_t) i64Val);
    c794:	4602      	mov	r2, r0
                    bNeg = false;
    c796:	bf18      	it	ne
    c798:	f04f 0a00 	movne.w	sl, #0
    while ( ui64Val )
    c79c:	f000 842d 	beq.w	cffa <am_util_stdio_vsprintf+0xafa>
                    bNeg = false;
    c7a0:	9420      	str	r4, [sp, #128]	; 0x80
    c7a2:	9621      	str	r6, [sp, #132]	; 0x84
    c7a4:	9722      	str	r7, [sp, #136]	; 0x88
    c7a6:	46ae      	mov	lr, r5
    c7a8:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
    c7ac:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    c7b0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
    c7b4:	e00b      	b.n	c7ce <am_util_stdio_vsprintf+0x2ce>
    c7b6:	bf00      	nop
    c7b8:	10001064 	.word	0x10001064
    c7bc:	00302e30 	.word	0x00302e30
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7c0:	4652      	mov	r2, sl
    c7c2:	2300      	movs	r3, #0
    while ( ui64Val )
    c7c4:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    c7c8:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c7cc:	d075      	beq.n	c8ba <am_util_stdio_vsprintf+0x3ba>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7ce:	0891      	lsrs	r1, r2, #2
    c7d0:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    c7d4:	910a      	str	r1, [sp, #40]	; 0x28
    c7d6:	0899      	lsrs	r1, r3, #2
    c7d8:	910b      	str	r1, [sp, #44]	; 0x2c
    c7da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    c7de:	0859      	lsrs	r1, r3, #1
    c7e0:	ea4f 0032 	mov.w	r0, r2, rrx
    c7e4:	1836      	adds	r6, r6, r0
    c7e6:	414f      	adcs	r7, r1
    c7e8:	4630      	mov	r0, r6
        q64 += (q64 >> 4);
    c7ea:	0936      	lsrs	r6, r6, #4
    c7ec:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    c7f0:	9604      	str	r6, [sp, #16]
    c7f2:	093e      	lsrs	r6, r7, #4
    c7f4:	9605      	str	r6, [sp, #20]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c7f6:	4639      	mov	r1, r7
        q64 += (q64 >> 4);
    c7f8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    c7fc:	1836      	adds	r6, r6, r0
    c7fe:	414f      	adcs	r7, r1
    c800:	4630      	mov	r0, r6
        q64 += (q64 >> 8);
    c802:	0a36      	lsrs	r6, r6, #8
    c804:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    c808:	9606      	str	r6, [sp, #24]
    c80a:	0a3e      	lsrs	r6, r7, #8
    c80c:	9607      	str	r6, [sp, #28]
        q64 += (q64 >> 4);
    c80e:	4639      	mov	r1, r7
        q64 += (q64 >> 8);
    c810:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    c814:	1836      	adds	r6, r6, r0
    c816:	414f      	adcs	r7, r1
        q64 += (q64 >> 16);
    c818:	ea4f 4816 	mov.w	r8, r6, lsr #16
    c81c:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
    c820:	eb16 0008 	adds.w	r0, r6, r8
    c824:	ea4f 4917 	mov.w	r9, r7, lsr #16
    c828:	eb47 0109 	adc.w	r1, r7, r9
        q64 += (q64 >> 32);
    c82c:	2600      	movs	r6, #0
    c82e:	910e      	str	r1, [sp, #56]	; 0x38
    c830:	960f      	str	r6, [sp, #60]	; 0x3c
    c832:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c836:	ea4f 0c92 	mov.w	ip, r2, lsr #2
        q64 += (q64 >> 32);
    c83a:	1836      	adds	r6, r6, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c83c:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
        q64 >>= 3;
    c840:	ea4f 04d6 	mov.w	r4, r6, lsr #3
        q32 += (q32 >> 4);
    c844:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
    if ( ui64Val >> 32 )
    c848:	f04f 0600 	mov.w	r6, #0
        q64 += (q64 >> 32);
    c84c:	414f      	adcs	r7, r1
    if ( ui64Val >> 32 )
    c84e:	9314      	str	r3, [sp, #80]	; 0x50
        q32 += (q32 >> 8);
    c850:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    if ( ui64Val >> 32 )
    c854:	9615      	str	r6, [sp, #84]	; 0x54
        q64 >>= 3;
    c856:	ea44 7447 	orr.w	r4, r4, r7, lsl #29
    c85a:	08fd      	lsrs	r5, r7, #3
        q32 += (q32 >> 16);
    c85c:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
    c860:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c864:	ea4f 0b85 	mov.w	fp, r5, lsl #2
        q32 >>= 3;
    c868:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c86c:	f102 0a06 	add.w	sl, r2, #6
        r64 = ui64Val - q64*10;
    c870:	ea4b 7194 	orr.w	r1, fp, r4, lsr #30
        r32 = ui32Val - q32*10;
    c874:	eb0c 0b8c 	add.w	fp, ip, ip, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c878:	ebaa 0a4b 	sub.w	sl, sl, fp, lsl #1
    c87c:	433e      	orrs	r6, r7
        r64 = ui64Val - q64*10;
    c87e:	ea4f 0084 	mov.w	r0, r4, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c882:	eb0c 1a1a 	add.w	sl, ip, sl, lsr #4
    c886:	d09b      	beq.n	c7c0 <am_util_stdio_vsprintf+0x2c0>
        r64 = ui64Val - q64*10;
    c888:	1900      	adds	r0, r0, r4
    c88a:	4169      	adcs	r1, r5
    c88c:	1800      	adds	r0, r0, r0
    c88e:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    c890:	3206      	adds	r2, #6
    c892:	f143 0300 	adc.w	r3, r3, #0
    c896:	1a12      	subs	r2, r2, r0
    c898:	eb63 0301 	sbc.w	r3, r3, r1
    c89c:	0911      	lsrs	r1, r2, #4
    c89e:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    c8a2:	091b      	lsrs	r3, r3, #4
    c8a4:	9118      	str	r1, [sp, #96]	; 0x60
    c8a6:	9319      	str	r3, [sp, #100]	; 0x64
    c8a8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    c8ac:	1912      	adds	r2, r2, r4
    c8ae:	416b      	adcs	r3, r5
    while ( ui64Val )
    c8b0:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    c8b4:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c8b8:	d189      	bne.n	c7ce <am_util_stdio_vsprintf+0x2ce>
    c8ba:	9f22      	ldr	r7, [sp, #136]	; 0x88
    c8bc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
    c8c0:	9e21      	ldr	r6, [sp, #132]	; 0x84
    c8c2:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
    c8c6:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
    c8ca:	4675      	mov	r5, lr
    c8cc:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
    c8d0:	9c20      	ldr	r4, [sp, #128]	; 0x80
    c8d2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_i64(ui64Val);
    c8d6:	1b7d      	subs	r5, r7, r5
                    if ( bNeg )
    c8d8:	f1ba 0f00 	cmp.w	sl, #0
    c8dc:	d007      	beq.n	c8ee <am_util_stdio_vsprintf+0x3ee>
                        if ( ui8PadChar == '0' )
    c8de:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    c8e0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
    c8e4:	f000 836e 	beq.w	cfc4 <am_util_stdio_vsprintf+0xac4>
                        --iWidth;
    c8e8:	461d      	mov	r5, r3
    c8ea:	f04f 0a01 	mov.w	sl, #1
    if ( i32NumChars <= 0 )
    c8ee:	2d00      	cmp	r5, #0
    c8f0:	f340 837e 	ble.w	cff0 <am_util_stdio_vsprintf+0xaf0>
    while ( i32NumChars-- )
    c8f4:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    c8f6:	f1bb 0f00 	cmp.w	fp, #0
    c8fa:	f000 8252 	beq.w	cda2 <am_util_stdio_vsprintf+0x8a2>
    c8fe:	1eaa      	subs	r2, r5, #2
    c900:	465b      	mov	r3, fp
    c902:	e000      	b.n	c906 <am_util_stdio_vsprintf+0x406>
    c904:	3a01      	subs	r2, #1
            *pcBuf++ = cPadChar;
    c906:	f803 6b01 	strb.w	r6, [r3], #1
    while ( i32NumChars-- )
    c90a:	1c50      	adds	r0, r2, #1
    c90c:	eba3 010b 	sub.w	r1, r3, fp
    c910:	d1f8      	bne.n	c904 <am_util_stdio_vsprintf+0x404>
    c912:	448b      	add	fp, r1
                    ui32CharCnt += iWidth;
    c914:	4489      	add	r9, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    c916:	f1ba 0f00 	cmp.w	sl, #0
    c91a:	d002      	beq.n	c922 <am_util_stdio_vsprintf+0x422>
    c91c:	2e20      	cmp	r6, #32
    c91e:	f000 831b 	beq.w	cf58 <am_util_stdio_vsprintf+0xa58>
                iVal = uint64_to_str(ui64Val, pcBuf);
    c922:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    c926:	465a      	mov	r2, fp
    c928:	f7ff fd38 	bl	c39c <uint64_to_str>
                if ( pcBuf )
    c92c:	f1bb 0f00 	cmp.w	fp, #0
    c930:	f000 8245 	beq.w	cdbe <am_util_stdio_vsprintf+0x8be>
                    pcBuf += iVal;
    c934:	4483      	add	fp, r0
                ui32CharCnt += iVal;
    c936:	4481      	add	r9, r0
                break;
    c938:	e704      	b.n	c744 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    c93a:	f04f 0801 	mov.w	r8, #1
    c93e:	e690      	b.n	c662 <am_util_stdio_vsprintf+0x162>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c940:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c942:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    c944:	3204      	adds	r2, #4
    c946:	9211      	str	r2, [sp, #68]	; 0x44
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    c948:	4619      	mov	r1, r3
    c94a:	2200      	movs	r2, #0
    c94c:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
                if ( iWidth )
    c950:	2d00      	cmp	r5, #0
    c952:	f000 80b3 	beq.w	cabc <am_util_stdio_vsprintf+0x5bc>
    int iNDigits = ui64Val ? 0 : 1;
    c956:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    c95a:	4603      	mov	r3, r0
    c95c:	430b      	orrs	r3, r1
    while ( ui64Val )
    c95e:	4602      	mov	r2, r0
    c960:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    c962:	bf0c      	ite	eq
    c964:	2501      	moveq	r5, #1
    c966:	2500      	movne	r5, #0
    while ( ui64Val )
    c968:	ea52 0103 	orrs.w	r1, r2, r3
    c96c:	f000 8092 	beq.w	ca94 <am_util_stdio_vsprintf+0x594>
    c970:	9420      	str	r4, [sp, #128]	; 0x80
    c972:	9621      	str	r6, [sp, #132]	; 0x84
    c974:	9722      	str	r7, [sp, #136]	; 0x88
    c976:	46ae      	mov	lr, r5
    c978:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    c97c:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    c980:	e006      	b.n	c990 <am_util_stdio_vsprintf+0x490>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c982:	4652      	mov	r2, sl
    c984:	2300      	movs	r3, #0
    while ( ui64Val )
    c986:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    c98a:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    c98e:	d075      	beq.n	ca7c <am_util_stdio_vsprintf+0x57c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c990:	0891      	lsrs	r1, r2, #2
    c992:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    c996:	9108      	str	r1, [sp, #32]
    c998:	0899      	lsrs	r1, r3, #2
    c99a:	9109      	str	r1, [sp, #36]	; 0x24
    c99c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    c9a0:	0859      	lsrs	r1, r3, #1
    c9a2:	ea4f 0032 	mov.w	r0, r2, rrx
    c9a6:	1836      	adds	r6, r6, r0
    c9a8:	414f      	adcs	r7, r1
    c9aa:	4630      	mov	r0, r6
        q64 += (q64 >> 4);
    c9ac:	0936      	lsrs	r6, r6, #4
    c9ae:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    c9b2:	9600      	str	r6, [sp, #0]
    c9b4:	093e      	lsrs	r6, r7, #4
    c9b6:	9601      	str	r6, [sp, #4]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c9b8:	4639      	mov	r1, r7
        q64 += (q64 >> 4);
    c9ba:	e9dd 6700 	ldrd	r6, r7, [sp]
    c9be:	1836      	adds	r6, r6, r0
    c9c0:	414f      	adcs	r7, r1
    c9c2:	4630      	mov	r0, r6
        q64 += (q64 >> 8);
    c9c4:	0a36      	lsrs	r6, r6, #8
    c9c6:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    c9ca:	9602      	str	r6, [sp, #8]
    c9cc:	0a3e      	lsrs	r6, r7, #8
    c9ce:	9603      	str	r6, [sp, #12]
        q64 += (q64 >> 4);
    c9d0:	4639      	mov	r1, r7
        q64 += (q64 >> 8);
    c9d2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c9d6:	1836      	adds	r6, r6, r0
    c9d8:	414f      	adcs	r7, r1
        q64 += (q64 >> 16);
    c9da:	ea4f 4816 	mov.w	r8, r6, lsr #16
    c9de:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
    c9e2:	eb16 0008 	adds.w	r0, r6, r8
    c9e6:	ea4f 4917 	mov.w	r9, r7, lsr #16
    c9ea:	eb47 0109 	adc.w	r1, r7, r9
        q64 += (q64 >> 32);
    c9ee:	2600      	movs	r6, #0
    c9f0:	910c      	str	r1, [sp, #48]	; 0x30
    c9f2:	960d      	str	r6, [sp, #52]	; 0x34
    c9f4:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c9f8:	ea4f 0c92 	mov.w	ip, r2, lsr #2
        q64 += (q64 >> 32);
    c9fc:	1836      	adds	r6, r6, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c9fe:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
        q64 >>= 3;
    ca02:	ea4f 04d6 	mov.w	r4, r6, lsr #3
        q32 += (q32 >> 4);
    ca06:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
    if ( ui64Val >> 32 )
    ca0a:	f04f 0600 	mov.w	r6, #0
        q64 += (q64 >> 32);
    ca0e:	414f      	adcs	r7, r1
    if ( ui64Val >> 32 )
    ca10:	9312      	str	r3, [sp, #72]	; 0x48
        q32 += (q32 >> 8);
    ca12:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    if ( ui64Val >> 32 )
    ca16:	9613      	str	r6, [sp, #76]	; 0x4c
        q64 >>= 3;
    ca18:	ea44 7447 	orr.w	r4, r4, r7, lsl #29
    ca1c:	08fd      	lsrs	r5, r7, #3
        q32 += (q32 >> 16);
    ca1e:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
    ca22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    ca26:	ea4f 0b85 	mov.w	fp, r5, lsl #2
        q32 >>= 3;
    ca2a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca2e:	f102 0a06 	add.w	sl, r2, #6
        r64 = ui64Val - q64*10;
    ca32:	ea4b 7194 	orr.w	r1, fp, r4, lsr #30
        r32 = ui32Val - q32*10;
    ca36:	eb0c 0b8c 	add.w	fp, ip, ip, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca3a:	ebaa 0a4b 	sub.w	sl, sl, fp, lsl #1
    ca3e:	433e      	orrs	r6, r7
        r64 = ui64Val - q64*10;
    ca40:	ea4f 0084 	mov.w	r0, r4, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ca44:	eb0c 1a1a 	add.w	sl, ip, sl, lsr #4
    ca48:	d09b      	beq.n	c982 <am_util_stdio_vsprintf+0x482>
        r64 = ui64Val - q64*10;
    ca4a:	1900      	adds	r0, r0, r4
    ca4c:	4169      	adcs	r1, r5
    ca4e:	1800      	adds	r0, r0, r0
    ca50:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    ca52:	3206      	adds	r2, #6
    ca54:	f143 0300 	adc.w	r3, r3, #0
    ca58:	1a12      	subs	r2, r2, r0
    ca5a:	eb63 0301 	sbc.w	r3, r3, r1
    ca5e:	0911      	lsrs	r1, r2, #4
    ca60:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    ca64:	091b      	lsrs	r3, r3, #4
    ca66:	9116      	str	r1, [sp, #88]	; 0x58
    ca68:	9317      	str	r3, [sp, #92]	; 0x5c
    ca6a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    ca6e:	1912      	adds	r2, r2, r4
    ca70:	416b      	adcs	r3, r5
    while ( ui64Val )
    ca72:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    ca76:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    ca7a:	d189      	bne.n	c990 <am_util_stdio_vsprintf+0x490>
    ca7c:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
    ca80:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
    ca84:	9e21      	ldr	r6, [sp, #132]	; 0x84
    ca86:	9f22      	ldr	r7, [sp, #136]	; 0x88
    ca88:	9c20      	ldr	r4, [sp, #128]	; 0x80
    ca8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    ca8e:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    ca92:	4675      	mov	r5, lr
                    iWidth -= ndigits_in_u64(ui64Val);
    ca94:	1b7d      	subs	r5, r7, r5
    if ( i32NumChars <= 0 )
    ca96:	2d00      	cmp	r5, #0
    ca98:	f340 81ef 	ble.w	ce7a <am_util_stdio_vsprintf+0x97a>
    while ( i32NumChars-- )
    ca9c:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    ca9e:	f1bb 0f00 	cmp.w	fp, #0
    caa2:	f000 81eb 	beq.w	ce7c <am_util_stdio_vsprintf+0x97c>
    caa6:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    caa8:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    caac:	3b01      	subs	r3, #1
    caae:	1c5d      	adds	r5, r3, #1
    cab0:	eba2 010b 	sub.w	r1, r2, fp
    cab4:	d1f8      	bne.n	caa8 <am_util_stdio_vsprintf+0x5a8>
    cab6:	460d      	mov	r5, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cab8:	448b      	add	fp, r1
                    ui32CharCnt += iWidth;
    caba:	44a9      	add	r9, r5
                iVal = uint64_to_str(ui64Val, pcBuf);
    cabc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cac0:	465a      	mov	r2, fp
    cac2:	f7ff fc6b 	bl	c39c <uint64_to_str>
                if ( pcBuf )
    cac6:	f1bb 0f00 	cmp.w	fp, #0
    caca:	f43f af34 	beq.w	c936 <am_util_stdio_vsprintf+0x436>
                    pcBuf += iVal;
    cace:	4483      	add	fp, r0
    cad0:	e731      	b.n	c936 <am_util_stdio_vsprintf+0x436>
                if ( pcBuf )
    cad2:	f1bb 0f00 	cmp.w	fp, #0
    cad6:	d003      	beq.n	cae0 <am_util_stdio_vsprintf+0x5e0>
                    *pcBuf++ = *pcFmt;
    cad8:	f88b 2000 	strb.w	r2, [fp]
    cadc:	f10b 0b01 	add.w	fp, fp, #1
                ++ui32CharCnt;
    cae0:	f109 0901 	add.w	r9, r9, #1
                break;
    cae4:	e62e      	b.n	c744 <am_util_stdio_vsprintf+0x244>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cae6:	7862      	ldrb	r2, [r4, #1]
    cae8:	2a6c      	cmp	r2, #108	; 0x6c
    caea:	f000 80c3 	beq.w	cc74 <am_util_stdio_vsprintf+0x774>
            pcFmt++;
    caee:	3401      	adds	r4, #1
    caf0:	e57b      	b.n	c5ea <am_util_stdio_vsprintf+0xea>
    if ( *pcStr == '-')
    caf2:	7862      	ldrb	r2, [r4, #1]
    caf4:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    caf6:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    cafa:	f000 813f 	beq.w	cd7c <am_util_stdio_vsprintf+0x87c>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cafe:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cb02:	2b09      	cmp	r3, #9
    cb04:	f200 81c0 	bhi.w	ce88 <am_util_stdio_vsprintf+0x988>
    uint32_t ui32Val = 0, uCnt = 0;
    cb08:	2100      	movs	r1, #0
    bool bNeg = false;
    cb0a:	4688      	mov	r8, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb0c:	4664      	mov	r4, ip
    bool bNeg = false;
    cb0e:	2300      	movs	r3, #0
        ui32Val *= 10;
    cb10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    cb14:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb18:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    cb1c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    cb20:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    cb24:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    cb28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cb2c:	d9f0      	bls.n	cb10 <am_util_stdio_vsprintf+0x610>
    return bNeg ? -ui32Val : ui32Val;
    cb2e:	f1b8 0f00 	cmp.w	r8, #0
    cb32:	f040 82bc 	bne.w	d0ae <am_util_stdio_vsprintf+0xbae>
    cb36:	4698      	mov	r8, r3
    cb38:	e1a9      	b.n	ce8e <am_util_stdio_vsprintf+0x98e>
    cb3a:	f1b8 0f00 	cmp.w	r8, #0
    cb3e:	bf14      	ite	ne
    cb40:	f04f 0e27 	movne.w	lr, #39	; 0x27
    cb44:	f04f 0e07 	moveq.w	lr, #7
    cb48:	f10d 07ab 	add.w	r7, sp, #171	; 0xab
    if ( ui64Val == 0 )
    cb4c:	2600      	movs	r6, #0
    cb4e:	e000      	b.n	cb52 <am_util_stdio_vsprintf+0x652>
        tbuf[ix++] = cCh + '0';
    cb50:	460e      	mov	r6, r1
        cCh = ui64Val & 0xf;
    cb52:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cb56:	eb01 050e 	add.w	r5, r1, lr
        ui64Val >>= 4;
    cb5a:	0910      	lsrs	r0, r2, #4
        tbuf[ix++] = cCh + '0';
    cb5c:	2909      	cmp	r1, #9
    cb5e:	bf88      	it	hi
    cb60:	4629      	movhi	r1, r5
        ui64Val >>= 4;
    cb62:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    cb66:	091d      	lsrs	r5, r3, #4
    cb68:	4602      	mov	r2, r0
    cb6a:	462b      	mov	r3, r5
        tbuf[ix++] = cCh + '0';
    cb6c:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    cb6e:	ea52 0003 	orrs.w	r0, r2, r3
        tbuf[ix++] = cCh + '0';
    cb72:	f807 1f01 	strb.w	r1, [r7, #1]!
    cb76:	f106 0101 	add.w	r1, r6, #1
    while ( ui64Val )
    cb7a:	d1e9      	bne.n	cb50 <am_util_stdio_vsprintf+0x650>
    cb7c:	460d      	mov	r5, r1
    if (pcBuf)
    cb7e:	f1bb 0f00 	cmp.w	fp, #0
    cb82:	f47f adb1 	bne.w	c6e8 <am_util_stdio_vsprintf+0x1e8>
    cb86:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    cb8a:	44a9      	add	r9, r5
    cb8c:	e5da      	b.n	c744 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    cb8e:	463d      	mov	r5, r7
                pcStr = va_arg(pArgs, char *);
    cb90:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb92:	6817      	ldr	r7, [r2, #0]
    cb94:	1d10      	adds	r0, r2, #4
    if ( !pcBuf )
    cb96:	2f00      	cmp	r7, #0
    cb98:	d03b      	beq.n	cc12 <am_util_stdio_vsprintf+0x712>
    while ( *pcBuf++ )
    cb9a:	7839      	ldrb	r1, [r7, #0]
    cb9c:	1c7a      	adds	r2, r7, #1
    cb9e:	4613      	mov	r3, r2
    cba0:	2900      	cmp	r1, #0
    cba2:	f000 8209 	beq.w	cfb8 <am_util_stdio_vsprintf+0xab8>
    cba6:	4694      	mov	ip, r2
    cba8:	eba3 0e07 	sub.w	lr, r3, r7
    cbac:	f813 2b01 	ldrb.w	r2, [r3], #1
    cbb0:	2a00      	cmp	r2, #0
    cbb2:	d1f9      	bne.n	cba8 <am_util_stdio_vsprintf+0x6a8>
                if ( iWidth > 0 )
    cbb4:	2d00      	cmp	r5, #0
    cbb6:	4662      	mov	r2, ip
    cbb8:	dd01      	ble.n	cbbe <am_util_stdio_vsprintf+0x6be>
                    if ( ui32strlen < iWidth )
    cbba:	4575      	cmp	r5, lr
    cbbc:	d82d      	bhi.n	cc1a <am_util_stdio_vsprintf+0x71a>
                    if ( pcBuf )
    cbbe:	f1bb 0f00 	cmp.w	fp, #0
    cbc2:	d049      	beq.n	cc58 <am_util_stdio_vsprintf+0x758>
    cbc4:	4613      	mov	r3, r2
    cbc6:	eba9 0707 	sub.w	r7, r9, r7
                        *pcBuf++ = *pcStr;
    cbca:	f80b 1b01 	strb.w	r1, [fp], #1
    cbce:	eb07 0903 	add.w	r9, r7, r3
                while (*pcStr != 0x0)
    cbd2:	f813 1b01 	ldrb.w	r1, [r3], #1
    cbd6:	2900      	cmp	r1, #0
    cbd8:	d1f7      	bne.n	cbca <am_util_stdio_vsprintf+0x6ca>
                if ( iWidth )
    cbda:	2d00      	cmp	r5, #0
    cbdc:	d048      	beq.n	cc70 <am_util_stdio_vsprintf+0x770>
                    iWidth = -iWidth;
    cbde:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    cbe0:	4575      	cmp	r5, lr
    cbe2:	d945      	bls.n	cc70 <am_util_stdio_vsprintf+0x770>
                        iWidth -= ui32strlen;
    cbe4:	eba5 050e 	sub.w	r5, r5, lr
    if ( i32NumChars <= 0 )
    cbe8:	2d00      	cmp	r5, #0
    cbea:	f340 81db 	ble.w	cfa4 <am_util_stdio_vsprintf+0xaa4>
    while ( i32NumChars-- )
    cbee:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    cbf0:	f1bb 0f00 	cmp.w	fp, #0
    cbf4:	f000 81d7 	beq.w	cfa6 <am_util_stdio_vsprintf+0xaa6>
    cbf8:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    cbfa:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    cbfe:	3b01      	subs	r3, #1
    cc00:	1c5d      	adds	r5, r3, #1
    cc02:	eba2 010b 	sub.w	r1, r2, fp
    cc06:	d1f8      	bne.n	cbfa <am_util_stdio_vsprintf+0x6fa>
    cc08:	460d      	mov	r5, r1
                        pcBuf += pcBuf ? iWidth : 0;
    cc0a:	448b      	add	fp, r1
                        ui32CharCnt += iWidth;
    cc0c:	44a9      	add	r9, r5
                pcStr = va_arg(pArgs, char *);
    cc0e:	9011      	str	r0, [sp, #68]	; 0x44
    cc10:	e598      	b.n	c744 <am_util_stdio_vsprintf+0x244>
                if ( iWidth > 0 )
    cc12:	2d00      	cmp	r5, #0
    cc14:	f340 81b0 	ble.w	cf78 <am_util_stdio_vsprintf+0xa78>
        return ui32RetVal;
    cc18:	46be      	mov	lr, r7
                        iWidth -= ui32strlen;
    cc1a:	eba5 050e 	sub.w	r5, r5, lr
    if ( i32NumChars <= 0 )
    cc1e:	2d00      	cmp	r5, #0
    cc20:	f340 81c3 	ble.w	cfaa <am_util_stdio_vsprintf+0xaaa>
    while ( i32NumChars-- )
    cc24:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    cc26:	f1bb 0f00 	cmp.w	fp, #0
    cc2a:	d010      	beq.n	cc4e <am_util_stdio_vsprintf+0x74e>
    cc2c:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    cc2e:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    cc32:	3b01      	subs	r3, #1
    cc34:	1c5d      	adds	r5, r3, #1
    cc36:	eba2 010b 	sub.w	r1, r2, fp
    cc3a:	d1f8      	bne.n	cc2e <am_util_stdio_vsprintf+0x72e>
    cc3c:	460b      	mov	r3, r1
    cc3e:	460d      	mov	r5, r1
                while (*pcStr != 0x0)
    cc40:	7839      	ldrb	r1, [r7, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    cc42:	449b      	add	fp, r3
                        ui32CharCnt += iWidth;
    cc44:	44a9      	add	r9, r5
                while (*pcStr != 0x0)
    cc46:	b199      	cbz	r1, cc70 <am_util_stdio_vsprintf+0x770>
                        iWidth = 0;
    cc48:	2500      	movs	r5, #0
    cc4a:	1c7a      	adds	r2, r7, #1
    cc4c:	e7b7      	b.n	cbbe <am_util_stdio_vsprintf+0x6be>
                while (*pcStr != 0x0)
    cc4e:	783b      	ldrb	r3, [r7, #0]
                        ui32CharCnt += iWidth;
    cc50:	44a9      	add	r9, r5
                while (*pcStr != 0x0)
    cc52:	b16b      	cbz	r3, cc70 <am_util_stdio_vsprintf+0x770>
                        iWidth = 0;
    cc54:	2500      	movs	r5, #0
    cc56:	1c7a      	adds	r2, r7, #1
    cc58:	4613      	mov	r3, r2
    cc5a:	eba9 0707 	sub.w	r7, r9, r7
    cc5e:	eb07 0903 	add.w	r9, r7, r3
                while (*pcStr != 0x0)
    cc62:	f813 2b01 	ldrb.w	r2, [r3], #1
    cc66:	2a00      	cmp	r2, #0
    cc68:	d1f9      	bne.n	cc5e <am_util_stdio_vsprintf+0x75e>
    cc6a:	4693      	mov	fp, r2
                if ( iWidth )
    cc6c:	2d00      	cmp	r5, #0
    cc6e:	d1b6      	bne.n	cbde <am_util_stdio_vsprintf+0x6de>
                pcStr = va_arg(pArgs, char *);
    cc70:	9011      	str	r0, [sp, #68]	; 0x44
    cc72:	e567      	b.n	c744 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    cc74:	78a2      	ldrb	r2, [r4, #2]
    cc76:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
                pcFmt++;
    cc7a:	3402      	adds	r4, #2
        switch ( *pcFmt )
    cc7c:	2b32      	cmp	r3, #50	; 0x32
    cc7e:	f63f af28 	bhi.w	cad2 <am_util_stdio_vsprintf+0x5d2>
    cc82:	a101      	add	r1, pc, #4	; (adr r1, cc88 <am_util_stdio_vsprintf+0x788>)
    cc84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    cc88:	0000c709 	.word	0x0000c709
    cc8c:	0000cad3 	.word	0x0000cad3
    cc90:	0000cad3 	.word	0x0000cad3
    cc94:	0000cad3 	.word	0x0000cad3
    cc98:	0000cad3 	.word	0x0000cad3
    cc9c:	0000cad3 	.word	0x0000cad3
    cca0:	0000cad3 	.word	0x0000cad3
    cca4:	0000cad3 	.word	0x0000cad3
    cca8:	0000cad3 	.word	0x0000cad3
    ccac:	0000cad3 	.word	0x0000cad3
    ccb0:	0000cad3 	.word	0x0000cad3
    ccb4:	0000cad3 	.word	0x0000cad3
    ccb8:	0000cad3 	.word	0x0000cad3
    ccbc:	0000cad3 	.word	0x0000cad3
    ccc0:	0000cad3 	.word	0x0000cad3
    ccc4:	0000cad3 	.word	0x0000cad3
    ccc8:	0000cad3 	.word	0x0000cad3
    cccc:	0000cad3 	.word	0x0000cad3
    ccd0:	0000d09f 	.word	0x0000d09f
    ccd4:	0000cad3 	.word	0x0000cad3
    ccd8:	0000cad3 	.word	0x0000cad3
    ccdc:	0000cad3 	.word	0x0000cad3
    cce0:	0000cad3 	.word	0x0000cad3
    cce4:	0000cad3 	.word	0x0000cad3
    cce8:	0000cad3 	.word	0x0000cad3
    ccec:	0000cad3 	.word	0x0000cad3
    ccf0:	0000cad3 	.word	0x0000cad3
    ccf4:	0000cad3 	.word	0x0000cad3
    ccf8:	0000cad3 	.word	0x0000cad3
    ccfc:	0000c749 	.word	0x0000c749
    cd00:	0000cd6b 	.word	0x0000cd6b
    cd04:	0000cad3 	.word	0x0000cad3
    cd08:	0000c709 	.word	0x0000c709
    cd0c:	0000cad3 	.word	0x0000cad3
    cd10:	0000cad3 	.word	0x0000cad3
    cd14:	0000cd6b 	.word	0x0000cd6b
    cd18:	0000cad3 	.word	0x0000cad3
    cd1c:	0000cad3 	.word	0x0000cad3
    cd20:	0000cad3 	.word	0x0000cad3
    cd24:	0000cad3 	.word	0x0000cad3
    cd28:	0000cad3 	.word	0x0000cad3
    cd2c:	0000cad3 	.word	0x0000cad3
    cd30:	0000cad3 	.word	0x0000cad3
    cd34:	0000cad3 	.word	0x0000cad3
    cd38:	0000cad3 	.word	0x0000cad3
    cd3c:	0000cb8f 	.word	0x0000cb8f
    cd40:	0000cad3 	.word	0x0000cad3
    cd44:	0000cd55 	.word	0x0000cd55
    cd48:	0000cad3 	.word	0x0000cad3
    cd4c:	0000cad3 	.word	0x0000cad3
    cd50:	0000cf3f 	.word	0x0000cf3f
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd54:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd56:	3307      	adds	r3, #7
    cd58:	f023 0307 	bic.w	r3, r3, #7
    cd5c:	e9d3 1200 	ldrd	r1, r2, [r3]
    cd60:	3308      	adds	r3, #8
    cd62:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    cd66:	9311      	str	r3, [sp, #68]	; 0x44
    cd68:	e5f2      	b.n	c950 <am_util_stdio_vsprintf+0x450>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cd6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd6c:	3307      	adds	r3, #7
    cd6e:	f023 0307 	bic.w	r3, r3, #7
    cd72:	e9d3 0100 	ldrd	r0, r1, [r3]
    cd76:	3308      	adds	r3, #8
    cd78:	9311      	str	r3, [sp, #68]	; 0x44
    cd7a:	e4fa      	b.n	c772 <am_util_stdio_vsprintf+0x272>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd7c:	78a2      	ldrb	r2, [r4, #2]
    cd7e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cd82:	2b09      	cmp	r3, #9
        pcStr++;
    cd84:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cd88:	f200 812c 	bhi.w	cfe4 <am_util_stdio_vsprintf+0xae4>
        uCnt++;
    cd8c:	2101      	movs	r1, #1
        bNeg = true;
    cd8e:	4688      	mov	r8, r1
    cd90:	e6bd      	b.n	cb0e <am_util_stdio_vsprintf+0x60e>
    if ( i32NumChars <= 0 )
    cd92:	2b00      	cmp	r3, #0
                            ++ui32CharCnt;
    cd94:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    cd98:	f340 817b 	ble.w	d092 <am_util_stdio_vsprintf+0xb92>
    while ( i32NumChars-- )
    cd9c:	1eab      	subs	r3, r5, #2
    cd9e:	f04f 0a01 	mov.w	sl, #1
    cda2:	3301      	adds	r3, #1
                    ui32CharCnt += iWidth;
    cda4:	4499      	add	r9, r3
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cda6:	f1ba 0f00 	cmp.w	sl, #0
    cdaa:	f000 80ea 	beq.w	cf82 <am_util_stdio_vsprintf+0xa82>
    cdae:	2e20      	cmp	r6, #32
    cdb0:	f000 80d6 	beq.w	cf60 <am_util_stdio_vsprintf+0xa60>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdb4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cdb8:	2200      	movs	r2, #0
    cdba:	f7ff faef 	bl	c39c <uint64_to_str>
                    pcBuf += iVal;
    cdbe:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    cdc2:	4481      	add	r9, r0
    cdc4:	e4be      	b.n	c744 <am_util_stdio_vsprintf+0x244>
    if ( i32NumChars <= 0 )
    cdc6:	2700      	movs	r7, #0
    cdc8:	2500      	movs	r5, #0
    cdca:	e47c      	b.n	c6c6 <am_util_stdio_vsprintf+0x1c6>
                    ui64Val = -i64Val;          // Get absolute value
    cdcc:	4240      	negs	r0, r0
    cdce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdd2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
                if ( iWidth )
    cdd6:	2d00      	cmp	r5, #0
    cdd8:	f040 8143 	bne.w	d062 <am_util_stdio_vsprintf+0xb62>
                        if ( pcBuf )
    cddc:	f1bb 0f00 	cmp.w	fp, #0
    cde0:	f000 80d8 	beq.w	cf94 <am_util_stdio_vsprintf+0xa94>
                            *pcBuf++ = '-';
    cde4:	232d      	movs	r3, #45	; 0x2d
    cde6:	f88b 3000 	strb.w	r3, [fp]
    cdea:	f10b 0b01 	add.w	fp, fp, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdee:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cdf2:	465a      	mov	r2, fp
                        ++ui32CharCnt;
    cdf4:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    cdf8:	f7ff fad0 	bl	c39c <uint64_to_str>
                if ( pcBuf )
    cdfc:	f1bb 0f00 	cmp.w	fp, #0
    ce00:	f47f ad98 	bne.w	c934 <am_util_stdio_vsprintf+0x434>
    ce04:	e7db      	b.n	cdbe <am_util_stdio_vsprintf+0x8be>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    ce06:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    ce0a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    ce0e:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    ce10:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    ce12:	f3c0 0016 	ubfx	r0, r0, #0, #23
    ce16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    ce1a:	f300 80e7 	bgt.w	cfec <am_util_stdio_vsprintf+0xaec>
    else if (iExp2 < -23)
    ce1e:	f112 0f17 	cmn.w	r2, #23
    ce22:	f2c0 80dd 	blt.w	cfe0 <am_util_stdio_vsprintf+0xae0>
    else if (iExp2 >= 23)
    ce26:	2a16      	cmp	r2, #22
    ce28:	dd37      	ble.n	ce9a <am_util_stdio_vsprintf+0x99a>
        i32IntPart = i32Significand << (iExp2 - 23);
    ce2a:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    ce2c:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    ce2e:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    ce32:	f2c0 80f3 	blt.w	d01c <am_util_stdio_vsprintf+0xb1c>
    if (i32IntPart == 0)
    ce36:	2800      	cmp	r0, #0
    ce38:	f040 80e3 	bne.w	d002 <am_util_stdio_vsprintf+0xb02>
    *pcBuf++ = '.';
    ce3c:	232e      	movs	r3, #46	; 0x2e
        *pcBuf++ = '0';
    ce3e:	f04f 0230 	mov.w	r2, #48	; 0x30
    ce42:	f88b 2000 	strb.w	r2, [fp]
    *pcBuf++ = '.';
    ce46:	f88b 3001 	strb.w	r3, [fp, #1]
        *pcBuf++ = '0';
    ce4a:	f10b 0601 	add.w	r6, fp, #1
        *pcBuf++ = '0';
    ce4e:	1cb2      	adds	r2, r6, #2
    ce50:	f04f 0330 	mov.w	r3, #48	; 0x30
    ce54:	7073      	strb	r3, [r6, #1]
    ce56:	eba2 010b 	sub.w	r1, r2, fp
    *pcBuf = 0x00;
    ce5a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    ce5c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    ce5e:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    ce60:	f6bf ac6e 	bge.w	c740 <am_util_stdio_vsprintf+0x240>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    ce64:	1c4b      	adds	r3, r1, #1
    ce66:	f000 80bb 	beq.w	cfe0 <am_util_stdio_vsprintf+0xae0>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    ce6a:	3102      	adds	r1, #2
    ce6c:	f000 80be 	beq.w	cfec <am_util_stdio_vsprintf+0xaec>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    ce70:	4b90      	ldr	r3, [pc, #576]	; (d0b4 <am_util_stdio_vsprintf+0xbb4>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    ce72:	f8cb 3000 	str.w	r3, [fp]
    ce76:	2103      	movs	r1, #3
    ce78:	e462      	b.n	c740 <am_util_stdio_vsprintf+0x240>
    if ( i32NumChars <= 0 )
    ce7a:	2500      	movs	r5, #0
    ce7c:	2100      	movs	r1, #0
    ce7e:	e61b      	b.n	cab8 <am_util_stdio_vsprintf+0x5b8>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ce80:	4604      	mov	r4, r0
    ce82:	2500      	movs	r5, #0
    ce84:	f7ff bba2 	b.w	c5cc <am_util_stdio_vsprintf+0xcc>
    ce88:	f04f 0800 	mov.w	r8, #0
    uint32_t ui32Val = 0, uCnt = 0;
    ce8c:	4641      	mov	r1, r8
            pcFmt += ui32NumChars;
    ce8e:	eb0c 0401 	add.w	r4, ip, r1
    ce92:	f81c 2001 	ldrb.w	r2, [ip, r1]
    ce96:	f7ff bba5 	b.w	c5e4 <am_util_stdio_vsprintf+0xe4>
    else if (iExp2 >= 0)
    ce9a:	2a00      	cmp	r2, #0
    ce9c:	f2c0 80ce 	blt.w	d03c <am_util_stdio_vsprintf+0xb3c>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cea0:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    cea4:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    cea8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    ceac:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    ceae:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    ceb2:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    ceb6:	f2c0 80e0 	blt.w	d07a <am_util_stdio_vsprintf+0xb7a>
    ceba:	465e      	mov	r6, fp
            uint64_to_str(i32IntPart, pcBuf);
    cebc:	4632      	mov	r2, r6
    cebe:	17c1      	asrs	r1, r0, #31
    cec0:	f7ff fa6c 	bl	c39c <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    cec4:	7833      	ldrb	r3, [r6, #0]
    cec6:	b11b      	cbz	r3, ced0 <am_util_stdio_vsprintf+0x9d0>
    cec8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    cecc:	2b00      	cmp	r3, #0
    cece:	d1fb      	bne.n	cec8 <am_util_stdio_vsprintf+0x9c8>
    *pcBuf++ = '.';
    ced0:	232e      	movs	r3, #46	; 0x2e
    ced2:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    ced4:	2d00      	cmp	r5, #0
    ced6:	d0ba      	beq.n	ce4e <am_util_stdio_vsprintf+0x94e>
    *pcBuf++ = '.';
    ced8:	1c72      	adds	r2, r6, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    ceda:	eba2 010b 	sub.w	r1, r2, fp
    cede:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cee2:	4543      	cmp	r3, r8
    cee4:	bfa8      	it	ge
    cee6:	4643      	movge	r3, r8
        for (jx = 0; jx < iMax; jx++)
    cee8:	2b00      	cmp	r3, #0
    ceea:	dd0e      	ble.n	cf0a <am_util_stdio_vsprintf+0xa0a>
    ceec:	18f1      	adds	r1, r6, r3
            i32FracPart *= 10;
    ceee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cef2:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cef4:	1628      	asrs	r0, r5, #24
    cef6:	3030      	adds	r0, #48	; 0x30
    cef8:	f806 0f01 	strb.w	r0, [r6, #1]!
        for (jx = 0; jx < iMax; jx++)
    cefc:	42b1      	cmp	r1, r6
            i32FracPart &= 0x00FFFFFF;
    cefe:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    cf02:	d1f4      	bne.n	ceee <am_util_stdio_vsprintf+0x9ee>
    cf04:	441a      	add	r2, r3
    cf06:	eba2 010b 	sub.w	r1, r2, fp
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cf0a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cf0e:	f345 53c7 	sbfx	r3, r5, #23, #8
    cf12:	2b04      	cmp	r3, #4
    cf14:	dda1      	ble.n	ce5a <am_util_stdio_vsprintf+0x95a>
            pcBuftmp = pcBuf - 1;
    cf16:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    cf18:	459b      	cmp	fp, r3
    cf1a:	d89e      	bhi.n	ce5a <am_util_stdio_vsprintf+0x95a>
    cf1c:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
    cf20:	e005      	b.n	cf2e <am_util_stdio_vsprintf+0xa2e>
                    *pcBuftmp = '0';
    cf22:	f04f 0030 	mov.w	r0, #48	; 0x30
    cf26:	7018      	strb	r0, [r3, #0]
                pcBuftmp--;
    cf28:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    cf2a:	42ab      	cmp	r3, r5
    cf2c:	d095      	beq.n	ce5a <am_util_stdio_vsprintf+0x95a>
                if ( *pcBuftmp == '.' )
    cf2e:	7818      	ldrb	r0, [r3, #0]
    cf30:	282e      	cmp	r0, #46	; 0x2e
    cf32:	d0f9      	beq.n	cf28 <am_util_stdio_vsprintf+0xa28>
                else if ( *pcBuftmp == '9' )
    cf34:	2839      	cmp	r0, #57	; 0x39
    cf36:	d0f4      	beq.n	cf22 <am_util_stdio_vsprintf+0xa22>
                    *pcBuftmp += 1;
    cf38:	3001      	adds	r0, #1
    cf3a:	7018      	strb	r0, [r3, #0]
    cf3c:	e78d      	b.n	ce5a <am_util_stdio_vsprintf+0x95a>
        switch ( *pcFmt )
    cf3e:	f04f 0801 	mov.w	r8, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cf42:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf44:	3307      	adds	r3, #7
    cf46:	f023 0307 	bic.w	r3, r3, #7
    cf4a:	f103 0208 	add.w	r2, r3, #8
    cf4e:	9211      	str	r2, [sp, #68]	; 0x44
    cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf54:	f7ff bb8b 	b.w	c66e <am_util_stdio_vsprintf+0x16e>
                        if ( pcBuf )
    cf58:	f1bb 0f00 	cmp.w	fp, #0
    cf5c:	f47f af42 	bne.w	cde4 <am_util_stdio_vsprintf+0x8e4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cf60:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cf64:	2200      	movs	r2, #0
    cf66:	f7ff fa19 	bl	c39c <uint64_to_str>
                        ++ui32CharCnt;
    cf6a:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    cf6e:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    cf72:	4481      	add	r9, r0
    cf74:	f7ff bbe6 	b.w	c744 <am_util_stdio_vsprintf+0x244>
                while (*pcStr != 0x0)
    cf78:	7839      	ldrb	r1, [r7, #0]
    cf7a:	b1f9      	cbz	r1, cfbc <am_util_stdio_vsprintf+0xabc>
        return ui32RetVal;
    cf7c:	46be      	mov	lr, r7
    cf7e:	2201      	movs	r2, #1
    cf80:	e61d      	b.n	cbbe <am_util_stdio_vsprintf+0x6be>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cf82:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cf86:	4652      	mov	r2, sl
    cf88:	f7ff fa08 	bl	c39c <uint64_to_str>
    cf8c:	46d3      	mov	fp, sl
                ui32CharCnt += iVal;
    cf8e:	4481      	add	r9, r0
    cf90:	f7ff bbd8 	b.w	c744 <am_util_stdio_vsprintf+0x244>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cf94:	465a      	mov	r2, fp
    cf96:	f7ff fa01 	bl	c39c <uint64_to_str>
                        ++ui32CharCnt;
    cf9a:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    cf9e:	4481      	add	r9, r0
    cfa0:	f7ff bbd0 	b.w	c744 <am_util_stdio_vsprintf+0x244>
    if ( i32NumChars <= 0 )
    cfa4:	2500      	movs	r5, #0
    cfa6:	2100      	movs	r1, #0
    cfa8:	e62f      	b.n	cc0a <am_util_stdio_vsprintf+0x70a>
    cfaa:	2500      	movs	r5, #0
                        pcBuf += pcBuf ? iWidth : 0;
    cfac:	f1bb 0f00 	cmp.w	fp, #0
    cfb0:	f43f ae4d 	beq.w	cc4e <am_util_stdio_vsprintf+0x74e>
    cfb4:	462b      	mov	r3, r5
    cfb6:	e643      	b.n	cc40 <am_util_stdio_vsprintf+0x740>
                if ( iWidth > 0 )
    cfb8:	2d00      	cmp	r5, #0
    cfba:	dc01      	bgt.n	cfc0 <am_util_stdio_vsprintf+0xac0>
        return ui32RetVal;
    cfbc:	468e      	mov	lr, r1
    cfbe:	e60c      	b.n	cbda <am_util_stdio_vsprintf+0x6da>
                    if ( ui32strlen < iWidth )
    cfc0:	468e      	mov	lr, r1
    cfc2:	e62a      	b.n	cc1a <am_util_stdio_vsprintf+0x71a>
                            if ( pcBuf )
    cfc4:	f1bb 0f00 	cmp.w	fp, #0
    cfc8:	f43f aee3 	beq.w	cd92 <am_util_stdio_vsprintf+0x892>
                                *pcBuf++ = '-';
    cfcc:	222d      	movs	r2, #45	; 0x2d
                            ++ui32CharCnt;
    cfce:	f04f 0a01 	mov.w	sl, #1
                                *pcBuf++ = '-';
    cfd2:	f88b 2000 	strb.w	r2, [fp]
                            ++ui32CharCnt;
    cfd6:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    cfda:	461d      	mov	r5, r3
                                *pcBuf++ = '-';
    cfdc:	44d3      	add	fp, sl
    cfde:	e486      	b.n	c8ee <am_util_stdio_vsprintf+0x3ee>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    cfe0:	4b35      	ldr	r3, [pc, #212]	; (d0b8 <am_util_stdio_vsprintf+0xbb8>)
    cfe2:	e746      	b.n	ce72 <am_util_stdio_vsprintf+0x972>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cfe4:	f04f 0800 	mov.w	r8, #0
        uCnt++;
    cfe8:	2101      	movs	r1, #1
    cfea:	e750      	b.n	ce8e <am_util_stdio_vsprintf+0x98e>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    cfec:	4b33      	ldr	r3, [pc, #204]	; (d0bc <am_util_stdio_vsprintf+0xbbc>)
    cfee:	e740      	b.n	ce72 <am_util_stdio_vsprintf+0x972>
                    pcBuf += pcBuf ? iWidth : 0;
    cff0:	f1bb 0f00 	cmp.w	fp, #0
    cff4:	d133      	bne.n	d05e <am_util_stdio_vsprintf+0xb5e>
    cff6:	465b      	mov	r3, fp
    cff8:	e6d4      	b.n	cda4 <am_util_stdio_vsprintf+0x8a4>
                    iWidth -= ndigits_in_i64(ui64Val);
    cffa:	1b7d      	subs	r5, r7, r5
                    bNeg = false;
    cffc:	f04f 0a00 	mov.w	sl, #0
    d000:	e475      	b.n	c8ee <am_util_stdio_vsprintf+0x3ee>
    if (i32IntPart == 0)
    d002:	465b      	mov	r3, fp
    i32FracPart = 0;
    d004:	2500      	movs	r5, #0
        if (i32IntPart > 0)
    d006:	2800      	cmp	r0, #0
    d008:	dc41      	bgt.n	d08e <am_util_stdio_vsprintf+0xb8e>
            *pcBuf++ = '-';
    d00a:	1c5e      	adds	r6, r3, #1
    d00c:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    d00e:	4240      	negs	r0, r0
    d010:	17c1      	asrs	r1, r0, #31
    d012:	4632      	mov	r2, r6
            *pcBuf++ = '-';
    d014:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d016:	f7ff f9c1 	bl	c39c <uint64_to_str>
    d01a:	e753      	b.n	cec4 <am_util_stdio_vsprintf+0x9c4>
        *pcBuf++ = '-';
    d01c:	232d      	movs	r3, #45	; 0x2d
    d01e:	f88b 3000 	strb.w	r3, [fp]
    d022:	f10b 0301 	add.w	r3, fp, #1
    if (i32IntPart == 0)
    d026:	bb80      	cbnz	r0, d08a <am_util_stdio_vsprintf+0xb8a>
    *pcBuf++ = '.';
    d028:	232e      	movs	r3, #46	; 0x2e
        *pcBuf++ = '0';
    d02a:	f04f 0230 	mov.w	r2, #48	; 0x30
    d02e:	f88b 2001 	strb.w	r2, [fp, #1]
    *pcBuf++ = '.';
    d032:	f88b 3002 	strb.w	r3, [fp, #2]
        *pcBuf++ = '0';
    d036:	f10b 0602 	add.w	r6, fp, #2
    d03a:	e708      	b.n	ce4e <am_util_stdio_vsprintf+0x94e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d03c:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d03e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d040:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    d044:	db05      	blt.n	d052 <am_util_stdio_vsprintf+0xb52>
    d046:	465b      	mov	r3, fp
        *pcBuf++ = '0';
    d048:	f04f 0230 	mov.w	r2, #48	; 0x30
    d04c:	701a      	strb	r2, [r3, #0]
    d04e:	1c5e      	adds	r6, r3, #1
    d050:	e73e      	b.n	ced0 <am_util_stdio_vsprintf+0x9d0>
        *pcBuf++ = '-';
    d052:	232d      	movs	r3, #45	; 0x2d
    d054:	f88b 3000 	strb.w	r3, [fp]
    d058:	f10b 0301 	add.w	r3, fp, #1
    d05c:	e7f4      	b.n	d048 <am_util_stdio_vsprintf+0xb48>
    d05e:	2100      	movs	r1, #0
    d060:	e457      	b.n	c912 <am_util_stdio_vsprintf+0x412>
    d062:	460a      	mov	r2, r1
    int iNDigits = ui64Val ? 0 : 1;
    d064:	4613      	mov	r3, r2
    d066:	4619      	mov	r1, r3
    d068:	4301      	orrs	r1, r0
    d06a:	4602      	mov	r2, r0
    d06c:	bf0c      	ite	eq
    d06e:	2501      	moveq	r5, #1
    d070:	2500      	movne	r5, #0
                    bNeg = true;
    d072:	f04f 0a01 	mov.w	sl, #1
    d076:	f7ff bb93 	b.w	c7a0 <am_util_stdio_vsprintf+0x2a0>
        *pcBuf++ = '-';
    d07a:	232d      	movs	r3, #45	; 0x2d
    d07c:	f88b 3000 	strb.w	r3, [fp]
    d080:	f10b 0301 	add.w	r3, fp, #1
    if (i32IntPart == 0)
    d084:	2800      	cmp	r0, #0
    d086:	d0df      	beq.n	d048 <am_util_stdio_vsprintf+0xb48>
    d088:	e7bd      	b.n	d006 <am_util_stdio_vsprintf+0xb06>
    i32FracPart = 0;
    d08a:	2500      	movs	r5, #0
    d08c:	e7bb      	b.n	d006 <am_util_stdio_vsprintf+0xb06>
        if (i32IntPart > 0)
    d08e:	461e      	mov	r6, r3
    d090:	e714      	b.n	cebc <am_util_stdio_vsprintf+0x9bc>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d092:	465a      	mov	r2, fp
    d094:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d098:	f7ff f980 	bl	c39c <uint64_to_str>
    d09c:	e68f      	b.n	cdbe <am_util_stdio_vsprintf+0x8be>
        bLower = bLongLong = false;
    d09e:	f04f 0800 	mov.w	r8, #0
    d0a2:	e74e      	b.n	cf42 <am_util_stdio_vsprintf+0xa42>
    d0a4:	f1c5 0530 	rsb	r5, r5, #48	; 0x30
    d0a8:	7822      	ldrb	r2, [r4, #0]
    d0aa:	f7ff ba8f 	b.w	c5cc <am_util_stdio_vsprintf+0xcc>
    d0ae:	f1c0 0830 	rsb	r8, r0, #48	; 0x30
    d0b2:	e6ec      	b.n	ce8e <am_util_stdio_vsprintf+0x98e>
    d0b4:	003f2e3f 	.word	0x003f2e3f
    d0b8:	00302e30 	.word	0x00302e30
    d0bc:	00232e23 	.word	0x00232e23

0000d0c0 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d0c0:	b40f      	push	{r0, r1, r2, r3}
    d0c2:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d0c4:	4d0a      	ldr	r5, [pc, #40]	; (d0f0 <am_util_stdio_printf+0x30>)
    d0c6:	682c      	ldr	r4, [r5, #0]
{
    d0c8:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d0ca:	b154      	cbz	r4, d0e2 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d0cc:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0ce:	461a      	mov	r2, r3
    d0d0:	9906      	ldr	r1, [sp, #24]
    d0d2:	4808      	ldr	r0, [pc, #32]	; (d0f4 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d0d4:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0d6:	f7ff fa13 	bl	c500 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d0da:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d0dc:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d0de:	4805      	ldr	r0, [pc, #20]	; (d0f4 <am_util_stdio_printf+0x34>)
    d0e0:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d0e2:	4620      	mov	r0, r4
    d0e4:	b003      	add	sp, #12
    d0e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d0ea:	b004      	add	sp, #16
    d0ec:	4770      	bx	lr
    d0ee:	bf00      	nop
    d0f0:	100012f4 	.word	0x100012f4
    d0f4:	10001068 	.word	0x10001068

0000d0f8 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d0f8:	4801      	ldr	r0, [pc, #4]	; (d100 <am_util_stdio_terminal_clear+0x8>)
    d0fa:	f7ff bfe1 	b.w	d0c0 <am_util_stdio_printf>
    d0fe:	bf00      	nop
    d100:	00010074 	.word	0x00010074

0000d104 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    d104:	e7fe      	b.n	d104 <NMI_Handler>
    d106:	bf00      	nop

0000d108 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d108:	e7fe      	b.n	d108 <DebugMon_Handler>
    d10a:	bf00      	nop

0000d10c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d10c:	4811      	ldr	r0, [pc, #68]	; (d154 <zero_loop+0x12>)
    d10e:	4912      	ldr	r1, [pc, #72]	; (d158 <zero_loop+0x16>)
    d110:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d112:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d116:	4811      	ldr	r0, [pc, #68]	; (d15c <zero_loop+0x1a>)
    d118:	6801      	ldr	r1, [r0, #0]
    d11a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d11e:	6001      	str	r1, [r0, #0]
    d120:	f3bf 8f4f 	dsb	sy
    d124:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d128:	480d      	ldr	r0, [pc, #52]	; (d160 <zero_loop+0x1e>)
    d12a:	490e      	ldr	r1, [pc, #56]	; (d164 <zero_loop+0x22>)
    d12c:	4a0e      	ldr	r2, [pc, #56]	; (d168 <zero_loop+0x26>)

0000d12e <copy_loop>:
    d12e:	f850 3b04 	ldr.w	r3, [r0], #4
    d132:	f841 3b04 	str.w	r3, [r1], #4
    d136:	4291      	cmp	r1, r2
    d138:	dbf9      	blt.n	d12e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d13a:	480c      	ldr	r0, [pc, #48]	; (d16c <zero_loop+0x2a>)
    d13c:	490c      	ldr	r1, [pc, #48]	; (d170 <zero_loop+0x2e>)
    d13e:	f04f 0200 	mov.w	r2, #0

0000d142 <zero_loop>:
    d142:	4288      	cmp	r0, r1
    d144:	bfb8      	it	lt
    d146:	f840 2b04 	strlt.w	r2, [r0], #4
    d14a:	dbfa      	blt.n	d142 <zero_loop>
    main();
    d14c:	f7ff f828 	bl	c1a0 <main>
    __asm("    bkpt     ");
    d150:	be00      	bkpt	0x0000
    d152:	0000      	.short	0x0000
    d154:	e000ed08 	.word	0xe000ed08
    d158:	0000c000 	.word	0x0000c000
    d15c:	e000ed88 	.word	0xe000ed88
    d160:	000106f0 	.word	0x000106f0
    d164:	10001000 	.word	0x10001000
    d168:	10001064 	.word	0x10001064
    d16c:	10001064 	.word	0x10001064
    d170:	10004bbc 	.word	0x10004bbc

0000d174 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d174:	b570      	push	{r4, r5, r6, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d176:	2001      	movs	r0, #1
{
    d178:	b084      	sub	sp, #16
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d17a:	f001 f8bd 	bl	e2f8 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d17e:	492b      	ldr	r1, [pc, #172]	; (d22c <am_ctimer_isr+0xb8>)
    d180:	2000      	movs	r0, #0
    d182:	f000 fb89 	bl	d898 <am_hal_adc_initialize>
    d186:	2800      	cmp	r0, #0
    d188:	d14c      	bne.n	d224 <am_ctimer_isr+0xb0>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d18a:	4c28      	ldr	r4, [pc, #160]	; (d22c <am_ctimer_isr+0xb8>)
    d18c:	2200      	movs	r2, #0
    d18e:	6820      	ldr	r0, [r4, #0]
    d190:	4611      	mov	r1, r2
    d192:	f000 fd4b 	bl	dc2c <am_hal_adc_power_control>
    d196:	2800      	cmp	r0, #0
    d198:	d140      	bne.n	d21c <am_ctimer_isr+0xa8>
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    d19a:	2300      	movs	r3, #0
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d19c:	2201      	movs	r2, #1
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    d19e:	2507      	movs	r5, #7
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d1a0:	a902      	add	r1, sp, #8
    d1a2:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d1a4:	f88d 2008 	strb.w	r2, [sp, #8]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d1a8:	f88d 200e 	strb.w	r2, [sp, #14]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    d1ac:	f88d 3009 	strb.w	r3, [sp, #9]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    d1b0:	f88d 300b 	strb.w	r3, [sp, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d1b4:	f88d 300c 	strb.w	r3, [sp, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    d1b8:	f88d 300d 	strb.w	r3, [sp, #13]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    d1bc:	f88d 500a 	strb.w	r5, [sp, #10]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d1c0:	f000 fbda 	bl	d978 <am_hal_adc_configure>
    d1c4:	bb30      	cbnz	r0, d214 <am_ctimer_isr+0xa0>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d1c6:	2300      	movs	r3, #0
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    d1c8:	2602      	movs	r6, #2
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d1ca:	2501      	movs	r5, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d1cc:	4619      	mov	r1, r3
    d1ce:	466a      	mov	r2, sp
    d1d0:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d1d2:	f88d 3000 	strb.w	r3, [sp]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    d1d6:	f88d 3001 	strb.w	r3, [sp, #1]
    ADCSlotConfig.bWindowCompare  = false;
    d1da:	f88d 3003 	strb.w	r3, [sp, #3]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    d1de:	f88d 6002 	strb.w	r6, [sp, #2]
    ADCSlotConfig.bEnabled        = true;
    d1e2:	f88d 5004 	strb.w	r5, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d1e6:	f000 fbff 	bl	d9e8 <am_hal_adc_configure_slot>
    d1ea:	b978      	cbnz	r0, d20c <am_ctimer_isr+0x98>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d1ec:	2101      	movs	r1, #1
    d1ee:	6820      	ldr	r0, [r4, #0]
    d1f0:	f000 fc68 	bl	dac4 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d1f4:	6820      	ldr	r0, [r4, #0]
    d1f6:	f000 fc2d 	bl	da54 <am_hal_adc_enable>
    d1fa:	b110      	cbz	r0, d202 <am_ctimer_isr+0x8e>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d1fc:	480c      	ldr	r0, [pc, #48]	; (d230 <am_ctimer_isr+0xbc>)
    d1fe:	f7ff ff5f 	bl	d0c0 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d202:	6820      	ldr	r0, [r4, #0]
    d204:	f000 fd00 	bl	dc08 <am_hal_adc_sw_trigger>
}
    d208:	b004      	add	sp, #16
    d20a:	bd70      	pop	{r4, r5, r6, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d20c:	4809      	ldr	r0, [pc, #36]	; (d234 <am_ctimer_isr+0xc0>)
    d20e:	f7ff ff57 	bl	d0c0 <am_util_stdio_printf>
    d212:	e7eb      	b.n	d1ec <am_ctimer_isr+0x78>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d214:	4808      	ldr	r0, [pc, #32]	; (d238 <am_ctimer_isr+0xc4>)
    d216:	f7ff ff53 	bl	d0c0 <am_util_stdio_printf>
    d21a:	e7d4      	b.n	d1c6 <am_ctimer_isr+0x52>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d21c:	4807      	ldr	r0, [pc, #28]	; (d23c <am_ctimer_isr+0xc8>)
    d21e:	f7ff ff4f 	bl	d0c0 <am_util_stdio_printf>
    d222:	e7ba      	b.n	d19a <am_ctimer_isr+0x26>
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d224:	4806      	ldr	r0, [pc, #24]	; (d240 <am_ctimer_isr+0xcc>)
    d226:	f7ff ff4b 	bl	d0c0 <am_util_stdio_printf>
    d22a:	e7ae      	b.n	d18a <am_ctimer_isr+0x16>
    d22c:	1000116c 	.word	0x1000116c
    d230:	0001021c 	.word	0x0001021c
    d234:	000101f4 	.word	0x000101f4
    d238:	000101d0 	.word	0x000101d0
    d23c:	000101b0 	.word	0x000101b0
    d240:	0001017c 	.word	0x0001017c

0000d244 <am_adc_isr>:
{
    d244:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d246:	4c24      	ldr	r4, [pc, #144]	; (d2d8 <am_adc_isr+0x94>)
{
    d248:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d24a:	2200      	movs	r2, #0
    d24c:	6820      	ldr	r0, [r4, #0]
    d24e:	a902      	add	r1, sp, #8
    d250:	f000 fc4e 	bl	daf0 <am_hal_adc_interrupt_status>
    d254:	2800      	cmp	r0, #0
    d256:	d13b      	bne.n	d2d0 <am_adc_isr+0x8c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d258:	9902      	ldr	r1, [sp, #8]
    d25a:	6820      	ldr	r0, [r4, #0]
    d25c:	f000 fc66 	bl	db2c <am_hal_adc_interrupt_clear>
    d260:	2800      	cmp	r0, #0
    d262:	d131      	bne.n	d2c8 <am_adc_isr+0x84>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d264:	9b02      	ldr	r3, [sp, #8]
    d266:	07db      	lsls	r3, r3, #31
    d268:	d416      	bmi.n	d298 <am_adc_isr+0x54>
    audioSample = Sample.ui32Sample;
    d26a:	4b1c      	ldr	r3, [pc, #112]	; (d2dc <am_adc_isr+0x98>)
    d26c:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d26e:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d270:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d272:	f000 fc0f 	bl	da94 <am_hal_adc_disable>
    d276:	bb18      	cbnz	r0, d2c0 <am_adc_isr+0x7c>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d278:	200a      	movs	r0, #10
    d27a:	f002 f87f 	bl	f37c <am_hal_pwrctrl_periph_disable>
    d27e:	b9d8      	cbnz	r0, d2b8 <am_adc_isr+0x74>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d280:	6820      	ldr	r0, [r4, #0]
    d282:	f000 fb59 	bl	d938 <am_hal_adc_deinitialize>
    d286:	b110      	cbz	r0, d28e <am_adc_isr+0x4a>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d288:	4815      	ldr	r0, [pc, #84]	; (d2e0 <am_adc_isr+0x9c>)
    d28a:	f7ff ff19 	bl	d0c0 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d28e:	6820      	ldr	r0, [r4, #0]
    d290:	f000 fcba 	bl	dc08 <am_hal_adc_sw_trigger>
}
    d294:	b006      	add	sp, #24
    d296:	bd10      	pop	{r4, pc}
        uint32_t    ui32NumSamples = 1;
    d298:	ab06      	add	r3, sp, #24
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d29a:	aa04      	add	r2, sp, #16
        uint32_t    ui32NumSamples = 1;
    d29c:	2101      	movs	r1, #1
    d29e:	f843 1d0c 	str.w	r1, [r3, #-12]!
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d2a2:	6820      	ldr	r0, [r4, #0]
    d2a4:	9200      	str	r2, [sp, #0]
    d2a6:	2200      	movs	r2, #0
    d2a8:	f000 fc52 	bl	db50 <am_hal_adc_samples_read>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	d0dc      	beq.n	d26a <am_adc_isr+0x26>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d2b0:	480c      	ldr	r0, [pc, #48]	; (d2e4 <am_adc_isr+0xa0>)
    d2b2:	f7ff ff05 	bl	d0c0 <am_util_stdio_printf>
    d2b6:	e7d8      	b.n	d26a <am_adc_isr+0x26>
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d2b8:	480b      	ldr	r0, [pc, #44]	; (d2e8 <am_adc_isr+0xa4>)
    d2ba:	f7ff ff01 	bl	d0c0 <am_util_stdio_printf>
    d2be:	e7df      	b.n	d280 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d2c0:	480a      	ldr	r0, [pc, #40]	; (d2ec <am_adc_isr+0xa8>)
    d2c2:	f7ff fefd 	bl	d0c0 <am_util_stdio_printf>
    d2c6:	e7d7      	b.n	d278 <am_adc_isr+0x34>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d2c8:	4809      	ldr	r0, [pc, #36]	; (d2f0 <am_adc_isr+0xac>)
    d2ca:	f7ff fef9 	bl	d0c0 <am_util_stdio_printf>
    d2ce:	e7c9      	b.n	d264 <am_adc_isr+0x20>
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d2d0:	4808      	ldr	r0, [pc, #32]	; (d2f4 <am_adc_isr+0xb0>)
    d2d2:	f7ff fef5 	bl	d0c0 <am_util_stdio_printf>
    d2d6:	e7bf      	b.n	d258 <am_adc_isr+0x14>
    d2d8:	1000116c 	.word	0x1000116c
    d2dc:	10001168 	.word	0x10001168
    d2e0:	00010150 	.word	0x00010150
    d2e4:	000100d4 	.word	0x000100d4
    d2e8:	00010120 	.word	0x00010120
    d2ec:	00010100 	.word	0x00010100
    d2f0:	000100ac 	.word	0x000100ac
    d2f4:	00010088 	.word	0x00010088

0000d2f8 <initADC>:
{
    d2f8:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d2fa:	4b0e      	ldr	r3, [pc, #56]	; (d334 <initADC+0x3c>)
    d2fc:	200b      	movs	r0, #11
    d2fe:	6819      	ldr	r1, [r3, #0]
    d300:	f001 f85e 	bl	e3c0 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d304:	f44f 7215 	mov.w	r2, #596	; 0x254
    d308:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d30c:	2000      	movs	r0, #0
    d30e:	f000 ff1f 	bl	e150 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d312:	2001      	movs	r0, #1
    d314:	f000 ffdc 	bl	e2d0 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d318:	2300      	movs	r3, #0
    d31a:	4618      	mov	r0, r3
    d31c:	2201      	movs	r2, #1
    d31e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d322:	f000 ff7f 	bl	e224 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d326:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d32a:	2000      	movs	r0, #0
    d32c:	f000 ff50 	bl	e1d0 <am_hal_ctimer_start>
}
    d330:	2000      	movs	r0, #0
    d332:	bd08      	pop	{r3, pc}
    d334:	0001023c 	.word	0x0001023c

0000d338 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d338:	4b04      	ldr	r3, [pc, #16]	; (d34c <enableAdcInterrupts+0x14>)
    d33a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d33e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d342:	6019      	str	r1, [r3, #0]
    d344:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d346:	f001 b9ed 	b.w	e724 <am_hal_interrupt_master_enable>
    d34a:	bf00      	nop
    d34c:	e000e100 	.word	0xe000e100

0000d350 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d350:	2b80      	cmp	r3, #128	; 0x80
    d352:	d84b      	bhi.n	d3ec <platform_read+0x9c>
{
    d354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d358:	4690      	mov	r8, r2
    d35a:	b08b      	sub	sp, #44	; 0x2c
    d35c:	460e      	mov	r6, r1
    d35e:	461f      	mov	r7, r3
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d360:	2a00      	cmp	r2, #0
    d362:	d045      	beq.n	d3f0 <platform_read+0xa0>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d364:	4d25      	ldr	r5, [pc, #148]	; (d3fc <platform_read+0xac>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d366:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d40c <platform_read+0xbc>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d36a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d36c:	466c      	mov	r4, sp
    d36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d374:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d378:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d37c:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d380:	2501      	movs	r5, #1
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d382:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d384:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d388:	9403      	str	r4, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d38a:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d38c:	f88d 4010 	strb.w	r4, [sp, #16]
    iomTransfer.pui32TxBuffer = NULL;
    d390:	9405      	str	r4, [sp, #20]
    iomTransfer.pui32RxBuffer = NULL;
    d392:	9406      	str	r4, [sp, #24]
    iomTransfer.ui8RepeatCount = 0;         // ?
    d394:	f88d 401d 	strb.w	r4, [sp, #29]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d398:	9408      	str	r4, [sp, #32]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d39a:	9409      	str	r4, [sp, #36]	; 0x24
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d39c:	9602      	str	r6, [sp, #8]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d39e:	9501      	str	r5, [sp, #4]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d3a0:	f88d 501c 	strb.w	r5, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d3a4:	f88d 501e 	strb.w	r5, [sp, #30]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d3a8:	f001 fd16 	bl	edd8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d3ac:	4604      	mov	r4, r0
    d3ae:	b9a8      	cbnz	r0, d3dc <platform_read+0x8c>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d3b0:	4669      	mov	r1, sp
    d3b2:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d3b6:	f88d 401c 	strb.w	r4, [sp, #28]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d3ba:	f88d 5010 	strb.w	r5, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d3be:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d3c2:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d3c4:	f001 fd08 	bl	edd8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d3c8:	4604      	mov	r4, r0
    d3ca:	b160      	cbz	r0, d3e6 <platform_read+0x96>
    {
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d3cc:	4601      	mov	r1, r0
    d3ce:	480c      	ldr	r0, [pc, #48]	; (d400 <platform_read+0xb0>)
    d3d0:	f7ff fe76 	bl	d0c0 <am_util_stdio_printf>
        return retVal32;
    d3d4:	4620      	mov	r0, r4
    }
    
    return 0;
}
    d3d6:	b00b      	add	sp, #44	; 0x2c
    d3d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d3dc:	4601      	mov	r1, r0
    d3de:	4809      	ldr	r0, [pc, #36]	; (d404 <platform_read+0xb4>)
    d3e0:	f7ff fe6e 	bl	d0c0 <am_util_stdio_printf>
        return retVal32;
    d3e4:	4620      	mov	r0, r4
}
    d3e6:	b00b      	add	sp, #44	; 0x2c
    d3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d3ec:	2001      	movs	r0, #1
    d3ee:	4770      	bx	lr
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d3f0:	4805      	ldr	r0, [pc, #20]	; (d408 <platform_read+0xb8>)
    d3f2:	f7ff fe65 	bl	d0c0 <am_util_stdio_printf>
    d3f6:	2001      	movs	r0, #1
    d3f8:	e7f5      	b.n	d3e6 <platform_read+0x96>
    d3fa:	bf00      	nop
    d3fc:	10001000 	.word	0x10001000
    d400:	00010288 	.word	0x00010288
    d404:	00010278 	.word	0x00010278
    d408:	00010260 	.word	0x00010260
    d40c:	10001504 	.word	0x10001504

0000d410 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d410:	2b80      	cmp	r3, #128	; 0x80
    d412:	d845      	bhi.n	d4a0 <platform_write+0x90>
{
    d414:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d416:	4d26      	ldr	r5, [pc, #152]	; (d4b0 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d418:	4f26      	ldr	r7, [pc, #152]	; (d4b4 <platform_write+0xa4>)
    d41a:	468c      	mov	ip, r1
    d41c:	469e      	mov	lr, r3
    d41e:	4616      	mov	r6, r2
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    d422:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d424:	466c      	mov	r4, sp
    d426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d42a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d42c:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d430:	2200      	movs	r2, #0
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d432:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d436:	2501      	movs	r5, #1
    iomTransfer.pui32RxBuffer = i2cRX;
    d438:	f8df c088 	ldr.w	ip, [pc, #136]	; d4c4 <platform_write+0xb4>
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d43c:	9302      	str	r3, [sp, #8]
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d43e:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d442:	f8cd e00c 	str.w	lr, [sp, #12]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d446:	9501      	str	r5, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d448:	f88d 501e 	strb.w	r5, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d44c:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d450:	f88d 201c 	strb.w	r2, [sp, #28]
    iomTransfer.ui8RepeatCount = 0;         // ?
    d454:	f88d 201d 	strb.w	r2, [sp, #29]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d458:	9208      	str	r2, [sp, #32]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d45a:	9209      	str	r2, [sp, #36]	; 0x24
    iomTransfer.pui32TxBuffer = i2cTX;
    d45c:	9705      	str	r7, [sp, #20]
    iomTransfer.pui32RxBuffer = i2cRX;
    d45e:	f8cd c018 	str.w	ip, [sp, #24]
    if(bufp == NULL){
    d462:	b1fe      	cbz	r6, d4a4 <platform_write+0x94>
    while(len--){
    d464:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    d468:	b289      	uxth	r1, r1
    d46a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d46e:	f1be 0f00 	cmp.w	lr, #0
    d472:	d006      	beq.n	d482 <platform_write+0x72>
        *(i2cTX + len) = *(bufp + len);
    d474:	5c73      	ldrb	r3, [r6, r1]
    d476:	f847 3021 	str.w	r3, [r7, r1, lsl #2]
    while(len--){
    d47a:	3901      	subs	r1, #1
    d47c:	b289      	uxth	r1, r1
    d47e:	4291      	cmp	r1, r2
    d480:	d1f8      	bne.n	d474 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d482:	4b0d      	ldr	r3, [pc, #52]	; (d4b8 <platform_write+0xa8>)
    d484:	4669      	mov	r1, sp
    d486:	6818      	ldr	r0, [r3, #0]
    d488:	f001 fca6 	bl	edd8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d48c:	4604      	mov	r4, r0
    d48e:	b910      	cbnz	r0, d496 <platform_write+0x86>
        return retVal32;
    d490:	4620      	mov	r0, r4
}
    d492:	b00b      	add	sp, #44	; 0x2c
    d494:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d496:	4601      	mov	r1, r0
    d498:	4808      	ldr	r0, [pc, #32]	; (d4bc <platform_write+0xac>)
    d49a:	f7ff fe11 	bl	d0c0 <am_util_stdio_printf>
    d49e:	e7f7      	b.n	d490 <platform_write+0x80>
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d4a0:	2001      	movs	r0, #1
    d4a2:	4770      	bx	lr
        am_util_stdio_printf("No TX buffer provided\n");
    d4a4:	4806      	ldr	r0, [pc, #24]	; (d4c0 <platform_write+0xb0>)
    d4a6:	f7ff fe0b 	bl	d0c0 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d4aa:	4628      	mov	r0, r5
    d4ac:	e7f1      	b.n	d492 <platform_write+0x82>
    d4ae:	bf00      	nop
    d4b0:	10001000 	.word	0x10001000
    d4b4:	10001304 	.word	0x10001304
    d4b8:	10001504 	.word	0x10001504
    d4bc:	000102b4 	.word	0x000102b4
    d4c0:	0001029c 	.word	0x0001029c
    d4c4:	10001508 	.word	0x10001508

0000d4c8 <initAccelerometer>:
{
    d4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dev_ctx.write_reg = platform_write;
    d4ca:	4a2c      	ldr	r2, [pc, #176]	; (d57c <initAccelerometer+0xb4>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d4cc:	4c2c      	ldr	r4, [pc, #176]	; (d580 <initAccelerometer+0xb8>)
    dev_ctx.write_reg = platform_write;
    d4ce:	4b2d      	ldr	r3, [pc, #180]	; (d584 <initAccelerometer+0xbc>)
    dev_ctx.read_reg = platform_read;
    d4d0:	4f2d      	ldr	r7, [pc, #180]	; (d588 <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d4d2:	4d2e      	ldr	r5, [pc, #184]	; (d58c <initAccelerometer+0xc4>)
    dev_ctx.write_reg = platform_write;
    d4d4:	6013      	str	r3, [r2, #0]
{
    d4d6:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d4d8:	2300      	movs	r3, #0
    d4da:	2601      	movs	r6, #1
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d4dc:	4621      	mov	r1, r4
    d4de:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d4e0:	9301      	str	r3, [sp, #4]
    d4e2:	9303      	str	r3, [sp, #12]
    d4e4:	9304      	str	r3, [sp, #16]
    d4e6:	9305      	str	r3, [sp, #20]
    dev_ctx.read_reg = platform_read;
    d4e8:	6057      	str	r7, [r2, #4]
    am_hal_iom_config_t i2cConfig =
    d4ea:	f88d 6004 	strb.w	r6, [sp, #4]
    d4ee:	9502      	str	r5, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d4f0:	f001 f99c 	bl	e82c <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d4f4:	b140      	cbz	r0, d508 <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d4f6:	4c26      	ldr	r4, [pc, #152]	; (d590 <initAccelerometer+0xc8>)
    d4f8:	4820      	ldr	r0, [pc, #128]	; (d57c <initAccelerometer+0xb4>)
    d4fa:	4621      	mov	r1, r4
    d4fc:	f000 f908 	bl	d710 <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d500:	7821      	ldrb	r1, [r4, #0]
    d502:	2933      	cmp	r1, #51	; 0x33
    d504:	d01b      	beq.n	d53e <initAccelerometer+0x76>
    d506:	e7fe      	b.n	d506 <initAccelerometer+0x3e>
    d508:	4602      	mov	r2, r0

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d50a:	4601      	mov	r1, r0
    d50c:	6820      	ldr	r0, [r4, #0]
    d50e:	f001 fa25 	bl	e95c <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d512:	2800      	cmp	r0, #0
    d514:	d1ef      	bne.n	d4f6 <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d516:	a901      	add	r1, sp, #4
    d518:	6820      	ldr	r0, [r4, #0]
    d51a:	f001 fb2f 	bl	eb7c <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d51e:	2800      	cmp	r0, #0
    d520:	d1e9      	bne.n	d4f6 <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d522:	4b1c      	ldr	r3, [pc, #112]	; (d594 <initAccelerometer+0xcc>)
    d524:	202b      	movs	r0, #43	; 0x2b
    d526:	6819      	ldr	r1, [r3, #0]
    d528:	f000 ff4a 	bl	e3c0 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d52c:	4b1a      	ldr	r3, [pc, #104]	; (d598 <initAccelerometer+0xd0>)
    d52e:	202a      	movs	r0, #42	; 0x2a
    d530:	6819      	ldr	r1, [r3, #0]
    d532:	f000 ff45 	bl	e3c0 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d536:	6820      	ldr	r0, [r4, #0]
    d538:	f001 f9a0 	bl	e87c <am_hal_iom_enable>
    d53c:	e7db      	b.n	d4f6 <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d53e:	4817      	ldr	r0, [pc, #92]	; (d59c <initAccelerometer+0xd4>)
    d540:	f7ff fdbe 	bl	d0c0 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d544:	2101      	movs	r1, #1
    d546:	480d      	ldr	r0, [pc, #52]	; (d57c <initAccelerometer+0xb4>)
    d548:	f000 f8c8 	bl	d6dc <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d54c:	2103      	movs	r1, #3
    d54e:	480b      	ldr	r0, [pc, #44]	; (d57c <initAccelerometer+0xb4>)
    d550:	f000 f826 	bl	d5a0 <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d554:	2103      	movs	r1, #3
    d556:	4809      	ldr	r0, [pc, #36]	; (d57c <initAccelerometer+0xb4>)
    d558:	f000 f88c 	bl	d674 <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d55c:	2100      	movs	r1, #0
    d55e:	4807      	ldr	r0, [pc, #28]	; (d57c <initAccelerometer+0xb4>)
    d560:	f000 f8a2 	bl	d6a8 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d564:	2103      	movs	r1, #3
    d566:	4805      	ldr	r0, [pc, #20]	; (d57c <initAccelerometer+0xb4>)
    d568:	f000 f81a 	bl	d5a0 <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d56c:	2100      	movs	r1, #0
    d56e:	4803      	ldr	r0, [pc, #12]	; (d57c <initAccelerometer+0xb4>)
    d570:	f000 f830 	bl	d5d4 <lis2dh12_operating_mode_set>
}
    d574:	2000      	movs	r0, #0
    d576:	b007      	add	sp, #28
    d578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d57a:	bf00      	nop
    d57c:	100012f8 	.word	0x100012f8
    d580:	10001504 	.word	0x10001504
    d584:	0000d411 	.word	0x0000d411
    d588:	0000d351 	.word	0x0000d351
    d58c:	000186a0 	.word	0x000186a0
    d590:	10001170 	.word	0x10001170
    d594:	000102fc 	.word	0x000102fc
    d598:	00010300 	.word	0x00010300
    d59c:	00010240 	.word	0x00010240

0000d5a0 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    d5a0:	b570      	push	{r4, r5, r6, lr}
    d5a2:	b082      	sub	sp, #8
    d5a4:	4604      	mov	r4, r0
    d5a6:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d5a8:	6845      	ldr	r5, [r0, #4]
    d5aa:	6880      	ldr	r0, [r0, #8]
    d5ac:	aa01      	add	r2, sp, #4
    d5ae:	2301      	movs	r3, #1
    d5b0:	211f      	movs	r1, #31
    d5b2:	47a8      	blx	r5
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    d5b4:	b958      	cbnz	r0, d5ce <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    d5b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5ba:	6825      	ldr	r5, [r4, #0]
    d5bc:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    d5be:	f366 1387 	bfi	r3, r6, #6, #2
    d5c2:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d5c6:	aa01      	add	r2, sp, #4
    d5c8:	2301      	movs	r3, #1
    d5ca:	211f      	movs	r1, #31
    d5cc:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    d5ce:	b002      	add	sp, #8
    d5d0:	bd70      	pop	{r4, r5, r6, pc}
    d5d2:	bf00      	nop

0000d5d4 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    d5d4:	b570      	push	{r4, r5, r6, lr}
    d5d6:	b082      	sub	sp, #8
    d5d8:	4604      	mov	r4, r0
    d5da:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d5dc:	6846      	ldr	r6, [r0, #4]
    d5de:	6880      	ldr	r0, [r0, #8]
    d5e0:	466a      	mov	r2, sp
    d5e2:	2301      	movs	r3, #1
    d5e4:	2120      	movs	r1, #32
    d5e6:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    d5e8:	b108      	cbz	r0, d5ee <lis2dh12_operating_mode_set+0x1a>
  } 
  if (ret == 0) {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d5ea:	b002      	add	sp, #8
    d5ec:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d5ee:	aa01      	add	r2, sp, #4
    d5f0:	6866      	ldr	r6, [r4, #4]
    d5f2:	68a0      	ldr	r0, [r4, #8]
    d5f4:	2301      	movs	r3, #1
    d5f6:	2123      	movs	r1, #35	; 0x23
    d5f8:	47b0      	blx	r6
  if (ret == 0) {
    d5fa:	2800      	cmp	r0, #0
    d5fc:	d1f5      	bne.n	d5ea <lis2dh12_operating_mode_set+0x16>
    if ( val == LIS2DH12_HR_12bit ) {
    d5fe:	b9dd      	cbnz	r5, d638 <lis2dh12_operating_mode_set+0x64>
      ctrl_reg1.lpen = 0;
    d600:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d604:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d608:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    d60c:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    d610:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    d614:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d618:	466a      	mov	r2, sp
    d61a:	6825      	ldr	r5, [r4, #0]
    d61c:	68a0      	ldr	r0, [r4, #8]
    d61e:	2301      	movs	r3, #1
    d620:	2120      	movs	r1, #32
    d622:	47a8      	blx	r5
  if (ret == 0) {
    d624:	2800      	cmp	r0, #0
    d626:	d1e0      	bne.n	d5ea <lis2dh12_operating_mode_set+0x16>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d628:	aa01      	add	r2, sp, #4
    d62a:	6825      	ldr	r5, [r4, #0]
    d62c:	68a0      	ldr	r0, [r4, #8]
    d62e:	2301      	movs	r3, #1
    d630:	2123      	movs	r1, #35	; 0x23
    d632:	47a8      	blx	r5
}
    d634:	b002      	add	sp, #8
    d636:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    d638:	2d01      	cmp	r5, #1
    d63a:	d10c      	bne.n	d656 <lis2dh12_operating_mode_set+0x82>
      ctrl_reg1.lpen = 0;
    d63c:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d640:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    d644:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    d648:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    d64c:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    d650:	f88d 3004 	strb.w	r3, [sp, #4]
    d654:	e7e0      	b.n	d618 <lis2dh12_operating_mode_set+0x44>
    if (val == LIS2DH12_LP_8bit) {
    d656:	2d02      	cmp	r5, #2
    d658:	d1de      	bne.n	d618 <lis2dh12_operating_mode_set+0x44>
      ctrl_reg1.lpen = 1;
    d65a:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d65e:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    d662:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    d666:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    d66a:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    d66e:	f88d 2004 	strb.w	r2, [sp, #4]
    d672:	e7d1      	b.n	d618 <lis2dh12_operating_mode_set+0x44>

0000d674 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    d674:	b570      	push	{r4, r5, r6, lr}
    d676:	b082      	sub	sp, #8
    d678:	4604      	mov	r4, r0
    d67a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d67c:	6845      	ldr	r5, [r0, #4]
    d67e:	6880      	ldr	r0, [r0, #8]
    d680:	aa01      	add	r2, sp, #4
    d682:	2301      	movs	r3, #1
    d684:	2120      	movs	r1, #32
    d686:	47a8      	blx	r5
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    d688:	b958      	cbnz	r0, d6a2 <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    d68a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d68e:	6825      	ldr	r5, [r4, #0]
    d690:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    d692:	f366 1307 	bfi	r3, r6, #4, #4
    d696:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d69a:	aa01      	add	r2, sp, #4
    d69c:	2301      	movs	r3, #1
    d69e:	2120      	movs	r1, #32
    d6a0:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    d6a2:	b002      	add	sp, #8
    d6a4:	bd70      	pop	{r4, r5, r6, pc}
    d6a6:	bf00      	nop

0000d6a8 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    d6a8:	b570      	push	{r4, r5, r6, lr}
    d6aa:	b082      	sub	sp, #8
    d6ac:	4604      	mov	r4, r0
    d6ae:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d6b0:	6845      	ldr	r5, [r0, #4]
    d6b2:	6880      	ldr	r0, [r0, #8]
    d6b4:	aa01      	add	r2, sp, #4
    d6b6:	2301      	movs	r3, #1
    d6b8:	2123      	movs	r1, #35	; 0x23
    d6ba:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d6bc:	b958      	cbnz	r0, d6d6 <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    d6be:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d6c2:	6825      	ldr	r5, [r4, #0]
    d6c4:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    d6c6:	f366 1305 	bfi	r3, r6, #4, #2
    d6ca:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d6ce:	aa01      	add	r2, sp, #4
    d6d0:	2301      	movs	r3, #1
    d6d2:	2123      	movs	r1, #35	; 0x23
    d6d4:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d6d6:	b002      	add	sp, #8
    d6d8:	bd70      	pop	{r4, r5, r6, pc}
    d6da:	bf00      	nop

0000d6dc <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    d6dc:	b570      	push	{r4, r5, r6, lr}
    d6de:	b082      	sub	sp, #8
    d6e0:	4604      	mov	r4, r0
    d6e2:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d6e4:	6845      	ldr	r5, [r0, #4]
    d6e6:	6880      	ldr	r0, [r0, #8]
    d6e8:	aa01      	add	r2, sp, #4
    d6ea:	2301      	movs	r3, #1
    d6ec:	2123      	movs	r1, #35	; 0x23
    d6ee:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    d6f0:	b958      	cbnz	r0, d70a <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    d6f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d6f6:	6825      	ldr	r5, [r4, #0]
    d6f8:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    d6fa:	f366 13c7 	bfi	r3, r6, #7, #1
    d6fe:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    d702:	aa01      	add	r2, sp, #4
    d704:	2301      	movs	r3, #1
    d706:	2123      	movs	r1, #35	; 0x23
    d708:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    d70a:	b002      	add	sp, #8
    d70c:	bd70      	pop	{r4, r5, r6, pc}
    d70e:	bf00      	nop

0000d710 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    d710:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d712:	6844      	ldr	r4, [r0, #4]
    d714:	6880      	ldr	r0, [r0, #8]
    d716:	460a      	mov	r2, r1
    d718:	46a4      	mov	ip, r4
    d71a:	2301      	movs	r3, #1
    d71c:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    d71e:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    d722:	4760      	bx	ip

0000d724 <am_bsp_uart_string_print>:
    d724:	b510      	push	{r4, lr}
    d726:	b086      	sub	sp, #24
    d728:	7804      	ldrb	r4, [r0, #0]
    d72a:	2300      	movs	r3, #0
    d72c:	9300      	str	r3, [sp, #0]
    d72e:	b13c      	cbz	r4, d740 <am_bsp_uart_string_print+0x1c>
    d730:	4603      	mov	r3, r0
    d732:	f1c0 0201 	rsb	r2, r0, #1
    d736:	18d4      	adds	r4, r2, r3
    d738:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    d73c:	2900      	cmp	r1, #0
    d73e:	d1fa      	bne.n	d736 <am_bsp_uart_string_print+0x12>
    d740:	4b09      	ldr	r3, [pc, #36]	; (d768 <am_bsp_uart_string_print+0x44>)
    d742:	9002      	str	r0, [sp, #8]
    d744:	2200      	movs	r2, #0
    d746:	6818      	ldr	r0, [r3, #0]
    d748:	9403      	str	r4, [sp, #12]
    d74a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d74e:	a901      	add	r1, sp, #4
    d750:	9304      	str	r3, [sp, #16]
    d752:	9201      	str	r2, [sp, #4]
    d754:	f8cd d014 	str.w	sp, [sp, #20]
    d758:	f002 f8ca 	bl	f8f0 <am_hal_uart_transfer>
    d75c:	9b00      	ldr	r3, [sp, #0]
    d75e:	42a3      	cmp	r3, r4
    d760:	d000      	beq.n	d764 <am_bsp_uart_string_print+0x40>
    d762:	e7fe      	b.n	d762 <am_bsp_uart_string_print+0x3e>
    d764:	b006      	add	sp, #24
    d766:	bd10      	pop	{r4, pc}
    d768:	10001174 	.word	0x10001174

0000d76c <am_bsp_low_power_init>:
    d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d76e:	f001 fcef 	bl	f150 <am_hal_itm_disable>
    d772:	2000      	movs	r0, #0
    d774:	f7fe febe 	bl	c4f4 <am_util_stdio_printf_init>
    d778:	4b12      	ldr	r3, [pc, #72]	; (d7c4 <am_bsp_low_power_init+0x58>)
    d77a:	4f13      	ldr	r7, [pc, #76]	; (d7c8 <am_bsp_low_power_init+0x5c>)
    d77c:	6819      	ldr	r1, [r3, #0]
    d77e:	2021      	movs	r0, #33	; 0x21
    d780:	f000 fe1e 	bl	e3c0 <am_hal_gpio_pinconfig>
    d784:	f001 fe26 	bl	f3d4 <am_hal_pwrctrl_low_power_init>
    d788:	2001      	movs	r0, #1
    d78a:	f001 fe95 	bl	f4b8 <am_hal_rtc_osc_select>
    d78e:	2100      	movs	r1, #0
    d790:	2003      	movs	r0, #3
    d792:	f000 fc51 	bl	e038 <am_hal_clkgen_control>
    d796:	f001 fe97 	bl	f4c8 <am_hal_rtc_osc_disable>
    d79a:	4b0c      	ldr	r3, [pc, #48]	; (d7cc <am_bsp_low_power_init+0x60>)
    d79c:	681e      	ldr	r6, [r3, #0]
    d79e:	2400      	movs	r4, #0
    d7a0:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d7a4:	4631      	mov	r1, r6
    d7a6:	4628      	mov	r0, r5
    d7a8:	f000 fe0a 	bl	e3c0 <am_hal_gpio_pinconfig>
    d7ac:	2103      	movs	r1, #3
    d7ae:	4628      	mov	r0, r5
    d7b0:	f000 ff74 	bl	e69c <am_hal_gpio_state_write>
    d7b4:	3401      	adds	r4, #1
    d7b6:	4628      	mov	r0, r5
    d7b8:	2100      	movs	r1, #0
    d7ba:	f000 ff6f 	bl	e69c <am_hal_gpio_state_write>
    d7be:	2c04      	cmp	r4, #4
    d7c0:	d1ee      	bne.n	d7a0 <am_bsp_low_power_init+0x34>
    d7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d7c4:	0001043c 	.word	0x0001043c
    d7c8:	10001028 	.word	0x10001028
    d7cc:	00010440 	.word	0x00010440

0000d7d0 <am_bsp_debug_printf_disable>:
    d7d0:	b538      	push	{r3, r4, r5, lr}
    d7d2:	4b17      	ldr	r3, [pc, #92]	; (d830 <am_bsp_debug_printf_disable+0x60>)
    d7d4:	681c      	ldr	r4, [r3, #0]
    d7d6:	2c01      	cmp	r4, #1
    d7d8:	d002      	beq.n	d7e0 <am_bsp_debug_printf_disable+0x10>
    d7da:	2c02      	cmp	r4, #2
    d7dc:	d00c      	beq.n	d7f8 <am_bsp_debug_printf_disable+0x28>
    d7de:	bd38      	pop	{r3, r4, r5, pc}
    d7e0:	f001 fcb6 	bl	f150 <am_hal_itm_disable>
    d7e4:	2000      	movs	r0, #0
    d7e6:	f7fe fe85 	bl	c4f4 <am_util_stdio_printf_init>
    d7ea:	4b12      	ldr	r3, [pc, #72]	; (d834 <am_bsp_debug_printf_disable+0x64>)
    d7ec:	2021      	movs	r0, #33	; 0x21
    d7ee:	6819      	ldr	r1, [r3, #0]
    d7f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d7f4:	f000 bde4 	b.w	e3c0 <am_hal_gpio_pinconfig>
    d7f8:	4d0f      	ldr	r5, [pc, #60]	; (d838 <am_bsp_debug_printf_disable+0x68>)
    d7fa:	6828      	ldr	r0, [r5, #0]
    d7fc:	f002 fab2 	bl	fd64 <am_hal_uart_tx_flush>
    d800:	2000      	movs	r0, #0
    d802:	f7fe fe77 	bl	c4f4 <am_util_stdio_printf_init>
    d806:	4621      	mov	r1, r4
    d808:	2200      	movs	r2, #0
    d80a:	6828      	ldr	r0, [r5, #0]
    d80c:	f001 feda 	bl	f5c4 <am_hal_uart_power_control>
    d810:	6828      	ldr	r0, [r5, #0]
    d812:	f001 fec3 	bl	f59c <am_hal_uart_deinitialize>
    d816:	4b07      	ldr	r3, [pc, #28]	; (d834 <am_bsp_debug_printf_disable+0x64>)
    d818:	681c      	ldr	r4, [r3, #0]
    d81a:	2030      	movs	r0, #48	; 0x30
    d81c:	4621      	mov	r1, r4
    d81e:	f000 fdcf 	bl	e3c0 <am_hal_gpio_pinconfig>
    d822:	4621      	mov	r1, r4
    d824:	2031      	movs	r0, #49	; 0x31
    d826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d82a:	f000 bdc9 	b.w	e3c0 <am_hal_gpio_pinconfig>
    d82e:	bf00      	nop
    d830:	10001178 	.word	0x10001178
    d834:	0001043c 	.word	0x0001043c
    d838:	10001174 	.word	0x10001174

0000d83c <am_bsp_uart_printf_enable>:
    d83c:	b510      	push	{r4, lr}
    d83e:	4c10      	ldr	r4, [pc, #64]	; (d880 <am_bsp_uart_printf_enable+0x44>)
    d840:	4b10      	ldr	r3, [pc, #64]	; (d884 <am_bsp_uart_printf_enable+0x48>)
    d842:	4621      	mov	r1, r4
    d844:	2202      	movs	r2, #2
    d846:	2000      	movs	r0, #0
    d848:	601a      	str	r2, [r3, #0]
    d84a:	f001 fe7f 	bl	f54c <am_hal_uart_initialize>
    d84e:	2200      	movs	r2, #0
    d850:	4611      	mov	r1, r2
    d852:	6820      	ldr	r0, [r4, #0]
    d854:	f001 feb6 	bl	f5c4 <am_hal_uart_power_control>
    d858:	6820      	ldr	r0, [r4, #0]
    d85a:	490b      	ldr	r1, [pc, #44]	; (d888 <am_bsp_uart_printf_enable+0x4c>)
    d85c:	f001 ff24 	bl	f6a8 <am_hal_uart_configure>
    d860:	4b0a      	ldr	r3, [pc, #40]	; (d88c <am_bsp_uart_printf_enable+0x50>)
    d862:	2030      	movs	r0, #48	; 0x30
    d864:	6819      	ldr	r1, [r3, #0]
    d866:	f000 fdab 	bl	e3c0 <am_hal_gpio_pinconfig>
    d86a:	4b09      	ldr	r3, [pc, #36]	; (d890 <am_bsp_uart_printf_enable+0x54>)
    d86c:	2031      	movs	r0, #49	; 0x31
    d86e:	6819      	ldr	r1, [r3, #0]
    d870:	f000 fda6 	bl	e3c0 <am_hal_gpio_pinconfig>
    d874:	4807      	ldr	r0, [pc, #28]	; (d894 <am_bsp_uart_printf_enable+0x58>)
    d876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d87a:	f7fe be3b 	b.w	c4f4 <am_util_stdio_printf_init>
    d87e:	bf00      	nop
    d880:	10001174 	.word	0x10001174
    d884:	10001178 	.word	0x10001178
    d888:	000102cc 	.word	0x000102cc
    d88c:	000102f8 	.word	0x000102f8
    d890:	000102f4 	.word	0x000102f4
    d894:	0000d725 	.word	0x0000d725

0000d898 <am_hal_adc_initialize>:
    d898:	b108      	cbz	r0, d89e <am_hal_adc_initialize+0x6>
    d89a:	2005      	movs	r0, #5
    d89c:	4770      	bx	lr
    d89e:	b139      	cbz	r1, d8b0 <am_hal_adc_initialize+0x18>
    d8a0:	4a1b      	ldr	r2, [pc, #108]	; (d910 <am_hal_adc_initialize+0x78>)
    d8a2:	b538      	push	{r3, r4, r5, lr}
    d8a4:	78d3      	ldrb	r3, [r2, #3]
    d8a6:	f013 0401 	ands.w	r4, r3, #1
    d8aa:	d003      	beq.n	d8b4 <am_hal_adc_initialize+0x1c>
    d8ac:	2007      	movs	r0, #7
    d8ae:	bd38      	pop	{r3, r4, r5, pc}
    d8b0:	2006      	movs	r0, #6
    d8b2:	4770      	bx	lr
    d8b4:	f043 0301 	orr.w	r3, r3, #1
    d8b8:	70d3      	strb	r3, [r2, #3]
    d8ba:	6813      	ldr	r3, [r2, #0]
    d8bc:	4d15      	ldr	r5, [pc, #84]	; (d914 <am_hal_adc_initialize+0x7c>)
    d8be:	4816      	ldr	r0, [pc, #88]	; (d918 <am_hal_adc_initialize+0x80>)
    d8c0:	6054      	str	r4, [r2, #4]
    d8c2:	f365 0317 	bfi	r3, r5, #0, #24
    d8c6:	6013      	str	r3, [r2, #0]
    d8c8:	6004      	str	r4, [r0, #0]
    d8ca:	600a      	str	r2, [r1, #0]
    d8cc:	4813      	ldr	r0, [pc, #76]	; (d91c <am_hal_adc_initialize+0x84>)
    d8ce:	4d14      	ldr	r5, [pc, #80]	; (d920 <am_hal_adc_initialize+0x88>)
    d8d0:	f000 fd6c 	bl	e3ac <am_hal_flash_load_ui32>
    d8d4:	6028      	str	r0, [r5, #0]
    d8d6:	4813      	ldr	r0, [pc, #76]	; (d924 <am_hal_adc_initialize+0x8c>)
    d8d8:	f000 fd68 	bl	e3ac <am_hal_flash_load_ui32>
    d8dc:	6068      	str	r0, [r5, #4]
    d8de:	4812      	ldr	r0, [pc, #72]	; (d928 <am_hal_adc_initialize+0x90>)
    d8e0:	f000 fd64 	bl	e3ac <am_hal_flash_load_ui32>
    d8e4:	682b      	ldr	r3, [r5, #0]
    d8e6:	60a8      	str	r0, [r5, #8]
    d8e8:	3301      	adds	r3, #1
    d8ea:	d008      	beq.n	d8fe <am_hal_adc_initialize+0x66>
    d8ec:	686b      	ldr	r3, [r5, #4]
    d8ee:	3301      	adds	r3, #1
    d8f0:	d005      	beq.n	d8fe <am_hal_adc_initialize+0x66>
    d8f2:	3001      	adds	r0, #1
    d8f4:	d003      	beq.n	d8fe <am_hal_adc_initialize+0x66>
    d8f6:	2301      	movs	r3, #1
    d8f8:	732b      	strb	r3, [r5, #12]
    d8fa:	4620      	mov	r0, r4
    d8fc:	bd38      	pop	{r3, r4, r5, pc}
    d8fe:	490b      	ldr	r1, [pc, #44]	; (d92c <am_hal_adc_initialize+0x94>)
    d900:	4a0b      	ldr	r2, [pc, #44]	; (d930 <am_hal_adc_initialize+0x98>)
    d902:	4b0c      	ldr	r3, [pc, #48]	; (d934 <am_hal_adc_initialize+0x9c>)
    d904:	6029      	str	r1, [r5, #0]
    d906:	2000      	movs	r0, #0
    d908:	606a      	str	r2, [r5, #4]
    d90a:	60ab      	str	r3, [r5, #8]
    d90c:	7328      	strb	r0, [r5, #12]
    d90e:	bd38      	pop	{r3, r4, r5, pc}
    d910:	1000170c 	.word	0x1000170c
    d914:	00afafaf 	.word	0x00afafaf
    d918:	10001708 	.word	0x10001708
    d91c:	50023840 	.word	0x50023840
    d920:	1000117c 	.word	0x1000117c
    d924:	50023844 	.word	0x50023844
    d928:	50023848 	.word	0x50023848
    d92c:	4395c000 	.word	0x4395c000
    d930:	3f839874 	.word	0x3f839874
    d934:	bb8c47a1 	.word	0xbb8c47a1

0000d938 <am_hal_adc_deinitialize>:
    d938:	b128      	cbz	r0, d946 <am_hal_adc_deinitialize+0xe>
    d93a:	6803      	ldr	r3, [r0, #0]
    d93c:	4a0c      	ldr	r2, [pc, #48]	; (d970 <am_hal_adc_deinitialize+0x38>)
    d93e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d942:	4293      	cmp	r3, r2
    d944:	d001      	beq.n	d94a <am_hal_adc_deinitialize+0x12>
    d946:	2002      	movs	r0, #2
    d948:	4770      	bx	lr
    d94a:	78c3      	ldrb	r3, [r0, #3]
    d94c:	079b      	lsls	r3, r3, #30
    d94e:	d508      	bpl.n	d962 <am_hal_adc_deinitialize+0x2a>
    d950:	4b08      	ldr	r3, [pc, #32]	; (d974 <am_hal_adc_deinitialize+0x3c>)
    d952:	681a      	ldr	r2, [r3, #0]
    d954:	f36f 0200 	bfc	r2, #0, #1
    d958:	601a      	str	r2, [r3, #0]
    d95a:	78c3      	ldrb	r3, [r0, #3]
    d95c:	f36f 0341 	bfc	r3, #1, #1
    d960:	70c3      	strb	r3, [r0, #3]
    d962:	78c3      	ldrb	r3, [r0, #3]
    d964:	f36f 0300 	bfc	r3, #0, #1
    d968:	70c3      	strb	r3, [r0, #3]
    d96a:	2000      	movs	r0, #0
    d96c:	4770      	bx	lr
    d96e:	bf00      	nop
    d970:	01afafaf 	.word	0x01afafaf
    d974:	50010000 	.word	0x50010000

0000d978 <am_hal_adc_configure>:
    d978:	b128      	cbz	r0, d986 <am_hal_adc_configure+0xe>
    d97a:	6803      	ldr	r3, [r0, #0]
    d97c:	4a18      	ldr	r2, [pc, #96]	; (d9e0 <am_hal_adc_configure+0x68>)
    d97e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d982:	4293      	cmp	r3, r2
    d984:	d001      	beq.n	d98a <am_hal_adc_configure+0x12>
    d986:	2002      	movs	r0, #2
    d988:	4770      	bx	lr
    d98a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d98c:	7808      	ldrb	r0, [r1, #0]
    d98e:	784d      	ldrb	r5, [r1, #1]
    d990:	788c      	ldrb	r4, [r1, #2]
    d992:	f891 e003 	ldrb.w	lr, [r1, #3]
    d996:	790f      	ldrb	r7, [r1, #4]
    d998:	794a      	ldrb	r2, [r1, #5]
    d99a:	798b      	ldrb	r3, [r1, #6]
    d99c:	4e11      	ldr	r6, [pc, #68]	; (d9e4 <am_hal_adc_configure+0x6c>)
    d99e:	0600      	lsls	r0, r0, #24
    d9a0:	04ed      	lsls	r5, r5, #19
    d9a2:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d9a6:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    d9aa:	4328      	orrs	r0, r5
    d9ac:	0424      	lsls	r4, r4, #16
    d9ae:	ea4f 210e 	mov.w	r1, lr, lsl #8
    d9b2:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    d9b6:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    d9ba:	4304      	orrs	r4, r0
    d9bc:	f401 7040 	and.w	r0, r1, #768	; 0x300
    d9c0:	0139      	lsls	r1, r7, #4
    d9c2:	4320      	orrs	r0, r4
    d9c4:	f001 0110 	and.w	r1, r1, #16
    d9c8:	00d2      	lsls	r2, r2, #3
    d9ca:	4301      	orrs	r1, r0
    d9cc:	f002 0208 	and.w	r2, r2, #8
    d9d0:	009b      	lsls	r3, r3, #2
    d9d2:	430a      	orrs	r2, r1
    d9d4:	f003 0304 	and.w	r3, r3, #4
    d9d8:	4313      	orrs	r3, r2
    d9da:	6033      	str	r3, [r6, #0]
    d9dc:	2000      	movs	r0, #0
    d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9e0:	01afafaf 	.word	0x01afafaf
    d9e4:	50010000 	.word	0x50010000

0000d9e8 <am_hal_adc_configure_slot>:
    d9e8:	b128      	cbz	r0, d9f6 <am_hal_adc_configure_slot+0xe>
    d9ea:	6803      	ldr	r3, [r0, #0]
    d9ec:	4816      	ldr	r0, [pc, #88]	; (da48 <am_hal_adc_configure_slot+0x60>)
    d9ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    d9f2:	4283      	cmp	r3, r0
    d9f4:	d001      	beq.n	d9fa <am_hal_adc_configure_slot+0x12>
    d9f6:	2002      	movs	r0, #2
    d9f8:	4770      	bx	lr
    d9fa:	2907      	cmp	r1, #7
    d9fc:	d901      	bls.n	da02 <am_hal_adc_configure_slot+0x1a>
    d9fe:	2005      	movs	r0, #5
    da00:	4770      	bx	lr
    da02:	b5f0      	push	{r4, r5, r6, r7, lr}
    da04:	7813      	ldrb	r3, [r2, #0]
    da06:	7854      	ldrb	r4, [r2, #1]
    da08:	7890      	ldrb	r0, [r2, #2]
    da0a:	78d7      	ldrb	r7, [r2, #3]
    da0c:	f892 e004 	ldrb.w	lr, [r2, #4]
    da10:	4d0e      	ldr	r5, [pc, #56]	; (da4c <am_hal_adc_configure_slot+0x64>)
    da12:	4e0f      	ldr	r6, [pc, #60]	; (da50 <am_hal_adc_configure_slot+0x68>)
    da14:	061b      	lsls	r3, r3, #24
    da16:	0424      	lsls	r4, r4, #16
    da18:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    da1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    da20:	4323      	orrs	r3, r4
    da22:	0202      	lsls	r2, r0, #8
    da24:	ea43 0e0e 	orr.w	lr, r3, lr
    da28:	440d      	add	r5, r1
    da2a:	007b      	lsls	r3, r7, #1
    da2c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    da30:	ea4e 0202 	orr.w	r2, lr, r2
    da34:	00ad      	lsls	r5, r5, #2
    da36:	f003 0302 	and.w	r3, r3, #2
    da3a:	4313      	orrs	r3, r2
    da3c:	602b      	str	r3, [r5, #0]
    da3e:	6833      	ldr	r3, [r6, #0]
    da40:	3301      	adds	r3, #1
    da42:	6033      	str	r3, [r6, #0]
    da44:	2000      	movs	r0, #0
    da46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da48:	01afafaf 	.word	0x01afafaf
    da4c:	14004003 	.word	0x14004003
    da50:	10001708 	.word	0x10001708

0000da54 <am_hal_adc_enable>:
    da54:	4603      	mov	r3, r0
    da56:	b128      	cbz	r0, da64 <am_hal_adc_enable+0x10>
    da58:	6802      	ldr	r2, [r0, #0]
    da5a:	490c      	ldr	r1, [pc, #48]	; (da8c <am_hal_adc_enable+0x38>)
    da5c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    da60:	428a      	cmp	r2, r1
    da62:	d001      	beq.n	da68 <am_hal_adc_enable+0x14>
    da64:	2002      	movs	r0, #2
    da66:	4770      	bx	lr
    da68:	78c2      	ldrb	r2, [r0, #3]
    da6a:	f002 0202 	and.w	r2, r2, #2
    da6e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    da72:	b94a      	cbnz	r2, da88 <am_hal_adc_enable+0x34>
    da74:	4906      	ldr	r1, [pc, #24]	; (da90 <am_hal_adc_enable+0x3c>)
    da76:	680a      	ldr	r2, [r1, #0]
    da78:	f042 0201 	orr.w	r2, r2, #1
    da7c:	600a      	str	r2, [r1, #0]
    da7e:	78da      	ldrb	r2, [r3, #3]
    da80:	f042 0202 	orr.w	r2, r2, #2
    da84:	70da      	strb	r2, [r3, #3]
    da86:	4770      	bx	lr
    da88:	2000      	movs	r0, #0
    da8a:	4770      	bx	lr
    da8c:	01afafaf 	.word	0x01afafaf
    da90:	50010000 	.word	0x50010000

0000da94 <am_hal_adc_disable>:
    da94:	b128      	cbz	r0, daa2 <am_hal_adc_disable+0xe>
    da96:	6803      	ldr	r3, [r0, #0]
    da98:	4a08      	ldr	r2, [pc, #32]	; (dabc <am_hal_adc_disable+0x28>)
    da9a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    da9e:	4293      	cmp	r3, r2
    daa0:	d001      	beq.n	daa6 <am_hal_adc_disable+0x12>
    daa2:	2002      	movs	r0, #2
    daa4:	4770      	bx	lr
    daa6:	4b06      	ldr	r3, [pc, #24]	; (dac0 <am_hal_adc_disable+0x2c>)
    daa8:	681a      	ldr	r2, [r3, #0]
    daaa:	f36f 0200 	bfc	r2, #0, #1
    daae:	601a      	str	r2, [r3, #0]
    dab0:	78c3      	ldrb	r3, [r0, #3]
    dab2:	f36f 0341 	bfc	r3, #1, #1
    dab6:	70c3      	strb	r3, [r0, #3]
    dab8:	2000      	movs	r0, #0
    daba:	4770      	bx	lr
    dabc:	01afafaf 	.word	0x01afafaf
    dac0:	50010000 	.word	0x50010000

0000dac4 <am_hal_adc_interrupt_enable>:
    dac4:	b128      	cbz	r0, dad2 <am_hal_adc_interrupt_enable+0xe>
    dac6:	6803      	ldr	r3, [r0, #0]
    dac8:	4a07      	ldr	r2, [pc, #28]	; (dae8 <am_hal_adc_interrupt_enable+0x24>)
    daca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dace:	4293      	cmp	r3, r2
    dad0:	d001      	beq.n	dad6 <am_hal_adc_interrupt_enable+0x12>
    dad2:	2002      	movs	r0, #2
    dad4:	4770      	bx	lr
    dad6:	4b05      	ldr	r3, [pc, #20]	; (daec <am_hal_adc_interrupt_enable+0x28>)
    dad8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dadc:	4311      	orrs	r1, r2
    dade:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dae2:	2000      	movs	r0, #0
    dae4:	4770      	bx	lr
    dae6:	bf00      	nop
    dae8:	01afafaf 	.word	0x01afafaf
    daec:	50010000 	.word	0x50010000

0000daf0 <am_hal_adc_interrupt_status>:
    daf0:	b128      	cbz	r0, dafe <am_hal_adc_interrupt_status+0xe>
    daf2:	6803      	ldr	r3, [r0, #0]
    daf4:	480b      	ldr	r0, [pc, #44]	; (db24 <am_hal_adc_interrupt_status+0x34>)
    daf6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dafa:	4283      	cmp	r3, r0
    dafc:	d001      	beq.n	db02 <am_hal_adc_interrupt_status+0x12>
    dafe:	2002      	movs	r0, #2
    db00:	4770      	bx	lr
    db02:	b92a      	cbnz	r2, db10 <am_hal_adc_interrupt_status+0x20>
    db04:	4b08      	ldr	r3, [pc, #32]	; (db28 <am_hal_adc_interrupt_status+0x38>)
    db06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    db0a:	600b      	str	r3, [r1, #0]
    db0c:	4610      	mov	r0, r2
    db0e:	4770      	bx	lr
    db10:	4a05      	ldr	r2, [pc, #20]	; (db28 <am_hal_adc_interrupt_status+0x38>)
    db12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    db16:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    db1a:	4003      	ands	r3, r0
    db1c:	600b      	str	r3, [r1, #0]
    db1e:	2000      	movs	r0, #0
    db20:	4770      	bx	lr
    db22:	bf00      	nop
    db24:	01afafaf 	.word	0x01afafaf
    db28:	50010000 	.word	0x50010000

0000db2c <am_hal_adc_interrupt_clear>:
    db2c:	b128      	cbz	r0, db3a <am_hal_adc_interrupt_clear+0xe>
    db2e:	6803      	ldr	r3, [r0, #0]
    db30:	4a05      	ldr	r2, [pc, #20]	; (db48 <am_hal_adc_interrupt_clear+0x1c>)
    db32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db36:	4293      	cmp	r3, r2
    db38:	d001      	beq.n	db3e <am_hal_adc_interrupt_clear+0x12>
    db3a:	2002      	movs	r0, #2
    db3c:	4770      	bx	lr
    db3e:	4b03      	ldr	r3, [pc, #12]	; (db4c <am_hal_adc_interrupt_clear+0x20>)
    db40:	2000      	movs	r0, #0
    db42:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    db46:	4770      	bx	lr
    db48:	01afafaf 	.word	0x01afafaf
    db4c:	50010000 	.word	0x50010000

0000db50 <am_hal_adc_samples_read>:
    db50:	b148      	cbz	r0, db66 <am_hal_adc_samples_read+0x16>
    db52:	6800      	ldr	r0, [r0, #0]
    db54:	b470      	push	{r4, r5, r6}
    db56:	4c2a      	ldr	r4, [pc, #168]	; (dc00 <am_hal_adc_samples_read+0xb0>)
    db58:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    db5c:	42a0      	cmp	r0, r4
    db5e:	d004      	beq.n	db6a <am_hal_adc_samples_read+0x1a>
    db60:	2002      	movs	r0, #2
    db62:	bc70      	pop	{r4, r5, r6}
    db64:	4770      	bx	lr
    db66:	2002      	movs	r0, #2
    db68:	4770      	bx	lr
    db6a:	9803      	ldr	r0, [sp, #12]
    db6c:	b1e0      	cbz	r0, dba8 <am_hal_adc_samples_read+0x58>
    db6e:	2000      	movs	r0, #0
    db70:	681c      	ldr	r4, [r3, #0]
    db72:	6018      	str	r0, [r3, #0]
    db74:	b1d2      	cbz	r2, dbac <am_hal_adc_samples_read+0x5c>
    db76:	9903      	ldr	r1, [sp, #12]
    db78:	4d22      	ldr	r5, [pc, #136]	; (dc04 <am_hal_adc_samples_read+0xb4>)
    db7a:	3a04      	subs	r2, #4
    db7c:	3108      	adds	r1, #8
    db7e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    db82:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    db84:	f3c0 7002 	ubfx	r0, r0, #28, #3
    db88:	f841 0c04 	str.w	r0, [r1, #-4]
    db8c:	6810      	ldr	r0, [r2, #0]
    db8e:	f3c0 108d 	ubfx	r0, r0, #6, #14
    db92:	f841 0c08 	str.w	r0, [r1, #-8]
    db96:	6818      	ldr	r0, [r3, #0]
    db98:	3001      	adds	r0, #1
    db9a:	4284      	cmp	r4, r0
    db9c:	f101 0108 	add.w	r1, r1, #8
    dba0:	6018      	str	r0, [r3, #0]
    dba2:	d8ec      	bhi.n	db7e <am_hal_adc_samples_read+0x2e>
    dba4:	2000      	movs	r0, #0
    dba6:	e7dc      	b.n	db62 <am_hal_adc_samples_read+0x12>
    dba8:	2006      	movs	r0, #6
    dbaa:	e7da      	b.n	db62 <am_hal_adc_samples_read+0x12>
    dbac:	9a03      	ldr	r2, [sp, #12]
    dbae:	4e15      	ldr	r6, [pc, #84]	; (dc04 <am_hal_adc_samples_read+0xb4>)
    dbb0:	f102 0008 	add.w	r0, r2, #8
    dbb4:	b9a1      	cbnz	r1, dbe0 <am_hal_adc_samples_read+0x90>
    dbb6:	e001      	b.n	dbbc <am_hal_adc_samples_read+0x6c>
    dbb8:	428c      	cmp	r4, r1
    dbba:	d9f3      	bls.n	dba4 <am_hal_adc_samples_read+0x54>
    dbbc:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    dbbe:	f3c2 118d 	ubfx	r1, r2, #6, #14
    dbc2:	f3c2 7502 	ubfx	r5, r2, #28, #3
    dbc6:	e900 0022 	stmdb	r0, {r1, r5}
    dbca:	6819      	ldr	r1, [r3, #0]
    dbcc:	f3c2 5207 	ubfx	r2, r2, #20, #8
    dbd0:	3101      	adds	r1, #1
    dbd2:	3008      	adds	r0, #8
    dbd4:	6019      	str	r1, [r3, #0]
    dbd6:	2a00      	cmp	r2, #0
    dbd8:	d1ee      	bne.n	dbb8 <am_hal_adc_samples_read+0x68>
    dbda:	e7e3      	b.n	dba4 <am_hal_adc_samples_read+0x54>
    dbdc:	428c      	cmp	r4, r1
    dbde:	d9e1      	bls.n	dba4 <am_hal_adc_samples_read+0x54>
    dbe0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    dbe2:	f3c2 0113 	ubfx	r1, r2, #0, #20
    dbe6:	f3c2 7502 	ubfx	r5, r2, #28, #3
    dbea:	e900 0022 	stmdb	r0, {r1, r5}
    dbee:	6819      	ldr	r1, [r3, #0]
    dbf0:	f3c2 5207 	ubfx	r2, r2, #20, #8
    dbf4:	3101      	adds	r1, #1
    dbf6:	3008      	adds	r0, #8
    dbf8:	6019      	str	r1, [r3, #0]
    dbfa:	2a00      	cmp	r2, #0
    dbfc:	d1ee      	bne.n	dbdc <am_hal_adc_samples_read+0x8c>
    dbfe:	e7d1      	b.n	dba4 <am_hal_adc_samples_read+0x54>
    dc00:	01afafaf 	.word	0x01afafaf
    dc04:	50010000 	.word	0x50010000

0000dc08 <am_hal_adc_sw_trigger>:
    dc08:	b128      	cbz	r0, dc16 <am_hal_adc_sw_trigger+0xe>
    dc0a:	6803      	ldr	r3, [r0, #0]
    dc0c:	4a05      	ldr	r2, [pc, #20]	; (dc24 <am_hal_adc_sw_trigger+0x1c>)
    dc0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc12:	4293      	cmp	r3, r2
    dc14:	d001      	beq.n	dc1a <am_hal_adc_sw_trigger+0x12>
    dc16:	2002      	movs	r0, #2
    dc18:	4770      	bx	lr
    dc1a:	4b03      	ldr	r3, [pc, #12]	; (dc28 <am_hal_adc_sw_trigger+0x20>)
    dc1c:	2237      	movs	r2, #55	; 0x37
    dc1e:	609a      	str	r2, [r3, #8]
    dc20:	2000      	movs	r0, #0
    dc22:	4770      	bx	lr
    dc24:	01afafaf 	.word	0x01afafaf
    dc28:	50010000 	.word	0x50010000

0000dc2c <am_hal_adc_power_control>:
    dc2c:	b140      	cbz	r0, dc40 <am_hal_adc_power_control+0x14>
    dc2e:	6803      	ldr	r3, [r0, #0]
    dc30:	b570      	push	{r4, r5, r6, lr}
    dc32:	4c2e      	ldr	r4, [pc, #184]	; (dcec <am_hal_adc_power_control+0xc0>)
    dc34:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dc38:	42a3      	cmp	r3, r4
    dc3a:	d003      	beq.n	dc44 <am_hal_adc_power_control+0x18>
    dc3c:	2002      	movs	r0, #2
    dc3e:	bd70      	pop	{r4, r5, r6, pc}
    dc40:	2002      	movs	r0, #2
    dc42:	4770      	bx	lr
    dc44:	4604      	mov	r4, r0
    dc46:	4615      	mov	r5, r2
    dc48:	460e      	mov	r6, r1
    dc4a:	b329      	cbz	r1, dc98 <am_hal_adc_power_control+0x6c>
    dc4c:	2902      	cmp	r1, #2
    dc4e:	d821      	bhi.n	dc94 <am_hal_adc_power_control+0x68>
    dc50:	b1da      	cbz	r2, dc8a <am_hal_adc_power_control+0x5e>
    dc52:	4b27      	ldr	r3, [pc, #156]	; (dcf0 <am_hal_adc_power_control+0xc4>)
    dc54:	68da      	ldr	r2, [r3, #12]
    dc56:	6142      	str	r2, [r0, #20]
    dc58:	691a      	ldr	r2, [r3, #16]
    dc5a:	6182      	str	r2, [r0, #24]
    dc5c:	695a      	ldr	r2, [r3, #20]
    dc5e:	61c2      	str	r2, [r0, #28]
    dc60:	699a      	ldr	r2, [r3, #24]
    dc62:	6202      	str	r2, [r0, #32]
    dc64:	69da      	ldr	r2, [r3, #28]
    dc66:	6242      	str	r2, [r0, #36]	; 0x24
    dc68:	6a1a      	ldr	r2, [r3, #32]
    dc6a:	6282      	str	r2, [r0, #40]	; 0x28
    dc6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dc6e:	62c2      	str	r2, [r0, #44]	; 0x2c
    dc70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc72:	6302      	str	r2, [r0, #48]	; 0x30
    dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dc76:	6342      	str	r2, [r0, #52]	; 0x34
    dc78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dc7a:	6382      	str	r2, [r0, #56]	; 0x38
    dc7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dc80:	63c2      	str	r2, [r0, #60]	; 0x3c
    dc82:	681b      	ldr	r3, [r3, #0]
    dc84:	6103      	str	r3, [r0, #16]
    dc86:	2301      	movs	r3, #1
    dc88:	7303      	strb	r3, [r0, #12]
    dc8a:	200a      	movs	r0, #10
    dc8c:	f001 fb76 	bl	f37c <am_hal_pwrctrl_periph_disable>
    dc90:	2000      	movs	r0, #0
    dc92:	bd70      	pop	{r4, r5, r6, pc}
    dc94:	2006      	movs	r0, #6
    dc96:	bd70      	pop	{r4, r5, r6, pc}
    dc98:	b11a      	cbz	r2, dca2 <am_hal_adc_power_control+0x76>
    dc9a:	7b03      	ldrb	r3, [r0, #12]
    dc9c:	b933      	cbnz	r3, dcac <am_hal_adc_power_control+0x80>
    dc9e:	2007      	movs	r0, #7
    dca0:	bd70      	pop	{r4, r5, r6, pc}
    dca2:	200a      	movs	r0, #10
    dca4:	f001 fb40 	bl	f328 <am_hal_pwrctrl_periph_enable>
    dca8:	4628      	mov	r0, r5
    dcaa:	bd70      	pop	{r4, r5, r6, pc}
    dcac:	200a      	movs	r0, #10
    dcae:	f001 fb3b 	bl	f328 <am_hal_pwrctrl_periph_enable>
    dcb2:	4b0f      	ldr	r3, [pc, #60]	; (dcf0 <am_hal_adc_power_control+0xc4>)
    dcb4:	6962      	ldr	r2, [r4, #20]
    dcb6:	60da      	str	r2, [r3, #12]
    dcb8:	69a2      	ldr	r2, [r4, #24]
    dcba:	611a      	str	r2, [r3, #16]
    dcbc:	69e2      	ldr	r2, [r4, #28]
    dcbe:	615a      	str	r2, [r3, #20]
    dcc0:	6a22      	ldr	r2, [r4, #32]
    dcc2:	619a      	str	r2, [r3, #24]
    dcc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    dcc6:	61da      	str	r2, [r3, #28]
    dcc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dcca:	621a      	str	r2, [r3, #32]
    dccc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    dcce:	625a      	str	r2, [r3, #36]	; 0x24
    dcd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    dcd2:	629a      	str	r2, [r3, #40]	; 0x28
    dcd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    dcd6:	62da      	str	r2, [r3, #44]	; 0x2c
    dcd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    dcda:	631a      	str	r2, [r3, #48]	; 0x30
    dcdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    dcde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    dce2:	6922      	ldr	r2, [r4, #16]
    dce4:	601a      	str	r2, [r3, #0]
    dce6:	4630      	mov	r0, r6
    dce8:	7326      	strb	r6, [r4, #12]
    dcea:	bd70      	pop	{r4, r5, r6, pc}
    dcec:	01afafaf 	.word	0x01afafaf
    dcf0:	50010000 	.word	0x50010000

0000dcf4 <am_hal_cachectrl_config>:
    dcf4:	b530      	push	{r4, r5, lr}
    dcf6:	b083      	sub	sp, #12
    dcf8:	4605      	mov	r5, r0
    dcfa:	f000 fd17 	bl	e72c <am_hal_interrupt_master_disable>
    dcfe:	4c0f      	ldr	r4, [pc, #60]	; (dd3c <am_hal_cachectrl_config+0x48>)
    dd00:	9001      	str	r0, [sp, #4]
    dd02:	6823      	ldr	r3, [r4, #0]
    dd04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    dd08:	6023      	str	r3, [r4, #0]
    dd0a:	9801      	ldr	r0, [sp, #4]
    dd0c:	f000 fd12 	bl	e734 <am_hal_interrupt_master_set>
    dd10:	78ab      	ldrb	r3, [r5, #2]
    dd12:	782a      	ldrb	r2, [r5, #0]
    dd14:	7869      	ldrb	r1, [r5, #1]
    dd16:	005b      	lsls	r3, r3, #1
    dd18:	0112      	lsls	r2, r2, #4
    dd1a:	b2d2      	uxtb	r2, r2
    dd1c:	f003 0302 	and.w	r3, r3, #2
    dd20:	4313      	orrs	r3, r2
    dd22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dd26:	020a      	lsls	r2, r1, #8
    dd28:	f402 7240 	and.w	r2, r2, #768	; 0x300
    dd2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dd30:	4313      	orrs	r3, r2
    dd32:	2000      	movs	r0, #0
    dd34:	6023      	str	r3, [r4, #0]
    dd36:	b003      	add	sp, #12
    dd38:	bd30      	pop	{r4, r5, pc}
    dd3a:	bf00      	nop
    dd3c:	40018000 	.word	0x40018000

0000dd40 <am_hal_cachectrl_enable>:
    dd40:	4a03      	ldr	r2, [pc, #12]	; (dd50 <am_hal_cachectrl_enable+0x10>)
    dd42:	6813      	ldr	r3, [r2, #0]
    dd44:	f043 0301 	orr.w	r3, r3, #1
    dd48:	6013      	str	r3, [r2, #0]
    dd4a:	2000      	movs	r0, #0
    dd4c:	4770      	bx	lr
    dd4e:	bf00      	nop
    dd50:	40018000 	.word	0x40018000

0000dd54 <am_hal_cachectrl_control>:
    dd54:	b510      	push	{r4, lr}
    dd56:	3801      	subs	r0, #1
    dd58:	b08e      	sub	sp, #56	; 0x38
    dd5a:	2810      	cmp	r0, #16
    dd5c:	f200 8143 	bhi.w	dfe6 <am_hal_cachectrl_control+0x292>
    dd60:	e8df f010 	tbh	[pc, r0, lsl #1]
    dd64:	01380136 	.word	0x01380136
    dd68:	0011013e 	.word	0x0011013e
    dd6c:	001a0018 	.word	0x001a0018
    dd70:	001f001c 	.word	0x001f001c
    dd74:	00300022 	.word	0x00300022
    dd78:	0074003c 	.word	0x0074003c
    dd7c:	00e400ac 	.word	0x00e400ac
    dd80:	011a00ff 	.word	0x011a00ff
    dd84:	0120      	.short	0x0120
    dd86:	f44f 7208 	mov.w	r2, #544	; 0x220
    dd8a:	4ba8      	ldr	r3, [pc, #672]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    dd8c:	2000      	movs	r0, #0
    dd8e:	609a      	str	r2, [r3, #8]
    dd90:	b00e      	add	sp, #56	; 0x38
    dd92:	bd10      	pop	{r4, pc}
    dd94:	2240      	movs	r2, #64	; 0x40
    dd96:	e7f8      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dd98:	2220      	movs	r2, #32
    dd9a:	e7f6      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dd9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    dda0:	e7f3      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dda2:	f44f 7200 	mov.w	r2, #512	; 0x200
    dda6:	e7f0      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dda8:	f000 fcc0 	bl	e72c <am_hal_interrupt_master_disable>
    ddac:	4a9f      	ldr	r2, [pc, #636]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    ddae:	9000      	str	r0, [sp, #0]
    ddb0:	6813      	ldr	r3, [r2, #0]
    ddb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ddb6:	6013      	str	r3, [r2, #0]
    ddb8:	9800      	ldr	r0, [sp, #0]
    ddba:	f000 fcbb 	bl	e734 <am_hal_interrupt_master_set>
    ddbe:	2000      	movs	r0, #0
    ddc0:	b00e      	add	sp, #56	; 0x38
    ddc2:	bd10      	pop	{r4, pc}
    ddc4:	f000 fcb2 	bl	e72c <am_hal_interrupt_master_disable>
    ddc8:	4a98      	ldr	r2, [pc, #608]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    ddca:	9001      	str	r0, [sp, #4]
    ddcc:	6813      	ldr	r3, [r2, #0]
    ddce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ddd2:	6013      	str	r3, [r2, #0]
    ddd4:	9801      	ldr	r0, [sp, #4]
    ddd6:	f000 fcad 	bl	e734 <am_hal_interrupt_master_set>
    ddda:	e7f0      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    dddc:	f000 fca6 	bl	e72c <am_hal_interrupt_master_disable>
    dde0:	4603      	mov	r3, r0
    dde2:	4893      	ldr	r0, [pc, #588]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    dde4:	9302      	str	r3, [sp, #8]
    dde6:	f000 fae1 	bl	e3ac <am_hal_flash_load_ui32>
    ddea:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    ddee:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    ddf2:	488f      	ldr	r0, [pc, #572]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    ddf4:	f000 fade 	bl	e3b4 <am_hal_flash_store_ui32>
    ddf8:	9802      	ldr	r0, [sp, #8]
    ddfa:	f000 fc9b 	bl	e734 <am_hal_interrupt_master_set>
    ddfe:	f000 fc95 	bl	e72c <am_hal_interrupt_master_disable>
    de02:	4603      	mov	r3, r0
    de04:	488a      	ldr	r0, [pc, #552]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de06:	9303      	str	r3, [sp, #12]
    de08:	f000 fad0 	bl	e3ac <am_hal_flash_load_ui32>
    de0c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    de10:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    de14:	4886      	ldr	r0, [pc, #536]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de16:	f000 facd 	bl	e3b4 <am_hal_flash_store_ui32>
    de1a:	9803      	ldr	r0, [sp, #12]
    de1c:	f000 fc8a 	bl	e734 <am_hal_interrupt_master_set>
    de20:	f000 fc84 	bl	e72c <am_hal_interrupt_master_disable>
    de24:	4603      	mov	r3, r0
    de26:	4882      	ldr	r0, [pc, #520]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de28:	9304      	str	r3, [sp, #16]
    de2a:	f000 fabf 	bl	e3ac <am_hal_flash_load_ui32>
    de2e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    de32:	f021 010f 	bic.w	r1, r1, #15
    de36:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    de3a:	f041 0103 	orr.w	r1, r1, #3
    de3e:	487c      	ldr	r0, [pc, #496]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de40:	f000 fab8 	bl	e3b4 <am_hal_flash_store_ui32>
    de44:	9804      	ldr	r0, [sp, #16]
    de46:	f000 fc75 	bl	e734 <am_hal_interrupt_master_set>
    de4a:	e7b8      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    de4c:	f000 fc6e 	bl	e72c <am_hal_interrupt_master_disable>
    de50:	4603      	mov	r3, r0
    de52:	4877      	ldr	r0, [pc, #476]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de54:	9305      	str	r3, [sp, #20]
    de56:	f000 faa9 	bl	e3ac <am_hal_flash_load_ui32>
    de5a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    de5e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    de62:	4873      	ldr	r0, [pc, #460]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de64:	f000 faa6 	bl	e3b4 <am_hal_flash_store_ui32>
    de68:	9805      	ldr	r0, [sp, #20]
    de6a:	f000 fc63 	bl	e734 <am_hal_interrupt_master_set>
    de6e:	f000 fc5d 	bl	e72c <am_hal_interrupt_master_disable>
    de72:	4603      	mov	r3, r0
    de74:	486e      	ldr	r0, [pc, #440]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de76:	9306      	str	r3, [sp, #24]
    de78:	f000 fa98 	bl	e3ac <am_hal_flash_load_ui32>
    de7c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    de80:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    de84:	486a      	ldr	r0, [pc, #424]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de86:	f000 fa95 	bl	e3b4 <am_hal_flash_store_ui32>
    de8a:	9806      	ldr	r0, [sp, #24]
    de8c:	f000 fc52 	bl	e734 <am_hal_interrupt_master_set>
    de90:	f000 fc4c 	bl	e72c <am_hal_interrupt_master_disable>
    de94:	4603      	mov	r3, r0
    de96:	4866      	ldr	r0, [pc, #408]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    de98:	9307      	str	r3, [sp, #28]
    de9a:	f000 fa87 	bl	e3ac <am_hal_flash_load_ui32>
    de9e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    dea2:	f021 010f 	bic.w	r1, r1, #15
    dea6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    deaa:	f041 0101 	orr.w	r1, r1, #1
    deae:	4860      	ldr	r0, [pc, #384]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    deb0:	f000 fa80 	bl	e3b4 <am_hal_flash_store_ui32>
    deb4:	9807      	ldr	r0, [sp, #28]
    deb6:	f000 fc3d 	bl	e734 <am_hal_interrupt_master_set>
    deba:	e780      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    debc:	f000 fc36 	bl	e72c <am_hal_interrupt_master_disable>
    dec0:	4603      	mov	r3, r0
    dec2:	485b      	ldr	r0, [pc, #364]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    dec4:	9308      	str	r3, [sp, #32]
    dec6:	f000 fa71 	bl	e3ac <am_hal_flash_load_ui32>
    deca:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    dece:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    ded2:	4857      	ldr	r0, [pc, #348]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    ded4:	f000 fa6e 	bl	e3b4 <am_hal_flash_store_ui32>
    ded8:	9808      	ldr	r0, [sp, #32]
    deda:	f000 fc2b 	bl	e734 <am_hal_interrupt_master_set>
    dede:	f000 fc25 	bl	e72c <am_hal_interrupt_master_disable>
    dee2:	4603      	mov	r3, r0
    dee4:	4852      	ldr	r0, [pc, #328]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    dee6:	9309      	str	r3, [sp, #36]	; 0x24
    dee8:	f000 fa60 	bl	e3ac <am_hal_flash_load_ui32>
    deec:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    def0:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    def4:	484e      	ldr	r0, [pc, #312]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    def6:	f000 fa5d 	bl	e3b4 <am_hal_flash_store_ui32>
    defa:	9809      	ldr	r0, [sp, #36]	; 0x24
    defc:	f000 fc1a 	bl	e734 <am_hal_interrupt_master_set>
    df00:	f000 fc14 	bl	e72c <am_hal_interrupt_master_disable>
    df04:	4603      	mov	r3, r0
    df06:	484a      	ldr	r0, [pc, #296]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df08:	930a      	str	r3, [sp, #40]	; 0x28
    df0a:	f000 fa4f 	bl	e3ac <am_hal_flash_load_ui32>
    df0e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    df12:	f021 010f 	bic.w	r1, r1, #15
    df16:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    df1a:	f041 0101 	orr.w	r1, r1, #1
    df1e:	4844      	ldr	r0, [pc, #272]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df20:	f000 fa48 	bl	e3b4 <am_hal_flash_store_ui32>
    df24:	980a      	ldr	r0, [sp, #40]	; 0x28
    df26:	f000 fc05 	bl	e734 <am_hal_interrupt_master_set>
    df2a:	e748      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    df2c:	2900      	cmp	r1, #0
    df2e:	d05a      	beq.n	dfe6 <am_hal_cachectrl_control+0x292>
    df30:	680c      	ldr	r4, [r1, #0]
    df32:	2c03      	cmp	r4, #3
    df34:	d834      	bhi.n	dfa0 <am_hal_cachectrl_control+0x24c>
    df36:	f000 fbf9 	bl	e72c <am_hal_interrupt_master_disable>
    df3a:	4603      	mov	r3, r0
    df3c:	483c      	ldr	r0, [pc, #240]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df3e:	930b      	str	r3, [sp, #44]	; 0x2c
    df40:	f000 fa34 	bl	e3ac <am_hal_flash_load_ui32>
    df44:	0323      	lsls	r3, r4, #12
    df46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    df4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    df4e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    df52:	4319      	orrs	r1, r3
    df54:	4836      	ldr	r0, [pc, #216]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df56:	f000 fa2d 	bl	e3b4 <am_hal_flash_store_ui32>
    df5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    df5c:	f000 fbea 	bl	e734 <am_hal_interrupt_master_set>
    df60:	e72d      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    df62:	2900      	cmp	r1, #0
    df64:	d03f      	beq.n	dfe6 <am_hal_cachectrl_control+0x292>
    df66:	680c      	ldr	r4, [r1, #0]
    df68:	2c07      	cmp	r4, #7
    df6a:	d819      	bhi.n	dfa0 <am_hal_cachectrl_control+0x24c>
    df6c:	f000 fbde 	bl	e72c <am_hal_interrupt_master_disable>
    df70:	4603      	mov	r3, r0
    df72:	482f      	ldr	r0, [pc, #188]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df74:	930c      	str	r3, [sp, #48]	; 0x30
    df76:	f000 fa19 	bl	e3ac <am_hal_flash_load_ui32>
    df7a:	0123      	lsls	r3, r4, #4
    df7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    df80:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    df84:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    df88:	4319      	orrs	r1, r3
    df8a:	4829      	ldr	r0, [pc, #164]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    df8c:	f000 fa12 	bl	e3b4 <am_hal_flash_store_ui32>
    df90:	980c      	ldr	r0, [sp, #48]	; 0x30
    df92:	f000 fbcf 	bl	e734 <am_hal_interrupt_master_set>
    df96:	e712      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    df98:	b329      	cbz	r1, dfe6 <am_hal_cachectrl_control+0x292>
    df9a:	680c      	ldr	r4, [r1, #0]
    df9c:	2c0f      	cmp	r4, #15
    df9e:	d926      	bls.n	dfee <am_hal_cachectrl_control+0x29a>
    dfa0:	2001      	movs	r0, #1
    dfa2:	e6f5      	b.n	dd90 <am_hal_cachectrl_control+0x3c>
    dfa4:	b1f9      	cbz	r1, dfe6 <am_hal_cachectrl_control+0x292>
    dfa6:	684a      	ldr	r2, [r1, #4]
    dfa8:	4b22      	ldr	r3, [pc, #136]	; (e034 <am_hal_cachectrl_control+0x2e0>)
    dfaa:	4013      	ands	r3, r2
    dfac:	b9db      	cbnz	r3, dfe6 <am_hal_cachectrl_control+0x292>
    dfae:	688b      	ldr	r3, [r1, #8]
    dfb0:	4820      	ldr	r0, [pc, #128]	; (e034 <am_hal_cachectrl_control+0x2e0>)
    dfb2:	4018      	ands	r0, r3
    dfb4:	b9b8      	cbnz	r0, dfe6 <am_hal_cachectrl_control+0x292>
    dfb6:	780c      	ldrb	r4, [r1, #0]
    dfb8:	b374      	cbz	r4, e018 <am_hal_cachectrl_control+0x2c4>
    dfba:	2c01      	cmp	r4, #1
    dfbc:	d113      	bne.n	dfe6 <am_hal_cachectrl_control+0x292>
    dfbe:	4c1b      	ldr	r4, [pc, #108]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    dfc0:	61a2      	str	r2, [r4, #24]
    dfc2:	61e3      	str	r3, [r4, #28]
    dfc4:	784a      	ldrb	r2, [r1, #1]
    dfc6:	6823      	ldr	r3, [r4, #0]
    dfc8:	f362 03c3 	bfi	r3, r2, #3, #1
    dfcc:	6023      	str	r3, [r4, #0]
    dfce:	e6df      	b.n	dd90 <am_hal_cachectrl_control+0x3c>
    dfd0:	2201      	movs	r2, #1
    dfd2:	e6da      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dfd4:	4b15      	ldr	r3, [pc, #84]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    dfd6:	681b      	ldr	r3, [r3, #0]
    dfd8:	01db      	lsls	r3, r3, #7
    dfda:	d406      	bmi.n	dfea <am_hal_cachectrl_control+0x296>
    dfdc:	2007      	movs	r0, #7
    dfde:	e6d7      	b.n	dd90 <am_hal_cachectrl_control+0x3c>
    dfe0:	f44f 6288 	mov.w	r2, #1088	; 0x440
    dfe4:	e6d1      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dfe6:	2006      	movs	r0, #6
    dfe8:	e6d2      	b.n	dd90 <am_hal_cachectrl_control+0x3c>
    dfea:	2202      	movs	r2, #2
    dfec:	e6cd      	b.n	dd8a <am_hal_cachectrl_control+0x36>
    dfee:	f000 fb9d 	bl	e72c <am_hal_interrupt_master_disable>
    dff2:	4603      	mov	r3, r0
    dff4:	480e      	ldr	r0, [pc, #56]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    dff6:	930d      	str	r3, [sp, #52]	; 0x34
    dff8:	f000 f9d8 	bl	e3ac <am_hal_flash_load_ui32>
    dffc:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e000:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e004:	f021 010f 	bic.w	r1, r1, #15
    e008:	4321      	orrs	r1, r4
    e00a:	4809      	ldr	r0, [pc, #36]	; (e030 <am_hal_cachectrl_control+0x2dc>)
    e00c:	f000 f9d2 	bl	e3b4 <am_hal_flash_store_ui32>
    e010:	980d      	ldr	r0, [sp, #52]	; 0x34
    e012:	f000 fb8f 	bl	e734 <am_hal_interrupt_master_set>
    e016:	e6d2      	b.n	ddbe <am_hal_cachectrl_control+0x6a>
    e018:	4c04      	ldr	r4, [pc, #16]	; (e02c <am_hal_cachectrl_control+0x2d8>)
    e01a:	6122      	str	r2, [r4, #16]
    e01c:	6163      	str	r3, [r4, #20]
    e01e:	784a      	ldrb	r2, [r1, #1]
    e020:	6823      	ldr	r3, [r4, #0]
    e022:	f362 0382 	bfi	r3, r2, #2, #1
    e026:	6023      	str	r3, [r4, #0]
    e028:	e6b2      	b.n	dd90 <am_hal_cachectrl_control+0x3c>
    e02a:	bf00      	nop
    e02c:	40018000 	.word	0x40018000
    e030:	40018004 	.word	0x40018004
    e034:	f800000f 	.word	0xf800000f

0000e038 <am_hal_clkgen_control>:
    e038:	4b41      	ldr	r3, [pc, #260]	; (e140 <am_hal_clkgen_control+0x108>)
    e03a:	681a      	ldr	r2, [r3, #0]
    e03c:	b912      	cbnz	r2, e044 <am_hal_clkgen_control+0xc>
    e03e:	4a41      	ldr	r2, [pc, #260]	; (e144 <am_hal_clkgen_control+0x10c>)
    e040:	6812      	ldr	r2, [r2, #0]
    e042:	601a      	str	r2, [r3, #0]
    e044:	2809      	cmp	r0, #9
    e046:	d878      	bhi.n	e13a <am_hal_clkgen_control+0x102>
    e048:	e8df f000 	tbb	[pc, r0]
    e04c:	261e160d 	.word	0x261e160d
    e050:	524c423a 	.word	0x524c423a
    e054:	055a      	.short	0x055a
    e056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e05a:	2000      	movs	r0, #0
    e05c:	6a1a      	ldr	r2, [r3, #32]
    e05e:	f36f 0200 	bfc	r2, #0, #1
    e062:	621a      	str	r2, [r3, #32]
    e064:	4770      	bx	lr
    e066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e06a:	2200      	movs	r2, #0
    e06c:	2147      	movs	r1, #71	; 0x47
    e06e:	6159      	str	r1, [r3, #20]
    e070:	4610      	mov	r0, r2
    e072:	619a      	str	r2, [r3, #24]
    e074:	615a      	str	r2, [r3, #20]
    e076:	4770      	bx	lr
    e078:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e07c:	2000      	movs	r0, #0
    e07e:	68d3      	ldr	r3, [r2, #12]
    e080:	f023 0301 	bic.w	r3, r3, #1
    e084:	60d3      	str	r3, [r2, #12]
    e086:	4770      	bx	lr
    e088:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e08c:	2000      	movs	r0, #0
    e08e:	68d3      	ldr	r3, [r2, #12]
    e090:	f023 0302 	bic.w	r3, r3, #2
    e094:	60d3      	str	r3, [r2, #12]
    e096:	4770      	bx	lr
    e098:	4a2b      	ldr	r2, [pc, #172]	; (e148 <am_hal_clkgen_control+0x110>)
    e09a:	68d3      	ldr	r3, [r2, #12]
    e09c:	b2db      	uxtb	r3, r3
    e09e:	2b21      	cmp	r3, #33	; 0x21
    e0a0:	d106      	bne.n	e0b0 <am_hal_clkgen_control+0x78>
    e0a2:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e0a6:	2101      	movs	r1, #1
    e0a8:	f361 2309 	bfi	r3, r1, #8, #2
    e0ac:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e0b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e0b4:	2000      	movs	r0, #0
    e0b6:	68d3      	ldr	r3, [r2, #12]
    e0b8:	f043 0301 	orr.w	r3, r3, #1
    e0bc:	60d3      	str	r3, [r2, #12]
    e0be:	4770      	bx	lr
    e0c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e0c4:	2000      	movs	r0, #0
    e0c6:	68d3      	ldr	r3, [r2, #12]
    e0c8:	f043 0302 	orr.w	r3, r3, #2
    e0cc:	60d3      	str	r3, [r2, #12]
    e0ce:	4770      	bx	lr
    e0d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e0d4:	2200      	movs	r2, #0
    e0d6:	2047      	movs	r0, #71	; 0x47
    e0d8:	2101      	movs	r1, #1
    e0da:	6158      	str	r0, [r3, #20]
    e0dc:	6199      	str	r1, [r3, #24]
    e0de:	4610      	mov	r0, r2
    e0e0:	615a      	str	r2, [r3, #20]
    e0e2:	4770      	bx	lr
    e0e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e0e8:	2000      	movs	r0, #0
    e0ea:	68da      	ldr	r2, [r3, #12]
    e0ec:	60da      	str	r2, [r3, #12]
    e0ee:	4770      	bx	lr
    e0f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e0f4:	2000      	movs	r0, #0
    e0f6:	68d3      	ldr	r3, [r2, #12]
    e0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e0fc:	60d3      	str	r3, [r2, #12]
    e0fe:	4770      	bx	lr
    e100:	b510      	push	{r4, lr}
    e102:	4a11      	ldr	r2, [pc, #68]	; (e148 <am_hal_clkgen_control+0x110>)
    e104:	68d3      	ldr	r3, [r2, #12]
    e106:	b2db      	uxtb	r3, r3
    e108:	2b21      	cmp	r3, #33	; 0x21
    e10a:	460c      	mov	r4, r1
    e10c:	d008      	beq.n	e120 <am_hal_clkgen_control+0xe8>
    e10e:	b194      	cbz	r4, e136 <am_hal_clkgen_control+0xfe>
    e110:	6823      	ldr	r3, [r4, #0]
    e112:	f043 0301 	orr.w	r3, r3, #1
    e116:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e11a:	2000      	movs	r0, #0
    e11c:	6213      	str	r3, [r2, #32]
    e11e:	bd10      	pop	{r4, pc}
    e120:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e124:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e128:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e12c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e130:	f000 f8f2 	bl	e318 <am_hal_flash_delay>
    e134:	e7eb      	b.n	e10e <am_hal_clkgen_control+0xd6>
    e136:	4b05      	ldr	r3, [pc, #20]	; (e14c <am_hal_clkgen_control+0x114>)
    e138:	e7ed      	b.n	e116 <am_hal_clkgen_control+0xde>
    e13a:	2006      	movs	r0, #6
    e13c:	4770      	bx	lr
    e13e:	bf00      	nop
    e140:	1000118c 	.word	0x1000118c
    e144:	4ffff000 	.word	0x4ffff000
    e148:	40020000 	.word	0x40020000
    e14c:	0025b801 	.word	0x0025b801

0000e150 <am_hal_ctimer_config_single>:
    e150:	b5f0      	push	{r4, r5, r6, r7, lr}
    e152:	b083      	sub	sp, #12
    e154:	460e      	mov	r6, r1
    e156:	4614      	mov	r4, r2
    e158:	0147      	lsls	r7, r0, #5
    e15a:	4605      	mov	r5, r0
    e15c:	f000 fae6 	bl	e72c <am_hal_interrupt_master_disable>
    e160:	4a19      	ldr	r2, [pc, #100]	; (e1c8 <am_hal_ctimer_config_single+0x78>)
    e162:	9001      	str	r0, [sp, #4]
    e164:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e168:	58bb      	ldr	r3, [r7, r2]
    e16a:	d021      	beq.n	e1b0 <am_hal_ctimer_config_single+0x60>
    e16c:	ea23 0306 	bic.w	r3, r3, r6
    e170:	1c71      	adds	r1, r6, #1
    e172:	ea43 0304 	orr.w	r3, r3, r4
    e176:	d00c      	beq.n	e192 <am_hal_ctimer_config_single+0x42>
    e178:	50bb      	str	r3, [r7, r2]
    e17a:	9801      	ldr	r0, [sp, #4]
    e17c:	f000 fada 	bl	e734 <am_hal_interrupt_master_set>
    e180:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e184:	429e      	cmp	r6, r3
    e186:	d01c      	beq.n	e1c2 <am_hal_ctimer_config_single+0x72>
    e188:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e18c:	d017      	beq.n	e1be <am_hal_ctimer_config_single+0x6e>
    e18e:	b003      	add	sp, #12
    e190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e196:	50bb      	str	r3, [r7, r2]
    e198:	9801      	ldr	r0, [sp, #4]
    e19a:	f000 facb 	bl	e734 <am_hal_interrupt_master_set>
    e19e:	2200      	movs	r2, #0
    e1a0:	4b0a      	ldr	r3, [pc, #40]	; (e1cc <am_hal_ctimer_config_single+0x7c>)
    e1a2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e1a6:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e1aa:	54ac      	strb	r4, [r5, r2]
    e1ac:	b003      	add	sp, #12
    e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1b0:	0424      	lsls	r4, r4, #16
    e1b2:	b29b      	uxth	r3, r3
    e1b4:	4323      	orrs	r3, r4
    e1b6:	50bb      	str	r3, [r7, r2]
    e1b8:	9801      	ldr	r0, [sp, #4]
    e1ba:	f000 fabb 	bl	e734 <am_hal_interrupt_master_set>
    e1be:	2201      	movs	r2, #1
    e1c0:	e7ee      	b.n	e1a0 <am_hal_ctimer_config_single+0x50>
    e1c2:	2200      	movs	r2, #0
    e1c4:	e7ec      	b.n	e1a0 <am_hal_ctimer_config_single+0x50>
    e1c6:	bf00      	nop
    e1c8:	4000800c 	.word	0x4000800c
    e1cc:	10001048 	.word	0x10001048

0000e1d0 <am_hal_ctimer_start>:
    e1d0:	b570      	push	{r4, r5, r6, lr}
    e1d2:	b082      	sub	sp, #8
    e1d4:	460c      	mov	r4, r1
    e1d6:	0146      	lsls	r6, r0, #5
    e1d8:	4605      	mov	r5, r0
    e1da:	f000 faa7 	bl	e72c <am_hal_interrupt_master_disable>
    e1de:	4a0f      	ldr	r2, [pc, #60]	; (e21c <am_hal_ctimer_start+0x4c>)
    e1e0:	9001      	str	r0, [sp, #4]
    e1e2:	58b3      	ldr	r3, [r6, r2]
    e1e4:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e1e8:	ea23 0301 	bic.w	r3, r3, r1
    e1ec:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e1f0:	430b      	orrs	r3, r1
    e1f2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e1f6:	bf0c      	ite	eq
    e1f8:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e1fc:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e200:	50b3      	str	r3, [r6, r2]
    e202:	4b07      	ldr	r3, [pc, #28]	; (e220 <am_hal_ctimer_start+0x50>)
    e204:	9801      	ldr	r0, [sp, #4]
    e206:	bf0c      	ite	eq
    e208:	2101      	moveq	r1, #1
    e20a:	2100      	movne	r1, #0
    e20c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e210:	545c      	strb	r4, [r3, r1]
    e212:	f000 fa8f 	bl	e734 <am_hal_interrupt_master_set>
    e216:	b002      	add	sp, #8
    e218:	bd70      	pop	{r4, r5, r6, pc}
    e21a:	bf00      	nop
    e21c:	4000800c 	.word	0x4000800c
    e220:	10001048 	.word	0x10001048

0000e224 <am_hal_ctimer_period_set>:
    e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e228:	b082      	sub	sp, #8
    e22a:	4689      	mov	r9, r1
    e22c:	4698      	mov	r8, r3
    e22e:	0147      	lsls	r7, r0, #5
    e230:	4614      	mov	r4, r2
    e232:	f000 fa7b 	bl	e72c <am_hal_interrupt_master_disable>
    e236:	f8df a094 	ldr.w	sl, [pc, #148]	; e2cc <am_hal_ctimer_period_set+0xa8>
    e23a:	9001      	str	r0, [sp, #4]
    e23c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e240:	4d20      	ldr	r5, [pc, #128]	; (e2c4 <am_hal_ctimer_period_set+0xa0>)
    e242:	4e21      	ldr	r6, [pc, #132]	; (e2c8 <am_hal_ctimer_period_set+0xa4>)
    e244:	f857 300a 	ldr.w	r3, [r7, sl]
    e248:	d01a      	beq.n	e280 <am_hal_ctimer_period_set+0x5c>
    e24a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e24e:	2b80      	cmp	r3, #128	; 0x80
    e250:	d01b      	beq.n	e28a <am_hal_ctimer_period_set+0x66>
    e252:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e256:	2000      	movs	r0, #0
    e258:	4591      	cmp	r9, r2
    e25a:	4603      	mov	r3, r0
    e25c:	d01e      	beq.n	e29c <am_hal_ctimer_period_set+0x78>
    e25e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e262:	d025      	beq.n	e2b0 <am_hal_ctimer_period_set+0x8c>
    e264:	0c1b      	lsrs	r3, r3, #16
    e266:	b2a2      	uxth	r2, r4
    e268:	041b      	lsls	r3, r3, #16
    e26a:	4310      	orrs	r0, r2
    e26c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e270:	5178      	str	r0, [r7, r5]
    e272:	51bb      	str	r3, [r7, r6]
    e274:	9801      	ldr	r0, [sp, #4]
    e276:	f000 fa5d 	bl	e734 <am_hal_interrupt_master_set>
    e27a:	b002      	add	sp, #8
    e27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e280:	0c1b      	lsrs	r3, r3, #16
    e282:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e286:	2b80      	cmp	r3, #128	; 0x80
    e288:	d111      	bne.n	e2ae <am_hal_ctimer_period_set+0x8a>
    e28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e28e:	4591      	cmp	r9, r2
    e290:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e294:	4623      	mov	r3, r4
    e296:	ebc8 0404 	rsb	r4, r8, r4
    e29a:	d1e0      	bne.n	e25e <am_hal_ctimer_period_set+0x3a>
    e29c:	b2a3      	uxth	r3, r4
    e29e:	4318      	orrs	r0, r3
    e2a0:	5178      	str	r0, [r7, r5]
    e2a2:	9801      	ldr	r0, [sp, #4]
    e2a4:	f000 fa46 	bl	e734 <am_hal_interrupt_master_set>
    e2a8:	b002      	add	sp, #8
    e2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e2ae:	2000      	movs	r0, #0
    e2b0:	b2a3      	uxth	r3, r4
    e2b2:	4318      	orrs	r0, r3
    e2b4:	51b8      	str	r0, [r7, r6]
    e2b6:	9801      	ldr	r0, [sp, #4]
    e2b8:	f000 fa3c 	bl	e734 <am_hal_interrupt_master_set>
    e2bc:	b002      	add	sp, #8
    e2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e2c2:	bf00      	nop
    e2c4:	40008004 	.word	0x40008004
    e2c8:	40008008 	.word	0x40008008
    e2cc:	4000800c 	.word	0x4000800c

0000e2d0 <am_hal_ctimer_int_enable>:
    e2d0:	b510      	push	{r4, lr}
    e2d2:	b082      	sub	sp, #8
    e2d4:	4604      	mov	r4, r0
    e2d6:	f000 fa29 	bl	e72c <am_hal_interrupt_master_disable>
    e2da:	4b06      	ldr	r3, [pc, #24]	; (e2f4 <am_hal_ctimer_int_enable+0x24>)
    e2dc:	9001      	str	r0, [sp, #4]
    e2de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e2e2:	4314      	orrs	r4, r2
    e2e4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e2e8:	9801      	ldr	r0, [sp, #4]
    e2ea:	f000 fa23 	bl	e734 <am_hal_interrupt_master_set>
    e2ee:	b002      	add	sp, #8
    e2f0:	bd10      	pop	{r4, pc}
    e2f2:	bf00      	nop
    e2f4:	40008000 	.word	0x40008000

0000e2f8 <am_hal_ctimer_int_clear>:
    e2f8:	b510      	push	{r4, lr}
    e2fa:	b082      	sub	sp, #8
    e2fc:	4604      	mov	r4, r0
    e2fe:	f000 fa15 	bl	e72c <am_hal_interrupt_master_disable>
    e302:	4b04      	ldr	r3, [pc, #16]	; (e314 <am_hal_ctimer_int_clear+0x1c>)
    e304:	9001      	str	r0, [sp, #4]
    e306:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e30a:	9801      	ldr	r0, [sp, #4]
    e30c:	f000 fa12 	bl	e734 <am_hal_interrupt_master_set>
    e310:	b002      	add	sp, #8
    e312:	bd10      	pop	{r4, pc}
    e314:	40008000 	.word	0x40008000

0000e318 <am_hal_flash_delay>:
    e318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e31e:	075b      	lsls	r3, r3, #29
    e320:	bf46      	itte	mi
    e322:	0040      	lslmi	r0, r0, #1
    e324:	230e      	movmi	r3, #14
    e326:	230b      	movpl	r3, #11
    e328:	4298      	cmp	r0, r3
    e32a:	d800      	bhi.n	e32e <am_hal_flash_delay+0x16>
    e32c:	4770      	bx	lr
    e32e:	1ac0      	subs	r0, r0, r3
    e330:	4b00      	ldr	r3, [pc, #0]	; (e334 <am_hal_flash_delay+0x1c>)
    e332:	4718      	bx	r3
    e334:	0800009d 	.word	0x0800009d

0000e338 <am_hal_flash_delay_status_check>:
    e338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e33c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e340:	460d      	mov	r5, r1
    e342:	4616      	mov	r6, r2
    e344:	461f      	mov	r7, r3
    e346:	b1b4      	cbz	r4, e376 <am_hal_flash_delay_status_check+0x3e>
    e348:	4604      	mov	r4, r0
    e34a:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e34e:	f8df 8058 	ldr.w	r8, [pc, #88]	; e3a8 <am_hal_flash_delay_status_check+0x70>
    e352:	e009      	b.n	e368 <am_hal_flash_delay_status_check+0x30>
    e354:	b324      	cbz	r4, e3a0 <am_hal_flash_delay_status_check+0x68>
    e356:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e35a:	f013 0f04 	tst.w	r3, #4
    e35e:	bf14      	ite	ne
    e360:	2012      	movne	r0, #18
    e362:	2005      	moveq	r0, #5
    e364:	3c01      	subs	r4, #1
    e366:	47c0      	blx	r8
    e368:	682b      	ldr	r3, [r5, #0]
    e36a:	4033      	ands	r3, r6
    e36c:	429f      	cmp	r7, r3
    e36e:	d1f1      	bne.n	e354 <am_hal_flash_delay_status_check+0x1c>
    e370:	2000      	movs	r0, #0
    e372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e376:	f8df 8030 	ldr.w	r8, [pc, #48]	; e3a8 <am_hal_flash_delay_status_check+0x70>
    e37a:	4604      	mov	r4, r0
    e37c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e380:	e009      	b.n	e396 <am_hal_flash_delay_status_check+0x5e>
    e382:	b16c      	cbz	r4, e3a0 <am_hal_flash_delay_status_check+0x68>
    e384:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e388:	f013 0f04 	tst.w	r3, #4
    e38c:	bf14      	ite	ne
    e38e:	2012      	movne	r0, #18
    e390:	2005      	moveq	r0, #5
    e392:	3c01      	subs	r4, #1
    e394:	47c0      	blx	r8
    e396:	682b      	ldr	r3, [r5, #0]
    e398:	4033      	ands	r3, r6
    e39a:	429f      	cmp	r7, r3
    e39c:	d0f1      	beq.n	e382 <am_hal_flash_delay_status_check+0x4a>
    e39e:	e7e7      	b.n	e370 <am_hal_flash_delay_status_check+0x38>
    e3a0:	2004      	movs	r0, #4
    e3a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e3a6:	bf00      	nop
    e3a8:	0800009d 	.word	0x0800009d

0000e3ac <am_hal_flash_load_ui32>:
    e3ac:	4b00      	ldr	r3, [pc, #0]	; (e3b0 <am_hal_flash_load_ui32+0x4>)
    e3ae:	4718      	bx	r3
    e3b0:	08000075 	.word	0x08000075

0000e3b4 <am_hal_flash_store_ui32>:
    e3b4:	4b01      	ldr	r3, [pc, #4]	; (e3bc <am_hal_flash_store_ui32+0x8>)
    e3b6:	f043 0301 	orr.w	r3, r3, #1
    e3ba:	4718      	bx	r3
    e3bc:	10001058 	.word	0x10001058

0000e3c0 <am_hal_gpio_pinconfig>:
    e3c0:	2831      	cmp	r0, #49	; 0x31
    e3c2:	d901      	bls.n	e3c8 <am_hal_gpio_pinconfig+0x8>
    e3c4:	2006      	movs	r0, #6
    e3c6:	4770      	bx	lr
    e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3cc:	f001 0307 	and.w	r3, r1, #7
    e3d0:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e3d4:	b085      	sub	sp, #20
    e3d6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e3da:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e3de:	d014      	beq.n	e40a <am_hal_gpio_pinconfig+0x4a>
    e3e0:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e3e4:	1dbd      	adds	r5, r7, #6
    e3e6:	f005 0507 	and.w	r5, r5, #7
    e3ea:	2d03      	cmp	r5, #3
    e3ec:	f042 0201 	orr.w	r2, r2, #1
    e3f0:	f200 80a7 	bhi.w	e542 <am_hal_gpio_pinconfig+0x182>
    e3f4:	4d82      	ldr	r5, [pc, #520]	; (e600 <am_hal_gpio_pinconfig+0x240>)
    e3f6:	5c2d      	ldrb	r5, [r5, r0]
    e3f8:	07ee      	lsls	r6, r5, #31
    e3fa:	d403      	bmi.n	e404 <am_hal_gpio_pinconfig+0x44>
    e3fc:	4881      	ldr	r0, [pc, #516]	; (e604 <am_hal_gpio_pinconfig+0x244>)
    e3fe:	b005      	add	sp, #20
    e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e404:	3f02      	subs	r7, #2
    e406:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e40a:	2c00      	cmp	r4, #0
    e40c:	f040 8091 	bne.w	e532 <am_hal_gpio_pinconfig+0x172>
    e410:	4c7d      	ldr	r4, [pc, #500]	; (e608 <am_hal_gpio_pinconfig+0x248>)
    e412:	4d7e      	ldr	r5, [pc, #504]	; (e60c <am_hal_gpio_pinconfig+0x24c>)
    e414:	5c24      	ldrb	r4, [r4, r0]
    e416:	5c2d      	ldrb	r5, [r5, r0]
    e418:	411c      	asrs	r4, r3
    e41a:	f014 0f01 	tst.w	r4, #1
    e41e:	bf0c      	ite	eq
    e420:	2400      	moveq	r4, #0
    e422:	2402      	movne	r4, #2
    e424:	42ab      	cmp	r3, r5
    e426:	ea42 0204 	orr.w	r2, r2, r4
    e42a:	f000 8096 	beq.w	e55a <am_hal_gpio_pinconfig+0x19a>
    e42e:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e432:	105d      	asrs	r5, r3, #1
    e434:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e438:	00db      	lsls	r3, r3, #3
    e43a:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e43e:	f003 0408 	and.w	r4, r3, #8
    e442:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e446:	f00e 060c 	and.w	r6, lr, #12
    e44a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e44e:	2e04      	cmp	r6, #4
    e450:	ea43 0304 	orr.w	r3, r3, r4
    e454:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e458:	462c      	mov	r4, r5
    e45a:	f000 808b 	beq.w	e574 <am_hal_gpio_pinconfig+0x1b4>
    e45e:	4c6c      	ldr	r4, [pc, #432]	; (e610 <am_hal_gpio_pinconfig+0x250>)
    e460:	6827      	ldr	r7, [r4, #0]
    e462:	1bcf      	subs	r7, r1, r7
    e464:	fab7 f787 	clz	r7, r7
    e468:	097f      	lsrs	r7, r7, #5
    e46a:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e46e:	bf04      	itt	eq
    e470:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e474:	f364 0300 	bfieq	r3, r4, #0, #1
    e478:	0084      	lsls	r4, r0, #2
    e47a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e47e:	2902      	cmp	r1, #2
    e480:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e484:	d078      	beq.n	e578 <am_hal_gpio_pinconfig+0x1b8>
    e486:	d87f      	bhi.n	e588 <am_hal_gpio_pinconfig+0x1c8>
    e488:	2901      	cmp	r1, #1
    e48a:	f04f 0100 	mov.w	r1, #0
    e48e:	bf08      	it	eq
    e490:	f042 0204 	orreq.w	r2, r2, #4
    e494:	f005 0518 	and.w	r5, r5, #24
    e498:	9101      	str	r1, [sp, #4]
    e49a:	f004 041c 	and.w	r4, r4, #28
    e49e:	f020 0a03 	bic.w	sl, r0, #3
    e4a2:	f04f 090f 	mov.w	r9, #15
    e4a6:	fa09 f904 	lsl.w	r9, r9, r4
    e4aa:	0841      	lsrs	r1, r0, #1
    e4ac:	26ff      	movs	r6, #255	; 0xff
    e4ae:	fa03 f404 	lsl.w	r4, r3, r4
    e4b2:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e4b6:	40ae      	lsls	r6, r5
    e4b8:	9300      	str	r3, [sp, #0]
    e4ba:	fa02 f505 	lsl.w	r5, r2, r5
    e4be:	4683      	mov	fp, r0
    e4c0:	f021 0803 	bic.w	r8, r1, #3
    e4c4:	f000 f932 	bl	e72c <am_hal_interrupt_master_disable>
    e4c8:	9b00      	ldr	r3, [sp, #0]
    e4ca:	9003      	str	r0, [sp, #12]
    e4cc:	ea6f 0909 	mvn.w	r9, r9
    e4d0:	43f6      	mvns	r6, r6
    e4d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e4d6:	f8df e15c 	ldr.w	lr, [pc, #348]	; e634 <am_hal_gpio_pinconfig+0x274>
    e4da:	4a4e      	ldr	r2, [pc, #312]	; (e614 <am_hal_gpio_pinconfig+0x254>)
    e4dc:	b15f      	cbz	r7, e4f6 <am_hal_gpio_pinconfig+0x136>
    e4de:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e4e2:	f00b 001f 	and.w	r0, fp, #31
    e4e6:	f007 0704 	and.w	r7, r7, #4
    e4ea:	f04f 0b01 	mov.w	fp, #1
    e4ee:	494a      	ldr	r1, [pc, #296]	; (e618 <am_hal_gpio_pinconfig+0x258>)
    e4f0:	fa0b f000 	lsl.w	r0, fp, r0
    e4f4:	5078      	str	r0, [r7, r1]
    e4f6:	4849      	ldr	r0, [pc, #292]	; (e61c <am_hal_gpio_pinconfig+0x25c>)
    e4f8:	2773      	movs	r7, #115	; 0x73
    e4fa:	6607      	str	r7, [r0, #96]	; 0x60
    e4fc:	681f      	ldr	r7, [r3, #0]
    e4fe:	4037      	ands	r7, r6
    e500:	433d      	orrs	r5, r7
    e502:	601d      	str	r5, [r3, #0]
    e504:	f858 300e 	ldr.w	r3, [r8, lr]
    e508:	ea09 0303 	and.w	r3, r9, r3
    e50c:	4323      	orrs	r3, r4
    e50e:	f848 300e 	str.w	r3, [r8, lr]
    e512:	f85a 3002 	ldr.w	r3, [sl, r2]
    e516:	401e      	ands	r6, r3
    e518:	9b01      	ldr	r3, [sp, #4]
    e51a:	2400      	movs	r4, #0
    e51c:	431e      	orrs	r6, r3
    e51e:	f84a 6002 	str.w	r6, [sl, r2]
    e522:	6604      	str	r4, [r0, #96]	; 0x60
    e524:	9803      	ldr	r0, [sp, #12]
    e526:	f000 f905 	bl	e734 <am_hal_interrupt_master_set>
    e52a:	4620      	mov	r0, r4
    e52c:	b005      	add	sp, #20
    e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e532:	2c01      	cmp	r4, #1
    e534:	d017      	beq.n	e566 <am_hal_gpio_pinconfig+0x1a6>
    e536:	2c02      	cmp	r4, #2
    e538:	d035      	beq.n	e5a6 <am_hal_gpio_pinconfig+0x1e6>
    e53a:	4839      	ldr	r0, [pc, #228]	; (e620 <am_hal_gpio_pinconfig+0x260>)
    e53c:	b005      	add	sp, #20
    e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e542:	2ec0      	cmp	r6, #192	; 0xc0
    e544:	d02a      	beq.n	e59c <am_hal_gpio_pinconfig+0x1dc>
    e546:	2e20      	cmp	r6, #32
    e548:	f47f af5f 	bne.w	e40a <am_hal_gpio_pinconfig+0x4a>
    e54c:	2814      	cmp	r0, #20
    e54e:	f43f af55 	beq.w	e3fc <am_hal_gpio_pinconfig+0x3c>
    e552:	2c00      	cmp	r4, #0
    e554:	f43f af5c 	beq.w	e410 <am_hal_gpio_pinconfig+0x50>
    e558:	e7eb      	b.n	e532 <am_hal_gpio_pinconfig+0x172>
    e55a:	f3c1 4402 	ubfx	r4, r1, #16, #3
    e55e:	2c07      	cmp	r4, #7
    e560:	d128      	bne.n	e5b4 <am_hal_gpio_pinconfig+0x1f4>
    e562:	4830      	ldr	r0, [pc, #192]	; (e624 <am_hal_gpio_pinconfig+0x264>)
    e564:	e74b      	b.n	e3fe <am_hal_gpio_pinconfig+0x3e>
    e566:	4c26      	ldr	r4, [pc, #152]	; (e600 <am_hal_gpio_pinconfig+0x240>)
    e568:	5c24      	ldrb	r4, [r4, r0]
    e56a:	07a5      	lsls	r5, r4, #30
    e56c:	d5e5      	bpl.n	e53a <am_hal_gpio_pinconfig+0x17a>
    e56e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e572:	e74d      	b.n	e410 <am_hal_gpio_pinconfig+0x50>
    e574:	2701      	movs	r7, #1
    e576:	e778      	b.n	e46a <am_hal_gpio_pinconfig+0xaa>
    e578:	f005 0518 	and.w	r5, r5, #24
    e57c:	f04f 0801 	mov.w	r8, #1
    e580:	fa08 f105 	lsl.w	r1, r8, r5
    e584:	9101      	str	r1, [sp, #4]
    e586:	e788      	b.n	e49a <am_hal_gpio_pinconfig+0xda>
    e588:	f005 0518 	and.w	r5, r5, #24
    e58c:	f04f 0801 	mov.w	r8, #1
    e590:	fa08 f105 	lsl.w	r1, r8, r5
    e594:	f042 0204 	orr.w	r2, r2, #4
    e598:	9101      	str	r1, [sp, #4]
    e59a:	e77e      	b.n	e49a <am_hal_gpio_pinconfig+0xda>
    e59c:	2814      	cmp	r0, #20
    e59e:	f43f af34 	beq.w	e40a <am_hal_gpio_pinconfig+0x4a>
    e5a2:	4821      	ldr	r0, [pc, #132]	; (e628 <am_hal_gpio_pinconfig+0x268>)
    e5a4:	e72b      	b.n	e3fe <am_hal_gpio_pinconfig+0x3e>
    e5a6:	4c16      	ldr	r4, [pc, #88]	; (e600 <am_hal_gpio_pinconfig+0x240>)
    e5a8:	5c24      	ldrb	r4, [r4, r0]
    e5aa:	0764      	lsls	r4, r4, #29
    e5ac:	d5c5      	bpl.n	e53a <am_hal_gpio_pinconfig+0x17a>
    e5ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e5b2:	e72d      	b.n	e410 <am_hal_gpio_pinconfig+0x50>
    e5b4:	4d1d      	ldr	r5, [pc, #116]	; (e62c <am_hal_gpio_pinconfig+0x26c>)
    e5b6:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    e5ba:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    e5be:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    e5c2:	429e      	cmp	r6, r3
    e5c4:	d00c      	beq.n	e5e0 <am_hal_gpio_pinconfig+0x220>
    e5c6:	0084      	lsls	r4, r0, #2
    e5c8:	4425      	add	r5, r4
    e5ca:	786e      	ldrb	r6, [r5, #1]
    e5cc:	429e      	cmp	r6, r3
    e5ce:	d012      	beq.n	e5f6 <am_hal_gpio_pinconfig+0x236>
    e5d0:	78ae      	ldrb	r6, [r5, #2]
    e5d2:	429e      	cmp	r6, r3
    e5d4:	d00d      	beq.n	e5f2 <am_hal_gpio_pinconfig+0x232>
    e5d6:	78ed      	ldrb	r5, [r5, #3]
    e5d8:	429d      	cmp	r5, r3
    e5da:	d00e      	beq.n	e5fa <am_hal_gpio_pinconfig+0x23a>
    e5dc:	4814      	ldr	r0, [pc, #80]	; (e630 <am_hal_gpio_pinconfig+0x270>)
    e5de:	e70e      	b.n	e3fe <am_hal_gpio_pinconfig+0x3e>
    e5e0:	2300      	movs	r3, #0
    e5e2:	0084      	lsls	r4, r0, #2
    e5e4:	005b      	lsls	r3, r3, #1
    e5e6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    e5ea:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    e5ee:	2700      	movs	r7, #0
    e5f0:	e743      	b.n	e47a <am_hal_gpio_pinconfig+0xba>
    e5f2:	2302      	movs	r3, #2
    e5f4:	e7f6      	b.n	e5e4 <am_hal_gpio_pinconfig+0x224>
    e5f6:	2301      	movs	r3, #1
    e5f8:	e7f4      	b.n	e5e4 <am_hal_gpio_pinconfig+0x224>
    e5fa:	2303      	movs	r3, #3
    e5fc:	e7f2      	b.n	e5e4 <am_hal_gpio_pinconfig+0x224>
    e5fe:	bf00      	nop
    e600:	0001030c 	.word	0x0001030c
    e604:	08000100 	.word	0x08000100
    e608:	00010408 	.word	0x00010408
    e60c:	00010444 	.word	0x00010444
    e610:	0001043c 	.word	0x0001043c
    e614:	400100e0 	.word	0x400100e0
    e618:	400100b4 	.word	0x400100b4
    e61c:	40010000 	.word	0x40010000
    e620:	08000102 	.word	0x08000102
    e624:	08000103 	.word	0x08000103
    e628:	08000101 	.word	0x08000101
    e62c:	00010340 	.word	0x00010340
    e630:	08000104 	.word	0x08000104
    e634:	40010040 	.word	0x40010040

0000e638 <am_hal_gpio_state_read>:
    e638:	b1ca      	cbz	r2, e66e <am_hal_gpio_state_read+0x36>
    e63a:	2831      	cmp	r0, #49	; 0x31
    e63c:	d904      	bls.n	e648 <am_hal_gpio_state_read+0x10>
    e63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e642:	6013      	str	r3, [r2, #0]
    e644:	2005      	movs	r0, #5
    e646:	4770      	bx	lr
    e648:	08c3      	lsrs	r3, r0, #3
    e64a:	2901      	cmp	r1, #1
    e64c:	f003 0304 	and.w	r3, r3, #4
    e650:	f000 001f 	and.w	r0, r0, #31
    e654:	d00d      	beq.n	e672 <am_hal_gpio_state_read+0x3a>
    e656:	d313      	bcc.n	e680 <am_hal_gpio_state_read+0x48>
    e658:	2902      	cmp	r1, #2
    e65a:	d108      	bne.n	e66e <am_hal_gpio_state_read+0x36>
    e65c:	490c      	ldr	r1, [pc, #48]	; (e690 <am_hal_gpio_state_read+0x58>)
    e65e:	585b      	ldr	r3, [r3, r1]
    e660:	fa23 f000 	lsr.w	r0, r3, r0
    e664:	f000 0001 	and.w	r0, r0, #1
    e668:	6010      	str	r0, [r2, #0]
    e66a:	2000      	movs	r0, #0
    e66c:	4770      	bx	lr
    e66e:	2006      	movs	r0, #6
    e670:	4770      	bx	lr
    e672:	4908      	ldr	r1, [pc, #32]	; (e694 <am_hal_gpio_state_read+0x5c>)
    e674:	585b      	ldr	r3, [r3, r1]
    e676:	fa23 f000 	lsr.w	r0, r3, r0
    e67a:	f000 0001 	and.w	r0, r0, #1
    e67e:	e7f3      	b.n	e668 <am_hal_gpio_state_read+0x30>
    e680:	4905      	ldr	r1, [pc, #20]	; (e698 <am_hal_gpio_state_read+0x60>)
    e682:	585b      	ldr	r3, [r3, r1]
    e684:	fa23 f000 	lsr.w	r0, r3, r0
    e688:	f000 0001 	and.w	r0, r0, #1
    e68c:	e7ec      	b.n	e668 <am_hal_gpio_state_read+0x30>
    e68e:	bf00      	nop
    e690:	400100a0 	.word	0x400100a0
    e694:	40010088 	.word	0x40010088
    e698:	40010080 	.word	0x40010080

0000e69c <am_hal_gpio_state_write>:
    e69c:	2831      	cmp	r0, #49	; 0x31
    e69e:	d901      	bls.n	e6a4 <am_hal_gpio_state_write+0x8>
    e6a0:	2005      	movs	r0, #5
    e6a2:	4770      	bx	lr
    e6a4:	2905      	cmp	r1, #5
    e6a6:	d901      	bls.n	e6ac <am_hal_gpio_state_write+0x10>
    e6a8:	2006      	movs	r0, #6
    e6aa:	4770      	bx	lr
    e6ac:	b570      	push	{r4, r5, r6, lr}
    e6ae:	f000 031f 	and.w	r3, r0, #31
    e6b2:	b082      	sub	sp, #8
    e6b4:	08c0      	lsrs	r0, r0, #3
    e6b6:	2201      	movs	r2, #1
    e6b8:	460d      	mov	r5, r1
    e6ba:	f000 0404 	and.w	r4, r0, #4
    e6be:	fa02 f603 	lsl.w	r6, r2, r3
    e6c2:	f000 f833 	bl	e72c <am_hal_interrupt_master_disable>
    e6c6:	1e69      	subs	r1, r5, #1
    e6c8:	9001      	str	r0, [sp, #4]
    e6ca:	2904      	cmp	r1, #4
    e6cc:	d817      	bhi.n	e6fe <am_hal_gpio_state_write+0x62>
    e6ce:	e8df f001 	tbb	[pc, r1]
    e6d2:	0e13      	.short	0x0e13
    e6d4:	030b      	.short	0x030b
    e6d6:	19          	.byte	0x19
    e6d7:	00          	.byte	0x00
    e6d8:	4b0d      	ldr	r3, [pc, #52]	; (e710 <am_hal_gpio_state_write+0x74>)
    e6da:	50e6      	str	r6, [r4, r3]
    e6dc:	9801      	ldr	r0, [sp, #4]
    e6de:	f000 f829 	bl	e734 <am_hal_interrupt_master_set>
    e6e2:	2000      	movs	r0, #0
    e6e4:	b002      	add	sp, #8
    e6e6:	bd70      	pop	{r4, r5, r6, pc}
    e6e8:	4b0a      	ldr	r3, [pc, #40]	; (e714 <am_hal_gpio_state_write+0x78>)
    e6ea:	50e6      	str	r6, [r4, r3]
    e6ec:	e7f6      	b.n	e6dc <am_hal_gpio_state_write+0x40>
    e6ee:	4a0a      	ldr	r2, [pc, #40]	; (e718 <am_hal_gpio_state_write+0x7c>)
    e6f0:	58a3      	ldr	r3, [r4, r2]
    e6f2:	4073      	eors	r3, r6
    e6f4:	50a3      	str	r3, [r4, r2]
    e6f6:	e7f1      	b.n	e6dc <am_hal_gpio_state_write+0x40>
    e6f8:	4b08      	ldr	r3, [pc, #32]	; (e71c <am_hal_gpio_state_write+0x80>)
    e6fa:	50e6      	str	r6, [r4, r3]
    e6fc:	e7ee      	b.n	e6dc <am_hal_gpio_state_write+0x40>
    e6fe:	4b08      	ldr	r3, [pc, #32]	; (e720 <am_hal_gpio_state_write+0x84>)
    e700:	50e6      	str	r6, [r4, r3]
    e702:	e7eb      	b.n	e6dc <am_hal_gpio_state_write+0x40>
    e704:	4a03      	ldr	r2, [pc, #12]	; (e714 <am_hal_gpio_state_write+0x78>)
    e706:	58a3      	ldr	r3, [r4, r2]
    e708:	4073      	eors	r3, r6
    e70a:	50a3      	str	r3, [r4, r2]
    e70c:	e7e6      	b.n	e6dc <am_hal_gpio_state_write+0x40>
    e70e:	bf00      	nop
    e710:	400100a8 	.word	0x400100a8
    e714:	400100b4 	.word	0x400100b4
    e718:	40010088 	.word	0x40010088
    e71c:	40010090 	.word	0x40010090
    e720:	40010098 	.word	0x40010098

0000e724 <am_hal_interrupt_master_enable>:
    e724:	f3ef 8010 	mrs	r0, PRIMASK
    e728:	b662      	cpsie	i
    e72a:	4770      	bx	lr

0000e72c <am_hal_interrupt_master_disable>:
    e72c:	f3ef 8010 	mrs	r0, PRIMASK
    e730:	b672      	cpsid	i
    e732:	4770      	bx	lr

0000e734 <am_hal_interrupt_master_set>:
    e734:	f380 8810 	msr	PRIMASK, r0
    e738:	4770      	bx	lr
    e73a:	bf00      	nop

0000e73c <internal_iom_reset_on_error>:
    e73c:	b570      	push	{r4, r5, r6, lr}
    e73e:	6844      	ldr	r4, [r0, #4]
    e740:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    e744:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    e748:	3404      	adds	r4, #4
    e74a:	0324      	lsls	r4, r4, #12
    e74c:	2300      	movs	r3, #0
    e74e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    e752:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    e756:	050b      	lsls	r3, r1, #20
    e758:	d52a      	bpl.n	e7b0 <internal_iom_reset_on_error+0x74>
    e75a:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    e75e:	079e      	lsls	r6, r3, #30
    e760:	d450      	bmi.n	e804 <internal_iom_reset_on_error+0xc8>
    e762:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e766:	079a      	lsls	r2, r3, #30
    e768:	d508      	bpl.n	e77c <internal_iom_reset_on_error+0x40>
    e76a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e76e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e772:	2b03      	cmp	r3, #3
    e774:	d9f5      	bls.n	e762 <internal_iom_reset_on_error+0x26>
    e776:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e77a:	e7f6      	b.n	e76a <internal_iom_reset_on_error+0x2e>
    e77c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e780:	f003 0306 	and.w	r3, r3, #6
    e784:	2b04      	cmp	r3, #4
    e786:	d1f9      	bne.n	e77c <internal_iom_reset_on_error+0x40>
    e788:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e78c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e790:	b173      	cbz	r3, e7b0 <internal_iom_reset_on_error+0x74>
    e792:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e796:	f3c3 4307 	ubfx	r3, r3, #16, #8
    e79a:	2b03      	cmp	r3, #3
    e79c:	d9f4      	bls.n	e788 <internal_iom_reset_on_error+0x4c>
    e79e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    e7a2:	e7f6      	b.n	e792 <internal_iom_reset_on_error+0x56>
    e7a4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e7a8:	f003 0306 	and.w	r3, r3, #6
    e7ac:	2b04      	cmp	r3, #4
    e7ae:	d1f9      	bne.n	e7a4 <internal_iom_reset_on_error+0x68>
    e7b0:	06cb      	lsls	r3, r1, #27
    e7b2:	d520      	bpl.n	e7f6 <internal_iom_reset_on_error+0xba>
    e7b4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    e7b8:	f003 0306 	and.w	r3, r3, #6
    e7bc:	2b04      	cmp	r3, #4
    e7be:	d1f9      	bne.n	e7b4 <internal_iom_reset_on_error+0x78>
    e7c0:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e7c4:	f36f 1304 	bfc	r3, #4, #1
    e7c8:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e7cc:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e7d0:	f36f 0341 	bfc	r3, #1, #1
    e7d4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e7d8:	0040      	lsls	r0, r0, #1
    e7da:	f7ff fd9d 	bl	e318 <am_hal_flash_delay>
    e7de:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    e7e2:	f043 0302 	orr.w	r3, r3, #2
    e7e6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    e7ea:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    e7ee:	f043 0310 	orr.w	r3, r3, #16
    e7f2:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    e7f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7fa:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    e7fe:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    e802:	bd70      	pop	{r4, r5, r6, pc}
    e804:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    e808:	4e07      	ldr	r6, [pc, #28]	; (e828 <internal_iom_reset_on_error+0xec>)
    e80a:	2a00      	cmp	r2, #0
    e80c:	d0ca      	beq.n	e7a4 <internal_iom_reset_on_error+0x68>
    e80e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    e812:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e816:	2b03      	cmp	r3, #3
    e818:	d9f9      	bls.n	e80e <internal_iom_reset_on_error+0xd2>
    e81a:	2a04      	cmp	r2, #4
    e81c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    e820:	d9c0      	bls.n	e7a4 <internal_iom_reset_on_error+0x68>
    e822:	3a04      	subs	r2, #4
    e824:	e7f1      	b.n	e80a <internal_iom_reset_on_error+0xce>
    e826:	bf00      	nop
    e828:	deadbeef 	.word	0xdeadbeef

0000e82c <am_hal_iom_initialize>:
    e82c:	2805      	cmp	r0, #5
    e82e:	d901      	bls.n	e834 <am_hal_iom_initialize+0x8>
    e830:	2005      	movs	r0, #5
    e832:	4770      	bx	lr
    e834:	b1e1      	cbz	r1, e870 <am_hal_iom_initialize+0x44>
    e836:	b4f0      	push	{r4, r5, r6, r7}
    e838:	f640 049c 	movw	r4, #2204	; 0x89c
    e83c:	4e0d      	ldr	r6, [pc, #52]	; (e874 <am_hal_iom_initialize+0x48>)
    e83e:	fb04 f400 	mul.w	r4, r4, r0
    e842:	1935      	adds	r5, r6, r4
    e844:	4602      	mov	r2, r0
    e846:	78e8      	ldrb	r0, [r5, #3]
    e848:	f010 0301 	ands.w	r3, r0, #1
    e84c:	d002      	beq.n	e854 <am_hal_iom_initialize+0x28>
    e84e:	2007      	movs	r0, #7
    e850:	bcf0      	pop	{r4, r5, r6, r7}
    e852:	4770      	bx	lr
    e854:	f040 0001 	orr.w	r0, r0, #1
    e858:	f363 0041 	bfi	r0, r3, #1, #1
    e85c:	70e8      	strb	r0, [r5, #3]
    e85e:	5937      	ldr	r7, [r6, r4]
    e860:	4805      	ldr	r0, [pc, #20]	; (e878 <am_hal_iom_initialize+0x4c>)
    e862:	f360 0717 	bfi	r7, r0, #0, #24
    e866:	5137      	str	r7, [r6, r4]
    e868:	4618      	mov	r0, r3
    e86a:	606a      	str	r2, [r5, #4]
    e86c:	600d      	str	r5, [r1, #0]
    e86e:	e7ef      	b.n	e850 <am_hal_iom_initialize+0x24>
    e870:	2006      	movs	r0, #6
    e872:	4770      	bx	lr
    e874:	1000174c 	.word	0x1000174c
    e878:	00123456 	.word	0x00123456

0000e87c <am_hal_iom_enable>:
    e87c:	b128      	cbz	r0, e88a <am_hal_iom_enable+0xe>
    e87e:	6803      	ldr	r3, [r0, #0]
    e880:	4a34      	ldr	r2, [pc, #208]	; (e954 <am_hal_iom_enable+0xd8>)
    e882:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e886:	4293      	cmp	r3, r2
    e888:	d001      	beq.n	e88e <am_hal_iom_enable+0x12>
    e88a:	2002      	movs	r0, #2
    e88c:	4770      	bx	lr
    e88e:	78c3      	ldrb	r3, [r0, #3]
    e890:	079b      	lsls	r3, r3, #30
    e892:	d45d      	bmi.n	e950 <am_hal_iom_enable+0xd4>
    e894:	6843      	ldr	r3, [r0, #4]
    e896:	7a01      	ldrb	r1, [r0, #8]
    e898:	b570      	push	{r4, r5, r6, lr}
    e89a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e89e:	3304      	adds	r3, #4
    e8a0:	031b      	lsls	r3, r3, #12
    e8a2:	3100      	adds	r1, #0
    e8a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    e8a8:	bf18      	it	ne
    e8aa:	2101      	movne	r1, #1
    e8ac:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e8b0:	4291      	cmp	r1, r2
    e8b2:	bf0c      	ite	eq
    e8b4:	2201      	moveq	r2, #1
    e8b6:	2210      	movne	r2, #16
    e8b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    e8bc:	68c3      	ldr	r3, [r0, #12]
    e8be:	b084      	sub	sp, #16
    e8c0:	4604      	mov	r4, r0
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d039      	beq.n	e93a <am_hal_iom_enable+0xbe>
    e8c6:	6843      	ldr	r3, [r0, #4]
    e8c8:	4923      	ldr	r1, [pc, #140]	; (e958 <am_hal_iom_enable+0xdc>)
    e8ca:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e8ce:	3304      	adds	r3, #4
    e8d0:	031a      	lsls	r2, r3, #12
    e8d2:	2300      	movs	r3, #0
    e8d4:	6243      	str	r3, [r0, #36]	; 0x24
    e8d6:	61c3      	str	r3, [r0, #28]
    e8d8:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    e8dc:	6902      	ldr	r2, [r0, #16]
    e8de:	6840      	ldr	r0, [r0, #4]
    e8e0:	68e6      	ldr	r6, [r4, #12]
    e8e2:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    e8e6:	2501      	movs	r5, #1
    e8e8:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    e8ec:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    e8f0:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    e8f4:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    e8f8:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    e8fc:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    e900:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    e904:	6223      	str	r3, [r4, #32]
    e906:	b2c0      	uxtb	r0, r0
    e908:	fa22 f305 	lsr.w	r3, r2, r5
    e90c:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    e910:	f604 0228 	addw	r2, r4, #2088	; 0x828
    e914:	a901      	add	r1, sp, #4
    e916:	9301      	str	r3, [sp, #4]
    e918:	9602      	str	r6, [sp, #8]
    e91a:	f88d 500c 	strb.w	r5, [sp, #12]
    e91e:	f001 fa49 	bl	fdb4 <am_hal_cmdq_init>
    e922:	6863      	ldr	r3, [r4, #4]
    e924:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    e928:	3304      	adds	r3, #4
    e92a:	031b      	lsls	r3, r3, #12
    e92c:	b960      	cbnz	r0, e948 <am_hal_iom_enable+0xcc>
    e92e:	f44f 7180 	mov.w	r1, #256	; 0x100
    e932:	2202      	movs	r2, #2
    e934:	6221      	str	r1, [r4, #32]
    e936:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e93a:	78e3      	ldrb	r3, [r4, #3]
    e93c:	f043 0302 	orr.w	r3, r3, #2
    e940:	70e3      	strb	r3, [r4, #3]
    e942:	2000      	movs	r0, #0
    e944:	b004      	add	sp, #16
    e946:	bd70      	pop	{r4, r5, r6, pc}
    e948:	2202      	movs	r2, #2
    e94a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    e94e:	e7f9      	b.n	e944 <am_hal_iom_enable+0xc8>
    e950:	2000      	movs	r0, #0
    e952:	4770      	bx	lr
    e954:	01123456 	.word	0x01123456
    e958:	00800040 	.word	0x00800040

0000e95c <am_hal_iom_power_ctrl>:
    e95c:	b140      	cbz	r0, e970 <am_hal_iom_power_ctrl+0x14>
    e95e:	b538      	push	{r3, r4, r5, lr}
    e960:	6803      	ldr	r3, [r0, #0]
    e962:	4c85      	ldr	r4, [pc, #532]	; (eb78 <am_hal_iom_power_ctrl+0x21c>)
    e964:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e968:	42a3      	cmp	r3, r4
    e96a:	d003      	beq.n	e974 <am_hal_iom_power_ctrl+0x18>
    e96c:	2002      	movs	r0, #2
    e96e:	bd38      	pop	{r3, r4, r5, pc}
    e970:	2002      	movs	r0, #2
    e972:	4770      	bx	lr
    e974:	4604      	mov	r4, r0
    e976:	4615      	mov	r5, r2
    e978:	b199      	cbz	r1, e9a2 <am_hal_iom_power_ctrl+0x46>
    e97a:	2902      	cmp	r1, #2
    e97c:	d80f      	bhi.n	e99e <am_hal_iom_power_ctrl+0x42>
    e97e:	78c3      	ldrb	r3, [r0, #3]
    e980:	6840      	ldr	r0, [r0, #4]
    e982:	079a      	lsls	r2, r3, #30
    e984:	d519      	bpl.n	e9ba <am_hal_iom_power_ctrl+0x5e>
    e986:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e98a:	3304      	adds	r3, #4
    e98c:	031b      	lsls	r3, r3, #12
    e98e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    e992:	f003 0306 	and.w	r3, r3, #6
    e996:	2b04      	cmp	r3, #4
    e998:	d00c      	beq.n	e9b4 <am_hal_iom_power_ctrl+0x58>
    e99a:	2003      	movs	r0, #3
    e99c:	bd38      	pop	{r3, r4, r5, pc}
    e99e:	2006      	movs	r0, #6
    e9a0:	bd38      	pop	{r3, r4, r5, pc}
    e9a2:	2a00      	cmp	r2, #0
    e9a4:	f000 80cf 	beq.w	eb46 <am_hal_iom_power_ctrl+0x1ea>
    e9a8:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	d146      	bne.n	ea3e <am_hal_iom_power_ctrl+0xe2>
    e9b0:	2007      	movs	r0, #7
    e9b2:	bd38      	pop	{r3, r4, r5, pc}
    e9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e9b6:	2b00      	cmp	r3, #0
    e9b8:	d1ef      	bne.n	e99a <am_hal_iom_power_ctrl+0x3e>
    e9ba:	b3d5      	cbz	r5, ea32 <am_hal_iom_power_ctrl+0xd6>
    e9bc:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    e9c0:	3304      	adds	r3, #4
    e9c2:	031b      	lsls	r3, r3, #12
    e9c4:	2201      	movs	r2, #1
    e9c6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    e9ca:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    e9ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    e9d2:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    e9d6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    e9da:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    e9de:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    e9e2:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    e9e6:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    e9ea:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    e9ee:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    e9f2:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    e9f6:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    e9fa:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    e9fe:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    ea02:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    ea06:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    ea0a:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    ea0e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    ea12:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    ea16:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    ea1a:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    ea1e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    ea22:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    ea26:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    ea2a:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    ea2e:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ea32:	3002      	adds	r0, #2
    ea34:	b2c0      	uxtb	r0, r0
    ea36:	f000 fca1 	bl	f37c <am_hal_pwrctrl_periph_disable>
    ea3a:	2000      	movs	r0, #0
    ea3c:	bd38      	pop	{r3, r4, r5, pc}
    ea3e:	6843      	ldr	r3, [r0, #4]
    ea40:	1c98      	adds	r0, r3, #2
    ea42:	b2c0      	uxtb	r0, r0
    ea44:	f000 fc70 	bl	f328 <am_hal_pwrctrl_periph_enable>
    ea48:	6863      	ldr	r3, [r4, #4]
    ea4a:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ea4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea52:	3304      	adds	r3, #4
    ea54:	031b      	lsls	r3, r3, #12
    ea56:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ea5a:	6863      	ldr	r3, [r4, #4]
    ea5c:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ea60:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea64:	3304      	adds	r3, #4
    ea66:	031b      	lsls	r3, r3, #12
    ea68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ea6c:	6863      	ldr	r3, [r4, #4]
    ea6e:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ea72:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea76:	3304      	adds	r3, #4
    ea78:	031b      	lsls	r3, r3, #12
    ea7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ea7e:	6863      	ldr	r3, [r4, #4]
    ea80:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ea84:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea88:	3304      	adds	r3, #4
    ea8a:	031b      	lsls	r3, r3, #12
    ea8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    ea90:	6863      	ldr	r3, [r4, #4]
    ea92:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ea96:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ea9a:	3304      	adds	r3, #4
    ea9c:	031b      	lsls	r3, r3, #12
    ea9e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    eaa2:	6863      	ldr	r3, [r4, #4]
    eaa4:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    eaa8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eaac:	3304      	adds	r3, #4
    eaae:	031b      	lsls	r3, r3, #12
    eab0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    eab4:	6863      	ldr	r3, [r4, #4]
    eab6:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    eaba:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eabe:	3304      	adds	r3, #4
    eac0:	031b      	lsls	r3, r3, #12
    eac2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    eac6:	6863      	ldr	r3, [r4, #4]
    eac8:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    eacc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ead0:	3304      	adds	r3, #4
    ead2:	031b      	lsls	r3, r3, #12
    ead4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    ead8:	6863      	ldr	r3, [r4, #4]
    eada:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    eade:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eae2:	3304      	adds	r3, #4
    eae4:	031b      	lsls	r3, r3, #12
    eae6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eaea:	6863      	ldr	r3, [r4, #4]
    eaec:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    eaf0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eaf4:	3304      	adds	r3, #4
    eaf6:	031b      	lsls	r3, r3, #12
    eaf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eafc:	6863      	ldr	r3, [r4, #4]
    eafe:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    eb02:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb06:	3304      	adds	r3, #4
    eb08:	031b      	lsls	r3, r3, #12
    eb0a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    eb0e:	6863      	ldr	r3, [r4, #4]
    eb10:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    eb14:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb18:	3304      	adds	r3, #4
    eb1a:	031b      	lsls	r3, r3, #12
    eb1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    eb20:	6863      	ldr	r3, [r4, #4]
    eb22:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    eb26:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb2a:	3304      	adds	r3, #4
    eb2c:	031b      	lsls	r3, r3, #12
    eb2e:	f022 0201 	bic.w	r2, r2, #1
    eb32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    eb36:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    eb3a:	07db      	lsls	r3, r3, #31
    eb3c:	d40a      	bmi.n	eb54 <am_hal_iom_power_ctrl+0x1f8>
    eb3e:	2000      	movs	r0, #0
    eb40:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    eb44:	bd38      	pop	{r3, r4, r5, pc}
    eb46:	6840      	ldr	r0, [r0, #4]
    eb48:	3002      	adds	r0, #2
    eb4a:	b2c0      	uxtb	r0, r0
    eb4c:	f000 fbec 	bl	f328 <am_hal_pwrctrl_periph_enable>
    eb50:	4628      	mov	r0, r5
    eb52:	bd38      	pop	{r3, r4, r5, pc}
    eb54:	6a63      	ldr	r3, [r4, #36]	; 0x24
    eb56:	b953      	cbnz	r3, eb6e <am_hal_iom_power_ctrl+0x212>
    eb58:	6863      	ldr	r3, [r4, #4]
    eb5a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eb5e:	3304      	adds	r3, #4
    eb60:	031b      	lsls	r3, r3, #12
    eb62:	f503 7226 	add.w	r2, r3, #664	; 0x298
    eb66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    eb6a:	e883 000c 	stmia.w	r3, {r2, r3}
    eb6e:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    eb72:	f001 f983 	bl	fe7c <am_hal_cmdq_enable>
    eb76:	e7e2      	b.n	eb3e <am_hal_iom_power_ctrl+0x1e2>
    eb78:	01123456 	.word	0x01123456

0000eb7c <am_hal_iom_configure>:
    eb7c:	b128      	cbz	r0, eb8a <am_hal_iom_configure+0xe>
    eb7e:	6803      	ldr	r3, [r0, #0]
    eb80:	4a88      	ldr	r2, [pc, #544]	; (eda4 <am_hal_iom_configure+0x228>)
    eb82:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eb86:	4293      	cmp	r3, r2
    eb88:	d001      	beq.n	eb8e <am_hal_iom_configure+0x12>
    eb8a:	2002      	movs	r0, #2
    eb8c:	4770      	bx	lr
    eb8e:	b111      	cbz	r1, eb96 <am_hal_iom_configure+0x1a>
    eb90:	6843      	ldr	r3, [r0, #4]
    eb92:	2b05      	cmp	r3, #5
    eb94:	d901      	bls.n	eb9a <am_hal_iom_configure+0x1e>
    eb96:	2006      	movs	r0, #6
    eb98:	4770      	bx	lr
    eb9a:	78c2      	ldrb	r2, [r0, #3]
    eb9c:	0792      	lsls	r2, r2, #30
    eb9e:	d501      	bpl.n	eba4 <am_hal_iom_configure+0x28>
    eba0:	2007      	movs	r0, #7
    eba2:	4770      	bx	lr
    eba4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    eba8:	3304      	adds	r3, #4
    ebaa:	780a      	ldrb	r2, [r1, #0]
    ebac:	031b      	lsls	r3, r3, #12
    ebae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebb2:	f241 0410 	movw	r4, #4112	; 0x1010
    ebb6:	7202      	strb	r2, [r0, #8]
    ebb8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    ebbc:	b92a      	cbnz	r2, ebca <am_hal_iom_configure+0x4e>
    ebbe:	7a0e      	ldrb	r6, [r1, #8]
    ebc0:	2e03      	cmp	r6, #3
    ebc2:	d907      	bls.n	ebd4 <am_hal_iom_configure+0x58>
    ebc4:	2006      	movs	r0, #6
    ebc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebca:	2a01      	cmp	r2, #1
    ebcc:	d06a      	beq.n	eca4 <am_hal_iom_configure+0x128>
    ebce:	2005      	movs	r0, #5
    ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebd4:	f8d1 a004 	ldr.w	sl, [r1, #4]
    ebd8:	4a73      	ldr	r2, [pc, #460]	; (eda8 <am_hal_iom_configure+0x22c>)
    ebda:	4592      	cmp	sl, r2
    ebdc:	d8f2      	bhi.n	ebc4 <am_hal_iom_configure+0x48>
    ebde:	f1ba 0f00 	cmp.w	sl, #0
    ebe2:	d03e      	beq.n	ec62 <am_hal_iom_configure+0xe6>
    ebe4:	fbb2 f2fa 	udiv	r2, r2, sl
    ebe8:	fb0a f402 	mul.w	r4, sl, r2
    ebec:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    ebf0:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    ebf4:	2c00      	cmp	r4, #0
    ebf6:	bf0c      	ite	eq
    ebf8:	4614      	moveq	r4, r2
    ebfa:	1c54      	addne	r4, r2, #1
    ebfc:	4262      	negs	r2, r4
    ebfe:	4022      	ands	r2, r4
    ec00:	fab2 f282 	clz	r2, r2
    ec04:	f1c2 021f 	rsb	r2, r2, #31
    ec08:	2a06      	cmp	r2, #6
    ec0a:	bfa8      	it	ge
    ec0c:	2206      	movge	r2, #6
    ec0e:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    ec12:	f240 80c0 	bls.w	ed96 <am_hal_iom_configure+0x21a>
    ec16:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    ec1a:	4f64      	ldr	r7, [pc, #400]	; (edac <am_hal_iom_configure+0x230>)
    ec1c:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    ec20:	42bd      	cmp	r5, r7
    ec22:	bf8c      	ite	hi
    ec24:	f04f 0800 	movhi.w	r8, #0
    ec28:	f04f 0801 	movls.w	r8, #1
    ec2c:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    ec30:	f10e 0e01 	add.w	lr, lr, #1
    ec34:	fa0e f702 	lsl.w	r7, lr, r2
    ec38:	fbb4 f5f7 	udiv	r5, r4, r7
    ec3c:	fb07 4715 	mls	r7, r7, r5, r4
    ec40:	2f00      	cmp	r7, #0
    ec42:	bf18      	it	ne
    ec44:	3501      	addne	r5, #1
    ec46:	fab5 f785 	clz	r7, r5
    ec4a:	f1c7 071f 	rsb	r7, r7, #31
    ec4e:	2f07      	cmp	r7, #7
    ec50:	f240 809e 	bls.w	ed90 <am_hal_iom_configure+0x214>
    ec54:	3a07      	subs	r2, #7
    ec56:	443a      	add	r2, r7
    ec58:	f102 0901 	add.w	r9, r2, #1
    ec5c:	f1b9 0f07 	cmp.w	r9, #7
    ec60:	d934      	bls.n	eccc <am_hal_iom_configure+0x150>
    ec62:	2400      	movs	r4, #0
    ec64:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    ec68:	f044 0401 	orr.w	r4, r4, #1
    ec6c:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    ec70:	68cb      	ldr	r3, [r1, #12]
    ec72:	684d      	ldr	r5, [r1, #4]
    ec74:	690c      	ldr	r4, [r1, #16]
    ec76:	60c3      	str	r3, [r0, #12]
    ec78:	2300      	movs	r3, #0
    ec7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ec7e:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    ec82:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    ec86:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    ec8a:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    ec8e:	6104      	str	r4, [r0, #16]
    ec90:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    ec94:	4a44      	ldr	r2, [pc, #272]	; (eda8 <am_hal_iom_configure+0x22c>)
    ec96:	fbb2 f2f5 	udiv	r2, r2, r5
    ec9a:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    ec9e:	4618      	mov	r0, r3
    eca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eca4:	684a      	ldr	r2, [r1, #4]
    eca6:	4c42      	ldr	r4, [pc, #264]	; (edb0 <am_hal_iom_configure+0x234>)
    eca8:	42a2      	cmp	r2, r4
    ecaa:	d06c      	beq.n	ed86 <am_hal_iom_configure+0x20a>
    ecac:	4c41      	ldr	r4, [pc, #260]	; (edb4 <am_hal_iom_configure+0x238>)
    ecae:	42a2      	cmp	r2, r4
    ecb0:	d064      	beq.n	ed7c <am_hal_iom_configure+0x200>
    ecb2:	4c41      	ldr	r4, [pc, #260]	; (edb8 <am_hal_iom_configure+0x23c>)
    ecb4:	42a2      	cmp	r2, r4
    ecb6:	d185      	bne.n	ebc4 <am_hal_iom_configure+0x48>
    ecb8:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    ecbc:	4a3f      	ldr	r2, [pc, #252]	; (edbc <am_hal_iom_configure+0x240>)
    ecbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ecc2:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    ecc6:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    ecca:	e7cd      	b.n	ec68 <am_hal_iom_configure+0xec>
    eccc:	3f07      	subs	r7, #7
    ecce:	f04f 0c01 	mov.w	ip, #1
    ecd2:	fa0c fc07 	lsl.w	ip, ip, r7
    ecd6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    ecda:	ea0c 0c05 	and.w	ip, ip, r5
    ecde:	40fd      	lsrs	r5, r7
    ece0:	f1bc 0f00 	cmp.w	ip, #0
    ece4:	bf18      	it	ne
    ece6:	3501      	addne	r5, #1
    ece8:	4f35      	ldr	r7, [pc, #212]	; (edc0 <am_hal_iom_configure+0x244>)
    ecea:	45ba      	cmp	sl, r7
    ecec:	d843      	bhi.n	ed76 <am_hal_iom_configure+0x1fa>
    ecee:	f04f 0c01 	mov.w	ip, #1
    ecf2:	fa0c fc02 	lsl.w	ip, ip, r2
    ecf6:	ebbc 0c04 	subs.w	ip, ip, r4
    ecfa:	bf18      	it	ne
    ecfc:	f04f 0c01 	movne.w	ip, #1
    ed00:	1074      	asrs	r4, r6, #1
    ed02:	2c01      	cmp	r4, #1
    ed04:	d04a      	beq.n	ed9c <am_hal_iom_configure+0x220>
    ed06:	3d01      	subs	r5, #1
    ed08:	086f      	lsrs	r7, r5, #1
    ed0a:	fa0e f402 	lsl.w	r4, lr, r2
    ed0e:	fb05 fe0c 	mul.w	lr, r5, ip
    ed12:	fb0e 4404 	mla	r4, lr, r4, r4
    ed16:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    ed1a:	f8df 908c 	ldr.w	r9, [pc, #140]	; eda8 <am_hal_iom_configure+0x22c>
    ed1e:	fbb9 fbf4 	udiv	fp, r9, r4
    ed22:	fb04 fa0b 	mul.w	sl, r4, fp
    ed26:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    ed2a:	0864      	lsrs	r4, r4, #1
    ed2c:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    ed30:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    ed34:	4554      	cmp	r4, sl
    ed36:	bf2c      	ite	cs
    ed38:	46da      	movcs	sl, fp
    ed3a:	f10b 0a01 	addcc.w	sl, fp, #1
    ed3e:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    ed42:	f8df b090 	ldr.w	fp, [pc, #144]	; edd4 <am_hal_iom_configure+0x258>
    ed46:	fbba f4fb 	udiv	r4, sl, fp
    ed4a:	043f      	lsls	r7, r7, #16
    ed4c:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    ed50:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    ed54:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    ed58:	fb0b ab14 	mls	fp, fp, r4, sl
    ed5c:	432f      	orrs	r7, r5
    ed5e:	f1bb 0f00 	cmp.w	fp, #0
    ed62:	d105      	bne.n	ed70 <am_hal_iom_configure+0x1f4>
    ed64:	b124      	cbz	r4, ed70 <am_hal_iom_configure+0x1f4>
    ed66:	1e65      	subs	r5, r4, #1
    ed68:	4225      	tst	r5, r4
    ed6a:	d101      	bne.n	ed70 <am_hal_iom_configure+0x1f4>
    ed6c:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    ed70:	2400      	movs	r4, #0
    ed72:	433c      	orrs	r4, r7
    ed74:	e776      	b.n	ec64 <am_hal_iom_configure+0xe8>
    ed76:	f04f 0c00 	mov.w	ip, #0
    ed7a:	e7c1      	b.n	ed00 <am_hal_iom_configure+0x184>
    ed7c:	4a11      	ldr	r2, [pc, #68]	; (edc4 <am_hal_iom_configure+0x248>)
    ed7e:	4c12      	ldr	r4, [pc, #72]	; (edc8 <am_hal_iom_configure+0x24c>)
    ed80:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ed84:	e770      	b.n	ec68 <am_hal_iom_configure+0xec>
    ed86:	4a11      	ldr	r2, [pc, #68]	; (edcc <am_hal_iom_configure+0x250>)
    ed88:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ed8c:	4c10      	ldr	r4, [pc, #64]	; (edd0 <am_hal_iom_configure+0x254>)
    ed8e:	e76b      	b.n	ec68 <am_hal_iom_configure+0xec>
    ed90:	f102 0901 	add.w	r9, r2, #1
    ed94:	e7a8      	b.n	ece8 <am_hal_iom_configure+0x16c>
    ed96:	f04f 0801 	mov.w	r8, #1
    ed9a:	e747      	b.n	ec2c <am_hal_iom_configure+0xb0>
    ed9c:	1eaf      	subs	r7, r5, #2
    ed9e:	087f      	lsrs	r7, r7, #1
    eda0:	3d01      	subs	r5, #1
    eda2:	e7b2      	b.n	ed0a <am_hal_iom_configure+0x18e>
    eda4:	01123456 	.word	0x01123456
    eda8:	02dc6c00 	.word	0x02dc6c00
    edac:	007a11ff 	.word	0x007a11ff
    edb0:	00061a80 	.word	0x00061a80
    edb4:	000f4240 	.word	0x000f4240
    edb8:	000186a0 	.word	0x000186a0
    edbc:	0003f070 	.word	0x0003f070
    edc0:	00b71aff 	.word	0x00b71aff
    edc4:	00213040 	.word	0x00213040
    edc8:	06031301 	.word	0x06031301
    edcc:	0003f270 	.word	0x0003f270
    edd0:	1d0e1201 	.word	0x1d0e1201
    edd4:	0003d090 	.word	0x0003d090

0000edd8 <am_hal_iom_blocking_transfer>:
    edd8:	b128      	cbz	r0, ede6 <am_hal_iom_blocking_transfer+0xe>
    edda:	6803      	ldr	r3, [r0, #0]
    eddc:	4ac8      	ldr	r2, [pc, #800]	; (f100 <am_hal_iom_blocking_transfer+0x328>)
    edde:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ede2:	4293      	cmp	r3, r2
    ede4:	d001      	beq.n	edea <am_hal_iom_blocking_transfer+0x12>
    ede6:	2002      	movs	r0, #2
    ede8:	4770      	bx	lr
    edea:	b159      	cbz	r1, ee04 <am_hal_iom_blocking_transfer+0x2c>
    edec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edf0:	f891 8010 	ldrb.w	r8, [r1, #16]
    edf4:	f1b8 0f01 	cmp.w	r8, #1
    edf8:	b087      	sub	sp, #28
    edfa:	d905      	bls.n	ee08 <am_hal_iom_blocking_transfer+0x30>
    edfc:	2007      	movs	r0, #7
    edfe:	b007      	add	sp, #28
    ee00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee04:	2006      	movs	r0, #6
    ee06:	4770      	bx	lr
    ee08:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    ee0c:	f1ba 0f00 	cmp.w	sl, #0
    ee10:	d102      	bne.n	ee18 <am_hal_iom_blocking_transfer+0x40>
    ee12:	f881 a010 	strb.w	sl, [r1, #16]
    ee16:	46d0      	mov	r8, sl
    ee18:	f8d1 9004 	ldr.w	r9, [r1, #4]
    ee1c:	f1b9 0f03 	cmp.w	r9, #3
    ee20:	d901      	bls.n	ee26 <am_hal_iom_blocking_transfer+0x4e>
    ee22:	2006      	movs	r0, #6
    ee24:	e7eb      	b.n	edfe <am_hal_iom_blocking_transfer+0x26>
    ee26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    ee2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee2e:	f8d1 b008 	ldr.w	fp, [r1, #8]
    ee32:	4093      	lsls	r3, r2
    ee34:	ea13 0f0b 	tst.w	r3, fp
    ee38:	d1f3      	bne.n	ee22 <am_hal_iom_blocking_transfer+0x4a>
    ee3a:	f1ba 0f00 	cmp.w	sl, #0
    ee3e:	f000 80c5 	beq.w	efcc <am_hal_iom_blocking_transfer+0x1f4>
    ee42:	f1b8 0f00 	cmp.w	r8, #0
    ee46:	f000 80d3 	beq.w	eff0 <am_hal_iom_blocking_transfer+0x218>
    ee4a:	698b      	ldr	r3, [r1, #24]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d0e8      	beq.n	ee22 <am_hal_iom_blocking_transfer+0x4a>
    ee50:	7a03      	ldrb	r3, [r0, #8]
    ee52:	2b01      	cmp	r3, #1
    ee54:	f040 80be 	bne.w	efd4 <am_hal_iom_blocking_transfer+0x1fc>
    ee58:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    ee5c:	d8e1      	bhi.n	ee22 <am_hal_iom_blocking_transfer+0x4a>
    ee5e:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    ee62:	2b02      	cmp	r3, #2
    ee64:	d0ca      	beq.n	edfc <am_hal_iom_blocking_transfer+0x24>
    ee66:	7f0b      	ldrb	r3, [r1, #28]
    ee68:	694f      	ldr	r7, [r1, #20]
    ee6a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    ee6e:	9303      	str	r3, [sp, #12]
    ee70:	4604      	mov	r4, r0
    ee72:	2301      	movs	r3, #1
    ee74:	460d      	mov	r5, r1
    ee76:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    ee7a:	6866      	ldr	r6, [r4, #4]
    ee7c:	9300      	str	r3, [sp, #0]
    ee7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee82:	2300      	movs	r3, #0
    ee84:	f104 0124 	add.w	r1, r4, #36	; 0x24
    ee88:	4598      	cmp	r8, r3
    ee8a:	bf18      	it	ne
    ee8c:	4677      	movne	r7, lr
    ee8e:	f7ff fa53 	bl	e338 <am_hal_flash_delay_status_check>
    ee92:	2800      	cmp	r0, #0
    ee94:	d1b3      	bne.n	edfe <am_hal_iom_blocking_transfer+0x26>
    ee96:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    ee9a:	3604      	adds	r6, #4
    ee9c:	2301      	movs	r3, #1
    ee9e:	0336      	lsls	r6, r6, #12
    eea0:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    eea4:	9300      	str	r3, [sp, #0]
    eea6:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    eeaa:	9304      	str	r3, [sp, #16]
    eeac:	4619      	mov	r1, r3
    eeae:	2206      	movs	r2, #6
    eeb0:	2304      	movs	r3, #4
    eeb2:	f7ff fa41 	bl	e338 <am_hal_flash_delay_status_check>
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d1a1      	bne.n	edfe <am_hal_iom_blocking_transfer+0x26>
    eeba:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    eebe:	9305      	str	r3, [sp, #20]
    eec0:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    eec4:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    eec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eecc:	f360 0300 	bfi	r3, r0, #0, #1
    eed0:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    eed4:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    eed8:	682b      	ldr	r3, [r5, #0]
    eeda:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    eede:	7a23      	ldrb	r3, [r4, #8]
    eee0:	b91b      	cbnz	r3, eeea <am_hal_iom_blocking_transfer+0x112>
    eee2:	682b      	ldr	r3, [r5, #0]
    eee4:	4423      	add	r3, r4
    eee6:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    eeea:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    eeee:	7a23      	ldrb	r3, [r4, #8]
    eef0:	2b00      	cmp	r3, #0
    eef2:	d17b      	bne.n	efec <am_hal_iom_blocking_transfer+0x214>
    eef4:	682b      	ldr	r3, [r5, #0]
    eef6:	4a83      	ldr	r2, [pc, #524]	; (f104 <am_hal_iom_blocking_transfer+0x32c>)
    eef8:	051b      	lsls	r3, r3, #20
    eefa:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    eefe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    ef02:	ea0a 0202 	and.w	r2, sl, r2
    ef06:	f1b8 0f01 	cmp.w	r8, #1
    ef0a:	ea42 0203 	orr.w	r2, r2, r3
    ef0e:	d074      	beq.n	effa <am_hal_iom_blocking_transfer+0x222>
    ef10:	f3cb 230f 	ubfx	r3, fp, #8, #16
    ef14:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    ef18:	ea4f 1149 	mov.w	r1, r9, lsl #5
    ef1c:	ea4f 600b 	mov.w	r0, fp, lsl #24
    ef20:	f040 0001 	orr.w	r0, r0, #1
    ef24:	f001 0160 	and.w	r1, r1, #96	; 0x60
    ef28:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    ef2c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ef30:	4301      	orrs	r1, r0
    ef32:	9803      	ldr	r0, [sp, #12]
    ef34:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ef38:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    ef3c:	2b03      	cmp	r3, #3
    ef3e:	ea42 0201 	orr.w	r2, r2, r1
    ef42:	f240 80b8 	bls.w	f0b6 <am_hal_iom_blocking_transfer+0x2de>
    ef46:	f1b8 0f00 	cmp.w	r8, #0
    ef4a:	d00a      	beq.n	ef62 <am_hal_iom_blocking_transfer+0x18a>
    ef4c:	4641      	mov	r1, r8
    ef4e:	f857 0b04 	ldr.w	r0, [r7], #4
    ef52:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    ef56:	2903      	cmp	r1, #3
    ef58:	f1a3 0304 	sub.w	r3, r3, #4
    ef5c:	f1a1 0104 	sub.w	r1, r1, #4
    ef60:	d82f      	bhi.n	efc2 <am_hal_iom_blocking_transfer+0x1ea>
    ef62:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    ef66:	f04f 0800 	mov.w	r8, #0
    ef6a:	2701      	movs	r7, #1
    ef6c:	9904      	ldr	r1, [sp, #16]
    ef6e:	9700      	str	r7, [sp, #0]
    ef70:	2304      	movs	r3, #4
    ef72:	2206      	movs	r2, #6
    ef74:	4864      	ldr	r0, [pc, #400]	; (f108 <am_hal_iom_blocking_transfer+0x330>)
    ef76:	f7ff f9df 	bl	e338 <am_hal_flash_delay_status_check>
    ef7a:	4605      	mov	r5, r0
    ef7c:	b978      	cbnz	r0, ef9e <am_hal_iom_blocking_transfer+0x1c6>
    ef7e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    ef82:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    ef86:	f040 8090 	bne.w	f0aa <am_hal_iom_blocking_transfer+0x2d2>
    ef8a:	0599      	lsls	r1, r3, #22
    ef8c:	f100 8090 	bmi.w	f0b0 <am_hal_iom_blocking_transfer+0x2d8>
    ef90:	06da      	lsls	r2, r3, #27
    ef92:	f100 80d2 	bmi.w	f13a <am_hal_iom_blocking_transfer+0x362>
    ef96:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    ef9a:	d00e      	beq.n	efba <am_hal_iom_blocking_transfer+0x1e2>
    ef9c:	463d      	mov	r5, r7
    ef9e:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    efa2:	4620      	mov	r0, r4
    efa4:	f7ff fbca 	bl	e73c <internal_iom_reset_on_error>
    efa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efac:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    efb0:	9b05      	ldr	r3, [sp, #20]
    efb2:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    efb6:	4628      	mov	r0, r5
    efb8:	e721      	b.n	edfe <am_hal_iom_blocking_transfer+0x26>
    efba:	f1b8 0f00 	cmp.w	r8, #0
    efbe:	d0f3      	beq.n	efa8 <am_hal_iom_blocking_transfer+0x1d0>
    efc0:	e7ec      	b.n	ef9c <am_hal_iom_blocking_transfer+0x1c4>
    efc2:	2b03      	cmp	r3, #3
    efc4:	d976      	bls.n	f0b4 <am_hal_iom_blocking_transfer+0x2dc>
    efc6:	2900      	cmp	r1, #0
    efc8:	d1c1      	bne.n	ef4e <am_hal_iom_blocking_transfer+0x176>
    efca:	e7ca      	b.n	ef62 <am_hal_iom_blocking_transfer+0x18a>
    efcc:	7a03      	ldrb	r3, [r0, #8]
    efce:	2b01      	cmp	r3, #1
    efd0:	f43f af45 	beq.w	ee5e <am_hal_iom_blocking_transfer+0x86>
    efd4:	2b00      	cmp	r3, #0
    efd6:	f47f af42 	bne.w	ee5e <am_hal_iom_blocking_transfer+0x86>
    efda:	680b      	ldr	r3, [r1, #0]
    efdc:	2b03      	cmp	r3, #3
    efde:	f63f af20 	bhi.w	ee22 <am_hal_iom_blocking_transfer+0x4a>
    efe2:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    efe6:	f4bf af1c 	bcs.w	ee22 <am_hal_iom_blocking_transfer+0x4a>
    efea:	e738      	b.n	ee5e <am_hal_iom_blocking_transfer+0x86>
    efec:	2300      	movs	r3, #0
    efee:	e782      	b.n	eef6 <am_hal_iom_blocking_transfer+0x11e>
    eff0:	694b      	ldr	r3, [r1, #20]
    eff2:	2b00      	cmp	r3, #0
    eff4:	f47f af2c 	bne.w	ee50 <am_hal_iom_blocking_transfer+0x78>
    eff8:	e713      	b.n	ee22 <am_hal_iom_blocking_transfer+0x4a>
    effa:	ea4f 1349 	mov.w	r3, r9, lsl #5
    effe:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f002:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f006:	9b03      	ldr	r3, [sp, #12]
    f008:	f041 0102 	orr.w	r1, r1, #2
    f00c:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f010:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f014:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f018:	ea4e 0301 	orr.w	r3, lr, r1
    f01c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f020:	431a      	orrs	r2, r3
    f022:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f026:	2200      	movs	r2, #0
    f028:	f1b8 0f00 	cmp.w	r8, #0
    f02c:	d09b      	beq.n	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f02e:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f032:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f036:	2b03      	cmp	r3, #3
    f038:	d81e      	bhi.n	f078 <am_hal_iom_blocking_transfer+0x2a0>
    f03a:	4d33      	ldr	r5, [pc, #204]	; (f108 <am_hal_iom_blocking_transfer+0x330>)
    f03c:	e001      	b.n	f042 <am_hal_iom_blocking_transfer+0x26a>
    f03e:	3d01      	subs	r5, #1
    f040:	d093      	beq.n	ef6a <am_hal_iom_blocking_transfer+0x192>
    f042:	2010      	movs	r0, #16
    f044:	b10a      	cbz	r2, f04a <am_hal_iom_blocking_transfer+0x272>
    f046:	4598      	cmp	r8, r3
    f048:	d88f      	bhi.n	ef6a <am_hal_iom_blocking_transfer+0x192>
    f04a:	f7ff f965 	bl	e318 <am_hal_flash_delay>
    f04e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f052:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f056:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f05a:	2b03      	cmp	r3, #3
    f05c:	f002 0201 	and.w	r2, r2, #1
    f060:	d9ed      	bls.n	f03e <am_hal_iom_blocking_transfer+0x266>
    f062:	e009      	b.n	f078 <am_hal_iom_blocking_transfer+0x2a0>
    f064:	2b03      	cmp	r3, #3
    f066:	6039      	str	r1, [r7, #0]
    f068:	f1a8 0804 	sub.w	r8, r8, #4
    f06c:	d967      	bls.n	f13e <am_hal_iom_blocking_transfer+0x366>
    f06e:	f1b8 0f00 	cmp.w	r8, #0
    f072:	f43f af78 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f076:	4607      	mov	r7, r0
    f078:	f1b8 0f03 	cmp.w	r8, #3
    f07c:	f1a3 0304 	sub.w	r3, r3, #4
    f080:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f084:	f107 0004 	add.w	r0, r7, #4
    f088:	d8ec      	bhi.n	f064 <am_hal_iom_blocking_transfer+0x28c>
    f08a:	f1b8 0f01 	cmp.w	r8, #1
    f08e:	7039      	strb	r1, [r7, #0]
    f090:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f094:	f43f af67 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f098:	f1b8 0f02 	cmp.w	r8, #2
    f09c:	707b      	strb	r3, [r7, #1]
    f09e:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f0a2:	f43f af60 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f0a6:	70b9      	strb	r1, [r7, #2]
    f0a8:	e75d      	b.n	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f0aa:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f0ae:	e776      	b.n	ef9e <am_hal_iom_blocking_transfer+0x1c6>
    f0b0:	4d16      	ldr	r5, [pc, #88]	; (f10c <am_hal_iom_blocking_transfer+0x334>)
    f0b2:	e774      	b.n	ef9e <am_hal_iom_blocking_transfer+0x1c6>
    f0b4:	4688      	mov	r8, r1
    f0b6:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f0ba:	f1b8 0f00 	cmp.w	r8, #0
    f0be:	f43f af52 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f0c2:	463b      	mov	r3, r7
    f0c4:	4647      	mov	r7, r8
    f0c6:	4698      	mov	r8, r3
    f0c8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f0cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f0d0:	2b03      	cmp	r3, #3
    f0d2:	d820      	bhi.n	f116 <am_hal_iom_blocking_transfer+0x33e>
    f0d4:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f0d8:	07d8      	lsls	r0, r3, #31
    f0da:	d42c      	bmi.n	f136 <am_hal_iom_blocking_transfer+0x35e>
    f0dc:	4d0a      	ldr	r5, [pc, #40]	; (f108 <am_hal_iom_blocking_transfer+0x330>)
    f0de:	e005      	b.n	f0ec <am_hal_iom_blocking_transfer+0x314>
    f0e0:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f0e4:	07db      	lsls	r3, r3, #31
    f0e6:	d426      	bmi.n	f136 <am_hal_iom_blocking_transfer+0x35e>
    f0e8:	3d01      	subs	r5, #1
    f0ea:	d024      	beq.n	f136 <am_hal_iom_blocking_transfer+0x35e>
    f0ec:	2010      	movs	r0, #16
    f0ee:	f7ff f913 	bl	e318 <am_hal_flash_delay>
    f0f2:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f0f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f0fa:	2b03      	cmp	r3, #3
    f0fc:	d9f0      	bls.n	f0e0 <am_hal_iom_blocking_transfer+0x308>
    f0fe:	e00a      	b.n	f116 <am_hal_iom_blocking_transfer+0x33e>
    f100:	01123456 	.word	0x01123456
    f104:	000fff00 	.word	0x000fff00
    f108:	0007a120 	.word	0x0007a120
    f10c:	08000001 	.word	0x08000001
    f110:	2f00      	cmp	r7, #0
    f112:	f43f af28 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f116:	f858 2b04 	ldr.w	r2, [r8], #4
    f11a:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f11e:	2f03      	cmp	r7, #3
    f120:	f1a3 0304 	sub.w	r3, r3, #4
    f124:	f1a7 0704 	sub.w	r7, r7, #4
    f128:	f67f af1d 	bls.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f12c:	2b03      	cmp	r3, #3
    f12e:	d8ef      	bhi.n	f110 <am_hal_iom_blocking_transfer+0x338>
    f130:	2f00      	cmp	r7, #0
    f132:	d1c9      	bne.n	f0c8 <am_hal_iom_blocking_transfer+0x2f0>
    f134:	e717      	b.n	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f136:	46b8      	mov	r8, r7
    f138:	e717      	b.n	ef6a <am_hal_iom_blocking_transfer+0x192>
    f13a:	4d04      	ldr	r5, [pc, #16]	; (f14c <am_hal_iom_blocking_transfer+0x374>)
    f13c:	e72f      	b.n	ef9e <am_hal_iom_blocking_transfer+0x1c6>
    f13e:	f1b8 0f00 	cmp.w	r8, #0
    f142:	f43f af10 	beq.w	ef66 <am_hal_iom_blocking_transfer+0x18e>
    f146:	4607      	mov	r7, r0
    f148:	e771      	b.n	f02e <am_hal_iom_blocking_transfer+0x256>
    f14a:	bf00      	nop
    f14c:	08000002 	.word	0x08000002

0000f150 <am_hal_itm_disable>:
    f150:	b510      	push	{r4, lr}
    f152:	4b25      	ldr	r3, [pc, #148]	; (f1e8 <am_hal_itm_disable+0x98>)
    f154:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f158:	b9b3      	cbnz	r3, f188 <am_hal_itm_disable+0x38>
    f15a:	4b24      	ldr	r3, [pc, #144]	; (f1ec <am_hal_itm_disable+0x9c>)
    f15c:	68da      	ldr	r2, [r3, #12]
    f15e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f162:	60da      	str	r2, [r3, #12]
    f164:	68da      	ldr	r2, [r3, #12]
    f166:	01d2      	lsls	r2, r2, #7
    f168:	d5fc      	bpl.n	f164 <am_hal_itm_disable+0x14>
    f16a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f16e:	4920      	ldr	r1, [pc, #128]	; (f1f0 <am_hal_itm_disable+0xa0>)
    f170:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f174:	4a1f      	ldr	r2, [pc, #124]	; (f1f4 <am_hal_itm_disable+0xa4>)
    f176:	200f      	movs	r0, #15
    f178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f17c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f180:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f184:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f188:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f18c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f190:	021b      	lsls	r3, r3, #8
    f192:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f196:	d4f9      	bmi.n	f18c <am_hal_itm_disable+0x3c>
    f198:	f44f 7048 	mov.w	r0, #800	; 0x320
    f19c:	f7ff f8bc 	bl	e318 <am_hal_flash_delay>
    f1a0:	4b13      	ldr	r3, [pc, #76]	; (f1f0 <am_hal_itm_disable+0xa0>)
    f1a2:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f1a6:	4621      	mov	r1, r4
    f1a8:	2064      	movs	r0, #100	; 0x64
    f1aa:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f1ae:	f023 0301 	bic.w	r3, r3, #1
    f1b2:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f1b6:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f1ba:	4b0f      	ldr	r3, [pc, #60]	; (f1f8 <am_hal_itm_disable+0xa8>)
    f1bc:	4013      	ands	r3, r2
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d1f9      	bne.n	f1b6 <am_hal_itm_disable+0x66>
    f1c2:	3801      	subs	r0, #1
    f1c4:	d1f1      	bne.n	f1aa <am_hal_itm_disable+0x5a>
    f1c6:	4a09      	ldr	r2, [pc, #36]	; (f1ec <am_hal_itm_disable+0x9c>)
    f1c8:	68d3      	ldr	r3, [r2, #12]
    f1ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f1ce:	60d3      	str	r3, [r2, #12]
    f1d0:	68d3      	ldr	r3, [r2, #12]
    f1d2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f1d6:	d1fb      	bne.n	f1d0 <am_hal_itm_disable+0x80>
    f1d8:	4a03      	ldr	r2, [pc, #12]	; (f1e8 <am_hal_itm_disable+0x98>)
    f1da:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f1de:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f1e2:	2b00      	cmp	r3, #0
    f1e4:	d1fb      	bne.n	f1de <am_hal_itm_disable+0x8e>
    f1e6:	bd10      	pop	{r4, pc}
    f1e8:	40020000 	.word	0x40020000
    f1ec:	e000edf0 	.word	0xe000edf0
    f1f0:	c5acce55 	.word	0xc5acce55
    f1f4:	00150511 	.word	0x00150511
    f1f8:	00800001 	.word	0x00800001

0000f1fc <am_hal_mcuctrl_info_get>:
    f1fc:	b4f0      	push	{r4, r5, r6, r7}
    f1fe:	b121      	cbz	r1, f20a <am_hal_mcuctrl_info_get+0xe>
    f200:	2801      	cmp	r0, #1
    f202:	d038      	beq.n	f276 <am_hal_mcuctrl_info_get+0x7a>
    f204:	d320      	bcc.n	f248 <am_hal_mcuctrl_info_get+0x4c>
    f206:	2802      	cmp	r0, #2
    f208:	d002      	beq.n	f210 <am_hal_mcuctrl_info_get+0x14>
    f20a:	2006      	movs	r0, #6
    f20c:	bcf0      	pop	{r4, r5, r6, r7}
    f20e:	4770      	bx	lr
    f210:	4a41      	ldr	r2, [pc, #260]	; (f318 <am_hal_mcuctrl_info_get+0x11c>)
    f212:	684d      	ldr	r5, [r1, #4]
    f214:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f218:	694c      	ldr	r4, [r1, #20]
    f21a:	f003 0601 	and.w	r6, r3, #1
    f21e:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f222:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f226:	700e      	strb	r6, [r1, #0]
    f228:	7208      	strb	r0, [r1, #8]
    f22a:	740b      	strb	r3, [r1, #16]
    f22c:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f230:	60cb      	str	r3, [r1, #12]
    f232:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f236:	4328      	orrs	r0, r5
    f238:	6048      	str	r0, [r1, #4]
    f23a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f23e:	4323      	orrs	r3, r4
    f240:	2000      	movs	r0, #0
    f242:	614b      	str	r3, [r1, #20]
    f244:	bcf0      	pop	{r4, r5, r6, r7}
    f246:	4770      	bx	lr
    f248:	4a33      	ldr	r2, [pc, #204]	; (f318 <am_hal_mcuctrl_info_get+0x11c>)
    f24a:	6993      	ldr	r3, [r2, #24]
    f24c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f250:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f254:	7008      	strb	r0, [r1, #0]
    f256:	704b      	strb	r3, [r1, #1]
    f258:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f25c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f260:	710b      	strb	r3, [r1, #4]
    f262:	6953      	ldr	r3, [r2, #20]
    f264:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f268:	f003 0301 	and.w	r3, r3, #1
    f26c:	2000      	movs	r0, #0
    f26e:	708a      	strb	r2, [r1, #2]
    f270:	70cb      	strb	r3, [r1, #3]
    f272:	bcf0      	pop	{r4, r5, r6, r7}
    f274:	4770      	bx	lr
    f276:	4b28      	ldr	r3, [pc, #160]	; (f318 <am_hal_mcuctrl_info_get+0x11c>)
    f278:	4c28      	ldr	r4, [pc, #160]	; (f31c <am_hal_mcuctrl_info_get+0x120>)
    f27a:	681a      	ldr	r2, [r3, #0]
    f27c:	600a      	str	r2, [r1, #0]
    f27e:	6858      	ldr	r0, [r3, #4]
    f280:	6048      	str	r0, [r1, #4]
    f282:	6898      	ldr	r0, [r3, #8]
    f284:	6088      	str	r0, [r1, #8]
    f286:	68d8      	ldr	r0, [r3, #12]
    f288:	60c8      	str	r0, [r1, #12]
    f28a:	691d      	ldr	r5, [r3, #16]
    f28c:	4824      	ldr	r0, [pc, #144]	; (f320 <am_hal_mcuctrl_info_get+0x124>)
    f28e:	610d      	str	r5, [r1, #16]
    f290:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f294:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f298:	695d      	ldr	r5, [r3, #20]
    f29a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f29e:	4b21      	ldr	r3, [pc, #132]	; (f324 <am_hal_mcuctrl_info_get+0x128>)
    f2a0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f2a4:	6208      	str	r0, [r1, #32]
    f2a6:	f002 0201 	and.w	r2, r2, #1
    f2aa:	614d      	str	r5, [r1, #20]
    f2ac:	61cc      	str	r4, [r1, #28]
    f2ae:	618a      	str	r2, [r1, #24]
    f2b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f2b4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f2b8:	b2d0      	uxtb	r0, r2
    f2ba:	f004 020f 	and.w	r2, r4, #15
    f2be:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f2c2:	624a      	str	r2, [r1, #36]	; 0x24
    f2c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f2c8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f2cc:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f2d0:	f004 020f 	and.w	r2, r4, #15
    f2d4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f2d8:	628a      	str	r2, [r1, #40]	; 0x28
    f2da:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f2de:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f2e2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f2e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f2ea:	4302      	orrs	r2, r0
    f2ec:	62ca      	str	r2, [r1, #44]	; 0x2c
    f2ee:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f2f2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f2f6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f2fa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f2fe:	b2c0      	uxtb	r0, r0
    f300:	0400      	lsls	r0, r0, #16
    f302:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f306:	b2d2      	uxtb	r2, r2
    f308:	431a      	orrs	r2, r3
    f30a:	b2e3      	uxtb	r3, r4
    f30c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f310:	630b      	str	r3, [r1, #48]	; 0x30
    f312:	2000      	movs	r0, #0
    f314:	bcf0      	pop	{r4, r5, r6, r7}
    f316:	4770      	bx	lr
    f318:	40020000 	.word	0x40020000
    f31c:	0001047c 	.word	0x0001047c
    f320:	000104bc 	.word	0x000104bc
    f324:	f0000f00 	.word	0xf0000f00

0000f328 <am_hal_pwrctrl_periph_enable>:
    f328:	b570      	push	{r4, r5, r6, lr}
    f32a:	b082      	sub	sp, #8
    f32c:	4604      	mov	r4, r0
    f32e:	f7ff f9fd 	bl	e72c <am_hal_interrupt_master_disable>
    f332:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f336:	4d0f      	ldr	r5, [pc, #60]	; (f374 <am_hal_pwrctrl_periph_enable+0x4c>)
    f338:	4e0f      	ldr	r6, [pc, #60]	; (f378 <am_hal_pwrctrl_periph_enable+0x50>)
    f33a:	9001      	str	r0, [sp, #4]
    f33c:	00a4      	lsls	r4, r4, #2
    f33e:	68aa      	ldr	r2, [r5, #8]
    f340:	5933      	ldr	r3, [r6, r4]
    f342:	4313      	orrs	r3, r2
    f344:	60ab      	str	r3, [r5, #8]
    f346:	9801      	ldr	r0, [sp, #4]
    f348:	4434      	add	r4, r6
    f34a:	f7ff f9f3 	bl	e734 <am_hal_interrupt_master_set>
    f34e:	20a0      	movs	r0, #160	; 0xa0
    f350:	f7fe ffe2 	bl	e318 <am_hal_flash_delay>
    f354:	69ab      	ldr	r3, [r5, #24]
    f356:	6864      	ldr	r4, [r4, #4]
    f358:	4223      	tst	r3, r4
    f35a:	d103      	bne.n	f364 <am_hal_pwrctrl_periph_enable+0x3c>
    f35c:	20a0      	movs	r0, #160	; 0xa0
    f35e:	f7fe ffdb 	bl	e318 <am_hal_flash_delay>
    f362:	69ab      	ldr	r3, [r5, #24]
    f364:	4b03      	ldr	r3, [pc, #12]	; (f374 <am_hal_pwrctrl_periph_enable+0x4c>)
    f366:	699b      	ldr	r3, [r3, #24]
    f368:	4223      	tst	r3, r4
    f36a:	bf0c      	ite	eq
    f36c:	2001      	moveq	r0, #1
    f36e:	2000      	movne	r0, #0
    f370:	b002      	add	sp, #8
    f372:	bd70      	pop	{r4, r5, r6, pc}
    f374:	40021000 	.word	0x40021000
    f378:	000104fc 	.word	0x000104fc

0000f37c <am_hal_pwrctrl_periph_disable>:
    f37c:	b570      	push	{r4, r5, r6, lr}
    f37e:	b082      	sub	sp, #8
    f380:	4604      	mov	r4, r0
    f382:	f7ff f9d3 	bl	e72c <am_hal_interrupt_master_disable>
    f386:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f38a:	4d10      	ldr	r5, [pc, #64]	; (f3cc <am_hal_pwrctrl_periph_disable+0x50>)
    f38c:	4e10      	ldr	r6, [pc, #64]	; (f3d0 <am_hal_pwrctrl_periph_disable+0x54>)
    f38e:	9001      	str	r0, [sp, #4]
    f390:	00a4      	lsls	r4, r4, #2
    f392:	68ab      	ldr	r3, [r5, #8]
    f394:	5932      	ldr	r2, [r6, r4]
    f396:	ea23 0302 	bic.w	r3, r3, r2
    f39a:	60ab      	str	r3, [r5, #8]
    f39c:	9801      	ldr	r0, [sp, #4]
    f39e:	4434      	add	r4, r6
    f3a0:	f7ff f9c8 	bl	e734 <am_hal_interrupt_master_set>
    f3a4:	20a0      	movs	r0, #160	; 0xa0
    f3a6:	f7fe ffb7 	bl	e318 <am_hal_flash_delay>
    f3aa:	69ab      	ldr	r3, [r5, #24]
    f3ac:	6864      	ldr	r4, [r4, #4]
    f3ae:	4223      	tst	r3, r4
    f3b0:	d003      	beq.n	f3ba <am_hal_pwrctrl_periph_disable+0x3e>
    f3b2:	20a0      	movs	r0, #160	; 0xa0
    f3b4:	f7fe ffb0 	bl	e318 <am_hal_flash_delay>
    f3b8:	69ab      	ldr	r3, [r5, #24]
    f3ba:	4b04      	ldr	r3, [pc, #16]	; (f3cc <am_hal_pwrctrl_periph_disable+0x50>)
    f3bc:	699b      	ldr	r3, [r3, #24]
    f3be:	4223      	tst	r3, r4
    f3c0:	bf14      	ite	ne
    f3c2:	2001      	movne	r0, #1
    f3c4:	2000      	moveq	r0, #0
    f3c6:	b002      	add	sp, #8
    f3c8:	bd70      	pop	{r4, r5, r6, pc}
    f3ca:	bf00      	nop
    f3cc:	40021000 	.word	0x40021000
    f3d0:	000104fc 	.word	0x000104fc

0000f3d4 <am_hal_pwrctrl_low_power_init>:
    f3d4:	b530      	push	{r4, r5, lr}
    f3d6:	4b33      	ldr	r3, [pc, #204]	; (f4a4 <am_hal_pwrctrl_low_power_init+0xd0>)
    f3d8:	681a      	ldr	r2, [r3, #0]
    f3da:	b085      	sub	sp, #20
    f3dc:	b912      	cbnz	r2, f3e4 <am_hal_pwrctrl_low_power_init+0x10>
    f3de:	4a32      	ldr	r2, [pc, #200]	; (f4a8 <am_hal_pwrctrl_low_power_init+0xd4>)
    f3e0:	6812      	ldr	r2, [r2, #0]
    f3e2:	601a      	str	r2, [r3, #0]
    f3e4:	4b31      	ldr	r3, [pc, #196]	; (f4ac <am_hal_pwrctrl_low_power_init+0xd8>)
    f3e6:	68db      	ldr	r3, [r3, #12]
    f3e8:	b2db      	uxtb	r3, r3
    f3ea:	2b12      	cmp	r3, #18
    f3ec:	d00a      	beq.n	f404 <am_hal_pwrctrl_low_power_init+0x30>
    f3ee:	4c30      	ldr	r4, [pc, #192]	; (f4b0 <am_hal_pwrctrl_low_power_init+0xdc>)
    f3f0:	2100      	movs	r1, #0
    f3f2:	200c      	movs	r0, #12
    f3f4:	f7fe fcae 	bl	dd54 <am_hal_cachectrl_control>
    f3f8:	69a3      	ldr	r3, [r4, #24]
    f3fa:	05d8      	lsls	r0, r3, #23
    f3fc:	d520      	bpl.n	f440 <am_hal_pwrctrl_low_power_init+0x6c>
    f3fe:	2000      	movs	r0, #0
    f400:	b005      	add	sp, #20
    f402:	bd30      	pop	{r4, r5, pc}
    f404:	4c2a      	ldr	r4, [pc, #168]	; (f4b0 <am_hal_pwrctrl_low_power_init+0xdc>)
    f406:	6863      	ldr	r3, [r4, #4]
    f408:	07d9      	lsls	r1, r3, #31
    f40a:	d5f0      	bpl.n	f3ee <am_hal_pwrctrl_low_power_init+0x1a>
    f40c:	f7ff f98e 	bl	e72c <am_hal_interrupt_master_disable>
    f410:	9003      	str	r0, [sp, #12]
    f412:	68a3      	ldr	r3, [r4, #8]
    f414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f418:	60a3      	str	r3, [r4, #8]
    f41a:	9803      	ldr	r0, [sp, #12]
    f41c:	f7ff f98a 	bl	e734 <am_hal_interrupt_master_set>
    f420:	20a0      	movs	r0, #160	; 0xa0
    f422:	f7fe ff79 	bl	e318 <am_hal_flash_delay>
    f426:	69a3      	ldr	r3, [r4, #24]
    f428:	061a      	lsls	r2, r3, #24
    f42a:	d403      	bmi.n	f434 <am_hal_pwrctrl_low_power_init+0x60>
    f42c:	20a0      	movs	r0, #160	; 0xa0
    f42e:	f7fe ff73 	bl	e318 <am_hal_flash_delay>
    f432:	69a3      	ldr	r3, [r4, #24]
    f434:	4b1e      	ldr	r3, [pc, #120]	; (f4b0 <am_hal_pwrctrl_low_power_init+0xdc>)
    f436:	699b      	ldr	r3, [r3, #24]
    f438:	061b      	lsls	r3, r3, #24
    f43a:	d4d8      	bmi.n	f3ee <am_hal_pwrctrl_low_power_init+0x1a>
    f43c:	2001      	movs	r0, #1
    f43e:	e7df      	b.n	f400 <am_hal_pwrctrl_low_power_init+0x2c>
    f440:	4d1a      	ldr	r5, [pc, #104]	; (f4ac <am_hal_pwrctrl_low_power_init+0xd8>)
    f442:	491c      	ldr	r1, [pc, #112]	; (f4b4 <am_hal_pwrctrl_low_power_init+0xe0>)
    f444:	7e2a      	ldrb	r2, [r5, #24]
    f446:	2001      	movs	r0, #1
    f448:	4302      	orrs	r2, r0
    f44a:	2307      	movs	r3, #7
    f44c:	762a      	strb	r2, [r5, #24]
    f44e:	9000      	str	r0, [sp, #0]
    f450:	461a      	mov	r2, r3
    f452:	f242 7010 	movw	r0, #10000	; 0x2710
    f456:	f7fe ff6f 	bl	e338 <am_hal_flash_delay_status_check>
    f45a:	b110      	cbz	r0, f462 <am_hal_pwrctrl_low_power_init+0x8e>
    f45c:	2004      	movs	r0, #4
    f45e:	b005      	add	sp, #20
    f460:	bd30      	pop	{r4, r5, pc}
    f462:	6823      	ldr	r3, [r4, #0]
    f464:	f043 0301 	orr.w	r3, r3, #1
    f468:	6023      	str	r3, [r4, #0]
    f46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f470:	6263      	str	r3, [r4, #36]	; 0x24
    f472:	68eb      	ldr	r3, [r5, #12]
    f474:	b2db      	uxtb	r3, r3
    f476:	2b11      	cmp	r3, #17
    f478:	d1c1      	bne.n	f3fe <am_hal_pwrctrl_low_power_init+0x2a>
    f47a:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f47e:	f360 5356 	bfi	r3, r0, #21, #2
    f482:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f486:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f48a:	220f      	movs	r2, #15
    f48c:	f362 138b 	bfi	r3, r2, #6, #6
    f490:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f494:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f498:	f362 0305 	bfi	r3, r2, #0, #6
    f49c:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f4a0:	e7ae      	b.n	f400 <am_hal_pwrctrl_low_power_init+0x2c>
    f4a2:	bf00      	nop
    f4a4:	1000118c 	.word	0x1000118c
    f4a8:	4ffff000 	.word	0x4ffff000
    f4ac:	40020000 	.word	0x40020000
    f4b0:	40021000 	.word	0x40021000
    f4b4:	40020018 	.word	0x40020018

0000f4b8 <am_hal_rtc_osc_select>:
    f4b8:	b928      	cbnz	r0, f4c6 <am_hal_rtc_osc_select+0xe>
    f4ba:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f4be:	68d3      	ldr	r3, [r2, #12]
    f4c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f4c4:	60d3      	str	r3, [r2, #12]
    f4c6:	4770      	bx	lr

0000f4c8 <am_hal_rtc_osc_disable>:
    f4c8:	4a03      	ldr	r2, [pc, #12]	; (f4d8 <am_hal_rtc_osc_disable+0x10>)
    f4ca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f4ce:	f043 0310 	orr.w	r3, r3, #16
    f4d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f4d6:	4770      	bx	lr
    f4d8:	40004200 	.word	0x40004200

0000f4dc <am_hal_sysctrl_sleep>:
    f4dc:	b510      	push	{r4, lr}
    f4de:	b082      	sub	sp, #8
    f4e0:	4604      	mov	r4, r0
    f4e2:	f7ff f923 	bl	e72c <am_hal_interrupt_master_disable>
    f4e6:	9001      	str	r0, [sp, #4]
    f4e8:	b124      	cbz	r4, f4f4 <am_hal_sysctrl_sleep+0x18>
    f4ea:	4b12      	ldr	r3, [pc, #72]	; (f534 <am_hal_sysctrl_sleep+0x58>)
    f4ec:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f4f0:	07db      	lsls	r3, r3, #31
    f4f2:	d512      	bpl.n	f51a <am_hal_sysctrl_sleep+0x3e>
    f4f4:	4a10      	ldr	r2, [pc, #64]	; (f538 <am_hal_sysctrl_sleep+0x5c>)
    f4f6:	6913      	ldr	r3, [r2, #16]
    f4f8:	f023 0304 	bic.w	r3, r3, #4
    f4fc:	6113      	str	r3, [r2, #16]
    f4fe:	f3bf 8f4f 	dsb	sy
    f502:	4a0e      	ldr	r2, [pc, #56]	; (f53c <am_hal_sysctrl_sleep+0x60>)
    f504:	4b0e      	ldr	r3, [pc, #56]	; (f540 <am_hal_sysctrl_sleep+0x64>)
    f506:	6812      	ldr	r2, [r2, #0]
    f508:	601a      	str	r2, [r3, #0]
    f50a:	bf30      	wfi
    f50c:	f3bf 8f6f 	isb	sy
    f510:	9801      	ldr	r0, [sp, #4]
    f512:	f7ff f90f 	bl	e734 <am_hal_interrupt_master_set>
    f516:	b002      	add	sp, #8
    f518:	bd10      	pop	{r4, pc}
    f51a:	4b0a      	ldr	r3, [pc, #40]	; (f544 <am_hal_sysctrl_sleep+0x68>)
    f51c:	681a      	ldr	r2, [r3, #0]
    f51e:	b912      	cbnz	r2, f526 <am_hal_sysctrl_sleep+0x4a>
    f520:	4a09      	ldr	r2, [pc, #36]	; (f548 <am_hal_sysctrl_sleep+0x6c>)
    f522:	6812      	ldr	r2, [r2, #0]
    f524:	601a      	str	r2, [r3, #0]
    f526:	4a04      	ldr	r2, [pc, #16]	; (f538 <am_hal_sysctrl_sleep+0x5c>)
    f528:	6913      	ldr	r3, [r2, #16]
    f52a:	f043 0304 	orr.w	r3, r3, #4
    f52e:	6113      	str	r3, [r2, #16]
    f530:	e7e5      	b.n	f4fe <am_hal_sysctrl_sleep+0x22>
    f532:	bf00      	nop
    f534:	40020000 	.word	0x40020000
    f538:	e000ed00 	.word	0xe000ed00
    f53c:	5fff0000 	.word	0x5fff0000
    f540:	10001190 	.word	0x10001190
    f544:	1000118c 	.word	0x1000118c
    f548:	4ffff000 	.word	0x4ffff000

0000f54c <am_hal_uart_initialize>:
    f54c:	2801      	cmp	r0, #1
    f54e:	d901      	bls.n	f554 <am_hal_uart_initialize+0x8>
    f550:	2005      	movs	r0, #5
    f552:	4770      	bx	lr
    f554:	b169      	cbz	r1, f572 <am_hal_uart_initialize+0x26>
    f556:	b5f0      	push	{r4, r5, r6, r7, lr}
    f558:	2264      	movs	r2, #100	; 0x64
    f55a:	4e0e      	ldr	r6, [pc, #56]	; (f594 <am_hal_uart_initialize+0x48>)
    f55c:	fb02 f200 	mul.w	r2, r2, r0
    f560:	18b4      	adds	r4, r6, r2
    f562:	4603      	mov	r3, r0
    f564:	78e0      	ldrb	r0, [r4, #3]
    f566:	f3c0 0700 	ubfx	r7, r0, #0, #1
    f56a:	b2fd      	uxtb	r5, r7
    f56c:	b11d      	cbz	r5, f576 <am_hal_uart_initialize+0x2a>
    f56e:	2007      	movs	r0, #7
    f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f572:	2006      	movs	r0, #6
    f574:	4770      	bx	lr
    f576:	f040 0001 	orr.w	r0, r0, #1
    f57a:	70e0      	strb	r0, [r4, #3]
    f57c:	58b0      	ldr	r0, [r6, r2]
    f57e:	f8df e018 	ldr.w	lr, [pc, #24]	; f598 <am_hal_uart_initialize+0x4c>
    f582:	f36e 0017 	bfi	r0, lr, #0, #24
    f586:	50b0      	str	r0, [r6, r2]
    f588:	6263      	str	r3, [r4, #36]	; 0x24
    f58a:	7127      	strb	r7, [r4, #4]
    f58c:	6625      	str	r5, [r4, #96]	; 0x60
    f58e:	4628      	mov	r0, r5
    f590:	600c      	str	r4, [r1, #0]
    f592:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f594:	10004af4 	.word	0x10004af4
    f598:	00ea9e06 	.word	0x00ea9e06

0000f59c <am_hal_uart_deinitialize>:
    f59c:	b128      	cbz	r0, f5aa <am_hal_uart_deinitialize+0xe>
    f59e:	6803      	ldr	r3, [r0, #0]
    f5a0:	4a07      	ldr	r2, [pc, #28]	; (f5c0 <am_hal_uart_deinitialize+0x24>)
    f5a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f5a6:	4293      	cmp	r3, r2
    f5a8:	d001      	beq.n	f5ae <am_hal_uart_deinitialize+0x12>
    f5aa:	2002      	movs	r0, #2
    f5ac:	4770      	bx	lr
    f5ae:	78c2      	ldrb	r2, [r0, #3]
    f5b0:	2300      	movs	r3, #0
    f5b2:	f36f 0200 	bfc	r2, #0, #1
    f5b6:	70c2      	strb	r2, [r0, #3]
    f5b8:	6243      	str	r3, [r0, #36]	; 0x24
    f5ba:	7103      	strb	r3, [r0, #4]
    f5bc:	4618      	mov	r0, r3
    f5be:	4770      	bx	lr
    f5c0:	01ea9e06 	.word	0x01ea9e06

0000f5c4 <am_hal_uart_power_control>:
    f5c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f5c8:	6804      	ldr	r4, [r0, #0]
    f5ca:	4b36      	ldr	r3, [pc, #216]	; (f6a4 <am_hal_uart_power_control+0xe0>)
    f5cc:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    f5d0:	429c      	cmp	r4, r3
    f5d2:	b083      	sub	sp, #12
    f5d4:	d003      	beq.n	f5de <am_hal_uart_power_control+0x1a>
    f5d6:	2002      	movs	r0, #2
    f5d8:	b003      	add	sp, #12
    f5da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f5de:	6a47      	ldr	r7, [r0, #36]	; 0x24
    f5e0:	4605      	mov	r5, r0
    f5e2:	f107 0008 	add.w	r0, r7, #8
    f5e6:	4691      	mov	r9, r2
    f5e8:	460e      	mov	r6, r1
    f5ea:	fa5f f880 	uxtb.w	r8, r0
    f5ee:	b181      	cbz	r1, f612 <am_hal_uart_power_control+0x4e>
    f5f0:	2902      	cmp	r1, #2
    f5f2:	d80c      	bhi.n	f60e <am_hal_uart_power_control+0x4a>
    f5f4:	b992      	cbnz	r2, f61c <am_hal_uart_power_control+0x58>
    f5f6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    f5fa:	371c      	adds	r7, #28
    f5fc:	033f      	lsls	r7, r7, #12
    f5fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f602:	647b      	str	r3, [r7, #68]	; 0x44
    f604:	4640      	mov	r0, r8
    f606:	f7ff feb9 	bl	f37c <am_hal_pwrctrl_periph_disable>
    f60a:	2000      	movs	r0, #0
    f60c:	e7e4      	b.n	f5d8 <am_hal_uart_power_control+0x14>
    f60e:	2006      	movs	r0, #6
    f610:	e7e2      	b.n	f5d8 <am_hal_uart_power_control+0x14>
    f612:	b322      	cbz	r2, f65e <am_hal_uart_power_control+0x9a>
    f614:	792b      	ldrb	r3, [r5, #4]
    f616:	bb3b      	cbnz	r3, f668 <am_hal_uart_power_control+0xa4>
    f618:	2007      	movs	r0, #7
    f61a:	e7dd      	b.n	f5d8 <am_hal_uart_power_control+0x14>
    f61c:	f7ff f886 	bl	e72c <am_hal_interrupt_master_disable>
    f620:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f624:	331c      	adds	r3, #28
    f626:	031b      	lsls	r3, r3, #12
    f628:	9001      	str	r0, [sp, #4]
    f62a:	6a1a      	ldr	r2, [r3, #32]
    f62c:	60aa      	str	r2, [r5, #8]
    f62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f630:	60ea      	str	r2, [r5, #12]
    f632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f634:	612a      	str	r2, [r5, #16]
    f636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f638:	616a      	str	r2, [r5, #20]
    f63a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    f63c:	61aa      	str	r2, [r5, #24]
    f63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f640:	61ea      	str	r2, [r5, #28]
    f642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f644:	622b      	str	r3, [r5, #32]
    f646:	2301      	movs	r3, #1
    f648:	712b      	strb	r3, [r5, #4]
    f64a:	9801      	ldr	r0, [sp, #4]
    f64c:	f7ff f872 	bl	e734 <am_hal_interrupt_master_set>
    f650:	682b      	ldr	r3, [r5, #0]
    f652:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f656:	42a3      	cmp	r3, r4
    f658:	d1d4      	bne.n	f604 <am_hal_uart_power_control+0x40>
    f65a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f65c:	e7cb      	b.n	f5f6 <am_hal_uart_power_control+0x32>
    f65e:	4640      	mov	r0, r8
    f660:	f7ff fe62 	bl	f328 <am_hal_pwrctrl_periph_enable>
    f664:	4648      	mov	r0, r9
    f666:	e7b7      	b.n	f5d8 <am_hal_uart_power_control+0x14>
    f668:	4640      	mov	r0, r8
    f66a:	f7ff fe5d 	bl	f328 <am_hal_pwrctrl_periph_enable>
    f66e:	f7ff f85d 	bl	e72c <am_hal_interrupt_master_disable>
    f672:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    f676:	331c      	adds	r3, #28
    f678:	031b      	lsls	r3, r3, #12
    f67a:	68aa      	ldr	r2, [r5, #8]
    f67c:	9000      	str	r0, [sp, #0]
    f67e:	621a      	str	r2, [r3, #32]
    f680:	68ea      	ldr	r2, [r5, #12]
    f682:	625a      	str	r2, [r3, #36]	; 0x24
    f684:	692a      	ldr	r2, [r5, #16]
    f686:	629a      	str	r2, [r3, #40]	; 0x28
    f688:	696a      	ldr	r2, [r5, #20]
    f68a:	62da      	str	r2, [r3, #44]	; 0x2c
    f68c:	69aa      	ldr	r2, [r5, #24]
    f68e:	631a      	str	r2, [r3, #48]	; 0x30
    f690:	69ea      	ldr	r2, [r5, #28]
    f692:	635a      	str	r2, [r3, #52]	; 0x34
    f694:	6a2a      	ldr	r2, [r5, #32]
    f696:	639a      	str	r2, [r3, #56]	; 0x38
    f698:	9800      	ldr	r0, [sp, #0]
    f69a:	712e      	strb	r6, [r5, #4]
    f69c:	f7ff f84a 	bl	e734 <am_hal_interrupt_master_set>
    f6a0:	4630      	mov	r0, r6
    f6a2:	e799      	b.n	f5d8 <am_hal_uart_power_control+0x14>
    f6a4:	01ea9e06 	.word	0x01ea9e06

0000f6a8 <am_hal_uart_configure>:
    f6a8:	6803      	ldr	r3, [r0, #0]
    f6aa:	4a84      	ldr	r2, [pc, #528]	; (f8bc <am_hal_uart_configure+0x214>)
    f6ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f6b0:	4293      	cmp	r3, r2
    f6b2:	d001      	beq.n	f6b8 <am_hal_uart_configure+0x10>
    f6b4:	2002      	movs	r0, #2
    f6b6:	4770      	bx	lr
    f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    f6be:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    f6c2:	351c      	adds	r5, #28
    f6c4:	032d      	lsls	r5, r5, #12
    f6c6:	2700      	movs	r7, #0
    f6c8:	b084      	sub	sp, #16
    f6ca:	632f      	str	r7, [r5, #48]	; 0x30
    f6cc:	460e      	mov	r6, r1
    f6ce:	4604      	mov	r4, r0
    f6d0:	f7ff f82c 	bl	e72c <am_hal_interrupt_master_disable>
    f6d4:	9001      	str	r0, [sp, #4]
    f6d6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f6d8:	f043 0308 	orr.w	r3, r3, #8
    f6dc:	862b      	strh	r3, [r5, #48]	; 0x30
    f6de:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f6e0:	2201      	movs	r2, #1
    f6e2:	f362 1306 	bfi	r3, r2, #4, #3
    f6e6:	862b      	strh	r3, [r5, #48]	; 0x30
    f6e8:	9801      	ldr	r0, [sp, #4]
    f6ea:	f7ff f823 	bl	e734 <am_hal_interrupt_master_set>
    f6ee:	f7ff f81d 	bl	e72c <am_hal_interrupt_master_disable>
    f6f2:	9002      	str	r0, [sp, #8]
    f6f4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f6f6:	f367 0300 	bfi	r3, r7, #0, #1
    f6fa:	862b      	strh	r3, [r5, #48]	; 0x30
    f6fc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f6fe:	f367 2349 	bfi	r3, r7, #9, #1
    f702:	862b      	strh	r3, [r5, #48]	; 0x30
    f704:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f706:	f367 2308 	bfi	r3, r7, #8, #1
    f70a:	862b      	strh	r3, [r5, #48]	; 0x30
    f70c:	9802      	ldr	r0, [sp, #8]
    f70e:	f7ff f811 	bl	e734 <am_hal_interrupt_master_set>
    f712:	4a6b      	ldr	r2, [pc, #428]	; (f8c0 <am_hal_uart_configure+0x218>)
    f714:	6833      	ldr	r3, [r6, #0]
    f716:	68d2      	ldr	r2, [r2, #12]
    f718:	b2d2      	uxtb	r2, r2
    f71a:	2a12      	cmp	r2, #18
    f71c:	d00b      	beq.n	f736 <am_hal_uart_configure+0x8e>
    f71e:	4a68      	ldr	r2, [pc, #416]	; (f8c0 <am_hal_uart_configure+0x218>)
    f720:	68d2      	ldr	r2, [r2, #12]
    f722:	b2d2      	uxtb	r2, r2
    f724:	2a20      	cmp	r2, #32
    f726:	d90a      	bls.n	f73e <am_hal_uart_configure+0x96>
    f728:	4a66      	ldr	r2, [pc, #408]	; (f8c4 <am_hal_uart_configure+0x21c>)
    f72a:	4293      	cmp	r3, r2
    f72c:	d907      	bls.n	f73e <am_hal_uart_configure+0x96>
    f72e:	4866      	ldr	r0, [pc, #408]	; (f8c8 <am_hal_uart_configure+0x220>)
    f730:	b004      	add	sp, #16
    f732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f736:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    f73a:	d8f8      	bhi.n	f72e <am_hal_uart_configure+0x86>
    f73c:	e7ef      	b.n	f71e <am_hal_uart_configure+0x76>
    f73e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f740:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f744:	3a01      	subs	r2, #1
    f746:	2a03      	cmp	r2, #3
    f748:	d852      	bhi.n	f7f0 <am_hal_uart_configure+0x148>
    f74a:	e8df f002 	tbb	[pc, r2]
    f74e:	020f      	.short	0x020f
    f750:	1215      	.short	0x1215
    f752:	4a5e      	ldr	r2, [pc, #376]	; (f8cc <am_hal_uart_configure+0x224>)
    f754:	495e      	ldr	r1, [pc, #376]	; (f8d0 <am_hal_uart_configure+0x228>)
    f756:	011b      	lsls	r3, r3, #4
    f758:	fbb2 f2f3 	udiv	r2, r2, r3
    f75c:	fbb1 f3f3 	udiv	r3, r1, r3
    f760:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    f764:	b95b      	cbnz	r3, f77e <am_hal_uart_configure+0xd6>
    f766:	6623      	str	r3, [r4, #96]	; 0x60
    f768:	4857      	ldr	r0, [pc, #348]	; (f8c8 <am_hal_uart_configure+0x220>)
    f76a:	e7e1      	b.n	f730 <am_hal_uart_configure+0x88>
    f76c:	4a59      	ldr	r2, [pc, #356]	; (f8d4 <am_hal_uart_configure+0x22c>)
    f76e:	495a      	ldr	r1, [pc, #360]	; (f8d8 <am_hal_uart_configure+0x230>)
    f770:	e7f1      	b.n	f756 <am_hal_uart_configure+0xae>
    f772:	4a5a      	ldr	r2, [pc, #360]	; (f8dc <am_hal_uart_configure+0x234>)
    f774:	495a      	ldr	r1, [pc, #360]	; (f8e0 <am_hal_uart_configure+0x238>)
    f776:	e7ee      	b.n	f756 <am_hal_uart_configure+0xae>
    f778:	4a5a      	ldr	r2, [pc, #360]	; (f8e4 <am_hal_uart_configure+0x23c>)
    f77a:	495b      	ldr	r1, [pc, #364]	; (f8e8 <am_hal_uart_configure+0x240>)
    f77c:	e7eb      	b.n	f756 <am_hal_uart_configure+0xae>
    f77e:	0890      	lsrs	r0, r2, #2
    f780:	626b      	str	r3, [r5, #36]	; 0x24
    f782:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    f786:	626b      	str	r3, [r5, #36]	; 0x24
    f788:	fbb1 f1f0 	udiv	r1, r1, r0
    f78c:	62aa      	str	r2, [r5, #40]	; 0x28
    f78e:	6621      	str	r1, [r4, #96]	; 0x60
    f790:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f792:	f36f 338e 	bfc	r3, #14, #1
    f796:	862b      	strh	r3, [r5, #48]	; 0x30
    f798:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f79a:	f36f 33cf 	bfc	r3, #15, #1
    f79e:	862b      	strh	r3, [r5, #48]	; 0x30
    f7a0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    f7a2:	6933      	ldr	r3, [r6, #16]
    f7a4:	4313      	orrs	r3, r2
    f7a6:	632b      	str	r3, [r5, #48]	; 0x30
    f7a8:	6973      	ldr	r3, [r6, #20]
    f7aa:	636b      	str	r3, [r5, #52]	; 0x34
    f7ac:	6871      	ldr	r1, [r6, #4]
    f7ae:	68b3      	ldr	r3, [r6, #8]
    f7b0:	68f2      	ldr	r2, [r6, #12]
    f7b2:	430b      	orrs	r3, r1
    f7b4:	f043 0310 	orr.w	r3, r3, #16
    f7b8:	4313      	orrs	r3, r2
    f7ba:	62eb      	str	r3, [r5, #44]	; 0x2c
    f7bc:	f7fe ffb6 	bl	e72c <am_hal_interrupt_master_disable>
    f7c0:	9003      	str	r0, [sp, #12]
    f7c2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f7c4:	f043 0301 	orr.w	r3, r3, #1
    f7c8:	862b      	strh	r3, [r5, #48]	; 0x30
    f7ca:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f7cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f7d0:	862b      	strh	r3, [r5, #48]	; 0x30
    f7d2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    f7d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f7d8:	862b      	strh	r3, [r5, #48]	; 0x30
    f7da:	9803      	ldr	r0, [sp, #12]
    f7dc:	f7fe ffaa 	bl	e734 <am_hal_interrupt_master_set>
    f7e0:	6825      	ldr	r5, [r4, #0]
    f7e2:	4b36      	ldr	r3, [pc, #216]	; (f8bc <am_hal_uart_configure+0x214>)
    f7e4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    f7e8:	429d      	cmp	r5, r3
    f7ea:	d005      	beq.n	f7f8 <am_hal_uart_configure+0x150>
    f7ec:	2000      	movs	r0, #0
    f7ee:	e79f      	b.n	f730 <am_hal_uart_configure+0x88>
    f7f0:	2300      	movs	r3, #0
    f7f2:	6623      	str	r3, [r4, #96]	; 0x60
    f7f4:	483d      	ldr	r0, [pc, #244]	; (f8ec <am_hal_uart_configure+0x244>)
    f7f6:	e79b      	b.n	f730 <am_hal_uart_configure+0x88>
    f7f8:	69b1      	ldr	r1, [r6, #24]
    f7fa:	6a37      	ldr	r7, [r6, #32]
    f7fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    f800:	b109      	cbz	r1, f806 <am_hal_uart_configure+0x15e>
    f802:	69f3      	ldr	r3, [r6, #28]
    f804:	bb3b      	cbnz	r3, f856 <am_hal_uart_configure+0x1ae>
    f806:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f808:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f80c:	f103 021c 	add.w	r2, r3, #28
    f810:	0312      	lsls	r2, r2, #12
    f812:	2100      	movs	r1, #0
    f814:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    f818:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f81a:	f021 0120 	bic.w	r1, r1, #32
    f81e:	6391      	str	r1, [r2, #56]	; 0x38
    f820:	b1b7      	cbz	r7, f850 <am_hal_uart_configure+0x1a8>
    f822:	f1b8 0f00 	cmp.w	r8, #0
    f826:	d12e      	bne.n	f886 <am_hal_uart_configure+0x1de>
    f828:	6823      	ldr	r3, [r4, #0]
    f82a:	4a24      	ldr	r2, [pc, #144]	; (f8bc <am_hal_uart_configure+0x214>)
    f82c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f830:	2100      	movs	r1, #0
    f832:	4293      	cmp	r3, r2
    f834:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    f838:	d1d8      	bne.n	f7ec <am_hal_uart_configure+0x144>
    f83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f83c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f840:	331c      	adds	r3, #28
    f842:	031b      	lsls	r3, r3, #12
    f844:	2000      	movs	r0, #0
    f846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f848:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    f84c:	639a      	str	r2, [r3, #56]	; 0x38
    f84e:	e76f      	b.n	f730 <am_hal_uart_configure+0x88>
    f850:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    f854:	e7f4      	b.n	f840 <am_hal_uart_configure+0x198>
    f856:	2201      	movs	r2, #1
    f858:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    f85c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f860:	f000 fb2c 	bl	febc <am_hal_queue_init>
    f864:	6823      	ldr	r3, [r4, #0]
    f866:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f86a:	42ab      	cmp	r3, r5
    f86c:	d1be      	bne.n	f7ec <am_hal_uart_configure+0x144>
    f86e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f870:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f874:	331c      	adds	r3, #28
    f876:	031b      	lsls	r3, r3, #12
    f878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f87a:	f042 0220 	orr.w	r2, r2, #32
    f87e:	639a      	str	r2, [r3, #56]	; 0x38
    f880:	2f00      	cmp	r7, #0
    f882:	d1ce      	bne.n	f822 <am_hal_uart_configure+0x17a>
    f884:	e7d0      	b.n	f828 <am_hal_uart_configure+0x180>
    f886:	2201      	movs	r2, #1
    f888:	4643      	mov	r3, r8
    f88a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    f88e:	4639      	mov	r1, r7
    f890:	f104 0048 	add.w	r0, r4, #72	; 0x48
    f894:	f000 fb12 	bl	febc <am_hal_queue_init>
    f898:	6823      	ldr	r3, [r4, #0]
    f89a:	4a08      	ldr	r2, [pc, #32]	; (f8bc <am_hal_uart_configure+0x214>)
    f89c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f8a0:	4293      	cmp	r3, r2
    f8a2:	d1a3      	bne.n	f7ec <am_hal_uart_configure+0x144>
    f8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8a6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    f8aa:	331c      	adds	r3, #28
    f8ac:	031b      	lsls	r3, r3, #12
    f8ae:	2000      	movs	r0, #0
    f8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    f8b2:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    f8b6:	639a      	str	r2, [r3, #56]	; 0x38
    f8b8:	e73a      	b.n	f730 <am_hal_uart_configure+0x88>
    f8ba:	bf00      	nop
    f8bc:	01ea9e06 	.word	0x01ea9e06
    f8c0:	40020000 	.word	0x40020000
    f8c4:	0016e360 	.word	0x0016e360
    f8c8:	08000003 	.word	0x08000003
    f8cc:	2dc6c000 	.word	0x2dc6c000
    f8d0:	00b71b00 	.word	0x00b71b00
    f8d4:	5b8d8000 	.word	0x5b8d8000
    f8d8:	016e3600 	.word	0x016e3600
    f8dc:	0b71b000 	.word	0x0b71b000
    f8e0:	002dc6c0 	.word	0x002dc6c0
    f8e4:	16e36000 	.word	0x16e36000
    f8e8:	005b8d80 	.word	0x005b8d80
    f8ec:	08000002 	.word	0x08000002

0000f8f0 <am_hal_uart_transfer>:
    f8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8f4:	680f      	ldr	r7, [r1, #0]
    f8f6:	b091      	sub	sp, #68	; 0x44
    f8f8:	4605      	mov	r5, r0
    f8fa:	b13f      	cbz	r7, f90c <am_hal_uart_transfer+0x1c>
    f8fc:	2f01      	cmp	r7, #1
    f8fe:	bf18      	it	ne
    f900:	2707      	movne	r7, #7
    f902:	d024      	beq.n	f94e <am_hal_uart_transfer+0x5e>
    f904:	4638      	mov	r0, r7
    f906:	b011      	add	sp, #68	; 0x44
    f908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f90c:	f8d1 900c 	ldr.w	r9, [r1, #12]
    f910:	690b      	ldr	r3, [r1, #16]
    f912:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f916:	688e      	ldr	r6, [r1, #8]
    f918:	9300      	str	r3, [sp, #0]
    f91a:	f1b9 0f00 	cmp.w	r9, #0
    f91e:	d031      	beq.n	f984 <am_hal_uart_transfer+0x94>
    f920:	2e00      	cmp	r6, #0
    f922:	f000 819c 	beq.w	fc5e <am_hal_uart_transfer+0x36e>
    f926:	2800      	cmp	r0, #0
    f928:	f000 8097 	beq.w	fa5a <am_hal_uart_transfer+0x16a>
    f92c:	6803      	ldr	r3, [r0, #0]
    f92e:	4aa9      	ldr	r2, [pc, #676]	; (fbd4 <am_hal_uart_transfer+0x2e4>)
    f930:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f934:	4293      	cmp	r3, r2
    f936:	f000 8092 	beq.w	fa5e <am_hal_uart_transfer+0x16e>
    f93a:	46b8      	mov	r8, r7
    f93c:	9b00      	ldr	r3, [sp, #0]
    f93e:	b10b      	cbz	r3, f944 <am_hal_uart_transfer+0x54>
    f940:	f8c3 8000 	str.w	r8, [r3]
    f944:	2702      	movs	r7, #2
    f946:	4638      	mov	r0, r7
    f948:	b011      	add	sp, #68	; 0x44
    f94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f94e:	1d0b      	adds	r3, r1, #4
    f950:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    f954:	f1b9 0f00 	cmp.w	r9, #0
    f958:	d043      	beq.n	f9e2 <am_hal_uart_transfer+0xf2>
    f95a:	2f00      	cmp	r7, #0
    f95c:	f000 8185 	beq.w	fc6a <am_hal_uart_transfer+0x37a>
    f960:	2800      	cmp	r0, #0
    f962:	f000 80eb 	beq.w	fb3c <am_hal_uart_transfer+0x24c>
    f966:	6802      	ldr	r2, [r0, #0]
    f968:	499a      	ldr	r1, [pc, #616]	; (fbd4 <am_hal_uart_transfer+0x2e4>)
    f96a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f96e:	428a      	cmp	r2, r1
    f970:	f000 80e7 	beq.w	fb42 <am_hal_uart_transfer+0x252>
    f974:	2600      	movs	r6, #0
    f976:	2702      	movs	r7, #2
    f978:	f1bb 0f00 	cmp.w	fp, #0
    f97c:	d0c2      	beq.n	f904 <am_hal_uart_transfer+0x14>
    f97e:	f8cb 6000 	str.w	r6, [fp]
    f982:	e7bf      	b.n	f904 <am_hal_uart_transfer+0x14>
    f984:	2800      	cmp	r0, #0
    f986:	d0dd      	beq.n	f944 <am_hal_uart_transfer+0x54>
    f988:	6803      	ldr	r3, [r0, #0]
    f98a:	4a92      	ldr	r2, [pc, #584]	; (fbd4 <am_hal_uart_transfer+0x2e4>)
    f98c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f990:	4293      	cmp	r3, r2
    f992:	d1d7      	bne.n	f944 <am_hal_uart_transfer+0x54>
    f994:	9b00      	ldr	r3, [sp, #0]
    f996:	b10b      	cbz	r3, f99c <am_hal_uart_transfer+0xac>
    f998:	f8c3 9000 	str.w	r9, [r3]
    f99c:	b1fe      	cbz	r6, f9de <am_hal_uart_transfer+0xee>
    f99e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	f040 8165 	bne.w	fc72 <am_hal_uart_transfer+0x382>
    f9a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f9aa:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    f9ae:	311c      	adds	r1, #28
    f9b0:	0309      	lsls	r1, r1, #12
    f9b2:	698a      	ldr	r2, [r1, #24]
    f9b4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    f9b8:	2a00      	cmp	r2, #0
    f9ba:	f040 818d 	bne.w	fcd8 <am_hal_uart_transfer+0x3e8>
    f9be:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    f9c2:	e003      	b.n	f9cc <am_hal_uart_transfer+0xdc>
    f9c4:	6988      	ldr	r0, [r1, #24]
    f9c6:	0680      	lsls	r0, r0, #26
    f9c8:	f100 8151 	bmi.w	fc6e <am_hal_uart_transfer+0x37e>
    f9cc:	3201      	adds	r2, #1
    f9ce:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    f9d2:	6008      	str	r0, [r1, #0]
    f9d4:	4296      	cmp	r6, r2
    f9d6:	d1f5      	bne.n	f9c4 <am_hal_uart_transfer+0xd4>
    f9d8:	9b00      	ldr	r3, [sp, #0]
    f9da:	b103      	cbz	r3, f9de <am_hal_uart_transfer+0xee>
    f9dc:	601e      	str	r6, [r3, #0]
    f9de:	2700      	movs	r7, #0
    f9e0:	e790      	b.n	f904 <am_hal_uart_transfer+0x14>
    f9e2:	2800      	cmp	r0, #0
    f9e4:	d0ae      	beq.n	f944 <am_hal_uart_transfer+0x54>
    f9e6:	6802      	ldr	r2, [r0, #0]
    f9e8:	497a      	ldr	r1, [pc, #488]	; (fbd4 <am_hal_uart_transfer+0x2e4>)
    f9ea:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    f9ee:	428a      	cmp	r2, r1
    f9f0:	d1a8      	bne.n	f944 <am_hal_uart_transfer+0x54>
    f9f2:	f1bb 0f00 	cmp.w	fp, #0
    f9f6:	d001      	beq.n	f9fc <am_hal_uart_transfer+0x10c>
    f9f8:	f8cb 9000 	str.w	r9, [fp]
    f9fc:	2f00      	cmp	r7, #0
    f9fe:	d0ee      	beq.n	f9de <am_hal_uart_transfer+0xee>
    fa00:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fa04:	2c00      	cmp	r4, #0
    fa06:	f040 816c 	bne.w	fce2 <am_hal_uart_transfer+0x3f2>
    fa0a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fa0c:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fa10:	321c      	adds	r2, #28
    fa12:	0312      	lsls	r2, r2, #12
    fa14:	6990      	ldr	r0, [r2, #24]
    fa16:	f3c0 1000 	ubfx	r0, r0, #4, #1
    fa1a:	2800      	cmp	r0, #0
    fa1c:	f040 819d 	bne.w	fd5a <am_hal_uart_transfer+0x46a>
    fa20:	6811      	ldr	r1, [r2, #0]
    fa22:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fa26:	bf08      	it	eq
    fa28:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    fa2c:	d008      	beq.n	fa40 <am_hal_uart_transfer+0x150>
    fa2e:	e190      	b.n	fd52 <am_hal_uart_transfer+0x462>
    fa30:	6991      	ldr	r1, [r2, #24]
    fa32:	06c8      	lsls	r0, r1, #27
    fa34:	d409      	bmi.n	fa4a <am_hal_uart_transfer+0x15a>
    fa36:	6811      	ldr	r1, [r2, #0]
    fa38:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fa3c:	f040 814e 	bne.w	fcdc <am_hal_uart_transfer+0x3ec>
    fa40:	3401      	adds	r4, #1
    fa42:	42a7      	cmp	r7, r4
    fa44:	f803 1f01 	strb.w	r1, [r3, #1]!
    fa48:	d1f2      	bne.n	fa30 <am_hal_uart_transfer+0x140>
    fa4a:	2700      	movs	r7, #0
    fa4c:	f1bb 0f00 	cmp.w	fp, #0
    fa50:	f43f af58 	beq.w	f904 <am_hal_uart_transfer+0x14>
    fa54:	f8cb 4000 	str.w	r4, [fp]
    fa58:	e754      	b.n	f904 <am_hal_uart_transfer+0x14>
    fa5a:	4680      	mov	r8, r0
    fa5c:	e76e      	b.n	f93c <am_hal_uart_transfer+0x4c>
    fa5e:	9301      	str	r3, [sp, #4]
    fa60:	4651      	mov	r1, sl
    fa62:	46bb      	mov	fp, r7
    fa64:	46b8      	mov	r8, r7
    fa66:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    fa6a:	b9f2      	cbnz	r2, faaa <am_hal_uart_transfer+0x1ba>
    fa6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fa6e:	b19e      	cbz	r6, fa98 <am_hal_uart_transfer+0x1a8>
    fa70:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fa74:	321c      	adds	r2, #28
    fa76:	0312      	lsls	r2, r2, #12
    fa78:	3901      	subs	r1, #1
    fa7a:	6994      	ldr	r4, [r2, #24]
    fa7c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    fa80:	b11c      	cbz	r4, fa8a <am_hal_uart_transfer+0x19a>
    fa82:	e047      	b.n	fb14 <am_hal_uart_transfer+0x224>
    fa84:	6993      	ldr	r3, [r2, #24]
    fa86:	069b      	lsls	r3, r3, #26
    fa88:	d441      	bmi.n	fb0e <am_hal_uart_transfer+0x21e>
    fa8a:	3401      	adds	r4, #1
    fa8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    fa90:	6013      	str	r3, [r2, #0]
    fa92:	42b4      	cmp	r4, r6
    fa94:	d1f6      	bne.n	fa84 <am_hal_uart_transfer+0x194>
    fa96:	44a0      	add	r8, r4
    fa98:	9b00      	ldr	r3, [sp, #0]
    fa9a:	2b00      	cmp	r3, #0
    fa9c:	d09f      	beq.n	f9de <am_hal_uart_transfer+0xee>
    fa9e:	4638      	mov	r0, r7
    faa0:	f8c3 8000 	str.w	r8, [r3]
    faa4:	b011      	add	sp, #68	; 0x44
    faa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    faaa:	6baa      	ldr	r2, [r5, #56]	; 0x38
    faac:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    faae:	1b14      	subs	r4, r2, r4
    fab0:	42b4      	cmp	r4, r6
    fab2:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    fab6:	bf28      	it	cs
    fab8:	4634      	movcs	r4, r6
    faba:	4622      	mov	r2, r4
    fabc:	4618      	mov	r0, r3
    fabe:	9302      	str	r3, [sp, #8]
    fac0:	f000 fa08 	bl	fed4 <am_hal_queue_item_add>
    fac4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fac6:	9303      	str	r3, [sp, #12]
    fac8:	f7fe fe30 	bl	e72c <am_hal_interrupt_master_disable>
    facc:	9b03      	ldr	r3, [sp, #12]
    face:	9008      	str	r0, [sp, #32]
    fad0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fad4:	331c      	adds	r3, #28
    fad6:	031b      	lsls	r3, r3, #12
    fad8:	9303      	str	r3, [sp, #12]
    fada:	e00d      	b.n	faf8 <am_hal_uart_transfer+0x208>
    fadc:	f000 fa32 	bl	ff44 <am_hal_queue_item_get>
    fae0:	b190      	cbz	r0, fb08 <am_hal_uart_transfer+0x218>
    fae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fae4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fae8:	331c      	adds	r3, #28
    faea:	031b      	lsls	r3, r3, #12
    faec:	699a      	ldr	r2, [r3, #24]
    faee:	0692      	lsls	r2, r2, #26
    faf0:	bf5c      	itt	pl
    faf2:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    faf6:	601a      	strpl	r2, [r3, #0]
    faf8:	9b03      	ldr	r3, [sp, #12]
    fafa:	9802      	ldr	r0, [sp, #8]
    fafc:	699b      	ldr	r3, [r3, #24]
    fafe:	069b      	lsls	r3, r3, #26
    fb00:	f04f 0201 	mov.w	r2, #1
    fb04:	a907      	add	r1, sp, #28
    fb06:	d5e9      	bpl.n	fadc <am_hal_uart_transfer+0x1ec>
    fb08:	9808      	ldr	r0, [sp, #32]
    fb0a:	f7fe fe13 	bl	e734 <am_hal_interrupt_master_set>
    fb0e:	1b36      	subs	r6, r6, r4
    fb10:	44a0      	add	r8, r4
    fb12:	d0c1      	beq.n	fa98 <am_hal_uart_transfer+0x1a8>
    fb14:	2010      	movs	r0, #16
    fb16:	f7fe fbff 	bl	e318 <am_hal_flash_delay>
    fb1a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fb1e:	d001      	beq.n	fb24 <am_hal_uart_transfer+0x234>
    fb20:	f10b 0b01 	add.w	fp, fp, #1
    fb24:	45d9      	cmp	r9, fp
    fb26:	d9b7      	bls.n	fa98 <am_hal_uart_transfer+0x1a8>
    fb28:	682a      	ldr	r2, [r5, #0]
    fb2a:	9b01      	ldr	r3, [sp, #4]
    fb2c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fb30:	429a      	cmp	r2, r3
    fb32:	eb0a 0108 	add.w	r1, sl, r8
    fb36:	f47f af01 	bne.w	f93c <am_hal_uart_transfer+0x4c>
    fb3a:	e794      	b.n	fa66 <am_hal_uart_transfer+0x176>
    fb3c:	4606      	mov	r6, r0
    fb3e:	2702      	movs	r7, #2
    fb40:	e71a      	b.n	f978 <am_hal_uart_transfer+0x88>
    fb42:	9200      	str	r2, [sp, #0]
    fb44:	f100 0248 	add.w	r2, r0, #72	; 0x48
    fb48:	f04f 0a00 	mov.w	sl, #0
    fb4c:	9202      	str	r2, [sp, #8]
    fb4e:	465a      	mov	r2, fp
    fb50:	4698      	mov	r8, r3
    fb52:	469b      	mov	fp, r3
    fb54:	4656      	mov	r6, sl
    fb56:	4613      	mov	r3, r2
    fb58:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    fb5c:	2a00      	cmp	r2, #0
    fb5e:	d152      	bne.n	fc06 <am_hal_uart_transfer+0x316>
    fb60:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fb62:	b3a7      	cbz	r7, fbce <am_hal_uart_transfer+0x2de>
    fb64:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fb68:	311c      	adds	r1, #28
    fb6a:	0309      	lsls	r1, r1, #12
    fb6c:	698a      	ldr	r2, [r1, #24]
    fb6e:	06d0      	lsls	r0, r2, #27
    fb70:	d432      	bmi.n	fbd8 <am_hal_uart_transfer+0x2e8>
    fb72:	680a      	ldr	r2, [r1, #0]
    fb74:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
    fb78:	f040 80aa 	bne.w	fcd0 <am_hal_uart_transfer+0x3e0>
    fb7c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fb80:	e006      	b.n	fb90 <am_hal_uart_transfer+0x2a0>
    fb82:	698a      	ldr	r2, [r1, #24]
    fb84:	06d2      	lsls	r2, r2, #27
    fb86:	d41f      	bmi.n	fbc8 <am_hal_uart_transfer+0x2d8>
    fb88:	680a      	ldr	r2, [r1, #0]
    fb8a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
    fb8e:	d161      	bne.n	fc54 <am_hal_uart_transfer+0x364>
    fb90:	3401      	adds	r4, #1
    fb92:	42bc      	cmp	r4, r7
    fb94:	f808 2f01 	strb.w	r2, [r8, #1]!
    fb98:	d1f3      	bne.n	fb82 <am_hal_uart_transfer+0x292>
    fb9a:	469b      	mov	fp, r3
    fb9c:	4426      	add	r6, r4
    fb9e:	f1bb 0f00 	cmp.w	fp, #0
    fba2:	f43f af1c 	beq.w	f9de <am_hal_uart_transfer+0xee>
    fba6:	f8cb 6000 	str.w	r6, [fp]
    fbaa:	2700      	movs	r7, #0
    fbac:	e6aa      	b.n	f904 <am_hal_uart_transfer+0x14>
    fbae:	9807      	ldr	r0, [sp, #28]
    fbb0:	f7fe fdc0 	bl	e734 <am_hal_interrupt_master_set>
    fbb4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fbb6:	9802      	ldr	r0, [sp, #8]
    fbb8:	42bc      	cmp	r4, r7
    fbba:	bf28      	it	cs
    fbbc:	463c      	movcs	r4, r7
    fbbe:	4641      	mov	r1, r8
    fbc0:	4622      	mov	r2, r4
    fbc2:	f000 f9bf 	bl	ff44 <am_hal_queue_item_get>
    fbc6:	9b01      	ldr	r3, [sp, #4]
    fbc8:	1b3f      	subs	r7, r7, r4
    fbca:	4426      	add	r6, r4
    fbcc:	d104      	bne.n	fbd8 <am_hal_uart_transfer+0x2e8>
    fbce:	469b      	mov	fp, r3
    fbd0:	e7e5      	b.n	fb9e <am_hal_uart_transfer+0x2ae>
    fbd2:	bf00      	nop
    fbd4:	01ea9e06 	.word	0x01ea9e06
    fbd8:	2010      	movs	r0, #16
    fbda:	9301      	str	r3, [sp, #4]
    fbdc:	f7fe fb9c 	bl	e318 <am_hal_flash_delay>
    fbe0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    fbe4:	9b01      	ldr	r3, [sp, #4]
    fbe6:	d001      	beq.n	fbec <am_hal_uart_transfer+0x2fc>
    fbe8:	f10a 0a01 	add.w	sl, sl, #1
    fbec:	45d1      	cmp	r9, sl
    fbee:	d9ee      	bls.n	fbce <am_hal_uart_transfer+0x2de>
    fbf0:	682a      	ldr	r2, [r5, #0]
    fbf2:	9900      	ldr	r1, [sp, #0]
    fbf4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fbf8:	428a      	cmp	r2, r1
    fbfa:	eb0b 0806 	add.w	r8, fp, r6
    fbfe:	d0ab      	beq.n	fb58 <am_hal_uart_transfer+0x268>
    fc00:	469b      	mov	fp, r3
    fc02:	2702      	movs	r7, #2
    fc04:	e6b8      	b.n	f978 <am_hal_uart_transfer+0x88>
    fc06:	9301      	str	r3, [sp, #4]
    fc08:	f7fe fd90 	bl	e72c <am_hal_interrupt_master_disable>
    fc0c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fc0e:	9007      	str	r0, [sp, #28]
    fc10:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
    fc14:	301c      	adds	r0, #28
    fc16:	9b01      	ldr	r3, [sp, #4]
    fc18:	0300      	lsls	r0, r0, #12
    fc1a:	ac08      	add	r4, sp, #32
    fc1c:	2200      	movs	r2, #0
    fc1e:	6981      	ldr	r1, [r0, #24]
    fc20:	06c9      	lsls	r1, r1, #27
    fc22:	d409      	bmi.n	fc38 <am_hal_uart_transfer+0x348>
    fc24:	6801      	ldr	r1, [r0, #0]
    fc26:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    fc2a:	f102 0201 	add.w	r2, r2, #1
    fc2e:	d118      	bne.n	fc62 <am_hal_uart_transfer+0x372>
    fc30:	2a20      	cmp	r2, #32
    fc32:	f804 1b01 	strb.w	r1, [r4], #1
    fc36:	d1f2      	bne.n	fc1e <am_hal_uart_transfer+0x32e>
    fc38:	a908      	add	r1, sp, #32
    fc3a:	9802      	ldr	r0, [sp, #8]
    fc3c:	9301      	str	r3, [sp, #4]
    fc3e:	f000 f949 	bl	fed4 <am_hal_queue_item_add>
    fc42:	9b01      	ldr	r3, [sp, #4]
    fc44:	2800      	cmp	r0, #0
    fc46:	d1b2      	bne.n	fbae <am_hal_uart_transfer+0x2be>
    fc48:	4f45      	ldr	r7, [pc, #276]	; (fd60 <am_hal_uart_transfer+0x470>)
    fc4a:	469b      	mov	fp, r3
    fc4c:	9807      	ldr	r0, [sp, #28]
    fc4e:	f7fe fd71 	bl	e734 <am_hal_interrupt_master_set>
    fc52:	e691      	b.n	f978 <am_hal_uart_transfer+0x88>
    fc54:	469b      	mov	fp, r3
    fc56:	4426      	add	r6, r4
    fc58:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fc5c:	e68c      	b.n	f978 <am_hal_uart_transfer+0x88>
    fc5e:	46b8      	mov	r8, r7
    fc60:	e71a      	b.n	fa98 <am_hal_uart_transfer+0x1a8>
    fc62:	469b      	mov	fp, r3
    fc64:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fc68:	e7f0      	b.n	fc4c <am_hal_uart_transfer+0x35c>
    fc6a:	463e      	mov	r6, r7
    fc6c:	e797      	b.n	fb9e <am_hal_uart_transfer+0x2ae>
    fc6e:	4616      	mov	r6, r2
    fc70:	e6b2      	b.n	f9d8 <am_hal_uart_transfer+0xe8>
    fc72:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    fc74:	6bab      	ldr	r3, [r5, #56]	; 0x38
    fc76:	1a9b      	subs	r3, r3, r2
    fc78:	429e      	cmp	r6, r3
    fc7a:	bf28      	it	cs
    fc7c:	461e      	movcs	r6, r3
    fc7e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    fc82:	4651      	mov	r1, sl
    fc84:	4632      	mov	r2, r6
    fc86:	4620      	mov	r0, r4
    fc88:	f000 f924 	bl	fed4 <am_hal_queue_item_add>
    fc8c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fc8e:	f7fe fd4d 	bl	e72c <am_hal_interrupt_master_disable>
    fc92:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    fc96:	371c      	adds	r7, #28
    fc98:	033f      	lsls	r7, r7, #12
    fc9a:	9005      	str	r0, [sp, #20]
    fc9c:	e00d      	b.n	fcba <am_hal_uart_transfer+0x3ca>
    fc9e:	f000 f951 	bl	ff44 <am_hal_queue_item_get>
    fca2:	b188      	cbz	r0, fcc8 <am_hal_uart_transfer+0x3d8>
    fca4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fca6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fcaa:	331c      	adds	r3, #28
    fcac:	031b      	lsls	r3, r3, #12
    fcae:	699a      	ldr	r2, [r3, #24]
    fcb0:	0692      	lsls	r2, r2, #26
    fcb2:	bf5c      	itt	pl
    fcb4:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
    fcb8:	601a      	strpl	r2, [r3, #0]
    fcba:	69bb      	ldr	r3, [r7, #24]
    fcbc:	069b      	lsls	r3, r3, #26
    fcbe:	f04f 0201 	mov.w	r2, #1
    fcc2:	a908      	add	r1, sp, #32
    fcc4:	4620      	mov	r0, r4
    fcc6:	d5ea      	bpl.n	fc9e <am_hal_uart_transfer+0x3ae>
    fcc8:	9805      	ldr	r0, [sp, #20]
    fcca:	f7fe fd33 	bl	e734 <am_hal_interrupt_master_set>
    fcce:	e683      	b.n	f9d8 <am_hal_uart_transfer+0xe8>
    fcd0:	469b      	mov	fp, r3
    fcd2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fcd6:	e64f      	b.n	f978 <am_hal_uart_transfer+0x88>
    fcd8:	461e      	mov	r6, r3
    fcda:	e67d      	b.n	f9d8 <am_hal_uart_transfer+0xe8>
    fcdc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fce0:	e6b4      	b.n	fa4c <am_hal_uart_transfer+0x15c>
    fce2:	9300      	str	r3, [sp, #0]
    fce4:	f7fe fd22 	bl	e72c <am_hal_interrupt_master_disable>
    fce8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fcea:	9006      	str	r0, [sp, #24]
    fcec:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fcf0:	321c      	adds	r2, #28
    fcf2:	0311      	lsls	r1, r2, #12
    fcf4:	a808      	add	r0, sp, #32
    fcf6:	2200      	movs	r2, #0
    fcf8:	9b00      	ldr	r3, [sp, #0]
    fcfa:	e009      	b.n	fd10 <am_hal_uart_transfer+0x420>
    fcfc:	680c      	ldr	r4, [r1, #0]
    fcfe:	f414 6f70 	tst.w	r4, #3840	; 0xf00
    fd02:	f102 0201 	add.w	r2, r2, #1
    fd06:	d121      	bne.n	fd4c <am_hal_uart_transfer+0x45c>
    fd08:	2a20      	cmp	r2, #32
    fd0a:	f800 4b01 	strb.w	r4, [r0], #1
    fd0e:	d002      	beq.n	fd16 <am_hal_uart_transfer+0x426>
    fd10:	698c      	ldr	r4, [r1, #24]
    fd12:	06e4      	lsls	r4, r4, #27
    fd14:	d5f2      	bpl.n	fcfc <am_hal_uart_transfer+0x40c>
    fd16:	f105 0648 	add.w	r6, r5, #72	; 0x48
    fd1a:	a908      	add	r1, sp, #32
    fd1c:	4630      	mov	r0, r6
    fd1e:	9300      	str	r3, [sp, #0]
    fd20:	f000 f8d8 	bl	fed4 <am_hal_queue_item_add>
    fd24:	b920      	cbnz	r0, fd30 <am_hal_uart_transfer+0x440>
    fd26:	4f0e      	ldr	r7, [pc, #56]	; (fd60 <am_hal_uart_transfer+0x470>)
    fd28:	9806      	ldr	r0, [sp, #24]
    fd2a:	f7fe fd03 	bl	e734 <am_hal_interrupt_master_set>
    fd2e:	e5e9      	b.n	f904 <am_hal_uart_transfer+0x14>
    fd30:	9806      	ldr	r0, [sp, #24]
    fd32:	f7fe fcff 	bl	e734 <am_hal_interrupt_master_set>
    fd36:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    fd38:	9b00      	ldr	r3, [sp, #0]
    fd3a:	42bc      	cmp	r4, r7
    fd3c:	bf28      	it	cs
    fd3e:	463c      	movcs	r4, r7
    fd40:	4619      	mov	r1, r3
    fd42:	4630      	mov	r0, r6
    fd44:	4622      	mov	r2, r4
    fd46:	f000 f8fd 	bl	ff44 <am_hal_queue_item_get>
    fd4a:	e67e      	b.n	fa4a <am_hal_uart_transfer+0x15a>
    fd4c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fd50:	e7ea      	b.n	fd28 <am_hal_uart_transfer+0x438>
    fd52:	4604      	mov	r4, r0
    fd54:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    fd58:	e678      	b.n	fa4c <am_hal_uart_transfer+0x15c>
    fd5a:	4627      	mov	r7, r4
    fd5c:	e676      	b.n	fa4c <am_hal_uart_transfer+0x15c>
    fd5e:	bf00      	nop
    fd60:	08000001 	.word	0x08000001

0000fd64 <am_hal_uart_tx_flush>:
    fd64:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fd68:	b570      	push	{r4, r5, r6, lr}
    fd6a:	4604      	mov	r4, r0
    fd6c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    fd6e:	b15b      	cbz	r3, fd88 <am_hal_uart_tx_flush+0x24>
    fd70:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fd72:	b14b      	cbz	r3, fd88 <am_hal_uart_tx_flush+0x24>
    fd74:	4e0e      	ldr	r6, [pc, #56]	; (fdb0 <am_hal_uart_tx_flush+0x4c>)
    fd76:	6e20      	ldr	r0, [r4, #96]	; 0x60
    fd78:	fbb6 f0f0 	udiv	r0, r6, r0
    fd7c:	0100      	lsls	r0, r0, #4
    fd7e:	f7fe facb 	bl	e318 <am_hal_flash_delay>
    fd82:	6b63      	ldr	r3, [r4, #52]	; 0x34
    fd84:	2b00      	cmp	r3, #0
    fd86:	d1f6      	bne.n	fd76 <am_hal_uart_tx_flush+0x12>
    fd88:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fd8c:	351c      	adds	r5, #28
    fd8e:	032d      	lsls	r5, r5, #12
    fd90:	69ab      	ldr	r3, [r5, #24]
    fd92:	071a      	lsls	r2, r3, #28
    fd94:	d509      	bpl.n	fdaa <am_hal_uart_tx_flush+0x46>
    fd96:	4e06      	ldr	r6, [pc, #24]	; (fdb0 <am_hal_uart_tx_flush+0x4c>)
    fd98:	6e20      	ldr	r0, [r4, #96]	; 0x60
    fd9a:	fbb6 f0f0 	udiv	r0, r6, r0
    fd9e:	0100      	lsls	r0, r0, #4
    fda0:	f7fe faba 	bl	e318 <am_hal_flash_delay>
    fda4:	69ab      	ldr	r3, [r5, #24]
    fda6:	071b      	lsls	r3, r3, #28
    fda8:	d4f6      	bmi.n	fd98 <am_hal_uart_tx_flush+0x34>
    fdaa:	2000      	movs	r0, #0
    fdac:	bd70      	pop	{r4, r5, r6, pc}
    fdae:	bf00      	nop
    fdb0:	00b71b00 	.word	0x00b71b00

0000fdb4 <am_hal_cmdq_init>:
    fdb4:	2807      	cmp	r0, #7
    fdb6:	d901      	bls.n	fdbc <am_hal_cmdq_init+0x8>
    fdb8:	2005      	movs	r0, #5
    fdba:	4770      	bx	lr
    fdbc:	b1c9      	cbz	r1, fdf2 <am_hal_cmdq_init+0x3e>
    fdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdc2:	684c      	ldr	r4, [r1, #4]
    fdc4:	b194      	cbz	r4, fdec <am_hal_cmdq_init+0x38>
    fdc6:	b18a      	cbz	r2, fdec <am_hal_cmdq_init+0x38>
    fdc8:	680e      	ldr	r6, [r1, #0]
    fdca:	2e01      	cmp	r6, #1
    fdcc:	d90e      	bls.n	fdec <am_hal_cmdq_init+0x38>
    fdce:	272c      	movs	r7, #44	; 0x2c
    fdd0:	f8df c09c 	ldr.w	ip, [pc, #156]	; fe70 <am_hal_cmdq_init+0xbc>
    fdd4:	fb07 f700 	mul.w	r7, r7, r0
    fdd8:	eb0c 0507 	add.w	r5, ip, r7
    fddc:	f895 e003 	ldrb.w	lr, [r5, #3]
    fde0:	f01e 0301 	ands.w	r3, lr, #1
    fde4:	d007      	beq.n	fdf6 <am_hal_cmdq_init+0x42>
    fde6:	2007      	movs	r0, #7
    fde8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdec:	2006      	movs	r0, #6
    fdee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdf2:	2006      	movs	r0, #6
    fdf4:	4770      	bx	lr
    fdf6:	f04e 0e01 	orr.w	lr, lr, #1
    fdfa:	00f6      	lsls	r6, r6, #3
    fdfc:	f363 0e41 	bfi	lr, r3, #1, #1
    fe00:	f885 e003 	strb.w	lr, [r5, #3]
    fe04:	eb06 0804 	add.w	r8, r6, r4
    fe08:	f8df e068 	ldr.w	lr, [pc, #104]	; fe74 <am_hal_cmdq_init+0xc0>
    fe0c:	f8c5 8008 	str.w	r8, [r5, #8]
    fe10:	606c      	str	r4, [r5, #4]
    fe12:	60ec      	str	r4, [r5, #12]
    fe14:	616c      	str	r4, [r5, #20]
    fe16:	612c      	str	r4, [r5, #16]
    fe18:	61ae      	str	r6, [r5, #24]
    fe1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fe1e:	f85c 6007 	ldr.w	r6, [ip, r7]
    fe22:	f8df 8054 	ldr.w	r8, [pc, #84]	; fe78 <am_hal_cmdq_init+0xc4>
    fe26:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
    fe2a:	f368 0617 	bfi	r6, r8, #0, #24
    fe2e:	f8d0 e008 	ldr.w	lr, [r0, #8]
    fe32:	f84c 6007 	str.w	r6, [ip, r7]
    fe36:	6268      	str	r0, [r5, #36]	; 0x24
    fe38:	61eb      	str	r3, [r5, #28]
    fe3a:	622b      	str	r3, [r5, #32]
    fe3c:	f8ce 3000 	str.w	r3, [lr]
    fe40:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fe42:	7a09      	ldrb	r1, [r1, #8]
    fe44:	68c0      	ldr	r0, [r0, #12]
    fe46:	6003      	str	r3, [r0, #0]
    fe48:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fe4a:	6906      	ldr	r6, [r0, #16]
    fe4c:	6940      	ldr	r0, [r0, #20]
    fe4e:	6837      	ldr	r7, [r6, #0]
    fe50:	4338      	orrs	r0, r7
    fe52:	6030      	str	r0, [r6, #0]
    fe54:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fe56:	6840      	ldr	r0, [r0, #4]
    fe58:	6004      	str	r4, [r0, #0]
    fe5a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fe5c:	0049      	lsls	r1, r1, #1
    fe5e:	6804      	ldr	r4, [r0, #0]
    fe60:	f001 0102 	and.w	r1, r1, #2
    fe64:	6021      	str	r1, [r4, #0]
    fe66:	4618      	mov	r0, r3
    fe68:	6015      	str	r5, [r2, #0]
    fe6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe6e:	bf00      	nop
    fe70:	10001194 	.word	0x10001194
    fe74:	000105b0 	.word	0x000105b0
    fe78:	00cdcdcd 	.word	0x00cdcdcd

0000fe7c <am_hal_cmdq_enable>:
    fe7c:	4603      	mov	r3, r0
    fe7e:	b128      	cbz	r0, fe8c <am_hal_cmdq_enable+0x10>
    fe80:	6802      	ldr	r2, [r0, #0]
    fe82:	490d      	ldr	r1, [pc, #52]	; (feb8 <am_hal_cmdq_enable+0x3c>)
    fe84:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe88:	428a      	cmp	r2, r1
    fe8a:	d001      	beq.n	fe90 <am_hal_cmdq_enable+0x14>
    fe8c:	2002      	movs	r0, #2
    fe8e:	4770      	bx	lr
    fe90:	78c2      	ldrb	r2, [r0, #3]
    fe92:	f002 0202 	and.w	r2, r2, #2
    fe96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    fe9a:	b952      	cbnz	r2, feb2 <am_hal_cmdq_enable+0x36>
    fe9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fe9e:	6811      	ldr	r1, [r2, #0]
    fea0:	680a      	ldr	r2, [r1, #0]
    fea2:	f042 0201 	orr.w	r2, r2, #1
    fea6:	600a      	str	r2, [r1, #0]
    fea8:	78da      	ldrb	r2, [r3, #3]
    feaa:	f042 0202 	orr.w	r2, r2, #2
    feae:	70da      	strb	r2, [r3, #3]
    feb0:	4770      	bx	lr
    feb2:	2000      	movs	r0, #0
    feb4:	4770      	bx	lr
    feb6:	bf00      	nop
    feb8:	01cdcdcd 	.word	0x01cdcdcd

0000febc <am_hal_queue_init>:
    febc:	b410      	push	{r4}
    febe:	2400      	movs	r4, #0
    fec0:	6004      	str	r4, [r0, #0]
    fec2:	6044      	str	r4, [r0, #4]
    fec4:	6084      	str	r4, [r0, #8]
    fec6:	60c3      	str	r3, [r0, #12]
    fec8:	6102      	str	r2, [r0, #16]
    feca:	6141      	str	r1, [r0, #20]
    fecc:	f85d 4b04 	ldr.w	r4, [sp], #4
    fed0:	4770      	bx	lr
    fed2:	bf00      	nop

0000fed4 <am_hal_queue_item_add>:
    fed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fed6:	4604      	mov	r4, r0
    fed8:	6906      	ldr	r6, [r0, #16]
    feda:	b083      	sub	sp, #12
    fedc:	fb06 f602 	mul.w	r6, r6, r2
    fee0:	460d      	mov	r5, r1
    fee2:	f7fe fc23 	bl	e72c <am_hal_interrupt_master_disable>
    fee6:	68e7      	ldr	r7, [r4, #12]
    fee8:	68a2      	ldr	r2, [r4, #8]
    feea:	9001      	str	r0, [sp, #4]
    feec:	1abb      	subs	r3, r7, r2
    feee:	429e      	cmp	r6, r3
    fef0:	d826      	bhi.n	ff40 <am_hal_queue_item_add+0x6c>
    fef2:	b196      	cbz	r6, ff1a <am_hal_queue_item_add+0x46>
    fef4:	6823      	ldr	r3, [r4, #0]
    fef6:	4629      	mov	r1, r5
    fef8:	b1c5      	cbz	r5, ff2c <am_hal_queue_item_add+0x58>
    fefa:	19af      	adds	r7, r5, r6
    fefc:	6962      	ldr	r2, [r4, #20]
    fefe:	f811 0b01 	ldrb.w	r0, [r1], #1
    ff02:	54d0      	strb	r0, [r2, r3]
    ff04:	6823      	ldr	r3, [r4, #0]
    ff06:	68e5      	ldr	r5, [r4, #12]
    ff08:	3301      	adds	r3, #1
    ff0a:	42b9      	cmp	r1, r7
    ff0c:	fbb3 f0f5 	udiv	r0, r3, r5
    ff10:	fb05 3310 	mls	r3, r5, r0, r3
    ff14:	6023      	str	r3, [r4, #0]
    ff16:	d1f1      	bne.n	fefc <am_hal_queue_item_add+0x28>
    ff18:	68a2      	ldr	r2, [r4, #8]
    ff1a:	4432      	add	r2, r6
    ff1c:	60a2      	str	r2, [r4, #8]
    ff1e:	2401      	movs	r4, #1
    ff20:	9801      	ldr	r0, [sp, #4]
    ff22:	f7fe fc07 	bl	e734 <am_hal_interrupt_master_set>
    ff26:	4620      	mov	r0, r4
    ff28:	b003      	add	sp, #12
    ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff2c:	3101      	adds	r1, #1
    ff2e:	3301      	adds	r3, #1
    ff30:	428e      	cmp	r6, r1
    ff32:	fbb3 f0f7 	udiv	r0, r3, r7
    ff36:	fb07 3310 	mls	r3, r7, r0, r3
    ff3a:	d1f7      	bne.n	ff2c <am_hal_queue_item_add+0x58>
    ff3c:	6023      	str	r3, [r4, #0]
    ff3e:	e7ec      	b.n	ff1a <am_hal_queue_item_add+0x46>
    ff40:	2400      	movs	r4, #0
    ff42:	e7ed      	b.n	ff20 <am_hal_queue_item_add+0x4c>

0000ff44 <am_hal_queue_item_get>:
    ff44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff46:	4604      	mov	r4, r0
    ff48:	6906      	ldr	r6, [r0, #16]
    ff4a:	b083      	sub	sp, #12
    ff4c:	fb06 f602 	mul.w	r6, r6, r2
    ff50:	460d      	mov	r5, r1
    ff52:	f7fe fbeb 	bl	e72c <am_hal_interrupt_master_disable>
    ff56:	68a2      	ldr	r2, [r4, #8]
    ff58:	9001      	str	r0, [sp, #4]
    ff5a:	4296      	cmp	r6, r2
    ff5c:	d81c      	bhi.n	ff98 <am_hal_queue_item_get+0x54>
    ff5e:	b196      	cbz	r6, ff86 <am_hal_queue_item_get+0x42>
    ff60:	6863      	ldr	r3, [r4, #4]
    ff62:	b1dd      	cbz	r5, ff9c <am_hal_queue_item_get+0x58>
    ff64:	4629      	mov	r1, r5
    ff66:	19af      	adds	r7, r5, r6
    ff68:	6962      	ldr	r2, [r4, #20]
    ff6a:	5cd3      	ldrb	r3, [r2, r3]
    ff6c:	f801 3b01 	strb.w	r3, [r1], #1
    ff70:	6863      	ldr	r3, [r4, #4]
    ff72:	68e5      	ldr	r5, [r4, #12]
    ff74:	3301      	adds	r3, #1
    ff76:	428f      	cmp	r7, r1
    ff78:	fbb3 f0f5 	udiv	r0, r3, r5
    ff7c:	fb05 3310 	mls	r3, r5, r0, r3
    ff80:	6063      	str	r3, [r4, #4]
    ff82:	d1f1      	bne.n	ff68 <am_hal_queue_item_get+0x24>
    ff84:	68a2      	ldr	r2, [r4, #8]
    ff86:	1b92      	subs	r2, r2, r6
    ff88:	60a2      	str	r2, [r4, #8]
    ff8a:	2401      	movs	r4, #1
    ff8c:	9801      	ldr	r0, [sp, #4]
    ff8e:	f7fe fbd1 	bl	e734 <am_hal_interrupt_master_set>
    ff92:	4620      	mov	r0, r4
    ff94:	b003      	add	sp, #12
    ff96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff98:	2400      	movs	r4, #0
    ff9a:	e7f7      	b.n	ff8c <am_hal_queue_item_get+0x48>
    ff9c:	68e0      	ldr	r0, [r4, #12]
    ff9e:	4629      	mov	r1, r5
    ffa0:	3101      	adds	r1, #1
    ffa2:	3301      	adds	r3, #1
    ffa4:	428e      	cmp	r6, r1
    ffa6:	fbb3 f5f0 	udiv	r5, r3, r0
    ffaa:	fb00 3315 	mls	r3, r0, r5, r3
    ffae:	d1f7      	bne.n	ffa0 <am_hal_queue_item_get+0x5c>
    ffb0:	6063      	str	r3, [r4, #4]
    ffb2:	e7e8      	b.n	ff86 <am_hal_queue_item_get+0x42>
    ffb4:	72617053 	.word	0x72617053
    ffb8:	6e75466b 	.word	0x6e75466b
    ffbc:	67644520 	.word	0x67644520
    ffc0:	6f422065 	.word	0x6f422065
    ffc4:	20647261 	.word	0x20647261
    ffc8:	74736554 	.word	0x74736554
    ffcc:	0000000a 	.word	0x0000000a
    ffd0:	353a3731 	.word	0x353a3731
    ffd4:	35343a33 	.word	0x35343a33
    ffd8:	00000000 	.word	0x00000000
    ffdc:	20626546 	.word	0x20626546
    ffe0:	32203332 	.word	0x32203332
    ffe4:	00303230 	.word	0x00303230
    ffe8:	706d6f43 	.word	0x706d6f43
    ffec:	64656c69 	.word	0x64656c69
    fff0:	206e6f20 	.word	0x206e6f20
    fff4:	202c7325 	.word	0x202c7325
    fff8:	0a0a7325 	.word	0x0a0a7325
    fffc:	00000000 	.word	0x00000000
   10000:	72617053 	.word	0x72617053
   10004:	6e75466b 	.word	0x6e75466b
   10008:	6e655420 	.word	0x6e655420
   1000c:	66726f73 	.word	0x66726f73
   10010:	20776f6c 	.word	0x20776f6c
   10014:	75626544 	.word	0x75626544
   10018:	754f2067 	.word	0x754f2067
   1001c:	74757074 	.word	0x74757074
   10020:	41552820 	.word	0x41552820
   10024:	0d295452 	.word	0x0d295452
   10028:	0000000a 	.word	0x0000000a
   1002c:	6c6c6548 	.word	0x6c6c6548
   10030:	55202c6f 	.word	0x55202c6f
   10034:	21545241 	.word	0x21545241
   10038:	00000a0d 	.word	0x00000a0d
   1003c:	65636341 	.word	0x65636341
   10040:	6f72656c 	.word	0x6f72656c
   10044:	6574656d 	.word	0x6574656d
   10048:	6e692072 	.word	0x6e692072
   1004c:	72207469 	.word	0x72207469
   10050:	72757465 	.word	0x72757465
   10054:	2064656e 	.word	0x2064656e
   10058:	0d783825 	.word	0x0d783825
   1005c:	0000000a 	.word	0x0000000a
   10060:	4843494d 	.word	0x4843494d
   10064:	204c4145 	.word	0x204c4145
   10068:	4b435553 	.word	0x4b435553
   1006c:	21212153 	.word	0x21212153
   10070:	00000a0d 	.word	0x00000a0d
   10074:	0a0a0a0a 	.word	0x0a0a0a0a
   10078:	0a0a0a0a 	.word	0x0a0a0a0a
   1007c:	0a0a0a0a 	.word	0x0a0a0a0a
   10080:	0a0a0a0a 	.word	0x0a0a0a0a
   10084:	00000a0a 	.word	0x00000a0a
   10088:	6f727245 	.word	0x6f727245
   1008c:	65722072 	.word	0x65722072
   10090:	6e696461 	.word	0x6e696461
   10094:	44412067 	.word	0x44412067
   10098:	6e692043 	.word	0x6e692043
   1009c:	72726574 	.word	0x72726574
   100a0:	20747075 	.word	0x20747075
   100a4:	74617473 	.word	0x74617473
   100a8:	000a7375 	.word	0x000a7375
   100ac:	6f727245 	.word	0x6f727245
   100b0:	6c632072 	.word	0x6c632072
   100b4:	69726165 	.word	0x69726165
   100b8:	4120676e 	.word	0x4120676e
   100bc:	69204344 	.word	0x69204344
   100c0:	7265746e 	.word	0x7265746e
   100c4:	74707572 	.word	0x74707572
   100c8:	61747320 	.word	0x61747320
   100cc:	0a737574 	.word	0x0a737574
   100d0:	00000000 	.word	0x00000000
   100d4:	6f727245 	.word	0x6f727245
   100d8:	202d2072 	.word	0x202d2072
   100dc:	20434441 	.word	0x20434441
   100e0:	706d6173 	.word	0x706d6173
   100e4:	7220656c 	.word	0x7220656c
   100e8:	20646165 	.word	0x20646165
   100ec:	6d6f7266 	.word	0x6d6f7266
   100f0:	46494620 	.word	0x46494620
   100f4:	6166204f 	.word	0x6166204f
   100f8:	64656c69 	.word	0x64656c69
   100fc:	00000a2e 	.word	0x00000a2e
   10100:	6f727245 	.word	0x6f727245
   10104:	202d2072 	.word	0x202d2072
   10108:	61736964 	.word	0x61736964
   1010c:	20656c62 	.word	0x20656c62
   10110:	20434441 	.word	0x20434441
   10114:	6c696166 	.word	0x6c696166
   10118:	0a2e6465 	.word	0x0a2e6465
   1011c:	00000000 	.word	0x00000000
   10120:	6f727245 	.word	0x6f727245
   10124:	202d2072 	.word	0x202d2072
   10128:	61736964 	.word	0x61736964
   1012c:	6e696c62 	.word	0x6e696c62
   10130:	68742067 	.word	0x68742067
   10134:	44412065 	.word	0x44412065
   10138:	6f702043 	.word	0x6f702043
   1013c:	20726577 	.word	0x20726577
   10140:	616d6f64 	.word	0x616d6f64
   10144:	66206e69 	.word	0x66206e69
   10148:	656c6961 	.word	0x656c6961
   1014c:	000a2e64 	.word	0x000a2e64
   10150:	6f727245 	.word	0x6f727245
   10154:	202d2072 	.word	0x202d2072
   10158:	75746572 	.word	0x75746572
   1015c:	6f206e72 	.word	0x6f206e72
   10160:	68742066 	.word	0x68742066
   10164:	44412065 	.word	0x44412065
   10168:	6e692043 	.word	0x6e692043
   1016c:	6e617473 	.word	0x6e617473
   10170:	66206563 	.word	0x66206563
   10174:	656c6961 	.word	0x656c6961
   10178:	000a2e64 	.word	0x000a2e64
   1017c:	6f727245 	.word	0x6f727245
   10180:	202d2072 	.word	0x202d2072
   10184:	65736572 	.word	0x65736572
   10188:	74617672 	.word	0x74617672
   1018c:	206e6f69 	.word	0x206e6f69
   10190:	7420666f 	.word	0x7420666f
   10194:	41206568 	.word	0x41206568
   10198:	69204344 	.word	0x69204344
   1019c:	6174736e 	.word	0x6174736e
   101a0:	2065636e 	.word	0x2065636e
   101a4:	6c696166 	.word	0x6c696166
   101a8:	0a2e6465 	.word	0x0a2e6465
   101ac:	00000000 	.word	0x00000000
   101b0:	6f727245 	.word	0x6f727245
   101b4:	202d2072 	.word	0x202d2072
   101b8:	20434441 	.word	0x20434441
   101bc:	65776f70 	.word	0x65776f70
   101c0:	6e6f2072 	.word	0x6e6f2072
   101c4:	69616620 	.word	0x69616620
   101c8:	2e64656c 	.word	0x2e64656c
   101cc:	0000000a 	.word	0x0000000a
   101d0:	6f727245 	.word	0x6f727245
   101d4:	202d2072 	.word	0x202d2072
   101d8:	666e6f63 	.word	0x666e6f63
   101dc:	72756769 	.word	0x72756769
   101e0:	20676e69 	.word	0x20676e69
   101e4:	20434441 	.word	0x20434441
   101e8:	6c696166 	.word	0x6c696166
   101ec:	0a2e6465 	.word	0x0a2e6465
   101f0:	00000000 	.word	0x00000000
   101f4:	6f727245 	.word	0x6f727245
   101f8:	202d2072 	.word	0x202d2072
   101fc:	666e6f63 	.word	0x666e6f63
   10200:	72756769 	.word	0x72756769
   10204:	20676e69 	.word	0x20676e69
   10208:	20434441 	.word	0x20434441
   1020c:	746f6c53 	.word	0x746f6c53
   10210:	66203020 	.word	0x66203020
   10214:	656c6961 	.word	0x656c6961
   10218:	000a2e64 	.word	0x000a2e64
   1021c:	6f727245 	.word	0x6f727245
   10220:	202d2072 	.word	0x202d2072
   10224:	62616e65 	.word	0x62616e65
   10228:	676e696c 	.word	0x676e696c
   1022c:	43444120 	.word	0x43444120
   10230:	69616620 	.word	0x69616620
   10234:	2e64656c 	.word	0x2e64656c
   10238:	0000000a 	.word	0x0000000a

0001023c <g_AM_PIN_11_ADCSE2>:
   1023c:	00000000 616f6857 2820696d 756f6873     ....Whoami (shou
   1024c:	6220646c 78302065 3a293333 25783020     ld be 0x33): 0x%
   1025c:	000a7832 52206f4e 75622058 72656666     2x..No RX buffer
   1026c:	6f727020 65646976 00000a64 646e6553      provided...Send
   1027c:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   1028c:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   1029c:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   102ac:	65646976 00000a64 646e6553 72726520     vided...Send err
   102bc:	68702820 20657361 203a2931 000a6425      (phase 1): %d..

000102cc <g_sBspUartConfig>:
   102cc:	0001c200 00000060 00000000 00000000     ....`...........
   102dc:	00000000 00000012 00000000 00000000     ................
	...

000102f4 <g_AM_BSP_GPIO_COM_UART_RX>:
   102f4:	00000000                                ....

000102f8 <g_AM_BSP_GPIO_COM_UART_TX>:
   102f8:	00000000                                ....

000102fc <g_AM_BSP_GPIO_IOM4_SCL>:
   102fc:	00040b44                                D...

00010300 <g_AM_BSP_GPIO_IOM4_SDA>:
   10300:	00040b44                                D...

00010304 <am_hal_cachectrl_defaults>:
   10304:	00000308                                ....

00010308 <g_AM_HAL_GPIO_INPUT>:
   10308:	00001003                                ....

0001030c <g_ui8Bit76Capabilities>:
   1030c:	02800101 80010180 80800101 80808080     ................
   1031c:	80808080 80808008 01800180 80808080     ................
   1032c:	80808080 01800402 01010401 80808080     ................
   1033c:	00000101                                ....

00010340 <g_ui8NCEtable>:
   10340:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10350:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10360:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10370:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10380:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   10390:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   103a0:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   103b0:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   103c0:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   103d0:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   103e0:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   103f0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10400:	32221202 43231303                       .."2..#C

00010408 <g_ui8Inpen>:
   10408:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   10418:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   10428:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   10438:	00003130                                01..

0001043c <g_AM_HAL_GPIO_DISABLE>:
   1043c:	00000003                                ....

00010440 <g_AM_HAL_GPIO_OUTPUT>:
   10440:	00000403                                ....

00010444 <g_ui8nCEpins>:
   10444:	02070707 00080802 01020202 01010101     ................
   10454:	01010101 01010101 01010101 01010101     ................
   10464:	01010101 08010101 01010008 01010101     ................
   10474:	00000101                                ....

00010478 <g_AM_HAL_GPIO_OUTPUT_12>:
   10478:	00000703                                ....

0001047c <g_am_hal_mcuctrl_flash_size>:
   1047c:	00004000 00008000 00010000 00020000     .@..............
   1048c:	00040000 00080000 00100000 00200000     .............. .
   1049c:	00180000 00000000 00000000 00000000     ................
	...

000104bc <g_am_hal_mcuctrl_sram_size>:
   104bc:	00004000 00008000 00010000 00020000     .@..............
   104cc:	00040000 00080000 00100000 00060000     ................
   104dc:	000c0000 00000000 00000000 00000000     ................
	...

000104fc <am_hal_pwrctrl_peripheral_control>:
	...
   10508:	00000001 00000004 00000004 00000002     ................
   10518:	00000008 00000008 00000004 00000008     ................
   10528:	00000008 00000008 00000008 00000008     ................
   10538:	00000010 00000010 00000010 00000020     ............ ...
   10548:	00000010 00000010 00000040 00000010     ........@.......
   10558:	00000010 00000080 00000004 00000004     ................
   10568:	00000100 00000004 00000004 00000200     ................
   10578:	00000020 00000020 00000400 00000004      ... ...........
   10588:	00000004 00000800 00000040 00000040     ........@...@...
   10598:	00001000 00000080 00000080 00002000     ............. ..
   105a8:	00000100 00000100                       ........

000105b0 <gAmHalCmdQReg>:
   105b0:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   105c0:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   105d0:	00000004 00000002 50005294 50005298     .........R.P.R.P
   105e0:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   105f0:	5000529c 00000001 00000004 00000002     .R.P............
   10600:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10610:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   10620:	00000004 00000002 50007294 50007298     .........r.P.r.P
   10630:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10640:	5000729c 00000001 00000004 00000002     .r.P............
   10650:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10660:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10670:	00000004 00000002 50009294 50009298     ...........P...P
   10680:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10690:	5000929c 00000001 00000004 00000002     ...P............
   106a0:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   106b0:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   106c0:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   106d0:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   106e0:	5000c250 00000001 00000004 00000002     P..P............
