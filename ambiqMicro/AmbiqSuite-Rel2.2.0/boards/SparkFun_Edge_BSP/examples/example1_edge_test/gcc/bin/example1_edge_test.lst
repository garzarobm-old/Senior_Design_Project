
bin/example1_edge_test.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 4d d5 00 00 45 d5 00 00 f5 c6 00 00     ....M...E.......
    c010:	f5 c6 00 00 f5 c6 00 00 f5 c6 00 00 00 00 00 00     ................
	...
    c02c:	49 d5 00 00 49 d5 00 00 00 00 00 00 49 d5 00 00     I...I.......I...
    c03c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c04c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c05c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c06c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 b5 d5 00 00     I...I...I.......
    c07c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 85 d6 00 00     I...I...I.......
    c08c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c09c:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c0ac:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c0bc:	49 d5 00 00 49 d5 00 00 49 d5 00 00 49 d5 00 00     I...I...I...I...
    c0cc:	49 d5 00 00                                         I...

0000c0d0 <__Patchable>:
	...

0000c100 <__aeabi_drsub>:
    c100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c104:	e002      	b.n	c10c <__adddf3>
    c106:	bf00      	nop

0000c108 <__aeabi_dsub>:
    c108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c10c <__adddf3>:
    c10c:	b530      	push	{r4, r5, lr}
    c10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c112:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c116:	ea94 0f05 	teq	r4, r5
    c11a:	bf08      	it	eq
    c11c:	ea90 0f02 	teqeq	r0, r2
    c120:	bf1f      	itttt	ne
    c122:	ea54 0c00 	orrsne.w	ip, r4, r0
    c126:	ea55 0c02 	orrsne.w	ip, r5, r2
    c12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c132:	f000 80e2 	beq.w	c2fa <__adddf3+0x1ee>
    c136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c13e:	bfb8      	it	lt
    c140:	426d      	neglt	r5, r5
    c142:	dd0c      	ble.n	c15e <__adddf3+0x52>
    c144:	442c      	add	r4, r5
    c146:	ea80 0202 	eor.w	r2, r0, r2
    c14a:	ea81 0303 	eor.w	r3, r1, r3
    c14e:	ea82 0000 	eor.w	r0, r2, r0
    c152:	ea83 0101 	eor.w	r1, r3, r1
    c156:	ea80 0202 	eor.w	r2, r0, r2
    c15a:	ea81 0303 	eor.w	r3, r1, r3
    c15e:	2d36      	cmp	r5, #54	; 0x36
    c160:	bf88      	it	hi
    c162:	bd30      	pophi	{r4, r5, pc}
    c164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c168:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c174:	d002      	beq.n	c17c <__adddf3+0x70>
    c176:	4240      	negs	r0, r0
    c178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c180:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c188:	d002      	beq.n	c190 <__adddf3+0x84>
    c18a:	4252      	negs	r2, r2
    c18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c190:	ea94 0f05 	teq	r4, r5
    c194:	f000 80a7 	beq.w	c2e6 <__adddf3+0x1da>
    c198:	f1a4 0401 	sub.w	r4, r4, #1
    c19c:	f1d5 0e20 	rsbs	lr, r5, #32
    c1a0:	db0d      	blt.n	c1be <__adddf3+0xb2>
    c1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c1a6:	fa22 f205 	lsr.w	r2, r2, r5
    c1aa:	1880      	adds	r0, r0, r2
    c1ac:	f141 0100 	adc.w	r1, r1, #0
    c1b0:	fa03 f20e 	lsl.w	r2, r3, lr
    c1b4:	1880      	adds	r0, r0, r2
    c1b6:	fa43 f305 	asr.w	r3, r3, r5
    c1ba:	4159      	adcs	r1, r3
    c1bc:	e00e      	b.n	c1dc <__adddf3+0xd0>
    c1be:	f1a5 0520 	sub.w	r5, r5, #32
    c1c2:	f10e 0e20 	add.w	lr, lr, #32
    c1c6:	2a01      	cmp	r2, #1
    c1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c1cc:	bf28      	it	cs
    c1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
    c1d2:	fa43 f305 	asr.w	r3, r3, r5
    c1d6:	18c0      	adds	r0, r0, r3
    c1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c1e0:	d507      	bpl.n	c1f2 <__adddf3+0xe6>
    c1e2:	f04f 0e00 	mov.w	lr, #0
    c1e6:	f1dc 0c00 	rsbs	ip, ip, #0
    c1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
    c1ee:	eb6e 0101 	sbc.w	r1, lr, r1
    c1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c1f6:	d31b      	bcc.n	c230 <__adddf3+0x124>
    c1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c1fc:	d30c      	bcc.n	c218 <__adddf3+0x10c>
    c1fe:	0849      	lsrs	r1, r1, #1
    c200:	ea5f 0030 	movs.w	r0, r0, rrx
    c204:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c208:	f104 0401 	add.w	r4, r4, #1
    c20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c214:	f080 809a 	bcs.w	c34c <__adddf3+0x240>
    c218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c21c:	bf08      	it	eq
    c21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c222:	f150 0000 	adcs.w	r0, r0, #0
    c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c22a:	ea41 0105 	orr.w	r1, r1, r5
    c22e:	bd30      	pop	{r4, r5, pc}
    c230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c234:	4140      	adcs	r0, r0
    c236:	eb41 0101 	adc.w	r1, r1, r1
    c23a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23e:	f1a4 0401 	sub.w	r4, r4, #1
    c242:	d1e9      	bne.n	c218 <__adddf3+0x10c>
    c244:	f091 0f00 	teq	r1, #0
    c248:	bf04      	itt	eq
    c24a:	4601      	moveq	r1, r0
    c24c:	2000      	moveq	r0, #0
    c24e:	fab1 f381 	clz	r3, r1
    c252:	bf08      	it	eq
    c254:	3320      	addeq	r3, #32
    c256:	f1a3 030b 	sub.w	r3, r3, #11
    c25a:	f1b3 0220 	subs.w	r2, r3, #32
    c25e:	da0c      	bge.n	c27a <__adddf3+0x16e>
    c260:	320c      	adds	r2, #12
    c262:	dd08      	ble.n	c276 <__adddf3+0x16a>
    c264:	f102 0c14 	add.w	ip, r2, #20
    c268:	f1c2 020c 	rsb	r2, r2, #12
    c26c:	fa01 f00c 	lsl.w	r0, r1, ip
    c270:	fa21 f102 	lsr.w	r1, r1, r2
    c274:	e00c      	b.n	c290 <__adddf3+0x184>
    c276:	f102 0214 	add.w	r2, r2, #20
    c27a:	bfd8      	it	le
    c27c:	f1c2 0c20 	rsble	ip, r2, #32
    c280:	fa01 f102 	lsl.w	r1, r1, r2
    c284:	fa20 fc0c 	lsr.w	ip, r0, ip
    c288:	bfdc      	itt	le
    c28a:	ea41 010c 	orrle.w	r1, r1, ip
    c28e:	4090      	lslle	r0, r2
    c290:	1ae4      	subs	r4, r4, r3
    c292:	bfa2      	ittt	ge
    c294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c298:	4329      	orrge	r1, r5
    c29a:	bd30      	popge	{r4, r5, pc}
    c29c:	ea6f 0404 	mvn.w	r4, r4
    c2a0:	3c1f      	subs	r4, #31
    c2a2:	da1c      	bge.n	c2de <__adddf3+0x1d2>
    c2a4:	340c      	adds	r4, #12
    c2a6:	dc0e      	bgt.n	c2c6 <__adddf3+0x1ba>
    c2a8:	f104 0414 	add.w	r4, r4, #20
    c2ac:	f1c4 0220 	rsb	r2, r4, #32
    c2b0:	fa20 f004 	lsr.w	r0, r0, r4
    c2b4:	fa01 f302 	lsl.w	r3, r1, r2
    c2b8:	ea40 0003 	orr.w	r0, r0, r3
    c2bc:	fa21 f304 	lsr.w	r3, r1, r4
    c2c0:	ea45 0103 	orr.w	r1, r5, r3
    c2c4:	bd30      	pop	{r4, r5, pc}
    c2c6:	f1c4 040c 	rsb	r4, r4, #12
    c2ca:	f1c4 0220 	rsb	r2, r4, #32
    c2ce:	fa20 f002 	lsr.w	r0, r0, r2
    c2d2:	fa01 f304 	lsl.w	r3, r1, r4
    c2d6:	ea40 0003 	orr.w	r0, r0, r3
    c2da:	4629      	mov	r1, r5
    c2dc:	bd30      	pop	{r4, r5, pc}
    c2de:	fa21 f004 	lsr.w	r0, r1, r4
    c2e2:	4629      	mov	r1, r5
    c2e4:	bd30      	pop	{r4, r5, pc}
    c2e6:	f094 0f00 	teq	r4, #0
    c2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c2ee:	bf06      	itte	eq
    c2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c2f4:	3401      	addeq	r4, #1
    c2f6:	3d01      	subne	r5, #1
    c2f8:	e74e      	b.n	c198 <__adddf3+0x8c>
    c2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c2fe:	bf18      	it	ne
    c300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c304:	d029      	beq.n	c35a <__adddf3+0x24e>
    c306:	ea94 0f05 	teq	r4, r5
    c30a:	bf08      	it	eq
    c30c:	ea90 0f02 	teqeq	r0, r2
    c310:	d005      	beq.n	c31e <__adddf3+0x212>
    c312:	ea54 0c00 	orrs.w	ip, r4, r0
    c316:	bf04      	itt	eq
    c318:	4619      	moveq	r1, r3
    c31a:	4610      	moveq	r0, r2
    c31c:	bd30      	pop	{r4, r5, pc}
    c31e:	ea91 0f03 	teq	r1, r3
    c322:	bf1e      	ittt	ne
    c324:	2100      	movne	r1, #0
    c326:	2000      	movne	r0, #0
    c328:	bd30      	popne	{r4, r5, pc}
    c32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c32e:	d105      	bne.n	c33c <__adddf3+0x230>
    c330:	0040      	lsls	r0, r0, #1
    c332:	4149      	adcs	r1, r1
    c334:	bf28      	it	cs
    c336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c33a:	bd30      	pop	{r4, r5, pc}
    c33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c340:	bf3c      	itt	cc
    c342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c346:	bd30      	popcc	{r4, r5, pc}
    c348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c354:	f04f 0000 	mov.w	r0, #0
    c358:	bd30      	pop	{r4, r5, pc}
    c35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c35e:	bf1a      	itte	ne
    c360:	4619      	movne	r1, r3
    c362:	4610      	movne	r0, r2
    c364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c368:	bf1c      	itt	ne
    c36a:	460b      	movne	r3, r1
    c36c:	4602      	movne	r2, r0
    c36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c372:	bf06      	itte	eq
    c374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c378:	ea91 0f03 	teqeq	r1, r3
    c37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	bf00      	nop

0000c384 <__aeabi_ui2d>:
    c384:	f090 0f00 	teq	r0, #0
    c388:	bf04      	itt	eq
    c38a:	2100      	moveq	r1, #0
    c38c:	4770      	bxeq	lr
    c38e:	b530      	push	{r4, r5, lr}
    c390:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c394:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c398:	f04f 0500 	mov.w	r5, #0
    c39c:	f04f 0100 	mov.w	r1, #0
    c3a0:	e750      	b.n	c244 <__adddf3+0x138>
    c3a2:	bf00      	nop

0000c3a4 <__aeabi_i2d>:
    c3a4:	f090 0f00 	teq	r0, #0
    c3a8:	bf04      	itt	eq
    c3aa:	2100      	moveq	r1, #0
    c3ac:	4770      	bxeq	lr
    c3ae:	b530      	push	{r4, r5, lr}
    c3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c3bc:	bf48      	it	mi
    c3be:	4240      	negmi	r0, r0
    c3c0:	f04f 0100 	mov.w	r1, #0
    c3c4:	e73e      	b.n	c244 <__adddf3+0x138>
    c3c6:	bf00      	nop

0000c3c8 <__aeabi_f2d>:
    c3c8:	0042      	lsls	r2, r0, #1
    c3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c3ce:	ea4f 0131 	mov.w	r1, r1, rrx
    c3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c3d6:	bf1f      	itttt	ne
    c3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c3e4:	4770      	bxne	lr
    c3e6:	f092 0f00 	teq	r2, #0
    c3ea:	bf14      	ite	ne
    c3ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c3f0:	4770      	bxeq	lr
    c3f2:	b530      	push	{r4, r5, lr}
    c3f4:	f44f 7460 	mov.w	r4, #896	; 0x380
    c3f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c400:	e720      	b.n	c244 <__adddf3+0x138>
    c402:	bf00      	nop

0000c404 <__aeabi_ul2d>:
    c404:	ea50 0201 	orrs.w	r2, r0, r1
    c408:	bf08      	it	eq
    c40a:	4770      	bxeq	lr
    c40c:	b530      	push	{r4, r5, lr}
    c40e:	f04f 0500 	mov.w	r5, #0
    c412:	e00a      	b.n	c42a <__aeabi_l2d+0x16>

0000c414 <__aeabi_l2d>:
    c414:	ea50 0201 	orrs.w	r2, r0, r1
    c418:	bf08      	it	eq
    c41a:	4770      	bxeq	lr
    c41c:	b530      	push	{r4, r5, lr}
    c41e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c422:	d502      	bpl.n	c42a <__aeabi_l2d+0x16>
    c424:	4240      	negs	r0, r0
    c426:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c42a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c42e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c432:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c436:	f43f aedc 	beq.w	c1f2 <__adddf3+0xe6>
    c43a:	f04f 0203 	mov.w	r2, #3
    c43e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c442:	bf18      	it	ne
    c444:	3203      	addne	r2, #3
    c446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c44a:	bf18      	it	ne
    c44c:	3203      	addne	r2, #3
    c44e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c452:	f1c2 0320 	rsb	r3, r2, #32
    c456:	fa00 fc03 	lsl.w	ip, r0, r3
    c45a:	fa20 f002 	lsr.w	r0, r0, r2
    c45e:	fa01 fe03 	lsl.w	lr, r1, r3
    c462:	ea40 000e 	orr.w	r0, r0, lr
    c466:	fa21 f102 	lsr.w	r1, r1, r2
    c46a:	4414      	add	r4, r2
    c46c:	e6c1      	b.n	c1f2 <__adddf3+0xe6>
    c46e:	bf00      	nop

0000c470 <__aeabi_d2f>:
    c470:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c474:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c478:	bf24      	itt	cs
    c47a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c47e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c482:	d90d      	bls.n	c4a0 <__aeabi_d2f+0x30>
    c484:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c488:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c48c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c490:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c494:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c498:	bf08      	it	eq
    c49a:	f020 0001 	biceq.w	r0, r0, #1
    c49e:	4770      	bx	lr
    c4a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c4a4:	d121      	bne.n	c4ea <__aeabi_d2f+0x7a>
    c4a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c4aa:	bfbc      	itt	lt
    c4ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c4b0:	4770      	bxlt	lr
    c4b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c4b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c4ba:	f1c2 0218 	rsb	r2, r2, #24
    c4be:	f1c2 0c20 	rsb	ip, r2, #32
    c4c2:	fa10 f30c 	lsls.w	r3, r0, ip
    c4c6:	fa20 f002 	lsr.w	r0, r0, r2
    c4ca:	bf18      	it	ne
    c4cc:	f040 0001 	orrne.w	r0, r0, #1
    c4d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c4d8:	fa03 fc0c 	lsl.w	ip, r3, ip
    c4dc:	ea40 000c 	orr.w	r0, r0, ip
    c4e0:	fa23 f302 	lsr.w	r3, r3, r2
    c4e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c4e8:	e7cc      	b.n	c484 <__aeabi_d2f+0x14>
    c4ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c4ee:	d107      	bne.n	c500 <__aeabi_d2f+0x90>
    c4f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c4f4:	bf1e      	ittt	ne
    c4f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c4fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c4fe:	4770      	bxne	lr
    c500:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c504:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c508:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c50c:	4770      	bx	lr
    c50e:	bf00      	nop

0000c510 <main>:
//
// Main function.
//
//*****************************************************************************
int main(void)
{
    c510:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
}

static int boardSetup(void)
{
    // Set the clock frequency.
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c514:	2100      	movs	r1, #0
{
    c516:	b08c      	sub	sp, #48	; 0x30
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c518:	4608      	mov	r0, r1
    c51a:	f001 fff5 	bl	e508 <am_hal_clkgen_control>

    // Set the default cache configuration
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c51e:	4862      	ldr	r0, [pc, #392]	; (c6a8 <main+0x198>)
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c520:	4c62      	ldr	r4, [pc, #392]	; (c6ac <main+0x19c>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c522:	f8df 81c0 	ldr.w	r8, [pc, #448]	; c6e4 <main+0x1d4>
            acceleration_mg[0] =
    c526:	4f62      	ldr	r7, [pc, #392]	; (c6b0 <main+0x1a0>)
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c528:	f001 fe4c 	bl	e1c4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c52c:	f001 fe70 	bl	e210 <am_hal_cachectrl_enable>

    // Configure the board for low power operation.
    am_bsp_low_power_init();
    c530:	f001 fb84 	bl	dc3c <am_bsp_low_power_init>

    // Initialize the printf interface for ITM/SWO output.
    am_bsp_uart_printf_enable(); // Enable UART - will set debug output to UART
    c534:	f001 fbea 	bl	dd0c <am_bsp_uart_printf_enable>
    //am_bsp_itm_printf_enable(); // Redirect debug output to SWO

    // Setup LED's as outputs
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_RED, g_AM_HAL_GPIO_OUTPUT_12);
    c538:	4b5e      	ldr	r3, [pc, #376]	; (c6b4 <main+0x1a4>)
    c53a:	681d      	ldr	r5, [r3, #0]
    c53c:	202e      	movs	r0, #46	; 0x2e
    c53e:	4629      	mov	r1, r5
    c540:	f002 f9a6 	bl	e890 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_BLUE, g_AM_HAL_GPIO_OUTPUT_12);
    c544:	4629      	mov	r1, r5
    c546:	2025      	movs	r0, #37	; 0x25
    c548:	f002 f9a2 	bl	e890 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_GREEN, g_AM_HAL_GPIO_OUTPUT_12);
    c54c:	4629      	mov	r1, r5
    c54e:	202c      	movs	r0, #44	; 0x2c
    c550:	f002 f99e 	bl	e890 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_LED_YELLOW, g_AM_HAL_GPIO_OUTPUT_12);
    c554:	4629      	mov	r1, r5
    c556:	202f      	movs	r0, #47	; 0x2f
    c558:	f002 f99a 	bl	e890 <am_hal_gpio_pinconfig>

    // Set up button 14 as input (has pullup resistor on hardware)
    am_hal_gpio_pinconfig(AM_BSP_GPIO_14, g_AM_HAL_GPIO_INPUT);
    c55c:	4b56      	ldr	r3, [pc, #344]	; (c6b8 <main+0x1a8>)
    c55e:	200e      	movs	r0, #14
    c560:	6819      	ldr	r1, [r3, #0]
    c562:	f002 f995 	bl	e890 <am_hal_gpio_pinconfig>

    // Turn on the LEDs
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c566:	4b55      	ldr	r3, [pc, #340]	; (c6bc <main+0x1ac>)
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c56c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c570:	2020      	movs	r0, #32
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_RED);
    c572:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    c576:	601d      	str	r5, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_BLUE);
    c578:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_GREEN);
    c57a:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_set(AM_BSP_GPIO_LED_YELLOW);
    c57c:	601a      	str	r2, [r3, #0]
    am_util_stdio_terminal_clear();
    c57e:	f000 ffdb 	bl	d538 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("SparkFun Edge Board Test\n");
    c582:	484f      	ldr	r0, [pc, #316]	; (c6c0 <main+0x1b0>)
    c584:	f000 ffbc 	bl	d500 <am_util_stdio_printf>
    am_util_stdio_printf("Compiled on %s, %s\n\n", __DATE__, __TIME__);
    c588:	4a4e      	ldr	r2, [pc, #312]	; (c6c4 <main+0x1b4>)
    c58a:	494f      	ldr	r1, [pc, #316]	; (c6c8 <main+0x1b8>)
    c58c:	484f      	ldr	r0, [pc, #316]	; (c6cc <main+0x1bc>)
    c58e:	f000 ffb7 	bl	d500 <am_util_stdio_printf>
    am_util_stdio_printf("SparkFun Tensorflow Debug Output (UART)\r\n");
    c592:	484f      	ldr	r0, [pc, #316]	; (c6d0 <main+0x1c0>)
    c594:	f000 ffb4 	bl	d500 <am_util_stdio_printf>
    am_bsp_uart_string_print("Hello, UART!\r\n");
    c598:	484e      	ldr	r0, [pc, #312]	; (c6d4 <main+0x1c4>)
    c59a:	f001 fb2b 	bl	dbf4 <am_bsp_uart_string_print>
    int accInitRes = initAccelerometer();
    c59e:	f001 f9b3 	bl	d908 <initAccelerometer>
    am_util_stdio_printf("Accelerometer init returned %8x\r\n", accInitRes);
    c5a2:	4601      	mov	r1, r0
    c5a4:	484c      	ldr	r0, [pc, #304]	; (c6d8 <main+0x1c8>)
    c5a6:	f000 ffab 	bl	d500 <am_util_stdio_printf>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
}

static int testADC(void)
{
    initADC();
    c5aa:	f001 f8c5 	bl	d738 <initADC>
    enableAdcInterrupts();
    c5ae:	f001 f8e3 	bl	d778 <enableAdcInterrupts>
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5b2:	2100      	movs	r1, #0
        uint32_t pin14Val = 1; 
    c5b4:	2601      	movs	r6, #1
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5b6:	aa0b      	add	r2, sp, #44	; 0x2c
    c5b8:	200e      	movs	r0, #14
        uint32_t pin14Val = 1; 
    c5ba:	960b      	str	r6, [sp, #44]	; 0x2c
        am_hal_gpio_state_read( AM_BSP_GPIO_14, AM_HAL_GPIO_INPUT_READ, &pin14Val);
    c5bc:	f002 faa4 	bl	eb08 <am_hal_gpio_state_read>
        if( pin14Val == 0 ){ break; }
    c5c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5c2:	a90a      	add	r1, sp, #40	; 0x28
    c5c4:	4620      	mov	r0, r4
        if( pin14Val == 0 ){ break; }
    c5c6:	2d00      	cmp	r5, #0
    c5c8:	d059      	beq.n	c67e <main+0x16e>
        lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
    c5ca:	f001 faef 	bl	dbac <lis2dh12_xl_data_ready_get>
        if (reg.byte)
    c5ce:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5d2:	b9b3      	cbnz	r3, c602 <main+0xf2>
        lis2dh12_temp_data_ready_get(&dev_ctx, &reg.byte);      
    c5d4:	a90a      	add	r1, sp, #40	; 0x28
    c5d6:	4620      	mov	r0, r4
    c5d8:	f001 fa16 	bl	da08 <lis2dh12_temp_data_ready_get>
        if (reg.byte)    
    c5dc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	d0e6      	beq.n	c5b2 <main+0xa2>
            memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
    c5e4:	4d3d      	ldr	r5, [pc, #244]	; (c6dc <main+0x1cc>)
    c5e6:	2300      	movs	r3, #0
    c5e8:	802b      	strh	r3, [r5, #0]
            lis2dh12_temperature_raw_get(&dev_ctx, data_raw_temperature.u8bit);
    c5ea:	4629      	mov	r1, r5
    c5ec:	4620      	mov	r0, r4
    c5ee:	f001 fa1b 	bl	da28 <lis2dh12_temperature_raw_get>
            lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature.i16bit);
    c5f2:	f9b5 0000 	ldrsh.w	r0, [r5]
    c5f6:	f001 f9f9 	bl	d9ec <lis2dh12_from_lsb_hr_to_celsius>
            temperature_degC =
    c5fa:	4b39      	ldr	r3, [pc, #228]	; (c6e0 <main+0x1d0>)
    c5fc:	ed83 0a00 	vstr	s0, [r3]
    {
    c600:	e7d7      	b.n	c5b2 <main+0xa2>
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c602:	2300      	movs	r3, #0
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c604:	4937      	ldr	r1, [pc, #220]	; (c6e4 <main+0x1d4>)
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c606:	f8c8 3000 	str.w	r3, [r8]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c60a:	4620      	mov	r0, r4
            memset(data_raw_acceleration.u8bit, 0x00, 3*sizeof(int16_t));
    c60c:	f8a8 3004 	strh.w	r3, [r8, #4]
            lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration.u8bit);
    c610:	f001 fadc 	bl	dbcc <lis2dh12_acceleration_raw_get>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[0]);
    c614:	f9b8 0000 	ldrsh.w	r0, [r8]
    c618:	f001 f9e2 	bl	d9e0 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c61c:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
            acceleration_mg[0] =
    c620:	ed87 0a00 	vstr	s0, [r7]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[1]);
    c624:	f001 f9dc 	bl	d9e0 <lis2dh12_from_fs2_hr_to_mg>
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c628:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
            acceleration_mg[1] =
    c62c:	ed87 0a01 	vstr	s0, [r7, #4]
            lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration.i16bit[2]);
    c630:	f001 f9d6 	bl	d9e0 <lis2dh12_from_fs2_hr_to_mg>
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c634:	4b2c      	ldr	r3, [pc, #176]	; (c6e8 <main+0x1d8>)
    c636:	6838      	ldr	r0, [r7, #0]
            acceleration_mg[2] =
    c638:	ed87 0a02 	vstr	s0, [r7, #8]
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c63c:	681d      	ldr	r5, [r3, #0]
            acceleration_mg[2] =
    c63e:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
            am_util_stdio_printf("Acc [mg] %04.2f x, %04.2f y, %04.2f z, Temp [deg C] %04.2f, MIC0 [counts / 2^14] %d\r\n",
    c642:	f7ff fec1 	bl	c3c8 <__aeabi_f2d>
    c646:	4b26      	ldr	r3, [pc, #152]	; (c6e0 <main+0x1d0>)
    c648:	9506      	str	r5, [sp, #24]
    c64a:	4682      	mov	sl, r0
    c64c:	6818      	ldr	r0, [r3, #0]
    c64e:	468b      	mov	fp, r1
    c650:	f7ff feba 	bl	c3c8 <__aeabi_f2d>
    c654:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
    c658:	e9cd 0104 	strd	r0, r1, [sp, #16]
    c65c:	ee10 0a10 	vmov	r0, s0
    c660:	f7ff feb2 	bl	c3c8 <__aeabi_f2d>
    c664:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c668:	6878      	ldr	r0, [r7, #4]
    c66a:	f7ff fead 	bl	c3c8 <__aeabi_f2d>
    c66e:	4652      	mov	r2, sl
    c670:	e9cd 0100 	strd	r0, r1, [sp]
    c674:	465b      	mov	r3, fp
    c676:	481d      	ldr	r0, [pc, #116]	; (c6ec <main+0x1dc>)
    c678:	f000 ff42 	bl	d500 <am_util_stdio_printf>
    c67c:	e7aa      	b.n	c5d4 <main+0xc4>
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c67e:	4b1c      	ldr	r3, [pc, #112]	; (c6f0 <main+0x1e0>)
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c684:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c688:	2020      	movs	r0, #32
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_RED);
    c68a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    c68e:	601c      	str	r4, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_BLUE);
    c690:	6018      	str	r0, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_GREEN);
    c692:	6019      	str	r1, [r3, #0]
    am_hal_gpio_output_clear(AM_BSP_GPIO_LED_YELLOW);
    c694:	601a      	str	r2, [r3, #0]
    am_bsp_debug_printf_disable();
    c696:	f001 fb03 	bl	dca0 <am_bsp_debug_printf_disable>
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c69a:	4630      	mov	r0, r6
    c69c:	f003 f986 	bl	f9ac <am_hal_sysctrl_sleep>
}
    c6a0:	4628      	mov	r0, r5
    c6a2:	b00c      	add	sp, #48	; 0x30
    c6a4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    c6a8:	00010818 	.word	0x00010818
    c6ac:	10001314 	.word	0x10001314
    c6b0:	10001304 	.word	0x10001304
    c6b4:	0001098c 	.word	0x0001098c
    c6b8:	0001081c 	.word	0x0001081c
    c6bc:	40010094 	.word	0x40010094
    c6c0:	00010484 	.word	0x00010484
    c6c4:	000104a0 	.word	0x000104a0
    c6c8:	000104ac 	.word	0x000104ac
    c6cc:	000104b8 	.word	0x000104b8
    c6d0:	000104d0 	.word	0x000104d0
    c6d4:	000104fc 	.word	0x000104fc
    c6d8:	0001050c 	.word	0x0001050c
    c6dc:	10001300 	.word	0x10001300
    c6e0:	100012f4 	.word	0x100012f4
    c6e4:	100012f8 	.word	0x100012f8
    c6e8:	10001168 	.word	0x10001168
    c6ec:	00010530 	.word	0x00010530
    c6f0:	4001009c 	.word	0x4001009c

0000c6f4 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c6f4:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c6f6:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c6fa:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c6fc:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c700:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c704:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c708:	f000 f806 	bl	c718 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c70c:	bd01      	pop	{r0, pc}
    c70e:	bf00      	nop

0000c710 <getStackedReg>:
}

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c710:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c712:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c714:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c716:	4770      	bx	lr

0000c718 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c718:	b500      	push	{lr}
    c71a:	b093      	sub	sp, #76	; 0x4c
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c71c:	2300      	movs	r3, #0
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c71e:	4a2e      	ldr	r2, [pc, #184]	; (c7d8 <am_util_faultisr_collect_data+0xc0>)
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c720:	9310      	str	r3, [sp, #64]	; 0x40
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c722:	9301      	str	r3, [sp, #4]
    c724:	9300      	str	r3, [sp, #0]
    c726:	9302      	str	r3, [sp, #8]
    c728:	9303      	str	r3, [sp, #12]
    c72a:	9304      	str	r3, [sp, #16]
    c72c:	9305      	str	r3, [sp, #20]
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c72e:	6813      	ldr	r3, [r2, #0]
    c730:	9310      	str	r3, [sp, #64]	; 0x40
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c732:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c734:	b2db      	uxtb	r3, r3
    c736:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c73a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c73c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c740:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c746:	0c1b      	lsrs	r3, r3, #16
    c748:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c74c:	6913      	ldr	r3, [r2, #16]
    c74e:	930f      	str	r3, [sp, #60]	; 0x3c

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c750:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    c754:	0792      	lsls	r2, r2, #30
{
    c756:	4603      	mov	r3, r0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c758:	d437      	bmi.n	c7ca <am_util_faultisr_collect_data+0xb2>
    c75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c75e:	4619      	mov	r1, r3
    c760:	2000      	movs	r0, #0
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c762:	920e      	str	r2, [sp, #56]	; 0x38
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c764:	f7ff ffd4 	bl	c710 <getStackedReg>
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c768:	4619      	mov	r1, r3
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76a:	4602      	mov	r2, r0
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c76c:	2001      	movs	r0, #1
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c76e:	9206      	str	r2, [sp, #24]
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c770:	f7ff ffce 	bl	c710 <getStackedReg>
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c774:	4619      	mov	r1, r3
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c776:	4602      	mov	r2, r0
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c778:	2002      	movs	r0, #2
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c77a:	9207      	str	r2, [sp, #28]
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c77c:	f7ff ffc8 	bl	c710 <getStackedReg>
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c780:	4619      	mov	r1, r3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c782:	4602      	mov	r2, r0
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c784:	2003      	movs	r0, #3
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c786:	9208      	str	r2, [sp, #32]
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c788:	f7ff ffc2 	bl	c710 <getStackedReg>
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c78c:	4619      	mov	r1, r3
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c78e:	4602      	mov	r2, r0
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c790:	2004      	movs	r0, #4
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c792:	9209      	str	r2, [sp, #36]	; 0x24
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c794:	f7ff ffbc 	bl	c710 <getStackedReg>
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c798:	4619      	mov	r1, r3
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79a:	4602      	mov	r2, r0
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c79c:	2005      	movs	r0, #5
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c79e:	920a      	str	r2, [sp, #40]	; 0x28
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7a0:	f7ff ffb6 	bl	c710 <getStackedReg>
    c7a4:	4602      	mov	r2, r0
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7a6:	4619      	mov	r1, r3
    c7a8:	2006      	movs	r0, #6
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c7aa:	920b      	str	r2, [sp, #44]	; 0x2c
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7ac:	f7ff ffb0 	bl	c710 <getStackedReg>
    c7b0:	4602      	mov	r2, r0
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7b2:	4619      	mov	r1, r3
    c7b4:	2007      	movs	r0, #7
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c7b6:	920c      	str	r2, [sp, #48]	; 0x30
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7b8:	f7ff ffaa 	bl	c710 <getStackedReg>

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7bc:	4669      	mov	r1, sp
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7be:	4603      	mov	r3, r0
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7c0:	2002      	movs	r0, #2
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c7c2:	930d      	str	r3, [sp, #52]	; 0x34
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c7c4:	f002 ff82 	bl	f6cc <am_hal_mcuctrl_info_get>
    c7c8:	e7fe      	b.n	c7c8 <am_util_faultisr_collect_data+0xb0>
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c7ca:	4601      	mov	r1, r0
    c7cc:	2006      	movs	r0, #6
    c7ce:	f7ff ff9f 	bl	c710 <getStackedReg>
    c7d2:	4602      	mov	r2, r0
    c7d4:	e7c3      	b.n	c75e <am_util_faultisr_collect_data+0x46>
    c7d6:	bf00      	nop
    c7d8:	e000ed28 	.word	0xe000ed28

0000c7dc <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7e0:	b095      	sub	sp, #84	; 0x54
    c7e2:	ae0d      	add	r6, sp, #52	; 0x34
    c7e4:	4604      	mov	r4, r0
        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);

        tbuf[ix++] = uMod + '0';
    c7e6:	2001      	movs	r0, #1
{
    c7e8:	460d      	mov	r5, r1
    c7ea:	4696      	mov	lr, r2
    c7ec:	4637      	mov	r7, r6
    c7ee:	4684      	mov	ip, r0
    c7f0:	e008      	b.n	c804 <uint64_to_str+0x28>
        tbuf[ix++] = uMod + '0';
    c7f2:	703a      	strb	r2, [r7, #0]
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7f4:	461c      	mov	r4, r3
    c7f6:	2500      	movs	r5, #0
        ui64Val = u64Tmp;
    } while ( ui64Val );
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	f000 8087 	beq.w	c90c <uint64_to_str+0x130>
    c7fe:	f10c 0c01 	add.w	ip, ip, #1
    c802:	3701      	adds	r7, #1
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c804:	08a3      	lsrs	r3, r4, #2
    c806:	eb03 0354 	add.w	r3, r3, r4, lsr #1
        q32 += (q32 >> 4);
    c80a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
    c80e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
    c812:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
    c816:	08da      	lsrs	r2, r3, #3
        r32 = ui32Val - q32*10;
    c818:	eb02 0182 	add.w	r1, r2, r2, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c81c:	1da3      	adds	r3, r4, #6
    c81e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    c822:	eb02 1313 	add.w	r3, r2, r3, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
    c826:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    if ( ui64Val >> 32 )
    c82a:	46aa      	mov	sl, r5
    c82c:	f04f 0b00 	mov.w	fp, #0
        uMod = ui64Val - (u64Tmp * 10);
    c830:	eba4 0241 	sub.w	r2, r4, r1, lsl #1
    if ( ui64Val >> 32 )
    c834:	ea5a 010b 	orrs.w	r1, sl, fp
        tbuf[ix++] = uMod + '0';
    c838:	f102 0230 	add.w	r2, r2, #48	; 0x30
    if ( ui64Val >> 32 )
    c83c:	d0d9      	beq.n	c7f2 <uint64_to_str+0x16>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c83e:	08a3      	lsrs	r3, r4, #2
    c840:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
    c844:	9306      	str	r3, [sp, #24]
    c846:	08ab      	lsrs	r3, r5, #2
    c848:	9307      	str	r3, [sp, #28]
    c84a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    c84e:	086b      	lsrs	r3, r5, #1
    c850:	ea4f 0234 	mov.w	r2, r4, rrx
    c854:	1880      	adds	r0, r0, r2
    c856:	4159      	adcs	r1, r3
    c858:	460b      	mov	r3, r1
        q64 += (q64 >> 4);
    c85a:	0901      	lsrs	r1, r0, #4
    c85c:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    c860:	9100      	str	r1, [sp, #0]
    c862:	0919      	lsrs	r1, r3, #4
    c864:	9101      	str	r1, [sp, #4]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c866:	4602      	mov	r2, r0
        q64 += (q64 >> 4);
    c868:	e9dd 0100 	ldrd	r0, r1, [sp]
    c86c:	1880      	adds	r0, r0, r2
    c86e:	4159      	adcs	r1, r3
    c870:	460b      	mov	r3, r1
        q64 += (q64 >> 8);
    c872:	0a01      	lsrs	r1, r0, #8
    c874:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
    c878:	9102      	str	r1, [sp, #8]
    c87a:	0a19      	lsrs	r1, r3, #8
    c87c:	9103      	str	r1, [sp, #12]
        q64 += (q64 >> 4);
    c87e:	4602      	mov	r2, r0
        q64 += (q64 >> 8);
    c880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c884:	1880      	adds	r0, r0, r2
    c886:	4159      	adcs	r1, r3
    c888:	460b      	mov	r3, r1
        q64 += (q64 >> 16);
    c88a:	0c01      	lsrs	r1, r0, #16
    c88c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c890:	9104      	str	r1, [sp, #16]
    c892:	0c19      	lsrs	r1, r3, #16
    c894:	9105      	str	r1, [sp, #20]
        q64 += (q64 >> 8);
    c896:	4602      	mov	r2, r0
        q64 += (q64 >> 16);
    c898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    c89c:	1880      	adds	r0, r0, r2
    c89e:	4159      	adcs	r1, r3
        q64 += (q64 >> 32);
    c8a0:	910a      	str	r1, [sp, #40]	; 0x28
    c8a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        q64 += (q64 >> 16);
    c8a6:	4602      	mov	r2, r0
    c8a8:	460b      	mov	r3, r1
        q64 += (q64 >> 32);
    c8aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    c8ae:	1880      	adds	r0, r0, r2
    c8b0:	4159      	adcs	r1, r3
        q64 >>= 3;
    c8b2:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    c8b6:	ea48 7841 	orr.w	r8, r8, r1, lsl #29
    c8ba:	ea4f 09d1 	mov.w	r9, r1, lsr #3
        r64 = ui64Val - q64*10;
    c8be:	ea4f 0189 	mov.w	r1, r9, lsl #2
    c8c2:	ea4f 0288 	mov.w	r2, r8, lsl #2
    c8c6:	ea41 7398 	orr.w	r3, r1, r8, lsr #30
    c8ca:	eb12 0208 	adds.w	r2, r2, r8
    c8ce:	eb43 0309 	adc.w	r3, r3, r9
    c8d2:	1892      	adds	r2, r2, r2
    c8d4:	415b      	adcs	r3, r3
        return q64 + ((r64 + 6) >> 4);
    c8d6:	1da0      	adds	r0, r4, #6
    c8d8:	f145 0100 	adc.w	r1, r5, #0
    c8dc:	1a82      	subs	r2, r0, r2
    c8de:	eb61 0303 	sbc.w	r3, r1, r3
    c8e2:	0911      	lsrs	r1, r2, #4
    c8e4:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    c8e8:	091b      	lsrs	r3, r3, #4
    c8ea:	9108      	str	r1, [sp, #32]
    c8ec:	9309      	str	r3, [sp, #36]	; 0x24
    c8ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    c8f2:	eb12 0208 	adds.w	r2, r2, r8
        uMod = ui64Val - (u64Tmp * 10);
    c8f6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    c8fa:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
        return q64 + ((r64 + 6) >> 4);
    c8fe:	eb43 0309 	adc.w	r3, r3, r9
        tbuf[ix++] = uMod + '0';
    c902:	3130      	adds	r1, #48	; 0x30
    c904:	7039      	strb	r1, [r7, #0]
    c906:	4614      	mov	r4, r2
    c908:	461d      	mov	r5, r3
    c90a:	e778      	b.n	c7fe <uint64_to_str+0x22>
    c90c:	4660      	mov	r0, ip
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c90e:	f1be 0f00 	cmp.w	lr, #0
    c912:	d00b      	beq.n	c92c <uint64_to_str+0x150>
    c914:	1833      	adds	r3, r6, r0
    c916:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
    c91a:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    c91e:	f802 1f01 	strb.w	r1, [r2, #1]!
        while ( ix-- )
    c922:	429e      	cmp	r6, r3
    c924:	d1f9      	bne.n	c91a <uint64_to_str+0x13e>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c926:	2300      	movs	r3, #0
    c928:	f80e 3000 	strb.w	r3, [lr, r0]
    }

    return iNumDig;
}
    c92c:	b015      	add	sp, #84	; 0x54
    c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c932:	bf00      	nop

0000c934 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
    c934:	4b01      	ldr	r3, [pc, #4]	; (c93c <am_util_stdio_printf_init+0x8>)
    c936:	6018      	str	r0, [r3, #0]
    c938:	4770      	bx	lr
    c93a:	bf00      	nop
    c93c:	10001310 	.word	0x10001310

0000c940 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c944:	b0b1      	sub	sp, #196	; 0xc4
    c946:	4683      	mov	fp, r0
    c948:	9211      	str	r2, [sp, #68]	; 0x44
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    c94a:	f04f 0900 	mov.w	r9, #0
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
    c94e:	780b      	ldrb	r3, [r1, #0]
    c950:	b183      	cbz	r3, c974 <am_util_stdio_vsprintf+0x34>
    {
        iPrecision = 6;             // printf() default precision for %f is 6

        if ( *pcFmt != '%' )
    c952:	2b25      	cmp	r3, #37	; 0x25
    c954:	d017      	beq.n	c986 <am_util_stdio_vsprintf+0x46>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    c956:	f1bb 0f00 	cmp.w	fp, #0
    c95a:	d005      	beq.n	c968 <am_util_stdio_vsprintf+0x28>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c95c:	2b0a      	cmp	r3, #10
    c95e:	d037      	beq.n	c9d0 <am_util_stdio_vsprintf+0x90>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
    c960:	f88b 3000 	strb.w	r3, [fp]
    c964:	f10b 0b01 	add.w	fp, fp, #1
            }

            ++pcFmt;
    c968:	3101      	adds	r1, #1
    while ( *pcFmt != 0x0 )
    c96a:	780b      	ldrb	r3, [r1, #0]
            ++ui32CharCnt;
    c96c:	f109 0901 	add.w	r9, r9, #1
    while ( *pcFmt != 0x0 )
    c970:	2b00      	cmp	r3, #0
    c972:	d1ee      	bne.n	c952 <am_util_stdio_vsprintf+0x12>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    c974:	f1bb 0f00 	cmp.w	fp, #0
    c978:	d001      	beq.n	c97e <am_util_stdio_vsprintf+0x3e>
    {
        *pcBuf = 0x0;
    c97a:	f88b 3000 	strb.w	r3, [fp]
    }

    return (ui32CharCnt);
}
    c97e:	4648      	mov	r0, r9
    c980:	b031      	add	sp, #196	; 0xc4
    c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( *pcFmt == '0' )
    c986:	784a      	ldrb	r2, [r1, #1]
    c988:	2a30      	cmp	r2, #48	; 0x30
    c98a:	d039      	beq.n	ca00 <am_util_stdio_vsprintf+0xc0>
        ++pcFmt;
    c98c:	1c4c      	adds	r4, r1, #1
        ui8PadChar = ' ';
    c98e:	2620      	movs	r6, #32
    if ( *pcStr == '-')
    c990:	2a2d      	cmp	r2, #45	; 0x2d
    c992:	d02a      	beq.n	c9ea <am_util_stdio_vsprintf+0xaa>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c994:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c998:	2b09      	cmp	r3, #9
    c99a:	d835      	bhi.n	ca08 <am_util_stdio_vsprintf+0xc8>
    uint32_t ui32Val = 0, uCnt = 0;
    c99c:	2100      	movs	r1, #0
    bool bNeg = false;
    c99e:	468e      	mov	lr, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9a0:	4620      	mov	r0, r4
        bNeg = true;
    c9a2:	2300      	movs	r3, #0
        ui32Val *= 10;
    c9a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    c9a8:	eb02 0543 	add.w	r5, r2, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    c9b0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
    c9b4:	2f09      	cmp	r7, #9
        ++uCnt;
    c9b6:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    c9ba:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9be:	d9f1      	bls.n	c9a4 <am_util_stdio_vsprintf+0x64>
    c9c0:	440c      	add	r4, r1
    return bNeg ? -ui32Val : ui32Val;
    c9c2:	f1be 0f00 	cmp.w	lr, #0
    c9c6:	f040 858d 	bne.w	d4e4 <am_util_stdio_vsprintf+0xba4>
    c9ca:	461d      	mov	r5, r3
    c9cc:	7822      	ldrb	r2, [r4, #0]
    c9ce:	e01d      	b.n	ca0c <am_util_stdio_vsprintf+0xcc>
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    c9d0:	4a89      	ldr	r2, [pc, #548]	; (cbf8 <am_util_stdio_vsprintf+0x2b8>)
    c9d2:	7812      	ldrb	r2, [r2, #0]
    c9d4:	2a00      	cmp	r2, #0
    c9d6:	d0c3      	beq.n	c960 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
    c9d8:	230d      	movs	r3, #13
    c9da:	f88b 3000 	strb.w	r3, [fp]
    c9de:	780b      	ldrb	r3, [r1, #0]
                    ++ui32CharCnt;
    c9e0:	f109 0901 	add.w	r9, r9, #1
                    *pcBuf++ = '\r';
    c9e4:	f10b 0b01 	add.w	fp, fp, #1
    c9e8:	e7ba      	b.n	c960 <am_util_stdio_vsprintf+0x20>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9ea:	7862      	ldrb	r2, [r4, #1]
    c9ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    c9f0:	2b09      	cmp	r3, #9
        pcStr++;
    c9f2:	f104 0001 	add.w	r0, r4, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c9f6:	f200 8463 	bhi.w	d2c0 <am_util_stdio_vsprintf+0x980>
        uCnt++;
    c9fa:	2101      	movs	r1, #1
        bNeg = true;
    c9fc:	468e      	mov	lr, r1
    c9fe:	e7d0      	b.n	c9a2 <am_util_stdio_vsprintf+0x62>
    ca00:	788a      	ldrb	r2, [r1, #2]
            ++pcFmt;
    ca02:	1c8c      	adds	r4, r1, #2
            ui8PadChar = '0';
    ca04:	2630      	movs	r6, #48	; 0x30
    ca06:	e7c3      	b.n	c990 <am_util_stdio_vsprintf+0x50>
    ca08:	7822      	ldrb	r2, [r4, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    ca0a:	2500      	movs	r5, #0
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    ca0c:	2a73      	cmp	r2, #115	; 0x73
    ca0e:	f000 82df 	beq.w	cfd0 <am_util_stdio_vsprintf+0x690>
    ca12:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
        if (*pcFmt == '.')
    ca16:	2a2e      	cmp	r2, #46	; 0x2e
    ca18:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
    ca1c:	f000 8289 	beq.w	cf32 <am_util_stdio_vsprintf+0x5f2>
        iPrecision = 6;             // printf() default precision for %f is 6
    ca20:	f04f 0806 	mov.w	r8, #6
        if ( *pcFmt == 'l' )
    ca24:	2a6c      	cmp	r2, #108	; 0x6c
    ca26:	f000 827e 	beq.w	cf26 <am_util_stdio_vsprintf+0x5e6>
        switch ( *pcFmt )
    ca2a:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
    ca2e:	2b32      	cmp	r3, #50	; 0x32
    ca30:	f200 826f 	bhi.w	cf12 <am_util_stdio_vsprintf+0x5d2>
    ca34:	e8df f013 	tbh	[pc, r3, lsl #1]
    ca38:	026d0088 	.word	0x026d0088
    ca3c:	026d026d 	.word	0x026d026d
    ca40:	026d026d 	.word	0x026d026d
    ca44:	026d026d 	.word	0x026d026d
    ca48:	026d026d 	.word	0x026d026d
    ca4c:	026d026d 	.word	0x026d026d
    ca50:	026d026d 	.word	0x026d026d
    ca54:	026d026d 	.word	0x026d026d
    ca58:	026d026d 	.word	0x026d026d
    ca5c:	026d0033 	.word	0x026d0033
    ca60:	026d026d 	.word	0x026d026d
    ca64:	026d026d 	.word	0x026d026d
    ca68:	026d026d 	.word	0x026d026d
    ca6c:	026d026d 	.word	0x026d026d
    ca70:	00a8026d 	.word	0x00a8026d
    ca74:	026d00b7 	.word	0x026d00b7
    ca78:	026d0088 	.word	0x026d0088
    ca7c:	00b7026d 	.word	0x00b7026d
    ca80:	026d026d 	.word	0x026d026d
    ca84:	026d026d 	.word	0x026d026d
    ca88:	026d026d 	.word	0x026d026d
    ca8c:	026d026d 	.word	0x026d026d
    ca90:	02cb026d 	.word	0x02cb026d
    ca94:	01a4026d 	.word	0x01a4026d
    ca98:	026d026d 	.word	0x026d026d
    ca9c:	01a1      	.short	0x01a1
        bLower = bLongLong = false;
    ca9e:	f04f 0800 	mov.w	r8, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    caa2:	9911      	ldr	r1, [sp, #68]	; 0x44
    caa4:	460b      	mov	r3, r1
                                      va_arg(pArgs, uint32_t);
    caa6:	3304      	adds	r3, #4
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    caa8:	680a      	ldr	r2, [r1, #0]
                                      va_arg(pArgs, uint32_t);
    caaa:	9311      	str	r3, [sp, #68]	; 0x44
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    caac:	2300      	movs	r3, #0
                if ( iWidth )
    caae:	b365      	cbz	r5, cb0a <am_util_stdio_vsprintf+0x1ca>
    int iDigits = ui64Val ? 0 : 1;
    cab0:	ea52 0103 	orrs.w	r1, r2, r3
    cab4:	bf0c      	ite	eq
    cab6:	f04f 0e01 	moveq.w	lr, #1
    caba:	f04f 0e00 	movne.w	lr, #0
    while ( ui64Val )
    cabe:	ea52 0103 	orrs.w	r1, r2, r3
    cac2:	d00d      	beq.n	cae0 <am_util_stdio_vsprintf+0x1a0>
    cac4:	4610      	mov	r0, r2
    cac6:	4619      	mov	r1, r3
        ui64Val >>= 4;
    cac8:	0905      	lsrs	r5, r0, #4
    caca:	ea45 7501 	orr.w	r5, r5, r1, lsl #28
    cace:	ea4f 1c11 	mov.w	ip, r1, lsr #4
    cad2:	4628      	mov	r0, r5
    cad4:	4661      	mov	r1, ip
    while ( ui64Val )
    cad6:	ea50 0501 	orrs.w	r5, r0, r1
        ++iDigits;
    cada:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    cade:	d1f3      	bne.n	cac8 <am_util_stdio_vsprintf+0x188>
                    iWidth -= ndigits_in_hex(ui64Val);
    cae0:	eba7 070e 	sub.w	r7, r7, lr
    if ( i32NumChars <= 0 )
    cae4:	2f00      	cmp	r7, #0
    cae6:	f340 838e 	ble.w	d206 <am_util_stdio_vsprintf+0x8c6>
    while ( i32NumChars-- )
    caea:	1e79      	subs	r1, r7, #1
        if ( pcBuf )
    caec:	f1bb 0f00 	cmp.w	fp, #0
    caf0:	f000 838a 	beq.w	d208 <am_util_stdio_vsprintf+0x8c8>
    caf4:	4658      	mov	r0, fp
            *pcBuf++ = cPadChar;
    caf6:	f800 6b01 	strb.w	r6, [r0], #1
    while ( i32NumChars-- )
    cafa:	3901      	subs	r1, #1
    cafc:	1c4f      	adds	r7, r1, #1
    cafe:	eba0 050b 	sub.w	r5, r0, fp
    cb02:	d1f8      	bne.n	caf6 <am_util_stdio_vsprintf+0x1b6>
    cb04:	462f      	mov	r7, r5
                    pcBuf += pcBuf ? iWidth : 0;
    cb06:	44ab      	add	fp, r5
                    ui32CharCnt += iWidth;
    cb08:	44b9      	add	r9, r7
    if ( ui64Val == 0 )
    cb0a:	ea52 0103 	orrs.w	r1, r2, r3
    cb0e:	f040 8234 	bne.w	cf7a <am_util_stdio_vsprintf+0x63a>
        tbuf[ix++] = '0';   // Print a '0'
    cb12:	f04f 0330 	mov.w	r3, #48	; 0x30
    cb16:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    if (pcBuf)
    cb1a:	2501      	movs	r5, #1
    cb1c:	f1bb 0f00 	cmp.w	fp, #0
    cb20:	f000 8251 	beq.w	cfc6 <am_util_stdio_vsprintf+0x686>
    cb24:	4629      	mov	r1, r5
        while (ix--)
    cb26:	2600      	movs	r6, #0
    cb28:	af2b      	add	r7, sp, #172	; 0xac
    cb2a:	187b      	adds	r3, r7, r1
    cb2c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
            *pcBuf++ = tbuf[ix];
    cb30:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    cb34:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
    cb38:	42bb      	cmp	r3, r7
    cb3a:	d1f9      	bne.n	cb30 <am_util_stdio_vsprintf+0x1f0>
        *pcBuf = 0;
    cb3c:	445e      	add	r6, fp
    cb3e:	2300      	movs	r3, #0
                    pcBuf += iVal;
    cb40:	44ab      	add	fp, r5
        *pcBuf = 0;
    cb42:	7073      	strb	r3, [r6, #1]
                ui32CharCnt += iVal;
    cb44:	44a9      	add	r9, r5
                break;
    cb46:	e01d      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
                if ( pcBuf )
    cb48:	f1bb 0f00 	cmp.w	fp, #0
    cb4c:	d01a      	beq.n	cb84 <am_util_stdio_vsprintf+0x244>
                    float fValue = va_arg(pArgs, double);
    cb4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb50:	3307      	adds	r3, #7
    cb52:	f023 0307 	bic.w	r3, r3, #7
    cb56:	e9d3 0100 	ldrd	r0, r1, [r3]
    cb5a:	3308      	adds	r3, #8
    cb5c:	9311      	str	r3, [sp, #68]	; 0x44
    cb5e:	f7ff fc87 	bl	c470 <__aeabi_d2f>
    cb62:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
    cb66:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
    cb6a:	2314      	movs	r3, #20
    if (fValue == 0.0f)
    cb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
    cb70:	f8cb 3000 	str.w	r3, [fp]
    if (fValue == 0.0f)
    cb74:	f040 8367 	bne.w	d246 <am_util_stdio_vsprintf+0x906>
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb78:	4b20      	ldr	r3, [pc, #128]	; (cbfc <am_util_stdio_vsprintf+0x2bc>)
    cb7a:	f8cb 3000 	str.w	r3, [fp]
    cb7e:	2103      	movs	r1, #3
                    ui32CharCnt += iVal;
    cb80:	4489      	add	r9, r1
                    pcBuf += iVal;
    cb82:	448b      	add	fp, r1
        ++pcFmt;
    cb84:	1c61      	adds	r1, r4, #1
    cb86:	e6e2      	b.n	c94e <am_util_stdio_vsprintf+0xe>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cb8a:	4613      	mov	r3, r2
    cb8c:	3304      	adds	r3, #4
    cb8e:	7812      	ldrb	r2, [r2, #0]
                if ( pcBuf )
    cb90:	f1bb 0f00 	cmp.w	fp, #0
    cb94:	d003      	beq.n	cb9e <am_util_stdio_vsprintf+0x25e>
                    *pcBuf++ = ui8CharSpecifier;
    cb96:	f88b 2000 	strb.w	r2, [fp]
    cb9a:	f10b 0b01 	add.w	fp, fp, #1
                ++ui32CharCnt;
    cb9e:	f109 0901 	add.w	r9, r9, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cba2:	9311      	str	r3, [sp, #68]	; 0x44
                break;
    cba4:	e7ee      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cba6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cba8:	4613      	mov	r3, r2
    cbaa:	6810      	ldr	r0, [r2, #0]
                                     va_arg(pArgs, int32_t);
    cbac:	3304      	adds	r3, #4
    cbae:	9311      	str	r3, [sp, #68]	; 0x44
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    cbb0:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
    cbb2:	2800      	cmp	r0, #0
    cbb4:	f171 0300 	sbcs.w	r3, r1, #0
    cbb8:	f2c0 8328 	blt.w	d20c <am_util_stdio_vsprintf+0x8cc>
                    ui64Val = i64Val;
    cbbc:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
                if ( iWidth )
    cbc0:	2d00      	cmp	r5, #0
    cbc2:	f000 80ce 	beq.w	cd62 <am_util_stdio_vsprintf+0x422>
    int iNDigits = ui64Val ? 0 : 1;
    cbc6:	4603      	mov	r3, r0
    cbc8:	430b      	orrs	r3, r1
    cbca:	bf0c      	ite	eq
    cbcc:	2501      	moveq	r5, #1
    cbce:	2500      	movne	r5, #0
    return ndigits_in_u64((uint64_t) i64Val);
    cbd0:	460b      	mov	r3, r1
    while ( ui64Val )
    cbd2:	4301      	orrs	r1, r0
    return ndigits_in_u64((uint64_t) i64Val);
    cbd4:	4602      	mov	r2, r0
                    bNeg = false;
    cbd6:	bf18      	it	ne
    cbd8:	f04f 0a00 	movne.w	sl, #0
    while ( ui64Val )
    cbdc:	f000 842d 	beq.w	d43a <am_util_stdio_vsprintf+0xafa>
                    bNeg = false;
    cbe0:	9420      	str	r4, [sp, #128]	; 0x80
    cbe2:	9621      	str	r6, [sp, #132]	; 0x84
    cbe4:	9722      	str	r7, [sp, #136]	; 0x88
    cbe6:	46ae      	mov	lr, r5
    cbe8:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
    cbec:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
    cbf0:	f8cd b094 	str.w	fp, [sp, #148]	; 0x94
    cbf4:	e00b      	b.n	cc0e <am_util_stdio_vsprintf+0x2ce>
    cbf6:	bf00      	nop
    cbf8:	10001064 	.word	0x10001064
    cbfc:	00302e30 	.word	0x00302e30
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cc00:	4652      	mov	r2, sl
    cc02:	2300      	movs	r3, #0
    while ( ui64Val )
    cc04:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cc08:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    cc0c:	d075      	beq.n	ccfa <am_util_stdio_vsprintf+0x3ba>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc0e:	0891      	lsrs	r1, r2, #2
    cc10:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    cc14:	910a      	str	r1, [sp, #40]	; 0x28
    cc16:	0899      	lsrs	r1, r3, #2
    cc18:	910b      	str	r1, [sp, #44]	; 0x2c
    cc1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    cc1e:	0859      	lsrs	r1, r3, #1
    cc20:	ea4f 0032 	mov.w	r0, r2, rrx
    cc24:	1836      	adds	r6, r6, r0
    cc26:	414f      	adcs	r7, r1
    cc28:	4630      	mov	r0, r6
        q64 += (q64 >> 4);
    cc2a:	0936      	lsrs	r6, r6, #4
    cc2c:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    cc30:	9604      	str	r6, [sp, #16]
    cc32:	093e      	lsrs	r6, r7, #4
    cc34:	9605      	str	r6, [sp, #20]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cc36:	4639      	mov	r1, r7
        q64 += (q64 >> 4);
    cc38:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    cc3c:	1836      	adds	r6, r6, r0
    cc3e:	414f      	adcs	r7, r1
    cc40:	4630      	mov	r0, r6
        q64 += (q64 >> 8);
    cc42:	0a36      	lsrs	r6, r6, #8
    cc44:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    cc48:	9606      	str	r6, [sp, #24]
    cc4a:	0a3e      	lsrs	r6, r7, #8
    cc4c:	9607      	str	r6, [sp, #28]
        q64 += (q64 >> 4);
    cc4e:	4639      	mov	r1, r7
        q64 += (q64 >> 8);
    cc50:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    cc54:	1836      	adds	r6, r6, r0
    cc56:	414f      	adcs	r7, r1
        q64 += (q64 >> 16);
    cc58:	ea4f 4816 	mov.w	r8, r6, lsr #16
    cc5c:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
    cc60:	eb16 0008 	adds.w	r0, r6, r8
    cc64:	ea4f 4917 	mov.w	r9, r7, lsr #16
    cc68:	eb47 0109 	adc.w	r1, r7, r9
        q64 += (q64 >> 32);
    cc6c:	2600      	movs	r6, #0
    cc6e:	910e      	str	r1, [sp, #56]	; 0x38
    cc70:	960f      	str	r6, [sp, #60]	; 0x3c
    cc72:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cc76:	ea4f 0c92 	mov.w	ip, r2, lsr #2
        q64 += (q64 >> 32);
    cc7a:	1836      	adds	r6, r6, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    cc7c:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
        q64 >>= 3;
    cc80:	ea4f 04d6 	mov.w	r4, r6, lsr #3
        q32 += (q32 >> 4);
    cc84:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
    if ( ui64Val >> 32 )
    cc88:	f04f 0600 	mov.w	r6, #0
        q64 += (q64 >> 32);
    cc8c:	414f      	adcs	r7, r1
    if ( ui64Val >> 32 )
    cc8e:	9314      	str	r3, [sp, #80]	; 0x50
        q32 += (q32 >> 8);
    cc90:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    if ( ui64Val >> 32 )
    cc94:	9615      	str	r6, [sp, #84]	; 0x54
        q64 >>= 3;
    cc96:	ea44 7447 	orr.w	r4, r4, r7, lsl #29
    cc9a:	08fd      	lsrs	r5, r7, #3
        q32 += (q32 >> 16);
    cc9c:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
    cca0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
        r64 = ui64Val - q64*10;
    cca4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
        q32 >>= 3;
    cca8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccac:	f102 0a06 	add.w	sl, r2, #6
        r64 = ui64Val - q64*10;
    ccb0:	ea4b 7194 	orr.w	r1, fp, r4, lsr #30
        r32 = ui32Val - q32*10;
    ccb4:	eb0c 0b8c 	add.w	fp, ip, ip, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccb8:	ebaa 0a4b 	sub.w	sl, sl, fp, lsl #1
    ccbc:	433e      	orrs	r6, r7
        r64 = ui64Val - q64*10;
    ccbe:	ea4f 0084 	mov.w	r0, r4, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ccc2:	eb0c 1a1a 	add.w	sl, ip, sl, lsr #4
    ccc6:	d09b      	beq.n	cc00 <am_util_stdio_vsprintf+0x2c0>
        r64 = ui64Val - q64*10;
    ccc8:	1900      	adds	r0, r0, r4
    ccca:	4169      	adcs	r1, r5
    cccc:	1800      	adds	r0, r0, r0
    ccce:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    ccd0:	3206      	adds	r2, #6
    ccd2:	f143 0300 	adc.w	r3, r3, #0
    ccd6:	1a12      	subs	r2, r2, r0
    ccd8:	eb63 0301 	sbc.w	r3, r3, r1
    ccdc:	0911      	lsrs	r1, r2, #4
    ccde:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    cce2:	091b      	lsrs	r3, r3, #4
    cce4:	9118      	str	r1, [sp, #96]	; 0x60
    cce6:	9319      	str	r3, [sp, #100]	; 0x64
    cce8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
    ccec:	1912      	adds	r2, r2, r4
    ccee:	416b      	adcs	r3, r5
    while ( ui64Val )
    ccf0:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    ccf4:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    ccf8:	d189      	bne.n	cc0e <am_util_stdio_vsprintf+0x2ce>
    ccfa:	9f22      	ldr	r7, [sp, #136]	; 0x88
    ccfc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
    cd00:	9e21      	ldr	r6, [sp, #132]	; 0x84
    cd02:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
    cd06:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
    cd0a:	4675      	mov	r5, lr
    cd0c:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
    cd10:	9c20      	ldr	r4, [sp, #128]	; 0x80
    cd12:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
                    iWidth -= ndigits_in_i64(ui64Val);
    cd16:	1b7d      	subs	r5, r7, r5
                    if ( bNeg )
    cd18:	f1ba 0f00 	cmp.w	sl, #0
    cd1c:	d007      	beq.n	cd2e <am_util_stdio_vsprintf+0x3ee>
                        if ( ui8PadChar == '0' )
    cd1e:	2e30      	cmp	r6, #48	; 0x30
                        --iWidth;
    cd20:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
                        if ( ui8PadChar == '0' )
    cd24:	f000 836e 	beq.w	d404 <am_util_stdio_vsprintf+0xac4>
                        --iWidth;
    cd28:	461d      	mov	r5, r3
    cd2a:	f04f 0a01 	mov.w	sl, #1
    if ( i32NumChars <= 0 )
    cd2e:	2d00      	cmp	r5, #0
    cd30:	f340 837e 	ble.w	d430 <am_util_stdio_vsprintf+0xaf0>
    while ( i32NumChars-- )
    cd34:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    cd36:	f1bb 0f00 	cmp.w	fp, #0
    cd3a:	f000 8252 	beq.w	d1e2 <am_util_stdio_vsprintf+0x8a2>
    cd3e:	1eaa      	subs	r2, r5, #2
    cd40:	465b      	mov	r3, fp
    cd42:	e000      	b.n	cd46 <am_util_stdio_vsprintf+0x406>
    cd44:	3a01      	subs	r2, #1
            *pcBuf++ = cPadChar;
    cd46:	f803 6b01 	strb.w	r6, [r3], #1
    while ( i32NumChars-- )
    cd4a:	1c50      	adds	r0, r2, #1
    cd4c:	eba3 010b 	sub.w	r1, r3, fp
    cd50:	d1f8      	bne.n	cd44 <am_util_stdio_vsprintf+0x404>
    cd52:	448b      	add	fp, r1
                    ui32CharCnt += iWidth;
    cd54:	4489      	add	r9, r1
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    cd56:	f1ba 0f00 	cmp.w	sl, #0
    cd5a:	d002      	beq.n	cd62 <am_util_stdio_vsprintf+0x422>
    cd5c:	2e20      	cmp	r6, #32
    cd5e:	f000 831b 	beq.w	d398 <am_util_stdio_vsprintf+0xa58>
                iVal = uint64_to_str(ui64Val, pcBuf);
    cd62:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cd66:	465a      	mov	r2, fp
    cd68:	f7ff fd38 	bl	c7dc <uint64_to_str>
                if ( pcBuf )
    cd6c:	f1bb 0f00 	cmp.w	fp, #0
    cd70:	f000 8245 	beq.w	d1fe <am_util_stdio_vsprintf+0x8be>
                    pcBuf += iVal;
    cd74:	4483      	add	fp, r0
                ui32CharCnt += iVal;
    cd76:	4481      	add	r9, r0
                break;
    cd78:	e704      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    cd7a:	f04f 0801 	mov.w	r8, #1
    cd7e:	e690      	b.n	caa2 <am_util_stdio_vsprintf+0x162>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd80:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cd82:	6813      	ldr	r3, [r2, #0]
                                      va_arg(pArgs, uint32_t);
    cd84:	3204      	adds	r2, #4
    cd86:	9211      	str	r2, [sp, #68]	; 0x44
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cd88:	4619      	mov	r1, r3
    cd8a:	2200      	movs	r2, #0
    cd8c:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
                if ( iWidth )
    cd90:	2d00      	cmp	r5, #0
    cd92:	f000 80b3 	beq.w	cefc <am_util_stdio_vsprintf+0x5bc>
    int iNDigits = ui64Val ? 0 : 1;
    cd96:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cd9a:	4603      	mov	r3, r0
    cd9c:	430b      	orrs	r3, r1
    while ( ui64Val )
    cd9e:	4602      	mov	r2, r0
    cda0:	460b      	mov	r3, r1
    int iNDigits = ui64Val ? 0 : 1;
    cda2:	bf0c      	ite	eq
    cda4:	2501      	moveq	r5, #1
    cda6:	2500      	movne	r5, #0
    while ( ui64Val )
    cda8:	ea52 0103 	orrs.w	r1, r2, r3
    cdac:	f000 8092 	beq.w	ced4 <am_util_stdio_vsprintf+0x594>
    cdb0:	9420      	str	r4, [sp, #128]	; 0x80
    cdb2:	9621      	str	r6, [sp, #132]	; 0x84
    cdb4:	9722      	str	r7, [sp, #136]	; 0x88
    cdb6:	46ae      	mov	lr, r5
    cdb8:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    cdbc:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
    cdc0:	e006      	b.n	cdd0 <am_util_stdio_vsprintf+0x490>
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    cdc2:	4652      	mov	r2, sl
    cdc4:	2300      	movs	r3, #0
    while ( ui64Val )
    cdc6:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    cdca:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    cdce:	d075      	beq.n	cebc <am_util_stdio_vsprintf+0x57c>
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cdd0:	0891      	lsrs	r1, r2, #2
    cdd2:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
    cdd6:	9108      	str	r1, [sp, #32]
    cdd8:	0899      	lsrs	r1, r3, #2
    cdda:	9109      	str	r1, [sp, #36]	; 0x24
    cddc:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    cde0:	0859      	lsrs	r1, r3, #1
    cde2:	ea4f 0032 	mov.w	r0, r2, rrx
    cde6:	1836      	adds	r6, r6, r0
    cde8:	414f      	adcs	r7, r1
    cdea:	4630      	mov	r0, r6
        q64 += (q64 >> 4);
    cdec:	0936      	lsrs	r6, r6, #4
    cdee:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
    cdf2:	9600      	str	r6, [sp, #0]
    cdf4:	093e      	lsrs	r6, r7, #4
    cdf6:	9601      	str	r6, [sp, #4]
        q64 = (ui64Val>>1) + (ui64Val>>2);
    cdf8:	4639      	mov	r1, r7
        q64 += (q64 >> 4);
    cdfa:	e9dd 6700 	ldrd	r6, r7, [sp]
    cdfe:	1836      	adds	r6, r6, r0
    ce00:	414f      	adcs	r7, r1
    ce02:	4630      	mov	r0, r6
        q64 += (q64 >> 8);
    ce04:	0a36      	lsrs	r6, r6, #8
    ce06:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    ce0a:	9602      	str	r6, [sp, #8]
    ce0c:	0a3e      	lsrs	r6, r7, #8
    ce0e:	9603      	str	r6, [sp, #12]
        q64 += (q64 >> 4);
    ce10:	4639      	mov	r1, r7
        q64 += (q64 >> 8);
    ce12:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    ce16:	1836      	adds	r6, r6, r0
    ce18:	414f      	adcs	r7, r1
        q64 += (q64 >> 16);
    ce1a:	ea4f 4816 	mov.w	r8, r6, lsr #16
    ce1e:	ea48 4807 	orr.w	r8, r8, r7, lsl #16
    ce22:	eb16 0008 	adds.w	r0, r6, r8
    ce26:	ea4f 4917 	mov.w	r9, r7, lsr #16
    ce2a:	eb47 0109 	adc.w	r1, r7, r9
        q64 += (q64 >> 32);
    ce2e:	2600      	movs	r6, #0
    ce30:	910c      	str	r1, [sp, #48]	; 0x30
    ce32:	960d      	str	r6, [sp, #52]	; 0x34
    ce34:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ce38:	ea4f 0c92 	mov.w	ip, r2, lsr #2
        q64 += (q64 >> 32);
    ce3c:	1836      	adds	r6, r6, r0
        q32 = (ui32Val>>1) + (ui32Val>>2);
    ce3e:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
        q64 >>= 3;
    ce42:	ea4f 04d6 	mov.w	r4, r6, lsr #3
        q32 += (q32 >> 4);
    ce46:	eb0c 1c1c 	add.w	ip, ip, ip, lsr #4
    if ( ui64Val >> 32 )
    ce4a:	f04f 0600 	mov.w	r6, #0
        q64 += (q64 >> 32);
    ce4e:	414f      	adcs	r7, r1
    if ( ui64Val >> 32 )
    ce50:	9312      	str	r3, [sp, #72]	; 0x48
        q32 += (q32 >> 8);
    ce52:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    if ( ui64Val >> 32 )
    ce56:	9613      	str	r6, [sp, #76]	; 0x4c
        q64 >>= 3;
    ce58:	ea44 7447 	orr.w	r4, r4, r7, lsl #29
    ce5c:	08fd      	lsrs	r5, r7, #3
        q32 += (q32 >> 16);
    ce5e:	eb0c 4c1c 	add.w	ip, ip, ip, lsr #16
    ce62:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
        r64 = ui64Val - q64*10;
    ce66:	ea4f 0b85 	mov.w	fp, r5, lsl #2
        q32 >>= 3;
    ce6a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce6e:	f102 0a06 	add.w	sl, r2, #6
        r64 = ui64Val - q64*10;
    ce72:	ea4b 7194 	orr.w	r1, fp, r4, lsr #30
        r32 = ui32Val - q32*10;
    ce76:	eb0c 0b8c 	add.w	fp, ip, ip, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce7a:	ebaa 0a4b 	sub.w	sl, sl, fp, lsl #1
    ce7e:	433e      	orrs	r6, r7
        r64 = ui64Val - q64*10;
    ce80:	ea4f 0084 	mov.w	r0, r4, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    ce84:	eb0c 1a1a 	add.w	sl, ip, sl, lsr #4
    ce88:	d09b      	beq.n	cdc2 <am_util_stdio_vsprintf+0x482>
        r64 = ui64Val - q64*10;
    ce8a:	1900      	adds	r0, r0, r4
    ce8c:	4169      	adcs	r1, r5
    ce8e:	1800      	adds	r0, r0, r0
    ce90:	4149      	adcs	r1, r1
        return q64 + ((r64 + 6) >> 4);
    ce92:	3206      	adds	r2, #6
    ce94:	f143 0300 	adc.w	r3, r3, #0
    ce98:	1a12      	subs	r2, r2, r0
    ce9a:	eb63 0301 	sbc.w	r3, r3, r1
    ce9e:	0911      	lsrs	r1, r2, #4
    cea0:	ea41 7103 	orr.w	r1, r1, r3, lsl #28
    cea4:	091b      	lsrs	r3, r3, #4
    cea6:	9116      	str	r1, [sp, #88]	; 0x58
    cea8:	9317      	str	r3, [sp, #92]	; 0x5c
    ceaa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    ceae:	1912      	adds	r2, r2, r4
    ceb0:	416b      	adcs	r3, r5
    while ( ui64Val )
    ceb2:	ea52 0103 	orrs.w	r1, r2, r3
        ++iNDigits;
    ceb6:	f10e 0e01 	add.w	lr, lr, #1
    while ( ui64Val )
    ceba:	d189      	bne.n	cdd0 <am_util_stdio_vsprintf+0x490>
    cebc:	e9cd 4528 	strd	r4, r5, [sp, #160]	; 0xa0
    cec0:	e9cd 8926 	strd	r8, r9, [sp, #152]	; 0x98
    cec4:	9e21      	ldr	r6, [sp, #132]	; 0x84
    cec6:	9f22      	ldr	r7, [sp, #136]	; 0x88
    cec8:	9c20      	ldr	r4, [sp, #128]	; 0x80
    ceca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    cece:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
    ced2:	4675      	mov	r5, lr
                    iWidth -= ndigits_in_u64(ui64Val);
    ced4:	1b7d      	subs	r5, r7, r5
    if ( i32NumChars <= 0 )
    ced6:	2d00      	cmp	r5, #0
    ced8:	f340 81ef 	ble.w	d2ba <am_util_stdio_vsprintf+0x97a>
    while ( i32NumChars-- )
    cedc:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    cede:	f1bb 0f00 	cmp.w	fp, #0
    cee2:	f000 81eb 	beq.w	d2bc <am_util_stdio_vsprintf+0x97c>
    cee6:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    cee8:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    ceec:	3b01      	subs	r3, #1
    ceee:	1c5d      	adds	r5, r3, #1
    cef0:	eba2 010b 	sub.w	r1, r2, fp
    cef4:	d1f8      	bne.n	cee8 <am_util_stdio_vsprintf+0x5a8>
    cef6:	460d      	mov	r5, r1
                    pcBuf += pcBuf ? iWidth : 0;
    cef8:	448b      	add	fp, r1
                    ui32CharCnt += iWidth;
    cefa:	44a9      	add	r9, r5
                iVal = uint64_to_str(ui64Val, pcBuf);
    cefc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    cf00:	465a      	mov	r2, fp
    cf02:	f7ff fc6b 	bl	c7dc <uint64_to_str>
                if ( pcBuf )
    cf06:	f1bb 0f00 	cmp.w	fp, #0
    cf0a:	f43f af34 	beq.w	cd76 <am_util_stdio_vsprintf+0x436>
                    pcBuf += iVal;
    cf0e:	4483      	add	fp, r0
    cf10:	e731      	b.n	cd76 <am_util_stdio_vsprintf+0x436>
                if ( pcBuf )
    cf12:	f1bb 0f00 	cmp.w	fp, #0
    cf16:	d003      	beq.n	cf20 <am_util_stdio_vsprintf+0x5e0>
                    *pcBuf++ = *pcFmt;
    cf18:	f88b 2000 	strb.w	r2, [fp]
    cf1c:	f10b 0b01 	add.w	fp, fp, #1
                ++ui32CharCnt;
    cf20:	f109 0901 	add.w	r9, r9, #1
                break;
    cf24:	e62e      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cf26:	7862      	ldrb	r2, [r4, #1]
    cf28:	2a6c      	cmp	r2, #108	; 0x6c
    cf2a:	f000 80c3 	beq.w	d0b4 <am_util_stdio_vsprintf+0x774>
            pcFmt++;
    cf2e:	3401      	adds	r4, #1
    cf30:	e57b      	b.n	ca2a <am_util_stdio_vsprintf+0xea>
    if ( *pcStr == '-')
    cf32:	7862      	ldrb	r2, [r4, #1]
    cf34:	2a2d      	cmp	r2, #45	; 0x2d
            ++pcFmt;
    cf36:	f104 0c01 	add.w	ip, r4, #1
    if ( *pcStr == '-')
    cf3a:	f000 813f 	beq.w	d1bc <am_util_stdio_vsprintf+0x87c>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf3e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    cf42:	2b09      	cmp	r3, #9
    cf44:	f200 81c0 	bhi.w	d2c8 <am_util_stdio_vsprintf+0x988>
    uint32_t ui32Val = 0, uCnt = 0;
    cf48:	2100      	movs	r1, #0
    bool bNeg = false;
    cf4a:	4688      	mov	r8, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf4c:	4664      	mov	r4, ip
    bool bNeg = false;
    cf4e:	2300      	movs	r3, #0
        ui32Val *= 10;
    cf50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
    cf54:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf58:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    cf5c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
    cf60:	f1be 0f09 	cmp.w	lr, #9
        ++uCnt;
    cf64:	f101 0101 	add.w	r1, r1, #1
        ui32Val += (*pcStr - '0');
    cf68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    cf6c:	d9f0      	bls.n	cf50 <am_util_stdio_vsprintf+0x610>
    return bNeg ? -ui32Val : ui32Val;
    cf6e:	f1b8 0f00 	cmp.w	r8, #0
    cf72:	f040 82bc 	bne.w	d4ee <am_util_stdio_vsprintf+0xbae>
    cf76:	4698      	mov	r8, r3
    cf78:	e1a9      	b.n	d2ce <am_util_stdio_vsprintf+0x98e>
    cf7a:	f1b8 0f00 	cmp.w	r8, #0
    cf7e:	bf14      	ite	ne
    cf80:	f04f 0e27 	movne.w	lr, #39	; 0x27
    cf84:	f04f 0e07 	moveq.w	lr, #7
    cf88:	f10d 07ab 	add.w	r7, sp, #171	; 0xab
    if ( ui64Val == 0 )
    cf8c:	2600      	movs	r6, #0
    cf8e:	e000      	b.n	cf92 <am_util_stdio_vsprintf+0x652>
        tbuf[ix++] = cCh + '0';
    cf90:	460e      	mov	r6, r1
        cCh = ui64Val & 0xf;
    cf92:	f002 010f 	and.w	r1, r2, #15
            cCh += bLower ? 0x27 : 0x7;
    cf96:	eb01 050e 	add.w	r5, r1, lr
        ui64Val >>= 4;
    cf9a:	0910      	lsrs	r0, r2, #4
        tbuf[ix++] = cCh + '0';
    cf9c:	2909      	cmp	r1, #9
    cf9e:	bf88      	it	hi
    cfa0:	4629      	movhi	r1, r5
        ui64Val >>= 4;
    cfa2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
    cfa6:	091d      	lsrs	r5, r3, #4
    cfa8:	4602      	mov	r2, r0
    cfaa:	462b      	mov	r3, r5
        tbuf[ix++] = cCh + '0';
    cfac:	3130      	adds	r1, #48	; 0x30
    while ( ui64Val )
    cfae:	ea52 0003 	orrs.w	r0, r2, r3
        tbuf[ix++] = cCh + '0';
    cfb2:	f807 1f01 	strb.w	r1, [r7, #1]!
    cfb6:	f106 0101 	add.w	r1, r6, #1
    while ( ui64Val )
    cfba:	d1e9      	bne.n	cf90 <am_util_stdio_vsprintf+0x650>
    cfbc:	460d      	mov	r5, r1
    if (pcBuf)
    cfbe:	f1bb 0f00 	cmp.w	fp, #0
    cfc2:	f47f adb1 	bne.w	cb28 <am_util_stdio_vsprintf+0x1e8>
    cfc6:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    cfca:	44a9      	add	r9, r5
    cfcc:	e5da      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    cfce:	463d      	mov	r5, r7
                pcStr = va_arg(pArgs, char *);
    cfd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cfd2:	6817      	ldr	r7, [r2, #0]
    cfd4:	1d10      	adds	r0, r2, #4
    if ( !pcBuf )
    cfd6:	2f00      	cmp	r7, #0
    cfd8:	d03b      	beq.n	d052 <am_util_stdio_vsprintf+0x712>
    while ( *pcBuf++ )
    cfda:	7839      	ldrb	r1, [r7, #0]
    cfdc:	1c7a      	adds	r2, r7, #1
    cfde:	4613      	mov	r3, r2
    cfe0:	2900      	cmp	r1, #0
    cfe2:	f000 8209 	beq.w	d3f8 <am_util_stdio_vsprintf+0xab8>
    cfe6:	4694      	mov	ip, r2
    cfe8:	eba3 0e07 	sub.w	lr, r3, r7
    cfec:	f813 2b01 	ldrb.w	r2, [r3], #1
    cff0:	2a00      	cmp	r2, #0
    cff2:	d1f9      	bne.n	cfe8 <am_util_stdio_vsprintf+0x6a8>
                if ( iWidth > 0 )
    cff4:	2d00      	cmp	r5, #0
    cff6:	4662      	mov	r2, ip
    cff8:	dd01      	ble.n	cffe <am_util_stdio_vsprintf+0x6be>
                    if ( ui32strlen < iWidth )
    cffa:	4575      	cmp	r5, lr
    cffc:	d82d      	bhi.n	d05a <am_util_stdio_vsprintf+0x71a>
                    if ( pcBuf )
    cffe:	f1bb 0f00 	cmp.w	fp, #0
    d002:	d049      	beq.n	d098 <am_util_stdio_vsprintf+0x758>
    d004:	4613      	mov	r3, r2
    d006:	eba9 0707 	sub.w	r7, r9, r7
                        *pcBuf++ = *pcStr;
    d00a:	f80b 1b01 	strb.w	r1, [fp], #1
    d00e:	eb07 0903 	add.w	r9, r7, r3
                while (*pcStr != 0x0)
    d012:	f813 1b01 	ldrb.w	r1, [r3], #1
    d016:	2900      	cmp	r1, #0
    d018:	d1f7      	bne.n	d00a <am_util_stdio_vsprintf+0x6ca>
                if ( iWidth )
    d01a:	2d00      	cmp	r5, #0
    d01c:	d048      	beq.n	d0b0 <am_util_stdio_vsprintf+0x770>
                    iWidth = -iWidth;
    d01e:	426d      	negs	r5, r5
                    if ( ui32strlen < iWidth )
    d020:	4575      	cmp	r5, lr
    d022:	d945      	bls.n	d0b0 <am_util_stdio_vsprintf+0x770>
                        iWidth -= ui32strlen;
    d024:	eba5 050e 	sub.w	r5, r5, lr
    if ( i32NumChars <= 0 )
    d028:	2d00      	cmp	r5, #0
    d02a:	f340 81db 	ble.w	d3e4 <am_util_stdio_vsprintf+0xaa4>
    while ( i32NumChars-- )
    d02e:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    d030:	f1bb 0f00 	cmp.w	fp, #0
    d034:	f000 81d7 	beq.w	d3e6 <am_util_stdio_vsprintf+0xaa6>
    d038:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    d03a:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    d03e:	3b01      	subs	r3, #1
    d040:	1c5d      	adds	r5, r3, #1
    d042:	eba2 010b 	sub.w	r1, r2, fp
    d046:	d1f8      	bne.n	d03a <am_util_stdio_vsprintf+0x6fa>
    d048:	460d      	mov	r5, r1
                        pcBuf += pcBuf ? iWidth : 0;
    d04a:	448b      	add	fp, r1
                        ui32CharCnt += iWidth;
    d04c:	44a9      	add	r9, r5
                pcStr = va_arg(pArgs, char *);
    d04e:	9011      	str	r0, [sp, #68]	; 0x44
    d050:	e598      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
                if ( iWidth > 0 )
    d052:	2d00      	cmp	r5, #0
    d054:	f340 81b0 	ble.w	d3b8 <am_util_stdio_vsprintf+0xa78>
        return ui32RetVal;
    d058:	46be      	mov	lr, r7
                        iWidth -= ui32strlen;
    d05a:	eba5 050e 	sub.w	r5, r5, lr
    if ( i32NumChars <= 0 )
    d05e:	2d00      	cmp	r5, #0
    d060:	f340 81c3 	ble.w	d3ea <am_util_stdio_vsprintf+0xaaa>
    while ( i32NumChars-- )
    d064:	1e6b      	subs	r3, r5, #1
        if ( pcBuf )
    d066:	f1bb 0f00 	cmp.w	fp, #0
    d06a:	d010      	beq.n	d08e <am_util_stdio_vsprintf+0x74e>
    d06c:	465a      	mov	r2, fp
            *pcBuf++ = cPadChar;
    d06e:	f802 6b01 	strb.w	r6, [r2], #1
    while ( i32NumChars-- )
    d072:	3b01      	subs	r3, #1
    d074:	1c5d      	adds	r5, r3, #1
    d076:	eba2 010b 	sub.w	r1, r2, fp
    d07a:	d1f8      	bne.n	d06e <am_util_stdio_vsprintf+0x72e>
    d07c:	460b      	mov	r3, r1
    d07e:	460d      	mov	r5, r1
                while (*pcStr != 0x0)
    d080:	7839      	ldrb	r1, [r7, #0]
                        pcBuf += pcBuf ? iWidth : 0;
    d082:	449b      	add	fp, r3
                        ui32CharCnt += iWidth;
    d084:	44a9      	add	r9, r5
                while (*pcStr != 0x0)
    d086:	b199      	cbz	r1, d0b0 <am_util_stdio_vsprintf+0x770>
                        iWidth = 0;
    d088:	2500      	movs	r5, #0
    d08a:	1c7a      	adds	r2, r7, #1
    d08c:	e7b7      	b.n	cffe <am_util_stdio_vsprintf+0x6be>
                while (*pcStr != 0x0)
    d08e:	783b      	ldrb	r3, [r7, #0]
                        ui32CharCnt += iWidth;
    d090:	44a9      	add	r9, r5
                while (*pcStr != 0x0)
    d092:	b16b      	cbz	r3, d0b0 <am_util_stdio_vsprintf+0x770>
                        iWidth = 0;
    d094:	2500      	movs	r5, #0
    d096:	1c7a      	adds	r2, r7, #1
    d098:	4613      	mov	r3, r2
    d09a:	eba9 0707 	sub.w	r7, r9, r7
    d09e:	eb07 0903 	add.w	r9, r7, r3
                while (*pcStr != 0x0)
    d0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
    d0a6:	2a00      	cmp	r2, #0
    d0a8:	d1f9      	bne.n	d09e <am_util_stdio_vsprintf+0x75e>
    d0aa:	4693      	mov	fp, r2
                if ( iWidth )
    d0ac:	2d00      	cmp	r5, #0
    d0ae:	d1b6      	bne.n	d01e <am_util_stdio_vsprintf+0x6de>
                pcStr = va_arg(pArgs, char *);
    d0b0:	9011      	str	r0, [sp, #68]	; 0x44
    d0b2:	e567      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
        switch ( *pcFmt )
    d0b4:	78a2      	ldrb	r2, [r4, #2]
    d0b6:	f1a2 0346 	sub.w	r3, r2, #70	; 0x46
                pcFmt++;
    d0ba:	3402      	adds	r4, #2
        switch ( *pcFmt )
    d0bc:	2b32      	cmp	r3, #50	; 0x32
    d0be:	f63f af28 	bhi.w	cf12 <am_util_stdio_vsprintf+0x5d2>
    d0c2:	a101      	add	r1, pc, #4	; (adr r1, d0c8 <am_util_stdio_vsprintf+0x788>)
    d0c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    d0c8:	0000cb49 	.word	0x0000cb49
    d0cc:	0000cf13 	.word	0x0000cf13
    d0d0:	0000cf13 	.word	0x0000cf13
    d0d4:	0000cf13 	.word	0x0000cf13
    d0d8:	0000cf13 	.word	0x0000cf13
    d0dc:	0000cf13 	.word	0x0000cf13
    d0e0:	0000cf13 	.word	0x0000cf13
    d0e4:	0000cf13 	.word	0x0000cf13
    d0e8:	0000cf13 	.word	0x0000cf13
    d0ec:	0000cf13 	.word	0x0000cf13
    d0f0:	0000cf13 	.word	0x0000cf13
    d0f4:	0000cf13 	.word	0x0000cf13
    d0f8:	0000cf13 	.word	0x0000cf13
    d0fc:	0000cf13 	.word	0x0000cf13
    d100:	0000cf13 	.word	0x0000cf13
    d104:	0000cf13 	.word	0x0000cf13
    d108:	0000cf13 	.word	0x0000cf13
    d10c:	0000cf13 	.word	0x0000cf13
    d110:	0000d4df 	.word	0x0000d4df
    d114:	0000cf13 	.word	0x0000cf13
    d118:	0000cf13 	.word	0x0000cf13
    d11c:	0000cf13 	.word	0x0000cf13
    d120:	0000cf13 	.word	0x0000cf13
    d124:	0000cf13 	.word	0x0000cf13
    d128:	0000cf13 	.word	0x0000cf13
    d12c:	0000cf13 	.word	0x0000cf13
    d130:	0000cf13 	.word	0x0000cf13
    d134:	0000cf13 	.word	0x0000cf13
    d138:	0000cf13 	.word	0x0000cf13
    d13c:	0000cb89 	.word	0x0000cb89
    d140:	0000d1ab 	.word	0x0000d1ab
    d144:	0000cf13 	.word	0x0000cf13
    d148:	0000cb49 	.word	0x0000cb49
    d14c:	0000cf13 	.word	0x0000cf13
    d150:	0000cf13 	.word	0x0000cf13
    d154:	0000d1ab 	.word	0x0000d1ab
    d158:	0000cf13 	.word	0x0000cf13
    d15c:	0000cf13 	.word	0x0000cf13
    d160:	0000cf13 	.word	0x0000cf13
    d164:	0000cf13 	.word	0x0000cf13
    d168:	0000cf13 	.word	0x0000cf13
    d16c:	0000cf13 	.word	0x0000cf13
    d170:	0000cf13 	.word	0x0000cf13
    d174:	0000cf13 	.word	0x0000cf13
    d178:	0000cf13 	.word	0x0000cf13
    d17c:	0000cfcf 	.word	0x0000cfcf
    d180:	0000cf13 	.word	0x0000cf13
    d184:	0000d195 	.word	0x0000d195
    d188:	0000cf13 	.word	0x0000cf13
    d18c:	0000cf13 	.word	0x0000cf13
    d190:	0000d37f 	.word	0x0000d37f
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d194:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d196:	3307      	adds	r3, #7
    d198:	f023 0307 	bic.w	r3, r3, #7
    d19c:	e9d3 1200 	ldrd	r1, r2, [r3]
    d1a0:	3308      	adds	r3, #8
    d1a2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
    d1a6:	9311      	str	r3, [sp, #68]	; 0x44
    d1a8:	e5f2      	b.n	cd90 <am_util_stdio_vsprintf+0x450>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d1aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1ac:	3307      	adds	r3, #7
    d1ae:	f023 0307 	bic.w	r3, r3, #7
    d1b2:	e9d3 0100 	ldrd	r0, r1, [r3]
    d1b6:	3308      	adds	r3, #8
    d1b8:	9311      	str	r3, [sp, #68]	; 0x44
    d1ba:	e4fa      	b.n	cbb2 <am_util_stdio_vsprintf+0x272>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d1bc:	78a2      	ldrb	r2, [r4, #2]
    d1be:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    d1c2:	2b09      	cmp	r3, #9
        pcStr++;
    d1c4:	f104 0402 	add.w	r4, r4, #2
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d1c8:	f200 812c 	bhi.w	d424 <am_util_stdio_vsprintf+0xae4>
        uCnt++;
    d1cc:	2101      	movs	r1, #1
        bNeg = true;
    d1ce:	4688      	mov	r8, r1
    d1d0:	e6bd      	b.n	cf4e <am_util_stdio_vsprintf+0x60e>
    if ( i32NumChars <= 0 )
    d1d2:	2b00      	cmp	r3, #0
                            ++ui32CharCnt;
    d1d4:	f109 0901 	add.w	r9, r9, #1
    if ( i32NumChars <= 0 )
    d1d8:	f340 817b 	ble.w	d4d2 <am_util_stdio_vsprintf+0xb92>
    while ( i32NumChars-- )
    d1dc:	1eab      	subs	r3, r5, #2
    d1de:	f04f 0a01 	mov.w	sl, #1
    d1e2:	3301      	adds	r3, #1
                    ui32CharCnt += iWidth;
    d1e4:	4499      	add	r9, r3
                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1e6:	f1ba 0f00 	cmp.w	sl, #0
    d1ea:	f000 80ea 	beq.w	d3c2 <am_util_stdio_vsprintf+0xa82>
    d1ee:	2e20      	cmp	r6, #32
    d1f0:	f000 80d6 	beq.w	d3a0 <am_util_stdio_vsprintf+0xa60>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d1f4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d1f8:	2200      	movs	r2, #0
    d1fa:	f7ff faef 	bl	c7dc <uint64_to_str>
                    pcBuf += iVal;
    d1fe:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    d202:	4481      	add	r9, r0
    d204:	e4be      	b.n	cb84 <am_util_stdio_vsprintf+0x244>
    if ( i32NumChars <= 0 )
    d206:	2700      	movs	r7, #0
    d208:	2500      	movs	r5, #0
    d20a:	e47c      	b.n	cb06 <am_util_stdio_vsprintf+0x1c6>
                    ui64Val = -i64Val;          // Get absolute value
    d20c:	4240      	negs	r0, r0
    d20e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d212:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
                if ( iWidth )
    d216:	2d00      	cmp	r5, #0
    d218:	f040 8143 	bne.w	d4a2 <am_util_stdio_vsprintf+0xb62>
                        if ( pcBuf )
    d21c:	f1bb 0f00 	cmp.w	fp, #0
    d220:	f000 80d8 	beq.w	d3d4 <am_util_stdio_vsprintf+0xa94>
                            *pcBuf++ = '-';
    d224:	232d      	movs	r3, #45	; 0x2d
    d226:	f88b 3000 	strb.w	r3, [fp]
    d22a:	f10b 0b01 	add.w	fp, fp, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d22e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d232:	465a      	mov	r2, fp
                        ++ui32CharCnt;
    d234:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d238:	f7ff fad0 	bl	c7dc <uint64_to_str>
                if ( pcBuf )
    d23c:	f1bb 0f00 	cmp.w	fp, #0
    d240:	f47f ad98 	bne.w	cd74 <am_util_stdio_vsprintf+0x434>
    d244:	e7db      	b.n	d1fe <am_util_stdio_vsprintf+0x8be>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    d246:	f3c0 51c7 	ubfx	r1, r0, #23, #8
    d24a:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    d24e:	4603      	mov	r3, r0
    if (iExp2 >= 31)
    d250:	2a1e      	cmp	r2, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    d252:	f3c0 0016 	ubfx	r0, r0, #0, #23
    d256:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    if (iExp2 >= 31)
    d25a:	f300 80e7 	bgt.w	d42c <am_util_stdio_vsprintf+0xaec>
    else if (iExp2 < -23)
    d25e:	f112 0f17 	cmn.w	r2, #23
    d262:	f2c0 80dd 	blt.w	d420 <am_util_stdio_vsprintf+0xae0>
    else if (iExp2 >= 23)
    d266:	2a16      	cmp	r2, #22
    d268:	dd37      	ble.n	d2da <am_util_stdio_vsprintf+0x99a>
        i32IntPart = i32Significand << (iExp2 - 23);
    d26a:	3996      	subs	r1, #150	; 0x96
    if (unFloatValue.I32 < 0)
    d26c:	2b00      	cmp	r3, #0
        i32IntPart = i32Significand << (iExp2 - 23);
    d26e:	fa00 f001 	lsl.w	r0, r0, r1
    if (unFloatValue.I32 < 0)
    d272:	f2c0 80f3 	blt.w	d45c <am_util_stdio_vsprintf+0xb1c>
    if (i32IntPart == 0)
    d276:	2800      	cmp	r0, #0
    d278:	f040 80e3 	bne.w	d442 <am_util_stdio_vsprintf+0xb02>
    *pcBuf++ = '.';
    d27c:	232e      	movs	r3, #46	; 0x2e
        *pcBuf++ = '0';
    d27e:	f04f 0230 	mov.w	r2, #48	; 0x30
    d282:	f88b 2000 	strb.w	r2, [fp]
    *pcBuf++ = '.';
    d286:	f88b 3001 	strb.w	r3, [fp, #1]
        *pcBuf++ = '0';
    d28a:	f10b 0601 	add.w	r6, fp, #1
        *pcBuf++ = '0';
    d28e:	1cb2      	adds	r2, r6, #2
    d290:	f04f 0330 	mov.w	r3, #48	; 0x30
    d294:	7073      	strb	r3, [r6, #1]
    d296:	eba2 010b 	sub.w	r1, r2, fp
    *pcBuf = 0x00;
    d29a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
    d29c:	4299      	cmp	r1, r3
    *pcBuf = 0x00;
    d29e:	7013      	strb	r3, [r2, #0]
                    if ( iVal < 0 )
    d2a0:	f6bf ac6e 	bge.w	cb80 <am_util_stdio_vsprintf+0x240>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d2a4:	1c4b      	adds	r3, r1, #1
    d2a6:	f000 80bb 	beq.w	d420 <am_util_stdio_vsprintf+0xae0>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d2aa:	3102      	adds	r1, #2
    d2ac:	f000 80be 	beq.w	d42c <am_util_stdio_vsprintf+0xaec>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2b0:	4b90      	ldr	r3, [pc, #576]	; (d4f4 <am_util_stdio_vsprintf+0xbb4>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d2b2:	f8cb 3000 	str.w	r3, [fp]
    d2b6:	2103      	movs	r1, #3
    d2b8:	e462      	b.n	cb80 <am_util_stdio_vsprintf+0x240>
    if ( i32NumChars <= 0 )
    d2ba:	2500      	movs	r5, #0
    d2bc:	2100      	movs	r1, #0
    d2be:	e61b      	b.n	cef8 <am_util_stdio_vsprintf+0x5b8>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d2c0:	4604      	mov	r4, r0
    d2c2:	2500      	movs	r5, #0
    d2c4:	f7ff bba2 	b.w	ca0c <am_util_stdio_vsprintf+0xcc>
    d2c8:	f04f 0800 	mov.w	r8, #0
    uint32_t ui32Val = 0, uCnt = 0;
    d2cc:	4641      	mov	r1, r8
            pcFmt += ui32NumChars;
    d2ce:	eb0c 0401 	add.w	r4, ip, r1
    d2d2:	f81c 2001 	ldrb.w	r2, [ip, r1]
    d2d6:	f7ff bba5 	b.w	ca24 <am_util_stdio_vsprintf+0xe4>
    else if (iExp2 >= 0)
    d2da:	2a00      	cmp	r2, #0
    d2dc:	f2c0 80ce 	blt.w	d47c <am_util_stdio_vsprintf+0xb3c>
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d2e0:	f1a1 057e 	sub.w	r5, r1, #126	; 0x7e
    d2e4:	fa00 f505 	lsl.w	r5, r0, r5
        i32IntPart = i32Significand >> (23 - iExp2);
    d2e8:	f1c2 0217 	rsb	r2, r2, #23
    if (unFloatValue.I32 < 0)
    d2ec:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    d2ee:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        i32IntPart = i32Significand >> (23 - iExp2);
    d2f2:	fa40 f002 	asr.w	r0, r0, r2
    if (unFloatValue.I32 < 0)
    d2f6:	f2c0 80e0 	blt.w	d4ba <am_util_stdio_vsprintf+0xb7a>
    d2fa:	465e      	mov	r6, fp
            uint64_to_str(i32IntPart, pcBuf);
    d2fc:	4632      	mov	r2, r6
    d2fe:	17c1      	asrs	r1, r0, #31
    d300:	f7ff fa6c 	bl	c7dc <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
    d304:	7833      	ldrb	r3, [r6, #0]
    d306:	b11b      	cbz	r3, d310 <am_util_stdio_vsprintf+0x9d0>
    d308:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    d30c:	2b00      	cmp	r3, #0
    d30e:	d1fb      	bne.n	d308 <am_util_stdio_vsprintf+0x9c8>
    *pcBuf++ = '.';
    d310:	232e      	movs	r3, #46	; 0x2e
    d312:	7033      	strb	r3, [r6, #0]
    if (i32FracPart == 0)
    d314:	2d00      	cmp	r5, #0
    d316:	d0ba      	beq.n	d28e <am_util_stdio_vsprintf+0x94e>
    *pcBuf++ = '.';
    d318:	1c72      	adds	r2, r6, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    d31a:	eba2 010b 	sub.w	r1, r2, fp
    d31e:	f1c1 0313 	rsb	r3, r1, #19
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    d322:	4543      	cmp	r3, r8
    d324:	bfa8      	it	ge
    d326:	4643      	movge	r3, r8
        for (jx = 0; jx < iMax; jx++)
    d328:	2b00      	cmp	r3, #0
    d32a:	dd0e      	ble.n	d34a <am_util_stdio_vsprintf+0xa0a>
    d32c:	18f1      	adds	r1, r6, r3
            i32FracPart *= 10;
    d32e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d332:	006d      	lsls	r5, r5, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
    d334:	1628      	asrs	r0, r5, #24
    d336:	3030      	adds	r0, #48	; 0x30
    d338:	f806 0f01 	strb.w	r0, [r6, #1]!
        for (jx = 0; jx < iMax; jx++)
    d33c:	42b1      	cmp	r1, r6
            i32FracPart &= 0x00FFFFFF;
    d33e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
        for (jx = 0; jx < iMax; jx++)
    d342:	d1f4      	bne.n	d32e <am_util_stdio_vsprintf+0x9ee>
    d344:	441a      	add	r2, r3
    d346:	eba2 010b 	sub.w	r1, r2, fp
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    d34a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d34e:	f345 53c7 	sbfx	r3, r5, #23, #8
    d352:	2b04      	cmp	r3, #4
    d354:	dda1      	ble.n	d29a <am_util_stdio_vsprintf+0x95a>
            pcBuftmp = pcBuf - 1;
    d356:	1e53      	subs	r3, r2, #1
            while ( pcBuftmp >= pcBufInitial )
    d358:	459b      	cmp	fp, r3
    d35a:	d89e      	bhi.n	d29a <am_util_stdio_vsprintf+0x95a>
    d35c:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
    d360:	e005      	b.n	d36e <am_util_stdio_vsprintf+0xa2e>
                    *pcBuftmp = '0';
    d362:	f04f 0030 	mov.w	r0, #48	; 0x30
    d366:	7018      	strb	r0, [r3, #0]
                pcBuftmp--;
    d368:	3b01      	subs	r3, #1
            while ( pcBuftmp >= pcBufInitial )
    d36a:	42ab      	cmp	r3, r5
    d36c:	d095      	beq.n	d29a <am_util_stdio_vsprintf+0x95a>
                if ( *pcBuftmp == '.' )
    d36e:	7818      	ldrb	r0, [r3, #0]
    d370:	282e      	cmp	r0, #46	; 0x2e
    d372:	d0f9      	beq.n	d368 <am_util_stdio_vsprintf+0xa28>
                else if ( *pcBuftmp == '9' )
    d374:	2839      	cmp	r0, #57	; 0x39
    d376:	d0f4      	beq.n	d362 <am_util_stdio_vsprintf+0xa22>
                    *pcBuftmp += 1;
    d378:	3001      	adds	r0, #1
    d37a:	7018      	strb	r0, [r3, #0]
    d37c:	e78d      	b.n	d29a <am_util_stdio_vsprintf+0x95a>
        switch ( *pcFmt )
    d37e:	f04f 0801 	mov.w	r8, #1
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d382:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d384:	3307      	adds	r3, #7
    d386:	f023 0307 	bic.w	r3, r3, #7
    d38a:	f103 0208 	add.w	r2, r3, #8
    d38e:	9211      	str	r2, [sp, #68]	; 0x44
    d390:	e9d3 2300 	ldrd	r2, r3, [r3]
    d394:	f7ff bb8b 	b.w	caae <am_util_stdio_vsprintf+0x16e>
                        if ( pcBuf )
    d398:	f1bb 0f00 	cmp.w	fp, #0
    d39c:	f47f af42 	bne.w	d224 <am_util_stdio_vsprintf+0x8e4>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3a0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d3a4:	2200      	movs	r2, #0
    d3a6:	f7ff fa19 	bl	c7dc <uint64_to_str>
                        ++ui32CharCnt;
    d3aa:	f109 0901 	add.w	r9, r9, #1
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3ae:	f04f 0b00 	mov.w	fp, #0
                ui32CharCnt += iVal;
    d3b2:	4481      	add	r9, r0
    d3b4:	f7ff bbe6 	b.w	cb84 <am_util_stdio_vsprintf+0x244>
                while (*pcStr != 0x0)
    d3b8:	7839      	ldrb	r1, [r7, #0]
    d3ba:	b1f9      	cbz	r1, d3fc <am_util_stdio_vsprintf+0xabc>
        return ui32RetVal;
    d3bc:	46be      	mov	lr, r7
    d3be:	2201      	movs	r2, #1
    d3c0:	e61d      	b.n	cffe <am_util_stdio_vsprintf+0x6be>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3c2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d3c6:	4652      	mov	r2, sl
    d3c8:	f7ff fa08 	bl	c7dc <uint64_to_str>
    d3cc:	46d3      	mov	fp, sl
                ui32CharCnt += iVal;
    d3ce:	4481      	add	r9, r0
    d3d0:	f7ff bbd8 	b.w	cb84 <am_util_stdio_vsprintf+0x244>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d3d4:	465a      	mov	r2, fp
    d3d6:	f7ff fa01 	bl	c7dc <uint64_to_str>
                        ++ui32CharCnt;
    d3da:	f109 0901 	add.w	r9, r9, #1
                ui32CharCnt += iVal;
    d3de:	4481      	add	r9, r0
    d3e0:	f7ff bbd0 	b.w	cb84 <am_util_stdio_vsprintf+0x244>
    if ( i32NumChars <= 0 )
    d3e4:	2500      	movs	r5, #0
    d3e6:	2100      	movs	r1, #0
    d3e8:	e62f      	b.n	d04a <am_util_stdio_vsprintf+0x70a>
    d3ea:	2500      	movs	r5, #0
                        pcBuf += pcBuf ? iWidth : 0;
    d3ec:	f1bb 0f00 	cmp.w	fp, #0
    d3f0:	f43f ae4d 	beq.w	d08e <am_util_stdio_vsprintf+0x74e>
    d3f4:	462b      	mov	r3, r5
    d3f6:	e643      	b.n	d080 <am_util_stdio_vsprintf+0x740>
                if ( iWidth > 0 )
    d3f8:	2d00      	cmp	r5, #0
    d3fa:	dc01      	bgt.n	d400 <am_util_stdio_vsprintf+0xac0>
        return ui32RetVal;
    d3fc:	468e      	mov	lr, r1
    d3fe:	e60c      	b.n	d01a <am_util_stdio_vsprintf+0x6da>
                    if ( ui32strlen < iWidth )
    d400:	468e      	mov	lr, r1
    d402:	e62a      	b.n	d05a <am_util_stdio_vsprintf+0x71a>
                            if ( pcBuf )
    d404:	f1bb 0f00 	cmp.w	fp, #0
    d408:	f43f aee3 	beq.w	d1d2 <am_util_stdio_vsprintf+0x892>
                                *pcBuf++ = '-';
    d40c:	222d      	movs	r2, #45	; 0x2d
                            ++ui32CharCnt;
    d40e:	f04f 0a01 	mov.w	sl, #1
                                *pcBuf++ = '-';
    d412:	f88b 2000 	strb.w	r2, [fp]
                            ++ui32CharCnt;
    d416:	f109 0901 	add.w	r9, r9, #1
                        --iWidth;
    d41a:	461d      	mov	r5, r3
                                *pcBuf++ = '-';
    d41c:	44d3      	add	fp, sl
    d41e:	e486      	b.n	cd2e <am_util_stdio_vsprintf+0x3ee>
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d420:	4b35      	ldr	r3, [pc, #212]	; (d4f8 <am_util_stdio_vsprintf+0xbb8>)
    d422:	e746      	b.n	d2b2 <am_util_stdio_vsprintf+0x972>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    d424:	f04f 0800 	mov.w	r8, #0
        uCnt++;
    d428:	2101      	movs	r1, #1
    d42a:	e750      	b.n	d2ce <am_util_stdio_vsprintf+0x98e>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d42c:	4b33      	ldr	r3, [pc, #204]	; (d4fc <am_util_stdio_vsprintf+0xbbc>)
    d42e:	e740      	b.n	d2b2 <am_util_stdio_vsprintf+0x972>
                    pcBuf += pcBuf ? iWidth : 0;
    d430:	f1bb 0f00 	cmp.w	fp, #0
    d434:	d133      	bne.n	d49e <am_util_stdio_vsprintf+0xb5e>
    d436:	465b      	mov	r3, fp
    d438:	e6d4      	b.n	d1e4 <am_util_stdio_vsprintf+0x8a4>
                    iWidth -= ndigits_in_i64(ui64Val);
    d43a:	1b7d      	subs	r5, r7, r5
                    bNeg = false;
    d43c:	f04f 0a00 	mov.w	sl, #0
    d440:	e475      	b.n	cd2e <am_util_stdio_vsprintf+0x3ee>
    if (i32IntPart == 0)
    d442:	465b      	mov	r3, fp
    i32FracPart = 0;
    d444:	2500      	movs	r5, #0
        if (i32IntPart > 0)
    d446:	2800      	cmp	r0, #0
    d448:	dc41      	bgt.n	d4ce <am_util_stdio_vsprintf+0xb8e>
            *pcBuf++ = '-';
    d44a:	1c5e      	adds	r6, r3, #1
    d44c:	272d      	movs	r7, #45	; 0x2d
            uint64_to_str(-i32IntPart, pcBuf);
    d44e:	4240      	negs	r0, r0
    d450:	17c1      	asrs	r1, r0, #31
    d452:	4632      	mov	r2, r6
            *pcBuf++ = '-';
    d454:	701f      	strb	r7, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    d456:	f7ff f9c1 	bl	c7dc <uint64_to_str>
    d45a:	e753      	b.n	d304 <am_util_stdio_vsprintf+0x9c4>
        *pcBuf++ = '-';
    d45c:	232d      	movs	r3, #45	; 0x2d
    d45e:	f88b 3000 	strb.w	r3, [fp]
    d462:	f10b 0301 	add.w	r3, fp, #1
    if (i32IntPart == 0)
    d466:	bb80      	cbnz	r0, d4ca <am_util_stdio_vsprintf+0xb8a>
    *pcBuf++ = '.';
    d468:	232e      	movs	r3, #46	; 0x2e
        *pcBuf++ = '0';
    d46a:	f04f 0230 	mov.w	r2, #48	; 0x30
    d46e:	f88b 2001 	strb.w	r2, [fp, #1]
    *pcBuf++ = '.';
    d472:	f88b 3002 	strb.w	r3, [fp, #2]
        *pcBuf++ = '0';
    d476:	f10b 0602 	add.w	r6, fp, #2
    d47a:	e708      	b.n	d28e <am_util_stdio_vsprintf+0x94e>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d47c:	43d2      	mvns	r2, r2
    if (unFloatValue.I32 < 0)
    d47e:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    d480:	fa40 f502 	asr.w	r5, r0, r2
    if (unFloatValue.I32 < 0)
    d484:	db05      	blt.n	d492 <am_util_stdio_vsprintf+0xb52>
    d486:	465b      	mov	r3, fp
        *pcBuf++ = '0';
    d488:	f04f 0230 	mov.w	r2, #48	; 0x30
    d48c:	701a      	strb	r2, [r3, #0]
    d48e:	1c5e      	adds	r6, r3, #1
    d490:	e73e      	b.n	d310 <am_util_stdio_vsprintf+0x9d0>
        *pcBuf++ = '-';
    d492:	232d      	movs	r3, #45	; 0x2d
    d494:	f88b 3000 	strb.w	r3, [fp]
    d498:	f10b 0301 	add.w	r3, fp, #1
    d49c:	e7f4      	b.n	d488 <am_util_stdio_vsprintf+0xb48>
    d49e:	2100      	movs	r1, #0
    d4a0:	e457      	b.n	cd52 <am_util_stdio_vsprintf+0x412>
    d4a2:	460a      	mov	r2, r1
    int iNDigits = ui64Val ? 0 : 1;
    d4a4:	4613      	mov	r3, r2
    d4a6:	4619      	mov	r1, r3
    d4a8:	4301      	orrs	r1, r0
    d4aa:	4602      	mov	r2, r0
    d4ac:	bf0c      	ite	eq
    d4ae:	2501      	moveq	r5, #1
    d4b0:	2500      	movne	r5, #0
                    bNeg = true;
    d4b2:	f04f 0a01 	mov.w	sl, #1
    d4b6:	f7ff bb93 	b.w	cbe0 <am_util_stdio_vsprintf+0x2a0>
        *pcBuf++ = '-';
    d4ba:	232d      	movs	r3, #45	; 0x2d
    d4bc:	f88b 3000 	strb.w	r3, [fp]
    d4c0:	f10b 0301 	add.w	r3, fp, #1
    if (i32IntPart == 0)
    d4c4:	2800      	cmp	r0, #0
    d4c6:	d0df      	beq.n	d488 <am_util_stdio_vsprintf+0xb48>
    d4c8:	e7bd      	b.n	d446 <am_util_stdio_vsprintf+0xb06>
    i32FracPart = 0;
    d4ca:	2500      	movs	r5, #0
    d4cc:	e7bb      	b.n	d446 <am_util_stdio_vsprintf+0xb06>
        if (i32IntPart > 0)
    d4ce:	461e      	mov	r6, r3
    d4d0:	e714      	b.n	d2fc <am_util_stdio_vsprintf+0x9bc>
                iVal = uint64_to_str(ui64Val, pcBuf);
    d4d2:	465a      	mov	r2, fp
    d4d4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    d4d8:	f7ff f980 	bl	c7dc <uint64_to_str>
    d4dc:	e68f      	b.n	d1fe <am_util_stdio_vsprintf+0x8be>
        bLower = bLongLong = false;
    d4de:	f04f 0800 	mov.w	r8, #0
    d4e2:	e74e      	b.n	d382 <am_util_stdio_vsprintf+0xa42>
    d4e4:	f1c5 0530 	rsb	r5, r5, #48	; 0x30
    d4e8:	7822      	ldrb	r2, [r4, #0]
    d4ea:	f7ff ba8f 	b.w	ca0c <am_util_stdio_vsprintf+0xcc>
    d4ee:	f1c0 0830 	rsb	r8, r0, #48	; 0x30
    d4f2:	e6ec      	b.n	d2ce <am_util_stdio_vsprintf+0x98e>
    d4f4:	003f2e3f 	.word	0x003f2e3f
    d4f8:	00302e30 	.word	0x00302e30
    d4fc:	00232e23 	.word	0x00232e23

0000d500 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d500:	b40f      	push	{r0, r1, r2, r3}
    d502:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d504:	4d0a      	ldr	r5, [pc, #40]	; (d530 <am_util_stdio_printf+0x30>)
    d506:	682c      	ldr	r4, [r5, #0]
{
    d508:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
    d50a:	b154      	cbz	r4, d522 <am_util_stdio_printf+0x22>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d50c:	ab07      	add	r3, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d50e:	461a      	mov	r2, r3
    d510:	9906      	ldr	r1, [sp, #24]
    d512:	4808      	ldr	r0, [pc, #32]	; (d534 <am_util_stdio_printf+0x34>)
    va_start(pArgs, pcFmt);
    d514:	9301      	str	r3, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d516:	f7ff fa13 	bl	c940 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d51a:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d51c:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
    d51e:	4805      	ldr	r0, [pc, #20]	; (d534 <am_util_stdio_printf+0x34>)
    d520:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
    d522:	4620      	mov	r0, r4
    d524:	b003      	add	sp, #12
    d526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    d52a:	b004      	add	sp, #16
    d52c:	4770      	bx	lr
    d52e:	bf00      	nop
    d530:	10001310 	.word	0x10001310
    d534:	10001068 	.word	0x10001068

0000d538 <am_util_stdio_terminal_clear>:
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d538:	4801      	ldr	r0, [pc, #4]	; (d540 <am_util_stdio_terminal_clear+0x8>)
    d53a:	f7ff bfe1 	b.w	d500 <am_util_stdio_printf>
    d53e:	bf00      	nop
    d540:	00010588 	.word	0x00010588

0000d544 <NMI_Handler>:
#if AM_CMSIS_REGS
NMI_Handler(void)
#else // AM_CMSIS_REGS
am_nmi_isr(void)
#endif // AM_CMSIS_REGS
{
    d544:	e7fe      	b.n	d544 <NMI_Handler>
    d546:	bf00      	nop

0000d548 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d548:	e7fe      	b.n	d548 <DebugMon_Handler>
    d54a:	bf00      	nop

0000d54c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
    d54c:	4811      	ldr	r0, [pc, #68]	; (d594 <zero_loop+0x12>)
    d54e:	4912      	ldr	r1, [pc, #72]	; (d598 <zero_loop+0x16>)
    d550:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
    d552:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
    d556:	4811      	ldr	r0, [pc, #68]	; (d59c <zero_loop+0x1a>)
    d558:	6801      	ldr	r1, [r0, #0]
    d55a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d55e:	6001      	str	r1, [r0, #0]
    d560:	f3bf 8f4f 	dsb	sy
    d564:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
    d568:	480d      	ldr	r0, [pc, #52]	; (d5a0 <zero_loop+0x1e>)
    d56a:	490e      	ldr	r1, [pc, #56]	; (d5a4 <zero_loop+0x22>)
    d56c:	4a0e      	ldr	r2, [pc, #56]	; (d5a8 <zero_loop+0x26>)

0000d56e <copy_loop>:
    d56e:	f850 3b04 	ldr.w	r3, [r0], #4
    d572:	f841 3b04 	str.w	r3, [r1], #4
    d576:	4291      	cmp	r1, r2
    d578:	dbf9      	blt.n	d56e <copy_loop>
    __asm("    ldr     r0, =_sbss\n"
    d57a:	480c      	ldr	r0, [pc, #48]	; (d5ac <zero_loop+0x2a>)
    d57c:	490c      	ldr	r1, [pc, #48]	; (d5b0 <zero_loop+0x2e>)
    d57e:	f04f 0200 	mov.w	r2, #0

0000d582 <zero_loop>:
    d582:	4288      	cmp	r0, r1
    d584:	bfb8      	it	lt
    d586:	f840 2b04 	strlt.w	r2, [r0], #4
    d58a:	dbfa      	blt.n	d582 <zero_loop>
    main();
    d58c:	f7fe ffc0 	bl	c510 <main>
    __asm("    bkpt     ");
    d590:	be00      	bkpt	0x0000
    d592:	0000      	.short	0x0000
    d594:	e000ed08 	.word	0xe000ed08
    d598:	0000c000 	.word	0x0000c000
    d59c:	e000ed88 	.word	0xe000ed88
    d5a0:	00010c04 	.word	0x00010c04
    d5a4:	10001000 	.word	0x10001000
    d5a8:	10001064 	.word	0x10001064
    d5ac:	10001064 	.word	0x10001064
    d5b0:	10004bd8 	.word	0x10004bd8

0000d5b4 <am_ctimer_isr>:
    .uFuncSel       = AM_HAL_PIN_11_ADCSE2,
};

void
am_ctimer_isr(void)
{
    d5b4:	b570      	push	{r4, r5, r6, lr}
  // Clear TimerA0 Interrupt.
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d5b6:	2001      	movs	r0, #1
{
    d5b8:	b084      	sub	sp, #16
  am_hal_ctimer_int_clear(AM_HAL_CTIMER_INT_TIMERA0);
    d5ba:	f001 f905 	bl	e7c8 <am_hal_ctimer_int_clear>
{
    am_hal_adc_config_t           ADCConfig;
    am_hal_adc_slot_config_t      ADCSlotConfig;

    // Initialize the ADC and get the handle.
    if ( AM_HAL_STATUS_SUCCESS != am_hal_adc_initialize(0, &g_ADCHandle) )
    d5be:	492b      	ldr	r1, [pc, #172]	; (d66c <am_ctimer_isr+0xb8>)
    d5c0:	2000      	movs	r0, #0
    d5c2:	f000 fbd1 	bl	dd68 <am_hal_adc_initialize>
    d5c6:	2800      	cmp	r0, #0
    d5c8:	d14c      	bne.n	d664 <am_ctimer_isr+0xb0>
    {
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    }

    // Power on the ADC.
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_power_control(g_ADCHandle,
    d5ca:	4c28      	ldr	r4, [pc, #160]	; (d66c <am_ctimer_isr+0xb8>)
    d5cc:	2200      	movs	r2, #0
    d5ce:	6820      	ldr	r0, [r4, #0]
    d5d0:	4611      	mov	r1, r2
    d5d2:	f000 fd93 	bl	e0fc <am_hal_adc_power_control>
    d5d6:	2800      	cmp	r0, #0
    d5d8:	d140      	bne.n	d65c <am_ctimer_isr+0xa8>
    }

    // Set up the ADC configuration parameters. These settings are reasonable
    // for accurate measurements at a low sample rate.
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    d5da:	2300      	movs	r3, #0
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d5dc:	2201      	movs	r2, #1
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    d5de:	2507      	movs	r5, #7
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d5e0:	a902      	add	r1, sp, #8
    d5e2:	6820      	ldr	r0, [r4, #0]
    ADCConfig.eClock             = AM_HAL_ADC_CLKSEL_HFRC;
    d5e4:	f88d 2008 	strb.w	r2, [sp, #8]
    ADCConfig.eRepeat            = AM_HAL_ADC_REPEATING_SCAN;
    d5e8:	f88d 200e 	strb.w	r2, [sp, #14]
    ADCConfig.ePolarity          = AM_HAL_ADC_TRIGPOL_RISING;
    d5ec:	f88d 3009 	strb.w	r3, [sp, #9]
    ADCConfig.eReference         = AM_HAL_ADC_REFSEL_INT_2P0;
    d5f0:	f88d 300b 	strb.w	r3, [sp, #11]
    ADCConfig.eClockMode         = AM_HAL_ADC_CLKMODE_LOW_POWER;
    d5f4:	f88d 300c 	strb.w	r3, [sp, #12]
    ADCConfig.ePowerMode         = AM_HAL_ADC_LPMODE0;
    d5f8:	f88d 300d 	strb.w	r3, [sp, #13]
    ADCConfig.eTrigger           = AM_HAL_ADC_TRIGSEL_SOFTWARE;
    d5fc:	f88d 500a 	strb.w	r5, [sp, #10]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure(g_ADCHandle, &ADCConfig))
    d600:	f000 fc22 	bl	de48 <am_hal_adc_configure>
    d604:	bb30      	cbnz	r0, d654 <am_ctimer_isr+0xa0>
    {
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    }

    // Set up an ADC slot
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d606:	2300      	movs	r3, #0
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    // ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE1;
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    d608:	2602      	movs	r6, #2
    ADCSlotConfig.bWindowCompare  = false;
    ADCSlotConfig.bEnabled        = true;
    d60a:	2501      	movs	r5, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d60c:	4619      	mov	r1, r3
    d60e:	466a      	mov	r2, sp
    d610:	6820      	ldr	r0, [r4, #0]
    ADCSlotConfig.eMeasToAvg      = AM_HAL_ADC_SLOT_AVG_1;
    d612:	f88d 3000 	strb.w	r3, [sp]
    ADCSlotConfig.ePrecisionMode  = AM_HAL_ADC_SLOT_14BIT;
    d616:	f88d 3001 	strb.w	r3, [sp, #1]
    ADCSlotConfig.bWindowCompare  = false;
    d61a:	f88d 3003 	strb.w	r3, [sp, #3]
    ADCSlotConfig.eChannel        = AM_HAL_ADC_SLOT_CHSEL_SE2;
    d61e:	f88d 6002 	strb.w	r6, [sp, #2]
    ADCSlotConfig.bEnabled        = true;
    d622:	f88d 5004 	strb.w	r5, [sp, #4]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_slot(g_ADCHandle, 0, &ADCSlotConfig))
    d626:	f000 fc47 	bl	deb8 <am_hal_adc_configure_slot>
    d62a:	b978      	cbnz	r0, d64c <am_ctimer_isr+0x98>
    {
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    }
  
    am_hal_adc_interrupt_enable(g_ADCHandle, AM_HAL_ADC_INT_CNVCMP );
    d62c:	2101      	movs	r1, #1
    d62e:	6820      	ldr	r0, [r4, #0]
    d630:	f000 fcb0 	bl	df94 <am_hal_adc_interrupt_enable>

    //
    // Enable the ADC.
    //
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_enable(g_ADCHandle))
    d634:	6820      	ldr	r0, [r4, #0]
    d636:	f000 fc75 	bl	df24 <am_hal_adc_enable>
    d63a:	b110      	cbz	r0, d642 <am_ctimer_isr+0x8e>
    {
        am_util_stdio_printf("Error - enabling ADC failed.\n");
    d63c:	480c      	ldr	r0, [pc, #48]	; (d670 <am_ctimer_isr+0xbc>)
    d63e:	f7ff ff5f 	bl	d500 <am_util_stdio_printf>
  am_hal_adc_sw_trigger(g_ADCHandle);
    d642:	6820      	ldr	r0, [r4, #0]
    d644:	f000 fd48 	bl	e0d8 <am_hal_adc_sw_trigger>
}
    d648:	b004      	add	sp, #16
    d64a:	bd70      	pop	{r4, r5, r6, pc}
        am_util_stdio_printf("Error - configuring ADC Slot 0 failed.\n");
    d64c:	4809      	ldr	r0, [pc, #36]	; (d674 <am_ctimer_isr+0xc0>)
    d64e:	f7ff ff57 	bl	d500 <am_util_stdio_printf>
    d652:	e7eb      	b.n	d62c <am_ctimer_isr+0x78>
        am_util_stdio_printf("Error - configuring ADC failed.\n");
    d654:	4808      	ldr	r0, [pc, #32]	; (d678 <am_ctimer_isr+0xc4>)
    d656:	f7ff ff53 	bl	d500 <am_util_stdio_printf>
    d65a:	e7d4      	b.n	d606 <am_ctimer_isr+0x52>
        am_util_stdio_printf("Error - ADC power on failed.\n");
    d65c:	4807      	ldr	r0, [pc, #28]	; (d67c <am_ctimer_isr+0xc8>)
    d65e:	f7ff ff4f 	bl	d500 <am_util_stdio_printf>
    d662:	e7ba      	b.n	d5da <am_ctimer_isr+0x26>
        am_util_stdio_printf("Error - reservation of the ADC instance failed.\n");
    d664:	4806      	ldr	r0, [pc, #24]	; (d680 <am_ctimer_isr+0xcc>)
    d666:	f7ff ff4b 	bl	d500 <am_util_stdio_printf>
    d66a:	e7ae      	b.n	d5ca <am_ctimer_isr+0x16>
    d66c:	1000116c 	.word	0x1000116c
    d670:	00010730 	.word	0x00010730
    d674:	00010708 	.word	0x00010708
    d678:	000106e4 	.word	0x000106e4
    d67c:	000106c4 	.word	0x000106c4
    d680:	00010690 	.word	0x00010690

0000d684 <am_adc_isr>:
{
    d684:	b510      	push	{r4, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d686:	4c24      	ldr	r4, [pc, #144]	; (d718 <am_adc_isr+0x94>)
{
    d688:	b086      	sub	sp, #24
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_status(g_ADCHandle, &ui32IntMask, false))
    d68a:	2200      	movs	r2, #0
    d68c:	6820      	ldr	r0, [r4, #0]
    d68e:	a902      	add	r1, sp, #8
    d690:	f000 fc96 	bl	dfc0 <am_hal_adc_interrupt_status>
    d694:	2800      	cmp	r0, #0
    d696:	d13b      	bne.n	d710 <am_adc_isr+0x8c>
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_interrupt_clear(g_ADCHandle, ui32IntMask))
    d698:	9902      	ldr	r1, [sp, #8]
    d69a:	6820      	ldr	r0, [r4, #0]
    d69c:	f000 fcae 	bl	dffc <am_hal_adc_interrupt_clear>
    d6a0:	2800      	cmp	r0, #0
    d6a2:	d131      	bne.n	d708 <am_adc_isr+0x84>
    if (ui32IntMask & AM_HAL_ADC_INT_CNVCMP)
    d6a4:	9b02      	ldr	r3, [sp, #8]
    d6a6:	07db      	lsls	r3, r3, #31
    d6a8:	d416      	bmi.n	d6d8 <am_adc_isr+0x54>
    audioSample = Sample.ui32Sample;
    d6aa:	4b1c      	ldr	r3, [pc, #112]	; (d71c <am_adc_isr+0x98>)
    d6ac:	9a04      	ldr	r2, [sp, #16]
static void adc_deconfig(void)
{
  //
  // Disable the ADC.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d6ae:	6820      	ldr	r0, [r4, #0]
    audioSample = Sample.ui32Sample;
    d6b0:	601a      	str	r2, [r3, #0]
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_disable(g_ADCHandle))
    d6b2:	f000 fc57 	bl	df64 <am_hal_adc_disable>
    d6b6:	bb18      	cbnz	r0, d700 <am_adc_isr+0x7c>
  }

  //
  // Enable the ADC power domain.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC))
    d6b8:	200a      	movs	r0, #10
    d6ba:	f002 f8c7 	bl	f84c <am_hal_pwrctrl_periph_disable>
    d6be:	b9d8      	cbnz	r0, d6f8 <am_adc_isr+0x74>
  }

  //
  // Initialize the ADC and get the handle.
  //
  if (AM_HAL_STATUS_SUCCESS != am_hal_adc_deinitialize(g_ADCHandle))
    d6c0:	6820      	ldr	r0, [r4, #0]
    d6c2:	f000 fba1 	bl	de08 <am_hal_adc_deinitialize>
    d6c6:	b110      	cbz	r0, d6ce <am_adc_isr+0x4a>
  {
    am_util_stdio_printf("Error - return of the ADC instance failed.\n");
    d6c8:	4815      	ldr	r0, [pc, #84]	; (d720 <am_adc_isr+0x9c>)
    d6ca:	f7ff ff19 	bl	d500 <am_util_stdio_printf>
    am_hal_adc_sw_trigger(g_ADCHandle);
    d6ce:	6820      	ldr	r0, [r4, #0]
    d6d0:	f000 fd02 	bl	e0d8 <am_hal_adc_sw_trigger>
}
    d6d4:	b006      	add	sp, #24
    d6d6:	bd10      	pop	{r4, pc}
        uint32_t    ui32NumSamples = 1;
    d6d8:	ab06      	add	r3, sp, #24
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d6da:	aa04      	add	r2, sp, #16
        uint32_t    ui32NumSamples = 1;
    d6dc:	2101      	movs	r1, #1
    d6de:	f843 1d0c 	str.w	r1, [r3, #-12]!
        if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_ADCHandle,
    d6e2:	6820      	ldr	r0, [r4, #0]
    d6e4:	9200      	str	r2, [sp, #0]
    d6e6:	2200      	movs	r2, #0
    d6e8:	f000 fc9a 	bl	e020 <am_hal_adc_samples_read>
    d6ec:	2800      	cmp	r0, #0
    d6ee:	d0dc      	beq.n	d6aa <am_adc_isr+0x26>
        am_util_stdio_printf("Error - ADC sample read from FIFO failed.\n");
    d6f0:	480c      	ldr	r0, [pc, #48]	; (d724 <am_adc_isr+0xa0>)
    d6f2:	f7ff ff05 	bl	d500 <am_util_stdio_printf>
    d6f6:	e7d8      	b.n	d6aa <am_adc_isr+0x26>
    am_util_stdio_printf("Error - disabling the ADC power domain failed.\n");
    d6f8:	480b      	ldr	r0, [pc, #44]	; (d728 <am_adc_isr+0xa4>)
    d6fa:	f7ff ff01 	bl	d500 <am_util_stdio_printf>
    d6fe:	e7df      	b.n	d6c0 <am_adc_isr+0x3c>
    am_util_stdio_printf("Error - disable ADC failed.\n");
    d700:	480a      	ldr	r0, [pc, #40]	; (d72c <am_adc_isr+0xa8>)
    d702:	f7ff fefd 	bl	d500 <am_util_stdio_printf>
    d706:	e7d7      	b.n	d6b8 <am_adc_isr+0x34>
        am_util_stdio_printf("Error clearing ADC interrupt status\n");
    d708:	4809      	ldr	r0, [pc, #36]	; (d730 <am_adc_isr+0xac>)
    d70a:	f7ff fef9 	bl	d500 <am_util_stdio_printf>
    d70e:	e7c9      	b.n	d6a4 <am_adc_isr+0x20>
        am_util_stdio_printf("Error reading ADC interrupt status\n");
    d710:	4808      	ldr	r0, [pc, #32]	; (d734 <am_adc_isr+0xb0>)
    d712:	f7ff fef5 	bl	d500 <am_util_stdio_printf>
    d716:	e7bf      	b.n	d698 <am_adc_isr+0x14>
    d718:	1000116c 	.word	0x1000116c
    d71c:	10001168 	.word	0x10001168
    d720:	00010664 	.word	0x00010664
    d724:	000105e8 	.word	0x000105e8
    d728:	00010634 	.word	0x00010634
    d72c:	00010614 	.word	0x00010614
    d730:	000105c0 	.word	0x000105c0
    d734:	0001059c 	.word	0x0001059c

0000d738 <initADC>:
{
    d738:	b508      	push	{r3, lr}
    am_hal_gpio_pinconfig(11, g_AM_PIN_11_ADCSE2);
    d73a:	4b0e      	ldr	r3, [pc, #56]	; (d774 <initADC+0x3c>)
    d73c:	200b      	movs	r0, #11
    d73e:	6819      	ldr	r1, [r3, #0]
    d740:	f001 f8a6 	bl	e890 <am_hal_gpio_pinconfig>
{
    // Start a timer to trigger the ADC periodically. This timer won't actually
    // be connected to the ADC (as can be done with Timer 3). Instead, we'll
    // generate interrupts to the CPU, and then use the CPU to trigger the ADC
    // in the CTIMER interrupt handler.
    am_hal_ctimer_config_single(0, AM_HAL_CTIMER_TIMERA,
    d744:	f44f 7215 	mov.w	r2, #596	; 0x254
    d748:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d74c:	2000      	movs	r0, #0
    d74e:	f000 ff67 	bl	e620 <am_hal_ctimer_config_single>
                                AM_HAL_CTIMER_LFRC_512HZ |
                                    AM_HAL_CTIMER_FN_REPEAT |
                                    AM_HAL_CTIMER_INT_ENABLE);
    am_hal_ctimer_int_enable(AM_HAL_CTIMER_INT_TIMERA0);
    d752:	2001      	movs	r0, #1
    d754:	f001 f824 	bl	e7a0 <am_hal_ctimer_int_enable>

    am_hal_ctimer_period_set(0, AM_HAL_CTIMER_TIMERA, ADC_SAMPLE_RATE, 0);
    d758:	2300      	movs	r3, #0
    d75a:	4618      	mov	r0, r3
    d75c:	2201      	movs	r2, #1
    d75e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d762:	f000 ffc7 	bl	e6f4 <am_hal_ctimer_period_set>
    
    // Start the timer
    am_hal_ctimer_start(0, AM_HAL_CTIMER_TIMERA);
    d766:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d76a:	2000      	movs	r0, #0
    d76c:	f000 ff98 	bl	e6a0 <am_hal_ctimer_start>
}
    d770:	2000      	movs	r0, #0
    d772:	bd08      	pop	{r3, pc}
    d774:	00010750 	.word	0x00010750

0000d778 <enableAdcInterrupts>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d778:	4b04      	ldr	r3, [pc, #16]	; (d78c <enableAdcInterrupts+0x14>)
    d77a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    d77e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    d782:	6019      	str	r1, [r3, #0]
    d784:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
    d786:	f001 ba35 	b.w	ebf4 <am_hal_interrupt_master_enable>
    d78a:	bf00      	nop
    d78c:	e000e100 	.word	0xe000e100

0000d790 <platform_read>:
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d790:	2b80      	cmp	r3, #128	; 0x80
    d792:	d84b      	bhi.n	d82c <platform_read+0x9c>
{
    d794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d798:	4690      	mov	r8, r2
    d79a:	b08b      	sub	sp, #44	; 0x2c
    d79c:	460e      	mov	r6, r1
    d79e:	461f      	mov	r7, r3
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d7a0:	2a00      	cmp	r2, #0
    d7a2:	d045      	beq.n	d830 <platform_read+0xa0>

    uint32_t retVal32 = 0;

    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d7a4:	4d25      	ldr	r5, [pc, #148]	; (d83c <platform_read+0xac>)
    iomTransfer.ui8Priority = 1;            // ?
    iomTransfer.ui32PauseCondition = 0;     // ?
    iomTransfer.ui32StatusSetClr = 0;       // ?

    // Send the first one...
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d84c <platform_read+0xbc>
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d7ac:	466c      	mov	r4, sp
    d7ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d7b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d7b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d7b4:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d7b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d7bc:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d7c0:	2501      	movs	r5, #1
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d7c2:	2400      	movs	r4, #0
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7c4:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.ui32NumBytes = 0;           // No data, just the instruction byte which is the sub-address
    d7c8:	9403      	str	r4, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7ca:	4669      	mov	r1, sp
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d7cc:	f88d 4010 	strb.w	r4, [sp, #16]
    iomTransfer.pui32TxBuffer = NULL;
    d7d0:	9405      	str	r4, [sp, #20]
    iomTransfer.pui32RxBuffer = NULL;
    d7d2:	9406      	str	r4, [sp, #24]
    iomTransfer.ui8RepeatCount = 0;         // ?
    d7d4:	f88d 401d 	strb.w	r4, [sp, #29]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d7d8:	9408      	str	r4, [sp, #32]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d7da:	9409      	str	r4, [sp, #36]	; 0x24
    iomTransfer.ui32Instr = (reg | 0x80);   // Offset;
    d7dc:	9602      	str	r6, [sp, #8]
    iomTransfer.ui32InstrLen = 1;           // 8-bit transfers
    d7de:	9501      	str	r5, [sp, #4]
    iomTransfer.bContinue = true;           // Don't release the I2C bus after this one...
    d7e0:	f88d 501c 	strb.w	r5, [sp, #28]
    iomTransfer.ui8Priority = 1;            // ?
    d7e4:	f88d 501e 	strb.w	r5, [sp, #30]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7e8:	f001 fd5e 	bl	f2a8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d7ec:	4604      	mov	r4, r0
    d7ee:	b9a8      	cbnz	r0, d81c <platform_read+0x8c>
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    iomTransfer.bContinue = false;
    
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d7f0:	4669      	mov	r1, sp
    d7f2:	f8d9 0000 	ldr.w	r0, [r9]
    iomTransfer.bContinue = false;
    d7f6:	f88d 401c 	strb.w	r4, [sp, #28]
    iomTransfer.eDirection = AM_HAL_IOM_RX;
    d7fa:	f88d 5010 	strb.w	r5, [sp, #16]
    iomTransfer.pui32RxBuffer = bufp;       // Link in the RX buffer
    d7fe:	f8cd 8018 	str.w	r8, [sp, #24]
    iomTransfer.ui32NumBytes = len;         // How many bytes to receive
    d802:	9703      	str	r7, [sp, #12]
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d804:	f001 fd50 	bl	f2a8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d808:	4604      	mov	r4, r0
    d80a:	b160      	cbz	r0, d826 <platform_read+0x96>
    {
        am_util_stdio_printf("Receive err: %d\n", retVal32);
    d80c:	4601      	mov	r1, r0
    d80e:	480c      	ldr	r0, [pc, #48]	; (d840 <platform_read+0xb0>)
    d810:	f7ff fe76 	bl	d500 <am_util_stdio_printf>
        return retVal32;
    d814:	4620      	mov	r0, r4
    }
    
    return 0;
}
    d816:	b00b      	add	sp, #44	; 0x2c
    d818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        am_util_stdio_printf("Send err: %d\n", retVal32);
    d81c:	4601      	mov	r1, r0
    d81e:	4809      	ldr	r0, [pc, #36]	; (d844 <platform_read+0xb4>)
    d820:	f7ff fe6e 	bl	d500 <am_util_stdio_printf>
        return retVal32;
    d824:	4620      	mov	r0, r4
}
    d826:	b00b      	add	sp, #44	; 0x2c
    d828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d82c:	2001      	movs	r0, #1
    d82e:	4770      	bx	lr
    if(bufp == NULL){ am_util_stdio_printf("No RX buffer provided\n"); return 1; } // Error, no rx buffer provided
    d830:	4805      	ldr	r0, [pc, #20]	; (d848 <platform_read+0xb8>)
    d832:	f7ff fe65 	bl	d500 <am_util_stdio_printf>
    d836:	2001      	movs	r0, #1
    d838:	e7f5      	b.n	d826 <platform_read+0x96>
    d83a:	bf00      	nop
    d83c:	10001000 	.word	0x10001000
    d840:	0001079c 	.word	0x0001079c
    d844:	0001078c 	.word	0x0001078c
    d848:	00010774 	.word	0x00010774
    d84c:	10001520 	.word	0x10001520

0000d850 <platform_write>:
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d850:	2b80      	cmp	r3, #128	; 0x80
    d852:	d845      	bhi.n	d8e0 <platform_write+0x90>
{
    d854:	b5f0      	push	{r4, r5, r6, r7, lr}
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d856:	4d26      	ldr	r5, [pc, #152]	; (d8f0 <platform_write+0xa0>)
    iomTransfer.pui32TxBuffer = i2cTX;
    d858:	4f26      	ldr	r7, [pc, #152]	; (d8f4 <platform_write+0xa4>)
    d85a:	468c      	mov	ip, r1
    d85c:	469e      	mov	lr, r3
    d85e:	4616      	mov	r6, r2
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    d862:	b08b      	sub	sp, #44	; 0x2c
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d864:	466c      	mov	r4, sp
    d866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d86a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d86c:	e895 0003 	ldmia.w	r5, {r0, r1}
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d870:	2200      	movs	r2, #0
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d872:	f04c 0380 	orr.w	r3, ip, #128	; 0x80
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d876:	2501      	movs	r5, #1
    iomTransfer.pui32RxBuffer = i2cRX;
    d878:	f8df c088 	ldr.w	ip, [pc, #136]	; d904 <platform_write+0xb4>
    iomTransfer.ui32Instr = (reg |0x80);    // Sub-address is the one 8-bit instruction
    d87c:	9302      	str	r3, [sp, #8]
    am_hal_iom_transfer_t iomTransfer = iomTransferDefault;
    d87e:	e884 0003 	stmia.w	r4, {r0, r1}
    iomTransfer.ui32NumBytes = len;         // Transfer len bytes of data
    d882:	f8cd e00c 	str.w	lr, [sp, #12]
    iomTransfer.ui32InstrLen = 1;           // Number of 8-bit transfers for the instruction phase
    d886:	9501      	str	r5, [sp, #4]
    iomTransfer.ui8Priority = 1;            // ?
    d888:	f88d 501e 	strb.w	r5, [sp, #30]
    iomTransfer.eDirection = AM_HAL_IOM_TX;
    d88c:	f88d 2010 	strb.w	r2, [sp, #16]
    iomTransfer.bContinue = false;          // Do release the bus after this transfer
    d890:	f88d 201c 	strb.w	r2, [sp, #28]
    iomTransfer.ui8RepeatCount = 0;         // ?
    d894:	f88d 201d 	strb.w	r2, [sp, #29]
    iomTransfer.ui32PauseCondition = 0;     // ?
    d898:	9208      	str	r2, [sp, #32]
    iomTransfer.ui32StatusSetClr = 0;       // ?
    d89a:	9209      	str	r2, [sp, #36]	; 0x24
    iomTransfer.pui32TxBuffer = i2cTX;
    d89c:	9705      	str	r7, [sp, #20]
    iomTransfer.pui32RxBuffer = i2cRX;
    d89e:	f8cd c018 	str.w	ip, [sp, #24]
    if(bufp == NULL){
    d8a2:	b1fe      	cbz	r6, d8e4 <platform_write+0x94>
    while(len--){
    d8a4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
    d8a8:	b289      	uxth	r1, r1
    d8aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d8ae:	f1be 0f00 	cmp.w	lr, #0
    d8b2:	d006      	beq.n	d8c2 <platform_write+0x72>
        *(i2cTX + len) = *(bufp + len);
    d8b4:	5c73      	ldrb	r3, [r6, r1]
    d8b6:	f847 3021 	str.w	r3, [r7, r1, lsl #2]
    while(len--){
    d8ba:	3901      	subs	r1, #1
    d8bc:	b289      	uxth	r1, r1
    d8be:	4291      	cmp	r1, r2
    d8c0:	d1f8      	bne.n	d8b4 <platform_write+0x64>
    retVal32 = am_hal_iom_blocking_transfer(iomHandle, &iomTransfer);
    d8c2:	4b0d      	ldr	r3, [pc, #52]	; (d8f8 <platform_write+0xa8>)
    d8c4:	4669      	mov	r1, sp
    d8c6:	6818      	ldr	r0, [r3, #0]
    d8c8:	f001 fcee 	bl	f2a8 <am_hal_iom_blocking_transfer>
    if (retVal32 != 0)
    d8cc:	4604      	mov	r4, r0
    d8ce:	b910      	cbnz	r0, d8d6 <platform_write+0x86>
        return retVal32;
    d8d0:	4620      	mov	r0, r4
}
    d8d2:	b00b      	add	sp, #44	; 0x2c
    d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_util_stdio_printf("Send err (phase 1): %d\n", retVal32);
    d8d6:	4601      	mov	r1, r0
    d8d8:	4808      	ldr	r0, [pc, #32]	; (d8fc <platform_write+0xac>)
    d8da:	f7ff fe11 	bl	d500 <am_util_stdio_printf>
    d8de:	e7f7      	b.n	d8d0 <platform_write+0x80>
    if(len > TF_ACC_MAX_XFER_SIZE){ return 1; } // Error, length too great
    d8e0:	2001      	movs	r0, #1
    d8e2:	4770      	bx	lr
        am_util_stdio_printf("No TX buffer provided\n");
    d8e4:	4806      	ldr	r0, [pc, #24]	; (d900 <platform_write+0xb0>)
    d8e6:	f7ff fe0b 	bl	d500 <am_util_stdio_printf>
        return 1; // Error no data to transmit
    d8ea:	4628      	mov	r0, r5
    d8ec:	e7f1      	b.n	d8d2 <platform_write+0x82>
    d8ee:	bf00      	nop
    d8f0:	10001000 	.word	0x10001000
    d8f4:	10001320 	.word	0x10001320
    d8f8:	10001520 	.word	0x10001520
    d8fc:	000107c8 	.word	0x000107c8
    d900:	000107b0 	.word	0x000107b0
    d904:	10001524 	.word	0x10001524

0000d908 <initAccelerometer>:
{
    d908:	b5f0      	push	{r4, r5, r6, r7, lr}
    dev_ctx.write_reg = platform_write;
    d90a:	4a2c      	ldr	r2, [pc, #176]	; (d9bc <initAccelerometer+0xb4>)
        .eInterfaceMode = AM_HAL_IOM_I2C_MODE,
        .ui32ClockFreq = AM_HAL_IOM_100KHZ
    };

    // Initialize the IOM.
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d90c:	4c2c      	ldr	r4, [pc, #176]	; (d9c0 <initAccelerometer+0xb8>)
    dev_ctx.write_reg = platform_write;
    d90e:	4b2d      	ldr	r3, [pc, #180]	; (d9c4 <initAccelerometer+0xbc>)
    dev_ctx.read_reg = platform_read;
    d910:	4f2d      	ldr	r7, [pc, #180]	; (d9c8 <initAccelerometer+0xc0>)
    am_hal_iom_config_t i2cConfig =
    d912:	4d2e      	ldr	r5, [pc, #184]	; (d9cc <initAccelerometer+0xc4>)
    dev_ctx.write_reg = platform_write;
    d914:	6013      	str	r3, [r2, #0]
{
    d916:	b087      	sub	sp, #28
    am_hal_iom_config_t i2cConfig =
    d918:	2300      	movs	r3, #0
    d91a:	2601      	movs	r6, #1
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d91c:	4621      	mov	r1, r4
    d91e:	2003      	movs	r0, #3
    am_hal_iom_config_t i2cConfig =
    d920:	9301      	str	r3, [sp, #4]
    d922:	9303      	str	r3, [sp, #12]
    d924:	9304      	str	r3, [sp, #16]
    d926:	9305      	str	r3, [sp, #20]
    dev_ctx.read_reg = platform_read;
    d928:	6057      	str	r7, [r2, #4]
    am_hal_iom_config_t i2cConfig =
    d92a:	f88d 6004 	strb.w	r6, [sp, #4]
    d92e:	9502      	str	r5, [sp, #8]
    retVal32 = am_hal_iom_initialize(AM_BSP_I2C_ACCELEROMETER_IOM, &iomHandle);
    d930:	f001 f9e4 	bl	ecfc <am_hal_iom_initialize>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -1;
    d934:	b140      	cbz	r0, d948 <initAccelerometer+0x40>
    lis2dh12_device_id_get(&dev_ctx, &whoamI);
    d936:	4c26      	ldr	r4, [pc, #152]	; (d9d0 <initAccelerometer+0xc8>)
    d938:	4820      	ldr	r0, [pc, #128]	; (d9bc <initAccelerometer+0xb4>)
    d93a:	4621      	mov	r1, r4
    d93c:	f000 f950 	bl	dbe0 <lis2dh12_device_id_get>
    if (whoamI != LIS2DH12_ID)
    d940:	7821      	ldrb	r1, [r4, #0]
    d942:	2933      	cmp	r1, #51	; 0x33
    d944:	d01b      	beq.n	d97e <initAccelerometer+0x76>
    d946:	e7fe      	b.n	d946 <initAccelerometer+0x3e>
    d948:	4602      	mov	r2, r0

    retVal32 = am_hal_iom_power_ctrl(iomHandle, AM_HAL_SYSCTRL_WAKE, false);
    d94a:	4601      	mov	r1, r0
    d94c:	6820      	ldr	r0, [r4, #0]
    d94e:	f001 fa6d 	bl	ee2c <am_hal_iom_power_ctrl>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -2;
    d952:	2800      	cmp	r0, #0
    d954:	d1ef      	bne.n	d936 <initAccelerometer+0x2e>
    
    // Set the required configuration settings for the IOM.
    //
    retVal32 = am_hal_iom_configure(iomHandle, &i2cConfig);
    d956:	a901      	add	r1, sp, #4
    d958:	6820      	ldr	r0, [r4, #0]
    d95a:	f001 fb77 	bl	f04c <am_hal_iom_configure>
    if (retVal32 != AM_HAL_STATUS_SUCCESS) return; // -3;
    d95e:	2800      	cmp	r0, #0
    d960:	d1e9      	bne.n	d936 <initAccelerometer+0x2e>

    //
    // Configure the IOM pins.
    //
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SDA_PIN,  g_AM_BSP_GPIO_IOM4_SCL); // 39
    d962:	4b1c      	ldr	r3, [pc, #112]	; (d9d4 <initAccelerometer+0xcc>)
    d964:	202b      	movs	r0, #43	; 0x2b
    d966:	6819      	ldr	r1, [r3, #0]
    d968:	f000 ff92 	bl	e890 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(AM_BSP_I2C_ACCELEROMETER_SCL_PIN,  g_AM_BSP_GPIO_IOM4_SDA); // 40
    d96c:	4b1a      	ldr	r3, [pc, #104]	; (d9d8 <initAccelerometer+0xd0>)
    d96e:	202a      	movs	r0, #42	; 0x2a
    d970:	6819      	ldr	r1, [r3, #0]
    d972:	f000 ff8d 	bl	e890 <am_hal_gpio_pinconfig>

    //
    // Enable the IOM.
    //
    retVal32 = am_hal_iom_enable(iomHandle);
    d976:	6820      	ldr	r0, [r4, #0]
    d978:	f001 f9e8 	bl	ed4c <am_hal_iom_enable>
    d97c:	e7db      	b.n	d936 <initAccelerometer+0x2e>
    am_util_stdio_printf("Whoami (should be 0x33): 0x%2x\n", whoamI);
    d97e:	4817      	ldr	r0, [pc, #92]	; (d9dc <initAccelerometer+0xd4>)
    d980:	f7ff fdbe 	bl	d500 <am_util_stdio_printf>
    lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
    d984:	2101      	movs	r1, #1
    d986:	480d      	ldr	r0, [pc, #52]	; (d9bc <initAccelerometer+0xb4>)
    d988:	f000 f8f6 	bl	db78 <lis2dh12_block_data_update_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d98c:	2103      	movs	r1, #3
    d98e:	480b      	ldr	r0, [pc, #44]	; (d9bc <initAccelerometer+0xb4>)
    d990:	f000 f854 	bl	da3c <lis2dh12_temperature_meas_set>
    lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_25Hz);
    d994:	2103      	movs	r1, #3
    d996:	4809      	ldr	r0, [pc, #36]	; (d9bc <initAccelerometer+0xb4>)
    d998:	f000 f8ba 	bl	db10 <lis2dh12_data_rate_set>
    lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
    d99c:	2100      	movs	r1, #0
    d99e:	4807      	ldr	r0, [pc, #28]	; (d9bc <initAccelerometer+0xb4>)
    d9a0:	f000 f8d0 	bl	db44 <lis2dh12_full_scale_set>
    lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
    d9a4:	2103      	movs	r1, #3
    d9a6:	4805      	ldr	r0, [pc, #20]	; (d9bc <initAccelerometer+0xb4>)
    d9a8:	f000 f848 	bl	da3c <lis2dh12_temperature_meas_set>
    lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
    d9ac:	2100      	movs	r1, #0
    d9ae:	4803      	ldr	r0, [pc, #12]	; (d9bc <initAccelerometer+0xb4>)
    d9b0:	f000 f85e 	bl	da70 <lis2dh12_operating_mode_set>
}
    d9b4:	2000      	movs	r0, #0
    d9b6:	b007      	add	sp, #28
    d9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9ba:	bf00      	nop
    d9bc:	10001314 	.word	0x10001314
    d9c0:	10001520 	.word	0x10001520
    d9c4:	0000d851 	.word	0x0000d851
    d9c8:	0000d791 	.word	0x0000d791
    d9cc:	000186a0 	.word	0x000186a0
    d9d0:	10001170 	.word	0x10001170
    d9d4:	00010810 	.word	0x00010810
    d9d8:	00010814 	.word	0x00010814
    d9dc:	00010754 	.word	0x00010754

0000d9e0 <lis2dh12_from_fs2_hr_to_mg>:
  */

float lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
  return ( (float)lsb / 16.0f ) * 1.0f;
}
    d9e0:	ee00 0a10 	vmov	s0, r0
    d9e4:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    d9e8:	4770      	bx	lr
    d9ea:	bf00      	nop

0000d9ec <lis2dh12_from_lsb_hr_to_celsius>:
    d9ec:	ee07 0a90 	vmov	s15, r0
    d9f0:	eefa 7acd 	vcvt.f32.s32	s15, s15, #6
    d9f4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    d9f8:	ee67 7a80 	vmul.f32	s15, s15, s0
    d9fc:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
    da00:	ee37 0a80 	vadd.f32	s0, s15, s0
    da04:	4770      	bx	lr
    da06:	bf00      	nop

0000da08 <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    da08:	b530      	push	{r4, r5, lr}
    da0a:	b083      	sub	sp, #12
    da0c:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da0e:	6845      	ldr	r5, [r0, #4]
    da10:	6880      	ldr	r0, [r0, #8]
    da12:	2301      	movs	r3, #1
    da14:	aa01      	add	r2, sp, #4
    da16:	2107      	movs	r1, #7
    da18:	47a8      	blx	r5
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
                          (uint8_t*)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
    da1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    da1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
    da22:	7023      	strb	r3, [r4, #0]

  return ret;
}
    da24:	b003      	add	sp, #12
    da26:	bd30      	pop	{r4, r5, pc}

0000da28 <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    da28:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da2a:	6844      	ldr	r4, [r0, #4]
    da2c:	6880      	ldr	r0, [r0, #8]
    da2e:	460a      	mov	r2, r1
    da30:	46a4      	mov	ip, r4
    da32:	2302      	movs	r3, #2
    da34:	210c      	movs	r1, #12
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
  return ret;
}
    da36:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da3a:	4760      	bx	ip

0000da3c <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(lis2dh12_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
    da3c:	b570      	push	{r4, r5, r6, lr}
    da3e:	b082      	sub	sp, #8
    da40:	4604      	mov	r4, r0
    da42:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da44:	6845      	ldr	r5, [r0, #4]
    da46:	6880      	ldr	r0, [r0, #8]
    da48:	aa01      	add	r2, sp, #4
    da4a:	2301      	movs	r3, #1
    da4c:	211f      	movs	r1, #31
    da4e:	47a8      	blx	r5
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);

  if (ret == 0) {
    da50:	b958      	cbnz	r0, da6a <lis2dh12_temperature_meas_set+0x2e>
    temp_cfg_reg.temp_en = (uint8_t) val;
    da52:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    da56:	6825      	ldr	r5, [r4, #0]
    da58:	68a0      	ldr	r0, [r4, #8]
    temp_cfg_reg.temp_en = (uint8_t) val;
    da5a:	f366 1387 	bfi	r3, r6, #6, #2
    da5e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    da62:	aa01      	add	r2, sp, #4
    da64:	2301      	movs	r3, #1
    da66:	211f      	movs	r1, #31
    da68:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
  }
  return ret;
}
    da6a:	b002      	add	sp, #8
    da6c:	bd70      	pop	{r4, r5, r6, pc}
    da6e:	bf00      	nop

0000da70 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(lis2dh12_ctx_t *ctx, lis2dh12_op_md_t val)
{
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	b082      	sub	sp, #8
    da74:	4604      	mov	r4, r0
    da76:	460d      	mov	r5, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da78:	6846      	ldr	r6, [r0, #4]
    da7a:	6880      	ldr	r0, [r0, #8]
    da7c:	466a      	mov	r2, sp
    da7e:	2301      	movs	r3, #1
    da80:	2120      	movs	r1, #32
    da82:	47b0      	blx	r6
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
    da84:	b108      	cbz	r0, da8a <lis2dh12_operating_mode_set+0x1a>
  } 
  if (ret == 0) {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    da86:	b002      	add	sp, #8
    da88:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    da8a:	aa01      	add	r2, sp, #4
    da8c:	6866      	ldr	r6, [r4, #4]
    da8e:	68a0      	ldr	r0, [r4, #8]
    da90:	2301      	movs	r3, #1
    da92:	2123      	movs	r1, #35	; 0x23
    da94:	47b0      	blx	r6
  if (ret == 0) {
    da96:	2800      	cmp	r0, #0
    da98:	d1f5      	bne.n	da86 <lis2dh12_operating_mode_set+0x16>
    if ( val == LIS2DH12_HR_12bit ) {
    da9a:	b9dd      	cbnz	r5, dad4 <lis2dh12_operating_mode_set+0x64>
      ctrl_reg1.lpen = 0;
    da9c:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    daa0:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    daa4:	f365 02c3 	bfi	r2, r5, #3, #1
      ctrl_reg4.hr   = 1;
    daa8:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg1.lpen = 0;
    daac:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 1;
    dab0:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    dab4:	466a      	mov	r2, sp
    dab6:	6825      	ldr	r5, [r4, #0]
    dab8:	68a0      	ldr	r0, [r4, #8]
    daba:	2301      	movs	r3, #1
    dabc:	2120      	movs	r1, #32
    dabe:	47a8      	blx	r5
  if (ret == 0) {
    dac0:	2800      	cmp	r0, #0
    dac2:	d1e0      	bne.n	da86 <lis2dh12_operating_mode_set+0x16>
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    dac4:	aa01      	add	r2, sp, #4
    dac6:	6825      	ldr	r5, [r4, #0]
    dac8:	68a0      	ldr	r0, [r4, #8]
    daca:	2301      	movs	r3, #1
    dacc:	2123      	movs	r1, #35	; 0x23
    dace:	47a8      	blx	r5
}
    dad0:	b002      	add	sp, #8
    dad2:	bd70      	pop	{r4, r5, r6, pc}
    if (val == LIS2DH12_NM_10bit) {
    dad4:	2d01      	cmp	r5, #1
    dad6:	d10c      	bne.n	daf2 <lis2dh12_operating_mode_set+0x82>
      ctrl_reg1.lpen = 0;
    dad8:	f89d 2000 	ldrb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    dadc:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ctrl_reg1.lpen = 0;
    dae0:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg4.hr   = 0;
    dae4:	f360 03c3 	bfi	r3, r0, #3, #1
      ctrl_reg1.lpen = 0;
    dae8:	f88d 2000 	strb.w	r2, [sp]
      ctrl_reg4.hr   = 0;
    daec:	f88d 3004 	strb.w	r3, [sp, #4]
    daf0:	e7e0      	b.n	dab4 <lis2dh12_operating_mode_set+0x44>
    if (val == LIS2DH12_LP_8bit) {
    daf2:	2d02      	cmp	r5, #2
    daf4:	d1de      	bne.n	dab4 <lis2dh12_operating_mode_set+0x44>
      ctrl_reg1.lpen = 1;
    daf6:	f89d 3000 	ldrb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    dafa:	f89d 2004 	ldrb.w	r2, [sp, #4]
      ctrl_reg1.lpen = 1;
    dafe:	f043 0308 	orr.w	r3, r3, #8
      ctrl_reg4.hr   = 0;
    db02:	f360 02c3 	bfi	r2, r0, #3, #1
      ctrl_reg1.lpen = 1;
    db06:	f88d 3000 	strb.w	r3, [sp]
      ctrl_reg4.hr   = 0;
    db0a:	f88d 2004 	strb.w	r2, [sp, #4]
    db0e:	e7d1      	b.n	dab4 <lis2dh12_operating_mode_set+0x44>

0000db10 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(lis2dh12_ctx_t *ctx, lis2dh12_odr_t val)
{
    db10:	b570      	push	{r4, r5, r6, lr}
    db12:	b082      	sub	sp, #8
    db14:	4604      	mov	r4, r0
    db16:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    db18:	6845      	ldr	r5, [r0, #4]
    db1a:	6880      	ldr	r0, [r0, #8]
    db1c:	aa01      	add	r2, sp, #4
    db1e:	2301      	movs	r3, #1
    db20:	2120      	movs	r1, #32
    db22:	47a8      	blx	r5
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);

  if (ret == 0) {
    db24:	b958      	cbnz	r0, db3e <lis2dh12_data_rate_set+0x2e>
    ctrl_reg1.odr = (uint8_t)val;
    db26:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db2a:	6825      	ldr	r5, [r4, #0]
    db2c:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg1.odr = (uint8_t)val;
    db2e:	f366 1307 	bfi	r3, r6, #4, #4
    db32:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db36:	aa01      	add	r2, sp, #4
    db38:	2301      	movs	r3, #1
    db3a:	2120      	movs	r1, #32
    db3c:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
  }
  return ret;
}
    db3e:	b002      	add	sp, #8
    db40:	bd70      	pop	{r4, r5, r6, pc}
    db42:	bf00      	nop

0000db44 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(lis2dh12_ctx_t *ctx, lis2dh12_fs_t val)
{
    db44:	b570      	push	{r4, r5, r6, lr}
    db46:	b082      	sub	sp, #8
    db48:	4604      	mov	r4, r0
    db4a:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    db4c:	6845      	ldr	r5, [r0, #4]
    db4e:	6880      	ldr	r0, [r0, #8]
    db50:	aa01      	add	r2, sp, #4
    db52:	2301      	movs	r3, #1
    db54:	2123      	movs	r1, #35	; 0x23
    db56:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    db58:	b958      	cbnz	r0, db72 <lis2dh12_full_scale_set+0x2e>
    ctrl_reg4.fs = (uint8_t)val;
    db5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db5e:	6825      	ldr	r5, [r4, #0]
    db60:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.fs = (uint8_t)val;
    db62:	f366 1305 	bfi	r3, r6, #4, #2
    db66:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db6a:	aa01      	add	r2, sp, #4
    db6c:	2301      	movs	r3, #1
    db6e:	2123      	movs	r1, #35	; 0x23
    db70:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    db72:	b002      	add	sp, #8
    db74:	bd70      	pop	{r4, r5, r6, pc}
    db76:	bf00      	nop

0000db78 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(lis2dh12_ctx_t *ctx, uint8_t val)
{
    db78:	b570      	push	{r4, r5, r6, lr}
    db7a:	b082      	sub	sp, #8
    db7c:	4604      	mov	r4, r0
    db7e:	460e      	mov	r6, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    db80:	6845      	ldr	r5, [r0, #4]
    db82:	6880      	ldr	r0, [r0, #8]
    db84:	aa01      	add	r2, sp, #4
    db86:	2301      	movs	r3, #1
    db88:	2123      	movs	r1, #35	; 0x23
    db8a:	47a8      	blx	r5
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  if (ret == 0) {
    db8c:	b958      	cbnz	r0, dba6 <lis2dh12_block_data_update_set+0x2e>
    ctrl_reg4.bdu = val;
    db8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db92:	6825      	ldr	r5, [r4, #0]
    db94:	68a0      	ldr	r0, [r4, #8]
    ctrl_reg4.bdu = val;
    db96:	f366 13c7 	bfi	r3, r6, #7, #1
    db9a:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    db9e:	aa01      	add	r2, sp, #4
    dba0:	2301      	movs	r3, #1
    dba2:	2123      	movs	r1, #35	; 0x23
    dba4:	47a8      	blx	r5
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
  }
  return ret;
}
    dba6:	b002      	add	sp, #8
    dba8:	bd70      	pop	{r4, r5, r6, pc}
    dbaa:	bf00      	nop

0000dbac <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(lis2dh12_ctx_t *ctx, uint8_t *val)
{
    dbac:	b530      	push	{r4, r5, lr}
    dbae:	b083      	sub	sp, #12
    dbb0:	460c      	mov	r4, r1
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    dbb2:	6845      	ldr	r5, [r0, #4]
    dbb4:	6880      	ldr	r0, [r0, #8]
    dbb6:	2301      	movs	r3, #1
    dbb8:	aa01      	add	r2, sp, #4
    dbba:	2127      	movs	r1, #39	; 0x27
    dbbc:	47a8      	blx	r5
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
  *val = status_reg.zyxda;
    dbbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    dbc2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    dbc6:	7023      	strb	r3, [r4, #0]

  return ret;
}
    dbc8:	b003      	add	sp, #12
    dbca:	bd30      	pop	{r4, r5, pc}

0000dbcc <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    dbcc:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    dbce:	6844      	ldr	r4, [r0, #4]
    dbd0:	6880      	ldr	r0, [r0, #8]
    dbd2:	460a      	mov	r2, r1
    dbd4:	46a4      	mov	ip, r4
    dbd6:	2306      	movs	r3, #6
    dbd8:	2128      	movs	r1, #40	; 0x28
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
  return ret;
}
    dbda:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    dbde:	4760      	bx	ip

0000dbe0 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(lis2dh12_ctx_t *ctx, uint8_t *buff)
{
    dbe0:	b410      	push	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    dbe2:	6844      	ldr	r4, [r0, #4]
    dbe4:	6880      	ldr	r0, [r0, #8]
    dbe6:	460a      	mov	r2, r1
    dbe8:	46a4      	mov	ip, r4
    dbea:	2301      	movs	r3, #1
    dbec:	210f      	movs	r1, #15
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
  return ret;
}
    dbee:	f85d 4b04 	ldr.w	r4, [sp], #4
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    dbf2:	4760      	bx	ip

0000dbf4 <am_bsp_uart_string_print>:
    dbf4:	b510      	push	{r4, lr}
    dbf6:	b086      	sub	sp, #24
    dbf8:	7804      	ldrb	r4, [r0, #0]
    dbfa:	2300      	movs	r3, #0
    dbfc:	9300      	str	r3, [sp, #0]
    dbfe:	b13c      	cbz	r4, dc10 <am_bsp_uart_string_print+0x1c>
    dc00:	4603      	mov	r3, r0
    dc02:	f1c0 0201 	rsb	r2, r0, #1
    dc06:	18d4      	adds	r4, r2, r3
    dc08:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    dc0c:	2900      	cmp	r1, #0
    dc0e:	d1fa      	bne.n	dc06 <am_bsp_uart_string_print+0x12>
    dc10:	4b09      	ldr	r3, [pc, #36]	; (dc38 <am_bsp_uart_string_print+0x44>)
    dc12:	9002      	str	r0, [sp, #8]
    dc14:	2200      	movs	r2, #0
    dc16:	6818      	ldr	r0, [r3, #0]
    dc18:	9403      	str	r4, [sp, #12]
    dc1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dc1e:	a901      	add	r1, sp, #4
    dc20:	9304      	str	r3, [sp, #16]
    dc22:	9201      	str	r2, [sp, #4]
    dc24:	f8cd d014 	str.w	sp, [sp, #20]
    dc28:	f002 f8ca 	bl	fdc0 <am_hal_uart_transfer>
    dc2c:	9b00      	ldr	r3, [sp, #0]
    dc2e:	42a3      	cmp	r3, r4
    dc30:	d000      	beq.n	dc34 <am_bsp_uart_string_print+0x40>
    dc32:	e7fe      	b.n	dc32 <am_bsp_uart_string_print+0x3e>
    dc34:	b006      	add	sp, #24
    dc36:	bd10      	pop	{r4, pc}
    dc38:	10001174 	.word	0x10001174

0000dc3c <am_bsp_low_power_init>:
    dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc3e:	f001 fcef 	bl	f620 <am_hal_itm_disable>
    dc42:	2000      	movs	r0, #0
    dc44:	f7fe fe76 	bl	c934 <am_util_stdio_printf_init>
    dc48:	4b12      	ldr	r3, [pc, #72]	; (dc94 <am_bsp_low_power_init+0x58>)
    dc4a:	4f13      	ldr	r7, [pc, #76]	; (dc98 <am_bsp_low_power_init+0x5c>)
    dc4c:	6819      	ldr	r1, [r3, #0]
    dc4e:	2021      	movs	r0, #33	; 0x21
    dc50:	f000 fe1e 	bl	e890 <am_hal_gpio_pinconfig>
    dc54:	f001 fe26 	bl	f8a4 <am_hal_pwrctrl_low_power_init>
    dc58:	2001      	movs	r0, #1
    dc5a:	f001 fe95 	bl	f988 <am_hal_rtc_osc_select>
    dc5e:	2100      	movs	r1, #0
    dc60:	2003      	movs	r0, #3
    dc62:	f000 fc51 	bl	e508 <am_hal_clkgen_control>
    dc66:	f001 fe97 	bl	f998 <am_hal_rtc_osc_disable>
    dc6a:	4b0c      	ldr	r3, [pc, #48]	; (dc9c <am_bsp_low_power_init+0x60>)
    dc6c:	681e      	ldr	r6, [r3, #0]
    dc6e:	2400      	movs	r4, #0
    dc70:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    dc74:	4631      	mov	r1, r6
    dc76:	4628      	mov	r0, r5
    dc78:	f000 fe0a 	bl	e890 <am_hal_gpio_pinconfig>
    dc7c:	2103      	movs	r1, #3
    dc7e:	4628      	mov	r0, r5
    dc80:	f000 ff74 	bl	eb6c <am_hal_gpio_state_write>
    dc84:	3401      	adds	r4, #1
    dc86:	4628      	mov	r0, r5
    dc88:	2100      	movs	r1, #0
    dc8a:	f000 ff6f 	bl	eb6c <am_hal_gpio_state_write>
    dc8e:	2c04      	cmp	r4, #4
    dc90:	d1ee      	bne.n	dc70 <am_bsp_low_power_init+0x34>
    dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc94:	00010950 	.word	0x00010950
    dc98:	10001028 	.word	0x10001028
    dc9c:	00010954 	.word	0x00010954

0000dca0 <am_bsp_debug_printf_disable>:
    dca0:	b538      	push	{r3, r4, r5, lr}
    dca2:	4b17      	ldr	r3, [pc, #92]	; (dd00 <am_bsp_debug_printf_disable+0x60>)
    dca4:	681c      	ldr	r4, [r3, #0]
    dca6:	2c01      	cmp	r4, #1
    dca8:	d002      	beq.n	dcb0 <am_bsp_debug_printf_disable+0x10>
    dcaa:	2c02      	cmp	r4, #2
    dcac:	d00c      	beq.n	dcc8 <am_bsp_debug_printf_disable+0x28>
    dcae:	bd38      	pop	{r3, r4, r5, pc}
    dcb0:	f001 fcb6 	bl	f620 <am_hal_itm_disable>
    dcb4:	2000      	movs	r0, #0
    dcb6:	f7fe fe3d 	bl	c934 <am_util_stdio_printf_init>
    dcba:	4b12      	ldr	r3, [pc, #72]	; (dd04 <am_bsp_debug_printf_disable+0x64>)
    dcbc:	2021      	movs	r0, #33	; 0x21
    dcbe:	6819      	ldr	r1, [r3, #0]
    dcc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dcc4:	f000 bde4 	b.w	e890 <am_hal_gpio_pinconfig>
    dcc8:	4d0f      	ldr	r5, [pc, #60]	; (dd08 <am_bsp_debug_printf_disable+0x68>)
    dcca:	6828      	ldr	r0, [r5, #0]
    dccc:	f002 fab2 	bl	10234 <am_hal_uart_tx_flush>
    dcd0:	2000      	movs	r0, #0
    dcd2:	f7fe fe2f 	bl	c934 <am_util_stdio_printf_init>
    dcd6:	4621      	mov	r1, r4
    dcd8:	2200      	movs	r2, #0
    dcda:	6828      	ldr	r0, [r5, #0]
    dcdc:	f001 feda 	bl	fa94 <am_hal_uart_power_control>
    dce0:	6828      	ldr	r0, [r5, #0]
    dce2:	f001 fec3 	bl	fa6c <am_hal_uart_deinitialize>
    dce6:	4b07      	ldr	r3, [pc, #28]	; (dd04 <am_bsp_debug_printf_disable+0x64>)
    dce8:	681c      	ldr	r4, [r3, #0]
    dcea:	2030      	movs	r0, #48	; 0x30
    dcec:	4621      	mov	r1, r4
    dcee:	f000 fdcf 	bl	e890 <am_hal_gpio_pinconfig>
    dcf2:	4621      	mov	r1, r4
    dcf4:	2031      	movs	r0, #49	; 0x31
    dcf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    dcfa:	f000 bdc9 	b.w	e890 <am_hal_gpio_pinconfig>
    dcfe:	bf00      	nop
    dd00:	10001178 	.word	0x10001178
    dd04:	00010950 	.word	0x00010950
    dd08:	10001174 	.word	0x10001174

0000dd0c <am_bsp_uart_printf_enable>:
    dd0c:	b510      	push	{r4, lr}
    dd0e:	4c10      	ldr	r4, [pc, #64]	; (dd50 <am_bsp_uart_printf_enable+0x44>)
    dd10:	4b10      	ldr	r3, [pc, #64]	; (dd54 <am_bsp_uart_printf_enable+0x48>)
    dd12:	4621      	mov	r1, r4
    dd14:	2202      	movs	r2, #2
    dd16:	2000      	movs	r0, #0
    dd18:	601a      	str	r2, [r3, #0]
    dd1a:	f001 fe7f 	bl	fa1c <am_hal_uart_initialize>
    dd1e:	2200      	movs	r2, #0
    dd20:	4611      	mov	r1, r2
    dd22:	6820      	ldr	r0, [r4, #0]
    dd24:	f001 feb6 	bl	fa94 <am_hal_uart_power_control>
    dd28:	6820      	ldr	r0, [r4, #0]
    dd2a:	490b      	ldr	r1, [pc, #44]	; (dd58 <am_bsp_uart_printf_enable+0x4c>)
    dd2c:	f001 ff24 	bl	fb78 <am_hal_uart_configure>
    dd30:	4b0a      	ldr	r3, [pc, #40]	; (dd5c <am_bsp_uart_printf_enable+0x50>)
    dd32:	2030      	movs	r0, #48	; 0x30
    dd34:	6819      	ldr	r1, [r3, #0]
    dd36:	f000 fdab 	bl	e890 <am_hal_gpio_pinconfig>
    dd3a:	4b09      	ldr	r3, [pc, #36]	; (dd60 <am_bsp_uart_printf_enable+0x54>)
    dd3c:	2031      	movs	r0, #49	; 0x31
    dd3e:	6819      	ldr	r1, [r3, #0]
    dd40:	f000 fda6 	bl	e890 <am_hal_gpio_pinconfig>
    dd44:	4807      	ldr	r0, [pc, #28]	; (dd64 <am_bsp_uart_printf_enable+0x58>)
    dd46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd4a:	f7fe bdf3 	b.w	c934 <am_util_stdio_printf_init>
    dd4e:	bf00      	nop
    dd50:	10001174 	.word	0x10001174
    dd54:	10001178 	.word	0x10001178
    dd58:	000107e0 	.word	0x000107e0
    dd5c:	0001080c 	.word	0x0001080c
    dd60:	00010808 	.word	0x00010808
    dd64:	0000dbf5 	.word	0x0000dbf5

0000dd68 <am_hal_adc_initialize>:
    dd68:	b108      	cbz	r0, dd6e <am_hal_adc_initialize+0x6>
    dd6a:	2005      	movs	r0, #5
    dd6c:	4770      	bx	lr
    dd6e:	b139      	cbz	r1, dd80 <am_hal_adc_initialize+0x18>
    dd70:	4a1b      	ldr	r2, [pc, #108]	; (dde0 <am_hal_adc_initialize+0x78>)
    dd72:	b538      	push	{r3, r4, r5, lr}
    dd74:	78d3      	ldrb	r3, [r2, #3]
    dd76:	f013 0401 	ands.w	r4, r3, #1
    dd7a:	d003      	beq.n	dd84 <am_hal_adc_initialize+0x1c>
    dd7c:	2007      	movs	r0, #7
    dd7e:	bd38      	pop	{r3, r4, r5, pc}
    dd80:	2006      	movs	r0, #6
    dd82:	4770      	bx	lr
    dd84:	f043 0301 	orr.w	r3, r3, #1
    dd88:	70d3      	strb	r3, [r2, #3]
    dd8a:	6813      	ldr	r3, [r2, #0]
    dd8c:	4d15      	ldr	r5, [pc, #84]	; (dde4 <am_hal_adc_initialize+0x7c>)
    dd8e:	4816      	ldr	r0, [pc, #88]	; (dde8 <am_hal_adc_initialize+0x80>)
    dd90:	6054      	str	r4, [r2, #4]
    dd92:	f365 0317 	bfi	r3, r5, #0, #24
    dd96:	6013      	str	r3, [r2, #0]
    dd98:	6004      	str	r4, [r0, #0]
    dd9a:	600a      	str	r2, [r1, #0]
    dd9c:	4813      	ldr	r0, [pc, #76]	; (ddec <am_hal_adc_initialize+0x84>)
    dd9e:	4d14      	ldr	r5, [pc, #80]	; (ddf0 <am_hal_adc_initialize+0x88>)
    dda0:	f000 fd6c 	bl	e87c <am_hal_flash_load_ui32>
    dda4:	6028      	str	r0, [r5, #0]
    dda6:	4813      	ldr	r0, [pc, #76]	; (ddf4 <am_hal_adc_initialize+0x8c>)
    dda8:	f000 fd68 	bl	e87c <am_hal_flash_load_ui32>
    ddac:	6068      	str	r0, [r5, #4]
    ddae:	4812      	ldr	r0, [pc, #72]	; (ddf8 <am_hal_adc_initialize+0x90>)
    ddb0:	f000 fd64 	bl	e87c <am_hal_flash_load_ui32>
    ddb4:	682b      	ldr	r3, [r5, #0]
    ddb6:	60a8      	str	r0, [r5, #8]
    ddb8:	3301      	adds	r3, #1
    ddba:	d008      	beq.n	ddce <am_hal_adc_initialize+0x66>
    ddbc:	686b      	ldr	r3, [r5, #4]
    ddbe:	3301      	adds	r3, #1
    ddc0:	d005      	beq.n	ddce <am_hal_adc_initialize+0x66>
    ddc2:	3001      	adds	r0, #1
    ddc4:	d003      	beq.n	ddce <am_hal_adc_initialize+0x66>
    ddc6:	2301      	movs	r3, #1
    ddc8:	732b      	strb	r3, [r5, #12]
    ddca:	4620      	mov	r0, r4
    ddcc:	bd38      	pop	{r3, r4, r5, pc}
    ddce:	490b      	ldr	r1, [pc, #44]	; (ddfc <am_hal_adc_initialize+0x94>)
    ddd0:	4a0b      	ldr	r2, [pc, #44]	; (de00 <am_hal_adc_initialize+0x98>)
    ddd2:	4b0c      	ldr	r3, [pc, #48]	; (de04 <am_hal_adc_initialize+0x9c>)
    ddd4:	6029      	str	r1, [r5, #0]
    ddd6:	2000      	movs	r0, #0
    ddd8:	606a      	str	r2, [r5, #4]
    ddda:	60ab      	str	r3, [r5, #8]
    dddc:	7328      	strb	r0, [r5, #12]
    ddde:	bd38      	pop	{r3, r4, r5, pc}
    dde0:	10001728 	.word	0x10001728
    dde4:	00afafaf 	.word	0x00afafaf
    dde8:	10001724 	.word	0x10001724
    ddec:	50023840 	.word	0x50023840
    ddf0:	1000117c 	.word	0x1000117c
    ddf4:	50023844 	.word	0x50023844
    ddf8:	50023848 	.word	0x50023848
    ddfc:	4395c000 	.word	0x4395c000
    de00:	3f839874 	.word	0x3f839874
    de04:	bb8c47a1 	.word	0xbb8c47a1

0000de08 <am_hal_adc_deinitialize>:
    de08:	b128      	cbz	r0, de16 <am_hal_adc_deinitialize+0xe>
    de0a:	6803      	ldr	r3, [r0, #0]
    de0c:	4a0c      	ldr	r2, [pc, #48]	; (de40 <am_hal_adc_deinitialize+0x38>)
    de0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de12:	4293      	cmp	r3, r2
    de14:	d001      	beq.n	de1a <am_hal_adc_deinitialize+0x12>
    de16:	2002      	movs	r0, #2
    de18:	4770      	bx	lr
    de1a:	78c3      	ldrb	r3, [r0, #3]
    de1c:	079b      	lsls	r3, r3, #30
    de1e:	d508      	bpl.n	de32 <am_hal_adc_deinitialize+0x2a>
    de20:	4b08      	ldr	r3, [pc, #32]	; (de44 <am_hal_adc_deinitialize+0x3c>)
    de22:	681a      	ldr	r2, [r3, #0]
    de24:	f36f 0200 	bfc	r2, #0, #1
    de28:	601a      	str	r2, [r3, #0]
    de2a:	78c3      	ldrb	r3, [r0, #3]
    de2c:	f36f 0341 	bfc	r3, #1, #1
    de30:	70c3      	strb	r3, [r0, #3]
    de32:	78c3      	ldrb	r3, [r0, #3]
    de34:	f36f 0300 	bfc	r3, #0, #1
    de38:	70c3      	strb	r3, [r0, #3]
    de3a:	2000      	movs	r0, #0
    de3c:	4770      	bx	lr
    de3e:	bf00      	nop
    de40:	01afafaf 	.word	0x01afafaf
    de44:	50010000 	.word	0x50010000

0000de48 <am_hal_adc_configure>:
    de48:	b128      	cbz	r0, de56 <am_hal_adc_configure+0xe>
    de4a:	6803      	ldr	r3, [r0, #0]
    de4c:	4a18      	ldr	r2, [pc, #96]	; (deb0 <am_hal_adc_configure+0x68>)
    de4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    de52:	4293      	cmp	r3, r2
    de54:	d001      	beq.n	de5a <am_hal_adc_configure+0x12>
    de56:	2002      	movs	r0, #2
    de58:	4770      	bx	lr
    de5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    de5c:	7808      	ldrb	r0, [r1, #0]
    de5e:	784d      	ldrb	r5, [r1, #1]
    de60:	788c      	ldrb	r4, [r1, #2]
    de62:	f891 e003 	ldrb.w	lr, [r1, #3]
    de66:	790f      	ldrb	r7, [r1, #4]
    de68:	794a      	ldrb	r2, [r1, #5]
    de6a:	798b      	ldrb	r3, [r1, #6]
    de6c:	4e11      	ldr	r6, [pc, #68]	; (deb4 <am_hal_adc_configure+0x6c>)
    de6e:	0600      	lsls	r0, r0, #24
    de70:	04ed      	lsls	r5, r5, #19
    de72:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    de76:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
    de7a:	4328      	orrs	r0, r5
    de7c:	0424      	lsls	r4, r4, #16
    de7e:	ea4f 210e 	mov.w	r1, lr, lsl #8
    de82:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    de86:	f404 24e0 	and.w	r4, r4, #458752	; 0x70000
    de8a:	4304      	orrs	r4, r0
    de8c:	f401 7040 	and.w	r0, r1, #768	; 0x300
    de90:	0139      	lsls	r1, r7, #4
    de92:	4320      	orrs	r0, r4
    de94:	f001 0110 	and.w	r1, r1, #16
    de98:	00d2      	lsls	r2, r2, #3
    de9a:	4301      	orrs	r1, r0
    de9c:	f002 0208 	and.w	r2, r2, #8
    dea0:	009b      	lsls	r3, r3, #2
    dea2:	430a      	orrs	r2, r1
    dea4:	f003 0304 	and.w	r3, r3, #4
    dea8:	4313      	orrs	r3, r2
    deaa:	6033      	str	r3, [r6, #0]
    deac:	2000      	movs	r0, #0
    deae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    deb0:	01afafaf 	.word	0x01afafaf
    deb4:	50010000 	.word	0x50010000

0000deb8 <am_hal_adc_configure_slot>:
    deb8:	b128      	cbz	r0, dec6 <am_hal_adc_configure_slot+0xe>
    deba:	6803      	ldr	r3, [r0, #0]
    debc:	4816      	ldr	r0, [pc, #88]	; (df18 <am_hal_adc_configure_slot+0x60>)
    debe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dec2:	4283      	cmp	r3, r0
    dec4:	d001      	beq.n	deca <am_hal_adc_configure_slot+0x12>
    dec6:	2002      	movs	r0, #2
    dec8:	4770      	bx	lr
    deca:	2907      	cmp	r1, #7
    decc:	d901      	bls.n	ded2 <am_hal_adc_configure_slot+0x1a>
    dece:	2005      	movs	r0, #5
    ded0:	4770      	bx	lr
    ded2:	b5f0      	push	{r4, r5, r6, r7, lr}
    ded4:	7813      	ldrb	r3, [r2, #0]
    ded6:	7854      	ldrb	r4, [r2, #1]
    ded8:	7890      	ldrb	r0, [r2, #2]
    deda:	78d7      	ldrb	r7, [r2, #3]
    dedc:	f892 e004 	ldrb.w	lr, [r2, #4]
    dee0:	4d0e      	ldr	r5, [pc, #56]	; (df1c <am_hal_adc_configure_slot+0x64>)
    dee2:	4e0f      	ldr	r6, [pc, #60]	; (df20 <am_hal_adc_configure_slot+0x68>)
    dee4:	061b      	lsls	r3, r3, #24
    dee6:	0424      	lsls	r4, r4, #16
    dee8:	f404 3440 	and.w	r4, r4, #196608	; 0x30000
    deec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    def0:	4323      	orrs	r3, r4
    def2:	0202      	lsls	r2, r0, #8
    def4:	ea43 0e0e 	orr.w	lr, r3, lr
    def8:	440d      	add	r5, r1
    defa:	007b      	lsls	r3, r7, #1
    defc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    df00:	ea4e 0202 	orr.w	r2, lr, r2
    df04:	00ad      	lsls	r5, r5, #2
    df06:	f003 0302 	and.w	r3, r3, #2
    df0a:	4313      	orrs	r3, r2
    df0c:	602b      	str	r3, [r5, #0]
    df0e:	6833      	ldr	r3, [r6, #0]
    df10:	3301      	adds	r3, #1
    df12:	6033      	str	r3, [r6, #0]
    df14:	2000      	movs	r0, #0
    df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df18:	01afafaf 	.word	0x01afafaf
    df1c:	14004003 	.word	0x14004003
    df20:	10001724 	.word	0x10001724

0000df24 <am_hal_adc_enable>:
    df24:	4603      	mov	r3, r0
    df26:	b128      	cbz	r0, df34 <am_hal_adc_enable+0x10>
    df28:	6802      	ldr	r2, [r0, #0]
    df2a:	490c      	ldr	r1, [pc, #48]	; (df5c <am_hal_adc_enable+0x38>)
    df2c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    df30:	428a      	cmp	r2, r1
    df32:	d001      	beq.n	df38 <am_hal_adc_enable+0x14>
    df34:	2002      	movs	r0, #2
    df36:	4770      	bx	lr
    df38:	78c2      	ldrb	r2, [r0, #3]
    df3a:	f002 0202 	and.w	r2, r2, #2
    df3e:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    df42:	b94a      	cbnz	r2, df58 <am_hal_adc_enable+0x34>
    df44:	4906      	ldr	r1, [pc, #24]	; (df60 <am_hal_adc_enable+0x3c>)
    df46:	680a      	ldr	r2, [r1, #0]
    df48:	f042 0201 	orr.w	r2, r2, #1
    df4c:	600a      	str	r2, [r1, #0]
    df4e:	78da      	ldrb	r2, [r3, #3]
    df50:	f042 0202 	orr.w	r2, r2, #2
    df54:	70da      	strb	r2, [r3, #3]
    df56:	4770      	bx	lr
    df58:	2000      	movs	r0, #0
    df5a:	4770      	bx	lr
    df5c:	01afafaf 	.word	0x01afafaf
    df60:	50010000 	.word	0x50010000

0000df64 <am_hal_adc_disable>:
    df64:	b128      	cbz	r0, df72 <am_hal_adc_disable+0xe>
    df66:	6803      	ldr	r3, [r0, #0]
    df68:	4a08      	ldr	r2, [pc, #32]	; (df8c <am_hal_adc_disable+0x28>)
    df6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df6e:	4293      	cmp	r3, r2
    df70:	d001      	beq.n	df76 <am_hal_adc_disable+0x12>
    df72:	2002      	movs	r0, #2
    df74:	4770      	bx	lr
    df76:	4b06      	ldr	r3, [pc, #24]	; (df90 <am_hal_adc_disable+0x2c>)
    df78:	681a      	ldr	r2, [r3, #0]
    df7a:	f36f 0200 	bfc	r2, #0, #1
    df7e:	601a      	str	r2, [r3, #0]
    df80:	78c3      	ldrb	r3, [r0, #3]
    df82:	f36f 0341 	bfc	r3, #1, #1
    df86:	70c3      	strb	r3, [r0, #3]
    df88:	2000      	movs	r0, #0
    df8a:	4770      	bx	lr
    df8c:	01afafaf 	.word	0x01afafaf
    df90:	50010000 	.word	0x50010000

0000df94 <am_hal_adc_interrupt_enable>:
    df94:	b128      	cbz	r0, dfa2 <am_hal_adc_interrupt_enable+0xe>
    df96:	6803      	ldr	r3, [r0, #0]
    df98:	4a07      	ldr	r2, [pc, #28]	; (dfb8 <am_hal_adc_interrupt_enable+0x24>)
    df9a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    df9e:	4293      	cmp	r3, r2
    dfa0:	d001      	beq.n	dfa6 <am_hal_adc_interrupt_enable+0x12>
    dfa2:	2002      	movs	r0, #2
    dfa4:	4770      	bx	lr
    dfa6:	4b05      	ldr	r3, [pc, #20]	; (dfbc <am_hal_adc_interrupt_enable+0x28>)
    dfa8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    dfac:	4311      	orrs	r1, r2
    dfae:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    dfb2:	2000      	movs	r0, #0
    dfb4:	4770      	bx	lr
    dfb6:	bf00      	nop
    dfb8:	01afafaf 	.word	0x01afafaf
    dfbc:	50010000 	.word	0x50010000

0000dfc0 <am_hal_adc_interrupt_status>:
    dfc0:	b128      	cbz	r0, dfce <am_hal_adc_interrupt_status+0xe>
    dfc2:	6803      	ldr	r3, [r0, #0]
    dfc4:	480b      	ldr	r0, [pc, #44]	; (dff4 <am_hal_adc_interrupt_status+0x34>)
    dfc6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    dfca:	4283      	cmp	r3, r0
    dfcc:	d001      	beq.n	dfd2 <am_hal_adc_interrupt_status+0x12>
    dfce:	2002      	movs	r0, #2
    dfd0:	4770      	bx	lr
    dfd2:	b92a      	cbnz	r2, dfe0 <am_hal_adc_interrupt_status+0x20>
    dfd4:	4b08      	ldr	r3, [pc, #32]	; (dff8 <am_hal_adc_interrupt_status+0x38>)
    dfd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    dfda:	600b      	str	r3, [r1, #0]
    dfdc:	4610      	mov	r0, r2
    dfde:	4770      	bx	lr
    dfe0:	4a05      	ldr	r2, [pc, #20]	; (dff8 <am_hal_adc_interrupt_status+0x38>)
    dfe2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
    dfe6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    dfea:	4003      	ands	r3, r0
    dfec:	600b      	str	r3, [r1, #0]
    dfee:	2000      	movs	r0, #0
    dff0:	4770      	bx	lr
    dff2:	bf00      	nop
    dff4:	01afafaf 	.word	0x01afafaf
    dff8:	50010000 	.word	0x50010000

0000dffc <am_hal_adc_interrupt_clear>:
    dffc:	b128      	cbz	r0, e00a <am_hal_adc_interrupt_clear+0xe>
    dffe:	6803      	ldr	r3, [r0, #0]
    e000:	4a05      	ldr	r2, [pc, #20]	; (e018 <am_hal_adc_interrupt_clear+0x1c>)
    e002:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e006:	4293      	cmp	r3, r2
    e008:	d001      	beq.n	e00e <am_hal_adc_interrupt_clear+0x12>
    e00a:	2002      	movs	r0, #2
    e00c:	4770      	bx	lr
    e00e:	4b03      	ldr	r3, [pc, #12]	; (e01c <am_hal_adc_interrupt_clear+0x20>)
    e010:	2000      	movs	r0, #0
    e012:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
    e016:	4770      	bx	lr
    e018:	01afafaf 	.word	0x01afafaf
    e01c:	50010000 	.word	0x50010000

0000e020 <am_hal_adc_samples_read>:
    e020:	b148      	cbz	r0, e036 <am_hal_adc_samples_read+0x16>
    e022:	6800      	ldr	r0, [r0, #0]
    e024:	b470      	push	{r4, r5, r6}
    e026:	4c2a      	ldr	r4, [pc, #168]	; (e0d0 <am_hal_adc_samples_read+0xb0>)
    e028:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    e02c:	42a0      	cmp	r0, r4
    e02e:	d004      	beq.n	e03a <am_hal_adc_samples_read+0x1a>
    e030:	2002      	movs	r0, #2
    e032:	bc70      	pop	{r4, r5, r6}
    e034:	4770      	bx	lr
    e036:	2002      	movs	r0, #2
    e038:	4770      	bx	lr
    e03a:	9803      	ldr	r0, [sp, #12]
    e03c:	b1e0      	cbz	r0, e078 <am_hal_adc_samples_read+0x58>
    e03e:	2000      	movs	r0, #0
    e040:	681c      	ldr	r4, [r3, #0]
    e042:	6018      	str	r0, [r3, #0]
    e044:	b1d2      	cbz	r2, e07c <am_hal_adc_samples_read+0x5c>
    e046:	9903      	ldr	r1, [sp, #12]
    e048:	4d22      	ldr	r5, [pc, #136]	; (e0d4 <am_hal_adc_samples_read+0xb4>)
    e04a:	3a04      	subs	r2, #4
    e04c:	3108      	adds	r1, #8
    e04e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    e052:	6bee      	ldr	r6, [r5, #60]	; 0x3c
    e054:	f3c0 7002 	ubfx	r0, r0, #28, #3
    e058:	f841 0c04 	str.w	r0, [r1, #-4]
    e05c:	6810      	ldr	r0, [r2, #0]
    e05e:	f3c0 108d 	ubfx	r0, r0, #6, #14
    e062:	f841 0c08 	str.w	r0, [r1, #-8]
    e066:	6818      	ldr	r0, [r3, #0]
    e068:	3001      	adds	r0, #1
    e06a:	4284      	cmp	r4, r0
    e06c:	f101 0108 	add.w	r1, r1, #8
    e070:	6018      	str	r0, [r3, #0]
    e072:	d8ec      	bhi.n	e04e <am_hal_adc_samples_read+0x2e>
    e074:	2000      	movs	r0, #0
    e076:	e7dc      	b.n	e032 <am_hal_adc_samples_read+0x12>
    e078:	2006      	movs	r0, #6
    e07a:	e7da      	b.n	e032 <am_hal_adc_samples_read+0x12>
    e07c:	9a03      	ldr	r2, [sp, #12]
    e07e:	4e15      	ldr	r6, [pc, #84]	; (e0d4 <am_hal_adc_samples_read+0xb4>)
    e080:	f102 0008 	add.w	r0, r2, #8
    e084:	b9a1      	cbnz	r1, e0b0 <am_hal_adc_samples_read+0x90>
    e086:	e001      	b.n	e08c <am_hal_adc_samples_read+0x6c>
    e088:	428c      	cmp	r4, r1
    e08a:	d9f3      	bls.n	e074 <am_hal_adc_samples_read+0x54>
    e08c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    e08e:	f3c2 118d 	ubfx	r1, r2, #6, #14
    e092:	f3c2 7502 	ubfx	r5, r2, #28, #3
    e096:	e900 0022 	stmdb	r0, {r1, r5}
    e09a:	6819      	ldr	r1, [r3, #0]
    e09c:	f3c2 5207 	ubfx	r2, r2, #20, #8
    e0a0:	3101      	adds	r1, #1
    e0a2:	3008      	adds	r0, #8
    e0a4:	6019      	str	r1, [r3, #0]
    e0a6:	2a00      	cmp	r2, #0
    e0a8:	d1ee      	bne.n	e088 <am_hal_adc_samples_read+0x68>
    e0aa:	e7e3      	b.n	e074 <am_hal_adc_samples_read+0x54>
    e0ac:	428c      	cmp	r4, r1
    e0ae:	d9e1      	bls.n	e074 <am_hal_adc_samples_read+0x54>
    e0b0:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
    e0b2:	f3c2 0113 	ubfx	r1, r2, #0, #20
    e0b6:	f3c2 7502 	ubfx	r5, r2, #28, #3
    e0ba:	e900 0022 	stmdb	r0, {r1, r5}
    e0be:	6819      	ldr	r1, [r3, #0]
    e0c0:	f3c2 5207 	ubfx	r2, r2, #20, #8
    e0c4:	3101      	adds	r1, #1
    e0c6:	3008      	adds	r0, #8
    e0c8:	6019      	str	r1, [r3, #0]
    e0ca:	2a00      	cmp	r2, #0
    e0cc:	d1ee      	bne.n	e0ac <am_hal_adc_samples_read+0x8c>
    e0ce:	e7d1      	b.n	e074 <am_hal_adc_samples_read+0x54>
    e0d0:	01afafaf 	.word	0x01afafaf
    e0d4:	50010000 	.word	0x50010000

0000e0d8 <am_hal_adc_sw_trigger>:
    e0d8:	b128      	cbz	r0, e0e6 <am_hal_adc_sw_trigger+0xe>
    e0da:	6803      	ldr	r3, [r0, #0]
    e0dc:	4a05      	ldr	r2, [pc, #20]	; (e0f4 <am_hal_adc_sw_trigger+0x1c>)
    e0de:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e0e2:	4293      	cmp	r3, r2
    e0e4:	d001      	beq.n	e0ea <am_hal_adc_sw_trigger+0x12>
    e0e6:	2002      	movs	r0, #2
    e0e8:	4770      	bx	lr
    e0ea:	4b03      	ldr	r3, [pc, #12]	; (e0f8 <am_hal_adc_sw_trigger+0x20>)
    e0ec:	2237      	movs	r2, #55	; 0x37
    e0ee:	609a      	str	r2, [r3, #8]
    e0f0:	2000      	movs	r0, #0
    e0f2:	4770      	bx	lr
    e0f4:	01afafaf 	.word	0x01afafaf
    e0f8:	50010000 	.word	0x50010000

0000e0fc <am_hal_adc_power_control>:
    e0fc:	b140      	cbz	r0, e110 <am_hal_adc_power_control+0x14>
    e0fe:	6803      	ldr	r3, [r0, #0]
    e100:	b570      	push	{r4, r5, r6, lr}
    e102:	4c2e      	ldr	r4, [pc, #184]	; (e1bc <am_hal_adc_power_control+0xc0>)
    e104:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e108:	42a3      	cmp	r3, r4
    e10a:	d003      	beq.n	e114 <am_hal_adc_power_control+0x18>
    e10c:	2002      	movs	r0, #2
    e10e:	bd70      	pop	{r4, r5, r6, pc}
    e110:	2002      	movs	r0, #2
    e112:	4770      	bx	lr
    e114:	4604      	mov	r4, r0
    e116:	4615      	mov	r5, r2
    e118:	460e      	mov	r6, r1
    e11a:	b329      	cbz	r1, e168 <am_hal_adc_power_control+0x6c>
    e11c:	2902      	cmp	r1, #2
    e11e:	d821      	bhi.n	e164 <am_hal_adc_power_control+0x68>
    e120:	b1da      	cbz	r2, e15a <am_hal_adc_power_control+0x5e>
    e122:	4b27      	ldr	r3, [pc, #156]	; (e1c0 <am_hal_adc_power_control+0xc4>)
    e124:	68da      	ldr	r2, [r3, #12]
    e126:	6142      	str	r2, [r0, #20]
    e128:	691a      	ldr	r2, [r3, #16]
    e12a:	6182      	str	r2, [r0, #24]
    e12c:	695a      	ldr	r2, [r3, #20]
    e12e:	61c2      	str	r2, [r0, #28]
    e130:	699a      	ldr	r2, [r3, #24]
    e132:	6202      	str	r2, [r0, #32]
    e134:	69da      	ldr	r2, [r3, #28]
    e136:	6242      	str	r2, [r0, #36]	; 0x24
    e138:	6a1a      	ldr	r2, [r3, #32]
    e13a:	6282      	str	r2, [r0, #40]	; 0x28
    e13c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e13e:	62c2      	str	r2, [r0, #44]	; 0x2c
    e140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e142:	6302      	str	r2, [r0, #48]	; 0x30
    e144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e146:	6342      	str	r2, [r0, #52]	; 0x34
    e148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e14a:	6382      	str	r2, [r0, #56]	; 0x38
    e14c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e150:	63c2      	str	r2, [r0, #60]	; 0x3c
    e152:	681b      	ldr	r3, [r3, #0]
    e154:	6103      	str	r3, [r0, #16]
    e156:	2301      	movs	r3, #1
    e158:	7303      	strb	r3, [r0, #12]
    e15a:	200a      	movs	r0, #10
    e15c:	f001 fb76 	bl	f84c <am_hal_pwrctrl_periph_disable>
    e160:	2000      	movs	r0, #0
    e162:	bd70      	pop	{r4, r5, r6, pc}
    e164:	2006      	movs	r0, #6
    e166:	bd70      	pop	{r4, r5, r6, pc}
    e168:	b11a      	cbz	r2, e172 <am_hal_adc_power_control+0x76>
    e16a:	7b03      	ldrb	r3, [r0, #12]
    e16c:	b933      	cbnz	r3, e17c <am_hal_adc_power_control+0x80>
    e16e:	2007      	movs	r0, #7
    e170:	bd70      	pop	{r4, r5, r6, pc}
    e172:	200a      	movs	r0, #10
    e174:	f001 fb40 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    e178:	4628      	mov	r0, r5
    e17a:	bd70      	pop	{r4, r5, r6, pc}
    e17c:	200a      	movs	r0, #10
    e17e:	f001 fb3b 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    e182:	4b0f      	ldr	r3, [pc, #60]	; (e1c0 <am_hal_adc_power_control+0xc4>)
    e184:	6962      	ldr	r2, [r4, #20]
    e186:	60da      	str	r2, [r3, #12]
    e188:	69a2      	ldr	r2, [r4, #24]
    e18a:	611a      	str	r2, [r3, #16]
    e18c:	69e2      	ldr	r2, [r4, #28]
    e18e:	615a      	str	r2, [r3, #20]
    e190:	6a22      	ldr	r2, [r4, #32]
    e192:	619a      	str	r2, [r3, #24]
    e194:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e196:	61da      	str	r2, [r3, #28]
    e198:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e19a:	621a      	str	r2, [r3, #32]
    e19c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e19e:	625a      	str	r2, [r3, #36]	; 0x24
    e1a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    e1a2:	629a      	str	r2, [r3, #40]	; 0x28
    e1a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e1a6:	62da      	str	r2, [r3, #44]	; 0x2c
    e1a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e1aa:	631a      	str	r2, [r3, #48]	; 0x30
    e1ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e1ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    e1b2:	6922      	ldr	r2, [r4, #16]
    e1b4:	601a      	str	r2, [r3, #0]
    e1b6:	4630      	mov	r0, r6
    e1b8:	7326      	strb	r6, [r4, #12]
    e1ba:	bd70      	pop	{r4, r5, r6, pc}
    e1bc:	01afafaf 	.word	0x01afafaf
    e1c0:	50010000 	.word	0x50010000

0000e1c4 <am_hal_cachectrl_config>:
    e1c4:	b530      	push	{r4, r5, lr}
    e1c6:	b083      	sub	sp, #12
    e1c8:	4605      	mov	r5, r0
    e1ca:	f000 fd17 	bl	ebfc <am_hal_interrupt_master_disable>
    e1ce:	4c0f      	ldr	r4, [pc, #60]	; (e20c <am_hal_cachectrl_config+0x48>)
    e1d0:	9001      	str	r0, [sp, #4]
    e1d2:	6823      	ldr	r3, [r4, #0]
    e1d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    e1d8:	6023      	str	r3, [r4, #0]
    e1da:	9801      	ldr	r0, [sp, #4]
    e1dc:	f000 fd12 	bl	ec04 <am_hal_interrupt_master_set>
    e1e0:	78ab      	ldrb	r3, [r5, #2]
    e1e2:	782a      	ldrb	r2, [r5, #0]
    e1e4:	7869      	ldrb	r1, [r5, #1]
    e1e6:	005b      	lsls	r3, r3, #1
    e1e8:	0112      	lsls	r2, r2, #4
    e1ea:	b2d2      	uxtb	r2, r2
    e1ec:	f003 0302 	and.w	r3, r3, #2
    e1f0:	4313      	orrs	r3, r2
    e1f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e1f6:	020a      	lsls	r2, r1, #8
    e1f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
    e1fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    e200:	4313      	orrs	r3, r2
    e202:	2000      	movs	r0, #0
    e204:	6023      	str	r3, [r4, #0]
    e206:	b003      	add	sp, #12
    e208:	bd30      	pop	{r4, r5, pc}
    e20a:	bf00      	nop
    e20c:	40018000 	.word	0x40018000

0000e210 <am_hal_cachectrl_enable>:
    e210:	4a03      	ldr	r2, [pc, #12]	; (e220 <am_hal_cachectrl_enable+0x10>)
    e212:	6813      	ldr	r3, [r2, #0]
    e214:	f043 0301 	orr.w	r3, r3, #1
    e218:	6013      	str	r3, [r2, #0]
    e21a:	2000      	movs	r0, #0
    e21c:	4770      	bx	lr
    e21e:	bf00      	nop
    e220:	40018000 	.word	0x40018000

0000e224 <am_hal_cachectrl_control>:
    e224:	b510      	push	{r4, lr}
    e226:	3801      	subs	r0, #1
    e228:	b08e      	sub	sp, #56	; 0x38
    e22a:	2810      	cmp	r0, #16
    e22c:	f200 8143 	bhi.w	e4b6 <am_hal_cachectrl_control+0x292>
    e230:	e8df f010 	tbh	[pc, r0, lsl #1]
    e234:	01380136 	.word	0x01380136
    e238:	0011013e 	.word	0x0011013e
    e23c:	001a0018 	.word	0x001a0018
    e240:	001f001c 	.word	0x001f001c
    e244:	00300022 	.word	0x00300022
    e248:	0074003c 	.word	0x0074003c
    e24c:	00e400ac 	.word	0x00e400ac
    e250:	011a00ff 	.word	0x011a00ff
    e254:	0120      	.short	0x0120
    e256:	f44f 7208 	mov.w	r2, #544	; 0x220
    e25a:	4ba8      	ldr	r3, [pc, #672]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e25c:	2000      	movs	r0, #0
    e25e:	609a      	str	r2, [r3, #8]
    e260:	b00e      	add	sp, #56	; 0x38
    e262:	bd10      	pop	{r4, pc}
    e264:	2240      	movs	r2, #64	; 0x40
    e266:	e7f8      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e268:	2220      	movs	r2, #32
    e26a:	e7f6      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e26c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e270:	e7f3      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e272:	f44f 7200 	mov.w	r2, #512	; 0x200
    e276:	e7f0      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e278:	f000 fcc0 	bl	ebfc <am_hal_interrupt_master_disable>
    e27c:	4a9f      	ldr	r2, [pc, #636]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e27e:	9000      	str	r0, [sp, #0]
    e280:	6813      	ldr	r3, [r2, #0]
    e282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e286:	6013      	str	r3, [r2, #0]
    e288:	9800      	ldr	r0, [sp, #0]
    e28a:	f000 fcbb 	bl	ec04 <am_hal_interrupt_master_set>
    e28e:	2000      	movs	r0, #0
    e290:	b00e      	add	sp, #56	; 0x38
    e292:	bd10      	pop	{r4, pc}
    e294:	f000 fcb2 	bl	ebfc <am_hal_interrupt_master_disable>
    e298:	4a98      	ldr	r2, [pc, #608]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e29a:	9001      	str	r0, [sp, #4]
    e29c:	6813      	ldr	r3, [r2, #0]
    e29e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e2a2:	6013      	str	r3, [r2, #0]
    e2a4:	9801      	ldr	r0, [sp, #4]
    e2a6:	f000 fcad 	bl	ec04 <am_hal_interrupt_master_set>
    e2aa:	e7f0      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e2ac:	f000 fca6 	bl	ebfc <am_hal_interrupt_master_disable>
    e2b0:	4603      	mov	r3, r0
    e2b2:	4893      	ldr	r0, [pc, #588]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e2b4:	9302      	str	r3, [sp, #8]
    e2b6:	f000 fae1 	bl	e87c <am_hal_flash_load_ui32>
    e2ba:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e2be:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e2c2:	488f      	ldr	r0, [pc, #572]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e2c4:	f000 fade 	bl	e884 <am_hal_flash_store_ui32>
    e2c8:	9802      	ldr	r0, [sp, #8]
    e2ca:	f000 fc9b 	bl	ec04 <am_hal_interrupt_master_set>
    e2ce:	f000 fc95 	bl	ebfc <am_hal_interrupt_master_disable>
    e2d2:	4603      	mov	r3, r0
    e2d4:	488a      	ldr	r0, [pc, #552]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e2d6:	9303      	str	r3, [sp, #12]
    e2d8:	f000 fad0 	bl	e87c <am_hal_flash_load_ui32>
    e2dc:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e2e0:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    e2e4:	4886      	ldr	r0, [pc, #536]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e2e6:	f000 facd 	bl	e884 <am_hal_flash_store_ui32>
    e2ea:	9803      	ldr	r0, [sp, #12]
    e2ec:	f000 fc8a 	bl	ec04 <am_hal_interrupt_master_set>
    e2f0:	f000 fc84 	bl	ebfc <am_hal_interrupt_master_disable>
    e2f4:	4603      	mov	r3, r0
    e2f6:	4882      	ldr	r0, [pc, #520]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e2f8:	9304      	str	r3, [sp, #16]
    e2fa:	f000 fabf 	bl	e87c <am_hal_flash_load_ui32>
    e2fe:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e302:	f021 010f 	bic.w	r1, r1, #15
    e306:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e30a:	f041 0103 	orr.w	r1, r1, #3
    e30e:	487c      	ldr	r0, [pc, #496]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e310:	f000 fab8 	bl	e884 <am_hal_flash_store_ui32>
    e314:	9804      	ldr	r0, [sp, #16]
    e316:	f000 fc75 	bl	ec04 <am_hal_interrupt_master_set>
    e31a:	e7b8      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e31c:	f000 fc6e 	bl	ebfc <am_hal_interrupt_master_disable>
    e320:	4603      	mov	r3, r0
    e322:	4877      	ldr	r0, [pc, #476]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e324:	9305      	str	r3, [sp, #20]
    e326:	f000 faa9 	bl	e87c <am_hal_flash_load_ui32>
    e32a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e32e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e332:	4873      	ldr	r0, [pc, #460]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e334:	f000 faa6 	bl	e884 <am_hal_flash_store_ui32>
    e338:	9805      	ldr	r0, [sp, #20]
    e33a:	f000 fc63 	bl	ec04 <am_hal_interrupt_master_set>
    e33e:	f000 fc5d 	bl	ebfc <am_hal_interrupt_master_disable>
    e342:	4603      	mov	r3, r0
    e344:	486e      	ldr	r0, [pc, #440]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e346:	9306      	str	r3, [sp, #24]
    e348:	f000 fa98 	bl	e87c <am_hal_flash_load_ui32>
    e34c:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e350:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    e354:	486a      	ldr	r0, [pc, #424]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e356:	f000 fa95 	bl	e884 <am_hal_flash_store_ui32>
    e35a:	9806      	ldr	r0, [sp, #24]
    e35c:	f000 fc52 	bl	ec04 <am_hal_interrupt_master_set>
    e360:	f000 fc4c 	bl	ebfc <am_hal_interrupt_master_disable>
    e364:	4603      	mov	r3, r0
    e366:	4866      	ldr	r0, [pc, #408]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e368:	9307      	str	r3, [sp, #28]
    e36a:	f000 fa87 	bl	e87c <am_hal_flash_load_ui32>
    e36e:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e372:	f021 010f 	bic.w	r1, r1, #15
    e376:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e37a:	f041 0101 	orr.w	r1, r1, #1
    e37e:	4860      	ldr	r0, [pc, #384]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e380:	f000 fa80 	bl	e884 <am_hal_flash_store_ui32>
    e384:	9807      	ldr	r0, [sp, #28]
    e386:	f000 fc3d 	bl	ec04 <am_hal_interrupt_master_set>
    e38a:	e780      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e38c:	f000 fc36 	bl	ebfc <am_hal_interrupt_master_disable>
    e390:	4603      	mov	r3, r0
    e392:	485b      	ldr	r0, [pc, #364]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e394:	9308      	str	r3, [sp, #32]
    e396:	f000 fa71 	bl	e87c <am_hal_flash_load_ui32>
    e39a:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e39e:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    e3a2:	4857      	ldr	r0, [pc, #348]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e3a4:	f000 fa6e 	bl	e884 <am_hal_flash_store_ui32>
    e3a8:	9808      	ldr	r0, [sp, #32]
    e3aa:	f000 fc2b 	bl	ec04 <am_hal_interrupt_master_set>
    e3ae:	f000 fc25 	bl	ebfc <am_hal_interrupt_master_disable>
    e3b2:	4603      	mov	r3, r0
    e3b4:	4852      	ldr	r0, [pc, #328]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e3b6:	9309      	str	r3, [sp, #36]	; 0x24
    e3b8:	f000 fa60 	bl	e87c <am_hal_flash_load_ui32>
    e3bc:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e3c0:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    e3c4:	484e      	ldr	r0, [pc, #312]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e3c6:	f000 fa5d 	bl	e884 <am_hal_flash_store_ui32>
    e3ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    e3cc:	f000 fc1a 	bl	ec04 <am_hal_interrupt_master_set>
    e3d0:	f000 fc14 	bl	ebfc <am_hal_interrupt_master_disable>
    e3d4:	4603      	mov	r3, r0
    e3d6:	484a      	ldr	r0, [pc, #296]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e3d8:	930a      	str	r3, [sp, #40]	; 0x28
    e3da:	f000 fa4f 	bl	e87c <am_hal_flash_load_ui32>
    e3de:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e3e2:	f021 010f 	bic.w	r1, r1, #15
    e3e6:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    e3ea:	f041 0101 	orr.w	r1, r1, #1
    e3ee:	4844      	ldr	r0, [pc, #272]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e3f0:	f000 fa48 	bl	e884 <am_hal_flash_store_ui32>
    e3f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    e3f6:	f000 fc05 	bl	ec04 <am_hal_interrupt_master_set>
    e3fa:	e748      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e3fc:	2900      	cmp	r1, #0
    e3fe:	d05a      	beq.n	e4b6 <am_hal_cachectrl_control+0x292>
    e400:	680c      	ldr	r4, [r1, #0]
    e402:	2c03      	cmp	r4, #3
    e404:	d834      	bhi.n	e470 <am_hal_cachectrl_control+0x24c>
    e406:	f000 fbf9 	bl	ebfc <am_hal_interrupt_master_disable>
    e40a:	4603      	mov	r3, r0
    e40c:	483c      	ldr	r0, [pc, #240]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e40e:	930b      	str	r3, [sp, #44]	; 0x2c
    e410:	f000 fa34 	bl	e87c <am_hal_flash_load_ui32>
    e414:	0323      	lsls	r3, r4, #12
    e416:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    e41a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e41e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    e422:	4319      	orrs	r1, r3
    e424:	4836      	ldr	r0, [pc, #216]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e426:	f000 fa2d 	bl	e884 <am_hal_flash_store_ui32>
    e42a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e42c:	f000 fbea 	bl	ec04 <am_hal_interrupt_master_set>
    e430:	e72d      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e432:	2900      	cmp	r1, #0
    e434:	d03f      	beq.n	e4b6 <am_hal_cachectrl_control+0x292>
    e436:	680c      	ldr	r4, [r1, #0]
    e438:	2c07      	cmp	r4, #7
    e43a:	d819      	bhi.n	e470 <am_hal_cachectrl_control+0x24c>
    e43c:	f000 fbde 	bl	ebfc <am_hal_interrupt_master_disable>
    e440:	4603      	mov	r3, r0
    e442:	482f      	ldr	r0, [pc, #188]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e444:	930c      	str	r3, [sp, #48]	; 0x30
    e446:	f000 fa19 	bl	e87c <am_hal_flash_load_ui32>
    e44a:	0123      	lsls	r3, r4, #4
    e44c:	f003 0370 	and.w	r3, r3, #112	; 0x70
    e450:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    e454:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    e458:	4319      	orrs	r1, r3
    e45a:	4829      	ldr	r0, [pc, #164]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e45c:	f000 fa12 	bl	e884 <am_hal_flash_store_ui32>
    e460:	980c      	ldr	r0, [sp, #48]	; 0x30
    e462:	f000 fbcf 	bl	ec04 <am_hal_interrupt_master_set>
    e466:	e712      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e468:	b329      	cbz	r1, e4b6 <am_hal_cachectrl_control+0x292>
    e46a:	680c      	ldr	r4, [r1, #0]
    e46c:	2c0f      	cmp	r4, #15
    e46e:	d926      	bls.n	e4be <am_hal_cachectrl_control+0x29a>
    e470:	2001      	movs	r0, #1
    e472:	e6f5      	b.n	e260 <am_hal_cachectrl_control+0x3c>
    e474:	b1f9      	cbz	r1, e4b6 <am_hal_cachectrl_control+0x292>
    e476:	684a      	ldr	r2, [r1, #4]
    e478:	4b22      	ldr	r3, [pc, #136]	; (e504 <am_hal_cachectrl_control+0x2e0>)
    e47a:	4013      	ands	r3, r2
    e47c:	b9db      	cbnz	r3, e4b6 <am_hal_cachectrl_control+0x292>
    e47e:	688b      	ldr	r3, [r1, #8]
    e480:	4820      	ldr	r0, [pc, #128]	; (e504 <am_hal_cachectrl_control+0x2e0>)
    e482:	4018      	ands	r0, r3
    e484:	b9b8      	cbnz	r0, e4b6 <am_hal_cachectrl_control+0x292>
    e486:	780c      	ldrb	r4, [r1, #0]
    e488:	b374      	cbz	r4, e4e8 <am_hal_cachectrl_control+0x2c4>
    e48a:	2c01      	cmp	r4, #1
    e48c:	d113      	bne.n	e4b6 <am_hal_cachectrl_control+0x292>
    e48e:	4c1b      	ldr	r4, [pc, #108]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e490:	61a2      	str	r2, [r4, #24]
    e492:	61e3      	str	r3, [r4, #28]
    e494:	784a      	ldrb	r2, [r1, #1]
    e496:	6823      	ldr	r3, [r4, #0]
    e498:	f362 03c3 	bfi	r3, r2, #3, #1
    e49c:	6023      	str	r3, [r4, #0]
    e49e:	e6df      	b.n	e260 <am_hal_cachectrl_control+0x3c>
    e4a0:	2201      	movs	r2, #1
    e4a2:	e6da      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e4a4:	4b15      	ldr	r3, [pc, #84]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e4a6:	681b      	ldr	r3, [r3, #0]
    e4a8:	01db      	lsls	r3, r3, #7
    e4aa:	d406      	bmi.n	e4ba <am_hal_cachectrl_control+0x296>
    e4ac:	2007      	movs	r0, #7
    e4ae:	e6d7      	b.n	e260 <am_hal_cachectrl_control+0x3c>
    e4b0:	f44f 6288 	mov.w	r2, #1088	; 0x440
    e4b4:	e6d1      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e4b6:	2006      	movs	r0, #6
    e4b8:	e6d2      	b.n	e260 <am_hal_cachectrl_control+0x3c>
    e4ba:	2202      	movs	r2, #2
    e4bc:	e6cd      	b.n	e25a <am_hal_cachectrl_control+0x36>
    e4be:	f000 fb9d 	bl	ebfc <am_hal_interrupt_master_disable>
    e4c2:	4603      	mov	r3, r0
    e4c4:	480e      	ldr	r0, [pc, #56]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e4c6:	930d      	str	r3, [sp, #52]	; 0x34
    e4c8:	f000 f9d8 	bl	e87c <am_hal_flash_load_ui32>
    e4cc:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    e4d0:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    e4d4:	f021 010f 	bic.w	r1, r1, #15
    e4d8:	4321      	orrs	r1, r4
    e4da:	4809      	ldr	r0, [pc, #36]	; (e500 <am_hal_cachectrl_control+0x2dc>)
    e4dc:	f000 f9d2 	bl	e884 <am_hal_flash_store_ui32>
    e4e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    e4e2:	f000 fb8f 	bl	ec04 <am_hal_interrupt_master_set>
    e4e6:	e6d2      	b.n	e28e <am_hal_cachectrl_control+0x6a>
    e4e8:	4c04      	ldr	r4, [pc, #16]	; (e4fc <am_hal_cachectrl_control+0x2d8>)
    e4ea:	6122      	str	r2, [r4, #16]
    e4ec:	6163      	str	r3, [r4, #20]
    e4ee:	784a      	ldrb	r2, [r1, #1]
    e4f0:	6823      	ldr	r3, [r4, #0]
    e4f2:	f362 0382 	bfi	r3, r2, #2, #1
    e4f6:	6023      	str	r3, [r4, #0]
    e4f8:	e6b2      	b.n	e260 <am_hal_cachectrl_control+0x3c>
    e4fa:	bf00      	nop
    e4fc:	40018000 	.word	0x40018000
    e500:	40018004 	.word	0x40018004
    e504:	f800000f 	.word	0xf800000f

0000e508 <am_hal_clkgen_control>:
    e508:	4b41      	ldr	r3, [pc, #260]	; (e610 <am_hal_clkgen_control+0x108>)
    e50a:	681a      	ldr	r2, [r3, #0]
    e50c:	b912      	cbnz	r2, e514 <am_hal_clkgen_control+0xc>
    e50e:	4a41      	ldr	r2, [pc, #260]	; (e614 <am_hal_clkgen_control+0x10c>)
    e510:	6812      	ldr	r2, [r2, #0]
    e512:	601a      	str	r2, [r3, #0]
    e514:	2809      	cmp	r0, #9
    e516:	d878      	bhi.n	e60a <am_hal_clkgen_control+0x102>
    e518:	e8df f000 	tbb	[pc, r0]
    e51c:	261e160d 	.word	0x261e160d
    e520:	524c423a 	.word	0x524c423a
    e524:	055a      	.short	0x055a
    e526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e52a:	2000      	movs	r0, #0
    e52c:	6a1a      	ldr	r2, [r3, #32]
    e52e:	f36f 0200 	bfc	r2, #0, #1
    e532:	621a      	str	r2, [r3, #32]
    e534:	4770      	bx	lr
    e536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e53a:	2200      	movs	r2, #0
    e53c:	2147      	movs	r1, #71	; 0x47
    e53e:	6159      	str	r1, [r3, #20]
    e540:	4610      	mov	r0, r2
    e542:	619a      	str	r2, [r3, #24]
    e544:	615a      	str	r2, [r3, #20]
    e546:	4770      	bx	lr
    e548:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e54c:	2000      	movs	r0, #0
    e54e:	68d3      	ldr	r3, [r2, #12]
    e550:	f023 0301 	bic.w	r3, r3, #1
    e554:	60d3      	str	r3, [r2, #12]
    e556:	4770      	bx	lr
    e558:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e55c:	2000      	movs	r0, #0
    e55e:	68d3      	ldr	r3, [r2, #12]
    e560:	f023 0302 	bic.w	r3, r3, #2
    e564:	60d3      	str	r3, [r2, #12]
    e566:	4770      	bx	lr
    e568:	4a2b      	ldr	r2, [pc, #172]	; (e618 <am_hal_clkgen_control+0x110>)
    e56a:	68d3      	ldr	r3, [r2, #12]
    e56c:	b2db      	uxtb	r3, r3
    e56e:	2b21      	cmp	r3, #33	; 0x21
    e570:	d106      	bne.n	e580 <am_hal_clkgen_control+0x78>
    e572:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e576:	2101      	movs	r1, #1
    e578:	f361 2309 	bfi	r3, r1, #8, #2
    e57c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e580:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e584:	2000      	movs	r0, #0
    e586:	68d3      	ldr	r3, [r2, #12]
    e588:	f043 0301 	orr.w	r3, r3, #1
    e58c:	60d3      	str	r3, [r2, #12]
    e58e:	4770      	bx	lr
    e590:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e594:	2000      	movs	r0, #0
    e596:	68d3      	ldr	r3, [r2, #12]
    e598:	f043 0302 	orr.w	r3, r3, #2
    e59c:	60d3      	str	r3, [r2, #12]
    e59e:	4770      	bx	lr
    e5a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e5a4:	2200      	movs	r2, #0
    e5a6:	2047      	movs	r0, #71	; 0x47
    e5a8:	2101      	movs	r1, #1
    e5aa:	6158      	str	r0, [r3, #20]
    e5ac:	6199      	str	r1, [r3, #24]
    e5ae:	4610      	mov	r0, r2
    e5b0:	615a      	str	r2, [r3, #20]
    e5b2:	4770      	bx	lr
    e5b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e5b8:	2000      	movs	r0, #0
    e5ba:	68da      	ldr	r2, [r3, #12]
    e5bc:	60da      	str	r2, [r3, #12]
    e5be:	4770      	bx	lr
    e5c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e5c4:	2000      	movs	r0, #0
    e5c6:	68d3      	ldr	r3, [r2, #12]
    e5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e5cc:	60d3      	str	r3, [r2, #12]
    e5ce:	4770      	bx	lr
    e5d0:	b510      	push	{r4, lr}
    e5d2:	4a11      	ldr	r2, [pc, #68]	; (e618 <am_hal_clkgen_control+0x110>)
    e5d4:	68d3      	ldr	r3, [r2, #12]
    e5d6:	b2db      	uxtb	r3, r3
    e5d8:	2b21      	cmp	r3, #33	; 0x21
    e5da:	460c      	mov	r4, r1
    e5dc:	d008      	beq.n	e5f0 <am_hal_clkgen_control+0xe8>
    e5de:	b194      	cbz	r4, e606 <am_hal_clkgen_control+0xfe>
    e5e0:	6823      	ldr	r3, [r4, #0]
    e5e2:	f043 0301 	orr.w	r3, r3, #1
    e5e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e5ea:	2000      	movs	r0, #0
    e5ec:	6213      	str	r3, [r2, #32]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    e5f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    e5f8:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    e5fc:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    e600:	f000 f8f2 	bl	e7e8 <am_hal_flash_delay>
    e604:	e7eb      	b.n	e5de <am_hal_clkgen_control+0xd6>
    e606:	4b05      	ldr	r3, [pc, #20]	; (e61c <am_hal_clkgen_control+0x114>)
    e608:	e7ed      	b.n	e5e6 <am_hal_clkgen_control+0xde>
    e60a:	2006      	movs	r0, #6
    e60c:	4770      	bx	lr
    e60e:	bf00      	nop
    e610:	1000118c 	.word	0x1000118c
    e614:	4ffff000 	.word	0x4ffff000
    e618:	40020000 	.word	0x40020000
    e61c:	0025b801 	.word	0x0025b801

0000e620 <am_hal_ctimer_config_single>:
    e620:	b5f0      	push	{r4, r5, r6, r7, lr}
    e622:	b083      	sub	sp, #12
    e624:	460e      	mov	r6, r1
    e626:	4614      	mov	r4, r2
    e628:	0147      	lsls	r7, r0, #5
    e62a:	4605      	mov	r5, r0
    e62c:	f000 fae6 	bl	ebfc <am_hal_interrupt_master_disable>
    e630:	4a19      	ldr	r2, [pc, #100]	; (e698 <am_hal_ctimer_config_single+0x78>)
    e632:	9001      	str	r0, [sp, #4]
    e634:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e638:	58bb      	ldr	r3, [r7, r2]
    e63a:	d021      	beq.n	e680 <am_hal_ctimer_config_single+0x60>
    e63c:	ea23 0306 	bic.w	r3, r3, r6
    e640:	1c71      	adds	r1, r6, #1
    e642:	ea43 0304 	orr.w	r3, r3, r4
    e646:	d00c      	beq.n	e662 <am_hal_ctimer_config_single+0x42>
    e648:	50bb      	str	r3, [r7, r2]
    e64a:	9801      	ldr	r0, [sp, #4]
    e64c:	f000 fada 	bl	ec04 <am_hal_interrupt_master_set>
    e650:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e654:	429e      	cmp	r6, r3
    e656:	d01c      	beq.n	e692 <am_hal_ctimer_config_single+0x72>
    e658:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    e65c:	d017      	beq.n	e68e <am_hal_ctimer_config_single+0x6e>
    e65e:	b003      	add	sp, #12
    e660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e666:	50bb      	str	r3, [r7, r2]
    e668:	9801      	ldr	r0, [sp, #4]
    e66a:	f000 facb 	bl	ec04 <am_hal_interrupt_master_set>
    e66e:	2200      	movs	r2, #0
    e670:	4b0a      	ldr	r3, [pc, #40]	; (e69c <am_hal_ctimer_config_single+0x7c>)
    e672:	eb03 0545 	add.w	r5, r3, r5, lsl #1
    e676:	f3c4 0444 	ubfx	r4, r4, #1, #5
    e67a:	54ac      	strb	r4, [r5, r2]
    e67c:	b003      	add	sp, #12
    e67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e680:	0424      	lsls	r4, r4, #16
    e682:	b29b      	uxth	r3, r3
    e684:	4323      	orrs	r3, r4
    e686:	50bb      	str	r3, [r7, r2]
    e688:	9801      	ldr	r0, [sp, #4]
    e68a:	f000 fabb 	bl	ec04 <am_hal_interrupt_master_set>
    e68e:	2201      	movs	r2, #1
    e690:	e7ee      	b.n	e670 <am_hal_ctimer_config_single+0x50>
    e692:	2200      	movs	r2, #0
    e694:	e7ec      	b.n	e670 <am_hal_ctimer_config_single+0x50>
    e696:	bf00      	nop
    e698:	4000800c 	.word	0x4000800c
    e69c:	10001048 	.word	0x10001048

0000e6a0 <am_hal_ctimer_start>:
    e6a0:	b570      	push	{r4, r5, r6, lr}
    e6a2:	b082      	sub	sp, #8
    e6a4:	460c      	mov	r4, r1
    e6a6:	0146      	lsls	r6, r0, #5
    e6a8:	4605      	mov	r5, r0
    e6aa:	f000 faa7 	bl	ebfc <am_hal_interrupt_master_disable>
    e6ae:	4a0f      	ldr	r2, [pc, #60]	; (e6ec <am_hal_ctimer_start+0x4c>)
    e6b0:	9001      	str	r0, [sp, #4]
    e6b2:	58b3      	ldr	r3, [r6, r2]
    e6b4:	f004 2108 	and.w	r1, r4, #134219776	; 0x8000800
    e6b8:	ea23 0301 	bic.w	r3, r3, r1
    e6bc:	f004 1101 	and.w	r1, r4, #65537	; 0x10001
    e6c0:	430b      	orrs	r3, r1
    e6c2:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e6c6:	bf0c      	ite	eq
    e6c8:	f3c3 4444 	ubfxeq	r4, r3, #17, #5
    e6cc:	f3c3 0444 	ubfxne	r4, r3, #1, #5
    e6d0:	50b3      	str	r3, [r6, r2]
    e6d2:	4b07      	ldr	r3, [pc, #28]	; (e6f0 <am_hal_ctimer_start+0x50>)
    e6d4:	9801      	ldr	r0, [sp, #4]
    e6d6:	bf0c      	ite	eq
    e6d8:	2101      	moveq	r1, #1
    e6da:	2100      	movne	r1, #0
    e6dc:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    e6e0:	545c      	strb	r4, [r3, r1]
    e6e2:	f000 fa8f 	bl	ec04 <am_hal_interrupt_master_set>
    e6e6:	b002      	add	sp, #8
    e6e8:	bd70      	pop	{r4, r5, r6, pc}
    e6ea:	bf00      	nop
    e6ec:	4000800c 	.word	0x4000800c
    e6f0:	10001048 	.word	0x10001048

0000e6f4 <am_hal_ctimer_period_set>:
    e6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6f8:	b082      	sub	sp, #8
    e6fa:	4689      	mov	r9, r1
    e6fc:	4698      	mov	r8, r3
    e6fe:	0147      	lsls	r7, r0, #5
    e700:	4614      	mov	r4, r2
    e702:	f000 fa7b 	bl	ebfc <am_hal_interrupt_master_disable>
    e706:	f8df a094 	ldr.w	sl, [pc, #148]	; e79c <am_hal_ctimer_period_set+0xa8>
    e70a:	9001      	str	r0, [sp, #4]
    e70c:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e710:	4d20      	ldr	r5, [pc, #128]	; (e794 <am_hal_ctimer_period_set+0xa0>)
    e712:	4e21      	ldr	r6, [pc, #132]	; (e798 <am_hal_ctimer_period_set+0xa4>)
    e714:	f857 300a 	ldr.w	r3, [r7, sl]
    e718:	d01a      	beq.n	e750 <am_hal_ctimer_period_set+0x5c>
    e71a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e71e:	2b80      	cmp	r3, #128	; 0x80
    e720:	d01b      	beq.n	e75a <am_hal_ctimer_period_set+0x66>
    e722:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e726:	2000      	movs	r0, #0
    e728:	4591      	cmp	r9, r2
    e72a:	4603      	mov	r3, r0
    e72c:	d01e      	beq.n	e76c <am_hal_ctimer_period_set+0x78>
    e72e:	f519 3f80 	cmn.w	r9, #65536	; 0x10000
    e732:	d025      	beq.n	e780 <am_hal_ctimer_period_set+0x8c>
    e734:	0c1b      	lsrs	r3, r3, #16
    e736:	b2a2      	uxth	r2, r4
    e738:	041b      	lsls	r3, r3, #16
    e73a:	4310      	orrs	r0, r2
    e73c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e740:	5178      	str	r0, [r7, r5]
    e742:	51bb      	str	r3, [r7, r6]
    e744:	9801      	ldr	r0, [sp, #4]
    e746:	f000 fa5d 	bl	ec04 <am_hal_interrupt_master_set>
    e74a:	b002      	add	sp, #8
    e74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e750:	0c1b      	lsrs	r3, r3, #16
    e752:	f403 73c0 	and.w	r3, r3, #384	; 0x180
    e756:	2b80      	cmp	r3, #128	; 0x80
    e758:	d111      	bne.n	e77e <am_hal_ctimer_period_set+0x8a>
    e75a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e75e:	4591      	cmp	r9, r2
    e760:	ea4f 4004 	mov.w	r0, r4, lsl #16
    e764:	4623      	mov	r3, r4
    e766:	ebc8 0404 	rsb	r4, r8, r4
    e76a:	d1e0      	bne.n	e72e <am_hal_ctimer_period_set+0x3a>
    e76c:	b2a3      	uxth	r3, r4
    e76e:	4318      	orrs	r0, r3
    e770:	5178      	str	r0, [r7, r5]
    e772:	9801      	ldr	r0, [sp, #4]
    e774:	f000 fa46 	bl	ec04 <am_hal_interrupt_master_set>
    e778:	b002      	add	sp, #8
    e77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e77e:	2000      	movs	r0, #0
    e780:	b2a3      	uxth	r3, r4
    e782:	4318      	orrs	r0, r3
    e784:	51b8      	str	r0, [r7, r6]
    e786:	9801      	ldr	r0, [sp, #4]
    e788:	f000 fa3c 	bl	ec04 <am_hal_interrupt_master_set>
    e78c:	b002      	add	sp, #8
    e78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e792:	bf00      	nop
    e794:	40008004 	.word	0x40008004
    e798:	40008008 	.word	0x40008008
    e79c:	4000800c 	.word	0x4000800c

0000e7a0 <am_hal_ctimer_int_enable>:
    e7a0:	b510      	push	{r4, lr}
    e7a2:	b082      	sub	sp, #8
    e7a4:	4604      	mov	r4, r0
    e7a6:	f000 fa29 	bl	ebfc <am_hal_interrupt_master_disable>
    e7aa:	4b06      	ldr	r3, [pc, #24]	; (e7c4 <am_hal_ctimer_int_enable+0x24>)
    e7ac:	9001      	str	r0, [sp, #4]
    e7ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    e7b2:	4314      	orrs	r4, r2
    e7b4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    e7b8:	9801      	ldr	r0, [sp, #4]
    e7ba:	f000 fa23 	bl	ec04 <am_hal_interrupt_master_set>
    e7be:	b002      	add	sp, #8
    e7c0:	bd10      	pop	{r4, pc}
    e7c2:	bf00      	nop
    e7c4:	40008000 	.word	0x40008000

0000e7c8 <am_hal_ctimer_int_clear>:
    e7c8:	b510      	push	{r4, lr}
    e7ca:	b082      	sub	sp, #8
    e7cc:	4604      	mov	r4, r0
    e7ce:	f000 fa15 	bl	ebfc <am_hal_interrupt_master_disable>
    e7d2:	4b04      	ldr	r3, [pc, #16]	; (e7e4 <am_hal_ctimer_int_clear+0x1c>)
    e7d4:	9001      	str	r0, [sp, #4]
    e7d6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
    e7da:	9801      	ldr	r0, [sp, #4]
    e7dc:	f000 fa12 	bl	ec04 <am_hal_interrupt_master_set>
    e7e0:	b002      	add	sp, #8
    e7e2:	bd10      	pop	{r4, pc}
    e7e4:	40008000 	.word	0x40008000

0000e7e8 <am_hal_flash_delay>:
    e7e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e7ee:	075b      	lsls	r3, r3, #29
    e7f0:	bf46      	itte	mi
    e7f2:	0040      	lslmi	r0, r0, #1
    e7f4:	230e      	movmi	r3, #14
    e7f6:	230b      	movpl	r3, #11
    e7f8:	4298      	cmp	r0, r3
    e7fa:	d800      	bhi.n	e7fe <am_hal_flash_delay+0x16>
    e7fc:	4770      	bx	lr
    e7fe:	1ac0      	subs	r0, r0, r3
    e800:	4b00      	ldr	r3, [pc, #0]	; (e804 <am_hal_flash_delay+0x1c>)
    e802:	4718      	bx	r3
    e804:	0800009d 	.word	0x0800009d

0000e808 <am_hal_flash_delay_status_check>:
    e808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e80c:	f89d 4020 	ldrb.w	r4, [sp, #32]
    e810:	460d      	mov	r5, r1
    e812:	4616      	mov	r6, r2
    e814:	461f      	mov	r7, r3
    e816:	b1b4      	cbz	r4, e846 <am_hal_flash_delay_status_check+0x3e>
    e818:	4604      	mov	r4, r0
    e81a:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e81e:	f8df 8058 	ldr.w	r8, [pc, #88]	; e878 <am_hal_flash_delay_status_check+0x70>
    e822:	e009      	b.n	e838 <am_hal_flash_delay_status_check+0x30>
    e824:	b324      	cbz	r4, e870 <am_hal_flash_delay_status_check+0x68>
    e826:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e82a:	f013 0f04 	tst.w	r3, #4
    e82e:	bf14      	ite	ne
    e830:	2012      	movne	r0, #18
    e832:	2005      	moveq	r0, #5
    e834:	3c01      	subs	r4, #1
    e836:	47c0      	blx	r8
    e838:	682b      	ldr	r3, [r5, #0]
    e83a:	4033      	ands	r3, r6
    e83c:	429f      	cmp	r7, r3
    e83e:	d1f1      	bne.n	e824 <am_hal_flash_delay_status_check+0x1c>
    e840:	2000      	movs	r0, #0
    e842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e846:	f8df 8030 	ldr.w	r8, [pc, #48]	; e878 <am_hal_flash_delay_status_check+0x70>
    e84a:	4604      	mov	r4, r0
    e84c:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    e850:	e009      	b.n	e866 <am_hal_flash_delay_status_check+0x5e>
    e852:	b16c      	cbz	r4, e870 <am_hal_flash_delay_status_check+0x68>
    e854:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    e858:	f013 0f04 	tst.w	r3, #4
    e85c:	bf14      	ite	ne
    e85e:	2012      	movne	r0, #18
    e860:	2005      	moveq	r0, #5
    e862:	3c01      	subs	r4, #1
    e864:	47c0      	blx	r8
    e866:	682b      	ldr	r3, [r5, #0]
    e868:	4033      	ands	r3, r6
    e86a:	429f      	cmp	r7, r3
    e86c:	d0f1      	beq.n	e852 <am_hal_flash_delay_status_check+0x4a>
    e86e:	e7e7      	b.n	e840 <am_hal_flash_delay_status_check+0x38>
    e870:	2004      	movs	r0, #4
    e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e876:	bf00      	nop
    e878:	0800009d 	.word	0x0800009d

0000e87c <am_hal_flash_load_ui32>:
    e87c:	4b00      	ldr	r3, [pc, #0]	; (e880 <am_hal_flash_load_ui32+0x4>)
    e87e:	4718      	bx	r3
    e880:	08000075 	.word	0x08000075

0000e884 <am_hal_flash_store_ui32>:
    e884:	4b01      	ldr	r3, [pc, #4]	; (e88c <am_hal_flash_store_ui32+0x8>)
    e886:	f043 0301 	orr.w	r3, r3, #1
    e88a:	4718      	bx	r3
    e88c:	10001058 	.word	0x10001058

0000e890 <am_hal_gpio_pinconfig>:
    e890:	2831      	cmp	r0, #49	; 0x31
    e892:	d901      	bls.n	e898 <am_hal_gpio_pinconfig+0x8>
    e894:	2006      	movs	r0, #6
    e896:	4770      	bx	lr
    e898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e89c:	f001 0307 	and.w	r3, r1, #7
    e8a0:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    e8a4:	b085      	sub	sp, #20
    e8a6:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e8aa:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    e8ae:	d014      	beq.n	e8da <am_hal_gpio_pinconfig+0x4a>
    e8b0:	f3c1 1742 	ubfx	r7, r1, #5, #3
    e8b4:	1dbd      	adds	r5, r7, #6
    e8b6:	f005 0507 	and.w	r5, r5, #7
    e8ba:	2d03      	cmp	r5, #3
    e8bc:	f042 0201 	orr.w	r2, r2, #1
    e8c0:	f200 80a7 	bhi.w	ea12 <am_hal_gpio_pinconfig+0x182>
    e8c4:	4d82      	ldr	r5, [pc, #520]	; (ead0 <am_hal_gpio_pinconfig+0x240>)
    e8c6:	5c2d      	ldrb	r5, [r5, r0]
    e8c8:	07ee      	lsls	r6, r5, #31
    e8ca:	d403      	bmi.n	e8d4 <am_hal_gpio_pinconfig+0x44>
    e8cc:	4881      	ldr	r0, [pc, #516]	; (ead4 <am_hal_gpio_pinconfig+0x244>)
    e8ce:	b005      	add	sp, #20
    e8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8d4:	3f02      	subs	r7, #2
    e8d6:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    e8da:	2c00      	cmp	r4, #0
    e8dc:	f040 8091 	bne.w	ea02 <am_hal_gpio_pinconfig+0x172>
    e8e0:	4c7d      	ldr	r4, [pc, #500]	; (ead8 <am_hal_gpio_pinconfig+0x248>)
    e8e2:	4d7e      	ldr	r5, [pc, #504]	; (eadc <am_hal_gpio_pinconfig+0x24c>)
    e8e4:	5c24      	ldrb	r4, [r4, r0]
    e8e6:	5c2d      	ldrb	r5, [r5, r0]
    e8e8:	411c      	asrs	r4, r3
    e8ea:	f014 0f01 	tst.w	r4, #1
    e8ee:	bf0c      	ite	eq
    e8f0:	2400      	moveq	r4, #0
    e8f2:	2402      	movne	r4, #2
    e8f4:	42ab      	cmp	r3, r5
    e8f6:	ea42 0204 	orr.w	r2, r2, r4
    e8fa:	f000 8096 	beq.w	ea2a <am_hal_gpio_pinconfig+0x19a>
    e8fe:	f3c1 3341 	ubfx	r3, r1, #13, #2
    e902:	105d      	asrs	r5, r3, #1
    e904:	f3c1 2681 	ubfx	r6, r1, #10, #2
    e908:	00db      	lsls	r3, r3, #3
    e90a:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    e90e:	f003 0408 	and.w	r4, r3, #8
    e912:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    e916:	f00e 060c 	and.w	r6, lr, #12
    e91a:	f3c1 3500 	ubfx	r5, r1, #12, #1
    e91e:	2e04      	cmp	r6, #4
    e920:	ea43 0304 	orr.w	r3, r3, r4
    e924:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    e928:	462c      	mov	r4, r5
    e92a:	f000 808b 	beq.w	ea44 <am_hal_gpio_pinconfig+0x1b4>
    e92e:	4c6c      	ldr	r4, [pc, #432]	; (eae0 <am_hal_gpio_pinconfig+0x250>)
    e930:	6827      	ldr	r7, [r4, #0]
    e932:	1bcf      	subs	r7, r1, r7
    e934:	fab7 f787 	clz	r7, r7
    e938:	097f      	lsrs	r7, r7, #5
    e93a:	f01e 0f60 	tst.w	lr, #96	; 0x60
    e93e:	bf04      	itt	eq
    e940:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    e944:	f364 0300 	bfieq	r3, r4, #0, #1
    e948:	0084      	lsls	r4, r0, #2
    e94a:	f3c1 2101 	ubfx	r1, r1, #8, #2
    e94e:	2902      	cmp	r1, #2
    e950:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    e954:	d078      	beq.n	ea48 <am_hal_gpio_pinconfig+0x1b8>
    e956:	d87f      	bhi.n	ea58 <am_hal_gpio_pinconfig+0x1c8>
    e958:	2901      	cmp	r1, #1
    e95a:	f04f 0100 	mov.w	r1, #0
    e95e:	bf08      	it	eq
    e960:	f042 0204 	orreq.w	r2, r2, #4
    e964:	f005 0518 	and.w	r5, r5, #24
    e968:	9101      	str	r1, [sp, #4]
    e96a:	f004 041c 	and.w	r4, r4, #28
    e96e:	f020 0a03 	bic.w	sl, r0, #3
    e972:	f04f 090f 	mov.w	r9, #15
    e976:	fa09 f904 	lsl.w	r9, r9, r4
    e97a:	0841      	lsrs	r1, r0, #1
    e97c:	26ff      	movs	r6, #255	; 0xff
    e97e:	fa03 f404 	lsl.w	r4, r3, r4
    e982:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    e986:	40ae      	lsls	r6, r5
    e988:	9300      	str	r3, [sp, #0]
    e98a:	fa02 f505 	lsl.w	r5, r2, r5
    e98e:	4683      	mov	fp, r0
    e990:	f021 0803 	bic.w	r8, r1, #3
    e994:	f000 f932 	bl	ebfc <am_hal_interrupt_master_disable>
    e998:	9b00      	ldr	r3, [sp, #0]
    e99a:	9003      	str	r0, [sp, #12]
    e99c:	ea6f 0909 	mvn.w	r9, r9
    e9a0:	43f6      	mvns	r6, r6
    e9a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    e9a6:	f8df e15c 	ldr.w	lr, [pc, #348]	; eb04 <am_hal_gpio_pinconfig+0x274>
    e9aa:	4a4e      	ldr	r2, [pc, #312]	; (eae4 <am_hal_gpio_pinconfig+0x254>)
    e9ac:	b15f      	cbz	r7, e9c6 <am_hal_gpio_pinconfig+0x136>
    e9ae:	ea4f 07db 	mov.w	r7, fp, lsr #3
    e9b2:	f00b 001f 	and.w	r0, fp, #31
    e9b6:	f007 0704 	and.w	r7, r7, #4
    e9ba:	f04f 0b01 	mov.w	fp, #1
    e9be:	494a      	ldr	r1, [pc, #296]	; (eae8 <am_hal_gpio_pinconfig+0x258>)
    e9c0:	fa0b f000 	lsl.w	r0, fp, r0
    e9c4:	5078      	str	r0, [r7, r1]
    e9c6:	4849      	ldr	r0, [pc, #292]	; (eaec <am_hal_gpio_pinconfig+0x25c>)
    e9c8:	2773      	movs	r7, #115	; 0x73
    e9ca:	6607      	str	r7, [r0, #96]	; 0x60
    e9cc:	681f      	ldr	r7, [r3, #0]
    e9ce:	4037      	ands	r7, r6
    e9d0:	433d      	orrs	r5, r7
    e9d2:	601d      	str	r5, [r3, #0]
    e9d4:	f858 300e 	ldr.w	r3, [r8, lr]
    e9d8:	ea09 0303 	and.w	r3, r9, r3
    e9dc:	4323      	orrs	r3, r4
    e9de:	f848 300e 	str.w	r3, [r8, lr]
    e9e2:	f85a 3002 	ldr.w	r3, [sl, r2]
    e9e6:	401e      	ands	r6, r3
    e9e8:	9b01      	ldr	r3, [sp, #4]
    e9ea:	2400      	movs	r4, #0
    e9ec:	431e      	orrs	r6, r3
    e9ee:	f84a 6002 	str.w	r6, [sl, r2]
    e9f2:	6604      	str	r4, [r0, #96]	; 0x60
    e9f4:	9803      	ldr	r0, [sp, #12]
    e9f6:	f000 f905 	bl	ec04 <am_hal_interrupt_master_set>
    e9fa:	4620      	mov	r0, r4
    e9fc:	b005      	add	sp, #20
    e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea02:	2c01      	cmp	r4, #1
    ea04:	d017      	beq.n	ea36 <am_hal_gpio_pinconfig+0x1a6>
    ea06:	2c02      	cmp	r4, #2
    ea08:	d035      	beq.n	ea76 <am_hal_gpio_pinconfig+0x1e6>
    ea0a:	4839      	ldr	r0, [pc, #228]	; (eaf0 <am_hal_gpio_pinconfig+0x260>)
    ea0c:	b005      	add	sp, #20
    ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea12:	2ec0      	cmp	r6, #192	; 0xc0
    ea14:	d02a      	beq.n	ea6c <am_hal_gpio_pinconfig+0x1dc>
    ea16:	2e20      	cmp	r6, #32
    ea18:	f47f af5f 	bne.w	e8da <am_hal_gpio_pinconfig+0x4a>
    ea1c:	2814      	cmp	r0, #20
    ea1e:	f43f af55 	beq.w	e8cc <am_hal_gpio_pinconfig+0x3c>
    ea22:	2c00      	cmp	r4, #0
    ea24:	f43f af5c 	beq.w	e8e0 <am_hal_gpio_pinconfig+0x50>
    ea28:	e7eb      	b.n	ea02 <am_hal_gpio_pinconfig+0x172>
    ea2a:	f3c1 4402 	ubfx	r4, r1, #16, #3
    ea2e:	2c07      	cmp	r4, #7
    ea30:	d128      	bne.n	ea84 <am_hal_gpio_pinconfig+0x1f4>
    ea32:	4830      	ldr	r0, [pc, #192]	; (eaf4 <am_hal_gpio_pinconfig+0x264>)
    ea34:	e74b      	b.n	e8ce <am_hal_gpio_pinconfig+0x3e>
    ea36:	4c26      	ldr	r4, [pc, #152]	; (ead0 <am_hal_gpio_pinconfig+0x240>)
    ea38:	5c24      	ldrb	r4, [r4, r0]
    ea3a:	07a5      	lsls	r5, r4, #30
    ea3c:	d5e5      	bpl.n	ea0a <am_hal_gpio_pinconfig+0x17a>
    ea3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ea42:	e74d      	b.n	e8e0 <am_hal_gpio_pinconfig+0x50>
    ea44:	2701      	movs	r7, #1
    ea46:	e778      	b.n	e93a <am_hal_gpio_pinconfig+0xaa>
    ea48:	f005 0518 	and.w	r5, r5, #24
    ea4c:	f04f 0801 	mov.w	r8, #1
    ea50:	fa08 f105 	lsl.w	r1, r8, r5
    ea54:	9101      	str	r1, [sp, #4]
    ea56:	e788      	b.n	e96a <am_hal_gpio_pinconfig+0xda>
    ea58:	f005 0518 	and.w	r5, r5, #24
    ea5c:	f04f 0801 	mov.w	r8, #1
    ea60:	fa08 f105 	lsl.w	r1, r8, r5
    ea64:	f042 0204 	orr.w	r2, r2, #4
    ea68:	9101      	str	r1, [sp, #4]
    ea6a:	e77e      	b.n	e96a <am_hal_gpio_pinconfig+0xda>
    ea6c:	2814      	cmp	r0, #20
    ea6e:	f43f af34 	beq.w	e8da <am_hal_gpio_pinconfig+0x4a>
    ea72:	4821      	ldr	r0, [pc, #132]	; (eaf8 <am_hal_gpio_pinconfig+0x268>)
    ea74:	e72b      	b.n	e8ce <am_hal_gpio_pinconfig+0x3e>
    ea76:	4c16      	ldr	r4, [pc, #88]	; (ead0 <am_hal_gpio_pinconfig+0x240>)
    ea78:	5c24      	ldrb	r4, [r4, r0]
    ea7a:	0764      	lsls	r4, r4, #29
    ea7c:	d5c5      	bpl.n	ea0a <am_hal_gpio_pinconfig+0x17a>
    ea7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ea82:	e72d      	b.n	e8e0 <am_hal_gpio_pinconfig+0x50>
    ea84:	4d1d      	ldr	r5, [pc, #116]	; (eafc <am_hal_gpio_pinconfig+0x26c>)
    ea86:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    ea8a:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    ea8e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    ea92:	429e      	cmp	r6, r3
    ea94:	d00c      	beq.n	eab0 <am_hal_gpio_pinconfig+0x220>
    ea96:	0084      	lsls	r4, r0, #2
    ea98:	4425      	add	r5, r4
    ea9a:	786e      	ldrb	r6, [r5, #1]
    ea9c:	429e      	cmp	r6, r3
    ea9e:	d012      	beq.n	eac6 <am_hal_gpio_pinconfig+0x236>
    eaa0:	78ae      	ldrb	r6, [r5, #2]
    eaa2:	429e      	cmp	r6, r3
    eaa4:	d00d      	beq.n	eac2 <am_hal_gpio_pinconfig+0x232>
    eaa6:	78ed      	ldrb	r5, [r5, #3]
    eaa8:	429d      	cmp	r5, r3
    eaaa:	d00e      	beq.n	eaca <am_hal_gpio_pinconfig+0x23a>
    eaac:	4814      	ldr	r0, [pc, #80]	; (eb00 <am_hal_gpio_pinconfig+0x270>)
    eaae:	e70e      	b.n	e8ce <am_hal_gpio_pinconfig+0x3e>
    eab0:	2300      	movs	r3, #0
    eab2:	0084      	lsls	r4, r0, #2
    eab4:	005b      	lsls	r3, r3, #1
    eab6:	f3c1 5540 	ubfx	r5, r1, #21, #1
    eaba:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    eabe:	2700      	movs	r7, #0
    eac0:	e743      	b.n	e94a <am_hal_gpio_pinconfig+0xba>
    eac2:	2302      	movs	r3, #2
    eac4:	e7f6      	b.n	eab4 <am_hal_gpio_pinconfig+0x224>
    eac6:	2301      	movs	r3, #1
    eac8:	e7f4      	b.n	eab4 <am_hal_gpio_pinconfig+0x224>
    eaca:	2303      	movs	r3, #3
    eacc:	e7f2      	b.n	eab4 <am_hal_gpio_pinconfig+0x224>
    eace:	bf00      	nop
    ead0:	00010820 	.word	0x00010820
    ead4:	08000100 	.word	0x08000100
    ead8:	0001091c 	.word	0x0001091c
    eadc:	00010958 	.word	0x00010958
    eae0:	00010950 	.word	0x00010950
    eae4:	400100e0 	.word	0x400100e0
    eae8:	400100b4 	.word	0x400100b4
    eaec:	40010000 	.word	0x40010000
    eaf0:	08000102 	.word	0x08000102
    eaf4:	08000103 	.word	0x08000103
    eaf8:	08000101 	.word	0x08000101
    eafc:	00010854 	.word	0x00010854
    eb00:	08000104 	.word	0x08000104
    eb04:	40010040 	.word	0x40010040

0000eb08 <am_hal_gpio_state_read>:
    eb08:	b1ca      	cbz	r2, eb3e <am_hal_gpio_state_read+0x36>
    eb0a:	2831      	cmp	r0, #49	; 0x31
    eb0c:	d904      	bls.n	eb18 <am_hal_gpio_state_read+0x10>
    eb0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eb12:	6013      	str	r3, [r2, #0]
    eb14:	2005      	movs	r0, #5
    eb16:	4770      	bx	lr
    eb18:	08c3      	lsrs	r3, r0, #3
    eb1a:	2901      	cmp	r1, #1
    eb1c:	f003 0304 	and.w	r3, r3, #4
    eb20:	f000 001f 	and.w	r0, r0, #31
    eb24:	d00d      	beq.n	eb42 <am_hal_gpio_state_read+0x3a>
    eb26:	d313      	bcc.n	eb50 <am_hal_gpio_state_read+0x48>
    eb28:	2902      	cmp	r1, #2
    eb2a:	d108      	bne.n	eb3e <am_hal_gpio_state_read+0x36>
    eb2c:	490c      	ldr	r1, [pc, #48]	; (eb60 <am_hal_gpio_state_read+0x58>)
    eb2e:	585b      	ldr	r3, [r3, r1]
    eb30:	fa23 f000 	lsr.w	r0, r3, r0
    eb34:	f000 0001 	and.w	r0, r0, #1
    eb38:	6010      	str	r0, [r2, #0]
    eb3a:	2000      	movs	r0, #0
    eb3c:	4770      	bx	lr
    eb3e:	2006      	movs	r0, #6
    eb40:	4770      	bx	lr
    eb42:	4908      	ldr	r1, [pc, #32]	; (eb64 <am_hal_gpio_state_read+0x5c>)
    eb44:	585b      	ldr	r3, [r3, r1]
    eb46:	fa23 f000 	lsr.w	r0, r3, r0
    eb4a:	f000 0001 	and.w	r0, r0, #1
    eb4e:	e7f3      	b.n	eb38 <am_hal_gpio_state_read+0x30>
    eb50:	4905      	ldr	r1, [pc, #20]	; (eb68 <am_hal_gpio_state_read+0x60>)
    eb52:	585b      	ldr	r3, [r3, r1]
    eb54:	fa23 f000 	lsr.w	r0, r3, r0
    eb58:	f000 0001 	and.w	r0, r0, #1
    eb5c:	e7ec      	b.n	eb38 <am_hal_gpio_state_read+0x30>
    eb5e:	bf00      	nop
    eb60:	400100a0 	.word	0x400100a0
    eb64:	40010088 	.word	0x40010088
    eb68:	40010080 	.word	0x40010080

0000eb6c <am_hal_gpio_state_write>:
    eb6c:	2831      	cmp	r0, #49	; 0x31
    eb6e:	d901      	bls.n	eb74 <am_hal_gpio_state_write+0x8>
    eb70:	2005      	movs	r0, #5
    eb72:	4770      	bx	lr
    eb74:	2905      	cmp	r1, #5
    eb76:	d901      	bls.n	eb7c <am_hal_gpio_state_write+0x10>
    eb78:	2006      	movs	r0, #6
    eb7a:	4770      	bx	lr
    eb7c:	b570      	push	{r4, r5, r6, lr}
    eb7e:	f000 031f 	and.w	r3, r0, #31
    eb82:	b082      	sub	sp, #8
    eb84:	08c0      	lsrs	r0, r0, #3
    eb86:	2201      	movs	r2, #1
    eb88:	460d      	mov	r5, r1
    eb8a:	f000 0404 	and.w	r4, r0, #4
    eb8e:	fa02 f603 	lsl.w	r6, r2, r3
    eb92:	f000 f833 	bl	ebfc <am_hal_interrupt_master_disable>
    eb96:	1e69      	subs	r1, r5, #1
    eb98:	9001      	str	r0, [sp, #4]
    eb9a:	2904      	cmp	r1, #4
    eb9c:	d817      	bhi.n	ebce <am_hal_gpio_state_write+0x62>
    eb9e:	e8df f001 	tbb	[pc, r1]
    eba2:	0e13      	.short	0x0e13
    eba4:	030b      	.short	0x030b
    eba6:	19          	.byte	0x19
    eba7:	00          	.byte	0x00
    eba8:	4b0d      	ldr	r3, [pc, #52]	; (ebe0 <am_hal_gpio_state_write+0x74>)
    ebaa:	50e6      	str	r6, [r4, r3]
    ebac:	9801      	ldr	r0, [sp, #4]
    ebae:	f000 f829 	bl	ec04 <am_hal_interrupt_master_set>
    ebb2:	2000      	movs	r0, #0
    ebb4:	b002      	add	sp, #8
    ebb6:	bd70      	pop	{r4, r5, r6, pc}
    ebb8:	4b0a      	ldr	r3, [pc, #40]	; (ebe4 <am_hal_gpio_state_write+0x78>)
    ebba:	50e6      	str	r6, [r4, r3]
    ebbc:	e7f6      	b.n	ebac <am_hal_gpio_state_write+0x40>
    ebbe:	4a0a      	ldr	r2, [pc, #40]	; (ebe8 <am_hal_gpio_state_write+0x7c>)
    ebc0:	58a3      	ldr	r3, [r4, r2]
    ebc2:	4073      	eors	r3, r6
    ebc4:	50a3      	str	r3, [r4, r2]
    ebc6:	e7f1      	b.n	ebac <am_hal_gpio_state_write+0x40>
    ebc8:	4b08      	ldr	r3, [pc, #32]	; (ebec <am_hal_gpio_state_write+0x80>)
    ebca:	50e6      	str	r6, [r4, r3]
    ebcc:	e7ee      	b.n	ebac <am_hal_gpio_state_write+0x40>
    ebce:	4b08      	ldr	r3, [pc, #32]	; (ebf0 <am_hal_gpio_state_write+0x84>)
    ebd0:	50e6      	str	r6, [r4, r3]
    ebd2:	e7eb      	b.n	ebac <am_hal_gpio_state_write+0x40>
    ebd4:	4a03      	ldr	r2, [pc, #12]	; (ebe4 <am_hal_gpio_state_write+0x78>)
    ebd6:	58a3      	ldr	r3, [r4, r2]
    ebd8:	4073      	eors	r3, r6
    ebda:	50a3      	str	r3, [r4, r2]
    ebdc:	e7e6      	b.n	ebac <am_hal_gpio_state_write+0x40>
    ebde:	bf00      	nop
    ebe0:	400100a8 	.word	0x400100a8
    ebe4:	400100b4 	.word	0x400100b4
    ebe8:	40010088 	.word	0x40010088
    ebec:	40010090 	.word	0x40010090
    ebf0:	40010098 	.word	0x40010098

0000ebf4 <am_hal_interrupt_master_enable>:
    ebf4:	f3ef 8010 	mrs	r0, PRIMASK
    ebf8:	b662      	cpsie	i
    ebfa:	4770      	bx	lr

0000ebfc <am_hal_interrupt_master_disable>:
    ebfc:	f3ef 8010 	mrs	r0, PRIMASK
    ec00:	b672      	cpsid	i
    ec02:	4770      	bx	lr

0000ec04 <am_hal_interrupt_master_set>:
    ec04:	f380 8810 	msr	PRIMASK, r0
    ec08:	4770      	bx	lr
    ec0a:	bf00      	nop

0000ec0c <internal_iom_reset_on_error>:
    ec0c:	b570      	push	{r4, r5, r6, lr}
    ec0e:	6844      	ldr	r4, [r0, #4]
    ec10:	f8d0 085c 	ldr.w	r0, [r0, #2140]	; 0x85c
    ec14:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
    ec18:	3404      	adds	r4, #4
    ec1a:	0324      	lsls	r4, r4, #12
    ec1c:	2300      	movs	r3, #0
    ec1e:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    ec22:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    ec26:	050b      	lsls	r3, r1, #20
    ec28:	d52a      	bpl.n	ec80 <internal_iom_reset_on_error+0x74>
    ec2a:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
    ec2e:	079e      	lsls	r6, r3, #30
    ec30:	d450      	bmi.n	ecd4 <internal_iom_reset_on_error+0xc8>
    ec32:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ec36:	079a      	lsls	r2, r3, #30
    ec38:	d508      	bpl.n	ec4c <internal_iom_reset_on_error+0x40>
    ec3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ec3e:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ec42:	2b03      	cmp	r3, #3
    ec44:	d9f5      	bls.n	ec32 <internal_iom_reset_on_error+0x26>
    ec46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ec4a:	e7f6      	b.n	ec3a <internal_iom_reset_on_error+0x2e>
    ec4c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ec50:	f003 0306 	and.w	r3, r3, #6
    ec54:	2b04      	cmp	r3, #4
    ec56:	d1f9      	bne.n	ec4c <internal_iom_reset_on_error+0x40>
    ec58:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ec5c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ec60:	b173      	cbz	r3, ec80 <internal_iom_reset_on_error+0x74>
    ec62:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ec66:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ec6a:	2b03      	cmp	r3, #3
    ec6c:	d9f4      	bls.n	ec58 <internal_iom_reset_on_error+0x4c>
    ec6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    ec72:	e7f6      	b.n	ec62 <internal_iom_reset_on_error+0x56>
    ec74:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ec78:	f003 0306 	and.w	r3, r3, #6
    ec7c:	2b04      	cmp	r3, #4
    ec7e:	d1f9      	bne.n	ec74 <internal_iom_reset_on_error+0x68>
    ec80:	06cb      	lsls	r3, r1, #27
    ec82:	d520      	bpl.n	ecc6 <internal_iom_reset_on_error+0xba>
    ec84:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
    ec88:	f003 0306 	and.w	r3, r3, #6
    ec8c:	2b04      	cmp	r3, #4
    ec8e:	d1f9      	bne.n	ec84 <internal_iom_reset_on_error+0x78>
    ec90:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ec94:	f36f 1304 	bfc	r3, #4, #1
    ec98:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ec9c:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    eca0:	f36f 0341 	bfc	r3, #1, #1
    eca4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    eca8:	0040      	lsls	r0, r0, #1
    ecaa:	f7ff fd9d 	bl	e7e8 <am_hal_flash_delay>
    ecae:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
    ecb2:	f043 0302 	orr.w	r3, r3, #2
    ecb6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
    ecba:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
    ecbe:	f043 0310 	orr.w	r3, r3, #16
    ecc2:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
    ecc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ecca:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    ecce:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    ecd2:	bd70      	pop	{r4, r5, r6, pc}
    ecd4:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
    ecd8:	4e07      	ldr	r6, [pc, #28]	; (ecf8 <internal_iom_reset_on_error+0xec>)
    ecda:	2a00      	cmp	r2, #0
    ecdc:	d0ca      	beq.n	ec74 <internal_iom_reset_on_error+0x68>
    ecde:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    ece2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ece6:	2b03      	cmp	r3, #3
    ece8:	d9f9      	bls.n	ecde <internal_iom_reset_on_error+0xd2>
    ecea:	2a04      	cmp	r2, #4
    ecec:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
    ecf0:	d9c0      	bls.n	ec74 <internal_iom_reset_on_error+0x68>
    ecf2:	3a04      	subs	r2, #4
    ecf4:	e7f1      	b.n	ecda <internal_iom_reset_on_error+0xce>
    ecf6:	bf00      	nop
    ecf8:	deadbeef 	.word	0xdeadbeef

0000ecfc <am_hal_iom_initialize>:
    ecfc:	2805      	cmp	r0, #5
    ecfe:	d901      	bls.n	ed04 <am_hal_iom_initialize+0x8>
    ed00:	2005      	movs	r0, #5
    ed02:	4770      	bx	lr
    ed04:	b1e1      	cbz	r1, ed40 <am_hal_iom_initialize+0x44>
    ed06:	b4f0      	push	{r4, r5, r6, r7}
    ed08:	f640 049c 	movw	r4, #2204	; 0x89c
    ed0c:	4e0d      	ldr	r6, [pc, #52]	; (ed44 <am_hal_iom_initialize+0x48>)
    ed0e:	fb04 f400 	mul.w	r4, r4, r0
    ed12:	1935      	adds	r5, r6, r4
    ed14:	4602      	mov	r2, r0
    ed16:	78e8      	ldrb	r0, [r5, #3]
    ed18:	f010 0301 	ands.w	r3, r0, #1
    ed1c:	d002      	beq.n	ed24 <am_hal_iom_initialize+0x28>
    ed1e:	2007      	movs	r0, #7
    ed20:	bcf0      	pop	{r4, r5, r6, r7}
    ed22:	4770      	bx	lr
    ed24:	f040 0001 	orr.w	r0, r0, #1
    ed28:	f363 0041 	bfi	r0, r3, #1, #1
    ed2c:	70e8      	strb	r0, [r5, #3]
    ed2e:	5937      	ldr	r7, [r6, r4]
    ed30:	4805      	ldr	r0, [pc, #20]	; (ed48 <am_hal_iom_initialize+0x4c>)
    ed32:	f360 0717 	bfi	r7, r0, #0, #24
    ed36:	5137      	str	r7, [r6, r4]
    ed38:	4618      	mov	r0, r3
    ed3a:	606a      	str	r2, [r5, #4]
    ed3c:	600d      	str	r5, [r1, #0]
    ed3e:	e7ef      	b.n	ed20 <am_hal_iom_initialize+0x24>
    ed40:	2006      	movs	r0, #6
    ed42:	4770      	bx	lr
    ed44:	10001768 	.word	0x10001768
    ed48:	00123456 	.word	0x00123456

0000ed4c <am_hal_iom_enable>:
    ed4c:	b128      	cbz	r0, ed5a <am_hal_iom_enable+0xe>
    ed4e:	6803      	ldr	r3, [r0, #0]
    ed50:	4a34      	ldr	r2, [pc, #208]	; (ee24 <am_hal_iom_enable+0xd8>)
    ed52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ed56:	4293      	cmp	r3, r2
    ed58:	d001      	beq.n	ed5e <am_hal_iom_enable+0x12>
    ed5a:	2002      	movs	r0, #2
    ed5c:	4770      	bx	lr
    ed5e:	78c3      	ldrb	r3, [r0, #3]
    ed60:	079b      	lsls	r3, r3, #30
    ed62:	d45d      	bmi.n	ee20 <am_hal_iom_enable+0xd4>
    ed64:	6843      	ldr	r3, [r0, #4]
    ed66:	7a01      	ldrb	r1, [r0, #8]
    ed68:	b570      	push	{r4, r5, r6, lr}
    ed6a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed6e:	3304      	adds	r3, #4
    ed70:	031b      	lsls	r3, r3, #12
    ed72:	3100      	adds	r1, #0
    ed74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
    ed78:	bf18      	it	ne
    ed7a:	2101      	movne	r1, #1
    ed7c:	f3c2 0242 	ubfx	r2, r2, #1, #3
    ed80:	4291      	cmp	r1, r2
    ed82:	bf0c      	ite	eq
    ed84:	2201      	moveq	r2, #1
    ed86:	2210      	movne	r2, #16
    ed88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ed8c:	68c3      	ldr	r3, [r0, #12]
    ed8e:	b084      	sub	sp, #16
    ed90:	4604      	mov	r4, r0
    ed92:	2b00      	cmp	r3, #0
    ed94:	d039      	beq.n	ee0a <am_hal_iom_enable+0xbe>
    ed96:	6843      	ldr	r3, [r0, #4]
    ed98:	4923      	ldr	r1, [pc, #140]	; (ee28 <am_hal_iom_enable+0xdc>)
    ed9a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ed9e:	3304      	adds	r3, #4
    eda0:	031a      	lsls	r2, r3, #12
    eda2:	2300      	movs	r3, #0
    eda4:	6243      	str	r3, [r0, #36]	; 0x24
    eda6:	61c3      	str	r3, [r0, #28]
    eda8:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
    edac:	6902      	ldr	r2, [r0, #16]
    edae:	6840      	ldr	r0, [r0, #4]
    edb0:	68e6      	ldr	r6, [r4, #12]
    edb2:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
    edb6:	2501      	movs	r5, #1
    edb8:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    edbc:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    edc0:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
    edc4:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
    edc8:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
    edcc:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
    edd0:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
    edd4:	6223      	str	r3, [r4, #32]
    edd6:	b2c0      	uxtb	r0, r0
    edd8:	fa22 f305 	lsr.w	r3, r2, r5
    eddc:	f884 582d 	strb.w	r5, [r4, #2093]	; 0x82d
    ede0:	f604 0228 	addw	r2, r4, #2088	; 0x828
    ede4:	a901      	add	r1, sp, #4
    ede6:	9301      	str	r3, [sp, #4]
    ede8:	9602      	str	r6, [sp, #8]
    edea:	f88d 500c 	strb.w	r5, [sp, #12]
    edee:	f001 fa49 	bl	10284 <am_hal_cmdq_init>
    edf2:	6863      	ldr	r3, [r4, #4]
    edf4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    edf8:	3304      	adds	r3, #4
    edfa:	031b      	lsls	r3, r3, #12
    edfc:	b960      	cbnz	r0, ee18 <am_hal_iom_enable+0xcc>
    edfe:	f44f 7180 	mov.w	r1, #256	; 0x100
    ee02:	2202      	movs	r2, #2
    ee04:	6221      	str	r1, [r4, #32]
    ee06:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ee0a:	78e3      	ldrb	r3, [r4, #3]
    ee0c:	f043 0302 	orr.w	r3, r3, #2
    ee10:	70e3      	strb	r3, [r4, #3]
    ee12:	2000      	movs	r0, #0
    ee14:	b004      	add	sp, #16
    ee16:	bd70      	pop	{r4, r5, r6, pc}
    ee18:	2202      	movs	r2, #2
    ee1a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    ee1e:	e7f9      	b.n	ee14 <am_hal_iom_enable+0xc8>
    ee20:	2000      	movs	r0, #0
    ee22:	4770      	bx	lr
    ee24:	01123456 	.word	0x01123456
    ee28:	00800040 	.word	0x00800040

0000ee2c <am_hal_iom_power_ctrl>:
    ee2c:	b140      	cbz	r0, ee40 <am_hal_iom_power_ctrl+0x14>
    ee2e:	b538      	push	{r3, r4, r5, lr}
    ee30:	6803      	ldr	r3, [r0, #0]
    ee32:	4c85      	ldr	r4, [pc, #532]	; (f048 <am_hal_iom_power_ctrl+0x21c>)
    ee34:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    ee38:	42a3      	cmp	r3, r4
    ee3a:	d003      	beq.n	ee44 <am_hal_iom_power_ctrl+0x18>
    ee3c:	2002      	movs	r0, #2
    ee3e:	bd38      	pop	{r3, r4, r5, pc}
    ee40:	2002      	movs	r0, #2
    ee42:	4770      	bx	lr
    ee44:	4604      	mov	r4, r0
    ee46:	4615      	mov	r5, r2
    ee48:	b199      	cbz	r1, ee72 <am_hal_iom_power_ctrl+0x46>
    ee4a:	2902      	cmp	r1, #2
    ee4c:	d80f      	bhi.n	ee6e <am_hal_iom_power_ctrl+0x42>
    ee4e:	78c3      	ldrb	r3, [r0, #3]
    ee50:	6840      	ldr	r0, [r0, #4]
    ee52:	079a      	lsls	r2, r3, #30
    ee54:	d519      	bpl.n	ee8a <am_hal_iom_power_ctrl+0x5e>
    ee56:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ee5a:	3304      	adds	r3, #4
    ee5c:	031b      	lsls	r3, r3, #12
    ee5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
    ee62:	f003 0306 	and.w	r3, r3, #6
    ee66:	2b04      	cmp	r3, #4
    ee68:	d00c      	beq.n	ee84 <am_hal_iom_power_ctrl+0x58>
    ee6a:	2003      	movs	r0, #3
    ee6c:	bd38      	pop	{r3, r4, r5, pc}
    ee6e:	2006      	movs	r0, #6
    ee70:	bd38      	pop	{r3, r4, r5, pc}
    ee72:	2a00      	cmp	r2, #0
    ee74:	f000 80cf 	beq.w	f016 <am_hal_iom_power_ctrl+0x1ea>
    ee78:	f890 3860 	ldrb.w	r3, [r0, #2144]	; 0x860
    ee7c:	2b00      	cmp	r3, #0
    ee7e:	d146      	bne.n	ef0e <am_hal_iom_power_ctrl+0xe2>
    ee80:	2007      	movs	r0, #7
    ee82:	bd38      	pop	{r3, r4, r5, pc}
    ee84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ee86:	2b00      	cmp	r3, #0
    ee88:	d1ef      	bne.n	ee6a <am_hal_iom_power_ctrl+0x3e>
    ee8a:	b3d5      	cbz	r5, ef02 <am_hal_iom_power_ctrl+0xd6>
    ee8c:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
    ee90:	3304      	adds	r3, #4
    ee92:	031b      	lsls	r3, r3, #12
    ee94:	2201      	movs	r2, #1
    ee96:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    ee9a:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
    ee9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
    eea2:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
    eea6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    eeaa:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
    eeae:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
    eeb2:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
    eeb6:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
    eeba:	f8c4 1878 	str.w	r1, [r4, #2168]	; 0x878
    eebe:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
    eec2:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
    eec6:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
    eeca:	f8c4 1880 	str.w	r1, [r4, #2176]	; 0x880
    eece:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
    eed2:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
    eed6:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
    eeda:	f8c4 1888 	str.w	r1, [r4, #2184]	; 0x888
    eede:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    eee2:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
    eee6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    eeea:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
    eeee:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    eef2:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
    eef6:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
    eefa:	f8c4 3868 	str.w	r3, [r4, #2152]	; 0x868
    eefe:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
    ef02:	3002      	adds	r0, #2
    ef04:	b2c0      	uxtb	r0, r0
    ef06:	f000 fca1 	bl	f84c <am_hal_pwrctrl_periph_disable>
    ef0a:	2000      	movs	r0, #0
    ef0c:	bd38      	pop	{r3, r4, r5, pc}
    ef0e:	6843      	ldr	r3, [r0, #4]
    ef10:	1c98      	adds	r0, r3, #2
    ef12:	b2c0      	uxtb	r0, r0
    ef14:	f000 fc70 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    ef18:	6863      	ldr	r3, [r4, #4]
    ef1a:	f8d4 2864 	ldr.w	r2, [r4, #2148]	; 0x864
    ef1e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef22:	3304      	adds	r3, #4
    ef24:	031b      	lsls	r3, r3, #12
    ef26:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ef2a:	6863      	ldr	r3, [r4, #4]
    ef2c:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
    ef30:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef34:	3304      	adds	r3, #4
    ef36:	031b      	lsls	r3, r3, #12
    ef38:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    ef3c:	6863      	ldr	r3, [r4, #4]
    ef3e:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
    ef42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef46:	3304      	adds	r3, #4
    ef48:	031b      	lsls	r3, r3, #12
    ef4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ef4e:	6863      	ldr	r3, [r4, #4]
    ef50:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
    ef54:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef58:	3304      	adds	r3, #4
    ef5a:	031b      	lsls	r3, r3, #12
    ef5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
    ef60:	6863      	ldr	r3, [r4, #4]
    ef62:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
    ef66:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef6a:	3304      	adds	r3, #4
    ef6c:	031b      	lsls	r3, r3, #12
    ef6e:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    ef72:	6863      	ldr	r3, [r4, #4]
    ef74:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
    ef78:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef7c:	3304      	adds	r3, #4
    ef7e:	031b      	lsls	r3, r3, #12
    ef80:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
    ef84:	6863      	ldr	r3, [r4, #4]
    ef86:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
    ef8a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    ef8e:	3304      	adds	r3, #4
    ef90:	031b      	lsls	r3, r3, #12
    ef92:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    ef96:	6863      	ldr	r3, [r4, #4]
    ef98:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
    ef9c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    efa0:	3304      	adds	r3, #4
    efa2:	031b      	lsls	r3, r3, #12
    efa4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    efa8:	6863      	ldr	r3, [r4, #4]
    efaa:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
    efae:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    efb2:	3304      	adds	r3, #4
    efb4:	031b      	lsls	r3, r3, #12
    efb6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    efba:	6863      	ldr	r3, [r4, #4]
    efbc:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
    efc0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    efc4:	3304      	adds	r3, #4
    efc6:	031b      	lsls	r3, r3, #12
    efc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    efcc:	6863      	ldr	r3, [r4, #4]
    efce:	f8d4 2868 	ldr.w	r2, [r4, #2152]	; 0x868
    efd2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    efd6:	3304      	adds	r3, #4
    efd8:	031b      	lsls	r3, r3, #12
    efda:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    efde:	6863      	ldr	r3, [r4, #4]
    efe0:	f894 287c 	ldrb.w	r2, [r4, #2172]	; 0x87c
    efe4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    efe8:	3304      	adds	r3, #4
    efea:	031b      	lsls	r3, r3, #12
    efec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    eff0:	6863      	ldr	r3, [r4, #4]
    eff2:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
    eff6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    effa:	3304      	adds	r3, #4
    effc:	031b      	lsls	r3, r3, #12
    effe:	f022 0201 	bic.w	r2, r2, #1
    f002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    f006:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
    f00a:	07db      	lsls	r3, r3, #31
    f00c:	d40a      	bmi.n	f024 <am_hal_iom_power_ctrl+0x1f8>
    f00e:	2000      	movs	r0, #0
    f010:	f884 0860 	strb.w	r0, [r4, #2144]	; 0x860
    f014:	bd38      	pop	{r3, r4, r5, pc}
    f016:	6840      	ldr	r0, [r0, #4]
    f018:	3002      	adds	r0, #2
    f01a:	b2c0      	uxtb	r0, r0
    f01c:	f000 fbec 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    f020:	4628      	mov	r0, r5
    f022:	bd38      	pop	{r3, r4, r5, pc}
    f024:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f026:	b953      	cbnz	r3, f03e <am_hal_iom_power_ctrl+0x212>
    f028:	6863      	ldr	r3, [r4, #4]
    f02a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    f02e:	3304      	adds	r3, #4
    f030:	031b      	lsls	r3, r3, #12
    f032:	f503 7226 	add.w	r2, r3, #664	; 0x298
    f036:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
    f03a:	e883 000c 	stmia.w	r3, {r2, r3}
    f03e:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
    f042:	f001 f983 	bl	1034c <am_hal_cmdq_enable>
    f046:	e7e2      	b.n	f00e <am_hal_iom_power_ctrl+0x1e2>
    f048:	01123456 	.word	0x01123456

0000f04c <am_hal_iom_configure>:
    f04c:	b128      	cbz	r0, f05a <am_hal_iom_configure+0xe>
    f04e:	6803      	ldr	r3, [r0, #0]
    f050:	4a88      	ldr	r2, [pc, #544]	; (f274 <am_hal_iom_configure+0x228>)
    f052:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f056:	4293      	cmp	r3, r2
    f058:	d001      	beq.n	f05e <am_hal_iom_configure+0x12>
    f05a:	2002      	movs	r0, #2
    f05c:	4770      	bx	lr
    f05e:	b111      	cbz	r1, f066 <am_hal_iom_configure+0x1a>
    f060:	6843      	ldr	r3, [r0, #4]
    f062:	2b05      	cmp	r3, #5
    f064:	d901      	bls.n	f06a <am_hal_iom_configure+0x1e>
    f066:	2006      	movs	r0, #6
    f068:	4770      	bx	lr
    f06a:	78c2      	ldrb	r2, [r0, #3]
    f06c:	0792      	lsls	r2, r2, #30
    f06e:	d501      	bpl.n	f074 <am_hal_iom_configure+0x28>
    f070:	2007      	movs	r0, #7
    f072:	4770      	bx	lr
    f074:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
    f078:	3304      	adds	r3, #4
    f07a:	780a      	ldrb	r2, [r1, #0]
    f07c:	031b      	lsls	r3, r3, #12
    f07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f082:	f241 0410 	movw	r4, #4112	; 0x1010
    f086:	7202      	strb	r2, [r0, #8]
    f088:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    f08c:	b92a      	cbnz	r2, f09a <am_hal_iom_configure+0x4e>
    f08e:	7a0e      	ldrb	r6, [r1, #8]
    f090:	2e03      	cmp	r6, #3
    f092:	d907      	bls.n	f0a4 <am_hal_iom_configure+0x58>
    f094:	2006      	movs	r0, #6
    f096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f09a:	2a01      	cmp	r2, #1
    f09c:	d06a      	beq.n	f174 <am_hal_iom_configure+0x128>
    f09e:	2005      	movs	r0, #5
    f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0a4:	f8d1 a004 	ldr.w	sl, [r1, #4]
    f0a8:	4a73      	ldr	r2, [pc, #460]	; (f278 <am_hal_iom_configure+0x22c>)
    f0aa:	4592      	cmp	sl, r2
    f0ac:	d8f2      	bhi.n	f094 <am_hal_iom_configure+0x48>
    f0ae:	f1ba 0f00 	cmp.w	sl, #0
    f0b2:	d03e      	beq.n	f132 <am_hal_iom_configure+0xe6>
    f0b4:	fbb2 f2fa 	udiv	r2, r2, sl
    f0b8:	fb0a f402 	mul.w	r4, sl, r2
    f0bc:	f1c4 7437 	rsb	r4, r4, #47972352	; 0x2dc0000
    f0c0:	f504 44d8 	add.w	r4, r4, #27648	; 0x6c00
    f0c4:	2c00      	cmp	r4, #0
    f0c6:	bf0c      	ite	eq
    f0c8:	4614      	moveq	r4, r2
    f0ca:	1c54      	addne	r4, r2, #1
    f0cc:	4262      	negs	r2, r4
    f0ce:	4022      	ands	r2, r4
    f0d0:	fab2 f282 	clz	r2, r2
    f0d4:	f1c2 021f 	rsb	r2, r2, #31
    f0d8:	2a06      	cmp	r2, #6
    f0da:	bfa8      	it	ge
    f0dc:	2206      	movge	r2, #6
    f0de:	f5ba 6f37 	cmp.w	sl, #2928	; 0xb70
    f0e2:	f240 80c0 	bls.w	f266 <am_hal_iom_configure+0x21a>
    f0e6:	f5aa 0574 	sub.w	r5, sl, #15990784	; 0xf40000
    f0ea:	4f64      	ldr	r7, [pc, #400]	; (f27c <am_hal_iom_configure+0x230>)
    f0ec:	f5a5 5510 	sub.w	r5, r5, #9216	; 0x2400
    f0f0:	42bd      	cmp	r5, r7
    f0f2:	bf8c      	ite	hi
    f0f4:	f04f 0800 	movhi.w	r8, #0
    f0f8:	f04f 0801 	movls.w	r8, #1
    f0fc:	ea4f 0e48 	mov.w	lr, r8, lsl #1
    f100:	f10e 0e01 	add.w	lr, lr, #1
    f104:	fa0e f702 	lsl.w	r7, lr, r2
    f108:	fbb4 f5f7 	udiv	r5, r4, r7
    f10c:	fb07 4715 	mls	r7, r7, r5, r4
    f110:	2f00      	cmp	r7, #0
    f112:	bf18      	it	ne
    f114:	3501      	addne	r5, #1
    f116:	fab5 f785 	clz	r7, r5
    f11a:	f1c7 071f 	rsb	r7, r7, #31
    f11e:	2f07      	cmp	r7, #7
    f120:	f240 809e 	bls.w	f260 <am_hal_iom_configure+0x214>
    f124:	3a07      	subs	r2, #7
    f126:	443a      	add	r2, r7
    f128:	f102 0901 	add.w	r9, r2, #1
    f12c:	f1b9 0f07 	cmp.w	r9, #7
    f130:	d934      	bls.n	f19c <am_hal_iom_configure+0x150>
    f132:	2400      	movs	r4, #0
    f134:	f8c3 6300 	str.w	r6, [r3, #768]	; 0x300
    f138:	f044 0401 	orr.w	r4, r4, #1
    f13c:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210
    f140:	68cb      	ldr	r3, [r1, #12]
    f142:	684d      	ldr	r5, [r1, #4]
    f144:	690c      	ldr	r4, [r1, #16]
    f146:	60c3      	str	r3, [r0, #12]
    f148:	2300      	movs	r3, #0
    f14a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f14e:	f880 3898 	strb.w	r3, [r0, #2200]	; 0x898
    f152:	f880 3899 	strb.w	r3, [r0, #2201]	; 0x899
    f156:	f880 389a 	strb.w	r3, [r0, #2202]	; 0x89a
    f15a:	f880 389b 	strb.w	r3, [r0, #2203]	; 0x89b
    f15e:	6104      	str	r4, [r0, #16]
    f160:	f8c0 1858 	str.w	r1, [r0, #2136]	; 0x858
    f164:	4a44      	ldr	r2, [pc, #272]	; (f278 <am_hal_iom_configure+0x22c>)
    f166:	fbb2 f2f5 	udiv	r2, r2, r5
    f16a:	f8c0 285c 	str.w	r2, [r0, #2140]	; 0x85c
    f16e:	4618      	mov	r0, r3
    f170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f174:	684a      	ldr	r2, [r1, #4]
    f176:	4c42      	ldr	r4, [pc, #264]	; (f280 <am_hal_iom_configure+0x234>)
    f178:	42a2      	cmp	r2, r4
    f17a:	d06c      	beq.n	f256 <am_hal_iom_configure+0x20a>
    f17c:	4c41      	ldr	r4, [pc, #260]	; (f284 <am_hal_iom_configure+0x238>)
    f17e:	42a2      	cmp	r2, r4
    f180:	d064      	beq.n	f24c <am_hal_iom_configure+0x200>
    f182:	4c41      	ldr	r4, [pc, #260]	; (f288 <am_hal_iom_configure+0x23c>)
    f184:	42a2      	cmp	r2, r4
    f186:	d185      	bne.n	f094 <am_hal_iom_configure+0x48>
    f188:	f104 44ee 	add.w	r4, r4, #1996488704	; 0x77000000
    f18c:	4a3f      	ldr	r2, [pc, #252]	; (f28c <am_hal_iom_configure+0x240>)
    f18e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f192:	f504 1466 	add.w	r4, r4, #3768320	; 0x398000
    f196:	f604 3461 	addw	r4, r4, #2913	; 0xb61
    f19a:	e7cd      	b.n	f138 <am_hal_iom_configure+0xec>
    f19c:	3f07      	subs	r7, #7
    f19e:	f04f 0c01 	mov.w	ip, #1
    f1a2:	fa0c fc07 	lsl.w	ip, ip, r7
    f1a6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    f1aa:	ea0c 0c05 	and.w	ip, ip, r5
    f1ae:	40fd      	lsrs	r5, r7
    f1b0:	f1bc 0f00 	cmp.w	ip, #0
    f1b4:	bf18      	it	ne
    f1b6:	3501      	addne	r5, #1
    f1b8:	4f35      	ldr	r7, [pc, #212]	; (f290 <am_hal_iom_configure+0x244>)
    f1ba:	45ba      	cmp	sl, r7
    f1bc:	d843      	bhi.n	f246 <am_hal_iom_configure+0x1fa>
    f1be:	f04f 0c01 	mov.w	ip, #1
    f1c2:	fa0c fc02 	lsl.w	ip, ip, r2
    f1c6:	ebbc 0c04 	subs.w	ip, ip, r4
    f1ca:	bf18      	it	ne
    f1cc:	f04f 0c01 	movne.w	ip, #1
    f1d0:	1074      	asrs	r4, r6, #1
    f1d2:	2c01      	cmp	r4, #1
    f1d4:	d04a      	beq.n	f26c <am_hal_iom_configure+0x220>
    f1d6:	3d01      	subs	r5, #1
    f1d8:	086f      	lsrs	r7, r5, #1
    f1da:	fa0e f402 	lsl.w	r4, lr, r2
    f1de:	fb05 fe0c 	mul.w	lr, r5, ip
    f1e2:	fb0e 4404 	mla	r4, lr, r4, r4
    f1e6:	ea4f 2e09 	mov.w	lr, r9, lsl #8
    f1ea:	f8df 908c 	ldr.w	r9, [pc, #140]	; f278 <am_hal_iom_configure+0x22c>
    f1ee:	fbb9 fbf4 	udiv	fp, r9, r4
    f1f2:	fb04 fa0b 	mul.w	sl, r4, fp
    f1f6:	f1ca 7a37 	rsb	sl, sl, #47972352	; 0x2dc0000
    f1fa:	0864      	lsrs	r4, r4, #1
    f1fc:	f40e 6ee0 	and.w	lr, lr, #1792	; 0x700
    f200:	f50a 4ad8 	add.w	sl, sl, #27648	; 0x6c00
    f204:	4554      	cmp	r4, sl
    f206:	bf2c      	ite	cs
    f208:	46da      	movcs	sl, fp
    f20a:	f10b 0a01 	addcc.w	sl, fp, #1
    f20e:	ea4e 6505 	orr.w	r5, lr, r5, lsl #24
    f212:	f8df b090 	ldr.w	fp, [pc, #144]	; f2a4 <am_hal_iom_configure+0x258>
    f216:	fbba f4fb 	udiv	r4, sl, fp
    f21a:	043f      	lsls	r7, r7, #16
    f21c:	ea45 25c8 	orr.w	r5, r5, r8, lsl #11
    f220:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
    f224:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
    f228:	fb0b ab14 	mls	fp, fp, r4, sl
    f22c:	432f      	orrs	r7, r5
    f22e:	f1bb 0f00 	cmp.w	fp, #0
    f232:	d105      	bne.n	f240 <am_hal_iom_configure+0x1f4>
    f234:	b124      	cbz	r4, f240 <am_hal_iom_configure+0x1f4>
    f236:	1e65      	subs	r5, r4, #1
    f238:	4225      	tst	r5, r4
    f23a:	d101      	bne.n	f240 <am_hal_iom_configure+0x1f4>
    f23c:	f44e 6700 	orr.w	r7, lr, #2048	; 0x800
    f240:	2400      	movs	r4, #0
    f242:	433c      	orrs	r4, r7
    f244:	e776      	b.n	f134 <am_hal_iom_configure+0xe8>
    f246:	f04f 0c00 	mov.w	ip, #0
    f24a:	e7c1      	b.n	f1d0 <am_hal_iom_configure+0x184>
    f24c:	4a11      	ldr	r2, [pc, #68]	; (f294 <am_hal_iom_configure+0x248>)
    f24e:	4c12      	ldr	r4, [pc, #72]	; (f298 <am_hal_iom_configure+0x24c>)
    f250:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f254:	e770      	b.n	f138 <am_hal_iom_configure+0xec>
    f256:	4a11      	ldr	r2, [pc, #68]	; (f29c <am_hal_iom_configure+0x250>)
    f258:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    f25c:	4c10      	ldr	r4, [pc, #64]	; (f2a0 <am_hal_iom_configure+0x254>)
    f25e:	e76b      	b.n	f138 <am_hal_iom_configure+0xec>
    f260:	f102 0901 	add.w	r9, r2, #1
    f264:	e7a8      	b.n	f1b8 <am_hal_iom_configure+0x16c>
    f266:	f04f 0801 	mov.w	r8, #1
    f26a:	e747      	b.n	f0fc <am_hal_iom_configure+0xb0>
    f26c:	1eaf      	subs	r7, r5, #2
    f26e:	087f      	lsrs	r7, r7, #1
    f270:	3d01      	subs	r5, #1
    f272:	e7b2      	b.n	f1da <am_hal_iom_configure+0x18e>
    f274:	01123456 	.word	0x01123456
    f278:	02dc6c00 	.word	0x02dc6c00
    f27c:	007a11ff 	.word	0x007a11ff
    f280:	00061a80 	.word	0x00061a80
    f284:	000f4240 	.word	0x000f4240
    f288:	000186a0 	.word	0x000186a0
    f28c:	0003f070 	.word	0x0003f070
    f290:	00b71aff 	.word	0x00b71aff
    f294:	00213040 	.word	0x00213040
    f298:	06031301 	.word	0x06031301
    f29c:	0003f270 	.word	0x0003f270
    f2a0:	1d0e1201 	.word	0x1d0e1201
    f2a4:	0003d090 	.word	0x0003d090

0000f2a8 <am_hal_iom_blocking_transfer>:
    f2a8:	b128      	cbz	r0, f2b6 <am_hal_iom_blocking_transfer+0xe>
    f2aa:	6803      	ldr	r3, [r0, #0]
    f2ac:	4ac8      	ldr	r2, [pc, #800]	; (f5d0 <am_hal_iom_blocking_transfer+0x328>)
    f2ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    f2b2:	4293      	cmp	r3, r2
    f2b4:	d001      	beq.n	f2ba <am_hal_iom_blocking_transfer+0x12>
    f2b6:	2002      	movs	r0, #2
    f2b8:	4770      	bx	lr
    f2ba:	b159      	cbz	r1, f2d4 <am_hal_iom_blocking_transfer+0x2c>
    f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2c0:	f891 8010 	ldrb.w	r8, [r1, #16]
    f2c4:	f1b8 0f01 	cmp.w	r8, #1
    f2c8:	b087      	sub	sp, #28
    f2ca:	d905      	bls.n	f2d8 <am_hal_iom_blocking_transfer+0x30>
    f2cc:	2007      	movs	r0, #7
    f2ce:	b007      	add	sp, #28
    f2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2d4:	2006      	movs	r0, #6
    f2d6:	4770      	bx	lr
    f2d8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    f2dc:	f1ba 0f00 	cmp.w	sl, #0
    f2e0:	d102      	bne.n	f2e8 <am_hal_iom_blocking_transfer+0x40>
    f2e2:	f881 a010 	strb.w	sl, [r1, #16]
    f2e6:	46d0      	mov	r8, sl
    f2e8:	f8d1 9004 	ldr.w	r9, [r1, #4]
    f2ec:	f1b9 0f03 	cmp.w	r9, #3
    f2f0:	d901      	bls.n	f2f6 <am_hal_iom_blocking_transfer+0x4e>
    f2f2:	2006      	movs	r0, #6
    f2f4:	e7eb      	b.n	f2ce <am_hal_iom_blocking_transfer+0x26>
    f2f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    f2fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2fe:	f8d1 b008 	ldr.w	fp, [r1, #8]
    f302:	4093      	lsls	r3, r2
    f304:	ea13 0f0b 	tst.w	r3, fp
    f308:	d1f3      	bne.n	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f30a:	f1ba 0f00 	cmp.w	sl, #0
    f30e:	f000 80c5 	beq.w	f49c <am_hal_iom_blocking_transfer+0x1f4>
    f312:	f1b8 0f00 	cmp.w	r8, #0
    f316:	f000 80d3 	beq.w	f4c0 <am_hal_iom_blocking_transfer+0x218>
    f31a:	698b      	ldr	r3, [r1, #24]
    f31c:	2b00      	cmp	r3, #0
    f31e:	d0e8      	beq.n	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f320:	7a03      	ldrb	r3, [r0, #8]
    f322:	2b01      	cmp	r3, #1
    f324:	f040 80be 	bne.w	f4a4 <am_hal_iom_blocking_transfer+0x1fc>
    f328:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f32c:	d8e1      	bhi.n	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f32e:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
    f332:	2b02      	cmp	r3, #2
    f334:	d0ca      	beq.n	f2cc <am_hal_iom_blocking_transfer+0x24>
    f336:	7f0b      	ldrb	r3, [r1, #28]
    f338:	694f      	ldr	r7, [r1, #20]
    f33a:	f8d1 e018 	ldr.w	lr, [r1, #24]
    f33e:	9303      	str	r3, [sp, #12]
    f340:	4604      	mov	r4, r0
    f342:	2301      	movs	r3, #1
    f344:	460d      	mov	r5, r1
    f346:	f8d0 0858 	ldr.w	r0, [r0, #2136]	; 0x858
    f34a:	6866      	ldr	r6, [r4, #4]
    f34c:	9300      	str	r3, [sp, #0]
    f34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f352:	2300      	movs	r3, #0
    f354:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f358:	4598      	cmp	r8, r3
    f35a:	bf18      	it	ne
    f35c:	4677      	movne	r7, lr
    f35e:	f7ff fa53 	bl	e808 <am_hal_flash_delay_status_check>
    f362:	2800      	cmp	r0, #0
    f364:	d1b3      	bne.n	f2ce <am_hal_iom_blocking_transfer+0x26>
    f366:	f506 26a0 	add.w	r6, r6, #327680	; 0x50000
    f36a:	3604      	adds	r6, #4
    f36c:	2301      	movs	r3, #1
    f36e:	0336      	lsls	r6, r6, #12
    f370:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
    f374:	9300      	str	r3, [sp, #0]
    f376:	f506 732d 	add.w	r3, r6, #692	; 0x2b4
    f37a:	9304      	str	r3, [sp, #16]
    f37c:	4619      	mov	r1, r3
    f37e:	2206      	movs	r2, #6
    f380:	2304      	movs	r3, #4
    f382:	f7ff fa41 	bl	e808 <am_hal_flash_delay_status_check>
    f386:	2800      	cmp	r0, #0
    f388:	d1a1      	bne.n	f2ce <am_hal_iom_blocking_transfer+0x26>
    f38a:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    f38e:	9305      	str	r3, [sp, #20]
    f390:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    f394:	f8b6 3280 	ldrh.w	r3, [r6, #640]	; 0x280
    f398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f39c:	f360 0300 	bfi	r3, r0, #0, #1
    f3a0:	f8a6 3280 	strh.w	r3, [r6, #640]	; 0x280
    f3a4:	f8c6 2208 	str.w	r2, [r6, #520]	; 0x208
    f3a8:	682b      	ldr	r3, [r5, #0]
    f3aa:	f8c6 3404 	str.w	r3, [r6, #1028]	; 0x404
    f3ae:	7a23      	ldrb	r3, [r4, #8]
    f3b0:	b91b      	cbnz	r3, f3ba <am_hal_iom_blocking_transfer+0x112>
    f3b2:	682b      	ldr	r3, [r5, #0]
    f3b4:	4423      	add	r3, r4
    f3b6:	f893 0898 	ldrb.w	r0, [r3, #2200]	; 0x898
    f3ba:	f8c6 021c 	str.w	r0, [r6, #540]	; 0x21c
    f3be:	7a23      	ldrb	r3, [r4, #8]
    f3c0:	2b00      	cmp	r3, #0
    f3c2:	d17b      	bne.n	f4bc <am_hal_iom_blocking_transfer+0x214>
    f3c4:	682b      	ldr	r3, [r5, #0]
    f3c6:	4a83      	ldr	r2, [pc, #524]	; (f5d4 <am_hal_iom_blocking_transfer+0x32c>)
    f3c8:	051b      	lsls	r3, r3, #20
    f3ca:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    f3ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    f3d2:	ea0a 0202 	and.w	r2, sl, r2
    f3d6:	f1b8 0f01 	cmp.w	r8, #1
    f3da:	ea42 0203 	orr.w	r2, r2, r3
    f3de:	d074      	beq.n	f4ca <am_hal_iom_blocking_transfer+0x222>
    f3e0:	f3cb 230f 	ubfx	r3, fp, #8, #16
    f3e4:	f8c6 3220 	str.w	r3, [r6, #544]	; 0x220
    f3e8:	ea4f 1149 	mov.w	r1, r9, lsl #5
    f3ec:	ea4f 600b 	mov.w	r0, fp, lsl #24
    f3f0:	f040 0001 	orr.w	r0, r0, #1
    f3f4:	f001 0160 	and.w	r1, r1, #96	; 0x60
    f3f8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f3fc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f400:	4301      	orrs	r1, r0
    f402:	9803      	ldr	r0, [sp, #12]
    f404:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f408:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
    f40c:	2b03      	cmp	r3, #3
    f40e:	ea42 0201 	orr.w	r2, r2, r1
    f412:	f240 80b8 	bls.w	f586 <am_hal_iom_blocking_transfer+0x2de>
    f416:	f1b8 0f00 	cmp.w	r8, #0
    f41a:	d00a      	beq.n	f432 <am_hal_iom_blocking_transfer+0x18a>
    f41c:	4641      	mov	r1, r8
    f41e:	f857 0b04 	ldr.w	r0, [r7], #4
    f422:	f8c6 010c 	str.w	r0, [r6, #268]	; 0x10c
    f426:	2903      	cmp	r1, #3
    f428:	f1a3 0304 	sub.w	r3, r3, #4
    f42c:	f1a1 0104 	sub.w	r1, r1, #4
    f430:	d82f      	bhi.n	f492 <am_hal_iom_blocking_transfer+0x1ea>
    f432:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f436:	f04f 0800 	mov.w	r8, #0
    f43a:	2701      	movs	r7, #1
    f43c:	9904      	ldr	r1, [sp, #16]
    f43e:	9700      	str	r7, [sp, #0]
    f440:	2304      	movs	r3, #4
    f442:	2206      	movs	r2, #6
    f444:	4864      	ldr	r0, [pc, #400]	; (f5d8 <am_hal_iom_blocking_transfer+0x330>)
    f446:	f7ff f9df 	bl	e808 <am_hal_flash_delay_status_check>
    f44a:	4605      	mov	r5, r0
    f44c:	b978      	cbnz	r0, f46e <am_hal_iom_blocking_transfer+0x1c6>
    f44e:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f452:	f013 0f6c 	tst.w	r3, #108	; 0x6c
    f456:	f040 8090 	bne.w	f57a <am_hal_iom_blocking_transfer+0x2d2>
    f45a:	0599      	lsls	r1, r3, #22
    f45c:	f100 8090 	bmi.w	f580 <am_hal_iom_blocking_transfer+0x2d8>
    f460:	06da      	lsls	r2, r3, #27
    f462:	f100 80d2 	bmi.w	f60a <am_hal_iom_blocking_transfer+0x362>
    f466:	f413 4f90 	tst.w	r3, #18432	; 0x4800
    f46a:	d00e      	beq.n	f48a <am_hal_iom_blocking_transfer+0x1e2>
    f46c:	463d      	mov	r5, r7
    f46e:	f8d6 1204 	ldr.w	r1, [r6, #516]	; 0x204
    f472:	4620      	mov	r0, r4
    f474:	f7ff fbca 	bl	ec0c <internal_iom_reset_on_error>
    f478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f47c:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
    f480:	9b05      	ldr	r3, [sp, #20]
    f482:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
    f486:	4628      	mov	r0, r5
    f488:	e721      	b.n	f2ce <am_hal_iom_blocking_transfer+0x26>
    f48a:	f1b8 0f00 	cmp.w	r8, #0
    f48e:	d0f3      	beq.n	f478 <am_hal_iom_blocking_transfer+0x1d0>
    f490:	e7ec      	b.n	f46c <am_hal_iom_blocking_transfer+0x1c4>
    f492:	2b03      	cmp	r3, #3
    f494:	d976      	bls.n	f584 <am_hal_iom_blocking_transfer+0x2dc>
    f496:	2900      	cmp	r1, #0
    f498:	d1c1      	bne.n	f41e <am_hal_iom_blocking_transfer+0x176>
    f49a:	e7ca      	b.n	f432 <am_hal_iom_blocking_transfer+0x18a>
    f49c:	7a03      	ldrb	r3, [r0, #8]
    f49e:	2b01      	cmp	r3, #1
    f4a0:	f43f af45 	beq.w	f32e <am_hal_iom_blocking_transfer+0x86>
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	f47f af42 	bne.w	f32e <am_hal_iom_blocking_transfer+0x86>
    f4aa:	680b      	ldr	r3, [r1, #0]
    f4ac:	2b03      	cmp	r3, #3
    f4ae:	f63f af20 	bhi.w	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f4b2:	f5ba 5f80 	cmp.w	sl, #4096	; 0x1000
    f4b6:	f4bf af1c 	bcs.w	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f4ba:	e738      	b.n	f32e <am_hal_iom_blocking_transfer+0x86>
    f4bc:	2300      	movs	r3, #0
    f4be:	e782      	b.n	f3c6 <am_hal_iom_blocking_transfer+0x11e>
    f4c0:	694b      	ldr	r3, [r1, #20]
    f4c2:	2b00      	cmp	r3, #0
    f4c4:	f47f af2c 	bne.w	f320 <am_hal_iom_blocking_transfer+0x78>
    f4c8:	e713      	b.n	f2f2 <am_hal_iom_blocking_transfer+0x4a>
    f4ca:	ea4f 1349 	mov.w	r3, r9, lsl #5
    f4ce:	f003 0e60 	and.w	lr, r3, #96	; 0x60
    f4d2:	ea4f 610b 	mov.w	r1, fp, lsl #24
    f4d6:	9b03      	ldr	r3, [sp, #12]
    f4d8:	f041 0102 	orr.w	r1, r1, #2
    f4dc:	f3cb 200f 	ubfx	r0, fp, #8, #16
    f4e0:	f8c6 0220 	str.w	r0, [r6, #544]	; 0x220
    f4e4:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    f4e8:	ea4e 0301 	orr.w	r3, lr, r1
    f4ec:	f8d5 800c 	ldr.w	r8, [r5, #12]
    f4f0:	431a      	orrs	r2, r3
    f4f2:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f4f6:	2200      	movs	r2, #0
    f4f8:	f1b8 0f00 	cmp.w	r8, #0
    f4fc:	d09b      	beq.n	f436 <am_hal_iom_blocking_transfer+0x18e>
    f4fe:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f502:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f506:	2b03      	cmp	r3, #3
    f508:	d81e      	bhi.n	f548 <am_hal_iom_blocking_transfer+0x2a0>
    f50a:	4d33      	ldr	r5, [pc, #204]	; (f5d8 <am_hal_iom_blocking_transfer+0x330>)
    f50c:	e001      	b.n	f512 <am_hal_iom_blocking_transfer+0x26a>
    f50e:	3d01      	subs	r5, #1
    f510:	d093      	beq.n	f43a <am_hal_iom_blocking_transfer+0x192>
    f512:	2010      	movs	r0, #16
    f514:	b10a      	cbz	r2, f51a <am_hal_iom_blocking_transfer+0x272>
    f516:	4598      	cmp	r8, r3
    f518:	d88f      	bhi.n	f43a <am_hal_iom_blocking_transfer+0x192>
    f51a:	f7ff f965 	bl	e7e8 <am_hal_flash_delay>
    f51e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
    f522:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f526:	f3c3 4307 	ubfx	r3, r3, #16, #8
    f52a:	2b03      	cmp	r3, #3
    f52c:	f002 0201 	and.w	r2, r2, #1
    f530:	d9ed      	bls.n	f50e <am_hal_iom_blocking_transfer+0x266>
    f532:	e009      	b.n	f548 <am_hal_iom_blocking_transfer+0x2a0>
    f534:	2b03      	cmp	r3, #3
    f536:	6039      	str	r1, [r7, #0]
    f538:	f1a8 0804 	sub.w	r8, r8, #4
    f53c:	d967      	bls.n	f60e <am_hal_iom_blocking_transfer+0x366>
    f53e:	f1b8 0f00 	cmp.w	r8, #0
    f542:	f43f af78 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f546:	4607      	mov	r7, r0
    f548:	f1b8 0f03 	cmp.w	r8, #3
    f54c:	f1a3 0304 	sub.w	r3, r3, #4
    f550:	f8d6 1108 	ldr.w	r1, [r6, #264]	; 0x108
    f554:	f107 0004 	add.w	r0, r7, #4
    f558:	d8ec      	bhi.n	f534 <am_hal_iom_blocking_transfer+0x28c>
    f55a:	f1b8 0f01 	cmp.w	r8, #1
    f55e:	7039      	strb	r1, [r7, #0]
    f560:	ea4f 2311 	mov.w	r3, r1, lsr #8
    f564:	f43f af67 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f568:	f1b8 0f02 	cmp.w	r8, #2
    f56c:	707b      	strb	r3, [r7, #1]
    f56e:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f572:	f43f af60 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f576:	70b9      	strb	r1, [r7, #2]
    f578:	e75d      	b.n	f436 <am_hal_iom_blocking_transfer+0x18e>
    f57a:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    f57e:	e776      	b.n	f46e <am_hal_iom_blocking_transfer+0x1c6>
    f580:	4d16      	ldr	r5, [pc, #88]	; (f5dc <am_hal_iom_blocking_transfer+0x334>)
    f582:	e774      	b.n	f46e <am_hal_iom_blocking_transfer+0x1c6>
    f584:	4688      	mov	r8, r1
    f586:	f8c6 2218 	str.w	r2, [r6, #536]	; 0x218
    f58a:	f1b8 0f00 	cmp.w	r8, #0
    f58e:	f43f af52 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f592:	463b      	mov	r3, r7
    f594:	4647      	mov	r7, r8
    f596:	4698      	mov	r8, r3
    f598:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f59c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f5a0:	2b03      	cmp	r3, #3
    f5a2:	d820      	bhi.n	f5e6 <am_hal_iom_blocking_transfer+0x33e>
    f5a4:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f5a8:	07d8      	lsls	r0, r3, #31
    f5aa:	d42c      	bmi.n	f606 <am_hal_iom_blocking_transfer+0x35e>
    f5ac:	4d0a      	ldr	r5, [pc, #40]	; (f5d8 <am_hal_iom_blocking_transfer+0x330>)
    f5ae:	e005      	b.n	f5bc <am_hal_iom_blocking_transfer+0x314>
    f5b0:	f8d6 3204 	ldr.w	r3, [r6, #516]	; 0x204
    f5b4:	07db      	lsls	r3, r3, #31
    f5b6:	d426      	bmi.n	f606 <am_hal_iom_blocking_transfer+0x35e>
    f5b8:	3d01      	subs	r5, #1
    f5ba:	d024      	beq.n	f606 <am_hal_iom_blocking_transfer+0x35e>
    f5bc:	2010      	movs	r0, #16
    f5be:	f7ff f913 	bl	e7e8 <am_hal_flash_delay>
    f5c2:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    f5c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    f5ca:	2b03      	cmp	r3, #3
    f5cc:	d9f0      	bls.n	f5b0 <am_hal_iom_blocking_transfer+0x308>
    f5ce:	e00a      	b.n	f5e6 <am_hal_iom_blocking_transfer+0x33e>
    f5d0:	01123456 	.word	0x01123456
    f5d4:	000fff00 	.word	0x000fff00
    f5d8:	0007a120 	.word	0x0007a120
    f5dc:	08000001 	.word	0x08000001
    f5e0:	2f00      	cmp	r7, #0
    f5e2:	f43f af28 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f5e6:	f858 2b04 	ldr.w	r2, [r8], #4
    f5ea:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    f5ee:	2f03      	cmp	r7, #3
    f5f0:	f1a3 0304 	sub.w	r3, r3, #4
    f5f4:	f1a7 0704 	sub.w	r7, r7, #4
    f5f8:	f67f af1d 	bls.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f5fc:	2b03      	cmp	r3, #3
    f5fe:	d8ef      	bhi.n	f5e0 <am_hal_iom_blocking_transfer+0x338>
    f600:	2f00      	cmp	r7, #0
    f602:	d1c9      	bne.n	f598 <am_hal_iom_blocking_transfer+0x2f0>
    f604:	e717      	b.n	f436 <am_hal_iom_blocking_transfer+0x18e>
    f606:	46b8      	mov	r8, r7
    f608:	e717      	b.n	f43a <am_hal_iom_blocking_transfer+0x192>
    f60a:	4d04      	ldr	r5, [pc, #16]	; (f61c <am_hal_iom_blocking_transfer+0x374>)
    f60c:	e72f      	b.n	f46e <am_hal_iom_blocking_transfer+0x1c6>
    f60e:	f1b8 0f00 	cmp.w	r8, #0
    f612:	f43f af10 	beq.w	f436 <am_hal_iom_blocking_transfer+0x18e>
    f616:	4607      	mov	r7, r0
    f618:	e771      	b.n	f4fe <am_hal_iom_blocking_transfer+0x256>
    f61a:	bf00      	nop
    f61c:	08000002 	.word	0x08000002

0000f620 <am_hal_itm_disable>:
    f620:	b510      	push	{r4, lr}
    f622:	4b25      	ldr	r3, [pc, #148]	; (f6b8 <am_hal_itm_disable+0x98>)
    f624:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f628:	b9b3      	cbnz	r3, f658 <am_hal_itm_disable+0x38>
    f62a:	4b24      	ldr	r3, [pc, #144]	; (f6bc <am_hal_itm_disable+0x9c>)
    f62c:	68da      	ldr	r2, [r3, #12]
    f62e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    f632:	60da      	str	r2, [r3, #12]
    f634:	68da      	ldr	r2, [r3, #12]
    f636:	01d2      	lsls	r2, r2, #7
    f638:	d5fc      	bpl.n	f634 <am_hal_itm_disable+0x14>
    f63a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    f63e:	4920      	ldr	r1, [pc, #128]	; (f6c0 <am_hal_itm_disable+0xa0>)
    f640:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    f644:	4a1f      	ldr	r2, [pc, #124]	; (f6c4 <am_hal_itm_disable+0xa4>)
    f646:	200f      	movs	r0, #15
    f648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f64c:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    f650:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    f654:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    f658:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    f65c:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    f660:	021b      	lsls	r3, r3, #8
    f662:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    f666:	d4f9      	bmi.n	f65c <am_hal_itm_disable+0x3c>
    f668:	f44f 7048 	mov.w	r0, #800	; 0x320
    f66c:	f7ff f8bc 	bl	e7e8 <am_hal_flash_delay>
    f670:	4b13      	ldr	r3, [pc, #76]	; (f6c0 <am_hal_itm_disable+0xa0>)
    f672:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    f676:	4621      	mov	r1, r4
    f678:	2064      	movs	r0, #100	; 0x64
    f67a:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    f67e:	f023 0301 	bic.w	r3, r3, #1
    f682:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    f686:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    f68a:	4b0f      	ldr	r3, [pc, #60]	; (f6c8 <am_hal_itm_disable+0xa8>)
    f68c:	4013      	ands	r3, r2
    f68e:	2b00      	cmp	r3, #0
    f690:	d1f9      	bne.n	f686 <am_hal_itm_disable+0x66>
    f692:	3801      	subs	r0, #1
    f694:	d1f1      	bne.n	f67a <am_hal_itm_disable+0x5a>
    f696:	4a09      	ldr	r2, [pc, #36]	; (f6bc <am_hal_itm_disable+0x9c>)
    f698:	68d3      	ldr	r3, [r2, #12]
    f69a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    f69e:	60d3      	str	r3, [r2, #12]
    f6a0:	68d3      	ldr	r3, [r2, #12]
    f6a2:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    f6a6:	d1fb      	bne.n	f6a0 <am_hal_itm_disable+0x80>
    f6a8:	4a03      	ldr	r2, [pc, #12]	; (f6b8 <am_hal_itm_disable+0x98>)
    f6aa:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    f6ae:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	d1fb      	bne.n	f6ae <am_hal_itm_disable+0x8e>
    f6b6:	bd10      	pop	{r4, pc}
    f6b8:	40020000 	.word	0x40020000
    f6bc:	e000edf0 	.word	0xe000edf0
    f6c0:	c5acce55 	.word	0xc5acce55
    f6c4:	00150511 	.word	0x00150511
    f6c8:	00800001 	.word	0x00800001

0000f6cc <am_hal_mcuctrl_info_get>:
    f6cc:	b4f0      	push	{r4, r5, r6, r7}
    f6ce:	b121      	cbz	r1, f6da <am_hal_mcuctrl_info_get+0xe>
    f6d0:	2801      	cmp	r0, #1
    f6d2:	d038      	beq.n	f746 <am_hal_mcuctrl_info_get+0x7a>
    f6d4:	d320      	bcc.n	f718 <am_hal_mcuctrl_info_get+0x4c>
    f6d6:	2802      	cmp	r0, #2
    f6d8:	d002      	beq.n	f6e0 <am_hal_mcuctrl_info_get+0x14>
    f6da:	2006      	movs	r0, #6
    f6dc:	bcf0      	pop	{r4, r5, r6, r7}
    f6de:	4770      	bx	lr
    f6e0:	4a41      	ldr	r2, [pc, #260]	; (f7e8 <am_hal_mcuctrl_info_get+0x11c>)
    f6e2:	684d      	ldr	r5, [r1, #4]
    f6e4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    f6e8:	694c      	ldr	r4, [r1, #20]
    f6ea:	f003 0601 	and.w	r6, r3, #1
    f6ee:	f3c3 0040 	ubfx	r0, r3, #1, #1
    f6f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f6f6:	700e      	strb	r6, [r1, #0]
    f6f8:	7208      	strb	r0, [r1, #8]
    f6fa:	740b      	strb	r3, [r1, #16]
    f6fc:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    f700:	60cb      	str	r3, [r1, #12]
    f702:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    f706:	4328      	orrs	r0, r5
    f708:	6048      	str	r0, [r1, #4]
    f70a:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    f70e:	4323      	orrs	r3, r4
    f710:	2000      	movs	r0, #0
    f712:	614b      	str	r3, [r1, #20]
    f714:	bcf0      	pop	{r4, r5, r6, r7}
    f716:	4770      	bx	lr
    f718:	4a33      	ldr	r2, [pc, #204]	; (f7e8 <am_hal_mcuctrl_info_get+0x11c>)
    f71a:	6993      	ldr	r3, [r2, #24]
    f71c:	f3c3 1080 	ubfx	r0, r3, #6, #1
    f720:	f3c3 0380 	ubfx	r3, r3, #2, #1
    f724:	7008      	strb	r0, [r1, #0]
    f726:	704b      	strb	r3, [r1, #1]
    f728:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    f72c:	f3c3 6381 	ubfx	r3, r3, #26, #2
    f730:	710b      	strb	r3, [r1, #4]
    f732:	6953      	ldr	r3, [r2, #20]
    f734:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f738:	f003 0301 	and.w	r3, r3, #1
    f73c:	2000      	movs	r0, #0
    f73e:	708a      	strb	r2, [r1, #2]
    f740:	70cb      	strb	r3, [r1, #3]
    f742:	bcf0      	pop	{r4, r5, r6, r7}
    f744:	4770      	bx	lr
    f746:	4b28      	ldr	r3, [pc, #160]	; (f7e8 <am_hal_mcuctrl_info_get+0x11c>)
    f748:	4c28      	ldr	r4, [pc, #160]	; (f7ec <am_hal_mcuctrl_info_get+0x120>)
    f74a:	681a      	ldr	r2, [r3, #0]
    f74c:	600a      	str	r2, [r1, #0]
    f74e:	6858      	ldr	r0, [r3, #4]
    f750:	6048      	str	r0, [r1, #4]
    f752:	6898      	ldr	r0, [r3, #8]
    f754:	6088      	str	r0, [r1, #8]
    f756:	68d8      	ldr	r0, [r3, #12]
    f758:	60c8      	str	r0, [r1, #12]
    f75a:	691d      	ldr	r5, [r3, #16]
    f75c:	4824      	ldr	r0, [pc, #144]	; (f7f0 <am_hal_mcuctrl_info_get+0x124>)
    f75e:	610d      	str	r5, [r1, #16]
    f760:	f3c2 5703 	ubfx	r7, r2, #20, #4
    f764:	f3c2 4603 	ubfx	r6, r2, #16, #4
    f768:	695d      	ldr	r5, [r3, #20]
    f76a:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    f76e:	4b21      	ldr	r3, [pc, #132]	; (f7f4 <am_hal_mcuctrl_info_get+0x128>)
    f770:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    f774:	6208      	str	r0, [r1, #32]
    f776:	f002 0201 	and.w	r2, r2, #1
    f77a:	614d      	str	r5, [r1, #20]
    f77c:	61cc      	str	r4, [r1, #28]
    f77e:	618a      	str	r2, [r1, #24]
    f780:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    f784:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    f788:	b2d0      	uxtb	r0, r2
    f78a:	f004 020f 	and.w	r2, r4, #15
    f78e:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    f792:	624a      	str	r2, [r1, #36]	; 0x24
    f794:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    f798:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    f79c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    f7a0:	f004 020f 	and.w	r2, r4, #15
    f7a4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    f7a8:	628a      	str	r2, [r1, #40]	; 0x28
    f7aa:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    f7ae:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    f7b2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    f7b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
    f7ba:	4302      	orrs	r2, r0
    f7bc:	62ca      	str	r2, [r1, #44]	; 0x2c
    f7be:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    f7c2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    f7c6:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    f7ca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    f7ce:	b2c0      	uxtb	r0, r0
    f7d0:	0400      	lsls	r0, r0, #16
    f7d2:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    f7d6:	b2d2      	uxtb	r2, r2
    f7d8:	431a      	orrs	r2, r3
    f7da:	b2e3      	uxtb	r3, r4
    f7dc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f7e0:	630b      	str	r3, [r1, #48]	; 0x30
    f7e2:	2000      	movs	r0, #0
    f7e4:	bcf0      	pop	{r4, r5, r6, r7}
    f7e6:	4770      	bx	lr
    f7e8:	40020000 	.word	0x40020000
    f7ec:	00010990 	.word	0x00010990
    f7f0:	000109d0 	.word	0x000109d0
    f7f4:	f0000f00 	.word	0xf0000f00

0000f7f8 <am_hal_pwrctrl_periph_enable>:
    f7f8:	b570      	push	{r4, r5, r6, lr}
    f7fa:	b082      	sub	sp, #8
    f7fc:	4604      	mov	r4, r0
    f7fe:	f7ff f9fd 	bl	ebfc <am_hal_interrupt_master_disable>
    f802:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f806:	4d0f      	ldr	r5, [pc, #60]	; (f844 <am_hal_pwrctrl_periph_enable+0x4c>)
    f808:	4e0f      	ldr	r6, [pc, #60]	; (f848 <am_hal_pwrctrl_periph_enable+0x50>)
    f80a:	9001      	str	r0, [sp, #4]
    f80c:	00a4      	lsls	r4, r4, #2
    f80e:	68aa      	ldr	r2, [r5, #8]
    f810:	5933      	ldr	r3, [r6, r4]
    f812:	4313      	orrs	r3, r2
    f814:	60ab      	str	r3, [r5, #8]
    f816:	9801      	ldr	r0, [sp, #4]
    f818:	4434      	add	r4, r6
    f81a:	f7ff f9f3 	bl	ec04 <am_hal_interrupt_master_set>
    f81e:	20a0      	movs	r0, #160	; 0xa0
    f820:	f7fe ffe2 	bl	e7e8 <am_hal_flash_delay>
    f824:	69ab      	ldr	r3, [r5, #24]
    f826:	6864      	ldr	r4, [r4, #4]
    f828:	4223      	tst	r3, r4
    f82a:	d103      	bne.n	f834 <am_hal_pwrctrl_periph_enable+0x3c>
    f82c:	20a0      	movs	r0, #160	; 0xa0
    f82e:	f7fe ffdb 	bl	e7e8 <am_hal_flash_delay>
    f832:	69ab      	ldr	r3, [r5, #24]
    f834:	4b03      	ldr	r3, [pc, #12]	; (f844 <am_hal_pwrctrl_periph_enable+0x4c>)
    f836:	699b      	ldr	r3, [r3, #24]
    f838:	4223      	tst	r3, r4
    f83a:	bf0c      	ite	eq
    f83c:	2001      	moveq	r0, #1
    f83e:	2000      	movne	r0, #0
    f840:	b002      	add	sp, #8
    f842:	bd70      	pop	{r4, r5, r6, pc}
    f844:	40021000 	.word	0x40021000
    f848:	00010a10 	.word	0x00010a10

0000f84c <am_hal_pwrctrl_periph_disable>:
    f84c:	b570      	push	{r4, r5, r6, lr}
    f84e:	b082      	sub	sp, #8
    f850:	4604      	mov	r4, r0
    f852:	f7ff f9d3 	bl	ebfc <am_hal_interrupt_master_disable>
    f856:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f85a:	4d10      	ldr	r5, [pc, #64]	; (f89c <am_hal_pwrctrl_periph_disable+0x50>)
    f85c:	4e10      	ldr	r6, [pc, #64]	; (f8a0 <am_hal_pwrctrl_periph_disable+0x54>)
    f85e:	9001      	str	r0, [sp, #4]
    f860:	00a4      	lsls	r4, r4, #2
    f862:	68ab      	ldr	r3, [r5, #8]
    f864:	5932      	ldr	r2, [r6, r4]
    f866:	ea23 0302 	bic.w	r3, r3, r2
    f86a:	60ab      	str	r3, [r5, #8]
    f86c:	9801      	ldr	r0, [sp, #4]
    f86e:	4434      	add	r4, r6
    f870:	f7ff f9c8 	bl	ec04 <am_hal_interrupt_master_set>
    f874:	20a0      	movs	r0, #160	; 0xa0
    f876:	f7fe ffb7 	bl	e7e8 <am_hal_flash_delay>
    f87a:	69ab      	ldr	r3, [r5, #24]
    f87c:	6864      	ldr	r4, [r4, #4]
    f87e:	4223      	tst	r3, r4
    f880:	d003      	beq.n	f88a <am_hal_pwrctrl_periph_disable+0x3e>
    f882:	20a0      	movs	r0, #160	; 0xa0
    f884:	f7fe ffb0 	bl	e7e8 <am_hal_flash_delay>
    f888:	69ab      	ldr	r3, [r5, #24]
    f88a:	4b04      	ldr	r3, [pc, #16]	; (f89c <am_hal_pwrctrl_periph_disable+0x50>)
    f88c:	699b      	ldr	r3, [r3, #24]
    f88e:	4223      	tst	r3, r4
    f890:	bf14      	ite	ne
    f892:	2001      	movne	r0, #1
    f894:	2000      	moveq	r0, #0
    f896:	b002      	add	sp, #8
    f898:	bd70      	pop	{r4, r5, r6, pc}
    f89a:	bf00      	nop
    f89c:	40021000 	.word	0x40021000
    f8a0:	00010a10 	.word	0x00010a10

0000f8a4 <am_hal_pwrctrl_low_power_init>:
    f8a4:	b530      	push	{r4, r5, lr}
    f8a6:	4b33      	ldr	r3, [pc, #204]	; (f974 <am_hal_pwrctrl_low_power_init+0xd0>)
    f8a8:	681a      	ldr	r2, [r3, #0]
    f8aa:	b085      	sub	sp, #20
    f8ac:	b912      	cbnz	r2, f8b4 <am_hal_pwrctrl_low_power_init+0x10>
    f8ae:	4a32      	ldr	r2, [pc, #200]	; (f978 <am_hal_pwrctrl_low_power_init+0xd4>)
    f8b0:	6812      	ldr	r2, [r2, #0]
    f8b2:	601a      	str	r2, [r3, #0]
    f8b4:	4b31      	ldr	r3, [pc, #196]	; (f97c <am_hal_pwrctrl_low_power_init+0xd8>)
    f8b6:	68db      	ldr	r3, [r3, #12]
    f8b8:	b2db      	uxtb	r3, r3
    f8ba:	2b12      	cmp	r3, #18
    f8bc:	d00a      	beq.n	f8d4 <am_hal_pwrctrl_low_power_init+0x30>
    f8be:	4c30      	ldr	r4, [pc, #192]	; (f980 <am_hal_pwrctrl_low_power_init+0xdc>)
    f8c0:	2100      	movs	r1, #0
    f8c2:	200c      	movs	r0, #12
    f8c4:	f7fe fcae 	bl	e224 <am_hal_cachectrl_control>
    f8c8:	69a3      	ldr	r3, [r4, #24]
    f8ca:	05d8      	lsls	r0, r3, #23
    f8cc:	d520      	bpl.n	f910 <am_hal_pwrctrl_low_power_init+0x6c>
    f8ce:	2000      	movs	r0, #0
    f8d0:	b005      	add	sp, #20
    f8d2:	bd30      	pop	{r4, r5, pc}
    f8d4:	4c2a      	ldr	r4, [pc, #168]	; (f980 <am_hal_pwrctrl_low_power_init+0xdc>)
    f8d6:	6863      	ldr	r3, [r4, #4]
    f8d8:	07d9      	lsls	r1, r3, #31
    f8da:	d5f0      	bpl.n	f8be <am_hal_pwrctrl_low_power_init+0x1a>
    f8dc:	f7ff f98e 	bl	ebfc <am_hal_interrupt_master_disable>
    f8e0:	9003      	str	r0, [sp, #12]
    f8e2:	68a3      	ldr	r3, [r4, #8]
    f8e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f8e8:	60a3      	str	r3, [r4, #8]
    f8ea:	9803      	ldr	r0, [sp, #12]
    f8ec:	f7ff f98a 	bl	ec04 <am_hal_interrupt_master_set>
    f8f0:	20a0      	movs	r0, #160	; 0xa0
    f8f2:	f7fe ff79 	bl	e7e8 <am_hal_flash_delay>
    f8f6:	69a3      	ldr	r3, [r4, #24]
    f8f8:	061a      	lsls	r2, r3, #24
    f8fa:	d403      	bmi.n	f904 <am_hal_pwrctrl_low_power_init+0x60>
    f8fc:	20a0      	movs	r0, #160	; 0xa0
    f8fe:	f7fe ff73 	bl	e7e8 <am_hal_flash_delay>
    f902:	69a3      	ldr	r3, [r4, #24]
    f904:	4b1e      	ldr	r3, [pc, #120]	; (f980 <am_hal_pwrctrl_low_power_init+0xdc>)
    f906:	699b      	ldr	r3, [r3, #24]
    f908:	061b      	lsls	r3, r3, #24
    f90a:	d4d8      	bmi.n	f8be <am_hal_pwrctrl_low_power_init+0x1a>
    f90c:	2001      	movs	r0, #1
    f90e:	e7df      	b.n	f8d0 <am_hal_pwrctrl_low_power_init+0x2c>
    f910:	4d1a      	ldr	r5, [pc, #104]	; (f97c <am_hal_pwrctrl_low_power_init+0xd8>)
    f912:	491c      	ldr	r1, [pc, #112]	; (f984 <am_hal_pwrctrl_low_power_init+0xe0>)
    f914:	7e2a      	ldrb	r2, [r5, #24]
    f916:	2001      	movs	r0, #1
    f918:	4302      	orrs	r2, r0
    f91a:	2307      	movs	r3, #7
    f91c:	762a      	strb	r2, [r5, #24]
    f91e:	9000      	str	r0, [sp, #0]
    f920:	461a      	mov	r2, r3
    f922:	f242 7010 	movw	r0, #10000	; 0x2710
    f926:	f7fe ff6f 	bl	e808 <am_hal_flash_delay_status_check>
    f92a:	b110      	cbz	r0, f932 <am_hal_pwrctrl_low_power_init+0x8e>
    f92c:	2004      	movs	r0, #4
    f92e:	b005      	add	sp, #20
    f930:	bd30      	pop	{r4, r5, pc}
    f932:	6823      	ldr	r3, [r4, #0]
    f934:	f043 0301 	orr.w	r3, r3, #1
    f938:	6023      	str	r3, [r4, #0]
    f93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f940:	6263      	str	r3, [r4, #36]	; 0x24
    f942:	68eb      	ldr	r3, [r5, #12]
    f944:	b2db      	uxtb	r3, r3
    f946:	2b11      	cmp	r3, #17
    f948:	d1c1      	bne.n	f8ce <am_hal_pwrctrl_low_power_init+0x2a>
    f94a:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    f94e:	f360 5356 	bfi	r3, r0, #21, #2
    f952:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    f956:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f95a:	220f      	movs	r2, #15
    f95c:	f362 138b 	bfi	r3, r2, #6, #6
    f960:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f964:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    f968:	f362 0305 	bfi	r3, r2, #0, #6
    f96c:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    f970:	e7ae      	b.n	f8d0 <am_hal_pwrctrl_low_power_init+0x2c>
    f972:	bf00      	nop
    f974:	1000118c 	.word	0x1000118c
    f978:	4ffff000 	.word	0x4ffff000
    f97c:	40020000 	.word	0x40020000
    f980:	40021000 	.word	0x40021000
    f984:	40020018 	.word	0x40020018

0000f988 <am_hal_rtc_osc_select>:
    f988:	b928      	cbnz	r0, f996 <am_hal_rtc_osc_select+0xe>
    f98a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    f98e:	68d3      	ldr	r3, [r2, #12]
    f990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f994:	60d3      	str	r3, [r2, #12]
    f996:	4770      	bx	lr

0000f998 <am_hal_rtc_osc_disable>:
    f998:	4a03      	ldr	r2, [pc, #12]	; (f9a8 <am_hal_rtc_osc_disable+0x10>)
    f99a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f99e:	f043 0310 	orr.w	r3, r3, #16
    f9a2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    f9a6:	4770      	bx	lr
    f9a8:	40004200 	.word	0x40004200

0000f9ac <am_hal_sysctrl_sleep>:
    f9ac:	b510      	push	{r4, lr}
    f9ae:	b082      	sub	sp, #8
    f9b0:	4604      	mov	r4, r0
    f9b2:	f7ff f923 	bl	ebfc <am_hal_interrupt_master_disable>
    f9b6:	9001      	str	r0, [sp, #4]
    f9b8:	b124      	cbz	r4, f9c4 <am_hal_sysctrl_sleep+0x18>
    f9ba:	4b12      	ldr	r3, [pc, #72]	; (fa04 <am_hal_sysctrl_sleep+0x58>)
    f9bc:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    f9c0:	07db      	lsls	r3, r3, #31
    f9c2:	d512      	bpl.n	f9ea <am_hal_sysctrl_sleep+0x3e>
    f9c4:	4a10      	ldr	r2, [pc, #64]	; (fa08 <am_hal_sysctrl_sleep+0x5c>)
    f9c6:	6913      	ldr	r3, [r2, #16]
    f9c8:	f023 0304 	bic.w	r3, r3, #4
    f9cc:	6113      	str	r3, [r2, #16]
    f9ce:	f3bf 8f4f 	dsb	sy
    f9d2:	4a0e      	ldr	r2, [pc, #56]	; (fa0c <am_hal_sysctrl_sleep+0x60>)
    f9d4:	4b0e      	ldr	r3, [pc, #56]	; (fa10 <am_hal_sysctrl_sleep+0x64>)
    f9d6:	6812      	ldr	r2, [r2, #0]
    f9d8:	601a      	str	r2, [r3, #0]
    f9da:	bf30      	wfi
    f9dc:	f3bf 8f6f 	isb	sy
    f9e0:	9801      	ldr	r0, [sp, #4]
    f9e2:	f7ff f90f 	bl	ec04 <am_hal_interrupt_master_set>
    f9e6:	b002      	add	sp, #8
    f9e8:	bd10      	pop	{r4, pc}
    f9ea:	4b0a      	ldr	r3, [pc, #40]	; (fa14 <am_hal_sysctrl_sleep+0x68>)
    f9ec:	681a      	ldr	r2, [r3, #0]
    f9ee:	b912      	cbnz	r2, f9f6 <am_hal_sysctrl_sleep+0x4a>
    f9f0:	4a09      	ldr	r2, [pc, #36]	; (fa18 <am_hal_sysctrl_sleep+0x6c>)
    f9f2:	6812      	ldr	r2, [r2, #0]
    f9f4:	601a      	str	r2, [r3, #0]
    f9f6:	4a04      	ldr	r2, [pc, #16]	; (fa08 <am_hal_sysctrl_sleep+0x5c>)
    f9f8:	6913      	ldr	r3, [r2, #16]
    f9fa:	f043 0304 	orr.w	r3, r3, #4
    f9fe:	6113      	str	r3, [r2, #16]
    fa00:	e7e5      	b.n	f9ce <am_hal_sysctrl_sleep+0x22>
    fa02:	bf00      	nop
    fa04:	40020000 	.word	0x40020000
    fa08:	e000ed00 	.word	0xe000ed00
    fa0c:	5fff0000 	.word	0x5fff0000
    fa10:	10001190 	.word	0x10001190
    fa14:	1000118c 	.word	0x1000118c
    fa18:	4ffff000 	.word	0x4ffff000

0000fa1c <am_hal_uart_initialize>:
    fa1c:	2801      	cmp	r0, #1
    fa1e:	d901      	bls.n	fa24 <am_hal_uart_initialize+0x8>
    fa20:	2005      	movs	r0, #5
    fa22:	4770      	bx	lr
    fa24:	b169      	cbz	r1, fa42 <am_hal_uart_initialize+0x26>
    fa26:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa28:	2264      	movs	r2, #100	; 0x64
    fa2a:	4e0e      	ldr	r6, [pc, #56]	; (fa64 <am_hal_uart_initialize+0x48>)
    fa2c:	fb02 f200 	mul.w	r2, r2, r0
    fa30:	18b4      	adds	r4, r6, r2
    fa32:	4603      	mov	r3, r0
    fa34:	78e0      	ldrb	r0, [r4, #3]
    fa36:	f3c0 0700 	ubfx	r7, r0, #0, #1
    fa3a:	b2fd      	uxtb	r5, r7
    fa3c:	b11d      	cbz	r5, fa46 <am_hal_uart_initialize+0x2a>
    fa3e:	2007      	movs	r0, #7
    fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa42:	2006      	movs	r0, #6
    fa44:	4770      	bx	lr
    fa46:	f040 0001 	orr.w	r0, r0, #1
    fa4a:	70e0      	strb	r0, [r4, #3]
    fa4c:	58b0      	ldr	r0, [r6, r2]
    fa4e:	f8df e018 	ldr.w	lr, [pc, #24]	; fa68 <am_hal_uart_initialize+0x4c>
    fa52:	f36e 0017 	bfi	r0, lr, #0, #24
    fa56:	50b0      	str	r0, [r6, r2]
    fa58:	6263      	str	r3, [r4, #36]	; 0x24
    fa5a:	7127      	strb	r7, [r4, #4]
    fa5c:	6625      	str	r5, [r4, #96]	; 0x60
    fa5e:	4628      	mov	r0, r5
    fa60:	600c      	str	r4, [r1, #0]
    fa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa64:	10004b10 	.word	0x10004b10
    fa68:	00ea9e06 	.word	0x00ea9e06

0000fa6c <am_hal_uart_deinitialize>:
    fa6c:	b128      	cbz	r0, fa7a <am_hal_uart_deinitialize+0xe>
    fa6e:	6803      	ldr	r3, [r0, #0]
    fa70:	4a07      	ldr	r2, [pc, #28]	; (fa90 <am_hal_uart_deinitialize+0x24>)
    fa72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fa76:	4293      	cmp	r3, r2
    fa78:	d001      	beq.n	fa7e <am_hal_uart_deinitialize+0x12>
    fa7a:	2002      	movs	r0, #2
    fa7c:	4770      	bx	lr
    fa7e:	78c2      	ldrb	r2, [r0, #3]
    fa80:	2300      	movs	r3, #0
    fa82:	f36f 0200 	bfc	r2, #0, #1
    fa86:	70c2      	strb	r2, [r0, #3]
    fa88:	6243      	str	r3, [r0, #36]	; 0x24
    fa8a:	7103      	strb	r3, [r0, #4]
    fa8c:	4618      	mov	r0, r3
    fa8e:	4770      	bx	lr
    fa90:	01ea9e06 	.word	0x01ea9e06

0000fa94 <am_hal_uart_power_control>:
    fa94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa98:	6804      	ldr	r4, [r0, #0]
    fa9a:	4b36      	ldr	r3, [pc, #216]	; (fb74 <am_hal_uart_power_control+0xe0>)
    fa9c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    faa0:	429c      	cmp	r4, r3
    faa2:	b083      	sub	sp, #12
    faa4:	d003      	beq.n	faae <am_hal_uart_power_control+0x1a>
    faa6:	2002      	movs	r0, #2
    faa8:	b003      	add	sp, #12
    faaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    faae:	6a47      	ldr	r7, [r0, #36]	; 0x24
    fab0:	4605      	mov	r5, r0
    fab2:	f107 0008 	add.w	r0, r7, #8
    fab6:	4691      	mov	r9, r2
    fab8:	460e      	mov	r6, r1
    faba:	fa5f f880 	uxtb.w	r8, r0
    fabe:	b181      	cbz	r1, fae2 <am_hal_uart_power_control+0x4e>
    fac0:	2902      	cmp	r1, #2
    fac2:	d80c      	bhi.n	fade <am_hal_uart_power_control+0x4a>
    fac4:	b992      	cbnz	r2, faec <am_hal_uart_power_control+0x58>
    fac6:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    faca:	371c      	adds	r7, #28
    facc:	033f      	lsls	r7, r7, #12
    face:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fad2:	647b      	str	r3, [r7, #68]	; 0x44
    fad4:	4640      	mov	r0, r8
    fad6:	f7ff feb9 	bl	f84c <am_hal_pwrctrl_periph_disable>
    fada:	2000      	movs	r0, #0
    fadc:	e7e4      	b.n	faa8 <am_hal_uart_power_control+0x14>
    fade:	2006      	movs	r0, #6
    fae0:	e7e2      	b.n	faa8 <am_hal_uart_power_control+0x14>
    fae2:	b322      	cbz	r2, fb2e <am_hal_uart_power_control+0x9a>
    fae4:	792b      	ldrb	r3, [r5, #4]
    fae6:	bb3b      	cbnz	r3, fb38 <am_hal_uart_power_control+0xa4>
    fae8:	2007      	movs	r0, #7
    faea:	e7dd      	b.n	faa8 <am_hal_uart_power_control+0x14>
    faec:	f7ff f886 	bl	ebfc <am_hal_interrupt_master_disable>
    faf0:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    faf4:	331c      	adds	r3, #28
    faf6:	031b      	lsls	r3, r3, #12
    faf8:	9001      	str	r0, [sp, #4]
    fafa:	6a1a      	ldr	r2, [r3, #32]
    fafc:	60aa      	str	r2, [r5, #8]
    fafe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    fb00:	60ea      	str	r2, [r5, #12]
    fb02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    fb04:	612a      	str	r2, [r5, #16]
    fb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    fb08:	616a      	str	r2, [r5, #20]
    fb0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fb0c:	61aa      	str	r2, [r5, #24]
    fb0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    fb10:	61ea      	str	r2, [r5, #28]
    fb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    fb14:	622b      	str	r3, [r5, #32]
    fb16:	2301      	movs	r3, #1
    fb18:	712b      	strb	r3, [r5, #4]
    fb1a:	9801      	ldr	r0, [sp, #4]
    fb1c:	f7ff f872 	bl	ec04 <am_hal_interrupt_master_set>
    fb20:	682b      	ldr	r3, [r5, #0]
    fb22:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb26:	42a3      	cmp	r3, r4
    fb28:	d1d4      	bne.n	fad4 <am_hal_uart_power_control+0x40>
    fb2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    fb2c:	e7cb      	b.n	fac6 <am_hal_uart_power_control+0x32>
    fb2e:	4640      	mov	r0, r8
    fb30:	f7ff fe62 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    fb34:	4648      	mov	r0, r9
    fb36:	e7b7      	b.n	faa8 <am_hal_uart_power_control+0x14>
    fb38:	4640      	mov	r0, r8
    fb3a:	f7ff fe5d 	bl	f7f8 <am_hal_pwrctrl_periph_enable>
    fb3e:	f7ff f85d 	bl	ebfc <am_hal_interrupt_master_disable>
    fb42:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    fb46:	331c      	adds	r3, #28
    fb48:	031b      	lsls	r3, r3, #12
    fb4a:	68aa      	ldr	r2, [r5, #8]
    fb4c:	9000      	str	r0, [sp, #0]
    fb4e:	621a      	str	r2, [r3, #32]
    fb50:	68ea      	ldr	r2, [r5, #12]
    fb52:	625a      	str	r2, [r3, #36]	; 0x24
    fb54:	692a      	ldr	r2, [r5, #16]
    fb56:	629a      	str	r2, [r3, #40]	; 0x28
    fb58:	696a      	ldr	r2, [r5, #20]
    fb5a:	62da      	str	r2, [r3, #44]	; 0x2c
    fb5c:	69aa      	ldr	r2, [r5, #24]
    fb5e:	631a      	str	r2, [r3, #48]	; 0x30
    fb60:	69ea      	ldr	r2, [r5, #28]
    fb62:	635a      	str	r2, [r3, #52]	; 0x34
    fb64:	6a2a      	ldr	r2, [r5, #32]
    fb66:	639a      	str	r2, [r3, #56]	; 0x38
    fb68:	9800      	ldr	r0, [sp, #0]
    fb6a:	712e      	strb	r6, [r5, #4]
    fb6c:	f7ff f84a 	bl	ec04 <am_hal_interrupt_master_set>
    fb70:	4630      	mov	r0, r6
    fb72:	e799      	b.n	faa8 <am_hal_uart_power_control+0x14>
    fb74:	01ea9e06 	.word	0x01ea9e06

0000fb78 <am_hal_uart_configure>:
    fb78:	6803      	ldr	r3, [r0, #0]
    fb7a:	4a84      	ldr	r2, [pc, #528]	; (fd8c <am_hal_uart_configure+0x214>)
    fb7c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fb80:	4293      	cmp	r3, r2
    fb82:	d001      	beq.n	fb88 <am_hal_uart_configure+0x10>
    fb84:	2002      	movs	r0, #2
    fb86:	4770      	bx	lr
    fb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb8c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    fb8e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    fb92:	351c      	adds	r5, #28
    fb94:	032d      	lsls	r5, r5, #12
    fb96:	2700      	movs	r7, #0
    fb98:	b084      	sub	sp, #16
    fb9a:	632f      	str	r7, [r5, #48]	; 0x30
    fb9c:	460e      	mov	r6, r1
    fb9e:	4604      	mov	r4, r0
    fba0:	f7ff f82c 	bl	ebfc <am_hal_interrupt_master_disable>
    fba4:	9001      	str	r0, [sp, #4]
    fba6:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fba8:	f043 0308 	orr.w	r3, r3, #8
    fbac:	862b      	strh	r3, [r5, #48]	; 0x30
    fbae:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fbb0:	2201      	movs	r2, #1
    fbb2:	f362 1306 	bfi	r3, r2, #4, #3
    fbb6:	862b      	strh	r3, [r5, #48]	; 0x30
    fbb8:	9801      	ldr	r0, [sp, #4]
    fbba:	f7ff f823 	bl	ec04 <am_hal_interrupt_master_set>
    fbbe:	f7ff f81d 	bl	ebfc <am_hal_interrupt_master_disable>
    fbc2:	9002      	str	r0, [sp, #8]
    fbc4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fbc6:	f367 0300 	bfi	r3, r7, #0, #1
    fbca:	862b      	strh	r3, [r5, #48]	; 0x30
    fbcc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fbce:	f367 2349 	bfi	r3, r7, #9, #1
    fbd2:	862b      	strh	r3, [r5, #48]	; 0x30
    fbd4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fbd6:	f367 2308 	bfi	r3, r7, #8, #1
    fbda:	862b      	strh	r3, [r5, #48]	; 0x30
    fbdc:	9802      	ldr	r0, [sp, #8]
    fbde:	f7ff f811 	bl	ec04 <am_hal_interrupt_master_set>
    fbe2:	4a6b      	ldr	r2, [pc, #428]	; (fd90 <am_hal_uart_configure+0x218>)
    fbe4:	6833      	ldr	r3, [r6, #0]
    fbe6:	68d2      	ldr	r2, [r2, #12]
    fbe8:	b2d2      	uxtb	r2, r2
    fbea:	2a12      	cmp	r2, #18
    fbec:	d00b      	beq.n	fc06 <am_hal_uart_configure+0x8e>
    fbee:	4a68      	ldr	r2, [pc, #416]	; (fd90 <am_hal_uart_configure+0x218>)
    fbf0:	68d2      	ldr	r2, [r2, #12]
    fbf2:	b2d2      	uxtb	r2, r2
    fbf4:	2a20      	cmp	r2, #32
    fbf6:	d90a      	bls.n	fc0e <am_hal_uart_configure+0x96>
    fbf8:	4a66      	ldr	r2, [pc, #408]	; (fd94 <am_hal_uart_configure+0x21c>)
    fbfa:	4293      	cmp	r3, r2
    fbfc:	d907      	bls.n	fc0e <am_hal_uart_configure+0x96>
    fbfe:	4866      	ldr	r0, [pc, #408]	; (fd98 <am_hal_uart_configure+0x220>)
    fc00:	b004      	add	sp, #16
    fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc06:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fc0a:	d8f8      	bhi.n	fbfe <am_hal_uart_configure+0x86>
    fc0c:	e7ef      	b.n	fbee <am_hal_uart_configure+0x76>
    fc0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fc10:	f3c2 1202 	ubfx	r2, r2, #4, #3
    fc14:	3a01      	subs	r2, #1
    fc16:	2a03      	cmp	r2, #3
    fc18:	d852      	bhi.n	fcc0 <am_hal_uart_configure+0x148>
    fc1a:	e8df f002 	tbb	[pc, r2]
    fc1e:	020f      	.short	0x020f
    fc20:	1215      	.short	0x1215
    fc22:	4a5e      	ldr	r2, [pc, #376]	; (fd9c <am_hal_uart_configure+0x224>)
    fc24:	495e      	ldr	r1, [pc, #376]	; (fda0 <am_hal_uart_configure+0x228>)
    fc26:	011b      	lsls	r3, r3, #4
    fc28:	fbb2 f2f3 	udiv	r2, r2, r3
    fc2c:	fbb1 f3f3 	udiv	r3, r1, r3
    fc30:	eba2 1283 	sub.w	r2, r2, r3, lsl #6
    fc34:	b95b      	cbnz	r3, fc4e <am_hal_uart_configure+0xd6>
    fc36:	6623      	str	r3, [r4, #96]	; 0x60
    fc38:	4857      	ldr	r0, [pc, #348]	; (fd98 <am_hal_uart_configure+0x220>)
    fc3a:	e7e1      	b.n	fc00 <am_hal_uart_configure+0x88>
    fc3c:	4a59      	ldr	r2, [pc, #356]	; (fda4 <am_hal_uart_configure+0x22c>)
    fc3e:	495a      	ldr	r1, [pc, #360]	; (fda8 <am_hal_uart_configure+0x230>)
    fc40:	e7f1      	b.n	fc26 <am_hal_uart_configure+0xae>
    fc42:	4a5a      	ldr	r2, [pc, #360]	; (fdac <am_hal_uart_configure+0x234>)
    fc44:	495a      	ldr	r1, [pc, #360]	; (fdb0 <am_hal_uart_configure+0x238>)
    fc46:	e7ee      	b.n	fc26 <am_hal_uart_configure+0xae>
    fc48:	4a5a      	ldr	r2, [pc, #360]	; (fdb4 <am_hal_uart_configure+0x23c>)
    fc4a:	495b      	ldr	r1, [pc, #364]	; (fdb8 <am_hal_uart_configure+0x240>)
    fc4c:	e7eb      	b.n	fc26 <am_hal_uart_configure+0xae>
    fc4e:	0890      	lsrs	r0, r2, #2
    fc50:	626b      	str	r3, [r5, #36]	; 0x24
    fc52:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    fc56:	626b      	str	r3, [r5, #36]	; 0x24
    fc58:	fbb1 f1f0 	udiv	r1, r1, r0
    fc5c:	62aa      	str	r2, [r5, #40]	; 0x28
    fc5e:	6621      	str	r1, [r4, #96]	; 0x60
    fc60:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fc62:	f36f 338e 	bfc	r3, #14, #1
    fc66:	862b      	strh	r3, [r5, #48]	; 0x30
    fc68:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fc6a:	f36f 33cf 	bfc	r3, #15, #1
    fc6e:	862b      	strh	r3, [r5, #48]	; 0x30
    fc70:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    fc72:	6933      	ldr	r3, [r6, #16]
    fc74:	4313      	orrs	r3, r2
    fc76:	632b      	str	r3, [r5, #48]	; 0x30
    fc78:	6973      	ldr	r3, [r6, #20]
    fc7a:	636b      	str	r3, [r5, #52]	; 0x34
    fc7c:	6871      	ldr	r1, [r6, #4]
    fc7e:	68b3      	ldr	r3, [r6, #8]
    fc80:	68f2      	ldr	r2, [r6, #12]
    fc82:	430b      	orrs	r3, r1
    fc84:	f043 0310 	orr.w	r3, r3, #16
    fc88:	4313      	orrs	r3, r2
    fc8a:	62eb      	str	r3, [r5, #44]	; 0x2c
    fc8c:	f7fe ffb6 	bl	ebfc <am_hal_interrupt_master_disable>
    fc90:	9003      	str	r0, [sp, #12]
    fc92:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fc94:	f043 0301 	orr.w	r3, r3, #1
    fc98:	862b      	strh	r3, [r5, #48]	; 0x30
    fc9a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fc9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fca0:	862b      	strh	r3, [r5, #48]	; 0x30
    fca2:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
    fca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fca8:	862b      	strh	r3, [r5, #48]	; 0x30
    fcaa:	9803      	ldr	r0, [sp, #12]
    fcac:	f7fe ffaa 	bl	ec04 <am_hal_interrupt_master_set>
    fcb0:	6825      	ldr	r5, [r4, #0]
    fcb2:	4b36      	ldr	r3, [pc, #216]	; (fd8c <am_hal_uart_configure+0x214>)
    fcb4:	f025 457e 	bic.w	r5, r5, #4261412864	; 0xfe000000
    fcb8:	429d      	cmp	r5, r3
    fcba:	d005      	beq.n	fcc8 <am_hal_uart_configure+0x150>
    fcbc:	2000      	movs	r0, #0
    fcbe:	e79f      	b.n	fc00 <am_hal_uart_configure+0x88>
    fcc0:	2300      	movs	r3, #0
    fcc2:	6623      	str	r3, [r4, #96]	; 0x60
    fcc4:	483d      	ldr	r0, [pc, #244]	; (fdbc <am_hal_uart_configure+0x244>)
    fcc6:	e79b      	b.n	fc00 <am_hal_uart_configure+0x88>
    fcc8:	69b1      	ldr	r1, [r6, #24]
    fcca:	6a37      	ldr	r7, [r6, #32]
    fccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    fcd0:	b109      	cbz	r1, fcd6 <am_hal_uart_configure+0x15e>
    fcd2:	69f3      	ldr	r3, [r6, #28]
    fcd4:	bb3b      	cbnz	r3, fd26 <am_hal_uart_configure+0x1ae>
    fcd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fcd8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fcdc:	f103 021c 	add.w	r2, r3, #28
    fce0:	0312      	lsls	r2, r2, #12
    fce2:	2100      	movs	r1, #0
    fce4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    fce8:	6b91      	ldr	r1, [r2, #56]	; 0x38
    fcea:	f021 0120 	bic.w	r1, r1, #32
    fcee:	6391      	str	r1, [r2, #56]	; 0x38
    fcf0:	b1b7      	cbz	r7, fd20 <am_hal_uart_configure+0x1a8>
    fcf2:	f1b8 0f00 	cmp.w	r8, #0
    fcf6:	d12e      	bne.n	fd56 <am_hal_uart_configure+0x1de>
    fcf8:	6823      	ldr	r3, [r4, #0]
    fcfa:	4a24      	ldr	r2, [pc, #144]	; (fd8c <am_hal_uart_configure+0x214>)
    fcfc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd00:	2100      	movs	r1, #0
    fd02:	4293      	cmp	r3, r2
    fd04:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    fd08:	d1d8      	bne.n	fcbc <am_hal_uart_configure+0x144>
    fd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd0c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd10:	331c      	adds	r3, #28
    fd12:	031b      	lsls	r3, r3, #12
    fd14:	2000      	movs	r0, #0
    fd16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd18:	f022 0250 	bic.w	r2, r2, #80	; 0x50
    fd1c:	639a      	str	r2, [r3, #56]	; 0x38
    fd1e:	e76f      	b.n	fc00 <am_hal_uart_configure+0x88>
    fd20:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
    fd24:	e7f4      	b.n	fd10 <am_hal_uart_configure+0x198>
    fd26:	2201      	movs	r2, #1
    fd28:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    fd2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fd30:	f000 fb2c 	bl	1038c <am_hal_queue_init>
    fd34:	6823      	ldr	r3, [r4, #0]
    fd36:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd3a:	42ab      	cmp	r3, r5
    fd3c:	d1be      	bne.n	fcbc <am_hal_uart_configure+0x144>
    fd3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd40:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd44:	331c      	adds	r3, #28
    fd46:	031b      	lsls	r3, r3, #12
    fd48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd4a:	f042 0220 	orr.w	r2, r2, #32
    fd4e:	639a      	str	r2, [r3, #56]	; 0x38
    fd50:	2f00      	cmp	r7, #0
    fd52:	d1ce      	bne.n	fcf2 <am_hal_uart_configure+0x17a>
    fd54:	e7d0      	b.n	fcf8 <am_hal_uart_configure+0x180>
    fd56:	2201      	movs	r2, #1
    fd58:	4643      	mov	r3, r8
    fd5a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    fd5e:	4639      	mov	r1, r7
    fd60:	f104 0048 	add.w	r0, r4, #72	; 0x48
    fd64:	f000 fb12 	bl	1038c <am_hal_queue_init>
    fd68:	6823      	ldr	r3, [r4, #0]
    fd6a:	4a08      	ldr	r2, [pc, #32]	; (fd8c <am_hal_uart_configure+0x214>)
    fd6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fd70:	4293      	cmp	r3, r2
    fd72:	d1a3      	bne.n	fcbc <am_hal_uart_configure+0x144>
    fd74:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd76:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    fd7a:	331c      	adds	r3, #28
    fd7c:	031b      	lsls	r3, r3, #12
    fd7e:	2000      	movs	r0, #0
    fd80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    fd82:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    fd86:	639a      	str	r2, [r3, #56]	; 0x38
    fd88:	e73a      	b.n	fc00 <am_hal_uart_configure+0x88>
    fd8a:	bf00      	nop
    fd8c:	01ea9e06 	.word	0x01ea9e06
    fd90:	40020000 	.word	0x40020000
    fd94:	0016e360 	.word	0x0016e360
    fd98:	08000003 	.word	0x08000003
    fd9c:	2dc6c000 	.word	0x2dc6c000
    fda0:	00b71b00 	.word	0x00b71b00
    fda4:	5b8d8000 	.word	0x5b8d8000
    fda8:	016e3600 	.word	0x016e3600
    fdac:	0b71b000 	.word	0x0b71b000
    fdb0:	002dc6c0 	.word	0x002dc6c0
    fdb4:	16e36000 	.word	0x16e36000
    fdb8:	005b8d80 	.word	0x005b8d80
    fdbc:	08000002 	.word	0x08000002

0000fdc0 <am_hal_uart_transfer>:
    fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fdc4:	680f      	ldr	r7, [r1, #0]
    fdc6:	b091      	sub	sp, #68	; 0x44
    fdc8:	4605      	mov	r5, r0
    fdca:	b13f      	cbz	r7, fddc <am_hal_uart_transfer+0x1c>
    fdcc:	2f01      	cmp	r7, #1
    fdce:	bf18      	it	ne
    fdd0:	2707      	movne	r7, #7
    fdd2:	d024      	beq.n	fe1e <am_hal_uart_transfer+0x5e>
    fdd4:	4638      	mov	r0, r7
    fdd6:	b011      	add	sp, #68	; 0x44
    fdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fddc:	f8d1 900c 	ldr.w	r9, [r1, #12]
    fde0:	690b      	ldr	r3, [r1, #16]
    fde2:	f8d1 a004 	ldr.w	sl, [r1, #4]
    fde6:	688e      	ldr	r6, [r1, #8]
    fde8:	9300      	str	r3, [sp, #0]
    fdea:	f1b9 0f00 	cmp.w	r9, #0
    fdee:	d031      	beq.n	fe54 <am_hal_uart_transfer+0x94>
    fdf0:	2e00      	cmp	r6, #0
    fdf2:	f000 819c 	beq.w	1012e <am_hal_uart_transfer+0x36e>
    fdf6:	2800      	cmp	r0, #0
    fdf8:	f000 8097 	beq.w	ff2a <am_hal_uart_transfer+0x16a>
    fdfc:	6803      	ldr	r3, [r0, #0]
    fdfe:	4aa9      	ldr	r2, [pc, #676]	; (100a4 <am_hal_uart_transfer+0x2e4>)
    fe00:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fe04:	4293      	cmp	r3, r2
    fe06:	f000 8092 	beq.w	ff2e <am_hal_uart_transfer+0x16e>
    fe0a:	46b8      	mov	r8, r7
    fe0c:	9b00      	ldr	r3, [sp, #0]
    fe0e:	b10b      	cbz	r3, fe14 <am_hal_uart_transfer+0x54>
    fe10:	f8c3 8000 	str.w	r8, [r3]
    fe14:	2702      	movs	r7, #2
    fe16:	4638      	mov	r0, r7
    fe18:	b011      	add	sp, #68	; 0x44
    fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe1e:	1d0b      	adds	r3, r1, #4
    fe20:	e893 0a88 	ldmia.w	r3, {r3, r7, r9, fp}
    fe24:	f1b9 0f00 	cmp.w	r9, #0
    fe28:	d043      	beq.n	feb2 <am_hal_uart_transfer+0xf2>
    fe2a:	2f00      	cmp	r7, #0
    fe2c:	f000 8185 	beq.w	1013a <am_hal_uart_transfer+0x37a>
    fe30:	2800      	cmp	r0, #0
    fe32:	f000 80eb 	beq.w	1000c <am_hal_uart_transfer+0x24c>
    fe36:	6802      	ldr	r2, [r0, #0]
    fe38:	499a      	ldr	r1, [pc, #616]	; (100a4 <am_hal_uart_transfer+0x2e4>)
    fe3a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    fe3e:	428a      	cmp	r2, r1
    fe40:	f000 80e7 	beq.w	10012 <am_hal_uart_transfer+0x252>
    fe44:	2600      	movs	r6, #0
    fe46:	2702      	movs	r7, #2
    fe48:	f1bb 0f00 	cmp.w	fp, #0
    fe4c:	d0c2      	beq.n	fdd4 <am_hal_uart_transfer+0x14>
    fe4e:	f8cb 6000 	str.w	r6, [fp]
    fe52:	e7bf      	b.n	fdd4 <am_hal_uart_transfer+0x14>
    fe54:	2800      	cmp	r0, #0
    fe56:	d0dd      	beq.n	fe14 <am_hal_uart_transfer+0x54>
    fe58:	6803      	ldr	r3, [r0, #0]
    fe5a:	4a92      	ldr	r2, [pc, #584]	; (100a4 <am_hal_uart_transfer+0x2e4>)
    fe5c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    fe60:	4293      	cmp	r3, r2
    fe62:	d1d7      	bne.n	fe14 <am_hal_uart_transfer+0x54>
    fe64:	9b00      	ldr	r3, [sp, #0]
    fe66:	b10b      	cbz	r3, fe6c <am_hal_uart_transfer+0xac>
    fe68:	f8c3 9000 	str.w	r9, [r3]
    fe6c:	b1fe      	cbz	r6, feae <am_hal_uart_transfer+0xee>
    fe6e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    fe72:	2b00      	cmp	r3, #0
    fe74:	f040 8165 	bne.w	10142 <am_hal_uart_transfer+0x382>
    fe78:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fe7a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    fe7e:	311c      	adds	r1, #28
    fe80:	0309      	lsls	r1, r1, #12
    fe82:	698a      	ldr	r2, [r1, #24]
    fe84:	f3c2 1240 	ubfx	r2, r2, #5, #1
    fe88:	2a00      	cmp	r2, #0
    fe8a:	f040 818d 	bne.w	101a8 <am_hal_uart_transfer+0x3e8>
    fe8e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    fe92:	e003      	b.n	fe9c <am_hal_uart_transfer+0xdc>
    fe94:	6988      	ldr	r0, [r1, #24]
    fe96:	0680      	lsls	r0, r0, #26
    fe98:	f100 8151 	bmi.w	1013e <am_hal_uart_transfer+0x37e>
    fe9c:	3201      	adds	r2, #1
    fe9e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    fea2:	6008      	str	r0, [r1, #0]
    fea4:	4296      	cmp	r6, r2
    fea6:	d1f5      	bne.n	fe94 <am_hal_uart_transfer+0xd4>
    fea8:	9b00      	ldr	r3, [sp, #0]
    feaa:	b103      	cbz	r3, feae <am_hal_uart_transfer+0xee>
    feac:	601e      	str	r6, [r3, #0]
    feae:	2700      	movs	r7, #0
    feb0:	e790      	b.n	fdd4 <am_hal_uart_transfer+0x14>
    feb2:	2800      	cmp	r0, #0
    feb4:	d0ae      	beq.n	fe14 <am_hal_uart_transfer+0x54>
    feb6:	6802      	ldr	r2, [r0, #0]
    feb8:	497a      	ldr	r1, [pc, #488]	; (100a4 <am_hal_uart_transfer+0x2e4>)
    feba:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    febe:	428a      	cmp	r2, r1
    fec0:	d1a8      	bne.n	fe14 <am_hal_uart_transfer+0x54>
    fec2:	f1bb 0f00 	cmp.w	fp, #0
    fec6:	d001      	beq.n	fecc <am_hal_uart_transfer+0x10c>
    fec8:	f8cb 9000 	str.w	r9, [fp]
    fecc:	2f00      	cmp	r7, #0
    fece:	d0ee      	beq.n	feae <am_hal_uart_transfer+0xee>
    fed0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    fed4:	2c00      	cmp	r4, #0
    fed6:	f040 816c 	bne.w	101b2 <am_hal_uart_transfer+0x3f2>
    feda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fedc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    fee0:	321c      	adds	r2, #28
    fee2:	0312      	lsls	r2, r2, #12
    fee4:	6990      	ldr	r0, [r2, #24]
    fee6:	f3c0 1000 	ubfx	r0, r0, #4, #1
    feea:	2800      	cmp	r0, #0
    feec:	f040 819d 	bne.w	1022a <am_hal_uart_transfer+0x46a>
    fef0:	6811      	ldr	r1, [r2, #0]
    fef2:	f411 6470 	ands.w	r4, r1, #3840	; 0xf00
    fef6:	bf08      	it	eq
    fef8:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
    fefc:	d008      	beq.n	ff10 <am_hal_uart_transfer+0x150>
    fefe:	e190      	b.n	10222 <am_hal_uart_transfer+0x462>
    ff00:	6991      	ldr	r1, [r2, #24]
    ff02:	06c8      	lsls	r0, r1, #27
    ff04:	d409      	bmi.n	ff1a <am_hal_uart_transfer+0x15a>
    ff06:	6811      	ldr	r1, [r2, #0]
    ff08:	f411 6f70 	tst.w	r1, #3840	; 0xf00
    ff0c:	f040 814e 	bne.w	101ac <am_hal_uart_transfer+0x3ec>
    ff10:	3401      	adds	r4, #1
    ff12:	42a7      	cmp	r7, r4
    ff14:	f803 1f01 	strb.w	r1, [r3, #1]!
    ff18:	d1f2      	bne.n	ff00 <am_hal_uart_transfer+0x140>
    ff1a:	2700      	movs	r7, #0
    ff1c:	f1bb 0f00 	cmp.w	fp, #0
    ff20:	f43f af58 	beq.w	fdd4 <am_hal_uart_transfer+0x14>
    ff24:	f8cb 4000 	str.w	r4, [fp]
    ff28:	e754      	b.n	fdd4 <am_hal_uart_transfer+0x14>
    ff2a:	4680      	mov	r8, r0
    ff2c:	e76e      	b.n	fe0c <am_hal_uart_transfer+0x4c>
    ff2e:	9301      	str	r3, [sp, #4]
    ff30:	4651      	mov	r1, sl
    ff32:	46bb      	mov	fp, r7
    ff34:	46b8      	mov	r8, r7
    ff36:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
    ff3a:	b9f2      	cbnz	r2, ff7a <am_hal_uart_transfer+0x1ba>
    ff3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ff3e:	b19e      	cbz	r6, ff68 <am_hal_uart_transfer+0x1a8>
    ff40:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    ff44:	321c      	adds	r2, #28
    ff46:	0312      	lsls	r2, r2, #12
    ff48:	3901      	subs	r1, #1
    ff4a:	6994      	ldr	r4, [r2, #24]
    ff4c:	f3c4 1440 	ubfx	r4, r4, #5, #1
    ff50:	b11c      	cbz	r4, ff5a <am_hal_uart_transfer+0x19a>
    ff52:	e047      	b.n	ffe4 <am_hal_uart_transfer+0x224>
    ff54:	6993      	ldr	r3, [r2, #24]
    ff56:	069b      	lsls	r3, r3, #26
    ff58:	d441      	bmi.n	ffde <am_hal_uart_transfer+0x21e>
    ff5a:	3401      	adds	r4, #1
    ff5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    ff60:	6013      	str	r3, [r2, #0]
    ff62:	42b4      	cmp	r4, r6
    ff64:	d1f6      	bne.n	ff54 <am_hal_uart_transfer+0x194>
    ff66:	44a0      	add	r8, r4
    ff68:	9b00      	ldr	r3, [sp, #0]
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d09f      	beq.n	feae <am_hal_uart_transfer+0xee>
    ff6e:	4638      	mov	r0, r7
    ff70:	f8c3 8000 	str.w	r8, [r3]
    ff74:	b011      	add	sp, #68	; 0x44
    ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff7a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    ff7c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    ff7e:	1b14      	subs	r4, r2, r4
    ff80:	42b4      	cmp	r4, r6
    ff82:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    ff86:	bf28      	it	cs
    ff88:	4634      	movcs	r4, r6
    ff8a:	4622      	mov	r2, r4
    ff8c:	4618      	mov	r0, r3
    ff8e:	9302      	str	r3, [sp, #8]
    ff90:	f000 fa08 	bl	103a4 <am_hal_queue_item_add>
    ff94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ff96:	9303      	str	r3, [sp, #12]
    ff98:	f7fe fe30 	bl	ebfc <am_hal_interrupt_master_disable>
    ff9c:	9b03      	ldr	r3, [sp, #12]
    ff9e:	9008      	str	r0, [sp, #32]
    ffa0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ffa4:	331c      	adds	r3, #28
    ffa6:	031b      	lsls	r3, r3, #12
    ffa8:	9303      	str	r3, [sp, #12]
    ffaa:	e00d      	b.n	ffc8 <am_hal_uart_transfer+0x208>
    ffac:	f000 fa32 	bl	10414 <am_hal_queue_item_get>
    ffb0:	b190      	cbz	r0, ffd8 <am_hal_uart_transfer+0x218>
    ffb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ffb4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ffb8:	331c      	adds	r3, #28
    ffba:	031b      	lsls	r3, r3, #12
    ffbc:	699a      	ldr	r2, [r3, #24]
    ffbe:	0692      	lsls	r2, r2, #26
    ffc0:	bf5c      	itt	pl
    ffc2:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
    ffc6:	601a      	strpl	r2, [r3, #0]
    ffc8:	9b03      	ldr	r3, [sp, #12]
    ffca:	9802      	ldr	r0, [sp, #8]
    ffcc:	699b      	ldr	r3, [r3, #24]
    ffce:	069b      	lsls	r3, r3, #26
    ffd0:	f04f 0201 	mov.w	r2, #1
    ffd4:	a907      	add	r1, sp, #28
    ffd6:	d5e9      	bpl.n	ffac <am_hal_uart_transfer+0x1ec>
    ffd8:	9808      	ldr	r0, [sp, #32]
    ffda:	f7fe fe13 	bl	ec04 <am_hal_interrupt_master_set>
    ffde:	1b36      	subs	r6, r6, r4
    ffe0:	44a0      	add	r8, r4
    ffe2:	d0c1      	beq.n	ff68 <am_hal_uart_transfer+0x1a8>
    ffe4:	2010      	movs	r0, #16
    ffe6:	f7fe fbff 	bl	e7e8 <am_hal_flash_delay>
    ffea:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    ffee:	d001      	beq.n	fff4 <am_hal_uart_transfer+0x234>
    fff0:	f10b 0b01 	add.w	fp, fp, #1
    fff4:	45d9      	cmp	r9, fp
    fff6:	d9b7      	bls.n	ff68 <am_hal_uart_transfer+0x1a8>
    fff8:	682a      	ldr	r2, [r5, #0]
    fffa:	9b01      	ldr	r3, [sp, #4]
    fffc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10000:	429a      	cmp	r2, r3
   10002:	eb0a 0108 	add.w	r1, sl, r8
   10006:	f47f af01 	bne.w	fe0c <am_hal_uart_transfer+0x4c>
   1000a:	e794      	b.n	ff36 <am_hal_uart_transfer+0x176>
   1000c:	4606      	mov	r6, r0
   1000e:	2702      	movs	r7, #2
   10010:	e71a      	b.n	fe48 <am_hal_uart_transfer+0x88>
   10012:	9200      	str	r2, [sp, #0]
   10014:	f100 0248 	add.w	r2, r0, #72	; 0x48
   10018:	f04f 0a00 	mov.w	sl, #0
   1001c:	9202      	str	r2, [sp, #8]
   1001e:	465a      	mov	r2, fp
   10020:	4698      	mov	r8, r3
   10022:	469b      	mov	fp, r3
   10024:	4656      	mov	r6, sl
   10026:	4613      	mov	r3, r2
   10028:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
   1002c:	2a00      	cmp	r2, #0
   1002e:	d152      	bne.n	100d6 <am_hal_uart_transfer+0x316>
   10030:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10032:	b3a7      	cbz	r7, 1009e <am_hal_uart_transfer+0x2de>
   10034:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   10038:	311c      	adds	r1, #28
   1003a:	0309      	lsls	r1, r1, #12
   1003c:	698a      	ldr	r2, [r1, #24]
   1003e:	06d0      	lsls	r0, r2, #27
   10040:	d432      	bmi.n	100a8 <am_hal_uart_transfer+0x2e8>
   10042:	680a      	ldr	r2, [r1, #0]
   10044:	f412 6470 	ands.w	r4, r2, #3840	; 0xf00
   10048:	f040 80aa 	bne.w	101a0 <am_hal_uart_transfer+0x3e0>
   1004c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   10050:	e006      	b.n	10060 <am_hal_uart_transfer+0x2a0>
   10052:	698a      	ldr	r2, [r1, #24]
   10054:	06d2      	lsls	r2, r2, #27
   10056:	d41f      	bmi.n	10098 <am_hal_uart_transfer+0x2d8>
   10058:	680a      	ldr	r2, [r1, #0]
   1005a:	f412 6f70 	tst.w	r2, #3840	; 0xf00
   1005e:	d161      	bne.n	10124 <am_hal_uart_transfer+0x364>
   10060:	3401      	adds	r4, #1
   10062:	42bc      	cmp	r4, r7
   10064:	f808 2f01 	strb.w	r2, [r8, #1]!
   10068:	d1f3      	bne.n	10052 <am_hal_uart_transfer+0x292>
   1006a:	469b      	mov	fp, r3
   1006c:	4426      	add	r6, r4
   1006e:	f1bb 0f00 	cmp.w	fp, #0
   10072:	f43f af1c 	beq.w	feae <am_hal_uart_transfer+0xee>
   10076:	f8cb 6000 	str.w	r6, [fp]
   1007a:	2700      	movs	r7, #0
   1007c:	e6aa      	b.n	fdd4 <am_hal_uart_transfer+0x14>
   1007e:	9807      	ldr	r0, [sp, #28]
   10080:	f7fe fdc0 	bl	ec04 <am_hal_interrupt_master_set>
   10084:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   10086:	9802      	ldr	r0, [sp, #8]
   10088:	42bc      	cmp	r4, r7
   1008a:	bf28      	it	cs
   1008c:	463c      	movcs	r4, r7
   1008e:	4641      	mov	r1, r8
   10090:	4622      	mov	r2, r4
   10092:	f000 f9bf 	bl	10414 <am_hal_queue_item_get>
   10096:	9b01      	ldr	r3, [sp, #4]
   10098:	1b3f      	subs	r7, r7, r4
   1009a:	4426      	add	r6, r4
   1009c:	d104      	bne.n	100a8 <am_hal_uart_transfer+0x2e8>
   1009e:	469b      	mov	fp, r3
   100a0:	e7e5      	b.n	1006e <am_hal_uart_transfer+0x2ae>
   100a2:	bf00      	nop
   100a4:	01ea9e06 	.word	0x01ea9e06
   100a8:	2010      	movs	r0, #16
   100aa:	9301      	str	r3, [sp, #4]
   100ac:	f7fe fb9c 	bl	e7e8 <am_hal_flash_delay>
   100b0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   100b4:	9b01      	ldr	r3, [sp, #4]
   100b6:	d001      	beq.n	100bc <am_hal_uart_transfer+0x2fc>
   100b8:	f10a 0a01 	add.w	sl, sl, #1
   100bc:	45d1      	cmp	r9, sl
   100be:	d9ee      	bls.n	1009e <am_hal_uart_transfer+0x2de>
   100c0:	682a      	ldr	r2, [r5, #0]
   100c2:	9900      	ldr	r1, [sp, #0]
   100c4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   100c8:	428a      	cmp	r2, r1
   100ca:	eb0b 0806 	add.w	r8, fp, r6
   100ce:	d0ab      	beq.n	10028 <am_hal_uart_transfer+0x268>
   100d0:	469b      	mov	fp, r3
   100d2:	2702      	movs	r7, #2
   100d4:	e6b8      	b.n	fe48 <am_hal_uart_transfer+0x88>
   100d6:	9301      	str	r3, [sp, #4]
   100d8:	f7fe fd90 	bl	ebfc <am_hal_interrupt_master_disable>
   100dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   100de:	9007      	str	r0, [sp, #28]
   100e0:	f502 2080 	add.w	r0, r2, #262144	; 0x40000
   100e4:	301c      	adds	r0, #28
   100e6:	9b01      	ldr	r3, [sp, #4]
   100e8:	0300      	lsls	r0, r0, #12
   100ea:	ac08      	add	r4, sp, #32
   100ec:	2200      	movs	r2, #0
   100ee:	6981      	ldr	r1, [r0, #24]
   100f0:	06c9      	lsls	r1, r1, #27
   100f2:	d409      	bmi.n	10108 <am_hal_uart_transfer+0x348>
   100f4:	6801      	ldr	r1, [r0, #0]
   100f6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
   100fa:	f102 0201 	add.w	r2, r2, #1
   100fe:	d118      	bne.n	10132 <am_hal_uart_transfer+0x372>
   10100:	2a20      	cmp	r2, #32
   10102:	f804 1b01 	strb.w	r1, [r4], #1
   10106:	d1f2      	bne.n	100ee <am_hal_uart_transfer+0x32e>
   10108:	a908      	add	r1, sp, #32
   1010a:	9802      	ldr	r0, [sp, #8]
   1010c:	9301      	str	r3, [sp, #4]
   1010e:	f000 f949 	bl	103a4 <am_hal_queue_item_add>
   10112:	9b01      	ldr	r3, [sp, #4]
   10114:	2800      	cmp	r0, #0
   10116:	d1b2      	bne.n	1007e <am_hal_uart_transfer+0x2be>
   10118:	4f45      	ldr	r7, [pc, #276]	; (10230 <am_hal_uart_transfer+0x470>)
   1011a:	469b      	mov	fp, r3
   1011c:	9807      	ldr	r0, [sp, #28]
   1011e:	f7fe fd71 	bl	ec04 <am_hal_interrupt_master_set>
   10122:	e691      	b.n	fe48 <am_hal_uart_transfer+0x88>
   10124:	469b      	mov	fp, r3
   10126:	4426      	add	r6, r4
   10128:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   1012c:	e68c      	b.n	fe48 <am_hal_uart_transfer+0x88>
   1012e:	46b8      	mov	r8, r7
   10130:	e71a      	b.n	ff68 <am_hal_uart_transfer+0x1a8>
   10132:	469b      	mov	fp, r3
   10134:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10138:	e7f0      	b.n	1011c <am_hal_uart_transfer+0x35c>
   1013a:	463e      	mov	r6, r7
   1013c:	e797      	b.n	1006e <am_hal_uart_transfer+0x2ae>
   1013e:	4616      	mov	r6, r2
   10140:	e6b2      	b.n	fea8 <am_hal_uart_transfer+0xe8>
   10142:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   10144:	6bab      	ldr	r3, [r5, #56]	; 0x38
   10146:	1a9b      	subs	r3, r3, r2
   10148:	429e      	cmp	r6, r3
   1014a:	bf28      	it	cs
   1014c:	461e      	movcs	r6, r3
   1014e:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   10152:	4651      	mov	r1, sl
   10154:	4632      	mov	r2, r6
   10156:	4620      	mov	r0, r4
   10158:	f000 f924 	bl	103a4 <am_hal_queue_item_add>
   1015c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1015e:	f7fe fd4d 	bl	ebfc <am_hal_interrupt_master_disable>
   10162:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
   10166:	371c      	adds	r7, #28
   10168:	033f      	lsls	r7, r7, #12
   1016a:	9005      	str	r0, [sp, #20]
   1016c:	e00d      	b.n	1018a <am_hal_uart_transfer+0x3ca>
   1016e:	f000 f951 	bl	10414 <am_hal_queue_item_get>
   10172:	b188      	cbz	r0, 10198 <am_hal_uart_transfer+0x3d8>
   10174:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10176:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1017a:	331c      	adds	r3, #28
   1017c:	031b      	lsls	r3, r3, #12
   1017e:	699a      	ldr	r2, [r3, #24]
   10180:	0692      	lsls	r2, r2, #26
   10182:	bf5c      	itt	pl
   10184:	f89d 2020 	ldrbpl.w	r2, [sp, #32]
   10188:	601a      	strpl	r2, [r3, #0]
   1018a:	69bb      	ldr	r3, [r7, #24]
   1018c:	069b      	lsls	r3, r3, #26
   1018e:	f04f 0201 	mov.w	r2, #1
   10192:	a908      	add	r1, sp, #32
   10194:	4620      	mov	r0, r4
   10196:	d5ea      	bpl.n	1016e <am_hal_uart_transfer+0x3ae>
   10198:	9805      	ldr	r0, [sp, #20]
   1019a:	f7fe fd33 	bl	ec04 <am_hal_interrupt_master_set>
   1019e:	e683      	b.n	fea8 <am_hal_uart_transfer+0xe8>
   101a0:	469b      	mov	fp, r3
   101a2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   101a6:	e64f      	b.n	fe48 <am_hal_uart_transfer+0x88>
   101a8:	461e      	mov	r6, r3
   101aa:	e67d      	b.n	fea8 <am_hal_uart_transfer+0xe8>
   101ac:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   101b0:	e6b4      	b.n	ff1c <am_hal_uart_transfer+0x15c>
   101b2:	9300      	str	r3, [sp, #0]
   101b4:	f7fe fd22 	bl	ebfc <am_hal_interrupt_master_disable>
   101b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   101ba:	9006      	str	r0, [sp, #24]
   101bc:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   101c0:	321c      	adds	r2, #28
   101c2:	0311      	lsls	r1, r2, #12
   101c4:	a808      	add	r0, sp, #32
   101c6:	2200      	movs	r2, #0
   101c8:	9b00      	ldr	r3, [sp, #0]
   101ca:	e009      	b.n	101e0 <am_hal_uart_transfer+0x420>
   101cc:	680c      	ldr	r4, [r1, #0]
   101ce:	f414 6f70 	tst.w	r4, #3840	; 0xf00
   101d2:	f102 0201 	add.w	r2, r2, #1
   101d6:	d121      	bne.n	1021c <am_hal_uart_transfer+0x45c>
   101d8:	2a20      	cmp	r2, #32
   101da:	f800 4b01 	strb.w	r4, [r0], #1
   101de:	d002      	beq.n	101e6 <am_hal_uart_transfer+0x426>
   101e0:	698c      	ldr	r4, [r1, #24]
   101e2:	06e4      	lsls	r4, r4, #27
   101e4:	d5f2      	bpl.n	101cc <am_hal_uart_transfer+0x40c>
   101e6:	f105 0648 	add.w	r6, r5, #72	; 0x48
   101ea:	a908      	add	r1, sp, #32
   101ec:	4630      	mov	r0, r6
   101ee:	9300      	str	r3, [sp, #0]
   101f0:	f000 f8d8 	bl	103a4 <am_hal_queue_item_add>
   101f4:	b920      	cbnz	r0, 10200 <am_hal_uart_transfer+0x440>
   101f6:	4f0e      	ldr	r7, [pc, #56]	; (10230 <am_hal_uart_transfer+0x470>)
   101f8:	9806      	ldr	r0, [sp, #24]
   101fa:	f7fe fd03 	bl	ec04 <am_hal_interrupt_master_set>
   101fe:	e5e9      	b.n	fdd4 <am_hal_uart_transfer+0x14>
   10200:	9806      	ldr	r0, [sp, #24]
   10202:	f7fe fcff 	bl	ec04 <am_hal_interrupt_master_set>
   10206:	6d2c      	ldr	r4, [r5, #80]	; 0x50
   10208:	9b00      	ldr	r3, [sp, #0]
   1020a:	42bc      	cmp	r4, r7
   1020c:	bf28      	it	cs
   1020e:	463c      	movcs	r4, r7
   10210:	4619      	mov	r1, r3
   10212:	4630      	mov	r0, r6
   10214:	4622      	mov	r2, r4
   10216:	f000 f8fd 	bl	10414 <am_hal_queue_item_get>
   1021a:	e67e      	b.n	ff1a <am_hal_uart_transfer+0x15a>
   1021c:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10220:	e7ea      	b.n	101f8 <am_hal_uart_transfer+0x438>
   10222:	4604      	mov	r4, r0
   10224:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
   10228:	e678      	b.n	ff1c <am_hal_uart_transfer+0x15c>
   1022a:	4627      	mov	r7, r4
   1022c:	e676      	b.n	ff1c <am_hal_uart_transfer+0x15c>
   1022e:	bf00      	nop
   10230:	08000001 	.word	0x08000001

00010234 <am_hal_uart_tx_flush>:
   10234:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10238:	b570      	push	{r4, r5, r6, lr}
   1023a:	4604      	mov	r4, r0
   1023c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1023e:	b15b      	cbz	r3, 10258 <am_hal_uart_tx_flush+0x24>
   10240:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10242:	b14b      	cbz	r3, 10258 <am_hal_uart_tx_flush+0x24>
   10244:	4e0e      	ldr	r6, [pc, #56]	; (10280 <am_hal_uart_tx_flush+0x4c>)
   10246:	6e20      	ldr	r0, [r4, #96]	; 0x60
   10248:	fbb6 f0f0 	udiv	r0, r6, r0
   1024c:	0100      	lsls	r0, r0, #4
   1024e:	f7fe facb 	bl	e7e8 <am_hal_flash_delay>
   10252:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10254:	2b00      	cmp	r3, #0
   10256:	d1f6      	bne.n	10246 <am_hal_uart_tx_flush+0x12>
   10258:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1025c:	351c      	adds	r5, #28
   1025e:	032d      	lsls	r5, r5, #12
   10260:	69ab      	ldr	r3, [r5, #24]
   10262:	071a      	lsls	r2, r3, #28
   10264:	d509      	bpl.n	1027a <am_hal_uart_tx_flush+0x46>
   10266:	4e06      	ldr	r6, [pc, #24]	; (10280 <am_hal_uart_tx_flush+0x4c>)
   10268:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1026a:	fbb6 f0f0 	udiv	r0, r6, r0
   1026e:	0100      	lsls	r0, r0, #4
   10270:	f7fe faba 	bl	e7e8 <am_hal_flash_delay>
   10274:	69ab      	ldr	r3, [r5, #24]
   10276:	071b      	lsls	r3, r3, #28
   10278:	d4f6      	bmi.n	10268 <am_hal_uart_tx_flush+0x34>
   1027a:	2000      	movs	r0, #0
   1027c:	bd70      	pop	{r4, r5, r6, pc}
   1027e:	bf00      	nop
   10280:	00b71b00 	.word	0x00b71b00

00010284 <am_hal_cmdq_init>:
   10284:	2807      	cmp	r0, #7
   10286:	d901      	bls.n	1028c <am_hal_cmdq_init+0x8>
   10288:	2005      	movs	r0, #5
   1028a:	4770      	bx	lr
   1028c:	b1c9      	cbz	r1, 102c2 <am_hal_cmdq_init+0x3e>
   1028e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10292:	684c      	ldr	r4, [r1, #4]
   10294:	b194      	cbz	r4, 102bc <am_hal_cmdq_init+0x38>
   10296:	b18a      	cbz	r2, 102bc <am_hal_cmdq_init+0x38>
   10298:	680e      	ldr	r6, [r1, #0]
   1029a:	2e01      	cmp	r6, #1
   1029c:	d90e      	bls.n	102bc <am_hal_cmdq_init+0x38>
   1029e:	272c      	movs	r7, #44	; 0x2c
   102a0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 10340 <am_hal_cmdq_init+0xbc>
   102a4:	fb07 f700 	mul.w	r7, r7, r0
   102a8:	eb0c 0507 	add.w	r5, ip, r7
   102ac:	f895 e003 	ldrb.w	lr, [r5, #3]
   102b0:	f01e 0301 	ands.w	r3, lr, #1
   102b4:	d007      	beq.n	102c6 <am_hal_cmdq_init+0x42>
   102b6:	2007      	movs	r0, #7
   102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102bc:	2006      	movs	r0, #6
   102be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102c2:	2006      	movs	r0, #6
   102c4:	4770      	bx	lr
   102c6:	f04e 0e01 	orr.w	lr, lr, #1
   102ca:	00f6      	lsls	r6, r6, #3
   102cc:	f363 0e41 	bfi	lr, r3, #1, #1
   102d0:	f885 e003 	strb.w	lr, [r5, #3]
   102d4:	eb06 0804 	add.w	r8, r6, r4
   102d8:	f8df e068 	ldr.w	lr, [pc, #104]	; 10344 <am_hal_cmdq_init+0xc0>
   102dc:	f8c5 8008 	str.w	r8, [r5, #8]
   102e0:	606c      	str	r4, [r5, #4]
   102e2:	60ec      	str	r4, [r5, #12]
   102e4:	616c      	str	r4, [r5, #20]
   102e6:	612c      	str	r4, [r5, #16]
   102e8:	61ae      	str	r6, [r5, #24]
   102ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   102ee:	f85c 6007 	ldr.w	r6, [ip, r7]
   102f2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 10348 <am_hal_cmdq_init+0xc4>
   102f6:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
   102fa:	f368 0617 	bfi	r6, r8, #0, #24
   102fe:	f8d0 e008 	ldr.w	lr, [r0, #8]
   10302:	f84c 6007 	str.w	r6, [ip, r7]
   10306:	6268      	str	r0, [r5, #36]	; 0x24
   10308:	61eb      	str	r3, [r5, #28]
   1030a:	622b      	str	r3, [r5, #32]
   1030c:	f8ce 3000 	str.w	r3, [lr]
   10310:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10312:	7a09      	ldrb	r1, [r1, #8]
   10314:	68c0      	ldr	r0, [r0, #12]
   10316:	6003      	str	r3, [r0, #0]
   10318:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1031a:	6906      	ldr	r6, [r0, #16]
   1031c:	6940      	ldr	r0, [r0, #20]
   1031e:	6837      	ldr	r7, [r6, #0]
   10320:	4338      	orrs	r0, r7
   10322:	6030      	str	r0, [r6, #0]
   10324:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10326:	6840      	ldr	r0, [r0, #4]
   10328:	6004      	str	r4, [r0, #0]
   1032a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1032c:	0049      	lsls	r1, r1, #1
   1032e:	6804      	ldr	r4, [r0, #0]
   10330:	f001 0102 	and.w	r1, r1, #2
   10334:	6021      	str	r1, [r4, #0]
   10336:	4618      	mov	r0, r3
   10338:	6015      	str	r5, [r2, #0]
   1033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1033e:	bf00      	nop
   10340:	10001194 	.word	0x10001194
   10344:	00010ac4 	.word	0x00010ac4
   10348:	00cdcdcd 	.word	0x00cdcdcd

0001034c <am_hal_cmdq_enable>:
   1034c:	4603      	mov	r3, r0
   1034e:	b128      	cbz	r0, 1035c <am_hal_cmdq_enable+0x10>
   10350:	6802      	ldr	r2, [r0, #0]
   10352:	490d      	ldr	r1, [pc, #52]	; (10388 <am_hal_cmdq_enable+0x3c>)
   10354:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   10358:	428a      	cmp	r2, r1
   1035a:	d001      	beq.n	10360 <am_hal_cmdq_enable+0x14>
   1035c:	2002      	movs	r0, #2
   1035e:	4770      	bx	lr
   10360:	78c2      	ldrb	r2, [r0, #3]
   10362:	f002 0202 	and.w	r2, r2, #2
   10366:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1036a:	b952      	cbnz	r2, 10382 <am_hal_cmdq_enable+0x36>
   1036c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1036e:	6811      	ldr	r1, [r2, #0]
   10370:	680a      	ldr	r2, [r1, #0]
   10372:	f042 0201 	orr.w	r2, r2, #1
   10376:	600a      	str	r2, [r1, #0]
   10378:	78da      	ldrb	r2, [r3, #3]
   1037a:	f042 0202 	orr.w	r2, r2, #2
   1037e:	70da      	strb	r2, [r3, #3]
   10380:	4770      	bx	lr
   10382:	2000      	movs	r0, #0
   10384:	4770      	bx	lr
   10386:	bf00      	nop
   10388:	01cdcdcd 	.word	0x01cdcdcd

0001038c <am_hal_queue_init>:
   1038c:	b410      	push	{r4}
   1038e:	2400      	movs	r4, #0
   10390:	6004      	str	r4, [r0, #0]
   10392:	6044      	str	r4, [r0, #4]
   10394:	6084      	str	r4, [r0, #8]
   10396:	60c3      	str	r3, [r0, #12]
   10398:	6102      	str	r2, [r0, #16]
   1039a:	6141      	str	r1, [r0, #20]
   1039c:	f85d 4b04 	ldr.w	r4, [sp], #4
   103a0:	4770      	bx	lr
   103a2:	bf00      	nop

000103a4 <am_hal_queue_item_add>:
   103a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   103a6:	4604      	mov	r4, r0
   103a8:	6906      	ldr	r6, [r0, #16]
   103aa:	b083      	sub	sp, #12
   103ac:	fb06 f602 	mul.w	r6, r6, r2
   103b0:	460d      	mov	r5, r1
   103b2:	f7fe fc23 	bl	ebfc <am_hal_interrupt_master_disable>
   103b6:	68e7      	ldr	r7, [r4, #12]
   103b8:	68a2      	ldr	r2, [r4, #8]
   103ba:	9001      	str	r0, [sp, #4]
   103bc:	1abb      	subs	r3, r7, r2
   103be:	429e      	cmp	r6, r3
   103c0:	d826      	bhi.n	10410 <am_hal_queue_item_add+0x6c>
   103c2:	b196      	cbz	r6, 103ea <am_hal_queue_item_add+0x46>
   103c4:	6823      	ldr	r3, [r4, #0]
   103c6:	4629      	mov	r1, r5
   103c8:	b1c5      	cbz	r5, 103fc <am_hal_queue_item_add+0x58>
   103ca:	19af      	adds	r7, r5, r6
   103cc:	6962      	ldr	r2, [r4, #20]
   103ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   103d2:	54d0      	strb	r0, [r2, r3]
   103d4:	6823      	ldr	r3, [r4, #0]
   103d6:	68e5      	ldr	r5, [r4, #12]
   103d8:	3301      	adds	r3, #1
   103da:	42b9      	cmp	r1, r7
   103dc:	fbb3 f0f5 	udiv	r0, r3, r5
   103e0:	fb05 3310 	mls	r3, r5, r0, r3
   103e4:	6023      	str	r3, [r4, #0]
   103e6:	d1f1      	bne.n	103cc <am_hal_queue_item_add+0x28>
   103e8:	68a2      	ldr	r2, [r4, #8]
   103ea:	4432      	add	r2, r6
   103ec:	60a2      	str	r2, [r4, #8]
   103ee:	2401      	movs	r4, #1
   103f0:	9801      	ldr	r0, [sp, #4]
   103f2:	f7fe fc07 	bl	ec04 <am_hal_interrupt_master_set>
   103f6:	4620      	mov	r0, r4
   103f8:	b003      	add	sp, #12
   103fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103fc:	3101      	adds	r1, #1
   103fe:	3301      	adds	r3, #1
   10400:	428e      	cmp	r6, r1
   10402:	fbb3 f0f7 	udiv	r0, r3, r7
   10406:	fb07 3310 	mls	r3, r7, r0, r3
   1040a:	d1f7      	bne.n	103fc <am_hal_queue_item_add+0x58>
   1040c:	6023      	str	r3, [r4, #0]
   1040e:	e7ec      	b.n	103ea <am_hal_queue_item_add+0x46>
   10410:	2400      	movs	r4, #0
   10412:	e7ed      	b.n	103f0 <am_hal_queue_item_add+0x4c>

00010414 <am_hal_queue_item_get>:
   10414:	b5f0      	push	{r4, r5, r6, r7, lr}
   10416:	4604      	mov	r4, r0
   10418:	6906      	ldr	r6, [r0, #16]
   1041a:	b083      	sub	sp, #12
   1041c:	fb06 f602 	mul.w	r6, r6, r2
   10420:	460d      	mov	r5, r1
   10422:	f7fe fbeb 	bl	ebfc <am_hal_interrupt_master_disable>
   10426:	68a2      	ldr	r2, [r4, #8]
   10428:	9001      	str	r0, [sp, #4]
   1042a:	4296      	cmp	r6, r2
   1042c:	d81c      	bhi.n	10468 <am_hal_queue_item_get+0x54>
   1042e:	b196      	cbz	r6, 10456 <am_hal_queue_item_get+0x42>
   10430:	6863      	ldr	r3, [r4, #4]
   10432:	b1dd      	cbz	r5, 1046c <am_hal_queue_item_get+0x58>
   10434:	4629      	mov	r1, r5
   10436:	19af      	adds	r7, r5, r6
   10438:	6962      	ldr	r2, [r4, #20]
   1043a:	5cd3      	ldrb	r3, [r2, r3]
   1043c:	f801 3b01 	strb.w	r3, [r1], #1
   10440:	6863      	ldr	r3, [r4, #4]
   10442:	68e5      	ldr	r5, [r4, #12]
   10444:	3301      	adds	r3, #1
   10446:	428f      	cmp	r7, r1
   10448:	fbb3 f0f5 	udiv	r0, r3, r5
   1044c:	fb05 3310 	mls	r3, r5, r0, r3
   10450:	6063      	str	r3, [r4, #4]
   10452:	d1f1      	bne.n	10438 <am_hal_queue_item_get+0x24>
   10454:	68a2      	ldr	r2, [r4, #8]
   10456:	1b92      	subs	r2, r2, r6
   10458:	60a2      	str	r2, [r4, #8]
   1045a:	2401      	movs	r4, #1
   1045c:	9801      	ldr	r0, [sp, #4]
   1045e:	f7fe fbd1 	bl	ec04 <am_hal_interrupt_master_set>
   10462:	4620      	mov	r0, r4
   10464:	b003      	add	sp, #12
   10466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10468:	2400      	movs	r4, #0
   1046a:	e7f7      	b.n	1045c <am_hal_queue_item_get+0x48>
   1046c:	68e0      	ldr	r0, [r4, #12]
   1046e:	4629      	mov	r1, r5
   10470:	3101      	adds	r1, #1
   10472:	3301      	adds	r3, #1
   10474:	428e      	cmp	r6, r1
   10476:	fbb3 f5f0 	udiv	r5, r3, r0
   1047a:	fb00 3315 	mls	r3, r0, r5, r3
   1047e:	d1f7      	bne.n	10470 <am_hal_queue_item_get+0x5c>
   10480:	6063      	str	r3, [r4, #4]
   10482:	e7e8      	b.n	10456 <am_hal_queue_item_get+0x42>
   10484:	72617053 	.word	0x72617053
   10488:	6e75466b 	.word	0x6e75466b
   1048c:	67644520 	.word	0x67644520
   10490:	6f422065 	.word	0x6f422065
   10494:	20647261 	.word	0x20647261
   10498:	74736554 	.word	0x74736554
   1049c:	0000000a 	.word	0x0000000a
   104a0:	313a3930 	.word	0x313a3930
   104a4:	36333a36 	.word	0x36333a36
   104a8:	00000000 	.word	0x00000000
   104ac:	2072614d 	.word	0x2072614d
   104b0:	32203731 	.word	0x32203731
   104b4:	00303230 	.word	0x00303230
   104b8:	706d6f43 	.word	0x706d6f43
   104bc:	64656c69 	.word	0x64656c69
   104c0:	206e6f20 	.word	0x206e6f20
   104c4:	202c7325 	.word	0x202c7325
   104c8:	0a0a7325 	.word	0x0a0a7325
   104cc:	00000000 	.word	0x00000000
   104d0:	72617053 	.word	0x72617053
   104d4:	6e75466b 	.word	0x6e75466b
   104d8:	6e655420 	.word	0x6e655420
   104dc:	66726f73 	.word	0x66726f73
   104e0:	20776f6c 	.word	0x20776f6c
   104e4:	75626544 	.word	0x75626544
   104e8:	754f2067 	.word	0x754f2067
   104ec:	74757074 	.word	0x74757074
   104f0:	41552820 	.word	0x41552820
   104f4:	0d295452 	.word	0x0d295452
   104f8:	0000000a 	.word	0x0000000a
   104fc:	6c6c6548 	.word	0x6c6c6548
   10500:	55202c6f 	.word	0x55202c6f
   10504:	21545241 	.word	0x21545241
   10508:	00000a0d 	.word	0x00000a0d
   1050c:	65636341 	.word	0x65636341
   10510:	6f72656c 	.word	0x6f72656c
   10514:	6574656d 	.word	0x6574656d
   10518:	6e692072 	.word	0x6e692072
   1051c:	72207469 	.word	0x72207469
   10520:	72757465 	.word	0x72757465
   10524:	2064656e 	.word	0x2064656e
   10528:	0d783825 	.word	0x0d783825
   1052c:	0000000a 	.word	0x0000000a
   10530:	20636341 	.word	0x20636341
   10534:	5d676d5b 	.word	0x5d676d5b
   10538:	34302520 	.word	0x34302520
   1053c:	2066322e 	.word	0x2066322e
   10540:	25202c78 	.word	0x25202c78
   10544:	322e3430 	.word	0x322e3430
   10548:	2c792066 	.word	0x2c792066
   1054c:	34302520 	.word	0x34302520
   10550:	2066322e 	.word	0x2066322e
   10554:	54202c7a 	.word	0x54202c7a
   10558:	20706d65 	.word	0x20706d65
   1055c:	6765645b 	.word	0x6765645b
   10560:	205d4320 	.word	0x205d4320
   10564:	2e343025 	.word	0x2e343025
   10568:	202c6632 	.word	0x202c6632
   1056c:	3043494d 	.word	0x3043494d
   10570:	6f635b20 	.word	0x6f635b20
   10574:	73746e75 	.word	0x73746e75
   10578:	32202f20 	.word	0x32202f20
   1057c:	5d34315e 	.word	0x5d34315e
   10580:	0d642520 	.word	0x0d642520
   10584:	0000000a 	.word	0x0000000a
   10588:	0a0a0a0a 	.word	0x0a0a0a0a
   1058c:	0a0a0a0a 	.word	0x0a0a0a0a
   10590:	0a0a0a0a 	.word	0x0a0a0a0a
   10594:	0a0a0a0a 	.word	0x0a0a0a0a
   10598:	00000a0a 	.word	0x00000a0a
   1059c:	6f727245 	.word	0x6f727245
   105a0:	65722072 	.word	0x65722072
   105a4:	6e696461 	.word	0x6e696461
   105a8:	44412067 	.word	0x44412067
   105ac:	6e692043 	.word	0x6e692043
   105b0:	72726574 	.word	0x72726574
   105b4:	20747075 	.word	0x20747075
   105b8:	74617473 	.word	0x74617473
   105bc:	000a7375 	.word	0x000a7375
   105c0:	6f727245 	.word	0x6f727245
   105c4:	6c632072 	.word	0x6c632072
   105c8:	69726165 	.word	0x69726165
   105cc:	4120676e 	.word	0x4120676e
   105d0:	69204344 	.word	0x69204344
   105d4:	7265746e 	.word	0x7265746e
   105d8:	74707572 	.word	0x74707572
   105dc:	61747320 	.word	0x61747320
   105e0:	0a737574 	.word	0x0a737574
   105e4:	00000000 	.word	0x00000000
   105e8:	6f727245 	.word	0x6f727245
   105ec:	202d2072 	.word	0x202d2072
   105f0:	20434441 	.word	0x20434441
   105f4:	706d6173 	.word	0x706d6173
   105f8:	7220656c 	.word	0x7220656c
   105fc:	20646165 	.word	0x20646165
   10600:	6d6f7266 	.word	0x6d6f7266
   10604:	46494620 	.word	0x46494620
   10608:	6166204f 	.word	0x6166204f
   1060c:	64656c69 	.word	0x64656c69
   10610:	00000a2e 	.word	0x00000a2e
   10614:	6f727245 	.word	0x6f727245
   10618:	202d2072 	.word	0x202d2072
   1061c:	61736964 	.word	0x61736964
   10620:	20656c62 	.word	0x20656c62
   10624:	20434441 	.word	0x20434441
   10628:	6c696166 	.word	0x6c696166
   1062c:	0a2e6465 	.word	0x0a2e6465
   10630:	00000000 	.word	0x00000000
   10634:	6f727245 	.word	0x6f727245
   10638:	202d2072 	.word	0x202d2072
   1063c:	61736964 	.word	0x61736964
   10640:	6e696c62 	.word	0x6e696c62
   10644:	68742067 	.word	0x68742067
   10648:	44412065 	.word	0x44412065
   1064c:	6f702043 	.word	0x6f702043
   10650:	20726577 	.word	0x20726577
   10654:	616d6f64 	.word	0x616d6f64
   10658:	66206e69 	.word	0x66206e69
   1065c:	656c6961 	.word	0x656c6961
   10660:	000a2e64 	.word	0x000a2e64
   10664:	6f727245 	.word	0x6f727245
   10668:	202d2072 	.word	0x202d2072
   1066c:	75746572 	.word	0x75746572
   10670:	6f206e72 	.word	0x6f206e72
   10674:	68742066 	.word	0x68742066
   10678:	44412065 	.word	0x44412065
   1067c:	6e692043 	.word	0x6e692043
   10680:	6e617473 	.word	0x6e617473
   10684:	66206563 	.word	0x66206563
   10688:	656c6961 	.word	0x656c6961
   1068c:	000a2e64 	.word	0x000a2e64
   10690:	6f727245 	.word	0x6f727245
   10694:	202d2072 	.word	0x202d2072
   10698:	65736572 	.word	0x65736572
   1069c:	74617672 	.word	0x74617672
   106a0:	206e6f69 	.word	0x206e6f69
   106a4:	7420666f 	.word	0x7420666f
   106a8:	41206568 	.word	0x41206568
   106ac:	69204344 	.word	0x69204344
   106b0:	6174736e 	.word	0x6174736e
   106b4:	2065636e 	.word	0x2065636e
   106b8:	6c696166 	.word	0x6c696166
   106bc:	0a2e6465 	.word	0x0a2e6465
   106c0:	00000000 	.word	0x00000000
   106c4:	6f727245 	.word	0x6f727245
   106c8:	202d2072 	.word	0x202d2072
   106cc:	20434441 	.word	0x20434441
   106d0:	65776f70 	.word	0x65776f70
   106d4:	6e6f2072 	.word	0x6e6f2072
   106d8:	69616620 	.word	0x69616620
   106dc:	2e64656c 	.word	0x2e64656c
   106e0:	0000000a 	.word	0x0000000a
   106e4:	6f727245 	.word	0x6f727245
   106e8:	202d2072 	.word	0x202d2072
   106ec:	666e6f63 	.word	0x666e6f63
   106f0:	72756769 	.word	0x72756769
   106f4:	20676e69 	.word	0x20676e69
   106f8:	20434441 	.word	0x20434441
   106fc:	6c696166 	.word	0x6c696166
   10700:	0a2e6465 	.word	0x0a2e6465
   10704:	00000000 	.word	0x00000000
   10708:	6f727245 	.word	0x6f727245
   1070c:	202d2072 	.word	0x202d2072
   10710:	666e6f63 	.word	0x666e6f63
   10714:	72756769 	.word	0x72756769
   10718:	20676e69 	.word	0x20676e69
   1071c:	20434441 	.word	0x20434441
   10720:	746f6c53 	.word	0x746f6c53
   10724:	66203020 	.word	0x66203020
   10728:	656c6961 	.word	0x656c6961
   1072c:	000a2e64 	.word	0x000a2e64
   10730:	6f727245 	.word	0x6f727245
   10734:	202d2072 	.word	0x202d2072
   10738:	62616e65 	.word	0x62616e65
   1073c:	676e696c 	.word	0x676e696c
   10740:	43444120 	.word	0x43444120
   10744:	69616620 	.word	0x69616620
   10748:	2e64656c 	.word	0x2e64656c
   1074c:	0000000a 	.word	0x0000000a

00010750 <g_AM_PIN_11_ADCSE2>:
   10750:	00000000 616f6857 2820696d 756f6873     ....Whoami (shou
   10760:	6220646c 78302065 3a293333 25783020     ld be 0x33): 0x%
   10770:	000a7832 52206f4e 75622058 72656666     2x..No RX buffer
   10780:	6f727020 65646976 00000a64 646e6553      provided...Send
   10790:	72726520 6425203a 0000000a 65636552      err: %d....Rece
   107a0:	20657669 3a727265 0a642520 00000000     ive err: %d.....
   107b0:	54206f4e 75622058 72656666 6f727020     No TX buffer pro
   107c0:	65646976 00000a64 646e6553 72726520     vided...Send err
   107d0:	68702820 20657361 203a2931 000a6425      (phase 1): %d..

000107e0 <g_sBspUartConfig>:
   107e0:	0001c200 00000060 00000000 00000000     ....`...........
   107f0:	00000000 00000012 00000000 00000000     ................
	...

00010808 <g_AM_BSP_GPIO_COM_UART_RX>:
   10808:	00000000                                ....

0001080c <g_AM_BSP_GPIO_COM_UART_TX>:
   1080c:	00000000                                ....

00010810 <g_AM_BSP_GPIO_IOM4_SCL>:
   10810:	00040b44                                D...

00010814 <g_AM_BSP_GPIO_IOM4_SDA>:
   10814:	00040b44                                D...

00010818 <am_hal_cachectrl_defaults>:
   10818:	00000308                                ....

0001081c <g_AM_HAL_GPIO_INPUT>:
   1081c:	00001003                                ....

00010820 <g_ui8Bit76Capabilities>:
   10820:	02800101 80010180 80800101 80808080     ................
   10830:	80808080 80808008 01800180 80808080     ................
   10840:	80808080 01800402 01010401 80808080     ................
   10850:	00000101                                ....

00010854 <g_ui8NCEtable>:
   10854:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   10864:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   10874:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   10884:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   10894:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   108a4:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   108b4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   108c4:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   108d4:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   108e4:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   108f4:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   10904:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   10914:	32221202 43231303                       .."2..#C

0001091c <g_ui8Inpen>:
   1091c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1092c:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   1093c:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   1094c:	00003130                                01..

00010950 <g_AM_HAL_GPIO_DISABLE>:
   10950:	00000003                                ....

00010954 <g_AM_HAL_GPIO_OUTPUT>:
   10954:	00000403                                ....

00010958 <g_ui8nCEpins>:
   10958:	02070707 00080802 01020202 01010101     ................
   10968:	01010101 01010101 01010101 01010101     ................
   10978:	01010101 08010101 01010008 01010101     ................
   10988:	00000101                                ....

0001098c <g_AM_HAL_GPIO_OUTPUT_12>:
   1098c:	00000703                                ....

00010990 <g_am_hal_mcuctrl_flash_size>:
   10990:	00004000 00008000 00010000 00020000     .@..............
   109a0:	00040000 00080000 00100000 00200000     .............. .
   109b0:	00180000 00000000 00000000 00000000     ................
	...

000109d0 <g_am_hal_mcuctrl_sram_size>:
   109d0:	00004000 00008000 00010000 00020000     .@..............
   109e0:	00040000 00080000 00100000 00060000     ................
   109f0:	000c0000 00000000 00000000 00000000     ................
	...

00010a10 <am_hal_pwrctrl_peripheral_control>:
	...
   10a1c:	00000001 00000004 00000004 00000002     ................
   10a2c:	00000008 00000008 00000004 00000008     ................
   10a3c:	00000008 00000008 00000008 00000008     ................
   10a4c:	00000010 00000010 00000010 00000020     ............ ...
   10a5c:	00000010 00000010 00000040 00000010     ........@.......
   10a6c:	00000010 00000080 00000004 00000004     ................
   10a7c:	00000100 00000004 00000004 00000200     ................
   10a8c:	00000020 00000020 00000400 00000004      ... ...........
   10a9c:	00000004 00000800 00000040 00000040     ........@...@...
   10aac:	00001000 00000080 00000080 00002000     ............. ..
   10abc:	00000100 00000100                       ........

00010ac4 <gAmHalCmdQReg>:
   10ac4:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   10ad4:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   10ae4:	00000004 00000002 50005294 50005298     .........R.P.R.P
   10af4:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   10b04:	5000529c 00000001 00000004 00000002     .R.P............
   10b14:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   10b24:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   10b34:	00000004 00000002 50007294 50007298     .........r.P.r.P
   10b44:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   10b54:	5000729c 00000001 00000004 00000002     .r.P............
   10b64:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   10b74:	500082a8 00008000 5000829c 00000001     ...P.......P....
   10b84:	00000004 00000002 50009294 50009298     ...........P...P
   10b94:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   10ba4:	5000929c 00000001 00000004 00000002     ...P............
   10bb4:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   10bc4:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   10bd4:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   10be4:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   10bf4:	5000c250 00000001 00000004 00000002     P..P............
