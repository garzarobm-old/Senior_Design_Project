
bin/hello_world.axf:     file format elf32-littlearm


Disassembly of section .text:

0000c000 <g_am_pfnVectors>:
    c000:	00 10 00 10 a1 d3 00 00 09 d4 00 00 51 c3 00 00     ............Q...
    c010:	0f d4 00 00 0f d4 00 00 0f d4 00 00 00 00 00 00     ................
	...
    c02c:	15 d4 00 00 15 d4 00 00 00 00 00 00 15 d4 00 00     ................
    c03c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c04c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c05c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c06c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c07c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c08c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c09c:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c0ac:	15 d4 00 00 15 d4 00 00 15 d4 00 00 15 d4 00 00     ................
    c0bc:	15 d4 00 00                                         ....

0000c0c0 <__Patchable>:
	...

0000c100 <__aeabi_d2f>:
    c100:	ea4f 0241 	mov.w	r2, r1, lsl #1
    c104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    c108:	bf24      	itt	cs
    c10a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    c10e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    c112:	d90d      	bls.n	c130 <__aeabi_d2f+0x30>
    c114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    c11c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    c120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    c128:	bf08      	it	eq
    c12a:	f020 0001 	biceq.w	r0, r0, #1
    c12e:	4770      	bx	lr
    c130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    c134:	d121      	bne.n	c17a <__aeabi_d2f+0x7a>
    c136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    c13a:	bfbc      	itt	lt
    c13c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    c140:	4770      	bxlt	lr
    c142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c146:	ea4f 5252 	mov.w	r2, r2, lsr #21
    c14a:	f1c2 0218 	rsb	r2, r2, #24
    c14e:	f1c2 0c20 	rsb	ip, r2, #32
    c152:	fa10 f30c 	lsls.w	r3, r0, ip
    c156:	fa20 f002 	lsr.w	r0, r0, r2
    c15a:	bf18      	it	ne
    c15c:	f040 0001 	orrne.w	r0, r0, #1
    c160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    c168:	fa03 fc0c 	lsl.w	ip, r3, ip
    c16c:	ea40 000c 	orr.w	r0, r0, ip
    c170:	fa23 f302 	lsr.w	r3, r3, r2
    c174:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c178:	e7cc      	b.n	c114 <__aeabi_d2f+0x14>
    c17a:	ea7f 5362 	mvns.w	r3, r2, asr #21
    c17e:	d107      	bne.n	c190 <__aeabi_d2f+0x90>
    c180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    c184:	bf1e      	ittt	ne
    c186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    c18a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    c18e:	4770      	bxne	lr
    c190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    c194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c19c:	4770      	bx	lr
    c19e:	bf00      	nop

0000c1a0 <main>:
// Main
//
//*****************************************************************************
int
main(void)
{
    c1a0:	b5b0      	push	{r4, r5, r7, lr}
    c1a2:	b0a4      	sub	sp, #144	; 0x90
    c1a4:	af04      	add	r7, sp, #16
    am_util_id_t sIdDevice;
    uint32_t ui32StrBuf;
    //
    // Set the clock frequency.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_SYSCLK_MAX, 0);
    c1a6:	2100      	movs	r1, #0
    c1a8:	2000      	movs	r0, #0
    c1aa:	f001 fb4f 	bl	d84c <am_hal_clkgen_control>

    //
    // Set the default cache configuration
    //
    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
    c1ae:	4851      	ldr	r0, [pc, #324]	; (c2f4 <main+0x154>)
    c1b0:	f001 f9aa 	bl	d508 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
    c1b4:	f001 f9ce 	bl	d554 <am_hal_cachectrl_enable>

    //
    // Configure the board for low power operation.
    //
    am_bsp_low_power_init();
    c1b8:	f001 f930 	bl	d41c <am_bsp_low_power_init>

    //
    // Initialize the printf interface for ITM output
    //
    am_bsp_itm_printf_enable();
    c1bc:	f001 f984 	bl	d4c8 <am_bsp_itm_printf_enable>

    //
    // Print the banner.
    //
    am_util_stdio_terminal_clear();
    c1c0:	f001 f8e4 	bl	d38c <am_util_stdio_terminal_clear>
    am_util_stdio_printf("Hello World!\n\n");
    c1c4:	484c      	ldr	r0, [pc, #304]	; (c2f8 <main+0x158>)
    c1c6:	f001 f8bd 	bl	d344 <am_util_stdio_printf>

    //
    // Print the device info.
    //
    am_util_id_device(&sIdDevice);
    c1ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
    c1ce:	4618      	mov	r0, r3
    c1d0:	f000 f946 	bl	c460 <am_util_id_device>
    am_util_stdio_printf("Vendor Name: %s\n", sIdDevice.pui8VendorName);
    c1d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c1d6:	4619      	mov	r1, r3
    c1d8:	4848      	ldr	r0, [pc, #288]	; (c2fc <main+0x15c>)
    c1da:	f001 f8b3 	bl	d344 <am_util_stdio_printf>
    am_util_stdio_printf("Device type: %s\n", sIdDevice.pui8DeviceName);
    c1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c1e0:	4619      	mov	r1, r3
    c1e2:	4847      	ldr	r0, [pc, #284]	; (c300 <main+0x160>)
    c1e4:	f001 f8ae 	bl	d344 <am_util_stdio_printf>


    am_util_stdio_printf("Qualified: %s\n",
                         sIdDevice.sMcuCtrlDevice.ui32Qualified ?
    c1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    am_util_stdio_printf("Qualified: %s\n",
    c1ea:	2b00      	cmp	r3, #0
    c1ec:	d001      	beq.n	c1f2 <main+0x52>
    c1ee:	4b45      	ldr	r3, [pc, #276]	; (c304 <main+0x164>)
    c1f0:	e000      	b.n	c1f4 <main+0x54>
    c1f2:	4b45      	ldr	r3, [pc, #276]	; (c308 <main+0x168>)
    c1f4:	4619      	mov	r1, r3
    c1f6:	4845      	ldr	r0, [pc, #276]	; (c30c <main+0x16c>)
    c1f8:	f001 f8a4 	bl	d344 <am_util_stdio_printf>
                         "Yes" : "No");

    am_util_stdio_printf("Device Info:\n"
    c1fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    c1fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c200:	6c38      	ldr	r0, [r7, #64]	; 0x40
    c202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                         "\tRevision:    0x%08X (Rev%c%c)\n",
                         sIdDevice.sMcuCtrlDevice.ui32ChipPN,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID0,
                         sIdDevice.sMcuCtrlDevice.ui32ChipID1,
                         sIdDevice.sMcuCtrlDevice.ui32ChipRev,
                         sIdDevice.ui8ChipRevMaj, sIdDevice.ui8ChipRevMin );
    c204:	f897 4078 	ldrb.w	r4, [r7, #120]	; 0x78
    c208:	f897 5079 	ldrb.w	r5, [r7, #121]	; 0x79
    am_util_stdio_printf("Device Info:\n"
    c20c:	9502      	str	r5, [sp, #8]
    c20e:	9401      	str	r4, [sp, #4]
    c210:	9300      	str	r3, [sp, #0]
    c212:	4603      	mov	r3, r0
    c214:	483e      	ldr	r0, [pc, #248]	; (c310 <main+0x170>)
    c216:	f001 f895 	bl	d344 <am_util_stdio_printf>

    //
    // If not a multiple of 1024 bytes, append a plus sign to the KB.
    //
    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32FlashSize % 1024 ) ? '+' : 0;
    c21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c21c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c220:	2b00      	cmp	r3, #0
    c222:	d001      	beq.n	c228 <main+0x88>
    c224:	232b      	movs	r3, #43	; 0x2b
    c226:	e000      	b.n	c22a <main+0x8a>
    c228:	2300      	movs	r3, #0
    c22a:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c22c:	6d79      	ldr	r1, [r7, #84]	; 0x54
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize,
                         sIdDevice.sMcuCtrlDevice.ui32FlashSize / 1024,
    c22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    am_util_stdio_printf("\tFlash size:  %7d (%d KB%s)\n",
    c230:	0a9a      	lsrs	r2, r3, #10
    c232:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c236:	4837      	ldr	r0, [pc, #220]	; (c314 <main+0x174>)
    c238:	f001 f884 	bl	d344 <am_util_stdio_printf>
                         &ui32StrBuf);

    ui32StrBuf = ( sIdDevice.sMcuCtrlDevice.ui32SRAMSize % 1024 ) ? '+' : 0;
    c23c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c23e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c242:	2b00      	cmp	r3, #0
    c244:	d001      	beq.n	c24a <main+0xaa>
    c246:	232b      	movs	r3, #43	; 0x2b
    c248:	e000      	b.n	c24c <main+0xac>
    c24a:	2300      	movs	r3, #0
    c24c:	637b      	str	r3, [r7, #52]	; 0x34
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c24e:	6db9      	ldr	r1, [r7, #88]	; 0x58
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize,
                         sIdDevice.sMcuCtrlDevice.ui32SRAMSize / 1024,
    c250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    am_util_stdio_printf("\tSRAM size:   %7d (%d KB%s)\n\n",
    c252:	0a9a      	lsrs	r2, r3, #10
    c254:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c258:	482f      	ldr	r0, [pc, #188]	; (c318 <main+0x178>)
    c25a:	f001 f873 	bl	d344 <am_util_stdio_printf>
                         &ui32StrBuf);
    //
    // Print the compiler version.
    //
    am_util_stdio_printf("App Compiler:    %s\n", COMPILER_VERSION);
    c25e:	492f      	ldr	r1, [pc, #188]	; (c31c <main+0x17c>)
    c260:	482f      	ldr	r0, [pc, #188]	; (c320 <main+0x180>)
    c262:	f001 f86f 	bl	d344 <am_util_stdio_printf>
#if defined(AM_PART_APOLLO3)  || defined(AM_PART_APOLLO3C)
    am_util_stdio_printf("HAL Compiler:    %s\n", g_ui8HALcompiler);
    c266:	492f      	ldr	r1, [pc, #188]	; (c324 <main+0x184>)
    c268:	482f      	ldr	r0, [pc, #188]	; (c328 <main+0x188>)
    c26a:	f001 f86b 	bl	d344 <am_util_stdio_printf>
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
                         g_ui32HALversion.s.Major,
    c26e:	4b2f      	ldr	r3, [pc, #188]	; (c32c <main+0x18c>)
    c270:	78db      	ldrb	r3, [r3, #3]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c272:	4619      	mov	r1, r3
                         g_ui32HALversion.s.Minor,
    c274:	4b2d      	ldr	r3, [pc, #180]	; (c32c <main+0x18c>)
    c276:	789b      	ldrb	r3, [r3, #2]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c278:	461a      	mov	r2, r3
                         g_ui32HALversion.s.Revision);
    c27a:	4b2c      	ldr	r3, [pc, #176]	; (c32c <main+0x18c>)
    c27c:	785b      	ldrb	r3, [r3, #1]
    am_util_stdio_printf("HAL SDK version: %d.%d.%d\n",
    c27e:	482c      	ldr	r0, [pc, #176]	; (c330 <main+0x190>)
    c280:	f001 f860 	bl	d344 <am_util_stdio_printf>
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
                         g_ui32HALversion.s.bAMREGS ? "AM_REG" : "CMSIS");
    c284:	4b29      	ldr	r3, [pc, #164]	; (c32c <main+0x18c>)
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    c28c:	b2db      	uxtb	r3, r3
    am_util_stdio_printf("HAL compiled with %s-style registers\n",
    c28e:	2b00      	cmp	r3, #0
    c290:	d001      	beq.n	c296 <main+0xf6>
    c292:	4b28      	ldr	r3, [pc, #160]	; (c334 <main+0x194>)
    c294:	e000      	b.n	c298 <main+0xf8>
    c296:	4b28      	ldr	r3, [pc, #160]	; (c338 <main+0x198>)
    c298:	4619      	mov	r1, r3
    c29a:	4828      	ldr	r0, [pc, #160]	; (c33c <main+0x19c>)
    c29c:	f001 f852 	bl	d344 <am_util_stdio_printf>

    am_hal_security_info_t secInfo;
    char sINFO[32];
    uint32_t ui32Status;
    ui32Status = am_hal_security_get_info(&secInfo);
    c2a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
    c2a4:	4618      	mov	r0, r3
    c2a6:	f001 ff4b 	bl	e140 <am_hal_security_get_info>
    c2aa:	67f8      	str	r0, [r7, #124]	; 0x7c
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
    c2ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d116      	bne.n	c2e0 <main+0x140>
    {
        if ( secInfo.bInfo0Valid )
    c2b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    c2b6:	2b00      	cmp	r3, #0
    c2b8:	d006      	beq.n	c2c8 <main+0x128>
        {
            am_util_stdio_sprintf(sINFO, "INFO0 valid, ver 0x%X", secInfo.info0Version);
    c2ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2bc:	1d3b      	adds	r3, r7, #4
    c2be:	4920      	ldr	r1, [pc, #128]	; (c340 <main+0x1a0>)
    c2c0:	4618      	mov	r0, r3
    c2c2:	f001 f829 	bl	d318 <am_util_stdio_sprintf>
    c2c6:	e004      	b.n	c2d2 <main+0x132>
        }
        else
        {
            am_util_stdio_sprintf(sINFO, "INFO0 invalid");
    c2c8:	1d3b      	adds	r3, r7, #4
    c2ca:	491e      	ldr	r1, [pc, #120]	; (c344 <main+0x1a4>)
    c2cc:	4618      	mov	r0, r3
    c2ce:	f001 f823 	bl	d318 <am_util_stdio_sprintf>
        }

        am_util_stdio_printf("SBL ver: 0x%x - 0x%x, %s\n",
    c2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    c2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c2d6:	1d3b      	adds	r3, r7, #4
    c2d8:	481b      	ldr	r0, [pc, #108]	; (c348 <main+0x1a8>)
    c2da:	f001 f833 	bl	d344 <am_util_stdio_printf>
    c2de:	e003      	b.n	c2e8 <main+0x148>
            secInfo.sblVersion, secInfo.sblVersionAddInfo, sINFO);
    }
    else
    {
        am_util_stdio_printf("am_hal_security_get_info failed 0x%X\n", ui32Status);
    c2e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
    c2e2:	481a      	ldr	r0, [pc, #104]	; (c34c <main+0x1ac>)
    c2e4:	f001 f82e 	bl	d344 <am_util_stdio_printf>

    //
    // We are done printing.
    // Disable debug printf messages on ITM.
    //
    am_bsp_debug_printf_disable();
    c2e8:	f001 f8b8 	bl	d45c <am_bsp_debug_printf_disable>
    while (1)
    {
        //
        // Go to Deep Sleep.
        //
        am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
    c2ec:	2001      	movs	r0, #1
    c2ee:	f001 ff85 	bl	e1fc <am_hal_sysctrl_sleep>
    c2f2:	e7fb      	b.n	c2ec <main+0x14c>
    c2f4:	0000e6b8 	.word	0x0000e6b8
    c2f8:	0000e468 	.word	0x0000e468
    c2fc:	0000e478 	.word	0x0000e478
    c300:	0000e48c 	.word	0x0000e48c
    c304:	0000e4a0 	.word	0x0000e4a0
    c308:	0000e4a4 	.word	0x0000e4a4
    c30c:	0000e4a8 	.word	0x0000e4a8
    c310:	0000e4b8 	.word	0x0000e4b8
    c314:	0000e524 	.word	0x0000e524
    c318:	0000e544 	.word	0x0000e544
    c31c:	0000e564 	.word	0x0000e564
    c320:	0000e578 	.word	0x0000e578
    c324:	0000e6bc 	.word	0x0000e6bc
    c328:	0000e590 	.word	0x0000e590
    c32c:	0000e704 	.word	0x0000e704
    c330:	0000e5a8 	.word	0x0000e5a8
    c334:	0000e5c4 	.word	0x0000e5c4
    c338:	0000e5cc 	.word	0x0000e5cc
    c33c:	0000e5d4 	.word	0x0000e5d4
    c340:	0000e5fc 	.word	0x0000e5fc
    c344:	0000e614 	.word	0x0000e614
    c348:	0000e624 	.word	0x0000e624
    c34c:	0000e640 	.word	0x0000e640

0000c350 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
    c350:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
    c352:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
    c356:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
    c358:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
    c35c:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
    c360:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
    c364:	f000 f80a 	bl	c37c <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
    c368:	bd01      	pop	{r0, pc}
}
    c36a:	bf00      	nop
    c36c:	4618      	mov	r0, r3

0000c36e <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
    c36e:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
    c370:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
    c372:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
    c374:	4770      	bx	lr
}
    c376:	bf00      	nop
    c378:	4618      	mov	r0, r3
	...

0000c37c <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
    c37c:	b580      	push	{r7, lr}
    c37e:	b096      	sub	sp, #88	; 0x58
    c380:	af00      	add	r7, sp, #0
    c382:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
    c384:	f107 030c 	add.w	r3, r7, #12
    c388:	2200      	movs	r2, #0
    c38a:	601a      	str	r2, [r3, #0]
    c38c:	605a      	str	r2, [r3, #4]
    c38e:	609a      	str	r2, [r3, #8]
    c390:	60da      	str	r2, [r3, #12]
    c392:	611a      	str	r2, [r3, #16]
    c394:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
    c396:	2300      	movs	r3, #0
    c398:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
    c39a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c39c:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
    c39e:	4b2e      	ldr	r3, [pc, #184]	; (c458 <am_util_faultisr_collect_data+0xdc>)
    c3a0:	681b      	ldr	r3, [r3, #0]
    c3a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
    c3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3a6:	b2db      	uxtb	r3, r3
    c3a8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
    c3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3ae:	0a1b      	lsrs	r3, r3, #8
    c3b0:	b2db      	uxtb	r3, r3
    c3b2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
    c3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c3b8:	0c1b      	lsrs	r3, r3, #16
    c3ba:	b29b      	uxth	r3, r3
    c3bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
    c3c0:	4b26      	ldr	r3, [pc, #152]	; (c45c <am_util_faultisr_collect_data+0xe0>)
    c3c2:	681b      	ldr	r3, [r3, #0]
    c3c4:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
    c3c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
    c3ca:	b2db      	uxtb	r3, r3
    c3cc:	f003 0302 	and.w	r3, r3, #2
    c3d0:	2b00      	cmp	r3, #0
    c3d2:	d005      	beq.n	c3e0 <am_util_faultisr_collect_data+0x64>
    c3d4:	6879      	ldr	r1, [r7, #4]
    c3d6:	2006      	movs	r0, #6
    c3d8:	f7ff ffc9 	bl	c36e <getStackedReg>
    c3dc:	4603      	mov	r3, r0
    c3de:	e001      	b.n	c3e4 <am_util_faultisr_collect_data+0x68>
    c3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c3e4:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
    c3e6:	6879      	ldr	r1, [r7, #4]
    c3e8:	2000      	movs	r0, #0
    c3ea:	f7ff ffc0 	bl	c36e <getStackedReg>
    c3ee:	4603      	mov	r3, r0
    c3f0:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
    c3f2:	6879      	ldr	r1, [r7, #4]
    c3f4:	2001      	movs	r0, #1
    c3f6:	f7ff ffba 	bl	c36e <getStackedReg>
    c3fa:	4603      	mov	r3, r0
    c3fc:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
    c3fe:	6879      	ldr	r1, [r7, #4]
    c400:	2002      	movs	r0, #2
    c402:	f7ff ffb4 	bl	c36e <getStackedReg>
    c406:	4603      	mov	r3, r0
    c408:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
    c40a:	6879      	ldr	r1, [r7, #4]
    c40c:	2003      	movs	r0, #3
    c40e:	f7ff ffae 	bl	c36e <getStackedReg>
    c412:	4603      	mov	r3, r0
    c414:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
    c416:	6879      	ldr	r1, [r7, #4]
    c418:	2004      	movs	r0, #4
    c41a:	f7ff ffa8 	bl	c36e <getStackedReg>
    c41e:	4603      	mov	r3, r0
    c420:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
    c422:	6879      	ldr	r1, [r7, #4]
    c424:	2005      	movs	r0, #5
    c426:	f7ff ffa2 	bl	c36e <getStackedReg>
    c42a:	4603      	mov	r3, r0
    c42c:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
    c42e:	6879      	ldr	r1, [r7, #4]
    c430:	2006      	movs	r0, #6
    c432:	f7ff ff9c 	bl	c36e <getStackedReg>
    c436:	4603      	mov	r3, r0
    c438:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
    c43a:	6879      	ldr	r1, [r7, #4]
    c43c:	2007      	movs	r0, #7
    c43e:	f7ff ff96 	bl	c36e <getStackedReg>
    c442:	4603      	mov	r3, r0
    c444:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
    c446:	f107 030c 	add.w	r3, r7, #12
    c44a:	4619      	mov	r1, r3
    c44c:	2002      	movs	r0, #2
    c44e:	f001 fd0f 	bl	de70 <am_hal_mcuctrl_info_get>
    }


#endif

    u32Mask = 0;
    c452:	2300      	movs	r3, #0
    c454:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
    c456:	e7fe      	b.n	c456 <am_util_faultisr_collect_data+0xda>
    c458:	e000ed28 	.word	0xe000ed28
    c45c:	e000ed38 	.word	0xe000ed38

0000c460 <am_util_id_device>:
//! device type.
//
//*****************************************************************************
uint32_t
am_util_id_device(am_util_id_t *psIDDevice)
{
    c460:	b580      	push	{r7, lr}
    c462:	b084      	sub	sp, #16
    c464:	af00      	add	r7, sp, #0
    c466:	6078      	str	r0, [r7, #4]

    //
    // Go get all the device (hardware) info from the HAL
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &psIDDevice->sMcuCtrlDevice);
    c468:	687b      	ldr	r3, [r7, #4]
    c46a:	4619      	mov	r1, r3
    c46c:	2001      	movs	r0, #1
    c46e:	f001 fcff 	bl	de70 <am_hal_mcuctrl_info_get>
#endif // AM_APOLLO3_MCUCTRL

    //
    // Device identification
    //
    ui32PN = psIDDevice->sMcuCtrlDevice.ui32ChipPN  &
    c472:	687b      	ldr	r3, [r7, #4]
    c474:	681b      	ldr	r3, [r3, #0]
    c476:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    c47a:	60fb      	str	r3, [r7, #12]
             AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_PN_M;

    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c47c:	687b      	ldr	r3, [r7, #4]
    c47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c480:	4a58      	ldr	r2, [pc, #352]	; (c5e4 <am_util_id_device+0x184>)
    c482:	4293      	cmp	r3, r2
    c484:	d10e      	bne.n	c4a4 <am_util_id_device+0x44>
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c486:	687b      	ldr	r3, [r7, #4]
    c488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if ( (psIDDevice->sMcuCtrlDevice.ui32JedecCID   == 0xB105100D)          &&
    c48a:	2b9b      	cmp	r3, #155	; 0x9b
    c48c:	d10a      	bne.n	c4a4 <am_util_id_device+0x44>
         ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0xF00) != 0xE00) )
    c48e:	687b      	ldr	r3, [r7, #4]
    c490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c492:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
         (psIDDevice->sMcuCtrlDevice.ui32JedecJEPID == 0x0000009B)          &&
    c496:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
    c49a:	d003      	beq.n	c4a4 <am_util_id_device+0x44>
    {
        //
        // It's Ambiq Micro, set up the VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c49c:	687b      	ldr	r3, [r7, #4]
    c49e:	4a52      	ldr	r2, [pc, #328]	; (c5e8 <am_util_id_device+0x188>)
    c4a0:	639a      	str	r2, [r3, #56]	; 0x38
    c4a2:	e002      	b.n	c4aa <am_util_id_device+0x4a>
    else
    {
        //
        // For now, set it as unknown vendor, but we may change it later.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameUnknown;
    c4a4:	687b      	ldr	r3, [r7, #4]
    c4a6:	4a51      	ldr	r2, [pc, #324]	; (c5ec <am_util_id_device+0x18c>)
    c4a8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( psIDDevice->sMcuCtrlDevice.ui32VendorID ==
    c4aa:	687b      	ldr	r3, [r7, #4]
    c4ac:	691b      	ldr	r3, [r3, #16]
    c4ae:	4a50      	ldr	r2, [pc, #320]	; (c5f0 <am_util_id_device+0x190>)
    c4b0:	4293      	cmp	r3, r2
    c4b2:	d102      	bne.n	c4ba <am_util_id_device+0x5a>
         (('A' << 24) | ('M' << 16) | ('B' << 8) | ('Q' << 0)) )
    {
        //
        // VENDORID is AMBQ, so set the string pointer.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c4b4:	687b      	ldr	r3, [r7, #4]
    c4b6:	4a4c      	ldr	r2, [pc, #304]	; (c5e8 <am_util_id_device+0x188>)
    c4b8:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0E0)        &&
    c4ba:	687b      	ldr	r3, [r7, #4]
    c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c4be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c4c2:	2be0      	cmp	r3, #224	; 0xe0
    c4c4:	d126      	bne.n	c514 <am_util_id_device+0xb4>
    c4c6:	68fb      	ldr	r3, [r7, #12]
    c4c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    c4cc:	d122      	bne.n	c514 <am_util_id_device+0xb4>
         ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO;
    c4ce:	687b      	ldr	r3, [r7, #4]
    c4d0:	2201      	movs	r2, #1
    c4d2:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo;
    c4d4:	687b      	ldr	r3, [r7, #4]
    c4d6:	4a47      	ldr	r2, [pc, #284]	; (c5f4 <am_util_id_device+0x194>)
    c4d8:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c4da:	687b      	ldr	r3, [r7, #4]
    c4dc:	68db      	ldr	r3, [r3, #12]
    c4de:	091b      	lsrs	r3, r3, #4
    c4e0:	f003 030f 	and.w	r3, r3, #15
    c4e4:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c4e6:	68bb      	ldr	r3, [r7, #8]
    c4e8:	b2db      	uxtb	r3, r3
    c4ea:	3340      	adds	r3, #64	; 0x40
    c4ec:	b2da      	uxtb	r2, r3
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c4f4:	687b      	ldr	r3, [r7, #4]
    c4f6:	68db      	ldr	r3, [r3, #12]
    c4f8:	f003 030f 	and.w	r3, r3, #15
    c4fc:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c4fe:	68bb      	ldr	r3, [r7, #8]
    c500:	b2db      	uxtb	r3, r3
    c502:	3330      	adds	r3, #48	; 0x30
    c504:	b2da      	uxtb	r2, r3
    c506:	687b      	ldr	r3, [r7, #4]
    c508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        //
        // Force the vendor name for Apollo, which did not support VENDORID.
        //
        psIDDevice->pui8VendorName = g_ui8VendorNameAmbq;
    c50c:	687b      	ldr	r3, [r7, #4]
    c50e:	4a36      	ldr	r2, [pc, #216]	; (c5e8 <am_util_id_device+0x188>)
    c510:	639a      	str	r2, [r3, #56]	; 0x38
    c512:	e061      	b.n	c5d8 <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0D0)   &&
    c514:	687b      	ldr	r3, [r7, #4]
    c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c51c:	2bd0      	cmp	r3, #208	; 0xd0
    c51e:	d123      	bne.n	c568 <am_util_id_device+0x108>
    c520:	68fb      	ldr	r3, [r7, #12]
    c522:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
    c526:	d11f      	bne.n	c568 <am_util_id_device+0x108>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO2 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO2;
    c528:	687b      	ldr	r3, [r7, #4]
    c52a:	2202      	movs	r2, #2
    c52c:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo2;
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	4a31      	ldr	r2, [pc, #196]	; (c5f8 <am_util_id_device+0x198>)
    c532:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 0=Rev0, 1=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c534:	687b      	ldr	r3, [r7, #4]
    c536:	68db      	ldr	r3, [r3, #12]
    c538:	091b      	lsrs	r3, r3, #4
    c53a:	f003 030f 	and.w	r3, r3, #15
    c53e:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c540:	68bb      	ldr	r3, [r7, #8]
    c542:	b2db      	uxtb	r3, r3
    c544:	3340      	adds	r3, #64	; 0x40
    c546:	b2da      	uxtb	r2, r3
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	68db      	ldr	r3, [r3, #12]
    c552:	f003 030f 	and.w	r3, r3, #15
    c556:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux);
    c558:	68bb      	ldr	r3, [r7, #8]
    c55a:	b2db      	uxtb	r3, r3
    c55c:	3330      	adds	r3, #48	; 0x30
    c55e:	b2da      	uxtb	r2, r3
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c566:	e037      	b.n	c5d8 <am_util_id_device+0x178>
    }
    else if ( ((psIDDevice->sMcuCtrlDevice.ui32JedecPN & 0x0F0) == 0x0C0)   &&
    c568:	687b      	ldr	r3, [r7, #4]
    c56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c56c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    c570:	2bc0      	cmp	r3, #192	; 0xc0
    c572:	d123      	bne.n	c5bc <am_util_id_device+0x15c>
    c574:	68fb      	ldr	r3, [r7, #12]
    c576:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    c57a:	d11f      	bne.n	c5bc <am_util_id_device+0x15c>
              ( ui32PN == AM_UTIL_MCUCTRL_CHIP_INFO_PARTNUM_APOLLO3 ) )
    {
        psIDDevice->ui32Device = AM_UTIL_ID_APOLLO3;
    c57c:	687b      	ldr	r3, [r7, #4]
    c57e:	2203      	movs	r2, #3
    c580:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_DeviceNameApollo3;
    c582:	687b      	ldr	r3, [r7, #4]
    c584:	4a1d      	ldr	r2, [pc, #116]	; (c5fc <am_util_id_device+0x19c>)
    c586:	63da      	str	r2, [r3, #60]	; 0x3c

        //
        // ui32ChipRev[7:4]: 0=n/a, 1=A, 2=B, ...
        // ui32ChipRev[3:0]: 1=Rev0, 2=Rev1, ...
        //
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0xF0) >> 4);
    c588:	687b      	ldr	r3, [r7, #4]
    c58a:	68db      	ldr	r3, [r3, #12]
    c58c:	091b      	lsrs	r3, r3, #4
    c58e:	f003 030f 	and.w	r3, r3, #15
    c592:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMaj  = (uint8_t)('A' - 1 + ux);
    c594:	68bb      	ldr	r3, [r7, #8]
    c596:	b2db      	uxtb	r3, r3
    c598:	3340      	adds	r3, #64	; 0x40
    c59a:	b2da      	uxtb	r2, r3
    c59c:	687b      	ldr	r3, [r7, #4]
    c59e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ux = ((psIDDevice->sMcuCtrlDevice.ui32ChipRev & 0x0F) >> 0);
    c5a2:	687b      	ldr	r3, [r7, #4]
    c5a4:	68db      	ldr	r3, [r3, #12]
    c5a6:	f003 030f 	and.w	r3, r3, #15
    c5aa:	60bb      	str	r3, [r7, #8]
        psIDDevice->ui8ChipRevMin = (uint8_t)('0' + ux - 1);
    c5ac:	68bb      	ldr	r3, [r7, #8]
    c5ae:	b2db      	uxtb	r3, r3
    c5b0:	332f      	adds	r3, #47	; 0x2f
    c5b2:	b2da      	uxtb	r2, r3
    c5b4:	687b      	ldr	r3, [r7, #4]
    c5b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    c5ba:	e00d      	b.n	c5d8 <am_util_id_device+0x178>
    }
    else
    {
        psIDDevice->ui32Device = AM_UTIL_ID_UNKNOWN;
    c5bc:	687b      	ldr	r3, [r7, #4]
    c5be:	2200      	movs	r2, #0
    c5c0:	635a      	str	r2, [r3, #52]	; 0x34
        psIDDevice->pui8DeviceName = g_ui8DeviceNameUnknown;
    c5c2:	687b      	ldr	r3, [r7, #4]
    c5c4:	4a0e      	ldr	r2, [pc, #56]	; (c600 <am_util_id_device+0x1a0>)
    c5c6:	63da      	str	r2, [r3, #60]	; 0x3c
        psIDDevice->ui8ChipRevMaj = (uint8_t)'?';
    c5c8:	687b      	ldr	r3, [r7, #4]
    c5ca:	223f      	movs	r2, #63	; 0x3f
    c5cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        psIDDevice->ui8ChipRevMin = (uint8_t)' ';
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	2220      	movs	r2, #32
    c5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }

    return psIDDevice->ui32Device;
    c5d8:	687b      	ldr	r3, [r7, #4]
    c5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
    c5dc:	4618      	mov	r0, r3
    c5de:	3710      	adds	r7, #16
    c5e0:	46bd      	mov	sp, r7
    c5e2:	bd80      	pop	{r7, pc}
    c5e4:	b105100d 	.word	0xb105100d
    c5e8:	0000e694 	.word	0x0000e694
    c5ec:	0000e69c 	.word	0x0000e69c
    c5f0:	414d4251 	.word	0x414d4251
    c5f4:	0000e67c 	.word	0x0000e67c
    c5f8:	0000e684 	.word	0x0000e684
    c5fc:	0000e68c 	.word	0x0000e68c
    c600:	0000e6a4 	.word	0x0000e6a4

0000c604 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
    c604:	b480      	push	{r7}
    c606:	b083      	sub	sp, #12
    c608:	af00      	add	r7, sp, #0
    c60a:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
    c60c:	4a04      	ldr	r2, [pc, #16]	; (c620 <am_util_stdio_printf_init+0x1c>)
    c60e:	687b      	ldr	r3, [r7, #4]
    c610:	6013      	str	r3, [r2, #0]
}
    c612:	bf00      	nop
    c614:	370c      	adds	r7, #12
    c616:	46bd      	mov	sp, r7
    c618:	f85d 7b04 	ldr.w	r7, [sp], #4
    c61c:	4770      	bx	lr
    c61e:	bf00      	nop
    c620:	10001150 	.word	0x10001150

0000c624 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
    c624:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c628:	b096      	sub	sp, #88	; 0x58
    c62a:	af00      	add	r7, sp, #0
    c62c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
    c630:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c634:	0025      	movs	r5, r4
    c636:	2600      	movs	r6, #0
    c638:	ea55 0306 	orrs.w	r3, r5, r6
    c63c:	f000 80a0 	beq.w	c780 <divu64_10+0x15c>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
    c640:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c644:	0862      	lsrs	r2, r4, #1
    c646:	ea4f 0133 	mov.w	r1, r3, rrx
    c64a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c64e:	ea4f 0893 	mov.w	r8, r3, lsr #2
    c652:	ea48 7884 	orr.w	r8, r8, r4, lsl #30
    c656:	ea4f 0994 	mov.w	r9, r4, lsr #2
    c65a:	eb11 0308 	adds.w	r3, r1, r8
    c65e:	eb42 0409 	adc.w	r4, r2, r9
    c662:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 4);
    c666:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c66a:	ea4f 1a13 	mov.w	sl, r3, lsr #4
    c66e:	ea4a 7a04 	orr.w	sl, sl, r4, lsl #28
    c672:	ea4f 1b14 	mov.w	fp, r4, lsr #4
    c676:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c67a:	eb13 030a 	adds.w	r3, r3, sl
    c67e:	eb44 040b 	adc.w	r4, r4, fp
    c682:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 8);
    c686:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c68a:	0a1a      	lsrs	r2, r3, #8
    c68c:	62ba      	str	r2, [r7, #40]	; 0x28
    c68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c690:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    c694:	62ba      	str	r2, [r7, #40]	; 0x28
    c696:	0a23      	lsrs	r3, r4, #8
    c698:	62fb      	str	r3, [r7, #44]	; 0x2c
    c69a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c69e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    c6a2:	18c9      	adds	r1, r1, r3
    c6a4:	eb42 0204 	adc.w	r2, r2, r4
    c6a8:	460b      	mov	r3, r1
    c6aa:	4614      	mov	r4, r2
    c6ac:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 16);
    c6b0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6b4:	0c1a      	lsrs	r2, r3, #16
    c6b6:	623a      	str	r2, [r7, #32]
    c6b8:	6a3a      	ldr	r2, [r7, #32]
    c6ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c6be:	623a      	str	r2, [r7, #32]
    c6c0:	0c23      	lsrs	r3, r4, #16
    c6c2:	627b      	str	r3, [r7, #36]	; 0x24
    c6c4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    c6cc:	18c9      	adds	r1, r1, r3
    c6ce:	eb42 0204 	adc.w	r2, r2, r4
    c6d2:	460b      	mov	r3, r1
    c6d4:	4614      	mov	r4, r2
    c6d6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 += (q64 >> 32);
    c6da:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6de:	0023      	movs	r3, r4
    c6e0:	603b      	str	r3, [r7, #0]
    c6e2:	2300      	movs	r3, #0
    c6e4:	607b      	str	r3, [r7, #4]
    c6e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c6ea:	e9d7 1200 	ldrd	r1, r2, [r7]
    c6ee:	18c9      	adds	r1, r1, r3
    c6f0:	eb42 0204 	adc.w	r2, r2, r4
    c6f4:	460b      	mov	r3, r1
    c6f6:	4614      	mov	r4, r2
    c6f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        q64 >>= 3;
    c6fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c700:	08da      	lsrs	r2, r3, #3
    c702:	613a      	str	r2, [r7, #16]
    c704:	693a      	ldr	r2, [r7, #16]
    c706:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
    c70a:	613a      	str	r2, [r7, #16]
    c70c:	08e3      	lsrs	r3, r4, #3
    c70e:	617b      	str	r3, [r7, #20]
    c710:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    c714:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        r64 = ui64Val - q64*10;
    c718:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
    c71c:	460b      	mov	r3, r1
    c71e:	4614      	mov	r4, r2
    c720:	00a0      	lsls	r0, r4, #2
    c722:	60f8      	str	r0, [r7, #12]
    c724:	68f8      	ldr	r0, [r7, #12]
    c726:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c72a:	60f8      	str	r0, [r7, #12]
    c72c:	009b      	lsls	r3, r3, #2
    c72e:	60bb      	str	r3, [r7, #8]
    c730:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c734:	185b      	adds	r3, r3, r1
    c736:	eb44 0402 	adc.w	r4, r4, r2
    c73a:	18db      	adds	r3, r3, r3
    c73c:	eb44 0404 	adc.w	r4, r4, r4
    c740:	4619      	mov	r1, r3
    c742:	4622      	mov	r2, r4
    c744:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c748:	1a5b      	subs	r3, r3, r1
    c74a:	eb64 0402 	sbc.w	r4, r4, r2
    c74e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        return q64 + ((r64 + 6) >> 4);
    c752:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    c756:	3306      	adds	r3, #6
    c758:	f144 0400 	adc.w	r4, r4, #0
    c75c:	091a      	lsrs	r2, r3, #4
    c75e:	61ba      	str	r2, [r7, #24]
    c760:	69ba      	ldr	r2, [r7, #24]
    c762:	ea42 7204 	orr.w	r2, r2, r4, lsl #28
    c766:	61ba      	str	r2, [r7, #24]
    c768:	0923      	lsrs	r3, r4, #4
    c76a:	61fb      	str	r3, [r7, #28]
    c76c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
    c770:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    c774:	18c9      	adds	r1, r1, r3
    c776:	eb42 0204 	adc.w	r2, r2, r4
    c77a:	460b      	mov	r3, r1
    c77c:	4614      	mov	r4, r2
    c77e:	e029      	b.n	c7d4 <divu64_10+0x1b0>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
    c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c782:	647b      	str	r3, [r7, #68]	; 0x44
        q32 = (ui32Val>>1) + (ui32Val>>2);
    c784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c786:	085a      	lsrs	r2, r3, #1
    c788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c78a:	089b      	lsrs	r3, r3, #2
    c78c:	4413      	add	r3, r2
    c78e:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 4);
    c790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c792:	091b      	lsrs	r3, r3, #4
    c794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c796:	4413      	add	r3, r2
    c798:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 8);
    c79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c79c:	0a1b      	lsrs	r3, r3, #8
    c79e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c7a0:	4413      	add	r3, r2
    c7a2:	643b      	str	r3, [r7, #64]	; 0x40
        q32 += (q32 >> 16);
    c7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7a6:	0c1b      	lsrs	r3, r3, #16
    c7a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c7aa:	4413      	add	r3, r2
    c7ac:	643b      	str	r3, [r7, #64]	; 0x40
        q32 >>= 3;
    c7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7b0:	08db      	lsrs	r3, r3, #3
    c7b2:	643b      	str	r3, [r7, #64]	; 0x40
        r32 = ui32Val - q32*10;
    c7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    c7b6:	4613      	mov	r3, r2
    c7b8:	009b      	lsls	r3, r3, #2
    c7ba:	4413      	add	r3, r2
    c7bc:	005b      	lsls	r3, r3, #1
    c7be:	461a      	mov	r2, r3
    c7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c7c2:	1a9b      	subs	r3, r3, r2
    c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    c7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7c8:	3306      	adds	r3, #6
    c7ca:	091a      	lsrs	r2, r3, #4
    c7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7ce:	4413      	add	r3, r2
    c7d0:	f04f 0400 	mov.w	r4, #0
    }
}
    c7d4:	4618      	mov	r0, r3
    c7d6:	4621      	mov	r1, r4
    c7d8:	3758      	adds	r7, #88	; 0x58
    c7da:	46bd      	mov	sp, r7
    c7dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    c7e0:	4770      	bx	lr

0000c7e2 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
    c7e2:	b590      	push	{r4, r7, lr}
    c7e4:	b085      	sub	sp, #20
    c7e6:	af00      	add	r7, sp, #0
    c7e8:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
    c7ec:	683a      	ldr	r2, [r7, #0]
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	4313      	orrs	r3, r2
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	bf0c      	ite	eq
    c7f6:	2301      	moveq	r3, #1
    c7f8:	2300      	movne	r3, #0
    c7fa:	b2db      	uxtb	r3, r3
    c7fc:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
    c7fe:	e008      	b.n	c812 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
    c800:	e9d7 0100 	ldrd	r0, r1, [r7]
    c804:	f7ff ff0e 	bl	c624 <divu64_10>
    c808:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
    c80c:	68fb      	ldr	r3, [r7, #12]
    c80e:	3301      	adds	r3, #1
    c810:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
    c812:	e9d7 3400 	ldrd	r3, r4, [r7]
    c816:	4323      	orrs	r3, r4
    c818:	d1f2      	bne.n	c800 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
    c81a:	68fb      	ldr	r3, [r7, #12]
}
    c81c:	4618      	mov	r0, r3
    c81e:	3714      	adds	r7, #20
    c820:	46bd      	mov	sp, r7
    c822:	bd90      	pop	{r4, r7, pc}

0000c824 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
    c824:	b590      	push	{r4, r7, lr}
    c826:	b083      	sub	sp, #12
    c828:	af00      	add	r7, sp, #0
    c82a:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
    c82e:	e9d7 3400 	ldrd	r3, r4, [r7]
    c832:	2b00      	cmp	r3, #0
    c834:	f174 0300 	sbcs.w	r3, r4, #0
    c838:	da06      	bge.n	c848 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
    c83a:	e9d7 3400 	ldrd	r3, r4, [r7]
    c83e:	425b      	negs	r3, r3
    c840:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    c844:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
    c848:	e9d7 3400 	ldrd	r3, r4, [r7]
    c84c:	4618      	mov	r0, r3
    c84e:	4621      	mov	r1, r4
    c850:	f7ff ffc7 	bl	c7e2 <ndigits_in_u64>
    c854:	4603      	mov	r3, r0
}
    c856:	4618      	mov	r0, r3
    c858:	370c      	adds	r7, #12
    c85a:	46bd      	mov	sp, r7
    c85c:	bd90      	pop	{r4, r7, pc}

0000c85e <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
    c85e:	b490      	push	{r4, r7}
    c860:	b084      	sub	sp, #16
    c862:	af00      	add	r7, sp, #0
    c864:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
    c868:	6839      	ldr	r1, [r7, #0]
    c86a:	687a      	ldr	r2, [r7, #4]
    c86c:	430a      	orrs	r2, r1
    c86e:	2a00      	cmp	r2, #0
    c870:	bf0c      	ite	eq
    c872:	2201      	moveq	r2, #1
    c874:	2200      	movne	r2, #0
    c876:	b2d2      	uxtb	r2, r2
    c878:	60fa      	str	r2, [r7, #12]

    while ( ui64Val )
    c87a:	e00a      	b.n	c892 <ndigits_in_hex+0x34>
    {
        ui64Val >>= 4;
    c87c:	e9d7 1200 	ldrd	r1, r2, [r7]
    c880:	090b      	lsrs	r3, r1, #4
    c882:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    c886:	0914      	lsrs	r4, r2, #4
    c888:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
    c88c:	68fa      	ldr	r2, [r7, #12]
    c88e:	3201      	adds	r2, #1
    c890:	60fa      	str	r2, [r7, #12]
    while ( ui64Val )
    c892:	e9d7 1200 	ldrd	r1, r2, [r7]
    c896:	430a      	orrs	r2, r1
    c898:	d1f0      	bne.n	c87c <ndigits_in_hex+0x1e>
    }

    return iDigits;
    c89a:	68fb      	ldr	r3, [r7, #12]
}
    c89c:	4618      	mov	r0, r3
    c89e:	3710      	adds	r7, #16
    c8a0:	46bd      	mov	sp, r7
    c8a2:	bc90      	pop	{r4, r7}
    c8a4:	4770      	bx	lr

0000c8a6 <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
    c8a6:	b480      	push	{r7}
    c8a8:	b087      	sub	sp, #28
    c8aa:	af00      	add	r7, sp, #0
    c8ac:	6078      	str	r0, [r7, #4]
    c8ae:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
    c8b0:	2300      	movs	r3, #0
    c8b2:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
    c8b4:	2300      	movs	r3, #0
    c8b6:	613b      	str	r3, [r7, #16]
    c8b8:	2300      	movs	r3, #0
    c8ba:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	781b      	ldrb	r3, [r3, #0]
    c8c0:	2b2d      	cmp	r3, #45	; 0x2d
    c8c2:	d11b      	bne.n	c8fc <decstr_to_int+0x56>
    {
        bNeg = true;
    c8c4:	2301      	movs	r3, #1
    c8c6:	75fb      	strb	r3, [r7, #23]
        pcStr++;
    c8c8:	687b      	ldr	r3, [r7, #4]
    c8ca:	3301      	adds	r3, #1
    c8cc:	607b      	str	r3, [r7, #4]
        uCnt++;
    c8ce:	68fb      	ldr	r3, [r7, #12]
    c8d0:	3301      	adds	r3, #1
    c8d2:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8d4:	e012      	b.n	c8fc <decstr_to_int+0x56>
    {
        ++uCnt;
    c8d6:	68fb      	ldr	r3, [r7, #12]
    c8d8:	3301      	adds	r3, #1
    c8da:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
    c8dc:	693a      	ldr	r2, [r7, #16]
    c8de:	4613      	mov	r3, r2
    c8e0:	009b      	lsls	r3, r3, #2
    c8e2:	4413      	add	r3, r2
    c8e4:	005b      	lsls	r3, r3, #1
    c8e6:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	461a      	mov	r2, r3
    c8ee:	693b      	ldr	r3, [r7, #16]
    c8f0:	4413      	add	r3, r2
    c8f2:	3b30      	subs	r3, #48	; 0x30
    c8f4:	613b      	str	r3, [r7, #16]
        pcStr++;
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	3301      	adds	r3, #1
    c8fa:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	781b      	ldrb	r3, [r3, #0]
    c900:	2b2f      	cmp	r3, #47	; 0x2f
    c902:	d903      	bls.n	c90c <decstr_to_int+0x66>
    c904:	687b      	ldr	r3, [r7, #4]
    c906:	781b      	ldrb	r3, [r3, #0]
    c908:	2b39      	cmp	r3, #57	; 0x39
    c90a:	d9e4      	bls.n	c8d6 <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
    c90c:	683b      	ldr	r3, [r7, #0]
    c90e:	2b00      	cmp	r3, #0
    c910:	d002      	beq.n	c918 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
    c912:	683b      	ldr	r3, [r7, #0]
    c914:	68fa      	ldr	r2, [r7, #12]
    c916:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
    c918:	7dfb      	ldrb	r3, [r7, #23]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d002      	beq.n	c924 <decstr_to_int+0x7e>
    c91e:	693b      	ldr	r3, [r7, #16]
    c920:	425b      	negs	r3, r3
    c922:	e000      	b.n	c926 <decstr_to_int+0x80>
    c924:	693b      	ldr	r3, [r7, #16]
}
    c926:	4618      	mov	r0, r3
    c928:	371c      	adds	r7, #28
    c92a:	46bd      	mov	sp, r7
    c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c930:	4770      	bx	lr

0000c932 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
    c932:	b590      	push	{r4, r7, lr}
    c934:	b091      	sub	sp, #68	; 0x44
    c936:	af00      	add	r7, sp, #0
    c938:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c93c:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
    c93e:	2300      	movs	r3, #0
    c940:	63fb      	str	r3, [r7, #60]	; 0x3c
    c942:	2300      	movs	r3, #0
    c944:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
    c946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    c94a:	f7ff fe6b 	bl	c624 <divu64_10>
    c94e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
    c952:	68b9      	ldr	r1, [r7, #8]
    c954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c956:	4613      	mov	r3, r2
    c958:	009b      	lsls	r3, r3, #2
    c95a:	4413      	add	r3, r2
    c95c:	005b      	lsls	r3, r3, #1
    c95e:	1acb      	subs	r3, r1, r3
    c960:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
    c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c964:	1c5a      	adds	r2, r3, #1
    c966:	63fa      	str	r2, [r7, #60]	; 0x3c
    c968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c96a:	b2d2      	uxtb	r2, r2
    c96c:	3230      	adds	r2, #48	; 0x30
    c96e:	b2d2      	uxtb	r2, r2
    c970:	f107 0140 	add.w	r1, r7, #64	; 0x40
    c974:	440b      	add	r3, r1
    c976:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
    c97a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    c97e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
    c982:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    c986:	4323      	orrs	r3, r4
    c988:	d1dd      	bne.n	c946 <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    c98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c98c:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
    c98e:	687b      	ldr	r3, [r7, #4]
    c990:	2b00      	cmp	r3, #0
    c992:	d011      	beq.n	c9b8 <uint64_to_str+0x86>
    {
        while ( ix-- )
    c994:	e008      	b.n	c9a8 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
    c996:	687b      	ldr	r3, [r7, #4]
    c998:	1c5a      	adds	r2, r3, #1
    c99a:	607a      	str	r2, [r7, #4]
    c99c:	f107 0110 	add.w	r1, r7, #16
    c9a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c9a2:	440a      	add	r2, r1
    c9a4:	7812      	ldrb	r2, [r2, #0]
    c9a6:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
    c9a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c9aa:	1e5a      	subs	r2, r3, #1
    c9ac:	63fa      	str	r2, [r7, #60]	; 0x3c
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d1f1      	bne.n	c996 <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
    c9b2:	687b      	ldr	r3, [r7, #4]
    c9b4:	2200      	movs	r2, #0
    c9b6:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    c9ba:	4618      	mov	r0, r3
    c9bc:	3744      	adds	r7, #68	; 0x44
    c9be:	46bd      	mov	sp, r7
    c9c0:	bd90      	pop	{r4, r7, pc}

0000c9c2 <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
    c9c2:	b4b0      	push	{r4, r5, r7}
    c9c4:	b08d      	sub	sp, #52	; 0x34
    c9c6:	af00      	add	r7, sp, #0
    c9c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    c9cc:	607a      	str	r2, [r7, #4]
    c9ce:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
    c9d0:	2300      	movs	r3, #0
    c9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
    c9d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    c9d8:	4313      	orrs	r3, r2
    c9da:	d131      	bne.n	ca40 <uint64_to_hexstr+0x7e>
    {
        tbuf[ix++] = '0';   // Print a '0'
    c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c9de:	1c5a      	adds	r2, r3, #1
    c9e0:	62fa      	str	r2, [r7, #44]	; 0x2c
    c9e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c9e6:	4413      	add	r3, r2
    c9e8:	2230      	movs	r2, #48	; 0x30
    c9ea:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
    c9ee:	e027      	b.n	ca40 <uint64_to_hexstr+0x7e>
    {
        cCh = ui64Val & 0xf;
    c9f0:	7a3b      	ldrb	r3, [r7, #8]
    c9f2:	f003 030f 	and.w	r3, r3, #15
    c9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
    c9fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    c9fe:	2b09      	cmp	r3, #9
    ca00:	d90a      	bls.n	ca18 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
    ca02:	78fb      	ldrb	r3, [r7, #3]
    ca04:	2b00      	cmp	r3, #0
    ca06:	d001      	beq.n	ca0c <uint64_to_hexstr+0x4a>
    ca08:	2227      	movs	r2, #39	; 0x27
    ca0a:	e000      	b.n	ca0e <uint64_to_hexstr+0x4c>
    ca0c:	2207      	movs	r2, #7
    ca0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    ca12:	4413      	add	r3, r2
    ca14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
    ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca1a:	1c5a      	adds	r2, r3, #1
    ca1c:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca1e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    ca22:	3230      	adds	r2, #48	; 0x30
    ca24:	b2d2      	uxtb	r2, r2
    ca26:	f107 0130 	add.w	r1, r7, #48	; 0x30
    ca2a:	440b      	add	r3, r1
    ca2c:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
    ca30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca34:	0914      	lsrs	r4, r2, #4
    ca36:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
    ca3a:	091d      	lsrs	r5, r3, #4
    ca3c:	e9c7 4502 	strd	r4, r5, [r7, #8]
    while ( ui64Val )
    ca40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    ca44:	4313      	orrs	r3, r2
    ca46:	d1d3      	bne.n	c9f0 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
    ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca4a:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
    ca4c:	687b      	ldr	r3, [r7, #4]
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d011      	beq.n	ca76 <uint64_to_hexstr+0xb4>
    {
        while (ix--)
    ca52:	e008      	b.n	ca66 <uint64_to_hexstr+0xa4>
        {
            *pcBuf++ = tbuf[ix];
    ca54:	687b      	ldr	r3, [r7, #4]
    ca56:	1c5a      	adds	r2, r3, #1
    ca58:	607a      	str	r2, [r7, #4]
    ca5a:	f107 0110 	add.w	r1, r7, #16
    ca5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ca60:	440a      	add	r2, r1
    ca62:	7812      	ldrb	r2, [r2, #0]
    ca64:	701a      	strb	r2, [r3, #0]
        while (ix--)
    ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ca68:	1e5a      	subs	r2, r3, #1
    ca6a:	62fa      	str	r2, [r7, #44]	; 0x2c
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d1f1      	bne.n	ca54 <uint64_to_hexstr+0x92>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	2200      	movs	r2, #0
    ca74:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
    ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    ca78:	4618      	mov	r0, r3
    ca7a:	3734      	adds	r7, #52	; 0x34
    ca7c:	46bd      	mov	sp, r7
    ca7e:	bcb0      	pop	{r4, r5, r7}
    ca80:	4770      	bx	lr

0000ca82 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
    ca82:	b480      	push	{r7}
    ca84:	b085      	sub	sp, #20
    ca86:	af00      	add	r7, sp, #0
    ca88:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
    ca8a:	2300      	movs	r3, #0
    ca8c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d104      	bne.n	ca9e <simple_strlen+0x1c>
    {
        return ui32RetVal;
    ca94:	68fb      	ldr	r3, [r7, #12]
    ca96:	e009      	b.n	caac <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
    ca98:	68fb      	ldr	r3, [r7, #12]
    ca9a:	3301      	adds	r3, #1
    ca9c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
    ca9e:	687b      	ldr	r3, [r7, #4]
    caa0:	1c5a      	adds	r2, r3, #1
    caa2:	607a      	str	r2, [r7, #4]
    caa4:	781b      	ldrb	r3, [r3, #0]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d1f6      	bne.n	ca98 <simple_strlen+0x16>
    }
    return ui32RetVal;
    caaa:	68fb      	ldr	r3, [r7, #12]
}
    caac:	4618      	mov	r0, r3
    caae:	3714      	adds	r7, #20
    cab0:	46bd      	mov	sp, r7
    cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    cab6:	4770      	bx	lr

0000cab8 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
    cab8:	b480      	push	{r7}
    caba:	b087      	sub	sp, #28
    cabc:	af00      	add	r7, sp, #0
    cabe:	60f8      	str	r0, [r7, #12]
    cac0:	460b      	mov	r3, r1
    cac2:	607a      	str	r2, [r7, #4]
    cac4:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
    cac6:	2300      	movs	r3, #0
    cac8:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
    caca:	687b      	ldr	r3, [r7, #4]
    cacc:	2b00      	cmp	r3, #0
    cace:	dc0c      	bgt.n	caea <padbuffer+0x32>
    {
        return i32Cnt;
    cad0:	697b      	ldr	r3, [r7, #20]
    cad2:	e010      	b.n	caf6 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
    cad4:	68fb      	ldr	r3, [r7, #12]
    cad6:	2b00      	cmp	r3, #0
    cad8:	d004      	beq.n	cae4 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
    cada:	68fb      	ldr	r3, [r7, #12]
    cadc:	1c5a      	adds	r2, r3, #1
    cade:	60fa      	str	r2, [r7, #12]
    cae0:	7afa      	ldrb	r2, [r7, #11]
    cae2:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
    cae4:	697b      	ldr	r3, [r7, #20]
    cae6:	3301      	adds	r3, #1
    cae8:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
    caea:	687b      	ldr	r3, [r7, #4]
    caec:	1e5a      	subs	r2, r3, #1
    caee:	607a      	str	r2, [r7, #4]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d1ef      	bne.n	cad4 <padbuffer+0x1c>
    }

    return i32Cnt;
    caf4:	697b      	ldr	r3, [r7, #20]
}
    caf6:	4618      	mov	r0, r3
    caf8:	371c      	adds	r7, #28
    cafa:	46bd      	mov	sp, r7
    cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb00:	4770      	bx	lr
	...

0000cb04 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
    cb04:	b590      	push	{r4, r7, lr}
    cb06:	b08f      	sub	sp, #60	; 0x3c
    cb08:	af00      	add	r7, sp, #0
    cb0a:	ed87 0a03 	vstr	s0, [r7, #12]
    cb0e:	60b8      	str	r0, [r7, #8]
    cb10:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
    cb12:	68bb      	ldr	r3, [r7, #8]
    cb14:	681b      	ldr	r3, [r3, #0]
    cb16:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
    cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cb1a:	2b03      	cmp	r3, #3
    cb1c:	dc02      	bgt.n	cb24 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
    cb1e:	f06f 0302 	mvn.w	r3, #2
    cb22:	e0e7      	b.n	ccf4 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
    cb24:	edd7 7a03 	vldr	s15, [r7, #12]
    cb28:	eef5 7a40 	vcmp.f32	s15, #0.0
    cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb30:	d104      	bne.n	cb3c <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
    cb32:	68bb      	ldr	r3, [r7, #8]
    cb34:	4a71      	ldr	r2, [pc, #452]	; (ccfc <ftoa+0x1f8>)
    cb36:	601a      	str	r2, [r3, #0]
        return 3;
    cb38:	2303      	movs	r3, #3
    cb3a:	e0db      	b.n	ccf4 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
    cb3c:	68bb      	ldr	r3, [r7, #8]
    cb3e:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
    cb40:	68fb      	ldr	r3, [r7, #12]
    cb42:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
    cb44:	693b      	ldr	r3, [r7, #16]
    cb46:	15db      	asrs	r3, r3, #23
    cb48:	b2db      	uxtb	r3, r3
    cb4a:	3b7f      	subs	r3, #127	; 0x7f
    cb4c:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
    cb4e:	693b      	ldr	r3, [r7, #16]
    cb50:	f3c3 0316 	ubfx	r3, r3, #0, #23
    cb54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    cb58:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
    cb5a:	2300      	movs	r3, #0
    cb5c:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
    cb5e:	2300      	movs	r3, #0
    cb60:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
    cb62:	69fb      	ldr	r3, [r7, #28]
    cb64:	2b1e      	cmp	r3, #30
    cb66:	dd02      	ble.n	cb6e <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
    cb68:	f06f 0301 	mvn.w	r3, #1
    cb6c:	e0c2      	b.n	ccf4 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
    cb6e:	69fb      	ldr	r3, [r7, #28]
    cb70:	f113 0f17 	cmn.w	r3, #23
    cb74:	da02      	bge.n	cb7c <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
    cb76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cb7a:	e0bb      	b.n	ccf4 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
    cb7c:	69fb      	ldr	r3, [r7, #28]
    cb7e:	2b16      	cmp	r3, #22
    cb80:	dd06      	ble.n	cb90 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
    cb82:	69fb      	ldr	r3, [r7, #28]
    cb84:	3b17      	subs	r3, #23
    cb86:	69ba      	ldr	r2, [r7, #24]
    cb88:	fa02 f303 	lsl.w	r3, r2, r3
    cb8c:	637b      	str	r3, [r7, #52]	; 0x34
    cb8e:	e01a      	b.n	cbc6 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
    cb90:	69fb      	ldr	r3, [r7, #28]
    cb92:	2b00      	cmp	r3, #0
    cb94:	db0f      	blt.n	cbb6 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
    cb96:	69fb      	ldr	r3, [r7, #28]
    cb98:	f1c3 0317 	rsb	r3, r3, #23
    cb9c:	69ba      	ldr	r2, [r7, #24]
    cb9e:	fa42 f303 	asr.w	r3, r2, r3
    cba2:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
    cba4:	69fb      	ldr	r3, [r7, #28]
    cba6:	3301      	adds	r3, #1
    cba8:	69ba      	ldr	r2, [r7, #24]
    cbaa:	fa02 f303 	lsl.w	r3, r2, r3
    cbae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cbb2:	633b      	str	r3, [r7, #48]	; 0x30
    cbb4:	e007      	b.n	cbc6 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
    cbb6:	69bb      	ldr	r3, [r7, #24]
    cbb8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    cbbc:	69fb      	ldr	r3, [r7, #28]
    cbbe:	43db      	mvns	r3, r3
    cbc0:	fa42 f303 	asr.w	r3, r2, r3
    cbc4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
    cbc6:	693b      	ldr	r3, [r7, #16]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	da04      	bge.n	cbd6 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
    cbcc:	68bb      	ldr	r3, [r7, #8]
    cbce:	1c5a      	adds	r2, r3, #1
    cbd0:	60ba      	str	r2, [r7, #8]
    cbd2:	222d      	movs	r2, #45	; 0x2d
    cbd4:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
    cbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d105      	bne.n	cbe8 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
    cbdc:	68bb      	ldr	r3, [r7, #8]
    cbde:	1c5a      	adds	r2, r3, #1
    cbe0:	60ba      	str	r2, [r7, #8]
    cbe2:	2230      	movs	r2, #48	; 0x30
    cbe4:	701a      	strb	r2, [r3, #0]
    cbe6:	e021      	b.n	cc2c <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
    cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbea:	2b00      	cmp	r3, #0
    cbec:	dd08      	ble.n	cc00 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
    cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cbf0:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cbf4:	68ba      	ldr	r2, [r7, #8]
    cbf6:	4618      	mov	r0, r3
    cbf8:	4621      	mov	r1, r4
    cbfa:	f7ff fe9a 	bl	c932 <uint64_to_str>
    cbfe:	e011      	b.n	cc24 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
    cc00:	68bb      	ldr	r3, [r7, #8]
    cc02:	1c5a      	adds	r2, r3, #1
    cc04:	60ba      	str	r2, [r7, #8]
    cc06:	222d      	movs	r2, #45	; 0x2d
    cc08:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
    cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    cc0c:	425b      	negs	r3, r3
    cc0e:	ea4f 74e3 	mov.w	r4, r3, asr #31
    cc12:	68ba      	ldr	r2, [r7, #8]
    cc14:	4618      	mov	r0, r3
    cc16:	4621      	mov	r1, r4
    cc18:	f7ff fe8b 	bl	c932 <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
    cc1c:	e002      	b.n	cc24 <ftoa+0x120>
        {
            pcBuf++;
    cc1e:	68bb      	ldr	r3, [r7, #8]
    cc20:	3301      	adds	r3, #1
    cc22:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
    cc24:	68bb      	ldr	r3, [r7, #8]
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d1f8      	bne.n	cc1e <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
    cc2c:	68bb      	ldr	r3, [r7, #8]
    cc2e:	1c5a      	adds	r2, r3, #1
    cc30:	60ba      	str	r2, [r7, #8]
    cc32:	222e      	movs	r2, #46	; 0x2e
    cc34:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
    cc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc38:	2b00      	cmp	r3, #0
    cc3a:	d105      	bne.n	cc48 <ftoa+0x144>
    {
        *pcBuf++ = '0';
    cc3c:	68bb      	ldr	r3, [r7, #8]
    cc3e:	1c5a      	adds	r2, r3, #1
    cc40:	60ba      	str	r2, [r7, #8]
    cc42:	2230      	movs	r2, #48	; 0x30
    cc44:	701a      	strb	r2, [r3, #0]
    cc46:	e04f      	b.n	cce8 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
    cc48:	68ba      	ldr	r2, [r7, #8]
    cc4a:	6a3b      	ldr	r3, [r7, #32]
    cc4c:	1ad3      	subs	r3, r2, r3
    cc4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cc50:	1ad3      	subs	r3, r2, r3
    cc52:	3b01      	subs	r3, #1
    cc54:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
    cc56:	697a      	ldr	r2, [r7, #20]
    cc58:	687b      	ldr	r3, [r7, #4]
    cc5a:	4293      	cmp	r3, r2
    cc5c:	bfa8      	it	ge
    cc5e:	4613      	movge	r3, r2
    cc60:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
    cc62:	2300      	movs	r3, #0
    cc64:	62bb      	str	r3, [r7, #40]	; 0x28
    cc66:	e015      	b.n	cc94 <ftoa+0x190>
        {
            i32FracPart *= 10;
    cc68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc6a:	4613      	mov	r3, r2
    cc6c:	009b      	lsls	r3, r3, #2
    cc6e:	4413      	add	r3, r2
    cc70:	005b      	lsls	r3, r3, #1
    cc72:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
    cc74:	68bb      	ldr	r3, [r7, #8]
    cc76:	1c5a      	adds	r2, r3, #1
    cc78:	60ba      	str	r2, [r7, #8]
    cc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc7c:	1612      	asrs	r2, r2, #24
    cc7e:	b2d2      	uxtb	r2, r2
    cc80:	3230      	adds	r2, #48	; 0x30
    cc82:	b2d2      	uxtb	r2, r2
    cc84:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
    cc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    cc88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    cc8c:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
    cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cc90:	3301      	adds	r3, #1
    cc92:	62bb      	str	r3, [r7, #40]	; 0x28
    cc94:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cc96:	697b      	ldr	r3, [r7, #20]
    cc98:	429a      	cmp	r2, r3
    cc9a:	dbe5      	blt.n	cc68 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
    cc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc9e:	4613      	mov	r3, r2
    cca0:	009b      	lsls	r3, r3, #2
    cca2:	4413      	add	r3, r2
    cca4:	005b      	lsls	r3, r3, #1
    cca6:	161b      	asrs	r3, r3, #24
    cca8:	2b04      	cmp	r3, #4
    ccaa:	dd1d      	ble.n	cce8 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
    ccac:	68bb      	ldr	r3, [r7, #8]
    ccae:	3b01      	subs	r3, #1
    ccb0:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    ccb2:	e015      	b.n	cce0 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
    ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	2b2e      	cmp	r3, #46	; 0x2e
    ccba:	d00e      	beq.n	ccda <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
    ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccbe:	781b      	ldrb	r3, [r3, #0]
    ccc0:	2b39      	cmp	r3, #57	; 0x39
    ccc2:	d103      	bne.n	cccc <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
    ccc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccc6:	2230      	movs	r2, #48	; 0x30
    ccc8:	701a      	strb	r2, [r3, #0]
    ccca:	e006      	b.n	ccda <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
    cccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccce:	781b      	ldrb	r3, [r3, #0]
    ccd0:	3301      	adds	r3, #1
    ccd2:	b2da      	uxtb	r2, r3
    ccd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccd6:	701a      	strb	r2, [r3, #0]
                    break;
    ccd8:	e006      	b.n	cce8 <ftoa+0x1e4>
                }
                pcBuftmp--;
    ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ccdc:	3b01      	subs	r3, #1
    ccde:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
    cce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cce2:	6a3b      	ldr	r3, [r7, #32]
    cce4:	429a      	cmp	r2, r3
    cce6:	d2e5      	bcs.n	ccb4 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
    cce8:	68bb      	ldr	r3, [r7, #8]
    ccea:	2200      	movs	r2, #0
    ccec:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
    ccee:	68ba      	ldr	r2, [r7, #8]
    ccf0:	6a3b      	ldr	r3, [r7, #32]
    ccf2:	1ad3      	subs	r3, r2, r3
} // ftoa()
    ccf4:	4618      	mov	r0, r3
    ccf6:	373c      	adds	r7, #60	; 0x3c
    ccf8:	46bd      	mov	sp, r7
    ccfa:	bd90      	pop	{r4, r7, pc}
    ccfc:	00302e30 	.word	0x00302e30

0000cd00 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
    cd00:	b590      	push	{r4, r7, lr}
    cd02:	b095      	sub	sp, #84	; 0x54
    cd04:	af00      	add	r7, sp, #0
    cd06:	60f8      	str	r0, [r7, #12]
    cd08:	60b9      	str	r1, [r7, #8]
    cd0a:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
    cd0c:	2300      	movs	r3, #0
    cd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
    cd10:	2300      	movs	r3, #0
    cd12:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
    cd14:	e2e9      	b.n	d2ea <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
    cd16:	2306      	movs	r3, #6
    cd18:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
    cd1a:	68bb      	ldr	r3, [r7, #8]
    cd1c:	781b      	ldrb	r3, [r3, #0]
    cd1e:	2b25      	cmp	r3, #37	; 0x25
    cd20:	d01f      	beq.n	cd62 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
    cd22:	68fb      	ldr	r3, [r7, #12]
    cd24:	2b00      	cmp	r3, #0
    cd26:	d015      	beq.n	cd54 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
    cd28:	68bb      	ldr	r3, [r7, #8]
    cd2a:	781b      	ldrb	r3, [r3, #0]
    cd2c:	2b0a      	cmp	r3, #10
    cd2e:	d10b      	bne.n	cd48 <am_util_stdio_vsprintf+0x48>
    cd30:	4bb2      	ldr	r3, [pc, #712]	; (cffc <am_util_stdio_vsprintf+0x2fc>)
    cd32:	781b      	ldrb	r3, [r3, #0]
    cd34:	2b00      	cmp	r3, #0
    cd36:	d007      	beq.n	cd48 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
    cd38:	68fb      	ldr	r3, [r7, #12]
    cd3a:	1c5a      	adds	r2, r3, #1
    cd3c:	60fa      	str	r2, [r7, #12]
    cd3e:	220d      	movs	r2, #13
    cd40:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
    cd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd44:	3301      	adds	r3, #1
    cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
    cd48:	68fb      	ldr	r3, [r7, #12]
    cd4a:	1c5a      	adds	r2, r3, #1
    cd4c:	60fa      	str	r2, [r7, #12]
    cd4e:	68ba      	ldr	r2, [r7, #8]
    cd50:	7812      	ldrb	r2, [r2, #0]
    cd52:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
    cd54:	68bb      	ldr	r3, [r7, #8]
    cd56:	3301      	adds	r3, #1
    cd58:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
    cd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cd5c:	3301      	adds	r3, #1
    cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
    cd60:	e2c3      	b.n	d2ea <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
    cd62:	68bb      	ldr	r3, [r7, #8]
    cd64:	3301      	adds	r3, #1
    cd66:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
    cd68:	2300      	movs	r3, #0
    cd6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    cd6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cd72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
    cd76:	2320      	movs	r3, #32
    cd78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
    cd7c:	68bb      	ldr	r3, [r7, #8]
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	2b30      	cmp	r3, #48	; 0x30
    cd82:	d105      	bne.n	cd90 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
    cd84:	2330      	movs	r3, #48	; 0x30
    cd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
    cd8a:	68bb      	ldr	r3, [r7, #8]
    cd8c:	3301      	adds	r3, #1
    cd8e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
    cd90:	f107 0310 	add.w	r3, r7, #16
    cd94:	4619      	mov	r1, r3
    cd96:	68b8      	ldr	r0, [r7, #8]
    cd98:	f7ff fd85 	bl	c8a6 <decstr_to_int>
    cd9c:	4603      	mov	r3, r0
    cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
    cda0:	693b      	ldr	r3, [r7, #16]
    cda2:	68ba      	ldr	r2, [r7, #8]
    cda4:	4413      	add	r3, r2
    cda6:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
    cda8:	68bb      	ldr	r3, [r7, #8]
    cdaa:	781b      	ldrb	r3, [r3, #0]
    cdac:	2b73      	cmp	r3, #115	; 0x73
    cdae:	d005      	beq.n	cdbc <am_util_stdio_vsprintf+0xbc>
    cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	da02      	bge.n	cdbc <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
    cdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cdb8:	425b      	negs	r3, r3
    cdba:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
    cdbc:	68bb      	ldr	r3, [r7, #8]
    cdbe:	781b      	ldrb	r3, [r3, #0]
    cdc0:	2b2e      	cmp	r3, #46	; 0x2e
    cdc2:	d10e      	bne.n	cde2 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
    cdc4:	68bb      	ldr	r3, [r7, #8]
    cdc6:	3301      	adds	r3, #1
    cdc8:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
    cdca:	f107 0310 	add.w	r3, r7, #16
    cdce:	4619      	mov	r1, r3
    cdd0:	68b8      	ldr	r0, [r7, #8]
    cdd2:	f7ff fd68 	bl	c8a6 <decstr_to_int>
    cdd6:	4603      	mov	r3, r0
    cdd8:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
    cdda:	693b      	ldr	r3, [r7, #16]
    cddc:	68ba      	ldr	r2, [r7, #8]
    cdde:	4413      	add	r3, r2
    cde0:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
    cde2:	68bb      	ldr	r3, [r7, #8]
    cde4:	781b      	ldrb	r3, [r3, #0]
    cde6:	2b6c      	cmp	r3, #108	; 0x6c
    cde8:	d10c      	bne.n	ce04 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
    cdea:	68bb      	ldr	r3, [r7, #8]
    cdec:	3301      	adds	r3, #1
    cdee:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
    cdf0:	68bb      	ldr	r3, [r7, #8]
    cdf2:	781b      	ldrb	r3, [r3, #0]
    cdf4:	2b6c      	cmp	r3, #108	; 0x6c
    cdf6:	d105      	bne.n	ce04 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
    cdf8:	68bb      	ldr	r3, [r7, #8]
    cdfa:	3301      	adds	r3, #1
    cdfc:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
    cdfe:	2301      	movs	r3, #1
    ce00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
    ce04:	68bb      	ldr	r3, [r7, #8]
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	3b46      	subs	r3, #70	; 0x46
    ce0a:	2b32      	cmp	r3, #50	; 0x32
    ce0c:	f200 825a 	bhi.w	d2c4 <am_util_stdio_vsprintf+0x5c4>
    ce10:	a201      	add	r2, pc, #4	; (adr r2, ce18 <am_util_stdio_vsprintf+0x118>)
    ce12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ce16:	bf00      	nop
    ce18:	0000d24b 	.word	0x0000d24b
    ce1c:	0000d2c5 	.word	0x0000d2c5
    ce20:	0000d2c5 	.word	0x0000d2c5
    ce24:	0000d2c5 	.word	0x0000d2c5
    ce28:	0000d2c5 	.word	0x0000d2c5
    ce2c:	0000d2c5 	.word	0x0000d2c5
    ce30:	0000d2c5 	.word	0x0000d2c5
    ce34:	0000d2c5 	.word	0x0000d2c5
    ce38:	0000d2c5 	.word	0x0000d2c5
    ce3c:	0000d2c5 	.word	0x0000d2c5
    ce40:	0000d2c5 	.word	0x0000d2c5
    ce44:	0000d2c5 	.word	0x0000d2c5
    ce48:	0000d2c5 	.word	0x0000d2c5
    ce4c:	0000d2c5 	.word	0x0000d2c5
    ce50:	0000d2c5 	.word	0x0000d2c5
    ce54:	0000d2c5 	.word	0x0000d2c5
    ce58:	0000d2c5 	.word	0x0000d2c5
    ce5c:	0000d2c5 	.word	0x0000d2c5
    ce60:	0000cfdf 	.word	0x0000cfdf
    ce64:	0000d2c5 	.word	0x0000d2c5
    ce68:	0000d2c5 	.word	0x0000d2c5
    ce6c:	0000d2c5 	.word	0x0000d2c5
    ce70:	0000d2c5 	.word	0x0000d2c5
    ce74:	0000d2c5 	.word	0x0000d2c5
    ce78:	0000d2c5 	.word	0x0000d2c5
    ce7c:	0000d2c5 	.word	0x0000d2c5
    ce80:	0000d2c5 	.word	0x0000d2c5
    ce84:	0000d2c5 	.word	0x0000d2c5
    ce88:	0000d2c5 	.word	0x0000d2c5
    ce8c:	0000cee5 	.word	0x0000cee5
    ce90:	0000d111 	.word	0x0000d111
    ce94:	0000d2c5 	.word	0x0000d2c5
    ce98:	0000d24b 	.word	0x0000d24b
    ce9c:	0000d2c5 	.word	0x0000d2c5
    cea0:	0000d2c5 	.word	0x0000d2c5
    cea4:	0000d111 	.word	0x0000d111
    cea8:	0000d2c5 	.word	0x0000d2c5
    ceac:	0000d2c5 	.word	0x0000d2c5
    ceb0:	0000d2c5 	.word	0x0000d2c5
    ceb4:	0000d2c5 	.word	0x0000d2c5
    ceb8:	0000d2c5 	.word	0x0000d2c5
    cebc:	0000d2c5 	.word	0x0000d2c5
    cec0:	0000d2c5 	.word	0x0000d2c5
    cec4:	0000d2c5 	.word	0x0000d2c5
    cec8:	0000d2c5 	.word	0x0000d2c5
    cecc:	0000cf0b 	.word	0x0000cf0b
    ced0:	0000d2c5 	.word	0x0000d2c5
    ced4:	0000d07d 	.word	0x0000d07d
    ced8:	0000d2c5 	.word	0x0000d2c5
    cedc:	0000d2c5 	.word	0x0000d2c5
    cee0:	0000cfd9 	.word	0x0000cfd9
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
    cee4:	687b      	ldr	r3, [r7, #4]
    cee6:	1d1a      	adds	r2, r3, #4
    cee8:	607a      	str	r2, [r7, #4]
    ceea:	681b      	ldr	r3, [r3, #0]
    ceec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
    cef0:	68fb      	ldr	r3, [r7, #12]
    cef2:	2b00      	cmp	r3, #0
    cef4:	d005      	beq.n	cf02 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
    cef6:	68fb      	ldr	r3, [r7, #12]
    cef8:	1c5a      	adds	r2, r3, #1
    cefa:	60fa      	str	r2, [r7, #12]
    cefc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    cf00:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    cf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf04:	3301      	adds	r3, #1
    cf06:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    cf08:	e1ec      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
    cf0a:	687b      	ldr	r3, [r7, #4]
    cf0c:	1d1a      	adds	r2, r3, #4
    cf0e:	607a      	str	r2, [r7, #4]
    cf10:	681b      	ldr	r3, [r3, #0]
    cf12:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
    cf14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cf16:	f7ff fdb4 	bl	ca82 <simple_strlen>
    cf1a:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
    cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf1e:	2b00      	cmp	r3, #0
    cf20:	dd2e      	ble.n	cf80 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
    cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf26:	429a      	cmp	r2, r3
    cf28:	d22a      	bcs.n	cf80 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cf2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cf2e:	1ad3      	subs	r3, r2, r3
    cf30:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cf36:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cf38:	4619      	mov	r1, r3
    cf3a:	68f8      	ldr	r0, [r7, #12]
    cf3c:	f7ff fdbc 	bl	cab8 <padbuffer>
    cf40:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cf42:	68fb      	ldr	r3, [r7, #12]
    cf44:	2b00      	cmp	r3, #0
    cf46:	d001      	beq.n	cf4c <am_util_stdio_vsprintf+0x24c>
    cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf4a:	e000      	b.n	cf4e <am_util_stdio_vsprintf+0x24e>
    cf4c:	2300      	movs	r3, #0
    cf4e:	68fa      	ldr	r2, [r7, #12]
    cf50:	4413      	add	r3, r2
    cf52:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cf58:	4413      	add	r3, r2
    cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cf5c:	2300      	movs	r3, #0
    cf5e:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
    cf60:	e00e      	b.n	cf80 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
    cf62:	68fb      	ldr	r3, [r7, #12]
    cf64:	2b00      	cmp	r3, #0
    cf66:	d005      	beq.n	cf74 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
    cf68:	68fb      	ldr	r3, [r7, #12]
    cf6a:	1c5a      	adds	r2, r3, #1
    cf6c:	60fa      	str	r2, [r7, #12]
    cf6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    cf70:	7812      	ldrb	r2, [r2, #0]
    cf72:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
    cf74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf76:	3301      	adds	r3, #1
    cf78:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
    cf7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cf7c:	3301      	adds	r3, #1
    cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
    cf80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    cf82:	781b      	ldrb	r3, [r3, #0]
    cf84:	2b00      	cmp	r3, #0
    cf86:	d1ec      	bne.n	cf62 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
    cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	f000 81a7 	beq.w	d2de <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
    cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf92:	425b      	negs	r3, r3
    cf94:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
    cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cf9a:	429a      	cmp	r2, r3
    cf9c:	f080 819f 	bcs.w	d2de <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
    cfa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cfa4:	1ad3      	subs	r3, r2, r3
    cfa6:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    cfa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    cfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
    cfae:	4619      	mov	r1, r3
    cfb0:	68f8      	ldr	r0, [r7, #12]
    cfb2:	f7ff fd81 	bl	cab8 <padbuffer>
    cfb6:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
    cfb8:	68fb      	ldr	r3, [r7, #12]
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d001      	beq.n	cfc2 <am_util_stdio_vsprintf+0x2c2>
    cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfc0:	e000      	b.n	cfc4 <am_util_stdio_vsprintf+0x2c4>
    cfc2:	2300      	movs	r3, #0
    cfc4:	68fa      	ldr	r2, [r7, #12]
    cfc6:	4413      	add	r3, r2
    cfc8:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
    cfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    cfce:	4413      	add	r3, r2
    cfd0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
    cfd2:	2300      	movs	r3, #0
    cfd4:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
    cfd6:	e182      	b.n	d2de <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
    cfd8:	2301      	movs	r3, #1
    cfda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    cfde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    cfe2:	2b00      	cmp	r3, #0
    cfe4:	d00c      	beq.n	d000 <am_util_stdio_vsprintf+0x300>
    cfe6:	687b      	ldr	r3, [r7, #4]
    cfe8:	3307      	adds	r3, #7
    cfea:	f023 0307 	bic.w	r3, r3, #7
    cfee:	f103 0208 	add.w	r2, r3, #8
    cff2:	607a      	str	r2, [r7, #4]
    cff4:	e9d3 3400 	ldrd	r3, r4, [r3]
    cff8:	e008      	b.n	d00c <am_util_stdio_vsprintf+0x30c>
    cffa:	bf00      	nop
    cffc:	10001138 	.word	0x10001138
                                      va_arg(pArgs, uint32_t);
    d000:	687b      	ldr	r3, [r7, #4]
    d002:	1d1a      	adds	r2, r3, #4
    d004:	607a      	str	r2, [r7, #4]
    d006:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d008:	f04f 0400 	mov.w	r4, #0
    d00c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d012:	2b00      	cmp	r3, #0
    d014:	d01e      	beq.n	d054 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
    d016:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d01a:	f7ff fc20 	bl	c85e <ndigits_in_hex>
    d01e:	4602      	mov	r2, r0
    d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d022:	1a9b      	subs	r3, r3, r2
    d024:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d02a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d02c:	4619      	mov	r1, r3
    d02e:	68f8      	ldr	r0, [r7, #12]
    d030:	f7ff fd42 	bl	cab8 <padbuffer>
    d034:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d036:	68fb      	ldr	r3, [r7, #12]
    d038:	2b00      	cmp	r3, #0
    d03a:	d001      	beq.n	d040 <am_util_stdio_vsprintf+0x340>
    d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d03e:	e000      	b.n	d042 <am_util_stdio_vsprintf+0x342>
    d040:	2300      	movs	r3, #0
    d042:	68fa      	ldr	r2, [r7, #12]
    d044:	4413      	add	r3, r2
    d046:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d04a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d04c:	4413      	add	r3, r2
    d04e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d050:	2300      	movs	r3, #0
    d052:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
    d054:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    d058:	68fa      	ldr	r2, [r7, #12]
    d05a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d05e:	f7ff fcb0 	bl	c9c2 <uint64_to_hexstr>
    d062:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d064:	68fb      	ldr	r3, [r7, #12]
    d066:	2b00      	cmp	r3, #0
    d068:	d003      	beq.n	d072 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
    d06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d06c:	68fa      	ldr	r2, [r7, #12]
    d06e:	4413      	add	r3, r2
    d070:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d076:	4413      	add	r3, r2
    d078:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d07a:	e133      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d07c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d080:	2b00      	cmp	r3, #0
    d082:	d009      	beq.n	d098 <am_util_stdio_vsprintf+0x398>
    d084:	687b      	ldr	r3, [r7, #4]
    d086:	3307      	adds	r3, #7
    d088:	f023 0307 	bic.w	r3, r3, #7
    d08c:	f103 0208 	add.w	r2, r3, #8
    d090:	607a      	str	r2, [r7, #4]
    d092:	e9d3 3400 	ldrd	r3, r4, [r3]
    d096:	e005      	b.n	d0a4 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
    d098:	687b      	ldr	r3, [r7, #4]
    d09a:	1d1a      	adds	r2, r3, #4
    d09c:	607a      	str	r2, [r7, #4]
    d09e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
    d0a0:	f04f 0400 	mov.w	r4, #0
    d0a4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
    d0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d01e      	beq.n	d0ec <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
    d0ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0b2:	f7ff fb96 	bl	c7e2 <ndigits_in_u64>
    d0b6:	4602      	mov	r2, r0
    d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0ba:	1a9b      	subs	r3, r3, r2
    d0bc:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d0be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d0c4:	4619      	mov	r1, r3
    d0c6:	68f8      	ldr	r0, [r7, #12]
    d0c8:	f7ff fcf6 	bl	cab8 <padbuffer>
    d0cc:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d0ce:	68fb      	ldr	r3, [r7, #12]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	d001      	beq.n	d0d8 <am_util_stdio_vsprintf+0x3d8>
    d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0d6:	e000      	b.n	d0da <am_util_stdio_vsprintf+0x3da>
    d0d8:	2300      	movs	r3, #0
    d0da:	68fa      	ldr	r2, [r7, #12]
    d0dc:	4413      	add	r3, r2
    d0de:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d0e4:	4413      	add	r3, r2
    d0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d0e8:	2300      	movs	r3, #0
    d0ea:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d0ec:	68fa      	ldr	r2, [r7, #12]
    d0ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d0f2:	f7ff fc1e 	bl	c932 <uint64_to_str>
    d0f6:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d0f8:	68fb      	ldr	r3, [r7, #12]
    d0fa:	2b00      	cmp	r3, #0
    d0fc:	d003      	beq.n	d106 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
    d0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d100:	68fa      	ldr	r2, [r7, #12]
    d102:	4413      	add	r3, r2
    d104:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d10a:	4413      	add	r3, r2
    d10c:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d10e:	e0e9      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    d114:	2b00      	cmp	r3, #0
    d116:	d009      	beq.n	d12c <am_util_stdio_vsprintf+0x42c>
    d118:	687b      	ldr	r3, [r7, #4]
    d11a:	3307      	adds	r3, #7
    d11c:	f023 0307 	bic.w	r3, r3, #7
    d120:	f103 0208 	add.w	r2, r3, #8
    d124:	607a      	str	r2, [r7, #4]
    d126:	e9d3 3400 	ldrd	r3, r4, [r3]
    d12a:	e005      	b.n	d138 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
    d12c:	687b      	ldr	r3, [r7, #4]
    d12e:	1d1a      	adds	r2, r3, #4
    d130:	607a      	str	r2, [r7, #4]
    d132:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
    d134:	ea4f 74e3 	mov.w	r4, r3, asr #31
    d138:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
    d13c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d140:	2b00      	cmp	r3, #0
    d142:	f174 0300 	sbcs.w	r3, r4, #0
    d146:	da0a      	bge.n	d15e <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
    d148:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d14c:	425b      	negs	r3, r3
    d14e:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    d152:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
    d156:	2301      	movs	r3, #1
    d158:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    d15c:	e006      	b.n	d16c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
    d15e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    d162:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
    d166:	2300      	movs	r3, #0
    d168:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
    d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d16e:	2b00      	cmp	r3, #0
    d170:	d04a      	beq.n	d208 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
    d172:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
    d176:	4618      	mov	r0, r3
    d178:	4621      	mov	r1, r4
    d17a:	f7ff fb53 	bl	c824 <ndigits_in_i64>
    d17e:	4602      	mov	r2, r0
    d180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d182:	1a9b      	subs	r3, r3, r2
    d184:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
    d186:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d18a:	2b00      	cmp	r3, #0
    d18c:	d011      	beq.n	d1b2 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
    d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d190:	3b01      	subs	r3, #1
    d192:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
    d194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d198:	2b30      	cmp	r3, #48	; 0x30
    d19a:	d10a      	bne.n	d1b2 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
    d19c:	68fb      	ldr	r3, [r7, #12]
    d19e:	2b00      	cmp	r3, #0
    d1a0:	d004      	beq.n	d1ac <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
    d1a2:	68fb      	ldr	r3, [r7, #12]
    d1a4:	1c5a      	adds	r2, r3, #1
    d1a6:	60fa      	str	r2, [r7, #12]
    d1a8:	222d      	movs	r2, #45	; 0x2d
    d1aa:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
    d1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d1ae:	3301      	adds	r3, #1
    d1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
    d1b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d1b8:	4619      	mov	r1, r3
    d1ba:	68f8      	ldr	r0, [r7, #12]
    d1bc:	f7ff fc7c 	bl	cab8 <padbuffer>
    d1c0:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
    d1c2:	68fb      	ldr	r3, [r7, #12]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d001      	beq.n	d1cc <am_util_stdio_vsprintf+0x4cc>
    d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1ca:	e000      	b.n	d1ce <am_util_stdio_vsprintf+0x4ce>
    d1cc:	2300      	movs	r3, #0
    d1ce:	68fa      	ldr	r2, [r7, #12]
    d1d0:	4413      	add	r3, r2
    d1d2:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
    d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d1d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d1d8:	4413      	add	r3, r2
    d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
    d1dc:	2300      	movs	r3, #0
    d1de:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
    d1e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d01e      	beq.n	d226 <am_util_stdio_vsprintf+0x526>
    d1e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    d1ec:	2b20      	cmp	r3, #32
    d1ee:	d11a      	bne.n	d226 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
    d1f0:	68fb      	ldr	r3, [r7, #12]
    d1f2:	2b00      	cmp	r3, #0
    d1f4:	d004      	beq.n	d200 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
    d1f6:	68fb      	ldr	r3, [r7, #12]
    d1f8:	1c5a      	adds	r2, r3, #1
    d1fa:	60fa      	str	r2, [r7, #12]
    d1fc:	222d      	movs	r2, #45	; 0x2d
    d1fe:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
    d200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d202:	3301      	adds	r3, #1
    d204:	63fb      	str	r3, [r7, #60]	; 0x3c
    d206:	e00e      	b.n	d226 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
    d208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    d20c:	2b00      	cmp	r3, #0
    d20e:	d00a      	beq.n	d226 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
    d210:	68fb      	ldr	r3, [r7, #12]
    d212:	2b00      	cmp	r3, #0
    d214:	d004      	beq.n	d220 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
    d216:	68fb      	ldr	r3, [r7, #12]
    d218:	1c5a      	adds	r2, r3, #1
    d21a:	60fa      	str	r2, [r7, #12]
    d21c:	222d      	movs	r2, #45	; 0x2d
    d21e:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
    d220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d222:	3301      	adds	r3, #1
    d224:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
    d226:	68fa      	ldr	r2, [r7, #12]
    d228:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    d22c:	f7ff fb81 	bl	c932 <uint64_to_str>
    d230:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
    d232:	68fb      	ldr	r3, [r7, #12]
    d234:	2b00      	cmp	r3, #0
    d236:	d003      	beq.n	d240 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
    d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d23a:	68fa      	ldr	r2, [r7, #12]
    d23c:	4413      	add	r3, r2
    d23e:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
    d240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d244:	4413      	add	r3, r2
    d246:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d248:	e04c      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
    d24a:	68fb      	ldr	r3, [r7, #12]
    d24c:	2b00      	cmp	r3, #0
    d24e:	d048      	beq.n	d2e2 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
    d250:	687b      	ldr	r3, [r7, #4]
    d252:	3307      	adds	r3, #7
    d254:	f023 0307 	bic.w	r3, r3, #7
    d258:	f103 0208 	add.w	r2, r3, #8
    d25c:	607a      	str	r2, [r7, #4]
    d25e:	e9d3 3400 	ldrd	r3, r4, [r3]
    d262:	4618      	mov	r0, r3
    d264:	4621      	mov	r1, r4
    d266:	f7fe ff4b 	bl	c100 <__aeabi_d2f>
    d26a:	4603      	mov	r3, r0
    d26c:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
    d26e:	68fb      	ldr	r3, [r7, #12]
    d270:	2214      	movs	r2, #20
    d272:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
    d274:	6b39      	ldr	r1, [r7, #48]	; 0x30
    d276:	68f8      	ldr	r0, [r7, #12]
    d278:	ed97 0a05 	vldr	s0, [r7, #20]
    d27c:	f7ff fc42 	bl	cb04 <ftoa>
    d280:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
    d282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d284:	2b00      	cmp	r3, #0
    d286:	da14      	bge.n	d2b2 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
    d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d28a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d28e:	d102      	bne.n	d296 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
    d290:	4b1e      	ldr	r3, [pc, #120]	; (d30c <am_util_stdio_vsprintf+0x60c>)
    d292:	62bb      	str	r3, [r7, #40]	; 0x28
    d294:	e008      	b.n	d2a8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
    d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d298:	f113 0f02 	cmn.w	r3, #2
    d29c:	d102      	bne.n	d2a4 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
    d29e:	4b1c      	ldr	r3, [pc, #112]	; (d310 <am_util_stdio_vsprintf+0x610>)
    d2a0:	62bb      	str	r3, [r7, #40]	; 0x28
    d2a2:	e001      	b.n	d2a8 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
    d2a4:	4b1b      	ldr	r3, [pc, #108]	; (d314 <am_util_stdio_vsprintf+0x614>)
    d2a6:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
    d2a8:	68fb      	ldr	r3, [r7, #12]
    d2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d2ac:	601a      	str	r2, [r3, #0]
                        iVal = 3;
    d2ae:	2303      	movs	r3, #3
    d2b0:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
    d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d2b6:	4413      	add	r3, r2
    d2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
    d2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d2bc:	68fa      	ldr	r2, [r7, #12]
    d2be:	4413      	add	r3, r2
    d2c0:	60fb      	str	r3, [r7, #12]
                }
                break;
    d2c2:	e00e      	b.n	d2e2 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
    d2c4:	68fb      	ldr	r3, [r7, #12]
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	d005      	beq.n	d2d6 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
    d2ca:	68fb      	ldr	r3, [r7, #12]
    d2cc:	1c5a      	adds	r2, r3, #1
    d2ce:	60fa      	str	r2, [r7, #12]
    d2d0:	68ba      	ldr	r2, [r7, #8]
    d2d2:	7812      	ldrb	r2, [r2, #0]
    d2d4:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
    d2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d2d8:	3301      	adds	r3, #1
    d2da:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
    d2dc:	e002      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2de:	bf00      	nop
    d2e0:	e000      	b.n	d2e4 <am_util_stdio_vsprintf+0x5e4>
                break;
    d2e2:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
    d2e4:	68bb      	ldr	r3, [r7, #8]
    d2e6:	3301      	adds	r3, #1
    d2e8:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
    d2ea:	68bb      	ldr	r3, [r7, #8]
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	f47f ad11 	bne.w	cd16 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	2b00      	cmp	r3, #0
    d2f8:	d002      	beq.n	d300 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
    d2fa:	68fb      	ldr	r3, [r7, #12]
    d2fc:	2200      	movs	r2, #0
    d2fe:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
    d300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    d302:	4618      	mov	r0, r3
    d304:	3754      	adds	r7, #84	; 0x54
    d306:	46bd      	mov	sp, r7
    d308:	bd90      	pop	{r4, r7, pc}
    d30a:	bf00      	nop
    d30c:	00302e30 	.word	0x00302e30
    d310:	00232e23 	.word	0x00232e23
    d314:	003f2e3f 	.word	0x003f2e3f

0000d318 <am_util_stdio_sprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_sprintf(char *pcBuf, const char *pcFmt, ...)
{
    d318:	b40e      	push	{r1, r2, r3}
    d31a:	b580      	push	{r7, lr}
    d31c:	b085      	sub	sp, #20
    d31e:	af00      	add	r7, sp, #0
    d320:	6078      	str	r0, [r7, #4]
    uint32_t ui32CharCnt;

    va_list pArgs;
    va_start(pArgs, pcFmt);
    d322:	f107 0320 	add.w	r3, r7, #32
    d326:	60bb      	str	r3, [r7, #8]
    ui32CharCnt = am_util_stdio_vsprintf(pcBuf, pcFmt, pArgs);
    d328:	68ba      	ldr	r2, [r7, #8]
    d32a:	69f9      	ldr	r1, [r7, #28]
    d32c:	6878      	ldr	r0, [r7, #4]
    d32e:	f7ff fce7 	bl	cd00 <am_util_stdio_vsprintf>
    d332:	60f8      	str	r0, [r7, #12]
    va_end(pArgs);

    return ui32CharCnt;
    d334:	68fb      	ldr	r3, [r7, #12]
}
    d336:	4618      	mov	r0, r3
    d338:	3714      	adds	r7, #20
    d33a:	46bd      	mov	sp, r7
    d33c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d340:	b003      	add	sp, #12
    d342:	4770      	bx	lr

0000d344 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
    d344:	b40f      	push	{r0, r1, r2, r3}
    d346:	b580      	push	{r7, lr}
    d348:	b082      	sub	sp, #8
    d34a:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
    d34c:	4b0d      	ldr	r3, [pc, #52]	; (d384 <am_util_stdio_printf+0x40>)
    d34e:	681b      	ldr	r3, [r3, #0]
    d350:	2b00      	cmp	r3, #0
    d352:	d101      	bne.n	d358 <am_util_stdio_printf+0x14>
    {
        return 0;
    d354:	2300      	movs	r3, #0
    d356:	e00d      	b.n	d374 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
    d358:	f107 0314 	add.w	r3, r7, #20
    d35c:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
    d35e:	683a      	ldr	r2, [r7, #0]
    d360:	6939      	ldr	r1, [r7, #16]
    d362:	4809      	ldr	r0, [pc, #36]	; (d388 <am_util_stdio_printf+0x44>)
    d364:	f7ff fccc 	bl	cd00 <am_util_stdio_vsprintf>
    d368:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
    d36a:	4b06      	ldr	r3, [pc, #24]	; (d384 <am_util_stdio_printf+0x40>)
    d36c:	681b      	ldr	r3, [r3, #0]
    d36e:	4806      	ldr	r0, [pc, #24]	; (d388 <am_util_stdio_printf+0x44>)
    d370:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
    d372:	687b      	ldr	r3, [r7, #4]
}
    d374:	4618      	mov	r0, r3
    d376:	3708      	adds	r7, #8
    d378:	46bd      	mov	sp, r7
    d37a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d37e:	b004      	add	sp, #16
    d380:	4770      	bx	lr
    d382:	bf00      	nop
    d384:	10001150 	.word	0x10001150
    d388:	10001038 	.word	0x10001038

0000d38c <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
    d38c:	b580      	push	{r7, lr}
    d38e:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    d390:	4802      	ldr	r0, [pc, #8]	; (d39c <am_util_stdio_terminal_clear+0x10>)
    d392:	f7ff ffd7 	bl	d344 <am_util_stdio_printf>
}
    d396:	bf00      	nop
    d398:	bd80      	pop	{r7, pc}
    d39a:	bf00      	nop
    d39c:	0000e668 	.word	0x0000e668

0000d3a0 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
    d3a0:	4811      	ldr	r0, [pc, #68]	; (d3e8 <zero_loop+0x12>)
    d3a2:	4912      	ldr	r1, [pc, #72]	; (d3ec <zero_loop+0x16>)
    d3a4:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
    d3a6:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
    d3aa:	4811      	ldr	r0, [pc, #68]	; (d3f0 <zero_loop+0x1a>)
    d3ac:	6801      	ldr	r1, [r0, #0]
    d3ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d3b2:	6001      	str	r1, [r0, #0]
    d3b4:	f3bf 8f4f 	dsb	sy
    d3b8:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
    d3bc:	480d      	ldr	r0, [pc, #52]	; (d3f4 <zero_loop+0x1e>)
    d3be:	490e      	ldr	r1, [pc, #56]	; (d3f8 <zero_loop+0x22>)
    d3c0:	4a0e      	ldr	r2, [pc, #56]	; (d3fc <zero_loop+0x26>)

0000d3c2 <copy_loop>:
    d3c2:	f850 3b04 	ldr.w	r3, [r0], #4
    d3c6:	f841 3b04 	str.w	r3, [r1], #4
    d3ca:	4291      	cmp	r1, r2
    d3cc:	dbf9      	blt.n	d3c2 <copy_loop>
          "        cmp     r1, r2\n"
          "        blt     copy_loop\n");
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
    d3ce:	480c      	ldr	r0, [pc, #48]	; (d400 <zero_loop+0x2a>)
    d3d0:	490c      	ldr	r1, [pc, #48]	; (d404 <zero_loop+0x2e>)
    d3d2:	f04f 0200 	mov.w	r2, #0

0000d3d6 <zero_loop>:
    d3d6:	4288      	cmp	r0, r1
    d3d8:	bfb8      	it	lt
    d3da:	f840 2b04 	strlt.w	r2, [r0], #4
    d3de:	dbfa      	blt.n	d3d6 <zero_loop>
          "        blt     zero_loop");

    //
    // Call the application's entry point.
    //
    main();
    d3e0:	f7fe fede 	bl	c1a0 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
    d3e4:	be00      	bkpt	0x0000
}
    d3e6:	bf00      	nop
    d3e8:	e000ed08 	.word	0xe000ed08
    d3ec:	0000c000 	.word	0x0000c000
    d3f0:	e000ed88 	.word	0xe000ed88
    d3f4:	0000e9a8 	.word	0x0000e9a8
    d3f8:	10001000 	.word	0x10001000
    d3fc:	10001038 	.word	0x10001038
    d400:	10001038 	.word	0x10001038
    d404:	10001154 	.word	0x10001154

0000d408 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
    d408:	b480      	push	{r7}
    d40a:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d40c:	e7fe      	b.n	d40c <NMI_Handler+0x4>

0000d40e <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
    d40e:	b480      	push	{r7}
    d410:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d412:	e7fe      	b.n	d412 <BusFault_Handler+0x4>

0000d414 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
    d414:	b480      	push	{r7}
    d416:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
    d418:	e7fe      	b.n	d418 <DebugMon_Handler+0x4>
	...

0000d41c <am_bsp_low_power_init>:
    d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d41e:	f000 fe13 	bl	e048 <am_hal_pwrctrl_low_power_init>
    d422:	f000 fe83 	bl	e12c <am_hal_rtc_osc_disable>
    d426:	4b0b      	ldr	r3, [pc, #44]	; (d454 <am_bsp_low_power_init+0x38>)
    d428:	4f0b      	ldr	r7, [pc, #44]	; (d458 <am_bsp_low_power_init+0x3c>)
    d42a:	681e      	ldr	r6, [r3, #0]
    d42c:	2400      	movs	r4, #0
    d42e:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
    d432:	4631      	mov	r1, r6
    d434:	4628      	mov	r0, r5
    d436:	f000 fb07 	bl	da48 <am_hal_gpio_pinconfig>
    d43a:	2103      	movs	r1, #3
    d43c:	4628      	mov	r0, r5
    d43e:	f000 fc3f 	bl	dcc0 <am_hal_gpio_state_write>
    d442:	3401      	adds	r4, #1
    d444:	4628      	mov	r0, r5
    d446:	2100      	movs	r1, #0
    d448:	f000 fc3a 	bl	dcc0 <am_hal_gpio_state_write>
    d44c:	2c05      	cmp	r4, #5
    d44e:	d1ee      	bne.n	d42e <am_bsp_low_power_init+0x12>
    d450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d452:	bf00      	nop
    d454:	0000e83c 	.word	0x0000e83c
    d458:	10001000 	.word	0x10001000

0000d45c <am_bsp_debug_printf_disable>:
    d45c:	b538      	push	{r3, r4, r5, lr}
    d45e:	4b17      	ldr	r3, [pc, #92]	; (d4bc <am_bsp_debug_printf_disable+0x60>)
    d460:	681c      	ldr	r4, [r3, #0]
    d462:	2c01      	cmp	r4, #1
    d464:	d01d      	beq.n	d4a2 <am_bsp_debug_printf_disable+0x46>
    d466:	2c02      	cmp	r4, #2
    d468:	d000      	beq.n	d46c <am_bsp_debug_printf_disable+0x10>
    d46a:	bd38      	pop	{r3, r4, r5, pc}
    d46c:	4d14      	ldr	r5, [pc, #80]	; (d4c0 <am_bsp_debug_printf_disable+0x64>)
    d46e:	6828      	ldr	r0, [r5, #0]
    d470:	f000 ffd2 	bl	e418 <am_hal_uart_tx_flush>
    d474:	2000      	movs	r0, #0
    d476:	f7ff f8c5 	bl	c604 <am_util_stdio_printf_init>
    d47a:	4621      	mov	r1, r4
    d47c:	2200      	movs	r2, #0
    d47e:	6828      	ldr	r0, [r5, #0]
    d480:	f000 ff58 	bl	e334 <am_hal_uart_power_control>
    d484:	6828      	ldr	r0, [r5, #0]
    d486:	f000 ff41 	bl	e30c <am_hal_uart_deinitialize>
    d48a:	4b0e      	ldr	r3, [pc, #56]	; (d4c4 <am_bsp_debug_printf_disable+0x68>)
    d48c:	681c      	ldr	r4, [r3, #0]
    d48e:	2016      	movs	r0, #22
    d490:	4621      	mov	r1, r4
    d492:	f000 fad9 	bl	da48 <am_hal_gpio_pinconfig>
    d496:	4621      	mov	r1, r4
    d498:	2017      	movs	r0, #23
    d49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d49e:	f000 bad3 	b.w	da48 <am_hal_gpio_pinconfig>
    d4a2:	f000 fc77 	bl	dd94 <am_hal_itm_disable>
    d4a6:	2000      	movs	r0, #0
    d4a8:	f7ff f8ac 	bl	c604 <am_util_stdio_printf_init>
    d4ac:	4b05      	ldr	r3, [pc, #20]	; (d4c4 <am_bsp_debug_printf_disable+0x68>)
    d4ae:	2029      	movs	r0, #41	; 0x29
    d4b0:	6819      	ldr	r1, [r3, #0]
    d4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d4b6:	f000 bac7 	b.w	da48 <am_hal_gpio_pinconfig>
    d4ba:	bf00      	nop
    d4bc:	1000113c 	.word	0x1000113c
    d4c0:	10001140 	.word	0x10001140
    d4c4:	0000e838 	.word	0x0000e838

0000d4c8 <am_bsp_itm_printf_enable>:
    d4c8:	b500      	push	{lr}
    d4ca:	4b0b      	ldr	r3, [pc, #44]	; (d4f8 <am_bsp_itm_printf_enable+0x30>)
    d4cc:	b087      	sub	sp, #28
    d4ce:	2201      	movs	r2, #1
    d4d0:	601a      	str	r2, [r3, #0]
    d4d2:	f000 fc41 	bl	dd58 <am_hal_itm_enable>
    d4d6:	a806      	add	r0, sp, #24
    d4d8:	4b08      	ldr	r3, [pc, #32]	; (d4fc <am_bsp_itm_printf_enable+0x34>)
    d4da:	f840 3d14 	str.w	r3, [r0, #-20]!
    d4de:	f000 fec5 	bl	e26c <am_hal_tpiu_enable>
    d4e2:	4b07      	ldr	r3, [pc, #28]	; (d500 <am_bsp_itm_printf_enable+0x38>)
    d4e4:	2029      	movs	r0, #41	; 0x29
    d4e6:	6819      	ldr	r1, [r3, #0]
    d4e8:	f000 faae 	bl	da48 <am_hal_gpio_pinconfig>
    d4ec:	4805      	ldr	r0, [pc, #20]	; (d504 <am_bsp_itm_printf_enable+0x3c>)
    d4ee:	f7ff f889 	bl	c604 <am_util_stdio_printf_init>
    d4f2:	b007      	add	sp, #28
    d4f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f8:	1000113c 	.word	0x1000113c
    d4fc:	000f4240 	.word	0x000f4240
    d500:	0000e6b4 	.word	0x0000e6b4
    d504:	0000de41 	.word	0x0000de41

0000d508 <am_hal_cachectrl_config>:
    d508:	b530      	push	{r4, r5, lr}
    d50a:	b083      	sub	sp, #12
    d50c:	4605      	mov	r5, r0
    d50e:	f000 fc1b 	bl	dd48 <am_hal_interrupt_master_disable>
    d512:	4c0f      	ldr	r4, [pc, #60]	; (d550 <am_hal_cachectrl_config+0x48>)
    d514:	9001      	str	r0, [sp, #4]
    d516:	6823      	ldr	r3, [r4, #0]
    d518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    d51c:	6023      	str	r3, [r4, #0]
    d51e:	9801      	ldr	r0, [sp, #4]
    d520:	f000 fc16 	bl	dd50 <am_hal_interrupt_master_set>
    d524:	78ab      	ldrb	r3, [r5, #2]
    d526:	782a      	ldrb	r2, [r5, #0]
    d528:	7869      	ldrb	r1, [r5, #1]
    d52a:	005b      	lsls	r3, r3, #1
    d52c:	0112      	lsls	r2, r2, #4
    d52e:	b2d2      	uxtb	r2, r2
    d530:	f003 0302 	and.w	r3, r3, #2
    d534:	4313      	orrs	r3, r2
    d536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d53a:	020a      	lsls	r2, r1, #8
    d53c:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d544:	4313      	orrs	r3, r2
    d546:	2000      	movs	r0, #0
    d548:	6023      	str	r3, [r4, #0]
    d54a:	b003      	add	sp, #12
    d54c:	bd30      	pop	{r4, r5, pc}
    d54e:	bf00      	nop
    d550:	40018000 	.word	0x40018000

0000d554 <am_hal_cachectrl_enable>:
    d554:	4a03      	ldr	r2, [pc, #12]	; (d564 <am_hal_cachectrl_enable+0x10>)
    d556:	6813      	ldr	r3, [r2, #0]
    d558:	f043 0301 	orr.w	r3, r3, #1
    d55c:	6013      	str	r3, [r2, #0]
    d55e:	2000      	movs	r0, #0
    d560:	4770      	bx	lr
    d562:	bf00      	nop
    d564:	40018000 	.word	0x40018000

0000d568 <am_hal_cachectrl_control>:
    d568:	b510      	push	{r4, lr}
    d56a:	3801      	subs	r0, #1
    d56c:	b08e      	sub	sp, #56	; 0x38
    d56e:	2810      	cmp	r0, #16
    d570:	f200 8143 	bhi.w	d7fa <am_hal_cachectrl_control+0x292>
    d574:	e8df f010 	tbh	[pc, r0, lsl #1]
    d578:	01380136 	.word	0x01380136
    d57c:	0011013e 	.word	0x0011013e
    d580:	001a0018 	.word	0x001a0018
    d584:	001f001c 	.word	0x001f001c
    d588:	00300022 	.word	0x00300022
    d58c:	0074003c 	.word	0x0074003c
    d590:	00e400ac 	.word	0x00e400ac
    d594:	011a00ff 	.word	0x011a00ff
    d598:	0120      	.short	0x0120
    d59a:	f44f 7208 	mov.w	r2, #544	; 0x220
    d59e:	4ba8      	ldr	r3, [pc, #672]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d5a0:	2000      	movs	r0, #0
    d5a2:	609a      	str	r2, [r3, #8]
    d5a4:	b00e      	add	sp, #56	; 0x38
    d5a6:	bd10      	pop	{r4, pc}
    d5a8:	2240      	movs	r2, #64	; 0x40
    d5aa:	e7f8      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d5ac:	2220      	movs	r2, #32
    d5ae:	e7f6      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d5b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d5b4:	e7f3      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d5b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    d5ba:	e7f0      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d5bc:	f000 fbc4 	bl	dd48 <am_hal_interrupt_master_disable>
    d5c0:	4a9f      	ldr	r2, [pc, #636]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d5c2:	9000      	str	r0, [sp, #0]
    d5c4:	6813      	ldr	r3, [r2, #0]
    d5c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d5ca:	6013      	str	r3, [r2, #0]
    d5cc:	9800      	ldr	r0, [sp, #0]
    d5ce:	f000 fbbf 	bl	dd50 <am_hal_interrupt_master_set>
    d5d2:	2000      	movs	r0, #0
    d5d4:	b00e      	add	sp, #56	; 0x38
    d5d6:	bd10      	pop	{r4, pc}
    d5d8:	f000 fbb6 	bl	dd48 <am_hal_interrupt_master_disable>
    d5dc:	4a98      	ldr	r2, [pc, #608]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d5de:	9001      	str	r0, [sp, #4]
    d5e0:	6813      	ldr	r3, [r2, #0]
    d5e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    d5e6:	6013      	str	r3, [r2, #0]
    d5e8:	9801      	ldr	r0, [sp, #4]
    d5ea:	f000 fbb1 	bl	dd50 <am_hal_interrupt_master_set>
    d5ee:	e7f0      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d5f0:	f000 fbaa 	bl	dd48 <am_hal_interrupt_master_disable>
    d5f4:	4603      	mov	r3, r0
    d5f6:	4893      	ldr	r0, [pc, #588]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d5f8:	9302      	str	r3, [sp, #8]
    d5fa:	f000 fa1b 	bl	da34 <am_hal_flash_load_ui32>
    d5fe:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d602:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d606:	488f      	ldr	r0, [pc, #572]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d608:	f000 fa18 	bl	da3c <am_hal_flash_store_ui32>
    d60c:	9802      	ldr	r0, [sp, #8]
    d60e:	f000 fb9f 	bl	dd50 <am_hal_interrupt_master_set>
    d612:	f000 fb99 	bl	dd48 <am_hal_interrupt_master_disable>
    d616:	4603      	mov	r3, r0
    d618:	488a      	ldr	r0, [pc, #552]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d61a:	9303      	str	r3, [sp, #12]
    d61c:	f000 fa0a 	bl	da34 <am_hal_flash_load_ui32>
    d620:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d624:	f441 61ee 	orr.w	r1, r1, #1904	; 0x770
    d628:	4886      	ldr	r0, [pc, #536]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d62a:	f000 fa07 	bl	da3c <am_hal_flash_store_ui32>
    d62e:	9803      	ldr	r0, [sp, #12]
    d630:	f000 fb8e 	bl	dd50 <am_hal_interrupt_master_set>
    d634:	f000 fb88 	bl	dd48 <am_hal_interrupt_master_disable>
    d638:	4603      	mov	r3, r0
    d63a:	4882      	ldr	r0, [pc, #520]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d63c:	9304      	str	r3, [sp, #16]
    d63e:	f000 f9f9 	bl	da34 <am_hal_flash_load_ui32>
    d642:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d646:	f021 010f 	bic.w	r1, r1, #15
    d64a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d64e:	f041 0103 	orr.w	r1, r1, #3
    d652:	487c      	ldr	r0, [pc, #496]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d654:	f000 f9f2 	bl	da3c <am_hal_flash_store_ui32>
    d658:	9804      	ldr	r0, [sp, #16]
    d65a:	f000 fb79 	bl	dd50 <am_hal_interrupt_master_set>
    d65e:	e7b8      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d660:	f000 fb72 	bl	dd48 <am_hal_interrupt_master_disable>
    d664:	4603      	mov	r3, r0
    d666:	4877      	ldr	r0, [pc, #476]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d668:	9305      	str	r3, [sp, #20]
    d66a:	f000 f9e3 	bl	da34 <am_hal_flash_load_ui32>
    d66e:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d672:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    d676:	4873      	ldr	r0, [pc, #460]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d678:	f000 f9e0 	bl	da3c <am_hal_flash_store_ui32>
    d67c:	9805      	ldr	r0, [sp, #20]
    d67e:	f000 fb67 	bl	dd50 <am_hal_interrupt_master_set>
    d682:	f000 fb61 	bl	dd48 <am_hal_interrupt_master_disable>
    d686:	4603      	mov	r3, r0
    d688:	486e      	ldr	r0, [pc, #440]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d68a:	9306      	str	r3, [sp, #24]
    d68c:	f000 f9d2 	bl	da34 <am_hal_flash_load_ui32>
    d690:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d694:	f441 61ea 	orr.w	r1, r1, #1872	; 0x750
    d698:	486a      	ldr	r0, [pc, #424]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d69a:	f000 f9cf 	bl	da3c <am_hal_flash_store_ui32>
    d69e:	9806      	ldr	r0, [sp, #24]
    d6a0:	f000 fb56 	bl	dd50 <am_hal_interrupt_master_set>
    d6a4:	f000 fb50 	bl	dd48 <am_hal_interrupt_master_disable>
    d6a8:	4603      	mov	r3, r0
    d6aa:	4866      	ldr	r0, [pc, #408]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d6ac:	9307      	str	r3, [sp, #28]
    d6ae:	f000 f9c1 	bl	da34 <am_hal_flash_load_ui32>
    d6b2:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d6b6:	f021 010f 	bic.w	r1, r1, #15
    d6ba:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d6be:	f041 0101 	orr.w	r1, r1, #1
    d6c2:	4860      	ldr	r0, [pc, #384]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d6c4:	f000 f9ba 	bl	da3c <am_hal_flash_store_ui32>
    d6c8:	9807      	ldr	r0, [sp, #28]
    d6ca:	f000 fb41 	bl	dd50 <am_hal_interrupt_master_set>
    d6ce:	e780      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d6d0:	f000 fb3a 	bl	dd48 <am_hal_interrupt_master_disable>
    d6d4:	4603      	mov	r3, r0
    d6d6:	485b      	ldr	r0, [pc, #364]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d6d8:	9308      	str	r3, [sp, #32]
    d6da:	f000 f9ab 	bl	da34 <am_hal_flash_load_ui32>
    d6de:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d6e2:	f441 51b8 	orr.w	r1, r1, #5888	; 0x1700
    d6e6:	4857      	ldr	r0, [pc, #348]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d6e8:	f000 f9a8 	bl	da3c <am_hal_flash_store_ui32>
    d6ec:	9808      	ldr	r0, [sp, #32]
    d6ee:	f000 fb2f 	bl	dd50 <am_hal_interrupt_master_set>
    d6f2:	f000 fb29 	bl	dd48 <am_hal_interrupt_master_disable>
    d6f6:	4603      	mov	r3, r0
    d6f8:	4852      	ldr	r0, [pc, #328]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d6fa:	9309      	str	r3, [sp, #36]	; 0x24
    d6fc:	f000 f99a 	bl	da34 <am_hal_flash_load_ui32>
    d700:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d704:	f441 61ec 	orr.w	r1, r1, #1888	; 0x760
    d708:	484e      	ldr	r0, [pc, #312]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d70a:	f000 f997 	bl	da3c <am_hal_flash_store_ui32>
    d70e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d710:	f000 fb1e 	bl	dd50 <am_hal_interrupt_master_set>
    d714:	f000 fb18 	bl	dd48 <am_hal_interrupt_master_disable>
    d718:	4603      	mov	r3, r0
    d71a:	484a      	ldr	r0, [pc, #296]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d71c:	930a      	str	r3, [sp, #40]	; 0x28
    d71e:	f000 f989 	bl	da34 <am_hal_flash_load_ui32>
    d722:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d726:	f021 010f 	bic.w	r1, r1, #15
    d72a:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
    d72e:	f041 0101 	orr.w	r1, r1, #1
    d732:	4844      	ldr	r0, [pc, #272]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d734:	f000 f982 	bl	da3c <am_hal_flash_store_ui32>
    d738:	980a      	ldr	r0, [sp, #40]	; 0x28
    d73a:	f000 fb09 	bl	dd50 <am_hal_interrupt_master_set>
    d73e:	e748      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d740:	2900      	cmp	r1, #0
    d742:	d05a      	beq.n	d7fa <am_hal_cachectrl_control+0x292>
    d744:	680c      	ldr	r4, [r1, #0]
    d746:	2c03      	cmp	r4, #3
    d748:	d834      	bhi.n	d7b4 <am_hal_cachectrl_control+0x24c>
    d74a:	f000 fafd 	bl	dd48 <am_hal_interrupt_master_disable>
    d74e:	4603      	mov	r3, r0
    d750:	483c      	ldr	r0, [pc, #240]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d752:	930b      	str	r3, [sp, #44]	; 0x2c
    d754:	f000 f96e 	bl	da34 <am_hal_flash_load_ui32>
    d758:	0323      	lsls	r3, r4, #12
    d75a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
    d75e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    d762:	f420 517c 	bic.w	r1, r0, #16128	; 0x3f00
    d766:	4319      	orrs	r1, r3
    d768:	4836      	ldr	r0, [pc, #216]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d76a:	f000 f967 	bl	da3c <am_hal_flash_store_ui32>
    d76e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d770:	f000 faee 	bl	dd50 <am_hal_interrupt_master_set>
    d774:	e72d      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d776:	2900      	cmp	r1, #0
    d778:	d03f      	beq.n	d7fa <am_hal_cachectrl_control+0x292>
    d77a:	680c      	ldr	r4, [r1, #0]
    d77c:	2c07      	cmp	r4, #7
    d77e:	d819      	bhi.n	d7b4 <am_hal_cachectrl_control+0x24c>
    d780:	f000 fae2 	bl	dd48 <am_hal_interrupt_master_disable>
    d784:	4603      	mov	r3, r0
    d786:	482f      	ldr	r0, [pc, #188]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d788:	930c      	str	r3, [sp, #48]	; 0x30
    d78a:	f000 f953 	bl	da34 <am_hal_flash_load_ui32>
    d78e:	0123      	lsls	r3, r4, #4
    d790:	f003 0370 	and.w	r3, r3, #112	; 0x70
    d794:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    d798:	f420 6177 	bic.w	r1, r0, #3952	; 0xf70
    d79c:	4319      	orrs	r1, r3
    d79e:	4829      	ldr	r0, [pc, #164]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d7a0:	f000 f94c 	bl	da3c <am_hal_flash_store_ui32>
    d7a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    d7a6:	f000 fad3 	bl	dd50 <am_hal_interrupt_master_set>
    d7aa:	e712      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d7ac:	b329      	cbz	r1, d7fa <am_hal_cachectrl_control+0x292>
    d7ae:	680c      	ldr	r4, [r1, #0]
    d7b0:	2c0f      	cmp	r4, #15
    d7b2:	d926      	bls.n	d802 <am_hal_cachectrl_control+0x29a>
    d7b4:	2001      	movs	r0, #1
    d7b6:	e6f5      	b.n	d5a4 <am_hal_cachectrl_control+0x3c>
    d7b8:	b1f9      	cbz	r1, d7fa <am_hal_cachectrl_control+0x292>
    d7ba:	684a      	ldr	r2, [r1, #4]
    d7bc:	4b22      	ldr	r3, [pc, #136]	; (d848 <am_hal_cachectrl_control+0x2e0>)
    d7be:	4013      	ands	r3, r2
    d7c0:	b9db      	cbnz	r3, d7fa <am_hal_cachectrl_control+0x292>
    d7c2:	688b      	ldr	r3, [r1, #8]
    d7c4:	4820      	ldr	r0, [pc, #128]	; (d848 <am_hal_cachectrl_control+0x2e0>)
    d7c6:	4018      	ands	r0, r3
    d7c8:	b9b8      	cbnz	r0, d7fa <am_hal_cachectrl_control+0x292>
    d7ca:	780c      	ldrb	r4, [r1, #0]
    d7cc:	b374      	cbz	r4, d82c <am_hal_cachectrl_control+0x2c4>
    d7ce:	2c01      	cmp	r4, #1
    d7d0:	d113      	bne.n	d7fa <am_hal_cachectrl_control+0x292>
    d7d2:	4c1b      	ldr	r4, [pc, #108]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d7d4:	61a2      	str	r2, [r4, #24]
    d7d6:	61e3      	str	r3, [r4, #28]
    d7d8:	784a      	ldrb	r2, [r1, #1]
    d7da:	6823      	ldr	r3, [r4, #0]
    d7dc:	f362 03c3 	bfi	r3, r2, #3, #1
    d7e0:	6023      	str	r3, [r4, #0]
    d7e2:	e6df      	b.n	d5a4 <am_hal_cachectrl_control+0x3c>
    d7e4:	2201      	movs	r2, #1
    d7e6:	e6da      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d7e8:	4b15      	ldr	r3, [pc, #84]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d7ea:	681b      	ldr	r3, [r3, #0]
    d7ec:	01db      	lsls	r3, r3, #7
    d7ee:	d406      	bmi.n	d7fe <am_hal_cachectrl_control+0x296>
    d7f0:	2007      	movs	r0, #7
    d7f2:	e6d7      	b.n	d5a4 <am_hal_cachectrl_control+0x3c>
    d7f4:	f44f 6288 	mov.w	r2, #1088	; 0x440
    d7f8:	e6d1      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d7fa:	2006      	movs	r0, #6
    d7fc:	e6d2      	b.n	d5a4 <am_hal_cachectrl_control+0x3c>
    d7fe:	2202      	movs	r2, #2
    d800:	e6cd      	b.n	d59e <am_hal_cachectrl_control+0x36>
    d802:	f000 faa1 	bl	dd48 <am_hal_interrupt_master_disable>
    d806:	4603      	mov	r3, r0
    d808:	480e      	ldr	r0, [pc, #56]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d80a:	930d      	str	r3, [sp, #52]	; 0x34
    d80c:	f000 f912 	bl	da34 <am_hal_flash_load_ui32>
    d810:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
    d814:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    d818:	f021 010f 	bic.w	r1, r1, #15
    d81c:	4321      	orrs	r1, r4
    d81e:	4809      	ldr	r0, [pc, #36]	; (d844 <am_hal_cachectrl_control+0x2dc>)
    d820:	f000 f90c 	bl	da3c <am_hal_flash_store_ui32>
    d824:	980d      	ldr	r0, [sp, #52]	; 0x34
    d826:	f000 fa93 	bl	dd50 <am_hal_interrupt_master_set>
    d82a:	e6d2      	b.n	d5d2 <am_hal_cachectrl_control+0x6a>
    d82c:	4c04      	ldr	r4, [pc, #16]	; (d840 <am_hal_cachectrl_control+0x2d8>)
    d82e:	6122      	str	r2, [r4, #16]
    d830:	6163      	str	r3, [r4, #20]
    d832:	784a      	ldrb	r2, [r1, #1]
    d834:	6823      	ldr	r3, [r4, #0]
    d836:	f362 0382 	bfi	r3, r2, #2, #1
    d83a:	6023      	str	r3, [r4, #0]
    d83c:	e6b2      	b.n	d5a4 <am_hal_cachectrl_control+0x3c>
    d83e:	bf00      	nop
    d840:	40018000 	.word	0x40018000
    d844:	40018004 	.word	0x40018004
    d848:	f800000f 	.word	0xf800000f

0000d84c <am_hal_clkgen_control>:
    d84c:	4b41      	ldr	r3, [pc, #260]	; (d954 <am_hal_clkgen_control+0x108>)
    d84e:	681a      	ldr	r2, [r3, #0]
    d850:	b912      	cbnz	r2, d858 <am_hal_clkgen_control+0xc>
    d852:	4a41      	ldr	r2, [pc, #260]	; (d958 <am_hal_clkgen_control+0x10c>)
    d854:	6812      	ldr	r2, [r2, #0]
    d856:	601a      	str	r2, [r3, #0]
    d858:	2809      	cmp	r0, #9
    d85a:	d878      	bhi.n	d94e <am_hal_clkgen_control+0x102>
    d85c:	e8df f000 	tbb	[pc, r0]
    d860:	261e160d 	.word	0x261e160d
    d864:	524c423a 	.word	0x524c423a
    d868:	055a      	.short	0x055a
    d86a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d86e:	2000      	movs	r0, #0
    d870:	6a1a      	ldr	r2, [r3, #32]
    d872:	f36f 0200 	bfc	r2, #0, #1
    d876:	621a      	str	r2, [r3, #32]
    d878:	4770      	bx	lr
    d87a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d87e:	2200      	movs	r2, #0
    d880:	2147      	movs	r1, #71	; 0x47
    d882:	6159      	str	r1, [r3, #20]
    d884:	4610      	mov	r0, r2
    d886:	619a      	str	r2, [r3, #24]
    d888:	615a      	str	r2, [r3, #20]
    d88a:	4770      	bx	lr
    d88c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d890:	2000      	movs	r0, #0
    d892:	68d3      	ldr	r3, [r2, #12]
    d894:	f023 0301 	bic.w	r3, r3, #1
    d898:	60d3      	str	r3, [r2, #12]
    d89a:	4770      	bx	lr
    d89c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8a0:	2000      	movs	r0, #0
    d8a2:	68d3      	ldr	r3, [r2, #12]
    d8a4:	f023 0302 	bic.w	r3, r3, #2
    d8a8:	60d3      	str	r3, [r2, #12]
    d8aa:	4770      	bx	lr
    d8ac:	4a2b      	ldr	r2, [pc, #172]	; (d95c <am_hal_clkgen_control+0x110>)
    d8ae:	68d3      	ldr	r3, [r2, #12]
    d8b0:	b2db      	uxtb	r3, r3
    d8b2:	2b21      	cmp	r3, #33	; 0x21
    d8b4:	d106      	bne.n	d8c4 <am_hal_clkgen_control+0x78>
    d8b6:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d8ba:	2101      	movs	r1, #1
    d8bc:	f361 2309 	bfi	r3, r1, #8, #2
    d8c0:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d8c4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8c8:	2000      	movs	r0, #0
    d8ca:	68d3      	ldr	r3, [r2, #12]
    d8cc:	f043 0301 	orr.w	r3, r3, #1
    d8d0:	60d3      	str	r3, [r2, #12]
    d8d2:	4770      	bx	lr
    d8d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d8d8:	2000      	movs	r0, #0
    d8da:	68d3      	ldr	r3, [r2, #12]
    d8dc:	f043 0302 	orr.w	r3, r3, #2
    d8e0:	60d3      	str	r3, [r2, #12]
    d8e2:	4770      	bx	lr
    d8e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8e8:	2200      	movs	r2, #0
    d8ea:	2047      	movs	r0, #71	; 0x47
    d8ec:	2101      	movs	r1, #1
    d8ee:	6158      	str	r0, [r3, #20]
    d8f0:	6199      	str	r1, [r3, #24]
    d8f2:	4610      	mov	r0, r2
    d8f4:	615a      	str	r2, [r3, #20]
    d8f6:	4770      	bx	lr
    d8f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d8fc:	2000      	movs	r0, #0
    d8fe:	68da      	ldr	r2, [r3, #12]
    d900:	60da      	str	r2, [r3, #12]
    d902:	4770      	bx	lr
    d904:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d908:	2000      	movs	r0, #0
    d90a:	68d3      	ldr	r3, [r2, #12]
    d90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d910:	60d3      	str	r3, [r2, #12]
    d912:	4770      	bx	lr
    d914:	b510      	push	{r4, lr}
    d916:	4a11      	ldr	r2, [pc, #68]	; (d95c <am_hal_clkgen_control+0x110>)
    d918:	68d3      	ldr	r3, [r2, #12]
    d91a:	b2db      	uxtb	r3, r3
    d91c:	2b21      	cmp	r3, #33	; 0x21
    d91e:	460c      	mov	r4, r1
    d920:	d008      	beq.n	d934 <am_hal_clkgen_control+0xe8>
    d922:	b194      	cbz	r4, d94a <am_hal_clkgen_control+0xfe>
    d924:	6823      	ldr	r3, [r4, #0]
    d926:	f043 0301 	orr.w	r3, r3, #1
    d92a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d92e:	2000      	movs	r0, #0
    d930:	6213      	str	r3, [r2, #32]
    d932:	bd10      	pop	{r4, pc}
    d934:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
    d938:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d93c:	f8a2 3120 	strh.w	r3, [r2, #288]	; 0x120
    d940:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
    d944:	f000 f82c 	bl	d9a0 <am_hal_flash_delay>
    d948:	e7eb      	b.n	d922 <am_hal_clkgen_control+0xd6>
    d94a:	4b05      	ldr	r3, [pc, #20]	; (d960 <am_hal_clkgen_control+0x114>)
    d94c:	e7ed      	b.n	d92a <am_hal_clkgen_control+0xde>
    d94e:	2006      	movs	r0, #6
    d950:	4770      	bx	lr
    d952:	bf00      	nop
    d954:	10001144 	.word	0x10001144
    d958:	4ffff000 	.word	0x4ffff000
    d95c:	40020000 	.word	0x40020000
    d960:	0025b801 	.word	0x0025b801

0000d964 <am_hal_clkgen_status_get>:
    d964:	b1a8      	cbz	r0, d992 <am_hal_clkgen_status_get+0x2e>
    d966:	b410      	push	{r4}
    d968:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d96c:	490a      	ldr	r1, [pc, #40]	; (d998 <am_hal_clkgen_status_get+0x34>)
    d96e:	6994      	ldr	r4, [r2, #24]
    d970:	4b0a      	ldr	r3, [pc, #40]	; (d99c <am_hal_clkgen_status_get+0x38>)
    d972:	f014 0f01 	tst.w	r4, #1
    d976:	bf08      	it	eq
    d978:	460b      	moveq	r3, r1
    d97a:	6003      	str	r3, [r0, #0]
    d97c:	69d3      	ldr	r3, [r2, #28]
    d97e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d982:	f003 0201 	and.w	r2, r3, #1
    d986:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d98a:	6042      	str	r2, [r0, #4]
    d98c:	7203      	strb	r3, [r0, #8]
    d98e:	2000      	movs	r0, #0
    d990:	4770      	bx	lr
    d992:	2006      	movs	r0, #6
    d994:	4770      	bx	lr
    d996:	bf00      	nop
    d998:	02dc6c00 	.word	0x02dc6c00
    d99c:	016e3600 	.word	0x016e3600

0000d9a0 <am_hal_flash_delay>:
    d9a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d9a6:	075b      	lsls	r3, r3, #29
    d9a8:	bf46      	itte	mi
    d9aa:	0040      	lslmi	r0, r0, #1
    d9ac:	230e      	movmi	r3, #14
    d9ae:	230b      	movpl	r3, #11
    d9b0:	4298      	cmp	r0, r3
    d9b2:	d800      	bhi.n	d9b6 <am_hal_flash_delay+0x16>
    d9b4:	4770      	bx	lr
    d9b6:	1ac0      	subs	r0, r0, r3
    d9b8:	4b00      	ldr	r3, [pc, #0]	; (d9bc <am_hal_flash_delay+0x1c>)
    d9ba:	4718      	bx	r3
    d9bc:	0800009d 	.word	0x0800009d

0000d9c0 <am_hal_flash_delay_status_check>:
    d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d9c4:	f89d 4020 	ldrb.w	r4, [sp, #32]
    d9c8:	460d      	mov	r5, r1
    d9ca:	4616      	mov	r6, r2
    d9cc:	461f      	mov	r7, r3
    d9ce:	b1b4      	cbz	r4, d9fe <am_hal_flash_delay_status_check+0x3e>
    d9d0:	4604      	mov	r4, r0
    d9d2:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    d9d6:	f8df 8058 	ldr.w	r8, [pc, #88]	; da30 <am_hal_flash_delay_status_check+0x70>
    d9da:	e009      	b.n	d9f0 <am_hal_flash_delay_status_check+0x30>
    d9dc:	b324      	cbz	r4, da28 <am_hal_flash_delay_status_check+0x68>
    d9de:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    d9e2:	f013 0f04 	tst.w	r3, #4
    d9e6:	bf14      	ite	ne
    d9e8:	2012      	movne	r0, #18
    d9ea:	2005      	moveq	r0, #5
    d9ec:	3c01      	subs	r4, #1
    d9ee:	47c0      	blx	r8
    d9f0:	682b      	ldr	r3, [r5, #0]
    d9f2:	4033      	ands	r3, r6
    d9f4:	429f      	cmp	r7, r3
    d9f6:	d1f1      	bne.n	d9dc <am_hal_flash_delay_status_check+0x1c>
    d9f8:	2000      	movs	r0, #0
    d9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9fe:	f8df 8030 	ldr.w	r8, [pc, #48]	; da30 <am_hal_flash_delay_status_check+0x70>
    da02:	4604      	mov	r4, r0
    da04:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
    da08:	e009      	b.n	da1e <am_hal_flash_delay_status_check+0x5e>
    da0a:	b16c      	cbz	r4, da28 <am_hal_flash_delay_status_check+0x68>
    da0c:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
    da10:	f013 0f04 	tst.w	r3, #4
    da14:	bf14      	ite	ne
    da16:	2012      	movne	r0, #18
    da18:	2005      	moveq	r0, #5
    da1a:	3c01      	subs	r4, #1
    da1c:	47c0      	blx	r8
    da1e:	682b      	ldr	r3, [r5, #0]
    da20:	4033      	ands	r3, r6
    da22:	429f      	cmp	r7, r3
    da24:	d0f1      	beq.n	da0a <am_hal_flash_delay_status_check+0x4a>
    da26:	e7e7      	b.n	d9f8 <am_hal_flash_delay_status_check+0x38>
    da28:	2004      	movs	r0, #4
    da2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    da2e:	bf00      	nop
    da30:	0800009d 	.word	0x0800009d

0000da34 <am_hal_flash_load_ui32>:
    da34:	4b00      	ldr	r3, [pc, #0]	; (da38 <am_hal_flash_load_ui32+0x4>)
    da36:	4718      	bx	r3
    da38:	08000075 	.word	0x08000075

0000da3c <am_hal_flash_store_ui32>:
    da3c:	4b01      	ldr	r3, [pc, #4]	; (da44 <am_hal_flash_store_ui32+0x8>)
    da3e:	f043 0301 	orr.w	r3, r3, #1
    da42:	4718      	bx	r3
    da44:	10001028 	.word	0x10001028

0000da48 <am_hal_gpio_pinconfig>:
    da48:	2831      	cmp	r0, #49	; 0x31
    da4a:	d901      	bls.n	da50 <am_hal_gpio_pinconfig+0x8>
    da4c:	2006      	movs	r0, #6
    da4e:	4770      	bx	lr
    da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da54:	f001 0307 	and.w	r3, r1, #7
    da58:	f011 06e0 	ands.w	r6, r1, #224	; 0xe0
    da5c:	b085      	sub	sp, #20
    da5e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    da62:	f3c1 04c1 	ubfx	r4, r1, #3, #2
    da66:	d014      	beq.n	da92 <am_hal_gpio_pinconfig+0x4a>
    da68:	f3c1 1742 	ubfx	r7, r1, #5, #3
    da6c:	1dbd      	adds	r5, r7, #6
    da6e:	f005 0507 	and.w	r5, r5, #7
    da72:	2d03      	cmp	r5, #3
    da74:	f042 0201 	orr.w	r2, r2, #1
    da78:	f200 80a7 	bhi.w	dbca <am_hal_gpio_pinconfig+0x182>
    da7c:	4d82      	ldr	r5, [pc, #520]	; (dc88 <am_hal_gpio_pinconfig+0x240>)
    da7e:	5c2d      	ldrb	r5, [r5, r0]
    da80:	07ee      	lsls	r6, r5, #31
    da82:	d403      	bmi.n	da8c <am_hal_gpio_pinconfig+0x44>
    da84:	4881      	ldr	r0, [pc, #516]	; (dc8c <am_hal_gpio_pinconfig+0x244>)
    da86:	b005      	add	sp, #20
    da88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da8c:	3f02      	subs	r7, #2
    da8e:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    da92:	2c00      	cmp	r4, #0
    da94:	f040 8091 	bne.w	dbba <am_hal_gpio_pinconfig+0x172>
    da98:	4c7d      	ldr	r4, [pc, #500]	; (dc90 <am_hal_gpio_pinconfig+0x248>)
    da9a:	4d7e      	ldr	r5, [pc, #504]	; (dc94 <am_hal_gpio_pinconfig+0x24c>)
    da9c:	5c24      	ldrb	r4, [r4, r0]
    da9e:	5c2d      	ldrb	r5, [r5, r0]
    daa0:	411c      	asrs	r4, r3
    daa2:	f014 0f01 	tst.w	r4, #1
    daa6:	bf0c      	ite	eq
    daa8:	2400      	moveq	r4, #0
    daaa:	2402      	movne	r4, #2
    daac:	42ab      	cmp	r3, r5
    daae:	ea42 0204 	orr.w	r2, r2, r4
    dab2:	f000 8096 	beq.w	dbe2 <am_hal_gpio_pinconfig+0x19a>
    dab6:	f3c1 3341 	ubfx	r3, r1, #13, #2
    daba:	105d      	asrs	r5, r3, #1
    dabc:	f3c1 2681 	ubfx	r6, r1, #10, #2
    dac0:	00db      	lsls	r3, r3, #3
    dac2:	f3c1 2e07 	ubfx	lr, r1, #8, #8
    dac6:	f003 0408 	and.w	r4, r3, #8
    daca:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
    dace:	f00e 060c 	and.w	r6, lr, #12
    dad2:	f3c1 3500 	ubfx	r5, r1, #12, #1
    dad6:	2e04      	cmp	r6, #4
    dad8:	ea43 0304 	orr.w	r3, r3, r4
    dadc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    dae0:	462c      	mov	r4, r5
    dae2:	f000 808b 	beq.w	dbfc <am_hal_gpio_pinconfig+0x1b4>
    dae6:	4c6c      	ldr	r4, [pc, #432]	; (dc98 <am_hal_gpio_pinconfig+0x250>)
    dae8:	6827      	ldr	r7, [r4, #0]
    daea:	1bcf      	subs	r7, r1, r7
    daec:	fab7 f787 	clz	r7, r7
    daf0:	097f      	lsrs	r7, r7, #5
    daf2:	f01e 0f60 	tst.w	lr, #96	; 0x60
    daf6:	bf04      	itt	eq
    daf8:	f3c1 34c0 	ubfxeq	r4, r1, #15, #1
    dafc:	f364 0300 	bfieq	r3, r4, #0, #1
    db00:	0084      	lsls	r4, r0, #2
    db02:	f3c1 2101 	ubfx	r1, r1, #8, #2
    db06:	2902      	cmp	r1, #2
    db08:	ea4f 05c0 	mov.w	r5, r0, lsl #3
    db0c:	d078      	beq.n	dc00 <am_hal_gpio_pinconfig+0x1b8>
    db0e:	d87f      	bhi.n	dc10 <am_hal_gpio_pinconfig+0x1c8>
    db10:	2901      	cmp	r1, #1
    db12:	f04f 0100 	mov.w	r1, #0
    db16:	bf08      	it	eq
    db18:	f042 0204 	orreq.w	r2, r2, #4
    db1c:	f005 0518 	and.w	r5, r5, #24
    db20:	9101      	str	r1, [sp, #4]
    db22:	f004 041c 	and.w	r4, r4, #28
    db26:	f020 0a03 	bic.w	sl, r0, #3
    db2a:	f04f 090f 	mov.w	r9, #15
    db2e:	fa09 f904 	lsl.w	r9, r9, r4
    db32:	0841      	lsrs	r1, r0, #1
    db34:	26ff      	movs	r6, #255	; 0xff
    db36:	fa03 f404 	lsl.w	r4, r3, r4
    db3a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    db3e:	40ae      	lsls	r6, r5
    db40:	9300      	str	r3, [sp, #0]
    db42:	fa02 f505 	lsl.w	r5, r2, r5
    db46:	4683      	mov	fp, r0
    db48:	f021 0803 	bic.w	r8, r1, #3
    db4c:	f000 f8fc 	bl	dd48 <am_hal_interrupt_master_disable>
    db50:	9b00      	ldr	r3, [sp, #0]
    db52:	9003      	str	r0, [sp, #12]
    db54:	ea6f 0909 	mvn.w	r9, r9
    db58:	43f6      	mvns	r6, r6
    db5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    db5e:	f8df e15c 	ldr.w	lr, [pc, #348]	; dcbc <am_hal_gpio_pinconfig+0x274>
    db62:	4a4e      	ldr	r2, [pc, #312]	; (dc9c <am_hal_gpio_pinconfig+0x254>)
    db64:	b15f      	cbz	r7, db7e <am_hal_gpio_pinconfig+0x136>
    db66:	ea4f 07db 	mov.w	r7, fp, lsr #3
    db6a:	f00b 001f 	and.w	r0, fp, #31
    db6e:	f007 0704 	and.w	r7, r7, #4
    db72:	f04f 0b01 	mov.w	fp, #1
    db76:	494a      	ldr	r1, [pc, #296]	; (dca0 <am_hal_gpio_pinconfig+0x258>)
    db78:	fa0b f000 	lsl.w	r0, fp, r0
    db7c:	5078      	str	r0, [r7, r1]
    db7e:	4849      	ldr	r0, [pc, #292]	; (dca4 <am_hal_gpio_pinconfig+0x25c>)
    db80:	2773      	movs	r7, #115	; 0x73
    db82:	6607      	str	r7, [r0, #96]	; 0x60
    db84:	681f      	ldr	r7, [r3, #0]
    db86:	4037      	ands	r7, r6
    db88:	433d      	orrs	r5, r7
    db8a:	601d      	str	r5, [r3, #0]
    db8c:	f858 300e 	ldr.w	r3, [r8, lr]
    db90:	ea09 0303 	and.w	r3, r9, r3
    db94:	4323      	orrs	r3, r4
    db96:	f848 300e 	str.w	r3, [r8, lr]
    db9a:	f85a 3002 	ldr.w	r3, [sl, r2]
    db9e:	401e      	ands	r6, r3
    dba0:	9b01      	ldr	r3, [sp, #4]
    dba2:	2400      	movs	r4, #0
    dba4:	431e      	orrs	r6, r3
    dba6:	f84a 6002 	str.w	r6, [sl, r2]
    dbaa:	6604      	str	r4, [r0, #96]	; 0x60
    dbac:	9803      	ldr	r0, [sp, #12]
    dbae:	f000 f8cf 	bl	dd50 <am_hal_interrupt_master_set>
    dbb2:	4620      	mov	r0, r4
    dbb4:	b005      	add	sp, #20
    dbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbba:	2c01      	cmp	r4, #1
    dbbc:	d017      	beq.n	dbee <am_hal_gpio_pinconfig+0x1a6>
    dbbe:	2c02      	cmp	r4, #2
    dbc0:	d035      	beq.n	dc2e <am_hal_gpio_pinconfig+0x1e6>
    dbc2:	4839      	ldr	r0, [pc, #228]	; (dca8 <am_hal_gpio_pinconfig+0x260>)
    dbc4:	b005      	add	sp, #20
    dbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbca:	2ec0      	cmp	r6, #192	; 0xc0
    dbcc:	d02a      	beq.n	dc24 <am_hal_gpio_pinconfig+0x1dc>
    dbce:	2e20      	cmp	r6, #32
    dbd0:	f47f af5f 	bne.w	da92 <am_hal_gpio_pinconfig+0x4a>
    dbd4:	2814      	cmp	r0, #20
    dbd6:	f43f af55 	beq.w	da84 <am_hal_gpio_pinconfig+0x3c>
    dbda:	2c00      	cmp	r4, #0
    dbdc:	f43f af5c 	beq.w	da98 <am_hal_gpio_pinconfig+0x50>
    dbe0:	e7eb      	b.n	dbba <am_hal_gpio_pinconfig+0x172>
    dbe2:	f3c1 4402 	ubfx	r4, r1, #16, #3
    dbe6:	2c07      	cmp	r4, #7
    dbe8:	d128      	bne.n	dc3c <am_hal_gpio_pinconfig+0x1f4>
    dbea:	4830      	ldr	r0, [pc, #192]	; (dcac <am_hal_gpio_pinconfig+0x264>)
    dbec:	e74b      	b.n	da86 <am_hal_gpio_pinconfig+0x3e>
    dbee:	4c26      	ldr	r4, [pc, #152]	; (dc88 <am_hal_gpio_pinconfig+0x240>)
    dbf0:	5c24      	ldrb	r4, [r4, r0]
    dbf2:	07a5      	lsls	r5, r4, #30
    dbf4:	d5e5      	bpl.n	dbc2 <am_hal_gpio_pinconfig+0x17a>
    dbf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dbfa:	e74d      	b.n	da98 <am_hal_gpio_pinconfig+0x50>
    dbfc:	2701      	movs	r7, #1
    dbfe:	e778      	b.n	daf2 <am_hal_gpio_pinconfig+0xaa>
    dc00:	f005 0518 	and.w	r5, r5, #24
    dc04:	f04f 0801 	mov.w	r8, #1
    dc08:	fa08 f105 	lsl.w	r1, r8, r5
    dc0c:	9101      	str	r1, [sp, #4]
    dc0e:	e788      	b.n	db22 <am_hal_gpio_pinconfig+0xda>
    dc10:	f005 0518 	and.w	r5, r5, #24
    dc14:	f04f 0801 	mov.w	r8, #1
    dc18:	fa08 f105 	lsl.w	r1, r8, r5
    dc1c:	f042 0204 	orr.w	r2, r2, #4
    dc20:	9101      	str	r1, [sp, #4]
    dc22:	e77e      	b.n	db22 <am_hal_gpio_pinconfig+0xda>
    dc24:	2814      	cmp	r0, #20
    dc26:	f43f af34 	beq.w	da92 <am_hal_gpio_pinconfig+0x4a>
    dc2a:	4821      	ldr	r0, [pc, #132]	; (dcb0 <am_hal_gpio_pinconfig+0x268>)
    dc2c:	e72b      	b.n	da86 <am_hal_gpio_pinconfig+0x3e>
    dc2e:	4c16      	ldr	r4, [pc, #88]	; (dc88 <am_hal_gpio_pinconfig+0x240>)
    dc30:	5c24      	ldrb	r4, [r4, r0]
    dc32:	0764      	lsls	r4, r4, #29
    dc34:	d5c5      	bpl.n	dbc2 <am_hal_gpio_pinconfig+0x17a>
    dc36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc3a:	e72d      	b.n	da98 <am_hal_gpio_pinconfig+0x50>
    dc3c:	4d1d      	ldr	r5, [pc, #116]	; (dcb4 <am_hal_gpio_pinconfig+0x26c>)
    dc3e:	f3c1 43c1 	ubfx	r3, r1, #19, #2
    dc42:	f815 6020 	ldrb.w	r6, [r5, r0, lsl #2]
    dc46:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    dc4a:	429e      	cmp	r6, r3
    dc4c:	d00c      	beq.n	dc68 <am_hal_gpio_pinconfig+0x220>
    dc4e:	0084      	lsls	r4, r0, #2
    dc50:	4425      	add	r5, r4
    dc52:	786e      	ldrb	r6, [r5, #1]
    dc54:	429e      	cmp	r6, r3
    dc56:	d012      	beq.n	dc7e <am_hal_gpio_pinconfig+0x236>
    dc58:	78ae      	ldrb	r6, [r5, #2]
    dc5a:	429e      	cmp	r6, r3
    dc5c:	d00d      	beq.n	dc7a <am_hal_gpio_pinconfig+0x232>
    dc5e:	78ed      	ldrb	r5, [r5, #3]
    dc60:	429d      	cmp	r5, r3
    dc62:	d00e      	beq.n	dc82 <am_hal_gpio_pinconfig+0x23a>
    dc64:	4814      	ldr	r0, [pc, #80]	; (dcb8 <am_hal_gpio_pinconfig+0x270>)
    dc66:	e70e      	b.n	da86 <am_hal_gpio_pinconfig+0x3e>
    dc68:	2300      	movs	r3, #0
    dc6a:	0084      	lsls	r4, r0, #2
    dc6c:	005b      	lsls	r3, r3, #1
    dc6e:	f3c1 5540 	ubfx	r5, r1, #21, #1
    dc72:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
    dc76:	2700      	movs	r7, #0
    dc78:	e743      	b.n	db02 <am_hal_gpio_pinconfig+0xba>
    dc7a:	2302      	movs	r3, #2
    dc7c:	e7f6      	b.n	dc6c <am_hal_gpio_pinconfig+0x224>
    dc7e:	2301      	movs	r3, #1
    dc80:	e7f4      	b.n	dc6c <am_hal_gpio_pinconfig+0x224>
    dc82:	2303      	movs	r3, #3
    dc84:	e7f2      	b.n	dc6c <am_hal_gpio_pinconfig+0x224>
    dc86:	bf00      	nop
    dc88:	0000e708 	.word	0x0000e708
    dc8c:	08000100 	.word	0x08000100
    dc90:	0000e804 	.word	0x0000e804
    dc94:	0000e840 	.word	0x0000e840
    dc98:	0000e838 	.word	0x0000e838
    dc9c:	400100e0 	.word	0x400100e0
    dca0:	400100b4 	.word	0x400100b4
    dca4:	40010000 	.word	0x40010000
    dca8:	08000102 	.word	0x08000102
    dcac:	08000103 	.word	0x08000103
    dcb0:	08000101 	.word	0x08000101
    dcb4:	0000e73c 	.word	0x0000e73c
    dcb8:	08000104 	.word	0x08000104
    dcbc:	40010040 	.word	0x40010040

0000dcc0 <am_hal_gpio_state_write>:
    dcc0:	2831      	cmp	r0, #49	; 0x31
    dcc2:	d901      	bls.n	dcc8 <am_hal_gpio_state_write+0x8>
    dcc4:	2005      	movs	r0, #5
    dcc6:	4770      	bx	lr
    dcc8:	2905      	cmp	r1, #5
    dcca:	d901      	bls.n	dcd0 <am_hal_gpio_state_write+0x10>
    dccc:	2006      	movs	r0, #6
    dcce:	4770      	bx	lr
    dcd0:	b570      	push	{r4, r5, r6, lr}
    dcd2:	f000 031f 	and.w	r3, r0, #31
    dcd6:	b082      	sub	sp, #8
    dcd8:	08c0      	lsrs	r0, r0, #3
    dcda:	2201      	movs	r2, #1
    dcdc:	460d      	mov	r5, r1
    dcde:	f000 0404 	and.w	r4, r0, #4
    dce2:	fa02 f603 	lsl.w	r6, r2, r3
    dce6:	f000 f82f 	bl	dd48 <am_hal_interrupt_master_disable>
    dcea:	1e69      	subs	r1, r5, #1
    dcec:	9001      	str	r0, [sp, #4]
    dcee:	2904      	cmp	r1, #4
    dcf0:	d817      	bhi.n	dd22 <am_hal_gpio_state_write+0x62>
    dcf2:	e8df f001 	tbb	[pc, r1]
    dcf6:	0e13      	.short	0x0e13
    dcf8:	030b      	.short	0x030b
    dcfa:	19          	.byte	0x19
    dcfb:	00          	.byte	0x00
    dcfc:	4b0d      	ldr	r3, [pc, #52]	; (dd34 <am_hal_gpio_state_write+0x74>)
    dcfe:	50e6      	str	r6, [r4, r3]
    dd00:	9801      	ldr	r0, [sp, #4]
    dd02:	f000 f825 	bl	dd50 <am_hal_interrupt_master_set>
    dd06:	2000      	movs	r0, #0
    dd08:	b002      	add	sp, #8
    dd0a:	bd70      	pop	{r4, r5, r6, pc}
    dd0c:	4b0a      	ldr	r3, [pc, #40]	; (dd38 <am_hal_gpio_state_write+0x78>)
    dd0e:	50e6      	str	r6, [r4, r3]
    dd10:	e7f6      	b.n	dd00 <am_hal_gpio_state_write+0x40>
    dd12:	4a0a      	ldr	r2, [pc, #40]	; (dd3c <am_hal_gpio_state_write+0x7c>)
    dd14:	58a3      	ldr	r3, [r4, r2]
    dd16:	4073      	eors	r3, r6
    dd18:	50a3      	str	r3, [r4, r2]
    dd1a:	e7f1      	b.n	dd00 <am_hal_gpio_state_write+0x40>
    dd1c:	4b08      	ldr	r3, [pc, #32]	; (dd40 <am_hal_gpio_state_write+0x80>)
    dd1e:	50e6      	str	r6, [r4, r3]
    dd20:	e7ee      	b.n	dd00 <am_hal_gpio_state_write+0x40>
    dd22:	4b08      	ldr	r3, [pc, #32]	; (dd44 <am_hal_gpio_state_write+0x84>)
    dd24:	50e6      	str	r6, [r4, r3]
    dd26:	e7eb      	b.n	dd00 <am_hal_gpio_state_write+0x40>
    dd28:	4a03      	ldr	r2, [pc, #12]	; (dd38 <am_hal_gpio_state_write+0x78>)
    dd2a:	58a3      	ldr	r3, [r4, r2]
    dd2c:	4073      	eors	r3, r6
    dd2e:	50a3      	str	r3, [r4, r2]
    dd30:	e7e6      	b.n	dd00 <am_hal_gpio_state_write+0x40>
    dd32:	bf00      	nop
    dd34:	400100a8 	.word	0x400100a8
    dd38:	400100b4 	.word	0x400100b4
    dd3c:	40010088 	.word	0x40010088
    dd40:	40010090 	.word	0x40010090
    dd44:	40010098 	.word	0x40010098

0000dd48 <am_hal_interrupt_master_disable>:
    dd48:	f3ef 8010 	mrs	r0, PRIMASK
    dd4c:	b672      	cpsid	i
    dd4e:	4770      	bx	lr

0000dd50 <am_hal_interrupt_master_set>:
    dd50:	f380 8810 	msr	PRIMASK, r0
    dd54:	4770      	bx	lr
    dd56:	bf00      	nop

0000dd58 <am_hal_itm_enable>:
    dd58:	4a0b      	ldr	r2, [pc, #44]	; (dd88 <am_hal_itm_enable+0x30>)
    dd5a:	68d3      	ldr	r3, [r2, #12]
    dd5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dd60:	60d3      	str	r3, [r2, #12]
    dd62:	68d3      	ldr	r3, [r2, #12]
    dd64:	01db      	lsls	r3, r3, #7
    dd66:	d5fc      	bpl.n	dd62 <am_hal_itm_enable+0xa>
    dd68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    dd6c:	4907      	ldr	r1, [pc, #28]	; (dd8c <am_hal_itm_enable+0x34>)
    dd6e:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    dd72:	4a07      	ldr	r2, [pc, #28]	; (dd90 <am_hal_itm_enable+0x38>)
    dd74:	200f      	movs	r0, #15
    dd76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dd7a:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    dd7e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    dd82:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    dd86:	4770      	bx	lr
    dd88:	e000edf0 	.word	0xe000edf0
    dd8c:	c5acce55 	.word	0xc5acce55
    dd90:	00150511 	.word	0x00150511

0000dd94 <am_hal_itm_disable>:
    dd94:	b510      	push	{r4, lr}
    dd96:	4b25      	ldr	r3, [pc, #148]	; (de2c <am_hal_itm_disable+0x98>)
    dd98:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    dd9c:	b9b3      	cbnz	r3, ddcc <am_hal_itm_disable+0x38>
    dd9e:	4b24      	ldr	r3, [pc, #144]	; (de30 <am_hal_itm_disable+0x9c>)
    dda0:	68da      	ldr	r2, [r3, #12]
    dda2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    dda6:	60da      	str	r2, [r3, #12]
    dda8:	68da      	ldr	r2, [r3, #12]
    ddaa:	01d2      	lsls	r2, r2, #7
    ddac:	d5fc      	bpl.n	dda8 <am_hal_itm_disable+0x14>
    ddae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
    ddb2:	4920      	ldr	r1, [pc, #128]	; (de34 <am_hal_itm_disable+0xa0>)
    ddb4:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
    ddb8:	4a1f      	ldr	r2, [pc, #124]	; (de38 <am_hal_itm_disable+0xa4>)
    ddba:	200f      	movs	r0, #15
    ddbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ddc0:	f8c3 0e40 	str.w	r0, [r3, #3648]	; 0xe40
    ddc4:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00
    ddc8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
    ddcc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    ddd0:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
    ddd4:	021b      	lsls	r3, r3, #8
    ddd6:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    ddda:	d4f9      	bmi.n	ddd0 <am_hal_itm_disable+0x3c>
    dddc:	f44f 7048 	mov.w	r0, #800	; 0x320
    dde0:	f7ff fdde 	bl	d9a0 <am_hal_flash_delay>
    dde4:	4b13      	ldr	r3, [pc, #76]	; (de34 <am_hal_itm_disable+0xa0>)
    dde6:	f8c4 3fb0 	str.w	r3, [r4, #4016]	; 0xfb0
    ddea:	4621      	mov	r1, r4
    ddec:	2064      	movs	r0, #100	; 0x64
    ddee:	f8d1 3e80 	ldr.w	r3, [r1, #3712]	; 0xe80
    ddf2:	f023 0301 	bic.w	r3, r3, #1
    ddf6:	f8c1 3e80 	str.w	r3, [r1, #3712]	; 0xe80
    ddfa:	f8d1 2e80 	ldr.w	r2, [r1, #3712]	; 0xe80
    ddfe:	4b0f      	ldr	r3, [pc, #60]	; (de3c <am_hal_itm_disable+0xa8>)
    de00:	4013      	ands	r3, r2
    de02:	2b00      	cmp	r3, #0
    de04:	d1f9      	bne.n	ddfa <am_hal_itm_disable+0x66>
    de06:	3801      	subs	r0, #1
    de08:	d1f1      	bne.n	ddee <am_hal_itm_disable+0x5a>
    de0a:	4a09      	ldr	r2, [pc, #36]	; (de30 <am_hal_itm_disable+0x9c>)
    de0c:	68d3      	ldr	r3, [r2, #12]
    de0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    de12:	60d3      	str	r3, [r2, #12]
    de14:	68d3      	ldr	r3, [r2, #12]
    de16:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    de1a:	d1fb      	bne.n	de14 <am_hal_itm_disable+0x80>
    de1c:	4a03      	ldr	r2, [pc, #12]	; (de2c <am_hal_itm_disable+0x98>)
    de1e:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    de22:	f8d2 3250 	ldr.w	r3, [r2, #592]	; 0x250
    de26:	2b00      	cmp	r3, #0
    de28:	d1fb      	bne.n	de22 <am_hal_itm_disable+0x8e>
    de2a:	bd10      	pop	{r4, pc}
    de2c:	40020000 	.word	0x40020000
    de30:	e000edf0 	.word	0xe000edf0
    de34:	c5acce55 	.word	0xc5acce55
    de38:	00150511 	.word	0x00150511
    de3c:	00800001 	.word	0x00800001

0000de40 <am_hal_itm_print>:
    de40:	7803      	ldrb	r3, [r0, #0]
    de42:	b1a3      	cbz	r3, de6e <am_hal_itm_print+0x2e>
    de44:	4602      	mov	r2, r0
    de46:	2300      	movs	r3, #0
    de48:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    de4c:	3301      	adds	r3, #1
    de4e:	2900      	cmp	r1, #0
    de50:	d1fa      	bne.n	de48 <am_hal_itm_print+0x8>
    de52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    de56:	b430      	push	{r4, r5}
    de58:	18c1      	adds	r1, r0, r3
    de5a:	4615      	mov	r5, r2
    de5c:	f810 4b01 	ldrb.w	r4, [r0], #1
    de60:	6813      	ldr	r3, [r2, #0]
    de62:	2b00      	cmp	r3, #0
    de64:	d0fc      	beq.n	de60 <am_hal_itm_print+0x20>
    de66:	4288      	cmp	r0, r1
    de68:	702c      	strb	r4, [r5, #0]
    de6a:	d1f7      	bne.n	de5c <am_hal_itm_print+0x1c>
    de6c:	bc30      	pop	{r4, r5}
    de6e:	4770      	bx	lr

0000de70 <am_hal_mcuctrl_info_get>:
    de70:	b4f0      	push	{r4, r5, r6, r7}
    de72:	b121      	cbz	r1, de7e <am_hal_mcuctrl_info_get+0xe>
    de74:	2801      	cmp	r0, #1
    de76:	d038      	beq.n	deea <am_hal_mcuctrl_info_get+0x7a>
    de78:	d320      	bcc.n	debc <am_hal_mcuctrl_info_get+0x4c>
    de7a:	2802      	cmp	r0, #2
    de7c:	d002      	beq.n	de84 <am_hal_mcuctrl_info_get+0x14>
    de7e:	2006      	movs	r0, #6
    de80:	bcf0      	pop	{r4, r5, r6, r7}
    de82:	4770      	bx	lr
    de84:	4a41      	ldr	r2, [pc, #260]	; (df8c <am_hal_mcuctrl_info_get+0x11c>)
    de86:	684d      	ldr	r5, [r1, #4]
    de88:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    de8c:	694c      	ldr	r4, [r1, #20]
    de8e:	f003 0601 	and.w	r6, r3, #1
    de92:	f3c3 0040 	ubfx	r0, r3, #1, #1
    de96:	f3c3 0380 	ubfx	r3, r3, #2, #1
    de9a:	700e      	strb	r6, [r1, #0]
    de9c:	7208      	strb	r0, [r1, #8]
    de9e:	740b      	strb	r3, [r1, #16]
    dea0:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
    dea4:	60cb      	str	r3, [r1, #12]
    dea6:	f8d2 01c0 	ldr.w	r0, [r2, #448]	; 0x1c0
    deaa:	4328      	orrs	r0, r5
    deac:	6048      	str	r0, [r1, #4]
    deae:	f8d2 31c8 	ldr.w	r3, [r2, #456]	; 0x1c8
    deb2:	4323      	orrs	r3, r4
    deb4:	2000      	movs	r0, #0
    deb6:	614b      	str	r3, [r1, #20]
    deb8:	bcf0      	pop	{r4, r5, r6, r7}
    deba:	4770      	bx	lr
    debc:	4a33      	ldr	r2, [pc, #204]	; (df8c <am_hal_mcuctrl_info_get+0x11c>)
    debe:	6993      	ldr	r3, [r2, #24]
    dec0:	f3c3 1080 	ubfx	r0, r3, #6, #1
    dec4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dec8:	7008      	strb	r0, [r1, #0]
    deca:	704b      	strb	r3, [r1, #1]
    decc:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    ded0:	f3c3 6381 	ubfx	r3, r3, #26, #2
    ded4:	710b      	strb	r3, [r1, #4]
    ded6:	6953      	ldr	r3, [r2, #20]
    ded8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    dedc:	f003 0301 	and.w	r3, r3, #1
    dee0:	2000      	movs	r0, #0
    dee2:	708a      	strb	r2, [r1, #2]
    dee4:	70cb      	strb	r3, [r1, #3]
    dee6:	bcf0      	pop	{r4, r5, r6, r7}
    dee8:	4770      	bx	lr
    deea:	4b28      	ldr	r3, [pc, #160]	; (df8c <am_hal_mcuctrl_info_get+0x11c>)
    deec:	4c28      	ldr	r4, [pc, #160]	; (df90 <am_hal_mcuctrl_info_get+0x120>)
    deee:	681a      	ldr	r2, [r3, #0]
    def0:	600a      	str	r2, [r1, #0]
    def2:	6858      	ldr	r0, [r3, #4]
    def4:	6048      	str	r0, [r1, #4]
    def6:	6898      	ldr	r0, [r3, #8]
    def8:	6088      	str	r0, [r1, #8]
    defa:	68d8      	ldr	r0, [r3, #12]
    defc:	60c8      	str	r0, [r1, #12]
    defe:	691d      	ldr	r5, [r3, #16]
    df00:	4824      	ldr	r0, [pc, #144]	; (df94 <am_hal_mcuctrl_info_get+0x124>)
    df02:	610d      	str	r5, [r1, #16]
    df04:	f3c2 5703 	ubfx	r7, r2, #20, #4
    df08:	f3c2 4603 	ubfx	r6, r2, #16, #4
    df0c:	695d      	ldr	r5, [r3, #20]
    df0e:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
    df12:	4b21      	ldr	r3, [pc, #132]	; (df98 <am_hal_mcuctrl_info_get+0x128>)
    df14:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    df18:	6208      	str	r0, [r1, #32]
    df1a:	f002 0201 	and.w	r2, r2, #1
    df1e:	614d      	str	r5, [r1, #20]
    df20:	61cc      	str	r4, [r1, #28]
    df22:	618a      	str	r2, [r1, #24]
    df24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    df28:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
    df2c:	b2d0      	uxtb	r0, r2
    df2e:	f004 020f 	and.w	r2, r4, #15
    df32:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
    df36:	624a      	str	r2, [r1, #36]	; 0x24
    df38:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    df3c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
    df40:	f3c2 1003 	ubfx	r0, r2, #4, #4
    df44:	f004 020f 	and.w	r2, r4, #15
    df48:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
    df4c:	628a      	str	r2, [r1, #40]	; 0x28
    df4e:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
    df52:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    df56:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
    df5a:	f3c2 1203 	ubfx	r2, r2, #4, #4
    df5e:	4302      	orrs	r2, r0
    df60:	62ca      	str	r2, [r1, #44]	; 0x2c
    df62:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
    df66:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
    df6a:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
    df6e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    df72:	b2c0      	uxtb	r0, r0
    df74:	0400      	lsls	r0, r0, #16
    df76:	ea40 6305 	orr.w	r3, r0, r5, lsl #24
    df7a:	b2d2      	uxtb	r2, r2
    df7c:	431a      	orrs	r2, r3
    df7e:	b2e3      	uxtb	r3, r4
    df80:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    df84:	630b      	str	r3, [r1, #48]	; 0x30
    df86:	2000      	movs	r0, #0
    df88:	bcf0      	pop	{r4, r5, r6, r7}
    df8a:	4770      	bx	lr
    df8c:	40020000 	.word	0x40020000
    df90:	0000e874 	.word	0x0000e874
    df94:	0000e8b4 	.word	0x0000e8b4
    df98:	f0000f00 	.word	0xf0000f00

0000df9c <am_hal_pwrctrl_periph_enable>:
    df9c:	b570      	push	{r4, r5, r6, lr}
    df9e:	b082      	sub	sp, #8
    dfa0:	4604      	mov	r4, r0
    dfa2:	f7ff fed1 	bl	dd48 <am_hal_interrupt_master_disable>
    dfa6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dfaa:	4d0f      	ldr	r5, [pc, #60]	; (dfe8 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfac:	4e0f      	ldr	r6, [pc, #60]	; (dfec <am_hal_pwrctrl_periph_enable+0x50>)
    dfae:	9001      	str	r0, [sp, #4]
    dfb0:	00a4      	lsls	r4, r4, #2
    dfb2:	68aa      	ldr	r2, [r5, #8]
    dfb4:	5933      	ldr	r3, [r6, r4]
    dfb6:	4313      	orrs	r3, r2
    dfb8:	60ab      	str	r3, [r5, #8]
    dfba:	9801      	ldr	r0, [sp, #4]
    dfbc:	4434      	add	r4, r6
    dfbe:	f7ff fec7 	bl	dd50 <am_hal_interrupt_master_set>
    dfc2:	20a0      	movs	r0, #160	; 0xa0
    dfc4:	f7ff fcec 	bl	d9a0 <am_hal_flash_delay>
    dfc8:	69ab      	ldr	r3, [r5, #24]
    dfca:	6864      	ldr	r4, [r4, #4]
    dfcc:	4223      	tst	r3, r4
    dfce:	d103      	bne.n	dfd8 <am_hal_pwrctrl_periph_enable+0x3c>
    dfd0:	20a0      	movs	r0, #160	; 0xa0
    dfd2:	f7ff fce5 	bl	d9a0 <am_hal_flash_delay>
    dfd6:	69ab      	ldr	r3, [r5, #24]
    dfd8:	4b03      	ldr	r3, [pc, #12]	; (dfe8 <am_hal_pwrctrl_periph_enable+0x4c>)
    dfda:	699b      	ldr	r3, [r3, #24]
    dfdc:	4223      	tst	r3, r4
    dfde:	bf0c      	ite	eq
    dfe0:	2001      	moveq	r0, #1
    dfe2:	2000      	movne	r0, #0
    dfe4:	b002      	add	sp, #8
    dfe6:	bd70      	pop	{r4, r5, r6, pc}
    dfe8:	40021000 	.word	0x40021000
    dfec:	0000e8f4 	.word	0x0000e8f4

0000dff0 <am_hal_pwrctrl_periph_disable>:
    dff0:	b570      	push	{r4, r5, r6, lr}
    dff2:	b082      	sub	sp, #8
    dff4:	4604      	mov	r4, r0
    dff6:	f7ff fea7 	bl	dd48 <am_hal_interrupt_master_disable>
    dffa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    dffe:	4d10      	ldr	r5, [pc, #64]	; (e040 <am_hal_pwrctrl_periph_disable+0x50>)
    e000:	4e10      	ldr	r6, [pc, #64]	; (e044 <am_hal_pwrctrl_periph_disable+0x54>)
    e002:	9001      	str	r0, [sp, #4]
    e004:	00a4      	lsls	r4, r4, #2
    e006:	68ab      	ldr	r3, [r5, #8]
    e008:	5932      	ldr	r2, [r6, r4]
    e00a:	ea23 0302 	bic.w	r3, r3, r2
    e00e:	60ab      	str	r3, [r5, #8]
    e010:	9801      	ldr	r0, [sp, #4]
    e012:	4434      	add	r4, r6
    e014:	f7ff fe9c 	bl	dd50 <am_hal_interrupt_master_set>
    e018:	20a0      	movs	r0, #160	; 0xa0
    e01a:	f7ff fcc1 	bl	d9a0 <am_hal_flash_delay>
    e01e:	69ab      	ldr	r3, [r5, #24]
    e020:	6864      	ldr	r4, [r4, #4]
    e022:	4223      	tst	r3, r4
    e024:	d003      	beq.n	e02e <am_hal_pwrctrl_periph_disable+0x3e>
    e026:	20a0      	movs	r0, #160	; 0xa0
    e028:	f7ff fcba 	bl	d9a0 <am_hal_flash_delay>
    e02c:	69ab      	ldr	r3, [r5, #24]
    e02e:	4b04      	ldr	r3, [pc, #16]	; (e040 <am_hal_pwrctrl_periph_disable+0x50>)
    e030:	699b      	ldr	r3, [r3, #24]
    e032:	4223      	tst	r3, r4
    e034:	bf14      	ite	ne
    e036:	2001      	movne	r0, #1
    e038:	2000      	moveq	r0, #0
    e03a:	b002      	add	sp, #8
    e03c:	bd70      	pop	{r4, r5, r6, pc}
    e03e:	bf00      	nop
    e040:	40021000 	.word	0x40021000
    e044:	0000e8f4 	.word	0x0000e8f4

0000e048 <am_hal_pwrctrl_low_power_init>:
    e048:	b530      	push	{r4, r5, lr}
    e04a:	4b33      	ldr	r3, [pc, #204]	; (e118 <am_hal_pwrctrl_low_power_init+0xd0>)
    e04c:	681a      	ldr	r2, [r3, #0]
    e04e:	b085      	sub	sp, #20
    e050:	b912      	cbnz	r2, e058 <am_hal_pwrctrl_low_power_init+0x10>
    e052:	4a32      	ldr	r2, [pc, #200]	; (e11c <am_hal_pwrctrl_low_power_init+0xd4>)
    e054:	6812      	ldr	r2, [r2, #0]
    e056:	601a      	str	r2, [r3, #0]
    e058:	4b31      	ldr	r3, [pc, #196]	; (e120 <am_hal_pwrctrl_low_power_init+0xd8>)
    e05a:	68db      	ldr	r3, [r3, #12]
    e05c:	b2db      	uxtb	r3, r3
    e05e:	2b12      	cmp	r3, #18
    e060:	d00a      	beq.n	e078 <am_hal_pwrctrl_low_power_init+0x30>
    e062:	4c30      	ldr	r4, [pc, #192]	; (e124 <am_hal_pwrctrl_low_power_init+0xdc>)
    e064:	2100      	movs	r1, #0
    e066:	200c      	movs	r0, #12
    e068:	f7ff fa7e 	bl	d568 <am_hal_cachectrl_control>
    e06c:	69a3      	ldr	r3, [r4, #24]
    e06e:	05d8      	lsls	r0, r3, #23
    e070:	d520      	bpl.n	e0b4 <am_hal_pwrctrl_low_power_init+0x6c>
    e072:	2000      	movs	r0, #0
    e074:	b005      	add	sp, #20
    e076:	bd30      	pop	{r4, r5, pc}
    e078:	4c2a      	ldr	r4, [pc, #168]	; (e124 <am_hal_pwrctrl_low_power_init+0xdc>)
    e07a:	6863      	ldr	r3, [r4, #4]
    e07c:	07d9      	lsls	r1, r3, #31
    e07e:	d5f0      	bpl.n	e062 <am_hal_pwrctrl_low_power_init+0x1a>
    e080:	f7ff fe62 	bl	dd48 <am_hal_interrupt_master_disable>
    e084:	9003      	str	r0, [sp, #12]
    e086:	68a3      	ldr	r3, [r4, #8]
    e088:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    e08c:	60a3      	str	r3, [r4, #8]
    e08e:	9803      	ldr	r0, [sp, #12]
    e090:	f7ff fe5e 	bl	dd50 <am_hal_interrupt_master_set>
    e094:	20a0      	movs	r0, #160	; 0xa0
    e096:	f7ff fc83 	bl	d9a0 <am_hal_flash_delay>
    e09a:	69a3      	ldr	r3, [r4, #24]
    e09c:	061a      	lsls	r2, r3, #24
    e09e:	d403      	bmi.n	e0a8 <am_hal_pwrctrl_low_power_init+0x60>
    e0a0:	20a0      	movs	r0, #160	; 0xa0
    e0a2:	f7ff fc7d 	bl	d9a0 <am_hal_flash_delay>
    e0a6:	69a3      	ldr	r3, [r4, #24]
    e0a8:	4b1e      	ldr	r3, [pc, #120]	; (e124 <am_hal_pwrctrl_low_power_init+0xdc>)
    e0aa:	699b      	ldr	r3, [r3, #24]
    e0ac:	061b      	lsls	r3, r3, #24
    e0ae:	d4d8      	bmi.n	e062 <am_hal_pwrctrl_low_power_init+0x1a>
    e0b0:	2001      	movs	r0, #1
    e0b2:	e7df      	b.n	e074 <am_hal_pwrctrl_low_power_init+0x2c>
    e0b4:	4d1a      	ldr	r5, [pc, #104]	; (e120 <am_hal_pwrctrl_low_power_init+0xd8>)
    e0b6:	491c      	ldr	r1, [pc, #112]	; (e128 <am_hal_pwrctrl_low_power_init+0xe0>)
    e0b8:	7e2a      	ldrb	r2, [r5, #24]
    e0ba:	2001      	movs	r0, #1
    e0bc:	4302      	orrs	r2, r0
    e0be:	2307      	movs	r3, #7
    e0c0:	762a      	strb	r2, [r5, #24]
    e0c2:	9000      	str	r0, [sp, #0]
    e0c4:	461a      	mov	r2, r3
    e0c6:	f242 7010 	movw	r0, #10000	; 0x2710
    e0ca:	f7ff fc79 	bl	d9c0 <am_hal_flash_delay_status_check>
    e0ce:	b110      	cbz	r0, e0d6 <am_hal_pwrctrl_low_power_init+0x8e>
    e0d0:	2004      	movs	r0, #4
    e0d2:	b005      	add	sp, #20
    e0d4:	bd30      	pop	{r4, r5, pc}
    e0d6:	6823      	ldr	r3, [r4, #0]
    e0d8:	f043 0301 	orr.w	r3, r3, #1
    e0dc:	6023      	str	r3, [r4, #0]
    e0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e0e4:	6263      	str	r3, [r4, #36]	; 0x24
    e0e6:	68eb      	ldr	r3, [r5, #12]
    e0e8:	b2db      	uxtb	r3, r3
    e0ea:	2b11      	cmp	r3, #17
    e0ec:	d1c1      	bne.n	e072 <am_hal_pwrctrl_low_power_init+0x2a>
    e0ee:	f8d5 335c 	ldr.w	r3, [r5, #860]	; 0x35c
    e0f2:	f360 5356 	bfi	r3, r0, #21, #2
    e0f6:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    e0fa:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e0fe:	220f      	movs	r2, #15
    e100:	f362 138b 	bfi	r3, r2, #6, #6
    e104:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e108:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
    e10c:	f362 0305 	bfi	r3, r2, #0, #6
    e110:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
    e114:	e7ae      	b.n	e074 <am_hal_pwrctrl_low_power_init+0x2c>
    e116:	bf00      	nop
    e118:	10001144 	.word	0x10001144
    e11c:	4ffff000 	.word	0x4ffff000
    e120:	40020000 	.word	0x40020000
    e124:	40021000 	.word	0x40021000
    e128:	40020018 	.word	0x40020018

0000e12c <am_hal_rtc_osc_disable>:
    e12c:	4a03      	ldr	r2, [pc, #12]	; (e13c <am_hal_rtc_osc_disable+0x10>)
    e12e:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    e132:	f043 0310 	orr.w	r3, r3, #16
    e136:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
    e13a:	4770      	bx	lr
    e13c:	40004200 	.word	0x40004200

0000e140 <am_hal_security_get_info>:
    e140:	b510      	push	{r4, lr}
    e142:	b082      	sub	sp, #8
    e144:	b1c8      	cbz	r0, e17a <am_hal_security_get_info+0x3a>
    e146:	4b23      	ldr	r3, [pc, #140]	; (e1d4 <am_hal_security_get_info+0x94>)
    e148:	4a23      	ldr	r2, [pc, #140]	; (e1d8 <am_hal_security_get_info+0x98>)
    e14a:	681b      	ldr	r3, [r3, #0]
    e14c:	6043      	str	r3, [r0, #4]
    e14e:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
    e152:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e156:	7003      	strb	r3, [r0, #0]
    e158:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    e15c:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
    e160:	d008      	beq.n	e174 <am_hal_security_get_info+0x34>
    e162:	4b1e      	ldr	r3, [pc, #120]	; (e1dc <am_hal_security_get_info+0x9c>)
    e164:	4a1e      	ldr	r2, [pc, #120]	; (e1e0 <am_hal_security_get_info+0xa0>)
    e166:	681b      	ldr	r3, [r3, #0]
    e168:	6812      	ldr	r2, [r2, #0]
    e16a:	681b      	ldr	r3, [r3, #0]
    e16c:	6811      	ldr	r1, [r2, #0]
    e16e:	0e1a      	lsrs	r2, r3, #24
    e170:	2aa3      	cmp	r2, #163	; 0xa3
    e172:	d005      	beq.n	e180 <am_hal_security_get_info+0x40>
    e174:	2001      	movs	r0, #1
    e176:	b002      	add	sp, #8
    e178:	bd10      	pop	{r4, pc}
    e17a:	2006      	movs	r0, #6
    e17c:	b002      	add	sp, #8
    e17e:	bd10      	pop	{r4, pc}
    e180:	4a18      	ldr	r2, [pc, #96]	; (e1e4 <am_hal_security_get_info+0xa4>)
    e182:	4293      	cmp	r3, r2
    e184:	d018      	beq.n	e1b8 <am_hal_security_get_info+0x78>
    e186:	4a18      	ldr	r2, [pc, #96]	; (e1e8 <am_hal_security_get_info+0xa8>)
    e188:	4293      	cmp	r3, r2
    e18a:	d01e      	beq.n	e1ca <am_hal_security_get_info+0x8a>
    e18c:	4a17      	ldr	r2, [pc, #92]	; (e1ec <am_hal_security_get_info+0xac>)
    e18e:	4293      	cmp	r3, r2
    e190:	d104      	bne.n	e19c <am_hal_security_get_info+0x5c>
    e192:	4b17      	ldr	r3, [pc, #92]	; (e1f0 <am_hal_security_get_info+0xb0>)
    e194:	4299      	cmp	r1, r3
    e196:	bf08      	it	eq
    e198:	2202      	moveq	r2, #2
    e19a:	d011      	beq.n	e1c0 <am_hal_security_get_info+0x80>
    e19c:	4604      	mov	r4, r0
    e19e:	f240 13d1 	movw	r3, #465	; 0x1d1
    e1a2:	a801      	add	r0, sp, #4
    e1a4:	4798      	blx	r3
    e1a6:	2800      	cmp	r0, #0
    e1a8:	d1e5      	bne.n	e176 <am_hal_security_get_info+0x36>
    e1aa:	9b01      	ldr	r3, [sp, #4]
    e1ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
    e1b0:	0bdb      	lsrs	r3, r3, #15
    e1b2:	60a2      	str	r2, [r4, #8]
    e1b4:	60e3      	str	r3, [r4, #12]
    e1b6:	e7de      	b.n	e176 <am_hal_security_get_info+0x36>
    e1b8:	4b0e      	ldr	r3, [pc, #56]	; (e1f4 <am_hal_security_get_info+0xb4>)
    e1ba:	4299      	cmp	r1, r3
    e1bc:	d1ee      	bne.n	e19c <am_hal_security_get_info+0x5c>
    e1be:	2200      	movs	r2, #0
    e1c0:	2300      	movs	r3, #0
    e1c2:	6082      	str	r2, [r0, #8]
    e1c4:	60c3      	str	r3, [r0, #12]
    e1c6:	4618      	mov	r0, r3
    e1c8:	e7d5      	b.n	e176 <am_hal_security_get_info+0x36>
    e1ca:	4b0b      	ldr	r3, [pc, #44]	; (e1f8 <am_hal_security_get_info+0xb8>)
    e1cc:	4299      	cmp	r1, r3
    e1ce:	d1e5      	bne.n	e19c <am_hal_security_get_info+0x5c>
    e1d0:	2201      	movs	r2, #1
    e1d2:	e7f5      	b.n	e1c0 <am_hal_security_get_info+0x80>
    e1d4:	50020040 	.word	0x50020040
    e1d8:	40020000 	.word	0x40020000
    e1dc:	10001148 	.word	0x10001148
    e1e0:	10001034 	.word	0x10001034
    e1e4:	a3007860 	.word	0xa3007860
    e1e8:	a3007e14 	.word	0xa3007e14
    e1ec:	a3008290 	.word	0xa3008290
    e1f0:	b49cecd5 	.word	0xb49cecd5
    e1f4:	2e2638fb 	.word	0x2e2638fb
    e1f8:	5ee4e461 	.word	0x5ee4e461

0000e1fc <am_hal_sysctrl_sleep>:
    e1fc:	b510      	push	{r4, lr}
    e1fe:	b082      	sub	sp, #8
    e200:	4604      	mov	r4, r0
    e202:	f7ff fda1 	bl	dd48 <am_hal_interrupt_master_disable>
    e206:	9001      	str	r0, [sp, #4]
    e208:	b124      	cbz	r4, e214 <am_hal_sysctrl_sleep+0x18>
    e20a:	4b12      	ldr	r3, [pc, #72]	; (e254 <am_hal_sysctrl_sleep+0x58>)
    e20c:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
    e210:	07db      	lsls	r3, r3, #31
    e212:	d512      	bpl.n	e23a <am_hal_sysctrl_sleep+0x3e>
    e214:	4a10      	ldr	r2, [pc, #64]	; (e258 <am_hal_sysctrl_sleep+0x5c>)
    e216:	6913      	ldr	r3, [r2, #16]
    e218:	f023 0304 	bic.w	r3, r3, #4
    e21c:	6113      	str	r3, [r2, #16]
    e21e:	f3bf 8f4f 	dsb	sy
    e222:	4a0e      	ldr	r2, [pc, #56]	; (e25c <am_hal_sysctrl_sleep+0x60>)
    e224:	4b0e      	ldr	r3, [pc, #56]	; (e260 <am_hal_sysctrl_sleep+0x64>)
    e226:	6812      	ldr	r2, [r2, #0]
    e228:	601a      	str	r2, [r3, #0]
    e22a:	bf30      	wfi
    e22c:	f3bf 8f6f 	isb	sy
    e230:	9801      	ldr	r0, [sp, #4]
    e232:	f7ff fd8d 	bl	dd50 <am_hal_interrupt_master_set>
    e236:	b002      	add	sp, #8
    e238:	bd10      	pop	{r4, pc}
    e23a:	4b0a      	ldr	r3, [pc, #40]	; (e264 <am_hal_sysctrl_sleep+0x68>)
    e23c:	681a      	ldr	r2, [r3, #0]
    e23e:	b912      	cbnz	r2, e246 <am_hal_sysctrl_sleep+0x4a>
    e240:	4a09      	ldr	r2, [pc, #36]	; (e268 <am_hal_sysctrl_sleep+0x6c>)
    e242:	6812      	ldr	r2, [r2, #0]
    e244:	601a      	str	r2, [r3, #0]
    e246:	4a04      	ldr	r2, [pc, #16]	; (e258 <am_hal_sysctrl_sleep+0x5c>)
    e248:	6913      	ldr	r3, [r2, #16]
    e24a:	f043 0304 	orr.w	r3, r3, #4
    e24e:	6113      	str	r3, [r2, #16]
    e250:	e7e5      	b.n	e21e <am_hal_sysctrl_sleep+0x22>
    e252:	bf00      	nop
    e254:	40020000 	.word	0x40020000
    e258:	e000ed00 	.word	0xe000ed00
    e25c:	5fff0000 	.word	0x5fff0000
    e260:	1000114c 	.word	0x1000114c
    e264:	10001144 	.word	0x10001144
    e268:	4ffff000 	.word	0x4ffff000

0000e26c <am_hal_tpiu_enable>:
    e26c:	b530      	push	{r4, r5, lr}
    e26e:	4a23      	ldr	r2, [pc, #140]	; (e2fc <am_hal_tpiu_enable+0x90>)
    e270:	6804      	ldr	r4, [r0, #0]
    e272:	2300      	movs	r3, #0
    e274:	b085      	sub	sp, #20
    e276:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    e27a:	b334      	cbz	r4, e2ca <am_hal_tpiu_enable+0x5e>
    e27c:	4b20      	ldr	r3, [pc, #128]	; (e300 <am_hal_tpiu_enable+0x94>)
    e27e:	4921      	ldr	r1, [pc, #132]	; (e304 <am_hal_tpiu_enable+0x98>)
    e280:	2001      	movs	r0, #1
    e282:	6050      	str	r0, [r2, #4]
    e284:	f5a4 4261 	sub.w	r2, r4, #57600	; 0xe100
    e288:	a801      	add	r0, sp, #4
    e28a:	428a      	cmp	r2, r1
    e28c:	bf88      	it	hi
    e28e:	461c      	movhi	r4, r3
    e290:	f7ff fb68 	bl	d964 <am_hal_clkgen_status_get>
    e294:	9b01      	ldr	r3, [sp, #4]
    e296:	1c5a      	adds	r2, r3, #1
    e298:	d02d      	beq.n	e2f6 <am_hal_tpiu_enable+0x8a>
    e29a:	08db      	lsrs	r3, r3, #3
    e29c:	fbb3 f3f4 	udiv	r3, r3, r4
    e2a0:	3b01      	subs	r3, #1
    e2a2:	b29b      	uxth	r3, r3
    e2a4:	4a15      	ldr	r2, [pc, #84]	; (e2fc <am_hal_tpiu_enable+0x90>)
    e2a6:	4918      	ldr	r1, [pc, #96]	; (e308 <am_hal_tpiu_enable+0x9c>)
    e2a8:	6113      	str	r3, [r2, #16]
    e2aa:	2402      	movs	r4, #2
    e2ac:	f240 2301 	movw	r3, #513	; 0x201
    e2b0:	2000      	movs	r0, #0
    e2b2:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0
    e2b6:	f8c2 0f00 	str.w	r0, [r2, #3840]	; 0xf00
    e2ba:	f8c1 3250 	str.w	r3, [r1, #592]	; 0x250
    e2be:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2c2:	f7ff fb6d 	bl	d9a0 <am_hal_flash_delay>
    e2c6:	b005      	add	sp, #20
    e2c8:	bd30      	pop	{r4, r5, pc}
    e2ca:	6903      	ldr	r3, [r0, #16]
    e2cc:	6113      	str	r3, [r2, #16]
    e2ce:	6883      	ldr	r3, [r0, #8]
    e2d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    e2d4:	68c3      	ldr	r3, [r0, #12]
    e2d6:	4d0c      	ldr	r5, [pc, #48]	; (e308 <am_hal_tpiu_enable+0x9c>)
    e2d8:	1e59      	subs	r1, r3, #1
    e2da:	2301      	movs	r3, #1
    e2dc:	408b      	lsls	r3, r1
    e2de:	6053      	str	r3, [r2, #4]
    e2e0:	f8c2 4f00 	str.w	r4, [r2, #3840]	; 0xf00
    e2e4:	6843      	ldr	r3, [r0, #4]
    e2e6:	f8c5 3250 	str.w	r3, [r5, #592]	; 0x250
    e2ea:	f44f 7048 	mov.w	r0, #800	; 0x320
    e2ee:	f7ff fb57 	bl	d9a0 <am_hal_flash_delay>
    e2f2:	b005      	add	sp, #20
    e2f4:	bd30      	pop	{r4, r5, pc}
    e2f6:	2305      	movs	r3, #5
    e2f8:	e7d4      	b.n	e2a4 <am_hal_tpiu_enable+0x38>
    e2fa:	bf00      	nop
    e2fc:	e0040000 	.word	0xe0040000
    e300:	000f4240 	.word	0x000f4240
    e304:	001da380 	.word	0x001da380
    e308:	40020000 	.word	0x40020000

0000e30c <am_hal_uart_deinitialize>:
    e30c:	b128      	cbz	r0, e31a <am_hal_uart_deinitialize+0xe>
    e30e:	6803      	ldr	r3, [r0, #0]
    e310:	4a07      	ldr	r2, [pc, #28]	; (e330 <am_hal_uart_deinitialize+0x24>)
    e312:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e316:	4293      	cmp	r3, r2
    e318:	d001      	beq.n	e31e <am_hal_uart_deinitialize+0x12>
    e31a:	2002      	movs	r0, #2
    e31c:	4770      	bx	lr
    e31e:	78c2      	ldrb	r2, [r0, #3]
    e320:	2300      	movs	r3, #0
    e322:	f36f 0200 	bfc	r2, #0, #1
    e326:	70c2      	strb	r2, [r0, #3]
    e328:	6243      	str	r3, [r0, #36]	; 0x24
    e32a:	7103      	strb	r3, [r0, #4]
    e32c:	4618      	mov	r0, r3
    e32e:	4770      	bx	lr
    e330:	01ea9e06 	.word	0x01ea9e06

0000e334 <am_hal_uart_power_control>:
    e334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e338:	6804      	ldr	r4, [r0, #0]
    e33a:	4b36      	ldr	r3, [pc, #216]	; (e414 <am_hal_uart_power_control+0xe0>)
    e33c:	f024 447e 	bic.w	r4, r4, #4261412864	; 0xfe000000
    e340:	429c      	cmp	r4, r3
    e342:	b083      	sub	sp, #12
    e344:	d003      	beq.n	e34e <am_hal_uart_power_control+0x1a>
    e346:	2002      	movs	r0, #2
    e348:	b003      	add	sp, #12
    e34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e34e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    e350:	4605      	mov	r5, r0
    e352:	f107 0008 	add.w	r0, r7, #8
    e356:	4691      	mov	r9, r2
    e358:	460e      	mov	r6, r1
    e35a:	fa5f f880 	uxtb.w	r8, r0
    e35e:	b181      	cbz	r1, e382 <am_hal_uart_power_control+0x4e>
    e360:	2902      	cmp	r1, #2
    e362:	d80c      	bhi.n	e37e <am_hal_uart_power_control+0x4a>
    e364:	b992      	cbnz	r2, e38c <am_hal_uart_power_control+0x58>
    e366:	f507 2780 	add.w	r7, r7, #262144	; 0x40000
    e36a:	371c      	adds	r7, #28
    e36c:	033f      	lsls	r7, r7, #12
    e36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e372:	647b      	str	r3, [r7, #68]	; 0x44
    e374:	4640      	mov	r0, r8
    e376:	f7ff fe3b 	bl	dff0 <am_hal_pwrctrl_periph_disable>
    e37a:	2000      	movs	r0, #0
    e37c:	e7e4      	b.n	e348 <am_hal_uart_power_control+0x14>
    e37e:	2006      	movs	r0, #6
    e380:	e7e2      	b.n	e348 <am_hal_uart_power_control+0x14>
    e382:	b322      	cbz	r2, e3ce <am_hal_uart_power_control+0x9a>
    e384:	792b      	ldrb	r3, [r5, #4]
    e386:	bb3b      	cbnz	r3, e3d8 <am_hal_uart_power_control+0xa4>
    e388:	2007      	movs	r0, #7
    e38a:	e7dd      	b.n	e348 <am_hal_uart_power_control+0x14>
    e38c:	f7ff fcdc 	bl	dd48 <am_hal_interrupt_master_disable>
    e390:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e394:	331c      	adds	r3, #28
    e396:	031b      	lsls	r3, r3, #12
    e398:	9001      	str	r0, [sp, #4]
    e39a:	6a1a      	ldr	r2, [r3, #32]
    e39c:	60aa      	str	r2, [r5, #8]
    e39e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e3a0:	60ea      	str	r2, [r5, #12]
    e3a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e3a4:	612a      	str	r2, [r5, #16]
    e3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3a8:	616a      	str	r2, [r5, #20]
    e3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e3ac:	61aa      	str	r2, [r5, #24]
    e3ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e3b0:	61ea      	str	r2, [r5, #28]
    e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e3b4:	622b      	str	r3, [r5, #32]
    e3b6:	2301      	movs	r3, #1
    e3b8:	712b      	strb	r3, [r5, #4]
    e3ba:	9801      	ldr	r0, [sp, #4]
    e3bc:	f7ff fcc8 	bl	dd50 <am_hal_interrupt_master_set>
    e3c0:	682b      	ldr	r3, [r5, #0]
    e3c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    e3c6:	42a3      	cmp	r3, r4
    e3c8:	d1d4      	bne.n	e374 <am_hal_uart_power_control+0x40>
    e3ca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    e3cc:	e7cb      	b.n	e366 <am_hal_uart_power_control+0x32>
    e3ce:	4640      	mov	r0, r8
    e3d0:	f7ff fde4 	bl	df9c <am_hal_pwrctrl_periph_enable>
    e3d4:	4648      	mov	r0, r9
    e3d6:	e7b7      	b.n	e348 <am_hal_uart_power_control+0x14>
    e3d8:	4640      	mov	r0, r8
    e3da:	f7ff fddf 	bl	df9c <am_hal_pwrctrl_periph_enable>
    e3de:	f7ff fcb3 	bl	dd48 <am_hal_interrupt_master_disable>
    e3e2:	f507 2380 	add.w	r3, r7, #262144	; 0x40000
    e3e6:	331c      	adds	r3, #28
    e3e8:	031b      	lsls	r3, r3, #12
    e3ea:	68aa      	ldr	r2, [r5, #8]
    e3ec:	9000      	str	r0, [sp, #0]
    e3ee:	621a      	str	r2, [r3, #32]
    e3f0:	68ea      	ldr	r2, [r5, #12]
    e3f2:	625a      	str	r2, [r3, #36]	; 0x24
    e3f4:	692a      	ldr	r2, [r5, #16]
    e3f6:	629a      	str	r2, [r3, #40]	; 0x28
    e3f8:	696a      	ldr	r2, [r5, #20]
    e3fa:	62da      	str	r2, [r3, #44]	; 0x2c
    e3fc:	69aa      	ldr	r2, [r5, #24]
    e3fe:	631a      	str	r2, [r3, #48]	; 0x30
    e400:	69ea      	ldr	r2, [r5, #28]
    e402:	635a      	str	r2, [r3, #52]	; 0x34
    e404:	6a2a      	ldr	r2, [r5, #32]
    e406:	639a      	str	r2, [r3, #56]	; 0x38
    e408:	9800      	ldr	r0, [sp, #0]
    e40a:	712e      	strb	r6, [r5, #4]
    e40c:	f7ff fca0 	bl	dd50 <am_hal_interrupt_master_set>
    e410:	4630      	mov	r0, r6
    e412:	e799      	b.n	e348 <am_hal_uart_power_control+0x14>
    e414:	01ea9e06 	.word	0x01ea9e06

0000e418 <am_hal_uart_tx_flush>:
    e418:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    e41c:	b570      	push	{r4, r5, r6, lr}
    e41e:	4604      	mov	r4, r0
    e420:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e422:	b15b      	cbz	r3, e43c <am_hal_uart_tx_flush+0x24>
    e424:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e426:	b14b      	cbz	r3, e43c <am_hal_uart_tx_flush+0x24>
    e428:	4e0e      	ldr	r6, [pc, #56]	; (e464 <am_hal_uart_tx_flush+0x4c>)
    e42a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e42c:	fbb6 f0f0 	udiv	r0, r6, r0
    e430:	0100      	lsls	r0, r0, #4
    e432:	f7ff fab5 	bl	d9a0 <am_hal_flash_delay>
    e436:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e438:	2b00      	cmp	r3, #0
    e43a:	d1f6      	bne.n	e42a <am_hal_uart_tx_flush+0x12>
    e43c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    e440:	351c      	adds	r5, #28
    e442:	032d      	lsls	r5, r5, #12
    e444:	69ab      	ldr	r3, [r5, #24]
    e446:	071a      	lsls	r2, r3, #28
    e448:	d509      	bpl.n	e45e <am_hal_uart_tx_flush+0x46>
    e44a:	4e06      	ldr	r6, [pc, #24]	; (e464 <am_hal_uart_tx_flush+0x4c>)
    e44c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    e44e:	fbb6 f0f0 	udiv	r0, r6, r0
    e452:	0100      	lsls	r0, r0, #4
    e454:	f7ff faa4 	bl	d9a0 <am_hal_flash_delay>
    e458:	69ab      	ldr	r3, [r5, #24]
    e45a:	071b      	lsls	r3, r3, #28
    e45c:	d4f6      	bmi.n	e44c <am_hal_uart_tx_flush+0x34>
    e45e:	2000      	movs	r0, #0
    e460:	bd70      	pop	{r4, r5, r6, pc}
    e462:	bf00      	nop
    e464:	00b71b00 	.word	0x00b71b00
    e468:	6c6c6548 	.word	0x6c6c6548
    e46c:	6f57206f 	.word	0x6f57206f
    e470:	21646c72 	.word	0x21646c72
    e474:	00000a0a 	.word	0x00000a0a
    e478:	646e6556 	.word	0x646e6556
    e47c:	4e20726f 	.word	0x4e20726f
    e480:	3a656d61 	.word	0x3a656d61
    e484:	0a732520 	.word	0x0a732520
    e488:	00000000 	.word	0x00000000
    e48c:	69766544 	.word	0x69766544
    e490:	74206563 	.word	0x74206563
    e494:	3a657079 	.word	0x3a657079
    e498:	0a732520 	.word	0x0a732520
    e49c:	00000000 	.word	0x00000000
    e4a0:	00736559 	.word	0x00736559
    e4a4:	00006f4e 	.word	0x00006f4e
    e4a8:	6c617551 	.word	0x6c617551
    e4ac:	65696669 	.word	0x65696669
    e4b0:	25203a64 	.word	0x25203a64
    e4b4:	00000a73 	.word	0x00000a73
    e4b8:	69766544 	.word	0x69766544
    e4bc:	49206563 	.word	0x49206563
    e4c0:	3a6f666e 	.word	0x3a6f666e
    e4c4:	6150090a 	.word	0x6150090a
    e4c8:	6e207472 	.word	0x6e207472
    e4cc:	65626d75 	.word	0x65626d75
    e4d0:	30203a72 	.word	0x30203a72
    e4d4:	38302578 	.word	0x38302578
    e4d8:	43090a58 	.word	0x43090a58
    e4dc:	20706968 	.word	0x20706968
    e4e0:	3a304449 	.word	0x3a304449
    e4e4:	20202020 	.word	0x20202020
    e4e8:	30257830 	.word	0x30257830
    e4ec:	090a5838 	.word	0x090a5838
    e4f0:	70696843 	.word	0x70696843
    e4f4:	31444920 	.word	0x31444920
    e4f8:	2020203a 	.word	0x2020203a
    e4fc:	25783020 	.word	0x25783020
    e500:	0a583830 	.word	0x0a583830
    e504:	76655209 	.word	0x76655209
    e508:	6f697369 	.word	0x6f697369
    e50c:	20203a6e 	.word	0x20203a6e
    e510:	78302020 	.word	0x78302020
    e514:	58383025 	.word	0x58383025
    e518:	65522820 	.word	0x65522820
    e51c:	25632576 	.word	0x25632576
    e520:	000a2963 	.word	0x000a2963
    e524:	616c4609 	.word	0x616c4609
    e528:	73206873 	.word	0x73206873
    e52c:	3a657a69 	.word	0x3a657a69
    e530:	37252020 	.word	0x37252020
    e534:	25282064 	.word	0x25282064
    e538:	424b2064 	.word	0x424b2064
    e53c:	0a297325 	.word	0x0a297325
    e540:	00000000 	.word	0x00000000
    e544:	41525309 	.word	0x41525309
    e548:	6973204d 	.word	0x6973204d
    e54c:	203a657a 	.word	0x203a657a
    e550:	37252020 	.word	0x37252020
    e554:	25282064 	.word	0x25282064
    e558:	424b2064 	.word	0x424b2064
    e55c:	0a297325 	.word	0x0a297325
    e560:	0000000a 	.word	0x0000000a
    e564:	20434347 	.word	0x20434347
    e568:	2e332e36 	.word	0x2e332e36
    e56c:	30322031 	.word	0x30322031
    e570:	36303731 	.word	0x36303731
    e574:	00003032 	.word	0x00003032
    e578:	20707041 	.word	0x20707041
    e57c:	706d6f43 	.word	0x706d6f43
    e580:	72656c69 	.word	0x72656c69
    e584:	2020203a 	.word	0x2020203a
    e588:	0a732520 	.word	0x0a732520
    e58c:	00000000 	.word	0x00000000
    e590:	204c4148 	.word	0x204c4148
    e594:	706d6f43 	.word	0x706d6f43
    e598:	72656c69 	.word	0x72656c69
    e59c:	2020203a 	.word	0x2020203a
    e5a0:	0a732520 	.word	0x0a732520
    e5a4:	00000000 	.word	0x00000000
    e5a8:	204c4148 	.word	0x204c4148
    e5ac:	204b4453 	.word	0x204b4453
    e5b0:	73726576 	.word	0x73726576
    e5b4:	3a6e6f69 	.word	0x3a6e6f69
    e5b8:	2e642520 	.word	0x2e642520
    e5bc:	252e6425 	.word	0x252e6425
    e5c0:	00000a64 	.word	0x00000a64
    e5c4:	525f4d41 	.word	0x525f4d41
    e5c8:	00004745 	.word	0x00004745
    e5cc:	49534d43 	.word	0x49534d43
    e5d0:	00000053 	.word	0x00000053
    e5d4:	204c4148 	.word	0x204c4148
    e5d8:	706d6f63 	.word	0x706d6f63
    e5dc:	64656c69 	.word	0x64656c69
    e5e0:	74697720 	.word	0x74697720
    e5e4:	73252068 	.word	0x73252068
    e5e8:	7974732d 	.word	0x7974732d
    e5ec:	7220656c 	.word	0x7220656c
    e5f0:	73696765 	.word	0x73696765
    e5f4:	73726574 	.word	0x73726574
    e5f8:	0000000a 	.word	0x0000000a
    e5fc:	4f464e49 	.word	0x4f464e49
    e600:	61762030 	.word	0x61762030
    e604:	2c64696c 	.word	0x2c64696c
    e608:	72657620 	.word	0x72657620
    e60c:	25783020 	.word	0x25783020
    e610:	00000058 	.word	0x00000058
    e614:	4f464e49 	.word	0x4f464e49
    e618:	6e692030 	.word	0x6e692030
    e61c:	696c6176 	.word	0x696c6176
    e620:	00000064 	.word	0x00000064
    e624:	204c4253 	.word	0x204c4253
    e628:	3a726576 	.word	0x3a726576
    e62c:	25783020 	.word	0x25783020
    e630:	202d2078 	.word	0x202d2078
    e634:	78257830 	.word	0x78257830
    e638:	7325202c 	.word	0x7325202c
    e63c:	0000000a 	.word	0x0000000a
    e640:	685f6d61 	.word	0x685f6d61
    e644:	735f6c61 	.word	0x735f6c61
    e648:	72756365 	.word	0x72756365
    e64c:	5f797469 	.word	0x5f797469
    e650:	5f746567 	.word	0x5f746567
    e654:	6f666e69 	.word	0x6f666e69
    e658:	69616620 	.word	0x69616620
    e65c:	2064656c 	.word	0x2064656c
    e660:	58257830 	.word	0x58257830
    e664:	0000000a 	.word	0x0000000a
    e668:	0a0a0a0a 	.word	0x0a0a0a0a
    e66c:	0a0a0a0a 	.word	0x0a0a0a0a
    e670:	0a0a0a0a 	.word	0x0a0a0a0a
    e674:	0a0a0a0a 	.word	0x0a0a0a0a
    e678:	00000a0a 	.word	0x00000a0a

0000e67c <g_DeviceNameApollo>:
    e67c:	6c6f7041 00006f6c                       Apollo..

0000e684 <g_DeviceNameApollo2>:
    e684:	6c6f7041 00326f6c                       Apollo2.

0000e68c <g_DeviceNameApollo3>:
    e68c:	6c6f7041 00336f6c                       Apollo3.

0000e694 <g_ui8VendorNameAmbq>:
    e694:	51424d41 00000000                       AMBQ....

0000e69c <g_ui8VendorNameUnknown>:
    e69c:	3f3f3f3f 00000000                       ????....

0000e6a4 <g_ui8DeviceNameUnknown>:
    e6a4:	6e6b6e55 206e776f 69766564 00006563     Unknown device..

0000e6b4 <g_AM_BSP_GPIO_ITM_SWO>:
    e6b4:	00000002                                ....

0000e6b8 <am_hal_cachectrl_defaults>:
    e6b8:	00000308                                ....

0000e6bc <g_ui8HALcompiler>:
    e6bc:	20434347 2e342e35 30322031 39303631     GCC 5.4.1 201609
    e6cc:	28203931 656c6572 29657361 52415b20     19 (release) [AR
    e6dc:	6d652f4d 64646562 352d6465 6172622d     M/embedded-5-bra
    e6ec:	2068636e 69766572 6e6f6973 30343220     nch revision 240
    e6fc:	5d363934 00000000                       496]....

0000e704 <g_ui32HALversion>:
    e704:	02020000                                ....

0000e708 <g_ui8Bit76Capabilities>:
    e708:	02800101 80010180 80800101 80808080     ................
    e718:	80808080 80808008 01800180 80808080     ................
    e728:	80808080 01800402 01010401 80808080     ................
    e738:	00000101                                ....

0000e73c <g_ui8NCEtable>:
    e73c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    e74c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    e75c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    e76c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    e77c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    e78c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    e79c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    e7ac:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    e7bc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    e7cc:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    e7dc:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    e7ec:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    e7fc:	32221202 43231303                       .."2..#C

0000e804 <g_ui8Inpen>:
    e804:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    e814:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    e824:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    e834:	00003130                                01..

0000e838 <g_AM_HAL_GPIO_DISABLE>:
    e838:	00000003                                ....

0000e83c <g_AM_HAL_GPIO_OUTPUT>:
    e83c:	00000403                                ....

0000e840 <g_ui8nCEpins>:
    e840:	02070707 00080802 01020202 01010101     ................
    e850:	01010101 01010101 01010101 01010101     ................
    e860:	01010101 08010101 01010008 01010101     ................
    e870:	00000101                                ....

0000e874 <g_am_hal_mcuctrl_flash_size>:
    e874:	00004000 00008000 00010000 00020000     .@..............
    e884:	00040000 00080000 00100000 00200000     .............. .
    e894:	00180000 00000000 00000000 00000000     ................
	...

0000e8b4 <g_am_hal_mcuctrl_sram_size>:
    e8b4:	00004000 00008000 00010000 00020000     .@..............
    e8c4:	00040000 00080000 00100000 00060000     ................
    e8d4:	000c0000 00000000 00000000 00000000     ................
	...

0000e8f4 <am_hal_pwrctrl_peripheral_control>:
	...
    e900:	00000001 00000004 00000004 00000002     ................
    e910:	00000008 00000008 00000004 00000008     ................
    e920:	00000008 00000008 00000008 00000008     ................
    e930:	00000010 00000010 00000010 00000020     ............ ...
    e940:	00000010 00000010 00000040 00000010     ........@.......
    e950:	00000010 00000080 00000004 00000004     ................
    e960:	00000100 00000004 00000004 00000200     ................
    e970:	00000020 00000020 00000400 00000004      ... ...........
    e980:	00000004 00000800 00000040 00000040     ........@...@...
    e990:	00001000 00000080 00000080 00002000     ............. ..
    e9a0:	00000100 00000100                       ........
